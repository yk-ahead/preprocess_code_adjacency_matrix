{"ids": "37963", "code": ["protected boolean [ ] dataset Integrity ( boolean nominal Predictor , boolean numeric Predictor , boolean string Predictor , boolean date Predictor , boolean relational Predictor , boolean multi Instance , int class Type , boolean predictor Missing , boolean class Missing ) {", "print ( STR_ ) ;", "print Attribute Summary ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type ) ;", "print ( STR_ ) ;", "int num Train = get Num Instances ( ) , num Classes = NUM_ , missing Level = NUM_ ;", "boolean [ ] result = new boolean [ NUM_ ] ;", "Instances train = null ;", "Kernel kernel = null ;", "try {", "train = make Test Dataset ( NUM_ , num Train , nominal Predictor ? get Num Nominal ( ) : NUM_ , numeric Predictor ? get Num Numeric ( ) : NUM_ , string Predictor ? get Num String ( ) : NUM_ , date Predictor ? get Num Date ( ) : NUM_ , relational Predictor ? get Num Relational ( ) : NUM_ , num Classes , class Type , multi Instance ) ;", "if ( missing Level > NUM_ ) {", "add Missing ( train , missing Level , predictor Missing , class Missing ) ; }", "kernel = Kernel . make Copies ( get Kernel ( ) , NUM_ ) [ NUM_ ] ; }", "catch ( Exception ex ) {", "throw new Error ( STR_ + ex . get Message ( ) ) ; }", "try {", "Instances train Copy = new Instances ( train ) ;", "kernel . build Kernel ( train Copy ) ;", "compare Datasets ( train , train Copy ) ;", "println ( STR_ ) ;", "result [ NUM_ ] = true ; }", "catch ( Exception ex ) {", "println ( STR_ ) ;", "result [ NUM_ ] = false ;", "if ( m Debug ) {", "println ( STR_ ) ;", "print ( STR_ ) ;", "println ( STR_ + ex . get Message ( ) + STR_ ) ;", "println ( STR_ ) ;", "println ( STR_ + train . to String ( ) + STR_ ) ; } }", "return result ; }"]}
{"ids": "38468", "code": ["@ Override public void closing OK ( ) {", "List < Add User Fields . Attribute Spec > specs = new Array List < Add User Fields . Attribute Spec > ( ) ;", "for ( int i = NUM_ ; i < m list Model . size ( ) ; i ++ ) {", "Add User Fields . Attribute Spec a = ( Add User Fields . Attribute Spec ) m list Model . element At ( i ) ;", "specs . add ( a ) ; }", "if ( m modify L != null ) {", "m modify L . set Modified Status ( Add User Fields Customizer . this , true ) ; }", "m filter . set Attribute Specs ( specs ) ; }"]}
{"ids": "20101", "code": ["private static boolean is Double Equal ( double value , double value To Compare ) {", "return ( Math . abs ( value - value To Compare ) < NUM_ ) ; }"]}
{"ids": "7488", "code": ["@ Override public void dataset Changed ( Dataset Change Event event ) {", "super . dataset Changed ( event ) ;", "if ( this . subplots == null ) {", "return ; }", "XY Dataset dataset = null ;", "if ( event . get Dataset ( ) instanceof XY Dataset ) {", "dataset = ( XY Dataset ) event . get Dataset ( ) ; }", "for ( XY Plot subplot : this . subplots ) {", "if ( subplot . index Of ( dataset ) >= NUM_ ) {", "subplot . configure Range Axes ( ) ; } } }"]}
{"ids": "26930", "code": ["public boolean on Schedule As Library ( Config config , Config runtime , I Scheduler scheduler , Packing Plan packing ) {", "boolean ret = false ;", "try {", "scheduler . initialize ( config , runtime ) ;", "ret = scheduler . on Schedule ( packing ) ;", "if ( ret ) {", "ret = Scheduler Utils . set Lib Scheduler Location ( runtime , scheduler , false ) ; }", "else {", "LOG . severe ( STR_ ) ; } }", "finally {", "scheduler . close ( ) ; }", "return ret ; }"]}
{"ids": "66883", "code": ["public static boolean is String Type ( Type t ) {", "return t . equals ( Ref Type . v ( STR_ ) ) ; }"]}
{"ids": "56795", "code": ["private void validate Sql Statement ( String sql , int jdbc Statement Index ) {", "Assert . is True ( String Utils . is Not Blank ( sql ) , STR_ + jdbc Statement Index + STR_ ) ; }"]}
{"ids": "80601", "code": ["private static void use Missile ( Player player ) {", "Stackable Item projectiles Item = null ;", "if ( player . get Range Weapon ( ) != null ) {", "projectiles Item = player . get Ammunition ( ) ; }", "if ( projectiles Item == null ) {", "projectiles Item = player . get Missile If Not Holding Other Weapon ( ) ; }", "if ( projectiles Item != null ) {", "projectiles Item . remove One ( ) ; } }"]}
{"ids": "25383", "code": ["public Tcp Matcher ( final Network Config config ) {", "super ( config ) ; }"]}
{"ids": "20694", "code": ["private int determine Max Level Rec ( int level , Node v ) {", "int new Level = level ;", "for ( Edge e = v . get First Out Edge ( ) ; e != null ; e = v . get Next Out Edge ( e ) ) {", "new Level = Math . max ( new Level , determine Max Level Rec ( level , e . get Target ( ) ) + NUM_ ) ; }", "return new Level ; }"]}
{"ids": "25997", "code": ["private synchronized void put Map Entry ( String local Id , Map Entry entry ) {", "if ( ! is Local Id ( local Id ) ) {", "throw new Illegal State Exception ( STR_ + local Id + STR_ ) ; }", "JSON Object json = new JSON Object ( ) ;", "try {", "json . put ( STR_ , entry . retain Count ) ;", "if ( entry . object Id != null ) {", "json . put ( STR_ , entry . object Id ) ; } }", "catch ( JSON Exception je ) {", "throw new Illegal State Exception ( STR_ , je ) ; }", "File file = new File ( disk Path , local Id ) ;", "if ( ! disk Path . exists ( ) ) {", "disk Path . mkdirs ( ) ; }", "try {", "Parse File Utils . write JSON Object To File ( file , json ) ; }", "catch ( IO Exception e ) { } }"]}
{"ids": "74215", "code": ["public void delete Leaves ( String name ) {", "for ( int i = NUM_ ; i < leaves . size ( ) ; i ++ ) {", "Catalog Tree Leaf leaf = leaves . get ( i ) ;", "if ( name . equals ( leaf . get Name ( ) ) ) {", "leaves . remove ( i ) ; } } }"]}
{"ids": "4673", "code": ["protected boolean validate ( final char [ ] component , final int soffset , int eoffset , final Bit Set generous ) {", "if ( eoffset == - NUM_ ) {", "eoffset = component . length - NUM_ ; }", "for ( int i = soffset ; i <= eoffset ; i ++ ) {", "if ( ! generous . get ( component [ i ] ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "42226", "code": ["public boolean remove Shutdown Hook ( Thread hook ) {", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm != null ) {", "sm . check Permission ( Runtime Permission Collection . SHUTDOWN HOOKS PERMISSION ) ; }", "if ( hook == null ) throw new Null Pointer Exception ( STR_ ) ;", "if ( VM State > NUM_ ) {", "throw new Illegal State Exception ( ) ; }", "synchronized ( hooks List ) {", "return hooks List . remove ( hook ) ; } }"]}
{"ids": "54799", "code": ["public void run ( ) {", "while ( m keyboard Stream != null ) {", "try {", "if ( m keyboard Read Request ) {", "String s = m keyboard Stream . read Line ( ) ;", "m keyboard Input . add ( s ) ;", "m keyboard Read Request = false ;", "synchronized ( this ) {", "notify All ( ) ; } }", "else try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception ie ) { } }", "catch ( IO Exception io ) { } } }"]}
{"ids": "84544", "code": ["public boolean bound Scroll ( ) {", "float cur Scroll = get Stack Scroll ( ) ;", "float new Scroll = get Bounded Stack Scroll ( cur Scroll ) ;", "if ( Float . compare ( new Scroll , cur Scroll ) != NUM_ ) {", "set Stack Scroll ( new Scroll ) ;", "return true ; }", "return false ; }"]}
{"ids": "37730", "code": ["@ Override public Aggregateable Evaluation aggregate ( Evaluation evaluation ) {", "m Incorrect += evaluation . incorrect ( ) ;", "m Correct += evaluation . correct ( ) ;", "m Unclassified += evaluation . unclassified ( ) ;", "m Missing Class += evaluation . m Missing Class ;", "m With Class += evaluation . m With Class ;", "if ( evaluation . m Confusion Matrix != null ) {", "double [ ] [ ] new Matrix = evaluation . confusion Matrix ( ) ;", "if ( new Matrix != null ) {", "for ( int i = NUM_ ; i < m Confusion Matrix . length ; i ++ ) {", "for ( int j = NUM_ ; j < m Confusion Matrix [ i ] . length ; j ++ ) {", "m Confusion Matrix [ i ] [ j ] += new Matrix [ i ] [ j ] ; } } } }", "double [ ] new Class Priors = evaluation . m Class Priors ;", "if ( new Class Priors != null && m Class Priors != null ) {", "for ( int i = NUM_ ; i < this . m Class Priors . length ; i ++ ) {", "m Class Priors [ i ] = new Class Priors [ i ] ; } }", "m Class Priors Sum = evaluation . m Class Priors Sum ;", "m Total Cost += evaluation . total Cost ( ) ;", "m Sum Err += evaluation . m Sum Err ;", "m Sum Abs Err += evaluation . m Sum Abs Err ;", "m Sum Sqr Err += evaluation . m Sum Sqr Err ;", "m Sum Class += evaluation . m Sum Class ;", "m Sum Sqr Class += evaluation . m Sum Sqr Class ;", "m Sum Predicted += evaluation . m Sum Predicted ;", "m Sum Sqr Predicted += evaluation . m Sum Sqr Predicted ;", "m Sum Class Predicted += evaluation . m Sum Class Predicted ;", "m Sum Prior Abs Err += evaluation . m Sum Prior Abs Err ;", "m Sum Prior Sqr Err += evaluation . m Sum Prior Sqr Err ;", "m Sum KB Info += evaluation . m Sum KB Info ;", "double [ ] new Margin Counts = evaluation . m Margin Counts ;", "if ( new Margin Counts != null ) {", "for ( int i = NUM_ ; i < m Margin Counts . length ; i ++ ) {", "m Margin Counts [ i ] += new Margin Counts [ i ] ; } }", "m Complexity Statistics Available = evaluation . m Complexity Statistics Available ;", "m Coverage Statistics Available = evaluation . m Coverage Statistics Available ;", "m Sum Prior Entropy += evaluation . m Sum Prior Entropy ;", "m Sum Scheme Entropy += evaluation . m Sum Scheme Entropy ;", "m Total Size Of Regions += evaluation . m Total Size Of Regions ;", "m Total Coverage += evaluation . m Total Coverage ;", "Array List < Prediction > preds To Add = evaluation . m Predictions ;", "if ( preds To Add != null ) {", "if ( m Predictions == null ) {", "m Predictions = new Array List < Prediction > ( ) ; }", "for ( int i = NUM_ ; i < preds To Add . size ( ) ; i ++ ) {", "m Predictions . add ( preds To Add . get ( i ) ) ; } }", "return this ; }"]}
{"ids": "22559", "code": ["public void wait For Volumes To Be Visible ( CG Request Params request ) {", "scan ( request . get Copies ( ) , request . get Rsets ( ) ) ; }"]}
{"ids": "66785", "code": ["public void update View ( ) {", "if ( f Input Element != null && f Parent Composite != null ) {", "Indicator View State old State = f State Map . get ( f Input Element ) ;", "boolean reload = f Files To Reoad . contains ( f Input Element ) ;", "if ( reload || old State == null ) {", "Json Object json Object = Droidsafe Plugin Utilities . parse Indicator File ( f Input Element ) ;", "if ( json Object == null ) return ;", "f Files To Reoad . remove ( f Input Element ) ;", "f State = new Indicator View State ( f Input Element , json Object , get Security Spec ( ) , old State ) ;", "f State Map . put ( f Input Element , f State ) ; }", "else {", "f State = old State ; }", "set Part Name ( f State . indicator Type ) ;", "show Page ( PAGE VIEWER ) ;", "f Tree Viewer . set Input ( f State . json Object ) ;", "if ( f Tree Viewer . get Sorter ( ) == null ) sort By Field ( get Sort By Field ( ) ) ; }", "else {", "set Part Name ( DEFAULT PART NAME ) ; } }"]}
{"ids": "38792", "code": ["@ Override public boolean connection Allowed ( String event Name ) {", "if ( m listenees . contains Key ( event Name ) ) {", "return false ; }", "return true ; }"]}
{"ids": "68051", "code": ["public boolean is Prefixed ( ) {", "return name . index Of ( STR_ ) >= NUM_ ; }"]}
{"ids": "71337", "code": ["public void release Any Connection ( Connection connection ) throws SQL Exception {", "try {", "connection . close ( ) ; }", "catch ( Exception ex ) {", "throw new Runtime Exception ( ex ) ; } }"]}
{"ids": "50146", "code": ["public Quick Action View add Actions ( Collection < Action > actions ) {", "check Shown ( ) ;", "m Actions . add All ( actions ) ;", "return this ; }"]}
{"ids": "49792", "code": ["public Char Seq concat ( Char Seq another ) {", "return new Char Seq ( str + another . str ) ; }"]}
{"ids": "62807", "code": ["@ Override protected void do Get ( Http Servlet Request req , Http Servlet Response resp ) throws Servlet Exception , IO Exception {", "resp . set Content Type ( STR_ ) ;", "Print Writer send To Client = resp . get Writer ( ) ;", "for ( Video v : this . videos ) {", "send To Client . write ( v . get Name ( ) + STR_ + v . get Url ( ) + STR_ ) ; } }"]}
{"ids": "74058", "code": ["protected void notify State Change ( int old State , int new State ) {", "m State = new State ;", "if ( old State != new State ) {", "fire Property Change ( STR_ , Integer . value Of ( old State ) , Integer . value Of ( new State ) ) ; } }"]}
{"ids": "30048", "code": ["public static String construct Queue Redis Key ( String queue Name , String shard Name , int priority , Pin Later Job State state ) {", "return String . format ( STR_ , PINLATER QUEUE KEY PREFIX , shard Name , queue Name , priority , state . get Value ( ) ) ; }"]}
{"ids": "14909", "code": ["public static String decode Charset ( String s , String charset ) {", "if ( s == null ) {", "return null ; }", "try {", "byte buf [ ] = s . get Bytes ( ASCII CHARSET ) ;", "return ( new String ( buf , NUM_ , buf . length , charset ) ) ; }", "catch ( Unsupported Encoding Exception uee ) {", "return s ; } }"]}
{"ids": "67362", "code": ["public void add Restricted Domain ( String domain Name ) {", "if ( String Utils . is Empty ( domain Name ) ) {", "return ; }", "if ( restricted Domains == null ) {", "restricted Domains = new Array List < > ( ) ; }", "restricted Domains . add ( domain Name ) ; }"]}
{"ids": "23610", "code": ["Stoppable Read Lock ( Read Write Lock lock , Cancel Criterion stopper ) {", "this . lock = lock . read Lock ( ) ;", "this . stopper = stopper ; }"]}
{"ids": "48956", "code": ["private long compute Interface Hash ( ) {", "long hash = NUM_ ;", "Byte Array Output Stream sink = new Byte Array Output Stream ( NUM_ ) ;", "try {", "Message Digest md = Message Digest . get Instance ( STR_ ) ;", "Data Output Stream out = new Data Output Stream ( new Digest Output Stream ( sink , md ) ) ;", "out . write Int ( INTERFACE HASH STUB VERSION ) ;", "for ( Method method : remote Methods ) {", "Method Doc method Doc = method . method Doc ( ) ;", "out . write UTF ( method Doc . name ( ) ) ;", "out . write UTF ( Util . method Descriptor Of ( method Doc ) ) ;", "Class Doc exceptions [ ] = method Doc . thrown Exceptions ( ) ;", "Arrays . sort ( exceptions , new Class Doc Comparator ( ) ) ;", "for ( Class Doc ex : exceptions ) {", "out . write UTF ( Util . binary Name Of ( ex ) ) ; } }", "out . flush ( ) ;", "byte hash Array [ ] = md . digest ( ) ;", "for ( int i = NUM_ ; i < Math . min ( NUM_ , hash Array . length ) ; i ++ ) {", "hash += ( ( long ) ( hash Array [ i ] & NUM_ ) ) << ( i * NUM_ ) ; } }", "catch ( IO Exception e ) {", "throw new Assertion Error ( e ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new Assertion Error ( e ) ; }", "return hash ; }"]}
{"ids": "33320", "code": ["public boolean is Empty ( ) {", "return items . is Empty ( ) ; }"]}
{"ids": "30919", "code": ["private Service Registrar [ ] build Service Registrar ( ) {", "int k = NUM_ ;", "Service Registrar [ ] proxys = new Service Registrar [ proxy Reg Set . size ( ) ] ;", "Iterator iter = proxy Reg Set . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Proxy Reg reg = ( Proxy Reg ) iter . next ( ) ;", "proxys [ k ++ ] = reg . proxy ; }", "return proxys ; }"]}
{"ids": "46842", "code": ["private static boolean check Value ( String val ) throws Malformed Object Name Exception {", "if ( val == null ) throw new Null Pointer Exception ( STR_ ) ;", "final int len = val . length ( ) ;", "if ( len == NUM_ ) return false ;", "final char [ ] s = val . to Char Array ( ) ;", "final int [ ] result = parse Value ( s , NUM_ ) ;", "final int end Value = result [ NUM_ ] ;", "final boolean value pattern = result [ NUM_ ] == NUM_ ;", "if ( end Value < len ) throw new Malformed Object Name Exception ( STR_ + s [ end Value ] + STR_ ) ;", "return value pattern ; }"]}
{"ids": "23998", "code": ["protected void recover Primary ( Set excluded Servers ) {", "if ( pool . get Pool Or Cache Cancel In Progress ( ) != null ) {", "return ; }", "final boolean is Debug Enabled = logger . is Debug Enabled ( ) ;", "if ( queue Connections . get Primary ( ) != null ) {", "if ( is Debug Enabled ) {", "logger . debug ( STR_ ) ; }", "return ; }", "if ( is Debug Enabled ) {", "logger . debug ( STR_ ) ; }", "if ( print Recovering Primary ) {", "logger . info ( Localized Message . create ( Localized Strings . Queue Manager Impl SUBSCRIPTION MANAGER REDUNDANCY SATISFIER PRIMARY ENDPOINT HAS BEEN LOST ATTEMPTIMG TO RECOVER ) ) ;", "print Recovering Primary = false ; }", "Queue Connection Impl new Primary = null ;", "while ( new Primary == null && pool . get Pool Or Cache Cancel In Progress ( ) == null ) {", "List backups = queue Connections . get Backups ( ) ;", "new Primary = promote Backup To Primary ( backups ) ;", "if ( new Primary == null ) {", "break ; }", "if ( ! add To Connection List ( new Primary , true ) ) {", "synchronized ( lock ) {", "queue Connections = queue Connections . remove Connection ( new Primary ) ; }", "new Primary = null ; } }", "if ( new Primary != null ) {", "if ( is Debug Enabled ) {", "logger . debug ( STR_ , new Primary . get Endpoint ( ) ) ; }", "if ( Pool Impl . AFTER PRIMARY RECOVERED CALLBACK FLAG ) {", "Client Server Observer bo = Client Server Observer Holder . get Instance ( ) ;", "bo . after Primary Recovered ( new Primary . get Server ( ) ) ; }", "cqs Connected ( ) ;", "print Primary Not Found Error = true ;", "print Recovering Primary = true ;", "return ; }", "while ( new Primary == null ) {", "new Primary = create New Primary ( excluded Servers ) ;", "if ( new Primary == null ) {", "break ; }", "if ( ! add To Connection List ( new Primary , true ) ) {", "excluded Servers . add ( new Primary . get Server ( ) ) ;", "new Primary = null ; }", "if ( new Primary != null ) {", "if ( is Debug Enabled ) {", "logger . debug ( STR_ , new Primary . get Endpoint ( ) ) ; }", "if ( ! recover Interest ( new Primary , true ) ) {", "excluded Servers . add ( new Primary . get Server ( ) ) ;", "new Primary = null ; }", "cqs Connected ( ) ; }", "if ( new Primary != null && Pool Impl . AFTER PRIMARY RECOVERED CALLBACK FLAG ) {", "Client Server Observer bo = Client Server Observer Holder . get Instance ( ) ;", "bo . after Primary Recovered ( new Primary . get Server ( ) ) ; }", "print Primary Not Found Error = true ;", "print Recovering Primary = true ;", "return ; }", "cqs Disconnected ( ) ;", "if ( is Debug Enabled ) {", "logger . debug ( STR_ ) ; }", "synchronized ( lock ) {", "queue Connections = queue Connections . set Primary Discovery Failed ( null ) ;", "lock . notify All ( ) ; } }"]}
{"ids": "11867", "code": ["protected boolean need To Refetch Data ( ) {", "long now = System . current Time Millis ( ) ;", "long last = last Data Fetch Time ;", "if ( ( last + fetch Interval Millis ) < now ) {", "last Data Fetch Time = now ;", "return true ; }", "return false ; }"]}
{"ids": "21029", "code": ["public byte [ ] to Bytes ( ) {", "try {", "Byte Array Output Stream out = new Byte Array Output Stream ( ) ;", "field . store ( out , null ) ;", "return out . to Byte Array ( ) ; }", "catch ( IO Exception e ) {", "throw new Illegal State Exception ( e ) ; } }"]}
{"ids": "6990", "code": ["@ Suppress Warnings ( STR_ ) public static < E extends Enum < ? extends Style . Has Css Name > > E from Style Name ( final String style Name , final Class < E > enum Class , final E default Value ) {", "if ( style Name == null || enum Class == null ) {", "return default Value ; }", "for ( final Enum < ? extends Style . Has Css Name > constant : enum Class . get Enum Constants ( ) ) {", "final Style . Has Css Name an Enum = ( Style . Has Css Name ) constant ;", "final String css Class = an Enum . get Css Name ( ) ;", "if ( css Class != null && Style Helper . contains Style ( style Name , css Class ) ) {", "return ( E ) an Enum ; } }", "return default Value ; }"]}
{"ids": "25459", "code": ["@ HLE Unimplemented @ HLE Function ( nid = NUM_ , version = NUM_ , check Inside Interrupt = true ) public int sce Mpeg Next Avc Rp Au ( @ Check Argument ( STR_ ) int mpeg , int stream Uid ) {", "if ( ! stream Map . contains Key ( stream Uid ) ) {", "log . warn ( String . format ( STR_ , stream Uid ) ) ;", "return - NUM_ ; }", "int result = hle Mpeg Get Avc Au ( null ) ;", "if ( result != NUM_ ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( String . format ( STR_ , result ) ) ; }", "return result ; }", "video Frame Count ++ ;", "started Mpeg = true ;", "return NUM_ ; }"]}
{"ids": "21807", "code": ["private Map < URI , Export Mask > create Export Mask Map ( Set < URI > placed Masks ) {", "Map < URI , Export Mask > export Mask Map = new Hash Map < > ( ) ;", "Iterator < Export Mask > export Mask Iterator = db Client . query Iterative Objects ( Export Mask . class , placed Masks , true ) ;", "while ( export Mask Iterator . has Next ( ) ) {", "Export Mask export Mask = export Mask Iterator . next ( ) ;", "export Mask Map . put ( export Mask . get Id ( ) , export Mask ) ; }", "return export Mask Map ; }"]}
{"ids": "63057", "code": ["public Immutable Array 2 < K > insert ( int index , K obj ) {", "int len = length + NUM_ ;", "int new Len = len ;", "boolean extendable ;", "if ( index == len - NUM_ ) {", "Atomic Boolean x = can Extend ;", "if ( x != null ) {", "can Extend = null ;", "if ( array . length > index && x . get And Set ( false ) ) {", "array [ index ] = obj ;", "return new Immutable Array 2 < K > ( array , len , true ) ; } }", "extendable = true ;", "new Len = len + NUM_ ; }", "else {", "extendable = false ; }", "@ Suppress Warnings ( STR_ ) K [ ] a 2 = ( K [ ] ) new Object [ new Len ] ;", "Data Utils . copy With Gap ( array , a 2 , length , index ) ;", "a 2 [ index ] = obj ;", "return new Immutable Array 2 < K > ( a 2 , len , extendable ) ; }"]}
{"ids": "43774", "code": ["public String fade Audio ( String path , String type , double fade In Length , double stop Time , double fade Out Length ) throws IO Exception {", "final List < String > curves = Arrays . as List ( new String [ ] { STR_ , STR_ , STR_ , STR_ , STR_ } ) ;", "if ( ! curves . contains ( type ) ) {", "throw new Runtime Exception ( STR_ + type ) ; }", "File file = new File ( path ) ;", "String out File = file . get Canonical Path ( ) + STR_ ;", "Array List < String > cmd = new Array List < String > ( ) ;", "cmd . add ( sox Bin ) ;", "cmd . add ( path ) ;", "cmd . add ( out File ) ;", "cmd . add ( STR_ ) ;", "cmd . add ( type ) ;", "cmd . add ( fade In Length + STR_ ) ;", "if ( stop Time != - NUM_ ) cmd . add ( stop Time + STR_ ) ;", "if ( fade Out Length != - NUM_ ) cmd . add ( fade Out Length + STR_ ) ;", "try {", "int rc = exec Sox ( cmd , callback ) ;", "if ( rc != NUM_ ) {", "out File = null ; } }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( Interrupted Exception e ) {", "e . print Stack Trace ( ) ; }", "return out File ; }"]}
{"ids": "61741", "code": ["public static Class Properties load Properties ( Class [ ] cls , Properties properties , boolean inherit ) {", "Class Properties cp = new Class Properties ( properties ) ;", "for ( Class c : cls ) {", "cp . load ( c , inherit ) ; }", "return cp ; }"]}
{"ids": "85085", "code": ["private static void fix GPS Time Stamp ( XMP Node exif Schema ) throws XMP Exception {", "XMP Node gps Date Time = XMP Node Utils . find Child Node ( exif Schema , STR_ , false ) ;", "if ( gps Date Time == null ) {", "return ; }", "try {", "XMP Date Time bin GPS Stamp ;", "XMP Date Time bin Other Date ;", "bin GPS Stamp = XMP Utils . convert To Date ( gps Date Time . get Value ( ) ) ;", "if ( bin GPS Stamp . get Year ( ) != NUM_ || bin GPS Stamp . get Month ( ) != NUM_ || bin GPS Stamp . get Day ( ) != NUM_ ) {", "return ; }", "XMP Node other Date = XMP Node Utils . find Child Node ( exif Schema , STR_ , false ) ;", "if ( other Date == null ) {", "other Date = XMP Node Utils . find Child Node ( exif Schema , STR_ , false ) ; }", "bin Other Date = XMP Utils . convert To Date ( other Date . get Value ( ) ) ;", "Calendar cal = bin GPS Stamp . get Calendar ( ) ;", "cal . set ( Calendar . YEAR , bin Other Date . get Year ( ) ) ;", "cal . set ( Calendar . MONTH , bin Other Date . get Month ( ) ) ;", "cal . set ( Calendar . DAY OF MONTH , bin Other Date . get Day ( ) ) ;", "bin GPS Stamp = new XMP Date Time Impl ( cal ) ;", "gps Date Time . set Value ( XMP Utils . convert From Date ( bin GPS Stamp ) ) ; }", "catch ( XMP Exception e ) {", "return ; } }"]}
{"ids": "56925", "code": ["protected boolean cell Consumes Event Type ( Cell < ? > cell , String event Type ) {", "Set < String > consumed Events = cell . get Consumed Events ( ) ;", "return consumed Events != null && consumed Events . contains ( event Type ) ; }"]}
{"ids": "76471", "code": ["public long max ( ) {", "return delta Max . get ( ) ; }"]}
{"ids": "47690", "code": ["public void print ( File file ) throws IO Exception {", "check Exec ( ) ;", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm != null ) {", "sm . check Print Job Access ( ) ; }", "check Action Support ( Action . PRINT ) ;", "check File Validation ( file ) ;", "peer . print ( file ) ; }"]}
{"ids": "69160", "code": ["@ Override public String expect ( Pattern pattern ) {", "final String token = read ( pattern ) ;", "if ( token == null ) {", "throw new Parser Exception ( STR_ + pattern . pattern ( ) + STR_ + document ) ; }", "return token ; }"]}
{"ids": "4739", "code": ["public void add Parameters ( final Name Value Pair [ ] parameters ) {", "LOG . trace ( STR_ ) ;", "if ( parameters == null ) {", "LOG . warn ( STR_ ) ; }", "else {", "super . clear Request Body ( ) ;", "for ( int i = NUM_ ; i < parameters . length ; i ++ ) {", "params . add ( parameters [ i ] ) ; } } }"]}
{"ids": "42446", "code": ["@ Pure public Atom annotation Interface To Annotation Class ( ) {", "byte [ ] annotation Class Name tmp = new byte [ val . length + NUM_ ] ;", "System . arraycopy ( val , NUM_ , annotation Class Name tmp , NUM_ , val . length - NUM_ ) ;", "annotation Class Name tmp [ val . length - NUM_ ] = STR_ ;", "annotation Class Name tmp [ val . length ] = STR_ ;", "annotation Class Name tmp [ val . length + NUM_ ] = STR_ ;", "return Atom . find Or Create Utf 8 Atom ( annotation Class Name tmp ) ; }"]}
{"ids": "22820", "code": ["public boolean resource Support AR ( Integer id ) {", "if ( id == null ) {", "return false ; }", "return resource Support AR ( id . int Value ( ) ) ; }"]}
{"ids": "7228", "code": ["public Pattern Guard Expr ( String namespace , String name , Expression [ ] parameters , Pattern Expr guarded ) {", "this ( namespace , name , Arrays . as List ( parameters ) , guarded ) ; }"]}
{"ids": "59553", "code": ["@ Override public void on Tmp Files Copied ( Result Code result ) {", "dismiss Loading Dialog ( ) ;", "finish ( ) ; }"]}
{"ids": "11854", "code": ["public synchronized OM Graphic List prepare ( ) {", "Projection projection = get Projection ( ) ;", "boolean DEBUG FINE = logger . is Loggable ( Level . FINE ) ;", "if ( projection == null ) {", "if ( DEBUG FINE ) {", "logger . fine ( get Name ( ) + STR_ ) ; }", "return new OM Graphic List ( ) ; }", "if ( spatial Index == null ) {", "if ( DEBUG FINE ) {", "logger . fine ( get Name ( ) + STR_ ) ; }", "OM Graphic List list = get List ( ) ;", "if ( list != null ) {", "list . generate ( projection , true ) ;", "return list ; }", "else {", "return new OM Graphic List ( ) ; } }", "Point 2 D ul = projection . get Upper Left ( ) ;", "Point 2 D lr = projection . get Lower Right ( ) ;", "double ul Lat = ul . get Y ( ) ;", "double ul Lon = ul . get X ( ) ;", "double lr Lat = lr . get Y ( ) ;", "double lr Lon = lr . get X ( ) ;", "OM Graphic List list = new OM Graphic List ( ) ;", "if ( Proj Math . is Crossing Dateline ( ul Lon , lr Lon , projection . get Scale ( ) ) ) {", "if ( DEBUG FINE ) {", "logger . fine ( STR_ ) ; }", "double ymin = Math . min ( ul Lat , lr Lat ) ;", "double ymax = Math . max ( ul Lat , lr Lat ) ;", "try {", "list = spatial Index . get OM Graphics ( ul Lon , ymin , NUM_ , ymax , list , drawing Attributes , projection , coord Transform ) ;", "list = spatial Index . get OM Graphics ( - NUM_ , ymin , lr Lon , ymax , list , drawing Attributes , projection , coord Transform ) ; }", "catch ( Interrupted IO Exception iioe ) {", "list = null ; }", "catch ( IO Exception ex ) {", "if ( DEBUG FINE ) {", "ex . print Stack Trace ( ) ; } }", "catch ( Format Exception fe ) {", "if ( DEBUG FINE ) {", "fe . print Stack Trace ( ) ; } }", "catch ( Null Pointer Exception npe ) {", "if ( DEBUG FINE ) {", "npe . print Stack Trace ( ) ; } } }", "else {", "double xmin = Math . min ( ul Lon , lr Lon ) ;", "double xmax = Math . max ( ul Lon , lr Lon ) ;", "double ymin = Math . min ( ul Lat , lr Lat ) ;", "double ymax = Math . max ( ul Lat , lr Lat ) ;", "try {", "list = spatial Index . get OM Graphics ( xmin , ymin , xmax , ymax , list , drawing Attributes , projection , coord Transform ) ; }", "catch ( Interrupted IO Exception iioe ) {", "list = null ; }", "catch ( java . io . IO Exception ex ) {", "if ( DEBUG FINE ) {", "ex . print Stack Trace ( ) ; } }", "catch ( Format Exception fe ) {", "if ( DEBUG FINE ) {", "fe . print Stack Trace ( ) ; } }", "catch ( Null Pointer Exception npe ) {", "if ( DEBUG FINE ) {", "npe . print Stack Trace ( ) ; } } }", "return list ; }"]}
{"ids": "26163", "code": ["private boolean is Field Package Private ( Element attribute ) {", "Set < Modifier > modifiers = attribute . get Modifiers ( ) ;", "return ! modifiers . contains ( PUBLIC ) && ! modifiers . contains ( PROTECTED ) && ! modifiers . contains ( PRIVATE ) ; }"]}
{"ids": "12611", "code": ["private void load Text ( Input Stream is ) {", "Buffered Reader reader ;", "String line ;", "unit List = new Array List ( ) ;", "unit Types List = new Array List ( ) ;", "if ( is == null ) {", "throw new Error ( STR_ ) ; }", "reader = new Buffered Reader ( new Input Stream Reader ( is ) ) ;", "try {", "line = reader . read Line ( ) ;", "line Count ++ ;", "while ( line != null ) {", "if ( ! line . starts With ( STR_ ) ) {", "parse And Add ( line , reader ) ; }", "line = reader . read Line ( ) ; }", "reader . close ( ) ;", "units = new Database Cluster Unit [ unit List . size ( ) ] ;", "units = ( Database Cluster Unit [ ] ) unit List . to Array ( units ) ;", "unit List = null ;", "unit Types = new Unit Type [ unit Types List . size ( ) ] ;", "unit Types = ( Unit Type [ ] ) unit Types List . to Array ( unit Types ) ;", "unit Types List = null ; }", "catch ( IO Exception e ) {", "throw new Error ( e . get Message ( ) + STR_ + line Count ) ; }", "finally { } }"]}
{"ids": "80128", "code": ["@ Override public void on Added ( final RP Object object ) {", "if ( is User ( object ) ) {", "if ( object . has ( STR_ ) ) {", "adminlevel = object . get Int ( STR_ ) ; } } }"]}
{"ids": "86992", "code": ["private String local number ( ) throws Parse Exception {", "String Builder s = new String Builder ( ) ;", "if ( debug ) dbg enter ( STR_ ) ;", "try {", "int lc = NUM_ ;", "while ( lexer . has More Chars ( ) ) {", "char la = lexer . look Ahead ( NUM_ ) ;", "if ( la == STR_ || la == STR_ || la == STR_ || la == STR_ || la == STR_ || la == STR_ || Lexer . is Hex Digit ( la ) ) {", "lexer . consume ( NUM_ ) ;", "s . append ( la ) ;", "lc ++ ; }", "else if ( lc > NUM_ ) break ;", "else throw create Parse Exception ( STR_ + la ) ; }", "return s . to String ( ) ; }", "finally {", "if ( debug ) dbg leave ( STR_ ) ; } }"]}
{"ids": "30032", "code": ["public static void slide In From Top Animator ( @ Non Null List < Animator > animators , @ Non Null View view , Recycler View recycler View ) {", "alpha Animator ( animators , view , NUM_ ) ;", "animators . add ( Object Animator . of Float ( view , STR_ , - recycler View . get Measured Height ( ) > > NUM_ , NUM_ ) ) ;", "if ( Flexible Adapter . DEBUG ) Log . v ( TAG , STR_ ) ; }"]}
{"ids": "47944", "code": ["Mutable Big Integer ( Mutable Big Integer val ) {", "int Len = val . int Len ;", "value = Arrays . copy Of Range ( val . value , val . offset , val . offset + int Len ) ; }"]}
{"ids": "40230", "code": ["public Checkpoint Manager ( Network Parameters params , @ Nullable Input Stream input Stream ) throws IO Exception {", "this . params = check Not Null ( params ) ;", "if ( input Stream == null ) input Stream = open Stream ( params ) ;", "check Not Null ( input Stream ) ;", "input Stream = new Buffered Input Stream ( input Stream ) ;", "input Stream . mark ( NUM_ ) ;", "int first = input Stream . read ( ) ;", "input Stream . reset ( ) ;", "if ( first == BINARY MAGIC . char At ( NUM_ ) ) data Hash = read Binary ( input Stream ) ;", "else if ( first == TEXTUAL MAGIC . char At ( NUM_ ) ) data Hash = read Textual ( input Stream ) ;", "else throw new IO Exception ( STR_ ) ; }"]}
{"ids": "20057", "code": ["private String liveness ( ) {", "boolean is Closed = false ;", "try {", "if ( is Closed ( ) ) {", "is Closed = true ; } }", "catch ( SQL Exception s ) {", "is Closed = true ; }", "if ( is Closed ) {", "return STR_ ; }", "return STR_ ; }"]}
{"ids": "46349", "code": ["public Dimension minimum Layout Size ( Container target ) {", "Dimension size ;", "synchronized ( this ) {", "check Container ( target ) ;", "check Requests ( ) ;", "size = new Dimension ( x Total . minimum , y Total . minimum ) ; }", "Insets insets = target . get Insets ( ) ;", "size . width = ( int ) Math . min ( ( long ) size . width + ( long ) insets . left + ( long ) insets . right , Integer . MAX VALUE ) ;", "size . height = ( int ) Math . min ( ( long ) size . height + ( long ) insets . top + ( long ) insets . bottom , Integer . MAX VALUE ) ;", "return size ; }"]}
{"ids": "52710", "code": ["public boolean select ( int position ) {", "View v = m All List . get ( position ) ;", "if ( m Multi Choice Adapter != null ) {", "perform Vibrate ( ) ;", "perform Select ( v , position , true ) ;", "return true ; }", "return false ; }"]}
{"ids": "35293", "code": ["private static final void wait For Editor To Be Active ( I Editor Part internal File Editor , I Workbench Page page ) {", "long start = System . current Time Millis ( ) ;", "long end = start ;", "do {", "end = System . current Time Millis ( ) ; }", "while ( page . get Active Editor ( ) != internal File Editor && ( end - start ) < NUM_ ) ;", "if ( page . get Active Editor ( ) != internal File Editor ) logger . warn ( STR_ ) ; }"]}
{"ids": "43019", "code": ["private Solution largest Objective Value ( int objective , Population population ) {", "Solution largest = null ;", "double value = Double . NEGATIVE INFINITY ;", "for ( Solution solution : population ) {", "if ( solution . get Objective ( objective ) > value ) {", "largest = solution ;", "value = solution . get Objective ( objective ) ; } }", "return largest ; }"]}
{"ids": "16143", "code": ["public static int convert Latm To Y ( int latm ) {", "long v = Math . round ( ( Mercator . MAX Y - Mercator . lat 2 y ( latm / LATLON TO LATLONM ) ) * MAX AP UNITS / ( Mercator . MAX Y * NUM_ ) ) ;", "if ( v > MAX AP UNITS ) return MAX AP UNITS ;", "if ( v < NUM_ ) return - NUM_ ;", "return ( int ) v ; }"]}
{"ids": "14771", "code": ["public void register Callback Handler ( SMS Object Listener change Listener ) throws SMS Exception {", "object Listener = change Listener ;", "if ( ! notification Initialized ) {", "String notification Flag = System Properties . get ( NOTIFICATION PROPERTY , STR_ ) ;", "if ( notification Flag . equals Ignore Case ( STR_ ) ) {", "try {", "URL url = Webtop Naming . get Notification URL ( ) ;", "PLL Client . add Notification Handler ( JAXRPC Util . SMS SERVICE , new SMS Notification Handler ( ) ) ;", "client . send ( STR_ , url . to String ( ) , null , null ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + url ) ; } }", "catch ( Exception e ) {", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( STR_ + STR_ + e . get Message ( ) + STR_ ) ; }", "start Polling Thread If Enabled ( get Cache Polling Interval ( ) ) ; } }", "else {", "start Polling Thread If Enabled ( get Cache Polling Interval ( ) ) ; }", "notification Initialized = true ; } }"]}
{"ids": "52179", "code": ["protected double current Score Function ( ) {", "double score = NUM_ ;", "for ( int i = NUM_ ; i < this . values [ this . current Var 1 ] . length ; i ++ ) {", "for ( int j = NUM_ ; j < this . values [ this . current Var 2 ] . length ; j ++ ) {", "score -= this . current Counts [ this . current Var 1 ] [ this . current Var 2 ] [ i ] [ j ] * Math . log ( this . current Pi [ i ] [ j ] ) ; } }", "return score ; }"]}
{"ids": "70752", "code": ["private int check Zone Link ( Spannable String Builder out , String in , int start ) {", "int pos = start + NUM_ ;", "String Builder temp = new String Builder ( ) ;", "String target String = in . substring ( pos , Math . min ( in . length ( ) , pos + NUM_ ) ) ;", "boolean prev Is Dash = false ;", "for ( int i = NUM_ ; i < target String . length ( ) ; i ++ ) {", "char c = target String . char At ( i ) ;", "if ( ( c >= STR_ && c <= STR_ ) || ( c >= STR_ && c <= STR_ ) ) {", "temp . append ( c ) ;", "prev Is Dash = false ; }", "else if ( c == STR_ ) {", "if ( i == NUM_ ) {", "return - NUM_ ; }", "if ( prev Is Dash ) {", "temp . delete Char At ( temp . length ( ) - NUM_ ) ;", "break ; }", "temp . append ( c ) ;", "prev Is Dash = true ; }", "else {", "if ( prev Is Dash ) {", "temp . delete Char At ( temp . length ( ) - NUM_ ) ; }", "break ; } }", "String zone = temp . to String ( ) ;", "if ( zone . length ( ) < NUM_ || zone . equals Ignore Case ( STR_ ) ) {", "return - NUM_ ; }", "out . append ( zone ) ;", "return pos + zone . length ( ) - NUM_ ; }"]}
{"ids": "72471", "code": ["public void check Next Poisson Consistency ( double mean ) {", "final int sample Size = NUM_ ;", "final int min Expected Count = NUM_ ;", "long max Observed Value = NUM_ ;", "final double alpha = NUM_ ;", "Unit Test Utils . Frequency < Long > frequency = new Unit Test Utils . Frequency < Long > ( ) ;", "for ( int i = NUM_ ; i < sample Size ; i ++ ) {", "long value = random Data . next Poisson ( mean ) ;", "if ( value > max Observed Value ) {", "max Observed Value = value ; }", "frequency . add Value ( value ) ; }", "Poisson Distribution poisson Distribution = new Poisson Distribution ( mean ) ;", "int lower = NUM_ ;", "while ( poisson Distribution . cumulative Probability ( lower - NUM_ ) * sample Size < min Expected Count ) {", "lower ++ ; }", "int upper = ( int ) ( NUM_ * mean ) ;", "while ( ( NUM_ - poisson Distribution . cumulative Probability ( upper - NUM_ ) ) * sample Size < min Expected Count ) {", "upper -- ; }", "int bin Width = NUM_ ;", "boolean width Sufficient = false ;", "double lower Bin Mass = NUM_ ;", "double upper Bin Mass = NUM_ ;", "while ( ! width Sufficient ) {", "bin Width ++ ;", "lower Bin Mass = poisson Distribution . probability ( lower - NUM_ , lower + bin Width - NUM_ ) ;", "upper Bin Mass = poisson Distribution . probability ( upper - bin Width - NUM_ , upper - NUM_ ) ;", "width Sufficient = Fast Math . min ( lower Bin Mass , upper Bin Mass ) * sample Size >= min Expected Count ; }", "List < Integer > bin Bounds = new Array List < Integer > ( ) ;", "bin Bounds . add ( lower ) ;", "int bound = lower + bin Width ;", "while ( bound < upper - bin Width ) {", "bin Bounds . add ( bound ) ;", "bound += bin Width ; }", "bin Bounds . add ( upper ) ;", "final int bin Count = bin Bounds . size ( ) + NUM_ ;", "long [ ] observed = new long [ bin Count ] ;", "double [ ] expected = new double [ bin Count ] ;", "observed [ NUM_ ] = NUM_ ;", "for ( int i = NUM_ ; i < lower ; i ++ ) {", "observed [ NUM_ ] += frequency . get Count ( ( long ) i ) ; }", "expected [ NUM_ ] = poisson Distribution . cumulative Probability ( lower - NUM_ ) * sample Size ;", "observed [ bin Count - NUM_ ] = NUM_ ;", "for ( int i = upper ; i <= max Observed Value ; i ++ ) {", "observed [ bin Count - NUM_ ] += frequency . get Count ( ( long ) i ) ; }", "expected [ bin Count - NUM_ ] = ( NUM_ - poisson Distribution . cumulative Probability ( upper - NUM_ ) ) * sample Size ;", "for ( int i = NUM_ ; i < bin Count - NUM_ ; i ++ ) {", "observed [ i ] = NUM_ ;", "for ( int j = bin Bounds . get ( i - NUM_ ) ; j < bin Bounds . get ( i ) ; j ++ ) {", "observed [ i ] += frequency . get Count ( ( long ) j ) ; }", "expected [ i ] = ( poisson Distribution . cumulative Probability ( bin Bounds . get ( i ) - NUM_ ) - poisson Distribution . cumulative Probability ( bin Bounds . get ( i - NUM_ ) - NUM_ ) ) * sample Size ; }", "if ( Unit Test Utils . chi Square Test ( expected , observed ) < alpha ) {", "String Builder msg Buffer = new String Builder ( ) ;", "Decimal Format df = new Decimal Format ( STR_ ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( mean ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( Unit Test Utils . chi Square Test ( expected , observed ) ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( Unit Test Utils . chi Square ( expected , observed ) ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( STR_ ) ;", "for ( int i = NUM_ ; i < expected . length ; i ++ ) {", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( i == NUM_ ? NUM_ : bin Bounds . get ( i - NUM_ ) ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( i == bin Bounds . size ( ) ? STR_ : bin Bounds . get ( i ) ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( df . format ( expected [ i ] ) ) ;", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( observed [ i ] ) ;", "msg Buffer . append ( STR_ ) ; }", "msg Buffer . append ( STR_ ) ;", "msg Buffer . append ( alpha ) ;", "msg Buffer . append ( STR_ ) ;", "Assert . fail ( msg Buffer . to String ( ) ) ; } }"]}
{"ids": "2608", "code": ["public static void check Valid ( double [ ] x ) {", "for ( double v : x ) {", "if ( Double . is Na N ( v ) ) {", "throw new Runtime Exception ( STR_ + v ) ; } } }"]}
{"ids": "68311", "code": ["public double percentage ( Constant Range range ) {", "Sorted Set < Constant > sorted = values ( ) ;", "Sorted Set < Constant > contained = new Tree Set < Constant > ( ) ;", "Constant prev = null ;", "for ( Constant pct : sorted ) {", "if ( range . contains ( pct ) ) contained . add ( pct ) ;", "else if ( contained . is Empty ( ) ) prev = pct ; }", "if ( contained . size ( ) == NUM_ ) return NUM_ ;", "double prev Percent = prev == null ? NUM_ : pcts . get ( prev ) ;", "return pcts . get ( contained . last ( ) ) - prev Percent ; }"]}
{"ids": "32268", "code": ["public static void close Quiet ( @ Nullable Closeable closeable ) {", "if ( closeable != null ) {", "try {", "closeable . close ( ) ; }", "catch ( IO Exception ignored ) { } } }"]}
{"ids": "1227", "code": ["@ Override public void release Lucee Page Context ( Page Context pc , boolean register ) {", "if ( pc . get Id ( ) < NUM_ ) return ;", "pc . release ( ) ;", "Thread Local Page Context . release ( ) ;", "running Pcs . remove ( Integer . value Of ( pc . get Id ( ) ) ) ;", "if ( pcs . size ( ) < NUM_ && pc . get Request Timeout Exception ( ) == null ) pcs . push ( pc ) ; }"]}
{"ids": "6431", "code": ["private static byte [ ] string To Byte Array ( String str ) {", "if ( str == null ) {", "return null ; }", "byte [ ] src Byte = str . get Bytes ( ) ;", "int src Length = src Byte . length ;", "byte [ ] result = new byte [ src Length + NUM_ ] ;", "System . arraycopy ( src Byte , NUM_ , result , NUM_ , src Length ) ;", "result [ src Length ] = NUM_ ;", "return result ; }"]}
{"ids": "53986", "code": ["public static Properties load Properties ( Class Loader class Loader , String classpath Resource ) {", "return load Properties ( null , classpath Resource ) ; }"]}
{"ids": "62054", "code": ["@ Override public boolean equals ( Object o ) {", "if ( o instanceof Graph ) {", "return string . equals ( o . to String ( ) ) ; }", "return false ; }"]}
{"ids": "80868", "code": ["private static Mapping Object Object At ( P Cal Location loc , Mapping Object [ ] [ ] map ) {", "return map [ loc . get Line ( ) ] [ loc . get Column ( ) ] ; }"]}
{"ids": "44860", "code": ["public String parse ( File file , JSON m ) {", "try {", "Template template = get Template ( file ) ;", "if ( template != null ) {", "String Writer w = new String Writer ( ) ;", "Buffered Writer writer = new Buffered Writer ( w ) ;", "template . merge ( new Velocity Context ( m ) , writer ) ;", "writer . flush ( ) ;", "writer . close ( ) ;", "return w . to String ( ) ; } }", "catch ( Exception e ) {", "log . error ( e . get Message ( ) , e ) ; }", "return null ; }"]}
{"ids": "45935", "code": ["public Repository ( String domain , boolean fair Lock ) {", "lock = new Reentrant Read Write Lock ( fair Lock ) ;", "domain Tb = new Hash Map < String , Map < String , Named Object > > ( NUM_ ) ;", "if ( domain != null && domain . length ( ) != NUM_ ) this . domain = domain . intern ( ) ;", "else this . domain = Service Name . DOMAIN ;", "domain Tb . put ( this . domain , new Hash Map < String , Named Object > ( ) ) ; }"]}
{"ids": "21576", "code": ["private void update Volume Labels ( Volume trusted Src , Volume invalid Tgt ) {", "Virtual Array invalid Tgt VA = db Client . query Object ( Virtual Array . class , invalid Tgt . get Virtual Array ( ) ) ;", "String Builder new Label = new String Builder ( ) ;", "new Label . append ( trusted Src . get Label ( ) ) ;", "new Label . append ( STR_ ) ;", "new Label . append ( invalid Tgt VA . get Label ( ) ) ;", "log . info ( STR_ + new Label . to String ( ) ) ;", "invalid Tgt . set Label ( new Label . to String ( ) ) ;", "Named URI project URI = invalid Tgt . get Project ( ) ;", "project URI . set Name ( new Label . to String ( ) ) ;", "invalid Tgt . set Project ( project URI ) ;", "Named URI tenant URI = invalid Tgt . get Tenant ( ) ;", "tenant URI . set Name ( new Label . to String ( ) ) ;", "invalid Tgt . set Tenant ( tenant URI ) ;", "Volume tgt Vplex Volume = V Plex Srdf Util . get Vplex Volume From Srdf Volume ( db Client , invalid Tgt ) ;", "if ( tgt Vplex Volume != null ) {", "Volume src Vplex Volume = V Plex Srdf Util . get Vplex Volume From Srdf Volume ( db Client , trusted Src ) ;", "if ( src Vplex Volume != null ) {", "new Label . set Length ( NUM_ ) ;", "new Label . append ( src Vplex Volume . get Label ( ) ) ;", "new Label . append ( STR_ ) ;", "new Label . append ( invalid Tgt VA . get Label ( ) ) ;", "log . info ( STR_ + new Label . to String ( ) ) ;", "tgt Vplex Volume . set Label ( new Label . to String ( ) ) ;", "project URI = tgt Vplex Volume . get Project ( ) ;", "project URI . set Name ( new Label . to String ( ) ) ;", "tgt Vplex Volume . set Project ( project URI ) ;", "tenant URI = tgt Vplex Volume . get Tenant ( ) ;", "tenant URI . set Name ( new Label . to String ( ) ) ;", "tgt Vplex Volume . set Tenant ( tenant URI ) ;", "db Client . update And Reindex Object ( tgt Vplex Volume ) ; } } }"]}
{"ids": "75413", "code": ["protected void handle ( Exception exception , String title , String message ) {", "Utils . handle Error ( get Shell ( ) , exception , title , message ) ; }"]}
{"ids": "11276", "code": ["private void read Object ( Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "in . default Read Object ( ) ;", "i 18 n = Environment . get I 18 n ( ) ;", "bean Context Child Support = new Bean Context Child Support ( this ) ; }"]}
{"ids": "82762", "code": ["private void paint Foreground Enabled ( Graphics 2 D g , int width , int height ) {", "Shape s = decode Arrow Path ( width , height ) ;", "g . set Paint ( enabled Color ) ;", "g . fill ( s ) ; }"]}
{"ids": "72151", "code": ["public boolean allows Trailing Arguments ( ) {", "return allows Trailing Arguments ; }"]}
{"ids": "36600", "code": ["private void evaluate Popup ( Mouse Event e ) {", "if ( e . is Popup Trigger ( ) ) {", "J Popup Menu menu = create Bookmark Popup Menu ( ) ;", "if ( menu != null ) {", "menu . show ( this , e . get X ( ) , e . get Y ( ) ) ; } } }"]}
{"ids": "30903", "code": ["private boolean remove Task ( Task t , int min ) {", "for ( int i = tasks . size ( ) ; -- i >= min ; ) {", "if ( tasks . get ( i ) == t ) {", "tasks . remove ( i ) ;", "if ( i < first Pending ) {", "first Pending -- ;", "for ( int j = threads . size ( ) ; -- j >= NUM_ ; ) {", "Task Thread thread = threads . get ( j ) ;", "if ( thread . task == t ) {", "if ( thread != Thread . current Thread ( ) ) thread . interrupt ( ) ;", "break ; } } }", "return true ; } }", "return false ; }"]}
{"ids": "17268", "code": ["protected void ensure Path Exists ( String path ) {", "String [ ] paths = path . split ( STR_ ) ;", "String Buffer spath = new String Buffer ( STR_ ) ;", "for ( String temp : paths ) {", "if ( String Utils . is Blank ( temp ) ) {", "continue ; }", "spath . append ( temp ) ;", "ensure Exists ( spath . to String ( ) , null , acl , Create Mode . PERSISTENT ) ;", "spath . append ( STR_ ) ; } }"]}
{"ids": "48550", "code": ["public Class < ? > load Class ( String name , boolean resolve ) throws Class Not Found Exception {", "int i = name . last Index Of ( STR_ ) ;", "if ( i != - NUM_ ) {", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm != null ) {", "sm . check Package Access ( name . substring ( NUM_ , i ) ) ; } }", "if ( ucp . known To Not Exist ( name ) ) {", "Class < ? > c = find Loaded Class ( name ) ;", "if ( c != null ) {", "if ( resolve ) {", "resolve Class ( c ) ; }", "return c ; }", "throw new Class Not Found Exception ( name ) ; }", "return ( super . load Class ( name , resolve ) ) ; }"]}
{"ids": "78820", "code": ["public void add ( @ Non Null T item ) {", "synchronized ( lock ) {", "if ( items == null ) {", "items = new Array List < > ( ) ; }", "items . add ( item ) ; }", "if ( notify On Change ) {", "notify Item Inserted ( items . size ( ) ) ; } }"]}
{"ids": "32415", "code": ["private void check Pending Custom Messages ( ) {", "if ( joining Nodes . is Empty ( ) && is Local Node Coordinator ( ) ) {", "Tcp Discovery Custom Event Message msg ;", "while ( ( msg = pending Custom Msgs . poll ( ) ) != null ) {", "process Custom Message ( msg ) ;", "if ( msg . verified ( ) ) msg Hist . add ( msg ) ; } } }"]}
{"ids": "35649", "code": ["private float calculate Scramble Image Height Multiplier ( float multiplier ) {", "switch ( current Puzzle ) {", "case Puzzle Utils . TYPE 777 :", "case Puzzle Utils . TYPE 666 :", "case Puzzle Utils . TYPE 555 :", "case Puzzle Utils . TYPE 222 :", "case Puzzle Utils . TYPE 444 :", "case Puzzle Utils . TYPE 333 :", "return ( multiplier / NUM_ ) * NUM_ ;", "case Puzzle Utils . TYPE CLOCK :", "return multiplier / NUM_ ;", "case Puzzle Utils . TYPE MEGA :", "return ( multiplier / NUM_ ) ;", "case Puzzle Utils . TYPE PYRA :", "return ( float ) ( multiplier / Math . sqrt ( NUM_ ) ) ;", "case Puzzle Utils . TYPE SKEWB :", "return ( multiplier / NUM_ ) * NUM_ ;", "case Puzzle Utils . TYPE SQUARE 1 :", "return multiplier ; }", "return multiplier ; }"]}
{"ids": "23838", "code": ["protected void close Callbacks Except Listener ( ) {", "close Cache Callback ( get Cache Loader ( ) ) ;", "close Cache Callback ( get Cache Writer ( ) ) ;", "close Cache Callback ( get Eviction Controller ( ) ) ; }"]}
{"ids": "80201", "code": ["private void populate Profiles ( final Profile List profiles ) {", "profiles Combo Box . remove All Items ( ) ;", "for ( Profile p : profiles ) {", "profiles Combo Box . add Item ( p ) ; }", "final int count = profiles Combo Box . get Item Count ( ) ;", "if ( count != NUM_ ) {", "profiles Combo Box . set Selected Index ( count - NUM_ ) ; } }"]}
{"ids": "19821", "code": ["private long check File Header ( Buffered File Data Input bfdi ) throws Replicator Exception , Interrupted Exception {", "int magic = NUM_ ;", "short major = NUM_ ;", "short minor = NUM_ ;", "try {", "bfdi . wait Available ( HEADER LENGTH , HEADER WAIT MILLIS ) ;", "magic = bfdi . read Int ( ) ;", "major = bfdi . read Short ( ) ;", "minor = bfdi . read Short ( ) ;", "base Seqno = bfdi . read Long ( ) ; }", "catch ( IO Exception e ) {", "throw new THL Exception ( STR_ + file . get Absolute Path ( ) , e ) ; }", "if ( magic != MAGIC NUMBER ) throw new THL Exception ( STR_ + file . get Absolute Path ( ) + STR_ ) ;", "if ( major != MAJOR VERSION ) throw new THL Exception ( STR_ + file . get Absolute Path ( ) + STR_ ) ;", "if ( minor != MINOR VERSION ) logger . warn ( STR_ + file . get Absolute Path ( ) + STR_ + major + STR_ + minor + STR_ + MAJOR VERSION + STR_ + MINOR VERSION ) ;", "return base Seqno ; }"]}
{"ids": "64844", "code": ["public float real Absolute ( ) {", "return Math . abs ( m Left ) ; }"]}
{"ids": "52844", "code": ["private Extremum Type extremum Type ( int n , double [ ] alpha extreme , Hyper Bounding Box interval ) {", "if ( n == alpha extreme . length - NUM_ ) {", "return extremum Type ; }", "double [ ] alpha extreme l = new double [ alpha extreme . length ] ;", "double [ ] alpha extreme r = new double [ alpha extreme . length ] ;", "double [ ] alpha extreme c = new double [ alpha extreme . length ] ;", "System . arraycopy ( alpha extreme , NUM_ , alpha extreme l , NUM_ , alpha extreme . length ) ;", "System . arraycopy ( alpha extreme , NUM_ , alpha extreme r , NUM_ , alpha extreme . length ) ;", "System . arraycopy ( alpha extreme , NUM_ , alpha extreme c , NUM_ , alpha extreme . length ) ;", "double [ ] centroid = Spatial Util . centroid ( interval ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "alpha extreme l [ i ] = centroid [ i ] ;", "alpha extreme r [ i ] = centroid [ i ] ;", "alpha extreme c [ i ] = centroid [ i ] ; }", "double interval Length = interval . get Max ( n ) - interval . get Min ( n ) ;", "alpha extreme l [ n ] = Math . random ( ) * interval Length + interval . get Min ( n ) ;", "alpha extreme r [ n ] = Math . random ( ) * interval Length + interval . get Min ( n ) ;", "double f c = function ( alpha extreme c ) ;", "double f l = function ( alpha extreme l ) ;", "double f r = function ( alpha extreme r ) ;", "if ( f l < f c ) {", "if ( f r < f c || Math . abs ( f r - f c ) < DELTA ) {", "return Extremum Type . MAXIMUM ; } }", "if ( f r < f c ) {", "if ( f l < f c || Math . abs ( f l - f c ) < DELTA ) {", "return Extremum Type . MAXIMUM ; } }", "if ( f l > f c ) {", "if ( f r > f c || Math . abs ( f r - f c ) < DELTA ) {", "return Extremum Type . MINIMUM ; } }", "if ( f r > f c ) {", "if ( f l > f c || Math . abs ( f l - f c ) < DELTA ) {", "return Extremum Type . MINIMUM ; } }", "if ( Math . abs ( f l - f c ) < DELTA && Math . abs ( f r - f c ) < DELTA ) {", "return Extremum Type . CONSTANT ; }", "throw new Illegal Argument Exception ( STR_ + this + STR_ + STR_ + f l + STR_ + STR_ + f c + STR_ + STR_ + f r + STR_ + STR_ + vec . to Array ( ) + STR_ + STR_ + Format Util . format ( alpha extreme c ) + STR_ + STR_ + Format Util . format ( alpha extreme l ) + STR_ + STR_ + Format Util . format ( alpha extreme r ) + STR_ + STR_ + n ) ; }"]}
{"ids": "60193", "code": ["protected void process Mouse Event ( Mouse Event e ) {", "if ( my Inplace Component != null && ( Mouse Event . MOUSE PRESSED == e . get ID ( ) || Mouse Event . MOUSE RELEASED == e . get ID ( ) ) ) {", "finish Editing ( true ) ; }", "super . process Mouse Event ( e ) ; }"]}
{"ids": "36852", "code": ["protected boolean has All Tables ( ) throws Couldnt Load Data Exception , Invalid Database Exception {", "Navi Logger . info ( STR_ ) ;", "final int counter = Postgre SQL Helpers . get Table Count ( get Connection ( ) , Lists . new Array List ( TABLES ) ) ;", "if ( counter == NUM_ ) {", "return false ; }", "else if ( counter == TABLES . length ) {", "return true ; }", "else {", "throw new Invalid Database Exception ( String . format ( STR_ , counter , TABLES . length ) ) ; } }"]}
{"ids": "34485", "code": ["public List < String > classify ( List < List < Feature > > features ) throws Cleartk Processing Exception {", "String [ ] [ ] feature String Array = to Strings ( features ) ;", "Pipe pipe = transducer . get Input Pipe ( ) ;", "Instance instance = new Instance ( feature String Array , null , null , null ) ;", "instance = pipe . instance From ( instance ) ;", "Sequence < ? > data = ( Sequence < ? > ) instance . get Data ( ) ;", "Sequence < ? > untyped Sequence = transducer . transduce ( data ) ;", "Sequence < String > sequence = Reflection Util . unchecked Cast ( untyped Sequence ) ;", "List < String > return Values = new Array List < String > ( ) ;", "for ( int i = NUM_ ; i < sequence . size ( ) ; i ++ ) {", "String encoded Outcome = sequence . get ( i ) ;", "return Values . add ( outcome Encoder . decode ( encoded Outcome ) ) ; }", "return return Values ; }"]}
{"ids": "62968", "code": ["public void on Bind Header View Holder ( Recycler View . View Holder holder , int position ) {", "on Bind Header View Holder ( holder , position , Collections . empty List ( ) ) ; }"]}
{"ids": "36397", "code": ["private void update Line List ( ) {", "if ( horizontal Line Radiobutton . is Selected ( ) ) {", "set Horizontal Line Selected ( ) ; }", "else {", "set Vertical Line Selected ( ) ; }", "update Button States ( ) ; }"]}
{"ids": "32926", "code": ["public void rectangle ( double x , double y , double half Width , double half Height ) {", "if ( half Width < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( half Height < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "double xs = scale X ( x ) ;", "double ys = scale Y ( y ) ;", "double ws = factor X ( NUM_ * half Width ) ;", "double hs = factor Y ( NUM_ * half Height ) ;", "if ( ws <= NUM_ && hs <= NUM_ ) pixel ( x , y ) ;", "else offscreen . draw ( new Rectangle 2 D . Double ( xs - ws / NUM_ , ys - hs / NUM_ , ws , hs ) ) ;", "draw ( ) ; }"]}
{"ids": "43312", "code": ["public void replace Split Element ( int a Index , Fragment a Split Element ) {", "splits . set ( a Index , a Split Element ) ; }"]}
{"ids": "3003", "code": ["private void start Item List ( String Builder result , String root Id ) {", "result . append ( STR_ + STR_ + root Id + STR_ ) ; }"]}
{"ids": "39653", "code": ["private static int num Initial Splits ( long num Records ) {", "final int max Splits = NUM_ ;", "final long records Per Split = NUM_ ;", "return ( int ) Math . min ( max Splits , num Records / records Per Split + NUM_ ) ; }"]}
{"ids": "34834", "code": ["private static String [ ] scan For Sources ( final File source Dir , final Set < String > source Includes , final Set < String > source Excludes ) {", "final Directory Scanner ds = new Directory Scanner ( ) ;", "ds . set Follow Symlinks ( true ) ;", "ds . set Basedir ( source Dir ) ;", "ds . set Includes ( source Includes . to Array ( new String [ source Includes . size ( ) ] ) ) ;", "ds . set Excludes ( source Excludes . to Array ( new String [ source Excludes . size ( ) ] ) ) ;", "ds . add Default Excludes ( ) ;", "try {", "ds . scan ( ) ; }", "catch ( Illegal State Exception e ) {", "return new String [ NUM_ ] ; }", "return ds . get Included Files ( ) ; }"]}
{"ids": "51062", "code": ["public boolean has Single Element ( ) {", "return m Selected Widgets . size ( ) == NUM_ ; }"]}
{"ids": "32342", "code": ["public Igfs Path ( URI uri ) {", "A . not Null ( uri , STR_ ) ;", "path = normalize Path ( uri . get Path ( ) ) ; }"]}
{"ids": "7293", "code": ["public void add Getters ( int assigned Property Number , String property Name ) {", "for ( Event Type type : known Types ) {", "Event Property Getter getter = type . get Getter ( property Name ) ;", "Variant Property Getter Row row = all Getters . get ( type ) ;", "if ( row == null ) {", "synchronized ( this ) {", "row = new Variant Property Getter Row ( type , new Event Property Getter [ assigned Property Number + NUM_ ] ) ;", "all Getters . put ( type , row ) ; } }", "row . add Getter ( assigned Property Number , getter ) ; }", "properties . add ( property Name ) ; }"]}
{"ids": "26965", "code": ["protected void mark Used ( Entry entry ) {", "entry . last Used = System . nano Time ( ) ; }"]}
{"ids": "56191", "code": ["private void handle State Left ( Inet Address endpoint , String [ ] pieces ) {", "assert pieces . length >= NUM_ ;", "Collection < Token > tokens = get Tokens For ( endpoint ) ;", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ , endpoint , tokens ) ;", "excise ( tokens , endpoint , extract Expire Time ( pieces ) ) ; }"]}
{"ids": "31807", "code": ["@ Suppress Warnings ( STR_ ) public Key Value Persistence Settings ( File settings File ) {", "Input Stream in ;", "try {", "in = new File Input Stream ( settings File ) ; }", "catch ( IO Exception e ) {", "throw new Ignite Exception ( STR_ + settings File . get Absolute Path ( ) , e ) ; }", "init ( load Settings ( in ) ) ; }"]}
{"ids": "33562", "code": ["public boolean contains Word Breaking Char ( final @ Non Null Char Sequence input ) {", "if ( ! Text Utils . is Empty ( input ) ) {", "for ( int i = NUM_ ; i < input . length ( ) ; i ++ ) {", "char c = input . char At ( i ) ;", "if ( is Word Breaking Char ( c ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "71226", "code": ["private void check Interior Intersections ( ) {", "for ( Iterator i = seg Strings . iterator ( ) ; i . has Next ( ) ; ) {", "Segment String ss 0 = ( Segment String ) i . next ( ) ;", "for ( Iterator j = seg Strings . iterator ( ) ; j . has Next ( ) ; ) {", "Segment String ss 1 = ( Segment String ) j . next ( ) ;", "check Interior Intersections ( ss 0 , ss 1 ) ; } } }"]}
{"ids": "70625", "code": ["private < T > Unary Operator < T > compose ( Unary Operator < T > before , Unary Operator < T > after ) {", "return null ; }"]}
{"ids": "19784", "code": ["private void add Cdc Col Specs ( Array List < Column Spec > cdc Specs , One Row Change cdc Row Change Data ) {", "int cdc Pos = cdc Specs . size ( ) ;", "if ( cdc Columns At Front ) cdc Pos = NUM_ ;", "Column Spec spec = cdc Row Change Data . new Column Spec ( ) ;", "spec . set Index ( cdc Pos + NUM_ ) ;", "spec . set Name ( STR_ ) ;", "spec . set Type ( java . sql . Types . VARCHAR ) ;", "spec . set Length ( NUM_ ) ;", "cdc Specs . add ( cdc Pos , spec ) ;", "spec = cdc Row Change Data . new Column Spec ( ) ;", "spec . set Index ( cdc Pos + NUM_ + NUM_ ) ;", "spec . set Name ( STR_ ) ;", "spec . set Type ( java . sql . Types . TIMESTAMP ) ;", "cdc Specs . add ( cdc Pos + NUM_ , spec ) ;", "spec = cdc Row Change Data . new Column Spec ( ) ;", "spec . set Index ( cdc Pos + NUM_ + NUM_ ) ;", "spec . set Name ( STR_ ) ;", "spec . set Type ( java . sql . Types . BIGINT ) ;", "cdc Specs . add ( cdc Pos + NUM_ , spec ) ; }"]}
{"ids": "50875", "code": ["public static String convert To Java Field Name ( String name ) {", "int dot Index = name . index Of ( STR_ ) ;", "if ( dot Index >= NUM_ ) {", "name = name . substring ( NUM_ , dot Index ) ; }", "String [ ] split = name . split ( STR_ ) ;", "String Builder out = new String Builder ( ) ;", "boolean first = true ;", "for ( String section : split ) {", "if ( first ) {", "first = false ;", "out . append ( section ) ; }", "else {", "out . append ( String Util . capitalize ( section ) ) ; } }", "return out . to String ( ) ; }"]}
{"ids": "59688", "code": ["protected void execute ( String [ ] sqls , SQ Lite Database db ) {", "String throw SQL = STR_ ;", "try {", "if ( sqls != null ) {", "for ( String sql : sqls ) {", "throw SQL = sql ;", "db . exec SQL ( Base Utility . change Case ( sql ) ) ; } } }", "catch ( SQL Exception e ) {", "throw new Database Generate Exception ( Database Generate Exception . SQL ERROR + throw SQL ) ; } }"]}
{"ids": "70344", "code": ["private void refresh Done Button ( boolean done ) {", "but Done . set Text ( done ? Messages . get String ( STR_ ) : Messages . get String ( STR_ ) ) ; }"]}
{"ids": "17376", "code": ["private void create Migration Task Page ( ) {", "Migration Task Editor migration Task Editor = new Migration Task Editor ( migration Task , get Container ( ) ) ;", "int index = add Page ( migration Task Editor . get Control ( ) ) ;", "set Page Text ( index , STR_ ) ;", "task Listeners . add ( migration Task Editor ) ; }"]}
{"ids": "71884", "code": ["private boolean has Next ( Pattern pattern ) {", "if ( ! has Next ( ) ) {", "return false ; }", "Matcher matcher = pattern . matcher ( gser Value . substring ( pos , length ) ) ;", "return matcher . find ( ) ; }"]}
{"ids": "76212", "code": ["void push Int ( int i ) {", "switch ( i ) {", "case - NUM_ :", "mv . visit Insn ( ICONST M 1 ) ;", "return ;", "case NUM_ :", "mv . visit Insn ( ICONST 0 ) ;", "return ;", "case NUM_ :", "mv . visit Insn ( ICONST 1 ) ;", "return ;", "case NUM_ :", "mv . visit Insn ( ICONST 2 ) ;", "return ;", "case NUM_ :", "mv . visit Insn ( ICONST 3 ) ;", "return ;", "case NUM_ :", "mv . visit Insn ( ICONST 4 ) ;", "return ;", "case NUM_ :", "mv . visit Insn ( ICONST 5 ) ;", "return ; }", "if ( i >= Byte . MIN VALUE && i <= Byte . MAX VALUE ) {", "mv . visit Int Insn ( BIPUSH , i ) ;", "return ; }", "if ( i >= Short . MIN VALUE && i <= Short . MAX VALUE ) {", "mv . visit Int Insn ( SIPUSH , i ) ;", "return ; }", "mv . visit Ldc Insn ( Integer . value Of ( i ) ) ; }"]}
{"ids": "63162", "code": ["public static String xml Node ( String name , String attributes , String content , boolean indent ) {", "String start = attributes == null ? name : name + attributes ;", "if ( content == null ) {", "return STR_ + start + STR_ ; }", "if ( indent && content . index Of ( STR_ ) >= NUM_ ) {", "content = STR_ + indent ( content ) ; }", "return STR_ + start + STR_ + content + STR_ + name + STR_ ; }"]}
{"ids": "78821", "code": ["public void add ( int position , @ Non Null T item ) {", "synchronized ( lock ) {", "if ( items == null ) {", "items = new Array List < > ( ) ; }", "items . add ( position , item ) ; }", "if ( notify On Change ) {", "notify Item Inserted ( position ) ; } }"]}
{"ids": "56891", "code": ["public List < String > split String With Default Delimiter Escaped ( String input String ) {", "String delimiter = configuration Helper . get Property ( Configuration Value . FIELD DATA DELIMITER ) ;", "String escape Char = configuration Helper . get Property ( Configuration Value . FIELD DATA DELIMITER ESCAPE CHAR ) ;", "List < String > split String = new Array List < > ( ) ;", "if ( String Utils . is Not Blank ( input String ) ) {", "String regex = STR_ + Pattern . quote ( escape Char ) + STR_ + Pattern . quote ( delimiter ) ;", "for ( String s : input String . split ( regex ) ) {", "split String . add ( s . replace ( escape Char + delimiter , delimiter ) ) ; } }", "return split String ; }"]}
{"ids": "60356", "code": ["protected final boolean read Available Blocking ( ) throws IO Exception {", "char [ ] buffer = my Buffer ;", "String Builder token = my Text Buffer ;", "token . set Length ( NUM_ ) ;", "boolean read = false ;", "int n ;", "while ( ( n = my Reader . read ( buffer ) ) > NUM_ ) {", "if ( my Scheduled Submitter != null ) my Scheduled Submitter . cancel ( true ) ;", "read = true ;", "synchronized ( my Text Buffer ) {", "process Line ( buffer , token , n ) ; }", "my Scheduled Submitter = my Executor Service . submit ( my Token Submitter ) ; }", "submit Token ( ) ;", "return read ; }"]}
{"ids": "29023", "code": ["public void delete Obligation ( final Obligation obligation , int basic Block Id ) throws Obligation Acquired Or Released In Loop Exception {", "Map < Obligation Set , State > updated State Map = new Hash Map < Obligation Set , State > ( ) ;", "for ( Iterator < State > i = state Iterator ( ) ; i . has Next ( ) ; ) {", "State state = i . next ( ) ;", "check Circularity ( state , obligation , basic Block Id ) ;", "Obligation Set obligation Set = state . get Obligation Set ( ) ;", "obligation Set . remove ( obligation ) ;", "if ( ! obligation Set . is Empty ( ) ) {", "updated State Map . put ( obligation Set , state ) ; } }", "replace Map ( updated State Map ) ; }"]}
{"ids": "62286", "code": ["public Content Impl create Compound Package Content ( Ole Blob Impl blob , String pretty Name , String class Name , String type Name , Byte Buffer blob Bb , int data Block Len ) {", "return new Compound Content Impl ( blob , pretty Name , class Name , type Name , blob Bb . position ( ) , data Block Len ) ; }"]}
{"ids": "38957", "code": ["protected boolean check Coverage ( ) {", "int i ;", "int n ;", "int [ ] count ;", "Range r ;", "String attr Index ;", "Subspace Cluster Definition cl ;", "count = new int [ get Num Attributes ( ) ] ;", "for ( i = NUM_ ; i < get Num Attributes ( ) ; i ++ ) {", "for ( n = NUM_ ; n < get Clusters ( ) . length ; n ++ ) {", "cl = ( Subspace Cluster Definition ) get Clusters ( ) [ n ] ;", "r = new Range ( cl . get Attr Index Range ( ) ) ;", "r . set Upper ( get Num Attributes ( ) ) ;", "if ( r . is In Range ( i ) ) {", "count [ i ] ++ ; } } }", "attr Index = STR_ ;", "for ( i = NUM_ ; i < count . length ; i ++ ) {", "if ( count [ i ] == NUM_ ) {", "if ( attr Index . length ( ) != NUM_ ) {", "attr Index += STR_ ; }", "attr Index += ( i + NUM_ ) ; } }", "if ( attr Index . length ( ) != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + STR_ + attr Index + STR_ ) ; }", "return true ; }"]}
{"ids": "42174", "code": ["private Set < Integer > find Values ( String string ) {", "Set < Integer > results = new Tree Set < Integer > ( ) ;", "for ( String str : string . split ( STR_ ) ) {", "if ( ! str . equals ( STR_ ) ) {", "results . add ( find Value ( str ) ) ; } }", "return results ; }"]}
{"ids": "67750", "code": ["@ Deprecated public void append ( final String name , final String value ) {", "List < String > l = map . get ( name ) ;", "if ( l != null ) {", "l . add ( value ) ; }", "else {", "l = Lists . new Array List ( value ) ;", "map . put ( name , l ) ; } }"]}
{"ids": "7067", "code": ["public Statement between ( Object former , Object later ) {", "statement . append ( STR_ ) ;", "append ( former ) ;", "statement . append ( STR_ ) ;", "append ( later ) ;", "return this ; }"]}
{"ids": "27614", "code": ["public byte [ ] encode 1 ( final String s ) {", "final Byte Array Buffer tmp = new Byte Array Buffer ( s . length ( ) ) ;", "final int nwritten = uc . encode ( s , tmp ) ;", "final int npack = Long Packer . get Byte Length ( nwritten ) ;", "final byte [ ] a = new byte [ npack + nwritten ] ;", "final Data Output Buffer dob = new Data Output Buffer ( NUM_ , a ) ;", "try {", "dob . pack Long ( nwritten ) ;", "dob . append ( tmp . array ( ) , NUM_ , tmp . pos ( ) ) ;", "return a ; }", "finally {", "try {", "dob . close ( ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } } }"]}
{"ids": "5744", "code": ["public static Map < Object , Long > value Histogram ( Geo Time Serie gts ) {", "Map < Object , Long > occurrences = new Hash Map < Object , Long > ( ) ;", "for ( int i = NUM_ ; i < gts . values ; i ++ ) {", "Object value = GTS Helper . value At Index ( gts , i ) ;", "if ( ! occurrences . contains Key ( value ) ) {", "occurrences . put ( value , NUM_ ) ; }", "else {", "occurrences . put ( value , NUM_ + occurrences . get ( value ) ) ; } }", "if ( GTS Helper . is Bucketized ( gts ) && gts . bucketcount != gts . values ) {", "occurrences . put ( null , ( long ) ( gts . bucketcount - gts . values ) ) ; }", "return occurrences ; }"]}
{"ids": "56377", "code": ["public Query String Query Builder field ( String field ) {", "if ( fields == null ) {", "fields = new Array List < > ( ) ; }", "fields . add ( field ) ;", "return this ; }"]}
{"ids": "31526", "code": ["public static < R , A , B > Completion Stage < R > combine ( Completion Stage < A > a , Completion Stage < B > b , Bi Function < A , B , R > function ) {", "return a . then Combine ( b , function ) ; }"]}
{"ids": "19738", "code": ["protected String build Create Schema Statement ( ) throws Replicator Exception {", "return null ; }"]}
{"ids": "55264", "code": ["public Stream Info Manager ( Twitch Api api , Stream Info Listener listener ) {", "this . listener = listener ;", "this . api = api ;", "pending Requests = new Hash Map < > ( ) ;", "invalid Stream Info = new Stream Info ( STR_ , listener ) ;", "invalid Stream Info . set Requested ( ) ; }"]}
{"ids": "53556", "code": ["public Sentence as Sentence ( ) {", "return Sentence . new Conjunction ( sentences ) ; }"]}
{"ids": "80040", "code": ["public boolean is Pronoun ( ) {", "return type String . contains ( SUFFIX PRONOUN ) ; }"]}
{"ids": "81838", "code": ["public static Vector tokenize String ( String source , String separator ) {", "if ( separator . length ( ) == NUM_ ) {", "return tokenize String ( source , separator . char At ( NUM_ ) ) ; }", "Vector tokenized = new Vector ( ) ;", "int len = source . length ( ) ;", "String Builder buf = new String Builder ( ) ;", "for ( int iter = NUM_ ; iter < len ; iter ++ ) {", "char current = source . char At ( iter ) ;", "if ( separator . index Of ( current ) > - NUM_ ) {", "if ( buf . length ( ) > NUM_ ) {", "tokenized . add Element ( buf . to String ( ) ) ;", "buf = new String Builder ( ) ; } }", "else {", "buf . append ( current ) ; } }", "if ( buf . length ( ) > NUM_ ) {", "tokenized . add Element ( buf . to String ( ) ) ; }", "return tokenized ; }"]}
{"ids": "59732", "code": ["public void update ( ) {", "if ( last Time != - NUM_ ) {", "long delta = System . nano Time ( ) - last Time ;", "rolling Average . add Value ( delta ) ; }", "last Time = System . nano Time ( ) ; }"]}
{"ids": "24698", "code": ["public List < Validation Error Message > validate ( ) {", "error Message Ids . clear ( ) ;", "if ( payment Product == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "for ( Payment Product Field field : payment Product . get Payment Product Fields ( ) ) {", "if ( ! is Field In Account On File And Not Altered ( field ) ) {", "error Message Ids . add All ( field . validate Value ( get Value ( field . get Id ( ) ) ) ) ; } }", "return error Message Ids ; }"]}
{"ids": "84252", "code": ["Crypto Result ( final T result , final List < K > master Keys , final Ciphertext Headers headers ) {", "result = result ;", "master Keys = Collections . unmodifiable List ( master Keys ) ;", "headers = headers ;", "encryption Context = headers . get Encryption Context Map ( ) ; }"]}
{"ids": "9460", "code": ["public void state Changed ( Change Event e ) {", "if ( ignore Update ) {", "return ; }", "double value = ( double ) ( NUM_ - setpoint Slider . get Value ( ) ) / NUM_ ;", "set Set Point ( value ) ;", "sim . set Set Point ( value ) ; }"]}
{"ids": "67709", "code": ["public static String [ ] parse Delimited List ( String list , char delimiter ) {", "String delim = STR_ + delimiter ;", "String Tokenizer st = new String Tokenizer ( list + delim + STR_ , delim , true ) ;", "Array List < String > v = new Array List < String > ( ) ;", "String last Token = STR_ ;", "String word = STR_ ;", "while ( st . has More Tokens ( ) ) {", "String tok = st . next Token ( ) ;", "if ( last Token != null ) {", "if ( tok . equals ( delim ) ) {", "word = word + last Token ;", "if ( last Token . equals ( delim ) ) tok = null ; }", "else {", "if ( ! word . equals ( STR_ ) ) v . add ( word ) ;", "word = STR_ ; } }", "last Token = tok ; }", "return v . to Array ( new String [ NUM_ ] ) ; }"]}
{"ids": "73376", "code": ["private void initialize Layout ( ) {", "Grid Layout gl = new Grid Layout ( NUM_ , NUM_ ) ;", "gl . set Vgap ( NUM_ ) ;", "set Layout ( gl ) ;", "add ( new J Label ( STR_ ) ) ;", "add ( frozen DD ) ;", "add ( new J Label ( STR_ ) ) ;", "add ( tf Up Bound ) ;", "add ( new J Label ( STR_ ) ) ;", "add ( tf Low Bound ) ;", "add ( new J Label ( STR_ ) ) ;", "add ( tf Increment ) ;", "add ( new J Label ( STR_ ) ) ;", "add ( tf Delay ) ;", "set Border ( Border Factory . create Empty Border ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ; }"]}
{"ids": "62095", "code": ["@ Override public boolean is Running ( ) {", "return ( frame != null && frame . is Visible ( ) ) ; }"]}
{"ids": "82892", "code": ["public Result result ( Sql Node node , Collection < Clause > clauses , Rel Node rel ) {", "final String alias 2 = Sql Validator Util . get Alias ( node , - NUM_ ) ;", "final String alias 3 = alias 2 != null ? alias 2 : STR_ ;", "final String alias 4 = Sql Validator Util . uniquify ( alias 3 , alias Set , Sql Validator Util . EXPR SUGGESTER ) ;", "final String alias 5 = alias 2 == null || ! alias 2 . equals ( alias 4 ) ? alias 4 : null ;", "return new Result ( node , clauses , alias 5 , Collections . singleton List ( Pair . of ( alias 4 , rel . get Row Type ( ) ) ) ) ; }"]}
{"ids": "70858", "code": ["private static void trust All Https Certificates ( ) {", "SSL Context context ;", "if ( trust Managers == null ) {", "trust Managers = new Trust Manager [ ] { new Fake X 509 Trust Manager ( ) } ; }", "try {", "context = SSL Context . get Instance ( STR_ ) ;", "context . init ( null , trust Managers , new Secure Random ( ) ) ; }", "catch ( General Security Exception gse ) {", "throw new Illegal State Exception ( gse . get Message ( ) ) ; }", "Https URL Connection . set Default SSL Socket Factory ( context . get Socket Factory ( ) ) ; }"]}
{"ids": "73479", "code": ["private void add Internal Listeners ( ) {", "cb Distribution . add Item Listener ( cb Item Listener ) ; }"]}
{"ids": "46977", "code": ["private void bappend ( char ch ) {", "try {", "m Buff [ ++ m Buff Idx ] = ch ; }", "catch ( Exception exp ) {", "char buff [ ] = new char [ m Buff . length << NUM_ ] ;", "System . arraycopy ( m Buff , NUM_ , buff , NUM_ , m Buff . length ) ;", "m Buff = buff ;", "m Buff [ m Buff Idx ] = ch ; } }"]}
{"ids": "30969", "code": ["public void initialize Owner References For Field ( State Manager sm , Field Meta Data fmd ) {", "if ( fmd . get Association Type ( ) == Field Meta Data . ONE TO MANY ) {", "Collection < ? > collection = ( Collection < ? > ) sm . fetch ( fmd . get Index ( ) ) ;", "if ( collection != null ) {", "for ( Object item : collection ) {", "if ( item != null ) {", "relations Manager . set Owner State Manager For Persistent Instance ( item , sm , fmd ) ; } } } }", "else if ( fmd . get Association Type ( ) == Field Meta Data . ONE TO ONE || fmd . is Embedded PC ( ) ) {", "Object value = sm . fetch ( fmd . get Index ( ) ) ;", "if ( value != null ) {", "relations Manager . set Owner State Manager For Persistent Instance ( value , sm , fmd ) ; } } }"]}
{"ids": "71088", "code": ["public Node ( Coordinate pt ) {", "this ( pt , new Directed Edge Star ( ) ) ; }"]}
{"ids": "55293", "code": ["public synchronized void increase ( ) {", "if ( accuracy > NUM_ ) {", "long time Passed = System . current Time Millis ( ) - last Added ;", "if ( time Passed > accuracy ) {", "clear Up ( ) ;", "if ( count > NUM_ ) {", "data . add First ( last Added + accuracy ) ; }", "last Added = System . current Time Millis ( ) ;", "count = NUM_ ; }", "count ++ ; }", "else {", "clear Up ( ) ;", "data . add First ( System . current Time Millis ( ) ) ; } }"]}
{"ids": "60260", "code": ["public void revert ( final Virtual File root , final List < File Path > files ) throws Vcs Exception {", "for ( List < String > paths : Vcs File Util . chunk Paths ( root , files ) ) {", "Git Simple Handler handler = new Git Simple Handler ( my Project , root , Git Command . CHECKOUT ) ;", "handler . add Parameters ( STR_ ) ;", "handler . end Options ( ) ;", "handler . add Parameters ( paths ) ;", "handler . run ( ) ; } }"]}
{"ids": "20801", "code": ["public Tagged Value Iterator ( final String a Line , final boolean attempt First Word , final String ... tags ) {", "this . a Line = a Line ;", "this . attempt First Word = attempt First Word ;", "this . tags = tags ;", "tag Pos = NUM_ ;", "next Result = get Next Result ( ) ;", "if ( attempt First Word ) {", "int a = NUM_ ;", "while ( a < a Line . length ( ) ) {", "if ( a Line . char At ( a ) == STR_ || a Line . char At ( a ) == STR_ || Character . is Whitespace ( a Line . char At ( a ) ) ) a ++ ;", "else break ; }", "int b = a + NUM_ ;", "while ( b < a Line . length ( ) ) {", "if ( Character . is Letter Or Digit ( a Line . char At ( b ) ) || a Line . char At ( b ) == STR_ ) b ++ ;", "else break ; }", "if ( b - a > NUM_ ) {", "next Result = a Line . substring ( a , b ) ; }", "tag Pos = b ; } }"]}
{"ids": "17335", "code": ["public void ascend Tree ( ) {", "if ( null != parent Path ) {", "parent Path . append ( PARENT PATH ) ;", "return ; }", "File parent Tree = calc Parent Tree ( ) ;", "if ( null != parent Tree ) {", "tree File = parent Tree ;", "return ; }", "parent Path = new String Builder ( provide Last Name ( ) ) ;", "parent Path . append ( PARENT PATH ) ; }"]}
{"ids": "3705", "code": ["public boolean can Read ( ) {", "return is != null ; }"]}
{"ids": "1930", "code": ["void on Item Dismissed ( final int position ) {", "final T removed = m Data . get ( position ) ;", "final boolean was Removed = remove ( position ) ;", "if ( was Removed && m Data Change Listener != null ) {", "m Data Change Listener . on Item Removed ( removed , position ) ; } }"]}
{"ids": "59740", "code": ["public static double normal PDF ( double x , double variance , double mean Value ) {", "double standard Deviation = Math . sqrt ( variance ) ;", "return ( NUM_ / ( standard Deviation * Math . sqrt ( NUM_ * Math . PI ) ) ) * Math . pow ( Math . E , - ( ( x - mean Value ) * ( x - mean Value ) ) / ( NUM_ * variance ) ) ; }"]}
{"ids": "42383", "code": ["private void clear Registers ( Instruction start , Instruction end ) {", "for ( Instruction p = start ; ; p = p . next Instruction In Code Order ( ) ) {", "for ( Enumeration < Operand > ops = p . get Operands ( ) ; ops . has More Elements ( ) ; ) {", "Operand op = ops . next Element ( ) ;", "if ( op instanceof Register Operand ) {", "Register Operand r Op = ( Register Operand ) op ;", "clear Dep Graph Node For Register ( r Op . get Register ( ) ) ; } }", "if ( p == end ) break ; }", "for ( Enumeration < Register > e = Generic Physical Def Use . enumerate All Implicit Def Uses ( ir ) ; e . has More Elements ( ) ; ) {", "Register r = e . next Element ( ) ;", "clear Dep Graph Node For Register ( r ) ; } }"]}
{"ids": "36420", "code": ["public void fire Annotation Selected ( Workflow Annotation anno ) {", "List < Workflow Annotation > list = new Linked List < > ( ) ;", "list . add ( anno ) ;", "fire Annotations Changed ( Annotation Event . SELECTED ANNOTATION CHANGED , list ) ; }"]}
{"ids": "56138", "code": ["public boolean update Stats And Return If Allowed ( ) {", "long now = System Clock . elapsed Realtime ( ) ;", "long delta Ms = now - m Last Request Timestamp ;", "if ( delta Ms < m Delay Ms ) return false ;", "m Last Request Timestamp = now ;", "if ( delta Ms < NUM_ * m Delay Ms ) {", "m Delay Ms = Math . min ( MAX DELAY , m Delay Ms * NUM_ ) ; }", "else {", "m Delay Ms = MIN DELAY ; }", "return true ; }"]}
{"ids": "16025", "code": ["public boolean verify Server Evidence Message ( Big Integer server M 2 ) throws Crypto Exception {", "if ( ( this . A == null ) || ( this . M 1 == null ) || ( this . S == null ) ) {", "throw new Crypto Exception ( STR_ + STR_ ) ; }", "Big Integer computed M 2 = SRP 6 Util . calculate M 2 ( digest , N , A , M 1 , S ) ;", "if ( computed M 2 . equals ( server M 2 ) ) {", "this . M 2 = server M 2 ;", "return true ; }", "return false ; }"]}
{"ids": "46450", "code": ["public void handle Text ( String text ) {", "if ( skipping Characters > NUM_ ) {", "if ( skipping Characters >= text . length ( ) ) {", "skipping Characters -= text . length ( ) ;", "return ; }", "else {", "text = text . substring ( skipping Characters ) ;", "skipping Characters = NUM_ ; } }", "if ( rtf Destination != null ) {", "rtf Destination . handle Text ( text ) ;", "return ; }", "warning ( STR_ ) ; }"]}
{"ids": "27328", "code": ["public final boolean remove ( final URI service URI ) {", "boolean modified = false ;", "synchronized ( this ) {", "if ( aliases . remove ( service URI ) != null ) {", "modified = true ; }", "final Service Factory factory = services . remove ( service URI ) ;", "if ( factory != null ) {", "modified = true ;", "if ( factory instanceof Custom Service Factory ) {", "custom Services . remove ( factory ) ; } } }", "return modified ; }"]}
{"ids": "60447", "code": ["@ Nullable private static String reference To Attribute ( String attrib , boolean include Dummies ) {", "while ( attrib . starts With ( STR_ ) ) {", "attrib = attrib . substring ( NUM_ ) ; }", "if ( attrib . starts With ( STR_ ) ) {", "if ( include Dummies ) {", "attrib = attrib . substring ( NUM_ ) ; }", "else return null ; }", "if ( ! String Util . starts With Char ( attrib , STR_ ) ) {", "return null ; }", "attrib = attrib . substring ( NUM_ ) ;", "if ( String Util . starts With Char ( attrib , STR_ ) ) {", "String clean Attribute = null ;", "for ( int i = NUM_ ; i < attrib . length ( ) ; i ++ ) {", "char curr Char = attrib . char At ( i ) ;", "if ( curr Char == STR_ || curr Char == STR_ ) {", "clean Attribute = null ;", "break ; }", "else if ( curr Char == STR_ ) {", "clean Attribute = attrib . substring ( NUM_ , i ) ;", "break ; } }", "attrib = clean Attribute ; }", "else {", "for ( int i = NUM_ ; i < attrib . length ( ) ; i ++ ) {", "char curr Char = attrib . char At ( i ) ;", "if ( curr Char == STR_ || curr Char == STR_ || curr Char == STR_ ) {", "attrib = attrib . substring ( NUM_ , i ) ;", "break ; } } }", "return attrib ; }"]}
{"ids": "69142", "code": ["public void record ( Record Builder Impl record Builder ) {", "store Bitmap ( record Builder ) ;", "Output Stream view Hierarchy Dump = null ;", "try {", "view Hierarchy Dump = m Album . open View Hierarchy File ( record Builder . get Name ( ) ) ;", "m View Hierarchy . deflate ( record Builder . get View ( ) , view Hierarchy Dump ) ;", "m Album . add Record ( record Builder ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; }", "finally {", "if ( view Hierarchy Dump != null ) {", "try {", "view Hierarchy Dump . close ( ) ; }", "catch ( IO Exception e ) {", "Log . e ( STR_ , STR_ , e ) ; } } } }"]}
{"ids": "39498", "code": ["protected boolean is Correct Method ( Method method , Object [ ] args ) {", "return ( proxy Signature . equals ( method . get Name ( ) ) && args . length == NUM_ ) ; }"]}
{"ids": "22206", "code": ["public void check Backup Info ( final File backup Info File , boolean backup In Multi Vdc ) {", "try ( Input Stream fis = new File Input Stream ( backup Info File ) ) {", "Properties properties = new Properties ( ) ;", "properties . load ( fis ) ;", "check Version ( properties ) ;", "check Hosts ( properties , backup In Multi Vdc ) ; }", "catch ( IO Exception ex ) {", "log . warn ( STR_ , ex ) ; } }"]}
{"ids": "47567", "code": ["static String to Lower Case ( String s ) {", "int len = s . length ( ) ;", "String Builder sb = null ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "char c = s . char At ( i ) ;", "if ( ( c >= STR_ && c <= STR_ ) || ( c == STR_ ) ) {", "if ( sb != null ) sb . append ( c ) ; }", "else if ( ( c >= STR_ && c <= STR_ ) || ( c == STR_ ) ) {", "if ( sb != null ) sb . append ( c ) ; }", "else if ( c >= STR_ && c <= STR_ ) {", "if ( sb == null ) {", "sb = new String Builder ( len ) ;", "sb . append ( s , NUM_ , i ) ; }", "sb . append ( ( char ) ( c - CASE DIFF ) ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ ) ; } }", "return sb == null ? s : sb . to String ( ) ; }"]}
{"ids": "7206", "code": ["public static void assert Props ( Uniform Pair < Event Bean > received , String [ ] property Names , Object [ ] expected Insert , Object [ ] expected Removed ) {", "assert Props ( received . get First ( ) , property Names , expected Insert ) ;", "assert Props ( received . get Second ( ) , property Names , expected Removed ) ; }"]}
{"ids": "51264", "code": ["public int size ( ) {", "return al . size ( ) ; }"]}
{"ids": "67720", "code": ["public static String to Upper Case ( String src ) {", "if ( src == null ) {", "return null ; }", "else {", "return src . to Upper Case ( ) ; } }"]}
{"ids": "52017", "code": ["public final Iterator < Knowledge Edge > required Edges Iterator ( ) {", "Set < Knowledge Edge > edges = new Hash Set < > ( ) ;", "for ( Ordered Pair < Set < My Node > > o : required Rules Specs ) {", "final Set < My Node > first = o . get First ( ) ;", "for ( My Node s 1 : first ) {", "final Set < My Node > second = o . get Second ( ) ;", "for ( My Node s 2 : second ) {", "if ( ! s 1 . equals ( s 2 ) ) {", "edges . add ( new Knowledge Edge ( s 1 . get Name ( ) , s 2 . get Name ( ) ) ) ; } } } }", "return edges . iterator ( ) ; }"]}
{"ids": "5964", "code": ["@ Deprecated public void unlock ( Lock State < T > lock State ) {", "if ( lock State == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( lock State . set Lock != this ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( lock State . thread != Thread . current Thread ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "thread Set . remove ( Thread . current Thread ( ) ) ;", "for ( Reentrant Lock lock : lock State . locks ) {", "lock . unlock ( ) ; } }"]}
{"ids": "16490", "code": ["private static String force Number String To Two Digits ( String text ) {", "while ( text . length ( ) < NUM_ ) {", "text = STR_ + text ; }", "if ( text . length ( ) > NUM_ ) {", "text = text . substring ( text . length ( ) - NUM_ , text . length ( ) ) ; }", "return text ; }"]}
{"ids": "80424", "code": ["public void add Drop Item ( final String name , final double probability , final int min , final int max ) {", "drops Items . add ( new Drop Item ( name , probability , min , max ) ) ; }"]}
{"ids": "82949", "code": ["public static < E extends Identifiable > List < E > find By Primary Keys ( Entity Manager em , List < Big Integer > ids , Class < E > type ) {", "require Argument ( em != null , STR_ ) ;", "require Argument ( ids != null && ! ids . is Empty ( ) , STR_ ) ;", "require Argument ( type != null , STR_ ) ;", "Typed Query < E > query = em . create Named Query ( STR_ , type ) ;", "query . set Hint ( STR_ , STR_ ) ;", "try {", "query . set Parameter ( STR_ , ids ) ;", "query . set Parameter ( STR_ , false ) ;", "return query . get Result List ( ) ; }", "catch ( No Result Exception ex ) {", "return new Array List < > ( NUM_ ) ; } }"]}
{"ids": "47010", "code": ["public int hash Code ( ) {", "int h = hash ;", "if ( h == - NUM_ ) {", "try {", "h = Arrays . hash Code ( X 509 Cert Impl . get Encoded Internal ( this ) ) ; }", "catch ( Certificate Exception e ) {", "h = NUM_ ; }", "hash = h ; }", "return h ; }"]}
{"ids": "67416", "code": ["public static String formatting Finished Percentage ( final Rollout Group rollout Group , final float finished Percentage ) {", "float tmp Finished Percentage = NUM_ ;", "switch ( rollout Group . get Status ( ) ) {", "case READY :", "case SCHEDULED :", "case ERROR :", "tmp Finished Percentage = NUM_ ;", "break ;", "case FINISHED :", "tmp Finished Percentage = NUM_ ;", "break ;", "case RUNNING :", "tmp Finished Percentage = finished Percentage ;", "break ;", "default :", "break ; }", "return String . format ( STR_ , tmp Finished Percentage ) ; }"]}
{"ids": "60001", "code": ["public static String generate Host Name ( String vm Name , String host Id ) {", "String hostname = vm Name + STR_ + host Id ;", "Preconditions . check State ( hostname . equals ( hostname . to Lower Case ( ) ) , STR_ ) ;", "return hostname ; }"]}
{"ids": "86826", "code": ["protected void transfer From File ( File id File ) throws IO Exception {", "try ( Buffered Reader br = new Buffered Reader ( new File Reader ( id File ) ) ) {", "String line ;", "while ( ( line = br . read Line ( ) ) != null ) {", "line = line . trim ( ) ;", "if ( line . length ( ) > NUM_ ) {", "transfer ( line ) ; } } } }"]}
{"ids": "10578", "code": ["private static String unwrap ( String expression ) {", "if ( expression . starts With ( STR_ ) ) {", "expression = expression . substring ( expression . index Of ( STR_ ) + NUM_ , expression . length ( ) - NUM_ ) ;", "if ( expression . ends With ( STR_ ) ) {", "expression = expression . substring ( NUM_ , expression . last Index Of ( STR_ ) ) ; }", "else {", "expression = expression . substring ( NUM_ , expression . last Index Of ( STR_ ) ) ; } }", "return expression ; }"]}
{"ids": "81893", "code": ["public boolean are All Segment Present ( int dataset Size ) {", "return m Pie Segment List . size ( ) == dataset Size ; }"]}
{"ids": "55619", "code": ["protected int draw Next Event Time Diff ( ) {", "int time Diff = msg Interval [ NUM_ ] == msg Interval [ NUM_ ] ? NUM_ : rng . next Int ( msg Interval [ NUM_ ] - msg Interval [ NUM_ ] ) ;", "return msg Interval [ NUM_ ] + time Diff ; }"]}
{"ids": "86671", "code": ["public static String to Bits ( final long x ) {", "final String Builder sb = new String Builder ( ) ;", "long t = x ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "if ( ( i & NUM_ ) == NUM_ && i > NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( t < NUM_ ? STR_ : STR_ ) ;", "t = t << NUM_ ; }", "assert t == NUM_ ;", "return sb . to String ( ) ; }"]}
{"ids": "19645", "code": ["public Message Tokenizer ( I Discord Client client , String content ) {", "if ( content == null ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( content . length ( ) == NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( client == null ) throw new Illegal Argument Exception ( STR_ ) ;", "this . content = content ;", "this . client = client ;", "step Forward ( NUM_ ) ; }"]}
{"ids": "9401", "code": ["public void await ( int ID ) throws Interrupted Exception {", "if ( parties == NUM_ ) return ;", "final boolean start Condition = competition Condition ;", "int competing For = ( locks . length * NUM_ - NUM_ - ID ) / NUM_ ;", "while ( competing For >= NUM_ ) {", "final Lock node = locks [ competing For ] ;", "if ( node . try Lock ( ) ) {", "synchronized ( node ) {", "while ( competition Condition == start Condition ) node . wait ( ) ; }", "node . unlock ( ) ;", "wake Up Target ( competing For * NUM_ + NUM_ ) ;", "wake Up Target ( competing For * NUM_ + NUM_ ) ;", "return ; }", "else {", "if ( competing For == NUM_ ) break ;", "competing For = ( competing For - NUM_ ) / NUM_ ; } }", "competition Condition = ! competition Condition ;", "wake Up Target ( NUM_ ) ; }"]}
{"ids": "4395", "code": ["private void load Translations Cache If Empty ( ) {", "if ( translation Cache . is Empty ( ) ) {", "for ( Object Translation translation : translations ) {", "if ( translation . get Locale ( ) != null && translation . get Property ( ) != null && ! String Utils . is Empty ( translation . get Value ( ) ) ) {", "String key = Object Translation . get Cache Key ( translation . get Locale ( ) , translation . get Property ( ) ) ;", "translation Cache . put ( key , translation . get Value ( ) ) ; } } } }"]}
{"ids": "11281", "code": ["public Nav Mouse Mode ( boolean should Consume Events ) {", "super ( mode ID , should Consume Events ) ;", "set Mode Cursor ( Cursor . get Predefined Cursor ( Cursor . CROSSHAIR CURSOR ) ) ;", "rect Attributes . set Line Paint ( Color . GRAY ) ;", "rect Attributes . set Matting Paint ( Color . LIGHT GRAY ) ;", "rect Attributes . set Matted ( true ) ; }"]}
{"ids": "22824", "code": ["public void add Event ( Sim Event new Event ) {", "new Event . set Serial ( serial ++ ) ;", "sorted Set . add ( new Event ) ; }"]}
{"ids": "35910", "code": ["public static File create Temp Path ( String path ) throws IO Exception {", "String sep = File . separator ;", "File temp Dir = new File ( System . get Property ( STR_ ) + sep + path ) ;", "if ( ! temp Dir . exists ( ) ) if ( ! temp Dir . mkdirs ( ) ) {", "boolean status = temp Dir . delete ( ) ;", "throw new IO Exception ( STR_ + temp Dir + STR_ + status ) ; }", "temp Dir . delete On Exit ( ) ;", "return temp Dir ; }"]}
{"ids": "67853", "code": ["public void hspan ( double start , double end , Paint color , String legend ) {", "Legend Text legend Text = new Legend Text ( color , legend ) ;", "comments . add ( legend Text ) ;", "plot Elements . add ( new H Span ( start , end , color , legend Text ) ) ; }"]}
{"ids": "5145", "code": ["public State Interactive extent to whole connections ( ) {", "Set < Brd Item > selected items = new Tree Set < Brd Item > ( ) ;", "for ( Brd Item curr item : items list ) {", "if ( curr item instanceof Brd Connectable ) {", "selected items . add All ( curr item . get connection items ( ) ) ; } }", "if ( selected items . is Empty ( ) ) {", "return return state ; }", "items list = selected items ;", "actlog start scope ( Logfile Scope . EXTEND TO WHOLE CONNECTIONS ) ;", "filter ( ) ;", "i brd . repaint ( ) ;", "return this ; }"]}
{"ids": "27368", "code": ["public static I Key Builder new Instance ( int capacity , Collator Enum collator Choice , Locale locale , Object strength , Decomposition Enum mode ) {", "if ( collator Choice == Collator Enum . ASCII ) {", "return new Key Builder ( capacity ) ; }", "if ( locale == null ) {", "locale = Locale . get Default ( ) ;", "if ( log . is Info Enabled ( ) ) log . info ( STR_ + locale . get Display Name ( ) ) ; }", "final boolean icu = collator Choice == Collator Enum . ICU ;", "if ( icu && ! Default Key Builder Factory . is ICU Available ( ) ) {", "throw new Unsupported Operation Exception ( Default Key Builder Factory . ICU NOT AVAILABLE ) ; }", "final byte [ ] buf = create Buffer ( capacity ) ;", "final int len = NUM_ ;", "switch ( collator Choice ) {", "case ICU :", "return new Key Builder ( new ICU Sort Key Generator ( locale , strength , mode ) , len , buf ) ;", "case JDK :", "return new Key Builder ( new JDK Sort Key Generator ( locale , strength , mode ) , len , buf ) ;", "default :", "throw new Unsupported Operation Exception ( STR_ + collator Choice ) ; } }"]}
{"ids": "10928", "code": ["protected void configure From Properties ( Input Stream is , String root Directory ) throws IO Exception {", "Properties props = new Properties ( ) ;", "props . load ( is ) ;", "props . put ( ROOT DIR PATH PROPERTY , root Directory ) ;", "String old Prefix = get Property Prefix ( ) ;", "set Properties ( null , props ) ;", "set Property Prefix ( old Prefix ) ; }"]}
{"ids": "63539", "code": ["Connection open New Connection ( ) throws SQL Exception {", "Connection new Conn = Driver Manager . get Connection ( url , user , password ) ;", "if ( url . starts With ( STR_ ) ) {", "try ( Statement s = new Conn . create Statement ( ) ) { } }", "else if ( url . starts With ( STR_ ) ) {", "try ( Statement s = new Conn . create Statement ( ) ) {", "s . execute ( STR_ ) ; } }", "return new Conn ; }"]}
{"ids": "57146", "code": ["protected void do Flood BDDP ( long pin Switch , OF Packet In pi , Floodlight Context cntx ) {", "Topology Instance ti = get Current Instance ( false ) ;", "Set < Long > switches = ti . get Switches In Openflow Domain ( pin Switch ) ;", "if ( switches == null ) {", "switches = new Hash Set < Long > ( ) ;", "switches . add ( pin Switch ) ; }", "for ( long sid : switches ) {", "IOF Switch sw = floodlight Provider . get Switch ( sid ) ;", "if ( sw == null ) continue ;", "Collection < Short > enabled Ports = sw . get Enabled Port Numbers ( ) ;", "if ( enabled Ports == null ) continue ;", "Set < Short > ports = new Hash Set < Short > ( ) ;", "ports . add All ( enabled Ports ) ;", "Set < Short > ports Known To Topo = ti . get Ports With Links ( sid ) ;", "if ( ports Known To Topo != null ) {", "for ( short p : ports Known To Topo ) {", "Node Port Tuple npt = new Node Port Tuple ( sid , p ) ;", "if ( ti . is Broadcast Domain Port ( npt ) == false ) {", "ports . remove ( p ) ; } } }", "Set < Short > ports To Eliminate = get Ports To Eliminate For BDDP ( sid ) ;", "if ( ports To Eliminate != null ) {", "ports . remove All ( ports To Eliminate ) ; }", "if ( pin Switch == sid ) {", "ports . remove ( pi . get In Port ( ) ) ; }", "do Multi Action Packet Out ( pi . get Packet Data ( ) , sw , ports , cntx ) ; } }"]}
{"ids": "80129", "code": ["public void sleep Millis ( final long millis ) {", "try {", "Thread . sleep ( millis ) ; }", "catch ( final Interrupted Exception e ) {", "logger . error ( e , e ) ; } }"]}
{"ids": "70013", "code": ["private static void verify Write Set Not Found ( final B Tree btree ) {", "log . info ( STR_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "if ( btree . contains ( i ) ) {", "throw new Runtime Exception ( STR_ + i ) ; } } }"]}
{"ids": "9194", "code": ["private double calculate Entropy ( double ... masses ) {", "double res = NUM_ ;", "for ( double d : masses ) {", "res -= ( d == NUM_ ) ? NUM_ : d * Math . log ( d ) ; }", "return res / LOG 2 ; }"]}
{"ids": "38365", "code": ["@ Override public void mouse Pressed ( Mouse Event e ) {", "m frame Limiter . set Repeats ( true ) ;", "if ( ( e . get Modifiers ( ) & Input Event . BUTTON 1 MASK ) != NUM_ && ! e . is Alt Down ( ) && m mouse State == NUM_ && m scaling == NUM_ ) {", "if ( ( ( e . get Modifiers ( ) & Input Event . CTRL MASK ) != NUM_ ) && ( ( e . get Modifiers ( ) & Input Event . SHIFT MASK ) == NUM_ ) ) {", "m mouse State = NUM_ ; }", "else if ( ( ( e . get Modifiers ( ) & Input Event . SHIFT MASK ) != NUM_ ) && ( ( e . get Modifiers ( ) & Input Event . CTRL MASK ) == NUM_ ) ) {", "m old Mouse Pos . width = e . get X ( ) ;", "m old Mouse Pos . height = e . get Y ( ) ;", "m new Mouse Pos . width = e . get X ( ) ;", "m new Mouse Pos . height = e . get Y ( ) ;", "m mouse State = NUM_ ;", "Graphics g = get Graphics ( ) ;", "if ( m Zoom Box Color == null ) {", "g . set Color ( Color . black ) ; }", "else {", "g . set Color ( m Zoom Box Color ) ; }", "if ( m Zoom Box XOR Color == null ) {", "g . set XOR Mode ( Color . white ) ; }", "else {", "g . set XOR Mode ( m Zoom Box XOR Color ) ; }", "g . draw Rect ( m old Mouse Pos . width , m old Mouse Pos . height , m new Mouse Pos . width - m old Mouse Pos . width , m new Mouse Pos . height - m old Mouse Pos . height ) ;", "g . dispose ( ) ; }", "else {", "m old Mouse Pos . width = e . get X ( ) ;", "m old Mouse Pos . height = e . get Y ( ) ;", "m new Mouse Pos . width = e . get X ( ) ;", "m new Mouse Pos . height = e . get Y ( ) ;", "m mouse State = NUM_ ;", "m frame Limiter . start ( ) ; } }", "else if ( ( e . get Button ( ) == Mouse Event . BUTTON 1 ) && e . is Alt Down ( ) && e . is Shift Down ( ) && ! e . is Control Down ( ) ) {", "save Component ( ) ; }", "else if ( m mouse State == NUM_ && m scaling == NUM_ ) { } }"]}
{"ids": "41451", "code": ["private static double parse Double Value ( String parse String , String open Tag , String close Tag , Data Type Validation Exception exception ) throws Data Type Validation Exception {", "String tag Value ;", "tag Value = parse String Value ( parse String , open Tag , close Tag , exception ) ;", "double double Value ;", "try {", "double Value = Double . parse Double ( tag Value ) ; }", "catch ( Number Format Exception e ) {", "throw e ; }", "return double Value ; }"]}
{"ids": "54768", "code": ["public void put String ( String s ) throws Array Index Out Of Bounds Exception , Unsupported Encoding Exception {", "byte [ ] bytes = s . get Bytes ( STR_ ) ;", "int length = bytes . length ;", "int end At = m index + length + NUM_ ;", "if ( end At > m content . length ) throw new Array Index Out Of Bounds Exception ( end At + STR_ + m content . length ) ;", "System . arraycopy ( bytes , NUM_ , m content , m index , length ) ;", "m index += length ;", "m content [ m index ++ ] = STR_ ;", "debug Append String ( s ) ; }"]}
{"ids": "13063", "code": ["@ Override public void error ( String domain , String key , XML Parse Exception exception ) throws XNI Exception {", "if ( f Error Handler != null ) {", "SAX Parse Exception sax Exception = create SAX Parse Exception ( exception ) ;", "try {", "f Error Handler . error ( sax Exception ) ; }", "catch ( SAX Parse Exception e ) {", "throw create XML Parse Exception ( e ) ; }", "catch ( SAX Exception e ) {", "throw create XNI Exception ( e ) ; } } }"]}
{"ids": "37245", "code": ["public C Status Panel ( final Back End Debugger Provider debugger Provider ) {", "super ( new Border Layout ( ) ) ;", "Preconditions . check Not Null ( debugger Provider , STR_ ) ;", "m label . set Foreground ( Color . BLACK ) ;", "add ( m label ) ;", "m synchronizer = new C Status Label Synchronizer ( m label , debugger Provider ) ; }"]}
{"ids": "69034", "code": ["@ Override public boolean open ( String access ) {", "if ( access . equals ( STR_ ) ) {", "try {", "i Stream = new File Image Input Stream ( new File ( file Path ) ) ;", "parser = new Label Parser ( ) ;", "metadata = parser . parse Header ( i Stream ) ;", "i Stream . close ( ) ;", "i Stream = null ; }", "catch ( IO Exception e ) {", "try {", "i Stream . close ( ) ; }", "catch ( Exception x ) { }", "return ( false ) ; } }", "return ( super . open ( access ) ) ; }"]}
{"ids": "32391", "code": ["@ Nullable public String file Name ( ) {", "return Java Logger . file Name ( delegate ) ; }"]}
{"ids": "43962", "code": ["public static B Node parse B Node ( String n Triples B Node , Value Factory value Factory ) throws Illegal Argument Exception {", "if ( n Triples B Node . starts With ( STR_ ) ) {", "return value Factory . create B Node ( n Triples B Node . substring ( NUM_ ) ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ + n Triples B Node ) ; } }"]}
{"ids": "63217", "code": ["public void free Object ( int id ) {", "if ( cache Id == id ) {", "cache Id = - NUM_ ;", "cache = null ; }", "map . remove ( id ) ; }"]}
{"ids": "51812", "code": ["private void stretch View Vertically ( View view , int cross Size ) {", "Layout Params lp = ( Layout Params ) view . get Layout Params ( ) ;", "int new Height = cross Size - lp . top Margin - lp . bottom Margin ;", "new Height = Math . max ( new Height , NUM_ ) ;", "view . measure ( Measure Spec . make Measure Spec ( view . get Measured Width ( ) , Measure Spec . EXACTLY ) , Measure Spec . make Measure Spec ( new Height , Measure Spec . EXACTLY ) ) ; }"]}
{"ids": "76612", "code": ["public static Inet Address hex To Inet 6 Address ( String addr Hex String ) throws Illegal Argument Exception {", "try {", "return numeric To Inet Address ( String . format ( STR_ , addr Hex String . substring ( NUM_ , NUM_ ) , addr Hex String . substring ( NUM_ , NUM_ ) , addr Hex String . substring ( NUM_ , NUM_ ) , addr Hex String . substring ( NUM_ , NUM_ ) , addr Hex String . substring ( NUM_ , NUM_ ) , addr Hex String . substring ( NUM_ , NUM_ ) , addr Hex String . substring ( NUM_ , NUM_ ) , addr Hex String . substring ( NUM_ , NUM_ ) ) ) ; }", "catch ( Exception e ) {", "Log . e ( STR_ , STR_ + addr Hex String + STR_ + e ) ;", "throw new Illegal Argument Exception ( e ) ; } }"]}
{"ids": "51518", "code": ["public double read Double ( ) throws IO Exception {", "return primitive Types . read Double ( ) ; }"]}
{"ids": "80316", "code": ["private boolean is At Maximum ( Adjustable bar ) {", "return ( bar . get Value ( ) + bar . get Visible Amount ( ) >= bar . get Maximum ( ) ) ; }"]}
{"ids": "10890", "code": ["protected void parse And Add Map Tile Set ( URL tile Set Properties ) throws IO Exception , Malformed URL Exception {", "Properties desc Props = new Properties ( ) ;", "Logger logger = get Logger ( ) ;", "logger . info ( STR_ ) ;", "Input Stream desc URL Stream = tile Set Properties . open Stream ( ) ;", "desc Props . load ( desc URL Stream ) ;", "logger . info ( STR_ + tile Set Properties . to String ( ) + STR_ + desc Props . to String ( ) ) ;", "Map Tile Set mts = create Map Tile Set From Properties ( desc Props ) ;", "if ( mts != null && mts . all Good ( ) ) {", "String mts Name = mts . get Name ( ) ;", "map Tile Sets . put ( mts . get Name ( ) , mts ) ;", "logger . info ( STR_ + mts Name + STR_ ) ; }", "desc URL Stream . close ( ) ; }"]}
{"ids": "8893", "code": ["public void enable Pan ( Bluetooth Adapter adapter ) {", "if ( m Pan == null ) m Pan = ( Bluetooth Pan ) connect Proxy ( adapter , Bluetooth Profile . PAN ) ;", "assert Not Null ( m Pan ) ;", "long start = System . current Time Millis ( ) ;", "m Pan . set Bluetooth Tethering ( true ) ;", "long stop = System . current Time Millis ( ) ;", "assert True ( m Pan . is Tethering On ( ) ) ;", "write Output ( String . format ( STR_ , ( stop - start ) ) ) ; }"]}
{"ids": "30249", "code": ["private int dist Between Points ( int x 1 , int z 1 , int x 2 , int z 2 , boolean b Allow Diags ) {", "int w = Math . abs ( x 2 - x 1 ) ;", "int h = Math . abs ( z 2 - z 1 ) ;", "if ( b Allow Diags ) {", "if ( w < h ) w = NUM_ ;", "else h = NUM_ ; }", "return w + h + NUM_ ; }"]}
{"ids": "21623", "code": ["private Workflow . Method create Volumes Method ( URI system URI , URI pool URI , List < URI > volume UR Is , Virtual Pool Capability Values Wrapper capabilities ) {", "return new Workflow . Method ( STR_ , system URI , pool URI , volume UR Is , capabilities ) ; }"]}
{"ids": "78366", "code": ["public void init ( Gui Manual Herblore manual ) {", "for ( Manual Widget Base widget : widgets ) widget . init ( manual ) ; }"]}
{"ids": "13921", "code": ["@ Get public Representation user Code Form ( ) throws O Auth 2 Restlet Exception , Invalid Grant Exception , Not Found Exception , Server Exception {", "final O Auth 2 Request request = request Factory . create ( get Request ( ) ) ;", "if ( request . get Parameter ( O Auth 2 Constants . Device Code . USER CODE ) != null ) {", "return verify ( null ) ; }", "else {", "return get Template Representation ( FORM , request , null ) ; } }"]}
{"ids": "68679", "code": ["public double unsafe Sabr Volatility ( final double strike , final double forward , final double expiry Time , final double alpha , final double beta , final double nu , final double rho ) {", "final double one Minus Beta = NUM_ - beta ;", "final double A = Math . pow ( forward * strike , one Minus Beta ) ;", "final double sqrt A = Math . sqrt ( A ) ;", "double log M ;", "if ( ! is Close ( forward , strike ) ) log M = Math . log ( forward / strike ) ;", "else {", "final double epsilon = ( forward - strike ) / strike ;", "log M = epsilon - NUM_ * epsilon * epsilon ; }", "final double z = ( nu / alpha ) * sqrt A * log M ;", "final double B = NUM_ - NUM_ * rho * z + z * z ;", "final double C = one Minus Beta * one Minus Beta * log M * log M ;", "final double tmp = ( Math . sqrt ( B ) + z - rho ) / ( NUM_ - rho ) ;", "final double xx = Math . log ( tmp ) ;", "final double D = sqrt A * ( NUM_ + C / NUM_ + C * C / NUM_ ) ;", "final double d = NUM_ + expiry Time * ( one Minus Beta * one Minus Beta * alpha * alpha / ( NUM_ * A ) + NUM_ * rho * beta * nu * alpha / sqrt A + ( NUM_ - NUM_ * rho * rho ) * ( nu * nu / NUM_ ) ) ;", "double multiplier ;", "final double m = NUM_ ;", "if ( Math . abs ( z * z ) > Constants . QL EPSILON * m ) multiplier = z / xx ;", "else {", "final double talpha = ( NUM_ - rho * rho ) / ( NUM_ - rho ) ;", "final double tbeta = alpha - NUM_ ;", "final double tgamma = rho / ( NUM_ - rho ) ;", "multiplier = NUM_ - beta * z + ( tgamma - talpha + tbeta * tbeta * NUM_ ) * z * z ; }", "return ( alpha / D ) * multiplier * d ; }"]}
{"ids": "8886", "code": ["public void close ( ) {", "while ( ! m Receivers . is Empty ( ) ) {", "m Context . unregister Receiver ( m Receivers . remove ( NUM_ ) ) ; }", "if ( m Output Writer != null ) {", "try {", "m Output Writer . close ( ) ; }", "catch ( IO Exception e ) {", "Log . w ( m Tag , STR_ , e ) ; } } }"]}
{"ids": "5200", "code": ["private void resolve Files ( List < String > classpaths , Map < String , String > files , String [ ] paths , String prefix ) {", "for ( String path : paths ) {", "String relative Path = file Handler . get Name ( path ) ;", "if ( prefix != null ) {", "relative Path = file Handler . append ( prefix , relative Path ) ; }", "if ( classpaths != null ) {", "classpaths . add ( relative Path ) ; }", "if ( file Handler . is Directory ( path ) ) {", "String [ ] children = file Handler . get Children ( path ) ;", "if ( children != null && children . length != NUM_ ) {", "resolve Files ( null , files , children , relative Path ) ; } }", "else {", "files . put ( relative Path , path ) ; } } }"]}
{"ids": "62711", "code": ["public synchronized void reload Configuration ( ) {", "properties = null ;", "final Parameters . clear ( ) ; }"]}
{"ids": "23111", "code": ["protected void remove Message Processor ( Message Processor old Message Processor ) {", "synchronized ( message Processors ) {", "if ( message Processors . remove ( old Message Processor ) ) {", "old Message Processor . stop ( ) ; } } }"]}
{"ids": "48303", "code": ["X 509 Issuer Serial ( X 509 Certificate cert ) {", "this ( cert . get Issuer X 500 Principal ( ) , cert . get Serial Number ( ) ) ; }"]}
{"ids": "19990", "code": ["public void put Bytes ( byte [ ] bytes ) {", "ensure Capacity ( bytes . length ) ;", "System . arraycopy ( bytes , NUM_ , this . byte Buffer , this . position , bytes . length ) ;", "this . position += bytes . length ; }"]}
{"ids": "31039", "code": ["public static String array To Delimited String ( Object [ ] arr , String delim ) {", "if ( arr == null ) {", "return STR_ ; }", "String Buffer sb = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < arr . length ; i ++ ) {", "if ( i > NUM_ ) {", "sb . append ( delim ) ; }", "sb . append ( arr [ i ] ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "66217", "code": ["public static Compiere Color parse ( String attributes ) {", "Compiere Color cc = new Compiere Color ( ) ;", "try {", "if ( attributes != null && attributes . length ( ) > NUM_ ) cc . parse Attributres ( attributes ) ; }", "catch ( Exception e ) {", "log . severe ( STR_ + attributes + STR_ + e . to String ( ) ) ; }", "return cc ; }"]}
{"ids": "35869", "code": ["public synchronized static Lua State new Lua State ( ) {", "int i = get Next State Index ( ) ;", "Lua State L = new Lua State ( i ) ;", "states . add ( i , L ) ;", "return L ; }"]}
{"ids": "78154", "code": ["static long check Preamble Size ( Memory mem ) {", "final long cap = mem . get Capacity ( ) ;", "if ( cap < NUM_ ) {", "throw Not Big Enough ( cap , NUM_ ) ; }", "final long pre 0 = mem . get Long ( NUM_ ) ;", "final int pre Longs = ( int ) ( pre 0 & NUM_ ) ;", "final int required = Math . max ( pre Longs << NUM_ , NUM_ ) ;", "if ( cap < required ) {", "throw Not Big Enough ( cap , required ) ; }", "return pre 0 ; }"]}
{"ids": "31961", "code": ["public static Collection < Inet Address > to Inet Addresses ( Collection < String > addrs , Collection < String > host Names ) throws Ignite Checked Exception {", "Set < Inet Address > res = new Hash Set < > ( addrs . size ( ) ) ;", "Iterator < String > host Names It = host Names . iterator ( ) ;", "for ( String addr : addrs ) {", "String host Name = host Names It . has Next ( ) ? host Names It . next ( ) : null ;", "Inet Address inet Addr = null ;", "if ( ! F . is Empty ( host Name ) ) {", "try {", "inet Addr = Inet Address . get By Name ( host Name ) ; }", "catch ( Unknown Host Exception ignored ) { } }", "if ( inet Addr == null || inet Addr . is Loopback Address ( ) ) {", "try {", "inet Addr = Inet Address . get By Name ( addr ) ; }", "catch ( Unknown Host Exception ignored ) { } }", "if ( inet Addr != null ) res . add ( inet Addr ) ; }", "if ( res . is Empty ( ) ) throw new Ignite Checked Exception ( STR_ + addrs + STR_ + host Names + STR_ ) ;", "return res ; }"]}
{"ids": "13971", "code": ["public static String remove New Line Chars ( String s ) {", "String ret String = null ;", "if ( ( s != null ) && ( s . length ( ) > NUM_ ) && ( s . index Of ( STR_ ) != - NUM_ ) ) {", "char [ ] chars = s . to Char Array ( ) ;", "int len = chars . length ;", "String Buffer sb = new String Buffer ( len ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "char c = chars [ i ] ;", "if ( c != STR_ ) {", "sb . append ( c ) ; } }", "ret String = sb . to String ( ) ; }", "else {", "ret String = s ; }", "return ret String ; }"]}
{"ids": "78109", "code": ["void calculate Counters ( ) {", "if ( ! is DB Available ( ) ) return ;", "long time = System . current Time Millis ( ) ;", "int total = NUM_ ;", "write . lock ( ) ;", "try {", "count Reset Feeds And Categories ( ) ;", "total += count Feeds With Unread ( ) ;", "count Categories With Unread ( ) ;", "count Special Categories ( total ) ; }", "finally {", "write . unlock ( ) ; }", "Log . i ( TAG , String . format ( STR_ , total , ( System . current Time Millis ( ) - time ) ) ) ; }"]}
{"ids": "80220", "code": ["protected void append HTML ( final String Builder sbuf , final char ch ) {", "switch ( ch ) {", "case STR_ :", "sbuf . append ( STR_ ) ;", "break ;", "case STR_ :", "sbuf . append ( STR_ ) ;", "break ;", "case STR_ :", "sbuf . append ( STR_ ) ;", "break ;", "default :", "sbuf . append ( ch ) ;", "break ; } }"]}
{"ids": "70656", "code": ["private Collection < Var > migrate Columns ( SQL Table current Table ) {", "List < Var > vars = new Array List < > ( ) ;", "String table Type = current Table . get Entity Type ( ) ;", "Map < String , Resource Type . Data Type > columns = current Table . get Columns ( ) ;", "Map < String , String > foreign Columns = current Table . get Foreign Key Columns ( ) ;", "for ( String column : columns . key Set ( ) ) {", "Resource Type . Data Type column Type = columns . get ( column ) ;", "if ( foreign Columns . contains Key ( column ) ) {", "vars . add All ( migrate As Relation ( table Type , column , foreign Columns . get ( column ) ) ) ; }", "else {", "vars . add All ( migrate As Resource ( table Type , column Type , column ) ) ; } }", "return vars ; }"]}
{"ids": "19799", "code": ["public int retrieve Row Count ( String table Name ) throws SQL Exception {", "Result Set rs = null ;", "int row Count = - NUM_ ;", "try {", "rs = statement . execute Query ( STR_ + table Name ) ;", "rs . next ( ) ;", "row Count = rs . get Int ( NUM_ ) ; }", "finally {", "if ( rs != null ) {", "rs . close ( ) ; } }", "return row Count ; }"]}
{"ids": "36251", "code": ["@ Override public int add Attribute ( Attribute a ) {", "if ( a == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else {", "int index = - NUM_ ;", "Attribute original = a ;", "a = ( Attribute ) a . clone ( ) ;", "if ( unused Column List . size ( ) > NUM_ ) {", "synchronized ( unused Column List ) {", "if ( unused Column List . size ( ) > NUM_ ) {", "index = unused Column List . remove ( NUM_ ) ;", "attributes . set ( index , a ) ; }", "else {", "index = attributes . size ( ) ;", "attributes . add ( a ) ; } } }", "else {", "index = attributes . size ( ) ;", "attributes . add ( a ) ; }", "a . set Table Index ( index ) ;", "original . set Table Index ( index ) ;", "return index ; } }"]}
{"ids": "63177", "code": ["public static < X > void sort Top N ( X [ ] array , int offset , int limit , Comparator < ? super X > comp ) {", "partition Top N ( array , offset , limit , comp ) ;", "Arrays . sort ( array , offset , ( int ) Math . min ( ( long ) offset + limit , array . length ) , comp ) ; }"]}
{"ids": "23131", "code": ["protected boolean is Server Transaction ( ) {", "return this instanceof SIP Server Transaction ; }"]}
{"ids": "53889", "code": ["public static void read Fully ( Input Stream in , byte buf [ ] , int off , int len ) throws IO Exception {", "int to Read = len ;", "while ( to Read > NUM_ ) {", "int ret = in . read ( buf , off , to Read ) ;", "if ( ret < NUM_ ) {", "throw new IO Exception ( STR_ ) ; }", "to Read -= ret ;", "off += ret ; } }"]}
{"ids": "26213", "code": ["public static String add To Cart Bulk ( Http Servlet Request request , Http Servlet Response response ) {", "String category Id = request . get Parameter ( STR_ ) ;", "Shopping Cart cart = get Cart Object ( request ) ;", "Delegator delegator = ( Delegator ) request . get Attribute ( STR_ ) ;", "Local Dispatcher dispatcher = ( Local Dispatcher ) request . get Attribute ( STR_ ) ;", "Shopping Cart Helper cart Helper = new Shopping Cart Helper ( delegator , dispatcher , cart ) ;", "String control Directive ;", "Map < String , Object > result ;", "Map < String , Object > param Map = Util Http . get Parameter Map ( request ) ;", "String catalog Id = Catalog Worker . get Current Catalog Id ( request ) ;", "result = cart Helper . add To Cart Bulk ( catalog Id , category Id , param Map ) ;", "control Directive = process Result ( result , request ) ;", "if ( control Directive . equals ( ERROR ) ) {", "return STR_ ; }", "else {", "return STR_ ; } }"]}
{"ids": "36127", "code": ["public void add Frequent Set ( Frequent Item Set item Set ) {", "frequent Sets . add ( item Set ) ;", "maximum Set Size = Math . max ( item Set . get Number Of Items ( ) , maximum Set Size ) ; }"]}
{"ids": "29891", "code": ["private int skip From Peek Buffer ( int length ) {", "int bytes Skipped = Math . min ( peek Buffer Length , length ) ;", "update Peek Buffer ( bytes Skipped ) ;", "return bytes Skipped ; }"]}
{"ids": "21798", "code": ["protected Workflow . Method create Remove Volumes From CG Method ( URI vplex URI , URI cg URI , List < URI > vplex Volume UR Is ) {", "return new Workflow . Method ( REMOVE VOLUMES FROM CG STEP , vplex URI , cg URI , vplex Volume UR Is ) ; }"]}
{"ids": "55397", "code": ["private static int show Urls Prompt ( Component parent , List < String > urls ) {", "String text = STR_ ;", "for ( String url : urls ) {", "url = split Url ( url ) ;", "text += url + STR_ ; }", "String ok Option = STR_ ;", "if ( urls . size ( ) > NUM_ ) {", "ok Option = STR_ + urls . size ( ) + STR_ ; }", "String [ ] options = { ok Option , STR_ } ;", "if ( urls . size ( ) == NUM_ ) {", "options = new String [ ] { ok Option , STR_ , STR_ } ; }", "int chosen Option = J Option Pane . show Option Dialog ( parent , text , STR_ , J Option Pane . OK CANCEL OPTION , J Option Pane . QUESTION MESSAGE , null , options , NUM_ ) ;", "return chosen Option ; }"]}
{"ids": "84968", "code": ["private static String compute Regex String ( String original String , String old Name , String new Name ) {", "String Builder builder = new String Builder ( original String . length ( ) ) ;", "String old Name Or New Name Reg Ex = String . format ( STR_ , Pattern . quote ( old Name ) , Pattern . quote ( new Name ) ) ;", "int i = original String . index Of ( old Name ) ;", "if ( i >= NUM_ ) {", "int prev I = NUM_ ;", "while ( i >= NUM_ ) {", "builder . append ( Pattern . quote ( original String . substring ( prev I , i ) ) ) ;", "builder . append ( old Name Or New Name Reg Ex ) ;", "prev I = i ;", "i = original String . index Of ( old Name , i + old Name . length ( ) ) ; }", "builder . append ( Pattern . quote ( original String . substring ( prev I + old Name . length ( ) , original String . length ( ) ) ) ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "38910", "code": ["public void do History ( Key Event e ) {", "if ( e . get Source ( ) == m Input ) {", "switch ( e . get Key Code ( ) ) {", "case Key Event . VK UP :", "if ( m History Pos > NUM_ ) {", "m History Pos -- ;", "String command = m Command History . element At ( m History Pos ) ;", "m Input . set Text ( command ) ; }", "break ;", "case Key Event . VK DOWN :", "if ( m History Pos < m Command History . size ( ) ) {", "m History Pos ++ ;", "String command = STR_ ;", "if ( m History Pos < m Command History . size ( ) ) {", "command = m Command History . element At ( m History Pos ) ; }", "m Input . set Text ( command ) ; }", "break ;", "default :", "break ; } } }"]}
{"ids": "81344", "code": ["public static Reference Binding [ ] substitute ( Substitution substitution , Reference Binding [ ] original Types ) {", "if ( original Types == null ) return null ;", "Reference Binding [ ] substituted Types = original Types ;", "for ( int i = NUM_ , length = original Types . length ; i < length ; i ++ ) {", "Reference Binding original Type = original Types [ i ] ;", "Type Binding substituted Type = substitute ( substitution , original Type ) ;", "if ( ! ( substituted Type instanceof Reference Binding ) ) {", "return null ; }", "if ( substituted Type != original Type ) {", "if ( substituted Types == original Types ) {", "System . arraycopy ( original Types , NUM_ , substituted Types = new Reference Binding [ length ] , NUM_ , i ) ; }", "substituted Types [ i ] = ( Reference Binding ) substituted Type ; }", "else if ( substituted Types != original Types ) {", "substituted Types [ i ] = original Type ; } }", "return substituted Types ; }"]}
{"ids": "48994", "code": ["private static Collection < TCP Transport > all Known Transports ( ) {", "Set < TCP Transport > s ;", "synchronized ( local Endpoints ) {", "s = new Hash Set < TCP Transport > ( local Endpoints . size ( ) ) ;", "for ( Linked List < TCP Endpoint > ep List : local Endpoints . values ( ) ) {", "TCP Endpoint ep = ep List . get First ( ) ;", "s . add ( ep . transport ) ; } }", "return s ; }"]}
{"ids": "71964", "code": ["public void request Seconds Until Idle Lockout ( ) {", "operations . add ( Password Policy State Operation Type . GET SECONDS UNTIL IDLE LOCKOUT ) ; }"]}
{"ids": "59586", "code": ["@ Request Mapping ( value = STR_ , method = { Request Method . GET } ) @ Response Body private static List < String > show Hive Databases ( ) throws IO Exception {", "I Hive Client hive Client = Hive Client Factory . get Hive Client ( ) ;", "List < String > results = null ;", "try {", "results = hive Client . get Hive Db Names ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new IO Exception ( e ) ; }", "return results ; }"]}
{"ids": "78148", "code": ["private static double hacky Adjuster ( double f ) {", "double tmp = Math . sqrt ( NUM_ - f ) ;", "return ( f <= NUM_ ) ? tmp : tmp + ( NUM_ * ( f - NUM_ ) ) ; }"]}
{"ids": "43816", "code": ["private boolean copy Document ( Search Document new Document , Search Document document , Map < String , Set < String > > removed Properties ) {", "boolean mutated = false ;", "for ( String old Field Name : document . get Property Names ( ) ) {", "new Document . add Property ( old Field Name ) ;", "List < String > old Values = document . get Property ( old Field Name ) ;", "if ( old Values != null ) {", "Set < String > objects Removed = ( removed Properties != null ) ? removed Properties . get ( old Field Name ) : null ;", "for ( String old Value : old Values ) {", "if ( ( objects Removed != null ) && ( objects Removed . contains ( old Value ) ) ) {", "mutated = true ; }", "else {", "add Property ( old Field Name , old Value , new Document ) ; } } } }", "return mutated ; }"]}
{"ids": "23902", "code": ["public void unlock For Clear ( Internal Distributed Member locker ) {", "synchronized ( this . clear Lock Sync ) {", "Internal Distributed System instance = Internal Distributed System . get Any Instance ( ) ;", "if ( instance != null && logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ , locker , System . identity Hash Code ( this ) ) ; }", "if ( this . lock Owner != null && ! locker . equals ( this . lock Owner ) ) {", "if ( instance != null && logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ , lock Owner ) ; }", "return ; }", "unlock Version Generation ( locker ) ; } }"]}
{"ids": "64768", "code": ["public void write ( Byte Buffer buffer ) throws IO Exception {", "buffer . position ( NUM_ ) ;", "if ( m File Channel . size ( ) + buffer . capacity ( ) < m Max Size ) {", "while ( buffer . has Remaining ( ) ) {", "m File Channel . write ( buffer ) ; }", "update Wave File Size ( ) ; }", "else {", "int remaining = ( int ) ( m Max Size - m File Channel . size ( ) ) ;", "remaining -= ( int ) ( remaining % m Audio Format . get Frame Size ( ) ) ;", "byte [ ] bytes = buffer . array ( ) ;", "Byte Buffer current = Byte Buffer . wrap ( Arrays . copy Of ( bytes , remaining ) ) ;", "Byte Buffer next = Byte Buffer . wrap ( Arrays . copy Of Range ( bytes , remaining , bytes . length ) ) ;", "while ( current . has Remaining ( ) ) {", "m File Channel . write ( current ) ; }", "update Wave File Size ( ) ;", "rollover ( ) ;", "while ( next . has Remaining ( ) ) {", "m File Channel . write ( next ) ; }", "update Wave File Size ( ) ; } }"]}
{"ids": "31530", "code": ["public static double dmod d ( double lhs , double rhs ) {", "return rhs != NUM_ ? lhs - rhs * Math . floor ( lhs / rhs ) : Double . Na N ; }"]}
{"ids": "57031", "code": ["public static boolean contain IP ( int cidr Prefix , int cidr Mask Bits , int ip ) {", "boolean matched = true ;", "int bits To Shift = NUM_ - cidr Mask Bits ;", "if ( bits To Shift > NUM_ ) {", "cidr Prefix = cidr Prefix > > bits To Shift ;", "ip = ip > > bits To Shift ;", "cidr Prefix = cidr Prefix << bits To Shift ;", "ip = ip << bits To Shift ; }", "if ( cidr Prefix != ip ) {", "matched = false ; }", "return matched ; }"]}
{"ids": "48723", "code": ["final void put Long ( int offset , long value ) {", "unsafe . put Long ( offset + address , value ) ; }"]}
{"ids": "10164", "code": ["public static String gensalt ( int log rounds , Secure Random random ) {", "String Buffer rs = new String Buffer ( ) ;", "byte rnd [ ] = new byte [ BCRYPT SALT LEN ] ;", "random . next Bytes ( rnd ) ;", "rs . append ( STR_ ) ;", "if ( log rounds < NUM_ ) {", "rs . append ( STR_ ) ; }", "if ( log rounds > NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "rs . append ( Integer . to String ( log rounds ) ) ;", "rs . append ( STR_ ) ;", "rs . append ( encode base 64 ( rnd , rnd . length ) ) ;", "return rs . to String ( ) ; }"]}
{"ids": "30305", "code": ["public String Buffer number To String ( final String str Number To Convert ) {", "String str Number = STR_ , sign Bit = STR_ ;", "if ( str Number To Convert . starts With ( STR_ ) ) {", "str Number = STR_ + str Number To Convert . substring ( NUM_ , str Number To Convert . length ( ) ) ;", "sign Bit = STR_ ; }", "else str Number = STR_ + str Number To Convert ;", "final Decimal Format dft = new Decimal Format ( STR_ ) ;", "final String strtemp = STR_ + dft . format ( Double . parse Double ( str Number ) ) ;", "String Buffer strb Number = new String Buffer ( strtemp ) ;", "final int int Len = strb Number . length ( ) ;", "for ( int i = int Len - NUM_ ; i > NUM_ ; i = i - NUM_ ) strb Number . insert ( i , STR_ ) ;", "if ( sign Bit . equals ( STR_ ) ) strb Number = strb Number . insert ( NUM_ , STR_ ) ;", "return strb Number ; }"]}
{"ids": "8536", "code": ["private void run Init Script If Required ( String url , Connection connection ) throws SQL Exception {", "Matcher matcher = INITSCRIPT MATCHING PATTERN . matcher ( url ) ;", "if ( matcher . matches ( ) ) {", "String init Script Path = matcher . group ( NUM_ ) ;", "try {", "URL resource = Resources . get Resource ( init Script Path ) ;", "String sql = Resources . to String ( resource , Charsets . UTF 8 ) ;", "Script Utils . execute Sql Script ( connection , init Script Path , sql ) ; }", "catch ( IO Exception | Illegal Argument Exception e ) {", "LOGGER . warn ( STR_ , init Script Path ) ;", "throw new SQL Exception ( STR_ + init Script Path , e ) ; }", "catch ( Script Exception e ) {", "LOGGER . error ( STR_ , init Script Path , e ) ;", "throw new SQL Exception ( STR_ + init Script Path , e ) ; } } }"]}
{"ids": "72362", "code": ["public static void check Finite ( final double [ ] val ) throws Math Illegal Argument Exception {", "for ( int i = NUM_ ; i < val . length ; i ++ ) {", "final double x = val [ i ] ;", "if ( Double . is Infinite ( x ) || Double . is Na N ( x ) ) {", "throw new Math Illegal Argument Exception ( Localized Core Formats . NOT FINITE NUMBER , x ) ; } } }"]}
{"ids": "70884", "code": ["private void init Keyboard Buttons ( Keyboard View view ) {", "m Buttons = new Array List < > ( ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 0 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 1 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 2 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 3 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 4 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 5 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 6 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 7 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 8 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button 9 ) ) ;", "m Buttons . add ( ( Keyboard Button View ) view . find View By Id ( R . id . pin code button clear ) ) ;", "for ( View button : m Buttons ) {", "button . set On Click Listener ( this ) ; } }"]}
{"ids": "9172", "code": ["private static String find Relative Path ( String file Path , String dir Path ) {", "String rel Path ;", "if ( ! dir Path . ends With ( File . separator ) ) {", "dir Path = dir Path + File . separator ; }", "if ( file Path . starts With ( dir Path ) ) {", "rel Path = file Path . substring ( dir Path . length ( ) ) ; }", "else {", "rel Path = file Path ; }", "return rel Path ; }"]}
{"ids": "76339", "code": ["public void reset Singleton ( ) {", "root = null ;", "tmp File Counter . set ( NUM_ ) ;", "accessed Files . clear ( ) ;", "should All Throw IO Exception = false ;", "classes That Should Throw IO Exception . clear ( ) ;", "synchronized ( leaking Resources ) {", "for ( Leaking Resource resource : leaking Resources ) {", "try {", "resource . release ( ) ; }", "catch ( Exception e ) {", "logger . warn ( STR_ + e . get Message ( ) , e ) ; } }", "leaking Resources . clear ( ) ; } }"]}
{"ids": "80372", "code": ["public static String generate String Of Characters ( int count ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "sb . append ( CHARACTERS . char At ( ( int ) ( Math . random ( ) * CHARACTERS . length ( ) ) ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "68667", "code": ["private Exchange Rate Manager ( ) {", "if ( System . get Property ( STR_ ) == null ) throw new Unsupported Operation Exception ( STR_ ) ;", "add Known Rates ( ) ; }"]}
{"ids": "86978", "code": ["public void remove Attribute ( String name ) {", "if ( name != null ) if ( attributes List != null ) {", "for ( int i = NUM_ ; i < attributes List . size ( ) ; i ++ ) {", "Object o = attributes List . element At ( i ) ;", "if ( o instanceof Attribute Field ) {", "Attribute Field a = ( Attribute Field ) o ;", "try {", "String n = a . get Name ( ) ;", "if ( n != null ) {", "if ( name . equals ( n ) ) {", "attributes List . remove ( a ) ; } } }", "catch ( Sdp Parse Exception e ) { } } } } }"]}
{"ids": "55945", "code": ["@ Override public void evict ( String key ) {", "key = safety Key ( key ) ;", "final File file = new File ( cache Directory , key ) ;", "file . delete ( ) ; }"]}
{"ids": "66433", "code": ["public static boolean is Unique Contraint Error ( Exception e ) {", "if ( DB . is Postgre SQL ( ) ) return is SQL State ( e , STR_ ) ;", "return is Error Code ( e , NUM_ ) ; }"]}
{"ids": "43987", "code": ["private void insert Used Context Prefixes ( ) {", "int unknown Prefixes Count = unknown Prefixes In XML Literal . size ( ) ;", "if ( unknown Prefixes Count > NUM_ ) {", "String Builder context Prefixes = new String Builder ( NUM_ ) ;", "Element Info top Element = peek Stack ( ) ;", "for ( int i = NUM_ ; i < unknown Prefixes Count ; i ++ ) {", "String prefix = unknown Prefixes In XML Literal . get ( i ) ;", "String namespace = top Element . get Namespace ( prefix ) ;", "if ( namespace != null ) {", "append Namespace Decl ( context Prefixes , prefix , namespace ) ; } }", "int end Of First Start Tag = char Buf . index Of ( STR_ ) ;", "char Buf . insert ( end Of First Start Tag , context Prefixes . to String ( ) ) ; }", "unknown Prefixes In XML Literal . clear ( ) ; }"]}
{"ids": "32177", "code": ["public void add Put Time Nanos ( long duration ) {", "put Time Nanos . add And Get ( duration ) ;", "if ( delegate != null ) delegate . add Put Time Nanos ( duration ) ; }"]}
{"ids": "83784", "code": ["public static List < Integer > precompute Hashes ( byte [ ] data , long tweak ) {", "Array List < Integer > list = new Array List < > ( MAX HASH FUNCS ) ;", "for ( int i = NUM_ ; i < MAX HASH FUNCS ; ++ i ) {", "list . add ( murmurhash 3 bit ( i , data , tweak ) ) ; }", "return list ; }"]}
{"ids": "86888", "code": ["@ Request Processing ( value = STR_ , method = HTTP Request Method . GET ) @ Before ( advice Class = { Stopwatch Start Advice . class , Anonymous View Check . class , User Block Check . class } ) @ After ( advice Class = Stopwatch End Advice . class ) public void show Home Following Tags ( final HTTP Request Context context , final Http Servlet Request request , final Http Servlet Response response , final String user Name ) throws Exception {", "final JSON Object user = ( JSON Object ) request . get Attribute ( User . USER ) ;", "request . set Attribute ( Keys . TEMAPLTE DIR NAME , Symphonys . get ( STR_ ) ) ;", "final Abstract Free Marker Renderer renderer = new Skin Renderer ( ) ;", "context . set Renderer ( renderer ) ;", "renderer . set Template Name ( STR_ ) ;", "final Map < String , Object > data Model = renderer . get Data Model ( ) ;", "filler . fill Header And Footer ( request , response , data Model ) ;", "String page Num Str = request . get Parameter ( STR_ ) ;", "if ( Strings . is Empty Or Null ( page Num Str ) || ! Strings . is Numeric ( page Num Str ) ) {", "page Num Str = STR_ ; }", "final int page Num = Integer . value Of ( page Num Str ) ;", "final int page Size = Symphonys . get Int ( STR_ ) ;", "final int window Size = Symphonys . get Int ( STR_ ) ;", "fill Home User ( data Model , user ) ;", "final String following Id = user . opt String ( Keys . OBJECT ID ) ;", "data Model . put ( Follow . FOLLOWING ID , following Id ) ;", "avatar Query Service . fill User Avatar URL ( user ) ;", "final JSON Object following Tags Result = follow Query Service . get Following Tags ( following Id , page Num , page Size ) ;", "final List < JSON Object > following Tags = ( List < JSON Object > ) following Tags Result . opt ( Keys . RESULTS ) ;", "data Model . put ( Common . USER HOME FOLLOWING TAGS , following Tags ) ;", "final boolean is Logged In = ( Boolean ) data Model . get ( Common . IS LOGGED IN ) ;", "if ( is Logged In ) {", "final JSON Object current User = ( JSON Object ) data Model . get ( Common . CURRENT USER ) ;", "final String follower Id = current User . opt String ( Keys . OBJECT ID ) ;", "final boolean is Following = follow Query Service . is Following ( follower Id , following Id ) ;", "data Model . put ( Common . IS FOLLOWING , is Following ) ;", "for ( final JSON Object following Tag : following Tags ) {", "final String home User Following Tag Id = following Tag . opt String ( Keys . OBJECT ID ) ;", "following Tag . put ( Common . IS FOLLOWING , follow Query Service . is Following ( follower Id , home User Following Tag Id ) ) ; } }", "user . put ( User Ext . USER T CREATE TIME , new Date ( user . get Long ( Keys . OBJECT ID ) ) ) ;", "final int following Tag Cnt = following Tags Result . opt Int ( Pagination . PAGINATION RECORD COUNT ) ;", "final int page Count = ( int ) Math . ceil ( following Tag Cnt / ( double ) page Size ) ;", "final List < Integer > page Nums = Paginator . paginate ( page Num , page Size , page Count , window Size ) ;", "if ( ! page Nums . is Empty ( ) ) {", "data Model . put ( Pagination . PAGINATION FIRST PAGE NUM , page Nums . get ( NUM_ ) ) ;", "data Model . put ( Pagination . PAGINATION LAST PAGE NUM , page Nums . get ( page Nums . size ( ) - NUM_ ) ) ; }", "data Model . put ( Pagination . PAGINATION CURRENT PAGE NUM , page Num ) ;", "data Model . put ( Pagination . PAGINATION PAGE COUNT , page Count ) ;", "data Model . put ( Pagination . PAGINATION PAGE NUMS , page Nums ) ; }"]}
{"ids": "10930", "code": ["public int elevation At ( float lat , float lon ) {", "if ( frame is valid == true ) {", "if ( lat >= dsi . sw lat && lat <= dsi . ne lat && lon >= dsi . sw lon && lon <= dsi . ne lon ) {", "int lat index = Math . round ( ( lat - dsi . sw lat ) * NUM_ / uhl . lat post interval ) ;", "int lon index = Math . round ( ( lon - dsi . sw lon ) * NUM_ / uhl . lon post interval ) ;", "if ( elevations [ lon index ] == null ) read Data Record ( lon index ) ;", "return ( int ) elevations [ lon index ] [ lat index ] ; } }", "return - NUM_ ; }"]}
{"ids": "52997", "code": ["private void delete Children ( Element container ) {", "while ( container . has Child Nodes ( ) ) {", "container . remove Child ( container . get Last Child ( ) ) ; } }"]}
{"ids": "15505", "code": ["private void save Initial Child State ( Faces Context faces Context , UI Component component ) {", "if ( component instanceof Editable Value Holder && ! component . is Transient ( ) ) {", "String client Id = component . get Client Id ( faces Context ) ;", "Saved State state = new Saved State ( ) ;", "initial Child State . put ( client Id , state ) ;", "state . populate ( ( Editable Value Holder ) component ) ; }", "Iterator < UI Component > iterator = component . get Facets And Children ( ) ;", "while ( iterator . has Next ( ) ) {", "save Child State ( faces Context , iterator . next ( ) ) ; } }"]}
{"ids": "4956", "code": ["public boolean is overlap ( ) {", "Set < Brd Item > start contacts = get start contacts ( ) ;", "Set < Brd Item > end contacts = get end contacts ( ) ;", "for ( Brd Item end contact : end contacts ) {", "if ( start contacts . contains ( end contact ) ) return true ; }", "return false ; }"]}
{"ids": "67500", "code": ["static Object ensure Not Null ( Location location , Object value ) {", "if ( value == null ) {", "throw new Eval Exception ( location , STR_ ) ; }", "return value ; }"]}
{"ids": "51680", "code": ["private static String pad Right ( String s , int min Length ) {", "return String . format ( STR_ + min Length + STR_ , s ) ; }"]}
{"ids": "73165", "code": ["public void add Preferences Button ( ) {", "J Button prefs Button = new J Button ( STR_ ) ;", "prefs Button . set Hide Action Text ( true ) ;", "prefs Button . set Action ( Raster Plot Actions . get Properties Dialog Action ( this ) ) ;", "button Panel . add ( prefs Button ) ; }"]}
{"ids": "1289", "code": ["public void clear Unused ( Config Impl config ) {", "System Out . print Date ( config . get Out Writer ( ) , STR_ + size ( ) + STR_ + max Size + STR_ ) ;", "if ( size ( ) > max Size ) {", "Object [ ] keys = keys ( ) ;", "Long Key List list = new Long Key List ( ) ;", "for ( int i = NUM_ ; i < keys . length ; i ++ ) {", "Page Source ps = get Page Source ( keys [ i ] , false ) ;", "long update Time = ps . get Last Access Time ( ) ;", "if ( update Time + timeout < System . current Time Millis ( ) ) {", "long add = ( ( ps . get Access Count ( ) - NUM_ ) * NUM_ ) ;", "if ( add > timeout ) add = timeout ;", "list . add ( update Time + add , keys [ i ] ) ; } }", "while ( size ( ) > max Size ) {", "Object key = list . shift ( ) ;", "if ( key == null ) break ;", "remove ( key ) ; } } }"]}
{"ids": "48809", "code": ["public Short Interleaved Raster ( Sample Model sample Model , Data Buffer data Buffer , Point origin ) {", "this ( sample Model , data Buffer , new Rectangle ( origin . x , origin . y , sample Model . get Width ( ) , sample Model . get Height ( ) ) , origin , null ) ; }"]}
{"ids": "35226", "code": ["@ Override public boolean fling Backward ( Selector obj , boolean is Vertical ) throws Ui Object Not Found Exception {", "Ui Scrollable scrollable = new Ui Scrollable ( obj . to Ui Selector ( ) ) ;", "if ( is Vertical ) scrollable . set As Vertical List ( ) ;", "else scrollable . set As Horizontal List ( ) ;", "return scrollable . fling Backward ( ) ; }"]}
{"ids": "75824", "code": ["protected static double to Double ( String s ) {", "try {", "return Double . parse Double ( s ) ; }", "catch ( Exception e ) {", "Test Case . fail ( STR_ + s + STR_ + throwable To String ( e ) ) ;", "return Double . Na N ; } }"]}
{"ids": "37030", "code": ["public void add Listener ( final I Filter Panel Listener < T > listener ) {", "m listeners . add Listener ( listener ) ; }"]}
{"ids": "20449", "code": ["public void testmirror ( File orig , File origni , File truecolor ) {", "File mirror = Test Support . add Suffix To Name ( orig , STR_ ) ;", "File recov = Test Support . add Suffix To Name ( orig , STR_ ) ;", "long crc 0 = NUM_ ;", "boolean interlaced ;", "boolean palete ; {", "Png Reader pngr = new Png Reader ( orig ) ;", "Png Writer pngw = null ;", "try {", "if ( rand . next Boolean ( ) ) pngr . set Line Set Factory ( Image Line Set Default . get Factory Byte ( ) ) ;", "palete = pngr . img Info . indexed ;", "pngr . prepare Simple Digest Computation ( ) ;", "interlaced = pngr . is Interlaced ( ) ;", "pngw = new Png Writer ( mirror , pngr . img Info , true ) ;", "pngw . set Filter Type ( Filter Type . FILTER CYCLIC ) ;", "pngw . copy Chunks From ( pngr . get Chunks List ( ) ) ;", "I Image Line Set < ? extends I Image Line > lines = pngr . read Rows ( ) ;", "for ( int row = NUM_ ; row < pngr . img Info . rows ; row ++ ) {", "mirror Line ( lines . get Image Line ( row ) , pngr . img Info ) ;", "pngw . write Row ( lines . get Image Line ( row ) ) ; }", "pngr . end ( ) ;", "crc 0 = Png Helper Internal . get Digest ( pngr ) ;", "pngw . end ( ) ; }", "finally {", "pngr . close ( ) ;", "if ( pngw != null ) pngw . close ( ) ; } } {", "Png Reader pngr 2 = new Png Reader ( mirror ) ;", "Png Writer pngw = null ;", "try {", "if ( pngr 2 . img Info . bit Depth < NUM_ && rand . next Boolean ( ) ) pngr 2 . set Line Set Factory ( Image Line Set Default . get Factory Byte ( ) ) ;", "pngw = new Png Writer ( recov , pngr 2 . img Info , true ) ;", "pngw . set Filter Type ( Filter Type . FILTER DEFAULT ) ;", "pngw . copy Chunks From ( pngr 2 . get Chunks List ( ) ) ;", "for ( int row = NUM_ ; row < pngr 2 . img Info . rows ; row ++ ) {", "I Image Line line = pngr 2 . read Row ( ) ;", "mirror Line ( line , pngr 2 . img Info ) ;", "pngw . write Row ( line ) ; }", "pngr 2 . end ( ) ;", "pngw . end ( ) ; }", "finally {", "pngr 2 . close ( ) ;", "if ( pngw != null ) pngw . close ( ) ; } }", "if ( ! interlaced ) Test Support . test Crc Equals ( recov , crc 0 ) ;", "else Test Support . test Same Crc ( recov , origni ) ;", "if ( interlaced ) additional Test Interlaced ( orig , origni ) ;", "if ( palete && truecolor . exists ( ) ) additional Test Palette ( orig , truecolor ) ; }"]}
{"ids": "50891", "code": ["public boolean is Stable ( ) {", "return my Features . contains ( FEATURE STABLE ) ; }"]}
{"ids": "75444", "code": ["protected void perform Defaults ( ) {", "super . perform Defaults ( ) ;", "initialize Values ( ) ;", "verify Validation ( ) ; }"]}
{"ids": "14102", "code": ["private void update Status ( String relay State , int current Status ) {", "Integer tmp = ( Integer ) current Status Map . get ( relay State ) ;", "if ( tmp != null ) {", "int previous Status = tmp . int Value ( ) ;", "switch ( previous Status ) {", "case LOGOUT SUCCEEDED STATUS :", "if ( current Status > previous Status ) {", "current Status Map . put ( relay State , new Integer ( current Status ) ) ; }", "break ;", "case LOGOUT FAILED STATUS :", "if ( current Status < LOGOUT FAILED STATUS ) {", "current Status Map . put ( relay State , new Integer ( LOGOUT PARTIAL STATUS ) ) ; }", "break ;", "default :", "break ; } }", "else {", "current Status Map . put ( relay State , new Integer ( current Status ) ) ; } }"]}
{"ids": "14398", "code": ["public static Set < String > list Servers ( SSO Token sso Token , String site Name ) throws SMS Exception , SSO Exception , Configuration Exception {", "Set < String > members = new Hash Set < > ( ) ;", "String site Id = get Site Id ( sso Token , site Name ) ;", "if ( site Id != null ) {", "Set < String > all Servers = Server Configuration . get Servers ( sso Token ) ;", "for ( String svr : all Servers ) {", "if ( Server Configuration . belong To Site ( sso Token , svr , site Name ) ) {", "members . add ( svr ) ; } } }", "return members ; }"]}
{"ids": "75708", "code": ["public static Generic Object Editor Dialog create Dialog ( Container parent ) {", "return create Dialog ( parent , null ) ; }"]}
{"ids": "20245", "code": ["public static boolean contains In Line Features ( Styled Layer Descriptor sld ) {", "if ( sld != null ) {", "for ( Styled Layer layer : sld . layers ( ) ) {", "if ( layer instanceof User Layer ) {", "User Layer user Layer = ( User Layer ) layer ;", "if ( user Layer . get Inline Feature Datastore ( ) != null ) {", "return true ; } } } }", "return false ; }"]}
{"ids": "48588", "code": ["public byte decode Buffer ( Input Stream in ) [ ] throws IO Exception {", "Byte Array Output Stream out Stream = new Byte Array Output Stream ( ) ;", "decode Buffer ( in , out Stream ) ;", "return ( out Stream . to Byte Array ( ) ) ; }"]}
{"ids": "14038", "code": ["public static void check HTTP Request Length ( Http Servlet Request request ) throws Servlet Exception {", "int max Content Length = SAML Utils . get Max Content Length ( ) ;", "if ( max Content Length != NUM_ ) {", "int length = request . get Content Length ( ) ;", "if ( length == - NUM_ ) {", "throw new Servlet Exception ( bundle . get String ( STR_ ) ) ; }", "if ( length > max Content Length ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + length ) ; }", "throw new Servlet Exception ( bundle . get String ( STR_ ) ) ; } } }"]}
{"ids": "62791", "code": ["public void push ( Notification notification , Notification Response Listener listener ) {", "final String notification Topic = notification . get Topic ( ) ;", "final String topic = notification Topic == null ? default Topic : notification Topic ;", "Request req = Utils . build Request ( client , topic , notification , gateway ) ;", "semaphore . acquire Uninterruptibly ( ) ;", "req . send ( new Response Listener ( semaphore , notification , listener ) ) ; }"]}
{"ids": "34004", "code": ["public void update From Resource ( ) {", "for ( String resource : resources ) {", "Input Stream is = Class Loader . get System Resource As Stream ( resource ) ;", "Linked Hash Map < Entry Type , Linked Hash Map < String , Config Entry > > parse Result = parse ( is ) ;", "for ( Entry Type type : my Map . key Set ( ) ) {", "Linked Hash Map < String , Config Entry > data Mappings = my Map . get ( type ) ;", "Linked Hash Map < String , Config Entry > resource Mappings = parse Result . get ( type ) ;", "Linked Hash Map < String , Config Entry > temp Mappings = new Linked Hash Map < String , Config Entry > ( ) ;", "Linked Hash Set < String > keys = new Linked Hash Set < String > ( ) ;", "keys . add All ( data Mappings . key Set ( ) ) ;", "keys . add All ( resource Mappings . key Set ( ) ) ;", "for ( String key : keys ) {", "if ( resource Mappings . contains Key ( key ) ) {", "temp Mappings . put ( key , resource Mappings . get ( key ) ) ; }", "else {", "temp Mappings . put ( key , data Mappings . get ( key ) ) ; } }", "my Map . put ( type , temp Mappings ) ; } } }"]}
{"ids": "86346", "code": ["private void deselect ( final int index , final boolean should Fire Events ) {", "check Widget ( ) ;", "if ( index < NUM_ || index >= items . size ( ) ) {", "return ; }", "final DL Item item = selection . remove ( index ) ;", "if ( should Fire Events ) {", "fire Selection Event ( item ) ; }", "final List < DL Item > deselected Items = new Array List < DL Item > ( ) ;", "item . set Last Action ( LAST ACTION . DESELECTION ) ;", "deselected Items . add ( item ) ;", "if ( should Fire Events ) {", "fire Selection Change Event ( deselected Items ) ; }", "redraw Tables ( ) ; }"]}
{"ids": "68374", "code": ["public boolean is Leaf ( Object nd ) {", "Node node = ( Node ) nd ;", "return ! node . has Child Nodes ( ) ; }"]}
{"ids": "52735", "code": ["private double [ ] parse Vector ( String s ) {", "String [ ] entries = WHITESPACE PATTERN . split ( s ) ;", "double [ ] d = new double [ entries . length ] ;", "for ( int i = NUM_ ; i < entries . length ; i ++ ) {", "try {", "d [ i ] = Parse Util . parse Double ( entries [ i ] ) ; }", "catch ( Number Format Exception e ) {", "throw new Abort Exception ( STR_ ) ; } }", "return d ; }"]}
{"ids": "31798", "code": ["public Session Wrapper ( Session ses ) {", "this . ses = ses ;", "this . time = System . current Time Millis ( ) ; }"]}
{"ids": "35879", "code": ["public static List < Batch Response > post With Single Request ( final Request Specification request Spec , final Response Specification response Spec , final Batch Request br ) {", "final List < Batch Request > batch Requests = new Array List < > ( ) ;", "batch Requests . add ( br ) ;", "final String jsonified Request = Batch Helper . to Json String ( batch Requests ) ;", "final List < Batch Response > response = Batch Helper . post Batch Requests Without Enclosing Transaction ( request Spec , response Spec , jsonified Request ) ;", "Assert . assert Not Null ( response ) ;", "Assert . assert True ( response . size ( ) > NUM_ ) ;", "return response ; }"]}
{"ids": "59889", "code": ["public File program Directory ( ) {", "return program Directory ; }"]}
{"ids": "74050", "code": ["@ Override public void clear Route Sensors ( ) {", "control Sensor List = new Array List < > ( ) ; }"]}
{"ids": "19938", "code": ["public static KEYSTORE TYPE from String ( String x ) throws Configuration Exception {", "for ( KEYSTORE TYPE current Type : KEYSTORE TYPE . values ( ) ) {", "if ( x . equals Ignore Case ( current Type . to String ( ) ) ) return current Type ; }", "throw new Configuration Exception ( Message Format . format ( STR_ , x ) ) ; }"]}
{"ids": "56383", "code": ["public Object Mapper next Level ( Object Mapper level ) {", "Object Mapper previous = level Stack . peek ( ) ;", "level Stack . push ( level ) ;", "return previous ; }"]}
{"ids": "78324", "code": ["public JSON Object to Json ( ) throws JSON Exception {", "JSON Object json = new JSON Object ( ) ;", "JSON Array jpods = new JSON Array ( ) ;", "for ( Diaspora Pod pod : pods ) {", "jpods . put ( pod . to Json ( ) ) ; }", "json . put ( STR_ , jpods ) ;", "json . put ( STR_ , System . current Time Millis ( ) ) ;", "return json ; }"]}
{"ids": "9599", "code": ["public static Key Store load ( File key Store File , Password password ) throws Crypto Exception , File Not Found Exception {", "Key Store Type key Store Type = null ;", "try {", "key Store Type = Crypto File Util . detect Key Store Type ( new File Input Stream ( key Store File ) ) ; }", "catch ( File Not Found Exception ex ) {", "throw ex ; }", "catch ( IO Exception ex ) {", "throw new Crypto Exception ( res . get String ( STR_ ) , ex ) ; }", "if ( key Store Type == null ) {", "return null ; }", "return load ( key Store File , password , key Store Type ) ; }"]}
{"ids": "34765", "code": ["@ Visible For Testing static boolean is Precaching Enabled ( Context context ) {", "Shared Preferences prefs = Preference Manager . get Default Shared Preferences ( context ) ;", "return prefs . get Boolean ( PREF IS PRECACHING ENABLED , false ) ; }"]}
{"ids": "48133", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( this == obj ) return true ;", "if ( ! ( obj instanceof Principal Entry ) ) return false ;", "Principal Entry that = ( Principal Entry ) obj ;", "return ( principal Class . equals ( that . principal Class ) && principal Name . equals ( that . principal Name ) ) ; }"]}
{"ids": "76602", "code": ["public boolean is Valid Lockdown Profile ( ) {", "try {", "return true ; }", "catch ( Illegal Argument Exception e ) {", "Log . w ( TAG , STR_ , e ) ;", "return false ; } }"]}
{"ids": "48733", "code": ["private int read Server Response ( ) throws IO Exception {", "String Buffer reply Buf = new String Buffer ( NUM_ ) ;", "int c ;", "int continuing Code = - NUM_ ;", "int code ;", "String response ;", "server Response . set Size ( NUM_ ) ;", "while ( true ) {", "while ( ( c = in . read ( ) ) != - NUM_ ) {", "if ( c == STR_ ) {", "if ( ( c = in . read ( ) ) != STR_ ) {", "reply Buf . append ( STR_ ) ; } }", "reply Buf . append ( ( char ) c ) ;", "if ( c == STR_ ) {", "break ; } }", "response = reply Buf . to String ( ) ;", "reply Buf . set Length ( NUM_ ) ;", "if ( logger . is Loggable ( Platform Logger . Level . FINEST ) ) {", "logger . finest ( STR_ + server Addr + STR_ + response ) ; }", "if ( response . length ( ) == NUM_ ) {", "code = - NUM_ ; }", "else {", "try {", "code = Integer . parse Int ( response . substring ( NUM_ , NUM_ ) ) ; }", "catch ( Number Format Exception e ) {", "code = - NUM_ ; }", "catch ( String Index Out Of Bounds Exception e ) {", "continue ; } }", "server Response . add Element ( response ) ;", "if ( continuing Code != - NUM_ ) {", "if ( code != continuing Code || ( response . length ( ) >= NUM_ && response . char At ( NUM_ ) == STR_ ) ) {", "continue ; }", "else {", "continuing Code = - NUM_ ;", "break ; } }", "else if ( response . length ( ) >= NUM_ && response . char At ( NUM_ ) == STR_ ) {", "continuing Code = code ;", "continue ; }", "else {", "break ; } }", "return code ; }"]}
{"ids": "7238", "code": ["public From Clause ( Stream stream One , Outer Join Qualifier outer Join Qualifier , Stream stream Two ) {", "this ( stream One ) ;", "add ( stream Two ) ;", "outer Join Qualifiers . add ( outer Join Qualifier ) ; }"]}
{"ids": "79951", "code": ["public static Kdb Database create Kdb Database ( Credentials credentials , Kdb Header kdb Header , Input Stream input Stream ) throws IO Exception {", "Data Input data Input = new Little Endian Data Input Stream ( input Stream ) ;", "check Signature ( data Input ) ;", "deserialize Header ( kdb Header , data Input ) ;", "Input Stream decrypted Input Stream = kdb Header . create Decrypted Input Stream ( credentials . get Key ( ) , input Stream ) ;", "Message Digest digest = Encryption . get Message Digest Instance ( ) ;", "Digest Input Stream digest Input Stream = new Digest Input Stream ( decrypted Input Stream , digest ) ;", "data Input = new Little Endian Data Input Stream ( digest Input Stream ) ;", "Kdb Database kdb Database = new Kdb Database ( ) ;", "Kdb Group last Group = ( Kdb Group ) kdb Database . get Root Group ( ) ;", "for ( long group = NUM_ ; group < kdb Header . get Group Count ( ) ; group ++ ) {", "last Group = deserialize Group ( last Group , data Input ) ; }", "for ( long entry = NUM_ ; entry < kdb Header . get Entry Count ( ) ; entry ++ ) {", "deserialize Entry ( kdb Database , data Input ) ; }", "if ( ! Arrays . equals ( digest . digest ( ) , kdb Header . get Content Hash ( ) ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "digest Input Stream . close ( ) ;", "return kdb Database ; }"]}
{"ids": "15797", "code": ["private Diff Part decode Add ( final int block Size S , final int block Size L ) throws Unsupported Encoding Exception , Decoding Exception {", "if ( block Size S < NUM_ || block Size L < NUM_ ) {", "throw new Decoding Exception ( STR_ + block Size S + STR_ + block Size L ) ; }", "int s = r . read ( block Size S ) ;", "int l = r . read ( block Size L ) ;", "Byte Array Output Stream output = new Byte Array Output Stream ( ) ;", "for ( int i = NUM_ ; i < l ; i ++ ) {", "output . write ( r . read Byte ( ) ) ; }", "Diff Part part = new Diff Part ( Diff Action . INSERT ) ;", "part . set Start ( s ) ;", "part . set Text ( output . to String ( WIKIPEDIA ENCODING ) ) ;", "return part ; }"]}
{"ids": "39249", "code": ["public void sort ( ) {", "Arrays . sort ( V , NUM_ , size ( ) ) ; }"]}
{"ids": "16822", "code": ["public void rebuild Panel ( ) {", "if ( active Worker != null && ! active Worker . is Done ( ) ) {", "active Worker . cancel ( true ) ; }", "panel Images . remove All ( ) ;", "panel Images . revalidate ( ) ;", "scroll Pane . repaint ( ) ;", "active Worker = new Image Loader ( media Files ) ;", "active Worker . execute ( ) ; }"]}
{"ids": "20443", "code": ["protected void process Bytes ( byte [ ] buf , int off , int len ) {", "n Bytes In += len ;", "if ( len < NUM_ || state . is Done ( ) ) return ;", "if ( state == State . ROW READY ) throw new Pngj Input Exception ( STR_ ) ;", "if ( inf . needs Dictionary ( ) || ! inf . needs Input ( ) ) throw new Runtime Exception ( STR_ ) ;", "inf . set Input ( buf , off , len ) ;", "if ( is Callback Mode ( ) ) {", "while ( inflate Data ( ) ) {", "int next Row Len = process Row Callback ( ) ;", "prepare For Next Row ( next Row Len ) ;", "if ( is Done ( ) ) process Done Callback ( ) ; } }", "else inflate Data ( ) ; }"]}
{"ids": "31377", "code": ["public final void go To Next Page ( ) {", "final boolean is Last Page = view Pager . get Current Item ( ) == ( pages . size ( ) - NUM_ ) ;", "if ( ! is Last Page ) {", "view Pager . set Current Item ( view Pager . get Current Item ( ) + NUM_ , true ) ; } }"]}
{"ids": "41046", "code": ["public List < Type Id < ? > > as List ( ) {", "return Collections . unmodifiable List ( Arrays . as List ( types ) ) ; }"]}
{"ids": "9092", "code": ["private static void delete Rules ( List < String > batch List , List < Rule > rules To Delete ) {", "String delete Statement = STR_ + RULES TABLE + STR_ ;", "for ( Rule rule : rules To Delete ) {", "batch List . add ( String . format ( delete Statement , rule . get Uid ( ) ) ) ; } }"]}
{"ids": "16259", "code": ["public boolean is Visited ( Object element ) {", "return my Visited Elements . contains Key ( element ) ; }"]}
{"ids": "68662", "code": ["public Aws Iot Connection ( Abstract Aws Iot Client client ) {", "this . client = client ; }"]}
{"ids": "53676", "code": ["public static < T > Completable Future < T > exceptionally Completed Future ( Throwable throwable ) {", "final Completable Future < T > future = new Completable Future < T > ( ) ;", "future . complete Exceptionally ( throwable ) ;", "return future ; }"]}
{"ids": "66751", "code": ["protected void init Forecast Errors ( Array List < Float > model , Time Series . Data Sequence data ) {", "double sum Err = NUM_ ;", "double sum Abs Err = NUM_ ;", "double sum Abs Percent Err = NUM_ ;", "double sum Err Squared = NUM_ ;", "int processed Points = NUM_ ;", "int n = data . size ( ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "double error = model . get ( i ) - data . get ( i ) . value ;", "sum Err += error ;", "sum Abs Err += Math . abs ( error ) ;", "sum Abs Percent Err += Math . abs ( error / data . get ( i ) . value ) ;", "sum Err Squared += error * error ;", "processed Points ++ ; }", "this . bias = sum Err / processed Points ;", "this . mad = sum Abs Err / processed Points ;", "this . mape = sum Abs Percent Err / processed Points ;", "this . mse = sum Err Squared / processed Points ;", "this . sae = sum Abs Err ;", "errors Init = true ; }"]}
{"ids": "65122", "code": ["public boolean check Modifiers ( Mouse Event e ) {", "return e . get Modifiers ( ) == modifiers ; }"]}
{"ids": "85403", "code": ["public void emit Retained Vars ( Generate Js Visitor gen ) {", "if ( ! retained Vars . is Empty ( ) ) {", "gen . out ( STR_ ) ;", "boolean first = true ;", "for ( String var Name : retained Vars ) {", "if ( ! first ) {", "gen . out ( STR_ ) ; }", "first = false ;", "gen . out ( var Name ) ; }", "gen . end Line ( true ) ;", "retained Vars . clear ( ) ; } }"]}
{"ids": "16666", "code": ["public List < Structured Translation > Kbest Extract On HG ( Hyper Graph hg , int top N ) {", "reset State ( ) ;", "if ( hg == null || hg . goal Node == null ) {", "return empty List ( ) ; }", "final List < Structured Translation > kbest = new Array List < > ( top N ) ;", "for ( int k = NUM_ ; k <= top N ; k ++ ) {", "Structured Translation translation = get Kth Structured Translation ( hg . goal Node , k ) ;", "if ( translation == null ) {", "break ; }", "kbest . add ( translation ) ; }", "return kbest ; }"]}
{"ids": "21981", "code": ["public static boolean is Snapshot Full Copy Supported ( URI block Snap URI , Db Client db Client ) {", "Block Snapshot block Obj = db Client . query Object ( Block Snapshot . class , block Snap URI ) ;", "Storage System storage = db Client . query Object ( Storage System . class , block Obj . get Storage Controller ( ) ) ;", "return ( storage != null && ( storage . device Is Type ( Type . openstack ) || storage . device Is Type ( Type . vnxblock ) || storage . device Is Type ( Type . ibmxiv ) || storage . device Is Type ( Type . vmax ) ) ) ; }"]}
{"ids": "83428", "code": ["public Iterable < Service Descriptor > list Services ( ) {", "Array List < Service Descriptor > service Descriptors = new Array List < Service Descriptor > ( ) ;", "for ( File Descriptor file Descriptor : file Descriptors ) {", "service Descriptors . add All ( file Descriptor . get Services ( ) ) ; }", "return service Descriptors ; }"]}
{"ids": "53170", "code": ["public static double quantile ( double p , double alpha , double beta ) {", "if ( Double . is Na N ( alpha ) || Double . is Na N ( beta ) || Double . is Na N ( p ) || alpha < NUM_ || beta < NUM_ ) {", "return Double . Na N ; }", "if ( p < NUM_ || p > NUM_ ) {", "return Double . Na N ; }", "if ( p == NUM_ ) {", "return NUM_ ; }", "if ( p == NUM_ ) {", "return NUM_ ; }", "if ( p > NUM_ ) {", "return NUM_ - raw Quantile ( NUM_ - p , beta , alpha , log Beta ( beta , alpha ) ) ; }", "else {", "return raw Quantile ( p , alpha , beta , log Beta ( alpha , beta ) ) ; } }"]}
{"ids": "31843", "code": ["private Shared Deployment create New Deployment ( Grid Deployment Metadata meta , boolean is Cache ) {", "assert Thread . holds Lock ( mux ) ;", "assert meta . parent Loader ( ) == null ;", "Ignite Uuid ldr Id = Ignite Uuid . from Uuid ( ctx . local Node Id ( ) ) ;", "Grid Deployment Class Loader cls Ldr ;", "if ( meta . deployment Mode ( ) == CONTINUOUS || meta . participants ( ) == null ) {", "cls Ldr = new Grid Deployment Class Loader ( ldr Id , meta . user Version ( ) , meta . deployment Mode ( ) , false , ctx , ctx . config ( ) . get Class Loader ( ) != null ? ctx . config ( ) . get Class Loader ( ) : U . grid Class Loader ( ) , meta . class Loader Id ( ) , meta . sender Node Id ( ) , comm , ctx . config ( ) . get Network Timeout ( ) , log , ctx . config ( ) . get Peer Class Loading Local Class Path Exclude ( ) , ctx . config ( ) . get Peer Class Loading Missed Resources Cache Size ( ) , meta . deployment Mode ( ) == CONTINUOUS , false ) ;", "if ( meta . participants ( ) != null ) for ( Map . Entry < UUID , Ignite Uuid > e : meta . participants ( ) . entry Set ( ) ) cls Ldr . register ( e . get Key ( ) , e . get Value ( ) ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + STR_ + cls Ldr + STR_ + meta + STR_ ) ; }", "else {", "assert meta . deployment Mode ( ) == SHARED ;", "cls Ldr = new Grid Deployment Class Loader ( ldr Id , meta . user Version ( ) , meta . deployment Mode ( ) , false , ctx , U . grid Class Loader ( ) , meta . participants ( ) , comm , ctx . config ( ) . get Network Timeout ( ) , log , ctx . config ( ) . get Peer Class Loading Local Class Path Exclude ( ) , ctx . config ( ) . get Peer Class Loading Missed Resources Cache Size ( ) , false , false ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + STR_ + cls Ldr + STR_ + meta + STR_ ) ; }", "Shared Deployment dep = new Shared Deployment ( meta . deployment Mode ( ) , cls Ldr , ldr Id , meta . user Version ( ) , meta . alias ( ) ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + dep ) ;", "if ( is Cache ) {", "List < Shared Deployment > deps = F . add If Absent ( cache , meta . user Version ( ) , new Linked List < Shared Deployment > ( ) ) ;", "assert deps != null ;", "deps . add ( dep ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + cache ) ; }", "return dep ; }"]}
{"ids": "77204", "code": ["public Multi Term Query ( final String field ) {", "this . field = Objects . require Non Null ( field , STR_ ) ; }"]}
{"ids": "22783", "code": ["public static void print Line ( Object message ) {", "if ( ! is Disabled ( ) ) {", "print Line ( String . value Of ( message ) ) ; } }"]}
{"ids": "35296", "code": ["public static boolean is Accessor Pair ( T Member member , T Member member 2 ) {", "return ( member instanceof T Getter && member 2 instanceof T Setter ) || ( member instanceof T Setter && member 2 instanceof T Getter ) ; }"]}
{"ids": "30059", "code": ["public static Date Format create UTC Date Formatter ( String date Format ) {", "Date Format formatter = new Simple Date Format ( date Format ) ;", "formatter . set Time Zone ( Time Zone . get Time Zone ( STR_ ) ) ;", "return formatter ; }"]}
{"ids": "83068", "code": ["public void write Linked Kml ( final String filename , final Kml Type kml ) {", "if ( filename . equals ( STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( filename . equals ( STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "write Kml ( filename , kml ) ; }"]}
{"ids": "26865", "code": ["String destination File Path ( ) {", "return destination File Path ; }"]}
{"ids": "8551", "code": ["public Boot Panel ( ) {", "init Components ( ) ; }"]}
{"ids": "50240", "code": ["private List < Header > default Headers ( ) {", "Date Format date Format = new Simple Date Format ( STR_ ) ;", "List < Header > headers = new Array List < > ( ) ;", "headers . add ( new Basic Header ( STR_ , date Format . format ( new Date ( ) ) ) ) ;", "return headers ; }"]}
{"ids": "54138", "code": ["public Aem Parsys clear ( ) {", "List < Web Element > list = current Scope . find Elements ( By . css Selector ( SELECTOR FOR COMPONENT IN PARSYS ) ) ;", "list . for Each ( null ) ;", "return this ; }"]}
{"ids": "69124", "code": ["private void register New Client ( Json Object j Data ) {", "Client new Client = gson . from Json ( j Data , Client . class ) ;", "if ( new Client . is Valid ( ) ) {", "add Client ( new Client ) ;", "broadcast New Client ( new Client ) ;", "send Client List ( new Client ) ; }", "else {", "logger . log ( Level . WARNING , STR_ ) ; } }"]}
{"ids": "54859", "code": ["Edge Map < Block > find Loops ( Deque < Block > code , Map < Block , Block > idom , Set Map < Block , Edge > pred ) {", "Edge Map < Block > loops = new Edge Map < Block > ( ) ;", "for ( Block b : code ) for ( Edge s : b . succ ( ) ) if ( is Loop ( s , idom ) ) {", "verbose Status ( STR_ + s ) ;", "Block h = s . to ;", "Set < Block > loop = loops . get ( h ) ;", "Set < Block > work = new Tree Set < Block > ( ) ;", "for ( Edge p : pred . get ( h ) ) {", "if ( is Loop ( p , idom ) && ! loop . contains ( p . from ) && p . from != h ) {", "loop . add ( p . from ) ;", "work . add ( p . from ) ; } }", "while ( ! work . is Empty ( ) ) {", "Block x = get Block ( work ) ;", "for ( Edge p : pred . get ( x ) ) {", "if ( p . from != h && ! loop . contains ( p . from ) ) {", "loop . add ( p . from ) ;", "work . add ( p . from ) ; } } } }", "return loops ; }"]}
{"ids": "73744", "code": ["public int [ ] read Line ( ) {", "int record [ ] = new int [ MAX LEN ] ;", "int checksum = NUM_ ;", "try {", "while ( ( ( char In = buff In . read ( ) ) == NUM_ ) || ( char In == NUM_ ) ) { }", "if ( char In != STR_ ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + line No ) ; }", "return new int [ ] { - NUM_ } ; } }", "catch ( IO Exception e ) {", "J Option Pane . show Message Dialog ( this , STR_ , STR_ , J Option Pane . ERROR MESSAGE ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + e . to String ( ) ) ; } }", "record [ LEN ] = rd Hex Byte ( ) ;", "checksum += record [ LEN ] ;", "record [ ADDRH ] = rd Hex Byte ( ) ;", "checksum += record [ ADDRH ] ;", "record [ ADDRL ] = rd Hex Byte ( ) ;", "checksum += record [ ADDRL ] ;", "record [ TYPE ] = rd Hex Byte ( ) ;", "checksum += record [ TYPE ] ;", "address = ( address & NUM_ ) + record [ ADDRH ] * NUM_ + record [ ADDRL ] ;", "type = record [ TYPE ] ;", "if ( type != END ) {", "len = record [ LEN ] ;", "for ( int i = NUM_ ; i <= len ; i ++ ) {", "record [ TYPE + i ] = rd Hex Byte ( ) ;", "checksum += record [ TYPE + i ] ; } }", "int file Check = rd Hex Byte ( ) ;", "if ( ( ( checksum + file Check ) & NUM_ ) != NUM_ ) {", "log . error ( STR_ + line No ) ; }", "line No ++ ;", "return record ; }"]}
{"ids": "74365", "code": ["public void rename Editor Panel ( Editor panel ) {", "if ( panels List . size ( ) == NUM_ ) {", "return ; }", "for ( int i = NUM_ ; i < panels List . size ( ) ; i ++ ) {", "Object o = panels List . get ( i ) ;", "if ( o == panel ) {", "J Check Box Menu Item r = ( J Check Box Menu Item ) panels Sub Menu . get Item ( i ) ;", "r . set Text ( panel . get Title ( ) ) ;", "return ; } } }"]}
{"ids": "80901", "code": ["private boolean fits As Single Line ( int col ) {", "return ( col + single Line Width ( ) <= Pcal TLA Gen . wrap Column ) || ( body Formulas . sf == null && ( prcd Formulas == null || prcd Formulas . size ( ) == NUM_ ) ) ; }"]}
{"ids": "69048", "code": ["public void spherical To World ( Vector 3 vec ) {", "if ( pj Unprojected == null ) {", "String proj Str = STR_ + proj Info . get Semi Major Axis ( ) + STR_ + proj Info . get Semi Minor Axis ( ) + STR_ ;", "pj Unprojected = Proj 4 . new Instance ( proj Str ) ; }", "if ( pj Projected == null ) {", "pj Projected = Proj 4 . new Instance ( proj 4 String ) ; }", "try {", "vec . to Array ( coord ) ;", "coord [ NUM_ ] = Math . to Radians ( coord [ NUM_ ] ) ;", "coord [ NUM_ ] = Math . to Radians ( coord [ NUM_ ] ) ;", "pj Unprojected . transform ( pj Projected , coord ) ;", "vec . set X ( coord [ NUM_ ] ) ;", "vec . set Y ( coord [ NUM_ ] ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "81978", "code": ["public static String encode Url ( final String str ) {", "return encode ( str , STR_ ) ; }"]}
{"ids": "6334", "code": ["private long build Size ( int duration In Seconds , Link Info linfo ) {", "long result = - NUM_ ;", "double bit Rate Sum = NUM_ ;", "switch ( linfo . fmt ) {", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ + NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ / NUM_ ;", "break ;", "case NUM_ :", "bit Rate Sum = NUM_ / NUM_ ;", "break ; }", "bit Rate Sum = bit Rate Sum * NUM_ * NUM_ ;", "result = ( long ) ( Math . ceil ( ( bit Rate Sum * duration In Seconds ) / NUM_ ) ) ;", "return result ; }"]}
{"ids": "25127", "code": ["@ Override public void act On ( File f ) {", "Buffered Reader reader = null ;", "try {", "reader = new Buffered Reader ( new File Reader ( f ) ) ;", "announce Seeds From Reader ( reader ) ; }", "catch ( File Not Found Exception fnf ) {", "logger . log ( Level . SEVERE , STR_ , fnf ) ; }", "finally {", "IO Utils . close Quietly ( reader ) ; } }"]}
{"ids": "16835", "code": ["public void add Property Change Listener ( String property Name , Property Change Listener listener ) {", "property Change Support . add Property Change Listener ( property Name , listener ) ; }"]}
{"ids": "78755", "code": ["public Resources Poet add Typed Array ( String name , @ Not Null List < String > values ) {", "Element element = document . create Element ( STR_ ) ;", "element . set Attribute ( STR_ , name ) ;", "for ( String value : values ) {", "Element value Element = document . create Element ( STR_ ) ;", "value Element . append Child ( document . create Text Node ( value ) ) ;", "element . append Child ( value Element ) ; }", "resource Element . append Child ( element ) ;", "return this ; }"]}
{"ids": "64504", "code": ["public boolean add Sub Action ( final Conf Action action Conf ) throws General Exception , Configuration Exception {", "if ( action Conf . get Type ( ) != null ) {", "final Sub Action sub = Sub Action . factory ( action Conf . get Type ( ) , action Conf ) ;", "if ( sub == null ) {", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ + action Conf . get Type ( ) ) ; }", "return false ; }", "list . add ( sub ) ;", "if ( sub instanceof Sub Action Slow ) {", "set Queue ( MAIN QUEUE ) ; }", "return true ; }", "else {", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ ) ; }", "return false ; } }"]}
{"ids": "3360", "code": ["void fill Entry Tree ( Set < Page Leaf Entry > entries , Row row ) {", "int ptr = row Head ;", "byte [ ] buffer = buffer ;", "while ( ptr < BLOCK SIZE ) {", "int code = buffer [ ptr ] & CODE MASK ;", "int len = get Length ( code , row ) ;", "if ( code == INSERT || code == REMOVE ) {", "Page Leaf Entry entry = new Page Leaf Entry ( this , row , ptr , len , code ) ;", "entries . add ( entry ) ; }", "ptr += len ; } }"]}
{"ids": "22968", "code": ["public static < S > boolean contains Atleast One ( Collection < S > left , Collection < S > right ) {", "if ( left == null || right == null ) {", "return false ; }", "for ( S id : left ) {", "if ( right . contains ( id ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "21681", "code": ["public void log Diff ( String id , String field , String db , String hw ) {", "String Buffer diff Buffer = new String Buffer ( String . format ( STR_ , id , field ) ) ;", "if ( db == null || db . is Empty ( ) || db . equals Ignore Case ( NO MATCHING ENTRY ) ) {", "diff Buffer . append ( String . format ( STR_ , hw ) ) ; }", "else if ( hw == null || hw . is Empty ( ) || hw . equals Ignore Case ( NO MATCHING ENTRY ) ) {", "diff Buffer . append ( String . format ( STR_ , db ) ) ; }", "else {", "diff Buffer . append ( String . format ( STR_ , db != null ? db : STR_ , hw != null ? hw : STR_ ) ) ; }", "msgs . append ( diff Buffer . to String ( ) + STR_ ) ;", "if ( log != null ) {", "log . info ( diff Buffer . to String ( ) ) ; } }"]}
{"ids": "62545", "code": ["public Field Frame Body IMG ( Lyrics 3 Image image ) {", "images . add ( image ) ; }"]}
{"ids": "83494", "code": ["public Abstract Resource ( String mimetype ) {", "this ( mimetype , System . current Time Millis ( ) ) ; }"]}
{"ids": "71005", "code": ["private Parameters ( ) {", "for ( Iterator i = arguments . iterator ( ) ; i . has Next ( ) ; ) {", "String arg = ( String ) i . next ( ) ;", "arg = arg . to Lower Case ( ) ;", "if ( ! arg . starts With ( STR_ ) ) throw new Illegal Argument Exception ( STR_ + arg ) ;", "int colon Index = arg . index Of ( STR_ ) ;", "String key ;", "String value ;", "if ( colon Index >= NUM_ ) {", "key = arg . substring ( NUM_ , colon Index ) ;", "value = arg . substring ( colon Index + NUM_ ) ; }", "else {", "key = arg . substring ( NUM_ ) ;", "value = STR_ ; }", "if ( ! allowed Keys . contains ( key ) ) throw new Illegal Argument Exception ( STR_ + arg . substring ( NUM_ ) + STR_ + String Util . to Comma Delimited String ( allowed Keys ) ) ;", "hashtable . put ( key , value ) ; }", "for ( Iterator i = required Keys . iterator ( ) ; i . has Next ( ) ; ) {", "String required Key = ( String ) i . next ( ) ;", "if ( ! hashtable . contains Key ( required Key ) ) throw new Illegal Argument Exception ( STR_ + required Key ) ; } }"]}
{"ids": "52669", "code": ["public List < TLV > init Respond Smp ( String question , String secret , boolean initiating ) throws Otr Exception {", "if ( question != null && ! initiating ) throw new Illegal Argument Exception ( STR_ ) ;", "byte [ ] our fp = Hex . decode ( key Manager . get Local Fingerprint ( session ID ) ) ;", "String remote Fingerprint = key Manager . get Remote Fingerprint ( session ID ) ;", "if ( remote Fingerprint == null ) throw new Otr Exception ( STR_ ) ;", "byte [ ] their fp = Hex . decode ( remote Fingerprint ) ;", "byte [ ] session Id ;", "try {", "session Id = compute Session Id ( session . get S ( ) ) ; }", "catch ( SM Exception ex ) {", "throw new Otr Exception ( ex ) ; }", "byte [ ] bytes = secret . get Bytes ( Serialization Utils . UTF 8 ) ;", "int combined buf len = NUM_ + session Id . length + bytes . length ;", "byte [ ] combined buf = new byte [ combined buf len ] ;", "combined buf [ NUM_ ] = NUM_ ;", "if ( initiating ) {", "System . arraycopy ( our fp , NUM_ , combined buf , NUM_ , NUM_ ) ;", "System . arraycopy ( their fp , NUM_ , combined buf , NUM_ , NUM_ ) ; }", "else {", "System . arraycopy ( their fp , NUM_ , combined buf , NUM_ , NUM_ ) ;", "System . arraycopy ( our fp , NUM_ , combined buf , NUM_ , NUM_ ) ; }", "System . arraycopy ( session Id , NUM_ , combined buf , NUM_ , session Id . length ) ;", "System . arraycopy ( bytes , NUM_ , combined buf , NUM_ + session Id . length , bytes . length ) ;", "Message Digest sha 256 ;", "try {", "sha 256 = Message Digest . get Instance ( STR_ ) ; }", "catch ( No Such Algorithm Exception ex ) {", "throw new Otr Exception ( ex ) ; }", "byte [ ] combined secret = sha 256 . digest ( combined buf ) ;", "byte [ ] smpmsg ;", "try {", "if ( initiating ) {", "smpmsg = SM . step 1 ( smstate , combined secret ) ; }", "else {", "smpmsg = SM . step 2 b ( smstate , combined secret ) ; } }", "catch ( SM Exception ex ) {", "throw new Otr Exception ( ex ) ; }", "if ( question != null ) {", "bytes = question . get Bytes ( Serialization Utils . UTF 8 ) ;", "byte [ ] qsmpmsg = new byte [ bytes . length + NUM_ + smpmsg . length ] ;", "System . arraycopy ( bytes , NUM_ , qsmpmsg , NUM_ , bytes . length ) ;", "System . arraycopy ( smpmsg , NUM_ , qsmpmsg , bytes . length + NUM_ , smpmsg . length ) ;", "smpmsg = qsmpmsg ; }", "TLV sendtlv = new TLV ( initiating ? ( question != null ? TLV . SMP 1 Q : TLV . SMP 1 ) : TLV . SMP 2 , smpmsg ) ;", "smstate . next Expected = initiating ? SM . EXPECT 2 : SM . EXPECT 3 ;", "return make Tlv List ( sendtlv ) ; }"]}
{"ids": "12486", "code": ["private double mel To Lin Freq ( double input Freq ) {", "return ( NUM_ * ( Math . pow ( NUM_ , ( input Freq / NUM_ ) ) - NUM_ ) ) ; }"]}
{"ids": "55988", "code": ["public Rounded Icon Generator ( int icon Width Px , int icon Height Px , int corner Radius Px , int background Color , float text Size Px ) {", "m Icon Width Px = icon Width Px ;", "m Icon Height Px = icon Height Px ;", "m Corner Radius Px = corner Radius Px ;", "m Background Rect = new Rect F ( NUM_ , NUM_ , m Icon Width Px , m Icon Height Px ) ;", "m Background Paint = new Paint ( Paint . ANTI ALIAS FLAG ) ;", "m Background Paint . set Color ( background Color ) ;", "m Text Paint = new Text Paint ( Paint . ANTI ALIAS FLAG ) ;", "m Text Paint . set Color ( Color . WHITE ) ;", "m Text Paint . set Fake Bold Text ( true ) ;", "m Text Paint . set Text Size ( text Size Px ) ;", "Font Metrics text Font Metrics = m Text Paint . get Font Metrics ( ) ;", "m Text Height = ( float ) Math . ceil ( text Font Metrics . bottom - text Font Metrics . top ) ;", "m Text Y Offset = - text Font Metrics . top ; }"]}
{"ids": "76574", "code": ["protected void arraycopy ( byte [ ] buf , int pos , int length ) {", "m Message . write ( buf , pos , length ) ;", "m Position = m Position + length ; }"]}
{"ids": "31799", "code": ["public boolean expired ( ) {", "return System . current Time Millis ( ) - time > DFLT EXPIRATION TIMEOUT ; }"]}
{"ids": "52318", "code": ["private void handle Selection ( View view , Item item , int position ) {", "if ( ! item . is Selectable ( ) ) {", "return ; }", "if ( item . is Selected ( ) && ! m Allow Deselection ) {", "return ; }", "boolean selected = false ;", "if ( m Position Based State Management ) {", "selected = m Selections . contains ( position ) ; }", "else {", "selected = item . is Selected ( ) ; }", "if ( m Select With Item Update || view == null ) {", "if ( ! m Multi Select ) {", "deselect ( ) ; }", "if ( selected ) {", "deselect ( position ) ; }", "else {", "select ( position ) ; } }", "else {", "if ( ! m Multi Select ) {", "if ( m Position Based State Management ) {", "Iterator < Integer > entries = m Selections . iterator ( ) ;", "while ( entries . has Next ( ) ) {", "Integer pos = entries . next ( ) ;", "if ( pos != position ) {", "deselect ( pos , entries ) ; } } }", "else {", "Set < Integer > selections = get Selections ( ) ;", "for ( int pos : selections ) {", "if ( pos != position ) {", "deselect ( pos ) ; } } } }", "item . with Set Selected ( ! selected ) ;", "view . set Selected ( ! selected ) ;", "if ( m Selection Listener != null ) m Selection Listener . on Selection Changed ( item , ! selected ) ;", "if ( m Position Based State Management ) {", "if ( selected ) {", "if ( m Selections . contains ( position ) ) {", "m Selections . remove ( position ) ; } }", "else {", "m Selections . add ( position ) ; } } } }"]}
{"ids": "65707", "code": ["public boolean can Invoke ( M Depreciation Workfile assetwk , M Asset Acct asset Acct , int A Current Period , Big Decimal Accum Dep ) {", "if ( assetwk == null ) {", "log . warning ( STR_ ) ;", "return false ; }", "int offset = NUM_ ;", "int life Periods = assetwk . get Use Life Months ( assetwk . is Fiscal ( ) ) ;", "boolean ok = ( offset <= A Current Period ) ;", "if ( C Log Mgt . is Level Finest ( ) ) log . finest ( STR_ + A Current Period + STR_ + life Periods + STR_ + offset + STR_ + ok ) ;", "return ok ; }"]}
{"ids": "67405", "code": ["public void add Text Change Listener ( final Filter Query Change Listener text Change Listener ) {", "listeners . add ( text Change Listener ) ; }"]}
{"ids": "80193", "code": ["@ Override public Iterator < Profile > iterator ( ) {", "return profiles . iterator ( ) ; }"]}
{"ids": "85147", "code": ["private boolean starts With Space ( String str ) {", "return str . length ( ) != NUM_ && str . char At ( NUM_ ) == STR_ ; }"]}
{"ids": "69101", "code": ["private int key To Level ( String key ) {", "String [ ] token = key . split ( STR_ ) ;", "return ( token . length - NUM_ ) ; }"]}
{"ids": "11663", "code": ["public boolean mouse Dragged ( Mouse Event e ) {", "if ( grabbed plot graphics ) {", "int x = e . get X ( ) ;", "int y = e . get Y ( ) ;", "int dx = x - prev X ;", "int dy = y - prev Y ;", "plot X += dx ;", "plot Y += dy ;", "prev X = x ;", "prev Y = y ;", "graph . resize ( plot X , plot Y , plot Width , plot Height ) ;", "OM Graphic List plot Graphics = graph . get Plot Graphics ( ) ;", "plot Graphics . generate ( get Projection ( ) , true ) ;", "repaint ( ) ; }", "return false ; }"]}
{"ids": "9684", "code": ["public void load ( General Subtrees general Subtrees ) {", "List < General Subtree > general Subtrees List = general Subtrees . get General Subtrees ( ) ;", "Collections . sort ( general Subtrees List , new General Subtree Base Comparator ( ) ) ;", "data = new Object [ general Subtrees List . size ( ) ] [ NUM_ ] ;", "int i = NUM_ ;", "for ( General Subtree general Subtree : general Subtrees List ) {", "data [ i ] [ NUM_ ] = general Subtree ;", "data [ i ] [ NUM_ ] = general Subtree ;", "data [ i ] [ NUM_ ] = general Subtree ;", "i ++ ; }", "fire Table Data Changed ( ) ; }"]}
{"ids": "77520", "code": ["public boolean is Ping Disabled ( ) {", "return ( null != healthcheck && ! healthcheck . exists ( ) ) ; }"]}
{"ids": "85002", "code": ["public static void write To File ( File file , String contents ) throws IO Exception {", "File Output Stream fos = new File Output Stream ( file ) ;", "fos . write ( contents . get Bytes ( ) ) ;", "fos . close ( ) ; }"]}
{"ids": "31744", "code": ["public void make Tree Of Writables ( Iterable < Pair < String , Integer > > flat Data ) {", "Text key = new Text ( ) ;", "for ( Pair < String , Integer > pair : flat Data ) {", "key . set ( pair . key ) ;", "Array List < Int Writable > val List ;", "if ( ! mock Input . contains Key ( key ) ) {", "val List = new Array List < > ( ) ;", "mock Input . put ( key , val List ) ;", "key = new Text ( ) ; }", "else val List = ( Array List < Int Writable > ) mock Input . get ( key ) ;", "val List . add ( new Int Writable ( pair . value ( ) ) ) ; } }"]}
{"ids": "71091", "code": ["public static double angle ( Coordinate p 0 , Coordinate p 1 ) {", "double dx = p 1 . x - p 0 . x ;", "double dy = p 1 . y - p 0 . y ;", "return Math . atan 2 ( dy , dx ) ; }"]}
{"ids": "62951", "code": ["public In Memory Cursor ( String [ ] column Names ) {", "m Current Position = - NUM_ ;", "m Column Names = column Names ; }"]}
{"ids": "36412", "code": ["private void render Foreground ( final Execution Unit process , final Graphics 2 D g 2 , boolean printing ) {", "if ( draw Highlight && ! printing && ( model . is Drag Started ( ) || model . is Drop Target Set ( ) && model . is Import Dragged ( ) ) || model . is Operator Source Hovered ( ) ) {", "switch ( Rapid Miner GUI . get Drag Highlighte Mode ( ) ) {", "case FULL :", "case BORDER :", "draw Drag Border ( process , g 2 ) ;", "break ;", "case NONE :", "default :", "break ; } } }"]}
{"ids": "83748", "code": ["public Modbus Transaction create Transaction ( ) {", "Modbus Serial Transaction transaction = new Modbus Serial Transaction ( ) ;", "transaction . set Transport ( this ) ;", "return transaction ; }"]}
{"ids": "68447", "code": ["public void start ( ) {", "if ( runner == null ) {", "runner = new Thread ( this , STR_ ) ;", "runner . start ( ) ; } }"]}
{"ids": "9136", "code": ["protected final File create DBFFDC Directory ( ) {", "File dbffdc Dir = new File ( ffdc Directory Name ) ;", "if ( ! dbffdc Dir . exists ( ) ) {", "final boolean is DBFF Dc Dir Created = dbffdc Dir . mkdirs ( ) ;", "if ( is DBFF Dc Dir Created ) {", "dbffdc Dir = new File ( ffdc Directory Name ) ;", "return dbffdc Dir ; } }", "else if ( ! dbffdc Dir . is Directory ( ) ) {", "return null ; }", "return dbffdc Dir ; }"]}
{"ids": "62459", "code": ["public static String read Character Sized String ( Input Stream stream ) throws IO Exception {", "String Builder result = new String Builder ( ) ;", "int str Len = read UINT 16 ( stream ) ;", "int character = stream . read ( ) ;", "character |= stream . read ( ) << NUM_ ;", "do {", "if ( character != NUM_ ) {", "result . append ( ( char ) character ) ;", "character = stream . read ( ) ;", "character |= stream . read ( ) << NUM_ ; } }", "while ( character != NUM_ || ( result . length ( ) + NUM_ ) > str Len ) ;", "if ( str Len != ( result . length ( ) + NUM_ ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "return result . to String ( ) ; }"]}
{"ids": "76676", "code": ["protected void process Children ( Query Node query Tree ) throws Query Node Exception {", "List < Query Node > children = query Tree . get Children ( ) ;", "Children List new Children ;", "if ( children != null && children . size ( ) > NUM_ ) {", "new Children = allocate Children List ( ) ;", "try {", "for ( Query Node child : children ) {", "child = process Iteration ( child ) ;", "if ( child == null ) {", "throw new Null Pointer Exception ( ) ; }", "new Children . add ( child ) ; }", "List < Query Node > ordered Children List = set Children Order ( new Children ) ;", "query Tree . set ( ordered Children List ) ; }", "finally {", "new Children . being Used = false ; } } }"]}
{"ids": "6661", "code": ["private void initialize Messages ( List < String > messages ) {", "messages . add All ( Arrays . as List ( Tip Of The Day Messages . get General Messages ( ) ) ) ;", "if ( OS Utils . is Windows ( ) ) {", "messages . add All ( Arrays . as List ( Tip Of The Day Messages . get Windows Messages ( ) ) ) ; }", "else if ( OS Utils . is Mac OSX ( ) ) {", "messages . add All ( Arrays . as List ( Tip Of The Day Messages . get Mac OSX Messages ( ) ) ) ; }", "else if ( OS Utils . is Linux ( ) ) {", "messages . add All ( Arrays . as List ( Tip Of The Day Messages . get Linux Messages ( ) ) ) ; }", "else {", "messages . add All ( Arrays . as List ( Tip Of The Day Messages . get Other Messages ( ) ) ) ; }", "if ( ! OS Utils . is Mac OSX ( ) ) {", "messages . add All ( Arrays . as List ( Tip Of The Day Messages . get Non Mac OSX Messages ( ) ) ) ; }", "messages . add All ( Arrays . as List ( Tip Of The Day Messages . get Frost Wire Messages ( ) ) ) ;", "Collections . shuffle ( messages ) ;", "current Tip = - NUM_ ; }"]}
{"ids": "72013", "code": ["public Persisted Queue ( final File queue Env Path , final String queue Name , final int cache Size ) {", "queue Env Path . mkdirs ( ) ;", "final Environment Config db Env Config = new Environment Config ( ) ;", "db Env Config . set Transactional ( false ) ;", "db Env Config . set Allow Create ( true ) ;", "this . db Env = new Environment ( queue Env Path , db Env Config ) ;", "Database Config db Config = new Database Config ( ) ;", "db Config . set Transactional ( false ) ;", "db Config . set Allow Create ( true ) ;", "db Config . set Deferred Write ( true ) ;", "this . queue Database = db Env . open Database ( null , queue Name , db Config ) ;", "this . queue Name = queue Name ;", "this . cache Size = cache Size ;", "this . ops Counter = NUM_ ; }"]}
{"ids": "75534", "code": ["protected final String Builder write ( String Builder sb , final Object ... objects ) {", "for ( Object string : objects ) sb . append ( string ) ;", "return sb ; }"]}
{"ids": "16707", "code": ["public void read External ( Object Input in ) throws IO Exception , Class Not Found Exception {", "int vocab Size = in . read Int ( ) ;", "for ( int i = NUM_ ; i < vocab Size ; i ++ ) {", "String line = in . read UTF ( ) ;", "Vocabulary . id ( line ) ; }", "num Tokens = in . read Double ( ) ;", "count Funcs = new long [ in . read Int ( ) ] [ NUM_ ] ;", "for ( int i = NUM_ ; i < count Funcs . length ; i ++ ) {", "count Funcs [ i ] [ NUM_ ] = in . read Long ( ) ;", "count Funcs [ i ] [ NUM_ ] = in . read Long ( ) ; }", "types Funcs = new long [ in . read Int ( ) ] [ NUM_ ] ;", "for ( int i = NUM_ ; i < types Funcs . length ; i ++ ) {", "types Funcs [ i ] [ NUM_ ] = in . read Long ( ) ;", "types Funcs [ i ] [ NUM_ ] = in . read Long ( ) ; }", "quantization Base = in . read Double ( ) ;", "bf = new Bloom Filter ( ) ;", "bf . read External ( in ) ; }"]}
{"ids": "53141", "code": ["public static double compute MAD ( double [ ] x , double median ) {", "for ( int i = NUM_ ; i < x . length ; i ++ ) {", "x [ i ] = Math . abs ( x [ i ] - median ) ; }", "double mad = Quick Select . median ( x ) ;", "if ( ! ( mad > NUM_ ) ) {", "double min = Double . POSITIVE INFINITY ;", "for ( double xi : x ) {", "if ( xi > NUM_ && xi < min ) {", "min = xi ; } }", "if ( min < Double . POSITIVE INFINITY ) {", "mad = min ; }", "else {", "mad = NUM_ ; } }", "if ( mad == Double . POSITIVE INFINITY ) {", "double max = NUM_ ;", "for ( double xi : x ) {", "if ( xi < Double . POSITIVE INFINITY && xi > max ) {", "max = xi ; } }", "if ( max < Double . POSITIVE INFINITY ) {", "mad = max ; }", "else {", "mad = NUM_ ; } }", "return mad ; }"]}
{"ids": "86974", "code": ["public Sdp Exception ( Throwable root Cause ) {", "super ( root Cause . get Localized Message ( ) ) ; }"]}
{"ids": "73778", "code": ["protected void notify Property Change Listener ( String property , Object old Value , Object new Value ) {", "Set < Property Change Listener > v ;", "synchronized ( this ) {", "v = new Hash Set < > ( listeners ) ; }", "for ( Property Change Listener listener : v ) {", "listener . property Change ( new Property Change Event ( this , property , old Value , new Value ) ) ; } }"]}
{"ids": "30679", "code": ["public boolean indicate Dirty Read ( I Template Holder template ) {", "return ( ( template . is Read Operation ( ) && use Dirty Read ) || template . is Dirty Read Requested ( ) ) ; }"]}
{"ids": "27035", "code": ["protected void apply Attributes To Symbol ( Tactical Graphic Attributes graphic Attributes , Tactical Symbol Attributes symbol Attributes ) {", "Double value = graphic Attributes . get Interior Opacity ( ) ;", "if ( value != null ) {", "symbol Attributes . set Opacity ( value ) ; }", "value = graphic Attributes . get Scale ( ) ;", "if ( value != null ) {", "symbol Attributes . set Scale ( value ) ; }", "Material material = graphic Attributes . get Interior Material ( ) ;", "symbol Attributes . set Interior Material ( material ) ;", "Font font = graphic Attributes . get Text Modifier Font ( ) ;", "if ( font != null ) {", "symbol Attributes . set Text Modifier Font ( font ) ; }", "material = graphic Attributes . get Text Modifier Material ( ) ;", "if ( material != null ) {", "symbol Attributes . set Text Modifier Material ( material ) ; } }"]}
{"ids": "33321", "code": ["public Remote Service Descriptor ( String base Url , Http Json Request Factory request Factory ) throws Illegal Argument Exception {", "this . base Url = base Url ;", "this . request Factory = request Factory ;", "try {", "final URL base Url URL = new URL ( base Url ) ;", "final String protocol = base Url URL . get Protocol ( ) ;", "if ( ! ( protocol . equals ( STR_ ) || protocol . equals ( STR_ ) ) ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , base Url ) ) ; } }", "catch ( Malformed URL Exception e ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , base Url ) ) ; } }"]}
{"ids": "63378", "code": ["public Server start ( ) throws SQL Exception {", "try {", "started = true ;", "service . start ( ) ;", "String name = service . get Name ( ) + STR_ + service . get URL ( ) + STR_ ;", "Thread t = new Thread ( this , name ) ;", "t . set Daemon ( service . is Daemon ( ) ) ;", "t . start ( ) ;", "for ( int i = NUM_ ; i < NUM_ ; i += i ) {", "wait ( i ) ;", "if ( is Running ( false ) ) {", "return this ; } }", "if ( is Running ( true ) ) {", "return this ; }", "throw Db Exception . get ( Error Code . EXCEPTION OPENING PORT 2 , name , STR_ + STR_ ) ; }", "catch ( Db Exception e ) {", "throw Db Exception . to SQL Exception ( e ) ; } }"]}
{"ids": "74544", "code": ["@ Override public boolean is Complete ( ) {", "return true ; }"]}
{"ids": "85288", "code": ["public Byte Matrix encode ( String contents , int width , int height , Map < Encode Hint Type , Object > hints ) throws Writer Exception {", "if ( contents == null || contents . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( width < NUM_ || height < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + width + STR_ + height ) ; }", "Error Correction Level error Correction Level = Error Correction Level . L ;", "if ( hints != null ) {", "Error Correction Level requested EC Level = ( Error Correction Level ) hints . get ( Encode Hint Type . ERROR CORRECTION ) ;", "if ( requested EC Level != null ) {", "error Correction Level = requested EC Level ; } }", "QR Code code = new QR Code ( ) ;", "Encoder . encode ( contents , error Correction Level , hints , code ) ;", "return render Result ( code , width , height ) ; }"]}
{"ids": "3386", "code": ["public Request header ( String key , String value ) {", "Objects . require Non Null ( key ) ;", "Objects . require Non Null ( value ) ;", "headers . put ( key , value ) ;", "return this ; }"]}
{"ids": "6625", "code": ["public void update UI ( ) {", "super . update UI ( ) ;", "set Background ( new Color ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "set Wrap Style Word ( true ) ;", "set Highlighter ( null ) ;", "set Editable ( false ) ;", "Look And Feel . install Border ( this , STR_ ) ;", "Look And Feel . install Colors And Font ( this , STR_ , STR_ , STR_ ) ;", "if ( resize Handler != null ) {", "resize Handler . component Resized ( null ) ; }", "Size Policy policy = ( Size Policy ) get Client Property ( Size Policy . class ) ;", "if ( policy != null ) {", "GUI Utils . restrict Size ( this , policy ) ; } }"]}
{"ids": "19958", "code": ["public synchronized Future < V > submit ( Callable < V > task ) throws Rejected Execution Exception {", "return pool . submit ( task ) ; }"]}
{"ids": "1907", "code": ["private void check Bucket Name ( String name ) throws Invalid Bucket Name Exception {", "if ( name == null ) {", "throw new Invalid Bucket Name Exception ( NULL STRING , STR_ ) ; }", "if ( name . length ( ) < NUM_ || name . length ( ) > NUM_ ) {", "String msg = STR_ ;", "throw new Invalid Bucket Name Exception ( name , msg ) ; }", "if ( name . matches ( STR_ ) ) {", "String msg = STR_ + STR_ ;", "throw new Invalid Bucket Name Exception ( name , msg ) ; }", "if ( ! name . matches ( STR_ ) ) {", "String msg = STR_ + STR_ ;", "throw new Invalid Bucket Name Exception ( name , msg ) ; } }"]}
{"ids": "56797", "code": ["private void validate User Namespace Authorization Create Request ( User Namespace Authorization Create Request request ) {", "Assert . not Null ( request , STR_ ) ;", "validate User Namespace Authorization Key ( request . get User Namespace Authorization Key ( ) ) ;", "validate Namespace Permissions ( request . get Namespace Permissions ( ) ) ; }"]}
{"ids": "20007", "code": ["protected String format ( Object o ) {", "return o . to String ( ) ; }"]}
{"ids": "22015", "code": ["protected boolean can Delete Consistency Group ( final Block Consistency Group consistency Group ) {", "return ( ! consistency Group . get Inactive ( ) && ! consistency Group . created ( ) ) ; }"]}
{"ids": "1760", "code": ["public Amqp Message receive No Wait ( ) throws Exception {", "check Closed ( ) ;", "return prefetch . poll ( ) ; }"]}
{"ids": "70296", "code": ["private void check Duplicate Names During Delete ( List < Integer > ids ) {", "Array List < Entity > my Entities = game . get Player Entities ( game . get Player ( local Player Number ) , false ) ;", "Hashtable < String , Array List < Integer > > raw Name To Id = new Hashtable < String , Array List < Integer > > ( ( int ) ( my Entities . size ( ) * NUM_ ) ) ;", "for ( Entity e : my Entities ) {", "String raw Name = e . get Short Name Raw ( ) ;", "Array List < Integer > named Ids = raw Name To Id . get ( raw Name ) ;", "if ( named Ids == null ) {", "named Ids = new Array List < Integer > ( ) ; }", "named Ids . add ( e . get Id ( ) ) ;", "raw Name To Id . put ( raw Name , named Ids ) ; }", "for ( int id : ids ) {", "Entity removed Entity = game . get Entity ( id ) ;", "if ( removed Entity == null ) {", "continue ; }", "String removed Raw Name = removed Entity . get Short Name Raw ( ) ;", "Integer count = duplicate Name Hash . get ( removed Entity . get Short Name Raw ( ) ) ;", "if ( ( count != null ) && ( count > NUM_ ) ) {", "Array List < Integer > named Ids = raw Name To Id . get ( removed Raw Name ) ;", "for ( Integer i : named Ids ) {", "Entity e = game . get Entity ( i ) ;", "String e Raw Name = e . get Short Name Raw ( ) ;", "if ( e Raw Name . equals ( removed Raw Name ) && ( e . duplicate Marker > removed Entity . duplicate Marker ) ) {", "e . duplicate Marker -- ;", "e . generate Short Name ( ) ;", "e . generate Display Name ( ) ;", "if ( ! ids . contains ( e . get Id ( ) ) ) {", "send Update Entity ( e ) ; } } }", "duplicate Name Hash . put ( removed Entity . get Short Name Raw ( ) , new Integer ( count - NUM_ ) ) ; }", "else if ( count != null ) {", "duplicate Name Hash . remove ( removed Entity . get Short Name Raw ( ) ) ; } } }"]}
{"ids": "2499", "code": ["public void release Selections ( Set < Entity > items ) {", "for ( Entity item : items ) {", "release Selection ( item ) ; } }"]}
{"ids": "83250", "code": ["public Hub Link Mapping ( String file Name , int number Of Hubs , Network network ) {", "this . number Of Hubs = number Of Hubs ;", "if ( file Name . contains ( STR_ ) ) {", "read Mapping Table ( file Name ) ;", "un Mapped Links At Zero Hub = true ;", "return ; }", "handle Unmapped Links Start ( ) ;", "try {", "File Reader fr = new File Reader ( file Name ) ;", "Buffered Reader br = new Buffered Reader ( fr ) ;", "String line ;", "String Tokenizer tokenizer ;", "String token ;", "int link Id ;", "line = br . read Line ( ) ;", "while ( line != null ) {", "tokenizer = new String Tokenizer ( line ) ;", "for ( int i = NUM_ ; i < this . number Of Hubs ; i ++ ) {", "token = tokenizer . next Token ( ) ;", "link Id = ( int ) Double . parse Double ( token ) ;", "link Hub Mapping . put ( Integer . to String ( link Id ) , i ) ; }", "if ( tokenizer . has More Tokens ( ) ) {", "throw new Runtime Exception ( STR_ ) ; }", "line = br . read Line ( ) ; } }", "catch ( Runtime Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( STR_ ) ; }", "link Hub Mapping . remove ( STR_ ) ;", "handle Unmapped Links End ( network ) ; }"]}
{"ids": "74305", "code": ["public boolean delete Load Name ( String load ) {", "if ( ! load List . contains ( load ) ) {", "return false ; }", "load List . remove ( load ) ;", "log . debug ( STR_ + get Name ( ) + STR_ + load ) ;", "set Dirty And Fire Property Change ( LOADS CHANGED PROPERTY , load List . size ( ) + NUM_ , load List . size ( ) ) ;", "return true ; }"]}
{"ids": "17282", "code": ["private Compute State validate Compute Name ( String aws Id , String vm Name ) throws Throwable {", "if ( this . is Aws Client Mock ) {", "return null ; }", "Compute State compute State = get Compute By AWS Id ( this . host , aws Id ) ;", "String tag Name Value = compute State . name ;", "assert Not Null ( STR_ , tag Name Value ) ;", "assert Equals ( vm Name , tag Name Value ) ;", "return compute State ; }"]}
{"ids": "79178", "code": ["public static String from Tag ( Int Array Tag tag ) {", "String Builder builder = new String Builder ( ) ;", "builder . append ( ARRAY START ) ;", "boolean start = true ;", "for ( int value : tag . get Value ( ) ) {", "Int Tag i = new Int Tag ( value ) ;", "if ( start ) {", "start = false ; }", "else {", "builder . append ( ELEMENT SEPERATOR ) ; }", "builder . append ( from Tag ( i ) ) ; }", "builder . append ( ARRAY END ) ;", "return builder . to String ( ) ; }"]}
{"ids": "84990", "code": ["public static int remove Args And Return Insertion Index ( List < String > args , int arg Index , boolean try Removing Arg Value ) {", "if ( arg Index < NUM_ || arg Index >= args . size ( ) ) {", "return NUM_ ; }", "if ( try Removing Arg Value ) {", "String arg Value = get Arg Value ( args , arg Index + NUM_ ) ;", "if ( arg Value != null ) {", "args . remove ( arg Index + NUM_ ) ; } }", "args . remove ( arg Index ) ;", "return arg Index ; }"]}
{"ids": "14679", "code": ["void replace Policy In Resource Tree ( Service Type Manager svtm , SSO Token token , Policy old Policy , Policy new Policy ) throws Policy Exception , SSO Exception {", "remove Policy From Resource Tree ( svtm , token , old Policy ) ;", "add Policy To Resource Tree ( svtm , token , new Policy ) ; }"]}
{"ids": "9400", "code": ["public Atomic Double Array ( int length ) {", "larray = new Atomic Long Array ( length ) ;", "long ZERO = Double . double To Raw Long Bits ( NUM_ ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) larray . set ( i , ZERO ) ; }"]}
{"ids": "386", "code": ["private static Buffered Image make Square ( Buffered Image input ) {", "if ( input . get Height ( ) == input . get Width ( ) ) {", "return input ; }", "else {", "int max = Math . max ( input . get Height ( ) , input . get Width ( ) ) ;", "int dx = ( max - input . get Width ( ) ) / NUM_ ;", "int dy = ( max - input . get Height ( ) ) / NUM_ ;", "return create Img ( max , max , input . get Type ( ) , null ) ; } }"]}
{"ids": "46983", "code": ["public void write Start Element ( String local Name ) throws XML Stream Exception {", "if ( local Name == null || local Name . length ( ) == NUM_ ) {", "throw new XML Stream Exception ( STR_ ) ; }", "state = STATE ELEMENT ;", "if ( current Ele != null && current Ele . get State ( ) == ELEMENT STARTTAG OPEN ) {", "close Start Tag ( ) ; }", "current Ele = new Element ( current Ele , local Name , false ) ;", "open Start Tag ( ) ;", "writer . write ( local Name ) ; }"]}
{"ids": "36443", "code": ["public void add Process Interaction Listener ( final Process Interaction Listener l ) {", "if ( l == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "process Interaction Listeners . add ( l ) ; }"]}
{"ids": "26003", "code": ["private void traverse Internal ( Object root , boolean yield Root , Identity Hash Map < Object , Object > seen ) {", "if ( root == null || seen . contains Key ( root ) ) {", "return ; }", "if ( yield Root ) {", "if ( ! visit ( root ) ) {", "return ; } }", "seen . put ( root , root ) ;", "if ( root instanceof JSON Object ) {", "JSON Object json = ( JSON Object ) root ;", "Iterator < String > keys = json . keys ( ) ;", "while ( keys . has Next ( ) ) {", "String key = keys . next ( ) ;", "try {", "traverse Internal ( json . get ( key ) , true , seen ) ; }", "catch ( JSON Exception e ) {", "throw new Runtime Exception ( e ) ; } } }", "else if ( root instanceof JSON Array ) {", "JSON Array array = ( JSON Array ) root ;", "for ( int i = NUM_ ; i < array . length ( ) ; ++ i ) {", "try {", "traverse Internal ( array . get ( i ) , true , seen ) ; }", "catch ( JSON Exception e ) {", "throw new Runtime Exception ( e ) ; } } }", "else if ( root instanceof Map ) {", "Map < ? , ? > map = ( Map < ? , ? > ) root ;", "for ( Object value : map . values ( ) ) {", "traverse Internal ( value , true , seen ) ; } }", "else if ( root instanceof List ) {", "List < ? > list = ( List < ? > ) root ;", "for ( Object value : list ) {", "traverse Internal ( value , true , seen ) ; } }", "else if ( root instanceof Parse Object ) {", "if ( traverse Parse Objects ) {", "Parse Object object = ( Parse Object ) root ;", "for ( String key : object . key Set ( ) ) {", "traverse Internal ( object . get ( key ) , true , seen ) ; } } }", "else if ( root instanceof Parse ACL ) {", "Parse ACL acl = ( Parse ACL ) root ;", "Parse User user = acl . get Unresolved User ( ) ;", "if ( user != null && user . is Current User ( ) ) {", "traverse Internal ( user , true , seen ) ; } } }"]}
{"ids": "74464", "code": ["public Common Turnout Operation Config ( Turnout Operation op ) {", "super ( op ) ;", "my Op = ( Common Turnout Operation ) op ;", "max Tries Spinner = new J Spinner ( ) ;", "interval Spinner = new J Spinner ( ) ;", "Box vbox = Box . create Vertical Box ( ) ;", "Box hbox 1 = Box . create Horizontal Box ( ) ;", "Box hbox 2 = Box . create Horizontal Box ( ) ;", "vbox . add ( hbox 2 ) ;", "vbox . add ( hbox 1 ) ;", "vbox . add ( Box . create Vertical Glue ( ) ) ;", "hbox 1 . add ( new J Label ( Bundle . get Message ( STR_ ) ) ) ;", "hbox 1 . add ( Box . create Horizontal Glue ( ) ) ;", "interval Spinner . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "interval Spinner . set Model ( new Spinner Number Model ( my Op . get Interval ( ) , Common Turnout Operation . min Interval , Common Turnout Operation . max Interval , Common Turnout Operation . interval Step Size ) ) ;", "hbox 1 . add ( interval Spinner ) ;", "hbox 2 . add ( new J Label ( Bundle . get Message ( STR_ ) ) ) ;", "hbox 2 . add ( Box . create Horizontal Glue ( ) ) ;", "max Tries Spinner . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "max Tries Spinner . set Model ( new Spinner Number Model ( my Op . get Max Tries ( ) , Common Turnout Operation . min Max Tries , Common Turnout Operation . max Max Tries , NUM_ ) ) ;", "hbox 2 . add ( max Tries Spinner ) ;", "Box hbox 3 = Box . create Horizontal Box ( ) ;", "hbox 3 . add ( Box . create Horizontal Strut ( NUM_ ) ) ;", "vbox . add ( hbox 3 ) ;", "add ( vbox ) ; }"]}
{"ids": "35691", "code": ["public String find Interlanguage Link ( String lang ) {", "int start = page . index Of ( STR_ + lang + STR_ ) ;", "if ( start < NUM_ ) return null ;", "int end = page . index Of ( STR_ , start ) ;", "if ( end < NUM_ ) return null ;", "String link = page . substring ( start + NUM_ + lang . length ( ) , end ) ;", "if ( link . index Of ( STR_ ) != - NUM_ ) {", "return null ; }", "if ( link . length ( ) == NUM_ ) return null ;", "return link ; }"]}
{"ids": "37190", "code": ["private void update Actions ( final I Navi Address Space address Space ) {", "m load Address Space Action . set Enabled ( ! address Space . is Loaded ( ) ) ; }"]}
{"ids": "86544", "code": ["public static < T > Parallel Flux < T > from ( Publisher < ? extends T > source , int parallelism ) {", "return from ( source , parallelism , Queue Supplier . SMALL BUFFER SIZE , Queue Supplier . small ( ) ) ; }"]}
{"ids": "86215", "code": ["private void add Gumball ( float x Pos , float y Pos ) {", "Gumball gumball = new Gumball ( ) ;", "gumball . m X Init Pos = x Pos ;", "gumball . m Y Init Pos = y Pos ;", "gumball . m Sound Pool Id = UUID . random UUID ( ) ;", "m Sound Pool Id . put ( gumball . m Sound Pool Id , false ) ;", "m Game View . add Gumball ( gumball ) ;", "m Sound Pool . play ( m Sound Ball Drop , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ ) ; }"]}
{"ids": "1640", "code": ["int put ( T segment , List < ? super T > recycle Bin ) {", "int count ;", "if ( last Count == NUM_ ) {", "count = NUM_ ;", "last Count = NUM_ ;", "last = segment ; }", "else if ( Objects . deep Equals ( last , segment ) ) {", "++ last Count ;", "count = NUM_ ;", "recycle Bin . add ( segment ) ; }", "else {", "count = last Count ;", "last Count = NUM_ ;", "last = segment ; }", "return count ; }"]}
{"ids": "69621", "code": ["public Channel chan ( final String topic , final Json Node payload ) {", "LOG . log ( Level . FINE , STR_ , new Object [ ] { topic , payload } ) ;", "final Channel channel = new Channel ( topic , payload , Socket . this ) ;", "synchronized ( channels ) {", "channels . add ( channel ) ; }", "return channel ; }"]}
{"ids": "5038", "code": ["public Pla Point Float change size ( double p new size ) {", "if ( v x == NUM_ && v y == NUM_ ) {", "return this ; }", "double length = Math . sqrt ( v x * v x + v y * v y ) ;", "double new x = ( v x * p new size ) / length ;", "double new y = ( v y * p new size ) / length ;", "return new Pla Point Float ( new x , new y ) ; }"]}
{"ids": "3359", "code": ["int insert ( Row row , byte [ ] source Buffer , int source Offset , Blob Output Stream [ ] blobs ) {", "int row Head = row Head ;", "int blob Tail = blob Tail ;", "int row Length = row . length ( ) ;", "row Head -= row Length ;", "if ( row Head < blob Tail ) {", "return - NUM_ ; }", "byte [ ] buffer = buffer ;", "System . arraycopy ( source Buffer , source Offset , buffer , row Head , row Length ) ;", "buffer [ row Head ] = ( byte ) ( ( buffer [ row Head ] & ~ CODE MASK ) | INSERT ) ;", "blob Tail = row . insert Blobs ( buffer , row Head , blob Tail , blobs ) ;", "if ( blob Tail < NUM_ ) {", "return - NUM_ ; }", "set Blob Tail ( blob Tail ) ;", "row Head ( row Head ) ;", "validate Block ( row ) ;", "return row Head ; }"]}
{"ids": "31779", "code": ["private void add Default Uri ( ) throws Ignite Spi Exception {", "assert uri Encoded List != null ;", "URI uri ;", "try {", "uri = U . resolve Work Directory ( DFLT DEPLOY DIR , false ) . to URI ( ) ; }", "catch ( Ignite Checked Exception e ) {", "throw new Ignite Spi Exception ( STR_ , e ) ; }", "uri Encoded List . add ( uri ) ; }"]}
{"ids": "86825", "code": ["protected void transfer ( String seq Range ) throws IO Exception {", "try {", "final int range Pos = seq Range . index Of ( STR_ ) ;", "if ( range Pos == - NUM_ ) {", "transfer ( Long . parse Long ( seq Range ) ) ; }", "else {", "final String start = seq Range . substring ( NUM_ , range Pos ) ;", "final String end = seq Range . substring ( range Pos + NUM_ ) ;", "final long start Idx ;", "if ( start . length ( ) == NUM_ ) {", "start Idx = NUM_ ; }", "else {", "start Idx = Long . parse Long ( start ) ; }", "final long end Idx ;", "if ( end . length ( ) == NUM_ ) {", "end Idx = m Reader . number Sequences ( ) - NUM_ ; }", "else {", "end Idx = Long . parse Long ( end ) ; }", "if ( start Idx > end Idx ) {", "throw new Number Format Exception ( STR_ + seq Range ) ; }", "for ( long i = start Idx ; i <= end Idx ; i ++ ) {", "transfer ( i ) ; } } }", "catch ( final Number Format Exception e ) {", "warn Invalid Sequence ( seq Range ) ; } }"]}
{"ids": "71090", "code": ["public static double distance Point Line Perpendicular ( Coordinate p , Coordinate A , Coordinate B ) {", "double len 2 = ( B . x - A . x ) * ( B . x - A . x ) + ( B . y - A . y ) * ( B . y - A . y ) ;", "double s = ( ( A . y - p . y ) * ( B . x - A . x ) - ( A . x - p . x ) * ( B . y - A . y ) ) / len 2 ;", "return Math . abs ( s ) * Math . sqrt ( len 2 ) ; }"]}
{"ids": "71999", "code": ["public String patch Fix Ids ( ) {", "return properties . get Property ( STR_ ) ; }"]}
{"ids": "82414", "code": ["public final void read Fully ( byte [ ] b ) throws java . io . IO Exception {", "read Fully ( b , NUM_ , b . length ) ; }"]}
{"ids": "40745", "code": ["public static boolean is Jellybean Or Later ( ) {", "return Build . VERSION . SDK INT >= Build . VERSION CODES . JELLY BEAN ; }"]}
{"ids": "52074", "code": ["public Partial Correlation Pdf ( int n , int k ) {", "this . n = n ;", "this . k = k ;", "double gamma Ratio = gamma Ratio ( n , k ) ;", "this . constant = ( NUM_ / Math . pow ( Math . PI , NUM_ ) ) * gamma Ratio ;", "this . outside Exp = ( double ) ( n - k - NUM_ ) / NUM_ ; }"]}
{"ids": "15616", "code": ["private static boolean is Enabled ( ) {", "if ( System Utils . IS OS WINDOWS ) {", "return false ; }", "try {", "List < String > lines = Command Util . execute Command And Get Lines ( Collections . singleton List ( STR_ ) ) ;", "for ( String line : lines ) {", "if ( line . contains ( STR_ ) ) {", "if ( line . contains ( STR_ ) ) {", "Logger . info ( STR_ ) ;", "return true ; }", "return false ; } } }", "catch ( Exception ex ) { }", "return false ; }"]}
{"ids": "74774", "code": ["public boolean validate ( ) {", "output File = new File ( output Path ) ;", "if ( output File . exists ( ) || output File . is Directory ( ) ) {", "invalid Message = STR_ ;", "return valid = false ; }", "if ( ! sign Mode ) {", "key File = new File ( key File Path ) ;", "if ( ! key File . exists ( ) || key File . is Directory ( ) ) {", "invalid Message = STR_ ;", "return valid = false ; } }", "return valid = true ; }"]}
{"ids": "81841", "code": ["public void add Response Code Listener ( Action Listener a ) {", "response Code Listeners . add Element ( a ) ; }"]}
{"ids": "77069", "code": ["public static boolean has Dead States From Initial ( Automaton a ) {", "Bit Set reachable From Initial = get Live States From Initial ( a ) ;", "Bit Set reachable From Accept = get Live States To Accept ( a ) ;", "reachable From Initial . and Not ( reachable From Accept ) ;", "return reachable From Initial . is Empty ( ) == false ; }"]}
{"ids": "80724", "code": ["public Decimal subtract ( Decimal decimal ) {", "assert Defined ( ) ;", "if ( null == m value ) {", "return ( decimal ) ; }", "Big Decimal value = m value . subtract ( decimal . get Big Decimal Value ( ) ) ;", "return new Decimal ( value , SCALE ) ; }"]}
{"ids": "27345", "code": ["protected int skip Line ( int c ) throws IO Exception {", "while ( c != - NUM_ && c != STR_ && c != STR_ ) {", "c = reader . read ( ) ; }", "if ( c == STR_ ) {", "c = reader . read ( ) ;", "line No ++ ;", "report Location ( line No , NUM_ ) ; }", "else if ( c == STR_ ) {", "c = reader . read ( ) ;", "if ( c == STR_ ) {", "c = reader . read ( ) ; }", "line No ++ ;", "report Location ( line No , NUM_ ) ; }", "return c ; }"]}
{"ids": "24720", "code": ["public static Byte Buffer base 64 String To Byte Buffer ( String base 64 Encoded Key ) {", "return Byte Buffer . wrap ( base 64 Decode String ( base 64 Encoded Key ) ) ; }"]}
{"ids": "51086", "code": ["public boolean step ( ) {", "long current = System . current Time Millis ( ) ;", "if ( m Start == NUM_ || ( current - m Start < NUM_ ) ) {", "m Progress = NUM_ ; }", "else if ( current - m Start > m Duration ) {", "if ( m Loop ) {", "m Progress = NUM_ ;", "start ( ) ;", "return true ; }", "m Progress = NUM_ ;", "return false ; }", "else {", "m Progress = ( current - m Start ) / ( double ) m Duration ; }", "return true ; }"]}
{"ids": "52340", "code": ["protected void load raw characters ( String Builder sb ) throws IO Exception {", "int c = read char ( ) ;", "for ( ; ; ) {", "c = read char ( ) ;", "switch ( c ) {", "case Character Sequence . CHAR SEQ ESCAPED NEWLINE SEQUENCE 1 :", "case Character Sequence . CHAR SEQ ESCAPED NEWLINE SEQUENCE 2 :", "case Character Sequence . CHAR SEQ ESCAPED NEWLINE SEQUENCE 3 :", "continue ;", "case - NUM_ :", "return ;", "default :", "if ( ! Ion Token Consts X . is 7 bit Value ( c ) ) {", "c = read large char sequence ( c ) ; } }", "if ( Ion UTF 8 . needs Surrogate Encoding ( c ) ) {", "sb . append ( Ion UTF 8 . high Surrogate ( c ) ) ;", "c = Ion UTF 8 . low Surrogate ( c ) ; }", "sb . append ( ( char ) c ) ; } }"]}
{"ids": "29504", "code": ["public Signature Faking Oracle ( final String document String ) throws Signature Faking Exception {", "Security . add Provider ( new Bouncy Castle Provider ( ) ) ;", "signature Value Elements = new Linked List < Node > ( ) ;", "key Info Elements = new Linked List < Node > ( ) ;", "certificates = new Linked List < String > ( ) ;", "cert Handlers = new Linked List < Certificate Handler > ( ) ;", "try {", "doc = Dom Utilities . string To Dom ( document String ) ;", "crawl Signature Elements ( ) ;", "log . debug ( STR_ + signature Value Elements . size ( ) + STR_ ) ;", "crawl Key Info Elements ( ) ;", "log . debug ( STR_ + key Info Elements . size ( ) + STR_ ) ; }", "catch ( SAX Exception e ) {", "throw new Signature Faking Exception ( e ) ; } }"]}
{"ids": "27290", "code": ["public Arbitrary Length Path Node ( final Term Node left , final Term Node right , final Var Node t Var Left , final Var Node t Var Right , final long lower Bound , final long upper Bound ) {", "this ( new B Op [ ] { new Join Group Node ( ) } , NV . as Map ( new NV ( Annotations . LEFT TERM , left ) , new NV ( Annotations . RIGHT TERM , right ) , new NV ( Annotations . TRANSITIVITY VAR LEFT , t Var Left ) , new NV ( Annotations . TRANSITIVITY VAR RIGHT , t Var Right ) , new NV ( Annotations . DROP VARS , new Array List < Var Node > ( ) ) , new NV ( Annotations . LOWER BOUND , lower Bound ) , new NV ( Annotations . UPPER BOUND , upper Bound ) ) ) ;", "final Set < Var Node > drop Vars = new Linked Hash Set < > ( ) ;", "drop Vars . add ( t Var Left ) ;", "drop Vars . add ( t Var Right ) ;", "set Property ( Annotations . DROP VARS , drop Vars ) ; }"]}
{"ids": "65433", "code": ["private Integer scan Yaml Directive Number ( Mark start Mark ) {", "char ch = reader . peek ( ) ;", "if ( ! Character . is Digit ( ch ) ) {", "throw new Scanner Exception ( STR_ , start Mark , STR_ + ch + STR_ + ( ( int ) ch ) + STR_ , reader . get Mark ( ) ) ; }", "int length = NUM_ ;", "while ( Character . is Digit ( reader . peek ( length ) ) ) {", "length ++ ; }", "Integer value = Integer . parse Int ( reader . prefix Forward ( length ) ) ;", "return value ; }"]}
{"ids": "75755", "code": ["public static final String to Bit String ( int i [ ] ) {", "String Builder sb = new String Builder ( i . length ) ;", "for ( int b : i ) {", "sb . append ( b ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "64839", "code": ["public static Byte Buffer convert To Signed 16 Bit Samples ( Buffer buffer ) {", "return convert To Signed 16 Bit Samples ( buffer . get Samples ( ) ) ; }"]}
{"ids": "53935", "code": ["boolean check Token ( Byte Wrapper token , Key node Id , Inet Address ip , int port , Key lookup Key ) {", "update Token Timestamps ( ) ;", "boolean valid = check Token ( token , node Id , ip , port , lookup Key , timestamp Current . get ( ) ) || check Token ( token , node Id , ip , port , lookup Key , timestamp Previous ) ;", "if ( ! valid ) DHT . log Debug ( STR_ + ip . get Host Address ( ) ) ;", "return valid ; }"]}
{"ids": "36400", "code": ["public void expand All ( ) {", "cancel Editing ( ) ;", "final Tree Model tm = get Model ( ) ;", "final Object root = tm . get Root ( ) ;", "if ( root != null ) {", "expand All Paths ( new Tree Path ( root ) , tm ) ; } }"]}
{"ids": "27253", "code": ["protected void describe Vocabularies ( final IV Count [ ] predicate Partition Counts ) {", "final Set < String > namespaces = new Linked Hash Set < String > ( ) ; {", "for ( IV Count tmp : predicate Partition Counts ) {", "final URI p = ( URI ) tmp . get Value ( ) ;", "String namespace = p . get Namespace ( ) ;", "if ( namespace . ends With ( STR_ ) ) {", "namespace = namespace . substring ( NUM_ , namespace . length ( ) - NUM_ ) ; }", "namespaces . add ( namespace ) ; } }", "final String [ ] a = namespaces . to Array ( new String [ namespaces . size ( ) ] ) ;", "Arrays . sort ( a ) ;", "for ( String namespace : a ) {", "g . add ( a Dataset , Void Vocabulary Decl . vocabulary , f . create URI ( namespace ) ) ; } }"]}
{"ids": "82238", "code": ["public static void show Error Message ( String msg ) {", "show Error Message ( msg , NUM_ ) ; }"]}
{"ids": "81615", "code": ["@ Override protected void on Destroy ( ) {", "super . on Destroy ( ) ;", "do Really Stop ( false ) ;", "m Fragments . dispatch Destroy ( ) ;", "if ( m Loader Manager != null ) {", "m Loader Manager . do Destroy ( ) ; } }"]}
{"ids": "49287", "code": ["static Windows File Attributes from Find Data ( long address ) {", "int file Attrs = unsafe . get Int ( address + OFFSETOF FIND DATA ATTRIBUTES ) ;", "long creation Time = unsafe . get Long ( address + OFFSETOF FIND DATA CREATETIME ) ;", "long last Access Time = unsafe . get Long ( address + OFFSETOF FIND DATA LASTACCESSTIME ) ;", "long last Write Time = unsafe . get Long ( address + OFFSETOF FIND DATA LASTWRITETIME ) ;", "long size = ( ( long ) ( unsafe . get Int ( address + OFFSETOF FIND DATA SIZEHIGH ) ) << NUM_ ) + ( unsafe . get Int ( address + OFFSETOF FIND DATA SIZELOW ) & NUM_ ) ;", "int reparse Tag = is Reparse Point ( file Attrs ) ? unsafe . get Int ( address + OFFSETOF FIND DATA RESERVED 0 ) : NUM_ ;", "return new Windows File Attributes ( file Attrs , creation Time , last Access Time , last Write Time , size , reparse Tag , NUM_ , NUM_ , NUM_ ) ; }"]}
{"ids": "8601", "code": ["public void fire Event Programmatically ( Event event ) {", "if ( ! event . is Consumed ( ) ) rippler Pane . fire Event ( event ) ; }"]}
{"ids": "76450", "code": ["private boolean has Full Entry ( Json Value entry , Query Side query Side ) {", "if ( query Side == Query Side . SOURCE && source Query Full Entry != null ) {", "return source Query Full Entry ; }", "else if ( query Side == Query Side . TARGET && target Query Full Entry != null ) {", "return target Query Full Entry ; }", "if ( entry != null ) {", "short ignore Fields = NUM_ ;", "if ( entry . is Defined ( STR_ ) ) {", "ignore Fields ++ ; }", "if ( entry . is Defined ( STR_ ) ) {", "ignore Fields ++ ; }", "ignore Fields += NUM_ ;", "return entry . size ( ) > ignore Fields ; }", "else {", "return false ; } }"]}
{"ids": "80804", "code": ["public static boolean is Module ( I Resource resource ) {", "return ( resource != null && TLA EXTENSION . equals ( resource . get File Extension ( ) ) ) ; }"]}
{"ids": "78054", "code": ["public int write Annotation ( Annotation annotation ) {", "int off = data . position ( ) ;", "write Byte ( annotation . visibility ) ;", "write Encoded Array ( annotation . encoded Annotation ) ;", "return off ; }"]}
{"ids": "78007", "code": ["public static long from Inet 4 Address ( final Inet Address inet Address ) {", "ensure Is Inet 4 Address ( inet Address ) ;", "return Integer . to Unsigned Long ( inet Address . hash Code ( ) ) ; }"]}
{"ids": "67789", "code": ["public List < Generic Entry > retrieve All Account Info Requests ( Date from Date ) throws Apps For Your Domain Exception , IO Exception , Service Exception {", "String url = BASE URL + STR_ + domain ;", "if ( from Date != null ) {", "url += STR_ + DATE FORMAT . format ( from Date ) ; }", "return get All Pages ( new URL ( url ) , Generic Feed . class ) ; }"]}
{"ids": "36711", "code": ["protected void draw Cylinder ( int x , int y , int w , int h , Color fill Color , Paint fill Paint , Color pen Color , boolean is Shadow ) {", "int h 4 = h / NUM_ ;", "int r = w - NUM_ ;", "if ( fill Color != null || fill Paint != null ) {", "Area area = new Area ( new Rectangle ( x , y + h 4 / NUM_ , r , h - h 4 ) ) ;", "area . add ( new Area ( new Rectangle ( x , y + h 4 / NUM_ , r , h - h 4 ) ) ) ;", "area . add ( new Area ( new Ellipse 2 D . Double ( x , y , r , h 4 ) ) ) ;", "area . add ( new Area ( new Ellipse 2 D . Double ( x , y + h - h 4 , r , h 4 ) ) ) ;", "if ( is Shadow ) {", "g . set Color ( mx Constants . SHADOW COLOR ) ;", "g . translate ( mx Constants . SHADOW OFFSETX , mx Constants . SHADOW OFFSETY ) ;", "g . fill ( area ) ;", "g . translate ( - mx Constants . SHADOW OFFSETX , - mx Constants . SHADOW OFFSETY ) ; }", "if ( fill Paint != null ) {", "g . set Paint ( fill Paint ) ; }", "else {", "g . set Color ( fill Color ) ; }", "g . fill ( area ) ; }", "if ( pen Color != null ) {", "g . set Color ( pen Color ) ;", "int h 2 = h 4 / NUM_ ;", "g . draw Oval ( x , y , r , h 4 ) ;", "g . draw Line ( x , y + h 2 , x , y + h - h 2 ) ;", "g . draw Line ( x + w - NUM_ , y + h 2 , x + w - NUM_ , y + h - h 2 ) ;", "g . draw Arc ( x , y + h - h 4 , r , h 4 , NUM_ , - NUM_ ) ; } }"]}
{"ids": "63018", "code": ["public String List plus ( String ... args ) {", "String List new List = new String List ( ) ;", "new List . add All ( this ) ;", "new List . add All ( Arrays . as List ( args ) ) ;", "return new List ; }"]}
{"ids": "8577", "code": ["private void walk Parse Tree ( List < Swift Base Listener > listeners , Top Level Context tree ) {", "Parse Tree Walker walker = new Parse Tree Walker ( ) ;", "listeners . for Each ( null ) ; }"]}
{"ids": "43307", "code": ["protected List < Decompounded Word > make Split ( String a Word ) {", "List < Decompounded Word > result = new Array List < Decompounded Word > ( ) ;", "for ( int i = NUM_ ; i < a Word . length ( ) ; i ++ ) {", "String left Word = a Word . substring ( NUM_ , i + NUM_ ) ;", "String right Word = a Word . substring ( i + NUM_ ) ;", "boolean left Good = dict . contains ( left Word ) && left Word . length ( ) >= min Word Length ;", "boolean right Good = right Word . length ( ) > min Rest Length || right Word . length ( ) == NUM_ ;", "if ( left Good && right Good ) {", "Decompounded Word split = Decompounded Word . create From String ( left Word + STR_ + right Word ) ;", "split . set Split Pos ( i ) ;", "result . add ( split ) ; }", "for ( String morpheme : morphemes . get All ( ) ) {", "try {", "String left Without Morpheme = left Word . substring ( NUM_ , left Word . length ( ) - morpheme . length ( ) ) ;", "if ( left Word . ends With ( morpheme ) && dict . contains ( left Without Morpheme ) && right Good ) {", "Decompounded Word split = Decompounded Word . create From String ( left Without Morpheme + STR_ + morpheme + STR_ + right Word ) ;", "split . set Split Pos ( i ) ;", "result . add ( split ) ; } }", "catch ( String Index Out Of Bounds Exception e ) {", "continue ; } } }", "return result ; }"]}
{"ids": "66759", "code": ["public static String class Name Path ( String class Name ) {", "String filename = class Name . replace ( STR_ , File . separator ) ;", "filename = filename . replace First ( STR_ , STR_ ) ;", "if ( filename . index Of ( STR_ ) > NUM_ ) {", "filename = filename . substring ( NUM_ , filename . index Of ( STR_ ) ) ; }", "return STR_ + File . separator + filename + STR_ ; }"]}
{"ids": "16875", "code": ["public void remove Title Prefix ( String prfx ) {", "title Prefix . remove ( prfx ) ;", "fire Property Change ( TITLE PREFIX , null , title Prefix ) ; }"]}
{"ids": "74232", "code": ["public int find Car By Road Number ( String road Number ) {", "if ( sys List != null ) {", "if ( ! road Number . equals ( road Number ) ) {", "return get Index ( NUM_ , road Number ) ; }", "int index = get Index ( index , road Number ) ;", "if ( index > NUM_ ) {", "return index ; }", "return get Index ( NUM_ , road Number ) ; }", "return - NUM_ ; }"]}
{"ids": "28974", "code": ["@ Slashed Class Name @ Suppress FB Warnings ( STR_ ) public static String to Slashed Class Name ( @ Slashed Class Name ( when = When . UNKNOWN ) String class Name ) {", "if ( class Name . index Of ( STR_ ) >= NUM_ ) {", "return Descriptor Factory . canonicalize String ( class Name . replace ( STR_ , STR_ ) ) ; }", "return class Name ; }"]}
{"ids": "75785", "code": ["public static double P Average Precision ( int y [ ] , int r [ ] ) {", "double avg prec = NUM_ ;", "int L = y . length ;", "List < Integer > ones = new Array List < Integer > ( ) ;", "for ( int j = NUM_ ; j < L ; j ++ ) {", "if ( y [ j ] == NUM_ ) {", "ones . add ( j ) ; } }", "if ( ones . size ( ) <= NUM_ ) return NUM_ ;", "for ( int j : ones ) {", "double s = NUM_ ;", "for ( int k : ones ) {", "if ( r [ k ] <= r [ j ] ) {", "s ++ ; } }", "avg prec += ( s / ( NUM_ + r [ j ] ) ) ; }", "avg prec /= ones . size ( ) ;", "return avg prec ; }"]}
{"ids": "74285", "code": ["public Location new Location ( String name ) {", "Location location = get Location By Name ( name ) ;", "if ( location == null ) {", "id ++ ;", "location = new Location ( Integer . to String ( id ) , name ) ;", "Integer old Size = Integer . value Of ( location Hash Table . size ( ) ) ;", "location Hash Table . put ( location . get Id ( ) , location ) ;", "set Dirty And Fire Property Change ( LISTLENGTH CHANGED PROPERTY , old Size , Integer . value Of ( location Hash Table . size ( ) ) ) ; }", "return location ; }"]}
{"ids": "31874", "code": ["@ Override public void close ( ) {", "closing = true ;", "if ( reservations == null || reservations . compare And Set ( NUM_ , - NUM_ ) ) do Close ( ) ; }"]}
{"ids": "51009", "code": ["public static boolean is Android Sdk Dir In Local Properties File ( @ Not Null File project Dir ) {", "String android Home = get Android Home From Local Properties File ( project Dir ) ;", "if ( ! Strings . is Null Or Empty ( android Home ) ) {", "String msg = String . format ( STR_ , android Home ) ;", "LOG . info ( msg ) ;", "return true ; }", "return false ; }"]}
{"ids": "38741", "code": ["@ Override public boolean connection Allowed ( String event Name ) {", "if ( event Name . equals ( STR_ ) && m listenees . contains Key ( event Name ) ) {", "return false ; }", "return true ; }"]}
{"ids": "2464", "code": ["public static Vector 2 pow ( Vector 2 o , double power ) {", "return new Vector 2 ( Math . pow ( o . x , power ) , Math . pow ( o . z , power ) ) ; }"]}
{"ids": "31549", "code": ["public Prototype undump ( Input Stream stream , String chunkname ) throws IO Exception {", "if ( stream . read ( ) != LUA SIGNATURE [ NUM_ ] || stream . read ( ) != LUA SIGNATURE [ NUM_ ] || stream . read ( ) != LUA SIGNATURE [ NUM_ ] || stream . read ( ) != LUA SIGNATURE [ NUM_ ] ) return null ;", "String sname = get Source Name ( chunkname ) ;", "Load State s = new Load State ( stream , sname ) ;", "s . load Header ( ) ;", "switch ( s . luac Number Format ) {", "case NUMBER FORMAT FLOATS OR DOUBLES :", "case NUMBER FORMAT INTS ONLY :", "case NUMBER FORMAT NUM PATCH INT 32 :", "break ;", "default :", "throw new Lua Error ( STR_ ) ; }", "return s . load Function ( Lua String . value Of ( sname ) ) ; }"]}
{"ids": "11520", "code": ["public void add Button ( URL url , String info , Action Listener al ) {", "J Button b = new J Button ( new Image Icon ( url , info ) ) ;", "b . set Tool Tip Text ( info ) ;", "b . set Margin ( new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "b . add Action Listener ( al ) ;", "b . set Border Painted ( false ) ;", "add ( b ) ; }"]}
{"ids": "85905", "code": ["private void map Request To Responses ( Matcher < Request > request Matcher , Response Source responses ) {", "mappings . add ( new Matcher Response Source Pair ( request Matcher , responses ) ) ; }"]}
{"ids": "24939", "code": ["@ Override protected void commit To Input ( ) {", "Jmx Bean Sensor Assignment assignment = get Input ( ) ;", "if ( null != assignment ) {", "assignment . set Domain ( domain Text . get Text ( ) ) ;", "assignment . set Object Name Parameters ( new Hash Map < > ( parameters Map ) ) ;", "if ( all Attributes Button . get Selection ( ) ) {", "assignment . set Attributes ( Collections . < String > empty Set ( ) ) ; }", "else {", "assignment . set Attributes ( new Hash Set < > ( attributes Set ) ) ; } } }"]}
{"ids": "81984", "code": ["public static String [ ] split ( String original , String separator ) {", "Vector nodes = new Vector ( ) ;", "int index = original . index Of ( separator ) ;", "while ( index >= NUM_ ) {", "nodes . add Element ( original . substring ( NUM_ , index ) ) ;", "original = original . substring ( index + separator . length ( ) ) ;", "index = original . index Of ( separator ) ; }", "nodes . add Element ( original ) ;", "String [ ] ret = new String [ nodes . size ( ) ] ;", "for ( int i = NUM_ ; i < nodes . size ( ) ; i ++ ) {", "ret [ i ] = ( String ) nodes . element At ( i ) ; }", "return ret ; }"]}
{"ids": "42390", "code": ["public void insert Twin ( Instruction inst , Instruction twin ) {", "List Iterator < GCIR Map Element > iter = list . list Iterator ( ) ;", "while ( iter . has Next ( ) ) {", "GCIR Map Element new Ptr = iter . next ( ) ;", "if ( new Ptr . get Instruction ( ) == inst ) {", "iter . add ( new Ptr . create Twin ( twin ) ) ;", "return ; } }", "throw new Optimizing Compiler Exception ( STR_ + inst + STR_ ) ; }"]}
{"ids": "82535", "code": ["public java . lang . Object new Instance ( ) throws java . lang . Instantiation Exception , java . lang . Illegal Access Exception {", "Object o = new Instance Impl ( ) ;", "if ( o == null ) {", "throw new Instantiation Exception ( ) ; }", "return o ; }"]}
{"ids": "55212", "code": ["public boolean is Full ( ) {", "if ( max Size > NUM_ && notifications . size ( ) >= max Size ) {", "return true ; }", "return false ; }"]}
{"ids": "64939", "code": ["private void schedule Playlist Save ( ) {", "if ( ! m Playlist Loading ) {", "if ( m Playlist Save Pending . compare And Set ( false , true ) ) {", "m Thread Pool Manager . schedule Once ( new Playlist Save Task ( ) , NUM_ , Time Unit . SECONDS ) ; } } }"]}
{"ids": "74092", "code": ["public boolean is To Read ( ) {", "Iterator < Variable Value > i = variables . iterator ( ) ;", "while ( i . has Next ( ) ) {", "Variable Value v = i . next ( ) ;", "if ( v . is To Read ( ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "1427", "code": ["@ Deprecated public static Integer Integer ( int i ) {", "return Integer . value Of ( i ) ; }"]}
{"ids": "81307", "code": ["public void save Indexes ( ) {", "Array List to Save = new Array List ( ) ;", "synchronized ( this ) {", "Object [ ] value Table = this . indexes . value Table ;", "for ( int i = NUM_ , l = value Table . length ; i < l ; i ++ ) {", "Index index = ( Index ) value Table [ i ] ;", "if ( index != null ) to Save . add ( index ) ; } }", "boolean all Saved = true ;", "for ( int i = NUM_ , length = to Save . size ( ) ; i < length ; i ++ ) {", "Index index = ( Index ) to Save . get ( i ) ;", "Read Write Monitor monitor = index . monitor ;", "if ( monitor == null ) continue ;", "try {", "monitor . enter Read ( ) ;", "if ( index . has Changed ( ) ) {", "if ( monitor . exit Read Enter Write ( ) ) {", "try {", "save Index ( index ) ; }", "catch ( IO Exception e ) {", "if ( VERBOSE ) {", "Util . verbose ( STR_ , System . err ) ;", "e . print Stack Trace ( ) ; }", "all Saved = false ; }", "finally {", "monitor . exit Write Enter Read ( ) ; } }", "else {", "all Saved = false ; } } }", "finally {", "monitor . exit Read ( ) ; } }", "if ( this . participants Containers != null && this . participant Updated ) {", "write Participants Index Names File ( ) ;", "this . participant Updated = false ; }", "this . need To Save = ! all Saved ; }"]}
{"ids": "46460", "code": ["public Undoable Edit insert String ( int where , String str ) throws Bad Location Exception {", "if ( where >= count || where < NUM_ ) {", "throw new Bad Location Exception ( STR_ , count ) ; }", "char [ ] chars = str . to Char Array ( ) ;", "replace ( where , NUM_ , chars , NUM_ , chars . length ) ;", "if ( marks != null ) {", "update Marks For Insert ( where , str . length ( ) ) ; }", "return new Insert Undo ( where , str . length ( ) ) ; }"]}
{"ids": "41574", "code": ["boolean write Data ( ) throws IO Exception {", "int tosend ;", "int sent ;", "byte [ ] block = new byte [ k Block Size ] ;", "do {", "tosend = Math . min ( send Stream Size - total Sent , block . length ) ;", "System . arraycopy ( send Data , total Sent , block , NUM_ , tosend ) ;", "if ( tosend > NUM_ ) {", "sent = local Send ( block , tosend ) ;", "update Local Clock ( ) ;", "if ( sent != - NUM_ ) {", "total Sent += sent ; }", "else {", "logger . log ( Level . FINE , STR_ ) ; } }", "else {", "sent = tosend = NUM_ ; } }", "while ( sent > NUM_ ) ;", "if ( logger . is Loggable ( Level . FINER ) ) {", "logger . log ( Level . FINER , STR_ + total Sent + STR_ + ( send Stream Size - total Sent ) ) ; }", "return tosend == NUM_ ; }"]}
{"ids": "82585", "code": ["public static int copy And Close Output ( Reader input , Writer output ) throws IO Exception {", "try {", "return copy ( input , output ) ; }", "finally {", "output . close ( ) ; } }"]}
{"ids": "44803", "code": ["public int check Bookies Up ( int count , int timeout ) throws Exception {", "Zoo Keeper zkc = connect Zoo Keeper ( zk Host , zk Port , zk Timeout Sec ) ;", "try {", "int most Recent Size = NUM_ ;", "for ( int i = NUM_ ; i < timeout ; i ++ ) {", "try {", "List < String > children = zkc . get Children ( STR_ , false ) ;", "children . remove ( STR_ ) ;", "most Recent Size = children . size ( ) ;", "if ( ( most Recent Size > count ) || LOG . is Debug Enabled ( ) ) {", "LOG . info ( STR_ + most Recent Size + STR_ + STR_ + count ) ;", "if ( ( most Recent Size > count ) || LOG . is Trace Enabled ( ) ) {", "for ( String child : children ) {", "LOG . info ( STR_ + child ) ; } } }", "if ( most Recent Size == count ) {", "break ; } }", "catch ( Keeper Exception e ) { }", "Thread . sleep ( NUM_ ) ; }", "return most Recent Size ; }", "finally {", "zkc . close ( ) ; } }"]}
{"ids": "11482", "code": ["public Point 2 D inverse Transform ( Point 2 D src , Point 2 D dst ) {", "try {", "src . set Location ( src . get X ( ) + rot X Offset , src . get Y ( ) + rot Y Offset ) ;", "dst = rot Transform . inverse Transform ( src , dst ) ; }", "catch ( Noninvertible Transform Exception e ) {", "logger . log ( Level . FINE , e . get Message ( ) , e ) ; }", "return dst ; }"]}
{"ids": "8496", "code": ["public static Throwable should Fail ( Class clazz , Closure code ) {", "Throwable th = null ;", "try {", "code . call ( ) ; }", "catch ( Groovy Runtime Exception gre ) {", "th = Script Bytecode Adapter . unwrap ( gre ) ; }", "catch ( Throwable e ) {", "th = e ; }", "if ( th == null ) {", "fail ( STR_ + code + STR_ + clazz . get Name ( ) ) ; }", "else if ( ! clazz . is Instance ( th ) ) {", "fail ( STR_ + code + STR_ + clazz . get Name ( ) + STR_ + th ) ; }", "return th ; }"]}
{"ids": "48161", "code": ["public void encode And Sign ( X 500 Name subject , Signature signature ) throws Certificate Exception , IO Exception , Signature Exception {", "Der Output Stream out , scratch ;", "byte [ ] certificate Request Info ;", "byte [ ] sig ;", "if ( encoded != null ) throw new Signature Exception ( STR_ ) ;", "this . subject = subject ;", "scratch = new Der Output Stream ( ) ;", "scratch . put Integer ( Big Integer . ZERO ) ;", "subject . encode ( scratch ) ;", "scratch . write ( subject Public Key Info . get Encoded ( ) ) ;", "attribute Set . encode ( scratch ) ;", "out = new Der Output Stream ( ) ;", "out . write ( Der Value . tag Sequence , scratch ) ;", "certificate Request Info = out . to Byte Array ( ) ;", "scratch = out ;", "signature . update ( certificate Request Info , NUM_ , certificate Request Info . length ) ;", "sig = signature . sign ( ) ;", "Algorithm Id alg Id = null ;", "try {", "alg Id = Algorithm Id . get ( signature . get Algorithm ( ) ) ; }", "catch ( No Such Algorithm Exception nsae ) {", "throw new Signature Exception ( nsae ) ; }", "alg Id . encode ( scratch ) ;", "scratch . put Bit String ( sig ) ;", "out = new Der Output Stream ( ) ;", "out . write ( Der Value . tag Sequence , scratch ) ;", "encoded = out . to Byte Array ( ) ; }"]}
{"ids": "35913", "code": ["public synchronized void schedule Periodic Task ( Timer Task task , long period ) {", "try {", "m timer . schedule At Fixed Rate ( task , NUM_ , period ) ; }", "catch ( Illegal State Exception ie ) {", "m timer = new Timer ( ) ;", "m timer . schedule At Fixed Rate ( task , NUM_ , period ) ; } }"]}
{"ids": "72451", "code": ["protected void check Row Index ( final int row ) throws Math Illegal Argument Exception {", "if ( row < NUM_ || row >= get Row Dimension ( ) ) {", "throw new Math Illegal Argument Exception ( Localized Core Formats . ROW INDEX , row , NUM_ , get Row Dimension ( ) - NUM_ ) ; } }"]}
{"ids": "50427", "code": ["public Name join ( String identifier ) {", "validate Lower Underscore ( identifier ) ;", "List < Name Piece > new Piece List = new Array List < > ( ) ;", "new Piece List . add All ( name Pieces ) ;", "new Piece List . add ( new Name Piece ( identifier , Case Format . LOWER UNDERSCORE ) ) ;", "return new Name ( new Piece List ) ; }"]}
{"ids": "69990", "code": ["private Local Date Time parse Date ( String date Str , boolean try Again ) {", "Local Date Time date = Local Date Time . now ( Zone Id . of ( STR_ ) ) ;", "if ( m Date Time Formatter == null ) {", "init Formatter ( date Str ) ; }", "if ( m Date Time Formatter != null ) {", "try {", "date = Local Date Time . parse ( date Str , m Date Time Formatter ) ; }", "catch ( Date Time Parse Exception e ) {", "Timber . d ( String . format ( STR_ , date Str ) ) ;", "if ( try Again ) {", "Timber . d ( STR_ ) ;", "m Date Time Formatter = null ;", "parse Date ( date Str , false ) ; } } }", "return date ; }"]}
{"ids": "54153", "code": ["public void remove ( Request Filter filter ) {", "filters . remove ( filter ) ; }"]}
{"ids": "75658", "code": ["protected void remove Classifiers ( int [ ] indices ) {", "int i ;", "if ( indices == null ) {", "m Model Classifiers . remove All Elements ( ) ; }", "else {", "for ( i = indices . length - NUM_ ; i >= NUM_ ; i -- ) m Model Classifiers . remove ( indices [ i ] ) ; }", "set Modified ( true ) ; }"]}
{"ids": "66115", "code": ["public void add Element ( Object an Object ) {", "p data . add ( an Object ) ;", "fire Interval Added ( this , p data . size ( ) - NUM_ , p data . size ( ) - NUM_ ) ;", "if ( p data . size ( ) == NUM_ && m selected Object == null && an Object != null ) set Selected Item ( an Object ) ; }"]}
{"ids": "21034", "code": ["public void add Assigned Virtual Arrays ( Set < String > virtual Array UR Is ) {", "if ( ( virtual Array UR Is != null ) && ( ! virtual Array UR Is . is Empty ( ) ) ) {", "Hash Set < String > add Virtual Arrays = new Hash Set < String > ( ) ;", "add Virtual Arrays . add All ( virtual Array UR Is ) ;", "if ( assigned Virtual Arrays == null ) {", "set Assigned Virtual Arrays ( new String Set ( ) ) ;", "assigned Virtual Arrays . add All ( add Virtual Arrays ) ; }", "else {", "assigned Virtual Arrays . add All ( add Virtual Arrays ) ; }", "update Virtual Array Tags ( ) ; } }"]}
{"ids": "69712", "code": ["private boolean drop In Trash ( ) {", "if ( m Highlighted Block View != null ) {", "m Highlighted Block View . set Highlighted Connection ( null ) ;", "m Highlighted Block View = null ; }", "m Dragged Connections . clear ( ) ;", "return m Controller . trash Root Block ( m Pending Drag . get Root Dragged Block ( ) ) ; }"]}
{"ids": "8549", "code": ["< T > List < T > concat Values ( final T [ ] ... data ) {", "final List < T > rv = new Array List < > ( ) ;", "for ( T [ ] values : data ) {", "rv . add All ( Arrays . as List ( values ) ) ; }", "return rv ; }"]}
{"ids": "52173", "code": ["public Dag Iterator ( Graph pattern ) {", "for ( Edge edge : pattern . get Edges ( ) ) {", "if ( Edges . is Directed Edge ( edge ) || Edges . is Undirected Edge ( edge ) ) {", "continue ; }", "throw new Illegal Argument Exception ( STR_ + STR_ + edge ) ; }", "decorated Graphs . add ( new Decorated Graph ( pattern ) ) ; }"]}
{"ids": "64361", "code": ["private boolean validate Custom Catalog ( String title , String value ) {", "return false ; }"]}
{"ids": "24037", "code": ["public Function Execution Pooled Executor ( Blocking Queue < Runnable > q , int pool Size , Pool Stat Helper stats , Thread Factory tf ) {", "this ( q , pool Size , stats , tf , Integer . get Integer ( Distribution Config . GEMFIRE PREFIX + STR_ , NUM_ * NUM_ ) , false ) ; }"]}
{"ids": "31479", "code": ["protected boolean is SSDP Discovery ( String body ) {", "if ( body != null && body . starts With ( STR_ ) && body . contains ( STR_ ) ) {", "return true ; }", "return false ; }"]}
{"ids": "51642", "code": ["@ Override public void add Child ( WX Component child , int index ) {", "if ( child == null || index < - NUM_ ) {", "return ; }", "if ( child instanceof WX Base Refresh ) {", "if ( ! check Refresh Or Loading ( child ) ) {", "m Refreshs . add ( child ) ; }", "return ; }", "if ( m Children == null ) {", "m Children = new Array List < > ( ) ; }", "int count = m Children . size ( ) ;", "index = index >= count ? - NUM_ : index ;", "if ( index == - NUM_ ) {", "m Children . add ( child ) ; }", "else {", "m Children . add ( index , child ) ; } }"]}
{"ids": "46343", "code": ["private void restore Sorting Selection ( int [ ] selection , int lead , Model Change change ) {", "for ( int i = selection . length - NUM_ ; i >= NUM_ ; i -- ) {", "selection [ i ] = convert Row Index To View ( selection [ i ] , change ) ; }", "lead = convert Row Index To View ( lead , change ) ;", "if ( selection . length == NUM_ || ( selection . length == NUM_ && selection [ NUM_ ] == get Selected Row ( ) ) ) {", "return ; }", "selection Model . set Value Is Adjusting ( true ) ;", "selection Model . clear Selection ( ) ;", "for ( int i = selection . length - NUM_ ; i >= NUM_ ; i -- ) {", "if ( selection [ i ] != - NUM_ ) {", "selection Model . add Selection Interval ( selection [ i ] , selection [ i ] ) ; } }", "Swing Utilities 2 . set Lead Anchor Without Selection ( selection Model , lead , lead ) ;", "selection Model . set Value Is Adjusting ( false ) ; }"]}
{"ids": "71286", "code": ["@ After public void clean ( ) {", "mute ( null ) ;", "mute ( null ) ;", "mute ( null ) ; }"]}
{"ids": "54121", "code": ["public void consume ( int event Count , long timeout In Millis , Predicate < Event > condition ) throws Timeout Exception {", "if ( event Count < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( event Count == NUM_ ) return ;", "int events Remaining = event Count ;", "final long stop Time = System . current Time Millis ( ) + timeout In Millis ;", "while ( events Remaining > NUM_ && System . current Time Millis ( ) < stop Time ) {", "Event next Event = queue . poll ( ) ;", "if ( next Event != null ) {", "if ( condition . test ( next Event ) ) {", "-- events Remaining ;", "consumed Events . accept ( next Event ) ; }", "else {", "ignored Events . accept ( next Event ) ; } } }", "if ( events Remaining > NUM_ ) {", "throw new Timeout Exception ( STR_ + ( event Count - events Remaining ) + STR_ + event Count + STR_ + timeout In Millis + STR_ ) ; } }"]}
{"ids": "78082", "code": ["private void update Ui From Command ( Command command ) {", "if ( command == null ) {", "return ; }", "actions Combo Box . set Text ( command . get Action ( ) ) ;", "data Text Field . set Text ( command . get Data ( ) ) ;", "category Text Field . set Text ( command . get Category ( ) ) ;", "mime Text Field . set Text ( command . get Mime Type ( ) ) ;", "component Text Field . set Text ( command . get Component ( ) ) ;", "user Text Field . set Text ( command . get User ( ) ) ;", "flags List . remove Selection Interval ( NUM_ , flags List . get Items Count ( ) ) ;", "List < Intent Flags > flags = command . get Flags ( ) ;", "if ( flags != null && flags . size ( ) > NUM_ ) {", "for ( Intent Flags flag : command . get Flags ( ) ) {", "flags List . set Selected Value ( flag , false ) ; } }", "else {", "flags List . set Selected Index ( NUM_ ) ; }", "update Flags Text Field ( ) ;", "table Model . remove All Rows ( ) ;", "List < Extra Field > extras = command . get Extras ( ) ;", "if ( extras != null && extras . size ( ) > NUM_ ) {", "for ( Extra Field extra : extras ) {", "table Model . add Row ( extra ) ; } }", "update Table Visibility ( ) ; }"]}
{"ids": "80078", "code": ["public static int rand Gaussian ( final int mean , final int sd ) {", "return ( int ) ( rand . next Gaussian ( ) * sd + mean ) ; }"]}
{"ids": "31952", "code": ["public static Ignite Logger logger ( Grid Kernal Context ctx , Atomic Reference < Ignite Logger > log Ref , Object obj ) {", "Ignite Logger log = log Ref . get ( ) ;", "if ( log == null ) {", "log Ref . compare And Set ( null , ctx . log ( obj . get Class ( ) ) ) ;", "log = log Ref . get ( ) ; }", "return log ; }"]}
{"ids": "73920", "code": ["protected boolean read Receive Delay ( ) {", "try {", "receive Delay = Integer . parse Int ( receive Delay Field . get Text ( ) ) ; }", "catch ( Exception e ) {", "status Text 1 . set Text ( rb . get String ( STR_ ) ) ;", "status Text 1 . set Visible ( true ) ;", "receive Delay = NUM_ ;", "error In Status 1 = true ;", "reset Notes 2 ( ) ;", "return ( false ) ; }", "if ( receive Delay < NUM_ ) {", "status Text 1 . set Text ( rb . get String ( STR_ ) ) ;", "status Text 1 . set Visible ( true ) ;", "receive Delay = NUM_ ;", "error In Status 1 = true ;", "reset Notes 2 ( ) ;", "return ( false ) ; }", "if ( receive Delay > NUM_ ) {", "status Text 1 . set Text ( rb . get String ( STR_ ) ) ;", "status Text 1 . set Visible ( true ) ;", "receive Delay = NUM_ ;", "error In Status 1 = true ;", "reset Notes 2 ( ) ;", "return ( false ) ; }", "return true ; }"]}
{"ids": "85099", "code": ["private void write Indent ( int times ) throws IO Exception {", "for ( int i = options . get Base Indent ( ) + times ; i > NUM_ ; i -- ) {", "writer . write ( options . get Indent ( ) ) ; } }"]}
{"ids": "7323", "code": ["public static int parse String ( String value ) {", "return Integer . parse Int ( value ) ; }"]}
{"ids": "49211", "code": ["void do Handle Java Mouse Event ( Mouse Event mouse Event ) {", "if ( ! X Toolkit . is Left Mouse Button ( mouse Event ) && ! X Toolkit . is Right Mouse Button ( mouse Event ) ) {", "return ; }", "X Base Window grab Window = X Awt State . get Grab Window ( ) ;", "Point pt Global = mouse Event . get Location On Screen ( ) ;", "if ( ! has Pointer Moved ) {", "if ( grab Input Point == null || ( Math . abs ( pt Global . x - grab Input Point . x ) > get Mouse Movement Smudge ( ) ) || ( Math . abs ( pt Global . y - grab Input Point . y ) > get Mouse Movement Smudge ( ) ) ) {", "has Pointer Moved = true ; } }", "X Base Menu Window wnd = get Menu Window From Point ( pt Global ) ;", "X Menu Item Peer item = ( wnd != null ) ? wnd . get Item From Point ( wnd . to Local ( pt Global ) ) : null ;", "X Base Menu Window cwnd = get Showing Leaf ( ) ;", "switch ( mouse Event . get ID ( ) ) {", "case Mouse Event . MOUSE PRESSED :", "showing Mouse Pressed Submenu = null ;", "if ( ( grab Window == this ) && ( wnd == null ) ) {", "ungrab Input ( ) ; }", "else {", "grab Input ( ) ;", "if ( item != null && ! item . is Separator ( ) && item . is Target Item Enabled ( ) ) {", "if ( wnd . get Showing Submenu ( ) == item ) {", "showing Mouse Pressed Submenu = ( X Menu Peer ) item ; }", "wnd . select Item ( item , true ) ; }", "else {", "if ( wnd != null ) {", "wnd . select Item ( null , false ) ; } } }", "break ;", "case Mouse Event . MOUSE RELEASED :", "if ( item != null && ! item . is Separator ( ) && item . is Target Item Enabled ( ) ) {", "if ( item instanceof X Menu Peer ) {", "if ( showing Mouse Pressed Submenu == item ) {", "if ( wnd instanceof X Menu Bar Peer ) {", "ungrab Input ( ) ; }", "else {", "wnd . select Item ( item , false ) ; } } }", "else {", "item . action ( mouse Event . get When ( ) ) ;", "ungrab Input ( ) ; } }", "else {", "if ( has Pointer Moved || ( wnd instanceof X Menu Bar Peer ) ) {", "ungrab Input ( ) ; } }", "showing Mouse Pressed Submenu = null ;", "break ;", "case Mouse Event . MOUSE DRAGGED :", "if ( wnd != null ) {", "if ( item != null && ! item . is Separator ( ) && item . is Target Item Enabled ( ) ) {", "if ( grab Window == this ) {", "wnd . select Item ( item , true ) ; } }", "else {", "wnd . select Item ( null , false ) ; } }", "else {", "if ( cwnd != null ) {", "cwnd . select Item ( null , false ) ; } }", "break ; } }"]}
{"ids": "33047", "code": ["public boolean is Invalid Node ( ) {", "AST Node first = f Nodes . get ( NUM_ ) ;", "AST Node candidate = first . get Parent ( ) ;", "if ( candidate == null ) return false ;", "if ( candidate . get Node Type ( ) == AST Node . METHOD DECLARATION ) return true ;", "return false ; }"]}
{"ids": "38721", "code": ["public synchronized void remove Batch Clusterer Listener ( Batch Clusterer Listener cl ) {", "m batch Clusterer Listeners . remove ( cl ) ; }"]}
{"ids": "26011", "code": ["void remove Known Object ( Parse Object object ) {", "synchronized ( mutex ) {", "known Objects . remove ( object ) ; } }"]}
{"ids": "72702", "code": ["static Heap Bytes Store < byte [ ] > wrap ( @ Not Null byte [ ] bytes ) {", "return Heap Bytes Store . wrap ( bytes ) ; }"]}
{"ids": "76478", "code": ["private static String parse ( Json Value base ) {", "if ( ! base . is String ( ) ) {", "return null ; }", "return build String ( base . as String ( ) ) ; }"]}
{"ids": "31867", "code": ["private void grow Entries ( ) {", "int new Len = ( next . length << NUM_ ) + NUM_ ;", "int [ ] new Next = new int [ new Len ] ;", "Grid Unsafe . copy Memory ( next , INT ARR OFF , new Next , INT ARR OFF , size << NUM_ ) ;", "next = new Next ;", "next Empty = new int [ new Len ] ;", "Arrays . fill ( next Empty , - NUM_ ) ;", "Object [ ] new Objs = new Object [ new Len ] ;", "System . arraycopy ( objs , NUM_ , new Objs , NUM_ , size ) ;", "objs = new Objs ; }"]}
{"ids": "14789", "code": ["private void clear ( ) {", "valid = false ;", "if ( ( listener Objects == null ) || listener Objects . is Empty ( ) ) {", "deregister Listener ( ) ; }", "ssm = null ;", "if ( SMS Entry . cache SMS Entries ) {", "org Configs . clear ( ) ;", "global Configs . clear ( ) ; } }"]}
{"ids": "42524", "code": ["public static void register Decayable Object ( Decayable obj ) {", "decay Objects . add ( obj ) ; }"]}
{"ids": "35431", "code": ["public static void assert Expected Output Contains ( String expected String , String x ) {", "if ( ! x . contains ( expected String ) ) {", "fail ( STR_ + expected String + STR_ + x + STR_ ) ; } }"]}
{"ids": "39318", "code": ["public boolean remove ( String classname ) {", "String pkgname ;", "Hash Set < String > names ;", "classname = clean Up ( classname ) ;", "pkgname = extract Package ( classname ) ;", "names = m Cache . get ( pkgname ) ;", "if ( names != null ) {", "return names . remove ( classname ) ; }", "else {", "return false ; } }"]}
{"ids": "8093", "code": ["static boolean is Assignable To ( Class Node type , Class Node to Be Assigned To ) {", "if ( UNKNOWN PARAMETER TYPE == type ) return true ;", "if ( type == to Be Assigned To ) return true ;", "if ( to Be Assigned To . redirect ( ) == STRING TYPE && type . redirect ( ) == GSTRING TYPE ) {", "return true ; }", "if ( is Primitive Type ( to Be Assigned To ) ) to Be Assigned To = get Wrapper ( to Be Assigned To ) ;", "if ( is Primitive Type ( type ) ) type = get Wrapper ( type ) ;", "if ( Double TYPE == to Be Assigned To ) {", "return type . is Derived From ( Number TYPE ) ; }", "if ( Float TYPE == to Be Assigned To ) {", "return type . is Derived From ( Number TYPE ) && Double TYPE != type . redirect ( ) ; }", "if ( Long TYPE == to Be Assigned To ) {", "return type . is Derived From ( Number TYPE ) && Double TYPE != type . redirect ( ) && Float TYPE != type . redirect ( ) ; }", "if ( Integer TYPE == to Be Assigned To ) {", "return type . is Derived From ( Number TYPE ) && Double TYPE != type . redirect ( ) && Float TYPE != type . redirect ( ) && Long TYPE != type . redirect ( ) ; }", "if ( Short TYPE == to Be Assigned To ) {", "return type . is Derived From ( Number TYPE ) && Double TYPE != type . redirect ( ) && Float TYPE != type . redirect ( ) && Long TYPE != type . redirect ( ) && Integer TYPE != type . redirect ( ) ; }", "if ( Byte TYPE == to Be Assigned To ) {", "return type . redirect ( ) == Byte TYPE ; }", "if ( type . is Array ( ) && to Be Assigned To . is Array ( ) ) {", "return is Assignable To ( type . get Component Type ( ) , to Be Assigned To . get Component Type ( ) ) ; }", "if ( type . is Derived From ( GSTRING TYPE ) && STRING TYPE . equals ( to Be Assigned To ) ) {", "return true ; }", "if ( to Be Assigned To . is Derived From ( GSTRING TYPE ) && STRING TYPE . equals ( type ) ) {", "return true ; }", "if ( implements Interface Or Is Subclass Of ( type , to Be Assigned To ) ) {", "if ( OBJECT TYPE . equals ( to Be Assigned To ) ) return true ;", "if ( to Be Assigned To . is Using Generics ( ) ) {", "Generics Type gt = Generics Utils . build Wildcard Type ( to Be Assigned To ) ;", "return gt . is Compatible With ( type ) ; }", "return true ; }", "if ( type . is Derived From ( CLOSURE TYPE ) && is SAM Type ( to Be Assigned To ) ) {", "return true ; }", "return false ; }"]}
{"ids": "56394", "code": ["public synchronized int total Recover Files ( ) {", "int total = NUM_ ;", "for ( File file : file Details . values ( ) ) {", "if ( file . reused ( ) == false ) {", "total ++ ; } }", "return total ; }"]}
{"ids": "67199", "code": ["@ Override @ Timed public void delete Assignment ( Experiment experiment , User . ID user ID , Context context , Application . Name app Name , Assignment current Assignment ) {", "delete User From Look Up ( experiment . get ID ( ) , user ID , context ) ;", "boolean count Up = false ;", "assignments Count Executor . execute ( new Assignment Count Envelope ( assignments Repository , experiment Repository , db Repository , experiment , current Assignment , count Up , event Log , null , assign User To Export , assign Bucket Count ) ) ;", "delete Assignment Old ( experiment . get ID ( ) , user ID , context , app Name , current Assignment . get Bucket Label ( ) ) ;", "remove Index User To Experiment ( user ID , experiment . get ID ( ) , context , app Name ) ;", "remove Index User To Bucket ( user ID , experiment . get ID ( ) , context , current Assignment . get Bucket Label ( ) ) ;", "remove Index Experiments To User ( user ID , experiment . get ID ( ) , context , app Name ) ; }"]}
{"ids": "3813", "code": ["public static Thread Dump create ( ) {", "Thread Dump thread Dump = thread Dump Ref . get ( ) ;", "if ( thread Dump == null ) {", "thread Dump = new Thread Dump Pro ( ) ;", "thread Dump Ref . compare And Set ( null , thread Dump ) ;", "thread Dump = thread Dump Ref . get ( ) ; }", "return thread Dump ; }"]}
{"ids": "64764", "code": ["private void check Start ( ) {", "if ( m Can Process Audio && ! m Output . is Running ( ) && m Output . available ( ) <= m Buffer Start Threshold ) {", "m Output . start ( ) ; } }"]}
{"ids": "75011", "code": ["protected boolean matches Filter ( final String input , final String [ ] filter ) {", "for ( final String match : filter ) {", "if ( ! input . contains ( match ) ) return false ; }", "return true ; }"]}
{"ids": "84992", "code": ["public I Status run ( I Progress Monitor monitor ) {", "Input Stream input = null ;", "File Output Stream output = null ;", "I Status job Status = Status . OK STATUS ;", "byte [ ] b = new byte [ NUM_ ] ;", "int bytes Read ;", "try {", "Http URL Connection connection = ( Http URL Connection ) url . open Connection ( ) ;", "input = url . open Stream ( ) ;", "long total Bytes Read = NUM_ ;", "int response Status Code = connection . get Response Code ( ) ;", "if ( response Status Code >= Http URL Connection . HTTP BAD REQUEST ) {", "job Status = new Status ( Status . ERROR , Core Plugin . PLUGIN ID , Message Format . format ( STR_ , response Status Code , connection . get Response Message ( ) ) ) ; }", "long content Length = connection . get Content Length ( ) ;", "output = new File Output Stream ( target ) ;", "monitor . begin Task ( STR_ + url . to String ( ) , ( int ) content Length ) ;", "while ( job Status == Status . OK STATUS ) {", "if ( content Length > NUM_ && total Bytes Read >= content Length ) {", "break ; }", "bytes Read = input . read ( b ) ;", "if ( bytes Read == - NUM_ ) {", "break ; }", "output . write ( b , NUM_ , bytes Read ) ;", "total Bytes Read += bytes Read ;", "monitor . worked ( bytes Read ) ;", "if ( monitor . is Canceled ( ) ) {", "job Status = Status . CANCEL STATUS ;", "break ; } } }", "catch ( Malformed URL Exception e ) {", "job Status = new Status ( Status . ERROR , Core Plugin . PLUGIN ID , STR_ + url . to External Form ( ) , e ) ; }", "catch ( IO Exception e ) {", "job Status = new Status ( Status . ERROR , Core Plugin . PLUGIN ID , STR_ + url . to External Form ( ) , e ) ; }", "close Streams ( input , output ) ;", "return job Status ; }"]}
{"ids": "66035", "code": ["private void create Missing Values ( ) {", "String sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ;", "Prepared Statement pstmt = null ;", "try {", "pstmt = DB . prepare Statement ( sql , get Trx Name ( ) ) ;", "pstmt . set Int ( NUM_ , get A Registration ID ( ) ) ;", "Result Set rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) ) {", "M Registration Value v = new M Registration Value ( this , rs . get Int ( NUM_ ) , STR_ ) ;", "v . save Ex ( ) ; }", "rs . close ( ) ;", "pstmt . close ( ) ;", "pstmt = null ; }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , null , e ) ; }", "try {", "if ( pstmt != null ) pstmt . close ( ) ;", "pstmt = null ; }", "catch ( Exception e ) {", "pstmt = null ; } }"]}
{"ids": "34254", "code": ["private static String normalise Path ( String path ) {", "return path . replace ( STR_ , STR_ ) ; }"]}
{"ids": "54775", "code": ["public void start Launch Notifier ( ) {", "if ( m launch Notification == null ) throw new Null Pointer Exception ( ) ;", "m launch Notifier Thread . set Daemon ( true ) ;", "m launch Notifier Thread . start ( ) ; }"]}
{"ids": "49128", "code": ["private static void encode ( List < Acl Entry > acl , long address ) {", "long offset = address ;", "for ( Acl Entry ace : acl ) {", "int flags = NUM_ ;", "User Principal who = ace . principal ( ) ;", "if ( ! ( who instanceof Unix User Principals . User ) ) throw new Provider Mismatch Exception ( ) ;", "Unix User Principals . User user = ( Unix User Principals . User ) who ;", "int uid ;", "if ( user . is Special ( ) ) {", "uid = - NUM_ ;", "if ( who == Unix User Principals . SPECIAL OWNER ) flags |= ACE OWNER ;", "else if ( who == Unix User Principals . SPECIAL GROUP ) flags |= ( ACE GROUP | ACE IDENTIFIER GROUP ) ;", "else if ( who == Unix User Principals . SPECIAL EVERYONE ) flags |= ACE EVERYONE ;", "else throw new Assertion Error ( STR_ ) ; }", "else {", "if ( user instanceof Unix User Principals . Group ) {", "uid = user . gid ( ) ;", "flags |= ACE IDENTIFIER GROUP ; }", "else {", "uid = user . uid ( ) ; } }", "int type ;", "switch ( ace . type ( ) ) {", "case ALLOW :", "type = ACE ACCESS ALLOWED ACE TYPE ;", "break ;", "case DENY :", "type = ACE ACCESS DENIED ACE TYPE ;", "break ;", "case AUDIT :", "type = ACE SYSTEM AUDIT ACE TYPE ;", "break ;", "case ALARM :", "type = ACE SYSTEM ALARM ACE TYPE ;", "break ;", "default :", "throw new Assertion Error ( STR_ ) ; }", "Set < Acl Entry Permission > ace Mask = ace . permissions ( ) ;", "int mask = NUM_ ;", "if ( ace Mask . contains ( Acl Entry Permission . READ DATA ) ) mask |= ACE READ DATA ;", "if ( ace Mask . contains ( Acl Entry Permission . WRITE DATA ) ) mask |= ACE WRITE DATA ;", "if ( ace Mask . contains ( Acl Entry Permission . APPEND DATA ) ) mask |= ACE APPEND DATA ;", "if ( ace Mask . contains ( Acl Entry Permission . READ NAMED ATTRS ) ) mask |= ACE READ NAMED ATTRS ;", "if ( ace Mask . contains ( Acl Entry Permission . WRITE NAMED ATTRS ) ) mask |= ACE WRITE NAMED ATTRS ;", "if ( ace Mask . contains ( Acl Entry Permission . EXECUTE ) ) mask |= ACE EXECUTE ;", "if ( ace Mask . contains ( Acl Entry Permission . DELETE CHILD ) ) mask |= ACE DELETE CHILD ;", "if ( ace Mask . contains ( Acl Entry Permission . READ ATTRIBUTES ) ) mask |= ACE READ ATTRIBUTES ;", "if ( ace Mask . contains ( Acl Entry Permission . WRITE ATTRIBUTES ) ) mask |= ACE WRITE ATTRIBUTES ;", "if ( ace Mask . contains ( Acl Entry Permission . DELETE ) ) mask |= ACE DELETE ;", "if ( ace Mask . contains ( Acl Entry Permission . READ ACL ) ) mask |= ACE READ ACL ;", "if ( ace Mask . contains ( Acl Entry Permission . WRITE ACL ) ) mask |= ACE WRITE ACL ;", "if ( ace Mask . contains ( Acl Entry Permission . WRITE OWNER ) ) mask |= ACE WRITE OWNER ;", "if ( ace Mask . contains ( Acl Entry Permission . SYNCHRONIZE ) ) mask |= ACE SYNCHRONIZE ;", "Set < Acl Entry Flag > ace Flags = ace . flags ( ) ;", "if ( ace Flags . contains ( Acl Entry Flag . FILE INHERIT ) ) flags |= ACE FILE INHERIT ACE ;", "if ( ace Flags . contains ( Acl Entry Flag . DIRECTORY INHERIT ) ) flags |= ACE DIRECTORY INHERIT ACE ;", "if ( ace Flags . contains ( Acl Entry Flag . NO PROPAGATE INHERIT ) ) flags |= ACE NO PROPAGATE INHERIT ACE ;", "if ( ace Flags . contains ( Acl Entry Flag . INHERIT ONLY ) ) flags |= ACE INHERIT ONLY ACE ;", "unsafe . put Int ( offset + OFFSETOF UID , uid ) ;", "unsafe . put Int ( offset + OFFSETOF MASK , mask ) ;", "unsafe . put Short ( offset + OFFSETOF FLAGS , ( short ) flags ) ;", "unsafe . put Short ( offset + OFFSETOF TYPE , ( short ) type ) ;", "offset += SIZEOF ACE T ; } }"]}
{"ids": "64475", "code": ["public static String expand Hidden Dir ( final String filename ) {", "final int macro = filename . index Of ( hidden Dir Macro , NUM_ ) ;", "String expanded Filter ;", "if ( macro == - NUM_ ) {", "return filename ; }", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ ) ; }", "expanded Filter = filename . replace First ( STR_ , String Utils . chomp ( Path . hidden ( ) , STR_ ) ) ;", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ + expanded Filter ) ; }", "return expanded Filter ; }"]}
{"ids": "74883", "code": ["public void update Value ( final Object value , final boolean is Selected , boolean sync ) {", "if ( is Read Only ( ) ) {", "return ; }", "if ( Generic Form Factory . is Text Form ( form Type ) ) {", "text String = ( String ) value ;", "if ( text String != null && text String . equals ( last Text String ) ) {", "sync = false ; }", "last Text String = text String ; }", "else {", "text String = ( String ) value ;", "this . is Selected = is Selected ;", "if ( is Selected != last Is Selected && last Text String != null && text String != null && text String . equals ( last Text String ) ) {", "sync = false ; }", "last Text String = text String ;", "last Is Selected = is Selected ; }", "if ( ( sync && gui Type != Form Factory . ULC ) && gui Comp != null ) {", "sync GUI ( value ) ; } }"]}
{"ids": "79055", "code": ["public boolean has Next ( ) throws IO Exception {", "data Input Stream . mark ( NUM_ ) ;", "int val = data Input Stream . read ( ) ;", "data Input Stream . reset ( ) ;", "return val != - NUM_ ; }"]}
{"ids": "19725", "code": ["public void complete Heartbeat ( Database database , long seqno , String event Id ) throws SQL Exception {", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ ) ;", "Statement st = null ;", "Result Set rs = null ;", "Timestamp sts = new Timestamp ( NUM_ ) ;", "Timestamp now = new Timestamp ( System . current Time Millis ( ) ) ;", "Array List < Column > where Clause = new Array List < Column > ( ) ;", "Array List < Column > values = new Array List < Column > ( ) ;", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ + now ) ;", "try {", "st = database . create Statement ( ) ;", "rs = st . execute Query ( source Ts Query ) ;", "if ( rs . next ( ) ) sts = rs . get Timestamp ( NUM_ ) ; }", "finally {", "if ( rs != null ) {", "try {", "rs . close ( ) ; }", "catch ( SQL Exception e ) { } }", "if ( st != null ) {", "try {", "st . close ( ) ; }", "catch ( SQL Exception e ) { } } }", "long lag millis = now . get Time ( ) - sts . get Time ( ) ;", "hb Id . set Value ( KEY ) ;", "where Clause . add ( hb Id ) ;", "hb Seqno . set Value ( seqno ) ;", "hb Event Id . set Value ( event Id ) ;", "hb Target Tstamp . set Value ( now ) ;", "hb Lag Millis . set Value ( lag millis ) ;", "values . add ( hb Seqno ) ;", "values . add ( hb Event Id ) ;", "values . add ( hb Target Tstamp ) ;", "values . add ( hb Lag Millis ) ;", "database . update ( hb Table , where Clause , values ) ; }"]}
{"ids": "15993", "code": ["public Cipher Parameters decrypt ( byte [ ] in , int in Off , int in Len , int key Len ) throws Illegal Argument Exception {", "if ( ! key . is Private ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Big Integer n = key . get Modulus ( ) ;", "Big Integer d = key . get Exponent ( ) ;", "byte [ ] C = new byte [ in Len ] ;", "System . arraycopy ( in , in Off , C , NUM_ , C . length ) ;", "Big Integer c = new Big Integer ( NUM_ , C ) ;", "Big Integer r = c . mod Pow ( d , n ) ;", "return generate Key ( n , r , key Len ) ; }"]}
{"ids": "78644", "code": ["public Private Key load Private Key ( ) throws Exception {", "if ( default Keys ) {", "return get Private Key From String ( RSA Key Loader . DEFAULT PKEY ) ; }", "if ( pri Key == null ) {", "File Reader f = new File Reader ( path + STR_ + this . id ) ;", "Buffered Reader r = new Buffered Reader ( f ) ;", "String tmp = STR_ ;", "String key = STR_ ;", "while ( ( tmp = r . read Line ( ) ) != null ) {", "key = key + tmp ; }", "f . close ( ) ;", "r . close ( ) ;", "pri Key = get Private Key From String ( key ) ; }", "return pri Key ; }"]}
{"ids": "17069", "code": ["public void remove Categories Listener ( Snapshot Categories Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "16496", "code": ["private Integer z Get Week Number For A Seven Day Range ( Local Date first Date In Range , Week Fields week Field Rules , boolean require Unanimous Week Number ) {", "Array List < Integer > week Numbers List = new Array List < Integer > ( ) ;", "for ( int days Into The Future = NUM_ ; days Into The Future <= NUM_ ; ++ days Into The Future ) {", "Local Date current Date In Range ;", "try {", "current Date In Range = first Date In Range . plus Days ( days Into The Future ) ;", "int current Week Number = current Date In Range . get ( week Field Rules . week Of Week Based Year ( ) ) ;", "week Numbers List . add ( current Week Number ) ; }", "catch ( Exception ex ) {", "return NUM_ ; } }", "boolean is Unanimous = ( Internal Utilities . are Objects Equal ( week Numbers List . get ( NUM_ ) , week Numbers List . get ( NUM_ ) ) ) ;", "if ( is Unanimous ) {", "return week Numbers List . get ( NUM_ ) ; }", "if ( require Unanimous Week Number ) {", "return null ; }", "int most Common Week Number = Internal Utilities . get Most Common Element In List ( week Numbers List ) ;", "return most Common Week Number ; }"]}
{"ids": "80956", "code": ["private boolean is Not In Array ( String str , String [ ] array ) {", "for ( int i = NUM_ ; i < array . length ; i ++ ) {", "if ( str . equals ( array [ i ] ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "22124", "code": ["public void init ( ) throws Exception {", "load Parameter From ZK ( ) ;", "invalid Login Cleanup Executor . schedule With Fixed Delay ( new Invalid Login Cleaner ( ) , CLEANUP THREAD SCHEDULE INTERVAL IN MINS , CLEANUP THREAD SCHEDULE INTERVAL IN MINS , Time Unit . MINUTES ) ;", "log . info ( STR_ , max Authn Login Attemts Count ) ;", "log . info ( STR_ , max Authn Login Attemts Life Time In Mins ) ;", "log . info ( STR_ , CLEANUP THREAD SCHEDULE INTERVAL IN MINS ) ; }"]}
{"ids": "77512", "code": ["public List < String > make URL List ( String shard ) {", "List < String > urls = Str Utils . split Smart ( shard , STR_ , true ) ;", "for ( int i = NUM_ ; i < urls . size ( ) ; i ++ ) {", "urls . set ( i , build Url ( urls . get ( i ) ) ) ; }", "if ( urls . size ( ) > NUM_ ) Collections . shuffle ( urls , r ) ;", "return urls ; }"]}
{"ids": "44129", "code": ["private byte [ ] to ZLIB ( Rendered Image image , Color bkg , String color Model ) throws IO Exception {", "return Image Graphics 2 D . to Byte Array ( image , Image Constants . RAW , Image Constants . ENCODING FLATE ASCII 85 , Image Graphics 2 D . get RAW Properties ( bkg , color Model ) ) ; }"]}
{"ids": "35403", "code": ["public void add Vertex ( Object id ) throws Illegal Argument Exception {", "if ( initialized ) {", "throw new Illegal Argument Exception ( ) ; }", "Vertex vertex = new Vertex ( id ) ;", "Object existing = vertex Map . put ( id , vertex ) ;", "if ( existing != null ) {", "throw new Illegal Argument Exception ( ) ; }", "vertex List . add ( vertex ) ; }"]}
{"ids": "73824", "code": ["public void configure Local Services ( ) {", "client Memo . set Ln Traffic Controller ( this ) ;", "client Memo . configure Command Station ( Ln Command Station Type . COMMAND STATION DCS 100 , false , false ) ;", "client Memo . configure Managers ( ) ; }"]}
{"ids": "46537", "code": ["protected Size Requirements calculate Minor Axis Requirements ( int axis , Size Requirements r ) {", "update Grid ( ) ;", "calculate Column Requirements ( axis ) ;", "if ( r == null ) {", "r = new Size Requirements ( ) ; }", "long min = NUM_ ;", "long pref = NUM_ ;", "int n = column Requirements . length ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "Size Requirements req = column Requirements [ i ] ;", "min += req . minimum ;", "pref += req . preferred ; }", "int adjust = ( n + NUM_ ) * cell Spacing + NUM_ * border Width ;", "min += adjust ;", "pref += adjust ;", "r . minimum = ( int ) min ;", "r . preferred = ( int ) pref ;", "r . maximum = ( int ) pref ;", "Attribute Set attr = get Attributes ( ) ;", "CSS . Length Value css Width = ( CSS . Length Value ) attr . get Attribute ( CSS . Attribute . WIDTH ) ;", "if ( Block View . span Set From Attributes ( axis , r , css Width , null ) ) {", "if ( r . minimum < ( int ) min ) {", "r . maximum = r . minimum = r . preferred = ( int ) min ; } }", "total Column Requirements . minimum = r . minimum ;", "total Column Requirements . preferred = r . preferred ;", "total Column Requirements . maximum = r . maximum ;", "Object o = attr . get Attribute ( CSS . Attribute . TEXT ALIGN ) ;", "if ( o != null ) {", "String ta = o . to String ( ) ;", "if ( ta . equals ( STR_ ) ) {", "r . alignment = NUM_ ; }", "else if ( ta . equals ( STR_ ) ) {", "r . alignment = NUM_ ; }", "else if ( ta . equals ( STR_ ) ) {", "r . alignment = NUM_ ; }", "else {", "r . alignment = NUM_ ; } }", "else {", "r . alignment = NUM_ ; }", "return r ; }"]}
{"ids": "3974", "code": ["public void append ( String string ) {", "for ( int i = NUM_ ; i < string . length ( ) ; i ++ ) append ( string . char At ( i ) ) ; }"]}
{"ids": "29334", "code": ["public Listenable Future < String > push ( final String name , final Expression func ) {", "String let = String . format ( STR_ , name , func . to Haskell ( ) ) ;", "return pull Raw ( let ) ; }"]}
{"ids": "71634", "code": ["public Meta Data Column Descriptor ( String column Name , int jdbc Type , Object default Value ) {", "column Name = column Name . to Upper Case ( ) ;", "jdbc Type = jdbc Type ;", "default Value = default Value ; }"]}
{"ids": "52768", "code": ["private void bulk Load ( double [ ] lmin , double [ ] lmax , List < Node > children , Array Modifiable DBI Ds ids , int start , int end , int dim , int level , int code ) {", "if ( dim == NUM_ ) {", "DBID Array Iter iter = ids . iter ( ) ;", "iter . seek ( start ) ;", "Number Vector first = relation . get ( iter ) ;", "iter . advance ( ) ;", "boolean degenerate = true ;", "loop : for ( ; iter . get Offset ( ) < end ; iter . advance ( ) ) {", "Number Vector other = relation . get ( iter ) ;", "for ( int d = NUM_ ; d < lmin . length ; d ++ ) {", "if ( Math . abs ( first . double Value ( d ) - other . double Value ( d ) ) > NUM_ ) {", "degenerate = false ;", "break loop ; } } }", "if ( degenerate ) {", "double [ ] center = new double [ lmin . length ] ;", "for ( int d = NUM_ ; d < lmin . length ; d ++ ) {", "center [ d ] = lmin [ d ] * NUM_ + lmax [ d ] * NUM_ + shift [ d ] ;", "if ( center [ d ] > min [ d ] + width [ d ] ) {", "center [ d ] -= width [ d ] ; } }", "children . add ( new Node ( code , center , end - start , level , null ) ) ;", "return ; } }", "if ( dim == lmin . length ) {", "double [ ] center = new double [ lmin . length ] ;", "for ( int d = NUM_ ; d < lmin . length ; d ++ ) {", "center [ d ] = lmin [ d ] * NUM_ + lmax [ d ] * NUM_ + shift [ d ] ;", "if ( center [ d ] > min [ d ] + width [ d ] ) {", "center [ d ] -= width [ d ] ; } }", "if ( end - start < nmin ) {", "children . add ( new Node ( code , center , end - start , level , null ) ) ;", "return ; }", "else {", "List < Node > newchildren = new Array List < > ( ) ;", "bulk Load ( lmin , lmax , newchildren , ids , start , end , NUM_ , level + NUM_ , NUM_ ) ;", "children . add ( new Node ( code , center , end - start , level , newchildren ) ) ;", "return ; } }", "else {", "DBID Array Iter siter = ids . iter ( ) , eiter = ids . iter ( ) ;", "siter . seek ( start ) ;", "eiter . seek ( end - NUM_ ) ;", "while ( siter . get Offset ( ) < eiter . get Offset ( ) ) {", "if ( get Shifted Dim ( relation . get ( siter ) , dim , level ) <= NUM_ ) {", "siter . advance ( ) ;", "continue ; }", "if ( get Shifted Dim ( relation . get ( eiter ) , dim , level ) > NUM_ ) {", "eiter . retract ( ) ;", "continue ; }", "ids . swap ( siter . get Offset ( ) , eiter . get Offset ( ) - NUM_ ) ;", "siter . advance ( ) ;", "eiter . retract ( ) ; }", "final int spos = siter . get Offset ( ) ;", "if ( start < spos ) {", "final double tmp = lmax [ dim ] ;", "lmax [ dim ] = lmax [ dim ] * NUM_ + lmin [ dim ] * NUM_ ;", "bulk Load ( lmin , lmax , children , ids , start , spos , dim + NUM_ , level , code ) ;", "lmax [ dim ] = tmp ; }", "if ( spos < end ) {", "final double tmp = lmin [ dim ] ;", "lmin [ dim ] = lmax [ dim ] * NUM_ + lmin [ dim ] * NUM_ ;", "bulk Load ( lmin , lmax , children , ids , spos , end , dim + NUM_ , level , code | ( NUM_ << dim ) ) ;", "lmin [ dim ] = tmp ; } } }"]}
{"ids": "71987", "code": ["public Data Provider Event ( final Localizable Message reason , final Set < Type > types ) {", "Reject . if Null ( reason , types ) ;", "Reject . if True ( types . is Empty ( ) ) ;", "this . reason = reason ;", "final Enum Set < Type > tmp = Enum Set . none Of ( Type . class ) ;", "tmp . add All ( types ) ;", "this . types = Collections . unmodifiable Set ( tmp ) ; }"]}
{"ids": "57296", "code": ["public < T > List < String > validate Bean ( T bean , String err If Bean Null ) {", "List < String > errors = new Array List < String > ( ) ;", "if ( bean == null ) {", "errors . add ( err If Bean Null ) ;", "return errors ; }", "Set < Constraint Violation < T > > violations = validator . validate ( bean ) ;", "for ( Constraint Violation < T > violation : violations ) {", "errors . add ( violation . get Message ( ) ) ; }", "return errors ; }"]}
{"ids": "84947", "code": ["protected void smart Insert After Bracket ( I Document document , Document Command command ) {", "if ( command . offset == - NUM_ || document . get Length ( ) == NUM_ ) {", "return ; }", "try {", "int p = ( command . offset == document . get Length ( ) ? command . offset - NUM_ : command . offset ) ;", "int line = document . get Line Of Offset ( p ) ;", "int start = document . get Line Offset ( line ) ;", "int whiteend = find End Of White Space ( document , start , command . offset ) ;", "if ( whiteend == command . offset ) {", "int ind Line = find Matching Open Bracket ( document , line , command . offset , NUM_ ) ;", "if ( ind Line != - NUM_ && ind Line != line ) {", "String Buffer replace Text = new String Buffer ( get Indent Of Line ( document , ind Line ) ) ;", "replace Text . append ( document . get ( whiteend , command . offset - whiteend ) ) ;", "replace Text . append ( command . text ) ;", "command . length = command . offset - start ;", "command . offset = start ;", "command . text = replace Text . to String ( ) ; } } }", "catch ( Bad Location Exception e ) {", "GWT Plugin Log . log Error ( e ) ; } }"]}
{"ids": "10019", "code": ["private String attempt To Choose Formatting Pattern ( ) {", "if ( national Number . length ( ) >= MIN LEADING DIGITS LENGTH ) {", "get Available Formats ( national Number . to String ( ) ) ;", "String formatted Number = attempt To Format Accrued Digits ( ) ;", "if ( formatted Number . length ( ) > NUM_ ) {", "return formatted Number ; }", "return maybe Create New Template ( ) ? input Accrued National Number ( ) : accrued Input . to String ( ) ; }", "else {", "return append National Number ( national Number . to String ( ) ) ; } }"]}
{"ids": "36434", "code": ["private void print Annotation From Editor ( final Workflow Annotation anno , final Graphics 2 D g 2 ) {", "Graphics 2 D g Pr = ( Graphics 2 D ) g 2 . create ( ) ;", "Rectangle 2 D loc = anno . get Location ( ) ;", "g Pr . translate ( loc . get X ( ) , loc . get Y ( ) ) ;", "g Pr . set Clip ( NUM_ , NUM_ , ( int ) loc . get Width ( ) , ( int ) loc . get Height ( ) ) ;", "Dimension size = new Dimension ( ( int ) loc . get Width ( ) , ( int ) loc . get Height ( ) ) ;", "pane . set Size ( size ) ;", "pane . set Text ( Annotation Draw Utils . create Styled Comment String ( anno ) ) ;", "pane . set Caret Position ( NUM_ ) ;", "pane . paint ( g Pr ) ;", "g Pr . dispose ( ) ; }"]}
{"ids": "5520", "code": ["public void add ( I Point pt ) {", "if ( in Progress ) {", "throw new Concurrent Modification Exception ( STR_ ) ; }", "points . add ( pt ) ; }"]}
{"ids": "54020", "code": ["public static Configuration load ( Reader reader ) throws IO Exception {", "try {", "Properties properties = new Properties ( ) ;", "properties . load ( reader ) ;", "return from ( properties ) ; }", "finally {", "reader . close ( ) ; } }"]}
{"ids": "41121", "code": ["public void add ( Offsetted Item item ) {", "throw If Prepared ( ) ;", "try {", "if ( item . get Alignment ( ) > get Alignment ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; } }", "catch ( Null Pointer Exception ex ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "items . add ( item ) ; }"]}
{"ids": "36058", "code": ["public static void add Annotation To XML ( Element annotations Element , String name , String value ) {", "if ( value == null ) {", "delete Annotation From XML ( annotations Element , name ) ; }", "else {", "final Document doc = annotations Element . get Owner Document ( ) ;", "Element elem = doc . create Element ( STR_ ) ;", "annotations Element . append Child ( elem ) ;", "elem . set Attribute ( STR_ , name ) ;", "elem . set Text Content ( value ) ; } }"]}
{"ids": "51515", "code": ["public boolean read Boolean ( ) throws IO Exception {", "return primitive Types . read Boolean ( ) ; }"]}
{"ids": "82039", "code": ["public void start Ticker ( long delay , boolean right To Left ) {", "if ( ! ticker Enabled ) {", "return ; }", "if ( ! is Cell Renderer ( ) ) {", "Form parent = get Component Form ( ) ;", "if ( parent != null ) {", "parent . register Animated Internal ( this ) ; } }", "ticker Start Time = System . current Time Millis ( ) ;", "ticker Delay = delay ;", "ticker Running = true ;", "this . right To Left = right To Left ;", "if ( is RTL ( ) ) {", "this . right To Left = ! this . right To Left ; } }"]}
{"ids": "48169", "code": ["static Cipher Suite value Of ( int id 1 , int id 2 ) {", "id 1 &= NUM_ ;", "id 2 &= NUM_ ;", "int id = ( id 1 << NUM_ ) | id 2 ;", "Cipher Suite c = id Map . get ( id ) ;", "if ( c == null ) {", "String h 1 = Integer . to String ( id 1 , NUM_ ) ;", "String h 2 = Integer . to String ( id 2 , NUM_ ) ;", "c = new Cipher Suite ( STR_ + h 1 + STR_ + h 2 , id ) ; }", "return c ; }"]}
{"ids": "76449", "code": ["public static Context create Pending Action Context ( Context context , Recon Action action , String mapping Name , Json Value source Object , String recon Id , Situation situation ) {", "Map < String , Object > pending Action Map = new Hash Map < String , Object > ( ) ;", "pending Action Map . put ( MAPPING NAME , mapping Name ) ;", "pending Action Map . put ( SOURCE OBJECT , source Object ) ;", "pending Action Map . put ( RECON ID , recon Id ) ;", "pending Action Map . put ( ORIGINAL SITUATION , situation . to String ( ) ) ;", "Pending Action Context pending Action Context = new Pending Action Context ( context , pending Action Map , action . to String ( ) ) ;", "return pending Action Context ; }"]}
{"ids": "66771", "code": ["public void show Droidsafe Text Markers ( I Editor Part opened Editor , String class Name ) {", "if ( opened Editor != null && opened Editor instanceof I Text Editor && f Processed Classes != null ) {", "I Text Editor editor = ( I Text Editor ) opened Editor ;", "if ( f Processed Classes . contains ( class Name ) ) {", "if ( f Classes Need Update . contains ( class Name ) ) {", "Class Marker Processor class Processor = get ( class Name ) ;", "class Processor . update Taint Markers ( editor ) ;", "f Classes Need Update . remove ( class Name ) ; } }", "else {", "f Processed Classes . add ( class Name ) ;", "Map < String , Map < Int Range , Map < String , Set < Call Location Model > > > > class Tainted Data Map = f Tainted Data Map . get ( class Name ) ;", "Map < String , Set < Int Range > > class Unreachable Method Map = f Unreachable Source Method Map . get ( class Name ) ;", "if ( class Tainted Data Map != null || class Unreachable Method Map != null ) {", "I Editor Input input = editor . get Editor Input ( ) ;", "if ( input instanceof File Editor Input ) {", "Class Marker Processor class Processor = get ( class Name ) ;", "class Processor . show Droidsafe Text Markers ( editor ) ; } } } } }"]}
{"ids": "62900", "code": ["private static void resolve New Expression ( New Expression obj Subject Expression , Hash Set < String > obj Types Set ) {", "Class Reference obj Class Ref = obj Subject Expression . get Class Reference ( ) ;", "if ( null == obj Class Ref || null == obj Class Ref . get FQN ( ) ) {", "obj Types Set . add ( Types . str Resolving Aborted On Psi Level ) ;", "return ; }", "obj Types Set . add ( obj Class Ref . get FQN ( ) ) ; }"]}
{"ids": "2083", "code": ["private static List < Size > pick Up To Three ( List < Size > sizes ) {", "List < Size > result = new Array List < Size > ( ) ;", "Size largest = sizes . get ( NUM_ ) ;", "result . add ( largest ) ;", "Size last Size = largest ;", "for ( Size size : sizes ) {", "double target Area = Math . pow ( NUM_ , result . size ( ) ) * area ( largest ) ;", "if ( area ( size ) < target Area ) {", "if ( ! result . contains ( last Size ) && ( target Area - area ( last Size ) < area ( size ) - target Area ) ) {", "result . add ( last Size ) ; }", "else {", "result . add ( size ) ; } }", "last Size = size ;", "if ( result . size ( ) == NUM_ ) {", "break ; } }", "if ( result . size ( ) < NUM_ && ! result . contains ( last Size ) ) {", "result . add ( last Size ) ; }", "return result ; }"]}
{"ids": "75751", "code": ["public static void copy To Clipboard ( Transferable t ) {", "Clipboard Helper . copy To Clipboard ( t ) ; }"]}
{"ids": "59710", "code": ["public static String format Percent ( int download Size , int file Size ) {", "float num = ( float ) download Size / file Size ;", "float percent = ( ( float ) ( int ) ( num * NUM_ ) ) / NUM_ ;", "return String . value Of ( percent + STR_ ) ; }"]}
{"ids": "46205", "code": ["final private String attr Def 2 Attr Desc ( Attributes attrs ) throws Naming Exception {", "String Buffer attr Desc = new String Buffer ( STR_ ) ;", "Attribute attr = null ;", "int count = NUM_ ;", "attr = attrs . get ( NUMERICOID ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write Numeric OID ( attr ) ) ;", "count ++ ; }", "else {", "throw new Configuration Exception ( STR_ + STR_ ) ; }", "attr = attrs . get ( NAME ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write Q Descrs ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( DESC ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write QD String ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( OBSOLETE ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write Boolean ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( SUP ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write WOID ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( EQUALITY ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write WOID ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( ORDERING ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write WOID ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( SUBSTR ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write WOID ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( SYNTAX ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write WOID ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( SINGLE VAL ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write Boolean ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( COLLECTIVE ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write Boolean ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( NO USER MOD ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write Boolean ( attr ) ) ;", "count ++ ; }", "attr = attrs . get ( USAGE ID ) ;", "if ( attr != null ) {", "attr Desc . append ( write QD String ( attr ) ) ;", "count ++ ; }", "if ( count < attrs . size ( ) ) {", "String attr Id = null ;", "for ( Naming Enumeration < ? extends Attribute > ae = attrs . get All ( ) ; ae . has More Elements ( ) ; ) {", "attr = ae . next ( ) ;", "attr Id = attr . get ID ( ) ;", "if ( attr Id . equals ( NUMERICOID ID ) || attr Id . equals ( NAME ID ) || attr Id . equals ( SYNTAX ID ) || attr Id . equals ( DESC ID ) || attr Id . equals ( SINGLE VAL ID ) || attr Id . equals ( EQUALITY ID ) || attr Id . equals ( ORDERING ID ) || attr Id . equals ( SUBSTR ID ) || attr Id . equals ( NO USER MOD ID ) || attr Id . equals ( USAGE ID ) || attr Id . equals ( SUP ID ) || attr Id . equals ( COLLECTIVE ID ) || attr Id . equals ( OBSOLETE ID ) ) {", "continue ; }", "else {", "attr Desc . append ( write QD Strings ( attr ) ) ; } } }", "attr Desc . append ( STR_ ) ;", "return attr Desc . to String ( ) ; }"]}
{"ids": "52498", "code": ["public static < T > Collection < T > make Immutable ( Collection < T > mutable Collection ) {", "Collection < T > new Collection ;", "try {", "@ Suppress Warnings ( STR_ ) Class < Collection < T > > cls = ( Class < Collection < T > > ) mutable Collection . get Class ( ) ;", "new Collection = cls . new Instance ( ) ; }", "catch ( Instantiation Exception | Illegal Access Exception e ) {", "throw new Illegal State Exception ( e ) ; }", "for ( T element : mutable Collection ) {", "new Collection . add ( Utils . make Immutable ( element ) ) ; }", "return Collections . unmodifiable Collection ( new Collection ) ; }"]}
{"ids": "70383", "code": ["public synchronized void track Hex Images ( I Hex hex , Media Tracker tracker ) {", "Image base = hex To Image Cache . get ( hex ) ;", "List < Image > super Imgs = hex To Image List Cache . get ( hex ) ;", "List < Image > ortho Imgs = ortho List Cache . get ( hex ) ;", "tracker . add Image ( base , NUM_ ) ;", "if ( super Imgs != null ) {", "for ( Iterator < Image > i = super Imgs . iterator ( ) ; i . has Next ( ) ; ) {", "tracker . add Image ( i . next ( ) , NUM_ ) ; } }", "if ( ortho Imgs != null ) {", "for ( Iterator < Image > i = ortho Imgs . iterator ( ) ; i . has Next ( ) ; ) {", "tracker . add Image ( i . next ( ) , NUM_ ) ; } } }"]}
{"ids": "57", "code": ["public boolean is Processed ( Trace trace , Node node , Direction direction ) {", "boolean ret = false ;", "if ( processor . get Node Type ( ) == node . get Type ( ) && processor . get Direction ( ) == direction ) {", "if ( uri Filter == null || uri Filter . test ( node . get Uri ( ) ) ) {", "ret = true ; } }", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( STR_ + trace + STR_ + node + STR_ + direction + STR_ + ret ) ; }", "return ret ; }"]}
{"ids": "71239", "code": ["private Quad Edge [ ] fetch Triangle To Visit ( Quad Edge edge , Stack edge Stack , boolean include Frame , Set visited Edges ) {", "Quad Edge curr = edge ;", "int edge Count = NUM_ ;", "boolean is Frame = false ;", "do {", "tri Edges [ edge Count ] = curr ;", "if ( is Frame Edge ( curr ) ) is Frame = true ;", "Quad Edge sym = curr . sym ( ) ;", "if ( ! visited Edges . contains ( sym ) ) edge Stack . push ( sym ) ;", "visited Edges . add ( curr ) ;", "edge Count ++ ;", "curr = curr . l Next ( ) ; }", "while ( curr != edge ) ;", "if ( is Frame && ! include Frame ) return null ;", "return tri Edges ; }"]}
{"ids": "17071", "code": ["public static synchronized Data Source Views Manager shared Instance ( ) {", "if ( shared Instance == null ) shared Instance = new Data Source Views Manager ( ) ;", "return shared Instance ; }"]}
{"ids": "51904", "code": ["public String tag ( String inner , String c 1 , String c 2 ) {", "boolean color = ( ( attr & ATTR COLOR ) == ATTR COLOR ) && Toast Bootstrap . color ;", "String s = STR_ ;", "if ( color ) s += STR_ + c 1 + STR_ ;", "s += inner ;", "if ( color ) s += STR_ + c 2 + STR_ ;", "s += STR_ ;", "if ( color ) s += STR_ + c 1 + STR_ ;", "return color ? Pretty . format ( s ) : s ; }"]}
{"ids": "24189", "code": ["private final String load Xml Definition ( ) {", "final Cache cache = Cache Factory . get Any Instance ( ) ;", "final String Writer string Writer = new String Writer ( ) ;", "final Print Writer print Writer = new Print Writer ( string Writer ) ;", "Cache Xml Generator . generate ( cache , print Writer , true , false , false ) ;", "print Writer . close ( ) ;", "return load Xml Definition ( string Writer . to String ( ) ) ; }"]}
{"ids": "41867", "code": ["private Long id ( Http Servlet Request request ) {", "Long id = null ;", "String path Info = request . get Path Info ( ) ;", "if ( path Info != null && path Info . length ( ) > NUM_ ) {", "String id String = path Info . substring ( NUM_ ) ;", "id = Long . value Of ( id String ) ; }", "return id ; }"]}
{"ids": "85646", "code": ["public void uncompress ( ) {", "data . position ( NUM_ ) ;", "Inflater Input Stream inflater = new Inflater Input Stream ( data . as Input Stream ( ) ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "Io Buffer tmp = Io Buffer . allocate ( NUM_ ) ;", "tmp . set Auto Expand ( true ) ;", "try {", "while ( inflater . available ( ) > NUM_ ) {", "int decompressed = inflater . read ( buffer ) ;", "if ( decompressed <= NUM_ ) {", "break ; }", "tmp . put ( buffer , NUM_ , decompressed ) ; } }", "catch ( IO Exception e ) {", "tmp . free ( ) ;", "throw new Runtime Exception ( STR_ , e ) ; }", "finally {", "if ( inflater != null ) {", "try {", "inflater . close ( ) ; }", "catch ( IO Exception e 1 ) { } } }", "data . free ( ) ;", "data = tmp ;", "data . flip ( ) ;", "prepare IO ( ) ; }"]}
{"ids": "78006", "code": ["public void poll ( final Tcp Socket Statistics Handler handler ) {", "this . statistics Handler = handler ;", "try {", "file Loader . load ( ) ;", "final Byte Buffer buffer = file Loader . get Buffer ( ) ;", "line Parser . reset ( ) ;", "line Parser . handle Token ( buffer , buffer . position ( ) , buffer . limit ( ) ) ; }", "finally {", "this . statistics Handler = null ; }", "monitored Sockets . purge Entries Older Than ( update Count ) ;", "update Count ++ ; }"]}
{"ids": "51411", "code": ["public int compare To ( Char Buffer other Buffer ) {", "int compare Remaining = ( remaining ( ) < other Buffer . remaining ( ) ) ? remaining ( ) : other Buffer . remaining ( ) ;", "int this Pos = position ;", "int other Pos = other Buffer . position ;", "char this Byte , other Byte ;", "while ( compare Remaining > NUM_ ) {", "this Byte = get ( this Pos ) ;", "other Byte = other Buffer . get ( other Pos ) ;", "if ( this Byte != other Byte ) {", "return this Byte < other Byte ? - NUM_ : NUM_ ; }", "this Pos ++ ;", "other Pos ++ ;", "compare Remaining -- ; }", "return remaining ( ) - other Buffer . remaining ( ) ; }"]}
{"ids": "14667", "code": ["private static Policy Notification extract Policy Notification ( String xml ) throws Policy Evaluation Exception {", "Policy Notification policy Notification = null ;", "try {", "String notification Data Block = get Notification Data Block ( xml ) ;", "if ( notification Data Block != null ) {", "Document doc = XML Utils . get XML Document ( new Byte Array Input Stream ( notification Data Block . get Bytes ( ) ) ) ;", "Node root Node = XML Utils . get Root Node ( doc , NODE POLICY SERVICE ) ;", "if ( root Node != null ) {", "Node notification Node = XML Utils . get Child Node ( root Node , NODE POLICY NOTIFICATION ) ;", "if ( notification Node != null ) {", "policy Notification = Policy Notification . parse XML ( notification Node ) ; }", "else {", "debug . error ( STR_ + STR_ + STR_ ) ;", "throw new Policy Evaluation Exception ( Res Bundle Utils . rb Name , STR_ , null , null ) ; } }", "else {", "debug . error ( STR_ + STR_ ) ; } }", "else {", "debug . error ( STR_ + STR_ + STR_ ) ; } }", "catch ( Exception xe ) {", "debug . error ( STR_ , xe ) ;", "throw new Policy Evaluation Exception ( Res Bundle Utils . rb Name , STR_ , null , xe ) ; }", "return policy Notification ; }"]}
{"ids": "6177", "code": ["private Object find Parcel ( @ Non Null byte [ ] object Array , @ Non Null String class Name ) {", "try {", "Class class Tmp = get Class For Name ( class Name ) ;", "Constructor declared Constructor = class Tmp . get Declared Constructor ( Parcel . class ) ;", "declared Constructor . set Accessible ( true ) ;", "return declared Constructor . new Instance ( Wear Bus Tools . byte To Parcel ( object Array ) ) ; }", "catch ( Exception e ) {", "Log . d ( Wear Bus Tools . BUSWEAR TAG , STR_ + e . get Message ( ) ) ; }", "return null ; }"]}
{"ids": "22905", "code": ["public boolean is Login Set ( ) {", "return ( username != null && ( password != null && ! username . equals ( STR_ ) && ! password . equals ( STR_ ) ) ) || oauth ; }"]}
{"ids": "7101", "code": ["public void add Content Item ( Content Item content Item ) {", "if ( content Items == null ) {", "content Items = new Array List < Content Item > ( ) ; }", "content Items . add ( content Item ) ; }"]}
{"ids": "834", "code": ["public static String canonicalize Class Name ( String name ) {", "String classname = name . replace ( STR_ , STR_ ) ;", "classname = classname . replace ( STR_ , STR_ ) ;", "if ( classname . starts With ( STR_ ) ) classname = classname . substring ( NUM_ ) ;", "if ( classname . ends With ( STR_ ) ) classname = classname . substring ( NUM_ , classname . length ( ) - NUM_ ) ;", "return classname ; }"]}
{"ids": "24391", "code": ["public static final void pause ( final int milliseconds ) {", "if ( milliseconds >= NUM_ || logger . is Debug Enabled ( ) ) {", "logger . info ( STR_ , milliseconds ) ; }", "final long target = System . current Time Millis ( ) + milliseconds ;", "try {", "for ( ; ; ) {", "long ms Left = target - System . current Time Millis ( ) ;", "if ( ms Left <= NUM_ ) {", "break ; }", "Thread . sleep ( ms Left ) ; } }", "catch ( Interrupted Exception e ) {", "Assert . fail ( STR_ , e ) ; } }"]}
{"ids": "63897", "code": ["public boolean is Highlight With Invisible Edge ( ) {", "return highlight With Invisible Edge ; }"]}
{"ids": "31739", "code": ["private Configuration prepare Job For Cancelling ( ) throws Exception {", "prepare File ( STR_ , NUM_ ) ;", "executed Tasks . set ( NUM_ ) ;", "cancelled Tasks . set ( NUM_ ) ;", "fail Mapper Id . set ( NUM_ ) ;", "splits Count . set ( NUM_ ) ;", "Configuration cfg = new Configuration ( ) ;", "setup File Systems ( cfg ) ;", "Job job = Job . get Instance ( cfg ) ;", "job . set Output Key Class ( Text . class ) ;", "job . set Output Value Class ( Int Writable . class ) ;", "job . set Mapper Class ( Cancelling Test Mapper . class ) ;", "job . set Num Reduce Tasks ( NUM_ ) ;", "job . set Input Format Class ( In Format . class ) ;", "File Input Format . set Input Paths ( job , new Path ( STR_ + get Test Grid Name ( NUM_ ) + STR_ ) ) ;", "File Output Format . set Output Path ( job , new Path ( STR_ + get Test Grid Name ( NUM_ ) + STR_ ) ) ;", "job . set Jar By Class ( get Class ( ) ) ;", "return job . get Configuration ( ) ; }"]}
{"ids": "82988", "code": ["protected void generate Fields ( ) {", "for ( Iterator < Element > iterator = m Elements . iterator ( ) ; iterator . has Next ( ) ; ) {", "Element element = iterator . next ( ) ;", "if ( ! element . used ) {", "iterator . remove ( ) ;", "continue ; }", "Psi Field [ ] fields = m Class . get Fields ( ) ;", "boolean duplicate Field = false ;", "for ( Psi Field field : fields ) {", "String name = field . get Name ( ) ;", "if ( name != null && name . equals ( element . get Field Name ( ) ) ) {", "duplicate Field = true ;", "break ; } }", "if ( duplicate Field ) {", "iterator . remove ( ) ;", "continue ; }", "m Class . add ( m Factory . create Field From Text ( STR_ + element . name + STR_ + element . get Field Name ( ) + STR_ , m Class ) ) ; } }"]}
{"ids": "69011", "code": ["public boolean is Flying ( ) {", "return ( fly Through Dialog != null ) ; }"]}
{"ids": "24432", "code": ["public synchronized void init ( ) {", "channel Factory = new Nio Client Socket Channel Factory ( Executors . new Cached Thread Pool ( ) , Executors . new Cached Thread Pool ( ) ) ;", "datagram Channel Factory = new Nio Datagram Channel Factory ( Executors . new Cached Thread Pool ( ) ) ;", "timer = new Hashed Wheel Timer ( ) ; }"]}
{"ids": "73636", "code": ["private void consume Nested Scroll ( int dx Unconsumed , int dy Unconsumed , int dx Final Unconsumed , int dy Final Unconsumed ) {", "if ( m Over Scroll Effect == Over Scroll Effect . BOUNCE && dy Final Unconsumed != NUM_ ) {", "m Unconsumed Over Scroll Offset += - dy Final Unconsumed ;", "int max Offset = m Over Scroll Offset Limit ;", "if ( m Unconsumed Over Scroll Offset > NUM_ ) {", "m Unconsumed Over Scroll Offset = Math . min ( max Offset , m Unconsumed Over Scroll Offset ) ; }", "else if ( m Unconsumed Over Scroll Offset < NUM_ ) {", "m Unconsumed Over Scroll Offset = Math . max ( - max Offset , m Unconsumed Over Scroll Offset ) ; }", "set Scrolling Offset ( get Unconsumed Scrolling Offset ( ) ) ; }", "pull Edge Effects ( dx Unconsumed , dy Unconsumed ) ; }"]}
{"ids": "69321", "code": ["private void retrieve Waypoints ( Search Query query , Array List < Waypoint > waypoints ) {", "String query Like Selection 2 = STR_ + query . text Query + STR_ ;", "String [ ] waypoint Selection Args = new String [ ] { query Like Selection 2 , query Like Selection 2 , query Like Selection 2 } ;", "Cursor cursor = null ;", "try {", "cursor = provider Utils . get Waypoint Cursor ( WAYPOINT SELECTION QUERY , waypoint Selection Args , WAYPOINT SELECTION ORDER , MAX SCORED WAYPOINTS ) ;", "if ( cursor != null ) {", "waypoints . ensure Capacity ( cursor . get Count ( ) ) ;", "while ( cursor . move To Next ( ) ) {", "Waypoint waypoint = provider Utils . create Waypoint ( cursor ) ;", "if ( Location Utils . is Valid Location ( waypoint . get Location ( ) ) ) {", "waypoints . add ( waypoint ) ; } } } }", "finally {", "if ( cursor != null ) {", "cursor . close ( ) ; } } }"]}
{"ids": "68935", "code": ["void release ( ) {", "image Loader . cancel Pending Requests ( ) ;", "loading = new boolean [ nox Items . size ( ) ] ; }"]}
{"ids": "77314", "code": ["public void add ( String name , long cnt ) {", "if ( values == null ) {", "values = new Array List < > ( NUM_ ) ; }", "values . add ( new Count ( this , name , cnt ) ) ; }"]}
{"ids": "20904", "code": ["public void add Param ( Ast Node param ) {", "assert Not Null ( param ) ;", "if ( params == null ) {", "params = new Array List < Ast Node > ( ) ; }", "params . add ( param ) ;", "param . set Parent ( this ) ; }"]}
{"ids": "69701", "code": ["Delete Event ( @ Non Null JSON Object json ) throws JSON Exception {", "super ( TYPE DELETE , json ) ;", "if ( Text Utils . is Empty ( m Block Id ) ) {", "throw new JSON Exception ( TYPENAME DELETE + STR_ + JSON BLOCK ID ) ; }", "m Old Xml = json . opt String ( JSON OLD VALUE ) ;", "JSON Array ids = json . get JSON Array ( JSON IDS ) ;", "int count = ids . length ( ) ;", "List < String > temp = new Array List < > ( count ) ;", "for ( int i = NUM_ ; i < count ; ++ i ) {", "temp . add ( ids . get String ( i ) ) ; }", "m Ids = Collections . unmodifiable List ( temp ) ; }"]}
{"ids": "22042", "code": ["public static boolean is Full Copy Restorable ( Volume volume , Db Client db Client ) {", "boolean result = false ;", "String replica State = volume . get Replica State ( ) ;", "if ( is Volume Full Copy ( volume , db Client ) && replica State != null && ! replica State . is Empty ( ) ) {", "Replication State state = Replication State . get Enum Value ( replica State ) ;", "if ( state != null && state == Replication State . SYNCHRONIZED ) {", "result = true ; } }", "return result ; }"]}
{"ids": "48707", "code": ["private static boolean is Buffer Too Large ( Byte Buffer buf ) {", "return is Buffer Too Large ( buf . capacity ( ) ) ; }"]}
{"ids": "13986", "code": ["public boolean verify XML Signature ( org . w 3 c . dom . Element element , java . lang . String cert Alias ) throws XML Signature Exception {", "return verify XML Signature ( element , DEF ID ATTRIBUTE , cert Alias ) ; }"]}
{"ids": "83162", "code": ["public void read Transport Systems ( final int [ ] columns Indices , final Buffered Reader reader ) throws IO Exception {", "String line = reader . read Line ( ) ;", "while ( line != null && line . length ( ) > NUM_ ) {", "line = reader . read Line ( ) ; } }"]}
{"ids": "9334", "code": ["private void parse Parameters ( String parameters ) {", "Log . v ( STR_ , STR_ + STR_ + parameters ) ;", "if ( parameters != null ) {", "int i ;", "do {", "i = parameters . index Of ( STR_ ) ;", "if ( i < NUM_ ) {", "parse Parameter ( parameters ) ; }", "else {", "parse Parameter ( parameters . substring ( NUM_ , i ) ) ;", "parameters = parameters . substring ( i + NUM_ ) ; } }", "while ( i >= NUM_ ) ; } }"]}
{"ids": "79728", "code": ["public void add Http Session Token ( String site , String token ) {", "if ( ! site . contains ( STR_ ) ) {", "site = site + ( STR_ ) ; }", "Http Session Tokens Set site Tokens = session Tokens . get ( site ) ;", "if ( site Tokens == null ) {", "site Tokens = new Http Session Tokens Set ( ) ;", "session Tokens . put ( site , site Tokens ) ; }", "log . info ( STR_ + site + STR_ + token ) ;", "site Tokens . add Token ( token ) ;", "unmark Removed Default Session Token ( site , token ) ; }"]}
{"ids": "17013", "code": ["public Gradle Distribution deserialize From String ( String distribution String ) {", "Preconditions . check Not Null ( distribution String ) ;", "String local Installation Prefix = STR_ ;", "if ( distribution String . starts With ( local Installation Prefix ) && distribution String . ends With ( STR_ ) ) {", "String local Installation Dir = distribution String . substring ( local Installation Prefix . length ( ) , distribution String . length ( ) - NUM_ ) ;", "return Gradle Distribution . for Local Installation ( new File ( local Installation Dir ) ) ; }", "String remote Distribution Prefix = STR_ ;", "if ( distribution String . starts With ( remote Distribution Prefix ) && distribution String . ends With ( STR_ ) ) {", "String remote Distribution Uri = distribution String . substring ( remote Distribution Prefix . length ( ) , distribution String . length ( ) - NUM_ ) ;", "return Gradle Distribution . for Remote Distribution ( create URI ( remote Distribution Uri ) ) ; }", "String version Prefix = STR_ ;", "if ( distribution String . starts With ( version Prefix ) && distribution String . ends With ( STR_ ) ) {", "String version = distribution String . substring ( version Prefix . length ( ) , distribution String . length ( ) - NUM_ ) ;", "return Gradle Distribution . for Version ( version ) ; }", "String wrapper String = STR_ ;", "if ( distribution String . equals ( wrapper String ) ) {", "return Gradle Distribution . from Build ( ) ; }", "String message = String . format ( STR_ , distribution String ) ;", "throw new Runtime Exception ( message ) ; }"]}
{"ids": "16147", "code": ["public double meters To Pixels ( ) {", "double screen Center Lat = screen Top Left . latitude - screen Size . latitude / NUM_ ;", "double meters To Lon = NUM_ / ( Util . LON TO METERS AT EQUATOR * Math . cos ( screen Center Lat / NUM_ * Math . PI ) ) ;", "return screen Size . longitude / window Width * meters To Lon ; }"]}
{"ids": "54568", "code": ["public boolean send Via Data Socket ( byte [ ] bytes , int start , int len ) {", "if ( data Output Stream == null ) {", "Log . i ( TAG , STR_ ) ;", "return false ; }", "if ( len == NUM_ ) {", "return true ; }", "try {", "data Output Stream . write ( bytes , start , len ) ; }", "catch ( IO Exception e ) {", "Log . i ( TAG , STR_ ) ;", "Log . i ( TAG , e . to String ( ) ) ;", "return false ; }", "local Data Socket . report Traffic ( len ) ;", "return true ; }"]}
{"ids": "29714", "code": ["private void push Context ( Base Context c ) {", "context Stack . push ( c ) ; }"]}
{"ids": "73009", "code": ["@ Override public void bookmarks Or History Picker ( Combo Views start View ) {", "if ( m Tab Control . get Current Web View ( ) == null ) {", "return ; }", "if ( is In Custom Action Mode ( ) ) {", "end Action Mode ( ) ; }", "Bundle extras = new Bundle ( ) ;", "extras . put Boolean ( Browser Bookmarks Page . EXTRA DISABLE WINDOW , ! m Tab Control . can Create New Tab ( ) ) ;", "m Ui . show Combo View ( start View , extras ) ; }"]}
{"ids": "12695", "code": ["public FST ( String file Name , String encoding , boolean verbose ) throws IO Exception {", "File Input Stream fis = new File Input Stream ( file Name ) ;", "try {", "load Headerless ( fis , encoding , verbose ) ; }", "finally {", "fis . close ( ) ; } }"]}
{"ids": "12825", "code": ["public static double [ ] normalize Zscore ( double [ ] x ) {", "double mn = mean ( x , NUM_ ) ;", "double sd = standard Deviation ( x , NUM_ ) ;", "for ( int i = NUM_ ; i < x . length ; i ++ ) if ( ! Double . is Na N ( x [ i ] ) ) x [ i ] = ( x [ i ] - mn ) / sd ;", "return x ; }"]}
{"ids": "80813", "code": ["void add Location ( String location ) {", "if ( f Location List . contains ( location ) ) {", "return ; }", "f Location List . add ( location ) ;", "f Table Viewer . refresh ( ) ;", "f Table Viewer . set Checked ( location , true ) ;", "f Table Viewer . set Selection ( new Structured Selection ( location ) ) ;", "validate Locations ( ) ; }"]}
{"ids": "33031", "code": ["public Java Formatter ( String line Delimiter , int initial Indent Level , boolean use Code Formatter , I Java Project project ) {", "f Line Delimiter = line Delimiter ;", "f Use Code Formatter = use Code Formatter ;", "f Initial Indent Level = initial Indent Level ;", "f Project = project ; }"]}
{"ids": "55596", "code": ["private static void check Path Need ( ) {", "if ( sampling Interval == - NUM_ ) {", "last Preload Time = read More Paths ( ) ; }", "if ( ! Double . is Na N ( last Preload Time ) && Sim Clock . get Time ( ) >= last Preload Time - ( sampling Interval * MIN AHEAD INTERVALS ) ) {", "for ( int i = NUM_ ; i < nrof Preload && ! Double . is Na N ( last Preload Time ) ; i ++ ) {", "last Preload Time = read More Paths ( ) ; } } }"]}
{"ids": "65099", "code": ["@ Suppress Warnings ( STR_ ) public void restore ( String file Name ) throws IO Exception , Class Not Found Exception {", "Object Input Stream ois = new Object Input Stream ( new File Input Stream ( file Name ) ) ;", "locations = ( Map < V , Point > ) ois . read Object ( ) ;", "ois . close ( ) ;", "initialize Locations ( ) ;", "locked = true ;", "fire State Changed ( ) ; }"]}
{"ids": "23833", "code": ["public void wait For Data ( ) {", "if ( this . initialized ) {", "return ; }", "wait On Initialization ( this . initialization Latch After Get Initial Image ) ; }"]}
{"ids": "12497", "code": ["private void blackman Harris 4 s Min ( int size ) {", "int start = ( window Function . length - size ) / NUM_ ;", "int stop = ( window Function . length + size ) / NUM_ ;", "double scale = NUM_ / ( double ) size / NUM_ ;", "for ( int i = NUM_ ; start < stop ; start ++ , i ++ ) window Function [ i ] = scale * ( NUM_ - NUM_ * Math . cos ( two PI * i / size ) + NUM_ * Math . cos ( NUM_ * two PI * i / size ) - NUM_ * Math . cos ( NUM_ * two PI * i / size ) ) ; }"]}
{"ids": "59409", "code": ["public int hash Code ( ) {", "return lower Nick . hash Code ( ) ; }"]}
{"ids": "53795", "code": ["public boolean increment Received ( ) {", "Long diff = System . current Time Millis ( ) - start Time ;", "if ( diff >= NUM_ ) {", "packets Per Second = interval Packets ;", "start Time = System . current Time Millis ( ) ;", "interval Packets = NUM_ ;", "return true ; }", "else {", "interval Packets ++ ; }", "this . received Packets ++ ;", "return false ; }"]}
{"ids": "80050", "code": ["Sentence parse Sentence ( final String text , final Conversation Context ctx ) {", "if ( is Empty ( ) ) {", "return Conversation Parser . parse ( text , ctx ) ; }", "String txt = text . trim ( ) ;", "final Sentence sentence = new Sentence Implementation ( ctx , txt ) ;", "txt = Conversation Parser . detect Sentence Type ( txt , sentence ) ;", "if ( type Matching ) {", "read Type Match Expressions ( txt , ctx , sentence ) ; }", "else if ( exact Matching ) {", "read Simple Expressions ( txt , ctx , sentence ) ; }", "else if ( similar Matching ) {", "read Simple Expressions ( txt , ctx , sentence ) ; }", "else if ( joker Matching ) {", "read Joker Expressions ( txt , ctx , sentence ) ; }", "else if ( case Insensitive ) {", "read Simple Expressions ( txt , ctx , sentence ) ; }", "return sentence ; }"]}
{"ids": "54094", "code": ["public Kafka Cluster using Directory ( File data Dir ) {", "if ( running ) throw new Illegal State Exception ( STR_ ) ;", "if ( data Dir != null && data Dir . exists ( ) && ! data Dir . is Directory ( ) && ! data Dir . can Write ( ) && ! data Dir . can Read ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . data Dir = data Dir ;", "return this ; }"]}
{"ids": "12897", "code": ["protected boolean check Prosodic Position ( Element current Rule Part , String prosodic Position Type ) {", "Named Node Map att Nodes = current Rule Part . get Attributes ( ) ;", "for ( int z = NUM_ ; z < att Nodes . get Length ( ) ; z ++ ) {", "Node el = att Nodes . item ( z ) ;", "String current Att = el . get Node Name ( ) ;", "String current Val = el . get Node Value ( ) ;", "if ( current Att . equals ( STR_ ) ) {", "if ( ! current Val . starts With ( STR_ ) ) {", "if ( ! prosodic Position Type . equals ( current Val ) ) return false ; }", "else {", "current Val = current Val . substring ( NUM_ , current Val . length ( ) ) ;", "if ( prosodic Position Type . equals ( current Val ) ) return false ; } } }", "return true ; }"]}
{"ids": "36292", "code": ["public static void register Operators ( String name , Input Stream operators XML , Class Loader class Loader ) {", "register Operators ( name , operators XML , class Loader , null ) ; }"]}
{"ids": "15058", "code": ["public void delete Sub Group Containers ( Set group Containers ) throws AM Exception , SSO Exception {", "Iterator iter = group Containers . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String group Container DN = ( String ) iter . next ( ) ;", "AM Group Container group Container = new AM Group Container Impl ( token , group Container DN ) ;", "group Container . delete ( ) ; } }"]}
{"ids": "79155", "code": ["public Glow Task ( Plugin owner , Runnable task , boolean sync , long delay , long period ) {", "super ( task , null ) ;", "task Id = next Task Id . get And Increment ( ) ;", "description = task . to String ( ) ;", "this . owner = owner ;", "this . delay = delay ;", "this . period = period ;", "counter = NUM_ ;", "this . sync = sync ; }"]}
{"ids": "42286", "code": ["public static void init ( String [ ] args ) {", "try {", "compiler . init Compiler ( args ) ;", "if ( VM . Build For Adaptive System && VM . Build With Base Boot Image Compiler ) {", "opt Compiler . init Compiler ( args ) ; } }", "catch ( Throwable e ) {", "while ( e != null ) {", "e . print Stack Trace ( ) ;", "e = e . get Cause ( ) ; } } }"]}
{"ids": "79709", "code": ["public static String encode ( Serializable o ) {", "Byte Array Output Stream bos = new Byte Array Output Stream ( ) ;", "try {", "Object Output Stream oos = new Object Output Stream ( bos ) ;", "try {", "oos . write Object ( o ) ;", "oos . flush ( ) ; }", "finally {", "oos . close ( ) ; }", "return Base 64 . encode Bytes ( bos . to Byte Array ( ) ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "3192", "code": ["private static boolean is Identifier Name ( String k ) {", "int n = k . length ( ) ;", "if ( n == NUM_ ) {", "return false ; }", "if ( ! Character . is Java Identifier Start ( k . char At ( NUM_ ) ) ) {", "return false ; }", "for ( int i = NUM_ ; i < n ; ++ i ) {", "if ( ! Character . is Java Identifier Part ( k . char At ( i ) ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "59594", "code": ["static boolean less Than Unsigned Long ( long x 1 , long x 2 ) {", "return ( x 1 + Long . MIN VALUE ) < ( x 2 + Long . MIN VALUE ) ; }"]}
{"ids": "52265", "code": ["private void move Single Node ( Object source , Point new Point ) {", "Display Node node = ( Display Node ) source ;", "int delta X = new Point . x - click Point . x ;", "int delta Y = new Point . y - click Point . y ;", "int new X = node . get Location ( ) . x + delta X ;", "int new Y = node . get Location ( ) . y + delta Y ;", "node . set Location ( new X , new Y ) ; }"]}
{"ids": "10382", "code": ["@ Suppress Warnings ( STR_ ) protected Kafka Spout Wrapper create Kafka Spout ( Map conf , Topology Context context , Spout Output Collector collector , final String topic , String scheme Cls Name , Spout Spec spout Spec , Map < String , Stream Definition > sds ) throws Exception {", "String kafka Broker Zk Quorum = config . get String ( STR_ ) ;", "Broker Hosts hosts = null ;", "if ( config . has Path ( STR_ ) ) {", "hosts = new Zk Hosts ( kafka Broker Zk Quorum , config . get String ( STR_ ) ) ; }", "else {", "hosts = new Zk Hosts ( kafka Broker Zk Quorum ) ; }", "String transaction Zk Root = DEFAULT STORM KAFKA TRANSACTION ZK ROOT ;", "if ( config . has Path ( STR_ ) ) {", "transaction Zk Root = config . get String ( STR_ ) ; }", "String zk State Transaction Rel Path = DEFAULT STORM KAFKA TRANSACTION ZK RELATIVE PATH ;", "if ( config . has Path ( STR_ ) ) {", "zk State Transaction Rel Path = config . get String ( STR_ ) ; }", "Spout Config spout Config = new Spout Config ( hosts , topic , transaction Zk Root , zk State Transaction Rel Path + STR_ + topic + STR_ + topology Id ) ;", "boolean storm Kafka Use Same Zk Quorum With Kafka Broker = config . get Boolean ( STR_ ) ;", "if ( storm Kafka Use Same Zk Quorum With Kafka Broker ) {", "Zk Server Port Utils utils = new Zk Server Port Utils ( kafka Broker Zk Quorum ) ;", "spout Config . zk Servers = utils . get Zk Hosts ( ) ;", "spout Config . zk Port = utils . get Zk Port ( ) ; }", "else {", "Zk Server Port Utils utils = new Zk Server Port Utils ( config . get String ( STR_ ) ) ;", "spout Config . zk Servers = utils . get Zk Hosts ( ) ;", "spout Config . zk Port = utils . get Zk Port ( ) ; }", "spout Config . state Update Interval Ms = config . has Path ( STR_ ) ? config . get Int ( STR_ ) : NUM_ ;", "spout Config . fetch Size Bytes = config . has Path ( STR_ ) ? config . get Int ( STR_ ) : NUM_ ;", "if ( config . has Path ( STR_ ) ) {", "spout Config . start Offset Time = config . get Int ( STR_ ) ; }", "spout Config . scheme = create Multi Scheme ( conf , topic , scheme Cls Name ) ;", "Kafka Spout Wrapper wrapper = new Kafka Spout Wrapper ( spout Config , kafka Spout Metric ) ;", "Spout Output Collector Wrapper collector Wrapper = new Spout Output Collector Wrapper ( this , collector , topic , spout Spec , num Of Router Bolts , sds , this . serializer ) ;", "wrapper . open ( conf , context , collector Wrapper ) ;", "if ( LOG . is Info Enabled ( ) ) {", "LOG . info ( STR_ , topic , scheme Cls Name ) ; }", "return wrapper ; }"]}
{"ids": "40881", "code": ["public Builder add Email ( Email email ) {", "emails . add ( email ) ;", "return this ; }"]}
{"ids": "1890", "code": ["public static Hash Provider best ( Hash Parameters params ) {", "return best ( params , Enum Set . of ( Hash Support . STATEFUL ) ) ; }"]}
{"ids": "55383", "code": ["public synchronized void load From File ( ) {", "entries . clear ( ) ;", "Path file = Paths . get ( file Name ) ;", "try ( Buffered Reader reader = Files . new Buffered Reader ( file , CHARSET ) ) {", "String line ;", "do {", "line = reader . read Line ( ) ;", "Addressbook Entry parsed Entry = parse Line ( line ) ;", "if ( parsed Entry != null ) {", "entries . put ( parsed Entry . get Name ( ) , parsed Entry ) ; } }", "while ( line != null ) ; }", "catch ( IO Exception ex ) {", "LOGGER . warning ( STR_ + ex . get Localized Message ( ) ) ; }", "LOGGER . info ( STR_ + entries . size ( ) + STR_ + file Name ) ;", "scan Categories ( ) ; }"]}
{"ids": "1928", "code": ["public boolean remove ( final int position ) {", "final Adapter Transaction remove Transaction = new Remove Transaction < > ( this , position ) ;", "final boolean success = remove Transaction . perform ( ) ;", "m Transactions . offer ( remove Transaction ) ;", "return success ; }"]}
{"ids": "85406", "code": ["private void encode Types ( List < Type > types , Map < String , Object > m , String key , Declaration from ) {", "if ( types == null || types . is Empty ( ) ) return ;", "List < Map < String , Object > > sats = new Array List < > ( types . size ( ) ) ;", "for ( Type st : types ) {", "sats . add ( type Map ( st , from ) ) ; }", "m . put ( key , sats ) ; }"]}
{"ids": "50115", "code": ["public static void clear Assertion Information ( ) {", "Assert Infos . clear ( ) ;", "Assert Occured = false ; }"]}
{"ids": "1623", "code": ["public static Operator generate Branch Plan ( Akiban Information Schema ais , Table table ) {", "final Operator index Scan = generate Index Scan ( ais , table ) ;", "final Schema schema = Schema Cache . global Schema ( ais ) ;", "Primary Key pkey = table . get Primary Key Including Internal ( ) ;", "Index Row Type index Type = schema . index Row Type ( pkey . get Index ( ) ) ;", "return generate Branch Plan ( table , index Scan , index Type ) ; }"]}
{"ids": "24793", "code": ["public long startstack ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "1147", "code": ["public boolean match ( Mime Type other ) {", "if ( this == other ) return true ;", "if ( type != null && other . type != null && ! type . equals ( other . type ) ) return false ;", "if ( subtype != null && other . subtype != null && ! subtype . equals ( other . subtype ) ) return false ;", "return true ; }"]}
{"ids": "36554", "code": ["@ Override public boolean is Armed ( ) {", "return other . is Armed ( ) ; }"]}
{"ids": "21902", "code": ["protected List < Volume Descriptor > create Change Virtual Pool Descriptors ( Storage System vplex System , Volume volume , Virtual Pool new Vpool , String task Id , List < Recommendation > recommendations , Virtual Pool Capability Values Wrapper capabilities , Controller Operation Values Wrapper operations Wrapper ) throws Internal Exception {", "URI volume Varray URI = volume . get Virtual Array ( ) ;", "Virtual Array volume Varray = db Client . query Object ( Virtual Array . class , volume Varray URI ) ;", "s logger . info ( STR_ , volume Varray URI ) ;", "URI volume Vpool URI = volume . get Virtual Pool ( ) ;", "Virtual Pool current Vpool = db Client . query Object ( Virtual Pool . class , volume Vpool URI ) ;", "List < Volume Descriptor > descriptors = new Array List < Volume Descriptor > ( ) ;", "Volume Descriptor vplex Virtual Volume Desc = new Volume Descriptor ( Volume Descriptor . Type . VPLEX VIRT VOLUME , volume . get Storage Controller ( ) , volume . get Id ( ) , volume . get Pool ( ) , null ) ;", "Map < String , Object > volume Params = new Hash Map < String , Object > ( ) ;", "volume Params . put ( Volume Descriptor . PARAM VPOOL CHANGE EXISTING VOLUME ID , volume . get Id ( ) ) ;", "volume Params . put ( Volume Descriptor . PARAM VPOOL CHANGE NEW VPOOL ID , new Vpool . get Id ( ) ) ;", "volume Params . put ( Volume Descriptor . PARAM VPOOL CHANGE OLD VPOOL ID , volume . get Virtual Pool ( ) ) ;", "if ( operations Wrapper != null ) {", "if ( operations Wrapper . get Migration Suspend Before Commit ( ) != null ) {", "volume Params . put ( Volume Descriptor . PARAM MIGRATION SUSPEND BEFORE COMMIT , operations Wrapper . get Migration Suspend Before Commit ( ) ) ; }", "if ( operations Wrapper . get Migration Suspend Before Delete Source ( ) != null ) {", "volume Params . put ( Volume Descriptor . PARAM MIGRATION SUSPEND BEFORE DELETE SOURCE , operations Wrapper . get Migration Suspend Before Delete Source ( ) ) ; } }", "vplex Virtual Volume Desc . set Parameters ( volume Params ) ;", "descriptors . add ( vplex Virtual Volume Desc ) ;", "if ( Virtual Pool Change Analyzer . vpool Change Requires Migration ( current Vpool , new Vpool ) ) {", "Volume mig Src Volume = get Associated Volume In V Array ( volume , volume Varray URI ) ;", "descriptors . add All ( create Backend Volume Migration Descriptors ( vplex System , volume , mig Src Volume , volume Varray , new Vpool , get Volume Capacity ( mig Src Volume != null ? mig Src Volume : volume ) , task Id , recommendations , false , capabilities ) ) ; }", "URI ha Varray URI = Virtual Pool Change Analyzer . get Ha Varray URI ( current Vpool ) ;", "if ( ha Varray URI != null ) {", "Virtual Array ha Varray = db Client . query Object ( Virtual Array . class , ha Varray URI ) ;", "Virtual Pool current Ha Vpool = Virtual Pool Change Analyzer . get Ha Vpool ( current Vpool , db Client ) ;", "Virtual Pool new Ha Vpool = Virtual Pool Change Analyzer . get New Ha Vpool ( current Vpool , new Vpool , db Client ) ;", "if ( Virtual Pool Change Analyzer . vpool Change Requires Migration ( current Ha Vpool , new Ha Vpool ) ) {", "Volume mig Src Volume = get Associated Volume In V Array ( volume , ha Varray URI ) ;", "descriptors . add All ( create Backend Volume Migration Descriptors ( vplex System , volume , mig Src Volume , ha Varray , new Ha Vpool , get Volume Capacity ( mig Src Volume != null ? mig Src Volume : volume ) , task Id , recommendations , true , capabilities ) ) ; } }", "return descriptors ; }"]}
{"ids": "26459", "code": ["public static boolean is Java Script Enabled ( Http Servlet Request request ) {", "Http Session session = request . get Session ( ) ;", "Boolean java Script Enabled = ( Boolean ) session . get Attribute ( STR_ ) ;", "if ( java Script Enabled != null ) {", "return java Script Enabled . boolean Value ( ) ; }", "return false ; }"]}
{"ids": "47034", "code": ["public boolean equals ( Object obj ) {", "if ( this == obj ) return true ;", "if ( obj instanceof EC Field Fp ) {", "return ( p . equals ( ( ( EC Field Fp ) obj ) . p ) ) ; }", "return false ; }"]}
{"ids": "70329", "code": ["public static boolean valid Skin Spec File ( String file Name ) {", "File file = new File ( Configuration . skins Dir ( ) , file Name ) ;", "if ( ! file . exists ( ) || ! file . is File ( ) ) {", "return false ; }", "Document Builder Factory dbf = Document Builder Factory . new Instance ( ) ;", "try {", "Document Builder builder = dbf . new Document Builder ( ) ;", "Document doc = builder . parse ( file ) ;", "Node List list Of Components = doc . get Elements By Tag Name ( UI ELEMENT ) ;", "if ( list Of Components . get Length ( ) > NUM_ ) {", "return true ; }", "else {", "return false ; } }", "catch ( Exception e ) {", "return false ; } }"]}
{"ids": "7826", "code": ["@ Override public void handle Mouse Moved ( Chart Canvas canvas , Mouse Event e ) {", "if ( ! canvas . is Tooltip Enabled ( ) ) {", "return ; }", "String text = get Tooltip Text ( canvas , e . get X ( ) , e . get Y ( ) ) ;", "canvas . set Tooltip ( text , e . get Screen X ( ) , e . get Screen Y ( ) ) ; }"]}
{"ids": "25509", "code": ["private boolean load Unpacked UMD ( String filename ) throws IO Exception , General Jpcsp Exception {", "if ( do Umd Buffering ) {", "return false ; }", "File file = new File ( filename ) ;", "if ( file . exists ( ) ) {", "Random Access File raf = new Random Access File ( file , STR_ ) ;", "File Channel ro Channel = raf . get Channel ( ) ;", "Byte Buffer readbuffer = ro Channel . map ( File Channel . Map Mode . READ ONLY , NUM_ , ( int ) ro Channel . size ( ) ) ;", "emulator . load ( STR_ , readbuffer ) ;", "raf . close ( ) ;", "log . info ( STR_ ) ;", "return true ; }", "return false ; }"]}
{"ids": "21568", "code": ["public boolean disable VMAX 3 Compression ( URI block Object URI , Storage System storage System ) {", "Virtual Pool virtual Pool = null ;", "Storage Pool storage Pool = null ;", "Volume volume = null ;", "if ( URI Util . is Type ( block Object URI , Volume . class ) ) {", "volume = db Client . query Object ( Volume . class , block Object URI ) ; }", "else if ( URI Util . is Type ( block Object URI , Block Snapshot . class ) ) {", "Block Snapshot snapshot = db Client . query Object ( Block Snapshot . class , block Object URI ) ;", "volume = db Client . query Object ( Volume . class , snapshot . get Parent ( ) ) ; }", "else if ( URI Util . is Type ( block Object URI , Block Mirror . class ) ) {", "Block Mirror mirror = db Client . query Object ( Block Mirror . class , block Object URI ) ;", "virtual Pool = db Client . query Object ( Virtual Pool . class , mirror . get Virtual Pool ( ) ) ;", "storage Pool = db Client . query Object ( Storage Pool . class , mirror . get Pool ( ) ) ; }", "if ( volume != null ) {", "virtual Pool = db Client . query Object ( Virtual Pool . class , volume . get Virtual Pool ( ) ) ;", "storage Pool = db Client . query Object ( Storage Pool . class , volume . get Pool ( ) ) ; }", "return ( check If Provider Supports Compression Operations ( storage System ) && ! virtual Pool . get Compression Enabled ( ) && storage Pool . get Compression Enabled ( ) ) ; }"]}
{"ids": "74689", "code": ["public static Lat Lon rhumb End Position ( Lat Lon p , double rhumb Azimuth Radians , double path Length Radians ) {", "if ( p == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return rhumb End Position ( p , Angle . from Radians ( rhumb Azimuth Radians ) , Angle . from Radians ( path Length Radians ) ) ; }"]}
{"ids": "47822", "code": ["public Dimension maximum Layout Size ( Container target ) {", "return new Dimension ( Integer . MAX VALUE , Integer . MAX VALUE ) ; }"]}
{"ids": "2635", "code": ["public static String read Stream ( Input Stream in ) {", "Buffered Reader reader = new Buffered Reader ( new Input Stream Reader ( in ) ) ;", "String Builder sb = new String Builder ( ) ;", "String line = null ;", "try {", "while ( ( line = reader . read Line ( ) ) != null ) {", "sb . append ( line + STR_ ) ; } }", "catch ( IO Exception e ) {", "Fresh Air Log . e ( STR_ , e ) ; }", "finally {", "try {", "in . close ( ) ; }", "catch ( IO Exception e ) { }", "try {", "reader . close ( ) ; }", "catch ( IO Exception e ) { } }", "return sb . to String ( ) ; }"]}
{"ids": "30955", "code": ["private void log Expiration ( Entry e ) {", "if ( e . renewals Done ( ) ) {", "logger . log ( Level . FINE , STR_ , e . lease ) ; }", "else {", "logger . log ( Levels . FAILED , STR_ , e . lease ) ; } }"]}
{"ids": "44043", "code": ["void remove Ripple ( Ripple ripple ) {", "final Ripple [ ] ripples = m Exiting Ripples ;", "final int count = m Exiting Ripples Count ;", "final int index = get Ripple Index ( ripple ) ;", "if ( index >= NUM_ ) {", "System . arraycopy ( ripples , index + NUM_ , ripples , index , count - ( index + NUM_ ) ) ;", "ripples [ count - NUM_ ] = null ;", "m Exiting Ripples Count -- ;", "invalidate Self ( ) ; } }"]}
{"ids": "86115", "code": ["@ Override public void on Draw Eye ( Eye eye ) {", "GLES 20 . gl Clear ( GLES 20 . GL COLOR BUFFER BIT | GLES 20 . GL DEPTH BUFFER BIT ) ;", "Engine . check GL Error ( STR_ ) ;", "if ( ! pref Orientation Provider String . equals ( STR_ ) ) {", "if ( first On Draw Eye > NUM_ ) {", "first On Draw Eye -- ;", "float [ ] m = new float [ NUM_ ] ;", "Matrix . invert M ( m , NUM_ , m Head View SDK , NUM_ ) ;", "Matrix . multiply MM ( m , NUM_ , eye . get Eye View ( ) , NUM_ , m , NUM_ ) ;", "if ( eye . get Type ( ) == Eye . Type . RIGHT ) {", "m Eye Right View = m ; }", "else if ( eye . get Type ( ) == Eye . Type . LEFT ) {", "m Eye Left View = m ; }", "return ; }", "float [ ] m = new float [ NUM_ ] ;", "if ( eye . get Type ( ) == Eye . Type . RIGHT ) {", "Matrix . multiply MM ( m , NUM_ , m Head View Use , NUM_ , m Eye Right View , NUM_ ) ; }", "else {", "Matrix . multiply MM ( m , NUM_ , m Head View Use , NUM_ , m Eye Left View , NUM_ ) ; }", "Matrix . multiply MM ( m View , NUM_ , m , NUM_ , m Camera , NUM_ ) ; }", "else {", "Matrix . multiply MM ( m View , NUM_ , eye . get Eye View ( ) , NUM_ , m Camera , NUM_ ) ; }", "float [ ] perspective = eye . get Perspective ( Z NEAR , Z FAR ) ;", "GLES 20 . gl Enable ( GLES 20 . GL DEPTH TEST ) ;", "GLES 20 . gl Blend Func ( GLES 20 . GL SRC ALPHA , GLES 20 . GL ONE MINUS SRC ALPHA ) ;", "GLES 20 . gl Enable ( GLES 20 . GL BLEND ) ;", "if ( pref Show Env && bg Env . is Ready ( ) ) {", "Matrix . multiply MM ( m Model View , NUM_ , m View , NUM_ , bg Env . model , NUM_ ) ;", "Matrix . multiply MM ( m Model View Projection , NUM_ , perspective , NUM_ , m Model View , NUM_ ) ;", "bg Env . draw ( eye . get Type ( ) , m Model View Projection ) ; }", "GLES 20 . gl Disable ( GLES 20 . GL DEPTH TEST ) ;", "Matrix . multiply MM ( m Model View Projection , NUM_ , perspective , NUM_ , camera Preview . model , NUM_ ) ;", "camera Preview . draw ( eye . get Type ( ) , m Model View Projection ) ;", "Matrix . multiply MM ( m Model View , NUM_ , m View , NUM_ , screen . model , NUM_ ) ;", "Matrix . multiply MM ( m Model View Projection , NUM_ , perspective , NUM_ , m Model View , NUM_ ) ;", "screen . draw ( eye . get Type ( ) , m Model View Projection ) ;", "for ( Button Thing button : button List ) {", "Matrix . multiply MM ( m Model View , NUM_ , m View , NUM_ , button . model , NUM_ ) ;", "Matrix . multiply MM ( m Model View Projection , NUM_ , perspective , NUM_ , m Model View , NUM_ ) ;", "button . draw ( eye . get Type ( ) , m Model View Projection ) ; }", "Matrix . multiply MM ( m Model View Projection , NUM_ , perspective , NUM_ , aim Point . model , NUM_ ) ;", "aim Point . draw ( Eye . Type . MONOCULAR , m Model View Projection ) ; }"]}
{"ids": "54108", "code": ["protected Source Records consume Records By Topic ( int num Records ) throws Interrupted Exception {", "Source Records records = new Source Records ( ) ;", "consume Records ( num Records , null ) ;", "return records ; }"]}
{"ids": "16569", "code": ["@ Override public boolean equals ( Object o ) {", "if ( this == o ) {", "return true ; }", "if ( ! ( o instanceof Prototype Size ) ) {", "return false ; }", "Prototype Size size = ( Prototype Size ) o ;", "return prototype . equals ( size . prototype ) ; }"]}
{"ids": "64231", "code": ["public static boolean is Valid Vector ( Vector 2 f vector ) {", "if ( vector == null ) {", "return false ; }", "if ( Float . is Na N ( vector . x ) || Float . is Na N ( vector . y ) ) {", "return false ; }", "if ( Float . is Infinite ( vector . x ) || Float . is Infinite ( vector . y ) ) {", "return false ; }", "return true ; }"]}
{"ids": "80038", "code": ["public boolean is Obsessional ( ) {", "return type String . contains ( SUFFIX OBSESSIONAL ) ; }"]}
{"ids": "74203", "code": ["@ edu . umd . cs . findbugs . annotations . Suppress FB Warnings ( value = STR_ , justification = STR_ ) public void change Loco Speed ( Dcc Throttle t , Block blk , float speed ) {", "if ( blk == referenced && speed == desired Speed Step ) {", "return ; }", "float block Length = blk . get Length Mm ( ) ;", "if ( blk == referenced ) {", "distance Remaining = distance Remaining - get Distance Travelled ( throttle . get Is Forward ( ) , throttle . get Speed Setting ( ) , ( ( float ) ( System . nano Time ( ) - last Time Timer Started ) / NUM_ ) ) ;", "block Length = distance Remaining ;", "log . debug ( STR_ ) ; }", "else {", "referenced = blk ; }", "change Loco Speed ( t , block Length , speed ) ; }"]}
{"ids": "47875", "code": ["public boolean remove ( Object target Child ) {", "return remove ( target Child , true ) ; }"]}
{"ids": "28959", "code": ["private void notify Class Observers ( Class Descriptor class Descriptor ) {", "for ( I Class Observer observer : class Observer List ) {", "observer . observe Class ( class Descriptor ) ; } }"]}
{"ids": "46930", "code": ["public void dup 2 ( ) {", "mv . visit Insn ( Opcodes . DUP 2 ) ; }"]}
{"ids": "55959", "code": ["public static Native Page create Native Page For URL ( String url , Native Page candidate Page , Tab tab , Tab Model Selector tab Model Selector , Activity activity ) {", "return create Native Page For URL ( url , candidate Page , tab , tab Model Selector , activity , tab . is Incognito ( ) ) ; }"]}
{"ids": "67770", "code": ["protected void throw Parse Exception ( Parse Exception e ) throws Parse Exception {", "if ( locator != null ) {", "String element Location = STR_ ;", "if ( cur Handler != null ) {", "element Location += STR_ + cur Handler . q Name ; }", "String location = STR_ + String . value Of ( locator . get Line Number ( ) ) + STR_ + String . value Of ( locator . get Column Number ( ) ) + element Location + STR_ ;", "Log Utils . log Exception ( logger , Level . FINE , location , e ) ;", "throw new Parse Exception ( location + e . get Message ( ) , e ) ; }", "else {", "Log Utils . log Exception ( logger , Level . FINE , null , e ) ;", "throw e ; } }"]}
{"ids": "38326", "code": ["public Custom Editor ( ) {", "set Layout ( new Border Layout ( ) ) ;", "add ( m Label , Border Layout . CENTER ) ;", "m Delete But . add Action Listener ( m Inner Action Listener ) ;", "m Edit But . add Action Listener ( m Inner Action Listener ) ;", "m Up But . add Action Listener ( m Inner Action Listener ) ;", "m Down But . add Action Listener ( m Inner Action Listener ) ;", "m Add But . add Action Listener ( m Inner Action Listener ) ;", "m Element List . add List Selection Listener ( m Inner Selection Listener ) ;", "m Element List . add Mouse Listener ( m Inner Mouse Listener ) ;", "m Add But . set Tool Tip Text ( STR_ ) ;", "m Delete But . set Tool Tip Text ( STR_ ) ;", "m Edit But . set Tool Tip Text ( STR_ ) ;", "m Up But . set Tool Tip Text ( STR_ ) ;", "m Down But . set Tool Tip Text ( STR_ ) ; }"]}
{"ids": "83888", "code": ["public Memoid One ( Function < ? super Input , ? extends Output > fn , Bi Predicate < Input , Input > equality ) {", "fn = Objects . require Non Null ( fn ) ;", "equality = Objects . require Non Null ( equality ) ; }"]}
{"ids": "7166", "code": ["public static EP Type single Value ( Class single Value Type ) {", "if ( single Value Type != null && single Value Type . is Array ( ) ) {", "return new Class Multi Valued EP Type ( single Value Type , single Value Type . get Component Type ( ) ) ; }", "return new Class EP Type ( single Value Type ) ; }"]}
{"ids": "20103", "code": ["private static Class < ? > convert Field Type ( String field Type ) {", "if ( field Type Map . contains Key ( field Type ) ) {", "return field Type Map . get ( field Type ) ; }", "return null ; }"]}
{"ids": "15417", "code": ["void add XML Element After Token Index ( int last Token Index , XML Element element , boolean add After New Line ) throws Exception {", "add XML Element After Token Index ( last Token Index , element , add After New Line , true ) ; }"]}
{"ids": "70127", "code": ["public void collapse Building ( Building bldg ) {", "buildings . remove Element ( bldg ) ;", "Enumeration < Coords > bldg Coords = bldg . get Coords ( ) ;", "while ( bldg Coords . has More Elements ( ) ) {", "final Coords coords = bldg Coords . next Element ( ) ;", "collapse Building ( coords ) ; } }"]}
{"ids": "59953", "code": ["@ Rpc Method public void detach ISO ( String vm Id , boolean is Delete File , Async Method Callback < Host . Async Client . detach iso call > handler ) throws Rpc Exception {", "ensure Client ( ) ;", "Detach ISO Request detach ISO Request = new Detach ISO Request ( vm Id ) ;", "detach ISO Request . set Delete file ( is Delete File ) ;", "client Proxy . set Timeout ( DETACH ISO TIMEOUT MS ) ;", "logger . info ( STR_ , vm Id , get Host Ip ( ) , detach ISO Request ) ;", "try {", "client Proxy . detach iso ( detach ISO Request , handler ) ; }", "catch ( T Exception e ) {", "throw new Rpc Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "59999", "code": ["private String read Nfc Error Msg ( Byte Buffer reply ) throws IO Exception {", "int error Type = reply . get Int ( ) ;", "int error Code = reply . get Int ( ) ;", "int msg Len = reply . get Int ( ) ;", "if ( msg Len == NUM_ ) {", "return STR_ ; }", "Byte Buffer msg Buffer = Byte Buffer . allocate ( msg Len ) ;", "read Fully ( msg Buffer ) ;", "String error Msg = new String ( msg Buffer . array ( ) , NUM_ , msg Len - NUM_ , Charsets . US ASCII ) ;", "return String . format ( STR_ , error Type , error Code , error Msg ) ; }"]}
{"ids": "59828", "code": ["private void show ( boolean show ) {", "if ( show ) {", "if ( m X Fade != null ) {", "m X Fade . cancel ( ) ; }", "m State = STATE PIE ;", "m Current Item = null ;", "Pie Item root = get Root ( ) ;", "for ( Pie Item open Item : m Open ) {", "if ( open Item . has Items ( ) ) {", "for ( Pie Item item : open Item . get Items ( ) ) {", "item . set Selected ( false ) ; } } }", "m Label . set Text ( STR_ ) ;", "m Open . clear ( ) ;", "m Open . add ( root ) ;", "layout Pie ( ) ;", "fade In ( ) ; }", "else {", "m State = STATE IDLE ;", "m Tap Mode = false ;", "if ( m X Fade != null ) {", "m X Fade . cancel ( ) ; }", "if ( m Label != null ) {", "m Label . set Text ( STR_ ) ; } }", "set Visible ( show ) ;", "m Handler . send Empty Message ( show ? MSG OPEN : MSG CLOSE ) ; }"]}
{"ids": "21927", "code": ["private synchronized void persist Profile And Notify Change ( Authn Provider modified Provider , boolean new Object ) {", "modified Provider . set Last Modified ( System . current Time Millis ( ) ) ;", "if ( new Object ) {", "db Client . create Object ( modified Provider ) ; }", "else {", "db Client . persist Object ( modified Provider ) ; }", "notify Change ( ) ; }"]}
{"ids": "73316", "code": ["public void add Undoable Action ( Undoable Action action ) {", "undo Stack . push ( action ) ;", "redo Stack . remove All Elements ( ) ; }"]}
{"ids": "10183", "code": ["public Int Array List ( int [ ] data ) {", "array = new int [ ( int ) ( data . length * NUM_ ) + NUM_ ] ;", "size = data . length ;", "System . arraycopy ( data , NUM_ , array , NUM_ , size ) ; }"]}
{"ids": "40227", "code": ["private void add Ping Time Data ( long sample ) {", "last Ping Times Lock . lock ( ) ;", "try {", "if ( last Ping Times == null ) {", "last Ping Times = new long [ PING MOVING AVERAGE WINDOW ] ;", "Arrays . fill ( last Ping Times , sample ) ; }", "else {", "System . arraycopy ( last Ping Times , NUM_ , last Ping Times , NUM_ , last Ping Times . length - NUM_ ) ;", "last Ping Times [ last Ping Times . length - NUM_ ] = sample ; } }", "finally {", "last Ping Times Lock . unlock ( ) ; } }"]}
{"ids": "87062", "code": ["public String Builder encode Body ( String Builder buffer ) {", "return buffer . append ( content Encoding ) ; }"]}
{"ids": "44936", "code": ["public String substring ( String subject , int start , int stop ) {", "if ( stop == - NUM_ || stop >= subject . length ( ) ) {", "return subject . substring ( start ) ; }", "return subject . substring ( start , stop ) ; }"]}
{"ids": "74143", "code": ["public boolean control Run Train ( int idx ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + idx + STR_ + run Mode + STR_ + get Display Name ( ) ) ; }", "boolean ret = true ;", "int old Index = - MODE MANUAL ;", "if ( engineer == null ) {", "switch ( idx ) {", "case HALT :", "case RESUME :", "case RETRY :", "ret = false ;", "break ;", "case ABORT :", "if ( run Mode == Warrant . MODE LEARN ) {", "fire Property Change ( STR_ , Integer . value Of ( - MODE LEARN ) , Integer . value Of ( idx Current Order ) ) ; }", "else {", "stop Warrant ( true ) ; }", "break ; } }", "else {", "synchronized ( engineer ) {", "old Index = engineer . get Run State ( ) ;", "switch ( idx ) {", "case HALT :", "engineer . set Halt ( true ) ;", "break ;", "case RESUME :", "engineer . set Halt ( false ) ;", "restart ( ) ;", "ret = move Into Next Block ( MID ) ;", "break ;", "case RETRY :", "Block Order bo = get Block Order At ( idx Current Order + NUM_ ) ;", "ret = false ;", "if ( bo != null ) {", "O Block b = bo . get Block ( ) ;", "if ( b . allocate ( this ) == null && ( b . get State ( ) & O Block . OCCUPIED ) != NUM_ ) {", "idx Current Order ++ ;", "if ( b . equals ( stopping Block ) ) {", "stopping Block . remove Property Change Listener ( this ) ;", "stopping Block = null ; }", "bo . set Path ( this ) ;", "restart ( ) ;", "going Active ( b ) ;", "ret = true ; } }", "break ;", "case ABORT :", "stop Warrant ( true ) ;", "break ; } } }", "if ( ret ) {", "fire Property Change ( STR_ , Integer . value Of ( old Index ) , Integer . value Of ( idx ) ) ; }", "return ret ; }"]}
{"ids": "81026", "code": ["public void remove Custom Sash Form Listener ( I Custom Sash Form Listener listener ) {", "if ( custom Sash Form Listeners != null ) {", "custom Sash Form Listeners . remove ( listener ) ; } }"]}
{"ids": "86743", "code": ["@ Override public void close ( ) throws IO Exception {", "if ( m Buffer Count > NUM_ ) {", "try {", "m Queue . write ( m Buffer , NUM_ , m Buffer Count ) ; }", "catch ( Interrupted Exception e ) {", "throw new IO Exception ( STR_ ) ; }", "m Buffer Count = NUM_ ; }", "m Queue . close ( ) ;", "try {", "m Thread . join ( ) ; }", "catch ( Interrupted Exception e ) {", "throw new IO Exception ( STR_ ) ; }", "finally {", "super . close ( ) ; }", "check Exception ( ) ; }"]}
{"ids": "64675", "code": ["public static int parse String As Int ( String in ) throws Index Parse Field Exception {", "try {", "return Integer . parse Int ( in ) ; }", "catch ( Number Format Exception e ) {", "throw new Index Parse Field Exception ( in , e ) ; } }"]}
{"ids": "49366", "code": ["public Zone Rules Builder add Window ( Zone Offset standard Offset , Local Date Time until , Time Definition until Definition ) {", "Objects . require Non Null ( standard Offset , STR_ ) ;", "Objects . require Non Null ( until , STR_ ) ;", "Objects . require Non Null ( until Definition , STR_ ) ;", "TZ Window window = new TZ Window ( standard Offset , until , until Definition ) ;", "if ( window List . size ( ) > NUM_ ) {", "TZ Window previous = window List . get ( window List . size ( ) - NUM_ ) ;", "window . validate Window Order ( previous ) ; }", "window List . add ( window ) ;", "return this ; }"]}
{"ids": "5477", "code": ["public Hashtable < I Point , List < I Line Segment > > intersections ( Iterator < I Line Segment > it ) {", "Collection < I Line Segment > c = new Array List < I Line Segment > ( ) ;", "while ( it . has Next ( ) ) {", "c . add ( it . next ( ) ) ; }", "return intersections ( c . to Array ( new I Line Segment [ ] { } ) ) ; }"]}
{"ids": "82051", "code": ["public boolean is TTF Native Font ( ) {", "return ttf ; }"]}
{"ids": "33273", "code": ["private void register Providers ( ) {", "final Dev Machine dev Machine = app Context . get Dev Machine ( ) ;", "if ( dev Machine == null ) {", "return ; }", "final Set < Macro > providers = get Macros ( dev Machine ) ;", "check Not Null ( providers ) ;", "if ( providers . is Empty ( ) ) {", "return ; }", "provider Registry . register ( providers ) ; }"]}
{"ids": "74971", "code": ["private static long sign From Bit anti Cyclic ( final double value ) {", "return Double . double To Raw Long Bits ( value ) > > NUM_ | NUM_ ; }"]}
{"ids": "59672", "code": ["private void analyze Class Fields ( String class Name , int action ) {", "try {", "Class < ? > dynamic Class = Class . for Name ( class Name ) ;", "Field [ ] fields = dynamic Class . get Declared Fields ( ) ;", "for ( Field field : fields ) {", "if ( is Private And Non Primitive ( field ) ) {", "one To Any Conditions ( class Name , field , action ) ;", "many To Any Conditions ( class Name , field , action ) ; } } }", "catch ( Class Not Found Exception ex ) {", "ex . print Stack Trace ( ) ;", "throw new Database Generate Exception ( Database Generate Exception . CLASS NOT FOUND + class Name ) ; } }"]}
{"ids": "37228", "code": ["public static void load All ( final J Frame parent , final I Debugger debugger , final I Address offset , final int size ) {", "check Arguments ( parent , debugger , offset ) ;", "final C Dump All Waiter waiter = new C Dump All Waiter ( debugger , offset , size ) ;", "C Progress Dialog . show Endless ( parent , STR_ + STR_ , waiter ) ;", "if ( waiter . get Exception ( ) != null ) {", "C Utility Functions . log Exception ( waiter . get Exception ( ) ) ;", "final String inner Message = STR_ + STR_ ;", "final String inner Description = C Utility Functions . create Description ( String . format ( STR_ , offset . to Hex String ( ) ) , new String [ ] { STR_ } , new String [ ] { STR_ } ) ;", "Navi Error Dialog . show ( parent , inner Message , inner Description , waiter . get Exception ( ) ) ; } }"]}
{"ids": "85658", "code": ["public static boolean delete Directory ( String directory , boolean use OS Native Delete ) throws IO Exception {", "boolean result = false ;", "if ( ! use OS Native Delete ) {", "File dir = new File ( directory ) ;", "for ( File file : dir . list Files ( ) ) {", "if ( file . delete ( ) ) {", "log . debug ( STR_ , file . get Name ( ) ) ; }", "else {", "log . debug ( STR_ , file . get Name ( ) ) ;", "file . delete On Exit ( ) ; }", "file = null ; }", "if ( dir . delete ( ) ) {", "log . debug ( STR_ ) ;", "result = true ; }", "else {", "log . debug ( STR_ ) ;", "dir . delete On Exit ( ) ; }", "dir = null ; }", "else {", "Process p = null ;", "Thread std = null ;", "try {", "Runtime run Time = Runtime . get Runtime ( ) ;", "log . debug ( STR_ ) ;", "if ( File . separator Char == STR_ ) {", "p = run Time . exec ( STR_ + directory . replace ( STR_ , STR_ ) + STR_ ) ; }", "else {", "p = run Time . exec ( STR_ + directory . replace ( STR_ , File . separator Char ) ) ; }", "std = std Out ( p ) ;", "while ( std . is Alive ( ) ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Exception e ) { } }", "log . debug ( STR_ ) ;", "result = true ; }", "catch ( Exception e ) {", "log . error ( STR_ , e ) ; }", "finally {", "if ( null != p ) {", "log . debug ( STR_ ) ;", "p . destroy ( ) ;", "p = null ; }", "std = null ; } }", "return result ; }"]}
{"ids": "74336", "code": ["public void write Operations Car File ( ) {", "make Backup File ( default Operations Filename ( ) ) ;", "try {", "if ( ! check File ( default Operations Filename ( ) ) ) {", "java . io . File file = new java . io . File ( default Operations Filename ( ) ) ;", "java . io . File parent Dir = file . get Parent File ( ) ;", "if ( ! parent Dir . exists ( ) ) {", "if ( ! parent Dir . mkdir ( ) ) {", "log . error ( STR_ ) ; } }", "if ( file . create New File ( ) ) {", "log . debug ( STR_ ) ; } }", "write File ( default Operations Filename ( ) ) ; }", "catch ( Exception e ) {", "log . error ( STR_ + e ) ; } }"]}
{"ids": "55237", "code": ["private boolean has New Followers ( List < Follower > followers ) {", "return ! followers . is Empty ( ) && followers . get ( NUM_ ) . new Follower ; }"]}
{"ids": "16134", "code": ["private void on Track Point Element Start ( Attributes attributes ) throws SAX Exception {", "String latitude = attributes . get Value ( ATT LAT ) ;", "String longitude = attributes . get Value ( ATT LON ) ;", "if ( latitude == null || longitude == null ) {", "throw new SAX Exception ( create Error Message ( STR_ ) ) ; }", "try {", "latitude Value = Double . parse Double ( latitude ) ;", "longitude Value = Double . parse Double ( longitude ) ; }", "catch ( Number Format Exception e ) {", "throw new SAX Exception ( create Error Message ( STR_ + latitude + STR_ + longitude ) , e ) ; } }"]}
{"ids": "64754", "code": ["protected final void fire Property Change ( Property Change Event evt ) {", "pcs . fire Property Change ( evt ) ; }"]}
{"ids": "37492", "code": ["private void draw Background ( final Graphics g ) {", "g . set Color ( m bg Color Offset ) ;", "g . fill Rect ( - m first Column * m char Width , NUM_ , m offset View Width , get Height ( ) ) ; }"]}
{"ids": "78339", "code": ["public void add Unique Attribute ( final String element Name , final String attr Name ) {", "if ( ( element Name != null ) && ( attr Name != null ) ) {", "unique Element Attr Map . put ( element Name , attr Name ) ; } }"]}
{"ids": "59965", "code": ["private static Delete Vm Response check Delete Vm Response ( Delete Vm Response delete Vm Response ) throws Rpc Exception {", "logger . info ( STR_ , delete Vm Response ) ;", "switch ( delete Vm Response . get Result ( ) ) {", "case OK :", "break ;", "case SYSTEM ERROR :", "throw new System Error Exception ( delete Vm Response . get Error ( ) ) ;", "case VM NOT FOUND :", "throw new Vm Not Found Exception ( delete Vm Response . get Error ( ) ) ;", "case VM NOT POWERED OFF :", "throw new Vm Not Powered Off Exception ( delete Vm Response . get Error ( ) ) ;", "default :", "throw new Rpc Exception ( String . format ( STR_ , delete Vm Response . get Result ( ) ) ) ; }", "return delete Vm Response ; }"]}
{"ids": "69888", "code": ["public Blaze Value Factory value Factory ( ) {", "return vf ; }"]}
{"ids": "13929", "code": ["public Stateful Refresh Token ( Json Value token ) throws Invalid Grant Exception {", "super ( token ) ;", "if ( ! OAUTH REFRESH TOKEN . equals ( get Token Name ( ) ) ) {", "throw new Invalid Grant Exception ( STR_ + get Token Id ( ) ) ; } }"]}
{"ids": "71734", "code": ["public void put Style ( String style Id , Style Selector style Selector ) {", "try {", "int id = Integer . parse Int ( style Id ) ;", "m Max Style Id = Math . max ( m Max Style Id , id ) ; }", "catch ( Number Format Exception e ) { }", "m Styles . put ( style Id , style Selector ) ; }"]}
{"ids": "24242", "code": ["private static String extract Client Name ( String client Id , String host ) {", "String host Excluded Id = STR_ ;", "if ( ( is I Pv 6 ( host ) || is I Pv 4 ( host ) ) && client Id . starts With ( host ) ) {", "host Excluded Id = client Id . substring ( host . length ( ) ) ; }", "else {", "int first Dot Index = host . index Of ( STR_ ) ;", "if ( first Dot Index != - NUM_ ) {", "String host Short Name = host . substring ( NUM_ , first Dot Index ) ;", "host Excluded Id = client Id . substring ( host Short Name . length ( ) ) ; } }", "String vm PID And Kind Regex = STR_ ;", "String regex = STR_ ;", "String name = NOT AVAILABLE ;", "String temp = host Excluded Id ;", "int open Index = temp . index Of ( STR_ ) ;", "if ( open Index != - NUM_ ) {", "regex = vm PID And Kind Regex + regex ; }", "if ( temp . matches ( regex ) ) {", "String [ ] splitted = temp . split ( STR_ ) ;", "name = splitted [ splitted . length - NUM_ ] ; }", "return name ; }"]}
{"ids": "56550", "code": ["public static < T > Fast Future < T > from Completable Future ( final Completable Future < T > cf ) {", "final Fast Future < T > f = new Fast Future < > ( ) ;", "cf . then Accept ( null ) ;", "cf . exceptionally ( null ) ;", "return f ; }"]}
{"ids": "79187", "code": ["public static boolean is Place Action ( Inventory Action action ) {", "switch ( action ) {", "case SWAP WITH CURSOR :", "case PLACE ONE :", "case PLACE ALL :", "case PLACE SOME :", "return true ; }", "return false ; }"]}
{"ids": "81977", "code": ["public static byte [ ] read Input Stream ( Input Stream i ) throws IO Exception {", "Byte Array Output Stream b = new Byte Array Output Stream ( ) ;", "copy ( i , b ) ;", "return b . to Byte Array ( ) ; }"]}
{"ids": "6519", "code": ["public void play Media ( boolean show Player Window ) {", "String filename = stop And Prepare Filename ( ) ;", "if ( filename . length ( ) > NUM_ ) {", "M Player Mediator mplayer Mediator = M Player Mediator . instance ( ) ;", "if ( mplayer Mediator != null ) {", "mplayer Mediator . show Player Window ( show Player Window ) ; }", "mplayer . open ( filename , get Adjusted Volume ( ) ) ; }", "notify State ( get State ( ) ) ; }"]}
{"ids": "11947", "code": ["public static String to UTF 8 String ( String s ) {", "return new String ( s . get Bytes ( ) , Charset . for Name ( Panbox Constants . STANDARD CHARSET ) ) ; }"]}
{"ids": "32276", "code": ["public static int encode Cache Flags ( Collection < Grid Client Cache Flag > flag Set ) {", "int bits = NUM_ ;", "if ( flag Set . contains ( Grid Client Cache Flag . SKIP STORE ) ) bits |= NUM_ ;", "return bits ; }"]}
{"ids": "28392", "code": ["public void add ( Data Source source , boolean visible ) {", "add ( data . size ( ) , source , visible ) ; }"]}
{"ids": "62535", "code": ["private static synchronized String format And Parse ( Simple Date Format format Date , Simple Date Format parse Date , String text ) {", "try {", "Date date = parse Date . parse ( text ) ;", "String result = format Date . format ( date ) ;", "return result ; }", "catch ( Parse Exception e ) {", "logger . warning ( STR_ + text ) ; }", "return STR_ ; }"]}
{"ids": "39919", "code": ["private void throw Array Index Out Of Bounds Exception ( int item Index ) {", "throw new Array Index Out Of Bounds Exception ( STR_ + STR_ + space Items . size ( ) + STR_ + item Index ) ; }"]}
{"ids": "49476", "code": ["private Locus Info create Next Uncovered Locus Info ( final Locus stop Before Locus ) {", "while ( last Reference Sequence <= stop Before Locus . get Sequence Index ( ) && last Reference Sequence <= reference Sequence Mask . get Max Sequence Index ( ) ) {", "if ( last Reference Sequence == stop Before Locus . get Sequence Index ( ) && last Position + NUM_ >= stop Before Locus . get Position ( ) ) {", "return null ; }", "final int nextbit = reference Sequence Mask . next Position ( last Reference Sequence , last Position ) ;", "if ( nextbit == - NUM_ ) {", "if ( last Reference Sequence == stop Before Locus . get Sequence Index ( ) ) {", "last Position = stop Before Locus . get Position ( ) ;", "return null ; }", "last Reference Sequence ++ ;", "last Position = NUM_ ; }", "else if ( last Reference Sequence < stop Before Locus . get Sequence Index ( ) || nextbit < stop Before Locus . get Position ( ) ) {", "last Position = nextbit ;", "return new Locus Info ( get Reference Sequence ( last Reference Sequence ) , last Position ) ; }", "else if ( nextbit >= stop Before Locus . get Position ( ) ) {", "return null ; } }", "return null ; }"]}
{"ids": "7046", "code": ["public static void launch Email Intent ( final Activity activity , String addr , String text ) {", "Log . i ( LOG TAG , STR_ + activity . get Local Class Name ( ) ) ;", "Intent email Intent = new Intent ( Intent . ACTION SEND ) ;", "email Intent . put Extra ( Intent . EXTRA EMAIL , new String [ ] { addr } ) ;", "email Intent . set Type ( STR_ ) ;", "Package Manager emailpackage Manager = activity . get Package Manager ( ) ;", "List < Resolve Info > emailresolve Infos = emailpackage Manager . query Intent Activities ( email Intent , NUM_ ) ;", "if ( emailresolve Infos . size ( ) > NUM_ ) {", "activity . start Activity ( email Intent ) ; } }"]}
{"ids": "32761", "code": ["public int count ( ) {", "return n ; }"]}
{"ids": "10982", "code": ["public void write LE Chars ( String s ) throws IO Exception {", "int length = s . length ( ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "int c = s . char At ( i ) ;", "out . write ( c & NUM_ ) ;", "out . write ( ( c > > > NUM_ ) & NUM_ ) ; }", "written += length * NUM_ ; }"]}
{"ids": "83352", "code": ["public void write To File ( String filename ) {", "Grid Utils . write Spatial Grid Table ( this , filename ) ; }"]}
{"ids": "42574", "code": ["public void read Config ( String filename ) throws File Not Found Exception {", "if ( filename == null || filename . equals ( STR_ ) ) return ;", "read Config ( new File Reader ( filename ) ) ; }"]}
{"ids": "80383", "code": ["private void apply Trading Bonus ( Player player ) {", "player . increment Tradescore ( ) ; }"]}
{"ids": "37232", "code": ["private static void create Combined Trace ( final Trace List new Trace , final List < Trace List > traces , final Set < Breakpoint Address > addresses ) {", "final Set < Breakpoint Address > visited Addresses = new Linked Hash Set < Breakpoint Address > ( ) ;", "for ( final Trace List trace : traces ) {", "for ( final I Trace Event event : trace ) {", "final Breakpoint Address address = event . get Offset ( ) ;", "if ( ! addresses . contains ( address ) ) {", "continue ; }", "if ( visited Addresses . contains ( address ) ) {", "continue ; }", "visited Addresses . add ( address ) ;", "new Trace . add Event ( event ) ; } } }"]}
{"ids": "27588", "code": ["public void interrupt All ( ) {", "synchronized ( known Actor Tasks ) {", "for ( Future < Void > ft : known Actor Tasks ) {", "ft . cancel ( true ) ; }", "thread Guard . interrupt All ( ) ; } }"]}
{"ids": "53898", "code": ["@ Suppress Warnings ( STR_ ) public void register Default Device Types ( ) {", "final Hash Map < String , String > devices List = Default Platform . get Device Service Map ( ) ;", "for ( Hash Map . Entry < String , String > entry : devices List . entry Set ( ) ) {", "String key = entry . get Key ( ) ;", "String value = entry . get Value ( ) ;", "try {", "register Device Service ( ( Class < Device Service > ) Class . for Name ( key ) , ( Class < Discovery Provider > ) Class . for Name ( value ) ) ; }", "catch ( Class Not Found Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "55057", "code": ["private static void remove Dependency Subsets ( String swc Location , Map < String , Set < String > > dependency Map , Swc Dependency Info Impl dep Info ) {", "Set < String > remove Set = new Hash Set < String > ( ) ;", "Swc External Script Info external Info = dep Info . get Swc External Script Info ( swc Location ) ;", "Map < String , Set < String > > externals By Swc = new Hash Map < String , Set < String > > ( ) ;", "for ( String swc Depend Location : dependency Map . get ( swc Location ) ) {", "for ( String swc Depend Location 2 : dependency Map . get ( swc Location ) ) {", "if ( swc Depend Location . equals ( swc Depend Location 2 ) ) continue ;", "Set < String > external Scripts = externals By Swc . get ( swc Depend Location ) ;", "Set < String > external Scripts 2 = externals By Swc . get ( swc Depend Location 2 ) ;", "if ( external Scripts == null ) {", "external Scripts = external Info . get External Scripts ( swc Depend Location ) ;", "externals By Swc . put ( swc Depend Location , external Scripts ) ; }", "if ( external Scripts 2 == null ) {", "external Scripts 2 = external Info . get External Scripts ( swc Depend Location 2 ) ;", "externals By Swc . put ( swc Depend Location 2 , external Scripts 2 ) ; }", "if ( external Scripts 2 . size ( ) > external Scripts . size ( ) && external Scripts 2 . contains All ( external Scripts ) ) {", "remove Set . add ( swc Depend Location ) ;", "break ; } } }", "Set < String > dependency Set = dependency Map . get ( swc Location ) ;", "dependency Set . remove All ( remove Set ) ; }"]}
{"ids": "14783", "code": ["public void delete ( SSO Token token , String dn ) throws SMS Exception , SSO Exception {", "for ( String entry : sub Entries ( token , dn , STR_ , NUM_ , false , false ) ) {", "debug . message ( STR_ , entry ) ;", "delete ( token , get Naming Attribute ( ) + STR_ + entry + STR_ + dn ) ; }", "for ( String sub Org : search Sub Org Names ( token , dn , STR_ , NUM_ , false , false , false ) ) {", "debug . message ( STR_ , sub Org ) ;", "delete ( token , sub Org ) ; }", "delete ( token . get Principal ( ) , dn ) ;", "object Changed ( dn , DELETE ) ; }"]}
{"ids": "24525", "code": ["private static < T extends Abstract Block Base < T > > void enqueue Successors ( T block , Priority Queue < T > worklist , Bit Set visited Blocks ) {", "for ( T successor : block . get Successors ( ) ) {", "if ( ! visited Blocks . get ( successor . get Id ( ) ) ) {", "visited Blocks . set ( successor . get Id ( ) ) ;", "worklist . add ( successor ) ; } } }"]}
{"ids": "26075", "code": ["public void add Role ( String role ) {", "if ( role != null ) {", "roles . add ( role ) ; } }"]}
{"ids": "37206", "code": ["public C Modules Check Box Panel ( final C Modules Table Model modules Table Model ) {", "super ( new Border Layout ( ) ) ;", "final J Check Box check Box = new J Check Box ( STR_ ) ;", "check Box . add Item Listener ( new Internal Checkbox Listener ( ) ) ;", "add ( check Box ) ;", "m modules Table Model = modules Table Model ; }"]}
{"ids": "3817", "code": ["public Q Date ( ) {", "this ( gmt Time Zone ) ; }"]}
{"ids": "56358", "code": ["protected Tuple < Blob Store Index Shard Snapshots , Integer > build Blob Store Index Shard Snapshots ( Map < String , Blob Meta Data > blobs ) {", "int latest = - NUM_ ;", "for ( String name : blobs . key Set ( ) ) {", "if ( name . starts With ( SNAPSHOT INDEX PREFIX ) ) {", "try {", "int gen = Integer . parse Int ( name . substring ( SNAPSHOT INDEX PREFIX . length ( ) ) ) ;", "if ( gen > latest ) {", "latest = gen ; } }", "catch ( Number Format Exception ex ) {", "logger . warn ( STR_ , name ) ; } } }", "if ( latest >= NUM_ ) {", "try {", "return new Tuple < > ( index Shard Snapshots Format . read ( blob Container , Integer . to String ( latest ) ) , latest ) ; }", "catch ( IO Exception e ) {", "logger . warn ( STR_ , e , SNAPSHOT INDEX PREFIX + latest ) ; } }", "List < Snapshot Files > snapshots = new Array List < > ( ) ;", "for ( String name : blobs . key Set ( ) ) {", "try {", "Blob Store Index Shard Snapshot snapshot = null ;", "if ( name . starts With ( SNAPSHOT PREFIX ) ) {", "snapshot = index Shard Snapshot Format . read Blob ( blob Container , name ) ; }", "else if ( name . starts With ( LEGACY SNAPSHOT PREFIX ) ) {", "snapshot = index Shard Snapshot Legacy Format . read Blob ( blob Container , name ) ; }", "if ( snapshot != null ) {", "snapshots . add ( new Snapshot Files ( snapshot . snapshot ( ) , snapshot . index Files ( ) ) ) ; } }", "catch ( IO Exception e ) {", "logger . warn ( STR_ , e , name ) ; } }", "return new Tuple < > ( new Blob Store Index Shard Snapshots ( snapshots ) , - NUM_ ) ; }"]}
{"ids": "44667", "code": ["protected Maple Quest Requirement ( Maple Quest quest , Read Bin data ) throws IO Exception {", "this . quest = quest ;", "this . day By Day = data . read Byte ( ) > NUM_ ;", "this . normal Auto Start = data . read Byte ( ) > NUM_ ;", "this . lvmin = data . read Short ( ) ;", "this . lvmax = data . read Short ( ) ;", "this . mbmin = data . read Short ( ) ;", "this . charisma Min = data . read Short ( ) ;", "this . charm Min = data . read Short ( ) ;", "this . craft Min = data . read Short ( ) ;", "this . insight Min = data . read Short ( ) ;", "this . sense Min = data . read Short ( ) ;", "this . will Min = data . read Short ( ) ;", "this . pop = data . read Short ( ) ;", "this . pettamenessmin = data . read Short ( ) ;", "this . sub Job Flag = data . read Short ( ) ;", "this . npc = data . read Int ( ) ;", "this . interval = data . read Int ( ) ;", "this . end = data . read String ( ) ;", "this . startscript = data . read String ( ) ;", "this . endscript = data . read String ( ) ;", "short size = data . read Short ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int field = data . read Int ( ) ;", "field Enter . add ( field ) ; }", "size = data . read Short ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "short job = data . read Short ( ) ;", "jobs . add ( job ) ; }", "size = data . read Short ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int id = data . read Int ( ) ;", "boolean acquire = data . read Byte ( ) > NUM_ ;", "skills . put ( id , acquire ) ; }", "size = data . read Short ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int id = data . read Int ( ) ;", "byte state = data . read Byte ( ) ;", "byte order = data . read Byte ( ) ;", "quests . put ( id , state ) ; }", "size = data . read Short ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int id = data . read Int ( ) ;", "int count = data . read Int ( ) ;", "byte order = data . read Byte ( ) ;", "items . put ( id , count ) ; }", "size = data . read Short ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int id = data . read Int ( ) ;", "int count = data . read Int ( ) ;", "mobs . put ( id , count ) ; }", "size = data . read Short ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int id = data . read Int ( ) ;", "pets . add ( id ) ; } }"]}
{"ids": "4457", "code": ["public boolean is Armed ( ) {", "return other . is Armed ( ) ; }"]}
{"ids": "27141", "code": ["public static Attrib Key for Html Attrib ( El Key el , String local Name ) {", "return new Attrib Key ( el , HTML NS , local Name ) ; }"]}
{"ids": "35746", "code": ["Sparse Array ( Class < L > linear Array Type , int [ ] row Indices , int [ ] col Indices , L real Values , L imag Values , int num Rows , int num Cols ) {", "validate User Supplied Parameters ( linear Array Type , row Indices , col Indices , real Values , imag Values ) ;", "base Component Type = linear Array Type . get Component Type ( ) ;", "output Array Type = ( Class < L [ ] > ) Array Utils . get Array Class ( base Component Type , NUM_ ) ;", "Map < Sparse Key , Sparse Value > sparse Map = create Sparse Map ( linear Array Type , row Indices , col Indices , real Values , imag Values , num Rows , num Cols ) ;", "num Rows = num Rows ;", "num Cols = num Cols ;", "Array List < Sparse Key > keys = new Array List < Sparse Key > ( sparse Map . key Set ( ) ) ;", "Collections . sort ( keys ) ;", "row Indices = new int [ keys . size ( ) ] ;", "col Indices = new int [ keys . size ( ) ] ;", "linear Indices = new int [ keys . size ( ) ] ;", "real Values = linear Array Type . cast ( Array . new Instance ( base Component Type , keys . size ( ) ) ) ;", "imag Values = imag Values == null ? null : linear Array Type . cast ( Array . new Instance ( base Component Type , keys . size ( ) ) ) ;", "for ( int i = NUM_ ; i < keys . size ( ) ; i ++ ) {", "Sparse Key key = keys . get ( i ) ;", "row Indices [ i ] = key . row ;", "col Indices [ i ] = key . col ;", "linear Indices [ i ] = key . linear Index ;", "Sparse Value value = sparse Map . get ( key ) ;", "set Sparse Value ( value , real Values , imag Values , i ) ; } }"]}
{"ids": "73826", "code": ["private String id String ( int id 1 , int id 2 ) {", "return STR_ + Integer . to Hex String ( id 2 & NUM_ ) + STR_ + Integer . to Hex String ( id 1 & NUM_ ) + STR_ + ( ( id 2 & NUM_ ) * NUM_ + ( id 1 & NUM_ ) ) + STR_ ; }"]}
{"ids": "22722", "code": ["public Etag Cache reset Stats ( ) {", "hits . set ( NUM_ ) ;", "misses . set ( NUM_ ) ;", "return this ; }"]}
{"ids": "69999", "code": ["private void show Filter Dialog ( Filter filter ) {", "int sort Order = m Adapter . get Count ( ) - NUM_ ;", "if ( filter == null ) {", "Edit Filter Activity . create New Filter ( get Activity ( ) , sort Order ) ; }", "else {", "Edit Filter Activity . edit Filter ( get Activity ( ) , filter , sort Order ) ; } }"]}
{"ids": "11697", "code": ["public static int num Pixels Between ( int x 1 , int y 1 , int x 2 , int y 2 ) {", "return ( int ) Math . sqrt ( Math . pow ( ( double ) ( x 1 - x 2 ) , NUM_ ) + Math . pow ( ( double ) ( y 1 - y 2 ) , NUM_ ) ) ; }"]}
{"ids": "74910", "code": ["static boolean allows Popup ( Form Object form Object ) {", "switch ( form Object . get Parameter Constant ( Pdf Dictionary . Subtype ) ) {", "case Pdf Dictionary . Text :", "case Pdf Dictionary . Square :", "case Pdf Dictionary . Highlight :", "case Pdf Dictionary . Underline :", "case Pdf Dictionary . Strick Out :", "case Pdf Dictionary . Stamp :", "return true ;", "default :", "return false ; } }"]}
{"ids": "84308", "code": ["public static Local Git Repo from Current Dir ( String remote Url ) throws Validation Exception {", "Git git ;", "File git Dir = new File ( STR_ ) ;", "try {", "git = Git . open ( git Dir ) ; }", "catch ( Repository Not Found Exception rnfe ) {", "String full Path Of Current Dir = path Of ( git Dir ) ;", "File git Root = get Git Root If It Exists In One Of The Parent Directories ( new File ( full Path Of Current Dir ) ) ;", "String summary ;", "List < String > messages = new Array List < String > ( ) ;", "if ( git Root == null ) {", "summary = STR_ ;", "messages . add ( summary ) ;", "messages . add ( full Path Of Current Dir + STR_ ) ; }", "else {", "summary = STR_ ;", "messages . add ( summary ) ;", "messages . add ( full Path Of Current Dir + STR_ ) ;", "messages . add ( STR_ + path Of ( git Root ) ) ; }", "throw new Validation Exception ( summary , messages ) ; }", "catch ( Exception e ) {", "throw new Validation Exception ( STR_ + path Of ( git Dir ) + STR_ , Arrays . as List ( STR_ , e . to String ( ) ) ) ; }", "return new Local Git Repo ( git , remote Url ) ; }"]}
{"ids": "2460", "code": ["public static Vector 2 min ( Vector 2 o 1 , Vector 2 o 2 ) {", "return new Vector 2 ( Math . min ( o 1 . x , o 2 . x ) , Math . min ( o 1 . z , o 2 . z ) ) ; }"]}
{"ids": "45334", "code": ["public void serialize ( K Xml Serializer serializer ) throws IO Exception {", "m Device Info . serialize ( serializer ) ;", "serialize Host Info ( serializer ) ;", "serialize Test Summary ( serializer ) ;", "monkey Tag . serialize ( serializer ) ;", "List < Test Package Result > pkgs = new Array List < Test Package Result > ( m Package Map . values ( ) ) ;", "Collections . sort ( pkgs , new Pkg Comparator ( ) ) ;", "for ( Test Package Result r : pkgs ) {", "r . serialize ( serializer ) ; } }"]}
{"ids": "22112", "code": ["private void verify Block Mirror Migration ( ) throws Exception {", "log . info ( STR_ ) ;", "Iterator < Block Mirror > block Mirror Itr = db Client . query Iterative Objects ( Block Mirror . class , block Mirror UR Is ) ;", "List < Block Object > block Objects = new Array List < Block Object > ( ) ;", "while ( block Mirror Itr . has Next ( ) ) {", "block Objects . add ( block Mirror Itr . next ( ) ) ; }", "verify Block Objects ( block Objects ) ; }"]}
{"ids": "52362", "code": ["public Log Formatter ( Logger log ) {", "if ( log == null ) log = Logger . get Logger ( Logger . GLOBAL LOGGER NAME ) ;", "Level lvl = null ;", "while ( log != null ) {", "lvl = log . get Level ( ) ;", "if ( lvl != null ) break ;", "log = log . get Parent ( ) ; } ;", "if ( lvl == null ) lvl = Level . WARNING ;", "this . level = lvl ; }"]}
{"ids": "53067", "code": ["public void apply Camera ( GL 2 gl ) {", "gl . gl Matrix Mode ( GL 2 . GL PROJECTION ) ;", "gl . gl Load Identity ( ) ;", "glu . glu Perspective ( NUM_ , width / ( float ) height , NUM_ , NUM_ ) ;", "eye [ NUM_ ] = ( float ) Math . sin ( theta ) * NUM_ ;", "eye [ NUM_ ] = NUM_ ;", "eye [ NUM_ ] = ( float ) Math . cos ( theta ) * NUM_ ;", "glu . glu Look At ( eye [ NUM_ ] , eye [ NUM_ ] , eye [ NUM_ ] , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ ) ;", "gl . gl Matrix Mode ( GL 2 . GL MODELVIEW ) ;", "gl . gl Load Identity ( ) ;", "gl . gl Viewport ( NUM_ , NUM_ , width , height ) ; }"]}
{"ids": "21031", "code": ["public void add To Existing Volumes If Absent ( Map < String , Integer > volume WW Ns ) {", "if ( existing Volumes == null ) {", "existing Volumes = new String Map ( ) ; }", "for ( String wwn : volume WW Ns . key Set ( ) ) {", "String normalized WWN = Block Object . normalize WWN ( wwn ) ;", "if ( ! existing Volumes . contains Key ( normalized WWN ) && ( user Added Volumes == null || ! user Added Volumes . contains Key ( normalized WWN ) ) ) {", "String hlu Str = Export Group . LUN UNASSIGNED STR ;", "Integer hlu = volume WW Ns . get ( normalized WWN ) ;", "if ( hlu != null ) {", "hlu Str = hlu . to String ( ) ; }", "existing Volumes . put ( normalized WWN , hlu Str ) ; } } }"]}
{"ids": "3723", "code": ["public Path Impl create Temp File ( String prefix , String suffix ) throws IO Exception {", "if ( prefix == null || prefix . length ( ) == NUM_ ) prefix = STR_ ;", "if ( suffix == null ) suffix = STR_ ;", "synchronized ( LOCK ) {", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "int r = Math . abs ( ( int ) Random Util . get Random Long ( ) ) ;", "Path Impl file = lookup ( prefix + r + suffix ) ;", "if ( file . create New File ( ) ) return file ; } }", "throw new IO Exception ( STR_ ) ; }"]}
{"ids": "34982", "code": ["static Map < Target Type , List < Type Compound > > partition By Target Type ( Collection < Type Compound > annos , List < Type Compound > unmatched , Target Type ... target Types ) {", "final Map < Target Type , List < Type Compound > > target Type To Annos = new Hash Map < > ( ) ;", "for ( Target Type target Type : target Types ) {", "target Type To Annos . put ( target Type , new Array List < Type Compound > ( NUM_ ) ) ; }", "for ( final Type Compound anno : annos ) {", "final List < Type Compound > anno Set = target Type To Annos . get ( anno . get Position ( ) . type ) ;", "if ( anno Set != null ) {", "anno Set . add ( anno ) ; }", "else if ( unmatched != null ) {", "unmatched . add ( anno ) ; } }", "return target Type To Annos ; }"]}
{"ids": "78004", "code": ["public void load ( ) {", "try {", "if ( file Channel == null ) {", "file Channel = File Channel . open ( path , Standard Open Option . READ ) ; }", "file Channel . position ( NUM_ ) ;", "buffer . clear ( ) ;", "tmp . clear ( ) ;", "while ( file Channel . read ( tmp ) > NUM_ ) {", "tmp . flip ( ) ;", "if ( tmp . remaining ( ) > buffer . capacity ( ) - buffer . position ( ) ) {", "final Byte Buffer next = Byte Buffer . allocate Direct ( Math . max ( buffer . capacity ( ) * NUM_ , tmp . remaining ( ) ) ) ;", "buffer . flip ( ) ;", "next . put ( buffer ) ;", "buffer = next ; }", "buffer . put ( tmp ) ;", "tmp . clear ( ) ; }", "buffer . flip ( ) ; }", "catch ( final IO Exception e ) {", "throw new Unchecked IO Exception ( e ) ; } }"]}
{"ids": "80148", "code": ["private void on HP Change ( final int amount ) {", "if ( User . squared Distance To ( x , y ) < HEARING DISTANCE SQ ) {", "if ( amount > NUM_ ) {", "add Text Indicator ( STR_ + amount , Notification Type . POSITIVE ) ; }", "else {", "add Text Indicator ( String . value Of ( amount ) , Notification Type . NEGATIVE ) ; } } }"]}
{"ids": "50994", "code": ["@ Not Null private File resolve Name ( @ Not Null String name ) throws IO Exception {", "File file ;", "if ( name . starts With ( ROOT ) ) {", "file = new File ( my Template Root Folder , name . substring ( ROOT . length ( ) ) ) ; }", "else if ( my Last Template Folders != null ) {", "file = new File ( my Last Template Folders . peek ( ) , name ) ; }", "else {", "file = new File ( my Template Root Folder , name ) ; }", "return file . get Canonical File ( ) ; }"]}
{"ids": "43879", "code": ["public static String [ ] decode Array ( String encoded Array ) {", "String [ ] items = encoded Array . split ( STR_ ) ;", "Array List < String > list = new Array List < String > ( ) ;", "for ( int i = NUM_ ; i < items . length ; i ++ ) {", "String item = items [ i ] ;", "item = gsub ( STR_ , STR_ , item ) ;", "if ( ! item . equals ( STR_ ) ) {", "list . add ( item ) ; } }", "return list . to Array ( new String [ list . size ( ) ] ) ; }"]}
{"ids": "27593", "code": ["private void send Resource ( final UUID uuid , final Object resource , final long length , final Input Stream is ) throws IO Exception {", "assert uuid != null ;", "assert resource != null ;", "assert length >= NUM_ ;", "assert is != null ;", "assert ! sent Status ;", "long bytes Written = NUM_ ;", "final long begin = System . nano Time ( ) ;", "final Output Stream os = s . get Output Stream ( ) ;", "try { {", "final Data Output Stream dos = new Data Output Stream ( os ) ;", "dos . write ( new byte [ ] { Status Enum . OK . get ( ) } ) ;", "dos . write Long ( length ) ;", "dos . flush ( ) ;", "bytes Written += NUM_ + Bytes . SIZEOF LONG ;", "sent Status = true ; }", "final long checksum ; {", "final int BUFSIZE = Bytes . kilobyte 32 * NUM_ ;", "final Checked Input Stream cis = new Checked Input Stream ( new Buffered Input Stream ( is ) , new Adler 32 ( ) ) ;", "final byte [ ] buff = new byte [ BUFSIZE ] ;", "while ( true ) {", "final int read = cis . read ( buff , NUM_ , BUFSIZE ) ;", "if ( read <= NUM_ ) break ;", "os . write ( buff , NUM_ , read ) ;", "bytes Written += read ; }", "checksum = cis . get Checksum ( ) . get Value ( ) ; } {", "final Data Output Stream dos = new Data Output Stream ( os ) ;", "dos . write Long ( checksum ) ;", "bytes Written += Bytes . SIZEOF LONG ;", "dos . flush ( ) ; }", "os . flush ( ) ;", "if ( log . is Info Enabled ( ) ) log . info ( STR_ + uuid + STR_ + resource + STR_ + length + STR_ + checksum + STR_ + Time Unit . NANOSECONDS . to Millis ( System . nano Time ( ) - begin ) + STR_ ) ; }", "finally {", "try {", "os . close ( ) ; }", "catch ( Throwable t ) { }", "counters . bytes Written . add ( bytes Written ) ;", "counters . elapsed Write Nanos . add ( System . nano Time ( ) - begin ) ;", "synchronized ( counters . max Write Size Lock ) {", "counters . max Write Size = Math . max ( counters . max Write Size , bytes Written ) ; } } }"]}
{"ids": "28666", "code": ["public long sigignore ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "43940", "code": ["public String render ( Value Expr the Expr ) throws Exception {", "the Expr . visit ( this ) ;", "return m Buffer . to String ( ) ; }"]}
{"ids": "34482", "code": ["public void stop Sampling ( ) {", "if ( m Sampling Counter . decrement And Get ( ) == NUM_ ) {", "m Handler . stop Sampling Thread ( ) ;", "add Final Sample ( ) ; } }"]}
{"ids": "9772", "code": ["public D Sign Csr ( J Frame parent , PKCS 10 Certification Request pkcs 10 Csr , File csr File , Private Key sign Private Key , Key Pair Type sign Key Pair Type , X 509 Certificate verification Certificate , Provider provider ) throws Crypto Exception {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "this . pkcs 10 Csr = pkcs 10 Csr ;", "this . csr File = csr File ;", "this . sign Private Key = sign Private Key ;", "this . sign Key Pair Type = sign Key Pair Type ;", "this . verification Certificate = verification Certificate ;", "this . provider = provider ;", "set Title ( res . get String ( STR_ ) ) ;", "init Components ( ) ; }"]}
{"ids": "43196", "code": ["public static String parse Volume Host Directory ( String volume ) {", "if ( String Utils . is Empty ( volume ) ) {", "return volume ; }", "if ( ! volume . contains ( HOST CONTAINER DIR DELIMITER ) ) {", "return volume ; }", "String [ ] host Container Dir = volume . split ( HOST CONTAINER DIR DELIMITER ) ;", "if ( host Container Dir . length != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "String host Dir = host Container Dir [ NUM_ ] ;", "return host Dir ; }"]}
{"ids": "12591", "code": ["private String fmt Time ( double time ) {", "return Utilities . pad ( time Formatter . format ( time ) + STR_ , NUM_ ) ; }"]}
{"ids": "49514", "code": ["public static String right ( String s , int width , char fill Char ) {", "if ( s . length ( ) >= width ) {", "return s ; }", "String Buffer sb = new String Buffer ( width ) ;", "for ( int i = width - s . length ( ) ; -- i >= NUM_ ; ) {", "sb . append ( fill Char ) ; }", "sb . append ( s ) ;", "return sb . to String ( ) ; }"]}
{"ids": "37283", "code": ["private List < Pair < String , Object > > to Pair List ( final Map < String , Object > bindings ) {", "final List < Pair < String , Object > > blist = new Array List < Pair < String , Object > > ( ) ;", "for ( final Map . Entry < String , Object > pair : bindings . entry Set ( ) ) {", "blist . add ( new Pair < String , Object > ( pair . get Key ( ) , pair . get Value ( ) ) ) ; }", "return blist ; }"]}
{"ids": "25418", "code": ["public void add Message Observer ( final Message Observer observer ) {", "if ( observer == null ) {", "throw new Null Pointer Exception ( ) ; }", "else if ( message Observers == null ) {", "init Message Observer List ( ) ; }", "message Observers . add ( observer ) ; }"]}
{"ids": "16262", "code": ["public void show ( char initial Char ) {", "initial String = initial String . append ( initial Char ) ;", "show ( ) ;", "if ( SWT . get Platform ( ) != STR_ ) {", "set Edit Text ( initial String . to String ( ) ) ; } }"]}
{"ids": "39225", "code": ["public static Double Vector rnorm ( int n , double mean , double sd , Random random ) {", "if ( sd < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( sd == NUM_ ) return new Double Vector ( n , mean ) ;", "Double Vector v = new Double Vector ( n ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) v . set ( i , ( random . next Gaussian ( ) + mean ) / sd ) ;", "return v ; }"]}
{"ids": "74834", "code": ["private Pdf Object read Compressed Stream ( Pdf Object root Obj , int pointer , final Pdf File Reader current Pdf File , final Object Reader object Reader , final Pdf Object linear Obj ) throws Pdf Exception {", "while ( pointer != - NUM_ ) {", "move Pointer ( pointer ) ;", "final byte [ ] raw = object Reader . read Object Data ( - NUM_ , null ) ;", "final String Builder object Name = new String Builder ( ) ;", "char current 1 , last = STR_ ;", "int matched = NUM_ , i 1 = NUM_ ;", "while ( i 1 < raw . length ) {", "current 1 = ( char ) raw [ i 1 ] ;", "if ( current 1 == NUM_ || current 1 == NUM_ ) {", "current 1 = STR_ ; }", "if ( current 1 == STR_ && last == STR_ ) {", "matched = NUM_ ; }", "else if ( current 1 == pattern . char At ( matched ) ) {", "matched ++ ; }", "else {", "matched = NUM_ ;", "object Name . append ( current 1 ) ; }", "if ( matched == NUM_ ) {", "break ; }", "last = current 1 ;", "i 1 ++ ; }", "object Name . append ( STR_ ) ;", "final Pdf Object pdf Object = new Compressed Object ( object Name . to String ( ) ) ;", "pdf Object . set Compressed Stream ( true ) ;", "final Object Decoder object Decoder = new Object Decoder ( current Pdf File ) ;", "object Decoder . read Dictionary As Object ( pdf Object , NUM_ , raw ) ;", "final int [ ] field Sizes = pdf Object . get Int Array ( Pdf Dictionary . W ) ;", "byte [ ] xrefs = pdf Object . get Decoded Stream ( ) ;", "if ( xrefs == null ) {", "xrefs = current Pdf File . read Stream ( pdf Object , true , true , false , false , true , null ) ; }", "final int [ ] Index = pdf Object . get Int Array ( Pdf Dictionary . Index ) ;", "if ( Index == null ) {", "Compressed Objects . read Compressed Offsets ( NUM_ , NUM_ , pdf Object . get Int ( Pdf Dictionary . Size ) , field Sizes , xrefs , offset , pdf datafile ) ; }", "else {", "final int count = Index . length ;", "int pntr = NUM_ ;", "for ( int aa = NUM_ ; aa < count ; aa += NUM_ ) {", "pntr = Compressed Objects . read Compressed Offsets ( pntr , Index [ aa ] , Index [ aa + NUM_ ] , field Sizes , xrefs , offset , pdf datafile ) ; } }", "if ( root Obj == null ) {", "root Obj = pdf Object . get Dictionary ( Pdf Dictionary . Root ) ;", "encrypt Obj = pdf Object . get Dictionary ( Pdf Dictionary . Encrypt ) ;", "if ( encrypt Obj != null ) {", "final byte [ ] [ ] I Ds = pdf Object . get String Array ( Pdf Dictionary . ID ) ;", "if ( I Ds != null && this . ID == null ) {", "this . ID = I Ds [ NUM_ ] ; } }", "info Object = pdf Object . get Dictionary ( Pdf Dictionary . Info ) ; }", "if ( linear Obj != null ) {", "pointer = - NUM_ ; }", "else {", "pointer = pdf Object . get Int ( Pdf Dictionary . Prev ) ;", "if ( pointer != - NUM_ && ! is Compressed Stream ( pointer , ( int ) eof ) ) {", "return read Legacy Reference Table ( root Obj , pointer , ( int ) eof , current Pdf File ) ; } } }", "return root Obj ; }"]}
{"ids": "72706", "code": ["public boolean is Known Sub ( String sub Name ) {", "return KNOWN SUBS . contains ( sub Name ) ; }"]}
{"ids": "36943", "code": ["public boolean is Stored ( ) {", "return Integer . signum ( id ) != - NUM_ ; }"]}
{"ids": "73930", "code": ["public boolean is Search Light Bit ( int bit ) {", "if ( node Type != SMINI ) {", "log . error ( STR_ ) ;", "return ( false ) ; }", "if ( ( bit < NUM_ ) || ( bit > NUM_ ) ) {", "log . error ( STR_ + Integer . to String ( bit ) ) ;", "return ( false ) ; }", "if ( loc Search Light Bits [ bit ] == NUM_ ) {", "return ( true ) ; }", "return ( false ) ; }"]}
{"ids": "20900", "code": ["public void put ( String sample , Hidden Attribute attribute , Object value ) {", "put ( sample , attribute . to String ( ) , value ) ; }"]}
{"ids": "35925", "code": ["void post Message ( List < Jetstream Message > msgs , Dispatch Queue Stats stats ) throws Message Service Exception {", "m msg Rcv Counter . add And Get ( msgs . size ( ) ) ;", "if ( ( monitor Upstream Queue And Pause Traffic ( ) == Upstream Queue State . FULL ) && ( m paused . get ( ) ) ) {", "if ( ! m msg Processor . has Available Capacity ( m twenty Percent Capacity ) ) {", "m total Msgs Dropped . increment ( ) ;", "return ; } }", "List < Runnable > requests = new Array List < Runnable > ( msgs . size ( ) ) ;", "for ( int i = NUM_ , t = msgs . size ( ) ; i < t ; i ++ ) {", "Jetstream Message tm = msgs . get ( i ) ;", "if ( tm . get Topic ( ) == null ) {", "m total Msgs Dropped . increment ( ) ;", "if ( LOGGER . is Debug Enabled ( ) ) {", "LOGGER . debug ( STR_ ) ; }", "continue ; }", "Message Service Request msr = new Message Service Request ( tm ) ;", "msr . set Priority ( tm . get Priority ( ) ) ;", "msr . set Sequenceid ( tm . get Sequence Id ( ) ) ;", "if ( msr . get Priority ( ) == Jetstream Message . INTERNAL MSG PRIORITY ) {", "if ( ! m internal Msg Processor . process Request ( msr ) ) {", "m total Msgs Dropped . increment ( ) ;", "throw new Message Service Exception ( Message Service Exception . BUFFER FULL , STR_ ) ; }", "if ( m msgs Rcvd Per Sec . add And Get ( NUM_ ) < NUM_ ) m msgs Rcvd Per Sec . set ( NUM_ ) ;", "m total Msgs Rcvd . increment ( ) ; }", "else {", "requests . add ( msr ) ; } }", "if ( ! requests . is Empty ( ) ) {", "int batchsize = requests . size ( ) ;", "if ( ! m msg Processor . process Batch ( requests ) ) {", "m total Msgs Dropped . add And Get ( batchsize ) ;", "throw new Message Service Exception ( Message Service Exception . BUFFER FULL , STR_ + STR_ + batchsize + STR_ + m msg Processor . get Available Capacity ( ) ) ; }", "m avg Msgs Rcvd Per Sec . add ( batchsize ) ;", "m total Msgs Rcvd . add And Get ( batchsize ) ; }", "if ( stats != null ) {", "stats . set High Priority Queue Depth ( ( int ) m msg Processor . get Pending Requests ( ) ) ;", "stats . set Low Priority Queue Depth ( ( int ) m msg Processor . get Pending Requests ( ) ) ;", "stats . set Max Queue Depth ( ( int ) m msg Processor . get Max Queue Sz ( ) ) ; } }"]}
{"ids": "46729", "code": ["public boolean unset Ordering ( Object first , Object second ) {", "Digraph Node first PO Node = ( Digraph Node ) po Nodes . get ( first ) ;", "Digraph Node second PO Node = ( Digraph Node ) po Nodes . get ( second ) ;", "return first PO Node . remove Edge ( second PO Node ) || second PO Node . remove Edge ( first PO Node ) ; }"]}
{"ids": "41709", "code": ["public String convert SWF To HTML ( Input Stream in ) throws Exception {", "String Writer out 1 = new String Writer ( ) ;", "output = new Print Writer ( out 1 ) ;", "Tag Parser parser = new Tag Parser ( this ) ;", "SWF Reader reader = new SWF Reader ( parser , in ) ;", "reader . read File ( ) ;", "in . close ( ) ;", "size Count = reader . size ;", "final String ret = STR_ + ( headerstr . is Empty ( ) ? STR_ : STR_ + headerstr + STR_ ) + out 1 . to String ( ) + STR_ ;", "return ret ; }"]}
{"ids": "11433", "code": ["public Shape great Circle Line Shape ( ) {", "General Path path = null ;", "if ( llpts != null && llpts . length >= NUM_ && llpts . length % NUM_ == NUM_ ) {", "double y 1 = llpts [ NUM_ ] ;", "double x 1 = llpts [ NUM_ ] ;", "path = new General Path ( General Path . WIND EVEN ODD , llpts . length / NUM_ ) ;", "boolean first Coords = true ;", "for ( int i = NUM_ ; i < llpts . length ; i += NUM_ ) {", "double y 2 = llpts [ i ] ;", "double x 2 = llpts [ i + NUM_ ] ;", "double rad Dist = Great Circle . spherical Distance ( y 1 , x 1 , y 2 , x 2 ) ;", "int nsegs = ( int ) ( Proj Math . rad To Deg ( rad Dist ) * segs Per Deg ) ;", "if ( nsegs == NUM_ ) {", "nsegs = NUM_ ; }", "double [ ] coords = Great Circle . great Circle ( y 1 , x 1 , y 2 , x 2 , nsegs , false ) ;", "if ( return Degrees ) {", "Proj Math . array Rad To Deg ( coords ) ; }", "for ( int j = NUM_ ; j <= coords . length - NUM_ ; j += NUM_ ) {", "if ( first Coords ) {", "path . move To ( coords [ j + NUM_ ] , coords [ j ] ) ;", "first Coords = false ; }", "else {", "path . line To ( coords [ j + NUM_ ] , coords [ j ] ) ; } }", "x 1 = x 2 ;", "y 1 = y 2 ; }", "if ( return Degrees ) {", "path . line To ( Proj Math . rad To Deg ( x 1 ) , Proj Math . rad To Deg ( y 1 ) ) ; }", "else {", "path . line To ( x 1 , y 1 ) ; } }", "return path ; }"]}
{"ids": "25364", "code": ["public Connection ( final Inet Socket Address peer Address ) {", "this ( peer Address , ( Handshaker ) null ) ; }"]}
{"ids": "73747", "code": ["protected synchronized void notify Version ( Sprog Version v ) {", "ver = v ;", "for ( Sprog Version Listener listener : get Copy Of Listeners ( ) ) {", "try {", "listener . notify Version ( ver ) ;", "version Listeners . remove ( listener ) ; }", "catch ( Exception e ) {", "log . warn ( STR_ + listener + STR_ + e ) ; } } }"]}
{"ids": "47697", "code": ["protected void accept Drop ( int drop Operation ) {", "Drop Target Context Peer peer = get Drop Target Context Peer ( ) ;", "if ( peer != null ) {", "peer . accept Drop ( drop Operation ) ; } }"]}
{"ids": "38989", "code": ["public void split Node ( KD Tree Node node , int num Nodes Created , double [ ] [ ] node Ranges , double [ ] [ ] universe ) throws Exception {", "correctly Initialized ( ) ;", "if ( node . m Nodes Rect Bounds == null ) {", "node . m Nodes Rect Bounds = new double [ NUM_ ] [ node . m Node Ranges . length ] ;", "for ( int i = NUM_ ; i < node . m Node Ranges . length ; i ++ ) {", "node . m Nodes Rect Bounds [ MIN ] [ i ] = node . m Node Ranges [ i ] [ MIN ] ;", "node . m Nodes Rect Bounds [ MAX ] [ i ] = node . m Node Ranges [ i ] [ MAX ] ; } }", "double max Rect Width = Double . NEGATIVE INFINITY , max Pt Width = Double . NEGATIVE INFINITY , tempval ;", "int split Dim = - NUM_ , class Idx = m Instances . class Index ( ) ;", "for ( int i = NUM_ ; i < node . m Nodes Rect Bounds [ NUM_ ] . length ; i ++ ) {", "if ( i == class Idx ) continue ;", "tempval = node . m Nodes Rect Bounds [ MAX ] [ i ] - node . m Nodes Rect Bounds [ MIN ] [ i ] ;", "if ( m Normalize Node Width ) {", "tempval = tempval / universe [ i ] [ WIDTH ] ; }", "if ( tempval > max Rect Width && node . m Node Ranges [ i ] [ WIDTH ] > NUM_ ) max Rect Width = tempval ; }", "for ( int i = NUM_ ; i < node . m Nodes Rect Bounds [ NUM_ ] . length ; i ++ ) {", "if ( i == class Idx ) continue ;", "tempval = node . m Nodes Rect Bounds [ MAX ] [ i ] - node . m Nodes Rect Bounds [ MIN ] [ i ] ;", "if ( m Normalize Node Width ) {", "tempval = tempval / universe [ i ] [ WIDTH ] ; }", "if ( tempval >= max Rect Width * ( NUM_ - ERR ) && node . m Node Ranges [ i ] [ WIDTH ] > NUM_ ) {", "if ( node . m Node Ranges [ i ] [ WIDTH ] > max Pt Width ) {", "max Pt Width = node . m Node Ranges [ i ] [ WIDTH ] ;", "if ( m Normalize Node Width ) max Pt Width = max Pt Width / universe [ i ] [ WIDTH ] ;", "split Dim = i ; } } }", "double split Val = node . m Nodes Rect Bounds [ MIN ] [ split Dim ] + ( node . m Nodes Rect Bounds [ MAX ] [ split Dim ] - node . m Nodes Rect Bounds [ MIN ] [ split Dim ] ) * NUM_ ;", "if ( split Val < node . m Node Ranges [ split Dim ] [ MIN ] ) split Val = node . m Node Ranges [ split Dim ] [ MIN ] ;", "else if ( split Val >= node . m Node Ranges [ split Dim ] [ MAX ] ) split Val = node . m Node Ranges [ split Dim ] [ MAX ] - node . m Node Ranges [ split Dim ] [ WIDTH ] * NUM_ ;", "int right Start = rearrange Points ( m Inst List , node . m Start , node . m End , split Dim , split Val ) ;", "if ( right Start == node . m Start || right Start > node . m End ) {", "if ( right Start == node . m Start ) throw new Exception ( STR_ + node . m Node Number + STR_ + STR_ + STR_ ) ;", "else throw new Exception ( STR_ + node . m Node Number + STR_ + STR_ + STR_ ) ; }", "node . m Split Dim = split Dim ;", "node . m Split Value = split Val ;", "double [ ] [ ] widths = new double [ NUM_ ] [ node . m Nodes Rect Bounds [ NUM_ ] . length ] ;", "System . arraycopy ( node . m Nodes Rect Bounds [ MIN ] , NUM_ , widths [ MIN ] , NUM_ , node . m Nodes Rect Bounds [ MIN ] . length ) ;", "System . arraycopy ( node . m Nodes Rect Bounds [ MAX ] , NUM_ , widths [ MAX ] , NUM_ , node . m Nodes Rect Bounds [ MAX ] . length ) ;", "widths [ MAX ] [ split Dim ] = split Val ;", "node . m Left = new KD Tree Node ( num Nodes Created + NUM_ , node . m Start , right Start - NUM_ , m Euclidean Distance . initialize Ranges ( m Inst List , node . m Start , right Start - NUM_ ) , widths ) ;", "widths = new double [ NUM_ ] [ node . m Nodes Rect Bounds [ NUM_ ] . length ] ;", "System . arraycopy ( node . m Nodes Rect Bounds [ MIN ] , NUM_ , widths [ MIN ] , NUM_ , node . m Nodes Rect Bounds [ MIN ] . length ) ;", "System . arraycopy ( node . m Nodes Rect Bounds [ MAX ] , NUM_ , widths [ MAX ] , NUM_ , node . m Nodes Rect Bounds [ MAX ] . length ) ;", "widths [ MIN ] [ split Dim ] = split Val ;", "node . m Right = new KD Tree Node ( num Nodes Created + NUM_ , right Start , node . m End , m Euclidean Distance . initialize Ranges ( m Inst List , right Start , node . m End ) , widths ) ; }"]}
{"ids": "86244", "code": ["public Date modified Date ( String path ) throws Illegal State Exception , IO Exception , FTP Illegal Reply Exception , FTP Exception {", "synchronized ( lock ) {", "if ( ! connected ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( ! authenticated ) {", "throw new Illegal State Exception ( STR_ ) ; }", "communication . send FTP Command ( STR_ + path ) ;", "FTP Reply r = communication . read FTP Reply ( ) ;", "touch Auto Noop Timer ( ) ;", "if ( ! r . is Success Code ( ) ) {", "throw new FTP Exception ( r ) ; }", "String [ ] messages = r . get Messages ( ) ;", "if ( messages . length != NUM_ ) {", "throw new FTP Illegal Reply Exception ( ) ; }", "else {", "try {", "return MDTM DATE FORMAT . parse ( messages [ NUM_ ] ) ; }", "catch ( Parse Exception e ) {", "throw new FTP Illegal Reply Exception ( ) ; } } } }"]}
{"ids": "35063", "code": ["public Control Flow Graph run ( Compilation Unit Tree root , Processing Environment env , Method Tree tree , Class Tree class Tree ) {", "Underlying AST underlying AST = new CFG Method ( tree , class Tree ) ;", "return run ( root , env , underlying AST ) ; }"]}
{"ids": "70147", "code": ["private boolean is Valid Engine ( ) {", "if ( has Flag ( ~ ( CLAN ENGINE | TANK ENGINE | LARGE ENGINE | SUPERHEAVY ENGINE | SUPPORT VEE ENGINE ) ) ) {", "problem . append ( STR_ + engine Flags ) ;", "return false ; }", "if ( has Flag ( SUPPORT VEE ENGINE ) && ( engine Type != STEAM ) && ( engine Type != COMBUSTION ENGINE ) && ( engine Type != BATTERY ) && ( engine Type != FUEL CELL ) && ( engine Type != SOLAR ) && ( engine Type != FISSION ) && ( engine Type != NORMAL ENGINE ) && ( engine Type != NONE ) ) {", "problem . append ( STR_ ) ;", "return false ; }", "if ( ( ( ( int ) Math . ceil ( engine Rating / NUM_ ) > ENGINE RATINGS . length ) || ( engine Rating < NUM_ ) ) && ! has Flag ( SUPPORT VEE ENGINE ) ) {", "problem . append ( STR_ + engine Rating ) ;", "return false ; }", "if ( ( engine Rating > NUM_ ) && ! has Flag ( SUPPORT VEE ENGINE ) ) {", "engine Flags |= LARGE ENGINE ; }", "switch ( engine Type ) {", "case COMBUSTION ENGINE :", "case NORMAL ENGINE :", "case XL ENGINE :", "case XXL ENGINE :", "case FUEL CELL :", "case NONE :", "case MAGLEV :", "case BATTERY :", "case SOLAR :", "break ;", "case COMPACT ENGINE :", "if ( has Flag ( LARGE ENGINE ) ) {", "problem . append ( Messages . get String ( STR_ ) ) ;", "return false ; }", "break ;", "case LIGHT ENGINE :", "case FISSION :", "if ( has Flag ( CLAN ENGINE ) ) {", "problem . append ( Messages . get String ( STR_ ) ) ;", "return false ; }", "break ;", "default :", "problem . append ( STR_ + engine Type ) ;", "return false ; }", "return true ; }"]}
{"ids": "64817", "code": ["private void calculate D ( double [ ] b ) {", "int length = m Extremal Indices . size ( ) - NUM_ ;", "m D = new double [ length ] ;", "for ( int k = NUM_ ; k < length ; k ++ ) {", "m D [ k ] = b [ k ] * ( m Grid . get Cosine Frequency Grid ( ) [ m Extremal Indices . get ( k ) ] - m Grid . get Cosine Frequency Grid ( ) [ m Extremal Indices . get ( length ) ] ) ; } }"]}
{"ids": "79837", "code": ["public static byte [ ] base 64 decode ( String coded ) {", "if ( null == coded ) return null ;", "byte [ ] src = coded . get Bytes ( ) ;", "int len = src . length ;", "int dlen = len - ( len / NUM_ ) ;", "dlen = ( dlen > > > NUM_ ) + ( dlen > > > NUM_ ) ;", "int rem = NUM_ ;", "if ( NUM_ == src [ len - NUM_ ] ) rem ++ ;", "if ( NUM_ == src [ len - NUM_ ] ) rem ++ ;", "dlen -= rem ;", "byte [ ] dst = new byte [ dlen ] ;", "int pos = NUM_ ;", "int dpos = NUM_ ;", "int col = NUM_ ;", "len -= NUM_ ;", "while ( pos < len ) {", "byte b 0 = base 64 de [ src [ pos ++ ] ] ;", "byte b 1 = base 64 de [ src [ pos ++ ] ] ;", "byte b 2 = base 64 de [ src [ pos ++ ] ] ;", "byte b 3 = base 64 de [ src [ pos ++ ] ] ;", "if ( B 64 INV == b 0 || B 64 INV == b 1 || B 64 INV == b 2 || B 64 INV == b 3 ) throw new Runtime Exception ( STR_ + pos ) ;", "dst [ dpos ++ ] = ( byte ) ( ( b 0 << NUM_ ) | ( ( b 1 > > > NUM_ ) & NUM_ ) ) ;", "dst [ dpos ++ ] = ( byte ) ( ( b 1 << NUM_ ) | ( ( b 2 > > > NUM_ ) & NUM_ ) ) ;", "dst [ dpos ++ ] = ( byte ) ( ( b 2 << NUM_ ) | ( b 3 & NUM_ ) ) ;", "col += NUM_ ;", "if ( NUM_ == col ) {", "if ( NUM_ != src [ pos ++ ] ) throw new Runtime Exception ( STR_ + ( pos - NUM_ ) ) ;", "col = NUM_ ; } }", "byte b 0 = base 64 de [ src [ pos ++ ] ] ;", "byte b 1 = base 64 de [ src [ pos ++ ] ] ;", "byte b 2 = base 64 de [ src [ pos ++ ] ] ;", "byte b 3 = base 64 de [ src [ pos ++ ] ] ;", "if ( B 64 INV == b 0 || B 64 INV == b 1 || B 64 INV == b 2 || B 64 INV == b 3 ) throw new Runtime Exception ( STR_ + pos ) ;", "dst [ dpos ++ ] = ( byte ) ( ( b 0 << NUM_ ) | ( ( b 1 > > > NUM_ ) & NUM_ ) ) ;", "if ( NUM_ == rem ) return dst ;", "dst [ dpos ++ ] = ( byte ) ( ( b 1 << NUM_ ) | ( ( b 2 > > > NUM_ ) & NUM_ ) ) ;", "if ( NUM_ == rem ) return dst ;", "dst [ dpos ++ ] = ( byte ) ( ( b 2 << NUM_ ) | ( b 3 & NUM_ ) ) ;", "return dst ; }"]}
{"ids": "70014", "code": ["private static Properties load Properties ( String properties File ) {", "Properties properties = new Properties ( ) ;", "try ( Input Stream is = new File Input Stream ( properties File ) ) {", "properties . load ( is ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ , e ) ; }", "return properties ; }"]}
{"ids": "22182", "code": ["public Map < String , Map < String , String > > list ( String service Name ) {", "Map < String , Map < String , String > > results = new Hash Map < String , Map < String , String > > ( ) ;", "Service Info [ ] infos = jmdns . list ( STR_ + service Name + STR_ ) ;", "for ( Service Info info : infos ) {", "log . info ( STR_ , info ) ;", "final String [ ] host Addrs = info . get Host Addresses ( ) ;", "final String Buffer buf = new String Buffer ( ) ;", "for ( String host Addr : host Addrs ) {", "buf . append ( host Addr ) ;", "buf . append ( STR_ ) ; }", "final String key = buf . to String ( ) ;", "log . info ( STR_ , key ) ;", "final Map < String , String > values = new Hash Map < String , String > ( ) ;", "for ( Enumeration < String > e = info . get Property Names ( ) ; e . has More Elements ( ) ; ) {", "final String prop = e . next Element ( ) ;", "final String value = new String ( info . get Property Bytes ( prop ) ) ;", "log . info ( STR_ , prop , value ) ;", "values . put ( prop , value ) ; }", "if ( values . is Empty ( ) ) {", "log . warn ( STR_ , key ) ; }", "results . put ( key , values . is Empty ( ) ? null : values ) ; }", "return results ; }"]}
{"ids": "56590", "code": ["@ Suppress Warnings ( { STR_ } ) @ Override default Lazy Future Stream < U > concat ( final Stream < ? extends U > other ) {", "return from Stream ( Stream . concat ( Stream Support . stream ( Spliterators . spliterator Unknown Size ( iterator ( ) , Spliterator . ORDERED ) , false ) , Stream Support . stream ( Spliterators . spliterator Unknown Size ( other . iterator ( ) , Spliterator . ORDERED ) , false ) ) ) ; }"]}
{"ids": "47802", "code": ["private int move Components ( Container target , int x , int y , int width , int height , int row Start , int row End , boolean ltr , boolean use Baseline , int [ ] ascent , int [ ] descent ) {", "switch ( new Align ) {", "case LEFT :", "x += ltr ? NUM_ : width ;", "break ;", "case CENTER :", "x += width / NUM_ ;", "break ;", "case RIGHT :", "x += ltr ? width : NUM_ ;", "break ;", "case LEADING :", "break ;", "case TRAILING :", "x += width ;", "break ; }", "int max Ascent = NUM_ ;", "int nonbaseline Height = NUM_ ;", "int baseline Offset = NUM_ ;", "if ( use Baseline ) {", "int max Descent = NUM_ ;", "for ( int i = row Start ; i < row End ; i ++ ) {", "Component m = target . get Component ( i ) ;", "if ( m . visible ) {", "if ( ascent [ i ] >= NUM_ ) {", "max Ascent = Math . max ( max Ascent , ascent [ i ] ) ;", "max Descent = Math . max ( max Descent , descent [ i ] ) ; }", "else {", "nonbaseline Height = Math . max ( m . get Height ( ) , nonbaseline Height ) ; } } }", "height = Math . max ( max Ascent + max Descent , nonbaseline Height ) ;", "baseline Offset = ( height - max Ascent - max Descent ) / NUM_ ; }", "for ( int i = row Start ; i < row End ; i ++ ) {", "Component m = target . get Component ( i ) ;", "if ( m . is Visible ( ) ) {", "int cy ;", "if ( use Baseline && ascent [ i ] >= NUM_ ) {", "cy = y + baseline Offset + max Ascent - ascent [ i ] ; }", "else {", "cy = y + ( height - m . height ) / NUM_ ; }", "if ( ltr ) {", "m . set Location ( x , cy ) ; }", "else {", "m . set Location ( target . width - x - m . width , cy ) ; }", "x += m . width + hgap ; } }", "return height ; }"]}
{"ids": "7806", "code": ["public double adjusted Pow 10 ( double val ) {", "boolean neg Flag = ( val < NUM_ ) ;", "if ( neg Flag ) {", "val = - val ; }", "double res ;", "if ( val < NUM_ ) {", "res = ( Math . pow ( NUM_ , val + NUM_ ) - NUM_ ) / NUM_ ; }", "else {", "res = Math . pow ( NUM_ , val ) ; }", "return neg Flag ? ( - res ) : res ; }"]}
{"ids": "6004", "code": ["public static void proxy Port ( final int port ) {", "final String port Value = Integer . to String ( port ) ;", "set Property ( STR_ , port Value ) ;", "set Property ( STR_ , port Value ) ; }"]}
{"ids": "21018", "code": ["public static String fetch Cluster Name ( String cluster Cg Name ) {", "String cluster Name = null ;", "if ( cluster Cg Name != null && ! cluster Cg Name . is Empty ( ) ) {", "String [ ] tmp = cluster Cg Name . split ( SPLITTER ) ;", "cluster Name = tmp [ NUM_ ] ; }", "return cluster Name ; }"]}
{"ids": "9779", "code": ["public D View Asymmetric Key Fields ( J Dialog parent , String title , RSA Public Key rsa Public Key ) {", "super ( parent , title , Dialog . Modality Type . DOCUMENT MODAL ) ;", "key = rsa Public Key ;", "init Fields ( ) ; }"]}
{"ids": "20293", "code": ["public static boolean is Attribute ( Object obj Value ) {", "if ( obj Value instanceof String ) {", "String string Value = ( String ) obj Value ;", "if ( string Value . starts With ( ATTRIBUTE START ) && string Value . ends With ( ATTRIBUTE END ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "27366", "code": ["public static String decode ASCII ( final byte [ ] key , final int off , final int len ) {", "final byte [ ] b = new byte [ len ] ;", "System . arraycopy ( key , off , b , NUM_ , len ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "b [ i ] = decode Byte ( b [ i ] ) ; }", "try {", "return new String ( b , STR_ ) ; }", "catch ( Unsupported Encoding Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "36604", "code": ["@ Override public void value Changed ( Tree Selection Event e ) {", "if ( prevent Event ) {", "return ; }", "if ( main Frame != null ) {", "List < Operator > selected Operators = get Selected Operators ( ) ;", "if ( selected Operators != null && ! selected Operators . is Empty ( ) ) {", "main Frame . select Operators ( selected Operators ) ; } } }"]}
{"ids": "22677", "code": ["public synchronized void remove Property Change Listener ( Property Change Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "4494", "code": ["private static Intent create Share Intent ( Context context , final String share Text ) {", "final Intent share Intent = new Intent ( Intent . ACTION SEND ) ;", "share Intent . put Extra ( android . content . Intent . EXTRA SUBJECT , context . get String ( R . string . share subject ) ) ;", "share Intent . put Extra ( android . content . Intent . EXTRA TEXT , share Text ) ;", "share Intent . set Type ( STR_ ) ;", "return share Intent ; }"]}
{"ids": "30642", "code": ["public static < U > Atomic Integer Field Updater < U > new Updater ( Class < U > tclass , String field Name ) {", "if ( Unsafe Holder . is Available ( ) ) {", "return new Atomic Integer Field Updater Impl < U > ( tclass , field Name ) ; }", "return Atomic Integer Field Updater . new Updater ( tclass , field Name ) ; }"]}
{"ids": "72527", "code": ["private boolean try Step ( final double t 0 , final double [ ] y 0 , final double step , final int k , final double [ ] scale , final double [ ] [ ] f , final double [ ] y Middle , final double [ ] y End ) throws Math Illegal Argument Exception , Math Illegal State Exception {", "final int n = sequence [ k ] ;", "final double sub Step = step / n ;", "final double sub Step 2 = NUM_ * sub Step ;", "double t = t 0 + sub Step ;", "for ( int i = NUM_ ; i < y 0 . length ; ++ i ) {", "y End [ i ] = y 0 [ i ] + sub Step * f [ NUM_ ] [ i ] ; }", "f [ NUM_ ] = compute Derivatives ( t , y End ) ;", "final double [ ] y Tmp = y 0 . clone ( ) ;", "for ( int j = NUM_ ; j < n ; ++ j ) {", "if ( NUM_ * j == n ) {", "System . arraycopy ( y End , NUM_ , y Middle , NUM_ , y 0 . length ) ; }", "t += sub Step ;", "for ( int i = NUM_ ; i < y 0 . length ; ++ i ) {", "final double middle = y End [ i ] ;", "y End [ i ] = y Tmp [ i ] + sub Step 2 * f [ j ] [ i ] ;", "y Tmp [ i ] = middle ; }", "f [ j + NUM_ ] = compute Derivatives ( t , y End ) ;", "if ( perform Test && ( j <= max Checks ) && ( k < max Iter ) ) {", "double initial Norm = NUM_ ;", "for ( int l = NUM_ ; l < scale . length ; ++ l ) {", "final double ratio = f [ NUM_ ] [ l ] / scale [ l ] ;", "initial Norm += ratio * ratio ; }", "double delta Norm = NUM_ ;", "for ( int l = NUM_ ; l < scale . length ; ++ l ) {", "final double ratio = ( f [ j + NUM_ ] [ l ] - f [ NUM_ ] [ l ] ) / scale [ l ] ;", "delta Norm += ratio * ratio ; }", "if ( delta Norm > NUM_ * Fast Math . max ( NUM_ , initial Norm ) ) {", "return false ; } } }", "for ( int i = NUM_ ; i < y 0 . length ; ++ i ) {", "y End [ i ] = NUM_ * ( y Tmp [ i ] + y End [ i ] + sub Step * f [ n ] [ i ] ) ; }", "return true ; }"]}
{"ids": "7165", "code": ["public static Row Limit Spec build Row Limit Spec ( Esper EPL 2 Grammar Parser . Row Limit Context ctx ) {", "Object num Rows ;", "Object offset ;", "if ( ctx . o != null ) {", "num Rows = parse Num Or Variable Ident ( ctx . n 1 , ctx . i 1 ) ;", "offset = parse Num Or Variable Ident ( ctx . n 2 , ctx . i 2 ) ; }", "else if ( ctx . c != null ) {", "offset = parse Num Or Variable Ident ( ctx . n 1 , ctx . i 1 ) ;", "num Rows = parse Num Or Variable Ident ( ctx . n 2 , ctx . i 2 ) ; }", "else {", "num Rows = parse Num Or Variable Ident ( ctx . n 1 , ctx . i 1 ) ;", "offset = null ; }", "Integer num Rows Int = null ;", "String num Rows Variable = null ;", "if ( num Rows instanceof String ) {", "num Rows Variable = ( String ) num Rows ; }", "else {", "num Rows Int = ( Integer ) num Rows ; }", "Integer offset Int = null ;", "String offset Variable = null ;", "if ( offset instanceof String ) {", "offset Variable = ( String ) offset ; }", "else {", "offset Int = ( Integer ) offset ; }", "return new Row Limit Spec ( num Rows Int , offset Int , num Rows Variable , offset Variable ) ; }"]}
{"ids": "4945", "code": ["public final int first common layer ( Brd Item p other ) {", "int max first layer = Math . max ( first layer ( ) , p other . first layer ( ) ) ;", "int min last layer = Math . min ( last layer ( ) , p other . last layer ( ) ) ;", "if ( max first layer > min last layer ) {", "return - NUM_ ; }", "return max first layer ; }"]}
{"ids": "62169", "code": ["public Item Stack remove Items ( Item Stack drive , Item Stack stack , int amount Wanted ) {", "if ( get Max Kilobits ( drive ) == - NUM_ ) return null ;", "int stored = get Amount Stored ( drive , stack ) ;", "int amount Given = Math . min ( amount Wanted , stored ) ;", "if ( amount Given > NUM_ ) {", "set Amount Stored ( drive , stack , stored - amount Given ) ;", "stack . stack Size += amount Given ;", "mark Dirty ( drive ) ; }", "return stack ; }"]}
{"ids": "33089", "code": ["public void save Indexes ( ) {", "Array List to Save = new Array List ( ) ;", "synchronized ( this ) {", "Object [ ] value Table = this . indexes . value Table ;", "for ( int i = NUM_ , l = value Table . length ; i < l ; i ++ ) {", "Index index = ( Index ) value Table [ i ] ;", "if ( index != null ) to Save . add ( index ) ; } }", "boolean all Saved = true ;", "for ( int i = NUM_ , length = to Save . size ( ) ; i < length ; i ++ ) {", "Index index = ( Index ) to Save . get ( i ) ;", "Read Write Monitor monitor = index . monitor ;", "if ( monitor == null ) continue ;", "try {", "monitor . enter Read ( ) ;", "if ( index . has Changed ( ) ) {", "if ( monitor . exit Read Enter Write ( ) ) {", "try {", "save Index ( index ) ; }", "catch ( IO Exception e ) {", "if ( Job Manager . VERBOSE ) {", "Util . verbose ( STR_ , System . err ) ;", "e . print Stack Trace ( ) ; }", "all Saved = false ; }", "finally {", "monitor . exit Write Enter Read ( ) ; } }", "else {", "all Saved = false ; } } }", "finally {", "monitor . exit Read ( ) ; } }", "if ( this . participants Containers != null && this . participant Updated ) {", "write Participants Index Names File ( ) ;", "this . participant Updated = false ; }", "this . need To Save = ! all Saved ; }"]}
{"ids": "70066", "code": ["public void add Item ( Artist artist , int position ) {", "if ( artist == null ) throw new Null Pointer Exception ( STR_ ) ;", "if ( position < get Item Count ( ) || position > get Item Count ( ) ) throw new Illegal Argument Exception ( STR_ ) ;", "artists . add ( position , artist ) ;", "notify Item Inserted ( position ) ; }"]}
{"ids": "36040", "code": ["public void expand And Select If Exists ( Repository Location location ) {", "if ( location . parent ( ) != null ) {", "expand If Exists ( location . parent ( ) , location . get Name ( ) ) ; }", "else {", "expand If Exists ( location , null ) ; }", "scroll Path To Visible ( get Selection Path ( ) ) ; }"]}
{"ids": "23236", "code": ["public static void save Provisioning Validity ( Context context , long validity ) {", "if ( validity <= NUM_ ) {", "return ; }", "long next = System . current Time Millis ( ) + validity ;", "Shared Preferences preferences = context . get Shared Preferences ( Android Registry Factory . RCS PREFS NAME , Activity . MODE PRIVATE ) ;", "Shared Preferences . Editor editor = preferences . edit ( ) ;", "editor . put Long ( REGISTRY PROVISIONING VALIDITY , validity ) ;", "editor . put Long ( REGISTRY PROVISIONING EXPIRATION , next ) ;", "editor . commit ( ) ; }"]}
{"ids": "22530", "code": ["public Driver Task unexport Volumes From Initiators ( List < Initiator > initiators , List < Storage Volume > volumes ) {", "LOG . info ( STR_ ) ;", "Driver Task task = new Dell SC Driver Task ( STR_ ) ;", "Sc Server server = null ;", "String Builder err Buffer = new String Builder ( ) ;", "int volumes Unmapped = NUM_ ;", "for ( Storage Volume volume : volumes ) {", "String ssn = volume . get Storage System Id ( ) ;", "boolean is Snapshot = String Utils . count Matches ( volume . get Native Id ( ) , STR_ ) == NUM_ ;", "try {", "Storage Center API api = connection Manager . get Connection ( ssn ) ;", "Sc Volume sc Vol = null ;", "if ( is Snapshot ) {", "sc Vol = api . find Replay View ( volume . get Native Id ( ) ) ;", "if ( sc Vol != null ) {", "api . delete Volume ( sc Vol . instance Id ) ;", "volumes Unmapped ++ ;", "continue ; } }", "else {", "sc Vol = api . get Volume ( volume . get Native Id ( ) ) ; }", "if ( sc Vol == null ) {", "throw new Dell SC Driver Exception ( String . format ( STR_ , volume . get Native Id ( ) ) ) ; }", "if ( server == null ) {", "server = find Sc Server ( api , ssn , initiators ) ; }", "if ( server == null ) {", "throw new Dell SC Driver Exception ( SERVER CREATE FAIL MSG ) ; }", "Sc Mapping Profile [ ] mapping Profiles = api . find Mapping Profiles ( server . instance Id , sc Vol . instance Id ) ;", "for ( Sc Mapping Profile mapping Profile : mapping Profiles ) {", "api . delete Mapping Profile ( mapping Profile . instance Id ) ; }", "volumes Unmapped ++ ;", "LOG . info ( STR_ , sc Vol . name , server . name ) ; }", "catch ( Storage Center API Exception | Dell SC Driver Exception dex ) {", "String error = String . format ( STR_ , volume . get Display Name ( ) , dex ) ;", "LOG . error ( error ) ;", "err Buffer . append ( String . format ( STR_ , error ) ) ;", "if ( SERVER CREATE FAIL MSG . equals ( dex . get Message ( ) ) ) {", "break ; } } }", "task . set Message ( err Buffer . to String ( ) ) ;", "if ( volumes Unmapped == volumes . size ( ) ) {", "task . set Status ( Task Status . READY ) ; }", "else if ( volumes Unmapped == NUM_ ) {", "task . set Status ( Task Status . FAILED ) ; }", "else {", "task . set Status ( Task Status . PARTIALLY FAILED ) ; }", "return task ; }"]}
{"ids": "59914", "code": ["public void create Cluster Async ( final String project Id , final Cluster Create Spec cluster Create Spec , final Future Callback < Task > response Callback ) throws IO Exception {", "String path = String . format ( STR_ , get Base Path ( ) , project Id ) ;", "create Object Async ( path , serialize Object As Json ( cluster Create Spec ) , response Callback ) ; }"]}
{"ids": "71882", "code": ["public static Dereference Aliases Policy value Of ( final int int Value ) {", "if ( int Value < NUM_ || int Value >= ELEMENTS . length ) {", "return null ; }", "return ELEMENTS [ int Value ] ; }"]}
{"ids": "51154", "code": ["public static void write Unsafe ( Packet Output Stream out , String value , boolean no Backslash Escapes ) throws IO Exception {", "byte [ ] bytes = value . get Bytes ( STR_ ) ;", "out . write Unsafe ( QUOTE ) ;", "write Bytes Escaped Unsafe ( out , bytes , bytes . length , no Backslash Escapes ) ;", "out . write Unsafe ( QUOTE ) ; }"]}
{"ids": "49474", "code": ["public void add ( final SAM Record read , final int position ) {", "record And Offsets . add ( new Record And Offset ( read , position ) ) ; }"]}
{"ids": "224", "code": ["private Sha 256 Hash calculate Hash ( ) {", "try {", "Byte Array Output Stream bos = new Unsafe Byte Array Output Stream ( HEADER SIZE ) ;", "write Header ( bos ) ;", "return new Sha 256 Hash ( Utils . reverse Bytes ( double Digest ( bos . to Byte Array ( ) ) ) ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "13597", "code": ["private void add Property Type ( URI p , Resource t ) {", "Owl Property prop = get Property ( p ) ;", "if ( t . equals ( OWL . TRANSITIVEPROPERTY ) ) {", "prop . set Transitive ( ) ; }", "else if ( t . equals ( OWL . SYMMETRICPROPERTY ) ) {", "prop . set Symmetric ( ) ; }", "else if ( t . equals ( OWL 2 . ASYMMETRICPROPERTY ) ) {", "prop . set Asymmetric ( ) ; }", "else if ( t . equals ( OWL . FUNCTIONALPROPERTY ) ) {", "prop . set Functional ( ) ; }", "else if ( t . equals ( OWL . INVERSEFUNCTIONALPROPERTY ) ) {", "prop . set Inverse Functional ( ) ; }", "else if ( t . equals ( OWL 2 . IRREFLEXIVEPROPERTY ) ) {", "prop . set Irreflexive ( ) ; } }"]}
{"ids": "43520", "code": ["public static void equals ( Object object 1 , Object object 2 ) {", "check Assertion ( object 1 . equals ( object 2 ) , null ) ; }"]}
{"ids": "67000", "code": ["public Dependencies resolve From File ( File file , String class Name , Soot Class sc ) {", "Dexlib Wrapper wrapper = cache . get ( file ) ;", "if ( wrapper == null ) {", "wrapper = new Dexlib Wrapper ( file ) ;", "cache . put ( file , wrapper ) ;", "wrapper . initialize ( ) ; }", "Dependencies deps = wrapper . make Soot Class ( sc , class Name ) ;", "add Source File Tag ( sc , STR_ + file . get Name ( ) ) ;", "return deps ; }"]}
{"ids": "9864", "code": ["public static String build Response Url ( String tenant , Logout State logout State ) {", "String retval = null ;", "Logout Response saml Response = logout State . generate Response For Tenant ( tenant , logout State . get Message Source ( ) , logout State . get Locale ( ) ) ;", "if ( saml Response != null ) {", "log . info ( STR_ + saml Response . to String ( ) ) ;", "retval = logout State . generate Response Url For Tenant ( saml Response , tenant ) ; }", "return retval ; }"]}
{"ids": "53963", "code": ["private void interpolate Result List ( Array List < Path Parser . Path Data Node > list ) {", "if ( list == null || list . size ( ) <= NUM_ ) return ;", "float [ ] [ ] list Pen Pos = Path Node Utils . calculate Pen Position ( list ) ;", "Array List < Path Parser . Path Data Node > sub List = new Array List < > ( ) ;", "int size = list . size ( ) ;", "Path Parser . Path Data Node current Node = null ;", "int i = NUM_ ;", "while ( i < size - NUM_ ) {", "current Node = list . get ( i ) ;", "if ( ! is Interpolatable Command ( current Node . m Type ) ) {", "i ++ ;", "continue ; }", "boolean valid Sequence = true ;", "int k = i ;", "for ( int j = i ; j < size && valid Sequence ; j ++ ) {", "if ( current Node . m Type == list . get ( j ) . m Type ) {", "k = j ;", "if ( ! Arrays . equals ( current Node . m Params , list . get ( j ) . m Params ) ) break ; }", "else valid Sequence = false ; }", "if ( k - i > NUM_ ) {", "interpolate Sub List ( list . sub List ( i , k + NUM_ ) ) ; }", "i ++ ; } }"]}
{"ids": "39348", "code": ["private void init Tokenizer ( Stream Tokenizer tokenizer ) {", "tokenizer . reset Syntax ( ) ;", "tokenizer . whitespace Chars ( NUM_ , ( STR_ - NUM_ ) ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . whitespace Chars ( STR_ , STR_ ) ;", "tokenizer . whitespace Chars ( STR_ , STR_ ) ;", "tokenizer . comment Char ( STR_ ) ;", "tokenizer . whitespace Chars ( STR_ , STR_ ) ;", "tokenizer . quote Char ( STR_ ) ;", "tokenizer . quote Char ( STR_ ) ;", "tokenizer . eol Is Significant ( true ) ; }"]}
{"ids": "75225", "code": ["protected void run Thread Size Loop ( ) throws Exception {", "for ( int i = NUM_ ; i <= NUM_ ; i += NUM_ ) {", "set Num Workers ( i ) ;", "try {", "Thread . sleep ( NUM_ * NUM_ ) ; }", "catch ( Interrupted Exception e ) { } } }"]}
{"ids": "10954", "code": ["protected boolean read ( ) {", "if ( ! n Reuse Header ) {", "Debug . message ( STR_ , STR_ ) ;", "return read Header ( ) ; }", "byte [ ] temp Data = new byte [ n Data Size - n Field Offset ] ;", "int n Read Bytes = po Module . read ( temp Data , NUM_ , temp Data . length ) ;", "System . arraycopy ( pach Data , n Field Offset , temp Data , NUM_ , temp Data . length ) ;", "if ( n Read Bytes != ( int ) ( n Data Size - n Field Offset ) && n Read Bytes == - NUM_ ) {", "return false ; }", "else if ( n Read Bytes != ( int ) ( n Data Size - n Field Offset ) ) {", "Debug . error ( STR_ ) ;", "return false ; }", "return true ; }"]}
{"ids": "49923", "code": ["public ML Results execute ( Script script ) {", "Script Executor script Executor = new Script Executor ( spark Monitoring Util ) ;", "script Executor . set Explain ( explain ) ;", "script Executor . set Explain Level ( explain Level ) ;", "script Executor . set Statistics ( statistics ) ;", "script Executor . set Init ( script History Strings . is Empty ( ) ) ;", "return execute ( script , script Executor ) ; }"]}
{"ids": "85529", "code": ["public void disable ( Rich Formatter Feature feature ) {", "features . remove ( feature ) ; }"]}
{"ids": "86513", "code": ["public void remove Event Listener ( Z Wave Event Listener event Listener ) {", "synchronized ( zwave Event Listeners ) {", "zwave Event Listeners . remove ( event Listener ) ; } }"]}
{"ids": "67336", "code": ["private static double python Time ( ) {", "return System . current Time Millis ( ) / NUM_ ; }"]}
{"ids": "2305", "code": ["@ Safe Varargs public final void add ( T ... new Items ) {", "add ( Arrays . as List ( new Items ) ) ; }"]}
{"ids": "85457", "code": ["public static String quote If Java Keyword ( String name ) {", "return JVM Module Util . quote If Java Keyword ( name ) ; }"]}
{"ids": "5924", "code": ["private static < T , ID > void add Drop Table Statements ( Database Type database Type , Table Info < T , ID > table Info , List < String > statements ) {", "List < String > statements Before = new Array List < String > ( ) ;", "List < String > statements After = new Array List < String > ( ) ;", "for ( Field Type field Type : table Info . get Field Types ( ) ) {", "database Type . drop Column Arg ( field Type , statements Before , statements After ) ; }", "String Builder sb = new String Builder ( NUM_ ) ;", "sb . append ( STR_ ) ;", "database Type . append Escaped Entity Name ( sb , table Info . get Table Name ( ) ) ;", "sb . append ( STR_ ) ;", "statements . add All ( statements Before ) ;", "statements . add ( sb . to String ( ) ) ;", "statements . add All ( statements After ) ; }"]}
{"ids": "27393", "code": ["public boolean is Locked ( ) {", "return ! queue . is Empty ( ) ; }"]}
{"ids": "62259", "code": ["private static Class Info find Or Create Class ( String t ) {", "if ( ! t . ends With ( STR_ ) ) {", "return Class Info . find Or Create Class ( t ) ; }", "else {", "String base Type = t . substring ( NUM_ , t . index Of ( STR_ ) ) ;", "int level = ( t . length ( ) - t . index Of ( STR_ ) ) / NUM_ ;", "String s = STR_ ;", "for ( int i = NUM_ ; i < level ; ++ i ) s += STR_ ;", "if ( base Type . equals ( STR_ ) ) s += STR_ ;", "else if ( base Type . equals ( STR_ ) ) s += STR_ ;", "else s += STR_ + base Type + STR_ ;", "return Class Info . find Or Create Class ( s ) ; } }"]}
{"ids": "25457", "code": ["@ HLE Function ( nid = NUM_ , version = NUM_ ) public int sce Rtc Set Tick ( T Pointer time Addr , T Pointer 64 ticks Addr ) {", "long ticks = ticks Addr . get Value ( ) - rtc Magic Offset ;", "Sce Psp Date Time time = Sce Psp Date Time . from Micros ( ticks ) ;", "time . write ( time Addr ) ;", "return NUM_ ; }"]}
{"ids": "47958", "code": ["private Big Integer odd Mod Pow ( Big Integer y , Big Integer z ) {", "if ( y . equals ( ONE ) ) return this ;", "if ( signum == NUM_ ) return ZERO ;", "int [ ] base = mag . clone ( ) ;", "int [ ] exp = y . mag ;", "int [ ] mod = z . mag ;", "int mod Len = mod . length ;", "if ( ( mod Len & NUM_ ) != NUM_ ) {", "int [ ] x = new int [ mod Len + NUM_ ] ;", "System . arraycopy ( mod , NUM_ , x , NUM_ , mod Len ) ;", "mod = x ;", "mod Len ++ ; }", "int wbits = NUM_ ;", "int ebits = bit Length ( exp , exp . length ) ;", "if ( ( ebits != NUM_ ) || ( exp [ NUM_ ] != NUM_ ) ) {", "while ( ebits > bn Exp Mod Thresh Table [ wbits ] ) {", "wbits ++ ; } }", "int tblmask = NUM_ << wbits ;", "int [ ] [ ] table = new int [ tblmask ] [ ] ;", "for ( int i = NUM_ ; i < tblmask ; i ++ ) table [ i ] = new int [ mod Len ] ;", "long n 0 = ( mod [ mod Len - NUM_ ] & LONG MASK ) + ( ( mod [ mod Len - NUM_ ] & LONG MASK ) << NUM_ ) ;", "long inv = - Mutable Big Integer . inverse Mod 64 ( n 0 ) ;", "int [ ] a = left Shift ( base , base . length , mod Len << NUM_ ) ;", "Mutable Big Integer q = new Mutable Big Integer ( ) , a 2 = new Mutable Big Integer ( a ) , b 2 = new Mutable Big Integer ( mod ) ;", "b 2 . normalize ( ) ;", "Mutable Big Integer r = a 2 . divide ( b 2 , q ) ;", "table [ NUM_ ] = r . to Int Array ( ) ;", "if ( table [ NUM_ ] . length < mod Len ) {", "int offset = mod Len - table [ NUM_ ] . length ;", "int [ ] t 2 = new int [ mod Len ] ;", "System . arraycopy ( table [ NUM_ ] , NUM_ , t 2 , offset , table [ NUM_ ] . length ) ;", "table [ NUM_ ] = t 2 ; }", "int [ ] b = montgomery Square ( table [ NUM_ ] , mod , mod Len , inv , null ) ;", "int [ ] t = Arrays . copy Of ( b , mod Len ) ;", "for ( int i = NUM_ ; i < tblmask ; i ++ ) {", "table [ i ] = montgomery Multiply ( t , table [ i - NUM_ ] , mod , mod Len , inv , null ) ; }", "int bitpos = NUM_ << ( ( ebits - NUM_ ) & ( NUM_ - NUM_ ) ) ;", "int buf = NUM_ ;", "int elen = exp . length ;", "int e Index = NUM_ ;", "for ( int i = NUM_ ; i <= wbits ; i ++ ) {", "buf = ( buf << NUM_ ) | ( ( ( exp [ e Index ] & bitpos ) != NUM_ ) ? NUM_ : NUM_ ) ;", "bitpos >>>= NUM_ ;", "if ( bitpos == NUM_ ) {", "e Index ++ ;", "bitpos = NUM_ << ( NUM_ - NUM_ ) ;", "elen -- ; } }", "int multpos = ebits ;", "ebits -- ;", "boolean isone = true ;", "multpos = ebits - wbits ;", "while ( ( buf & NUM_ ) == NUM_ ) {", "buf >>>= NUM_ ;", "multpos ++ ; }", "int [ ] mult = table [ buf > > > NUM_ ] ;", "buf = NUM_ ;", "if ( multpos == ebits ) isone = false ;", "while ( true ) {", "ebits -- ;", "buf <<= NUM_ ;", "if ( elen != NUM_ ) {", "buf |= ( ( exp [ e Index ] & bitpos ) != NUM_ ) ? NUM_ : NUM_ ;", "bitpos >>>= NUM_ ;", "if ( bitpos == NUM_ ) {", "e Index ++ ;", "bitpos = NUM_ << ( NUM_ - NUM_ ) ;", "elen -- ; } }", "if ( ( buf & tblmask ) != NUM_ ) {", "multpos = ebits - wbits ;", "while ( ( buf & NUM_ ) == NUM_ ) {", "buf >>>= NUM_ ;", "multpos ++ ; }", "mult = table [ buf > > > NUM_ ] ;", "buf = NUM_ ; }", "if ( ebits == multpos ) {", "if ( isone ) {", "b = mult . clone ( ) ;", "isone = false ; }", "else {", "t = b ;", "a = montgomery Multiply ( t , mult , mod , mod Len , inv , a ) ;", "t = a ;", "a = b ;", "b = t ; } }", "if ( ebits == NUM_ ) break ;", "if ( ! isone ) {", "t = b ;", "a = montgomery Square ( t , mod , mod Len , inv , a ) ;", "t = a ;", "a = b ;", "b = t ; } }", "int [ ] t 2 = new int [ NUM_ * mod Len ] ;", "System . arraycopy ( b , NUM_ , t 2 , mod Len , mod Len ) ;", "b = mont Reduce ( t 2 , mod , mod Len , ( int ) inv ) ;", "t 2 = Arrays . copy Of ( b , mod Len ) ;", "return new Big Integer ( NUM_ , t 2 ) ; }"]}
{"ids": "60415", "code": ["public int next Token ( ) {", "while ( index < length && Character . is Whitespace ( expr [ index ] ) ) {", "index ++ ; }", "token Val = null ;", "if ( index == length ) return TOKEN END ;", "int start = index ;", "char current Char = expr [ index ] ;", "char next Char = ( char ) NUM_ ;", "index ++ ;", "if ( index < length ) next Char = expr [ index ] ;", "switch ( current Char ) {", "case STR_ :", "return TOKEN LBRACE ;", "case STR_ :", "return TOKEN RBRACE ;", "case STR_ :", "return TOKEN EQ ;", "case STR_ :", "if ( next Char == STR_ ) {", "index ++ ;", "return TOKEN NOT EQ ; }", "return TOKEN NOT ;", "case STR_ :", "if ( next Char == STR_ ) {", "index ++ ;", "return TOKEN OR ; }", "break ;", "case STR_ :", "if ( next Char == STR_ ) {", "index ++ ;", "return TOKEN AND ; }", "break ;", "case STR_ :", "if ( next Char == STR_ ) {", "index ++ ;", "return TOKEN GE ; }", "return TOKEN GT ;", "case STR_ :", "if ( next Char == STR_ ) {", "index ++ ;", "return TOKEN LE ; }", "return TOKEN LT ;", "default :", "break ; }", "int end = index ;", "if ( current Char == STR_ || current Char == STR_ ) {", "char end Char = current Char ;", "boolean escaped = false ;", "start ++ ;", "for ( ; index < length ; index ++ ) {", "if ( expr [ index ] == STR_ && ! escaped ) {", "escaped = true ;", "continue ; }", "if ( expr [ index ] == end Char && ! escaped ) break ;", "escaped = false ; }", "end = index ;", "index ++ ; }", "else if ( current Char == STR_ ) {", "char end Char = current Char ;", "boolean escaped = false ;", "for ( ; index < length ; index ++ ) {", "if ( expr [ index ] == STR_ && ! escaped ) {", "escaped = true ;", "continue ; }", "if ( expr [ index ] == end Char && ! escaped ) break ;", "escaped = false ; }", "end = ++ index ; }", "else {", "for ( ; index < length ; index ++ ) {", "if ( is Meta Char ( expr [ index ] ) ) break ; }", "end = index ; }", "this . token Val = new String ( expr , start , end - start ) ;", "return TOKEN STRING ; }"]}
{"ids": "21098", "code": ["public void audit Callhome ( Operation Type Enum audit Type , String operational Status , String description , Object ... descparams ) {", "audit Mgr . record Audit Log ( null , null , EVENT SERVICE TYPE , audit Type , System . current Time Millis ( ) , operational Status , description , descparams ) ; }"]}
{"ids": "23275", "code": ["public static String construct NT Ptime ( long date ) {", "long ntp Time = NUM_ ;", "long start Time = ( date / SECONDS TO MILLISECONDS CONVERSION RATE ) + ntp Time ;", "return String . value Of ( start Time ) ; }"]}
{"ids": "34302", "code": ["protected Media Type select Media Type ( Server Web Exchange exchange , List < Media Type > producible Types ) {", "List < Media Type > acceptable Types = get Acceptable Types ( exchange ) ;", "producible Types = get Producible Types ( exchange , producible Types ) ;", "Set < Media Type > compatible Media Types = new Linked Hash Set < > ( ) ;", "for ( Media Type acceptable : acceptable Types ) {", "for ( Media Type producible : producible Types ) {", "if ( acceptable . is Compatible With ( producible ) ) {", "compatible Media Types . add ( select More Specific Media Type ( acceptable , producible ) ) ; } } }", "List < Media Type > result = new Array List < > ( compatible Media Types ) ;", "Media Type . sort By Specificity And Quality ( result ) ;", "for ( Media Type media Type : compatible Media Types ) {", "if ( media Type . is Concrete ( ) ) {", "return media Type ; }", "else if ( media Type . equals ( Media Type . ALL ) || media Type . equals ( MEDIA TYPE APPLICATION ALL ) ) {", "return Media Type . APPLICATION OCTET STREAM ; } }", "return null ; }"]}
{"ids": "10190", "code": ["public void ensure Capacity ( int mincap ) {", "if ( mincap > array . length ) {", "int newcap = ( ( array . length * NUM_ ) > > NUM_ ) + NUM_ ;", "int [ ] olddata = array ;", "array = new int [ newcap < mincap ? mincap : newcap ] ;", "System . arraycopy ( olddata , NUM_ , array , NUM_ , size ) ; } }"]}
{"ids": "77115", "code": ["public void invalidate And Unmap ( Byte Buffer ... bufs ) throws IO Exception {", "if ( cleaner != null ) {", "invalidated = true ;", "barrier . lazy Set ( NUM_ ) ;", "Thread . yield ( ) ;", "for ( Byte Buffer b : bufs ) {", "cleaner . free Buffer ( resource Description , b ) ; } } }"]}
{"ids": "24572", "code": ["public int add Dir ( File file ) {", "if ( ! file . exists ( ) ) {", "return NUM_ ; }", "String [ ] names = get Names ( get Files ( file , STR_ ) ) ;", "load Class ( file , names ) ;", "return NUM_ ; }"]}
{"ids": "7570", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( obj == this ) {", "return true ; }", "if ( ! ( obj instanceof Bubble XY Item Label Generator ) ) {", "return false ; }", "if ( ! super . equals ( obj ) ) {", "return false ; }", "Bubble XY Item Label Generator that = ( Bubble XY Item Label Generator ) obj ;", "if ( ! Object Utilities . equal ( this . z Format , that . z Format ) ) {", "return false ; }", "if ( ! Object Utilities . equal ( this . z Date Format , that . z Date Format ) ) {", "return false ; }", "return true ; }"]}
{"ids": "15270", "code": ["public static boolean has Element Child ( Node node ) {", "Node List nl = node . get Child Nodes ( ) ;", "Node child = null ;", "int length = nl . get Length ( ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "child = nl . item ( i ) ;", "if ( child . get Node Type ( ) == Node . ELEMENT NODE ) {", "return true ; } }", "return false ; }"]}
{"ids": "49208", "code": ["public void del Item ( int index ) {", "synchronized ( get Menu Tree Lock ( ) ) {", "if ( selected Index == index ) {", "select Item ( null , false ) ; }", "else if ( selected Index > index ) {", "selected Index -- ; }", "if ( index < items . size ( ) ) {", "items . remove ( index ) ; }", "else {", "if ( log . is Loggable ( Platform Logger . Level . FINE ) ) {", "log . fine ( STR_ + index + STR_ + items . size ( ) ) ; } } }", "update Size ( ) ; }"]}
{"ids": "68413", "code": ["public static int count CSS Primitive Names ( ) {", "return ALL PRIMITIVE PROPERTY NAMES . size ( ) ; }"]}
{"ids": "40787", "code": ["private static Intent create Map Activity Intent ( Context context , URL Span [ ] url Spans ) {", "for ( int span i = NUM_ ; span i < url Spans . length ; span i ++ ) {", "URL Span url Span = url Spans [ span i ] ;", "String url String = url Span . get URL ( ) ;", "if ( url String . starts With ( GEO PREFIX ) ) {", "Intent geo Intent = new Intent ( Intent . ACTION VIEW , Uri . parse ( url String ) ) ;", "geo Intent . add Flags ( Intent . FLAG ACTIVITY NEW TASK ) ;", "return geo Intent ; } }", "return null ; }"]}
{"ids": "30224", "code": ["private String Builder generate Parameters ( ) {", "String Builder parameters = new String Builder ( ) ;", "if ( filter Map == null && expand Parameters == null ) {", "return parameters ; }", "parameters . append ( STR_ ) ;", "int filter Parameter Counter = NUM_ ;", "if ( filter Map != null && ! filter Map . is Empty ( ) ) {", "parameters . append ( FILTER PREFIX ) ;", "for ( Map . Entry < String , String > filter Entry : filter Map . entry Set ( ) ) {", "parameters . append ( String . format ( STR_ , filter Entry . get Key ( ) , filter Entry . get Value ( ) ) ) ;", "if ( ++ filter Parameter Counter < filter Map . size ( ) ) {", "parameters . append ( STR_ ) ; } }", "if ( expand Parameters != null ) {", "parameters . append ( STR_ ) ; } }", "if ( expand Parameters != null ) {", "parameters . append ( EXPAND PREFIX ) ;", "Iterator iterator = expand Parameters . iterator ( ) ;", "parameters . append ( String . format ( STR_ , iterator . next ( ) ) ) ;", "while ( iterator . has Next ( ) ) {", "parameters . append ( String . format ( STR_ , iterator . next ( ) ) ) ; } }", "return parameters ; }"]}
{"ids": "28973", "code": ["public static @ Check For Null @ Slashed Class Name String from Field Signature ( String signature ) {", "if ( signature . char At ( NUM_ ) != STR_ ) {", "return null ; }", "return signature . substring ( NUM_ , signature . length ( ) - NUM_ ) ; }"]}
{"ids": "53605", "code": ["private void paint Preview ( int dx , int dy , float zoomfactor ) {", "if ( image != null ) {", "Graphics 2 D g 2 = ( Graphics 2 D ) get Graphics ( ) ;", "U Color bg = renderer . get Background Color ( ) ;", "g 2 . set Background ( new Color ( bg . get Red ( ) , bg . get Green ( ) , bg . get Blue ( ) , bg . get Alpha ( ) ) ) ;", "int new Width = Math . round ( image . get Width ( null ) * zoomfactor ) ;", "int new Height = ( int ) Math . round ( image . get Height ( null ) * zoomfactor ) ;", "g 2 . draw Image ( image , dx , dy , new Width , new Height , null ) ;", "if ( dx > NUM_ ) g 2 . clear Rect ( NUM_ , NUM_ , dx , get Height ( ) ) ;", "else g 2 . clear Rect ( get Width ( ) + dx , NUM_ , get Width ( ) , get Height ( ) ) ;", "if ( dy > NUM_ ) g 2 . clear Rect ( NUM_ , NUM_ , get Width ( ) , dy ) ;", "else g 2 . clear Rect ( NUM_ , get Height ( ) + dy , get Width ( ) , get Height ( ) ) ; } }"]}
{"ids": "62656", "code": ["public static List < List < Double > > partition Variable ( List < Double > arr , int chunk ) {", "int count = NUM_ ;", "List < List < Double > > ret = new Array List < List < Double > > ( ) ;", "while ( count < arr . size ( ) ) {", "List < Double > sublist = arr . sub List ( count , count + chunk ) ;", "count += chunk ;", "ret . add ( sublist ) ; }", "for ( List < Double > lists : ret ) {", "if ( lists . size ( ) < chunk ) ret . remove ( lists ) ; }", "return ret ; }"]}
{"ids": "46263", "code": ["private static void update Window UI ( Window window ) {", "Swing Utilities . update Component Tree UI ( window ) ;", "Window owned Wins [ ] = window . get Owned Windows ( ) ;", "for ( Window owned Win : owned Wins ) {", "update Window UI ( owned Win ) ; } }"]}
{"ids": "51056", "code": ["public Array List < Constraint Widget > find Widgets ( Widget Container container , int x , int y , int width , int height ) {", "Array List < Constraint Widget > found = new Array List < > ( ) ;", "Rectangle area = new Rectangle ( x , y , width , height ) ;", "for ( Constraint Widget widget : container . get Children ( ) ) {", "Widget Companion companion = ( Widget Companion ) widget . get Companion Widget ( ) ;", "Widget Decorator decorator = companion . get Widget Decorator ( Widget Decorator . BLUEPRINT STYLE ) ;", "if ( ! decorator . is Visible ( ) ) {", "continue ; }", "Rectangle bounds = new Rectangle ( widget . get Draw X ( ) , widget . get Draw Y ( ) , widget . get Width ( ) , widget . get Height ( ) ) ;", "if ( area . intersects ( bounds ) ) {", "found . add ( widget ) ; } }", "return found ; }"]}
{"ids": "52356", "code": ["public final void print Symbol ( Char Sequence text ) throws IO Exception {", "if ( text == null ) {", "append Ascii ( STR_ ) ; }", "else if ( text . length ( ) == NUM_ ) {", "throw new Empty Symbol Exception ( ) ; }", "else if ( symbol Needs Quoting ( text , true ) ) {", "append Ascii ( STR_ ) ;", "print Code Points ( text , SYMBOL ESCAPE CODES ) ;", "append Ascii ( STR_ ) ; }", "else {", "append Ascii ( text ) ; } }"]}
{"ids": "75538", "code": ["private void add Classes ( Class < ? > [ ] classes , Hash Set < Class < ? > > result , String field Name ) {", "if ( classes == null || classes . length == NUM_ ) Error . classes Absent ( field Name , configured Class ) ;", "for ( Class < ? > classe : classes ) result . add ( classe ) ; }"]}
{"ids": "13792", "code": ["public void schema Changed ( String service Name , String version ) {", "synchronized ( map Realm To Format ) {", "map Realm To Format . remove ( ROOT ) ; } }"]}
{"ids": "13183", "code": ["protected Date Time Data parse ( String str ) throws Schema Date Time Exception {", "Date Time Data date = new Date Time Data ( str , this ) ;", "int len = str . length ( ) ;", "date . year = YEAR ;", "date . day = DAY ;", "if ( str . char At ( NUM_ ) != STR_ || str . char At ( NUM_ ) != STR_ ) {", "throw new Schema Date Time Exception ( STR_ + str ) ; }", "int stop = NUM_ ;", "date . month = parse Int ( str , NUM_ , stop ) ;", "if ( str . length ( ) >= stop + NUM_ && str . char At ( stop ) == STR_ && str . char At ( stop + NUM_ ) == STR_ ) {", "stop += NUM_ ; }", "if ( stop < len ) {", "if ( ! is Next Char UTC Sign ( str , stop , len ) ) {", "throw new Schema Date Time Exception ( STR_ + str ) ; }", "else {", "get Time Zone ( str , date , stop , len ) ; } }", "validate Date Time ( date ) ;", "save Unnormalized ( date ) ;", "if ( date . utc != NUM_ && date . utc != STR_ ) {", "normalize ( date ) ; }", "date . position = NUM_ ;", "return date ; }"]}
{"ids": "86507", "code": ["private void add To Queue ( Serial Message serial Message ) {", "if ( serial Message == null ) {", "return ; }", "if ( ! msg Queue . contains ( serial Message ) && msg Queue . remaining Capacity ( ) > NUM_ ) {", "msg Queue . add ( serial Message ) ; }", "send Message ( ) ; }"]}
{"ids": "52971", "code": ["private DBID string To DBID ( String query ) {", "return DBID Util . import Integer ( Integer . value Of ( query ) ) ; }"]}
{"ids": "29710", "code": ["public Thrift Service Metadata ( Class < ? > service Type ) {", "require Non Null ( service Type , STR_ ) ;", "interfaces = init ( null , Collections . singleton ( service Type ) ) ; }"]}
{"ids": "59932", "code": ["public static Response invalid Entity ( Constraint Violation Exception e ) {", "String Builder error Message = new String Builder ( ) ;", "boolean first Pass = true ;", "for ( Constraint Violation error : e . get Constraint Violations ( ) ) {", "if ( ! first Pass ) {", "error Message . append ( STR_ ) ; }", "error Message . append ( String . format ( STR_ , error . get Property Path ( ) , error . get Message ( ) , error . get Invalid Value ( ) ) ) ;", "first Pass = false ; }", "External Exception external Exception = new External Exception ( Error Code . INVALID ENTITY , error Message . to String ( ) , null ) ;", "return external Exception ( external Exception ) ; }"]}
{"ids": "74146", "code": ["public String check Start Block ( int mode ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + get Display Name ( ) + STR_ ) ;", "Block Order bo = orders . get ( NUM_ ) ;", "O Block block = bo . get Block ( ) ;", "String msg = block . allocate ( this ) ;", "if ( msg != null ) {", "return msg ; }", "msg = bo . set Path ( this ) ;", "if ( msg != null ) {", "return msg ; }", "int state = block . get State ( ) ;", "if ( ( state & O Block . DARK ) != NUM_ || temp Run Blind ) {", "msg = Bundle . get Message ( STR_ , block . get Display Name ( ) ) ; }", "else if ( ( state & O Block . OCCUPIED ) == NUM_ ) {", "if ( mode == MODE LEARN ) {", "msg = STR_ ; }", "else {", "msg = STR_ ; }", "msg = Bundle . get Message ( msg , get Train Name ( ) , block . get Display Name ( ) ) ; }", "else {", "Tracker Table Action . stop Tracker In ( block ) ; }", "return msg ; }"]}
{"ids": "67509", "code": ["private void parse Switch ( int indent , boolean first Content , String header , Layout layout , List < Elem > elems ) {", "Token Stream tokens = new Token Stream ( header ) ;", "Elem selector = parse Expr ( tokens ) ;", "tokens . check At End ( ) ;", "Immutable List . Builder < Case > cases = Immutable List . builder ( ) ;", "List < Elem > default Elems = null ;", "boolean done ;", "String line = get Next Line ( ) ;", "Matcher matcher = COMMAND LINE . matcher ( line ) ;", "String command ;", "String rest ;", "if ( matcher . find ( ) ) {", "command = matcher . group ( COMMAND NAME GROUP ) ;", "rest = line . substring ( matcher . end ( ) ) ;", "done = false ; }", "else {", "error ( STR_ ) ;", "done = true ;", "command = null ;", "rest = null ; }", "while ( ! done ) {", "switch ( command ) {", "case END COMMAND :", "check Header Empty ( command , rest ) ;", "done = true ;", "break ;", "case DEFAULT COMMAND :", "check Header Empty ( command , rest ) ;", "if ( default Elems != null ) {", "error ( STR_ ) ; }", "default Elems = parse Until ( indent , layout , END COMMAND ) ;", "command = last Terminator ;", "rest = last Terminator Header ;", "done = last Terminator == null ;", "break ;", "case CASE COMMAND :", "tokens = new Token Stream ( rest ) ;", "Elem value = parse Expr ( tokens ) ;", "tokens . check At End ( ) ;", "List < Elem > case Elems = parse Until ( indent , layout , END COMMAND , CASE COMMAND , DEFAULT COMMAND ) ;", "if ( value != null ) {", "cases . add ( Case . create ( value , case Elems ) ) ; }", "command = last Terminator ;", "rest = last Terminator Header ;", "done = last Terminator == null ;", "break ;", "default :", "unexpected Command Error ( command ) ;", "done = true ;", "break ; } }", "if ( selector != null ) {", "elems . add ( Block . create ( ! first Content , Switch . create ( input . location ( ) , selector , cases . build ( ) , default Elems ) ) ) ; } }"]}
{"ids": "10899", "code": ["public void init ( String prefix , java . net . URL url ) {", "try {", "java . io . Input Stream in = url . open Stream ( ) ;", "Properties props = new Properties ( ) ;", "props . load ( in ) ;", "init ( get Layers ( prefix , props ) ) ; }", "catch ( java . net . Malformed URL Exception murle ) {", "logger . warning ( STR_ + url + STR_ ) ; }", "catch ( java . io . IO Exception e ) {", "logger . warning ( STR_ ) ; } }"]}
{"ids": "23606", "code": ["public static Properties create Properties ( final Map < String , String > map ) {", "Properties properties = new Properties ( ) ;", "if ( ! ( map == null || map . is Empty ( ) ) ) {", "for ( Entry < String , String > entry : map . entry Set ( ) ) {", "properties . set Property ( entry . get Key ( ) , entry . get Value ( ) ) ; } }", "return properties ; }"]}
{"ids": "10119", "code": ["public Node select First ( String query ) {", "List < Node > selected Nodes = select ( query ) ;", "if ( selected Nodes . is Empty ( ) ) {", "return null ; }", "return selected Nodes . get ( NUM_ ) ; }"]}
{"ids": "11057", "code": ["public static String [ ] string Array From Properties ( Properties p , String prop Name , String tok ) {", "String [ ] ret = null ;", "String raw = p . get Property ( prop Name ) ;", "if ( raw != null && raw . length ( ) > NUM_ ) {", "try {", "String Tokenizer token = new String Tokenizer ( raw , tok ) ;", "int num Paths = token . count Tokens ( ) ;", "ret = new String [ num Paths ] ;", "for ( int i = NUM_ ; i < num Paths ; i ++ ) {", "ret [ i ] = token . next Token ( ) ; }", "return ret ; }", "catch ( java . util . No Such Element Exception e ) {", "e . print Stack Trace ( ) ; } }", "return ret ; }"]}
{"ids": "11167", "code": ["public void generate ( int x 1 , int y 1 , int x 2 , int y 2 ) {", "Point mid Point = new Point ( ) ;", "Point arc Center = new Point ( ) ;", "Point 2 D peak Point = new Point 2 D . Float ( ) ;", "double distance = Math . sqrt ( Math . pow ( Math . abs ( y 2 - y 1 ) , NUM_ ) + Math . pow ( Math . abs ( x 2 - x 1 ) , NUM_ ) ) ;", "double straight Line Slope = Math . atan ( ( double ) ( y 2 - y 1 ) / ( double ) ( x 2 - x 1 ) ) ;", "double inverse Slope = straight Line Slope - ( Math . PI / NUM_ ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + Math . to Degrees ( straight Line Slope ) + STR_ + distance + STR_ ) ; }", "mid Point . set Location ( x 1 + ( ( x 2 - x 1 ) / NUM_ ) , y 1 + ( ( y 2 - y 1 ) / NUM_ ) ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + x 1 + STR_ + y 1 + STR_ + x 2 + STR_ + y 2 + STR_ + mid Point . x + STR_ + mid Point . y + STR_ ) ; }", "double arccos = Math . cos ( arc Angle ) ;", "double arc Radius ;", "if ( arccos != NUM_ ) {", "arc Radius = distance / Math . sqrt ( NUM_ * ( NUM_ - Math . cos ( arc Angle ) ) ) ; }", "else {", "arc Radius = distance / Math . sqrt ( NUM_ ) ; }", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + arc Radius ) ; }", "double x = arc Radius - arc Radius * Math . cos ( arc Angle ) ;", "double r Prime = ( distance / NUM_ ) * ( Math . sqrt ( NUM_ - Math . pow ( x / distance , NUM_ ) ) ) / Math . sin ( arc Angle / NUM_ ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + r Prime ) ; }", "int direction = NUM_ ;", "if ( arc Up ) direction = - NUM_ ;", "arc Center . x = mid Point . x + ( direction * ( int ) ( r Prime * Math . cos ( inverse Slope ) ) ) ;", "arc Center . y = mid Point . y + ( direction * ( int ) ( r Prime * Math . sin ( inverse Slope ) ) ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ ) ;", "arc Graphics = new OM Graphic List ( ) ;", "double dist 1 = Math . sqrt ( Math . pow ( ( double ) ( arc Center . x - x 1 ) , NUM_ ) + Math . pow ( ( double ) ( arc Center . y - y 1 ) , NUM_ ) ) ;", "double dist 2 = Math . sqrt ( Math . pow ( ( double ) ( arc Center . x - x 2 ) , NUM_ ) + Math . pow ( ( double ) ( arc Center . y - y 2 ) , NUM_ ) ) ;", "Debug . output ( STR_ + arc Center . x + STR_ + arc Center . y + STR_ + Math . to Degrees ( inverse Slope ) + STR_ ) ;", "Debug . output ( STR_ + dist 1 + STR_ + dist 2 ) ;", "OM Rect point 1 = new OM Rect ( x 1 - NUM_ , y 1 - NUM_ , x 1 + NUM_ , y 1 + NUM_ ) ;", "OM Rect point 2 = new OM Rect ( x 2 - NUM_ , y 2 - NUM_ , x 2 + NUM_ , y 2 + NUM_ ) ;", "OM Rect arc Point = new OM Rect ( arc Center . x - NUM_ , arc Center . y - NUM_ , arc Center . x + NUM_ , arc Center . y + NUM_ ) ;", "point 1 . set Line Paint ( OM Color . red ) ;", "point 2 . set Line Paint ( OM Color . red ) ;", "arc Point . set Line Paint ( OM Color . blue ) ;", "arc Graphics . add ( point 1 ) ;", "arc Graphics . add ( point 2 ) ;", "arc Graphics . add ( arc Point ) ;", "OM Line line 1 = new OM Line ( x 1 , y 1 , x 2 , y 2 ) ;", "OM Line line 2 = new OM Line ( mid Point . x , mid Point . y , arc Center . x , arc Center . y ) ;", "arc Graphics . add ( line 1 ) ;", "arc Graphics . add ( line 2 ) ; }", "int real Count = NUM_ ;", "double start Slope = get Real Angle ( ( float ) arc Center . get X ( ) , ( float ) arc Center . get Y ( ) , x 1 , y 1 ) ;", "double end Slope = get Real Angle ( ( float ) arc Center . get X ( ) , ( float ) arc Center . get Y ( ) , x 2 , y 2 ) ;", "double small Slope , large Slope ;", "double angle Increment ;", "small Slope = ( start Slope > end Slope ) ? end Slope : start Slope ;", "large Slope = ( small Slope == start Slope ) ? end Slope : start Slope ;", "while ( Math . abs ( small Slope - large Slope ) > Math . PI ) {", "if ( Math . abs ( large Slope - small Slope - Math . PI ) < NUM_ ) {", "break ; }", "Debug . message ( STR_ , STR_ ) ;", "double tmp Slope = small Slope + More Math . TWO PI ;", "small Slope = large Slope ;", "large Slope = tmp Slope ; }", "if ( More Math . approximately equal ( arc Angle , Math . PI ) && arc Up ) {", "Debug . message ( STR_ , STR_ ) ;", "double tmp Slope = small Slope + More Math . TWO PI ;", "small Slope = large Slope ;", "large Slope = tmp Slope ; }", "if ( Math . abs ( y 2 - y 1 ) < Math . abs ( x 2 - x 1 ) ) {", "angle Increment = Math . PI / Math . abs ( x 2 - x 1 ) ; }", "else {", "angle Increment = Math . PI / Math . abs ( y 2 - y 1 ) ; }", "int num Points = ( int ) ( Math . abs ( small Slope - large Slope ) / angle Increment + NUM_ ) ;", "float [ ] x Points = new float [ num Points ] ;", "float [ ] y Points = new float [ num Points ] ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + start Slope + STR_ + Math . to Degrees ( start Slope ) + STR_ + end Slope + STR_ + Math . to Degrees ( end Slope ) + STR_ ) ;", "Debug . output ( STR_ + small Slope + STR_ + Math . to Degrees ( small Slope ) + STR_ + large Slope + STR_ + Math . to Degrees ( large Slope ) + STR_ + angle Increment + STR_ + Math . to Degrees ( angle Increment ) + STR_ ) ; }", "reversed = false ;", "while ( small Slope < large Slope && real Count < num Points ) {", "x Points [ real Count ] = arc Center . x + ( int ) ( arc Radius * Math . cos ( small Slope ) ) ;", "y Points [ real Count ] = arc Center . y + ( int ) ( arc Radius * Math . sin ( small Slope ) ) ;", "if ( real Count == NUM_ && x Points [ real Count ] == x 2 ) {", "Debug . message ( STR_ , STR_ ) ;", "reversed = true ; }", "if ( Debug . debugging ( STR_ ) && real Count == NUM_ ) {", "OM Line start Line = new OM Line ( arc Center . x , arc Center . y , ( int ) x Points [ NUM_ ] , ( int ) y Points [ NUM_ ] ) ;", "start Line . set Line Paint ( OM Color . white ) ;", "arc Graphics . add ( start Line ) ; }", "else if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + small Slope + STR_ + small Slope * NUM_ / Math . PI + STR_ + x Points [ real Count ] + STR_ + y Points [ real Count ] ) ; }", "if ( Math . abs ( large Slope - small Slope - ( arc Angle / NUM_ ) ) < angle Increment ) {", "peak Point . set Location ( x Points [ real Count ] , y Points [ real Count ] ) ;", "Debug . message ( STR_ , STR_ ) ; }", "small Slope += angle Increment ;", "real Count ++ ; }", "xpoints = new float [ real Count ] ;", "ypoints = new float [ real Count ] ;", "System . arraycopy ( x Points , NUM_ , xpoints , NUM_ , real Count ) ;", "System . arraycopy ( y Points , NUM_ , ypoints , NUM_ , real Count ) ; }"]}
{"ids": "86420", "code": ["private static int compare Locales ( Locale primary , Locale other ) {", "final String lang = primary . get Language ( ) ;", "if ( ( lang == null ) || ! lang . equals ( other . get Language ( ) ) ) {", "return NUM_ ; }", "final String country = primary . get Country ( ) ;", "if ( ( country == null ) || ! country . equals ( other . get Country ( ) ) ) {", "return NUM_ ; }", "final String variant = primary . get Variant ( ) ;", "if ( ( variant == null ) || ! variant . equals ( other . get Variant ( ) ) ) {", "return NUM_ ; }", "return NUM_ ; }"]}
{"ids": "63548", "code": ["void query Read Result ( Prepared Statement prep ) throws SQL Exception {", "Result Set rs = prep . execute Query ( ) ;", "Result Set Meta Data meta = rs . get Meta Data ( ) ;", "int column Count = meta . get Column Count ( ) ;", "while ( rs . next ( ) ) {", "for ( int i = NUM_ ; i < column Count ; i ++ ) {", "rs . get String ( i + NUM_ ) ; } } }"]}
{"ids": "66252", "code": ["public boolean equals ( Object obj ) {", "if ( obj instanceof M Sort ) {", "M Sort ms = ( M Sort ) obj ;", "if ( data == ms . data ) return true ; }", "return false ; }"]}
{"ids": "36811", "code": ["public static void end Transaction ( final C Connection connection ) throws SQL Exception {", "end Transaction ( connection . get Connection ( ) ) ; }"]}
{"ids": "15372", "code": ["private void change Open AM Debug Folder ( String new Open AM Debug Folder ) {", "System Properties Manager . initialize Properties ( Debug Constants . CONFIG DEBUG DIRECTORY , new Open AM Debug Folder ) ; }"]}
{"ids": "40582", "code": ["protected String compute Full Url ( URL base Url , String link ) {", "if ( link == null || link . length ( ) == NUM_ ) {", "return null ; }", "if ( ! link . starts With ( STR_ ) ) {", "if ( link . starts With ( STR_ ) ) {", "link = base Url . get Protocol ( ) + STR_ + base Url . get Authority ( ) + link ; }", "else {", "if ( link . contains ( STR_ ) ) {", "return null ; }", "String path = base Url . get Path ( ) ;", "if ( ! path . ends With ( STR_ ) ) {", "int sep = path . last Index Of ( STR_ ) ;", "String file = path . substring ( sep + NUM_ ) ;", "if ( file . contains ( STR_ ) || file . contains ( STR_ ) ) path = path . substring ( NUM_ , sep ) ; }", "link = base Url . get Protocol ( ) + STR_ + base Url . get Authority ( ) + path + STR_ + link ; } }", "link = normalize Url Ending ( link ) ;", "String l = link . to Lower Case ( Locale . ROOT ) ;", "if ( l . ends With ( STR_ ) || l . ends With ( STR_ ) || l . ends With ( STR_ ) || l . ends With ( STR_ ) ) {", "return null ; }", "return link ; }"]}
{"ids": "3848", "code": ["private void load Manifest ( ) {", "if ( is Manifest Read ) return ;", "synchronized ( this ) {", "if ( is Manifest Read ) return ;", "try {", "manifest = jar Path . get Manifest ( ) ;", "if ( manifest == null ) return ;", "Attributes attr = manifest . get Main Attributes ( ) ;", "if ( attr != null ) add Manifest Package ( STR_ , attr ) ;", "Map < String , Attributes > entries = manifest . get Entries ( ) ;", "for ( Map . Entry < String , Attributes > entry : entries . entry Set ( ) ) {", "String pkg = entry . get Key ( ) ;", "attr = entry . get Value ( ) ;", "if ( attr == null ) continue ;", "add Manifest Package ( pkg , attr ) ; } }", "catch ( IO Exception e ) {", "log . log ( Level . WARNING , e . to String ( ) , e ) ; }", "finally {", "is Manifest Read = true ; } } }"]}
{"ids": "81351", "code": ["public Reference Binding [ ] convert To Raw Types ( Reference Binding [ ] original Types , boolean force Erasure , boolean force Raw Enclosing Type ) {", "if ( original Types == null ) return null ;", "Reference Binding [ ] converted Types = original Types ;", "for ( int i = NUM_ , length = original Types . length ; i < length ; i ++ ) {", "Reference Binding original Type = original Types [ i ] ;", "Reference Binding converted Type = ( Reference Binding ) convert To Raw Type ( force Erasure ? original Type . erasure ( ) : original Type , force Raw Enclosing Type ) ;", "if ( converted Type != original Type ) {", "if ( converted Types == original Types ) {", "System . arraycopy ( original Types , NUM_ , converted Types = new Reference Binding [ length ] , NUM_ , i ) ; }", "converted Types [ i ] = converted Type ; }", "else if ( converted Types != original Types ) {", "converted Types [ i ] = original Type ; } }", "return converted Types ; }"]}
{"ids": "71589", "code": ["public void add Column ( int idx , Column column ) {", "if ( column != null ) {", "columns . add ( idx , column ) ; } }"]}
{"ids": "83722", "code": ["public void read Data ( Data Input din ) throws IO Exception {", "reference = din . read Unsigned Short ( ) ;", "and Mask = din . read Unsigned Short ( ) ;", "or Mask = din . read Unsigned Short ( ) ; }"]}
{"ids": "63936", "code": ["boolean remove Display ( Display display ) {", "return m displays . remove ( display ) ; }"]}
{"ids": "86655", "code": ["public double next Gaussian ( ) {", "if ( m Have Next Next Gaussian ) {", "m Have Next Next Gaussian = false ;", "return m Next Next Gaussian ; }", "else {", "double v 1 , v 2 , s ;", "do {", "v 1 = NUM_ * next Double ( ) - NUM_ ;", "v 2 = NUM_ * next Double ( ) - NUM_ ;", "s = v 1 * v 1 + v 2 * v 2 ; }", "while ( s >= NUM_ || s == NUM_ ) ;", "final double multiplier = Strict Math . sqrt ( - NUM_ * Strict Math . log ( s ) / s ) ;", "m Next Next Gaussian = v 2 * multiplier ;", "m Have Next Next Gaussian = true ;", "return v 1 * multiplier ; } }"]}
{"ids": "27513", "code": ["private void fire Event ( final I Running Query q ) {", "if ( q == null ) throw new Illegal Argument Exception ( ) ;", "if ( listeners . is Empty ( ) ) {", "return ; }", "final I Running Query Listener [ ] a = listeners . to Array ( new I Running Query Listener [ NUM_ ] ) ;", "for ( I Running Query Listener l : a ) {", "final I Running Query Listener listener = l ;", "try {", "listener . notify ( q ) ; }", "catch ( Throwable t ) {", "if ( Inner Cause . is Inner Cause ( t , Interrupted Exception . class ) ) {", "throw new Runtime Exception ( t ) ; }", "log . error ( t , t ) ; } } }"]}
{"ids": "23116", "code": ["private void update Contact Header Port ( int local Port , SIP Message message ) {", "if ( message != null && message . get Contact Header ( ) != null ) {", "Contact Header contact Header = message . get Contact Header ( ) ;", "Address contact Address = contact Header . get Address ( ) ;", "contact Address . set Port ( local Port ) ; } }"]}
{"ids": "69757", "code": ["@ Override public void visit Vertex ( Street Router . State state ) {", "Integer edge Idx = state . back Edge ;", "if ( ! ( edge Idx == null || edge Idx == - NUM_ ) ) {", "Edge Store . Edge edge = edge Store . get Cursor ( edge Idx ) ;", "Geo Json Feature feature = new Geo Json Feature ( edge . get Geometry ( ) ) ;", "feature . add Property ( STR_ , state . weight ) ;", "feature . add Property ( STR_ , state . street Mode ) ;", "feature . add Property ( STR_ , state . back Edge ) ;", "features . add ( feature ) ; } }"]}
{"ids": "9222", "code": ["public static void delete File Or Log ( File file ) {", "if ( ! file . delete ( ) ) {", "logger . warn ( FAILED DELETING FILE + file . get Path ( ) ) ; } }"]}
{"ids": "13358", "code": ["public Gitlab Group Member add Group Member ( Gitlab Group group , Gitlab User user , Gitlab Access Level access Level ) throws IO Exception {", "return add Group Member ( group . get Id ( ) , user . get Id ( ) , access Level ) ; }"]}
{"ids": "14460", "code": ["protected Logger ( String name , String resource Bundle Name ) {", "super ( name , resource Bundle Name ) ; }"]}
{"ids": "53139", "code": ["public static double compute MAD ( double [ ] x , double median ) {", "for ( int i = NUM_ ; i < x . length ; i ++ ) {", "x [ i ] = Math . abs ( x [ i ] - median ) ; }", "double mad = Quick Select . median ( x ) ;", "if ( ! ( mad > NUM_ ) ) {", "double min = Double . POSITIVE INFINITY ;", "for ( double xi : x ) {", "if ( xi > NUM_ && xi < min ) {", "min = xi ; } }", "if ( min < Double . POSITIVE INFINITY ) {", "mad = min ; }", "else {", "mad = NUM_ ; } }", "return mad ; }"]}
{"ids": "36926", "code": ["private static < T > void initialize Known Plugins ( final T plugin Interface , final I Plugin Registry < I Plugin < T > > registry , final List < Plugin Config Item > xml Plugin Order , final List < Pair < I Plugin < T > , Plugin Status > > validated Plugins , final List < Pair < I Plugin < T > , Exception > > initialized Plugins , final Set < Long > processed Plugins ) {", "for ( final Plugin Config Item pt : xml Plugin Order ) {", "processed Plugins . add ( pt . get GUID ( ) ) ;", "final I Plugin < T > plugin = find Plugin ( validated Plugins , pt . get GUID ( ) ) ;", "if ( plugin != null ) {", "if ( pt . is Load ( ) ) {", "initialize Plugin ( plugin , plugin Interface , registry , initialized Plugins ) ; }", "else {", "registry . add Disabled Plugin ( plugin , Disabled Plugin Reason . Not Loaded ) ; } } } }"]}
{"ids": "37509", "code": ["public static void session Stop ( ) {", "if ( m Process == null ) return ;", "m Process . destroy ( ) ;", "m Process = null ; }"]}
{"ids": "4530", "code": ["public static Request new Upload Video Request ( Session session , File file , Callback callback ) throws File Not Found Exception {", "Parcel File Descriptor descriptor = Parcel File Descriptor . open ( file , Parcel File Descriptor . MODE READ ONLY ) ;", "Bundle parameters = new Bundle ( NUM_ ) ;", "parameters . put Parcelable ( file . get Name ( ) , descriptor ) ;", "return new Request ( session , MY VIDEOS , parameters , Http Method . POST , callback ) ; }"]}
{"ids": "32416", "code": ["private Multicast Socket create Socket ( ) throws IO Exception {", "Multicast Socket sock = new Multicast Socket ( mcast Port ) ;", "sock . set Loopback Mode ( false ) ;", "if ( sock Itf != null ) sock . set Interface ( sock Itf ) ;", "if ( sock . get Loopback Mode ( ) ) U . warn ( log , STR_ + STR_ ) ;", "sock . join Group ( mcast Grp ) ;", "if ( ttl != - NUM_ ) sock . set Time To Live ( ttl ) ;", "return sock ; }"]}
{"ids": "84725", "code": ["void copy Node Structure ( Array List < Node > destination ) {", "while ( destination . size ( ) < nodes . size ( ) ) destination . add ( new Node ( ) ) ;", "while ( destination . size ( ) > nodes . size ( ) ) destination . remove ( NUM_ ) ;", "int n = nodes . size ( ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "Node node 0 = nodes . get ( i ) ;", "Node node 1 = destination . get ( i ) ;", "node 1 . height Parameter = node 0 . height Parameter ;", "node 1 . rate Parameter = node 0 . rate Parameter ;", "node 1 . trait Parameter = node 0 . trait Parameter ;", "node 1 . partitioning = node 0 . partitioning ;", "node 1 . taxon = node 0 . taxon ;", "node 1 . bifurcation = node 0 . bifurcation ;", "node 1 . number = node 0 . number ;", "node 1 . my Hash Code = node 0 . my Hash Code ;", "if ( node 0 . left Parent != null ) {", "node 1 . left Parent = stored Nodes . get ( nodes . index Of ( node 0 . left Parent ) ) ; }", "else {", "node 1 . left Parent = null ; }", "if ( node 0 . right Parent != null ) {", "node 1 . right Parent = stored Nodes . get ( nodes . index Of ( node 0 . right Parent ) ) ; }", "else {", "node 1 . right Parent = null ; }", "if ( node 0 . left Child != null ) {", "node 1 . left Child = stored Nodes . get ( nodes . index Of ( node 0 . left Child ) ) ; }", "else {", "node 1 . left Child = null ; }", "if ( node 0 . right Child != null ) {", "node 1 . right Child = stored Nodes . get ( nodes . index Of ( node 0 . right Child ) ) ; }", "else {", "node 1 . right Child = null ; } } }"]}
{"ids": "49590", "code": ["private void validate Will ( String dest , Object payload ) {", "if ( ( dest == null ) || ( payload == null ) ) {", "throw new Illegal Argument Exception ( ) ; }", "Mqtt Topic . validate ( dest , false ) ; }"]}
{"ids": "65376", "code": ["private Member next Member ( Member . Type type ) {", "return new Test Member ( type , new Address ( STR_ , ++ port ) , new Address ( STR_ , port + NUM_ ) ) ; }"]}
{"ids": "48546", "code": ["protected void encode Line Suffix ( Output Stream a Stream ) throws IO Exception {", "p Stream . println ( ) ; }"]}
{"ids": "82182", "code": ["boolean is System Font ( ) {", "return system Font ; }"]}
{"ids": "34238", "code": ["public void add To Be Loaded ( final String url ) {", "if ( to Be Loaded == null ) {", "to Be Loaded = new Array List < String > ( ) ; }", "if ( String Utils . is Not Blank ( url ) ) {", "to Be Loaded . add ( url ) ; } }"]}
{"ids": "82880", "code": ["public Appraise Git Review Client ( Repository repo ) {", "this . repo = repo ;", "this . author = new Person Ident ( repo ) ; }"]}
{"ids": "27540", "code": ["public Root Block View ( final boolean root Block 0 , final Byte Buffer buf , final Checksum Utility checker ) throws Root Block Exception {", "if ( buf == null ) throw new Illegal Argument Exception ( ) ;", "if ( buf . remaining ( ) != SIZEOF ROOT BLOCK ) {", "throw new Illegal Argument Exception ( STR_ + SIZEOF ROOT BLOCK + STR_ + buf . remaining ( ) ) ; }", "this . buf = buf . as Read Only Buffer ( ) ;", "this . root Block 0 = root Block 0 ;", "switch ( get Store Type ( ) ) {", "case RW : {", "am = new RW Address Manager ( null ) ;", "break ; }", "case WORM : {", "final int offset Bits = get Offset Bits ( ) ;", "am = new Worm Address Manager ( offset Bits ) ;", "break ; }", "default :", "throw new Root Block Exception ( STR_ + get Store Type ( ) ) ; }", "if ( checker == null ) {", "log . warn ( STR_ ) ; }", "this . checker = checker ;", "valid ( ) ; }"]}
{"ids": "4759", "code": ["protected SOAP Request create SOAP Request ( final String method Name , final SOAP Method Request Writer request Writer ) {", "final Post Method method = new Post Method ( endpoint . to String ( ) ) ;", "method . set Content Chunked ( false ) ;", "set Request Headers ( method , method Name ) ;", "final SOAP Request Entity request Entity = build Request Entity ( method Name , request Writer ) ;", "request Entity . set SOAP Header Provider ( soap Header Provider ) ;", "final Buffered SOAP Request Entity buffered Entity = new Buffered SOAP Request Entity ( request Entity ) ;", "method . set Request Entity ( buffered Entity ) ;", "return new SOAP Request ( method , request Entity ) ; }"]}
{"ids": "33948", "code": ["@ Suppress Warnings ( STR_ ) @ Test public void inner Enum ( ) {", "Class < ? > pc = Playing Card . class ;", "List < Enum < ? > > include = new Array List < > ( ) ;", "List < Enum < ? > > exclude = new Array List < > ( ) ;", "for ( Class < ? > c : pc . get Declared Classes ( ) ) {", "int mods = c . get Modifiers ( ) ;", "if ( c . is Enum ( ) ) {", "if ( Modifier . is Public ( mods ) ) {", "include . add All ( as List ( c . get Enum Constants ( ) ) ) ; }", "else {", "exclude . add All ( as List ( c . get Enum Constants ( ) ) ) ; } } }", "Set < Typed Operation > actual = get Concrete Operations ( pc ) ;", "assert Equals ( STR_ , include . size ( ) + NUM_ , actual . size ( ) ) ;", "for ( Enum < ? > e : include ) {", "assert True ( STR_ + e . name ( ) + STR_ , actual . contains ( create Enum Operation ( e ) ) ) ; }", "for ( Enum < ? > e : exclude ) {", "assert False ( STR_ + e . name ( ) + STR_ , actual . contains ( create Enum Operation ( e ) ) ) ; } }"]}
{"ids": "54087", "code": ["public static boolean in Target Dir ( File file ) {", "return in Target Dir ( file . to Path ( ) ) ; }"]}
{"ids": "29398", "code": ["public final boolean skip Any ( char c , Char Sequence csq ) {", "int i = index ;", "int n = csq . length ( ) ;", "for ( ; ( i < n ) && ( csq . char At ( i ) == c ) ; i ++ ) { }", "if ( i == index ) return false ;", "index = i ;", "return true ; }"]}
{"ids": "86965", "code": ["public Phone create Phone ( String value ) {", "Phone Field phone Impl = new Phone Field ( ) ;", "try {", "phone Impl . set Value ( value ) ; }", "catch ( Sdp Exception s ) {", "s . print Stack Trace ( ) ; }", "return phone Impl ; }"]}
{"ids": "32628", "code": ["private String convert To Html ( final String string ) {", "return STR_ + string . replace All ( STR_ , STR_ ) + STR_ ; }"]}
{"ids": "49325", "code": ["public Image create Accelerated Image ( Component target , int width , int height ) {", "Color Model model = get Color Model ( Transparency . OPAQUE ) ;", "Writable Raster wr = model . create Compatible Writable Raster ( width , height ) ;", "return new Off Screen Image ( target , model , wr , model . is Alpha Premultiplied ( ) ) ; }"]}
{"ids": "43492", "code": ["public static void write String To Writer ( String string , Writer writer ) throws IO Exception {", "Buffered Writer bw = new Buffered Writer ( writer ) ;", "try {", "bw . write ( string ) ; }", "finally {", "bw . close ( ) ; } }"]}
{"ids": "66219", "code": ["public boolean is Flat ( ) {", "return TYPE FLAT . equals ( get Type ( ) ) ; }"]}
{"ids": "83623", "code": ["@ Deprecated private List < Char Sequence > build Limited Networks List ( ) {", "final Context context = get Activity ( ) ;", "final Array List < Char Sequence > limited = Lists . new Array List ( ) ;", "if ( has Subscription ( context ) ) {", "final String subscriber Id = get Active Subscriber Id ( context ) ;", "if ( m Policy Editor . has Limited Policy ( build Template Mobile All ( subscriber Id ) ) ) {", "limited . add ( get Text ( R . string . data usage list mobile ) ) ; }", "if ( m Policy Editor . has Limited Policy ( build Template Mobile 3 g Lower ( subscriber Id ) ) ) {", "limited . add ( get Text ( R . string . data usage tab 3 g ) ) ; }", "if ( m Policy Editor . has Limited Policy ( build Template Mobile 4 g ( subscriber Id ) ) ) {", "limited . add ( get Text ( R . string . data usage tab 4 g ) ) ; } }", "if ( m Policy Editor . has Limited Policy ( build Template Wifi Wildcard ( ) ) ) {", "limited . add ( get Text ( R . string . data usage tab wifi ) ) ; }", "if ( m Policy Editor . has Limited Policy ( build Template Ethernet ( ) ) ) {", "limited . add ( get Text ( R . string . data usage tab ethernet ) ) ; }", "return limited ; }"]}
{"ids": "29304", "code": ["public int eval RPN ( String [ ] tokens ) {", "if ( tokens == null || tokens . length == NUM_ ) return NUM_ ;", "Stack < String > s = new Stack < String > ( ) ;", "int len = tokens . length ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "String cur = tokens [ i ] ;", "if ( is Operator ( cur ) ) {", "int t 2 = Integer . parse Int ( s . pop ( ) ) ;", "int t 1 = Integer . parse Int ( s . pop ( ) ) ;", "int res = calculate ( t 1 , t 2 , cur ) ;", "s . push ( Integer . to String ( res ) ) ; }", "else s . push ( cur ) ; }", "return Integer . value Of ( s . peek ( ) ) ; }"]}
{"ids": "78815", "code": ["@ Override public int compare ( New Split Emitted Term term 1 , New Split Emitted Term term 2 ) {", "return term 1 . compare To ( term 2 ) ; }"]}
{"ids": "16133", "code": ["public AABB merge ( AABB other ) {", "min X = Math . min ( min X , other . min X ) ;", "max X = Math . max ( max X , other . max X ) ;", "min Y = Math . min ( min Y , other . min Y ) ;", "max Y = Math . max ( max Y , other . max Y ) ;", "min Z = Math . min ( min Z , other . min Z ) ;", "max Z = Math . max ( max Z , other . max Z ) ;", "return this ; }"]}
{"ids": "10298", "code": ["public static String generate Auto Tag ( int stack Offset ) {", "Stack Trace Element [ ] current Stack = get Current Stack ( ) ;", "Stack Trace Element element = current Stack [ stack Offset ] ;", "String class Name = element . get Class Name ( ) ;", "String pkg Path [ ] = class Name . split ( STR_ ) ;", "if ( pkg Path . length > NUM_ ) {", "class Name = pkg Path [ pkg Path . length - NUM_ ] ; }", "String Builder sb Inner Class = new String Builder ( ) ;", "int index ;", "String str Loop = class Name ;", "while ( ( index = str Loop . last Index Of ( STR_ ) ) != - NUM_ ) {", "String piece = str Loop . substring ( index + NUM_ ) ;", "sb Inner Class . insert ( NUM_ , piece ) ;", "if ( ! piece . matches ( STR_ ) ) {", "break ; }", "sb Inner Class . insert ( NUM_ , STR_ ) ;", "str Loop = str Loop . substring ( NUM_ , index ) ; }", "if ( sb Inner Class . length ( ) > NUM_ && sb Inner Class . char At ( NUM_ ) == STR_ ) {", "sb Inner Class . delete Char At ( NUM_ ) ; }", "String inner Class Name = sb Inner Class . to String ( ) ;", "if ( Text Utils . is Digits Only ( inner Class Name ) ) {", "inner Class Name = null ; }", "return Text Utils . is Empty ( inner Class Name ) ? class Name : inner Class Name ; }"]}
{"ids": "70944", "code": ["private void handle Subscribe ( String [ ] args ) {", "switch ( args [ NUM_ ] ) {", "case STR_ :", "Test Subscriber < Payload > rrsub = new Test Subscriber < > ( NUM_ ) ;", "payload Subscribers . put ( args [ NUM_ ] , rrsub ) ;", "id To Type . put ( args [ NUM_ ] , args [ NUM_ ] ) ;", "Reactive Socket rrclient = create Client . get ( ) ;", "Publisher < Payload > rrpub = rrclient . request Response ( new Payload Impl ( args [ NUM_ ] , args [ NUM_ ] ) ) ;", "rrpub . subscribe ( rrsub ) ;", "break ;", "case STR_ :", "Test Subscriber < Payload > rssub = new Test Subscriber < > ( NUM_ ) ;", "payload Subscribers . put ( args [ NUM_ ] , rssub ) ;", "id To Type . put ( args [ NUM_ ] , args [ NUM_ ] ) ;", "Reactive Socket rsclient = create Client . get ( ) ;", "Publisher < Payload > rspub = rsclient . request Stream ( new Payload Impl ( args [ NUM_ ] , args [ NUM_ ] ) ) ;", "rspub . subscribe ( rssub ) ;", "break ;", "case STR_ :", "Test Subscriber < Payload > rsubsub = new Test Subscriber < > ( NUM_ ) ;", "payload Subscribers . put ( args [ NUM_ ] , rsubsub ) ;", "id To Type . put ( args [ NUM_ ] , args [ NUM_ ] ) ;", "Reactive Socket rsubclient = create Client . get ( ) ;", "Publisher < Payload > rsubpub = rsubclient . request Subscription ( new Payload Impl ( args [ NUM_ ] , args [ NUM_ ] ) ) ;", "rsubpub . subscribe ( rsubsub ) ;", "break ;", "case STR_ :", "Test Subscriber < Void > fnfsub = new Test Subscriber < > ( NUM_ ) ;", "fnf Subscribers . put ( args [ NUM_ ] , fnfsub ) ;", "id To Type . put ( args [ NUM_ ] , args [ NUM_ ] ) ;", "Reactive Socket fnfclient = create Client . get ( ) ;", "Publisher < Void > fnfpub = fnfclient . fire And Forget ( new Payload Impl ( args [ NUM_ ] , args [ NUM_ ] ) ) ;", "fnfpub . subscribe ( fnfsub ) ;", "break ;", "default :", "break ; } }"]}
{"ids": "67417", "code": ["@ Post Construct public void init ( ) {", "configuration Views . add ( default Distribution Set Type Layout ) ;", "configuration Views . add ( authentication Configuration View ) ;", "configuration Views . add ( polling Configuration View ) ; }"]}
{"ids": "77976", "code": ["@ Override public void start ( ) {", "for ( int i = NUM_ ; i < thread Count ; ++ i ) {", "Set < System Stream Partition > thread Ssps = new Hash Set < System Stream Partition > ( ) ;", "for ( System Stream Partition ssp : ssps ) {", "if ( Math . abs ( ssp . hash Code ( ) ) % thread Count == i ) {", "thread Ssps . add ( ssp ) ; } }", "Thread thread = new Thread ( new Mock System Consumer Runnable ( thread Ssps ) , STR_ + i ) ;", "thread . set Daemon ( true ) ;", "threads . add ( thread ) ;", "thread . start ( ) ; } }"]}
{"ids": "42920", "code": ["private List < double [ ] > initialize Weights ND ( ) {", "int N = NUM_ ;", "List < double [ ] > candidates = new Array List < double [ ] > ( number Of Points * N ) ;", "for ( int i = NUM_ ; i < number Of Points * N ; i ++ ) {", "double [ ] weight = new double [ number Of Objectives ] ;", "for ( int j = NUM_ ; j < number Of Objectives ; j ++ ) {", "weight [ j ] = PRNG . next Double ( ) ; }", "double sum = Stat Utils . sum ( weight ) ;", "for ( int j = NUM_ ; j < number Of Objectives ; j ++ ) {", "weight [ j ] /= sum ; }", "candidates . add ( weight ) ; }", "List < double [ ] > weights = new Array List < double [ ] > ( number Of Points * N ) ;", "for ( int i = NUM_ ; i < number Of Objectives ; i ++ ) {", "double [ ] weight = new double [ number Of Objectives ] ;", "weight [ i ] = NUM_ ;", "weights . add ( weight ) ; }", "while ( weights . size ( ) < number Of Points ) {", "double [ ] weight = null ;", "double distance = Double . NEGATIVE INFINITY ;", "for ( int i = NUM_ ; i < candidates . size ( ) ; i ++ ) {", "double d = Double . POSITIVE INFINITY ;", "for ( int j = NUM_ ; j < weights . size ( ) ; j ++ ) {", "d = Math . min ( d , Math Arrays . distance ( candidates . get ( i ) , weights . get ( j ) ) ) ; }", "if ( d > distance ) {", "weight = candidates . get ( i ) ;", "distance = d ; } }", "weights . add ( weight ) ;", "candidates . remove ( weight ) ; }", "return weights ; }"]}
{"ids": "71592", "code": ["public void remove Column ( Column column ) {", "if ( column != null ) {", "columns . remove ( column ) ; } }"]}
{"ids": "5415", "code": ["public String info ( ) {", "String Builder sb = new String Builder ( STR_ + table Size + STR_ + elements + STR_ + load Factor + STR_ + threshold ) ;", "sb . append ( STR_ + num Empty ) ;", "int size = NUM_ ;", "int min = elements ;", "int max = - NUM_ ;", "for ( int i = NUM_ ; i < table Size ; i ++ ) {", "Linked List < String > list = bins [ i ] ;", "if ( list != null ) {", "int sz = list . size ( ) ;", "size += sz ;", "if ( sz < min ) {", "min = sz ; }", "if ( sz > max ) {", "max = sz ; } } }", "float avg = size ;", "int base = ( table Size - num Empty ) ;", "if ( base == NUM_ ) {", "sb . append ( STR_ ) ;", "sb . append ( STR_ ) ;", "sb . append ( STR_ ) ; }", "else {", "avg /= base ;", "sb . append ( STR_ + avg ) ;", "sb . append ( STR_ + min ) ;", "sb . append ( STR_ + max ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "61777", "code": ["public boolean peek Sample ( Media Codec . Buffer Info out buffer Info ) {", "update ( ) ;", "boolean result = false ;", "if ( ! m Available Output Buffers . is Empty ( ) ) {", "int index = m Available Output Buffers . peek ( ) ;", "Media Codec . Buffer Info info = m Output Buffer Info [ index ] ;", "out buffer Info . set ( info . offset , info . size , info . presentation Time Us , info . flags ) ;", "result = true ; }", "return result ; }"]}
{"ids": "25881", "code": ["@ Override public Abstract Scanned Result scan Blocklet ( Blocks Chunk Holder blocks Chunk Holder ) throws Query Execution Exception {", "try {", "fill Scanned Result ( blocks Chunk Holder ) ; }", "catch ( Filter Unsupported Exception e ) {", "throw new Query Execution Exception ( e . get Message ( ) ) ; }", "return scanned Result ; }"]}
{"ids": "62026", "code": ["@ Override public int hash Code ( ) {", "return subconditions . hash Code ( ) - operator . hash Code ( ) ; }"]}
{"ids": "66360", "code": ["public void balance Segments ( ) {", "M Acct Schema Element [ ] elements = m acct Schema . get Acct Schema Elements ( ) ;", "for ( int i = NUM_ ; i < elements . length ; i ++ ) {", "M Acct Schema Element ase = elements [ i ] ;", "if ( ase . is Balanced ( ) ) balance Segment ( ase . get Element Type ( ) ) ; } }"]}
{"ids": "36428", "code": ["public Annotation Drawer ( final Annotations Model model , final Process Renderer Model renderer Model ) {", "this . model = model ;", "this . renderer Model = renderer Model ;", "this . display Cache = new Hash Map < > ( ) ;", "this . cached ID = new Hash Map < > ( ) ;", "pane = new J Editor Pane ( STR_ , STR_ ) ;", "pane . set Border ( null ) ;", "pane . set Opaque ( false ) ; }"]}
{"ids": "80975", "code": ["public boolean has User Partitions ( ) {", "return ! user Output . is Empty ( ) ; }"]}
{"ids": "37480", "code": ["@ Override public void insert String ( final int offs , final String str , final Attribute Set attr ) {", "if ( offs < NUM_ ) {", "return ; }", "if ( str . length ( ) > NUM_ ) {", "int i ;", "for ( i = NUM_ ; i < str . length ( ) ; i ++ ) {", "if ( str . char At ( i ) == STR_ ) {", "remaining Text String = str . substring ( i + NUM_ ) ;", "remaining Text Attr = attr ;", "input Key Listener . key Pressed ( new Key Event ( new Container ( ) , Key Event . KEY PRESSED , NUM_ , NUM_ , Key Event . VK ENTER , STR_ ) ) ;", "break ; }", "else {", "insert Char ( offs + i , STR_ + str . char At ( i ) ) ; } } }", "else if ( str . length ( ) == NUM_ ) {", "insert Char ( offs , str ) ; } }"]}
{"ids": "59580", "code": ["public static int put Int ( byte [ ] bytes , int offset , int val ) {", "if ( little Endian ) {", "val = Integer . reverse Bytes ( val ) ; }", "the Unsafe . put Int ( bytes , offset + BYTE ARRAY BASE OFFSET , val ) ;", "return offset + Bytes . SIZEOF INT ; }"]}
{"ids": "28384", "code": ["public Item ( Drawable symbol , String label Text , Font font ) {", "double font Size = font . get Size 2 D ( ) ;", "set Layout ( new Edge Layout ( font Size , NUM_ ) ) ;", "this . symbol = symbol ;", "add ( symbol , Location . WEST ) ;", "label = new Label ( label Text ) ;", "label . set Font ( font ) ;", "label . set Alignment X ( NUM_ ) ;", "label . set Alignment Y ( NUM_ ) ;", "add ( label , Location . CENTER ) ; }"]}
{"ids": "80389", "code": ["public int consume ( ) {", "int consumed Amount ;", "if ( Math . abs ( left ) < Math . abs ( get Regen ( ) ) ) {", "consumed Amount = left ;", "left = NUM_ ; }", "else {", "consumed Amount = get Regen ( ) ;", "left -= get Regen ( ) ; }", "return consumed Amount ; }"]}
{"ids": "31717", "code": ["private Delegate delegate ( ) throws Hadoop Igfs Communication Exception {", "Exception err Shmem = null ;", "Exception err Tcp = null ;", "Delegate cur Delegate = delegate Ref . get ( ) ;", "if ( cur Delegate != null ) return cur Delegate ;", "boolean skip In Proc = parameter ( conf , PARAM IGFS ENDPOINT NO EMBED , authority , false ) ;", "if ( ! skip In Proc ) {", "Igfs Ex igfs = get Igfs Ex ( endpoint . grid ( ) , endpoint . igfs ( ) ) ;", "if ( igfs != null ) {", "Hadoop Igfs Ex hadoop = null ;", "try {", "hadoop = new Hadoop Igfs In Proc ( igfs , log , user Name ) ;", "cur Delegate = new Delegate ( hadoop , hadoop . handshake ( log Dir ) ) ; }", "catch ( IO Exception | Ignite Checked Exception e ) {", "if ( e instanceof Hadoop Igfs Communication Exception ) if ( hadoop != null ) hadoop . close ( true ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ , e ) ; } } }", "boolean skip Loc Shmem = parameter ( conf , PARAM IGFS ENDPOINT NO LOCAL SHMEM , authority , false ) ;", "if ( cur Delegate == null && ! skip Loc Shmem && ! U . is Windows ( ) ) {", "Hadoop Igfs Ex hadoop = null ;", "try {", "hadoop = new Hadoop Igfs Out Proc ( endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , user Name ) ;", "cur Delegate = new Delegate ( hadoop , hadoop . handshake ( log Dir ) ) ; }", "catch ( IO Exception | Ignite Checked Exception e ) {", "if ( e instanceof Hadoop Igfs Communication Exception ) hadoop . close ( true ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + endpoint . port ( ) + STR_ , e ) ;", "err Shmem = e ; } }", "boolean skip Loc Tcp = parameter ( conf , PARAM IGFS ENDPOINT NO LOCAL TCP , authority , false ) ;", "if ( cur Delegate == null && ! skip Loc Tcp ) {", "Hadoop Igfs Ex hadoop = null ;", "try {", "hadoop = new Hadoop Igfs Out Proc ( LOCALHOST , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , user Name ) ;", "cur Delegate = new Delegate ( hadoop , hadoop . handshake ( log Dir ) ) ; }", "catch ( IO Exception | Ignite Checked Exception e ) {", "if ( e instanceof Hadoop Igfs Communication Exception ) hadoop . close ( true ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + endpoint . host ( ) + STR_ + endpoint . port ( ) + STR_ , e ) ;", "err Tcp = e ; } }", "if ( cur Delegate == null && ( skip Loc Tcp || ! F . eq ( LOCALHOST , endpoint . host ( ) ) ) ) {", "Hadoop Igfs Ex hadoop = null ;", "try {", "hadoop = new Hadoop Igfs Out Proc ( endpoint . host ( ) , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , user Name ) ;", "cur Delegate = new Delegate ( hadoop , hadoop . handshake ( log Dir ) ) ; }", "catch ( IO Exception | Ignite Checked Exception e ) {", "if ( e instanceof Hadoop Igfs Communication Exception ) hadoop . close ( true ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + endpoint . host ( ) + STR_ + endpoint . port ( ) + STR_ , e ) ;", "err Tcp = e ; } }", "if ( cur Delegate != null ) {", "if ( ! delegate Ref . compare And Set ( null , cur Delegate ) ) cur Delegate . doomed = true ;", "return cur Delegate ; }", "else {", "SB err Msg = new SB ( STR_ + authority + STR_ ) ;", "if ( err Shmem != null ) err Msg . a ( STR_ + endpoint . port ( ) + STR_ + err Shmem + STR_ ) ;", "err Msg . a ( STR_ + endpoint . host ( ) + STR_ + endpoint . port ( ) + STR_ + err Tcp + STR_ ) ;", "err Msg . a ( STR_ + STR_ ) ;", "throw new Hadoop Igfs Communication Exception ( err Msg . to String ( ) ) ; } }"]}
{"ids": "7239", "code": ["public From Clause add ( Outer Join Qualifier outer Join Qualifier ) {", "outer Join Qualifiers . add ( outer Join Qualifier ) ;", "return this ; }"]}
{"ids": "26149", "code": ["public int size ( ) {", "return patterns . size ( ) ; }"]}
{"ids": "78103", "code": ["private Sublime Base Menu Item add Internal ( int pivot ID , Positioned positioned , Sublime Base Menu Item new Item ) {", "int new Item Group Id = new Item . get Group Id ( ) ;", "check Existence Of Group ( new Item Group Id ) ;", "int pivot Index = find Item Index ( pivot ID ) ;", "Sublime Base Menu Item pivot = m Items . get ( pivot Index ) ;", "if ( new Item . get Item Type ( ) == Sublime Base Menu Item . Item Type . GROUP HEADER ) {", "check If Group Header Already Exists For Group ( new Item Group Id ) ;", "int index = find Group Index ( new Item Group Id ) ;", "if ( index >= NUM_ ) {", "m Items . add ( index , new Item ) ; }", "else {", "if ( positioned == Positioned . BEFORE ) {", "if ( pivot . get Group Id ( ) == NO GROUP ID || pivot . get Item Type ( ) == Sublime Base Menu Item . Item Type . GROUP HEADER ) {", "m Items . add ( pivot Index , new Item ) ; }", "else {", "m Items . add ( new Item ) ; } }", "else if ( positioned == Positioned . AFTER ) {", "if ( pivot . get Group Id ( ) == NO GROUP ID || pivot Index == find Last Group Index ( new Item Group Id ) ) {", "m Items . add ( pivot Index + NUM_ , new Item ) ; }", "else {", "m Items . add ( new Item ) ; } } } }", "else {", "if ( new Item Group Id != NO GROUP ID ) {", "int last Group Index = find Last Group Index ( new Item Group Id ) ;", "if ( last Group Index == m Items . size ( ) ) {", "if ( positioned == Positioned . BEFORE ) {", "if ( pivot . get Group Id ( ) == NO GROUP ID || pivot Index == find Group Index ( pivot . get Group Id ( ) ) ) {", "m Items . add ( pivot Index , new Item ) ; }", "else {", "m Items . add ( new Item ) ; } }", "else if ( positioned == Positioned . AFTER ) {", "if ( pivot . get Group Id ( ) == NO GROUP ID || pivot Index == find Last Group Index ( pivot . get Group Id ( ) ) ) {", "m Items . add ( pivot Index + NUM_ , new Item ) ; }", "else {", "m Items . add ( new Item ) ; } } }", "else {", "if ( new Item Group Id == pivot . get Group Id ( ) ) {", "if ( positioned == Positioned . BEFORE ) {", "if ( pivot . get Item Type ( ) != Sublime Base Menu Item . Item Type . GROUP HEADER ) {", "m Items . add ( pivot Index , new Item ) ; }", "else {", "m Items . add ( last Group Index + NUM_ , new Item ) ; } }", "else if ( positioned == Positioned . AFTER ) {", "m Items . add ( pivot Index + NUM_ , new Item ) ; } }", "else {", "m Items . add ( last Group Index + NUM_ , new Item ) ; } } }", "else {", "if ( positioned == Positioned . BEFORE ) {", "if ( pivot . get Group Id ( ) == NO GROUP ID || find Group Index ( pivot . get Group Id ( ) ) == pivot Index ) {", "m Items . add ( pivot Index , new Item ) ; }", "else {", "m Items . add ( new Item ) ; } }", "else if ( positioned == Positioned . AFTER ) {", "if ( pivot . get Group Id ( ) == NO GROUP ID || pivot Index == find Last Group Index ( pivot . get Group Id ( ) ) ) {", "m Items . add ( pivot Index + NUM_ , new Item ) ; }", "else {", "m Items . add ( new Item ) ; } } } }", "on Items Changed ( ) ;", "return new Item ; }"]}
{"ids": "67973", "code": ["public static void write Uint 8 ( Output Stream the Os , int the Value ) throws IO Exception {", "the Os . write ( the Value ) ; }"]}
{"ids": "53774", "code": ["@ Override public void add Header ( final String header , final String value ) {", "m Headers Options . add ( new Header Option ( header , value ) ) ; }"]}
{"ids": "13977", "code": ["public void store ( ) throws SAML Exception {", "try {", "key Provider . store ( ) ; }", "catch ( Key Store Exception e ) {", "throw new SAML Exception ( e . get Message ( ) ) ; }", "catch ( Certificate Exception e ) {", "throw new SAML Exception ( e . get Message ( ) ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new SAML Exception ( e . get Message ( ) ) ; }", "catch ( IO Exception e ) {", "throw new SAML Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "36937", "code": ["static void append To Pointer Hierarchy ( final Base Type type , final Base Type pointer ) {", "Preconditions . check Not Null ( type , STR_ ) ;", "Preconditions . check Not Null ( pointer , STR_ ) ;", "Preconditions . check Argument ( type != pointer , STR_ ) ;", "Preconditions . check Argument ( pointer . pointed To By != type , STR_ ) ;", "Preconditions . check Argument ( type . points To != pointer , STR_ ) ;", "pointer . points To = type ;", "type . pointed To By = pointer ; }"]}
{"ids": "54399", "code": ["public Optional < T > last ( ) {", "Iterator < T > iterator = iterator ( ) ;", "T value = null ;", "while ( iterator . has Next ( ) ) value = iterator . next ( ) ;", "return Optional . of ( value ) ; }"]}
{"ids": "72342", "code": ["public static void thread Sleep ( long millis ) {", "try {", "Thread . sleep ( millis ) ; }", "catch ( Interrupted Exception ex ) {", "Log . e ( STR_ , String Utils . exception Stack Trace To String ( ex ) ) ; } }"]}
{"ids": "84533", "code": ["static boolean is Package Access ( final int modifiers ) {", "return ( modifiers & ACCESS TEST ) == NUM_ ; }"]}
{"ids": "80247", "code": ["Managed Window Decorator ( Window window , String window Id ) {", "this . window = window ;", "name = STR_ + window Id ; }"]}
{"ids": "23764", "code": ["boolean handle Remote Can Rebalance ( long size ) {", "return false ; }"]}
{"ids": "75020", "code": ["public static File to SLD File ( final File file ) {", "final String path = file . get Absolute Path ( ) ;", "final String base = path . substring ( NUM_ , path . length ( ) - NUM_ ) ;", "String new Path = base + STR_ ;", "File sld = new File ( new Path ) ;", "if ( sld . exists ( ) ) {", "return sld ; }", "new Path = base + STR_ ;", "sld = new File ( new Path ) ;", "if ( sld . exists ( ) ) {", "return sld ; }", "return null ; }"]}
{"ids": "24878", "code": ["private String insert Properties ( String template , Map < String , String > properties ) {", "for ( Entry < String , String > entry : properties . entry Set ( ) ) {", "template = template . replace ( entry . get Key ( ) , entry . get Value ( ) ) ; }", "return template ; }"]}
{"ids": "16824", "code": ["public static void change Font ( J Component comp , int style ) {", "Font font = comp . get Font ( ) ;", "comp . set Font ( font . derive Font ( style ) ) ; }"]}
{"ids": "59748", "code": ["public void draw Contours ( Mat img , Color color ) {", "Drawing . draw Contours ( img , contours , color ) ; }"]}
{"ids": "33666", "code": ["public static void save X 509 Cert ( String cert Str , File cert File ) throws IO Exception {", "Buffered Writer writer = new Buffered Writer ( new File Writer ( cert File ) ) ;", "writer . write ( BEGIN CERT ) ;", "writer . new Line ( ) ;", "writer . write ( cert Str ) ;", "writer . new Line ( ) ;", "writer . write ( END CERT ) ;", "writer . new Line ( ) ;", "writer . close ( ) ; }"]}
{"ids": "73641", "code": ["public void clear On Central Position Changed Listener ( ) {", "m On Central Position Changed Listeners . clear ( ) ; }"]}
{"ids": "52690", "code": ["public static boolean is Stanza ( Packet packet ) {", "if ( packet instanceof Message ) return true ;", "if ( packet instanceof IQ ) return true ;", "if ( packet instanceof Presence ) return true ;", "return false ; }"]}
{"ids": "74887", "code": ["@ Override public int execute ( final Form Object form , final int type , final String code , final int event Type , final char key Pressed ) {", "int message Code = Action Handler . NOMESSAGE ;", "if ( code instanceof String ) {", "final String js = code ;", "final String [ ] args = JS Function . convert To Array ( js ) ;", "final String command = args [ NUM_ ] ;", "if ( command . starts With ( STR_ ) ) {", "message Code = handle AF Commands ( form , command , js , args , event Type , key Pressed ) ; } }", "return message Code ; }"]}
{"ids": "62859", "code": ["private boolean needs Update ( Long bundle Version , String bean Version ) {", "if ( bean Version . contains ( STR_ ) ) {", "Log . i ( TAG , STR_ + bundle Version ) ;", "Log . i ( TAG , STR_ + bean Version ) ;", "return true ; }", "else {", "try {", "long parsed Version = Long . parse Long ( bean Version . split ( STR_ ) [ NUM_ ] ) ;", "Log . i ( TAG , STR_ + bundle Version ) ;", "Log . i ( TAG , STR_ + parsed Version ) ;", "if ( bundle Version > parsed Version ) {", "return true ; }", "else {", "Log . i ( TAG , STR_ ) ; } }", "catch ( Number Format Exception e ) {", "Log . e ( TAG , STR_ + bean Version ) ;", "fail ( Bean Error . UNPARSABLE FW VERSION ) ; } }", "return false ; }"]}
{"ids": "52476", "code": ["public void load Logical Tables With Granularities ( Map < String , Table Group > name Group Map , Set < ? extends Granularity > valid Grains , Resource Dictionaries dictionaries ) {", "for ( Map . Entry < String , Table Group > entry : name Group Map . entry Set ( ) ) {", "String logical Table Name = entry . get Key ( ) ;", "Table Group group = entry . get Value ( ) ;", "load Logical Table With Granularities ( logical Table Name , group , valid Grains , dictionaries ) ; } }"]}
{"ids": "36204", "code": ["public Process ( final String xml String ) throws IO Exception , XML Exception {", "init Context ( ) ;", "String Reader in = new String Reader ( xml String ) ;", "read Process ( in ) ;", "in . close ( ) ; }"]}
{"ids": "40845", "code": ["public Consul Topology Fraction ( ) {", "this . url = DEFAULT URL ; }"]}
{"ids": "10391", "code": ["protected String build Qualifier Regex ( String qualifier Value ) {", "String Builder sb = new String Builder ( ) ;", "sb . append ( STR_ ) ;", "sb . append ( qualifier Value ) ;", "sb . append ( STR_ ) ;", "return sb . to String ( ) ; }"]}
{"ids": "71614", "code": ["public String shorten Name ( String name , int desired Length ) {", "int original Length = name . length ( ) ;", "if ( ( desired Length <= NUM_ ) || ( original Length <= desired Length ) ) {", "return name ; }", "int delta = original Length - desired Length ;", "int start Cut = desired Length / NUM_ ;", "String Buffer result = new String Buffer ( ) ;", "result . append ( name . substring ( NUM_ , start Cut ) ) ;", "if ( ( ( start Cut == NUM_ ) || ( name . char At ( start Cut - NUM_ ) != STR_ ) ) && ( ( start Cut + delta + NUM_ == original Length ) || ( name . char At ( start Cut + delta + NUM_ ) != STR_ ) ) ) {", "result . append ( STR_ ) ; }", "result . append ( name . substring ( start Cut + delta + NUM_ , original Length ) ) ;", "return result . to String ( ) ; }"]}
{"ids": "28366", "code": ["public static Color blend ( Color color 1 , Color color 2 , double weight ) {", "double w 2 = Math Utils . limit ( weight , NUM_ , NUM_ ) ;", "double w 1 = NUM_ - w 2 ;", "int r = ( int ) Math . round ( w 1 * color 1 . get Red ( ) + w 2 * color 2 . get Red ( ) ) ;", "int g = ( int ) Math . round ( w 1 * color 1 . get Green ( ) + w 2 * color 2 . get Green ( ) ) ;", "int b = ( int ) Math . round ( w 1 * color 1 . get Blue ( ) + w 2 * color 2 . get Blue ( ) ) ;", "int a = ( int ) Math . round ( w 1 * color 1 . get Alpha ( ) + w 2 * color 2 . get Alpha ( ) ) ;", "return new Color ( r , g , b , a ) ; }"]}
{"ids": "5014", "code": ["private void decide UI Look And Feel ( Main Options options ) {", "try {", "boolean system Plaf = false ;", "system Plaf = options . system plaf ;", "String system Plaf Req = System . getenv ( STR_ ) ;", "if ( system Plaf Req != null && system Plaf Req . equals Ignore Case ( STR_ ) ) system Plaf = true ;", "if ( system Plaf ) UI Manager . set Look And Feel ( UI Manager . get System Look And Feel Class Name ( ) ) ; }", "catch ( Exception exc ) {", "exc . print Stack Trace ( ) ; } }"]}
{"ids": "85654", "code": ["public static byte [ ] hex String To Byte Array ( String str A ) {", "Byte Array Output Stream result = new Byte Array Output Stream ( ) ;", "byte sum = ( byte ) NUM_ ;", "boolean next Char Is Upper = true ;", "for ( int i = NUM_ ; i < str A . length ( ) ; i ++ ) {", "char c = str A . char At ( i ) ;", "switch ( Character . to Upper Case ( c ) ) {", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "case STR_ :", "if ( next Char Is Upper ) {", "sum = ( byte ) NUM_ ;", "next Char Is Upper = false ; }", "else {", "sum |= ( byte ) NUM_ ;", "result . write ( sum ) ;", "next Char Is Upper = true ; }", "break ;", "default :", "break ; } }", "if ( ! next Char Is Upper ) {", "throw new Runtime Exception ( STR_ ) ; }", "return result . to Byte Array ( ) ; }"]}
{"ids": "73194", "code": ["public void remove Sensor Selection Listener ( Sensor Selection Listener listener ) {", "listener List . remove ( Sensor Selection Listener . class , listener ) ; }"]}
{"ids": "29428", "code": ["public void write ( int c ) throws IO Exception {", "if ( output == null ) throw new IO Exception ( STR_ ) ;", "output . append ( ( char ) c ) ; }"]}
{"ids": "32183", "code": ["public void register ( Grid Cache Ttl Manager mgr ) {", "synchronized ( mux ) {", "if ( cleanup Worker == null ) start Cleanup Worker ( ) ;", "mgrs . add ( mgr ) ; } }"]}
{"ids": "14445", "code": ["public void initialize Key Store ( ) {", "try {", "Logger logger = ( com . sun . identity . log . Logger ) Logger . get Logger ( log Name ) ;", "reset Current File List ( log Name ) ;", "add To Current File List ( log Name , log Name , log Name ) ;", "String log Path = lmanager . get Property ( Log Constants . LOG LOCATION ) ;", "if ( ! log Path . ends With ( STR_ ) ) log Path += STR_ ;", "String file Name = log Name ;", "String logger File Name = log Path + PREFIX + STR_ + file Name ;", "String verifier File Name = log Path + PREFIX + STR_ + file Name ;", "Debug . message ( log Name + STR_ + logger File Name ) ;", "Debug . message ( log Name + STR_ + verifier File Name ) ;", "helper . initialize Secure Log Helper ( logger File Name , log Password , verifier File Name , log Password ) ;", "Debug . message ( log Name + STR_ ) ;", "helper . initialize Verifier ( verifier File Name , log Password , ver Password ) ;", "Debug . message ( log Name + STR_ ) ; }", "catch ( Exception e ) {", "Debug . error ( log Name + STR_ , e ) ; } }"]}
{"ids": "30932", "code": ["public void discard ( Service Registrar reg ) {", "synchronized ( registrars ) {", "if ( terminated ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( reg == null ) return ;", "send Discarded ( reg , null ) ; } }"]}
{"ids": "13113", "code": ["public boolean is Final State ( int state ) {", "return ( state < NUM_ ) ? false : f Final State Flags [ state ] ; }"]}
{"ids": "4234", "code": ["public static String generate Scale Markers ( int protein Length , int max Num Scale Markers ) {", "if ( max Num Scale Markers < NUM_ ) {", "max Num Scale Markers = NUM_ ; }", "int scale = calc Scale ( protein Length , max Num Scale Markers ) ;", "String Builder sb = new String Builder ( STR_ ) ;", "int index = NUM_ ;", "int num Remaining = protein Length ;", "while ( index <= protein Length ) {", "index += scale ;", "num Remaining -= scale ;", "sb . append ( STR_ ) ;", "if ( ( num Remaining > NUM_ ) && ( num Remaining < scale ) ) {", "if ( num Remaining < ( scale / NUM_ ) ) {", "sb . append ( protein Length ) ;", "break ; } }", "if ( index >= protein Length ) {", "sb . append ( protein Length ) ; }", "else {", "sb . append ( index ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "54613", "code": ["public void write Fig Tree Block ( Map < String , Object > settings ) throws IO Exception {", "writer . println ( STR_ ) ;", "for ( String key : settings . key Set ( ) ) {", "Object value = settings . get ( key ) ;", "writer . println ( STR_ + key + STR_ + create String ( value ) + STR_ ) ; }", "writer . println ( STR_ ) ; }"]}
{"ids": "49078", "code": ["public int hash Code ( ) {", "return font . hash Code ( ) ^ glyphs . length ; }"]}
{"ids": "13277", "code": ["@ Override public void doctype Decl ( String root Element , String public Id , String system Id , Augmentations augs ) throws XNI Exception {", "f In DTD = true ;", "try {", "if ( f Lexical Handler != null ) {", "f Lexical Handler . start DTD ( root Element , public Id , system Id ) ; } }", "catch ( SAX Exception e ) {", "throw new XNI Exception ( e ) ; }", "if ( f Decl Handler != null ) {", "f Declared Attrs = new Symbol Hash ( ) ; } }"]}
{"ids": "66212", "code": ["public void clean Start ( ) {", "Connection conn = get Connection ( true , true ) ;", "if ( conn == null ) throw new Illegal State Exception ( STR_ ) ;", "drop Database ( conn ) ;", "create User ( conn ) ;", "create Database ( conn ) ;", "try {", "if ( conn != null ) conn . close ( ) ; }", "catch ( SQL Exception e 2 ) {", "log . log ( Level . SEVERE , STR_ , e 2 ) ; }", "conn = null ; }"]}
{"ids": "65300", "code": ["static Template Model Exception new Method Arg Invalid Value Exception ( String method Name , int arg Idx , Object ... details ) {", "return new Template Model Exception ( method Name , STR_ , Integer . value Of ( arg Idx + NUM_ ) , STR_ , details ) ; }"]}
{"ids": "23215", "code": ["private void load Map ( String extension , String mime Type ) {", "if ( ! mime Type To Extension Map . contains Key ( mime Type ) ) {", "mime Type To Extension Map . put ( mime Type , extension ) ; }", "extension To Mime Type Map . put ( extension , mime Type ) ;", "if ( is Image Type ( mime Type ) ) {", "image Mime Type Set . add ( mime Type ) ; } }"]}
{"ids": "34391", "code": ["private String convert Timestamp ( ) {", "String result = timestamp Format . replace All ( VALID DATEFORMAT CHAR PATTERN + STR_ , STR_ ) ;", "result = result . replace All ( Pattern . quote ( STR_ ) , STR_ ) ;", "return result ; }"]}
{"ids": "49545", "code": ["public static String encode ( byte [ ] bytes ) {", "int len = bytes . length ;", "final String Buffer encoded = new String Buffer ( ( len + NUM_ ) / NUM_ * NUM_ ) ;", "int i = NUM_ ;", "int j = len ;", "while ( j >= NUM_ ) {", "encoded . append ( to 64 ( ( ( ( bytes [ i ] & NUM_ ) << NUM_ ) | ( int ) ( ( bytes [ i + NUM_ ] & NUM_ ) << NUM_ ) | ( int ) ( bytes [ i + NUM_ ] & NUM_ ) ) , NUM_ ) ) ;", "i += NUM_ ;", "j -= NUM_ ; }", "if ( j == NUM_ ) {", "encoded . append ( to 64 ( ( ( bytes [ i ] & NUM_ ) << NUM_ ) | ( ( bytes [ i + NUM_ ] & NUM_ ) ) , NUM_ ) ) ; }", "if ( j == NUM_ ) {", "encoded . append ( to 64 ( ( ( bytes [ i ] & NUM_ ) ) , NUM_ ) ) ; }", "return encoded . to String ( ) ; }"]}
{"ids": "40610", "code": ["private static boolean contains Chroot ( String zk Host ) {", "return zk Host . contains ( STR_ ) ; }"]}
{"ids": "53975", "code": ["public static void on Database ( Mongo Client client , String db Name , Consumer < Mongo Database > db Operation ) {", "if ( contains ( client . list Database Names ( ) , db Name ) ) {", "db Operation . accept ( client . get Database ( db Name ) ) ; } }"]}
{"ids": "71644", "code": ["protected int create Hash Code ( ) {", "int result = uri . hash Code ( ) ^ prefix . hash Code ( ) ;", "if ( result == NUM_ ) {", "result = NUM_ ; }", "return result ; }"]}
{"ids": "35508", "code": ["@ Override public void on Failure ( I Mqtt Token async Action Token , Throwable exception ) {", "exception . print Stack Trace ( ) ;", "Log . e ( STR_ , STR_ + exception . get Message ( ) ) ;", "on Disconnect ( false ) ; }"]}
{"ids": "44925", "code": ["static private String SHORT Max Plus ( ) {", "long temp Value = Short . MAX VALUE + NUM_ ;", "return String . value Of ( temp Value ) ; }"]}
{"ids": "72786", "code": ["public static String encode ( String value ) {", "value = value . replace ( STR_ , STR_ ) ;", "value = value . replace ( STR_ , STR_ ) ;", "value = value . replace ( STR_ , STR_ ) ;", "value = value . replace ( STR_ , STR_ ) ;", "value = value . replace ( STR_ , STR_ ) ;", "value = value . replace ( STR_ , STR_ ) ;", "return value ; }"]}
{"ids": "56869", "code": ["public void create Database Entities For Storage Policy Testing ( ) {", "create Database Entities For Storage Policy Testing ( Abstract Service Test . STORAGE POLICY NAMESPACE CD , Arrays . as List ( Abstract Service Test . STORAGE POLICY RULE TYPE ) , Abstract Service Test . BDEF NAMESPACE , Abstract Service Test . BDEF NAME , Arrays . as List ( Abstract Service Test . FORMAT FILE TYPE CODE ) , Arrays . as List ( Abstract Service Test . STORAGE NAME ) , Arrays . as List ( Abstract Service Test . STORAGE NAME 2 ) ) ; }"]}
{"ids": "68785", "code": ["private PDF Page create Page ( int pagenum , PDF Object page Obj ) throws IO Exception {", "int rotation = NUM_ ;", "Rect F mediabox = null ;", "Rect F cropbox = null ;", "PDF Object mediabox Obj = get Inherited Value ( page Obj , STR_ ) ;", "if ( mediabox Obj != null ) {", "mediabox = parse Rect ( mediabox Obj ) ; }", "PDF Object cropbox Obj = get Inherited Value ( page Obj , STR_ ) ;", "if ( cropbox Obj != null ) {", "cropbox = parse Rect ( cropbox Obj ) ; }", "PDF Object rotate Obj = get Inherited Value ( page Obj , STR_ ) ;", "if ( rotate Obj != null ) {", "rotation = rotate Obj . get Int Value ( ) ; }", "Rect F bbox = ( ( cropbox == null ) ? mediabox : cropbox ) ;", "return new PDF Page ( pagenum , bbox , rotation , cache ) ; }"]}
{"ids": "14623", "code": ["static Map add Element To Map ( String key , Set values , Map to Map ) {", "if ( ( key != null ) && ( to Map != null ) ) {", "to Map . put ( key , values ) ; }", "return to Map ; }"]}
{"ids": "80102", "code": ["public void save Boot Prop ( ) throws IO Exception {", "if ( ! boot Prop . equals ( boot Prop Org ) ) {", "final String prop File = jar Folder + STR_ ;", "final Output Stream os = new File Output Stream ( prop File ) ;", "try {", "boot Prop . store ( os , STR_ ) ; }", "finally {", "os . close ( ) ; } } }"]}
{"ids": "45278", "code": ["private int append ( File System fs , Configuration conf , Path src , Print Writer writer , int current Record Number ) throws IO Exception {", "Buffered Reader reader = new Buffered Reader ( new Input Stream Reader ( fs . open ( src ) ) ) ;", "try {", "String line = reader . read Line ( ) ;", "while ( line != null ) {", "if ( line . starts With ( STR_ ) ) {", "line = STR_ + current Record Number ++ ; }", "writer . println ( line ) ;", "line = reader . read Line ( ) ; }", "return current Record Number ; }", "finally {", "reader . close ( ) ; } }"]}
{"ids": "4828", "code": ["public static String morpha ( String text , boolean tags ) {", "if ( text . is Empty ( ) ) {", "return STR_ ; }", "String [ ] text Parts = whitespace . split ( text ) ;", "String Builder result = new String Builder ( ) ;", "try {", "for ( String text Part : text Parts ) {", "Morpha morpha = new Morpha ( new String Reader ( text Part ) , tags ) ;", "if ( result . length ( ) != NUM_ ) {", "result . append ( STR_ ) ; }", "result . append ( morpha . next ( ) ) ; } }", "catch ( Error e ) {", "return text ; }", "catch ( java . io . IO Exception e ) {", "return text ; }", "return result . to String ( ) ; }"]}
{"ids": "9221", "code": ["public static void delete File ( File file ) throws Ade Usage Exception {", "if ( ! file . delete ( ) ) {", "throw new Ade Usage Exception ( FAILED DELETING FILE + file . get Path ( ) ) ; } }"]}
{"ids": "6477", "code": ["public Shape create Check Mark ( final int x , final int y , final int w , final int h ) {", "double xf = w / NUM_ ;", "double hf = h / NUM_ ;", "path . reset ( ) ;", "path . move To ( x , y + NUM_ * hf ) ;", "path . line To ( x + NUM_ * xf , y + NUM_ * hf ) ;", "path . line To ( x + NUM_ * xf , y + NUM_ * hf ) ;", "path . line To ( x + NUM_ * xf , y ) ;", "path . line To ( x + NUM_ * xf , y ) ;", "path . line To ( x + NUM_ * xf , y + NUM_ * hf ) ;", "path . close Path ( ) ;", "return path ; }"]}
{"ids": "27059", "code": ["public TCP Channel Client ( Executor Service executor , TCP Channel Events event Listener , String ip , int port ) {", "this . executor = executor ;", "executor Thread Check = new Thread Utils . Thread Checker ( ) ;", "executor Thread Check . detach Thread ( ) ;", "this . event Listener = event Listener ;", "Inet Address address ;", "try {", "address = Inet Address . get By Name ( ip ) ; }", "catch ( Unknown Host Exception e ) {", "report Error ( STR_ ) ;", "return ; }", "if ( address . is Any Local Address ( ) ) {", "socket = new TCP Socket Server ( address , port ) ; }", "else {", "socket = new TCP Socket Client ( address , port ) ; }", "socket . start ( ) ; }"]}
{"ids": "11343", "code": ["protected void cut Selected Bean ( ) {", "if ( Debug . debugging ( STR_ ) ) Debug . output ( STR_ ) ;", "if ( selected Bean == null || selected Bean Location == null ) {", "if ( Debug . debugging ( STR_ ) ) Debug . output ( STR_ + selected Bean ) ;", "if ( Debug . debugging ( STR_ ) ) Debug . output ( STR_ + selected Bean Location ) ;", "clear Selection ( ) ;", "return ; }", "try {", "ser Bean = new Byte Array Output Stream ( ) ;", "Object Output Stream oos = new Object Output Stream ( ser Bean ) ;", "oos . write Object ( selected Bean ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "clear Selection ( ) ;", "if ( Debug . debugging ( STR_ ) ) Debug . output ( STR_ ) ;", "return ; }", "cut Bean = selected Bean ;", "selected Bean Box . show Cut ( selected Bean ) ;", "if ( Debug . debugging ( STR_ ) ) Debug . output ( STR_ ) ; }"]}
{"ids": "11319", "code": ["public void action Performed ( java . awt . event . Action Event e ) {", "Object source = e . get Source ( ) ;", "if ( ! ( source instanceof J Menu Item ) ) return ;", "J Menu Item mi = ( J Menu Item ) source ;", "String name = mi . get Text ( ) ;", "OM Graphic Handler Layer target Layer = ( OM Graphic Handler Layer ) layers . get ( name ) ;", "if ( target Layer == null ) {", "Debug . message ( STR_ , STR_ + STR_ + name ) ;", "return ; }", "target Layer . do Action ( ( OM Graphic ) transfer Data , new OM Action ( OM Action . UPDATE GRAPHIC MASK ) ) ; }"]}
{"ids": "20227", "code": ["private void add Entry ( ) {", "model . add New Entry ( ) ;", "remove Button . set Enabled ( false ) ; }"]}
{"ids": "52804", "code": ["private void ensure Size ( ) {", "if ( children == EMPTY CHILDREN ) {", "children = new FP Node [ NUM_ ] ;", "return ; }", "int newsize = children . length == NUM_ ? INITIAL SIZE : ( children . length << NUM_ ) ;", "children = Arrays . copy Of ( children , newsize ) ; }"]}
{"ids": "51409", "code": ["public UUID ( long most Sig Bits , long least Sig Bits ) {", "this . most Sig Bits = most Sig Bits ;", "this . least Sig Bits = least Sig Bits ;", "init ( ) ; }"]}
{"ids": "15480", "code": ["private static void render Handler ( Faces Context context , UI Component component , Collection < Client Behavior Context . Parameter > params , String handler Name , Object handler Value , String behavior Event Name , String submit Target , boolean needs Submit , boolean include Exec ) throws IO Exception {", "Response Writer writer = context . get Response Writer ( ) ;", "String user Handler = get Non Empty User Handler ( handler Value ) ;", "List < Client Behavior > behaviors = get Client Behaviors ( component , behavior Event Name ) ;", "if ( ( null != behaviors ) && ( behaviors . size ( ) > NUM_ ) && Util . component Is Disabled ( component ) ) {", "behaviors = null ; }", "if ( params == null ) {", "params = Collections . empty List ( ) ; }", "String handler = null ;", "switch ( get Handler Type ( behaviors , params , user Handler , needs Submit , include Exec ) ) {", "case USER HANDLER ONLY :", "handler = user Handler ;", "break ;", "case SINGLE BEHAVIOR ONLY :", "handler = get Single Behavior Handler ( context , component , behaviors . get ( NUM_ ) , params , behavior Event Name , submit Target , needs Submit ) ;", "break ;", "case SUBMIT ONLY :", "handler = get Submit Handler ( context , component , params , submit Target , true ) ;", "break ;", "case CHAIN :", "handler = get Chained Handler ( context , component , behaviors , params , behavior Event Name , user Handler , submit Target , needs Submit ) ;", "break ;", "default :", "assert ( false ) ; }", "writer . write Attribute ( handler Name , handler , null ) ; }"]}
{"ids": "82934", "code": ["public String construct TSDB Metric Name ( ) {", "String Builder sb = new String Builder ( get Scope ( ) ) ;", "if ( namespace != null && ! namespace . is Empty ( ) ) {", "sb . append ( get Namespace ( ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "55240", "code": ["protected synchronized void received ( int response Code , String stream , String json ) {", "Follower Info result = parse Followers ( stream , json ) ;", "if ( result != null ) {", "no Error ( stream ) ;", "cached . put ( stream , result ) ;", "if ( type == Follower . Type . FOLLOWER ) {", "listener . received Followers ( result ) ;", "if ( has New Followers ( result . followers ) ) {", "listener . new Followers ( result ) ; } }", "else if ( type == Follower . Type . SUBSCRIBER ) {", "listener . received Subscribers ( result ) ; }", "requested . add ( stream ) ; }", "else {", "String error Message = STR_ ;", "if ( response Code == NUM_ ) {", "error Message = STR_ ;", "error ( stream , NUM_ ) ; }", "else if ( response Code == NUM_ ) {", "error Message = STR_ ;", "error ( stream , NUM_ ) ; }", "else if ( response Code == NUM_ || response Code == NUM_ ) {", "error Message = STR_ ;", "error ( stream , NUM_ ) ; }", "else if ( response Code == NUM_ ) {", "error Message = STR_ ;", "error ( stream , NUM_ ) ; }", "else {", "error Message = STR_ ;", "error ( stream , NUM_ ) ; }", "Follower Info error Result = new Follower Info ( type , stream , error Message ) ;", "cached . put ( stream , error Result ) ;", "if ( type == Follower . Type . FOLLOWER ) {", "listener . received Followers ( error Result ) ; }", "else if ( type == Follower . Type . SUBSCRIBER ) {", "listener . received Subscribers ( error Result ) ; } } }"]}
{"ids": "30063", "code": ["public static < T > List < T > select ( Connection connection , String raw Sql Query , Row Processor < T > row Processor , Object ... parameters ) throws IO Exception , SQL Exception {", "Prepared Statement stmt = null ;", "Result Set rs = null ;", "try {", "stmt = connection . prepare Statement ( raw Sql Query ) ;", "for ( int index = NUM_ ; index < parameters . length ; index ++ ) {", "Jdbc Utils . bind Parameter ( stmt , index + NUM_ , parameters [ index ] ) ; }", "rs = stmt . execute Query ( ) ;", "List < T > result = Lists . new Linked List ( ) ;", "while ( rs . next ( ) ) {", "result . add ( row Processor . process ( rs ) ) ; }", "return result ; }", "finally {", "Jdbc Utils . close Result Set ( rs ) ;", "Jdbc Utils . close Statement ( stmt ) ; } }"]}
{"ids": "39084", "code": ["public void enable Dependency ( Capability c ) {", "if ( do Not Check Capabilities ( ) ) {", "return ; }", "if ( c == Capability . NOMINAL ATTRIBUTES ) {", "enable Dependency ( Capability . BINARY ATTRIBUTES ) ; }", "else if ( c == Capability . BINARY ATTRIBUTES ) {", "enable Dependency ( Capability . UNARY ATTRIBUTES ) ; }", "else if ( c == Capability . UNARY ATTRIBUTES ) {", "enable Dependency ( Capability . EMPTY NOMINAL ATTRIBUTES ) ; }", "else if ( c == Capability . NOMINAL CLASS ) {", "enable Dependency ( Capability . BINARY CLASS ) ; }", "m Dependencies . add ( c ) ; }"]}
{"ids": "71281", "code": ["public I Variable [ ] extract Robot Debug Variables ( final int stack Trace Id , final Map < String , Object > new Variables ) {", "final Robot Debug Variables Context current Variables Context = find Current Variables Context ( stack Trace Id ) ;", "Map < String , I Variable > previous Variables Map = init Previous Variables State ( current Variables Context ) ;", "final Map < String , I Variable > non Global Variables Map = new Linked Hash Map < > ( ) ;", "if ( previous Variables Map == null ) {", "init New Non Global Variables ( new Variables , non Global Variables Map ) ; }", "else {", "init Variables Comparing With Previous State ( new Variables , previous Variables Map , non Global Variables Map ) ; }", "final Linked List < I Variable > current Variables List = create Current Variables List ( non Global Variables Map ) ;", "save Current Variables State ( stack Trace Id , current Variables Context , non Global Variables Map ) ;", "return current Variables List . to Array ( new I Variable [ current Variables List . size ( ) ] ) ; }"]}
{"ids": "78749", "code": ["public Resources Poet add Integer ( String name , String value ) {", "Element bool = document . create Element ( STR_ ) ;", "bool . set Attribute ( STR_ , name ) ;", "bool . append Child ( document . create Text Node ( String . value Of ( value ) ) ) ;", "resource Element . append Child ( bool ) ;", "return this ; }"]}
{"ids": "72181", "code": ["public int available In Process ( ) {", "return Math . max ( NUM_ , max In Process - pending . size ( ) ) ; }"]}
{"ids": "55279", "code": ["public boolean should Execute Action ( ) {", "if ( delay <= NUM_ ) {", "return true ; }", "long time Passed = System . current Time Millis ( ) - last Action Executed ;", "if ( time Passed > delay * NUM_ ) {", "last Action Executed = System . current Time Millis ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "24049", "code": ["protected void handle Or Defer Message ( Distribution Message msg ) {", "synchronized ( startup Lock ) {", "if ( being Sick || playing Dead ) {", "if ( msg . contains Region Content Change ( ) || msg instanceof Partition Message With Direct Reply ) {", "startup Messages . add ( new Startup Event ( msg ) ) ;", "return ; } }", "if ( ! processing Events ) {", "startup Messages . add ( new Startup Event ( msg ) ) ;", "return ; } }", "dispatch Message ( msg ) ; }"]}
{"ids": "21392", "code": ["public boolean zone Export Remove Volumes ( List < Network Zoning Param > zoning Params , Collection < URI > volume UR Is , String step Id ) {", "Network Zoning Param zoning Param = zoning Params . get ( NUM_ ) ;", "log . info ( String . format ( STR_ , zoning Param . get Export Group Display ( ) , volume UR Is . to String ( ) ) ) ;", "return do Zone Export Masks Delete ( zoning Params , volume UR Is , step Id ) ; }"]}
{"ids": "43594", "code": ["private void shutdown ( ) {", "if ( nbest List Writer != null ) {", "logger . info ( STR_ ) ;", "nbest List Writer . close ( ) ; }", "if ( alignment Writer != null ) {", "logger . info ( STR_ ) ;", "alignment Writer . close ( ) ; } }"]}
{"ids": "19859", "code": ["public List < Map < String , String > > list ( Database conn ) throws SQL Exception {", "Result Set rs = null ;", "Statement statement = conn . create Statement ( ) ;", "List < Map < String , String > > shard To Channels = new Array List < Map < String , String > > ( ) ;", "try {", "rs = statement . execute Query ( select ) ;", "while ( rs . next ( ) ) {", "Map < String , String > shard = new Hash Map < String , String > ( ) ;", "shard . put ( Shard Channel Table . SHARD ID COL , rs . get String ( Shard Channel Table . SHARD ID COL ) ) ;", "shard . put ( Shard Channel Table . CHANNEL COL , rs . get String ( Shard Channel Table . CHANNEL COL ) ) ;", "shard To Channels . add ( shard ) ; } }", "finally {", "close ( rs ) ;", "close ( statement ) ; }", "return shard To Channels ; }"]}
{"ids": "80709", "code": ["public Boolean is Hidden ( File f ) {", "String name = f . get Name ( ) ;", "if ( ( name != null ) && ! name . equals ( STR_ ) && ( name . char At ( NUM_ ) == STR_ ) ) {", "return Boolean . TRUE ; }", "else {", "return Boolean . FALSE ; } }"]}
{"ids": "70073", "code": ["private boolean scroll View Can Scroll Vertically ( Scroll View scroll View , int direction ) {", "final int offset = Math . max ( NUM_ , scroll View . get Scroll Y ( ) ) ;", "final int range = compute Vertical Scroll Range ( scroll View ) - scroll View . get Height ( ) ;", "if ( range == NUM_ ) return false ;", "if ( direction < NUM_ ) {", "return offset > NUM_ ; }", "else {", "return offset < range - NUM_ ; } }"]}
{"ids": "11340", "code": ["public Jar Info load Jar ( ) throws IO Exception {", "Zip Input Stream zis = null ;", "Manifest mf = null ;", "boolean empty = true ;", "try {", "zis = new Zip Input Stream ( jar Stream ) ;", "Zip Entry ent = null ;", "while ( ( ent = zis . get Next Entry ( ) ) != null ) {", "empty = false ;", "String name = ent . get Name ( ) ;", "if ( Manifest . is Manifest Name ( name ) ) {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "byte buffer [ ] = new byte [ NUM_ ] ;", "for ( ; ; ) {", "int len = zis . read ( buffer ) ;", "if ( len < NUM_ ) {", "break ; }", "baos . write ( buffer , NUM_ , len ) ; }", "byte [ ] buf = baos . to Byte Array ( ) ;", "mf = new Manifest ( buf ) ; } } }", "catch ( IO Exception ex ) {", "throw ex ; }", "catch ( Throwable th ) {", "th . print Stack Trace ( ) ;", "throw new IO Exception ( STR_ + th ) ; }", "finally {", "if ( zis != null ) {", "try {", "zis . close ( ) ; }", "catch ( Exception ex ) { } } }", "if ( empty ) {", "throw new IO Exception ( STR_ ) ; }", "Jar Info ji = create Jar Info ( mf ) ;", "return ji ; }"]}
{"ids": "16858", "code": ["public void invalidate Title Sortable ( ) {", "for ( Movie movie : new Array List < > ( movie List ) ) {", "movie . clear Title Sortable ( ) ; } }"]}
{"ids": "61915", "code": ["public void add Row ( Assignment head , double prob ) {", "if ( prob < NUM_ || prob > NUM_ ) {", "return ; }", "head Vars . add All ( head . get Variables ( ) ) ;", "table . put ( head , prob ) ; }"]}
{"ids": "24267", "code": ["public byte [ ] create Jar From File Content ( final String file Name , final String content ) throws IO Exception {", "Byte Array Output Stream byte Array Output Stream = new Byte Array Output Stream ( ) ;", "Jar Output Stream jar Output Stream = new Jar Output Stream ( byte Array Output Stream ) ;", "Jar Entry entry = new Jar Entry ( file Name ) ;", "entry . set Time ( System . current Time Millis ( ) ) ;", "jar Output Stream . put Next Entry ( entry ) ;", "jar Output Stream . write ( content . get Bytes ( ) ) ;", "jar Output Stream . close Entry ( ) ;", "jar Output Stream . close ( ) ;", "return byte Array Output Stream . to Byte Array ( ) ; }"]}
{"ids": "84263", "code": ["private boolean go To ( long day , boolean animate , boolean set Selected , boolean force Scroll ) {", "if ( set Selected ) {", "m Selected Day . set Time In Millis ( day ) ; }", "m Temp Day . set Time In Millis ( day ) ;", "final int position = get Position From Day ( day ) ;", "View child ;", "int i = NUM_ ;", "int top = NUM_ ;", "do {", "child = get Child At ( i ++ ) ;", "if ( child == null ) {", "break ; }", "top = child . get Top ( ) ; }", "while ( top < NUM_ ) ;", "int selected Position ;", "if ( child != null ) {", "selected Position = get Position For View ( child ) ; }", "else {", "selected Position = NUM_ ; }", "if ( set Selected ) {", "m Adapter . set Selected Day ( m Selected Day ) ; }", "if ( position != selected Position || force Scroll ) {", "set Month Displayed ( m Temp Day ) ;", "m Previous Scroll State = On Scroll Listener . SCROLL STATE FLING ;", "if ( animate ) {", "smooth Scroll To Position From Top ( position , LIST TOP OFFSET , GOTO SCROLL DURATION ) ;", "return true ; }", "else {", "post Set Selection ( position ) ; } }", "else if ( set Selected ) {", "set Month Displayed ( m Selected Day ) ; }", "return false ; }"]}
{"ids": "5542", "code": ["public boolean search ( V v ) {", "int h = hash Method . hash ( v ) ;", "Linked List < V > list = ( Linked List < V > ) table [ h ] ;", "if ( list == null ) {", "return false ; }", "return list . contains ( v ) ; }"]}
{"ids": "69030", "code": ["public void add Listener ( Color Map Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "52771", "code": ["protected void compute P Dists ( Relation < O > relation , KNN Query < O > knn , Writable Double Data Store pdists ) {", "Finite Progress prds Progress = LOG . is Verbose ( ) ? new Finite Progress ( STR_ , relation . size ( ) , LOG ) : null ;", "for ( DBID Iter iditer = relation . iter DBI Ds ( ) ; iditer . valid ( ) ; iditer . advance ( ) ) {", "final KNN List neighbors = knn . get KNN For DBID ( iditer , kreach + NUM_ ) ;", "int ks = NUM_ ;", "double ssum = NUM_ ;", "for ( Double DBID List Iter neighbor = neighbors . iter ( ) ; neighbor . valid ( ) && ks < kreach ; neighbor . advance ( ) ) {", "if ( DBID Util . equal ( neighbor , iditer ) ) {", "continue ; }", "final double d = neighbor . double Value ( ) ;", "ssum += d * d ;", "ks ++ ; }", "double pdist = ks > NUM_ ? Math . sqrt ( ssum / ks ) : NUM_ ;", "pdists . put Double ( iditer , pdist ) ;", "LOG . increment Processed ( prds Progress ) ; }", "LOG . ensure Completed ( prds Progress ) ; }"]}
{"ids": "43069", "code": ["External Problem ( Process process ) {", "this ( process . get Input Stream ( ) , process . get Output Stream ( ) ) ;", "Redirect Stream . redirect ( process . get Error Stream ( ) , System . err ) ; }"]}
{"ids": "14503", "code": ["protected static boolean network Monitor Exist ( String nw Mon Name ) {", "String class Method = STR_ ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( class Method + STR_ + nw Mon Name ) ; }", "if ( ( nw Mon Name == null ) || ( nw Mon Name . length ( ) == NUM_ ) ) {", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( class Method + STR_ ) ; }", "return false ; }", "Set < String > ntw Stats = Network Monitor . get Instance Names ( ) ;", "String ss = nw Mon Name . to Lower Case ( ) ;", "if ( ntw Stats . contains ( ss ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "66680", "code": ["public void and With ( List < Query Predicate > predicates ) {", "children . add All ( predicates ) ; }"]}
{"ids": "70238", "code": ["public void add Roll ( MM Random rng ) {", "int result = rng . random Int ( this . faces ) + this . min ;", "all . add Element ( new Integer ( result ) ) ;", "this . total += result ;", "if ( keep != - NUM_ && all . size ( ) >= keep ) {", "this . total = NUM_ ;", "Collections . sort ( all , Collections . reverse Order ( ) ) ;", "for ( int i = NUM_ ; i < keep ; i ++ ) {", "this . total += all . get ( i ) ; } } }"]}
{"ids": "39207", "code": ["public boolean check Canonical User Options ( ) {", "boolean result ;", "Option Handler handler ;", "String [ ] user Options ;", "String [ ] user Options Check ;", "print ( STR_ ) ;", "try {", "handler = get Default Handler ( ) ;", "handler . set Options ( get User Options ( ) ) ;", "if ( get Debug ( ) ) {", "print ( STR_ ) ; }", "user Options = handler . get Options ( ) ;", "if ( get Debug ( ) ) {", "println ( print Options ( user Options ) ) ; }", "if ( get Debug ( ) ) {", "println ( STR_ ) ; }", "handler . set Options ( user Options . clone ( ) ) ;", "if ( get Debug ( ) ) {", "println ( STR_ ) ; }", "user Options Check = handler . get Options ( ) ;", "compare Options ( user Options , user Options Check ) ;", "println ( STR_ ) ;", "result = true ; }", "catch ( Exception e ) {", "println ( STR_ ) ;", "result = false ;", "if ( get Debug ( ) ) {", "println ( e ) ; } }", "return result ; }"]}
{"ids": "75840", "code": ["public static void push Encrypted Message ( final Text Secure Envelope envelope ) {", "while ( true ) {", "try {", "queue . put ( envelope ) ;", "return ; }", "catch ( final Interrupted Exception e ) { } } }"]}
{"ids": "28706", "code": ["public static int random Range Int ( int min , int max ) {", "return ( int ) ( Math . random ( ) < NUM_ ? ( ( NUM_ - Math . random ( ) ) * ( max - min ) + min ) : ( Math . random ( ) * ( max - min ) + min ) ) ; }"]}
{"ids": "21910", "code": ["private void populate Task List ( Volume source , Map < Block Mirror , Volume > group Mirror Source Map , Task List task List , String task Id , Resource Operation Type Enum operation Type ) {", "Set < URI > group Set = new Hash Set < URI > ( ) ;", "add Task ( task List , source , task Id , operation Type ) ;", "for ( Entry < Block Mirror , Volume > entry : group Mirror Source Map . entry Set ( ) ) {", "Block Mirror mirror = entry . get Key ( ) ;", "Volume mirror Source = entry . get Value ( ) ;", "if ( source . is In CG ( ) && null != task List . get Task List ( ) ) {", "group Set . add ( mirror Source . get Consistency Group ( ) ) ; } }", "List < Block Consistency Group > groups = db Client . query Object ( Block Consistency Group . class , group Set ) ;", "for ( Block Consistency Group group : groups ) {", "add Task ( task List , group , task Id , operation Type ) ; } }"]}
{"ids": "3112", "code": ["public void add Listener ( Navigator Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "78969", "code": ["public void close Stream ( ) {", "Carbon Util . close Streams ( stream ) ;", "executor Service . shutdown ( ) ; }"]}
{"ids": "50220", "code": ["public double patience ( int k , F f , int N ) {", "double pf = p ( f ) ;", "Binomial Distribution dist = new Binomial Distribution ( null , N , pf ) ;", "double p 0 = Math . pow ( NUM_ - pf , N ) ;", "return NUM_ - ( dist . cumulative Probability ( k - NUM_ ) - p 0 ) / ( NUM_ - p 0 ) ; }"]}
{"ids": "7927", "code": ["public static List series Name List From Data Array ( Object [ ] [ ] data ) {", "int series Count = data . length ;", "List series Name List = new java . util . Array List ( series Count ) ;", "for ( int i = NUM_ ; i < series Count ; i ++ ) {", "series Name List . add ( STR_ + ( i + NUM_ ) ) ; }", "return series Name List ; }"]}
{"ids": "52966", "code": ["@ Override public void run ( ) {", "Multiple Objects Bundle data = generator . load Data ( ) ;", "if ( LOG . is Verbose ( ) ) {", "LOG . verbose ( STR_ ) ; }", "try {", "if ( output File . exists ( ) && LOG . is Verbose ( ) ) {", "LOG . verbose ( STR_ + output File + STR_ + STR_ ) ; }", "try ( Output Stream Writer out Stream = new File Writer ( output File , true ) ) {", "write Clusters ( out Stream , data ) ; } }", "catch ( IO Exception e ) {", "throw new Abort Exception ( STR_ , e ) ; }", "if ( LOG . is Verbose ( ) ) {", "LOG . verbose ( STR_ ) ; } }"]}
{"ids": "21778", "code": ["private boolean used All Rule 17 Directors ( Set < String > allocated Directors , Port Allocation Context context ) {", "Set < String > rule 17 Directors = get Rule 17 Directors ( context ) ;", "for ( String director : allocated Directors ) {", "rule 17 Directors . remove ( director ) ; }", "return rule 17 Directors . is Empty ( ) ; }"]}
{"ids": "85054", "code": ["public void stop ( ) {", "synchronized ( private Instance Lock ) {", "if ( connection Accept Thread == null ) {", "return ; } }", "is Stopped . set ( true ) ;", "try {", "connection Accept Thread . interrupt ( ) ;", "connection Accept Thread . join ( ) ; }", "catch ( Interrupted Exception e ) { }", "try {", "server Socket . close ( ) ; }", "catch ( IO Exception e ) { } }"]}
{"ids": "13132", "code": ["private static String expand System Id Strict On ( String system Id , String base System Id ) throws URI . Malformed URI Exception {", "URI system URI = new URI ( system Id , true ) ;", "if ( system URI . is Absolute URI ( ) ) {", "return system Id ; }", "URI base URI = null ;", "if ( base System Id == null || base System Id . length ( ) == NUM_ ) {", "base URI = get User Dir ( ) ; }", "else {", "base URI = new URI ( base System Id , true ) ;", "if ( ! base URI . is Absolute URI ( ) ) {", "base URI . absolutize ( get User Dir ( ) ) ; } }", "system URI . absolutize ( base URI ) ;", "return system URI . to String ( ) ; }"]}
{"ids": "54789", "code": ["public static void free ( D Message msg ) {", "int index = size 2 Index ( msg . get Size ( ) ) ;", "msg . clear ( ) ;", "if ( index < NUM_ ) ;", "else if ( m cache [ index ] != null ) ;", "else m cache [ index ] = msg ; }"]}
{"ids": "84480", "code": ["public boolean equals Ignore Case ( final Str Builder other ) {", "if ( this == other ) {", "return true ; }", "if ( this . size != other . size ) {", "return false ; }", "final char this Buf [ ] = this . buffer ;", "final char other Buf [ ] = other . buffer ;", "for ( int i = size - NUM_ ; i >= NUM_ ; i -- ) {", "final char c 1 = this Buf [ i ] ;", "final char c 2 = other Buf [ i ] ;", "if ( c 1 != c 2 && Character . to Upper Case ( c 1 ) != Character . to Upper Case ( c 2 ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "64656", "code": ["protected static Long convert Uuid To Long ( UUID uuid ) {", "if ( uuid == null ) {", "return null ; }", "Long converted Uuid ;", "if ( uuid . version ( ) == NUM_ ) {", "converted Uuid = uuid . timestamp ( ) ; }", "else {", "converted Uuid = uuid . get Most Significant Bits ( ) ; }", "return converted Uuid ; }"]}
{"ids": "24995", "code": ["public void add VM Arguments ( String vm Argument Name , String vm Argument Value ) {", "Vm Argument Data vm Arg = new Vm Argument Data ( vm Argument Name , vm Argument Value ) ;", "vm Set . add ( vm Arg ) ; }"]}
{"ids": "33914", "code": ["private void apply To ( Class Visitor v , Field f ) {", "if ( Log . is Logging On ( ) ) {", "Log . log Line ( String . format ( STR_ , f . to Generic String ( ) ) ) ; }", "v . visit ( f ) ; }"]}
{"ids": "22032", "code": ["public Task Resource Rep unlink Target Volumes From Snapshot Session ( URI snap Session URI , Snapshot Session Unlink Targets Param param ) {", "return unlink Target Volumes From Snapshot Session ( snap Session URI , param , Operation Type Enum . UNLINK SNAPSHOT SESSION TARGET ) ; }"]}
{"ids": "71204", "code": ["private List reverse ( List seq ) {", "Linked List new Seq = new Linked List ( ) ;", "for ( Iterator i = seq . iterator ( ) ; i . has Next ( ) ; ) {", "Directed Edge de = ( Directed Edge ) i . next ( ) ;", "new Seq . add First ( de . get Sym ( ) ) ; }", "return new Seq ; }"]}
{"ids": "25655", "code": ["@ Deprecated @ Override public String read Line ( ) throws IO Exception {", "String Builder b = new String Builder ( NUM_ ) ;", "int chr ;", "while ( ( chr = read ( ) ) >= NUM_ ) {", "if ( chr != STR_ ) {", "b . append ( ( char ) chr ) ; }", "else {", "return b . to String ( ) ; } }", "return b . to String ( ) ; }"]}
{"ids": "74821", "code": ["private void add To Scene ( final Node items ) {", "collection . add ( items ) ; }"]}
{"ids": "71996", "code": ["public String documentation Home Page Url ( ) {", "return properties . get Property ( STR_ ) ; }"]}
{"ids": "86635", "code": ["public static boolean has Taxonomy Info ( Sequences Reader reader ) {", "final File taxon File = new File ( reader . path ( ) , TAXONOMY FILE ) ;", "final File mapping File = new File ( reader . path ( ) , TAXONOMY TO SEQUENCE FILE ) ;", "if ( taxon File . exists ( ) && mapping File . exists ( ) ) {", "return true ; }", "else if ( taxon File . exists ( ) || mapping File . exists ( ) ) {", "throw new No Talkback Slim Exception ( STR_ ) ; }", "else {", "return false ; } }"]}
{"ids": "8326", "code": ["public void replace ( Class Node type , int n ) {", "remove ( n ) ;", "push ( type ) ; }"]}
{"ids": "76862", "code": ["private static Boolean is Inside Polygon ( final Geo Point point , final List < Geo Point > poly Points ) {", "final double latitude = point . get Latitude ( ) ;", "final double longitude = point . get Longitude ( ) ;", "final double sin Latitude = Math . sin ( latitude ) ;", "final double cos Latitude = Math . cos ( latitude ) ;", "final double sin Longitude = Math . sin ( longitude ) ;", "final double cos Longitude = Math . cos ( longitude ) ;", "double arc Distance = NUM_ ;", "Double prev Angle = null ;", "for ( final Geo Point poly Point : poly Points ) {", "final Double angle = compute Angle ( poly Point , sin Latitude , cos Latitude , sin Longitude , cos Longitude ) ;", "if ( angle == null ) {", "return null ; }", "if ( prev Angle != null ) {", "double angle Delta = angle - prev Angle ;", "if ( angle Delta < - Math . PI ) {", "angle Delta += Math . PI * NUM_ ; }", "if ( angle Delta > Math . PI ) {", "angle Delta -= Math . PI * NUM_ ; }", "if ( Math . abs ( angle Delta - Math . PI ) < Vector . MINIMUM RESOLUTION ) {", "return null ; }", "arc Distance += angle Delta ; }", "prev Angle = angle ; }", "if ( prev Angle != null ) {", "final Double last Angle = compute Angle ( poly Points . get ( NUM_ ) , sin Latitude , cos Latitude , sin Longitude , cos Longitude ) ;", "if ( last Angle == null ) {", "return null ; }", "double angle Delta = last Angle - prev Angle ;", "if ( angle Delta < - Math . PI ) {", "angle Delta += Math . PI * NUM_ ; }", "if ( angle Delta > Math . PI ) {", "angle Delta -= Math . PI * NUM_ ; }", "if ( Math . abs ( angle Delta - Math . PI ) < Vector . MINIMUM RESOLUTION ) {", "return null ; }", "arc Distance += angle Delta ; }", "if ( Math . abs ( arc Distance ) < Vector . MINIMUM RESOLUTION ) {", "return null ; }", "return arc Distance > NUM_ ; }"]}
{"ids": "32815", "code": ["private Node delete Max ( Node x ) {", "if ( x . right == null ) return x . left ;", "x . right = delete Max ( x . right ) ;", "x . size = NUM_ + size ( x . left ) + size ( x . right ) ;", "x . height = NUM_ + Math . max ( height ( x . left ) , height ( x . right ) ) ;", "return balance ( x ) ; }"]}
{"ids": "45980", "code": ["private Tree Node ( long node Value , Snmp Mib Agent agent , Tree Node sup ) {", "this . node Value = node Value ;", "this . parent = sup ;", "agents . add Element ( agent ) ; }"]}
{"ids": "7909", "code": ["public Week ( Date time ) {", "this ( time , Time Zone . get Default ( ) , Locale . get Default ( ) ) ; }"]}
{"ids": "4073", "code": ["public Code Attribute create Code ( ) {", "Code Attribute code = new Code Attribute ( ) ;", "for ( int i = NUM_ ; i < attributes . size ( ) ; i ++ ) {", "Attribute attr = attributes . get ( i ) ;", "if ( attr instanceof Code Attribute ) return ( Code Attribute ) attr ; }", "return null ; }"]}
{"ids": "32817", "code": ["public Binary Out ( String filename ) {", "try {", "Output Stream os = new File Output Stream ( filename ) ;", "out = new Buffered Output Stream ( os ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "44578", "code": ["public static boolean create New File ( File target File ) {", "if ( target File . exists ( ) ) target File . delete ( ) ;", "try {", "return target File . create New File ( ) ; }", "catch ( IO Exception e ) {", "return false ; } }"]}
{"ids": "9890", "code": ["public Config ( Saml Authority Configuration saml Authority Config , Token Restrictions token Restrictions , Collection < List < Certificate > > valid Certs , long clock Tolerance , Collection < IDP Config > in External Idps ) {", "Validate . not Null ( saml Authority Config ) ;", "Validate . not Null ( token Restrictions ) ;", "Validate . not Empty ( valid Certs ) ;", "List < Certificate > authority Cert = saml Authority Config . get Signing Certificate Chain ( ) ;", "boolean authority Cert In Valid Certs = false ;", "for ( List < Certificate > current Chain : valid Certs ) {", "Validate . not Empty ( current Chain ) ;", "Validate . no Null Elements ( current Chain ) ;", "if ( ! authority Cert In Valid Certs && current Chain . equals ( authority Cert ) ) {", "authority Cert In Valid Certs = true ; } }", "Validate . is True ( authority Cert In Valid Certs , STR_ ) ;", "Validate . is True ( clock Tolerance >= NUM_ ) ;", "this . saml Authority Config = saml Authority Config ;", "this . valid Certs = valid Certs ;", "this . clock Tolerance = clock Tolerance ;", "this . token Restrictions = token Restrictions ;", "Hash Map < String , IDP Config > idps Set = new Hash Map < String , IDP Config > ( ) ;", "if ( in External Idps != null ) {", "for ( IDP Config conf : in External Idps ) {", "if ( conf != null ) {", "idps Set . put ( conf . get Entity ID ( ) , conf ) ; } } }", "this . external Idps = Collections . unmodifiable Map ( idps Set ) ; }"]}
{"ids": "85725", "code": ["public static void check Not Empty ( String string ) {", "if ( string . is Empty ( ) ) {", "throw new Null Pointer Exception ( ) ; } }"]}
{"ids": "16911", "code": ["public void cancel Unnamed Tasks ( ) {", "if ( unnamed Task Executor != null ) {", "unnamed Task Executor . shutdown Now ( ) ; } }"]}
{"ids": "83911", "code": ["public Simple Metric Group ( Group Name name , Stream < ? extends Metric > i ) {", "this ( name , i . collect ( Collectors . < Metric > to List ( ) ) ) ; }"]}
{"ids": "70323", "code": ["public boolean is Inside ( Point point ) {", "return bounds . contains ( point ) ; }"]}
{"ids": "1686", "code": ["private void resolve Protocols ( Class Loader loader ) {", "Service Loader < Protocol Manager Factory > service Loader = Service Loader . load ( Protocol Manager Factory . class , loader ) ;", "load Protocol Manager Factories ( service Loader ) ; }"]}
{"ids": "73985", "code": ["public static List < Inet Address > host Addresses ( ) {", "List < Inet Address > addr List = new Array List < > ( ) ;", "Enumeration < Network Interface > IF Cs = null ;", "try {", "IF Cs = Network Interface . get Network Interfaces ( ) ; }", "catch ( Socket Exception ex ) {", "log . error ( STR_ , ex ) ; }", "if ( IF Cs != null ) {", "while ( IF Cs . has More Elements ( ) ) {", "Network Interface IFC = IF Cs . next Element ( ) ;", "try {", "if ( IFC . is Up ( ) ) {", "Enumeration < Inet Address > addresses = IFC . get Inet Addresses ( ) ;", "while ( addresses . has More Elements ( ) ) {", "Inet Address address = addresses . next Element ( ) ;", "if ( ! address . is Loopback Address ( ) && ! address . is Link Local Address ( ) ) {", "addr List . add ( address ) ; } } } }", "catch ( Socket Exception ex ) {", "log . error ( STR_ , IFC . to String ( ) , ex ) ; } } }", "return addr List ; }"]}
{"ids": "13417", "code": ["public final static int caculate In Sample Size ( Bitmap Factory . Options options , int rqs W , int rqs H ) {", "final int height = options . out Height ;", "final int width = options . out Width ;", "int in Sample Size = NUM_ ;", "if ( rqs W == NUM_ || rqs H == NUM_ ) return NUM_ ;", "if ( height > rqs H || width > rqs W ) {", "final int height Ratio = Math . round ( ( float ) height / ( float ) rqs H ) ;", "final int width Ratio = Math . round ( ( float ) width / ( float ) rqs W ) ;", "in Sample Size = height Ratio < width Ratio ? height Ratio : width Ratio ; }", "return in Sample Size ; }"]}
{"ids": "80145", "code": ["public boolean has Status ( final Status ID status ) {", "return statuses . contains ( status ) ; }"]}
{"ids": "64862", "code": ["public void add Channel Map ( Channel Map channel Map ) {", "if ( ! m Channel Maps . contains ( channel Map ) ) {", "m Channel Maps . add ( channel Map ) ;", "int index = m Channel Maps . index Of ( channel Map ) ;", "fire Interval Added ( this , index , index ) ;", "broadcast ( new Channel Map Event ( channel Map , Event . ADD ) ) ; } }"]}
{"ids": "82359", "code": ["@ Override public boolean add ( E o ) {", "if ( null == o ) {", "throw new Null Pointer Exception ( ) ; }", "if ( offer ( o ) ) {", "return true ; }", "throw new Illegal State Exception ( ) ; }"]}
{"ids": "31064", "code": ["public Object put Resource ( Object key , Object value ) {", "return ( object Cache . put ( key , value ) ) ; }"]}
{"ids": "76757", "code": ["private String replace Suffix ( String value , String to Replace , String change To ) {", "String vvalue ;", "if ( ( value == null ) || ( to Replace == null ) || ( change To == null ) ) {", "return value ; }", "vvalue = remove Suffix ( value , to Replace ) ;", "if ( value . equals ( vvalue ) ) {", "return value ; }", "else {", "return vvalue + change To ; } }"]}
{"ids": "12321", "code": ["private void execute Claimed Task ( Claimed Task claimed Task ) {", "if ( ! claimed Task . set Start Time ( new Date ( ) ) ) {", "log . info ( STR_ , claimed Task . get Task ( ) ) ;", "return ; }", "Scan Range Task task = claimed Task . get Task ( ) ;", "boolean release Task = false ;", "try {", "scan Workflow . renew Scan Range Tasks ( Immutable List . of ( task ) , QUEUE RENEW TTL ) ;", "release Task = async Range Scan ( task ) ; }", "finally {", "unclaim Task ( claimed Task , release Task ) ;", "background Service . submit ( start Scans If Available Runnable ) ; } }"]}
{"ids": "37002", "code": ["private static boolean create Navi Directory ( ) {", "final File dir = new File ( Config Helper . get Configuration Directory ( Constants . COMPANY NAME , Constants . PROJECT NAME ) ) ;", "return dir . exists ( ) || dir . mkdir ( ) ; }"]}
{"ids": "29058", "code": ["public Iterator < Target > target Iterator ( ) {", "return target List . iterator ( ) ; }"]}
{"ids": "24912", "code": ["private void fit Size Of Scrolled Content ( ) {", "Point p = scroll Composite . get Size ( ) ;", "main . set Size ( main . compute Size ( p . x , SWT . DEFAULT ) ) ; }"]}
{"ids": "34896", "code": ["public int hash Code ( ) {", "return name . hash Code ( ) ; }"]}
{"ids": "9675", "code": ["public D Crypto Strength ( J Frame parent ) throws Crypto Exception {", "super ( parent , res . get String ( STR_ ) , Modality Type . DOCUMENT MODAL ) ;", "init Components ( ) ; }"]}
{"ids": "6594", "code": ["private Component create Separator ( ) {", "J Separator sep = new J Separator ( Swing Constants . VERTICAL ) ;", "sep . set Preferred Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "sep . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "return sep ; }"]}
{"ids": "16034", "code": ["public byte [ ] generate Signature ( ) throws Crypto Exception , Data Length Exception {", "content Digest . do Final ( m Dash , m Dash . length - h Len - s Len ) ;", "if ( s Len != NUM_ ) {", "random . next Bytes ( salt ) ;", "System . arraycopy ( salt , NUM_ , m Dash , m Dash . length - s Len , s Len ) ; }", "byte [ ] h = new byte [ h Len ] ;", "content Digest . update ( m Dash , NUM_ , m Dash . length ) ;", "content Digest . do Final ( h , NUM_ ) ;", "block [ block . length - s Len - NUM_ - h Len - NUM_ ] = NUM_ ;", "System . arraycopy ( salt , NUM_ , block , block . length - s Len - h Len - NUM_ , s Len ) ;", "byte [ ] db Mask = mask Generator Function 1 ( h , NUM_ , h . length , block . length - h Len - NUM_ ) ;", "for ( int i = NUM_ ; i != db Mask . length ; i ++ ) {", "block [ i ] ^= db Mask [ i ] ; }", "block [ NUM_ ] &= ( NUM_ > > ( ( block . length * NUM_ ) - em Bits ) ) ;", "System . arraycopy ( h , NUM_ , block , block . length - h Len - NUM_ , h Len ) ;", "block [ block . length - NUM_ ] = trailer ;", "byte [ ] b = cipher . process Block ( block , NUM_ , block . length ) ;", "clear Block ( block ) ;", "return b ; }"]}
{"ids": "53469", "code": ["public static double [ ] [ ] compute Weight Matrix ( final int quanth , final int quants , final int quantb ) {", "final int dim = quanth * quants * quantb ;", "assert ( dim > NUM_ ) ;", "final double [ ] [ ] m = new double [ dim ] [ dim ] ;", "for ( int x = NUM_ ; x < dim ; x ++ ) {", "final int hx = x / ( quantb * quants ) ;", "final int sx = ( x / quantb ) % quants ;", "final int bx = x % quantb ;", "for ( int y = x ; y < dim ; y ++ ) {", "final int hy = y / ( quantb * quants ) ;", "final int sy = ( y / quantb ) % quants ;", "final int by = y % quantb ;", "final double chx = Math . cos ( ( hx + NUM_ ) / quanth * Math Util . TWOPI ) ;", "final double chy = Math . cos ( ( hy + NUM_ ) / quanth * Math Util . TWOPI ) ;", "final double shx = Math Util . cos To Sin ( ( hx + NUM_ ) / quanth * Math Util . TWOPI , chx ) ;", "final double shy = Math Util . cos To Sin ( ( hy + NUM_ ) / quanth * Math Util . TWOPI , chy ) ;", "final double cos = chx * ( sx + NUM_ ) / quants - chy * ( sy + NUM_ ) / quants ;", "final double sin = shx * ( sx + NUM_ ) / quants - shy * ( sy + NUM_ ) / quants ;", "final double db = ( bx - by ) / ( double ) quantb ;", "final double val = NUM_ - Math . sqrt ( ( db * db + sin * sin + cos * cos ) / NUM_ ) ;", "m [ x ] [ y ] = m [ y ] [ x ] = val ; } }", "return m ; }"]}
{"ids": "42605", "code": ["public static void open File Intent ( Context context , File open File ) {", "if ( context != null && open File . exists ( ) ) {", "try {", "Intent intent = get File Intent ( context , open File ) ;", "context . start Activity ( intent ) ; }", "catch ( Exception e ) {", "Global Utils . log This ( TAG , STR_ , e ) ; } } }"]}
{"ids": "5668", "code": ["public static Plain Text plain ( short text ) {", "return plain ( Integer . to String ( text ) ) ; }"]}
{"ids": "22225", "code": ["private String create Component Changes ( ) {", "String Builder builder = new String Builder ( ) ;", "for ( Service Catalog Diff service Catalog Diff : diff List ) {", "builder . append ( create Api Changes ( service Catalog Diff ) ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "70069", "code": ["public static synchronized void it ( String description , Unsafe Block block ) {", "it ( description , identity ( ) , block ) ; }"]}
{"ids": "78785", "code": ["public static boolean is Writable ( final File file , final boolean make Dirs ) {", "if ( file == null ) {", "Log . e ( File Utils . class , STR_ ) ;", "return false ; }", "final String file Parent Dir = file . get Parent ( ) ;", "if ( ! Text Utils . is Empty ( file Parent Dir ) ) {", "final File file Dir = new File ( file Parent Dir ) ;", "if ( ! file Dir . exists ( ) ) {", "if ( make Dirs ) return make Dirs For File ( file ) ;", "else return false ; } }", "boolean is Writable = true ;", "if ( file . exists ( ) ) is Writable = file . can Write ( ) ;", "else {", "try {", "is Writable = file . create New File ( ) ; }", "catch ( IO Exception e ) { }", "if ( is Writable ) is Writable = file . delete ( ) ; }", "return is Writable ; }"]}
{"ids": "14268", "code": ["private static void create Org Auth Config ( String realm Name ) throws Exception {", "String class Method = STR_ ;", "Organization Config Manager org = new Organization Config Manager ( sso Token , realm Name ) ;", "Service Config org Config = org . get Service Config ( AUTH SERVICE NAME ) ;", "if ( org Config != null ) {", "Map aa = org Config . get Attributes ( ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( class Method + STR_ + realm Name ) ;", "debug . message ( class Method + STR_ + aa ) ; }", "String org Name = realm Name ;", "if ( LDAP Utils . is DN ( realm Name ) ) {", "org Name = LDAP Utils . rdn Value From Dn ( realm Name ) ; }", "String auth Config Name = org Name + STR_ ;", "String admin Auth Config Name = org Name + STR_ ;", "Set auth Config Attr Value = ( Set ) aa . get ( ATTR ORG AUTH MODULE ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( class Method + STR_ + auth Config Attr Value ) ; }", "Set new Val = new Hash Set ( ) ;", "if ( auth Config Attr Value . size ( ) != NUM_ && ! auth Config Attr Value . contains ( auth Config Name ) ) {", "new Val . add ( auth Config Name ) ;", "org Config . replace Attribute Values ( ATTR ORG AUTH MODULE , auth Config Attr Value , new Val ) ; }", "Set admin Config Attr Value = ( Set ) aa . get ( ATTR ADMIN AUTH MODULE ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + admin Config Attr Value ) ; }", "if ( admin Config Attr Value . size ( ) != NUM_ && ! admin Config Attr Value . contains ( admin Auth Config Name ) ) {", "new Val . clear ( ) ;", "new Val . add ( admin Auth Config Name ) ;", "org Config . replace Attribute Values ( ATTR ADMIN AUTH MODULE , admin Config Attr Value , new Val ) ; }", "aa = org Config . get Attributes ( ) ;", "Service Config s = org . get Service Config ( AUTH CONFIG SERVICE ) ;", "Service Config auth Config = s . get Sub Config ( NAMED CONFIG ) ;", "if ( auth Config == null ) {", "s . add Sub Config ( NAMED CONFIG , null , NUM_ , null ) ;", "auth Config = s . get Sub Config ( NAMED CONFIG ) ; }", "Map a Map = new Hash Map ( ) ;", "a Map . put ( ATTR AUTH CONFIG , auth Config Attr Value ) ;", "auth Config . add Sub Config ( auth Config Name , SUB NAMED CONFIG , NUM_ , a Map ) ;", "a Map . clear ( ) ;", "a Map . put ( ATTR AUTH CONFIG , admin Config Attr Value ) ;", "auth Config . add Sub Config ( admin Auth Config Name , SUB NAMED CONFIG , NUM_ , a Map ) ; } }"]}
{"ids": "71839", "code": ["@ Override public int hash Code ( ) {", "return oid . hash Code ( ) ; }"]}
{"ids": "64727", "code": ["protected void find Candidate Crossings ( S 2 Point a , S 2 Point b , List < Integer > candidate Crossings ) {", "Preconditions . check State ( index Computed ) ;", "Array List < S 2 Cell Id > cover = Lists . new Array List ( ) ;", "get Covering ( a , b , false , cover ) ;", "Set < Integer > unique Set = new Hash Set < Integer > ( ) ;", "get Edges In Parent Cells ( cover , unique Set ) ;", "get Edges In Children Cells ( a , b , cover , unique Set ) ;", "candidate Crossings . clear ( ) ;", "candidate Crossings . add All ( unique Set ) ; }"]}
{"ids": "36037", "code": ["public Repository Location ( String repository Name , String [ ] path Components ) throws Malformed Repository Location Exception {", "if ( repository Name == null || repository Name . is Empty ( ) ) {", "throw new Malformed Repository Location Exception ( STR_ ) ; }", "if ( path Components == null ) {", "throw new Malformed Repository Location Exception ( STR_ ) ; }", "for ( String path Comp : path Components ) {", "if ( path Comp == null || path Comp . is Empty ( ) ) {", "throw new Malformed Repository Location Exception ( STR_ ) ; } }", "this . repository Name = repository Name ;", "this . path = path Components ; }"]}
{"ids": "81275", "code": ["protected Java Element Delta create Delta Tree ( I Java Element element , Java Element Delta delta ) {", "Java Element Delta child Delta = delta ;", "Array List ancestors = get Ancestors ( element ) ;", "if ( ancestors == null ) {", "if ( equals And Same Parent ( delta . get Element ( ) , get Element ( ) ) ) {", "this . kind = delta . kind ;", "this . change Flags = delta . change Flags ;", "this . moved To Handle = delta . moved To Handle ;", "this . moved From Handle = delta . moved From Handle ; } }", "else {", "for ( int i = NUM_ , size = ancestors . size ( ) ; i < size ; i ++ ) {", "I Java Element ancestor = ( I Java Element ) ancestors . get ( i ) ;", "Java Element Delta ancestor Delta = new Java Element Delta ( ancestor ) ;", "ancestor Delta . add Affected Child ( child Delta ) ;", "child Delta = ancestor Delta ; } }", "return child Delta ; }"]}
{"ids": "87087", "code": ["public int size ( ) {", "if ( hmap == null ) {", "return NUM_ ; }", "return hmap . size ( ) ; }"]}
{"ids": "83381", "code": ["public boolean coordinate In Zone ( Id < Activity Facility > zone ID , Coord coordinate ) {", "Point point = MGC . xy 2 Point ( coordinate . get X ( ) , coordinate . get Y ( ) ) ;", "return point In Zone ( zone ID , point ) ; }"]}
{"ids": "12725", "code": ["public Xwaves Labelfile Reader ( Reader reader ) throws IO Exception {", "this . reader = new Buffered Reader ( reader ) ;", "parse Labels ( ) ;", "reader . close ( ) ; }"]}
{"ids": "79964", "code": ["public static double parse Double Default ( String s , double def ) {", "if ( s == null ) {", "return def ; }", "try {", "return Double . parse Double ( s ) ; }", "catch ( Number Format Exception e ) {", "return def ; } }"]}
{"ids": "24115", "code": ["public boolean put Profile ( Profile profile ) {", "return put Profile ( profile , false ) ; }"]}
{"ids": "44336", "code": ["public void print ( char c ) {", "writer . print ( c ) ; }"]}
{"ids": "69708", "code": ["public void init Block Views ( ) {", "if ( m Workspace View != null ) {", "List < Block > root Blocks = m Workspace . get Root Blocks ( ) ;", "Connection Manager conn Manager = m Workspace . get Connection Manager ( ) ;", "for ( int i = NUM_ ; i < root Blocks . size ( ) ; i ++ ) {", "Block Group bg = m View Factory . build Block Group Tree ( root Blocks . get ( i ) , conn Manager , m Touch Handler ) ;", "m Workspace View . add View ( bg ) ; } } }"]}
{"ids": "13811", "code": ["protected void clear All Trails ( SSO Token ID token ID ) {", "boolean removed = false ;", "String key = token ID . to String ( ) ;", "synchronized ( map Token I Ds ) {", "removed = ( map Token I Ds . remove ( key ) != null ) ; } }"]}
{"ids": "45805", "code": ["void scramble ( ) {", "initial Size = get Size ( ) ;", "int a [ ] = new int [ initial Size . height / NUM_ ] ;", "double f = initial Size . width / ( double ) a . length ;", "for ( int i = a . length ; -- i >= NUM_ ; ) {", "a [ i ] = ( int ) ( i * f ) ; }", "for ( int i = a . length ; -- i >= NUM_ ; ) {", "int j = ( int ) ( i * Math . random ( ) ) ;", "int t = a [ i ] ;", "a [ i ] = a [ j ] ;", "a [ j ] = t ; }", "arr = a ; }"]}
{"ids": "47787", "code": ["private static int convert SRG Bto Linear RGB ( int color ) {", "float input , output ;", "input = color / NUM_ ;", "if ( input <= NUM_ ) {", "output = input / NUM_ ; }", "else {", "output = ( float ) Math . pow ( ( input + NUM_ ) / NUM_ , NUM_ ) ; }", "return Math . round ( output * NUM_ ) ; }"]}
{"ids": "86602", "code": ["public void record Beginning ( ) {", "final String msg = STR_ + m Module Name + STR_ + m Run Id ;", "m Usage Messages . add ( msg ) ;", "Diagnostic . developer Log ( msg ) ;", "m Client . record Beginning ( m Module Name , m Run Id ) ; }"]}
{"ids": "71121", "code": ["public void add Split Edges ( List edge List ) {", "add Endpoints ( ) ;", "Iterator it = iterator ( ) ;", "Edge Intersection ei Prev = ( Edge Intersection ) it . next ( ) ;", "while ( it . has Next ( ) ) {", "Edge Intersection ei = ( Edge Intersection ) it . next ( ) ;", "Edge new Edge = create Split Edge ( ei Prev , ei ) ;", "edge List . add ( new Edge ) ;", "ei Prev = ei ; } }"]}
{"ids": "1840", "code": ["public Mem Based Cache ( int max Cache Size In Bytes ) {", "m Max Cache Size In Bytes = max Cache Size In Bytes ;", "m Data Entries = new Linked Hash Map < String , Cache Header > ( NUM_ , NUM_ , true ) ; }"]}
{"ids": "34629", "code": ["public void update Max Text Widths ( float required Width , float match Contents Width ) {", "m Max Required Width = Math . max ( m Max Required Width , required Width ) ;", "m Max Match Contents Width = Math . max ( m Max Match Contents Width , match Contents Width ) ; }"]}
{"ids": "53054", "code": ["public void enable Overview ( boolean b ) {", "if ( overview Item != null ) {", "overview Item . set Enabled ( b ) ; } }"]}
{"ids": "77524", "code": ["public Page Of Collections fetch Page ( Page Of Collections page , Solr Zk Client zk Client ) throws Keeper Exception , Interrupted Exception {", "List < String > children = get Collections ( zk Client ) ;", "page . selected = children ;", "if ( page . start == NUM_ && page . rows == - NUM_ && page . filter == null && children . size ( ) > NUM_ ) {", "page . rows = NUM_ ;", "page . start = NUM_ ; }", "if ( page . filter Type == Filter Type . name && page . filter != null ) children = page . apply Name Filter ( children ) ;", "if ( page . filter Type != Filter Type . status ) page . select Page ( children ) ;", "return page ; }"]}
{"ids": "81120", "code": ["private void stop ( Http Servlet Request request , Http Servlet Response response ) throws IO Exception {", "Print Writer out = response . get Writer ( ) ;", "String label = request . get Parameter ( STR_ ) ;", "Monitor mon = remove Mon ( label , null , DEFAULT UNITS ) ;", "if ( mon == null ) {", "out . println ( ERROR + STR_ ) ; }", "else {", "mon . stop ( ) ;", "out . println ( OK + STR_ + mon ) ; } }"]}
{"ids": "67779", "code": ["public static String normalize Url ( String request Url ) throws O Auth Exception {", "if ( ( request Url == null ) || ( request Url . length ( ) == NUM_ ) ) {", "throw new O Auth Exception ( STR_ ) ; }", "URI uri ;", "try {", "uri = new URI ( request Url ) ; }", "catch ( URI Syntax Exception e ) {", "throw new O Auth Exception ( e ) ; }", "String authority = uri . get Authority ( ) ;", "String scheme = uri . get Scheme ( ) ;", "if ( authority == null || scheme == null ) {", "throw new O Auth Exception ( STR_ ) ; }", "authority = authority . to Lower Case ( ) ;", "scheme = scheme . to Lower Case ( ) ;", "if ( ( scheme . equals ( STR_ ) && uri . get Port ( ) == NUM_ ) || ( scheme . equals ( STR_ ) && uri . get Port ( ) == NUM_ ) ) {", "int index = authority . last Index Of ( STR_ ) ;", "if ( index >= NUM_ ) {", "authority = authority . substring ( NUM_ , index ) ; } }", "return scheme + STR_ + authority + uri . get Raw Path ( ) ; }"]}
{"ids": "84181", "code": ["public void invoke ( Input Stream is , Output Stream os , Serializer Factory serializer Factory ) throws Exception {", "boolean is Debug = false ;", "if ( is Debug Invoke ( ) ) {", "is Debug = true ;", "Print Writer dbg = create Debug Print Writer ( ) ;", "Hessian Debug Input Stream d Is = new Hessian Debug Input Stream ( is , dbg ) ;", "d Is . start Top 2 ( ) ;", "is = d Is ;", "Hessian Debug Output Stream d Os = new Hessian Debug Output Stream ( os , dbg ) ;", "d Os . start Top 2 ( ) ;", "os = d Os ; }", "Hessian Input Factory . Header Type header = input Factory . read Header ( is ) ;", "Abstract Hessian Input in ;", "Abstract Hessian Output out ;", "switch ( header ) {", "case CALL 1 REPLY 1 :", "in = hessian Factory . create Hessian Input ( is ) ;", "out = hessian Factory . create Hessian Output ( os ) ;", "break ;", "case CALL 1 REPLY 2 :", "in = hessian Factory . create Hessian Input ( is ) ;", "out = hessian Factory . create Hessian 2 Output ( os ) ;", "break ;", "case HESSIAN 2 :", "in = hessian Factory . create Hessian 2 Input ( is ) ;", "in . read Call ( ) ;", "out = hessian Factory . create Hessian 2 Output ( os ) ;", "break ;", "default :", "throw new Illegal State Exception ( header + STR_ ) ; }", "if ( serializer Factory != null ) {", "in . set Serializer Factory ( serializer Factory ) ;", "out . set Serializer Factory ( serializer Factory ) ; }", "try {", "invoke ( service , in , out ) ; }", "finally {", "in . close ( ) ;", "out . close ( ) ;", "if ( is Debug ) os . close ( ) ; } }"]}
{"ids": "30438", "code": ["private void commit Local Transaction ( ) throws Commit Failed Exception {", "if ( tx == null ) {", "return ; }", "if ( logger . is Loggable ( Level . FINEST ) ) {", "logger . log ( Level . FINEST , STR_ + tx ) ; }", "try {", "tx . commit ( ) ; }", "catch ( Exception e ) {", "if ( logger . is Loggable ( Level . SEVERE ) ) {", "logger . log ( Level . SEVERE , STR_ + tx , e ) ; }", "throw new Commit Failed Exception ( e ) ; } }"]}
{"ids": "14338", "code": ["public static Entry add Object Class ( Entry entry ) {", "Attribute attribute = entry . get Attribute ( Core Token Constants . OBJECT CLASS ) ;", "if ( attribute == null ) {", "entry . add Attribute ( Core Token Constants . OBJECT CLASS , Core Token Constants . FR CORE TOKEN ) ; }", "return entry ; }"]}
{"ids": "30274", "code": ["@ Suppress Warnings ( STR_ ) public List < Boundary > populate Area ( final Long ward Id ) {", "Hierarchy Type h Type = heirarchy Type Service . get Hierarchy Type By Name ( hierarchy Type Name ) ; ;", "List < Boundary > area List = new Linked List < Boundary > ( ) ;", "final Boundary Type child Boundary Type = boundary Type Service . get Boundary Type By Name And Hierarchy Type ( STR_ , h Type ) ;", "final Boundary parent Boundary = boundary Service . get Boundary By Id ( ward Id ) ;", "area List = new Linked List ( cross Heirarchy Service . get Cross Hierarchy Childrens ( parent Boundary , child Boundary Type ) ) ;", "LOGGER . info ( STR_ + area List . to String ( ) ) ;", "return area List ; }"]}
{"ids": "67838", "code": ["private static String read Name ( Data Input Stream dis , byte data [ ] ) throws IO Exception {", "int c = dis . read Unsigned Byte ( ) ;", "if ( ( c & NUM_ ) == NUM_ ) {", "c = ( ( c & NUM_ ) << NUM_ ) + dis . read Unsigned Byte ( ) ;", "Hash Set < Integer > jumps = new Hash Set < Integer > ( ) ;", "jumps . add ( c ) ;", "return read Name ( data , c , jumps ) ; }", "if ( c == NUM_ ) {", "return STR_ ; }", "byte b [ ] = new byte [ c ] ;", "dis . read Fully ( b ) ;", "String s = IDN . to Unicode ( new String ( b ) ) ;", "String t = read Name ( dis , data ) ;", "if ( t . length ( ) > NUM_ ) {", "s = s + STR_ + t ; }", "return s ; }"]}
{"ids": "1725", "code": ["public Simple String concat ( final char c ) {", "byte [ ] bytes = new byte [ data . length + NUM_ ] ;", "System . arraycopy ( data , NUM_ , bytes , NUM_ , data . length ) ;", "bytes [ data . length ] = ( byte ) ( c & NUM_ ) ;", "bytes [ data . length + NUM_ ] = ( byte ) ( c > > NUM_ & NUM_ ) ;", "return new Simple String ( bytes ) ; }"]}
{"ids": "12699", "code": ["public void deep Fill ( Mary Node spec Tree ) {", "tree = spec Tree ;", "number Of Leaves = NUM_ ;", "sort Node ( NUM_ , tree ) ; }"]}
{"ids": "22915", "code": ["public int node Count ( ) {", "return nodes == null ? NUM_ : nodes . size ( ) ; }"]}
{"ids": "71342", "code": ["public void add To Global Blacklist ( String host ) {", "add To Global Blacklist ( host , System . current Time Millis ( ) + this . global Blacklist Timeout ) ; }"]}
{"ids": "49937", "code": ["public boolean add Node ( Lop node ) {", "if ( nodes . contains ( node ) ) return false ;", "nodes . add ( node ) ;", "return true ; }"]}
{"ids": "47067", "code": ["private void write Object ( java . io . Object Output Stream s ) throws java . io . IO Exception {", "s . default Write Object ( ) ;", "for ( Node < K , V > n = find First ( ) ; n != null ; n = n . next ) {", "V v = n . get Valid Value ( ) ;", "if ( v != null ) {", "s . write Object ( n . key ) ;", "s . write Object ( v ) ; } }", "s . write Object ( null ) ; }"]}
{"ids": "75808", "code": ["public static final double sigma ( double a ) {", "return NUM_ / ( NUM_ + Math . exp ( - a ) ) ; }"]}
{"ids": "53939", "code": ["public void insert Or Refresh ( final K Bucket Entry new Entry ) {", "if ( new Entry == null ) return ;", "List < K Bucket Entry > entries Ref = entries ;", "for ( K Bucket Entry existing : entries Ref ) {", "if ( existing . equals ( new Entry ) ) {", "existing . merge In Timestamps ( new Entry ) ;", "return ; }", "if ( existing . match I Por ID ( new Entry ) ) {", "DHT . log Info ( STR_ + new Entry + STR_ + existing + STR_ ) ;", "return ; } }", "if ( new Entry . verified Reachable ( ) ) {", "if ( entries Ref . size ( ) < DHT Constants . MAX ENTRIES PER BUCKET ) {", "modify Main Bucket ( null , new Entry ) ;", "return ; }", "if ( replace Bad Entry ( new Entry ) ) return ;", "K Bucket Entry youngest = entries Ref . get ( entries Ref . size ( ) - NUM_ ) ;", "if ( youngest . get Creation Time ( ) > new Entry . get Creation Time ( ) || new Entry . get RTT ( ) * NUM_ < youngest . get RTT ( ) ) {", "modify Main Bucket ( youngest , new Entry ) ;", "insert In Replacement Bucket ( youngest ) ;", "return ; } }", "insert In Replacement Bucket ( new Entry ) ; }"]}
{"ids": "44135", "code": ["public void translate ( double x , double y ) {", "current Transform . translate ( x , y ) ;", "try {", "write Transform ( new Affine Transform ( NUM_ , NUM_ , NUM_ , NUM_ , x , y ) ) ; }", "catch ( IO Exception e ) {", "handle Exception ( e ) ; } }"]}
{"ids": "21985", "code": ["public static boolean is Supported Add RP Protection Virtual Pool Change ( Volume volume , Virtual Pool current Vpool , Virtual Pool new Vpool , Db Client db Client , String Buffer not Supp Reason Buff ) {", "s logger . info ( String . format ( STR_ , current Vpool . get Label ( ) , new Vpool . get Label ( ) ) ) ;", "if ( is Same Virtual Pool ( current Vpool , new Vpool , not Supp Reason Buff ) ) {", "return false ; }", "if ( volume . check For Rp ( ) || Virtual Pool . v Pool Specifies Protection ( current Vpool ) ) {", "not Supp Reason Buff . append ( STR_ ) ;", "return false ; }", "if ( ! Virtual Pool . v Pool Specifies High Availability ( current Vpool ) && Virtual Pool . v Pool Specifies RPV Plex ( new Vpool ) ) {", "not Supp Reason Buff . append ( STR_ ) ;", "return false ; }", "if ( Virtual Pool . v Pool Specifies High Availability ( current Vpool ) && ! Virtual Pool . v Pool Specifies High Availability Distributed ( current Vpool ) && Virtual Pool . v Pool Specifies Metro Point ( new Vpool ) ) {", "not Supp Reason Buff . append ( STR_ + STR_ ) ;", "return false ; }", "String [ ] include = new String [ ] { TYPE , VARRAYS , REF VPOOL , MIRROR VPOOL , FAST EXPANSION , ACLS , INACTIVE , PROTOCOLS , PROVISIONING TYPE , USE MATCHED POOLS , ARRAY INFO , DRIVE TYPE , AUTO TIER POLICY NAME , HOST IO LIMIT IOPS , HOST IO LIMIT BANDWIDTH , VMAX COMPRESSION ENABLED , IS THIN VOLUME PRE ALLOCATION ENABLED , ASSIGNED STORAGE POOLS } ;", "Map < String , Change > changes = analyze Changes ( current Vpool , new Vpool , include , null , null ) ;", "if ( ! changes . is Empty ( ) ) {", "not Supp Reason Buff . append ( STR_ ) ;", "fill In Not Supported Reasons ( changes , not Supp Reason Buff ) ;", "return false ; }", "include = new String [ ] { PROTECTION VARRAY SETTINGS } ;", "changes = analyze Changes ( current Vpool , new Vpool , include , null , null ) ;", "if ( changes . is Empty ( ) ) {", "not Supp Reason Buff . append ( STR_ ) ;", "fill In Not Supported Reasons ( changes , not Supp Reason Buff ) ;", "return false ; }", "if ( Virtual Pool . v Pool Specifies High Availability ( current Vpool ) && ( Virtual Pool . v Pool Specifies RPV Plex ( new Vpool ) || Virtual Pool . v Pool Specifies Metro Point ( new Vpool ) ) ) {", "Virtual Pool Change Operation Enum op = vplex Common Checks ( volume , current Vpool , new Vpool , db Client , not Supp Reason Buff , include ) ;", "if ( op == null || ! op . equals ( Virtual Pool Change Operation Enum . RP PROTECTED ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "11133", "code": ["private void write Object ( Object Output Stream oos ) throws IO Exception {", "oos . default Write Object ( ) ;", "boolean write Font = ( f != OM Text . DEFAULT FONT ) ;", "oos . write Boolean ( write Font ) ;", "if ( write Font ) {", "oos . write Object ( f . get Name ( ) ) ;", "oos . write Int ( f . get Size ( ) ) ;", "oos . write Int ( f . get Style ( ) ) ; }", "write Stroke ( oos , stroke , OM Graphic . BASIC STROKE ) ;", "write Stroke ( oos , text Matte Stroke , DEFAULT TEXT MATTE STROKE ) ; }"]}
{"ids": "42694", "code": ["private static void write Spaces ( Writer out , int amt ) throws IO Exception {", "while ( amt > NUM_ ) {", "out . write ( STR_ ) ;", "amt -- ; } }"]}
{"ids": "53436", "code": ["public static double relative Overlap ( Spatial Comparable box 1 , Spatial Comparable box 2 ) {", "final int dim = assert Same Dimensionality ( box 1 , box 2 ) ;", "double overlap = NUM_ ;", "double vol 1 = NUM_ ;", "double vol 2 = NUM_ ;", "for ( int i = NUM_ ; i < dim ; i ++ ) {", "final double box 1 min = box 1 . get Min ( i ) ;", "final double box 1 max = box 1 . get Max ( i ) ;", "final double box 2 min = box 2 . get Min ( i ) ;", "final double box 2 max = box 2 . get Max ( i ) ;", "final double omax = Math . min ( box 1 max , box 2 max ) ;", "final double omin = Math . max ( box 1 min , box 2 min ) ;", "if ( omax <= omin ) {", "return NUM_ ; }", "overlap *= omax - omin ;", "vol 1 *= box 1 max - box 1 min ;", "vol 2 *= box 2 max - box 2 min ; }", "return overlap / ( vol 1 + vol 2 ) ; }"]}
{"ids": "40276", "code": ["protected void handle Auto Draw ( ) {", "if ( is Tool Item Selected ( Tool Bar Item Key . AUTO DRAW ) ) {", "on Auto Draw ( ) ; } }"]}
{"ids": "65252", "code": ["private Method Descriptor [ ] sort Method Descriptors ( Method Descriptor [ ] method Descriptors ) {", "return method Sorter != null ? method Sorter . sort Method Descriptors ( method Descriptors ) : method Descriptors ; }"]}
{"ids": "11048", "code": ["public static Properties parse Property List ( String list ) throws Property String Format Exception {", "return parse Property List ( list , property Separators , key Value Separators ) ; }"]}
{"ids": "65181", "code": ["public boolean package Has Annotation ( Annotation annotation ) {", "try {", "Package pkg = type . get Package ( ) ;", "if ( pkg == null ) {", "return false ; }", "String class Name = pkg . get Name ( ) + STR_ ;", "Class < ? > package Type = Class . for Name ( class Name ) ;", "Annotation Accessor accessor = new Annotation Accessor ( supported Annotations , package Type , ignore Annotation Failure ) ;", "return accessor . type Has ( annotation ) ; }", "catch ( Class Not Found Exception e ) {", "return false ; } }"]}
{"ids": "37101", "code": ["private String build Tool Tip ( final C Tagged Graph Nodes Container Node node ) {", "final String Builder tooltip = new String Builder ( STR_ ) ;", "boolean first = true ;", "for ( final Navi Node graphnode : node . get Graph Nodes ( ) ) {", "if ( ! first ) {", "tooltip . append ( STR_ ) ; }", "tooltip . append ( C Nodes Display String . get Display String ( graphnode ) ) ;", "first = false ; }", "return tooltip + STR_ ; }"]}
{"ids": "39908", "code": ["public void make Graph ( File link Graph ) throws Exception {", "String temp 212 ;", "int row Num = NUM_ ;", "Buffered Reader br = new Buffered Reader ( new Input Stream Reader ( new File Input Stream ( link Graph ) ) ) ;", "while ( ( temp 212 = br . read Line ( ) ) != null ) {", "String [ ] strs = temp 212 . split ( STR_ ) ;", "for ( int i = NUM_ ; i < strs . length ; i ++ ) {", "graph [ row Num ] [ i ] = Double . parse Double ( strs [ i ] ) ; }", "row Num ++ ; }", "for ( int i = NUM_ ; i < data Num ; i ++ ) {", "for ( int j = NUM_ ; j < dimension ; j ++ ) {", "W [ i ] [ j ] = r . next Double ( ) ;", "H [ j ] [ i ] = r . next Double ( ) ; } }", "for ( int i = NUM_ ; i < data Num ; i ++ ) {", "double sum W = NUM_ ;", "double sum H = NUM_ ;", "for ( int j = NUM_ ; j < dimension ; j ++ ) {", "sum W += W [ i ] [ j ] * W [ i ] [ j ] ;", "sum H += H [ j ] [ i ] * H [ j ] [ i ] ; }", "sum W = Math . sqrt ( sum W ) ;", "sum H = Math . sqrt ( sum H ) ;", "for ( int j = NUM_ ; j < dimension ; j ++ ) {", "W [ i ] [ j ] /= sum W ;", "H [ j ] [ i ] /= sum H ; } }", "train W ( ) ;", "init = false ; }"]}
{"ids": "8558", "code": ["public boolean remove On Item Click Listener ( On Item Click Listener item Click Listener ) {", "return click Listeners . remove ( item Click Listener ) ; }"]}
{"ids": "86681", "code": ["public static String pad Right ( final String s , final int length ) {", "final int pad = length - s . length ( ) ;", "return pad > NUM_ ? s + get Space String ( pad ) : s ; }"]}
{"ids": "71843", "code": ["private static String [ ] collation Matching Rule Names ( final List < String > locale Names , final int num Suffix , final String symbolic Suffix ) {", "final List < String > names = new Array List < > ( ) ;", "for ( String locale Name : locale Names ) {", "if ( symbolic Suffix . is Empty ( ) ) {", "names . add ( locale Name ) ; }", "else {", "names . add ( locale Name + STR_ + num Suffix ) ;", "names . add ( locale Name + STR_ + symbolic Suffix ) ; } }", "return names . to Array ( new String [ names . size ( ) ] ) ; }"]}
{"ids": "47513", "code": ["private int [ ] create Epoch Months ( int epoch Day , int min Year , int max Year , Map < Integer , int [ ] > years ) {", "int num Months = ( max Year - min Year + NUM_ ) * NUM_ + NUM_ ;", "int epoch Month = NUM_ ;", "int [ ] epoch Months = new int [ num Months ] ;", "min Month Length = Integer . MAX VALUE ;", "max Month Length = Integer . MIN VALUE ;", "for ( int year = min Year ; year <= max Year ; year ++ ) {", "int [ ] months = years . get ( year ) ;", "for ( int month = NUM_ ; month < NUM_ ; month ++ ) {", "int length = months [ month ] ;", "epoch Months [ epoch Month ++ ] = epoch Day ;", "if ( length < NUM_ || length > NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + min Year ) ; }", "epoch Day += length ;", "min Month Length = Math . min ( min Month Length , length ) ;", "max Month Length = Math . max ( max Month Length , length ) ; } }", "epoch Months [ epoch Month ++ ] = epoch Day ;", "if ( epoch Month != epoch Months . length ) {", "throw new Illegal State Exception ( STR_ + epoch Month + STR_ + epoch Months . length ) ; }", "return epoch Months ; }"]}
{"ids": "20951", "code": ["private static String descriptor To Internal Name ( String descriptor ) {", "switch ( descriptor . char At ( NUM_ ) ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "return descriptor ;", "case STR_ :", "return class Descriptor To Internal Name ( descriptor ) ;", "default :", "throw new Illegal Argument Exception ( STR_ + descriptor ) ; } }"]}
{"ids": "72923", "code": ["public Subscription register ( Object m Bean , M Bean Description description ) {", "return register ( m Bean , description . get M Bean Name ( get Next Id ( ) ) ) ; }"]}
{"ids": "9454", "code": ["public void register Manufacturer Specific Builder ( int company Id , AD Manufacturer Specific Builder builder ) {", "if ( company Id < NUM_ || NUM_ < company Id ) {", "String message = String . format ( STR_ , company Id ) ;", "throw new Illegal Argument Exception ( message ) ; }", "if ( builder == null ) {", "return ; }", "Integer key = Integer . value Of ( company Id ) ;", "List < AD Manufacturer Specific Builder > builders = m MS Builders . get ( key ) ;", "if ( builders == null ) {", "builders = new Array List < AD Manufacturer Specific Builder > ( ) ;", "m MS Builders . put ( key , builders ) ; }", "builders . add ( NUM_ , builder ) ; }"]}
{"ids": "36982", "code": ["public static Reil Graph copy Reil Code ( final Window parent , final I Navi Code Node node ) {", "final Reil Translator < I Navi Instruction > translator = new Reil Translator < I Navi Instruction > ( ) ;", "try {", "return translator . translate ( new Standard Environment ( ) , node ) ; }", "catch ( final Internal Translation Exception e ) {", "C Utility Functions . log Exception ( e ) ;", "final String message = STR_ + STR_ ;", "final String description = C Utility Functions . create Description ( String . format ( STR_ , node . get Address ( ) ) , new String [ ] { STR_ } , new String [ ] { STR_ + STR_ } ) ;", "Navi Error Dialog . show ( parent , message , description , e ) ; }", "return null ; }"]}
{"ids": "20728", "code": ["private static float compute Similarity ( Lane a , Lane b ) {", "int same = NUM_ ;", "int diff = NUM_ ;", "int first Coordinate = Math . max ( a . get First Non Gap Position ( ) , b . get First Non Gap Position ( ) ) ;", "int last Coordinate = Math . min ( a . get Last Non Gap Position ( ) , b . get Last Non Gap Position ( ) ) ;", "for ( int i = first Coordinate ; i <= last Coordinate ; i ++ ) {", "char cha = a . char At ( i ) ;", "char chb = b . char At ( i ) ;", "if ( Character . is Letter ( cha ) && Character . is Letter ( chb ) ) {", "if ( Character . to Lower Case ( cha ) == Character . to Lower Case ( ( chb ) ) ) same ++ ;", "else diff ++ ; } }", "return Math . max ( same > NUM_ ? NUM_ : NUM_ , same - NUM_ * diff ) ; }"]}
{"ids": "24325", "code": ["private void force Overflow ( ) {", "force Overflow ( ) ; }"]}
{"ids": "5252", "code": ["public static Ejb Jar Xml Version value Of ( Document Type doc Type ) throws Null Pointer Exception {", "return value Of ( doc Type . get Public Id ( ) ) ; }"]}
{"ids": "62653", "code": ["public static List < Double > merge Coords ( List < Double > x , List < Double > y ) {", "if ( x . size ( ) != y . size ( ) ) throw new Illegal Argument Exception ( STR_ ) ;", "List < Double > ret = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < x . size ( ) ; i ++ ) {", "ret . add ( x . get ( i ) ) ;", "ret . add ( y . get ( i ) ) ; }", "return ret ; }"]}
{"ids": "86328", "code": ["private void build Description Panel ( final Composite parent ) {", "description Label = new Styled Text ( parent , SWT . READ ONLY ) ;", "description Label . set Text ( STR_ ) ;", "description Label . set Layout Data ( new Grid Data ( Grid Data . FILL , Grid Data . FILL , true , true , NUM_ , NUM_ ) ) ; }"]}
{"ids": "10769", "code": ["public Http Method Client ( ) {", "this ( NUM_ , NUM_ , NUM_ * NUM_ ) ; }"]}
{"ids": "16036", "code": ["public ISO 9796 d 2 PSS Signer ( Asymmetric Block Cipher cipher , Digest digest , int salt Length , boolean implicit ) {", "this . cipher = cipher ;", "this . digest = digest ;", "this . h Len = digest . get Digest Size ( ) ;", "this . salt Length = salt Length ;", "if ( implicit ) {", "trailer = TRAILER IMPLICIT ; }", "else {", "Integer trailer Obj = ( Integer ) trailer Map . get ( digest . get Algorithm Name ( ) ) ;", "if ( trailer Obj != null ) {", "trailer = trailer Obj . int Value ( ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ ) ; } } }"]}
{"ids": "62310", "code": ["String decode Text Value ( byte [ ] data ) throws IO Exception {", "boolean is Compressed = ( ( data . length > NUM_ ) && ( data [ NUM_ ] == TEXT COMPRESSION HEADER [ NUM_ ] ) && ( data [ NUM_ ] == TEXT COMPRESSION HEADER [ NUM_ ] ) ) ;", "if ( is Compressed ) {", "String Builder text Buf = new String Builder ( data . length ) ;", "int data Start = TEXT COMPRESSION HEADER . length ;", "int data End = data Start ;", "boolean in Compressed Mode = true ;", "while ( data End < data . length ) {", "if ( data [ data End ] == ( byte ) NUM_ ) {", "decode Text Segment ( data , data Start , data End , in Compressed Mode , text Buf ) ;", "in Compressed Mode = ! in Compressed Mode ;", "++ data End ;", "data Start = data End ; }", "else {", "++ data End ; } }", "decode Text Segment ( data , data Start , data End , in Compressed Mode , text Buf ) ;", "return text Buf . to String ( ) ; }", "return decode Uncompressed Text ( data , get Charset ( ) ) ; }"]}
{"ids": "14287", "code": ["private < S , T > Set < T > extract ( final Collection < S > collection , final Extractor < S , T > extractor ) {", "final Set < T > values = new Hash Set < T > ( collection . size ( ) ) ;", "for ( final S instance : collection ) {", "values . add ( extractor . get Value ( instance ) ) ; }", "return values ; }"]}
{"ids": "78093", "code": ["public static boolean is ZTE ( ) {", "return s Build Model . starts With ( STR_ ) ; }"]}
{"ids": "4832", "code": ["static public String normalize To Encoding ( String orig String , Charset encoding ) {", "String norm String = orig String ;", "Charset Encoder encoder = encoding . new Encoder ( ) ;", "if ( ! encoder . can Encode ( orig String ) ) {", "final int length = orig String . length ( ) ;", "char [ ] norm Seq = new char [ ( orig String . length ( ) ) ] ;", "int char Num = NUM_ ;", "for ( int offset = NUM_ ; offset < length ; ) {", "Pair < Character , Integer > replacement = normalize Codepoint ( orig String , encoding , offset ) ;", "Character replaced Char = replacement . get First ( ) ;", "int codepoint = replacement . get Second ( ) ;", "if ( null != replaced Char ) {", "norm Seq [ char Num ] = replaced Char ;", "char Num ++ ; }", "offset += Character . char Count ( codepoint ) ; }", "norm String = new String ( norm Seq ) ; }", "return norm String ; }"]}
{"ids": "38154", "code": ["public int size ( ) {", "return m sets . size ( ) ; }"]}
{"ids": "78383", "code": ["public static float approximate Length ( float control Points [ ] [ ] ) {", "float length = NUM_ ;", "for ( int i = NUM_ ; i < control Points . length - NUM_ ; i ++ ) {", "float x Dif = control Points [ i + NUM_ ] [ NUM_ ] - control Points [ i ] [ NUM_ ] ;", "float y Dif = control Points [ i + NUM_ ] [ NUM_ ] - control Points [ i ] [ NUM_ ] ;", "float z Dif = control Points [ i + NUM_ ] [ NUM_ ] - control Points [ i ] [ NUM_ ] ;", "length += Math . sqrt ( x Dif * x Dif + y Dif * y Dif + z Dif * z Dif ) ; }", "return length ; }"]}
{"ids": "7255", "code": ["public Update Clause add Assignment ( Expression expression ) {", "assignments . add ( new Assignment ( expression ) ) ;", "return this ; }"]}
{"ids": "52431", "code": ["public void has Network Connection ( Network Request Check Listener listener ) {", "if ( has Network Connection ( ) ) {", "test Network Request ( listener ) ; }", "else {", "listener . on No Response ( ) ; } }"]}
{"ids": "69828", "code": ["public void assign Thread For Subscriber ( @ Non Null Object subscriber ) {", "Looper looper = Looper . my Looper ( ) ;", "if ( looper != null ) {", "m Subscribers Default Threads . put ( new Identity Weak Reference Key < > ( subscriber ) , looper != Looper . get Main Looper ( ) ? new Handler ( looper ) : m Ui Thread Handler ) ; }", "else {", "m Subscribers Default Threads . remove ( new Identity Weak Reference Key < > ( subscriber ) ) ; } }"]}
{"ids": "14649", "code": ["private void validate Dynamic Attribute ( Set dynamic Set ) throws Policy Exception {", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + STR_ + dynamic Set ) ; }", "response Attr Names = new Hash Set ( ) ;", "repo Attr Names = new Hash Set ( ) ;", "response Attr To Repo Attr = new Hash Map ( ) ;", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + STR_ + valid Dynamic Attr Names ) ; }", "Set dynamic Attrs = ( ( Set ) properties . get ( DYNAMIC ATTRIBUTE ) ) ;", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + STR_ + dynamic Attrs ) ; }", "Iterator dynamic Attrs Iter = dynamic Attrs . iterator ( ) ;", "while ( dynamic Attrs Iter . has Next ( ) ) {", "String attr = ( String ) dynamic Attrs Iter . next ( ) ;", "if ( ! valid Dynamic Attr Names . contains ( attr ) ) {", "if ( DEBUG . warning Enabled ( ) ) {", "DEBUG . warning ( STR_ + STR_ + STR_ + attr ) ; }", "continue ; }", "String [ ] attr Names = parse Dynamic Attr Name ( attr ) ;", "String response Attr Name = attr Names [ NUM_ ] ;", "String repo Attr Name = attr Names [ NUM_ ] ;", "response Attr Names . add ( response Attr Name ) ;", "repo Attr Names . add ( repo Attr Name ) ;", "add To Response Attr To Repo Attr Map ( response Attr Name , repo Attr Name ) ;", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + STR_ + STR_ + response Attr Name + STR_ + repo Attr Name ) ; } }", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + STR_ + response Attr To Repo Attr ) ;", "DEBUG . message ( STR_ + STR_ ) ; } }"]}
{"ids": "74156", "code": ["public synchronized void init ( ) {", "Array List < Warrant > temp List = new Array List < Warrant > ( ) ;", "List < String > system Name List = manager . get System Name List ( ) ;", "Iterator < String > iter = system Name List . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Warrant w = manager . get By System Name ( iter . next ( ) ) ;", "if ( ! war List . contains ( w ) ) {", "w . add Property Change Listener ( this ) ; }", "else {", "war List . remove ( w ) ; }", "temp List . add ( w ) ; }", "for ( int i = NUM_ ; i < war List . size ( ) ; i ++ ) {", "Warrant w = war List . get ( i ) ;", "if ( ! war NX . contains ( w ) ) {", "w . remove Property Change Listener ( this ) ; } }", "for ( int i = NUM_ ; i < war NX . size ( ) ; i ++ ) {", "temp List . add ( war NX . get ( i ) ) ; }", "war List = temp List ; }"]}
{"ids": "82134", "code": ["public void add Command ( Command cmd , int offset ) {", "menu Bar . add Command ( cmd , offset ) ; }"]}
{"ids": "17348", "code": ["private static void draw Shape ( GL 2 gl , Shape s ) {", "Path Iterator it = s . get Path Iterator ( new Affine Transform ( ) , shape Flatness ) ;", "float [ ] last Move To = new float [ NUM_ ] ;", "float [ ] f = new float [ NUM_ ] ;", "while ( ! it . is Done ( ) ) {", "int res = it . current Segment ( f ) ;", "switch ( res ) {", "case Path Iterator . SEG CLOSE :", "GL Panel . V ( gl , last Move To [ NUM_ ] , last Move To [ NUM_ ] ) ;", "break ;", "case Path Iterator . SEG MOVETO :", "GL Panel . V ( gl , f [ NUM_ ] , f [ NUM_ ] ) ;", "System . arraycopy ( f , NUM_ , last Move To , NUM_ , NUM_ ) ;", "break ;", "case Path Iterator . SEG LINETO :", "GL Panel . V ( gl , f [ NUM_ ] , f [ NUM_ ] ) ;", "break ;", "case Path Iterator . SEG CUBICTO :", "Cubic Curve 2 D c = new Cubic Curve 2 D . Float ( last Move To [ NUM_ ] , last Move To [ NUM_ ] , f [ NUM_ ] , f [ NUM_ ] , f [ NUM_ ] , f [ NUM_ ] , f [ NUM_ ] , f [ NUM_ ] ) ;", "draw Shape ( gl , c ) ;", "break ;", "default :", "throw new Error ( STR_ + STR_ + res ) ; }", "it . next ( ) ; } }"]}
{"ids": "1809", "code": ["@ Override protected void tear Down ( ) throws Naming Exception , JMS Exception {", "Naming Enumeration < Binding > iter = context . list Bindings ( STR_ ) ;", "while ( iter . has More ( ) ) {", "Binding binding = iter . next ( ) ;", "Object conn Factory = binding . get Object ( ) ;", "if ( conn Factory instanceof Active MQ Connection Factory ) { } } }"]}
{"ids": "80592", "code": ["protected List < URI > load ( final Input Stream in ) throws SAX Exception , IO Exception {", "SAX Parser sax Parser ;", "final SAX Parser Factory factory = SAX Parser Factory . new Instance ( ) ;", "try {", "sax Parser = factory . new SAX Parser ( ) ; }", "catch ( final Parser Configuration Exception ex ) {", "throw new SAX Exception ( ex ) ; }", "groups = new Linked List < URI > ( ) ;", "sax Parser . parse ( in , this ) ;", "return groups ; }"]}
{"ids": "67706", "code": ["@ Deprecated public static String Collection 2 String ( Collection < ? > in , String separator ) {", "if ( in == null ) {", "return null ; }", "return Iterator 2 String ( in . iterator ( ) , separator ) ; }"]}
{"ids": "29654", "code": ["public static byte [ ] decode Base 64 ( String base 64 Str ) {", "return Datatype Converter . parse Base 64 Binary ( base 64 Str ) ; }"]}
{"ids": "40275", "code": ["protected void remove All Premove Drops ( ) {", "for ( Premove Info info : premoves . to Array ( new Premove Info [ NUM_ ] ) ) {", "if ( info . is Premove Drop ) {", "premoves . remove ( info ) ; } } }"]}
{"ids": "66246", "code": ["public static String say Number ( String Buffer append To , double number ) throws Illegal Argument Exception {", "if ( number == Double . MIN VALUE ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( number < NUM_ ) {", "append To . append ( STR_ ) ; }", "double abs = Math . abs ( number ) ;", "if ( abs < POWER THREE ) {", "say Simple Number ( append To , ( int ) abs ) ; }", "else if ( abs < NUM_ ) {", "int thousand = ( int ) ( abs % POWER THREE ) ;", "append To . append ( STR_ ) ;", "say Simple Number ( append To , thousand ) ; }", "else if ( abs < POWER SIX ) {", "int thousand = ( int ) ( abs % POWER SIX / POWER THREE ) ;", "say Simple Number ( append To , thousand ) ;", "append To . append ( STR_ ) ;", "double remainder = abs - thousand * POWER THREE ;", "if ( remainder > NUM_ ) {", "append To . append ( STR_ ) ;", "say Number ( append To , remainder ) ; } }", "else if ( abs < POWER NINE ) {", "int million = ( int ) ( abs % POWER NINE / POWER SIX ) ;", "say Simple Number ( append To , million ) ;", "append To . append ( STR_ ) ;", "double remainder = abs - million * POWER SIX ;", "if ( remainder > NUM_ ) {", "append To . append ( STR_ ) ;", "say Number ( append To , remainder ) ; } }", "else if ( abs < POWER TWELVE ) {", "int billion = ( int ) ( abs % POWER TWELVE / POWER NINE ) ;", "say Simple Number ( append To , billion ) ;", "append To . append ( STR_ ) ;", "double remainder = abs - billion * POWER NINE ;", "if ( remainder > NUM_ ) {", "append To . append ( STR_ ) ;", "say Number ( append To , remainder ) ; } }", "else if ( abs < POWER FIFTEEN ) {", "int trillion = ( int ) ( abs % POWER FIFTEEN / POWER TWELVE ) ;", "say Simple Number ( append To , trillion ) ;", "append To . append ( STR_ ) ;", "double remainder = abs - trillion * POWER TWELVE ;", "if ( remainder > NUM_ ) {", "append To . append ( STR_ ) ;", "say Number ( append To , remainder ) ; } }", "else {", "append To . append ( STR_ ) ; }", "return append To . to String ( ) ; }"]}
{"ids": "74159", "code": ["public void stop ( ) {", "throttle . set Speed Setting ( - NUM_ ) ;", "throttle . set Speed Setting ( NUM_ ) ;", "stop Label . set Icon ( stop Icon ) ;", "stop Label . set Icon Text Gap ( gap ) ;", "pack ( ) ; }"]}
{"ids": "84599", "code": ["public void make Dirty ( ) {", "beta Changed = true ;", "new Mode = true ;", "precision Changed = true ;", "regression Interface . make Dirty ( instance ) ; }"]}
{"ids": "82831", "code": ["private List < String > split ( String prefix ) {", "List < String > parts = new Array List < String > ( ) ;", "int bracket Count = NUM_ ;", "boolean inquotes = false ;", "int last Index = NUM_ ;", "for ( int i = NUM_ ; i < prefix . length ( ) ; i ++ ) {", "char c = prefix . char At ( i ) ;", "if ( c == STR_ ) {", "bracket Count ++ ;", "continue ; }", "else if ( c == STR_ ) {", "inquotes = ! inquotes ;", "continue ; }", "else if ( c == STR_ ) {", "bracket Count -- ;", "if ( bracket Count < NUM_ ) {", "throw new Runtime Exception ( STR_ + prefix ) ; }", "continue ; }", "if ( c == STR_ && ! inquotes && bracket Count == NUM_ ) {", "parts . add ( prefix . substring ( last Index , i ) ) ;", "last Index = i + NUM_ ; } }", "if ( last Index < prefix . length ( ) - NUM_ && ! inquotes && bracket Count == NUM_ ) {", "parts . add ( prefix . substring ( last Index ) ) ; }", "return parts ; }"]}
{"ids": "69136", "code": ["public static long lower Hex To Unsigned Long ( String lower Hex ) {", "int length = lower Hex . length ( ) ;", "if ( length < NUM_ || length > NUM_ ) throw isnt Lower Hex Long ( lower Hex ) ;", "int i = length > NUM_ ? length - NUM_ : NUM_ ;", "long result = NUM_ ;", "for ( ; i < length ; i ++ ) {", "char c = lower Hex . char At ( i ) ;", "result <<= NUM_ ;", "if ( c >= STR_ && c <= STR_ ) {", "result |= c - STR_ ; }", "else if ( c >= STR_ && c <= STR_ ) {", "result |= c - STR_ + NUM_ ; }", "else {", "throw isnt Lower Hex Long ( lower Hex ) ; } }", "return result ; }"]}
{"ids": "27949", "code": ["public static double sample Skew Standard Error ( int size ) {", "int n = size ;", "return Math . sqrt ( NUM_ * n * ( n - NUM_ ) / ( ( n - NUM_ ) * ( n + NUM_ ) * ( n + NUM_ ) ) ) ; }"]}
{"ids": "9670", "code": ["public void load ( List < Policy Qualifier Info > policy Qualifier Info ) {", "Policy Qualifier Info [ ] policy Qualifier Info Array = policy Qualifier Info . to Array ( new Policy Qualifier Info [ policy Qualifier Info . size ( ) ] ) ;", "Arrays . sort ( policy Qualifier Info Array , new Policy Qualifier Info Comparator ( ) ) ;", "data = new Object [ policy Qualifier Info Array . length ] [ NUM_ ] ;", "int i = NUM_ ;", "for ( Policy Qualifier Info policy Qual Info : policy Qualifier Info Array ) {", "data [ i ] [ NUM_ ] = policy Qual Info ;", "i ++ ; }", "fire Table Data Changed ( ) ; }"]}
{"ids": "13623", "code": ["public void run Script ( Reader reader ) throws IO Exception , SQL Exception {", "try {", "boolean original Auto Commit = connection . get Auto Commit ( ) ;", "try {", "if ( original Auto Commit != this . auto Commit ) {", "connection . set Auto Commit ( this . auto Commit ) ; }", "run Script ( connection , reader ) ; }", "finally {", "connection . set Auto Commit ( original Auto Commit ) ; } }", "catch ( IO Exception | SQL Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( STR_ + e , e ) ; } }"]}
{"ids": "84738", "code": ["public double do Operation ( ) throws Operator Failed Exception {", "double logq ;", "final Node Ref root = tree . get Root ( ) ;", "final double old Tree Height = tree . get Node Height ( root ) ;", "Node Ref i ;", "do {", "i = tree . get Node ( Math Utils . next Int ( tree . get Node Count ( ) ) ) ; }", "while ( root == i ) ;", "final Node Ref i P = tree . get Parent ( i ) ;", "final Node Ref Ci P = get Other Child ( tree , i P , i ) ;", "final Node Ref Pi P = tree . get Parent ( i P ) ;", "final double delta = get Delta ( ) ;", "final double old Height = tree . get Node Height ( i P ) ;", "final double new Height = old Height + delta ;", "if ( delta > NUM_ ) {", "if ( Pi P != null && tree . get Node Height ( Pi P ) < new Height ) {", "Node Ref new Parent = Pi P ;", "Node Ref new Child = i P ;", "while ( tree . get Node Height ( new Parent ) < new Height ) {", "new Child = new Parent ;", "new Parent = tree . get Parent ( new Parent ) ;", "if ( new Parent == null ) break ; }", "tree . begin Tree Edit ( ) ;", "if ( tree . is Root ( new Child ) ) {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( Pi P , i P ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( Pi P , Ci P ) ;", "tree . set Root ( i P ) ;", "if ( tree . has Node Traits ( ) ) {", "tree . swap All Traits ( new Child , i P ) ; }", "if ( tree . has Rates ( ) ) {", "final double root Node Rate = tree . get Node Rate ( new Child ) ;", "tree . set Node Rate ( new Child , tree . get Node Rate ( i P ) ) ;", "tree . set Node Rate ( i P , root Node Rate ) ; } }", "else {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( Pi P , i P ) ;", "tree . remove Child ( new Parent , new Child ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( Pi P , Ci P ) ;", "tree . add Child ( new Parent , i P ) ; }", "tree . set Node Height ( i P , new Height ) ;", "tree . end Tree Edit ( ) ;", "final int possible Sources = intersecting Edges ( tree , new Child , old Height , null ) ;", "logq = - Math . log ( possible Sources ) ; }", "else {", "tree . set Node Height ( i P , new Height ) ;", "logq = NUM_ ; } }", "else {", "if ( tree . get Node Height ( i ) > new Height ) {", "return Double . NEGATIVE INFINITY ; }", "if ( tree . get Node Height ( Ci P ) > new Height ) {", "List < Node Ref > new Children = new Array List < Node Ref > ( ) ;", "final int possible Destinations = intersecting Edges ( tree , Ci P , new Height , new Children ) ;", "if ( new Children . size ( ) == NUM_ ) {", "return Double . NEGATIVE INFINITY ; }", "final int child Index = Math Utils . next Int ( new Children . size ( ) ) ;", "Node Ref new Child = new Children . get ( child Index ) ;", "Node Ref new Parent = tree . get Parent ( new Child ) ;", "tree . begin Tree Edit ( ) ;", "if ( tree . is Root ( i P ) ) {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( new Parent , new Child ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( new Parent , i P ) ;", "tree . set Root ( Ci P ) ;", "if ( tree . has Node Traits ( ) ) {", "tree . swap All Traits ( i P , Ci P ) ; }", "if ( tree . has Rates ( ) ) {", "final double root Node Rate = tree . get Node Rate ( i P ) ;", "tree . set Node Rate ( i P , tree . get Node Rate ( Ci P ) ) ;", "tree . set Node Rate ( Ci P , root Node Rate ) ; } }", "else {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( Pi P , i P ) ;", "tree . remove Child ( new Parent , new Child ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( Pi P , Ci P ) ;", "tree . add Child ( new Parent , i P ) ; }", "tree . set Node Height ( i P , new Height ) ;", "tree . end Tree Edit ( ) ;", "logq = Math . log ( possible Destinations ) ; }", "else {", "tree . set Node Height ( i P , new Height ) ;", "logq = NUM_ ; } }", "if ( swap In Random Rate ) {", "final Node Ref j = tree . get Node ( Math Utils . next Int ( tree . get Node Count ( ) ) ) ;", "if ( j != i ) {", "final double tmp = tree . get Node Rate ( i ) ;", "tree . set Node Rate ( i , tree . get Node Rate ( j ) ) ;", "tree . set Node Rate ( j , tmp ) ; } }", "if ( swap In Random Trait ) {", "final Node Ref j = tree . get Node ( Math Utils . next Int ( tree . get Node Count ( ) ) ) ;", "if ( j != i ) {", "tree . swap All Traits ( i , j ) ; } }", "if ( logq == Double . NEGATIVE INFINITY ) throw new Operator Failed Exception ( STR_ ) ;", "if ( scaled Dirichlet Branches ) {", "if ( old Tree Height != tree . get Node Height ( tree . get Root ( ) ) ) throw new Operator Failed Exception ( STR_ ) ; }", "return logq ; }"]}
{"ids": "46067", "code": ["Marker Segment find Marker Segment ( Class cls , boolean first ) {", "if ( first ) {", "Iterator iter = marker Sequence . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Marker Segment seg = ( Marker Segment ) iter . next ( ) ;", "if ( cls . is Instance ( seg ) ) {", "return seg ; } } }", "else {", "List Iterator iter = marker Sequence . list Iterator ( marker Sequence . size ( ) ) ;", "while ( iter . has Previous ( ) ) {", "Marker Segment seg = ( Marker Segment ) iter . previous ( ) ;", "if ( cls . is Instance ( seg ) ) {", "return seg ; } } }", "return null ; }"]}
{"ids": "56609", "code": ["default Filterable < T > remove All ( final T ... values ) {", "return remove All ( Stream . of ( values ) ) ; }"]}
{"ids": "28860", "code": ["public void reset ( boolean clear ) {", "got Version = false ;", "got Header Length = false ;", "got Header = false ;", "got Body = false ;", "got Body Boundary = false ;", "header Length = NUM_ ;", "body Length = NUM_ ;", "body Bytes Received = NUM_ ;", "if ( clear ) {", "buffer Offset = NUM_ ;", "buffer . clear ( ) ;", "body File = null ;", "if ( body Stream != null ) {", "try {", "body Stream . close ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "body Stream = null ; } } }"]}
{"ids": "70064", "code": ["private void save And Close ( boolean save ) {", "content . set Enabled ( false ) ;", "if ( timer != null ) {", "timer . cancel ( ) ;", "timer = null ; }", "if ( timer Next Sync != null ) {", "timer Next Sync . cancel ( ) ;", "timer Next Sync = null ; }", "if ( save ) {", "Log . d ( LOG TAG , STR_ ) ;", "save Data ( null ) ; }", "else {", "Log . d ( LOG TAG , STR_ ) ; }", "Intent data = new Intent ( ) ;", "data . set Action ( Intent . ACTION VIEW ) ;", "data . put Extra ( PARAM NOTE , note ) ;", "data . put Extra ( PARAM NOTE POSITION , note Position ) ;", "set Result ( RESULT OK , data ) ;", "finish ( ) ; }"]}
{"ids": "33460", "code": ["public static Uri add Message ( Content Resolver resolver , String address , String body , String subject , Long date , boolean delivery Report , long thread Id ) {", "final Uri CONTENT URI = Uri . parse ( STR_ ) ;", "return add Message To Uri ( resolver , CONTENT URI , address , body , subject , date , true , delivery Report , thread Id ) ; }"]}
{"ids": "29985", "code": ["public static final double calc Nice Number ( final double RANGE , final boolean ROUND ) {", "double nice Fraction ;", "double exponent = Math . floor ( Math . log 10 ( RANGE ) ) ;", "double fraction = RANGE / Math . pow ( NUM_ , exponent ) ;", "if ( ROUND ) {", "if ( Double . compare ( fraction , NUM_ ) < NUM_ ) {", "nice Fraction = NUM_ ; }", "else if ( Double . compare ( fraction , NUM_ ) < NUM_ ) {", "nice Fraction = NUM_ ; }", "else if ( Double . compare ( fraction , NUM_ ) < NUM_ ) {", "nice Fraction = NUM_ ; }", "else {", "nice Fraction = NUM_ ; } }", "else {", "if ( Double . compare ( fraction , NUM_ ) <= NUM_ ) {", "nice Fraction = NUM_ ; }", "else if ( Double . compare ( fraction , NUM_ ) <= NUM_ ) {", "nice Fraction = NUM_ ; }", "else if ( Double . compare ( fraction , NUM_ ) <= NUM_ ) {", "nice Fraction = NUM_ ; }", "else {", "nice Fraction = NUM_ ; } }", "return nice Fraction * Math . pow ( NUM_ , exponent ) ; }"]}
{"ids": "26579", "code": ["public void send Metric ( final String name , final double value ) {", "logger . debug ( String . format ( STR_ , name , value ) ) ;", "if ( telemetry Client != null ) {", "telemetry Client . track Metric ( name , value ) ; } }"]}
{"ids": "54059", "code": ["default Document put All ( Iterable < Field > fields , Predicate < Char Sequence > acceptable Field Names ) {", "for ( Field field : fields ) {", "if ( acceptable Field Names . test ( field . get Name ( ) ) ) {", "set Value ( field . get Name ( ) , field . get Value ( ) ) ; } }", "return this ; }"]}
{"ids": "15627", "code": ["public static URL find Resource Base ( String base Resource , Class Loader loader ) {", "URL url = loader . get Resource ( base Resource ) ;", "return find Resource Base ( url , base Resource ) ; }"]}
{"ids": "7278", "code": ["public String to EPL ( EP Statement Formatter formatter ) {", "String Writer writer = new String Writer ( ) ;", "to EPL ( formatter , writer ) ;", "return writer . to String ( ) ; }"]}
{"ids": "46969", "code": ["public boolean is Specified ( int index ) {", "if ( ( index < NUM_ ) || ( index >= m Length ) ) {", "throw new Array Index Out Of Bounds Exception ( STR_ ) ; }", "String str = m Items [ ( index << NUM_ ) + NUM_ ] ;", "return ( ( str != null ) ? ( str . char At ( NUM_ ) == STR_ ) : true ) ; }"]}
{"ids": "23582", "code": ["public Stat Archive Reader ( String archive Name ) throws IO Exception {", "this ( new File [ ] { new File ( archive Name ) } , null , false ) ; }"]}
{"ids": "68272", "code": ["private static void init Adb Socket Addr ( ) {", "try {", "s Adb Server Port = get Adb Server Port ( ) ;", "Inet Address host Addr = Inet Address . get By Name ( DEFAULT ADB HOST ) ;", "s Socket Addr = new Inet Socket Address ( host Addr , s Adb Server Port ) ; }", "catch ( Unknown Host Exception e ) { } }"]}
{"ids": "55127", "code": ["private boolean matches Any Tag ( String tag Name ) {", "return tag Names . contains ( tag Name ) ; }"]}
{"ids": "62894", "code": ["default void shutdown ( ) {", "Platform . exit ( ) ; }"]}
{"ids": "46345", "code": ["public boolean is Expanded ( int row ) {", "Tree UI tree = get UI ( ) ;", "if ( tree != null ) {", "Tree Path path = tree . get Path For Row ( this , row ) ;", "if ( path != null ) {", "Boolean value = expanded State . get ( path ) ;", "return ( value != null && value . boolean Value ( ) ) ; } }", "return false ; }"]}
{"ids": "24580", "code": ["private static int label End ( String s ) {", "int colon Index = s . index Of ( STR_ ) ;", "int semicolon Index = s . index Of ( STR_ ) ;", "if ( ( semicolon Index == - NUM_ ) || ( colon Index < semicolon Index ) ) {", "return colon Index ; }", "else {", "return - NUM_ ; } }"]}
{"ids": "85879", "code": ["public Http Method Info ( Method method , Object handler , Object [ ] args , Multivalued Map < String , Object > form Parameters , Response responder ) {", "this . method = method ;", "this . handler = handler ;", "this . args = Arrays . copy Of ( args , args . length ) ;", "this . form Parameters = form Parameters ;", "this . responder = responder ; }"]}
{"ids": "38369", "code": ["private void draw Text ( int x 1 , int y 1 , int s , boolean e or n , Graphics g ) {", "Color old Color = g . get Color ( ) ;", "g . set Paint Mode ( ) ;", "if ( m Font Color == null ) {", "g . set Color ( Color . black ) ; }", "else {", "g . set Color ( m Font Color ) ; }", "String st ;", "if ( e or n ) {", "Edge e = m edges [ s ] . m edge ;", "for ( int noa = NUM_ ; ( st = e . get Line ( noa ) ) != null ; noa ++ ) {", "g . draw String ( st , ( m edges [ s ] . m width - m font Size . string Width ( st ) ) / NUM_ + x 1 , y 1 + ( noa + NUM_ ) * m font Size . get Height ( ) ) ; } }", "else {", "Node e = m nodes [ s ] . m node ;", "for ( int noa = NUM_ ; ( st = e . get Line ( noa ) ) != null ; noa ++ ) {", "g . draw String ( st , ( m nodes [ s ] . m width - m font Size . string Width ( st ) ) / NUM_ + x 1 , y 1 + ( noa + NUM_ ) * m font Size . get Height ( ) ) ; } }", "g . set Color ( old Color ) ; }"]}
{"ids": "55490", "code": ["public void update ( List < Race > races ) {", "if ( current Race == null ) {", "return ; }", "if ( races . contains ( current Race ) ) {", "set Race ( races . get ( races . index Of ( current Race ) ) ) ; } }"]}
{"ids": "65226", "code": ["public boolean required ( ) {", "return parameter Metadata . contains ( Metadata . REQUIRED ) ; }"]}
{"ids": "73105", "code": ["protected void send Data To Receiver ( Result Receiver receiver , Intent original Intent , Serializable data ) {", "if ( receiver != null && data != null ) {", "Bundle bundle = new Bundle ( ) ;", "bundle . put Parcelable ( Service Receiver . EXTRA ORIGINAL INTENT , original Intent ) ;", "bundle . put Serializable ( Service Receiver . EXTRA DATA , data ) ;", "receiver . send ( Service Receiver . STATUS DATA , bundle ) ; } }"]}
{"ids": "20925", "code": ["private static Object match Or Replace ( Context cx , Scriptable scope , Scriptable this Obj , Object [ ] args , Reg Exp Impl re Impl , Glob Data data , boolean force Flat ) {", "Native Reg Exp re ;", "String str = Script Runtime . to String ( this Obj ) ;", "data . str = str ;", "Scriptable top Scope = Scriptable Object . get Top Level Scope ( scope ) ;", "if ( args . length == NUM_ ) {", "Object compiled = Native Reg Exp . compile RE ( cx , STR_ , STR_ , false ) ;", "re = new Native Reg Exp ( top Scope , compiled ) ; }", "else if ( args [ NUM_ ] instanceof Native Reg Exp ) {", "re = ( Native Reg Exp ) args [ NUM_ ] ; }", "else {", "String src = Script Runtime . to String ( args [ NUM_ ] ) ;", "String opt ;", "if ( data . optarg < args . length ) {", "args [ NUM_ ] = src ;", "opt = Script Runtime . to String ( args [ data . optarg ] ) ; }", "else {", "opt = null ; }", "Object compiled = Native Reg Exp . compile RE ( cx , src , opt , force Flat ) ;", "re = new Native Reg Exp ( top Scope , compiled ) ; }", "data . global = ( re . get Flags ( ) & Native Reg Exp . JSREG GLOB ) != NUM_ ;", "int [ ] indexp = { NUM_ } ;", "Object result = null ;", "if ( data . mode == RA SEARCH ) {", "result = re . execute Reg Exp ( cx , scope , re Impl , str , indexp , Native Reg Exp . TEST ) ;", "if ( result != null && result . equals ( Boolean . TRUE ) ) result = Integer . value Of ( re Impl . left Context . length ) ;", "else result = Integer . value Of ( - NUM_ ) ; }", "else if ( data . global ) {", "re . last Index = NUM_ ;", "for ( int count = NUM_ ; indexp [ NUM_ ] <= str . length ( ) ; count ++ ) {", "result = re . execute Reg Exp ( cx , scope , re Impl , str , indexp , Native Reg Exp . TEST ) ;", "if ( result == null || ! result . equals ( Boolean . TRUE ) ) break ;", "if ( data . mode == RA MATCH ) {", "match glob ( data , cx , scope , count , re Impl ) ; }", "else {", "if ( data . mode != RA REPLACE ) Kit . code Bug ( ) ;", "Sub String last Match = re Impl . last Match ;", "int left Index = data . left Index ;", "int leftlen = last Match . index - left Index ;", "data . left Index = last Match . index + last Match . length ;", "replace glob ( data , cx , scope , re Impl , left Index , leftlen ) ; }", "if ( re Impl . last Match . length == NUM_ ) {", "if ( indexp [ NUM_ ] == str . length ( ) ) break ;", "indexp [ NUM_ ] ++ ; } } }", "else {", "result = re . execute Reg Exp ( cx , scope , re Impl , str , indexp , ( ( data . mode == RA REPLACE ) ? Native Reg Exp . TEST : Native Reg Exp . MATCH ) ) ; }", "return result ; }"]}
{"ids": "43475", "code": ["public void remove Biome Type ( Biome Dictionary . Type type ) {", "Array List < Biome Gen Base > entry List = new Array List < Biome Gen Base > ( ) ;", "entry List . add All ( Arrays . as List ( Biome Dictionary . get Biomes For Type ( type ) ) ) ;", "for ( Biome Gen Base biome : entry List ) {", "Iterator < Biome Entry > iterator = allowed Biomes . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "if ( Biome Dictionary . are Biomes Equivalent ( iterator . next ( ) . biome , biome ) ) iterator . remove ( ) ; } } }"]}
{"ids": "46588", "code": ["static Size Requirements calculate Tiled Requirements ( Layout Iterator iter , Size Requirements r ) {", "long minimum = NUM_ ;", "long maximum = NUM_ ;", "long preferred = NUM_ ;", "int last Margin = NUM_ ;", "int total Spacing = NUM_ ;", "int n = iter . get Count ( ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "iter . set Index ( i ) ;", "int margin 0 = last Margin ;", "int margin 1 = ( int ) iter . get Leading Collapse Span ( ) ;", "total Spacing += Math . max ( margin 0 , margin 1 ) ;", "preferred += ( int ) iter . get Preferred Span ( NUM_ ) ;", "minimum += iter . get Minimum Span ( NUM_ ) ;", "maximum += iter . get Maximum Span ( NUM_ ) ;", "last Margin = ( int ) iter . get Trailing Collapse Span ( ) ; }", "total Spacing += last Margin ;", "total Spacing += NUM_ * iter . get Border Width ( ) ;", "minimum += total Spacing ;", "preferred += total Spacing ;", "maximum += total Spacing ;", "if ( r == null ) {", "r = new Size Requirements ( ) ; }", "r . minimum = ( minimum > Integer . MAX VALUE ) ? Integer . MAX VALUE : ( int ) minimum ;", "r . preferred = ( preferred > Integer . MAX VALUE ) ? Integer . MAX VALUE : ( int ) preferred ;", "r . maximum = ( maximum > Integer . MAX VALUE ) ? Integer . MAX VALUE : ( int ) maximum ;", "return r ; }"]}
{"ids": "71980", "code": ["private static LDAP Filter create OR Filter ( Filter Set filter Set ) throws LDAP Exception , IO Exception {", "List < JAXB Element < ? > > list = filter Set . get Filter Group ( ) ;", "Array List < Raw Filter > filters = new Array List < > ( list . size ( ) ) ;", "for ( JAXB Element < ? > filter : list ) {", "filters . add ( create Filter ( filter ) ) ; }", "return LDAP Filter . create OR Filter ( filters ) ; }"]}
{"ids": "83499", "code": ["private void send Blob ( String index , byte [ ] blob ) {", "send Instruction ( new Guacamole Instruction ( STR_ , index , Datatype Converter . print Base 64 Binary ( blob ) ) ) ; }"]}
{"ids": "52491", "code": ["public static Set < Interval > merge Interval To Set ( Set < Interval > intervals , Interval interval To Merge ) {", "Linked Hash Set < Interval > copy Of Original Set = new Linked Hash Set < > ( intervals ) ;", "copy Of Original Set . add ( interval To Merge ) ;", "return merge Interval Set ( copy Of Original Set ) ; }"]}
{"ids": "22762", "code": ["public void add Node ( Topological Node node ) {", "node List . add ( node ) ; }"]}
{"ids": "32967", "code": ["public void print Text ( String text ) {", "view . print ( text , text . ends With ( STR_ ) ) ;", "for ( Action Delegate action Delegate : action Delegates ) {", "action Delegate . on Console Output ( this ) ; } }"]}
{"ids": "36256", "code": ["@ Override public void trim ( ) {", "if ( counter < x . length ) {", "int [ ] y = new int [ counter ] ;", "System . arraycopy ( x , NUM_ , y , NUM_ , counter ) ;", "x = y ;", "resize Values ( counter ) ; } }"]}
{"ids": "2275", "code": ["void assert Threads Stay Alive ( long millis , Thread ... threads ) {", "try {", "delay ( millis ) ;", "for ( Thread thread : threads ) assert True ( thread . is Alive ( ) ) ; }", "catch ( Interrupted Exception fail ) {", "thread Fail ( STR_ ) ; } }"]}
{"ids": "29757", "code": ["public Abstract Worker Manager ( String id ) {", "id = id ;", "status = new Worker Manager Status ( ) ;", "set Execution Mode ( EXECUTION MODE . NON SERIAL ) ;", "setup Executor ( ) ; }"]}
{"ids": "12922", "code": ["@ Override public void apply Inline ( double [ ] data , int pos , int len ) {", "int i ;", "double [ ] data Out = new double [ len ] ;", "if ( len > real . length ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "int middle = len / NUM_ + len % NUM_ ;", "System . arraycopy ( data , NUM_ , data Out , NUM_ , len ) ;", "System . arraycopy ( data Out , pos + middle , real , NUM_ , len - middle ) ;", "System . arraycopy ( data Out , pos , real , real . length - middle , middle ) ;", "if ( real . length > len ) Arrays . fill ( real , len - middle , real . length - middle , NUM_ ) ;", "Arrays . fill ( imag , NUM_ , imag . length , NUM_ ) ;", "FFT . transform ( real , imag , false ) ;", "process ( real , imag ) ;", "FFT . transform ( real , imag , true ) ;", "System . arraycopy ( real , NUM_ , data Out , pos + middle , len - middle ) ;", "System . arraycopy ( real , real . length - middle , data Out , pos , middle ) ;", "double orig Avg Energy = Signal Proc Utils . get Average Sample Energy ( data , len ) ;", "for ( i = NUM_ ; i < len ; i ++ ) data [ i ] = amount * data Out [ i ] + one Minus Amount * data [ i ] ;", "double new Avg Energy = Signal Proc Utils . get Average Sample Energy ( data , len ) ;", "double scale = orig Avg Energy / new Avg Energy ;", "for ( i = NUM_ ; i < len ; i ++ ) data [ i ] *= NUM_ * scale ; }"]}
{"ids": "4940", "code": ["public final boolean insert via ( Brd Via Info p via info , Pla Point Int p location , Net Nos List p net no arr , int p trace clearance class no , int [ ] p trace pen halfwidth arr , int p max recursion depth , int p max via recursion depth , int p pull tight accuracy , int p pull tight time limit ) {", "shove fail clear ( ) ;", "changed area clear ( ) ;", "boolean r ok = shove via algo . shove via insert ( p via info , p location , p net no arr , p trace clearance class no , p trace pen halfwidth arr , p max recursion depth , p max via recursion depth ) ;", "if ( ! r ok ) return false ;", "Net Nos List opt net no arr = p max recursion depth <= NUM_ ? p net no arr : Net Nos List . EMPTY ;", "Time Limit Stoppable t limit = new Time Limit Stoppable ( s PREVENT ENDLESS LOOP ) ;", "changed area optimize ( opt net no arr , p pull tight accuracy , null , t limit , null ) ;", "return true ; }"]}
{"ids": "14451", "code": ["public static byte [ ] to Byte Array ( String str ) {", "int len = str . length ( ) ;", "String Tokenizer st = new String Tokenizer ( str , STR_ ) ;", "String [ ] new Str Array = new String [ st . count Tokens ( ) ] ;", "int j = NUM_ ;", "while ( st . has More Tokens ( ) ) {", "new Str Array [ j ] = st . next Token ( ) ;", "j ++ ; }", "byte [ ] ret = new byte [ new Str Array . length ] ;", "int tmp ;", "for ( int i = NUM_ ; i < new Str Array . length ; i ++ ) {", "tmp = Integer . parse Int ( new Str Array [ i ] , NUM_ ) ;", "ret [ i ] = ( byte ) ( tmp - NUM_ ) ; }", "return ret ; }"]}
{"ids": "49156", "code": ["int max Length ( ) {", "Font Metrics fm = get Font Metrics ( get Font ( ) ) ;", "int m = NUM_ ;", "int end = items . size ( ) ;", "for ( int i = NUM_ ; i < end ; i ++ ) {", "int l = fm . string Width ( ( ( String ) items . element At ( i ) ) ) ;", "m = Math . max ( m , l ) ; }", "return m ; }"]}
{"ids": "5037", "code": ["public Pla Point Int round to the left ( Pla Direction p dir ) {", "Pla Point Float dir = p dir . to float ( ) ;", "double rounded x ;", "if ( dir . v y > NUM_ ) {", "rounded x = Math . floor ( v x ) ; }", "else if ( dir . v y < NUM_ ) {", "rounded x = Math . ceil ( v x ) ; }", "else {", "rounded x = Math . round ( v x ) ; }", "double rounded y ;", "if ( dir . v x > NUM_ ) {", "rounded y = Math . ceil ( v y ) ; }", "else if ( dir . v x < NUM_ ) {", "rounded y = Math . floor ( v y ) ; }", "else {", "rounded y = Math . round ( v y ) ; }", "return new Pla Point Int ( rounded x , rounded y ) ; }"]}
{"ids": "11967", "code": ["public static byte [ ] unwrap VCF ( File source File , File tmp File ) throws File Not Found Exception , IO Exception {", "Zip Archive Input Stream in = null ;", "File Output Stream fos = null ;", "String hmac String = null ;", "try {", "in = new Zip Archive Input Stream ( new File Input Stream ( source File ) ) ;", "Archive Entry entry ;", "in . get Next Entry ( ) ;", "fos = new File Output Stream ( tmp File ) ;", "IO Utils . copy ( in , fos ) ;", "entry = in . get Next Entry ( ) ;", "hmac String = entry . get Name ( ) ;", "return Utils . hex To Bytes ( hmac String ) ; }", "catch ( String Index Out Of Bounds Exception e ) {", "logger . error ( STR_ + hmac String + STR_ , e ) ;", "throw e ; }", "catch ( Exception e ) {", "logger . error ( STR_ , e ) ;", "throw e ; }", "finally {", "if ( fos != null ) {", "fos . flush ( ) ;", "fos . close ( ) ; }", "if ( in != null ) {", "in . close ( ) ; } } }"]}
{"ids": "50487", "code": ["public boolean register User ( String username , String password , String uri ) throws Data Access Exception {", "if ( check Username Exists ( username ) ) {", "return false ; }", "store User ( username , password , uri ) ;", "return true ; }"]}
{"ids": "68215", "code": ["public SELECT ( @ Non Null String ... columns ) {", "if ( columns == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( columns . length == NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "String Builder builder = new String Builder ( STR_ ) ;", "for ( int i = NUM_ ; i < columns . length ; i ++ ) {", "builder . append ( columns [ i ] ) ;", "if ( i != ( columns . length - NUM_ ) ) builder . append ( STR_ ) ; }", "sql = builder . to String ( ) ; }"]}
{"ids": "34199", "code": ["public JKS Signature Token ( Input Stream ks Stream , String ks Password ) {", "try {", "key Store = Key Store . get Instance ( Key Store . get Default Type ( ) ) ;", "password = ( ks Password == null ) ? null : ks Password . to Char Array ( ) ;", "key Store . load ( ks Stream , password ) ; }", "catch ( Exception e ) {", "throw new DSS Exception ( e ) ; }", "finally {", "if ( ks Stream != null ) {", "try {", "ks Stream . close ( ) ; }", "catch ( IO Exception e ) {", "logger . error ( e . get Message ( ) , e ) ; } } } }"]}
{"ids": "47850", "code": ["protected void write Location ( String loc ) throws IO Exception {", "had Annotations |= ( loc != null ) ;", "loc Out . write Object ( loc ) ; }"]}
{"ids": "431", "code": ["protected int offset ( int vtable offset ) {", "int vtable = bb pos - bb . get Int ( bb pos ) ;", "return vtable offset < bb . get Short ( vtable ) ? bb . get Short ( vtable + vtable offset ) : NUM_ ; }"]}
{"ids": "21284", "code": ["public static String select Text ( X Path Expression expr , Node context ) {", "try {", "return ( String ) expr . evaluate ( context , X Path Constants . STRING ) ; }", "catch ( X Path Expression Exception e ) {", "throw new Xml Exception ( e ) ; } }"]}
{"ids": "29711", "code": ["public static Http Headers to Armeria ( io . netty . handler . codec . http . Http Headers in Headers ) {", "if ( in Headers . is Empty ( ) ) {", "return Http Headers . EMPTY HEADERS ; }", "final Http Headers out = new Default Http Headers ( true , in Headers . size ( ) ) ;", "to Armeria ( in Headers , out ) ;", "return out ; }"]}
{"ids": "25324", "code": ["public static int calculate RMS Level ( short [ ] audio Data , int numframes ) {", "long l Sum = NUM_ ;", "int numread = NUM_ ;", "for ( short s : audio Data ) {", "l Sum = l Sum + s ;", "numread ++ ;", "if ( numread == numframes ) break ; }", "double d Avg = l Sum / numframes ;", "double sum Mean Square = NUM_ ;", "numread = NUM_ ;", "for ( short an Audio Data : audio Data ) {", "sum Mean Square = sum Mean Square + Math . pow ( an Audio Data - d Avg , NUM_ ) ;", "numread ++ ;", "if ( numread == numframes ) break ; }", "double average Mean Square = sum Mean Square / numframes ;", "return ( int ) ( Math . pow ( average Mean Square , NUM_ ) + NUM_ ) ; }"]}
{"ids": "76386", "code": ["public void bind Key Store ( final Key Store Service key Store Service ) {", "this . key Store = key Store Service ; }"]}
{"ids": "69714", "code": ["protected void draw Connector Centers ( Canvas c ) {", "List < Connection > connections = m Block . get All Connections ( ) ;", "Paint paint = new Paint ( ) ;", "paint . set Style ( Paint . Style . FILL ) ;", "for ( int i = NUM_ ; i < connections . size ( ) ; i ++ ) {", "Connection conn = connections . get ( i ) ;", "if ( conn . in Drag Mode ( ) ) {", "if ( conn . is Connected ( ) ) {", "paint . set Color ( Color . RED ) ; }", "else {", "paint . set Color ( Color . MAGENTA ) ; } }", "else {", "if ( conn . is Connected ( ) ) {", "paint . set Color ( Color . GREEN ) ; }", "else {", "paint . set Color ( Color . CYAN ) ; } }", "m Temp Workspace Point . set ( conn . get Position ( ) . x - m Block . get Position ( ) . x , conn . get Position ( ) . y - m Block . get Position ( ) . y ) ;", "m Helper . workspace To Virtual View Delta ( m Temp Workspace Point , m Temp Connection Position ) ;", "if ( m Helper . use Rtl ( ) ) {", "m Temp Connection Position . x += m Block View Size . x ; }", "c . draw Circle ( m Temp Connection Position . x , m Temp Connection Position . y , NUM_ , paint ) ; } }"]}
{"ids": "29056", "code": ["private static boolean is Merge ( Instruction Handle handle ) {", "if ( handle . has Targeters ( ) ) {", "Instruction Targeter [ ] targeter List = handle . get Targeters ( ) ;", "for ( Instruction Targeter targeter : targeter List ) {", "if ( targeter instanceof Branch Instruction ) {", "return true ; } } }", "return false ; }"]}
{"ids": "22155", "code": ["private synchronized void load Trust Manager ( ) {", "try {", "Trust Manager Factory tmf = Trust Manager Factory . get Instance ( X 509 ALGORITHM ) ;", "tmf . init ( keystore ) ;", "for ( Trust Manager trust Manager : tmf . get Trust Managers ( ) ) {", "if ( trust Manager instanceof X 509 Trust Manager ) {", "default Vi PR Trust Manager = ( X 509 Trust Manager ) trust Manager ;", "log . debug ( STR_ ) ;", "break ; } }", "log . info ( STR_ , default Vi PR Trust Manager . get Accepted Issuers ( ) . length ) ; }", "catch ( General Security Exception e ) {", "log . error ( e . get Message ( ) , e ) ; } }"]}
{"ids": "14484", "code": ["public Thread Pool ( String name , int pool Size ) {", "this . pool Size = pool Size ;", "this . pool Name = name ;", "task List = new Linked List < Runnable > ( ) ;", "threads = new Worker Thread [ pool Size ] ;", "create Threads ( ) ; }"]}
{"ids": "84294", "code": ["public final void add Helper Text Color ( @ Color Int final int color ) {", "if ( ! helper Text Colors . contains ( color ) ) {", "helper Text Colors . add ( color ) ;", "verify Password Strength ( ) ; } }"]}
{"ids": "47866", "code": ["@ Suppress Warnings ( STR_ ) protected Class resolve Class ( Object Stream Class class Desc ) throws IO Exception , Class Not Found Exception {", "String cname = class Desc . get Name ( ) ;", "return Class Finder . resolve Class ( cname , this . loader ) ; }"]}
{"ids": "43891", "code": ["public static int find ( byte [ ] a , int from Index , int to Index , byte [ ] key ) {", "int result = - NUM_ ;", "int sublen = key . length ;", "int maxpos , first , sp = NUM_ ;", "maxpos = Math . min ( to Index , a . length ) - sublen ;", "for ( first = from Index ; sp != sublen && first <= maxpos ; first ++ ) {", "first = find ( a , first , maxpos , key [ NUM_ ] ) ;", "if ( ( first < NUM_ ) || ( first > maxpos ) ) {", "break ; }", "for ( sp = NUM_ ; sp < sublen ; sp ++ ) {", "if ( a [ first + sp ] != key [ sp ] ) {", "sp = sublen ; } } }", "if ( sublen == NUM_ ) {", "result = NUM_ ; }", "else if ( sp == sublen ) {", "result = ( first - NUM_ ) ; }", "return result ; }"]}
{"ids": "17320", "code": ["private void add Synthetic Edge ( Collection < Graph Edge > result , Graph Edge original , Graph Node head , Graph Node tail ) {", "result . add ( new Graph Edge ( head , tail , original . get Relation ( ) ) ) ; }"]}
{"ids": "11080", "code": ["public void add States ( State [ ] s ) {", "for ( int i = NUM_ ; i < s . length ; i ++ ) states . add Element ( s [ i ] ) ; }"]}
{"ids": "75202", "code": ["private synchronized void read Object ( java . io . Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "init ( get Mask ( actions ) ) ; }"]}
{"ids": "49240", "code": ["private static byte [ ] Windows Reg Enum Key Ex 1 ( int h Key , int sub Key Index , int max Key Length ) {", "byte [ ] result = Windows Reg Enum Key Ex ( h Key , sub Key Index , max Key Length ) ;", "if ( result != null ) {", "return result ; }", "else {", "long sleep Time = INIT SLEEP TIME ;", "for ( int i = NUM_ ; i < MAX ATTEMPTS ; i ++ ) {", "try {", "Thread . sleep ( sleep Time ) ; }", "catch ( Interrupted Exception e ) {", "return result ; }", "sleep Time *= NUM_ ;", "result = Windows Reg Enum Key Ex ( h Key , sub Key Index , max Key Length ) ;", "if ( result != null ) {", "return result ; } } }", "return result ; }"]}
{"ids": "138", "code": ["public Tasker add Task ( Task task ) {", "tasks . add ( task ) ;", "last Added Task = task ;", "return this ; }"]}
{"ids": "41051", "code": ["public void sort ( ) {", "throw If Immutable ( ) ;", "if ( ! sorted ) {", "Arrays . sort ( values , NUM_ , size ) ;", "sorted = true ; } }"]}
{"ids": "60395", "code": ["public Default Action Group ( @ Not Null An Action ... actions ) {", "this ( Arrays . as List ( actions ) ) ; }"]}
{"ids": "6552", "code": ["public int add ( T dl , int row ) {", "list . add ( row , dl ) ;", "fire Table Rows Inserted ( row , row ) ;", "return row ; }"]}
{"ids": "469", "code": ["@ Suppress Lint ( STR_ ) @ Override protected void on Measure ( int width Measure Spec , int height Measure Spec ) {", "int width Mode = Measure Spec . get Mode ( width Measure Spec ) ;", "int height Mode = Measure Spec . get Mode ( height Measure Spec ) ;", "int max Width = Measure Spec . get Size ( width Measure Spec ) ;", "int max Height = Measure Spec . get Size ( height Measure Spec ) ;", "if ( width Mode == Measure Spec . UNSPECIFIED ) max Width = Integer . MAX VALUE ;", "if ( height Mode == Measure Spec . UNSPECIFIED ) max Height = Integer . MAX VALUE ;", "int padding Left = get Padding Left ( ) ;", "int padding Top = get Padding Top ( ) ;", "int padding Right = get Padding Right ( ) ;", "int padding Bottom = get Padding Bottom ( ) ;", "int max Right Bound = max Width - padding Right ;", "int max Bottom Bound = max Height - padding Bottom ;", "int left ;", "int top ;", "int right ;", "int bottom ;", "int right Bound = padding Left ;", "int max Right No Padding = right Bound ;", "int bottom Bound ;", "int last Max Bottom = padding Top ;", "int max Bottom = last Max Bottom ;", "int child Width ;", "int child Height ;", "int line Start Index = NUM_ ;", "int line End Index ;", "rect List . clear ( ) ;", "int child Count = get Child Count ( ) ;", "for ( int index = NUM_ ; index < child Count ; index ++ ) {", "final View child = get Child At ( index ) ;", "child . measure ( Measure Spec . UNSPECIFIED , Measure Spec . UNSPECIFIED ) ;", "if ( child . get Visibility ( ) == View . GONE ) continue ;", "final Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "child Width = child . get Measured Width ( ) ;", "child Height = child . get Measured Height ( ) ;", "left = right Bound + lp . left Margin ;", "right = left + child Width ;", "right Bound = right + lp . right Margin ;", "if ( right Bound > max Right Bound ) {", "line End Index = index ;", "adjust Base Line ( max Bottom - last Max Bottom , line Start Index , line End Index ) ;", "if ( max Bottom >= max Bottom Bound ) break ;", "if ( line End Index == line Start Index ) {", "child . measure ( Measure Spec . make Measure Spec ( max Width - padding Left - padding Right - lp . left Margin - lp . right Margin , Measure Spec . AT MOST ) , Measure Spec . UNSPECIFIED ) ;", "child Width = child . get Measured Width ( ) ;", "child Height = child . get Measured Height ( ) ; }", "left = padding Left + lp . left Margin ;", "right = left + child Width ;", "right Bound = right + lp . right Margin ;", "last Max Bottom = max Bottom ;", "top = last Max Bottom + lp . top Margin ;", "bottom = top + child Height ;", "bottom Bound = bottom + lp . bottom Margin ;", "line Start Index = index ; }", "else {", "top = last Max Bottom + lp . top Margin ;", "bottom = top + child Height ;", "bottom Bound = bottom + lp . bottom Margin ; }", "if ( right Bound > max Right No Padding ) max Right No Padding = right Bound ;", "if ( bottom Bound > max Bottom ) max Bottom = bottom Bound ;", "Rect rect = new Rect ( ) ;", "rect . left = left ;", "rect . top = top ;", "rect . right = right ;", "rect . bottom = bottom ;", "rect List . add ( rect ) ; }", "adjust Base Line ( max Bottom - last Max Bottom , line Start Index , rect List . size ( ) ) ;", "int measured Width ;", "int measured Height ;", "if ( width Mode == Measure Spec . EXACTLY ) measured Width = max Width ;", "else measured Width = max Right No Padding + padding Right ;", "if ( height Mode == Measure Spec . EXACTLY ) measured Height = max Height ;", "else {", "measured Height = max Bottom + padding Bottom ;", "if ( height Mode == Measure Spec . AT MOST ) measured Height = measured Height > max Height ? max Height : measured Height ; }", "set Measured Dimension ( measured Width , measured Height ) ; }"]}
{"ids": "971", "code": ["private void ensure Buffer Capacity ( int desired Capacity ) {", "int capacity = pixel Buffer . length ;", "while ( capacity < desired Capacity ) {", "capacity *= NUM_ ; }", "if ( capacity > pixel Buffer . length ) {", "pixel Buffer = new byte [ capacity ] ; } }"]}
{"ids": "56214", "code": ["public static < K , V > Concurrent Map < K , V > new Concurrent Map With Aggressive Concurrency ( ) {", "return new Concurrent Hash Map < > ( NUM_ , NUM_ , aggressive Concurrency Level ) ; }"]}
{"ids": "38842", "code": ["@ Override public boolean connection Allowed ( String event Name ) {", "if ( m listenee != null || ! event Name . equals ( STR_ ) ) {", "return false ; }", "return true ; }"]}
{"ids": "55632", "code": ["protected char skip All Whitespace ( Reader r ) throws IO Exception {", "char c ;", "do {", "c = ( char ) r . read ( ) ; }", "while ( Character . is Whitespace ( c ) && c != ( char ) - NUM_ ) ;", "return c ; }"]}
{"ids": "15391", "code": ["private String resource Id ( ) {", "return sub Schema Path . is Empty ( ) ? null : last Schema Node Name ( ) ; }"]}
{"ids": "48100", "code": ["@ Override public boolean is Initial ( ) {", "return init ; }"]}
{"ids": "8127", "code": ["public static String denormalize ( final Char Sequence self ) {", "if ( line Separator == null ) {", "final String Writer sw = new String Writer ( NUM_ ) ;", "try {", "final Buffered Writer bw = new Buffered Writer ( sw ) ;", "bw . new Line ( ) ;", "bw . flush ( ) ;", "line Separator = sw . to String ( ) ; }", "catch ( IO Exception ioe ) {", "line Separator = STR_ ; } }", "final int len = self . length ( ) ;", "if ( len < NUM_ ) {", "return self . to String ( ) ; }", "final String Builder sb = new String Builder ( ( NUM_ * len ) / NUM_ ) ;", "int i = NUM_ ;", "Char Sequence cs = ( self instanceof G String ) ? self . to String ( ) : self ;", "while ( i < len ) {", "final char ch = cs . char At ( i ++ ) ;", "switch ( ch ) {", "case STR_ :", "sb . append ( line Separator ) ;", "if ( ( i < len ) && ( cs . char At ( i ) == STR_ ) ) {", "++ i ; }", "break ;", "case STR_ :", "sb . append ( line Separator ) ;", "break ;", "default :", "sb . append ( ch ) ;", "break ; } }", "return sb . to String ( ) ; }"]}
{"ids": "30547", "code": ["public static void perform Save As ( String schema Prefix File Name , String sel File Path , Container Config container Config ) {", "try {", "File file With Default Configuration = create Container Schema File ( schema Prefix File Name , sel File Path ) ;", "update File ( container Config , file With Default Configuration . get Path ( ) , schema Prefix File Name ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "48427", "code": ["public boolean is Aborted ( ) {", "return is Aborted . get ( ) ; }"]}
{"ids": "31893", "code": ["public Ipc Shared Memory Space ( String tok File Name , int writer Pid , int reader Pid , int size , boolean reader , Ignite Logger parent ) throws Ignite Checked Exception {", "assert size > NUM_ : STR_ ;", "log = parent . get Logger ( Ipc Shared Memory Space . class ) ;", "op Size = size ;", "shmem Ptr = Ipc Shared Memory Utils . allocate System Resources ( tok File Name , size , DEBUG && log . is Debug Enabled ( ) ) ;", "shmem Id = Ipc Shared Memory Utils . shared Memory Id ( shmem Ptr ) ;", "sem Id = Ipc Shared Memory Utils . semaphore Id ( shmem Ptr ) ;", "is Reader = reader ;", "this . tok File Name = tok File Name ;", "this . reader Pid = reader Pid ;", "this . writer Pid = writer Pid ;", "if ( DEBUG && log . is Debug Enabled ( ) ) log . debug ( STR_ + this ) ; }"]}
{"ids": "70652", "code": ["@ Override public void close ( ) {", "try {", "if ( connection != null ) {", "connection . close ( ) ; } }", "catch ( SQL Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "71282", "code": ["public Version add Qualifier ( String qualifier ) {", "List < String > new Qualifiers = new Array List < > ( this . qualifiers ) ;", "new Qualifiers . add ( qualifier ) ;", "return new Version ( major , minor , patch , new Qualifiers . to Array ( new String [ new Qualifiers . size ( ) ] ) ) ; }"]}
{"ids": "67956", "code": ["public static void unregister Baggage Handler ( Baggage Handler handler ) {", "handlers . remove ( handler ) ; }"]}
{"ids": "7936", "code": ["public Default Heat Map Dataset ( int x Samples , int y Samples , double min X , double max X , double min Y , double max Y ) {", "if ( x Samples < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( y Samples < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( Double . is Infinite ( min X ) || Double . is Na N ( min X ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( Double . is Infinite ( max X ) || Double . is Na N ( max X ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( Double . is Infinite ( min Y ) || Double . is Na N ( min Y ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( Double . is Infinite ( max Y ) || Double . is Na N ( max Y ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . x Samples = x Samples ;", "this . y Samples = y Samples ;", "this . min X = min X ;", "this . max X = max X ;", "this . min Y = min Y ;", "this . max Y = max Y ;", "this . z Values = new double [ x Samples ] [ ] ;", "for ( int x = NUM_ ; x < x Samples ; x ++ ) {", "this . z Values [ x ] = new double [ y Samples ] ; } }"]}
{"ids": "7207", "code": ["public static void assert Equals Any Order ( Event Bean [ ] [ ] expected , Event Bean [ ] [ ] actual ) {", "if ( compare Array Size ( expected , actual ) ) {", "return ; }", "int num Matches = NUM_ ;", "boolean [ ] found Received = new boolean [ actual . length ] ;", "for ( Event Bean [ ] expected Object : expected ) {", "boolean found = false ;", "for ( int i = NUM_ ; i < actual . length ; i ++ ) {", "if ( found Received [ i ] ) {", "continue ; }", "boolean match = compare Equals Exact Order ( actual [ i ] , expected Object ) ;", "if ( match ) {", "found = true ;", "num Matches ++ ;", "found Received [ i ] = true ;", "break ; } }", "if ( ! found ) {", "log . error ( STR_ + Arrays . to String ( expected Object ) ) ;", "log . error ( STR_ + Arrays . to String ( actual ) ) ; }", "Scope Test Helper . assert True ( found ) ; }", "Scope Test Helper . assert Equals ( num Matches , expected . length ) ; }"]}
{"ids": "44318", "code": ["private void collect Text ( ) {", "if ( text Node Count > NUM_ ) {", "first Text Node . set Text ( text Buffer . to String ( ) ) ; }", "text Node Count = NUM_ ; }"]}
{"ids": "86192", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) public static < T extends Annotation > T unproxy ( T annotation ) {", "Function unproxy Function = get Unproxy Function ( annotation . annotation Type ( ) ) ;", "return ( T ) unproxy Function . apply ( annotation ) ; }"]}
{"ids": "55115", "code": ["public static List < Node > parse Expression ( Context context , Hash Set < String > config Namespaces , String text ) {", "return parse Expression ( context , config Namespaces , text , NUM_ , false ) ; }"]}
{"ids": "29956", "code": ["public void add Tick Mark Section ( final Section SECTION ) {", "if ( null == SECTION ) return ;", "tick Mark Sections . add ( SECTION ) ;", "Collections . sort ( tick Mark Sections , new Section Comparator ( ) ) ;", "fire Update Event ( REDRAW EVENT ) ; }"]}
{"ids": "52961", "code": ["protected static double calc Q i ( double f , double lambda ) {", "return lambda * Math . exp ( - lambda * f ) ; }"]}
{"ids": "5921", "code": ["void flush ( ) {", "print Stream . flush ( ) ; }"]}
{"ids": "3481", "code": ["public Char Buffer delete ( int start , int end ) {", "int length = length ( ) ;", "if ( start < NUM_ || end < start || length < start ) throw new String Index Out Of Bounds Exception ( ) ;", "end = Math . min ( length , end ) ;", "int tail = length - end ;", "char [ ] buffer = buffer ( ) ;", "for ( int i = NUM_ ; i < tail ; i ++ ) {", "buffer [ start + i ] = buffer [ end + i ] ; }", "length ( length - ( end - start ) ) ;", "return this ; }"]}
{"ids": "55316", "code": ["public void add Listener ( Speedruns Live Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "54795", "code": ["public int action ( String fault , String action ) {", "Integer current = get ( fault ) ;", "if ( current == null ) throw new Illegal Argument Exception ( fault ) ;", "boolean no = action . starts With ( STR_ ) ;", "if ( no ) action = action . substring ( NUM_ ) ;", "Integer bit = get Action ( action ) ;", "if ( bit == null ) throw new Illegal Argument Exception ( action ) ;", "int old = current . int Value ( ) ;", "int mask = bit . int Value ( ) ;", "int n = ( old & ( ~ mask ) ) ;", "n = ( no ) ? n : ( n | mask ) ;", "put ( fault , new Integer ( n ) ) ;", "return n ; }"]}
{"ids": "39637", "code": ["public static < T > T decode From Base 64 ( Coder < T > coder , String encoded Value ) throws Coder Exception {", "return decode From Safe Stream ( coder , new Byte Array Input Stream ( Base 64 . decode Base 64 ( encoded Value ) ) , Coder . Context . OUTER ) ; }"]}
{"ids": "15247", "code": ["public void validate ( Set set Data ) throws Validation Exception {", "for ( Iterator iter = set Data . iterator ( ) ; iter . has Next ( ) ; ) {", "perform Validation ( ( String ) iter . next ( ) ) ; } }"]}
{"ids": "44942", "code": ["public String add ( Object ... values ) {", "double result = NUM_ ;", "for ( int i = NUM_ ; i < values . length ; i ++ ) {", "result += Function Handler . get Double ( values [ i ] ) ; }", "return Double . to String ( result ) ; }"]}
{"ids": "75869", "code": ["public List < String > list My D Bs ( String owner , boolean restricted ) {", "Connection conn = null ;", "try {", "conn = get Connection ( ) ;", "return list My D Bs ( conn , owner , restricted ) ; }", "catch ( Exception ex ) {", "logger . log ( Level . SEVERE , STR_ , ex ) ; }", "finally {", "DB Utils . close ( conn ) ; }", "return null ; }"]}
{"ids": "68800", "code": ["protected void do Function ( float [ ] inputs , int input Offset , float [ ] outputs , int output Offset ) {", "float input = inputs [ input Offset ] ;", "for ( int i = NUM_ ; i < get Num Outputs ( ) ; i ++ ) {", "outputs [ i + output Offset ] = get C 0 ( i ) + ( float ) ( Math . pow ( input , get N ( ) ) * ( get C 1 ( i ) - get C 0 ( i ) ) ) ; } }"]}
{"ids": "81141", "code": ["public int compare ( Object o 1 , Object o 2 ) {", "return comparator . compare ( o 1 , o 2 ) ; }"]}
{"ids": "38302", "code": ["public void add Check Box Action Listener ( Action Listener al ) {", "m enable Distributed Experiment . add Action Listener ( al ) ; }"]}
{"ids": "85291", "code": ["GF 256 Poly add Or Subtract ( GF 256 Poly other ) {", "if ( ! field . equals ( other . field ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( is Zero ( ) ) {", "return other ; }", "if ( other . is Zero ( ) ) {", "return this ; }", "int [ ] smaller Coefficients = this . coefficients ;", "int [ ] larger Coefficients = other . coefficients ;", "if ( smaller Coefficients . length > larger Coefficients . length ) {", "int [ ] temp = smaller Coefficients ;", "smaller Coefficients = larger Coefficients ;", "larger Coefficients = temp ; }", "int [ ] sum Diff = new int [ larger Coefficients . length ] ;", "int length Diff = larger Coefficients . length - smaller Coefficients . length ;", "System . arraycopy ( larger Coefficients , NUM_ , sum Diff , NUM_ , length Diff ) ;", "for ( int i = length Diff ; i < larger Coefficients . length ; i ++ ) {", "sum Diff [ i ] = GF 256 . add Or Subtract ( smaller Coefficients [ i - length Diff ] , larger Coefficients [ i ] ) ; }", "return new GF 256 Poly ( field , sum Diff ) ; }"]}
{"ids": "54391", "code": ["public static long first Field Offset ( Class clazz ) {", "long min Size = round Up To 8 ( header Size ( clazz ) ) ;", "while ( clazz != Object . class ) {", "for ( Field f : clazz . get Declared Fields ( ) ) {", "if ( ( f . get Modifiers ( ) & Modifier . STATIC ) == NUM_ ) {", "long offset = unsafe . object Field Offset ( f ) ;", "if ( offset < min Size ) {", "min Size = offset ; } } }", "clazz = clazz . get Superclass ( ) ; }", "return min Size ; }"]}
{"ids": "15669", "code": ["public final V extract First ( ) {", "if ( size ( ) > NUM_ ) {", "if ( GWT . is Script ( ) ) {", "V ret = js Array . get ( NUM_ ) ;", "js Array . remove ( NUM_ ) ;", "return ret ; }", "else {", "return java Array . remove ( NUM_ ) ; } }", "return null ; }"]}
{"ids": "7401", "code": ["@ Override public void action Performed ( Action Event event ) {", "String command = event . get Action Command ( ) ;", "if ( command . equals ( STR_ ) ) {", "attempt Label Font Selection ( ) ; }", "else if ( command . equals ( STR_ ) ) {", "attempt Modify Label Paint ( ) ; }", "else if ( command . equals ( STR_ ) ) {", "attempt Tick Label Font Selection ( ) ; } }"]}
{"ids": "14402", "code": ["public static void upgrade Server Instance ( SSO Token sso Token , String instance Name , String instance Id , Map < String , String > upgraded Values ) throws SMS Exception , SSO Exception , Configuration Exception , IO Exception {", "Service Config sc = get Server Config ( sso Token , instance Name ) ;", "if ( sc != null ) {", "Map map = sc . get Attributes ( ) ;", "map . remove ( ATTR PARENT SITE ID ) ;", "Set new Set = get Properties Set ( upgraded Values ) ;", "map . put ( ATTR SERVER CONFIG , new Set ) ;", "sc . set Attributes ( map ) ; }", "else {", "throw new Configuration Exception ( STR_ + STR_ ) ; } }"]}
{"ids": "15493", "code": ["public static < T > T instance ( Class < T > clazz ) {", "try {", "return clazz . new Instance ( ) ; }", "catch ( Instantiation Exception | Illegal Access Exception e ) {", "throw new Illegal State Exception ( e ) ; } }"]}
{"ids": "23288", "code": ["public Generic Sip Msrp Session create Msrp Session ( Contact Id contact , String feature Tag , String [ ] accept Types , String [ ] accept Wrapped Types ) {", "if ( s Logger . is Activated ( ) ) {", "s Logger . info ( STR_ + contact ) ; }", "return new Originating Sip Msrp Session ( this , contact , feature Tag , m Rcs Settings , System . current Time Millis ( ) , m Contact Manager , accept Types , accept Wrapped Types ) ; }"]}
{"ids": "84705", "code": ["protected void draw Mark ( Graphics 2 D g 2 , float x , float y , Color color ) {", "Rectangle 2 D bounds = mark . get Bounds 2 D ( ) ;", "float w = ( float ) bounds . get Width ( ) ;", "float h = ( float ) bounds . get Height ( ) ;", "x = x - ( w / NUM_ ) ;", "y = y - ( h / NUM_ ) ;", "g 2 . translate ( x , y ) ;", "if ( color == null ) {", "if ( mark Fill Paint != null ) {", "g 2 . set Paint ( mark Fill Paint ) ;", "g 2 . fill ( mark ) ; } }", "else {", "g 2 . set Paint ( color ) ;", "g 2 . fill ( mark ) ; }", "g 2 . set Paint ( mark Paint ) ;", "g 2 . set Stroke ( mark Stroke ) ;", "g 2 . draw ( mark ) ;", "g 2 . translate ( - x , - y ) ;", "Rectangle 2 D rect = new Rectangle 2 D . Float ( x , y , w , h ) ;", "mark Bounds . add ( rect ) ; }"]}
{"ids": "11471", "code": ["public void component Resized ( Component Event e ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + get Width ( ) + STR_ + get Height ( ) ) ; }", "projection . set Width ( get Width ( ) ) ;", "projection . set Height ( get Height ( ) ) ;", "fire Projection Changed ( ) ; }"]}
{"ids": "24964", "code": ["private void change Value ( Abstract Storage Label < Object > label , Object new Value ) {", "if ( ! Objects . equals ( label . get Value ( ) , new Value ) ) {", "synchronized ( label Edit Listeners ) {", "for ( Label Edit Listener listener : label Edit Listeners ) {", "listener . pre Label Value Change ( label ) ; } }", "label . set Value ( new Value ) ;", "synchronized ( label Edit Listeners ) {", "for ( Label Edit Listener listener : label Edit Listeners ) {", "listener . post Label Value Change ( label ) ; } } } }"]}
{"ids": "55041", "code": ["public void write ( byte [ ] b , int offset , int length ) throws IO Exception {", "if ( entry . get Method ( ) == DEFLATED ) {", "if ( length > NUM_ ) {", "if ( ! def . finished ( ) ) {", "def . set Input ( b , offset , length ) ;", "while ( ! def . needs Input ( ) ) {", "deflate ( ) ; } } } }", "else {", "write Out ( b , offset , length ) ;", "written += length ; }", "crc . update ( b , offset , length ) ; }"]}
{"ids": "40851", "code": ["public void update Point ( float x , float y ) {", "if ( Math . sqrt ( x * x + y * y ) > NUM_ ) if ( listener != null ) {", "listener . on Angle Changed Listener ( get Angle ( x , - y ) ) ; } }"]}
{"ids": "51661", "code": ["@ Override public int clamp View Position Horizontal ( View child , int left , int dx ) {", "if ( m Dragged View == null ) {", "return NUM_ ; }", "final int left Bound = NUM_ - MAX OVERFLOW - ( m Column Size Side / NUM_ ) ;", "final int right Bound = get Width ( ) + MAX OVERFLOW + ( m Column Size Side / NUM_ ) ;", "return Math . min ( Math . max ( left , left Bound ) , right Bound ) ; }"]}
{"ids": "62215", "code": ["Http Request Wrapper ( Http Servlet Request request ) {", "super ( request ) ; }"]}
{"ids": "38477", "code": ["private int convert To Panel X ( double xval ) {", "double temp = ( xval - m min X ) / m range X ;", "temp = temp * m panel Width ;", "return ( int ) temp ; }"]}
{"ids": "68905", "code": ["public void forward ( Http Server Request request ) {", "forward ( request , null ) ; }"]}
{"ids": "31771", "code": ["private Set < String > primary Keys ( Prepared Statement stmt , String owner , String tbl ) throws SQL Exception {", "Set < String > pk Cols = new Hash Set < > ( ) ;", "stmt . set String ( NUM_ , owner ) ;", "stmt . set String ( NUM_ , tbl ) ;", "try ( Result Set pk Rs = stmt . execute Query ( ) ) {", "while ( pk Rs . next ( ) ) pk Cols . add ( pk Rs . get String ( NUM_ ) ) ; }", "return pk Cols ; }"]}
{"ids": "62462", "code": ["public static long read UINT 32 ( Input Stream stream ) throws IO Exception {", "long result = NUM_ ;", "for ( int i = NUM_ ; i <= NUM_ ; i += NUM_ ) {", "result |= ( long ) stream . read ( ) << i ; }", "return result ; }"]}
{"ids": "35343", "code": ["private Token to Prefix Token ( I Leaf Node leaf ) {", "Lexer lexer = new Internal N 4 JS Lexer ( ) ;", "String text = leaf . get Text ( ) ;", "String prefix = text . substring ( NUM_ , end Offset - leaf . get Total Offset ( ) ) ;", "ANTLR String Stream stream = new ANTLR String Stream ( prefix ) ;", "lexer . set Char Stream ( stream ) ;", "Token next Token = lexer . next Token ( ) ;", "return new Common Token ( next Token . get Type ( ) , next Token . get Text ( ) ) ; }"]}
{"ids": "35268", "code": ["protected void add ( CSV Record record ) {", "records . add ( Objects . require Non Null ( record ) ) ; }"]}
{"ids": "20500", "code": ["private void scheduled Enqueue Send ( ) {", "scheduler Queue Size . decrement And Get ( ) ;", "scheduled . set ( false ) ;", "enqueue Send With Error Logging ( ) ; }"]}
{"ids": "4053", "code": ["private < T > Binding Amp < T > find Object Binding ( Key < T > key ) {", "Objects . require Non Null ( key ) ;", "if ( key . qualifiers ( ) . length != NUM_ ) {", "throw new Illegal Argument Exception ( ) ; }", "return ( Binding Amp ) find Binding ( Key . of ( Object . class , key . qualifiers ( ) [ NUM_ ] ) ) ; }"]}
{"ids": "24438", "code": ["public boolean if Task Completed Success Or Failure From Response ( Response On Singe Request my Response ) {", "boolean is Completed = false ;", "try {", "if ( my Response == null || my Response . is Fail Obtain Response ( ) ) {", "return is Completed ; }", "String response Body = my Response . get Response Body ( ) ;", "if ( response Body . matches ( success Regex ) || response Body . matches ( failure Regex ) ) {", "is Completed = true ; } }", "catch ( Exception t ) {", "logger . error ( STR_ + t ) ; }", "return is Completed ; }"]}
{"ids": "37670", "code": ["public void center Horizontal ( Array List < Integer > nodes ) {", "if ( m b Needs Undo Action ) {", "add Undo Action ( new center Horizontal Action ( nodes ) ) ; }", "int n Min Y = - NUM_ ;", "int n Max Y = - NUM_ ;", "for ( int i Node = NUM_ ; i Node < nodes . size ( ) ; i Node ++ ) {", "int n Y = get Position Y ( nodes . get ( i Node ) ) ;", "if ( n Y < n Min Y || i Node == NUM_ ) {", "n Min Y = n Y ; }", "if ( n Y > n Max Y || i Node == NUM_ ) {", "n Max Y = n Y ; } }", "for ( int i Node = NUM_ ; i Node < nodes . size ( ) ; i Node ++ ) {", "int n Node = nodes . get ( i Node ) ;", "m n Position Y . set ( n Node , ( n Min Y + n Max Y ) / NUM_ ) ; } }"]}
{"ids": "67260", "code": ["protected void append Text ( final String text ) {", "if ( text != null ) {", "text Body . append ( text ) ; } }"]}
{"ids": "30037", "code": ["public void on Restore Instance State ( Bundle saved Instance State ) {", "m Selected Positions . add All ( saved Instance State . get Integer Array List ( TAG ) ) ;", "Log . d ( TAG , STR_ + m Selected Positions ) ; }"]}
{"ids": "7863", "code": ["public Hour ( int hour , Day day ) {", "Param Checks . null Not Permitted ( day , STR_ ) ;", "this . hour = ( byte ) hour ;", "this . day = day ;", "peg ( Calendar . get Instance ( ) ) ; }"]}
{"ids": "38551", "code": ["public void undo ( ) {", "if ( -- m temp Undo Index < NUM_ ) {", "m temp Undo Index = m temp Undo Files . length - NUM_ ; }", "if ( m temp Undo Files [ m temp Undo Index ] != null ) {", "Abstract File Loader loader = Converter Utils . get Loader For File ( m temp Undo Files [ m temp Undo Index ] ) ;", "try {", "loader . set File ( m temp Undo Files [ m temp Undo Index ] ) ;", "set Instances From File ( loader ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "m Log . log Message ( e . to String ( ) ) ;", "J Option Pane . show Message Dialog ( Preprocess Panel . this , STR_ + e . to String ( ) , STR_ , J Option Pane . ERROR MESSAGE ) ; }", "m temp Undo Files [ m temp Undo Index ] = null ; }", "int temp = m temp Undo Index - NUM_ ;", "if ( temp < NUM_ ) {", "temp = m temp Undo Files . length - NUM_ ; }", "m Undo But . set Enabled ( m temp Undo Files [ temp ] != null ) ; }"]}
{"ids": "54565", "code": ["public static boolean is Connected Using Wifi ( ) {", "Context context = Fe App . get App Context ( ) ;", "Connectivity Manager cm = ( Connectivity Manager ) context . get System Service ( Context . CONNECTIVITY SERVICE ) ;", "Network Info ni = cm . get Active Network Info ( ) ;", "return ni != null && ni . is Connected ( ) == true && ni . get Type ( ) == Connectivity Manager . TYPE WIFI ; }"]}
{"ids": "77481", "code": ["public void close ( ) throws IO Exception {", "if ( writer != null ) writer . flush Buffer ( ) ; }"]}
{"ids": "36203", "code": ["public Process ( final File file , final Progress Listener progress Listener ) throws IO Exception , XML Exception {", "this . process Location = new File Process Location ( file ) ;", "init Context ( ) ;", "Reader in = null ;", "try {", "in = new Input Stream Reader ( new File Input Stream ( file ) , STR_ ) ;", "read Process ( in , progress Listener ) ; }", "catch ( IO Exception e ) {", "throw e ; }", "finally {", "if ( in != null ) {", "in . close ( ) ; } } }"]}
{"ids": "51000", "code": ["@ Override public void process New Lines ( String [ ] lines ) {", "for ( String line : lines ) {", "if ( line . starts With ( STR_ ) ) {", "continue ; }", "if ( line . contains ( STR_ ) ) {", "my Is File Missing = true ;", "return ; }", "String [ ] values = line . split ( LINE SPLIT REGEX ) ;", "if ( values . length < INDEX OF TX BYTES ) {", "continue ; }", "try {", "int line Uid = Integer . parse Int ( values [ INDEX OF UID ] ) ;", "if ( my Uid == line Uid ) {", "int temp Rx Bytes = Integer . parse Int ( values [ INDEX OF RX BYTES ] ) ;", "int temp Tx Bytes = Integer . parse Int ( values [ INDEX OF TX BYTES ] ) ;", "if ( temp Rx Bytes < NUM_ || temp Tx Bytes < NUM_ ) {", "LOG . warning ( String . format ( STR_ , temp Rx Bytes , temp Tx Bytes , line ) ) ;", "continue ; }", "my Rx Bytes += temp Rx Bytes ;", "my Tx Bytes += temp Tx Bytes ; } }", "catch ( Number Format Exception e ) {", "LOG . warning ( String . format ( STR_ , values [ INDEX OF UID ] , values [ INDEX OF RX BYTES ] , values [ INDEX OF TX BYTES ] , line ) ) ; } } }"]}
{"ids": "24490", "code": ["public void adjust Indentation ( int delta ) {", "if ( delta < NUM_ ) {", "indentation Level = Math . max ( NUM_ , indentation Level + delta ) ; }", "else {", "indentation Level += delta ; } }"]}
{"ids": "53747", "code": ["public int capacity ( ) {", "return capacity . get ( ) ; }"]}
{"ids": "69506", "code": ["protected static token do code string ( ) throws java . io . IO Exception {", "String Buffer result = new String Buffer ( ) ;", "advance ( ) ;", "advance ( ) ;", "while ( ! ( next char == STR_ && next char 2 == STR_ ) ) {", "if ( next char == EOF CHAR ) {", "emit error ( STR_ ) ;", "break ; }", "result . append ( new Character ( ( char ) next char ) ) ;", "advance ( ) ; }", "advance ( ) ;", "advance ( ) ;", "return new str token ( sym . CODE STRING , result . to String ( ) ) ; }"]}
{"ids": "44944", "code": ["public String random ( Object omin , Object omax ) {", "int min = Function Handler . get Int ( omin ) ;", "int max = Function Handler . get Int ( omax ) ;", "if ( max > min ) {", "return Integer . to String ( rnd . next Int ( max - min ) + min ) ; }", "return STR_ ; }"]}
{"ids": "85378", "code": ["public static File search Paths ( Iterable < ? extends File > paths , String rel File ) {", "for ( File path : paths ) {", "File f = new File ( path , rel File ) ;", "if ( f . exists ( ) ) {", "return path ; } }", "return null ; }"]}
{"ids": "25030", "code": ["private void load Configuration From Jvm Parameters ( ) {", "String repository Property = System . get Property ( REPOSITORY PROPERTY ) ;", "if ( null != repository Property ) {", "String [ ] repository Ip Host = repository Property . split ( STR_ ) ;", "if ( repository Ip Host . length == NUM_ ) {", "String repository Ip = repository Ip Host [ NUM_ ] ;", "String repository Port = repository Ip Host [ NUM_ ] ;", "if ( String Utils . is Not Blank ( repository Ip ) && String Utils . is Not Blank ( repository Port ) ) {", "log . info ( STR_ + repository Ip + STR_ + repository Port ) ;", "try {", "int port = Integer . parse Int ( repository Port ) ;", "set Repository ( repository Ip , port ) ; }", "catch ( Exception e ) {", "log . warn ( STR_ , e ) ; } } } }", "String agent Name = System . get Property ( AGENT NAME PROPERTY ) ;", "if ( String Utils . is Not Blank ( agent Name ) ) {", "try {", "log . info ( STR_ + agent Name ) ;", "set Agent Name ( agent Name ) ; }", "catch ( Exception e ) {", "log . warn ( STR_ , e ) ; } }", "else {", "try {", "set Agent Name ( DEFAULT AGENT NAME ) ; }", "catch ( Storage Exception e ) {", "log . warn ( STR_ , e ) ; } } }"]}
{"ids": "29076", "code": ["public boolean soft Signin ( ) throws IO Exception {", "if ( url == null ) {", "throw new Illegal State Exception ( STR_ ) ; }", "check Resolve Host ( ) ;", "if ( session Id != null ) {", "if ( check Authorized ( get Auth Check Url ( session Id ) ) ) {", "LOGGER . fine ( STR_ + session Id ) ;", "return true ; }", "else {", "session Id = null ; } }", "long id = load Session Id ( ) ;", "if ( id == NUM_ ) {", "return false ; }", "boolean authorized = check Authorized ( get Auth Check Url ( id ) ) ;", "if ( authorized ) {", "LOGGER . info ( STR_ + id ) ;", "this . session Id = id ; }", "return authorized ; }"]}
{"ids": "80379", "code": ["protected static boolean approx Unit ( final String Builder sbuf , final int amount , final int size , final String name ) {", "int count = amount / size ;", "int remainder ;", "if ( count == NUM_ ) {", "return false ; }", "remainder = amount - ( count * size ) ;", "if ( remainder >= ( size * NUM_ / NUM_ ) ) {", "count ++ ;", "sbuf . append ( count ) ; }", "else if ( remainder >= ( size * NUM_ / NUM_ ) ) {", "count ++ ;", "sbuf . append ( STR_ ) ;", "sbuf . append ( count ) ; }", "else if ( remainder >= ( size * NUM_ / NUM_ ) ) {", "sbuf . append ( STR_ ) ;", "sbuf . append ( count ) ;", "sbuf . append ( STR_ ) ;", "count = NUM_ ; }", "else if ( remainder >= ( size * NUM_ / NUM_ ) ) {", "sbuf . append ( STR_ ) ;", "sbuf . append ( count ) ; }", "else {", "sbuf . append ( count ) ; }", "sbuf . append ( STR_ ) ;", "sbuf . append ( Grammar . plnoun ( count , name ) ) ;", "return true ; }"]}
{"ids": "45872", "code": ["public static Element create Element ( Document doc , String tag , String ns URI , String prefix ) {", "String q Name = ( prefix == null || prefix . length ( ) == NUM_ ) ? tag : prefix + STR_ + tag ;", "return doc . create Element NS ( ns URI , q Name ) ; }"]}
{"ids": "350", "code": ["public static void modify File ( File file , Function < String , String > modifier ) throws IO Exception {", "String content = new String ( Files . to Byte Array ( file ) , Standard Charsets . UTF 8 ) ;", "String result = modifier . apply ( content ) ;", "Files . write ( result . get Bytes ( Standard Charsets . UTF 8 ) , file ) ; }"]}
{"ids": "11440", "code": ["protected double LL To World Returning Lon ( double lat , double lon , Point 2 D lp ) {", "double phi deg = lat ;", "double phi = Proj Math . deg To Rad ( phi deg ) ;", "double lamba deg = lon ;", "double lamba = Proj Math . deg To Rad ( lamba deg ) ;", "double dlamda = lamba - lamdaf ;", "if ( dlamda > Math . PI ) {", "dlamda -= More Math . TWO PI D ; }", "else if ( dlamda < - Math . PI ) {", "dlamda += More Math . TWO PI D ; }", "double e = ellps . ecc ;", "double r = NUM_ ;", "if ( ! More Math . approximately equal ( Math . abs ( phi ) , More Math . HALF PI , EPS 10 ) ) {", "double t = lamb Tsfn ( phi , Math . sin ( phi ) , e ) ;", "r = ellps . radius * F * Math . pow ( t , n ) ; }", "double theta = n * dlamda ;", "double easting = false Easting + r * Math . sin ( theta - alpha ) ;", "double northing = false Northing + rf - r * Math . cos ( theta - alpha ) ;", "lp . set Location ( easting , northing ) ;", "return dlamda ; }"]}
{"ids": "74405", "code": ["protected boolean remove Turntable ( Layout Turntable o ) {", "if ( ! no Warn Turntable ) {", "int selected Value = J Option Pane . show Option Dialog ( this , rb . get String ( STR_ ) , Bundle . get Message ( STR_ ) , J Option Pane . YES NO CANCEL OPTION , J Option Pane . QUESTION MESSAGE , null , new Object [ ] { Bundle . get Message ( STR_ ) , Bundle . get Message ( STR_ ) , rb . get String ( STR_ ) } , Bundle . get Message ( STR_ ) ) ;", "if ( selected Value == NUM_ ) {", "return ( false ) ; }", "if ( selected Value == NUM_ ) {", "no Warn Turntable = true ; } }", "if ( selected Object == o ) {", "selected Object = null ; }", "if ( prev Selected Object == o ) {", "prev Selected Object = null ; }", "for ( int j = NUM_ ; j < o . get Number Rays ( ) ; j ++ ) {", "Track Segment t = o . get Ray Connect Ordered ( j ) ;", "if ( t != null ) {", "substitute Anchor ( o . get Ray Coords Indexed ( j ) , o , t ) ; } }", "for ( int i = NUM_ ; i < turntable List . size ( ) ; i ++ ) {", "Layout Turntable lx = turntable List . get ( i ) ;", "if ( lx == o ) {", "turntable List . remove ( i ) ;", "o . remove ( ) ;", "set Dirty ( true ) ;", "repaint ( ) ;", "return ( true ) ; } }", "return ( false ) ; }"]}
{"ids": "62568", "code": ["public IND Array as Matrix ( Buffered Image image ) {", "if ( channels == NUM_ ) {", "return to Bgr ( image ) ; }", "else {", "image = scaling If Need ( image , true ) ;", "int w = image . get Width ( ) ;", "int h = image . get Height ( ) ;", "IND Array ret = Nd 4 j . create ( h , w ) ;", "for ( int i = NUM_ ; i < h ; i ++ ) {", "for ( int j = NUM_ ; j < w ; j ++ ) {", "ret . put Scalar ( new int [ ] { i , j } , image . get RGB ( i , j ) ) ; } }", "return ret ; } }"]}
{"ids": "20496", "code": ["public int scheduled Queue Size ( ) {", "return scheduler Queue Size . get ( ) ; }"]}
{"ids": "9678", "code": ["public D General Name Chooser ( J Frame parent , String title , General Name general Name ) {", "super ( parent , title , Modality Type . DOCUMENT MODAL ) ;", "init Components ( general Name ) ; }"]}
{"ids": "71217", "code": ["private void add Limited Mitre Join ( Line Segment offset 0 , Line Segment offset 1 , double distance , double mitre Limit ) {", "Coordinate base Pt = seg 0 . p 1 ;", "double ang 0 = Angle . angle ( base Pt , seg 0 . p 0 ) ;", "double ang 1 = Angle . angle ( base Pt , seg 1 . p 1 ) ;", "double ang Diff = Angle . angle Between Oriented ( seg 0 . p 0 , base Pt , seg 1 . p 1 ) ;", "double ang Diff Half = ang Diff / NUM_ ;", "double mid Ang = Angle . normalize ( ang 0 + ang Diff Half ) ;", "double mitre Mid Ang = Angle . normalize ( mid Ang + Math . PI ) ;", "double mitre Dist = mitre Limit * distance ;", "double bevel Delta = mitre Dist * Math . abs ( Math . sin ( ang Diff Half ) ) ;", "double bevel Half Len = distance - bevel Delta ;", "double bevel Mid X = base Pt . x + mitre Dist * Math . cos ( mitre Mid Ang ) ;", "double bevel Mid Y = base Pt . y + mitre Dist * Math . sin ( mitre Mid Ang ) ;", "Coordinate bevel Mid Pt = new Coordinate ( bevel Mid X , bevel Mid Y ) ;", "Line Segment mitre Mid Line = new Line Segment ( base Pt , bevel Mid Pt ) ;", "Coordinate bevel End Left = mitre Mid Line . point Along Offset ( NUM_ , bevel Half Len ) ;", "Coordinate bevel End Right = mitre Mid Line . point Along Offset ( NUM_ , - bevel Half Len ) ;", "if ( side == Position . LEFT ) {", "seg List . add Pt ( bevel End Left ) ;", "seg List . add Pt ( bevel End Right ) ; }", "else {", "seg List . add Pt ( bevel End Right ) ;", "seg List . add Pt ( bevel End Left ) ; } }"]}
{"ids": "86184", "code": ["public static String format Simple Decimal ( double d ) {", "return simple Format . format ( d ) ; }"]}
{"ids": "7541", "code": ["protected Abstract Category Item Label Generator ( String label Format , Date Format formatter ) {", "Param Checks . null Not Permitted ( label Format , STR_ ) ;", "Param Checks . null Not Permitted ( formatter , STR_ ) ;", "this . label Format = label Format ;", "this . number Format = null ;", "this . percent Format = Number Format . get Percent Instance ( ) ;", "this . date Format = formatter ;", "this . null Value String = STR_ ; }"]}
{"ids": "49160", "code": ["public void del Items ( int s , int e ) {", "boolean hsb Was Visible = hsb Vis ;", "boolean vsb Was Visible = vsb Vis ;", "int old Last Displayed = last Item Displayed ( ) ;", "if ( log . is Loggable ( Platform Logger . Level . FINE ) ) {", "log . fine ( STR_ + s + STR_ + e ) ; }", "if ( log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "log . finest ( STR_ + old Last Displayed + STR_ + items In Window ( ) + STR_ + items . size ( ) ) ; }", "if ( items . size ( ) == NUM_ ) {", "return ; }", "if ( s > e ) {", "int tmp = s ;", "s = e ;", "e = tmp ; }", "if ( s < NUM_ ) {", "s = NUM_ ; }", "if ( e >= items . size ( ) ) {", "e = items . size ( ) - NUM_ ; }", "boolean repaint Needed = ( s >= get First Visible Item ( ) && s <= get Last Visible Item ( ) ) ;", "for ( int i = s ; i <= e ; i ++ ) {", "items . remove Element At ( s ) ;", "int j = pos In Sel ( i ) ;", "if ( j != - NUM_ ) {", "int newsel [ ] = new int [ selected . length - NUM_ ] ;", "System . arraycopy ( selected , NUM_ , newsel , NUM_ , j ) ;", "System . arraycopy ( selected , j + NUM_ , newsel , j , selected . length - ( j + NUM_ ) ) ;", "selected = newsel ; } }", "int diff = ( e - s ) + NUM_ ;", "for ( int i = NUM_ ; i < selected . length ; i ++ ) {", "if ( selected [ i ] > e ) {", "selected [ i ] -= diff ; } }", "int options = PAINT VSCROLL ;", "if ( get Focus Index ( ) > e ) {", "set Focus Index ( get Focus Index ( ) - ( e - s + NUM_ ) ) ;", "options |= PAINT FOCUS ; }", "else if ( get Focus Index ( ) >= s && get Focus Index ( ) <= e ) {", "int focus Bound = ( items . size ( ) > NUM_ ) ? NUM_ : - NUM_ ;", "set Focus Index ( Math . max ( s - NUM_ , focus Bound ) ) ;", "options |= PAINT FOCUS ; }", "if ( log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "log . finest ( STR_ + multiple Selections ) ; }", "if ( vsb . get Value ( ) >= s ) {", "if ( vsb . get Value ( ) <= e ) {", "vsb . set Value ( e + NUM_ - diff ) ; }", "else {", "vsb . set Value ( vsb . get Value ( ) - diff ) ; } }", "int old Max Length = max Length ;", "max Length = max Length ( ) ;", "if ( max Length != old Max Length ) {", "options |= PAINT HSCROLL ; }", "layout ( ) ;", "repaint Needed |= ( vsb Was Visible ^ vsb Vis ) || ( hsb Was Visible ^ hsb Vis ) ;", "if ( repaint Needed ) {", "options |= PAINT ALL ; }", "repaint ( s , old Last Displayed , options ) ; }"]}
{"ids": "48910", "code": ["static long make Id ( Snmp Oid oid ) {", "long id = NUM_ ;", "long [ ] arcs = oid . long Value ( false ) ;", "id |= arcs [ NUM_ ] << NUM_ ;", "id |= arcs [ NUM_ ] << NUM_ ;", "id |= arcs [ NUM_ ] << NUM_ ;", "id |= arcs [ NUM_ ] << NUM_ ;", "id |= arcs [ NUM_ ] << NUM_ ;", "id |= arcs [ NUM_ ] << NUM_ ;", "id |= arcs [ NUM_ ] << NUM_ ;", "id |= arcs [ NUM_ ] ;", "return id ; }"]}
{"ids": "48118", "code": ["private void cache Attribute ( String attr Id , byte [ ] [ ] values ) {", "String cache Key = name + STR_ + attr Id ;", "value Cache . put ( cache Key , values ) ; }"]}
{"ids": "46752", "code": ["void read ( Reader policy ) throws Parsing Exception , IO Exception {", "if ( ! ( policy instanceof Buffered Reader ) ) {", "policy = new Buffered Reader ( policy ) ; }", "st = new Stream Tokenizer ( policy ) ;", "st . reset Syntax ( ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( NUM_ + NUM_ , NUM_ ) ;", "st . whitespace Chars ( NUM_ , STR_ ) ;", "st . comment Char ( STR_ ) ;", "st . quote Char ( STR_ ) ;", "st . quote Char ( STR_ ) ;", "st . lower Case Mode ( false ) ;", "st . ordinary Char ( STR_ ) ;", "st . slash Slash Comments ( true ) ;", "st . slash Star Comments ( true ) ;", "st . parse Numbers ( ) ;", "Hashtable < String , Vector < String > > processed Permissions = null ;", "lookahead = st . next Token ( ) ;", "while ( lookahead != Stream Tokenizer . TT EOF ) {", "if ( peek ( STR_ ) ) {", "Grant Entry ge = parse Grant Entry ( processed Permissions ) ;", "if ( ge != null ) grant Entries . add Element ( ge ) ; }", "else {", "throw new Parsing Exception ( st . lineno ( ) , STR_ + STR_ ) ; }", "match ( STR_ ) ; } }"]}
{"ids": "38312", "code": ["private void destination Type Changed ( ) {", "if ( m Exp == null ) return ;", "String str = STR_ ;", "if ( m Results Destination C Box . get Selected Item ( ) == DEST DATABASE TEXT ) {", "m Results Destination Path Label . set Text ( STR_ ) ;", "str = m destination Database URL ;", "m Browse Destination Button . set Enabled ( true ) ;", "m Browse Destination Button . set Text ( STR_ ) ; }", "else {", "m Results Destination Path Label . set Text ( STR_ ) ;", "if ( m Results Destination C Box . get Selected Item ( ) == DEST ARFF TEXT ) {", "int ind = m destination Filename . last Index Of ( STR_ ) ;", "if ( ind > - NUM_ ) {", "m destination Filename = m destination Filename . substring ( NUM_ , ind ) + STR_ ; } }", "if ( m Results Destination C Box . get Selected Item ( ) == DEST CSV TEXT ) {", "int ind = m destination Filename . last Index Of ( STR_ ) ;", "if ( ind > - NUM_ ) {", "m destination Filename = m destination Filename . substring ( NUM_ , ind ) + STR_ ; } }", "str = m destination Filename ;", "if ( m Results Destination C Box . get Selected Item ( ) == DEST ARFF TEXT ) {", "int ind = str . last Index Of ( STR_ ) ;", "if ( ind > - NUM_ ) {", "str = str . substring ( NUM_ , ind ) + STR_ ; } }", "if ( m Results Destination C Box . get Selected Item ( ) == DEST CSV TEXT ) {", "int ind = str . last Index Of ( STR_ ) ;", "if ( ind > - NUM_ ) {", "str = str . substring ( NUM_ , ind ) + STR_ ; } }", "m Browse Destination Button . set Enabled ( true ) ;", "m Browse Destination Button . set Text ( STR_ ) ; }", "if ( m Results Destination C Box . get Selected Item ( ) == DEST DATABASE TEXT ) {", "Database Result Listener drl = null ;", "try {", "drl = new Database Result Listener ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "drl . set Database URL ( m destination Database URL ) ;", "m Exp . set Result Listener ( drl ) ; }", "else {", "if ( m Results Destination C Box . get Selected Item ( ) == DEST ARFF TEXT ) {", "Instances Result Listener irl = new Instances Result Listener ( ) ;", "if ( ! m destination Filename . equals ( STR_ ) ) {", "irl . set Output File ( new File ( m destination Filename ) ) ; }", "m Exp . set Result Listener ( irl ) ; }", "else if ( m Results Destination C Box . get Selected Item ( ) == DEST CSV TEXT ) {", "CSV Result Listener crl = new CSV Result Listener ( ) ;", "if ( ! m destination Filename . equals ( STR_ ) ) {", "crl . set Output File ( new File ( m destination Filename ) ) ; }", "m Exp . set Result Listener ( crl ) ; } }", "m Results Destination Path T Field . set Text ( str ) ;", "m Support . fire Property Change ( STR_ , null , null ) ; }"]}
{"ids": "53384", "code": ["public static Input Stream try Gzip Input ( Input Stream in ) throws IO Exception {", "if ( ! in . mark Supported ( ) ) {", "Pushback Input Stream pb = new Pushback Input Stream ( in , NUM_ ) ;", "in = pb ;", "byte [ ] magic = { NUM_ , NUM_ } ;", "pb . read ( magic ) ;", "pb . unread ( magic ) ;", "if ( magic [ NUM_ ] == NUM_ && magic [ NUM_ ] == - NUM_ ) {", "return new GZIP Input Stream ( pb ) ; }", "return in ; }", "in . mark ( NUM_ ) ;", "boolean isgzip = ( in . read ( ) == NUM_ && in . read ( ) == - NUM_ ) ;", "in . reset ( ) ;", "if ( isgzip ) {", "in = new GZIP Input Stream ( in ) ; }", "return in ; }"]}
{"ids": "76685", "code": ["public static Query new Prefix Query ( String field , Inet Address value , int prefix Length ) {", "if ( value == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( prefix Length < NUM_ || prefix Length > NUM_ * value . get Address ( ) . length ) {", "throw new Illegal Argument Exception ( STR_ + prefix Length + STR_ ) ; }", "byte lower [ ] = value . get Address ( ) ;", "byte upper [ ] = value . get Address ( ) ;", "for ( int i = prefix Length ; i < NUM_ * lower . length ; i ++ ) {", "int m = NUM_ << ( NUM_ - ( i & NUM_ ) ) ;", "lower [ i > > NUM_ ] &= ~ m ;", "upper [ i > > NUM_ ] |= m ; }", "try {", "return new Range Query ( field , Inet Address . get By Address ( lower ) , Inet Address . get By Address ( upper ) ) ; }", "catch ( Unknown Host Exception e ) {", "throw new Assertion Error ( e ) ; } }"]}
{"ids": "14245", "code": ["public static Subject create AM Identity Subject ( Policy Manager pm , AM Identity user ) throws Policy Exception {", "Subject Type Manager mgr = pm . get Subject Type Manager ( ) ;", "Subject subject = mgr . get Subject ( STR_ ) ;", "Set < String > set = new Hash Set < String > ( ) ;", "set . add ( user . get Universal Id ( ) ) ;", "subject . set Values ( set ) ;", "return subject ; }"]}
{"ids": "8466", "code": ["private void do Normal Command Line List ( List < String > command Line List , List < String > joint Options , Path classpath ) {", "command Line List . add ( STR_ ) ;", "command Line List . add ( classpath . to String ( ) ) ;", "if ( joint Compilation ) {", "command Line List . add ( STR_ ) ;", "command Line List . add All ( joint Options ) ; }", "if ( dest Dir != null ) {", "command Line List . add ( STR_ ) ;", "command Line List . add ( dest Dir . get Path ( ) ) ; }", "if ( encoding != null ) {", "command Line List . add ( STR_ ) ;", "command Line List . add ( encoding ) ; }", "if ( stacktrace ) {", "command Line List . add ( STR_ ) ; }", "if ( parameters ) {", "command Line List . add ( STR_ ) ; }", "if ( use Indy ) {", "command Line List . add ( STR_ ) ; }", "if ( script Base Class != null ) {", "command Line List . add ( STR_ ) ;", "command Line List . add ( script Base Class ) ; }", "if ( configscript != null ) {", "command Line List . add ( STR_ ) ;", "command Line List . add ( configscript ) ; } }"]}
{"ids": "70356", "code": ["private synchronized void load Hex Image ( I Hex hex ) {", "hex Tileset . assign Match ( hex , boardview ) ;", "hex Tileset . track Hex Images ( hex , tracker ) ; }"]}
{"ids": "66938", "code": ["private void write Java Field Spec ( Java Field Spec spec , Document document , Element parent Element ) {", "Element parameter = document . create Element ( STR_ ) ;", "parameter . append Child ( parent Element ) ;", "parameter . set Attribute ( STR_ , spec . get Package Name ( ) ) ;", "parameter . set Attribute ( STR_ , spec . get Class Name ( ) ) ;", "parameter . set Attribute ( STR_ , spec . get Field Name ( ) ) ; }"]}
{"ids": "47671", "code": ["private void read Object ( Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "init ( get Mask ( actions ) ) ; }"]}
{"ids": "43989", "code": ["@ Override public synchronized void parse ( Reader reader , String base URI ) throws IO Exception , RDF Parse Exception , RDF Handler Exception {", "if ( reader == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( base URI == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Input Source input Source = new Input Source ( reader ) ;", "input Source . set System Id ( base URI ) ;", "parse ( input Source ) ; }"]}
{"ids": "75585", "code": ["private String exclude Destination Statement ( String text ) {", "int idx = - NUM_ ;", "if ( ( idx = text . index Of ( STR_ ) ) != - NUM_ ) {", "text = text . substring ( NUM_ , idx ) ; }", "return text ; }"]}
{"ids": "11077", "code": ["public static void add File ( String s ) throws IO Exception {", "File f = new File ( s ) ;", "add File ( f ) ; }"]}
{"ids": "53257", "code": ["@ Deprecated public void put ( Collection < Integer > data ) {", "for ( Integer value : data ) {", "final int val = value . int Value ( ) ;", "min = val < min ? val : min ;", "max = val > max ? val : max ; } }"]}
{"ids": "48603", "code": ["public Int Buffer major Version Buffer ( ) {", "int [ ] holder = new int [ NUM_ ] ;", "holder [ NUM_ ] = get Major Version ( ) ;", "Int Buffer ib = Int Buffer . wrap ( holder ) ;", "ib . limit ( NUM_ ) ;", "return ib ; }"]}
{"ids": "29627", "code": ["public static byte [ ] create Data To Sign ( byte [ ] digest ) {", "byte [ ] prefix = get Digest Info Prefix ( digest ) ;", "byte [ ] digest Info = new byte [ prefix . length + digest . length ] ;", "System . arraycopy ( prefix , NUM_ , digest Info , NUM_ , prefix . length ) ;", "System . arraycopy ( digest , NUM_ , digest Info , prefix . length , digest . length ) ;", "return digest Info ; }"]}
{"ids": "6021", "code": ["public Http Request if Modified Since ( final long value ) {", "connection . set If Modified Since ( value ) ;", "return this ; }"]}
{"ids": "69908", "code": ["public static String tmp Journal ( ) {", "final File file = Code . wrap Throw ( null ) ;", "file . delete On Exit ( ) ;", "return file . get Absolute Path ( ) ; }"]}
{"ids": "52965", "code": ["protected static void print Error Message ( Exception e ) {", "if ( e instanceof Abort Exception ) {", "Logging Configuration . set Verbose ( Level . VERBOSE ) ;", "LOG . verbose ( e . get Message ( ) ) ; }", "else if ( e instanceof Unspecified Parameter Exception ) {", "LOG . error ( e . get Message ( ) ) ; }", "else if ( e instanceof Parameter Exception ) {", "LOG . error ( e . get Message ( ) ) ; }", "else {", "LOG . exception ( e ) ; } }"]}
{"ids": "9354", "code": ["private void apply L 1 Reg ( final double eta t , Vec x ) {", "if ( lambda 1 > NUM_ ) {", "l 1 U += eta t * lambda 1 ;", "for ( int k = NUM_ ; k < ws . length ; k ++ ) {", "final Vec w k = ws [ k ] ;", "final double [ ] l 1 Q k = l 1 Q [ k ] ;", "for ( Index Value iv : x ) {", "final int i = iv . get Index ( ) ;", "final double z = w k . get ( i ) ;", "double new W i = NUM_ ;", "if ( z > NUM_ ) new W i = Math . max ( NUM_ , z - ( l 1 U + l 1 Q k [ i ] ) ) ;", "else if ( z < NUM_ ) new W i = Math . min ( NUM_ , z + ( l 1 U - l 1 Q k [ i ] ) ) ;", "l 1 Q k [ i ] += ( new W i - z ) ;", "w k . set ( i , new W i ) ; } } } }"]}
{"ids": "33152", "code": ["public static Move Participant [ ] load Move Participants ( Refactoring Status status , Refactoring Processor processor , Object element , Move Arguments arguments , I Participant Descriptor Filter filter , String [ ] affected Natures , Sharable Participants shared ) {", "Refactoring Participant [ ] participants = fg Move Extensions . get Participants ( status , processor , element , arguments , filter , affected Natures , shared ) ;", "Move Participant [ ] result = new Move Participant [ participants . length ] ;", "System . arraycopy ( participants , NUM_ , result , NUM_ , participants . length ) ;", "return result ; }"]}
{"ids": "52932", "code": ["private long [ ] determine Preference Vector ( Relation < V > relation , Modifiable DBI Ds [ ] neighbor I Ds , String Builder msg ) {", "if ( strategy . equals ( Strategy . APRIORI ) ) {", "return determine Preference Vector By Apriori ( relation , neighbor I Ds , msg ) ; }", "else if ( strategy . equals ( Strategy . MAX INTERSECTION ) ) {", "return determine Preference Vector By Max Intersection ( neighbor I Ds , msg ) ; }", "else {", "throw new Illegal State Exception ( STR_ ) ; } }"]}
{"ids": "82761", "code": ["private void paint Foreground Disabled ( Graphics 2 D g , int width , int height ) {", "Shape s = decode Arrow Path ( width , height ) ;", "g . set Paint ( disabled Color ) ;", "g . fill ( s ) ; }"]}
{"ids": "3178", "code": ["private void on User ( @ Not Null TL Abs User abs User ) {", "User current User = null ;", "User user = null ;", "if ( abs User instanceof TL User ) {", "final TL User tl User = ( TL User ) abs User ;", "if ( tl User . is Mutual Contact ( ) ) {", "current User = ( User ) database Manager . get User By Id ( tl User . get Id ( ) ) ;", "user = on User Contact ( current User , tl User ) ; }", "else if ( tl User . is Deleted ( ) ) {", "current User = ( User ) database Manager . get User By Id ( tl User . get Id ( ) ) ;", "user = on User Delete ( current User , tl User ) ; }", "else if ( tl User . is Contact ( ) ) {", "current User = ( User ) database Manager . get User By Id ( tl User . get Id ( ) ) ;", "user = on User Request ( current User , tl User ) ; }", "else if ( tl User . is Self ( ) || ! tl User . is Bot ( ) ) {", "current User = ( User ) database Manager . get User By Id ( tl User . get Id ( ) ) ;", "user = on User Foreign ( current User , tl User ) ; }", "else {", "Bot Logger . info ( LOGTAG , STR_ ) ; } }", "if ( ( current User == null ) && ( user != null ) ) {", "database Manager . add User ( user ) ; }", "else if ( user != null ) {", "database Manager . update User ( user ) ; } }"]}
{"ids": "68033", "code": ["@ Override public boolean has Next ( ) {", "log . log ( Level . FINE , STR_ ) ;", "boolean result = ( next Event != null ) ;", "log . log ( Level . FINE , STR_ , result ) ;", "return result ; }"]}
{"ids": "66007", "code": ["private void initialize ( Model Validator validator , M Client client ) {", "if ( client == null ) m global Validators . add ( validator ) ;", "m validators . add ( validator ) ;", "validator . initialize ( this , client ) ; }"]}
{"ids": "34892", "code": ["public void reset ( ) {", "engine Reset ( ) ;", "state = INITIAL ; }"]}
{"ids": "36602", "code": ["public Perspective create User Perspective ( final String name , final boolean show ) {", "Perspective perspective = model . add Perspective ( name , true ) ;", "perspective . store ( context ) ;", "if ( show ) {", "show Perspective ( name ) ; }", "return perspective ; }"]}
{"ids": "86640", "code": ["public static double phred ( double error ) {", "return - NUM_ * Math . log 10 ( error ) ; }"]}
{"ids": "35395", "code": ["@ Safe Varargs public final Token < Token Type > expect ( Token Type ... expected ) throws Simple Parser Exception {", "if ( has Type ( expected ) ) return this ;", "throw new Simple Parser Exception ( line , column , STR_ + Arrays . to String ( expected ) + STR_ + to String ( ) ) ; }"]}
{"ids": "30291", "code": ["Eg Demand Details insert Penalty ( final Big Decimal chq Bounce Penalty , final Module module ) {", "Eg Demand Details demand Detail = null ;", "if ( chq Bounce Penalty != null && chq Bounce Penalty . compare To ( Big Decimal . ZERO ) > NUM_ ) {", "final Installment curr Installment = get Current Installment ( module ) ;", "final Eg Demand Reason Master eg Demand Reason Master = demand Generic Dao . get Demand Reason Master By Code ( DEMANDRSN CODE CHQ BOUNCE PENALTY , module ) ;", "if ( eg Demand Reason Master == null ) throw new Application Runtime Exception ( STR_ ) ;", "final Eg Demand Reason eg Demand Reason = demand Generic Dao . get Dmd Reason By Dmd Reason Mster Install And Mod ( eg Demand Reason Master , curr Installment , module ) ;", "if ( eg Demand Reason == null ) throw new Application Runtime Exception ( STR_ ) ;", "demand Detail = Eg Demand Details . from Reason And Amounts ( chq Bounce Penalty , eg Demand Reason , Big Decimal . ZERO ) ; }", "return demand Detail ; }"]}
{"ids": "12557", "code": ["public Sample Info ( Byte Buffer bb ) throws IO Exception {", "number Of Channels = bb . get Int ( ) ;", "sample Rate = bb . get Int ( ) ;", "coeff Min = bb . get Float ( ) ;", "coeff Range = bb . get Float ( ) ;", "post Emphasis = bb . get Float ( ) ;", "residual Fold = bb . get Int ( ) ; }"]}
{"ids": "50178", "code": ["public void handle Maintenance ( Operation maint Op ) {", "perform Pending Request Maintenance ( ) ;", "check And Schedule Synchronization ( this . cached Group State . membership Update Time Micros ) ;", "maint Op . complete ( ) ; }"]}
{"ids": "8104", "code": ["public static boolean is Post JDK 7 ( String bytecode Version ) {", "return JDK 7 . equals ( bytecode Version ) || JDK 8 . equals ( bytecode Version ) ; }"]}
{"ids": "54936", "code": ["private Input Stream find Template ( String path , String template ) {", "try {", "File file = new File ( path , template ) ;", "if ( file . can Read ( ) ) {", "return new Buffered Input Stream ( new File Input Stream ( file . get Absolute Path ( ) ) ) ; }", "else {", "return null ; } }", "catch ( File Not Found Exception fnfe ) {", "return null ; } }"]}
{"ids": "83535", "code": ["public void add Listener ( Circular Progress View Listener listener ) {", "if ( listener != null ) listeners . add ( listener ) ; }"]}
{"ids": "14960", "code": ["public Site Status Check Thread Impl ( ) {", "super ( ) ;", "url Checkers = new Hash Map ( ) ; }"]}
{"ids": "74716", "code": ["@ Override public void render ( final int type , final Graphics 2 D g 2 , final float scaling , final boolean is Form Glyph ) {", "glyph Display . set Scaling Values ( NUM_ , NUM_ , scaling ) ;", "final float OL Dglyph Scale = glyph Scale ;", "if ( is Form Glyph ) {", "glyph Scale = scaling * glyph Scale ; }", "Affine Transform aff = null ;", "if ( glyph Scale != NUM_ ) {", "aff = g 2 . get Transform ( ) ;", "g 2 . scale ( glyph Scale , glyph Scale ) ; }", "glyph Display . set G 2 ( g 2 ) ;", "glyph Display . paint ( null , null , null ) ;", "if ( aff != null ) {", "g 2 . set Transform ( aff ) ; }", "glyph Scale = OL Dglyph Scale ; }"]}
{"ids": "85402", "code": ["public List < String > reset ( List < String > replace ) {", "Array List < String > copy = new Array List < String > ( retained Vars . size ( ) ) ;", "copy . add All ( retained Vars ) ;", "retained Vars . clear ( ) ;", "if ( replace != null ) {", "retained Vars . add All ( replace ) ; }", "return copy ; }"]}
{"ids": "48883", "code": ["protected void release ( ) {", "App Context temp App Context = null ;", "synchronized ( grab Release Synchronizer ) {", "if ( usage Count > NUM_ ) {", "-- usage Count ; }", "else {", "synchronized ( thread Group Synchronizer ) {", "temp App Context = reset App Context ( ) ; } } }", "if ( temp App Context != null ) {", "try {", "temp App Context . dispose ( ) ; }", "catch ( Illegal Thread State Exception e ) { } } }"]}
{"ids": "53706", "code": ["public synchronized void delete All Tables ( ) {", "List < String > table Names = new Array List < String > ( table Lookup . key Set ( ) ) ;", "for ( String s : table Names ) {", "delete Table ( s ) ; } }"]}
{"ids": "72250", "code": ["public Pet Category find One ( String id ) {", "log . debug ( STR_ , id ) ;", "Pet Category pet Category = pet Category Repository . find One ( UUID . from String ( id ) ) ;", "return pet Category ; }"]}
{"ids": "79725", "code": ["private void mark Removed Default Session Token ( String site , String token ) {", "if ( removed Default Tokens == null ) removed Default Tokens = new Hash Map < > ( NUM_ ) ;", "Hash Set < String > removed Set = removed Default Tokens . get ( site ) ;", "if ( removed Set == null ) {", "removed Set = new Hash Set < > ( NUM_ ) ;", "removed Default Tokens . put ( site , removed Set ) ; }", "removed Set . add ( token ) ; }"]}
{"ids": "21622", "code": ["private Map < URI , Map < URI , Map < String , List < URI > > > > create Device To CG Map From Descriptors ( List < Volume Descriptor > add Descriptors , List < Volume Descriptor > remove Descriptors ) {", "Map < URI , Map < URI , Map < String , List < URI > > > > device To CG Map = new Hash Map < URI , Map < URI , Map < String , List < URI > > > > ( ) ;", "for ( Volume Descriptor descr : add Descriptors ) {", "URI device URI = descr . get Device URI ( ) ;", "Map < URI , Map < String , List < URI > > > volumes To Update By CG = device To CG Map . get ( device URI ) ;", "if ( volumes To Update By CG == null ) {", "volumes To Update By CG = new Hash Map < URI , Map < String , List < URI > > > ( ) ;", "device To CG Map . put ( device URI , volumes To Update By CG ) ; }", "URI consistency Group URI = descr . get Consistency Group URI ( ) ;", "Map < String , List < URI > > volumes To Update = volumes To Update By CG . get ( consistency Group URI ) ;", "if ( volumes To Update == null ) {", "volumes To Update = new Hash Map < String , List < URI > > ( ) ;", "volumes To Update By CG . put ( consistency Group URI , volumes To Update ) ; }", "List < URI > volumes To Add = volumes To Update . get ( ADD VOLUMES TO CG KEY ) ;", "if ( volumes To Add == null ) {", "volumes To Add = new Array List < URI > ( ) ;", "volumes To Update . put ( ADD VOLUMES TO CG KEY , volumes To Add ) ; }", "volumes To Add . add ( descr . get Volume URI ( ) ) ; }", "for ( Volume Descriptor descr : remove Descriptors ) {", "URI device URI = descr . get Device URI ( ) ;", "Map < URI , Map < String , List < URI > > > volumes To Update By CG = device To CG Map . get ( device URI ) ;", "if ( volumes To Update By CG == null ) {", "volumes To Update By CG = new Hash Map < URI , Map < String , List < URI > > > ( ) ;", "device To CG Map . put ( device URI , volumes To Update By CG ) ; }", "URI consistency Group URI = descr . get Consistency Group URI ( ) ;", "Map < String , List < URI > > volumes To Update = volumes To Update By CG . get ( consistency Group URI ) ;", "if ( volumes To Update == null ) {", "volumes To Update = new Hash Map < String , List < URI > > ( ) ;", "volumes To Update By CG . put ( consistency Group URI , volumes To Update ) ; }", "List < URI > volumes To Remove = volumes To Update . get ( REMOVE VOLUMES FROM CG KEY ) ;", "if ( volumes To Remove == null ) {", "volumes To Remove = new Array List < URI > ( ) ;", "volumes To Update . put ( REMOVE VOLUMES FROM CG KEY , volumes To Remove ) ; }", "volumes To Remove . add ( descr . get Volume URI ( ) ) ; }", "return device To CG Map ; }"]}
{"ids": "25381", "code": ["public Exchange ( final Request request , final Origin origin ) {", "this . current Request = request ;", "this . origin = origin ;", "this . timestamp = System . current Time Millis ( ) ; }"]}
{"ids": "47298", "code": ["public static final File Time unix Time To File Time ( long utime ) {", "return File Time . from ( utime , Time Unit . SECONDS ) ; }"]}
{"ids": "40915", "code": ["public void remove Address ( Address Entity address ) {", "addresses . remove ( address ) ; }"]}
{"ids": "15426", "code": ["private boolean verify Migrate From Product Home ( String migrate From Product Home ) throws Install Exception {", "if ( migrate From Product Home == null || migrate From Product Home . length ( ) == NUM_ ) {", "Debug . log ( STR_ + STR_ ) ;", "Console . println ( Localized Message . get ( LOC HR MSG MIGRATE NONE FOUND ) ) ;", "return false ; }", "if ( ! migrate From Product Home . equals ( Config Util . get Home Path ( ) ) ) {", "Debug . log ( STR_ + STR_ + migrate From Product Home + STR_ + Config Util . get Home Path ( ) ) ;", "String translate File = migrate From Product Home + Migrate From Inst Finder Store . get Relative Translate File ( ) ;", "if ( ! File Utils . is File Valid ( translate File ) ) {", "Console . println ( Localized Message . get ( LOC HR MSG MIGRATE NONE FOUND ) ) ;", "return false ; } }", "else {", "Debug . log ( STR_ + STR_ ) ;", "throw new Install Exception ( Localized Message . get ( LOC DR ERR PRODUCT ALREADY MIGRATED ) ) ; }", "return true ; }"]}
{"ids": "12906", "code": ["private void insert Prosody Settings ( Utterance utterance , Element element ) {", "Element prosody = ( Element ) Dom Utils . get Ancestor ( element , Mary XML . PROSODY ) ;", "if ( prosody == null ) {", "return ; }", "Element voice = ( Element ) Dom Utils . get Ancestor ( element , Mary XML . VOICE ) ;", "if ( voice != null && Dom Utils . is Ancestor ( prosody , voice ) ) {", "return ; }", "Element paragraph = ( Element ) Dom Utils . get Ancestor ( element , Mary XML . PARAGRAPH ) ;", "if ( paragraph != null && Dom Utils . is Ancestor ( prosody , paragraph ) ) {", "return ; }", "for ( String att : PROSODY ATTRIBUTES ) {", "String val = prosody . get Attribute ( att ) ;", "if ( ! val . equals ( STR_ ) ) {", "utterance . set String ( att , val ) ; } } }"]}
{"ids": "33695", "code": ["public static boolean create Folder ( @ Suppress Warnings ( STR_ ) Context m Context , String path , String folder Name ) {", "File SD Card Root = new File ( path , folder Name ) ;", "if ( ! SD Card Root . exists ( ) ) {", "return SD Card Root . mkdir ( ) ; }", "return false ; }"]}
{"ids": "29235", "code": ["void add ( Object key ) {", "table . put ( key , key ) ; }"]}
{"ids": "52576", "code": ["public Configuration load Config From Resource ( Resource resource ) {", "Properties Configuration result = new Properties Configuration ( ) ;", "try {", "result . load ( resource . get Input Stream ( ) ) ;", "return result ; }", "catch ( Configuration Exception | IO Exception e ) {", "LOG . error ( CONFIGURATION LOAD ERROR . format ( resource . get Filename ( ) ) , e ) ;", "throw new System Config Exception ( CONFIGURATION LOAD ERROR . format ( resource . get Filename ( ) ) , e ) ; } }"]}
{"ids": "55835", "code": ["public final void log ( String filename , int line Number , String method , String tag , int level , String message ) {", "final Log Message lm = new Log Message ( Log Message . LOGMSG TYPE LOG , next Sequence Number . get And Increment ( ) ) ;", "lm . add Int 16 ( level , Log Message . PART KEY LEVEL ) ;", "if ( filename != null ) {", "lm . add String ( filename , Log Message . PART KEY FILENAME ) ;", "if ( line Number != NUM_ ) lm . add Int 32 ( line Number , Log Message . PART KEY LINENUMBER ) ; }", "if ( method != null ) lm . add String ( method , Log Message . PART KEY FUNCTIONNAME ) ;", "if ( tag != null && ! tag . is Empty ( ) ) lm . add String ( tag , Log Message . PART KEY TAG ) ;", "lm . add String ( message , Log Message . PART KEY MESSAGE ) ;", "log ( lm ) ; }"]}
{"ids": "4287", "code": ["public static boolean expression Is True ( double left Side , Operator operator , double right Side ) {", "final String expression = left Side + operator . get Mathematical Operator ( ) + right Side ;", "return expression Is True ( expression ) ; }"]}
{"ids": "52551", "code": ["public synchronized void commit ( ) {", "synchronized ( mutex ) {", "Map < Column , Set < Interval > > temp = working Intervals ;", "working Intervals = Collections . synchronized Map ( new Linked Hash Map < > ( ) ) ;", "available Intervals Ref . set ( Collections . unmodifiable Map ( new Linked Hash Map < > ( temp ) ) ) ;", "super . columns = new Linked Hash Set < > ( temp . key Set ( ) ) ; } }"]}
{"ids": "81460", "code": ["public static String extract Indent String ( String line , int tab Width , int indent Width ) {", "if ( tab Width < NUM_ || indent Width < NUM_ || line == null ) {", "throw new Illegal Argument Exception ( ) ; }", "int size = line . length ( ) ;", "int end = NUM_ ;", "int space Equivs = NUM_ ;", "int characters = NUM_ ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "char c = line . char At ( i ) ;", "if ( c == STR_ ) {", "space Equivs = calculate Space Equivalents ( tab Width , space Equivs ) ;", "characters ++ ; }", "else if ( is Indent Char ( c ) ) {", "space Equivs ++ ;", "characters ++ ; }", "else {", "break ; }", "if ( space Equivs >= indent Width ) {", "end += characters ;", "characters = NUM_ ;", "if ( indent Width == NUM_ ) {", "space Equivs = NUM_ ; }", "else {", "space Equivs = space Equivs % indent Width ; } } }", "if ( end == NUM_ ) {", "return Util . EMPTY STRING ; }", "else if ( end == size ) {", "return line ; }", "else {", "return line . substring ( NUM_ , end ) ; } }"]}
{"ids": "52921", "code": ["private void pre Insert ( Mk Max Entry q , Mk Max Entry node Entry , KNN Heap knns q ) {", "if ( LOG . is Debugging ( ) ) {", "LOG . debug Fine ( STR_ + q + STR_ + node Entry + STR_ ) ; }", "double knn Dist q = knns q . get KNN Distance ( ) ;", "Mk Max Tree Node < O > node = get Node ( node Entry ) ;", "double knn Dist node = NUM_ ;", "if ( node . is Leaf ( ) ) {", "for ( int i = NUM_ ; i < node . get Num Entries ( ) ; i ++ ) {", "Mk Max Entry p = node . get Entry ( i ) ;", "double dist pq = distance ( p . get Routing Object ID ( ) , q . get Routing Object ID ( ) ) ;", "if ( dist pq <= knn Dist q ) {", "knns q . insert ( dist pq , p . get Routing Object ID ( ) ) ;", "if ( knns q . size ( ) >= get Kmax ( ) ) {", "knn Dist q = knns q . get KNN Distance ( ) ;", "q . set Knn Distance ( knn Dist q ) ; } }", "if ( dist pq <= p . get Knn Distance ( ) ) {", "KNN List knns p = knnq . get KNN For DBID ( p . get Routing Object ID ( ) , get Kmax ( ) - NUM_ ) ;", "if ( knns p . size ( ) + NUM_ < get Kmax ( ) ) {", "p . set Knn Distance ( Double . Na N ) ; }", "else {", "double knn Dist p = Math . max ( dist pq , knns p . get KNN Distance ( ) ) ;", "p . set Knn Distance ( knn Dist p ) ; } }", "knn Dist node = Math . max ( knn Dist node , p . get Knn Distance ( ) ) ; } }", "else {", "List < Double Int Pair > entries = get Sorted Entries ( node , q . get Routing Object ID ( ) ) ;", "for ( Double Int Pair dist Entry : entries ) {", "Mk Max Entry dir Entry = node . get Entry ( dist Entry . second ) ;", "double entry knn Dist = dir Entry . get Knn Distance ( ) ;", "if ( dist Entry . second < entry knn Dist || dist Entry . second < knn Dist q ) {", "pre Insert ( q , dir Entry , knns q ) ;", "knn Dist q = knns q . get KNN Distance ( ) ; }", "knn Dist node = Math . max ( knn Dist node , dir Entry . get Knn Distance ( ) ) ; } }", "if ( LOG . is Debugging ( ) ) {", "LOG . debug Fine ( node Entry + STR_ + knn Dist node ) ; }", "node Entry . set Knn Distance ( knn Dist node ) ; }"]}
{"ids": "12197", "code": ["private static boolean add If Matches ( List < String > container , String status Line , char x , char y ) {", "if ( matches ( status Line , x , y ) ) {", "final String filename = status Line . substring ( NUM_ ) ;", "if ( ! container . contains ( filename ) ) {", "container . add ( filename ) ; }", "return true ; }", "return false ; }"]}
{"ids": "1191", "code": ["public static String encode From String ( String plain , String charset ) throws Coder Exception , Unsupported Encoding Exception {", "return encode ( plain . get Bytes ( charset ) ) ; }"]}
{"ids": "86931", "code": ["public void slide ( SLIDE slide ) {", "if ( slide == SLIDE . UP ) {", "if ( ! is Panel Shown ( ) ) {", "int position = NUM_ ;", "if ( items != null ) {", "position = items . size ( ) / NUM_ ; }", "slide Up ( position ) ; } }", "else {", "hide Panel Picker UI ( ) ; } }"]}
{"ids": "53112", "code": ["public boolean is Debugging Finest ( ) {", "return logger . is Loggable ( Level . FINEST ) ; }"]}
{"ids": "85198", "code": ["public void reset ( ) {", "ns . remove All Elements ( ) ;", "ks . set Length ( NUM_ ) ;", "cur = tt . root ;", "run ( ) ; }"]}
{"ids": "8781", "code": ["@ Layoutlib Delegate static float sin ( float angle ) {", "return ( float ) Math . sin ( angle ) ; }"]}
{"ids": "74901", "code": ["public static void render Flattened Annotation ( final Pdf Object form , final Dynamic Vector Renderer current , final int page Number , final int rotation ) {", "final Buffered Image image = Annotation Factory . get Icon ( form ) ;", "if ( image != null ) {", "final Graphics State gs = new Graphics State ( ) ;", "final int icon Height = image . get Height ( ) ;", "final int icon Width = image . get Width ( ) ;", "final float [ ] rect = form . get Float Array ( Pdf Dictionary . Rect ) ;", "if ( form . get Parameter Constant ( Pdf Dictionary . Subtype ) == Pdf Dictionary . Text ) {", "rect [ NUM_ ] = rect [ NUM_ ] + icon Width ;", "rect [ NUM_ ] = rect [ NUM_ ] - icon Height ;", "form . set Float Array ( Pdf Dictionary . Rect , rect ) ; }", "switch ( rotation % NUM_ ) {", "case NUM_ :", "gs . CTM = new float [ ] [ ] { { icon Width , NUM_ , NUM_ } , { NUM_ , icon Height , NUM_ } , { NUM_ , NUM_ , NUM_ } } ;", "gs . x = rect [ NUM_ ] ;", "gs . y = rect [ NUM_ ] - icon Height ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] - icon Height ;", "break ;", "case NUM_ :", "gs . CTM = new float [ ] [ ] { { NUM_ , icon Width , NUM_ } , { - icon Height , NUM_ , NUM_ } , { NUM_ , NUM_ , NUM_ } } ;", "gs . x = rect [ NUM_ ] + icon Height ;", "gs . y = rect [ NUM_ ] ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] + icon Height ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] ;", "break ;", "case NUM_ :", "gs . CTM = new float [ ] [ ] { { - icon Width , NUM_ , NUM_ } , { NUM_ , - icon Height , NUM_ } , { NUM_ , NUM_ , NUM_ } } ;", "gs . x = rect [ NUM_ ] ;", "gs . y = rect [ NUM_ ] + icon Height ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] + icon Height ;", "break ;", "case NUM_ :", "gs . CTM = new float [ ] [ ] { { NUM_ , - icon Width , NUM_ } , { icon Height , NUM_ , NUM_ } , { NUM_ , NUM_ , NUM_ } } ;", "gs . x = rect [ NUM_ ] - icon Height ;", "gs . y = rect [ NUM_ ] ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] - icon Height ;", "gs . CTM [ NUM_ ] [ NUM_ ] = rect [ NUM_ ] ;", "break ; }", "if ( form . get Parameter Constant ( Pdf Dictionary . Subtype ) == Pdf Dictionary . Highlight ) {", "current . set Graphics State ( Graphics State . STROKE , gs . get Alpha ( Graphics State . STROKE ) , Pdf Dictionary . Darken ) ;", "current . set Graphics State ( Graphics State . FILL , gs . get Alpha ( Graphics State . FILL ) , Pdf Dictionary . Darken ) ; }", "current . draw Image ( page Number , image , gs , false , form . get Object Ref As String ( ) , - NUM_ ) ;", "if ( form . get Parameter Constant ( Pdf Dictionary . Subtype ) == Pdf Dictionary . Highlight ) {", "current . set Graphics State ( Graphics State . STROKE , gs . get Alpha ( Graphics State . STROKE ) , Pdf Dictionary . Normal ) ;", "current . set Graphics State ( Graphics State . FILL , gs . get Alpha ( Graphics State . FILL ) , Pdf Dictionary . Normal ) ; } } }"]}
{"ids": "78198", "code": ["public byte [ ] extract Data ( byte [ ] stego Data , String stego File Name , byte [ ] orig Sig Data ) throws Open Stego Exception {", "return null ; }"]}
{"ids": "14849", "code": ["public static String make Related Session ID ( String encrypted ID , Session ID prototype ) throws Session Exception {", "prototype . parse Session String ( ) ;", "return make Session ID ( encrypted ID , prototype . get Extension ( ) , prototype . tail ) ; }"]}
{"ids": "77072", "code": ["public static Automaton determinize ( Automaton a , int max Determinized States ) {", "if ( a . is Deterministic ( ) ) {", "return a ; }", "if ( a . get Num States ( ) <= NUM_ ) {", "return a ; }", "Automaton . Builder b = new Automaton . Builder ( ) ;", "Sorted Int Set . Frozen Int Set initialset = new Sorted Int Set . Frozen Int Set ( NUM_ , NUM_ ) ;", "b . create State ( ) ;", "Linked List < Sorted Int Set . Frozen Int Set > worklist = new Linked List < > ( ) ;", "Map < Sorted Int Set . Frozen Int Set , Integer > newstate = new Hash Map < > ( ) ;", "worklist . add ( initialset ) ;", "b . set Accept ( NUM_ , a . is Accept ( NUM_ ) ) ;", "newstate . put ( initialset , NUM_ ) ;", "final Point Transition Set points = new Point Transition Set ( ) ;", "final Sorted Int Set states Set = new Sorted Int Set ( NUM_ ) ;", "Transition t = new Transition ( ) ;", "while ( worklist . size ( ) > NUM_ ) {", "Sorted Int Set . Frozen Int Set s = worklist . remove First ( ) ;", "for ( int i = NUM_ ; i < s . values . length ; i ++ ) {", "final int s 0 = s . values [ i ] ;", "int num Transitions = a . get Num Transitions ( s 0 ) ;", "a . init Transition ( s 0 , t ) ;", "for ( int j = NUM_ ; j < num Transitions ; j ++ ) {", "a . get Next Transition ( t ) ;", "points . add ( t ) ; } }", "if ( points . count == NUM_ ) {", "continue ; }", "points . sort ( ) ;", "int last Point = - NUM_ ;", "int acc Count = NUM_ ;", "final int r = s . state ;", "for ( int i = NUM_ ; i < points . count ; i ++ ) {", "final int point = points . points [ i ] . point ;", "if ( states Set . upto > NUM_ ) {", "assert last Point != - NUM_ ;", "states Set . compute Hash ( ) ;", "Integer q = newstate . get ( states Set ) ;", "if ( q == null ) {", "q = b . create State ( ) ;", "if ( q >= max Determinized States ) {", "throw new Too Complex To Determinize Exception ( a , max Determinized States ) ; }", "final Sorted Int Set . Frozen Int Set p = states Set . freeze ( q ) ;", "worklist . add ( p ) ;", "b . set Accept ( q , acc Count > NUM_ ) ;", "newstate . put ( p , q ) ; }", "else {", "assert ( acc Count > NUM_ ? true : false ) == b . is Accept ( q ) : STR_ + acc Count + STR_ + b . is Accept ( q ) + STR_ + states Set ; }", "b . add Transition ( r , q , last Point , point - NUM_ ) ; }", "int [ ] transitions = points . points [ i ] . ends . transitions ;", "int limit = points . points [ i ] . ends . next ;", "for ( int j = NUM_ ; j < limit ; j += NUM_ ) {", "int dest = transitions [ j ] ;", "states Set . decr ( dest ) ;", "acc Count -= a . is Accept ( dest ) ? NUM_ : NUM_ ; }", "points . points [ i ] . ends . next = NUM_ ;", "transitions = points . points [ i ] . starts . transitions ;", "limit = points . points [ i ] . starts . next ;", "for ( int j = NUM_ ; j < limit ; j += NUM_ ) {", "int dest = transitions [ j ] ;", "states Set . incr ( dest ) ;", "acc Count += a . is Accept ( dest ) ? NUM_ : NUM_ ; }", "last Point = point ;", "points . points [ i ] . starts . next = NUM_ ; }", "points . reset ( ) ;", "assert states Set . upto == NUM_ : STR_ + states Set . upto ; }", "Automaton result = b . finish ( ) ;", "assert result . is Deterministic ( ) ;", "return result ; }"]}
{"ids": "72522", "code": ["private boolean find Root ( final ODE State Interpolator interpolator , final double ta , final double ga , final double tb , final double gb ) {", "check ( ga == NUM_ || gb == NUM_ || ( ga > NUM_ && gb < NUM_ ) || ( ga < NUM_ && gb > NUM_ ) ) ;", "final Univariate Function f = null ;", "double before Root T = Double . Na N , before Root G = Double . Na N ;", "double after Root T = ta , after Root G = NUM_ ;", "if ( ta == tb ) {", "before Root T = ta ;", "before Root G = ga ;", "after Root T = shifted By ( before Root T , convergence ) ;", "after Root G = f . value ( after Root T ) ; }", "else if ( ga != NUM_ && gb == NUM_ ) {", "before Root T = tb ;", "before Root G = gb ;", "after Root T = shifted By ( before Root T , convergence ) ;", "after Root G = f . value ( after Root T ) ; }", "else if ( ga != NUM_ ) {", "final double new Ga = f . value ( ta ) ;", "if ( ga > NUM_ != new Ga > NUM_ ) {", "before Root T = ta ;", "before Root G = new Ga ;", "after Root T = min Time ( shifted By ( before Root T , convergence ) , tb ) ;", "after Root G = f . value ( after Root T ) ; } }", "double loop T = ta , loop G = ga ;", "while ( ( after Root G == NUM_ || after Root G > NUM_ == g 0 Positive ) && strictly After ( after Root T , tb ) ) {", "if ( loop G == NUM_ ) {", "before Root T = loop T ;", "before Root G = loop G ;", "after Root T = min Time ( shifted By ( before Root T , convergence ) , tb ) ;", "after Root G = f . value ( after Root T ) ; }", "else {", "if ( forward ) {", "final Interval interval = solver . solve Interval ( max Iteration Count , f , loop T , tb ) ;", "before Root T = interval . get Left Abscissa ( ) ;", "before Root G = interval . get Left Value ( ) ;", "after Root T = interval . get Right Abscissa ( ) ;", "after Root G = interval . get Right Value ( ) ; }", "else {", "final Interval interval = solver . solve Interval ( max Iteration Count , f , tb , loop T ) ;", "before Root T = interval . get Right Abscissa ( ) ;", "before Root G = interval . get Right Value ( ) ;", "after Root T = interval . get Left Abscissa ( ) ;", "after Root G = interval . get Left Value ( ) ; } }", "if ( before Root T == after Root T ) {", "after Root T = next After ( after Root T ) ;", "after Root G = f . value ( after Root T ) ; }", "check ( ( forward && after Root T > before Root T ) || ( ! forward && after Root T < before Root T ) ) ;", "loop T = after Root T ;", "loop G = after Root G ; }", "if ( after Root G == NUM_ || after Root G > NUM_ == g 0 Positive ) {", "return false ; }", "else {", "check ( ! Double . is Na N ( before Root T ) && ! Double . is Na N ( before Root G ) ) ;", "increasing = ! g 0 Positive ;", "pending Event Time = before Root T ;", "stop Time = before Root G == NUM_ ? before Root T : after Root T ;", "pending Event = true ;", "after Event = after Root T ;", "after G = after Root G ;", "check ( after G > NUM_ == increasing ) ;", "check ( increasing == gb >= ga ) ;", "return true ; } }"]}
{"ids": "84127", "code": ["public static int compare ( Comparable c 1 , Comparable c 2 , boolean null Greater ) {", "if ( c 1 == c 2 ) {", "return NUM_ ; }", "else if ( c 1 == null ) {", "return ( null Greater ? NUM_ : - NUM_ ) ; }", "else if ( c 2 == null ) {", "return ( null Greater ? - NUM_ : NUM_ ) ; }", "return c 1 . compare To ( c 2 ) ; }"]}
{"ids": "73531", "code": ["public static < E > E sync Rest ( final Iterator < ? extends Object > iterator , final Callable < E > task ) throws Exception {", "if ( iterator . has Next ( ) ) {", "synchronized ( iterator . next ( ) ) {", "return sync Rest ( iterator , task ) ; } }", "else {", "return task . call ( ) ; } }"]}
{"ids": "81999", "code": ["private static Component find By Name ( Container root , String component Name ) {", "if ( verbose ) {", "log ( STR_ + root + STR_ + component Name + STR_ ) ; }", "int count = root . get Component Count ( ) ;", "for ( int iter = NUM_ ; iter < count ; iter ++ ) {", "Component c = root . get Component At ( iter ) ;", "String n = c . get Name ( ) ;", "if ( n != null && n . equals ( component Name ) ) {", "return c ; }", "if ( c instanceof Container ) {", "c = find By Name ( ( Container ) c , component Name ) ;", "if ( c != null ) {", "return c ; } } }", "return null ; }"]}
{"ids": "63640", "code": ["public boolean is Fingerprint ( Class Template class Template ) {", "return fingerprint Class . equals ( class Template . get Implementing Class ( ) ) ; }"]}
{"ids": "32588", "code": ["public void write Field ( final String name , final float value ) throws java . io . IO Exception {", "write Field ( name , Float . to String ( value ) ) ; }"]}
{"ids": "7933", "code": ["private List extract Column Keys ( String line ) {", "List keys = new java . util . Array List ( ) ;", "int field Index = NUM_ ;", "int start = NUM_ ;", "for ( int i = NUM_ ; i < line . length ( ) ; i ++ ) {", "if ( line . char At ( i ) == this . field Delimiter ) {", "if ( field Index > NUM_ ) {", "String key = line . substring ( start , i ) ;", "keys . add ( remove String Delimiters ( key ) ) ; }", "start = i + NUM_ ;", "field Index ++ ; } }", "String key = line . substring ( start , line . length ( ) ) ;", "keys . add ( remove String Delimiters ( key ) ) ;", "return keys ; }"]}
{"ids": "36710", "code": ["protected void draw Rhombus ( int x , int y , int w , int h , Color fill Color , Paint fill Paint , Color pen Color , boolean shadow ) {", "int half Width = w / NUM_ ;", "int half Height = h / NUM_ ;", "Polygon rhombus = new Polygon ( ) ;", "rhombus . add Point ( x + half Width , y ) ;", "rhombus . add Point ( x + w , y + half Height ) ;", "rhombus . add Point ( x + half Width , y + h ) ;", "rhombus . add Point ( x , y + half Height ) ;", "draw Polygon ( rhombus , fill Color , fill Paint , pen Color , shadow ) ; }"]}
{"ids": "47884", "code": ["static Object instantiate ( Class < ? > sibling , String class Name ) throws Instantiation Exception , Illegal Access Exception , Class Not Found Exception {", "Class Loader cl = sibling . get Class Loader ( ) ;", "Class < ? > cls = Class Finder . find Class ( class Name , cl ) ;", "return cls . new Instance ( ) ; }"]}
{"ids": "8848", "code": ["public synchronized void show ( Bundle options ) {", "if ( DEBUG ) Log . d ( TAG , STR_ + m Keyguard View ) ;", "boolean enable Screen Rotation = should Enable Screen Rotation ( ) ;", "maybe Create Keyguard Locked ( enable Screen Rotation , false , options ) ;", "maybe Enable Screen Rotation ( enable Screen Rotation ) ;", "final int vis Flags = View . STATUS BAR DISABLE HOME ;", "if ( DEBUG ) Log . v ( TAG , STR_ + Integer . to Hex String ( vis Flags ) + STR_ ) ;", "m Keyguard Host . set System Ui Visibility ( vis Flags ) ;", "m View Manager . update View Layout ( m Keyguard Host , m Window Layout Params ) ;", "m Keyguard Host . set Visibility ( View . VISIBLE ) ;", "m Keyguard View . show ( ) ;", "m Keyguard View . request Focus ( ) ; }"]}
{"ids": "46717", "code": ["public static int compute String Width ( Font Metrics fm , String str ) {", "return Swing Utilities 2 . string Width ( null , fm , str ) ; }"]}
{"ids": "86414", "code": ["private boolean passes Sanity Check ( Accessibility Event event ) {", "final Char Sequence after Text = get Event Text ( event ) ;", "final Char Sequence before Text = event . get Before Text ( ) ;", "if ( ( event . get Added Count ( ) == NUM_ ) && ( event . get Removed Count ( ) == before Text . length ( ) ) ) {", "return true ; }", "if ( after Text == null || before Text == null ) {", "return false ; }", "final int diff = ( event . get Added Count ( ) - event . get Removed Count ( ) ) ;", "return ( ( before Text . length ( ) + diff ) == after Text . length ( ) ) ; }"]}
{"ids": "11275", "code": ["public void action Performed ( Action Event ae ) {", "String command = ae . get Action Command ( ) ;", "if ( command == Display Palette Cmd ) {", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( get Name ( ) + STR_ ) ; }", "show Palette ( ) ; }", "else if ( command == Hide Palette Cmd ) {", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( get Name ( ) + STR_ ) ; }", "hide Palette ( ) ; }", "else if ( command == Display Properties Cmd ) {", "Inspector inspector = new Inspector ( ) ;", "inspector . inspect Property Consumer ( this ) ; } }"]}
{"ids": "52507", "code": ["@ Json Creator public Data Source Metadata ( @ Json Property ( STR_ ) String name , @ Json Property ( STR_ ) Map < String , String > properties , @ Json Property ( STR_ ) List < Data Segment > segments ) {", "this . name = name ;", "this . properties = Collections . unmodifiable Map ( properties ) ;", "this . segments = Collections . unmodifiable List ( segments ) ; }"]}
{"ids": "86966", "code": ["public E Mail create E Mail ( String value ) {", "Email Field email Impl = new Email Field ( ) ;", "try {", "email Impl . set Value ( value ) ; }", "catch ( Sdp Exception s ) {", "s . print Stack Trace ( ) ; }", "return email Impl ; }"]}
{"ids": "66442", "code": ["public Address Lookup ( String server Url , String serial No , String password ) {", "this . server Url = server Url . trim ( ) ;", "this . client ID = serial No . trim ( ) ;", "this . access Code = password . trim ( ) ; }"]}
{"ids": "72243", "code": ["public Node ( String permission , boolean value , boolean override , long expire At , String server , String world , Context Set contexts ) {", "if ( permission == null || permission . equals ( STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( server != null && ( server . equals Ignore Case ( STR_ ) || server . equals ( STR_ ) ) ) {", "server = null ; }", "if ( world != null && world . equals ( STR_ ) ) {", "world = null ; }", "if ( world != null && server == null ) {", "server = STR_ ; }", "this . permission = permission ;", "this . value = value ;", "this . override = override ;", "this . expire At = expire At ;", "this . server = server ;", "this . world = world ;", "this . contexts = contexts == null ? Context Set . empty ( ) : contexts . make Immutable ( ) ; }"]}
{"ids": "85209", "code": ["public Cell ( int rowspan , int colspan ) {", "this . rowspan = Math . max ( rowspan , NUM_ ) ;", "this . colspan = Math . max ( colspan , NUM_ ) ; }"]}
{"ids": "21141", "code": ["private void initialize Local And Target Info ( ) throws Exception {", "target Site Info = coordinator . get Target Info ( Site Info . class ) ;", "if ( target Site Info == null ) {", "target Site Info = new Site Info ( ) ;", "try {", "coordinator . set Target Info ( target Site Info , false ) ;", "log . info ( STR_ , target Site Info ) ; }", "catch ( Coordinator Client Exception e ) {", "log . info ( STR_ ) ;", "retry Sleep ( ) ;", "throw e ; } }", "local Vdc Prop Info = local Repository . get Vdc Property Info ( ) ;", "String local Config Version = local Vdc Prop Info . get Property ( Vdc Config Util . VDC CONFIG VERSION ) ;", "coordinator . set Node Session Scope Info ( new Vdc Config Version ( local Config Version ) ) ;", "target Vdc Prop Info = load Vdc Config ( ) ;", "if ( is Geo Upgrade From Pre Yoda ( ) ) {", "log . info ( STR_ ) ;", "local Vdc Prop Info . add Property ( Vdc Config Util . VDC CONFIG VERSION , String . value Of ( target Site Info . get Vdc Config Version ( ) ) ) ;", "local Repository . set Vdc Property Info ( local Vdc Prop Info ) ; }", "else {", "if ( local Vdc Prop Info . get Property ( Vdc Config Util . VDC CONFIG VERSION ) == null ) {", "local Vdc Prop Info = new Property Info Ext ( target Vdc Prop Info . get All Properties ( ) ) ;", "local Vdc Prop Info . add Property ( Vdc Config Util . VDC CONFIG VERSION , String . value Of ( target Site Info . get Vdc Config Version ( ) ) ) ;", "local Repository . set Vdc Property Info ( local Vdc Prop Info ) ;", "String vdc ids = target Vdc Prop Info . get Property ( Vdc Config Util . VDC IDS ) ;", "String [ ] vdc Ids = vdc ids . split ( STR_ ) ;", "if ( vdc Ids . length > NUM_ ) {", "log . info ( STR_ ) ;", "reboot ( ) ; } } }", "target Power Off State = coordinator . get Target Info ( Power Off State . class ) ;", "if ( target Power Off State == null ) {", "try {", "coordinator . set Target Info ( new Power Off State ( Power Off State . State . NONE ) ) ;", "target Power Off State = coordinator . get Target Info ( Power Off State . class ) ;", "log . info ( STR_ , Power Off State . State . NONE ) ; }", "catch ( Coordinator Client Exception e ) {", "log . info ( STR_ ) ;", "retry Sleep ( ) ;", "throw e ; } } }"]}
{"ids": "5535", "code": ["public boolean equals ( Object interval ) {", "if ( intervals == null ) {", "return false ; }", "return intervals . contains ( interval ) ; }"]}
{"ids": "81981", "code": ["public static String relative To Absolute ( String base URL , String relative URL ) {", "if ( relative URL . starts With ( STR_ ) ) {", "return get URL Protocol ( base URL ) + STR_ + get URL Host ( base URL ) + relative URL ; }", "else {", "return get URL Protocol ( base URL ) + STR_ + get URL Host ( base URL ) + get URL Base Path ( base URL ) + relative URL ; } }"]}
{"ids": "53945", "code": ["public void start ( ) {", "if ( set State ( Enum Set . of ( Task State . INITIAL , Task State . QUEUED ) , Task State . RUNNING ) ) {", "DHT . log Debug ( STR_ + to String ( ) ) ;", "start Time = System . current Time Millis ( ) ;", "try {", "serialized Update . run ( ) ; }", "catch ( Exception e ) {", "DHT . log ( e , Log Level . Error ) ; } } }"]}
{"ids": "50108", "code": ["private void acces Breakpoint Instruction ( Array List < Instruction > instructions , int line Number , int op , BPINSTRUCTION STATUS status ) {", "for ( int i = NUM_ ; i < instructions . size ( ) ; i ++ ) {", "Instruction curr Inst = instructions . get ( i ) ;", "if ( op == NUM_ ) {", "if ( curr Inst instanceof MR Job Instruction ) {", "MR Job Instruction curr MR Inst = ( MR Job Instruction ) curr Inst ;", "if ( curr MR Inst . find MR Instructions ( line Number ) ) {", "Break Point Instruction breakpoint = new Break Point Instruction ( ) ;", "breakpoint . set Location ( curr Inst ) ;", "breakpoint . set Inst ID ( inst ID ++ ) ;", "breakpoint . set BP Instruction Location ( location ) ;", "instructions . add ( i , breakpoint ) ;", "DML Breakpoint Manager . insert Breakpoint ( breakpoint , line Number ) ;", "return ; } }", "else if ( curr Inst instanceof CP Instruction || curr Inst instanceof SP Instruction ) {", "if ( curr Inst . get Line Num ( ) == line Number ) {", "Break Point Instruction breakpoint = new Break Point Instruction ( ) ;", "breakpoint . set Location ( curr Inst ) ;", "breakpoint . set Inst ID ( inst ID ++ ) ;", "breakpoint . set BP Instruction Location ( location ) ;", "instructions . add ( i , breakpoint ) ;", "DML Breakpoint Manager . insert Breakpoint ( breakpoint , line Number ) ;", "return ; } }", "else if ( curr Inst instanceof Break Point Instruction && curr Inst . get Line Num ( ) == line Number ) {", "Break Point Instruction breakpoint = ( Break Point Instruction ) curr Inst ;", "breakpoint . set BP Instruction Status ( BPINSTRUCTION STATUS . ENABLED ) ;", "breakpoint . set BP Instruction Location ( location ) ;", "instructions . set ( i , breakpoint ) ;", "DML Breakpoint Manager . update Breakpoint ( line Number , status ) ;", "return ; } }", "else {", "if ( curr Inst instanceof Break Point Instruction && curr Inst . get Line Num ( ) == line Number ) {", "if ( op == NUM_ ) {", "Break Point Instruction breakpoint = ( Break Point Instruction ) curr Inst ;", "breakpoint . set Location ( curr Inst ) ;", "breakpoint . set Inst ID ( curr Inst . get Inst ID ( ) ) ;", "breakpoint . set BP Instruction Status ( status ) ;", "breakpoint . set BP Instruction Location ( location ) ;", "instructions . set ( i , breakpoint ) ;", "DML Breakpoint Manager . update Breakpoint ( line Number , status ) ; }", "else {", "instructions . remove ( i ) ;", "DML Breakpoint Manager . remove Breakpoint ( line Number , status ) ; }", "return ; } } } }"]}
{"ids": "19718", "code": ["private void close File ( ) {", "if ( plog Stream != null ) {", "try {", "plog Stream . close ( ) ;", "logger . info ( STR_ + plog Filename + STR_ ) ; }", "catch ( IO Exception e ) {", "logger . warn ( STR_ + plog Filename ) ; }", "finally {", "plog Stream = null ; } } }"]}
{"ids": "41410", "code": ["private void parse First Consonant ( ) {", "Iterator iter = al First Consonants . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String str First Con = ( String ) iter . next ( ) ;", "if ( str Syllable . starts With ( str First Con , i Cur Pos ) ) {", "str First Consonant = str First Con ;", "i Cur Pos += str First Con . length ( ) ;", "return ; } }", "str First Consonant = ZERO ; }"]}
{"ids": "80158", "code": ["private Buddy Panel Controller ( ) {", "buddy Panel = new J Panel ( ) ;", "buddy Panel . set Layout ( new S Box Layout ( S Box Layout . VERTICAL ) ) ;", "model = new Buddy List Model ( ) ;", "J List < Buddy > list = new Buddy Panel ( model ) ;", "buddy Panel . add ( list , S Layout . EXPAND X ) ; }"]}
{"ids": "8592", "code": ["public static CL Platform [ ] list GPU Powered Platforms ( ) {", "CL Platform [ ] platforms = list Platforms ( ) ;", "List < CL Platform > out = new Array List < CL Platform > ( platforms . length ) ;", "for ( CL Platform platform : platforms ) {", "if ( platform . list GPU Devices ( true ) . length > NUM_ ) out . add ( platform ) ; }", "return out . to Array ( new CL Platform [ out . size ( ) ] ) ; }"]}
{"ids": "16920", "code": ["public Action Request Helper depends On ( Action Request Helper dependency ) {", "m Dependencies . add ( dependency ) ;", "return this ; }"]}
{"ids": "63276", "code": ["static boolean is Date ( Object obj ) {", "return obj instanceof Date && obj . get Class ( ) == Date . class ; }"]}
{"ids": "72557", "code": ["private static List < Vector 2 D > build Quadrilateral ( final Vector 2 D ... points ) {", "List < Vector 2 D > quadrilateral = new Array List < Vector 2 D > ( ) ;", "for ( Vector 2 D p : points ) {", "if ( ! quadrilateral . contains ( p ) ) {", "quadrilateral . add ( p ) ; } }", "return quadrilateral ; }"]}
{"ids": "14974", "code": ["public static void initialize Properties ( Properties properties , boolean reset , boolean with Defaults ) {", "Properties default Prop = null ;", "if ( with Defaults ) {", "SSO Token app Token = Access Controller . do Privileged ( Admin Token Action . get Instance ( ) ) ;", "default Prop = Server Configuration . get Defaults ( app Token ) ; }", "Properties Holder old Props ;", "Properties Holder new Props ;", "do {", "old Props = properties Holder Ref . get ( ) ;", "final Properties combined = new Properties ( ) ;", "if ( default Prop != null ) {", "combined . put All ( default Prop ) ; }", "if ( ! reset ) {", "combined . put All ( old Props . properties ) ; }", "combined . put All ( properties ) ;", "new Props = new Properties Holder ( Maps . from Properties ( combined ) ) ; }", "while ( ! properties Holder Ref . compare And Set ( old Props , new Props ) ) ; }"]}
{"ids": "73423", "code": ["public void add Network Listener ( final Network Listener listener ) {", "network Listeners . add ( listener ) ; }"]}
{"ids": "73271", "code": ["public void add Error Listener ( final Error Listener error Listener ) {", "if ( error Listeners == null ) {", "error Listeners = new Array List < Error Listener > ( ) ; }", "error Listeners . add ( error Listener ) ; }"]}
{"ids": "72016", "code": ["private void validate Class Name ( String class Name ) {", "String nvalue = class Name . trim ( ) ;", "if ( ! nvalue . matches ( CLASS RE ) ) {", "throw Property Exception . illegal Property Value Exception ( this , class Name ) ; } }"]}
{"ids": "36816", "code": ["public static void import Base Types ( final C Connection connection , final int raw Module Id , final int module Id ) throws SQL Exception {", "final String query = STR_ + C Table Names . BASE TYPES TABLE + STR_ + module Id + STR_ + STR_ + String . format ( C Table Names . RAW BASE TYPES , raw Module Id ) ;", "connection . execute Update ( query , true ) ;", "final String update Sequence = String . format ( STR_ + STR_ , C Table Names . BASE TYPES TABLE , C Table Names . BASE TYPES TABLE ) ;", "connection . execute Query ( update Sequence , true ) ; }"]}
{"ids": "21908", "code": ["public void record File System Operation ( Db Client db Client , Operation Type Enum op Type , Operation . Status status , Object ... ext Param ) {", "try {", "boolean op Status = ( Operation . Status . ready == status ) ? true : false ;", "String ev Type ;", "ev Type = op Type . get Ev Type ( op Status ) ;", "String ev Desc = op Type . get Description ( ) ;", "String op Stage = Audit Log Manager . AUDITOP END ;", "logger . info ( STR_ , op Type . to String ( ) , ev Type . to String ( ) + STR_ + ev Desc ) ;", "URI uri = ( URI ) ext Param [ NUM_ ] ;", "record Bourne File System Event ( db Client , ev Type , status , ev Desc , uri ) ;", "audit File ( db Client , op Type , op Status , op Stage , uri . to String ( ) ) ; }", "catch ( Exception e ) {", "logger . error ( STR_ , op Type . to String ( ) , e ) ; } }"]}
{"ids": "9781", "code": ["public D Examine Ssl ( J Frame parent , Kse Frame kse Frame ) {", "super ( parent , res . get String ( STR_ ) , Dialog . Modality Type . DOCUMENT MODAL ) ;", "this . kse Frame = kse Frame ;", "init Components ( ) ; }"]}
{"ids": "84940", "code": ["private static List < String > compute Dynamic VM Args ( I Java Project java Project ) {", "Array List < String > out = new Array List < String > ( ) ;", "String dev Jar Path = maybe Get Dev Jar Path ( java Project ) ;", "if ( dev Jar Path . length ( ) > NUM_ ) {", "out . add ( STR_ + dev Jar Path + STR_ ) ; }", "return out ; }"]}
{"ids": "72433", "code": ["public double [ ] skip To ( final int index ) throws Math Illegal Argument Exception {", "if ( index == NUM_ ) {", "Arrays . fill ( x , NUM_ ) ; }", "else {", "final int i = index - NUM_ ;", "final long gray Code = i ^ ( i > > NUM_ ) ;", "for ( int j = NUM_ ; j < dimension ; j ++ ) {", "long result = NUM_ ;", "for ( int k = NUM_ ; k <= BITS ; k ++ ) {", "final long shift = gray Code > > ( k - NUM_ ) ;", "if ( shift == NUM_ ) {", "break ; }", "final long ik = shift & NUM_ ;", "result ^= ik * direction [ j ] [ k ] ; }", "x [ j ] = result ; } }", "count = index ;", "return next Vector ( ) ; }"]}
{"ids": "14765", "code": ["public void remove Organization Configuration ( String org Name , String group Name , boolean check Legacy Mode ) throws SMS Exception , SSO Exception {", "if ( ( group Name == null ) || group Name . length ( ) == NUM_ ) {", "group Name = SMS Utils . DEFAULT ; }", "String orgdn = DN Mapper . org Name To DN ( org Name ) ;", "validate SCM ( ) ;", "String odn = scm . construct Service Config DN ( group Name , Create Service Config . ORG CONFIG NODE , orgdn ) ;", "Cached SMS Entry c Entry = Cached SMS Entry . get Instance ( token , odn ) ;", "if ( c Entry . is New Entry ( ) ) {", "return ; }", "if ( check Legacy Mode && Service Manager . is Coexistence Mode ( ) && group Name . equals Ignore Case ( SMS Utils . DEFAULT ) ) {", "Org Config Via AMSDK amsdk = new Org Config Via AMSDK ( token , DN Mapper . realm Name To AMSDK Name ( orgdn ) , orgdn ) ;", "amsdk . unassign Service ( service Name ) ; }", "if ( ! c Entry . is New Entry ( ) ) {", "SMS Entry entry = c Entry . get Cloned SMS Entry ( ) ;", "entry . delete ( token ) ;", "c Entry . refresh ( entry ) ; } }"]}
{"ids": "73430", "code": ["public void remove Group Listener ( final Group Listener listener ) {", "group Listeners . remove ( listener ) ; }"]}
{"ids": "77969", "code": ["public Set Changelog Mapping ( String source , String task Name , int changelog Partition Number ) {", "super ( source ) ;", "set Type ( TYPE ) ;", "set Key ( task Name ) ;", "put Message Value ( CHANGELOG VALUE KEY , String . value Of ( changelog Partition Number ) ) ; }"]}
{"ids": "81487", "code": ["@ Override protected String extract Key ( final String name ) {", "final String key = unescape ( name . substring ( NUM_ , name . length ( ) - NUM_ ) ) ;", "return key . equals ( STR_ ) ? null : key ; }"]}
{"ids": "24963", "code": ["@ Suppress Warnings ( STR_ ) public static < K , V > void transform String Map ( Map < String , String > original , Map < K , V > map , Class < K > key Class , Class < V > value Class ) throws Preference Exception {", "Method parse Key Method = find Parse Method ( key Class ) ;", "Method parse Value Method = find Parse Method ( value Class ) ;", "if ( ( null != parse Key Method ) && ( null != parse Value Method ) ) {", "for ( Map . Entry < String , String > to Transform Entry : original . entry Set ( ) ) {", "try {", "Object transformed Key = parse Key Method . invoke ( null , to Transform Entry . get Key ( ) ) ;", "Object transformed Value = parse Value Method . invoke ( null , to Transform Entry . get Value ( ) ) ;", "if ( key Class . is Assignable From ( transformed Key . get Class ( ) ) && value Class . is Assignable From ( transformed Value . get Class ( ) ) ) {", "map . put ( ( K ) transformed Key , ( V ) transformed Value ) ; } }", "catch ( Exception e ) {", "throw new Preference Exception ( STR_ + key Class . get Name ( ) + STR_ + value Class . get Name ( ) + STR_ , e ) ; } } }", "else if ( null == parse Key Method ) {", "throw new Preference Exception ( STR_ + key Class . get Name ( ) + STR_ + value Class . get Name ( ) + STR_ + STR_ + key Class . get Name ( ) + STR_ ) ; }", "else {", "throw new Preference Exception ( STR_ + key Class . get Name ( ) + STR_ + value Class . get Name ( ) + STR_ + STR_ + value Class . get Name ( ) + STR_ ) ; } }"]}
{"ids": "49174", "code": ["public boolean grab Input ( ) {", "if ( grab Log . is Loggable ( Platform Logger . Level . FINE ) ) {", "grab Log . fine ( STR_ , this ) ; }", "X Toolkit . awt Lock ( ) ;", "try {", "if ( X Awt State . get Grab Window ( ) == this && X Awt State . is Manual Grab ( ) ) {", "grab Log . fine ( STR_ ) ;", "return true ; }", "X Base Window prev Grab Window = X Awt State . get Grab Window ( ) ;", "final int event Mask = ( int ) ( X Constants . Button Press Mask | X Constants . Button Release Mask | X Constants . Enter Window Mask | X Constants . Leave Window Mask | X Constants . Pointer Motion Mask | X Constants . Button Motion Mask ) ;", "final int owner Events = NUM_ ;", "if ( ! X Toolkit . get Sun Awt Disable Grab ( ) ) {", "int ptr Grab = Xlib Wrapper . X Grab Pointer ( X Toolkit . get Display ( ) , get Content Window ( ) , owner Events , event Mask , X Constants . Grab Mode Async , X Constants . Grab Mode Async , X Constants . None , ( XWM . is Motif ( ) ? X Toolkit . arrow Cursor : X Constants . None ) , X Constants . Current Time ) ;", "if ( ptr Grab != X Constants . Grab Success ) {", "Xlib Wrapper . X Ungrab Pointer ( X Toolkit . get Display ( ) , X Constants . Current Time ) ;", "X Awt State . set Grab Window ( null ) ;", "grab Log . fine ( STR_ ) ;", "return false ; }", "int key Grab = Xlib Wrapper . X Grab Keyboard ( X Toolkit . get Display ( ) , get Content Window ( ) , owner Events , X Constants . Grab Mode Async , X Constants . Grab Mode Async , X Constants . Current Time ) ;", "if ( key Grab != X Constants . Grab Success ) {", "Xlib Wrapper . X Ungrab Pointer ( X Toolkit . get Display ( ) , X Constants . Current Time ) ;", "Xlib Wrapper . X Ungrab Keyboard ( X Toolkit . get Display ( ) , X Constants . Current Time ) ;", "X Awt State . set Grab Window ( null ) ;", "grab Log . fine ( STR_ ) ;", "return false ; } }", "if ( prev Grab Window != null ) {", "prev Grab Window . ungrab Input Impl ( ) ; }", "X Awt State . set Grab Window ( this ) ;", "grab Log . fine ( STR_ ) ;", "return true ; }", "finally {", "X Toolkit . awt Unlock ( ) ; } }"]}
{"ids": "33926", "code": ["public Component Manager ( Collection < Sequence > general Seeds ) {", "Set < Sequence > seed Set = new Linked Hash Set < > ( general Seeds . size ( ) ) ;", "seed Set . add All ( general Seeds ) ;", "this . gral Seeds = Collections . unmodifiable Set ( seed Set ) ;", "gral Components = new Sequence Collection ( seed Set ) ; }"]}
{"ids": "68796", "code": ["private byte [ ] calculate General Encryption Key ( byte [ ] user Password , byte [ ] first Doc Id Value , int key Bit Length , int revision , byte [ ] o Value , int p Value , boolean encrypt Metadata ) throws General Security Exception {", "final byte [ ] padded Password = pad Password ( user Password ) ;", "Message Digest md 5 = create MD 5 Digest ( ) ;", "md 5 . reset ( ) ;", "md 5 . update ( padded Password ) ;", "md 5 . update ( o Value ) ;", "md 5 . update ( ( byte ) ( p Value & NUM_ ) ) ;", "md 5 . update ( ( byte ) ( ( p Value > > NUM_ ) & NUM_ ) ) ;", "md 5 . update ( ( byte ) ( ( p Value > > NUM_ ) & NUM_ ) ) ;", "md 5 . update ( ( byte ) ( p Value > > NUM_ ) ) ;", "if ( first Doc Id Value != null ) {", "md 5 . update ( first Doc Id Value ) ; }", "if ( revision >= NUM_ && ! encrypt Metadata ) {", "for ( int i = NUM_ ; i < NUM_ ; ++ i ) {", "md 5 . update ( ( byte ) NUM_ ) ; } }", "byte [ ] hash = md 5 . digest ( ) ;", "final int key Len = revision == NUM_ ? NUM_ : ( key Bit Length / NUM_ ) ;", "final byte [ ] key = new byte [ key Len ] ;", "if ( revision >= NUM_ ) {", "for ( int i = NUM_ ; i < NUM_ ; ++ i ) {", "md 5 . update ( hash , NUM_ , key . length ) ;", "digest To ( md 5 , hash ) ; } }", "System . arraycopy ( hash , NUM_ , key , NUM_ , key . length ) ;", "return key ; }"]}
{"ids": "44697", "code": ["public Message Capture ( final Logger logger , final boolean capture Entity ) {", "this ( logger , capture Entity , false ) ; }"]}
{"ids": "69208", "code": ["public static final byte [ ] unzip ( byte [ ] in ) throws IO Exception {", "Byte Array Output Stream out Stream = new Byte Array Output Stream ( EXPECTED COMPRESSION RATIO * in . length ) ;", "GZIP Input Stream in Stream = new GZIP Input Stream ( new Byte Array Input Stream ( in ) ) ;", "byte [ ] buf = new byte [ BUF SIZE ] ;", "while ( true ) {", "int size = in Stream . read ( buf ) ;", "if ( size <= NUM_ ) break ;", "out Stream . write ( buf , NUM_ , size ) ; }", "out Stream . close ( ) ;", "return out Stream . to Byte Array ( ) ; }"]}
{"ids": "17097", "code": ["public static void insert Into Combo ( J Combo Box combo , Object item ) {", "Mutable Combo Box Model model = ( Mutable Combo Box Model ) combo . get Model ( ) ;", "if ( model . get Size ( ) == NUM_ ) {", "model . insert Element At ( item , NUM_ ) ;", "return ; }", "Object o = model . get Element At ( NUM_ ) ;", "if ( o . equals ( item ) ) {", "return ; }", "model . remove Element ( item ) ;", "model . insert Element At ( item , NUM_ ) ;", "combo . set Selected Index ( NUM_ ) ; }"]}
{"ids": "65380", "code": ["private boolean python Error In ( String output ) {", "boolean is Error = false ;", "String [ ] output Multiline = output . split ( STR_ ) ;", "Matcher error Matcher ;", "for ( String row : output Multiline ) {", "error Matcher = error In Last Line . matcher ( row ) ;", "if ( error Matcher . find ( ) == true ) {", "is Error = true ;", "break ; } }", "return is Error ; }"]}
{"ids": "53048", "code": ["public Set < T > key Set ( ) {", "return Collections . unmodifiable Set ( map . key Set ( ) ) ; }"]}
{"ids": "25328", "code": ["public void on Start ( ) {", "if ( m Audio Mirror Buffer == null ) {", "m Audio Mirror Buffer = new byte [ NUM_ ] ; }", "if ( m Streamer != null ) {", "m Streamer . start ( ) ; }", "if ( m Insecure Streamer != null ) {", "m Insecure Streamer . start ( ) ; } }"]}
{"ids": "361", "code": ["public Native Runner ( File eclipsec ) {", "this . eclipsec = Objects . require Non Null ( eclipsec ) ; }"]}
{"ids": "27492", "code": ["private static String indent ( final int height ) {", "return Core Base B Op . indent ( height ) ; }"]}
{"ids": "2351", "code": ["public static Calendar reduce Calendar ( Calendar calendar ) {", "calendar . set ( Calendar . MILLISECOND , NUM_ ) ;", "calendar . set ( Calendar . SECOND , NUM_ ) ;", "calendar . set ( Calendar . MINUTE , NUM_ ) ;", "calendar . set ( Calendar . HOUR , NUM_ ) ;", "calendar . set ( Calendar . HOUR OF DAY , NUM_ ) ;", "return calendar ; }"]}
{"ids": "10255", "code": ["public static String surround ( String string , String prefix , String suffix ) {", "if ( string . starts With ( prefix ) == false ) {", "string = prefix + string ; }", "if ( string . ends With ( suffix ) == false ) {", "string += suffix ; }", "return string ; }"]}
{"ids": "9025", "code": ["public static String trim Or Pad ( String str , int length , char pad Char ) {", "String result ;", "if ( str == null ) {", "result = STR_ ; }", "else {", "result = str ; }", "if ( result . length ( ) > length ) {", "return result . substring ( NUM_ , length ) ; }", "while ( result . length ( ) < length ) {", "result += pad Char ; }", "return result ; }"]}
{"ids": "14297", "code": ["void schedule To Timer Pool ( ) {", "if ( session Poller Pool . is Polling Enabled ( ) ) {", "long timeout Time = ( session . get Latest Refresh Time ( ) + ( session . get Max Idle Time ( ) * NUM_ ) ) * NUM_ ;", "if ( session Poller Pool . get Cache Based Polling ( ) ) {", "timeout Time = Math . min ( ( session . get Latest Refresh Time ( ) + ( session . get Max Caching Time ( ) * NUM_ ) ) * NUM_ , timeout Time ) ; }", "reschedule If Will Time Out Before Execution ( timeout Time ) ; }", "else {", "if ( ( session Poller Pool . is Session Cleanup Enabled ( ) ) && will Expire ( session . get Max Session Time ( ) ) ) {", "long timeout Time = ( session . get Latest Refresh Time ( ) + ( session . get Max Session Time ( ) * NUM_ ) ) * NUM_ ;", "reschedule If Will Time Out Before Execution ( timeout Time ) ; } } }"]}
{"ids": "15990", "code": ["public Cipher Parameters decrypt ( byte [ ] in , int key Len ) {", "return decrypt ( in , NUM_ , in . length , key Len ) ; }"]}
{"ids": "35126", "code": ["private static void log Os Info ( ) {", "Logger . append Log ( STR_ + Cfg . get Os ( ) ) ;", "Logger . append Log ( STR_ + Os . get Os Name ( ) ) ;", "Logger . append Log ( STR_ + Os . platform ( ) ) ;", "Logger . append Log ( STR_ + System . get Property ( STR_ ) ) ;", "Logger . append Log ( STR_ + Host Info . available Cpus ( ) ) ;", "Logger . append Log ( STR_ + Host Info . get Max Memory ( ) + STR_ ) ; }"]}
{"ids": "21687", "code": ["public static String generate Transport Zone Native Guid ( String transport Type , String device Type , String fabric Id ) {", "return String . format ( STR_ , transport Type , device Type Map . get ( device Type ) , fabric Id ) ; }"]}
{"ids": "8003", "code": ["@ Override public boolean equals Value ( final Object other ) {", "return Objects . equals ( this . value , other ) ; }"]}
{"ids": "14468", "code": ["public static void error ( String msg , Throwable t ) {", "debug Inst . debug ( I Debug . ERROR , msg , t ) ; }"]}
{"ids": "23130", "code": ["public void remove Event Listener ( SIP Transaction Event Listener old Listener ) {", "event Listeners . remove ( old Listener ) ; }"]}
{"ids": "62239", "code": ["public static Execution System new Execution System ( URI uri , Map < String , ? > env ) throws IO Exception {", "return new Execution System ( uri , env , null ) ; }"]}
{"ids": "44738", "code": ["public static boolean is Command ( I Element Type type ) {", "return type == SQF Types . COMMAND TOKEN || type == SQF Types . COMMAND || type == SQF Types . CASE || type == SQF Types . CASE COMMAND ; }"]}
{"ids": "67907", "code": ["public void send ( X Trace Report report ) {", "outgoing . offer ( report ) ; }"]}
{"ids": "60377", "code": ["@ Contract ( pure = true ) public static boolean starts With Concatenation ( @ Not Null String string , @ Not Null String ... prefixes ) {", "int offset = NUM_ ;", "for ( String prefix : prefixes ) {", "int prefix Len = prefix . length ( ) ;", "if ( ! string . region Matches ( offset , prefix , NUM_ , prefix Len ) ) {", "return false ; }", "offset += prefix Len ; }", "return true ; }"]}
{"ids": "11297", "code": ["public boolean fire Map Mouse Clicked ( Mouse Event evt ) {", "if ( DEBUG ) {", "logger . fine ( STR_ ) ; }", "click Happened = true ;", "boolean consumed = false ;", "evt = new Map Mouse Event ( get Parent Mode ( ) , evt ) ;", "if ( priority Listener != null && evt . get Click Count ( ) > NUM_ ) {", "priority Listener . mouse Clicked ( evt ) ;", "consumed = true ; }", "priority Listener = null ;", "if ( proxy == null || evt . is Shift Down ( ) || ( proxy Distribution Mask & PROXY DISTRIB MOUSE CLICKED ) > NUM_ ) {", "Iterator < Map Mouse Listener > it = iterator ( ) ;", "while ( it . has Next ( ) && ! consumed ) {", "Map Mouse Listener target = it . next ( ) ;", "consumed = target . mouse Clicked ( evt ) && consume Events ;", "if ( consumed ) {", "priority Listener = target ; } } }", "boolean ignore Consumed = ! consumed || ( consumed && ( ( proxy Distribution Mask & PROXY ACK CONSUMED MOUSE CLICKED ) == NUM_ ) ) ;", "if ( proxy != null && ignore Consumed && ! evt . is Shift Down ( ) ) {", "proxy . mouse Clicked ( evt ) ;", "consumed = true ; }", "return consumed ; }"]}
{"ids": "55131", "code": ["private void emit Class ( Doc Comment comment ) {", "String tag Name = ( comment . get Type ( ) == Doc Comment . CLASS ) ? STR_ : STR_ ;", "xml . append ( STR_ ) ;", "xml . append ( tag Name ) ;", "xml . append ( STR_ ) ;", "xml . append ( comment . get Name ( ) ) ;", "xml . append ( STR_ ) ;", "xml . append ( comment . get Fullname ( ) ) ;", "String sourcefile = comment . get Source File ( ) ;", "if ( sourcefile != null ) {", "xml . append ( STR_ ) ;", "xml . append ( sourcefile ) ; }", "xml . append ( STR_ ) ;", "xml . append ( comment . get Namespace ( ) ) ;", "xml . append ( STR_ ) ;", "xml . append ( comment . get Access ( ) ) ;", "xml . append ( STR_ ) ;", "if ( comment . get Type ( ) == Doc Comment . INTERFACE ) {", "String [ ] base Classes = comment . get Baseclasses ( ) ;", "if ( base Classes != null ) {", "xml . append ( STR_ ) ;", "for ( int i = NUM_ ; i < base Classes . length ; i ++ ) {", "String baseclass = base Classes [ i ] ;", "if ( baseclass != null ) {", "if ( i != NUM_ ) xml . append ( STR_ ) ;", "xml . append ( baseclass ) ; } }", "xml . append ( STR_ ) ; } }", "else {", "xml . append ( STR_ ) ;", "xml . append ( comment . get Base Class ( ) ) ;", "xml . append ( STR_ ) ;", "String [ ] interfaces = comment . get Interfaces ( ) ;", "if ( interfaces != null ) {", "xml . append ( STR_ ) ;", "for ( int i = NUM_ ; i < interfaces . length ; i ++ ) {", "String inter = interfaces [ i ] ;", "if ( inter != null ) {", "if ( i != NUM_ ) xml . append ( STR_ ) ;", "xml . append ( inter ) ; } }", "xml . append ( STR_ ) ; } }", "xml . append ( STR_ ) ;", "xml . append ( comment . is Final ( ) ) ;", "xml . append ( STR_ ) ;", "xml . append ( STR_ ) ;", "xml . append ( comment . is Dynamic ( ) ) ;", "xml . append ( STR_ ) ;", "xml . append ( STR_ ) ;", "String desc = comment . get Description ( ) ;", "if ( desc != null ) append Tag ( STR_ , comment . get Description ( ) ) ;", "emit Tags ( comment . get All Tags ( ) ) ;", "if ( comment . get Metadata ( ) != null ) emit Metadata ( comment . get Metadata ( ) ) ;", "xml . append ( STR_ ) ;", "xml . append ( tag Name ) ;", "xml . append ( STR_ ) ; }"]}
{"ids": "66420", "code": ["protected void paint Content Border Top Edge ( Graphics g , int x , int y , int w , int h , boolean draw Broken , Rectangle sel Rect , boolean is Content Border Painted ) {", "if ( is Content Border Painted ) {", "g . set Color ( select Highlight ) ;", "g . fill Rect ( x , y , w - NUM_ , NUM_ ) ; } }"]}
{"ids": "83228", "code": ["public void analyze All It And Write Results ( ) {", "Run Results Loader run Dir = new Run Results Loader ( run Directory , null ) ;", "Print Stream stream ;", "try {", "stream = new Print Stream ( new File ( output Dir + STR_ ) ) ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ;", "return ; }", "String header = STR_ ;", "stream . println ( header ) ;", "double total TT It ;", "double [ ] avg Route T Ts It ;", "int [ ] route Users It ;", "for ( int i = NUM_ ; i <= last Iteration ; i ++ ) {", "log . info ( STR_ + i + STR_ + last Iteration + STR_ ) ;", "String events Filename = run Dir . get Events Filename ( i ) ;", "Events Manager events Manager = new Events Manager Impl ( ) ;", "Tt Analyze Braess handler = new Tt Analyze Braess ( ) ;", "events Manager . add Handler ( handler ) ;", "Matsim Events Reader reader = new Matsim Events Reader ( events Manager ) ;", "reader . read File ( events Filename ) ;", "total TT It = handler . get Total TT ( ) ;", "avg Route T Ts It = handler . calculate Avg Route T Ts ( ) ;", "route Users It = handler . get Route Users ( ) ;", "String Buffer line = new String Buffer ( ) ;", "line . append ( i + STR_ + total TT It ) ;", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "line . append ( STR_ + route Users It [ j ] ) ; }", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "line . append ( STR_ + avg Route T Ts It [ j ] ) ; }", "stream . println ( line . to String ( ) ) ; }", "stream . close ( ) ;", "log . info ( last Iteration + STR_ ) ; }"]}
{"ids": "71410", "code": ["public int execute Update ( String sql ) throws SQL Exception {", "return Util . truncate And Convert To Int ( execute Large Update ( sql ) ) ; }"]}
{"ids": "8800", "code": ["@ Layoutlib Delegate static long current Thread Time Millis ( ) {", "return System . current Time Millis ( ) ; }"]}
{"ids": "71906", "code": ["public static Entry make Entry ( List < String > ldif Lines ) {", "return make Entry ( ldif Lines . to Array ( new String [ ldif Lines . size ( ) ] ) ) ; }"]}
{"ids": "25658", "code": ["public int format ( int val , byte [ ] buf , int off , int len ) {", "if ( val == Integer . MIN VALUE ) {", "if ( len > Byte Formatter . NUMBER BASE ) {", "return format ( STR_ , buf , off , len ) ; }", "else {", "truncation Filler ( buf , off , len ) ;", "return off + len ; } }", "int pos = Math . abs ( val ) ;", "int ndig = NUM_ ;", "int dmax = Byte Formatter . NUMBER BASE ;", "while ( ndig < Byte Formatter . NUMBER BASE && pos >= dmax ) {", "ndig ++ ;", "dmax *= Byte Formatter . NUMBER BASE ; }", "if ( val < NUM_ ) {", "ndig ++ ; }", "if ( ndig > len || ndig > buf . length - off ) {", "truncation Filler ( buf , off , len ) ;", "return off + len ; }", "off += ndig ;", "int xoff = off - NUM_ ;", "do {", "buf [ xoff ] = Byte Formatter . DIGITS [ pos % Byte Formatter . NUMBER BASE ] ;", "xoff -- ;", "pos /= Byte Formatter . NUMBER BASE ; }", "while ( pos > NUM_ ) ;", "if ( val < NUM_ ) {", "buf [ xoff ] = ( byte ) STR_ ; }", "return off ; }"]}
{"ids": "1137", "code": ["public void append ( char c [ ] ) {", "int maxlength = buffer . length - pos ;", "if ( c . length < maxlength ) {", "System . arraycopy ( c , NUM_ , buffer , pos , c . length ) ;", "pos += c . length ; }", "else {", "System . arraycopy ( c , NUM_ , buffer , pos , maxlength ) ;", "curr . next = new Entity ( buffer ) ;", "curr = curr . next ;", "length += buffer . length ;", "buffer = new char [ ( buffer . length > c . length - maxlength ) ? buffer . length : c . length - maxlength ] ;", "if ( c . length > maxlength ) {", "System . arraycopy ( c , maxlength , buffer , NUM_ , c . length - maxlength ) ;", "pos = c . length - maxlength ; }", "else {", "pos = NUM_ ; } } }"]}
{"ids": "23185", "code": ["private boolean is Annotation ( ) {", "return impl Interfaces . contains ( STR_ ) ; }"]}
{"ids": "42399", "code": ["public final boolean is Exception Handler Equivalent ( Basic Block other ) {", "if ( exception Handlers != other . exception Handlers ) {", "Enumeration < Basic Block > e 1 = get Exception Handlers ( ) ;", "Enumeration < Basic Block > e 2 = other . get Exception Handlers ( ) ;", "while ( e 1 . has More Elements ( ) ) {", "if ( ! e 2 . has More Elements ( ) ) return false ;", "if ( e 1 . next Element ( ) != e 2 . next Element ( ) ) return false ; }", "if ( e 2 . has More Elements ( ) ) return false ; }", "return true ; }"]}
{"ids": "55101", "code": ["public int checksum ( ) {", "return calculate Checksum ( compile checksum . to String ( ) ) ; }"]}
{"ids": "66787", "code": ["public boolean long Label ( ) {", "return f State . long Label ; }"]}
{"ids": "1921", "code": ["public Secret Block ( Mario player , Group parent , int stage Zone , float x Pos , float y Pos , float yolo Width , Image ... hit State ) {", "super ( BLOCK COLLISION DATA , x Pos , y Pos , NUM_ , NUM_ , ( Image ) null ) ;", "this . hit State = hit State [ NUM_ ] ;", "yolo View = new Image View ( hit State [ NUM_ ] ) ;", "yolo View . set Fit Width ( yolo Width ) ;", "this . parent = parent ;", "zone = stage Zone ; }"]}
{"ids": "48734", "code": ["private Socket open Data Connection ( String cmd ) throws sun . net . ftp . Ftp Protocol Exception , IO Exception {", "Socket client Socket ;", "if ( passive Mode ) {", "try {", "return open Passive Data Connection ( cmd ) ; }", "catch ( sun . net . ftp . Ftp Protocol Exception e ) {", "String errmsg = e . get Message ( ) ;", "if ( ! errmsg . starts With ( STR_ ) && ! errmsg . starts With ( STR_ ) ) {", "throw e ; } } }", "Server Socket port Socket ;", "Inet Address my Address ;", "String port Cmd ;", "if ( proxy != null && proxy . type ( ) == Proxy . Type . SOCKS ) {", "throw new sun . net . ftp . Ftp Protocol Exception ( STR_ ) ; }", "port Socket = new Server Socket ( NUM_ , NUM_ , server . get Local Address ( ) ) ;", "try {", "my Address = port Socket . get Inet Address ( ) ;", "if ( my Address . is Any Local Address ( ) ) {", "my Address = server . get Local Address ( ) ; }", "port Cmd = STR_ + ( ( my Address instanceof Inet 6 Address ) ? STR_ : STR_ ) + STR_ + my Address . get Host Address ( ) + STR_ + port Socket . get Local Port ( ) + STR_ ;", "if ( ! issue Command ( port Cmd ) || ! issue Command ( cmd ) ) {", "port Cmd = STR_ ;", "byte [ ] addr = my Address . get Address ( ) ;", "for ( int i = NUM_ ; i < addr . length ; i ++ ) {", "port Cmd = port Cmd + ( addr [ i ] & NUM_ ) + STR_ ; }", "port Cmd = port Cmd + ( ( port Socket . get Local Port ( ) > > > NUM_ ) & NUM_ ) + STR_ + ( port Socket . get Local Port ( ) & NUM_ ) ;", "issue Command Check ( port Cmd ) ;", "issue Command Check ( cmd ) ; }", "if ( connect Timeout >= NUM_ ) {", "port Socket . set So Timeout ( connect Timeout ) ; }", "else {", "if ( default Connect Timeout > NUM_ ) {", "port Socket . set So Timeout ( default Connect Timeout ) ; } }", "client Socket = port Socket . accept ( ) ;", "if ( read Timeout >= NUM_ ) {", "client Socket . set So Timeout ( read Timeout ) ; }", "else {", "if ( default So Timeout > NUM_ ) {", "client Socket . set So Timeout ( default So Timeout ) ; } } }", "finally {", "port Socket . close ( ) ; }", "if ( use Crypto ) {", "try {", "client Socket = ssl Fact . create Socket ( client Socket , server Addr . get Host Name ( ) , server Addr . get Port ( ) , true ) ; }", "catch ( Exception ex ) {", "throw new IO Exception ( ex . get Localized Message ( ) ) ; } }", "return client Socket ; }"]}
{"ids": "78436", "code": ["private void create Insert List ( final I Item item , List < I Item > temp List , List < I Item > insert List , int depth , int removed ) {", "if ( ! temp List . contains ( item ) ) {", "temp List . add ( item ) ;", "if ( depth == NUM_ ) {", "insert List . add ( item ) ; }", "if ( item . get Items ( ) != null ) {", "depth ++ ;", "for ( I Item child : item . get Items ( ) ) {", "create Insert List ( child , temp List , insert List , depth , removed ) ; } } }", "else {", "insert List . remove ( item ) ;", "removed ++ ; } }"]}
{"ids": "74899", "code": ["@ Suppress Warnings ( STR_ ) public int read Outline File Metadata ( final Pdf Object Outlines Obj , final Pdf Object Reader current Pdf File ) {", "final int count = Outlines Obj . get Int ( Pdf Dictionary . Count ) ;", "final Pdf Object First Obj = Outlines Obj . get Dictionary ( Pdf Dictionary . First ) ;", "current Pdf File . check Resolved ( First Obj ) ;", "if ( First Obj != null ) {", "final Element root = Outline Data XML . create Element ( STR_ ) ;", "Outline Data XML . append Child ( root ) ;", "final int level = NUM_ ;", "read Outline Level ( root , current Pdf File , First Obj , level , false ) ; }", "return count ; }"]}
{"ids": "23541", "code": ["private int decode Run Length ( int k ) {", "if ( ( k & NUM_ ) == NUM_ ) {", "return ( ( k > > > NUM_ ) & NUM_ ) ^ NUM_ ; }", "else {", "return Integer . number Of Leading Zeros ( k << p + ( NUM_ - sp ) ) + NUM_ ; } }"]}
{"ids": "53338", "code": ["public No Duplicate Value Global Constraint ( Abstract Parameter < ? , ? > ... parameters ) {", "this . parameters = Arrays . as List ( parameters ) ; }"]}
{"ids": "47720", "code": ["protected void flip ( Buffer Capabilities . Flip Contents flip Action ) {", "if ( peer != null ) {", "Image back Buffer = get Back Buffer ( ) ;", "if ( back Buffer != null ) {", "peer . flip ( NUM_ , NUM_ , back Buffer . get Width ( null ) , back Buffer . get Height ( null ) , flip Action ) ; } }", "else {", "throw new Illegal State Exception ( STR_ ) ; } }"]}
{"ids": "29520", "code": ["public static Map < String , String > all Namespaces ( SOAP Element ele ) {", "Map < String , String > ns List = new Tree Map < String , String > ( ) ;", "log . trace ( STR_ + ele . get Node Name ( ) ) ;", "all Namespaces ( ele , ns List ) ;", "log . trace ( STR_ + ns List ) ;", "return ns List ; }"]}
{"ids": "33732", "code": ["private void draw Hook ( Canvas canvas ) {", "Path hook Path = new Path ( ) ;", "double sweep Angle = Math . PI / NUM_ * NUM_ ;", "float y = ( float ) Math . sin ( sweep Angle ) * ( get Big Circle Radius ( ) ) + rect F . height ( ) / NUM_ ;", "float x = ( float ) Math . cos ( sweep Angle ) * ( get Big Circle Radius ( ) ) + rect F . width ( ) / NUM_ ;", "float i = get Big Circle Radius ( ) / NUM_ ;", "hook Path . add Round Rect ( new Rect F ( i + i / NUM_ , i + i / NUM_ , i + i / NUM_ + NUM_ , i + i + i / NUM_ ) , NUM_ , NUM_ , Path . Direction . CCW ) ;", "hook Path . add Round Rect ( new Rect F ( i + i / NUM_ , ( i + i + i / NUM_ ) - NUM_ , i + i / NUM_ + i + i , i + i + i / NUM_ + NUM_ ) , NUM_ , NUM_ , Path . Direction . CCW ) ;", "Matrix matrix = new Matrix ( ) ;", "matrix . reset ( ) ;", "int restore Count = canvas . get Save Count ( ) ;", "hook Path . close ( ) ;", "canvas . rotate ( - NUM_ , rect F . center X ( ) , rect F . center Y ( ) ) ;", "canvas . draw Path ( hook Path , m Hook Paint ) ;", "canvas . restore To Count ( restore Count ) ; }"]}
{"ids": "73926", "code": ["public void continue Button Action Performed ( java . awt . event . Action Event e ) {", "if ( test Running && test Suspended ) {", "test Suspended = false ;", "if ( wrap Test ) {", "status Text 1 . set Text ( STR_ ) ;", "status Text 1 . set Visible ( true ) ; } } }"]}
{"ids": "25463", "code": ["@ HLE Function ( nid = NUM_ , version = NUM_ ) public int sce Net Adhoc Ptp Flush ( @ Check Argument ( STR_ ) int id , int timeout , int nonblock ) {", "return NUM_ ; }"]}
{"ids": "36429", "code": ["public void reset ( ) {", "display Cache . clear ( ) ;", "cached ID . clear ( ) ; }"]}
{"ids": "51939", "code": ["private void copy Directory ( File source , File dest ) throws IO Exception {", "for ( File f : source . list Files ( ) ) {", "File source File = new File ( source , f . get Name ( ) ) ;", "File dest File = new File ( dest , f . get Name ( ) ) ;", "if ( f . is Directory ( ) ) {", "dest File . mkdirs ( ) ;", "copy Directory ( source File , dest File ) ; }", "else copy File ( source File , dest File ) ; } }"]}
{"ids": "78215", "code": ["private void record Log Data ( ) {", "try {", "int size = m Recording Data . size ( ) ;", "if ( size == NUM_ ) {", "return ; }", "Vector < String > recording Data = new Vector < > ( m Recording Data ) ;", "File log Dir = Constants . get Record Dir ( this ) ;", "log Dir . mkdirs ( ) ;", "File log File = new File ( log Dir , m Recording Filename ) ;", "File Writer log File Writer = new File Writer ( log File , true ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "log File Writer . append ( recording Data . element At ( i ) + STR_ ) ;", "m Recording Data . remove Element At ( NUM_ ) ; }", "recording Data . remove All Elements ( ) ;", "log File Writer . close ( ) ; }", "catch ( Exception e ) {", "Log . e ( LOG TAG , STR_ + e . to String ( ) ) ; } }"]}
{"ids": "57313", "code": ["private static List < Command > load Rewrites ( String str ) {", "assert str != null ;", "List < Command > commands = new Array List < > ( ) ;", "for ( String line : str . split ( STR_ ) ) {", "add Line ( commands , line ) ; }", "return commands ; }"]}
{"ids": "31737", "code": ["private Map < UUID , int [ ] > reducers ( Collection < Cluster Node > top , Map < UUID , Collection < Hadoop Input Split > > mappers , int reducer Cnt ) {", "int total Weight = NUM_ ;", "List < Weighted Node > nodes = new Array List < > ( top . size ( ) ) ;", "for ( Cluster Node node : top ) {", "Collection < Hadoop Input Split > split = mappers . get ( node . id ( ) ) ;", "int weight = reducer Node Weight ( node , split != null ? split . size ( ) : NUM_ ) ;", "nodes . add ( new Weighted Node ( node . id ( ) , weight , weight ) ) ;", "total Weight += weight ; }", "int total Adjusted Weight = NUM_ ;", "for ( Weighted Node node : nodes ) {", "node . float Weight = ( ( float ) node . weight * reducer Cnt ) / total Weight ;", "node . weight = Math . round ( node . float Weight ) ;", "total Adjusted Weight += node . weight ; }", "Collections . sort ( nodes ) ;", "if ( total Adjusted Weight > reducer Cnt ) {", "List Iterator < Weighted Node > iter = nodes . list Iterator ( nodes . size ( ) - NUM_ ) ;", "while ( total Adjusted Weight != reducer Cnt ) {", "if ( ! iter . has Previous ( ) ) iter = nodes . list Iterator ( nodes . size ( ) - NUM_ ) ;", "Weighted Node node = iter . previous ( ) ;", "if ( node . weight > NUM_ ) {", "node . weight -= NUM_ ;", "total Adjusted Weight -- ; } } }", "else if ( total Adjusted Weight < reducer Cnt ) {", "List Iterator < Weighted Node > iter = nodes . list Iterator ( NUM_ ) ;", "while ( total Adjusted Weight != reducer Cnt ) {", "if ( ! iter . has Next ( ) ) iter = nodes . list Iterator ( NUM_ ) ;", "Weighted Node node = iter . next ( ) ;", "if ( node . float Weight > NUM_ ) {", "node . weight += NUM_ ;", "total Adjusted Weight ++ ; } } }", "int idx = NUM_ ;", "Map < UUID , int [ ] > reducers = new Hash Map < > ( nodes . size ( ) , NUM_ ) ;", "for ( Weighted Node node : nodes ) {", "if ( node . weight > NUM_ ) {", "int [ ] arr = new int [ node . weight ] ;", "for ( int i = NUM_ ; i < arr . length ; i ++ ) arr [ i ] = idx ++ ;", "reducers . put ( node . node Id , arr ) ; } }", "return reducers ; }"]}
{"ids": "11246", "code": ["public void http Request ( Http Request Event e ) throws java . io . IO Exception {", "String request = e . get Request ( ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + request + STR_ ) ; }", "if ( request . char At ( NUM_ ) == STR_ ) {", "request = request . substring ( NUM_ , request . length ( ) ) ; }", "int index = NUM_ ;", "index = request . index Of ( STR_ ) ;", "if ( index != - NUM_ ) {", "request = request . substring ( index + NUM_ , request . length ( ) ) ;", "Debug . message ( STR_ , STR_ ) ; }", "else {", "Debug . message ( STR_ , STR_ ) ; }", "try {", "i Server . handle Request ( request , e . get Output Stream ( ) ) ; }", "catch ( IO Exception ioe ) {", "Debug . error ( STR_ + ioe . get Message ( ) ) ; }", "catch ( Map Request Format Exception exception ) {", "String message = STR_ + exception . get Message ( ) + STR_ + Error Message ;", "Http Connection . write Http Response ( e . get Output Stream ( ) , Http Connection . CONTENT PLAIN , message ) ; } }"]}
{"ids": "54487", "code": ["public String format ( double val ) {", "Decimal Format df = get Double Format ( ) ;", "if ( df != null ) {", "return df . format ( val ) ; }", "return Double . to String ( val ) ; }"]}
{"ids": "81528", "code": ["public void remove Positions ( Collection < Integer > positions ) {", "Array List < Integer > positions List = new Array List < Integer > ( positions ) ;", "Collections . sort ( positions List ) ;", "Collections . reverse ( positions List ) ;", "for ( int position : positions List ) {", "m Items . remove ( position ) ; }", "notify Data Set Changed ( ) ; }"]}
{"ids": "52259", "code": ["private void reset Shape Bounds ( ) {", "Round Rectangle 2 D . Double rrect = ( Round Rectangle 2 D . Double ) shape ;", "rrect . set Round Rect ( NUM_ , NUM_ , get Bounds ( ) . width - NUM_ , get Bounds ( ) . height - NUM_ , NUM_ , NUM_ ) ; }"]}
{"ids": "30245", "code": ["public static Colour attempt To Get As Colour ( String part ) {", "Colour col = null ;", "try {", "col = Colour . value Of ( part . to Upper Case ( ) ) ; }", "catch ( Exception e ) { }", "return col ; }"]}
{"ids": "55845", "code": ["public final Array List < Move > remove Non Optimal ( Position pos , Array List < Move > move List ) {", "Array List < Move > optimal Moves = new Array List < Move > ( ) ;", "Array List < Move > unknown Moves = new Array List < Move > ( ) ;", "final int MATE 0 = NUM_ ;", "int best Score = - NUM_ ;", "Undo Info ui = new Undo Info ( ) ;", "for ( Move m : move List ) {", "pos . make Move ( m , ui ) ;", "int plies To Draw = Math . max ( NUM_ - pos . half Move Clock , NUM_ ) ;", "Gtb Probe Result res = gtb Probe ( pos ) ;", "pos . un Make Move ( m , ui ) ;", "if ( res . result == Gtb Probe Result . UNKNOWN ) {", "unknown Moves . add ( m ) ; }", "else {", "int w Score ;", "if ( res . result == Gtb Probe Result . WMATE ) {", "if ( res . plies To Mate <= plies To Draw ) w Score = MATE 0 - res . plies To Mate ;", "else w Score = NUM_ ; }", "else if ( res . result == Gtb Probe Result . BMATE ) {", "if ( res . plies To Mate <= plies To Draw ) w Score = - ( MATE 0 - res . plies To Mate ) ;", "else w Score = - NUM_ ; }", "else {", "w Score = NUM_ ; }", "int score = pos . white Move ? w Score : - w Score ;", "if ( score > best Score ) {", "optimal Moves . clear ( ) ;", "optimal Moves . add ( m ) ;", "best Score = score ; }", "else if ( score == best Score ) {", "optimal Moves . add ( m ) ; }", "else { } } }", "for ( Move m : unknown Moves ) optimal Moves . add ( m ) ;", "return ( optimal Moves . size ( ) < move List . size ( ) ) ? optimal Moves : null ; }"]}
{"ids": "39219", "code": ["public int rank ( ) {", "double eps = Math . pow ( NUM_ , - NUM_ ) ;", "double tol = Math . max ( m , n ) * s [ NUM_ ] * eps ;", "int r = NUM_ ;", "for ( int i = NUM_ ; i < s . length ; i ++ ) {", "if ( s [ i ] > tol ) {", "r ++ ; } }", "return r ; }"]}
{"ids": "34053", "code": ["public static void execute Random Modifiable Variable Modification ( Modifiable Variable Holder object ) {", "Field field = object . get Random Modifiable Variable Field ( ) ;", "execute Modifiable Variable Modification ( object , field ) ; }"]}
{"ids": "38517", "code": ["public static boolean save ( File file , String content ) {", "boolean result ;", "Buffered Writer writer ;", "writer = null ;", "try {", "writer = new Buffered Writer ( new File Writer ( file ) ) ;", "writer . write ( content ) ;", "writer . flush ( ) ;", "result = true ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "result = false ; }", "finally {", "if ( writer != null ) {", "try {", "writer . close ( ) ; }", "catch ( Exception e ) { } } }", "return result ; }"]}
{"ids": "78254", "code": ["private void delete Old Temp ( File file Cfg ) {", "Buffered Reader reader = null ;", "try {", "int count = NUM_ ;", "reader = new Buffered Reader ( new File Reader ( file Cfg ) ) ;", "String s Line ;", "while ( ( s Line = reader . read Line ( ) ) != null ) {", "File file = new File ( s Line ) ;", "if ( ! file . exists ( ) ) {", "continue ; }", "if ( file . delete ( ) ) {", "count ++ ; }", "else {", "hs Delete On Exit . add ( file ) ; } }", "log Debug ( Log Area . CONFIG , STR_ , count , file Cfg . get Absolute Path ( ) ) ; }", "catch ( IO Exception e ) { }", "finally {", "if ( reader != null ) {", "try {", "reader . close ( ) ; }", "catch ( IO Exception e ) { } } } }"]}
{"ids": "69882", "code": ["public void flush ( ) {", "final Bigdata Sail Repository Connection cxn = tl Tx . get ( ) ;", "if ( cxn != null ) {", "Code . wrap Throw ( null ) ; } }"]}
{"ids": "74787", "code": ["@ Override public Buffered Image JPEG To RGB Image ( final byte [ ] data , final int ww , final int hh , final int p X , final int p Y ) {", "Buffered Image image = null ;", "Raster ras = JPEG Decoder . get Raster From JPEG ( data , STR_ ) ;", "if ( ras != null ) {", "ras = cleanup Raster ( ras , p X , p Y , component Count ) ;", "final int w = ras . get Width ( ) ;", "final int h = ras . get Height ( ) ;", "final Data Buffer Byte rgb = ( Data Buffer Byte ) ras . get Data Buffer ( ) ;", "image = create Image ( w , h , rgb . get Data ( ) ) ; }", "return image ; }"]}
{"ids": "64248", "code": ["public void despawn ( Visible Object object ) {", "despawn ( object , true ) ; }"]}
{"ids": "10079", "code": ["@ Suppress Warnings ( STR_ ) public static void create Project Constraint ( Zip File zip , Project a Project , Repository Service a Repository ) throws IO Exception {", "for ( Enumeration zip Enumerate = zip . entries ( ) ; zip Enumerate . has More Elements ( ) ; ) {", "Zip Entry entry = ( Zip Entry ) zip Enumerate . next Element ( ) ;", "String entry Name = normalize Entry Name ( entry ) ;", "if ( entry Name . starts With ( CONSTRAINTS ) ) {", "String filename = Filename Utils . get Name ( entry . get Name ( ) ) ;", "Constraint Set constraint Set = new Constraint Set ( ) ;", "constraint Set . set Project ( a Project ) ;", "constraint Set . set Name ( filename ) ;", "a Repository . create Constraint Set ( constraint Set ) ;", "a Repository . write Constraint Set ( constraint Set , zip . get Input Stream ( entry ) ) ;", "LOG . info ( STR_ + filename + STR_ + a Project . get Name ( ) + STR_ + a Project . get Id ( ) + STR_ ) ; } } }"]}
{"ids": "84014", "code": ["public Operation copy To ( Extent target ) {", "Block Transform Extent extent = new Block Transform Extent ( original , transform , world Data . get Block Registry ( ) ) ;", "Forward Extent Copy copy = new Forward Extent Copy ( extent , original . get Region ( ) , original . get Origin ( ) , target , original . get Origin ( ) ) ;", "copy . set Transform ( transform ) ;", "return copy ; }"]}
{"ids": "47612", "code": ["@ Caller Sensitive public Class < ? > for Class ( ) {", "if ( cl == null ) {", "return null ; }", "require Initialized ( ) ;", "if ( System . get Security Manager ( ) != null ) {", "Class < ? > caller = Reflection . get Caller Class ( ) ;", "if ( Reflect Util . needs Package Access Check ( caller . get Class Loader ( ) , cl . get Class Loader ( ) ) ) {", "Reflect Util . check Package Access ( cl ) ; } }", "return cl ; }"]}
{"ids": "40802", "code": ["private void path Style Helper ( String style , String offset ) {", "if ( style == null ) {", "return ; }", "if ( style . equals ( STR_ ) ) {", "stroke Paint . set Path Effect ( null ) ;", "return ; }", "String Tokenizer st = new String Tokenizer ( style , STR_ ) ;", "int count = st . count Tokens ( ) ;", "float [ ] intervals = new float [ ( count & NUM_ ) == NUM_ ? count * NUM_ : count ] ;", "float max = NUM_ ;", "float current = NUM_ ;", "int i = NUM_ ;", "while ( st . has More Tokens ( ) ) {", "intervals [ i ++ ] = current = to Float ( st . next Token ( ) , current ) ;", "max += current ; }", "for ( int start = NUM_ ; i < intervals . length ; i ++ , start ++ ) {", "max += intervals [ i ] = intervals [ start ] ; }", "float off = NUM_ ;", "if ( offset != null ) {", "try {", "off = Float . parse Float ( offset ) % max ; }", "catch ( Number Format Exception e ) { } }", "stroke Paint . set Path Effect ( new Dash Path Effect ( intervals , off ) ) ; }"]}
{"ids": "16573", "code": ["private Size parse Old Bounded Size ( String token , boolean set Max ) {", "int semicolon Index = token . index Of ( STR_ ) ;", "String size Token 1 = token . substring ( NUM_ , semicolon Index ) ;", "String size Token 2 = token . substring ( semicolon Index + NUM_ , token . length ( ) - NUM_ ) ;", "Size size 1 = parse Atomic Size ( size Token 1 ) ;", "Size size 2 = parse Atomic Size ( size Token 2 ) ;", "if ( is Constant ( size 1 ) ) {", "if ( size 2 instanceof Sizes . Component Size ) {", "return new Bounded Size ( size 2 , set Max ? null : size 1 , set Max ? size 1 : null ) ; }", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( is Constant ( size 2 ) ) {", "return new Bounded Size ( size 1 , set Max ? null : size 2 , set Max ? size 2 : null ) ; }", "throw new Illegal Argument Exception ( STR_ ) ; }"]}
{"ids": "32552", "code": ["Builder add Encoded Query Parameter ( String encoded Name , String encoded Value ) {", "if ( encoded Name == null ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( encoded Query Names And Values == null ) encoded Query Names And Values = new Array List < > ( ) ;", "encoded Query Names And Values . add ( canonicalize ( encoded Name , QUERY COMPONENT ENCODE SET , true , true ) ) ;", "encoded Query Names And Values . add ( encoded Value != null ? canonicalize ( encoded Value , QUERY COMPONENT ENCODE SET , true , true ) : null ) ;", "return this ; }"]}
{"ids": "82930", "code": ["public Namespace ( Principal User creator , String qualifier , Principal User owner , Set < Principal User > users ) {", "super ( creator ) ;", "set Qualifier ( qualifier ) ;", "set Owner ( owner ) ;", "if ( users != null && ! users . is Empty ( ) ) {", "set Users ( users ) ; }", "add User ( owner ) ; }"]}
{"ids": "68982", "code": ["public void update ( long dt , float ratio Y ) {", "double step = NUM_ * Math . PI / POINTS PER CIRCLE ;", "angle += dt * BUBBLE D ANGLE ;", "float from X = start X + ( float ) ( NUM_ * Math . sin ( angle ) ) ;", "float to X = from X + size ;", "float from Y = this . from Y + dt * speed ;", "float to Y = from Y + size ;", "center Y += dt * virtual Speed ;", "get Color ( ) [ NUM_ ] = ( TOP Y - center Y / TOP Y ) ;", "vertex Buffer . put ( NUM_ , Utils . normalize Gl ( NUM_ , from X , to X ) ) ;", "vertex Buffer . put ( NUM_ , Utils . normalize Gl ( center Y * ratio Y , from Y , to Y ) ) ;", "for ( int i = NUM_ ; i <= POINTS PER CIRCLE ; i ++ ) {", "vertex Buffer . put ( COORDS PER VERTEX * i , Utils . normalize Gl ( ( float ) Math . sin ( - Math . PI + step * i ) , from X , to X ) ) ;", "vertex Buffer . put ( COORDS PER VERTEX * i + NUM_ , Utils . normalize Gl ( ( float ) Math . cos ( - Math . PI + step * i ) * ratio Y , from Y , to Y ) ) ; }", "this . from Y = from Y ; }"]}
{"ids": "15675", "code": ["public final void clear ( ) {", "if ( GWT . is Script ( ) ) {", "js Array . clear ( ) ; }", "else {", "java Array . clear ( ) ; } }"]}
{"ids": "17680", "code": ["void fully Lock ( ) {", "put Lock . lock ( ) ;", "take Lock . lock ( ) ; }"]}
{"ids": "67148", "code": ["private void update Podcast Publication Date And Last Media Url ( Episode episode , Podcast podcast ) {", "Date podcast Publication Date = podcast . get Publication Date ( ) ;", "boolean episode Pub Date Is More Recent = episode . get Publication Date ( ) != null && ( podcast Publication Date == null || podcast Publication Date . before ( episode . get Publication Date ( ) ) ) ;", "if ( episode Pub Date Is More Recent ) {", "podcast . set Publication Date ( episode . get Publication Date ( ) ) ;", "podcast . set Last Episode Media Url ( episode . get Media Url ( ) ) ; } }"]}
{"ids": "52982", "code": ["public static < O > KNN Query < O > precomputed KNN Query ( Database database , Relation < O > relation , Distance Query < O > dq , int k ) {", "KNN Query < O > knnq = database . get KNN Query ( dq , k , Database Query . HINT HEAVY USE , Database Query . HINT OPTIMIZED ONLY , Database Query . HINT NO CACHE ) ;", "if ( knnq instanceof Preprocessor KNN Query ) {", "return knnq ; }", "Materialize KNN Preprocessor < O > preproc = new Materialize KNN Preprocessor < > ( relation , dq . get Distance Function ( ) , k ) ;", "preproc . initialize ( ) ;", "return preproc . get KNN Query ( dq , k ) ; }"]}
{"ids": "48538", "code": ["public boolean draw Image ( Image img , Affine Transform xform , Image Observer observer ) {", "if ( img == null ) {", "return true ; }", "if ( xform == null || xform . is Identity ( ) ) {", "return draw Image ( img , NUM_ , NUM_ , null , observer ) ; }", "if ( is Hi DPI Image ( img ) ) {", "final int w = img . get Width ( null ) ;", "final int h = img . get Height ( null ) ;", "final Affine Transform tx = new Affine Transform ( transform ) ;", "transform ( xform ) ;", "boolean result = draw Hi DPI Image ( img , NUM_ , NUM_ , w , h , NUM_ , NUM_ , w , h , null , observer ) ;", "transform . set Transform ( tx ) ;", "invalidate Transform ( ) ;", "return result ; }", "try {", "return imagepipe . transform Image ( this , img , xform , observer ) ; }", "catch ( Invalid Pipe Exception e ) {", "try {", "revalidate All ( ) ;", "return imagepipe . transform Image ( this , img , xform , observer ) ; }", "catch ( Invalid Pipe Exception e 2 ) {", "return false ; } }", "finally {", "surface Data . mark Dirty ( ) ; } }"]}
{"ids": "13771", "code": ["public void begin Display ( Display Event event ) throws Model Control Exception {", "super . begin Display ( event , false ) ;", "reset Button State ( TBL BUTTON DELETE ) ;", "Agents Model model = ( Agents Model ) get Model ( ) ;", "String agent Type = get Display ID Type ( ) ;", "Object [ ] param = { agent Type } ;", "pt Model . set Page Title Text ( model . get Localized String ( STR_ + agent Type ) ) ;", "pt Model . set Page Title Help Message ( model . get Localized String ( STR_ + agent Type + STR_ ) ) ;", "tbl Model . set Title ( Message Format . format ( model . get Localized String ( STR_ ) , param ) ) ;", "tbl Model . set Title Label ( Message Format . format ( model . get Localized String ( STR_ ) , param ) ) ;", "tbl Model . set Summary ( Message Format . format ( model . get Localized String ( STR_ ) , param ) ) ;", "tbl Group Model . set Title ( Message Format . format ( model . get Localized String ( STR_ ) , param ) ) ;", "tbl Group Model . set Title Label ( Message Format . format ( model . get Localized String ( STR_ ) , param ) ) ;", "tbl Group Model . set Summary ( Message Format . format ( model . get Localized String ( STR_ ) , param ) ) ;", "get Agent Names ( ) ;", "CC Button b = ( CC Button ) get Child ( TBL BUTTON DELETE ) ;", "b . set Disabled ( true ) ;", "b = ( CC Button ) get Child ( TBL BUTTON DELETE GROUP ) ;", "b . set Disabled ( true ) ; }"]}
{"ids": "4965", "code": ["public void select all ( ) {", "Arrays . fill ( sel array , true ) ; }"]}
{"ids": "39835", "code": ["public Nvp Builder add Raw ( final String name , final String value ) {", "npv . put ( name , value ) ;", "return this ; }"]}
{"ids": "61943", "code": ["@ Override public int length ( ) {", "return set . size ( ) ; }"]}
{"ids": "39853", "code": ["public List < Country RO > view Address Country Options ( final Shopping Cart cart , final Shop shop , final String address Type ) {", "final List < Country > countries = address Book Facade . get All Countries ( shop . get Code ( ) , address Type ) ;", "return map ( countries , Country RO . class , Country . class ) ; }"]}
{"ids": "44025", "code": ["public void add Pause Listener ( Animator Pause Listener listener ) {", "if ( m Pause Listeners == null ) {", "m Pause Listeners = new Array List < Animator Pause Listener > ( ) ; }", "m Pause Listeners . add ( listener ) ; }"]}
{"ids": "38236", "code": ["@ Override public boolean batch Finished ( ) throws Exception {", "if ( get Input Format ( ) == null ) {", "throw new Illegal State Exception ( STR_ ) ; }", "Instances to Filter = get Input Format ( ) ;", "if ( ! is First Batch Done ( ) ) {", "Instances to Filter Ignoring Attributes = remove Ignored ( to Filter ) ;", "File file = get Serialized Clusterer File ( ) ;", "if ( ! file . is Directory ( ) ) {", "Object Input Stream ois = new Object Input Stream ( new File Input Stream ( file ) ) ;", "m Actual Clusterer = ( Clusterer ) ois . read Object ( ) ;", "Instances header = null ;", "try {", "header = ( Instances ) ois . read Object ( ) ; }", "catch ( Exception e ) { }", "ois . close ( ) ;", "if ( ( header != null ) && ( ! header . equal Headers ( to Filter Ignoring Attributes ) ) ) {", "throw new Weka Exception ( STR_ + header . equal Headers Msg ( to Filter Ignoring Attributes ) ) ; } }", "else {", "m Actual Clusterer = Abstract Clusterer . make Copy ( m Clusterer ) ;", "m Actual Clusterer . build Clusterer ( to Filter Ignoring Attributes ) ; }", "Instances filtered = new Instances ( to Filter , NUM_ ) ;", "Array List < String > nominal values = new Array List < String > ( m Actual Clusterer . number Of Clusters ( ) ) ;", "for ( int i = NUM_ ; i < m Actual Clusterer . number Of Clusters ( ) ; i ++ ) {", "nominal values . add ( STR_ + ( i + NUM_ ) ) ; }", "filtered . insert Attribute At ( new Attribute ( STR_ , nominal values ) , filtered . num Attributes ( ) ) ;", "set Output Format ( filtered ) ; }", "for ( int i = NUM_ ; i < to Filter . num Instances ( ) ; i ++ ) {", "convert Instance ( to Filter . instance ( i ) ) ; }", "flush Input ( ) ;", "m New Batch = true ;", "m First Batch Done = true ;", "return ( num Pending Output ( ) != NUM_ ) ; }"]}
{"ids": "83312", "code": ["public void add Component ( T component ) {", "components . add ( component ) ; }"]}
{"ids": "67329", "code": ["public static Ui Result open Url ( URI uri ) {", "return open Url ( uri . to String ( ) ) ; }"]}
{"ids": "48821", "code": ["public Byte Banded Raster ( Sample Model sample Model , Point origin ) {", "this ( sample Model , sample Model . create Data Buffer ( ) , new Rectangle ( origin . x , origin . y , sample Model . get Width ( ) , sample Model . get Height ( ) ) , origin , null ) ; }"]}
{"ids": "24252", "code": ["static boolean is Refresh Notification Registered ( Notification Listener client , Refresh Notification Type type ) {", "boolean is Registered = false ;", "Map < Refresh Notification Type , Integer > notifications = null ;", "synchronized ( refresh Clients ) {", "notifications = ( Map < Refresh Notification Type , Integer > ) refresh Clients . get ( client ) ; }", "if ( notifications != null ) {", "Integer timer Notification Id = notifications . get ( type ) ;", "if ( timer Notification Id != null ) {", "is Registered = true ; } }", "return is Registered ; }"]}
{"ids": "31709", "code": ["private Collection < String > read Process Output ( Process proc ) throws IO Exception {", "Buffered Reader rdr = new Buffered Reader ( new Input Stream Reader ( proc . get Input Stream ( ) ) ) ;", "Collection < String > res = new Array List < > ( ) ;", "String s ;", "while ( ( s = rdr . read Line ( ) ) != null ) res . add ( s ) ;", "return res ; }"]}
{"ids": "86864", "code": ["public void fill Header And Footer ( final Http Servlet Request request , final Http Servlet Response response , final Map < String , Object > data Model ) throws Exception {", "fill Header ( request , response , data Model ) ;", "fill Footer ( data Model ) ; }"]}
{"ids": "30716", "code": ["public void add Operand ( I Space Predicate operand ) {", "if ( operands List == null ) operands List = new Array List < I Space Predicate > ( ) ;", "operands List . add ( operand ) ; }"]}
{"ids": "12301", "code": ["public static String decode ( String s , Type t ) {", "if ( s == null ) {", "throw new Illegal Argument Exception ( ) ; }", "final int n = s . length ( ) ;", "if ( n == NUM_ ) {", "return s ; }", "if ( s . index Of ( STR_ ) < NUM_ ) {", "if ( t == Type . QUERY PARAM ) {", "if ( s . index Of ( STR_ ) < NUM_ ) {", "return s ; } }", "else {", "return s ; } }", "else {", "if ( n < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( s . char At ( n - NUM_ ) == STR_ ) {", "throw new Illegal Argument Exception ( STR_ + ( n - NUM_ ) ) ; } }", "if ( t == null ) {", "return decode ( s , n ) ; }", "switch ( t ) {", "case HOST :", "return decode Host ( s , n ) ;", "case QUERY PARAM :", "return decode Query Param ( s , n ) ;", "default :", "return decode ( s , n ) ; } }"]}
{"ids": "30309", "code": ["public Big Decimal calculate Total Collected Amt ( final Bill Receipt Info bri , final List < Eg Bill Details > bill Det List ) throws Invalid Account Head Exception {", "return bri . get Total Amount ( ) ; }"]}
{"ids": "40910", "code": ["public void remove All Ims ( ) {", "ims . clear ( ) ; }"]}
{"ids": "27519", "code": ["public void copy Reader ( String encoding , Reader r ) throws IO Exception {", "super . set Content Encoding ( encoding ) ;", "String s = read String ( r ) ;", "content = s . get Bytes ( encoding ) ; }"]}
{"ids": "78962", "code": ["private void clear Dictionary Cache ( ) {", "Map < String , Dictionary > dictionary Caches = surrogate Key Gen . get Dictionary Caches ( ) ;", "List < Dictionary > reverse Dictionaries = new Array List < > ( dictionary Caches . values ( ) ) ;", "for ( int i = NUM_ ; i < reverse Dictionaries . size ( ) ; i ++ ) {", "Dictionary dictionary = reverse Dictionaries . get ( i ) ;", "dictionary . clear ( ) ; } }"]}
{"ids": "8122", "code": ["public static String to Type String ( Object [ ] arguments , int max Size ) {", "if ( arguments == null ) {", "return STR_ ; }", "String Builder arg Buf = new String Builder ( ) ;", "for ( int i = NUM_ ; i < arguments . length ; i ++ ) {", "if ( max Size != - NUM_ && arg Buf . length ( ) > max Size ) {", "arg Buf . append ( STR_ ) ;", "break ; }", "else {", "if ( i > NUM_ ) {", "arg Buf . append ( STR_ ) ; }", "arg Buf . append ( arguments [ i ] != null ? type Name ( arguments [ i ] ) : STR_ ) ; } }", "return arg Buf . to String ( ) ; }"]}
{"ids": "46431", "code": ["public boolean rename File ( File old File , File new File ) {", "synchronized ( file Cache ) {", "if ( old File . rename To ( new File ) ) {", "validate File Cache ( ) ;", "return true ; }", "return false ; } }"]}
{"ids": "2009", "code": ["public Future < ? > execute ( Camera Command command ) {", "if ( m Closed ) {", "return Futures . immediate Future ( null ) ; }", "synchronized ( m Lock ) {", "if ( m Executor == null ) {", "m Executor = m Executor Provider . get ( ) ; }", "check Not Null ( m Executor ) ;", "return m Executor . submit ( new Command Runnable ( command ) ) ; } }"]}
{"ids": "15738", "code": ["public int length ( ) {", "return text . length ( ) ; }"]}
{"ids": "71334", "code": ["public static String serialize Digest Response ( Map < String , String > param Map ) {", "String Builder sb = new String Builder ( STR_ ) ;", "boolean prefix Comma = false ;", "for ( Map . Entry < String , String > entry : param Map . entry Set ( ) ) {", "if ( ! prefix Comma ) {", "prefix Comma = true ; }", "else {", "sb . append ( STR_ ) ; }", "sb . append ( entry . get Key ( ) ) ;", "sb . append ( STR_ ) ;", "sb . append ( entry . get Value ( ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "10491", "code": ["protected Json Encoding find Encoding ( Media Type media Type , Multivalued Map < String , Object > http Headers ) {", "return Json Encoding . UTF 8 ; }"]}
{"ids": "51869", "code": ["static Buffered Image convert Image ( Buffered Image image ) {", "switch ( image . get Type ( ) ) {", "case Buffered Image . TYPE INT ARGB PRE :", "return image ;", "case Buffered Image . TYPE 4 BYTE ABGR :", "image . coerce Data ( true ) ;", "return image ; }", "Buffered Image converted Image = new Buffered Image ( image . get Width ( ) , image . get Height ( ) , Buffered Image . TYPE INT ARGB PRE ) ;", "Graphics 2 D g = converted Image . create Graphics ( ) ;", "g . set Color ( new java . awt . Color ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "g . fill Rect ( NUM_ , NUM_ , image . get Width ( ) , image . get Height ( ) ) ;", "g . draw Image ( image , NUM_ , NUM_ , null ) ;", "g . dispose ( ) ;", "return converted Image ; }"]}
{"ids": "45746", "code": ["public long start ( ) {", "start Time = System . current Time Millis ( ) ;", "return start Time ; }"]}
{"ids": "62754", "code": ["public void next ( ) {", "if ( iterator . has Next ( ) ) {", "View current View = iterator . next ( ) ;", "if ( is Using Default Listener ( ) ) current View . set On Click Listener ( null ) ;", "if ( iterator . next Index ( ) < m Views . size ( ) ) {", "View next View = m Views . get ( iterator . next Index ( ) ) ;", "if ( is Using Default Listener ( ) ) next View . set On Click Listener ( listener ) ;", "Controller Animator animator = get Default Forward Animation ( ) ;", "animator . set Old View ( current View ) ;", "animator . set New View ( next View ) ;", "current View . start Animation ( animator ) ;", "if ( iterator . next Index ( ) == m Views . size ( ) - NUM_ ) if ( has Controller Listener ( ) ) m Listener . on End Reached ( ) ; }", "else {", "if ( m Loop ) {", "iterator = m Views . list Iterator ( ) ;", "View next View = m Views . get ( NUM_ ) ;", "if ( m Use Default Listener ) next View . set On Click Listener ( listener ) ;", "Controller Animator animator = get Default Forward Animation ( ) ;", "animator . set Old View ( current View ) ;", "animator . set New View ( next View ) ;", "current View . start Animation ( animator ) ; } } } }"]}
{"ids": "877", "code": ["public void cache Resolved Method ( Class clas , Class [ ] types , Method method ) {", "if ( Interpreter . DEBUG ) Interpreter . debug ( STR_ + clas + STR_ + method ) ;", "Signature Key sk = new Signature Key ( clas , method . get Name ( ) , types ) ;", "if ( Modifier . is Static ( method . get Modifiers ( ) ) ) resolved Static Methods . put ( sk , method ) ;", "else resolved Object Methods . put ( sk , method ) ; }"]}
{"ids": "15521", "code": ["private void destroy Beans ( Map < String , Object > view Map , Map < String , View Scope Context Object > context Map ) {", "Array List < String > removal Name List = new Array List < > ( ) ;", "if ( context Map != null ) {", "for ( Map . Entry < String , View Scope Context Object > entry : context Map . entry Set ( ) ) {", "String passivation Capable Id = entry . get Key ( ) ;", "Contextual contextual = bean Manager . get Passivation Capable Bean ( passivation Capable Id ) ;", "View Scope Context Object context Object = entry . get Value ( ) ;", "Creational Context creational Context = bean Manager . create Creational Context ( contextual ) ;", "contextual . destroy ( view Map . get ( context Object . get Name ( ) ) , creational Context ) ;", "removal Name List . add ( context Object . get Name ( ) ) ; }", "Iterator < String > removal Names = removal Name List . iterator ( ) ;", "while ( removal Names . has Next ( ) ) {", "String name = removal Names . next ( ) ;", "view Map . remove ( name ) ; }", "context Map . clear ( ) ; } }"]}
{"ids": "29131", "code": ["public static void close ( @ Check For Null Output Stream output Stream ) {", "if ( output Stream == null ) {", "return ; }", "try {", "output Stream . close ( ) ; }", "catch ( IO Exception e ) { } }"]}
{"ids": "13035", "code": ["@ Override public Node item ( int index ) {", "return ( nodes != null && index < nodes . size ( ) ) ? ( Node ) ( nodes . get ( index ) ) : null ; }"]}
{"ids": "60469", "code": ["private int char To Visible Width ( char c , @ Jdk Constants . Font Style int font Type , int current X ) {", "if ( c == STR_ ) {", "return NUM_ ; }", "if ( c == STR_ ) {", "return Editor Util . next Tab Stop ( current X , this ) - current X ; }", "return Editor Util . char Width ( c , font Type , this ) ; }"]}
{"ids": "9094", "code": ["public static void create Dir ( File target ) throws Ade Usage Exception {", "if ( ! target . exists ( ) && ! target . mkdir ( ) && ! target . exists ( ) ) {", "throw new Ade Usage Exception ( STR_ + target . get Path ( ) ) ; } }"]}
{"ids": "5748", "code": ["public GTS Encoder ( long base Timestamp ) {", "this . base Timestamp = base Timestamp ;", "this . stream = new Byte Array Output Stream ( ) ;", "this . wrapping Key = null ; }"]}
{"ids": "69738", "code": ["public static String encode ( final Coordinate [ ] coords ) {", "long last Lat = NUM_ ;", "long last Lng = NUM_ ;", "final String Buffer result = new String Buffer ( ) ;", "for ( final Coordinate point : coords ) {", "long lat = Math . round ( point . y * NUM_ ) ;", "long lng = Math . round ( point . x * NUM_ ) ;", "long d Lat = lat - last Lat ;", "long d Lng = lng - last Lng ;", "encode ( d Lat , result ) ;", "encode ( d Lng , result ) ;", "last Lat = lat ;", "last Lng = lng ; }", "return result . to String ( ) ; }"]}
{"ids": "73394", "code": ["private void extract Weight Values ( List < Synapse > synapses ) {", "int ex Weights = NUM_ ;", "int in Weights = NUM_ ;", "for ( Synapse s : synapses ) {", "double w = s . get Strength ( ) ;", "if ( w > NUM_ ) {", "ex Weights ++ ; }", "else {", "in Weights ++ ; } }", "weights [ NUM_ ] = new double [ ex Weights ] ;", "weights [ NUM_ ] = new double [ in Weights ] ;", "ex Weights = NUM_ ;", "in Weights = NUM_ ;", "if ( weights [ NUM_ ] . length != NUM_ ) {", "for ( Synapse s : synapses ) {", "double w = s . get Strength ( ) ;", "if ( w > NUM_ ) {", "weights [ NUM_ ] [ ex Weights ++ ] = w ; }", "else {", "weights [ NUM_ ] [ in Weights ++ ] = w ; } } } }"]}
{"ids": "14424", "code": ["@ Override public void close ( ) {", "try {", "flush ( ) ; }", "catch ( AM Log Exception ale ) {", "Debug . error ( table Name + STR_ + ale . get Message ( ) ) ; }", "if ( conn != null ) {", "try {", "conn . close ( ) ; }", "catch ( SQL Exception ce ) {", "Debug . error ( table Name + STR_ , ce ) ; } }", "stop Buffer Timer ( ) ; }"]}
{"ids": "83785", "code": ["public boolean contains ( List < Integer > hashes ) {", "Iterator < Integer > ni = hashes . iterator ( ) ;", "for ( int i = NUM_ ; i < hash Functions ; ++ i ) {", "if ( ! test Bit ( ( int ) ( ( ni . next ( ) & NUM_ ) % ( filter . length * NUM_ ) ) ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "19996", "code": ["private void ensure Capacity ( int additional Data ) {", "if ( ( this . position + additional Data ) > this . byte Buffer . length ) {", "int new Length = ( int ) ( this . byte Buffer . length * NUM_ ) ;", "if ( new Length < ( this . byte Buffer . length + additional Data ) ) {", "new Length = this . byte Buffer . length + ( int ) ( additional Data * NUM_ ) ; }", "if ( new Length < this . byte Buffer . length ) {", "new Length = this . byte Buffer . length + additional Data ; }", "byte [ ] new Bytes = new byte [ new Length ] ;", "System . arraycopy ( this . byte Buffer , NUM_ , new Bytes , NUM_ , this . byte Buffer . length ) ;", "this . byte Buffer = new Bytes ; } }"]}
{"ids": "10009", "code": ["public boolean is Valid Number ( Phone Number number ) {", "String region Code = get Region Code For Number ( number ) ;", "return is Valid Number For Region ( number , region Code ) ; }"]}
{"ids": "12074", "code": ["private String trim Url ( String uri ) {", "if ( uri == null ) return STR_ ;", "if ( uri . ends With ( STR_ ) ) uri = uri . substring ( NUM_ , uri . length ( ) - NUM_ ) ;", "return uri ; }"]}
{"ids": "35101", "code": ["public static String add Alpha ( String original Color , double alpha ) {", "long alpha Fixed = Math . round ( alpha * NUM_ ) ;", "String alpha Hex = Long . to Hex String ( alpha Fixed ) ;", "if ( alpha Hex . length ( ) == NUM_ ) {", "alpha Hex = STR_ + alpha Hex ; }", "original Color = original Color . replace ( STR_ , STR_ + alpha Hex ) ;", "return original Color ; }"]}
{"ids": "52970", "code": ["public void stop ( ) {", "server . stop ( NUM_ ) ; }"]}
{"ids": "13182", "code": ["protected Date Time Data parse ( String str , int duration Type ) throws Schema Date Time Exception {", "int len = str . length ( ) ;", "Date Time Data date = new Date Time Data ( str , this ) ;", "int start = NUM_ ;", "char c = str . char At ( start ++ ) ;", "if ( c != STR_ && c != STR_ ) {", "throw new Schema Date Time Exception ( ) ; }", "else {", "date . utc = ( c == STR_ ) ? STR_ : NUM_ ;", "if ( c == STR_ && str . char At ( start ++ ) != STR_ ) {", "throw new Schema Date Time Exception ( ) ; } }", "int negate = NUM_ ;", "if ( date . utc == STR_ ) {", "negate = - NUM_ ; }", "boolean designator = false ;", "int end Date = index Of ( str , start , len , STR_ ) ;", "if ( end Date == - NUM_ ) {", "end Date = len ; }", "else if ( duration Type == YEARMONTHDURATION TYPE ) {", "throw new Schema Date Time Exception ( ) ; }", "int end = index Of ( str , start , end Date , STR_ ) ;", "if ( end != - NUM_ ) {", "if ( duration Type == DAYTIMEDURATION TYPE ) {", "throw new Schema Date Time Exception ( ) ; }", "date . year = negate * parse Int ( str , start , end ) ;", "start = end + NUM_ ;", "designator = true ; }", "end = index Of ( str , start , end Date , STR_ ) ;", "if ( end != - NUM_ ) {", "if ( duration Type == DAYTIMEDURATION TYPE ) {", "throw new Schema Date Time Exception ( ) ; }", "date . month = negate * parse Int ( str , start , end ) ;", "start = end + NUM_ ;", "designator = true ; }", "end = index Of ( str , start , end Date , STR_ ) ;", "if ( end != - NUM_ ) {", "if ( duration Type == YEARMONTHDURATION TYPE ) {", "throw new Schema Date Time Exception ( ) ; }", "date . day = negate * parse Int ( str , start , end ) ;", "start = end + NUM_ ;", "designator = true ; }", "if ( len == end Date && start != len ) {", "throw new Schema Date Time Exception ( ) ; }", "if ( len != end Date ) {", "end = index Of ( str , ++ start , len , STR_ ) ;", "if ( end != - NUM_ ) {", "date . hour = negate * parse Int ( str , start , end ) ;", "start = end + NUM_ ;", "designator = true ; }", "end = index Of ( str , start , len , STR_ ) ;", "if ( end != - NUM_ ) {", "date . minute = negate * parse Int ( str , start , end ) ;", "start = end + NUM_ ;", "designator = true ; }", "end = index Of ( str , start , len , STR_ ) ;", "if ( end != - NUM_ ) {", "date . second = negate * parse Second ( str , start , end ) ;", "start = end + NUM_ ;", "designator = true ; }", "if ( start != len || str . char At ( -- start ) == STR_ ) {", "throw new Schema Date Time Exception ( ) ; } }", "if ( ! designator ) {", "throw new Schema Date Time Exception ( ) ; }", "return date ; }"]}
{"ids": "42297", "code": ["final void copy Into Local State ( Operand [ ] local State ) {", "local State = new Operand [ local State . length ] ;", "System . arraycopy ( local State , NUM_ , local State , NUM_ , local State . length ) ;", "set Local Known ( ) ; }"]}
{"ids": "66585", "code": ["@ Suppress Warnings ( STR_ ) private Hash Map < String , DB Object > load DB Objects ( Class object Class ) {", "Hash Map < String , DB Object > object Map = new Hash Map < String , DB Object > ( ) ;", "DB Object db Object = new DB Object ( this , object Class ) ;", "String object To Load = s logger . localize Message ( STR_ ) ;", "String objects To Load = s logger . localize Message ( STR_ ) ;", "String sql Load Headers = null ;", "String sql Load Contents = null ;", "if ( db Object != null ) {", "object To Load = db Object . get Object Type ( ) ;", "objects To Load = db Object . get Object Types ( ) ;", "sql Load Headers = db Object . get Load Header SQL ( ) ;", "sql Load Contents = db Object . get Load Content SQL ( ) ; }", "s logger . log ( Level . FINE , STR_ , new Object [ ] { objects To Load , get Direction ( ) } ) ;", "Prepared Statement Wrapper stmt Load Headers = set Prepared Statement ( sql Load Headers ) ;", "Prepared Statement Wrapper stmt Load Contents = set Prepared Statement ( sql Load Contents ) ;", "int counter = NUM_ ;", "if ( db Object != null ) {", "String sql = db Object . get Load Object SQL ( ) ;", "Statement stmt = set Statement ( ) ;", "Result Set rs = execute Query ( stmt , sql ) ;", "while ( get Result Set Next ( rs ) ) {", "String s = get Result Set String ( rs , STR_ ) ;", "if ( ! object Map . contains Key ( s ) ) {", "DB Object obj = new DB Object ( this , object Class , s ) ;", "obj . populate ( stmt Load Headers , stmt Load Contents ) ;", "if ( obj . is Populated ( ) ) {", "object Map . put ( s . to Upper Case ( ) , obj ) ;", "counter ++ ; } } }", "release Result Set ( rs ) ;", "release Statement ( stmt ) ; }", "release Prepared Statement ( stmt Load Headers ) ;", "release Prepared Statement ( stmt Load Contents ) ;", "if ( counter == NUM_ ) s logger . log ( Level . FINE , STR_ , new Object [ ] { Integer . to String ( counter ) , object To Load } ) ;", "else s logger . log ( Level . FINE , STR_ , new Object [ ] { Integer . to String ( counter ) , objects To Load } ) ;", "s logger . flush ( ) ;", "return object Map ; }"]}
{"ids": "23993", "code": ["protected Object attempt Read Response ( Connection cnx ) throws Exception {", "Message msg = create Response Message ( ) ;", "if ( msg != null ) {", "msg . set Comms ( cnx . get Socket ( ) , cnx . get Input Stream ( ) , cnx . get Output Stream ( ) , cnx . get Comm Buffer ( ) , cnx . get Stats ( ) ) ;", "if ( msg instanceof Chunked Message ) {", "try {", "return process Response ( msg , cnx ) ; }", "finally {", "msg . unset Comms ( ) ;", "process Secure Bytes ( cnx , msg ) ; } }", "else {", "try {", "msg . recv ( ) ; }", "finally {", "msg . unset Comms ( ) ;", "process Secure Bytes ( cnx , msg ) ; }", "return process Response ( msg , cnx ) ; } }", "else {", "return null ; } }"]}
{"ids": "86779", "code": ["public synchronized boolean add ( E e , boolean has Next ) {", "while ( m Internal Queue . size ( ) >= m Max Size && ! m Closed ) {", "notify All ( ) ;", "try {", "wait ( TIMEOUT ) ; }", "catch ( Interrupted Exception e 1 ) {", "m Closed = true ;", "Program State . check Abort ( ) ;", "throw new Illegal State Exception ( STR_ , e 1 ) ; }", "Program State . check Abort ( ) ; }", "if ( m Closed ) {", "return true ; }", "final boolean was Empty = m Internal Queue . is Empty ( ) ;", "m Has Next = has Next ;", "m Internal Queue . add ( e ) ;", "if ( was Empty ) {", "notify All ( ) ; }", "return true ; }"]}
{"ids": "80262", "code": ["public boolean has Nature And Weapon ( Nature nature , String weapon ) {", "return this . nature == nature && ( ( weapon == null && this . weapon == null ) || ( weapon != null && weapon . equals ( this . weapon ) ) ) ; }"]}
{"ids": "23788", "code": ["public void dump ( String info Msg ) {", "storage . get Online Members ( ) ;", "storage . get Offline Members ( ) ;", "storage . get Offline And Equal Members ( ) ;", "storage . get My Initializing ID ( ) ;", "storage . get My Persistent ID ( ) ;", "final String Builder buf = new String Builder ( NUM_ ) ;", "if ( info Msg != null ) {", "buf . append ( info Msg ) ;", "buf . append ( STR_ ) ; }", "buf . append ( STR_ ) ;", "buf . append ( storage . get My Persistent ID ( ) ) ;", "buf . append ( STR_ ) ;", "buf . append ( storage . get My Initializing ID ( ) ) ;", "buf . append ( STR_ ) ;", "for ( Persistent Member ID id : storage . get Online Members ( ) ) {", "buf . append ( STR_ ) ;", "buf . append ( id ) ;", "buf . append ( STR_ ) ; }", "buf . append ( STR_ ) ;", "for ( Persistent Member ID id : storage . get Offline Members ( ) ) {", "buf . append ( STR_ ) ;", "buf . append ( id ) ;", "buf . append ( STR_ ) ; }", "buf . append ( STR_ ) ;", "for ( Persistent Member ID id : storage . get Offline And Equal Members ( ) ) {", "buf . append ( STR_ ) ;", "buf . append ( id ) ;", "buf . append ( STR_ ) ; }", "logger . debug ( buf . to String ( ) ) ; }"]}
{"ids": "33964", "code": ["static Sort parse Sort ( long timestamp Sec , Index State state , List < Object > fields , List < String > sort Field Names , Map < String , Field Def > dynamic Fields ) {", "List < Sort Field > sort Fields = new Array List < Sort Field > ( ) ;", "for ( Object sub : fields ) {", "Request sub = ( Request ) sub ;", "String field Name = sub . get String ( STR_ ) ;", "Sort Field sf ;", "if ( sort Field Names != null ) {", "sort Field Names . add ( field Name ) ; }", "if ( field Name . equals ( STR_ ) ) {", "sf = Sort Field . FIELD DOC ; }", "else if ( field Name . equals ( STR_ ) ) {", "sf = Sort Field . FIELD SCORE ; }", "else {", "Field Def fd ;", "if ( dynamic Fields != null ) {", "fd = dynamic Fields . get ( field Name ) ; }", "else {", "fd = null ; }", "if ( fd == null ) {", "fd = state . get Field ( field Name ) ; }", "if ( fd == null ) {", "sub . fail ( STR_ , STR_ + field Name + STR_ ) ;", "fd = null ; }", "if ( fd . value Source != null ) {", "sf = fd . value Source . get Sort Field ( sub . get Boolean ( STR_ ) ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . LAT LON ) {", "if ( fd . field Type . doc Values Type ( ) == Doc Values Type . NONE ) {", "sub . fail ( STR_ , STR_ + field Name + STR_ ) ; }", "Request sub 2 = sub . get Struct ( STR_ ) ;", "sf = Lat Lon Doc Values Field . new Distance Sort ( field Name , sub 2 . get Double ( STR_ ) , sub 2 . get Double ( STR_ ) ) ; }", "else {", "if ( ( fd . field Type != null && fd . field Type . doc Values Type ( ) == Doc Values Type . NONE ) || ( fd . field Type == null && fd . value Source == null ) ) {", "sub . fail ( STR_ , STR_ + field Name + STR_ ) ; }", "if ( fd . multi Valued ) {", "String selector String = sub . get Enum ( STR_ ) ;", "if ( fd . value Type == Field Def . Field Value Type . ATOM ) {", "Sorted Set Selector . Type selector ;", "if ( selector String . equals ( STR_ ) ) {", "selector = Sorted Set Selector . Type . MIN ; }", "else if ( selector String . equals ( STR_ ) ) {", "selector = Sorted Set Selector . Type . MAX ; }", "else if ( selector String . equals ( STR_ ) ) {", "selector = Sorted Set Selector . Type . MIDDLE MIN ; }", "else if ( selector String . equals ( STR_ ) ) {", "selector = Sorted Set Selector . Type . MIDDLE MAX ; }", "else {", "assert false ;", "selector = null ; }", "sf = new Sorted Set Sort Field ( field Name , sub . get Boolean ( STR_ ) , selector ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . INT ) {", "sf = new Sorted Numeric Sort Field ( field Name , Sort Field . Type . INT , sub . get Boolean ( STR_ ) , parse Numeric Selector ( sub , selector String ) ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . LONG ) {", "sf = new Sorted Numeric Sort Field ( field Name , Sort Field . Type . LONG , sub . get Boolean ( STR_ ) , parse Numeric Selector ( sub , selector String ) ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . FLOAT ) {", "sf = new Sorted Numeric Sort Field ( field Name , Sort Field . Type . FLOAT , sub . get Boolean ( STR_ ) , parse Numeric Selector ( sub , selector String ) ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . DOUBLE ) {", "sf = new Sorted Numeric Sort Field ( field Name , Sort Field . Type . DOUBLE , sub . get Boolean ( STR_ ) , parse Numeric Selector ( sub , selector String ) ) ; }", "else {", "sub . fail ( STR_ , STR_ + field Name + STR_ + fd . value Type ) ;", "assert false ;", "sf = null ; } }", "else {", "Sort Field . Type sort Type ;", "if ( fd . value Type == Field Def . Field Value Type . ATOM ) {", "sort Type = Sort Field . Type . STRING ; }", "else if ( fd . value Type == Field Def . Field Value Type . LONG || fd . value Type == Field Def . Field Value Type . DATE TIME ) {", "sort Type = Sort Field . Type . LONG ; }", "else if ( fd . value Type == Field Def . Field Value Type . INT ) {", "sort Type = Sort Field . Type . INT ; }", "else if ( fd . value Type == Field Def . Field Value Type . DOUBLE ) {", "sort Type = Sort Field . Type . DOUBLE ; }", "else if ( fd . value Type == Field Def . Field Value Type . FLOAT ) {", "sort Type = Sort Field . Type . FLOAT ; }", "else {", "sub . fail ( STR_ , STR_ + field Name + STR_ + fd . value Type ) ;", "assert false ;", "sort Type = null ; }", "sf = new Sort Field ( field Name , sort Type , sub . get Boolean ( STR_ ) ) ; } }", "boolean has Missing Last = sub . has Param ( STR_ ) ;", "boolean missing Last = sub . get Boolean ( STR_ ) ;", "if ( fd . value Type == Field Def . Field Value Type . ATOM ) {", "if ( missing Last ) {", "sf . set Missing Value ( Sort Field . STRING LAST ) ; }", "else {", "sf . set Missing Value ( Sort Field . STRING FIRST ) ; } }", "else if ( fd . value Type == Field Def . Field Value Type . INT ) {", "sf . set Missing Value ( missing Last ? Integer . MAX VALUE : Integer . MIN VALUE ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . LONG ) {", "sf . set Missing Value ( missing Last ? Long . MAX VALUE : Long . MIN VALUE ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . FLOAT ) {", "sf . set Missing Value ( missing Last ? Float . POSITIVE INFINITY : Float . NEGATIVE INFINITY ) ; }", "else if ( fd . value Type == Field Def . Field Value Type . DOUBLE ) {", "sf . set Missing Value ( missing Last ? Double . POSITIVE INFINITY : Double . NEGATIVE INFINITY ) ; }", "else if ( has Missing Last ) {", "sub . fail ( STR_ , STR_ + field Name + STR_ + sf . get Type ( ) ) ; } }", "sort Fields . add ( sf ) ; }", "return new Sort ( sort Fields . to Array ( new Sort Field [ sort Fields . size ( ) ] ) ) ; }"]}
{"ids": "19570", "code": ["@ Not Null private Optional < Type Conversion > find Conversion From Db Value ( @ Not Null Type source , @ Not Null Type target ) {", "if ( is Assignable ( target , source ) ) return Optional . of ( Type Conversion . identity ( ) ) ;", "Optional < Type Conversion > direct Conversion = type Conversion Registry . find Conversion From Db Value ( source , target ) ;", "if ( direct Conversion . is Present ( ) ) return direct Conversion ;", "Optional < Type Conversion > array Conversion = find Array Conversion ( source , target ) ;", "if ( array Conversion . is Present ( ) ) return array Conversion ;", "Optional < Type Conversion > optional Conversion = find Optional Conversion ( source , target ) ;", "if ( optional Conversion . is Present ( ) ) return optional Conversion ;", "Optional < Type Conversion > enum Conversion = find Enum Conversion ( target ) ;", "if ( enum Conversion . is Present ( ) ) return enum Conversion ;", "return Optional . empty ( ) ; }"]}
{"ids": "16149", "code": ["private boolean advance Api Up To ( Tree Set < Area Panel Info > sorted Api Tree , Area Panel Info api , int time ) {", "Area Panel ap = api . ap ( ) ;", "Time Tree root Tt = ap . get Time Tree ( ) ;", "Time Tree tt = root Tt . get Encompassig Time Tree Or Max Time Tree Before Time ( time , true ) ;", "if ( tt == null || tt . id == api . curr Tt Id ) return false ;", "sorted Api Tree . remove ( api ) ;", "if ( api . set Tt ( tt , Integer . MAX VALUE ) ) sorted Api Tree . add ( api ) ;", "return true ; }"]}
{"ids": "45705", "code": ["@ Request Mapping ( value = { STR_ , STR_ } , method = Request Method . POST ) @ Response Body public Rest Wrapper update ( @ Model Attribute ( STR_ ) @ Valid User Roles user Roles , Binding Result binding Result , Principal principal ) {", "Rest Wrapper rest Wrapper = null ;", "if ( binding Result . has Errors ( ) ) {", "Binding Result Error binding Result Error = new Binding Result Error ( ) ;", "return binding Result Error . error Message ( binding Result ) ; }", "try {", "com . wipro . ats . bdre . md . dao . jpa . User Roles jpa User Roles = new com . wipro . ats . bdre . md . dao . jpa . User Roles ( ) ;", "jpa User Roles . set User Role Id ( user Roles . get User Role Id ( ) ) ;", "jpa User Roles . set Role ( user Roles . get Role ( ) ) ;", "Users users = new Users ( ) ;", "users . set Username ( user Roles . get Username ( ) ) ;", "jpa User Roles . set Users ( users ) ;", "user Roles DAO . update ( jpa User Roles ) ;", "rest Wrapper = new Rest Wrapper ( user Roles , Rest Wrapper . OK ) ;", "LOGGER . info ( STR_ + user Roles . get User Role Id ( ) + STR_ + principal . get Name ( ) + user Roles ) ; }", "catch ( Exception e ) {", "LOGGER . error ( e ) ;", "rest Wrapper = new Rest Wrapper ( e . get Message ( ) , Rest Wrapper . ERROR ) ; }", "return rest Wrapper ; }"]}
{"ids": "62694", "code": ["public static void print Thread Info ( Print Writer stream , String title ) {", "final int STACK DEPTH = NUM_ ;", "boolean contention = thread Bean . is Thread Contention Monitoring Enabled ( ) ;", "long [ ] thread Ids = thread Bean . get All Thread Ids ( ) ;", "stream . println ( STR_ + title ) ;", "stream . println ( thread Ids . length + STR_ ) ;", "for ( long tid : thread Ids ) {", "Thread Info info = thread Bean . get Thread Info ( tid , STACK DEPTH ) ;", "if ( info == null ) {", "stream . println ( STR_ ) ;", "continue ; }", "stream . println ( STR_ + get Task Name ( info . get Thread Id ( ) , info . get Thread Name ( ) ) + STR_ ) ;", "Thread . State state = info . get Thread State ( ) ;", "stream . println ( STR_ + state ) ;", "stream . println ( STR_ + info . get Blocked Count ( ) ) ;", "stream . println ( STR_ + info . get Waited Count ( ) ) ;", "if ( contention ) {", "stream . println ( STR_ + info . get Blocked Time ( ) ) ;", "stream . println ( STR_ + info . get Waited Time ( ) ) ; }", "if ( state == Thread . State . WAITING ) {", "stream . println ( STR_ + info . get Lock Name ( ) ) ; }", "else if ( state == Thread . State . BLOCKED ) {", "stream . println ( STR_ + info . get Lock Name ( ) ) ;", "stream . println ( STR_ + get Task Name ( info . get Lock Owner Id ( ) , info . get Lock Owner Name ( ) ) ) ; }", "stream . println ( STR_ ) ;", "for ( Stack Trace Element frame : info . get Stack Trace ( ) ) {", "stream . println ( STR_ + frame . to String ( ) ) ; } }", "stream . flush ( ) ; }"]}
{"ids": "52894", "code": ["@ Override public void write External ( Object Output out ) throws IO Exception {", "super . write External ( out ) ;", "out . write Object ( approximation ) ; }"]}
{"ids": "7275", "code": ["public void add ( String method Name , List < Expression > parameters ) {", "chain . add ( new Dot Expression Item ( method Name , parameters , false ) ) ; }"]}
{"ids": "84008", "code": ["public static Request request ( ) {", "return thread Local . get ( ) ; }"]}
{"ids": "55462", "code": ["private void schedule Commercial ( int length ) {", "Long delay = commercial Delay . get Setting Value ( ) ;", "if ( delay == null ) {", "set Commercial Result ( STR_ ) ;", "clear Commercial Buttons Selection ( ) ; }", "else {", "scheduled Commercial Time = System . current Time Millis ( ) + delay * NUM_ ;", "scheduled Commercial Length = length ;", "update ( ) ; } }"]}
{"ids": "47812", "code": ["public int hash Code ( ) {", "long bits = Double . double To Long Bits ( m 00 ) ;", "bits = bits * NUM_ + Double . double To Long Bits ( m 01 ) ;", "bits = bits * NUM_ + Double . double To Long Bits ( m 02 ) ;", "bits = bits * NUM_ + Double . double To Long Bits ( m 10 ) ;", "bits = bits * NUM_ + Double . double To Long Bits ( m 11 ) ;", "bits = bits * NUM_ + Double . double To Long Bits ( m 12 ) ;", "return ( ( ( int ) bits ) ^ ( ( int ) ( bits > > NUM_ ) ) ) ; }"]}
{"ids": "68665", "code": ["public void unsubscribe ( AWS Iot Message message ) throws AWS Iot Exception {", "try {", "unsubscribe Topic ( message ) ; }", "catch ( Aws Iot Retryable Exception e ) {", "if ( client . get Max Offline Queue Size ( ) > NUM_ && unsubscribe Queue . size ( ) < client . get Max Offline Queue Size ( ) ) {", "unsubscribe Queue . add ( message ) ; }", "else {", "LOGGER . info ( STR_ + message . get Topic ( ) ) ;", "throw new AWS Iot Exception ( e ) ; } } }"]}
{"ids": "3515", "code": ["public void client Disconnect ( ) {", "try {", "Out Http App response Stream = response Stream ;", "if ( response Stream != null ) {", "response Stream . close ( ) ; } }", "catch ( Exception e ) {", "log . log ( Level . FINER , e . to String ( ) , e ) ; }", "Connection Tcp conn = conn Tcp ( ) ;", "if ( conn != null ) {", "conn . client Disconnect ( ) ; }", "kill Keepalive ( STR_ ) ; }"]}
{"ids": "46774", "code": ["public boolean ends With ( Name n ) {", "if ( n instanceof Compound Name ) {", "return ( impl . ends With ( n . size ( ) , n . get All ( ) ) ) ; }", "else {", "return false ; } }"]}
{"ids": "13651", "code": ["private int calculate Total Height ( float star Size , int number Of Stars , float stars Separation , boolean padding ) {", "return Math . round ( star Size ) + ( padding ? get Padding Top ( ) + get Padding Bottom ( ) : NUM_ ) ; }"]}
{"ids": "34848", "code": ["@ Suppress Warnings ( STR_ ) private static boolean is Regex ( String s ) {", "try {", "Pattern . compile ( s ) ; }", "catch ( Pattern Syntax Exception e ) {", "return false ; }", "return true ; }"]}
{"ids": "32745", "code": ["public static void flush ( ) {", "clear Buffer ( ) ;", "try {", "out . flush ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "44392", "code": ["private String attach Footer To Text ( String content ) throws Messaging Exception , IO Exception {", "String Builder builder = new String Builder ( content ) ;", "ensure Trailing Carriage Return ( content , builder ) ;", "builder . append ( get Footer Text ( ) ) ;", "return builder . to String ( ) ; }"]}
{"ids": "55566", "code": ["public static Sentence make ( final Connective connective , final Sentence ... children 2 ) {", "return make ( connective , Arrays . as List ( children 2 ) ) ; }"]}
{"ids": "63248", "code": ["public synchronized void init ( ) {", "init = true ;", "for ( String map Name : store . get Map Names ( ) ) {", "if ( map Name . starts With ( STR_ ) ) {", "MV Map < Object , Integer > temp = open Temp Map ( map Name ) ;", "store . remove Map ( temp ) ; } }", "synchronized ( undo Log ) {", "if ( undo Log . size ( ) > NUM_ ) {", "for ( Long key : undo Log . key Set ( ) ) {", "int transaction Id = get Transaction Id ( key ) ;", "open Transactions . set ( transaction Id ) ; } } } }"]}
{"ids": "83319", "code": ["public static T Double Double Hash Map create Cumulative Histogram ( T Double Double Hash Map histogram ) {", "double [ ] keys = histogram . keys ( ) ;", "Arrays . sort ( keys ) ;", "double sum = NUM_ ;", "for ( double key : keys ) {", "double val = histogram . get ( key ) ;", "sum += val ;", "histogram . put ( key , sum ) ; }", "return histogram ; }"]}
{"ids": "14797", "code": ["void add Attribute Values ( String attr Name , Set values ) throws SMS Exception {", "if ( attr Name != null && values != null && ! values . is Empty ( ) ) {", "Map attrs = get Attributes ( ) ;", "Set orig Values = ( Set ) attrs . get ( attr Name ) ;", "Set new Values = new Hash Set ( values ) ;", "if ( orig Values != null && ! orig Values . is Empty ( ) ) {", "new Values . add All ( orig Values ) ; }", "Map new Attrs = new Hash Map ( ) ;", "new Attrs . put ( attr Name , new Values ) ;", "set Attributes ( new Attrs ) ; } }"]}
{"ids": "65315", "code": ["Segment Manager commit Index ( long commit Index ) {", "this . commit Index = Math . max ( this . commit Index , commit Index ) ;", "return this ; }"]}
{"ids": "22689", "code": ["public void finish Fragments ( ) {", "for ( Fragment comment : closing Fragments ) {", "finish Fragment ( comment ) ; }", "closing Fragments . clear ( ) ; }"]}
{"ids": "10541", "code": ["private final void write UTF 8 Segments ( byte [ ] utf 8 , int offset , int total Len ) throws IO Exception , Json Generation Exception {", "do {", "int len = Math . min ( output Max Contiguous , total Len ) ;", "write UTF 8 Segment ( utf 8 , offset , len ) ;", "offset += len ;", "total Len -= len ; }", "while ( total Len > NUM_ ) ; }"]}
{"ids": "11874", "code": ["public Collection < Node > matching Scenarios And Examples ( final Feature feature ) {", "final List < Scenario Definition > all Scenarios = feature . get Scenario Definitions ( ) ;", "final List < Node > matching Scenarios And Examples = new Linked List < Node > ( ) ;", "for ( final Scenario Definition scenario : all Scenarios ) {", "final Set < Tag > all Tags For Scenario = new Hash Set < Tag > ( scenario . get Tags ( ) ) ;", "all Tags For Scenario . add All ( feature . get Tags ( ) ) ;", "if ( scenario instanceof Scenario Outline ) {", "matching Scenarios And Examples . add All ( matching Examples ( ( Scenario Outline ) scenario , all Tags For Scenario ) ) ; }", "else {", "if ( matches ( all Tags For Scenario ) ) {", "matching Scenarios And Examples . add ( scenario ) ; } } }", "return matching Scenarios And Examples ; }"]}
{"ids": "78277", "code": ["public boolean is Set Queue Size ( ) {", "return isset bit vector . get ( QUEUESIZE ISSET ID ) ; }"]}
{"ids": "23049", "code": ["public void request Contact Capabilities ( Set < Contact Id > contacts ) throws Rcs Service Not Registered Exception , Rcs Service Not Available Exception , Rcs Generic Exception {", "if ( m Api == null ) {", "throw new Rcs Service Not Available Exception ( ) ; }", "if ( contacts == null || contacts . is Empty ( ) ) {", "throw new Rcs Illegal Argument Exception ( STR_ ) ; }", "try {", "m Api . request Contact Capabilities 2 ( new Array List < > ( contacts ) ) ; }", "catch ( Exception e ) {", "Rcs Illegal Argument Exception . assert Exception ( e ) ;", "Rcs Service Not Registered Exception . assert Exception ( e ) ;", "throw new Rcs Generic Exception ( e ) ; } }"]}
{"ids": "14838", "code": ["public boolean validate ( String value , String rule ) {", "return ( value . equals Ignore Case ( rule ) ) ; }"]}
{"ids": "19730", "code": ["public boolean offer ( E event , int task Id ) throws Interrupted Exception {", "assert Not Done ( ) ;", "if ( predicate . match ( event ) ) {", "this . matched [ task Id ] = true ;", "for ( boolean match : matched ) {", "if ( ! match ) return true ; }", "response Queue . put ( new Event Holder ( event ) ) ;", "done = true ;", "return true ; }", "else return false ; }"]}
{"ids": "44753", "code": ["private static Algorithm Parameter Spec algorithm Parameter Spec ( ) {", "final Secure Random random = new Secure Random ( ) ;", "final byte [ ] bytes = new byte [ Cc Aes . BLOCK ] ;", "random . next Bytes ( bytes ) ;", "return new Iv Parameter Spec ( bytes ) ; }"]}
{"ids": "63624", "code": ["public void draw Lines And Points ( Graphics 2 D g 2 d , Array List < Comparable Label > ordered Date Set , Hash Map < Comparable Label , Integer > data Points , long y Max Mark ) {", "int section Width = this . graph Width / ordered Date Set . size ( ) ;", "int x Offset = section Width / NUM_ ;", "int y Prev Value ;", "int y Current Value ;", "float prev Offset Perc ;", "float current Offset Perc ;", "g 2 d . set Color ( this . line Color ) ;", "for ( int i = NUM_ ; i < ordered Date Set . size ( ) ; i ++ ) {", "if ( i != NUM_ ) {", "y Prev Value = data Points . get ( ordered Date Set . get ( i - NUM_ ) ) ;", "y Current Value = data Points . get ( ordered Date Set . get ( i ) ) ;", "prev Offset Perc = y Prev Value / ( float ) y Max Mark ;", "current Offset Perc = y Current Value / ( float ) y Max Mark ;", "g 2 d . draw Line ( this . graph Left + ( i - NUM_ ) * section Width + x Offset , this . graph Bottom - Math . round ( prev Offset Perc * this . graph Height ) , this . graph Left + i * section Width + x Offset , Math . round ( this . graph Bottom - current Offset Perc * this . graph Height ) ) ; }", "else {", "y Current Value = data Points . get ( ordered Date Set . get ( i ) ) ;", "current Offset Perc = y Current Value / ( float ) y Max Mark ;", "g 2 d . fill Oval ( this . graph Left + ( i ) * section Width + x Offset - this . point Radius , this . graph Bottom - Math . round ( current Offset Perc * this . graph Height ) - this . point Radius , this . point Radius * NUM_ , this . point Radius * NUM_ ) ; } } }"]}
{"ids": "3663", "code": ["final public void println ( String s ) {", "Writer out = this . out ;", "if ( out == null ) return ;", "try {", "if ( s == null ) out . write ( null Chars , NUM_ , null Chars . length ) ;", "else out . write ( s , NUM_ , s . length ( ) ) ;", "out . write ( newline , NUM_ , newline . length ) ; }", "catch ( IO Exception e ) {", "log . log ( Level . FINE , e . to String ( ) , e ) ; } }"]}
{"ids": "27163", "code": ["private static URI refrag Uri ( URI uri , String frag ) throws URI Syntax Exception {", "return new URI ( uri . get Scheme ( ) , uri . get Scheme Specific Part ( ) , frag ) ; }"]}
{"ids": "73325", "code": ["@ Override public void paint ( final P Paint Context ppc ) {", "final Paint paint = get Paint ( ) ;", "if ( paint != null ) {", "final Graphics 2 D g 2 = ppc . get Graphics ( ) ;", "final P Bounds bounds = get Union Of Children Bounds ( null ) ;", "if ( fill Background ) {", "g 2 . set Paint ( background Color ) ;", "g 2 . fill Rect ( ( int ) bounds . get X ( ) - outline Padding , ( int ) bounds . get Y ( ) - outline Padding , ( int ) bounds . get Width ( ) + NUM_ * outline Padding , ( int ) bounds . get Height ( ) + NUM_ * outline Padding ) ; }", "if ( draw Outline ) {", "g 2 . set Paint ( line Color ) ;", "g 2 . draw Round Rect ( ( int ) bounds . get X ( ) - outline Padding , ( int ) bounds . get Y ( ) - outline Padding , ( int ) bounds . get Width ( ) + NUM_ * outline Padding , ( int ) bounds . get Height ( ) + NUM_ * outline Padding , ROUNDING WIDTH HEIGHT , ROUNDING WIDTH HEIGHT ) ; } } }"]}
{"ids": "55861", "code": ["public final synchronized byte [ ] to Byte Array ( ) {", "Byte Array Output Stream baos = null ;", "Data Output Stream dos = null ;", "try {", "baos = new Byte Array Output Stream ( NUM_ ) ;", "dos = new Data Output Stream ( baos ) ;", "game . write To Stream ( dos ) ;", "dos . flush ( ) ;", "return baos . to Byte Array ( ) ; }", "catch ( IO Exception e ) {", "return null ; }", "finally {", "if ( dos != null ) try {", "dos . close ( ) ; }", "catch ( IO Exception ex ) { }", "if ( baos != null ) try {", "baos . close ( ) ; }", "catch ( IO Exception ex ) { } } }"]}
{"ids": "22693", "code": ["protected final void draw Arrow Head ( Graphics 2 D g , int x , int y , int sgn ) {", "g . set Stroke ( Strokes . get Stroke ( Stroke Type . SOLID , NUM_ ) ) ;", "int size = diagram ( ) . arrow Size ;", "switch ( head Type ) {", "case CLOSED :", "Polygon p = new Polygon ( new int [ ] { x , x + sgn * size , x + sgn * size , x } , new int [ ] { y , y - size , y + size , y } , NUM_ ) ;", "g . fill Polygon ( p ) ;", "break ;", "case OPEN :", "g . draw Line ( x , y , x + sgn * size , y - size ) ;", "g . draw Line ( x , y , x + sgn * size , y + size ) ;", "break ;", "case ROUNDED :", "int left = sgn == - NUM_ ? x - NUM_ * size : x ;", "int top = y - size ;", "g . fill Arc ( left , top , size * NUM_ , size * NUM_ , NUM_ , sgn * NUM_ ) ; } }"]}
{"ids": "46523", "code": ["void draw Icon ( Graphics g , int ax , int ay , int aw , int ah , float align , Component c ) {", "int gap = is Left To Right ? - ( img . get Icon Width ( ) + bulletgap ) : ( aw + bulletgap ) ;", "int x = ax + gap ;", "int y = Math . max ( ay , ay + ( int ) ( align * ah ) - img . get Icon Height ( ) ) ;", "img . paint Icon ( c , g , x , y ) ; }"]}
{"ids": "76368", "code": ["public static void full Reset ( ) {", "reset Runtime ( ) ;", "synchronized ( read Properties ) {", "read Properties . clear ( ) ; } }"]}
{"ids": "73173", "code": ["private Buffered Image to Buffered Image ( final Image image ) {", "if ( image instanceof Buffered Image ) {", "return ( Buffered Image ) image ; }", "if ( image instanceof Volatile Image ) {", "Volatile Image volatile Image = ( Volatile Image ) image ;", "return volatile Image . get Snapshot ( ) ; }", "Graphics Environment graphics Environment = Graphics Environment . get Local Graphics Environment ( ) ;", "Graphics Device graphics Device = graphics Environment . get Default Screen Device ( ) ;", "Graphics Configuration graphics Configuration = graphics Device . get Default Configuration ( ) ;", "Buffered Image buffered Image = graphics Configuration . create Compatible Image ( image . get Width ( null ) , image . get Height ( null ) ) ;", "Graphics 2 D g = buffered Image . create Graphics ( ) ;", "g . draw Image ( image , NUM_ , NUM_ , null ) ;", "g . dispose ( ) ;", "return buffered Image ; }"]}
{"ids": "70927", "code": ["public final boolean is Cancelled ( ) {", "if ( cancelled ) {", "pass ( STR_ , cancelled ) ; }", "else {", "fail ( STR_ ) ; }", "return cancelled ; }"]}
{"ids": "71081", "code": ["public void remove ( Directed Edge de ) {", "out Edges . remove ( de ) ; }"]}
{"ids": "10464", "code": ["public Builder until Date ( Date date ) {", "until Date = QUERY DATE . format ( date ) ;", "return this ; }"]}
{"ids": "49876", "code": ["public static void cleanup All Files ( File System file System , String Base Uri ) throws IO Exception {", "try {", "if ( file System != null ) {", "Path root Dir = new Path ( Base Uri ) ;", "File Status [ ] files = file System . list Status ( root Dir ) ;", "for ( File Status file : files ) {", "file System . delete ( file . get Path ( ) , false ) ; } } }", "catch ( Exception e ) {", "LOG . error ( STR_ ) ; } }"]}
{"ids": "63605", "code": ["@ Override public boolean can Be Collided With ( ) {", "return true ; }"]}
{"ids": "67367", "code": ["public void submit ( String queue Name , Dispatcher Task dispatcher Task ) {", "synchronized ( sync Root ) {", "Dispatcher Task Runner current Task Runner = current Tasks Map . get ( queue Name ) ;", "if ( current Task Runner == null ) {", "current Task Runner = new Dispatcher Task Runner ( queue Name , dispatcher Task ) ;", "current Tasks Map . put ( queue Name , current Task Runner ) ;", "executor Service . execute ( current Task Runner ) ; }", "else {", "enqueue Next Task ( queue Name , dispatcher Task ) ; } } }"]}
{"ids": "12556", "code": ["public void dump ( Writer writer ) {", "Print Writer pw = new Print Writer ( new Buffered Writer ( writer ) ) ;", "pw . println ( STR_ ) ;", "pw . println ( STR_ ) ;", "pw . println ( STR_ + ( int ) audio Format . get Sample Rate ( ) ) ;", "pw . println ( STR_ + samples . length / NUM_ ) ;", "pw . println ( STR_ + audio Format . get Channels ( ) ) ;", "if ( samples != null ) {", "for ( int i = NUM_ ; i < samples . length ; i += NUM_ ) {", "pw . println ( Wave Utils . bytes To Short ( samples [ i ] , samples [ i + NUM_ ] ) ) ; } }", "pw . flush ( ) ; }"]}
{"ids": "65788", "code": ["public void add Field Buffered ( V Editor editor , Grid Field m Field ) {", "wrap = m Field != null ? ! m Field . is Same Line ( ) : false ;", "if ( prev Editor != null && prev Field != null ) add Field ( prev Editor , prev Field ) ;", "prev Editor = editor ;", "prev Field = m Field ; }"]}
{"ids": "4900", "code": ["public Expand Room Freespace Incomplete add incomplete expansion room ( Shape Tile p shape , int p layer , Shape Tile p contained shape ) {", "Expand Room Freespace Incomplete new room = new Expand Room Freespace Incomplete ( p shape , p layer , p contained shape ) ;", "incomplete expansion rooms . add ( new room ) ;", "return new room ; }"]}
{"ids": "21970", "code": ["private void validate VNX File SMIS Provider Mandatory Details ( Storage System Request Param param ) {", "Arg Validator . check Field Valid IP ( param . get Smis Provider IP ( ) , STR_ ) ;", "Arg Validator . check Field Not Null ( param . get Smis Port Number ( ) , STR_ ) ;", "Arg Validator . check Field Range ( param . get Smis Port Number ( ) , NUM_ , NUM_ , STR_ ) ;", "Arg Validator . check Field Not Empty ( param . get Smis User Name ( ) , STR_ ) ;", "Arg Validator . check Field Not Empty ( param . get Smis Password ( ) , STR_ ) ; }"]}
{"ids": "4898", "code": ["private Art Locate Result calculate next trace ( boolean p layer changed , boolean p at fanout end ) {", "Collection < Pla Point Float > corner list = new Linked List < Pla Point Float > ( ) ;", "corner list . add ( current from point ) ;", "if ( ! p at fanout end ) {", "Pla Point Float adjusted start corner = adjust start corner ( ) ;", "if ( adjusted start corner != current from point ) {", "Pla Point Float add corner = calculate additional corner ( current from point , adjusted start corner , true , angle restriction ) ;", "corner list . add ( add corner ) ;", "corner list . add ( adjusted start corner ) ;", "previous from point = current from point ;", "current from point = adjusted start corner ; } }", "Pla Point Float prev corner = current from point ;", "for ( int c limit = NUM_ ; c limit < NUM_ ; c limit ++ ) {", "Collection < Pla Point Float > next corners = calculate next trace corners ( ) ;", "if ( next corners . is Empty ( ) ) break ;", "for ( Pla Point Float curr next corner : next corners ) {", "if ( curr next corner == prev corner ) continue ;", "corner list . add ( curr next corner ) ;", "previous from point = current from point ;", "current from point = curr next corner ;", "prev corner = curr next corner ; } }", "int next layer = current trace layer ;", "if ( p layer changed ) {", "current from door index = current target door index + NUM_ ;", "Expand Room Complete next room = backtrack array [ current from door index ] . next room ;", "if ( next room != null ) {", "next layer = next room . get layer ( ) ; } }", "Pla Point Int Alist rounded corner list = new Pla Point Int Alist ( corner list . size ( ) ) ;", "Pla Point Int prev point = null ;", "for ( Pla Point Float a float : corner list ) {", "Pla Point Int curr point = a float . round ( ) ;", "if ( curr point . equals ( prev point ) ) continue ;", "rounded corner list . add ( curr point ) ;", "prev point = curr point ; }", "Art Locate Result result = new Art Locate Result ( rounded corner list , current trace layer ) ;", "current trace layer = next layer ;", "return result ; }"]}
{"ids": "52911", "code": ["private double [ ] max ( double [ ] distances 1 , double [ ] distances 2 ) {", "if ( distances 1 . length != distances 2 . length ) {", "throw new Runtime Exception ( STR_ ) ; }", "double [ ] result = new double [ distances 1 . length ] ;", "for ( int i = NUM_ ; i < distances 1 . length ; i ++ ) {", "result [ i ] = Math . max ( distances 1 [ i ] , distances 2 [ i ] ) ; }", "return result ; }"]}
{"ids": "5003", "code": ["public void fill shape ( Pla Point Float [ ] p points , Graphics p g , Color p color , double p translucency factor ) {", "if ( p color == null ) return ;", "Graphics 2 D g 2 = ( Graphics 2 D ) p g ;", "Polygon draw polygon = new Polygon ( ) ;", "for ( int index = NUM_ ; index < p points . length ; index ++ ) {", "Point 2 D curr corner = coordinate transform . board to screen ( p points [ index ] ) ;", "draw polygon . add Point ( ( int ) Math . round ( curr corner . get X ( ) ) , ( int ) Math . round ( curr corner . get Y ( ) ) ) ; }", "g 2 . set Color ( p color ) ;", "set translucency ( g 2 , p translucency factor ) ;", "g 2 . set Rendering Hint ( Rendering Hints . KEY ANTIALIASING , Rendering Hints . VALUE ANTIALIAS ON ) ;", "g 2 . fill ( draw polygon ) ; }"]}
{"ids": "458", "code": ["public void go To Current Day ( ) {", "int month Difference = Flexible Calendar Helper . get Month Difference ( display Year , display Month ) ;", "Calendar cal = Calendar . get Instance ( ) ;", "selected Date Item . set Day ( cal . get ( Calendar . DAY OF MONTH ) ) ;", "selected Date Item . set Month ( cal . get ( Calendar . MONTH ) ) ;", "selected Date Item . set Year ( cal . get ( Calendar . YEAR ) ) ;", "if ( disable Auto Date Selection ) {", "this . user Selected Item = selected Date Item . clone ( ) ; }", "if ( month Difference != NUM_ ) {", "reset Adapters = true ;", "if ( month Difference < NUM_ ) {", "month Inf Pager Adapter . set Fake Count ( last Position ) ;", "month Inf Pager Adapter . notify Data Set Changed ( ) ; }", "should Override Computed Date = true ;", "move To Position ( month Difference ) ; }", "else {", "Flexible Calendar Grid Adapter currently Visible Adapter = month View Pager Adapter . get Month Adapter At Position ( last Position % Month View Pager Adapter . VIEWS IN PAGER ) ;", "currently Visible Adapter . notify Data Set Changed ( ) ; } }"]}
{"ids": "60231", "code": ["public boolean is Valid Template ( ) {", "return is Valid Template ( template ) ; }"]}
{"ids": "23693", "code": ["public Object take ( ) throws Interrupted Exception , Force Reattempt Exception {", "throw new Unsupported Operation Exception ( ) ; }"]}
{"ids": "52051", "code": ["@ Suppress Warnings ( { STR_ } ) public static double normal Cdf ( double y ) {", "double f , h ;", "int j ;", "double dcphi , x , z , f 1 , f 2 , f 3 , f 4 , f 5 ;", "x = y ;", "if ( Math . abs ( x ) > NUM_ ) {", "dcphi = NUM_ ; }", "else {", "j = ( int ) Math . floor ( Math . abs ( x ) * NUM_ + NUM_ ) ;", "z = j * NUM_ ;", "h = Math . abs ( x ) - z ;", "f = r [ j ] ;", "f 1 = f * z - NUM_ ;", "f 2 = f + z * f 1 ;", "f 3 = f 1 * NUM_ + z * f 2 ;", "f 4 = f 2 * NUM_ + z * f 3 ;", "f 5 = f 3 * NUM_ + z * f 4 ;", "dcphi = f + h * ( f 1 * NUM_ + h * ( f 2 * NUM_ + h * ( f 3 * NUM_ + h * ( f 4 * NUM_ + h * f 5 ) ) ) ) / NUM_ ;", "dcphi = dcphi * NUM_ * Math . exp ( x * - NUM_ * x ) ; }", "if ( x < NUM_ ) {", "return dcphi ; }", "else {", "return ( NUM_ - dcphi ) ; } }"]}
{"ids": "3469", "code": ["private void destroy ( ) {", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( this + STR_ ) ; }", "try {", "socket . force Shutdown ( ) ; }", "catch ( Throwable e ) { }", "try {", "close Connection ( ) ; }", "catch ( Throwable e ) {", "log . log ( Level . FINER , e . to String ( ) , e ) ; }", "port . remove Connection ( this ) ; }"]}
{"ids": "81819", "code": ["int atom ( ) throws RE Syntax Exception {", "int ret = node ( RE . OP ATOM , NUM_ ) ;", "int len Atom = NUM_ ;", "atom Loop : while ( idx < len ) {", "if ( ( idx + NUM_ ) < len ) {", "char c = pattern . char At ( idx + NUM_ ) ;", "if ( pattern . char At ( idx ) == STR_ ) {", "int idx Escape = idx ;", "escape ( ) ;", "if ( idx < len ) {", "c = pattern . char At ( idx ) ; }", "idx = idx Escape ; }", "switch ( c ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "if ( len Atom != NUM_ ) {", "break atom Loop ; } } }", "switch ( pattern . char At ( idx ) ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "break atom Loop ;", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "if ( len Atom == NUM_ ) {", "syntax Error ( STR_ ) ; }", "break atom Loop ;", "case STR_ : {", "int idx Before Escape = idx ;", "int c = escape ( ) ;", "if ( ( c & ESC MASK ) == ESC MASK ) {", "idx = idx Before Escape ;", "break atom Loop ; }", "emit ( ( char ) c ) ;", "len Atom ++ ; }", "break ;", "default :", "emit ( pattern . char At ( idx ++ ) ) ;", "len Atom ++ ;", "break ; } }", "if ( len Atom == NUM_ ) {", "internal Error ( ) ; }", "instruction [ ret + RE . offset Opdata ] = ( char ) len Atom ;", "return ret ; }"]}
{"ids": "70569", "code": ["public boolean is Network Connected ( ) {", "Connectivity Manager connectivity Manager = ( Connectivity Manager ) get System Service ( CONNECTIVITY SERVICE ) ;", "Network Info network Info = connectivity Manager . get Active Network Info ( ) ;", "return network Info != null && network Info . is Connected Or Connecting ( ) ; }"]}
{"ids": "13735", "code": ["public void put ( String name , String supported , String auth Scheme , String level , boolean is Default ) {", "SAM Lv 2 Auth Context c = new SAM Lv 2 Auth Context ( ) ;", "c . name = name ;", "c . supported = supported ;", "if ( auth Scheme . length ( ) != NUM_ && auth Scheme != null ) {", "int index = auth Scheme . last Index Of ( STR_ ) ;", "c . value = auth Scheme . substring ( index + NUM_ ) ;", "c . key = auth Scheme . substring ( NUM_ , index ) ; }", "else {", "c . value = STR_ ;", "c . key = STR_ ; }", "c . level = level ;", "c . is Default = is Default ;", "collections . put ( name , c ) ; }"]}
{"ids": "71190", "code": ["private void replace Collapsed Edges ( ) {", "List new Edges = new Array List ( ) ;", "for ( Iterator it = edge List . iterator ( ) ; it . has Next ( ) ; ) {", "Edge e = ( Edge ) it . next ( ) ;", "if ( e . is Collapsed ( ) ) {", "it . remove ( ) ;", "new Edges . add ( e . get Collapsed Edge ( ) ) ; } }", "edge List . add All ( new Edges ) ; }"]}
{"ids": "82716", "code": ["public Sea Glass Title Pane ( J Root Pane root Pane , Sea Glass Root Pane UI ui ) {", "this . root Pane = root Pane ;", "this . root Pane UI = ui ;", "root Parent = ( Root Pane Container ) root Pane . get Parent ( ) ;", "install Title Pane ( ) ; }"]}
{"ids": "51546", "code": ["public void write Long ( long value ) throws IO Exception {", "check Write Primitive Types ( ) ;", "primitive Types . write Long ( value ) ; }"]}
{"ids": "30512", "code": ["static public URL find Container XML ( String container Name ) {", "URL container Name URL = null ;", "String container Name File Path = Constants . Container . CONTAINER CONFIG DIRECTORY + STR_ + container Name + STR_ ;", "container Name URL = get Resource URL ( container Name File Path ) ;", "if ( container Name URL != null ) {", "if ( logger . is Loggable ( Level . INFO ) ) {", "logger . info ( STR_ + container Name URL + STR_ ) ; } }", "return container Name URL ; }"]}
{"ids": "85424", "code": ["public static List < String > expand Wildcards ( Iterable < File > dirs , List < String > names , Backend for Backend ) {", "List < String > result = new Array List < String > ( names . size ( ) ) ;", "for ( String name : names ) {", "expand Wildcard ( result , dirs , name , for Backend ) ; }", "return result ; }"]}
{"ids": "67371", "code": ["public static Charset for Name ( String charset Name ) {", "return for Name ( charset Name , null ) ; }"]}
{"ids": "35793", "code": ["public NS Number ( int i ) {", "double Value = long Value = i ;", "type = INTEGER ; }"]}
{"ids": "16207", "code": ["public static void dump ( String message , Stack Trace Element [ ] stack Trace ) {", "dump ( message , Arrays . as List ( stack Trace ) ) ; }"]}
{"ids": "44706", "code": ["public Matcher next ( ) throws IO Exception {", "readahead ( ) ;", "if ( matches == null ) {", "throw new No Such Element Exception ( ) ; }", "Matcher matcher = matches . next ( ) ;", "if ( discard ) {", "Pattern pattern = matcher . pattern ( ) ;", "for ( int n = NUM_ ; n < patterns . length ; n ++ ) {", "if ( patterns [ n ] == pattern ) {", "patterns [ n ] = null ;", "break ; } } }", "return matcher ; }"]}
{"ids": "76491", "code": ["@ Called Only By ( Amidst Thread . FRAGMENT LOADER ) public void process Queues ( ) {", "Dimension dimension = dimension Setting . get ( ) ;", "update Layer Manager ( dimension ) ;", "process Recycle Queue ( ) ;", "Fragment fragment ;", "while ( ( fragment = loading Queue . poll ( ) ) != null ) {", "load Fragment ( dimension , fragment ) ;", "dimension = dimension Setting . get ( ) ;", "update Layer Manager ( dimension ) ;", "process Recycle Queue ( ) ; }", "layer Manager . clear Invalidated Layers ( ) ; }"]}
{"ids": "50326", "code": ["default Field Declaration add Private Field ( Class < ? > type Class , String name ) {", "return add Field ( type Class , name , Modifier . PRIVATE ) ; }"]}
{"ids": "85272", "code": ["void Reconstruct Private Subrs ( int Font , Index Base Item [ ] fd Private Base , Offset Item [ ] fd Subrs ) {", "for ( int i = NUM_ ; i < fonts [ Font ] . fdprivate Lengths . length ; i ++ ) {", "if ( fd Subrs [ i ] != null && fonts [ Font ] . Private Subrs Offset [ i ] >= NUM_ ) {", "Output List . add Last ( new Subr Marker Item ( fd Subrs [ i ] , fd Private Base [ i ] ) ) ;", "if ( New L Subrs Index [ i ] != null ) Output List . add Last ( new Range Item ( new Random Access File Or Array ( ras Factory . create Source ( New L Subrs Index [ i ] ) ) , NUM_ , New L Subrs Index [ i ] . length ) ) ; } } }"]}
{"ids": "68736", "code": ["public void init GL ( ) {", "m Egl Core = new Egl Core ( null , Egl Core . FLAG RECORDABLE | Egl Core . FLAG TRY GLES 3 ) ;", "m Window Surface = new Window Surface ( m Egl Core , m Surface Texture ) ;", "m Window Surface . make Current ( ) ;", "m Record Surface = new Window Surface ( m Egl Core , m Media Recorder . get Surface ( ) , false ) ;", "init GL Components ( ) ; }"]}
{"ids": "45597", "code": ["Builder add Lenient ( String line ) {", "int index = line . index Of ( STR_ , NUM_ ) ;", "if ( index != - NUM_ ) {", "return add Lenient ( line . substring ( NUM_ , index ) , line . substring ( index + NUM_ ) ) ; }", "else if ( line . starts With ( STR_ ) ) {", "return add Lenient ( STR_ , line . substring ( NUM_ ) ) ; }", "else {", "return add Lenient ( STR_ , line ) ; } }"]}
{"ids": "79737", "code": ["public static void merge Node Children ( Tree Node node ) {", "Default Mutable Tree Node master Node = ( Default Mutable Tree Node ) node ;", "for ( int i = NUM_ ; i < master Node . get Child Count ( ) ; i ++ ) {", "Default Mutable Tree Node child = ( Default Mutable Tree Node ) master Node . get Child At ( i ) ;", "if ( ! child . is Leaf ( ) ) {", "Merge Help Utilities . merge Node Children ( DEFAULT MERGE TYPE , child ) ; } } }"]}
{"ids": "21240", "code": ["private static Object create And Bind Item ( Parameter Access parameters , Class < ? > item Type ) {", "try {", "Object value = item Type . new Instance ( ) ;", "bind ( value , parameters ) ;", "return value ; }", "catch ( Instantiation Exception | Illegal Access Exception e ) {", "throw new Binding Exception ( STR_ + item Type , e ) ; } }"]}
{"ids": "38308", "code": ["public Simple Setup Panel ( Experiment exp ) {", "this ( ) ;", "set Experiment ( exp ) ; }"]}
{"ids": "51980", "code": ["public static void add Listener ( Listener listener ) {", "listeners . add Last ( listener ) ; }"]}
{"ids": "49352", "code": ["private static void process Args ( String [ ] args ) {", "for ( int i = NUM_ ; i < args . length ; i ++ ) {", "String arg = args [ i ] ;", "if ( arg . equals ( STR_ ) ) {", "output Dir = args [ ++ i ] ; }", "else if ( arg . equals ( STR_ ) ) {", "unicode Data = args [ ++ i ] ; }", "else if ( arg . equals ( STR_ ) ) {", "language = args [ ++ i ] ; }", "else if ( arg . equals ( STR_ ) ) {", "country = args [ ++ i ] ; }", "else if ( arg . equals ( STR_ ) ) {", "valiant = args [ ++ i ] ; }", "else {", "usage ( ) ; } }", "locale Name = get Locale Name ( ) ; }"]}
{"ids": "21414", "code": ["public static boolean is Zoning Required ( Db Client db Client , Virtual Array nh ) {", "if ( nh . get Auto San Zoning ( ) == false ) {", "log . info ( STR_ + nh . get Label ( ) ) ;", "return false ; }", "return Network Util . are Network System Discovered ( db Client ) ; }"]}
{"ids": "15420", "code": ["private void init XML Tree ( ) throws Exception {", "update Filtered Tokens ( ) ;", "Array List elements = get Elements ( get Filtered Tokens ( ) ) ;", "if ( elements . size ( ) > NUM_ ) {", "throw new Exception ( STR_ ) ; }", "set Root Element ( ( XML Element ) elements . get ( NUM_ ) ) ; }"]}
{"ids": "49798", "code": ["public boolean starts With ( Char Seq prefix ) {", "return str . starts With ( prefix . str ) ; }"]}
{"ids": "38464", "code": ["public boolean contains Window ( Class < ? > window Class ) {", "return ( get Window ( window Class ) != null ) ; }"]}
{"ids": "27007", "code": ["public Abstract Surface Object ( Abstract Surface Object source ) {", "super ( source ) ;", "this . visible = source . visible ;", "this . unique Id = next Unique Id ( ) ;", "this . last Modified Time = System . current Time Millis ( ) ;", "this . enable Batch Picking = source . enable Batch Picking ; }"]}
{"ids": "66953", "code": ["public Soot Method And Class parse Soot Method String ( String parse String ) {", "if ( ! parse String . starts With ( STR_ ) || ! parse String . ends With ( STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ + parse String + STR_ ) ; }", "String name = STR_ ;", "String class Name = STR_ ;", "String return Type = STR_ ;", "Pattern pattern = Pattern . compile ( STR_ ) ;", "Matcher matcher = pattern . matcher ( parse String ) ;", "if ( matcher . find ( ) ) {", "class Name = matcher . group ( NUM_ ) ; }", "pattern = Pattern . compile ( STR_ ) ;", "matcher = pattern . matcher ( parse String ) ;", "if ( matcher . find ( ) ) {", "return Type = matcher . group ( NUM_ ) ;", "parse String = parse String . substring ( matcher . end ( NUM_ ) ) ; }", "pattern = Pattern . compile ( STR_ ) ;", "matcher = pattern . matcher ( parse String ) ;", "if ( matcher . find ( ) ) {", "name = matcher . group ( NUM_ ) ; }", "List < String > param List = new Array List < String > ( ) ;", "pattern = Pattern . compile ( STR_ ) ;", "matcher = pattern . matcher ( parse String ) ;", "if ( matcher . find ( ) ) {", "String params = matcher . group ( NUM_ ) ;", "for ( String param : params . split ( STR_ ) ) param List . add ( param . trim ( ) ) ; }", "return new Soot Method And Class ( name , class Name , return Type , param List ) ; }"]}
{"ids": "82877", "code": ["private void create New Review Task ( Task Repository repository , Task Data task Data ) throws Core Exception {", "Repository repo = Appraise Plugin Utils . get Git Repo For Repository ( repository ) ;", "Appraise Plugin Review Client client ;", "try {", "client = new Appraise Plugin Review Client ( repository ) ; }", "catch ( Git Client Exception e 1 ) {", "throw new Core Exception ( new Status ( I Status . ERROR , Appraise Connector Plugin . PLUGIN ID , STR_ ) ) ; }", "String current Branch ;", "try {", "current Branch = repo . get Full Branch ( ) ; }", "catch ( IO Exception e ) {", "throw new Core Exception ( new Status ( I Status . ERROR , Appraise Connector Plugin . PLUGIN ID , STR_ , e ) ) ; }", "if ( MASTER REF . equals ( current Branch ) ) {", "throw new Core Exception ( new Status ( I Status . ERROR , Appraise Connector Plugin . PLUGIN ID , STR_ ) ) ; }", "set Attribute Value ( task Data , schema . REQUESTER , repository . get User Name ( ) ) ;", "set Attribute Value ( task Data , schema . TARGET REF , MASTER REF ) ;", "set Attribute Value ( task Data , schema . REVIEW REF , current Branch ) ;", "Rev Commit review Commit ;", "try {", "review Commit = client . get Review Commit ( current Branch , MASTER REF ) ; }", "catch ( Git Client Exception e ) {", "throw new Core Exception ( new Status ( I Status . ERROR , Appraise Connector Plugin . PLUGIN ID , STR_ , e ) ) ; }", "if ( review Commit == null ) {", "throw new Core Exception ( new Status ( I Status . INFO , Appraise Connector Plugin . PLUGIN ID , STR_ + current Branch ) ) ; }", "set Attribute Value ( task Data , schema . DESCRIPTION , review Commit . get Full Message ( ) ) ;", "set Attribute Value ( task Data , schema . REVIEW COMMIT , review Commit . get Name ( ) ) ;", "try {", "List < Diff Entry > diffs = client . get Review Diffs ( current Branch , MASTER REF ) ;", "populate Diffs ( repository , diffs , task Data ) ; }", "catch ( Exception e ) {", "throw new Core Exception ( new Status ( I Status . ERROR , Appraise Connector Plugin . PLUGIN ID , STR_ , e ) ) ; } }"]}
{"ids": "12962", "code": ["@ Override public void startup ( ) throws Exception {", "Log . d ( Mary . LOG , STR_ ) ;", "List < String > voice Names = Mary Properties . get List ( STR_ ) ;", "for ( String voice Name : voice Names ) {", "long time = System . current Time Millis ( ) ;", "Voice unit Sel Voice = new Unit Selection Voice ( voice Name , this ) ;", "Log . d ( Mary . LOG , STR_ + unit Sel Voice + STR_ ) ;", "Voice . register Voice ( unit Sel Voice ) ;", "long newtime = System . current Time Millis ( ) - time ;", "Log . i ( Mary . LOG , STR_ + voice Name + STR_ + newtime + STR_ ) ; }", "Log . i ( Mary . LOG , STR_ ) ; }"]}
{"ids": "78169", "code": ["public int find Start Of Column ( int column ) {", "if ( column == m Columns ) return get Space Used ( ) ;", "int current Column = NUM_ ;", "int current Char Index = NUM_ ;", "while ( true ) {", "int new Char Index = current Char Index ;", "char c = m Text [ new Char Index ++ ] ;", "boolean is High = Character . is High Surrogate ( c ) ;", "int code Point = is High ? Character . to Code Point ( c , m Text [ new Char Index ++ ] ) : c ;", "int wcwidth = Wc Width . width ( code Point ) ;", "if ( wcwidth > NUM_ ) {", "current Column += wcwidth ;", "if ( current Column == column ) {", "while ( new Char Index < m Space Used ) {", "if ( Character . is High Surrogate ( m Text [ new Char Index ] ) ) {", "if ( Wc Width . width ( Character . to Code Point ( m Text [ new Char Index ] , m Text [ new Char Index + NUM_ ] ) ) <= NUM_ ) {", "new Char Index += NUM_ ; }", "else {", "break ; } }", "else if ( Wc Width . width ( m Text [ new Char Index ] ) <= NUM_ ) {", "new Char Index ++ ; }", "else {", "break ; } }", "return new Char Index ; }", "else if ( current Column > column ) {", "return current Char Index ; } }", "current Char Index = new Char Index ; } }"]}
{"ids": "55537", "code": ["public static Color decode ( String color , Color default Color ) {", "if ( color == null ) {", "return default Color ; }", "Color c = get Named Color ( color ) ;", "if ( c == null ) {", "try {", "c = Color . decode ( color ) ; }", "catch ( Number Format Exception ex ) {", "return default Color ; } }", "return c ; }"]}
{"ids": "12891", "code": ["public static Linked List < Mary Module > modules Required For Processing ( Mary Data Type source Type , Mary Data Type target Type , Locale locale , Voice voice ) {", "if ( ! registration Complete ) throw new Illegal State Exception ( STR_ ) ;", "if ( source Type == null ) throw new Null Pointer Exception ( STR_ ) ;", "if ( target Type == null ) throw new Null Pointer Exception ( STR_ ) ;", "Linked List < Mary Data Type > seen Types = new Linked List < Mary Data Type > ( ) ;", "seen Types . add ( source Type ) ;", "return modules Required For Processing ( source Type , target Type , locale , voice , seen Types ) ; }"]}
{"ids": "9278", "code": ["public double distance ( Vector o ) {", "return Math . sqrt ( Number Conversions . square ( x - o . x ) + Number Conversions . square ( y - o . y ) + Number Conversions . square ( z - o . z ) ) ; }"]}
{"ids": "67902", "code": ["public static long calculate Elapsed GC ( ) {", "long time Millis = NUM_ ;", "for ( Garbage Collector MX Bean gcbean : gcbeans ) {", "time Millis += gcbean . get Collection Time ( ) ; }", "return time Millis ; }"]}
{"ids": "450", "code": ["public void start Object ( int numfields ) {", "not Nested ( ) ;", "if ( vtable == null || vtable . length < numfields ) vtable = new int [ numfields ] ;", "vtable in use = numfields ;", "Arrays . fill ( vtable , NUM_ , vtable in use , NUM_ ) ;", "nested = true ;", "object start = offset ( ) ; }"]}
{"ids": "71020", "code": ["public static String string Of Char ( char ch , int count ) {", "String Buffer buf = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "buf . append ( ch ) ; }", "return buf . to String ( ) ; }"]}
{"ids": "956", "code": ["private void add Connection View ( Connection connection ) {", "Platform Impl . run And Wait ( null ) ; }"]}
{"ids": "38513", "code": ["public void add Script Finished Listener ( Script Execution Listener l ) {", "m Finished Listeners . add ( l ) ; }"]}
{"ids": "44405", "code": ["public void CONT ( int session Number ) throws Exception {", "this . max Session Number = Math . max ( this . max Session Number , session Number ) ;", "test Elements . add ( new Continuation Element ( session Number ) ) ; }"]}
{"ids": "56157", "code": ["public static double calc Rotation Angle In Degrees ( Point F center Pt , Point F target Pt ) {", "double theta = Math . atan 2 ( target Pt . y - center Pt . y , target Pt . x - center Pt . x ) ;", "double angle = Math . to Degrees ( theta ) ;", "if ( angle < NUM_ ) {", "angle += NUM_ ; }", "return angle ; }"]}
{"ids": "67666", "code": ["public int count In ( Char Sequence sequence ) {", "int count = NUM_ ;", "for ( int i = NUM_ ; i < sequence . length ( ) ; i ++ ) {", "if ( matches ( sequence . char At ( i ) ) ) {", "count ++ ; } }", "return count ; }"]}
{"ids": "48231", "code": ["public Delta CRL Indicator Extension ( int crl Num ) throws IO Exception {", "super ( PKIX Extensions . Delta CRL Indicator Id , true , Big Integer . value Of ( crl Num ) , NAME , LABEL ) ; }"]}
{"ids": "9242", "code": ["static private double calc Log Prob ( int num Appear , double mu ) {", "final double sigma = calc Sigma From Mu ( mu ) ;", "final double log Num Appear = Math . log ( num Appear ) ;", "final double over Mu = Math . max ( log Num Appear - mu , NUM_ ) ;", "final double res = - ( NUM_ / NUM_ ) * ( over Mu * over Mu ) / ( sigma * sigma ) - s log Sqrt Two Pi - Math . log ( sigma ) ;", "assert ( res <= NUM_ ) ;", "return res ; }"]}
{"ids": "39699", "code": ["@ Override public Software PID Controller with Tolerance ( double tolerance ) {", "target = target . with Tolerance ( Math . abs ( tolerance ) ) ;", "return this ; }"]}
{"ids": "48785", "code": ["protected final void drag Drop Finished ( final boolean success , final int operations , final int x , final int y ) {", "Drag Source Event event = new Drag Source Drop Event ( get Drag Source Context ( ) , operations & source Actions , success , x , y ) ;", "Event Dispatcher dispatcher = new Event Dispatcher ( DISPATCH FINISH , event ) ;", "Sun Toolkit . invoke Later On App Context ( Sun Toolkit . target To App Context ( get Component ( ) ) , dispatcher ) ;", "start Secondary Event Loop ( ) ;", "set Native Context ( NUM_ ) ;", "drag Image = null ;", "drag Image Offset = null ; }"]}
{"ids": "54477", "code": ["protected static String extract Secret Access Key ( String s 3 uri ) {", "return s 3 uri . substring ( s 3 uri . index Of ( STR_ , s 3 uri . index Of ( STR_ ) + NUM_ ) + NUM_ , s 3 uri . index Of ( STR_ ) ) ; }"]}
{"ids": "70701", "code": ["private void dial ( String contact Information , boolean make The Call , boolean use Phone Speaker ) {", "if ( contact Information . equals ( STR_ ) ) {", "String last Recipient = Recipient Cmd . get Last Recipient Number ( ) ;", "String last Recipient Name = Recipient Cmd . get Last Recipient Name ( ) ;", "if ( last Recipient != null ) {", "do Dial ( last Recipient Name , last Recipient , make The Call , use Phone Speaker ) ; }", "else {", "send ( STR_ ) ; } }", "else {", "Resolved Contact resolved Contact = m Contacts Resolver . resolve Contact ( contact Information , Contacts Resolver . TYPE ALL ) ;", "if ( resolved Contact == null ) {", "send ( R . string . chat no match for , contact Information ) ; }", "else if ( resolved Contact . is Distinct ( ) ) {", "do Dial ( resolved Contact . get Name ( ) , resolved Contact . get Number ( ) , make The Call , use Phone Speaker ) ; }", "else {", "ask For More Details ( resolved Contact . get Candidates ( ) ) ; } } }"]}
{"ids": "66860", "code": ["public void add Safe Class ( Soot Class clz ) {", "safe Classes . add ( clz . get Name ( ) ) ; }"]}
{"ids": "64324", "code": ["private boolean active List Has Room ( ) {", "int max Downloads = NUM_ ;", "return m Active List . size ( ) < max Downloads ; }"]}
{"ids": "56201", "code": ["public boolean is Running ( ) {", "return this . running ; }"]}
{"ids": "76732", "code": ["protected static Map < String , Step > parse ( Class < ? extends RSLP Stemmer Base > clazz , String resource ) {", "try {", "Input Stream is = clazz . get Resource As Stream ( resource ) ;", "Line Number Reader r = new Line Number Reader ( new Input Stream Reader ( is , Standard Charsets . UTF 8 ) ) ;", "Map < String , Step > steps = new Hash Map < > ( ) ;", "String step ;", "while ( ( step = read Line ( r ) ) != null ) {", "Step s = parse Step ( r , step ) ;", "steps . put ( s . name , s ) ; }", "r . close ( ) ;", "return steps ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "80560", "code": ["public String bet To String ( ) {", "final String Builder sb = new String Builder ( ) ;", "sb . append ( amount ) ;", "sb . append ( STR_ ) ;", "sb . append ( item Name ) ;", "sb . append ( STR_ ) ;", "sb . append ( target ) ;", "return sb . to String ( ) ; }"]}
{"ids": "57162", "code": ["private boolean check Match Ip ( Map < String , Object > rows ) {", "boolean match Ether = false ;", "String val = ( String ) rows . get ( Static Flow Entry Pusher . COLUMN DL TYPE ) ;", "if ( val != null ) {", "int type = NUM_ ;", "if ( val . starts With ( STR_ ) ) {", "type = Integer . parse Int ( val . substring ( NUM_ ) , NUM_ ) ; }", "else {", "try {", "type = Integer . parse Int ( val ) ; }", "catch ( Number Format Exception e ) { } }", "if ( type == NUM_ ) match Ether = true ; }", "if ( ( rows . contains Key ( Static Flow Entry Pusher . COLUMN NW DST ) || rows . contains Key ( Static Flow Entry Pusher . COLUMN NW SRC ) || rows . contains Key ( Static Flow Entry Pusher . COLUMN NW PROTO ) || rows . contains Key ( Static Flow Entry Pusher . COLUMN NW TOS ) ) && ( match Ether == false ) ) return false ;", "return true ; }"]}
{"ids": "8814", "code": ["private String class To Entry Path ( Class < ? > clazz ) {", "String name = STR_ ;", "Class < ? > parent ;", "while ( ( parent = clazz . get Enclosing Class ( ) ) != null ) {", "name = STR_ + clazz . get Simple Name ( ) + name ;", "clazz = parent ; }", "return class Name To Entry Path ( clazz . get Canonical Name ( ) + name ) ; }"]}
{"ids": "4807", "code": ["public static String write ( POS Mikheev Counter counter ) {", "return POS Base Line Counter . write ( counter ) ; }"]}
{"ids": "35016", "code": ["private Map < String , Annotation Mirror > annos In Package ( Package Element package Element ) {", "return create Imported Annotations Map ( Element Filter . types In ( package Element . get Enclosed Elements ( ) ) ) ; }"]}
{"ids": "22904", "code": ["public Osm Element paste From ( ) {", "List < Way > ways = storage . get Ways ( ) ;", "List < Node > nodes = storage . get Nodes ( ) ;", "if ( mode == Mode . CUT ) {", "reset ( ) ;", "if ( ways != null && ways . size ( ) == NUM_ ) {", "Way w = ways . get ( NUM_ ) ;", "w . set State ( saved State ) ;", "for ( Node nd : w . get Nodes ( ) ) {", "Log . d ( STR_ , STR_ + nd . get Osm Id ( ) ) ;", "nd . set State ( saved Nd State . get ( nd ) ) ; }", "return w ; }", "else if ( nodes != null && nodes . size ( ) == NUM_ ) {", "Node n = nodes . get ( NUM_ ) ;", "n . set State ( saved State ) ;", "return n ; } }", "else {", "if ( ways != null && ways . size ( ) == NUM_ ) {", "return ways . get ( NUM_ ) ; }", "else if ( nodes != null && nodes . size ( ) == NUM_ ) {", "return nodes . get ( NUM_ ) ; } }", "return null ; }"]}
{"ids": "45787", "code": ["public final void update Cursor ( ) {", "update Pending . set ( false ) ;", "update Cursor Impl ( ) ; }"]}
{"ids": "46715", "code": ["public static boolean is Middle Mouse Button ( Mouse Event an Event ) {", "return ( ( an Event . get Modifiers Ex ( ) & Input Event . BUTTON 2 DOWN MASK ) != NUM_ || an Event . get Button ( ) == Mouse Event . BUTTON 2 ) ; }"]}
{"ids": "43127", "code": ["public void add Success Message ( final String success Message ) {", "success Message List . add ( success Message ) ; }"]}
{"ids": "74474", "code": ["private void start Stopped Changed ( ) {", "clock . set Start Stopped ( start Stopped Check Box . is Selected ( ) ) ;", "changed = true ; }"]}
{"ids": "11500", "code": ["public void close ( ) throws IO Exception {", "try {", "Debug . message ( STR_ , STR_ ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Thread . sleep ( NUM_ ) ; }", "if ( input Stream != null ) input Stream . close ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "input Stream = null ; }"]}
{"ids": "1520", "code": ["private void read Binary ( final Little Endian Data Input Stream dis ) throws IO Exception {", "Raj Log . i ( STR_ ) ;", "dis . skip ( NUM_ ) ;", "int facet Count = dis . read Int ( ) ;", "float [ ] vertices Arr = new float [ facet Count * NUM_ ] ;", "float [ ] normals Arr = new float [ facet Count * NUM_ ] ;", "int [ ] indices Arr = new int [ facet Count * NUM_ ] ;", "float [ ] temp Norms = new float [ NUM_ ] ;", "int vert Pos = NUM_ , norm Pos = NUM_ ;", "for ( int i = NUM_ ; i < indices Arr . length ; i ++ ) indices Arr [ i ] = i ;", "while ( dis . available ( ) > NUM_ ) {", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "temp Norms [ j ] = dis . read Float ( ) ;", "if ( Float . is Na N ( temp Norms [ j ] ) || Float . is Infinite ( temp Norms [ j ] ) ) {", "Raj Log . w ( STR_ ) ;", "temp Norms [ NUM_ ] = NUM_ ;", "temp Norms [ NUM_ ] = NUM_ ;", "temp Norms [ NUM_ ] = NUM_ ;", "break ; } }", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "normals Arr [ norm Pos ++ ] = temp Norms [ NUM_ ] ;", "normals Arr [ norm Pos ++ ] = temp Norms [ NUM_ ] ;", "normals Arr [ norm Pos ++ ] = temp Norms [ NUM_ ] ; }", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) vertices Arr [ vert Pos ++ ] = dis . read Float ( ) ;", "dis . skip ( NUM_ ) ; }", "m Root Object . set Data ( vertices Arr , normals Arr , null , null , indices Arr , false ) ; }"]}
{"ids": "85108", "code": ["public static void assert Specific Lang ( String specific Lang ) throws XMP Exception {", "if ( specific Lang == null || specific Lang . length ( ) == NUM_ ) {", "throw new XMP Exception ( STR_ , XMP Error . BADPARAM ) ; } }"]}
{"ids": "63597", "code": ["public int on Block Exploded ( ) {", "return ( int ) ( fuse Time / NUM_ + Math . random ( ) * fuse Time / NUM_ ) ; }"]}
{"ids": "83489", "code": ["@ Override public boolean has Queued Reader Threads ( ) {", "return reader Lock . has Queued Threads ( ) ; }"]}
{"ids": "36655", "code": ["public long inactive Time Millis ( ) {", "return System . current Time Millis ( ) - last Time Millis ; }"]}
{"ids": "14825", "code": ["public void add Definition ( ICOS Definition cos Def ) throws UMS Exception {", "if ( ! ( cos Def instanceof Direct COS Definition ) ) {", "String msg = i 18 n . get String ( IUMS Constants . INVALID COSDEFINITION ) ;", "throw new UMS Exception ( msg ) ; }", "String [ ] cos Attributes = cos Def . get COS Attributes ( ) ;", "Abstract Collection a List = ( Abstract Collection ) Arrays . as List ( ICOS Definition . qualifiers ) ;", "for ( int i = NUM_ ; i < cos Attributes . length ; i ++ ) {", "String cos Attribute = null ;", "String qualifier = null ;", "String Tokenizer st = new String Tokenizer ( cos Attributes [ i ] ) ;", "if ( st . has More Tokens ( ) ) {", "cos Attribute = st . next Token ( ) ; }", "if ( cos Attribute == null ) {", "String msg = i 18 n . get String ( IUMS Constants . INVALID COS ATTRIBUTE QUALIFIER ) ;", "throw new UMS Exception ( msg ) ; }", "if ( st . has More Tokens ( ) ) qualifier = st . next Token ( ) ;", "if ( qualifier == null ) {", "qualifier = ICOS Definition . qualifiers [ ICOS Definition . DEFAULT ] ;", "cos Def . remove COS Attribute ( cos Attribute ) ;", "cos Def . add COS Attribute ( cos Attribute , ICOS Definition . DEFAULT ) ; }", "if ( ! a List . contains ( qualifier ) ) {", "String msg = i 18 n . get String ( IUMS Constants . INVALID COS ATTRIBUTE QUALIFIER ) ;", "throw new UMS Exception ( msg ) ; } }", "Persistent Object po = ( Persistent Object ) cos Def ;", "parent Object . add Child ( po ) ; }"]}
{"ids": "34301", "code": ["Q Name to Q Name ( Class < ? > output Class ) {", "String local Part ;", "String namespace Uri ;", "if ( output Class . is Annotation Present ( Xml Root Element . class ) ) {", "Xml Root Element annotation = output Class . get Annotation ( Xml Root Element . class ) ;", "local Part = annotation . name ( ) ;", "namespace Uri = annotation . namespace ( ) ; }", "else if ( output Class . is Annotation Present ( Xml Type . class ) ) {", "Xml Type annotation = output Class . get Annotation ( Xml Type . class ) ;", "local Part = annotation . name ( ) ;", "namespace Uri = annotation . namespace ( ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ + output Class + STR_ + STR_ ) ; }", "if ( JAXB DEFAULT ANNOTATION VALUE . equals ( local Part ) ) {", "local Part = Class Utils . get Short Name As Property ( output Class ) ; }", "if ( JAXB DEFAULT ANNOTATION VALUE . equals ( namespace Uri ) ) {", "Package output Class Package = output Class . get Package ( ) ;", "if ( output Class Package != null && output Class Package . is Annotation Present ( Xml Schema . class ) ) {", "Xml Schema annotation = output Class Package . get Annotation ( Xml Schema . class ) ;", "namespace Uri = annotation . namespace ( ) ; }", "else {", "namespace Uri = XML Constants . NULL NS URI ; } }", "return new Q Name ( namespace Uri , local Part ) ; }"]}
{"ids": "476", "code": ["private static String generate JWT ( String secret , String jwt ID , String iss , Integer ttl , Map < String , String > claims ) throws Hmac Exception {", "try {", "return sign JWT ( secret , jwt ID , ttl , iss , claims ) ; }", "catch ( JOSE Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Hmac Exception ( STR_ , e ) ; } }"]}
{"ids": "41700", "code": ["public void export Symbols ( String [ ] export Names , Symbol [ ] symbols ) {", "if ( exported Symbols == null ) {", "exported Symbols = new Array List ( ) ; }", "for ( int i = NUM_ ; i < export Names . length && i < symbols . length ; i ++ ) {", "exported Symbols . add ( new Exported Symbol ( symbols [ i ] , export Names [ i ] ) ) ; } }"]}
{"ids": "34986", "code": ["public static Annotation Mirror find Effective Annotation In Hierarchy ( final Qualifier Hierarchy qualifier Hierarchy , final Annotated Type Mirror to Search , final Annotation Mirror top ) {", "return find Effective Annotation In Hierarchy ( qualifier Hierarchy , to Search , top , false ) ; }"]}
{"ids": "3945", "code": ["public boolean to Fail ( ) {", "Lifecycle State state ;", "synchronized ( this ) {", "state = state ;", "if ( state . is After Destroying ( ) ) {", "return false ; }", "state = FAILED ;", "last Change Time = Current Time . current Time ( ) ; }", "if ( log != null && log . is Loggable ( level ) ) log . log ( level , STR_ + name ) ;", "notify Listeners ( state , FAILED ) ;", "fail Count ++ ;", "return true ; }"]}
{"ids": "45230", "code": ["private static void read ( Input Stream in , byte [ ] buf , int pos , int n ) throws IO Exception {", "int read = NUM_ ;", "int res = NUM_ ;", "while ( read < n ) {", "res = in . read ( buf , read + pos , n - read ) ;", "if ( res > NUM_ ) {", "read += res ; }", "else {", "throw new IO Exception ( STR_ + read + STR_ + n ) ; } } }"]}
{"ids": "74523", "code": ["void cancel Included Only ( ) {", "if ( ! show All Input ) {", "input All Button . do Click ( ) ; }", "if ( ! show All Output ) {", "output All Button . do Click ( ) ; }", "if ( ! show All Align ) {", "align All Button . do Click ( ) ; } }"]}
{"ids": "70661", "code": ["List < Entry > kill All ( boolean root Included ) {", "List < Entry > killed = new Array List < > ( root Included ? entries . size ( ) : entries . size ( ) - NUM_ ) ;", "Entry entry ;", "for ( int i = entries . size ( ) - NUM_ ; i > ( root Included ? - NUM_ : NUM_ ) ; i -- ) {", "entry = entries . get ( i ) ;", "if ( entry . dead ) continue ;", "entry . dead = true ;", "if ( i != NUM_ ) {", "killed . add ( entry ) ; } }", "return killed ; }"]}
{"ids": "21190", "code": ["public static String parse Disk String ( String input ) {", "String delims = STR_ ;", "String [ ] tokens = input . split ( delims ) ;", "return tokens [ NUM_ ] ; }"]}
{"ids": "36713", "code": ["protected void draw Cloud ( int x , int y , int w , int h , Color fill Color , Paint fill Paint , Color pen Color , boolean shadow ) {", "General Path path = new General Path ( ) ;", "path . move To ( ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) ) ;", "path . curve To ( ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) , ( float ) x , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) ) ;", "path . curve To ( ( float ) x , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) ) ;", "path . curve To ( ( float ) ( x + NUM_ * w ) , ( float ) ( y + h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) ) ;", "path . curve To ( ( float ) ( x + w ) , ( float ) ( y + NUM_ * h ) , ( float ) ( x + w ) , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) ) ;", "path . curve To ( ( float ) ( x + w ) , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) ) ;", "path . curve To ( ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) , ( float ) ( x + NUM_ * w ) , ( float ) ( y + NUM_ * h ) ) ;", "path . close Path ( ) ;", "draw Path ( path , fill Color , fill Paint , pen Color , shadow ) ; }"]}
{"ids": "31119", "code": ["private static boolean is Trusted ( Object obj , Trust Verifier . Context ctx ) throws Remote Exception {", "Object saved = state . get ( ) ;", "try {", "state . set ( obj ) ;", "return ctx . is Trusted Object ( obj ) ; }", "finally {", "state . set ( saved ) ; } }"]}
{"ids": "73248", "code": ["private void connect Equalized ( Synapse Group synapse Group ) {", "current Ordering Indices = new int [ source Neurons . length ] ;", "int num Connects Per Src ;", "int expected Num Syns ;", "if ( synapse Group . is Recurrent ( ) && ! self Connection Allowed ) {", "num Connects Per Src = ( int ) ( connection Density * ( source Neurons . length - NUM_ ) ) ; }", "else {", "num Connects Per Src = ( int ) ( connection Density * target Neurons . length ) ; }", "expected Num Syns = num Connects Per Src * source Neurons . length ;", "synapse Group . pre Allocate Synapses ( expected Num Syns ) ;", "for ( int i = NUM_ , n = source Neurons . length ; i < n ; i ++ ) {", "current Ordering Indices [ i ] = num Connects Per Src ;", "Neuron src = source Neurons [ i ] ;", "Neuron tar ;", "for ( int j = NUM_ ; j < num Connects Per Src ; j ++ ) {", "tar = target Neurons [ sparse Ordering [ i ] [ j ] ] ;", "Synapse s = new Synapse ( src , tar ) ;", "synapse Group . add New Synapse ( s ) ; } } }"]}
{"ids": "8213", "code": ["public static Number multiply ( Character left , Character right ) {", "return multiply ( Integer . value Of ( left ) , right ) ; }"]}
{"ids": "8143", "code": ["public static String normalize ( final Char Sequence self ) {", "final String s = self . to String ( ) ;", "int nx = s . index Of ( STR_ ) ;", "if ( nx < NUM_ ) {", "return s ; }", "final int len = s . length ( ) ;", "final String Builder sb = new String Builder ( len ) ;", "int i = NUM_ ;", "do {", "sb . append ( s , i , nx ) ;", "sb . append ( STR_ ) ;", "if ( ( i = nx + NUM_ ) >= len ) break ;", "if ( s . char At ( i ) == STR_ ) {", "if ( ++ i >= len ) break ; }", "nx = s . index Of ( STR_ , i ) ; }", "while ( nx > NUM_ ) ;", "sb . append ( s , i , len ) ;", "return sb . to String ( ) ; }"]}
{"ids": "27426", "code": ["public void write ( final int b ) throws IO Exception {", "if ( m store == null ) {", "throw new Illegal State Exception ( ERR NO STORE ) ; }", "if ( m is Saved ) {", "throw new Illegal State Exception ( ERR ALREADY SAVED ) ; }", "if ( m count == m blob Threshold && ! m writing Hdr ) {", "if ( m blob Header == null ) {", "m blob Header = new Array List < Integer > ( ) ; }", "final int cur Addr = ( int ) m store . alloc ( m buf , m count , m context ) ;", "m blob Header . add ( cur Addr ) ;", "m count = NUM_ ; }", "m buf [ m count ++ ] = ( byte ) b ;", "m bytes Written ++ ; }"]}
{"ids": "3831", "code": ["public Start Listener ( Object resource ) {", "resource = resource ; }"]}
{"ids": "73507", "code": ["public List < T > as Flat List ( ) {", "List < T > list = new Array List < T > ( ) ;", "for ( int i = NUM_ ; i < get Row Count ( ) ; i ++ ) {", "for ( int j = NUM_ ; j < get Column Count ( ) ; j ++ ) {", "list . add ( get Logical Value At ( i , j ) ) ; } }", "return list ; }"]}
{"ids": "68622", "code": ["public void record Timestamp ( ) {", "long cur Timestamp = System . current Time Millis ( ) ;", "if ( used Fields > NUM_ ) {", "long diff = cur Timestamp - last Value ;", "if ( used Fields == diffs . length ) {", "long removed Value = diffs [ cur Position ] ;", "diffs [ cur Position ] = diff ;", "calculate New Average ( removed Value , diff , false ) ;", "shift End ( ) ; }", "else {", "calculate New Average ( NUM_ , diff , true ) ;", "diffs [ cur Position ] = diff ;", "shift End ( ) ; } }", "else if ( last Value != - NUM_ ) {", "long diff = cur Timestamp - last Value ;", "current Average = NUM_ ;", "diffs [ cur Position ] = diff ;", "calculate New Average ( NUM_ , diff , true ) ;", "shift End ( ) ; }", "last Value = cur Timestamp ; }"]}
{"ids": "2270", "code": ["@ After Method public void tear Down ( ) throws Exception {", "Throwable t = thread Failure . get And Set ( null ) ;", "if ( t != null ) {", "if ( t instanceof Error ) throw ( Error ) t ;", "else if ( t instanceof Runtime Exception ) throw ( Runtime Exception ) t ;", "else if ( t instanceof Exception ) throw ( Exception ) t ;", "else {", "Assertion Failed Error afe = new Assertion Failed Error ( t . to String ( ) ) ;", "afe . init Cause ( t ) ;", "throw afe ; } }", "if ( Thread . interrupted ( ) ) tear Down Fail ( STR_ ) ;", "check Fork Join Pool Thread Leaks ( ) ; }"]}
{"ids": "38963", "code": ["protected double default Max Radius ( ) {", "return Math . sqrt ( NUM_ ) ; }"]}
{"ids": "46655", "code": ["public void insert ( Component component , int index ) {", "if ( index < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "int nitems = get Component Count ( ) ;", "Vector < Component > temp Items = new Vector < Component > ( ) ;", "for ( int i = index ; i < nitems ; i ++ ) {", "temp Items . add Element ( get Component ( index ) ) ;", "remove ( index ) ; }", "add ( component ) ;", "for ( Component temp Item : temp Items ) {", "add ( temp Item ) ; } }"]}
{"ids": "36312", "code": ["public static List < String > unescape ( String source , char escape Char , char [ ] special Characters , char split Character , int split Limit ) {", "List < String > result = new Linked List < > ( ) ;", "String Builder b = new String Builder ( ) ;", "boolean read Escape = false ;", "int index Count = - NUM_ ;", "for ( char c : source . to Char Array ( ) ) {", "index Count ++ ;", "if ( read Escape ) {", "boolean found = false ;", "if ( c == split Character ) {", "found = true ;", "b . append ( c ) ; }", "else if ( c == escape Char ) {", "found = true ;", "b . append ( c ) ; }", "else {", "for ( char s : special Characters ) {", "if ( s == c ) {", "found = true ;", "b . append ( c ) ;", "break ; } } }", "if ( ! found ) {", "throw new Illegal Argument Exception ( STR_ + source + STR_ + c + STR_ ) ; }", "read Escape = false ; }", "else if ( c == escape Char ) {", "read Escape = true ; }", "else if ( c == split Character ) {", "read Escape = false ;", "result . add ( b . to String ( ) ) ;", "if ( split Limit != - NUM_ ) {", "if ( result . size ( ) == split Limit - NUM_ ) {", "result . add ( source . substring ( index Count + NUM_ ) ) ;", "return result ; } }", "b = new String Builder ( ) ; }", "else {", "read Escape = false ;", "b . append ( c ) ; } }", "result . add ( b . to String ( ) ) ;", "return result ; }"]}
{"ids": "46520", "code": ["void add Rule ( String [ ] selector , Attribute Set declaration , boolean is Linked ) {", "int n = selector . length ;", "String Builder sb = new String Builder ( ) ;", "sb . append ( selector [ NUM_ ] ) ;", "for ( int counter = NUM_ ; counter < n ; counter ++ ) {", "sb . append ( STR_ ) ;", "sb . append ( selector [ counter ] ) ; }", "String selector Name = sb . to String ( ) ;", "Style rule = get Style ( selector Name ) ;", "if ( rule == null ) {", "Style alt Rule = add Style ( selector Name , null ) ;", "synchronized ( this ) {", "Selector Mapping mapping = get Root Selector Mapping ( ) ;", "for ( int i = n - NUM_ ; i >= NUM_ ; i -- ) {", "mapping = mapping . get Child Selector Mapping ( selector [ i ] , true ) ; }", "rule = mapping . get Style ( ) ;", "if ( rule == null ) {", "rule = alt Rule ;", "mapping . set Style ( rule ) ;", "refresh Resolved Rules ( selector Name , selector , rule , mapping . get Specificity ( ) ) ; } } }", "if ( is Linked ) {", "rule = get Linked Style ( rule ) ; }", "rule . add Attributes ( declaration ) ; }"]}
{"ids": "29859", "code": ["public Builder append Read Data ( byte [ ] data ) {", "Assertions . check State ( data != null && data . length > NUM_ ) ;", "segments . add ( new Segment ( data , null ) ) ;", "return this ; }"]}
{"ids": "34210", "code": ["private boolean is Latest Dss Keystore ( TSL Parser Result parse Result ) {", "List < String > english Scheme Information UR Is = parse Result . get English Scheme Information UR Is ( ) ;", "return english Scheme Information UR Is . contains ( oj Url ) ; }"]}
{"ids": "11788", "code": ["public Layer Graphic Warehouse Support ( ) {", "init Drawing Attributes ( ) ;", "graphics = new OM Graphic List ( ) ;", "graphics . set Traverse Mode ( OM Graphic List . LAST ADDED ON TOP ) ; }"]}
{"ids": "41464", "code": ["public boolean matches Naming Convension ( ) {", "return package Name . matches ( JAVA PACKAGE CONVENSION ) ; }"]}
{"ids": "49002", "code": ["void remember Factory ( String host , RMI Socket Factory factory ) {", "synchronized ( success Table ) {", "while ( host List . size ( ) >= Max Remembered Hosts ) {", "success Table . remove ( host List . element At ( NUM_ ) ) ;", "host List . remove Element At ( NUM_ ) ; }", "host List . add Element ( host ) ;", "success Table . put ( host , factory ) ; } }"]}
{"ids": "48480", "code": ["public static int normalize ( char [ ] src , int src Start , int src Limit , char [ ] dest , int dest Start , int dest Limit , Mode mode , int options ) {", "int length = mode . normalize ( src , src Start , src Limit , dest , dest Start , dest Limit , options ) ;", "if ( length <= ( dest Limit - dest Start ) ) {", "return length ; }", "else {", "throw new Index Out Of Bounds Exception ( Integer . to String ( length ) ) ; } }"]}
{"ids": "29937", "code": ["private void remove Obsolete Elements ( List < String > names , Map < String , View > shared Elements , List < String > elements To Remove ) {", "if ( elements To Remove . size ( ) > NUM_ ) {", "names . remove All ( elements To Remove ) ;", "for ( String element To Remove : elements To Remove ) {", "shared Elements . remove ( element To Remove ) ; } } }"]}
{"ids": "71211", "code": ["public static double buffer Distance Error ( int quad Segs ) {", "double alpha = Math . PI / NUM_ / quad Segs ;", "return NUM_ - Math . cos ( alpha / NUM_ ) ; }"]}
{"ids": "28554", "code": ["public void add ( Character character ) {", "elements . add ( character == null ? Json Null . INSTANCE : new Json Primitive ( character ) ) ; }"]}
{"ids": "43945", "code": ["public void remove Child ( Group the Group ) {", "m Children . remove ( the Group ) ; }"]}
{"ids": "21518", "code": ["protected Storage Port check Port Exists In DB ( String native Guid ) throws IO Exception {", "Storage Port port = null ;", "List < Storage Port > port In DB = Custom Query Utility . get Active Storage Port By Native Guid ( db Client , native Guid ) ;", "if ( port In DB != null && ! port In DB . is Empty ( ) ) {", "port = port In DB . get ( NUM_ ) ; }", "return port ; }"]}
{"ids": "43309", "code": ["public void append Split Element ( Fragment a Split ) {", "splits . add ( a Split ) ; }"]}
{"ids": "40792", "code": ["public Respoke Direct Connection direct Connection ( ) {", "if ( null != direct Connection Reference ) {", "return direct Connection Reference . get ( ) ; }", "else {", "return null ; } }"]}
{"ids": "10018", "code": ["private String append National Number ( String national Number ) {", "int prefix Before National Number Length = prefix Before National Number . length ( ) ;", "if ( should Add Space After National Prefix && prefix Before National Number Length > NUM_ && prefix Before National Number . char At ( prefix Before National Number Length - NUM_ ) != SEPARATOR BEFORE NATIONAL NUMBER ) {", "return new String ( prefix Before National Number ) + SEPARATOR BEFORE NATIONAL NUMBER + national Number ; }", "else {", "return prefix Before National Number + national Number ; } }"]}
{"ids": "73310", "code": ["public void cut ( ) {", "copy ( ) ;", "delete Selected Objects ( ) ; }"]}
{"ids": "19833", "code": ["public synchronized void release ( ) {", "index . clear ( ) ; }"]}
{"ids": "19728", "code": ["public void configure ( ) {", "if ( cmd Prefix != null ) {", "prefix = cmd Prefix . split ( STR_ ) ; } }"]}
{"ids": "44124", "code": ["protected void write Transform ( Affine Transform t ) throws IO Exception {", "page Stream . matrix ( t ) ; }"]}
{"ids": "82208", "code": ["public Painter Chain prepend Painter ( Painter p ) {", "Painter [ ] new Chain = new Painter [ chain . length + NUM_ ] ;", "System . arraycopy ( chain , NUM_ , new Chain , NUM_ , chain . length ) ;", "new Chain [ NUM_ ] = p ;", "return new Painter Chain ( new Chain ) ; }"]}
{"ids": "67512", "code": ["@ Nullable private Operator . Kind parse Operator ( Token Stream tokens ) {", "if ( tokens . has ( STR_ ) ) {", "tokens . next ( ) ;", "tokens . expect ( STR_ ) ;", "return Operator . Kind . EQUALS ; }", "if ( tokens . has ( STR_ ) ) {", "tokens . next ( ) ;", "tokens . expect ( STR_ ) ;", "return Operator . Kind . NOT EQUALS ; }", "if ( tokens . has ( STR_ ) ) {", "tokens . next ( ) ;", "if ( tokens . has ( STR_ ) ) {", "tokens . next ( ) ;", "return Operator . Kind . LESS EQUAL ; }", "return Operator . Kind . LESS ; }", "if ( tokens . has ( STR_ ) ) {", "tokens . next ( ) ;", "if ( tokens . has ( STR_ ) ) {", "tokens . next ( ) ;", "return Operator . Kind . GREATER EQUAL ; }", "return Operator . Kind . GREATER ; }", "return null ; }"]}
{"ids": "35224", "code": ["@ Override public boolean drag To ( Selector obj , Selector dest Obj , int steps ) throws Ui Object Not Found Exception , Not Implemented Exception {", "return drag To ( device . find Object ( obj . to Ui Selector ( ) ) , dest Obj , steps ) ; }"]}
{"ids": "4497", "code": ["private void queue Up Syncs ( final Cursor contacts Cursor ) {", "Contact Sync Entry sync Entry = null ;", "while ( contacts Cursor . move To Next ( ) ) {", "if ( sync Entry == null ) {", "sync Entry = new Contact Sync Entry ( UPLOAD BATCH SIZE ) ; }", "final String number = contacts Cursor . get String ( contacts Cursor . get Column Index ( Contacts Contract . Common Data Kinds . Phone . NUMBER ) ) ;", "final String name = contacts Cursor . get String ( contacts Cursor . get Column Index ( Contacts Contract . Common Data Kinds . Phone . DISPLAY NAME ) ) ;", "if ( ! Text Utils . is Empty ( number ) ) {", "sync Entry . add Number ( number To National ( number ) ) ;", "sync Entry . add Name ( name ) ;", "if ( sync Entry . is Full ( ) ) {", "Logger . d ( TAG , STR_ ) ;", "m Sync Queue . add ( sync Entry ) ;", "sync Entry = null ; } } } }"]}
{"ids": "75820", "code": ["public static void write Result To File ( Result result , String fname ) throws Exception {", "Print Writer outer = new Print Writer ( new Buffered Writer ( new File Writer ( fname ) ) ) ;", "outer . write ( result . to String ( ) ) ;", "outer . close ( ) ; }"]}
{"ids": "16721", "code": ["private static void render Tree ( Tree tree , int indent , boolean parent Label Null , boolean first Sibling , boolean left Sibling Pre Terminal , boolean top Level , String Builder sb ) {", "boolean suppress Indent = ( parent Label Null || ( first Sibling && tree . is Pre Terminal ( ) ) || ( left Sibling Pre Terminal && tree . is Pre Terminal ( ) ) ) ;", "if ( suppress Indent ) {", "sb . append ( STR_ ) ; }", "else {", "if ( ! top Level ) {", "sb . append ( STR_ ) ; }", "for ( int i = NUM_ ; i < indent ; i ++ ) {", "sb . append ( STR_ ) ; } }", "if ( tree . is Leaf ( ) || tree . is Pre Terminal ( ) ) {", "render Flat ( tree , sb ) ;", "return ; }", "sb . append ( STR_ ) ;", "sb . append ( tree . get Label ( ) ) ;", "render Children ( tree . get Children ( ) , indent + NUM_ , false , sb ) ;", "sb . append ( STR_ ) ; }"]}
{"ids": "65915", "code": ["public static String Buffer replace Regex ( String Buffer original , String regex , String replace , boolean CASE INSENSITIVE ) {", "int flags = NUM_ ;", "if ( CASE INSENSITIVE ) flags = Pattern . CASE INSENSITIVE ;", "Pattern p = Pattern . compile ( regex , flags ) ;", "Matcher m = p . matcher ( original ) ;", "String Buffer new SB = new String Buffer ( ) ;", "boolean result = m . find ( ) ;", "while ( result ) {", "m . append Replacement ( new SB , replace ) ;", "result = m . find ( ) ; }", "m . append Tail ( new SB ) ;", "return new SB ; }"]}
{"ids": "63376", "code": ["public boolean equals Chars ( String a , int ai , String b , int bi , boolean ignore Case ) {", "char ca = a . char At ( ai ) ;", "char cb = b . char At ( bi ) ;", "if ( ignore Case ) {", "ca = Character . to Upper Case ( ca ) ;", "cb = Character . to Upper Case ( cb ) ; }", "return ca == cb ; }"]}
{"ids": "11960", "code": ["private void adjust Backing File Length ( byte [ ] buffer , long index ) throws IO Exception {", "if ( buffer == null || buffer . length == NUM_ ) {", "throw new IO Exception ( STR_ ) ; }", "long newsize = f Header . header Size ( ) + ( index * CHUNK ENC SIZE ) + CHUNK IV SIZE + buffer . length + CHUNK TLEN ;", "if ( newsize > real Length ( ) ) {", "backing Random Access File . set Length ( newsize ) ; } }"]}
{"ids": "5018", "code": ["private static Collection < Collection < Dsn Net Pin > > create ordered subnets ( Collection < Dsn Net Pin > p pin list ) {", "Collection < Collection < Dsn Net Pin > > result = new Linked List < Collection < Dsn Net Pin > > ( ) ;", "if ( p pin list . is Empty ( ) ) {", "return result ; }", "Iterator < Dsn Net Pin > it = p pin list . iterator ( ) ;", "Dsn Net Pin prev pin = it . next ( ) ;", "while ( it . has Next ( ) ) {", "Dsn Net Pin next pin = it . next ( ) ;", "Set < Dsn Net Pin > curr subnet pin list = new java . util . Tree Set < Dsn Net Pin > ( ) ;", "curr subnet pin list . add ( prev pin ) ;", "curr subnet pin list . add ( next pin ) ;", "result . add ( curr subnet pin list ) ;", "prev pin = next pin ; }", "return result ; }"]}
{"ids": "46549", "code": ["private char [ ] parse Entity Reference ( ) throws IO Exception {", "int pos = strpos ;", "if ( ( ch = read Ch ( ) ) == STR_ ) {", "int n = NUM_ ;", "ch = read Ch ( ) ;", "if ( ( ch >= STR_ ) && ( ch <= STR_ ) || ch == STR_ || ch == STR_ ) {", "if ( ( ch >= STR_ ) && ( ch <= STR_ ) ) {", "while ( ( ch >= STR_ ) && ( ch <= STR_ ) ) {", "n = ( n * NUM_ ) + ch - STR_ ;", "ch = read Ch ( ) ; } }", "else {", "ch = read Ch ( ) ;", "char lch = ( char ) Character . to Lower Case ( ch ) ;", "while ( ( lch >= STR_ ) && ( lch <= STR_ ) || ( lch >= STR_ ) && ( lch <= STR_ ) ) {", "if ( lch >= STR_ && lch <= STR_ ) {", "n = ( n * NUM_ ) + lch - STR_ ; }", "else {", "n = ( n * NUM_ ) + lch - STR_ + NUM_ ; }", "ch = read Ch ( ) ;", "lch = ( char ) Character . to Lower Case ( ch ) ; } }", "switch ( ch ) {", "case STR_ :", "ln ++ ;", "ch = read Ch ( ) ;", "lf Count ++ ;", "break ;", "case STR_ :", "ln ++ ;", "if ( ( ch = read Ch ( ) ) == STR_ ) {", "ch = read Ch ( ) ;", "crlf Count ++ ; }", "else {", "cr Count ++ ; }", "break ;", "case STR_ :", "ch = read Ch ( ) ;", "break ; }", "char data [ ] = map Numeric Reference ( n ) ;", "return data ; }", "add String ( STR_ ) ;", "if ( ! parse Identifier ( false ) ) {", "error ( STR_ ) ;", "strpos = pos ;", "char data [ ] = { STR_ , STR_ } ;", "return data ; } }", "else if ( ! parse Identifier ( false ) ) {", "char data [ ] = { STR_ } ;", "return data ; }", "boolean semicolon = false ;", "switch ( ch ) {", "case STR_ :", "ln ++ ;", "ch = read Ch ( ) ;", "lf Count ++ ;", "break ;", "case STR_ :", "ln ++ ;", "if ( ( ch = read Ch ( ) ) == STR_ ) {", "ch = read Ch ( ) ;", "crlf Count ++ ; }", "else {", "cr Count ++ ; }", "break ;", "case STR_ :", "semicolon = true ;", "ch = read Ch ( ) ;", "break ; }", "String nm = get String ( pos ) ;", "Entity ent = dtd . get Entity ( nm ) ;", "if ( ! strict && ( ent == null ) ) {", "ent = dtd . get Entity ( nm . to Lower Case ( ) ) ; }", "if ( ( ent == null ) || ! ent . is General ( ) ) {", "if ( nm . length ( ) == NUM_ ) {", "error ( STR_ , nm ) ;", "return new char [ NUM_ ] ; }", "String str = STR_ + nm + ( semicolon ? STR_ : STR_ ) ;", "char b [ ] = new char [ str . length ( ) ] ;", "str . get Chars ( NUM_ , b . length , b , NUM_ ) ;", "return b ; }", "return ent . get Data ( ) ; }"]}
{"ids": "84950", "code": ["private static String create Js Method Invocation Expression ( String method Name , boolean is Static , String ... param Names ) {", "String Builder sb = new String Builder ( ) ;", "sb . append ( is Static ? WND : THIS ) ;", "sb . append ( STR_ ) ;", "sb . append ( method Name ) ;", "sb . append ( STR_ ) ;", "for ( int i = NUM_ ; i < param Names . length ; i ++ ) {", "if ( i != NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( param Names [ i ] ) ; }", "sb . append ( STR_ ) ;", "return sb . to String ( ) ; }"]}
{"ids": "52256", "code": ["public void do Double Click Action ( ) {", "do Double Click Action ( null ) ; }"]}
{"ids": "59676", "code": ["protected void drop Tables ( List < String > drop Table Names , SQ Lite Database db ) {", "if ( drop Table Names != null && ! drop Table Names . is Empty ( ) ) {", "String [ ] drop Table SQLS = new String [ drop Table Names . size ( ) ] ;", "for ( int i = NUM_ ; i < drop Table SQLS . length ; i ++ ) {", "drop Table SQLS [ i ] = generate Drop Table SQL ( drop Table Names . get ( i ) ) ; }", "execute ( drop Table SQLS , db ) ; } }"]}
{"ids": "82901", "code": ["public Boolean exists ( String email ) {", "for ( Person person : people ) {", "if ( email . equals ( person . get Email ( ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "68323", "code": ["public void crab Down Dir Block For Modification ( Block Id blk ) {", "lock Tbl . x Lock ( blk , tx Num ) ;", "writen Index Blks . add ( blk ) ; }"]}
{"ids": "4746", "code": ["private static void remove Reference To Connection ( final Http Connection With Reference connection ) {", "synchronized ( REFERENCE TO CONNECTION SOURCE ) {", "REFERENCE TO CONNECTION SOURCE . remove ( connection . reference ) ; } }"]}
{"ids": "24624", "code": ["public boolean matches Word ( ) {", "return ! is Empty ( ) && Character . is Letter Or Digit ( queue . char At ( pos ) ) ; }"]}
{"ids": "53526", "code": ["public Vacuum Environment ( ) {", "Random r = new Random ( ) ;", "env State = new Vacuum Environment State ( NUM_ == r . next Int ( NUM_ ) ? Location State . Clean : Location State . Dirty , NUM_ == r . next Int ( NUM_ ) ? Location State . Clean : Location State . Dirty ) ; }"]}
{"ids": "48937", "code": ["public void generate ( Batch Environment env , Class Definition cdef , File dest Dir ) {", "Remote Class remote Class = Remote Class . for Class ( env , cdef ) ;", "if ( remote Class == null ) return ;", "RMI Generator gen ;", "try {", "gen = new RMI Generator ( env , cdef , dest Dir , remote Class , version ) ; }", "catch ( Class Not Found e ) {", "env . error ( NUM_ , STR_ , e . name ) ;", "return ; }", "gen . generate ( ) ; }"]}
{"ids": "80628", "code": ["public void remove ( final Creature Respawn Point point ) {", "respawn Points . remove ( point ) ; }"]}
{"ids": "10787", "code": ["public static long bytes To Long ( final byte [ ] bytes ) {", "final Byte Buffer buffer = Byte Buffer . allocate ( NUM_ ) ;", "buffer . put ( bytes , NUM_ , NUM_ ) ;", "buffer . flip ( ) ;", "return buffer . get Long ( ) ; }"]}
{"ids": "83252", "code": ["public void print ( ) {", "Object [ ] iter Charging Times = charging Times . to Array ( ) ;", "Arrays . sort ( iter Charging Times ) ;", "for ( int i = NUM_ ; i < iter Charging Times . length ; i ++ ) {", "Charge Log cur Item = ( Charge Log ) iter Charging Times [ i ] ;", "cur Item . print ( ) ; } }"]}
{"ids": "46781", "code": ["public boolean is Empty ( ) {", "return rdns . is Empty ( ) ; }"]}
{"ids": "85779", "code": ["private void write Local CSV ( Medtronic Sensor Record most Recent Data , Context context ) {", "try {", "if ( most Recent Data == null || most Recent Data . b G Value == null ) log . debug ( STR_ ) ;", "else log . debug ( STR_ + most Recent Data . b G Value ) ;", "Object Output Stream oos = new Object Output Stream ( new File Output Stream ( new File ( context . get Files Dir ( ) , STR_ ) ) ) ;", "oos . write Object ( most Recent Data ) ;", "oos . flush ( ) ;", "oos . close ( ) ; }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ , e ) ;", "log . error ( STR_ , e ) ; } }"]}
{"ids": "14763", "code": ["public Service Config create Organization Config ( String org Name , Map attrs ) throws SMS Exception , SSO Exception {", "validate SSM ( ) ;", "Service Schema Impl ss = ssm . get Schema ( Schema Type . ORGANIZATION ) ;", "if ( ss == null ) {", "String [ ] args = { service Name } ;", "throw ( new SMS Exception ( IUMS Constants . UMS BUNDLE NAME , STR_ , args ) ) ; }", "String orgdn = DN Mapper . org Name To DN ( org Name ) ;", "Create Service Config . check Base Nodes For Org ( token , orgdn , service Name , version ) ;", "String org DN = scm . construct Service Config DN ( SMS Utils . DEFAULT , Create Service Config . ORG CONFIG NODE , orgdn ) ;", "try {", "Cached SMS Entry c Entry = Cached SMS Entry . get Instance ( token , org DN ) ;", "if ( c Entry . is Dirty ( ) ) {", "c Entry . refresh ( ) ; }", "if ( c Entry . is New Entry ( ) ) {", "Create Service Config . create Sub Config Entry ( token , org DN , ss , null , null , attrs , org Name ) ;", "if ( Service Manager . is Coexistence Mode ( ) ) {", "String sms DN = DN Mapper . org Name To DN ( org Name ) ;", "Org Config Via AMSDK amsdk = new Org Config Via AMSDK ( token , DN Mapper . realm Name To AMSDK Name ( sms DN ) , sms DN ) ;", "amsdk . assign Service ( service Name ) ; } }", "else if ( attrs != null && ! attrs . is Empty ( ) ) {", "Service Config sc = get Organization Config ( org Name , null ) ;", "sc . set Attributes ( attrs ) ; } }", "catch ( Service Already Exists Exception slee ) { }", "return ( get Organization Config ( org Name , null ) ) ; }"]}
{"ids": "13758", "code": ["public void delete Authentication Domain ( String realm , String cot Name ) throws AM Console Exception {", "String [ ] param = { realm , cot Name } ;", "log Event ( STR_ , param ) ;", "try {", "Circle Of Trust Manager manager = get Circle Of Trust Manager ( ) ;", "manager . delete Circle Of Trust ( realm , cot Name ) ;", "log Event ( STR_ , param ) ; }", "catch ( COT Exception e ) {", "String str Error = get Error String ( e ) ;", "String [ ] params Ex = { realm , cot Name , str Error } ;", "log Event ( STR_ , params Ex ) ;", "throw new AM Console Exception ( str Error ) ; } }"]}
{"ids": "81010", "code": ["void event Pre Modify ( Action Type type , long position , boolean is Single ) {", "if ( type != current Action Type || ! is Single || System . current Time Millis ( ) - previous Time > MERGE TIME || ( type == Action Type . INSERT || type == Action Type . OVERWRITE ) && action Exclusive End ( ) != position || type == Action Type . DELETE && action Position ( ) != position && action Position ( ) - NUM_ != position ) {", "start Action ( type , is Single ) ; }", "else {", "is Backspace = action Position ( ) > position ; }", "if ( is Single && type == Action Type . INSERT ) {", "update New Range ( position ) ;", "previous Time = System . current Time Millis ( ) ; } }"]}
{"ids": "8332", "code": ["public String resolve Parent Relation Name ( String parent Name , Object parent , String child Name , Object child ) {", "return parent Name ; }"]}
{"ids": "59610", "code": ["public Rel Node convert Select ( Sql Select select , boolean top ) {", "final Sql Validator Scope select Scope = validator . get Where Scope ( select ) ;", "final Blackboard bb = create Blackboard ( select Scope , null , top ) ;", "convert Select Impl ( bb , select ) ;", "return bb . root ; }"]}
{"ids": "64876", "code": ["private static String format Sample Rate ( int rate ) {", "return MHZ FORMATTER . format ( ( double ) rate / NUM_ ) ; }"]}
{"ids": "43872", "code": ["public final boolean is Closed ( ) {", "return closed . get ( ) ; }"]}
{"ids": "41545", "code": ["void start ( ) {", "this . running = true ;", "Thread thread = new Thread ( this , STR_ + hash Code ( ) ) ;", "thread . set Daemon ( true ) ;", "thread . start ( ) ; }"]}
{"ids": "55751", "code": ["public static byte [ ] escape ( final byte [ ] bytes ) {", "final byte [ ] temp = new byte [ NUM_ * bytes . length ] ;", "int current Position = NUM_ ;", "for ( final byte b : bytes ) {", "if ( b == ESCAPE CHAR ) {", "temp [ current Position ++ ] = ESCAPE CHAR ;", "temp [ current Position ++ ] = REPLACEMENT CHAR ; }", "else if ( b == DELIMITER ) {", "temp [ current Position ++ ] = ESCAPE CHAR ;", "temp [ current Position ++ ] = ESCAPE CHAR ; }", "else {", "temp [ current Position ++ ] = b ; } }", "final byte [ ] escaped = new byte [ current Position ] ;", "System . arraycopy ( temp , NUM_ , escaped , NUM_ , current Position ) ;", "return escaped ; }"]}
{"ids": "53970", "code": ["public Mongo Client client For Members ( Server Address ... seeds ) {", "List < Server Address > addresses = new Array List < > ( ) ;", "for ( Server Address seed Address : seeds ) {", "if ( seed Address != null ) addresses . add ( seed Address ) ; }", "return client For Members ( addresses ) ; }"]}
{"ids": "1405", "code": ["public static boolean string To Boolean Value ( String str ) throws Expression Exception {", "str = String Util . to Lower Case ( str . trim ( ) ) ;", "if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) return true ;", "else if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) return false ;", "throw new Caster Exception ( STR_ + str + STR_ ) ; }"]}
{"ids": "67141", "code": ["public void generate Class File ( Output Stream os ) {", "Class Writer cw = new Soot ASM Class Writer ( Class Writer . COMPUTE FRAMES ) ;", "cv = cw ;", "generate Byte Code ( ) ;", "try {", "os . write ( cw . to Byte Array ( ) ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ , e ) ; } }"]}
{"ids": "55104", "code": ["private static boolean use Compact Font Format ( Map < String , Object > args , int compatibility Version ) {", "String value = ( String ) args . get ( EMBEDASCFF ) ;", "boolean use CFF = true ;", "if ( compatibility Version < Mxml Configuration . VERSION 4 0 ) use CFF = false ;", "if ( value != null ) {", "use CFF = Boolean . parse Boolean ( value . trim ( ) ) ; }", "return use CFF ; }"]}
{"ids": "11254", "code": ["public static void main ( String [ ] args ) {", "new Generator Tester ( args ) ; }"]}
{"ids": "16686", "code": ["private String mosesize ( String feature ) {", "if ( joshua Configuration . moses ) {", "if ( feature . starts With ( STR_ ) || feature . starts With ( STR_ ) ) return feature . replace ( STR_ , STR_ ) ; }", "return feature ; }"]}
{"ids": "32301", "code": ["private void check Shutdown ( ) {", "synchronized ( mux ) {", "if ( is Being Shutdown ) throw new Rejected Execution Exception ( STR_ ) ; } }"]}
{"ids": "36496", "code": ["private static final void check Queue For Dependencies And Execute Unblocked Tasks ( ) {", "List < Progress Thread > to Remove = new Linked List < > ( ) ;", "synchronized ( LOCK ) {", "for ( Progress Thread pg : queued Threads ) {", "if ( ! pg . is Blocked By Dependencies ( ) ) {", "if ( ! pg . is Waiting ( ) ) {", "to Remove . add ( pg ) ;", "EXECUTOR . execute ( pg . make Wrapper ( ) ) ; } } } }", "for ( Progress Thread pg : to Remove ) {", "synchronized ( LOCK ) {", "queued Threads . remove ( pg ) ; } } }"]}
{"ids": "51078", "code": ["public static void draw Vertical Margin Indicator ( Graphics 2 D g , String text , int x , int y 1 , int y 2 ) {", "if ( y 1 > y 2 ) {", "int temp = y 1 ;", "y 1 = y 2 ;", "y 2 = temp ; }", "if ( text == null ) {", "g . draw Line ( x , y 1 , x , y 2 ) ;", "g . draw Line ( x , y 1 , x - CONNECTION ARROW SIZE , y 1 + CONNECTION ARROW SIZE ) ;", "g . draw Line ( x , y 1 , x + CONNECTION ARROW SIZE , y 1 + CONNECTION ARROW SIZE ) ;", "g . draw Line ( x , y 2 , x - CONNECTION ARROW SIZE , y 2 - CONNECTION ARROW SIZE ) ;", "g . draw Line ( x , y 2 , x + CONNECTION ARROW SIZE , y 2 - CONNECTION ARROW SIZE ) ;", "return ; }", "Canvas c = new Canvas ( ) ;", "Font Metrics fm = c . get Font Metrics ( s Font ) ;", "g . set Font ( s Font ) ;", "int padding = NUM_ ;", "Rectangle 2 D bounds = fm . get String Bounds ( text , g ) ;", "int th = ( int ) bounds . get Height ( ) ;", "int offset = NUM_ * CONNECTION ARROW SIZE ;", "int h = ( ( y 2 - y 1 ) - ( th + NUM_ * padding ) ) / NUM_ ;", "if ( h <= padding ) {", "g . draw Line ( x , y 1 , x , y 2 ) ;", "g . draw String ( text , ( int ) ( x - bounds . get Width ( ) / NUM_ ) + offset , y 2 - h - padding ) ;", "g . draw Line ( x - CONNECTION ARROW SIZE , y 1 , x + CONNECTION ARROW SIZE , y 1 ) ;", "g . draw Line ( x - CONNECTION ARROW SIZE , y 2 , x + CONNECTION ARROW SIZE , y 2 ) ; }", "else {", "g . draw Line ( x , y 1 , x , y 1 + h ) ;", "g . draw Line ( x , y 2 - h , x , y 2 ) ;", "g . draw String ( text , ( int ) ( x - bounds . get Width ( ) / NUM_ ) , y 2 - h - padding ) ;", "g . draw Line ( x , y 1 , x - CONNECTION ARROW SIZE , y 1 + CONNECTION ARROW SIZE ) ;", "g . draw Line ( x , y 1 , x + CONNECTION ARROW SIZE , y 1 + CONNECTION ARROW SIZE ) ;", "g . draw Line ( x , y 2 , x - CONNECTION ARROW SIZE , y 2 - CONNECTION ARROW SIZE ) ;", "g . draw Line ( x , y 2 , x + CONNECTION ARROW SIZE , y 2 - CONNECTION ARROW SIZE ) ; } }"]}
{"ids": "74397", "code": ["protected void remove Markers ( ) {", "for ( int i = marker Image . size ( ) ; i > NUM_ ; i -- ) {", "Loco Icon il = marker Image . get ( i - NUM_ ) ;", "if ( ( il != null ) && ( il . is Active ( ) ) ) {", "marker Image . remove ( i - NUM_ ) ;", "il . remove ( ) ;", "il . dispose ( ) ;", "set Dirty ( true ) ; } }", "super . remove Markers ( ) ;", "repaint ( ) ; }"]}
{"ids": "72710", "code": ["public I Element Type capture String ( ) {", "Char Sequence buffer = get Buffer ( ) ;", "int current Position = get Token End ( ) ;", "set Token Start ( current Position ) ;", "int buffer End = get Buffer End ( ) ;", "char open Quote = buffer . char At ( current Position ) ;", "char close Quote = Regex Block . get Quote Close Char ( open Quote ) ;", "boolean quotes Differ = open Quote != close Quote ;", "boolean is Escaped = false ;", "int quotes Depth = NUM_ ;", "current Position ++ ;", "while ( current Position < buffer End ) {", "char current Char = buffer . char At ( current Position ) ;", "if ( ! is Escaped && quotes Depth == NUM_ && current Char == close Quote ) {", "break ; }", "if ( ! is Escaped && quotes Differ ) {", "if ( current Char == open Quote ) {", "quotes Depth ++ ; }", "else if ( current Char == close Quote ) {", "quotes Depth -- ; } }", "is Escaped = ! is Escaped && current Char == STR_ ;", "current Position ++ ; }", "if ( current Position < buffer End ) {", "current Position ++ ; }", "set Token End ( current Position ) ;", "Perl String Lexer string Lexer = get String Lexer ( ) ;", "pop State ( ) ;", "preparsed Tokens List . add All ( lex Current Token ( string Lexer ) ) ;", "return get Pre Parsed Token ( ) ; }"]}
{"ids": "6576", "code": ["public static String to Localized Integer ( long value ) {", "return NUMBER FORMAT 0 . format ( value ) ; }"]}
{"ids": "63902", "code": ["protected void sqrt Layout ( Visual Table labels ) {", "Rectangle 2 D b = get Layout Bounds ( ) ;", "double breadth = get Breadth ( b ) ;", "double span = m hi - m lo ;", "double splo = Math Lib . safe Sqrt ( m prevlo ) ;", "double spspan = Math Lib . safe Sqrt ( m prevhi ) - splo ;", "double vlo = Math . pow ( NUM_ , Math . floor ( Math Lib . safe Log 10 ( m lo ) ) ) ;", "double slo = Math Lib . safe Sqrt ( m lo ) ;", "double sspan = Math Lib . safe Sqrt ( m hi ) - slo ;", "Iterator iter = labels . tuples ( ) ;", "while ( iter . has Next ( ) ) {", "Visual Item item = ( Visual Item ) iter . next ( ) ;", "reset ( item ) ;", "double v = item . get Double ( VALUE ) ;", "double x = span == NUM_ ? NUM_ : ( ( Math Lib . safe Sqrt ( v ) - slo ) / sspan ) * breadth ;", "set ( item , x , b ) ; }", "Index index = labels . index ( VALUE ) ;", "double step = get Linear Step ( span , breadth / span ) ;", "if ( step == NUM_ ) step = NUM_ ;", "int r ;", "for ( double x , v = vlo ; v <= m hi ; v += step ) {", "x = ( ( Math Lib . safe Sqrt ( v ) - slo ) / sspan ) * breadth ;", "if ( x < - NUM_ ) {", "continue ; }", "else if ( ( r = index . get ( v ) ) >= NUM_ ) {", "Visual Item item = labels . get Item ( r ) ;", "item . set Visible ( true ) ;", "item . set End Visible ( true ) ; }", "else {", "Visual Item item = labels . add Item ( ) ;", "item . set ( LABEL , m nf . format ( v ) ) ;", "item . set Double ( VALUE , v ) ;", "double f = spspan == NUM_ ? NUM_ : ( ( Math Lib . safe Sqrt ( v ) - splo ) / spspan ) ;", "if ( f <= NUM_ || f >= NUM_ ) {", "item . set Start Visible ( true ) ; }", "set ( item , f * breadth , b ) ;", "set ( item , x , b ) ; } } }"]}
{"ids": "62109", "code": ["public static Template create ( String value ) {", "if ( Settings . is Function ( value ) ) {", "return new Functional Template ( value ) ; }", "if ( Graph . is Relational ( value ) ) {", "try {", "return new Relational Template ( value ) ; }", "catch ( Exception e ) {", "log . warning ( STR_ + value + STR_ ) ;", "return new String Template ( value ) ; } }", "else if ( Regex Template . is Possible Regex ( value ) ) {", "try {", "if ( Arithmetic Template . is Arithmetic Expression ( value ) ) {", "return new Arithmetic Template ( value ) ; }", "return new Regex Template ( value ) ; }", "catch ( Pattern Syntax Exception e ) {", "log . warning ( STR_ + value + STR_ ) ;", "return new String Template ( value ) ; } }", "else {", "return new String Template ( value ) ; } }"]}
{"ids": "66736", "code": ["protected boolean custom Should Take Focus ( ) {", "if ( custom Area instanceof Label ) {", "return false ; }", "if ( custom Area instanceof C Label ) {", "return ( custom Area . get Style ( ) & SWT . NO FOCUS ) > NUM_ ; }", "return true ; }"]}
{"ids": "21397", "code": ["private Map < String , List < Zone > > select Zones For Initiators And Ports ( Network Lite network , Map < String , List < Zone > > wwn To Zones , Map < String , Storage Port > initiator Ports Map ) {", "Map < String , List < Zone > > filtered Map = new Hash Map < String , List < Zone > > ( ) ;", "Zone zone = null ;", "List < Zone > zones = null ;", "for ( String initiator Wwn : wwn To Zones . key Set ( ) ) {", "for ( String port Wwn : initiator Ports Map . key Set ( ) ) {", "zone = network Scheduler . select Existing Zone For Initiator Port ( network , initiator Wwn , port Wwn , wwn To Zones . get ( initiator Wwn ) ) ;", "if ( zone != null ) {", "zones = filtered Map . get ( initiator Wwn ) ;", "if ( zones == null ) {", "zones = new Array List < > ( ) ;", "filtered Map . put ( initiator Wwn , zones ) ; }", "zones . add ( zone ) ; } } }", "return filtered Map ; }"]}
{"ids": "5378", "code": ["private void write Jar Post Resource ( Element post Resource El , String path ) {", "post Resource El . set Attribute ( STR_ , JAR RESOURCE SET ) ;", "post Resource El . set Attribute ( STR_ , path . replace ( STR_ , STR_ ) ) ; }"]}
{"ids": "63311", "code": ["public void close File ( ) throws IO Exception {", "file . close ( ) ;", "file = null ; }"]}
{"ids": "13525", "code": ["public Typed Event Listener ( Event Listener < E > wrapped Listener , Class < E > event Class ) {", "this . event Class = event Class ;", "this . wrapped Listener = wrapped Listener ; }"]}
{"ids": "75503", "code": ["public static Corleone context ( String job Context ) {", "if ( job Context == null || job Context . equals ( STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "contexts . clear ( ) ;", "contexts . add ( job Context ) ;", "return get Instance ( ) ; }"]}
{"ids": "39196", "code": ["public static double info ( int counts [ ] ) {", "int total = NUM_ ;", "double x = NUM_ ;", "for ( int count : counts ) {", "x -= xlogx ( count ) ;", "total += count ; }", "return x + xlogx ( total ) ; }"]}
{"ids": "67089", "code": ["public void add Method ( Soot Method m ) {", "check Level ( SIGNATURES ) ;", "if ( m . is Declared ( ) ) throw new Runtime Exception ( STR_ + m . get Name ( ) ) ;", "if ( sub Sig To Methods . get ( m . get Numbered Sub Signature ( ) ) != null ) {", "throw new Runtime Exception ( STR_ + m . get Sub Signature ( ) + STR_ + this + STR_ ) ; }", "sub Sig To Methods . put ( m . get Numbered Sub Signature ( ) , m ) ;", "method List . add ( m ) ;", "m . set Declared ( true ) ;", "m . set Declaring Class ( this ) ; }"]}
{"ids": "50171", "code": ["private void add Replication Factor ( Operation op ) {", "op . add Request Header ( Operation . REPLICATION QUORUM HEADER , Operation . REPLICATION QUORUM HEADER VALUE ALL ) ; }"]}
{"ids": "6617", "code": ["private static Frame show Initial Splash ( ) {", "Frame splash Frame = null ;", "Image image = null ;", "URL image URL = get Chosen Splash URL ( ) ;", "if ( image URL != null ) {", "try {", "image = Image IO . read ( image URL ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "if ( image != null ) {", "splash Frame = AWT Splash Window . splash ( image ) ; } }", "return splash Frame ; }"]}
{"ids": "48564", "code": ["protected void decode Line Suffix ( Pushback Input Stream in Stream , Output Stream out Stream ) throws IO Exception {", "int c ;", "while ( true ) {", "c = in Stream . read ( ) ;", "if ( c == - NUM_ ) {", "throw new CE Stream Exhausted ( ) ; }", "if ( c == STR_ ) {", "break ; }", "if ( c == STR_ ) {", "c = in Stream . read ( ) ;", "if ( ( c != STR_ ) && ( c != - NUM_ ) ) {", "in Stream . unread ( c ) ; }", "break ; } } }"]}
{"ids": "23109", "code": ["public void add Transaction ( SIP Server Transaction server Transaction ) throws IO Exception {", "if ( is Logging Enabled ( ) ) stack Logger . log Debug ( STR_ + server Transaction ) ;", "server Transaction . map ( ) ;", "add Transaction Hash ( server Transaction ) ; }"]}
{"ids": "66881", "code": ["public boolean contains Poly ( Soot Method method ) {", "return get Method ( method ) != null ; }"]}
{"ids": "42904", "code": ["public JK Tag Mapping ( final String source Q Name , final String target Q Name , final JK Namespace namespace ) {", "logger . info ( String . format ( STR_ , source Q Name , target Q Name ) ) ;", "this . source Q Name = source Q Name ;", "this . target Q Name = target Q Name ;", "this . namespace = namespace ;", "this . auto = true ; }"]}
{"ids": "65700", "code": ["private void select Attribute Set Instance ( ) {", "int m warehouse id = get M Warehouse ID ( ) ;", "int m product id = get M Product ID ( ) ;", "if ( m product id <= NUM_ ) return ;", "M Product product = M Product . get ( get Ctx ( ) , m product id ) ;", "M Warehouse wh = M Warehouse . get ( get Ctx ( ) , m warehouse id ) ;", "String title = product . get Translation ( M Product . COLUMNNAME Name ) + STR_ + wh . get Translation ( M Warehouse . COLUMNNAME Name ) ;", "P Attribute Instance pai = new P Attribute Instance ( m frame , title , m warehouse id , NUM_ , m product id , NUM_ ) ;", "if ( pai . get M Attribute Set Instance ID ( ) != - NUM_ ) {", "f Attr Set Instance ID . set Text ( pai . get M Attribute Set Instance Name ( ) ) ;", "f Attr Set Instance ID . set Value ( new Integer ( pai . get M Attribute Set Instance ID ( ) ) ) ; }", "else {", "f Attr Set Instance ID . set Value ( Integer . value Of ( NUM_ ) ) ; } }"]}
{"ids": "22898", "code": ["private void ensure File Open ( ) {", "if ( saving Disabled ) {", "Log . e ( TAG , STR_ ) ;", "return ; }", "if ( save File Stream != null ) return ;", "File save File = new File ( ctx . get Files Dir ( ) , SAVEFILE ) ;", "try {", "File Output Stream file Output = null ;", "Data Output Stream out = null ;", "if ( save File . exists ( ) ) {", "file Output = ctx . open File Output ( SAVEFILE , Context . MODE APPEND ) ;", "out = new Data Output Stream ( new Buffered Output Stream ( file Output ) ) ; }", "else {", "file Output = ctx . open File Output ( SAVEFILE , Context . MODE PRIVATE ) ;", "out = new Data Output Stream ( new Buffered Output Stream ( file Output ) ) ;", "out . write Int ( Track Point . FORMAT VERSION ) ;", "saved Track Points = NUM_ ; }", "save File Stream = out ; }", "catch ( Exception e ) {", "mark Saving Broken ( STR_ , e ) ; } }"]}
{"ids": "68478", "code": ["@ Override public void stop ( Runnable arg 0 ) {", "stop ( ) ;", "arg 0 . run ( ) ; }"]}
{"ids": "36189", "code": ["protected int read ( Input Stream input Stream , byte [ ] buffer , char divider ) throws IO Exception {", "int index = NUM_ ;", "do {", "byte read Byte = ( byte ) ( NUM_ & input Stream . read ( ) ) ;", "if ( read Byte == - NUM_ || read Byte == ( byte ) divider ) {", "return index ; }", "buffer [ index ] = read Byte ;", "index ++ ; }", "while ( index < buffer . length ) ;", "return index ; }"]}
{"ids": "4510", "code": ["private void load User Info Into Action Bar ( ) {", "if ( ! Text Utils . is Empty ( m With User Image ) ) {", "Utils . load Circular Image ( get Activity ( ) , m With Image View , m With User Image , Avatar Bitmap Transformation . Avatar Size . NORMAL ) ; } }"]}
{"ids": "51028", "code": ["public static Direction direction For Arrow Key ( Key Event e ) {", "int index = Math . max ( NUM_ , Math . min ( e . get Key Code ( ) , Key Event . VK DOWN ) - Key Event . VK LEFT ) ;", "return Direction . values ( ) [ index ] ; }"]}
{"ids": "78622", "code": ["public Trace Graph ( Collection < Span > spans ) {", "this . spans By Parent = new Spans By Parent ( spans ) ;", "this . spans By Tracer Id = new Spans By Tracer Id ( spans ) ; }"]}
{"ids": "79436", "code": ["public static java . util . Date to Date ( String month Str , String day Str , String year Str , String hour Str , String minute Str , String second Str ) {", "int month , day , year , hour , minute , second ;", "try {", "month = Integer . parse Int ( month Str ) ;", "day = Integer . parse Int ( day Str ) ;", "year = Integer . parse Int ( year Str ) ;", "hour = Integer . parse Int ( hour Str ) ;", "minute = Integer . parse Int ( minute Str ) ;", "second = Integer . parse Int ( second Str ) ; }", "catch ( Exception e ) {", "return null ; }", "return to Date ( month , day , year , hour , minute , second ) ; }"]}
{"ids": "26922", "code": ["protected void handle Mesos Failure ( String task Id ) {", "int attempt = Task Utils . get Attempt For Task Id ( task Id ) ;", "Base Container container = containers Info . get ( Task Utils . get Container Index For Task Id ( task Id ) ) ;", "boolean has Attempts Left = attempt < container . retries ;", "if ( has Attempts Left ) {", "LOG . warning ( String . format ( STR_ , container . name , attempt + NUM_ ) ) ;", "String new Task Id = Task Utils . get Task Id ( container . name , attempt + NUM_ ) ;", "schedule New Task ( new Task Id ) ; }", "else {", "LOG . severe ( STR_ + attempt ) ; } }"]}
{"ids": "25543", "code": ["private void update Ltp ( Single Channel Element sce ) {", "Individual Channel Stream ics = sce . ics ;", "float saved [ ] = sce . saved ;", "float saved Ltp [ ] = sce . coeffs ;", "final float lwindow [ ] = ics . use Kb Window [ NUM_ ] ? ff aac kbd long 1024 : ff sine 1024 ;", "final float swindow [ ] = ics . use Kb Window [ NUM_ ] ? ff aac kbd short 128 : ff sine 128 ;", "if ( ics . window Sequence [ NUM_ ] == EIGHT SHORT SEQUENCE ) {", "System . arraycopy ( saved , NUM_ , saved Ltp , NUM_ , NUM_ ) ;", "Arrays . fill ( saved Ltp , NUM_ , NUM_ + NUM_ , NUM_ ) ;", "Float DSP . vector Fmul Reverse ( saved Ltp , NUM_ , ac . buf Mdct , NUM_ , swindow , NUM_ , NUM_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "saved Ltp [ i + NUM_ ] = ac . buf Mdct [ NUM_ - i ] * swindow [ NUM_ - i ] ; } }", "else if ( ics . window Sequence [ NUM_ ] == LONG START SEQUENCE ) {", "System . arraycopy ( ac . buf Mdct , NUM_ , saved Ltp , NUM_ , NUM_ ) ;", "Arrays . fill ( saved Ltp , NUM_ , NUM_ + NUM_ , NUM_ ) ;", "Float DSP . vector Fmul Reverse ( saved Ltp , NUM_ , ac . buf Mdct , NUM_ , swindow , NUM_ , NUM_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "saved Ltp [ i + NUM_ ] = ac . buf Mdct [ NUM_ - i ] * swindow [ NUM_ - i ] ; } }", "else {", "Float DSP . vector Fmul Reverse ( saved Ltp , NUM_ , ac . buf Mdct , NUM_ , lwindow , NUM_ , NUM_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "saved Ltp [ i + NUM_ ] = ac . buf Mdct [ NUM_ - i ] * lwindow [ NUM_ - i ] ; } }", "System . arraycopy ( sce . ltp State , NUM_ , sce . ltp State , NUM_ , NUM_ ) ;", "System . arraycopy ( sce . ret , NUM_ , sce . ltp State , NUM_ , NUM_ ) ;", "System . arraycopy ( saved Ltp , NUM_ , sce . ltp State , NUM_ , NUM_ ) ; }"]}
{"ids": "23927", "code": ["public static File find Config In Working Directory ( ) {", "for ( final String suffix : SUFFIXES ) {", "final File config File = new File ( System . get Property ( STR_ ) , PREFIX + suffix ) ;", "if ( config File . is File ( ) ) {", "return config File ; } }", "return null ; }"]}
{"ids": "7712", "code": ["@ Override public void draw Range Marker ( Graphics 2 D g 2 , XY Plot plot , Value Axis range Axis , Marker marker , Rectangle 2 D data Area ) {", "if ( marker instanceof Value Marker ) {", "Value Marker vm = ( Value Marker ) marker ;", "double value = vm . get Value ( ) ;", "Range range = range Axis . get Range ( ) ;", "if ( ! range . contains ( value ) ) {", "return ; }", "double v = range Axis . value To Java 2 D ( value , data Area , plot . get Range Axis Edge ( ) ) ;", "Plot Orientation orientation = plot . get Orientation ( ) ;", "Line 2 D line = null ;", "if ( orientation == Plot Orientation . HORIZONTAL ) {", "line = new Line 2 D . Double ( v , data Area . get Min Y ( ) , v , data Area . get Max Y ( ) ) ; }", "else if ( orientation == Plot Orientation . VERTICAL ) {", "line = new Line 2 D . Double ( data Area . get Min X ( ) , v , data Area . get Max X ( ) , v ) ; }", "else {", "throw new Illegal State Exception ( STR_ ) ; }", "final Composite original Composite = g 2 . get Composite ( ) ;", "g 2 . set Composite ( Alpha Composite . get Instance ( Alpha Composite . SRC OVER , marker . get Alpha ( ) ) ) ;", "g 2 . set Paint ( marker . get Paint ( ) ) ;", "g 2 . set Stroke ( marker . get Stroke ( ) ) ;", "g 2 . draw ( line ) ;", "String label = marker . get Label ( ) ;", "Rectangle Anchor anchor = marker . get Label Anchor ( ) ;", "if ( label != null ) {", "Font label Font = marker . get Label Font ( ) ;", "g 2 . set Font ( label Font ) ;", "Point 2 D coords = calculate Range Marker Text Anchor Point ( g 2 , orientation , data Area , line . get Bounds 2 D ( ) , marker . get Label Offset ( ) , Length Adjustment Type . EXPAND , anchor ) ;", "Rectangle 2 D r = Text Utils . calc Aligned String Bounds ( label , g 2 , ( float ) coords . get X ( ) , ( float ) coords . get Y ( ) , marker . get Label Text Anchor ( ) ) ;", "g 2 . set Paint ( marker . get Label Background Color ( ) ) ;", "g 2 . fill ( r ) ;", "g 2 . set Paint ( marker . get Label Paint ( ) ) ;", "Text Utilities . draw Aligned String ( label , g 2 , ( float ) coords . get X ( ) , ( float ) coords . get Y ( ) , marker . get Label Text Anchor ( ) ) ; }", "g 2 . set Composite ( original Composite ) ; }", "else if ( marker instanceof Interval Marker ) {", "Interval Marker im = ( Interval Marker ) marker ;", "double start = im . get Start Value ( ) ;", "double end = im . get End Value ( ) ;", "Range range = range Axis . get Range ( ) ;", "if ( ! ( range . intersects ( start , end ) ) ) {", "return ; }", "double start 2 d = range Axis . value To Java 2 D ( start , data Area , plot . get Range Axis Edge ( ) ) ;", "double end 2 d = range Axis . value To Java 2 D ( end , data Area , plot . get Range Axis Edge ( ) ) ;", "double low = Math . min ( start 2 d , end 2 d ) ;", "double high = Math . max ( start 2 d , end 2 d ) ;", "Plot Orientation orientation = plot . get Orientation ( ) ;", "Rectangle 2 D rect = null ;", "if ( orientation == Plot Orientation . HORIZONTAL ) {", "low = Math . max ( low , data Area . get Min X ( ) ) ;", "high = Math . min ( high , data Area . get Max X ( ) ) ;", "rect = new Rectangle 2 D . Double ( low , data Area . get Min Y ( ) , high - low , data Area . get Height ( ) ) ; }", "else if ( orientation == Plot Orientation . VERTICAL ) {", "low = Math . max ( low , data Area . get Min Y ( ) ) ;", "high = Math . min ( high , data Area . get Max Y ( ) ) ;", "rect = new Rectangle 2 D . Double ( data Area . get Min X ( ) , low , data Area . get Width ( ) , high - low ) ; }", "final Composite original Composite = g 2 . get Composite ( ) ;", "g 2 . set Composite ( Alpha Composite . get Instance ( Alpha Composite . SRC OVER , marker . get Alpha ( ) ) ) ;", "Paint p = marker . get Paint ( ) ;", "if ( p instanceof Gradient Paint ) {", "Gradient Paint gp = ( Gradient Paint ) p ;", "Gradient Paint Transformer t = im . get Gradient Paint Transformer ( ) ;", "if ( t != null ) {", "gp = t . transform ( gp , rect ) ; }", "g 2 . set Paint ( gp ) ; }", "else {", "g 2 . set Paint ( p ) ; }", "g 2 . fill ( rect ) ;", "if ( im . get Outline Paint ( ) != null && im . get Outline Stroke ( ) != null ) {", "if ( orientation == Plot Orientation . VERTICAL ) {", "Line 2 D line = new Line 2 D . Double ( ) ;", "double x 0 = data Area . get Min X ( ) ;", "double x 1 = data Area . get Max X ( ) ;", "g 2 . set Paint ( im . get Outline Paint ( ) ) ;", "g 2 . set Stroke ( im . get Outline Stroke ( ) ) ;", "if ( range . contains ( start ) ) {", "line . set Line ( x 0 , start 2 d , x 1 , start 2 d ) ;", "g 2 . draw ( line ) ; }", "if ( range . contains ( end ) ) {", "line . set Line ( x 0 , end 2 d , x 1 , end 2 d ) ;", "g 2 . draw ( line ) ; } }", "else {", "Line 2 D line = new Line 2 D . Double ( ) ;", "double y 0 = data Area . get Min Y ( ) ;", "double y 1 = data Area . get Max Y ( ) ;", "g 2 . set Paint ( im . get Outline Paint ( ) ) ;", "g 2 . set Stroke ( im . get Outline Stroke ( ) ) ;", "if ( range . contains ( start ) ) {", "line . set Line ( start 2 d , y 0 , start 2 d , y 1 ) ;", "g 2 . draw ( line ) ; }", "if ( range . contains ( end ) ) {", "line . set Line ( end 2 d , y 0 , end 2 d , y 1 ) ;", "g 2 . draw ( line ) ; } } }", "String label = marker . get Label ( ) ;", "Rectangle Anchor anchor = marker . get Label Anchor ( ) ;", "if ( label != null ) {", "Font label Font = marker . get Label Font ( ) ;", "g 2 . set Font ( label Font ) ;", "Point 2 D coords = calculate Range Marker Text Anchor Point ( g 2 , orientation , data Area , rect , marker . get Label Offset ( ) , marker . get Label Offset Type ( ) , anchor ) ;", "Rectangle 2 D r = Text Utils . calc Aligned String Bounds ( label , g 2 , ( float ) coords . get X ( ) , ( float ) coords . get Y ( ) , marker . get Label Text Anchor ( ) ) ;", "g 2 . set Paint ( marker . get Label Background Color ( ) ) ;", "g 2 . fill ( r ) ;", "g 2 . set Paint ( marker . get Label Paint ( ) ) ;", "Text Utilities . draw Aligned String ( label , g 2 , ( float ) coords . get X ( ) , ( float ) coords . get Y ( ) , marker . get Label Text Anchor ( ) ) ; }", "g 2 . set Composite ( original Composite ) ; } }"]}
{"ids": "74952", "code": ["protected boolean attempt To Add Word ( Word word ) {", "double additional Length = word . get Word Width ( ) ;", "additional Length += ! words . is Empty ( ) ? space Size : NUM_ ;", "if ( current Line Length + additional Length <= max Length || max Length == - NUM_ ) {", "words . add ( word ) ;", "current Line Length += additional Length ;", "return true ; }", "else {", "return false ; } }"]}
{"ids": "83647", "code": ["@ Override public boolean on Preference Click ( Preference preference ) {", "if ( preference == m Play Example ) {", "get Sample Text ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "23265", "code": ["public void read Www Authenticate Header ( String header ) {", "if ( header != null ) {", "m Is Digest Authentication = header . starts With ( Http Digest Md 5 Authentication . HTTP DIGEST SCHEMA ) ;", "if ( ! m Is Digest Authentication ) {", "return ; }", "String value = get Value ( header , STR_ ) ;", "m Digest . set Realm ( value ) ;", "value = get Value ( header , STR_ ) ;", "m Digest . set Opaque ( value ) ;", "value = get Value ( header , STR_ ) ;", "m Digest . set Qop ( value ) ;", "value = get Value ( header , STR_ ) ;", "m Digest . set Nextnonce ( value ) ; } }"]}
{"ids": "4326", "code": ["public static String value Of ( Boolean value ) {", "return value != null ? String . value Of ( value ) : null ; }"]}
{"ids": "42165", "code": ["public Allocation Site ( int line , int column ) {", "synchronized ( sites ) {", "this . id = sites . size ( ) ;", "sites . add ( this ) ; }", "this . line = line ;", "this . column = column ; }"]}
{"ids": "26954", "code": ["public final static int parse Int ( char [ ] digit Chars , int offset , int len ) {", "int num = digit Chars [ offset ] - STR_ ;", "len += offset ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ;", "if ( ++ offset < len ) {", "num = ( num * NUM_ ) + ( digit Chars [ offset ] - STR_ ) ; } } } } } } } }", "return num ; }"]}
{"ids": "39526", "code": ["public Activity Monitor Sample ( ) {", "init Components ( ) ;", "owner A Radio . set Action Command ( STR_ ) ;", "owner B Radio . set Action Command ( STR_ ) ;", "owner C Radio . set Action Command ( STR_ ) ;", "indicator A . set Activity Owner ( STR_ ) ;", "indicator B . set Activity Owner ( STR_ ) ;", "indicator C . set Activity Owner ( STR_ ) ;", "J Activity Window . get Instance ( ) ; }"]}
{"ids": "74686", "code": ["public static Lat Lon [ ] great Circle Extreme Locations ( Lat Lon location , Angle azimuth ) {", "if ( location == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( azimuth == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "double lat 0 = location . get Latitude ( ) . radians ;", "double az = azimuth . radians ;", "double tan Distance = - Math . tan ( lat 0 ) / Math . cos ( az ) ;", "double distance = Math . atan ( tan Distance ) ;", "Angle extreme Distance 1 = Angle . from Radians ( distance + ( Math . PI / NUM_ ) ) ;", "Angle extreme Distance 2 = Angle . from Radians ( distance - ( Math . PI / NUM_ ) ) ;", "return new Lat Lon [ ] { great Circle End Position ( location , azimuth , extreme Distance 1 ) , great Circle End Position ( location , azimuth , extreme Distance 2 ) } ; }"]}
{"ids": "23027", "code": ["private void init Checkbox ( Check Box Preference checkbox , boolean checked , boolean enabled ) {", "checkbox . set Checked ( checked ) ;", "checkbox . set Enabled ( enabled ) ; }"]}
{"ids": "43973", "code": ["public static int find URI Split Index ( String uri ) {", "int uri Length = uri . length ( ) ;", "int idx = uri Length - NUM_ ;", "for ( ; idx >= NUM_ ; idx -- ) {", "if ( ! Turtle Util . is Name Char ( uri . char At ( idx ) ) ) {", "break ; } }", "idx ++ ;", "for ( ; idx < uri Length ; idx ++ ) {", "if ( Turtle Util . is Name Start Char ( uri . char At ( idx ) ) ) {", "break ; } }", "if ( ! Turtle Util . is Name End Char ( uri . char At ( uri Length - NUM_ ) ) ) {", "return - NUM_ ; }", "if ( idx > NUM_ && idx < uri Length ) {", "return idx ; }", "return - NUM_ ; }"]}
{"ids": "66214", "code": ["private void write Log ( String cmd ) {", "try {", "if ( m writer == null ) {", "File file = File . create Temp File ( STR_ , STR_ ) ;", "m writer = new Print Writer ( new File Writer ( file ) ) ;", "log . info ( file . to String ( ) ) ; }", "m writer . println ( cmd ) ;", "m writer . flush ( ) ; }", "catch ( Exception e ) {", "log . severe ( e . to String ( ) ) ; } }"]}
{"ids": "12249", "code": ["public void reload ( String why ) {", "m Full Photo Paths = m Root Dir . list ( Media Scanner . JPG FILENAME FILTER ) ;", "if ( ( m Full Photo Paths != null ) && ( m Full Photo Paths . length == NUM_ ) ) {", "m Full Photo Paths = null ;", "Log . i ( Global . LOG CONTEXT , m Debug Prefix + why + STR_ + m Root Dir + STR_ + NUM_ ) ; }", "else if ( m Full Photo Paths != null ) {", "if ( Global . debug Enabled ) {", "Log . i ( Global . LOG CONTEXT , m Debug Prefix + why + STR_ + m Root Dir + STR_ + m Full Photo Paths . length ) ; }", "String parent Dir String = m Root Dir . get Absolute Path ( ) ;", "for ( int i = NUM_ ; i < m Full Photo Paths . length ; i ++ ) {", "m Full Photo Paths [ i ] = parent Dir String + STR_ + m Full Photo Paths [ i ] ; } } }"]}
{"ids": "13213", "code": ["protected void add Content Spec To Element ( XML Element Decl element Decl ) {", "if ( ( f Depth == NUM_ || ( f Depth == NUM_ && element Decl . type == XML Element Decl . TYPE MIXED ) ) && f Node Index Stack != null ) {", "if ( element Decl . type == XML Element Decl . TYPE MIXED ) {", "int pcdata = add Unique Leaf Node ( null ) ;", "if ( f Node Index Stack [ NUM_ ] == - NUM_ ) {", "f Node Index Stack [ NUM_ ] = pcdata ; }", "else {", "f Node Index Stack [ NUM_ ] = add Content Spec Node ( XML Content Spec . CONTENTSPECNODE CHOICE , pcdata , f Node Index Stack [ NUM_ ] ) ; } }", "set Content Spec Index ( f Current Element Index , f Node Index Stack [ f Depth ] ) ; } }"]}
{"ids": "47665", "code": ["private void grow Spine ( ) {", "spine = new int [ ( spine . length << NUM_ ) + NUM_ ] ;", "threshold = ( int ) ( spine . length * load Factor ) ;", "Arrays . fill ( spine , - NUM_ ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "insert ( objs [ i ] , i ) ; } }"]}
{"ids": "73769", "code": ["public void reconnect ( ) {", "if ( opened && ! allow Connection Recovery ) {", "return ; }", "reconnectwait thread = new reconnectwait ( ) ;", "thread . start ( ) ;", "try {", "thread . join ( ) ; }", "catch ( Interrupted Exception e ) {", "log . error ( STR_ + e . get Message ( ) ) ; }", "if ( ! opened ) {", "log . error ( STR_ ) ; }", "else {", "log . info ( STR_ + get Current Port Name ( ) ) ;", "resetup Connection ( ) ; } }"]}
{"ids": "32111", "code": ["public Collection < Grid Port Record > records ( ) {", "synchronized ( recs ) {", "return Collections . unmodifiable Collection ( new Array List < > ( recs ) ) ; } }"]}
{"ids": "27066", "code": ["public float distance To Other Circle ( Circle circle ) {", "return ( float ) Math . abs ( Math . sqrt ( Math . pow ( circle . center . x - center . x , NUM_ ) + Math . pow ( circle . center . y - center . y , NUM_ ) ) ) ; }"]}
{"ids": "31008", "code": ["public Simple Command ( String command Name , String ... args ) {", "this ( command Name , ( Argument ) null ) ;", "Array List < Argument > arg List = new Array List < Argument > ( ) ;", "for ( String arg : args ) arg List . add ( new Argument ( arg ) ) ;", "arguments = arg List . to Array ( new Argument [ NUM_ ] ) ; }"]}
{"ids": "65140", "code": ["public Picking Graph Mouse Plugin ( int selection Modifiers , int add To Selection Modifiers ) {", "super ( selection Modifiers ) ;", "this . add To Selection Modifiers = add To Selection Modifiers ;", "this . lens Paintable = new Lens Paintable ( ) ;", "this . cursor = Cursor . get Predefined Cursor ( Cursor . HAND CURSOR ) ; }"]}
{"ids": "83850", "code": ["public int [ ] breadth First Search ( int intial Value , IBFS Traversable < N > traversable , int first Value , I Integer Bfs Next Value Iterator < N > next Value Iterator , List < Integer > sources Index ) {", "int [ ] results = new int [ nodes . length ] ;", "Arrays . fill ( results , intial Value ) ;", "boolean [ ] already Scanned = new boolean [ nodes . length ] ;", "Arrays . fill ( already Scanned , false ) ;", "Set < Integer > current Nodes Index = new Hash Set < > ( sources Index ) ;", "iterative Integer Breadth First Search ( results , already Scanned , current Nodes Index , first Value , NUM_ , traversable , next Value Iterator ) ;", "return results ; }"]}
{"ids": "30830", "code": ["private boolean announce ( String [ ] groups ) {", "if ( data Packets == null || ! last Locator . equals ( my Locator ) || ! Arrays . equals ( last Groups , groups ) ) {", "List < Datagram Packet > packets = new Array List < Datagram Packet > ( ) ;", "Discovery disco ;", "try {", "disco = get Discovery ( multicast Announcement Constraints . choose Protocol Version ( ) ) ; }", "catch ( Discovery Protocol Exception e ) {", "throw new Assertion Error ( e ) ; }", "Encode Iterator ei = disco . encode Multicast Announcement ( new Multicast Announcement ( announcement Seq No ++ , my Locator . get Host ( ) , my Locator . get Port ( ) , groups , my Service ID ) , multicast Announcement Constraints . get Multicast Max Packet Size ( DEFAULT MAX PACKET SIZE ) , multicast Announcement Constraints . get Unfulfilled Constraints ( ) ) ;", "while ( ei . has Next ( ) ) {", "try {", "packets . add All ( Arrays . as List ( ei . next ( ) ) ) ; }", "catch ( Exception e ) {", "logger . log ( ( e instanceof Unsupported Constraint Exception ) ? Levels . HANDLED : Level . INFO , STR_ + STR_ , e ) ; } }", "last Locator = my Locator ;", "last Groups = groups ;", "data Packets = packets . to Array ( new Datagram Packet [ packets . size ( ) ] ) ; }", "try {", "send ( data Packets ) ; }", "catch ( Interrupted IO Exception e ) {", "return false ; }", "return true ; }"]}
{"ids": "11155", "code": ["public Drawing Attributes ( ) {", "property Change Support = new Property Change Support ( this ) ; }"]}
{"ids": "14666", "code": ["static void create Policy Tree ( String config Name , String config Id , Service Config Manager scm , String org ) throws No Permission Exception , Policy Exception , SSO Exception {", "try {", "Service Config p Config = scm . get Organization Config ( org , null ) ;", "if ( p Config == null ) {", "scm . create Organization Config ( org , null ) ;", "p Config = scm . get Organization Config ( org , null ) ; }", "p Config . add Sub Config ( config Name , config Id , NUM_ , null ) ; }", "catch ( Service Already Exists Exception se ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + config Name + STR_ + config Id + STR_ + org ) ; } }", "catch ( SMS Exception e ) {", "String [ ] objs = { org } ;", "if ( e . get Exception Code ( ) == SMS Exception . STATUS NO PERMISSION ) {", "throw ( new No Permission Exception ( Res Bundle Utils . rb Name , STR_ , null ) ) ; }", "else {", "throw ( new Policy Exception ( Res Bundle Utils . rb Name , STR_ , objs , e ) ) ; } } }"]}
{"ids": "21554", "code": ["private void rollback Method For Create Snapshot ( boolean is Snapshot Created , boolean is Dummy Lun Path Added , HDS Api Client hds Api Client , Storage System storage , URI snapshot ) throws Exception {", "if ( is Dummy Lun Path Added ) {", "log . info ( STR_ ) ;", "hds Protection Operations . remove Dummy Lun Path ( storage , snapshot ) ; }", "if ( is Snapshot Created ) {", "log . info ( STR_ ) ;", "Block Snapshot snapshot Obj = db Client . query Object ( Block Snapshot . class , snapshot ) ;", "String system Object ID = HDS Utils . get System Object ID ( storage ) ;", "String logical Unit Obj Id = HDS Utils . get Logical Unit Object Id ( snapshot Obj . get Native Id ( ) , storage ) ;", "hds Api Client . delete Snapshot Volume ( system Object ID , logical Unit Obj Id , storage . get Model ( ) ) ; } }"]}
{"ids": "85664", "code": ["public static int convert String To Time Seconds ( String time ) {", "int result = NUM_ ;", "if ( time . ends With ( STR_ ) ) {", "int hours To Add = Integer . value Of ( String Utils . remove ( time , STR_ ) ) ;", "result = ( NUM_ * NUM_ ) * hours To Add ; }", "else if ( time . ends With ( STR_ ) ) {", "int mins To Add = Integer . value Of ( String Utils . remove ( time , STR_ ) ) ;", "result = NUM_ * mins To Add ; }", "else if ( time . ends With ( STR_ ) ) {", "int secs To Add = Integer . value Of ( String Utils . remove ( time , STR_ ) ) ;", "result = secs To Add ; }", "return result ; }"]}
{"ids": "55879", "code": ["public void read Prefs ( Shared Preferences settings , Action Factory factory ) {", "boolean visible = false ;", "String action Id = settings . get String ( STR_ + name + STR_ , STR_ ) ;", "main Action = factory . get Action ( action Id ) ;", "if ( main Action != null ) visible = true ;", "menu Actions . clear ( ) ;", "for ( int i = NUM_ ; i < max Menu Actions ; i ++ ) {", "action Id = settings . get String ( STR_ + name + STR_ + ( i + NUM_ ) , STR_ ) ;", "UI Action a = factory . get Action ( action Id ) ;", "if ( a != null ) visible = true ;", "menu Actions . add ( a ) ; }", "if ( button != null ) button . set Visibility ( visible ? View . VISIBLE : View . GONE ) ; }"]}
{"ids": "64325", "code": ["public boolean add To Active List ( Download Info Runnable download Info Runnable ) {", "return active List Has Room ( ) && m Active List . add ( download Info Runnable ) ; }"]}
{"ids": "80894", "code": ["private void add Expr To TLA ( TLA Expr expr ) {", "Vector sv = expr . to String Vector ( ) ;", "Vector expr Mapping = expr . to Mapping Vector ( ) ;", "int indent = tlacode Next Line . length ( ) ;", "int next Line = NUM_ ;", "if ( indent != NUM_ ) {", "Mapping Object . shift Mapping Vector ( expr Mapping , indent ) ;", "tlacode Next Line = tlacode Next Line + ( ( String ) sv . element At ( NUM_ ) ) ;", "mapping Vector Next Line . add All ( ( Vector ) expr Mapping . element At ( NUM_ ) ) ;", "next Line = NUM_ ;", "if ( sv . size ( ) > NUM_ ) {", "end Current Line Of TLA ( ) ; } }", "if ( sv . size ( ) > NUM_ ) {", "String spaces = N Spaces ( indent ) ;", "while ( next Line < sv . size ( ) - NUM_ ) {", "tlacode . add Element ( spaces + ( ( String ) sv . element At ( next Line ) ) ) ;", "mapping Vector . add Element ( ( Vector ) expr Mapping . element At ( next Line ) ) ;", "next Line ++ ; }", "tlacode Next Line = spaces + ( ( String ) sv . element At ( next Line ) ) ;", "mapping Vector Next Line = ( Vector ) expr Mapping . element At ( next Line ) ; }", "else if ( indent == NUM_ ) {", "tlacode Next Line = tlacode Next Line + ( ( String ) sv . element At ( NUM_ ) ) ;", "mapping Vector Next Line . add All ( ( Vector ) expr Mapping . element At ( NUM_ ) ) ; } }"]}
{"ids": "33055", "code": ["private boolean is Upper Case Camel Case Hunk ( String hunk ) {", "if ( hunk . length ( ) < NUM_ ) return false ;", "for ( int i = NUM_ ; i < hunk . length ( ) ; i ++ ) {", "if ( ! is Legal Char ( hunk . char At ( i ) ) ) return false ; }", "return true ; }"]}
{"ids": "62931", "code": ["public void type ( String string ) {", "for ( int i = NUM_ ; i < string . length ( ) ; i ++ ) {", "char c = string . char At ( i ) ;", "type ( c ) ; } }"]}
{"ids": "33409", "code": ["public boolean provides Identifier ( ) {", "return false ; }"]}
{"ids": "28231", "code": ["static void remove Redundant Affix ( Translator Utils . I Contain i Contain , List < String > str List ) {", "if ( str List . size ( ) <= NUM_ ) {", "return ; }", "int w = NUM_ ;", "for ( String str : str List ) {", "if ( w == NUM_ || ! i Contain . contain Func ( str , str List . get ( w - NUM_ ) ) ) {", "str List . set ( w , str ) ;", "w ++ ; } }", "str List = str List . sub List ( NUM_ , w ) ; }"]}
{"ids": "3975", "code": ["public static int next Int ( int n ) {", "Random random = get Random ( ) ;", "int value = random . next Int ( n ) ;", "if ( ! is Test ) free Random List . free ( random ) ;", "return value ; }"]}
{"ids": "40743", "code": ["protected void do Resume Updates ( ) {", "Calendar cal = Calendar . get Instance ( Locale . get Default ( ) ) ;", "m First Day Of Week = cal . get First Day Of Week ( ) - NUM_ ;", "m Show Week Number = false ;", "update Header ( ) ;", "go To ( m Selected Day . to Millis ( true ) , false , false , false ) ;", "m Adapter . set Selected Day ( m Selected Day ) ;", "m Today Updater . run ( ) ; }"]}
{"ids": "80387", "code": ["private void store Last Used ( ) {", "put ( LAST USE , ( int ) ( System . current Time Millis ( ) / NUM_ ) ) ; }"]}
{"ids": "76124", "code": ["private boolean can Contain ( Element Containment Info child , Element Containment Info top , int top Index ) {", "int child Types = child . types ;", "int contents = top . contents ;", "int transparency Allowed = child Types & ( top . transparent To Contents & ~ contents ) ;", "for ( int container Index = top Index - NUM_ ; transparency Allowed != NUM_ ; -- container Index ) {", "if ( container Index < NUM_ ) {", "contents |= transparency Allowed ;", "break ; }", "Element Containment Info container = open Elements . get ( container Index ) ;", "contents |= transparency Allowed & container . contents ;", "transparency Allowed = transparency Allowed & container . transparent To Contents & ~ contents ; }", "return ( contents & child Types ) != NUM_ ; }"]}
{"ids": "9551", "code": ["public static int [ ] extract Arcs ( ASN 1 Object Identifier oid ) throws Invalid Object Id Exception {", "String oid Str = oid . get Id ( ) ;", "String Tokenizer str Tok Cnt = new String Tokenizer ( oid Str , STR_ , false ) ;", "int arc Count = str Tok Cnt . count Tokens ( ) ;", "String Tokenizer str Tok = new String Tokenizer ( oid Str , STR_ , true ) ;", "boolean expect Delimiter = false ;", "int [ ] arcs = new int [ arc Count ] ;", "int i = NUM_ ;", "while ( str Tok . has More Tokens ( ) ) {", "String token = str Tok . next Token ( ) ;", "if ( expect Delimiter && ( ! token . equals ( STR_ ) || ! str Tok . has More Tokens ( ) ) ) {", "throw new Invalid Object Id Exception ( res . get String ( STR_ ) ) ; }", "else if ( ! expect Delimiter ) {", "try {", "arcs [ i ] = Integer . parse Int ( token ) ;", "if ( arcs [ i ] < NUM_ ) {", "throw new Invalid Object Id Exception ( res . get String ( STR_ ) ) ; }", "i ++ ; }", "catch ( Number Format Exception ex ) {", "throw new Invalid Object Id Exception ( res . get String ( STR_ ) ) ; } }", "expect Delimiter = ! expect Delimiter ; }", "return arcs ; }"]}
{"ids": "37744", "code": ["protected void update Stats For Conditional Density Estimator ( Conditional Density Estimator classifier , Instance class Missing , double class Value ) throws Exception {", "if ( m Prior Estimator == null ) {", "set Numeric Priors From Buffer ( ) ; }", "m Sum Scheme Entropy -= classifier . log Density ( class Missing , class Value ) * class Missing . weight ( ) / Utils . log 2 ;", "m Sum Prior Entropy -= m Prior Estimator . log Density ( class Value ) * class Missing . weight ( ) / Utils . log 2 ; }"]}
{"ids": "30596", "code": ["public Cluster Policy create Cluster Policy ( String cluster Member Name ) throws Create Exception {", "long time 1 = System . current Time Millis ( ) ;", "if ( cluster Policies == null ) {", "cluster Member Names = get Cluster Member Names ( ) ;", "if ( cluster Member Names != null && cluster Member Names . length > NUM_ ) {", "cluster Policies = new Hash Map < String , Cluster Policy > ( ) ;", "Cluster Policy [ ] temp Policy = new Cluster Policy [ cluster Member Names . length ] ;", "for ( int i = NUM_ ; i < cluster Member Names . length ; i ++ ) temp Policy [ i ] = create Cluster Policy Internal ( cluster Member Names [ i ] ) ;", "Array List < Replication Policy > selected Repl Policies = new Array List < Replication Policy > ( cluster Member Names . length ) ;", "List < String > selected Repl Group Names = new Array List < String > ( cluster Member Names . length ) ;", "for ( int i = NUM_ ; i < temp Policy . length ; i ++ ) if ( temp Policy [ i ] . m Replication Policy != null && ! selected Repl Group Names . contains ( temp Policy [ i ] . m Replication Policy . m Replication Group Name ) ) {", "selected Repl Policies . add ( temp Policy [ i ] . m Replication Policy ) ;", "selected Repl Group Names . add ( temp Policy [ i ] . m Replication Policy . m Replication Group Name ) ; }", "if ( selected Repl Policies . is Empty ( ) ) selected Repl Policies = null ;", "else selected Repl Policies . trim To Size ( ) ;", "for ( int i = NUM_ ; i < cluster Member Names . length ; i ++ ) {", "temp Policy [ i ] . m Replication Groups = selected Repl Policies ;", "cluster Policies . put ( cluster Member Names [ i ] , temp Policy [ i ] ) ; } } }", "Cluster Policy result = cluster Policies . get ( cluster Member Name ) ;", "if ( result == null ) result = create Cluster Policy Internal ( cluster Member Name ) ;", "long time 2 = System . current Time Millis ( ) ;", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + cluster Member Name + STR_ + ( time 2 - time 1 ) + STR_ ) ; }", "return result ; }"]}
{"ids": "53505", "code": ["public static boolean compare Doubles ( double a , double b ) {", "if ( Double . is Na N ( a ) && Double . is Na N ( b ) ) return true ;", "if ( ! Double . is Infinite ( a ) && ! Double . is Infinite ( b ) ) return Math . abs ( a - b ) <= EPSILON ;", "return a == b ; }"]}
{"ids": "30262", "code": ["public static double log Of Base ( double number , int base ) {", "return Math . log ( number ) / Math . log ( base ) ; }"]}
{"ids": "60393", "code": ["public File Saver Descriptor ( @ Not Null String title , @ Not Null String description , String ... extensions ) {", "super ( true , true , true , true , false , false ) ;", "set Title ( title ) ;", "set Description ( description ) ;", "this . extensions = Arrays . as List ( extensions ) ; }"]}
{"ids": "42096", "code": ["public void add Run ( final Run run ) {", "runs . add ( run ) ;", "run . set Id ( run Id Counter ++ ) ; }"]}
{"ids": "16113", "code": ["void copy Into ( Converter [ ] converters ) {", "System . arraycopy ( i Converters , NUM_ , converters , NUM_ , i Converters . length ) ; }"]}
{"ids": "74049", "code": ["@ Override public boolean add Output Sensor ( String sensor Name , int state ) {", "Output Sensor output Sensor = new Output Sensor ( sensor Name ) ;", "if ( ! output Sensor . set State ( state ) ) {", "return false ; }", "output Sensor List . add ( output Sensor ) ;", "return true ; }"]}
{"ids": "3733", "code": ["public void init ( Socket Channel channel ) {", "channel = channel ;", "read Buffer . clear ( ) ;", "read Buffer . flip ( ) ;", "needs Flush = false ; }"]}
{"ids": "49858", "code": ["public void reset ( ) {", "Timber . i ( STR_ ) ;", "m Current Player . reset ( ) ;", "m Next Player . reset ( ) ;", "m Queue = Collections . empty List ( ) ;", "m Queue Index = NUM_ ;", "m Requested Seek Position = NUM_ ;", "m Play When Prepared = false ; }"]}
{"ids": "8000", "code": ["@ Override public Expected < T > if Present ( final Consumer < ? super T > consumer ) {", "if ( this . value != null ) consumer . accept ( this . value ) ;", "return this ; }"]}
{"ids": "73659", "code": ["protected void send Intensity ( double intensity ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + intensity + STR_ + STR_ + last Output Step + STR_ + max Dim Step ) ; }", "int new Step = ( int ) Math . round ( intensity * max Dim Step ) ;", "if ( ( new Step < NUM_ ) || ( new Step > max Dim Step ) ) {", "log . error ( STR_ + new Step + STR_ + intensity ) ; }", "if ( new Step == NUM_ ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + intensity + STR_ ) ; }", "return ; }", "X 10 Sequence out = new X 10 Sequence ( ) ;", "out . add Ext Data ( housecode , devicecode , X 10 Sequence . EXTCMD DIM , new Step ) ;", "tc . send X 10 Sequence ( out , null ) ;", "last Output Step = new Step ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + intensity + STR_ + X 10 Sequence . house Value To Text ( housecode ) + STR_ + devicecode + STR_ + new Step ) ; } }"]}
{"ids": "79156", "code": ["public Glow Scheduler ( Glow Server server , World Scheduler worlds ) {", "this . server = server ;", "this . worlds = worlds ;", "in Tick Task Condition = worlds . get Advance Condition ( ) ;", "tick End Run = null ;", "primary Thread = Thread . current Thread ( ) ; }"]}
{"ids": "42580", "code": ["public void characters ( char [ ] ch , int start , int length ) throws SAX Exception {", "try {", "stop Terminator ( ) ;", "if ( w == null ) return ;", "int end = start + length ;", "for ( int i = start ; i < end ; i ++ ) {", "char c = ch [ i ] ;", "switch ( c ) {", "case STR_ :", "w . write ( STR_ ) ;", "break ;", "case STR_ :", "w . write ( STR_ ) ;", "break ;", "case STR_ :", "w . write ( STR_ ) ;", "break ;", "case STR_ :", "case STR_ :", "case STR_ :", "w . write ( c ) ;", "break ;", "default :", "if ( can Encode ( c ) ) {", "w . write ( c ) ; }", "else {", "w . write ( STR_ ) ;", "w . write ( Integer . to String ( c ) ) ;", "w . write ( STR_ ) ; }", "break ; } } }", "catch ( IO Exception e ) {", "throw new SAX Exception ( e ) ; } }"]}
{"ids": "42685", "code": ["public static String to Human Readable String ( final String iso 8601 Duration ) {", "String str = STR_ ;", "if ( iso 8601 Duration . matches ( STR_ ) ) {", "str = STR_ ; }", "else {", "String hours = get Hours ( iso 8601 Duration ) , minutes = get Minutes ( iso 8601 Duration ) , seconds = get Seconds ( iso 8601 Duration ) ;", "if ( hours != null ) {", "str = hours ;", "if ( minutes != null && minutes . length ( ) == NUM_ ) {", "minutes = STR_ + minutes ; } }", "if ( str . is Empty ( ) ) str = minutes ;", "else str += STR_ + minutes ;", "if ( str . is Empty ( ) ) str = seconds ;", "else str += STR_ + seconds ; }", "return str ; }"]}
{"ids": "23232", "code": ["@ Override public I Chat Message send Message ( final String text ) throws Remote Exception {", "if ( Text Utils . is Empty ( text ) ) {", "throw new Server Api Illegal Argument Exception ( STR_ ) ; }", "int message Length = text . length ( ) ;", "int max Message Length = m Rcs Settings . get Max Group Chat Message Length ( ) ;", "if ( message Length > max Message Length ) {", "throw new Server Api Illegal Argument Exception ( STR_ + message Length + STR_ + max Message Length + STR_ ) ; }", "if ( ! is Allowed To Send Message ( ) ) {", "throw new Server Api Permission Denied Exception ( STR_ ) ; }", "try {", "m Im Service . remove Group Chat Composing Status ( m Chat Id ) ;", "long timestamp = System . current Time Millis ( ) ;", "final Chat Message msg = Chat Utils . create Text Message ( null , text , timestamp , timestamp ) ;", "Chat Message Persisted Storage Accessor persisted Storage = new Chat Message Persisted Storage Accessor ( m Messaging Log , msg . get Message Id ( ) , msg . get Remote Contact ( ) , text , msg . get Mime Type ( ) , m Chat Id , Direction . OUTGOING ) ;", "add Outgoing Group Chat Message ( msg , Content . Status . QUEUED , Content . Reason Code . UNSPECIFIED ) ;", "if ( ! m Chat Service . is Group Chat Active ( m Chat Id ) ) {", "m Chat Service . set Group Chat State And Reason Code ( m Chat Id , Group Chat . State . STARTED , Group Chat . Reason Code . UNSPECIFIED ) ; }", "m Im Service . try To Dequeue Group Chat Messages And Group File Transfers ( m Chat Id ) ;", "return new Chat Message Impl ( persisted Storage ) ; }", "catch ( Server Api Base Exception e ) {", "if ( ! e . should Not Be Logged ( ) ) {", "s Logger . error ( Exception Util . get Full Stack Trace ( e ) ) ; }", "throw e ; }", "catch ( Exception e ) {", "s Logger . error ( Exception Util . get Full Stack Trace ( e ) ) ;", "throw new Server Api Generic Exception ( e ) ; } }"]}
{"ids": "30017", "code": ["public Dock Node Event Handler ( Node node ) {", "this . node = node ; }"]}
{"ids": "56371", "code": ["private int read Source To Log ( Settings settings ) {", "String source To Log = settings . get ( INDEX INDEXING SLOWLOG MAX SOURCE CHARS TO LOG , STR_ ) ;", "try {", "return Integer . parse Int ( source To Log , NUM_ ) ; }", "catch ( Number Format Exception e ) {", "return Booleans . parse Boolean ( source To Log , true ) ? Integer . MAX VALUE : NUM_ ; } }"]}
{"ids": "21107", "code": ["private void delete Current License File On Disk ( ) {", "File license File = new File ( License Constants . LICENSE FILE PATH ) ;", "if ( license File . exists ( ) ) {", "license File . delete ( ) ; } }"]}
{"ids": "35409", "code": ["public static Path create Directory ( final Path parent , final String folder Name ) {", "final File file = new File ( parent . to File ( ) , folder Name ) ;", "if ( ! file . exists ( ) ) {", "if ( ! file . mkdir ( ) ) {", "throw new Runtime Exception ( STR_ + parent + STR_ + folder Name + STR_ ) ; } }", "file . delete On Exit ( ) ;", "return file . to Path ( ) ; }"]}
{"ids": "34472", "code": ["protected Set < Function Interface > find Unused Functions ( Set < Unit Interface > units ) {", "Set < Function Interface > all Functions = new Hash Set < Function Interface > ( ) ;", "Set < Function Interface > used Functions = new Hash Set < Function Interface > ( ) ;", "for ( Unit Interface unit : units ) {", "List < Function Interface > unit Functions = get Unit Functions ( unit ) ;", "all Functions . add All ( unit Functions ) ;", "for ( Function Interface unit Function : unit Functions ) {", "for ( Function Interface used Function : unit Function . get Called Functions ( ) ) {", "used Functions . add ( used Function ) ; } } }", "all Functions . remove All ( used Functions ) ;", "return all Functions ; }"]}
{"ids": "14363", "code": ["private static void add Items To List ( int start Index , int end Index ) {", "for ( int i = start Index ; i < end Index ; i ++ ) {", "values . add ( new Integer ( i ) ) ; } }"]}
{"ids": "42857", "code": ["public static synchronized List < Proxy > no Proxy List ( ) {", "if ( no Proxy List == null ) {", "Array List < Proxy > list = new Array List < Proxy > ( NUM_ ) ;", "list . add ( Proxy . NO PROXY ) ;", "no Proxy List = Collections . unmodifiable List ( list ) ; }", "return no Proxy List ; }"]}
{"ids": "86781", "code": ["public void tally Variant ( Vcf Header header , Vcf Record rec ) {", "tally Variant ( rec , header . get Sample Names ( ) ) ; }"]}
{"ids": "71923", "code": ["public LDIF Entry Reader ( final String ... ldif Lines ) {", "super ( Arrays . as List ( ldif Lines ) ) ; }"]}
{"ids": "83238", "code": ["public void update Preson Info ( ) {", "this . left Person = person 2 Leaving Person Info . get ( this . person Id ) ;", "this . entered Person = person 2 Entering Person Info . get ( this . person Id ) ; }"]}
{"ids": "15405", "code": ["public void present Licenses ( boolean pre Accept ) {", "License Set licenses = license Module . get Required Licenses ( ) ;", "if ( pre Accept ) {", "licenses . accept All ( ) ; }", "else {", "for ( License license : licenses ) {", "if ( license . is Accepted ( ) ) {", "continue ; }", "user . show ( STR_ ) ;", "user . show ( license . get License Text ( ) ) ;", "String input = user . ask ( STR_ ) ;", "if ( input != null && YES . starts With ( input . to Lower Case ( ) ) ) {", "license . accept ( ) ; }", "else {", "license . reject ( ) ; } } } }"]}
{"ids": "10877", "code": ["public void add Geo Key ( XTIFF Field geo Key ) {", "geo Key Index . put ( new Integer ( geo Key . get Tag ( ) ) , geo Key ) ;", "has Geo Keys = true ; }"]}
{"ids": "5745", "code": ["public static Geo Time Serie detect ( Geo Time Serie gts , int alphabet Size , int word Len , int window Len , Collection < String > patterns , boolean standardize PAA ) throws Warp Script Exception {", "Geo Time Serie gts Patterns = GTS Helper . b SAX ( gts , alphabet Size , word Len , window Len , standardize PAA ) ;", "GTS Helper . sort ( gts Patterns ) ;", "Geo Time Serie detected = new Geo Time Serie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM_ ) ;", "detected . set Metadata ( gts . get Metadata ( ) ) ;", "int lastidx = - NUM_ ;", "for ( int i = NUM_ ; i < gts Patterns . values ; i ++ ) {", "if ( ! patterns . contains ( gts Patterns . string Values [ i ] ) ) {", "continue ; }", "for ( int j = NUM_ ; j < window Len ; j ++ ) {", "if ( i + j > lastidx ) {", "lastidx = i + j ;", "GTS Helper . set Value ( detected , GTS Helper . tick At Index ( gts , lastidx ) , GTS Helper . location At Index ( gts , lastidx ) , GTS Helper . elevation At Index ( gts , lastidx ) , GTS Helper . value At Index ( gts , lastidx ) , false ) ; } } }", "return detected ; }"]}
{"ids": "52801", "code": ["private String Builder debug Dump Candidates ( String Builder msg , List < ? extends Itemset > candidates , Vector Field Type Information < Bit Vector > meta ) {", "msg . append ( STR_ ) ;", "for ( Itemset itemset : candidates ) {", "msg . append ( STR_ ) ;", "itemset . append To ( msg , meta ) ;", "msg . append ( STR_ ) ; }", "return msg ; }"]}
{"ids": "42092", "code": ["public void add Outbound Rule ( final Outbound Rule outbound Rule ) {", "outbound Rule . set Id ( outbound Rule Id Counter ++ ) ;", "outbound Rules . add ( outbound Rule ) ; }"]}
{"ids": "63970", "code": ["public Skype ( String username , String password ) {", "this . username = username ;", "this . password = password ; }"]}
{"ids": "49083", "code": ["private void add Flags ( int newflags ) {", "flags = get Layout Flags ( ) | newflags ; }"]}
{"ids": "9615", "code": ["public static String match Certificate ( Key Store key Store , X 509 Certificate cert ) throws Crypto Exception {", "try {", "for ( Enumeration aliases = key Store . aliases ( ) ; aliases . has More Elements ( ) ; ) {", "String alias = ( String ) aliases . next Element ( ) ;", "if ( key Store . is Certificate Entry ( alias ) ) {", "X 509 Certificate comp Cert = X 509 Cert Util . convert Certificate ( key Store . get Certificate ( alias ) ) ;", "if ( cert . equals ( comp Cert ) ) {", "return alias ; } } }", "return null ; }", "catch ( Key Store Exception ex ) {", "throw new Crypto Exception ( res . get String ( STR_ ) , ex ) ; } }"]}
{"ids": "78110", "code": ["void purge Last Articles ( int amount To Purge ) {", "if ( ! is DB Available ( ) ) return ;", "long time = System . current Time Millis ( ) ;", "String query = STR_ + TABLE ARTICLES + STR_ + ( Utils . ARTICLE LIMIT - amount To Purge + STR_ ) ;", "safely Delete Articles ( query , null ) ;", "Log . d ( TAG , STR_ + ( System . current Time Millis ( ) - time ) + STR_ ) ; }"]}
{"ids": "41815", "code": ["public void reclaim Views ( List < View > views ) {", "int child Count = get Child Count ( ) ;", "Recycler Listener listener = m Recycler . m Recycler Listener ;", "for ( int i = NUM_ ; i < child Count ; i ++ ) {", "View child = get Child At ( i ) ;", "Two Way Abs List View . Layout Params lp = ( Two Way Abs List View . Layout Params ) child . get Layout Params ( ) ;", "if ( lp != null && m Recycler . should Recycle View Type ( lp . view Type ) ) {", "views . add ( child ) ;", "if ( listener != null ) {", "listener . on Moved To Scrap Heap ( child ) ; } } }", "m Recycler . reclaim Scrap Views ( views ) ;", "remove All Views In Layout ( ) ; }"]}
{"ids": "30876", "code": ["Proxy Verifier ( Txn Manager server Proxy , Uuid proxy ID ) {", "if ( ! ( server Proxy instanceof Remote Method Control ) ) {", "throw new Unsupported Operation Exception ( STR_ ) ; }", "else if ( ! ( server Proxy instanceof Trust Equivalence ) ) {", "throw new Unsupported Operation Exception ( STR_ + STR_ ) ; }", "else if ( proxy ID == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . server Proxy = ( Remote Method Control ) server Proxy ;", "this . proxy ID = proxy ID ; }"]}
{"ids": "71796", "code": ["public void paint ( Graphics g ) {", "g . translate ( NUM_ , translate Y ) ;", "super . paint ( g ) ; }"]}
{"ids": "72368", "code": ["private static long add And Check ( long a , long b , Localizable pattern ) throws Math Runtime Exception {", "final long result = a + b ;", "if ( ! ( ( a ^ b ) < NUM_ || ( a ^ result ) >= NUM_ ) ) {", "throw new Math Runtime Exception ( pattern , a , b ) ; }", "return result ; }"]}
{"ids": "85097", "code": ["private void serialize Compact RDF General Qualifier ( int indent , XMP Node node ) throws IO Exception , XMP Exception {", "write ( STR_ ) ;", "write Newline ( ) ;", "serialize Canonical RDF Property ( node , false , true , indent + NUM_ ) ;", "for ( Iterator iq = node . iterate Qualifier ( ) ; iq . has Next ( ) ; ) {", "XMP Node qualifier = ( XMP Node ) iq . next ( ) ;", "serialize Canonical RDF Property ( qualifier , false , false , indent + NUM_ ) ; } }"]}
{"ids": "44852", "code": ["private J Check Box add Checkbox ( String text , Container container ) {", "J Check Box checkbox = new J Check Box ( text ) ;", "checkbox . set Alignment X ( Component . LEFT ALIGNMENT ) ;", "checkbox . set Border ( Border Factory . create Empty Border ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "container . add ( checkbox ) ;", "return checkbox ; }"]}
{"ids": "68817", "code": ["public void push ( ) {", "state . cliprgn = g . get Clip Bounds ( ) ;", "stack . push ( state ) ;", "state = ( Graphics State ) state . clone ( ) ; }"]}
{"ids": "19628", "code": ["public synchronized int add ( I Audio Processor processor ) {", "processors . add ( processor ) ;", "build Final Processor ( ) ;", "return processors . index Of ( processor ) ; }"]}
{"ids": "40177", "code": ["public Script Builder data ( int index , byte [ ] data ) {", "byte [ ] copy = Arrays . copy Of ( data , data . length ) ;", "int opcode ;", "if ( data . length == NUM_ ) {", "opcode = OP 0 ; }", "else if ( data . length == NUM_ ) {", "byte b = data [ NUM_ ] ;", "if ( b >= NUM_ && b <= NUM_ ) opcode = Script . encode To Op N ( b ) ;", "else opcode = NUM_ ; }", "else if ( data . length < OP PUSHDATA 1 ) {", "opcode = data . length ; }", "else if ( data . length < NUM_ ) {", "opcode = OP PUSHDATA 1 ; }", "else if ( data . length < NUM_ ) {", "opcode = OP PUSHDATA 2 ; }", "else {", "throw new Runtime Exception ( STR_ ) ; }", "return add Chunk ( index , new Script Chunk ( opcode , copy ) ) ; }"]}
{"ids": "68399", "code": ["public static boolean is Embedded Base 64 Image ( String uri ) {", "return ( uri != null && uri . starts With ( STR_ ) ) ; }"]}
{"ids": "45984", "code": ["void change State ( int new State ) {", "int old State ;", "synchronized ( state Lock ) {", "if ( state == new State ) return ;", "old State = state ;", "state = new State ;", "state Lock . notify All ( ) ; }", "send State Change Notification ( old State , new State ) ; }"]}
{"ids": "59706", "code": ["private int parse Link Label ( ) {", "String m = match ( LINK LABEL ) ;", "return m == null ? NUM_ : m . length ( ) ; }"]}
{"ids": "50322", "code": ["private static void insert Comments In Node ( Node node , List < Comment > comments To Attribute ) {", "if ( comments To Attribute . size ( ) == NUM_ ) return ;", "List < Node > children = node . get Children Nodes ( ) ;", "Position Utils . sort By Begin Position ( children ) ;", "for ( Node child : children ) {", "List < Comment > comments Inside Child = new Linked List < Comment > ( ) ;", "for ( Comment c : comments To Attribute ) {", "if ( Position Utils . node Contains ( child , c , do Not Consider Annotations As Node Start For Code Attribution ) ) {", "comments Inside Child . add ( c ) ; } }", "comments To Attribute . remove All ( comments Inside Child ) ;", "insert Comments In Node ( child , comments Inside Child ) ; }", "List < Comment > attributed Comments = new Linked List < Comment > ( ) ;", "for ( Comment comment : comments To Attribute ) {", "if ( comment . is Line Comment ( ) ) {", "for ( Node child : children ) {", "if ( child . get End Line ( ) == comment . get Begin Line ( ) ) {", "if ( attribute Line Comment To Node Or Child ( child , comment . as Line Comment ( ) ) ) {", "attributed Comments . add ( comment ) ; } } } } }", "Comment previous Comment = null ;", "attributed Comments = new Linked List < Comment > ( ) ;", "List < Node > children And Comments = new Linked List < Node > ( ) ;", "children And Comments . add All ( children ) ;", "children And Comments . add All ( comments To Attribute ) ;", "Position Utils . sort By Begin Position ( children And Comments , do Not Consider Annotations As Node Start For Code Attribution ) ;", "for ( Node thing : children And Comments ) {", "if ( thing instanceof Comment ) {", "previous Comment = ( Comment ) thing ;", "if ( ! previous Comment . is Orphan ( ) ) {", "previous Comment = null ; } }", "else {", "if ( previous Comment != null && ! thing . has Comment ( ) ) {", "if ( ! do Not Assign Comments Preceeding Empty Lines || ! there Are Lines Between ( previous Comment , thing ) ) {", "thing . set Comment ( previous Comment ) ;", "attributed Comments . add ( previous Comment ) ;", "previous Comment = null ; } } } }", "comments To Attribute . remove All ( attributed Comments ) ;", "for ( Comment c : comments To Attribute ) {", "if ( c . is Orphan ( ) ) {", "node . add Orphan Comment ( c ) ; } } }"]}
{"ids": "41810", "code": ["public static String read File As String ( File file ) throws File Not Found Exception {", "return read File As String ( file . get Absolute Path ( ) ) ; }"]}
{"ids": "68091", "code": ["protected void on Exception ( final Wro Runtime Exception e ) {", "throw e ; }"]}
{"ids": "22900", "code": ["public void close ( ) {", "if ( ! is Open ) return ;", "Log . d ( TAG , STR_ ) ;", "loading Lock . lock ( ) ;", "try {", "save ( ) ;", "if ( save File Stream != null ) {", "Saving Helper . close ( save File Stream ) ;", "save File Stream = null ; }", "saving Disabled = true ;", "is Open = false ;", "Log . i ( TAG , STR_ ) ; }", "finally {", "loading Lock . unlock ( ) ; } }"]}
{"ids": "72991", "code": ["@ Override public List chunk String ( String s To Chunk ) {", "Integer [ ] i Res = split Points By Delimiter List ( s To Chunk , get Delimiters ( ) ) ;", "String [ ] s Res = split String By Delimiter Points ( s To Chunk , i Res ) ;", "return Arrays . as List ( s Res ) ; }"]}
{"ids": "25782", "code": ["public static String convert Boolean Arr To String ( Boolean [ ] no Dictionary Dims Mapping ) {", "String Builder builder = new String Builder ( ) ;", "int index = NUM_ ;", "for ( ; index < no Dictionary Dims Mapping . length ; index ++ ) {", "builder . append ( no Dictionary Dims Mapping [ index ] ) ;", "builder . append ( Carbon Common Constants . COMA SPC CHARACTER ) ; }", "int last Index = builder . last Index Of ( Carbon Common Constants . COMA SPC CHARACTER ) ;", "String str = - NUM_ != last Index ? builder . substring ( NUM_ , last Index ) : builder . to String ( ) ;", "return str ; }"]}
{"ids": "38329", "code": ["public void clear ( ) {", "m Model . clear ( ) ;", "set Buttons ( null ) ; }"]}
{"ids": "680", "code": ["public static int brighter ( int c ) {", "int r = red ( c ) , g = green ( c ) , b = blue ( c ) ;", "int i = ( int ) ( NUM_ / ( NUM_ - scale ) ) ;", "if ( r == NUM_ && g == NUM_ && b == NUM_ ) {", "return rgba ( i , i , i , alpha ( c ) ) ; }", "if ( r > NUM_ && r < i ) r = i ;", "if ( g > NUM_ && g < i ) g = i ;", "if ( b > NUM_ && b < i ) b = i ;", "return rgba ( Math . min ( NUM_ , ( int ) ( r / scale ) ) , Math . min ( NUM_ , ( int ) ( g / scale ) ) , Math . min ( NUM_ , ( int ) ( b / scale ) ) , alpha ( c ) ) ; }"]}
{"ids": "81990", "code": ["public void shutdown ( ) {", "running = false ;", "if ( network Threads != null ) {", "for ( Network Thread n : network Threads ) {", "n . stopped = true ; } }", "network Threads = null ;", "synchronized ( LOCK ) {", "LOCK . notify All ( ) ; } }"]}
{"ids": "83907", "code": ["private static Metric Value number to metric value ( Number elem ) {", "if ( elem == null ) return Metric Value . EMPTY ;", "final String num = elem . to String ( ) ;", "try {", "return Metric Value . from Int Value ( Long . parse Long ( num ) ) ; }", "catch ( Number Format Exception ex ) { }", "try {", "return Metric Value . from Dbl Value ( Double . parse Double ( num ) ) ; }", "catch ( Number Format Exception ex ) { }", "return Metric Value . from Str Value ( num ) ; }"]}
{"ids": "86648", "code": ["public boolean overlaps ( String sequence , int start , int end ) {", "if ( start == MISSING || end == MISSING || end < start ) {", "throw new Illegal Argument Exception ( ) ; }", "if ( ! m Sequence . equals ( sequence ) ) {", "return false ; }", "if ( ( m End != MISSING && start >= m End ) || ( end <= m Start ) ) {", "return false ; }", "return true ; }"]}
{"ids": "9363", "code": ["public Okapi BM 25 ( double k 1 , double b ) {", "if ( Double . is Na N ( k 1 ) || Double . is Infinite ( k 1 ) || k 1 < NUM_ ) throw new Illegal Argument Exception ( STR_ + k 1 ) ;", "this . k 1 = k 1 ;", "if ( Double . is Na N ( b ) || b < NUM_ || b > NUM_ ) throw new Illegal Argument Exception ( STR_ + b ) ;", "this . b = b ; }"]}
{"ids": "4231", "code": ["public boolean is Configured ( ) {", "LOG . debug ( STR_ + url ) ;", "return url != null && ! url . is Empty ( ) ; }"]}
{"ids": "74438", "code": ["public boolean make Backup File ( String directory , File file ) {", "if ( file == null ) {", "log . info ( STR_ ) ; }", "else if ( file . can Write ( ) ) {", "String backup Full Name = directory + File . separator + create File Name With Date ( file . get Name ( ) ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + backup Full Name ) ; }", "File backup File = find File ( backup Full Name ) ;", "if ( backup File != null ) {", "if ( backup File . delete ( ) ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + backup Full Name ) ; } } }", "else {", "backup File = new File ( backup Full Name ) ; }", "File parent Dir = backup File . get Parent File ( ) ;", "if ( ! parent Dir . exists ( ) ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + parent Dir . get Name ( ) ) ; }", "if ( ! parent Dir . mkdirs ( ) ) {", "log . error ( STR_ ) ;", "return false ; } }", "if ( file . rename To ( new File ( backup Full Name ) ) ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + backup Full Name ) ; } }", "else {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + backup Full Name ) ; }", "return false ; } }", "return true ; }"]}
{"ids": "19879", "code": ["public void remove Storage ( ) throws Backup Exception {", "logger . debug ( STR_ + data Dir Spec . get Absolute Path ( ) ) ;", "process Helper . exec ( STR_ , rm Cmd ) ; }"]}
{"ids": "54756", "code": ["private void append Container Config ( Docker Slave Template slave Template , Create Container Cmd container Config ) {", "Map < String , String > labels = container Config . get Labels ( ) ;", "if ( labels == null ) {", "labels = new Hash Map < > ( ) ; }", "labels . put ( DOCKER CLOUD LABEL , get Display Name ( ) ) ;", "labels . put ( DOCKER TEMPLATE LABEL , slave Template . get Id ( ) ) ;", "container Config . with Labels ( labels ) ; }"]}
{"ids": "15002", "code": ["public void delete Users ( Set users ) throws AM Exception , SSO Exception {", "Iterator iter = users . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String user DN = ( String ) iter . next ( ) ;", "AM User user = new AM User Impl ( super . token , user DN ) ;", "user . delete ( ) ; } }"]}
{"ids": "71977", "code": ["@ Override public void start Element ( String uri , String local Name , String q Name , Attributes attributes ) throws SAX Exception {", "if ( request ID == null && local Name . equals ( STR_ ) ) {", "request ID = attributes . get Value ( STR_ ) ; }", "super . start Element ( uri , local Name , q Name , attributes ) ; }"]}
{"ids": "17048", "code": ["public Storage ( ) {", "this ( new File ( get Temporary Storage Directory String ( ) ) ) ; }"]}
{"ids": "36207", "code": ["public void add Breakpoint Listener ( final Breakpoint Listener listener ) {", "breakpoint Listeners . add ( listener ) ; }"]}
{"ids": "47738", "code": ["public void update ( Graphics g ) {", "if ( is Showing ( ) ) {", "if ( ! ( peer instanceof Lightweight Peer ) ) {", "g . clear Rect ( NUM_ , NUM_ , width , height ) ; }", "paint ( g ) ; } }"]}
{"ids": "6348", "code": ["public static void print Stack Trace ( Throwable e ) {", "try {", "Debug . print Stack Trace ( e ) ; }", "catch ( Throwable f ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "85466", "code": ["@ Override public Void visit Type ( Type Element e , Void p ) {", "scan ( e . get Type Parameters ( ) , p ) ;", "check Camel Case ( e , true ) ;", "super . visit Type ( e , p ) ;", "return null ; }"]}
{"ids": "80407", "code": ["public Block ( boolean multi Push ) {", "this ( multi Push , STR_ , null , Arrays . as List ( STR_ , STR_ ) ) ; }"]}
{"ids": "38126", "code": ["private double Poisson ( double x ) {", "return Math . exp ( - m Lambda + ( x * Math . log ( m Lambda ) ) - log Fac ( x ) ) ; }"]}
{"ids": "11778", "code": ["protected Expression find Expression ( String source ) {", "if ( source != null && source . length ( ) > NUM_ ) {", "source = source . trim ( ) ;", "if ( source . length ( ) == NUM_ ) {", "return null ; }", "String left Side = source ;", "String right Side = null ;", "Connector op = find Op ( left Side ) ;", "if ( op != null ) {", "right Side = op . get Right Side ( left Side ) ;", "left Side = left Side . substring ( NUM_ , op . source Loc ) ;", "Expression left Expression = find Expression ( left Side ) ;", "Expression right Expression = find Expression ( right Side ) ;", "if ( left Expression != null ) {", "op . add Expr ( left Expression ) ; }", "if ( right Expression != null ) {", "op . add Expr ( right Expression ) ; }", "return op ; }", "op = find Mini Op ( left Side ) ;", "if ( op != null ) {", "right Side = op . get Right Side ( left Side ) ;", "left Side = left Side . substring ( NUM_ , op . source Loc ) ;", "Expression left Expression = find Expression ( left Side ) ;", "Expression right Expression = find Expression ( right Side ) ;", "if ( left Expression != null ) {", "op . add Expr ( left Expression ) ; }", "if ( right Expression != null ) {", "op . add Expr ( right Expression ) ; }", "return op ; }", "if ( logger . is Loggable ( Level . FINER ) ) {", "logger . finer ( STR_ + source ) ; }", "return find Math Op ( source ) ; }", "return null ; }"]}
{"ids": "190", "code": ["void put Channel ( final Stored Client Channel channel ) {", "put Channel ( channel , true ) ; }"]}
{"ids": "83759", "code": ["@ Suppress Warnings ( STR_ ) public static void pipe Input To Output Stream ( Input Stream in , File file Out , boolean ignore Errors ) throws IO Exception {", "if ( file Out == null ) {", "logger . error ( STR_ ) ;", "if ( ! ignore Errors ) {", "throw new IO Exception ( STR_ ) ; } }", "else {", "File parent = file Out . get Parent File ( ) ;", "if ( parent != null && ! parent . exists ( ) ) {", "parent . mkdirs ( ) ; }", "Output Stream file Stream = null ;", "try {", "file Stream = new File Output Stream ( file Out ) ;", "pipe Input To Output Stream ( in , file Stream , true , ignore Errors ) ; }", "catch ( IO Exception e ) {", "if ( file Stream != null ) {", "try {", "file Stream . close ( ) ; }", "catch ( IO Exception ex ) {", "logger . error ( STR_ , ex . get Message ( ) ) ; } }", "if ( ! ignore Errors ) {", "throw e ; } } } }"]}
{"ids": "70955", "code": ["public boolean thread Safe Timeout ( long delay Time , Time Unit unit , Action 0 action ) {", "boolean scheduled = true ;", "Thread current Thread = Thread . current Thread ( ) ;", "if ( current Thread . equals ( duty Thread ) ) {", "timer Wheel . new Timeout ( delay Time , unit , null ) ; }", "else {", "scheduled = actions . offer ( null ) ; }", "return scheduled ; }"]}
{"ids": "82169", "code": ["void add Attribute Selection ( String exp ) {", "int index = exp . index Of ( STR_ ) ;", "String value = null ;", "int constraint = Att String . EQUALS ;", "if ( index != - NUM_ ) {", "if ( index == NUM_ ) {", "set Tag Id ( TAG CSS ILLEGAL SELECTOR ) ;", "return ; }", "int op Index = index ;", "char c = exp . char At ( index - NUM_ ) ;", "if ( c == STR_ ) {", "constraint = Att String . CONTAINS WORD ;", "op Index -- ; }", "else if ( c == STR_ ) {", "constraint = Att String . BEGINS WITH ;", "op Index -- ; }", "value = exp . substring ( index + NUM_ ) ;", "if ( ( ( value . starts With ( STR_ ) ) && ( value . ends With ( STR_ ) ) ) || ( ( value . starts With ( STR_ ) ) && ( value . ends With ( STR_ ) ) ) ) {", "value = value . substring ( NUM_ , value . length ( ) - NUM_ ) ; }", "exp = exp . substring ( NUM_ , op Index ) ; }", "if ( attribute Selections == null ) {", "attribute Selections = new Vector ( ) ; }", "attribute Selections . add Element ( new Att String ( exp , constraint , value ) ) ; }"]}
{"ids": "61981", "code": ["public Value sample ( ) {", "int index = sampler . next Int ( action Values . size ( ) ) ;", "if ( action Values As Array == null ) {", "action Values As Array = action Values . to Array ( new Value [ action Values . size ( ) ] ) ; }", "return action Values As Array [ index ] ; }"]}
{"ids": "30973", "code": ["@ Override public void channel Closed ( Channel Handler Context channel Handler Context , Channel State Event channel State Event ) throws Exception {", "curr conns . decrement And Get ( ) ;", "channel Group . remove ( channel Handler Context . get Channel ( ) ) ; }"]}
{"ids": "74950", "code": ["private static void configure Head Less Simulation ( ) {", "System . set Property ( STR_ , STR_ ) ;", "GAMA . set Head Less Mode ( ) ; }"]}
{"ids": "40614", "code": ["public byte [ ] remove ( Queue Event event ) throws Keeper Exception , Interrupted Exception {", "Timer Context time = stats . time ( dir + STR_ ) ;", "try {", "String path = event . get Id ( ) ;", "String response Path = dir + STR_ + response prefix + path . substring ( path . last Index Of ( STR_ ) + NUM_ ) ;", "if ( zookeeper . exists ( response Path , true ) ) {", "zookeeper . set Data ( response Path , event . get Bytes ( ) , true ) ; }", "byte [ ] data = zookeeper . get Data ( path , null , null , true ) ;", "zookeeper . delete ( path , - NUM_ , true ) ;", "return data ; }", "finally {", "time . stop ( ) ; } }"]}
{"ids": "13709", "code": ["public Property XML Builder ( Service Schema service Schema , AM Model model , Set attribute Schemas ) throws SMS Exception , SSO Exception {", "this . model = model ;", "this . service Name = service Schema . get Service Name ( ) ;", "get Service Resource Bundle ( service Schema ) ;", "if ( service Bundle != null ) {", "map Type To Attribute Schema = new Hash Map ( attribute Schemas . size ( ) * NUM_ ) ;", "map Type To Attribute Schema . put ( NULL TYPE , attribute Schemas ) ; } }"]}
{"ids": "11045", "code": ["public boolean is ( String arg , boolean allow Abbr ) {", "if ( name . equals Ignore Case ( arg ) ) {", "return true ; }", "if ( allow Abbr && arg . length ( ) == NUM_ ) {", "if ( arg . char At ( NUM_ ) == c ) {", "return true ; } }", "return false ; }"]}
{"ids": "63000", "code": ["static public void add All ( List < String > list , String [ ] array ) {", "for ( String item : array ) list . add ( item ) ; }"]}
{"ids": "23480", "code": ["void remove ( Super Card Toast super Card Toast ) {", "m List . remove ( super Card Toast ) ; }"]}
{"ids": "14253", "code": ["private String partially Escape Assertion Value ( String assertion Value ) {", "String Builder sb = new String Builder ( assertion Value . length ( ) ) ;", "for ( int j = NUM_ ; j < assertion Value . length ( ) ; j ++ ) {", "char c = assertion Value . char At ( j ) ;", "if ( c == STR_ ) {", "sb . append ( c ) ; }", "else {", "sb . append ( Filter . escape Assertion Value ( String . value Of ( c ) ) ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "53644", "code": ["@ Override public void step ( Message Logger logger ) {", "try {", "add Agent ( ) ;", "env . step ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "64279", "code": ["public static Attack Status calculate Physical Status ( Creature attacker , Creature attacked , boolean is Main Hand ) {", "return calculate Physical Status ( attacker , attacked , is Main Hand , NUM_ , NUM_ , false , false ) ; }"]}
{"ids": "46212", "code": ["synchronized boolean release ( ) {", "d ( STR_ ) ;", "if ( state == BUSY ) {", "state = IDLE ;", "idle Since = System . current Time Millis ( ) ;", "return true ; }", "else {", "return false ; } }"]}
{"ids": "77467", "code": ["private void validate Replica Availability ( Slice slice , String shard , String collection Name , int count ) {", "if ( slice != null ) {", "Collection < Replica > all Replicas For Shard = slice . get Replicas ( ) ;", "if ( all Replicas For Shard == null ) {", "throw new Solr Exception ( Solr Exception . Error Code . BAD REQUEST , STR_ + shard + STR_ + collection Name ) ; }", "if ( all Replicas For Shard . size ( ) == NUM_ ) {", "throw new Solr Exception ( Solr Exception . Error Code . BAD REQUEST , STR_ + shard + STR_ + collection Name + STR_ ) ; }", "if ( all Replicas For Shard . size ( ) <= count ) {", "throw new Solr Exception ( Solr Exception . Error Code . BAD REQUEST , STR_ + shard + STR_ + collection Name + STR_ + count + STR_ + all Replicas For Shard . size ( ) + STR_ ) ; } } }"]}
{"ids": "50310", "code": ["default Class Declaration as Class ( ) {", "throw new Unsupported Operation Exception ( String . format ( STR_ , this ) ) ; }"]}
{"ids": "69424", "code": ["private static String partition Spec To Name ( Map < String , String > spec ) {", "String Builder sb = new String Builder ( ) ;", "for ( Map . Entry < String , String > entry : spec . entry Set ( ) ) {", "if ( sb . length ( ) != NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( entry . get Key ( ) + STR_ + entry . get Value ( ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "25755", "code": ["@ Modifying @ Transactional public void delete Cheque ( @ Path Variable Long cheque ID ) {", "cheque Repository . delete ( cheque ID ) ;", "photo Repository . delete By Cheque Id ( cheque ID . to String ( ) ) ; }"]}
{"ids": "52066", "code": ["public static synchronized double partial Correlation ( Tetrad Matrix submatrix ) {", "try {", "Tetrad Matrix inverse = submatrix . inverse ( ) ;", "double a = - NUM_ * inverse . get ( NUM_ , NUM_ ) ;", "double v 0 = inverse . get ( NUM_ , NUM_ ) ;", "double v 1 = inverse . get ( NUM_ , NUM_ ) ;", "double b = Math . sqrt ( v 0 * v 1 ) ;", "return a / b ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "return Double . Na N ; } }"]}
{"ids": "63697", "code": ["public void add Column ( String name , String expr ) {", "Expression ex = Expression Parser . parse ( expr ) ;", "Throwable t = Expression Parser . get Error ( ) ;", "if ( t != null ) {", "throw new Runtime Exception ( t ) ; }", "else {", "add Column ( name , ex ) ; } }"]}
{"ids": "32180", "code": ["public void add Put And Get Time Nanos ( long duration ) {", "put Time Nanos . add And Get ( duration ) ;", "get Time Nanos . add And Get ( duration ) ;", "if ( delegate != null ) delegate . add Put And Get Time Nanos ( duration ) ; }"]}
{"ids": "55198", "code": ["String parse ( String cell Str , int layout Constant ) {", "return cell Str . split ( Layout Constants . CELL PTRN ) [ layout Constant ] ; }"]}
{"ids": "74139", "code": ["public void pseudo Property Change ( String prop Name , Object old , Object n ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + get System Name ( ) + STR_ + prop Name + STR_ + n . to String ( ) ) ; }", "fire Property Change ( prop Name , old , n ) ; }"]}
{"ids": "70681", "code": ["public static String run Cmd ( File directory , List < String > cmd , String error Message ) throws Exception {", "Process Builder pb = new Process Builder ( cmd ) ;", "pb . directory ( directory ) ;", "pb . redirect Error Stream ( true ) ;", "Process p = pb . start ( ) ;", "String s ;", "String Builder sb = new String Builder ( ) ;", "Buffered Reader stdout = new Buffered Reader ( new Input Stream Reader ( p . get Input Stream ( ) ) ) ;", "while ( ( s = stdout . read Line ( ) ) != null ) {", "logger . info ( s ) ;", "sb . append ( s ) ;", "sb . append ( STR_ ) ; }", "String sbs = sb . to String ( ) ;", "int exit Value = p . wait For ( ) ;", "if ( exit Value != NUM_ ) throw new Exception ( error Message + STR_ + exit Value + STR_ + sbs ) ;", "return sbs ; }"]}
{"ids": "59892", "code": ["@ Override public Selectable Channel selectable Channel ( ) {", "return socket Channel ; }"]}
{"ids": "79176", "code": ["public static String from Tag ( Byte Array Tag tag ) {", "String Builder builder = new String Builder ( ) ;", "builder . append ( ARRAY START ) ;", "boolean start = true ;", "for ( byte value : tag . get Value ( ) ) {", "Byte Tag b = new Byte Tag ( value ) ;", "if ( start ) {", "start = false ; }", "else {", "builder . append ( ELEMENT SEPERATOR ) ; }", "builder . append ( from Tag ( b ) ) ; }", "builder . append ( ARRAY END ) ;", "return builder . to String ( ) ; }"]}
{"ids": "73807", "code": ["@ Override protected void add Chooser Filters ( J File Chooser chooser ) {", "javax . swing . filechooser . File Name Extension Filter filter = new javax . swing . filechooser . File Name Extension Filter ( Bundle . get Message ( STR_ , STR_ ) , STR_ , STR_ ) ;", "chooser . add Choosable File Filter ( new javax . swing . filechooser . File Name Extension Filter ( STR_ , STR_ ) ) ;", "chooser . add Choosable File Filter ( new javax . swing . filechooser . File Name Extension Filter ( STR_ , STR_ ) ) ;", "chooser . add Choosable File Filter ( filter ) ;", "chooser . set File Filter ( filter ) ; }"]}
{"ids": "49241", "code": ["private static byte [ ] Windows Reg Enum Value 1 ( int h Key , int value Index , int max Value Name Length ) {", "byte [ ] result = Windows Reg Enum Value ( h Key , value Index , max Value Name Length ) ;", "if ( result != null ) {", "return result ; }", "else {", "long sleep Time = INIT SLEEP TIME ;", "for ( int i = NUM_ ; i < MAX ATTEMPTS ; i ++ ) {", "try {", "Thread . sleep ( sleep Time ) ; }", "catch ( Interrupted Exception e ) {", "return result ; }", "sleep Time *= NUM_ ;", "result = Windows Reg Enum Value ( h Key , value Index , max Value Name Length ) ;", "if ( result != null ) {", "return result ; } } }", "return result ; }"]}
{"ids": "67649", "code": ["public static Date Time parse Rfc 822 ( String str ) throws Parse Exception {", "Date date ;", "synchronized ( date Time Format 822 ) {", "try {", "date = date Time Format 822 . parse ( str ) ; }", "catch ( java . text . Parse Exception e ) {", "throw new Parse Exception ( e ) ; } }", "return new Date Time ( date ) ; }"]}
{"ids": "44561", "code": ["public Model validate Model ( Dataset dataset , URI shapes Graph URI , Resource min Severity , boolean validate Shapes , Function < RDF Node , String > label Function , Progress Monitor monitor ) throws Interrupted Exception {", "if ( dataset . get Default Model ( ) == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Model shapes Model = dataset . get Named Model ( shapes Graph URI . to String ( ) ) ;", "if ( monitor != null ) {", "monitor . sub Task ( STR_ ) ; }", "List < Property > constraint Properties = SHACL Util . get All Constraint Properties ( validate Shapes ) ;", "Map < Resource , List < SH Constraint > > map = build Shape 2 Constraints Map ( shapes Model , dataset . get Default Model ( ) , constraint Properties , validate Shapes ) ;", "if ( monitor != null ) {", "monitor . sub Task ( STR_ ) ; }", "if ( monitor != null ) {", "monitor . begin Task ( STR_ + map . size ( ) + STR_ , map . size ( ) ) ; }", "Model results = Jena Util . create Memory Model ( ) ;", "results . set Ns Prefixes ( dataset . get Default Model ( ) ) ;", "for ( Resource shape : map . key Set ( ) ) {", "for ( SH Constraint constraint : map . get ( shape ) ) {", "validate Constraint For Shape ( dataset , shapes Graph URI , min Severity , constraint , shape , results , label Function , monitor ) ;", "if ( monitor != null ) {", "monitor . worked ( NUM_ ) ;", "if ( monitor . is Canceled ( ) ) {", "throw new Interrupted Exception ( ) ; } } } }", "return results ; }"]}
{"ids": "85129", "code": ["public Pdf Page add Annotation ( Pdf Annotation annotation ) {", "return add Annotation ( - NUM_ , annotation , true ) ; }"]}
{"ids": "14039", "code": ["public static String find Preferred IDP ( String realm , Http Servlet Request request ) {", "if ( request == null ) {", "return null ; }", "String succinct ID = request . get Parameter ( IFS Constants . PROVIDER ID KEY ) ;", "if ( ( succinct ID == null ) || succinct ID . length ( ) == NUM_ ) {", "debug . message ( STR_ ) ;", "return null ; }", "succinct ID = succinct ID . trim ( ) ;", "String preferred Succinct Id = null ;", "String Tokenizer st = new String Tokenizer ( succinct ID , STR_ ) ;", "while ( st . has More Tokens ( ) ) {", "preferred Succinct Id = st . next Token ( ) ;", "if ( ( preferred Succinct Id . length ( ) < NUM_ ) && st . has More Tokens ( ) ) {", "preferred Succinct Id = preferred Succinct Id + STR_ + st . next Token ( ) ; } }", "preferred Succinct Id = SAML Utils . byte Array To String ( Base 64 . decode ( preferred Succinct Id ) ) ;", "return get Provider ID From Succinct ID ( realm , preferred Succinct Id ) ; }"]}
{"ids": "21548", "code": ["private void check And Create Directory ( final String directory Name ) {", "try {", "final File dir = new File ( directory Name ) ;", "if ( ! dir . exists ( ) && dir . mkdirs ( ) ) {", "logger . debug ( STR_ ) ; } }", "catch ( Exception ex ) {", "logger . error ( STR_ , ex . get Message ( ) ) ; } }"]}
{"ids": "40727", "code": ["public int find Event Position Nearest Time ( Time time , long id ) {", "if ( m Row Info == null ) {", "return NUM_ ; }", "long millis = time . to Millis ( false ) ;", "long min Distance = Integer . MAX VALUE ;", "long id Found Min Distance = Integer . MAX VALUE ;", "int min Index = NUM_ ;", "int id Found Min Index = NUM_ ;", "int event In Time Index = - NUM_ ;", "int all Day Event In Time Index = - NUM_ ;", "int all Day Event Day = NUM_ ;", "int min Day = NUM_ ;", "boolean id Found = false ;", "int len = m Row Info . size ( ) ;", "for ( int index = NUM_ ; index < len ; index ++ ) {", "Row Info row = m Row Info . get ( index ) ;", "if ( row . m Type == TYPE DAY ) {", "continue ; }", "if ( row . m Event Id == id ) {", "if ( row . m Event Start Time Milli == millis ) {", "return index ; }", "long distance = Math . abs ( millis - row . m Event Start Time Milli ) ;", "if ( distance < id Found Min Distance ) {", "id Found Min Distance = distance ;", "id Found Min Index = index ; }", "id Found = true ; }", "if ( ! id Found ) {", "if ( millis >= row . m Event Start Time Milli && millis <= row . m Event End Time Milli ) {", "if ( row . m All Day ) {", "if ( all Day Event In Time Index == - NUM_ ) {", "all Day Event In Time Index = index ;", "all Day Event Day = row . m Day ; } }", "else if ( event In Time Index == - NUM_ ) {", "event In Time Index = index ; } }", "else if ( event In Time Index == - NUM_ ) {", "long distance = Math . abs ( millis - row . m Event Start Time Milli ) ;", "if ( distance < min Distance ) {", "min Distance = distance ;", "min Index = index ;", "min Day = row . m Day ; } } } }", "if ( id Found ) {", "return id Found Min Index ; }", "if ( event In Time Index != - NUM_ ) {", "return event In Time Index ; }", "else if ( all Day Event In Time Index != - NUM_ && min Day != all Day Event Day ) {", "return all Day Event In Time Index ; }", "return min Index ; }"]}
{"ids": "37334", "code": ["private static Translation Result extract Register ( final I Translation Environment environment , final long offset , final String sub Register ) throws Internal Translation Exception {", "final Array List < Reil Instruction > instructions = new Array List < Reil Instruction > ( ) ;", "final String parent Register = get Parent Register ( sub Register ) ;", "final Operand Size arch Size = environment . get Architecture Size ( ) ;", "if ( is Higher 8 Bit Register ( sub Register ) ) {", "final String mask Result = environment . get Next Variable String ( ) ;", "final String shift Result = environment . get Next Variable String ( ) ;", "instructions . add ( Reil Helpers . create And ( offset , arch Size , parent Register , Operand Size . WORD , STR_ , Operand Size . WORD , mask Result ) ) ;", "instructions . add ( Reil Helpers . create Bsh ( offset + NUM_ , Operand Size . WORD , mask Result , Operand Size . WORD , STR_ , Operand Size . BYTE , shift Result ) ) ;", "return new Translation Result ( shift Result , Operand Size . BYTE , Translation Result Type . REGISTER , null , instructions , offset ) ; }", "else {", "final Operand Size sub Register Size = get Register Size ( sub Register ) ;", "final String mask = String . value Of ( Translation Helpers . get All Bits Mask ( sub Register Size ) ) ;", "final String result = environment . get Next Variable String ( ) ;", "instructions . add ( Reil Helpers . create And ( offset , arch Size , parent Register , sub Register Size , mask , sub Register Size , result ) ) ;", "return new Translation Result ( result , sub Register Size , Translation Result Type . REGISTER , null , instructions , offset ) ; } }"]}
{"ids": "41943", "code": ["public Interceptor [ ] build Method Interceptors ( Method method ) {", "Interceptors before = method . get Annotation ( Interceptors . class ) ;", "return before != null ? create Interceptors ( before ) : NULL INTERCEPTOR ARRAY ; }"]}
{"ids": "22007", "code": ["private static void look For Changes ( Data Object left , Data Object right , Hash Map < String , Change > changes , Set < String > included , Set < String > excluded , Set < String > contained ) {", "Class ref Class = left . get Class ( ) ;", "Method [ ] methods = ref Class . get Methods ( ) ;", "for ( Method method : methods ) {", "boolean contain = false ;", "Name name Ann = method . get Annotation ( Name . class ) ;", "if ( name Ann == null ) {", "continue ; }", "String key = name Ann . value ( ) ;", "if ( contained != null && contained . contains ( key ) ) {", "contain = true ; }", "else if ( included != null && ! included . contains ( key ) ) {", "continue ; }", "if ( excluded . contains ( key ) ) {", "continue ; }", "Class type = method . get Return Type ( ) ;", "try {", "Object obja = method . invoke ( left ) ;", "Object objb = method . invoke ( right ) ;", "if ( type == String Set . class ) {", "if ( contain ) {", "analyze New String Set Contains Old String Set Values ( ( String Set ) obja , ( String Set ) objb , key , changes ) ; }", "else {", "analyze String Sets ( ( String Set ) obja , ( String Set ) objb , key , changes ) ; } }", "else if ( type == String Map . class ) {", "analyze String Maps ( ( String Map ) obja , ( String Map ) objb , key , changes ) ; }", "else if ( type == String Set Map . class ) {", "analyze String Set Maps ( ( String Set Map ) obja , ( String Set Map ) objb , key , changes ) ; }", "else {", "if ( ! is Equal ( obja , objb ) ) {", "Change change = new Change ( key , obja , objb , name Ann . value ( ) ) ;", "changes . put ( key , change ) ; } } }", "catch ( Illegal Access Exception ex ) {", "throw new Service Code Exception ( Service Code . UNFORSEEN ERROR , ex , ex . get Message ( ) , new String [ ] { } ) ; }", "catch ( Invocation Target Exception ex ) {", "throw new Service Code Exception ( Service Code . UNFORSEEN ERROR , ex , ex . get Message ( ) , new String [ ] { } ) ; } } }"]}
{"ids": "42349", "code": ["static void remove All Phis ( IR ir ) {", "for ( Instruction s = ir . first Instruction In Code Order ( ) , sentinel = ir . last Instruction In Code Order ( ) , next Instr = null ; s != sentinel ; s = next Instr ) {", "next Instr = s . next Instruction In Code Order ( ) ;", "if ( Phi . conforms ( s ) ) s . remove ( ) ; } }"]}
{"ids": "76217", "code": ["private Map < Test Case , Set < Test Fitness Function > > initialize Coverage Map From Tests ( List < Test Case > tests ) {", "Map < Test Case , Set < Test Fitness Function > > test To Goals = new Linked Hash Map < > ( ) ;", "for ( Test Case test : tests ) {", "test To Goals . put ( test , filter Supported Goals ( new Linked Hash Set < > ( test . get Covered Goals ( ) ) ) ) ; }", "return test To Goals ; }"]}
{"ids": "41944", "code": ["public Interceptor [ ] build Route Interceptors ( Interceptor [ ] default Inters , Interceptor [ ] resource Inters , Class < ? extends Resource > resource Class , Interceptor [ ] method Inters , Method method ) {", "List < Interceptor > all Inters = new Array List < Interceptor > ( ) ;", "for ( Interceptor default Inter : default Inters ) {", "all Inters . add ( default Inter ) ; }", "for ( Interceptor resource Inter : resource Inters ) {", "all Inters . add ( resource Inter ) ; }", "for ( Interceptor method Inter : method Inters ) {", "all Inters . add ( method Inter ) ; }", "Class < ? extends Interceptor > [ ] resource Clears = get Resource Clears ( resource Class ) ;", "Class < ? extends Interceptor > [ ] method Clears = get Method Clears ( method ) ;", "if ( ( resource Clears != null && resource Clears . length > NUM_ ) || ( method Clears != null && method Clears . length > NUM_ ) ) {", "for ( int i = NUM_ ; i < all Inters . size ( ) ; i ++ ) {", "i = clear Interceptor ( all Inters , resource Clears , i ) ;", "i = clear Interceptor ( all Inters , method Clears , i ) ; } }", "return all Inters . to Array ( new Interceptor [ all Inters . size ( ) ] ) ; }"]}
{"ids": "53147", "code": ["public static double quantile ( double p , double k , double theta , double shift ) {", "return Math . exp ( Gamma Distribution . quantile ( p , k , theta ) ) + shift ; }"]}
{"ids": "48719", "code": ["final void put Byte ( int offset , byte value ) {", "unsafe . put Byte ( offset + address , value ) ; }"]}
{"ids": "56263", "code": ["public final void add Validation Error ( String error ) {", "validation Errors . add ( error ) ; }"]}
{"ids": "24484", "code": ["public static void parse Option Setting To ( String option Setting , Map < String , String > dst ) {", "int eq Index = option Setting . index Of ( STR_ ) ;", "if ( eq Index == - NUM_ ) {", "throw new Internal Error ( STR_ + option Setting ) ; }", "dst . put ( option Setting . substring ( NUM_ , eq Index ) , option Setting . substring ( eq Index + NUM_ ) ) ; }"]}
{"ids": "16023", "code": ["public Big Integer generate Client Credentials ( byte [ ] salt , byte [ ] identity , byte [ ] password ) {", "this . x = SRP 6 Util . calculate X ( digest , N , salt , identity , password ) ;", "this . a = select Private Value ( ) ;", "this . A = g . mod Pow ( a , N ) ;", "return A ; }"]}
{"ids": "77464", "code": ["public void build ( Solr Core core , Solr Index Searcher searcher ) throws IO Exception {", "LOG . info ( STR_ + name + STR_ ) ;", "dictionary = dictionary Factory . create ( core , searcher ) ;", "lookup . build ( dictionary ) ;", "if ( store Dir != null ) {", "File target = get Store File ( ) ;", "if ( ! lookup . store ( new File Output Stream ( target ) ) ) {", "LOG . error ( STR_ ) ; }", "else {", "LOG . info ( STR_ + target . get Absolute Path ( ) ) ; } } }"]}
{"ids": "81237", "code": ["public void start ( String json ) {", "guided Tour Steps . clear ( ) ;", "Guided Tour Configuration configuration = dto Factory . create Dto From Json ( json , Guided Tour Configuration . class ) ;", "log . set Debug Mode ( configuration . get Debug Mode ( ) ) ;", "this . guided Tour Steps = configuration . get Steps ( ) ;", "this . tour Name = configuration . get Name ( ) ;", "if ( this . tour Name == null || tour Name . is Empty ( ) ) {", "tour Name = STR_ ; }", "this . has Welcome Step = configuration . get Has Welcome Step ( ) ;", "start Tour ( ) ; }"]}
{"ids": "44436", "code": ["public static Maildir Message Name create Unique Name ( Maildir Folder parent Folder , long size ) {", "String timestamp = String . value Of ( System . current Time Millis ( ) ) ;", "timestamp = timestamp . substring ( NUM_ , timestamp . length ( ) - NUM_ ) ;", "String Builder unique Part = new String Builder ( ) ;", "unique Part . append ( Integer . to Hex String ( random . next Int ( ) ) ) ;", "unique Part . append ( timestamp . substring ( timestamp . length ( ) - NUM_ ) ) ;", "unique Part . append ( process Name ) ;", "unique Part . append ( get Next Delivery Number ( ) ) ;", "String size String = STR_ + String . value Of ( size ) ;", "String full Name = timestamp + STR_ + unique Part . to String ( ) + STR_ + current Hostname + size String ;", "Maildir Message Name unique Name = new Maildir Message Name ( parent Folder , full Name ) ;", "unique Name . timestamp = timestamp ;", "unique Name . unique String = unique Part . to String ( ) ;", "unique Name . hostname = current Hostname ;", "unique Name . size String = size String ;", "unique Name . is Split = true ;", "unique Name . size = size ;", "return unique Name ; }"]}
{"ids": "42296", "code": ["private void adjust BC Index ( Instruction barrier ) {", "Normal Method source = barrier . position ( ) . method ;", "if ( source . is For Osr Specialization ( ) ) {", "barrier . adjust Bytecode Index ( - source . get Osr Prologue Length ( ) ) ; } }"]}
{"ids": "86911", "code": ["public static long [ ] interpose ( long [ ] vector , int vector Len , int offset , int len ) {", "long [ ] updated = create ( vector Len + len ) ;", "int idx = offset > > NUM_ ;", "System . arraycopy ( vector , NUM_ , updated , NUM_ , idx ) ;", "if ( idx < vector . length ) {", "int delta = offset & NUM_ ;", "updated [ idx ] |= vector [ idx ] & mask Below ( delta ) ; }", "copy ( vector , offset , updated , offset + len , vector Len - offset ) ;", "return updated ; }"]}
{"ids": "26007", "code": ["Task < Void > synchronize All Auth Data Async ( ) {", "Map < String , Map < String , String > > auth Data ;", "synchronized ( mutex ) {", "if ( ! is Current User ( ) ) {", "return Task . for Result ( null ) ; }", "auth Data = get Auth Data ( ) ; }", "List < Task < Void > > tasks = new Array List < > ( auth Data . size ( ) ) ;", "for ( String auth Type : auth Data . key Set ( ) ) {", "tasks . add ( synchronize Auth Data Async ( auth Type ) ) ; }", "return Task . when All ( tasks ) ; }"]}
{"ids": "45902", "code": ["public static Element create Element In Encryption Space ( Document doc , String element Name ) {", "if ( doc == null ) {", "throw new Runtime Exception ( STR_ ) ; }", "if ( ( xenc Prefix == null ) || ( xenc Prefix . length ( ) == NUM_ ) ) {", "return doc . create Element NS ( Encryption Constants . Encryption Spec NS , element Name ) ; }", "return doc . create Element NS ( Encryption Constants . Encryption Spec NS , xenc Prefix + STR_ + element Name ) ; }"]}
{"ids": "68787", "code": ["public void add Commands ( PDF Page page , Matrix extra ) {", "synchronized ( commands ) {", "add Push ( ) ;", "if ( extra != null ) {", "add Xform ( extra ) ; }", "commands . add All ( page . get Commands ( ) ) ;", "add Pop ( ) ; }", "update Images ( ) ; }"]}
{"ids": "50483", "code": ["public void add Last ( Statement Sequence statements ) {", "if ( statements != null ) {", "sequence . add All ( statements . sequence ) ; } }"]}
{"ids": "41006", "code": ["private void notify Activity State Changed ( Bundle bundle ) {", "if ( ! m Records . is Empty ( ) ) {", "Log . d ( TAG , STR_ + m Records . size ( ) ) ;", "synchronized ( m Records ) {", "Iterator < Record > iterator = m Records . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "Record record = ( Record ) iterator . next ( ) ;", "Fm Radio Listener listener = record . m Callback ;", "if ( listener == null ) {", "iterator . remove ( ) ;", "return ; }", "listener . on Call Back ( bundle ) ; } } } }"]}
{"ids": "68686", "code": ["public double elasticity ( final double spot ) {", "final double val = value ( ) ;", "final double del = delta ( spot ) ;", "if ( val > Constants . QL EPSILON ) return del / val * spot ;", "else if ( Math . abs ( del ) < Constants . QL EPSILON ) return NUM_ ;", "else if ( del > NUM_ ) return Double . MAX VALUE ;", "else return Double . MIN VALUE ; }"]}
{"ids": "74063", "code": ["public static float round Decimal ( float value ) {", "return round Decimal ( value , Math . log 10 ( INT PRECISION ) ) ; }"]}
{"ids": "81227", "code": ["@ Assisted Inject public Runner Impl ( @ Not Null Runner Localization Constant locale , @ Not Null Runner Counter runner Counter , @ Not Null Get Environments Util util , @ Not Null @ Assisted Run Options run Options , @ Not Null @ Assisted Scope environment Scope , @ Nullable @ Assisted String environment Name ) {", "this . run Options = run Options ;", "this . ram = run Options . get Memory Size ( ) ;", "this . title = RUNNER NAME + runner Counter . get Runner Number ( ) + ( environment Name == null ? STR_ : STR_ + get Correct Name ( environment Name ) ) ;", "this . active Tab = locale . runner Tab Console ( ) ;", "this . status = IN QUEUE ;", "this . scope = environment Scope ;", "creation Time = System . current Time Millis ( ) ;", "String environment Id = run Options . get Environment Id ( ) ;", "if ( environment Id == null || environment Id . starts With ( STR_ ) ) {", "this . type = util . get Type ( ) ; }", "else {", "this . type = util . get Correct Category Name ( run Options . get Environment Id ( ) ) ; }", "if ( environment Id != null ) {", "run Options . set Environment Id ( environment Id ) ; } }"]}
{"ids": "36272", "code": ["private String date To String ( Date input ) {", "if ( input == null ) {", "return null ; }", "else {", "return input . to String ( ) ; } }"]}
{"ids": "16560", "code": ["private static int component Size ( Component component , Form Spec form Spec , int cell Size , Form Layout . Measure min Measure , Form Layout . Measure pref Measure ) {", "if ( form Spec == null ) {", "return pref Measure . size Of ( component ) ; }", "else if ( form Spec . get Size ( ) == Sizes . MINIMUM ) {", "return min Measure . size Of ( component ) ; }", "else if ( form Spec . get Size ( ) == Sizes . PREFERRED ) {", "return pref Measure . size Of ( component ) ; }", "else {", "return Math . min ( cell Size , pref Measure . size Of ( component ) ) ; } }"]}
{"ids": "76915", "code": ["protected synchronized void start ( long cur Primary Gen ) throws IO Exception {", "if ( state . equals ( STR_ ) == false ) {", "throw new Illegal State Exception ( STR_ ) ; }", "message ( STR_ ) ;", "try {", "String segments File Name = Segment Infos . get Last Commit Segments File Name ( dir ) ;", "long max Pending Gen = - NUM_ ;", "for ( String file Name : dir . list All ( ) ) {", "if ( file Name . starts With ( Index File Names . PENDING SEGMENTS ) ) {", "long gen = Long . parse Long ( file Name . substring ( Index File Names . PENDING SEGMENTS . length ( ) + NUM_ ) , Character . MAX RADIX ) ;", "if ( gen > max Pending Gen ) {", "max Pending Gen = gen ; } } }", "Segment Infos infos ;", "if ( segments File Name == null ) {", "infos = new Segment Infos ( ) ;", "message ( STR_ ) ; }", "else {", "message ( STR_ + segments File Name ) ;", "infos = Segment Infos . read Commit ( dir , segments File Name ) ;", "message ( STR_ + infos . to String ( ) + STR_ + infos . get Version ( ) ) ;", "Collection < String > index Files = infos . files ( false ) ;", "last Commit Files . add ( segments File Name ) ;", "last Commit Files . add All ( index Files ) ;", "deleter . inc Ref ( last Commit Files ) ;", "last NRT Files . add All ( index Files ) ;", "deleter . inc Ref ( last NRT Files ) ;", "message ( STR_ + last Commit Files ) ;", "message ( STR_ + last NRT Files ) ; }", "message ( STR_ + Arrays . to String ( dir . list All ( ) ) ) ;", "deleter . delete Unknown Files ( segments File Name ) ;", "message ( STR_ + Arrays . to String ( dir . list All ( ) ) ) ;", "String s = infos . get User Data ( ) . get ( PRIMARY GEN KEY ) ;", "long my Primary Gen ;", "if ( s == null ) {", "assert infos . size ( ) == NUM_ ;", "my Primary Gen = - NUM_ ; }", "else {", "my Primary Gen = Long . parse Long ( s ) ; }", "message ( STR_ + my Primary Gen ) ;", "boolean do Commit ;", "if ( infos . size ( ) > NUM_ && my Primary Gen != - NUM_ && my Primary Gen != cur Primary Gen ) {", "assert my Primary Gen < cur Primary Gen ;", "final long init Sync Start NS = System . nano Time ( ) ;", "message ( STR_ + my Primary Gen + STR_ + cur Primary Gen + STR_ ) ;", "Copy Job job = null ;", "message ( STR_ + segments File Name ) ;", "assert deleter . get Ref Count ( segments File Name ) == NUM_ ;", "deleter . dec Ref ( Collections . singleton ( segments File Name ) ) ;", "if ( dir instanceof FS Directory && ( ( FS Directory ) dir ) . check Pending Deletions ( ) ) {", "throw new Runtime Exception ( STR_ + segments File Name + STR_ ) ; }", "boolean did Remove = last Commit Files . remove ( segments File Name ) ;", "assert did Remove ;", "while ( true ) {", "job = new Copy Job ( STR_ + name ( ) + STR_ + infos . get Version ( ) , null , null , true , null ) ;", "job . start ( ) ;", "message ( STR_ + job . get Copy State ( ) . version ) ;", "try {", "job . run Blocking ( ) ;", "job . finish ( ) ;", "break ; }", "catch ( IO Exception ioe ) {", "job . cancel ( STR_ , ioe ) ;", "if ( ioe . get Message ( ) . contains ( STR_ ) ) {", "message ( STR_ + ioe + STR_ ) ; }", "else {", "throw ioe ; } } }", "last Primary Gen = job . get Copy State ( ) . primary Gen ;", "byte [ ] infos Bytes = job . get Copy State ( ) . infos Bytes ;", "Segment Infos sync Infos = Segment Infos . read Commit ( dir , new Buffered Checksum Index Input ( new Byte Array Index Input ( STR_ , job . get Copy State ( ) . infos Bytes ) ) , job . get Copy State ( ) . gen ) ;", "sync Infos . update Generation ( infos ) ;", "infos = sync Infos ;", "assert infos . get Version ( ) == job . get Copy State ( ) . version ;", "message ( STR_ + infos . get Version ( ) + STR_ + infos . to String ( ) ) ;", "message ( STR_ + job . get File Names ( ) ) ;", "deleter . inc Ref ( job . get File Names ( ) ) ;", "message ( STR_ + last NRT Files ) ;", "deleter . dec Ref ( last NRT Files ) ;", "last NRT Files . clear ( ) ;", "last NRT Files . add All ( job . get File Names ( ) ) ;", "message ( STR_ + last NRT Files ) ;", "last File Meta Data = job . get Copy State ( ) . files ;", "message ( String . format ( Locale . ROOT , STR_ , id , ( System . nano Time ( ) - init Sync Start NS ) / NUM_ , bytes To String ( job . get Total Bytes Copied ( ) ) , job . get Copy State ( ) . version ) ) ;", "do Commit = true ; }", "else {", "do Commit = false ;", "last Primary Gen = cur Primary Gen ;", "message ( STR_ ) ; }", "if ( infos . get Generation ( ) < max Pending Gen ) {", "message ( STR_ + infos . get Generation ( ) + STR_ + max Pending Gen ) ;", "infos . set Next Write Generation ( max Pending Gen ) ; }", "send New Replica ( ) ;", "mgr = new Segment Infos Searcher Manager ( dir , this , infos , searcher Factory ) ;", "Index Searcher searcher = mgr . acquire ( ) ;", "try {", "int hit Count = searcher . count ( new Term Query ( new Term ( STR_ , STR_ ) ) ) ;", "message ( STR_ + hit Count + STR_ + ( ( Directory Reader ) searcher . get Index Reader ( ) ) . get Version ( ) ) ; }", "finally {", "mgr . release ( searcher ) ; }", "if ( do Commit ) {", "commit ( ) ; }", "message ( STR_ ) ;", "state = STR_ ; }", "catch ( Throwable t ) {", "if ( t . get Message ( ) . starts With ( STR_ ) == false ) {", "message ( STR_ ) ;", "t . print Stack Trace ( print Stream ) ; }", "else {", "dir . close ( ) ; }", "IO Utils . re Throw ( t ) ; } }"]}
{"ids": "44735", "code": ["public static boolean is Same Element Type ( AST Node node 1 , AST Node node 2 ) {", "return node 1 != null && node 2 != null && node 1 . get Element Type ( ) == node 1 . get Element Type ( ) ; }"]}
{"ids": "21153", "code": ["@ Override public Log Message read Next Log Message ( ) {", "try {", "if ( reader == null ) {", "return null ; }", "while ( true ) {", "String line = reader . read Line ( ) ;", "if ( line == null ) {", "close ( ) ;", "if ( current Log != null && match Regex ( current Log ) ) {", "increment Log Count ( current Log ) ;", "return current Log ; }", "return null ; }", "file Line Number ++ ;", "Log Message next Log = null ;", "if ( parser != null ) {", "next Log = parser . parse Line ( line , request ) ; }", "else {", "for ( Log Parser parser : parser Table ) {", "next Log = parser . parse Line ( line , request ) ;", "if ( ! next Log . is Continuation ( ) ) {", "this . parser = parser ;", "break ; } }", "if ( next Log == null || next Log . is Continuation ( ) ) {", "status . append Info ( this . file Path , file Line Number ) ;", "continue ; } }", "if ( next Log . is Continuation ( ) ) {", "if ( current Log != null ) {", "current Log . append Message ( Log Util . string To Bytes ( line ) ) ; } }", "else if ( next Log . is Rejected ( ) ) {", "if ( current Log != null ) {", "Log Message returned Log = current Log ;", "current Log = null ;", "if ( match Regex ( returned Log ) ) {", "increment Log Count ( returned Log ) ;", "return returned Log ; } } }", "else if ( next Log . is Rejected Last ( ) ) {", "if ( current Log != null ) {", "Log Message returned Log = current Log ;", "current Log = null ;", "if ( match Regex ( returned Log ) ) {", "increment Log Count ( returned Log ) ;", "return returned Log ; } }", "break ; }", "else {", "if ( current Log != null ) {", "Log Message returned Log = current Log ;", "current Log = next Log ;", "if ( returned Log . is Header ( ) && current Log . is Header ( ) ) {", "continue ; }", "if ( match Regex ( returned Log ) ) {", "increment Log Count ( returned Log ) ;", "return returned Log ; } }", "else {", "current Log = next Log ; } } } }", "catch ( IO Exception e ) {", "status . append Err File Name ( file Path ) ; }", "return null ; }"]}
{"ids": "12615", "code": ["private void load Binary ( Data Input Stream is ) throws IO Exception {", "if ( is . read Int ( ) != MAGIC ) {", "throw new Error ( STR_ ) ; }", "if ( is . read Int ( ) != VERSION ) {", "throw new Error ( STR_ ) ; }", "continuity Weight = is . read Int ( ) ;", "optimal Coupling = is . read Int ( ) ;", "extend Selections = is . read Int ( ) ;", "join Method = is . read Int ( ) ;", "join Weight Shift = is . read Int ( ) ;", "int weight Length = is . read Int ( ) ;", "join Weights = new int [ weight Length ] ;", "for ( int i = NUM_ ; i < join Weights . length ; i ++ ) {", "join Weights [ i ] = is . read Int ( ) ; }", "int units Length = is . read Int ( ) ;", "units = new Database Cluster Unit [ units Length ] ;", "for ( int i = NUM_ ; i < units . length ; i ++ ) {", "units [ i ] = new Database Cluster Unit ( is ) ; }", "int unit Types Length = is . read Int ( ) ;", "unit Types = new Unit Type [ unit Types Length ] ;", "for ( int i = NUM_ ; i < unit Types . length ; i ++ ) {", "unit Types [ i ] = new Unit Type ( is ) ; }", "sts = new Sample Set ( is ) ;", "mcep = new Sample Set ( is ) ;", "int num Carts = is . read Int ( ) ;", "cart Map = new Hash Map ( ) ;", "for ( int i = NUM_ ; i < num Carts ; i ++ ) {", "String name = Utilities . get String ( is ) ;", "CART cart = CART Impl . load Binary ( is ) ;", "cart Map . put ( name , cart ) ;", "if ( default Cart == null ) {", "default Cart = cart ; } } }"]}
{"ids": "14057", "code": ["protected boolean is IDP Proxy Enabled ( FS Authn Request authn Request ) throws FS Exception {", "if ( authn Request . get Minor Version ( ) != IFS Constants . FF 12 PROTOCOL MINOR VERSION ) {", "return false ; }", "FS Scoping scoping = authn Request . get Scoping ( ) ;", "if ( scoping != null && scoping . get Proxy Count ( ) == NUM_ ) {", "return false ; }", "String enabled String = IDFF Meta Utils . get First Attribute Value From Config ( sp Config , IFS Constants . ENABLE IDP PROXY ) ;", "if ( enabled String != null && enabled String . equals Ignore Case ( STR_ ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "67326", "code": ["private void compile Prolog ( Object Id prolog , File temp Dir ) throws IO Exception , Compile Exception {", "File temp Rules = copy To Temp File ( prolog , temp Dir ) ;", "try {", "Compiler comp = new Compiler ( ) ;", "comp . prolog To Java Source ( temp Rules . get Path ( ) , temp Dir . get Path ( ) ) ; }", "finally {", "temp Rules . delete ( ) ; } }"]}
{"ids": "40606", "code": ["public void build ( Solr Core core , Solr Index Searcher searcher ) throws IO Exception {", "LOG . info ( STR_ ) ;", "dictionary = dictionary Factory . create ( core , searcher ) ;", "lookup . build ( dictionary ) ;", "if ( store Dir != null ) {", "File target = new File ( store Dir , factory . store File Name ( ) ) ;", "if ( ! lookup . store ( new File Output Stream ( target ) ) ) {", "LOG . error ( STR_ ) ; }", "else {", "LOG . info ( STR_ + target . get Absolute Path ( ) ) ; } } }"]}
{"ids": "59912", "code": ["public void create Disk Async ( final String project Id , final Disk Create Spec disk Create Spec , final Future Callback < Task > response Callback ) throws IO Exception {", "final String path = String . format ( STR_ , get Base Path ( ) , project Id ) ;", "create Object Async ( path , serialize Object As Json ( disk Create Spec ) , response Callback ) ; }"]}
{"ids": "4715", "code": ["@ Override public boolean domain Match ( final String host , final String domain ) {", "return host . ends With ( domain ) ; }"]}
{"ids": "46826", "code": ["public synchronized void disable Attribute ( String name ) {", "enabled Attributes . remove Element ( name ) ; }"]}
{"ids": "46920", "code": ["public void push ( final Handle handle ) {", "mv . visit Ldc Insn ( handle ) ; }"]}
{"ids": "25730", "code": ["public static I Fits Header lookup ( String key ) {", "int key Length = key . length ( ) ;", "if ( key Length > NUM_ && Character . is Digit ( key . char At ( key Length - NUM_ ) ) ) {", "String Builder builder = new String Builder ( ) ;", "for ( int index = NUM_ ; index < key Length ; index ++ ) {", "char character = key . char At ( index ) ;", "if ( Character . is Digit ( character ) ) {", "if ( builder . char At ( builder . length ( ) - NUM_ ) != STR_ ) {", "builder . append ( STR_ ) ; } }", "else {", "builder . append ( character ) ; } }", "return STANDARD KEYS . get ( builder . to String ( ) ) ; }", "return STANDARD KEYS . get ( key ) ; }"]}
{"ids": "12306", "code": ["private static int decode Octets ( int i , Byte Buffer bb , String Builder sb ) {", "if ( bb . limit ( ) == NUM_ && ( bb . get ( NUM_ ) & NUM_ ) < NUM_ ) {", "sb . append ( ( char ) bb . get ( NUM_ ) ) ;", "return i + NUM_ ; }", "else {", "Char Buffer cb = UTF 8 CHARSET . decode ( bb ) ;", "sb . append ( cb . to String ( ) ) ;", "return i + bb . limit ( ) * NUM_ - NUM_ ; } }"]}
{"ids": "23238", "code": ["public void start ( ) {", "if ( s Logger . is Activated ( ) ) {", "s Logger . info ( STR_ ) ; }", "m Cleanup Executor = Executors . new Single Thread Executor ( ) ;", "if ( ! m Observer Is Registered ) {", "m Contacts Contract Observer = new Contacts Contract Observer ( new Handler ( ) ) ;", "m Contacts Contract Cursor = m Content Resolver . query ( Phone . CONTENT URI , null , null , null , null ) ;", "Cursor Util . assert Cursor Is Not Null ( m Contacts Contract Cursor , Phone . CONTENT URI ) ;", "m Contacts Contract Cursor . register Content Observer ( m Contacts Contract Observer ) ;", "m Observer Is Registered = true ; } }"]}
{"ids": "56112", "code": ["public void on Sinks Received ( String source Urn , List < Media Sink > sinks ) {", "m Sinks . put ( source Urn , sinks ) ;", "native On Sinks Received ( m Native Media Router Android , source Urn , sinks . size ( ) ) ; }"]}
{"ids": "8623", "code": ["public User to Entity ( User DTO dto ) {", "return to Entity ( dto , NUM_ ) ; }"]}
{"ids": "71629", "code": ["protected void write External Foreign Key Drop Stmt ( Table table , Foreign Key foreign Key , String Builder ddl ) {", "write Table Alter Stmt ( table , ddl ) ;", "ddl . append ( STR_ ) ;", "print Identifier ( get Foreign Key Name ( table , foreign Key ) , ddl ) ;", "print End Of Statement ( ddl ) ; }"]}
{"ids": "74622", "code": ["public void obtain ( long timeout ms ) throws IO Exception , Interrupted Exception , Timeout Exception {", "Long quit time = System . current Time Millis ( ) + timeout ms ;", "if ( file Lock != null && file Lock . is Valid ( ) ) {", "return ; }", "do {", "try {", "file Lock = file To Lock . try Lock ( ) ;", "return ; }", "catch ( Overlapping File Lock Exception e ) {", "Thread . sleep ( NUM_ ) ; } }", "while ( System . current Time Millis ( ) < quit time ) ;", "throw new Timeout Exception ( ) ; }"]}
{"ids": "25717", "code": ["@ Deprecated public void point To Data ( Data o ) throws Fits Exception {", "o . fill Header ( this ) ; }"]}
{"ids": "60270", "code": ["@ Not Null protected Virtual File [ ] collect Affected Files ( @ Not Null Project project , @ Not Null Virtual File [ ] files ) {", "List < Virtual File > affected Files = new Array List < Virtual File > ( files . length ) ;", "Project Level Vcs Manager project Level Vcs Manager = Project Level Vcs Manager . get Instance ( project ) ;", "for ( Virtual File file : files ) {", "if ( ! file . is Directory ( ) && project Level Vcs Manager . get Vcs For ( file ) instanceof Git Vcs ) {", "affected Files . add ( file ) ; }", "else if ( file . is Directory ( ) && is Recursive ( ) ) {", "add Children ( project , affected Files , file ) ; } }", "return Vfs Util Core . to Virtual File Array ( affected Files ) ; }"]}
{"ids": "54198", "code": ["protected void update ( int length ) {", "tick Label Values . clear ( ) ;", "tick Labels . clear ( ) ;", "tick Label Positions . clear ( ) ;", "if ( scale . is Log Scale Enabled ( ) ) {", "update Tick Label For Log Scale ( length ) ; }", "else {", "update Tick Label For Linear Scale ( length ) ; }", "update Tick Visibility ( ) ;", "update Tick Label Max Length And Height ( ) ; }"]}
{"ids": "60444", "code": ["private static boolean is Within Bounds ( Visual Position target Position , Visual Position start Position , Visual Position end Position ) {", "return target Position . line >= start Position . line && target Position . line <= end Position . line && target Position . column >= start Position . column && target Position . column <= end Position . column ; }"]}
{"ids": "28112", "code": ["static public void assert Statement Indices Consistent ( final Abstract Triple Store db , final int maxerrors ) {", "if ( log . is Info Enabled ( ) ) log . info ( STR_ ) ;", "final Atomic Integer nerrs = new Atomic Integer ( NUM_ ) ;", "final int from , to ;", "if ( db . get SPO Key Arity ( ) == NUM_ ) {", "from = SPO Key Order . FIRST TRIPLE INDEX ;", "to = SPO Key Order . LAST TRIPLE INDEX ; }", "else {", "from = SPO Key Order . FIRST QUAD INDEX ;", "to = SPO Key Order . LAST QUAD INDEX ; }", "for ( int i = from ; i <= to ; i ++ ) {", "for ( int j = from ; j <= to ; j ++ ) {", "if ( i <= j ) {", "continue ; }", "assert Same Statements ( db , SPO Key Order . value Of ( i ) , SPO Key Order . value Of ( j ) , nerrs , maxerrors ) ; } }", "assert Equals ( NUM_ , nerrs . get ( ) ) ; }"]}
{"ids": "82678", "code": ["public void show ( @ Id Res final int item Id ) {", "map . add ( item Id ) ;", "navigation . invalidate Badge ( item Id ) ; }"]}
{"ids": "75492", "code": ["public Options put ( String option , Integer value ) {", "if ( value == null ) {", "return remove ( option ) ; }", "options . put ( option , value . to String ( ) ) ;", "return this ; }"]}
{"ids": "24768", "code": ["private int determine Target Page ( int current Page , float page Offset , int velocity , int delta X ) {", "int target Page ;", "if ( Math . abs ( delta X ) > fling Distance && Math . abs ( velocity ) > minimum Velocity ) {", "if ( virtual Pos < NUM_ ) {", "target Page = velocity > NUM_ ? current Page : current Page + NUM_ ; }", "else {", "target Page = velocity > NUM_ ? current Page + NUM_ : current Page ; } }", "else {", "final float truncator = current Page >= current Item ? NUM_ : NUM_ ;", "target Page = ( int ) ( current Page + page Offset + truncator ) ; }", "if ( items . size ( ) > NUM_ ) {", "final Item Info first Item = items . get ( NUM_ ) ;", "final Item Info last Item = items . get ( items . size ( ) - NUM_ ) ;", "target Page = Math . max ( first Item . position , Math . min ( target Page , last Item . position ) ) ; }", "if ( target Page > current Page && on Card Change Listener != null ) {", "on Card Change Listener . on Card Dismissed ( current Page , virtual Pos > NUM_ ) ; }", "return target Page ; }"]}
{"ids": "8888", "code": ["public void disable ( Bluetooth Adapter adapter ) {", "int mask = ( Bluetooth Receiver . STATE TURNING OFF FLAG | Bluetooth Receiver . STATE OFF FLAG | Bluetooth Receiver . SCAN MODE NONE FLAG ) ;", "long start = - NUM_ ;", "Bluetooth Receiver receiver = get Bluetooth Receiver ( mask ) ;", "int state = adapter . get State ( ) ;", "switch ( state ) {", "case Bluetooth Adapter . STATE OFF :", "assert False ( adapter . is Enabled ( ) ) ;", "remove Receiver ( receiver ) ;", "return ;", "case Bluetooth Adapter . STATE TURNING ON :", "assert False ( adapter . is Enabled ( ) ) ;", "start = System . current Time Millis ( ) ;", "break ;", "case Bluetooth Adapter . STATE ON :", "assert True ( adapter . is Enabled ( ) ) ;", "start = System . current Time Millis ( ) ;", "assert True ( adapter . disable ( ) ) ;", "break ;", "case Bluetooth Adapter . STATE TURNING OFF :", "assert False ( adapter . is Enabled ( ) ) ;", "mask = NUM_ ;", "break ;", "default :", "remove Receiver ( receiver ) ;", "fail ( String . format ( STR_ , state ) ) ; }", "long s = System . current Time Millis ( ) ;", "while ( System . current Time Millis ( ) - s < ENABLE DISABLE TIMEOUT ) {", "state = adapter . get State ( ) ;", "if ( state == Bluetooth Adapter . STATE OFF && ( receiver . get Fired Flags ( ) & mask ) == mask ) {", "assert False ( adapter . is Enabled ( ) ) ;", "long finish = receiver . get Completed Time ( ) ;", "if ( start != - NUM_ && finish != - NUM_ ) {", "write Output ( String . format ( STR_ , ( finish - start ) ) ) ; }", "else {", "write Output ( STR_ ) ; }", "remove Receiver ( receiver ) ;", "return ; }", "sleep ( POLL TIME ) ; }", "int fired Flags = receiver . get Fired Flags ( ) ;", "remove Receiver ( receiver ) ;", "fail ( String . format ( STR_ , state , Bluetooth Adapter . STATE OFF , fired Flags , mask ) ) ; }"]}
{"ids": "62233", "code": ["public static String to Regex ( String glob , String separator ) {", "check Not Null ( separator , STR_ ) ;", "check Argument ( separator . length ( ) == NUM_ , STR_ , separator ) ;", "return to Regex ( glob , separator . char At ( NUM_ ) ) ; }"]}
{"ids": "16330", "code": ["public static String [ ] split Without Escaped ( String str , char separator Char , boolean retain Empty ) {", "int len = str . length ( ) ;", "if ( len == NUM_ ) {", "return new String [ NUM_ ] ; }", "List < String > list = new Array List < String > ( ) ;", "int i = NUM_ ;", "int start = NUM_ ;", "boolean match = false ;", "while ( i < len ) {", "if ( str . char At ( i ) == STR_ ) {", "match = true ;", "i += NUM_ ; }", "else if ( str . char At ( i ) == separator Char ) {", "if ( retain Empty || match ) {", "list . add ( str . substring ( start , i ) ) ;", "match = false ; }", "start = ++ i ; }", "else {", "match = true ;", "i ++ ; } }", "if ( retain Empty || match ) {", "list . add ( str . substring ( start , i ) ) ; }", "return list . to Array ( new String [ list . size ( ) ] ) ; }"]}
{"ids": "42376", "code": ["private static Hash Map < Basic Block Pair , Hash Set < Register > > find Split Points ( IR ir , Live Analysis live , LST Graph lst ) {", "Hash Map < Basic Block Pair , Hash Set < Register > > result = new Hash Map < Basic Block Pair , Hash Set < Register > > ( NUM_ ) ;", "for ( Enumeration < Graph Node > e = lst . enumerate Nodes ( ) ; e . has More Elements ( ) ; ) {", "LST Node node = ( LST Node ) e . next Element ( ) ;", "Basic Block header = node . get Header ( ) ;", "Bit Vector loop = node . get Loop ( ) ;", "if ( loop == null ) continue ;", "for ( Enumeration < Basic Block > in = header . get In ( ) ; in . has More Elements ( ) ; ) {", "Basic Block bb = in . next Element ( ) ;", "if ( loop . get ( bb . get Number ( ) ) ) continue ;", "Hash Set < Register > live Registers = live . get Live Registers On Edge ( bb , header ) ;", "for ( Register r : live Registers ) {", "if ( r . is Symbolic ( ) ) {", "Hash Set < Register > s = find Or Create Split Set ( result , bb , header ) ;", "s . add ( r ) ; } } }", "for ( int i = NUM_ ; i < loop . length ( ) ; i ++ ) {", "if ( loop . get ( i ) ) {", "Basic Block bb = ir . get Basic Block ( i ) ;", "for ( Enumeration < Basic Block > out = bb . get Normal Out ( ) ; out . has More Elements ( ) ; ) {", "Basic Block dest = out . next Element ( ) ;", "if ( loop . get ( dest . get Number ( ) ) ) continue ;", "Hash Set < Register > live Registers = live . get Live Registers On Edge ( bb , dest ) ;", "for ( Register r : live Registers ) {", "if ( r . is Symbolic ( ) ) {", "Hash Set < Register > s = find Or Create Split Set ( result , bb , dest ) ;", "s . add ( r ) ; } } } } } }", "add Entries For Infrequent Blocks ( ir , live , result ) ;", "return result ; }"]}
{"ids": "81986", "code": ["public static void remove Object At Offset ( Object [ ] source Array , Object [ ] destination Array , int offset ) {", "System . arraycopy ( source Array , NUM_ , destination Array , NUM_ , offset ) ;", "System . arraycopy ( source Array , offset + NUM_ , destination Array , offset , source Array . length - offset - NUM_ ) ; }"]}
{"ids": "52674", "code": ["@ Suppress Warnings ( STR_ ) public Dictionary Adapter ( Context context , File db Path , String db Name , String default Table ) {", "m Context = context ;", "m Db Name = db Name ;", "m Default Table = default Table ;", "m Db Path = db Path ;", "m Db File = new File ( db Path , m Db Name ) ;", "if ( m Db File . exists ( ) ) {", "open ( ) ; } }"]}
{"ids": "10938", "code": ["public boolean handle File ( File file ) {", "if ( DEBUG ) {", "logger . fine ( STR_ + file . get Absolute Path ( ) ) ; }", "filenames . add ( file ) ;", "return true ; }"]}
{"ids": "83406", "code": ["public boolean looks Like Number Coming ( ) {", "if ( n >= s . length ( ) ) return false ;", "return Character . is Digit ( s . char At ( n ) ) ; }"]}
{"ids": "51528", "code": ["public short read Short ( ) throws IO Exception {", "return primitive Types . read Short ( ) ; }"]}
{"ids": "51491", "code": ["public void print ( int inum ) {", "print ( String . value Of ( inum ) ) ; }"]}
{"ids": "37419", "code": ["public static < Node Type extends I View Node < ? > > Zy Proximity Node < ? > create Proximity Node ( final Graph 2 D graph , final Zy Graph Node < ? > attached Node , final int degree , final boolean is Incoming ) {", "Preconditions . check Not Null ( graph , STR_ ) ;", "Preconditions . check Not Null ( attached Node , STR_ ) ;", "final Zy Label Content labelcontent = new Zy Label Content ( null ) ;", "labelcontent . add Line Content ( new Zy Line Content ( String . value Of ( degree ) , new Font ( STR_ , Font . PLAIN , NUM_ ) , null ) ) ;", "final Zy Proximity Node Realizer < Node Type > r = new Zy Proximity Node Realizer < Node Type > ( labelcontent ) ;", "final Node node = graph . create Node ( r ) ;", "@ Suppress Warnings ( STR_ ) final Zy Proximity Node < Node Type > info Node = new Zy Proximity Node < Node Type > ( node , r , ( Zy Graph Node < Node Type > ) attached Node , is Incoming ) ;", "final Zy Node Data < Zy Proximity Node < Node Type > > data = new Zy Node Data < Zy Proximity Node < Node Type > > ( info Node ) ;", "r . set User Data ( data ) ;", "return info Node ; }"]}
{"ids": "21413", "code": ["public static boolean is Zoning Required ( Db Client db Client , URI varray Uri ) {", "if ( varray Uri != null ) {", "Virtual Array nh = db Client . query Object ( Virtual Array . class , varray Uri ) ;", "if ( nh != null ) {", "return is Zoning Required ( db Client , nh ) ; } }", "return false ; }"]}
{"ids": "6919", "code": ["protected CC Animation ( String name , float delay , Array List < CC Sprite Frame > frames ) {", "delay = delay ;", "name = name ;", "frames = new Array List < CC Sprite Frame > ( ) ;", "if ( frames != null ) frames . add All ( frames ) ; }"]}
{"ids": "10593", "code": ["private void navigate To Dump ( ) {", "Tree Path current Path = tree . get Selection Path ( ) ;", "tree . set Selection Path ( current Path . get Parent Path ( ) ) ;", "tree . scroll Path To Visible ( current Path . get Parent Path ( ) ) ; }"]}
{"ids": "33466", "code": ["public synchronized void add Messages ( Array List < Sms Mms Message > new Messages ) {", "if ( new Messages != null ) {", "messages . add All ( NUM_ , new Messages ) ;", "Update Message Count ( ) ; } }"]}
{"ids": "55811", "code": ["protected void draw Center Text ( Canvas c ) {", "Char Sequence center Text = m Chart . get Center Text ( ) ;", "if ( m Chart . is Draw Center Text Enabled ( ) && center Text != null ) {", "MP Point F center = m Chart . get Center Circle Box ( ) ;", "MP Point F offset = m Chart . get Center Text Offset ( ) ;", "float x = center . x + offset . x ;", "float y = center . y + offset . y ;", "float inner Radius = m Chart . is Draw Hole Enabled ( ) && ! m Chart . is Draw Slices Under Hole Enabled ( ) ? m Chart . get Radius ( ) * ( m Chart . get Hole Radius ( ) / NUM_ ) : m Chart . get Radius ( ) ;", "Rect F hole Rect = m Rect Buffer [ NUM_ ] ;", "hole Rect . left = x - inner Radius ;", "hole Rect . top = y - inner Radius ;", "hole Rect . right = x + inner Radius ;", "hole Rect . bottom = y + inner Radius ;", "Rect F bounding Rect = m Rect Buffer [ NUM_ ] ;", "bounding Rect . set ( hole Rect ) ;", "float radius Percent = m Chart . get Center Text Radius Percent ( ) / NUM_ ;", "if ( radius Percent > NUM_ ) {", "bounding Rect . inset ( ( bounding Rect . width ( ) - bounding Rect . width ( ) * radius Percent ) / NUM_ , ( bounding Rect . height ( ) - bounding Rect . height ( ) * radius Percent ) / NUM_ ) ; }", "if ( ! center Text . equals ( m Center Text Last Value ) || ! bounding Rect . equals ( m Center Text Last Bounds ) ) {", "m Center Text Last Bounds . set ( bounding Rect ) ;", "m Center Text Last Value = center Text ;", "float width = m Center Text Last Bounds . width ( ) ;", "m Center Text Layout = new Static Layout ( center Text , NUM_ , center Text . length ( ) , m Center Text Paint , ( int ) Math . max ( Math . ceil ( width ) , NUM_ ) , Layout . Alignment . ALIGN CENTER , NUM_ , NUM_ , false ) ; }", "float layout Height = m Center Text Layout . get Height ( ) ;", "c . save ( ) ;", "if ( Build . VERSION . SDK INT >= NUM_ ) {", "Path path = m Draw Center Text Path Buffer ;", "path . reset ( ) ;", "path . add Oval ( hole Rect , Path . Direction . CW ) ;", "c . clip Path ( path ) ; }", "c . translate ( bounding Rect . left , bounding Rect . top + ( bounding Rect . height ( ) - layout Height ) / NUM_ ) ;", "m Center Text Layout . draw ( c ) ;", "c . restore ( ) ;", "MP Point F . recycle Instance ( center ) ;", "MP Point F . recycle Instance ( offset ) ; } }"]}
{"ids": "11675", "code": ["protected void group Frames ( Vector < Frame > frames , Vector < Group > groups , boolean is Dchum ) throws Make Toc Exception {", "Frame frame ;", "Group group ;", "int group Count ;", "int n Frames = frames . size ( ) ;", "Debug . message ( STR_ , STR_ ) ;", "for ( int i = NUM_ ; i < n Frames ; i ++ ) {", "Debug . message ( STR_ , STR_ ) ;", "frame = ( Frame ) frames . element At ( i ) ;", "if ( ! frame . marked ) {", "group Count = groups . size ( ) ;", "group = new Group ( ) ;", "group . left = max Side / NUM_ ;", "group . right = group . left + NUM_ ;", "group . top = max Side / NUM_ ;", "group . bottom = group . top + NUM_ ;", "group . horiz pos [ group . top ] = frame . top ;", "group . horiz pos [ group . bottom ] = frame . bottom ;", "group . vert pos [ group . left ] = frame . left ;", "group . vert pos [ group . right ] = frame . right ;", "group . h interval = frame . h interval ;", "group . v interval = frame . v interval ;", "group . h resolution = frame . h resolution ;", "group . v resolution = frame . v resolution ;", "group . scale = frame . scale ;", "group . zone = frame . zone ;", "group . cib = frame . cib ;", "group . cdted = frame . cdted ;", "frame . x = group . left ;", "frame . y = group . top ;", "frame . group = group Count ;", "frame . marked = true ;", "Debug . message ( STR_ , STR_ + group Count + STR_ + i + STR_ + frame . filename + STR_ ) ;", "if ( ! is Dchum ) {", "for ( int j = NUM_ ; j < n Frames ; j ++ ) {", "if ( i == j ) {", "Debug . message ( STR_ , STR_ + i + STR_ ) ;", "continue ; }", "Frame f = ( Frame ) frames . element At ( j ) ;", "if ( add Frame To Group ( group , f , group Count ) ) {", "Debug . message ( STR_ , STR_ + j + STR_ + group Count ) ;", "continue ; } } }", "Debug . message ( STR_ , STR_ + group Count + STR_ ) ;", "groups . add ( group ) ; }", "fire Progress Update ( Progress Event . UPDATE , STR_ , i , n Frames ) ; }", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + groups . size ( ) ) ; } }"]}
{"ids": "72364", "code": ["public double double Value ( ) {", "return d . double Value ( ) ; }"]}
{"ids": "8388", "code": ["public static Object Output Stream new Object Output Stream ( Path self ) throws IO Exception {", "return new Object Output Stream ( Files . new Output Stream ( self ) ) ; }"]}
{"ids": "34204", "code": ["public void add ( final Certificate Validity certificate Validity ) {", "certificate Validity List . add ( certificate Validity ) ; }"]}
{"ids": "14694", "code": ["public void add Policy Listener ( Policy Listener policy Listener ) {", "policy Cache . add Policy Listener ( policy Listener ) ; }"]}
{"ids": "44882", "code": ["public static Result verify ( String sid , String code ) {", "String id = STR_ + sid ;", "Code c = ( Code ) Cache . get ( id ) ;", "if ( c == null ) {", "log . warn ( STR_ + sid ) ;", "return Result . badcode ; }", "else if ( ! X . is Same ( code , c . code ) ) {", "log . warn ( STR_ + c . code + STR_ + code ) ;", "return Result . badcode ; }", "else if ( c . expired < System . current Time Millis ( ) ) {", "log . warn ( STR_ + c . expired ) ;", "return Result . expired ; }", "return Result . ok ; }"]}
{"ids": "36839", "code": ["protected static I Navi Raw Module find Raw Module ( final int raw Module Id , final List < I Navi Raw Module > raw Modules ) {", "Preconditions . check Argument ( raw Module Id > NUM_ , STR_ , raw Module Id ) ;", "Preconditions . check Not Null ( raw Modules , STR_ ) ;", "for ( final I Navi Raw Module raw Module : raw Modules ) {", "if ( raw Module . get Id ( ) == raw Module Id ) {", "return raw Module ; } }", "throw new Illegal State Exception ( STR_ ) ; }"]}
{"ids": "68200", "code": ["public static Object extract Type Checked ( List < Object > args , int i , Class clazz , Function < List < Object > , Object > extract Func ) {", "if ( args . size ( ) < i + NUM_ ) {", "return null ; }", "else if ( clazz . is Instance ( args . get ( i ) ) ) {", "return extract Func . apply ( args ) ; }", "else {", "return null ; } }"]}
{"ids": "47517", "code": ["@ Override public Japanese Date date Year Day ( int proleptic Year , int day Of Year ) {", "return new Japanese Date ( Local Date . of Year Day ( proleptic Year , day Of Year ) ) ; }"]}
{"ids": "48367", "code": ["private Pair < Entry , char [ ] > recover Entry ( Key Store ks , String alias , char [ ] pstore , char [ ] pkey ) throws Exception {", "if ( ks . contains Alias ( alias ) == false ) {", "Message Format form = new Message Format ( rb . get String ( STR_ ) ) ;", "Object [ ] source = { alias } ;", "throw new Exception ( form . format ( source ) ) ; }", "Password Protection pp = null ;", "Entry entry ;", "try {", "entry = ks . get Entry ( alias , pp ) ;", "pkey = null ; }", "catch ( Unrecoverable Entry Exception une ) {", "if ( P 11 KEYSTORE . equals Ignore Case ( ks . get Type ( ) ) || Key Store Util . is Windows Key Store ( ks . get Type ( ) ) ) {", "throw une ; }", "if ( pkey != null ) {", "pp = new Password Protection ( pkey ) ;", "entry = ks . get Entry ( alias , pp ) ; }", "else {", "try {", "pp = new Password Protection ( pstore ) ;", "entry = ks . get Entry ( alias , pp ) ;", "pkey = pstore ; }", "catch ( Unrecoverable Entry Exception une 2 ) {", "if ( P 12 KEYSTORE . equals Ignore Case ( ks . get Type ( ) ) ) {", "throw une 2 ; }", "else {", "pkey = get Key Passwd ( alias , null , null ) ;", "pp = new Password Protection ( pkey ) ;", "entry = ks . get Entry ( alias , pp ) ; } } } }", "return Pair . of ( entry , pkey ) ; }"]}
{"ids": "34885", "code": ["URL Class Loader new Loader ( URL base ) {", "return new URL Class Loader ( new URL [ ] { base } ) ; }"]}
{"ids": "40262", "code": ["public Wiser ( ) {", "this . server = new SMTP Server ( new Simple Message Listener Adapter ( this ) ) ; }"]}
{"ids": "32516", "code": ["protected static int [ ] concat ( @ Nullable int [ ] arr , int ... obj ) {", "int [ ] new Arr ;", "if ( arr == null || arr . length == NUM_ ) new Arr = obj ;", "else {", "new Arr = Arrays . copy Of ( arr , arr . length + obj . length ) ;", "System . arraycopy ( obj , NUM_ , new Arr , arr . length , obj . length ) ; }", "return new Arr ; }"]}
{"ids": "17354", "code": ["public void truck Camera ( float size ) {", "move To Position ( - ( float ) ( target Xoff + ( size * Math . sin ( Math . to Radians ( zrot - NUM_ ) ) ) ) , - ( float ) ( target Yoff + ( size * Math . cos ( Math . to Radians ( zrot - NUM_ ) ) ) ) ) ; }"]}
{"ids": "30069", "code": ["public void shutdown ( ) {", "scheduled Executor Service . shutdown Now ( ) ; }"]}
{"ids": "9383", "code": ["protected int split List Index ( List < Pair < Double , Integer > > S ) {", "return S . size ( ) / NUM_ ; }"]}
{"ids": "73937", "code": ["public static synchronized void add Property Change Listener ( Property Change Listener l ) {", "if ( ! listeners . contains ( l ) ) {", "listeners . add ( l ) ; } }"]}
{"ids": "13644", "code": ["private static void clean Directory ( File path ) {", "if ( path == null ) return ;", "if ( path . exists ( ) ) {", "for ( File f : path . list Files ( ) ) {", "if ( f . is Directory ( ) ) clean Directory ( f ) ;", "f . delete ( ) ; } } }"]}
{"ids": "32200", "code": ["private Grid Cache Version min Version ( Iterable < Ignite Tx Entry > entries , Grid Cache Version min , Ignite Internal Tx tx ) {", "for ( Ignite Tx Entry tx Entry : entries ) {", "Grid Cache Entry Ex cached = tx Entry . cached ( ) ;", "assert tx Entry . is Read ( ) || ! cached . obsolete ( tx . xid Version ( ) ) : STR_ + cached + STR_ + tx + STR_ ;", "for ( Grid Cache Mvcc Candidate cand : cached . remote Mvcc Snapshot ( ) ) if ( min == null || cand . version ( ) . is Less ( min ) ) min = cand . version ( ) ; }", "return min ; }"]}
{"ids": "4458", "code": ["public Dimensioned Scalar ( String field Value ) throws Illegal Argument Exception {", "super ( STR_ , STR_ ) ;", "Matcher matcher = PATTERN . matcher ( field Value ) ;", "if ( matcher . find ( ) ) {", "String name = matcher . group ( NUM_ ) ;", "String dimensions = matcher . group ( NUM_ ) ;", "String value = matcher . group ( NUM_ ) ;", "set Name ( name ) ;", "set Value ( value ) ;", "this . dimensions = new Dimensions ( dimensions ) ; }", "else {", "throw new Dictionary Exception ( STR_ + field Value + STR_ ) ; } }"]}
{"ids": "66397", "code": ["public void characters ( char ch [ ] , int start , int length ) throws SAX Exception {", "m value Buffer . append ( ch , start , length ) ; }"]}
{"ids": "37984", "code": ["protected double compute Std Dev ( Instance inst , Matrix k ) throws Exception {", "double kappa = m kernel . eval ( - NUM_ , - NUM_ , inst ) + m delta Squared ;", "double s = NUM_ ;", "int n = m L . length ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "double t = NUM_ ;", "for ( int j = NUM_ ; j < n ; j ++ ) {", "t -= k . get ( j , NUM_ ) * ( i > j ? m L [ i ] [ j ] : m L [ j ] [ i ] ) ; }", "s += t * k . get ( i , NUM_ ) ; }", "double sigma = m delta ;", "if ( kappa > s ) {", "sigma = Math . sqrt ( kappa - s ) ; }", "return sigma ; }"]}
{"ids": "62868", "code": ["public Multiplex Manager ( Data Store ... data Stores ) {", "this . data Stores = Arrays . as List ( data Stores ) ; }"]}
{"ids": "80951", "code": ["public boolean matches Raw Name Pattern ( Object item ) {", "String prefix = pattern Matcher . get Pattern ( ) ;", "String text = get Element Name ( item ) ;", "if ( text == null ) return false ;", "int text Length = text . length ( ) ;", "int prefix Length = prefix . length ( ) ;", "if ( text Length < prefix Length ) {", "return false ; }", "for ( int i = prefix Length - NUM_ ; i >= NUM_ ; i -- ) {", "if ( Character . to Lower Case ( prefix . char At ( i ) ) != Character . to Lower Case ( text . char At ( i ) ) ) return false ; }", "return true ; }"]}
{"ids": "49625", "code": ["public static @ Nonnull < T > T value Or Default ( @ Nullable T value , @ Nonnull T default Value ) {", "return value == null ? default Value : value ; }"]}
{"ids": "14091", "code": ["public String choose Server Alias ( String key Type , Principal [ ] issuers , Socket socket ) {", "return default X 509 KM . choose Server Alias ( key Type , issuers , socket ) ; }"]}
{"ids": "84784", "code": ["public static double pdf ( double x , double shape , double scale , double factor ) {", "if ( x <= NUM_ ) return NUM_ ;", "final double a = Math . exp ( shape * Math . log ( scale ) - ( shape + NUM_ ) * Math . log ( x ) - ( scale / x ) - Gamma Function . ln Gamma ( shape ) ) ;", "return factor * a ; }"]}
{"ids": "66030", "code": ["public String charge ( Properties ctx , int Window No , Grid Tab m Tab , Grid Field m Field , Object value ) {", "Integer C Charge ID = ( Integer ) value ;", "if ( C Charge ID == null || C Charge ID . int Value ( ) == NUM_ ) return STR_ ;", "String sql = STR_ ;", "Prepared Statement pstmt = null ;", "Result Set rs = null ;", "try {", "pstmt = DB . prepare Statement ( sql , null ) ;", "pstmt . set Int ( NUM_ , C Charge ID . int Value ( ) ) ;", "rs = pstmt . execute Query ( ) ;", "if ( rs . next ( ) ) {", "m Tab . set Value ( STR_ , rs . get Big Decimal ( NUM_ ) ) ; } }", "catch ( SQL Exception e ) {", "log . log ( Level . SEVERE , sql , e ) ;", "return e . get Localized Message ( ) ; }", "finally {", "DB . close ( rs , pstmt ) ;", "rs = null ;", "pstmt = null ; }", "return tax ( ctx , Window No , m Tab , m Field , value ) ; }"]}
{"ids": "35247", "code": ["protected Array < Actor > parse ( ) {", "actors = Gdx Arrays . new Array ( Actor . class ) ;", "invoke Pre Listeners ( actors ) ;", "final String Builder builder = new String Builder ( ) ;", "while ( template Reader . has Next Character ( ) ) {", "final char character = template Reader . next Character ( ) ;", "if ( character == syntax . get Argument Opening ( ) ) {", "process Argument ( ) ; }", "else if ( character == syntax . get Tag Opening ( ) ) {", "if ( is Next Character Comment Opening ( ) ) {", "process Comment ( ) ;", "continue ; }", "if ( current Parent Tag != null ) {", "current Parent Tag . handle Data Between Tags ( builder ) ; }", "Strings . clear Builder ( builder ) ;", "process Tag ( builder ) ; }", "else {", "builder . append ( character ) ; } }", "if ( current Parent Tag != null ) {", "throw Error ( STR_ + current Parent Tag . get Tag Name ( ) + STR_ ) ; }", "invoke Port Listeners ( actors ) ;", "return actors ; }"]}
{"ids": "67972", "code": ["public void flush ( ) throws IO Exception {", "Wsp Util . write Uint 8 ( os , NUM_ ) ;", "write Public Identifier ( os , public ID ) ;", "Wsp Util . write Uintvar ( os , Wap Constants . MIB ENUM UTF 8 ) ;", "write String Table ( os ) ;", "wbxml Body . close ( ) ;", "wbxml Body . write To ( os ) ;", "os . flush ( ) ; }"]}
{"ids": "35342", "code": ["private Token to ASI Token ( I Leaf Node leaf ) {", "if ( leaf . is Hidden ( ) ) {", "return new Semicolon Token ( leaf ) ; }", "else {", "if ( ! leaf Nodes . has Next ( ) ) {", "int token Type = token Type Mapper . get Internal Token Type ( leaf ) ;", "int semicolon Token Type = token Type Mapper . get Internal Token Type ( semicolon ) ;", "if ( token Type == semicolon Token Type ) {", "return new Common Token ( semicolon Token Type , leaf . get Text ( ) ) ; }", "if ( leaf . get Total End Offset ( ) == end Offset ) {", "leaf Nodes = Iterators . empty Iterator ( ) ;", "return new Common Token ( token Type , leaf . get Text ( ) ) ; }", "next = new Common Token ( semicolon Token Type , leaf . get Text ( ) ) ;", "return new Common Token ( token Type , leaf . get Text ( ) ) ; }", "else if ( leaf . get Grammar Element ( ) == right Curly In Block || leaf . get Grammar Element ( ) == right Curly In Arrow Expression ) {", "int token Type = token Type Mapper . get Internal Token Type ( leaf ) ;", "next = new Common Token ( token Type ) ;", "return new Common Token ( token Type Mapper . get Internal Token Type ( semicolon ) , leaf . get Text ( ) ) ; }", "else {", "return new Semicolon Token ( leaf ) ; } } }"]}
{"ids": "59570", "code": ["@ Override public Packet Buffer write ( Packet Buffer buf ) {", "values . for Each ( null ) ;", "return buf ; }"]}
{"ids": "60394", "code": ["public final void register File Type ( @ Not Null File Type type , @ Non Nls @ Nullable String ... default Associated Extensions ) {", "List < File Name Matcher > matchers = new Array List < File Name Matcher > ( ) ;", "if ( default Associated Extensions != null ) {", "for ( String extension : default Associated Extensions ) {", "matchers . add ( new Extension File Name Matcher ( extension ) ) ; } }", "register File Type ( type , matchers ) ; }"]}
{"ids": "81771", "code": ["public int parse Int ( String locale Formatted Integer ) {", "return Integer . parse Int ( locale Formatted Integer ) ; }"]}
{"ids": "14015", "code": ["public static Request Security Token Response parse XML ( String xml ) throws WS Federation Exception {", "Document doc = XML Utils . to DOM Document ( xml , debug ) ;", "Element root = doc . get Document Element ( ) ;", "return new Request Security Token Response ( root ) ; }"]}
{"ids": "77948", "code": ["@ Override public void request Resources ( Samza Resource Request resource Request ) {", "final int DEFAULT PRIORITY = NUM_ ;", "log . info ( STR_ + resource Request . get Preferred Host ( ) + STR_ + resource Request . get Container ID ( ) ) ;", "int memory Mb = resource Request . get Memory MB ( ) ;", "int cpu Cores = resource Request . get Num Cores ( ) ;", "String container Label = yarn Config . get Container Label ( ) ;", "String preferred Host = resource Request . get Preferred Host ( ) ;", "Resource capability = Resource . new Instance ( memory Mb , cpu Cores ) ;", "Priority priority = Priority . new Instance ( DEFAULT PRIORITY ) ;", "AMRM Client . Container Request issued Request ;", "if ( preferred Host . equals ( STR_ ) ) {", "log . info ( STR_ + preferred Host ) ;", "issued Request = new AMRM Client . Container Request ( capability , null , null , priority , true , container Label ) ; }", "else {", "log . info ( STR_ + preferred Host ) ;", "issued Request = new AMRM Client . Container Request ( capability , new String [ ] { preferred Host } , null , priority , true , container Label ) ; }", "synchronized ( lock ) {", "requests Map . put ( resource Request , issued Request ) ;", "am Client . add Container Request ( issued Request ) ; } }"]}
{"ids": "64245", "code": ["private Collection < Extracted Items Collection > filter Items By Level ( Player player , List < Extracted Items Collection > items Collections ) {", "int player Level = player . get Level ( ) ;", "Collection < Extracted Items Collection > result = new Array List < Extracted Items Collection > ( ) ;", "for ( Extracted Items Collection collection : items Collections ) {", "if ( collection . get Min Level ( ) > player Level ) {", "continue ; }", "if ( collection . get Max Level ( ) > NUM_ && collection . get Max Level ( ) < player Level ) {", "continue ; }", "result . add ( collection ) ; }", "return result ; }"]}
{"ids": "55613", "code": ["private void draw Host ( Graphics 2 D g 2 ) {", "Coord loc = node . get Location ( ) ;", "if ( draw Coverage && node . is Radio Active ( ) ) {", "Array List < Network Interface > interfaces = new Array List < Network Interface > ( ) ;", "interfaces . add All ( node . get Interfaces ( ) ) ;", "for ( Network Interface ni : interfaces ) {", "double range = ni . get Transmit Range ( ) ;", "Ellipse 2 D . Double coverage ;", "coverage = new Ellipse 2 D . Double ( scale ( loc . get X ( ) - range ) , scale ( loc . get Y ( ) - range ) , scale ( range * NUM_ ) , scale ( range * NUM_ ) ) ;", "g 2 . set Color ( range Color ) ;", "g 2 . draw ( coverage ) ; } }", "if ( draw Connections ) {", "g 2 . set Color ( con Color ) ;", "Coord c 1 = node . get Location ( ) ;", "Array List < Connection > con List = new Array List < Connection > ( ) ;", "con List . add All ( node . get Connections ( ) ) ;", "for ( Connection c : con List ) {", "DTN Host other Node = c . get Other Node ( node ) ;", "Coord c 2 ;", "if ( other Node == null ) {", "continue ; }", "c 2 = other Node . get Location ( ) ;", "g 2 . draw Line ( scale ( c 1 . get X ( ) ) , scale ( c 1 . get Y ( ) ) , scale ( c 2 . get X ( ) ) , scale ( c 2 . get Y ( ) ) ) ; } }", "g 2 . set Color ( host Color ) ;", "g 2 . draw Rect ( scale ( loc . get X ( ) - NUM_ ) , scale ( loc . get Y ( ) - NUM_ ) , scale ( NUM_ ) , scale ( NUM_ ) ) ;", "if ( is Highlighted ( ) ) {", "g 2 . set Color ( highlighted Node Color ) ;", "g 2 . fill Rect ( scale ( loc . get X ( ) ) - NUM_ , scale ( loc . get Y ( ) ) - NUM_ , NUM_ , NUM_ ) ; }", "if ( draw Node Name ) {", "g 2 . set Color ( host Name Color ) ;", "g 2 . draw String ( node . to String ( ) , scale ( loc . get X ( ) ) , scale ( loc . get Y ( ) ) ) ; } }"]}
{"ids": "69526", "code": ["public boolean add ( symbol sym ) throws internal error {", "Object previous ;", "not null ( sym ) ;", "previous = all . put ( sym . name ( ) , sym ) ;", "return previous == null ; }"]}
{"ids": "15674", "code": ["public final int size ( ) {", "if ( GWT . is Script ( ) ) {", "return js Array . size ( ) ; }", "else {", "return java Array . size ( ) ; } }"]}
{"ids": "76896", "code": ["public boolean intersects ( final Planet Model planet Model , final Plane q , final Geo Point [ ] notable Points , final Geo Point [ ] more Notable Points , final Membership [ ] bounds , final Membership ... more Bounds ) {", "if ( is Numerically Identical ( q ) ) {", "for ( Geo Point p : notable Points ) {", "if ( meets All Bounds ( p , bounds , more Bounds ) ) {", "return true ; } }", "for ( Geo Point p : more Notable Points ) {", "if ( meets All Bounds ( p , bounds , more Bounds ) ) {", "return true ; } }", "return false ; }", "final double line Vector X = y * q . z - z * q . y ;", "final double line Vector Y = z * q . x - x * q . z ;", "final double line Vector Z = x * q . y - y * q . x ;", "if ( Math . abs ( line Vector X ) < MINIMUM RESOLUTION && Math . abs ( line Vector Y ) < MINIMUM RESOLUTION && Math . abs ( line Vector Z ) < MINIMUM RESOLUTION ) {", "return false ; }", "double x 0 ;", "double y 0 ;", "double z 0 ;", "final double denom YZ = this . y * q . z - this . z * q . y ;", "final double denom XZ = this . x * q . z - this . z * q . x ;", "final double denom XY = this . x * q . y - this . y * q . x ;", "if ( Math . abs ( denom YZ ) >= Math . abs ( denom XZ ) && Math . abs ( denom YZ ) >= Math . abs ( denom XY ) ) {", "if ( Math . abs ( denom YZ ) < MINIMUM RESOLUTION SQUARED ) {", "return false ; }", "final double denom = NUM_ / denom YZ ;", "x 0 = NUM_ ;", "y 0 = ( - this . D * q . z - this . z * - q . D ) * denom ;", "z 0 = ( this . y * - q . D + this . D * q . y ) * denom ; }", "else if ( Math . abs ( denom XZ ) >= Math . abs ( denom XY ) && Math . abs ( denom XZ ) >= Math . abs ( denom YZ ) ) {", "if ( Math . abs ( denom XZ ) < MINIMUM RESOLUTION SQUARED ) {", "return false ; }", "final double denom = NUM_ / denom XZ ;", "x 0 = ( - this . D * q . z - this . z * - q . D ) * denom ;", "y 0 = NUM_ ;", "z 0 = ( this . x * - q . D + this . D * q . x ) * denom ; }", "else {", "if ( Math . abs ( denom XY ) < MINIMUM RESOLUTION SQUARED ) {", "return false ; }", "final double denom = NUM_ / denom XY ;", "x 0 = ( - this . D * q . y - this . y * - q . D ) * denom ;", "y 0 = ( this . x * - q . D + this . D * q . x ) * denom ;", "z 0 = NUM_ ; }", "final double A = line Vector X * line Vector X * planet Model . inverse Ab Squared + line Vector Y * line Vector Y * planet Model . inverse Ab Squared + line Vector Z * line Vector Z * planet Model . inverse C Squared ;", "final double B = NUM_ * ( line Vector X * x 0 * planet Model . inverse Ab Squared + line Vector Y * y 0 * planet Model . inverse Ab Squared + line Vector Z * z 0 * planet Model . inverse C Squared ) ;", "final double C = x 0 * x 0 * planet Model . inverse Ab Squared + y 0 * y 0 * planet Model . inverse Ab Squared + z 0 * z 0 * planet Model . inverse C Squared - NUM_ ;", "final double Bsquared Minus = B * B - NUM_ * A * C ;", "if ( Math . abs ( Bsquared Minus ) < MINIMUM RESOLUTION SQUARED ) {", "final double inverse 2 A = NUM_ / ( NUM_ * A ) ;", "final double t = - B * inverse 2 A ;", "final double point X = line Vector X * t + x 0 ;", "final double point Y = line Vector Y * t + y 0 ;", "final double point Z = line Vector Z * t + z 0 ;", "for ( final Membership bound : bounds ) {", "if ( ! bound . is Within ( point X , point Y , point Z ) ) {", "return false ; } }", "for ( final Membership bound : more Bounds ) {", "if ( ! bound . is Within ( point X , point Y , point Z ) ) {", "return false ; } }", "return true ; }", "else if ( Bsquared Minus > NUM_ ) {", "final double inverse 2 A = NUM_ / ( NUM_ * A ) ;", "final double sqrt Term = Math . sqrt ( Bsquared Minus ) ;", "final double t 1 = ( - B + sqrt Term ) * inverse 2 A ;", "final double t 2 = ( - B - sqrt Term ) * inverse 2 A ;", "final double point 1 X = line Vector X * t 1 + x 0 ;", "final double point 1 Y = line Vector Y * t 1 + y 0 ;", "final double point 1 Z = line Vector Z * t 1 + z 0 ;", "boolean point 1 Valid = true ;", "for ( final Membership bound : bounds ) {", "if ( ! bound . is Within ( point 1 X , point 1 Y , point 1 Z ) ) {", "point 1 Valid = false ;", "break ; } }", "if ( point 1 Valid ) {", "for ( final Membership bound : more Bounds ) {", "if ( ! bound . is Within ( point 1 X , point 1 Y , point 1 Z ) ) {", "point 1 Valid = false ;", "break ; } } }", "if ( point 1 Valid ) {", "return true ; }", "final double point 2 X = line Vector X * t 2 + x 0 ;", "final double point 2 Y = line Vector Y * t 2 + y 0 ;", "final double point 2 Z = line Vector Z * t 2 + z 0 ;", "for ( final Membership bound : bounds ) {", "if ( ! bound . is Within ( point 2 X , point 2 Y , point 2 Z ) ) {", "return false ; } }", "for ( final Membership bound : more Bounds ) {", "if ( ! bound . is Within ( point 2 X , point 2 Y , point 2 Z ) ) {", "return false ; } }", "return true ; }", "else {", "return false ; } }"]}
{"ids": "53536", "code": ["public double Sum Outlink Authority Score ( Page page ) {", "List < String > out Links = page . get Outlinks ( ) ;", "double auth Score = NUM_ ;", "for ( int i = NUM_ ; i < out Links . size ( ) ; i ++ ) {", "Page out Link = p Table . get ( out Links . get ( i ) ) ;", "if ( out Link != null ) {", "auth Score += out Link . authority ; } }", "return auth Score ; }"]}
{"ids": "47990", "code": ["public synchronized void end ( ) {", "graphics To Be Drawn . close ( ) ;", "if ( current Graphics != null ) {", "graphics Drawn . append ( current Graphics ) ; }", "graphics Drawn . close When Empty ( ) ;", "if ( printer Job Thread != null && printer Job Thread . is Alive ( ) ) {", "try {", "printer Job Thread . join ( ) ; }", "catch ( Interrupted Exception e ) { } } }"]}
{"ids": "8984", "code": ["public List < File Status > browse ( String file Path ) throws Exception {", "LOG . info ( STR_ + file Path + STR_ + hdfs End Point ) ;", "File System hdfs File System = null ;", "File Status [ ] list Status ;", "try {", "Configuration config = create Config ( ) ;", "hdfs File System = get File System ( config ) ;", "Path path = new Path ( file Path ) ;", "list Status = hdfs File System . list Status ( path ) ; }", "catch ( Exception ex ) {", "LOG . error ( STR_ + file Path , ex . get Message ( ) ) ;", "throw new Exception ( STR_ + ex . get Message ( ) ) ; }", "finally {", "if ( hdfs File System != null ) hdfs File System . close ( ) ; }", "return Arrays . as List ( list Status ) ; }"]}
{"ids": "68638", "code": ["public Eip Model Wizard Initial Object Creation Page ( String page Id ) {", "super ( page Id ) ; }"]}
{"ids": "16068", "code": ["private static void check Permission ( ) throws Security Exception {", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm != null ) {", "sm . check Permission ( new Joda Time Permission ( STR_ ) ) ; } }"]}
{"ids": "14556", "code": ["private void store Password ( String password ) {", "if ( is Store && shared State != null ) {", "shared State . put ( get Pwd Key ( ) , password ) ; } }"]}
{"ids": "48099", "code": ["void delete Child ( Policy Node child Node ) {", "if ( is Immutable ) {", "throw new Illegal State Exception ( STR_ ) ; }", "m Children . remove ( child Node ) ; }"]}
{"ids": "43519", "code": ["public External Process Result await Termination And Result ( int timeout Ms , boolean destroy On Error ) throws Interrupted Exception , Timeout Exception , Operation Cancellation , IO Exception {", "await Termination ( timeout Ms , destroy On Error ) ;", "return new External Process Result ( process . exit Value ( ) , get Std Out Bytes ( ) , get Std Err Bytes ( ) ) ; }"]}
{"ids": "8363", "code": ["public void refresh Inherited Methods ( Set modified Super Expandos ) {", "for ( Iterator i = modified Super Expandos . iterator ( ) ; i . has Next ( ) ; ) {", "Expando Meta Class super Expando = ( Expando Meta Class ) i . next ( ) ;", "if ( super Expando != this ) {", "refresh Inherited Methods ( super Expando ) ; } } }"]}
{"ids": "7199", "code": ["public static List < Fragment > parse Placeholder ( String parse String ) throws Placeholder Parse Exception {", "List < Fragment > result = new Array List < Fragment > ( ) ;", "int curr Output Index = NUM_ ;", "int curr Search Index = NUM_ ;", "while ( true ) {", "if ( curr Search Index == parse String . length ( ) ) {", "break ; }", "int start Index = parse String . index Of ( STR_ , curr Search Index ) ;", "if ( start Index == - NUM_ ) {", "if ( curr Output Index < parse String . length ( ) ) {", "String end String = parse String . substring ( curr Output Index , parse String . length ( ) ) ;", "Text Fragment text Fragment = new Text Fragment ( end String ) ;", "result . add ( text Fragment ) ; }", "break ; }", "if ( start Index > NUM_ ) {", "String text So Far = parse String . substring ( curr Output Index , start Index ) ;", "if ( text So Far . length ( ) != NUM_ ) {", "result . add ( new Text Fragment ( text So Far ) ) ; } }", "if ( ( start Index > NUM_ ) && ( parse String . char At ( start Index - NUM_ ) == STR_ ) ) {", "curr Output Index = start Index + NUM_ ;", "curr Search Index = start Index + NUM_ ;", "continue ; }", "int end Index = parse String . index Of ( STR_ , start Index ) ;", "if ( end Index == - NUM_ ) {", "throw new Placeholder Parse Exception ( STR_ + parse String . substring ( start Index , parse String . length ( ) ) + STR_ ) ; }", "String between = parse String . substring ( start Index + NUM_ , end Index ) ;", "Parameter Fragment parameter Fragment = new Parameter Fragment ( between ) ;", "result . add ( parameter Fragment ) ;", "curr Output Index = end Index + NUM_ ;", "curr Search Index = end Index ; }", "Linked List < Fragment > fragments = new Linked List < Fragment > ( ) ;", "fragments . add ( result . get ( NUM_ ) ) ;", "for ( int i = NUM_ ; i < result . size ( ) ; i ++ ) {", "Fragment fragment = result . get ( i ) ;", "if ( ! ( result . get ( i ) instanceof Text Fragment ) ) {", "fragments . add ( fragment ) ;", "continue ; }", "if ( ! ( fragments . get Last ( ) instanceof Text Fragment ) ) {", "fragments . add ( fragment ) ;", "continue ; }", "Text Fragment text Fragment = ( Text Fragment ) fragments . get Last ( ) ;", "fragments . remove Last ( ) ;", "fragments . add ( new Text Fragment ( text Fragment . get Value ( ) + fragment . get Value ( ) ) ) ; }", "return fragments ; }"]}
{"ids": "25404", "code": ["@ Override protected void failed ( ) {", "relation . set Canceled ( true ) ;", "super . failed ( ) ; }"]}
{"ids": "2975", "code": ["private void route Single Get Request ( Request And Response request And Response , String uri ) throws IO Exception , Servlet Exception {", "if ( uri . starts With ( STR_ ) ) {", "handle Html Show Notebooks ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Show Quotations ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Show Sources ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Show Source ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Show Notebook ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Search ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Basic Help ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Advanced Help ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Help ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html User Backup Form ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html User Restore Form ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Show Account ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Show Accounts ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Shutdown Form ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Clear Form ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Online Backup Form ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Check For Errors Form ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Show DB Backups ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Offline Db Backup Form ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Json Show Entry ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Json Show Entry Parent ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Json Show Entry Children ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Json Search Notes ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html New Notebook Form ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Nothing ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Could Not Create Note ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Show Restore Db Backup Command ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html Show Signed Out ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Change Password ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Change Account ( request And Response ) ; }", "else if ( uri . starts With ( STR_ ) ) {", "handle Html Close Account ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Json Is Signed In ( request And Response ) ; }", "else if ( uri . equals ( STR_ ) ) {", "handle Html User Restore Frame ( request And Response ) ; }", "else {", "return Html 404 ( request And Response ) ; } }"]}
{"ids": "10081", "code": ["private void change Annotation Document State ( Source Document a Source Document , User a User , Annotation Document State Transition a Annotation Document State Transition ) {", "Annotation Document annotation Document = repository . get Annotation Document ( a Source Document , a User ) ;", "annotation Document . set State ( Annotation Document State Transition . transition ( a Annotation Document State Transition ) ) ;", "try {", "repository . create Annotation Document ( annotation Document ) ; }", "catch ( IO Exception e ) {", "LOG . info ( STR_ ) ; } }"]}
{"ids": "83326", "code": ["boolean remove Edge ( Sparse Edge e ) {", "boolean removed Edge = edges . remove ( e ) ;", "boolean removed Neighbour = neighbours . remove ( e . get Opposite ( this ) ) ;", "if ( removed Edge && removed Neighbour ) return true ;", "else if ( ! removed Edge && ! removed Neighbour ) return false ;", "else throw new Runtime Exception ( STR_ ) ; }"]}
{"ids": "61971", "code": ["public boolean has Descendant ( Pattern pattern ) {", "Queue < B Node > nodes To Process = new Linked List < B Node > ( ) ;", "nodes To Process . add ( this ) ;", "while ( ! nodes To Process . is Empty ( ) ) {", "B Node current Node = nodes To Process . poll ( ) ;", "for ( B Node descendant Node : current Node . get Output Nodes ( ) ) {", "Matcher matcher = pattern . matcher ( descendant Node . get Id ( ) ) ;", "if ( matcher . matches ( ) ) {", "return true ; }", "if ( ! nodes To Process . contains ( descendant Node ) ) {", "nodes To Process . add ( descendant Node ) ; } } }", "return false ; }"]}
{"ids": "49350", "code": ["private static void generate Files ( ) {", "String [ ] class Names ;", "Resource Bundle rules , info ;", "info = Resource Bundle . get Bundle ( STR_ , new Locale ( language , country , valiant ) , Break Iterator RB Control . INSTANCE ) ;", "class Names = info . get String Array ( STR_ ) ;", "rules = Resource Bundle . get Bundle ( STR_ , new Locale ( language , country , valiant ) , Break Iterator RB Control . INSTANCE ) ;", "if ( info . contains Key ( STR_ ) ) {", "generate Data File ( info . get String ( STR_ ) , rules . get String ( STR_ ) , class Names [ NUM_ ] ) ; }", "if ( info . contains Key ( STR_ ) ) {", "generate Data File ( info . get String ( STR_ ) , rules . get String ( STR_ ) , class Names [ NUM_ ] ) ; }", "if ( info . contains Key ( STR_ ) ) {", "generate Data File ( info . get String ( STR_ ) , rules . get String ( STR_ ) , class Names [ NUM_ ] ) ; }", "if ( info . contains Key ( STR_ ) ) {", "generate Data File ( info . get String ( STR_ ) , rules . get String ( STR_ ) , class Names [ NUM_ ] ) ; } }"]}
{"ids": "50404", "code": ["public static boolean is Cglib Proxy ( Object object ) {", "return Class Utils . is Cglib Proxy Class ( object . get Class ( ) ) ; }"]}
{"ids": "77787", "code": ["public static boolean equals ( boolean [ ] field 1 , boolean [ ] field 2 ) {", "if ( field 1 == null || field 1 . length == NUM_ ) {", "return field 2 == null || field 2 . length == NUM_ ; }", "else {", "return Arrays . equals ( field 1 , field 2 ) ; } }"]}
{"ids": "36424", "code": ["public void to Front ( final Workflow Annotation anno ) {", "if ( anno == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "synchronized ( lock ) {", "if ( annotations Draw Order . remove ( anno ) ) {", "annotations Draw Order . add ( anno ) ; }", "if ( annotations Event Order . remove ( anno ) ) {", "annotations Event Order . add ( NUM_ , anno ) ; } } }"]}
{"ids": "73227", "code": ["public synchronized void add Frame ( final Image image , final long frame Duration ) {", "total Duration += frame Duration ;", "frames . add ( new Anim Frame ( image , total Duration ) ) ; }"]}
{"ids": "52338", "code": ["public static String print Code Point As String ( int code Point ) {", "String Builder builder = new String Builder ( NUM_ ) ;", "builder . append ( STR_ ) ;", "try {", "print String Code Point ( builder , code Point ) ; }", "catch ( IO Exception e ) {", "throw new Error ( e ) ; }", "builder . append ( STR_ ) ;", "return builder . to String ( ) ; }"]}
{"ids": "56073", "code": ["private void cleanup Minidump File ( ) {", "if ( ! Crash File Manager . try Mark As Uploaded ( m File To Upload ) ) {", "Log . w ( TAG , STR_ + m File To Upload + STR_ ) ;", "if ( ! m File To Upload . delete ( ) ) {", "Log . w ( TAG , STR_ + m File To Upload ) ; } } }"]}
{"ids": "82899", "code": ["@ Nullable private static Bitmap extract Thumbnail ( Bitmap source , int width , int height ) {", "return extract Thumbnail ( source , width , height , OPTIONS NONE ) ; }"]}
{"ids": "28790", "code": ["private void write Pkg Info ( ) throws Build Exception {", "File pkg Info = new File ( m Contents Dir , STR_ ) ;", "Print Writer writer = null ;", "try {", "writer = new Print Writer ( new Buffered Writer ( new File Writer ( pkg Info ) ) ) ;", "writer . print ( bundle Properties . get CF Bundle Package Type ( ) ) ;", "writer . println ( bundle Properties . get CF Bundle Signature ( ) ) ;", "writer . flush ( ) ; }", "catch ( IO Exception ex ) {", "throw new Build Exception ( STR_ + ex ) ; }", "finally {", "m File Utils . close ( writer ) ; } }"]}
{"ids": "7322", "code": ["public Event Bean [ ] to Array ( ) {", "if ( first Event == null ) {", "return new Event Bean [ NUM_ ] ; }", "if ( additional Events == null ) {", "return new Event Bean [ ] { first Event } ; }", "Event Bean [ ] events = new Event Bean [ NUM_ + additional Events . size ( ) ] ;", "events [ NUM_ ] = first Event ;", "int count = NUM_ ;", "for ( Event Bean the Event : additional Events ) {", "events [ count ] = the Event ;", "count ++ ; }", "return events ; }"]}
{"ids": "48190", "code": ["private byte [ ] decode ( Der Input Stream in ) throws IO Exception {", "Der Value val = in . get Der Value ( ) ;", "byte [ ] der Encoding = val . to Byte Array ( ) ;", "der Encoding [ NUM_ ] = Der Value . tag Set Of ;", "Der Input Stream der In = new Der Input Stream ( der Encoding ) ;", "Der Value [ ] der Vals = der In . get Set ( NUM_ , true ) ;", "PKCS 9 Attribute attrib ;", "Object Identifier oid ;", "boolean reuse Encoding = true ;", "for ( int i = NUM_ ; i < der Vals . length ; i ++ ) {", "try {", "attrib = new PKCS 9 Attribute ( der Vals [ i ] ) ; }", "catch ( Parsing Exception e ) {", "if ( ignore Unsupported Attributes ) {", "reuse Encoding = false ;", "continue ; }", "else {", "throw e ; } }", "oid = attrib . get OID ( ) ;", "if ( attributes . get ( oid ) != null ) throw new IO Exception ( STR_ + oid ) ;", "if ( permitted Attributes != null && ! permitted Attributes . contains Key ( oid ) ) throw new IO Exception ( STR_ + oid + STR_ ) ;", "attributes . put ( oid , attrib ) ; }", "return reuse Encoding ? der Encoding : generate Der Encoding ( ) ; }"]}
{"ids": "9356", "code": ["@ Override public Categorical Results clone ( ) {", "Categorical Results copy = new Categorical Results ( n ) ;", "copy . probabilities = Arrays . copy Of ( probabilities , probabilities . length ) ;", "return copy ; }"]}
{"ids": "62932", "code": ["private boolean type Special Char ( char c ) {", "switch ( c ) {", "case STR_ :", "controller . key Press ( Key Event . VK TAB ) ;", "controller . key Release ( Key Event . VK TAB ) ;", "return true ;", "case STR_ :", "controller . key Press ( Key Event . VK ENTER ) ;", "controller . key Release ( Key Event . VK ENTER ) ;", "return true ;", "default :", "return false ; } }"]}
{"ids": "67627", "code": ["protected static boolean eq ( Object o 1 , Object o 2 ) {", "return o 1 == null ? o 2 == null : o 1 . equals ( o 2 ) ; }"]}
{"ids": "55209", "code": ["public Iterable < Notification > skip ( @ Nonnull final Iterable < Notification > notifications , final long start Id , final boolean inclusive , final int limit Size ) {", "Objects . require Non Null ( notifications ) ;", "final int position = index Of ( notifications , start Id ) ;", "if ( position == - NUM_ ) {", "return Iterables . limit ( notifications , limit Size ) ; }", "if ( inclusive ) {", "return Iterables . limit ( Iterables . skip ( notifications , position ) , limit Size ) ; }", "return Iterables . limit ( Iterables . skip ( notifications , position + NUM_ ) , limit Size ) ; }"]}
{"ids": "23984", "code": ["public boolean write Data ( Pdx Writer writer , Object obj ) {", "if ( is Relevant ( obj . get Class ( ) ) ) {", "write Data ( writer , obj , get Class Info ( obj . get Class ( ) ) ) ;", "return true ; }", "return false ; }"]}
{"ids": "64261", "code": ["protected final void write C ( Byte Buffer buf , int value ) {", "buf . put ( ( byte ) value ) ; }"]}
{"ids": "12610", "code": ["public Viterbi Point ( Item item ) {", "this . item = item ; }"]}
{"ids": "66421", "code": ["protected void paint Content Border Bottom Edge ( Graphics g , int x , int y , int w , int h , boolean draw Broken , Rectangle sel Rect , boolean is Content Border Painted ) {", "if ( is Content Border Painted ) {", "g . set Color ( dark Shadow ) ;", "g . fill Rect ( x , y + h - NUM_ , w - NUM_ , NUM_ ) ; } }"]}
{"ids": "40123", "code": ["public RSA Public Key parse PEM Public Key ( String pem ) throws General Security Exception {", "try {", "byte [ ] bs = decode Ascii Armored PEM ( pem ) ;", "Byte Buffer data = Byte Buffer . wrap ( bs ) ;", "final ASN 1 Object ob = asn 1 Parser . parse ASN 1 ( data ) ;", "final List < ASN 1 Object > seq = asn 1 Object To Sequence ( ob , NUM_ ) ;", "final Big Integer modulus = asn 1 Object To Big Int ( seq . get ( NUM_ ) ) ;", "final Big Integer exponent = asn 1 Object To Big Int ( seq . get ( NUM_ ) ) ;", "return create Key From Modulus And Exponent ( modulus , exponent ) ; }", "catch ( Illegal Argument Exception e ) {", "throw new Invalid Key Exception ( ) ; } }"]}
{"ids": "64944", "code": ["public static < T > Parallel Publisher < T > from ( Publisher < ? extends T > source , boolean ordered , int parallelism ) {", "return from ( source , ordered , parallelism , Px . buffer Size ( ) , Px . default Queue Supplier ( Px . buffer Size ( ) ) ) ; }"]}
{"ids": "70638", "code": ["public void add To Queue ( Var var ) {", "add To Queue ( Collections . singleton ( var ) ) ; }"]}
{"ids": "48778", "code": ["public String canonicalize ( String simple URL ) {", "String result URL = simple URL ;", "if ( simple URL . starts With ( STR_ ) ) {", "result URL = STR_ + simple URL ; }", "else if ( simple URL . starts With ( STR_ ) ) {", "result URL = STR_ + simple URL ; }", "else if ( simple URL . starts With ( STR_ ) ) {", "result URL = STR_ + simple URL ; }", "else if ( ! has Protocol Name ( simple URL ) ) {", "if ( is Simple Host Name ( simple URL ) ) {", "simple URL = STR_ + simple URL + STR_ ; }", "result URL = STR_ + simple URL ; }", "return result URL ; }"]}
{"ids": "86891", "code": ["@ Request Processing ( value = STR_ , method = HTTP Request Method . GET ) @ Before ( advice Class = { Stopwatch Start Advice . class , Anonymous View Check . class , User Block Check . class } ) @ After ( advice Class = Stopwatch End Advice . class ) public void show Home Points ( final HTTP Request Context context , final Http Servlet Request request , final Http Servlet Response response , final String user Name ) throws Exception {", "final JSON Object user = ( JSON Object ) request . get Attribute ( User . USER ) ;", "request . set Attribute ( Keys . TEMAPLTE DIR NAME , Symphonys . get ( STR_ ) ) ;", "final Abstract Free Marker Renderer renderer = new Skin Renderer ( ) ;", "context . set Renderer ( renderer ) ;", "renderer . set Template Name ( STR_ ) ;", "final Map < String , Object > data Model = renderer . get Data Model ( ) ;", "filler . fill Header And Footer ( request , response , data Model ) ;", "String page Num Str = request . get Parameter ( STR_ ) ;", "if ( Strings . is Empty Or Null ( page Num Str ) || ! Strings . is Numeric ( page Num Str ) ) {", "page Num Str = STR_ ; }", "final int page Num = Integer . value Of ( page Num Str ) ;", "final int page Size = Symphonys . get Int ( STR_ ) ;", "final int window Size = Symphonys . get Int ( STR_ ) ;", "fill Home User ( data Model , user ) ;", "avatar Query Service . fill User Avatar URL ( user ) ;", "final String following Id = user . opt String ( Keys . OBJECT ID ) ;", "data Model . put ( Follow . FOLLOWING ID , following Id ) ;", "final JSON Object user Points Result = pointtransfer Query Service . get User Points ( user . opt String ( Keys . OBJECT ID ) , page Num , page Size ) ;", "final List < JSON Object > user Points = Collection Utils . < JSON Object > json Array To List ( user Points Result . opt JSON Array ( Keys . RESULTS ) ) ;", "data Model . put ( Common . USER HOME POINTS , user Points ) ;", "final boolean is Logged In = ( Boolean ) data Model . get ( Common . IS LOGGED IN ) ;", "if ( is Logged In ) {", "final JSON Object current User = ( JSON Object ) data Model . get ( Common . CURRENT USER ) ;", "final String follower Id = current User . opt String ( Keys . OBJECT ID ) ;", "final boolean is Following = follow Query Service . is Following ( follower Id , user . opt String ( Keys . OBJECT ID ) ) ;", "data Model . put ( Common . IS FOLLOWING , is Following ) ; }", "user . put ( User Ext . USER T CREATE TIME , new Date ( user . get Long ( Keys . OBJECT ID ) ) ) ;", "final int points Cnt = user Points Result . opt Int ( Pagination . PAGINATION RECORD COUNT ) ;", "final int page Count = ( int ) Math . ceil ( ( double ) points Cnt / ( double ) page Size ) ;", "final List < Integer > page Nums = Paginator . paginate ( page Num , page Size , page Count , window Size ) ;", "if ( ! page Nums . is Empty ( ) ) {", "data Model . put ( Pagination . PAGINATION FIRST PAGE NUM , page Nums . get ( NUM_ ) ) ;", "data Model . put ( Pagination . PAGINATION LAST PAGE NUM , page Nums . get ( page Nums . size ( ) - NUM_ ) ) ; }", "data Model . put ( Pagination . PAGINATION CURRENT PAGE NUM , page Num ) ;", "data Model . put ( Pagination . PAGINATION PAGE COUNT , page Count ) ;", "data Model . put ( Pagination . PAGINATION PAGE NUMS , page Nums ) ; }"]}
{"ids": "45644", "code": ["private static double norm ( final double [ ] v ) {", "double agg = NUM_ ;", "for ( int i = NUM_ ; i < v . length ; i ++ ) {", "agg += ( v [ i ] * v [ i ] ) ; }", "return Math . sqrt ( agg ) ; }"]}
{"ids": "12509", "code": ["private double mean ( double [ ] vec ) {", "double result = NUM_ ;", "for ( int i = NUM_ ; i < vec . length ; i ++ ) result += vec [ i ] ;", "return result / vec . length ; }"]}
{"ids": "1922", "code": ["private Sprite ( float x Pos , float y Pos , float x Vel , float y Vel , Image ... sprites ) {", "if ( sprites != null ) sprite Frame = new Image View ( sprites [ NUM_ ] ) ;", "player States . add All ( Arrays . as List ( sprites ) ) ;", "sprite Frame . set Translate X ( x Pos ) ;", "sprite Frame . set Translate Y ( y Pos ) ;", "this . x Pos = x Pos ;", "this . y Pos = y Pos ;", "this . x Vel = x Vel ;", "this . y Vel = y Vel ; }"]}
{"ids": "39955", "code": ["protected static Sync Token create Sync Token ( String date String , @ Nullable String uuid ) {", "try {", "return new Sync Token ( DB DATE FORMAT . parse ( date String ) , uuid ) ; }", "catch ( Parse Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "41090", "code": ["private static boolean equals Handles Nulls ( Object a , Object b ) {", "return a == b || ( a != null && a . equals ( b ) ) ; }"]}
{"ids": "28294", "code": ["public void init ( String flagz Directory ) throws Flag Exception , Etcd Flag Field Updater Exception {", "this . directory Prefix = More Objects . first Non Null ( flagz Directory , directory Flag . get ( ) ) ;", "client = new Etcd Client ( uris . to Array ( new URI [ uris . size ( ) ] ) ) ;", "client . set Retry Handler ( retry Policy ) ;", "initial Set All Flagz ( ) ; }"]}
{"ids": "71019", "code": ["public static String replace ( String str , char old Char , String new Str ) {", "String Buffer buf = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < str . length ( ) ; i ++ ) {", "char ch = str . char At ( i ) ;", "if ( ch == old Char ) {", "buf . append ( new Str ) ; }", "else {", "buf . append ( ch ) ; } }", "return buf . to String ( ) ; }"]}
{"ids": "30282", "code": ["@ Action ( value = STR_ ) @ Validation Error Page ( value = ERROR ) @ Skip Validation public String newform ( ) {", "set Login Dept ( ) ;", "Simple Date Format sdf = new Simple Date Format ( STR_ ) ;", "try {", "cut Off Date = sdf . parse ( collections Util . get App Config Value ( Collection Constants . MODULE NAME COLLECTIONS CONFIG , Collection Constants . APPCONFIG VALUE COLLECTIONDATAENTRYCUTOFFDATE ) ) ; }", "catch ( Parse Exception e ) {", "LOGGER . error ( get Text ( STR_ ) + e . get Message ( ) ) ; }", "return NEW ; }"]}
{"ids": "85360", "code": ["public Type Declaration canonicalize ( ) {", "List < Type > sts = get Satisfied Types ( ) ;", "if ( sts . is Empty ( ) ) {", "return unit . get Anything Declaration ( ) ; }", "else if ( sts . size ( ) == NUM_ ) {", "Type st = sts . get ( NUM_ ) ;", "if ( st . is Exactly Nothing ( ) ) {", "return unit . get Nothing Declaration ( ) ; } }", "for ( Type st : sts ) {", "if ( st . is Union ( ) ) {", "List < Type > case Types = st . get Case Types ( ) ;", "List < Type > ulist = new Array List < Type > ( case Types . size ( ) ) ;", "for ( Type ct : case Types ) {", "List < Type > ilist = new Array List < Type > ( sts . size ( ) ) ;", "for ( Type pt : sts ) {", "if ( pt == st ) {", "add To Intersection ( ilist , ct , unit ) ; }", "else {", "add To Intersection ( ilist , pt , unit ) ; } }", "Type it = canonical Intersection ( ilist , unit ) ;", "add To Union ( ulist , it ) ; }", "Type Declaration result = new Union Type ( unit ) ;", "result . set Case Types ( ulist ) ;", "return result ; } }", "return this ; }"]}
{"ids": "70667", "code": ["public static void open Other Uri ( final String url , final Activity activity ) {", "Intent intent = new Intent ( Intent . ACTION VIEW , Uri . parse ( url ) ) ;", "activity . start Activity ( intent ) ; }"]}
{"ids": "77280", "code": ["public static boolean wait For All Active And Live Replicas ( Zk State Reader zk State Reader , int timeout In Ms ) {", "return wait For All Active And Live Replicas ( zk State Reader , null , timeout In Ms ) ; }"]}
{"ids": "21014", "code": ["public boolean check For Rp ( ) {", "return Null Column Value Getter . is Not Null Value ( get Rp Copy Name ( ) ) ; }"]}
{"ids": "62903", "code": ["public static List < String > split Path ( File file ) {", "List < String > output = new Array List < > ( ) ;", "File current = file ;", "while ( current != null ) {", "output . add ( current . get Name ( ) ) ;", "current = current . get Parent File ( ) ; }", "Collections . reverse ( output ) ;", "return output ; }"]}
{"ids": "84675", "code": ["protected boolean is Compatible ( Taxa taxa , List < Taxon > available Taxa ) {", "for ( int i = NUM_ ; i < taxa . get Taxon Count ( ) ; i ++ ) {", "Taxon taxon = taxa . get Taxon ( i ) ;", "if ( ! available Taxa . contains ( taxon ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "4360", "code": ["public boolean has Map Objects ( ) {", "return map Objects != null && ! map Objects . is Empty ( ) ; }"]}
{"ids": "398", "code": ["public void perform Actions ( ) throws Throwable {", "for ( Throwing . Runnable action : actions ) {", "action . run ( ) ; } }"]}
{"ids": "42148", "code": ["public java . util . Collection < Object Reference > dump Thread Roots ( int width ) {", "return Collections . empty List ( ) ; }"]}
{"ids": "68115", "code": ["private void check Resource Change ( final Resource resource , final Group group , final Callback callback , final Atomic Boolean is Changed ) throws Exception {", "if ( is Changed ( resource , group . get Name ( ) ) ) {", "is Changed . compare And Set ( false , true ) ;", "callback . on Resource Changed ( resource ) ;", "lifecycle Callback . on Resource Changed ( resource ) ; } }"]}
{"ids": "1055", "code": ["private synchronized boolean restart ( ) throws Servlet Exception {", "if ( singelton != null ) singelton . reset ( ) ;", "init Engine ( ) ;", "System . gc ( ) ;", "return true ; }"]}
{"ids": "38800", "code": ["public Sorter ( ) {", "use Default Visual ( ) ;", "set Layout ( new Border Layout ( ) ) ;", "add ( m visual , Border Layout . CENTER ) ;", "m env = Environment . get System Wide ( ) ;", "m stop Requested = new Atomic Boolean ( false ) ; }"]}
{"ids": "53155", "code": ["public static double logpdf ( double x , double mu , double shape ) {", "if ( ! ( x > NUM_ ) || x == Double . POSITIVE INFINITY ) {", "return Double . NEGATIVE INFINITY ; }", "final double v = ( x - mu ) / mu ;", "return v < Double . MAX VALUE ? NUM_ * Math . log ( shape / ( Math Util . TWOPI * x * x * x ) ) - shape * v * v / ( NUM_ * x ) : Double . NEGATIVE INFINITY ; }"]}
{"ids": "27546", "code": ["public T find By Commit Counter ( final long commit Counter ) {", "if ( commit Counter < NUM_ ) throw new Illegal Argument Exception ( ) ;", "final Lock lock = read Lock ( ) ;", "lock . lock ( ) ;", "try {", "@ Suppress Warnings ( STR_ ) final I Tuple Iterator < T > itr = range Iterator ( null , null , NUM_ , I Range Query . DEFAULT | I Range Query . REVERSE , null ) ;", "while ( itr . has Next ( ) ) {", "final I Tuple < T > t = itr . next ( ) ;", "final T r = t . get Object ( ) ;", "final I Root Block View rb = r . get Root Block ( ) ;", "if ( rb . get Commit Counter ( ) <= commit Counter ) {", "return r ; } }", "return null ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "44007", "code": ["public static String trace Excetion ( Throwable ex ) {", "final Writer result = new String Writer ( ) ;", "final Print Writer print Writer = new Print Writer ( result ) ;", "ex . print Stack Trace ( print Writer ) ;", "String stacktrace = result . to String ( ) ;", "Log . e ( TAG , STR_ + stacktrace ) ;", "return stacktrace ; }"]}
{"ids": "67900", "code": ["public static Pair < String , String > split ( String var Name ) {", "int split Index = var Name . index Of ( STR_ ) ;", "if ( split Index < NUM_ ) {", "return null ; }", "String left = var Name . substring ( NUM_ , split Index ) ;", "String right = var Name . substring ( split Index + NUM_ ) ;", "if ( left == null || left . length ( ) == NUM_ || right == null || right . length ( ) == NUM_ ) {", "return null ; }", "return Pair . of ( left , right ) ; }"]}
{"ids": "44900", "code": ["public static int update ( String where , Object [ ] args , V sets , Class < ? extends Bean > t ) {", "Table mapping = ( Table ) t . get Annotation ( Table . class ) ;", "if ( mapping == null ) {", "if ( log . is Error Enabled ( ) ) log . error ( STR_ + t + STR_ ) ;", "return - NUM_ ; }", "if ( ! X . is Empty ( mapping . name ( ) ) ) {", "return update Table ( mapping . name ( ) , where , args , sets ) ; }", "return - NUM_ ; }"]}
{"ids": "7021", "code": ["private void stop Video Fading Edges Screen Timer ( ) {", "if ( null != m Video Fading Edges Timer ) {", "m Video Fading Edges Timer . cancel ( ) ;", "m Video Fading Edges Timer = null ;", "m Video Fading Edges Timer Task = null ; } }"]}
{"ids": "71862", "code": ["public void remove Listener ( final Timeout Event Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "39095", "code": ["protected static void process Generic Properties Creator Props ( File props File ) {", "try {", "Properties exp Props = new Properties ( ) ;", "Buffered Input Stream bi = new Buffered Input Stream ( new File Input Stream ( props File ) ) ;", "exp Props . load ( bi ) ;", "bi . close ( ) ;", "bi = null ;", "Properties GPC Input Props = Generic Properties Creator . get Global Input Properties ( ) ;", "Set < Object > keys = exp Props . key Set ( ) ;", "Iterator < Object > keys I = keys . iterator ( ) ;", "while ( keys I . has Next ( ) ) {", "String key = ( String ) keys I . next ( ) ;", "String existing Val = GPC Input Props . get Property ( key , STR_ ) ;", "if ( existing Val . length ( ) > NUM_ ) {", "String new Val = exp Props . get Property ( key ) ;", "if ( existing Val . index Of ( new Val ) < NUM_ ) {", "new Val = existing Val + STR_ + new Val ;", "GPC Input Props . put ( key , new Val ) ; } }", "else {", "String new Val = exp Props . get Property ( key ) ;", "GPC Input Props . put ( key , new Val ) ; } } }", "catch ( Exception ex ) { } }"]}
{"ids": "79076", "code": ["private synchronized void add Table Lock Object ( Absolute Table Identifier absolute Table Identifier ) {", "if ( null == table Lock Map . get ( absolute Table Identifier ) ) {", "table Lock Map . put ( absolute Table Identifier , new Object ( ) ) ; } }"]}
{"ids": "24390", "code": ["public static void join ( final Async Invocation < ? > async , final long timeout Milliseconds ) {", "join ( async . get Thread ( ) , timeout Milliseconds ) ; }"]}
{"ids": "48641", "code": ["void define ( Member Definition field , int slot , int from , int to ) {", "if ( from >= to ) {", "return ; }", "for ( int i = NUM_ ; i < len ; i ++ ) {", "if ( ( locals [ i ] . field == field ) && ( locals [ i ] . slot == slot ) && ( from <= locals [ i ] . to ) && ( to >= locals [ i ] . from ) ) {", "locals [ i ] . from = Math . min ( locals [ i ] . from , from ) ;", "locals [ i ] . to = Math . max ( locals [ i ] . to , to ) ;", "return ; } }", "if ( len == locals . length ) {", "Local Variable newlocals [ ] = new Local Variable [ len * NUM_ ] ;", "System . arraycopy ( locals , NUM_ , newlocals , NUM_ , len ) ;", "locals = newlocals ; }", "locals [ len ++ ] = new Local Variable ( field , slot , from , to ) ; }"]}
{"ids": "46465", "code": ["public void mouse Pressed ( Mouse Event e ) {", "int nclicks = Swing Utilities 2 . get Adjusted Click Count ( get Component ( ) , e ) ;", "if ( Swing Utilities . is Left Mouse Button ( e ) ) {", "if ( e . is Consumed ( ) ) {", "should Handle Release = true ; }", "else {", "should Handle Release = false ;", "adjust Caret And Focus ( e ) ;", "if ( nclicks == NUM_ && Swing Utilities 2 . can Event Access System Clipboard ( e ) ) {", "select Word ( e ) ; } } } }"]}
{"ids": "8471", "code": ["public Object apply ( String source , int line No , int column No , Object func Body , Vector param Names , Vector arguments ) throws BSF Exception {", "Object object = eval ( source , line No , column No , func Body ) ;", "if ( object instanceof Closure ) {", "Closure closure = ( Closure ) object ;", "return closure . call ( arguments . to Array ( ) ) ; }", "return object ; }"]}
{"ids": "871", "code": ["public Set key Set ( ) {", "return total Key Set ( ) ; }"]}
{"ids": "60218", "code": ["public void output ( List list , Writer out ) throws IO Exception {", "print Content Range ( out , list , NUM_ , list . size ( ) , NUM_ , create Namespace Stack ( ) ) ;", "out . flush ( ) ; }"]}
{"ids": "30292", "code": ["public boolean consume Encumbrance Budget ( final Map < String , Object > details Map ) {", "if ( details Map == null ) throw new Validation Exception ( Arrays . as List ( new Validation Error ( STR_ , STR_ ) ) ) ;", "details Map . put ( Constants . CONSUMEORRELEASE , true ) ;", "final Big Decimal bd = get Details ( details Map ) ;", "return bd . int Value ( ) == NUM_ ; }"]}
{"ids": "15904", "code": ["private int [ ] mod ( int [ ] a , int [ ] f ) {", "int df = compute Degree ( f ) ;", "if ( df == - NUM_ ) {", "throw new Arithmetic Exception ( STR_ ) ; }", "int [ ] result = new int [ a . length ] ;", "int hc = head Coefficient ( f ) ;", "hc = field . inverse ( hc ) ;", "System . arraycopy ( a , NUM_ , result , NUM_ , result . length ) ;", "while ( df <= compute Degree ( result ) ) {", "int [ ] q ;", "int coeff = field . mult ( head Coefficient ( result ) , hc ) ;", "q = mult With Monomial ( f , compute Degree ( result ) - df ) ;", "q = mult With Element ( q , coeff ) ;", "result = add ( q , result ) ; }", "return result ; }"]}
{"ids": "67696", "code": ["public static void append Hex Java Script Representation ( String Builder sb , char c ) {", "sb . append ( STR_ ) ;", "String val = Integer . to Hex String ( c ) ;", "for ( int j = val . length ( ) ; j < NUM_ ; j ++ ) {", "sb . append ( STR_ ) ; }", "sb . append ( val ) ; }"]}
{"ids": "83117", "code": ["private void print Bootstrap Map ( ) {", "LOG . info ( STR_ ) ;", "for ( Integer i : chain Map . key Set ( ) ) {", "LOG . info ( String . format ( STR_ , i , chain Map . get ( i ) ) ) ; } }"]}
{"ids": "45721", "code": ["private P filter Large Value Sets ( Filter Spec fs , Meta Data Object root Meta , F root , boolean force Entity Based , Join Type default Predicate Join Type ) {", "Array List < Filter Spec > specs = new Array List < > ( ) ;", "List < ? > list = new Array List < > ( ( Collection < ? > ) fs . get Value ( ) ) ;", "for ( int i = NUM_ ; i < list . size ( ) ; i += ORACLE PARAM LIMIT ) {", "int next Offset = i + Math . min ( list . size ( ) - i , ORACLE PARAM LIMIT ) ;", "List < ? > batch List = list . sub List ( i , next Offset ) ;", "specs . add ( new Filter Spec ( fs . get Attribute Path ( ) , fs . get Operator ( ) , batch List ) ) ; }", "Filter Spec or Spec = Filter Spec . or ( specs ) ;", "return filter Spec List To Predicate ( root Meta , root , or Spec , force Entity Based , default Predicate Join Type ) ; }"]}
{"ids": "24885", "code": ["protected void add Tags ( E data , Builder builder ) {", "Platform Ident platform Ident = cached Data Service . get Platform Ident For Id ( data . get Platform Ident ( ) ) ;", "builder . tag ( Series . TAG AGENT ID , String . value Of ( data . get Platform Ident ( ) ) ) ;", "if ( null != platform Ident ) {", "builder . tag ( Series . TAG AGENT NAME , platform Ident . get Agent Name ( ) ) ; } }"]}
{"ids": "4261", "code": ["public int compare ( String s 1 , String s 2 ) {", "final Matcher match 1 = MATCH ID PATTERN . matcher ( s 1 ) ;", "final Matcher match 2 = MATCH ID PATTERN . matcher ( s 2 ) ;", "final boolean match 1 matches = match 1 . matches ( ) ;", "final boolean match 2 matches = match 2 . matches ( ) ;", "if ( match 1 matches ^ match 2 matches ) {", "return ( match 1 matches ) ? NUM_ : - NUM_ ; }", "else if ( match 1 matches && match 2 matches ) {", "int signature 1 = Integer . parse Int ( match 1 . group ( NUM_ ) ) ;", "int signature 2 = Integer . parse Int ( match 2 . group ( NUM_ ) ) ;", "int comparison = ( signature 1 < signature 2 ) ? - NUM_ : ( signature 1 > signature 2 ) ? NUM_ : NUM_ ;", "if ( comparison == NUM_ ) {", "int start 1 = Integer . parse Int ( match 1 . group ( NUM_ ) ) ;", "int start 2 = Integer . parse Int ( match 2 . group ( NUM_ ) ) ;", "comparison = ( start 1 < start 2 ) ? - NUM_ : ( start 1 > start 2 ) ? NUM_ : NUM_ ; }", "if ( comparison == NUM_ ) {", "int end 1 = Integer . parse Int ( match 1 . group ( NUM_ ) ) ;", "int end 2 = Integer . parse Int ( match 2 . group ( NUM_ ) ) ;", "comparison = ( end 1 < end 2 ) ? - NUM_ : ( end 1 > end 2 ) ? NUM_ : NUM_ ; }", "return comparison ; }", "else {", "int seq Length 1 = s 1 . length ( ) , n 2 = s 2 . length ( ) ;", "for ( int i 1 = NUM_ , i 2 = NUM_ ; i 1 < seq Length 1 && i 2 < n 2 ; i 1 ++ , i 2 ++ ) {", "char c 1 = s 1 . char At ( i 1 ) ;", "char c 2 = s 2 . char At ( i 2 ) ;", "if ( c 1 != c 2 ) {", "c 1 = Character . to Upper Case ( c 1 ) ;", "c 2 = Character . to Upper Case ( c 2 ) ;", "if ( c 1 != c 2 ) {", "c 1 = Character . to Lower Case ( c 1 ) ;", "c 2 = Character . to Lower Case ( c 2 ) ;", "if ( c 1 != c 2 ) {", "return c 1 - c 2 ; } } } }", "return seq Length 1 - n 2 ; } }"]}
{"ids": "75892", "code": ["private static int load Build Number ( Context context , Package Manager package Manager ) {", "try {", "Application Info app Info = package Manager . get Application Info ( context . get Package Name ( ) , Package Manager . GET META DATA ) ;", "Bundle meta Data = app Info . meta Data ;", "if ( meta Data != null ) {", "return meta Data . get Int ( BUNDLE BUILD NUMBER , NUM_ ) ; } }", "catch ( Package Manager . Name Not Found Exception e ) {", "L . e ( STR_ ) ;", "e . print Stack Trace ( ) ; }", "return NUM_ ; }"]}
{"ids": "75882", "code": ["protected Http URL Connection configure Request ( final Http URL Connection request ) {", "if ( credentials != null ) request . set Request Property ( HEADER AUTHORIZATION , credentials ) ;", "request . set Request Property ( HEADER USER AGENT , user Agent ) ;", "request . set Request Property ( HEADER ACCEPT , get Header Accept ( ) ) ;", "return request ; }"]}
{"ids": "29277", "code": ["public static String convert To Title ( int n ) {", "if ( n <= NUM_ ) return STR_ ;", "String Builder title = new String Builder ( ) ;", "while ( n > NUM_ ) {", "n -- ;", "int r = n % NUM_ ;", "title . insert ( NUM_ , ( char ) ( STR_ + r ) ) ;", "n = n / NUM_ ; }", "return title . to String ( ) ; }"]}
{"ids": "67805", "code": ["static public void process ( String input , String output , String pack File Name ) {", "process ( new Settings ( ) , input , output , pack File Name ) ; }"]}
{"ids": "86739", "code": ["public static long [ ] as Long Array ( final List < Long > l ) {", "final long [ ] a = new long [ l . size ( ) ] ;", "for ( int i = NUM_ ; i < a . length ; i ++ ) {", "a [ i ] = l . get ( i ) ; }", "return a ; }"]}
{"ids": "37272", "code": ["private void update Menu State ( ) {", "m append And . set Enabled ( m criterium Node . allow Append ( C And Criterium . class ) ) ;", "m append Or . set Enabled ( m criterium Node . allow Append ( C Or Criterium . class ) ) ;", "m append Not . set Enabled ( m criterium Node . allow Append ( C Not Criterium . class ) ) ;", "m insert And . set Enabled ( m criterium Node . allow Insert ( C And Criterium . class ) ) ;", "m insert Or . set Enabled ( m criterium Node . allow Insert ( C Or Criterium . class ) ) ;", "m insert Not . set Enabled ( m criterium Node . allow Insert ( C Not Criterium . class ) ) ;", "m condition Submenu . set Enabled ( m criterium Node . allow Append ( C Condition Criterium . class ) ) ;", "m remove . set Enabled ( ! m criterium Node . is Root ( ) ) ;", "m remove All . set Enabled ( m criterium Node . get Child Count ( ) != NUM_ ) ; }"]}
{"ids": "31610", "code": ["public static String format List To String ( List < String > list ) {", "String result = STR_ ;", "for ( String s : list ) result += s + STR_ ;", "result = result . trim ( ) ;", "return result . to Upper Case ( ) ; }"]}
{"ids": "45987", "code": ["@ Override public void remove Notification Listener ( Notification Listener listener ) throws Listener Not Found Exception {", "if ( SNMP ADAPTOR LOGGER . is Loggable ( Level . FINEST ) ) {", "SNMP ADAPTOR LOGGER . logp ( Level . FINEST , dbg Tag , STR_ , STR_ + listener ) ; }", "notif Broadcaster . remove Notification Listener ( listener ) ; }"]}
{"ids": "35670", "code": ["public static boolean is Newer ( long ts 1 , long size 1 , long ts 2 , long size 2 ) {", "return ts 1 > ts 2 || ( ts 1 == ts 2 && size 1 < size 2 ) ; }"]}
{"ids": "85421", "code": ["public static List < Module Spec > expand Spec Wildcards ( File dir , List < Module Spec > modules , Backend for Backend ) {", "List < File > dirs = new Array List < File > ( ) ;", "dirs . add ( dir ) ;", "return expand Spec Wildcards ( dirs , modules , for Backend ) ; }"]}
{"ids": "8878", "code": ["private static String report List Contents ( Collection < Process Error State Info > err List ) {", "if ( err List == null ) return null ;", "String Builder builder = new String Builder ( ) ;", "Iterator < Process Error State Info > iter = err List . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Process Error State Info entry = iter . next ( ) ;", "String condition ;", "switch ( entry . condition ) {", "case Activity Manager . Process Error State Info . CRASHED :", "condition = STR_ ;", "break ;", "case Activity Manager . Process Error State Info . NOT RESPONDING :", "condition = STR_ ;", "break ;", "default :", "condition = STR_ ;", "break ; }", "builder . append ( String . format ( STR_ , entry . process Name , condition , entry . short Msg ) ) ;", "if ( entry . condition == Activity Manager . Process Error State Info . CRASHED ) {", "builder . append ( String . format ( STR_ , entry . stack Trace ) ) ; }", "builder . append ( STR_ ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "39622", "code": ["@ Override public boolean start ( ) throws IO Exception {", "LOG . info ( STR_ , initial Checkpoint Generator ) ;", "try {", "Kinesis Reader Checkpoint initial Checkpoint = initial Checkpoint Generator . generate ( kinesis ) ;", "List < Shard Records Iterator > iterators = new Array List ( ) ;", "for ( Shard Checkpoint checkpoint : initial Checkpoint ) {", "iterators . add ( checkpoint . get Shard Records Iterator ( kinesis ) ) ; }", "shard Iterators = new Round Robin < > ( iterators ) ; }", "catch ( Transient Kinesis Exception e ) {", "throw new IO Exception ( e ) ; }", "return advance ( ) ; }"]}
{"ids": "63205", "code": ["@ Override public XA Data Source create XA Data Source ( Properties properties ) throws SQL Exception {", "Properties properties Copy = new Properties ( ) ;", "if ( properties != null ) {", "properties Copy . put All ( properties ) ; }", "reject Unsupported Options ( properties Copy ) ;", "reject Pooling Options ( properties Copy ) ;", "Jdbc Data Source data Source = new Jdbc Data Source ( ) ;", "setup H 2 Data Source ( data Source , properties Copy ) ;", "return data Source ; }"]}
{"ids": "72395", "code": ["public static double to Degrees ( double x ) {", "if ( Double . is Infinite ( x ) || x == NUM_ ) {", "return x ; }", "final double facta = NUM_ ;", "final double factb = NUM_ ;", "double xa = double High Part ( x ) ;", "double xb = x - xa ;", "return xb * factb + xb * facta + xa * factb + xa * facta ; }"]}
{"ids": "30311", "code": ["void init Demand And Collection Map ( final List < String > prepare Field Names , final Map < String , Big Decimal > demand , final Map < String , Big Decimal > collection , final Map < String , Big Decimal > rebates ) {", "if ( prepare Field Names != null && ! prepare Field Names . is Empty ( ) ) for ( final String field Name : prepare Field Names ) {", "demand . put ( field Name , Big Decimal . ZERO ) ;", "collection . put ( field Name , Big Decimal . ZERO ) ;", "rebates . put ( field Name , Big Decimal . ZERO ) ; } }"]}
{"ids": "37570", "code": ["protected Instance specifier ( int i ) {", "return m Specifiers . get ( i ) ; }"]}
{"ids": "13528", "code": ["public Shaped Crafting Recipe ( Item nominal Output , Recipe Function recipe Function , String format , boolean mirrored , Item Ingredient ... ingredients ) {", "this . nominal Output = nominal Output ;", "String [ ] format Lines = format . split ( STR_ ) ;", "int num Ingredients = NUM_ ;", "int width = NUM_ ;", "for ( String format Line : format Lines ) {", "width = Math . max ( width , format Line . length ( ) ) ;", "for ( char c : format Line . to Char Array ( ) ) {", "if ( c == STR_ ) {", "continue ; }", "else if ( c >= STR_ && c <= STR_ ) {", "num Ingredients ++ ; }", "else {", "throw new Illegal Argument Exception ( STR_ + format + STR_ + c ) ; } } }", "this . width = width ;", "this . height = format Lines . length ;", "this . posx = new int [ num Ingredients ] ;", "this . posy = new int [ num Ingredients ] ;", "this . ingredients = new Item Ingredient [ num Ingredients ] ;", "this . mirrored = mirrored ;", "int ingredient Index = NUM_ ;", "for ( int y = NUM_ ; y < this . height ; y ++ ) {", "String format Line = format Lines [ y ] ;", "for ( int x = NUM_ ; x < format Line . length ( ) ; x ++ ) {", "char c = format Line . char At ( x ) ;", "if ( c == STR_ ) {", "continue ; }", "this . posx [ ingredient Index ] = x ;", "this . posy [ ingredient Index ] = y ;", "this . ingredients [ ingredient Index ] = ingredients [ c - STR_ ] ;", "ingredient Index ++ ; } }", "this . recipe Function = recipe Function ;", "this . last Ingredient Index On First Line = get Last Ingredient Index On First Line ( ) ; }"]}
{"ids": "11091", "code": ["private Socket connect ( String host , String port String ) throws IO Exception {", "int port = NUM_ ;", "Socket sock = null ;", "boolean DEBUG = Debug . debugging ( STR_ ) ;", "try {", "port = Integer . parse Int ( port String , NUM_ ) ; }", "catch ( Number Format Exception e ) {", "if ( DEBUG ) Debug . output ( STR_ + host + STR_ + port String ) ;", "throw new IO Exception ( STR_ + port String ) ; }", "if ( DEBUG ) Debug . output ( STR_ + host + STR_ + port ) ;", "try {", "sock = new Socket ( host , port ) ; }", "catch ( IO Exception e ) {", "if ( sock != null ) sock . close ( ) ;", "if ( DEBUG ) {", "Debug . output ( STR_ + host + STR_ + port + STR_ + e ) ; }", "throw e ; }", "return sock ; }"]}
{"ids": "38205", "code": ["@ Override public boolean batch Finished ( ) {", "if ( get Input Format ( ) == null ) {", "throw new Illegal State Exception ( STR_ ) ; }", "Instances to Filter = get Input Format ( ) ;", "int cut Off = ( int ) Math . round ( to Filter . num Instances ( ) * m Percentage / NUM_ ) ;", "if ( m Inverse ) {", "for ( int i = NUM_ ; i < cut Off ; i ++ ) {", "push ( to Filter . instance ( i ) ) ; } }", "else {", "for ( int i = cut Off ; i < to Filter . num Instances ( ) ; i ++ ) {", "push ( to Filter . instance ( i ) ) ; } }", "flush Input ( ) ;", "m New Batch = true ;", "m First Batch Done = true ;", "return ( num Pending Output ( ) != NUM_ ) ; }"]}
{"ids": "11439", "code": ["public void compute Parameters ( ) {", "if ( ellps == null ) {", "ellps = Ellipsoid . WGS 84 ; }", "if ( mode == MODE BELGIUM ) {", "alpha = NUM_ ; }", "else {", "alpha = NUM_ ; }", "double phi 1 = Proj Math . deg To Rad ( lambert sp one ) ;", "double phi 2 = Proj Math . deg To Rad ( lambert sp two ) ;", "double phif = Proj Math . deg To Rad ( reference Latitude ) ;", "double e = ellps . ecc ;", "double sinphi ;", "sinphi = Math . sin ( phi 1 ) ;", "double m 1 = lamb Msfn ( sinphi , Math . cos ( phi 1 ) , e ) ;", "double t 1 = lamb Tsfn ( phi 1 , sinphi , e ) ;", "if ( More Math . approximately equal ( phi 1 , phi 2 , EPS 10 ) ) {", "n = sinphi ; }", "else {", "sinphi = Math . sin ( phi 2 ) ;", "double m 2 = lamb Msfn ( sinphi , Math . cos ( phi 2 ) , e ) ;", "double t 2 = lamb Tsfn ( phi 2 , sinphi , e ) ;", "n = Math . log ( m 1 / m 2 ) / Math . log ( t 1 / t 2 ) ; }", "F = m 1 / ( n * Math . pow ( t 1 , n ) ) ;", "if ( More Math . approximately equal ( phi 1 , phi 2 , EPS 10 ) ) {", "rf = NUM_ ; }", "else {", "rf = ellps . radius * F * Math . pow ( lamb Tsfn ( phif , Math . sin ( phif ) , e ) , n ) ; }", "lamdaf = Proj Math . deg To Rad ( central Meridian ) ;", "location Center X Pixel = ( ( double ) get Width ( ) / NUM_ ) ;", "location Center Y Pixel = ( ( double ) get Height ( ) / NUM_ ) ;", "location Pixels Per Lambert = ( double ) get PPM ( ) / get Scale ( ) ;", "Lat Lon Point origin = new Lat Lon Point . Double ( reference Latitude , central Meridian ) ;", "Point 2 D lp = LL To World ( origin . get Y ( ) , origin . get X ( ) , new Point 2 D . Double ( ) ) ;", "location Origin X = lp . get X ( ) ;", "location Origin Y = lp . get Y ( ) ;", "Lat Lon Point center = get Center ( ) ;", "lp = LL To World ( center . get Y ( ) , center . get X ( ) , lp ) ;", "location Center X Lambert = lp . get X ( ) ;", "location Center Y Lambert = lp . get Y ( ) ;", "location Origin Xf Pixel = location Center X Pixel + ( location Origin X - location Center X Lambert ) * location Pixels Per Lambert ;", "location Origin Yf Pixel = location Center Y Pixel - ( location Origin Y - location Center Y Lambert ) * location Pixels Per Lambert ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + location Center X Lambert + STR_ + location Center Y Lambert ) ;", "Debug . output ( STR_ + location Origin X + STR_ + location Origin Y ) ; } }"]}
{"ids": "7132", "code": ["protected Ok Http Client configure Http Client ( ) {", "final Ok Http Client . Builder builder = new Ok Http Client . Builder ( ) ;", "final Cookie Manager cookie Manager = new Cookie Manager ( ) ;", "cookie Manager . set Cookie Policy ( Cookie Policy . ACCEPT ALL ) ;", "builder . cookie Jar ( new Java Net Cookie Jar ( cookie Manager ) ) ;", "builder . connect Timeout ( NUM_ , Time Unit . SECONDS ) ;", "builder . write Timeout ( NUM_ , Time Unit . SECONDS ) ;", "builder . read Timeout ( NUM_ , Time Unit . SECONDS ) ;", "return builder . build ( ) ; }"]}
{"ids": "66054", "code": ["public String parse File ( File file ) {", "log . config ( file . get Absolute Path ( ) ) ;", "String line = null ;", "try {", "Buffered Reader in = new Buffered Reader ( new Input Stream Reader ( new File Input Stream ( file ) , Ini . get Charset ( ) ) , NUM_ ) ;", "String err Msg = STR_ ;", "int line No = NUM_ ;", "while ( ( line = in . read Line ( ) ) != null && err Msg . length ( ) == NUM_ ) {", "err Msg = parse Line ( line , line No ) ;", "line No ++ ; }", "line = null ;", "in . close ( ) ;", "if ( err Msg . length ( ) != NUM_ ) return err Msg ; }", "catch ( Exception ioe ) {", "String s = ioe . get Localized Message ( ) ;", "if ( s == null || s . length ( ) == NUM_ ) s = ioe . to String ( ) ;", "return STR_ + line + STR_ + s ; }", "return STR_ ; }"]}
{"ids": "74468", "code": ["public void load ( Element element , Object o ) {", "log . error ( STR_ ) ; }"]}
{"ids": "11233", "code": ["public OM Raster ( double lt , double ln , int offset x 1 , int offset y 1 , Image Icon ii ) {", "this ( lt , ln , offset x 1 , offset y 1 , ii . get Image ( ) ) ; }"]}
{"ids": "82196", "code": ["private synchronized boolean start Dequeue ( ) {", "int threads = Math . min ( queue . size ( ) , max Threads ) ;", "for ( int i = NUM_ ; i < threads ; i ++ ) {", "Resource Thread t = ( Resource Thread ) queue . first Element ( ) ;", "queue . remove Element At ( NUM_ ) ;", "running . add Element ( t ) ;", "thread Count ++ ; }", "for ( Enumeration e = running . elements ( ) ; e . has More Elements ( ) ; ) {", "Resource Thread t = ( Resource Thread ) e . next Element ( ) ;", "t . go ( ) ; }", "return ( threads > NUM_ ) ; }"]}
{"ids": "46710", "code": ["public void property Change ( Property Change Event evt ) {", "String name = evt . get Property Name ( ) ;", "if ( name == STR_ || name == STR_ ) {", "invalidate Width Cache ( ) ;", "fire Column Margin Changed ( ) ; } }"]}
{"ids": "43521", "code": ["public static void assert Equals ( Object object 1 , Object object 2 ) {", "check Assertion ( object 1 . equals ( object 2 ) , null ) ; }"]}
{"ids": "72", "code": ["public String format SQL ( Object obj , Object expr ) {", "String sql = null ;", "if ( expr instanceof String ) {", "sql = ( String ) expr ;", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( STR_ + sql ) ; } }", "else if ( obj != null ) {", "sql = to String ( obj ) ;", "if ( sql != null ) {", "if ( sql . starts With ( STR_ ) ) {", "sql = sql . replace First ( STR_ , STR_ ) ; }", "sql = sql . replace All ( STR_ , BINARY SQL MARKER ) ; }", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( STR_ + sql ) ; } }", "return sql ; }"]}
{"ids": "71804", "code": ["public void add Fake View ( View child View ) {", "child View . layout ( NUM_ , NUM_ , get Width ( ) , child View . get Measured Height ( ) ) ;", "views . add ( child View ) ; }"]}
{"ids": "85720", "code": ["@ Suppress Warnings ( STR_ ) public Promise < Result , Progress > resolve ( Result result ) {", "List < Done Callback < Result > > done Callbacks ;", "List < Always Callback > always Callbacks ;", "synchronized ( this ) {", "validate In Pending State ( ) ;", "m State = STATE RESOLVED ;", "print State Changed ( STR_ ) ;", "m Result = result ;", "done Callbacks = m Callbacks . clone Done Callbacks ( ) ;", "always Callbacks = m Callbacks . clone Always Callbacks ( ) ;", "clear Callbacks ( ) ; }", "if ( done Callbacks . size ( ) > NUM_ || always Callbacks . size ( ) > NUM_ ) {", "trigger All Dones ( done Callbacks ) ;", "trigger All Always ( always Callbacks ) ; }", "return this ; }"]}
{"ids": "21675", "code": ["private void create Snapshot ( Block Snapshot snapshot , Snap unity Snap , Storage System storage , Db Client db Client ) {", "snapshot . set Native Id ( unity Snap . get Id ( ) ) ;", "snapshot . set Native Guid ( Native GUID Generator . generate Native Guid ( storage , snapshot ) ) ;", "snapshot . set Device Label ( unity Snap . get Name ( ) ) ;", "snapshot . set Is Sync Active ( true ) ;", "snapshot . set Inactive ( false ) ;", "snapshot . set Creation Time ( Calendar . get Instance ( ) ) ;", "snapshot . set WWN ( unity Snap . get Attached WWN ( ) ) ;", "snapshot . set Allocated Capacity ( unity Snap . get Size ( ) ) ;", "snapshot . set Provisioned Capacity ( unity Snap . get Size ( ) ) ;", "db Client . create Object ( snapshot ) ; }"]}
{"ids": "43955", "code": ["public void save ( ) throws IO Exception {", "if ( ! props . is Empty ( ) ) {", "Configuration Util . save Configuration Properties ( props , props File , false ) ; }", "Configuration Util . save Configuration Properties ( props , new File ( props File . get Parent File ( ) , props File . get Name ( ) + STR_ ) , true ) ; }"]}
{"ids": "48543", "code": ["static void dispose ( long p Data , long p Config Info ) {", "OGL Render Queue rq = OGL Render Queue . get Instance ( ) ;", "rq . lock ( ) ;", "try {", "OGL Context . set Scratch Surface ( p Config Info ) ;", "Render Buffer buf = rq . get Buffer ( ) ;", "rq . ensure Capacity And Alignment ( NUM_ , NUM_ ) ;", "buf . put Int ( DISPOSE SURFACE ) ;", "buf . put Long ( p Data ) ;", "rq . flush Now ( ) ; }", "finally {", "rq . unlock ( ) ; } }"]}
{"ids": "19620", "code": ["@ Override public boolean release ( int decrement ) {", "if ( is Empty ) {", "return false ; }", "if ( decrement < NUM_ ) {", "throw new Illegal State Exception ( String . format ( STR_ , decrement , to Verbose String ( ) ) ) ; }", "final int ref Cnt = ledger . decrement ( decrement ) ;", "if ( Base Allocator . DEBUG ) {", "historical Log . record Event ( STR_ , decrement , ref Cnt + decrement ) ; }", "if ( ref Cnt < NUM_ ) {", "throw new Illegal State Exception ( String . format ( STR_ , id , to Verbose String ( ) ) ) ; }", "return ref Cnt == NUM_ ; }"]}
{"ids": "81437", "code": ["int list Size ( ) {", "int result = mem Size ( ) ;", "for ( Iterator it = iterator ( ) ; it . has Next ( ) ; ) {", "AST Node child = ( AST Node ) it . next ( ) ;", "result += child . tree Size ( ) ; }", "return result ; }"]}
{"ids": "53140", "code": ["public Uniform Distribution estimate ( double min , double max , final int count ) {", "double grow = ( count > NUM_ ) ? NUM_ * ( max - min ) / ( count - NUM_ ) : NUM_ ;", "return new Uniform Distribution ( Math . max ( min - grow , - Double . MAX VALUE ) , Math . min ( max + grow , Double . MAX VALUE ) ) ; }"]}
{"ids": "56414", "code": ["public static Repository Meta Data read From ( Stream Input in ) throws IO Exception {", "String name = in . read String ( ) ;", "String type = in . read String ( ) ;", "Settings settings = Settings . read Settings From Stream ( in ) ;", "return new Repository Meta Data ( name , type , settings ) ; }"]}
{"ids": "43840", "code": ["public static boolean is Primitive Datatype ( IRI datatype ) {", "return datatype . equals ( XML Schema . DURATION ) || datatype . equals ( XML Schema . DATETIME ) || datatype . equals ( XML Schema . TIME ) || datatype . equals ( XML Schema . DATE ) || datatype . equals ( XML Schema . GYEARMONTH ) || datatype . equals ( XML Schema . GYEAR ) || datatype . equals ( XML Schema . GMONTHDAY ) || datatype . equals ( XML Schema . GDAY ) || datatype . equals ( XML Schema . GMONTH ) || datatype . equals ( XML Schema . STRING ) || datatype . equals ( XML Schema . BOOLEAN ) || datatype . equals ( XML Schema . BASE 64 BINARY ) || datatype . equals ( XML Schema . HEXBINARY ) || datatype . equals ( XML Schema . FLOAT ) || datatype . equals ( XML Schema . DECIMAL ) || datatype . equals ( XML Schema . DOUBLE ) || datatype . equals ( XML Schema . ANYURI ) || datatype . equals ( XML Schema . QNAME ) || datatype . equals ( XML Schema . NOTATION ) ; }"]}
{"ids": "73787", "code": ["protected void append Line ( J Component c ) {", "c . set Alignment X ( NUM_ ) ;", "contents . add ( c ) ; }"]}
{"ids": "5912", "code": ["public void post Process ( ) {", "if ( foreign Column Name != null ) {", "foreign Auto Refresh = true ; }", "if ( foreign Auto Refresh && max Foreign Auto Refresh Level == Database Field . NO MAX FOREIGN AUTO REFRESH LEVEL SPECIFIED ) {", "max Foreign Auto Refresh Level = Database Field . DEFAULT MAX FOREIGN AUTO REFRESH LEVEL ; } }"]}
{"ids": "78255", "code": ["private void persist New Temp ( File file Cfg ) {", "if ( hs Delete On Exit . size ( ) == NUM_ ) {", "log Debug ( Log Area . CONFIG , STR_ ) ;", "file Cfg . delete ( ) ;", "return ; }", "log Debug ( Log Area . CONFIG , STR_ , hs Delete On Exit . size ( ) , file Cfg . get Absolute Path ( ) ) ;", "Buffered Writer writer = null ;", "try {", "writer = new Buffered Writer ( new File Writer ( file Cfg ) ) ;", "for ( File file : hs Delete On Exit ) {", "if ( ! file . delete ( ) ) {", "String f = file . get Canonical Path ( ) ;", "writer . write ( f ) ;", "writer . new Line ( ) ;", "log Warn ( Log Area . JAR , STR_ , f ) ; } } }", "catch ( IO Exception e ) { }", "finally {", "if ( writer != null ) {", "try {", "writer . close ( ) ; }", "catch ( IO Exception e ) { } } } }"]}
{"ids": "78646", "code": ["public void add Written ( byte [ ] value ) {", "write Set Lock . lock ( ) ;", "write Set . add ( new Timestamp Value Pair ( ets , value ) ) ;", "write Set Lock . unlock ( ) ; }"]}
{"ids": "56227", "code": ["public static boolean has Binding ( Injector injector , Key < ? > key ) {", "Binding < ? > binding = get Binding ( injector , key ) ;", "return binding != null ; }"]}
{"ids": "19890", "code": ["private Open Replicator Manager M Bean create Internal Service ( String service Name ) throws Replicator Exception {", "logger . info ( STR_ + service Name ) ;", "try {", "Open Replicator Manager orm = new Open Replicator Manager ( service Name ) ;", "orm . set Rmi Host ( manager RMI Host ) ;", "orm . set Rmi Port ( manager RMI Port ) ;", "orm . set Host Time Zone ( host Time Zone ) ;", "orm . set Replicator Time Zone ( replicator Time Zone ) ;", "orm . advertise Internal ( ) ;", "orm . set Security Info ( this . security Info ) ;", "return ( Open Replicator Manager M Bean ) orm ; }", "catch ( Exception e ) {", "throw new Replicator Exception ( String . format ( STR_ , service Name ) , e ) ; } }"]}
{"ids": "76936", "code": ["public static Check Index . Status check Index ( Directory dir ) throws IO Exception {", "return check Index ( dir , true ) ; }"]}
{"ids": "14696", "code": ["static void policy Changed ( String service Type Name , Policy Event pe ) {", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + service Type Name ) ; }", "resource Names Map . remove ( service Type Name ) ;", "Cache resource Names Cache = ( Cache ) resource Names Map . get ( service Type Name ) ;", "if ( ( resource Names Cache == null ) || ( resource Names Cache . is Empty ( ) ) ) {", "return ; }", "try {", "DEBUG . error ( STR_ ) ;", "Service Type Manager stm = Service Type Manager . get Service Type Manager ( ) ;", "Service Type service Type = stm . get Service Type ( service Type Name ) ;", "Set resource Names To Remove = new Hash Set ( ) ;", "synchronized ( resource Names Cache ) {", "Enumeration resource Names = resource Names Cache . keys ( ) ;", "while ( resource Names . has More Elements ( ) ) {", "String resource Name = ( String ) resource Names . next Element ( ) ;", "if ( resource Names To Remove . contains ( resource Name ) ) {", "continue ; }", "Set affected Resource Names = pe . get Resource Names ( ) ;", "Iterator iter = affected Resource Names . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String affected Resource Name = ( String ) iter . next ( ) ;", "if ( service Type . compare ( resource Name , affected Resource Name ) != Resource Match . NO MATCH ) {", "resource Names To Remove . add ( resource Name ) ; } } }", "Iterator iter 1 = resource Names To Remove . iterator ( ) ;", "while ( iter 1 . has Next ( ) ) {", "String resource Name To Remove = ( String ) iter 1 . next ( ) ;", "resource Names Cache . remove ( resource Name To Remove ) ; } } }", "catch ( SSO Exception e ) {", "DEBUG . error ( STR_ , e ) ; }", "catch ( Policy Exception pex ) {", "DEBUG . error ( STR_ , pex ) ; }", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + service Type Name + STR_ + resource Names Map . get ( service Type Name ) ) ; } }"]}
{"ids": "54740", "code": ["private void start Hide Animations ( ) {", "animation Playing = true ;", "light Animation Layout ( ) ;", "if ( button Type . equals ( Button Type . CIRCLE ) ) {", "if ( hide Order Type . equals ( Order Type . DEFAULT ) ) {", "for ( int i = NUM_ ; i < button Num ; i ++ ) {", "set Hide Animation ( dots [ i ] , circle Buttons [ i ] , end Locations [ i ] , start Locations [ i ] , i ) ; } }", "else if ( hide Order Type . equals ( Order Type . REVERSE ) ) {", "for ( int i = NUM_ ; i < button Num ; i ++ ) {", "set Hide Animation ( dots [ i ] , circle Buttons [ i ] , end Locations [ i ] , start Locations [ i ] , button Num - i - NUM_ ) ; } }", "else if ( hide Order Type . equals ( Order Type . RANDOM ) ) {", "Random random = new Random ( ) ;", "boolean [ ] used = new boolean [ button Num ] ;", "for ( int i = NUM_ ; i < button Num ; i ++ ) used [ i ] = false ;", "int count = NUM_ ;", "while ( true ) {", "int i = random . next Int ( button Num ) ;", "if ( ! used [ i ] ) {", "used [ i ] = true ;", "set Hide Animation ( dots [ count ] , circle Buttons [ count ] , end Locations [ count ] , start Locations [ count ] , i ) ;", "count ++ ;", "if ( count == button Num ) break ; } } } }", "else if ( button Type . equals ( Button Type . HAM ) ) {", "if ( hide Order Type . equals ( Order Type . DEFAULT ) ) {", "for ( int i = NUM_ ; i < button Num ; i ++ ) {", "set Hide Animation ( bars [ i ] , ham Buttons [ i ] , end Locations [ i ] , start Locations [ i ] , i ) ; } }", "else if ( hide Order Type . equals ( Order Type . REVERSE ) ) {", "for ( int i = NUM_ ; i < button Num ; i ++ ) {", "set Hide Animation ( bars [ i ] , ham Buttons [ i ] , end Locations [ i ] , start Locations [ i ] , button Num - i - NUM_ ) ; } }", "else if ( hide Order Type . equals ( Order Type . RANDOM ) ) {", "Random random = new Random ( ) ;", "boolean [ ] used = new boolean [ button Num ] ;", "for ( int i = NUM_ ; i < button Num ; i ++ ) used [ i ] = false ;", "int count = NUM_ ;", "while ( true ) {", "int i = random . next Int ( button Num ) ;", "if ( ! used [ i ] ) {", "used [ i ] = true ;", "set Hide Animation ( bars [ count ] , ham Buttons [ count ] , end Locations [ count ] , start Locations [ count ] , i ) ;", "count ++ ;", "if ( count == button Num ) break ; } } } } }"]}
{"ids": "32032", "code": ["public static void put Short ( long addr , short val ) {", "if ( UNALIGNED ) UNSAFE . put Short ( addr , val ) ;", "else put Short By Byte ( addr , val , BIG ENDIAN ) ; }"]}
{"ids": "12649", "code": ["public Pronounceable FSM ( URL url , boolean scan From Front ) throws IO Exception {", "this . scan From Front = scan From Front ;", "Input Stream is = Utilities . get Input Stream ( url ) ;", "load Text ( is ) ;", "is . close ( ) ; }"]}
{"ids": "3995", "code": ["@ Override public String find Library ( String name ) {", "String system Name = System . map Library Name ( name ) ;", "Array List < Loader > loaders = get Loaders ( ) ;", "for ( int i = NUM_ ; i < loaders . size ( ) ; i ++ ) {", "Loader loader = loaders . get ( i ) ;", "Path path = loader . get Path ( system Name ) ;", "if ( path != null && path . can Read ( ) ) {", "return path . get Native Path ( ) ; }", "path = loader . get Path ( STR_ + system Name ) ;", "if ( path != null && path . can Read ( ) ) {", "return path . get Native Path ( ) ; } }", "for ( int i = NUM_ ; i < native Path . size ( ) ; i ++ ) {", "Path path = native Path . get ( i ) ;", "if ( path . can Read ( ) ) return path . get Native Path ( ) ; }", "return super . find Library ( name ) ; }"]}
{"ids": "73521", "code": ["public void remove Component Listener ( final Component Update Listener listener ) {", "component Listeners . remove ( listener ) ; }"]}
{"ids": "27940", "code": ["protected byte [ ] assert Encode Decode ( final I Ganglia Metadata Message decl , final I Ganglia Message expected ) {", "if ( expected == null ) throw new Illegal Argument Exception ( ) ;", "final XDR Output Buffer xdr = new XDR Output Buffer ( I Ganglia Defaults . BUFFER SIZE ) ;", "final Ganglia Message Encoder 31 message Encoder = new Ganglia Message Encoder 31 ( ) ;", "final Ganglia Message Decoder 31 message Decoder = new Ganglia Message Decoder 31 ( ) ;", "if ( expected . is Metric Request ( ) ) {", "message Encoder . write Request ( xdr , ( I Ganglia Request Message ) expected ) ; }", "else if ( expected . is Metric Metadata ( ) ) {", "message Encoder . write Metadata ( xdr , ( I Ganglia Metadata Message ) expected ) ; }", "else if ( expected . is Metric Value ( ) ) {", "if ( decl == null ) throw new Illegal Argument Exception ( STR_ ) ;", "message Encoder . write Metric ( xdr , decl , ( I Ganglia Metric Message ) expected ) ; }", "else {", "throw new Assertion Error ( ) ; }", "final I Ganglia Message actual = message Decoder . decode ( xdr . get Buffer ( ) , NUM_ , xdr . get Length ( ) ) ;", "assert Equals ( STR_ , expected , actual ) ;", "final byte [ ] actual Data = new byte [ xdr . get Length ( ) ] ;", "System . arraycopy ( xdr . get Buffer ( ) , NUM_ , actual Data , NUM_ , actual Data . length ) ;", "return actual Data ; }"]}
{"ids": "76756", "code": ["private boolean is Indexable ( String term ) {", "return ( term . length ( ) < NUM_ ) && ( term . length ( ) > NUM_ ) ; }"]}
{"ids": "15309", "code": ["public static String decode ( String encoded , AM Encryption encr ) {", "if ( check Caller ( ) ) {", "try {", "IS Security Permission isp = new IS Security Permission ( STR_ , STR_ ) ;", "if ( security Manager != null ) {", "security Manager . check Permission ( isp ) ; } }", "catch ( Security Exception e ) {", "Debug debug = Debug . get Instance ( STR_ ) ;", "debug . error ( STR_ + STR_ , e ) ;", "return null ; } }", "if ( encoded == null || encoded . length ( ) == NUM_ ) {", "return ( null ) ; }", "byte [ ] enc Data = null ;", "enc Data = Base 64 . decode ( encoded . trim ( ) ) ;", "if ( enc Data == null ) {", "return null ; }", "byte [ ] raw Data = encr . decrypt ( enc Data ) ;", "if ( raw Data == null ) {", "return ( null ) ; }", "String answer = null ;", "try {", "answer = new String ( raw Data , STR_ ) ; }", "catch ( Unsupported Encoding Exception uue ) {", "Debug debug = Debug . get Instance ( STR_ ) ;", "debug . error ( STR_ , uue ) ;", "answer = new String ( raw Data ) ; }", "return ( answer ) ; }"]}
{"ids": "25005", "code": ["public void add Connection ( Connection connection ) {", "if ( connection == null ) throw new Illegal Argument Exception ( STR_ ) ;", "synchronized ( connections Lock ) {", "Connection [ ] new Connections = new Connection [ connections . length + NUM_ ] ;", "new Connections [ NUM_ ] = connection ;", "System . arraycopy ( connections , NUM_ , new Connections , NUM_ , connections . length ) ;", "connections = new Connections ; }", "connection . add Listener ( invoke Listener ) ;", "if ( TRACE ) trace ( STR_ , STR_ + connection ) ; }"]}
{"ids": "53514", "code": ["public double distance ( Point 2 D pt ) {", "final double x distance = ( pt . get X ( ) - x ) * ( pt . get X ( ) - x ) ;", "final double y distance = ( pt . get Y ( ) - y ) * ( pt . get Y ( ) - y ) ;", "return Math . sqrt ( x distance + y distance ) ; }"]}
{"ids": "62712", "code": ["private static int convert To Int ( String value , int default Value ) {", "String trim = value . trim ( ) ;", "if ( trim . length ( ) == NUM_ ) {", "return default Value ; }", "return Integer . parse Int ( trim ) ; }"]}
{"ids": "49124", "code": ["@ Override public void run ( ) {", "try {", "for ( ; ; ) {", "int n = port Getn ( port , buffer Address , MAX EVENT COUNT ) ;", "assert n > NUM_ ;", "long address = buffer Address ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "boolean shutdown = process Event ( address ) ;", "if ( shutdown ) return ;", "address += SIZEOF PORT EVENT ; } } }", "catch ( Unix Exception x ) {", "x . print Stack Trace ( ) ; } }"]}
{"ids": "55942", "code": ["@ Override public List < String > all Keys ( ) {", "List < String > name Files = new Array List < > ( ) ;", "File [ ] files = cache Directory . list Files ( ) ;", "if ( files == null ) return name Files ;", "for ( File file : files ) {", "if ( file . is File ( ) ) {", "name Files . add ( file . get Name ( ) ) ; } }", "return name Files ; }"]}
{"ids": "61996", "code": ["public Dialogue Recorder ( Dialogue System system ) {", "this . settings = system . get Settings ( ) ; }"]}
{"ids": "40785", "code": ["private static final void reschedule Missed Alarms ( Content Resolver cr , Context context , Alarm Manager Interface manager ) {", "long now = System . current Time Millis ( ) ;", "long ancient = now - Date Utils . DAY IN MILLIS ;", "String [ ] projection = new String [ ] { Calendar Contract . Calendar Alerts . ALARM TIME } ;", "if ( Build . VERSION . SDK INT >= NUM_ && Context Compat . check Self Permission ( context , Manifest . permission . READ CALENDAR ) != Package Manager . PERMISSION GRANTED ) {", "Log . d ( TAG , STR_ ) ;", "return ; }", "Cursor cursor = cr . query ( Calendar Alerts . CONTENT URI , projection , WHERE RESCHEDULE MISSED ALARMS , ( new String [ ] { Long . to String ( now ) , Long . to String ( ancient ) , Long . to String ( now ) } ) , SORT ORDER ALARMTIME ASC ) ;", "if ( cursor == null ) {", "return ; }", "if ( DEBUG ) {", "Log . d ( TAG , STR_ + cursor . get Count ( ) ) ; }", "try {", "long alarm Time = - NUM_ ;", "while ( cursor . move To Next ( ) ) {", "long new Alarm Time = cursor . get Long ( NUM_ ) ;", "if ( alarm Time != new Alarm Time ) {", "if ( DEBUG ) {", "Log . w ( TAG , STR_ + new Alarm Time ) ; }", "Alert Utils . schedule Alarm ( context , manager , new Alarm Time ) ;", "alarm Time = new Alarm Time ; } } }", "finally {", "cursor . close ( ) ; } }"]}
{"ids": "13184", "code": ["@ Override protected String date To String ( Date Time Data date ) {", "String Buffer message = new String Buffer ( NUM_ ) ;", "message . append ( STR_ ) ;", "message . append ( STR_ ) ;", "append ( message , date . month , NUM_ ) ;", "append ( message , ( char ) date . utc , NUM_ ) ;", "return message . to String ( ) ; }"]}
{"ids": "83574", "code": ["public void swap ( int i , int j ) {", "x . assert True ( i < list . size ( ) ) ;", "x . assert True ( j < list . size ( ) ) ;", "list . set ( i , list . set ( j , list . get ( i ) ) ) ; }"]}
{"ids": "10356", "code": ["private List < Name Value Pair > build IPT Parameters ( Ipt ipt , String organisation Key ) {", "List < Name Value Pair > data = new Array List < Name Value Pair > ( ) ;", "if ( ipt != null && organisation Key != null ) {", "data . add ( new Basic Name Value Pair ( STR_ , String Utils . trim To Empty ( organisation Key ) ) ) ;", "data . add ( new Basic Name Value Pair ( STR_ , String Utils . trim To Empty ( ipt . get Name ( ) ) ) ) ;", "data . add ( new Basic Name Value Pair ( STR_ , String Utils . trim To Empty ( ipt . get Description ( ) ) ) ) ;", "data . add ( new Basic Name Value Pair ( STR_ , String Utils . trim To Empty ( ipt . get Primary Contact Type ( ) ) ) ) ;", "data . add ( new Basic Name Value Pair ( STR_ , String Utils . trim To Empty ( ipt . get Primary Contact Name ( ) ) ) ) ;", "data . add ( new Basic Name Value Pair ( STR_ , String Utils . trim To Empty ( ipt . get Primary Contact Email ( ) ) ) ) ;", "data . add ( new Basic Name Value Pair ( STR_ , SERVICE TYPE RSS ) ) ;", "data . add ( new Basic Name Value Pair ( STR_ , get Rss Feed URL ( ) ) ) ; }", "else {", "log . debug ( STR_ ) ; }", "return data ; }"]}
{"ids": "8181", "code": ["public static < T , U extends Closeable > T with Closeable ( U self , @ Closure Params ( value = First Param . class ) Closure < T > action ) throws IO Exception {", "try {", "T result = action . call ( self ) ;", "Closeable temp = self ;", "self = null ;", "temp . close ( ) ;", "return result ; }", "finally {", "Default Groovy Methods Support . close With Warning ( self ) ; } }"]}
{"ids": "14615", "code": ["public static boolean is Match ( String actual String , Linked List patterns , char wild Card ) {", "boolean matched = false ;", "for ( List Iterator iter = patterns . list Iterator ( NUM_ ) ; iter . has Next ( ) ; ) {", "if ( is Match ( actual String , ( String ) iter . next ( ) , wild Card ) ) {", "matched = true ;", "break ; } }", "return matched ; }"]}
{"ids": "24064", "code": ["public synchronized void add Server ( Server Location location , String [ ] groups , Server Load initial Load , long load Poll Interval ) {", "server Group Map . put ( location , groups ) ;", "Load Holder connection Load = new Load Holder ( location , initial Load . get Connection Load ( ) , initial Load . get Load Per Connection ( ) , load Poll Interval ) ;", "add Groups ( connection Load Map , groups , connection Load ) ;", "Load Holder queue Load = new Load Holder ( location , initial Load . get Subscription Connection Load ( ) , initial Load . get Load Per Subscription Connection ( ) , load Poll Interval ) ;", "add Groups ( queue Load Map , groups , queue Load ) ;", "update Load ( location , initial Load ) ; }"]}
{"ids": "74213", "code": ["public void add Leaf ( Catalog Tree Leaf leaf ) {", "leaves . add ( leaf ) ; }"]}
{"ids": "52379", "code": ["private static String stamp To String ( long tstamp , String format Mask ) {", "String Builder sb = new String Builder ( NUM_ ) ;", "Formatter fmt = new Formatter ( sb , Locale . US ) ;", "int [ ] pieces = new int [ NUMIDX ] ;", "Component Time . unpack Bits ( tstamp , pieces ) ;", "fmt . format ( format Mask , pieces [ YIDX ] , pieces [ MIDX ] , pieces [ DIDX ] , pieces [ HIDX ] , pieces [ IIDX ] , pieces [ SIDX ] , pieces [ UIDX ] ) ;", "fmt . close ( ) ;", "return ( sb . to String ( ) ) ; }"]}
{"ids": "22589", "code": ["public VN Xe Command Job modify Lun Async ( Lun Modify Param param , String resource Id ) {", "String Builder url Bld = new String Builder ( URL RESOURCE ) ;", "url Bld . append ( resource Id ) ;", "url Bld . append ( URL LUN MODIFY ACTION ) ;", "url = url Bld . to String ( ) ;", "return post Request Async ( param ) ; }"]}
{"ids": "44668", "code": ["public boolean similar To ( Object o ) {", "if ( o == null ) {", "return false ; }", "if ( ! ( o instanceof Semantic Concept ) ) {", "return false ; }", "Semantic Concept other Concept = ( Semantic Concept ) o ;", "Hash Set < Integer > synset intersection = new Hash Set < Integer > ( this . synsets ) ;", "synset intersection . retain All ( other Concept . synsets ) ;", "if ( ! synset intersection . is Empty ( ) ) {", "return true ; }", "Hash Set < String > concept intersection = new Hash Set < String > ( this . concepts ) ;", "concept intersection . retain All ( other Concept . concepts ) ;", "return ! concept intersection . is Empty ( ) ; }"]}
{"ids": "16632", "code": ["public void j Google Analytics Tracker ( final String event Type , final String version , final String tracker Id ) {", "final J Google Analytics Tracker tracker = new J Google Analytics Tracker ( STR_ , version , tracker Id ) ;", "final Focus Point focus Point = new Focus Point ( event Type . to Lower Case ( ) ) ;", "tracker . track Asynchronously ( focus Point ) ; }"]}
{"ids": "25300", "code": ["public void put ( Song song ) {", "if ( ! m Songs . contains ( song ) ) {", "m Songs . add ( song ) ; } }"]}
{"ids": "60161", "code": ["@ Not Null public Psi Query children Named ( @ Not Null final Class < ? extends Psi Named Element > clazz , @ Not Null final String name ) {", "final List < Psi Element > result = new Array List < Psi Element > ( ) ;", "for ( final Psi Element element : my Psi Elements ) {", "for ( final Psi Named Element child : Psi Tree Util . find Children Of Type ( element , clazz ) ) {", "if ( name . equals ( child . get Name ( ) ) ) {", "result . add ( child ) ; } } }", "return new Psi Query ( result . to Array ( new Psi Element [ result . size ( ) ] ) ) ; }"]}
{"ids": "62004", "code": ["@ Override public boolean equals ( Object o ) {", "return o . hash Code ( ) == hash Code ( ) ; }"]}
{"ids": "50465", "code": ["private Array List < String > parse Json ( String text ) {", "text = text . substring ( text . index Of ( STR_ ) + SIZE OF EVENTS , text . index Of ( STR_ ) ) ;", "Array List < String > events = new Array List < String > ( ) ;", "if ( text . is Empty ( ) ) {", "return events ; }", "int start Index = NUM_ , end Index = NUM_ ;", "while ( end Index != - NUM_ ) {", "end Index = text . index Of ( STR_ , start Index + DELIMITER SIZE ) ;", "String event Text = ( end Index == - NUM_ ? text . substring ( start Index ) : text . substring ( start Index , end Index ) ) ;", "Pattern pattern = Pattern . compile ( STR_ ) ;", "Matcher matcher = pattern . matcher ( event Text ) ;", "event Text = matcher . replace All ( STR_ ) ;", "pattern = Pattern . compile ( STR_ ) ;", "matcher = pattern . matcher ( event Text ) ;", "if ( matcher . find ( ) ) {", "event Text = matcher . replace First ( matcher . group ( NUM_ ) + STR_ ) ; }", "event Text = STR_ + event Text ;", "start Index = end Index + NUM_ ;", "events . add ( event Text ) ; }", "Collections . reverse ( events ) ;", "return events ; }"]}
{"ids": "75684", "code": ["@ Override public void remove Table Model Listener ( Table Model Listener l ) {", "m Listeners . remove ( l ) ; }"]}
{"ids": "84111", "code": ["public Str Builder replace ( int start Index , int end Index , String replace Str ) {", "end Index = validate Range ( start Index , end Index ) ;", "int insert Len = ( replace Str == null ? NUM_ : replace Str . length ( ) ) ;", "replace Impl ( start Index , end Index , end Index - start Index , replace Str , insert Len ) ;", "return this ; }"]}
{"ids": "62228", "code": ["public static void add Permission Recursive ( Path path , Posix File Permission permission ) throws IO Exception {", "change Permissions Recursive ( path , Permission Change . ADD , Collections . singleton ( permission ) ) ; }"]}
{"ids": "33299", "code": ["public static boolean has Visible Children ( Action Group group , Presentation Factory factory , Action Manager action Manager , Perspective Manager perspective Manager ) {", "Action Event event = new Action Event ( factory . get Presentation ( group ) , action Manager , perspective Manager ) ;", "for ( Action an Action : group . get Children ( event ) ) {", "if ( an Action == null ) {", "Log . error ( Utils . class , STR_ + group + STR_ + factory . get Presentation ( group ) ) ;", "continue ; }", "if ( an Action instanceof Separator ) {", "continue ; }", "final Presentation presentation = factory . get Presentation ( an Action ) ;", "an Action . update ( new Action Event ( presentation , action Manager , perspective Manager ) ) ;", "if ( an Action instanceof Action Group ) {", "Action Group child Group = ( Action Group ) an Action ;", "if ( child Group . is Popup ( ) ) {", "if ( ! presentation . is Visible ( ) ) {", "continue ; } }", "if ( has Visible Children ( child Group , factory , action Manager , perspective Manager ) ) {", "return true ; } }", "else if ( presentation . is Visible ( ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "69271", "code": ["private static void check Arg References ( String type Snippet , int number Of Args ) {", "Matcher arg Ref Matcher = ARG REF PATTERN . matcher ( type Snippet ) ;", "while ( arg Ref Matcher . find ( ) ) {", "int index = Integer . parse Int ( arg Ref Matcher . group ( NUM_ ) , NUM_ ) - NUM_ ;", "Preconditions . check Argument ( index >= NUM_ , STR_ , arg Ref Matcher . group ( NUM_ ) ) ;", "Preconditions . check Argument ( index < number Of Args , STR_ , arg Ref Matcher . group ( NUM_ ) ) ; } }"]}
{"ids": "73254", "code": ["public void randomize ( ) {", "randomize Incoming Weights ( ) ;", "normalize Incoming Weights ( ) ; }"]}
{"ids": "22799", "code": ["private boolean is File Valid ( File file , String method Name ) {", "if ( file == null ) {", "Log . print Concat Line ( name , STR_ , method Name , STR_ ) ;", "return false ; }", "String file Name = file . get Name ( ) ;", "if ( file Name == null || file Name . length ( ) == NUM_ ) {", "Log . print Concat Line ( name , STR_ + method Name , STR_ ) ;", "return false ; }", "return true ; }"]}
{"ids": "62699", "code": ["public void append ( byte [ ] bytes ) {", "append ( bytes , NUM_ , bytes . length ) ; }"]}
{"ids": "84052", "code": ["public static boolean enough Space On Phone ( long update Size ) {", "return get Real Size On Phone ( ) > update Size ; }"]}
{"ids": "19795", "code": ["private Object string To Value ( Object old Value , String new Value ) throws Replicator Exception {", "if ( old Value instanceof String ) {", "return new Value ; }", "else if ( old Value instanceof Integer ) {", "return Integer . value Of ( new Value ) ; }", "else if ( old Value instanceof Serial Blob ) {", "try {", "return Database Helper . get Safe Blob ( new Value . get Bytes ( ) ) ; }", "catch ( SQL Exception e ) {", "throw new Replicator Exception ( STR_ + e , e ) ; } }", "else {", "return new Value ; } }"]}
{"ids": "52359", "code": ["public String to Z String ( ) {", "String Builder buffer = new String Builder ( NUM_ ) ;", "try {", "print Z ( buffer ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ , e ) ; }", "return buffer . to String ( ) ; }"]}
{"ids": "59625", "code": ["public Trie Dictionary < T > build ( int base Id ) {", "byte [ ] trie Bytes = build Trie Bytes ( base Id ) ;", "Trie Dictionary < T > r = new Trie Dictionary < T > ( trie Bytes ) ;", "return r ; }"]}
{"ids": "62074", "code": ["public void record State ( Dialogue State state , String name ) {", "states . put ( name , state ) ;", "if ( ! list Model . contains ( name ) ) {", "int position = name . contains ( CURRENT ) ? NUM_ : Math . min ( NUM_ , list Model . size ( ) ) ;", "list Model . add ( position , name ) ; } }"]}
{"ids": "20186", "code": ["public Geo Server WPS Client ( Geo Server Connection connection ) {", "this . connection = connection ; }"]}
{"ids": "57354", "code": ["protected Connection State SS Lv 3 ( SSL Session Impl session ) {", "try {", "Cipher Suite cipher Suite = session . cipher Suite ;", "boolean is exportabe = cipher Suite . is Exportable ( ) ;", "hash size = cipher Suite . get MAC Length ( ) ;", "int key size = ( is exportabe ) ? cipher Suite . key Material : cipher Suite . expanded Key Material ;", "int iv size = cipher Suite . iv Size ;", "block size = cipher Suite . get Block Size ( ) ;", "String alg Name = cipher Suite . get Bulk Encryption Algorithm ( ) ;", "String hash Name = cipher Suite . get Hash Name ( ) ;", "if ( logger != null ) {", "logger . println ( STR_ ) ;", "logger . println ( STR_ + session . get Cipher Suite ( ) ) ;", "logger . println ( STR_ + alg Name ) ;", "logger . println ( STR_ + hash Name ) ;", "logger . println ( STR_ + hash size ) ;", "logger . println ( STR_ + block size ) ;", "logger . println ( STR_ + iv size ) ;", "logger . println ( STR_ + key size ) ; }", "byte [ ] client Random = session . client Random ;", "byte [ ] server Random = session . server Random ;", "byte [ ] key block = new byte [ NUM_ * hash size + NUM_ * key size + NUM_ * iv size ] ;", "byte [ ] seed = new byte [ client Random . length + server Random . length ] ;", "System . arraycopy ( server Random , NUM_ , seed , NUM_ , server Random . length ) ;", "System . arraycopy ( client Random , NUM_ , seed , server Random . length , client Random . length ) ;", "PRF . compute PRF SS Lv 3 ( key block , session . master secret , seed ) ;", "byte [ ] client mac secret = new byte [ hash size ] ;", "byte [ ] server mac secret = new byte [ hash size ] ;", "byte [ ] client key = new byte [ key size ] ;", "byte [ ] server key = new byte [ key size ] ;", "boolean is client = ! session . is Server ;", "System . arraycopy ( key block , NUM_ , client mac secret , NUM_ , hash size ) ;", "System . arraycopy ( key block , hash size , server mac secret , NUM_ , hash size ) ;", "System . arraycopy ( key block , NUM_ * hash size , client key , NUM_ , key size ) ;", "System . arraycopy ( key block , NUM_ * hash size + key size , server key , NUM_ , key size ) ;", "Iv Parameter Spec client IV = null ;", "Iv Parameter Spec server IV = null ;", "if ( is exportabe ) {", "if ( logger != null ) {", "logger . println ( STR_ ) ; }", "Message Digest md 5 = Message Digest . get Instance ( STR_ ) ;", "md 5 . update ( client key ) ;", "md 5 . update ( client Random ) ;", "md 5 . update ( server Random ) ;", "client key = md 5 . digest ( ) ;", "md 5 . update ( server key ) ;", "md 5 . update ( server Random ) ;", "md 5 . update ( client Random ) ;", "server key = md 5 . digest ( ) ;", "key size = cipher Suite . expanded Key Material ;", "if ( block size != NUM_ ) {", "md 5 . update ( client Random ) ;", "md 5 . update ( server Random ) ;", "client IV = new Iv Parameter Spec ( md 5 . digest ( ) , NUM_ , iv size ) ;", "md 5 . update ( server Random ) ;", "md 5 . update ( client Random ) ;", "server IV = new Iv Parameter Spec ( md 5 . digest ( ) , NUM_ , iv size ) ; } }", "else if ( block size != NUM_ ) {", "client IV = new Iv Parameter Spec ( key block , NUM_ * hash size + NUM_ * key size , iv size ) ;", "server IV = new Iv Parameter Spec ( key block , NUM_ * hash size + NUM_ * key size + iv size , iv size ) ; }", "if ( logger != null ) {", "logger . println ( STR_ + is exportabe ) ;", "logger . println ( STR_ ) ;", "logger . print ( session . master secret ) ;", "logger . println ( STR_ ) ;", "logger . print ( client Random ) ;", "logger . println ( STR_ ) ;", "logger . print ( server Random ) ;", "logger . println ( STR_ ) ;", "logger . print ( client mac secret ) ;", "logger . println ( STR_ ) ;", "logger . print ( server mac secret ) ;", "logger . println ( STR_ ) ;", "logger . print ( client key , NUM_ , key size ) ;", "logger . println ( STR_ ) ;", "logger . print ( server key , NUM_ , key size ) ;", "if ( client IV != null ) {", "logger . println ( STR_ ) ;", "logger . print ( client IV . get IV ( ) ) ;", "logger . println ( STR_ ) ;", "logger . print ( server IV . get IV ( ) ) ; }", "else {", "logger . println ( STR_ ) ; } }", "if ( alg Name == null ) {", "enc Cipher = new Null Cipher ( ) ;", "dec Cipher = new Null Cipher ( ) ; }", "else {", "enc Cipher = Cipher . get Instance ( alg Name ) ;", "dec Cipher = Cipher . get Instance ( alg Name ) ;", "if ( is client ) {", "enc Cipher . init ( Cipher . ENCRYPT MODE , new Secret Key Spec ( client key , NUM_ , key size , alg Name ) , client IV ) ;", "dec Cipher . init ( Cipher . DECRYPT MODE , new Secret Key Spec ( server key , NUM_ , key size , alg Name ) , server IV ) ; }", "else {", "enc Cipher . init ( Cipher . ENCRYPT MODE , new Secret Key Spec ( server key , NUM_ , key size , alg Name ) , server IV ) ;", "dec Cipher . init ( Cipher . DECRYPT MODE , new Secret Key Spec ( client key , NUM_ , key size , alg Name ) , client IV ) ; } }", "message Digest = Message Digest . get Instance ( hash Name ) ;", "if ( is client ) {", "mac write secret = client mac secret ;", "mac read secret = server mac secret ; }", "else {", "mac write secret = server mac secret ;", "mac read secret = client mac secret ; }", "if ( hash Name . equals ( STR_ ) ) {", "pad 1 = SS Lv 3 Constants . MD 5 pad 1 ;", "pad 2 = SS Lv 3 Constants . MD 5 pad 2 ; }", "else {", "pad 1 = SS Lv 3 Constants . SH Apad 1 ;", "pad 2 = SS Lv 3 Constants . SH Apad 2 ; } }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Alert Exception ( Alert Protocol . INTERNAL ERROR , new SSL Protocol Exception ( STR_ ) ) ; } }"]}
{"ids": "31363", "code": ["public boolean compare ( Object expected , Object current ) {", "if ( current != null ) {", "equal = current . equals ( expected ) ; }", "else if ( expected != null ) {", "equal = expected . equals ( NUM_ ) ; }", "return equal ; }"]}
{"ids": "56800", "code": ["private List < User Namespace Authorization > create User Namespace Authorizations From Entities ( List < User Namespace Authorization Entity > user Namespace Authorization Entities ) {", "List < User Namespace Authorization > user Namespace Authorizations = new Array List < > ( ) ;", "for ( User Namespace Authorization Entity user Namespace Authorization Entity : user Namespace Authorization Entities ) {", "user Namespace Authorizations . add ( create User Namespace Authorization From Entity ( user Namespace Authorization Entity ) ) ; }", "return user Namespace Authorizations ; }"]}
{"ids": "78201", "code": ["private void read Header ( ) throws Open Stego Exception {", "this . data Header = new DCT Data Header ( this , this . config ) ; }"]}
{"ids": "25745", "code": ["protected void draw Text ( String text 1 , String text 2 , int x , int y , Canvas c ) {", "if ( text Paint == null ) {", "Paint p = new Paint ( ) ;", "p . set Typeface ( Roboto Light Typeface . get Instance ( context ) ) ;", "p . set Color ( text Color ) ;", "p . set Text Size ( NUM_ * pixel Density ) ;", "this . text Paint = p ; }", "float w = text Paint . measure Text ( text 1 , NUM_ , text 1 . length ( ) ) ;", "int offset = ( int ) w / NUM_ ;", "c . draw Text ( text 1 , x - offset , y + ( NUM_ * pixel Density ) , text Paint ) ;", "w = text Paint . measure Text ( text 2 , NUM_ , text 2 . length ( ) ) ;", "offset = ( int ) w / NUM_ ;", "c . draw Text ( text 2 , x - offset , y + ( NUM_ * pixel Density ) , text Paint ) ; }"]}
{"ids": "48437", "code": ["public static boolean point Outside Pref Size ( J Table table , int row , int column , Point p ) {", "if ( table . convert Column Index To Model ( column ) != NUM_ || row == - NUM_ ) {", "return true ; }", "Table Cell Renderer tcr = table . get Cell Renderer ( row , column ) ;", "Object value = table . get Value At ( row , column ) ;", "Component cell = tcr . get Table Cell Renderer Component ( table , value , false , false , row , column ) ;", "Dimension item Size = cell . get Preferred Size ( ) ;", "Rectangle cell Bounds = table . get Cell Rect ( row , column , false ) ;", "cell Bounds . width = item Size . width ;", "cell Bounds . height = item Size . height ;", "assert ( p . x >= cell Bounds . x && p . y >= cell Bounds . y ) ;", "return p . x > cell Bounds . x + cell Bounds . width || p . y > cell Bounds . y + cell Bounds . height ; }"]}
{"ids": "85733", "code": ["public Builder add Source Folder ( @ Non Null File folder ) {", "folders To Scan . add ( folder ) ;", "return this ; }"]}
{"ids": "21877", "code": ["public Method suspend SRDF Group Method ( final URI system URI , final Remote Director Group group , final List < URI > source Volumes , final List < URI > target Volumes ) {", "return new Workflow . Method ( SUSPEND SRDF GROUP METHOD , system URI , group , source Volumes , target Volumes ) ; }"]}
{"ids": "40838", "code": ["private void field Goal Att ( Team offense , Team defense ) {", "double fg Dist Ratio = Math . pow ( ( NUM_ - game Yard Line ) / NUM_ , NUM_ ) ;", "double fg Acc Ratio = Math . pow ( ( NUM_ - game Yard Line ) / NUM_ , NUM_ ) ;", "double fg Dist Chance = ( get H Fadv ( ) + offense . get K ( NUM_ ) . rat Kick Pow - fg Dist Ratio * NUM_ ) ;", "double fg Acc Chance = ( get H Fadv ( ) + offense . get K ( NUM_ ) . rat Kick Acc - fg Acc Ratio * NUM_ ) ;", "if ( fg Dist Chance > NUM_ && fg Acc Chance * Math . random ( ) > NUM_ ) {", "if ( game Poss ) {", "home Score += NUM_ ;", "Home K Stats [ NUM_ ] ++ ;", "Home K Stats [ NUM_ ] ++ ; }", "else {", "away Score += NUM_ ;", "Away K Stats [ NUM_ ] ++ ;", "Away K Stats [ NUM_ ] ++ ; }", "game Event Log += get Event Prefix ( ) + offense . abbr + STR_ + offense . get K ( NUM_ ) . name + STR_ + ( NUM_ - game Yard Line ) + STR_ ;", "add Points Quarter ( NUM_ ) ;", "offense . get K ( NUM_ ) . stats FG Made ++ ;", "offense . get K ( NUM_ ) . stats FG Att ++ ;", "if ( ! playing OT ) kick Off ( offense ) ;", "else reset For OT ( ) ; }", "else {", "game Event Log += get Event Prefix ( ) + offense . abbr + STR_ + offense . get K ( NUM_ ) . name + STR_ + ( NUM_ - game Yard Line ) + STR_ ;", "offense . get K ( NUM_ ) . stats FG Att ++ ;", "if ( ! playing OT ) {", "game Yard Line = Math . max ( NUM_ - game Yard Line , NUM_ ) ;", "game Down = NUM_ ;", "game Yards Need = NUM_ ;", "if ( game Poss ) {", "Home K Stats [ NUM_ ] ++ ; }", "else {", "Away K Stats [ NUM_ ] ++ ; }", "game Poss = ! game Poss ; }", "else reset For OT ( ) ; }", "game Time -= NUM_ ; }"]}
{"ids": "36144", "code": ["@ Override public double calculate M ( double delta , double epsilon ) {", "double i = NUM_ ;", "while ( conf ( i , delta ) > epsilon / NUM_ ) {", "i = i + NUM_ ; }", "if ( i > NUM_ ) {", "i = i - NUM_ ; }", "while ( conf ( i , delta ) > ( epsilon / NUM_ ) ) {", "i ++ ; }", "return Math . ceil ( i ) ; }"]}
{"ids": "63102", "code": ["public static Server Socket create Server Socket ( int port , Inet Address bind Address ) throws IO Exception {", "Server Socket socket = null ;", "if ( Sys Properties . ENABLE ANONYMOUS TLS ) {", "remove Anon From Legacy Algorithms ( ) ; }", "set Keystore ( ) ;", "Server Socket Factory f = SSL Server Socket Factory . get Default ( ) ;", "SSL Server Socket secure Socket ;", "if ( bind Address == null ) {", "secure Socket = ( SSL Server Socket ) f . create Server Socket ( port ) ; }", "else {", "secure Socket = ( SSL Server Socket ) f . create Server Socket ( port , NUM_ , bind Address ) ; }", "secure Socket . set Enabled Protocols ( disable SSL ( secure Socket . get Enabled Protocols ( ) ) ) ;", "if ( Sys Properties . ENABLE ANONYMOUS TLS ) {", "String [ ] list = enable Anonymous ( secure Socket . get Enabled Cipher Suites ( ) , secure Socket . get Supported Cipher Suites ( ) ) ;", "secure Socket . set Enabled Cipher Suites ( list ) ; }", "socket = secure Socket ;", "return socket ; }"]}
{"ids": "84135", "code": ["public void print Bytes ( byte [ ] data , int offset , int length ) throws IO Exception {", "int i ;", "for ( ; length >= NUM_ ; length -= NUM_ ) {", "int chunk = ( ( ( data [ offset ] & NUM_ ) << NUM_ ) + ( ( data [ offset + NUM_ ] & NUM_ ) << NUM_ ) + ( data [ offset + NUM_ ] & NUM_ ) ) ;", "os . write ( base 64 encode ( chunk > > NUM_ ) ) ;", "os . write ( base 64 encode ( chunk > > NUM_ ) ) ;", "os . write ( base 64 encode ( chunk > > NUM_ ) ) ;", "os . write ( base 64 encode ( chunk ) ) ;", "offset += NUM_ ; }", "if ( length == NUM_ ) {", "int chunk = ( ( data [ offset ] & NUM_ ) << NUM_ ) + ( data [ offset + NUM_ ] & NUM_ ) ;", "os . write ( base 64 encode ( chunk > > NUM_ ) ) ;", "os . write ( base 64 encode ( chunk > > NUM_ ) ) ;", "os . write ( base 64 encode ( chunk ) ) ;", "os . write ( STR_ ) ; }", "else if ( length == NUM_ ) {", "int chunk = data [ offset ] & NUM_ ;", "os . write ( base 64 encode ( chunk > > NUM_ ) ) ;", "os . write ( base 64 encode ( chunk ) ) ;", "os . write ( STR_ ) ;", "os . write ( STR_ ) ; } }"]}
{"ids": "22518", "code": ["public void delete V Vset ( String native Id ) throws Exception {", "log . info ( STR_ ) ;", "Client Response client Resp = null ;", "final String path = Message Format . format ( URI DELETE CG , native Id ) ;", "log . info ( STR_ + path ) ;", "try {", "client Resp = delete ( path ) ;", "if ( client Resp == null ) {", "log . error ( STR_ ) ;", "throw new HP 3 PAR Exception ( STR_ ) ; }", "else if ( client Resp . get Status ( ) != NUM_ ) {", "String err Resp = get Response Details ( client Resp ) ;", "throw new HP 3 PAR Exception ( err Resp ) ; }", "else {", "log . info ( STR_ ) ; } }", "catch ( Exception e ) {", "throw e ; }", "finally {", "if ( client Resp != null ) {", "client Resp . close ( ) ; }", "log . info ( STR_ ) ; } }"]}
{"ids": "74227", "code": ["private int find Key Comment Index ( String key Name ) {", "for ( int i = NUM_ ; i < key Val Comments . size ( ) ; i ++ ) {", "String t = key Val Comments . get ( i ) ;", "String targeted Key = STR_ + key Name + STR_ ;", "if ( t . starts With ( targeted Key ) ) {", "return i ; } }", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + key Name ) ; }", "return - NUM_ ; }"]}
{"ids": "34727", "code": ["public static boolean is Add To Home Intent Supported ( Context context ) {", "Package Manager pm = context . get Package Manager ( ) ;", "Intent i = new Intent ( INSTALL SHORTCUT ) ;", "List < Resolve Info > receivers = pm . query Broadcast Receivers ( i , Package Manager . GET INTENT FILTERS ) ;", "return ! receivers . is Empty ( ) ; }"]}
{"ids": "19491", "code": ["In Memory Entry Store ( ) {", "entries = Maps . new Hash Map ( ) ;", "top Level Entries = Sets . new Hash Set ( ) ;", "children = Hash Multimap . create ( ) ; }"]}
{"ids": "31041", "code": ["public Class Annotator ( URL [ ] codebase , Properties props ) {", "if ( props != null ) properties . put All ( props ) ;", "set Annotation UR Ls ( codebase ) ; }"]}
{"ids": "67275", "code": ["public int next ( ) {", "return mix ( gen . get And Increment ( ) ) ; }"]}
{"ids": "22723", "code": ["public Input Stream put ( final URL Connection connection , final boolean flush Cache On Close ) {", "final String key = get Key ( connection ) ;", "if ( key == null ) return null ;", "if ( ! is Cacheable ( ( Http URL Connection ) connection ) ) try {", "cache . remove ( key ) ;", "return null ; }", "catch ( IO Exception e ) {", "return null ; }", "String etag = connection . get Header Field ( HEADER ETAG ) ;", "if ( etag == null || etag . length ( ) == NUM_ ) return null ;", "Editor editor ;", "try {", "editor = cache . edit ( key ) ; }", "catch ( IO Exception e ) {", "return null ; }", "if ( editor == null ) return null ;", "try {", "editor . set ( ETAG , etag ) ; }", "catch ( IO Exception e ) {", "try {", "editor . abort ( ) ; }", "catch ( IO Exception ignored ) { }", "return null ; }", "Input Stream input ;", "try {", "input = connection . get Input Stream ( ) ;", "if ( ! ( input instanceof Inflater Input Stream ) && ENCODING GZIP . equals ( connection . get Header Field ( HEADER CONTENT ENCODING ) ) ) input = new GZIP Input Stream ( input ) ; }", "catch ( IO Exception e ) {", "return null ; }", "Output Stream output ;", "try {", "output = editor . new Output Stream ( BODY ) ; }", "catch ( IO Exception e ) {", "return null ; }", "if ( output != null ) return new Cache Stream ( input , output , editor , this , flush Cache On Close ) ;", "else return null ; }"]}
{"ids": "16779", "code": ["public static String [ ] parse Title ( String title ) {", "String v [ ] = { STR_ , STR_ } ;", "if ( title == null ) return v ;", "Pattern p = Pattern . compile ( STR_ , Pattern . CASE INSENSITIVE ) ;", "Matcher m = p . matcher ( title ) ;", "if ( m . find ( ) ) {", "v [ NUM_ ] = m . group ( NUM_ ) ;", "v [ NUM_ ] = m . group ( NUM_ ) ; }", "else {", "v [ NUM_ ] = title ; }", "return v ; }"]}
{"ids": "75558", "code": ["public String sel ( ) {", "return m Selection . to String ( ) ; }"]}
{"ids": "75417", "code": ["public void root Removed ( ISVN Repository Location root ) {", "Iterator it = listeners . iterator ( ) ;", "while ( it . has Next ( ) ) {", "I Repository Listener listener = ( I Repository Listener ) it . next ( ) ;", "listener . repository Removed ( root ) ; } }"]}
{"ids": "42281", "code": ["public synchronized void insert ( double priority , Object data ) {", "num Elements ++ ;", "if ( num Elements == queue . length ) {", "Priority Queue Node [ ] tmp = new Priority Queue Node [ ( int ) ( queue . length * NUM_ ) ] ;", "System . arraycopy ( queue , NUM_ , tmp , NUM_ , queue . length ) ;", "for ( int i = queue . length ; i < tmp . length ; i ++ ) {", "tmp [ i ] = new Priority Queue Node ( ) ; }", "queue = tmp ; }", "queue [ num Elements ] . data = data ;", "queue [ num Elements ] . priority = priority ;", "reheapify ( num Elements ) ; }"]}
{"ids": "33329", "code": ["protected String wrap Linux Command ( String command ) throws IO Exception , Interrupted Exception {", "String set Group = STR_ + get Gid ( ) + STR_ + get Gid ( ) + STR_ + get Gid ( ) + STR_ ;", "String set User = STR_ + get Uid ( ) + STR_ + get Uid ( ) + STR_ + get Gid ( ) + STR_ ;", "String chown Command = STR_ ;", "return set Group + STR_ + set User + STR_ + chown Command + STR_ + command + STR_ + chown Command ; }"]}
{"ids": "30553", "code": ["public Abstract DML Query parse Sql Query ( SQL Query sql Query , I Space Proxy space ) throws SQL Exception {", "Abstract DML Query query = ( Abstract DML Query ) get Query From Cache ( get Unique Key ( sql Query ) ) ;", "try {", "if ( query == null ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ ) ; }", "Sql Parser parser = init Parser ( sql Query . get Query ( ) ) ;", "query = parse ( parser ) ;", "query . set Table Name ( sql Query . get Type Name ( ) ) ;", "query . validate Query ( space ) ;", "if ( ! query . is Prepared ( ) && ! query . contains Sub Queries ( ) ) query . build ( ) ;", "add Query To Cache ( get Unique Key ( sql Query ) , query ) ;", "if ( ! query . is Prepared ( ) ) return query ; }", "query = query . clone ( ) ;", "return query ; }", "catch ( SQL Exception sql Ex ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . log ( Level . FINE , STR_ + sql Query . get Query ( ) + STR_ , sql Ex ) ; }", "throw sql Ex ; }", "catch ( Throwable t ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . log ( Level . FINE , STR_ + sql Query . get Query ( ) + STR_ , t ) ; }", "SQL Exception sql Ex = new SQL Exception ( STR_ + sql Query . get Query ( ) + STR_ + t , STR_ , - NUM_ ) ;", "sql Ex . init Cause ( t ) ;", "throw sql Ex ; } }"]}
{"ids": "38404", "code": ["private int index Of Element In Level ( int element , int level [ ] ) throws Exception {", "for ( int i = NUM_ ; i < level . length ; i ++ ) {", "if ( level [ i ] == element ) {", "return i ; } }", "throw new Exception ( STR_ + m nodes . get ( element ) . ID + STR_ + STR_ ) ; }"]}
{"ids": "14949", "code": ["public int size ( ) {", "return attrs . size ( ) ; }"]}
{"ids": "12698", "code": ["public void deep Sort ( int [ ] set Feature Sequence ) {", "feature Sequence = set Feature Sequence ;", "number Of Leaves = NUM_ ;", "tree = new Mary Node ( NUM_ , feature Vectors . length ) ;", "sort Node ( NUM_ , tree ) ; }"]}
{"ids": "54075", "code": ["public void remove Listeners ( ) {", "listeners . clear ( ) ; }"]}
{"ids": "75786", "code": ["public static double L Rank Loss ( int y [ ] , int r [ ] ) {", "int L = y . length ;", "Array List < Integer > t I = new Array List < Integer > ( ) ;", "Array List < Integer > f I = new Array List < Integer > ( ) ;", "for ( int j = NUM_ ; j < L ; j ++ ) {", "if ( y [ j ] == NUM_ ) {", "t I . add ( j ) ; }", "else {", "f I . add ( j ) ; } }", "if ( ! t I . is Empty ( ) && ! f I . is Empty ( ) ) {", "int c = NUM_ ;", "for ( int k : t I ) {", "for ( int l : f I ) {", "if ( position ( k , r ) < position ( l , r ) ) {", "c ++ ; } } }", "return ( double ) c / ( double ) ( t I . size ( ) * f I . size ( ) ) ; }", "else {", "return NUM_ ; } }"]}
{"ids": "53002", "code": ["private double add Recursively ( Array List < double [ ] > hull , Hierarchy < Cluster < Model > > hier , Cluster < Model > clus ) {", "final DBI Ds ids = clus . get I Ds ( ) ;", "double weight = ids . size ( ) ;", "for ( DBID Iter iter = ids . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) {", "double [ ] proj P = proj . fast Project Data To Render Space ( rel . get ( iter ) ) ;", "if ( proj P [ NUM_ ] != proj P [ NUM_ ] || proj P [ NUM_ ] != proj P [ NUM_ ] ) {", "continue ; }", "hull . add ( proj P ) ; }", "for ( Iter < Cluster < Model > > iter = hier . iter Children ( clus ) ; iter . valid ( ) ; iter . advance ( ) ) {", "weight += NUM_ * add Recursively ( hull , hier , iter . get ( ) ) ; }", "return weight ; }"]}
{"ids": "65962", "code": ["public void attribute Update ( Print Service Attribute Event psae ) {", "log . fine ( STR_ + psae ) ; }"]}
{"ids": "73125", "code": ["public void evict ( ) throws Exception {", "assert Open ( ) ;", "boolean is Empty ;", "synchronized ( this ) {", "is Empty = pool . is Empty ( ) ; }", "if ( ! is Empty ) {", "if ( soft Min Evictable Idle Time Millis > NUM_ ) {", "int num To Evict = get Num Idle ( ) - get Min Idle ( ) ;", "evict ( System . current Time Millis ( ) - soft Min Evictable Idle Time Millis , num To Evict ) ; }", "if ( min Evictable Idle Time Millis > NUM_ ) {", "int num To Evict = get Num Idle ( ) ;", "evict ( System . current Time Millis ( ) - min Evictable Idle Time Millis , num To Evict ) ; } } }"]}
{"ids": "76236", "code": ["protected void generate Random Population ( int population size ) {", "logger . debug ( STR_ ) ;", "for ( int i = NUM_ ; i < population size ; i ++ ) {", "T individual = chromosome Factory . get Chromosome ( ) ;", "for ( Fitness Function < ? > fitness Function : this . fitness Functions ) {", "individual . add Fitness ( fitness Function ) ; }", "population . add ( individual ) ;", "if ( is Finished ( ) ) break ; }", "logger . debug ( STR_ + population . size ( ) + STR_ ) ; }"]}
{"ids": "43706", "code": ["public List < Visitante > listar ( ) {", "List < Visitante > dados = new Array List < > ( ) ;", "try {", "String sql = STR_ ;", "stm = conector . prepare Statement ( sql ) ;", "rs = stm . execute Query ( sql ) ;", "while ( rs . next ( ) ) {", "dados . add ( new Visitante ( rs . get Int ( NUM_ ) , rs . get String ( NUM_ ) , rs . get String ( NUM_ ) , rs . get String ( NUM_ ) , rs . get String ( NUM_ ) , rs . get String ( NUM_ ) , Tempo . to Date ( rs . get Timestamp ( NUM_ ) ) , rs . get String ( NUM_ ) , rs . get String ( NUM_ ) ) ) ; }", "stm . close ( ) ;", "rs . close ( ) ; }", "catch ( SQL Exception ex ) {", "Mensagem . erro ( STR_ + ex ) ; }", "return dados ; }"]}
{"ids": "42424", "code": ["private void insert Before ( Instruction [ ] list , Instruction s ) {", "for ( Instruction x : list ) {", "s . insert Before ( x ) ; } }"]}
{"ids": "24750", "code": ["public static Builder new Builder ( ) {", "return new Builder ( ) ; }"]}
{"ids": "70099", "code": ["public int count Array ( String [ ] array ) {", "return array . length ; }"]}
{"ids": "74669", "code": ["private void process Unprocessed ( ) {", "boolean clean processings = Boolean . get Boolean ( STR_ ) ;", "logger . info ( STR_ + STR_ + clean processings + STR_ ) ;", "product Service . process Unprocessed ( ! clean processings ) ; }"]}
{"ids": "75618", "code": ["public double [ ] popy ( double x [ ] ) {", "return pop Y ( new double [ ] [ ] { x } ) [ NUM_ ] ; }"]}
{"ids": "56467", "code": ["public Geo Distance Builder add Unbounded From ( String key , double from ) {", "ranges . add ( new Range ( key , from , null ) ) ;", "return this ; }"]}
{"ids": "71975", "code": ["private void send Response ( Document doc , Message Factory message Factory , String content Type , Http Servlet Response res ) throws IO Exception , SOAP Exception {", "SOAP Message reply = message Factory . create Message ( ) ;", "SOAP Header header = reply . get SOAP Header ( ) ;", "header . detach Node ( ) ;", "SOAP Body reply Body = reply . get SOAP Body ( ) ;", "res . set Header ( STR_ , content Type ) ;", "reply Body . add Document ( doc ) ;", "reply . save Changes ( ) ;", "Output Stream os = res . get Output Stream ( ) ;", "reply . write To ( os ) ;", "os . flush ( ) ; }"]}
{"ids": "67683", "code": ["public static String replace Chars ( String str , String oldchars , char newchar ) {", "int pos = index Of Chars ( str , oldchars ) ;", "if ( pos == - NUM_ ) {", "return str ; }", "String Builder buf = new String Builder ( str ) ;", "do {", "buf . set Char At ( pos , newchar ) ;", "pos = index Of Chars ( str , oldchars , pos + NUM_ ) ; }", "while ( pos != - NUM_ ) ;", "return buf . to String ( ) ; }"]}
{"ids": "25394", "code": ["public In Memory Message Exchange Store ( final Network Config config , Token Provider token Provider ) {", "if ( config == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( token Provider == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "this . token Provider = token Provider ;", "this . config = config ; }"]}
{"ids": "6703", "code": ["public static void next ( ) {", "try {", "if ( music Playback Service != null ) {", "music Playback Service . next ( ) ; } }", "catch ( final Remote Exception ignored ) { } }"]}
{"ids": "523", "code": ["private void draw Bitmap With Stroke ( Canvas canvas , Bitmap bitmap , int center X , int center Y , float radius , Paint draw Paint ) {", "draw Paint . set Style ( Paint . Style . FILL ) ;", "float stroke Radius = radius + m Radius Stroke Width ;", "draw Paint . set Xfermode ( new Porter Duff Xfermode ( Porter Duff . Mode . CLEAR ) ) ;", "canvas . draw Circle ( center X , center Y , stroke Radius , draw Paint ) ;", "draw Paint . set Xfermode ( null ) ;", "final int half Bitmap Width = bitmap . get Width ( ) / NUM_ ;", "final int half Bitmap Height = bitmap . get Height ( ) / NUM_ ;", "Bitmap Shader bitmap Shader = new Bitmap Shader ( bitmap , Shader . Tile Mode . REPEAT , Shader . Tile Mode . REPEAT ) ;", "Matrix shader Matrix = new Matrix ( ) ;", "float min Size = bitmap . get Width ( ) > bitmap . get Height ( ) ? bitmap . get Height ( ) : bitmap . get Width ( ) ;", "float scale = radius * NUM_ / min Size ;", "shader Matrix . set Scale ( scale , scale ) ;", "shader Matrix . post Translate ( center X - ( half Bitmap Width * scale ) , center Y - ( half Bitmap Height * scale ) ) ;", "bitmap Shader . set Local Matrix ( shader Matrix ) ;", "draw Paint . set Shader ( bitmap Shader ) ;", "canvas . draw Circle ( center X , center Y , radius , draw Paint ) ;", "draw Paint . set Shader ( null ) ; }"]}
{"ids": "69620", "code": ["public Mqtt Device mqtt Device ( ) {", "return mqtt Device ; }"]}
{"ids": "63172", "code": ["public Abba Locking Detector start Collecting ( ) {", "thread = new Thread ( this , STR_ ) ;", "thread . set Daemon ( true ) ;", "thread . start ( ) ;", "return this ; }"]}
{"ids": "79909", "code": ["public float to Meters ( double pixels ) {", "return ( float ) ( pixels * METERS PER PIXELS ) ; }"]}
{"ids": "1372", "code": ["boolean add To Buffer ( char c ) throws IO Exception {", "int len = sb . length ( ) ;", "if ( len == NUM_ && c != CHAR LT ) return false ;", "sb . append ( c ) ;", "if ( ++ len >= min Tag Len ) {", "boolean is Closing Tag = ( len >= NUM_ && sb . char At ( NUM_ ) == CHAR SL ) ;", "String substr ;", "if ( is Closing Tag ) substr = sb . substring ( NUM_ ) ;", "else substr = sb . substring ( NUM_ ) ;", "for ( int i = NUM_ ; i < EXCLUDE TAGS . length ; i ++ ) {", "if ( substr . equals Ignore Case ( EXCLUDE TAGS [ i ] ) ) {", "if ( is Closing Tag ) {", "depth Dec ( i ) ;", "print Buffer ( ) ;", "last Char = NUM_ ; }", "else {", "depth Inc ( i ) ; } } } }", "return true ; }"]}
{"ids": "24153", "code": ["public static < T > T json To Object ( String json String , Class < T > klass ) {", "T object From Json = null ;", "try {", "Gf Json Object json Object = new Gf Json Object ( json String ) ;", "object From Json = klass . new Instance ( ) ;", "Method [ ] declared Methods = klass . get Declared Methods ( ) ;", "Map < String , Method > methods Map = new Hash Map < String , Method > ( ) ;", "for ( Method method : declared Methods ) {", "methods Map . put ( method . get Name ( ) , method ) ; }", "int no Of Fields = json Object . size ( ) ;", "Iterator < String > keys = json Object . keys ( ) ;", "while ( keys . has Next ( ) ) {", "String key = keys . next ( ) ;", "Method method = methods Map . get ( STR_ + capitalize ( key ) ) ;", "if ( method != null ) {", "Class < ? > [ ] parameter Types = method . get Parameter Types ( ) ;", "if ( parameter Types . length == NUM_ ) {", "Class < ? > parameter Type = parameter Types [ NUM_ ] ;", "Object value = json Object . get ( key ) ;", "if ( is Primitive Or Wrapper ( parameter Type ) ) {", "value = get Primitive Or Wrapper Value ( parameter Type , value ) ; }", "else if ( is Array ( parameter Type ) ) {", "value = to Array ( value , parameter Type ) ; }", "else if ( is List ( parameter Type ) ) {", "value = to List ( value , parameter Type ) ; }", "else if ( is Map ( parameter Type ) ) {", "value = to Map ( value , parameter Type ) ; }", "else if ( is Set ( parameter Type ) ) {", "value = to Set ( value , parameter Type ) ; }", "else {", "value = json To Object ( value . to String ( ) , parameter Type ) ; }", "method . invoke ( object From Json , new Object [ ] { value } ) ;", "no Of Fields -- ; } } }", "if ( no Of Fields != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + json String + STR_ + klass ) ; } }", "catch ( Instantiation Exception e ) {", "throw new Illegal Argument Exception ( STR_ + klass , e ) ; }", "catch ( Illegal Access Exception e ) {", "throw new Illegal Argument Exception ( STR_ + klass , e ) ; }", "catch ( Gf Json Exception e ) {", "throw new Illegal Argument Exception ( STR_ + klass , e ) ; }", "catch ( Illegal Argument Exception e ) {", "throw new Illegal Argument Exception ( STR_ + klass , e ) ; }", "catch ( Invocation Target Exception e ) {", "throw new Illegal Argument Exception ( STR_ + klass , e ) ; }", "return object From Json ; }"]}
{"ids": "24297", "code": ["private Cache create Cache ( ) throws Cache Exception {", "final Properties props = new Properties ( ) ;", "props . set Property ( LOCATORS , STR_ ) ;", "props . set Property ( MCAST PORT , STR_ ) ;", "return Cache Factory . create ( Distributed System . connect ( props ) ) ; }"]}
{"ids": "37583", "code": ["protected String [ ] [ ] to Array ( ) {", "int i ;", "int n ;", "int ii ;", "int nn ;", "int x ;", "int y ;", "String [ ] [ ] result ;", "String [ ] [ ] tmp Result ;", "int cols ;", "int rows ;", "boolean value Exists ;", "rows = get Visible Row Count ( ) ;", "if ( get Show Average ( ) ) {", "rows ++ ; }", "cols = get Visible Col Count ( ) ;", "if ( get Show Std Dev ( ) ) {", "cols = cols * NUM_ ; }", "else {", "cols = cols * NUM_ ; }", "result = new String [ rows + NUM_ ] [ cols + NUM_ ] ;", "result [ NUM_ ] [ NUM_ ] = trim String ( STR_ , get Row Name Width ( ) ) ;", "x = NUM_ ;", "for ( ii = NUM_ ; ii < get Col Count ( ) ; ii ++ ) {", "i = get Display Col ( ii ) ;", "if ( get Col Hidden ( i ) ) {", "continue ; }", "result [ NUM_ ] [ x ] = trim String ( remove Filter Name ( get Col Name ( i ) ) , get Col Name Width ( ) ) ;", "x ++ ;", "if ( get Show Std Dev ( ) ) {", "result [ NUM_ ] [ x ] = STR_ ;", "x ++ ; }", "result [ NUM_ ] [ x ] = STR_ ;", "x ++ ; }", "y = NUM_ ;", "for ( ii = NUM_ ; ii < get Row Count ( ) ; ii ++ ) {", "i = get Display Row ( ii ) ;", "if ( ! get Row Hidden ( i ) ) {", "result [ y ] [ NUM_ ] = trim String ( remove Filter Name ( get Row Name ( i ) ) , get Row Name Width ( ) ) ;", "y ++ ; } }", "y = NUM_ ;", "for ( ii = NUM_ ; ii < get Row Count ( ) ; ii ++ ) {", "i = get Display Row ( ii ) ;", "if ( get Row Hidden ( i ) ) {", "continue ; }", "x = NUM_ ;", "for ( nn = NUM_ ; nn < get Col Count ( ) ; nn ++ ) {", "n = get Display Col ( nn ) ;", "if ( get Col Hidden ( n ) ) {", "continue ; }", "value Exists = ( ! Double . is Na N ( get Mean ( n , i ) ) ) ;", "if ( ! value Exists ) {", "result [ y ] [ x ] = STR_ ; }", "else {", "result [ y ] [ x ] = double To String ( get Mean ( n , i ) , get Mean Prec ( ) ) ; }", "x ++ ;", "if ( get Show Std Dev ( ) ) {", "if ( ! value Exists ) {", "result [ y ] [ x ] = STR_ ; }", "else if ( Double . is Infinite ( get Std Dev ( n , i ) ) ) {", "result [ y ] [ x ] = STR_ ; }", "else {", "result [ y ] [ x ] = double To String ( get Std Dev ( n , i ) , get Std Dev Prec ( ) ) ; }", "x ++ ; }", "if ( ! value Exists ) {", "result [ y ] [ x ] = STR_ ; }", "else {", "switch ( get Significance ( n , i ) ) {", "case SIGNIFICANCE TIE :", "result [ y ] [ x ] = TIE STRING ;", "break ;", "case SIGNIFICANCE WIN :", "result [ y ] [ x ] = WIN STRING ;", "break ;", "case SIGNIFICANCE LOSS :", "result [ y ] [ x ] = LOSS STRING ;", "break ; } }", "x ++ ; }", "y ++ ; }", "if ( get Show Average ( ) ) {", "y = result . length - NUM_ ;", "x = NUM_ ;", "result [ y ] [ NUM_ ] = STR_ ;", "x ++ ;", "for ( ii = NUM_ ; ii < get Col Count ( ) ; ii ++ ) {", "i = get Display Col ( ii ) ;", "if ( get Col Hidden ( i ) ) {", "continue ; }", "result [ y ] [ x ] = double To String ( get Average ( i ) , get Mean Prec ( ) ) ;", "x ++ ;", "if ( get Show Std Dev ( ) ) {", "result [ y ] [ x ] = STR_ ;", "x ++ ; }", "result [ y ] [ x ] = STR_ ;", "x ++ ; } }", "y = result . length - NUM_ ;", "x = NUM_ ;", "result [ y ] [ NUM_ ] = LEFT PARENTHESES + WIN STRING + STR_ + TIE STRING + STR_ + LOSS STRING + RIGHT PARENTHESES ;", "x ++ ;", "for ( ii = NUM_ ; ii < get Col Count ( ) ; ii ++ ) {", "i = get Display Col ( ii ) ;", "if ( get Col Hidden ( i ) ) {", "continue ; }", "result [ y ] [ x ] = STR_ ;", "x ++ ;", "if ( get Show Std Dev ( ) ) {", "result [ y ] [ x ] = STR_ ;", "x ++ ; }", "result [ y ] [ x ] = LEFT PARENTHESES + get Significance Count ( i , SIGNIFICANCE WIN ) + STR_ + get Significance Count ( i , SIGNIFICANCE TIE ) + STR_ + get Significance Count ( i , SIGNIFICANCE LOSS ) + RIGHT PARENTHESES ;", "x ++ ; }", "tmp Result = new String [ result . length ] [ result [ NUM_ ] . length - NUM_ ] ;", "x = NUM_ ;", "for ( i = NUM_ ; i < result [ NUM_ ] . length ; i ++ ) {", "if ( ( ( i == NUM_ ) && ( get Show Std Dev ( ) ) ) || ( ( i == NUM_ ) && ( ! get Show Std Dev ( ) ) ) ) {", "continue ; }", "for ( n = NUM_ ; n < result . length ; n ++ ) {", "tmp Result [ n ] [ x ] = result [ n ] [ i ] ; }", "x ++ ; }", "result = tmp Result ;", "return result ; }"]}
{"ids": "78724", "code": ["private Environment ( ) {", "throw Contract Utils . unreachable ( ) ; }"]}
{"ids": "40912", "code": ["public void remove Photo ( Photo Entity photo ) {", "photos . remove ( photo ) ; }"]}
{"ids": "20788", "code": ["public static void compute ( double min Score , double top Percent , double max Expected , float min Percent Identity , I Read Block read Block , String classification Name , Bit Set active Matches For Classification ) {", "active Matches For Classification . clear ( ) ;", "for ( int i = NUM_ ; i < read Block . get Number Of Available Match Blocks ( ) ; i ++ ) {", "final I Match Block match Block = read Block . get Match Block ( i ) ;", "if ( ! match Block . is Ignore ( ) && match Block . get Bit Score ( ) >= min Score && match Block . get Expected ( ) <= max Expected && match Block . get Percent Identity ( ) >= min Percent Identity ) {", "if ( match Block . get Id ( classification Name ) > NUM_ ) active Matches For Classification . set ( i ) ; } }", "float best Score = NUM_ ;", "for ( int i = active Matches For Classification . next Set Bit ( NUM_ ) ; i != - NUM_ ; i = active Matches For Classification . next Set Bit ( i + NUM_ ) ) {", "final I Match Block match Block = read Block . get Match Block ( i ) ;", "float score = match Block . get Bit Score ( ) ;", "if ( score > best Score ) best Score = score ; }", "apply Top Percent Filter ( top Percent , best Score , min Percent Identity , read Block , active Matches For Classification ) ; }"]}
{"ids": "56212", "code": ["public E [ ] to Array ( E [ ] a ) {", "if ( a . length != array . length ( ) ) {", "throw new Elasticsearch Generation Exception ( STR_ ) ; }", "for ( int i = NUM_ ; i < array . length ( ) ; i ++ ) {", "a [ i ] = array . get ( i ) ; }", "return a ; }"]}
{"ids": "76959", "code": ["synchronized public void fail On ( Failure fail ) {", "if ( failures == null ) {", "failures = new Array List < > ( ) ; }", "failures . add ( fail ) ; }"]}
{"ids": "55342", "code": ["private static Set < String > create Categories Set ( Set < String > categories ) {", "Set < String > result = new Hash Set < > ( ) ;", "for ( String cat : categories ) {", "result . add ( String Util . to Lower Case ( cat ) ) ; }", "return result ; }"]}
{"ids": "86248", "code": ["public void upload ( File file , long restart At , FTP Data Transfer Listener listener ) throws Illegal State Exception , File Not Found Exception , IO Exception , FTP Illegal Reply Exception , FTP Exception , FTP Data Transfer Exception , FTP Aborted Exception {", "if ( ! file . exists ( ) ) {", "throw new File Not Found Exception ( file . get Absolute Path ( ) ) ; }", "Input Stream input Stream = null ;", "try {", "input Stream = new File Input Stream ( file ) ; }", "catch ( IO Exception e ) {", "throw new FTP Data Transfer Exception ( e ) ; }", "try {", "upload ( file . get Name ( ) , input Stream , restart At , restart At , listener ) ; }", "catch ( Illegal State Exception e ) {", "throw e ; }", "catch ( IO Exception e ) {", "throw e ; }", "catch ( FTP Illegal Reply Exception e ) {", "throw e ; }", "catch ( FTP Exception e ) {", "throw e ; }", "catch ( FTP Data Transfer Exception e ) {", "throw e ; }", "catch ( FTP Aborted Exception e ) {", "throw e ; }", "finally {", "if ( input Stream != null ) {", "try {", "input Stream . close ( ) ; }", "catch ( Throwable t ) { ; } } } }"]}
{"ids": "40265", "code": ["public SSL Socket create SSL Socket ( Socket socket ) throws IO Exception {", "SSL Socket Factory sf = ( ( SSL Socket Factory ) SSL Socket Factory . get Default ( ) ) ;", "Inet Socket Address remote Address = ( Inet Socket Address ) socket . get Remote Socket Address ( ) ;", "SSL Socket s = ( SSL Socket ) ( sf . create Socket ( socket , remote Address . get Host Name ( ) , socket . get Port ( ) , true ) ) ;", "s . set Use Client Mode ( false ) ;", "s . set Enabled Cipher Suites ( s . get Supported Cipher Suites ( ) ) ;", "return s ; }"]}
{"ids": "23837", "code": ["static boolean caused By RDE ( Disk Access Exception dae ) {", "boolean result = false ;", "if ( dae != null ) {", "Throwable cause = dae . get Cause ( ) ;", "while ( cause != null ) {", "if ( cause instanceof Region Destroyed Exception ) {", "result = true ;", "break ; }", "cause = cause . get Cause ( ) ; } }", "return result ; }"]}
{"ids": "27074", "code": ["public Magic Variables Arguments Bundle ( @ Non Null Map < String , String > arguments , @ Non Null Map < String , String > variables , String layer Name , @ Non Null Display Metrics metrics ) {", "super ( arguments , metrics ) ;", "m Variables = variables ;", "m Layer Name Prefix = STR_ + layer Name . replace ( STR_ , STR_ ) + STR_ ; }"]}
{"ids": "25493", "code": ["@ HLE Unimplemented @ HLE Function ( nid = NUM_ , version = NUM_ ) public int sce Usb Cam Setup Video Ex ( psp Usb Cam Setup Video Ex Param usb Cam Setup Video Ex Param , T Pointer work Area , int work Area Size ) {", "this . work Area = work Area . get Address ( ) ;", "this . work Area Size = work Area Size ;", "resolution = convert Resolution Ex To Resolution ( usb Cam Setup Video Ex Param . resolution ) ;", "frame Rate = usb Cam Setup Video Ex Param . framerate ;", "white Balance = usb Cam Setup Video Ex Param . wb ;", "saturation = usb Cam Setup Video Ex Param . saturation ;", "brightness = usb Cam Setup Video Ex Param . brightness ;", "contrast = usb Cam Setup Video Ex Param . contrast ;", "sharpness = usb Cam Setup Video Ex Param . sharpness ;", "image Effect Mode = usb Cam Setup Video Ex Param . effectmode ;", "frame Size = usb Cam Setup Video Ex Param . framesize ;", "ev Level = usb Cam Setup Video Ex Param . evlevel ;", "if ( ! setup Video ( ) ) {", "log . warn ( String . format ( STR_ ) ) ;", "return Sce Kernel Errors . ERROR USBCAM NOT READY ; }", "return NUM_ ; }"]}
{"ids": "49830", "code": ["public static Date convert ISO 8601 to Date ( String date String ) throws Parse Exception {", "Date Format date Format = new Simple Date Format ( STR_ ) ;", "Date date = date Format . parse ( date String ) ;", "return date ; }"]}
{"ids": "9951", "code": ["public static Document create DOM ( Input Stream is ) throws Parser Configuration Exception , SAX Exception , IO Exception {", "Document Builder Factory dbf = Document Builder Factory . new Instance ( ) ;", "dbf . set Validating ( false ) ;", "dbf . set Ignoring Comments ( false ) ;", "dbf . set Ignoring Element Content Whitespace ( true ) ;", "dbf . set Namespace Aware ( true ) ;", "dbf . set Feature ( XML Constants . FEATURE SECURE PROCESSING , true ) ;", "dbf . set Feature ( DISALLOW DOCTYPE DECL , true ) ;", "dbf . set Feature ( EXTERNAL GENERAL ENTITIES , false ) ;", "dbf . set Feature ( EXTERNAL PARAMETER ENTITIES , false ) ;", "dbf . set Feature ( LOAD EXTERNAL DTD , false ) ;", "Document Builder db = null ;", "db = dbf . new Document Builder ( ) ;", "db . set Entity Resolver ( new Null Resolver ( ) ) ;", "db . set Error Handler ( new Saml Parser Error Handler ( ) ) ;", "return db . parse ( is ) ; }"]}
{"ids": "32445", "code": ["public void reset Count ( ) {", "msg Cnt . set ( NUM_ ) ; }"]}
{"ids": "41569", "code": ["void decode Attribute Body ( byte [ ] attribute Value , char offset , char length ) throws Stun Exception {", "realm = new byte [ length ] ;", "System . arraycopy ( attribute Value , offset , realm , NUM_ , length ) ; }"]}
{"ids": "41351", "code": ["public boolean is same ( Object obj ) {", "if ( this == obj ) return true ;", "if ( obj == null ) return false ;", "if ( get Class ( ) != obj . get Class ( ) ) return false ;", "House Number other = ( House Number ) obj ;", "if ( number == null ) {", "if ( name == null ) {", "if ( other . name != null ) return false ; }", "else if ( ! name . equals ( other . name ) ) return false ; }", "else if ( ! number . equals ( other . number ) ) return false ;", "if ( street == null ) {", "if ( other . street != null ) return false ; }", "else if ( ! street . equals ( other . street ) ) return false ;", "return true ; }"]}
{"ids": "53947", "code": ["public int three Way Distance ( Key k 1 , Key k 2 ) {", "byte [ ] h 0 = hash ;", "byte [ ] h 1 = k 1 . hash ;", "byte [ ] h 2 = k 2 . hash ;", "int mmi = mismatch ( h 1 , h 2 ) ;", "if ( mmi == - NUM_ ) return NUM_ ;", "int h = Byte . to Unsigned Int ( h 0 [ mmi ] ) ;", "int a = Byte . to Unsigned Int ( h 1 [ mmi ] ) ;", "int b = Byte . to Unsigned Int ( h 2 [ mmi ] ) ;", "return Integer . compare Unsigned ( a ^ h , b ^ h ) ; }"]}
{"ids": "12060", "code": ["public Async Selector ( ) throws IO Exception {", "this ( Selector . open ( ) ) ; }"]}
{"ids": "82252", "code": ["public void remove Child At ( int index ) {", "if ( ( index < NUM_ ) || ( children == null ) || ( index >= children . size ( ) ) ) {", "throw new Array Index Out Of Bounds Exception ( ) ; }", "Element child = ( Element ) children . get ( index ) ;", "child . set Parent ( null ) ;", "children . remove ( index ) ; }"]}
{"ids": "51930", "code": ["static void load Directory ( File file , Module Candidate candidate ) throws IO Exception {", "File [ ] files = file . list Files ( ) ;", "if ( files != null ) for ( File f : files ) load Sub Directory ( file , f , candidate ) ; }"]}
{"ids": "31861", "code": ["public static boolean has Suppressed ( @ Nullable Throwable t , @ Nullable Class < ? extends Throwable > cls ) {", "if ( t == null || cls == null ) return false ;", "if ( t . get Suppressed ( ) != null ) {", "for ( Throwable th : t . get Suppressed ( ) ) {", "if ( cls . is Assignable From ( th . get Class ( ) ) ) return true ;", "if ( has Suppressed ( th , cls ) ) return true ; } }", "return false ; }"]}
{"ids": "63031", "code": ["static int write Var Long ( Output Stream out , long x ) throws IO Exception {", "int len = NUM_ ;", "while ( ( x & ~ NUM_ ) != NUM_ ) {", "out . write ( ( byte ) ( NUM_ | ( x & NUM_ ) ) ) ;", "x >>>= NUM_ ;", "len ++ ; }", "out . write ( ( byte ) x ) ;", "return ++ len ; }"]}
{"ids": "49249", "code": ["protected void engine Update ( byte b ) throws Signature Exception {", "message Digest . update ( b ) ;", "needs Reset = true ; }"]}
{"ids": "60788", "code": ["private void write Object ( java . io . Object Output Stream s ) throws java . io . IO Exception {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "s . default Write Object ( ) ;", "for ( Node < E > p = first ; p != null ; p = p . next ) s . write Object ( p . item ) ;", "s . write Object ( null ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "21084", "code": ["private boolean check If Initiator For RP Before Migration ( Initiator initiator ) {", "if ( initiator == null ) {", "return false ; }", "boolean is RP = true ;", "if ( Null Column Value Getter . is Null Value ( initiator . get Host Name ( ) ) || ! Null Column Value Getter . is Null URI ( initiator . get Host ( ) ) ) {", "is RP = false ; }", "log . debug ( STR_ + ( is RP ? STR_ : STR_ ) ) ;", "return is RP ; }"]}
{"ids": "86497", "code": ["@ Override public Collection < Serial Message > initialize ( boolean refresh ) {", "Array List < Serial Message > result = new Array List < Serial Message > ( ) ;", "if ( is Support Request Supported == true && ( refresh == true || initialise Done == false ) && get Version ( ) > NUM_ ) {", "result . add ( get Supported Message ( ) ) ; }", "return result ; }"]}
{"ids": "49968", "code": ["public static DML Config read Configuration File ( String config Path ) throws Parse Exception , File Not Found Exception {", "DML Config config = new DML Config ( ) ;", "if ( config Path != null ) {", "try {", "config = new DML Config ( config Path , false ) ; }", "catch ( File Not Found Exception fnfe ) {", "LOG . error ( STR_ + config Path + STR_ ) ;", "throw fnfe ; }", "catch ( Parse Exception e ) {", "throw e ; } }", "else {", "try {", "config = new DML Config ( DEFAULT SYSTEMML CONFIG FILEPATH , false ) ; }", "catch ( File Not Found Exception fnfe ) {", "LOG . info ( STR_ + STR_ ) ;", "config = new DML Config ( ) ; }", "catch ( Parse Exception e ) {", "throw e ; } }", "return config ; }"]}
{"ids": "83585", "code": ["private String [ ] combine Results From Multiple Reads ( String [ ] buffer , String [ ] last Read ) {", "String [ ] t = new String [ buffer . length + last Read . length ] ;", "System . arraycopy ( buffer , NUM_ , t , NUM_ , buffer . length ) ;", "System . arraycopy ( last Read , NUM_ , t , buffer . length , last Read . length ) ;", "return t ; }"]}
{"ids": "60368", "code": ["private static boolean is Retina ( ) {", "if ( System Info . is Apple Jvm ) {", "return has Apple Retina Device ( ) ; }", "if ( System Info . is Mac ) {", "Graphics Environment e = Graphics Environment . get Local Graphics Environment ( ) ;", "Graphics Device [ ] devices = e . get Screen Devices ( ) ;", "for ( Graphics Device device : devices ) {", "if ( is Oracle Mac Retina Device ( device ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "48936", "code": ["public void p Oln ( Object o ) throws IO Exception {", "p O ( o . to String ( ) ) ;", "pln ( ) ; }"]}
{"ids": "80271", "code": ["private void draw Combat ( final Graphics 2 D g 2 d , final int x , final int y , final int width , final int height ) {", "Rectangle 2 D wrect = entity . get Area ( ) ;", "final Rectangle srect = new Rectangle ( ( int ) ( wrect . get X ( ) * I Game Screen . SIZE UNIT PIXELS ) , ( int ) ( wrect . get Y ( ) * I Game Screen . SIZE UNIT PIXELS ) , ( int ) ( wrect . get Width ( ) * I Game Screen . SIZE UNIT PIXELS ) , ( int ) ( wrect . get Height ( ) * I Game Screen . SIZE UNIT PIXELS ) ) ;", "int circle Height = ( int ) ( ( srect . height - NUM_ ) / SQRT 2 ) ;", "circle Height = Math . max ( circle Height , srect . height - I Game Screen . SIZE UNIT PIXELS / NUM_ ) ;", "if ( entity . is Attacking ( User . get ( ) ) ) {", "g 2 d . set Color ( RING COLOR ORANGE ) ;", "g 2 d . draw Oval ( srect . x - NUM_ , srect . y + srect . height - circle Height , srect . width , circle Height ) ;", "g 2 d . draw Oval ( srect . x , srect . y + srect . height - circle Height , srect . width , circle Height ) ;", "g 2 d . draw Oval ( srect . x + NUM_ , srect . y + srect . height - circle Height , srect . width , circle Height ) ;", "draw Shaded Oval ( g 2 d , srect . x + NUM_ , srect . y + srect . height - circle Height + NUM_ , srect . width - NUM_ , circle Height - NUM_ , RING COLOR ORANGE , true , false ) ; }", "if ( entity . is Being Attacked ( ) ) {", "Color line Color ;", "g 2 d . set Color ( RING COLOR RED ) ;", "if ( entity . is Attacking ( User . get ( ) ) ) {", "line Color = RING COLOR RED ;", "draw Shaded Oval ( g 2 d , srect . x - NUM_ , srect . y + srect . height - circle Height - NUM_ , srect . width + NUM_ , circle Height + NUM_ , RING COLOR RED , false , true ) ; }", "else {", "line Color = RING COLOR DARK RED ;", "g 2 d . draw Oval ( srect . x - NUM_ , srect . y + srect . height - circle Height , srect . width , circle Height ) ;", "g 2 d . draw Oval ( srect . x , srect . y + srect . height - circle Height , srect . width , circle Height ) ;", "g 2 d . draw Oval ( srect . x + NUM_ , srect . y + srect . height - circle Height , srect . width , circle Height ) ;", "draw Shaded Oval ( g 2 d , srect . x + NUM_ , srect . y + srect . height - circle Height + NUM_ , srect . width - NUM_ , circle Height - NUM_ , RING COLOR RED , true , false ) ;", "draw Shaded Oval ( g 2 d , srect . x - NUM_ , srect . y + srect . height - circle Height - NUM_ , srect . width + NUM_ , circle Height + NUM_ , RING COLOR ORANGE , false , false ) ; }", "Enum Set < Direction > directions = Enum Set . none Of ( Direction . class ) ;", "for ( Entity attacker : entity . get Attackers ( ) ) {", "directions . add ( Direction . get Area Direction Towards Area ( entity . get Area ( ) , attacker . get Area ( ) ) ) ; }", "draw Arrows ( g 2 d , srect . x - NUM_ , srect . y + srect . height - circle Height - NUM_ , srect . width + NUM_ , circle Height + NUM_ , directions , line Color ) ; }", "else if ( entity . is Attacking ( User . get ( ) ) ) {", "draw Shaded Oval ( g 2 d , srect . x - NUM_ , srect . y + srect . height - circle Height - NUM_ , srect . width + NUM_ , circle Height + NUM_ , RING COLOR ORANGE , false , false ) ; }", "draw Attack ( g 2 d , x , y , width , height ) ;", "if ( entity . is Defending ( ) ) {", "final int sx = srect . x + srect . width - ICON OFFSET ;", "final int sy = y + height - NUM_ * ICON OFFSET ;", "switch ( entity . get Resolution ( ) ) {", "case BLOCKED :", "blocked Sprite . draw ( g 2 d , sx , sy ) ;", "break ;", "case MISSED :", "missed Sprite . draw ( g 2 d , sx , sy ) ;", "break ;", "case HIT :", "hit Sprite . draw ( g 2 d , sx , sy ) ;", "break ;", "default : } } }"]}
{"ids": "48505", "code": ["public final void add Reference ( Object ref ) {", "ref Set . add ( ref ) ; }"]}
{"ids": "76462", "code": ["public Requirements Builder add Require Property ( String name , Requirements Builder builder ) {", "add Property ( name , builder ) ;", "required Properties . add ( name ) ;", "return this ; }"]}
{"ids": "63009", "code": ["public Head Rule ( String dir , String rule ) {", "String [ ] tmp = P TAGSETS . split ( rule ) ;", "int i , size = tmp . length ;", "b r 2 l = dir . equals ( DIR RIGHT TO LEFT ) ;", "a tag Sets = new Head Tag Set [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) a tag Sets [ i ] = new Head Tag Set ( tmp [ i ] ) ; }"]}
{"ids": "83858", "code": ["@ Override public < T > Future < T > submit ( Callable < T > task ) {", "synchronized ( this ) {", "active . increment And Get ( ) ;", "long timeout = NUM_ ;", "while ( queue . remaining Capacity ( ) == NUM_ ) {", "try {", "if ( timeout <= giveup Time ) {", "Thread . sleep ( DEFAULT SLEEP ) ;", "timeout += DEFAULT SLEEP ; }", "else {", "throw new Runtime Exception ( STR_ ) ; } }", "catch ( Interrupted Exception e ) {", "throw new Runtime Exception ( e ) ; } }", "return super . submit ( task ) ; } }"]}
{"ids": "51715", "code": ["protected XSQLDA allocate X Sql Da ( Row Descriptor row Descriptor ) {", "if ( row Descriptor == null || row Descriptor . get Count ( ) == NUM_ ) {", "final XSQLDA x Sql Da = new XSQLDA ( NUM_ ) ;", "x Sql Da . sqld = x Sql Da . sqln = NUM_ ;", "return x Sql Da ; }", "final XSQLDA x Sql Da = new XSQLDA ( row Descriptor . get Count ( ) ) ;", "for ( int idx = NUM_ ; idx < row Descriptor . get Count ( ) ; idx ++ ) {", "final Field Descriptor field Descriptor = row Descriptor . get Field Descriptor ( idx ) ;", "final XSQLVAR x Sql Var = x Sql Da . sqlvar [ idx ] ;", "x Sql Var . sqltype = ( short ) ( field Descriptor . get Type ( ) | NUM_ ) ;", "x Sql Var . sqlsubtype = ( short ) field Descriptor . get Sub Type ( ) ;", "x Sql Var . sqlscale = ( short ) field Descriptor . get Scale ( ) ;", "x Sql Var . sqllen = ( short ) field Descriptor . get Length ( ) ;", "x Sql Var . sqlind = new Short By Reference ( ) ;", "final int required Data Size = field Descriptor . is Varying ( ) ? field Descriptor . get Length ( ) + NUM_ : field Descriptor . get Length ( ) + NUM_ ;", "x Sql Var . sqldata = new Memory ( required Data Size ) ; }", "return x Sql Da ; }"]}
{"ids": "86909", "code": ["public static void overwrite ( long [ ] vector , long val , int offset , int len ) {", "int idx = offset > > NUM_ ;", "int bit Idx = offset & NUM_ ;", "int truncated Val Len = Math . min ( len , NUM_ - bit Idx ) ;", "vector [ idx ] &= ~ ( mask Below ( truncated Val Len ) << bit Idx ) ;", "vector [ idx ] |= val << bit Idx ;", "if ( len != truncated Val Len ) {", "long mask = mask Below ( len - truncated Val Len ) ;", "vector [ idx + NUM_ ] &= ~ mask ;", "vector [ idx + NUM_ ] |= ( val > > > truncated Val Len ) ; } }"]}
{"ids": "30460", "code": ["public static boolean is Empty ( String string ) {", "if ( null == string ) return true ;", "return string . equals ( EMPTY ) ; }"]}
{"ids": "15653", "code": ["protected Fast Map < String > read Declared Properties ( Widget Creator Context context ) {", "Fast Map < String > declared Properties = new Fast Map < String > ( ) ;", "String back Color = context . read Widget Property ( STR_ ) ;", "if ( back Color != null && back Color . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , back Color ) ; }", "String font Name = context . read Widget Property ( STR_ ) ;", "if ( font Name != null && font Name . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , font Name ) ; }", "String font Size = context . read Widget Property ( STR_ ) ;", "if ( font Size != null && font Size . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , font Size ) ; }", "String fore Color = context . read Widget Property ( STR_ ) ;", "if ( fore Color != null && fore Color . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , fore Color ) ; }", "String justification = context . read Widget Property ( STR_ ) ;", "if ( justification != null && justification . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , justification ) ; }", "String bold = context . read Widget Property ( STR_ ) ;", "if ( bold != null && bold . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , bold ) ; }", "String italic = context . read Widget Property ( STR_ ) ;", "if ( italic != null && italic . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , italic ) ; }", "String subscript = context . read Widget Property ( STR_ ) ;", "if ( subscript != null && subscript . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , subscript ) ; }", "String superscript = context . read Widget Property ( STR_ ) ;", "if ( superscript != null && superscript . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , superscript ) ; }", "String underline = context . read Widget Property ( STR_ ) ;", "if ( underline != null && underline . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , underline ) ; }", "String strikethrough = context . read Widget Property ( STR_ ) ;", "if ( strikethrough != null && strikethrough . length ( ) > NUM_ ) {", "declared Properties . put ( STR_ , strikethrough ) ; }", "return declared Properties ; }"]}
{"ids": "35502", "code": ["private void update Traffic Projections ( ) {", "List < Air Map Traffic > updated = new Array List < > ( ) ;", "for ( Air Map Traffic traffic : all Traffic ) {", "if ( traffic . get Ground Speed Kt ( ) > - NUM_ && traffic . get True Heading ( ) > - NUM_ ) {", "all Traffic . remove ( traffic ) ;", "Coordinate projected = projected Coordinate ( traffic ) ;", "traffic . set Coordinate ( projected ) ;", "traffic . set Show Alert ( false ) ;", "all Traffic . add ( traffic ) ;", "updated . add ( traffic ) ; } }", "notify Updated ( updated ) ; }"]}
{"ids": "24257", "code": ["public static void log Stack Trace ( Level level , Throwable throwable ) {", "log Stack Trace ( level , throwable , null ) ; }"]}
{"ids": "84554", "code": ["public static float compute Contrast Between Colors ( int bg , int fg ) {", "float bg R = Color . red ( bg ) / NUM_ ;", "float bg G = Color . green ( bg ) / NUM_ ;", "float bg B = Color . blue ( bg ) / NUM_ ;", "bg R = ( bg R < NUM_ ) ? bg R / NUM_ : ( float ) Math . pow ( ( bg R + NUM_ ) / NUM_ , NUM_ ) ;", "bg G = ( bg G < NUM_ ) ? bg G / NUM_ : ( float ) Math . pow ( ( bg G + NUM_ ) / NUM_ , NUM_ ) ;", "bg B = ( bg B < NUM_ ) ? bg B / NUM_ : ( float ) Math . pow ( ( bg B + NUM_ ) / NUM_ , NUM_ ) ;", "float bg L = NUM_ * bg R + NUM_ * bg G + NUM_ * bg B ;", "float fg R = Color . red ( fg ) / NUM_ ;", "float fg G = Color . green ( fg ) / NUM_ ;", "float fg B = Color . blue ( fg ) / NUM_ ;", "fg R = ( fg R < NUM_ ) ? fg R / NUM_ : ( float ) Math . pow ( ( fg R + NUM_ ) / NUM_ , NUM_ ) ;", "fg G = ( fg G < NUM_ ) ? fg G / NUM_ : ( float ) Math . pow ( ( fg G + NUM_ ) / NUM_ , NUM_ ) ;", "fg B = ( fg B < NUM_ ) ? fg B / NUM_ : ( float ) Math . pow ( ( fg B + NUM_ ) / NUM_ , NUM_ ) ;", "float fg L = NUM_ * fg R + NUM_ * fg G + NUM_ * fg B ;", "return Math . abs ( ( fg L + NUM_ ) / ( bg L + NUM_ ) ) ; }"]}
{"ids": "84440", "code": ["public static String decode BCD ( final short bcd ) {", "return String . format ( STR_ , ( bcd & NUM_ ) > > NUM_ , bcd & NUM_ ) ; }"]}
{"ids": "74420", "code": ["public void add Layout Editor ( Layout Editor panel ) {", "if ( panels . size ( ) > NUM_ ) {", "for ( int i = NUM_ ; i < panels . size ( ) ; i ++ ) {", "Layout Editor ed = panels . get ( i ) ;", "if ( ed == panel ) {", "return ; } } }", "panels . add ( panel ) ; }"]}
{"ids": "68109", "code": ["void trigger Wildcard Expander ( final Collection < File > all Files , final Wildcard Context wildcard Context ) throws IO Exception {", "LOG . debug ( STR_ , all Files ) ;", "if ( all Files . is Empty ( ) ) {", "final String message = String . format ( STR_ , wildcard Context . get Wildcard ( ) ) ;", "LOG . warn ( message ) ;", "throw new IO Exception ( message ) ; }", "if ( wildcard Expander Handler != null ) {", "try {", "wildcard Expander Handler . apply ( all Files ) ; }", "catch ( final IO Exception e ) {", "throw e ; }", "catch ( final Exception e ) {", "LOG . debug ( STR_ , e ) ;", "throw new IO Exception ( STR_ + e . get Message ( ) ) ; } } }"]}
{"ids": "21974", "code": ["@ POST @ Consumes ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Produces ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Check Permission ( roles = { Role . TENANT ADMIN } ) @ Path ( STR_ ) public Ip Interface Rest Rep create Ip Interface ( @ Path Param ( STR_ ) URI id , Ip Interface Create Param create Param ) throws Database Exception {", "Host host = query Object ( Host . class , id , true ) ;", "validate Ip Interface Data ( create Param , null ) ;", "Ip Interface ip Interface = new Ip Interface ( ) ;", "ip Interface . set Host ( host . get Id ( ) ) ;", "ip Interface . set Id ( URI Util . create Id ( Ip Interface . class ) ) ;", "populate Ip Interface ( create Param , ip Interface ) ;", "db Client . create Object ( ip Interface ) ;", "audit Op ( Operation Type Enum . CREATE HOST IPINTERFACE , true , null , ip Interface . audit Parameters ( ) ) ;", "return map ( ip Interface ) ; }"]}
{"ids": "16249", "code": ["protected List < I Edit Proposal > collect Edit Proposals ( ) {", "List < I Edit Proposal > proposals = new Array List < I Edit Proposal > ( ) ;", "View selected View = get Selected View ( ) ;", "if ( selected View != null ) {", "if ( proposal Providers != null ) {", "for ( I Edit Proposal Provider provider : proposal Providers ) {", "for ( I Edit Proposal edit Proposal : provider . get Proposals ( selected View ) ) {", "if ( edit Proposal . is Applicable ( ) ) proposals . add ( edit Proposal ) ; } } } }", "return proposals ; }"]}
{"ids": "43202", "code": ["private void ensure Namespace Exists ( Result result ) {", "Docker Image image = Docker Image . from Image Name ( result . name ) ;", "if ( image . get Namespace ( ) == null ) {", "result . name = String . format ( STR_ , DEFAULT NAMESPACE , image . get Repository ( ) ) ; } }"]}
{"ids": "38931", "code": ["protected int choose Random Index Based On Proportions ( double [ ] proportion Array , Random random ) {", "double prob Sum ;", "double val ;", "int index ;", "double sum ;", "prob Sum = Utils . sum ( proportion Array ) ;", "val = random . next Double ( ) * prob Sum ;", "index = NUM_ ;", "sum = NUM_ ;", "while ( ( sum <= val ) && ( index < proportion Array . length ) ) {", "sum += proportion Array [ index ++ ] ; }", "return index - NUM_ ; }"]}
{"ids": "74823", "code": ["private void check Width ( final int [ ] rect ) {", "final int x 1 = rect [ NUM_ ] ;", "final int y 2 = rect [ NUM_ ] ;", "final int y 1 = y 2 + rect [ NUM_ ] ;", "final int x 2 = x 1 + rect [ NUM_ ] ;", "if ( x 1 < page X 1 ) {", "page X 1 = x 1 ; }", "if ( x 2 > page X 2 ) {", "page X 2 = x 2 ; }", "if ( y 1 > page Y 1 ) {", "page Y 1 = y 1 ; }", "if ( y 2 < page Y 2 ) {", "page Y 2 = y 2 ; } }"]}
{"ids": "60192", "code": ["@ Not Null public static Map < Rad Component , List < Rad Component > > group Siblings ( @ Not Null List < ? extends Rad Component > components ) {", "Map < Rad Component , List < Rad Component > > sibling Lists = new Hash Map < Rad Component , List < Rad Component > > ( ) ;", "if ( components . is Empty ( ) ) {", "return sibling Lists ; }", "if ( components . size ( ) == NUM_ ) {", "Rad Component component = components . get ( NUM_ ) ;", "sibling Lists . put ( component . get Parent ( ) , Collections . singleton List ( component ) ) ;", "return sibling Lists ; }", "for ( Rad Component component : components ) {", "Rad Component parent = component . get Parent ( ) ;", "List < Rad Component > children = sibling Lists . get ( parent ) ;", "if ( children == null ) {", "children = new Array List < Rad Component > ( ) ;", "sibling Lists . put ( parent , children ) ; }", "children . add ( component ) ; }", "return sibling Lists ; }"]}
{"ids": "53118", "code": ["private int count Non Newline ( String str , int off , int len ) {", "for ( int cnt = NUM_ ; cnt < len ; cnt ++ ) {", "final int pos = off + cnt ;", "if ( str . char At ( pos ) == UNIX NEWLINE ) {", "return cnt ; }", "if ( str . char At ( pos ) == CARRIAGE RETURN ) {", "return cnt ; } }", "return len ; }"]}
{"ids": "4135", "code": ["public String description ( ) {", "String Builder sb = new String Builder ( ) ;", "if ( is Combo ( ) ) {", "int i = NUM_ ;", "for ( New Combo Leg leg : m combo Legs ) {", "if ( i ++ > NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( leg . to String ( ) ) ; } }", "else {", "sb . append ( m symbol ) ;", "app ( sb , m sec Type ) ;", "app ( sb , m exchange ) ;", "if ( m exchange != null && m exchange . equals ( STR_ ) && m primary Exch != null ) {", "app ( sb , m primary Exch ) ; }", "app ( sb , m expiry ) ;", "if ( m strike != NUM_ ) {", "app ( sb , m strike ) ; }", "if ( m right != Right . None ) {", "app ( sb , m right ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "34276", "code": ["public void add Claimed Signer Role ( final String claimed Signer Role ) {", "if ( ( claimed Signer Role == null ) || ( claimed Signer Role . length ( ) == NUM_ ) ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( claimed Signer Roles == null ) {", "claimed Signer Roles = new Array List < String > ( ) ; }", "claimed Signer Roles . add ( claimed Signer Role ) ; }"]}
{"ids": "34861", "code": ["@ Suppress Warnings ( STR_ ) @ Gwt Incompatible ( STR_ ) public static < K extends Object , V extends Object > void write Map ( Map < K , V > map , Object Output Stream stream ) throws IO Exception {", "stream . write Int ( map . size ( ) ) ;", "for ( Map . Entry < K , V > entry : map . entry Set ( ) ) {", "stream . write Object ( entry . get Key ( ) ) ;", "stream . write Object ( entry . get Value ( ) ) ; } }"]}
{"ids": "1699", "code": ["protected void sleep ( int sleep Millis , int sleep Nanos ) throws Interrupted Exception {", "Thread . sleep ( sleep Millis , sleep Nanos ) ; }"]}
{"ids": "76311", "code": ["public static void restore Previous Out And Err Stream ( ) {", "if ( ! already Muted ) {", "return ; }", "System . set Out ( latest Out ) ;", "System . set Err ( latest Err ) ;", "already Muted = false ; }"]}
{"ids": "34039", "code": ["public static Big Integer CRT ( List < Big Integer > congs , List < Big Integer > moduli ) {", "Big Integer [ ] cs = Array Converter . convert List To Array ( congs ) ;", "Big Integer [ ] ms = Array Converter . convert List To Array ( moduli ) ;", "return CRT ( cs , ms ) ; }"]}
{"ids": "43175", "code": ["protected < T extends Task Service Document < E > , E extends Enum < E > > T wait For Task Completion ( String document Self Link , Class < T > type ) throws Throwable {", "return wait For Property Value ( document Self Link , type , Task Service Document . FIELD NAME TASK STAGE , Arrays . as List ( Task Stage . FINISHED , Task Stage . FAILED , Task Stage . CANCELLED ) , true , wait For Stage Change Count Longer ( ) ) ; }"]}
{"ids": "76498", "code": ["private List < End Island > find Surrounding Islands ( int chunk X , int chunk Y , int chunks Per Fragment X , int chunks Per Fragment Y ) {", "List < End Island > result = new Linked List < End Island > ( ) ;", "for ( int y = - SURROUNDING CHUNKS ; y <= chunks Per Fragment Y + SURROUNDING CHUNKS ; y ++ ) {", "for ( int x = - SURROUNDING CHUNKS ; x <= chunks Per Fragment X + SURROUNDING CHUNKS ; x ++ ) {", "End Island island = try Create End Island ( chunk X + x , chunk Y + y ) ;", "if ( island != null ) {", "result . add ( island ) ; } } }", "return result ; }"]}
{"ids": "51038", "code": ["private static boolean calculate Gap ( Rectangle a , Rectangle b , Rectangle gap ) {", "if ( a . intersects ( b ) ) {", "gap . width = NUM_ ;", "return false ; }", "int ax 1 = a . x ;", "int ax 2 = a . x + a . width ;", "int ay 1 = a . y ;", "int ay 2 = a . y + a . height ;", "int bx 1 = b . x ;", "int bx 2 = b . x + b . width ;", "int by 1 = b . y ;", "int by 2 = b . y + b . height ;", "int x Overlap = Math . min ( ax 2 , bx 2 ) - Math . max ( ax 1 , bx 1 ) ;", "int y Overlap = Math . min ( ay 2 , by 2 ) - Math . max ( ay 1 , by 1 ) ;", "if ( x Overlap <= NUM_ && y Overlap <= NUM_ ) {", "gap . width = NUM_ ;", "return false ; }", "if ( x Overlap > NUM_ ) {", "gap . x = Math . max ( ax 1 , bx 1 ) ;", "gap . y = ( ay 1 > by 1 ) ? by 2 : ay 2 ;", "gap . width = x Overlap ;", "gap . height = - y Overlap ; }", "if ( y Overlap > NUM_ ) {", "gap . x = ( ax 1 > bx 1 ) ? bx 2 : ax 2 ;", "gap . y = Math . max ( ay 1 , by 1 ) ;", "gap . width = - x Overlap ;", "gap . height = y Overlap ; }", "return true ; }"]}
{"ids": "16213", "code": ["public static boolean is Intent Available ( Context context , String action ) {", "final Package Manager package Manager = context . get Package Manager ( ) ;", "final Intent intent = new Intent ( action ) ;", "Log . d ( MP TAG , STR_ + action ) ;", "List < Resolve Info > list = package Manager . query Intent Services ( intent , Package Manager . MATCH DEFAULT ONLY ) ;", "return list . size ( ) > NUM_ ; }"]}
{"ids": "48745", "code": ["private void send CONNECT Request ( ) throws IO Exception {", "int port = url . get Port ( ) ;", "requests . set ( NUM_ , HTTP CONNECT + STR_ + connect Request URI ( url ) + STR_ + http Version , null ) ;", "requests . set If Not Set ( STR_ , user Agent ) ;", "String host = url . get Host ( ) ;", "if ( port != - NUM_ && port != url . get Default Port ( ) ) {", "host += STR_ + String . value Of ( port ) ; }", "requests . set If Not Set ( STR_ , host ) ;", "requests . set If Not Set ( STR_ , accept String ) ;", "if ( http . get Http Keep Alive Set ( ) ) {", "requests . set If Not Set ( STR_ , STR_ ) ; }", "set Preemptive Proxy Authentication ( requests ) ;", "if ( logger . is Loggable ( Platform Logger . Level . FINE ) ) {", "logger . fine ( requests . to String ( ) ) ; }", "http . write Requests ( requests , null ) ; }"]}
{"ids": "48363", "code": ["private boolean is Self Signed ( X 509 Certificate cert ) {", "return signed By ( cert , cert ) ; }"]}
{"ids": "45706", "code": ["@ Request Mapping ( value = { STR_ , STR_ } , method = Request Method . PUT ) @ Response Body public Rest Wrapper insert ( @ Model Attribute ( STR_ ) @ Valid User Roles user Roles , Binding Result binding Result , Principal principal ) {", "Rest Wrapper rest Wrapper = null ;", "if ( binding Result . has Errors ( ) ) {", "Binding Result Error binding Result Error = new Binding Result Error ( ) ;", "return binding Result Error . error Message ( binding Result ) ; }", "try {", "com . wipro . ats . bdre . md . dao . jpa . User Roles jpa User Roles = new com . wipro . ats . bdre . md . dao . jpa . User Roles ( ) ;", "jpa User Roles . set User Role Id ( user Roles . get User Role Id ( ) ) ;", "jpa User Roles . set Role ( user Roles . get Role ( ) ) ;", "Users users = new Users ( ) ;", "users . set Username ( user Roles . get Username ( ) ) ;", "jpa User Roles . set Users ( users ) ;", "Integer user Roles Id = user Roles DAO . insert ( jpa User Roles ) ;", "user Roles . set User Role Id ( user Roles Id ) ;", "rest Wrapper = new Rest Wrapper ( user Roles , Rest Wrapper . OK ) ;", "LOGGER . info ( STR_ + user Roles . get User Role Id ( ) + STR_ + principal . get Name ( ) + user Roles ) ; }", "catch ( Exception e ) {", "LOGGER . error ( e ) ;", "rest Wrapper = new Rest Wrapper ( e . get Message ( ) , Rest Wrapper . ERROR ) ; }", "return rest Wrapper ; }"]}
{"ids": "53322", "code": ["public void rewind ( ) {", "synchronized ( used ) {", "for ( Parameter Pair pair : used ) {", "current . add Parameter ( pair . option , pair . value ) ; }", "used . clear ( ) ; } }"]}
{"ids": "29331", "code": ["public List < Interval > merge ( List < Interval > intervals ) {", "List < Interval > res = new Array List < > ( ) ;", "if ( intervals == null || intervals . size ( ) == NUM_ ) {", "return res ; }", "Collections . sort ( intervals , null ) ;", "Interval prev = null ;", "for ( Interval i : intervals ) {", "if ( prev == null || prev . end < i . start ) {", "res . add ( i ) ;", "prev = i ; }", "else if ( i . end > prev . end ) {", "prev . end = i . end ; } }", "return res ; }"]}
{"ids": "35024", "code": ["private String format Type ( Object type Rep ) {", "String Tokenizer tokenizer = new String Tokenizer ( type Rep . to String ( ) , STR_ , true ) ;", "String Builder sb = new String Builder ( ) ;", "while ( tokenizer . has More Tokens ( ) ) {", "String token = tokenizer . next Token ( ) ;", "if ( token . length ( ) == NUM_ || token . last Index Of ( STR_ ) == - NUM_ ) sb . append ( token ) ;", "else {", "int index = token . last Index Of ( STR_ ) ;", "sb . append ( token . substring ( index + NUM_ ) ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "50989", "code": ["@ Not Null public static String sha 1 ( @ Not Null File key Store File ) throws Exception {", "return sha 1 ( key Store File , null , null ) ; }"]}
{"ids": "7440", "code": ["@ Override public void pan Domain Axes ( double pan Range , Plot Rendering Info info , Point 2 D source ) {", "XY Plot subplot = find Subplot ( info , source ) ;", "if ( subplot == null ) {", "return ; }", "if ( ! subplot . is Domain Pannable ( ) ) {", "return ; }", "Plot Rendering Info subplot Info = info . get Subplot Info ( info . get Subplot Index ( source ) ) ;", "if ( subplot Info == null ) {", "return ; }", "for ( int i = NUM_ ; i < subplot . get Domain Axis Count ( ) ; i ++ ) {", "Value Axis domain Axis = subplot . get Domain Axis ( i ) ;", "if ( domain Axis != null ) {", "domain Axis . pan ( pan Range ) ; } } }"]}
{"ids": "76511", "code": ["private void init ( ) {", "start Controller = new Pour Start Controller ( ) ;", "start Controller . set Check View ( this ) ;", "wave Controller = new Wave Controller ( ) ;", "wave Controller . set Check View ( this ) ;", "Pour Finish Controller finish Controller = new Pour Finish Controller ( ) ;", "finish Controller . set Check View ( this ) ;", "Tick Controller tick Controller = new Tick Controller ( ) ;", "tick Controller . set Check View ( this ) ;", "List < Base Controller > finish Controllers = new Array List < > ( ) ;", "finish Controllers . add ( finish Controller ) ;", "finish Controllers . add ( tick Controller ) ;", "this . finish Controllers = finish Controllers ; }"]}
{"ids": "6471", "code": ["private J Label create Icon Label ( J Check Box check Box ) {", "check Box . set Opaque ( false ) ;", "check Box . set Size ( check Box . get Minimum Size ( ) ) ;", "Image image = new Buffered Image ( check Box . get Width ( ) , check Box . get Height ( ) , Transparency . TRANSLUCENT ) ;", "Graphics g = image . get Graphics ( ) ;", "check Box . paint ( g ) ;", "g . dispose ( ) ;", "return new J Label ( new Image Icon ( image ) ) ; }"]}
{"ids": "62094", "code": ["public void close Window ( ) {", "Window Event ev = new Window Event ( frame , Window Event . WINDOW CLOSING ) ;", "frame . dispatch Event ( ev ) ; }"]}
{"ids": "21976", "code": ["private void populate Host Data ( Host host , Host Param param ) {", "if ( param . get Name ( ) != null ) {", "host . set Label ( param . get Name ( ) ) ; }", "if ( param . get Host Name ( ) != null ) {", "host . set Host Name ( param . get Host Name ( ) ) ; }", "if ( param . get Cluster ( ) != null ) {", "host . set Cluster ( param . get Cluster ( ) ) ; }", "if ( param . get Os Version ( ) != null ) {", "host . set Os Version ( param . get Os Version ( ) ) ; }", "if ( param . get User Name ( ) != null ) {", "host . set Username ( param . get User Name ( ) ) ; }", "if ( param . get Password ( ) != null ) {", "host . set Password ( param . get Password ( ) ) ; }", "if ( param . get Port Number ( ) != null ) {", "host . set Port Number ( param . get Port Number ( ) ) ; }", "if ( param . get Use Ssl ( ) != null ) {", "host . set Use SSL ( param . get Use Ssl ( ) ) ; }", "if ( param . get Type ( ) != null ) {", "host . set Type ( param . get Type ( ) ) ; }", "if ( param . get Discoverable ( ) != null ) {", "host . set Discoverable ( param . get Discoverable ( ) ) ; }", "if ( param . get Vcenter Data Center ( ) != null ) {", "host . set Vcenter Data Center ( Null Column Value Getter . is Null URI ( param . get Vcenter Data Center ( ) ) ? Null Column Value Getter . get Null URI ( ) : param . get Vcenter Data Center ( ) ) ; }", "Cluster cluster = null ;", "if ( ! Null Column Value Getter . is Null URI ( param . get Cluster ( ) ) ) {", "cluster = query Object ( Cluster . class , param . get Cluster ( ) , true ) ;", "if ( ! Null Column Value Getter . is Null URI ( cluster . get Vcenter Data Center ( ) ) ) {", "host . set Vcenter Data Center ( cluster . get Vcenter Data Center ( ) ) ; }", "if ( ! Null Column Value Getter . is Null URI ( cluster . get Project ( ) ) ) {", "host . set Project ( cluster . get Project ( ) ) ; } }", "if ( param . get Boot Volume ( ) != null ) {", "host . set Boot Volume Id ( Null Column Value Getter . is Null URI ( param . get Boot Volume ( ) ) ? Null Column Value Getter . get Null URI ( ) : param . get Boot Volume ( ) ) ; } }"]}
{"ids": "50884", "code": ["@ Nullable public Avd Info create Or Update Avd ( @ Nullable Avd Info current Info , @ Not Null String avd Name , @ Not Null Device device , @ Not Null System Image Description system Image Description , @ Not Null Screen Orientation orientation , boolean is Circular , @ Nullable String sd Card , @ Nullable File skin Folder , @ Not Null Map < String , String > hardware Properties , boolean create Snapshot ) {", "if ( ! init If Necessary ( ) ) {", "return null ; }", "File avd Folder ;", "try {", "if ( current Info != null ) {", "avd Folder = new File ( current Info . get Data Folder Path ( ) ) ; }", "else {", "avd Folder = Avd Info . get Default Avd Folder ( my Avd Manager , avd Name , my File Op , true ) ; } }", "catch ( Android Location . Android Location Exception e ) {", "IJ LOG . error ( STR_ + avd Name , e ) ;", "return null ; }", "Dimension resolution = device . get Screen Size ( orientation ) ;", "assert resolution != null ;", "String skin Name = null ;", "if ( skin Folder == null && is Circular ) {", "skin Folder = get Round Skin ( system Image Description ) ; }", "if ( File Util . files Equal ( skin Folder , Avd Wizard Utils . NO SKIN ) ) {", "skin Folder = null ; }", "if ( skin Folder == null ) {", "skin Name = String . format ( STR_ , Math . round ( resolution . get Width ( ) ) , Math . round ( resolution . get Height ( ) ) ) ; }", "if ( orientation == Screen Orientation . LANDSCAPE ) {", "hardware Properties . put ( Hardware Properties . HW INITIAL ORIENTATION , Screen Orientation . LANDSCAPE . get Short Display Value ( ) . to Lower Case ( Locale . ROOT ) ) ; }", "if ( current Info != null && ! avd Name . equals ( current Info . get Name ( ) ) ) {", "boolean success = my Avd Manager . move Avd ( current Info , avd Name , current Info . get Data Folder Path ( ) , SDK LOG ) ;", "if ( ! success ) {", "return null ; } }", "return my Avd Manager . create Avd ( avd Folder , avd Name , system Image Description . get System Image ( ) , skin Folder , skin Name , sd Card , hardware Properties , device . get Boot Props ( ) , create Snapshot , false , current Info != null , SDK LOG ) ; }"]}
{"ids": "67033", "code": ["public Disjoint Sets ( int num Elements ) {", "array = new int [ num Elements ] ;", "Arrays . fill ( array , - NUM_ ) ; }"]}
{"ids": "9197", "code": ["public final void print Clusters ( Print Writer out , List < Cluster Data > cluster Data , int [ ] mat Index To Msg Internal Id ) throws Ade Exception {", "if ( m final Clusters == null ) {", "update Clusters ( cluster Data , mat Index To Msg Internal Id ) ; }", "for ( Map . Entry < String , Collection < Integer > > entry : m final Clusters . entry Set ( ) ) {", "final String n = entry . get Key ( ) ;", "final Collection < Integer > c = entry . get Value ( ) ;", "out . printf ( STR_ , n ) ;", "for ( int m : c ) {", "out . printf ( STR_ , mat Index To Msg Internal Id [ m ] ) ; }", "out . println ( ) ; } }"]}
{"ids": "4941", "code": ["public final boolean check trace ( Polyline p polyline , int p half width , int p layer , Net Nos List p net no arr , int p clearance class no , int p max recursion depth , int p max via recursion depth , int p max spring over recursion depth ) {", "Awtree Shape Search search tree = search tree manager . get default tree ( ) ;", "int compensated half width = p half width + search tree . get clearance compensation ( p clearance class no , p layer ) ;", "Array List < Shape Tile > trace shapes = p polyline . offset shapes ( compensated half width , NUM_ , p polyline . corner count ( ) ) ;", "for ( int index = NUM_ ; index < trace shapes . size ( ) ; ++ index ) {", "Shape Tile curr trace shape = trace shapes . get ( index ) ;", "Brd From Side from side = new Brd From Side ( p polyline , index + NUM_ , curr trace shape ) ;", "boolean check shove ok = shove trace algo . shove trace check ( curr trace shape , from side , null , p layer , p net no arr , p clearance class no , p max recursion depth , p max via recursion depth , p max spring over recursion depth , null ) ;", "if ( ! check shove ok ) return false ; }", "return true ; }"]}
{"ids": "53985", "code": ["public static void delete ( File file Or Folder ) throws IO Exception {", "if ( file Or Folder != null ) delete ( file Or Folder . to Path ( ) ) ; }"]}
{"ids": "10884", "code": ["public static double [ ] expand Array D ( int buffer Size , double [ ] current Array ) {", "if ( current Array == null ) {", "return new double [ buffer Size * NUM_ ] ; }", "int length = current Array . length ;", "double [ ] ret = new double [ length + buffer Size * NUM_ ] ;", "System . arraycopy ( current Array , NUM_ , ret , NUM_ , length ) ;", "return ret ; }"]}
{"ids": "41344", "code": ["@ Suppress Warnings ( STR_ ) public void post Process Bean Factory ( Configurable Listable Bean Factory configurable Listable Bean Factory ) {", "if ( configurable Listable Bean Factory . contains Bean ( session Factory Bean Name ) ) {", "Bean Definition session Factory Bean Definition = configurable Listable Bean Factory . get Bean Definition ( session Factory Bean Name ) ;", "Mutable Property Values property Values = session Factory Bean Definition . get Property Values ( ) ;", "if ( mapping Resources != null ) {", "Property Value property Value = property Values . get Property Value ( STR_ ) ;", "if ( property Value == null ) {", "property Value = new Property Value ( STR_ , new Array List ( ) ) ;", "property Values . add Property Value ( property Value ) ; }", "List existing Mapping Resources = ( List ) property Value . get Value ( ) ;", "existing Mapping Resources . add All ( mapping Resources ) ; }", "if ( annotated Classes != null ) {", "Property Value property Value = property Values . get Property Value ( STR_ ) ;", "if ( property Value == null ) {", "property Value = new Property Value ( STR_ , new Array List ( ) ) ;", "property Values . add Property Value ( property Value ) ; }", "List existing Mapping Resources = ( List ) property Value . get Value ( ) ;", "existing Mapping Resources . add All ( annotated Classes ) ; }", "if ( config Locations != null ) {", "Property Value property Value = property Values . get Property Value ( STR_ ) ;", "if ( property Value == null ) {", "property Value = new Property Value ( STR_ , new Array List ( ) ) ;", "property Values . add Property Value ( property Value ) ; }", "List existing Config Locations = ( List ) property Value . get Value ( ) ;", "existing Config Locations . add All ( config Locations ) ; }", "if ( hibernate Properties != null ) {", "Property Value property Value = property Values . get Property Value ( STR_ ) ;", "if ( property Value == null ) {", "property Value = new Property Value ( STR_ , new Properties ( ) ) ;", "property Values . add Property Value ( property Value ) ; }", "Properties existing Hibernate Properties = ( Properties ) property Value . get Value ( ) ;", "existing Hibernate Properties . put All ( hibernate Properties ) ; } }", "else {", "throw new No Such Bean Definition Exception ( STR_ + session Factory Bean Name + STR_ + STR_ ) ; } }"]}
{"ids": "78807", "code": ["protected int encode ( double value , double lower , double upper , int nbits ) {", "if ( value < lower ) return NUM_ ;", "int maxval = ( int ) ( Math . pow ( NUM_ , nbits ) - NUM_ ) ;", "if ( value >= upper ) return maxval ;", "return ( int ) ( ( value - lower ) * ( ( maxval - NUM_ ) / ( upper - lower ) ) ) ; }"]}
{"ids": "11497", "code": ["public long skip Bytes ( long n ) throws IO Exception {", "long count = NUM_ ;", "long gotsofar = NUM_ ;", "if ( input Stream == null ) {", "reopen ( ) ;", "if ( input Stream == null ) {", "reopen ( ) ;", "throw new IO Exception ( STR_ ) ; } }", "while ( count < n ) {", "gotsofar = input Stream . skip ( n - count ) ;", "if ( gotsofar == NUM_ ) {", "Debug . error ( STR_ + n + STR_ ) ;", "break ; }", "count += gotsofar ; }", "count ( ( int ) count ) ;", "return count ; }"]}
{"ids": "13844", "code": ["public void handle Tbl DS Attribute Map List Href Action Request ( Request Invocation Event event ) throws Model Control Exception {", "try {", "Map values = get Values ( ) ;", "on Before Save Profile ( values ) ;", "set Page Session Attribute ( PROPERTY ATTRIBUTE , ( Hash Map ) values ) ;", "WSPP Service DS Attribute Map List Edit View Bean vb = ( WSPP Service DS Attribute Map List Edit View Bean ) get View Bean ( WSPP Service DS Attribute Map List Edit View Bean . class ) ;", "unlock Page Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . populate Values ( ( String ) get Display Field Value ( STR_ ) ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ;", "forward To ( ) ; } }"]}
{"ids": "47059", "code": ["private V do Get ( Object key ) {", "if ( key == null ) throw new Null Pointer Exception ( ) ;", "Comparator < ? super K > cmp = comparator ;", "outer : for ( ; ; ) {", "for ( Node < K , V > b = find Predecessor ( key , cmp ) , n = b . next ; ; ) {", "Object v ;", "int c ;", "if ( n == null ) break outer ;", "Node < K , V > f = n . next ;", "if ( n != b . next ) break ;", "if ( ( v = n . value ) == null ) {", "n . help Delete ( b , f ) ;", "break ; }", "if ( b . value == null || v == n ) break ;", "if ( ( c = cpr ( cmp , key , n . key ) ) == NUM_ ) {", "@ Suppress Warnings ( STR_ ) V vv = ( V ) v ;", "return vv ; }", "if ( c < NUM_ ) break outer ;", "b = n ;", "n = f ; } }", "return null ; }"]}
{"ids": "54805", "code": ["void handle Swf Loaded Event ( Swf Loaded Event e ) {", "dump Swf Loaded Line ( e ) ; }"]}
{"ids": "33472", "code": ["private void quick Reply ( ) {", "quick Reply Sms Message = sms Popup Pager . get Active Message ( ) ;", "quick Reply ( quick Reply Sms Message . get Reply Text ( ) ) ; }"]}
{"ids": "59574", "code": ["public boolean has Changed ( ) {", "return System . identity Hash Code ( config ) != initial Hash ; }"]}
{"ids": "78213", "code": ["void fix Compatibility ( View root ) {", "Queue < View > queue = new Linked List < View > ( ) ;", "queue . add ( root ) ;", "View view = null ;", "while ( ( view = queue . poll ( ) ) != null ) {", "if ( view instanceof View Group ) {", "View Group group = ( View Group ) view ;", "for ( int i = NUM_ ; i < group . get Child Count ( ) ; i ++ ) {", "queue . add ( group . get Child At ( i ) ) ; } } } }"]}
{"ids": "14549", "code": ["public void substitute Header ( int state , String header ) throws Auth Login Exception {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + state + STR_ + header ) ; }", "if ( state > state Length ) {", "throw new Auth Login Exception ( bundle Name , STR_ , new Object [ ] { new Integer ( state ) } ) ; }", "Callback [ ] ext = get Callback ( state ) ;", "if ( ext . length <= NUM_ ) {", "throw new Auth Login Exception ( bundle Name , STR_ , null ) ; }", "if ( ( header != null ) && ( header . length ( ) != NUM_ ) ) {", "Page Properties Callback pc = ( Page Properties Callback ) ( ( Callback [ ] ) internal . get ( state - NUM_ ) ) [ NUM_ ] ;", "pc . set Header ( header ) ; } }"]}
{"ids": "69741", "code": ["public static Service create Service ( Pattern Timetable timetable ) {", "Calendar calendar = new Calendar ( ) ;", "calendar . monday = timetable . monday ? NUM_ : NUM_ ;", "calendar . tuesday = timetable . tuesday ? NUM_ : NUM_ ;", "calendar . wednesday = timetable . wednesday ? NUM_ : NUM_ ;", "calendar . thursday = timetable . thursday ? NUM_ : NUM_ ;", "calendar . friday = timetable . friday ? NUM_ : NUM_ ;", "calendar . saturday = timetable . saturday ? NUM_ : NUM_ ;", "calendar . sunday = timetable . sunday ? NUM_ : NUM_ ;", "String Builder name Builder = new String Builder ( STR_ ) ;", "name Builder . append ( timetable . monday ? STR_ : STR_ ) ;", "name Builder . append ( timetable . monday ? STR_ : STR_ ) ;", "name Builder . append ( timetable . monday ? STR_ : STR_ ) ;", "name Builder . append ( timetable . monday ? STR_ : STR_ ) ;", "name Builder . append ( timetable . monday ? STR_ : STR_ ) ;", "name Builder . append ( timetable . monday ? STR_ : STR_ ) ;", "name Builder . append ( timetable . monday ? STR_ : STR_ ) ;", "Service service = new Service ( name Builder . to String ( ) ) ;", "calendar . start date = NUM_ ;", "calendar . end date = NUM_ ;", "service . calendar = calendar ;", "return service ; }"]}
{"ids": "30172", "code": ["public T allowed Users ( User ... users ) {", "List < User > users List = Arrays . as List ( users ) ;", "this . user Predicate = null ;", "return instance ( ) ; }"]}
{"ids": "22467", "code": ["V Plex Distributed Device Info find Distributed Device ( String device Name ) throws V Plex Api Exception {", "return find Distributed Device ( device Name , false ) ; }"]}
{"ids": "76918", "code": ["static Copy State read Copy State ( Data Input in ) throws IO Exception {", "byte [ ] infos Bytes = new byte [ in . read V Int ( ) ] ;", "in . read Bytes ( infos Bytes , NUM_ , infos Bytes . length ) ;", "long gen = in . read V Long ( ) ;", "long version = in . read V Long ( ) ;", "Map < String , File Meta Data > files = read Files Meta Data ( in ) ;", "int count = in . read V Int ( ) ;", "Set < String > completed Merge Files = new Hash Set < > ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "completed Merge Files . add ( in . read String ( ) ) ; }", "long primary Gen = in . read V Long ( ) ;", "return new Copy State ( files , version , gen , infos Bytes , completed Merge Files , primary Gen , null ) ; }"]}
{"ids": "19664", "code": ["public void notify Tasks ( ) {", "if ( tracker . should Interrupt Task ( ) ) {", "for ( Thread t : thread Map . values ( ) ) {", "t . interrupt ( ) ; } } }"]}
{"ids": "73453", "code": ["public boolean confirm Overwrite ( final File file ) {", "String message = STR_ + file . get Name ( ) + STR_ ;", "Object [ ] options = { STR_ , STR_ } ;", "return J Option Pane . YES OPTION == J Option Pane . show Option Dialog ( null , message , STR_ , J Option Pane . DEFAULT OPTION , J Option Pane . WARNING MESSAGE , null , options , options [ NUM_ ] ) ; }"]}
{"ids": "35331", "code": ["public int find Line ( int offset ) {", "int line = line Starts . length - NUM_ ;", "while ( ( line Starts [ line ] > offset ) && ( line > NUM_ ) ) {", "line -- ; }", "return line ; }"]}
{"ids": "73186", "code": ["public void clear ( ) {", "Set < Sensor > old Selection = new Hash Set < Sensor > ( selection ) ;", "selection . clear ( ) ;", "if ( ! old Selection . is Empty ( ) ) {", "fire Selection Changed ( old Selection , selection ) ; } }"]}
{"ids": "41758", "code": ["private void load File Recursively ( String path , Map < String , Thrift File Element > loaded Files ) throws IO Exception {", "Thrift File Element element = null ;", "File dir = null ;", "File file = find First Existing ( path , null ) ;", "if ( file != null ) {", "file = file . get Canonical File ( ) ;", "if ( loaded Files . contains Key ( file . get Absolute Path ( ) ) ) {", "return ; }", "dir = file . get Parent File ( ) ;", "element = load Single File ( file . get Parent File ( ) , file . get Name ( ) ) ; }", "if ( element == null ) {", "throw new File Not Found Exception ( STR_ + path + STR_ + include Paths ) ; }", "loaded Files . put ( file . get Absolute Path ( ) , element ) ;", "Immutable List < Include Element > includes = element . includes ( ) ;", "if ( includes . size ( ) > NUM_ ) {", "include Paths . add First ( dir ) ;", "for ( Include Element include : includes ) {", "if ( ! include . is Cpp ( ) ) {", "load File Recursively ( include . path ( ) , loaded Files ) ; } }", "include Paths . remove First ( ) ; } }"]}
{"ids": "51183", "code": ["public void assure Proxy Ok ( ) {", "if ( socket . is Closed ( ) ) {", "restart ( ) ; } }"]}
{"ids": "19642", "code": ["@ Override public boolean add ( I Message message ) {", "return add ( message , false ) ; }"]}
{"ids": "53946", "code": ["public Key ( byte [ ] hash ) {", "if ( hash . length != SHA 1 HASH LENGTH ) {", "throw new Illegal Argument Exception ( STR_ + hash . length ) ; }", "System . arraycopy ( hash , NUM_ , this . hash , NUM_ , SHA 1 HASH LENGTH ) ; }"]}
{"ids": "69772", "code": ["private static Road Permission road Flag Comparision ( Way iosm Way , String new Tag , String new Value , Enum Set < Edge Store . Edge Flag > forward Expected , Enum Set < Edge Store . Edge Flag > backward Expected ) {", "Way osm Way = new Way ( ) ;", "String Joiner string Joiner = new String Joiner ( STR_ ) ;", "for ( OSM Entity . Tag tag : iosm Way . tags ) {", "osm Way . add Tag ( tag . key , tag . value ) ;", "string Joiner . add ( tag . key + STR_ + tag . value ) ; }", "if ( new Tag != null && new Value != null ) {", "osm Way . add Tag ( new Tag , new Value ) ;", "string Joiner . add ( new Tag + STR_ + new Value ) ; }", "Set < Edge Store . Edge Flag > forward Filtered ;", "Set < Edge Store . Edge Flag > backward Filtered ;", "Road Permission road Permission = traversal Permission Labeler . get Permissions ( osm Way ) ;", "forward Filtered = filter Flags ( road Permission . forward ) ;", "backward Filtered = filter Flags ( road Permission . backward ) ;", "String tags = STR_ + string Joiner . to String ( ) ;", "assert Equals ( tags , forward Expected , forward Filtered ) ;", "assert Equals ( tags , backward Expected , backward Filtered ) ;", "return road Permission ; }"]}
{"ids": "13860", "code": ["public void begin Display ( Display Event event ) throws Model Control Exception {", "Identity Subject Model subject Model = get Subject Model ( ) ;", "Policy Model model = ( Policy Model ) get Model ( ) ;", "super . begin Display ( event ) ;", "if ( ! can Modify ) {", "Map map Values = get Default Values ( ) ;", "if ( ( map Values != null ) && ! map Values . is Empty ( ) ) {", "Set values = ( Set ) map Values . get ( AM Identity Membership Condition . AM IDENTITY NAME ) ;", "Set identity Names = helper . get AM Identity Names ( model . get User SSO Token ( ) , values ) ;", "property Sheet Model . set Value ( VALUES MULTIPLE CHOICE VALUE , AM Admin Utils . get String ( identity Names , STR_ , false ) ) ; } }", "else {", "CC Drop Down Menu menu = ( CC Drop Down Menu ) get Child ( FILTER TYPE ) ;", "Map supported Entity Types = model . get Supported Entity Types ( realm Name ) ;", "Option List entity Types = create Option List ( supported Entity Types ) ;", "entity Types . add ( NUM_ , STR_ , STR_ ) ;", "menu . set Options ( entity Types ) ;", "menu . set Value ( STR_ ) ;", "CC Add Remove child = ( CC Add Remove ) get Child ( VALUES MULTIPLE CHOICE VALUE ) ;", "child . restore State Data ( ) ;", "if ( ! submit Cycle ) {", "helper . set Selected Identities ( child , model . get User SSO Token ( ) , model . get User Locale ( ) , this , get Default Values ( ) ) ; }", "else {", "Option List possible = helper . create Option List ( model . get User SSO Token ( ) , model . get User Locale ( ) , this , get Possible Values ( subject Model , realm Name ) ) ;", "Option List selected = add Remove Model . get Selected Option List ( ) ;", "List selected Ids = AM Admin Utils . to List ( selected ) ;", "child . reset State Data ( ) ;", "add Remove Model . set Available Option List ( possible ) ;", "add Remove Model . set Selected Option List ( helper . create Option List ( model . get User SSO Token ( ) , model . get User Locale ( ) , this , selected Ids ) ) ; } } }"]}
{"ids": "63367", "code": ["public byte [ ] read Bytes ( ) throws IO Exception {", "int len = read Int ( ) ;", "if ( len == - NUM_ ) {", "return null ; }", "byte [ ] b = Data Utils . new Bytes ( len ) ;", "in . read Fully ( b ) ;", "return b ; }"]}
{"ids": "39322", "code": ["public String use Relative Path Tip Text ( ) {", "return STR_ ; }"]}
{"ids": "21425", "code": ["public List < Interface > show Interface ( ) throws Network Device Controller Exception {", "List < Interface > interfaces = new Array List < Interface > ( ) ;", "SSH Prompt [ ] prompts = { SSH Prompt . POUND , SSH Prompt . GREATER THAN } ;", "String Builder buf = new String Builder ( ) ;", "SSH Prompt prompt = send Wait For ( MDS Dialog Properties . get String ( STR_ ) , NUM_ , prompts , buf ) ;", "String [ ] lines = get Lines ( buf ) ;", "String [ ] regex = { MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) } ;", "String [ ] groups = new String [ NUM_ ] ;", "Interface intf = null ;", "for ( String line : lines ) {", "int index = match ( line , regex , groups ) ;", "switch ( index ) {", "case NUM_ :", "intf = new Interface ( groups [ NUM_ ] ) ;", "intf . set Status ( groups [ NUM_ ] ) ;", "interfaces . add ( intf ) ;", "break ;", "case NUM_ :", "intf . set Description ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "intf . set Wwpn ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "intf . set Mode ( groups [ NUM_ ] ) ;", "intf . set Fcid ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "intf . set Vsan ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "intf . set Mode ( groups [ NUM_ ] ) ;", "break ; } }", "return interfaces ; }"]}
{"ids": "75112", "code": ["protected void clear Data Lists ( int obd Service ) {", "switch ( obd Service ) {", "case OBD SVC DATA :", "case OBD SVC FREEZEFRAME :", "pid Supported . clear ( ) ;", "Pid Pvs . clear ( ) ;", "break ;", "case OBD SVC READ CODES :", "case OBD SVC PENDINGCODES :", "case OBD SVC PERMACODES :", "t Codes . clear ( ) ;", "break ;", "case OBD SVC VEH INFO :", "pid Supported . clear ( ) ;", "Vid Pvs . clear ( ) ;", "break ; } }"]}
{"ids": "71236", "code": ["public Quad Edge make Edge ( Vertex o , Vertex d ) {", "Quad Edge q = Quad Edge . make Edge ( o , d ) ;", "quad Edges . add ( q ) ;", "return q ; }"]}
{"ids": "77477", "code": ["public static void sort Seqs ( List < String > seqs ) {", "Collections . sort ( seqs , null ) ; }"]}
{"ids": "82756", "code": ["private Shape decode Edge ( int width , int height ) {", "path . reset ( ) ;", "path . move To ( width - NUM_ , NUM_ ) ;", "path . line To ( width - NUM_ , height - NUM_ ) ;", "path . line To ( width - NUM_ , height - NUM_ ) ;", "path . line To ( NUM_ , height - NUM_ ) ;", "return path ; }"]}
{"ids": "78549", "code": ["public boolean has Been Called ( String resource Name ) {", "return uris . contains ( resource Name ) ; }"]}
{"ids": "53473", "code": ["@ Override public void read External ( Object Input in ) throws IO Exception , Class Not Found Exception {", "super . read External ( in ) ;", "is Leaf = in . read Boolean ( ) ;", "num Entries = in . read Int ( ) ; }"]}
{"ids": "15120", "code": ["public static Connection Factory new Failover Connection Pool ( Set < LDAPURL > servers , String username , char [ ] password , int max Size , int heart Beat Interval , String heart Beat Time Unit , Options ldap Options ) {", "List < Connection Factory > factories = new Array List < Connection Factory > ( servers . size ( ) ) ;", "for ( LDAPURL ldapurl : servers ) {", "Connection Factory cf = Connections . new Fixed Connection Pool ( new Connection Factory ( ldapurl , username , password , heart Beat Interval , heart Beat Time Unit , ldap Options ) , max Size ) ;", "factories . add ( cf ) ; }", "return load Balance Factories ( factories ) ; }"]}
{"ids": "74857", "code": ["public Printf Format ( final String fmt Arg ) throws Illegal Argument Exception {", "this ( Locale . get Default ( ) , fmt Arg ) ; }"]}
{"ids": "72163", "code": ["public Message Property Key ( String description , Integer ordinal ) {", "this . description = description ;", "this . ordinal = ordinal ; }"]}
{"ids": "54503", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) public static Line By Line File Input Operator restore Check Point ( Line By Line File Input Operator check Point Oper , Byte Array Output Stream bos ) throws Exception {", "Kryo kryo = new Kryo ( ) ;", "Input l Input = new Input ( bos . to Byte Array ( ) ) ;", "Line By Line File Input Operator oper = kryo . read Object ( l Input , check Point Oper . get Class ( ) ) ;", "l Input . close ( ) ;", "return oper ; }"]}
{"ids": "48751", "code": ["private static synchronized boolean is Supported Impl ( Http Caller Info hci ) {", "if ( supported == null ) {", "supported = new Hash Map < String , Boolean > ( ) ;", "cache = new Hash Map < String , Negotiator > ( ) ; }", "String hostname = hci . host ;", "hostname = hostname . to Lower Case ( ) ;", "if ( supported . contains Key ( hostname ) ) {", "return supported . get ( hostname ) ; }", "Negotiator neg = Negotiator . get Negotiator ( hci ) ;", "if ( neg != null ) {", "supported . put ( hostname , true ) ;", "cache . put ( hostname , neg ) ;", "return true ; }", "else {", "supported . put ( hostname , false ) ;", "return false ; } }"]}
{"ids": "81902", "code": ["public Shape chart To Screen Shape ( Shape s ) {", "General Path p = new General Path ( ) ;", "Transform inverse = Transform . make Translation ( get Absolute X ( ) , get Absolute Y ( ) ) ;", "if ( current Transform != null ) {", "inverse . concatenate ( current Transform ) ; }", "p . append ( s . get Path Iterator ( inverse ) , false ) ;", "return p ; }"]}
{"ids": "33406", "code": ["public Auth Request authenticate ( List discoveries , String return To Url ) throws Consumer Exception , Message Exception {", "return authenticate ( discoveries , return To Url , return To Url ) ; }"]}
{"ids": "42744", "code": ["public boolean is Numerical Run ( String pin ) {", "final int len = pin . length ( ) ;", "int prev Digit = Character . digit ( pin . char At ( NUM_ ) , NUM_ ) ;", "int prev Diff = Integer . MAX VALUE ;", "boolean is Run = true ;", "for ( int i = NUM_ ; is Run && i < len ; i ++ ) {", "final int digit = Character . digit ( pin . char At ( i ) , NUM_ ) ;", "final int diff = digit - prev Digit ;", "if ( prev Diff != Integer . MAX VALUE && diff != prev Diff ) {", "is Run = false ; }", "prev Diff = diff ;", "prev Digit = digit ; }", "return is Run ; }"]}
{"ids": "44250", "code": ["public static int uri Type ( String uri ) {", "if ( uri . index Of ( STR_ ) != - NUM_ ) {", "return ABS URI ; }", "else if ( uri . starts With ( STR_ ) ) {", "return ROOT REL URI ; }", "else {", "return NOROOT REL URI ; } }"]}
{"ids": "9510", "code": ["public static boolean is Resource Reference ( String str ) {", "return str . starts With ( BIG QUOTE LEFT ) && str . ends With ( BIG QUOTE RIGHT ) && str . char At ( NUM_ ) == AT . char At ( NUM_ ) ; }"]}
{"ids": "82928", "code": ["public boolean leave ( ) throws Keeper Exception , Interrupted Exception {", "zoo Keeper . delete ( root Path + STR_ + name , NUM_ ) ;", "while ( true ) {", "synchronized ( mutex ) {", "List < String > list = zoo Keeper . get Children ( root Path , true ) ;", "if ( list . size ( ) > NUM_ ) {", "mutex . wait ( ) ; }", "else {", "return true ; } } } }"]}
{"ids": "7266", "code": ["public Select Clause add With As Provided Name ( String property Name , String as Name ) {", "select List . add ( new Select Clause Expression ( new Property Value Expression ( property Name ) , as Name ) ) ;", "return this ; }"]}
{"ids": "20945", "code": ["public void add Interface ( String interface Name ) {", "short interface Index = its Constant Pool . add Class ( interface Name ) ;", "its Interfaces . add ( Short . value Of ( interface Index ) ) ; }"]}
{"ids": "10260", "code": ["public static String cut From Index Of ( String string , String substring ) {", "int i = string . index Of ( substring ) ;", "if ( i != - NUM_ ) {", "string = string . substring ( i ) ; }", "return string ; }"]}
{"ids": "10355", "code": ["private Response request Http Get From Registry ( String url ) throws Registry Exception {", "try {", "Response resp = http . get ( url ) ;", "if ( resp != null && resp . content != null ) {", "return resp ; }", "else {", "throw new Registry Exception ( TYPE . BAD RESPONSE , STR_ ) ; } }", "catch ( Class Cast Exception e ) {", "throw new Registry Exception ( TYPE . BAD RESPONSE , e ) ; }", "catch ( Connect Exception e ) {", "throw new Registry Exception ( TYPE . PROXY , e ) ; }", "catch ( Unknown Host Exception e ) {", "try {", "http . get ( STR_ ) ; }", "catch ( Exception e 1 ) {", "throw new Registry Exception ( TYPE . NO INTERNET , e 1 ) ; }", "throw new Registry Exception ( TYPE . SITE DOWN , e ) ; }", "catch ( IO Exception e ) {", "throw new Registry Exception ( TYPE . IO ERROR , e ) ; }", "catch ( URI Syntax Exception e ) {", "throw new Registry Exception ( TYPE . BAD REQUEST , STR_ + ( ( url != null ) ? url : STR_ ) ) ; } }"]}
{"ids": "83449", "code": ["public void init ( Remote Authenticated User current User ) {", "this . current User = current User ; }"]}
{"ids": "16796", "code": ["private void remove Tv Show ( Tv Show tv Show ) {", "synchronized ( root ) {", "Tv Show Tree Node child = ( Tv Show Tree Node ) node Map . get ( tv Show ) ;", "Default Mutable Tree Node parent = root ;", "if ( child != null ) {", "int index = get Index Of Child ( parent , child ) ;", "node Map . remove ( tv Show ) ;", "for ( Tv Show Episode episode : new Array List < > ( tv Show . get Episodes ( ) ) ) {", "node Map . remove ( episode ) ;", "episode . remove Property Change Listener ( property Change Listener ) ; }", "tv Show . remove Property Change Listener ( property Change Listener ) ;", "child . remove All Children ( ) ;", "child . remove From Parent ( ) ;", "if ( index > - NUM_ ) {", "Tree Model Event event = new Tree Model Event ( this , parent . get Path ( ) , new int [ ] { index } , new Object [ ] { child } ) ;", "for ( Tree Model Listener listener : listeners ) {", "try {", "listener . tree Nodes Removed ( event ) ; }", "catch ( Null Pointer Exception | Array Index Out Of Bounds Exception npe ) { } } } } } }"]}
{"ids": "41291", "code": ["private Compliance Feature check Encrypt Policy ( org . wso 2 . emm . agent . beans . Operation operation ) {", "boolean encrypt Status = ( device Policy Manager . get Storage Encryption Status ( ) != device Policy Manager . ENCRYPTION STATUS UNSUPPORTED && device Policy Manager . get Storage Encryption Status ( ) != device Policy Manager . ENCRYPTION STATUS INACTIVE ) ;", "if ( ( operation . is Enabled ( ) && encrypt Status ) || ( ! operation . is Enabled ( ) && ! encrypt Status ) ) {", "policy . set Compliance ( true ) ; }", "else {", "policy . set Compliance ( false ) ;", "policy . set Message ( resources . get String ( R . string . error encrypt policy ) ) ; }", "return policy ; }"]}
{"ids": "76320", "code": ["public static int instance Of ( Object o , Class < ? > c ) {", "if ( o == null ) return FALSE ;", "return c . is Assignable From ( o . get Class ( ) ) ? TRUE : FALSE ; }"]}
{"ids": "27934", "code": ["@ Override public Void call ( ) throws Exception {", "Multicast Socket datagram Socket = null ;", "Executor Service service = null ;", "try {", "datagram Socket = new Multicast Socket ( port ) ;", "datagram Socket . join Group ( group ) ;", "service = Executors . new Single Thread Scheduled Executor ( new Daemon Thread Factory ( STR_ ) ) ;", "final byte [ ] buffer = new byte [ BUFFER SIZE ] ;", "final Datagram Packet packet = new Datagram Packet ( buffer , NUM_ , buffer . length ) ;", "listening = true ;", "while ( true ) {", "try {", "datagram Socket . receive ( packet ) ;", "if ( Thread . interrupted ( ) ) {", "break ; }", "final I Ganglia Message msg = decode Record ( packet . get Data ( ) , packet . get Offset ( ) , packet . get Length ( ) ) ;", "if ( msg != null ) {", "service . submit ( new Dispatch Task ( handler , msg ) ) ; } }", "catch ( Throwable t ) {", "log . warn ( t , t ) ; } }", "return ( Void ) null ; }", "finally {", "if ( service != null ) {", "service . shutdown ( ) ; }", "if ( datagram Socket != null ) {", "datagram Socket . close ( ) ; }", "listening = false ; } }"]}
{"ids": "8300", "code": ["protected static void invalidate Switch Points ( ) {", "if ( LOG ENABLED ) {", "LOG . info ( STR_ ) ; }", "synchronized ( Indy Interface . class ) {", "Switch Point old = switch Point ;", "switch Point = new Switch Point ( ) ;", "Switch Point . invalidate All ( new Switch Point [ ] { old } ) ; } }"]}
{"ids": "22235", "code": ["public Vdc Config to Config Param ( Properties vdc Info ) {", "log . info ( STR_ , vdc Info . get Property ( Geo Service Job . VDC SHORT ID ) ) ;", "Vdc Config vdc Config = new Vdc Config ( ) ;", "vdc Config . set Id ( URI Util . uri ( vdc Info . get Property ( Geo Service Job . OPERATED VDC ID ) ) ) ;", "vdc Config . set Short Id ( vdc Info . get Property ( Geo Service Job . VDC SHORT ID ) ) ;", "vdc Config . set Secret Key ( vdc Info . get Property ( Geo Service Job . VDC SECRETE KEY ) ) ;", "String name = vdc Info . get Property ( Geo Service Job . VDC NAME ) ;", "if ( ( name != null ) && ( ! name . is Empty ( ) ) ) {", "vdc Config . set Name ( name ) ; }", "String description = vdc Info . get Property ( Geo Service Job . VDC DESCRIPTION ) ;", "if ( ( description != null ) && ( ! description . is Empty ( ) ) ) {", "vdc Config . set Description ( description ) ; }", "String end Pnt = vdc Info . get Property ( Geo Service Job . VDC API ENDPOINT ) ;", "if ( end Pnt != null ) {", "vdc Config . set Api Endpoint ( end Pnt ) ; }", "vdc Config . set Geo Command Endpoint ( vdc Info . get Property ( Geo Service Job . VDC GEOCOMMAND ENDPOINT ) ) ;", "vdc Config . set Geo Data Endpoint ( vdc Info . get Property ( Geo Service Job . VDC GEODATA ENDPOINT ) ) ;", "return vdc Config ; }"]}
{"ids": "2002", "code": ["private double prediction ( Instance inst ) {", "double [ ] normalized Instance = normalized Instance ( inst ) ;", "double normalized Prediction = prediction ( normalized Instance ) ;", "return denormalized Prediction ( normalized Prediction ) ; }"]}
{"ids": "64391", "code": ["protected Object finish ( Map settings ) throws Wizard Exception {", "return provider . finish ( settings ) ; }"]}
{"ids": "2001", "code": ["protected void fire Cluster Change ( long timestamp , String type , String message ) {", "if ( listeners != null && ! listeners . is Empty ( ) ) {", "Cluster Event event = new Cluster Event ( this , timestamp , type , message ) ;", "Vector targets ;", "synchronized ( this ) {", "targets = ( Vector ) listeners . clone ( ) ; }", "Enumeration e = targets . elements ( ) ;", "while ( e . has More Elements ( ) ) {", "Cluster Event Listener l = ( Cluster Event Listener ) e . next Element ( ) ;", "l . change Cluster ( event ) ; } } }"]}
{"ids": "48523", "code": ["public int rgb For ( int pixel ) {", "return surface Type . rgb For ( pixel , color Model ) ; }"]}
{"ids": "36468", "code": ["protected void add Bottom Component ( Component bottom Component ) {", "c . weighty = NUM_ ;", "layout . set Constraints ( bottom Component , c ) ;", "content Panel . add ( bottom Component ) ; }"]}
{"ids": "68192", "code": ["public static File create Temp Dir ( File dir , boolean cleanup ) throws IO Exception {", "if ( ! dir . mkdirs ( ) && ! dir . exists ( ) ) {", "throw new IO Exception ( String . format ( STR_ , dir . to String ( ) ) ) ; }", "if ( cleanup ) {", "add Cleanup Hook ( dir . to Path ( ) ) ; }", "return dir ; }"]}
{"ids": "68624", "code": ["public static String read Cookie Ignore Special Characters ( Http Servlet Request request , String cookie Name ) {", "String cs = request . get Header ( STR_ ) ;", "if ( cs == null ) return null ;", "int start = cs . index Of ( cookie Name ) ;", "if ( start < NUM_ ) return null ;", "cs = cs . substring ( start + NUM_ + cookie Name . length ( ) ) ;", "int end = cs . index Of ( STR_ ) ;", "if ( end > NUM_ ) {", "cs = cs . substring ( NUM_ , end ) ; }", "return cs ; }"]}
{"ids": "50855", "code": ["protected final void merge ( @ Not Null Set < Local Resource Repository > visited , @ Not Null Resource Type type , @ Not Null Set Multimap < String , String > seen Qualifiers , @ Not Null List Multimap < String , Resource Item > result ) {", "if ( visited . contains ( this ) ) {", "return ; }", "visited . add ( this ) ;", "do Merge ( visited , type , seen Qualifiers , result ) ; }"]}
{"ids": "48856", "code": ["private byte [ ] translate Transferable String ( String str , long format ) throws IO Exception {", "Long l Format = Long . value Of ( format ) ;", "String charset = get Best Charset For Text Format ( l Format , null ) ;", "String eoln = ( String ) native EOL Ns . get ( l Format ) ;", "if ( eoln != null ) {", "int length = str . length ( ) ;", "String Buffer buffer = new String Buffer ( length * NUM_ ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "if ( str . starts With ( eoln , i ) ) {", "buffer . append ( eoln ) ;", "i += eoln . length ( ) - NUM_ ;", "continue ; }", "char c = str . char At ( i ) ;", "if ( c == STR_ ) {", "buffer . append ( eoln ) ; }", "else {", "buffer . append ( c ) ; } }", "str = buffer . to String ( ) ; }", "byte [ ] bytes = str . get Bytes ( charset ) ;", "Integer terminators = ( Integer ) native Terminators . get ( l Format ) ;", "if ( terminators != null ) {", "int num Terminators = terminators . int Value ( ) ;", "byte [ ] terminated Bytes = new byte [ bytes . length + num Terminators ] ;", "System . arraycopy ( bytes , NUM_ , terminated Bytes , NUM_ , bytes . length ) ;", "for ( int i = bytes . length ; i < terminated Bytes . length ; i ++ ) {", "terminated Bytes [ i ] = NUM_ ; }", "bytes = terminated Bytes ; }", "return bytes ; }"]}
{"ids": "46626", "code": ["public Position create Position ( int offset ) throws Bad Location Exception {", "while ( queue . poll ( ) != null ) {", "unused Marks ++ ; }", "if ( unused Marks > Math . max ( NUM_ , ( marks . size ( ) / NUM_ ) ) ) {", "remove Unused Marks ( ) ; }", "int g 0 = get Gap Start ( ) ;", "int g 1 = get Gap End ( ) ;", "int index = ( offset < g 0 ) ? offset : offset + ( g 1 - g 0 ) ;", "search . index = index ;", "int sort Index = find Sort Index ( search ) ;", "Mark Data m ;", "Sticky Position position ;", "if ( sort Index < marks . size ( ) && ( m = marks . element At ( sort Index ) ) . index == index && ( position = m . get Position ( ) ) != null ) { }", "else {", "position = new Sticky Position ( ) ;", "m = new Mark Data ( index , position , queue ) ;", "position . set Mark ( m ) ;", "marks . insert Element At ( m , sort Index ) ; }", "return position ; }"]}
{"ids": "63167", "code": ["public static String pad ( String string , int n , String padding , boolean right ) {", "if ( n < NUM_ ) {", "n = NUM_ ; }", "if ( n < string . length ( ) ) {", "return string . substring ( NUM_ , n ) ; }", "else if ( n == string . length ( ) ) {", "return string ; }", "char padding Char ;", "if ( padding == null || padding . length ( ) == NUM_ ) {", "padding Char = STR_ ; }", "else {", "padding Char = padding . char At ( NUM_ ) ; }", "String Builder buff = new String Builder ( n ) ;", "n -= string . length ( ) ;", "if ( right ) {", "buff . append ( string ) ; }", "for ( int i = NUM_ ; i < n ; i ++ ) {", "buff . append ( padding Char ) ; }", "if ( ! right ) {", "buff . append ( string ) ; }", "return buff . to String ( ) ; }"]}
{"ids": "49080", "code": ["private final void reset DTX ( Affine Transform at ) {", "fsref = null ;", "dtx = at ;", "invdtx = null ;", "if ( ! dtx . is Identity ( ) ) {", "try {", "invdtx = dtx . create Inverse ( ) ; }", "catch ( Noninvertible Transform Exception e ) { } }", "if ( gti != null ) {", "gti . strikes Ref = null ; } }"]}
{"ids": "55340", "code": ["public static void add Activity Listener ( Activity Listener listener ) {", "if ( listener != null ) {", "start Tracking ( ) ;", "listeners . add ( listener ) ; } }"]}
{"ids": "32607", "code": ["public void add Muted Username ( final String username , final Date mute Till ) {", "if ( is Username Muted ( username ) ) {", "remove Muted Username ( username ) ; }", "Timestamp mute Till Ts = null ;", "if ( mute Till != null ) {", "mute Till Ts = new Timestamp ( mute Till . get Time ( ) ) ; }", "s logger . fine ( STR_ + username ) ;", "final Connection con = Database . get Connection ( ) ;", "try {", "final Prepared Statement ps = con . prepare Statement ( STR_ ) ;", "ps . set String ( NUM_ , username ) ;", "ps . set Timestamp ( NUM_ , mute Till Ts ) ;", "ps . execute ( ) ;", "ps . close ( ) ;", "con . commit ( ) ; }", "catch ( final SQL Exception sqle ) {", "if ( sqle . get Error Code ( ) == NUM_ ) {", "s logger . info ( STR_ + username + STR_ + sqle . get Message ( ) ) ;", "return ; }", "s logger . log ( Level . SEVERE , STR_ + username , sqle ) ;", "throw new Illegal State Exception ( sqle . get Message ( ) ) ; }", "finally {", "Db Util . close Connection ( con ) ; } }"]}
{"ids": "51061", "code": ["public boolean is Empty ( ) {", "return m Selected Widgets . is Empty ( ) ; }"]}
{"ids": "47303", "code": ["public void close ( ) throws IO Exception {", "if ( ! closed ) {", "try {", "finish ( ) ; }", "finally {", "out . close ( ) ;", "closed = true ; } } }"]}
{"ids": "76362", "code": ["public static void next Bytes ( byte [ ] bytes ) {", "was Accessed = true ;", "for ( int i = NUM_ ; i < bytes . length ; ) for ( int rnd = next Int ( ) , n = Math . min ( bytes . length - i , NUM_ ) ; n -- > NUM_ ; rnd >>= NUM_ ) bytes [ i ++ ] = ( byte ) rnd ; }"]}
{"ids": "7718", "code": ["protected void draw Low Far Out ( double a Radius , Graphics 2 D g 2 , double xx , double m ) {", "double side = a Radius * NUM_ ;", "g 2 . draw ( new Line 2 D . Double ( xx - side , m - side , xx + side , m - side ) ) ;", "g 2 . draw ( new Line 2 D . Double ( xx - side , m - side , xx , m ) ) ;", "g 2 . draw ( new Line 2 D . Double ( xx + side , m - side , xx , m ) ) ; }"]}
{"ids": "9917", "code": ["private Element create End Point ( String name , String attr Binding , String attr Location , String attr Response Location ) throws DOM Exception {", "if ( name == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( attr Binding == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( attr Location == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Element end Pt = doc . create Element ( name ) ;", "end Pt . set Attribute ( SAML Names . BINDING , attr Binding ) ;", "end Pt . set Attribute ( SAML Names . LOCATION , attr Location ) ;", "if ( attr Response Location != null ) {", "end Pt . set Attribute ( SAML Names . RESPLOC , attr Response Location ) ; }", "return end Pt ; }"]}
{"ids": "3183", "code": ["void put File ( String relative Path , Codebase codebase ) {", "try {", "File dest = new File ( root Directory . get Absolute Path ( ) , relative Path ) ;", "File src = codebase . get File ( relative Path ) ;", "boolean src Exists = filesystem . exists ( src ) ;", "boolean dest Exists = filesystem . exists ( dest ) ;", "boolean src Executable = filesystem . is Executable ( src ) ;", "boolean dest Executable = filesystem . is Executable ( dest ) ;", "if ( ! src Exists && ! dest Exists ) {", "throw new Moe Problem ( STR_ , relative Path , src , dest ) ; }", "if ( ! src Exists ) {", "util . run Svn Command With Working Directory ( root Directory . get Absolute Path ( ) , STR_ , relative Path ) ;", "return ; }", "try {", "filesystem . make Dirs For File ( dest ) ;", "filesystem . copy File ( src , dest ) ; }", "catch ( IO Exception e ) {", "throw new Moe Problem ( e . get Message ( ) ) ; }", "if ( ! dest Exists ) {", "util . run Svn Command With Working Directory ( root Directory . get Absolute Path ( ) , STR_ , STR_ , relative Path ) ; }", "String mime Type = guess Mime Type ( relative Path ) ;", "if ( mime Type != null ) {", "try {", "util . run Svn Command With Working Directory ( root Directory . get Absolute Path ( ) , STR_ , STR_ , mime Type , relative Path ) ; }", "catch ( Command Runner . Command Exception e ) {", "ui . message ( STR_ , relative Path ) ; } }", "if ( dest Executable != src Executable ) {", "if ( src Executable ) {", "util . run Svn Command With Working Directory ( root Directory . get Absolute Path ( ) , STR_ , STR_ , STR_ , relative Path ) ; }", "else {", "util . run Svn Command With Working Directory ( root Directory . get Absolute Path ( ) , STR_ , STR_ , relative Path ) ; } } }", "catch ( Command Runner . Command Exception e ) {", "throw new Moe Problem ( STR_ + e . stderr ) ; } }"]}
{"ids": "23189", "code": ["private byte [ ] convert Bitmap To Bytes ( final Bitmap bitmap ) {", "int size = bitmap . get Row Bytes ( ) * bitmap . get Height ( ) ;", "Byte Array Output Stream out = new Byte Array Output Stream ( size ) ;", "try {", "if ( bitmap . compress ( Bitmap . Compress Format . PNG , NUM_ , out ) ) {", "return out . to Byte Array ( ) ; }", "if ( s Logger . is Activated ( ) ) {", "s Logger . debug ( STR_ ) ; }", "return null ; }", "finally {", "Closeable Utils . try To Close ( out ) ; } }"]}
{"ids": "60446", "code": ["private static void save Template ( File parent Dir , File Template Base template , final String line Separator ) throws IO Exception {", "final File template File = new File ( parent Dir , encode File Name ( template . get Name ( ) , template . get Extension ( ) ) ) ;", "File Output Stream file Output Stream ;", "try {", "file Output Stream = new File Output Stream ( template File ) ; }", "catch ( File Not Found Exception e ) {", "File Util . delete ( template File ) ;", "file Output Stream = new File Output Stream ( template File ) ; }", "Output Stream Writer output Stream Writer = new Output Stream Writer ( file Output Stream , Charset Toolkit . UTF 8 CHARSET ) ;", "String content = template . get Text ( ) ;", "if ( ! line Separator . equals ( STR_ ) ) {", "content = String Util . convert Line Separators ( content , line Separator ) ; }", "output Stream Writer . write ( content ) ;", "output Stream Writer . close ( ) ;", "file Output Stream . close ( ) ; }"]}
{"ids": "39625", "code": ["public void add Composite ( Transform Tree Node node ) {", "parts . add ( node ) ; }"]}
{"ids": "70108", "code": ["protected static void post Process Flood ( I Hex [ ] hex Set , int modifier ) {", "int n ;", "I Hex field ;", "I Terrain Factory f = Terrains . get Terrain Factory ( ) ;", "for ( n = NUM_ ; n < hex Set . length ; n ++ ) {", "field = hex Set [ n ] ;", "int elev = field . get Level ( ) - modifier ;", "if ( ( elev == NUM_ ) && ! ( field . contains Terrain ( Terrains . WATER ) ) && ! ( field . contains Terrain ( Terrains . PAVEMENT ) ) ) {", "field . add Terrain ( f . create Terrain ( Terrains . SWAMP , NUM_ ) ) ; }", "else if ( elev < NUM_ ) {", "if ( elev < - NUM_ ) {", "elev = - NUM_ ; }", "field . remove All Terrains ( ) ;", "field . add Terrain ( f . create Terrain ( Terrains . WATER , - elev ) ) ;", "field . set Level ( modifier ) ; } } }"]}
{"ids": "85057", "code": ["public Module Handle add Module ( String module Name , String session Key ) {", "String sanitized Module Name = generate Unique Name If Null Or Empty ( module Name , STR_ ) ;", "Module Handle module Handle = new Module Handle ( sanitized Module Name , session Key ) ;", "synchronized ( private Instance Lock ) {", "modules . add ( module Handle ) ; }", "set Terminated ( false ) ;", "return module Handle ; }"]}
{"ids": "13177", "code": ["protected int index Of ( String buffer , int start , int end , char ch ) {", "for ( int i = start ; i < end ; i ++ ) {", "if ( buffer . char At ( i ) == ch ) {", "return i ; } }", "return - NUM_ ; }"]}
{"ids": "84600", "code": ["public static double variance ( double [ ] x , double mean ) {", "double var = NUM_ ;", "int count = x . length ;", "for ( double a X : x ) {", "if ( Double . is Na N ( a X ) ) {", "count -- ; }", "else {", "double diff = a X - mean ;", "var += diff * diff ; } }", "if ( count < NUM_ ) {", "count = NUM_ ; }", "else {", "count = count - NUM_ ; }", "return var / ( double ) count ; }"]}
{"ids": "2972", "code": ["private void stash Request User ( Request And Response request And Response ) {", "if ( request And Response . was User Already Stashed ) {", "return ; }", "request And Response . was User Already Stashed = true ;", "final User user = db Logic . get User By Id ( get Effective User Id ( request And Response ) ) ;", "if ( user != null ) {", "request And Response . user Is Admin = user . get Is Admin ( ) ;", "request And Response . user Is Account Closed = user . get Is Account Closed ( ) ;", "request And Response . user Options = user . get Options ( ) ; }", "else {", "request And Response . user Options = STR_ ; } }"]}
{"ids": "74022", "code": ["@ Override public void send Location List ( ) {", "List < Location > location List = lm . get Locations By Name List ( ) ;", "Array List < Attribute > location ;", "for ( Location loc : location List ) {", "location = new Array List < Attribute > ( NUM_ ) ;", "location . add ( new Attribute ( LOCATIONS , loc ) ) ;", "try {", "send Message ( location ) ; }", "catch ( IO Exception ioe ) {", "log . debug ( STR_ + loc . get Name ( ) ) ; } } }"]}
{"ids": "60476", "code": ["@ Override public boolean is Inside Soft Wrap ( @ Not Null Visual Position visual ) {", "return is Inside Soft Wrap ( visual , false ) ; }"]}
{"ids": "30509", "code": ["static public Input Stream find Cluster XML ( String cluster XML ) {", "String schema Name To Be Used = cluster XML ;", "Input Stream schema Input Stream ;", "String schema File Path = Constants . Container . CONTAINER CONFIG DIRECTORY + STR_ + schema Name To Be Used + Cluster XML . CLUSTER XML FILE SUFFIX ;", "schema Input Stream = get Resource Stream ( schema File Path ) ;", "if ( schema Input Stream != null ) {", "if ( logger . is Loggable ( Level . INFO ) ) {", "logger . info ( STR_ + get Resource URL ( schema Name To Be Used ) + STR_ ) ; }", "return schema Input Stream ; }", "else {", "String default Schema File Name = Constants . Container . CONTAINER CONFIG DIRECTORY + STR_ + Constants . Schemas . DEFAULT SCHEMA + Cluster XML . CLUSTER XML FILE SUFFIX ;", "schema Input Stream = get Resource Stream ( default Schema File Name ) ;", "if ( schema Input Stream != null ) {", "if ( logger . is Loggable ( Level . WARNING ) ) {", "logger . warning ( STR_ + schema File Path + STR_ + get Resource URL ( default Schema File Name ) + STR_ ) ; }", "return schema Input Stream ; }", "else {", "if ( logger . is Loggable ( Level . WARNING ) ) {", "logger . warning ( STR_ + default Schema File Name ) ; } } }", "return schema Input Stream ; }"]}
{"ids": "44068", "code": ["public boolean is Valid ( World world ) {", "return true ; }"]}
{"ids": "84502", "code": ["private Parse Position next ( final Parse Position pos ) {", "pos . set Index ( pos . get Index ( ) + NUM_ ) ;", "return pos ; }"]}
{"ids": "3380", "code": ["private int flush ( int offset ) {", "try {", "os . write ( buffer , NUM_ , offset ) ;", "offset = NUM_ ;", "return NUM_ ; }", "catch ( IO Exception e ) {", "throw new H 3 Exception Out ( e ) ; } }"]}
{"ids": "7573", "code": ["protected String generate Section Label ( Pie Dataset dataset , Comparable key ) {", "String result = null ;", "if ( dataset != null ) {", "Object [ ] items = create Item Array ( dataset , key ) ;", "result = Message Format . format ( this . label Format , items ) ; }", "return result ; }"]}
{"ids": "19729", "code": ["public void exec ( String description , String [ ] base Command ) throws Backup Exception {", "exec ( description , base Command , null , null , null , false , false ) ; }"]}
{"ids": "1868", "code": ["public static Service Configuration create ( Input Stream in Stream ) throws IO Exception , Illegal Argument Exception {", "try {", "check Not Null ( in Stream ) ;", "Properties properties = new Properties ( ) ;", "properties . load ( in Stream ) ;", "return ( create ( properties ) ) ; }", "finally {", "if ( in Stream != null ) {", "in Stream . close ( ) ; } } }"]}
{"ids": "16656", "code": ["protected int [ ] split Sentence ( String sentence ) {", "String [ ] w = sentence . split ( STR_ ) ;", "int [ ] words = new int [ w . length ] ;", "for ( int i = NUM_ ; i < w . length ; i ++ ) words [ i ] = Vocabulary . id ( w [ i ] ) ;", "return words ; }"]}
{"ids": "53586", "code": ["public static boolean is Failure ( List < Action > actions ) {", "return actions . is Empty ( ) ; }"]}
{"ids": "6498", "code": ["public void add To Dictionary ( String s ) {", "if ( ! get Auto Complete ( ) ) return ;", "if ( dict == null ) {", "set Up ( ) ;", "this . dict = create Default Dictionary ( ) ; }", "dict . add Entry ( s . trim ( ) ) ; }"]}
{"ids": "75809", "code": ["public static int [ ] [ ] deep copy ( int M [ ] [ ] ) {", "int [ ] [ ] C = new int [ M . length ] [ ] ;", "for ( int i = NUM_ ; i < C . length ; i ++ ) {", "C [ i ] = Arrays . copy Of ( M [ i ] , M [ i ] . length ) ; }", "return C ; }"]}
{"ids": "1778", "code": ["public void wait For Message To Arrive ( ) {", "LOG . info ( STR_ ) ;", "long start = System . current Time Millis ( ) ;", "synchronized ( messages ) {", "try {", "while ( has Received Message ( ) ) {", "messages . wait ( NUM_ ) ; } }", "catch ( Interrupted Exception e ) {", "LOG . info ( STR_ + e ) ; } }", "long end = System . current Time Millis ( ) - start ;", "LOG . info ( STR_ + end + STR_ ) ; }"]}
{"ids": "32838", "code": ["public Date ( String date ) {", "String [ ] fields = date . split ( STR_ ) ;", "if ( fields . length != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "month = Integer . parse Int ( fields [ NUM_ ] ) ;", "day = Integer . parse Int ( fields [ NUM_ ] ) ;", "year = Integer . parse Int ( fields [ NUM_ ] ) ;", "if ( ! is Valid ( month , day , year ) ) throw new Illegal Argument Exception ( STR_ ) ; }"]}
{"ids": "9322", "code": ["public static void copy ( File src , File dst ) throws IO Exception {", "if ( src . is Directory ( ) ) {", "ensure Directory Exists ( dst ) ;", "String [ ] files List = src . list ( ) ;", "for ( String file : files List ) {", "File src File = new File ( src , file ) ;", "File dest File = new File ( dst , file ) ;", "copy ( src File , dest File ) ; } }", "else {", "copy File ( src , dst ) ; } }"]}
{"ids": "6723", "code": ["public Map Objects ( Pokemon Go api ) {", "this . api = api ; }"]}
{"ids": "49011", "code": ["static void increment Keep Alive Count ( ) {", "synchronized ( keep Alive Lock ) {", "keep Alive Count ++ ;", "if ( reaper == null ) {", "reaper = Access Controller . do Privileged ( new New Thread Action ( new Reaper ( ) , STR_ , false ) ) ;", "reaper . start ( ) ; }", "if ( gc Latency Request == null ) {", "gc Latency Request = GC . request Latency ( gc Interval ) ; } } }"]}
{"ids": "47893", "code": ["static Method Handle make Collect Arguments ( Method Handle target , Method Handle collector , int collect Arg Pos , boolean retain Original Args ) {", "Method Type target Type = target . type ( ) ;", "Method Type collector Type = collector . type ( ) ;", "int collect Arg Count = collector Type . parameter Count ( ) ;", "Class < ? > collect Val Type = collector Type . return Type ( ) ;", "int collect Val Count = ( collect Val Type == void . class ? NUM_ : NUM_ ) ;", "Method Type src Type = target Type . drop Parameter Types ( collect Arg Pos , collect Arg Pos + collect Val Count ) ;", "if ( ! retain Original Args ) {", "src Type = src Type . insert Parameter Types ( collect Arg Pos , collector Type . parameter List ( ) ) ; }", "Method Type lambda Type = src Type . invoker Type ( ) ;", "Name [ ] names = arguments ( NUM_ , lambda Type ) ;", "final int collect Name Pos = names . length - NUM_ ;", "final int target Name Pos = names . length - NUM_ ;", "Name [ ] collector Args = Arrays . copy Of Range ( names , NUM_ + collect Arg Pos , NUM_ + collect Arg Pos + collect Arg Count ) ;", "names [ collect Name Pos ] = new Name ( collector , ( Object [ ] ) collector Args ) ;", "Name [ ] target Args = new Name [ target Type . parameter Count ( ) ] ;", "int input Arg Pos = NUM_ ;", "int target Arg Pos = NUM_ ;", "int chunk = collect Arg Pos ;", "System . arraycopy ( names , input Arg Pos , target Args , target Arg Pos , chunk ) ;", "input Arg Pos += chunk ;", "target Arg Pos += chunk ;", "if ( collect Val Type != void . class ) {", "target Args [ target Arg Pos ++ ] = names [ collect Name Pos ] ; }", "chunk = collect Arg Count ;", "if ( retain Original Args ) {", "System . arraycopy ( names , input Arg Pos , target Args , target Arg Pos , chunk ) ;", "target Arg Pos += chunk ; }", "input Arg Pos += chunk ;", "chunk = target Args . length - target Arg Pos ;", "System . arraycopy ( names , input Arg Pos , target Args , target Arg Pos , chunk ) ;", "assert ( input Arg Pos + chunk == collect Name Pos ) ;", "names [ target Name Pos ] = new Name ( target , ( Object [ ] ) target Args ) ;", "Lambda Form form = new Lambda Form ( STR_ , lambda Type . parameter Count ( ) , names ) ;", "return Simple Method Handle . make ( src Type , form ) ; }"]}
{"ids": "30714", "code": ["public In Space Predicate ( Object ... values ) {", "in Values = new Hash Set < Object > ( ) ;", "for ( Object value : values ) {", "in Values . add ( value ) ; } }"]}
{"ids": "76429", "code": ["protected List < String > prepare Sort Key Statements ( List < Sort Key > sort Keys ) {", "List < String > keys = new Array List < String > ( ) ;", "for ( int i = NUM_ ; i < sort Keys . size ( ) ; i ++ ) {", "Sort Key sort Key = sort Keys . get ( i ) ;", "keys . add ( explicit Mapping . get Db Column Name ( sort Key . get Field ( ) ) + ( sort Key . is Ascending Order ( ) ? STR_ : STR_ ) ) ; }", "return keys ; }"]}
{"ids": "68198", "code": ["private Optional < Curator Framework > create Client ( String zookeeper Url ) {", "if ( String Utils . is Not Blank ( zookeeper Url ) ) {", "Curator Framework client = Configurations Utils . get Client ( zookeeper Url ) ;", "client . start ( ) ;", "return Optional . of ( client ) ; }", "else {", "return Optional . empty ( ) ; } }"]}
{"ids": "74088", "code": ["public static String add Cv Description ( String tool Tip , String cv Description , String mask ) {", "String desc String = cv Description ;", "String temp = get Mask Description ( mask ) ;", "if ( temp . length ( ) > NUM_ ) {", "desc String = desc String + STR_ + temp ; }", "if ( Pane Prog Frame . get Show Cv Numbers ( ) && ( desc String != null ) ) {", "if ( tool Tip == null ) {", "tool Tip = desc String ; }", "else {", "tool Tip = add Text HTM Laware ( tool Tip , STR_ + desc String + STR_ ) ; } }", "else if ( tool Tip == null ) {", "tool Tip = STR_ ; }", "return tool Tip ; }"]}
{"ids": "46581", "code": ["private static void convert To HTML 40 ( Attribute Set from , Mutable Attribute Set to ) {", "Enumeration keys = from . get Attribute Names ( ) ;", "String value = STR_ ;", "while ( keys . has More Elements ( ) ) {", "Object key = keys . next Element ( ) ;", "if ( key instanceof CSS . Attribute ) {", "value = value + STR_ + key + STR_ + from . get Attribute ( key ) + STR_ ; }", "else {", "to . add Attribute ( key , from . get Attribute ( key ) ) ; } }", "if ( value . length ( ) > NUM_ ) {", "to . add Attribute ( HTML . Attribute . STYLE , value ) ; } }"]}
{"ids": "66016", "code": ["public void update Amount ( ) {", "set Amt ( get Total Amount ( ) ) ; }"]}
{"ids": "38436", "code": ["private void update Legends ( ) {", "if ( m span == null ) {", "m span = new J Panel ( ) ; }", "J Panel padder = new J Panel ( ) ;", "J Panel padd 2 = new J Panel ( ) ;", "m span . set Preferred Size ( new Dimension ( m span . get Preferred Size ( ) . width , ( m plots . size ( ) + NUM_ ) * NUM_ ) ) ;", "m span . set Maximum Size ( new Dimension ( m span . get Preferred Size ( ) . width , ( m plots . size ( ) + NUM_ ) * NUM_ ) ) ;", "Legend Entry tmp ;", "Grid Bag Layout gb = new Grid Bag Layout ( ) ;", "Grid Bag Layout gb 2 = new Grid Bag Layout ( ) ;", "Grid Bag Constraints constraints = new Grid Bag Constraints ( ) ;", "m span . remove All ( ) ;", "padder . set Layout ( gb ) ;", "m span . set Layout ( gb 2 ) ;", "constraints . anchor = Grid Bag Constraints . CENTER ;", "constraints . gridx = NUM_ ;", "constraints . gridy = NUM_ ;", "constraints . weightx = NUM_ ;", "constraints . fill = Grid Bag Constraints . HORIZONTAL ;", "constraints . gridwidth = NUM_ ;", "constraints . gridheight = NUM_ ;", "constraints . insets = new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "padder . add ( m span , constraints ) ;", "constraints . gridx = NUM_ ;", "constraints . gridy = NUM_ ;", "constraints . weightx = NUM_ ;", "constraints . fill = Grid Bag Constraints . BOTH ;", "constraints . gridwidth = NUM_ ;", "constraints . gridheight = NUM_ ;", "constraints . weighty = NUM_ ;", "constraints . insets = new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "padder . add ( padd 2 , constraints ) ;", "constraints . weighty = NUM_ ;", "set Viewport View ( padder ) ;", "constraints . anchor = Grid Bag Constraints . CENTER ;", "constraints . gridx = NUM_ ;", "constraints . gridy = NUM_ ;", "constraints . weightx = NUM_ ;", "constraints . fill = Grid Bag Constraints . HORIZONTAL ;", "constraints . gridwidth = NUM_ ;", "constraints . gridheight = NUM_ ;", "constraints . weighty = NUM_ ;", "constraints . insets = new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "for ( int i = NUM_ ; i < m plots . size ( ) ; i ++ ) {", "tmp = new Legend Entry ( m plots . get ( i ) , i ) ;", "constraints . gridy = i ;", "m span . add ( tmp , constraints ) ; } }"]}
{"ids": "4560", "code": ["public static byte [ ] read Dex ( File file ) throws IO Exception {", "return read Dex ( file . to Path ( ) ) ; }"]}
{"ids": "55364", "code": ["public void run Commercial ( String stream , int length ) {", "if ( stream == null || stream . is Empty ( ) ) {", "commercial Result ( stream , STR_ , Twitch Api . Request Result . FAILED ) ; }", "else {", "String channel = STR_ + stream ;", "if ( is Channel Open ( channel ) ) {", "g . print Line ( channel , STR_ + length + STR_ ) ; }", "else {", "g . print Line ( STR_ + length + STR_ + stream + STR_ ) ; }", "api . run Commercial ( stream , settings . get String ( STR_ ) , length ) ; } }"]}
{"ids": "85415", "code": ["void generate While ( Tree . While Statement that ) {", "Tree . While Clause while Clause = that . get While Clause ( ) ;", "List < Var Holder > vars = special Conditions And Block ( while Clause . get Condition List ( ) , while Clause . get Block ( ) , STR_ , false ) ;", "for ( Var Holder v : vars ) {", "v . forget ( ) ; } }"]}
{"ids": "52063", "code": ["public static double igamma ( double a , double x ) {", "double coef = ( Math . exp ( - x ) * Math . pow ( x , a ) ) / gamma ( a ) ;", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "sum += ( gamma ( a ) / gamma ( a + NUM_ + ( double ) i ) ) * Math . pow ( x , ( double ) i ) ; }", "return ( coef * sum ) ; }"]}
{"ids": "80654", "code": ["public void initialize Active Slots List ( String slots ) {", "if ( active Slots List == null ) {", "active Slots List = new Array List < String > ( ) ; }", "for ( String s : slots . split ( STR_ ) ) {", "active Slots List . add ( s ) ; } }"]}
{"ids": "1606", "code": ["private static String convert Action Type To Intent ( Raml Action Type action Type , boolean is Target Collection ) {", "switch ( action Type ) {", "case DELETE :", "return STR_ ;", "case GET :", "return STR_ ;", "case POST :", "if ( is Target Collection ) {", "return STR_ ; }", "case PUT :", "return STR_ ;", "case PATCH :", "return STR_ ;", "default :", "return STR_ ; } }"]}
{"ids": "72185", "code": ["public static String hide ( final String key ) {", "return is Hidden ( key ) ? key : HIDDEN PREFIX . concat ( key ) ; }"]}
{"ids": "33485", "code": ["private synchronized I Mqtt Token remove Mqtt Token ( Bundle data ) {", "String activity Token = data . get String ( Mqtt Service Constants . CALLBACK ACTIVITY TOKEN ) ;", "if ( activity Token != null ) {", "int token Number = Integer . parse Int ( activity Token ) ;", "I Mqtt Token token = token Map . get ( token Number ) ;", "token Map . delete ( token Number ) ;", "return token ; }", "return null ; }"]}
{"ids": "56416", "code": ["public static boolean is Explicit All Type ( String [ ] types ) {", "return types != null && types . length == NUM_ && ALL . equals ( types [ NUM_ ] ) ; }"]}
{"ids": "57797", "code": ["private String read Until ( char [ ] delimiter , boolean return Text ) throws IO Exception , Xml Pull Parser Exception {", "int start = position ;", "String Builder result = null ;", "if ( return Text && text != null ) {", "result = new String Builder ( ) ;", "result . append ( text ) ; }", "search : while ( true ) {", "if ( position + delimiter . length > limit ) {", "if ( start < position && return Text ) {", "if ( result == null ) {", "result = new String Builder ( ) ; }", "result . append ( buffer , start , position - start ) ; }", "if ( ! fill Buffer ( delimiter . length ) ) {", "check Relaxed ( UNEXPECTED EOF ) ;", "type = COMMENT ;", "return null ; }", "start = position ; }", "for ( int i = NUM_ ; i < delimiter . length ; i ++ ) {", "if ( buffer [ position + i ] != delimiter [ i ] ) {", "position ++ ;", "continue search ; } }", "break ; }", "int end = position ;", "position += delimiter . length ;", "if ( ! return Text ) {", "return null ; }", "else if ( result == null ) {", "return string Pool . get ( buffer , start , end - start ) ; }", "else {", "result . append ( buffer , start , end - start ) ;", "return result . to String ( ) ; } }"]}
{"ids": "52886", "code": ["public boolean is Leaf ( ) {", "return children == null || children . is Empty ( ) ; }"]}
{"ids": "36414", "code": ["public static void draw Shadow ( final Rectangle 2 D rect , final Graphics 2 D g 2 ) {", "Graphics 2 D g 2 S = ( Graphics 2 D ) g 2 . create ( ) ;", "Rectangle 2 D shadow = new Rectangle 2 D . Double ( rect . get X ( ) + NUM_ , rect . get Y ( ) + Process Drawer . HEADER HEIGHT + NUM_ , rect . get Width ( ) , rect . get Height ( ) - Process Drawer . HEADER HEIGHT ) ;", "General Path bottom = new General Path ( ) ;", "bottom . move To ( shadow . get X ( ) , rect . get Max Y ( ) ) ;", "bottom . line To ( rect . get Max X ( ) , rect . get Max Y ( ) ) ;", "bottom . line To ( shadow . get Max X ( ) , shadow . get Max Y ( ) ) ;", "bottom . line To ( shadow . get Min X ( ) , shadow . get Max Y ( ) ) ;", "bottom . close Path ( ) ;", "g 2 S . set Paint ( new Gradient Paint ( ( float ) rect . get X ( ) , ( float ) rect . get Max Y ( ) , Color . gray , ( float ) rect . get X ( ) , ( float ) shadow . get Max Y ( ) , TRANSPARENT GRAY ) ) ;", "g 2 S . fill ( bottom ) ;", "General Path right = new General Path ( ) ;", "right . move To ( rect . get Max X ( ) , shadow . get Min Y ( ) ) ;", "right . line To ( shadow . get Max X ( ) , shadow . get Min Y ( ) ) ;", "right . line To ( shadow . get Max X ( ) , shadow . get Max Y ( ) ) ;", "right . line To ( rect . get Max X ( ) , rect . get Max Y ( ) ) ;", "right . close Path ( ) ;", "g 2 S . set Paint ( new Gradient Paint ( ( float ) rect . get Max X ( ) , ( float ) shadow . get Y ( ) , Color . gray , ( float ) shadow . get Max X ( ) , ( float ) shadow . get Y ( ) , TRANSPARENT GRAY ) ) ;", "g 2 S . fill ( right ) ;", "g 2 S . dispose ( ) ; }"]}
{"ids": "23956", "code": ["public static void interrupt ( final Thread thread ) {", "if ( thread != null ) {", "thread . interrupt ( ) ; } }"]}
{"ids": "82127", "code": ["public static Container east ( Component east ) {", "return Container . enclose In ( new Border Layout ( ) , east , Border Layout . EAST ) ; }"]}
{"ids": "38608", "code": ["public void load Layout ( File o File , boolean new Tab ) {", "load Layout ( o File , new Tab , false ) ; }"]}
{"ids": "45399", "code": ["public void track ( File file , Object marker , File Delete Strategy delete Strategy ) {", "if ( file == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "add Tracker ( file . get Path ( ) , marker , delete Strategy ) ; }"]}
{"ids": "33418", "code": ["public boolean has Parameter ( String name ) {", "return parameters . has Parameter ( name ) ; }"]}
{"ids": "3124", "code": ["public static boolean is SQL 99 Non Reserved Keyword ( String identifier ) {", "if ( identifier == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "return Arrays . binary Search ( SQL 99 NON RESERVED , identifier . to Upper Case ( ) ) >= NUM_ ; }"]}
{"ids": "27522", "code": ["@ Override public long handle Commit ( final long commit Time ) {", "if ( error != null ) throw new Index Inconsistent Error ( error ) ;", "final I Root Block View view = journal . get Root Block View ( ) ;", "final Byte Buffer rbv = view . as Read Only Buffer ( ) ;", "final Byte Buffer bb = Byte Buffer . allocate ( rbv . capacity ( ) ) ;", "for ( int i = NUM_ ; i < rbv . capacity ( ) ; i ++ ) {", "bb . put ( rbv . get ( ) ) ; }", "bb . flip ( ) ;", "return journal . write ( bb ) ; }"]}
{"ids": "22186", "code": ["public boolean is Append Task Name ( ) {", "return append Task Name ; }"]}
{"ids": "62088", "code": ["private static boolean is Start Element ( String line ) {", "int first = line . last Index Of ( STR_ ) ;", "int last = line . last Index Of ( STR_ ) ;", "if ( last < first ) {", "return true ; }", "else {", "int first End = line . last Index Of ( STR_ ) ;", "int last End = line . last Index Of ( STR_ ) ;", "if ( ( first End != first ) && ( ( last End + NUM_ ) != last ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "4115", "code": ["long read Long ( ) throws IO Exception {", "return ( ( ( long ) is . read ( ) << NUM_ ) | ( ( long ) is . read ( ) << NUM_ ) | ( ( long ) is . read ( ) << NUM_ ) | ( ( long ) is . read ( ) << NUM_ ) | ( ( long ) is . read ( ) << NUM_ ) | ( ( long ) is . read ( ) << NUM_ ) | ( ( long ) is . read ( ) << NUM_ ) | ( ( long ) is . read ( ) ) ) ; }"]}
{"ids": "39134", "code": ["@ Override public Instance remove ( int index ) {", "return m Instances . remove ( index ) ; }"]}
{"ids": "54476", "code": ["protected static String extract Access Key ( String s 3 uri ) {", "return s 3 uri . substring ( s 3 uri . index Of ( STR_ ) + NUM_ , s 3 uri . index Of ( STR_ , s 3 uri . index Of ( STR_ ) + NUM_ ) ) ; }"]}
{"ids": "63230", "code": ["public static void copy Except ( Object src , Object dst , int old Size , int remove Index ) {", "if ( remove Index > NUM_ && old Size > NUM_ ) {", "System . arraycopy ( src , NUM_ , dst , NUM_ , remove Index ) ; }", "if ( remove Index < old Size ) {", "System . arraycopy ( src , remove Index + NUM_ , dst , remove Index , old Size - remove Index - NUM_ ) ; } }"]}
{"ids": "14964", "code": ["public Site Monitor ( String [ ] url List ) {", "site Url List = url List ; }"]}
{"ids": "69891", "code": ["public Optional < Blaze Vertex > vertex ( final String vertex Id ) {", "try ( final Closeable Iterator < Vertex > it = vertices ( vertex Id ) ) {", "final Optional < Blaze Vertex > v = it . has Next ( ) ? Optional . of ( ( Blaze Vertex ) it . next ( ) ) : Optional . empty ( ) ;", "if ( it . has Next ( ) ) {", "throw new Illegal State Exception ( STR_ + vertex Id ) ; }", "return v ; } }"]}
{"ids": "81118", "code": ["private void start ( Http Servlet Request request , Http Servlet Response response ) throws IO Exception {", "String label = request . get Parameter ( STR_ ) ;", "String detail = request . get Parameter ( STR_ ) ;", "Mon Key key = get Mon Key ( label , detail , DEFAULT UNITS ) ;", "start Mon ( key ) ;", "Print Writer out = response . get Writer ( ) ;", "out . println ( OK + STR_ + label ) ; }"]}
{"ids": "84814", "code": ["public double norm ( ) {", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < components . length ; i ++ ) sum += components [ i ] * components [ i ] ;", "return Math . sqrt ( sum ) ; }"]}
{"ids": "75778", "code": ["public static double P Harmonic ( int Y [ ] [ ] , int Ypred [ ] [ ] ) {", "int all Missings = NUM_ ;", "int N = Y . length ;", "double loss = NUM_ ;", "for ( int i = NUM_ ; i < N ; i ++ ) {", "if ( all Missing ( Y [ i ] ) ) {", "all Missings ++ ;", "continue ; }", "double cur Loss = P Harmonic ( Y [ i ] , Ypred [ i ] ) ;", "if ( Double . is Na N ( cur Loss ) ) {", "all Missings ++ ;", "continue ; }", "loss += cur Loss ; }", "return loss / ( double ) ( N - all Missings ) ; }"]}
{"ids": "48410", "code": ["public void write Entry ( C Cache Output Stream cos ) throws IO Exception {", "cos . write 16 ( ad Type ) ;", "cos . write 32 ( ad Data . length ) ;", "cos . write ( ad Data , NUM_ , ad Data . length ) ; }"]}
{"ids": "12861", "code": ["public static String read Label File ( String entry Separator , boolean ensure Initial Boundary , String trfname ) throws IO Exception {", "Buffered Reader lab = new Buffered Reader ( new File Reader ( trfname ) ) ;", "try {", "Xwaves Labelfile Reader xlds = new Xwaves Labelfile Reader ( trfname ) ;", "String result = String Utils . join ( entry Separator , xlds . get Label Symbols ( ) ) ;", "if ( ensure Initial Boundary && result . char At ( NUM_ ) != STR_ ) {", "result = STR_ + entry Separator + result ; }", "return result ; }", "finally {", "lab . close ( ) ; } }"]}
{"ids": "16114", "code": ["Converter Set add ( Converter converter , Converter [ ] removed ) {", "Converter [ ] converters = i Converters ;", "int length = converters . length ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "Converter existing = converters [ i ] ;", "if ( converter . equals ( existing ) ) {", "if ( removed != null ) {", "removed [ NUM_ ] = null ; }", "return this ; }", "if ( converter . get Supported Type ( ) == existing . get Supported Type ( ) ) {", "Converter [ ] copy = new Converter [ length ] ;", "for ( int j = NUM_ ; j < length ; j ++ ) {", "if ( j != i ) {", "copy [ j ] = converters [ j ] ; }", "else {", "copy [ j ] = converter ; } }", "if ( removed != null ) {", "removed [ NUM_ ] = existing ; }", "return new Converter Set ( copy ) ; } }", "Converter [ ] copy = new Converter [ length + NUM_ ] ;", "System . arraycopy ( converters , NUM_ , copy , NUM_ , length ) ;", "copy [ length ] = converter ;", "if ( removed != null ) {", "removed [ NUM_ ] = null ; }", "return new Converter Set ( copy ) ; }"]}
{"ids": "81495", "code": ["private void parse ( ) throws SAX Exception {", "X Stream xstream = ( X Stream ) properties . get ( CONFIGURED XSTREAM PROPERTY ) ;", "if ( xstream == null ) {", "xstream = new X Stream ( ) ; }", "final List < ? > source = ( List < ? > ) properties . get ( SOURCE OBJECT LIST PROPERTY ) ;", "if ( source == null || source . is Empty ( ) ) {", "throw new SAX Exception ( STR_ + SOURCE OBJECT LIST PROPERTY + STR_ ) ; }", "try {", "start Document ( true ) ;", "for ( final Object name : source ) {", "xstream . marshal ( name , this ) ; }", "end Document ( true ) ; }", "catch ( final Stream Exception e ) {", "if ( e . get Cause ( ) instanceof SAX Exception ) {", "throw ( SAX Exception ) e . get Cause ( ) ; }", "else {", "throw new SAX Exception ( e ) ; } } }"]}
{"ids": "44429", "code": ["private Sorted Map < Message Uid , Maildir Message Name > truncate Map ( Map < Message Uid , Maildir Message Name > map , Message Uid from , Message Uid to ) {", "Tree Map < Message Uid , Maildir Message Name > sorted Map ;", "if ( map instanceof Tree Map < ? , ? > ) sorted Map = ( Tree Map < Message Uid , Maildir Message Name > ) map ;", "else sorted Map = new Tree Map < Message Uid , Maildir Message Name > ( map ) ;", "if ( to != null ) return sorted Map . sub Map ( from , to . next ( ) ) ;", "return sorted Map . tail Map ( from ) ; }"]}
{"ids": "23182", "code": ["private static boolean compare Param ( String jdiff Param , Type reflection Param Type ) {", "if ( jdiff Param == null ) {", "return false ; }", "String reflection Param = type To String ( reflection Param Type ) ;", "if ( jdiff Param . equals ( reflection Param ) ) {", "return true ; }", "int jdiff Param End Offset = jdiff Param . index Of ( STR_ ) ;", "int reflection Param End Offset = reflection Param . index Of ( STR_ ) ;", "if ( jdiff Param End Offset != - NUM_ && reflection Param End Offset != - NUM_ ) {", "jdiff Param = jdiff Param . substring ( NUM_ , jdiff Param End Offset ) ;", "reflection Param = reflection Param . substring ( NUM_ , reflection Param End Offset ) ;", "return jdiff Param . equals ( reflection Param ) ; }", "return false ; }"]}
{"ids": "65120", "code": ["public void mouse Wheel Moved ( Mouse Wheel Event e ) {", "boolean accepted = check Modifiers ( e ) ;", "if ( accepted == true ) {", "Visualization Viewer < ? , ? > vv = ( Visualization Viewer < ? , ? > ) e . get Source ( ) ;", "Point 2 D mouse = e . get Point ( ) ;", "Point 2 D center = vv . get Center ( ) ;", "int amount = e . get Wheel Rotation ( ) ;", "if ( zoom At Mouse ) {", "if ( amount > NUM_ ) {", "scaler . scale ( vv , in , mouse ) ; }", "else if ( amount < NUM_ ) {", "scaler . scale ( vv , out , mouse ) ; } }", "else {", "if ( amount > NUM_ ) {", "scaler . scale ( vv , in , center ) ; }", "else if ( amount < NUM_ ) {", "scaler . scale ( vv , out , center ) ; } }", "e . consume ( ) ;", "vv . repaint ( ) ; } }"]}
{"ids": "77629", "code": ["private void handle Start Element ( XML Stream Reader parser , Set < Node > children Found , Handler handler , Map < String , Object > values , Stack < Set < String > > stack , boolean record Started ) throws IO Exception , XML Stream Exception {", "Node n = get Matching Node ( parser , child Nodes ) ;", "Map < String , Object > decends = new Hash Map < > ( ) ;", "if ( n != null ) {", "children Found . add ( n ) ;", "n . parse ( parser , handler , values , stack , record Started ) ;", "return ; }", "Node dn = this ;", "do {", "if ( dn . wild Card Nodes != null ) {", "n = get Matching Node ( parser , dn . wild Card Nodes ) ;", "if ( n != null ) {", "children Found . add ( n ) ;", "n . parse ( parser , handler , values , stack , record Started ) ;", "break ; }", "for ( Node nn : dn . wild Card Nodes ) decends . put ( nn . name , nn ) ; }", "dn = dn . wild Ancestor ; }", "while ( dn != null ) ;", "if ( n == null ) {", "int count = NUM_ ;", "while ( count != NUM_ ) {", "int token = parser . next ( ) ;", "if ( token == START ELEMENT ) {", "Node nn = ( Node ) decends . get ( parser . get Local Name ( ) ) ;", "if ( nn != null ) {", "children Found . add ( nn ) ;", "nn . parse ( parser , handler , values , stack , record Started ) ; }", "else count ++ ; }", "else if ( token == END ELEMENT ) count -- ; } } }"]}
{"ids": "85351", "code": ["public boolean equivalent ( IMF Marker Type other ) {", "if ( other == null ) {", "return false ; }", "boolean result = true ;", "result &= offset . equals ( other . get Offset ( ) ) ;", "result &= label . equivalent ( other . get Label ( ) ) ;", "return result ; }"]}
{"ids": "52024", "code": ["public static Discretization discretize ( double [ ] data , double [ ] cutoffs , String variable Name , List < String > categories ) {", "if ( cutoffs == null ) {", "throw new Null Pointer Exception ( ) ; }", "for ( int i = NUM_ ; i < cutoffs . length - NUM_ ; i ++ ) {", "if ( ! ( cutoffs [ i ] <= cutoffs [ i + NUM_ ] ) ) {", "throw new Null Pointer Exception ( STR_ ) ; } }", "if ( variable Name == null ) {", "throw new Null Pointer Exception ( ) ; }", "int num Categories = cutoffs . length + NUM_ ;", "if ( categories != null && categories . size ( ) != num Categories ) {", "throw new Illegal Argument Exception ( STR_ + STR_ + STR_ ) ; }", "Discrete Variable variable ;", "if ( categories == null ) {", "variable = new Discrete Variable ( variable Name , num Categories ) ; }", "else {", "variable = new Discrete Variable ( variable Name , categories ) ; }", "int [ ] discrete Data = new int [ data . length ] ;", "loop : for ( int i = NUM_ ; i < data . length ; i ++ ) {", "if ( Double . is Na N ( data [ i ] ) ) {", "discrete Data [ i ] = Discrete Variable . MISSING VALUE ;", "continue ; }", "for ( int j = NUM_ ; j < cutoffs . length ; j ++ ) {", "if ( data [ i ] > Double . NEGATIVE INFINITY && data [ i ] < Double . POSITIVE INFINITY && data [ i ] < cutoffs [ j ] ) {", "discrete Data [ i ] = j ;", "continue loop ; } }", "discrete Data [ i ] = cutoffs . length ; }", "return new Discretization ( variable , discrete Data ) ; }"]}
{"ids": "54955", "code": ["private boolean render Output ( Node node , Internal Context Adapter context , Writer writer ) throws IO Exception , Method Invocation Exception , Resource Not Found Exception {", "String arg = STR_ ;", "if ( node == null ) {", "rsvc . error ( STR_ ) ;", "return false ; }", "Object value = node . value ( context ) ;", "if ( value == null ) {", "rsvc . error ( STR_ ) ;", "return false ; }", "arg = value . to String ( ) ;", "Resource resource = null ;", "try {", "resource = rsvc . get Content ( arg , get Input Encoding ( context ) ) ; }", "catch ( Resource Not Found Exception rnfe ) {", "rsvc . error ( STR_ + arg + STR_ + context . get Current Template Name ( ) + STR_ + get Line ( ) + STR_ + get Column ( ) + STR_ ) ;", "throw rnfe ; }", "catch ( Exception e ) {", "rsvc . error ( STR_ + arg + STR_ + context . get Current Template Name ( ) + STR_ + get Line ( ) + STR_ + get Column ( ) + STR_ + e ) ; }", "if ( resource == null ) return false ;", "writer . write ( ( String ) resource . get Data ( ) ) ;", "return true ; }"]}
{"ids": "9465", "code": ["public Matrix 4 multiply By Scale ( double x Scale , double y Scale , double z Scale ) {", "double [ ] m = this . m ;", "m [ NUM_ ] *= x Scale ;", "m [ NUM_ ] *= x Scale ;", "m [ NUM_ ] *= x Scale ;", "m [ NUM_ ] *= x Scale ;", "m [ NUM_ ] *= y Scale ;", "m [ NUM_ ] *= y Scale ;", "m [ NUM_ ] *= y Scale ;", "m [ NUM_ ] *= y Scale ;", "m [ NUM_ ] *= z Scale ;", "m [ NUM_ ] *= z Scale ;", "m [ NUM_ ] *= z Scale ;", "m [ NUM_ ] *= z Scale ;", "return this ; }"]}
{"ids": "73462", "code": ["public void change State ( ) {", "linked = ! linked ;", "link = linked ? linked Im Ic . get Image ( ) : unlinked Im Ic . get Image ( ) ;", "repaint ( ) ; }"]}
{"ids": "71061", "code": ["public static Geometry buffer By Segments ( Geometry g , double distance ) {", "Geometry segs = Line Handling Functions . extract Segments ( g ) ;", "double pos Dist = Math . abs ( distance ) ;", "Geometry seg Buf = buffer By Components ( segs , pos Dist ) ;", "if ( distance < NUM_ ) return g . difference ( seg Buf ) ;", "return g . union ( seg Buf ) ; }"]}
{"ids": "22162", "code": ["public void record End Time ( ) {", "int ms Diff = ( int ) ( System . current Time Millis ( ) - current Request Start Time . get ( ) ) ;", "log . info ( STR_ , ms Diff ) ;", "update Or Reset Req Rsp Avg Lst Hr ( update Or Reset Req Rsp Avg Lst Min ( ms Diff , false ) , false ) ;", "update Min Max Req Rsp Ms ( ms Diff ) ;", "if ( ms Diff >= SUSPISCIOUS RSP TIME MS ) {", "alert Log . warn ( Message Format . format ( STR_ , ms Diff ) ) ; }", "current Request Start Time . remove ( ) ; }"]}
{"ids": "17024", "code": ["private boolean is Accessible User To Kibana ( Set < String > filters ) {", "if ( filters . contains ( STR_ ) ) {", "return true ; }", "return false ; }"]}
{"ids": "34443", "code": ["public boolean clear ( ) {", "try {", "list . clear ( ) ;", "fire Table Data Changed ( ) ; }", "catch ( Exception e ) {", "return false ; }", "return true ; }"]}
{"ids": "74035", "code": ["public boolean load ( File fi ) throws Jmri Configure Xml Exception {", "return load ( fi , false ) ; }"]}
{"ids": "47574", "code": ["public void add Request Property ( String key , String value ) {", "if ( connected ) throw new Illegal State Exception ( STR_ ) ;", "if ( key == null ) throw new Null Pointer Exception ( STR_ ) ;", "if ( requests == null ) requests = new Message Header ( ) ;", "requests . add ( key , value ) ; }"]}
{"ids": "65352", "code": ["Server Member update ( Address client Address , Instant time ) {", "if ( client Address != null ) {", "this . client Address = client Address ;", "if ( time . is After ( updated ) ) {", "this . updated = Assert . not Null ( time , STR_ ) ; } }", "return this ; }"]}
{"ids": "7397", "code": ["@ Override public void action Performed ( Action Event event ) {", "String command = event . get Action Command ( ) ;", "if ( command . equals ( STR_ ) ) {", "attempt Modify Background Paint ( ) ; } }"]}
{"ids": "36084", "code": ["public byte [ ] serialize To Buffer ( Object o ) throws IO Exception {", "Byte Array Output Stream buf Out = new Byte Array Output Stream ( ) ;", "try {", "serialize ( buf Out , o ) ;", "buf Out . flush ( ) ;", "return buf Out . to Byte Array ( ) ; }", "finally {", "buf Out . close ( ) ; } }"]}
{"ids": "80843", "code": ["Module Pointer resolve ( String mod Name ) {", "return ( Module Pointer ) context . get ( mod Name ) ; }"]}
{"ids": "4573", "code": ["public Nar Class Loader ( final File nar Working Directory ) throws Class Not Found Exception , IO Exception {", "super ( new URL [ NUM_ ] ) ;", "this . nar Working Directory = nar Working Directory ;", "update Classpath ( nar Working Directory ) ; }"]}
{"ids": "81345", "code": ["public static Type Binding [ ] substitute ( Substitution substitution , Type Binding [ ] original Types ) {", "if ( original Types == null ) return null ;", "Type Binding [ ] substituted Types = original Types ;", "for ( int i = NUM_ , length = original Types . length ; i < length ; i ++ ) {", "Type Binding original Type = original Types [ i ] ;", "Type Binding substituted Parameter = substitute ( substitution , original Type ) ;", "if ( substituted Parameter != original Type ) {", "if ( substituted Types == original Types ) {", "System . arraycopy ( original Types , NUM_ , substituted Types = new Type Binding [ length ] , NUM_ , i ) ; }", "substituted Types [ i ] = substituted Parameter ; }", "else if ( substituted Types != original Types ) {", "substituted Types [ i ] = original Type ; } }", "return substituted Types ; }"]}
{"ids": "9059", "code": ["private boolean check If Scrolling ( float [ ] last Points , Motion Event ev ) {", "float [ ] point = new float [ NUM_ ] ;", "point [ NUM_ ] = ev . get Raw X ( ) ;", "point [ NUM_ ] = ev . get Raw Y ( ) ;", "float delta = get Distance ( last Points , point ) ;", "return Math . abs ( delta ) > m Slop ; }"]}
{"ids": "55733", "code": ["public Edge ( S src , Symbol symbol , S dest ) {", "this . src = src ;", "this . symbol = symbol ;", "this . dest = dest ;", "this . src Item = src . get First Item ( ) ;", "this . hash Cache = calc Hash Code ( ) ; }"]}
{"ids": "49091", "code": ["public Extended Text Label create Extended ( Font font , Core Metrics lm , Decoration decorator , int start , int limit ) {", "if ( start >= limit || start < line Start || limit > line Limit ) {", "throw new Illegal Argument Exception ( STR_ + start + STR_ + limit ) ; }", "int level = line Bidi == null ? NUM_ : line Bidi . get Level At ( start - line Start ) ;", "int linedir = ( line Bidi == null || line Bidi . base Is Left To Right ( ) ) ? NUM_ : NUM_ ;", "int layout Flags = flags & ~ NUM_ ;", "if ( ( level & NUM_ ) != NUM_ ) layout Flags |= NUM_ ;", "if ( ( linedir & NUM_ ) != NUM_ ) layout Flags |= NUM_ ;", "Text Source source = new Standard Text Source ( text , start , limit - start , line Start , line Limit - line Start , level , layout Flags , font , frc , lm ) ;", "return new Extended Text Source Label ( source , decorator ) ; }"]}
{"ids": "65276", "code": ["public static String right Pad ( String s , int min Length , char filling ) {", "int ln = s . length ( ) ;", "if ( min Length <= ln ) {", "return s ; }", "String Builder res = new String Builder ( min Length ) ;", "res . append ( s ) ;", "int dif = min Length - ln ;", "for ( int i = NUM_ ; i < dif ; i ++ ) {", "res . append ( filling ) ; }", "return res . to String ( ) ; }"]}
{"ids": "71847", "code": ["private static String read Quoted Descriptor ( final Substring Reader reader , final boolean allow Compat Chars ) throws Decode Exception {", "int length = NUM_ ;", "reader . skip Whitespaces ( ) ;", "try {", "char c = reader . read ( ) ;", "if ( c != STR_ ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX EXPECTED QUOTE AT POS 1 . get ( reader . pos ( ) - NUM_ , c ) ) ; }", "reader . mark ( ) ;", "while ( ( c = reader . read ( ) ) != STR_ ) {", "if ( length == NUM_ && ! is Alpha ( c ) ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX ILLEGAL CHAR IN STRING OID 1 . get ( c , reader . pos ( ) - NUM_ ) ) ; }", "if ( ! is Key Char ( c , allow Compat Chars ) ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX ILLEGAL CHAR IN STRING OID 1 . get ( c , reader . pos ( ) - NUM_ ) ) ; }", "length ++ ; }", "reader . reset ( ) ;", "final String descr = reader . read ( length ) ;", "reader . read ( ) ;", "return descr ; }", "catch ( final String Index Out Of Bounds Exception e ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX TRUNCATED VALUE 1 . get ( ) ) ; } }"]}
{"ids": "34498", "code": ["public String to CSV ( ) {", "String Builder builder = new String Builder ( ) ;", "builder . append ( STR_ ) ;", "builder . append ( STR_ ) ;", "for ( T predicted : classes ) {", "builder . append ( String . format ( STR_ , predicted ) ) ; }", "builder . append ( STR_ ) ;", "String first Column Label = STR_ ;", "for ( T actual : classes ) {", "builder . append ( first Column Label ) ;", "first Column Label = STR_ ;", "builder . append ( String . format ( STR_ , actual ) ) ;", "for ( T predicted : classes ) {", "builder . append ( get Count ( actual , predicted ) ) ;", "builder . append ( STR_ ) ; }", "builder . append ( get Actual Total ( actual ) ) ;", "builder . append ( STR_ ) ; }", "builder . append ( STR_ ) ;", "for ( T predicted : classes ) {", "builder . append ( get Predicted Total ( predicted ) ) ;", "builder . append ( STR_ ) ; }", "builder . append ( STR_ ) ;", "return builder . to String ( ) ; }"]}
{"ids": "5913", "code": ["public Object assign Id Value ( Object data , Number val , Object Cache object Cache ) throws SQL Exception {", "Object id Val = data Persister . convert Id Number ( val ) ;", "if ( id Val == null ) {", "throw new SQL Exception ( STR_ + data Persister + STR_ + this ) ; }", "else {", "assign Field ( data , id Val , false , object Cache ) ;", "return id Val ; } }"]}
{"ids": "56387", "code": ["public final boolean is Open ( ) {", "return closed . get ( ) == false ; }"]}
{"ids": "29517", "code": ["public static String soap To String ( SOAP Element element ) {", "return dom To String ( element . get Owner Document ( ) ) ; }"]}
{"ids": "64214", "code": ["@ Override public void close ( ) throws IO Exception {", "try {", "out . close ( ) ; }", "finally {", "lock File . delete ( ) ; } }"]}
{"ids": "30276", "code": ["@ Override public boolean equals ( Object x , Object y ) throws Hibernate Exception {", "if ( x == null ) {", "return y == null ; }", "return x . equals ( y ) ; }"]}
{"ids": "12798", "code": ["@ Override public final void write Boolean ( boolean v ) throws IO Exception {", "dis . write Boolean ( v ) ; }"]}
{"ids": "72990", "code": ["public void train ( Set < String > s File Names ) {", "Iterator < String > i File = s File Names . iterator ( ) ;", "while ( i File . has Next ( ) ) {", "String s Text = utils . load File To String ( i File . next ( ) ) ;", "train ( s Text ) ; } }"]}
{"ids": "12738", "code": ["public Printf Format ( String fmt Arg ) throws Illegal Argument Exception {", "this ( Locale . get Default ( ) , fmt Arg ) ; }"]}
{"ids": "67253", "code": ["public static void write Fix Int 32 ( final Output Stream output , final int val ) throws IO Exception {", "output . write ( ( val > > > NUM_ ) & NUM_ ) ;", "output . write ( ( val > > > NUM_ ) & NUM_ ) ;", "output . write ( ( val > > > NUM_ ) & NUM_ ) ;", "output . write ( val & NUM_ ) ; }"]}
{"ids": "30150", "code": ["public static void queue Cube Load ( I Cubic World world , Cube IO loader , Cube Provider Server cache , int x , int y , int z , Consumer < Cube > runnable ) {", "Queued Cube key = new Queued Cube ( x , y , z , world ) ;", "Async Cube IO Provider task = cube Tasks . get ( key ) ;", "if ( task == null ) {", "task = new Async Cube IO Provider ( key , loader ) ;", "task . add Callback ( runnable ) ;", "cube Tasks . put ( key , task ) ;", "pool . execute ( task ) ; }", "else {", "task . add Callback ( runnable ) ; }", "Column loaded Column ;", "if ( ( loaded Column = cache . get Loaded Column ( x , z ) ) == null ) {", "cache . async Get Column ( x , z , I Provider Extras . Requirement . LIGHT , null ) ; }", "else {", "task . set Column ( loaded Column ) ; } }"]}
{"ids": "39846", "code": ["public static boolean is Object Available Now ( final boolean enabled , final Date available From , final Date available To , final Date now ) {", "if ( ! enabled ) {", "return false ; }", "if ( available From != null && now . before ( available From ) ) {", "return false ; }", "if ( available To != null && now . after ( available To ) ) {", "return false ; }", "return true ; }"]}
{"ids": "83696", "code": ["private long load Largest Message Id ( ) {", "Release Message release Message = release Message Repository . find Top By Order By Id Desc ( ) ;", "return release Message == null ? NUM_ : release Message . get Id ( ) ; }"]}
{"ids": "16787", "code": ["public void remove Change Listener ( Change Listener l ) {", "if ( listeners == null ) return ;", "listeners . remove ( l ) ; }"]}
{"ids": "52560", "code": ["public static Request Log dump ( ) {", "Request Log current = RLOG . get ( ) ;", "Request Log copy = new Request Log ( current ) ;", "current . clear ( ) ;", "RLOG . remove ( ) ;", "return copy ; }"]}
{"ids": "38346", "code": ["protected Default List Model string To Model ( String s ) {", "Default List Model result ;", "String tmp Str ;", "int i ;", "boolean quote ;", "String [ ] find ;", "String [ ] replace ;", "int index ;", "result = new Default List Model ( ) ;", "find = new String [ ] { STR_ , STR_ , STR_ , STR_ } ;", "replace = new String [ ] { STR_ , STR_ , STR_ , STR_ } ;", "for ( i = NUM_ ; i < find . length ; i ++ ) {", "tmp Str = STR_ ;", "while ( s . length ( ) > NUM_ ) {", "index = s . index Of ( find [ i ] ) ;", "if ( index > - NUM_ ) {", "tmp Str += s . substring ( NUM_ , index ) + replace [ i ] ;", "s = s . substring ( index + NUM_ ) ; }", "else {", "tmp Str += s ;", "s = STR_ ; } }", "s = tmp Str ; }", "quote = false ;", "tmp Str = STR_ ;", "for ( i = NUM_ ; i < s . length ( ) ; i ++ ) {", "if ( s . char At ( i ) == STR_ ) {", "quote = ! quote ;", "tmp Str += STR_ + s . char At ( i ) ; }", "else if ( s . char At ( i ) == STR_ ) {", "if ( quote ) {", "tmp Str += STR_ + s . char At ( i ) ; }", "else {", "if ( tmp Str . starts With ( STR_ ) ) {", "tmp Str = tmp Str . substring ( NUM_ , tmp Str . length ( ) - NUM_ ) ; }", "result . add Element ( tmp Str ) ;", "tmp Str = STR_ ; } }", "else {", "tmp Str += STR_ + s . char At ( i ) ; } }", "if ( ! tmp Str . equals ( STR_ ) ) {", "if ( tmp Str . starts With ( STR_ ) ) {", "tmp Str = tmp Str . substring ( NUM_ , tmp Str . length ( ) - NUM_ ) ; }", "result . add Element ( tmp Str ) ; }", "return result ; }"]}
{"ids": "14444", "code": ["public static void reset Current File List ( String log Name ) {", "current File List . remove ( PREFIX + log Name ) ; }"]}
{"ids": "9104", "code": ["public static synchronized Result Set execute Query ( String sql Statement ) {", "logger . trace ( String . format ( STR_ , sql Statement ) ) ;", "Result Set R = null ;", "final Statement S = get Statement ( ) ;", "if ( S == null ) {", "logger . error ( STR_ ) ;", "return null ; }", "try {", "R = S . execute Query ( sql Statement ) ;", "logger . trace ( STR_ + ( null == R ) ) ;", "return R ; }", "catch ( Throwable t ) {", "surface Throwable ( String . format ( STR_ , sql Statement ) , t ) ;", "cleanup ( S , R ) ; }", "return null ; }"]}
{"ids": "49624", "code": ["public static String url Encode ( @ Nullable String s ) {", "if ( s == null ) {", "return STR_ ; }", "try {", "return URL Encoder . encode ( s , STR_ ) ; }", "catch ( Unsupported Encoding Exception e ) {", "throw new Assertion Error ( STR_ ) ; } }"]}
{"ids": "36838", "code": ["protected static boolean check Raw Modules Tables ( final C Connection connection , final String database Name , final int raw Module Id ) {", "Preconditions . check Not Null ( connection , STR_ ) ;", "Preconditions . check Not Null ( database Name , STR_ ) ;", "Preconditions . check Argument ( raw Module Id > NUM_ , STR_ , raw Module Id ) ;", "final Immutable Set < String > raw Table Names = Immutable Set . of ( String . format ( C Table Names . RAW ADDRESS COMMENTS TABLE , raw Module Id ) , String . format ( C Table Names . RAW ADDRESS REFERENCES TABLE , raw Module Id ) , String . format ( C Table Names . RAW BASE TYPES , raw Module Id ) , String . format ( C Table Names . RAW BASIC BLOCK INSTRUCTIONS TABLE , raw Module Id ) , String . format ( C Table Names . RAW BASIC BLOCKS TABLE , raw Module Id ) , String . format ( C Table Names . RAW CALLGRAPH TABLE , raw Module Id ) , String . format ( C Table Names . RAW CONTROL FLOW GRAPHS TABLE , raw Module Id ) , String . format ( C Table Names . RAW EXPRESSION NODES TABLE , raw Module Id ) , String . format ( C Table Names . RAW EXPRESSION SUBSTITUTIONS TABLE , raw Module Id ) , String . format ( C Table Names . RAW EXPRESSION TREE NODES TABLE , raw Module Id ) , String . format ( C Table Names . RAW EXPRESSION TREES TABLE , raw Module Id ) , String . format ( C Table Names . RAW EXPRESSION TYPES TABLE , raw Module Id ) , String . format ( C Table Names . RAW FUNCTIONS TABLE , raw Module Id ) , String . format ( C Table Names . RAW INSTRUCTIONS TABLE , raw Module Id ) , String . format ( C Table Names . RAW OPERANDS TABLE , raw Module Id ) , String . format ( C Table Names . RAW SECTIONS , raw Module Id ) , String . format ( C Table Names . RAW EXPRESSION TYPE INSTANCES , raw Module Id ) , String . format ( C Table Names . RAW TYPE INSTACES , raw Module Id ) , String . format ( C Table Names . RAW TYPES , raw Module Id ) ) ;", "final Pair < C Connection , String > cache Key = new Pair < > ( connection , database Name ) ;", "if ( Postgre SQL Database Functions . query Cache ( cache Key , raw Table Names ) ) {", "return true ; }", "else {", "if ( ! Postgre SQL Database Functions . fill Cache ( cache Key ) ) {", "return false ; }", "return Postgre SQL Database Functions . query Cache ( cache Key , raw Table Names ) ; } }"]}
{"ids": "43853", "code": ["public static float parse Float ( String s ) {", "if ( POSITIVE INFINITY . equals ( s ) ) {", "return Float . POSITIVE INFINITY ; }", "else if ( NEGATIVE INFINITY . equals ( s ) ) {", "return Float . NEGATIVE INFINITY ; }", "else if ( Na N . equals ( s ) ) {", "return Float . Na N ; }", "else {", "s = trim Plus Sign ( s ) ;", "return Float . parse Float ( s ) ; } }"]}
{"ids": "59546", "code": ["public void request Password For Share Via Link ( boolean create Share ) {", "Share Password Dialog Fragment dialog = Share Password Dialog Fragment . new Instance ( m File , create Share ) ;", "dialog . show ( get Fragment Manager ( ) , Share Password Dialog Fragment . PASSWORD FRAGMENT ) ; }"]}
{"ids": "24326", "code": ["private void force Out Of Memory ( ) {", "Array List junk = new Array List ( ) ;", "for ( ; ; ) {", "junk . add ( new long [ NUM_ ] ) ; } }"]}
{"ids": "76121", "code": ["@ TCB static String strip Banned Codeunits ( String s ) {", "int safe Limit = longest Prefix Of Good Codeunits ( s ) ;", "if ( safe Limit < NUM_ ) {", "return s ; }", "String Builder sb = new String Builder ( s ) ;", "strip Banned Codeunits ( sb , safe Limit ) ;", "return sb . to String ( ) ; }"]}
{"ids": "36363", "code": ["public static void assert Linewise Equals ( String message , String expected , String actual ) {", "try ( Scanner expected Scanner = new Scanner ( expected ) ; Scanner actual Scanner = new Scanner ( actual ) ) {", "String expected Line = null ;", "String actual Line = null ;", "int line Counter = NUM_ ;", "while ( expected Scanner . has Next Line ( ) ) {", "expected Line = expected Scanner . next Line ( ) ;", "if ( actual Scanner . has Next Line ( ) ) {", "actual Line = actual Scanner . next Line ( ) ; }", "else {", "fail ( STR_ + line Counter + STR_ + expected Line ) ; }", "assert Equals ( STR_ + line Counter + STR_ + message + STR_ + expected + STR_ + actual , expected Line , actual Line ) ;", "++ line Counter ; } } }"]}
{"ids": "68392", "code": ["private void warning ( String msg , Throwable th ) {", "warning ( msg ) ;", "th . print Stack Trace ( ) ; }"]}
{"ids": "79974", "code": ["public String full Form ( final String str , final String low String ) {", "String ret = low String ;", "Prefix Entry found = prefix Map . get ( str ) ;", "if ( found != null ) {", "ret = found . prefix Singular + ret ; }", "else {", "for ( Prefix Entry entry : prefix End List ) {", "if ( str . ends With ( entry . keyword ) ) {", "ret = Grammar . add Prefix If Not Already There ( ret , entry . prefix Singular , entry . prefix Plural ) ;", "break ; } } }", "return ret ; }"]}
{"ids": "71946", "code": ["public void clear Password Expiration Warned Time ( ) {", "operations . add ( Password Policy State Operation Type . CLEAR PASSWORD EXPIRATION WARNED TIME ) ; }"]}
{"ids": "8433", "code": ["public void remove Listeners ( ) {", "if ( global Listener != null ) {", "try {", "Invoker Helper . invoke Method ( current Object , STR_ , global Listener ) ; }", "catch ( Exception e ) { }", "global Listener = null ; }", "if ( local Listener != null ) {", "try {", "Invoker Helper . invoke Method ( current Object , STR_ , new Object [ ] { property Name , local Listener } ) ; }", "catch ( Exception e ) { }", "local Listener = null ; }", "if ( synthetic Full Binding != null ) {", "synthetic Full Binding . unbind ( ) ; } }"]}
{"ids": "62638", "code": ["public static String pad Left ( String str , int total Chars ) {", "if ( str == null ) str = STR_ ;", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < total Chars - str . length ( ) ; i ++ ) {", "sb . append ( STR_ ) ; }", "sb . append ( str ) ;", "return sb . to String ( ) ; }"]}
{"ids": "86638", "code": ["public void show Scores ( boolean flag ) {", "m Show Scores = flag ;", "Swing Utilities . invoke Later ( null ) ; }"]}
{"ids": "37974", "code": ["protected double kernel Helper ( int n , char [ ] s , int end Index S , char [ ] t , int end Index T ) {", "if ( n <= NUM_ ) {", "return get Return Value ( n ) ; }", "if ( Math . min ( end Index S + NUM_ , end Index T + NUM_ ) < n ) {", "return get Return Value ( n ) ; }", "int adr = NUM_ ;", "if ( m use Recursion Cache ) {", "adr = m mult X * n + m mult Y * end Index S + m mult Z * end Index T ;", "if ( cachekh K [ adr % max Cache ] == adr + NUM_ ) {", "return cachekh [ adr % max Cache ] ; } }", "double result = NUM_ ;", "result = m lambda * kernel Helper ( n , s , end Index S - NUM_ , t , end Index T ) + kernel Helper 2 ( n , s , end Index S , t , end Index T ) ;", "if ( m use Recursion Cache ) {", "cachekh K [ adr % max Cache ] = adr + NUM_ ;", "cachekh [ adr % max Cache ] = result ; }", "return result ; }"]}
{"ids": "62940", "code": ["protected void start Recoarding ( ) {", "coordinates . clear ( ) ;", "enabled = true ; }"]}
{"ids": "66185", "code": ["public void add Input Method Listener ( Input Method Listener l ) {", "m text Pane . add Input Method Listener ( l ) ; }"]}
{"ids": "63201", "code": ["public static void load ( String url ) {", "String driver = get Driver ( url ) ;", "if ( driver != null ) {", "load User Class ( driver ) ; } }"]}
{"ids": "4594", "code": ["protected void put Command ( final Class command Class , final String [ ] names ) {", "Check . is True ( names . length > NUM_ , STR_ ) ;", "commands To Canonical Names . put ( command Class , names [ NUM_ ] ) ;", "for ( int i = NUM_ ; i < names . length ; i ++ ) {", "aliases To Commands . put ( names [ i ] , command Class ) ; } }"]}
{"ids": "33609", "code": ["private void Save GCM Data ( ) {", "try {", "Shared Preferences preferences = get Shared Preferences ( ) ;", "Shared Preferences . Editor editor = preferences . edit ( ) ;", "editor . put String ( PREFS PUSHER APP ID KEY , m Pusher App Id ) ;", "editor . put String ( PREFS PUSHER URL KEY , m Pusher Url ) ;", "editor . put String ( PREFS PUSHER FILE TAG KEY , m Pusher Base File Tag ) ;", "editor . commit ( ) ; }", "catch ( Exception e ) {", "Log . e ( LOG TAG , STR_ + e . get Localized Message ( ) ) ; } }"]}
{"ids": "82733", "code": ["private void paint Background Solid ( Graphics 2 D g , J Component c , int x , int y , int width , int height ) {", "Color color = c . get Background ( ) ;", "if ( type == Common Control State . DISABLED ) {", "color = new Color ( color . get Red ( ) , color . get Green ( ) , color . get Blue ( ) , NUM_ ) ; }", "Shape s = shape Generator . create Round Rectangle ( x - NUM_ , y - NUM_ , width + NUM_ , height + NUM_ , Corner Size . BORDER ) ;", "g . set Paint ( color ) ;", "g . fill ( s ) ;", "if ( is Paint Line Seperators ( c ) ) {", "paint Line Separator ( g , c , width , height ) ; } }"]}
{"ids": "14263", "code": ["public static void add Attribute Default Values ( String service Name , String sub Schema Name , String schema Type , String attribute Name , Set default Values ) throws Upgrade Exception {", "String class Method = STR_ ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( class Method + STR_ ) ;", "debug . message ( STR_ + service Name + STR_ + attribute Name ) ; }", "Service Schema ss = get Service Schema ( service Name , sub Schema Name , schema Type ) ;", "try {", "Map attribute Defaults = ss . get Attribute Defaults ( ) ;", "Set old Attr Values = ( Set ) attribute Defaults . get ( attribute Name ) ;", "Set new Attr Values = ( ( old Attr Values == null ) || old Attr Values . is Empty ( ) ) ? new Hash Set ( ) : new Hash Set ( old Attr Values ) ;", "new Attr Values . add All ( default Values ) ;", "ss . set Attribute Defaults ( attribute Name , new Attr Values ) ; }", "catch ( SSO Exception ssoe ) {", "throw new Upgrade Exception ( STR_ ) ; }", "catch ( SMS Exception sme ) {", "throw new Upgrade Exception ( STR_ + STR_ ) ; } }"]}
{"ids": "10325", "code": ["public boolean is Metadata Modified Since Last Publication ( ) {", "return metadata Modified Since Last Publication ; }"]}
{"ids": "85397", "code": ["public Options resource Dirs ( List < File > value ) {", "resource Dirs . clear ( ) ;", "resource Dirs . add All ( value ) ;", "return this ; }"]}
{"ids": "8083", "code": ["private static Class Node make Type ( Class Node cn , boolean using Class ) {", "if ( using Class ) {", "Class Node clazz Type = CLASS Type . get Plain Node Reference ( ) ;", "clazz Type . set Generics Types ( new Generics Type [ ] { new Generics Type ( cn ) } ) ;", "return clazz Type ; }", "else {", "return cn ; } }"]}
{"ids": "21412", "code": ["protected String to Message ( Map < String , String > results ) {", "String Builder builder = new String Builder ( ) ;", "if ( results != null ) {", "for ( Map . Entry < String , String > entry : results . entry Set ( ) ) {", "builder . append ( entry . get Key ( ) + STR_ + entry . get Value ( ) + STR_ ) ; } }", "return builder . to String ( ) ; }"]}
{"ids": "7292", "code": ["public static Event Bean [ ] add To Array ( Event Bean [ ] array , Collection < Event Bean > events To Add ) {", "Event Bean [ ] new Array = new Event Bean [ array . length + events To Add . size ( ) ] ;", "System . arraycopy ( array , NUM_ , new Array , NUM_ , array . length ) ;", "int counter = array . length ;", "for ( Event Bean event To Add : events To Add ) {", "new Array [ counter ++ ] = event To Add ; }", "return new Array ; }"]}
{"ids": "31374", "code": ["private void reflect Member Variables In Final Button ( ) {", "final boolean last Page Reached = ( view Pager . get Current Item ( ) + NUM_ ) == pages . size ( ) ;", "final boolean button Should Be Invisible = ! last Page Reached || final Button Disabled ;", "final boolean button Is Currently Invisible = final Button . get Visibility ( ) == View . INVISIBLE ;", "final boolean should Update Button = button Should Be Invisible != button Is Currently Invisible ;", "if ( should Update Button ) {", "final Animator button Animator = button Should Be Invisible ? button Animator Factory . new Final Button Disappear Animator ( final Button ) : button Animator Factory . new Final Button Appear Animator ( final Button ) ;", "if ( button Should Be Invisible ) {", "disable Button ( button Animator , final Button ) ; }", "else {", "enable Button ( button Animator , final Button ) ; } } }"]}
{"ids": "9855", "code": ["private Relying Party validate Relying Party ( Http Servlet Request request , String tenant Name ) {", "Validate . not Null ( request , STR_ ) ;", "Validate . not Empty ( tenant Name , STR_ ) ;", "Default Idm Accessor Factory idm Factory = new Default Idm Accessor Factory ( ) ;", "Validate . not Null ( idm Factory , STR_ ) ;", "Idm Accessor idm Accessor = idm Factory . get Idm Accessor ( ) ;", "idm Accessor . set Tenant ( tenant Name ) ;", "String encoded Entity Id = request . get Parameter ( Shared . RELYINGPARTY ENTITYID ) ;", "if ( encoded Entity Id == null || encoded Entity Id . is Empty ( ) ) {", "logger . error ( STR_ ) ;", "return null ; }", "String rp Entity Id = new String ( Base 64 . decode ( encoded Entity Id ) ) ;", "Relying Party rp = idm Accessor . get Relying Party By Url ( rp Entity Id ) ;", "if ( rp != null ) {", "return rp ; }", "else {", "logger . error ( STR_ + rp Entity Id ) ;", "return null ; } }"]}
{"ids": "20775", "code": ["public void rotate Z ( double theta ) {", "Matrix 3 D tmp = new Matrix 3 D ( ) ;", "double c = Math . cos ( theta ) ;", "double s = Math . sin ( theta ) ;", "tmp . set ( NUM_ , NUM_ , c ) ;", "tmp . set ( NUM_ , NUM_ , - s ) ;", "tmp . set ( NUM_ , NUM_ , s ) ;", "tmp . set ( NUM_ , NUM_ , c ) ;", "pre Multiply ( tmp ) ; }"]}
{"ids": "50157", "code": ["public Service Host start Factory ( Service instance Service ) {", "final Class < ? extends Service > service Class = instance Service . get Class ( ) ;", "return start Factory ( service Class , null ) ; }"]}
{"ids": "4013", "code": ["void wake Out ( ) {", "On Available out Flow = out Flow ;", "if ( out Flow == null ) {", "return ; }", "if ( credits In <= queue . head ( ) ) {", "return ; }", "State Out Pipe state Old ;", "State Out Pipe state New ;", "do {", "state Old = state Out Ref . get ( ) ;", "if ( ! state Old . is Full ( ) ) {", "return ; }", "state New = state Old . to Wake ( ) ; }", "while ( ! state Out Ref . compare And Set ( state Old , state New ) ) ;", "try ( Outbox Amp outbox = Outbox Amp . current Or Create ( out Ref . services ( ) ) ) {", "Objects . require Non Null ( outbox ) ;", "Pipe Wake Out Message < T > msg = new Pipe Wake Out Message < > ( outbox , out Ref , this , out Flow ) ;", "outbox . offer ( msg ) ; } }"]}
{"ids": "34958", "code": ["public Constraint Map create Assignment Constraints ( final Annotated Type Mirror assigned To , final Annotated Type Mirror boxed Return Type , final Annotated Executable Type method Type , final Set < AF Constraint > af Argument Constraints , final Map < Type Variable , Annotated Type Mirror > inferred Args , final Set < Type Variable > targets , final Annotated Type Factory type Factory ) {", "final Linked List < AF Constraint > assignment Afs = new Linked List < > ( ) ;", "for ( Annotated Type Variable type Param : method Type . get Type Variables ( ) ) {", "final Type Variable target = type Param . get Underlying Type ( ) ;", "final Annotated Type Mirror inferred Type = inferred Args . get ( target ) ;", "if ( inferred Type != null ) {", "assignment Afs . add ( new A 2 F ( inferred Type , type Param . get Upper Bound ( ) ) ) ;", "assignment Afs . add ( new F 2 A ( type Param . get Lower Bound ( ) , inferred Type ) ) ; }", "else {", "assignment Afs . add ( new F 2 A ( type Param , type Param . get Upper Bound ( ) ) ) ;", "assignment Afs . add ( new A 2 F ( type Param . get Lower Bound ( ) , type Param ) ) ; } }", "for ( AF Constraint arg Constraint : af Argument Constraints ) {", "if ( arg Constraint instanceof F 2 A ) {", "assignment Afs . add ( arg Constraint ) ; } }", "Linked List < AF Constraint > substituted Assignment Constraints = new Linked List < > ( ) ;", "for ( AF Constraint af Constraint : assignment Afs ) {", "substituted Assignment Constraints . add ( af Constraint . substitute ( inferred Args ) ) ; }", "final Annotated Type Mirror substituted Return Type = Type Arg Inference Util . substitute ( inferred Args , boxed Return Type ) ;", "substituted Assignment Constraints . add ( new F 2 A ( substituted Return Type , assigned To ) ) ;", "final Set < AF Constraint > reduced Constraints = new Linked Hash Set < > ( ) ;", "reduce Af Constraints ( type Factory , reduced Constraints , substituted Assignment Constraints , targets ) ;", "final Set < TU Constraint > tu Assignment Constraints = af To Tu Constraints ( reduced Constraints , targets ) ;", "add Constraints Between Targets ( tu Assignment Constraints , targets , true , type Factory ) ;", "return constraint Map Builder . build ( targets , tu Assignment Constraints , type Factory ) ; }"]}
{"ids": "60479", "code": ["public static int columns Number ( char c , int x , int prev X , int plain Space Size ) {", "if ( c != STR_ ) {", "return NUM_ ; }", "int result = ( x - prev X ) / plain Space Size ;", "if ( ( x - prev X ) % plain Space Size > NUM_ ) {", "result ++ ; }", "return result ; }"]}
{"ids": "78914", "code": ["public Kafka Message Listener Container ( Consumer Factory < K , V > consumer Factory , Container Properties container Properties , Topic Partition Initial Offset ... topic Partitions ) {", "super ( container Properties ) ;", "Assert . not Null ( consumer Factory , STR_ ) ;", "this . consumer Factory = consumer Factory ;", "if ( topic Partitions != null ) {", "this . topic Partitions = Arrays . copy Of ( topic Partitions , topic Partitions . length ) ; }", "else {", "this . topic Partitions = container Properties . get Topic Partitions ( ) ; } }"]}
{"ids": "5075", "code": ["public Pla Line Int translate by ( Pla Vector Int p vector ) {", "if ( p vector . equals ( Pla Vector Int . ZERO ) ) return this ;", "Pla Point Int new a = point a . translate by ( p vector ) ;", "Pla Point Int new b = point b . translate by ( p vector ) ;", "return new Pla Line Int ( new a , new b ) ; }"]}
{"ids": "6362", "code": ["@ Suppress Warnings ( STR_ ) final void reject ( Runnable command ) {", "handler . rejected Execution ( command , this ) ; }"]}
{"ids": "53814", "code": ["private int calculate Menu Margin ( ) {", "Window Manager wm = ( Window Manager ) get System Service ( Context . WINDOW SERVICE ) ;", "Display display = wm . get Default Display ( ) ;", "Point size = new Point ( ) ;", "display . get Size ( size ) ;", "int height = size . y ;", "return ( int ) Math . round ( height * MENU MARGIN RELATIVE MODIFIER ) ; }"]}
{"ids": "63304", "code": ["protected byte [ ] generate Salt ( ) {", "return HEADER . get Bytes ( Constants . UTF 8 ) ; }"]}
{"ids": "73443", "code": ["public void add Listener ( final Projector Listener projector Listener ) {", "if ( listeners == null ) {", "listeners = new Array List < Projector Listener > ( ) ; }", "listeners . add ( projector Listener ) ; }"]}
{"ids": "43869", "code": ["protected Tuple Expr select Next Tuple Expr ( List < Tuple Expr > expressions , Map < Tuple Expr , Double > cardinality Map , Map < Tuple Expr , List < Var > > vars Map , Map < Var , Integer > var Freq Map , Set < String > bound Vars ) {", "Tuple Expr result = null ;", "if ( expressions . size ( ) > NUM_ ) {", "double lowest Cardinality = Double . POSITIVE INFINITY ;", "for ( Tuple Expr tuple Expr : expressions ) {", "double cardinality = get Tuple Expr Cardinality ( tuple Expr , cardinality Map , vars Map , var Freq Map , bound Vars ) ;", "if ( cardinality < lowest Cardinality || result == null ) {", "lowest Cardinality = cardinality ;", "result = tuple Expr ; } } }", "else {", "result = expressions . get ( NUM_ ) ; }", "return result ; }"]}
{"ids": "67983", "code": ["public static void write Bcd Number ( Output Stream os , String number ) throws IO Exception {", "int bcd = NUM_ ;", "int n = NUM_ ;", "for ( int i = NUM_ ; i < number . length ( ) ; i ++ ) {", "switch ( number . char At ( i ) ) {", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ;", "case STR_ :", "bcd |= NUM_ ;", "break ; }", "n ++ ;", "if ( n == NUM_ ) {", "os . write ( bcd ) ;", "n = NUM_ ;", "bcd = NUM_ ; }", "else {", "bcd >>= NUM_ ; } }", "if ( n == NUM_ ) {", "bcd |= NUM_ ;", "os . write ( bcd ) ; } }"]}
{"ids": "59439", "code": ["public void add Message ( String message ) {", "messages . add Last ( message ) ;", "if ( messages . size ( ) > MAX HISTORY ) {", "messages . remove First ( ) ; }", "pointer = messages . size ( ) ; }"]}
{"ids": "26912", "code": ["@ Visible For Testing protected void start Executor ( final int container ) {", "LOG . info ( STR_ + container ) ;", "final Process container Executor = start Executor Process ( container ) ;", "process To Container . put ( container Executor , container ) ;", "LOG . info ( STR_ + container ) ;", "start Executor Monitor ( container , container Executor ) ; }"]}
{"ids": "54163", "code": ["public void accept ( Abstract Reporter r ) {", "r . test Start ( this ) ;", "r . browser Info Entry ( browser Info Entry ) ;", "Iterator < Log Entry > entry Iterator = log Entries . iterator ( ) ;", "while ( entry Iterator . has Next ( ) ) {", "Log Entry entry = entry Iterator . next ( ) ;", "if ( ! entry Iterator . has Next ( ) ) {", "entry . set Last ( true ) ; }", "visit ( entry , r ) ; }", "r . test End ( this ) ; }"]}
{"ids": "10334", "code": ["private void load Latest Extension Versions ( ) {", "try {", "List < Extension > all = registry Manager . get Extensions ( ) ;", "if ( ! all . is Empty ( ) ) {", "set Latest Extension Versions ( get Latest Versions ( all ) ) ; } }", "catch ( Registry Exception e ) {", "String msg = Registry Exception . log Registry Exception ( e . get Type ( ) , this ) ;", "warnings . add Startup Error ( msg ) ;", "LOG . error ( msg ) ;", "msg = get Text ( STR_ , new String [ ] { cfg . get Registry Url ( ) } ) ;", "warnings . add Startup Error ( msg ) ;", "LOG . error ( msg ) ; }", "finally {", "if ( get Latest Extension Versions ( ) == null ) {", "set Latest Extension Versions ( new Array List < Extension > ( ) ) ; } } }"]}
{"ids": "55530", "code": ["public void cancel Auto Completion ( ) {", "if ( in Completion ) {", "text Field . set Text ( text Before ) ;", "text Field . set Caret Position ( caret Pos Before ) ;", "prev Completion = null ;", "prev Completion Index = NUM_ ;", "in Completion = false ; } }"]}
{"ids": "30227", "code": ["public Client Properties Builder with Proxy Host Name ( String proxy Host Name ) {", "properties . set Property ( CLIENT SERVICE PROXY HOST NAME , proxy Host Name ) ;", "return this ; }"]}
{"ids": "75531", "code": ["public static void verify Setter Methods ( Class < ? > clazz , Mapped Field ... fields ) {", "String method Name = null ;", "String field Name = null ;", "Class < ? > field Type = null ;", "try {", "for ( Mapped Field field : fields ) {", "field Name = field . get Name ( ) ;", "field Type = field . get Type ( ) ;", "String custom Set = field . set Method ( ) ;", "if ( ! is Null ( custom Set ) && ! custom Set . equals ( Constants . DEFAULT ACCESSOR VALUE ) ) try {", "clazz . get Method ( custom Set , field Type ) ;", "field . set Method ( custom Set ) ;", "continue ; }", "catch ( Exception e ) {", "Error . custom Method ( STR_ , custom Set , clazz ) ; }", "method Name = m Set ( field Name ) ;", "clazz . get Method ( method Name , field Type ) ;", "field . set Method ( method Name ) ; } }", "catch ( Exception e ) {", "Error . method ( method Name , field Name , clazz ) ; } }"]}
{"ids": "30246", "code": ["public static Variation attempt To Get As Variant ( String part ) {", "try {", "Stone Types var = Stone Types . value Of ( part . to Upper Case ( ) ) ;", "if ( var != null ) {", "Variation bv = new Variation ( ) ;", "bv . set Value ( var . value ( ) ) ;", "return bv ; } }", "catch ( Exception e ) { }", "try {", "Wood Types var = Wood Types . value Of ( part . to Upper Case ( ) ) ;", "if ( var != null ) {", "Variation bv = new Variation ( ) ;", "bv . set Value ( var . value ( ) ) ;", "return bv ; } }", "catch ( Exception e ) { }", "try {", "Flower Types var = Flower Types . from Value ( part ) ;", "if ( var != null ) {", "Variation bv = new Variation ( ) ;", "bv . set Value ( var . value ( ) ) ;", "return bv ; } }", "catch ( Exception e ) { }", "try {", "Entity Types var = Entity Types . from Value ( part ) ;", "if ( var != null ) {", "Variation bv = new Variation ( ) ;", "bv . set Value ( var . value ( ) ) ;", "return bv ; } }", "catch ( Exception e ) { }", "try {", "Monster Egg Types var = Monster Egg Types . from Value ( part ) ;", "if ( var != null ) {", "Variation bv = new Variation ( ) ;", "bv . set Value ( var . value ( ) ) ;", "return bv ; } }", "catch ( Exception e ) { }", "try {", "Shape Types var = Shape Types . from Value ( part ) ;", "if ( var != null ) {", "Variation bv = new Variation ( ) ;", "bv . set Value ( var . value ( ) ) ;", "return bv ; } }", "catch ( Exception e ) { }", "try {", "Half Types var = Half Types . from Value ( part ) ;", "if ( var != null ) {", "Variation bv = new Variation ( ) ;", "bv . set Value ( var . value ( ) ) ;", "return bv ; } }", "catch ( Exception e ) { }", "return null ; }"]}
{"ids": "84906", "code": ["public void reset Text Box Indexes Except ( Set < Integer > excluded List ) {", "Set < Integer > unused Text Box Indexes = new Hash Set < Integer > ( points . get Text Box Indexes ( ) ) ;", "unused Text Box Indexes . remove All ( excluded List ) ;", "for ( Integer index : unused Text Box Indexes ) {", "points . remove Text Box ( index ) ; } }"]}
{"ids": "72505", "code": ["public double [ ] level Zero Data ( ) {", "List < Buffer > level Zero Buffers = buffer Map . get ( NUM_ ) ;", "int length = NUM_ ;", "for ( Buffer buffer : level Zero Buffers ) {", "if ( ! buffer . has Capacity ( ) ) {", "length += buffer . size ; }", "else {", "length += buffer . next ; } }", "int pos = NUM_ ;", "int curr Len ;", "final double [ ] out = new double [ length ] ;", "for ( Buffer buffer : level Zero Buffers ) {", "if ( ! buffer . has Capacity ( ) ) {", "curr Len = buffer . size ; }", "else {", "curr Len = buffer . next ; }", "System . arraycopy ( buffer . data , NUM_ , out , pos , curr Len ) ;", "pos += curr Len ; }", "return out ; }"]}
{"ids": "21423", "code": ["public String [ ] show Version ( ) throws Network Device Controller Exception {", "String [ ] return Val = new String [ NUM_ ] ;", "SSH Prompt [ ] prompts = { SSH Prompt . MDS POUND , SSH Prompt . MDS GREATER THAN } ;", "String Builder buf = new String Builder ( ) ;", "SSH Prompt prompt = send Wait For ( MDS Dialog Properties . get String ( STR_ ) , NUM_ , prompts , buf ) ;", "String [ ] lines = get Lines ( buf ) ;", "String [ ] regex = { MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) } ;", "String [ ] groups = new String [ NUM_ ] ;", "for ( String line : lines ) {", "int index = match ( line , regex , groups ) ;", "switch ( index ) {", "case NUM_ :", "return Val [ NUM_ ] = groups [ NUM_ ] ;", "break ;", "case NUM_ :", "return Val [ NUM_ ] = groups [ NUM_ ] ;", "break ;", "case NUM_ :", "return Val [ NUM_ ] = groups [ NUM_ ] ;", "break ; } }", "return return Val ; }"]}
{"ids": "28713", "code": ["public static int count Matches ( String string , char c ) {", "int n = NUM_ ;", "for ( char tc : string . to Char Array ( ) ) {", "if ( c == tc ) n ++ ; }", "return n ; }"]}
{"ids": "55233", "code": ["private Image Icon add Color ( Image Icon icon , Color color ) {", "if ( icon == null || color == null ) {", "return icon ; }", "Buffered Image new Image = new Buffered Image ( icon . get Icon Width ( ) , icon . get Icon Width ( ) , Buffered Image . TYPE INT ARGB ) ;", "Graphics g = new Image . get Graphics ( ) ;", "g . set Color ( color ) ;", "g . draw Image ( icon . get Image ( ) , NUM_ , NUM_ , color , null ) ;", "g . dispose ( ) ;", "return new Image Icon ( new Image ) ; }"]}
{"ids": "15936", "code": ["public static byte [ ] read All Limited ( Input Stream in Str , int limit ) throws IO Exception {", "Byte Array Output Stream buf = new Byte Array Output Stream ( ) ;", "pipe All Limited ( in Str , limit , buf ) ;", "return buf . to Byte Array ( ) ; }"]}
{"ids": "363", "code": ["protected String search For ( final String target , String start ) {", "return search For ( target , null , start ) ; }"]}
{"ids": "32187", "code": ["private int validate Preload Order ( Cache Configuration [ ] cfgs ) throws Ignite Checked Exception {", "int max Order = NUM_ ;", "for ( Cache Configuration cfg : cfgs ) {", "int rebalance Order = cfg . get Rebalance Order ( ) ;", "if ( rebalance Order > NUM_ ) {", "if ( cfg . get Cache Mode ( ) == LOCAL ) throw new Ignite Checked Exception ( STR_ + STR_ + U . mask Name ( cfg . get Name ( ) ) ) ;", "if ( cfg . get Rebalance Mode ( ) == Cache Rebalance Mode . NONE ) throw new Ignite Checked Exception ( STR_ + STR_ + U . mask Name ( cfg . get Name ( ) ) + STR_ + cfg . get Rebalance Mode ( ) + STR_ + cfg . get Rebalance Order ( ) + STR_ ) ;", "max Order = Math . max ( max Order , rebalance Order ) ; }", "else if ( rebalance Order < NUM_ ) throw new Ignite Checked Exception ( STR_ + STR_ + U . mask Name ( cfg . get Name ( ) ) + STR_ + rebalance Order + STR_ ) ; }", "return max Order ; }"]}
{"ids": "13425", "code": ["public void execute ( ) {", "m Player . set Loop Mode ( m Do Loop ) ;", "m Thread = new Thread ( this , STR_ ) ;", "m Thread . start ( ) ; }"]}
{"ids": "20173", "code": ["@ Override public void remove Env Var ( Env Var env Var ) {", "if ( env Var != null ) {", "env Var List . remove ( env Var ) ; } }"]}
{"ids": "9248", "code": ["static private String calc Threshold ( double score Threshold , double lambda ) {", "final double log Prob Threshold = Math . log ( NUM_ - score Threshold / NUM_ ) ;", "int max Num = NUM_ ;", "if ( calc Log Prob ( max Num , lambda ) > log Prob Threshold ) {", "return STR_ ; }", "int min Num = NUM_ ;", "while ( min Num < max Num ) {", "final int mid Num = ( max Num + min Num ) / NUM_ ;", "final boolean pass Threshold = calc Log Prob ( mid Num , lambda ) <= log Prob Threshold ;", "if ( pass Threshold ) {", "max Num = mid Num ; }", "else {", "if ( mid Num == min Num ) {", "break ; }", "min Num = mid Num ; } }", "return Integer . to String ( max Num ) ; }"]}
{"ids": "84534", "code": ["private static Type [ ] unroll Bounds ( final Map < Type Variable < ? > , Type > type Arguments , final Type [ ] bounds ) {", "Type [ ] result = bounds ;", "int i = NUM_ ;", "for ( ; i < result . length ; i ++ ) {", "final Type unrolled = unroll Variables ( type Arguments , result [ i ] ) ;", "if ( unrolled == null ) {", "result = Array Utils . remove ( result , i -- ) ; }", "else {", "result [ i ] = unrolled ; } }", "return result ; }"]}
{"ids": "22433", "code": ["public void delete Quota ( String id ) throws Isilon Exception {", "delete ( base Url . resolve ( URI QUOTAS ) , id , STR_ ) ; }"]}
{"ids": "28423", "code": ["public static Map < String , String > create Basic Auth Header ( String username , String password , Map < String , String > header Map ) {", "if ( header Map == null ) header Map = new Hash Map < > ( ) ;", "String credentials = username + STR_ + password ;", "String base 64 Encoded Credentials = Base 64 . encode To String ( credentials . get Bytes ( ) , Base 64 . NO WRAP ) ;", "header Map . put ( STR_ , STR_ + base 64 Encoded Credentials ) ;", "return header Map ; }"]}
{"ids": "20221", "code": ["private void add Extent Entry ( ) {", "extent Model . add New Entry ( ) ;", "remove Extent Button . set Enabled ( false ) ; }"]}
{"ids": "69770", "code": ["private Transport Network check Cached ( String network Id ) {", "try {", "String filename = network Id + STR_ + R 5 Version . version + STR_ ;", "File cache Location = new File ( cache Dir , network Id + STR_ + R 5 Version . version + STR_ ) ;", "if ( cache Location . exists ( ) ) LOG . info ( STR_ , cache Location ) ;", "else {", "LOG . info ( STR_ , cache Location ) ;", "if ( source Bucket != null ) {", "LOG . info ( STR_ ) ;", "S 3 Object tn ;", "try {", "tn = s 3 . get Object ( source Bucket , filename ) ; }", "catch ( Amazon Service Exception ex ) {", "LOG . info ( STR_ ) ;", "return null ; }", "cache Dir . mkdirs ( ) ;", "LOG . info ( STR_ , cache Location ) ;", "File Output Stream fos = new File Output Stream ( cache Location ) ;", "Input Stream is = tn . get Object Content ( ) ;", "try {", "Byte Streams . copy ( is , fos ) ; }", "finally {", "is . close ( ) ;", "fos . close ( ) ; } }", "else {", "LOG . info ( STR_ ) ;", "return null ; } }", "LOG . info ( STR_ , cache Location ) ;", "File Input Stream fis = new File Input Stream ( cache Location ) ;", "try {", "return Transport Network . read ( fis ) ; }", "finally {", "fis . close ( ) ; } }", "catch ( Exception e ) {", "LOG . error ( STR_ , e ) ;", "return null ; } }"]}
{"ids": "74109", "code": ["void read File ( File file ) throws org . jdom 2 . JDOM Exception , java . io . IO Exception {", "Xml File xf = new Xml File ( ) { } ;", "xf . root From File ( file ) ; }"]}
{"ids": "6416", "code": ["protected void execute ( Runnable evt ) {", "executor . execute ( evt ) ; }"]}
{"ids": "25429", "code": ["private void send Next Message Over Network ( ) throws Exception {", "Raw Data raw = outgoing . take ( ) ;", "if ( raw == null ) throw new Null Pointer Exception ( ) ;", "send Next ( raw ) ; }"]}
{"ids": "81488", "code": ["public void add Attribute For ( final Field field ) {", "field To Use As Attribute . add ( field ) ; }"]}
{"ids": "79729", "code": ["public boolean is Session Token ( String token ) {", "synchronized ( session Tokens ) {", "return session Tokens . contains ( token ) ; } }"]}
{"ids": "62660", "code": ["public static double root Means Squared Error ( double [ ] real , double [ ] predicted ) {", "double ret = NUM_ ;", "for ( int i = NUM_ ; i < real . length ; i ++ ) {", "ret += Math . pow ( ( real [ i ] - predicted [ i ] ) , NUM_ ) ; }", "return Math . sqrt ( ret / real . length ) ; }"]}
{"ids": "59629", "code": ["public void export ( Byte Buffer buf ) {", "buf . put Int ( seq Id ) ;", "if ( info . is Row Block Enabled ( ) ) buf . put Int ( n Rows ) ;", "export ( primary Key , buf ) ;", "for ( Byte Array cb : cell Blocks ) {", "export ( cb , buf ) ; } }"]}
{"ids": "30394", "code": ["private Hash Map < String , Object > create Acc Detailmap ( String glcode , Big Decimal debit Amount , Big Decimal credit Amount ) {", "Hash Map < String , Object > accountdetailmap = new Hash Map < String , Object > ( ) ;", "accountdetailmap . put ( Voucher Constant . GLCODE , glcode ) ;", "accountdetailmap . put ( Voucher Constant . DEBITAMOUNT , debit Amount ) ;", "accountdetailmap . put ( Voucher Constant . CREDITAMOUNT , credit Amount ) ;", "accountdetailmap . put ( Voucher Constant . FUNCTIONCODE , get Functionary Code ( ) ) ;", "return accountdetailmap ; }"]}
{"ids": "38325", "code": ["private void update Radio Links ( ) {", "m advance Data Set First . set Enabled ( m Generator Property Panel . get Editor Active ( ) ) ;", "m advance Iterator First . set Enabled ( m Generator Property Panel . get Editor Active ( ) ) ;", "if ( m Exp != null ) {", "if ( ! m Generator Property Panel . get Editor Active ( ) ) {", "m Exp . set Advance Data Set First ( true ) ; }", "else {", "m Exp . set Advance Data Set First ( m advance Data Set First . is Selected ( ) ) ; } } }"]}
{"ids": "42061", "code": ["public static byte [ ] select ( String app Id , String suffix ) {", "String cardlet Aid = FIDESMO AID PREFIX + app Id + suffix ;", "return select ( cardlet Aid ) ; }"]}
{"ids": "51850", "code": ["public List < Properties > find Available Properties ( String uri ) throws IO Exception {", "resources Not Loaded . clear ( ) ;", "String fulluri = path + uri ;", "List < Properties > properties = new Array List < > ( ) ;", "Enumeration < URL > resources = get Resources ( fulluri ) ;", "while ( resources . has More Elements ( ) ) {", "URL url = resources . next Element ( ) ;", "try {", "Properties props = load Properties ( url ) ;", "properties . add ( props ) ; }", "catch ( Exception not Available ) {", "resources Not Loaded . add ( url . to External Form ( ) ) ; } }", "return properties ; }"]}
{"ids": "35313", "code": ["void internal Add Root Entry ( Project Comparison Entry entry ) {", "entries . add ( entry ) ; }"]}
{"ids": "70746", "code": ["public static Source from URL ( URL url , Charset cs ) throws IO Exception {", "URI uri ;", "try {", "uri = url . to URI ( ) ; }", "catch ( URI Syntax Exception e ) {", "throw new IO Exception ( STR_ , e ) ; }", "try ( Input Stream is = url . open Stream ( ) ) {", "return from Stream ( is , uri , cs ) ; } }"]}
{"ids": "66838", "code": ["public RE extract RE ( ) throws Interrupted Exception {", "arden ( ) ;", "if ( ! coeffs . is Empty ( ) ) {", "throw new Runtime Exception ( STR_ ) ; }", "return union R Es ( terms ) ; }"]}
{"ids": "14588", "code": ["public void add Result ( AM Identity id , Map attrs ) {", "search Results . add ( id ) ;", "results Map . put ( id , attrs ) ; }"]}
{"ids": "60306", "code": ["public < T extends Intention Action & Local Quick Fix > void register Batch Fix ( @ Not Null T fix , @ Nullable Text Range range , @ Nullable final Highlight Display Key key ) {", "if ( range == null ) {", "range = new Text Range ( my Start Offset , my End Offset ) ; }", "if ( my Batch Fixes == null ) {", "my Batch Fixes = new Array List < Quick Fix Info > ( ) ; }", "my Batch Fixes . add ( new Quick Fix Info ( fix , range , key ) ) ; }"]}
{"ids": "33219", "code": ["protected void create File ( Zip Entry entry ) {", "I Path pathname = new Path ( entry . get Name ( ) ) ;", "Zip Entry parent ;", "if ( pathname . segment Count ( ) == NUM_ ) {", "parent = root ; }", "else {", "parent = ( Zip Entry ) directory Entry Cache . get ( pathname . remove Last Segments ( NUM_ ) ) ; }", "add To Children ( parent , entry ) ; }"]}
{"ids": "35219", "code": ["@ Override public String dump Window Hierarchy ( boolean compressed ) {", "device . set Compressed Layout Heirarchy ( compressed ) ;", "try {", "Byte Array Output Stream os = new Byte Array Output Stream ( ) ;", "device . dump Window Hierarchy ( os ) ;", "os . close ( ) ;", "return os . to String ( STR_ ) ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "device . set Compressed Layout Heirarchy ( false ) ; }", "return null ; }"]}
{"ids": "68906", "code": ["public void register Observer ( Rule Changes Observer observer ) {", "observers . add ( observer ) ; }"]}
{"ids": "3896", "code": ["private void send Update Heartbeats ( ) {", "Heartbeat Service Local heartbeat = bartender . get Heartbeat Local ( ) ;", "if ( heartbeat != null ) {", "heartbeat . update Heartbeats ( ) ; } }"]}
{"ids": "70030", "code": ["public SSL Engine init Ssl Engine ( boolean client ) throws Exception {", "Key Store key Store = load Keystore ( properties . ssl Key Store Path ( ) , properties . ssl Key Store Password ( ) ) ;", "Key Manager Factory key Manager Factory = Key Manager Factory . get Instance ( Key Manager Factory . get Default Algorithm ( ) ) ;", "key Manager Factory . init ( key Store , key Store Key Pass ( properties ) ) ;", "Key Store trust Store ;", "if ( properties . ssl Trust Store Path ( ) != null ) {", "LOGGER . debug ( STR_ ) ;", "trust Store = load Keystore ( properties . ssl Trust Store Path ( ) , properties . ssl Trust Store Password ( ) ) ; }", "else {", "trust Store = key Store ;", "LOGGER . debug ( STR_ ) ; }", "Trust Manager Factory trust Manager Factory = Trust Manager Factory . get Instance ( Trust Manager Factory . get Default Algorithm ( ) ) ;", "trust Manager Factory . init ( trust Store ) ;", "Key Manager [ ] key Managers = key Manager Factory . get Key Managers ( ) ;", "Trust Manager [ ] trust Managers = trust Manager Factory . get Trust Managers ( ) ;", "SSL Context ssl Context = SSL Context . get Instance ( STR_ ) ;", "ssl Context . init ( key Managers , trust Managers , null ) ;", "SSL Engine ssl Engine = ssl Context . create SSL Engine ( ) ;", "ssl Engine . set Use Client Mode ( client ) ;", "ssl Engine . set Want Client Auth ( true ) ;", "ssl Engine . set Enabled Protocols ( ssl Engine . get Supported Protocols ( ) ) ;", "ssl Engine . set Enabled Cipher Suites ( ssl Engine . get Supported Cipher Suites ( ) ) ;", "ssl Engine . set Enable Session Creation ( true ) ;", "return ssl Engine ; }"]}
{"ids": "85251", "code": ["public Get Buffered Random Access Source ( I Random Access Source source ) {", "this . source = source ;", "this . get Buffer = new byte [ ( int ) Math . min ( Math . max ( source . length ( ) / NUM_ , NUM_ ) , NUM_ ) ] ;", "this . get Buffer Start = - NUM_ ;", "this . get Buffer End = - NUM_ ; }"]}
{"ids": "11041", "code": ["public Arg Parser ( String p Name ) {", "program Name = p Name ;", "args = new Vector ( ) ;", "args . add ( new Help Arg ( ) ) ; }"]}
{"ids": "38671", "code": ["public static void save X Stream ( File save To , Object model , Instances header ) throws Exception {", "Vector < Object > v = new Vector < Object > ( ) ;", "v . add ( model ) ;", "if ( header != null ) {", "v . add ( header ) ; }", "v . trim To Size ( ) ;", "X Stream . write ( save To . get Absolute Path ( ) , v ) ; }"]}
{"ids": "48497", "code": ["private void sort And Collapse ( ) {", "Collections . sort ( m Spans ) ;", "m Adds Since Sort = NUM_ ;", "Iterator iter = m Spans . iterator ( ) ;", "Span span = null ;", "if ( iter . has Next ( ) ) {", "span = ( Span ) iter . next ( ) ; }", "while ( iter . has Next ( ) ) {", "Span next Span = ( Span ) iter . next ( ) ;", "if ( span . subsume ( next Span ) ) {", "iter . remove ( ) ; }", "else {", "span = next Span ; } } }"]}
{"ids": "52930", "code": ["public int split Randomly ( Array Modifiable DBI Ds ind , int begin , int end , Double Data Store tpro , Random rand ) {", "final int nele = end - begin ;", "DBID Array Iter it = ind . iter ( ) ;", "double rs = tpro . double Value ( it . seek ( begin + rand . next Int ( nele ) ) ) ;", "int min Ind = begin , max Ind = end - NUM_ ;", "while ( min Ind < max Ind ) {", "double curr Ele = tpro . double Value ( it . seek ( min Ind ) ) ;", "if ( curr Ele > rs ) {", "while ( min Ind < max Ind && tpro . double Value ( it . seek ( max Ind ) ) > rs ) {", "max Ind -- ; }", "if ( min Ind == max Ind ) {", "break ; }", "ind . swap ( min Ind , max Ind ) ;", "max Ind -- ; }", "min Ind ++ ; }", "if ( min Ind == end - NUM_ ) {", "min Ind = ( begin + end ) > > > NUM_ ; }", "return min Ind ; }"]}
{"ids": "15383", "code": ["public Login Configuration force Auth ( String force Auth Req Param ) {", "force Auth = Boolean . parse Boolean ( force Auth Req Param ) ;", "return this ; }"]}
{"ids": "19892", "code": ["@ Method Desc ( description = STR_ , usage = STR_ ) public void stop ( ) throws Exception {", "try {", "handle Event Synchronous ( new Stop Event ( ) ) ;", "if ( done Latch != null ) {", "done Latch . count Down ( ) ; } }", "catch ( Exception e ) {", "logger . error ( STR_ , e ) ;", "throw new Exception ( e . to String ( ) ) ; } }"]}
{"ids": "50435", "code": ["public String link For Message ( Proto Element element ) {", "if ( is External File ( element . get File ( ) ) ) {", "String full Name = element . get Full Name ( ) ;", "return String . format ( STR_ , full Name , full Name ) ; }", "else {", "String simple Name = element . get Simple Name ( ) ;", "return String . format ( STR_ , simple Name , simple Name ) ; } }"]}
{"ids": "4888", "code": ["public static < T > Array List < T > read ( Input Stream file Stream , String charset Name , I Transformer < String , T > transformer ) throws File Not Found Exception {", "Scanner scanner = new Scanner ( file Stream , charset Name ) ;", "Array List < T > list = new Array List < > ( ) ;", "while ( scanner . has Next Line ( ) ) {", "String line = scanner . next Line ( ) ;", "list . add ( transformer . transform ( line ) ) ; }", "scanner . close ( ) ;", "return list ; }"]}
{"ids": "28559", "code": ["public boolean remove ( Json Element element ) {", "return elements . remove ( element ) ; }"]}
{"ids": "69604", "code": ["public T Sink < byte [ ] > send Bytes ( T Stream < byte [ ] > stream ) {", "Objects . require Non Null ( stream , STR_ ) ;", "return send Binary ( stream , null ) ; }"]}
{"ids": "64299", "code": ["private void sort Broker Items ( Broker Item [ ] broker Items , int sort Type ) {", "Arrays . sort ( broker Items , Broker Item . get Comparatory By Type ( sort Type ) ) ; }"]}
{"ids": "14159", "code": ["protected boolean need To Escape XML Special Characters ( String host Entity ID , String remote Entity ID , String realm ) {", "return true ; }"]}
{"ids": "76324", "code": ["private void update Path Constraints ( Test Chromosome test ) {", "List < Branch Condition > path Condition = Concolic Execution . get Symbolic Path ( test ) ;", "path Conditions . put ( test , path Condition ) ; }"]}
{"ids": "31948", "code": ["public static boolean p 2 p Loader ( Class Loader ldr ) {", "return ldr instanceof Grid Deployment Info ; }"]}
{"ids": "44424", "code": ["private static String remove Sub Trailers ( String decoded Subject ) {", "int sub String Start = NUM_ ;", "int sub String End = decoded Subject . length ( ) ;", "int original Size = decoded Subject . length ( ) ;", "int cur Pos = original Size - NUM_ ;", "while ( true ) {", "char c = decoded Subject . char At ( cur Pos -- ) ;", "if ( c == WS ) {", "sub String End -- ; }", "else {", "if ( sub String End > FWD PARENS . length ( ) && decoded Subject . ends With ( FWD PARENS ) ) {", "sub String End -= FWD PARENS . length ( ) ; }", "break ; } }", "decoded Subject = decoded Subject . substring ( sub String Start , sub String End ) ;", "return decoded Subject ; }"]}
{"ids": "86813", "code": ["boolean next Source ( ) throws IO Exception {", "if ( m Source It . has Next ( ) ) {", "final Input Stream is = m Source It . next ( ) ;", "if ( is == null ) {", "m Source = null ;", "return false ; }", "else {", "m Source = new Buffered Input Stream ( is , File Utils . BUFFERED STREAM SIZE ) ; }", "m Source Closed = false ;", "m Input Buffer Position = NUM_ ;", "m Input Buffer Length = NUM_ ;", "m Buffer Length = NUM_ ;", "m Buffer Position = NUM_ ;", "return true ; }", "if ( m Source != null ) {", "m Source . close ( ) ; }", "m Source = null ;", "return false ; }"]}
{"ids": "40065", "code": ["public static byte [ ] bitmap To Bytes ( Bitmap bm ) {", "byte [ ] bytes = null ;", "if ( bm != null ) {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "bm . compress ( Bitmap . Compress Format . PNG , NUM_ , baos ) ;", "bytes = baos . to Byte Array ( ) ; }", "return bytes ; }"]}
{"ids": "67663", "code": ["public static String inflate ( String name ) {", "return inflate ( name , g Prefix ) ; }"]}
{"ids": "40616", "code": ["private void write Attr ( String name , String val ) throws IO Exception {", "write Attr ( name , val , true ) ; }"]}
{"ids": "46206", "code": ["final private String syntax Def 2 Syntax Desc ( Attributes attrs ) throws Naming Exception {", "String Buffer syntax Desc = new String Buffer ( STR_ ) ;", "Attribute attr = null ;", "int count = NUM_ ;", "attr = attrs . get ( NUMERICOID ID ) ;", "if ( attr != null ) {", "syntax Desc . append ( write Numeric OID ( attr ) ) ;", "count ++ ; }", "else {", "throw new Configuration Exception ( STR_ + STR_ ) ; }", "attr = attrs . get ( DESC ID ) ;", "if ( attr != null ) {", "syntax Desc . append ( write QD String ( attr ) ) ;", "count ++ ; }", "if ( count < attrs . size ( ) ) {", "String attr Id = null ;", "for ( Naming Enumeration < ? extends Attribute > ae = attrs . get All ( ) ; ae . has More Elements ( ) ; ) {", "attr = ae . next ( ) ;", "attr Id = attr . get ID ( ) ;", "if ( attr Id . equals ( NUMERICOID ID ) || attr Id . equals ( DESC ID ) ) {", "continue ; }", "else {", "syntax Desc . append ( write QD Strings ( attr ) ) ; } } }", "syntax Desc . append ( STR_ ) ;", "return syntax Desc . to String ( ) ; }"]}
{"ids": "3634", "code": ["@ Override public void write ( Buffer buffer , boolean is End ) throws IO Exception {", "if ( s == null ) {", "buffer . free ( ) ;", "return ; }", "try {", "needs Flush = true ;", "if ( buffer . is Direct ( ) ) {", "total Write Bytes += buffer . length ( ) ;", "s . write ( buffer . direct ( ) ) ;", "return ; }", "total Write Bytes += buffer . length ( ) ;", "while ( buffer . length ( ) > NUM_ ) {", "write Buffer . clear ( ) ;", "buffer . read ( write Buffer ) ;", "write Buffer . flip ( ) ;", "s . write ( write Buffer ) ; } }", "catch ( IO Exception e ) {", "IO Exception exn = Client Disconnect Exception . create ( this + STR_ + e , e ) ;", "try {", "close ( ) ; }", "catch ( IO Exception e 1 ) { }", "throw exn ; }", "finally {", "buffer . free ( ) ; } }"]}
{"ids": "7173", "code": ["protected void recursive Nested Join ( Event Bean lookup Event , int nesting Order Index , Event Bean [ ] current Path , Collection < Event Bean [ ] > result , Expr Evaluator Context expr Evaluator Context ) {", "List < Event Bean [ ] > nested Result = new Linked List < Event Bean [ ] > ( ) ;", "Exec Node nested Exec Node = child Nodes . get ( nesting Order Index ) ;", "nested Exec Node . process ( lookup Event , current Path , nested Result , expr Evaluator Context ) ;", "boolean is Last Stream = ( nesting Order Index == nesting Order Length - NUM_ ) ;", "if ( ! is Last Stream ) {", "for ( Event Bean [ ] row : nested Result ) {", "Event Bean lookup = row [ nested Streams [ nesting Order Index ] ] ;", "recursive Nested Join ( lookup , nesting Order Index + NUM_ , row , result , expr Evaluator Context ) ; }", "return ; }", "for ( Event Bean [ ] row : nested Result ) {", "result . add ( row ) ; } }"]}
{"ids": "83402", "code": ["public String generate Minimal MAT Sim Config ( ) {", "Config config = new Config ( ) ;", "Config Group ippcm = config . create Module ( Matrix Based Pt Router Config Group . GROUP NAME ) ;", "ippcm . add Param ( Matrix Based Pt Router Config Group . PT STOPS , this . pt Stops ) ;", "ippcm . add Param ( Matrix Based Pt Router Config Group . USING PT STOPS , STR_ ) ;", "ippcm . add Param ( Matrix Based Pt Router Config Group . PT TRAVEL TIMES AND DISTANCES SWITCH , this . use Travel Times And Distances ) ;", "Change Mode Config Group change Mode Config = Config Utils . add Or Get Module ( config , Change Mode Config Group . CONFIG MODULE , Change Mode Config Group . class ) ;", "String [ ] str = { STR_ , STR_ } ;", "change Mode Config . set Modes ( str ) ;", "return write Config File ( config ) ; }"]}
{"ids": "46416", "code": ["private int convert Location To Column ( int x , int y ) {", "if ( cell Width > NUM_ ) {", "if ( layout Orientation == J List . VERTICAL ) {", "return NUM_ ; }", "Insets insets = list . get Insets ( ) ;", "int col ;", "if ( is Left To Right ) {", "col = ( x - insets . left ) / cell Width ; }", "else {", "col = ( list . get Width ( ) - x - insets . right - NUM_ ) / cell Width ; }", "if ( col < NUM_ ) {", "return NUM_ ; }", "else if ( col >= column Count ) {", "return column Count - NUM_ ; }", "return col ; }", "return NUM_ ; }"]}
{"ids": "85025", "code": ["public static List < File > find Files In Dir ( File directory , Filename Filter filter ) {", "Vector < File > files = new Vector < File > ( ) ;", "File [ ] entries = directory . list Files ( ) ;", "for ( File entry : entries ) {", "if ( filter == null || filter . accept ( directory , entry . get Name ( ) ) ) {", "files . add ( entry ) ; }", "if ( entry . is Directory ( ) ) {", "files . add All ( find Files In Dir ( entry , filter ) ) ; } }", "return files ; }"]}
{"ids": "78428", "code": ["public String generate Drop ( String table ) {", "String Buffer result = new String Buffer ( ) ;", "result . append ( STR_ ) ;", "result . append ( table ) ;", "result . append ( STR_ ) ;", "return result . to String ( ) ; }"]}
{"ids": "80990", "code": ["private void register Child Listeners ( ) {", "Iterator < Property Change Listener > iter = f Child Listeners . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Property Change Listener listener = iter . next ( ) ;", "listener . register ( ) ; } }"]}
{"ids": "52485", "code": ["private void refresh Index For Dimension Fields ( String row Id , Dimension Row dimension Row , Dimension Row dimension Row Old ) {", "try {", "for ( Dimension Field field : dimension . get Dimension Fields ( ) ) {", "if ( field == dimension . get Key ( ) ) {", "continue ; }", "if ( dimension Row Old != null ) {", "String old Row Value = dimension Row Old . get ( field ) ;", "String old Row Value Key = Dimension Store Key Utils . get Row Key ( field . get Name ( ) , old Row Value ) ;", "String old Row Values Keys Json = key Value Store . get ( old Row Value Key ) ;", "String [ ] old Row Value S Keys = object Mapper . read Value ( old Row Values Keys Json , String [ ] . class ) ;", "Set < String > old Row Values Key Set = new Linked Hash Set < > ( Arrays . as List ( old Row Value S Keys ) ) ;", "old Row Values Key Set . remove ( row Id ) ;", "if ( old Row Values Key Set . is Empty ( ) ) {", "key Value Store . remove ( old Row Value Key ) ; }", "else {", "String updated Old Row Value S Keys = object Mapper . write Value As String ( old Row Values Key Set ) ;", "key Value Store . put ( old Row Value Key , updated Old Row Value S Keys ) ; } }", "String row Value = dimension Row . get ( field ) ;", "String row Value Key = Dimension Store Key Utils . get Row Key ( field . get Name ( ) , row Value ) ;", "String row Value S Keys = key Value Store . get ( row Value Key ) ;", "Set < String > row Value S Key Set = new Linked Hash Set < > ( ) ;", "if ( row Value S Keys != null ) {", "row Value S Key Set . add All ( Arrays . as List ( object Mapper . read Value ( row Value S Keys , String [ ] . class ) ) ) ; }", "row Value S Key Set . add ( row Id ) ;", "String updated Row Value S Keys = object Mapper . write Value As String ( row Value S Key Set ) ;", "key Value Store . put ( row Value Key , updated Row Value S Keys ) ; } }", "catch ( IO Exception e ) {", "LOG . error ( STR_ , e ) ;", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "67462", "code": ["public List < Instruction > reduce Instructions ( final List < Instruction > instructions ) {", "lock . lock ( ) ;", "try {", "this . instructions = instructions ;", "stack Size Simulator . build Stack Sizes ( instructions ) ;", "return reduce Instructions Internal ( instructions ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "32110", "code": ["protected boolean is Locked Locally ( UUID new Owner ID ) {", "return this Node . equals ( get Owner Node ( ) ) || this Node . equals ( new Owner ID ) ; }"]}
{"ids": "11144", "code": ["public void delete Point ( int position ) {", "int render Type = poly . get Render Type ( ) ;", "Projection proj = get Projection ( ) ;", "boolean need To Hook Up = false ;", "if ( position <= NUM_ && is Enclosed ( ) ) {", "enclose ( false ) ;", "need To Hook Up = true ; }", "if ( render Type == OM Graphic . RENDERTYPE LATLON ) {", "Debug . message ( STR_ , STR_ ) ;", "if ( proj != null ) {", "double [ ] ll = poly . get Lat Lon Array ( ) ;", "double [ ] newll = new double [ ll . length - NUM_ ] ;", "int actual Position = ( position == Integer . MAX VALUE ? ll . length : position * NUM_ ) ;", "if ( actual Position >= ll . length ) {", "System . arraycopy ( ll , NUM_ , newll , NUM_ , ll . length - NUM_ ) ;", "position = ( ll . length - NUM_ ) / NUM_ ; }", "else if ( actual Position <= NUM_ ) {", "System . arraycopy ( ll , NUM_ , newll , NUM_ , ll . length - NUM_ ) ;", "position = NUM_ ; }", "else {", "System . arraycopy ( ll , NUM_ , newll , NUM_ , actual Position ) ;", "System . arraycopy ( ll , actual Position + NUM_ , newll , actual Position , ll . length - actual Position - NUM_ ) ; }", "poly . set Location ( newll , poly . get Units ( ) ) ; } }", "else {", "Debug . message ( STR_ , STR_ ) ;", "int current Length = poly . xs . length ;", "int [ ] newxs = new int [ current Length - NUM_ ] ;", "int [ ] newys = new int [ current Length - NUM_ ] ;", "if ( position >= current Length ) {", "System . arraycopy ( poly . xs , NUM_ , newxs , NUM_ , current Length - NUM_ ) ;", "System . arraycopy ( poly . ys , NUM_ , newys , NUM_ , current Length - NUM_ ) ;", "position = current Length - NUM_ ; }", "else if ( position <= NUM_ ) {", "System . arraycopy ( poly . xs , NUM_ , newxs , NUM_ , current Length - NUM_ ) ;", "System . arraycopy ( poly . ys , NUM_ , newys , NUM_ , current Length - NUM_ ) ;", "position = NUM_ ; }", "else {", "System . arraycopy ( poly . xs , NUM_ , newxs , NUM_ , position ) ;", "System . arraycopy ( poly . xs , position + NUM_ , newxs , position , current Length - position - NUM_ ) ;", "System . arraycopy ( poly . ys , NUM_ , newys , NUM_ , position ) ;", "System . arraycopy ( poly . ys , position + NUM_ , newys , position , current Length - position - NUM_ ) ; }", "if ( poly . get Render Type ( ) == OM Graphic . RENDERTYPE OFFSET ) {", "poly . set Location ( poly . lat , poly . lon , poly . get Units ( ) , newxs , newys ) ; }", "else {", "poly . set Location ( newxs , newys ) ; } }", "if ( proj != null ) {", "poly . regenerate ( proj ) ; }", "Grab Point gp = ( Grab Point ) poly Grab Points . remove ( position ) ;", "if ( gpo != null && gp != null ) {", "gpo . remove Grab Point ( gp ) ; }", "if ( need To Hook Up ) {", "enclose ( true ) ; } }"]}
{"ids": "57315", "code": ["@ Override public boolean delete Left Word ( ) {", "m Input Connection . begin Batch Edit ( ) ;", "if ( m Input Connection . get Selected Text ( NUM_ ) != null ) {", "m Input Connection . commit Text ( STR_ , NUM_ ) ; }", "else {", "Char Sequence before Cursor = m Input Connection . get Text Before Cursor ( MAX DELETABLE CONTEXT , NUM_ ) ;", "if ( before Cursor != null ) {", "int before Cursor Length = before Cursor . length ( ) ;", "Matcher m = WHITESPACE AND TOKEN . matcher ( before Cursor ) ;", "int last Index = NUM_ ;", "while ( m . find ( ) ) {", "last Index = before Cursor Length == m . end ( ) ? m . start ( ) : m . end ( ) ; }", "if ( last Index > NUM_ ) {", "m Input Connection . delete Surrounding Text ( before Cursor Length - last Index , NUM_ ) ; }", "else if ( before Cursor Length < MAX DELETABLE CONTEXT ) {", "m Input Connection . delete Surrounding Text ( before Cursor Length , NUM_ ) ; } } }", "m Input Connection . end Batch Edit ( ) ;", "return true ; }"]}
{"ids": "52022", "code": ["public static Data Set read Continuous ( File file , char delimiter ) throws IO Exception {", "return read In Continuous Data ( file , delimiter , Collections . singleton ( STR_ ) ) ; }"]}
{"ids": "46645", "code": ["protected boolean are Paths Contiguous ( Tree Path [ ] paths ) {", "if ( row Mapper == null || paths . length < NUM_ ) return true ;", "else {", "Bit Set bit Set = new Bit Set ( NUM_ ) ;", "int an Index , counter , min ;", "int path Count = paths . length ;", "int valid Count = NUM_ ;", "Tree Path [ ] temp Path = new Tree Path [ NUM_ ] ;", "temp Path [ NUM_ ] = paths [ NUM_ ] ;", "min = row Mapper . get Rows For Paths ( temp Path ) [ NUM_ ] ;", "for ( counter = NUM_ ; counter < path Count ; counter ++ ) {", "if ( paths [ counter ] != null ) {", "temp Path [ NUM_ ] = paths [ counter ] ;", "int [ ] rows = row Mapper . get Rows For Paths ( temp Path ) ;", "if ( rows == null ) {", "return false ; }", "an Index = rows [ NUM_ ] ;", "if ( an Index == - NUM_ || an Index < ( min - path Count ) || an Index > ( min + path Count ) ) return false ;", "if ( an Index < min ) min = an Index ;", "if ( ! bit Set . get ( an Index ) ) {", "bit Set . set ( an Index ) ;", "valid Count ++ ; } } }", "int max Counter = valid Count + min ;", "for ( counter = min ; counter < max Counter ; counter ++ ) if ( ! bit Set . get ( counter ) ) return false ; }", "return true ; }"]}
{"ids": "82855", "code": ["static void update Style ( J Text Component c , Sea Glass Context context , String prefix ) {", "Sea Glass Style style = ( Sea Glass Style ) context . get Style ( ) ;", "Color color = c . get Caret Color ( ) ;", "if ( color == null || color instanceof UI Resource ) {", "c . set Caret Color ( ( Color ) style . get ( context , prefix + STR_ ) ) ; }", "Color fg = c . get Foreground ( ) ;", "if ( fg == null || fg instanceof UI Resource ) {", "fg = style . get Color For State ( context , Color Type . TEXT FOREGROUND ) ;", "if ( fg != null ) {", "c . set Foreground ( fg ) ; } }", "Object ar = style . get ( context , prefix + STR_ ) ;", "if ( ar instanceof Number ) {", "c . put Client Property ( STR_ , ar ) ; }", "context . set Component State ( SELECTED | FOCUSED ) ;", "Color s = c . get Selection Color ( ) ;", "if ( s == null || s instanceof UI Resource ) {", "c . set Selection Color ( style . get Color ( context , Color Type . TEXT BACKGROUND ) ) ; }", "Color sfg = c . get Selected Text Color ( ) ;", "if ( sfg == null || sfg instanceof UI Resource ) {", "c . set Selected Text Color ( style . get Color ( context , Color Type . TEXT FOREGROUND ) ) ; }", "context . set Component State ( DISABLED ) ;", "Color dfg = c . get Disabled Text Color ( ) ;", "if ( dfg == null || dfg instanceof UI Resource ) {", "c . set Disabled Text Color ( style . get Color ( context , Color Type . TEXT FOREGROUND ) ) ; }", "Insets margin = c . get Margin ( ) ;", "if ( margin == null || margin instanceof UI Resource ) {", "margin = ( Insets ) style . get ( context , prefix + STR_ ) ;", "if ( margin == null ) {", "margin = Sea Glass Look And Feel . EMPTY UIRESOURCE INSETS ; }", "c . set Margin ( margin ) ; }", "Caret caret = c . get Caret ( ) ;", "if ( caret instanceof UI Resource ) {", "Object o = style . get ( context , prefix + STR_ ) ;", "if ( o != null && o instanceof Integer ) {", "Integer rate = ( Integer ) o ;", "caret . set Blink Rate ( rate . int Value ( ) ) ; } } }"]}
{"ids": "65171", "code": ["@ Suppress Lint ( STR_ ) @ Override protected void on Measure ( int width Measure Spec , int height Measure Spec ) {", "int width Mode = Measure Spec . get Mode ( width Measure Spec ) ;", "int height Mode = Measure Spec . get Mode ( height Measure Spec ) ;", "int max Width = Measure Spec . get Size ( width Measure Spec ) ;", "int max Height = Measure Spec . get Size ( height Measure Spec ) ;", "if ( width Mode == Measure Spec . UNSPECIFIED ) max Width = Integer . MAX VALUE ;", "if ( height Mode == Measure Spec . UNSPECIFIED ) max Height = Integer . MAX VALUE ;", "int padding Left = get Padding Left ( ) ;", "int padding Top = get Padding Top ( ) ;", "int padding Right = get Padding Right ( ) ;", "int padding Bottom = get Padding Bottom ( ) ;", "int max Right Bound = max Width - padding Right ;", "int max Bottom Bound = max Height - padding Bottom ;", "int left ;", "int top ;", "int right ;", "int bottom ;", "int right Bound = padding Left ;", "int max Right No Padding = right Bound ;", "int bottom Bound ;", "int last Max Bottom = padding Top ;", "int max Bottom = last Max Bottom ;", "int child Width ;", "int child Height ;", "int line Start Index = NUM_ ;", "int line End Index = NUM_ ;", "rect List . clear ( ) ;", "int child Count = get Child Count ( ) ;", "for ( int index = NUM_ ; index < child Count ; index ++ ) {", "final View child = get Child At ( index ) ;", "child . measure ( Measure Spec . UNSPECIFIED , Measure Spec . UNSPECIFIED ) ;", "if ( child . get Visibility ( ) == View . GONE ) continue ;", "final Auto Wrap Layout . Layout Params lp = ( Auto Wrap Layout . Layout Params ) child . get Layout Params ( ) ;", "child Width = child . get Measured Width ( ) ;", "child Height = child . get Measured Height ( ) ;", "left = right Bound + lp . left Margin ;", "right = left + child Width ;", "right Bound = right + lp . right Margin ;", "if ( right Bound > max Right Bound ) {", "line End Index = index ;", "adjust Base Line ( max Bottom - last Max Bottom , line Start Index , line End Index ) ;", "if ( max Bottom >= max Bottom Bound ) break ;", "if ( line End Index == line Start Index ) {", "child . measure ( Measure Spec . make Measure Spec ( max Width - padding Left - padding Right - lp . left Margin - lp . right Margin , Measure Spec . AT MOST ) , Measure Spec . UNSPECIFIED ) ;", "child Width = child . get Measured Width ( ) ;", "child Height = child . get Measured Height ( ) ; }", "left = padding Left + lp . left Margin ;", "right = left + child Width ;", "right Bound = right + lp . right Margin ;", "last Max Bottom = max Bottom ;", "top = last Max Bottom + lp . top Margin ;", "bottom = top + child Height ;", "bottom Bound = bottom + lp . bottom Margin ;", "line Start Index = index ; }", "else {", "top = last Max Bottom + lp . top Margin ;", "bottom = top + child Height ;", "bottom Bound = bottom + lp . bottom Margin ; }", "if ( right Bound > max Right No Padding ) max Right No Padding = right Bound ;", "if ( bottom Bound > max Bottom ) max Bottom = bottom Bound ;", "Rect rect = new Rect ( ) ;", "rect . left = left ;", "rect . top = top ;", "rect . right = right ;", "rect . bottom = bottom ;", "rect List . add ( rect ) ; }", "adjust Base Line ( max Bottom - last Max Bottom , line Start Index , rect List . size ( ) ) ;", "int measured Width ;", "int measured Height ;", "if ( width Mode == Measure Spec . EXACTLY ) measured Width = max Width ;", "else measured Width = max Right No Padding + padding Right ;", "if ( height Mode == Measure Spec . EXACTLY ) measured Height = max Height ;", "else {", "measured Height = max Bottom + padding Bottom ;", "if ( height Mode == Measure Spec . AT MOST ) measured Height = measured Height > max Height ? max Height : measured Height ; }", "set Measured Dimension ( measured Width , measured Height ) ; }"]}
{"ids": "82457", "code": ["public final void wait ( ) throws java . lang . Interrupted Exception {", "wait ( NUM_ ) ; }"]}
{"ids": "56378", "code": ["public Query String Query Builder field ( String field , float boost ) {", "if ( fields == null ) {", "fields = new Array List < > ( ) ; }", "fields . add ( field ) ;", "if ( fields Boosts == null ) {", "fields Boosts = new Object Float Hash Map < > ( ) ; }", "fields Boosts . put ( field , boost ) ;", "return this ; }"]}
{"ids": "44388", "code": ["protected void init Stream Buffer Size ( ) {", "String stream Buffer Size Param = get Init Parameter ( STR_ ) ;", "set Stream Buffer Size ( ( stream Buffer Size Param == null ) ? DEFAULT STREAM BUFFER SIZE : Integer . parse Int ( stream Buffer Size Param ) ) ;", "if ( is Debug ( ) ) {", "log ( STR_ + get Stream Buffer Size ( ) ) ; } }"]}
{"ids": "53997", "code": ["public static Number as Number ( String value , Supplier < Number > default Value Provider ) {", "if ( value != null ) {", "try {", "return Short . value Of ( value ) ; }", "catch ( Number Format Exception e 1 ) {", "try {", "return Integer . value Of ( value ) ; }", "catch ( Number Format Exception e 2 ) {", "try {", "return Long . value Of ( value ) ; }", "catch ( Number Format Exception e 3 ) {", "try {", "return Float . value Of ( value ) ; }", "catch ( Number Format Exception e 4 ) {", "try {", "return Double . value Of ( value ) ; }", "catch ( Number Format Exception e 5 ) {", "try {", "return new Big Integer ( value ) ; }", "catch ( Number Format Exception e 6 ) {", "try {", "return new Big Decimal ( value ) ; }", "catch ( Number Format Exception e 7 ) { } } } } } } } }", "return default Value Provider != null ? default Value Provider . get ( ) : null ; }"]}
{"ids": "14344", "code": ["private String apply Replacement ( final Bidi Map replacement , String contents ) {", "for ( Object key : replacement . key Set ( ) ) {", "String attribute Name = ( String ) key ;", "String attribute Initials = ( String ) replacement . get ( key ) ;", "contents = contents . replace All ( JSON Serialisation . json Attribute Name ( attribute Name ) , JSON Serialisation . json Attribute Name ( attribute Initials ) ) ; }", "return contents ; }"]}
{"ids": "46328", "code": ["public Key Impl ( Kerberos Principal principal , char [ ] password , String algorithm ) {", "try {", "Principal Name princ = new Principal Name ( principal . get Name ( ) ) ;", "Encryption Key key = new Encryption Key ( password , princ . get Salt ( ) , algorithm ) ;", "this . key Bytes = key . get Bytes ( ) ;", "this . key Type = key . get E Type ( ) ; }", "catch ( Krb Exception e ) {", "throw new Illegal Argument Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "81347", "code": ["public static Annotation Binding [ ] add Standard Annotations ( Annotation Binding [ ] recorded Annotations , long annotation Tag Bits , Lookup Environment env ) {", "int count = NUM_ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Target MASK ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Retention MASK ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Deprecated ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Documented ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Inherited ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Override ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Suppress Warnings ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Polymorphic Signature ) != NUM_ ) count ++ ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Safe Varargs ) != NUM_ ) count ++ ;", "if ( count == NUM_ ) return recorded Annotations ;", "int index = recorded Annotations . length ;", "Annotation Binding [ ] result = new Annotation Binding [ index + count ] ;", "System . arraycopy ( recorded Annotations , NUM_ , result , NUM_ , index ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Target MASK ) != NUM_ ) result [ index ++ ] = build Target Annotation ( annotation Tag Bits , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Retention MASK ) != NUM_ ) result [ index ++ ] = build Retention Annotation ( annotation Tag Bits , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Deprecated ) != NUM_ ) result [ index ++ ] = build Marker Annotation ( Type Constants . JAVA LANG DEPRECATED , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Documented ) != NUM_ ) result [ index ++ ] = build Marker Annotation ( Type Constants . JAVA LANG ANNOTATION DOCUMENTED , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Inherited ) != NUM_ ) result [ index ++ ] = build Marker Annotation ( Type Constants . JAVA LANG ANNOTATION INHERITED , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Override ) != NUM_ ) result [ index ++ ] = build Marker Annotation ( Type Constants . JAVA LANG OVERRIDE , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Suppress Warnings ) != NUM_ ) result [ index ++ ] = build Marker Annotation ( Type Constants . JAVA LANG SUPPRESSWARNINGS , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Polymorphic Signature ) != NUM_ ) result [ index ++ ] = build Marker Annotation For Member Type ( Type Constants . JAVA LANG INVOKE METHODHANDLE $ POLYMORPHICSIGNATURE , env ) ;", "if ( ( annotation Tag Bits & Tag Bits . Annotation Safe Varargs ) != NUM_ ) result [ index ++ ] = build Marker Annotation ( Type Constants . JAVA LANG SAFEVARARGS , env ) ;", "return result ; }"]}
{"ids": "66743", "code": ["public static void process ( List < Packages > pkg List ) throws Exception {", "init ( ) ;", "String [ ] temps = templates . split ( STR_ ) ;", "String [ ] vm Files = new String [ temps . length ] ;", "for ( int i = NUM_ ; i < temps . length ; i ++ ) {", "vm Files [ i ] = temps [ i ] + STR_ ; }", "for ( Packages pkg : pkg List ) {", "for ( String vm File : vm Files ) {", "generator ( vm File , pkg ) ; } } }"]}
{"ids": "80294", "code": ["public boolean check ( final Direction dir , final boolean facing ) {", "if ( this . dir != dir ) {", "return false ; }", "if ( this . facing != facing ) {", "return false ; }", "final long now = System . current Time Millis ( ) ;", "if ( now >= expiration ) {", "return false ; }", "expiration = now + DELAY ;", "return true ; }"]}
{"ids": "31340", "code": ["private void parse ( String path ) throws Exception {", "if ( path != null ) {", "count = path . length ( ) ;", "data = new char [ count ] ;", "path . get Chars ( NUM_ , count , data , NUM_ ) ; }", "path ( ) ; }"]}
{"ids": "11958", "code": ["protected synchronized void read Dont Verify ( ) throws IO Exception , File Encryption Exception {", "if ( backing Random Access File . length ( ) < header Size ( ) ) {", "throw new File Encryption Exception ( STR_ ) ; }", "long oldpos = backing Random Access File . get File Pointer ( ) ;", "backing Random Access File . seek ( NUM_ ) ;", "byte [ ] header data = new byte [ header Size ( ) - File Header . AUTH TAG SIZE ] ;", "backing Random Access File . read ( header data ) ;", "backing Random Access File . seek ( oldpos ) ;", "Data Input Stream istream = new Data Input Stream ( new Byte Array Input Stream ( header data ) ) ;", "byte [ ] tmpmagic = new byte [ PANBOX FILE MAGIC . length ] ;", "istream . read ( tmpmagic ) ;", "if ( ! Arrays . equals ( tmpmagic , PANBOX FILE MAGIC ) ) {", "throw new File Encryption Exception ( STR_ ) ; }", "byte [ ] tmpversion = new byte [ PANBOX FILE VERSION . length ] ;", "istream . read ( tmpversion ) ;", "if ( ! Arrays . equals ( tmpversion , PANBOX FILE VERSION ) ) {", "throw new File Encryption Exception ( STR_ + PANBOX FILE VERSION . to String ( ) ) ; }", "this . share Key Version = istream . read Int ( ) ;", "istream . close ( ) ; }"]}
{"ids": "82178", "code": ["private boolean is Media Type Supported ( String media ) {", "for ( int i = NUM_ ; i < SUPPORTED MEDIA TYPES . length ; i ++ ) {", "if ( media . equals Ignore Case ( SUPPORTED MEDIA TYPES [ i ] ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "43270", "code": ["private void export dependencies ( J Cas jcas ) {", "dependencies = new Linked Hash Map < Token , List < Dependency > > ( ) ;", "List < Token > non Governed = new Array List < Token > ( nodes . key Set ( ) ) ;", "for ( Dependency dependency : select ( jcas , Dependency . class ) ) {", "Token governor = dependency . get Governor ( ) ;", "Token dependent = dependency . get Dependent ( ) ;", "List < Dependency > l = dependencies . get ( governor ) ;", "if ( l == null ) {", "dependencies . put ( governor , new Array List < Dependency > ( ) ) ;", "l = dependencies . get ( governor ) ; }", "l . add ( dependency ) ;", "non Governed . remove ( dependent ) ; }", "for ( Token t : non Governed ) {", "traverse Dependents ( t , STR_ , - NUM_ ) ;", "write To File ( STR_ , component Id , STR_ , STR_ , STR_ ) ;", "component Id ++ ; } }"]}
{"ids": "76939", "code": ["public static String random Regexpish String ( Random r ) {", "return random Regexpish String ( r , NUM_ ) ; }"]}
{"ids": "56896", "code": ["public List < Expected Partition Value Entity > create Expected Partition Value Entities ( String partition Key Group Name , List < String > expected Partition Values ) {", "Partition Key Group Entity partition Key Group Entity = partition Key Group Dao . get Partition Key Group By Name ( partition Key Group Name ) ;", "if ( partition Key Group Entity == null ) {", "partition Key Group Entity = partition Key Group Dao Test Helper . create Partition Key Group Entity ( partition Key Group Name ) ; }", "List < Expected Partition Value Entity > expected Partition Value Entities = new Array List < > ( ) ;", "for ( String expected Partition Value : expected Partition Values ) {", "Expected Partition Value Entity expected Partition Value Entity = new Expected Partition Value Entity ( ) ;", "expected Partition Value Entity . set Partition Key Group ( partition Key Group Entity ) ;", "expected Partition Value Entity . set Partition Value ( expected Partition Value ) ;", "expected Partition Value Entities . add ( expected Partition Value Dao . save And Refresh ( expected Partition Value Entity ) ) ; }", "return expected Partition Value Entities ; }"]}
{"ids": "60387", "code": ["public static Low Memory Watcher register ( @ Not Null Runnable runnable ) {", "return new Low Memory Watcher ( runnable ) ; }"]}
{"ids": "24980", "code": ["public static String format Long ( long number ) {", "return int Format . format ( number ) ; }"]}
{"ids": "63319", "code": ["public synchronized int copy Direct ( int page Id , Output Stream out ) throws IO Exception {", "byte [ ] buffer = new byte [ page Size ] ;", "if ( page Id >= page Count ) {", "return - NUM_ ; }", "file . seek ( ( long ) page Id << page Size Shift ) ;", "file . read Fully Direct ( buffer , NUM_ , page Size ) ;", "read Count ++ ;", "out . write ( buffer , NUM_ , page Size ) ;", "return page Id + NUM_ ; }"]}
{"ids": "24321", "code": ["private void assert Backup Status ( final Backup Status backup Status ) {", "Map < Distributed Member , Set < Persistent ID > > backup Map = backup Status . get Backed Up Disk Stores ( ) ;", "assert False ( backup Map . is Empty ( ) ) ;", "for ( Distributed Member member : backup Map . key Set ( ) ) {", "for ( Persistent ID id : backup Map . get ( member ) ) {", "assert Not Null ( id . get Host ( ) ) ;", "assert Not Null ( id . get UUID ( ) ) ;", "assert Not Null ( id . get Directory ( ) ) ; } } }"]}
{"ids": "40144", "code": ["public synchronized void check State ( State ... required States ) throws Illegal State Exception {", "for ( State required State : required States ) {", "if ( required State . equals ( current State ) ) {", "return ; } }", "throw new Illegal State Exception ( String . format ( Locale . US , STR_ , Lists . new Array List ( required States ) , current State ) ) ; }"]}
{"ids": "16864", "code": ["public void sort Movies ( ) {", "synchronized ( movies ) {", "Utils . sort List ( movies , MOVIE SET COMPARATOR ) ;", "movie Ids . clear ( ) ;", "for ( Movie movie : movies ) {", "movie Ids . add ( movie . get Db Id ( ) ) ; } }", "fire Property Change ( STR_ , null , movies ) ; }"]}
{"ids": "30408", "code": ["public Key Value List Parser ( String pair Delimiter Regex , String key Val Delimiter Regex ) {", "pair Delimiter = Pattern . compile ( pair Delimiter Regex ) ;", "key Val Delimiter = Pattern . compile ( key Val Delimiter Regex ) ; }"]}
{"ids": "4241", "code": ["private synchronized boolean poll Stats Broker ( Destination queue ) {", "stats Message Listener . set Destination ( queue ) ;", "Timestamp timestamp = new Timestamp ( System . current Time Millis ( ) ) ;", "LOGGER . debug ( STR_ + get Queue Name ( queue ) + STR_ + timestamp ) ;", "jms Template . execute ( STATS BROKER DESTINATION + get Queue Name ( queue ) , new Producer Callback Impl ( stats Queue ) ) ;", "try {", "Thread . sleep ( NUM_ * NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "e . print Stack Trace ( ) ; }", "return stats Message Listener . get Stats ( ) != null ; }"]}
{"ids": "39519", "code": ["public File make Acceptable ( File pathname ) {", "if ( accept ( pathname ) ) {", "return pathname ; }", "else {", "return new File ( pathname . get Path ( ) + STR_ + default Extension ) ; } }"]}
{"ids": "50434", "code": ["public String js Type Name ( Type Ref type Ref ) {", "switch ( type Ref . get Kind ( ) ) {", "case TYPE MESSAGE :", "return STR_ ;", "case TYPE ENUM :", "return STR_ ;", "default : {", "String name = PRIMITIVE TYPE NAMES . get ( type Ref . get Kind ( ) ) ;", "if ( ! Strings . is Null Or Empty ( name ) ) {", "return name ; }", "throw new Illegal Argument Exception ( STR_ + type Ref . get Kind ( ) ) ; } } }"]}
{"ids": "78321", "code": ["public State Machine create State Machine ( State Machine Definition state Machine Definition ) {", "final Map < Event Definition , Event Data > event Data Map = state Machine Definition . get Event Data Map ( ) ;", "Set < Event > all Events = create All Events ( event Data Map ) ;", "Set < State Definition > state Definitions = state Machine Definition . get States ( ) ;", "Set < State > states = new Hash Set < > ( ) ;", "for ( State Definition state Definition : state Definitions ) {", "State state = convert State Definition To State ( state Definition ) ;", "states . add ( state ) ; }", "State Machine state Machine = new State Machine ( state Machine Definition . get Version ( ) , state Machine Definition . get Name ( ) , state Machine Definition . get Description ( ) , states , state Machine Definition . get Correlation Id ( ) ) ;", "state Machines DAO . create ( state Machine ) ;", "for ( Event event : all Events ) {", "event . set State Machine Instance Id ( state Machine . get Id ( ) ) ;", "event Persistence Service . persist Event ( event ) ; }", "for ( State state : state Machine . get States ( ) ) {", "audit DAO . create ( new Audit Record ( state Machine . get Id ( ) , state . get Id ( ) , NUM_ , Status . initialized , null , null ) ) ; }", "return state Machine ; }"]}
{"ids": "11264", "code": ["public void dispose ( ) {", "clear Listeners ( ) ;", "if ( attributes != null ) {", "attributes . clear ( ) ; }", "removed ( null ) ; }"]}
{"ids": "69492", "code": ["public static terminal find ( String with name ) {", "if ( with name == null ) return null ;", "else return ( terminal ) all . get ( with name ) ; }"]}
{"ids": "74395", "code": ["public Layout Block create New Layout Block ( String system Name , String user Name ) {", "Layout Block block = null ;", "if ( user Name == null || user Name . equals ( STR_ ) ) {", "log . error ( STR_ ) ;", "return null ; }", "block = get By User Name ( user Name ) ;", "if ( block != null ) {", "return null ; }", "String s Name = STR_ ;", "if ( system Name == null ) {", "boolean found = true ;", "while ( found ) {", "s Name = STR_ + blk Num ;", "blk Num ++ ;", "block = get By System Name ( s Name ) ;", "if ( block == null ) {", "found = false ; } } }", "else {", "block = get By System Name ( ( system Name . to Upper Case ( ) ) ) ;", "if ( block != null ) {", "return null ; }", "s Name = system Name . to Upper Case ( ) ; }", "block = new Layout Block ( s Name , user Name ) ;", "register ( block ) ;", "return block ; }"]}
{"ids": "74741", "code": ["@ Override public void modify Nonstatic J Pedal Parameters ( final Map values ) throws Pdf Exception {", "options . set ( values ) ;", "if ( values . contains Key ( J Pedal Settings . DISPLAY BACKGROUND ) ) { } }"]}
{"ids": "33388", "code": ["public static String escape Regex ( final String regex ) {", "Matcher match = REGEX CHARS . matcher ( regex ) ;", "return match . replace All ( STR_ ) ; }"]}
{"ids": "63371", "code": ["private Value Geometry ( byte [ ] bytes , Geometry geometry ) {", "this . bytes = bytes ;", "this . geometry = geometry ;", "this . hash Code = Arrays . hash Code ( bytes ) ; }"]}
{"ids": "35582", "code": ["private void finish Common ( ) {", "if ( ! unknown Subjects . is Empty ( ) ) {", "if ( statements . is Empty ( ) && restored Statements . is Empty ( ) ) {", "throw new Bad Subject Exception ( unknown Subjects . key Set ( ) , uris ) ; }", "else {", "log . info ( STR_ , unknown Subjects . key Set ( ) , uris . entity Data ( ) , uris . entity ( ) ) ; } }", "if ( revision Id == null ) {", "throw new Contained Exception ( STR_ + statements ) ; }", "if ( last Modified == null ) {", "throw new Contained Exception ( STR_ + statements ) ; }", "for ( Pair < URI , Literal > data Statement : data Statements ) {", "statements . add ( new Statement Impl ( entity Uri Impl , data Statement . get Left ( ) , data Statement . get Right ( ) ) ) ; }", "statements . add All ( restored Statements ) ; }"]}
{"ids": "74877", "code": ["public static final void show GUI Message ( final String user message , final Buffered Image image , final String title ) {", "if ( image == null ) {", "return ; }", "final Image Panel display = new Image Panel ( image ) ;", "display . set Layout ( new Border Layout ( ) ) ;", "if ( user message != null ) {", "display . add ( new J Label ( user message ) , Border Layout . SOUTH ) ; }", "final int width = image . get Width ( ) ;", "final int height = image . get Height ( ) ;", "display . set Size ( new Dimension ( width + NUM_ , height + NUM_ ) ) ;", "J Option Pane . show Confirm Dialog ( content Pane , display , title , J Option Pane . DEFAULT OPTION , J Option Pane . PLAIN MESSAGE ) ; }"]}
{"ids": "72735", "code": ["@ Override public Path call ( ) throws Exception {", "final Set < File Visit Option > options ;", "if ( follow Links ) {", "options = Enum Set . of ( File Visit Option . FOLLOW LINKS ) ; }", "else {", "options = Enum Set . none Of ( File Visit Option . class ) ; }", "logger . info ( String . format ( STR_ , path ) ) ;", "try {", "Files . walk File Tree ( path , options , max Depth , this ) ; }", "catch ( IO Exception e ) {", "logger . log ( Level . SEVERE , String . format ( STR_ , path ) , e ) ;", "throw e ; }", "logger . info ( String . format ( STR_ , path ) ) ;", "return path ; }"]}
{"ids": "4483", "code": ["public static int read Int ( final JSON Array json Array , final int index , final boolean required , final boolean not Null ) throws JSON Exception {", "if ( required ) {", "return json Array . get Int ( index ) ; }", "if ( not Null && json Array . is Null ( index ) ) {", "throw new JSON Exception ( String . format ( Locale . US , NULL VALUE FORMAT ARRAY , index ) ) ; }", "int value = NUM_ ;", "if ( ! json Array . is Null ( index ) ) {", "value = json Array . get Int ( index ) ; }", "return value ; }"]}
{"ids": "56788", "code": ["private void validate Storage Policy Selection ( Storage Policy Selection storage Policy Selection ) {", "Assert . not Null ( storage Policy Selection , STR_ ) ;", "business Object Data Helper . validate Business Object Data Key ( storage Policy Selection . get Business Object Data Key ( ) , true , true ) ;", "storage Policy Helper . validate Storage Policy Key ( storage Policy Selection . get Storage Policy Key ( ) ) ;", "Assert . not Null ( storage Policy Selection . get Storage Policy Version ( ) , STR_ ) ; }"]}
{"ids": "3039", "code": ["public static Object to Array ( Collection < ? > collection , Class < ? > component Type ) {", "if ( component Type . is Primitive ( ) ) {", "Object array = Array . new Instance ( component Type , collection . size ( ) ) ;", "int index = NUM_ ;", "for ( Object value : collection ) {", "Array . set ( array , index ++ , value ) ; }", "return array ; }", "return collection . to Array ( ( Object [ ] ) Array . new Instance ( component Type , collection . size ( ) ) ) ; }"]}
{"ids": "49881", "code": ["Gradle Exception format Violations For ( Formatter formatter , List < File > problem Files ) throws IO Exception {", "return new Gradle Exception ( Diff Message Formatter . message For ( this , formatter , problem Files ) ) ; }"]}
{"ids": "65084", "code": ["public void label Distances ( Hypergraph < V , E > graph , V root ) {", "label Distances ( graph , Collections . singleton ( root ) ) ; }"]}
{"ids": "24489", "code": ["public int position ( ) {", "return line Buffer == null ? NUM_ : line Buffer . length ( ) ; }"]}
{"ids": "52493", "code": ["public static List < Interval > slice Intervals ( Interval interval , Time Grain time Grain ) {", "Date Time interval End = interval . get End ( ) ;", "Date Time slice Start = interval . get Start ( ) ;", "Date Time period Start = time Grain . round Floor ( slice Start ) ;", "if ( ! slice Start . equals ( period Start ) ) {", "LOG . info ( STR_ , interval , time Grain , period Start ) ;", "throw new Illegal Argument Exception ( STR_ + period Start ) ; }", "List < Interval > interval Slices = new Array List < > ( ) ;", "while ( slice Start . is Before ( interval End ) ) {", "Date Time slice End = Date Time Utils . add Time Grain ( slice Start , time Grain ) ;", "Interval sliced Interval = new Interval ( slice Start , slice End ) ;", "if ( ! interval . contains ( sliced Interval ) ) {", "LOG . info ( STR_ , interval , time Grain ) ;", "throw new Illegal Argument Exception ( STR_ ) ; }", "interval Slices . add ( sliced Interval ) ;", "slice Start = slice End ; }", "LOG . debug ( STR_ , interval , interval Slices . size ( ) , time Grain ) ;", "return interval Slices ; }"]}
{"ids": "80024", "code": ["public boolean is Gerund ( ) {", "return type String . starts With ( VERB GERUND ) ; }"]}
{"ids": "68908", "code": ["private Json Object create Request ( Map < String , Object > headers , String uri , Http Method method , Json Object payload ) {", "Json Object request = new Json Object ( ) ;", "Json Array json Headers = new Json Array ( ) ;", "headers . for Each ( null ) ;", "request . put ( STR_ , json Headers ) ;", "request . put ( STR_ , uri ) ;", "request . put ( STR_ , method . to String ( ) ) ;", "request . put ( STR_ , payload ) ;", "return request ; }"]}
{"ids": "77506", "code": ["private long download Tlog Files ( File tmp Tlog Dir , long latest Generation ) throws Exception {", "LOG . info ( STR_ + tlog Files To Download ) ;", "tlog Files Downloaded = Collections . synchronized List ( new Array List < > ( ) ) ;", "long bytes Downloaded = NUM_ ;", "boolean status = tmp Tlog Dir . mkdirs ( ) ;", "if ( ! status ) {", "throw new Solr Exception ( Solr Exception . Error Code . SERVER ERROR , STR_ + tmp Tlog Dir . get Name ( ) ) ; }", "for ( Map < String , Object > file : tlog Files To Download ) {", "String save As = ( String ) ( file . get ( ALIAS ) == null ? file . get ( NAME ) : file . get ( ALIAS ) ) ;", "local File Fetcher = new Local Fs File Fetcher ( tmp Tlog Dir , file , save As , TLOG FILE , latest Generation ) ;", "current File = file ;", "local File Fetcher . fetch File ( ) ;", "bytes Downloaded += local File Fetcher . get Bytes Downloaded ( ) ;", "tlog Files Downloaded . add ( new Hash Map < > ( file ) ) ; }", "return bytes Downloaded ; }"]}
{"ids": "49288", "code": ["static Windows File Attributes read Attributes ( long handle ) throws Windows Exception {", "Native Buffer buffer = Native Buffers . get Native Buffer ( SIZEOF FILE INFORMATION ) ;", "try {", "long address = buffer . address ( ) ;", "Get File Information By Handle ( handle , address ) ;", "int reparse Tag = NUM_ ;", "int file Attrs = unsafe . get Int ( address + OFFSETOF FILE INFORMATION ATTRIBUTES ) ;", "if ( is Reparse Point ( file Attrs ) ) {", "int size = MAXIMUM REPARSE DATA BUFFER SIZE ;", "Native Buffer reparse Buffer = Native Buffers . get Native Buffer ( size ) ;", "try {", "Device Io Control Get Reparse Point ( handle , reparse Buffer . address ( ) , size ) ;", "reparse Tag = ( int ) unsafe . get Long ( reparse Buffer . address ( ) ) ; }", "finally {", "reparse Buffer . release ( ) ; } }", "return from File Information ( address , reparse Tag ) ; }", "finally {", "buffer . release ( ) ; } }"]}
{"ids": "69970", "code": ["protected void add All For Replay ( Collection < Participant > participants ) {", "Iterator < Participant > it = participants . iterator ( ) ;", "while ( it . has Next ( ) ) {", "Participant p = it . next ( ) ;", "replay Completion ( p ) ; } }"]}
{"ids": "11082", "code": ["public static J Panel create Checkbox ( String boxlabel , String [ ] buttons , boolean [ ] checked , Action Listener al ) {", "J Panel jp = create Palette J Panel ( boxlabel ) ;", "for ( int j = NUM_ ; j < buttons . length ; j ++ ) {", "J Check Box jcb = new J Check Box ( buttons [ j ] ) ;", "jcb . set Action Command ( Integer . to String ( j ) ) ;", "if ( al != null ) jcb . add Action Listener ( al ) ;", "jcb . set Selected ( checked [ j ] ) ;", "jp . add ( jcb ) ; }", "return jp ; }"]}
{"ids": "54424", "code": ["public static void copy ( Dimensions Event ae Dest , Dimensions Event ae Src ) {", "GPO Mutable dest Aggs = ae Dest . get Aggregates ( ) ;", "GPO Mutable src Aggs = ae Src . get Aggregates ( ) ;", "if ( src Aggs . get Fields Boolean ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields Boolean ( ) , NUM_ , dest Aggs . get Fields Boolean ( ) , NUM_ , src Aggs . get Fields Boolean ( ) . length ) ; }", "if ( src Aggs . get Fields Character ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields Character ( ) , NUM_ , dest Aggs . get Fields Character ( ) , NUM_ , src Aggs . get Fields Character ( ) . length ) ; }", "if ( src Aggs . get Fields String ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields String ( ) , NUM_ , dest Aggs . get Fields String ( ) , NUM_ , src Aggs . get Fields String ( ) . length ) ; }", "if ( src Aggs . get Fields Short ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields Short ( ) , NUM_ , dest Aggs . get Fields Short ( ) , NUM_ , src Aggs . get Fields Short ( ) . length ) ; }", "if ( src Aggs . get Fields Integer ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields Integer ( ) , NUM_ , dest Aggs . get Fields Integer ( ) , NUM_ , src Aggs . get Fields Integer ( ) . length ) ; }", "if ( src Aggs . get Fields Long ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields Long ( ) , NUM_ , dest Aggs . get Fields Long ( ) , NUM_ , src Aggs . get Fields Long ( ) . length ) ; }", "if ( src Aggs . get Fields Float ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields Float ( ) , NUM_ , dest Aggs . get Fields Float ( ) , NUM_ , src Aggs . get Fields Float ( ) . length ) ; }", "if ( src Aggs . get Fields Double ( ) != null ) {", "System . arraycopy ( src Aggs . get Fields Double ( ) , NUM_ , dest Aggs . get Fields Double ( ) , NUM_ , src Aggs . get Fields Double ( ) . length ) ; } }"]}
{"ids": "52843", "code": ["public static double assign Probabilities To Instances ( Relation < ? extends Number Vector > relation , List < ? extends EM Cluster Model < ? > > models , Writable Data Store < double [ ] > prob Cluster I Given X ) {", "final int k = models . size ( ) ;", "double em Sum = NUM_ ;", "for ( DBID Iter iditer = relation . iter DBI Ds ( ) ; iditer . valid ( ) ; iditer . advance ( ) ) {", "Number Vector vec = relation . get ( iditer ) ;", "double [ ] probabilities = new double [ k ] ; {", "int i = NUM_ ;", "for ( EM Cluster Model < ? > m : models ) {", "probabilities [ i ] = m . estimate Density ( vec ) ;", "++ i ; } }", "double prior Probability = NUM_ ;", "for ( int i = NUM_ ; i < k ; i ++ ) {", "prior Probability += probabilities [ i ] ; }", "double log P = Math . max ( Math . log ( prior Probability ) , MIN LOGLIKELIHOOD ) ;", "em Sum += ( log P == log P ) ? log P : NUM_ ;", "double [ ] cluster Probabilities = new double [ k ] ;", "if ( prior Probability > NUM_ ) {", "for ( int i = NUM_ ; i < k ; i ++ ) {", "cluster Probabilities [ i ] = probabilities [ i ] / prior Probability ; } }", "prob Cluster I Given X . put ( iditer , cluster Probabilities ) ; }", "return em Sum / relation . size ( ) ; }"]}
{"ids": "21069", "code": ["public static String as String ( URI value ) {", "return value != null ? value . to String ( ) : null ; }"]}
{"ids": "28346", "code": ["public Kernel ( int offset , double [ ] values ) {", "this . values = Arrays . copy Of ( values , values . length ) ;", "this . offset = offset ; }"]}
{"ids": "42373", "code": ["private void initialize Work List ( ) {", "for ( GV Congruence Class c : B ) {", "if ( c . size ( ) == NUM_ ) {", "continue ; }", "Iterator < Value Graph Vertex > i = c . iterator ( ) ;", "Value Graph Vertex first = i . next ( ) ;", "while ( i . has Next ( ) ) {", "Value Graph Vertex v = i . next ( ) ;", "if ( ! check Congruence ( first , v ) ) {", "work List . push ( c ) ;", "break ; } } } }"]}
{"ids": "35303", "code": ["@ Override protected void before Model Linked ( E Object model , I Diagnostic Consumer diagnostics Consumer ) {", "Imported Names Adapter adapter = Imported Names Adapter . find ( model . e Resource ( ) ) ;", "if ( adapter != null ) adapter . clear ( ) ;", "Union Member Scope . clear Cached Composed Members ( model ) ; }"]}
{"ids": "20876", "code": ["public void tree Expanded ( Tree Expansion Event event ) {", "inspector Window . update View ( Director . ALL ) ; }"]}
{"ids": "39049", "code": ["public void convert Infix To Postfix ( String infix Exp ) throws Exception {", "m original Infix = infix Exp ;", "infix Exp = Utils . remove Substring ( infix Exp , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "infix Exp = Utils . replace Substring ( infix Exp , STR_ , STR_ ) ;", "String Tokenizer tokenizer = new String Tokenizer ( infix Exp , OPERATORS , true ) ;", "m post Fix Exp Vector = new Vector < Expression Component > ( ) ;", "while ( tokenizer . has More Tokens ( ) ) {", "String tok = tokenizer . next Token ( ) ;", "if ( tok . length ( ) > NUM_ ) {", "handle Operand ( tok ) ; }", "else {", "if ( is Operator ( tok . char At ( NUM_ ) ) ) {", "handle Operator ( tok ) ; }", "else {", "handle Operand ( tok ) ; } }", "m previous Tok = tok ; }", "while ( ! m operator Stack . empty ( ) ) {", "String popop = ( String ) ( m operator Stack . pop ( ) ) ;", "if ( popop . char At ( NUM_ ) == STR_ || popop . char At ( NUM_ ) == STR_ ) {", "throw new Exception ( STR_ ) ; }", "m post Fix Exp Vector . add Element ( new Operator ( popop . char At ( NUM_ ) ) ) ; } }"]}
{"ids": "44629", "code": ["public boolean has Item ( T object ) {", "synchronized ( m Lock ) {", "return source . contains ( object ) ; } }"]}
{"ids": "48188", "code": ["private static boolean version Matches ( Integer v 1 , int v 2 ) {", "if ( v 1 == null || v 1 == NUM_ || v 2 == NUM_ ) {", "return true ; }", "return v 1 . equals ( v 2 ) ; }"]}
{"ids": "71642", "code": ["private void on Schema Complex Type ( Element schema Complex Type , Datatype Element Factory element Factory ) {", "Iterator < Element > iter = schema Complex Type . element Iterator ( XSD ATTRIBUTE ) ;", "while ( iter . has Next ( ) ) {", "Element xsd Attribute = iter . next ( ) ;", "String name = xsd Attribute . attribute Value ( STR_ ) ;", "Q Name qname = get Q Name ( name ) ;", "XS Datatype data Type = data Type For Xsd Attribute ( xsd Attribute ) ;", "if ( data Type != null ) {", "element Factory . set Attribute XS Datatype ( qname , data Type ) ; } }", "Element schema Sequence = schema Complex Type . element ( XSD SEQUENCE ) ;", "if ( schema Sequence != null ) {", "on Child Elements ( schema Sequence , element Factory ) ; }", "Element schema Choice = schema Complex Type . element ( XSD CHOICE ) ;", "if ( schema Choice != null ) {", "on Child Elements ( schema Choice , element Factory ) ; }", "Element schema All = schema Complex Type . element ( XSD ALL ) ;", "if ( schema All != null ) {", "on Child Elements ( schema All , element Factory ) ; } }"]}
{"ids": "51832", "code": ["private void push Annotators Ref ( String values ) {", "annotators Ref . push ( annotators Ref . peek ( ) ) ;", "set Annotators Ref ( values ) ; }"]}
{"ids": "72007", "code": ["public String version Compact ( ) {", "return properties . get Property ( STR_ ) ; }"]}
{"ids": "65346", "code": ["private void sequence Query ( Query Entry entry , Server Session Context session , Completable Future < Query Response > future ) {", "if ( entry . get Sequence ( ) > session . get Command Sequence ( ) ) {", "session . register Sequence Query ( entry . get Sequence ( ) , null ) ; }", "else {", "index Query ( entry , future ) ; } }"]}
{"ids": "53500", "code": ["public static < T > List < T > rest ( List < T > l ) {", "return l . sub List ( NUM_ , l . size ( ) ) ; }"]}
{"ids": "11415", "code": ["public void find And Undo ( Object some Obj ) {", "if ( some Obj instanceof com . bbn . openmap . Map Bean ) {", "logger . fine ( STR_ ) ;", "Map Bean map = get Map Bean ( ) ;", "if ( map != null && map == ( Map Bean ) some Obj ) {", "set Map Bean ( null ) ; } } }"]}
{"ids": "26244", "code": ["public Timestamp recalculate Estimated Completion Date ( Long priority , Timestamp start Date ) {", "if ( exist ( ) ) {", "get Production Run Routing Tasks ( ) ;", "if ( quantity == null ) get Quantity ( ) ;", "Timestamp end Date = null ;", "for ( Iterator < Generic Value > iter = production Run Routing Tasks . iterator ( ) ; iter . has Next ( ) ; ) {", "Generic Value routing Task = iter . next ( ) ;", "if ( priority . compare To ( routing Task . get Long ( STR_ ) ) <= NUM_ ) {", "long total Time = Production Run . get Estimated Task Time ( routing Task , quantity , dispatcher ) ;", "end Date = Tech Data Services . add Forward ( Tech Data Services . get Tech Data Calendar ( routing Task ) , start Date , total Time ) ;", "routing Task . set ( STR_ , start Date ) ;", "routing Task . set ( STR_ , end Date ) ;", "start Date = end Date ; } }", "return end Date ; }", "else {", "return null ; } }"]}
{"ids": "28787", "code": ["public void add Document Type ( Document Type document Type ) {", "m Document Types . add ( document Type ) ; }"]}
{"ids": "80912", "code": ["private static Position next Token Pos ( Position pos , Token [ ] [ ] spec ) {", "if ( pos == null ) {", "return null ; }", "int next Item = pos . item + NUM_ ;", "if ( ( next Item < spec [ pos . line ] . length ) && ( ( pos . line < pcal End . line ) || ( next Item < pcal End . item ) ) ) {", "return new Position ( pos . line , next Item ) ; }", "int next Line = pos . line + NUM_ ;", "while ( ( next Line < spec . length ) && ( spec [ next Line ] . length == NUM_ ) ) {", "next Line ++ ; }", "if ( ( next Line < spec . length ) && ( ( next Line < pcal End . line ) || ( ( next Line == pcal End . line ) && ( NUM_ < pcal End . item ) ) ) ) {", "return new Position ( next Line , NUM_ ) ; }", "return null ; }"]}
{"ids": "6959", "code": ["public void update ( GL 10 gl ) {", "if ( task Queue . size ( ) > NUM_ ) {", "GL Resorce Task res ;", "while ( ( res = task Queue . poll ( ) ) != null ) {", "res . perform ( gl ) ; } } }"]}
{"ids": "84602", "code": ["public static double [ ] HPD Interval ( double proportion , double [ ] x , int [ ] indices ) {", "double min Range = Double . MAX VALUE ;", "int hpd Index = NUM_ ;", "final int diff = ( int ) Math . round ( proportion * ( double ) x . length ) ;", "for ( int i = NUM_ ; i <= ( x . length - diff ) ; i ++ ) {", "final double min Value = x [ indices [ i ] ] ;", "final double max Value = x [ indices [ i + diff - NUM_ ] ] ;", "final double range = Math . abs ( max Value - min Value ) ;", "if ( range < min Range ) {", "min Range = range ;", "hpd Index = i ; } }", "return new double [ ] { x [ indices [ hpd Index ] ] , x [ indices [ hpd Index + diff - NUM_ ] ] } ; }"]}
{"ids": "23892", "code": ["private void check If Directories Exist ( File [ ] disk dirs ) {", "Disk Store Factory Impl . check If Directories Exist ( disk dirs ) ; }"]}
{"ids": "21772", "code": ["public void add Port To Already Allocated Context ( Storage Port port , Storage HA Domain ha Domain , Storage System . Type array Type , String switch Name ) {", "String engine = get Engine ( port , ha Domain , array Type ) ;", "if ( engine != null ) {", "already Allocated Engines . add ( engine ) ; }", "String director Type = get Director Type ( array Type , ha Domain ) ;", "if ( director Type != null ) {", "already Allocated Director Types . add ( director Type ) ; }", "String director = get Director ( port , ha Domain ) ;", "if ( director != null ) {", "already Allocated Directors . add ( director ) ; }", "String cpu = get Cpu ( port , ha Domain , array Type ) ;", "if ( cpu != null ) {", "already Allocated Cpus . add ( cpu ) ; }", "if ( switch Name != null ) {", "already Allocated Switches . add ( switch Name ) ; } }"]}
{"ids": "23592", "code": ["public static void write List Of Longs ( List list , boolean has Long I Ds , Data Output out ) throws IO Exception {", "if ( list == null ) {", "out . write Int ( - NUM_ ) ; }", "else {", "out . write Int ( list . size ( ) ) ;", "out . write Boolean ( has Long I Ds ) ;", "for ( Iterator it = list . iterator ( ) ; it . has Next ( ) ; ) {", "Long l = ( Long ) it . next ( ) ;", "if ( has Long I Ds ) {", "out . write Long ( l . long Value ( ) ) ; }", "else {", "out . write Int ( ( int ) l . long Value ( ) ) ; } } } }"]}
{"ids": "46509", "code": ["public boolean is Defined ( Object attr Name ) {", "return table . contains Key ( attr Name ) ; }"]}
{"ids": "79920", "code": ["private void show Preloading Stage ( ) {", "Stage preloading Stage = new Stage ( Stage Style . UNDECORATED ) ;", "preloading Stage . init Owner ( primary Stage ) ;", "preloading Stage . set Scene ( new Preloading Scene ( ) ) ;", "preloading Stage . show ( ) ;", "primary Stage . set On Showing ( null ) ; }"]}
{"ids": "49699", "code": ["private static int ip To Bytes ( String ip , byte [ ] bytes , boolean must Have 4 ) throws IP Matcher Exception {", "String [ ] parts = ip . split ( STR_ ) ;", "if ( parts . length > NUM_ || must Have 4 && parts . length != NUM_ ) {", "throw new IP Matcher Exception ( STR_ + ip ) ; }", "try {", "for ( int i = NUM_ ; i < parts . length ; i ++ ) {", "int p = Integer . parse Int ( parts [ i ] ) ;", "if ( p < NUM_ || p > NUM_ ) {", "throw new IP Matcher Exception ( STR_ + ip ) ; }", "bytes [ i ] = ( byte ) ( p < NUM_ ? p : p - NUM_ ) ; } }", "catch ( Number Format Exception nfe ) {", "throw new IP Matcher Exception ( STR_ + ip , nfe ) ; }", "return parts . length ; }"]}
{"ids": "39971", "code": ["protected void reply ( Request Context context , String key , String message ) {", "try {", "Http Servlet Request request = context . get Request ( ) ;", "String filename = request . get Remote Addr ( ) ;", "end ( filename , key , message ) ; }", "catch ( Exception e ) { } }"]}
{"ids": "52", "code": ["protected void add Headers ( Http URL Connection connection , String tenant Id ) {", "if ( tenant Id == null ) {", "tenant Id = Property Util . get Property ( Property Util . HAWKULAR TENANT ) ; }", "if ( tenant Id != null ) {", "connection . set Request Property ( HAWKULAR TENANT , tenant Id ) ; }", "if ( authorization == null && username != null ) {", "String auth String = username + STR_ + password ;", "String encoded = encoder . encode To String ( auth String . get Bytes ( ) ) ;", "authorization = STR_ + encoded ; }", "if ( authorization != null ) {", "connection . set Request Property ( STR_ , authorization ) ; } }"]}
{"ids": "81016", "code": ["public void add Long Selection Listener ( Selection Listener listener ) {", "if ( listener == null ) throw new Illegal Argument Exception ( ) ;", "if ( hex Edit Control == null ) {", "if ( list Of Long Listeners == null ) list Of Long Listeners = new Array List < > ( ) ;", "list Of Long Listeners . add ( listener ) ; }", "else {", "hex Edit Control . add Long Selection Listener ( listener ) ; } }"]}
{"ids": "49583", "code": ["public Debug ( String client ID , Client Comms comms ) {", "this . client ID = client ID ;", "this . comms = comms ;", "log . set Resource Name ( client ID ) ; }"]}
{"ids": "66459", "code": ["protected String alter Case ( String value ) {", "switch ( get Case ( ) ) {", "case UPPERCASE :", "return value . to Upper Case ( ) ;", "case LOWERCASE :", "return value . to Lower Case ( ) ;", "default :", "return value ; } }"]}
{"ids": "23880", "code": ["private boolean is Ack Required ( ) {", "return this . ack Required ; }"]}
{"ids": "74406", "code": ["void add Reporter ( String text Reporter , int xx , int yy ) {", "Reporter Icon l = new Reporter Icon ( this ) ;", "l . set Reporter ( text Reporter ) ;", "l . set Location ( xx , yy ) ;", "l . set Size ( l . get Preferred Size ( ) . width , l . get Preferred Size ( ) . height ) ;", "l . set Display Level ( LABELS ) ;", "set Dirty ( true ) ;", "put Item ( l ) ; }"]}
{"ids": "21922", "code": ["private boolean has Connectivity To All Systems ( Initiator initiator , Collection < URI > storage Systems , Export Group export Group ) {", "return has Connectivity To All Systems ( initiator , storage Systems , null , export Group ) ; }"]}
{"ids": "43643", "code": ["private Derivation < TK , FV > construct Derivation ( Derivation < TK , FV > marked Node , int source Input Id , Feature Extractor < TK , FV > featurizer , Scorer < FV > scorer , Search Heuristic < TK , FV > heuristic , Output Space < TK , FV > output Space ) {", "final List < Derivation < TK , FV > > nodes = new Linked List < > ( ) ;", "Derivation < TK , FV > p = marked Node ;", "while ( p != null ) {", "nodes . add ( NUM_ , p ) ;", "p = p . parent ; }", "p = marked Node . best Child ;", "while ( p != null ) {", "nodes . add ( p ) ;", "p = p . best Child ; }", "Derivation < TK , FV > goal Hyp = null ;", "for ( Derivation < TK , FV > node : nodes ) {", "goal Hyp = goal Hyp == null ? node : new Derivation < > ( source Input Id , node . rule , goal Hyp . length , goal Hyp , featurizer , scorer , heuristic , output Space ) ; }", "return goal Hyp ; }"]}
{"ids": "37033", "code": ["private static I Abstract Node convert Or ( final Common Tree ast ) throws Recognition Exception {", "final List < I Abstract Node > children = new Array List < I Abstract Node > ( ) ;", "for ( final Object child Object : ast . get Children ( ) ) {", "children . add ( convert ( ( Common Tree ) child Object ) ) ; }", "return new C Abstract Or Expression ( children ) ; }"]}
{"ids": "73315", "code": ["public J Dialog display Panel In Window ( final J Panel panel , String title ) {", "J Dialog frame = new Generic J Dialog ( ) ;", "frame . set Content Pane ( panel ) ;", "frame . pack ( ) ;", "frame . set Title ( title ) ;", "frame . set Visible ( true ) ;", "return frame ; }"]}
{"ids": "32908", "code": ["public static void compress ( ) {", "String s = Binary Std In . read String ( ) ;", "char [ ] input = s . to Char Array ( ) ;", "int [ ] freq = new int [ R ] ;", "for ( int i = NUM_ ; i < input . length ; i ++ ) freq [ input [ i ] ] ++ ;", "Node root = build Trie ( freq ) ;", "String [ ] st = new String [ R ] ;", "build Code ( st , root , STR_ ) ;", "write Trie ( root ) ;", "Binary Std Out . write ( input . length ) ;", "for ( int i = NUM_ ; i < input . length ; i ++ ) {", "String code = st [ input [ i ] ] ;", "for ( int j = NUM_ ; j < code . length ( ) ; j ++ ) {", "if ( code . char At ( j ) == STR_ ) {", "Binary Std Out . write ( false ) ; }", "else if ( code . char At ( j ) == STR_ ) {", "Binary Std Out . write ( true ) ; }", "else throw new Illegal State Exception ( STR_ ) ; } }", "Binary Std Out . close ( ) ; }"]}
{"ids": "27029", "code": ["protected double compute Azimuth Label Offset ( double radius , double max Radius ) {", "return Math . asin ( AZIMUTH LABEL OFFSET * max Radius / radius ) ; }"]}
{"ids": "49199", "code": ["public void display Changed ( ) {", "execute Display Changed On EDT ( get Graphics Configuration ( ) ) ; }"]}
{"ids": "52536", "code": ["private static Stream < Method > extract Methods ( Class clazz ) {", "try {", "Method [ ] methods = clazz . get Methods ( ) ;", "if ( methods . length > NUM_ ) {", "return Stream . of ( methods ) ; } }", "catch ( Exception | Error e ) {", "LOG . warn ( STR_ , clazz , e ) ; }", "return Stream . empty ( ) ; }"]}
{"ids": "43417", "code": ["@ Override public void update Server Address ( Application application , String docker Manager IP , String server Port , String server Manager Port ) {", "String suffix Cloud Unit = application . get Suffix Cloud Unit IO ( ) ;", "Jedis Pool pool = null ;", "Jedis jedis = null ;", "try {", "pool = new Jedis Pool ( new Jedis Pool Config ( ) , redis Ip , Integer . parse Int ( redis Port ) , NUM_ ) ;", "jedis = pool . get Resource ( ) ;", "String sub Name Space = concat Sub Name Space ( application ) ;", "String key = sub Name Space + suffix Cloud Unit ;", "String frontend = STR_ + key . to Lower Case ( ) ;", "jedis . lset ( frontend , NUM_ , STR_ + docker Manager IP + STR_ + server Port ) ;", "String frontend Server Manager = STR_ + key . to Lower Case ( ) ;", "jedis . lset ( frontend Server Manager , NUM_ , STR_ + docker Manager IP + STR_ + server Manager Port ) ; }", "catch ( Jedis Connection Exception | Unsupported Encoding Exception e ) {", "logger . error ( STR_ , e ) ; }", "finally {", "if ( jedis != null ) {", "pool . destroy ( ) ; } } }"]}
{"ids": "42688", "code": ["protected void remove ( int item Position ) {", "if ( item Position >= NUM_ && item Position < get Item Count ( ) ) {", "list . remove ( item Position ) ; } }"]}
{"ids": "80520", "code": ["protected String choose Random Enemys ( ) {", "final List < String > enemy List = new Linked List < String > ( enemy Forces . key Set ( ) ) ;", "final int enemy Size = enemy List . size ( ) ;", "final int position = Rand . rand ( enemy Size ) ;", "return enemy List . get ( position ) ; }"]}
{"ids": "22065", "code": ["public void sort Pools ( List < Storage Pool > storage Pools ) {", "port Metrics Processor . compute Storage Pools Avg Port Metrics ( storage Pools ) ;", "Collections . sort ( storage Pools , storage Pool Comparator ) ; }"]}
{"ids": "27079", "code": ["public Rhythm Group add Overlays ( Collection < Rhythm Overlay > overlays ) {", "m Overlays . add All ( overlays ) ;", "if ( m Current Overlay Index == NO OVERLAY ) {", "select Overlay ( NUM_ ) ; }", "return this ; }"]}
{"ids": "53492", "code": ["public static Resource for Path ( final String path ) throws Unknown Resource Exception {", "Resource resource ;", "if ( path . starts With ( Classpath Resource . PREFIX + STR_ ) ) {", "resource = new Classpath Resource ( path ) ; }", "else if ( path . starts With ( File Resource . PREFIX + STR_ ) ) {", "resource = new File Resource ( path ) ; }", "else {", "resource = for Path ( File Resource . PREFIX + STR_ + path ) ; }", "return resource ; }"]}
{"ids": "6618", "code": ["private static boolean is Older Than Leopard ( ) {", "String version = System . get Property ( STR_ ) ;", "String Tokenizer tk = new String Tokenizer ( version , STR_ ) ;", "int major = Integer . parse Int ( tk . next Token ( ) ) ;", "int minor = Integer . parse Int ( tk . next Token ( ) ) ;", "return major == NUM_ && minor < NUM_ ; }"]}
{"ids": "67699", "code": ["public static String xml Content Escape ( String s ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < s . length ( ) ; i ++ ) {", "char c = s . char At ( i ) ;", "switch ( c ) {", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "break ;", "default :", "sb . append ( c ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "9359", "code": ["private void feed Forward ( Vec input , List < Vec > activations , List < Vec > derivatives ) {", "Vec x = input ;", "for ( int i = NUM_ ; i < Ws . size ( ) ; i ++ ) {", "Matrix W i = Ws . get ( i ) ;", "Vec b i = bs . get ( i ) ;", "Vec a i = activations . get ( i ) ;", "a i . zero Out ( ) ;", "W i . multiply ( x , NUM_ , a i ) ;", "a i . mutable Add ( b i ) ;", "a i . apply Function ( f ) ;", "Vec d i = derivatives . get ( i ) ;", "a i . copy To ( d i ) ;", "d i . apply Function ( f . get D ( ) ) ;", "x = a i ; } }"]}
{"ids": "59117", "code": ["private File find File ( File directory , String name ) throws File Not Found Exception {", "File file = new File ( directory , name ) ;", "if ( file . exists ( ) ) {", "return file ; }", "for ( String child : directory . list ( ) ) {", "if ( child . equals Ignore Case ( name ) ) {", "return new File ( directory , child ) ; } }", "throw new File Not Found Exception ( STR_ + file ) ; }"]}
{"ids": "44969", "code": ["public Array List < String > Get Element List ( String x Path Expression ) {", "try {", "Array List < String > values = new Array List < String > ( ) ;", "List < ? > node List = X Path . select Nodes ( this . xml Document , x Path Expression ) ;", "Iterator < ? > iter = node List . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "org . jdom . Element element = ( org . jdom . Element ) iter . next ( ) ;", "values . add ( element . get Text ( ) ) ; }", "return values ; }", "catch ( Exception ex ) {", "LOG . error ( STR_ + ex . get Message ( ) , ex ) ;", "return null ; } }"]}
{"ids": "8593", "code": ["public static CL Context create Context From Current GL ( ) {", "Runtime Exception first = null ;", "for ( CL Platform platform : list Platforms ( ) ) {", "try {", "CL Context ctx = platform . create Context From Current GL ( ) ;", "if ( ctx != null ) return ctx ; }", "catch ( Runtime Exception ex ) {", "if ( first == null ) first = ex ; } }", "throw new Runtime Exception ( STR_ , first ) ; }"]}
{"ids": "514", "code": ["public void collapse Tree ( ) {", "for ( int i = NUM_ ; i < tree . get Row Count ( ) ; ++ i ) {", "tree . collapse Row ( i ) ; } }"]}
{"ids": "69851", "code": ["static void queue Player Cape Replacement ( Abstract Client Player player ) {", "final String display Name = player . get Display Name String ( ) ;", "Logger . info ( STR_ , display Name ) ;", "THREAD POOL . submit ( null ) ; }"]}
{"ids": "47827", "code": ["public void remove Vetoable Change Listener ( Vetoable Change Listener listener ) {", "if ( listener != null ) {", "synchronized ( this ) {", "if ( vetoable Support != null ) {", "vetoable Support . remove Vetoable Change Listener ( listener ) ; } } } }"]}
{"ids": "38903", "code": ["public Stream Throughput ( String status Message Prefix ) {", "m instance Count = NUM_ ;", "m sample Count = NUM_ ;", "m num Samples = NUM_ ;", "m cumulative Time = NUM_ ;", "m start Time = System . current Time Millis ( ) ;", "m status Message Prefix = status Message Prefix ; }"]}
{"ids": "24127", "code": ["protected void parse Command ( final String ... args ) {", "for ( String arg : args ) {", "final Command command = Command . value Of Name ( arg ) ;", "if ( command != null ) {", "set Command ( command ) ;", "break ; } } }"]}
{"ids": "16476", "code": ["@ Request Mapping ( value = STR_ , method = Request Method . PUT ) public Response Entity < Bookmark > edit Bookmark ( @ Path Variable ( value = STR_ ) String username , @ Path Variable ( value = STR_ ) int bookmark Id , @ Request Body String json ) throws IO Exception , Bookmark Not Found Exception , Illegal Access Exception , Invocation Target Exception {", "Optional < Bookmark > optional = bookmarks Repository . find By Id And User Username ( bookmark Id , username ) ;", "if ( optional . is Present ( ) ) {", "Object Mapper mapper = new Object Mapper ( ) ;", "Map < String , String > change Map = mapper . read Value ( json , Hash Map . class ) ;", "Bookmark bookmark = optional . get ( ) ;", "Bean Utils . populate ( bookmark , change Map ) ;", "bookmark = bookmarks Repository . save ( bookmark ) ;", "return new Response Entity < > ( bookmark , Http Status . OK ) ; }", "else {", "throw new Bookmark Not Found Exception ( STR_ + bookmark Id ) ; } }"]}
{"ids": "85247", "code": ["public static String convert From Utf 32 ( int [ ] text , int start Pos , int end Pos ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = start Pos ; i < end Pos ; i ++ ) {", "sb . append ( convert From Utf 32 To Char Array ( text [ i ] ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "51070", "code": ["public void create Bounds ( ) {", "if ( is Empty ( ) || has Single Element ( ) ) {", "m Bounds = null ;", "return ; }", "int l = Integer . MAX VALUE ;", "int t = Integer . MAX VALUE ;", "int r = NUM_ ;", "int b = NUM_ ;", "for ( Selection . Element selection : get Elements ( ) ) {", "Constraint Widget w = selection . widget ;", "l = Math . min ( w . get Draw X ( ) , l ) ;", "t = Math . min ( w . get Draw Y ( ) , t ) ;", "r = Math . max ( w . get Draw Right ( ) , r ) ;", "b = Math . max ( w . get Draw Bottom ( ) , b ) ; }", "Constraint Widget bounds = new Constraint Widget ( l , t , r - l , b - t ) ;", "bounds . set Companion Widget ( Widget Companion . create ( bounds ) ) ;", "m Bounds = new Element ( bounds ) ;", "update Origin From Bounds ( ) ; }"]}
{"ids": "85620", "code": ["public static Object [ ] find Method With List Parameters ( Object service , String method Name , List < ? > args ) {", "Object [ ] arguments = new Object [ args . size ( ) ] ;", "for ( int i = NUM_ ; i < args . size ( ) ; i ++ ) {", "arguments [ i ] = args . get ( i ) ; }", "return find Method With List Parameters ( service , method Name , arguments ) ; }"]}
{"ids": "82404", "code": ["static int first Illegal Character ( String source ) {", "for ( int i = NUM_ ; i < source . length ( ) ; i ++ ) {", "if ( is Legal ( source . char At ( i ) ) == false ) {", "return i ; } }", "return - NUM_ ; }"]}
{"ids": "44472", "code": ["private Coder Result decode Byte Buffer To Character Buffer ( boolean end Of Input ) throws Decoding Exception {", "buffer . flip ( ) ;", "return decode More Bytes To Character Buffer ( end Of Input ) ; }"]}
{"ids": "74493", "code": ["protected void new Fast Clock Minute ( ) {", "for ( int i = delayed Trains . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "Active Train at = delayed Trains . get ( i ) ;", "if ( ( ! at . get Started ( ) ) && at . get Delayed Start ( ) != Active Train . NODELAY ) {", "if ( at . get Delayed Start ( ) == Active Train . TIMEDDELAY ) {", "if ( is Fast Clock Time GE ( at . get Departure Time Hr ( ) , at . get Departure Time Min ( ) ) ) {", "at . set Started ( ) ;", "delayed Trains . remove ( i ) ;", "if ( Auto Allocate ) {", "auto Allocate . scan Allocation Request List ( allocation Requests ) ; } } } }", "else if ( at . get Started ( ) && at . get Status ( ) == Active Train . READY && at . reached Restart Point ( ) ) {", "if ( is Fast Clock Time GE ( at . get Restart Depart Hr ( ) , at . get Restart Depart Min ( ) ) ) {", "at . restart ( ) ;", "delayed Trains . remove ( i ) ;", "if ( Auto Allocate ) {", "auto Allocate . scan Allocation Request List ( allocation Requests ) ; } } } } }"]}
{"ids": "80627", "code": ["public void add ( final Creature Respawn Point point ) {", "respawn Points . add ( point ) ; }"]}
{"ids": "66018", "code": ["private void load Org Access Role ( Array List < Org Access > list ) {", "Prepared Statement pstmt = null ;", "Result Set rs = null ;", "String sql = STR_ + STR_ ;", "try {", "pstmt = DB . prepare Statement ( sql , get Trx Name ( ) ) ;", "pstmt . set Int ( NUM_ , get AD Role ID ( ) ) ;", "rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) ) {", "M Role Org Access oa = new M Role Org Access ( get Ctx ( ) , rs , get Trx Name ( ) ) ;", "load Org Access Add ( list , new Org Access ( oa . get AD Client ID ( ) , oa . get AD Org ID ( ) , oa . is Read Only ( ) ) ) ; } }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , sql , e ) ; }", "finally {", "DB . close ( rs , pstmt ) ; } }"]}
{"ids": "4386", "code": ["@ Override public List < Period > generate Rolling Periods ( Date Time Unit date Time Unit ) {", "Calendar cal = get Calendar ( ) ;", "date Time Unit . set Day ( NUM_ ) ;", "date Time Unit = cal . minus Months ( date Time Unit , NUM_ ) ;", "List < Period > periods = Lists . new Array List ( ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "periods . add ( create Period ( date Time Unit , cal ) ) ;", "date Time Unit = cal . plus Months ( date Time Unit , NUM_ ) ; }", "return periods ; }"]}
{"ids": "54464", "code": ["@ Suppress Warnings ( STR_ ) public synchronized T find Counter ( Enum < ? > counter Key ) throws Illegal Access Exception , Instantiation Exception {", "T counter = cache . get ( counter Key ) ;", "if ( counter == null ) {", "counter = counter Type . new Instance ( ) ;", "cache . put ( counter Key , counter ) ; }", "return counter ; }"]}
{"ids": "76537", "code": ["public static Uri add Message To Uri ( Content Resolver resolver , Uri uri , String address , String body , String subject , Long date , boolean read , boolean delivery Report , long thread Id ) {", "Content Values values = new Content Values ( NUM_ ) ;", "values . put ( Sms . ADDRESS , address ) ;", "if ( date != null ) {", "values . put ( Sms . DATE , date ) ; }", "values . put ( Sms . READ , read ? Integer . value Of ( NUM_ ) : Integer . value Of ( NUM_ ) ) ;", "values . put ( Sms . SUBJECT , subject ) ;", "values . put ( Sms . BODY , body ) ;", "if ( delivery Report ) {", "values . put ( Sms . STATUS , Sms . STATUS PENDING ) ; }", "if ( thread Id != - NUM_ ) {", "values . put ( Sms . THREAD ID , thread Id ) ; }", "return resolver . insert ( uri , values ) ; }"]}
{"ids": "66429", "code": ["@ Suppress Warnings ( STR_ ) private void expunge Stale Entries ( ) {", "synchronized ( sync ) {", "List Weak Reference r ;", "while ( ( r = ( List Weak Reference ) queue . poll ( ) ) != null ) {", "List Entry le = r . get List Entry ( ) ;", "int i = list . index Of ( le ) ;", "if ( i != - NUM_ ) {", "list . remove ( i ) ; } } } }"]}
{"ids": "28919", "code": ["protected void work ( final I Resource resource , final List < Work Item > resources , I Progress Monitor monitor ) {", "I Preference Store store = Findbugs Plugin . get Plugin Preferences ( get Project ( ) ) ;", "boolean run As Job = store . get Boolean ( Find Bugs Constants . KEY RUN ANALYSIS AS EXTRA JOB ) ;", "Find Bugs Job fb Job = new Started From Builder Job ( STR_ + resource . get Name ( ) + STR_ , resource , resources ) ;", "if ( run As Job ) {", "if ( DEBUG ) {", "Findbugs Plugin . log ( STR_ ) ; }", "Find Bugs Job . cancel Similar Jobs ( fb Job ) ;", "if ( DEBUG ) {", "Findbugs Plugin . log ( STR_ ) ; }", "fb Job . schedule As System ( ) ;", "if ( DEBUG ) {", "Findbugs Plugin . log ( STR_ ) ; } }", "else {", "if ( DEBUG ) {", "Findbugs Plugin . log ( STR_ ) ; }", "fb Job . run ( monitor ) ;", "if ( DEBUG ) {", "Findbugs Plugin . log ( STR_ ) ; } } }"]}
{"ids": "8769", "code": ["@ Override public void on Full Backup ( Full Backup Data Output output ) throws IO Exception {", "if ( m Volumes != null ) {", "if ( DEBUG ) Slog . i ( TAG , STR_ + m Volumes . length + STR_ ) ;", "Hash Set < String > external Files Dir Filter = new Hash Set < String > ( ) ;", "final File external Android Root = new File ( Environment . get External Storage Directory ( ) , Environment . DIRECTORY ANDROID ) ;", "external Files Dir Filter . add ( external Android Root . get Canonical Path ( ) ) ;", "for ( int i = NUM_ ; i < m Volumes . length ; i ++ ) {", "Storage Volume v = m Volumes [ i ] ;", "String domain = Full Backup . SHARED PREFIX + i ;", "full Backup File Tree ( null , domain , v . get Path ( ) , external Files Dir Filter , output ) ; } } }"]}
{"ids": "38634", "code": ["public static void remove Connection List ( Integer tab ) {", "TABBED CONNECTIONS . remove ( tab . int Value ( ) ) ; }"]}
{"ids": "11291", "code": ["protected void paint Range Rings ( Point 2 D origin Pnt , Point 2 D dest , Graphics graphics , Map Bean the Map ) {", "Geo origin Geo = new Geo ( origin Pnt . get Y ( ) , origin Pnt . get X ( ) , true ) ;", "Geo dest Geo = new Geo ( dest . get Y ( ) , dest . get X ( ) , true ) ;", "double distance = origin Geo . distance ( dest Geo ) ;", "for ( int i = NUM_ ; i <= Math . max ( NUM_ , num Rings ) ; i ++ ) {", "double ring Dist = distance * ( double ) i ;", "paint Circle ( origin Geo , ring Dist , graphics , the Map ) ;", "paint Label ( origin Geo , ring Dist , graphics , the Map ) ; } }"]}
{"ids": "20052", "code": ["public void translate And Append Pending ( int backoff ) throws Unsupported Encoding Exception {", "int buffer End = current - backoff ;", "int len = buffer End - complete ;", "output . append ( new String ( input , offset + complete , len , charset ) ) ;", "complete = buffer End ; }"]}
{"ids": "76824", "code": ["@ Override public Trie optimize ( Trie orig ) {", "List < Char Sequence > cmds = orig . cmds ;", "List < Row > rows = new Array List < > ( ) ;", "List < Row > orows = orig . rows ;", "int remap [ ] = new int [ orows . size ( ) ] ;", "for ( int j = orows . size ( ) - NUM_ ; j >= NUM_ ; j -- ) {", "lift Up ( orows . get ( j ) , orows ) ; }", "Arrays . fill ( remap , - NUM_ ) ;", "rows = remove Gaps ( orig . root , orows , new Array List < Row > ( ) , remap ) ;", "return new Trie ( orig . forward , remap [ orig . root ] , cmds , rows ) ; }"]}
{"ids": "68900", "code": ["private Handler < Void > install After Handler ( final Http Server Request request , final Buffer buffer , final List < Listener > after Listener ) {", "Handler < Void > after Handler = null ;", "return after Handler ; }"]}
{"ids": "72182", "code": ["private void try Shutdown ( ) {", "if ( is Closing ( ) && is Ok To Close ( ) ) shutdown ( close Future . get ( ) ) ; }"]}
{"ids": "56913", "code": ["public Storage Entity create Storage Entity ( String storage Name , Storage Platform Entity storage Platform Entity , List < Attribute > attributes ) {", "Storage Entity storage Entity = new Storage Entity ( ) ;", "storage Entity . set Name ( storage Name ) ;", "storage Entity . set Storage Platform ( storage Platform Entity ) ;", "if ( ! Collection Utils . is Empty ( attributes ) ) {", "List < Storage Attribute Entity > attribute Entities = new Array List < > ( ) ;", "storage Entity . set Attributes ( attribute Entities ) ;", "for ( Attribute attribute : attributes ) {", "Storage Attribute Entity attribute Entity = new Storage Attribute Entity ( ) ;", "attribute Entities . add ( attribute Entity ) ;", "attribute Entity . set Storage ( storage Entity ) ;", "attribute Entity . set Name ( attribute . get Name ( ) ) ;", "attribute Entity . set Value ( attribute . get Value ( ) ) ; } }", "return storage Dao . save And Refresh ( storage Entity ) ; }"]}
{"ids": "11510", "code": ["public void display Info Line ( String info Line , int label Designator ) {", "if ( info Line Holder != null ) {", "set Label ( ( info Line != null && info Line . length ( ) > NUM_ ) ? info Line : fudge String , label Designator ) ; } }"]}
{"ids": "857", "code": ["public static Object invoke Static Method ( Bsh Class Manager bcm , Class clas , String method Name , Object [ ] args ) throws Reflect Error , Util Eval Error , Invocation Target Exception {", "Interpreter . debug ( STR_ ) ;", "Method method = resolve Expected Java Method ( bcm , clas , null , method Name , args , true ) ;", "return invoke Method ( method , null , args ) ; }"]}
{"ids": "24535", "code": ["private static void remove Loop Safepoint ( Structured Graph graph ) {", "Loop Begin Node loop Begin = find First Loop ( graph ) ;", "loop Begin . disable Safepoint ( ) ; }"]}
{"ids": "9096", "code": ["public static Date days Before ( Date date Inst , int num Days ) {", "if ( ( num Days <= NUM_ ) || ( date Inst == null ) ) {", "throw new Illegal Argument Exception ( ) ; }", "final Calendar cal = new Gregorian Calendar ( ) ;", "cal . set Time ( date Inst ) ;", "cal . add ( Calendar . DAY OF YEAR , - num Days ) ;", "return cal . get Time ( ) ; }"]}
{"ids": "25430", "code": ["public final int remaining Capacity ( ) {", "return Math . max ( NUM_ , capacity - cache . size ( ) ) ; }"]}
{"ids": "52901", "code": ["@ Override public void write External ( Object Output out ) throws IO Exception {", "super . write External ( out ) ;", "out . write Object ( conservative Approximation ) ; }"]}
{"ids": "25688", "code": ["int put Data ( Object data ) throws Fits Exception {", "long lsize = Array Funcs . compute L Size ( data ) ;", "if ( lsize > Integer . MAX VALUE ) {", "throw new Fits Exception ( STR_ ) ; }", "int size = ( int ) lsize ;", "expand Heap ( size ) ;", "Byte Array Output Stream bo = new Byte Array Output Stream ( size ) ;", "try {", "Buffered Data Output Stream o = new Buffered Data Output Stream ( bo ) ;", "o . write Array ( data ) ;", "o . flush ( ) ;", "o . close ( ) ; }", "catch ( IO Exception e ) {", "throw new Fits Exception ( STR_ , e ) ; }", "System . arraycopy ( bo . to Byte Array ( ) , NUM_ , this . heap , this . heap Size , size ) ;", "int old Offset = this . heap Size ;", "this . heap Size += size ;", "return old Offset ; }"]}
{"ids": "6574", "code": ["public void paint ( Graphics g ) {", "try {", "super . paint ( g ) ; }", "catch ( Exception e ) { }", "int focused Row = get Focused Row ( true ) ;", "if ( focused Row != - NUM_ && focused Row < get Row Count ( ) ) {", "Border row Border = UI Manager . get Border ( STR_ ) ;", "if ( row Border != null ) {", "Rectangle rect = get Cell Rect ( focused Row , NUM_ , true ) ;", "rect . width = get Width ( ) ;", "row Border . paint Border ( this , g , rect . x , rect . y , rect . width , rect . height ) ; } } }"]}
{"ids": "73180", "code": ["private void add ( final J Label label , final J Text Field field ) {", "panel . add ( label ) ;", "panel . add ( field ) ;", "if ( previous == null ) {", "layout . put Constraint ( Spring Layout . NORTH , panel , - SPACING , Spring Layout . NORTH , label ) ; }", "else {", "layout . put Constraint ( Spring Layout . NORTH , label , SPACING , Spring Layout . SOUTH , previous ) ; }", "layout . put Constraint ( Spring Layout . WEST , panel , - SPACING , Spring Layout . WEST , label ) ;", "layout . put Constraint ( Spring Layout . SOUTH , panel , SPACING , Spring Layout . SOUTH , label ) ;", "layout . put Constraint ( Spring Layout . EAST , field , - SPACING , Spring Layout . EAST , panel ) ;", "layout . put Constraint ( Spring Layout . WEST , field , - ( TEXT FIELD WIDTH + SPACING ) , Spring Layout . EAST , panel ) ;", "layout . put Constraint ( Spring Layout . SOUTH , field , SPACING , Spring Layout . SOUTH , label ) ;", "previous = label ; }"]}
{"ids": "69343", "code": ["private void on Track Point Start ( Attributes attributes ) {", "latitude = attributes . get Value ( ATTRIBUTE LAT ) ;", "longitude = attributes . get Value ( ATTRIBUTE LON ) ;", "altitude = null ;", "time = null ; }"]}
{"ids": "37451", "code": ["public static byte [ ] combine ( final List < byte [ ] > data Chunks ) {", "int total Size = NUM_ ;", "for ( final byte [ ] data Part : data Chunks ) {", "total Size += data Part . length ; }", "final byte [ ] data = new byte [ total Size ] ;", "int index = NUM_ ;", "for ( final byte [ ] data Part : data Chunks ) {", "System . arraycopy ( data Part , NUM_ , data , index , data Part . length ) ;", "index += data Part . length ; }", "return data ; }"]}
{"ids": "75423", "code": ["public void commit ( I Resource [ ] resources , String comment , boolean keep Locks , I Progress Monitor monitor ) throws Team Exception {", "if ( monitor == null ) {", "monitor = new Null Progress Monitor ( ) ; }", "Map table = get Provider Mapping ( resources ) ;", "Set key Set = table . key Set ( ) ;", "monitor . begin Task ( STR_ , key Set . size ( ) * NUM_ ) ;", "monitor . set Task Name ( Policy . bind ( STR_ ) ) ;", "Iterator iterator = key Set . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "I Progress Monitor sub Monitor = new Sub Progress Monitor ( monitor , NUM_ ) ;", "SVN Team Provider provider = ( SVN Team Provider ) iterator . next ( ) ;", "List list = ( List ) table . get ( provider ) ;", "I Resource [ ] provider Resources = ( I Resource [ ] ) list . to Array ( new I Resource [ list . size ( ) ] ) ;", "provider . checkin ( provider Resources , comment , keep Locks , I Resource . DEPTH INFINITE , sub Monitor ) ; } }"]}
{"ids": "4254", "code": ["public boolean can Spawn Workers ( ) {", "boolean can Spawn Worker = false ;", "if ( verbose Log Level > NUM_ ) {", "Utilities . verbose Log ( STR_ + grid Name + STR_ + tier + STR_ + max Tier Depth + STR_ + life Remaining ( ) + STR_ + maximum Life Millis ) ; }", "if ( ! grid Name . equals ( STR_ ) ) {", "return false ; }", "if ( cluster State != null ) {", "Long time Since Cluster Last Updated Cluster State = System . current Time Millis ( ) - cluster State . get Last Updated ( ) ;", "Utilities . verbose Log ( STR_ + time Since Cluster Last Updated Cluster State ) ;", "if ( time Since Cluster Last Updated Cluster State > NUM_ * grid Check Interval * NUM_ ) {", "Utilities . verbose Log ( STR_ + cluster State . to String ( ) ) ;", "return false ; } }", "else {", "return false ; }", "if ( tier == max Tier Depth ) {", "return false ; }", "if ( life Remaining ( ) < ( maximum Life Millis * NUM_ ) ) {", "return false ; }", "switch ( tier ) {", "case NUM_ :", "can Spawn Worker = true ;", "break ;", "case NUM_ :", "can Spawn Worker = true ;", "break ;", "case NUM_ :", "can Spawn Worker = true ;", "break ;", "case NUM_ :", "can Spawn Worker = true ;", "break ;", "default :", "if ( grid Throttle ) {", "can Spawn Worker = false ; }", "else {", "can Spawn Worker = true ; } }", "return can Spawn Worker ; }"]}
{"ids": "14846", "code": ["public boolean equals ( Object object ) {", "if ( object == null || ! ( object instanceof Session ID ) ) {", "return false ; }", "Session ID another = ( Session ID ) object ;", "return encrypted String . equals ( another . encrypted String ) ; }"]}
{"ids": "75827", "code": ["public static boolean are Identical ( String player Ident , Offline Player compare To ) {", "return player Ident . equals ( get Identification For As String ( compare To ) ) ; }"]}
{"ids": "39139", "code": ["protected String string Without Header ( ) {", "String Buffer text = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < num Instances ( ) ; i ++ ) {", "text . append ( instance ( i ) ) ;", "if ( i < num Instances ( ) - NUM_ ) {", "text . append ( STR_ ) ; } }", "return text . to String ( ) ; }"]}
{"ids": "13824", "code": ["public AM Primary Mast Head View Bean ( String name ) {", "super ( name ) ; }"]}
{"ids": "11738", "code": ["public boolean consumed Gesture ( ) {", "return reacted ; }"]}
{"ids": "73257", "code": ["private void initialize Layer ( List < Neuron > layer , Neuron Update Rule node Type , int nodes ) {", "for ( int i = NUM_ ; i < nodes ; i ++ ) {", "Neuron node = new Neuron ( get Parent Network ( ) , node Type ) ;", "layer . add ( node ) ; } }"]}
{"ids": "71092", "code": ["public static double angle ( Coordinate p ) {", "return Math . atan 2 ( p . y , p . x ) ; }"]}
{"ids": "73421", "code": ["public void fire Neuron Moved ( final Neuron moved ) {", "for ( Neuron Listener listener : neuron Listeners ) {", "listener . neuron Moved ( new Network Event < Neuron > ( this , moved ) ) ; } }"]}
{"ids": "11950", "code": ["public static X 509 Certificate create Certificate From Bytes ( byte [ ] cert Bytes ) {", "X 509 Certificate cert = null ;", "Certificate Factory cert Factory ;", "try {", "cert Factory = Certificate Factory . get Instance ( STR_ ) ;", "Input Stream in = new Byte Array Input Stream ( cert Bytes ) ;", "cert = ( X 509 Certificate ) cert Factory . generate Certificate ( in ) ; }", "catch ( Certificate Exception e ) {", "logger . warn ( STR_ + STR_ , e ) ; }", "return cert ; }"]}
{"ids": "23335", "code": ["public Terms Ack Parser parse ( ) throws Parser Configuration Exception , SAX Exception , Parse Failure Exception {", "try {", "SAX Parser Factory factory = SAX Parser Factory . new Instance ( ) ;", "SAX Parser parser = factory . new SAX Parser ( ) ;", "parser . parse ( m Input Source , this ) ;", "return this ; }", "catch ( IO Exception e ) {", "throw new Parse Failure Exception ( STR_ , e ) ; } }"]}
{"ids": "34562", "code": ["public static String format ( final String value , String ... params ) {", "validate ( value , NULL STRING PREDICATE , NULL STRING MSG SUPPLIER ) ;", "Pattern p = Pattern . compile ( STR_ ) ;", "Matcher m = p . matcher ( value ) ;", "String result = value ;", "while ( m . find ( ) ) {", "int param Number = Integer . parse Int ( m . group ( NUM_ ) ) ;", "if ( params == null || param Number >= params . length ) {", "throw new Illegal Argument Exception ( STR_ + m . group ( ) ) ; }", "result = result . replace ( m . group ( ) , params [ param Number ] ) ; }", "return result ; }"]}
{"ids": "26013", "code": ["public Builder server ( String server ) {", "if ( server . ends With ( STR_ ) == false ) {", "server = server + STR_ ; }", "this . server = server ;", "return this ; }"]}
{"ids": "30535", "code": ["private Response Packet execute Count ( Query Template Packet template , IJ Space space , Transaction txn ) throws SQL Exception {", "try {", "template . set Routing ( get Routing ( ) ) ;", "template . set Explain Plan ( get Explain Plan ( ) ) ;", "int count = space . count ( template , txn , get Read Modifier ( ) ) ;", "Response Packet response = new Response Packet ( ) ;", "Object [ ] [ ] values = new Object [ NUM_ ] [ NUM_ ] ;", "values [ NUM_ ] [ NUM_ ] = count ;", "Result Entry result = new Result Entry ( new String [ ] { get Count Column Name ( ) } , new String [ ] { get Count Column Label ( ) } , new String [ ] { STR_ } , values ) ;", "response . set Result Entry ( result ) ;", "return response ; }", "catch ( Exception e ) {", "if ( logger . is Loggable ( Level . SEVERE ) ) {", "logger . log ( Level . SEVERE , e . get Message ( ) , e ) ; }", "throw new SQL Exception ( STR_ + e , STR_ , - NUM_ ) ; } }"]}
{"ids": "37868", "code": ["void derive Confidence Value ( double base Count ) {", "if ( Utils . is Missing Value ( m confidence ) && ! Utils . is Missing Value ( base Count ) && base Count > NUM_ ) {", "m confidence = m record Count / base Count ; } }"]}
{"ids": "77296", "code": ["public Modifiable Solr Params add ( String name , String ... val ) {", "String [ ] old = vals . put ( name , val ) ;", "if ( old != null ) {", "if ( val == null || val . length < NUM_ ) {", "String [ ] both = new String [ old . length + NUM_ ] ;", "System . arraycopy ( old , NUM_ , both , NUM_ , old . length ) ;", "both [ old . length ] = null ;", "vals . put ( name , both ) ; }", "else {", "String [ ] both = new String [ old . length + val . length ] ;", "System . arraycopy ( old , NUM_ , both , NUM_ , old . length ) ;", "System . arraycopy ( val , NUM_ , both , old . length , val . length ) ;", "vals . put ( name , both ) ; } }", "return this ; }"]}
{"ids": "66247", "code": ["public Byte Array Data Source ( Input Stream is , String type ) {", "try {", "Byte Array Output Stream os = new Byte Array Output Stream ( ) ;", "int ch ;", "while ( ( ch = is . read ( ) ) != - NUM_ ) {", "os . write ( ch ) ; }", "m data = os . to Byte Array ( ) ; }", "catch ( IO Exception ioex ) {", "log . log ( Level . WARNING , STR_ , ioex ) ; }", "if ( type != null && type . length ( ) > NUM_ ) m type = type ; }"]}
{"ids": "20676", "code": ["public static int inflate ( byte [ ] previous , int previous Length , byte [ ] current , int current Length , byte [ ] result ) {", "if ( previous == null ) {", "System . arraycopy ( current , NUM_ , result , NUM_ , current Length ) ;", "return current Length ; }", "int length = NUM_ ;", "int start 1 = NUM_ ;", "int start 2 = NUM_ ;", "while ( start 1 < previous Length && start 2 < current Length ) {", "int end 1 = start 1 ;", "while ( end 1 < previous Length && previous [ end 1 ] != STR_ ) {", "end 1 ++ ; }", "int end 2 = start 2 ;", "while ( end 2 < current Length && current [ end 2 ] != STR_ ) {", "end 2 ++ ; }", "if ( current [ start 2 ] == STR_ && end 2 == start 2 + NUM_ ) {", "for ( int i = start 1 ; i < end 1 ; i ++ ) result [ length ++ ] = previous [ i ] ; }", "else {", "for ( int i = start 2 ; i < end 2 ; i ++ ) result [ length ++ ] = current [ i ] ; }", "if ( end 2 < current Length ) result [ length ++ ] = STR_ ;", "start 1 = end 1 + NUM_ ;", "start 2 = end 2 + NUM_ ; }", "return length ; }"]}
{"ids": "35835", "code": ["private void Legends ( List < String > legends list , List < Integer > color code list ) {", "text Paint . set Color ( Color . BLACK ) ;", "text Paint . set Text Size ( NUM_ ) ;", "int left = ( int ) ( graphwidth * NUM_ ) ;", "for ( int i = NUM_ ; i < legends list . size ( ) ; i ++ ) {", "String label = legends list . get ( i ) ;", "float text width = text Paint . measure Text ( label , NUM_ , label . length ( ) ) ;", "int color = color code list . get ( i ) ;", "if ( ! ( ( graphwidth - legend Left ) > ( text width + NUM_ ) ) ) {", "legend Top -= NUM_ ;", "legend Left = left ; }", "add Legends ( canvas , color , legend Top , legend Left , legend Right , legend Bottom , label ) ;", "legend Left += ( ( int ) text width + NUM_ ) ; } }"]}
{"ids": "19702", "code": ["private void fetch Metadata ( Table Map Log Event table Event ) throws SQL Exception , Replicator Exception {", "if ( metadata Cache == null ) metadata Cache = new Table Metadata Cache ( NUM_ ) ;", "Table table = metadata Cache . retrieve ( table Event . get Database Name ( ) , table Event . get Table Name ( ) ) ;", "if ( table == null || table . get Table Id ( ) != table Event . get Table Id ( ) ) {", "prepare Metadata Connection ( ) ;", "table = metadata Connection . find Table ( table Event . get Database Name ( ) , table Event . get Table Name ( ) , false ) ;", "if ( table != null ) {", "table . set Table Id ( table Event . get Table Id ( ) ) ;", "metadata Cache . store ( table ) ; } }", "else if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ + table Event . get Database Name ( ) + STR_ + table Event . get Table Name ( ) + STR_ ) ;", "if ( table == null ) {", "logger . warn ( STR_ + table Event . get Database Name ( ) + STR_ + table Event . get Table Name ( ) ) ; }", "else {", "table Event . set Table ( table ) ; } }"]}
{"ids": "54340", "code": ["public String encode ( ) {", "String Buffer sb = new String Buffer ( ) ;", "encode ( sb ) ;", "return sb . to String ( ) ; }"]}
{"ids": "3532", "code": ["@ Override public int read ( byte [ ] buf , int offset , int len ) throws IO Exception {", "int available = available ;", "if ( available > NUM_ ) {", "len = Math . min ( len , available ) ;", "len = next . read ( buf , offset , len ) ;", "if ( len > NUM_ ) {", "available -= len ; } }", "else if ( available == NUM_ ) {", "available = read Chunk Length ( ) ;", "if ( available > NUM_ ) {", "len = Math . min ( len , available ) ;", "len = next . read ( buf , offset , len ) ;", "if ( len > NUM_ ) available -= len ; }", "else {", "available = - NUM_ ;", "len = - NUM_ ; } }", "else {", "len = - NUM_ ; }", "return len ; }"]}
{"ids": "14301", "code": ["@ Override public void flush ( ) {", "Flush Task task ;", "synchronized ( log Records ) {", "task = new Flush Task ( new Array List < String > ( log Records ) ) ;", "log Records . clear ( ) ; }", "task . run ( ) ; }"]}
{"ids": "78371", "code": ["public static Array List < Page > page Creator Buttons ( Array List < Page > pages , Item manual Type ) {", "Array List < Page > new Pages = new Array List < > ( ) ;", "int page Amount = pages . size ( ) ;", "int times = NUM_ ;", "while ( page Amount > NUM_ ) {", "Array List < Page > pages Temp = new Array List < > ( ) ;", "pages Temp . add All ( pages . sub List ( NUM_ * times , ( page Amount > NUM_ ? NUM_ + NUM_ * times : NUM_ * times + page Amount ) ) ) ;", "int height = NUM_ ;", "Array List < Manual Widget Base > widgets = new Array List < > ( ) ;", "for ( Page page : pages Temp ) {", "widgets . add ( new Button Widget ( NUM_ , NUM_ + height , page ) ) ;", "height += NUM_ ; }", "new Pages . add ( new Page ( STR_ + times , ( Array List < Manual Widget Base > ) widgets . clone ( ) , false , manual Type ) ) ;", "widgets . clear ( ) ;", "pages Temp . clear ( ) ;", "page Amount -= NUM_ ;", "times ++ ; }", "return new Pages ; }"]}
{"ids": "21654", "code": ["protected List < String > create New Export Mask Workflow For Initiators ( List < URI > initiator UR Is , Export Group export Group , Workflow workflow , Map < URI , Integer > volume Map , Storage System storage , String token , String previous Step ) throws Exception {", "List < String > new Steps = new Array List < > ( ) ;", "if ( ! initiator UR Is . is Empty ( ) ) {", "Map < String , List < URI > > compute Resource To Initiators = map Initiators To Compute Resource ( export Group , initiator UR Is ) ;", "for ( Map . Entry < String , List < URI > > resource Entry : compute Resource To Initiators . entry Set ( ) ) {", "String compute Key = resource Entry . get Key ( ) ;", "List < URI > compute Initiator UR Is = resource Entry . get Value ( ) ;", "log . info ( String . format ( STR_ , compute Key ) ) ;", "Gen Export Mask Create Workflow Result result = generate Device Specific Export Mask Create Work Flow ( workflow , previous Step , storage , export Group , compute Initiator UR Is , volume Map , token ) ;", "previous Step = result . get Step Id ( ) ;", "new Steps . add ( previous Step ) ; } }", "if ( new Steps . is Empty ( ) && previous Step != null ) {", "new Steps . add ( previous Step ) ; }", "return new Steps ; }"]}
{"ids": "36841", "code": ["public static List < I Navi Project > load Projects ( final Abstract SQL Provider provider , final Debugger Template Manager debugger Manager ) throws Couldnt Load Data Exception {", "Postgre SQL Database Functions . check Arguments ( provider , debugger Manager ) ;", "final C Connection connection = provider . get Connection ( ) ;", "final List < I Navi Project > projects = new Array List < > ( ) ;", "if ( ! Postgre SQL Helpers . has Table ( connection , C Table Names . PROJECTS TABLE ) ) {", "return projects ; }", "String query = STR_ + STR_ + C Table Names . ADDRESS SPACES TABLE + STR_ + C Table Names . PROJECTS TABLE + STR_ + STR_ + C Table Names . PROJECTS TABLE ;", "try ( Result Set result Set = connection . execute Query ( query , true ) ) {", "while ( result Set . next ( ) ) {", "final int project Id = result Set . get Int ( STR_ ) ;", "final String name = Postgre SQL Helpers . read String ( result Set , STR_ ) ;", "final String description = Postgre SQL Helpers . read String ( result Set , STR_ ) ;", "final int address Space Count = result Set . get Int ( STR_ ) ;", "final Timestamp creation Date = result Set . get Timestamp ( STR_ ) ;", "final Timestamp modification Date = result Set . get Timestamp ( STR_ ) ;", "final List < Debugger Template > debuggers = Postgre SQL Database Functions . get Assigned Debuggers ( connection , project Id , debugger Manager ) ;", "projects . add ( new C Project ( project Id , name , description == null ? STR_ : description , creation Date , modification Date , address Space Count , debuggers , provider ) ) ; } }", "catch ( final SQL Exception e ) {", "throw new Couldnt Load Data Exception ( e ) ; }", "return new Array List < I Navi Project > ( projects ) ; }"]}
{"ids": "12900", "code": ["public String syllabify ( String phone String ) {", "Linked List < String > phone List = split Into Allophones ( phone String ) ;", "syllabify ( phone List ) ;", "String Builder sb = new String Builder ( ) ;", "for ( String p : phone List ) {", "if ( sb . length ( ) > NUM_ ) sb . append ( STR_ ) ;", "sb . append ( p ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "53577", "code": ["@ Override protected Node remove From Frontier ( ) {", "clean Up Frontier ( ) ;", "Node result = frontier . remove ( ) ;", "update Metrics ( frontier . size ( ) ) ;", "set Explored ( result ) ;", "return result ; }"]}
{"ids": "19947", "code": ["public static boolean is File ( String path ) {", "File f = new File ( path ) ;", "return f . is File ( ) ; }"]}
{"ids": "46824", "code": ["public boolean equals ( Object object ) {", "if ( ! ( object instanceof Object Instance ) ) {", "return false ; }", "Object Instance val = ( Object Instance ) object ;", "if ( ! name . equals ( val . get Object Name ( ) ) ) return false ;", "if ( class Name == null ) return ( val . get Class Name ( ) == null ) ;", "return class Name . equals ( val . get Class Name ( ) ) ; }"]}
{"ids": "10377", "code": ["public Zookeeper Embedded ( int port ) {", "this . port = port ;", "this . log Dir = new File ( System . get Property ( STR_ ) , STR_ + port ) ; }"]}
{"ids": "62024", "code": ["public Basic Condition ( String variable , Value value , Relation relation ) {", "this . variable = Template . create ( variable ) ;", "this . template Value = Template . create ( value . to String ( ) ) ;", "this . ground Value = value ;", "this . relation = relation ; }"]}
{"ids": "43315", "code": ["public static Set < String > read Stopwords Path ( Path path , boolean lowercase ) throws IO Exception {", "return read Stopwords Input Stream ( Files . new Input Stream ( path ) , lowercase ) ; }"]}
{"ids": "56307", "code": ["public static < T extends Throwable > T write Stack Traces ( T throwable , Stream Output out ) throws IO Exception {", "Stack Trace Element [ ] stack Trace = throwable . get Stack Trace ( ) ;", "out . write V Int ( stack Trace . length ) ;", "for ( Stack Trace Element element : stack Trace ) {", "out . write String ( element . get Class Name ( ) ) ;", "out . write Optional String ( element . get File Name ( ) ) ;", "out . write String ( element . get Method Name ( ) ) ;", "out . write V Int ( element . get Line Number ( ) ) ; }", "Throwable [ ] suppressed = throwable . get Suppressed ( ) ;", "out . write V Int ( suppressed . length ) ;", "for ( Throwable t : suppressed ) {", "out . write Throwable ( t ) ; }", "return throwable ; }"]}
{"ids": "8053", "code": ["public Distributed Log Multi Stream Writer build ( ) {", "Preconditions . check Argument ( ( null != streams && ! streams . is Empty ( ) ) , STR_ ) ;", "Preconditions . check Not Null ( client , STR_ ) ;", "Preconditions . check Not Null ( codec , STR_ ) ;", "Preconditions . check Argument ( first Speculative Timeout Ms > NUM_ && first Speculative Timeout Ms <= max Speculative Timeout Ms && speculative Backoff Multiplier > NUM_ && max Speculative Timeout Ms < request Timeout Ms , STR_ ) ;", "return new Distributed Log Multi Stream Writer ( streams , client , Math . min ( buffer Size , MAX LOGRECORDSET SIZE ) , flush Interval Micros , request Timeout Ms , first Speculative Timeout Ms , max Speculative Timeout Ms , speculative Backoff Multiplier , codec , ticker , executor Service ) ; }"]}
{"ids": "65929", "code": ["private Image Element ( int AD Print Format Item ID ) {", "load Attachment ( AD Print Format Item ID ) ; }"]}
{"ids": "36904", "code": ["public Thread Register Values ( final Thread Registers values ) {", "m tid = values . get Tid ( ) ;", "for ( final Register Value value : values . get Registers ( ) ) {", "m values . add ( new Register ( value ) ) ; } }"]}
{"ids": "35770", "code": ["public Launcher Discovery Request Builder configuration Parameters ( Map < String , String > configuration Parameters ) {", "Preconditions . not Null ( configuration Parameters , STR_ ) ;", "configuration Parameters . for Each ( null ) ;", "return this ; }"]}
{"ids": "70384", "code": ["public boolean is Triggered ( ) {", "return checkbox . is Selected ( ) ; }"]}
{"ids": "10189", "code": ["public void add All ( int index , int [ ] data ) {", "int data Len = data . length ;", "if ( data Len == NUM_ ) {", "return ; }", "int newcap = size + ( int ) ( data Len * NUM_ ) + NUM_ ;", "ensure Capacity ( newcap ) ;", "System . arraycopy ( array , index , array , index + data Len , size - index ) ;", "System . arraycopy ( data , NUM_ , array , index , data Len ) ;", "size += data Len ; }"]}
{"ids": "82405", "code": ["public int read ( byte [ ] b ) throws java . io . IO Exception {", "return read ( b , NUM_ , b . length ) ; }"]}
{"ids": "76625", "code": ["public void remove Scanning Callback ( One Sheeld Scanning Callback scanning Callback ) {", "if ( scanning Callback != null && scanning Callbacks . contains ( scanning Callback ) ) scanning Callbacks . remove ( scanning Callback ) ; }"]}
{"ids": "66223", "code": ["public void paint Rect ( Graphics g , J Component c , int x , int y , int w , int h ) {", "Rectangle bounds = c . get Bounds ( ) ;", "check ( bounds ) ;", "g . draw Image ( m back Image , x , y , x + w , h + y , x , y , x + w , y + h , c ) ; }"]}
{"ids": "65923", "code": ["private boolean is Page Break ( int row ) {", "for ( int i = NUM_ ; i < m page Break . size ( ) ; i ++ ) {", "Integer rr = ( Integer ) m page Break . get ( i ) ;", "if ( rr . int Value ( ) + NUM_ == row ) return true ;", "else if ( rr . int Value ( ) > row ) return false ; }", "return false ; }"]}
{"ids": "10432", "code": ["public Executor Service shutdown ( ) {", "pool . shutdown ( ) ;", "return pool ; }"]}
{"ids": "53559", "code": ["public static boolean is Proposition Symbol Identifier Part ( char ch ) {", "return Character . is Java Identifier Part ( ch ) ; }"]}
{"ids": "12463", "code": ["public static void o ( Zdiagmat D ) {", "o ( D , Parameters . Output Field Width , Parameters . Output Frac Places ) ; }"]}
{"ids": "20708", "code": ["public int search ( String txt ) {", "int M = pat . length ( ) ;", "int N = txt . length ( ) ;", "int skip ;", "for ( int i = NUM_ ; i <= N - M ; i += skip ) {", "skip = NUM_ ;", "for ( int j = M - NUM_ ; j >= NUM_ ; j -- ) {", "if ( pat . char At ( j ) != txt . char At ( i + j ) ) {", "skip = Math . max ( NUM_ , j - right [ txt . char At ( i + j ) ] ) ;", "break ; } }", "if ( skip == NUM_ ) return i ; }", "return N ; }"]}
{"ids": "32744", "code": ["public String to Chars ( int [ ] indices ) {", "String Builder s = new String Builder ( indices . length ) ;", "for ( int i = NUM_ ; i < indices . length ; i ++ ) s . append ( to Char ( indices [ i ] ) ) ;", "return s . to String ( ) ; }"]}
{"ids": "66430", "code": ["public static final String trunc ( final String str , final int length ) {", "if ( str == null ) {", "return str ; }", "if ( str . length ( ) <= length ) {", "return str ; }", "return str . substring ( NUM_ , length ) ; }"]}
{"ids": "232", "code": ["public void clear Transactions ( int from Height ) {", "lock . lock ( ) ;", "try {", "if ( from Height == NUM_ ) {", "unspent . clear ( ) ;", "spent . clear ( ) ;", "pending . clear ( ) ;", "dead . clear ( ) ;", "transactions . clear ( ) ; }", "else {", "throw new Unsupported Operation Exception ( ) ; } }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "80584", "code": ["@ Override public boolean load ( final Player player , final List < String > args ) {", "groovy Binding . set Variable ( STR_ , player ) ;", "if ( args != null ) {", "groovy Binding . set Variable ( STR_ , args . to Array ( new String [ args . size ( ) ] ) ) ; }", "else {", "groovy Binding . set Variable ( STR_ , new String [ NUM_ ] ) ; }", "final Groovy Shell interp = new Groovy Shell ( groovy Binding ) ;", "boolean ret = true ;", "pre Execute ( player , args ) ;", "try {", "final File f = new File ( groovy Script ) ;", "interp . evaluate ( f ) ; }", "catch ( final Exception e ) {", "logger . error ( STR_ + groovy Script , e ) ;", "set Message ( e . get Message ( ) ) ;", "ret = false ; }", "catch ( final Error e ) {", "logger . error ( STR_ + groovy Script , e ) ;", "set Message ( e . get Message ( ) ) ;", "ret = false ; }", "post Execute ( player , args , ret ) ;", "return ( ret ) ; }"]}
{"ids": "29501", "code": ["@ Override public boolean was Successful ( ) {", "return is Finished ( ) && get Current Points ( ) >= success Threashold ; }"]}
{"ids": "70702", "code": ["void start Locating Phone ( ) {", "Intent intent = new Intent ( s Context , Location Service . class ) ;", "intent . set Action ( Location Service . START SERVICE ) ;", "intent . put Extra ( STR_ , this . m Answer To ) ;", "s Context . start Service ( intent ) ; }"]}
{"ids": "20032", "code": ["public void delete Resource Config ( String cluster Name , Resource Type resource Type , String ds Name ) throws Configuration Exception {", "if ( get Cluster Home ( ) == null ) {", "throw new Configuration Exception ( STR_ ) ; }", "File resources = get Dir ( get Resource Config Dir Name ( get Cluster Home ( ) , cluster Name , resource Type ) ) ;", "String del File Name = resources . get Absolute Path ( ) + File . separator + ds Name + STR_ ;", "del File ( del File Name ) ; }"]}
{"ids": "55598", "code": ["public Bus Movement ( Bus Movement proto ) {", "super ( proto ) ;", "this . control System = proto . control System ;", "this . id = next ID ++ ;", "control System . register Bus ( this ) ;", "start Mode = true ; }"]}
{"ids": "37134", "code": ["private void create Gui ( ) {", "for ( final I Results Panel panel : m factory ) {", "m tabbed Pane . add Tab ( panel . get Title ( ) , panel . get Component ( ) ) ; }", "add ( m tabbed Pane , Border Layout . CENTER ) ;", "m tabbed Pane . set Visible ( true ) ; }"]}
{"ids": "53504", "code": ["public static float generate Random Float Between ( float lower Limit , float upper Limit ) {", "return lower Limit + ( ( upper Limit - lower Limit ) * r . next Float ( ) ) ; }"]}
{"ids": "49488", "code": ["private void connect ( ) {", "if ( ! connected ) {", "update Info ( ) ;", "String connect String = STR_ + connect Address + STR_ + connect Port ;", "if ( client Id == null || client Id . length ( ) < NUM_ ) {", "out ( get Date ( ) + Messages . Mqtt Client View 15 + connect String + Messages . Mqtt Client View 16 ) ;", "return ; }", "try {", "if ( first Connect ) {", "mqtt Client = new Mqtt Client ( connect String , client Id ) ;", "mqtt Client . set Callback ( this ) ;", "first Connect = false ; } }", "catch ( Mqtt Exception e ) {", "out ( get Date ( ) + Messages . Mqtt Client View 17 + e . get Message ( ) ) ;", "e . print Stack Trace ( ) ; }", "conn Opts = new Mqtt Connect Options ( ) ;", "conn Opts . set Clean Session ( clean Start ) ;", "conn Opts . set Connection Timeout ( NUM_ ) ;", "conn Opts . set Keep Alive Interval ( keep Alive ) ;", "if ( username . length ( ) > NUM_ && password . length ( ) > NUM_ ) {", "conn Opts . set Password ( password . to Char Array ( ) ) ;", "conn Opts . set User Name ( username ) ; }", "if ( use Will ) {", "if ( will Topic == null || will Topic . equals ( STR_ ) ) {", "out ( Messages . Mqtt Client View 19 ) ;", "return ; }", "conn Opts . set Will ( mqtt Client . get Topic ( will Topic ) , will Message . get Bytes ( ) , will Qos , will Retain ) ; }", "try {", "out ( get Date ( ) + Messages . Mqtt Client View 20 + connect String ) ;", "mqtt Client . connect ( conn Opts ) ;", "connected = true ;", "out ( get Date ( ) + Messages . Mqtt Client View 21 + client Id ) ; }", "catch ( Mqtt Exception e ) {", "out ( get Date ( ) + Messages . Mqtt Client View 22 + e . get Message ( ) ) ;", "e . print Stack Trace ( ) ; } }", "else {", "out ( Messages . Mqtt Client View 23 ) ; } }"]}
{"ids": "78613", "code": ["synchronized void add Tracer ( Tracer tracer ) {", "if ( cur Tracers . add ( tracer ) ) {", "LOG . trace ( to String ( ) + STR_ + tracer . to String ( ) ) ; } }"]}
{"ids": "32389", "code": ["private void grow ( ) {", "int new Cap = ( entries . length << NUM_ ) + NUM_ ;", "Object [ ] new Entries = new Object [ new Cap ] ;", "System . arraycopy ( entries , NUM_ , new Entries , NUM_ , size ) ;", "entries = new Entries ; }"]}
{"ids": "79924", "code": ["public void damage ( double value ) {", "set Value ( Math . max ( NUM_ , get Value ( ) - value ) ) ; }"]}
{"ids": "62051", "code": ["public Graph ( ) {", "roots = new Array List < Node > ( ) ;", "nodes = new Array List < Node > ( ) ;", "string = STR_ ; }"]}
{"ids": "66735", "code": ["private static String trim Version ( String api Version ) {", "if ( api Version == null ) {", "return null ; }", "else {", "String [ ] version Parts = api Version . split ( STR_ ) ;", "return version Parts [ version Parts . length - NUM_ ] ; } }"]}
{"ids": "9225", "code": ["@ Override public void incoming Object ( I Analyzed Interval analyzed Interval ) throws Ade Exception {", "if ( ! m percentiles With Empty Intervals && analyzed Interval . get Num Unique Message Ids ( ) == NUM_ ) {", "return ; }", "final double raw Score = calc Raw Score ( analyzed Interval ) ;", "if ( ! Seen Huge Log Prob ( analyzed Interval ) ) {", "m raw Scores . add ( raw Score ) ;", "++ m interval Count ; } }"]}
{"ids": "13351", "code": ["public static String read File As String ( File file , String encoding ) throws IO Exception {", "Byte Buffer buffer = read File ( file ) ;", "if ( null == encoding ) {", "encoding = STR_ ; }", "String converted = new String ( buffer . array ( ) , encoding ) ;", "return converted ; }"]}
{"ids": "32218", "code": ["public boolean need Preload Key ( int idx ) {", "return preload Keys != null && preload Keys . get ( idx ) ; }"]}
{"ids": "79198", "code": ["public int generate Challenge Token ( Inet Socket Address address ) {", "int token = random . next Int ( ) ;", "challenge Tokens . put ( address , token ) ;", "return token ; }"]}
{"ids": "42302", "code": ["@ Override public void perform ( IR ir ) {", "for ( Enumeration < Basic Block > e = ir . get Basic Blocks ( ) ; e . has More Elements ( ) ; ) {", "Basic Block bb = e . next Element ( ) ;", "if ( bb . is Empty ( ) ) continue ;", "container . counter 2 ++ ;", "if ( bb . get Infrequent ( ) ) {", "container . counter 1 ++ ;", "if ( ir . options . FREQ FOCUS EFFORT ) continue ; }", "for ( Enumeration < Instruction > ie = bb . forward Instr Enumerator ( ) ; ie . has More Elements ( ) ; ) {", "Instruction s = ie . next Element ( ) ;", "if ( Type Check . conforms ( s ) && ( invert Null And Type Checks ( s ) || push Type Check Below If ( s , ir ) ) ) {", "ie = bb . forward Instr Enumerator ( ) ; } } } }"]}
{"ids": "69405", "code": ["public void run With Retries ( Retryable Task task ) throws Exception {", "boolean max Sleep Interval Hit = false ;", "for ( int i = NUM_ ; i < num Attempts ; i ++ ) {", "try {", "task . run ( ) ;", "return ; }", "catch ( Exception e ) {", "if ( i == num Attempts - NUM_ ) {", "throw e ; }", "int sleep Time ;", "if ( max Sleep Interval Hit ) {", "sleep Time = max Sleep Interval ; }", "else {", "sleep Time = base Sleep Interval * ( int ) Math . pow ( NUM_ , i ) ; }", "LOG . error ( STR_ + sleep Time + STR_ , e ) ;", "try {", "Thread . sleep ( sleep Time * NUM_ ) ; }", "catch ( Interrupted Exception ie ) {", "LOG . error ( STR_ , ie ) ;", "throw ie ; } } } }"]}
{"ids": "143", "code": ["public Object pack ( ) {", "if ( collection ) {", "List l = ( List ) value ;", "if ( Types . is Array ( type ) ) {", "Object [ ] o = ( Object [ ] ) Array . new Instance ( item Type , l . size ( ) ) ;", "l . to Array ( o ) ;", "return o ; } }", "return value ; }"]}
{"ids": "62991", "code": ["public void remove Request ( Interrupt Request interrupt Request ) {", "synchronized ( interrupt Request Queue ) {", "interrupt Request Queue . remove ( interrupt Request ) ; } }"]}
{"ids": "8585", "code": ["@ Suppress Lint ( STR_ ) @ Nullable public static Drawable inflate ( boolean force System Handling When Possible , @ Non Null Resources resources , @ Drawable Res int id ) {", "boolean system Handling = is System Handling ( force System Handling When Possible ) ;", "Log . d ( LOG TAG , String . format ( STR_ , Integer . to Hex String ( id ) , system Handling ) ) ;", "if ( system Handling ) {", "return resources . get Drawable ( id , null ) ; }", "try {", "return Vector Drawable . create ( resources , id ) ; }", "catch ( Resources . Not Found Exception e ) {", "return null ; } }"]}
{"ids": "32045", "code": ["public static long object Field Offset ( Field field ) {", "return UNSAFE . object Field Offset ( field ) ; }"]}
{"ids": "65338", "code": ["long timestamp ( long timestamp ) {", "this . timestamp = Math . max ( this . timestamp , timestamp ) ;", "return this . timestamp ; }"]}
{"ids": "85346", "code": ["public Material Package ( Material Package BO material Package BO , List < Generic Track > generic Tracks ) {", "super ( material Package BO ) ;", "this . material Package BO = material Package BO ;", "this . generic Tracks = Collections . unmodifiable List ( generic Tracks ) ; }"]}
{"ids": "71118", "code": ["public Edge find Edge In Same Direction ( Coordinate p 0 , Coordinate p 1 ) {", "for ( int i = NUM_ ; i < edges . size ( ) ; i ++ ) {", "Edge e = ( Edge ) edges . get ( i ) ;", "Coordinate [ ] e Coord = e . get Coordinates ( ) ;", "if ( match In Same Direction ( p 0 , p 1 , e Coord [ NUM_ ] , e Coord [ NUM_ ] ) ) return e ;", "if ( match In Same Direction ( p 0 , p 1 , e Coord [ e Coord . length - NUM_ ] , e Coord [ e Coord . length - NUM_ ] ) ) return e ; }", "return null ; }"]}
{"ids": "2545", "code": ["public void acquire Probabilities ( final String string ) {", "if ( string . length ( ) < NUM_ ) {", "return ; }", "for ( int i = NUM_ ; i < string . length ( ) ; ++ i ) {", "final char previous Char = string . char At ( i - NUM_ ) ;", "final char current Char = string . char At ( i - NUM_ ) ;", "final char next Char = string . char At ( i ) ;", "final String key = previous Char + STR_ + current Char ;", "if ( ! sequences . contains ( key ) ) {", "sequences . add ( key ) ; }", "Hash Map < Character , Integer > probabilities = sequence Probabilities . get ( key ) ;", "if ( probabilities == null ) {", "probabilities = new Hash Map < > ( ) ;", "sequence Probabilities . put ( key , probabilities ) ; }", "int existing Value = probabilities . get Or Default ( next Char , NUM_ ) ;", "++ existing Value ;", "probabilities . put ( next Char , existing Value ) ; } }"]}
{"ids": "49620", "code": ["protected final void resolve Issue ( Health Issue health Issue ) {", "Event Bus event Bus ;", "boolean was Issue Active ;", "synchronized ( m Lock ) {", "if ( m Health Event Bus == null ) {", "LOG . w ( STR_ + STR_ , health Issue . to String ( ) ) ;", "return ; }", "event Bus = m Health Event Bus ;", "was Issue Active = m Active Issues . remove ( health Issue ) ; }", "if ( was Issue Active ) {", "event Bus . post ( health Issue . resolved ) ; } }"]}
{"ids": "13136", "code": ["public boolean is Unparsed Entity ( String entity Name ) {", "Entity entity = ( Entity ) f Entities . get ( entity Name ) ;", "if ( entity == null ) {", "return false ; }", "return entity . is Unparsed ( ) ; }"]}
{"ids": "6501", "code": ["protected void process Focus Event ( Focus Event evt ) {", "super . process Focus Event ( evt ) ;", "if ( evt . get ID ( ) == Focus Event . FOCUS LOST ) {", "if ( popup != null ) hide Popup ( ) ; } }"]}
{"ids": "48750", "code": ["@ Override public synchronized void add Request Property ( String key , String value ) {", "if ( connected || connecting ) throw new Illegal State Exception ( STR_ ) ;", "if ( key == null ) throw new Null Pointer Exception ( STR_ ) ;", "if ( is External Message Header Allowed ( key , value ) ) {", "requests . add ( key , value ) ;", "if ( ! key . equals Ignore Case ( STR_ ) ) {", "user Headers . add ( key , value ) ; } } }"]}
{"ids": "23639", "code": ["public void execute ( Abortable Task task ) {", "Aborting Runnable ar = new Aborting Runnable ( task ) ;", "tasks . add ( ar ) ;", "try {", "exec . execute ( ar ) ; }", "catch ( Rejected Execution Exception e ) {", "tasks . remove ( ar ) ;", "throw e ; } }"]}
{"ids": "39734", "code": ["private void load Submissions ( ) {", "submissions . clear ( ) ;", "String [ ] users = J Plag Central . users List ( ) ;", "for ( int i = NUM_ ; i < users . length ; i ++ ) {", "Access Structure [ ] subm = J Plag Central . list Access Structures ( users [ i ] ) ;", "if ( subm != null && subm . length != NUM_ ) {", "for ( int j = NUM_ ; j < subm . length ; j ++ ) {", "submissions . add ( subm [ j ] ) ; } } } }"]}
{"ids": "47439", "code": ["private void sub Format ( int pattern Char Index , int count , Field Delegate delegate , String Buffer buffer , boolean use Date Format Symbols ) {", "int max Int Count = Integer . MAX VALUE ;", "String current = null ;", "int begin Offset = buffer . length ( ) ;", "int field = PATTERN INDEX TO CALENDAR FIELD [ pattern Char Index ] ;", "int value ;", "if ( field == Calendar Builder . WEEK YEAR ) {", "if ( calendar . is Week Date Supported ( ) ) {", "value = calendar . get Week Year ( ) ; }", "else {", "pattern Char Index = PATTERN YEAR ;", "field = PATTERN INDEX TO CALENDAR FIELD [ pattern Char Index ] ;", "value = calendar . get ( field ) ; } }", "else if ( field == Calendar Builder . ISO DAY OF WEEK ) {", "value = Calendar Builder . to ISO Day Of Week ( calendar . get ( Calendar . DAY OF WEEK ) ) ; }", "else {", "value = calendar . get ( field ) ; }", "int style = ( count >= NUM_ ) ? Calendar . LONG : Calendar . SHORT ;", "if ( ! use Date Format Symbols && field < Calendar . ZONE OFFSET && pattern Char Index != PATTERN MONTH STANDALONE ) {", "current = calendar . get Display Name ( field , style , locale ) ; }", "switch ( pattern Char Index ) {", "case PATTERN ERA :", "if ( use Date Format Symbols ) {", "String [ ] eras = format Data . get Eras ( ) ;", "if ( value < eras . length ) {", "current = eras [ value ] ; } }", "if ( current == null ) {", "current = STR_ ; }", "break ;", "case PATTERN WEEK YEAR :", "case PATTERN YEAR :", "if ( calendar instanceof Gregorian Calendar ) {", "if ( count != NUM_ ) {", "zero Padding Number ( value , count , max Int Count , buffer ) ; }", "else {", "zero Padding Number ( value , NUM_ , NUM_ , buffer ) ; } }", "else {", "if ( current == null ) {", "zero Padding Number ( value , style == Calendar . LONG ? NUM_ : count , max Int Count , buffer ) ; } }", "break ;", "case PATTERN MONTH :", "if ( use Date Format Symbols ) {", "String [ ] months ;", "if ( count >= NUM_ ) {", "months = format Data . get Months ( ) ;", "current = months [ value ] ; }", "else if ( count == NUM_ ) {", "months = format Data . get Short Months ( ) ;", "current = months [ value ] ; } }", "else {", "if ( count < NUM_ ) {", "current = null ; }", "else if ( force Standalone Form ) {", "current = calendar . get Display Name ( field , style | NUM_ , locale ) ;", "if ( current == null ) {", "current = calendar . get Display Name ( field , style , locale ) ; } } }", "if ( current == null ) {", "zero Padding Number ( value + NUM_ , count , max Int Count , buffer ) ; }", "break ;", "case PATTERN MONTH STANDALONE :", "assert current == null ;", "if ( locale == null ) {", "String [ ] months ;", "if ( count >= NUM_ ) {", "months = format Data . get Months ( ) ;", "current = months [ value ] ; }", "else if ( count == NUM_ ) {", "months = format Data . get Short Months ( ) ;", "current = months [ value ] ; } }", "else {", "if ( count >= NUM_ ) {", "current = calendar . get Display Name ( field , style | NUM_ , locale ) ; } }", "if ( current == null ) {", "zero Padding Number ( value + NUM_ , count , max Int Count , buffer ) ; }", "break ;", "case PATTERN HOUR OF DAY 1 :", "if ( current == null ) {", "if ( value == NUM_ ) {", "zero Padding Number ( calendar . get Maximum ( Calendar . HOUR OF DAY ) + NUM_ , count , max Int Count , buffer ) ; }", "else {", "zero Padding Number ( value , count , max Int Count , buffer ) ; } }", "break ;", "case PATTERN DAY OF WEEK :", "if ( use Date Format Symbols ) {", "String [ ] weekdays ;", "if ( count >= NUM_ ) {", "weekdays = format Data . get Weekdays ( ) ;", "current = weekdays [ value ] ; }", "else {", "weekdays = format Data . get Short Weekdays ( ) ;", "current = weekdays [ value ] ; } }", "break ;", "case PATTERN AM PM :", "if ( use Date Format Symbols ) {", "String [ ] ampm = format Data . get Am Pm Strings ( ) ;", "current = ampm [ value ] ; }", "break ;", "case PATTERN HOUR 1 :", "if ( current == null ) {", "if ( value == NUM_ ) {", "zero Padding Number ( calendar . get Least Maximum ( Calendar . HOUR ) + NUM_ , count , max Int Count , buffer ) ; }", "else {", "zero Padding Number ( value , count , max Int Count , buffer ) ; } }", "break ;", "case PATTERN ZONE NAME :", "if ( current == null ) {", "if ( format Data . locale == null || format Data . is Zone Strings Set ) {", "int zone Index = format Data . get Zone Index ( calendar . get Time Zone ( ) . get ID ( ) ) ;", "if ( zone Index == - NUM_ ) {", "value = calendar . get ( Calendar . ZONE OFFSET ) + calendar . get ( Calendar . DST OFFSET ) ;", "buffer . append ( Zone Info File . to Custom ID ( value ) ) ; }", "else {", "int index = ( calendar . get ( Calendar . DST OFFSET ) == NUM_ ) ? NUM_ : NUM_ ;", "if ( count < NUM_ ) {", "index ++ ; }", "String [ ] [ ] zone Strings = format Data . get Zone Strings Wrapper ( ) ;", "buffer . append ( zone Strings [ zone Index ] [ index ] ) ; } }", "else {", "Time Zone tz = calendar . get Time Zone ( ) ;", "boolean daylight = ( calendar . get ( Calendar . DST OFFSET ) != NUM_ ) ;", "int tzstyle = ( count < NUM_ ? Time Zone . SHORT : Time Zone . LONG ) ;", "buffer . append ( tz . get Display Name ( daylight , tzstyle , format Data . locale ) ) ; } }", "break ;", "case PATTERN ZONE VALUE :", "value = ( calendar . get ( Calendar . ZONE OFFSET ) + calendar . get ( Calendar . DST OFFSET ) ) / NUM_ ;", "int width = NUM_ ;", "if ( value >= NUM_ ) {", "buffer . append ( STR_ ) ; }", "else {", "width ++ ; }", "int num = ( value / NUM_ ) * NUM_ + ( value % NUM_ ) ;", "Calendar Utils . sprintf 0 d ( buffer , num , width ) ;", "break ;", "case PATTERN ISO ZONE :", "value = calendar . get ( Calendar . ZONE OFFSET ) + calendar . get ( Calendar . DST OFFSET ) ;", "if ( value == NUM_ ) {", "buffer . append ( STR_ ) ;", "break ; }", "value /= NUM_ ;", "if ( value >= NUM_ ) {", "buffer . append ( STR_ ) ; }", "else {", "buffer . append ( STR_ ) ;", "value = - value ; }", "Calendar Utils . sprintf 0 d ( buffer , value / NUM_ , NUM_ ) ;", "if ( count == NUM_ ) {", "break ; }", "if ( count == NUM_ ) {", "buffer . append ( STR_ ) ; }", "Calendar Utils . sprintf 0 d ( buffer , value % NUM_ , NUM_ ) ;", "break ;", "default :", "if ( current == null ) {", "zero Padding Number ( value , count , max Int Count , buffer ) ; }", "break ; }", "if ( current != null ) {", "buffer . append ( current ) ; }", "int field ID = PATTERN INDEX TO DATE FORMAT FIELD [ pattern Char Index ] ;", "Field f = PATTERN INDEX TO DATE FORMAT FIELD ID [ pattern Char Index ] ;", "delegate . formatted ( field ID , f , f , begin Offset , buffer . length ( ) , buffer ) ; }"]}
{"ids": "53395", "code": ["public static Bit value Of ( String bit ) throws Number Format Exception {", "final int i = Integer . parse Int ( bit ) ;", "if ( i != NUM_ && i != NUM_ ) {", "throw new Number Format Exception ( STR_ + bit + STR_ ) ; }", "return ( i > NUM_ ) ? TRUE : FALSE ; }"]}
{"ids": "73069", "code": ["public boolean next ( ) throws EOF Exception {", "if ( limit >= file Size ) {", "throw new EOF Exception ( STR_ ) ; }", "if ( mem . get Long Volatile ( Structure . Limit ) <= limit ) {", "return false ; }", "byte commit = mem . get Byte Volatile ( limit ) ;", "byte rollback = mem . get Byte Volatile ( limit + Length . Commit ) ;", "if ( rollback == Rollback . Set ) {", "limit += Length . Record Header + record Size ;", "timeout Counter = NUM_ ;", "timer Start = NUM_ ;", "return false ; }", "if ( commit == Commit . Set ) {", "timeout Counter = NUM_ ;", "timer Start = NUM_ ;", "return true ; }", "timeout Counter ++ ;", "if ( timeout Counter >= MAX TIMEOUT COUNT ) {", "if ( timer Start == NUM_ ) {", "timer Start = System . current Time Millis ( ) ; }", "else {", "if ( System . current Time Millis ( ) - timer Start >= max Timeout ) {", "mem . put Byte Volatile ( limit + Length . Commit , Rollback . Set ) ;", "limit += Length . Record Header + record Size ;", "timeout Counter = NUM_ ;", "timer Start = NUM_ ;", "return false ; } } }", "return false ; }"]}
{"ids": "80292", "code": ["private int compose Component ( int a , int b ) {", "return Math . min ( b + b * a / DIMMING FACTOR , NUM_ ) ; }"]}
{"ids": "71038", "code": ["public void remove Tree Model Listener ( Tree Model Listener l ) {", "tree Model Listeners . remove Element ( l ) ; }"]}
{"ids": "48214", "code": ["public URI Name ( String name ) throws IO Exception {", "try {", "uri = new URI ( name ) ; }", "catch ( URI Syntax Exception use ) {", "throw new IO Exception ( STR_ + name , use ) ; }", "if ( uri . get Scheme ( ) == null ) {", "throw new IO Exception ( STR_ + name ) ; }", "host = uri . get Host ( ) ;", "if ( host != null ) {", "if ( host . char At ( NUM_ ) == STR_ ) {", "String ip V 6 Host = host . substring ( NUM_ , host . length ( ) - NUM_ ) ;", "try {", "host IP = new IP Address Name ( ip V 6 Host ) ; }", "catch ( IO Exception ioe ) {", "throw new IO Exception ( STR_ + STR_ + name ) ; } }", "else {", "try {", "host DNS = new DNS Name ( host ) ; }", "catch ( IO Exception ioe ) {", "try {", "host IP = new IP Address Name ( host ) ; }", "catch ( Exception ioe 2 ) {", "throw new IO Exception ( STR_ + STR_ + STR_ + name ) ; } } } } }"]}
{"ids": "33396", "code": ["public void touch ( ) {", "candies Store = null ; }"]}
{"ids": "49369", "code": ["public Zone Rules to Rules ( String zone Id ) {", "Objects . require Non Null ( zone Id , STR_ ) ;", "if ( window List . is Empty ( ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "final List < Zone Offset Transition > standard Transition List = new Array List < > ( NUM_ ) ;", "final List < Zone Offset Transition > transition List = new Array List < > ( NUM_ ) ;", "final List < Zone Offset Transition Rule > last Transition Rule List = new Array List < > ( NUM_ ) ;", "final TZ Window first Window = window List . get ( NUM_ ) ;", "Zone Offset loop Standard Offset = first Window . standard Offset ;", "int loop Savings = NUM_ ;", "if ( first Window . fixed Saving Amount Secs != null ) {", "loop Savings = first Window . fixed Saving Amount Secs ; }", "final Zone Offset first Wall Offset = Zone Offset . of Total Seconds ( loop Standard Offset . get Total Seconds ( ) + loop Savings ) ;", "Local Date Time loop Window Start = Local Date Time . of ( YEAR MIN VALUE , NUM_ , NUM_ , NUM_ , NUM_ ) ;", "Zone Offset loop Window Offset = first Wall Offset ;", "for ( TZ Window window : window List ) {", "window . tidy ( loop Window Start . get Year ( ) ) ;", "Integer effective Savings = window . fixed Saving Amount Secs ;", "if ( effective Savings == null ) {", "effective Savings = NUM_ ;", "for ( TZ Rule rule : window . rule List ) {", "if ( rule . to Epoch Second ( loop Standard Offset , loop Savings ) > loop Window Start . to Epoch Second ( loop Window Offset ) ) {", "break ; }", "effective Savings = rule . saving Amount Secs ; } }", "if ( loop Standard Offset . equals ( window . standard Offset ) == false ) {", "standard Transition List . add ( new Zone Offset Transition ( Local Date Time . of Epoch Second ( loop Window Start . to Epoch Second ( loop Window Offset ) , NUM_ , loop Standard Offset ) , loop Standard Offset , window . standard Offset ) ) ;", "loop Standard Offset = window . standard Offset ; }", "Zone Offset effective Wall Offset = Zone Offset . of Total Seconds ( loop Standard Offset . get Total Seconds ( ) + effective Savings ) ;", "if ( loop Window Offset . equals ( effective Wall Offset ) == false ) {", "transition List . add ( new Zone Offset Transition ( loop Window Start , loop Window Offset , effective Wall Offset ) ) ; }", "loop Savings = effective Savings ;", "for ( TZ Rule rule : window . rule List ) {", "if ( rule . is Transition ( loop Savings ) ) {", "Zone Offset Transition trans = rule . to Transition ( loop Standard Offset , loop Savings ) ;", "if ( trans . to Epoch Second ( ) < loop Window Start . to Epoch Second ( loop Window Offset ) == false && trans . to Epoch Second ( ) < window . create Date Time Epoch Second ( loop Savings ) ) {", "transition List . add ( trans ) ;", "loop Savings = rule . saving Amount Secs ; } } }", "for ( TZ Rule last Rule : window . last Rule List ) {", "last Transition Rule List . add ( last Rule . to Transition Rule ( loop Standard Offset , loop Savings ) ) ;", "loop Savings = last Rule . saving Amount Secs ; }", "loop Window Offset = window . create Wall Offset ( loop Savings ) ;", "loop Window Start = Local Date Time . of Epoch Second ( window . create Date Time Epoch Second ( loop Savings ) , NUM_ , loop Window Offset ) ; }", "return new Zone Rules ( first Window . standard Offset , first Wall Offset , standard Transition List , transition List , last Transition Rule List ) ; }"]}
{"ids": "15730", "code": ["public void add Parse Template ( String parse Template ) {", "parse Templates . add ( parse Template ) ; }"]}
{"ids": "7033", "code": ["private void attach Image From Camera ( ) {", "try {", "if ( null != m Shooted Picture Path ) {", "Uri uri = Uri . from File ( new File ( m Shooted Picture Path ) ) ;", "try {", "Bitmap preview Bitmap = Vector App . get Saved Picker Image Preview ( ) ;", "String thumbnail Path = get Thumbnail Path ( m Shooted Picture Path ) ;", "int rotation Angle = Image Utils . get Rotation Angle For Bitmap ( Vector Medias Picker Activity . this , uri ) ;", "if ( NUM_ != rotation Angle ) {", "android . graphics . Matrix bitmap Matrix = new android . graphics . Matrix ( ) ;", "bitmap Matrix . post Rotate ( NUM_ - rotation Angle ) ;", "preview Bitmap = Bitmap . create Bitmap ( preview Bitmap , NUM_ , NUM_ , preview Bitmap . get Width ( ) , preview Bitmap . get Height ( ) , bitmap Matrix , false ) ; }", "File file = new File ( thumbnail Path ) ;", "File Output Stream out Stream = new File Output Stream ( file ) ;", "preview Bitmap . compress ( Bitmap . Compress Format . JPEG , NUM_ , out Stream ) ;", "out Stream . flush ( ) ;", "out Stream . close ( ) ; }", "catch ( Exception e ) {", "Log . e ( LOG TAG , STR_ ) ; }", "Bundle con Data = new Bundle ( ) ;", "Intent intent = new Intent ( ) ;", "intent . set Data ( uri ) ;", "intent . put Extras ( con Data ) ;", "set Result ( RESULT OK , intent ) ; } }", "catch ( Exception e ) {", "set Result ( RESULT CANCELED , null ) ; }", "finally {", "Vector App . set Saved Camera Image Preview ( null ) ;", "finish ( ) ; } }"]}
{"ids": "46856", "code": ["public Object Name pre Register ( M Bean Server server , Object Name name ) throws Exception {", "set M Bean Server ( server ) ;", "if ( name == null ) {", "name = new Object Name ( server . get Default Domain ( ) + STR_ + Service Name . MLET ) ; }", "this . mlet Object Name = name ;", "return this . mlet Object Name ; }"]}
{"ids": "63194", "code": ["static String match String Or Throw ( Pattern p , To Date Parser params , Enum < ? > a Enum ) {", "String s = params . get Input Str ( ) ;", "Matcher matcher = p . matcher ( s ) ;", "if ( ! matcher . find ( ) ) {", "throw Exception ( params , format ( STR_ , a Enum . name ( ) ) ) ; }", "return matcher . group ( NUM_ ) ; }"]}
{"ids": "438", "code": ["static Byte Buffer new Byte Buffer ( int capacity ) {", "Byte Buffer newbb = Byte Buffer . allocate ( capacity ) ;", "newbb . order ( Byte Order . LITTLE ENDIAN ) ;", "return newbb ; }"]}
{"ids": "67537", "code": ["private void validate Collection Attribute ( Collection Attribute collection , Set < String > all Collections ) {", "if ( collection == null || all Collections == null ) {", "return ; }", "for ( Rest Method rest Method : collection . get Methods ( ) ) {", "if ( all Collections . contains ( rest Method . get Rest Full Method Name ( ) ) ) {", "aspect . warning ( Simple Location . TOPLEVEL , STR_ + STR_ + STR_ + STR_ , collection . get Full Name ( ) , rest Method . get Rest Method Name ( ) ) ; } } }"]}
{"ids": "56456", "code": ["public Holt Winters Model Builder alpha ( double alpha ) {", "this . alpha = alpha ;", "return this ; }"]}
{"ids": "29120", "code": ["public static @ Check For Null Class Descriptor create Class Descriptor From Field Signature ( String signature ) {", "int start = signature . index Of ( STR_ ) ;", "if ( start < NUM_ ) {", "return null ; }", "int end = signature . index Of ( STR_ , start ) ;", "if ( end < NUM_ ) {", "return null ; }", "return create Class Descriptor ( signature . substring ( start + NUM_ , end ) ) ; }"]}
{"ids": "59968", "code": ["private static Service Ticket Response check Get Nfc Service Ticket Response ( Service Ticket Response service Ticket Response ) throws Rpc Exception {", "logger . info ( STR_ , service Ticket Response ) ;", "switch ( service Ticket Response . get Result ( ) ) {", "case OK :", "break ;", "case SYSTEM ERROR :", "throw new System Error Exception ( service Ticket Response . get Error ( ) ) ;", "case NOT FOUND :", "throw new Datastore Not Found Exception ( service Ticket Response . get Error ( ) ) ;", "default :", "throw new Rpc Exception ( String . format ( STR_ , service Ticket Response . get Error ( ) ) ) ; }", "return service Ticket Response ; }"]}
{"ids": "47386", "code": ["public void schedule ( Timer Task task , long delay ) {", "if ( delay < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "sched ( task , System . current Time Millis ( ) + delay , NUM_ ) ; }"]}
{"ids": "42020", "code": ["@ Override public Cursor swap Cursor ( Cursor new Cursor ) {", "m Alphabet Indexer . set Cursor ( new Cursor ) ;", "return super . swap Cursor ( new Cursor ) ; }"]}
{"ids": "68328", "code": ["public void lock Flushing ( ) {", "flush Lock . lock ( ) ; }"]}
{"ids": "19659", "code": ["public static boolean can Be Randomized ( Class clazz ) {", "return Class Utils . is Primitive Or Wrapper ( clazz ) || clazz . equals ( String . class ) || clazz . equals ( I Discord Client . class ) ; }"]}
{"ids": "21688", "code": ["public static String generate Native Guid ( String device Type , String serial Number ) {", "return String . format ( STR_ , device Type Map . get ( device Type ) , serial Number ) ; }"]}
{"ids": "37273", "code": ["private void sort Children ( final J Criterium Tree Node parent Node ) {", "final List < J Criterium Tree Node > operators = new Array List < J Criterium Tree Node > ( ) ;", "final List < J Criterium Tree Node > conditions = new Array List < J Criterium Tree Node > ( ) ;", "final List < J Criterium Tree Node > minus = new Array List < J Criterium Tree Node > ( ) ;", "final Enumeration < ? > children = parent Node . children ( ) ;", "while ( children . has More Elements ( ) ) {", "final J Criterium Tree Node child = ( J Criterium Tree Node ) children . next Element ( ) ;", "final I Criterium type = child . get Criterium ( ) ;", "if ( type instanceof C Condition Criterium ) {", "conditions . add ( child ) ; }", "else {", "operators . add ( child ) ; } }", "parent Node . remove All Children ( ) ;", "for ( final J Criterium Tree Node child : operators ) {", "parent Node . add ( child ) ;", "child . set Parent ( parent Node ) ; }", "for ( final J Criterium Tree Node child : conditions ) {", "parent Node . add ( child ) ;", "child . set Parent ( parent Node ) ; }", "for ( final J Criterium Tree Node child : minus ) {", "parent Node . add ( child ) ;", "child . set Parent ( parent Node ) ; } }"]}
{"ids": "44956", "code": ["public static int poisson ( double lambda ) {", "int k = NUM_ ;", "double p = NUM_ ;", "double L = Math . exp ( - lambda ) ;", "do {", "k ++ ;", "p *= uniform ( ) ; }", "while ( p >= L ) ;", "return k - NUM_ ; }"]}
{"ids": "19906", "code": ["public String build ( String input ) {", "input String = input ;", "input Index = NUM_ ;", "input Length = input . length ( ) ;", "output String = new String Buffer ( ) ;", "char next Char ;", "while ( ( next Char = get ( ) ) != NUM_ && output String . length ( ) < max Output Length ) {", "if ( next Char == STR_ ) {", "if ( input Starts With ( STR_ ) ) {", "String next Chars = peek ( NUM_ ) ;", "boolean have Bang Comment = false ;", "if ( next Chars != null && next Chars . length ( ) == NUM_ ) {", "have Bang Comment = true ;", "for ( int i = NUM_ ; i < next Chars . length ( ) ; i ++ ) {", "if ( ! Character . is Digit ( next Chars . char At ( i ) ) ) {", "have Bang Comment = false ;", "break ; } } }", "if ( have Bang Comment ) {", "skip ( NUM_ ) ;", "String contents = get To Delimiter ( STR_ ) ;", "if ( contents != null ) {", "put ( contents ) ;", "skip ( NUM_ ) ; } }", "else {", "put ( next Char ) ; } }", "else if ( input Starts With ( STR_ ) ) {", "if ( get To Delimiter ( STR_ ) != null ) skip ( NUM_ ) ; }", "else {", "put ( next Char ) ; } }", "else if ( next Char == STR_ ) {", "if ( input Starts With ( STR_ ) ) {", "String tail = peek ( NUM_ ) ;", "if ( tail == null ) {", "break ; }", "else {", "if ( Character . is Whitespace ( tail . char At ( NUM_ ) ) ) {", "String buf = get To End Of Line ( ) ;", "skip ( buf . length ( ) ) ;", "put ( STR_ ) ; }", "else put ( next Char ) ; } }", "else {", "put ( next Char ) ; } }", "else if ( next Char == STR_ ) {", "put ( STR_ ) ; }", "else {", "put ( next Char ) ; } }", "return output String . to String ( ) ; }"]}
{"ids": "81863", "code": ["public boolean is Builtin Sound Available ( String sound Identifier ) {", "return builtin Sounds . contains Key ( sound Identifier ) ; }"]}
{"ids": "15697", "code": ["public Iterator < String > iterate Serializers ( ) {", "return serializers . iterator ( ) ; }"]}
{"ids": "46843", "code": ["private static void check Key ( String key ) throws Malformed Object Name Exception {", "if ( key == null ) throw new Null Pointer Exception ( STR_ ) ;", "final int len = key . length ( ) ;", "if ( len == NUM_ ) throw new Malformed Object Name Exception ( STR_ ) ;", "final char [ ] k = key . to Char Array ( ) ;", "final int end Key = parse Key ( k , NUM_ ) ;", "if ( end Key < len ) throw new Malformed Object Name Exception ( STR_ + k [ end Key ] + STR_ ) ; }"]}
{"ids": "42035", "code": ["private void draw Arc ( Canvas canvas ) {", "if ( m Current Dash Mode . equals ( DASH MODE . DOWNLOAD ) ) {", "mn Indeterminate Start Position += ( NUM_ - mn Progress ) * mn Start Speed ;", "if ( ( mn Indeterminate Start Position > CIRCULAR FACTOR ) || ( mn Indeterminate Start Position < NUM_ ) ) {", "mn Indeterminate Start Position = NUM_ ; }", "Rect curr Rect = new Rect ( ) ;", "get Local Visible Rect ( curr Rect ) ;", "float n Ring Boundary Inner = mn Ring Radius - ( mn Ring Width / NUM_ ) - ( mn Arc Width / NUM_ ) ;", "m Arc Rect . set ( mn View Center - n Ring Boundary Inner , mn View Center - n Ring Boundary Inner , mn View Center + n Ring Boundary Inner , mn View Center + n Ring Boundary Inner ) ;", "m Paint . set Color ( m Arc Color ) ;", "m Paint . set Style ( Paint . Style . STROKE ) ;", "m Paint . set Stroke Width ( mn Arc Width ) ;", "m Paint . set Stroke Cap ( Paint . Cap . ROUND ) ;", "canvas . draw Arc ( m Arc Rect , mn Indeterminate Start Position , mn Arc Length , false , m Paint ) ; } }"]}
{"ids": "63147", "code": ["public static String format Date Time ( java . util . Date date , String format , String locale , String time Zone ) {", "Simple Date Format date Format = get Date Format ( format , locale , time Zone ) ;", "synchronized ( date Format ) {", "return date Format . format ( date ) ; } }"]}
{"ids": "47035", "code": ["protected Message Digest ( String algorithm ) {", "this . algorithm = algorithm ; }"]}
{"ids": "37179", "code": ["private void create Gui ( ) {", "final J Panel top Panel = new J Panel ( new Border Layout ( ) ) ;", "final J Panel inner Top Panel = new J Panel ( new Border Layout ( ) ) ;", "inner Top Panel . add ( m std Edit Panel ) ;", "top Panel . add ( inner Top Panel ) ;", "final J Panel debugger Chooser Panel = new J Panel ( new Border Layout ( ) ) ;", "debugger Chooser Panel . set Border ( new Titled Border ( STR_ ) ) ;", "m checked List = new J Checked Listbox < > ( new Vector < Debugger Template > ( ) , false ) ;", "update Checked List Panel ( ) ;", "final J Scroll Pane debugger Scroll Pane = new J Scroll Pane ( m checked List ) ;", "m checked List Panel . add ( debugger Scroll Pane ) ;", "debugger Chooser Panel . add ( m checked List Panel , Border Layout . CENTER ) ;", "debugger Chooser Panel . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "debugger Chooser Panel . set Preferred Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "inner Top Panel . add ( debugger Chooser Panel , Border Layout . SOUTH ) ;", "final J Panel button Panel = new J Panel ( new Grid Layout ( NUM_ , NUM_ ) ) ;", "button Panel . set Border ( new Empty Border ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "button Panel . add ( new J Panel ( ) ) ;", "button Panel . add ( m save Button ) ;", "top Panel . add ( button Panel , Border Layout . SOUTH ) ;", "final J Panel bottom Panel = new C Address Spaces Table Panel ( m table ) ;", "final J Scroll Pane scroll Pane = new J Scroll Pane ( m table ) ;", "bottom Panel . set Border ( m titled Border ) ;", "set Border ( new Empty Border ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "bottom Panel . add ( scroll Pane ) ;", "final J Split Pane split Pane = new J Split Pane ( J Split Pane . VERTICAL SPLIT , true , top Panel , bottom Panel ) ;", "split Pane . set One Touch Expandable ( true ) ;", "split Pane . set Divider Location ( split Pane . get Minimum Divider Location ( ) ) ;", "split Pane . set Resize Weight ( NUM_ ) ;", "add ( split Pane ) ; }"]}
{"ids": "79129", "code": ["private void copy A Cls ( final List < Access Control Level > access Control Levels 2 ) {", "for ( Access Control Level acl : this . access Control Levels ) {", "access Control Levels 2 . add ( new Access Control Level ( acl ) ) ; } }"]}
{"ids": "67384", "code": ["public void put ( Byte Buffer byte Buffer , int content Length ) {", "if ( content Length > ( bytes . length - this . content Length ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "byte Buffer . get ( bytes , this . content Length , content Length ) ;", "this . content Length += content Length ; }"]}
{"ids": "57307", "code": ["private void handle Response ( Avs Response response ) {", "boolean check After = ( avs Queue . size ( ) == NUM_ ) ;", "if ( response != null ) {", "for ( int i = response . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "if ( response . get ( i ) instanceof Avs Replace All Item || response . get ( i ) instanceof Avs Replace Enqueued Item ) {", "avs Queue . clear ( ) ;", "response . remove ( i ) ; } }", "Log . i ( TAG , STR_ + response . size ( ) + STR_ ) ;", "avs Queue . add All ( response ) ; }", "if ( check After ) {", "check Queue ( ) ; } }"]}
{"ids": "55238", "code": ["protected synchronized void request ( String stream ) {", "if ( stream == null || stream . is Empty ( ) ) {", "return ; }", "stream = stream . to Lower Case ( Locale . ENGLISH ) ;", "Follower Info cached Info = cached . get ( stream ) ;", "if ( cached Info == null || check Time Passed ( cached Info ) ) {", "if ( type == Follower . Type . FOLLOWER ) {", "api . request Followers ( stream ) ; }", "else if ( type == Follower . Type . SUBSCRIBER ) {", "api . request Subscribers ( stream ) ; } }", "else {", "if ( type == Follower . Type . FOLLOWER ) {", "listener . received Followers ( cached Info ) ; }", "else if ( type == Follower . Type . SUBSCRIBER ) {", "listener . received Subscribers ( cached Info ) ; } } }"]}
{"ids": "65533", "code": ["boolean remove View If Hidden ( View view ) {", "final int index = m Callback . index Of Child ( view ) ;", "if ( index == - NUM_ ) {", "if ( m Hidden Views . remove ( view ) && DEBUG ) {", "throw new Illegal State Exception ( STR_ ) ; }", "return true ; }", "if ( m Bucket . get ( index ) ) {", "m Bucket . remove ( index ) ;", "m Callback . remove View At ( index ) ;", "if ( ! m Hidden Views . remove ( view ) && DEBUG ) {", "throw new Illegal State Exception ( STR_ ) ; }", "return true ; }", "return false ; }"]}
{"ids": "45337", "code": ["public void serialize ( K Xml Serializer serializer ) throws IO Exception {", "serializer . start Tag ( ns , TAG ) ;", "serialize Attribute ( serializer , NAME ATTR , m Name ) ;", "serialize Attribute ( serializer , APP PACKAGE NAME ATTR , m App Package Name ) ;", "serialize Attribute ( serializer , DIGEST ATTR , get Digest ( ) ) ;", "if ( SIGNATURE TEST PKG . equals ( m Name ) ) {", "serializer . attribute ( ns , STR_ , STR_ ) ; }", "m Suite Root . serialize ( serializer ) ;", "serializer . end Tag ( ns , TAG ) ; }"]}
{"ids": "85434", "code": ["public void rollback ( Throwable t ) {", "log . debug ( STR_ + temp File + STR_ + t ) ;", "try {", "file Content Store . delete ( temp File , node ) ; }", "catch ( Exception e ) {", "t . add Suppressed ( e ) ; } }"]}
{"ids": "11666", "code": ["protected void parse Geometry String ( ) {", "int i = NUM_ ;", "byte [ ] bytes = geometry String . get Bytes ( ) ;", "xgrav = new String ( bytes , NUM_ , NUM_ ) ;", "for ( i = NUM_ ; i < bytes . length ; i ++ ) {", "if ( ( bytes [ i ] == STR_ ) || ( bytes [ i ] == STR_ ) ) break ; }", "if ( i == bytes . length ) return ;", "ygrav = ( bytes [ i ] == STR_ ) ? STR_ : STR_ ;", "xpos = Integer . parse Int ( new String ( bytes , NUM_ , i - NUM_ ) ) ;", "++ i ;", "ypos = Integer . parse Int ( new String ( bytes , i , bytes . length - i ) ) ; }"]}
{"ids": "11200", "code": ["protected boolean position ( Projection proj ) {", "if ( proj == null ) {", "logger . fine ( STR_ ) ;", "return false ; }", "proj Width = proj . get Width ( ) ;", "proj Height = proj . get Height ( ) ;", "switch ( render Type ) {", "case RENDERTYPE LATLON :", "if ( ! proj . is Plotable ( lat , lon ) ) {", "if ( DEBUG ) {", "logger . fine ( STR_ ) ; }", "set Need To Reposition ( true ) ;", "return false ; }", "point 1 = ( Point ) proj . forward ( lat , lon , new Point ( ) ) ;", "break ;", "case RENDERTYPE XY :", "point 1 = new Point ( x , y ) ;", "break ;", "case RENDERTYPE OFFSET :", "if ( ! proj . is Plotable ( lat , lon ) ) {", "if ( DEBUG ) {", "logger . fine ( STR_ ) ; }", "set Need To Reposition ( true ) ;", "return false ; }", "point 1 = ( Point ) proj . forward ( lat , lon , new Point ( ) ) ;", "point 1 . x += x ;", "point 1 . y += y ;", "break ;", "case RENDERTYPE UNKNOWN :", "if ( DEBUG ) {", "logger . fine ( STR_ ) ; }", "if ( lat == NUM_ && lon == NUM_ ) {", "if ( x == NUM_ && y == NUM_ ) {", "if ( DEBUG ) {", "logger . fine ( STR_ ) ; }", "point 1 = new Point ( - width , - height ) ;", "point 2 = new Point ( NUM_ , NUM_ ) ;", "return false ; }", "else {", "point 1 = new Point ( x , y ) ; } }", "else {", "if ( ! proj . is Plotable ( lat , lon ) ) {", "logger . fine ( STR_ ) ;", "return false ; }", "point 1 = ( Point ) proj . forward ( lat , lon , new Point ( ) ) ; }", "break ; }", "point 2 = new Point ( NUM_ , NUM_ ) ;", "point 2 . x = point 1 . x + width ;", "point 2 . y = point 1 . y + height ;", "set Need To Reposition ( false ) ;", "return true ; }"]}
{"ids": "84897", "code": ["protected void calculate Destination ( I File uxf , I Compilation Unit referencing Compilation Unit , Destination dest ) throws Core Exception {", "I File uxf Dest = calculate Img Destination ( uxf , referencing Compilation Unit ) ;", "if ( uxf Dest != null ) {", "dest . img File Destination = uxf Dest ; } }"]}
{"ids": "81209", "code": ["@ Override public void on Event ( Project Event event ) {", "if ( event . get Type ( ) == Project Event . Event Type . UPDATED || event . get Type ( ) == Project Event . Event Type . CREATED ) {", "update ( event ) ; } }"]}
{"ids": "40755", "code": ["private void remeasure ( int width , int height ) {", "MAX UNEXPANDED ALLDAY HEIGHT = ( int ) ( MIN UNEXPANDED ALLDAY EVENT HEIGHT * NUM_ ) ;", "MAX UNEXPANDED ALLDAY HEIGHT = Math . min ( MAX UNEXPANDED ALLDAY HEIGHT , height / NUM_ ) ;", "MAX UNEXPANDED ALLDAY HEIGHT = Math . max ( MAX UNEXPANDED ALLDAY HEIGHT , ( int ) MIN UNEXPANDED ALLDAY EVENT HEIGHT * NUM_ ) ;", "m Max Unexpanded Allday Event Count = ( int ) ( MAX UNEXPANDED ALLDAY HEIGHT / MIN UNEXPANDED ALLDAY EVENT HEIGHT ) ;", "for ( int day = NUM_ ; day < m Num Days ; day ++ ) {", "m Earliest Start Hour [ day ] = NUM_ ;", "m Has All Day Event [ day ] = false ; }", "int max All Day Events = m Max Allday Events ;", "m Min Cell Height = Math . max ( ( height - DAY HEADER HEIGHT ) / NUM_ , ( int ) MIN EVENT HEIGHT ) ;", "if ( m Cell Height < m Min Cell Height ) {", "m Cell Height = m Min Cell Height ; }", "m First Cell = DAY HEADER HEIGHT ;", "int all Day Height = NUM_ ;", "if ( max All Day Events > NUM_ ) {", "int max All All Day Height = height - DAY HEADER HEIGHT - MIN HOURS HEIGHT ;", "if ( max All Day Events == NUM_ ) {", "all Day Height = SINGLE ALLDAY HEIGHT ; }", "else if ( max All Day Events <= m Max Unexpanded Allday Event Count ) {", "all Day Height = max All Day Events * MAX HEIGHT OF ONE ALLDAY EVENT ;", "if ( all Day Height > MAX UNEXPANDED ALLDAY HEIGHT ) {", "all Day Height = MAX UNEXPANDED ALLDAY HEIGHT ; } }", "else {", "if ( m Animate Day Height != NUM_ ) {", "all Day Height = Math . max ( m Animate Day Height , MAX UNEXPANDED ALLDAY HEIGHT ) ; }", "else {", "all Day Height = ( int ) ( max All Day Events * MIN UNEXPANDED ALLDAY EVENT HEIGHT ) ;", "if ( ! m Show All All Day Events && all Day Height > MAX UNEXPANDED ALLDAY HEIGHT ) {", "all Day Height = ( int ) ( m Max Unexpanded Allday Event Count * MIN UNEXPANDED ALLDAY EVENT HEIGHT ) ; }", "else if ( all Day Height > max All All Day Height ) {", "all Day Height = max All All Day Height ; } } }", "m First Cell = DAY HEADER HEIGHT + all Day Height + ALLDAY TOP MARGIN ; }", "else {", "m Selection Allday = false ; }", "m Allday Height = all Day Height ;", "m Grid Area Height = height - m First Cell ;", "int all Day Icon Width = m Expand Allday Drawable . get Intrinsic Width ( ) ;", "m Expand All Day Rect . left = Math . max ( ( m Hours Width - all Day Icon Width ) / NUM_ , EVENT ALL DAY TEXT LEFT MARGIN ) ;", "m Expand All Day Rect . right = Math . min ( m Expand All Day Rect . left + all Day Icon Width , m Hours Width - EVENT ALL DAY TEXT RIGHT MARGIN ) ;", "m Expand All Day Rect . bottom = m First Cell - EXPAND ALL DAY BOTTOM MARGIN ;", "m Expand All Day Rect . top = m Expand All Day Rect . bottom - m Expand Allday Drawable . get Intrinsic Height ( ) ;", "m Num Hours = m Grid Area Height / ( m Cell Height + HOUR GAP ) ;", "m Event Geometry . set Hour Height ( m Cell Height ) ;", "final long minimum Duration Millis = ( long ) ( MIN EVENT HEIGHT * Date Utils . MINUTE IN MILLIS / ( m Cell Height / NUM_ ) ) ;", "Event . compute Positions ( m Events , minimum Duration Millis ) ;", "m Max View Start Y = HOUR GAP + NUM_ * ( m Cell Height + HOUR GAP ) - m Grid Area Height ;", "if ( DEBUG ) {", "Log . e ( TAG , STR_ + m View Start Y ) ;", "Log . e ( TAG , STR_ + m Max View Start Y ) ; }", "if ( m View Start Y > m Max View Start Y ) {", "m View Start Y = m Max View Start Y ;", "compute First Hour ( ) ; }", "if ( m First Hour == - NUM_ ) {", "init First Hour ( ) ;", "m First Hour Offset = NUM_ ; }", "if ( m First Hour Offset >= m Cell Height + HOUR GAP ) {", "m First Hour Offset = m Cell Height + HOUR GAP - NUM_ ; }", "m View Start Y = m First Hour * ( m Cell Height + HOUR GAP ) - m First Hour Offset ;", "final int event Area Width = m Num Days * ( m Cell Width + DAY GAP ) ;", "if ( m Selected Event != null && m Last Popup Event ID != m Selected Event . id ) {", "m Popup . dismiss ( ) ; }", "m Popup . set Width ( event Area Width - NUM_ ) ;", "m Popup . set Height ( Window Manager . Layout Params . WRAP CONTENT ) ; }"]}
{"ids": "80831", "code": ["public final void walk Graph ( Hashtable sem Nodes Table ) {", "Integer uid = new Integer ( my UID ) ;", "if ( sem Nodes Table . get ( uid ) != null ) return ;", "sem Nodes Table . put ( new Integer ( my UID ) , this ) ; }"]}
{"ids": "32140", "code": ["private void request Fragmenting ( Igfs Entry Info file Info ) {", "Igfs File Map map = file Info . file Map ( ) ;", "assert map != null && ! map . ranges ( ) . is Empty ( ) ;", "Map < UUID , Collection < Igfs File Affinity Range > > grp Map = U . new Hash Map ( map . ranges ( ) . size ( ) ) ;", "for ( Igfs File Affinity Range range : map . ranges ( ) ) {", "UUID node Id = igfs Ctx . data ( ) . affinity Node ( range . affinity Key ( ) ) . id ( ) ;", "Collection < Igfs File Affinity Range > node Ranges = grp Map . get ( node Id ) ;", "if ( node Ranges == null ) {", "node Ranges = new Linked List < > ( ) ;", "grp Map . put ( node Id , node Ranges ) ; }", "node Ranges . add All ( range . split ( igfs Ctx . data ( ) . group Block Size ( ) ) ) ; }", "Collection < UUID > node Ids = new Identity Hash Set ( grp Map . key Set ( ) ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + file Info + STR_ + node Ids + STR_ ) ;", "Object old = fragmenting Files . put If Absent ( file Info . id ( ) , node Ids ) ;", "assert old == null ;", "for ( Map . Entry < UUID , Collection < Igfs File Affinity Range > > entry : grp Map . entry Set ( ) ) {", "UUID node Id = entry . get Key ( ) ;", "Igfs Fragmentizer Request msg = new Igfs Fragmentizer Request ( file Info . id ( ) , entry . get Value ( ) ) ;", "try {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + node Id + STR_ + file Info . id ( ) + STR_ + msg + STR_ ) ;", "send With Retries ( node Id , msg ) ; }", "catch ( Ignite Checked Exception e ) {", "if ( e . has Cause ( Cluster Topology Checked Exception . class ) ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + node Id ) ; }", "else U . error ( log , STR_ + node Id + STR_ + msg + STR_ , e ) ;", "node Ids . remove ( node Id ) ; } }", "if ( node Ids . is Empty ( ) ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + file Info ) ;", "fragmenting Files . remove ( file Info . id ( ) , node Ids ) ; } }"]}
{"ids": "6602", "code": ["public boolean show Previous Notification ( ) {", "int i = get Selected Index ( ) ;", "if ( i != - NUM_ && i > NUM_ ) {", "model . set Selected Item ( model . get Element At ( i - NUM_ ) ) ;", "return true ; }", "return false ; }"]}
{"ids": "61974", "code": ["protected void add Input Node internal ( B Node input Node ) {", "if ( input Nodes . contains Key ( input Node . get Id ( ) ) ) {", "log . warning ( STR_ + input Node . get Id ( ) + STR_ + node Id ) ; }", "input Nodes . put ( input Node . get Id ( ) , input Node ) ; }"]}
{"ids": "37007", "code": ["public static void initialize ( final C Database Configuration configuration ) throws Couldnt Load Driver Exception , Couldnt Connect Exception , SQL Exception {", "check Driver ( configuration ) ;", "final String url = POSTGRES DRIVER + STR_ + configuration . get Host ( ) + STR_ + POSTGRES DEFAULT DB ;", "Connection connection = null ;", "try {", "connection = Driver Manager . get Connection ( url , configuration . get User ( ) , configuration . get Password ( ) ) ; }", "catch ( final SQL Exception exception ) {", "C Utility Functions . log Exception ( exception ) ;", "throw new Couldnt Connect Exception ( exception , exception . get Error Code ( ) , exception . get SQL State ( ) ) ; }", "final String statement = STR_ + configuration . get Name ( ) + STR_ ;", "final Prepared Statement prepared Statement = connection . prepare Statement ( statement ) ;", "try {", "prepared Statement . execute ( ) ; }", "finally {", "prepared Statement . close ( ) ;", "connection . close ( ) ; } }"]}
{"ids": "21424", "code": ["public List < FC Endpoint > show Fcns Database ( Integer vsan Id ) throws Network Device Controller Exception {", "Map < Integer , String > vsan To Wwns = get Vsan Wwns ( vsan Id ) ;", "List < FC Endpoint > connections = new Array List < FC Endpoint > ( ) ;", "SSH Prompt [ ] prompts = { SSH Prompt . MDS POUND , SSH Prompt . MDS GREATER THAN } ;", "String Builder buf = new String Builder ( ) ;", "String cmd = MDS Dialog Properties . get String ( STR_ ) ;", "if ( vsan Id != null ) {", "cmd = cmd + MDS Dialog Properties . get String ( STR_ ) + vsan Id . to String ( ) + STR_ ; }", "else {", "cmd = cmd + STR_ ; }", "SSH Prompt prompt = send Wait For ( cmd , default Timeout , prompts , buf ) ;", "String [ ] lines = get Lines ( buf ) ;", "String [ ] regex = { MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) , MDS Dialog Properties . get String ( STR_ ) } ;", "String [ ] groups = new String [ NUM_ ] ;", "FC Endpoint conn = null ;", "for ( String line : lines ) {", "int index = match ( line , regex , groups , Pattern . CASE INSENSITIVE ) ;", "switch ( index ) {", "case NUM_ :", "conn = new FC Endpoint ( ) ;", "conn . set Fabric Id ( groups [ NUM_ ] ) ;", "conn . set Fcid ( groups [ NUM_ ] ) ;", "String fabric Wwn = vsan To Wwns . get ( new Integer ( groups [ NUM_ ] ) ) ;", "if ( fabric Wwn != null ) {", "conn . set Fabric Wwn ( fabric Wwn ) ; }", "connections . add ( conn ) ;", "break ;", "case NUM_ :", "conn . set Remote Port Name ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "conn . set Remote Node Name ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "conn . set Switch Port Name ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "conn . set Switch Interface ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "conn . set Switch Name ( groups [ NUM_ ] ) ;", "break ;", "case NUM_ :", "conn . set Remote Port Alias ( groups [ NUM_ ] ) ; } }", "return connections ; }"]}
{"ids": "66448", "code": ["public static void keytool ( String cmd ) {", "log . info ( STR_ + cmd ) ;", "Array List < String > list = new Array List < String > ( ) ;", "String Tokenizer st = new String Tokenizer ( cmd , STR_ ) ;", "String quote Buffer = null ;", "while ( st . has More Tokens ( ) ) {", "String token = st . next Token ( ) ;", "if ( quote Buffer == null ) {", "if ( token . starts With ( STR_ ) ) quote Buffer = token . substring ( NUM_ ) ;", "else list . add ( token ) ; }", "else quote Buffer += STR_ + token ;", "if ( token . ends With ( STR_ ) ) {", "String str = quote Buffer . substring ( NUM_ , quote Buffer . length ( ) - NUM_ ) ;", "list . add ( str ) ;", "quote Buffer = null ; } }", "String [ ] args = new String [ list . size ( ) ] ;", "list . to Array ( args ) ;", "try {", "Key Tool . main ( args ) ; }", "catch ( Exception e ) { } }"]}
{"ids": "8701", "code": ["private void smooth Snap To Position ( int scroll Y , int available Scroll Height , Alphabetical Apps List . Fast Scroll Section Info info ) {", "m Rv . remove Callbacks ( m Smooth Snap Next Frame Runnable ) ;", "m Rv . remove Callbacks ( m Fast Scroll To Target Section Runnable ) ;", "track All Child Views ( ) ;", "if ( m Has Fast Scroll Touch Settled ) {", "m Current Fast Scroll Section = info . section Name ;", "m Target Fast Scroll Section = null ;", "update Tracked Views Fast Scroll Focus State ( ) ; }", "else {", "m Current Fast Scroll Section = null ;", "m Target Fast Scroll Section = info . section Name ;", "m Has Fast Scroll Touch Settled = false ;", "update Tracked Views Fast Scroll Focus State ( ) ;", "m Rv . post Delayed ( m Fast Scroll To Target Section Runnable , m Has Fast Scroll Touch Settled At Least Once ? REPEAT TOUCH SETTLING DURATION : INITIAL TOUCH SETTLING DURATION ) ; }", "int new Scroll Y = Math . min ( available Scroll Height , m Rv . get Padding Top ( ) + m Rv . get Top ( info . fast Scroll To Item . row Index ) ) ;", "int num Frames = m Fast Scroll Frames . length ;", "for ( int i = NUM_ ; i < num Frames ; i ++ ) {", "m Fast Scroll Frames [ i ] = ( new Scroll Y - scroll Y ) / num Frames ; }", "m Fast Scroll Frame Index = NUM_ ;", "m Rv . post On Animation ( m Smooth Snap Next Frame Runnable ) ; }"]}
{"ids": "56902", "code": ["private void update Property To Value 2 ( ) throws Exception {", "properties . put ( TEST KEY , TEST VALUE 2 ) ;", "update Properties File ( ) ; }"]}
{"ids": "13783", "code": ["public void unassign Services ( String universal Id , Set service Names ) throws AM Console Exception {", "if ( ( service Names != null ) && ! service Names . is Empty ( ) ) {", "String [ ] params = new String [ NUM_ ] ;", "params [ NUM_ ] = universal Id ;", "String current Svc = STR_ ;", "try {", "AM Identity amid = Id Utils . get Identity ( get User SSO Token ( ) , universal Id ) ;", "for ( Iterator iter = service Names . iterator ( ) ; iter . has Next ( ) ; ) {", "current Svc = ( String ) iter . next ( ) ;", "params [ NUM_ ] = current Svc ;", "log Event ( STR_ , params ) ;", "amid . unassign Service ( current Svc ) ;", "log Event ( STR_ , params ) ; } }", "catch ( SSO Exception e ) {", "String [ ] params Ex = { universal Id , current Svc , get Error String ( e ) } ;", "log Event ( STR_ , params Ex ) ;", "debug . warning ( STR_ , e ) ;", "throw new AM Console Exception ( get Error String ( e ) ) ; }", "catch ( Id Repo Exception e ) {", "String [ ] params Ex = { universal Id , current Svc , get Error String ( e ) } ;", "log Event ( STR_ , params Ex ) ;", "debug . warning ( STR_ , e ) ;", "throw new AM Console Exception ( get Error String ( e ) ) ; } } }"]}
{"ids": "47552", "code": ["@ Override public int parse ( Date Time Parse Context context , Char Sequence text , int position ) {", "int length = text . length ( ) ;", "if ( position > length ) {", "throw new Index Out Of Bounds Exception ( ) ; }", "if ( position == length ) {", "return ~ position ; }", "char next Char = text . char At ( position ) ;", "if ( next Char == STR_ || next Char == STR_ ) {", "return parse Offset Based ( context , text , position , position , Offset Id Printer Parser . INSTANCE ID Z ) ; }", "else if ( length >= position + NUM_ ) {", "char next Next Char = text . char At ( position + NUM_ ) ;", "if ( context . char Equals ( next Char , STR_ ) && context . char Equals ( next Next Char , STR_ ) ) {", "if ( length >= position + NUM_ && context . char Equals ( text . char At ( position + NUM_ ) , STR_ ) ) {", "return parse Offset Based ( context , text , position , position + NUM_ , Offset Id Printer Parser . INSTANCE ID ZERO ) ; }", "return parse Offset Based ( context , text , position , position + NUM_ , Offset Id Printer Parser . INSTANCE ID ZERO ) ; }", "else if ( context . char Equals ( next Char , STR_ ) && length >= position + NUM_ && context . char Equals ( next Next Char , STR_ ) && context . char Equals ( text . char At ( position + NUM_ ) , STR_ ) ) {", "return parse Offset Based ( context , text , position , position + NUM_ , Offset Id Printer Parser . INSTANCE ID ZERO ) ; } }", "Prefix Tree tree = get Tree ( context ) ;", "Parse Position ppos = new Parse Position ( position ) ;", "String parsed Zone Id = tree . match ( text , ppos ) ;", "if ( parsed Zone Id == null ) {", "if ( context . char Equals ( next Char , STR_ ) ) {", "context . set Parsed ( Zone Offset . UTC ) ;", "return position + NUM_ ; }", "return ~ position ; }", "context . set Parsed ( Zone Id . of ( parsed Zone Id ) ) ;", "return ppos . get Index ( ) ; }"]}
{"ids": "41054", "code": ["private void output Full Lines ( ) throws IO Exception {", "for ( ; ; ) {", "int left Len = left Buf . index Of ( STR_ ) ;", "if ( left Len < NUM_ ) {", "return ; }", "int right Len = right Buf . index Of ( STR_ ) ;", "if ( right Len < NUM_ ) {", "return ; }", "if ( left Len != NUM_ ) {", "out . write ( left Buf . substring ( NUM_ , left Len ) ) ; }", "if ( right Len != NUM_ ) {", "write Spaces ( out , left Width - left Len ) ;", "out . write ( right Buf . substring ( NUM_ , right Len ) ) ; }", "out . write ( STR_ ) ;", "left Buf . delete ( NUM_ , left Len + NUM_ ) ;", "right Buf . delete ( NUM_ , right Len + NUM_ ) ; } }"]}
{"ids": "80090", "code": ["private void remove All Objects ( ) {", "logger . debug ( STR_ ) ;", "texts . clear ( ) ; }"]}
{"ids": "40879", "code": ["public Builder delete Display Name ( ) {", "delete Fields . add ( STR_ ) ;", "return this ; }"]}
{"ids": "32473", "code": ["private void wait For Iterators Cleared ( Ignite Cache < String , Integer > cache , int secs ) throws Interrupted Exception {", "for ( int i = NUM_ ; i < secs ; i ++ ) {", "try {", "cache . size ( ) ;", "check Iterators Cleared ( ) ; }", "catch ( Assertion Failed Error e ) {", "if ( i == NUM_ ) {", "for ( int j = NUM_ ; j < grid Count ( ) ; j ++ ) execute On Local Or Remote Jvm ( j , new Print Iterator State Task ( ) ) ;", "throw e ; }", "log . info ( STR_ ) ;", "Thread . sleep ( NUM_ ) ; } } }"]}
{"ids": "36618", "code": ["public void add Lifecycle Listener ( Lifecycle Listener lifecycle Listener ) {", "if ( ! lifecycle Listeners . contains ( lifecycle Listener ) ) {", "lifecycle Listeners . add ( lifecycle Listener ) ; } }"]}
{"ids": "21262", "code": ["boolean destroy Volume ( boolean force ) {", "Na Element elem = new Na Element ( STR_ ) ;", "elem . add New Child ( STR_ , Boolean . to String ( force ) ) ;", "elem . add New Child ( STR_ , name ) ;", "try {", "server . invoke Elem ( elem ) ;", "return true ; }", "catch ( Exception e ) {", "String msg = STR_ + name ;", "log . error ( msg , e ) ;", "throw new Net App Exception ( msg , e ) ; } }"]}
{"ids": "86312", "code": ["private boolean validate Cooldown Setting ( String app Id , Auto Scaler Policy Trigger policy Trigger , String trigger Id ) {", "Auto Scaling Data Store state Store = Auto Scaling Data Store Factory . get Auto Scaling Data Store ( ) ;", "App Auto Scale State app State = null ;", "app State = state Store . get Scaling State ( app Id ) ;", "if ( app State == null ) {", "return true ; }", "else if ( ( app State . get Instance Count State ( ) != Scaling State Manager . SCALING STATE COMPLETED ) && ( app State . get Instance Count State ( ) != Scaling State Manager . SCALING STATE FAILED ) ) {", "long last Start Time = app State . get Last Action Start Time ( ) ;", "long current Time = System . current Time Millis ( ) ;", "boolean time Expired = ( current Time - last Start Time ) > this . event Timeout ;", "if ( time Expired ) {", "logger . debug ( STR_ + app Id + STR_ ) ;", "return true ; }", "logger . debug ( STR_ + app Id + STR_ ) ;", "return false ; }", "else {", "long cooldown Endtime = app State . get Last Action End Time ( ) + NUM_ * get Cooldown Secs ( policy Trigger , trigger Id ) ;", "if ( System . current Time Millis ( ) < cooldown Endtime ) {", "logger . debug ( STR_ + app Id + STR_ ) ;", "return false ; } }", "return true ; }"]}
{"ids": "23988", "code": ["private long convert To Bytes ( int mega Bytes ) {", "long bytes = mega Bytes ;", "bytes = bytes * NUM_ * NUM_ ;", "return bytes ; }"]}
{"ids": "21428", "code": ["private String generate Zoneset Clone Name ( String zoneset To Clone ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception ex ) {", "log . warn ( ex . get Localized Message ( ) ) ; }", "Calendar cal = Calendar . get Instance ( ) ;", "Date Format date Format = new Simple Date Format ( STR_ ) ;", "String date String = date Format . format ( cal . get Time ( ) ) ;", "String long Name = MDS Dialog Properties . get String ( STR_ ) ;", "if ( ! long Name . contains ( STR_ ) ) {", "return long Name ; }", "return STR_ + zoneset To Clone + STR_ + date String ; }"]}
{"ids": "83", "code": ["public static boolean is Uri Key ( String key ) {", "return key . ends With ( STR_ ) || key . ends With ( STR_ ) ; }"]}
{"ids": "57168", "code": ["public synchronized void add OF Channel Handler And Send Role ( OF Channel Handler h ) {", "connected Channel Handlers . add ( h ) ;", "h . send Role Request ( this . role ) ; }"]}
{"ids": "34299", "code": ["public boolean send ( byte [ ] bytes ) {", "if ( ! connected ) return false ;", "try {", "output Stream . write ( bytes ) ;", "output Stream . flush ( ) ;", "return true ; }", "catch ( IO Exception e ) {", "connected = false ;", "Log . e ( TAG , STR_ ) ;", "return false ; }", "finally {", "if ( ! connected ) {", "close Connection ( ) ; } } }"]}
{"ids": "3501", "code": ["public void add Tail Arg ( String arg ) {", "tail Args . add ( arg ) ; }"]}
{"ids": "48857", "code": ["private String translate Bytes To String ( byte [ ] bytes , long format , Transferable locale Transferable ) throws IO Exception {", "Long l Format = Long . value Of ( format ) ;", "String charset = get Best Charset For Text Format ( l Format , locale Transferable ) ;", "String eoln = ( String ) native EOL Ns . get ( l Format ) ;", "Integer terminators = ( Integer ) native Terminators . get ( l Format ) ;", "int count ;", "if ( terminators != null ) {", "int num Terminators = terminators . int Value ( ) ;", "search : for ( count = NUM_ ; count < ( bytes . length - num Terminators + NUM_ ) ; count += num Terminators ) {", "for ( int i = count ; i < count + num Terminators ; i ++ ) {", "if ( bytes [ i ] != NUM_ ) {", "continue search ; } }", "break search ; } }", "else {", "count = bytes . length ; }", "String converted = new String ( bytes , NUM_ , count , charset ) ;", "if ( eoln != null ) {", "char [ ] buf = converted . to Char Array ( ) ;", "char [ ] eoln arr = eoln . to Char Array ( ) ;", "converted = null ;", "int j = NUM_ ;", "boolean match ;", "for ( int i = NUM_ ; i < buf . length ; ) {", "if ( i + eoln arr . length > buf . length ) {", "buf [ j ++ ] = buf [ i ++ ] ;", "continue ; }", "match = true ;", "for ( int k = NUM_ , l = i ; k < eoln arr . length ; k ++ , l ++ ) {", "if ( eoln arr [ k ] != buf [ l ] ) {", "match = false ;", "break ; } }", "if ( match ) {", "buf [ j ++ ] = STR_ ;", "i += eoln arr . length ; }", "else {", "buf [ j ++ ] = buf [ i ++ ] ; } }", "converted = new String ( buf , NUM_ , j ) ; }", "return converted ; }"]}
{"ids": "27284", "code": ["public Inline URI Handler ( final String namespace ) {", "this . namespace = namespace ;", "this . len = namespace . length ( ) ; }"]}
{"ids": "50751", "code": ["private double [ ] Calc Variable Coef ( Variogram variogram , Kriging Point p , List < Kriging Point > NN Points ) {", "int n = NN Points . size ( ) ;", "double [ ] mat = new double [ n + NUM_ ] ;", "double dist = NUM_ ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "dist = Math . sqrt ( Math . abs ( Math . pow ( NN Points . get ( i ) . x - p . x , NUM_ ) ) + Math . abs ( Math . pow ( NN Points . get ( i ) . y - p . y , NUM_ ) ) ) ;", "mat [ i ] = get Theoretical SV Value ( dist , variogram ) ; }", "mat [ n ] = NUM_ ;", "return mat ; }"]}
{"ids": "38905", "code": ["public void update End ( Logger log ) {", "m instance Count ++ ;", "m sample Count ++ ;", "double end = System . current Time Millis ( ) ;", "double temp = end - m update Start ;", "m cumulative Time += temp ;", "boolean to Fast To Measure = false ;", "if ( ( end - m start Time ) >= m sample Time ) {", "compute Update ( end ) ;", "if ( log != null ) {", "log . status Message ( m status Message Prefix + STR_ + m instance Count + STR_ + m av Insts Per Sec / m num Samples + STR_ + ( to Fast To Measure ? STR_ : STR_ ) ) ; }", "m sample Count = NUM_ ;", "m cumulative Time = NUM_ ;", "m start Time = System . current Time Millis ( ) ; } }"]}
{"ids": "72739", "code": ["public boolean should Include ( final Path path ) {", "return include Matchers . size ( ) == NUM_ || matches ( path , include Matchers ) ; }"]}
{"ids": "70405", "code": ["public Array List < Mech Summary > generate Units ( int num , Unit Filter filter ) {", "Array List < Mech Summary > ret Val = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < num ; i ++ ) {", "Mech Summary ms = generate Unit ( filter ) ;", "if ( ms != null ) {", "ret Val . add ( ms ) ; } }", "return ret Val ; }"]}
{"ids": "46659", "code": ["public void contents Changed ( List Data Event e ) {", "Object old Selection = selected Item Reminder ;", "Object new Selection = data Model . get Selected Item ( ) ;", "if ( old Selection == null || ! old Selection . equals ( new Selection ) ) {", "selected Item Changed ( ) ;", "if ( ! selecting Item ) {", "fire Action Event ( ) ; } } }"]}
{"ids": "38080", "code": ["protected void adjust Canopies ( double [ ] densities ) {", "if ( m num Clusters Requested < NUM_ ) {", "assign Canopies To Canopy Centers ( ) ;", "m training Data = new Instances ( m canopies , NUM_ ) ;", "return ; }", "if ( m canopies . num Instances ( ) > m num Clusters Requested ) {", "int [ ] sorted Indexes = Utils . stable Sort ( densities ) ;", "Instances final Canopies = new Instances ( m canopies , NUM_ ) ;", "int count = NUM_ ;", "for ( int i = sorted Indexes . length - NUM_ ; count < m num Clusters Requested ; i -- ) {", "final Canopies . add ( m canopies . instance ( sorted Indexes [ i ] ) ) ;", "count ++ ; }", "m canopies = final Canopies ;", "List < double [ ] [ ] > temp Canopy Centers = new Array List < double [ ] [ ] > ( ) ;", "List < double [ ] > temp T 2 Dists = new Array List < double [ ] > ( ) ;", "List < double [ ] > temp Missings = new Array List < double [ ] > ( ) ;", "count = NUM_ ;", "for ( int i = sorted Indexes . length - NUM_ ; count < final Canopies . num Instances ( ) ; i -- ) {", "temp Canopy Centers . add ( m canopy Centers . get ( sorted Indexes [ i ] ) ) ;", "temp T 2 Dists . add ( m canopy T 2 Density . get ( sorted Indexes [ i ] ) ) ;", "temp Missings . add ( m canopy Num Missing For Numerics . get ( sorted Indexes [ i ] ) ) ;", "count ++ ; }", "m canopy Centers = temp Canopy Centers ;", "m canopy T 2 Density = temp T 2 Dists ;", "m canopy Num Missing For Numerics = temp Missings ; }", "else if ( m canopies . num Instances ( ) < m num Clusters Requested && m training Data != null && m training Data . num Instances ( ) > NUM_ ) {", "Random r = new Random ( get Seed ( ) ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "r . next Int ( ) ; }", "Hash Map < Decision Table Hash Key , Integer > init C = new Hash Map < Decision Table Hash Key , Integer > ( ) ;", "Decision Table Hash Key hk = null ;", "for ( int i = NUM_ ; i < m canopies . num Instances ( ) ; i ++ ) {", "try {", "hk = new Decision Table Hash Key ( m canopies . instance ( i ) , m canopies . num Attributes ( ) , true ) ;", "init C . put ( hk , null ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }", "for ( int j = m training Data . num Instances ( ) - NUM_ ; j >= NUM_ ; j -- ) {", "int inst Index = r . next Int ( j + NUM_ ) ;", "try {", "hk = new Decision Table Hash Key ( m training Data . instance ( inst Index ) , m training Data . num Attributes ( ) , true ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "if ( ! init C . contains Key ( hk ) ) {", "Instance new Instance = m training Data . instance ( inst Index ) ;", "m canopies . add ( new Instance ) ;", "double [ ] density = new double [ NUM_ ] ;", "density [ NUM_ ] = NUM_ ;", "m canopy T 2 Density . add ( density ) ;", "double [ ] [ ] center = new double [ new Instance . num Attributes ( ) ] [ NUM_ ] ;", "double [ ] num Missing Numerics = new double [ new Instance . num Attributes ( ) ] ;", "update Canopy Center ( new Instance , center , num Missing Numerics ) ;", "m canopy Centers . add ( center ) ;", "m canopy Num Missing For Numerics . add ( num Missing Numerics ) ;", "init C . put ( hk , null ) ; }", "m training Data . swap ( j , inst Index ) ;", "if ( m canopies . num Instances ( ) == m num Clusters Requested ) {", "break ; } } }", "assign Canopies To Canopy Centers ( ) ;", "m training Data = new Instances ( m canopies , NUM_ ) ; }"]}
{"ids": "67801", "code": ["protected void create From H Values ( int [ ] h Values , int partitions ) {", "Arrays . sort ( h Values ) ;", "this . splits = new int [ partitions ] ;", "int max H = NUM_ ;", "for ( int i = NUM_ ; i < splits . length ; i ++ ) {", "int quantile = ( int ) ( ( long ) ( i + NUM_ ) * h Values . length / partitions ) ;", "this . splits [ i ] = quantile == h Values . length ? max H : h Values [ quantile ] ; } }"]}
{"ids": "24163", "code": ["private String convert User Input Into A Fully Qualified Path ( final String user Input ) {", "if ( File Utils . denotes Absolute Path ( user Input ) ) {", "return user Input ; }", "if ( user Input . starts With ( HOME DIRECTORY SYMBOL ) ) {", "Assert . not Null ( home , STR_ ) ;", "if ( user Input . length ( ) > NUM_ ) {", "return home + user Input . substring ( NUM_ ) ; } }", "String full Path = get Working Directory As String ( ) + user Input ;", "return full Path ; }"]}
{"ids": "44642", "code": ["public byte read Byte ( ) throws IO Exception {", "return dis . read Byte ( ) ; }"]}
{"ids": "27202", "code": ["protected static byte [ ] hkdf Expand ( byte [ ] ikm , byte [ ] salt , byte [ ] info , int length ) throws Invalid Key Exception , No Such Algorithm Exception {", "HKDF Bytes Generator hkdf = new HKDF Bytes Generator ( new SHA 256 Digest ( ) ) ;", "hkdf . init ( new HKDF Parameters ( ikm , salt , info ) ) ;", "byte [ ] okm = new byte [ length ] ;", "hkdf . generate Bytes ( okm , NUM_ , length ) ;", "return okm ; }"]}
{"ids": "55244", "code": ["public boolean is Emote Ignored ( Emoticon emote ) {", "return ignored Emotes . contains ( emote . code ) ; }"]}
{"ids": "74479", "code": ["@ Suppress Warnings ( STR_ ) public void read File ( String file Name ) throws JDOM Exception , IO Exception {", "if ( check File ( file Name ) ) {", "Element root = root From Name ( file Name ) ;", "Element roster ;", "if ( root == null ) {", "log . warn ( STR_ ) ;", "return ; }", "roster = root . get Child ( STR_ ) ;", "if ( roster == null ) {", "log . debug ( STR_ ) ;", "return ; }", "Iterator < Element > consist Iterator = root . get Descendants ( new Element Filter ( STR_ ) ) ;", "try {", "Element consist ;", "do {", "consist = consist Iterator . next ( ) ;", "consist From Xml ( consist ) ; }", "while ( consist Iterator . has Next ( ) ) ; }", "catch ( No Such Element Exception nde ) {", "log . debug ( STR_ ) ; } }", "else {", "log . info ( STR_ ) ; } }"]}
{"ids": "48714", "code": ["private int accept ( File Descriptor ssfd , File Descriptor newfd , Inet Socket Address [ ] isaa ) throws IO Exception {", "return accept 0 ( ssfd , newfd , isaa ) ; }"]}
{"ids": "53020", "code": ["protected void transcode ( File file , Transcoder transcoder ) throws IO Exception , Transcoder Exception {", "transcoder . add Transcoding Hint ( XML Abstract Transcoder . KEY XML PARSER VALIDATING , Boolean . FALSE ) ;", "SVG Document doc = clone Document ( ) ;", "Transcoder Input input = new Transcoder Input ( doc ) ;", "Output Stream out = new Buffered Output Stream ( new File Output Stream ( file ) ) ;", "Transcoder Output output = new Transcoder Output ( out ) ;", "transcoder . transcode ( input , output ) ;", "out . flush ( ) ;", "out . close ( ) ; }"]}
{"ids": "13222", "code": ["@ Override public Document new Document ( ) {", "return new mf . org . apache . xerces . dom . Document Impl ( ) ; }"]}
{"ids": "25485", "code": ["@ HLE Function ( nid = NUM_ , version = NUM_ , check Inside Interrupt = true ) public int sce Sas Set Grain ( int sas Core , int grain ) {", "check Sas Handle Good ( sas Core ) ;", "grain Samples = grain ;", "return NUM_ ; }"]}
{"ids": "38415", "code": ["protected static void draw Data Point ( double x , double y , double xprev , double yprev , int size , int shape , Graphics gx ) {", "draw Data Point ( x , y , size , shape , gx ) ;", "gx . draw Line ( ( int ) x , ( int ) y , ( int ) xprev , ( int ) yprev ) ; }"]}
{"ids": "23750", "code": ["static boolean chunk Set ( Internal Distributed Member recipient , Set set , int CHUNK SIZE IN BYTES , boolean include Values , Object Int Procedure proc ) throws IO Exception {", "Iterator it = set . iterator ( ) ;", "boolean keep Going = true ;", "boolean sent Last Chunk = false ;", "final Heap Data Output Stream mos = new Heap Data Output Stream ( Initial Image Operation . CHUNK SIZE IN BYTES + NUM_ , recipient . get Version Object ( ) ) ;", "do {", "mos . reset ( ) ;", "int avg Item Size = NUM_ ;", "int item Count = NUM_ ;", "while ( ( mos . size ( ) + avg Item Size ) < Initial Image Operation . CHUNK SIZE IN BYTES && it . has Next ( ) ) {", "Object key = it . next ( ) ;", "Data Serializer . write Object ( key , mos ) ;", "item Count ++ ;", "avg Item Size = mos . size ( ) / item Count ; }", "Data Serializer . write Object ( ( Object ) null , mos ) ;", "int last Msg = it . has Next ( ) ? NUM_ : NUM_ ;", "keep Going = proc . execute With ( mos , last Msg ) ;", "sent Last Chunk = last Msg == NUM_ && keep Going ; }", "while ( keep Going && it . has Next ( ) ) ;", "return sent Last Chunk ; }"]}
{"ids": "36012", "code": ["private int [ ] parse Meta Data Information ( ) throws User Error {", "int [ ] selected Columns = new int [ meta Data . size ( ) ] ;", "Set < String > used Column Names = new Hash Set < > ( ) ;", "int column Index = NUM_ ;", "int used Column Index = NUM_ ;", "for ( Column Meta Data column : meta Data ) {", "if ( ! column . is Removed ( ) ) {", "selected Columns [ used Column Index ] = column Index ;", "used Column Index ++ ;", "String column Name = column . get Name ( ) ;", "if ( ! used Column Names . contains ( column Name ) ) {", "used Column Names . add ( column Name ) ; }", "else {", "throw new User Error ( null , STR_ , column Name ) ; } }", "column Index ++ ; }", "int [ ] attribute Columns = Arrays . copy Of ( selected Columns , used Column Index ) ;", "return attribute Columns ; }"]}
{"ids": "10592", "code": ["private void add Dump File ( ) {", "add Dump File ( dump File ) ; }"]}
{"ids": "85177", "code": ["public boolean is Page In Range ( int page Number ) {", "for ( int ind = NUM_ ; ind < sequence Starts . size ( ) ; ind ++ ) {", "if ( sequence Starts . get ( ind ) <= page Number && page Number <= sequence Ends . get ( ind ) ) return true ; }", "return false ; }"]}
{"ids": "4403", "code": ["@ Suppress Warnings ( STR_ ) public static < T extends Dimensional Item Object > List < T > as Typed List ( Collection < Dimensional Item Object > collection ) {", "List < T > list = new Array List < > ( ) ;", "if ( collection != null ) {", "for ( Dimensional Item Object object : collection ) {", "list . add ( ( T ) object ) ; } }", "return list ; }"]}
{"ids": "62300", "code": ["void add New Table ( String name , int tdef Page Number , Short type , String linked Db Name , String linked Table Name ) throws IO Exception {", "add Table ( name , Integer . value Of ( tdef Page Number ) , type , linked Db Name , linked Table Name ) ;", "add To System Catalog ( name , tdef Page Number , type , linked Db Name , linked Table Name , table Parent Id ) ;", "add To Access Control Entries ( tdef Page Number , table Parent Id , new Table SI Ds ) ; }"]}
{"ids": "40053", "code": ["public static String hashpw ( byte [ ] password 0 , final String salt ) {", "B Crypt B ;", "String real salt ;", "byte passwordb [ ] = null , saltb [ ] , hashed [ ] ;", "char minor = ( char ) NUM_ ;", "int rounds , off = NUM_ ;", "final String Buffer rs = new String Buffer ( ) ;", "if ( salt . char At ( NUM_ ) != STR_ || salt . char At ( NUM_ ) != STR_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( salt . char At ( NUM_ ) == STR_ ) {", "off = NUM_ ; }", "else {", "minor = salt . char At ( NUM_ ) ;", "if ( minor != STR_ || salt . char At ( NUM_ ) != STR_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "off = NUM_ ; }", "if ( salt . char At ( off + NUM_ ) > STR_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "rounds = Integer . parse Int ( salt . substring ( off , off + NUM_ ) ) ;", "real salt = salt . substring ( off + NUM_ , off + NUM_ ) ;", "try {", "if ( minor >= ( byte ) STR_ ) {", "passwordb = Arrays . copy Of ( password 0 , password 0 . length + NUM_ ) ;", "passwordb [ passwordb . length - NUM_ ] = ( byte ) NUM_ ; }", "else {", "passwordb = Arrays . copy Of ( password 0 , password 0 . length ) ; }", "saltb = decode base 64 ( real salt , BCRYPT SALT LEN ) ;", "B = new B Crypt ( ) ;", "hashed = B . crypt raw ( passwordb , saltb , rounds , bf crypt ciphertext . clone ( ) ) ; }", "finally {", "if ( password 0 != null ) {", "Arrays . fill ( password 0 , ( byte ) STR_ ) ;", "password 0 = null ; }", "if ( passwordb != null ) {", "Arrays . fill ( passwordb , ( byte ) STR_ ) ;", "passwordb = null ; } }", "rs . append ( STR_ ) ;", "if ( minor >= STR_ ) {", "rs . append ( minor ) ; }", "rs . append ( STR_ ) ;", "if ( rounds < NUM_ ) {", "rs . append ( STR_ ) ; }", "if ( rounds > NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "rs . append ( Integer . to String ( rounds ) ) ;", "rs . append ( STR_ ) ;", "rs . append ( encode base 64 ( saltb , saltb . length ) ) ;", "rs . append ( encode base 64 ( hashed , bf crypt ciphertext . length * NUM_ - NUM_ ) ) ;", "return rs . to String ( ) ; }"]}
{"ids": "50882", "code": ["public void remove Listener ( @ Not Null Configuration Listener listener ) {", "if ( my Listeners != null ) {", "my Listeners . remove ( listener ) ;", "if ( my Listeners . is Empty ( ) ) {", "my Listeners = null ; } } }"]}
{"ids": "80693", "code": ["public void do Window Open ( ) {", "do Connect ( ) ; }"]}
{"ids": "4024", "code": ["public boolean schedule ( Runnable task , Class Loader loader ) {", "boolean is Priority = false ;", "boolean is Queue = true ;", "boolean is Wake = true ;", "return schedule Impl ( task , loader , MAX EXPIRE , is Priority , is Queue , is Wake ) ; }"]}
{"ids": "73468", "code": ["public static double [ ] parse Vector String ( String vector String ) {", "String [ ] parsed String = vector String . split ( STR_ ) ;", "double [ ] vector = new double [ parsed String . length ] ;", "for ( int j = NUM_ ; j < parsed String . length ; j ++ ) {", "double val = Utils . double Parsable ( parsed String [ j ] ) ;", "vector [ j ] = Double . is Na N ( val ) ? NUM_ : val ; }", "return vector ; }"]}
{"ids": "29160", "code": ["@ Override public char next ( ) {", "++ doc Pos ;", "if ( doc Pos < segment End || segment End >= doc . get Length ( ) ) {", "return text . next ( ) ; }", "try {", "doc . get Text ( segment End , doc . get Length ( ) - segment End , text ) ; }", "catch ( Bad Location Exception e ) {", "throw new Runtime Exception ( e ) ; }", "segment End += text . count ;", "return text . current ( ) ; }"]}
{"ids": "80235", "code": ["private void adjust Row Heights ( J Table table ) {", "for ( int row = NUM_ ; row < table . get Row Count ( ) ; row ++ ) {", "int row Height = table . get Row Height ( ) ;", "for ( int column = NUM_ ; column < table . get Column Count ( ) ; column ++ ) {", "Component comp = table . prepare Renderer ( table . get Cell Renderer ( row , column ) , row , column ) ;", "row Height = Math . max ( row Height , comp . get Preferred Size ( ) . height ) ; }", "table . set Row Height ( row , row Height ) ; } }"]}
{"ids": "21680", "code": ["public List < URI > volume UR Is ( List < URI > uris , boolean delete , boolean remediate , Val Ck ... checks ) {", "List < URI > remediated UR Is = new Array List < URI > ( ) ;", "List < Volume > volumes = db Client . query Object ( Volume . class , uris ) ;", "List < Volume > remediated Volumes = volumes ( volumes , delete , remediate , checks ) ;", "for ( Volume volume : remediated Volumes ) {", "remediated UR Is . add ( volume . get Id ( ) ) ; }", "return remediated UR Is ; }"]}
{"ids": "47041", "code": ["private Format String [ ] parse ( String s ) {", "Array List < Format String > al = new Array List < > ( ) ;", "Matcher m = fs Pattern . matcher ( s ) ;", "for ( int i = NUM_ , len = s . length ( ) ; i < len ; ) {", "if ( m . find ( i ) ) {", "if ( m . start ( ) != i ) {", "check Text ( s , i , m . start ( ) ) ;", "al . add ( new Fixed String ( s . substring ( i , m . start ( ) ) ) ) ; }", "al . add ( new Format Specifier ( m ) ) ;", "i = m . end ( ) ; }", "else {", "check Text ( s , i , len ) ;", "al . add ( new Fixed String ( s . substring ( i ) ) ) ;", "break ; } }", "return al . to Array ( new Format String [ al . size ( ) ] ) ; }"]}
{"ids": "40929", "code": ["private void update Index Column Buttons ( ) {", "index Remove Button . set Enabled ( false ) ;", "index Up Button . set Enabled ( false ) ;", "index Down Button . set Enabled ( false ) ;", "int index = selected Columns . get Selection Index ( ) ;", "if ( index >= NUM_ ) {", "index Remove Button . set Enabled ( true ) ;", "if ( index > NUM_ ) {", "index Up Button . set Enabled ( true ) ; }", "else if ( index < selected Columns . get Item Count ( ) - NUM_ ) {", "index Down Button . set Enabled ( true ) ; } } }"]}
{"ids": "71750", "code": ["public String url For POI Search ( String tag , Bounding Box bb , int limit , int timeout ) {", "String Builder s = new String Builder ( ) ;", "s . append ( m Service + STR_ ) ;", "String s BB = STR_ + bb . get Lat South ( ) + STR_ + bb . get Lon West ( ) + STR_ + bb . get Lat North ( ) + STR_ + bb . get Lon East ( ) + STR_ ;", "String data = STR_ + timeout + STR_ + STR_ + tag + STR_ + s BB + STR_ + STR_ + tag + STR_ + s BB + STR_ + STR_ + tag + STR_ + s BB + STR_ + STR_ + limit + STR_ ;", "Log . d ( Bonus Pack Helper . LOG TAG , STR_ + data ) ;", "s . append ( URL Encoder . encode ( data ) ) ;", "return s . to String ( ) ; }"]}
{"ids": "74820", "code": ["public void wait For Decoding To Finish ( ) {", "while ( is Decoding ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( final Interrupted Exception e ) {", "Log Writer . write Log ( STR_ + e . get Message ( ) ) ;", "is Decoding = false ; } } }"]}
{"ids": "80373", "code": ["private static String wiki To Plain Text ( String content ) {", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . replace All ( STR_ , STR_ ) ;", "content = content . trim ( ) ;", "final int size = content . length ( ) ;", "int end Of First Paragraph = content . index Of ( STR_ , NUM_ ) ;", "if ( end Of First Paragraph < NUM_ ) {", "end Of First Paragraph = size ; }", "content = content . substring ( NUM_ , Math . min ( end Of First Paragraph , NUM_ ) ) ;", "return content ; }"]}
{"ids": "48510", "code": ["private static int create Packed Params ( Sun Graphics 2 D sg 2 d , Glyph List gl ) {", "return ( ( ( gl . use Positions ( ) ? NUM_ : NUM_ ) << OFFSET POSITIONS ) | ( ( gl . is Sub Pix Pos ( ) ? NUM_ : NUM_ ) << OFFSET SUBPIXPOS ) | ( ( gl . is RGB Order ( ) ? NUM_ : NUM_ ) << OFFSET RGBORDER ) | ( ( sg 2 d . lcd Text Contrast & NUM_ ) << OFFSET CONTRAST ) ) ; }"]}
{"ids": "44901", "code": ["public static int update ( String sql , Object [ ] args ) {", "Connection c = null ;", "Prepared Statement p = null ;", "try {", "c = get Connection ( ) ;", "if ( c == null ) return - NUM_ ;", "p = c . prepare Statement ( sql ) ;", "int order = NUM_ ;", "if ( args != null ) {", "for ( int i = NUM_ ; i < args . length ; i ++ ) {", "Object o = args [ i ] ;", "set Parameter ( p , order ++ , o ) ; } }", "return p . execute Update ( ) ; }", "catch ( Exception e ) {", "if ( log . is Error Enabled ( ) ) log . error ( sql + to String ( args ) , e ) ; }", "finally {", "close ( p , c ) ; }", "return NUM_ ; }"]}
{"ids": "30683", "code": ["public boolean is Lock Subject ( ) {", "return true ; }"]}
{"ids": "50145", "code": ["public Quick Action View add Action ( Action action ) {", "check Shown ( ) ;", "m Actions . add ( action ) ;", "return this ; }"]}
{"ids": "20040", "code": ["protected boolean display ( File help File ) throws Help Exception {", "if ( help File . exists ( ) ) {", "load And Write ( help File ) ;", "return true ; }", "else {", "File not Found = new File ( help Dir , NOT FOUND ) ;", "if ( not Found . exists ( ) ) load And Write ( not Found ) ;", "else throw new Help Exception ( STR_ ) ;", "return false ; } }"]}
{"ids": "32816", "code": ["public Point 2 D either ( ) {", "return best 1 ; }"]}
{"ids": "1202", "code": ["private static void remove Table ( Connection conn , String name ) throws SQL Exception {", "name = name . replace ( STR_ , STR_ ) ;", "Statement stat = conn . create Statement ( ) ;", "stat . execute ( STR_ + name ) ;", "DB Util . commit EL ( conn ) ; }"]}
{"ids": "29108", "code": ["public boolean contains Category ( String category ) {", "return ! hidden Bug Category Set . contains ( category ) ; }"]}
{"ids": "22046", "code": ["public static boolean is Volume Full Copy Source ( Volume volume , Db Client db Client ) {", "boolean is Full Copy Source = false ;", "String Set full Copy Ids = volume . get Full Copies ( ) ;", "if ( ( full Copy Ids != null ) && ( ! full Copy Ids . is Empty ( ) ) ) {", "Iterator < String > full Copy Ids Iter = full Copy Ids . iterator ( ) ;", "while ( full Copy Ids Iter . has Next ( ) ) {", "URI full Copy URI = URI . create ( full Copy Ids Iter . next ( ) ) ;", "Volume full Copy Volume = db Client . query Object ( Volume . class , full Copy URI ) ;", "if ( ( full Copy Volume != null ) && ( ! full Copy Volume . get Inactive ( ) ) ) {", "is Full Copy Source = true ; } } }", "return is Full Copy Source ; }"]}
{"ids": "36606", "code": ["@ Override public void assert Equals ( String message , Object expected Obj , Object actual Obj ) {", "Linear Regression Model expected = ( Linear Regression Model ) expected Obj ;", "Linear Regression Model actual = ( Linear Regression Model ) actual Obj ;", "message = message + STR_ + actual . get Source ( ) + STR_ ;", "Assert . assert Array Equals ( message + STR_ , expected . get Coefficients ( ) , actual . get Coefficients ( ) , NUM_ ) ;", "Assert . assert Array Equals ( message + STR_ , expected . get Probabilities ( ) , actual . get Probabilities ( ) , NUM_ ) ;", "Assert . assert Array Equals ( message + STR_ , expected . get Selected Attribute Names ( ) , actual . get Selected Attribute Names ( ) ) ;", "Assert . assert Array Equals ( message + STR_ , expected . get Selected Attributes ( ) , actual . get Selected Attributes ( ) ) ;", "Assert . assert Array Equals ( message + STR_ , expected . get Standard Errors ( ) , actual . get Standard Errors ( ) , NUM_ ) ;", "Assert . assert Array Equals ( message + STR_ , expected . get Standardized Coefficients ( ) , actual . get Standardized Coefficients ( ) , NUM_ ) ;", "Assert . assert Array Equals ( message + STR_ , expected . get Tolerances ( ) , actual . get Tolerances ( ) , NUM_ ) ;", "Assert . assert Array Equals ( message + STR_ , expected . get T Stats ( ) , actual . get T Stats ( ) , NUM_ ) ; }"]}
{"ids": "3786", "code": ["final public void println ( String v ) {", "try {", "out . println ( v ) ; }", "catch ( IO Exception e ) {", "log . log ( Level . FINE , e . to String ( ) , e ) ; } }"]}
{"ids": "49936", "code": ["private boolean r Contains RM Instruction ( Program Block pb , String var Name ) {", "if ( pb instanceof While Program Block ) {", "While Program Block tmp = ( While Program Block ) pb ;", "for ( Program Block c : tmp . get Child Blocks ( ) ) if ( r Contains RM Instruction ( c , var Name ) ) return true ; }", "else if ( pb instanceof If Program Block ) {", "If Program Block tmp = ( If Program Block ) pb ;", "for ( Program Block c : tmp . get Child Blocks If Body ( ) ) if ( r Contains RM Instruction ( c , var Name ) ) return true ;", "for ( Program Block c : tmp . get Child Blocks Else Body ( ) ) if ( r Contains RM Instruction ( c , var Name ) ) return true ; }", "else if ( pb instanceof For Program Block ) {", "For Program Block tmp = ( For Program Block ) pb ;", "for ( Program Block c : tmp . get Child Blocks ( ) ) if ( r Contains RM Instruction ( c , var Name ) ) return true ; }", "else if ( pb instanceof Function Program Block ) { }", "else {", "for ( Instruction inst : pb . get Instructions ( ) ) {", "String inst Str = inst . to String ( ) ;", "if ( inst Str . contains ( STR_ + Lop . OPERAND DELIMITOR + var Name ) || inst Str . contains ( STR_ + Lop . OPERAND DELIMITOR + var Name ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "35441", "code": ["public Project Importer ( final File root Folder ) {", "assert Not Null ( STR_ , root Folder ) ;", "assert True ( STR_ + root Folder , root Folder . exists ( ) ) ;", "assert True ( STR_ + root Folder , root Folder . is Directory ( ) ) ;", "assert True ( STR_ + root Folder , root Folder . can Read ( ) ) ;", "assert True ( STR_ + root Folder , null != root Folder . list Files ( ) ) ;", "this . root Folder = root Folder ; }"]}
{"ids": "75244", "code": ["public static boolean is Registered ( Class < ? > clazz ) {", "return reg Modules . contains Key ( clazz . get Name ( ) ) ; }"]}
{"ids": "23753", "code": ["public void wait For Operations ( ) {", "operator . wait For Operations ( ) ; }"]}
{"ids": "39969", "code": ["private Object create Inner ( Simple Object post , Request Context context ) throws Response Exception {", "try {", "String xml = complete Xform ( convert Uuids To Ids ( post ) ) ;", "File file = File . create Temp File ( STR_ , null ) ;", "processor . process X Form ( xml , file . get Absolute Path ( ) , true , context . get Request ( ) ) ; }", "catch ( IO Exception e ) {", "throw new Generic Rest Exception ( STR_ , e ) ; }", "catch ( Response Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "throw new Conversion Exception ( STR_ , e ) ; }", "Encounter encounter = guess Encounter From Xform Submission ( post ) ;", "if ( encounter == null ) {", "return post ; }", "Simple Object return Json = new Simple Object ( ) ;", "Encounter Resource . populate Json Properties ( encounter , return Json ) ;", "return return Json ; }"]}
{"ids": "12021", "code": ["public Endpoint ( URI endpoint Url , Security Mode ... modes ) {", "if ( modes == null || endpoint Url == null ) throw new Illegal Argument Exception ( STR_ ) ;", "for ( Security Mode m : modes ) {", "if ( m == null ) throw new Illegal Argument Exception ( STR_ ) ;", "hash = NUM_ * hash + m . hash Code ( ) ; }", "this . endpoint Url = endpoint Url . to String ( ) ;", "this . modes = modes ;", "this . endpoint Configuration = Endpoint Configuration . defaults ( ) ;", "hash = NUM_ * hash + endpoint Url . hash Code ( ) ; }"]}
{"ids": "43977", "code": ["protected Value parse Value ( ) throws IO Exception , RDF Parse Exception , RDF Handler Exception {", "int c = peek Code Point ( ) ;", "if ( c == STR_ ) {", "return parse URI ( ) ; }", "else if ( c == STR_ || Turtle Util . is Prefix Start Char ( c ) ) {", "return parse Q Name Or Boolean ( ) ; }", "else if ( c == STR_ ) {", "return parse Node ID ( ) ; }", "else if ( c == STR_ || c == STR_ ) {", "return parse Quoted Literal ( ) ; }", "else if ( ASCII Util . is Number ( c ) || c == STR_ || c == STR_ || c == STR_ ) {", "return parse Number ( ) ; }", "else if ( c == - NUM_ ) {", "throw EOF Exception ( ) ;", "return null ; }", "else {", "report Fatal Error ( STR_ + new String ( Character . to Chars ( c ) ) + STR_ ) ;", "return null ; } }"]}
{"ids": "7913", "code": ["public Time Series Collection ( ) {", "this ( null , Time Zone . get Default ( ) ) ; }"]}
{"ids": "43423", "code": ["@ Request Mapping ( value = STR_ , method = Request Method . POST ) @ Response Body public Json Response create Directory ( @ Path Variable final String container Id , @ Path Variable final String application Name , @ Request Param ( STR_ ) String path ) throws Service Exception , Check Exception , IO Exception {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ + container Id ) ;", "logger . debug ( STR_ + application Name ) ;", "logger . debug ( STR_ + path ) ; }", "file Service . create Directory ( application Name , container Id , path ) ;", "return new Http Ok ( ) ; }"]}
{"ids": "5002", "code": ["public void fill ellipse arr ( Pla Ellipse [ ] p ellipse arr , Graphics p g , Color p color , double p translucency factor ) {", "if ( p color == null ) return ;", "if ( p ellipse arr . length <= NUM_ ) return ;", "General Path draw path = new General Path ( General Path . WIND EVEN ODD ) ;", "for ( Pla Ellipse curr ellipse : p ellipse arr ) {", "Point 2 D center = coordinate transform . board to screen ( curr ellipse . center ) ;", "double bigger radius = coordinate transform . board to screen ( curr ellipse . bigger radius ) ;", "if ( ! point near rectangle ( center . get X ( ) , center . get Y ( ) , ( Rectangle ) p g . get Clip ( ) , bigger radius ) ) {", "continue ; }", "double smaller radius = coordinate transform . board to screen ( curr ellipse . smaller radius ) ;", "Ellipse 2 D draw ellipse = new Ellipse 2 D . Double ( center . get X ( ) - bigger radius , center . get Y ( ) - smaller radius , NUM_ * bigger radius , NUM_ * smaller radius ) ;", "double rotation = coordinate transform . board to screen angle ( curr ellipse . rotation ) ;", "Affine Transform affine transform = new Affine Transform ( ) ;", "affine transform . rotate ( rotation , center . get X ( ) , center . get Y ( ) ) ;", "Shape rotated ellipse = affine transform . create Transformed Shape ( draw ellipse ) ;", "draw path . append ( rotated ellipse , false ) ; }", "Graphics 2 D g 2 = ( Graphics 2 D ) p g ;", "g 2 . set Color ( p color ) ;", "set translucency ( g 2 , p translucency factor ) ;", "g 2 . set Rendering Hint ( Rendering Hints . KEY ANTIALIASING , Rendering Hints . VALUE ANTIALIAS ON ) ;", "g 2 . fill ( draw path ) ; }"]}
{"ids": "20483", "code": ["private void refresh Challenge Counts ( ) {", "m Due Challenge Counts = m Due Challenge Logic . get Due Challenge Counts ( m Categories ) ; }"]}
{"ids": "68708", "code": ["public Identity ( final int dim ) {", "this ( dim , Enum Set . none Of ( Address . Flags . class ) ) ; }"]}
{"ids": "75007", "code": ["private Image Data awt To Swt ( final Buffered Image buffered Image , final int width , final int height ) {", "final int [ ] awt Pixels = new int [ width * height ] ;", "final Image Data swt Image Data = new Image Data ( width , height , NUM_ , PALETTE DATA ) ;", "swt Image Data . transparent Pixel = TRANSPARENT COLOR ;", "final int step = swt Image Data . depth / NUM_ ;", "final byte [ ] data = swt Image Data . data ;", "buffered Image . get RGB ( NUM_ , NUM_ , width , height , awt Pixels , NUM_ , width ) ;", "for ( int i = NUM_ ; i < height ; i ++ ) {", "int idx = ( NUM_ + i ) * swt Image Data . bytes Per Line + NUM_ * step ;", "for ( int j = NUM_ ; j < width ; j ++ ) {", "final int rgb = awt Pixels [ j + i * width ] ;", "for ( int k = swt Image Data . depth - NUM_ ; k >= NUM_ ; k -= NUM_ ) {", "data [ idx ++ ] = ( byte ) ( rgb > > k & NUM_ ) ; } } }", "return swt Image Data ; }"]}
{"ids": "49821", "code": ["public static boolean is Unlimited Strength Policy Available ( ) {", "try {", "return Cipher . get Max Allowed Key Length ( STR_ ) >= NUM_ ; }", "catch ( final No Such Algorithm Exception e ) {", "e . print Stack Trace ( ) ; }", "return false ; }"]}
{"ids": "5010", "code": ["private void fill Stack Trace ( String Buffer buffer , Stack Trace Element [ ] elements ) {", "for ( int index = NUM_ ; index < elements . length ; index ++ ) {", "buffer . append ( elements [ index ] ) ;", "buffer . append ( STR_ ) ; } }"]}
{"ids": "12534", "code": ["public static boolean is File Type Supported ( int file Type ) {", "List providers = get Midi File Writers ( ) ;", "for ( int i = NUM_ ; i < providers . size ( ) ; i ++ ) {", "Midi File Writer writer = ( Midi File Writer ) providers . get ( i ) ;", "if ( writer . is File Type Supported ( file Type ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "14750", "code": ["public void modify ( SSO Token token , String obj Name , Modification Item [ ] mods ) throws SMS Exception , SSO Exception {", "if ( ( obj Name == null ) || ( obj Name . length ( ) == NUM_ ) || ( mods == null ) || ( mods . length == NUM_ ) ) {", "throw new Illegal Argument Exception ( STR_ + STR_ ) ; }", "String obj Key = obj Name . to Lower Case ( ) ;", "String filepath = null ;", "m RW Lock . read Request ( ) ;", "try {", "filepath = m Name Map . get Property ( obj Key ) ;", "if ( filepath == null ) {", "String errmsg = STR_ + obj Name + STR_ ;", "m Debug . error ( errmsg ) ;", "throw new Service Not Found Exception ( errmsg ) ; } }", "finally {", "m RW Lock . read Done ( ) ; }", "m RW Lock . write Request ( ) ;", "try {", "filepath = m Name Map . get Property ( obj Key ) ;", "if ( filepath == null ) {", "String errmsg = STR_ + obj Name + STR_ ;", "m Debug . error ( errmsg ) ;", "throw new Service Not Found Exception ( errmsg ) ; }", "File filehandle = new File ( filepath ) ;", "if ( ! filehandle . is File ( ) ) {", "String errmsg = STR_ + obj Name + STR_ ;", "m Debug . error ( errmsg ) ;", "throw new Service Not Found Exception ( errmsg ) ; }", "Properties props = load Properties ( filehandle , obj Name ) ;", "boolean has Sun Xml Key Value = ( props . get Property ( SMS Entry . ATTR XML KEYVAL ) == null ) ? false : true ;", "for ( int i = NUM_ ; i < mods . length ; i ++ ) {", "modify Values ( obj Name , mods [ i ] , props ) ; }", "save Properties ( props , filehandle , obj Name ) ;", "if ( ! has Sun Xml Key Value ) {", "has Sun Xml Key Value = ( props . get Property ( SMS Entry . ATTR XML KEYVAL ) == null ) ? false : true ; }", "if ( has Sun Xml Key Value ) {", "delete Sun Xml Key Val Files ( filehandle . get Parent File ( ) ) ;", "Set xml Key Vals = to Val Set ( SMS Entry . ATTR XML KEYVAL , props . get Property ( SMS Entry . ATTR XML KEYVAL ) ) ;", "create Sun Xml Key Val Files ( filehandle . get Parent File ( ) , xml Key Vals ) ; } }", "finally {", "m RW Lock . write Done ( ) ; } }"]}
{"ids": "35721", "code": ["private void make Items ( int finger Position , List < View > view List ) {", "if ( finger Position >= view List . size ( ) ) {", "return ; }", "for ( int i = NUM_ ; i < view List . size ( ) ; i ++ ) {", "int translation Y = Math . min ( Math . max ( Math . abs ( finger Position - i ) * interval Height , NUM_ ) , max Translation Height ) ;", "update Item Height Animator ( view List . get ( i ) , translation Y ) ; } }"]}
{"ids": "24212", "code": ["private boolean path Is Windows ( String path ) {", "if ( path != null && path . length ( ) > NUM_ ) {", "return ( Character . is Letter ( path . char At ( NUM_ ) ) && path . char At ( NUM_ ) == STR_ ) || ( path . starts With ( STR_ ) || path . starts With ( STR_ ) ) ; }", "return false ; }"]}
{"ids": "83386", "code": ["public static byte [ ] read Binary File ( File source File ) {", "byte [ ] result = null ;", "try {", "Buffered Input Stream input ;", "input = new Buffered Input Stream ( new File Input Stream ( source File ) ) ;", "int num = input . available ( ) ;", "result = new byte [ num ] ;", "input . read ( result , NUM_ , num ) ;", "input . close ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "result = null ; }", "return result ; }"]}
{"ids": "36135", "code": ["public void add Term ( Split Condition condition ) {", "terms . add ( condition ) ; }"]}
{"ids": "11583", "code": ["public void rebuild Event List ( boolean reset Selected ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ ) ; }", "all Events = null ;", "active Events = null ;", "hide Details ( ) ;", "init Interface ( get Active Events ( ) , reset Selected ) ;", "highlight Current Event ( current Time ) ;", "fire Property Change ( Active Events Property , null , get Active Events ( ) ) ; }"]}
{"ids": "23695", "code": ["public Disk Store Factory create Disk Store Factory ( ) {", "return new Disk Store Factory Impl ( this ) ; }"]}
{"ids": "67383", "code": ["public void put ( byte [ ] buffer , int offset , int count ) {", "if ( count > ( bytes . length - this . content Length ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "System . arraycopy ( buffer , offset , bytes , this . content Length , count ) ;", "this . content Length += count ; }"]}
{"ids": "41071", "code": ["private void mark Reserved ( int rop Reg , int category ) {", "reserved Rop Regs . set ( rop Reg , rop Reg + category , true ) ; }"]}
{"ids": "45912", "code": ["public static void register Default Resolvers ( ) {", "synchronized ( resolver List ) {", "resolver List . add ( new Resource Resolver ( new Resolver Fragment ( ) ) ) ;", "resolver List . add ( new Resource Resolver ( new Resolver Local Filesystem ( ) ) ) ;", "resolver List . add ( new Resource Resolver ( new Resolver X Pointer ( ) ) ) ;", "resolver List . add ( new Resource Resolver ( new Resolver Direct HTTP ( ) ) ) ; } }"]}
{"ids": "67382", "code": ["private void release ( Byte Array byte Array ) {", "synchronized ( sync Root ) {", "if ( available Byte Arrays . size ( ) >= max Available Arrays Count ) {", "return ; }", "if ( ! available Byte Arrays . contains ( byte Array ) ) {", "available Byte Arrays . add ( byte Array ) ; } } }"]}
{"ids": "7626", "code": ["@ Override public void draw Range Marker ( Graphics 2 D g 2 , Category Plot plot , Value Axis axis , Marker marker , Rectangle 2 D data Area ) {", "if ( marker instanceof Value Marker ) {", "Value Marker vm = ( Value Marker ) marker ;", "double value = vm . get Value ( ) ;", "Range range = axis . get Range ( ) ;", "if ( ! range . contains ( value ) ) {", "return ; }", "final Composite saved Composite = g 2 . get Composite ( ) ;", "g 2 . set Composite ( Alpha Composite . get Instance ( Alpha Composite . SRC OVER , marker . get Alpha ( ) ) ) ;", "Plot Orientation orientation = plot . get Orientation ( ) ;", "double v = axis . value To Java 2 D ( value , data Area , plot . get Range Axis Edge ( ) ) ;", "Line 2 D line = null ;", "if ( orientation == Plot Orientation . HORIZONTAL ) {", "line = new Line 2 D . Double ( v , data Area . get Min Y ( ) , v , data Area . get Max Y ( ) ) ; }", "else if ( orientation == Plot Orientation . VERTICAL ) {", "line = new Line 2 D . Double ( data Area . get Min X ( ) , v , data Area . get Max X ( ) , v ) ; }", "else {", "throw new Illegal State Exception ( ) ; }", "g 2 . set Paint ( marker . get Paint ( ) ) ;", "g 2 . set Stroke ( marker . get Stroke ( ) ) ;", "g 2 . draw ( line ) ;", "String label = marker . get Label ( ) ;", "Rectangle Anchor anchor = marker . get Label Anchor ( ) ;", "if ( label != null ) {", "Font label Font = marker . get Label Font ( ) ;", "g 2 . set Font ( label Font ) ;", "Point 2 D coordinates = calculate Range Marker Text Anchor Point ( g 2 , orientation , data Area , line . get Bounds 2 D ( ) , marker . get Label Offset ( ) , Length Adjustment Type . EXPAND , anchor ) ;", "Rectangle 2 D rect = Text Utils . calc Aligned String Bounds ( label , g 2 , ( float ) coordinates . get X ( ) , ( float ) coordinates . get Y ( ) , marker . get Label Text Anchor ( ) ) ;", "g 2 . set Paint ( marker . get Label Background Color ( ) ) ;", "g 2 . fill ( rect ) ;", "g 2 . set Paint ( marker . get Label Paint ( ) ) ;", "Text Utils . draw Aligned String ( label , g 2 , ( float ) coordinates . get X ( ) , ( float ) coordinates . get Y ( ) , marker . get Label Text Anchor ( ) ) ; }", "g 2 . set Composite ( saved Composite ) ; }", "else if ( marker instanceof Interval Marker ) {", "Interval Marker im = ( Interval Marker ) marker ;", "double start = im . get Start Value ( ) ;", "double end = im . get End Value ( ) ;", "Range range = axis . get Range ( ) ;", "if ( ! ( range . intersects ( start , end ) ) ) {", "return ; }", "final Composite saved Composite = g 2 . get Composite ( ) ;", "g 2 . set Composite ( Alpha Composite . get Instance ( Alpha Composite . SRC OVER , marker . get Alpha ( ) ) ) ;", "double start 2 d = axis . value To Java 2 D ( start , data Area , plot . get Range Axis Edge ( ) ) ;", "double end 2 d = axis . value To Java 2 D ( end , data Area , plot . get Range Axis Edge ( ) ) ;", "double low = Math . min ( start 2 d , end 2 d ) ;", "double high = Math . max ( start 2 d , end 2 d ) ;", "Plot Orientation orientation = plot . get Orientation ( ) ;", "Rectangle 2 D rect = null ;", "if ( orientation == Plot Orientation . HORIZONTAL ) {", "low = Math . max ( low , data Area . get Min X ( ) ) ;", "high = Math . min ( high , data Area . get Max X ( ) ) ;", "rect = new Rectangle 2 D . Double ( low , data Area . get Min Y ( ) , high - low , data Area . get Height ( ) ) ; }", "else if ( orientation == Plot Orientation . VERTICAL ) {", "low = Math . max ( low , data Area . get Min Y ( ) ) ;", "high = Math . min ( high , data Area . get Max Y ( ) ) ;", "rect = new Rectangle 2 D . Double ( data Area . get Min X ( ) , low , data Area . get Width ( ) , high - low ) ; }", "Paint p = marker . get Paint ( ) ;", "if ( p instanceof Gradient Paint ) {", "Gradient Paint gp = ( Gradient Paint ) p ;", "Gradient Paint Transformer t = im . get Gradient Paint Transformer ( ) ;", "if ( t != null ) {", "gp = t . transform ( gp , rect ) ; }", "g 2 . set Paint ( gp ) ; }", "else {", "g 2 . set Paint ( p ) ; }", "g 2 . fill ( rect ) ;", "if ( im . get Outline Paint ( ) != null && im . get Outline Stroke ( ) != null ) {", "if ( orientation == Plot Orientation . VERTICAL ) {", "Line 2 D line = new Line 2 D . Double ( ) ;", "double x 0 = data Area . get Min X ( ) ;", "double x 1 = data Area . get Max X ( ) ;", "g 2 . set Paint ( im . get Outline Paint ( ) ) ;", "g 2 . set Stroke ( im . get Outline Stroke ( ) ) ;", "if ( range . contains ( start ) ) {", "line . set Line ( x 0 , start 2 d , x 1 , start 2 d ) ;", "g 2 . draw ( line ) ; }", "if ( range . contains ( end ) ) {", "line . set Line ( x 0 , end 2 d , x 1 , end 2 d ) ;", "g 2 . draw ( line ) ; } }", "else {", "Line 2 D line = new Line 2 D . Double ( ) ;", "double y 0 = data Area . get Min Y ( ) ;", "double y 1 = data Area . get Max Y ( ) ;", "g 2 . set Paint ( im . get Outline Paint ( ) ) ;", "g 2 . set Stroke ( im . get Outline Stroke ( ) ) ;", "if ( range . contains ( start ) ) {", "line . set Line ( start 2 d , y 0 , start 2 d , y 1 ) ;", "g 2 . draw ( line ) ; }", "if ( range . contains ( end ) ) {", "line . set Line ( end 2 d , y 0 , end 2 d , y 1 ) ;", "g 2 . draw ( line ) ; } } }", "String label = marker . get Label ( ) ;", "Rectangle Anchor anchor = marker . get Label Anchor ( ) ;", "if ( label != null ) {", "Font label Font = marker . get Label Font ( ) ;", "g 2 . set Font ( label Font ) ;", "Point 2 D coords = calculate Range Marker Text Anchor Point ( g 2 , orientation , data Area , rect , marker . get Label Offset ( ) , marker . get Label Offset Type ( ) , anchor ) ;", "Rectangle 2 D r = Text Utils . calc Aligned String Bounds ( label , g 2 , ( float ) coords . get X ( ) , ( float ) coords . get Y ( ) , marker . get Label Text Anchor ( ) ) ;", "g 2 . set Paint ( marker . get Label Background Color ( ) ) ;", "g 2 . fill ( r ) ;", "g 2 . set Paint ( marker . get Label Paint ( ) ) ;", "Text Utilities . draw Aligned String ( label , g 2 , ( float ) coords . get X ( ) , ( float ) coords . get Y ( ) , marker . get Label Text Anchor ( ) ) ; }", "g 2 . set Composite ( saved Composite ) ; } }"]}
{"ids": "39767", "code": ["private void init ( ) {", "acceptable Methods = new Array List < > ( ) ;", "acceptable Methods . add ( new No Authentication Required Method ( ) ) ;", "acceptable Methods . add ( new Gss Api Method ( ) ) ;", "acceptable Methods . add ( new Username Password Method ( ) ) ; }"]}
{"ids": "21235", "code": ["private boolean lock Order ( Order order ) {", "lock . lock ( ) ;", "try {", "return active Orders . add ( order . get Id ( ) ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "23252", "code": ["public void put ( Buffer buffer ) {", "if ( buffer . get Length ( ) <= NUM_ ) {", "return ; }", "byte [ ] current Rtp Packet Data = ( ( byte [ ] ) buffer . get Data ( ) ) ;", "H 264 Rtp Headers h 264 Rtp Headers = new H 264 Rtp Headers ( current Rtp Packet Data ) ;", "if ( h 264 Rtp Headers . get FUI F ( ) ) {", "return ; }", "if ( reassembled Data == null ) {", "timestamp = buffer . get Timestamp ( ) ;", "format = buffer . get Format ( ) ;", "seq Number = buffer . get Sequence Number ( ) ;", "reassembled Data NAL Header = h 264 Rtp Headers . get NAL Header ( ) ;", "reassembled Data = new byte [ Java Packetizer . H 264 MAX RTP PKTS ] [ H 264 FRAME PACKET SIZE ] ;", "reassembled Data Size = new int [ Java Packetizer . H 264 MAX RTP PKTS ] ;", "reassembled Data Has Start = false ;", "reassembled Data Has End = false ; }", "int pos Seq = ( int ) ( buffer . get Sequence Number ( ) & VIDEO DECODER MAX PAYLOADS CHUNKS MASK ) ;", "int payload Start Position = h 264 Rtp Headers . get Header Size ( ) ;", "int payload Length = buffer . get Length ( ) - h 264 Rtp Headers . get Header Size ( ) ;", "if ( h 264 Rtp Headers . get FUI TYPE ( ) == H 264 Rtp Headers . AVC NALTYPE FUA ) {", "reassembled Data Has Start |= ( h 264 Rtp Headers . get FUH S ( ) ) ;", "reassembled Data Has End |= ( h 264 Rtp Headers . get FUH E ( ) ) ;", "reassembled Data Pos Seq Start = ( ( h 264 Rtp Headers . get FUH S ( ) ) ? pos Seq : reassembled Data Pos Seq Start ) ;", "reassembled Data Pos Seq End = ( ( h 264 Rtp Headers . get FUH E ( ) ) ? pos Seq : reassembled Data Pos Seq End ) ; }", "reassembled Data Size [ pos Seq ] = payload Length ;", "reassembled Data Full Size += payload Length ;", "System . arraycopy ( current Rtp Packet Data , payload Start Position , reassembled Data [ pos Seq ] , NUM_ , payload Length ) ;", "video Orientation = buffer . get Video Orientation ( ) ; }"]}
{"ids": "35647", "code": ["private void unify Username By Name ( Map < String , List < Log Commit Info > > dev Name Map ) {", "for ( Entry < String , List < Log Commit Info > > entry : dev Name Map . entry Set ( ) ) {", "List < String > user Names = get User Names List ( entry . get Value ( ) ) ;", "if ( user Names . size ( ) > NUM_ ) {", "String new User Name = get New User Name ( user Names ) ;", "for ( Log Commit Info commit : entry . get Value ( ) ) {", "commit . set User Name ( new User Name ) ; } } } }"]}
{"ids": "28349", "code": ["@ Suppress Warnings ( STR_ ) public Jdbc Data ( Connection connection , String table , boolean buffered ) {", "this . connection = connection ;", "this . table = table ;", "set Buffered ( buffered ) ;", "try {", "set Column Types ( get Jdbc Column Types ( ) ) ; }", "catch ( SQL Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "86747", "code": ["public static byte [ ] read Data ( final URL url ) throws IO Exception {", "try ( Input Stream input = url . open Stream ( ) ) {", "return read Data ( input ) ; } }"]}
{"ids": "6577", "code": ["public static String to Kilobytes ( long bytes ) {", "if ( bytes < NUM_ ) return STR_ + GENERAL UNIT KILOBYTES ;", "long kbytes = bytes / NUM_ ;", "if ( ( bytes & NUM_ ) != NUM_ || ( bytes > NUM_ && bytes < NUM_ ) ) kbytes ++ ;", "return NUMBER FORMAT 0 . format ( kbytes ) + GENERAL UNIT KILOBYTES ; }"]}
{"ids": "51957", "code": ["private Pending Intent create Request Pending Intent ( @ Non Null String pending Intent Class Name ) {", "Pending Intent pending Intent = null ;", "try {", "Class class Of Pending Intent = Class . for Name ( pending Intent Class Name ) ;", "if ( class Of Pending Intent != null ) {", "Intent intent = new Intent ( m Context , class Of Pending Intent ) ;", "pending Intent = Pending Intent . get Service ( m Context , NUM_ , intent , Pending Intent . FLAG UPDATE CURRENT ) ; } }", "catch ( Class Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "return pending Intent ; }"]}
{"ids": "371", "code": ["public void configs ( Swt Platform ... platforms ) {", "configs ( Arrays . as List ( platforms ) ) ; }"]}
{"ids": "15155", "code": ["protected int check IP Range ( ) {", "int ret Val = NUM_ ;", "String ip Version ;", "String ip Type ;", "Map < String , String > hold Details ;", "for ( String next IP : IP Range Range ) {", "try {", "hold Details = check IP Version ( next IP ) ; }", "catch ( Illegal Argument Exception e ) {", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( STR_ , ADAPTIVE , next IP , e ) ; }", "continue ; }", "ip Version = hold Details . get ( IP Version ) ;", "ip Type = hold Details . get ( IP TYPE ) ;", "if ( ip Version . equals Ignore Case ( IP V 6 ) && Validate I Paddress . is I Pv 6 ( client IP ) ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , ADAPTIVE , client IP , next IP ) ;", "debug . message ( STR_ , IP V 6 ) ;", "debug . message ( STR_ , I Pv 6 Address . from String ( client IP ) ) ; }", "if ( ip Type . equals Ignore Case ( STR_ ) ) {", "String first = hold Details . get ( IP START ) ;", "String last = hold Details . get ( IP END ) ;", "I Pv 6 Address Range i Pv 6 Address Range = I Pv 6 Address Range . from First And Last ( I Pv 6 Address . from String ( first ) , I Pv 6 Address . from String ( last ) ) ;", "if ( i Pv 6 Address Range . contains ( I Pv 6 Address . from String ( client IP ) ) ) {", "ret Val = IP Range Score ;", "break ; } }", "else if ( ip Type . equals Ignore Case ( STR_ ) ) {", "I Pv 6 Network i Pv 6 Network = I Pv 6 Network . from String ( next IP ) ;", "if ( i Pv 6 Network . contains ( I Pv 6 Address . from String ( client IP ) ) ) {", "ret Val = IP Range Score ;", "break ; } }", "else {", "I Pv 6 Address i Pv 6 Address Next IP = I Pv 6 Address . from String ( next IP ) ;", "if ( i Pv 6 Address Next IP . compare To ( I Pv 6 Address . from String ( client IP ) ) == NUM_ ) {", "ret Val = IP Range Score ;", "break ; } } }", "else if ( ip Version . equals Ignore Case ( IP V 4 ) && Validate I Paddress . is I Pv 4 ( client IP ) ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , ADAPTIVE , client IP , next IP ) ;", "debug . message ( STR_ , IP V 4 ) ;", "debug . message ( STR_ , client IP ) ; }", "IP Range the Range = new IP Range ( next IP ) ;", "if ( the Range . in Range ( client IP ) ) {", "ret Val = IP Range Score ;", "break ; } } }", "if ( ! IP Range Invert ) {", "ret Val = IP Range Score - ret Val ; }", "return ret Val ; }"]}
{"ids": "5072", "code": ["@ Override public Shape Tile Simplex to Simplex ( ) {", "if ( is empty ( ) ) return Shape Tile Simplex . EMPTY ;", "Array List < Pla Line Int > line arr = new Array List < Pla Line Int > ( NUM_ ) ;", "line arr . add ( new Pla Line Int ( box ll , Pla Direction . RIGHT ) ) ;", "line arr . add ( new Pla Line Int ( box ur , Pla Direction . UP ) ) ;", "line arr . add ( new Pla Line Int ( box ur , Pla Direction . LEFT ) ) ;", "line arr . add ( new Pla Line Int ( box ll , Pla Direction . DOWN ) ) ;", "return new Shape Tile Simplex ( line arr ) ; }"]}
{"ids": "15402", "code": ["private void inject Content ( Inject inject Content ) throws IO Exception , Mojo Execution Exception {", "Map < Pattern , File > contents = get Contents Map ( inject Content . get Contents ( ) ) ;", "File tmp File = io Factory . create Temporary File ( inject Content . get Destination File ( ) ) ;", "Buffered Reader reader = null ;", "Buffered Writer writer = null ;", "try {", "reader = io Factory . new Reader ( inject Content . get Destination File ( ) ) ;", "writer = io Factory . new Writer ( tmp File ) ;", "String line ;", "while ( ( line = reader . read Line ( ) ) != null ) {", "File content = does Line Match Id ( contents , line ) ;", "if ( content != null ) {", "io Factory . write Content ( writer , content , get Content Converter ( inject Content ) ) ; }", "else {", "io Factory . write Line ( writer , line ) ; } } }", "finally {", "if ( reader != null ) {", "reader . close ( ) ; }", "if ( writer != null ) {", "writer . flush ( ) ;", "writer . close ( ) ; } }", "io Factory . move To ( tmp File , inject Content . get Destination File ( ) ) ; }"]}
{"ids": "37062", "code": ["private static boolean create Boolean Setting ( final Map < String , String > raw Settings , final String setting Name , final boolean default Value ) {", "final String setting String = raw Settings . get ( setting Name ) ;", "if ( setting String == null ) {", "return default Value ; }", "else {", "try {", "return Boolean . parse Boolean ( setting String ) ; }", "catch ( final Number Format Exception exception ) {", "C Utility Functions . log Exception ( exception ) ;", "return default Value ; } } }"]}
{"ids": "52392", "code": ["String generate Key ( ) throws Oracle Exception {", "byte [ ] data = null ;", "try {", "data = Hash Funcs . get Random ( ) ; }", "catch ( Exception e ) {", "if ( Oracle Log . is Logging Enabled ( ) ) log . warning ( e . to String ( ) ) ; }", "if ( data == null ) {", "data = fetch Guid ( ) ; }", "if ( data == null ) {", "throw SODA Utils . make Exception ( SODA Message . EX UNABLE TO CREATE UUID ) ; }", "return ( Byte Array . raw To Hex ( data ) ) ; }"]}
{"ids": "9371", "code": ["public double [ ] array Copy ( ) {", "double [ ] array = new double [ length ( ) ] ;", "for ( Index Value iv : this ) array [ iv . get Index ( ) ] = iv . get Value ( ) ;", "return array ; }"]}
{"ids": "51825", "code": ["private void init Pattern ( ) {", "String Buffer pattern Template Regex = new String Buffer ( ) ;", "logger . debug ( STR_ ) ;", "Matcher placeholder Matcher = get Placeholder Matcher ( ) ;", "logger . debug ( STR_ ) ;", "while ( placeholder Matcher . find ( ) ) {", "String group = placeholder Matcher . group ( NUM_ ) ;", "if ( ! groups . contains ( group ) ) {", "logger . trace ( STR_ ) ;", "groups . add ( group ) ;", "String group Regex = get Group Regex ( group ) ;", "placeholder Matcher . append Replacement ( pattern Template Regex , Matcher . quote Replacement ( STR_ + group + STR_ + group Regex + STR_ ) ) ; }", "else {", "logger . trace ( STR_ ) ;", "placeholder Matcher . append Replacement ( pattern Template Regex , Matcher . quote Replacement ( STR_ + group + STR_ ) ) ; } }", "placeholder Matcher . append Tail ( pattern Template Regex ) ;", "String pattern Regex = pattern Template Regex . to String ( ) ;", "logger . debug ( STR_ + pattern Regex ) ;", "pattern = Pattern . compile ( pattern Regex ) ; }"]}
{"ids": "60471", "code": ["public List < Soft Wrap Impl > remove Starting From ( int offset ) {", "int start Index = get Soft Wrap Index ( offset ) ;", "if ( start Index < NUM_ ) {", "start Index = - start Index - NUM_ ; }", "if ( start Index >= my Wraps . size ( ) ) {", "return Collections . empty List ( ) ; }", "List < Soft Wrap Impl > tail = my Wraps . sub List ( start Index , my Wraps . size ( ) ) ;", "List < Soft Wrap Impl > result = new Array List < Soft Wrap Impl > ( tail ) ;", "tail . clear ( ) ;", "return result ; }"]}
{"ids": "43146", "code": ["public static String format Dps ( final double dps ) {", "return STR_ + String . format ( STR_ , dps ) + STR_ ; }"]}
{"ids": "10218", "code": ["public static String truncate ( String string , int length ) {", "if ( string . length ( ) > length ) {", "string = string . substring ( NUM_ , length ) ; }", "return string ; }"]}
{"ids": "64300", "code": ["private boolean check Disband ( Legion legion ) {", "if ( legion . is Disbanding ( ) ) {", "if ( ( System . current Time Millis ( ) / NUM_ ) > legion . get Disband Time ( ) ) {", "disband Legion ( legion ) ;", "return true ; } }", "return false ; }"]}
{"ids": "747", "code": ["public static Input Stream stream From String ( String location ) throws IO Exception {", "Input Stream is = null ;", "URL url = url From String ( location , null , false ) ;", "if ( url != null ) {", "is = url . open Stream ( ) ; }", "else {", "File f = new File ( location ) ;", "if ( f . exists ( ) ) is = new File Input Stream ( f ) ; }", "if ( is == null ) {", "return null ; }", "else if ( is G Zip File ( location ) ) {", "return new GZIP Input Stream ( is ) ; }", "else {", "return is ; } }"]}
{"ids": "85926", "code": ["public void add ( T item ) {", "synchronized ( lock ) {", "items . add ( identified Item Factory . create ( item ) ) ; }", "notify Data Set Changed ( ) ; }"]}
{"ids": "21907", "code": ["private void copy AC Ls ( List < Un Managed Cifs Share ACL > orig ACL List , List < Cifs Share ACL > share ACL List , File Share fileshare ) {", "Cifs Share ACL share ACL = null ;", "for ( Un Managed Cifs Share ACL orig ACL : orig ACL List ) {", "share ACL = new Cifs Share ACL ( ) ;", "share ACL . set Id ( URI Util . create Id ( Cifs Share ACL . class ) ) ;", "share ACL . set User ( orig ACL . get User ( ) ) ;", "share ACL . set Permission ( orig ACL . get Permission ( ) ) ;", "share ACL . set Share Name ( orig ACL . get Share Name ( ) ) ;", "share ACL . set File System Id ( fileshare . get Id ( ) ) ;", "share ACL List . add ( share ACL ) ;", "logger . info ( STR_ , share ACL . to String ( ) ) ; } }"]}
{"ids": "23292", "code": ["public Resource List Parser parse ( ) throws Parser Configuration Exception , SAX Exception , Parse Failure Exception {", "try {", "SAX Parser Factory factory = SAX Parser Factory . new Instance ( ) ;", "SAX Parser parser = factory . new SAX Parser ( ) ;", "parser . parse ( m Input Source , this ) ;", "return this ; }", "catch ( IO Exception e ) {", "throw new Parse Failure Exception ( STR_ , e ) ; } }"]}
{"ids": "40891", "code": ["public Builder delete Entitlements ( ) {", "delete Fields . add ( STR_ ) ;", "return this ; }"]}
{"ids": "34226", "code": ["protected void incorporate Signed Properties ( ) throws DSS Exception {", "signed Properties Dom = DSSXML Utils . add Element ( document Dom , qualifying Properties Dom , X Ad ES , XADES SIGNED PROPERTIES ) ;", "signed Properties Dom . set Attribute ( ID , STR_ + deterministic Id ) ;", "incorporate Signed Signature Properties ( ) ; }"]}
{"ids": "81491", "code": ["public int depth ( ) {", "return pointer ; }"]}
{"ids": "86311", "code": ["public void monitor ( Scaling State Monitor Task task ) {", "task Queue . add ( task ) ;", "start Monitor ( ) ; }"]}
{"ids": "75524", "code": ["private static void write File ( File file , List < String > lines ) throws IO Exception {", "if ( ! file . exists ( ) ) file . create New File ( ) ;", "File Writer fw = new File Writer ( file ) ;", "Buffered Writer Bw = new Buffered Writer ( fw ) ;", "Print Writer pw = new Print Writer ( Bw ) ;", "for ( String line : lines ) pw . println ( line ) ;", "Bw . close ( ) ;", "fw . close ( ) ;", "pw . close ( ) ; }"]}
{"ids": "11954", "code": ["public synchronized boolean verify Chunk Auth Tag ( int chunk Idx , byte [ ] chunk Auth Tag ) throws File Encryption Exception {", "if ( ( chunk Idx < NUM_ ) || ( chunk Auth Tag == null ) || ( chunk Auth Tag . length != back Enc Random Access File . CHUNK TLEN ) ) {", "throw new File Encryption Exception ( STR_ ) ; }", "else {", "byte [ ] stored Auth Tag = atag List . get ( chunk Idx ) ;", "if ( stored Auth Tag == null || ! Arrays . equals ( chunk Auth Tag , stored Auth Tag ) ) {", "return false ; }", "else {", "return true ; } } }"]}
{"ids": "68643", "code": ["private Document parse Route File ( ) throws Exception {", "Document Builder Factory factory = Document Builder Factory . new Instance ( ) ;", "factory . set Namespace Aware ( true ) ;", "Document Builder builder = factory . new Document Builder ( ) ;", "return builder . parse ( route File ) ; }"]}
{"ids": "10934", "code": ["public void remove DTED Directory Handler ( DTED Directory Handler handler ) {", "directories . remove ( handler ) ; }"]}
{"ids": "44228", "code": ["public default void add File ( final Content Provider content Provider , final String file Name , final Entry Information entry Information ) throws IO Exception {", "add File ( content Provider , file Name , entry Information , Optional . empty ( ) ) ; }"]}
{"ids": "45955", "code": ["private Vector < Snmp Var Bind > split From ( Vector < Snmp Var Bind > original , int limit ) {", "int max = original . size ( ) ;", "Vector < Snmp Var Bind > result = new Vector < > ( max - limit ) ;", "int i = limit ;", "for ( Enumeration < Snmp Var Bind > e = original . elements ( ) ; e . has More Elements ( ) ; -- i ) {", "Snmp Var Bind var = e . next Element ( ) ;", "if ( i > NUM_ ) continue ;", "result . add Element ( new Snmp Var Bind ( var . oid , var . value ) ) ; }", "return result ; }"]}
{"ids": "60269", "code": ["public final void delay Task ( @ Not Null Transaction Runnable task ) {", "my Delayed Tasks . add ( task ) ; }"]}
{"ids": "33308", "code": ["private static < T > int migrate All ( Migration < T > migration ) throws Exception {", "int migrated = NUM_ ;", "for ( T entity : migration . get All Entities ( ) ) {", "try {", "if ( migration . is Migrated ( entity ) ) continue ; }", "catch ( Exception x ) {", "LOG . error ( STR_ , entity ) ;", "throw x ; }", "try {", "migration . migrate ( entity ) ; }", "catch ( Exception x ) {", "LOG . error ( STR_ , entity ) ;", "throw x ; }", "migrated ++ ; }", "return migrated ; }"]}
{"ids": "50407", "code": ["public static String encode To String ( byte [ ] src ) {", "if ( src == null ) {", "return null ; }", "if ( src . length == NUM_ ) {", "return STR_ ; }", "String result ;", "try {", "result = new String ( delegate . encode ( src ) , DEFAULT CHARSET . display Name ( ) ) ; }", "catch ( Unsupported Encoding Exception e ) {", "throw new Illegal State Exception ( e ) ; }", "return result ; }"]}
{"ids": "83997", "code": ["public static void chunk Task Sync ( Region Wrapper region , final Runnable Val < int [ ] > task ) {", "final int p 1 x = region . min X ;", "final int p 1 z = region . min Z ;", "final int p 2 x = region . max X ;", "final int p 2 z = region . max Z ;", "final int bcx = p 1 x > > NUM_ ;", "final int bcz = p 1 z > > NUM_ ;", "final int tcx = p 2 x > > NUM_ ;", "final int tcz = p 2 z > > NUM_ ;", "task . value = new int [ NUM_ ] ;", "for ( int x = bcx ; x <= tcx ; x ++ ) {", "for ( int z = bcz ; z <= tcz ; z ++ ) {", "task . value [ NUM_ ] = x ;", "task . value [ NUM_ ] = z ;", "task . value [ NUM_ ] = task . value [ NUM_ ] << NUM_ ;", "task . value [ NUM_ ] = task . value [ NUM_ ] << NUM_ ;", "task . value [ NUM_ ] = task . value [ NUM_ ] + NUM_ ;", "task . value [ NUM_ ] = task . value [ NUM_ ] + NUM_ ;", "task . value [ NUM_ ] = NUM_ ;", "if ( task . value [ NUM_ ] == bcx ) {", "task . value [ NUM_ ] = p 1 x ;", "task . value [ NUM_ ] = NUM_ ; }", "if ( task . value [ NUM_ ] == tcx ) {", "task . value [ NUM_ ] = p 2 x ;", "task . value [ NUM_ ] = NUM_ ; }", "if ( task . value [ NUM_ ] == bcz ) {", "task . value [ NUM_ ] = p 1 z ;", "task . value [ NUM_ ] = NUM_ ; }", "if ( task . value [ NUM_ ] == tcz ) {", "task . value [ NUM_ ] = p 2 z ;", "task . value [ NUM_ ] = NUM_ ; }", "task . run ( ) ; } } }"]}
{"ids": "9011", "code": ["public Elsa Serializer Pojo make ( ) {", "return new Elsa Serializer Pojo ( object Stack , singletons , registered Sers , registered Ser Headers , registered Deser , unknown Class Notification , new Elsa Class Info Resolver . Array Based ( classes . to Array ( new Class [ NUM_ ] ) ) ) ; }"]}
{"ids": "12613", "code": ["private void load Binary ( Input Stream is ) throws IO Exception {", "if ( is instanceof File Input Stream ) {", "File Input Stream fis = ( File Input Stream ) is ;", "File Channel fc = fis . get Channel ( ) ;", "Mapped Byte Buffer bb = fc . map ( File Channel . Map Mode . READ ONLY , NUM_ , ( int ) fc . size ( ) ) ;", "bb . load ( ) ;", "load Binary ( bb ) ;", "is . close ( ) ; }", "else {", "load Binary ( new Data Input Stream ( is ) ) ; } }"]}
{"ids": "8320", "code": ["private static boolean is Two Slot Type ( Class Node type ) {", "return type == Class Helper . long TYPE || type == Class Helper . double TYPE ; }"]}
{"ids": "86317", "code": ["public Specification Runner Builder sections ( String [ ] param Sections ) {", "Collections . add All ( this . sections , param Sections ) ;", "return this ; }"]}
{"ids": "44466", "code": ["private void consume CRLF ( ) throws Decoding Exception {", "char next = next Char ( ) ;", "if ( next != STR_ ) {", "consume Char ( STR_ ) ; }", "consume Char ( STR_ ) ; }"]}
{"ids": "9862", "code": ["private String process Logout Request ( Logout State t , Logout Request logout Request , Session Manager session Manager ) throws Saml Service Exception {", "String session Id = null ;", "List < Session Index > session List = logout Request . get Session Indexes ( ) ;", "Validate . not Null ( session List , STR_ ) ;", "Validate . is True ( session List . size ( ) > NUM_ ) ;", "for ( Session Index session Index : session List ) {", "Validate . not Null ( session Index ) ;", "String participant Session = session Index . get Session Index ( ) ;", "Validate . not Null ( participant Session , STR_ ) ;", "Session session = session Manager . get By Participant ( participant Session ) ;", "if ( session == null ) {", "throw new Saml Service Exception ( STR_ ) ; }", "if ( ! session . contains Session Participant Url ( t . get Issuer Value ( ) ) ) {", "throw new Saml Service Exception ( STR_ ) ; }", "if ( session Id == null ) {", "session Id = session . get Id ( ) ; }", "else {", "if ( ! session Id . equals ( session . get Id ( ) ) ) {", "throw new Saml Service Exception ( STR_ ) ; } } }", "return session Id ; }"]}
{"ids": "72725", "code": ["public void accept ( final Path file ) throws Interrupted Exception {", "logger . info ( String . format ( STR_ , file ) ) ;", "permits . acquire ( ) ;", "executor . execute ( new Consumer Task ( file ) ) ; }"]}
{"ids": "7390", "code": ["private Activity check Activity ( ) {", "Activity activity = m Activity . get ( ) ;", "if ( activity == null ) {", "throw new Illegal State Exception ( STR_ ) ; }", "return activity ; }"]}
{"ids": "68529", "code": ["@ Override public synchronized void start ( ) {", "LOGGER . info ( STR_ ) ;", "timer = new Timer ( STR_ ) ;", "timer . schedule ( this , INITIAL SCAN DELAY , SCAN INTERVAL ) ;", "running = true ; }"]}
{"ids": "77400", "code": ["public boolean is Landing Page ( URL url ) {", "if ( url . get Query ( ) != null ) {", "return false ; }", "else {", "return landing Page Suffix ( url ) != STR_ ; } }"]}
{"ids": "62288", "code": ["protected static void write Row Count Definitions ( Table Creator creator , Byte Buffer buffer ) {", "write Row Count Definitions ( creator , buffer , creator . get Index Count ( ) ) ; }"]}
{"ids": "5620", "code": ["public void send ( String the String ) {", "send ( the String . get Bytes ( ) ) ; }"]}
{"ids": "21195", "code": ["public void init ( ) {", "token Mgmt Executor . schedule With Fixed Delay ( new Expired Token Cleaner ( ) , NUM_ , max Life Values Holder . get Max Token Idle Time In Mins ( ) , Time Unit . MINUTES ) ;", "token Mgmt Executor . schedule With Fixed Delay ( new Token Keys Updater ( ) , NUM_ , FOREIGN TOKEN KEYS BUNDLE REFRESH RATE IN MINS , Time Unit . MINUTES ) ; }"]}
{"ids": "29594", "code": ["private void sign ( final byte [ ] content Bytes , final Byte Array Output Stream mime Content ) throws Exception {", "String alg Id = conf . get Signature Algorithm Id ( ) ;", "String key Id = conf . get Active Signing Key ( ) ;", "log . debug ( STR_ + STR_ , key Id , alg Id ) ;", "String signature = sign Helper ( key Id , alg Id , content Bytes ) ;", "mime Content . write ( envelope Header . get Bytes ( ) ) ;", "try ( Multipart Encoder encoder = new Multipart Encoder ( mime Content , envelope Boundary ) ) {", "encoder . start Part ( mp Mixed Content Type ( data Boundary ) ) ;", "encoder . write ( content Bytes ) ;", "String alg URI = Crypto Utils . get Signature Algorithm URI ( alg Id ) ;", "String hash URI = hash Calculator . get Algo URI ( ) ;", "Path verificatio Cert Path = conf . get Cert Path ( key Id ) ;", "encoder . start Part ( Mime Types . BINARY , new String [ ] { HEADER CONTENT TRANSFER ENCODING + STR_ , HEADER SIG ALGO ID + STR_ + alg URI , HEADER VERIFICATION CERT HASH + STR_ + get Verification Cert Hash ( verificatio Cert Path ) + STR_ + HEADER HASH ALGORITHM ID + STR_ + hash URI } ) ;", "encoder . write ( signature . get Bytes ( ) ) ; }", "log . debug ( STR_ , mime Content . to String ( ) ) ;", "Files . write ( temp Conf Path , mime Content . to Byte Array ( ) ) ;", "log . debug ( STR_ , temp Conf Path ) ; }"]}
{"ids": "68777", "code": ["private boolean next Item Is ( String match ) throws IO Exception {", "int c ;", "while ( is White Space ( c = buf . get ( ) ) ) { }", "for ( int i = NUM_ ; i < match . length ( ) ; i ++ ) {", "if ( i > NUM_ ) {", "c = buf . get ( ) ; }", "if ( c != match . char At ( i ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "23618", "code": ["public static Object deserialize Object ( final byte [ ] obj Bytes , final Class Loader loader ) throws IO Exception , Class Not Found Exception {", "Object Input Stream obj In = null ;", "try {", "obj In = new Class Loader Object Input Stream ( new Byte Array Input Stream ( obj Bytes ) , loader ) ;", "return obj In . read Object ( ) ; }", "finally {", "close ( obj In ) ; } }"]}
{"ids": "9201", "code": ["public Interval Impl ( int serial Num , long start Interval Date Time , double coverage Factor , Framing Flow Type interval Data Type , I Source source , I Interval Classification interval Classification , Version ade Version ) throws Ade Internal Exception {", "a ade Version = ade Version ;", "if ( start Interval Date Time < NUM_ ) {", "throw new Illegal Argument Exception ( String . format ( STR_ + STR_ + STR_ + STR_ , serial Num , start Interval Date Time , coverage Factor , interval Data Type , source , interval Classification , ade Version ) ) ; }", "m start Interval Time = start Interval Date Time ;", "m framing Flow Type = interval Data Type ;", "m serial Num = serial Num ;", "m interval Classification = interval Classification ;", "if ( m interval Classification == null ) {", "m interval Classification = Interval Classification Enum . REGULAR ; }", "m message Summary Map = new Tree Map < Integer , I Message Summary > ( ) ;", "m end Interval Time = m start Interval Time + m framing Flow Type . get Duration ( ) ;", "m source = source ;", "if ( coverage Factor <= NUM_ || coverage Factor > NUM_ ) {", "throw new Ade Internal Exception ( STR_ + coverage Factor ) ; }", "m coverage Factor = coverage Factor ; }"]}
{"ids": "36671", "code": ["public static boolean is True ( Map < String , Object > dict , String key ) {", "return is True ( dict , key , false ) ; }"]}
{"ids": "72802", "code": ["private void init Map Layer ( ) {", "float zoom = get Init Zoom ( map View . get Width ( ) , map View . get Height ( ) , image . get Width ( ) , image . get Height ( ) ) ;", "Log . i ( TAG , Float . to String ( zoom ) ) ;", "map View . set Current Zoom ( zoom , NUM_ , NUM_ ) ;", "float width = map View . get Width ( ) - zoom * image . get Width ( ) ;", "float height = map View . get Height ( ) - zoom * image . get Height ( ) ;", "map View . translate ( width / NUM_ , height / NUM_ ) ; }"]}
{"ids": "27948", "code": ["public static double sample Skew ( int size , double moment 3 , double sample Variance ) {", "int n = size ;", "double s = Math . sqrt ( sample Variance ) ;", "double m 3 = moment 3 * n ;", "return n * m 3 / ( ( n - NUM_ ) * ( n - NUM_ ) * s * s * s ) ; }"]}
{"ids": "10061", "code": ["private String extract Span ( String spans , int start , int end ) throws Index Out Of Bounds Exception {", "int offset = get First Span Offset ( spans ) ;", "assert ( start >= offset ) ;", "assert ( end >= offset ) ;", "spans += HTML OPEN SPAN ;", "int substart = get Span Pos ( spans , start - offset ) ;", "int subend = get Span Pos ( spans , end - offset + NUM_ ) ;", "return spans . substring ( substart , subend ) ; }"]}
{"ids": "84577", "code": ["public void finished ( long chain Length ) {", "current State = chain Length ;", "if ( loggers != null ) {", "for ( Logger logger : loggers ) {", "logger . log ( current State ) ;", "logger . stop Logging ( ) ; } }", "if ( show Operator Analysis ) {", "show Operator Analysis ( System . out ) ; }", "if ( operator Analysis File != null ) {", "try {", "Print Stream out = new Print Stream ( new File Output Stream ( operator Analysis File ) ) ;", "show Operator Analysis ( out ) ;", "out . flush ( ) ;", "out . close ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "74765", "code": ["protected void positive Close ( ) {", "free Content ( ) ; }"]}
{"ids": "82406", "code": ["public Input Stream Reader ( java . io . Input Stream is , java . lang . String enc ) throws java . io . Unsupported Encoding Exception {", "internal = is ;", "this . enc = enc . intern ( ) ; }"]}
{"ids": "1838", "code": ["public int server Delivery ( Object message , Object consumer , int delivery Count ) throws Exception {", "Proton Server Sender Context proton Sender = server Senders . get ( consumer ) ;", "if ( proton Sender != null ) {", "return proton Sender . deliver Message ( message , delivery Count ) ; }", "return NUM_ ; }"]}
{"ids": "73702", "code": ["public static String decode ( Abstract Message msg , Boolean ext , int header ) {", "if ( ext == false ) {", "return decode ( msg ) ; }", "return STR_ + header ; }"]}
{"ids": "38944", "code": ["private Instance voted Reclassify Example ( Instance example ) throws Exception {", "int class Votes [ ] = new int [ get Num Classes ( ) ] ;", "for ( int i = NUM_ ; i < class Votes . length ; i ++ ) {", "class Votes [ i ] = NUM_ ; }", "for ( Enumeration < Rule List > e = new Weka Enumeration < Rule List > ( m Decision List ) ; e . has More Elements ( ) ; ) {", "Rule List rl = e . next Element ( ) ;", "int class Value = ( int ) rl . classify Instance ( example ) ;", "if ( class Value >= NUM_ ) {", "class Votes [ class Value ] ++ ; } }", "int max Vote = NUM_ ;", "int vote = - NUM_ ;", "for ( int i = NUM_ ; i < class Votes . length ; i ++ ) {", "if ( class Votes [ i ] > max Vote ) {", "max Vote = class Votes [ i ] ;", "vote = i ; } }", "if ( vote >= NUM_ ) {", "example . set Class Value ( vote ) ; }", "else {", "throw new Exception ( STR_ ) ; }", "return example ; }"]}
{"ids": "48781", "code": ["public final int hash Code ( ) {", "return System . identity Hash Code ( this ) ; }"]}
{"ids": "283", "code": ["private boolean key Chain Contains Private Key ( Collection < EC Key > key Chain , EC Key key To Add ) {", "if ( key Chain == null || key To Add == null ) {", "return false ; }", "else {", "for ( EC Key loop Key : key Chain ) {", "if ( Arrays . equals ( key To Add . get Priv Key Bytes ( ) , loop Key . get Priv Key Bytes ( ) ) ) {", "return true ; } }", "return false ; } }"]}
{"ids": "40176", "code": ["public Script Builder data ( byte [ ] data ) {", "if ( data . length == NUM_ ) return small Num ( NUM_ ) ;", "else return data ( chunks . size ( ) , data ) ; }"]}
{"ids": "5339", "code": ["private void write User Registry ( Local Container container , File config Dir , Map < String , String > users , Map < String , List < String > > groups ) throws IO Exception {", "File users XML = new File ( config Dir , STR_ ) ;", "Print Stream writer = Server Config Utils . open ( users XML ) ;", "writer . println ( STR_ ) ;", "for ( Map . Entry < String , String > user : users . entry Set ( ) ) {", "writer . print ( STR_ ) ;", "writer . print ( user . get Key ( ) ) ;", "writer . print ( STR_ ) ;", "writer . print ( user . get Value ( ) ) ;", "writer . println ( STR_ ) ; }", "for ( Map . Entry < String , List < String > > group : groups . entry Set ( ) ) {", "writer . print ( STR_ ) ;", "writer . print ( group . get Key ( ) ) ;", "writer . println ( STR_ ) ;", "for ( String member : group . get Value ( ) ) {", "writer . print ( STR_ ) ;", "writer . print ( member ) ;", "writer . println ( STR_ ) ; }", "writer . println ( STR_ ) ; }", "writer . println ( STR_ ) ;", "Server Config Utils . close ( writer ) ; }"]}
{"ids": "17029", "code": ["@ Gen Ignore static Record create Record ( String name , String address , Class itf , Json Object metadata ) {", "return create Record ( name , address , itf . get Name ( ) , metadata ) ; }"]}
{"ids": "32739", "code": ["public Stopwatch CPU ( ) {", "thread Timer = Management Factory . get Thread MX Bean ( ) ;", "start = thread Timer . get Current Thread Cpu Time ( ) ; }"]}
{"ids": "12761", "code": ["public synchronized byte [ ] lookup Audio ( String inputtype , String locale , String voice , String outputparams , String style , String effects , String inputtext ) throws SQL Exception {", "if ( inputtype == null || locale == null || voice == null || inputtext == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "byte [ ] audio = null ;", "String query = STR_ + inputtype + STR_ + locale + STR_ + voice + STR_ + outputparams + STR_ + style + STR_ + effects + STR_ ;", "Prepared Statement st = connection . prepare Statement ( query ) ;", "st . set String ( NUM_ , inputtext ) ;", "Result Set results = st . execute Query ( ) ;", "if ( results . next ( ) ) {", "audio = results . get Bytes ( NUM_ ) ; }", "return audio ; }"]}
{"ids": "42095", "code": ["public void add Condition ( final Condition condition ) {", "conditions . add ( condition ) ;", "condition . set Id ( condition Id Counter ++ ) ; }"]}
{"ids": "30058", "code": ["public static byte [ ] read Bytes From Byte Buffer ( Byte Buffer byte Buffer ) {", "byte [ ] buffer = new byte [ byte Buffer . remaining ( ) ] ;", "byte Buffer . get ( buffer ) ;", "return buffer ; }"]}
{"ids": "21381", "code": ["public static Set < URI > fetch RP Target Virtual Pools ( Db Client db Client ) {", "Set < URI > rp Protected Target V Pools = new Hash Set < URI > ( ) ;", "try {", "List < URI > vpool Protection Settings UR Is = db Client . query By Type ( Vpool Protection Varray Settings . class , true ) ;", "Iterator < Vpool Protection Varray Settings > v Pool Protection Settings Itr = db Client . query Iterative Objects ( Vpool Protection Varray Settings . class , vpool Protection Settings UR Is , true ) ;", "while ( v Pool Protection Settings Itr . has Next ( ) ) {", "Vpool Protection Varray Settings r Setting = v Pool Protection Settings Itr . next ( ) ;", "if ( null != r Setting && ! Null Column Value Getter . is Null URI ( r Setting . get Virtual Pool ( ) ) ) {", "rp Protected Target V Pools . add ( r Setting . get Virtual Pool ( ) ) ; } } }", "catch ( Exception ex ) {", "log . error ( STR_ , ex ) ; }", "return rp Protected Target V Pools ; }"]}
{"ids": "64407", "code": ["public int cardinality ( ) {", "int sum = NUM_ ;", "for ( long l : this . data ) sum += Long . bit Count ( l ) ;", "return sum ; }"]}
{"ids": "67507", "code": ["private String de Escape Literal ( String lit ) {", "return lit . replace All ( STR_ , STR_ ) ; }"]}
{"ids": "9693", "code": ["public D New Key Store Type ( J Frame parent ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "set Title ( res . get String ( STR_ ) ) ;", "init Components ( ) ; }"]}
{"ids": "84511", "code": ["public void remove Listener ( final L listener ) {", "Validate . not Null ( listener , STR_ ) ;", "listeners . remove ( listener ) ; }"]}
{"ids": "77939", "code": ["public void run ( ) {", "start ( ) ;", "try {", "while ( true ) {", "Thread . sleep ( interval ) ;", "process Config Messages ( ) ; } }", "catch ( Interrupted Exception e ) {", "e . print Stack Trace ( ) ;", "log . warn ( STR_ ) ; }", "finally {", "log . info ( STR_ ) ;", "stop ( ) ; } }"]}
{"ids": "46335", "code": ["private void read Object ( java . io . Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "init ( get Name ( ) , get Mask ( actions ) ) ; }"]}
{"ids": "41093", "code": ["public int pred Block Index For Sources Index ( int sources Index ) {", "return operands . get ( sources Index ) . block Index ; }"]}
{"ids": "86660", "code": ["void append Program Description ( final Wrapping String Builder wb ) {", "if ( ! m Program Description . equals ( STR_ ) ) {", "wb . append ( LS ) ;", "wb . set Wrap Indent ( NUM_ ) ;", "wb . wrap Text With New Lines ( m Program Description ) ; } }"]}
{"ids": "6590", "code": ["@ Suppress Warnings ( STR_ ) private static final URL to URL ( String location , boolean file ) {", "if ( file ) {", "File f = new File ( location ) ;", "if ( f . exists ( ) ) {", "try {", "return f . to URL ( ) ; }", "catch ( Malformed URL Exception murl ) {", "return null ; } }", "else {", "return null ; } }", "else {", "return get URL ( location ) ; } }"]}
{"ids": "12582", "code": ["protected Object parse Value ( String string ) {", "int open Paren = string . index Of ( STR_ ) ;", "String type = string . substring ( NUM_ , open Paren ) ;", "String value = string . substring ( open Paren + NUM_ , string . length ( ) - NUM_ ) ;", "if ( type . equals ( STR_ ) ) {", "return value ; }", "else if ( type . equals ( STR_ ) ) {", "return new Float ( Float . parse Float ( value ) ) ; }", "else if ( type . equals ( STR_ ) ) {", "return new Integer ( Integer . parse Int ( value ) ) ; }", "else if ( type . equals ( STR_ ) ) {", "String Tokenizer tok = new String Tokenizer ( value , STR_ ) ;", "int size = tok . count Tokens ( ) ;", "int [ ] values = new int [ size ] ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "float fval = Float . parse Float ( tok . next Token ( ) ) ;", "values [ i ] = Math . round ( fval ) ; }", "return values ; }", "else {", "throw new Error ( STR_ + type ) ; } }"]}
{"ids": "20174", "code": ["@ Override public void update ( List < Env Var > data List ) {", "env Var List . clear ( ) ;", "if ( data List == null ) {", "for ( Env Var env Var : built In Env Var Map . values ( ) ) {", "env Var List . add ( env Var ) ; } }", "else {", "for ( Env Var env Var : data List ) {", "if ( built In Env Var Map . contains Key ( env Var . get Name ( ) ) ) {", "env Var List . add ( new Env Var ( env Var , true ) ) ; }", "else {", "env Var List . add ( new Env Var ( env Var , false ) ) ; } } }", "set Environment Variable Values ( ) ; }"]}
{"ids": "23835", "code": ["protected void notify Timestamps To Gateways ( Entry Event Impl event ) {", "Version Tag Holder update Time Stamp Event = new Version Tag Holder ( event . get Version Tag ( ) ) ;", "update Time Stamp Event . set Operation ( Operation . UPDATE VERSION STAMP ) ;", "update Time Stamp Event . set Key Info ( event . get Key Info ( ) ) ;", "update Time Stamp Event . set Generate Callbacks ( false ) ;", "update Time Stamp Event . distributed Member = event . get Distributed Member ( ) ;", "update Time Stamp Event . set New Event Id ( get System ( ) ) ;", "if ( event . get Region ( ) instanceof Bucket Region ) {", "Bucket Region br = ( Bucket Region ) event . get Region ( ) ;", "Partitioned Region pr = br . get Partitioned Region ( ) ;", "update Time Stamp Event . set Region ( pr ) ;", "if ( pr . is Parallel Wan Enabled ( ) ) {", "br . handle WAN Event ( update Time Stamp Event ) ; }", "if ( pr . is Initialized ( ) ) {", "pr . notify Gateway Sender ( Enum Listener Event . TIMESTAMP UPDATE , update Time Stamp Event ) ; } }", "else {", "update Time Stamp Event . set Region ( event . get Region ( ) ) ;", "notify Gateway Sender ( Enum Listener Event . TIMESTAMP UPDATE , update Time Stamp Event ) ; } }"]}
{"ids": "19652", "code": ["public Token next Regex ( Pattern pattern ) {", "if ( ! has Next Regex ( pattern ) ) throw new Illegal State Exception ( STR_ ) ;", "Matcher matcher = any Mention Pattern . matcher ( remaining ) ;", "if ( ! matcher . find ( ) ) throw new Illegal State Exception ( STR_ ) ;", "final int start = current Position + matcher . start ( ) ;", "final int end = current Position + matcher . end ( ) ;", "step To ( end ) ;", "return new Token ( this , start , end ) ; }"]}
{"ids": "67332", "code": ["public String as String ( ) throws IO Exception {", "long len = get Content Length ( ) ;", "Byte Array Output Stream buf ;", "if ( NUM_ < len ) {", "buf = new Byte Array Output Stream ( ( int ) len ) ; }", "else {", "buf = new Byte Array Output Stream ( ) ; }", "write To ( buf ) ;", "return decode ( buf . to Byte Array ( ) , get Character Encoding ( ) ) ; }"]}
{"ids": "49572", "code": ["public void execute ( ) throws IO Exception {", "String key = STR_ + ( System . current Time Millis ( ) / NUM_ ) ;", "String b 64 Key = Base 64 . encode ( key ) ;", "send Handshake Request ( b 64 Key ) ;", "receive Handshake Response ( b 64 Key ) ; }"]}
{"ids": "84004", "code": ["private void emit Until ( @ Nonnegative int task Count Allowed ) throws IO Exception {", "try {", "while ( emit Queue . size ( ) > task Count Allowed ) {", "Future < byte [ ] > future = emit Queue . remove ( ) ;", "byte [ ] to Write = future . get ( ) ;", "block Sizes . add ( to Write . length ) ;", "out . write ( to Write ) ; }", "try Emit ( ) ; }", "catch ( Execution Exception e ) {", "throw new IO Exception ( e ) ; }", "catch ( Interrupted Exception e ) {", "throw new Interrupted IO Exception ( ) ; } }"]}
{"ids": "17160", "code": ["public static void scale Rect About Center ( Rect r , float scale ) {", "if ( scale != NUM_ ) {", "int cx = r . center X ( ) ;", "int cy = r . center Y ( ) ;", "r . offset ( - cx , - cy ) ;", "r . left = ( int ) ( r . left * scale + NUM_ ) ;", "r . top = ( int ) ( r . top * scale + NUM_ ) ;", "r . right = ( int ) ( r . right * scale + NUM_ ) ;", "r . bottom = ( int ) ( r . bottom * scale + NUM_ ) ;", "r . offset ( cx , cy ) ; } }"]}
{"ids": "62327", "code": ["private static Char Handler parse Unprintable Ext Codes ( String [ ] code Strings ) {", "if ( code Strings . length != NUM_ ) {", "throw new Illegal State Exception ( STR_ + Arrays . as List ( code Strings ) ) ; }", "byte [ ] bytes = codes To Bytes ( code Strings [ NUM_ ] , true ) ;", "if ( bytes . length != NUM_ ) {", "throw new Illegal State Exception ( STR_ + Arrays . as List ( code Strings ) ) ; }", "return new Unprintable Ext Char Handler ( bytes [ NUM_ ] ) ; }"]}
{"ids": "64334", "code": ["public void update Pending List ( ) {", "while ( m Pending List . size ( ) > NUM_ && active List Has Room ( ) ) {", "Download Info Runnable pending = m Pending List . get ( NUM_ ) ;", "pending . change Status State ( new Active State ( pending ) ) ; } }"]}
{"ids": "29561", "code": ["@ Suppress Warnings ( STR_ ) public static float value Range Limit ( float value , float start Value , float end Value ) {", "if ( value < Math . min ( start Value , end Value ) ) return Math . min ( start Value , end Value ) ;", "if ( value > Math . max ( start Value , end Value ) ) return Math . max ( start Value , end Value ) ;", "return value ; }"]}
{"ids": "44574", "code": ["public static boolean is Connected ( Net Type net Type , Network Info network Info ) {", "if ( net Type == Net Type . Any && network Info != null && is Connected ( network Info ) ) return true ;", "else if ( net Type == Net Type . Wifi && network Info != null && network Info . get Type ( ) == Connectivity Manager . TYPE WIFI && is Connected ( network Info ) ) return true ;", "else if ( net Type == Net Type . Mobile && network Info != null && network Info . get Type ( ) == Connectivity Manager . TYPE MOBILE && is Connected ( network Info ) ) return true ;", "return false ; }"]}
{"ids": "24417", "code": ["public void delete Item ( int position ) {", "if ( ! is Data List Empty ( ) && position >= NUM_ && position < m Data List . size ( ) ) {", "m Data List . remove ( position ) ;", "notify Item Removed ( position ) ; } }"]}
{"ids": "81855", "code": ["private int calculate Graident Channel ( int source Channel , int dest Channel , int distance , int offset ) {", "if ( source Channel == dest Channel ) {", "return source Channel ; }", "float ratio = ( ( float ) offset ) / ( ( float ) distance ) ;", "int pos = ( int ) ( Math . abs ( source Channel - dest Channel ) * ratio ) ;", "if ( source Channel > dest Channel ) {", "return source Channel - pos ; }", "else {", "return source Channel + pos ; } }"]}
{"ids": "38466", "code": ["public static void add Startup Listener ( Start Up Listener s ) {", "m Startup Listeners . add ( s ) ; }"]}
{"ids": "31921", "code": ["public static void close Quiet ( @ Nullable Selection Key rsrc ) {", "if ( rsrc != null ) close Quiet ( rsrc . channel ( ) ) ; }"]}
{"ids": "83938", "code": ["public Completable Future < New File > run ( ) {", "LOG . log ( Level . FINE , STR_ , files . size ( ) ) ;", "Completable Future < New File > file Creation = new Completable Future < > ( ) ;", "final List < TS Data > fjp Files = this . files ;", "TASK POOL . execute ( null ) ;", "synchronized ( OUTSTANDING ) {", "OUTSTANDING . add ( file Creation ) ; }", "this . files = new Linked List < > ( ) ;", "return file Creation ; }"]}
{"ids": "85416", "code": ["protected Js Output new Js Output ( Module m ) throws IO Exception {", "return new Js Output ( m , is Compiling Language Module ( ) ) ; }"]}
{"ids": "10289", "code": ["public String text ( ) {", "String Builder sb = new String Builder ( ) ;", "for ( Node node : nodes ) {", "sb . append ( node . get Text Content ( ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "3866", "code": ["public void add Line ( int start Line , String source File , int repeat Count , int output Line , int output Increment ) {", "lines . add ( new Line ( start Line , source File , repeat Count , output Line , output Increment ) ) ; }"]}
{"ids": "42234", "code": ["public String ( String Buffer stringbuffer ) {", "offset = NUM_ ;", "synchronized ( stringbuffer ) {", "value = stringbuffer . share Value ( ) ;", "count = stringbuffer . length ( ) ; } }"]}
{"ids": "7942", "code": ["public static Range iterate To Find Domain Bounds ( XY Dataset dataset , List visible Series Keys , boolean include Interval ) {", "Param Checks . null Not Permitted ( dataset , STR_ ) ;", "Param Checks . null Not Permitted ( visible Series Keys , STR_ ) ;", "double minimum = Double . POSITIVE INFINITY ;", "double maximum = Double . NEGATIVE INFINITY ;", "if ( include Interval && dataset instanceof Interval XY Dataset ) {", "Interval XY Dataset ixyd = ( Interval XY Dataset ) dataset ;", "Iterator iterator = visible Series Keys . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "Comparable series Key = ( Comparable ) iterator . next ( ) ;", "int series = dataset . index Of ( series Key ) ;", "int item Count = dataset . get Item Count ( series ) ;", "for ( int item = NUM_ ; item < item Count ; item ++ ) {", "double xvalue = ixyd . get X Value ( series , item ) ;", "double lvalue = ixyd . get Start X Value ( series , item ) ;", "double uvalue = ixyd . get End X Value ( series , item ) ;", "if ( ! Double . is Na N ( xvalue ) ) {", "minimum = Math . min ( minimum , xvalue ) ;", "maximum = Math . max ( maximum , xvalue ) ; }", "if ( ! Double . is Na N ( lvalue ) ) {", "minimum = Math . min ( minimum , lvalue ) ; }", "if ( ! Double . is Na N ( uvalue ) ) {", "maximum = Math . max ( maximum , uvalue ) ; } } } }", "else {", "Iterator iterator = visible Series Keys . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "Comparable series Key = ( Comparable ) iterator . next ( ) ;", "int series = dataset . index Of ( series Key ) ;", "int item Count = dataset . get Item Count ( series ) ;", "for ( int item = NUM_ ; item < item Count ; item ++ ) {", "double x = dataset . get X Value ( series , item ) ;", "if ( ! Double . is Na N ( x ) ) {", "minimum = Math . min ( minimum , x ) ;", "maximum = Math . max ( maximum , x ) ; } } } }", "if ( minimum == Double . POSITIVE INFINITY ) {", "return null ; }", "else {", "return new Range ( minimum , maximum ) ; } }"]}
{"ids": "15034", "code": ["private void check Compliance Attributes ( Attr Set attr Set , boolean ignore Compliance ) throws AM Exception {", "if ( ! ignore Compliance && Compliance Services Impl . is Compliance User Deletion Enabled ( ) ) {", "compliance Impl . verify Attributes ( attr Set ) ; } }"]}
{"ids": "21671", "code": ["private void update Zoning Map ( Un Managed Export Mask mask , List < Initiator > initiators , List < Storage Port > storage Ports ) {", "Zone Info Map zoning Map = network Device Controller . get Initiators Zone Info Map ( initiators , storage Ports ) ;", "for ( Zone Info zone Info : zoning Map . values ( ) ) {", "log . info ( STR_ , new Object [ ] { zone Info . get Zone Name ( ) , zone Info . get Initiator Wwn ( ) , zone Info . get Port Wwn ( ) } ) ; }", "mask . set Zoning Map ( zoning Map ) ; }"]}
{"ids": "23320", "code": ["public Invitation Status wait Invitation Answer ( ) {", "return wait Invitation Answer ( m Ringing Period ) ; }"]}
{"ids": "46402", "code": ["private boolean move Within Selected Range ( J Table table , int dx , int dy , List Selection Model rsm , List Selection Model csm ) {", "int total Count ;", "int min X , max X , min Y , max Y ;", "boolean rs = table . get Row Selection Allowed ( ) ;", "boolean cs = table . get Column Selection Allowed ( ) ;", "if ( rs && cs ) {", "total Count = table . get Selected Row Count ( ) * table . get Selected Column Count ( ) ;", "min X = csm . get Min Selection Index ( ) ;", "max X = csm . get Max Selection Index ( ) ;", "min Y = rsm . get Min Selection Index ( ) ;", "max Y = rsm . get Max Selection Index ( ) ; }", "else if ( rs ) {", "total Count = table . get Selected Row Count ( ) ;", "min X = NUM_ ;", "max X = table . get Column Count ( ) - NUM_ ;", "min Y = rsm . get Min Selection Index ( ) ;", "max Y = rsm . get Max Selection Index ( ) ; }", "else if ( cs ) {", "total Count = table . get Selected Column Count ( ) ;", "min X = csm . get Min Selection Index ( ) ;", "max X = csm . get Max Selection Index ( ) ;", "min Y = NUM_ ;", "max Y = table . get Row Count ( ) - NUM_ ; }", "else {", "total Count = NUM_ ;", "min X = max X = min Y = max Y = NUM_ ; }", "boolean stay In Selection ;", "if ( total Count == NUM_ || ( total Count == NUM_ && table . is Cell Selected ( lead Row , lead Column ) ) ) {", "stay In Selection = false ;", "max X = table . get Column Count ( ) - NUM_ ;", "max Y = table . get Row Count ( ) - NUM_ ;", "min X = Math . min ( NUM_ , max X ) ;", "min Y = Math . min ( NUM_ , max Y ) ; }", "else {", "stay In Selection = true ; }", "if ( dy == NUM_ && lead Column == - NUM_ ) {", "lead Column = min X ;", "lead Row = - NUM_ ; }", "else if ( dx == NUM_ && lead Row == - NUM_ ) {", "lead Row = min Y ;", "lead Column = - NUM_ ; }", "else if ( dy == - NUM_ && lead Column == - NUM_ ) {", "lead Column = max X ;", "lead Row = max Y + NUM_ ; }", "else if ( dx == - NUM_ && lead Row == - NUM_ ) {", "lead Row = max Y ;", "lead Column = max X + NUM_ ; }", "lead Row = Math . min ( Math . max ( lead Row , min Y - NUM_ ) , max Y + NUM_ ) ;", "lead Column = Math . min ( Math . max ( lead Column , min X - NUM_ ) , max X + NUM_ ) ;", "do {", "calc Next Pos ( dx , min X , max X , dy , min Y , max Y ) ; }", "while ( stay In Selection && ! table . is Cell Selected ( lead Row , lead Column ) ) ;", "return stay In Selection ; }"]}
{"ids": "52155", "code": ["private double [ ] [ ] x Prime ( int t ) {", "double [ ] [ ] x = new double [ NUM_ ] [ get Num Lags ( ) * num Vars ] ;", "for ( int i = NUM_ ; i < get Num Lags ( ) ; i ++ ) {", "double [ ] [ ] y Prime = y Prime ( t - i - NUM_ ) ;", "System . arraycopy ( y Prime [ NUM_ ] , NUM_ , x [ NUM_ ] , i * num Vars , num Vars ) ; }", "return x ; }"]}
{"ids": "28372", "code": ["public int size ( ) {", "return components . size ( ) ; }"]}
{"ids": "28727", "code": ["public void omit Less Freq ( ) {", "if ( name == null ) return ;", "int threshold = n words [ NUM_ ] / LESS FREQ RATIO ;", "if ( threshold < MINIMUM FREQ ) threshold = MINIMUM FREQ ;", "Set < String > keys = freq . key Set ( ) ;", "int roman = NUM_ ;", "for ( Iterator < String > i = keys . iterator ( ) ; i . has Next ( ) ; ) {", "String key = i . next ( ) ;", "int count = freq . get ( key ) ;", "if ( count <= threshold ) {", "n words [ key . length ( ) - NUM_ ] -= count ;", "i . remove ( ) ; }", "else {", "if ( key . matches ( STR_ ) ) {", "roman += count ; } } }", "if ( roman < n words [ NUM_ ] / NUM_ ) {", "Set < String > keys 2 = freq . key Set ( ) ;", "for ( Iterator < String > i = keys 2 . iterator ( ) ; i . has Next ( ) ; ) {", "String key = i . next ( ) ;", "if ( key . matches ( STR_ ) ) {", "n words [ key . length ( ) - NUM_ ] -= freq . get ( key ) ;", "i . remove ( ) ; } } } }"]}
{"ids": "13938", "code": ["public static Public Key Selector from String ( String type ) {", "if ( type != null ) {", "for ( Public Key Selector key Selector : Public Key Selector . values ( ) ) {", "if ( type . equals Ignore Case ( key Selector . type ) ) {", "return key Selector ; } } }", "return null ; }"]}
{"ids": "11209", "code": ["public static void describe Shape Detail ( Shape shape , double flattening ) {", "Path Iterator pi 2 = shape . get Path Iterator ( null ) ;", "Flattening Path Iterator pi = new Flattening Path Iterator ( pi 2 , flattening ) ;", "double [ ] coords = new double [ NUM_ ] ;", "int point Count = NUM_ ;", "Debug . output ( STR_ + flattening + STR_ ) ;", "while ( ! pi . is Done ( ) ) {", "int type = pi . current Segment ( coords ) ;", "Debug . output ( STR_ + type + STR_ + ( point Count ++ ) + STR_ + coords [ NUM_ ] + STR_ + coords [ NUM_ ] ) ;", "pi . next ( ) ; }", "Debug . output ( STR_ + point Count + STR_ ) ; }"]}
{"ids": "53065", "code": ["protected static String shorten Classname ( String nam , char c ) {", "final int lastdot = nam . last Index Of ( c ) ;", "if ( lastdot >= NUM_ ) {", "nam = nam . substring ( lastdot + NUM_ ) ; }", "return nam ; }"]}
{"ids": "49116", "code": ["@ Override public void flip ( X 11 Component Peer peer , Component target , Volatile Image x Back Buffer , int x 1 , int y 1 , int x 2 , int y 2 , Buffer Capabilities . Flip Contents flip Action ) {", "if ( flip Action == Buffer Capabilities . Flip Contents . COPIED ) {", "Surface Manager vsm = Surface Manager . get Manager ( x Back Buffer ) ;", "Surface Data sd = vsm . get Primary Surface Data ( ) ;", "if ( sd instanceof GLXV Sync Off Screen Surface Data ) {", "GLXV Sync Off Screen Surface Data vsd = ( GLXV Sync Off Screen Surface Data ) sd ;", "Surface Data bbsd = vsd . get Flip Surface ( ) ;", "Graphics 2 D bbg = new Sun Graphics 2 D ( bbsd , Color . black , Color . white , null ) ;", "try {", "bbg . draw Image ( x Back Buffer , NUM_ , NUM_ , null ) ; }", "finally {", "bbg . dispose ( ) ; } }", "else {", "Graphics g = peer . get Graphics ( ) ;", "try {", "g . draw Image ( x Back Buffer , x 1 , y 1 , x 2 , y 2 , x 1 , y 1 , x 2 , y 2 , null ) ; }", "finally {", "g . dispose ( ) ; }", "return ; } }", "else if ( flip Action == Buffer Capabilities . Flip Contents . PRIOR ) {", "return ; }", "OGL Surface Data . swap Buffers ( peer . get Content Window ( ) ) ;", "if ( flip Action == Buffer Capabilities . Flip Contents . BACKGROUND ) {", "Graphics g = x Back Buffer . get Graphics ( ) ;", "try {", "g . set Color ( target . get Background ( ) ) ;", "g . fill Rect ( NUM_ , NUM_ , x Back Buffer . get Width ( ) , x Back Buffer . get Height ( ) ) ; }", "finally {", "g . dispose ( ) ; } } }"]}
{"ids": "13576", "code": ["public boolean add Property ( Owl Property property ) {", "property . add Restriction ( this ) ;", "return properties . add ( property ) ; }"]}
{"ids": "80139", "code": ["void on Moved ( ) {", "double diff = System . current Time Millis ( ) - time Stamp ;", "time Stamp = NUM_ ;", "if ( diff > DISCARD THRESHOLD ) {", "return ; }", "double recent Jitter = NUM_ ;", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < VECTOR LENGTH ; i ++ ) {", "double old = times [ i ] ;", "double avg = ( diff + old ) / NUM_ ;", "recent Jitter += Math . abs ( old - diff ) ;", "times [ i ] = avg ;", "diff = old ;", "sum += avg ; }", "recent Jitter /= NUM_ ;", "jitter = ( jitter + NUM_ * Math . max ( jitter , recent Jitter ) + recent Jitter ) / NUM_ ;", "prediction = TURN LENGTH / ( sum / VECTOR LENGTH + jitter ) ;", "Wt Window Manager wm = Wt Window Manager . get Instance ( ) ;", "wm . set Property ( SPEED PROPERTY , Double . to String ( prediction ) ) ;", "wm . set Property ( JITTER PROPERTY , Double . to String ( jitter ) ) ; }"]}
{"ids": "31189", "code": ["public Service ID ( Data Input in ) throws IO Exception {", "this . most Sig = in . read Long ( ) ;", "this . least Sig = in . read Long ( ) ; }"]}
{"ids": "8022", "code": ["@ Sneaky Throws public void add Key To Keystore ( Key Store key Store , X 509 Certificate cert , RSA Private Key private Key , String alias , String password ) {", "Key Store . Password Protection pass = new Key Store . Password Protection ( password . to Char Array ( ) ) ;", "Certificate [ ] certificate Chain = { cert } ;", "key Store . set Entry ( alias , new Key Store . Private Key Entry ( private Key , certificate Chain ) , pass ) ; }"]}
{"ids": "66789", "code": ["public boolean needs Reload ( File file ) {", "return f Files To Reoad . contains ( file ) ; }"]}
{"ids": "56341", "code": ["public Put Repository Request source ( byte [ ] repository Definition ) {", "return source ( repository Definition , NUM_ , repository Definition . length ) ; }"]}
{"ids": "35988", "code": ["@ Override public void write ( String str ) {", "int start = NUM_ ;", "while ( start < str . length ( ) ) {", "int end = Math . min ( start + MAX MESSAGE LENGTH , str . length ( ) ) ;", "Log . i ( TAG , str . substring ( start , end ) ) ;", "start = end ; } }"]}
{"ids": "79069", "code": ["private Carbon Dictionary Sort Info create Column Sort Info ( Carbon Dictionary Sort Model [ ] dictionary Sort Models ) {", "int [ ] sort Index ;", "int [ ] sort Index Inverted ;", "Arrays . sort ( dictionary Sort Models ) ;", "sort Index = new int [ dictionary Sort Models . length ] ;", "sort Index Inverted = new int [ dictionary Sort Models . length ] ;", "for ( int i = NUM_ ; i < dictionary Sort Models . length ; i ++ ) {", "Carbon Dictionary Sort Model dictionary Sort Model = dictionary Sort Models [ i ] ;", "sort Index [ i ] = dictionary Sort Model . get Key ( ) ;", "sort Index Inverted [ dictionary Sort Model . get Key ( ) - NUM_ ] = i + NUM_ ; }", "dictionary Sort Models = null ;", "List < Integer > sort Index List = convert To List ( sort Index ) ;", "List < Integer > sort Index Inverted List = convert To List ( sort Index Inverted ) ;", "return new Carbon Dictionary Sort Info ( sort Index List , sort Index Inverted List ) ; }"]}
{"ids": "69744", "code": ["private void add Feature ( Json Node feature , int index ) {", "Point Feature feat = null ;", "try {", "feat = Point Feature . from Json Node ( feature ) ; }", "catch ( Empty Polygon Exception e ) {", "LOG . warn ( STR_ ) ;", "return ; }", "catch ( Unsupported Geometry Exception e ) {", "LOG . warn ( e . message ) ;", "return ; }", "if ( feat == null ) {", "return ; }", "add Feature ( feat , index ) ; }"]}
{"ids": "74992", "code": ["public Bit String ( final String value ) {", "this ( value . length ( ) ) ;", "for ( int i = NUM_ ; i < value . length ( ) ; i ++ ) {", "if ( value . char At ( i ) == STR_ ) {", "set Bit ( value . length ( ) - ( i + NUM_ ) , true ) ; }", "else if ( value . char At ( i ) != STR_ ) {", "throw new Illegal Argument Exception ( STR_ + i ) ; } } }"]}
{"ids": "39396", "code": ["public void write ( Writer writer ) throws Exception {", "writer . write ( to String ( ) ) ;", "writer . flush ( ) ; }"]}
{"ids": "72601", "code": ["public static boolean is Cglib Renamed Method ( Method renamed Method ) {", "String name = renamed Method . get Name ( ) ;", "if ( name . starts With ( CGLIB RENAMED METHOD PREFIX ) ) {", "int i = name . length ( ) - NUM_ ;", "while ( i >= NUM_ && Character . is Digit ( name . char At ( i ) ) ) {", "i -- ; }", "return ( ( i > CGLIB RENAMED METHOD PREFIX . length ( ) ) && ( i < name . length ( ) - NUM_ ) && ( name . char At ( i ) == STR_ ) ) ; }", "return false ; }"]}
{"ids": "14366", "code": ["public PW Reset Exception ( String bundle Name , String err Code , Object [ ] args ) {", "super ( bundle Name , err Code , args ) ;", "err List = new Array List ( NUM_ ) ;", "err List . add ( get Message ( ) ) ; }"]}
{"ids": "12407", "code": ["public static String [ ] union Arrays ( String [ ] array 1 , String [ ] array 2 ) {", "if ( array 1 == null ) {", "return array 2 ; }", "if ( array 2 == null ) {", "return array 1 ; }", "Set < String > set = new Linked Hash Set < > ( ) ;", "set . add All ( Arrays . as List ( array 1 ) ) ;", "set . add All ( Arrays . as List ( array 2 ) ) ;", "return set . to Array ( new String [ set . size ( ) ] ) ; }"]}
{"ids": "49217", "code": ["boolean is State Change ( X Decorated Peer window , X Property Event e ) {", "if ( ! window . is Showing ( ) ) {", "state Log . finer ( STR_ ) ;", "return false ; }", "int wm state = window . get WM State ( ) ;", "if ( wm state == X Util Constants . Withdrawn State ) {", "state Log . finer ( STR_ ) ;", "return false ; }", "else {", "if ( state Log . is Loggable ( Platform Logger . Level . FINER ) ) {", "state Log . finer ( STR_ + wm state ) ; } }", "boolean is state change = false ;", "if ( e . get atom ( ) == XA WM STATE . get Atom ( ) ) {", "is state change = true ; }", "for ( X State Protocol proto : get Protocols ( X State Protocol . class ) ) {", "is state change |= proto . is State Change ( e ) ;", "if ( state Log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "state Log . finest ( proto + STR_ + is state change ) ; } }", "return is state change ; }"]}
{"ids": "45890", "code": ["@ Override public X Object execute ( X Path Context xctxt ) throws javax . xml . transform . Transformer Exception {", "Node xpath Owner Node = ( Node ) xctxt . get Owner Object ( ) ;", "if ( xpath Owner Node == null ) {", "return null ; }", "int xpath Owner Node DTM = xctxt . get DTM Handle From Node ( xpath Owner Node ) ;", "int current Node = xctxt . get Current Node ( ) ;", "DTM dtm = xctxt . get DTM ( current Node ) ;", "int doc Context = dtm . get Document ( ) ;", "if ( DTM . NULL == doc Context ) {", "error ( xctxt , XPATH Error Resources . ER CONTEXT HAS NO OWNERDOC , null ) ; } {", "Document current Doc = XML Utils . get Owner Document ( dtm . get Node ( current Node ) ) ;", "Document xpath Owner Doc = XML Utils . get Owner Document ( xpath Owner Node ) ;", "if ( current Doc != xpath Owner Doc ) {", "throw new Transformer Exception ( I 18 n . translate ( STR_ ) ) ; } }", "X Node Set nodes = new X Node Set ( xctxt . get DTM Manager ( ) ) ;", "Node Set DTM node Set = nodes . mutable Nodeset ( ) ; {", "int here Node = DTM . NULL ;", "switch ( dtm . get Node Type ( xpath Owner Node DTM ) ) {", "case Node . ATTRIBUTE NODE :", "case Node . PROCESSING INSTRUCTION NODE : {", "here Node = xpath Owner Node DTM ;", "node Set . add Node ( here Node ) ;", "break ; }", "case Node . TEXT NODE : {", "here Node = dtm . get Parent ( xpath Owner Node DTM ) ;", "node Set . add Node ( here Node ) ;", "break ; }", "default :", "break ; } }", "node Set . detach ( ) ;", "return nodes ; }"]}
{"ids": "66885", "code": ["public static String grab Class ( String signature ) {", "Matcher matcher = sig RE . matcher ( signature ) ;", "boolean b = matcher . matches ( ) ;", "if ( ! b && matcher . group Count ( ) != NUM_ ) logger . error ( STR_ , signature ) ;", "return matcher . group ( NUM_ ) ; }"]}
{"ids": "83910", "code": ["public Time Series Metric Delta Set ( Stream < Entry < Tags , Metric Value > > td ) {", "values = Any 2 . right ( td . collect ( Collectors . to Map ( null , null , null , null ) ) ) ; }"]}
{"ids": "65258", "code": ["public int size ( ) {", "return nodes . size ( ) ; }"]}
{"ids": "39303", "code": ["@ Override public final E next Element ( ) {", "E result = m Vector . get ( m Counter ) ;", "m Counter ++ ;", "if ( m Counter == m Special Element ) {", "m Counter ++ ; }", "return result ; }"]}
{"ids": "71902", "code": ["private Byte String escape Bytes ( final Byte String value ) {", "if ( ! need Escaping ( value ) ) {", "return value ; }", "final Byte String Builder builder = new Byte String Builder ( ) ;", "for ( int i = NUM_ ; i < value . length ( ) ; i ++ ) {", "final byte b = value . byte At ( i ) ;", "if ( is Byte To Escape ( b ) ) {", "builder . append Byte ( DN . NORMALIZED ESC BYTE ) ; }", "builder . append Byte ( b ) ; }", "return builder . to Byte String ( ) ; }"]}
{"ids": "72936", "code": ["public Input Builder < T > repeat All ( int times ) {", "List < T > to Append = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < times ; i ++ ) {", "to Append . add All ( input ) ; }", "input . add All ( to Append ) ;", "return this ; }"]}
{"ids": "13848", "code": ["@ Suppress Warnings ( STR_ ) public void handle Button 3 Request ( Request Invocation Event event ) {", "back Trail ( ) ;", "try {", "String name = ( String ) get Page Session Attribute ( SAVE VB NAME ) ;", "View Bean vb = get View Bean ( Class . for Name ( name ) ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( Class Not Found Exception e ) {", "debug . warning ( STR_ , e ) ; } }"]}
{"ids": "52336", "code": ["public Ion Exception ( Throwable cause ) {", "super ( cause . get Message ( ) , cause ) ; }"]}
{"ids": "5032", "code": ["public final double distance ( ) {", "return Math . sqrt ( distance square ( ) ) ; }"]}
{"ids": "48103", "code": ["private void verify Timestamp ( X 509 Certificate cert ) throws Cert Path Validator Exception {", "String msg = STR_ ;", "if ( debug != null ) debug . println ( STR_ + msg + STR_ + date . to String ( ) + STR_ ) ;", "try {", "cert . check Validity ( date ) ; }", "catch ( Certificate Expired Exception e ) {", "throw new Cert Path Validator Exception ( msg + STR_ , e , null , - NUM_ , Basic Reason . EXPIRED ) ; }", "catch ( Certificate Not Yet Valid Exception e ) {", "throw new Cert Path Validator Exception ( msg + STR_ , e , null , - NUM_ , Basic Reason . NOT YET VALID ) ; }", "if ( debug != null ) debug . println ( msg + STR_ ) ; }"]}
{"ids": "51132", "code": ["public static byte [ ] encrypt Password ( final String password , final byte [ ] seed ) throws No Such Algorithm Exception {", "if ( password == null || password . equals ( STR_ ) ) {", "return new byte [ NUM_ ] ; }", "final Message Digest message Digest = Message Digest . get Instance ( STR_ ) ;", "final byte [ ] stage 1 = message Digest . digest ( password . get Bytes ( ) ) ;", "message Digest . reset ( ) ;", "final byte [ ] stage 2 = message Digest . digest ( stage 1 ) ;", "message Digest . reset ( ) ;", "message Digest . update ( seed ) ;", "message Digest . update ( stage 2 ) ;", "final byte [ ] digest = message Digest . digest ( ) ;", "final byte [ ] return Bytes = new byte [ digest . length ] ;", "for ( int i = NUM_ ; i < digest . length ; i ++ ) {", "return Bytes [ i ] = ( byte ) ( stage 1 [ i ] ^ digest [ i ] ) ; }", "return return Bytes ; }"]}
{"ids": "27999", "code": ["public int rows ( ) {", "return rows ; }"]}
{"ids": "85684", "code": ["public static String array 2 hex ( final byte [ ] array ) {", "return byte Array 2 String ( array , STR_ , STR_ , true , NUM_ ) ; }"]}
{"ids": "74221", "code": ["public double reduce To ( int width , int height , double limit ) {", "int w = get Icon Width ( ) ;", "int h = get Icon Height ( ) ;", "double scale = NUM_ ;", "if ( w > width ) {", "scale = ( ( double ) width ) / w ; }", "if ( h > height ) {", "scale = Math . min ( scale , ( ( double ) height ) / h ) ; }", "if ( scale < NUM_ ) {", "if ( limit > NUM_ ) {", "scale = Math . max ( scale , limit ) ; }", "Affine Transform t = Affine Transform . get Scale Instance ( scale , scale ) ;", "transform Image ( ( int ) Math . ceil ( scale * w ) , ( int ) Math . ceil ( scale * h ) , t , null ) ; }", "return scale ; }"]}
{"ids": "81862", "code": ["public void install Builtin Sound ( String sound Identifier , Input Stream data ) throws IO Exception {", "builtin Sounds . put ( sound Identifier , convert Builtin Sound ( data ) ) ; }"]}
{"ids": "15822", "code": ["private Integer count Fragment Filtered Pages ( List < String > template Fragments , boolean whitelist ) throws Wiki Api Exception {", "try {", "int count = NUM_ ;", "Prepared Statement statement = null ;", "Result Set result = null ;", "try {", "String Buffer sql String = new String Buffer ( ) ;", "String Buffer subconditions = new String Buffer ( ) ;", "sql String . append ( STR_ + Generator Constants . TABLE TPLID TPLNAME + STR_ + Generator Constants . TABLE TPLID PAGEID + STR_ + ( whitelist ? STR_ : STR_ ) + STR_ ) ;", "for ( @ Suppress Warnings ( STR_ ) String fragment : template Fragments ) {", "if ( subconditions . length ( ) != NUM_ ) {", "subconditions . append ( STR_ ) ; }", "subconditions . append ( STR_ ) ; }", "sql String . append ( subconditions ) ;", "sql String . append ( STR_ ) ;", "statement = connection . prepare Statement ( sql String . to String ( ) ) ;", "int cur Idx = NUM_ ;", "for ( String fragment : template Fragments ) {", "fragment = fragment . to Lower Case ( ) ;", "fragment = fragment . trim ( ) ;", "fragment = fragment . replace All ( STR_ , STR_ ) ;", "statement . set String ( cur Idx ++ , fragment + STR_ ) ; }", "result = execute ( statement ) ;", "if ( result == null ) {", "return NUM_ ; }", "if ( result . next ( ) ) {", "count = result . get Int ( NUM_ ) ; } }", "finally {", "if ( statement != null ) {", "statement . close ( ) ; }", "if ( result != null ) {", "result . close ( ) ; } }", "return count ; }", "catch ( Exception e ) {", "throw new Wiki Api Exception ( e ) ; } }"]}
{"ids": "68821", "code": ["public static int find Name ( String name , int [ ] table ) {", "for ( int i = NUM_ ; i < table . length ; i ++ ) {", "if ( name . equals ( get Name ( table [ i ] ) ) ) {", "return i ; } }", "return - NUM_ ; }"]}
{"ids": "34322", "code": ["private static Bitmap transform ( Matrix scaler , Bitmap source , int target Width , int target Height , int options ) {", "Log . i ( TAG , STR_ ) ;", "boolean scale Up = ( options & NUM_ ) != NUM_ ;", "boolean recycle = ( options & NUM_ ) != NUM_ ;", "int delta X = source . get Width ( ) - target Width ;", "int delta Y = source . get Height ( ) - target Height ;", "if ( ! scale Up && ( delta X < NUM_ || delta Y < NUM_ ) ) {", "Log . i ( TAG , STR_ ) ;", "Bitmap b 2 = Bitmap . create Bitmap ( target Width , target Height , Bitmap . Config . ARGB 8888 ) ;", "Canvas c = new Canvas ( b 2 ) ;", "int delta X Half = Math . max ( NUM_ , delta X / NUM_ ) ;", "int delta Y Half = Math . max ( NUM_ , delta Y / NUM_ ) ;", "Rect src = new Rect ( delta X Half , delta Y Half , delta X Half + Math . min ( target Width , source . get Width ( ) ) , delta Y Half + Math . min ( target Height , source . get Height ( ) ) ) ;", "int dst X = ( target Width - src . width ( ) ) / NUM_ ;", "int dst Y = ( target Height - src . height ( ) ) / NUM_ ;", "Rect dst = new Rect ( dst X , dst Y , target Width - dst X , target Height - dst Y ) ;", "c . draw Bitmap ( source , src , dst , null ) ;", "if ( recycle ) {", "source . recycle ( ) ; }", "c . set Bitmap ( null ) ;", "Log . i ( TAG , STR_ ) ;", "return b 2 ; }", "float bitmap Width F = source . get Width ( ) ;", "float bitmap Height F = source . get Height ( ) ;", "Log . i ( TAG , STR_ + bitmap Width F + STR_ + bitmap Height F ) ;", "float bitmap Aspect = bitmap Width F / bitmap Height F ;", "float view Aspect = ( float ) target Width / target Height ;", "Log . i ( TAG , STR_ + target Width + STR_ + target Height ) ;", "if ( bitmap Aspect > view Aspect ) {", "float scale = target Height / bitmap Height F ;", "if ( scale < NUM_ || scale > NUM_ ) {", "scaler . set Scale ( scale , scale ) ; }", "else {", "scaler = null ; } }", "else {", "float scale = target Width / bitmap Width F ;", "if ( scale < NUM_ || scale > NUM_ ) {", "scaler . set Scale ( scale , scale ) ; }", "else {", "scaler = null ; } }", "Bitmap b 1 ;", "if ( scaler != null ) {", "Log . i ( TAG , STR_ ) ;", "b 1 = Bitmap . create Bitmap ( source , NUM_ , NUM_ , source . get Width ( ) , source . get Height ( ) , scaler , true ) ; }", "else {", "Log . i ( TAG , STR_ ) ;", "b 1 = source ; }", "if ( recycle && b 1 != source ) {", "Log . i ( TAG , STR_ ) ;", "source . recycle ( ) ; }", "int dx 1 = Math . max ( NUM_ , b 1 . get Width ( ) - target Width ) ;", "int dy 1 = Math . max ( NUM_ , b 1 . get Height ( ) - target Height ) ;", "Bitmap b 2 = Bitmap . create Bitmap ( b 1 , dx 1 / NUM_ , dy 1 / NUM_ , target Width , target Height ) ;", "if ( b 2 != b 1 ) {", "if ( recycle || b 1 != source ) {", "Log . i ( TAG , STR_ ) ;", "b 1 . recycle ( ) ; } }", "Log . i ( TAG , STR_ ) ;", "if ( b 2 == null ) {", "Log . i ( TAG , STR_ ) ; }", "return b 2 ; }"]}
{"ids": "69322", "code": ["private void score Track Results ( Collection < Track > tracks , Search Query query , Collection < Scored Result > output ) {", "for ( Track track : tracks ) {", "double score = score Track Result ( query , track ) ;", "output . add ( new Scored Result ( track , score ) ) ; } }"]}
{"ids": "68987", "code": ["private Long current Time ( ) {", "return System . current Time Millis ( ) / NUM_ ; }"]}
{"ids": "76680", "code": ["private static byte [ ] encode ( double latitude , double longitude ) {", "byte [ ] bytes = new byte [ NUM_ * Integer . BYTES ] ;", "Numeric Utils . int To Sortable Bytes ( encode Latitude ( latitude ) , bytes , NUM_ ) ;", "Numeric Utils . int To Sortable Bytes ( encode Longitude ( longitude ) , bytes , Integer . BYTES ) ;", "return bytes ; }"]}
{"ids": "32052", "code": ["public static void put Long Volatile ( Object obj , long off , long val ) {", "UNSAFE . put Long Volatile ( obj , off , val ) ; }"]}
{"ids": "32919", "code": ["public void circle ( double x , double y , double r ) {", "if ( r < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "double xs = scale X ( x ) ;", "double ys = scale Y ( y ) ;", "double ws = factor X ( NUM_ * r ) ;", "double hs = factor Y ( NUM_ * r ) ;", "if ( ws <= NUM_ && hs <= NUM_ ) pixel ( x , y ) ;", "else offscreen . draw ( new Ellipse 2 D . Double ( xs - ws / NUM_ , ys - hs / NUM_ , ws , hs ) ) ;", "draw ( ) ; }"]}
{"ids": "41631", "code": ["public void write SI 32 ( int value ) throws IO Exception {", "flush Bits ( ) ;", "out . write ( value & NUM_ ) ;", "out . write ( value > > NUM_ ) ;", "out . write ( value > > NUM_ ) ;", "out . write ( value > > NUM_ ) ;", "bytes Written += NUM_ ; }"]}
{"ids": "71927", "code": ["private static void map ( final String Builder buffer , final Byte Sequence sequence , final boolean trim , final boolean fold Case ) {", "final String value = sequence . to String ( ) ;", "for ( int i = NUM_ ; i < value . length ( ) ; i ++ ) {", "final char c = value . char At ( i ) ;", "if ( MAP 2 NULL . contains ( c ) ) {", "continue ; }", "if ( MAP 2 SPACE . contains ( c ) ) {", "if ( can Map To Space ( buffer , trim ) ) {", "buffer . append ( SPACE CHAR ) ; }", "continue ; }", "if ( fold Case ) {", "final String mapping = CASE MAP TABLE . get ( c ) ;", "if ( mapping != null ) {", "buffer . append ( mapping ) ;", "continue ; } }", "buffer . append ( c ) ; } }"]}
{"ids": "20239", "code": ["public void add Button Pressed Listener ( Field Config String Button Interface listener ) {", "if ( button Pressed Listener List == null ) {", "button Pressed Listener List = new Array List < Field Config String Button Interface > ( ) ; }", "button Pressed Listener List . add ( listener ) ; }"]}
{"ids": "13227", "code": ["private void fill XML Attribute ( Attributes att , int index ) {", "fill Q Name ( f Attribute Q Name , att . get URI ( index ) , att . get Local Name ( index ) , att . get Q Name ( index ) ) ;", "String type = att . get Type ( index ) ;", "f Attributes . add Attribute NS ( f Attribute Q Name , ( type != null ) ? type : XML Symbols . f CDATA Symbol , att . get Value ( index ) ) ; }"]}
{"ids": "5213", "code": ["public long copy ( String filename , Output Stream out , long offset , long size ) throws IO Exception , Interrupted Exception {", "if ( size < NUM_ ) {", "return NUM_ ; }", "Buffered Input Stream is = new Buffered Input Stream ( get File Input Stream ( filename ) ) ;", "byte [ ] buf = new byte [ NUM_ * NUM_ ] ;", "int bytes Read ;", "long pos = NUM_ ;", "long remaining = size ;", "try {", "if ( offset != NUM_ ) {", "is . skip ( offset ) ;", "pos += offset ; }", "while ( remaining != NUM_ ) {", "int max = buf . length ;", "if ( max > remaining ) {", "max = ( int ) remaining ; }", "bytes Read = is . read ( buf , NUM_ , max ) ;", "if ( bytes Read == - NUM_ ) {", "break ; }", "out . write ( buf , NUM_ , bytes Read ) ;", "pos += bytes Read ;", "remaining -= bytes Read ; }", "out . flush ( ) ; }", "catch ( Exception e ) {", "out . flush ( ) ; }", "finally {", "try {", "is . close ( ) ; }", "catch ( Exception e ) { } }", "return pos ; }"]}
{"ids": "79953", "code": ["private static void deserialize Header ( Kdb Header kdb Header , Data Input data Input ) throws IO Exception {", "kdb Header . set Flags ( data Input . read Int ( ) ) ;", "kdb Header . set Version ( data Input . read Int ( ) ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "data Input . read Fully ( buffer ) ;", "kdb Header . set Master Seed ( buffer ) ;", "buffer = new byte [ NUM_ ] ;", "data Input . read Fully ( buffer ) ;", "kdb Header . set Encryption Iv ( buffer ) ;", "kdb Header . set Group Count ( data Input . read Int ( ) ) ;", "kdb Header . set Entry Count ( data Input . read Int ( ) ) ;", "byte [ ] buffer 32 = new byte [ NUM_ ] ;", "data Input . read Fully ( buffer 32 ) ;", "kdb Header . set Content Hash ( buffer 32 ) ;", "buffer 32 = new byte [ NUM_ ] ;", "data Input . read Fully ( buffer 32 ) ;", "kdb Header . set Transform Seed ( buffer 32 ) ;", "kdb Header . set Transform Rounds ( data Input . read Int ( ) ) ; }"]}
{"ids": "85465", "code": ["public List < JC Annotation > transform Annotations ( Output Element target , Tree . Declaration annotated ) {", "Enum Set < Output Element > outputs ;", "if ( annotated instanceof Tree . Any Class ) {", "outputs = Annotation Util . outputs ( ( Tree . Any Class ) annotated ) ; }", "else if ( annotated instanceof Tree . Any Interface ) {", "outputs = Annotation Util . outputs ( ( Tree . Any Interface ) annotated ) ; }", "else if ( annotated instanceof Tree . Type Alias Declaration ) {", "outputs = Annotation Util . outputs ( ( Tree . Type Alias Declaration ) annotated ) ; }", "else if ( annotated instanceof Tree . Constructor ) {", "outputs = Annotation Util . outputs ( ( Tree . Constructor ) annotated ) ; }", "else if ( annotated instanceof Tree . Enumerated ) {", "outputs = Annotation Util . outputs ( ( Tree . Enumerated ) annotated ) ; }", "else if ( annotated instanceof Tree . Any Method ) {", "outputs = Annotation Util . outputs ( ( Tree . Any Method ) annotated ) ; }", "else if ( annotated instanceof Tree . Attribute Declaration ) {", "outputs = Annotation Util . outputs ( ( Tree . Attribute Declaration ) annotated ) ; }", "else if ( annotated instanceof Tree . Attribute Getter Definition ) {", "outputs = Annotation Util . outputs ( ( Tree . Attribute Getter Definition ) annotated ) ; }", "else if ( annotated instanceof Tree . Attribute Setter Definition ) {", "outputs = Annotation Util . outputs ( ( Tree . Attribute Setter Definition ) annotated ) ; }", "else if ( annotated instanceof Tree . Object Definition ) {", "outputs = Annotation Util . outputs ( ( Tree . Object Definition ) annotated ) ; }", "else {", "throw Bug Exception . unhandled Node Case ( annotated ) ; }", "return transform ( annotated . get Declaration Model ( ) , target , annotated . get Annotation List ( ) , outputs ) ; }"]}
{"ids": "27100", "code": ["public boolean are All Permissions Granted ( ) {", "return denied Permission Responses . is Empty ( ) ; }"]}
{"ids": "14918", "code": ["private String fetch Charset From Cache ( Client client , Locale loc ) {", "Map c Cache = ( Map ) charset Cache . get ( client . get Client Type ( ) ) ;", "String val = null ;", "if ( c Cache != null ) {", "val = ( String ) c Cache . get ( loc ) ; }", "return val ; }"]}
{"ids": "70269", "code": ["public void add Control Roll ( Piloting Roll Data control ) {", "control Rolls . add Element ( control ) ; }"]}
{"ids": "79739", "code": ["void process Add On Changes ( Window caller , Add On Dependency Checker . Add On Changes Result changes ) {", "if ( addons Dialog != null ) {", "addons Dialog . set Downloading Updates ( ) ; }", "if ( get View ( ) != null ) {", "Set < Add On > add Ons = new Hash Set < > ( changes . get Uninstalls ( ) ) ;", "add Ons . add All ( changes . get Old Versions ( ) ) ;", "Set < Extension > extensions = new Hash Set < > ( ) ;", "extensions . add All ( changes . get Unload Extensions ( ) ) ;", "extensions . add All ( changes . get Soft Unload Extensions ( ) ) ;", "if ( ! warn Unsaved Resources Or Active Actions ( caller , add Ons , extensions , true ) ) {", "return ; } }", "uninstall Add Ons ( caller , changes . get Uninstalls ( ) , false ) ;", "Set < Add On > all Addons = new Hash Set < > ( changes . get New Versions ( ) ) ;", "all Addons . add All ( changes . get Installs ( ) ) ;", "for ( Add On add On : all Addons ) {", "if ( addons Dialog != null ) {", "addons Dialog . notify Add On Downloading ( add On ) ; }", "download Add On ( add On ) ; } }"]}
{"ids": "80173", "code": ["void repaint Children ( ) {", "for ( Component child : panel . get Components ( ) ) {", "child . repaint ( ) ; } }"]}
{"ids": "43857", "code": ["private static String read Comment ( String input , int index ) {", "String comment = null ;", "Matcher matcher = COMMENT PATTERN . matcher ( input . substring ( index ) ) ;", "if ( matcher . find ( ) ) {", "comment = matcher . group ( NUM_ ) ;", "comment = comment . substring ( NUM_ ) ; }", "return comment ; }"]}
{"ids": "62688", "code": ["public static int find Next ( String str , char separator , char escape Char , int start , String Builder split ) {", "int num Pre Escapes = NUM_ ;", "for ( int i = start ; i < str . length ( ) ; i ++ ) {", "char cur Char = str . char At ( i ) ;", "if ( num Pre Escapes == NUM_ && cur Char == separator ) {", "return i ; }", "else {", "split . append ( cur Char ) ;", "num Pre Escapes = ( cur Char == escape Char ) ? ( ++ num Pre Escapes ) % NUM_ : NUM_ ; } }", "return - NUM_ ; }"]}
{"ids": "29846", "code": ["private static String guess Content Type ( String url ) {", "url = url . to Lower Case ( ) ;", "if ( url . ends With ( STR_ ) ) {", "return STR_ ; }", "else if ( url . ends With ( STR_ ) ) {", "return STR_ ; }", "else if ( url . matches ( STR_ ) ) {", "return STR_ ; }", "else if ( url . ends With ( STR_ ) ) {", "return STR_ ; }", "else if ( url . ends With ( STR_ ) ) {", "return STR_ ; }", "else {", "return STR_ ; } }"]}
{"ids": "24213", "code": ["public void connect ( ) {", "connect ( this . log Writer ) ; }"]}
{"ids": "40553", "code": ["public static boolean do Cache Header Validation ( final Solr Query Request solr Req , final Http Servlet Request req , final Method req Method , final Http Servlet Response resp ) {", "if ( Method . POST == req Method || Method . OTHER == req Method ) {", "return false ; }", "final long last Mod = Http Cache Header Util . calc Last Modified ( solr Req ) ;", "final String etag = Http Cache Header Util . calc Etag ( solr Req ) ;", "resp . set Date Header ( STR_ , last Mod ) ;", "resp . set Header ( STR_ , etag ) ;", "if ( check E Tag Validators ( req , resp , req Method , etag ) ) {", "return true ; }", "if ( check Last Mod Validators ( req , resp , last Mod ) ) {", "return true ; }", "return false ; }"]}
{"ids": "21431", "code": ["public Ivr Zoneset show Active Ivr Zoneset ( ) throws Network Device Controller Exception {", "List < Ivr Zoneset > zonesets = show Ivr Zonesets ( true ) ;", "return zonesets . is Empty ( ) ? null : zonesets . get ( NUM_ ) ; }"]}
{"ids": "27313", "code": ["public void replace Non Optional Non Minus Nodes With ( final List < I Group Member Node > ordered , final boolean recompute Definitely Produced ) {", "non Optional Non Minus Nodes . clear ( ) ;", "non Optional Non Minus Nodes . add All ( ordered ) ;", "if ( recompute Definitely Produced ) {", "recompute Definitely Produced ( ) ; } }"]}
{"ids": "13203", "code": ["@ Override public int hash Code ( ) {", "return type << NUM_ | value . hash Code ( ) << NUM_ | other Value . hash Code ( ) ; }"]}
{"ids": "66661", "code": ["protected void delete Type Vertex ( Atlas Vertex instance Vertex , Data Types . Type Category type Category , boolean force ) throws Atlas Exception {", "switch ( type Category ) {", "case STRUCT :", "case TRAIT :", "delete Type Vertex ( instance Vertex , force ) ;", "break ;", "case CLASS :", "delete Entities ( Collections . singleton List ( instance Vertex ) ) ;", "break ;", "default :", "throw new Illegal State Exception ( STR_ + type Category + STR_ ) ; } }"]}
{"ids": "82581", "code": ["public static List < String > read To List ( Reader r ) throws IO Exception {", "try ( Buffered Reader in = new Buffered Reader ( r ) ) {", "List < String > l = new Array List < > ( ) ;", "String line = null ;", "while ( ( line = in . read Line ( ) ) != null ) l . add ( line ) ;", "return Collections . unmodifiable List ( l ) ; } }"]}
{"ids": "32174", "code": ["@ Suppress Warnings ( STR_ ) public void add Cache Context ( Grid Cache Context cache Ctx ) throws Ignite Checked Exception {", "if ( ctx Map . contains Key ( cache Ctx . cache Id ( ) ) ) {", "Grid Cache Context < K , V > existing = ctx Map . get ( cache Ctx . cache Id ( ) ) ;", "throw new Ignite Checked Exception ( STR_ + STR_ + cache Ctx . name ( ) + STR_ + existing . name ( ) + STR_ ) ; }", "Cache Store Manager mgr = cache Ctx . store ( ) ;", "if ( mgr . configured ( ) && mgr . is Local ( ) ) loc Store Cnt . increment And Get ( ) ;", "ctx Map . put ( cache Ctx . cache Id ( ) , cache Ctx ) ; }"]}
{"ids": "10506", "code": ["protected static boolean is Cglib Get Callbacks ( Annotated Method am ) {", "Class < ? > rt = am . get Raw Type ( ) ;", "if ( rt == null || ! rt . is Array ( ) ) {", "return false ; }", "Class < ? > comp Type = rt . get Component Type ( ) ;", "Package pkg = comp Type . get Package ( ) ;", "if ( pkg != null ) {", "String pname = pkg . get Name ( ) ;", "if ( pname . starts With ( STR_ ) || pname . starts With ( STR_ ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "6649", "code": ["public int compare To ( Named Media Type other ) {", "return name . compare To ( other . name ) ; }"]}
{"ids": "68364", "code": ["protected Replaced Element new Irreplaceable Image Element ( int css Width , int css Height ) {", "Buffered Image missing Image ;", "Replaced Element mre ;", "try {", "missing Image = Image Util . create Compatible Buffered Image ( css Width , css Height , Buffered Image . TYPE INT RGB ) ;", "Graphics 2 D g = missing Image . create Graphics ( ) ;", "g . set Color ( Color . BLACK ) ;", "g . set Background ( Color . WHITE ) ;", "g . set Font ( new Font ( STR_ , Font . PLAIN , NUM_ ) ) ;", "g . draw String ( STR_ , NUM_ , NUM_ ) ;", "g . dispose ( ) ;", "mre = new Image Replaced Element ( missing Image , css Width , css Height ) ; }", "catch ( Exception e ) {", "mre = new Empty Replaced Element ( css Width < NUM_ ? NUM_ : css Width , css Height < NUM_ ? NUM_ : css Height ) ; }", "return mre ; }"]}
{"ids": "54851", "code": ["public boolean greater Than ( FXG Version version ) {", "return ( compare To ( version ) > NUM_ ) ; }"]}
{"ids": "63203", "code": ["@ Override public Data Source create Data Source ( Properties properties ) throws SQL Exception {", "Properties properties Copy = new Properties ( ) ;", "if ( properties != null ) {", "properties Copy . put All ( properties ) ; }", "reject Unsupported Options ( properties Copy ) ;", "reject Pooling Options ( properties Copy ) ;", "Jdbc Data Source data Source = new Jdbc Data Source ( ) ;", "setup H 2 Data Source ( data Source , properties Copy ) ;", "return data Source ; }"]}
{"ids": "13507", "code": ["public Set < String > find ( T object ) {", "if ( ! locations . contains Key ( object ) ) {", "locations . put ( object , new Hash Set < > ( ) ) ; }", "return Collections . unmodifiable Set ( locations . get ( object ) ) ; }"]}
{"ids": "85136", "code": ["public void add Meta Object ( Meta Object object ) {", "for ( int k = NUM_ ; k < Meta Objects . size ( ) ; ++ k ) {", "if ( Meta Objects . get ( k ) == null ) {", "Meta Objects . set ( k , object ) ;", "return ; } }", "Meta Objects . add ( object ) ; }"]}
{"ids": "39263", "code": ["public boolean remove ( String word ) {", "return m Words . remove ( word ) ; }"]}
{"ids": "75739", "code": ["public synchronized void add Recent Item ( T item ) {", "item = from String ( to String ( item ) ) ;", "if ( m Recent Items . size ( ) > NUM_ ) {", "if ( item . equals ( m Recent Items . get ( NUM_ ) ) ) return ; }", "m Recent Items . remove ( item ) ;", "m Recent Items . add ( NUM_ , item ) ;", "while ( m Recent Items . size ( ) > m Max Count ) m Recent Items . remove ( m Recent Items . size ( ) - NUM_ ) ;", "if ( m Ignore Changes ) return ;", "write Props ( ) ;", "update Menu ( ) ;", "notify Recent Item Listeners Of Add ( item ) ; }"]}
{"ids": "55118", "code": ["public void cfg Package ( Configuration Value cfgval , String name , String desc ) {", "packages . add ( new Package Info ( name , desc ) ) ;", "package Names . add ( name ) ; }"]}
{"ids": "22101", "code": ["private void create Block Mirror Data ( String name , int num Block Mirrors ) throws Exception {", "Volume volume = new Volume ( ) ;", "URI volume URI = URI Util . create Id ( Volume . class ) ;", "test Volume UR Is . add ( volume URI ) ;", "volume . set Id ( volume URI ) ;", "volume . set Label ( STR_ ) ;", "URI cg Uri = create Block Consistency Group ( STR_ ) ;", "volume . set Consistency Group ( cg Uri ) ;", "db Client . create Object ( volume ) ;", "for ( int i = NUM_ ; i <= num Block Mirrors ; i ++ ) {", "Block Mirror block Mirror = new Block Mirror ( ) ;", "URI block Mirror URI = URI Util . create Id ( Block Mirror . class ) ;", "test Block Mirror UR Is . add ( block Mirror URI ) ;", "block Mirror . set Id ( block Mirror URI ) ;", "block Mirror . set Label ( name + i ) ;", "block Mirror . set Consistency Group ( cg Uri ) ;", "db Client . create Object ( block Mirror ) ; } }"]}
{"ids": "25399", "code": ["@ Override public synchronized void start ( ) {", "if ( running ) {", "return ; }", "LOGGER . info ( STR_ ) ;", "if ( endpoints . is Empty ( ) ) {", "int port = config . get Int ( Network Config . Keys . COAP PORT ) ;", "LOGGER . log ( Level . INFO , STR_ , port ) ;", "add Endpoint ( new Coap Endpoint ( port , this . config ) ) ; }", "int started = NUM_ ;", "for ( Endpoint ep : endpoints ) {", "try {", "ep . start ( ) ;", "++ started ; }", "catch ( IO Exception e ) {", "LOGGER . log ( Level . SEVERE , STR_ + ep . get Address ( ) + STR_ , e ) ; } }", "if ( started == NUM_ ) {", "throw new Illegal State Exception ( STR_ ) ; }", "else {", "running = true ; } }"]}
{"ids": "53628", "code": ["protected void clear Result ( ) {", "md . clear Result ( ) ;", "localization Result . set Text ( STR_ ) ; }"]}
{"ids": "80944", "code": ["public static String Buffer replace String ( String Buffer buffer , String [ ] parameters ) {", "int place Holder Position = - NUM_ ;", "String place Holder = null ;", "for ( int i = NUM_ ; i < parameters . length ; i ++ ) {", "if ( parameters [ i ] == null ) {", "break ; }", "place Holder = STR_ + ( i + NUM_ ) + STR_ ;", "place Holder Position = buffer . index Of ( place Holder ) ;", "if ( place Holder Position != - NUM_ ) {", "buffer . replace ( place Holder Position , place Holder Position + place Holder . length ( ) , parameters [ i ] ) ; }", "else {", "break ; } }", "return buffer ; }"]}
{"ids": "31075", "code": ["public String [ ] parse Configuration ( File xml File ) throws SAX Exception , IO Exception {", "Document document = builder . parse ( xml File ) ;", "return ( parse Configuration ( document ) ) ; }"]}
{"ids": "52161", "code": ["private double empirical HSIC ( Tetrad Matrix Ky , Tetrad Matrix Kx , Tetrad Matrix Kz , int m ) {", "Tetrad Matrix Kyx = Ky . times ( Kx ) ;", "Tetrad Matrix Kyz = Ky . times ( Kz ) ;", "Tetrad Matrix Kzx = Kz . times ( Kx ) ;", "Tetrad Matrix Kzreg = Kz . copy ( ) ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "double ent = ( Kzreg . get ( i , i ) + this . regularizer ) ;", "Kzreg . set ( i , i , ent ) ; }", "Tetrad Matrix A = Kzreg . inverse ( ) ;", "Kzreg = A . times ( A ) ;", "Tetrad Matrix Kyzzregzx = new Tetrad Matrix ( m , m ) ;", "A = Kyz . times ( Kzreg ) ;", "Kyzzregzx = A . times ( Kzx ) ;", "Tetrad Matrix Kyzzregzxzzregz = Kyzzregzx . copy ( ) ;", "Kyzzregzxzzregz = Kyzzregzx . times ( Kz ) ;", "A = Kyzzregzxzzregz . times ( Kzreg ) ;", "Kyzzregzxzzregz = A . times ( Kz ) ;", "double emp HSIC = NUM_ ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "emp HSIC += Kyx . get ( i , i ) ;", "emp HSIC += ( - NUM_ * Kyzzregzx . get ( i , i ) ) ;", "emp HSIC += Kyzzregzxzzregz . get ( i , i ) ; }", "emp HSIC /= Math . pow ( m - NUM_ , NUM_ ) ;", "double Bz = NUM_ ;", "for ( int i = NUM_ ; i < ( m - NUM_ ) ; i ++ ) {", "for ( int j = ( i + NUM_ ) ; j < m ; j ++ ) {", "Bz += Math . pow ( Kz . get ( i , j ) , NUM_ ) ;", "Bz += Math . pow ( Kz . get ( j , i ) , NUM_ ) ; } }", "Bz = ( m * ( m - NUM_ ) ) / Bz ;", "emp HSIC *= Bz ;", "return emp HSIC ; }"]}
{"ids": "11673", "code": ["public void create ( String [ ] rpf File Paths , String output File ) throws Make Toc Exception {", "create ( rpf File Paths , output File , false ) ; }"]}
{"ids": "46224", "code": ["private synchronized void post Event ( Event Info event Info ) {", "event Queue . add ( event Info ) ;", "notify All ( ) ; }"]}
{"ids": "10708", "code": ["private void process Bmp Image ( Buffered Image image ) {", "if ( ! is Error ) {", "File output File = new File ( path , prefix + ( num Page + NUM_ ) + STR_ ) ;", "try {", "Image IO . write ( image , STR_ , output File ) ;", "add Temp File ( output File ) ;", "add Scan File ( output File ) ;", "num Page ++ ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "end Process ( true , false ) ; } } }"]}
{"ids": "3453", "code": ["public Path Handler ( String path ) {", "this ( Paths . get ( path ) ) ; }"]}
{"ids": "66395", "code": ["public boolean load Lines ( ) {", "boolean result = false ;", "try {", "m parser . parse ( new Input Source ( m reader ) , this ) ;", "result = true ;", "m success = true ; }", "catch ( SAX Exception e ) {", "m error Message = STR_ ;", "m error Description = e . get Message ( ) ; }", "catch ( IO Exception e ) {", "m error Message = STR_ ;", "m error Description = e . get Message ( ) ; }", "return result ; }"]}
{"ids": "4618", "code": ["private void load Ignore File ( final String src Folder ) {", "ignore File = Ignore File . load ( src Folder ) ;", "if ( ignore File == null ) {", "load Default Exclude Pattern ( src Folder ) ; } }"]}
{"ids": "27481", "code": ["public boolean remove Arg ( final B Op arg ) {", "if ( arg == null ) throw new Illegal Argument Exception ( ) ;", "if ( arg == this ) throw new Illegal Argument Exception ( ) ;", "if ( args . remove ( arg ) ) {", "mutation ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "48163", "code": ["public PKCS 10 Attribute ( PKCS 9 Attribute attr ) {", "this . attribute Id = attr . get OID ( ) ;", "this . attribute Value = attr . get Value ( ) ; }"]}
{"ids": "53812", "code": ["public void create Note ( Note note ) {", "SQ Lite Database db = get Writable Database ( ) ;", "String spannable As Html = Html . to Html ( note . get Spannable ( ) ) ;", "String date = dt . format ( new Date ( ) ) ;", "Content Values values = new Content Values ( ) ;", "values . put ( KEY SPANNABLE NOTE , spannable As Html ) ;", "values . put ( KEY NOTE TITLE , note . get Title ( ) ) ;", "values . put ( KEY IMAGE , Bitmap Converter . get Bytes ( note . get Image ( ) ) ) ;", "values . put ( KEY DATE UPDATED , date ) ;", "db . insert ( TABLE NOTES , null , values ) ;", "db . close ( ) ; }"]}
{"ids": "55203", "code": ["void add Next ( Node < T > n ) {", "next Nodes . add ( n ) ;", "Collections . sort ( next Nodes , is Vertical ? vertical Comparator : horizontal Comparator ) ; }"]}
{"ids": "82421", "code": ["public final String read UTF ( ) throws IO Exception {", "return decode UTF ( read Unsigned Short ( ) ) ; }"]}
{"ids": "4799", "code": ["private void my Add ( Linked List < Integer > l , int i ) {", "l . add ( i ) ; }"]}
{"ids": "46635", "code": ["public static Repaint Manager current Manager ( Component c ) {", "return current Manager ( App Context . get App Context ( ) ) ; }"]}
{"ids": "22458", "code": ["private boolean is Recover Point Initiator ( String port WWN ) {", "return port WWN . contains ( RECOVERPOINT INITIATOR PREFIX ) ; }"]}
{"ids": "3534", "code": ["@ Override public void send ( Buffer buffer ) {", "out Proxy . write ( out Writer , buffer , false ) ; }"]}
{"ids": "29950", "code": ["public void add Section ( final Section SECTION ) {", "if ( null == SECTION ) return ;", "sections . add ( SECTION ) ;", "Collections . sort ( sections , new Section Comparator ( ) ) ;", "fire Update Event ( SECTION EVENT ) ; }"]}
{"ids": "60438", "code": ["private int calculate Preferred Wrap Position ( @ Not Null Editor editor , @ Not Null Char Sequence text , int tab Size , int space Size , int start Line Offset , int end Line Offset , int target Range End Offset ) {", "boolean has Tabs = false ;", "boolean can Optimize = true ;", "boolean has Non Space Symbols = false ;", "loop : for ( int i = start Line Offset ; i < Math . min ( end Line Offset , target Range End Offset ) ; i ++ ) {", "char c = text . char At ( i ) ;", "switch ( c ) {", "case STR_ : {", "has Tabs = true ;", "if ( has Non Space Symbols ) {", "can Optimize = false ;", "break loop ; } }", "case STR_ :", "break ;", "default :", "has Non Space Symbols = true ; } }", "if ( ! has Tabs ) {", "return wrap Position For Text Without Tabs ( start Line Offset , end Line Offset , target Range End Offset ) ; }", "else if ( can Optimize ) {", "return wrap Position For Tabbed Text With Optimization ( text , tab Size , start Line Offset , end Line Offset , target Range End Offset ) ; }", "else {", "return wrap Position For Tabbed Text Without Optimization ( editor , text , space Size , start Line Offset , end Line Offset , target Range End Offset ) ; } }"]}
{"ids": "15938", "code": ["public static void pipe All ( Input Stream in Str , Output Stream out Str ) throws IO Exception {", "byte [ ] bs = new byte [ BUFFER SIZE ] ;", "int num Read ;", "while ( ( num Read = in Str . read ( bs , NUM_ , bs . length ) ) >= NUM_ ) {", "out Str . write ( bs , NUM_ , num Read ) ; } }"]}
{"ids": "24437", "code": ["public void send Message Until Stop Count ( int stop Count ) {", "for ( int i = processed Worker Count ; i < workers . size ( ) ; ++ i ) {", "Actor Ref worker = workers . get ( i ) ;", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "logger . error ( STR_ + e + STR_ , e ) ; }", "worker . tell ( Operation Worker Msg Type . PROCESS REQUEST , original Manager ) ;", "processed Worker Count ++ ;", "if ( processed Worker Count > stop Count ) {", "return ; }", "logger . debug ( STR_ , processed Worker Count , request Total Count , task Id Trim ) ; } }"]}
{"ids": "33716", "code": ["public static Array List < String > string To Array List ( String string ) {", "return new Array List < > ( Arrays . as List ( string . split ( STR_ ) ) ) ; }"]}
{"ids": "86256", "code": ["private String pick Charset ( ) {", "if ( charset != null ) {", "return charset ; }", "else if ( utf 8 Supported ) {", "return STR_ ; }", "else {", "return System . get Property ( STR_ ) ; } }"]}
{"ids": "80070", "code": ["public void add Layer ( final Layer Definition layer ) {", "layer . set Map ( this ) ;", "layers . add ( layer ) ; }"]}
{"ids": "16840", "code": ["@ Deprecated public static Episode Matching Result detect Episode From Filename ( File file ) {", "LOGGER . debug ( STR_ + file . get Name ( ) ) ;", "Episode Matching Result result = new Episode Matching Result ( ) ;", "String file Name = file . get Name ( ) ;", "result = parse String ( file Name ) ;", "Collections . sort ( result . episodes ) ;", "Matcher matcher = stacking Marker Pattern . matcher ( result . name ) ;", "result . stacking Marker Found = matcher . matches ( ) ;", "LOGGER . debug ( STR_ + result ) ;", "return result ; }"]}
{"ids": "33937", "code": ["public static Typed Operation create Array Creation ( Array Type array Type ) {", "List < Type > type List = new Array List < > ( ) ;", "type List . add ( Java Types . INT TYPE ) ;", "Type Tuple input Types = new Type Tuple ( type List ) ;", "return new Typed Term Operation ( new Array Creation ( array Type ) , input Types , array Type ) ; }"]}
{"ids": "27259", "code": ["public void fire Event ( final SPARQL Update Event e ) {", "if ( is Read Only ( ) ) throw new Unsupported Operation Exception ( ) ;", "if ( e == null ) throw new Illegal Argument Exception ( ) ;", "if ( listeners . is Empty ( ) ) {", "return ; }", "final ISPARQL Update Listener [ ] a = listeners . to Array ( new ISPARQL Update Listener [ NUM_ ] ) ;", "for ( ISPARQL Update Listener l : a ) {", "final ISPARQL Update Listener listener = l ;", "try {", "listener . update Event ( e ) ; }", "catch ( Throwable t ) {", "if ( Inner Cause . is Inner Cause ( t , Interrupted Exception . class ) ) {", "throw new Runtime Exception ( t ) ; }", "log . error ( t , t ) ; } } }"]}
{"ids": "30136", "code": ["public Preference Builder < Preference Class > pref Type ( Class < Preference Class > pref Type ) {", "if ( ! VALID TYPES . contains ( pref Type ) ) {", "throw new Illegal Argument Exception ( STR_ + pref Type + STR_ ) ; }", "this . pref Type = pref Type ;", "return this ; }"]}
{"ids": "81785", "code": ["protected boolean is Numeric ( String text ) {", "text = text . trim ( ) ;", "int tlen = text . length ( ) ;", "for ( int i = NUM_ ; i < tlen ; i ++ ) {", "if ( Character . is Digit ( text . char At ( i ) ) == false ) {", "return false ; } }", "return true ; }"]}
{"ids": "45559", "code": ["public static boolean is Char ( String desc ) {", "return desc . ends With ( STR_ ) ; }"]}
{"ids": "14082", "code": ["public boolean is Client Authentication ( ) {", "return client Authentication ; }"]}
{"ids": "73172", "code": ["private J Panel create Image File Panel ( ) {", "J Panel panel = new J Panel ( ) ;", "panel . set Layout ( new Box Layout ( panel , Box Layout . X AXIS ) ) ;", "panel . add ( image File Name ) ;", "panel . add ( Box . create Horizontal Strut ( NUM_ ) ) ;", "panel . add ( new J Button ( open Image File ) ) ;", "return panel ; }"]}
{"ids": "15401", "code": ["void write Line ( Buffered Writer writer , String line ) throws IO Exception {", "writer . write ( line ) ;", "writer . new Line ( ) ; }"]}
{"ids": "51879", "code": ["public Layer child At ( int index ) {", "return children . get ( index ) ; }"]}
{"ids": "33681", "code": ["public static Function < Value , Value > of Value ( ) {", "return VALUE ; }"]}
{"ids": "19981", "code": ["public static String remove Quotes ( String s ) {", "if ( s == null ) {", "return null ; }", "String trimmed = s . trim ( ) ;", "if ( trimmed . length ( ) == NUM_ ) {", "return trimmed ; }", "int i = next Non Quote Index ( trimmed , NUM_ , true ) ;", "int j = next Non Quote Index ( trimmed , trimmed . length ( ) - NUM_ , false ) ;", "return trimmed . substring ( i , j + NUM_ ) ; }"]}
{"ids": "572", "code": ["public Float Column ( int nrows , int capacity , float default Value ) {", "super ( float . class , new Float ( default Value ) ) ;", "if ( capacity < nrows ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "m values = new float [ capacity ] ;", "Arrays . fill ( m values , default Value ) ;", "m size = nrows ; }"]}
{"ids": "11823", "code": ["void read PRJ ( ) throws IO Exception {", "while ( true ) {", "String S = isr . read Line ( ) ;", "if ( S == null ) return ;", "if ( S . starts With ( STR_ ) ) return ; } }"]}
{"ids": "16111", "code": ["private void check Alter Period Converters ( ) throws Security Exception {", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm != null ) {", "sm . check Permission ( new Joda Time Permission ( STR_ ) ) ; } }"]}
{"ids": "35578", "code": ["public void import From Change ( Change source Change ) {", "if ( source Change . revision ( ) > NUM_ ) {", "this . revision Id = new Numeric Literal Impl ( source Change . revision ( ) ) ; }", "if ( source Change . timestamp ( ) != null ) {", "Date date = source Change . timestamp ( ) ;", "Calendar c = Calendar . get Instance ( Time Zone . get Time Zone ( STR_ ) , Locale . ROOT ) ;", "c . set Time ( date ) ;", "this . last Modified = new Literal Impl ( Datatype Converter . print Date ( c ) , XML Schema . DATETIME ) ; } }"]}
{"ids": "76710", "code": ["protected Print Writer line File Out ( Document doc ) {", "return line File Out ; }"]}
{"ids": "56379", "code": ["@ Override public Query new Fuzzy Query ( String text , int fuzziness ) {", "if ( settings . lowercase Expanded Terms ( ) ) {", "text = text . to Lower Case ( settings . locale ( ) ) ; }", "Boolean Query . Builder bq = new Boolean Query . Builder ( ) ;", "bq . set Disable Coord ( true ) ;", "for ( Map . Entry < String , Float > entry : weights . entry Set ( ) ) {", "try {", "Query q = new Fuzzy Query ( new Term ( entry . get Key ( ) , text ) , fuzziness ) ;", "q . set Boost ( entry . get Value ( ) ) ;", "bq . add ( q , Boolean Clause . Occur . SHOULD ) ; }", "catch ( Runtime Exception e ) {", "rethrow Unless Lenient ( e ) ; } }", "return super . simplify ( bq . build ( ) ) ; }"]}
{"ids": "40991", "code": ["public void start Playback ( ) {", "Log . d ( TAG , STR_ ) ;", "if ( null == m Record File ) {", "Log . e ( TAG , STR_ ) ;", "return ; }", "m Player = new Media Player ( ) ;", "try {", "m Player . set Data Source ( m Record File . get Absolute Path ( ) ) ;", "Log . d ( TAG , STR_ + m Record File . get Absolute Path ( ) + STR_ ) ;", "m Player . set On Completion Listener ( this ) ;", "m Player . set On Error Listener ( this ) ;", "m Player . prepare ( ) ;", "Log . d ( TAG , STR_ ) ;", "m Player . start ( ) ; }", "catch ( IO Exception e ) {", "Log . e ( TAG , STR_ + e ) ;", "set Error ( ERROR PLAYER INTERNAL ) ;", "return ; }", "catch ( Illegal Argument Exception e ) {", "Log . e ( TAG , STR_ + e ) ;", "set Error ( ERROR PLAYER INTERNAL ) ;", "return ; }", "catch ( Security Exception e ) {", "Log . e ( TAG , STR_ + e ) ;", "set Error ( ERROR PLAYER INTERNAL ) ;", "return ; }", "catch ( Illegal State Exception e ) {", "Log . e ( TAG , STR_ + e ) ;", "set Error ( ERROR PLAYER INTERNAL ) ;", "return ; }", "set State ( STATE PLAYBACK ) ;", "Log . d ( TAG , STR_ ) ; }"]}
{"ids": "30546", "code": ["public static void reset Context ( ) {", "contexts . set ( null ) ; }"]}
{"ids": "26066", "code": ["public static Object convert To Parameter Values ( Object object ) {", "Collection < Object > collection ;", "if ( object instanceof Object [ ] ) {", "collection = Arrays . as List ( ( Object [ ] ) object ) ; }", "else if ( object instanceof Collection ) {", "collection = ( Collection < Object > ) object ; }", "else {", "LOGGER . warn ( STR_ ) ;", "return new Object [ ] { } ; }", "List < Object > s = new Linked List < Object > ( ) ;", "for ( Object o : collection ) {", "Object converted = convert To Parameter Value ( o ) ;", "if ( converted instanceof Object [ ] ) {", "s . add All ( Arrays . as List ( ( Object [ ] ) converted ) ) ; }", "else {", "s . add ( converted ) ; } }", "return s . to Array ( new Object [ s . size ( ) ] ) ; }"]}
{"ids": "22140", "code": ["public boolean logout User ( String username , Http Servlet Request req ) {", "return logout User ( username , req , true , true ) ; }"]}
{"ids": "17276", "code": ["public static Operation create Operation To Update Or Create Network Interface ( Compute State existing Compute State , Network Interface State network Interface , List < String > tenant Links , Stateless Service service , boolean is Public ) {", "String existing Interface Link = get Existing Network Interface Link ( existing Compute State , is Public ) ;", "Operation network Interface Operation = null ;", "if ( existing Interface Link == null ) {", "network Interface Operation = create Post Operation ( service , network Interface , Network Interface Service . FACTORY LINK ) ; }", "else {", "network Interface Operation = create Patch Operation ( service , network Interface , existing Interface Link ) ; }", "return network Interface Operation ; }"]}
{"ids": "10774", "code": ["public Code Source Facade ( final Code Source code Source ) {", "this . location = code Source . get Location ( ) ;", "final Certificate [ ] certificates = code Source . get Certificates ( ) ;", "if ( null == certificates || NUM_ == certificates . length ) {", "LOGGER . warning ( String . format ( STR_ , code Source ) ) ;", "this . first Certificate = null ;", "return ; }", "this . first Certificate = ( X 509 Certificate ) certificates [ NUM_ ] ; }"]}
{"ids": "48920", "code": ["public Jdp Broadcaster ( Inet Address address , Inet Address src Address , int port , int ttl ) throws IO Exception , Jdp Exception {", "this . addr = address ;", "this . port = port ;", "Protocol Family family = ( address instanceof Inet 6 Address ) ? Standard Protocol Family . INET 6 : Standard Protocol Family . INET ;", "channel = Datagram Channel . open ( family ) ;", "channel . set Option ( Standard Socket Options . SO REUSEADDR , true ) ;", "channel . set Option ( Standard Socket Options . IP MULTICAST TTL , ttl ) ;", "if ( src Address != null ) {", "Network Interface interf = Network Interface . get By Inet Address ( src Address ) ;", "try {", "channel . bind ( new Inet Socket Address ( src Address , NUM_ ) ) ; }", "catch ( Unsupported Address Type Exception ex ) {", "throw new Jdp Exception ( STR_ ) ; }", "channel . set Option ( Standard Socket Options . IP MULTICAST IF , interf ) ; } }"]}
{"ids": "67871", "code": ["public void close ( ) throws IO Exception {", "rrd File . close ( ) ; }"]}
{"ids": "83853", "code": ["public Vector rotate In Degree ( double degree ) {", "return rotate In Radian ( Math . to Radians ( degree ) ) ; }"]}
{"ids": "80184", "code": ["void hide Border ( ) {", "Insets insets = get Insets ( ) ;", "set Border ( Border Factory . create Empty Border ( insets . top , insets . left , insets . bottom , insets . right ) ) ; }"]}
{"ids": "55", "code": ["public void remove ( String btxn ) {", "synchronized ( filter Map ) {", "Filter Processor oldfp = filter Map . get ( btxn ) ;", "if ( oldfp != null ) {", "global Exclusion Filters . remove ( oldfp ) ;", "btxn Filters . remove ( oldfp ) ; } } }"]}
{"ids": "68547", "code": ["public boolean add Tag Id ( final Long tag Id ) {", "if ( tag Id != null && tag Id > NUM_ ) {", "return tag Ids . add ( tag Id ) ; }", "return false ; }"]}
{"ids": "31454", "code": ["public void support Tls Intolerant Server ( SSL Socket socket ) {", "socket . set Enabled Protocols ( new String [ ] { STR_ } ) ; }"]}
{"ids": "77899", "code": ["public static List < Execution Entity > order From Root To Leaf ( Collection < Execution Entity > executions ) {", "List < Execution Entity > ordered List = new Array List < Execution Entity > ( executions . size ( ) ) ;", "Hash Set < String > previous Ids = new Hash Set < String > ( ) ;", "for ( Execution Entity execution : executions ) {", "if ( execution . get Parent Id ( ) == null ) {", "ordered List . add ( execution ) ;", "previous Ids . add ( execution . get Id ( ) ) ; } }", "while ( ordered List . size ( ) < executions . size ( ) ) {", "for ( Execution Entity execution : executions ) {", "if ( ! previous Ids . contains ( execution . get Id ( ) ) && previous Ids . contains ( execution . get Parent Id ( ) ) ) {", "ordered List . add ( execution ) ;", "previous Ids . add ( execution . get Id ( ) ) ; } } }", "return ordered List ; }"]}
{"ids": "84708", "code": ["public void init TKF 91 ( ) {", "int i Num Nodes = i Parent . length ;", "double i Beta [ ] = new double [ i Num Nodes ] ;", "i B = new double [ i Num Nodes ] ;", "i E = new double [ i Num Nodes ] ;", "i H = new double [ i Num Nodes ] ;", "i N = new double [ i Num Nodes ] ;", "i Initial = NUM_ ;", "for ( int i = NUM_ ; i < i Num Nodes ; i ++ ) {", "if ( i == i Num Nodes - NUM_ ) {", "i Beta [ i ] = NUM_ / i Mu ;", "i H [ i ] = NUM_ ; }", "else {", "i Beta [ i ] = Math . exp ( ( i Lambda - i Mu ) * i Tau [ i ] ) ;", "i Beta [ i ] = ( NUM_ - i Beta [ i ] ) / ( i Mu - i Lambda * i Beta [ i ] ) ;", "i H [ i ] = Math . exp ( - i Mu * i Tau [ i ] ) * ( NUM_ - i Lambda * i Beta [ i ] ) ; }", "i B [ i ] = i Lambda * i Beta [ i ] ;", "i E [ i ] = i Mu * i Beta [ i ] ;", "i N [ i ] = ( NUM_ - i Mu * i Beta [ i ] ) * ( NUM_ - i B [ i ] ) - i H [ i ] ;", "i Initial *= ( NUM_ - i B [ i ] ) ; } }"]}
{"ids": "13606", "code": ["public static String serialize Expression ( Node s ) {", "if ( s instanceof AST Term ) {", "AST Term a = ( AST Term ) s ;", "return ( a . is Not Flag ( ) ? STR_ : STR_ ) + STR_ + a . get Term ( ) ; }", "String prefix = STR_ ;", "String suffix = STR_ ;", "String join = STR_ ;", "if ( s instanceof AST Expression ) {", "AST Expression a = ( AST Expression ) s ;", "prefix = ( a . is Not Flag ( ) ? STR_ : STR_ ) + STR_ ;", "suffix = STR_ ;", "join = STR_ + a . get Type ( ) + STR_ ; }", "List < String > children = new Array List < String > ( ) ;", "for ( int i = NUM_ ; i < s . jjt Get Num Children ( ) ; i ++ ) {", "children . add ( serialize Expression ( s . jjt Get Child ( i ) ) ) ; }", "return prefix + String Utils . join ( children , join ) + suffix ; }"]}
{"ids": "82812", "code": ["private void define Internal Frame Menu Buttons ( UI Defaults d ) {", "String p = STR_ ;", "String c = PAINTER PREFIX + STR_ ;", "d . put ( p + STR_ , new Title Pane Menu Button Window Not Focused State ( ) ) ;", "d . put ( p + STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Menu Button Painter . Which . ICON ENABLED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Menu Button Painter . Which . ICON DISABLED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Menu Button Painter . Which . ICON MOUSEOVER ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Menu Button Painter . Which . ICON PRESSED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Menu Button Painter . Which . ICON ENABLED WINDOWNOTFOCUSED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Menu Button Painter . Which . ICON MOUSEOVER WINDOWNOTFOCUSED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Menu Button Painter . Which . ICON PRESSED WINDOWNOTFOCUSED ) ) ;", "d . put ( p + STR_ , new Sea Glass Icon ( p , STR_ , NUM_ , NUM_ ) ) ; }"]}
{"ids": "21631", "code": ["public static Workflow . Method restore From Clone Method ( URI storage , List < URI > clone , Boolean update Op Status , boolean is CG ) {", "return new Workflow . Method ( STR_ , storage , clone , update Op Status , is CG ) ; }"]}
{"ids": "38664", "code": ["@ Override public synchronized void remove Data Source Listener ( Data Source Listener dsl ) {", "m data Source Listeners . remove ( dsl ) ; }"]}
{"ids": "43329", "code": ["public String right Str ( String str , int length ) {", "return str . substring ( Math . max ( NUM_ , str . length ( ) - length ) ) ; }"]}
{"ids": "73941", "code": ["public void clear Name In Unoccupied Blocks ( ) {", "for ( int i = NUM_ ; i < m Block Entries . size ( ) ; i ++ ) {", "Block b = m Block Entries . get ( i ) ;", "if ( b . get State ( ) == Block . UNOCCUPIED ) {", "b . set Value ( STR_ ) ; } } }"]}
{"ids": "13534", "code": ["public static Object unserialize ( Data data ) {", "try {", "Class clazz = ( Class ) Class . for Name ( ( String ) data . get ( STR_ ) ) ;", "if ( clazz . is Enum ( ) ) {", "return Enum . value Of ( clazz , data . get ( STR_ ) ) ; }", "else if ( clazz == Vector 3 D . class ) {", "return new Vector 3 D ( data . get ( STR_ ) , data . get ( STR_ ) , data . get ( STR_ ) ) ; }", "else if ( clazz == Vector 2 D . class ) {", "return new Vector 2 D ( data . get ( STR_ ) , ( double ) data . get ( STR_ ) ) ; }", "else {", "return unserialize ( clazz , data ) ; } }", "catch ( Exception e ) {", "throw new Data Exception ( e ) ; } }"]}
{"ids": "31914", "code": ["public static void on Grid Stop ( ) throws Interrupted Exception {", "synchronized ( mux ) {", "if ( grid Cnt == NUM_ ) return ;", "-- grid Cnt ;", "Thread timer 0 = timer ;", "if ( grid Cnt == NUM_ && timer 0 != null ) {", "timer = null ;", "timer 0 . interrupt ( ) ;", "timer 0 . join ( ) ; } } }"]}
{"ids": "50991", "code": ["public void push Template Folder ( @ Not Null String folder Name ) throws IO Exception {", "my Last Template Folders . push ( resolve Name ( folder Name ) ) ; }"]}
{"ids": "42318", "code": ["public void print Depth First ( ) {", "print ( new Depth First Enumerator ( first Node ) ) ; }"]}
{"ids": "22817", "code": ["public void add Event ( Sim Event new Event ) {", "double event Time = new Event . event Time ( ) ;", "if ( event Time >= max Time ) {", "list . add ( new Event ) ;", "max Time = event Time ;", "return ; }", "List Iterator < Sim Event > iterator = list . list Iterator ( ) ;", "Sim Event event ;", "while ( iterator . has Next ( ) ) {", "event = iterator . next ( ) ;", "if ( event . event Time ( ) > event Time ) {", "iterator . previous ( ) ;", "iterator . add ( new Event ) ;", "return ; } }", "list . add ( new Event ) ; }"]}
{"ids": "3127", "code": ["public Db Schema Ejb Generator ( Generated Tables gen Tables , Schema Element schema Element ) {", "this ( gen Tables , schema Element , Collection Type . COLLECTION , false , false , false ) ; }"]}
{"ids": "53668", "code": ["@ Override public void initialize ( ) {", "board = null ;", "switch ( sim Pane Ctrl . get Param Value Index ( PARAM INIT CONF ) ) {", "case NUM_ :", "board = new Eight Puzzle Board ( new int [ ] { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ) ;", "break ;", "case NUM_ :", "board = new Eight Puzzle Board ( new int [ ] { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ) ;", "break ;", "case NUM_ :", "board = new Eight Puzzle Board ( new int [ ] { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ) ;", "break ;", "case NUM_ :", "board = new Eight Puzzle Board ( new int [ ] { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ) ;", "Random r = new Random ( System . current Time Millis ( ) ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "switch ( r . next Int ( NUM_ ) ) {", "case NUM_ :", "board . move Gap Up ( ) ;", "break ;", "case NUM_ :", "board . move Gap Down ( ) ;", "break ;", "case NUM_ :", "board . move Gap Left ( ) ;", "break ;", "case NUM_ :", "board . move Gap Right ( ) ;", "break ; } } }", "state View Ctrl . initialize ( board ) ; }"]}
{"ids": "73229", "code": ["private void init Tree Map ( ) {", "if ( entity Type == null ) {", "entity Type = STR_ ; }", "if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Circle ( ) ; }", "if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Mouse ( ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "else if ( entity Type . equals Ignore Case ( STR_ ) ) {", "image Map = Rotating Entity Manager . get Rotating Tileset ( STR_ , NUM_ ) ; }", "update ( ) ; }"]}
{"ids": "19769", "code": ["public static File locate Replicator Home Dir ( ) {", "if ( replicator Home Dir == null ) {", "String replicator Home = System . get Property ( HOME DIR ) ;", "if ( replicator Home == null ) replicator Home = System . get Property ( STR_ ) ;", "replicator Home Dir = new File ( replicator Home ) ;", "if ( ! replicator Home Dir . is Directory ( ) ) {", "throw new Server Runtime Exception ( STR_ + replicator Home Dir ) ; } }", "return replicator Home Dir ; }"]}
{"ids": "80705", "code": ["public String Data ( String data ) {", "m data = data ; }"]}
{"ids": "71248", "code": ["void write Repeated Sqr ( DD xdd ) {", "if ( xdd . ge ( DD . value Of ( NUM_ ) ) ) throw new Illegal Argument Exception ( STR_ ) ;", "int count = NUM_ ;", "while ( xdd . double Value ( ) > NUM_ ) {", "count ++ ;", "if ( count == NUM_ ) count = count ;", "double x = xdd . double Value ( ) ;", "DD x Sqr = xdd . sqr ( ) ;", "String s = x Sqr . to String ( ) ;", "DD x Sqr 2 = DD . parse ( s ) ;", "xdd = x Sqr ; } }"]}
{"ids": "81152", "code": ["public static final void open ( File file ) throws No Such Method Exception {", "if ( Platform . is Mac OSX ( ) ) {", "exec Args ( STR_ , file . get Absolute Path ( ) ) ; }", "else if ( Platform . is Windows ( ) ) {", "if ( file . is Directory ( ) ) {", "exec Args ( STR_ , file . get Absolute Path ( ) ) ; }", "else {", "exec Args ( STR_ , file . get Absolute Path ( ) ) ; } }", "else if ( Platform . is Unix ( ) && has Unix Command ( STR_ ) ) {", "exec Args ( STR_ , file . to String ( ) ) ; }", "else if ( Platform . is Unix ( ) && has Unix Command ( STR_ ) ) {", "exec Args ( STR_ , file . to String ( ) ) ; }", "else if ( Platform . is Solaris ( ) && file . is Directory ( ) ) {", "exec Args ( STR_ , STR_ , file . get Absolute Path ( ) ) ; }", "else {", "throw new No Such Method Exception ( STR_ ) ; } }"]}
{"ids": "62255", "code": ["private static String [ ] norm ( String path ) {", "String [ ] elements = path . split ( STR_ ) ;", "Array List < String > stack = new Array List < String > ( ) ;", "for ( String e : elements ) {", "if ( e . is Empty ( ) || e . equals ( STR_ ) ) continue ;", "if ( e . equals ( STR_ ) ) {", "if ( ! stack . is Empty ( ) ) stack . remove ( stack . size ( ) - NUM_ ) ;", "else return null ;", "continue ; }", "stack . add ( e ) ; }", "return stack . to Array ( new String [ stack . size ( ) ] ) ; }"]}
{"ids": "77445", "code": ["static Random random ( ) {", "if ( null == LUCENE TEST CASE ) {", "return null ; }", "else {", "try {", "Method random Method = LUCENE TEST CASE . get Method ( STR_ ) ;", "return ( Random ) random Method . invoke ( null ) ; }", "catch ( Exception e ) {", "throw new Illegal State Exception ( STR_ , e ) ; } } }"]}
{"ids": "51602", "code": ["protected String record ( String deployment ) {", "deployments . add ( deployment ) ;", "return deployment ; }"]}
{"ids": "30411", "code": ["private static void shut Down My SQL Abandoned Connection Cleanup Thread ( Class Loader class Loader ) {", "try {", "Class < ? > mysql Cleanup Thread Class ;", "try {", "mysql Cleanup Thread Class = class Loader . load Class ( STR_ ) ; }", "catch ( Class Not Found Exception e ) {", "LOG . trace ( STR_ + STR_ , e ) ;", "return ; }", "Method shutdown Method = mysql Cleanup Thread Class . get Method ( STR_ ) ;", "shutdown Method . invoke ( null ) ;", "LOG . debug ( STR_ ) ; }", "catch ( Throwable e ) {", "LOG . warn ( STR_ , e ) ; } }"]}
{"ids": "62067", "code": ["public void write ( byte [ ] buffer ) {", "if ( is Final ) {", "log . warning ( STR_ ) ;", "return ; }", "byte [ ] new Data = new byte [ data . length + buffer . length ] ;", "System . arraycopy ( data , NUM_ , new Data , NUM_ , data . length ) ;", "System . arraycopy ( buffer , NUM_ , new Data , data . length , buffer . length ) ;", "data = new Data ; }"]}
{"ids": "54925", "code": ["public String parse ( String control Template , Context control Context ) throws Exception {", "this . control Context = control Context ;", "fill Context Defaults ( this . control Context ) ;", "fill Context Properties ( this . control Context ) ;", "Template template = get Template ( control Template , input Encoding ) ;", "String Writer sw = new String Writer ( ) ;", "template . merge ( control Context , sw ) ;", "return sw . to String ( ) ; }"]}
{"ids": "2064", "code": ["public static long write File ( String path , byte [ ] jpeg , Exif Interface exif ) throws IO Exception {", "if ( ! create Directory If Needed ( path ) ) {", "Log . e ( TAG , STR_ + path ) ;", "return - NUM_ ; }", "if ( exif != null ) {", "exif . write Exif ( jpeg , path ) ;", "File f = new File ( path ) ;", "return f . length ( ) ; }", "else {", "return write File ( path , jpeg ) ; } }"]}
{"ids": "21896", "code": ["private boolean check For Image Servers ( ) {", "boolean image Server Exists = true ;", "List < URI > image Server URI List = db Client . query By Type ( Compute Image Server . class , true ) ;", "Array List < URI > temp List = Lists . new Array List ( image Server URI List . iterator ( ) ) ;", "if ( temp List . is Empty ( ) ) {", "image Server Exists = false ; }", "return image Server Exists ; }"]}
{"ids": "86236", "code": ["public void remove Extension ( String ext ) {", "synchronized ( exts ) {", "ext = ext . to Lower Case ( ) ;", "exts . remove ( ext ) ; } }"]}
{"ids": "9397", "code": ["protected double distance ( int i , int k , int [ ] designations ) {", "return Math . sqrt ( Math . max ( self K [ i ] - NUM_ / ownes [ k ] * eval Sum K ( i , k , designations ) + mean Sqrd Norms [ k ] * norm Consts [ k ] , NUM_ ) ) ; }"]}
{"ids": "15302", "code": ["public String Buffer format ( Object pat , String Buffer result , Field Position fpos ) {", "String pattern = process Pattern ( ( String ) pat ) ;", "int last Offset = NUM_ ;", "for ( int i = NUM_ ; i <= max Offset ; ++ i ) {", "int offidx = offsets [ i ] ;", "result . append ( pattern . substring ( last Offset , offsets [ i ] ) ) ;", "last Offset = offidx ;", "String key = arguments [ i ] ;", "String obj ;", "if ( key . length ( ) > NUM_ ) {", "obj = format Object ( process Key ( key ) ) ; }", "else {", "result . append ( this . ldel ) ;", "result . append ( this . rdel ) ;", "continue ; }", "if ( obj == null ) {", "String lessgreedy = ldel + key ;", "int fromright = lessgreedy . last Index Of ( ldel ) ;", "if ( fromright > NUM_ ) {", "String newkey = lessgreedy . substring ( fromright + ldel . length ( ) ) ;", "String newsubst = format Object ( process Key ( newkey ) ) ;", "if ( newsubst != null ) {", "obj = lessgreedy . substring ( NUM_ , fromright ) + newsubst ; } } }", "if ( obj == null ) {", "if ( throwex ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else {", "obj = ldel + key + rdel ; } }", "result . append ( obj ) ; }", "result . append ( pattern . substring ( last Offset , pattern . length ( ) ) ) ;", "return result ; }"]}
{"ids": "41743", "code": ["void release ( Object owner , Field field ) {", "Map < String , Integer > fields = owners . get ( owner ) ;", "if ( fields != null ) {", "release ( ) ;", "Integer count = fields . get ( field . to Generic String ( ) ) ;", "if ( -- count > NUM_ ) {", "fields . put ( field . to Generic String ( ) , count ) ; }", "else {", "fields . remove ( field . to Generic String ( ) ) ; } }", "if ( fields != null && fields . is Empty ( ) ) {", "owners . remove ( owner ) ; } }"]}
{"ids": "47102", "code": ["static Executor screen Executor ( Executor e ) {", "if ( ! use Common Pool && e == Fork Join Pool . common Pool ( ) ) return async Pool ;", "if ( e == null ) throw new Null Pointer Exception ( ) ;", "return e ; }"]}
{"ids": "63977", "code": ["public void add Group Properties Listener ( Group Properties Listener group Properties Listener ) {", "group Properties Listeners . add ( group Properties Listener ) ; }"]}
{"ids": "36835", "code": ["public static void edit Global Function Comment ( final Abstract SQL Provider provider , final I Navi Function function , final Integer comment Id , final Integer user Id , final String new Comment ) throws Couldnt Save Data Exception {", "Postgre SQL Comment Functions . edit Comment ( provider , comment Id , user Id , new Comment ) ; }"]}
{"ids": "15033", "code": ["public boolean does Entry Exists ( SSO Token token , String entry DN ) {", "try {", "Persistent Object po = UMS Object . get Object ( internal Token , new Guid ( entry DN ) ) ; }", "catch ( UMS Exception ue ) {", "if ( entry DN . index Of ( STR_ ) < NUM_ ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ , ue ) ; } }", "return false ; }", "return true ; }"]}
{"ids": "47896", "code": ["private static int hash Wrapper Name ( String xn ) {", "if ( xn . length ( ) < NUM_ ) {", "return NUM_ ; }", "return ( NUM_ * xn . char At ( NUM_ ) + xn . char At ( NUM_ ) ) % NUM_ ; }"]}
{"ids": "24306", "code": ["private void create PR With Total Num Prop Set List ( List vm List , int start Index For Region , int end Index For Region , int local Max Memory , int redundancy ) {", "Iterator node Iterator = vm List . iterator ( ) ;", "while ( node Iterator . has Next ( ) ) {", "VM vm = ( VM ) node Iterator . next ( ) ;", "vm . invoke ( create Multiple PR With Total Num Bucket Prop Set ( pr Prefix , start Index For Region , end Index For Region , redundancy , local Max Memory , NUM_ ) ) ; } }"]}
{"ids": "12479", "code": ["public Zdiagmat ( Zmat A , int k ) throws Jampack Exception {", "Parameters . Base Index Not Changeable = true ;", "basex = Parameters . Base Index ;", "if ( k >= NUM_ ) {", "if ( k >= A . ncol ) {", "throw new Jampack Exception ( STR_ ) ; }", "order = Math . min ( A . nrow , A . ncol - k ) ;", "re = new double [ order ] ;", "im = new double [ order ] ;", "for ( int i = NUM_ ; i < order ; i ++ ) {", "re [ i ] = A . re [ i ] [ i + k ] ;", "im [ i ] = A . im [ i ] [ i + k ] ; } }", "else {", "k = - k ;", "if ( k >= A . nrow ) {", "throw new Jampack Exception ( STR_ ) ; }", "order = Math . min ( A . nrow - k , A . ncol ) ;", "re = new double [ order ] ;", "im = new double [ order ] ;", "for ( int i = NUM_ ; i < order ; i ++ ) {", "re [ i ] = A . re [ i + k ] [ i ] ;", "im [ i ] = A . im [ i + k ] [ i ] ; } }", "get Properties ( ) ; }"]}
{"ids": "73253", "code": ["public void build Network ( ) {", "Neuron first Neuron = new Neuron ( network , DEFAULT NEURON TYPE ) ;", "List < Neuron > current Layer = new Array List < Neuron > ( ) ;", "first Neuron . set Position ( initial Position ) ;", "current Layer . add ( first Neuron ) ;", "int num Neurons Last Layer = ( int ) Math . pow ( num Braches Per Neuron , num Layers ) ;", "double total Space = num Neurons Last Layer * horizontal Spacing ;", "for ( int layer Index = NUM_ ; layer Index <= num Layers ; layer Index ++ ) {", "List < Neuron > temp List = new Array List < Neuron > ( ) ;", "double layer Spacing = total Space / ( int ) Math . pow ( num Braches Per Neuron , layer Index ) ;", "double branch Width = layer Spacing * ( num Braches Per Neuron - NUM_ ) ;", "for ( Neuron base Neuron : current Layer ) {", "network . add Neuron ( base Neuron ) ;", "double initial X Offset = branch Width / NUM_ ;", "for ( int j = NUM_ ; j < num Braches Per Neuron ; j ++ ) {", "Neuron target Neuron = new Neuron ( network , new Linear Rule ( ) ) ;", "target Neuron . set Location ( base Neuron . get X ( ) - initial X Offset + ( j * layer Spacing ) , initial Position . y - ( layer Index * vertical Spacing ) ) ;", "temp List . add ( target Neuron ) ;", "network . add Neuron ( target Neuron ) ;", "target Neuron . set Update Priority ( layer Index ) ;", "Synapse synapse = new Synapse ( network , base Neuron , target Neuron , new Static Synapse Rule ( ) ) ;", "network . add Synapse ( synapse ) ; } }", "current Layer = temp List ; } }"]}
{"ids": "69488", "code": ["public Enumeration productions ( ) {", "return productions . elements ( ) ; }"]}
{"ids": "9692", "code": ["public D Jar Info ( J Frame parent ) throws IO Exception {", "this ( parent , res . get String ( STR_ ) , Modality Type . DOCUMENT MODAL ) ; }"]}
{"ids": "85746", "code": ["protected void transform Point Array No Touch ( float [ ] pts ) {", "m Matrix Value To Px . map Points ( pts ) ;", "m Matrix Offset . map Points ( pts ) ; }"]}
{"ids": "51738", "code": ["private void convert Escaped Function ( final String Builder target , final Char Sequence escaped Function ) throws FBSQL Parse Exception {", "final String template Result = FB Escaped Function Helper . convert Template ( escaped Function . to String ( ) , mode ) ;", "target . append ( template Result != null ? template Result : escaped Function ) ; }"]}
{"ids": "23317", "code": ["public void add Listener ( Ims Session Listener listener ) {", "m Listeners . add ( listener ) ; }"]}
{"ids": "33145", "code": ["public static I Path stamp To Path ( final long stamp ) {", "fg Calendar . set Time In Millis ( stamp ) ;", "final String Buffer buffer = new String Buffer ( NUM_ ) ;", "buffer . append ( fg Calendar . get ( Calendar . YEAR ) ) ;", "buffer . append ( I Path . SEPARATOR ) ;", "buffer . append ( fg Calendar . get ( Calendar . MONTH ) + NUM_ ) ;", "buffer . append ( I Path . SEPARATOR ) ;", "buffer . append ( fg Calendar . get ( Calendar . WEEK OF YEAR ) ) ;", "return new Path ( buffer . to String ( ) ) ; }"]}
{"ids": "55471", "code": ["public void print User Message ( User Message message ) {", "User user = message . user ;", "boolean ignored = message . ignored compact ;", "if ( ignored ) {", "print Compact ( STR_ , user ) ;", "return ; }", "Color color = message . color ;", "boolean action = message . action ;", "String text = message . text ;", "Tag Emotes emotes = message . emotes ;", "boolean highlighted = message . highlighted ;", "if ( message . whisper && message . action ) {", "color = Style Constants . get Foreground ( styles . info ( ) ) ;", "highlighted = true ; }", "close Compact Mode ( ) ;", "Mutable Attribute Set style ;", "if ( highlighted ) {", "style = styles . highlight ( color ) ; }", "else {", "style = styles . standard ( ) ; }", "print ( get Time Prefix ( ) , style ) ;", "print User ( user , action , message . whisper , message . id ) ;", "if ( ! highlighted && action && styles . action Colored ( ) ) {", "style = styles . standard ( user . get Display Color ( ) ) ; }", "print Specials ( text , user , style , emotes , false , message . bits > NUM_ ) ;", "print Newline ( ) ; }"]}
{"ids": "75507", "code": ["public static boolean is Access Modifier ( String str ) {", "return str . equals ( STR_ ) || str . equals ( STR_ ) || str . equals ( STR_ ) || str . equals ( STR_ ) || str . equals ( STR_ ) || str . equals ( STR_ ) ; }"]}
{"ids": "65335", "code": ["protected void handle Append Request Failure ( Member State member , Append Request request , Throwable error ) {", "fail Attempt ( member , error ) ; }"]}
{"ids": "19608", "code": ["public static String decode ( byte [ ] utf 8 ) throws Character Coding Exception {", "return decode ( Byte Buffer . wrap ( utf 8 ) , true ) ; }"]}
{"ids": "10107", "code": ["private Map < String , String > attributes To Lower Case ( ) {", "Map < String , String > lower Case Attributes = new Linked Hash Map < String , String > ( ) ;", "for ( String key : attributes . key Set ( ) ) {", "lower Case Attributes . put ( key . to Lower Case ( ) , attributes . get ( key ) ) ; }", "return lower Case Attributes ; }"]}
{"ids": "39736", "code": ["public byte [ ] read Next Part ( ) throws J Plag Exception {", "if ( remaining Bytes == NUM_ ) {", "throw new J Plag Exception ( STR_ , STR_ , STR_ ) ; }", "try {", "File Input Stream in = new File Input Stream ( file ) ;", "in . skip ( filesize - remaining Bytes ) ;", "int partsize = remaining Bytes ;", "if ( partsize > NUM_ ) partsize = NUM_ ;", "byte [ ] data = new byte [ partsize ] ;", "in . read ( data ) ;", "in . close ( ) ;", "remaining Bytes -= partsize ;", "return data ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "throw new J Plag Exception ( STR_ , STR_ + STR_ , STR_ ) ; } }"]}
{"ids": "8438", "code": ["public boolean is Multi Line Tabbed ( ) {", "return multi Line Tab ; }"]}
{"ids": "38090", "code": ["protected void compute Parameters ( ) {", "if ( m Sum Of Weights > NUM_ ) {", "m Mean = m Sum Of Values / m Sum Of Weights ;", "double std Dev = Math . sqrt ( Math . abs ( m Sum Of Values Sq - m Mean * m Sum Of Values ) / m Sum Of Weights ) ;", "if ( std Dev > NUM_ ) {", "m Standard Dev = Math . max ( m Precision / ( NUM_ * NUM_ ) , std Dev ) ; } } }"]}
{"ids": "66551", "code": ["public String translate Data Type ( String source Vendor Name , String target Vendor Name , String data Type , int size , int scale ) {", "return get Data Type ( target Vendor Name , get Data Type ID ( source Vendor Name , data Type ) , size , scale ) ; }"]}
{"ids": "54838", "code": ["public static List < Shape Record > rectangle ( double startx , double starty , double width , double height , double radius X , double radius Y , double top Left Radius X , double top Left Radius Y , double top Right Radius X , double top Right Radius Y , double bottom Left Radius X , double bottom Left Radius Y , double bottom Right Radius X , double bottom Right Radius Y ) {", "List < Shape Record > shape Records = new Array List < Shape Record > ( ) ;", "if ( radius X == NUM_ ) {", "radius Y = radius X = NUM_ ; }", "else if ( radius Y == NUM_ ) {", "radius Y = radius X ; }", "if ( radius X > width / NUM_ ) radius X = width / NUM_ ;", "if ( radius Y > height / NUM_ ) radius Y = height / NUM_ ;", "double [ ] top Left Radius = get Corner Radius ( top Left Radius X , top Left Radius Y , radius X , radius Y , width , height ) ;", "top Left Radius X = top Left Radius [ NUM_ ] ;", "top Left Radius Y = top Left Radius [ NUM_ ] ;", "double [ ] top Right Radius = get Corner Radius ( top Right Radius X , top Right Radius Y , radius X , radius Y , width , height ) ;", "top Right Radius X = top Right Radius [ NUM_ ] ;", "top Right Radius Y = top Right Radius [ NUM_ ] ;", "double [ ] bottom Left Radius = get Corner Radius ( bottom Left Radius X , bottom Left Radius Y , radius X , radius Y , width , height ) ;", "bottom Left Radius X = bottom Left Radius [ NUM_ ] ;", "bottom Left Radius Y = bottom Left Radius [ NUM_ ] ;", "double [ ] bottom Right Radius = get Corner Radius ( bottom Right Radius X , bottom Right Radius Y , radius X , radius Y , width , height ) ;", "bottom Right Radius X = bottom Right Radius [ NUM_ ] ;", "bottom Right Radius Y = bottom Right Radius [ NUM_ ] ;", "double c 0 = NUM_ ;", "double c 1 = NUM_ ;", "double c 3 = NUM_ ;", "double rx = bottom Right Radius X ;", "double ry = bottom Right Radius Y ;", "double tx = rx / NUM_ ;", "double ty = ry / NUM_ ;", "double dx , currentx ;", "double dy , currenty ;", "dx = startx + width - rx ;", "dy = starty + height - ry ;", "shape Records . add ( move ( ( dx + rx ) , dy ) ) ;", "currentx = ( dx + rx ) ;", "currenty = dy ;", "if ( bottom Right Radius X != NUM_ ) {", "shape Records . add ( curved Edge ( currentx , currenty , ( dx + c 0 * tx ) , ( dy + c 1 * ty ) , ( dx + c 3 * rx ) , ( dy + c 3 * ry ) ) ) ;", "shape Records . add ( curved Edge ( ( dx + c 3 * rx ) , ( dy + c 3 * ry ) , ( dx + c 1 * tx ) , ( dy + c 0 * ty ) , dx , ( dy + ry ) ) ) ;", "currentx = dx ;", "currenty = dy + ry ; }", "rx = bottom Left Radius X ;", "ry = bottom Left Radius Y ;", "tx = rx / NUM_ ;", "ty = ry / NUM_ ;", "dx = startx + rx ;", "dy = starty + height - ry ;", "shape Records . add All ( straight Edge ( currentx , currenty , dx , ( dy + ry ) ) ) ;", "currentx = dx ;", "currenty = dy + ry ;", "if ( bottom Left Radius X != NUM_ ) {", "shape Records . add ( curved Edge ( currentx , currenty , ( dx - c 1 * tx ) , ( dy + c 0 * ty ) , ( dx - c 3 * rx ) , ( dy + c 3 * ry ) ) ) ;", "shape Records . add ( curved Edge ( ( dx - c 3 * rx ) , ( dy + c 3 * ry ) , ( dx - c 0 * tx ) , ( dy + c 1 * ty ) , ( dx - rx ) , dy ) ) ;", "currentx = dx - rx ;", "currenty = dy ; }", "rx = top Left Radius X ;", "ry = top Left Radius Y ;", "tx = rx / NUM_ ;", "ty = ry / NUM_ ;", "dx = startx + rx ;", "dy = starty + ry ;", "shape Records . add All ( straight Edge ( currentx , currenty , ( dx - rx ) , dy ) ) ;", "currentx = dx - rx ;", "currenty = dy ;", "if ( top Left Radius X != NUM_ ) {", "shape Records . add ( curved Edge ( currentx , currenty , ( dx - c 0 * tx ) , ( dy - c 1 * ty ) , ( dx - c 3 * rx ) , ( dy - c 3 * ry ) ) ) ;", "shape Records . add ( curved Edge ( ( dx - c 3 * rx ) , ( dy - c 3 * ry ) , ( dx - c 1 * tx ) , ( dy - c 0 * ty ) , dx , ( dy - ry ) ) ) ;", "currentx = dx ;", "currenty = dy - ry ; }", "rx = top Right Radius X ;", "ry = top Right Radius Y ;", "tx = rx / NUM_ ;", "ty = ry / NUM_ ;", "dx = startx + width - rx ;", "dy = starty + ry ;", "shape Records . add All ( straight Edge ( currentx , currenty , dx , ( dy - ry ) ) ) ;", "currentx = dx ;", "currenty = dy - ry ;", "if ( top Right Radius X != NUM_ ) {", "shape Records . add ( curved Edge ( currentx , currenty , ( dx + c 1 * tx ) , ( dy - c 0 * ty ) , ( dx + c 3 * rx ) , ( dy - c 3 * ry ) ) ) ;", "shape Records . add ( curved Edge ( ( dx + c 3 * rx ) , ( dy - c 3 * ry ) , ( dx + c 0 * tx ) , ( dy - c 1 * ty ) , ( dx + rx ) , dy ) ) ;", "currentx = ( dx + rx ) ;", "currenty = dy ; }", "rx = bottom Right Radius X ;", "ry = bottom Right Radius Y ;", "tx = rx / NUM_ ;", "ty = ry / NUM_ ;", "dx = startx + width - rx ;", "dy = starty + height - ry ;", "shape Records . add All ( straight Edge ( currentx , currenty , ( dx + rx ) , dy ) ) ;", "return shape Records ; }"]}
{"ids": "55515", "code": ["protected void move Down Selected ( ) {", "int selected Index = table . get Selected Row ( ) ;", "if ( selected Index > - NUM_ ) {", "int index = data . move Down ( index To Model ( selected Index ) ) ;", "set Row Selected ( index To View ( index ) ) ; } }"]}
{"ids": "3748", "code": ["Jar With File ( Path Impl backing ) {", "super ( backing ) ; }"]}
{"ids": "72734", "code": ["public List < Runnable > shutdown Now ( ) {", "logger . info ( STR_ ) ;", "return executor . shutdown Now ( ) ; }"]}
{"ids": "60309", "code": ["public static List < String > to Relative Paths ( @ Not Null Virtual File root , @ Not Null final Collection < File Path > file Paths ) {", "Array List < String > rc = new Array List < String > ( file Paths . size ( ) ) ;", "for ( File Path path : file Paths ) {", "rc . add ( relative Path ( root , path ) ) ; }", "return rc ; }"]}
{"ids": "83636", "code": ["private void handle Unlock Or Install ( ) {", "if ( is Finishing ( ) ) {", "return ; }", "switch ( m Key Store . state ( ) ) {", "case UNINITIALIZED : {", "ensure Key Guard ( ) ;", "return ; }", "case LOCKED : {", "new Unlock Dialog ( ) ;", "return ; }", "case UNLOCKED : {", "if ( ! check Key Guard Quality ( ) ) {", "new Configure Key Guard Dialog ( ) ;", "return ; }", "install If Available ( ) ;", "finish ( ) ;", "return ; } } }"]}
{"ids": "40762", "code": ["private void offset Start Time If Necessary ( Time start Time , Time end Time , String rrule , Calendar Event Model model ) {", "if ( rrule == null || rrule . is Empty ( ) ) {", "return ; }", "m Event Recurrence . parse ( rrule ) ;", "if ( m Event Recurrence . freq != Event Recurrence . WEEKLY ) {", "return ; }", "if ( m Event Recurrence . byday . length > m Event Recurrence . byday Count ) {", "return ; }", "int closest Weekday = Integer . MAX VALUE ;", "int weekstart = Event Recurrence . day 2 Time Day ( m Event Recurrence . wkst ) ;", "int start Day = start Time . week Day ;", "for ( int i = NUM_ ; i < m Event Recurrence . byday Count ; i ++ ) {", "int day = Event Recurrence . day 2 Time Day ( m Event Recurrence . byday [ i ] ) ;", "if ( day == start Day ) {", "return ; }", "if ( day < weekstart ) {", "day += NUM_ ; }", "if ( day > start Day && ( day < closest Weekday || closest Weekday < start Day ) ) {", "closest Weekday = day ; }", "if ( closest Weekday == Integer . MAX VALUE || closest Weekday < start Day ) {", "if ( day < closest Weekday ) {", "closest Weekday = day ; } } }", "if ( closest Weekday < start Day ) {", "closest Weekday += NUM_ ; }", "int days Offset = closest Weekday - start Day ;", "start Time . month Day += days Offset ;", "end Time . month Day += days Offset ;", "long new Start Time = start Time . normalize ( true ) ;", "long new End Time = end Time . normalize ( true ) ;", "model . m Start = new Start Time ;", "model . m End = new End Time ; }"]}
{"ids": "53579", "code": ["private void clean Up Frontier ( ) {", "while ( ! frontier . is Empty ( ) && is Explored ( frontier . element ( ) ) ) frontier . remove ( ) ; }"]}
{"ids": "85585", "code": ["public static boolean is Before Today ( Calendar calendar ) {", "return calendar . before ( Calendar . get Instance ( ) ) ; }"]}
{"ids": "41458", "code": ["public static View Item Group build Login UI ( Model Application model App , Activity activity ) {", "View Item Group view Items = new View Item Group ( activity ) ;", "Text View username Text = new Text View ( activity ) ;", "username Text . set Text ( R . string . username ) ;", "view Items . add View ( username Text ) ;", "View Item Factory view Item Factory = View Item Factory . instance ( ) ;", "View Item username Item = view Item Factory . create ( Login View ID . USERNAME , view Item Factory . TEXT DATATYPE DB ID , activity ) ;", "view Items . add View Item ( username Item , new Omni Text ( model App . get Username ( ) ) ) ;", "Text View password Text = new Text View ( activity ) ;", "password Text . set Text ( R . string . password ) ;", "view Items . add View ( password Text ) ;", "View Item password Item = view Item Factory . create ( Login View ID . PASSWORD , view Item Factory . PASSWORD INPUT DATATYPE DB ID , activity ) ;", "view Items . add View Item ( password Item , new Omni Password Input ( model App . get Password ( ) ) ) ;", "return view Items ; }"]}
{"ids": "22482", "code": ["public void un Map Volume From SCSI Initiator ( String volume Id , String initiator Id ) throws Exception {", "String uri = Scale IO Constants . get Unmap Volume To Scsi Initiator URI ( volume Id ) ;", "Scale IO Unmap Volume To Scsi Initiator unmap Parm = new Scale IO Unmap Volume To Scsi Initiator ( ) ;", "unmap Parm . set Scsi Initiator Id ( initiator Id ) ;", "post ( URI . create ( uri ) , get Json For Entity ( unmap Parm ) ) ; }"]}
{"ids": "10791", "code": ["public Collection < T > as Collection ( ) {", "return this . list ; }"]}
{"ids": "51024", "code": ["private static void add Quarter Arc ( Path 2 D . Float path , float x 1 , float y 1 , float x 2 , float y 2 , float curvature , boolean vertical Start ) {", "boolean down = y 1 < y 2 ;", "boolean left = x 1 > x 2 ;", "float cx 1 = NUM_ ;", "float cy 1 = NUM_ ;", "float cx 2 = NUM_ ;", "float cy 2 = NUM_ ;", "if ( vertical Start ) {", "cx 1 = x 1 ;", "cy 2 = y 2 ;", "if ( left ) {", "cx 2 = x 1 - curvature ; }", "else {", "cx 2 = x 1 + curvature ; }", "if ( down ) {", "cy 1 = y 2 - curvature ; }", "else {", "cy 1 = y 2 + curvature ; } }", "else {", "cx 2 = x 2 ;", "cy 1 = y 1 ;", "if ( left ) {", "cx 1 = x 2 + curvature ; }", "else {", "cx 1 = x 2 - curvature ; }", "if ( down ) {", "cy 2 = y 1 + curvature ; }", "else {", "cy 2 = y 1 - curvature ; } }", "path . curve To ( cx 1 , cy 1 , cx 2 , cy 2 , x 2 , y 2 ) ; }"]}
{"ids": "59699", "code": ["@ Override public void parse ( String content , Node block ) {", "this . block = block ;", "this . input = content . trim ( ) ;", "this . index = NUM_ ;", "this . last Delimiter = null ;", "this . last Bracket = null ;", "boolean more To Parse ;", "do {", "more To Parse = parse Inline ( ) ; }", "while ( more To Parse ) ;", "process Delimiters ( null ) ;", "merge Text Nodes ( block . get First Child ( ) , block . get Last Child ( ) ) ; }"]}
{"ids": "59603", "code": ["public static void random ( byte [ ] b , int offset , int length ) {", "check Position Index ( offset , b . length , STR_ ) ;", "check Argument ( length > NUM_ , STR_ ) ;", "check Position Index ( offset + length , b . length , STR_ ) ;", "byte [ ] buf = new byte [ length ] ;", "RNG . next Bytes ( buf ) ;", "System . arraycopy ( buf , NUM_ , b , offset , length ) ; }"]}
{"ids": "76627", "code": ["public void remove All Scanning Callbacks ( ) {", "scanning Callbacks . clear ( ) ; }"]}
{"ids": "52299", "code": ["public int read ( byte [ ] buf , int off , int len ) throws T Transport Exception {", "if ( input Stream == null ) {", "throw new T Transport Exception ( T Transport Exception . NOT OPEN , STR_ ) ; }", "int bytes Read ;", "try {", "bytes Read = input Stream . read ( buf , off , len ) ; }", "catch ( IO Exception iox ) {", "throw new T Transport Exception ( T Transport Exception . UNKNOWN , iox ) ; }", "if ( bytes Read < NUM_ ) {", "throw new T Transport Exception ( T Transport Exception . END OF FILE ) ; }", "return bytes Read ; }"]}
{"ids": "24199", "code": ["public void handle Manager Creation ( ) throws Management Exception {", "if ( ! is Service Initialised ( STR_ ) ) {", "return ; }", "Object Name manager M Bean Name = M Bean JMX Adapter . get Manager Name ( ) ;", "Manager M Bean Bridge bridge = new Manager M Bean Bridge ( service ) ;", "Manager MX Bean bean = new Manager M Bean ( bridge ) ;", "service . register Internal M Bean ( bean , manager M Bean Name ) ; }"]}
{"ids": "73104", "code": ["@ Suppress Warnings ( STR_ ) private boolean check Set Shape ( Shape old Shape , Shape new Shape ) {", "Shape current Shape = get Shape ( ) ;", "assert old Shape != new Shape : STR_ ;", "assert new Shape != current Shape : STR_ + current Shape ;", "assert old Shape == current Shape || old Shape . get Parent ( ) == current Shape : STR_ + STR_ + current Shape + STR_ + old Shape + STR_ + new Shape ;", "return true ; }"]}
{"ids": "6460", "code": ["protected boolean is File Visible ( File file ) {", "if ( file == null || ! file . exists ( ) || ! file . can Read ( ) || file . is Hidden ( ) ) {", "return false ; }", "return true ; }"]}
{"ids": "86695", "code": ["public static String [ ] append ( final String [ ] a , final String ... b ) {", "final int alen = a . length ;", "final int blen = b . length ;", "final String [ ] res = Arrays . copy Of ( a , alen + blen ) ;", "System . arraycopy ( b , NUM_ , res , alen , blen ) ;", "return res ; }"]}
{"ids": "15013", "code": ["public void delete ( ) throws AM Exception , SSO Exception {", "delete ( false ) ; }"]}
{"ids": "82542", "code": ["public String ( byte [ ] bytes , int off , int len , java . lang . String enc ) throws java . io . Unsupported Encoding Exception {", "this ( bytes To Chars ( bytes , off , len , enc ) ) ; }"]}
{"ids": "52799", "code": ["private boolean initialize Search Itemset ( Bit Vector bv , int [ ] scratchi , int [ ] iters ) {", "for ( int i = NUM_ ; i < scratchi . length ; i ++ ) {", "iters [ i ] = ( i == NUM_ ) ? bv . iter ( ) : bv . iter Advance ( iters [ i - NUM_ ] ) ;", "if ( iters [ i ] < NUM_ ) {", "return false ; }", "scratchi [ i ] = bv . iter Dim ( iters [ i ] ) ; }", "return true ; }"]}
{"ids": "81044", "code": ["private Rectangle compute Editor Bounds ( ) {", "if ( row == - NUM_ || column == - NUM_ ) return new Rectangle ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "Rectangle cell = grid . get Cell Bounds ( column , row ) ;", "Rectangle area = grid . get Client Area ( ) ;", "if ( cell . x < area . x + area . width ) {", "if ( cell . x + cell . width > area . x + area . width ) {", "cell . width = area . x + area . width - cell . x ; } }", "Rectangle editor Rect = new Rectangle ( cell . x , cell . y , minimum Width , minimum Height ) ;", "if ( grab Horizontal ) {", "editor Rect . width = Math . max ( cell . width , minimum Width ) ; }", "if ( grab Vertical ) {", "editor Rect . height = Math . max ( cell . height , minimum Height ) ; }", "if ( horizontal Alignment == SWT . RIGHT ) {", "editor Rect . x += cell . width - editor Rect . width ; }", "else if ( horizontal Alignment == SWT . LEFT ) { }", "else {", "editor Rect . x += ( cell . width - editor Rect . width ) / NUM_ ; }", "if ( vertical Alignment == SWT . BOTTOM ) {", "editor Rect . y += cell . height - editor Rect . height ; }", "else if ( vertical Alignment == SWT . TOP ) { }", "else {", "editor Rect . y += ( cell . height - editor Rect . height ) / NUM_ ; }", "return editor Rect ; }"]}
{"ids": "3637", "code": ["public int read ( byte [ ] buffer , int offset , int length ) throws IO Exception {", "throw new Unsupported Operation Exception ( String . value Of ( this ) ) ; }"]}
{"ids": "28708", "code": ["public Cuboid ( World world , int x 1 , int y 1 , int z 1 , int x 2 , int y 2 , int z 2 ) {", "this . world Name = world . get Name ( ) ;", "this . x 1 = Math . min ( x 1 , x 2 ) ;", "this . x 2 = Math . max ( x 1 , x 2 ) ;", "this . y 1 = Math . min ( y 1 , y 2 ) ;", "this . y 2 = Math . max ( y 1 , y 2 ) ;", "this . z 1 = Math . min ( z 1 , z 2 ) ;", "this . z 2 = Math . max ( z 1 , z 2 ) ; }"]}
{"ids": "84583", "code": ["@ Suppress Warnings ( { STR_ } ) public double log Marginal Likelihood Smoothed ( List < Double > v , double delta , double Pdata ) {", "final double log Delta = Strict Math . log ( delta ) ;", "final double log Inv Delta = Strict Math . log ( NUM_ - delta ) ;", "final int n = v . size ( ) ;", "final double log N = Strict Math . log ( n ) ;", "final double offset = log Inv Delta - Pdata ;", "double bottom = log N + log Delta - log Inv Delta ;", "double top = bottom + Pdata ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "double weight = - Log Tricks . log Sum ( log Delta , offset + v . get ( i ) ) ;", "top = Log Tricks . log Sum ( top , weight + v . get ( i ) ) ;", "bottom = Log Tricks . log Sum ( bottom , weight ) ; }", "return top - bottom ; }"]}
{"ids": "22687", "code": ["public boolean is New Message ( ) {", "if ( message == null ) {", "throw new Illegal State Exception ( STR_ ) ; }", "return message . starts With ( STR_ ) || message . equals ( STR_ ) ; }"]}
{"ids": "6584", "code": ["private void install Properties ( ) {", "System . set Property ( STR_ , User Agent Generator . get User Agent ( ) ) ;", "if ( OS Utils . is Mac OSX ( ) ) {", "System . set Property ( STR_ , STR_ ) ; } }"]}
{"ids": "76585", "code": ["private void load Recipients ( int address Type , Hash Set < String > recipients , Hash Map < Integer , Encoded String Value [ ] > address Map , boolean exclude My Number ) {", "Encoded String Value [ ] array = address Map . get ( address Type ) ;", "if ( array == null ) {", "return ; }", "if ( exclude My Number && array . length == NUM_ ) {", "return ; }", "String my Number = exclude My Number ? m Telephony Manager . get Line 1 Number ( ) : null ;", "for ( Encoded String Value v : array ) {", "if ( v != null ) {", "String number = v . get String ( ) ;", "if ( ( my Number == null || ! Phone Number Utils . compare ( number , my Number ) ) && ! recipients . contains ( number ) ) {", "recipients . add ( number ) ; } } } }"]}
{"ids": "54786", "code": ["private String script From Disk ( String name ) {", "name = name . replace ( STR_ , STR_ ) ;", "final char SEP = STR_ ;", "String pkg Part = STR_ ;", "String path Part = STR_ ;", "String name Part = STR_ ;", "int at = name . index Of ( SEP ) ;", "if ( at > - NUM_ ) {", "int next At = name . index Of ( SEP , at + NUM_ ) ;", "if ( next At > - NUM_ ) {", "path Part = name . substring ( NUM_ , at ) ;", "pkg Part = name . substring ( at + NUM_ , next At ) ;", "name Part = name . substring ( next At + NUM_ ) ; }", "else {", "path Part = name . substring ( NUM_ , at ) ;", "name Part = name . substring ( at + NUM_ ) ; } }", "else {", "at = name . last Index Of ( STR_ ) ;", "if ( at > - NUM_ ) {", "int mx = name . last Index Of ( STR_ ) ;", "if ( mx > - NUM_ ) {", "path Part = name . substring ( NUM_ , mx ) ;", "pkg Part = name . substring ( mx + NUM_ , at ) ; }", "else {", "path Part = name . substring ( NUM_ , at ) ; }", "name Part = name . substring ( at + NUM_ ) ; }", "else {", "path Part = STR_ ;", "name Part = name ; } }", "String script = null ;", "try {", "Charset real Encoding = null ;", "Charset bom Encoding = null ;", "Input Stream in = locate Script File ( path Part , pkg Part , name Part ) ;", "if ( in != null ) {", "try {", "Buffered Input Stream bis = new Buffered Input Stream ( in ) ;", "bom Encoding = get Encoding From BOM ( bis ) ;", "script = pull In Source ( bis , bom Encoding ) ;", "real Encoding = get Encoding From XML Directive ( script ) ; }", "finally {", "try {", "in . close ( ) ; }", "catch ( IO Exception e ) { } } }", "if ( real Encoding != null && ! real Encoding . equals ( bom Encoding ) ) {", "in = locate Script File ( path Part , pkg Part , name Part ) ;", "if ( in != null ) {", "try {", "Buffered Input Stream bis = new Buffered Input Stream ( in ) ;", "get Encoding From BOM ( bis ) ;", "script = pull In Source ( bis , real Encoding ) ; }", "finally {", "try {", "in . close ( ) ; }", "catch ( IO Exception e ) { } } } } }", "catch ( File Not Found Exception fnf ) {", "fnf . print Stack Trace ( ) ; }", "return script ; }"]}
{"ids": "82947", "code": ["@ Pre Persist public void pre Persist ( ) {", "lock Time = System . current Time Millis ( ) ; }"]}
{"ids": "4992", "code": ["public Lib Padstack add ( String p name , Shape Convex [ ] p shapes , boolean p attach allowed , boolean p placed absolute ) {", "int pad no = count ( ) + NUM_ ;", "Lib Padstack new padstack = new Lib Padstack ( p name , pad no , p shapes , p attach allowed , p placed absolute ) ;", "padstack list . add ( new padstack ) ;", "return new padstack ; }"]}
{"ids": "13201", "code": ["@ Override public void start Content Model ( String element Name , Augmentations augs ) throws XNI Exception {", "if ( f Validation ) {", "f DTD Element Decl Name = element Name ;", "f Mixed Element Types . clear ( ) ; }", "if ( f DTD Grammar != null ) f DTD Grammar . start Content Model ( element Name , augs ) ;", "if ( f DTD Content Model Handler != null ) {", "f DTD Content Model Handler . start Content Model ( element Name , augs ) ; } }"]}
{"ids": "11183", "code": ["public OM Range Rings ( Lat Lon Point center , double radius , Length units , int nverts ) {", "super ( center , radius , units , nverts ) ;", "center Point = create Center Point ( ) ;", "form . set Maximum Fraction Digits ( NUM_ ) ; }"]}
{"ids": "33420", "code": ["public static Input Source create Input Source ( String s ) {", "try {", "return new Input Source ( new Byte Array Input Stream ( s . get Bytes ( STR_ ) ) ) ; }", "catch ( Unsupported Encoding Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "78009", "code": ["public static String to Debug String ( final long socket Identifier ) {", "final int ip Bits = ( int ) socket Identifier ;", "final int port = extract Port Number ( socket Identifier ) ;", "final int inode = ( int ) ( socket Identifier > > NUM_ ) ;", "return Integer . to Hex String ( ip Bits ) + STR_ + port + STR_ + inode ; }"]}
{"ids": "78355", "code": ["public static String read From File ( final File path ) throws IO Exception {", "File Input Stream fis = null ;", "try {", "fis = new File Input Stream ( path ) ;", "return read From File ( fis ) ; }", "finally {", "if ( fis != null ) {", "fis . close ( ) ; } } }"]}
{"ids": "16943", "code": ["public static int X To Tile X ( int x , int tile Grid X Offset , int tile Width ) {", "x -= tile Grid X Offset ;", "if ( x < NUM_ ) {", "x += NUM_ - tile Width ; }", "return x / tile Width ; }"]}
{"ids": "69681", "code": ["public Input ( String name , @ Input Type int type , @ Alignment int align , Connection connection ) {", "m Name = name ;", "m Type = type ;", "m Align = align ;", "m Connection = connection ;", "if ( m Connection != null ) {", "m Connection . set Input ( this ) ; } }"]}
{"ids": "873", "code": ["public static Bsh Class Manager create Class Manager ( Interpreter interpreter ) {", "Bsh Class Manager manager ;", "if ( Capabilities . class Exists ( STR_ ) && Capabilities . class Exists ( STR_ ) && Capabilities . class Exists ( STR_ ) ) try {", "Class clas = Class . for Name ( STR_ ) ;", "manager = ( Bsh Class Manager ) clas . new Instance ( ) ; }", "catch ( Exception e ) {", "throw new Interpreter Error ( STR_ + e ) ; }", "else manager = new Bsh Class Manager ( ) ;", "if ( interpreter == null ) interpreter = new Interpreter ( ) ;", "manager . declaring Interpreter = interpreter ;", "return manager ; }"]}
{"ids": "71953", "code": ["public void request Last Login Time ( ) {", "operations . add ( Password Policy State Operation Type . GET LAST LOGIN TIME ) ; }"]}
{"ids": "41374", "code": ["public static Stream < String > words Of ( String text ) {", "require Non Null ( text ) ;", "return WORDS . split As Stream ( text ) ; }"]}
{"ids": "21092", "code": ["public Joiner match ( String field , Object ... value ) {", "return match ( field , Arrays . as List ( value ) ) ; }"]}
{"ids": "54649", "code": ["private String remove You Tube Markup ( String plot ) {", "if ( plot == null ) return null ;", "return plot . replace All ( STR_ , STR_ ) ; }"]}
{"ids": "20260", "code": ["private String create Dash Array String ( List < Float > dashes Array ) {", "String Builder sb = new String Builder ( ) ;", "if ( dashes Array != null ) {", "int index = NUM_ ;", "for ( Float value : dashes Array ) {", "String str = Float . to String ( value ) ;", "if ( str . ends With ( STR_ ) ) {", "sb . append ( value . int Value ( ) ) ; }", "else {", "sb . append ( value ) ; }", "if ( index < dashes Array . size ( ) - NUM_ ) {", "sb . append ( STR_ ) ; }", "index ++ ; } }", "return sb . to String ( ) ; }"]}
{"ids": "71339", "code": ["public long position ( java . sql . Blob pattern , long start ) throws SQL Exception {", "return position ( pattern . get Bytes ( NUM_ , ( int ) pattern . length ( ) ) , start ) ; }"]}
{"ids": "33973", "code": ["protected synchronized T load ( ) throws IO Exception {", "long gen Loaded = - NUM_ ;", "IO Exception ioe = null ;", "List < String > gen Files = new Array List < String > ( ) ;", "String [ ] files ;", "try {", "files = dir . list All ( ) ; }", "catch ( IO Exception ioe 2 ) {", "return null ; }", "T loaded = null ;", "for ( String file : files ) {", "if ( file . starts With ( prefix ) ) {", "long gen = Long . parse Long ( file . substring ( prefix . length ( ) ) ) ;", "if ( gen Loaded == - NUM_ || gen > gen Loaded ) {", "gen Files . add ( file ) ;", "Index Input in = dir . open Input ( file , IO Context . DEFAULT ) ;", "try {", "loaded = load One ( in ) ; }", "catch ( IO Exception ioe 2 ) {", "if ( ioe == null ) {", "ioe = ioe 2 ; } }", "finally {", "in . close ( ) ; }", "gen Loaded = gen ; } } }", "if ( gen Loaded == - NUM_ ) {", "if ( ioe != null ) {", "throw ioe ; } }", "else {", "if ( gen Files . size ( ) > NUM_ ) {", "String cur File Name = prefix + gen Loaded ;", "for ( String file : gen Files ) {", "long gen = Long . parse Long ( file . substring ( prefix . length ( ) ) ) ;", "if ( can Delete ( gen ) && ! cur File Name . equals ( file ) ) {", "dir . delete File ( file ) ; } } }", "next Write Gen = NUM_ + gen Loaded ; }", "return loaded ; }"]}
{"ids": "12262", "code": ["public static String read Line ( Input Stream in , String charset ) throws IO Exception {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "while ( true ) {", "int b = in . read ( ) ;", "if ( b == - NUM_ ) {", "if ( baos . size ( ) == NUM_ ) {", "return null ; }", "else {", "break ; } }", "if ( b == STR_ ) {", "break ; }", "if ( b != STR_ ) {", "baos . write ( b ) ;", "continue ; }", "int b 2 = in . read ( ) ;", "if ( b 2 == - NUM_ ) {", "baos . write ( b ) ;", "break ; }", "if ( b 2 == STR_ ) {", "break ; }", "baos . write ( b ) ;", "baos . write ( b 2 ) ; }", "return baos . to String ( charset ) ; }"]}
{"ids": "3150", "code": ["public boolean check Table Exists ( Table Definition table ) {", "String column = null ;", "for ( Field Definition field : table . get Fields ( ) ) {", "if ( column == null ) {", "column = field . get Name ( ) ; }", "else if ( field . is Primary Key ( ) ) {", "column = field . get Name ( ) ;", "break ; } }", "String sql = STR_ + column + STR_ + table . get Full Name ( ) + STR_ + column + STR_ + column ;", "Data Read Query query = new Data Read Query ( sql ) ;", "query . set Max Rows ( NUM_ ) ;", "try {", "session . execute Query ( query ) ;", "return true ; }", "catch ( Exception not Found ) {", "return false ; }", "finally { } }"]}
{"ids": "43110", "code": ["private int process Colon ( int length ) {", "if ( has Scheme ) {", "if ( ! read User Pass ( length ) && buffer . length ( ) > NUM_ ) {", "reader . go Back ( ) ;", "buffer . delete ( buffer . length ( ) - NUM_ , buffer . length ( ) ) ;", "int backtrack On Fail = reader . get Position ( ) - buffer . length ( ) + length ;", "if ( ! read Domain Name ( buffer . substring ( length ) ) ) {", "reader . seek ( backtrack On Fail ) ;", "read End ( Read End State . Invalid Url ) ; }", "length = NUM_ ; } }", "else if ( read Scheme ( ) && buffer . length ( ) > NUM_ ) {", "has Scheme = true ;", "length = buffer . length ( ) ; }", "else if ( buffer . length ( ) > NUM_ && options . has Flag ( Url Detector Options . ALLOW SINGLE LEVEL DOMAIN ) && reader . can Read Chars ( NUM_ ) ) {", "reader . go Back ( ) ;", "buffer . delete ( buffer . length ( ) - NUM_ , buffer . length ( ) ) ;", "read Domain Name ( buffer . to String ( ) ) ; }", "else {", "read End ( Read End State . Invalid Url ) ;", "length = NUM_ ; }", "return length ; }"]}
{"ids": "27616", "code": ["public void compress ( byte [ ] bytes , int off , int len , Output Stream os ) {", "try {", "os . write ( bytes , off , len ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "27443", "code": ["public void assert Not Joined ( final UUID service Id ) {", "m triggers . add ( new Quorum Event Invariant ( Quorum Event Enum . SERVICE JOIN , service Id ) ) ;", "if ( is Member ( m quorum . get Joined ( ) , service Id ) ) broken ( ) ; }"]}
{"ids": "5103", "code": ["public final void print ( String value ) {", "try {", "Element root Element = work Doc . get Default Root Element ( ) ;", "int delete Lines = root Element . get Element Count ( ) - lines Max ;", "for ( int index = NUM_ ; index < delete Lines ; index ++ ) {", "Element elem = root Element . get Element ( NUM_ ) ;", "work Doc . remove ( elem . get Start Offset ( ) , elem . get End Offset ( ) ) ; }", "work Doc . insert String ( work Doc . get Length ( ) , value , null ) ;", "text Area . set Caret Position ( work Doc . get Length ( ) ) ; }", "catch ( Exception exc ) {", "exc . print Stack Trace ( ) ; } }"]}
{"ids": "83509", "code": ["private void add Connection Groups ( Collection < Connection Group > connection Groups ) {", "for ( Connection Group connection Group : connection Groups ) {", "API Connection Group parent = retrieved Groups . get ( connection Group . get Parent Identifier ( ) ) ;", "if ( parent != null ) {", "Collection < API Connection Group > children = parent . get Child Connection Groups ( ) ;", "if ( children == null ) {", "children = new Array List < API Connection Group > ( ) ;", "parent . set Child Connection Groups ( children ) ; }", "API Connection Group api Connection Group = new API Connection Group ( connection Group ) ;", "retrieved Groups . put ( connection Group . get Identifier ( ) , api Connection Group ) ;", "children . add ( api Connection Group ) ; }", "else logger . debug ( STR_ , connection Group . get Identifier ( ) , connection Group . get Parent Identifier ( ) ) ; } }"]}
{"ids": "53518", "code": ["public void load Map ( Input Stream input , String group ID ) throws Exception {", "shapes = parser . parse ( input , group ID ) ;", "boundaries = new Array List < Rect 2 D > ( shapes . size ( ) ) ;", "for ( I Geometric 2 D shape : shapes ) {", "boundaries . add ( shape . get Bounds ( ) ) ; } }"]}
{"ids": "39460", "code": ["public void add Decoration ( Line Decoration decoration ) {", "if ( decoration != null ) {", "decorations . add ( decoration ) ; } }"]}
{"ids": "59705", "code": ["private String parse Link Title ( ) {", "String title = match ( LINK TITLE ) ;", "if ( title != null ) {", "return Escaping . unescape String ( title . substring ( NUM_ , title . length ( ) - NUM_ ) ) ; }", "else {", "return null ; } }"]}
{"ids": "53241", "code": ["@ Override public void put ( double val ) {", "final double nn = this . n + NUM_ ;", "final double delta = val - m 1 ;", "final double delta nn = delta / nn ;", "final double delta nn 2 = delta nn * delta nn ;", "final double inc = delta * delta nn * this . n ;", "m 4 += inc * delta nn 2 * ( nn * nn - NUM_ * nn + NUM_ ) + NUM_ * delta nn 2 * m 2 - NUM_ * delta nn * m 3 ;", "m 3 += inc * delta nn * ( nn - NUM_ ) - NUM_ * delta nn * m 2 ;", "m 2 += inc ;", "m 1 += delta nn ;", "n = nn ;", "min = Math . min ( min , val ) ;", "max = Math . max ( max , val ) ; }"]}
{"ids": "52636", "code": ["public void close ( ) {", "this . closed = true ; }"]}
{"ids": "75742", "code": ["public int size ( ) {", "return m Recent Items . size ( ) ; }"]}
{"ids": "85408", "code": ["public Destructurer ( final Tree . Pattern that , final Generate Js Visitor gen , final Set < Declaration > direct Access , final String expvar , boolean first , final boolean for Assert ) {", "this . gen = gen ;", "jsw = gen == null ? null : gen . out ;", "names = gen == null ? null : gen . get Names ( ) ;", "this . direct Access = direct Access ;", "this . expvar = expvar ;", "this . first = first ;", "this . for Assert = for Assert ;", "that . visit ( this ) ;", "if ( jsw != null && ! attribs . is Empty ( ) ) {", "for ( Value attr : attribs ) {", "jsw . write ( STR_ , names . self ( ( Type Declaration ) attr . get Container ( ) ) , STR_ , names . name ( attr ) , STR_ , names . name ( attr ) ) ; } } }"]}
{"ids": "13847", "code": ["@ Suppress Warnings ( STR_ ) public void handle Tbl Sub Config Button Delete Request ( Request Invocation Event event ) throws Model Control Exception {", "submit Cycle = true ;", "CC Action Table tbl = ( CC Action Table ) get Child ( TBL SUB CONFIG ) ;", "tbl . restore State Data ( ) ;", "CC Action Table Model tbl Model = ( CC Action Table Model ) tbl . get Model ( ) ;", "Integer [ ] selected = tbl Model . get Selected Rows ( ) ;", "Serialized Field sz Cache = ( Serialized Field ) get Child ( SZ CACHE ) ;", "List list = sz Cache . get Serialized Obj ( ) ;", "Set < String > names = new Hash Set < > ( selected . length * NUM_ ) ;", "for ( Integer index : selected ) {", "SM Sub Config sc = ( SM Sub Config ) list . get ( index ) ;", "names . add ( sc . get Name ( ) ) ; }", "try {", "Abstract Audit Model model = ( Abstract Audit Model ) get Model ( ) ;", "model . delete Event Handles ( names ) ;", "if ( selected . length == NUM_ ) {", "set Inline Alert Message ( TYPE INFO , INFORMATION MESSAGE , STR_ ) ; }", "else {", "set Inline Alert Message ( TYPE INFO , INFORMATION MESSAGE , STR_ ) ; } }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( TYPE ERROR , ERROR MESSAGE , e . get Message ( ) ) ; }", "submit Cycle = false ;", "forward To ( ) ; }"]}
{"ids": "43022", "code": ["private double norm Vector ( double [ ] z ) {", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < problem . get Number Of Objectives ( ) ; i ++ ) {", "sum += z [ i ] * z [ i ] ; }", "return Math . sqrt ( sum ) ; }"]}
{"ids": "52111", "code": ["public int hash Code ( ) {", "return NUM_ * factor . hash Code ( ) + lag ; }"]}
{"ids": "52071", "code": ["public void deserialize Archived Versions ( ) throws Runtime Exception {", "System . out . println ( STR_ + get Archive Directory ( ) + STR_ ) ;", "File archive = new File ( get Archive Directory ( ) ) ;", "if ( ! archive . exists ( ) || ! archive . is Directory ( ) ) {", "return ; }", "String [ ] listing = archive . list ( ) ;", "for ( String archive Name : listing ) {", "if ( ! ( archive Name . ends With ( STR_ ) ) ) {", "continue ; }", "try {", "File file = new File ( get Archive Directory ( ) , archive Name ) ;", "Zip File zip File = new Zip File ( file ) ;", "Zip Entry entry = zip File . get Entry ( STR_ ) ;", "Input Stream input Stream = zip File . get Input Stream ( entry ) ;", "Object Input Stream object In = new Object Input Stream ( input Stream ) ;", "Map < String , List < String > > class Fields = ( Map < String , List < String > > ) object In . read Object ( ) ;", "zip File . close ( ) ;", "for ( String class Name : class Fields . key Set ( ) ) {", "List < String > field Names = class Fields . get ( class Name ) ;", "Class < ? > clazz = Class . for Name ( class Name ) ;", "Object Stream Class stream Class = Object Stream Class . lookup ( clazz ) ;", "if ( stream Class == null ) {", "System . out . println ( ) ; }", "for ( String field Name : field Names ) {", "assert stream Class != null ;", "Object Stream Field field = stream Class . get Field ( field Name ) ;", "if ( field == null ) {", "throw new Runtime Exception ( STR_ + field Name + STR_ + class Name + STR_ + STR_ + STR_ + class Name + STR_ + archive Name + STR_ ) ; } } } }", "catch ( Class Not Found Exception e ) {", "throw new Runtime Exception ( STR_ + archive Name + STR_ , e ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ + archive Name + STR_ , e ) ; }", "System . out . println ( STR_ + archive Name + STR_ ) ;", "Zip Entry zip Entry = null ;", "try {", "File file = new File ( get Archive Directory ( ) , archive Name ) ;", "File Input Stream in = new File Input Stream ( file ) ;", "Zip Input Stream zipinputstream = new Zip Input Stream ( in ) ;", "while ( ( zip Entry = zipinputstream . get Next Entry ( ) ) != null ) {", "if ( ! zip Entry . get Name ( ) . ends With ( STR_ ) ) {", "continue ; }", "Object Input Stream object In = new Object Input Stream ( zipinputstream ) ;", "object In . read Object ( ) ;", "zipinputstream . close Entry ( ) ; }", "zipinputstream . close ( ) ; }", "catch ( Class Not Found Exception e ) {", "throw new Runtime Exception ( STR_ + zip Entry . get Name ( ) + STR_ + archive Name + STR_ + STR_ + STR_ , e ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ + archive Name + STR_ , e ) ; } }", "System . out . println ( STR_ ) ; }"]}
{"ids": "71177", "code": ["private void convert Maximal To Minimal Edge Rings ( List ring Edges ) {", "for ( Iterator i = ring Edges . iterator ( ) ; i . has Next ( ) ; ) {", "Polygonize Directed Edge de = ( Polygonize Directed Edge ) i . next ( ) ;", "long label = de . get Label ( ) ;", "List int Nodes = find Intersection Nodes ( de , label ) ;", "if ( int Nodes == null ) continue ;", "for ( Iterator i Node = int Nodes . iterator ( ) ; i Node . has Next ( ) ; ) {", "Node node = ( Node ) i Node . next ( ) ;", "compute Next CCW Edges ( node , label ) ; } } }"]}
{"ids": "86502", "code": ["public byte [ ] generate MAC ( byte command Class , byte [ ] ciphertext , byte sending Node , byte receiving Node , byte [ ] iv ) throws General Security Exception {", "trace Hex ( STR_ , ciphertext ) ;", "trace Hex ( STR_ , iv ) ;", "int buffer Size = ciphertext . length + NUM_ ;", "byte [ ] buffer = new byte [ buffer Size ] ;", "byte [ ] temp Auth = new byte [ NUM_ ] ;", "buffer [ NUM_ ] = command Class ;", "buffer [ NUM_ ] = sending Node ;", "buffer [ NUM_ ] = receiving Node ;", "buffer [ NUM_ ] = ( byte ) ciphertext . length ;", "System . arraycopy ( ciphertext , NUM_ , buffer , NUM_ , ciphertext . length ) ;", "trace Hex ( STR_ , network Key . get Encoded ( ) ) ;", "trace Hex ( STR_ , buffer ) ;", "Cipher encrypt Cipher = Cipher . get Instance ( STR_ ) ;", "encrypt Cipher . init ( Cipher . ENCRYPT MODE , auth Key ) ;", "temp Auth = encrypt Cipher . do Final ( iv ) ;", "trace Hex ( STR_ , temp Auth ) ;", "byte [ ] encpck = new byte [ NUM_ ] ;", "int block = NUM_ ;", "for ( int i = NUM_ ; i < buffer Size ; i ++ ) {", "encpck [ block ] = buffer [ i ] ;", "block ++ ;", "if ( block == NUM_ ) {", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "temp Auth [ j ] = ( byte ) ( encpck [ j ] ^ temp Auth [ j ] ) ;", "encpck [ j ] = NUM_ ; }", "Arrays . fill ( encpck , ( byte ) NUM_ ) ;", "block = NUM_ ;", "encrypt Cipher . init ( Cipher . ENCRYPT MODE , auth Key ) ;", "temp Auth = encrypt Cipher . do Final ( temp Auth ) ; } }", "if ( block > NUM_ ) {", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "temp Auth [ i ] = ( byte ) ( encpck [ i ] ^ temp Auth [ i ] ) ; }", "encrypt Cipher . init ( Cipher . ENCRYPT MODE , auth Key ) ;", "temp Auth = encrypt Cipher . do Final ( temp Auth ) ; }", "trace Hex ( STR_ , temp Auth ) ;", "byte [ ] mac = new byte [ NUM_ ] ;", "System . arraycopy ( temp Auth , NUM_ , mac , NUM_ , NUM_ ) ;", "return mac ; }"]}
{"ids": "23037", "code": ["public void remove Event Listener ( Image Sharing Listener listener ) throws Rcs Service Not Available Exception , Rcs Generic Exception {", "if ( m Api == null ) {", "throw new Rcs Service Not Available Exception ( ) ; }", "try {", "Weak Reference < I Image Sharing Listener > weak Ref = m Image Sharing Listeners . remove ( listener ) ;", "if ( weak Ref == null ) {", "return ; }", "I Image Sharing Listener rcs Listener = weak Ref . get ( ) ;", "if ( rcs Listener != null ) {", "m Api . remove Event Listener 2 ( rcs Listener ) ; } }", "catch ( Exception e ) {", "Rcs Illegal Argument Exception . assert Exception ( e ) ;", "throw new Rcs Generic Exception ( e ) ; } }"]}
{"ids": "64769", "code": ["private void update Wave File Size ( ) throws IO Exception {", "Byte Buffer buffer = get Unsigned Integer Buffer ( m File Channel . size ( ) - NUM_ ) ;", "m File Channel . write ( buffer , NUM_ ) ;", "Byte Buffer buffer 2 = get Unsigned Integer Buffer ( m File Channel . size ( ) - NUM_ ) ;", "m File Channel . write ( buffer 2 , NUM_ ) ; }"]}
{"ids": "3493", "code": ["public boolean matches ( String sa ) {", "if ( length != sa . length ( ) ) return false ;", "char [ ] buffer = buffer ;", "int offset = offset ;", "for ( int i = length - NUM_ ; i >= NUM_ ; i -- ) if ( buffer [ offset + i ] != sa . char At ( i ) ) return false ;", "return true ; }"]}
{"ids": "20696", "code": ["public double compute Max Class Value Using Percent Factor Per Series ( Default Chart Data chart Data , String [ ] series , double [ ] percent Factor Per Series ) {", "double max Value = NUM_ ;", "for ( String class Name : chart Data . get Class Names Including Disabled ( ) ) {", "double total = NUM_ ;", "for ( int i = NUM_ ; i < series . length ; i ++ ) {", "String series Name = series [ i ] ;", "if ( transposed Heights Additive ) total += percent Factor Per Series [ i ] * chart Data . get Value As Double ( series Name , class Name ) ;", "else total = Math . max ( total , percent Factor Per Series [ i ] * chart Data . get Value As Double ( series Name , class Name ) ) ; }", "if ( total > max Value ) {", "max Value = total ; } }", "return NUM_ * max Value ; }"]}
{"ids": "64859", "code": ["public int add Channel ( Channel channel ) {", "int index = - NUM_ ;", "switch ( channel . get Channel Type ( ) ) {", "case STANDARD :", "m Channels . add ( channel ) ;", "index = m Channels . size ( ) - NUM_ ;", "fire Table Rows Inserted ( index , index ) ;", "break ;", "case TRAFFIC :", "m Traffic Channels . add ( channel ) ;", "index = m Channels . size ( ) - NUM_ ;", "break ;", "default :", "break ; }", "broadcast ( new Channel Event ( channel , Event . NOTIFICATION ADD ) ) ;", "if ( channel . get Enabled ( ) ) {", "broadcast ( new Channel Event ( channel , Event . REQUEST ENABLE ) ) ; }", "return index ; }"]}
{"ids": "10248", "code": ["public static String join ( Object ... array ) {", "if ( array == null ) {", "return null ; }", "if ( array . length == NUM_ ) {", "return String Pool . EMPTY ; }", "if ( array . length == NUM_ ) {", "return String . value Of ( array [ NUM_ ] ) ; }", "final String Builder sb = new String Builder ( array . length * NUM_ ) ;", "for ( int i = NUM_ ; i < array . length ; i ++ ) {", "sb . append ( array [ i ] ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "55748", "code": ["public boolean has Trait ( final Store Trait store Trait ) {", "final Set < Store Trait > traits = get Traits ( ) ;", "return null != traits && traits . contains ( store Trait ) ; }"]}
{"ids": "66595", "code": ["public void create Supply ( MWM In Out Bound Line boundline , Big Decimal qty Supply ) {", "M Product product = M Product . get ( boundline . get Ctx ( ) , boundline . get M Product ID ( ) ) ;", "if ( product . is BOM ( ) ) {", "create MO ( boundline , product , qty Supply ) ; }", "else if ( product . is Purchased ( ) ) {", "create Requisition ( boundline , product , qty Supply ) ; } }"]}
{"ids": "26759", "code": ["public int size ( ) {", "return parameters . size ( ) ; }"]}
{"ids": "83719", "code": ["public void read Data ( Data Input din ) throws IO Exception {", "reference = din . read Unsigned Short ( ) ; }"]}
{"ids": "62722", "code": ["public float dot Product ( Dense Vector df ) {", "float res = NUM_ ;", "for ( int i = NUM_ ; i < Math . min ( size , df . get Length ( ) ) ; i ++ ) {", "res += u [ i ] * df . u [ i ] ; }", "return res ; }"]}
{"ids": "22773", "code": ["public static double st Dev ( final List < Double > list ) {", "return Math . sqrt ( variance ( list ) ) ; }"]}
{"ids": "10191", "code": ["public void trim To Size ( ) {", "if ( size < array . length ) {", "int [ ] olddata = array ;", "array = new int [ size ] ;", "System . arraycopy ( olddata , NUM_ , array , NUM_ , size ) ; } }"]}
{"ids": "1423", "code": ["public static int compare ( Date left , boolean right ) {", "return compare ( left , right ? NUM_ : NUM_ ) ; }"]}
{"ids": "27279", "code": ["private I Binding Set [ ] decode Next Chunk ( ) throws IO Exception {", "if ( nsolutions == solution Set Count ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + name + STR_ + nsolutions ) ;", "return null ; }", "in . read Int ( ) ;", "final int chunk Size = in . read Int ( ) ;", "final int byte Length = in . read Int ( ) ;", "final byte [ ] a = new byte [ byte Length ] ;", "in . read Fully ( a ) ;", "final Data Input Buffer buf = new Data Input Buffer ( a ) ;", "final I Binding Set [ ] t = new I Binding Set [ chunk Size ] ;", "for ( int i = NUM_ ; i < chunk Size ; i ++ ) {", "t [ i ] = decoder . decode Solution ( buf , true ) ;", "if ( log . is Trace Enabled ( ) ) log . trace ( STR_ + name + STR_ + t [ i ] ) ; }", "nsolutions += chunk Size ;", "if ( log . is Trace Enabled ( ) ) log . trace ( STR_ + name + STR_ + chunk Size + STR_ + ( Solution Set Stream Encoder . CHUNK HEADER SIZE + byte Length ) + STR_ + nsolutions ) ;", "return t ; }"]}
{"ids": "43578", "code": ["public UDP Client Socket ( Logger logger ) {", "this . logger = logger ;", "try {", "socket = new Datagram Socket ( ) ;", "socket . set Broadcast ( true ) ;", "socket . set Send Buffer Size ( NUM_ * NUM_ * NUM_ ) ;", "socket . set Receive Buffer Size ( NUM_ * NUM_ * NUM_ ) ;", "socket . set So Timeout ( NUM_ ) ; }", "catch ( Socket Exception e ) {", "logger . severe ( STR_ ) ;", "logger . severe ( STR_ + e . get Message ( ) ) ;", "System . exit ( NUM_ ) ; } }"]}
{"ids": "32563", "code": ["public void multiply All Values By ( final double multiply By , final int Round Type ) {", "for ( final T t : key Set ( ) ) {", "double val = map Values . get ( t ) ;", "switch ( Round Type ) {", "case NUM_ :", "val = Math . floor ( val * multiply By ) ;", "break ;", "case NUM_ :", "val = Math . round ( val * multiply By ) ;", "break ;", "case NUM_ :", "val = Math . ceil ( val * multiply By ) ;", "break ;", "default :", "val = val * multiply By ;", "break ; }", "put ( t , ( int ) val ) ; } }"]}
{"ids": "81282", "code": ["protected void compute Folder Children ( File folder , boolean is Included , String [ ] pkg Name , Array List v Children , char [ ] [ ] inclusion Patterns , char [ ] [ ] exclusion Patterns ) throws Java Model Exception {", "if ( is Included ) {", "I Package Fragment pkg = get Package Fragment ( pkg Name ) ;", "v Children . add ( pkg ) ; }", "try {", "File [ ] members = folder . list Files ( ) ;", "boolean has Included = is Included ;", "int length = members . length ;", "if ( length > NUM_ ) {", "Java Project java Project = ( Java Project ) get Java Project ( ) ;", "String source Level = java Project . get Option ( Java Core . COMPILER SOURCE , true ) ;", "String compliance Level = java Project . get Option ( Java Core . COMPILER COMPLIANCE , true ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "File member = members [ i ] ;", "String member Name = member . get Name ( ) ;", "if ( member . is Directory ( ) ) {", "if ( Util . is Valid Folder Name For Package ( member Name , source Level , compliance Level ) ) {", "String [ ] new Names = Util . array Concat ( pkg Name , manager . intern ( member Name ) ) ;", "boolean is Member Included = false ;", "compute Folder Children ( member , is Member Included , new Names , v Children , inclusion Patterns , exclusion Patterns ) ; } }", "else {", "if ( ! has Included && Util . is Valid Compilation Unit Name ( member Name , source Level , compliance Level ) ) {", "has Included = true ;", "I Package Fragment pkg = get Package Fragment ( pkg Name ) ;", "v Children . add ( pkg ) ; } } } } }", "catch ( Illegal Argument Exception e ) {", "throw new Java Model Exception ( e , I Java Model Status Constants . ELEMENT DOES NOT EXIST ) ; }", "catch ( Core Exception e ) {", "throw new Java Model Exception ( e ) ; } }"]}
{"ids": "343", "code": ["public static String quote ( File input ) {", "return quote ( input . get Absolute Path ( ) ) ; }"]}
{"ids": "31994", "code": ["private void read From Net ( ) throws Ignite Checked Exception {", "try {", "in Net Buf . clear ( ) ;", "int read = ch . read ( in Net Buf ) ;", "if ( read == - NUM_ ) throw new Ignite Checked Exception ( STR_ ) ; }", "catch ( IO Exception e ) {", "throw new Ignite Checked Exception ( STR_ , e ) ; } }"]}
{"ids": "56370", "code": ["synchronized void clear ( ) {", "maps = new Maps ( ) ;", "tombstones . clear ( ) ;", "ram Bytes Used Current . set ( NUM_ ) ;", "if ( mgr != null ) {", "mgr . remove Listener ( this ) ;", "mgr = null ; } }"]}
{"ids": "47771", "code": ["public synchronized void remove Consumer ( Image Consumer ic ) {", "ics . remove Element ( ic ) ; }"]}
{"ids": "70948", "code": ["private void update Aperture ( int new Value , long now ) {", "int previous = target Aperture ;", "target Aperture = new Value ;", "target Aperture = Math . max ( min Aperture , target Aperture ) ;", "int max Aperture = Math . min ( this . max Aperture , active Sockets . size ( ) + active Factories . size ( ) ) ;", "target Aperture = Math . min ( max Aperture , target Aperture ) ;", "last Aperture Refresh = now ;", "pendings . reset ( ( min Pendings + max Pendings ) / NUM_ ) ;", "if ( target Aperture != previous ) {", "logger . debug ( STR_ , pendings . value ( ) , target Aperture , previous ) ; } }"]}
{"ids": "3544", "code": ["public I build Invocation ( Object protocol Key , I invocation ) throws Config Exception {", "Objects . require Non Null ( invocation ) ;", "invocation = build Invocation ( invocation ) ;", "Lru Cache < Object , I > invocation Cache = invocation Cache ;", "if ( invocation Cache != null ) {", "I old Invocation ;", "old Invocation = invocation Cache . get ( protocol Key ) ;", "if ( old Invocation != null && ! old Invocation . is Modified ( ) ) {", "return old Invocation ; }", "if ( invocation . get URL Length ( ) < max URL Length ) {", "invocation Cache . put ( protocol Key , invocation ) ; } }", "return invocation ; }"]}
{"ids": "64852", "code": ["public static Binary Message check And Correct ( Binary Message message , int start Index ) {", "boolean parity Error = message . cardinality ( ) % NUM_ != NUM_ ;", "int syndrome = get Syndrome ( message , start Index ) ;", "if ( syndrome == NUM_ ) {", "if ( parity Error ) {", "message . flip ( start Index + NUM_ ) ; }", "message . set CRC ( CRC . PASSED ) ;", "return message ; }", "int original = message . get Int ( NUM_ , NUM_ ) ;", "int index = - NUM_ ;", "int syndrome Weight = NUM_ ;", "int errors = NUM_ ;", "while ( index < NUM_ ) {", "if ( index != - NUM_ ) {", "if ( index > NUM_ ) {", "message . flip ( index - NUM_ ) ; }", "message . flip ( index ) ;", "syndrome Weight = NUM_ ; }", "syndrome = get Syndrome ( message , start Index ) ;", "if ( syndrome > NUM_ ) {", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "errors = Integer . bit Count ( syndrome ) ;", "if ( errors <= syndrome Weight ) {", "message . xor ( NUM_ , NUM_ , syndrome ) ;", "message . rotate Right ( i , start Index , start Index + NUM_ ) ;", "if ( index >= NUM_ ) {", "errors ++ ; }", "int corrected = message . get Int ( NUM_ , NUM_ ) ;", "if ( Integer . bit Count ( original ^ corrected ) > NUM_ ) {", "message . set CRC ( CRC . FAILED CRC ) ;", "return message ; }", "message . set CRC ( CRC . PASSED ) ;", "return message ; }", "else {", "message . rotate Left ( start Index , start Index + NUM_ ) ;", "syndrome = get Syndrome ( message , start Index ) ; } }", "index ++ ; } }", "message . set CRC ( CRC . FAILED CRC ) ;", "return message ; }"]}
{"ids": "7334", "code": ["public static List < Object > validate And Evaluate ( String view Name , Statement Context statement Context , List < Expr Node > expressions ) throws View Parameter Exception {", "List < Object > results = new Array List < Object > ( ) ;", "int expression Number = NUM_ ;", "Stream Type Service stream Type Service = new Stream Type Service Impl ( statement Context . get Engine URI ( ) , false ) ;", "for ( Expr Node expr : expressions ) {", "Object result = validate And Evaluate Expr ( view Name , statement Context , expr , stream Type Service , expression Number ) ;", "results . add ( result ) ;", "expression Number ++ ; }", "return results ; }"]}
{"ids": "60284", "code": ["@ Not Null public static String parse Relative Directory ( @ Not Null String s ) throws Svn Bind Exception {", "s = s . trim ( ) ;", "int length = s . length ( ) ;", "String result ;", "if ( is Unescaped Quote ( s , length - NUM_ ) ) {", "int index = last Unescaped Index Of ( s , length - NUM_ , STR_ ) ;", "assert Index ( s , index , STR_ ) ;", "result = s . substring ( index + NUM_ , length - NUM_ ) ; }", "else {", "int index = last Unescaped Index Of ( s , length , STR_ ) ;", "assert Index ( s , index , STR_ ) ;", "result = s . substring ( index + NUM_ ) ; }", "return unescape ( result ) ; }"]}
{"ids": "13852", "code": ["public void begin Display ( Display Event event ) throws Model Control Exception {", "Identity Subject Model subject Model = get Subject Model ( ) ;", "Policy Model model = ( Policy Model ) get Model ( ) ;", "super . begin Display ( event ) ;", "CC Drop Down Menu menu = ( CC Drop Down Menu ) get Child ( FILTER TYPE ) ;", "Map supported Entity Types = model . get Supported Entity Types ( realm Name ) ;", "Option List entity Types = create Option List ( supported Entity Types ) ;", "entity Types . add ( NUM_ , STR_ , STR_ ) ;", "menu . set Options ( entity Types ) ;", "menu . set Value ( STR_ ) ;", "CC Add Remove child = ( CC Add Remove ) get Child ( VALUES MULTIPLE CHOICE VALUE ) ;", "child . restore State Data ( ) ;", "Option List selected = add Remove Model . get Selected Option List ( ) ;", "Option List possible = helper . create Option List ( model . get User SSO Token ( ) , model . get User Locale ( ) , this , get Possible Values ( subject Model , realm Name ) ) ;", "child . reset State Data ( ) ;", "add Remove Model . set Available Option List ( possible ) ; }"]}
{"ids": "25673", "code": ["private void decode 64 ( Byte Buffer infile , Long Array Pointer a ) {", "byte [ ] nbitplanes = new byte [ N 03 ] ;", "byte [ ] tmagic = new byte [ NUM_ ] ;", "infile . get ( tmagic ) ;", "if ( tmagic [ NUM_ ] != CODE MAGIC [ NUM_ ] || tmagic [ NUM_ ] != CODE MAGIC [ NUM_ ] ) {", "throw new Runtime Exception ( STR_ ) ; }", "this . nx = infile . get Int ( ) ;", "this . ny = infile . get Int ( ) ;", "this . scale = infile . get Int ( ) ;", "long sumall = infile . get Long ( ) ;", "infile . get ( nbitplanes ) ;", "dodecode 64 ( infile , a , nbitplanes ) ;", "a . set ( NUM_ , sumall ) ; }"]}
{"ids": "63482", "code": ["private static void create Script ( ) throws Exception {", "Class . for Name ( STR_ ) ;", "Connection conn = Driver Manager . get Connection ( STR_ ) ;", "Statement stat = conn . create Statement ( ) ;", "stat . execute ( STR_ ) ;", "stat . execute ( STR_ ) ;", "stat . execute ( STR_ ) ;", "stat . close ( ) ;", "conn . close ( ) ; }"]}
{"ids": "33645", "code": ["public void add Job Group To Never Delete ( String group ) {", "if ( group != null ) job Groups To Never Delete . add ( group ) ; }"]}
{"ids": "3466", "code": ["@ Override public void request Poll Read ( ) {", "try {", "request Loop ( ) ; }", "catch ( Exception e ) {", "log . log ( Level . WARNING , e . to String ( ) , e ) ; } }"]}
{"ids": "56385", "code": ["public Multi Match Query Builder field ( String field ) {", "fields . add ( field ) ;", "return this ; }"]}
{"ids": "15872", "code": ["void encode ( Output Stream os , boolean include h ) throws IO Exception {", "int q = params . q ;", "os . write ( get Encoded ( f ) ) ;", "if ( params . basis Type == NTRU Signing Key Generation Parameters . BASIS TYPE STANDARD ) {", "Integer Polynomial f Prime Int = f Prime . to Integer Polynomial ( ) ;", "for ( int i = NUM_ ; i < f Prime Int . coeffs . length ; i ++ ) {", "f Prime Int . coeffs [ i ] += q / NUM_ ; }", "os . write ( f Prime Int . to Binary ( q ) ) ; }", "else {", "os . write ( get Encoded ( f Prime ) ) ; }", "if ( include h ) {", "os . write ( h . to Binary ( q ) ) ; } }"]}
{"ids": "32146", "code": ["private void signal No Acks ( ) {", "lock . lock ( ) ;", "try {", "all Acks Rcv Cond . signal All ( ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "80400", "code": ["private static String array To String ( int [ ] array ) {", "String Builder sb = new String Builder ( ) ;", "boolean first = true ;", "for ( int i : array ) {", "if ( first ) {", "first = false ; }", "else {", "sb . append ( STR_ ) ; }", "sb . append ( i ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "63175", "code": ["public static byte [ ] copy ( byte [ ] source , byte [ ] target ) {", "int len = source . length ;", "if ( len > target . length ) {", "target = new byte [ len ] ; }", "System . arraycopy ( source , NUM_ , target , NUM_ , len ) ;", "return target ; }"]}
{"ids": "9477", "code": ["public double great Circle Distance ( Location location ) {", "if ( location == null ) {", "throw new Illegal Argument Exception ( Logger . log Message ( Logger . ERROR , STR_ , STR_ , STR_ ) ) ; }", "double lat 1 Radians = Math . to Radians ( this . latitude ) ;", "double lon 1 Radians = Math . to Radians ( this . longitude ) ;", "double lat 2 Radians = Math . to Radians ( location . latitude ) ;", "double lon 2 Radians = Math . to Radians ( location . longitude ) ;", "if ( lat 1 Radians == lat 2 Radians && lon 1 Radians == lon 2 Radians ) {", "return NUM_ ; }", "double a = Math . sin ( ( lat 2 Radians - lat 1 Radians ) / NUM_ ) ;", "double b = Math . sin ( ( lon 2 Radians - lon 1 Radians ) / NUM_ ) ;", "double c = a * a + Math . cos ( lat 1 Radians ) * Math . cos ( lat 2 Radians ) * b * b ;", "double distance Radians = NUM_ * Math . asin ( Math . sqrt ( c ) ) ;", "return Double . is Na N ( distance Radians ) ? NUM_ : distance Radians ; }"]}
{"ids": "36418", "code": ["public void fire Operator Moved ( Operator operator ) {", "List < Operator > list = new Linked List < > ( ) ;", "list . add ( operator ) ;", "fire Operators Moved ( list ) ; }"]}
{"ids": "62015", "code": ["@ Override public void modify Variable Id ( String old Id , String new Id ) {", "if ( base Var . equals ( old Id ) ) {", "base Var = new Id . replace ( STR_ , STR_ ) ; } }"]}
{"ids": "38254", "code": ["public Add User Fields ( ) {", "m attribute Specs = new Array List < Attribute Spec > ( ) ; }"]}
{"ids": "55088", "code": ["private Integer parse Int ( String s , int flags ) {", "if ( convert Color Names ( flags ) ) {", "String c = Descriptor . convert Color Name ( s ) ;", "if ( c != null ) {", "s = c ; } }", "try {", "if ( has Leading Zeros ( s ) ) {", "return null ; }", "else {", "return Integer . decode ( s ) ; } }", "catch ( Number Format Exception e ) {", "return null ; } }"]}
{"ids": "75224", "code": ["protected void stop Workers ( Collection < Worker Thread > workers ) {", "if ( workers == null ) {", "workers = this . workers ; }", "final Iterator < Worker Thread > iter = workers . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "final Worker Thread worker = iter . next ( ) ;", "if ( ( worker . get Status ( ) & ( Worker Thread . s ENDED | Worker Thread . s ENDING ) ) == NUM_ ) {", "worker . signal Shutdown ( ) ;", "running Workers -- ; } } }"]}
{"ids": "55051", "code": ["public Array List < Mapping > clone Frame ( ) {", "if ( stack [ top ] == null ) return null ;", "Array List < Mapping > clone = new Array List < Mapping > ( ) ;", "for ( Mapping map = top Of Frame ( ) ; map != null ; map = next ( ) ) {", "clone . add ( map ) ; }", "return clone ; }"]}
{"ids": "53987", "code": ["private static int compute Hash Code ( int seed , Object ... objects ) {", "if ( objects == null || objects . length == NUM_ ) {", "return seed * Hash Code . PRIME ; }", "int hc = seed ;", "for ( Object object : objects ) {", "hc = Hash Code . PRIME * hc ;", "if ( object instanceof byte [ ] ) {", "hc += Arrays . hash Code ( ( byte [ ] ) object ) ; }", "else if ( object instanceof boolean [ ] ) {", "hc += Arrays . hash Code ( ( boolean [ ] ) object ) ; }", "else if ( object instanceof short [ ] ) {", "hc += Arrays . hash Code ( ( short [ ] ) object ) ; }", "else if ( object instanceof int [ ] ) {", "hc += Arrays . hash Code ( ( int [ ] ) object ) ; }", "else if ( object instanceof long [ ] ) {", "hc += Arrays . hash Code ( ( long [ ] ) object ) ; }", "else if ( object instanceof float [ ] ) {", "hc += Arrays . hash Code ( ( float [ ] ) object ) ; }", "else if ( object instanceof double [ ] ) {", "hc += Arrays . hash Code ( ( double [ ] ) object ) ; }", "else if ( object instanceof char [ ] ) {", "hc += Arrays . hash Code ( ( char [ ] ) object ) ; }", "else if ( object instanceof Object [ ] ) {", "hc += Arrays . hash Code ( ( Object [ ] ) object ) ; }", "else if ( object != null ) {", "hc += object . hash Code ( ) ; } }", "return hc ; }"]}
{"ids": "61852", "code": ["protected float calculate State Transition Percentage ( String name , boolean flapping ) {", "int flap Interval = get Flap Interval ( name ) ;", "Linked List < Boolean > list = get Flaps ( name ) ;", "float low Weight = get Flap Low Weight ( name ) ;", "float high Weight = get Flap High Weight ( name ) ;", "float weight Range = high Weight - low Weight ;", "float result = NUM_ ;", "for ( int i = list . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "boolean this Flap = list . get ( i ) ;", "if ( flapping != this Flap ) {", "float weight = low Weight + ( weight Range * i / ( flap Interval - NUM_ ) ) ;", "result += weight ; } }", "return result / flap Interval ; }"]}
{"ids": "84221", "code": ["public static String mangle Name ( Method method , boolean is Full ) {", "String Buffer sb = new String Buffer ( ) ;", "sb . append ( method . get Name ( ) ) ;", "Class [ ] params = method . get Parameter Types ( ) ;", "for ( int i = NUM_ ; i < params . length ; i ++ ) {", "sb . append ( STR_ ) ;", "sb . append ( mangle Class ( params [ i ] , is Full ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "76748", "code": ["private void save State ( ) {", "saved Start Offset = offset Attribute . start Offset ( ) ;", "saved End Offset = offset Attribute . end Offset ( ) ;", "has Illegal Offsets = ( saved End Offset - saved Start Offset != term Attribute . length ( ) ) ;", "saved Type = type Attribute . type ( ) ;", "if ( saved Buffer . length < term Attribute . length ( ) ) {", "saved Buffer = new char [ Array Util . oversize ( term Attribute . length ( ) , Character . BYTES ) ] ; }", "System . arraycopy ( term Attribute . buffer ( ) , NUM_ , saved Buffer , NUM_ , term Attribute . length ( ) ) ;", "iterator . text = saved Buffer ;", "has Saved State = true ; }"]}
{"ids": "24895", "code": ["private void print Out Defined I Ps ( List < String > defined I Ps ) {", "List < String > ip List = new Array List < > ( ) ;", "for ( String ip : defined I Ps ) {", "if ( ip . index Of ( STR_ ) != - NUM_ ) {", "ip List . add ( STR_ + ip ) ; }", "else {", "ip List . add ( STR_ + ip ) ; } }", "Collections . sort ( ip List ) ;", "for ( String ip : ip List ) {", "log . info ( ip ) ; } }"]}
{"ids": "2890", "code": ["private void dispose Codec ( Io Session session ) {", "dispose Encoder ( session ) ;", "dispose Decoder ( session ) ;", "dispose Decoder Out ( session ) ; }"]}
{"ids": "84490", "code": ["@ Override public Object parse Object ( final String source , final Parse Position pos ) {", "return parser . parse Object ( source , pos ) ; }"]}
{"ids": "83930", "code": ["@ Override public default Stream < Time Series Collection > stream ( ) {", "return Stream Support . stream ( spliterator ( ) , false ) ; }"]}
{"ids": "59564", "code": ["private Manifest Mod Info register Mod ( File file , Manifest manifest ) {", "Manifest Mod Info mod = load Mod ( file , manifest ) ;", "if ( mod != null ) {", "if ( id Map . contains Key ( mod . get Mod ID ( ) ) ) {", "Mod Info mod 2 = id Map . get ( mod . get Mod ID ( ) ) ;", "duplicates . put ( mod . get Mod ID ( ) , mod ) ;", "duplicates . put ( mod . get Mod ID ( ) , mod 2 ) ;", "log . error ( STR_ , mod . get Mod File ( ) , mod 2 . get Mod File ( ) ) ; }", "else {", "mod List . add ( mod ) ;", "id Map . put ( mod . get Mod ID ( ) , mod ) ; } }", "return mod ; }"]}
{"ids": "7528", "code": ["protected Size 2 D arrange NN ( Block Container container , Graphics 2 D g 2 ) {", "List blocks = container . get Blocks ( ) ;", "Block b = ( Block ) blocks . get ( NUM_ ) ;", "Size 2 D s = b . arrange ( g 2 , Rectangle Constraint . NONE ) ;", "b . set Bounds ( new Rectangle 2 D . Double ( NUM_ , NUM_ , s . width , s . height ) ) ;", "return new Size 2 D ( s . width , s . height ) ; }"]}
{"ids": "1834", "code": ["public static boolean is Content Type ( String content Type , Message message ) {", "if ( content Type == null ) {", "return message . get Content Type ( ) == null ; }", "else {", "return content Type . equals ( message . get Content Type ( ) ) ; } }"]}
{"ids": "12070", "code": ["private static X 509 Certificate generate Certificate ( String dn , int days , String application Uri , Key Pair keys , org . opcfoundation . ua . transport . security . Key Pair issuer Keys , String ... host Names ) throws General Security Exception , IO Exception {", "Private Key privkey = keys . get Private ( ) ;", "Public Key public Key = keys . get Public ( ) ;", "return generate Certificate ( dn , days , application Uri , public Key , privkey , issuer Keys , host Names ) ; }"]}
{"ids": "75050", "code": ["private String check All Dependencies ( Hash Map < String , Module Descriptor > modlist ) {", "for ( Module Descriptor md : modlist . values ( ) ) {", "String res = check Dependencies ( md , modlist ) ;", "if ( ! res . is Empty ( ) ) {", "return res ; } }", "return STR_ ; }"]}
{"ids": "50987", "code": ["public static void check Directory Is Writeable ( @ Not Null File directory ) throws IO Exception {", "while ( ! directory . exists ( ) || ! directory . is Directory ( ) ) {", "directory = directory . get Parent File ( ) ; }", "if ( ! directory . can Write ( ) ) {", "throw new IO Exception ( STR_ + directory . get Absolute Path ( ) ) ; } }"]}
{"ids": "47572", "code": ["private synchronized void write Object ( java . io . Object Output Stream s ) throws IO Exception {", "s . default Write Object ( ) ; }"]}
{"ids": "68124", "code": ["protected String extract Import Url ( final Matcher matcher ) {", "return matcher . group ( INDEX URL ) ; }"]}
{"ids": "47419", "code": ["@ Override public boolean equals ( Object that ) {", "if ( this == that ) {", "return true ; }", "if ( that == null ) {", "return false ; }", "if ( get Class ( ) != that . get Class ( ) ) {", "return false ; }", "Collator other = ( Collator ) that ;", "return ( ( strength == other . strength ) && ( decmp == other . decmp ) ) ; }"]}
{"ids": "8808", "code": ["Type rename Type As Type ( Type type ) {", "if ( type == null ) {", "return null ; }", "if ( type . get Sort ( ) == Type . OBJECT ) {", "String in = type . get Internal Name ( ) ;", "String new In = rename Internal Type ( in ) ;", "if ( new In != in ) {", "return Type . get Type ( STR_ + new In + STR_ ) ; } }", "else if ( type . get Sort ( ) == Type . ARRAY ) {", "String Builder sb = new String Builder ( ) ;", "for ( int n = type . get Dimensions ( ) ; n > NUM_ ; n -- ) {", "sb . append ( STR_ ) ; }", "sb . append ( rename Type ( type . get Element Type ( ) ) ) ;", "return Type . get Type ( sb . to String ( ) ) ; }", "return type ; }"]}
{"ids": "67434", "code": ["@ Pre Authorize ( Spring Eval Expressions . HAS AUTH SYSTEM ADMIN ) @ Override public Response Entity < Collection < String > > invalidate Caches ( ) {", "final Collection < String > cache Names = cache Manager . get Cache Names ( ) ;", "LOGGER . info ( STR_ , cache Names ) ;", "cache Names . for Each ( null ) ;", "return Response Entity . ok ( cache Names ) ; }"]}
{"ids": "51073", "code": ["public static void draw Snap Horizontal Margin ( View Transform transform , Graphics 2 D g , int x 1 , int x 2 , int y 1 , String text , boolean text Over ) {", "Canvas c = new Canvas ( ) ;", "Font Metrics fm = c . get Font Metrics ( s Font ) ;", "g . set Font ( s Font ) ;", "int padding = transform . get Swing Dimension ( NUM_ ) ;", "Rectangle 2 D bounds = fm . get String Bounds ( text , g ) ;", "int tw = ( int ) bounds . get Width ( ) ;", "int offset = NUM_ * CONNECTION ARROW SIZE ;", "if ( x 1 > x 2 ) {", "int temp = x 1 ;", "x 1 = x 2 ;", "x 2 = temp ; }", "int w = ( ( x 2 - x 1 ) - ( tw + NUM_ * padding ) ) / NUM_ ;", "if ( w <= padding ) {", "g . draw Line ( x 1 , y 1 , x 2 , y 1 ) ;", "if ( text Over ) {", "offset = - NUM_ * offset / NUM_ ; }", "g . draw String ( text , x 1 + w + padding , y 1 + offset ) ; }", "else {", "g . draw Line ( x 1 , y 1 , x 1 + w , y 1 ) ;", "g . draw Line ( x 2 - w , y 1 , x 2 , y 1 ) ;", "g . draw String ( text , x 1 + w + padding , ( int ) ( y 1 + ( bounds . get Height ( ) / NUM_ ) ) ) ; }", "g . draw Line ( x 1 , y 1 - CONNECTION ARROW SIZE , x 1 , y 1 + CONNECTION ARROW SIZE ) ;", "g . draw Line ( x 2 , y 1 - CONNECTION ARROW SIZE , x 2 , y 1 + CONNECTION ARROW SIZE ) ; }"]}
{"ids": "33821", "code": ["public static Generic Record subset Record ( Generic Record record , Schema subset Schema ) {", "return subset Record ( record , subset Schema , null ) ; }"]}
{"ids": "40733", "code": ["static public void queue Operation ( Context context , Operation Info args ) {", "args . calculate Scheduled Time ( ) ;", "synchronized ( s Work Queue ) {", "s Work Queue . add ( args ) ;", "s Work Queue . notify ( ) ; }", "context . start Service ( new Intent ( context , Async Query Service Helper . class ) ) ; }"]}
{"ids": "5485", "code": ["private static Cell [ ] interpret ( String string ) {", "Cell [ ] cells = new Cell [ NUM_ ] ;", "for ( int i = NUM_ ; i < string . length ( ) ; i ++ ) {", "int dig = string . char At ( i ) - STR_ ;", "int col = dig % NUM_ ;", "int row = dig / NUM_ ;", "cells [ i ] = new Cell ( col , row ) ; }", "return cells ; }"]}
{"ids": "65110", "code": ["public Shape transform ( Shape shape ) {", "Rectangle 2 D bounds = shape . get Bounds 2 D ( ) ;", "Point 2 D center = new Point 2 D . Double ( bounds . get Center X ( ) , bounds . get Center Y ( ) ) ;", "Point 2 D new Center = transform ( center ) ;", "double dx = new Center . get X ( ) - center . get X ( ) ;", "double dy = new Center . get Y ( ) - center . get Y ( ) ;", "Affine Transform at = Affine Transform . get Translate Instance ( dx , dy ) ;", "return at . create Transformed Shape ( shape ) ; }"]}
{"ids": "47724", "code": ["public void list ( Print Writer out , int indent ) {", "for ( int i = NUM_ ; i < indent ; i ++ ) {", "out . print ( STR_ ) ; }", "out . println ( this ) ; }"]}
{"ids": "48109", "code": ["public static Revocation Status check ( X 509 Certificate cert , X 509 Certificate issuer Cert ) throws IO Exception , Cert Path Validator Exception {", "Cert Id cert Id = null ;", "URI responder URI = null ;", "try {", "X 509 Cert Impl cert Impl = X 509 Cert Impl . to Impl ( cert ) ;", "responder URI = get Responder URI ( cert Impl ) ;", "if ( responder URI == null ) {", "throw new Cert Path Validator Exception ( STR_ ) ; }", "cert Id = new Cert Id ( issuer Cert , cert Impl . get Serial Number Object ( ) ) ; }", "catch ( Certificate Exception | IO Exception e ) {", "throw new Cert Path Validator Exception ( STR_ , e ) ; }", "OCSP Response ocsp Response = check ( Collections . singleton List ( cert Id ) , responder URI , issuer Cert , null , null , Collections . < Extension > empty List ( ) ) ;", "return ( Revocation Status ) ocsp Response . get Single Response ( cert Id ) ; }"]}
{"ids": "48517", "code": ["public static Composite Type for Alpha Composite ( Alpha Composite ac ) {", "switch ( ac . get Rule ( ) ) {", "case Alpha Composite . CLEAR :", "return Clear ;", "case Alpha Composite . SRC :", "if ( ac . get Alpha ( ) >= NUM_ ) {", "return Src No Ea ; }", "else {", "return Src ; }", "case Alpha Composite . DST :", "return Dst ;", "case Alpha Composite . SRC OVER :", "if ( ac . get Alpha ( ) >= NUM_ ) {", "return Src Over No Ea ; }", "else {", "return Src Over ; }", "case Alpha Composite . DST OVER :", "return Dst Over ;", "case Alpha Composite . SRC IN :", "return Src In ;", "case Alpha Composite . DST IN :", "return Dst In ;", "case Alpha Composite . SRC OUT :", "return Src Out ;", "case Alpha Composite . DST OUT :", "return Dst Out ;", "case Alpha Composite . SRC ATOP :", "return Src Atop ;", "case Alpha Composite . DST ATOP :", "return Dst Atop ;", "case Alpha Composite . XOR :", "return Alpha Xor ;", "default :", "throw new Internal Error ( STR_ ) ; } }"]}
{"ids": "12552", "code": ["private List find Phonemes ( ) {", "Set set = new Hash Set ( ) ;", "for ( int i = NUM_ ; i < state Machine . length ; i ++ ) {", "if ( state Machine [ i ] instanceof Final State ) {", "Final State fstate = ( Final State ) state Machine [ i ] ;", "if ( fstate . phone List != null ) {", "for ( int j = NUM_ ; j < fstate . phone List . length ; j ++ ) {", "set . add ( fstate . phone List [ j ] ) ; } } } }", "return new Array List ( set ) ; }"]}
{"ids": "23669", "code": ["public static File remove Parent ( File parent , File file ) {", "String absolute Path = file . get Absolute Path ( ) ;", "String parent Absolute Path = parent . get Absolute Path ( ) ;", "String new Path = absolute Path . replace ( parent Absolute Path + STR_ , STR_ ) ;", "return new File ( new Path ) ; }"]}
{"ids": "28352", "code": ["public static boolean almost Equal ( double a , double b , double delta ) {", "return Math . abs ( a - b ) <= delta ; }"]}
{"ids": "7509", "code": ["private double calculate Log ( double value ) {", "return Math . log ( value ) / this . base Log ; }"]}
{"ids": "11935", "code": ["@ Override public boolean upload File ( String source , String dest ) {", "File Input Stream fis ;", "try {", "File file = new File ( source ) ;", "fis = new File Input Stream ( file ) ;", "m DB Api . put File Overwrite ( dest , fis , file . length ( ) , null ) ;", "fis . close ( ) ;", "return true ; }", "catch ( Dropbox Unlinked Exception e ) {", "Log . d ( String . value Of ( R . string . app name ) , STR_ , e ) ;", "return false ; }", "catch ( Dropbox Exception e ) {", "Log . d ( String . value Of ( R . string . app name ) , STR_ , e ) ;", "return false ; }", "catch ( File Not Found Exception e ) {", "Log . d ( String . value Of ( R . string . app name ) , STR_ , e ) ;", "return false ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "return false ; } }"]}
{"ids": "39683", "code": ["private File create Zip File Handle ( ) throws IO Exception {", "File zip File = File . create Temp File ( STR_ , STR_ , tmp Output Folder . get Root ( ) ) ;", "assert True ( zip File . delete ( ) ) ;", "return zip File ; }"]}
{"ids": "62497", "code": ["public boolean is Empty ( ) {", "return ( tag == null || tag . is Empty ( ) ) && images . size ( ) == NUM_ ; }"]}
{"ids": "39917", "code": ["@ Suppress Warnings ( STR_ ) private void restore Badges ( ) {", "Bundle restored Bundle = saved Instance State ;", "if ( restored Bundle != null ) {", "if ( restored Bundle . contains Key ( BADGE FULL TEXT KEY ) ) {", "should Show Badge With Nine Plus = restored Bundle . get Boolean ( BADGE FULL TEXT KEY ) ; }", "if ( restored Bundle . contains Key ( BUDGES ITEM BUNDLE KEY ) ) {", "badge Save Instance Hash Map = ( Hash Map < Integer , Object > ) saved Instance State . get Serializable ( BUDGES ITEM BUNDLE KEY ) ;", "if ( badge Save Instance Hash Map != null ) {", "for ( Integer integer : badge Save Instance Hash Map . key Set ( ) ) {", "Badge Helper . force Show Badge ( badge List . get ( integer ) , ( Badge Item ) badge Save Instance Hash Map . get ( integer ) , should Show Badge With Nine Plus ) ; } } } } }"]}
{"ids": "72788", "code": ["public void touch ( ) {", "touch = System . current Time Millis ( ) ;", "if ( worker != null ) {", "worker . touch ( ) ; } }"]}
{"ids": "67984", "code": ["public void add Msg Waiting ( Mwi Type type , int count , Mwi Profile profile , boolean store Message ) {", "if ( count > NUM_ ) {", "count = NUM_ ; }", "messages . add ( new Msg Waiting ( type , count , profile , store Message ) ) ; }"]}
{"ids": "39823", "code": ["private void push Stack ( int new Top ) {", "if ( stack Size == stack . length ) {", "int [ ] new Stack = new int [ stack Size * NUM_ ] ;", "int [ ] new Path Indices = new int [ stack Size * NUM_ ] ;", "String [ ] new Path Names = new String [ stack Size * NUM_ ] ;", "System . arraycopy ( stack , NUM_ , new Stack , NUM_ , stack Size ) ;", "System . arraycopy ( path Indices , NUM_ , new Path Indices , NUM_ , stack Size ) ;", "System . arraycopy ( path Names , NUM_ , new Path Names , NUM_ , stack Size ) ;", "stack = new Stack ;", "path Indices = new Path Indices ;", "path Names = new Path Names ; }", "stack [ stack Size ++ ] = new Top ; }"]}
{"ids": "12355", "code": ["public void add Gossip Member ( Gossip Member member ) {", "gossip Members . add ( member ) ; }"]}
{"ids": "37265", "code": ["public boolean is Case Sensitive ( ) {", "return m case Sensitive Box . is Selected ( ) ; }"]}
{"ids": "7858", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( ! ( obj instanceof Polynomial Function 2 D ) ) {", "return false ; }", "Polynomial Function 2 D that = ( Polynomial Function 2 D ) obj ;", "return Arrays . equals ( this . coefficients , that . coefficients ) ; }"]}
{"ids": "2768", "code": ["public static int convert To Color Int ( String a , String r , String g , String b , boolean use Alpha ) {", "int alpha = use Alpha ? Integer . parse Int ( a , NUM_ ) : NUM_ ;", "int red = Integer . parse Int ( r , NUM_ ) ;", "int green = Integer . parse Int ( g , NUM_ ) ;", "int blue = Integer . parse Int ( b , NUM_ ) ;", "return Color . argb ( use Alpha ? alpha : - NUM_ , red , green , blue ) ; }"]}
{"ids": "36474", "code": ["@ Override public void end Element ( String uri , String local Name , String q Name ) throws SAX Exception {", "if ( q Name . equals ( TAG ROOT ) ) { }", "else if ( q Name . equals ( TAG GROUP ) || q Name . equals ( TAG PROPERTY ) ) {", "Settings Item item = item Stack . remove ( item Stack . size ( ) - NUM_ ) ;", "settings Items . put ( item . get Key ( ) , item ) ; }", "else {", "throw new SAX Exception ( STR_ + local Name ) ; } }"]}
{"ids": "25425", "code": ["public void cancel All ( ) {", "endpoint . cancel All ( ) ; }"]}
{"ids": "39146", "code": ["@ Override public double value ( int att Index ) {", "int index = locate Index ( att Index ) ;", "if ( ( index >= NUM_ ) && ( m Indices [ index ] == att Index ) ) {", "return m Att Values [ index ] ; }", "else {", "return NUM_ ; } }"]}
{"ids": "43798", "code": ["public boolean delete ( ) throws IO Exception {", "if ( closed . compare And Set ( false , true ) ) {", "close ( false ) ;", "boolean success = allocated Nodes List . delete ( ) ;", "success &= nio File . delete ( ) ;", "return success ; }", "return false ; }"]}
{"ids": "34858", "code": ["public static boolean has No Prefix ( final Annotated Type Mirror anno Type ) {", "if ( anno Type == null ) {", "return true ; }", "for ( Annotation Mirror mirror : anno Type . get Annotations ( ) ) {", "if ( ! has No Prefix ( mirror ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "34855", "code": ["public static void try Format Satisfiability ( String format ) throws Illegal Format Exception {", "@ Suppress Warnings ( STR_ ) String unused = String . format ( format , ( Object [ ] ) null ) ; }"]}
{"ids": "31953", "code": ["public static Ignite Logger logger ( Grid Kernal Context ctx , Atomic Reference < Ignite Logger > log Ref , Class < ? > cls ) {", "Ignite Logger log = log Ref . get ( ) ;", "if ( log == null ) {", "log Ref . compare And Set ( null , ctx . log ( cls ) ) ;", "log = log Ref . get ( ) ; }", "return log ; }"]}
{"ids": "44555", "code": ["public static List < Constraint Violation > check ( Resource resource , Progress Monitor monitor ) {", "return check ( resource , SPIN . constraint , null , monitor ) ; }"]}
{"ids": "16890", "code": ["public static boolean is Valid Imdb Id ( String imdb Id ) {", "if ( String Utils . is Empty ( imdb Id ) ) {", "return false ; }", "return imdb Id . matches ( STR_ ) ; }"]}
{"ids": "29767", "code": ["protected void show Recorded Video ( ) {", "String abs Path = m Current Video File . get Absolute Path ( ) ;", "Intent intent = new Intent ( this , Player Activity . class ) ;", "intent . put Extra ( Player Activity . EXTRA VIDEO PATH , abs Path ) ;", "start Activity ( intent ) ;", "m Current Video File = null ; }"]}
{"ids": "71148", "code": ["private void write ( Coordinate [ ] coords , int level , String Buffer buf ) {", "start Line ( STR_ , level , buf ) ;", "boolean is New Line = false ;", "for ( int i = NUM_ ; i < coords . length ; i ++ ) {", "if ( i > NUM_ ) {", "buf . append ( TUPLE SEPARATOR ) ; }", "if ( is New Line ) {", "start Line ( STR_ , level , buf ) ;", "is New Line = false ; }", "write ( coords [ i ] , buf ) ;", "if ( ( i + NUM_ ) % max Coordinates Per Line == NUM_ && i < coords . length - NUM_ ) {", "buf . append ( STR_ ) ;", "is New Line = true ; } }", "buf . append ( STR_ ) ; }"]}
{"ids": "48786", "code": ["public boolean can Popup Overlap Task Bar ( ) {", "boolean result = true ;", "try {", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm != null ) {", "sm . check Permission ( Security Constants . AWT . SET WINDOW ALWAYS ON TOP PERMISSION ) ; } }", "catch ( Security Exception se ) {", "result = false ; }", "return result ; }"]}
{"ids": "56839", "code": ["public Job create Job For Create Cluster ( String activiti Xml Classpath Resource Name , List < Parameter > parameters ) throws Exception {", "return create Job For Create Cluster ( activiti Xml Classpath Resource Name , parameters , null ) ; }"]}
{"ids": "10476", "code": ["public static List < String > find Main Classes ( File root Dir ) throws IO Exception {", "List < String > ret = new Array List < > ( ) ;", "if ( ! root Dir . exists ( ) ) {", "return ret ; }", "if ( ! root Dir . is Directory ( ) ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , root Dir . get Path ( ) ) ) ; }", "find Classes ( ret , root Dir , root Dir . get Absolute Path ( ) + STR_ ) ;", "return ret ; }"]}
{"ids": "32994", "code": ["private static String validate XML ( String string ) throws IO Exception {", "for ( int i = NUM_ ; i < string . length ( ) ; i ++ ) {", "char ch = string . char At ( i ) ;", "if ( ! ( ch == NUM_ || ch == NUM_ || ch == NUM_ || ch >= NUM_ ) ) throw new IO Exception ( STR_ + Integer . to String ( ch ) + STR_ ) ; }", "return string ; }"]}
{"ids": "8517", "code": ["public void read Values ( ) {", "read Values ( false ) ; }"]}
{"ids": "34415", "code": ["protected static boolean is Access Compatible With Instant Run ( int access ) {", "return ( ( access & Opcodes . ACC ABSTRACT ) == NUM_ ) && ( ( access & Opcodes . ACC BRIDGE ) == NUM_ ) ; }"]}
{"ids": "10431", "code": ["public Threaded Listener Manager ( Executor Service pool ) {", "manager Number = MANAGER COUNT . get And Increment ( ) ;", "this . pool = pool ; }"]}
{"ids": "47415", "code": ["private void read Object ( Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "in . default Read Object ( ) ;", "if ( choice Limits . length != choice Formats . length ) {", "throw new Invalid Object Exception ( STR_ ) ; } }"]}
{"ids": "71214", "code": ["private void compute Offset Segment ( Line Segment seg , int side , double distance , Line Segment offset ) {", "int side Sign = side == Position . LEFT ? NUM_ : - NUM_ ;", "double dx = seg . p 1 . x - seg . p 0 . x ;", "double dy = seg . p 1 . y - seg . p 0 . y ;", "double len = Math . sqrt ( dx * dx + dy * dy ) ;", "double ux = side Sign * distance * dx / len ;", "double uy = side Sign * distance * dy / len ;", "offset . p 0 . x = seg . p 0 . x - uy ;", "offset . p 0 . y = seg . p 0 . y + ux ;", "offset . p 1 . x = seg . p 1 . x - uy ;", "offset . p 1 . y = seg . p 1 . y + ux ; }"]}
{"ids": "51349", "code": ["@ Suppress Warnings ( STR_ ) public synchronized E element At ( int location ) {", "if ( location < element Count ) {", "return ( E ) element Data [ location ] ; }", "throw array Index Out Of Bounds Exception ( location , element Count ) ; }"]}
{"ids": "68911", "code": ["private List < Qo S Rule > create Qo S Rules ( Json Object qos Settings ) {", "List < Qo S Rule > rules = new Array List < > ( ) ;", "if ( qos Settings . contains Key ( JSON FIELD RULES ) ) {", "Json Object json Rules = qos Settings . get Json Object ( JSON FIELD RULES ) ;", "for ( String url Pattern Reg Exp : json Rules . field Names ( ) ) {", "log . debug ( STR_ + url Pattern Reg Exp ) ;", "Json Object json Rule = json Rules . get Json Object ( url Pattern Reg Exp ) ;", "Pattern url Pattern = Pattern . compile ( url Pattern Reg Exp ) ;", "Qo S Rule rule = new Qo S Rule ( url Pattern ) ;", "boolean add Rule = false ;", "if ( json Rule . contains Key ( STR_ ) ) {", "add Rule = true ;", "rule . set Reject ( json Rule . get Double ( STR_ ) ) ; }", "if ( json Rule . contains Key ( STR_ ) ) {", "add Rule = true ;", "rule . set Warn ( json Rule . get Double ( STR_ ) ) ; }", "if ( add Rule ) {", "rules . add ( rule ) ; }", "else {", "log . warn ( STR_ , url Pattern Reg Exp ) ; } } }", "return rules ; }"]}
{"ids": "15357", "code": ["private static final byte [ ] to Octets ( int identifier , String text ) {", "byte [ ] s = text . get Bytes ( Standard Charsets . UTF 8 ) ;", "byte [ ] base = Octet Utils . to Octets ( Attribute Type . VENDOR SPECIFIC , identifier ) ;", "int max Text Space = Attribute . MAX ATTRIBUTE LENGTH - base . length ;", "byte [ ] octets ;", "if ( s . length > max Text Space ) {", "octets = new byte [ Attribute . MAX ATTRIBUTE LENGTH ] ;", "System . arraycopy ( s , NUM_ , octets , base . length , Attribute . MAX ATTRIBUTE LENGTH - base . length ) ; }", "else {", "octets = new byte [ base . length + s . length ] ;", "System . arraycopy ( s , NUM_ , octets , base . length , s . length ) ; }", "System . arraycopy ( base , NUM_ , octets , NUM_ , base . length ) ;", "octets [ NUM_ ] = ( byte ) octets . length ;", "return octets ; }"]}
{"ids": "16593", "code": ["private Double format Double Value ( Double value , int places ) {", "Big Decimal bd = new Big Decimal ( value ) ;", "bd = bd . set Scale ( places , Rounding Mode . HALF UP ) ;", "return bd . double Value ( ) ; }"]}
{"ids": "51771", "code": ["@ Override public void flush ( ) throws IO Exception {", "out . flush ( ) ; }"]}
{"ids": "12229", "code": ["protected int move Or Copy Files ( boolean move , String what , File [ ] dest Files , File [ ] source Files ) {", "int op Code = ( move ) ? OP MOVE : OP COPY ;", "m Modified Src Files = ( move ) ? new Array List < String > ( ) : null ;", "m Modified Dest Files = new Array List < String > ( ) ;", "open Logfile ( ) ;", "on Pre Process ( what , null , null , op Code ) ;", "int item Count = NUM_ ;", "int pos = NUM_ ;", "int file Count = dest Files . length ;", "while ( pos < file Count ) {", "File source File = source Files [ pos ] ;", "File dest File = dest Files [ pos ] ;", "File dest Renamed = rename Duplicate ( dest File ) ;", "if ( os File Move Or Copy ( move , dest Renamed , source File ) ) item Count ++ ;", "log ( ( ( move ) ? STR_ : STR_ ) , get Filename For Log ( source File ) , STR_ , get Filename For Log ( dest Renamed ) ) ;", "File source Sidecar = get Sidecar ( source File ) ;", "if ( os File Exists ( source Sidecar ) ) {", "File dest Sidecar = get Sidecar ( dest Renamed ) ;", "if ( os File Move Or Copy ( move , dest Sidecar , source Sidecar ) ) item Count ++ ;", "log ( ( ( move ) ? STR_ : STR_ ) , get Filename For Log ( source Sidecar ) , STR_ , get Filename For Log ( dest Sidecar ) ) ; }", "pos ++ ; }", "int modify Count = m Modified Dest Files . size ( ) ;", "String [ ] modified Source Files = ( ( m Modified Src Files != null ) && ( m Modified Src Files . size ( ) > NUM_ ) ) ? m Modified Src Files . to Array ( new String [ modify Count ] ) : null ;", "on Post Process ( what , modified Source Files , ( modify Count > NUM_ ) ? m Modified Dest Files . to Array ( new String [ modify Count ] ) : null , item Count , source Files . length , op Code ) ;", "close Log File ( ) ;", "return item Count ; }"]}
{"ids": "45755", "code": ["static boolean is C Octet String Valid ( String value , int max Length ) {", "if ( value == null ) return true ;", "if ( value . length ( ) >= max Length ) return false ;", "return true ; }"]}
{"ids": "10923", "code": ["public Rectangle 2 D create Proper Bounds ( double x 1 , double y 1 , double x 2 , double y 2 ) {", "double x = Math . min ( x 1 , x 2 ) ;", "double y = Math . min ( y 1 , y 2 ) ;", "double w = Math . abs ( x 1 - x 2 ) ;", "double h = Math . abs ( y 1 - y 2 ) ;", "return new Rectangle 2 D . Double ( x , y , w , h ) ; }"]}
{"ids": "83222", "code": ["private void create File ( int number , String extention ) {", "for ( int i = NUM_ ; i < number ; i ++ ) {", "try {", "Buffered Writer output = new Buffered Writer ( new File Writer ( new File ( text Input Folder + STR_ + String . value Of ( i ) + extention ) ) ) ;", "try {", "output . write ( STR_ ) ;", "output . write ( String . value Of ( i ) ) ; }", "finally {", "output . close ( ) ; } }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "80033", "code": ["public boolean is Animal ( ) {", "return type String . contains ( SUFFIX ANIMAL ) ; }"]}
{"ids": "19966", "code": ["public void add Notification ( Ping Notification notification ) {", "notifications . add ( notification ) ; }"]}
{"ids": "21246", "code": ["public List < Datastore > create Nfs Datastore ( Cluster Compute Resource cluster , File Share Rest Rep file System , File System Export Param export , URI datacenter Id , String datastore Name ) {", "add Nfs Datastore Tag ( file System , export , datacenter Id , datastore Name ) ;", "List < Datastore > datastores = Lists . new Array List ( ) ;", "String file Server = String Utils . substring Before ( export . get Mount Point ( ) , STR_ ) ;", "String mount Path = String Utils . substring After ( export . get Mount Point ( ) , STR_ ) ;", "for ( Host System host : cluster . get Hosts ( ) ) {", "datastores . add ( execute ( new Create Nfs Datastore ( host , file Server , mount Path , datastore Name ) ) ) ;", "add Affected Resource ( file System ) ;", "Execution Utils . clear Rollback ( ) ; }", "return datastores ; }"]}
{"ids": "86296", "code": ["public Album ( Context context , Uri media Uri ) {", "super ( ) ;", "media . add ( NUM_ , new Media ( context , media Uri ) ) ;", "set Current Photo Index ( NUM_ ) ; }"]}
{"ids": "2043", "code": ["protected void initialize Task Done ( Set < Task Image Container > tasks , Optional < Runnable > runnable When Done ) {", "Set < Capture Session > session Set = new Hash Set < > ( ) ;", "Map < Capture Session , Integer > session Task Count = new Hash Map < > ( ) ;", "for ( Task Image Container task : tasks ) {", "session Set . add ( task . m Session ) ;", "Integer current Count = session Task Count . get ( task . m Session ) ;", "if ( current Count == null ) {", "session Task Count . put ( task . m Session , NUM_ ) ; }", "else {", "session Task Count . put ( task . m Session , current Count + NUM_ ) ; } }", "synchronized ( m Shadow Task Map ) {", "for ( Capture Session capture Session : session Set ) {", "Block Signal Protocol protocol = new Block Signal Protocol ( ) ;", "protocol . set Count ( session Task Count . get ( capture Session ) ) ;", "final Image Shadow Task shadow Task ;", "shadow Task = new Image Shadow Task ( protocol , capture Session , runnable When Done ) ;", "m Shadow Task Map . put ( capture Session , shadow Task ) ;", "m Processing Task Consumer . enqueue Task ( shadow Task ) ; } } }"]}
{"ids": "72579", "code": ["public static String unquote ( String name ) {", "return is Quoted ( name ) ? name . substring ( NUM_ , name . length ( ) - NUM_ ) : name ; }"]}
{"ids": "47101", "code": ["private static < T > T report Join ( Object r ) {", "if ( r instanceof Alt Result ) {", "Throwable x ;", "if ( ( x = ( ( Alt Result ) r ) . ex ) == null ) return null ;", "if ( x instanceof Cancellation Exception ) throw ( Cancellation Exception ) x ;", "if ( x instanceof Completion Exception ) throw ( Completion Exception ) x ;", "throw new Completion Exception ( x ) ; }", "@ Suppress Warnings ( STR_ ) T t = ( T ) r ;", "return t ; }"]}
{"ids": "73673", "code": ["private boolean save Macro ( ) {", "if ( first Time ) {", "try {", "Thread . sleep ( first Time Sleep ) ; }", "catch ( Interrupted Exception e ) {", "e . print Stack Trace ( ) ; } }", "first Time = false ;", "byte [ ] macro Accy = new byte [ macro Size ] ;", "int index = NUM_ ;", "int accy Num = NUM_ ;", "accy Num = get Accy Row ( macro Accy , index , text Accy 1 , accy Text Field 1 , cmd Button 1 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "accy Num = get Accy Row ( macro Accy , index , text Accy 2 , accy Text Field 2 , cmd Button 2 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "accy Num = get Accy Row ( macro Accy , index , text Accy 3 , accy Text Field 3 , cmd Button 3 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "accy Num = get Accy Row ( macro Accy , index , text Accy 4 , accy Text Field 4 , cmd Button 4 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "accy Num = get Accy Row ( macro Accy , index , text Accy 5 , accy Text Field 5 , cmd Button 5 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "accy Num = get Accy Row ( macro Accy , index , text Accy 6 , accy Text Field 6 , cmd Button 6 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "accy Num = get Accy Row ( macro Accy , index , text Accy 7 , accy Text Field 7 , cmd Button 7 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "if ( ! is Usb ) {", "accy Num = get Accy Row ( macro Accy , index , text Accy 8 , accy Text Field 8 , cmd Button 8 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; }", "accy Num = get Accy Row ( macro Accy , index , text Accy 9 , accy Text Field 9 , cmd Button 9 ) ;", "if ( accy Num < NUM_ ) {", "return false ; }", "if ( accy Num > NUM_ ) {", "index += NUM_ ; } }", "accy Num = get Accy Row ( macro Accy , index , text Accy 10 , accy Text Field 10 , cmd Button 10 ) ;", "if ( accy Num < NUM_ ) {", "J Option Pane . show Message Dialog ( this , rb . get String ( STR_ ) , rb . get String ( STR_ ) , J Option Pane . ERROR MESSAGE ) ;", "return false ; }", "process Memory ( false , true , macro Num , macro Accy ) ;", "return true ; }"]}
{"ids": "12914", "code": ["public void write Into SPTKLF 0 File ( String sptk File Name ) throws IO Exception {", "LE Data Output Stream lf 0 Data = new LE Data Output Stream ( new Buffered Output Stream ( new File Output Stream ( sptk File Name ) ) ) ;", "for ( int i = NUM_ ; i < this . contour . length ; i ++ ) {", "double f 0 Val = contour [ i ] ;", "if ( contour [ i ] == NUM_ ) {", "lf 0 Data . write Float ( NEGATIVE MAXIMUM ) ; }", "else {", "lf 0 Data . write Float ( ( float ) Math . log ( contour [ i ] ) ) ; } }", "lf 0 Data . flush ( ) ;", "lf 0 Data . close ( ) ; }"]}
{"ids": "67307", "code": ["public static Element find ( Node parent , String name ) {", "Node List list = parent . get Child Nodes ( ) ;", "for ( int i = NUM_ ; i < list . get Length ( ) ; i ++ ) {", "Node n = list . item ( i ) ;", "if ( n instanceof Element ) {", "Element e = ( Element ) n ;", "if ( name . equals ( e . get Attribute ( STR_ ) ) ) {", "return e ; } }", "Element r = find ( n , name ) ;", "if ( r != null ) {", "return r ; } }", "return null ; }"]}
{"ids": "66833", "code": ["public static RE mk Star ( RE x ) {", "if ( x . equals ( epsilon ) || x . equals ( empty ) ) {", "return epsilon ; }", "RE res = new RE ( Re Op . STAR ) ;", "res . unary Arg = x ;", "return res ; }"]}
{"ids": "73296", "code": ["public void remove ( final Object element ) {", "Set old Selection = new Hash Set ( selection ) ;", "boolean rv = selection . remove ( element ) ;", "if ( rv ) {", "fire Selection Changed ( old Selection , selection ) ; }", "old Selection = null ; }"]}
{"ids": "32793", "code": ["public void printf ( Locale locale , String format , Object ... args ) {", "out . printf ( locale , format , args ) ;", "out . flush ( ) ; }"]}
{"ids": "41139", "code": ["public void add Suffix ( Dalv Insn insn ) {", "suffix . add ( insn ) ; }"]}
{"ids": "31973", "code": ["private void close Selector ( ) {", "if ( selector . is Open ( ) ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ ) ;", "for ( Selection Key key : selector . keys ( ) ) U . close ( key . channel ( ) , log ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ ) ;", "U . close ( selector , log ) ; } }"]}
{"ids": "26702", "code": ["public static Number sub ( Number a , Number b ) {", "if ( is Floating Point ( a ) || is Floating Point ( b ) ) {", "return a . double Value ( ) - b . double Value ( ) ; }", "else {", "return a . long Value ( ) - b . long Value ( ) ; } }"]}
{"ids": "71838", "code": ["public Builder required Attributes ( final String ... name Or OI Ds ) {", "return required Attributes ( Arrays . as List ( name Or OI Ds ) ) ; }"]}
{"ids": "78081", "code": ["private void show History Dialog ( ) {", "JB List commands List = new JB List ( History Utils . get Commands From History ( ) ) ;", "commands List . set Cell Renderer ( new History List Cell Renderer ( ) ) ;", "commands List . set Empty Text ( STR_ ) ;", "commands List . set Selection Mode ( List Selection Model . SINGLE SELECTION ) ;", "String [ ] buttons = { STR_ , STR_ } ;", "int result = J Option Pane . show Option Dialog ( tool Window Content , commands List , STR_ , J Option Pane . YES NO CANCEL OPTION , J Option Pane . PLAIN MESSAGE , null , buttons , buttons [ NUM_ ] ) ;", "if ( result == NUM_ ) {", "update Ui From Command ( ( Command ) commands List . get Selected Value ( ) ) ; } }"]}
{"ids": "27754", "code": ["protected static byte [ ] read ( Input Stream is ) throws IO Exception {", "final boolean close = true ;", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "try {", "int i ;", "while ( ( i = is . read ( ) ) != - NUM_ ) {", "baos . write ( i ) ; } }", "finally {", "try {", "if ( close ) {", "is . close ( ) ; }", "baos . close ( ) ; }", "catch ( Exception ex ) {", "log . warn ( STR_ + ex , ex ) ; } }", "return baos . to Byte Array ( ) ; }"]}
{"ids": "30269", "code": ["public Notification find ( Integer notification ID ) {", "Notification notification = new Notification ( context , notification ID , null ) ;", "if ( notification . get Attributes ( ) == null ) notification . load Attributes From Preferences ( ) ;", "return notification ; }"]}
{"ids": "83346", "code": ["public static void write Histogram ( T Double Double Hash Map distr , String filename ) throws File Not Found Exception , IO Exception {", "Buffered Writer a Writer = IO Utils . get Buffered Writer ( filename ) ;", "a Writer . write ( STR_ ) ;", "a Writer . new Line ( ) ;", "double [ ] keys = distr . keys ( ) ;", "Arrays . sort ( keys ) ;", "for ( double key : keys ) {", "a Writer . write ( String . value Of ( key ) ) ;", "a Writer . write ( STR_ ) ;", "a Writer . write ( String . value Of ( distr . get ( key ) ) ) ;", "a Writer . new Line ( ) ; }", "a Writer . close ( ) ; }"]}
{"ids": "8202", "code": ["public static Number plus ( Character left , Number right ) {", "return Number Number Plus . plus ( Integer . value Of ( left ) , right ) ; }"]}
{"ids": "15295", "code": ["public boolean remove Element ( Object obj ) {", "synchronized ( actions ) {", "if ( allow To Change ) {", "boolean result = actions . remove ( obj ) ;", "if ( actions . is Empty ( ) ) {", "if ( head Task != null ) {", "cancel ( ) ; } }", "return result ; } }", "return false ; }"]}
{"ids": "35634", "code": ["private static Float Buffer create Vertex Array ( float [ ] coords ) {", "Byte Buffer bb = Byte Buffer . allocate Direct ( coords . length * NUM_ ) ;", "bb . order ( Byte Order . native Order ( ) ) ;", "Float Buffer fb = bb . as Float Buffer ( ) ;", "fb . put ( coords ) ;", "fb . position ( NUM_ ) ;", "return fb ; }"]}
{"ids": "78206", "code": ["private Object [ ] inv Wm Sub Band ( Image img , double [ ] wm , int n , double threshold ) {", "int m = NUM_ ;", "double z = NUM_ ;", "double v = NUM_ ;", "for ( int i = NUM_ ; i < img . get Width ( ) * img . get Height ( ) ; i ++ ) {", "if ( img . get Data ( ) [ i ] > threshold ) {", "z += ( img . get Data ( ) [ i ] * wm [ i % n ] ) ;", "v += Math . abs ( img . get Data ( ) [ i ] ) ;", "m ++ ; } }", "return new Object [ ] { m , z , v } ; }"]}
{"ids": "19930", "code": ["private static Tungsten Properties load Security Properties From File ( String properties File Location ) throws Configuration Exception {", "Tungsten Properties security Props = null ;", "File Input Stream security Configuration File Input Stream = null ;", "if ( properties File Location == null && Cluster Configuration . get Cluster Home ( ) == null ) {", "throw new Configuration Exception ( STR_ ) ; }", "File security Properties File ;", "if ( properties File Location == null ) {", "File cluster Conf Directory = Cluster Configuration . get Dir ( Cluster Configuration . get Global Config Dir Name ( Cluster Configuration . get Cluster Home ( ) ) ) ;", "security Properties File = new File ( cluster Conf Directory . get Path ( ) , Security Conf . SECURITY PROPERTIES FILE NAME ) ; }", "else {", "security Properties File = new File ( properties File Location ) ; }", "try {", "security Props = new Tungsten Properties ( ) ;", "security Configuration File Input Stream = new File Input Stream ( security Properties File ) ;", "security Props . load ( security Configuration File Input Stream , true ) ;", "close Security Configuration File Input Stream ( security Configuration File Input Stream ) ; }", "catch ( File Not Found Exception e ) {", "String msg = Message Format . format ( STR_ , security Properties File . get Path ( ) ) ;", "logger . debug ( msg , e ) ;", "throw new Configuration Exception ( msg ) ; }", "catch ( IO Exception e ) {", "String msg = Message Format . format ( STR_ , security Properties File . get Path ( ) , e . get Message ( ) ) ;", "logger . debug ( msg , e ) ;", "throw new Configuration Exception ( msg ) ; }", "finally {", "close Security Configuration File Input Stream ( security Configuration File Input Stream ) ; }", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( Message Format . format ( STR_ , security Properties File . get Path ( ) ) ) ; }", "security Props . put ( Security Conf . SECURITY PROPERTIES PARENT FILE LOCATION , security Properties File . get Absolute Path ( ) ) ;", "return security Props ; }"]}
{"ids": "10707", "code": ["private synchronized void clear Scan Files ( ) {", "if ( ( all Files != null ) && ( all Files . size ( ) > NUM_ ) ) {", "Iterator it = all Files . iterator ( ) ;", "File file = null ;", "while ( it . has Next ( ) ) {", "file = ( File ) it . next ( ) ;", "file . delete ( ) ; }", "all Files . clear ( ) ; } }"]}
{"ids": "47534", "code": ["public Date Time Parse Exception ( String message , Char Sequence parsed Data , int error Index ) {", "super ( message ) ;", "this . parsed String = parsed Data . to String ( ) ;", "this . error Index = error Index ; }"]}
{"ids": "82110", "code": ["private boolean are Parallel Siblings ( Component source , Component target , int axis ) {", "Component Info source Info = get Component Info ( source ) ;", "Component Info target Info = get Component Info ( target ) ;", "Spring source Spring ;", "Spring target Spring ;", "if ( axis == HORIZONTAL ) {", "source Spring = source Info . horizontal Spring ;", "target Spring = target Info . horizontal Spring ; }", "else {", "source Spring = source Info . vertical Spring ;", "target Spring = target Info . vertical Spring ; }", "Array List source Path = tmp Parallel Set ;", "source Path . clear ( ) ;", "Spring spring = source Spring . get Parent ( ) ;", "while ( spring != null ) {", "source Path . add ( spring ) ;", "spring = spring . get Parent ( ) ; }", "spring = target Spring . get Parent ( ) ;", "while ( spring != null ) {", "if ( source Path . contains ( spring ) ) {", "source Path . clear ( ) ;", "while ( spring != null ) {", "if ( spring instanceof Parallel Group ) {", "return true ; }", "spring = spring . get Parent ( ) ; }", "return false ; }", "spring = spring . get Parent ( ) ; }", "source Path . clear ( ) ;", "return false ; }"]}
{"ids": "84184", "code": ["protected Object read Object Impl ( Class cl ) throws IO Exception {", "try {", "Object obj = cl . new Instance ( ) ;", "if ( refs == null ) refs = new Array List ( ) ;", "refs . add ( obj ) ;", "Hash Map field Map = get Field Map ( cl ) ;", "int code = read ( ) ;", "for ( ; code >= NUM_ && code != STR_ ; code = read ( ) ) {", "unread ( ) ;", "Object key = read Object ( ) ;", "Field field = ( Field ) field Map . get ( key ) ;", "if ( field != null ) {", "Object value = read Object ( field . get Type ( ) ) ;", "field . set ( obj , value ) ; }", "else {", "Object value = read Object ( ) ; } }", "if ( code != STR_ ) throw expect ( STR_ , code ) ;", "try {", "Method method = cl . get Method ( STR_ , new Class [ NUM_ ] ) ;", "return method . invoke ( obj , new Object [ NUM_ ] ) ; }", "catch ( Exception e ) { }", "return obj ; }", "catch ( IO Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "throw new IO Exception Wrapper ( e ) ; } }"]}
{"ids": "5671", "code": ["public static Plain Text plain ( int text ) {", "return plain ( Integer . to String ( text ) ) ; }"]}
{"ids": "85586", "code": ["public static boolean is Today ( Calendar calendar ) {", "Calendar now = Calendar . get Instance ( ) ;", "if ( now . get ( Calendar . DAY OF MONTH ) == calendar . get ( Calendar . DAY OF MONTH ) ) {", "if ( now . get ( Calendar . MONTH ) == calendar . get ( Calendar . MONTH ) ) {", "if ( now . get ( Calendar . YEAR ) == calendar . get ( Calendar . YEAR ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "23170", "code": ["protected void sprint ( double double Field ) {", "sprint ( String . value Of ( double Field ) ) ; }"]}
{"ids": "21615", "code": ["private Storage Port assign Port Based On Usage ( List < Storage Port > matching Target Ports , Map < Storage Port , Integer > port Usage ) {", "Storage Port found Port = null ;", "for ( Storage Port matched Port : matching Target Ports ) {", "if ( port Usage . get ( matched Port ) == null ) {", "port Usage . put ( matched Port , NUM_ ) ; }", "if ( found Port == null ) {", "found Port = matched Port ; }", "else {", "if ( port Usage . get ( matched Port ) < port Usage . get ( found Port ) ) {", "found Port = matched Port ; } } }", "if ( found Port != null ) {", "port Usage . put ( found Port , port Usage . get ( found Port ) + NUM_ ) ; }", "return found Port ; }"]}
{"ids": "55623", "code": ["public External Event next Event ( ) {", "if ( queue . size ( ) == NUM_ ) {", "return new External Event ( Double . MAX VALUE ) ; }", "External Event ee = queue . get ( next Event Index ) ;", "next Event Index ++ ;", "if ( next Event Index >= queue . size ( ) ) {", "queue = read Events ( nrof Preload ) ;", "next Event Index = NUM_ ; }", "return ee ; }"]}
{"ids": "53438", "code": ["public void append To Buffer ( String Builder buf ) {", "Iterator < double [ ] > iter = points . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "double [ ] data = iter . next ( ) ;", "for ( int i = NUM_ ; i < data . length ; i ++ ) {", "if ( i > NUM_ ) {", "buf . append ( STR_ ) ; }", "buf . append ( data [ i ] ) ; }", "if ( iter . has Next ( ) ) {", "buf . append ( STR_ ) ; } } }"]}
{"ids": "74273", "code": ["public void update Combo Box ( J Combo Box < Track > box ) {", "box . remove All Items ( ) ;", "box . add Item ( null ) ;", "List < Track > tracks = get Track By Name List ( null ) ;", "for ( Track track : tracks ) {", "box . add Item ( track ) ; } }"]}
{"ids": "33140", "code": ["public Refactoring Session Transformer ( final boolean projects ) {", "f Projects = projects ; }"]}
{"ids": "4644", "code": ["public Compare Result open ( ) {", "final Content Comparator [ ] comparator Array = comparators . to Array ( new Content Comparator [ comparators . size ( ) ] ) ;", "final Custom Compare Editor Input input = new Custom Compare Editor Input ( modified , original , ancestor , comparator Array , compare Configuration , external Compare Handler ) ;", "if ( compare Configuration . is Left Editable ( ) || compare Configuration . is Right Editable ( ) ) {", "compare Configuration . set Property ( STR_ , Boolean . FALSE ) ;", "input . set Always Dirty ( always Dirty ) ; }", "input . add Save Listener ( new Proxy Compare Save Listener ( ) ) ;", "log . info ( Message Format . format ( STR_ , get Label NOLOC ( modified ) , get Label NOLOC ( original ) ) ) ;", "compare UI Type . open Compare UI ( input ) ;", "final boolean contents Identical = ( input . get Compare Result ( ) == null ) ;", "final boolean contents Saved = ( input . get Saved Contents ( ) . length > NUM_ ) ;", "return new Compare Result ( contents Identical , input . was OK Pressed ( ) , contents Saved ) ; }"]}
{"ids": "15703", "code": ["protected void add Resource ( String resource ) {", "if ( ! String Utils . is Empty ( resource ) ) {", "resources . add ( resource ) ; } }"]}
{"ids": "65514", "code": ["public static boolean is Numeric ( String maybe Numeric ) {", "return maybe Numeric != null && maybe Numeric . matches ( STR_ ) ; }"]}
{"ids": "9809", "code": ["public void open Key Store ( File key Store File , String default Password ) {", "try {", "if ( ! key Store File . is File ( ) ) {", "J Option Pane . show Message Dialog ( frame , Message Format . format ( res . get String ( STR_ ) , key Store File ) , res . get String ( STR_ ) , J Option Pane . WARNING MESSAGE ) ;", "return ; }", "if ( is Key Store File Open ( key Store File ) ) {", "J Option Pane . show Message Dialog ( frame , Message Format . format ( res . get String ( STR_ ) , key Store File ) , res . get String ( STR_ ) , J Option Pane . WARNING MESSAGE ) ;", "return ; }", "Password password = ( default Password != null ) ? new Password ( default Password . to Char Array ( ) ) : null ;", "Key Store opened Key Store = null ;", "boolean first Try = true ;", "while ( true ) {", "if ( password == null ) {", "password = show Password Dialog ( key Store File ) ; }", "if ( password == null ) {", "return ; }", "try {", "opened Key Store = Key Store Util . load ( key Store File , password ) ;", "break ; }", "catch ( Key Store Load Exception klex ) {", "if ( default Password == null || ! first Try ) {", "int try Again Choice = show Error Message ( key Store File , klex ) ;", "if ( try Again Choice == J Option Pane . NO OPTION ) {", "return ; } } }", "password . null Password ( ) ;", "password = null ;", "first Try = false ; }", "if ( opened Key Store == null ) {", "J Option Pane . show Message Dialog ( frame , Message Format . format ( res . get String ( STR_ ) , key Store File . get Name ( ) ) , res . get String ( STR_ ) , J Option Pane . WARNING MESSAGE ) ;", "return ; }", "kse Frame . add Key Store ( opened Key Store , key Store File , password ) ; }", "catch ( File Not Found Exception ex ) {", "J Option Pane . show Message Dialog ( frame , Message Format . format ( res . get String ( STR_ ) , key Store File ) , res . get String ( STR_ ) , J Option Pane . WARNING MESSAGE ) ; }", "catch ( Exception ex ) {", "D Error . display Error ( frame , ex ) ; } }"]}
{"ids": "6611", "code": ["private final void append ( List < ? super Name Value Pair > l , final String k , final String v ) {", "if ( v != null ) l . add ( new Name Value Pair ( k , v ) ) ; }"]}
{"ids": "11023", "code": ["protected Properties create Properties ( URL location ) throws IO Exception {", "Input Stream is = null ;", "if ( location != null ) {", "is = location . open Stream ( ) ; }", "Properties tmp Properties = new Properties ( ) ;", "if ( is != null ) {", "tmp Properties . load ( is ) ; }", "return tmp Properties ; }"]}
{"ids": "83081", "code": ["protected double calc Plan Weight ( final T plan , final double max Score ) {", "if ( plan . get Score ( ) == null ) {", "return Double . Na N ; }", "double weight = Math . exp ( this . beta * ( plan . get Score ( ) - max Score ) ) ;", "if ( weight < MIN WEIGHT ) weight = MIN WEIGHT ;", "return weight ; }"]}
{"ids": "74096", "code": ["void find Value ( ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + label ( ) ) ; }", "for ( int i = NUM_ ; i < value . get Item Count ( ) ; i ++ ) {", "String choice = value . get Item At ( i ) ;", "Setting List sl = choice Hash . get ( choice ) ;", "if ( sl . match ( ) ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + i ) ; }", "value . set Selected Item ( choice ) ;", "return ; } }", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ ) ; } }"]}
{"ids": "82477", "code": ["public java . lang . String Builder insert ( int index , java . lang . String string ) {", "if ( string == null ) {", "string = STR_ ; }", "int min = string . length ( ) ;", "if ( min != NUM_ ) {", "move ( min , index ) ;", "string . get Chars ( NUM_ , min , value , index ) ;", "count += min ; }", "return this ; }"]}
{"ids": "27049", "code": ["public void mkdir ( String key ) throws IO Exception {", "key = key . replace ( STR_ , STR_ ) ;", "if ( key . ends With ( STR_ ) && ! key . equals ( STR_ ) ) {", "throw new Invalid Parameter Exception ( STR_ ) ; }", "String [ ] split = key . split ( STR_ ) ;", "String Builder builder = new String Builder ( ) ;", "for ( String s : split ) {", "builder . append ( s ) ;", "if ( ! s . is Empty ( ) && ! exists ( builder . to String ( ) ) ) {", "zk State . set ( builder . to String ( ) , null ) ; }", "builder . append ( STR_ ) ; } }"]}
{"ids": "7786", "code": ["public double calculate Log ( double value ) {", "return Math . log ( value ) / this . base Log ; }"]}
{"ids": "2450", "code": ["public static Vector 3 pow ( Vector 3 o , double power ) {", "return new Vector 3 ( Math . pow ( o . x , power ) , Math . pow ( o . y , power ) , Math . pow ( o . z , power ) ) ; }"]}
{"ids": "53900", "code": ["public Datagram Packet response Receive ( ) throws IO Exception {", "byte [ ] buf = new byte [ NUM_ ] ;", "Datagram Packet dp = new Datagram Packet ( buf , buf . length ) ;", "datagram Socket . receive ( dp ) ;", "return dp ; }"]}
{"ids": "85128", "code": ["@ Override public void flush ( ) {", "flush ( false ) ; }"]}
{"ids": "72284", "code": ["public static float [ ] temperature To RGB ( int degrees K ) {", "int k = Math Utils . constrain ( degrees K , NUM_ , NUM_ ) ;", "float a = ( k % NUM_ ) / NUM_ ;", "int i = ( ( k - NUM_ ) / NUM_ ) * NUM_ ;", "return new float [ ] { interp ( i , a ) , interp ( i + NUM_ , a ) , interp ( i + NUM_ , a ) } ; }"]}
{"ids": "78385", "code": ["public Advanced State Map . Builder with Name ( Function < Properties Map , String > mapper ) {", "this . name Mapper = mapper ;", "return this ; }"]}
{"ids": "73809", "code": ["public synchronized void message ( Loco Net Message m ) {", "int op Code = m . get Op Code ( ) ;", "switch ( op Code ) {", "case Ln Constants . OPC PEER XFER :", "int src = m . get Element ( NUM_ ) ;", "int dst = m . get Element ( NUM_ ) + m . get Element ( NUM_ ) * NUM_ ;", "int [ ] packet = m . get Peer Xfr Data ( ) ;", "if ( src == low Part ( Loco Buffer Address ) ) {", "String lbv = ( ( packet [ NUM_ ] != NUM_ ) ? dotme ( packet [ NUM_ ] ) : STR_ ) ;", "set LB Version ( lbv ) ; }", "if ( dst == Loco Buffer Address && src == low Part ( unit Address ) && ( packet [ NUM_ ] == unit Sub Address ) ) {", "stop Timer ( ) ;", "reply Received ( ) ;", "String fw = ( ( packet [ NUM_ ] != NUM_ ) ? dotme ( packet [ NUM_ ] ) : STR_ ) ;", "set LIO Version ( fw ) ;", "if ( packet [ NUM_ ] == Loco IO . LOCOIO SV READ || reading ) {", "if ( last Op Cv >= NUM_ && last Op Cv <= NUM_ ) {", "int data = ( packet [ NUM_ ] != NUM_ ) ? packet [ NUM_ ] : packet [ NUM_ ] ;", "int channel = ( last Op Cv / NUM_ ) - NUM_ ;", "if ( channel < NUM_ ) {", "log . warn ( STR_ ) ;", "channel = NUM_ ; }", "int type = last Op Cv - ( channel * NUM_ + NUM_ ) ;", "log . debug ( STR_ + channel + STR_ + type + STR_ + ( type == NUM_ ? STR_ : type == NUM_ ? STR_ : type == NUM_ ? STR_ : STR_ ) + STR_ + Integer . to Hex String ( data ) ) ;", "if ( type == NUM_ ) {", "set V 2 ( channel , data ) ;", "set Mode ( channel , STR_ ) ; }", "else if ( type == NUM_ ) {", "set V 1 ( channel , data ) ;", "set Mode ( channel , STR_ ) ; }", "else if ( type == NUM_ ) {", "set SV ( channel , data ) ;", "Loco IO Mode lim = validmodes . get Loco IO Mode For ( get SV ( channel ) , get V 1 ( channel ) , get V 2 ( channel ) ) ;", "if ( lim == null ) {", "set Mode ( channel , STR_ ) ;", "set Addr ( channel , NUM_ ) ;", "log . debug ( STR_ ) ; }", "else {", "set Mode ( channel , lim . get Full Mode ( ) ) ;", "set Addr ( channel , validmodes . values To Address ( lim . get Opcode ( ) , get SV ( channel ) , get V 1 ( channel ) , get V 2 ( channel ) ) ) ; }", "log . debug ( STR_ + STR_ + Integer . to Hex String ( get SV ( channel ) ) + STR_ + STR_ + Integer . to Hex String ( get V 1 ( channel ) ) + STR_ + STR_ + Integer . to Hex String ( get V 2 ( channel ) ) + STR_ + STR_ + get Addr ( channel ) + STR_ + Integer . to Hex String ( get Addr ( channel ) ) + STR_ ) ; }", "else {", "log . warn ( STR_ + type + STR_ + channel ) ; } }", "else { } }", "issue Next Operation ( ) ;", "return ; }", "else {", "return ; }", "case Ln Constants . OPC INPUT REP :", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( Ln Constants . OPC NAME ( op Code ) + STR_ ) ; }", "for ( int i = NUM_ ; i < num Rows ; i ++ ) {", "if ( capture [ i ] ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + i ) ; }", "int val 1 = m . get Element ( NUM_ ) ;", "int val 2 = m . get Element ( NUM_ ) ;", "set Addr ( i , ( ( val 2 & NUM_ ) << NUM_ ) * NUM_ + ( ( val 1 & NUM_ ) << NUM_ ) | ( ( ( val 2 & Ln Constants . OPC SW REQ DIR ) == Ln Constants . OPC SW REQ DIR ) ? NUM_ : NUM_ ) ) ;", "capture [ i ] = false ; } }", "return ;", "case Ln Constants . OPC SW REQ :", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( Ln Constants . OPC NAME ( op Code ) + STR_ ) ; }", "for ( int i = NUM_ ; i < num Rows ; i ++ ) {", "if ( capture [ i ] ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + i ) ; }", "int val 1 = m . get Element ( NUM_ ) ;", "int val 2 = m . get Element ( NUM_ ) ;", "int addr = Loco IO . SENSOR ADR ( val 1 , val 2 ) ;", "set Addr ( i , addr ) ;", "capture [ i ] = false ; } }", "return ;", "default : } }"]}
{"ids": "30624", "code": ["public boolean handle Exception From Server ( Writer writer , Reader reader , Throwable ex ) {", "if ( ex instanceof Closed Channel Exception ) {", "if ( logger . is Loggable ( Level . FINE ) ) logger . log ( Level . FINE , STR_ + writer . get End Point Address ( ) + STR_ ) ;", "return true ; }", "if ( ex instanceof Marshal Context Cleared Exception ) {", "if ( logger . is Loggable ( Level . FINE ) ) logger . log ( Level . FINE , STR_ + writer . get End Point Address ( ) + STR_ ) ;", "return true ; }", "try {", "String msg = STR_ + writer . get End Point Address ( ) + STR_ ;", "if ( ex instanceof LRMI Unhandled Exception ) {", "if ( logger . is Loggable ( Level . FINE ) ) logger . log ( Level . FINE , msg , ex ) ;", "LRMI Unhandled Exception lrmiue = ( LRMI Unhandled Exception ) ex ;", "if ( lrmiue . get Stage ( ) == Stage . DESERIALIZATION ) {", "reader . reset Context ( ) ; }", "if ( writer . is Open ( ) ) writer . write Reply ( new Reply Packet ( null , lrmiue ) ) ;", "return false ; }", "else if ( ex instanceof Runtime Exception || ex instanceof Invalid Class Exception ) {", "if ( logger . is Loggable ( Level . SEVERE ) ) logger . log ( Level . SEVERE , msg , ex ) ; }", "else if ( ex instanceof Unmarshal Exception ) {", "if ( logger . is Loggable ( Level . WARNING ) ) logger . log ( Level . WARNING , msg , ex ) ; }", "else {", "if ( logger . is Loggable ( Level . FINE ) ) logger . log ( Level . FINE , msg , ex ) ; }", "if ( writer . is Open ( ) ) writer . write Reply ( new Reply Packet ( null , new Protocol Exception ( msg , ex ) ) ) ;", "return true ; }", "catch ( Exception ex 2 ) {", "if ( logger . is Loggable ( Level . FINE ) ) logger . log ( Level . FINE , STR_ + writer . get End Point Address ( ) + STR_ , ex ) ;", "return true ; } }"]}
{"ids": "70643", "code": ["default String resource Name ( String table Name , String type ) {", "return String . format ( RESOURCE NAME , table Name , type ) ; }"]}
{"ids": "74239", "code": ["protected void update Combo Boxes Load Change ( ) {", "if ( auto Track Check Box . is Selected ( ) ) {", "update Location Track Combo Box ( ) ; }", "if ( auto Destination Track Check Box . is Selected ( ) ) {", "update Destination Track Combo Box ( ) ; }", "if ( auto Final Dest Track Check Box . is Selected ( ) ) {", "update Final Destination ( ) ; } }"]}
{"ids": "45231", "code": ["public static String join ( Named Value [ ] values , String separator ) {", "String Builder buff = new String Builder ( ) ;", "for ( int i = NUM_ ; i < values . length ; i ++ ) {", "buff . append ( values [ i ] ) ;", "if ( i < values . length - NUM_ ) buff . append ( separator ) ; }", "return buff . to String ( ) ; }"]}
{"ids": "37778", "code": ["protected String source Class ( Attribute c , double [ ] dist ) {", "if ( c . is Nominal ( ) ) {", "return Integer . to String ( Utils . max Index ( dist ) ) ; }", "else {", "return Double . to String ( dist [ NUM_ ] ) ; } }"]}
{"ids": "75104", "code": ["int request Group Data ( char group Num ) {", "set Curr Data Group ( group Num ) ;", "curr Grp Items = known Grp Items . get ( Integer . value Of ( get Curr Data Group ( ) ) ) ;", "char [ ] pay Load = { group Num } ;", "return ( write Telegram ( pay Load , CMD GROUP READ , null ) ) ; }"]}
{"ids": "73342", "code": ["public All To All Panel ( All To All connector , Network Panel network Panel ) {", "super ( ) ;", "this . connection = connector ;", "allow Self Connect Panel = new J Panel ( new Flow Layout ( Flow Layout . LEFT ) ) ;", "allow Self Connect Panel . add ( new J Label ( STR_ ) ) ;", "allow Self Connect Panel . add ( allow Self Connect Chk Bx ) ;", "fill Field Values ( ) ;", "add ( allow Self Connect Panel ) ; }"]}
{"ids": "4910", "code": ["private void allocate sections ( int p section count ) {", "section list . ensure Capacity ( p section count ) ;", "while ( section list . size ( ) < p section count ) {", "section list . add ( new Maze Search Element ( ) ) ; } }"]}
{"ids": "36128", "code": ["public Weight Distribution ( Column Example Table column Table , int [ ] selection , int attribute Number ) {", "calculate Label Weights ( column Table , selection , attribute Number ) ;", "left Label Weights = new double [ total Label Weights . length ] ;", "left Weight = NUM_ ;", "total Weight = get Total Weight ( total Label Weights ) ;", "if ( has Missings ) {", "missings Weight = get Total Weight ( missings Label Weights ) ;", "right Weight = total Weight - missings Weight ;", "right Label Weights = array Difference ( total Label Weights , missings Label Weights ) ; }", "else {", "missings Weight = NUM_ ;", "right Weight = total Weight ;", "right Label Weights = new double [ total Label Weights . length ] ;", "System . arraycopy ( total Label Weights , NUM_ , right Label Weights , NUM_ , total Label Weights . length ) ; } }"]}
{"ids": "33390", "code": ["public static String remove Extension ( String file Name ) {", "int index = file Name . last Index Of ( STR_ ) ;", "if ( index == - NUM_ ) {", "return file Name ; }", "else {", "return file Name . substring ( NUM_ , index ) ; } }"]}
{"ids": "3271", "code": ["private static void add Leaf With Non Existing Parents ( Spatial root , Spatial leaf ) {", "if ( ! ( root instanceof Node ) ) {", "logger . log ( Level . WARNING , STR_ , new Object [ ] { leaf . get Name ( ) , root . get Name ( ) } ) ;", "return ; }", "for ( Spatial s = leaf ; s . get Parent ( ) != null ; s = s . get Parent ( ) ) {", "Spatial parent = s . get Parent ( ) ;", "Spatial other = find Tagged Spatial ( root , parent ) ;", "if ( other == null ) {", "continue ; }", "if ( other instanceof Node ) {", "logger . log ( Level . INFO , STR_ , new Object [ ] { s , other , root , leaf } ) ;", "for ( Spatial spt = leaf ; spt != parent ; spt = spt . get Parent ( ) ) {", "spt . set User Data ( ORIGINAL NAME , spt . get Name ( ) ) ;", "spt . set User Data ( ORIGINAL PATH , get Spatial Path ( spt ) ) ;", "spt = spt . get Parent ( ) ; }", "Node other Node = ( Node ) other ;", "other Node . attach Child ( s ) ;", "logger . log ( Log Level . USERINFO , STR_ , new Object [ ] { other . get Name ( ) , leaf . get Name ( ) } ) ;", "return ; }", "else {", "logger . log ( Level . WARNING , STR_ , new Object [ ] { leaf , other , root } ) ; } }", "logger . log ( Level . WARNING , STR_ , leaf . get Name ( ) ) ; }"]}
{"ids": "74154", "code": ["private void adjust Block Listeners ( List < O Block > old Range , List < O Block > new Range , Tracker tracker ) {", "Iterator < O Block > iter = new Range . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "O Block b = iter . next ( ) ;", "if ( old Range . contains ( b ) ) {", "old Range . remove ( b ) ;", "continue ; }", "add Block Listener ( b , tracker ) ; }", "iter = old Range . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "remove Block Listener ( iter . next ( ) , tracker ) ; } }"]}
{"ids": "9351", "code": ["static public String hex Encode ( byte [ ] a Input ) {", "String Buffer result = new String Buffer ( ) ;", "final char [ ] digits = { STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ } ;", "for ( int idx = NUM_ ; idx < a Input . length ; ++ idx ) {", "byte b = a Input [ idx ] ;", "result . append ( digits [ ( b & NUM_ ) > > NUM_ ] ) ;", "result . append ( digits [ b & NUM_ ] ) ; }", "return result . to String ( ) ; }"]}
{"ids": "2027", "code": ["private static Size clamp Size ( Size original , double max Area , Size max Size ) {", "if ( original . get Width ( ) * original . get Height ( ) < max Area && original . get Width ( ) < max Size . get Width ( ) && original . get Height ( ) < max Size . get Height ( ) ) {", "return original ; }", "double ratio = Math . min ( Math . sqrt ( max Area / original . area ( ) ) , NUM_ ) ;", "int width = ( int ) Math . round ( original . width ( ) * ratio ) ;", "int height = ( int ) Math . round ( original . height ( ) * ratio ) ;", "if ( width > max Size . width ( ) || height > max Size . height ( ) ) {", "return compute Fit Within Size ( original , max Size ) ; }", "return new Size ( width , height ) ; }"]}
{"ids": "48978", "code": ["TCP Channel ( TCP Transport tr , TCP Endpoint ep ) {", "this . tr = tr ;", "this . ep = ep ; }"]}
{"ids": "13529", "code": ["public static Face draw Dir ( Direction dir , Mesh Model model , double min X , double min Y , double min Z , double max X , double max Y , double max Z , Cube Texture Coordinates texture Coordinates ) {", "switch ( dir ) {", "case DOWN :", "return draw Down ( model , min X , min Y , min Z , max X , max Y , max Z , texture Coordinates ) ;", "case UP :", "return draw Up ( model , min X , min Y , min Z , max X , max Y , max Z , texture Coordinates ) ;", "case NORTH :", "return draw North ( model , min X , min Y , min Z , max X , max Y , max Z , texture Coordinates ) ;", "case SOUTH :", "return draw South ( model , min X , min Y , min Z , max X , max Y , max Z , texture Coordinates ) ;", "case EAST :", "return draw East ( model , min X , min Y , min Z , max X , max Y , max Z , texture Coordinates ) ;", "case WEST :", "return draw West ( model , min X , min Y , min Z , max X , max Y , max Z , texture Coordinates ) ; }", "throw new Render Exception ( STR_ ) ; }"]}
{"ids": "52647", "code": ["public MAV Link Message ( MAV Link Schema schema , Byte Buffer buffer ) throws MAV Link Protocol Exception , MAV Link Unknown Message , Buffer Underflow Exception {", "if ( buffer . remaining ( ) < NON PAYLOAD LENGTH ) {", "throw new Buffer Underflow Exception ( ) ; }", "int start Pos = buffer . position ( ) ;", "byte start Sign = buffer . get ( ) ;", "if ( start Sign != START OF FRAME ) {", "throw new MAV Link Protocol Exception ( String . format ( STR_ , start Sign , START OF FRAME ) ) ; }", "int payload Len = buffer . get ( ) & NUM_ ;", "if ( buffer . remaining ( ) < payload Len + NON PAYLOAD LENGTH - NUM_ ) {", "buffer . position ( start Pos ) ;", "throw new Buffer Underflow Exception ( ) ; }", "sequence = buffer . get ( ) ;", "system ID = buffer . get ( ) & NUM_ ;", "component ID = buffer . get ( ) & NUM_ ;", "msg ID = buffer . get ( ) & NUM_ ;", "this . schema = schema ;", "this . definition = schema . get Message Definition ( msg ID ) ;", "if ( definition == null ) {", "buffer . position ( buffer . position ( ) + payload Len + CRC LENGTH ) ;", "throw new MAV Link Unknown Message ( String . format ( STR_ , msg ID ) ) ; }", "if ( payload Len != definition . payload Length ) {", "buffer . position ( buffer . position ( ) + payload Len + CRC LENGTH ) ;", "throw new MAV Link Unknown Message ( String . format ( STR_ , definition . name , msg ID , payload Len , definition . payload Length ) ) ; }", "this . payload = new byte [ definition . payload Length ] ;", "buffer . get ( payload ) ;", "crc = Short . reverse Bytes ( buffer . get Short ( ) ) & NUM_ ;", "int end Pos = buffer . position ( ) ;", "buffer . position ( start Pos ) ;", "int crc Calc = calculate CRC ( buffer ) ;", "buffer . position ( end Pos ) ;", "if ( crc != crc Calc ) {", "throw new MAV Link Unknown Message ( String . format ( STR_ , definition . name , msg ID , crc , crc Calc ) ) ; }", "this . payload BB = Byte Buffer . wrap ( payload ) ;", "payload BB . order ( schema . get Byte Order ( ) ) ; }"]}
{"ids": "40179", "code": ["protected Script Builder big Num ( long num ) {", "return big Num ( chunks . size ( ) , num ) ; }"]}
{"ids": "4920", "code": ["public final void change entries ( Brd Tracep p obj , Polyline p new polyline , int p keep at start count , int p keep at end count ) {", "int compensated half width = p obj . get half width ( ) + get clearance compensation ( p obj . clearance idx ( ) , p obj . get layer ( ) ) ;", "Array List < Shape Tile > changed shapes = offset shapes ( p new polyline , compensated half width , p keep at start count , p new polyline . plaline len ( - NUM_ ) - p keep at end count ) ;", "int old shape count = p obj . tree shape count ( this ) ;", "int new shape count = changed shapes . size ( ) + p keep at start count + p keep at end count ;", "Awtree Node Leaf [ ] new leaf arr = new Awtree Node Leaf [ new shape count ] ;", "Shape Tile [ ] new precalculated tree shapes = new Shape Tile [ new shape count ] ;", "Awtree Node Leaf [ ] old entries = p obj . get search tree entries ( this ) ;", "for ( int index = NUM_ ; index < p keep at start count ; ++ index ) {", "new leaf arr [ index ] = old entries [ index ] ;", "new precalculated tree shapes [ index ] = p obj . get tree shape ( this , index ) ; }", "for ( int index = p keep at start count ; index < old shape count - p keep at end count ; ++ index ) {", "remove leaf ( old entries [ index ] ) ; }", "for ( int i = NUM_ ; i < p keep at end count ; ++ i ) {", "int new index = new shape count - p keep at end count + i ;", "int old index = old shape count - p keep at end count + i ;", "new leaf arr [ new index ] = old entries [ old index ] ;", "new leaf arr [ new index ] . shape index in object = new index ;", "new precalculated tree shapes [ new index ] = p obj . get tree shape ( this , old index ) ; }", "for ( int index = p keep at start count ; index < new shape count - p keep at end count ; ++ index ) {", "new precalculated tree shapes [ index ] = changed shapes . get ( index - p keep at start count ) ; }", "p obj . set precalculated tree shapes ( new precalculated tree shapes , this ) ;", "for ( int index = p keep at start count ; index < new shape count - p keep at end count ; ++ index ) {", "new leaf arr [ index ] = insert ( p obj , index ) ; }", "p obj . set search tree entries ( this , new leaf arr ) ; }"]}
{"ids": "82227", "code": ["public void paint Component Background ( Graphics g ) {", "super . paint Component Background ( g ) ;", "int clip X = g . get Clip X ( ) ;", "int clip Y = g . get Clip Y ( ) ;", "int clip W = g . get Clip Width ( ) ;", "int clip H = g . get Clip Height ( ) ;", "int width = get Width ( ) ;", "int height = get Height ( ) ;", "int y = get Y ( ) ;", "if ( infinite ) {", "int block Size = get Width ( ) / NUM_ ;", "int x = get X ( ) + ( int ) ( ( ( ( float ) value ) / ( ( float ) max Value - min Value ) ) * ( get Width ( ) - block Size ) ) ;", "g . clip Rect ( x , y , block Size , height - NUM_ ) ; }", "else {", "if ( vertical ) {", "int actual Height = ( int ) ( ( ( ( float ) value ) / ( ( float ) max Value - min Value ) ) * get Height ( ) ) ;", "y += height - actual Height ; }", "else {", "width = ( int ) ( ( ( ( float ) value ) / ( ( float ) max Value - min Value ) ) * get Width ( ) ) ; }", "g . clip Rect ( get X ( ) , y , width , height ) ; }", "painting Full = true ;", "super . paint Component Background ( g ) ;", "painting Full = false ;", "g . set Clip ( clip X , clip Y , clip W , clip H ) ;", "if ( thumb Image != null && ! infinite ) {", "if ( ! vertical ) {", "int x Pos = get X ( ) + width - thumb Image . get Width ( ) / NUM_ ;", "x Pos = Math . max ( get X ( ) , x Pos ) ;", "x Pos = Math . min ( get X ( ) + get Width ( ) - thumb Image . get Width ( ) , x Pos ) ;", "g . draw Image ( thumb Image , x Pos , y + height / NUM_ - thumb Image . get Height ( ) / NUM_ ) ; }", "else {", "int y Pos = y ;", "g . draw Image ( thumb Image , get X ( ) + width / NUM_ - thumb Image . get Width ( ) / NUM_ , y Pos ) ; } } }"]}
{"ids": "70245", "code": ["public void add Action ( Entity Action ea ) {", "actions . add Element ( ea ) ;", "process Game Event ( new Game New Action Event ( this , ea ) ) ; }"]}
{"ids": "4480", "code": ["public static JSON Object read JSON Object ( final JSON Array json Array , final int index , final boolean required , final boolean not Null ) throws JSON Exception {", "if ( required ) {", "return json Array . get JSON Object ( index ) ; }", "if ( not Null && json Array . is Null ( index ) ) {", "throw new JSON Exception ( String . format ( Locale . US , NULL VALUE FORMAT ARRAY , index ) ) ; }", "JSON Object value = null ;", "if ( ! json Array . is Null ( index ) ) {", "value = json Array . get JSON Object ( index ) ; }", "return value ; }"]}
{"ids": "84852", "code": ["public static void wait Element To Not Be Present ( Search Context parent , By by , int wait In Seconds ) {", "Preconditions . check Not Null ( parent ) ;", "Preconditions . check Not Null ( by ) ;", "try {", "Web Element Wait wait = new Web Element Wait ( parent , wait In Seconds ) ;", "wait . until ( null ) ; }", "catch ( Timeout Exception e ) {", "throw new Timeout Exception ( String . format ( STR_ , by , wait In Seconds ) , e ) ; } }"]}
{"ids": "61858", "code": ["public boolean is Vimeo URL Valid ( ) {", "String video ID = get Extracted Identifier ( ) ;", "return video ID . length ( ) > NUM_ && Text Utils . is Digits Only ( video ID ) ; }"]}
{"ids": "59560", "code": ["private void update Downloaded Files ( SQ Lite Database db , String new Account Name , String old Account Name ) {", "String where Clause = Provider Table Meta . FILE ACCOUNT OWNER + STR_ + Provider Table Meta . FILE STORAGE PATH + STR_ ;", "Cursor c = db . query ( Provider Table Meta . FILE TABLE NAME , null , where Clause , new String [ ] { new Account Name } , null , null , null ) ;", "try {", "if ( c . move To First ( ) ) {", "String old Account Path = File Storage Utils . get Save Path ( old Account Name ) ;", "String new Account Path = File Storage Utils . get Save Path ( new Account Name ) ;", "File old Account Folder = new File ( old Account Path ) ;", "File new Account Folder = new File ( new Account Path ) ;", "old Account Folder . rename To ( new Account Folder ) ;", "do {", "String old Path = c . get String ( c . get Column Index ( Provider Table Meta . FILE STORAGE PATH ) ) ;", "OC File file = new OC File ( c . get String ( c . get Column Index ( Provider Table Meta . FILE PATH ) ) ) ;", "String new Path = File Storage Utils . get Default Save Path For ( new Account Name , file ) ;", "Content Values cv = new Content Values ( ) ;", "cv . put ( Provider Table Meta . FILE STORAGE PATH , new Path ) ;", "db . update ( Provider Table Meta . FILE TABLE NAME , cv , Provider Table Meta . FILE STORAGE PATH + STR_ , new String [ ] { old Path } ) ;", "Log OC . v ( STR_ , STR_ + old Path + STR_ + new Path ) ; }", "while ( c . move To Next ( ) ) ; } }", "finally {", "c . close ( ) ; } }"]}
{"ids": "64365", "code": ["public void dump Options ( ) {", "logger . info ( STR_ ) ;", "for ( Method getter : Get Configuration Interface . class . get Methods ( ) ) {", "String getter Name = getter . get Name ( ) ;", "try {", "Object result = getter . invoke ( Configuration Manager . get Current Profile ( ) ) ;", "if ( result instanceof Boolean ) {", "result = Localization Helper . get Yes Or No ( ( Boolean ) result ) ; }", "if ( result instanceof List ) {", "for ( int i = NUM_ ; i < ( ( List ) result ) . size ( ) ; i ++ ) {", "assert ( ( List ) result ) . get ( i ) instanceof Custom Catalog Entry ;", "Custom Catalog Entry c = ( ( List < Custom Catalog Entry > ) result ) . get ( i ) ;", "String Option Name = Helper . pad ( Localization . Main . get Text ( STR_ ) + STR_ + ( i + NUM_ ) + STR_ + c . get At Top ( ) . to String ( ) , STR_ , NUM_ ) + STR_ ;", "logger . info ( Option Name + c . get Label ( ) + STR_ + c . get Value ( ) . to String ( ) + STR_ + c . get At Top ( ) . to String ( ) ) ; } }", "else {", "String option Name = getter Name . substring ( NUM_ ) ;", "dump Option ( option Name , result ) ; } }", "catch ( Illegal Access Exception e ) {", "logger . warn ( STR_ , e ) ; }", "catch ( Invocation Target Exception e ) {", "logger . warn ( STR_ , e ) ; } }", "logger . info ( STR_ ) ; }"]}
{"ids": "83520", "code": ["private Json Node parse Language Resource ( Resource resource ) throws IO Exception {", "Input Stream stream = resource . as Stream ( ) ;", "if ( stream == null ) return null ;", "try {", "Json Node tree = mapper . read Tree ( stream ) ;", "return tree ; }", "finally {", "stream . close ( ) ; } }"]}
{"ids": "34315", "code": ["public Collection < Tuple 2 < Transition State , Double > > start States ( ) {", "List < Tuple 2 < Transition State , Double > > result = new Array List < Tuple 2 < Transition State , Double > > ( ) ; {", "double score = Math . log ( LINE MRGN PROB ) ;", "add No Sub Glyph Start State ( result , new int [ NUM_ ] , Transition State Type . LMRGN , - NUM_ , score ) ; }", "for ( int dest Language = NUM_ ; dest Language < num Languages ; ++ dest Language ) {", "Single Language Model dest LM = lm . get ( dest Language ) ;", "double dest Language Prior = lm . language Prior ( dest Language ) ;", "for ( int c : dest LM . get Active Characters ( ) ) {", "if ( c != space Char Index ) {", "double score = Math . log ( NUM_ - LINE MRGN PROB ) + Math . log ( get Ngram Prob ( dest LM , new int [ NUM_ ] , c ) ) + Math . log ( dest Language Prior ) ;", "add Glyph Start States ( result , c , new int [ ] { c } , Transition State Type . TMPL , dest Language , score ) ; } } } {", "double total Space Prob = NUM_ ;", "for ( int language = NUM_ ; language < num Languages ; ++ language ) total Space Prob += get Ngram Prob ( lm . get ( language ) , new int [ NUM_ ] , space Char Index ) * lm . language Prior ( language ) ;", "double score = Math . log ( NUM_ - LINE MRGN PROB ) + Math . log ( total Space Prob ) ;", "add No Sub Glyph Start State ( result , new int [ ] { space Char Index } , Transition State Type . TMPL , - NUM_ , score ) ; }", "return result ; }"]}
{"ids": "61926", "code": ["public Kernel Density Function ( Collection < double [ ] > points ) {", "this ( points . to Array ( new double [ points . size ( ) ] [ ] ) ) ; }"]}
{"ids": "44524", "code": ["private static Object clone Serializable Object ( Object o ) throws IO Exception , Class Not Found Exception {", "Byte Array Output Stream b = new Byte Array Output Stream ( ) ;", "Object Output Stream out = new Object Output Stream ( b ) ;", "out . write Object ( o ) ;", "out . flush ( ) ;", "out . close ( ) ;", "Byte Array Input Stream bi = new Byte Array Input Stream ( b . to Byte Array ( ) ) ;", "Object Input Stream in = new Object Input Stream ( bi ) ;", "return in . read Object ( ) ; }"]}
{"ids": "15186", "code": ["private T match Tokens ( String target Token , String request Token ) {", "int wildcard Index = NUM_ ;", "if ( target Token == null && request Token == null ) {", "return exact Match ; }", "if ( target Token == null || request Token == null ) {", "return no Match ; }", "int begin Target Index = NUM_ ;", "int begin Request Index = NUM_ ;", "String substr = null ;", "int target Token Length = target Token . length ( ) ;", "int request Token Length = request Token . length ( ) ;", "if ( target Token . index Of ( one Level Wildcard , begin Target Index ) != - NUM_ ) {", "while ( ( wildcard Index = target Token . index Of ( one Level Wildcard , begin Target Index ) ) != - NUM_ ) {", "if ( wildcard Index > begin Target Index ) {", "substr = target Token . substring ( begin Target Index , wildcard Index ) ;", "if ( ( begin Request Index = request Token . index Of ( substr , begin Request Index ) ) == - NUM_ ) {", "return no Match ; }", "begin Target Index = begin Target Index + substr . length ( ) + one Level Wildcard Length ;", "begin Request Index = begin Request Index + substr . length ( ) ; }", "else {", "if ( wildcard Index == begin Target Index ) {", "if ( target Token Length == one Level Wildcard Length ) {", "return wildcard Match ; }", "else {", "begin Target Index = begin Target Index + one Level Wildcard Length ;", "continue ; } } } }", "if ( begin Target Index >= target Token Length ) {", "return wildcard Match ; }", "String target Str = target Token . substring ( begin Target Index , target Token Length ) ;", "String rem Request = request Token . substring ( begin Request Index , request Token Length ) ;", "int rem Request Index = - NUM_ ;", "if ( ( rem Request Index = rem Request . last Index Of ( target Str , rem Request . length ( ) - NUM_ ) ) == - NUM_ ) {", "return no Match ; }", "else {", "begin Request Index = begin Request Index + rem Request Index ;", "if ( begin Request Index + target Str . length ( ) >= request Token Length ) {", "return wildcard Match ; }", "else {", "return no Match ; } } }", "else {", "if ( target Token . equals ( request Token ) ) {", "return exact Match ; } }", "return no Match ; }"]}
{"ids": "42378", "code": ["public void add Vertex ( Value Graph Vertex v ) {", "if ( vertices . add ( v ) ) {", "if ( v . represents Parameter ( ) ) {", "n Parameter ++ ; }", "if ( representative V == null ) {", "representative V = v ; } } }"]}
{"ids": "77145", "code": ["public Set < String > files ( ) {", "if ( set Files == null ) {", "throw new Illegal State Exception ( STR_ ) ; }", "return Collections . unmodifiable Set ( set Files ) ; }"]}
{"ids": "76250", "code": ["private boolean is Assignable From ( Throwable concrete Throwable , Set < Class < ? extends Throwable > > throwable Classes ) {", "for ( Class < ? extends Throwable > t : throwable Classes ) {", "if ( t . is Assignable From ( concrete Throwable . get Class ( ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "84155", "code": ["protected void print ( int v ) throws IO Exception {", "print ( String . value Of ( v ) ) ; }"]}
{"ids": "34091", "code": ["public Object 2 Double Open Hash Map < Int RB Tree Set > confidence Map ( ) {", "List < Item Set > item Sets = learn ( ) ;", "Object 2 Double Open Hash Map < Int RB Tree Set > confidence Map = new Object 2 Double Open Hash Map < > ( item Sets . size ( ) ) ;", "for ( Item Set item Set : item Sets ) {", "Int RB Tree Set item Set Copy = new Int RB Tree Set ( item Set . items ) ;", "confidence Map . put ( item Set Copy , item Set . support / ( double ) set Count ) ; }", "return confidence Map ; }"]}
{"ids": "1154", "code": ["public static boolean is All Alpha ( String str ) {", "if ( str == null ) return false ;", "for ( int i = str . length ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "if ( ! Character . is Letter ( str . char At ( i ) ) ) return false ; }", "return true ; }"]}
{"ids": "52803", "code": ["private void extract ( int minsupp , int minlength , int maxlength , int item , int [ ] postfix , int plen , int [ ] buf 2 , int [ ] buf 3 , boolean destruct , Collector col ) {", "if ( header [ item ] == null ) {", "return ; }", "if ( header [ item ] . sibling == null ) {", "if ( header [ item ] . count < minsupp ) {", "return ; }", "extract Linear ( header [ item ] . count , minsupp , minlength , maxlength , item , postfix , plen , buf 2 , col ) ;", "if ( destruct ) {", "Arrays . fill ( header , null ) ; }", "return ; }", "int support = NUM_ ;", "for ( FP Node cur = header [ item ] ; cur != null ; cur = cur . sibling ) {", "support += cur . count ; }", "if ( support < minsupp ) {", "return ; }", "Arrays . fill ( buf 3 , NUM_ ) ;", "for ( FP Node cur = header [ item ] ; cur != null ; cur = cur . sibling ) {", "for ( FP Node parent = cur . parent ; parent . key >= NUM_ ; parent = parent . parent ) {", "buf 3 [ parent . key ] += cur . count ; } }", "final int mminlength = minlength - ( plen + NUM_ ) ;", "if ( mminlength > NUM_ ) {", "int fparents = NUM_ ;", "for ( int i = NUM_ ; i < item ; i ++ ) {", "if ( buf 3 [ i ] >= minsupp ) {", "fparents += NUM_ ; } }", "if ( fparents < mminlength ) {", "return ; } }", "final int last = item - NUM_ ;", "FP Tree proj = new FP Tree ( item ) ;", "for ( FP Node cur = header [ item ] ; cur != null ; cur = cur . sibling ) {", "int j = buf 2 . length ;", "for ( FP Node parent = cur . parent ; parent . key >= NUM_ ; parent = parent . parent ) {", "if ( buf 3 [ parent . key ] >= minsupp ) {", "buf 2 [ -- j ] = parent . key ; } }", "if ( buf 2 . length - j >= mminlength ) {", "proj . insert ( proj , buf 2 , j , buf 2 . length , cur . count ) ; } }", "proj . reduce Memory ( ) ;", "postfix [ plen ++ ] = item ;", "if ( plen >= minlength && plen <= maxlength ) {", "col . collect ( support , postfix , NUM_ , plen ) ; }", "for ( int j = last ; j >= NUM_ ; j -- ) {", "proj . extract ( minsupp , minlength , maxlength , j , postfix , plen , buf 2 , buf 3 , destruct , col ) ; }", "if ( destruct ) {", "header [ item ] = null ; } }"]}
{"ids": "45232", "code": ["public void save ( File key Store , String type , char [ ] password , char [ ] key Password , String ca Alias ) throws General Security Exception , IO Exception {", "Key Store store = Key Store . get Instance ( type ) ;", "store . load ( null , password ) ;", "store . set Key Entry ( ca Alias , ca Key , key Password , ca Certs ) ;", "Output Stream out = new File Output Stream ( key Store ) ;", "try {", "store . store ( out , password ) ; }", "catch ( IO Exception ioe ) {", "ioe . print Stack Trace ( ) ; }", "finally {", "out . close ( ) ; } }"]}
{"ids": "56376", "code": ["public Or Query Builder add ( Query Builder filter Builder ) {", "filters . add ( filter Builder ) ;", "return this ; }"]}
{"ids": "4915", "code": ["public final boolean split traces keep point ( ) {", "if ( keep point == null ) return false ;", "Item Selection Filter filter = new Item Selection Filter ( Item Selection Choice . TRACES ) ;", "Collection < Brd Item > picked items = r board . pick items ( keep point . keep point , keep point . on layer , filter ) ;", "for ( Brd Item curr item : picked items ) {", "Brd Tracep a trace = ( Brd Tracep ) curr item ;", "int line idx = a trace . polyline find line idx ( keep point . keep point ) ;", "if ( line idx < NUM_ ) continue ;", "Array List < Brd Tracep > clean list = a trace . split with end point ( line idx , keep point . keep point ) ;", "return clean list . size ( ) > NUM_ ; }", "return false ; }"]}
{"ids": "5974", "code": ["public static byte [ ] flip All Bits In Place ( byte [ ] bytes , int index , int length ) {", "int end Index = Math . min ( bytes . length , index + length ) ;", "for ( int i = index ; i < end Index ; i ++ ) {", "bytes [ i ] = ( byte ) ( bytes [ i ] ^ NUM_ ) ; }", "return bytes ; }"]}
{"ids": "5180", "code": ["private void add Users ( User [ ] users , Local Configuration configuration ) {", "for ( User user : users ) {", "configuration . add User ( user . create User ( ) ) ; } }"]}
{"ids": "53728", "code": ["void try To Drain Buffers ( ) {", "if ( eviction Lock . try Lock ( ) ) {", "try {", "drain Status . lazy Set ( PROCESSING ) ;", "drain Buffers ( ) ; }", "finally {", "drain Status . compare And Set ( PROCESSING , IDLE ) ;", "eviction Lock . unlock ( ) ; } } }"]}
{"ids": "62908", "code": ["public static boolean copy File ( File source , File dest ) {", "File parent Dest = dest . get Parent File ( ) ;", "if ( ! parent Dest . exists ( ) ) {", "if ( ! create Directory ( parent Dest . get Absolute Path ( ) ) ) {", "return false ; } }", "try {", "Files . copy ( source . to Path ( ) , dest . to Path ( ) ) ;", "return true ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "return false ; } }"]}
{"ids": "67629", "code": ["@ Override public void generate Rss ( Xml Writer w , Extension Profile ext Profile ) throws IO Exception {", "Array List < Xml Writer . Attribute > attrs = new Array List < Xml Writer . Attribute > ( NUM_ ) ;", "if ( mime Type != null ) {", "attrs . add ( new Xml Writer . Attribute ( STR_ , mime Type . get Media Type ( ) ) ) ; }", "if ( uri != null ) {", "attrs . add ( new Xml Writer . Attribute ( STR_ , uri ) ) ; }", "if ( length != - NUM_ ) {", "attrs . add ( new Xml Writer . Attribute ( STR_ , Long . to String ( length ) ) ) ; }", "w . simple Element ( Namespaces . rss Ns , STR_ , attrs , null ) ; }"]}
{"ids": "78354", "code": ["public static boolean delete Directory ( final File path ) {", "if ( path . exists ( ) ) {", "File [ ] files = path . list Files ( ) ;", "for ( File file : files ) {", "if ( file . is Directory ( ) ) {", "delete Directory ( file ) ; }", "else {", "file . delete ( ) ; } } }", "return path . delete ( ) ; }"]}
{"ids": "82038", "code": ["public void morph ( Component source , Component destination , int duration , Runnable on Completion ) {", "morph ( source , destination , duration , false , on Completion ) ; }"]}
{"ids": "33054", "code": ["private boolean starts New Hunk ( String string ) {", "if ( string . length ( ) == NUM_ ) return true ;", "return is Legal Char ( string . char At ( NUM_ ) ) ; }"]}
{"ids": "67878", "code": ["public void clear Values ( ) {", "value Map . clear ( ) ; }"]}
{"ids": "68843", "code": ["private Hash Map < String , byte [ ] > read Chars ( byte [ ] d ) {", "Hash Map < String , byte [ ] > hm = new Hash Map < String , byte [ ] > ( ) ;", "int i = find Slash Name ( d , STR_ ) ;", "if ( i < NUM_ ) {", "return hm ; }", "PS Parser psp = new PS Parser ( d , i ) ;", "while ( true ) {", "String s = psp . read Thing ( ) ;", "char c = s . char At ( NUM_ ) ;", "if ( c == STR_ ) {", "int len = Integer . parse Int ( psp . read Thing ( ) ) ;", "String go = psp . read Thing ( ) ;", "if ( go . equals ( STR_ ) || go . equals ( STR_ ) ) {", "psp . set Loc ( psp . get Loc ( ) + NUM_ ) ;", "byte [ ] line = psp . get N Encoded Bytes ( len , password , len IV ) ;", "hm . put ( s . substring ( NUM_ ) , line ) ; } }", "else if ( s . equals ( STR_ ) ) {", "break ; } }", "return hm ; }"]}
{"ids": "13968", "code": ["public static byte [ ] string To Byte Array ( String input ) {", "char chars [ ] = input . to Char Array ( ) ;", "byte bytes [ ] = new byte [ chars . length ] ;", "for ( int i = NUM_ ; i < chars . length ; i ++ ) {", "bytes [ i ] = ( byte ) chars [ i ] ; }", "return bytes ; }"]}
{"ids": "9310", "code": ["public void play File For User ( String file Name , String user Name ) throws Sound Playback Exception {", "if ( user Name == null || user Name . is Empty ( ) ) {", "user Name = app Properties . get Property ( STR_ ) ; }", "try {", "Guild guild = get Users Guild ( user Name ) ;", "join Users Current Channel ( user Name ) ;", "play File ( file Name , guild ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "54446", "code": ["public void add Value Key Name ( String key ) {", "value Key Names . add ( key ) ; }"]}
{"ids": "52840", "code": ["public Assignment update ( Border border ) {", "Arrays . sort ( cs ) ;", "int j = NUM_ ;", "boolean found = ( cs [ NUM_ ] . core == border . core ) ;", "for ( int i = NUM_ ; i < cs . length ; i ++ ) {", "if ( cs [ i ] . core != cs [ i - NUM_ ] . core ) {", "cs [ j ++ ] = cs [ i ] ; }", "found |= ( cs [ i ] . core == border . core ) ; }", "if ( found ) {", "if ( j == NUM_ ) {", "Border r = cs [ NUM_ ] ;", "cs = null ;", "return r ; }", "if ( j < cs . length ) {", "cs = Arrays . copy Of ( cs , j ) ; }", "return this ; }", "if ( j + NUM_ != cs . length ) {", "cs = Arrays . copy Of ( cs , j + NUM_ ) ; }", "cs [ j ] = border ;", "return this ; }"]}
{"ids": "13325", "code": ["public static String from Char ( int value ) {", "if ( value > NUM_ ) return null ;", "String name ;", "initialize ( ) ;", "name = ( String ) by Char . get ( new Integer ( value ) ) ;", "return name ; }"]}
{"ids": "53994", "code": ["public static List < String > split Lines ( final String content ) {", "if ( content == null || content . length ( ) == NUM_ ) return Collections . empty List ( ) ;", "String [ ] lines = content . split ( STR_ ) ;", "return Arrays . as List ( lines ) ; }"]}
{"ids": "7482", "code": ["@ Override public void draw ( Graphics 2 D g 2 , Rectangle 2 D area , Point 2 D anchor , Plot State state , Plot Rendering Info info ) {", "boolean b 1 = ( area . get Width ( ) <= MINIMUM WIDTH TO DRAW ) ;", "boolean b 2 = ( area . get Height ( ) <= MINIMUM HEIGHT TO DRAW ) ;", "if ( b 1 || b 2 ) {", "return ; }", "if ( info != null ) {", "info . set Plot Area ( area ) ; }", "Rectangle Insets insets = get Insets ( ) ;", "insets . trim ( area ) ;", "draw Chip Grid ( g 2 , area ) ;", "draw Wafer Edge ( g 2 , area ) ; }"]}
{"ids": "73553", "code": ["private static void register Components ( ) {", "register Component ( Bar Chart Component . class , Bar Chart Gui . class ) ;", "register Component ( Doc Viewer Component . class , Doc Viewer Desktop Component . class ) ;", "register Component ( Console Component . class , Console Desktop Component . class ) ;", "register Component ( Display Component . class , Display Component Desktop Gui . class ) ;", "register Component ( Data World Component . class , Data World Desktop Component . class ) ;", "register Component ( Histogram Component . class , Histogram Gui . class ) ;", "register Component ( Network Component . class , Network Desktop Component . class ) ;", "register Component ( Odor World Component . class , Odor World Desktop Component . class ) ;", "register Component ( Pie Chart Component . class , Pie Chart Gui . class ) ;", "register Component ( Projection Component . class , Projection Gui . class ) ;", "register Component ( Reader Component . class , Reader Component Desktop Gui . class ) ;", "register Component ( Scatter Plot Component . class , Scatter Plot Gui . class ) ;", "register Component ( Time Series Plot Component . class , Time Series Plot Gui . class ) ;", "register Component ( Raster Plot Component . class , Raster Plot Gui . class ) ;", "register Component ( Vision World Component . class , Vision World Desktop Component . class ) ;", "register Component ( Game Component . class , Game Desktop Component . class ) ;", "register Component ( Device Interaction Component . class , Device Interaction Desktop Component . class ) ; }"]}
{"ids": "46081", "code": ["private long skip Input Bytes ( long n ) throws IO Exception {", "cb Lock . lock ( ) ;", "try {", "return iis . skip Bytes ( n ) ; }", "finally {", "cb Lock . unlock ( ) ; } }"]}
{"ids": "9627", "code": ["public byte [ ] generate 64 Bit Hash Id ( ) throws Crypto Exception {", "try {", "DER Bit String public Key Bit String = encode Public Key As Bit String ( public Key ) ;", "byte [ ] hash = Digest Util . get Message Digest ( public Key Bit String . get Bytes ( ) , Digest Type . SHA 1 ) ;", "byte [ ] sub Hash = Arrays . copy Of Range ( hash , NUM_ , NUM_ ) ;", "sub Hash [ NUM_ ] &= NUM_ ;", "sub Hash [ NUM_ ] |= NUM_ ;", "return sub Hash ; }", "catch ( IO Exception ex ) {", "throw new Crypto Exception ( res . get String ( STR_ ) , ex ) ; } }"]}
{"ids": "72075", "code": ["public static < C extends Configuration Client , S extends Configuration > Create Sub Command Handler < C , S > create ( Sub Command Argument Parser parser , Managed Object Path < ? , ? > p , Optional Relation Definition < C , S > r ) throws Argument Exception {", "return new Create Sub Command Handler < > ( parser , p , r , null , p . child ( r ) ) ; }"]}
{"ids": "39540", "code": ["private Figure read Line Element ( IXML Element elem ) throws IO Exception {", "Hash Map < Attribute Key , Object > a = new Hash Map < Attribute Key , Object > ( ) ;", "read Core Attributes ( elem , a ) ;", "read Transform Attribute ( elem , a ) ;", "read Opacity Attribute ( elem , a ) ;", "read Line Attributes ( elem , a ) ;", "if ( FILL COLOR . get ( a ) != null && STROKE COLOR . get ( a ) == null ) {", "STROKE COLOR . put ( a , FILL COLOR . get ( a ) ) ; }", "if ( FILL GRADIENT . get ( a ) != null && STROKE GRADIENT . get ( a ) == null ) {", "STROKE GRADIENT . put ( a , FILL GRADIENT . get ( a ) ) ; }", "FILL COLOR . put ( a , null ) ;", "FILL GRADIENT . put ( a , null ) ;", "double x 1 = to Number ( elem , read Attribute ( elem , STR_ , STR_ ) ) ;", "double y 1 = to Number ( elem , read Attribute ( elem , STR_ , STR_ ) ) ;", "double x 2 = to Number ( elem , read Attribute ( elem , STR_ , STR_ ) ) ;", "double y 2 = to Number ( elem , read Attribute ( elem , STR_ , STR_ ) ) ;", "Figure figure = factory . create Line ( x 1 , y 1 , x 2 , y 2 , a ) ;", "element Objects . put ( elem , figure ) ;", "return figure ; }"]}
{"ids": "78266", "code": ["public boolean is Set Call Type ( ) {", "return isset bit vector . get ( CALLTYPE ISSET ID ) ; }"]}
{"ids": "81249", "code": ["private I Buffer map Source ( Source Mapper mapper , I Binary Type info , I Class File buffer Owner ) {", "char [ ] contents = mapper . find Source ( get Type ( ) , info ) ;", "if ( contents != null ) {", "I Buffer buffer = Buffer Manager . create Buffer ( buffer Owner ) ;", "if ( buffer == null ) return null ;", "Buffer Manager buf Manager = get Buffer Manager ( ) ;", "buf Manager . add Buffer ( buffer ) ;", "if ( buffer . get Characters ( ) == null ) {", "buffer . set Contents ( contents ) ; }", "buffer . add Buffer Changed Listener ( this ) ;", "mapper . map Source ( get Outer Most Enclosing Type ( ) , contents , info ) ;", "return buffer ; }", "else {", "I Buffer buffer = Buffer Manager . create Null Buffer ( buffer Owner ) ;", "if ( buffer == null ) return null ;", "Buffer Manager buf Manager = get Buffer Manager ( ) ;", "buf Manager . add Buffer ( buffer ) ;", "buffer . add Buffer Changed Listener ( this ) ;", "return buffer ; } }"]}
{"ids": "75012", "code": ["public J File Data Store Chooser ( Shell parent , int style , final List < String > extensions ) {", "this ( parent , style , associations ( extensions ) ) ; }"]}
{"ids": "21461", "code": ["private void compute Static Load Metrics ( Access Profile access Profile ) throws Base Collection Exception {", "URI storage System Id = access Profile . get System Id ( ) ;", "Storage System storage System = null ;", "try {", "storage System = db Client . query Object ( Storage System . class , storage System Id ) ;", "logger . info ( STR_ , storage System . get Label ( ) ) ;", "VN Xe Api Client client = get Vnx Unity Client ( access Profile ) ;", "List < VN Xe Nas Server > nas Servers = client . get Nas Servers ( ) ;", "for ( VN Xe Nas Server nas Server : nas Servers ) {", "if ( ( nas Server . get Mode ( ) == VN Xe Nas Server . Nas Server Mode Enum . DESTINATION ) || nas Server . get Is Replication Destination ( ) ) {", "logger . debug ( STR_ ) ;", "continue ; }", "if ( nas Server . get Is System ( ) ) {", "continue ; }", "Virtual NAS virtual NAS = findv Nas By Native Id ( storage System , nas Server . get Id ( ) ) ;", "if ( virtual NAS != null ) {", "logger . info ( STR_ , nas Server . get Name ( ) ) ;", "String Map db Metrics = virtual NAS . get Metrics ( ) ;", "if ( db Metrics == null ) {", "db Metrics = new String Map ( ) ; }", "String Map tmp Db Metrics = populate Db Metrics ( nas Server , client ) ;", "db Metrics . put All ( tmp Db Metrics ) ;", "virtual NAS . set Metrics ( db Metrics ) ;", "db Client . update Object ( virtual NAS ) ; } } }", "catch ( Exception e ) {", "logger . error ( STR_ , storage System Id , e ) ; } }"]}
{"ids": "82418", "code": ["public final short read Short ( ) throws java . io . IO Exception {", "read Fully ( scratch , NUM_ , NUM_ ) ;", "return ( short ) ( ( scratch [ NUM_ ] << NUM_ ) | ( scratch [ NUM_ ] & NUM_ ) ) ; }"]}
{"ids": "35693", "code": ["public static Pronghorn Stage find Stage By Path ( Graph Manager m , int ... path ) {", "int ordinal = path [ NUM_ ] ;", "int i = NUM_ ;", "int limit = m . stage Id To Stage . length ;", "while ( i < limit ) {", "if ( null != m . stage Id To Stage [ i ] ) {", "if ( - NUM_ == m . mult Input Ids [ m . stage Id To Inputs Begin Idx [ m . stage Id To Stage [ i ] . stage Id ] ] ) {", "if ( -- ordinal <= NUM_ ) {", "return find Stage By Path ( m , m . stage Id To Stage [ i ] , NUM_ , path ) ; } } }", "i ++ ; }", "throw new Unsupported Operation Exception ( STR_ + path [ NUM_ ] ) ; }"]}
{"ids": "37731", "code": ["public static double [ ] calculate T Stats ( double [ ] coef , double [ ] stderror , int k ) {", "double [ ] result = new double [ k ] ;", "for ( int i = NUM_ ; i < k ; i ++ ) {", "result [ i ] = coef [ i ] / stderror [ i ] ; }", "return result ; }"]}
{"ids": "35209", "code": ["static void run Bootstrappers ( final Core Early Component early , final List < Heroic Bootstrap > bootstrappers ) throws Exception {", "for ( final Heroic Bootstrap bootstrap : bootstrappers ) {", "try {", "bootstrap . run ( early ) ; }", "catch ( Exception e ) {", "throw new Exception ( STR_ + bootstrap , e ) ; } } }"]}
{"ids": "38547", "code": ["protected void save Buffer ( String name ) {", "String Buffer sb = m History . get Named Buffer ( name ) ;", "if ( sb != null ) {", "if ( m Save Out . save ( sb ) ) {", "m Log . log Message ( STR_ ) ; } } }"]}
{"ids": "22069", "code": ["public List < Recommendation > schedule Storage ( Virtual Array src Varray , Set < URI > requested V Plex Systems , URI src Storage System , Virtual Pool src Vpool , boolean is HA Request , Virtual Array requested Ha Varray , Virtual Pool ha Vpool , Virtual Pool Capability Values Wrapper capabilities , Project project , Vpool Use vpool Use , Map < Vpool Use , List < Recommendation > > current Recommendations ) {", "log . info ( STR_ ) ;", "if ( ! is HA Request ) {", "return schedule Storage For Local VPLEX Volume ( src Varray , requested V Plex Systems , src Storage System , src Vpool , capabilities , project , vpool Use , current Recommendations ) ; }", "else {", "return schedule Storage For Distributed VPLEX Volume ( src Varray , requested V Plex Systems , src Storage System , src Vpool , requested Ha Varray , ha Vpool , capabilities , project , vpool Use , current Recommendations ) ; } }"]}
{"ids": "78854", "code": ["@ Not Null public static List < String > complete Relative Path ( @ Not Null String base Dir , @ Not Null String shown Base Dir , @ Not Null String relative Path ) {", "List < String > result = Lists . new Linked List ( ) ;", "String bash Base Dir = OS Util . to Bash Compatible ( base Dir ) ;", "for ( String path : complete Absolute Path ( base Dir + File . separator + relative Path , Predicates . < File > always True ( ) ) ) {", "if ( path . starts With ( bash Base Dir ) ) {", "result . add ( shown Base Dir + path . substring ( bash Base Dir . length ( ) ) ) ; } }", "return result ; }"]}
{"ids": "35353", "code": ["protected boolean is File Specifying Module Specifier ( String specifier ) {", "return specifier . length ( ) > NUM_ && specifier . char At ( specifier . length ( ) - NUM_ ) != I Path . SEPARATOR ; }"]}
{"ids": "21493", "code": ["private void insert Expected Pool Settings Per Tier ( CIM Object Path capabilities Path , Map < String , Object > key Map ) {", "List < String > expected Pool Settings Tier = ( List < String > ) key Map . get ( Constants . VNXPOOLCAPABILITIES TIER ) ;", "expected Pool Settings Tier . add ( capabilities Path . to String ( ) + Constants . HYPHEN + Constants . NO DATA MOVEMENT ) ;", "expected Pool Settings Tier . add ( capabilities Path . to String ( ) + Constants . HYPHEN + Constants . AUTO TIER ) ;", "expected Pool Settings Tier . add ( capabilities Path . to String ( ) + Constants . HYPHEN + Constants . HIGH AVAILABLE TIER ) ;", "expected Pool Settings Tier . add ( capabilities Path . to String ( ) + Constants . HYPHEN + Constants . LOW AVAILABLE TIER ) ;", "expected Pool Settings Tier . add ( capabilities Path . to String ( ) + Constants . HYPHEN + Constants . START HIGH THEN AUTO TIER ) ; }"]}
{"ids": "33185", "code": ["private static final void transfer Streams ( Input Stream source , Output Stream destination , String path , I Progress Monitor monitor ) throws Core Exception {", "monitor = Policy . monitor For ( monitor ) ;", "try {", "synchronized ( buffer ) {", "while ( true ) {", "int bytes Read = - NUM_ ;", "try {", "bytes Read = source . read ( buffer ) ; }", "catch ( IO Exception e ) {", "String msg = NLS . bind ( Messages . failed Read During Write , path ) ;", "Policy . error ( EFS . ERROR READ , msg , e ) ; }", "try {", "if ( bytes Read == - NUM_ ) {", "destination . close ( ) ;", "break ; }", "destination . write ( buffer , NUM_ , bytes Read ) ; }", "catch ( IO Exception e ) {", "String msg = NLS . bind ( Messages . could Not Write , path ) ;", "Policy . error ( EFS . ERROR WRITE , msg , e ) ; }", "monitor . worked ( NUM_ ) ; } } }", "finally {", "Policy . safe Close ( source ) ;", "Policy . safe Close ( destination ) ; } }"]}
{"ids": "4365", "code": ["private int path Position At Level ( int org Unit Level ) {", "return ( org Unit Level - NUM_ ) * NUM_ + NUM_ ; }"]}
{"ids": "37746", "code": ["protected void add Numeric Train Class ( double class Value , double weight ) {", "if ( class Value > m Max Target ) {", "m Max Target = class Value ; }", "if ( class Value < m Min Target ) {", "m Min Target = class Value ; }", "if ( m Train Class Vals == null ) {", "m Train Class Vals = new double [ NUM_ ] ;", "m Train Class Weights = new double [ NUM_ ] ; }", "if ( m Num Train Class Vals == m Train Class Vals . length ) {", "double [ ] temp = new double [ m Train Class Vals . length * NUM_ ] ;", "System . arraycopy ( m Train Class Vals , NUM_ , temp , NUM_ , m Train Class Vals . length ) ;", "m Train Class Vals = temp ;", "temp = new double [ m Train Class Weights . length * NUM_ ] ;", "System . arraycopy ( m Train Class Weights , NUM_ , temp , NUM_ , m Train Class Weights . length ) ;", "m Train Class Weights = temp ; }", "m Train Class Vals [ m Num Train Class Vals ] = class Value ;", "m Train Class Weights [ m Num Train Class Vals ] = weight ;", "m Num Train Class Vals ++ ; }"]}
{"ids": "9166", "code": ["private List < Group > parse Groups ( JSON Array groups , String group Type ) throws JSON Exception , Ade Usage Exception {", "if ( groups . length ( ) == NUM_ ) throw new Ade Usage Exception ( STR_ + group Type ) ;", "List < Group > current Groups = new Array List < Group > ( ) ;", "for ( int i = NUM_ ; i < groups . length ( ) ; i ++ ) {", "JSON Object group = groups . get JSON Object ( i ) ;", "String name = group . get String ( STR_ ) ;", "String data Type = group . get String ( STR_ ) ;", "short eval Order = group . get Short ( STR_ ) ;", "String rule Name = group . get String ( STR_ ) ;", "if ( ! verify String Param ( name , NUM_ , STR_ ) || name . equals Ignore Case ( STR_ ) || ! validate Data Type ( data Type ) || eval Order < NUM_ || ! verify String Param ( rule Name , NUM_ , STR_ ) ) {", "throw new Ade Usage Exception ( STR_ + group Type + STR_ ) ; }", "current Groups . add ( new Group ( name , Group Type . value Of ( group Type ) , Data Type . value Of ( data Type . to Upper Case ( ) ) , eval Order , rule Name ) ) ; }", "validate Evaluation Order And Name ( current Groups ) ;", "return current Groups ; }"]}
{"ids": "43244", "code": ["public Double Fft 1 d ( int n ) {", "if ( n < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . n = n ;", "if ( ! Concurrency Utils . is Power Of 2 ( n ) ) {", "if ( get Reminder ( n , factors ) >= NUM_ ) {", "plan = Plans . BLUESTEIN ;", "n Bluestein = Concurrency Utils . next Pow 2 ( n * NUM_ - NUM_ ) ;", "bk 1 = new double [ NUM_ * n Bluestein ] ;", "bk 2 = new double [ NUM_ * n Bluestein ] ;", "this . ip = new int [ NUM_ + ( int ) Math . ceil ( NUM_ + ( NUM_ << ( int ) ( Math . log ( n Bluestein + NUM_ ) / Math . log ( NUM_ ) ) / NUM_ ) ) ] ;", "this . w = new double [ n Bluestein ] ;", "int twon = NUM_ * n Bluestein ;", "nw = ip [ NUM_ ] ;", "if ( twon > ( nw << NUM_ ) ) {", "nw = twon > > NUM_ ;", "makewt ( nw ) ; }", "nc = ip [ NUM_ ] ;", "if ( n Bluestein > ( nc << NUM_ ) ) {", "nc = n Bluestein > > NUM_ ;", "makect ( nc , w , nw ) ; }", "bluesteini ( ) ; }", "else {", "plan = Plans . MIXED RADIX ;", "wtable = new double [ NUM_ * n + NUM_ ] ;", "wtable r = new double [ NUM_ * n + NUM_ ] ;", "cffti ( ) ;", "rffti ( ) ; } }", "else {", "plan = Plans . SPLIT RADIX ;", "this . ip = new int [ NUM_ + ( int ) Math . ceil ( NUM_ + ( NUM_ << ( int ) ( Math . log ( n + NUM_ ) / Math . log ( NUM_ ) ) / NUM_ ) ) ] ;", "this . w = new double [ n ] ;", "int twon = NUM_ * n ;", "nw = ip [ NUM_ ] ;", "if ( twon > ( nw << NUM_ ) ) {", "nw = twon > > NUM_ ;", "makewt ( nw ) ; }", "nc = ip [ NUM_ ] ;", "if ( n > ( nc << NUM_ ) ) {", "nc = n > > NUM_ ;", "makect ( nc , w , nw ) ; } } }"]}
{"ids": "9637", "code": ["@ Override public void drag Gesture Recognized ( Drag Gesture Event evt ) {", "Drag Entry drag Entry = kse Frame . drag Selected Entry ( ) ;", "if ( drag Entry == null ) {", "return ; }", "Image Icon icon = drag Entry . get Image ( ) ;", "Toolkit toolkit = Toolkit . get Default Toolkit ( ) ;", "Dimension dim = toolkit . get Best Cursor Size ( icon . get Icon Width ( ) , icon . get Icon Height ( ) ) ;", "Buffered Image buff Image = new Buffered Image ( dim . width , dim . height , Buffered Image . TYPE INT ARGB PRE ) ;", "icon . paint Icon ( evt . get Component ( ) , buff Image . get Graphics ( ) , NUM_ , NUM_ ) ;", "cursor = toolkit . create Custom Cursor ( buff Image , new Point ( NUM_ , NUM_ ) , STR_ ) ;", "evt . start Drag ( cursor , new Key Store Entry Transferable ( drag Entry ) , this ) ; }"]}
{"ids": "10102", "code": ["public static boolean is Identifier Helper Char ( char ch ) {", "return STR_ == ch || STR_ == ch || STR_ == ch || STR_ == ch ; }"]}
{"ids": "52721", "code": ["public void add Header ( String line ) {", "header . add ( line ) ; }"]}
{"ids": "36814", "code": ["public static I Address load Address ( final Result Set result Set , final String column Name ) throws SQL Exception {", "Preconditions . check Not Null ( result Set , STR_ ) ;", "Preconditions . check Not Null ( column Name , STR_ ) ;", "final String address String = read String ( result Set , column Name ) ;", "return result Set . was Null ( ) ? null : new C Address ( new Big Integer ( address String ) ) ; }"]}
{"ids": "44832", "code": ["private static String encode ( String string To Encode ) {", "String encoded ;", "try {", "encoded = URL Encoder . encode ( string To Encode , UTF 8 ) ; }", "catch ( Unsupported Encoding Exception e ) {", "throw new MC Api Runtime Exception ( e ) ; }", "encoded = encoded . replace ( STR_ , STR_ ) ;", "encoded = encoded . replace ( STR_ , STR_ ) ;", "encoded = encoded . replace ( STR_ , STR_ ) ;", "return encoded ; }"]}
{"ids": "40586", "code": ["protected static String guess Type ( File file ) {", "String name = file . get Name ( ) ;", "String suffix = name . substring ( name . last Index Of ( STR_ ) + NUM_ ) ;", "return mime Map . get ( suffix . to Lower Case ( Locale . ROOT ) ) ; }"]}
{"ids": "48863", "code": ["protected Transferable create Locale Transferable ( long [ ] formats ) throws IO Exception {", "return null ; }"]}
{"ids": "48050", "code": ["public void put Length ( int len ) throws IO Exception {", "if ( len < NUM_ ) {", "write ( ( byte ) len ) ; }", "else if ( len < ( NUM_ << NUM_ ) ) {", "write ( ( byte ) NUM_ ) ;", "write ( ( byte ) len ) ; }", "else if ( len < ( NUM_ << NUM_ ) ) {", "write ( ( byte ) NUM_ ) ;", "write ( ( byte ) ( len > > NUM_ ) ) ;", "write ( ( byte ) len ) ; }", "else if ( len < ( NUM_ << NUM_ ) ) {", "write ( ( byte ) NUM_ ) ;", "write ( ( byte ) ( len > > NUM_ ) ) ;", "write ( ( byte ) ( len > > NUM_ ) ) ;", "write ( ( byte ) len ) ; }", "else {", "write ( ( byte ) NUM_ ) ;", "write ( ( byte ) ( len > > NUM_ ) ) ;", "write ( ( byte ) ( len > > NUM_ ) ) ;", "write ( ( byte ) ( len > > NUM_ ) ) ;", "write ( ( byte ) len ) ; } }"]}
{"ids": "39488", "code": ["public void put Generic Font Family ( String family Name , Font font ) {", "generic Font Families . put ( family Name . to Lower Case ( ) , font ) ; }"]}
{"ids": "47526", "code": ["@ Override public String format ( Date Time Formatter formatter ) {", "Objects . require Non Null ( formatter , STR_ ) ;", "return formatter . format ( this ) ; }"]}
{"ids": "29117", "code": ["public @ Dotted Class Name String to Dotted Class Name ( ) {", "return Class Name . to Dotted Class Name ( class Name ) ; }"]}
{"ids": "9743", "code": ["public D Add Extensions ( J Frame parent , String title , X 509 Extension Set extensions , Public Key authority Public Key , X 500 Name authority Cert Name , Big Integer authority Cert Serial Number , Public Key subject Public Key ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "set Title ( res . get String ( STR_ ) ) ;", "this . extensions = extensions ;", "this . authority Public Key = authority Public Key ;", "this . authority Cert Name = authority Cert Name ;", "this . authority Cert Serial Number = authority Cert Serial Number ;", "this . subject Public Key = subject Public Key ;", "init Components ( ) ; }"]}
{"ids": "26842", "code": ["private void play Next ( ) {", "if ( media Type == Config . YOUTUBE MEDIA TYPE VIDEO ) {", "seek Video ( NUM_ ) ;", "restart Video ( ) ;", "return ; }", "if ( previous Was Called ) {", "previous Was Called = false ;", "iterator . next ( ) ; }", "if ( ! iterator . has Next ( ) ) {", "iterator = you Tube Videos . list Iterator ( ) ; }", "video Item = iterator . next ( ) ;", "next Was Called = true ;", "play Video ( ) ; }"]}
{"ids": "83036", "code": ["public static < T > T invoke Method ( Object obj , String name , Object ... params ) throws No Such Method Exception {", "Class [ ] param Types = get Param Types ( params ) ;", "final Class < ? > a Class = obj . get Class ( ) ;", "Method method ;", "try {", "method = a Class . get Declared Method ( name , param Types ) ; }", "catch ( No Such Method Exception e ) {", "method = a Class . get Method ( name , param Types ) ; }", "method . set Accessible ( true ) ;", "try {", "return ( T ) method . invoke ( obj , params ) ; }", "catch ( Illegal Access Exception | Invocation Target Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "6701", "code": ["private void clean Up History ( ) {", "if ( ! m History Of Numbers . is Empty ( ) && m History Of Numbers . size ( ) >= MAX HISTORY SIZE ) {", "for ( int i = NUM_ ; i < Math . max ( NUM_ , MAX HISTORY SIZE / NUM_ ) ; i ++ ) {", "m Previous Numbers . remove ( m History Of Numbers . remove First ( ) ) ; } } }"]}
{"ids": "62876", "code": ["public Log Message ( String template , int code ) {", "this ( template , null , EMPTY STRING ARRAY , code , Optional . empty ( ) ) ; }"]}
{"ids": "69499", "code": ["protected String action translate ( String act string , int act pos , Hashtable label map , Hashtable label types ) {", "int id start ;", "int pos ;", "int len ;", "String id str ;", "boolean in id ;", "String Buffer result ;", "char buffer [ ] ;", "if ( act string == null || act string . length ( ) == NUM_ ) return act string ;", "len = act string . length ( ) ;", "result = new String Buffer ( len + NUM_ ) ;", "buffer = new char [ len + NUM_ ] ;", "act string . get Chars ( NUM_ , len , buffer , NUM_ ) ;", "buffer [ len ] = STR_ ;", "in id = false ;", "for ( pos = id start = NUM_ ; pos <= len ; pos ++ ) {", "if ( in id ) {", "if ( ! is id char ( buffer [ pos ] ) ) {", "id str = new String ( buffer , id start , pos - id start ) ;", "result . append ( label translate ( id str , act pos , label map , label types ) ) ;", "if ( buffer [ pos ] != STR_ ) result . append ( buffer , pos , NUM_ ) ;", "in id = false ; }", "else { } }", "else {", "if ( is id start ( buffer [ pos ] ) ) {", "in id = true ;", "id start = pos ; }", "else {", "if ( buffer [ pos ] != STR_ ) result . append ( buffer , pos , NUM_ ) ; } } }", "return result . to String ( ) ; }"]}
{"ids": "49648", "code": ["public boolean can Load ( ) {", "return true ; }"]}
{"ids": "76330", "code": ["protected boolean strict Parse Boolean ( String s ) {", "if ( s == null || s . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( s . equals Ignore Case ( STR_ ) ) {", "return true ; }", "if ( s . equals Ignore Case ( STR_ ) ) {", "return false ; }", "throw new Illegal Argument Exception ( STR_ + s ) ; }"]}
{"ids": "47493", "code": ["public String format ( Date Time Formatter formatter ) {", "Objects . require Non Null ( formatter , STR_ ) ;", "return formatter . format ( this ) ; }"]}
{"ids": "68712", "code": ["public Matrix U ( ) {", "return U . clone ( ) ; }"]}
{"ids": "41738", "code": ["private boolean is Field Visited ( Object object , Field object Field , Field field ) {", "Map < String , Set < String > > bag = visited Fields . get ( object ) ;", "if ( bag == null ) {", "return false ; }", "String object Filed Key = object Field == null ? STR_ : object Field . to Generic String ( ) ;", "Set < String > fields = bag . get ( object Filed Key ) ;", "return fields != null && fields . contains ( field ) ; }"]}
{"ids": "64332", "code": ["public void remove From Completed List ( Download Info Runnable download Info Runnable ) {", "m Completed List . remove ( download Info Runnable ) ; }"]}
{"ids": "34266", "code": ["public String as Xml Id ( ) {", "return Datatype Converter . print Hex Binary ( token Digest . get Value ( ) ) ; }"]}
{"ids": "66211", "code": ["private void update Info ( ) {", "m updating = true ;", "name Field . set Text ( m cc . get Name ( ) ) ;", "apps Host Field . set Text ( m cc . get Apps Host ( ) ) ;", "apps Port Field . set Text ( String . value Of ( m cc . get Apps Port ( ) ) ) ;", "b Test Apps . set Icon ( get Status Icon ( m cc . is Apps Server OK ( false ) ) ) ;", "boolean rw = C Connection . is Server Embedded ( ) ? true : ! m cc . is Apps Server OK ( false ) ;", "db Type Label . set Read Write ( rw ) ;", "db Type Field . set Read Write ( rw ) ;", "db Type Field . set Selected Item ( m cc . get Type ( ) ) ;", "host Label . set Read Write ( rw ) ;", "host Field . set Read Write ( rw ) ;", "host Field . set Text ( m cc . get Db Host ( ) ) ;", "port Label . set Read Write ( rw ) ;", "db Port Field . set Read Write ( rw ) ;", "db Port Field . set Text ( String . value Of ( m cc . get Db Port ( ) ) ) ;", "sid Label . set Read Write ( rw ) ;", "sid Field . set Read Write ( rw ) ;", "sid Field . set Text ( m cc . get Db Name ( ) ) ;", "db Uid Label . set Read Write ( rw ) ;", "db Uid Field . set Read Write ( rw ) ;", "db Uid Field . set Text ( m cc . get Db Uid ( ) ) ;", "db Pwd Field . set Editable ( rw ) ;", "db Pwd Field . set Text ( m cc . get Db Pwd ( ) ) ;", "cb Bequeath . set Read Write ( rw ) ;", "cb Bequeath . set Enabled ( m cc . is Oracle ( ) ) ;", "cb Bequeath . set Selected ( m cc . is Bequeath ( ) ) ;", "boolean fw Enabled = rw && m cc . is Via Firewall ( ) && m cc . is Oracle ( ) ;", "cb Firewall . set Read Write ( rw && m cc . is Oracle ( ) ) ;", "cb Firewall . set Selected ( m cc . is Via Firewall ( ) ) ;", "fw Host Label . set Read Write ( fw Enabled ) ;", "fw Host Field . set Read Write ( fw Enabled ) ;", "fw Host Field . set Text ( m cc . get Fw Host ( ) ) ;", "fw Port Label . set Read Write ( fw Enabled ) ;", "fw Port Field . set Read Write ( fw Enabled ) ;", "fw Port Field . set Text ( String . value Of ( m cc . get Fw Port ( ) ) ) ;", "b Test DB . set Tool Tip Text ( m cc . get Connection URL ( ) ) ;", "b Test DB . set Icon ( get Status Icon ( m cc . is Database OK ( ) ) ) ;", "m updating = false ; }"]}
{"ids": "19878", "code": ["public void create Snapshot ( ) throws Backup Exception {", "logger . debug ( STR_ + this . snapshot Name ) ;", "process Helper . exec ( STR_ , lvcreate Cmd ) ; }"]}
{"ids": "54696", "code": ["public final Uri store Log File ( final Log File log File , final int session Id ) {", "final Content Values values = new Content Values ( ) ;", "values . put ( Schema . COL MANUFACTURER , log File . get Manufacturer ( ) ) ;", "values . put ( Schema . COL MODEL , log File . get Model ( ) ) ;", "values . put ( Schema . COL REVISION , log File . get Revision ( ) ) ;", "values . put ( Schema . COL SWID , log File . get Swid ( ) ) ;", "values . put ( Schema . COL SWVER , log File . get Sw Version ( ) ) ;", "values . put ( Schema . COL TIMESTAMP , System . current Time Millis ( ) ) ;", "values . put ( Schema . COL SESSION ID , session Id ) ;", "return content Resolver . insert ( Content Provider . CONTENT URI LOGFILE , values ) ; }"]}
{"ids": "72856", "code": ["public Map < String , String > merge ( Map < String , String > cur Props , Map < String , String > new Props ) throws IO Exception {", "Map < String , String > props = new Hash Map < > ( new Props ) ;", "for ( Map . Entry < String , String > e : cur Props . entry Set ( ) ) {", "String name = e . get Key ( ) ;", "String cur Value = e . get Value ( ) ;", "if ( props . contains Key ( name ) ) {", "props . put ( name , cur Value ) ; } }", "return props ; }"]}
{"ids": "40873", "code": ["public Builder delete Preferred Language ( ) {", "delete Fields . add ( STR_ ) ;", "return this ; }"]}
{"ids": "59542", "code": ["public void on Prepared ( Media Player player ) {", "m State = State . PLAYING ;", "update Notification ( String . format ( get String ( R . string . media state playing ) , m File . get File Name ( ) ) ) ;", "if ( m Media Controller != null ) {", "m Media Controller . set Enabled ( true ) ; }", "player . seek To ( m Start Position ) ;", "config And Start Media Player ( ) ;", "if ( ! m Play On Prepared ) {", "process Pause Request ( ) ; }", "if ( m Media Controller != null ) {", "m Media Controller . update Pause Play ( ) ; } }"]}
{"ids": "9335", "code": ["private void parse Parameter ( String token , String value ) {", "if ( token != null && value != null ) {", "if ( token . equals Ignore Case ( NONCE TOKEN ) ) {", "m Nonce = value ;", "return ; }", "if ( token . equals Ignore Case ( STALE TOKEN ) ) {", "parse Stale ( value ) ;", "return ; }", "if ( token . equals Ignore Case ( OPAQUE TOKEN ) ) {", "m Opaque = value ;", "return ; }", "if ( token . equals Ignore Case ( QOP TOKEN ) ) {", "m Qop = value . to Lower Case ( ) ;", "return ; }", "if ( token . equals Ignore Case ( ALGORITHM TOKEN ) ) {", "m Algorithm = value . to Lower Case ( ) ;", "return ; } } }"]}
{"ids": "44650", "code": ["public void skip ( int n ) throws IO Exception {", "dis . skip ( n ) ; }"]}
{"ids": "59571", "code": ["public void to All In Radius ( World Server world , Vec 3 d pos , double radius ) {", "double max Distance = radius * radius + radius * radius + radius * radius ;", "to All ( world . get Players ( Entity Player MP . class , null ) ) ; }"]}
{"ids": "25353", "code": ["public static ECDHE Cryptography from Named Curve Id ( int supported Group Id ) {", "Supported Group group = Supported Group . from Id ( supported Group Id ) ;", "if ( group == null ) {", "return null ; }", "else {", "try {", "return new ECDHE Cryptography ( group . name ( ) ) ; }", "catch ( General Security Exception e ) {", "LOGGER . log ( Level . WARNING , STR_ , new Object [ ] { group . name ( ) , e . get Message ( ) } ) ;", "return null ; } } }"]}
{"ids": "1945", "code": ["private static void add Header ( Message message , String name , String value ) {", "Map < String , List < String > > protocol Headers = Cast Utils . cast ( ( Map < ? , ? > ) message . get ( Message . PROTOCOL HEADERS ) ) ;", "if ( protocol Headers == null ) {", "protocol Headers = new Tree Map < String , List < String > > ( String . CASE INSENSITIVE ORDER ) ;", "message . put ( Message . PROTOCOL HEADERS , protocol Headers ) ; }", "List < String > header = Cast Utils . cast ( ( List < ? > ) protocol Headers . get ( name ) ) ;", "if ( header == null ) {", "header = new Array List < String > ( ) ;", "protocol Headers . put ( name , header ) ; }", "if ( header . size ( ) == NUM_ ) {", "header . add ( value ) ; }", "else {", "header . set ( NUM_ , header . get ( NUM_ ) + STR_ + value ) ; } }"]}
{"ids": "66756", "code": ["private static void swilk ( boolean [ ] init , double [ ] x , int n , int n 1 , int n 2 , double [ ] a , double [ ] w , double [ ] pw , int [ ] ifault ) {", "pw [ NUM_ ] = NUM_ ;", "if ( w [ NUM_ ] >= NUM_ ) {", "w [ NUM_ ] = NUM_ ; }", "double an = n ;", "ifault [ NUM_ ] = NUM_ ;", "int nn 2 = n / NUM_ ;", "if ( n 2 < nn 2 ) {", "return ; }", "ifault [ NUM_ ] = NUM_ ;", "if ( n < NUM_ ) {", "return ; }", "if ( ! init [ NUM_ ] ) {", "if ( n == NUM_ ) {", "a [ NUM_ ] = SQRTH ; }", "else {", "double an 25 = an + NUM_ ;", "double summ 2 = NUM_ ;", "for ( int i = NUM_ ; i <= n 2 ; ++ i ) {", "a [ i ] = ppnd ( ( i - TH ) / an 25 ) ;", "summ 2 += a [ i ] * a [ i ] ; }", "summ 2 *= NUM_ ;", "double ssumm 2 = Math . sqrt ( summ 2 ) ;", "double rsn = NUM_ / Math . sqrt ( an ) ;", "double a 1 = poly ( C 1 , NUM_ , rsn ) - a [ NUM_ ] / ssumm 2 ;", "int i 1 ;", "double fac ;", "if ( n > NUM_ ) {", "i 1 = NUM_ ;", "double a 2 = - a [ NUM_ ] / ssumm 2 + poly ( C 2 , NUM_ , rsn ) ;", "fac = Math . sqrt ( ( summ 2 - NUM_ * a [ NUM_ ] * a [ NUM_ ] - NUM_ * a [ NUM_ ] * a [ NUM_ ] ) / ( NUM_ - NUM_ * a 1 * a 1 - NUM_ * a 2 * a 2 ) ) ;", "a [ NUM_ ] = a 1 ;", "a [ NUM_ ] = a 2 ; }", "else {", "i 1 = NUM_ ;", "fac = Math . sqrt ( ( summ 2 - NUM_ * a [ NUM_ ] * a [ NUM_ ] ) / ( NUM_ - NUM_ * a 1 * a 1 ) ) ;", "a [ NUM_ ] = a 1 ; }", "for ( int i = i 1 ; i <= nn 2 ; ++ i ) {", "a [ i ] = - a [ i ] / fac ; } }", "init [ NUM_ ] = true ; }", "if ( n 1 < NUM_ ) {", "return ; }", "int ncens = n - n 1 ;", "ifault [ NUM_ ] = NUM_ ;", "if ( ncens < NUM_ || ( ncens > NUM_ && n < NUM_ ) ) {", "return ; }", "ifault [ NUM_ ] = NUM_ ;", "double delta = ncens / an ;", "if ( delta > NUM_ ) {", "return ; }", "double w 1 , xx ;", "if ( w [ NUM_ ] < NUM_ ) {", "w 1 = NUM_ + w [ NUM_ ] ;", "ifault [ NUM_ ] = NUM_ ; }", "else {", "ifault [ NUM_ ] = NUM_ ;", "double range = x [ n 1 ] - x [ NUM_ ] ;", "if ( range < SMALL ) {", "return ; }", "ifault [ NUM_ ] = NUM_ ;", "xx = x [ NUM_ ] / range ;", "double sx = xx ;", "double sa = - a [ NUM_ ] ;", "int j = n - NUM_ ;", "for ( int i = NUM_ ; i <= n 1 ; ++ i ) {", "double xi = x [ i ] / range ;", "sx += xi ;", "if ( i != j ) {", "sa += sign ( NUM_ , i - j ) * a [ Math . min ( i , j ) ] ; }", "xx = xi ;", "-- j ; }", "ifault [ NUM_ ] = NUM_ ;", "if ( n > NUM_ ) {", "ifault [ NUM_ ] = NUM_ ; }", "sa /= n 1 ;", "sx /= n 1 ;", "double ssa = NUM_ ;", "double ssx = NUM_ ;", "double sax = NUM_ ;", "j = n ;", "double asa ;", "for ( int i = NUM_ ; i <= n 1 ; ++ i ) {", "if ( i != j ) {", "asa = sign ( NUM_ , i - j ) * a [ Math . min ( i , j ) ] - sa ; }", "else {", "asa = - sa ; }", "double xsx = x [ i ] / range - sx ;", "ssa += asa * asa ;", "ssx += xsx * xsx ;", "sax += asa * xsx ;", "-- j ; }", "double ssassx = Math . sqrt ( ssa * ssx ) ;", "w 1 = ( ssassx - sax ) * ( ssassx + sax ) / ( ssa * ssx ) ; }", "w [ NUM_ ] = NUM_ - w 1 ;", "if ( n == NUM_ ) {", "pw [ NUM_ ] = PI 6 * ( Math . asin ( Math . sqrt ( w [ NUM_ ] ) ) - STQR ) ;", "return ; }", "double y = Math . log ( w 1 ) ;", "xx = Math . log ( an ) ;", "double m = NUM_ ;", "double s = NUM_ ;", "if ( n <= NUM_ ) {", "double gamma = poly ( G , NUM_ , an ) ;", "if ( y >= gamma ) {", "pw [ NUM_ ] = SMALL ;", "return ; }", "y = - Math . log ( gamma - y ) ;", "m = poly ( C 3 , NUM_ , an ) ;", "s = Math . exp ( poly ( C 4 , NUM_ , an ) ) ; }", "else {", "m = poly ( C 5 , NUM_ , xx ) ;", "s = Math . exp ( poly ( C 6 , NUM_ , xx ) ) ; }", "if ( ncens > NUM_ ) {", "double ld = - Math . log ( delta ) ;", "double bf = NUM_ + xx * BF 1 ;", "double z 90 f = Z 90 + bf * Math . pow ( poly ( C 7 , NUM_ , Math . pow ( XX 90 , xx ) ) , ld ) ;", "double z 95 f = Z 95 + bf * Math . pow ( poly ( C 8 , NUM_ , Math . pow ( XX 95 , xx ) ) , ld ) ;", "double z 99 f = Z 99 + bf * Math . pow ( poly ( C 9 , NUM_ , xx ) , ld ) ;", "double zfm = ( z 90 f + z 95 f + z 99 f ) / NUM_ ;", "double zsd = ( Z 90 * ( z 90 f - zfm ) + Z 95 * ( z 95 f - zfm ) + Z 99 * ( z 99 f - zfm ) ) / ZSS ;", "double zbar = zfm - zsd * ZM ;", "m += zbar * s ;", "s *= zsd ; }", "pw [ NUM_ ] = alnorm ( ( y - m ) / s , UPPER ) ; }"]}
{"ids": "63095", "code": ["public String as String ( ) {", "String Builder buff = new String Builder ( ) ;", "for ( int i = NUM_ ; i < array Level ; i ++ ) {", "if ( ref Count ) {", "buff . append ( STR_ ) ; }", "buff . append ( STR_ ) ; }", "if ( ref Count ) {", "if ( ! class Obj . is Primitive ) {", "buff . append ( STR_ ) ; } }", "buff . append ( class Obj . to String ( ) ) ;", "if ( ref Count ) {", "if ( ! class Obj . is Primitive ) {", "buff . append ( STR_ ) ; } }", "for ( int i = NUM_ ; i < array Level ; i ++ ) {", "if ( ref Count ) {", "buff . append ( STR_ ) ; }", "else {", "if ( ! class Obj . is Primitive ) {", "buff . append ( STR_ ) ; } }", "buff . append ( STR_ ) ; }", "if ( ! ref Count ) {", "if ( is Object ( ) ) {", "buff . append ( STR_ ) ; } }", "return buff . to String ( ) ; }"]}
{"ids": "62962", "code": ["public List < Json Object > execute Parametrized Statement ( String statement , List < String > parameter Names , List < Object > parameter Values ) {", "Json Object named Params = Json Object . create ( ) ;", "for ( int param = NUM_ ; param < parameter Names . size ( ) ; param ++ ) {", "named Params . put ( parameter Names . get ( param ) , parameter Values . get ( param ) ) ; }", "Parameterized N 1 ql Query query = N 1 ql Query . parameterized ( statement , named Params ) ;", "return execute Query ( query ) ; }"]}
{"ids": "29831", "code": ["public final T end All ( ) {", "while ( ! tag Stack . is Empty ( ) ) {", "end ( ) ; }", "return get Self ( ) ; }"]}
{"ids": "69404", "code": ["public static Table create Partitioned Table ( Configuration conf , Hive Metastore Client ms , Hive Object Spec table Spec , Table Type table Type , Path warehouse Root ) throws IO Exception , Hive Metastore Exception {", "Path table Location = get Path For Hive Object ( warehouse Root , table Spec ) ;", "Table table = new Table ( ) ;", "table . set Db Name ( table Spec . get Db Name ( ) ) ;", "table . set Table Name ( table Spec . get Table Name ( ) ) ;", "Map < String , String > parameters = new Hash Map < > ( ) ;", "parameters . put ( Hive Parameter Keys . TLDT , Long . to String ( System . current Time Millis ( ) ) ) ;", "table . set Parameters ( parameters ) ;", "table . set Table Type ( table Type . to String ( ) ) ;", "List < Field Schema > partition Cols = new Array List < > ( ) ;", "partition Cols . add ( new Field Schema ( STR_ , STR_ , STR_ ) ) ;", "partition Cols . add ( new Field Schema ( STR_ , STR_ , STR_ ) ) ;", "table . set Partition Keys ( partition Cols ) ;", "Storage Descriptor sd = new Storage Descriptor ( ) ;", "List < Field Schema > columns = new Array List < > ( ) ;", "columns . add ( new Field Schema ( STR_ , STR_ , STR_ ) ) ;", "sd . set Cols ( columns ) ;", "if ( table Type == Table Type . MANAGED TABLE || table Type == Table Type . EXTERNAL TABLE ) {", "sd . set Location ( table Location . to String ( ) ) ; }", "sd . set Serde Info ( new Ser De Info ( STR_ , STR_ , new Hash Map < > ( ) ) ) ;", "table . set Sd ( sd ) ;", "if ( ! ms . exists Db ( table . get Db Name ( ) ) ) {", "ms . create Database ( new Database ( table . get Db Name ( ) , null , null , null ) ) ; }", "ms . create Table ( table ) ;", "return table ; }"]}
{"ids": "16570", "code": ["protected Form Spec ( Default Alignment default Alignment , String encoded Description ) {", "this ( default Alignment , Sizes . DEFAULT , NO GROW ) ;", "parse And Init Values ( encoded Description . to Lower Case ( Locale . ENGLISH ) ) ; }"]}
{"ids": "61864", "code": ["public static < T > List < T > decode ( Input Stream data , Parser < T > parser ) throws IO Exception {", "Coded Input Stream stream = Coded Input Stream . new Instance ( data ) ;", "List < T > list = new Array List < > ( ) ;", "while ( ! stream . is At End ( ) ) {", "int size = stream . read Raw Varint 32 ( ) ;", "byte [ ] element = stream . read Raw Bytes ( size ) ;", "T decoded = parser . parse From ( element ) ;", "list . add ( decoded ) ; }", "return list ; }"]}
{"ids": "80511", "code": ["public Creature calculate Next Creature ( final int quest Level ) {", "final List < Creature > possible Creatures To Spawn = new Array List < Creature > ( ) ;", "int last Level = NUM_ ;", "for ( final Creature creature : sorted Creatures ) {", "if ( creature . get Level ( ) > quest Level ) {", "break ; }", "if ( creature . get Level ( ) > last Level ) {", "possible Creatures To Spawn . clear ( ) ;", "last Level = creature . get Level ( ) ; }", "possible Creatures To Spawn . add ( creature ) ; }", "Creature creature To Spawn = null ;", "if ( possible Creatures To Spawn . size ( ) == NUM_ ) {", "creature To Spawn = sorted Creatures . get ( sorted Creatures . size ( ) - NUM_ ) ; }", "else {", "Collections . shuffle ( possible Creatures To Spawn ) ;", "creature To Spawn = possible Creatures To Spawn . get ( NUM_ ) ; }", "return creature To Spawn ; }"]}
{"ids": "21136", "code": ["@ Override public void before ( Property Info Rest Rep old Props , Property Info Rest Rep new Props ) {", "String new Interval Str = new Props . get Property ( Backup Constants . SCHEDULE INTERVAL ) ;", "String new Start Time Str = new Props . get Property ( Backup Constants . SCHEDULE TIME ) ;", "if ( ( new Interval Str == null || new Interval Str . is Empty ( ) ) && ( new Start Time Str == null || new Start Time Str . is Empty ( ) ) ) {", "log . info ( STR_ ) ;", "return ; }", "String interval Str = ( new Interval Str == null || new Interval Str . is Empty ( ) ) ? old Props . get Property ( Backup Constants . SCHEDULE INTERVAL ) : new Interval Str ;", "String start Time Str = ( new Start Time Str == null || new Start Time Str . is Empty ( ) ) ? old Props . get Property ( Backup Constants . SCHEDULE TIME ) : new Start Time Str ;", "log . info ( STR_ , interval Str , start Time Str ) ;", "validate Backup Interval And Start Time ( interval Str , start Time Str ) ; }"]}
{"ids": "71580", "code": ["public void add Tables ( Collection < Table > tables ) {", "for ( Iterator < Table > it = tables . iterator ( ) ; it . has Next ( ) ; ) {", "add Table ( ( Table ) it . next ( ) ) ; } }"]}
{"ids": "51107", "code": ["protected void write File ( String template , Writer writer ) {", "if ( template == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Buffered Writer buffered Writer = new Buffered Writer ( writer ) ;", "String output = replace ( template , null ) ;", "try {", "buffered Writer . append ( output ) ; }", "catch ( IO Exception e ) {", "logger . log ( Diagnostic . Kind . ERROR , STR_ ) ;", "e . print Stack Trace ( ) ; }", "finally {", "try {", "buffered Writer . close ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "63948", "code": ["public synchronized boolean clear ( ) {", "if ( is Loading ( ) ) {", "return false ; }", "loader = new Thread ( null ) ;", "loader . start ( ) ;", "return true ; }"]}
{"ids": "86336", "code": ["public int index Of ( final Rounded Tool Item item ) {", "check Widget ( ) ;", "return items . index Of ( item ) ; }"]}
{"ids": "33411", "code": ["public void add Attribute ( String alias , String type Uri , boolean required , int count ) throws Message Exception {", "if ( alias . index Of ( STR_ ) > - NUM_ || alias . index Of ( STR_ ) > - NUM_ || alias . index Of ( STR_ ) > - NUM_ || alias . index Of ( STR_ ) > - NUM_ ) throw new Message Exception ( STR_ + alias ) ;", "parameters . set ( new Parameter ( STR_ + alias , type Uri ) ) ;", "String level = required ? STR_ : STR_ ;", "Parameter level Param = parameters . get Parameter ( level ) ;", "Parameter new Param ;", "if ( level Param == null ) {", "new Param = new Parameter ( level , alias ) ; }", "else {", "new Param = new Parameter ( level , level Param . get Value ( ) + STR_ + alias ) ;", "parameters . remove Parameters ( level ) ; }", "parameters . set ( new Param ) ;", "set Count ( alias , count ) ;", "if ( DEBUG ) log . debug ( STR_ + type Uri + STR_ + alias + STR_ + count + STR_ + required ) ; }"]}
{"ids": "27308", "code": ["public Void call ( ) throws Exception {", "final List < Future < Void > > tasks = new Linked List < Future < Void > > ( ) ;", "try {", "for ( IV < ? , ? > term Id : graphs ) {", "final Future Task < Void > ft = new Future Task < Void > ( new Drain Iterator Task ( term Id ) ) ;", "tasks . add ( ft ) ;", "executor . execute ( ft ) ; }", "for ( Future < Void > f : tasks ) {", "f . get ( ) ; } }", "catch ( Throwable ex ) {", "for ( Future < Void > f : tasks ) f . cancel ( true ) ;", "throw new Runtime Exception ( ex ) ; }", "finally {", "buffer . close ( ) ; }", "return null ; }"]}
{"ids": "40704", "code": ["protected void run Full Import ( String data Config , Map < String , String > extra Params ) throws Exception {", "Hash Map < String , String > params = new Hash Map < > ( ) ;", "params . put ( STR_ , STR_ ) ;", "params . put ( STR_ , STR_ ) ;", "params . put ( STR_ , data Config ) ;", "params . put ( STR_ , STR_ ) ;", "params . put ( STR_ , STR_ ) ;", "params . put All ( extra Params ) ;", "Named List l = new Named List ( ) ;", "for ( Map . Entry < String , String > e : params . entry Set ( ) ) {", "l . add ( e . get Key ( ) , e . get Value ( ) ) ; }", "Local Solr Query Request request = new Local Solr Query Request ( h . get Core ( ) , l ) ;", "h . query ( STR_ , request ) ; }"]}
{"ids": "44935", "code": ["public String user Id From Range ( Object omin Id , Object omax Id ) {", "int min Id = Function Handler . get Int ( omin Id ) ;", "int max Id = Function Handler . get Int ( omax Id ) ;", "Stack < Integer > stack = get Stack ( min Id , max Id ) ;", "if ( stack . size ( ) > NUM_ ) {", "return Integer . to String ( stack . pop ( ) ) ; }", "throw new Illegal Argument Exception ( STR_ ) ; }"]}
{"ids": "77968", "code": ["public void start ( ) {", "if ( is Started ) {", "log . info ( STR_ ) ;", "return ; }", "log . info ( STR_ ) ;", "system Consumer . start ( ) ;", "is Started = true ; }"]}
{"ids": "37346", "code": ["public static void generate Binary Operation Flags ( final I Translation Environment environment , final long next Offset , final String result , final Operand Size result Size , final List < Reil Instruction > instructions ) throws Illegal Argument Exception {", "Preconditions . check Not Null ( environment , STR_ ) ;", "Preconditions . check Not Null ( result , STR_ ) ;", "Preconditions . check Not Null ( result Size , STR_ ) ;", "Preconditions . check Not Null ( instructions , STR_ ) ;", "final long base Offset = next Offset - instructions . size ( ) ;", "long offset = next Offset ;", "generate Sign Flag Code ( environment , offset , result , result Size , instructions ) ;", "offset = ( base Offset + instructions . size ( ) ) - NUM_ ;", "instructions . add ( Reil Helpers . create Bisz ( offset + NUM_ , result Size , result , Operand Size . BYTE , Helpers . ZERO FLAG ) ) ;", "instructions . add ( Reil Helpers . create Str ( offset + NUM_ , Operand Size . BYTE , STR_ , Operand Size . BYTE , Helpers . CARRY FLAG ) ) ;", "instructions . add ( Reil Helpers . create Str ( offset + NUM_ , Operand Size . BYTE , STR_ , Operand Size . BYTE , Helpers . OVERFLOW FLAG ) ) ; }"]}
{"ids": "36648", "code": ["public boolean is Label Movable ( ) {", "mx Graph graph = graph Component . get Graph ( ) ;", "String label = graph . get Label ( state . get Cell ( ) ) ;", "return graph . is Label Movable ( state . get Cell ( ) ) && label != null && label . length ( ) > NUM_ ; }"]}
{"ids": "78046", "code": ["public int write Type List ( Type List type List ) {", "int off = data . position ( ) ;", "short [ ] types = type List . types ;", "write Int ( types . length ) ;", "for ( short type : types ) {", "write Short ( type ) ; }", "return off ; }"]}
{"ids": "51713", "code": ["public static void load Config Resource ( String resource Name ) throws IO Exception {", "config . clear ( ) ;", "config . put All ( load Properties From Resource ( resource Name ) ) ; }"]}
{"ids": "30523", "code": ["private Transaction create Transaction ( ) throws Lease Denied Exception , Remote Exception , Transaction Exception {", "I Transaction Manager Provider transaction Manager Provider = get Transaction Manager Provider ( ) ;", "return ( Transaction Factory . create ( transaction Manager Provider . get Transaction Manager ( ) , config . get Transaction Timeout ( ) ) ) . transaction ; }"]}
{"ids": "84656", "code": ["public void skip While ( String skip ) throws IO Exception {", "char ch ;", "do {", "ch = read ( ) ; }", "while ( skip . index Of ( ch ) > - NUM_ ) ;", "unread Character ( ch ) ; }"]}
{"ids": "69722", "code": ["public void save Pois From Assets ( ) {", "List < Poi > pois = poi Asset Loader . load Pois From Assets ( ) ;", "Timber . d ( STR_ , pois . size ( ) ) ;", "for ( Poi poi : pois ) {", "Timber . d ( STR_ , poi ) ;", "save Poi ( poi ) ;", "Timber . d ( STR_ ) ; } }"]}
{"ids": "20266", "code": ["private void create Element ( Document doc , Element parent Element , String element Name , Color value ) {", "Element element = doc . create Element ( element Name ) ;", "element . append Child ( doc . create Text Node ( Colour Utils . from Colour ( value ) ) ) ;", "parent Element . append Child ( element ) ; }"]}
{"ids": "24447", "code": ["public static boolean been Done ( @ Scope int scope , String tag , Count Checker number Of Times ) {", "List < Long > tag Seen Dates = tag Last Seen Map . get ( tag ) ;", "if ( tag Seen Dates . is Empty ( ) ) {", "return false ; }", "if ( scope == THIS APP INSTALL ) {", "return number Of Times . check ( tag Seen Dates . size ( ) ) ; }", "else if ( scope == THIS APP SESSION ) {", "int counter = NUM_ ;", "for ( String tag From List : session List ) {", "if ( tag From List . equals ( tag ) ) {", "counter ++ ; } }", "return number Of Times . check ( counter ) ; }", "else {", "int counter = NUM_ ;", "for ( Long seen Date : tag Seen Dates ) {", "if ( seen Date > last App Updated Time ) {", "counter ++ ; } }", "return number Of Times . check ( counter ) ; } }"]}
{"ids": "74508", "code": ["void variable Operator Changed ( int row , String oper ) {", "Conditional Variable variable = variable List . get ( row ) ;", "int old Oper = variable . get Opern ( ) ;", "if ( row > NUM_ ) {", "if ( oper . equals ( Bundle . get Message ( STR_ ) ) ) {", "variable . set Opern ( Conditional . OPERATOR OR ) ; }", "else {", "variable . set Opern ( Conditional . OPERATOR AND ) ; } }", "else {", "variable . set Opern ( Conditional . OPERATOR NONE ) ; }", "if ( variable . get Opern ( ) != old Oper ) {", "make Antecedent ( ) ; } }"]}
{"ids": "79792", "code": ["public void add Header ( String name , String val ) {", "m Msg Header = m Msg Header + name + STR_ + val + m Line Delimiter ;", "add Internal Header Fields ( name , val ) ; }"]}
{"ids": "68926", "code": ["public static void check Duplicate Request ( Redis Client redis Client , String uri , Buffer buffer , String ttl , Handler < Boolean > callback ) {", "Integer time To Live = parse Time To Live ( ttl ) ;", "String redis Key = get Redis Key ( uri , Hash Code Generator . create Hash Code ( uri , buffer . to String ( ) ) ) ;", "handle Storage ( redis Client , redis Key , time To Live , callback ) ; }"]}
{"ids": "65531", "code": ["boolean is Hidden ( View view ) {", "return m Hidden Views . contains ( view ) ; }"]}
{"ids": "16588", "code": ["public static void delete Recursive ( @ Non Null File file Or Directory ) {", "delete Recursive ( file Or Directory , Collections . EMPTY LIST ) ; }"]}
{"ids": "46368", "code": ["static boolean does Menu Bar Border Tool Bar ( J Menu Bar c ) {", "J Tool Bar tb = ( J Tool Bar ) Metal Tool Bar UI . find Registered Component Of Type ( c , J Tool Bar . class ) ;", "if ( tb != null && tb . get Orientation ( ) == J Tool Bar . HORIZONTAL ) {", "J Root Pane rp = Swing Utilities . get Root Pane ( c ) ;", "Point point = new Point ( NUM_ , NUM_ ) ;", "point = Swing Utilities . convert Point ( c , point , rp ) ;", "int menu X = point . x ;", "int menu Y = point . y ;", "point . x = point . y = NUM_ ;", "point = Swing Utilities . convert Point ( tb , point , rp ) ;", "return ( point . x == menu X && menu Y + c . get Height ( ) == point . y && c . get Width ( ) == tb . get Width ( ) ) ; }", "return false ; }"]}
{"ids": "8168", "code": ["public static void each Object ( Object Input Stream ois , Closure closure ) throws IO Exception , Class Not Found Exception {", "try {", "while ( true ) {", "try {", "Object obj = ois . read Object ( ) ;", "closure . call ( obj ) ; }", "catch ( EOF Exception e ) {", "break ; } }", "Input Stream temp = ois ;", "ois = null ;", "temp . close ( ) ; }", "finally {", "close With Warning ( ois ) ; } }"]}
{"ids": "80882", "code": ["private static int exit With Status ( int status ) {", "if ( Tool IO . get Mode ( ) == Tool IO . SYSTEM ) {", "System . exit ( status ) ; }", "return status ; }"]}
{"ids": "27268", "code": ["public static double distance In Meters ( final double lat P 1 , final double lat P 2 , final double lon P 1 , final double lon P 2 ) {", "double dist Rad = Math . acos ( Math . sin ( to Radians ( lat P 1 ) ) * Math . sin ( to Radians ( lat P 2 ) ) + Math . cos ( to Radians ( lat P 1 ) ) * Math . cos ( to Radians ( lat P 2 ) ) * Math . cos ( to Radians ( lon P 1 - lon P 2 ) ) ) ;", "final double dist As Degree = to Degrees ( dist Rad ) ;", "return dist As Degree * NUM_ * NUM_ * NUM_ ; }"]}
{"ids": "26582", "code": ["public void process Challenge ( final String challenge ) throws Malformed Challenge Exception {", "String s = Auth Challenge Parser . extract Scheme ( challenge ) ;", "if ( ! s . equals Ignore Case ( get Scheme Name ( ) ) ) {", "throw new Malformed Challenge Exception ( STR_ + challenge ) ; }", "int i = challenge . index Of ( STR_ ) ;", "if ( i != - NUM_ ) {", "s = challenge . substring ( i , challenge . length ( ) ) ;", "this . ntlmchallenge = s . trim ( ) ;", "this . state = TYPE 2 MSG RECEIVED ; }", "else {", "this . ntlmchallenge = STR_ ;", "if ( this . state == UNINITIATED ) {", "this . state = INITIATED ; }", "else {", "this . state = FAILED ; } } }"]}
{"ids": "16015", "code": ["public static Big Integer calculate A ( Big Integer p , Big Integer q , Big Integer g A , Big Integer x 2 s ) {", "return g A . mod Pow ( x 2 s , p ) ; }"]}
{"ids": "65986", "code": ["public static M Cost Queue add ( M Product product , int M Attribute Set Instance ID , M Acct Schema as , int AD Org ID , int M Cost Element ID , Big Decimal amt , Big Decimal qty , int precision , M Cost Detail cd , String trx Name ) {", "if ( C Log Mgt . is Level Fine ( ) ) s log . fine ( STR_ + AD Org ID + STR_ + product . get ID ( ) + STR_ + M Attribute Set Instance ID + STR_ + amt + STR_ + qty + STR_ + precision ) ;", "M Cost Queue cq = new M Cost Queue ( product , M Attribute Set Instance ID , as , AD Org ID , M Cost Element ID , trx Name ) ;", "cq . set Costs ( amt , qty , precision ) ;", "cq . set Date Acct ( cd . get Date Acct ( ) ) ;", "cq . save Ex ( ) ;", "if ( C Log Mgt . is Level Fine ( ) ) s log . fine ( STR_ + cq ) ;", "return cq ; }"]}
{"ids": "20138", "code": ["public void add Undo Event ( Undo Interface event ) {", "if ( should Process Undo Redo Action ( ) ) {", "boolean at End Of List = ( current Index >= undo List . size ( ) ) ;", "if ( ! at End Of List ) {", "while ( undo List . size ( ) > current Index ) {", "int last Index = undo List . size ( ) - NUM_ ;", "undo List . remove ( last Index ) ; } }", "undo List . add ( event ) ;", "current Index = undo List . size ( ) ;", "update Menu Items ( ) ;", "logger . debug ( event . get String Representation ( ) ) ; } }"]}
{"ids": "39099", "code": ["public static Exception establish Cache If Needed ( Print Stream ... progress ) {", "if ( m offline ) {", "return null ; }", "if ( REP MIRROR == null ) {", "establish Mirror ( ) ; }", "Exception problem = null ;", "if ( INITIAL CACHE BUILD NEEDED ) {", "for ( Print Stream p : progress ) {", "p . println ( STR_ ) ; }", "problem = refresh Cache ( progress ) ;", "INITIAL CACHE BUILD NEEDED = false ; }", "return problem ; }"]}
{"ids": "56408", "code": ["public List < Snapshot > current Snapshots ( String repository Name ) {", "List < Snapshot > snapshot List = new Array List < > ( ) ;", "List < Snapshots In Progress . Entry > entries = current Snapshots ( repository Name , null ) ;", "for ( Snapshots In Progress . Entry entry : entries ) {", "snapshot List . add ( in Progress Snapshot ( entry ) ) ; }", "Collection Util . tim Sort ( snapshot List ) ;", "return Collections . unmodifiable List ( snapshot List ) ; }"]}
{"ids": "31527", "code": ["@ Override protected void paint Tab Background ( Graphics g , int tab Placement , int tab Index , int x , int y , int w , int h , boolean is Selected ) {", "if ( is Selected ) {", "if ( tab Placement == TOP ) {", "g . set Color ( Color . white ) ;", "g . fill Round Rect ( x , y , w , h + R + R , R , R ) ; } }", "else { } }"]}
{"ids": "77492", "code": ["private Automaton build Automaton ( Bytes Ref Hash term Bytes Hash ) {", "final Tree Set < Bytes Ref > terms = new Tree Set < Bytes Ref > ( ) ;", "for ( int i = NUM_ ; i < term Bytes Hash . size ( ) ; i ++ ) {", "Bytes Ref ref = new Bytes Ref ( ) ;", "term Bytes Hash . get ( i , ref ) ;", "terms . add ( ref ) ; }", "final Automaton a = Daciuk Mihov Automaton Builder . build ( terms ) ;", "return a ; }"]}
{"ids": "63435", "code": ["protected String admin Shutdown ( ) {", "server . shutdown ( ) ;", "return STR_ ; }"]}
{"ids": "15024", "code": ["public void assign Role ( AM Role role ) throws AM Exception , SSO Exception {", "assign Role ( role . get DN ( ) ) ; }"]}
{"ids": "1844", "code": ["public static < T extends Map . Entry < String , String > > String form Encode ( Collection < T > parameters ) throws IO Exception {", "Byte Array Output Stream b = new Byte Array Output Stream ( ) ;", "form Encode ( parameters , b ) ;", "return new String ( b . to Byte Array ( ) ) ; }"]}
{"ids": "79843", "code": ["public void run Next Pending Command ( ) {", "Runnable runnable = delta Queue . pop ( ) ;", "runnable . run ( ) ; }"]}
{"ids": "1291", "code": ["private static Document load Document ( Resource xml File ) throws SAX Exception , IO Exception {", "DOM Parser parser = new DOM Parser ( ) ;", "Input Stream is = null ;", "try {", "is = IO Util . to Buffered Input Stream ( xml File . get Input Stream ( ) ) ;", "Input Source source = new Input Source ( is ) ;", "parser . parse ( source ) ; }", "finally {", "IO Util . close EL ( is ) ; }", "return parser . get Document ( ) ; }"]}
{"ids": "71928", "code": ["public static void prepare Unicode ( final String Builder buffer , final Byte Sequence sequence , final boolean trim , final boolean fold Case ) {", "Reject . if Null ( buffer , sequence ) ;", "final int length = sequence . length ( ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "final byte b = sequence . byte At ( i ) ;", "if ( ( b & NUM_ ) != b ) {", "Mapping Table . map ( buffer , sequence . sub Sequence ( i , length ) , trim , fold Case ) ;", "String normalized Form = Normalizer . normalize ( buffer , Form . NFKD ) ;", "buffer . set Length ( NUM_ ) ;", "buffer . append ( normalized Form ) ;", "break ; }", "switch ( b ) {", "case STR_ :", "if ( can Map To Space ( buffer , trim ) ) {", "buffer . append ( STR_ ) ; }", "break ;", "default :", "if ( b >= STR_ && b < STR_ ) {", "if ( can Map To Space ( buffer , trim ) ) {", "buffer . append ( SPACE CHAR ) ; } }", "else if ( ( b >= STR_ && b <= STR_ ) || ( b >= STR_ && b <= STR_ ) || b == STR_ ) {", "break ; }", "else if ( fold Case && b >= STR_ && b <= STR_ ) {", "buffer . append ( ( char ) ( b + NUM_ ) ) ; }", "else {", "buffer . append ( ( char ) b ) ; }", "break ; } }", "if ( trim ) {", "for ( int i = buffer . length ( ) - NUM_ ; i > NUM_ ; i -- ) {", "if ( buffer . char At ( i ) == SPACE CHAR ) {", "buffer . delete ( i , i + NUM_ ) ; }", "else {", "break ; } } } }"]}
{"ids": "29072", "code": ["@ Nonnull public Bug Instance add Class ( Class Node class Node ) {", "String dotted Class Name = Class Name . to Dotted Class Name ( class Node . name ) ;", "Class Annotation class Annotation = new Class Annotation ( dotted Class Name ) ;", "add ( class Annotation ) ;", "return this ; }"]}
{"ids": "34854", "code": ["public static void try Format Satisfiability ( String format ) throws Illegal Format Exception {", "Message Format . format ( format , ( Object [ ] ) null ) ; }"]}
{"ids": "49390", "code": ["public static int parse Upper Map ( String s ) throws Number Format Exception {", "int upper Case = MAP UNDEFINED ;", "int length = s . length ( ) ;", "if ( length >= NUM_ && length <= NUM_ ) {", "upper Case = Integer . parse Int ( s , NUM_ ) ; }", "else if ( s . length ( ) != NUM_ ) {", "throw new Number Format Exception ( ) ; }", "return upper Case ; }"]}
{"ids": "42030", "code": ["private boolean is Valid Playlist Name ( String new Name ) {", "Playlist blank Playlist = new Playlist ( new Name , false ) ;", "return ! new Name . is Empty ( ) && ! music Library . contains Playlist ( blank Playlist ) ; }"]}
{"ids": "66437", "code": ["public String import XML ( String file Name , Properties ctx , String trx Name ) throws Exception {", "log . info ( STR_ + file Name ) ;", "File in = new File ( file Name ) ;", "if ( ! in . exists ( ) ) {", "String msg = STR_ + file Name ;", "log . info ( STR_ + msg ) ;", "return msg ; }", "try {", "log . info ( STR_ ) ;", "System . set Property ( STR_ , STR_ ) ;", "Pack In Handler handler = new Pack In Handler ( ) ;", "handler . set Trx Name ( trx Name ) ;", "handler . set Ctx ( ctx ) ;", "handler . set Process ( this ) ;", "SAX Parser Factory factory = SAX Parser Factory . new Instance ( ) ;", "SAX Parser parser = factory . new SAX Parser ( ) ;", "String msg = STR_ ;", "log . info ( msg ) ;", "parser . parse ( in , handler ) ;", "msg = STR_ ;", "log . info ( msg ) ;", "return STR_ ; }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , STR_ , e ) ;", "throw e ; } }"]}
{"ids": "63320", "code": ["public synchronized void log Add Or Remove Row ( Session session , int table Id , Row row , boolean add ) {", "if ( log Mode != LOG MODE OFF ) {", "if ( ! recovery Running ) {", "log . log Add Or Remove Row ( session , table Id , row , add ) ; } } }"]}
{"ids": "83332", "code": ["public static < V extends Sampled Vertex > Set < V > create Sampled Partition ( Collection < V > vertices ) {", "Set < V > partition = new Hash Set < V > ( ) ;", "for ( V vertex : vertices ) {", "if ( vertex . is Sampled ( ) ) partition . add ( vertex ) ; }", "return partition ; }"]}
{"ids": "62356", "code": ["public Gremlin Transaction Manager ( Gremlin Graph Factory graph Factory ) {", "super ( ) ;", "this . graph Factory = graph Factory ; }"]}
{"ids": "38900", "code": ["public void shift Beans ( Bean Instance to Shift To , boolean save ) {", "if ( save ) {", "m original Coords = new Vector < Point > ( ) ; }", "int target X = to Shift To . get X ( ) ;", "int target Y = to Shift To . get Y ( ) ;", "for ( int i = NUM_ ; i < m sub Flow . size ( ) ; i ++ ) {", "Bean Instance temp = ( Bean Instance ) m sub Flow . element At ( i ) ;", "if ( save ) {", "Point p = new Point ( temp . get X ( ) - target X , temp . get Y ( ) - target Y ) ;", "m original Coords . add ( p ) ; }", "temp . set X ( target X ) ;", "temp . set Y ( target Y ) ; } }"]}
{"ids": "54716", "code": ["@ Override protected final List < Lat Long > do In Background ( final Object ... args ) {", "List < Lat Long > points = new Array List < > ( ) ;", "Data Helper db Helper = new Data Helper ( m Context ) ;", "final Array List < Position Record > positions = db Helper . load Positions ( ( Integer ) args [ SESSION ID ] , ( Double ) args [ MIN LAT COL ] , ( Double ) args [ MAX LAT COL ] , ( Double ) args [ MIN LON COL ] , ( Double ) args [ MAX LON COL ] ) ;", "for ( Position Record position : positions ) {", "points . add ( new Lat Long ( position . get Latitude ( ) , position . get Longitude ( ) ) ) ; }", "return points ; }"]}
{"ids": "25054", "code": ["private Application Environment ( ) {", "try {", "if ( System . get Property ( Bootstrap Properties . IS UBERJAR ) != null ) {", "this . mode = Mode . UBERJAR ;", "if ( ! load Wild Fly Swarm Application Manifest From Classpath ( ) ) {", "load Wild Fly Swarm Application Manifest From TCCL ( ) ; } }", "else {", "this . mode = Mode . CLASSPATH ;", "load Fraction Manifests From Classpath ( ) ; } }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "82961", "code": ["public Producer Worker ( String topic , String message ) {", "this . topic = topic ;", "this . message = message ; }"]}
{"ids": "75526", "code": ["private static boolean functions Are Allowed ( boolean is Add All Function , boolean is Put All Function , Class < ? > class D , Class < ? > class S ) {", "if ( is Add All Function ) return collection Is Assignable From ( class D ) && collection Is Assignable From ( class S ) ;", "if ( is Put All Function ) return map Is Assignable From ( class D ) && map Is Assignable From ( class S ) ;", "return is Assignable From ( class D , class S ) ; }"]}
{"ids": "66017", "code": ["private void load Org Access User ( Array List < Org Access > list ) {", "Prepared Statement pstmt = null ;", "Result Set rs = null ;", "String sql = STR_ + STR_ ;", "try {", "pstmt = DB . prepare Statement ( sql , get Trx Name ( ) ) ;", "pstmt . set Int ( NUM_ , get AD User ID ( ) ) ;", "rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) ) {", "M User Org Access oa = new M User Org Access ( get Ctx ( ) , rs , get Trx Name ( ) ) ;", "load Org Access Add ( list , new Org Access ( oa . get AD Client ID ( ) , oa . get AD Org ID ( ) , oa . is Read Only ( ) ) ) ; } }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , sql , e ) ; }", "finally {", "DB . close ( rs , pstmt ) ; } }"]}
{"ids": "13514", "code": ["public static Vector 3 D max ( Vector 3 D a , Vector 3 D b ) {", "return new Vector 3 D ( Fast Math . max ( a . get X ( ) , b . get X ( ) ) , Fast Math . max ( a . get Y ( ) , b . get Y ( ) ) , Fast Math . max ( a . get Z ( ) , b . get Z ( ) ) ) ; }"]}
{"ids": "45322", "code": ["private Array List < URL Crawl Datum > read Contents ( Path fetchlist ) throws IO Exception {", "Sequence File . Reader reader = new Sequence File . Reader ( fs , fetchlist , conf ) ;", "Array List < URL Crawl Datum > l = new Array List < URL Crawl Datum > ( ) ;", "READ : do {", "Text key = new Text ( ) ;", "Crawl Datum value = new Crawl Datum ( ) ;", "if ( ! reader . next ( key , value ) ) {", "break READ ; }", "l . add ( new URL Crawl Datum ( key , value ) ) ; }", "while ( true ) ;", "reader . close ( ) ;", "return l ; }"]}
{"ids": "20125", "code": ["public static Color create Random Colour ( ) {", "float r = rand . next Float ( ) ;", "float g = rand . next Float ( ) ;", "float b = rand . next Float ( ) ;", "Color random Color = new Color ( r , g , b ) ;", "return random Color ; }"]}
{"ids": "35036", "code": ["private static Pair < Diagnostic Kind , Boolean > parse Category String ( String category ) {", "final String fixable = STR_ ;", "final boolean is Fixable = category . starts With ( fixable ) ;", "if ( is Fixable ) {", "category = category . substring ( fixable . length ( ) ) ; }", "Diagnostic Kind category Enum = Diagnostic Kind . from Parse String ( category ) ;", "return Pair . of ( category Enum , is Fixable ) ; }"]}
{"ids": "65301", "code": ["public void legacy Process ( Class clazz , Method m , Method Appearance Decision decision ) {", "if ( m . get Declaring Class ( ) != Object . class && m . get Return Type ( ) != void . class && m . get Parameter Types ( ) . length == NUM_ ) {", "String m Name = m . get Name ( ) ;", "if ( ! looks Like Property Read Method ( m Name ) ) {", "decision . set Expose Method As ( null ) ;", "try {", "decision . set Expose As Property ( new Property Descriptor ( m Name , clazz , m Name , null ) ) ; }", "catch ( Introspection Exception e ) {", "throw new Runtime Exception ( e ) ; } } } }"]}
{"ids": "12913", "code": ["public SPTK Pitch Reader Writer ( String lf 0 SPTK File , float window Size In Seconds , float skip Size In Seconds , int sampling Rate ) {", "contour = null ;", "header = new Pitch File Header ( ) ;", "header . window Size In Seconds = window Size In Seconds ;", "header . skip Size In Seconds = skip Size In Seconds ;", "header . fs = sampling Rate ;", "try {", "contour = read SPTKF 0 Data ( lf 0 SPTK File ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "26837", "code": ["public void abort ( ) {", "clean Up ( ) ;", "if ( m Future != null ) {", "m Future . cancel ( true ) ;", "m Future = null ; }", "if ( m Executor Service != null ) {", "m Executor Service . shutdown Now ( ) ;", "m Executor Service = null ; }", "m Listener = null ; }"]}
{"ids": "53569", "code": ["public void add CSP State Listener ( CSP State Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "72112", "code": ["public static void print Wrapped Text ( final Print Stream stream , final String message ) {", "if ( stream != null && message != null && ! message . is Empty ( ) ) {", "stream . println ( wrap Text ( message , MAX LINE WIDTH ) ) ; } }"]}
{"ids": "985", "code": ["private synchronized Rect [ ] compute Bounding Boxes ( ) {", "if ( ! bounding Boxes . is Present ( ) ) {", "Rect [ ] bb = new Rect [ ( int ) contours . size ( ) ] ;", "for ( int i = NUM_ ; i < contours . size ( ) ; i ++ ) {", "bb [ i ] = bounding Rect ( contours . get ( i ) ) ; }", "bounding Boxes = Optional . of ( bb ) ; }", "return bounding Boxes . get ( ) ; }"]}
{"ids": "86867", "code": ["public void add Timeline ( final JSON Object timeline ) {", "Timeline Channel . notify Timeline ( timeline ) ;", "timelines . add First ( timeline ) ;", "final int max Cnt = Symphonys . get Int ( STR_ ) ;", "if ( timelines . size ( ) > max Cnt ) {", "timelines . remove ( max Cnt ) ; } }"]}
{"ids": "66155", "code": ["private boolean load LOB Data ( ) {", "if ( is Store Attachments On File System ) {", "return load LOB Data From File System ( ) ; }", "return load LOB Data From DB ( ) ; }"]}
{"ids": "85021", "code": ["public static < T > List < T > copy To Array List With Extra Capacity ( T [ ] elements , int extra Capacity ) {", "List < T > as List ;", "if ( elements != null ) {", "as List = new Array List < T > ( elements . length + extra Capacity ) ;", "as List . add All ( Arrays . as List ( elements ) ) ; }", "else {", "as List = new Array List < T > ( extra Capacity ) ; }", "return as List ; }"]}
{"ids": "76470", "code": ["private boolean send Event To Listeners ( Cluster Event event ) {", "boolean success = true ;", "for ( String listener Id : Collections . unmodifiable Set ( listeners . key Set ( ) ) ) {", "logger . debug ( STR_ , listener Id , event . get Type ( ) , instance Id ) ;", "Cluster Event Listener listener = listeners . get ( listener Id ) ;", "if ( listener != null && ! listener . handle Event ( event ) ) {", "success = false ; } }", "return success ; }"]}
{"ids": "23528", "code": ["@ Request Mapping ( method = Request Method . PUT , value = STR_ , consumes = { Media Type . APPLICATION JSON VALUE } , produces = { Media Type . APPLICATION JSON VALUE } ) @ Api Operation ( value = STR_ , notes = STR_ + STR_ + STR_ , response = void . class ) @ Api Responses ( { @ Api Response ( code = NUM_ , message = STR_ ) , @ Api Response ( code = NUM_ , message = STR_ ) , @ Api Response ( code = NUM_ , message = STR_ ) , @ Api Response ( code = NUM_ , message = STR_ ) , @ Api Response ( code = NUM_ , message = STR_ ) , @ Api Response ( code = NUM_ , message = STR_ ) , @ Api Response ( code = NUM_ , message = STR_ ) } ) @ Pre Authorize ( STR_ ) public Response Entity < ? > update ( @ Path Variable ( STR_ ) String region , @ Path Variable ( STR_ ) final String [ ] keys , @ Request Param ( value = STR_ , default Value = STR_ ) final String op Value , @ Request Body final String json ) {", "logger . debug ( STR_ , region ) ;", "region = decode ( region ) ;", "if ( keys . length > NUM_ ) {", "return update Multiple Keys ( region , keys , json ) ; }", "else {", "return update Single Key ( region , keys [ NUM_ ] , json , op Value ) ; } }"]}
{"ids": "9723", "code": ["public void load ( X 509 Extension extensions ) {", "Set < String > crit Exts = extensions . get Critical Extension OI Ds ( ) ;", "Set < String > non Crit Exts = extensions . get Non Critical Extension OI Ds ( ) ;", "List < X 509 Ext > sorted Exts = new Array List < X 509 Ext > ( ) ;", "for ( Iterator < String > itr = crit Exts . iterator ( ) ; itr . has Next ( ) ; ) {", "String ext Oid = itr . next ( ) ;", "byte [ ] value = extensions . get Extension Value ( ext Oid ) ;", "X 509 Ext ext = new X 509 Ext ( new ASN 1 Object Identifier ( ext Oid ) , value , true ) ;", "sorted Exts . add ( ext ) ; }", "for ( Iterator < String > itr = non Crit Exts . iterator ( ) ; itr . has Next ( ) ; ) {", "String ext Oid = itr . next ( ) ;", "byte [ ] value = extensions . get Extension Value ( ext Oid ) ;", "X 509 Ext ext = new X 509 Ext ( new ASN 1 Object Identifier ( ext Oid ) , value , false ) ;", "sorted Exts . add ( ext ) ; }", "Collections . sort ( sorted Exts , new Extension Name Comparator ( ) ) ;", "data = new Object [ sorted Exts . size ( ) ] [ NUM_ ] ;", "int i = NUM_ ;", "for ( Iterator < X 509 Ext > itr Sorted Exts = sorted Exts . iterator ( ) ; itr Sorted Exts . has Next ( ) ; ) {", "X 509 Ext ext = itr Sorted Exts . next ( ) ;", "load Row ( ext , i ) ;", "i ++ ; }", "fire Table Data Changed ( ) ; }"]}
{"ids": "40869", "code": ["public Builder delete Addresses ( ) {", "delete Fields . add ( STR_ ) ;", "return this ; }"]}
{"ids": "65018", "code": ["public Query limit ( int limit ) {", "return limit ( limit < NUM_ ? NO LIMIT : Field . < Integer > field ( Integer . to String ( limit ) ) ) ; }"]}
{"ids": "35911", "code": ["public static boolean file Exists ( String f Name ) {", "boolean result = false ;", "File file = new File ( f Name ) ;", "if ( file != null ) {", "result = file . exists ( ) && file . is File ( ) ; }", "return result ; }"]}
{"ids": "11970", "code": ["private static void init ( ) {", "add Method ( STR_ , new com . earth 2 me . essentials . register . payment . methods . i Co 6 ( ) ) ;", "add Method ( STR_ , new com . earth 2 me . essentials . register . payment . methods . i Co 5 ( ) ) ;", "add Method ( STR_ , new com . earth 2 me . essentials . register . payment . methods . BOSE 7 ( ) ) ;", "add Method ( STR_ , new com . earth 2 me . essentials . register . payment . methods . MCUR ( ) ) ;", "Dependencies . add ( STR_ ) ;", "add Method ( STR_ , new com . earth 2 me . essentials . register . payment . methods . Vault Eco ( ) ) ; }"]}
{"ids": "6385", "code": ["public static String convert File Name ( String name , int max Bytes ) {", "try {", "return convert File Name ( name , max Bytes , Charset . default Charset ( ) ) ; }", "catch ( Character Coding Exception cce ) {", "try {", "return convert File Name ( name , max Bytes , Charset . for Name ( STR_ ) ) ; }", "catch ( Character Coding Exception e ) {", "throw new Runtime Exception ( STR_ + name , e ) ; } } }"]}
{"ids": "23670", "code": ["public static void copy ( URL url , File file ) throws IO Exception {", "Input Stream is = url . open Stream ( ) ;", "try {", "Output Stream os = new File Output Stream ( file ) ;", "try {", "byte [ ] buffer = new byte [ NUM_ ] ;", "int read ;", "while ( ( read = is . read ( buffer ) ) > NUM_ ) {", "os . write ( buffer , NUM_ , read ) ; } }", "finally {", "os . close ( ) ; } }", "finally {", "is . close ( ) ; } }"]}
{"ids": "13712", "code": ["public void create Auth Configuration ( String name ) throws AM Console Exception {", "if ( ( name == null ) || ( name . length ( ) == NUM_ ) ) {", "throw new AM Console Exception ( get Localized String ( STR_ ) ) ; }", "String [ ] params = { current Realm , name } ;", "log Event ( STR_ , params ) ;", "String error Msg = null ;", "try {", "AM Auth Config Utils . create Named Config ( name , NUM_ , new Hash Map ( ) , current Realm , get User SSO Token ( ) ) ;", "log Event ( STR_ , params ) ; }", "catch ( SMS Exception e ) {", "error Msg = get Error String ( e ) ;", "String [ ] params Ex = { current Realm , name , error Msg } ;", "log Event ( STR_ , params Ex ) ;", "debug . warning ( STR_ , e ) ; }", "catch ( SSO Exception e ) {", "error Msg = get Error String ( e ) ;", "String [ ] params Ex = { current Realm , name , error Msg } ;", "log Event ( STR_ , params Ex ) ;", "debug . warning ( STR_ , e ) ; }", "catch ( AM Configuration Exception e ) {", "error Msg = get Error String ( e ) ;", "String [ ] params Ex = { current Realm , name , error Msg } ;", "log Event ( STR_ , params Ex ) ;", "debug . warning ( STR_ , e ) ; }", "if ( error Msg != null ) {", "throw new AM Console Exception ( error Msg ) ; } }"]}
{"ids": "32139", "code": ["private void send Buffer ( ) throws IO Exception {", "buf . flip ( ) ;", "send ( buf , buf . remaining ( ) ) ;", "buf = null ; }"]}
{"ids": "9283", "code": ["public void call Event ( Event event ) {", "if ( event . is Asynchronous ( ) ) {", "if ( Thread . holds Lock ( this ) ) {", "throw new Illegal State Exception ( event . get Event Name ( ) + STR_ ) ; }", "if ( server . is Primary Thread ( ) ) {", "throw new Illegal State Exception ( event . get Event Name ( ) + STR_ ) ; }", "fire Event ( event ) ; }", "else {", "synchronized ( this ) {", "fire Event ( event ) ; } } }"]}
{"ids": "50961", "code": ["@ Nullable private static Psi File find File To Open ( @ Not Null List < Psi File > files ) {", "Psi File best File = null ;", "Folder Configuration best Config = null ;", "for ( Psi File file : files ) {", "Psi Directory qualified Directory = file . get Parent ( ) ;", "assert qualified Directory != null : STR_ ;", "Folder Configuration config = Folder Configuration . get Config For Folder ( qualified Directory . get Name ( ) ) ;", "if ( best Config == null || config == null || config . compare To ( best Config ) < NUM_ ) {", "best Config = config ;", "best File = file ; } }", "return best File ; }"]}
{"ids": "71612", "code": ["protected boolean are Equal ( String string 1 , String string 2 , boolean case Matters ) {", "return ( case Matters && string 1 . equals ( string 2 ) ) || ( ! case Matters && string 1 . equals Ignore Case ( string 2 ) ) ; }"]}
{"ids": "51805", "code": ["protected void populate Blob ( int id , byte [ ] base Content , int required Size ) throws SQL Exception {", "Connection con = get Connection Via Driver Manager ( ) ;", "Callable Statement cstmt = null ;", "try {", "cstmt = con . prepare Call ( EXECUTE FILL BINARY BLOB ) ;", "cstmt . set Int ( NUM_ , id ) ;", "cstmt . set Bytes ( NUM_ , base Content ) ;", "cstmt . set Int ( NUM_ , required Size ) ;", "cstmt . execute ( ) ; }", "finally {", "close Quietly ( cstmt ) ;", "close Quietly ( con ) ; } }"]}
{"ids": "7062", "code": ["public Statement is Null ( ) {", "statement . append ( STR_ ) ;", "return this ; }"]}
{"ids": "48545", "code": ["public void clear ( ) {", "process Queue ( ) ;", "hash . clear ( ) ; }"]}
{"ids": "40987", "code": ["private void update Favorite Station ( ) {", "String show String = null ;", "if ( Fm Radio Station . is Favorite Station ( m Context , m Current Station ) ) {", "String station Name = Fm Radio Station . get Station Name ( m Context , m Current Station , Fm Radio Station . STATION TYPE FAVORITE ) ;", "Fm Radio Station . update Station To Db ( m Context , station Name , Fm Radio Station . STATION TYPE SEARCHED , m Current Station ) ;", "m Button Add To Favorite . set Image Resource ( R . drawable . btn fm favorite off selector ) ;", "m Text Station Name . set Text ( STR_ ) ;", "show String = m Project String Ext . get Project String ( m Context , R . string . toast channel deleted , R . string . toast channel deleted 1 ) ; }", "else {", "String station Name = Fm Radio Station . get Station Name ( m Context , m Current Station , Fm Radio Station . STATION TYPE SEARCHED ) ;", "if ( Fm Radio Station . is Station Exist ( m Context , m Current Station , Fm Radio Station . STATION TYPE SEARCHED ) ) {", "Fm Radio Station . update Station To Db ( m Context , station Name , Fm Radio Station . STATION TYPE FAVORITE , m Current Station ) ; }", "else {", "Fm Radio Station . insert Station To Db ( m Context , station Name , m Current Station , Fm Radio Station . STATION TYPE FAVORITE ) ; }", "m Button Add To Favorite . set Image Resource ( R . drawable . btn fm favorite on selector ) ;", "m Text Station Name . set Text ( station Name ) ;", "show String = m Project String Ext . get Project String ( m Context , R . string . toast channel added , R . string . toast channel added 1 ) ; }", "show Toast ( show String ) ; }"]}
{"ids": "39082", "code": ["public Iterator < Capability > dependencies ( ) {", "return m Dependencies . iterator ( ) ; }"]}
{"ids": "20463", "code": ["public static void notify Ticket ( Context c , @ Non Null Ticket t , boolean keep Notification ) {", "String text ;", "String ticker ;", "int small Icon ;", "int large Icon ;", "int status ;", "switch ( Tickets Adapter . get Validity Status ( t . get Status ( ) , t . get Valid To ( ) ) ) {", "case Ticket Provider . Tickets . STATUS VALID :", "case Ticket Provider . Tickets . STATUS VALID EXPIRING :", "text = c . get String ( R . string . notif valid text , Format Util . format Date Time Difference ( t . get Valid To ( ) ) ) ;", "ticker = c . get String ( R . string . notif valid ticker ) ;", "small Icon = R . drawable . notification small ready ;", "large Icon = R . drawable . notification big ready ;", "status = Ticket Provider . Tickets . STATUS VALID EXPIRING ;", "break ;", "case Ticket Provider . Tickets . STATUS EXPIRING :", "case Ticket Provider . Tickets . STATUS EXPIRING EXPIRED :", "text = c . get String ( R . string . notif expiring text , Format Util . format Time ( t . get Valid To ( ) ) ) ;", "ticker = c . get String ( R . string . notif expiring ticker ) ;", "small Icon = R . drawable . notification small warning ;", "large Icon = R . drawable . notification big warning ;", "status = Ticket Provider . Tickets . STATUS EXPIRING EXPIRED ;", "break ;", "case Ticket Provider . Tickets . STATUS EXPIRED :", "text = c . get String ( R . string . notif expired text , Format Util . format Time ( t . get Valid To ( ) ) ) ;", "ticker = c . get String ( R . string . notif expired ticker ) ;", "small Icon = R . drawable . notification small expired ;", "large Icon = R . drawable . notification big expired ;", "status = Ticket Provider . Tickets . STATUS EXPIRED ;", "break ;", "default :", "return ; }", "Intent intent = new Intent ( c , Wearable Service . class ) ;", "intent . set Action ( STR_ ) ;", "intent . put Extra ( STR_ , t ) ;", "intent . put Extra ( STR_ , status ) ;", "c . start Service ( intent ) ;", "Intent i = new Intent ( c , Main Activity . class ) ;", "i . add Flags ( Intent . FLAG ACTIVITY SINGLE TOP | Intent . FLAG ACTIVITY CLEAR TOP ) ;", "i . put Extra ( Main Activity . EXTRA TICKET ID , t . get Id ( ) ) ;", "Pending Intent open Intent = Pending Intent . get Activity ( c , t . get Notification Id ( ) , i , Pending Intent . FLAG CANCEL CURRENT ) ;", "Intent i 2 = new Intent ( c , Main Activity . class ) ;", "i 2 . add Flags ( Intent . FLAG ACTIVITY SINGLE TOP | Intent . FLAG ACTIVITY CLEAR TOP ) ;", "i 2 . put Extra ( Main Activity . EXTRA TICKET ID , t . get Id ( ) ) ;", "i 2 . put Extra ( Main Activity . EXTRA SHOW SMS , true ) ;", "Pending Intent show Sms Intent = Pending Intent . get Activity ( c , t . get Notification Id ( ) + NUM_ , i 2 , Pending Intent . FLAG CANCEL CURRENT ) ;", "List < Action > actions = new Array List < Action > ( ) ;", "actions . add ( new Action ( R . drawable . notification show sms , R . string . notif show sms , show Sms Intent ) ) ;", "List < String > rows = new Array List < String > ( ) ;", "rows . add ( text ) ;", "rows . add ( c . get String ( R . string . tickets valid from ) + STR_ + Format Util . format Date Time ( t . get Valid From ( ) ) ) ;", "rows . add ( c . get String ( R . string . tickets code ) + STR_ + t . get Hash ( ) ) ;", "fire Notification ( c , t . get Notification Id ( ) , open Intent , c . get String ( R . string . application name ) , text , rows , t . get City ( ) , ticker , small Icon , large Icon , actions , keep Notification ) ; }"]}
{"ids": "10548", "code": ["public final static int parse Int ( String str ) {", "char c = str . char At ( NUM_ ) ;", "int length = str . length ( ) ;", "boolean negative = ( c == STR_ ) ;", "int offset = NUM_ ;", "if ( negative ) {", "if ( length == NUM_ || length > NUM_ ) {", "return Integer . parse Int ( str ) ; }", "c = str . char At ( offset ++ ) ; }", "else {", "if ( length > NUM_ ) {", "return Integer . parse Int ( str ) ; } }", "if ( c > STR_ || c < STR_ ) {", "return Integer . parse Int ( str ) ; }", "int num = c - STR_ ;", "if ( offset < length ) {", "c = str . char At ( offset ++ ) ;", "if ( c > STR_ || c < STR_ ) {", "return Integer . parse Int ( str ) ; }", "num = ( num * NUM_ ) + ( c - STR_ ) ;", "if ( offset < length ) {", "c = str . char At ( offset ++ ) ;", "if ( c > STR_ || c < STR_ ) {", "return Integer . parse Int ( str ) ; }", "num = ( num * NUM_ ) + ( c - STR_ ) ;", "if ( offset < length ) {", "do {", "c = str . char At ( offset ++ ) ;", "if ( c > STR_ || c < STR_ ) {", "return Integer . parse Int ( str ) ; }", "num = ( num * NUM_ ) + ( c - STR_ ) ; }", "while ( offset < length ) ; } } }", "return negative ? - num : num ; }"]}
{"ids": "39617", "code": ["@ Deprecated public static < T > T execute With Back Off ( Abstract Google Client Request < T > client , String error , Object ... error Args ) throws IO Exception , Interrupted Exception {", "return execute With Back Off ( client , String . format ( error , error Args ) ) ; }"]}
{"ids": "56067", "code": ["private void check Server Response Code ( Http URL Connection url Connection ) throws Request Failure Exception {", "try {", "if ( url Connection . get Response Code ( ) != NUM_ ) {", "throw new Request Failure Exception ( STR_ + url Connection . get Response Code ( ) + STR_ ) ; } }", "catch ( IO Exception e ) {", "throw new Request Failure Exception ( STR_ , e ) ; } }"]}
{"ids": "36300", "code": ["public static void add Resource Source ( Resource Source source ) {", "ALL RESOURCE SOURCES . add ( source ) ; }"]}
{"ids": "73351", "code": ["private void commit Changes ( ) {", "hopfield Props Panel . commit Changes ( ) ;", "input Panel . commit Changes ( ) ; }"]}
{"ids": "5131", "code": ["private boolean connect to target ( Pla Point Int p from point ) {", "if ( nearest target item != null && target set != null && ! target set . contains ( nearest target item ) ) {", "nearest target item = null ; }", "if ( nearest target item == null || ! nearest target item . shares net no ( net nos ) ) {", "return false ; }", "boolean route completed = false ;", "Pla Point Int connection point = null ;", "if ( nearest target item instanceof Brd Abit ) {", "Brd Abit target = ( Brd Abit ) nearest target item ;", "connection point = target . center get ( ) ; }", "else if ( nearest target item instanceof Brd Tracep ) {", "return r board . connect to trace ( p from point , ( Brd Tracep ) nearest target item , pen half width arr [ layer active no ] , clearance class ) ; }", "else if ( nearest target item instanceof Brd Area Conduction ) {", "connection point = p from point ; }", "if ( connection point != null ) {", "route completed = itera connect ( p from point , connection point ) ; }", "return route completed ; }"]}
{"ids": "84548", "code": ["public boolean on Generic Motion Event ( Motion Event ev ) {", "if ( ( ev . get Source ( ) & Input Device . SOURCE CLASS POINTER ) == Input Device . SOURCE CLASS POINTER ) {", "int action = ev . get Action ( ) ;", "switch ( action & Motion Event . ACTION MASK ) {", "case Motion Event . ACTION SCROLL :", "float v Scroll = ev . get Axis Value ( Motion Event . AXIS VSCROLL ) ;", "if ( v Scroll > NUM_ ) {", "if ( m Deck View . ensure Focused Task ( ) ) {", "m Deck View . focus Next Task ( true , false ) ; } }", "else {", "if ( m Deck View . ensure Focused Task ( ) ) {", "m Deck View . focus Next Task ( false , false ) ; } }", "return true ; } }", "return false ; }"]}
{"ids": "13579", "code": ["public boolean add Class ( Owl Class target Class ) {", "target Class . add QC Restriction ( this ) ;", "return qc Classes . add ( target Class ) ; }"]}
{"ids": "4647", "code": ["public void edit Element ( final Object element , final String column Property Name ) {", "final int column Index = Table Viewer Utils . column Property Name To Column Index ( column Property Name , true , viewer ) ;", "viewer . edit Element ( element , column Index ) ; }"]}
{"ids": "3889", "code": ["@ Override public Server Heartbeat server ( String address , int port , boolean is SSL , String cluster Id , String display Name , boolean is Dynamic ) {", "Objects . require Non Null ( address ) ;", "Objects . require Non Null ( cluster Id ) ;", "if ( address . is Empty ( ) ) {", "address = STR_ ; }", "Cluster Heartbeat cluster = create Cluster ( cluster Id ) ;", "Server Heartbeat server ;", "if ( is Dynamic ) {", "server = cluster . create Dynamic Server ( address , port , is SSL ) ; }", "else {", "server = cluster . create Server ( address , port , is SSL ) ; }", "if ( display Name != null ) {", "server . set Display Name ( display Name ) ; }", "if ( ! is Dynamic ) {", "cluster . add Seed Server ( server ) ; }", "return server ; }"]}
{"ids": "70364", "code": ["private void find Club ( ) {", "if ( ce ( ) == null ) {", "return ; }", "String title = Messages . get String ( STR_ ) ;", "String body = Messages . get String ( STR_ ) ;", "if ( ! clientgui . do Yes No Dialog ( title , body ) ) {", "return ; }", "attacks . remove All Elements ( ) ;", "attacks . add Element ( new Find Club Action ( cen ) ) ;", "ready ( ) ; }"]}
{"ids": "68816", "code": ["public PDF Xref ( byte [ ] line ) {", "if ( line == null ) {", "id = - NUM_ ;", "generation = - NUM_ ; }", "else {", "id = Integer . parse Int ( new String ( line , NUM_ , NUM_ ) ) ;", "generation = Integer . parse Int ( new String ( line , NUM_ , NUM_ ) ) ; }", "compressed = false ; }"]}
{"ids": "76613", "code": ["public static String [ ] make Strings ( Collection < Inet Address > addrs ) {", "String [ ] result = new String [ addrs . size ( ) ] ;", "int i = NUM_ ;", "for ( Inet Address addr : addrs ) {", "result [ i ++ ] = addr . get Host Address ( ) ; }", "return result ; }"]}
{"ids": "71761", "code": ["public Smooth Moves ( ) {", "cycle Start = System . nano Time ( ) / NUM_ ;", "start Timer ( current Resolution ) ; }"]}
{"ids": "65549", "code": ["public static void update Price Lists ( Properties ctx , Product Bean product Bean , String trx Name ) throws Operation Exception {", "Array List < Product Bean > list = product Bean . get Product Bean List ( ) ;", "if ( list != null ) {", "int product Id = product Bean . get Product Id ( ) ;", "Iterator < Product Bean > iter = list . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Product Bean bean = iter . next ( ) ;", "int price List Id = bean . get Price List Id ( ) ;", "Big Decimal std Price = bean . get Std Price ( ) ;", "Big Decimal list Price = bean . get List Price ( ) ;", "Big Decimal limit Price = bean . get Limit Price ( ) ;", "M Price List price List = M Price List . get ( ctx , price List Id , trx Name ) ;", "if ( price List . is Tax Included ( ) ) {", "std Price = bean . get Std Price Incl ( ) ;", "list Price = bean . get List Price Incl ( ) ;", "limit Price = bean . get Limit Price Incl ( ) ; }", "update Price Lists ( ctx , product Id , price List Id , std Price , list Price , limit Price , trx Name ) ; } } }"]}
{"ids": "75049", "code": ["private String check Dependencies ( Module Descriptor md , Hash Map < String , Module Descriptor > modlist ) {", "logger . debug ( STR_ + md . get Id ( ) ) ;", "Module Interface [ ] requires = md . get Requires ( ) ;", "if ( requires != null ) {", "for ( Module Interface req : requires ) {", "String res = check One Dependency ( md , req , modlist ) ;", "if ( ! res . is Empty ( ) ) {", "return res ; } } }", "return STR_ ; }"]}
{"ids": "84273", "code": ["public void deserialize Funnel ( List < Object > serialized Funnel ) {", "Set < Object > funnel Step Accumulator = new Hash Set < > ( ) ;", "for ( Object e : serialized Funnel ) {", "if ( e != null ) {", "funnel Step Accumulator . add ( e ) ; }", "else {", "funnel Steps . add ( new Hash Set < > ( funnel Step Accumulator ) ) ;", "funnel Step Accumulator . clear ( ) ; } } }"]}
{"ids": "17250", "code": ["public static String append Parameter ( Ct Class type , String descriptor ) {", "int i = descriptor . index Of ( STR_ ) ;", "if ( i < NUM_ ) return descriptor ;", "else {", "String Buffer newdesc = new String Buffer ( ) ;", "newdesc . append ( descriptor . substring ( NUM_ , i ) ) ;", "to Descriptor ( newdesc , type ) ;", "newdesc . append ( descriptor . substring ( i ) ) ;", "return newdesc . to String ( ) ; } }"]}
{"ids": "20908", "code": ["public void add Catch Clause ( Catch Clause clause ) {", "assert Not Null ( clause ) ;", "if ( catch Clauses == null ) {", "catch Clauses = new Array List < Catch Clause > ( ) ; }", "catch Clauses . add ( clause ) ;", "clause . set Parent ( this ) ; }"]}
{"ids": "30480", "code": ["public void unlock ( Object key ) {", "String uid = String . value Of ( key ) ;", "Transaction tr = locked UID Hash Map . get ( uid ) ;", "if ( tr == null ) {", "return ; }", "try {", "tr . commit ( ) ; }", "catch ( Exception e ) {", "logger . warn ( STR_ , e ) ; }", "finally {", "locked UID Hash Map . remove ( uid ) ; } }"]}
{"ids": "29558", "code": ["public List < Order > fetch Orders ( int start Index , int num ) {", "int end Index = start Index + num > orders . size ( ) ? orders . size ( ) : start Index + num ;", "return orders . sub List ( start Index , end Index ) ; }"]}
{"ids": "21064", "code": ["public boolean ensure Schema Agreement ( ) {", "long start = System . current Time Millis ( ) ;", "Map < String , List < String > > schemas = null ;", "while ( System . current Time Millis ( ) - start < Db Client Context . MAX SCHEMA WAIT MS ) {", "try {", "log . info ( STR_ , Db Client Context . SCHEMA RETRY SLEEP MILLIS / NUM_ ) ;", "Thread . sleep ( Db Client Context . SCHEMA RETRY SLEEP MILLIS ) ; }", "catch ( Interrupted Exception ex ) {", "log . warn ( STR_ ) ; }", "schemas = get Schema Versions ( ) ;", "if ( schemas . size ( ) > NUM_ ) {", "continue ; }", "if ( schemas . size ( ) == NUM_ ) {", "if ( ! schemas . contains Key ( Storage Proxy . UNREACHABLE ) ) {", "return false ; }", "else {", "continue ; } }", "if ( schemas . contains Key ( Storage Proxy . UNREACHABLE ) ) {", "return true ; } }", "log . error ( STR_ , schemas ) ;", "throw new Illegal State Exception ( STR_ ) ; }"]}
{"ids": "47667", "code": ["void clear ( ) {", "stack . clear ( ) ; }"]}
{"ids": "80094", "code": ["private Tile Store ( final Sprite Store store ) {", "this . store = store ;", "tiles = new Array List < Sprite > ( ) ;", "tiles . add ( store . get Empty Sprite ( ) ) ; }"]}
{"ids": "31161", "code": ["private void token ( char c ) throws Configuration Exception , IO Exception {", "int t = st . next Token ( ) ;", "if ( t != c ) {", "if ( c == STR_ ) {", "syntax ( STR_ ) ; }", "else {", "syntax ( new String ( new char [ ] { STR_ , c , + STR_ } ) ) ; } } }"]}
{"ids": "72592", "code": ["public static boolean is Jar URL ( URL url ) {", "String protocol = url . get Protocol ( ) ;", "return ( URL PROTOCOL JAR . equals ( protocol ) || URL PROTOCOL ZIP . equals ( protocol ) || URL PROTOCOL VFSZIP . equals ( protocol ) || URL PROTOCOL WSJAR . equals ( protocol ) ) ; }"]}
{"ids": "33226", "code": ["public Accessor ( String class Name , Class Loader class Loader , Class [ ] constructor Types , Object [ ] constructor Args ) {", "try {", "f Class = Class . for Name ( class Name , true , class Loader ) ; }", "catch ( Class Not Found Exception e ) {", "fail ( ) ; }", "catch ( Exception In Initializer Error e ) {", "fail ( ) ; }", "Constructor constructor = null ;", "try {", "constructor = f Class . get Declared Constructor ( constructor Types ) ; }", "catch ( Security Exception e 2 ) {", "fail ( ) ; }", "catch ( No Such Method Exception e 2 ) {", "fail ( ) ; }", "Assert . is Not Null ( constructor ) ;", "constructor . set Accessible ( true ) ;", "try {", "f Instance = constructor . new Instance ( constructor Args ) ; }", "catch ( Illegal Argument Exception e ) {", "fail ( ) ; }", "catch ( Invocation Target Exception e ) {", "fail ( ) ; }", "catch ( Instantiation Exception e ) {", "fail ( ) ; }", "catch ( Illegal Access Exception e ) {", "fail ( ) ; } }"]}
{"ids": "41233", "code": ["public static List < Logged Mqtt Message > parse Message Log ( final List < String > messages , final Progress Updater progress , final long current , final long max ) throws Spy Exception {", "try {", "final long start Time = Time Utils . get Monotonic Time ( ) ;", "final int items = messages . size ( ) ;", "final long chunk Size = items / NUM_ ;", "final Mqtt Message Log Parser parser = new Mqtt Message Log Parser ( ) ;", "final List < Logged Mqtt Message > list = new Array List < Logged Mqtt Message > ( ) ;", "long item = NUM_ ;", "long report At = NUM_ ;", "for ( int i = NUM_ ; i < items ; i ++ ) {", "final String message = messages . get ( i ) ;", "if ( progress != null ) {", "if ( progress . is Cancelled ( ) ) {", "logger . info ( STR_ ) ;", "return null ; }", "item ++ ;", "if ( item % NUM_ == NUM_ ) {", "progress . update ( current + item , max ) ; } }", "if ( ( i > NUM_ ) && ( i == ( chunk Size * report At ) ) ) {", "final long current Time = Time Utils . get Monotonic Time ( ) ;", "final long time Taken = current Time - start Time ;", "final long total Time Expected = time Taken * items / i ;", "if ( time Taken > NUM_ ) {", "logger . info ( STR_ , report At * NUM_ , ( total Time Expected - time Taken ) / NUM_ ) ; }", "report At ++ ; }", "try {", "list . add ( parser . parse ( message ) ) ; }", "catch ( XML Exception e ) {", "logger . error ( STR_ + message , e ) ; } }", "logger . info ( STR_ , list . size ( ) ) ;", "return list ; }", "catch ( XML Exception e ) {", "throw new Spy Exception ( STR_ , e ) ; } }"]}
{"ids": "71569", "code": ["public void stop ( ) {", "duration += System . current Time Millis ( ) - start ; }"]}
{"ids": "42545", "code": ["@ Uninterruptible public static Address unwind Native Stack Frame ( Address currfp ) {", "if ( VM . Build For IA 32 ) {", "return currfp ; }", "Address callee fp ;", "Address fp = Magic . get Caller Frame Pointer ( currfp ) ;", "Address ip ;", "do {", "callee fp = fp ;", "ip = Magic . get Return Address Unchecked ( fp ) ;", "fp = Magic . get Caller Frame Pointer ( fp ) ; }", "while ( ! Memory Manager . address In VM ( ip ) && fp . NE ( Stack Frame Layout . get Stack Frame Sentinel FP ( ) ) ) ;", "if ( VM . Build For Power PC ) {", "return fp ; }", "else {", "return callee fp ; } }"]}
{"ids": "2026", "code": ["public static boolean is Mime Type Image ( String mime Type ) {", "return mime Type != null && mime Type . starts With ( STR_ ) ; }"]}
{"ids": "74762", "code": ["public FX Message Dialog ( final Stage parent , final Parent group ) {", "this ( parent ) ;", "content . set Center ( group ) ; }"]}
{"ids": "12510", "code": ["public Matrix abs ( ) {", "Matrix result = new Matrix ( m , n ) ;", "for ( int i = NUM_ ; i < result . A . length ; i ++ ) {", "for ( int j = NUM_ ; j < result . A [ i ] . length ; j ++ ) result . A [ i ] [ j ] = Math . abs ( A [ i ] [ j ] ) ; }", "return result ; }"]}
{"ids": "14725", "code": ["public void remove Attribute ( String attr Name ) throws SMS Exception {", "Set attribute = ( Set ) attr Set . get ( attr Name ) ;", "if ( attribute == null ) {", "throw ( new SMS Exception ( Ldap Exception . new Ldap Exception ( Result Code . ATTRIBUTE OR VALUE EXISTS , get Bundle String ( IUMS Constants . SMS ATTR OR VAL EXISTS ) ) , STR_ ) ) ; }", "attr Set . remove ( attr Name ) ;", "if ( mod Set == null ) {", "mod Set = new Hash Set ( ) ; }", "Basic Attribute ba = new Basic Attribute ( attr Name , attribute ) ;", "for ( Iterator items = attribute . iterator ( ) ; items . has Next ( ) ; ) ba . add ( items . next ( ) ) ;", "mod Set . add ( new Modification Item ( Dir Context . REMOVE ATTRIBUTE , ba ) ) ; }"]}
{"ids": "37302", "code": ["private static Debugger Exception parse Exception Option ( Node node ) {", "return new Debugger Exception ( parse String Option ( node , STR_ ) , parse Long Option ( node , STR_ ) , Debugger Exception Handling Action . convert To Handling Action ( parse Int Option ( node , STR_ ) ) ) ; }"]}
{"ids": "81849", "code": ["public Image rotate 180 Degrees ( Image image , boolean maintain Opacity ) {", "int [ ] rgb = image . get RGB ( ) ;", "int [ ] new RGB = new int [ rgb . length ] ;", "int width = image . get Width ( ) ;", "int height = image . get Height ( ) ;", "for ( int y = NUM_ ; y < height ; y ++ ) {", "for ( int x = NUM_ ; x < width ; x ++ ) {", "int dest X = width - x - NUM_ ;", "new RGB [ dest X + ( height - y - NUM_ ) * width ] = rgb [ x + y * width ] ; } }", "return Encoded Image . create From RGB ( new RGB , width , height , ! maintain Opacity ) ; }"]}
{"ids": "65711", "code": ["public static void update Finantare ( Set Get Model m , String changed Column Name ) {", "Big Decimal val Cofinantare = Set Get Util . get Attr Value As Big Decimal ( m , COLUMNNAME A Valoare Cofinantare ) ;", "Big Decimal asset Cost = Set Get Util . get Attr Value As Big Decimal ( m , COLUMNNAME A Asset Cost ) ;", "Big Decimal val Tert = Set Get Util . get Attr Value As Big Decimal ( m , COLUMNNAME A Valoare Tert ) ;", "if ( val Cofinantare . signum ( ) == NUM_ && val Tert . signum ( ) == NUM_ ) {", "val Cofinantare = asset Cost ;", "val Tert = Env . ZERO ; }", "else if ( COLUMNNAME A Asset Cost . equals ( changed Column Name ) ) {", "val Cofinantare = asset Cost . subtract ( val Tert ) ; }", "else if ( COLUMNNAME A Valoare Cofinantare . equals ( changed Column Name ) ) {", "val Tert = asset Cost . subtract ( val Cofinantare ) ; }", "else if ( COLUMNNAME A Valoare Tert . equals ( changed Column Name ) ) {", "val Cofinantare = asset Cost . subtract ( val Tert ) ; }", "else {", "val Tert = asset Cost . subtract ( val Cofinantare ) ; }", "String tip Finantare = A TIP FINANTARE Cofinantare ;", "if ( val Tert . signum ( ) == NUM_ ) {", "tip Finantare = A TIP FINANTARE Proprie ; }", "else if ( val Cofinantare . signum ( ) == NUM_ ) {", "tip Finantare = A TIP FINANTARE Terti ; }", "m . set Attr Value ( COLUMNNAME A Tip Finantare , tip Finantare ) ;", "m . set Attr Value ( COLUMNNAME A Valoare Cofinantare , val Cofinantare ) ;", "m . set Attr Value ( COLUMNNAME A Valoare Tert , val Tert ) ;", "if ( A TIP FINANTARE Proprie . equals ( tip Finantare ) && Set Get Util . is Persistent ( m ) ) {", "m . set Attr Value ( COLUMNNAME A Funding Mode ID , null ) ; } }"]}
{"ids": "65643", "code": ["private void display Calendar ( ) {", "List Item list Item = field Resource . get Selected Item ( ) ;", "if ( list Item == null ) return ;", "Key Name Pair pp = new Key Name Pair ( ( Integer ) list Item . get Value ( ) , list Item . get Label ( ) ) ;", "int S Resource ID = pp . get Key ( ) ;", "m m Assignment . set S Resource ID ( S Resource ID ) ;", "Date date = field Date . get Value ( ) ;", "if ( date == null ) date = new Timestamp ( System . current Time Millis ( ) ) ;", "m loading = true ;", "schedule Pane . recreate ( S Resource ID , date ) ;", "m loading = false ;", "invalidate ( ) ; }"]}
{"ids": "71146", "code": ["public Line String create Line String ( Coordinate Sequence coordinates ) {", "return new Line String ( coordinates , this ) ; }"]}
{"ids": "17267", "code": ["public void close ( ) {", "if ( closed . compare And Set ( false , true ) ) {", "do Close ( ) ; } }"]}
{"ids": "28845", "code": ["void subtract Flakes ( int quantity ) {", "for ( int i = NUM_ ; i < quantity ; ++ i ) {", "int index = num Flakes - i - NUM_ ;", "flakes . remove ( index ) ; }", "set Num Flakes ( num Flakes - quantity ) ; }"]}
{"ids": "13856", "code": ["public boolean required Resource Name ( Policy policy , String realm Name , String name ) {", "get Svc Type Name To Actions Map ( policy , realm Name ) ;", "return required Resource Name Service . contains ( name ) ; }"]}
{"ids": "49332", "code": ["public static void main ( String args [ ] ) {", "boolean ok = parse Options ( args ) ;", "if ( ! ok || ! strip Files ( infiles , outfiles ) ) {", "System . exit ( NUM_ ) ; } }"]}
{"ids": "68107", "code": ["Jar File open ( final File jar File ) throws IO Exception {", "is True ( jar File . exists ( ) , STR_ ) ;", "return new Jar File ( jar File ) ; }"]}
{"ids": "40901", "code": ["public void remove All Emails ( ) {", "emails . clear ( ) ; }"]}
{"ids": "14368", "code": ["public PW Reset Admin Log ( SSO Token token ) {", "this . token = token ;", "if ( log Status ) {", "logger = ( com . sun . identity . log . Logger ) Logger . get Logger ( log File ) ; }", "String lstr = System Properties . get ( Constants . AM LOCALE ) ;", "init ( lstr ) ; }"]}
{"ids": "8241", "code": ["public static boolean is Letter ( Character self ) {", "return Character . is Letter ( self ) ; }"]}
{"ids": "81311", "code": ["public static String create Link ( String uri , String label ) {", "return STR_ + uri + STR_ + label + STR_ ; }"]}
{"ids": "44303", "code": ["public static boolean is Expression ( String token , boolean is Xml ) {", "String open Expr ;", "String close Expr ;", "if ( is Xml ) {", "open Expr = OPEN EXPR XML ;", "close Expr = CLOSE EXPR XML ; }", "else {", "open Expr = OPEN EXPR ;", "close Expr = CLOSE EXPR ; }", "if ( token . starts With ( open Expr ) && token . ends With ( close Expr ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "15863", "code": ["public void destroy ( ) {", "this . is Initialized = false ;", "this . is Finished = false ;", "this . first Node = null ;", "this . tail Length = NUM_ ;", "this . first Node Height = - NUM_ ; }"]}
{"ids": "62764", "code": ["public static Uri from File ( File file ) {", "if ( file == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "Path Part path = Path Part . from Decoded ( file . get Absolute Path ( ) ) ;", "return new Hierarchical Uri ( STR_ , Part . EMPTY , path , Part . NULL , Part . NULL ) ; }"]}
{"ids": "32338", "code": ["protected Object read Fixed Type ( Binary Reader Ex Impl reader ) throws Binary Object Exception {", "Object val = null ;", "switch ( mode ) {", "case BYTE :", "val = reader . read Byte Nullable ( id ) ;", "break ;", "case SHORT :", "val = reader . read Short Nullable ( id ) ;", "break ;", "case INT :", "val = reader . read Int Nullable ( id ) ;", "break ;", "case LONG :", "val = reader . read Long Nullable ( id ) ;", "break ;", "case FLOAT :", "val = reader . read Float Nullable ( id ) ;", "break ;", "case DOUBLE :", "val = reader . read Double Nullable ( id ) ;", "break ;", "case CHAR :", "val = reader . read Char Nullable ( id ) ;", "break ;", "case BOOLEAN :", "val = reader . read Boolean Nullable ( id ) ;", "break ;", "case DECIMAL :", "val = reader . read Decimal ( id ) ;", "break ;", "case STRING :", "val = reader . read String ( id ) ;", "break ;", "case UUID :", "val = reader . read Uuid ( id ) ;", "break ;", "case DATE :", "val = reader . read Date ( id ) ;", "break ;", "case TIMESTAMP :", "val = reader . read Timestamp ( id ) ;", "break ;", "case BYTE ARR :", "val = reader . read Byte Array ( id ) ;", "break ;", "case SHORT ARR :", "val = reader . read Short Array ( id ) ;", "break ;", "case INT ARR :", "val = reader . read Int Array ( id ) ;", "break ;", "case LONG ARR :", "val = reader . read Long Array ( id ) ;", "break ;", "case FLOAT ARR :", "val = reader . read Float Array ( id ) ;", "break ;", "case DOUBLE ARR :", "val = reader . read Double Array ( id ) ;", "break ;", "case CHAR ARR :", "val = reader . read Char Array ( id ) ;", "break ;", "case BOOLEAN ARR :", "val = reader . read Boolean Array ( id ) ;", "break ;", "case DECIMAL ARR :", "val = reader . read Decimal Array ( id ) ;", "break ;", "case STRING ARR :", "val = reader . read String Array ( id ) ;", "break ;", "case UUID ARR :", "val = reader . read Uuid Array ( id ) ;", "break ;", "case DATE ARR :", "val = reader . read Date Array ( id ) ;", "break ;", "case TIMESTAMP ARR :", "val = reader . read Timestamp Array ( id ) ;", "break ;", "case OBJECT ARR :", "val = reader . read Object Array ( id ) ;", "break ;", "case COL :", "val = reader . read Collection ( id , null ) ;", "break ;", "case MAP :", "val = reader . read Map ( id , null ) ;", "break ;", "case BINARY OBJ :", "val = reader . read Binary Object ( id ) ;", "break ;", "case ENUM :", "val = reader . read Enum ( id , field . get Type ( ) ) ;", "break ;", "case ENUM ARR :", "val = reader . read Enum Array ( id , field . get Type ( ) . get Component Type ( ) ) ;", "break ;", "case BINARY :", "case OBJECT :", "val = reader . read Object ( id ) ;", "break ;", "case CLASS :", "val = reader . read Class ( id ) ;", "break ;", "default :", "assert false : STR_ + mode ; }", "return val ; }"]}
{"ids": "24018", "code": ["public void remove ( Region Entry entry , Object value ) {", "Object object = map . get ( entry ) ;", "if ( object == null ) return ;", "if ( object instanceof Collection ) {", "Collection coll = ( Collection ) object ;", "boolean removed = false ;", "if ( use List ) {", "synchronized ( coll ) {", "removed = coll . remove ( value ) ; } }", "else {", "removed = coll . remove ( value ) ; }", "if ( removed ) {", "if ( coll . size ( ) == NUM_ ) {", "map . remove ( entry ) ; }", "atomic Updater . decrement And Get ( this ) ; } }", "else {", "if ( object . equals ( value ) ) {", "map . remove ( entry ) ; }", "atomic Updater . decrement And Get ( this ) ; } }"]}
{"ids": "52479", "code": ["private Hash Data Cache ( Data Cache < Pair < String , T > > cache , String algorithm ) {", "this . cache = cache ;", "this . algorithm = algorithm ;", "try {", "Message Digest . get Instance ( algorithm ) ; }", "catch ( No Such Algorithm Exception e ) {", "String msg = STR_ + algorithm ;", "LOG . warn ( msg , e ) ;", "throw new System Config Exception ( e ) ; } }"]}
{"ids": "30210", "code": ["private void marshall Enum ( Object value , Enum Type enum Type ) throws IO Exception {", "LOG . debug ( STR_ , value , enum Type ) ;", "json Generator . write String ( value . to String ( ) ) ; }"]}
{"ids": "1924", "code": ["private void init Events ( ) {", "set Selection Sounds ( play , h Score , credits , quit , quit Y , quit N ) ;", "play . set On Action ( null ) ;", "h Score . set On Action ( null ) ;", "credits . set On Action ( null ) ;", "quit . set On Action ( null ) ;", "quit Y . set On Action ( null ) ;", "quit N . set On Action ( null ) ;", "scene . set On Key Pressed ( null ) ;", "scene . set On Key Released ( null ) ; }"]}
{"ids": "35155", "code": ["private String map Collection Name ( String collection Name , boolean dest ) {", "if ( ( collection Rules . size ( ) == NUM_ ) && ( String Utils . is Blank ( default Collection Append ) ) ) {", "return collection Name ; }", "for ( String [ ] rule : collection Rules ) {", "String match = ( dest ) ? rule [ NUM_ ] : rule [ NUM_ ] ;", "String replace = ( dest ) ? rule [ NUM_ ] : rule [ NUM_ ] ;", "if ( collection Name . contains ( match ) ) {", "return collection Name . replace ( match , replace ) ; } }", "if ( dest ) {", "return collection Name + default Collection Append ; }", "else {", "return collection Name . replace ( default Collection Append , STR_ ) ; } }"]}
{"ids": "9266", "code": ["static public void fill Random Integer Uniform ( I Double Vector vec , Random rand , int min , int max ) {", "final int delta = max - min ;", "for ( int i = NUM_ ; i < vec . get Length ( ) ; ++ i ) {", "vec . set ( i , min + rand . next Int ( delta ) ) ; } }"]}
{"ids": "48846", "code": ["private static void stopping Animation ( Thread me ) {", "final Fetcher Info info = Fetcher Info . get Fetcher Info ( ) ;", "synchronized ( info . wait List ) {", "int index = - NUM_ ;", "for ( int i = NUM_ ; i < info . fetchers . length ; i ++ ) {", "if ( info . fetchers [ i ] == me ) {", "return ; }", "if ( info . fetchers [ i ] == null ) {", "index = i ; } }", "if ( index >= NUM_ ) {", "info . fetchers [ index ] = me ;", "info . num Fetchers ++ ;", "me . set Name ( STR_ + index ) ;", "return ; } } }"]}
{"ids": "4994", "code": ["public boolean name is equal ( String p name ) {", "if ( p name == null ) return false ;", "return p name . equals Ignore Case ( pkg name ) ; }"]}
{"ids": "7427", "code": ["protected void draw Range Markers ( Graphics 2 D g 2 , Rectangle 2 D data Area , int index , Layer layer ) {", "XY Item Renderer r = get Renderer ( index ) ;", "if ( r == null ) {", "return ; }", "if ( index >= get Dataset Count ( ) ) {", "return ; }", "Collection markers = get Range Markers ( index , layer ) ;", "Value Axis axis = get Range Axis For Dataset ( index ) ;", "if ( markers != null && axis != null ) {", "Iterator iterator = markers . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "Marker marker = ( Marker ) iterator . next ( ) ;", "r . draw Range Marker ( g 2 , this , axis , marker , data Area ) ; } } }"]}
{"ids": "68070", "code": ["protected boolean should Close ( Pooled Connection con , int action ) {", "if ( con . get Connection Version ( ) < get Pool Version ( ) ) return true ;", "if ( con . is Discarded ( ) ) return true ;", "if ( is Closed ( ) ) return true ;", "if ( ! con . validate ( action ) ) return true ;", "if ( ! terminate Transaction ( con ) ) return true ;", "if ( con . is Max Age Expired ( ) ) return true ;", "else return false ; }"]}
{"ids": "13533", "code": ["public Vector 3 D hsl ( ) {", "float r = redf ( ) ;", "float g = greenf ( ) ;", "float b = bluef ( ) ;", "float min = Math . min ( Math . min ( r , g ) , b ) ;", "float max = Math . max ( Math . max ( r , g ) , b ) ;", "float l = lighting ( min , max ) ;", "float s = saturation ( min , max , l ) ;", "float h = hue ( r , g , b , min , max ) ;", "return new Vector 3 D ( h , s , l ) ; }"]}
{"ids": "9303", "code": ["public Future < Boolean > shutdown Awaiting ( long timeout For Each ) {", "Executor Service executor = Executors . new Scheduled Thread Pool ( NUM_ ) ;", "return executor . submit ( create Shutdown ( timeout For Each ) ) ; }"]}
{"ids": "86243", "code": ["public void change Directory ( String path ) throws Illegal State Exception , IO Exception , FTP Illegal Reply Exception , FTP Exception {", "synchronized ( lock ) {", "if ( ! connected ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( ! authenticated ) {", "throw new Illegal State Exception ( STR_ ) ; }", "communication . send FTP Command ( STR_ + path ) ;", "FTP Reply r = communication . read FTP Reply ( ) ;", "touch Auto Noop Timer ( ) ;", "if ( ! r . is Success Code ( ) ) {", "throw new FTP Exception ( r ) ; } } }"]}
{"ids": "4357", "code": ["private String remove Quote ( String column ) {", "return column != null ? column . replace All ( statement Builder . get Column Quote ( ) , String Utils . EMPTY ) : null ; }"]}
{"ids": "55477", "code": ["private boolean scrolled Up Timeout ( ) {", "if ( fixed Chat || pause Key Pressed ) {", "return false ; }", "if ( ! styles . auto Scroll ( ) ) {", "return false ; }", "long time Passed = System . current Time Millis ( ) - last Changed ;", "if ( time Passed > NUM_ * styles . auto Scroll Timeout ( ) ) {", "LOGGER . info ( STR_ + time Passed + STR_ ) ;", "return true ; }", "return false ; }"]}
{"ids": "45224", "code": ["public List < Document > search ( Query query , boolean prefix Wild Card ) {", "List < Document > documents = new Array List < Document > ( ) ;", "try {", "Index Searcher searcher = get Searcher ( ) ;", "Top Docs search = searcher . search ( query , NUM_ ) ;", "for ( Score Doc score Doc : search . score Docs ) {", "Document doc = searcher . doc ( score Doc . doc ) ;", "documents . add ( doc ) ; } }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Runtime Exception ( e ) ; }", "return documents ; }"]}
{"ids": "59587", "code": ["@ Request Mapping ( value = STR_ , method = { Request Method . GET } ) @ Response Body public List < Job Instance > list ( Job List Request job Request ) {", "List < Job Instance > job Instance List = Collections . empty List ( ) ;", "List < Job Status Enum > status List = new Array List < Job Status Enum > ( ) ;", "if ( null != job Request . get Status ( ) ) {", "for ( int status : job Request . get Status ( ) ) {", "status List . add ( Job Status Enum . get By Code ( status ) ) ; } }", "Job Time Filter Enum time Filter = Job Time Filter Enum . get By Code ( job Request . get Time Filter ( ) ) ;", "try {", "job Instance List = job Service . list All Jobs ( job Request . get Cube Name ( ) , job Request . get Project Name ( ) , status List , job Request . get Limit ( ) , job Request . get Offset ( ) , time Filter ) ; }", "catch ( Exception e ) {", "logger . error ( e . get Localized Message ( ) , e ) ;", "throw new Internal Error Exception ( e ) ; }", "return job Instance List ; }"]}
{"ids": "15912", "code": ["public byte [ ] to Binary ( int q ) {", "return Array Encoder . encode Mod Q ( coeffs , q ) ; }"]}
{"ids": "68560", "code": ["public final void open Fallback Input Stream ( ) throws Data Fallback Exception {", "if ( input Buf == null ) {", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ + data File . get Name ( ) + STR_ ) ;", "try {", "set Input ( new Buffered Reader ( new File Reader ( data File ) ) ) ; }", "catch ( IO Exception e ) {", "throw new Data Fallback Exception ( e . get Message ( ) ) ; } } }"]}
{"ids": "37454", "code": ["public void add Caret Listener ( final I Caret Listener listener ) {", "Preconditions . check Not Null ( listener , STR_ ) ;", "if ( ! m listeners . contains ( listener ) ) {", "m listeners . add ( listener ) ; } }"]}
{"ids": "57150", "code": ["protected void push Bidirectional Vip Routes ( IOF Switch sw , OF Packet In pi , Floodlight Context cntx , IP Client client , LB Member member ) {", "I Device src Device = null ;", "I Device dst Device = null ;", "Collection < ? extends I Device > all Devices = device Manager . get All Devices ( ) ;", "for ( I Device d : all Devices ) {", "for ( int j = NUM_ ; j < d . get I Pv 4 Addresses ( ) . length ; j ++ ) {", "if ( src Device == null && client . ip Address == d . get I Pv 4 Addresses ( ) [ j ] ) src Device = d ;", "if ( dst Device == null && member . address == d . get I Pv 4 Addresses ( ) [ j ] ) {", "dst Device = d ;", "member . mac String = dst Device . get MAC Address String ( ) ; }", "if ( src Device != null && dst Device != null ) break ; } }", "if ( src Device == null || dst Device == null ) return ;", "Long src Island = topology . get L 2 Domain Id ( sw . get Id ( ) ) ;", "if ( src Island == null ) {", "log . debug ( STR_ , sw . get String Id ( ) , pi . get In Port ( ) ) ;", "return ; }", "boolean on same island = false ;", "boolean on same if = false ;", "for ( Switch Port dst Dap : dst Device . get Attachment Points ( ) ) {", "long dst Sw Dpid = dst Dap . get Switch DPID ( ) ;", "Long dst Island = topology . get L 2 Domain Id ( dst Sw Dpid ) ;", "if ( ( dst Island != null ) && dst Island . equals ( src Island ) ) {", "on same island = true ;", "if ( ( sw . get Id ( ) == dst Sw Dpid ) && ( pi . get In Port ( ) == dst Dap . get Port ( ) ) ) {", "on same if = true ; }", "break ; } }", "if ( ! on same island ) {", "if ( log . is Trace Enabled ( ) ) {", "log . trace ( STR_ + STR_ , dst Device ) ; }", "return ; }", "if ( on same if ) {", "if ( log . is Trace Enabled ( ) ) {", "log . trace ( STR_ + STR_ , sw . to String ( ) , pi . get In Port ( ) ) ; }", "return ; }", "Switch Port [ ] src Daps = src Device . get Attachment Points ( ) ;", "Arrays . sort ( src Daps , cluster Id Comparator ) ;", "Switch Port [ ] dst Daps = dst Device . get Attachment Points ( ) ;", "Arrays . sort ( dst Daps , cluster Id Comparator ) ;", "int i Src Daps = NUM_ , i Dst Daps = NUM_ ;", "while ( ( i Src Daps < src Daps . length ) && ( i Dst Daps < dst Daps . length ) ) {", "Switch Port src Dap = src Daps [ i Src Daps ] ;", "Switch Port dst Dap = dst Daps [ i Dst Daps ] ;", "Long src Cluster = topology . get L 2 Domain Id ( src Dap . get Switch DPID ( ) ) ;", "Long dst Cluster = topology . get L 2 Domain Id ( dst Dap . get Switch DPID ( ) ) ;", "int src Vs Dest = src Cluster . compare To ( dst Cluster ) ;", "if ( src Vs Dest == NUM_ ) {", "if ( ! src Dap . equals ( dst Dap ) && ( src Cluster != null ) && ( dst Cluster != null ) ) {", "Route route In = routing Engine . get Route ( src Dap . get Switch DPID ( ) , ( short ) src Dap . get Port ( ) , dst Dap . get Switch DPID ( ) , ( short ) dst Dap . get Port ( ) , NUM_ ) ;", "Route route Out = routing Engine . get Route ( dst Dap . get Switch DPID ( ) , ( short ) dst Dap . get Port ( ) , src Dap . get Switch DPID ( ) , ( short ) src Dap . get Port ( ) , NUM_ ) ;", "if ( route In != null ) {", "push Static Vip Route ( true , route In , client , member , sw . get Id ( ) ) ; }", "if ( route Out != null ) {", "push Static Vip Route ( false , route Out , client , member , sw . get Id ( ) ) ; } }", "i Src Daps ++ ;", "i Dst Daps ++ ; }", "else if ( src Vs Dest < NUM_ ) {", "i Src Daps ++ ; }", "else {", "i Dst Daps ++ ; } }", "return ; }"]}
{"ids": "45869", "code": ["public static String parse Id From Same Document URI ( String uri ) {", "if ( uri . length ( ) == NUM_ ) {", "return null ; }", "String id = uri . substring ( NUM_ ) ;", "if ( id != null && id . starts With ( STR_ ) ) {", "int i 1 = id . index Of ( STR_ ) ;", "int i 2 = id . index Of ( STR_ , i 1 + NUM_ ) ;", "id = id . substring ( i 1 + NUM_ , i 2 ) ; }", "return id ; }"]}
{"ids": "25497", "code": ["public static String read String NZ ( Memory mem , int address , int n ) {", "address &= Memory . address Mask ;", "if ( address + n > Memory Map . END RAM ) {", "n = Memory Map . END RAM - address + NUM_ ;", "if ( n < NUM_ ) {", "n = NUM_ ; } }", "byte [ ] bytes = new byte [ Math . min ( n , NUM_ ) ] ;", "int length = NUM_ ;", "I Memory Reader memory Reader = Memory Reader . get Memory Reader ( address , n , NUM_ ) ;", "for ( ; n > NUM_ ; n -- ) {", "int b = memory Reader . read Next ( ) ;", "if ( b == NUM_ ) {", "break ; }", "if ( length >= bytes . length ) {", "byte [ ] new Bytes = new byte [ bytes . length + NUM_ ] ;", "System . arraycopy ( bytes , NUM_ , new Bytes , NUM_ , bytes . length ) ;", "bytes = new Bytes ; }", "bytes [ length ] = ( byte ) b ;", "length ++ ; }", "return new String ( bytes , NUM_ , length , Constants . charset ) ; }"]}
{"ids": "64304", "code": ["private boolean remove Legion Member ( String char Name , boolean kick , String player Name ) {", "Legion Member Ex legion Member = get Legion Member Ex ( char Name ) ;", "if ( legion Member == null ) {", "log . error ( STR_ + char Name ) ;", "return false ; }", "delete Legion Member From DB ( legion Member ) ;", "Player player = world . find Player ( char Name ) ;", "if ( player != null ) {", "Packet Send Utility . broadcast Packet ( player , new SM LEGION UPDATE TITLE ( player . get Object Id ( ) , NUM_ , STR_ , NUM_ ) , true ) ; }", "if ( kick ) {", "Packet Send Utility . broadcast Packet To Legion ( legion Member . get Legion ( ) , new SM LEGION LEAVE MEMBER ( NUM_ , legion Member . get Object Id ( ) , player Name , legion Member . get Name ( ) ) ) ; }", "else {", "Packet Send Utility . broadcast Packet To Legion ( legion Member . get Legion ( ) , new SM LEGION LEAVE MEMBER ( NUM_ , legion Member . get Object Id ( ) , char Name ) ) ; }", "return true ; }"]}
{"ids": "67092", "code": ["public boolean contains Baf Body ( ) {", "Iterator < Soot Method > method It = method Iterator ( ) ;", "while ( method It . has Next ( ) ) {", "Soot Method m = method It . next ( ) ;", "if ( m . has Active Body ( ) && m . get Active Body ( ) instanceof soot . baf . Baf Body ) {", "return true ; } }", "return false ; }"]}
{"ids": "67685", "code": ["public static String retain All Chars ( String str , String retain Chars ) {", "int pos = index Of Chars ( str , retain Chars ) ;", "if ( pos == - NUM_ ) {", "return STR_ ; }", "String Builder buf = new String Builder ( ) ;", "do {", "buf . append ( str . char At ( pos ) ) ;", "pos = index Of Chars ( str , retain Chars , pos + NUM_ ) ; }", "while ( pos != - NUM_ ) ;", "return buf . to String ( ) ; }"]}
{"ids": "4748", "code": ["public synchronized void delete Least Used Connection ( ) {", "final Http Connection connection = ( Http Connection ) free Connections . remove First ( ) ;", "if ( connection != null ) {", "delete Connection ( connection ) ; }", "else if ( LOG . is Debug Enabled ( ) ) {", "LOG . debug ( STR_ ) ; } }"]}
{"ids": "83281", "code": ["private Transit Schedule clean Up Schedule ( Transit Schedule new Transit Schedule ) {", "new Transit Schedule = Transit Schedule Cleaner . remove Routes Without Departures ( new Transit Schedule ) ;", "new Transit Schedule = Transit Schedule Cleaner . remove Empty Lines ( new Transit Schedule ) ;", "new Transit Schedule = Transit Schedule Cleaner . remove Stops Not Used ( new Transit Schedule ) ;", "return new Transit Schedule ; }"]}
{"ids": "76759", "code": ["private boolean step 1 ( ) {", "if ( CT == null ) return false ;", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; }", "if ( CT . length ( ) >= NUM_ ) {", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 1 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; } }", "if ( CT . length ( ) >= NUM_ ) {", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; } }", "if ( CT . length ( ) >= NUM_ ) {", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( RV , STR_ ) && suffix Preceded ( CT , STR_ , STR_ ) ) {", "CT = replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; } }", "if ( CT . length ( ) >= NUM_ ) {", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( R 2 , STR_ ) ) {", "CT = remove Suffix ( CT , STR_ ) ;", "return true ; }", "if ( suffix ( CT , STR_ ) && suffix ( RV , STR_ ) && suffix Preceded ( CT , STR_ , STR_ ) ) {", "CT = replace Suffix ( CT , STR_ , STR_ ) ;", "return true ; } }", "return false ; }"]}
{"ids": "35757", "code": ["void close ( int context Prec , int own Prec ) throws IO Exception {", "if ( own Prec < context Prec ) out . write ( STR_ ) ; }"]}
{"ids": "46258", "code": ["public void finish Painting ( boolean use Cache ) {", "Data Buffer Int data Buffer = new Data Buffer Int ( w 0 * h 0 ) ;", "int transparency = native Finish Painting ( Sun Writable Raster . steal Data ( data Buffer , NUM_ ) , w 0 , h 0 ) ;", "Sun Writable Raster . mark Dirty ( data Buffer ) ;", "int [ ] bands = BAND OFFSETS [ transparency - NUM_ ] ;", "Writable Raster raster = Raster . create Packed Raster ( data Buffer , w 0 , h 0 , w 0 , bands , null ) ;", "Color Model cm = COLOR MODELS [ transparency - NUM_ ] ;", "Image img = new Buffered Image ( cm , raster , false , null ) ;", "if ( use Cache ) {", "cache . set Image ( get Class ( ) , null , w 0 , h 0 , cache Args , img ) ; }", "graphics . draw Image ( img , x 0 , y 0 , null ) ; }"]}
{"ids": "74409", "code": ["public boolean delete Panel ( ) {", "if ( ! super . delete Panel ( ) ) {", "return false ; }", "turnout List . clear ( ) ;", "track List . clear ( ) ;", "point List . clear ( ) ;", "xing List . clear ( ) ;", "slip List . clear ( ) ;", "turntable List . clear ( ) ;", "return true ; }"]}
{"ids": "51328", "code": ["public String next ( ) {", "return next ( ANY PATTERN ) ; }"]}
{"ids": "45185", "code": ["public Macro ( File file ) throws EOF Exception , File Not Found Exception , IO Exception {", "Document Builder Factory dbf = Document Builder Factory . new Instance ( ) ;", "Document Builder db = null ;", "Document doc = null ;", "try {", "db = dbf . new Document Builder ( ) ;", "Input Source is = new Input Source ( new Unicode Reader ( new File Input Stream ( file ) , FILE ENCODING ) ) ;", "is . set Encoding ( FILE ENCODING ) ;", "doc = db . parse ( is ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "String desc = e . get Message ( ) ;", "if ( desc == null ) {", "desc = e . to String ( ) ; }", "throw new IO Exception ( STR_ + desc ) ; }", "macro Records = new Array List ( ) ;", "boolean parsed OK = initialize From XML File ( doc . get Document Element ( ) ) ;", "if ( parsed OK == false ) {", "name = null ;", "macro Records . clear ( ) ;", "macro Records = null ;", "throw new IO Exception ( STR_ ) ; } }"]}
{"ids": "70782", "code": ["public static void delete ES Input ( ) {", "String es PIR Index = System Configuration . get Property ( Distributed Test Driver . ES INPUT NODES PROPERTY ) + STR_ + System Configuration . get Property ( Distributed Test Driver . ES INPUT PORT PROPERTY ) + STR_ + System Configuration . get Property ( Distributed Test Driver . ES INPUT INDEX PROPERTY ) ;", "logger . info ( STR_ + es PIR Index ) ;", "Process Builder p Delete PIR = new Process Builder ( STR_ , STR_ , es PIR Index ) ;", "try {", "Test Utils . execute Command ( p Delete PIR ) ;", "logger . info ( STR_ ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "32364", "code": ["private boolean add ( int part ) {", "if ( ! parts . contains ( part ) ) {", "parts . add ( part ) ;", "return true ; }", "return false ; }"]}
{"ids": "27198", "code": ["private Location find Farthest Location ( Location location , Direction direction ) {", "Location farthest ;", "do {", "farthest = location ;", "location = farthest . offset ( direction ) ; }", "while ( grid Operator . is Valid Location ( location ) && game Grid . get ( location ) == null ) ;", "return farthest ; }"]}
{"ids": "37141", "code": ["private J Split Pane create Main Split Pane ( ) {", "final J Split Pane main Split Pane = new J Split Pane ( ) ;", "main Split Pane . set One Touch Expandable ( true ) ;", "main Split Pane . set Divider Location ( NUM_ ) ;", "main Split Pane . set Resize Weight ( NUM_ ) ;", "main Split Pane . set Orientation ( J Split Pane . HORIZONTAL SPLIT ) ;", "m component Panel . set Background ( Color . WHITE ) ;", "main Split Pane . set Left Component ( create Project Tree Panel ( ) ) ;", "main Split Pane . set Right Component ( m component Panel ) ;", "main Split Pane . set Border ( new Line Border ( Color . GRAY ) ) ;", "return main Split Pane ; }"]}
{"ids": "69986", "code": ["private boolean check Setup ( ) {", "this . txmgr = Transaction Manager Imp . get Transaction Manager ( ) ;", "if ( this . txmgr == null ) {", "try {", "Hashtable < String , String > env = new Hashtable < String , String > ( ) ;", "env . put ( Context . INITIAL CONTEXT FACTORY , this . initial Context Factory ) ;", "env . put ( Context . PROVIDER URL , this . provider Url ) ;", "Context ctx = new Initial Context ( env ) ;", "this . txmgr Server = ( User Transaction Server ) Portable Remote Object . narrow ( ctx . lookup ( this . user Transaction Server Lookup Name ) , User Transaction Server . class ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Runtime Exception ( get Not Found Message ( ) ) ; }", "if ( this . txmgr Server == null ) throw new Runtime Exception ( get Not Found Message ( ) ) ; }", "return this . txmgr != null ; }"]}
{"ids": "55906", "code": ["public static final boolean gives Check ( Position pos , Move m ) {", "boolean wtm = pos . white Move ;", "int o King Sq = pos . get King Sq ( ! wtm ) ;", "int o King = wtm ? Piece . BKING : Piece . WKING ;", "int p = Piece . make White ( m . promote To == Piece . EMPTY ? pos . get Piece ( m . from ) : m . promote To ) ;", "int d 1 = Bit Board . get Direction ( m . to , o King Sq ) ;", "switch ( d 1 ) {", "case NUM_ :", "case - NUM_ :", "case NUM_ :", "case - NUM_ :", "if ( ( p == Piece . WQUEEN ) || ( p == Piece . WROOK ) ) if ( ( d 1 != NUM_ ) && ( Move Gen . next Piece ( pos , m . to , d 1 ) == o King ) ) return true ;", "break ;", "case NUM_ :", "case NUM_ :", "case - NUM_ :", "case - NUM_ :", "if ( ( p == Piece . WQUEEN ) || ( p == Piece . WBISHOP ) ) {", "if ( ( d 1 != NUM_ ) && ( Move Gen . next Piece ( pos , m . to , d 1 ) == o King ) ) return true ; }", "else if ( p == Piece . WPAWN ) {", "if ( ( ( d 1 > NUM_ ) == wtm ) && ( pos . get Piece ( m . to + d 1 ) == o King ) ) return true ; }", "break ;", "default :", "if ( d 1 != NUM_ ) {", "if ( p == Piece . WKNIGHT ) return true ; } }", "int d 2 = Bit Board . get Direction ( m . from , o King Sq ) ;", "if ( ( d 2 != NUM_ ) && ( d 2 != d 1 ) && ( Move Gen . next Piece ( pos , m . from , d 2 ) == o King ) ) {", "int p 2 = Move Gen . next Piece Safe ( pos , m . from , - d 2 ) ;", "switch ( d 2 ) {", "case NUM_ :", "case - NUM_ :", "case NUM_ :", "case - NUM_ :", "if ( ( p 2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p 2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return true ;", "break ;", "case NUM_ :", "case NUM_ :", "case - NUM_ :", "case - NUM_ :", "if ( ( p 2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p 2 == ( wtm ? Piece . WBISHOP : Piece . BBISHOP ) ) ) return true ;", "break ; } }", "if ( ( m . promote To != Piece . EMPTY ) && ( d 1 != NUM_ ) && ( d 1 == d 2 ) ) {", "switch ( d 1 ) {", "case NUM_ :", "case - NUM_ :", "case NUM_ :", "case - NUM_ :", "if ( ( p == Piece . WQUEEN ) || ( p == Piece . WROOK ) ) if ( ( d 1 != NUM_ ) && ( Move Gen . next Piece ( pos , m . from , d 1 ) == o King ) ) return true ;", "break ;", "case NUM_ :", "case NUM_ :", "case - NUM_ :", "case - NUM_ :", "if ( ( p == Piece . WQUEEN ) || ( p == Piece . WBISHOP ) ) {", "if ( ( d 1 != NUM_ ) && ( Move Gen . next Piece ( pos , m . from , d 1 ) == o King ) ) return true ; }", "break ; } }", "if ( p == Piece . WKING ) {", "if ( m . to - m . from == NUM_ ) {", "if ( Move Gen . next Piece Safe ( pos , m . from , - NUM_ ) == o King ) return true ;", "if ( Move Gen . next Piece Safe ( pos , m . from + NUM_ , wtm ? NUM_ : - NUM_ ) == o King ) return true ; }", "else if ( m . to - m . from == - NUM_ ) {", "if ( Move Gen . next Piece Safe ( pos , m . from , NUM_ ) == o King ) return true ;", "if ( Move Gen . next Piece Safe ( pos , m . from - NUM_ , wtm ? NUM_ : - NUM_ ) == o King ) return true ; } }", "else if ( p == Piece . WPAWN ) {", "if ( pos . get Piece ( m . to ) == Piece . EMPTY ) {", "int dx = Position . get X ( m . to ) - Position . get X ( m . from ) ;", "if ( dx != NUM_ ) {", "int ep Sq = m . from + dx ;", "int d 3 = Bit Board . get Direction ( ep Sq , o King Sq ) ;", "switch ( d 3 ) {", "case NUM_ :", "case NUM_ :", "case - NUM_ :", "case - NUM_ :", "if ( Move Gen . next Piece ( pos , ep Sq , d 3 ) == o King ) {", "int p 2 = Move Gen . next Piece Safe ( pos , ep Sq , - d 3 ) ;", "if ( ( p 2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p 2 == ( wtm ? Piece . WBISHOP : Piece . BBISHOP ) ) ) return true ; }", "break ;", "case NUM_ :", "if ( Move Gen . next Piece ( pos , Math . max ( ep Sq , m . from ) , d 3 ) == o King ) {", "int p 2 = Move Gen . next Piece Safe ( pos , Math . min ( ep Sq , m . from ) , - d 3 ) ;", "if ( ( p 2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p 2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return true ; }", "break ;", "case - NUM_ :", "if ( Move Gen . next Piece ( pos , Math . min ( ep Sq , m . from ) , d 3 ) == o King ) {", "int p 2 = Move Gen . next Piece Safe ( pos , Math . max ( ep Sq , m . from ) , - d 3 ) ;", "if ( ( p 2 == ( wtm ? Piece . WQUEEN : Piece . BQUEEN ) ) || ( p 2 == ( wtm ? Piece . WROOK : Piece . BROOK ) ) ) return true ; }", "break ; } } } }", "return false ; }"]}
{"ids": "77102", "code": ["public static FS Directory new FS Directory ( Class < ? extends FS Directory > clazz , Path path ) throws Reflective Operation Exception {", "return new FS Directory ( clazz , path , FS Lock Factory . get Default ( ) ) ; }"]}
{"ids": "31635", "code": ["private static Element add Element ( Document doc , Node parent , String tag Name , String attr 1 , String val 1 , String attr 2 , String val 2 ) {", "Element elem = doc . create Element ( tag Name ) ;", "if ( attr 1 != null ) elem . set Attribute ( attr 1 , val 1 ) ;", "if ( attr 2 != null ) elem . set Attribute ( attr 2 , val 2 ) ;", "parent . append Child ( elem ) ;", "return elem ; }"]}
{"ids": "67708", "code": ["public static String stream 2 String ( Input Stream is , int max Length ) throws IO Exception {", "byte [ ] buffer = new byte [ NUM_ ] ;", "String Writer sw = new String Writer ( ) ;", "int total Read = NUM_ ;", "int read = NUM_ ;", "do {", "sw . write ( new String ( buffer , NUM_ , read ) ) ;", "total Read += read ;", "read = is . read ( buffer , NUM_ , buffer . length ) ; }", "while ( ( ( - NUM_ == max Length ) || ( total Read < max Length ) ) && ( read != - NUM_ ) ) ;", "return sw . to String ( ) ; }"]}
{"ids": "60243", "code": ["private static Couple < String > split Name Of Remote Branch ( String branch Name ) {", "int first Slash = branch Name . index Of ( STR_ ) ;", "String remote Name = first Slash > - NUM_ ? branch Name . substring ( NUM_ , first Slash ) : branch Name ;", "String remote Branch Name = branch Name . substring ( first Slash + NUM_ ) ;", "return Couple . of ( remote Name , remote Branch Name ) ; }"]}
{"ids": "78409", "code": ["public static Output Stream encrypt ( Output Stream unencrypted Output Stream , char [ ] password ) throws Encryption Exception , IO Exception {", "Output Stream encrypted Output Stream = null ;", "PBE Key Spec pbe Key Spec = new PBE Key Spec ( password ) ;", "PBE Parameter Spec pbe Parameter Spec = new PBE Parameter Spec ( SALT , ITERATION COUNT ) ;", "try {", "Secret Key Factory secret Key Factory = Secret Key Factory . get Instance ( ENCRYPTION ALGORITHM , CRYPTOPROVIDER ) ;", "Secret Key pbe Key = secret Key Factory . generate Secret ( pbe Key Spec ) ;", "Cipher cipher = Cipher . get Instance ( ENCRYPTION ALGORITHM , CRYPTOPROVIDER ) ;", "cipher . init ( Cipher . ENCRYPT MODE , pbe Key , pbe Parameter Spec ) ;", "encrypted Output Stream = new Cipher Output Stream ( unencrypted Output Stream , cipher ) ; }", "catch ( General Security Exception e ) {", "throw new Encryption Exception ( STR_ , e ) ; }", "return encrypted Output Stream ; }"]}
{"ids": "44632", "code": ["protected void reload Swipe State In View ( View front View , int position ) {", "if ( ! opened . get ( position ) ) {", "View Compat . set Translation X ( front View , NUM_ ) ; }", "else {", "if ( opened Right . get ( position ) ) {", "View Compat . set Translation X ( front View , swipe List View . get Width ( ) ) ; }", "else {", "View Compat . set Translation X ( front View , - swipe List View . get Width ( ) ) ; } } }"]}
{"ids": "9472", "code": ["public Matrix 3 multiply By Vertical Flip ( ) {", "double [ ] m = this . m ;", "m [ NUM_ ] += m [ NUM_ ] ;", "m [ NUM_ ] += m [ NUM_ ] ;", "m [ NUM_ ] += m [ NUM_ ] ;", "m [ NUM_ ] = - m [ NUM_ ] ;", "m [ NUM_ ] = - m [ NUM_ ] ;", "m [ NUM_ ] = - m [ NUM_ ] ;", "return this ; }"]}
{"ids": "30971", "code": ["public void shutdown ( ) throws Data Source Exception {", "if ( created Session Factory ) {", "if ( session Factory != null && ! session Factory . is Closed ( ) ) {", "try {", "session Factory . close ( ) ; }", "finally {", "session Factory = null ; } } } }"]}
{"ids": "27936", "code": ["public void write String ( final String s ) {", "final byte [ ] bytes = s . get Bytes ( ) ;", "final int len = bytes . length ;", "write Int ( len ) ;", "System . arraycopy ( bytes , NUM_ , buffer , offset , len ) ;", "offset += len ;", "pad ( ) ; }"]}
{"ids": "36028", "code": ["private static Permission Collection create All Permissions ( ) {", "Permissions permissions = new Permissions ( ) ;", "permissions . add ( new All Permission ( ) ) ;", "return permissions ; }"]}
{"ids": "21417", "code": ["private void merge Networks ( Network tzone , Network s Zone ) {", "List < String > added End Points = new Array List < String > ( s Zone . retrieve Endpoints ( ) ) ;", "String Set new End Points = s Zone . retrieve Endpoints ( ) ;", "for ( String endpoint : tzone . retrieve Endpoints ( ) ) {", "if ( new End Points . contains ( endpoint ) ) {", "added End Points . remove ( endpoint ) ; } }", "if ( ! added End Points . is Empty ( ) ) {", "tzone . add Endpoints ( added End Points , true ) ; }", "tzone . set Native Guid ( s Zone . get Native Guid ( ) ) ; }"]}
{"ids": "20003", "code": ["static public void println ( String msg ) {", "println ( msg , CL Log Level . normal ) ; }"]}
{"ids": "76973", "code": ["private List < Facet Result > sum Associations ( ) throws IO Exception {", "Directory Reader index Reader = Directory Reader . open ( index Dir ) ;", "Index Searcher searcher = new Index Searcher ( index Reader ) ;", "Taxonomy Reader taxo Reader = new Directory Taxonomy Reader ( taxo Dir ) ;", "Facets Collector fc = new Facets Collector ( ) ;", "Facets Collector . search ( searcher , new Match All Docs Query ( ) , NUM_ , fc ) ;", "Facets tags = new Taxonomy Facet Sum Int Associations ( STR_ , taxo Reader , config , fc ) ;", "Facets genre = new Taxonomy Facet Sum Float Associations ( STR_ , taxo Reader , config , fc ) ;", "List < Facet Result > results = new Array List < > ( ) ;", "results . add ( tags . get Top Children ( NUM_ , STR_ ) ) ;", "results . add ( genre . get Top Children ( NUM_ , STR_ ) ) ;", "index Reader . close ( ) ;", "taxo Reader . close ( ) ;", "return results ; }"]}
{"ids": "77672", "code": ["public Reverse Geo Code ( Input Stream placenames , boolean major Only ) throws IO Exception {", "create Kd Tree ( placenames , major Only ) ; }"]}
{"ids": "79179", "code": ["public static String from Tag ( List Tag < Tag > tag ) {", "String Builder builder = new String Builder ( ) ;", "builder . append ( ARRAY START ) ;", "boolean start = true ;", "for ( Tag value : tag . get Value ( ) ) {", "if ( start ) {", "start = false ; }", "else {", "builder . append ( ELEMENT SEPERATOR ) ; }", "builder . append ( from Generic Tag ( value ) ) ; }", "builder . append ( ARRAY END ) ;", "return builder . to String ( ) ; }"]}
{"ids": "76142", "code": ["private XML Element 2 create Another Element ( ) {", "return new XML Element 2 ( this . entities , this . ignore Whitespace , false , this . ignore Case ) ; }"]}
{"ids": "5758", "code": ["public synchronized void reset ( ) {", "labels . clear ( ) ;", "labels . put ( Sensision Constants . SENSISION LABEL TOPIC , this . topic ) ;", "labels . put ( Sensision Constants . SENSISION LABEL GROUPID , this . groupid ) ;", "for ( int i = NUM_ ; i < this . counters . length ; i ++ ) {", "if ( null == this . counters [ i ] ) {", "continue ; }", "labels . put ( Sensision Constants . SENSISION LABEL PARTITION , Integer . to String ( i ) ) ;", "Sensision . clear ( Sensision Constants . SENSISION CLASS WARP KAFKA CONSUMER OFFSET , labels ) ;", "this . counters [ i ] = null ; } }"]}
{"ids": "83854", "code": ["public Vector rotate In Radian ( double radians ) {", "final double length = length ( ) ;", "double angle = angle In Radian ( ) ;", "angle += radians ;", "final Vector result = new Vector ( Math . cos ( angle ) , Math . sin ( angle ) ) ;", "return result . multiply ( length ) ; }"]}
{"ids": "49531", "code": ["public void connection Lost ( java . lang . Throwable cause ) {", "int rc = - NUM_ ;", "led . set Amber ( ) ;", "led . set Flash ( ) ;", "set Title Text ( STR_ ) ;", "synchronized ( this ) {", "write Logln ( STR_ + mqtt . get Server URI ( ) ) ; }", "try {", "while ( ( rc == - NUM_ ) && connected ) {", "try {", "synchronized ( conn Lost Wait ) {", "conn Lost Wait . wait ( NUM_ ) ; } }", "catch ( Interrupted Exception iex ) { }", "synchronized ( this ) {", "if ( connected ) {", "write Log ( STR_ ) ;", "try {", "connect ( mqtt . get Server URI ( ) , options Comp . is Persistence Selected ( ) ) ;", "rc = NUM_ ; }", "catch ( Mqtt Exception mqte ) {", "rc = - NUM_ ; }", "if ( rc == - NUM_ ) {", "write Logln ( STR_ ) ; }", "else {", "write Logln ( STR_ ) ; } } } }", "set Title Text ( STR_ ) ; }", "catch ( Exception ex ) {", "set Title Text ( STR_ ) ;", "ex . print Stack Trace ( ) ;", "disconnect ( ) ; }", "finally {", "if ( led . is Flashing ( ) ) {", "led . set Flash ( ) ; } }", "if ( connected ) {", "led . set Green ( ) ;", "set Connected ( true ) ; }", "else {", "led . set Red ( ) ;", "set Connected ( false ) ; } }"]}
{"ids": "3523", "code": ["public String header Out ( String name ) {", "Array List < String > keys = header Keys Out ;", "int header Size = keys . size ( ) ;", "for ( int i = NUM_ ; i < header Size ; i ++ ) {", "String old Key = keys . get ( i ) ;", "if ( old Key . equals Ignore Case ( name ) ) {", "return ( String ) header Values Out . get ( i ) ; } }", "if ( name . equals Ignore Case ( STR_ ) ) {", "return content Length Out >= NUM_ ? String . value Of ( content Length Out ) : null ; }", "if ( name . equals Ignore Case ( STR_ ) ) {", "return content Type Out ; }", "return null ; }"]}
{"ids": "62890", "code": ["private static Map < String , Set < String > > parse Sparse Fields ( Multivalued Map < String , String > query Params ) {", "Map < String , Set < String > > result = new Hash Map < > ( ) ;", "for ( Map . Entry < String , List < String > > kv : query Params . entry Set ( ) ) {", "String key = kv . get Key ( ) ;", "if ( key . starts With ( STR_ ) && key . ends With ( STR_ ) ) {", "String type = key . substring ( NUM_ , key . length ( ) - NUM_ ) ;", "Linked Hash Set < String > filters = new Linked Hash Set < > ( ) ;", "for ( String filter Params : kv . get Value ( ) ) {", "Collections . add All ( filters , filter Params . split ( STR_ ) ) ; }", "if ( ! filters . is Empty ( ) ) {", "result . put ( type , filters ) ; } } }", "return result ; }"]}
{"ids": "4000", "code": ["@ Override public void add URL ( URL url , boolean is Scanned ) {", "if ( contains URL ( url ) ) {", "return ; }", "super . add URL ( url , is Scanned ) ;", "if ( is Scanned ) pending Scan Roots . add ( new Scan Root ( url , null ) ) ; }"]}
{"ids": "86650", "code": ["public void add ( final int start , final int end , final byte status ) {", "final int s = start - m Start ;", "if ( s < m Interval . length && end > m Start ) {", "Arrays . fill ( m Interval , Math . max ( s , NUM_ ) , Math . min ( end - m Start , m Interval . length ) , status ) ; } }"]}
{"ids": "73259", "code": ["public void reset ( ) {", "alpha = init Alpha ;", "neighborhood Size = init Neighborhood Size ; }"]}
{"ids": "55489", "code": ["private void reload ( ) {", "Document doc = text Pane . get Document ( ) ;", "doc . put Property ( Document . Stream Description Property , null ) ;", "reference = current Reference ;", "load Page ( current Page ) ; }"]}
{"ids": "36715", "code": ["protected void draw Hexagon ( int x , int y , int w , int h , Color fill Color , Paint fill Paint , Color pen Color , boolean shadow , String direction ) {", "Polygon hexagon = new Polygon ( ) ;", "if ( direction . equals ( mx Constants . DIRECTION NORTH ) || direction . equals ( mx Constants . DIRECTION SOUTH ) ) {", "hexagon . add Point ( x + ( int ) ( NUM_ * w ) , y ) ;", "hexagon . add Point ( x + w , y + ( int ) ( NUM_ * h ) ) ;", "hexagon . add Point ( x + w , y + ( int ) ( NUM_ * h ) ) ;", "hexagon . add Point ( x + ( int ) ( NUM_ * w ) , y + h ) ;", "hexagon . add Point ( x , y + ( int ) ( NUM_ * h ) ) ;", "hexagon . add Point ( x , y + ( int ) ( NUM_ * h ) ) ; }", "else {", "hexagon . add Point ( x + ( int ) ( NUM_ * w ) , y ) ;", "hexagon . add Point ( x + ( int ) ( NUM_ * w ) , y ) ;", "hexagon . add Point ( x + w , y + ( int ) ( NUM_ * h ) ) ;", "hexagon . add Point ( x + ( int ) ( NUM_ * w ) , y + h ) ;", "hexagon . add Point ( x + ( int ) ( NUM_ * w ) , y + h ) ;", "hexagon . add Point ( x , y + ( int ) ( NUM_ * h ) ) ; }", "draw Polygon ( hexagon , fill Color , fill Paint , pen Color , shadow ) ; }"]}
{"ids": "31337", "code": ["private boolean is Static ( Field field ) {", "int modifier = field . get Modifiers ( ) ;", "if ( Modifier . is Static ( modifier ) ) {", "return true ; }", "return false ; }"]}
{"ids": "20495", "code": ["public int outstanding Requests ( ) {", "return outstanding . get ( ) ; }"]}
{"ids": "41831", "code": ["private View fill Left ( int pos , int next Right ) {", "if ( DEBUG ) Log . i ( TAG , STR_ + pos + STR_ + next Right + M FIRST POSITION + m First Position ) ;", "View selected View = null ;", "final int end = m List Padding . left ;", "while ( next Right > end && pos >= NUM_ ) {", "View temp = make Column ( pos , next Right , false ) ;", "if ( temp != null ) {", "selected View = temp ; }", "next Right = m Reference View . get Left ( ) - m Horizontal Spacing ;", "m First Position = pos ;", "pos -= m Num Rows ; }", "if ( m Stack From Bottom ) {", "m First Position = Math . max ( NUM_ , pos + NUM_ ) ; }", "return selected View ; }"]}
{"ids": "14711", "code": ["public void remove Default Value ( String value ) throws SMS Exception , SSO Exception {", "Set default Values = get Default Values ( ) ;", "if ( default Values != Collections . EMPTY SET ) {", "default Values . remove ( value ) ;", "update Default Values ( default Values ) ; } }"]}
{"ids": "40299", "code": ["public static int key Binding Description To Key Code ( String key Binding Description ) {", "if ( String Utils . is Blank ( key Binding Description ) ) {", "return NUM_ ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . ESC ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 1 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 2 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 3 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 4 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 5 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 6 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 7 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 8 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 9 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 10 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 11 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . F 12 ; }", "else if ( key Binding Description . equals ( STR_ ) ) {", "return SWT . SCROLL LOCK ; }", "else if ( VALID ACTION KEY CODES . index Of ( key Binding Description . char At ( key Binding Description . length ( ) - NUM_ ) ) != - NUM_ ) {", "return key Binding Description . char At ( key Binding Description . length ( ) - NUM_ ) ; }", "else {", "return NUM_ ; } }"]}
{"ids": "52824", "code": ["protected Signature merge Signatures ( Signature first , Signature second , int num Bins ) {", "int d 2 = - NUM_ ;", "for ( int i = NUM_ ; i < second . spec . length ; i += NUM_ ) {", "if ( second . spec [ i ] >= NUM_ ) {", "assert ( d 2 == - NUM_ ) : STR_ ;", "d 2 = i ; } }", "assert ( d 2 >= NUM_ ) : STR_ ;", "if ( first . spec [ d 2 ] >= NUM_ ) {", "return null ; }", "final Modifiable DBI Ds intersection = DBID Util . intersection ( first . ids , second . ids ) ;", "final int support = intersection . size ( ) ;", "double width = ( second . spec [ d 2 + NUM_ ] - second . spec [ d 2 ] + NUM_ ) / ( double ) num Bins ;", "double expect = first . ids . size ( ) * width ;", "if ( support <= expect || support < min Cluster Size ) {", "return null ; }", "final double test = Poisson Distribution . raw Probability ( support , expect ) ;", "if ( ( poisson Threshold ) <= test ) {", "return null ; }", "int [ ] spec = first . spec . clone ( ) ;", "spec [ d 2 ] = second . spec [ d 2 ] ;", "spec [ d 2 + NUM_ ] = second . spec [ d 2 ] ;", "final Signature newsig = new Signature ( spec , intersection ) ;", "if ( LOG . is Debugging ( ) ) {", "LOG . debug ( newsig . to String ( ) ) ; }", "return newsig ; }"]}
{"ids": "78469", "code": ["public synchronized boolean enter ( Cn A Tree Element obj ) throws Transaction Aborted Exception {", "if ( aborted ) {", "throw new Transaction Aborted Exception ( ) ; }", "visited . add ( obj ) ;", "if ( this . initiator != null ) {", "return false ; }", "this . initiator = obj ;", "aborted = false ;", "return true ; }"]}
{"ids": "22651", "code": ["public Options add Option ( Option opt ) {", "String key = opt . get Key ( ) ;", "if ( opt . has Long Opt ( ) ) {", "long Opts . put ( opt . get Long Opt ( ) , opt ) ; }", "if ( opt . is Required ( ) ) {", "if ( required Opts . contains ( key ) ) {", "required Opts . remove ( required Opts . index Of ( key ) ) ; }", "required Opts . add ( key ) ; }", "short Opts . put ( key , opt ) ;", "return this ; }"]}
{"ids": "24350", "code": ["private void pause For Client To Join ( ) {", "Wait . pause ( NUM_ ) ; }"]}
{"ids": "3023", "code": ["public Transition Builder add Frame ( int image Resource ) {", "m Frames . add ( image Resource ) ;", "return this ; }"]}
{"ids": "9033", "code": ["public Class < ? > [ ] scan For Classes ( String location , Class < ? > implemented Interface ) throws Exception {", "LOG . debug ( STR_ + location + STR_ + implemented Interface . get Name ( ) + STR_ ) ;", "List < Class < ? > > classes = new Array List < Class < ? > > ( ) ;", "Set < String > resource Names = find Resource Names ( location , STR_ , STR_ ) ;", "for ( String resource Name : resource Names ) {", "String class Name = to Class Name ( resource Name ) ;", "Class < ? > clazz = class Loader . load Class ( class Name ) ;", "if ( Modifier . is Abstract ( clazz . get Modifiers ( ) ) || clazz . is Enum ( ) || clazz . is Anonymous Class ( ) ) {", "LOG . debug ( STR_ + class Name ) ;", "continue ; }", "if ( ! implemented Interface . is Assignable From ( clazz ) ) {", "continue ; }", "try {", "Class Utils . instantiate ( class Name , class Loader ) ; }", "catch ( Exception e ) {", "throw new Cassandra Migration Exception ( STR_ + class Name , e ) ; }", "classes . add ( clazz ) ;", "LOG . debug ( STR_ + class Name ) ; }", "return classes . to Array ( new Class < ? > [ classes . size ( ) ] ) ; }"]}
{"ids": "30155", "code": ["private static boolean needs Skylight Update ( Fast Cube Block Access access , Mutable Block Pos pos ) {", "if ( access . get Block Light Opacity ( pos ) >= NUM_ ) {", "return false ; }", "int computed Light = access . compute Light Value ( pos ) ;", "for ( Enum Facing facing : Enum Facing . values ( ) ) {", "pos . move ( facing ) ;", "int current Light = access . get Light For ( Enum Sky Block . SKY , pos ) ;", "int current Opacity = Math . max ( NUM_ , access . get Block Light Opacity ( pos ) ) ;", "pos . move ( facing . get Opposite ( ) ) ;", "if ( computed Light == current Light - current Opacity ) {", "return true ; } }", "return false ; }"]}
{"ids": "52833", "code": ["private Array List < PROCLUS Cluster > assign Points ( Array DBI Ds m current , long [ ] [ ] dimensions , Relation < V > database ) {", "Modifiable DBI Ds [ ] cluster I Ds = new Modifiable DBI Ds [ dimensions . length ] ;", "for ( int i = NUM_ ; i < m current . size ( ) ; i ++ ) {", "cluster I Ds [ i ] = DBID Util . new Hash Set ( ) ; }", "DBID Array Iter m i = m current . iter ( ) ;", "for ( DBID Iter it = database . iter DBI Ds ( ) ; it . valid ( ) ; it . advance ( ) ) {", "V p = database . get ( it ) ;", "double min Dist = Double . Na N ;", "int best = - NUM_ , i = NUM_ ;", "for ( m i . seek ( NUM_ ) ; m i . valid ( ) ; m i . advance ( ) , i ++ ) {", "V m = database . get ( m i ) ;", "double current Dist = manhattan Segmental Distance ( p , m , dimensions [ i ] ) ;", "if ( ! ( min Dist <= current Dist ) ) {", "min Dist = current Dist ;", "best = i ; } }", "assert best >= NUM_ ;", "Modifiable DBI Ds ids = cluster I Ds [ best ] ;", "ids . add ( it ) ; }", "Array List < PROCLUS Cluster > clusters = new Array List < > ( m current . size ( ) ) ;", "for ( int i = NUM_ ; i < dimensions . length ; i ++ ) {", "Modifiable DBI Ds object I Ds = cluster I Ds [ i ] ;", "if ( ! object I Ds . is Empty ( ) ) {", "long [ ] cluster Dimensions = dimensions [ i ] ;", "double [ ] centroid = Centroid . make ( database , object I Ds ) . get Array Ref ( ) ;", "clusters . add ( new PROCLUS Cluster ( object I Ds , cluster Dimensions , centroid ) ) ; }", "else {", "clusters . add ( null ) ; } }", "if ( LOG . is Debugging ( ) ) {", "String Builder msg = new String Builder ( ) ;", "msg . append ( STR_ ) ;", "msg . append ( STR_ ) . append ( clusters ) . append ( STR_ ) ;", "LOG . debug Fine ( msg . to String ( ) ) ; }", "return clusters ; }"]}
{"ids": "84648", "code": ["public double slide Subtree ( Mutable Tree tree ) {", "double log Hastings Ratio ;", "Node Ref i , new Parent , new Child ;", "do {", "i = tree . get Node ( Math Utils . next Int ( tree . get Node Count ( ) ) ) ; }", "while ( tree . get Root ( ) == i ) ;", "Node Ref i P = tree . get Parent ( i ) ;", "Node Ref Ci P = get Other Child ( tree , i P , i ) ;", "Node Ref Pi P = tree . get Parent ( i P ) ;", "double delta = get Delta ( ) ;", "double old Height = tree . get Node Height ( i P ) ;", "double new Height = old Height + delta ;", "if ( delta > NUM_ ) {", "if ( Pi P != null && tree . get Node Height ( Pi P ) < new Height ) {", "new Parent = Pi P ;", "new Child = i P ;", "while ( tree . get Node Height ( new Parent ) < new Height ) {", "new Child = new Parent ;", "new Parent = tree . get Parent ( new Parent ) ;", "if ( new Parent == null ) break ; }", "tree . begin Tree Edit ( ) ;", "if ( tree . is Root ( new Child ) ) {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( Pi P , i P ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( Pi P , Ci P ) ;", "tree . set Root ( i P ) ; }", "else {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( Pi P , i P ) ;", "tree . remove Child ( new Parent , new Child ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( Pi P , Ci P ) ;", "tree . add Child ( new Parent , i P ) ; }", "tree . set Node Height ( i P , new Height ) ;", "tree . end Tree Edit ( ) ;", "int possible Sources = intersecting Edges ( tree , new Child , old Height , null ) ;", "log Hastings Ratio = Math . log ( NUM_ / ( double ) possible Sources ) ; }", "else {", "tree . set Node Height ( i P , new Height ) ;", "log Hastings Ratio = NUM_ ; } }", "else {", "if ( tree . get Node Height ( i ) > new Height ) {", "return Double . NEGATIVE INFINITY ; }", "if ( tree . get Node Height ( Ci P ) > new Height ) {", "Array List new Children = new Array List ( ) ;", "int possible Destinations = intersecting Edges ( tree , Ci P , new Height , new Children ) ;", "if ( new Children . size ( ) == NUM_ ) {", "return Double . NEGATIVE INFINITY ; }", "int child Index = Math Utils . next Int ( new Children . size ( ) ) ;", "new Child = ( Node Ref ) new Children . get ( child Index ) ;", "new Parent = tree . get Parent ( new Child ) ;", "tree . begin Tree Edit ( ) ;", "if ( tree . is Root ( i P ) ) {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( new Parent , new Child ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( new Parent , i P ) ;", "tree . set Root ( Ci P ) ; }", "else {", "tree . remove Child ( i P , Ci P ) ;", "tree . remove Child ( Pi P , i P ) ;", "tree . remove Child ( new Parent , new Child ) ;", "tree . add Child ( i P , new Child ) ;", "tree . add Child ( Pi P , Ci P ) ;", "tree . add Child ( new Parent , i P ) ; }", "tree . set Node Height ( i P , new Height ) ;", "tree . end Tree Edit ( ) ;", "log Hastings Ratio = Math . log ( ( double ) possible Destinations ) ; }", "else {", "tree . set Node Height ( i P , new Height ) ;", "log Hastings Ratio = NUM_ ; } }", "return log Hastings Ratio ; }"]}
{"ids": "22144", "code": ["public boolean is Initialized ( ) {", "return initialized ; }"]}
{"ids": "22971", "code": ["boolean check Camera Size ( Camera Options camera Id ) {", "boolean size Available = false ;", "Camera camera = null ;", "Method method = get Camera Open Method ( ) ;", "if ( method != null ) {", "try {", "camera = ( Camera ) method . invoke ( camera , new Object [ ] { camera Id . get Value ( ) } ) ; }", "catch ( Exception e ) {", "camera = Camera . open ( ) ; } }", "else {", "camera = Camera . open ( ) ; }", "if ( camera == null ) {", "return false ; }", "Parameters param = camera . get Parameters ( ) ;", "List < Camera . Size > sizes = param . get Supported Preview Sizes ( ) ;", "for ( Camera . Size size : sizes ) {", "if ( ( size . width == H 264 Config . QVGA WIDTH && size . height == H 264 Config . QVGA HEIGHT ) || ( size . width == H 264 Config . CIF WIDTH && size . height == H 264 Config . CIF HEIGHT ) || ( size . width == H 264 Config . VGA WIDTH && size . height == H 264 Config . VGA HEIGHT ) ) {", "size Available = true ;", "break ; } }", "camera . release ( ) ;", "return size Available ; }"]}
{"ids": "80046", "code": ["public void append ( final String s ) {", "if ( first ) {", "first = false ; }", "else {", "builder . append ( space ) ; }", "builder . append ( s ) ; }"]}
{"ids": "44538", "code": ["public static Byte Array Output Stream encode ( String plaintext ) throws IO Exception , Messaging Exception {", "Byte Array Output Stream out = new Byte Array Output Stream ( ) ;", "byte [ ] in = plaintext . get Bytes ( ) ;", "Byte Array Output Stream in Stream = new Byte Array Output Stream ( ) ;", "in Stream . write ( in , NUM_ , in . length ) ;", "if ( ( in . length % NUM_ ) == NUM_ ) {", "in Stream . write ( NUM_ ) ;", "in Stream . write ( NUM_ ) ; }", "else if ( ( in . length % NUM_ ) == NUM_ ) {", "in Stream . write ( NUM_ ) ; }", "in Stream . write To ( Mime Utility . encode ( out , STR_ ) ) ;", "return out ; }"]}
{"ids": "51694", "code": ["public Lookup List Table lookup List ( ) {", "if ( lookup List Table . get ( ) == null ) {", "lookup List Table . compare And Set ( null , gsub . create Lookup List ( ) ) ; }", "return lookup List Table . get ( ) ; }"]}
{"ids": "76474", "code": ["public long sum ( ) {", "return delta Sum . get ( ) ; }"]}
{"ids": "35159", "code": ["private static boolean is Word Boundary ( Char Sequence single Char , String word Separators ) {", "return Text Utils . is Empty ( single Char ) || word Separators . contains ( single Char ) ; }"]}
{"ids": "75432", "code": ["protected Table Viewer create Table ( Composite parent , int span ) {", "Table table = new Table ( parent , SWT . H SCROLL | SWT . V SCROLL | SWT . BORDER | SWT . SINGLE | SWT . FULL SELECTION ) ;", "Grid Data data = new Grid Data ( Grid Data . FILL BOTH | Grid Data . GRAB HORIZONTAL ) ;", "data . horizontal Span = span ;", "table . set Layout Data ( data ) ;", "Table Layout layout = new Table Layout ( ) ;", "layout . add Column Data ( new Column Weight Data ( NUM_ , true ) ) ;", "table . set Layout ( layout ) ;", "Table Column col = new Table Column ( table , SWT . NONE ) ;", "col . set Resizable ( true ) ;", "return new Table Viewer ( table ) ; }"]}
{"ids": "19715", "code": ["public String type As String ( ) {", "String type Str = STR_ ;", "String subtype Str = STR_ ;", "switch ( this . type ) {", "case ETYPE CONTROL :", "type Str = STR_ ;", "switch ( this . subtype ) {", "case ESTYPE HEADER :", "subtype Str = STR_ ;", "break ;", "case ESTYPE FOOTER :", "subtype Str = STR_ ;", "break ; }", "break ;", "case ETYPE TRANSACTIONS :", "type Str = STR_ ;", "switch ( this . subtype ) {", "case ESTYPE TRAN START :", "subtype Str = STR_ ;", "break ;", "case ESTYPE TRAN COMMIT :", "subtype Str = STR_ ;", "break ;", "case ESTYPE TRAN ROLLBACK :", "subtype Str = STR_ ;", "break ;", "case ESTYPE TRAN ROLLBACK TO SAVEPOINT :", "subtype Str = STR_ ;", "break ;", "case ESTYPE TRAN AUDIT :", "subtype Str = STR_ ;", "break ; }", "break ;", "case ETYPE LCR DATA :", "type Str = STR_ ;", "switch ( this . subtype ) {", "case ESTYPE LCR INSERT :", "subtype Str = STR_ ;", "break ;", "case ESTYPE LCR DELETE :", "subtype Str = STR_ ;", "break ;", "case ESTYPE LCR UPDATE :", "subtype Str = STR_ ;", "break ;", "case ESTYPE LCR LOB WRITE :", "subtype Str = STR_ ;", "break ;", "case ESTYPE LCR LOB TRIM :", "subtype Str = STR_ ;", "break ;", "case ESTYPE LCR LOB ERASE :", "subtype Str = STR_ ;", "break ;", "case ESTYPE LCR DDL :", "subtype Str = STR_ ;", "break ; }", "break ;", "case ETYPE LCR PLOG :", "type Str = STR_ ;", "switch ( this . subtype ) {", "case ESTYPE LCR PLOG IFILE :", "subtype Str = STR_ ;", "break ;", "case ESTYPE LCR PLOG IFILE STATS :", "subtype Str = STR_ ;", "break ; }", "break ;", "default :", "type Str = STR_ + this . type + STR_ ;", "subtype Str = STR_ + this . subtype ; }", "return type Str + subtype Str ; }"]}
{"ids": "55930", "code": ["public Artifact load ( File path ) throws IO Exception {", "return load ( new Artifact Name ( path . get Name ( ) ) , path ) ; }"]}
{"ids": "79801", "code": ["private static final boolean is Header End ( String Builder sb ) {", "int len = sb . length ( ) ;", "if ( len > NUM_ ) {", "if ( LF 2 . equals ( sb . substring ( len - NUM_ ) ) ) {", "return true ; } }", "if ( len > NUM_ ) {", "if ( CRLF 2 . equals ( sb . substring ( len - NUM_ ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "74496", "code": ["public TS Action Delay ( Transit Section Action tsa , int delay ) {", "tsa = tsa ;", "delay = delay ; }"]}
{"ids": "9744", "code": ["public D Add Extensions ( J Dialog parent , X 509 Extension Set extensions , Public Key authority Public Key , X 500 Name authority Cert Name , Big Integer authority Cert Serial Number , Public Key subject Public Key ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "set Title ( res . get String ( STR_ ) ) ;", "this . extensions = ( X 509 Extension Set ) extensions . clone ( ) ;", "this . authority Public Key = authority Public Key ;", "this . authority Cert Name = authority Cert Name ;", "this . authority Cert Serial Number = authority Cert Serial Number ;", "this . subject Public Key = subject Public Key ;", "init Components ( ) ; }"]}
{"ids": "5518", "code": ["public void add ( I Multi Point pt ) {", "if ( in Progress ) {", "throw new Concurrent Modification Exception ( STR_ ) ; }", "points . add ( pt ) ; }"]}
{"ids": "33407", "code": ["private Discovery Information verify Discovered ( Auth Success auth Resp , Discovery Information discovered ) throws Discovery Exception {", "if ( auth Resp == null || auth Resp . get Identity ( ) == null ) {", "log . info ( STR_ ) ;", "return null ; }", "if ( auth Resp . is Version 2 ( ) ) return verify Discovered 2 ( auth Resp , discovered ) ;", "else return verify Discovered 1 ( auth Resp , discovered ) ; }"]}
{"ids": "72333", "code": ["public boolean generate ( Report Description description , Date date ) {", "try {", "Integer target Date Int = Integer . parse Int ( format . format ( date ) ) ;", "Analysis Result Set log Aggregation = make Log Anal ( description , target Date Int ) ;", "Report report = new Report ( ) ;", "report . set Send Time ( new Date ( ) ) ;", "report . set Target Date ( date ) ;", "report . set Log Report ( log Aggregation ) ;", "report . set Targets ( description . get Targets ( ) ) ;", "logger . debug ( STR_ + report ) ;", "report Repository . save ( report ) ;", "return true ; }", "catch ( Exception e ) {", "logger . error ( e . get Message ( ) , e ) ;", "return false ; } }"]}
{"ids": "41512", "code": ["@ Override public void update Text Views ( Recharge recharge ) {", "unit Type Text View . set Text ( recharge . get Units ( ) ) ;", "unit Value Text View . set Text ( String . value Of ( recharge . get Current Amount ( ) ) ) ;", "cost Text View . set Text ( Currency . localize ( recharge . get Current Cost ( ) , true ) ) ;", "recharge Name . set Text ( recharge . get Title ( ) ) ;", "confirmation Text View . set Text ( STR_ + recharge . get Current Amount ( ) + STR_ + recharge . get Units ( ) + STR_ ) ;", "if ( recharge . get Current Amount ( ) == recharge . get Initial Amount ( ) ) {", "down Arrow . set Visibility ( View . INVISIBLE ) ; }", "else {", "down Arrow . set Visibility ( View . VISIBLE ) ; } }"]}
{"ids": "32201", "code": ["private Concurrent Map < Grid Cache Version , Ignite Internal Tx > transaction Map ( Ignite Internal Tx tx ) {", "return ( tx . near ( ) && ! tx . local ( ) ) ? near Id Map : id Map ; }"]}
{"ids": "44878", "code": ["public static byte [ ] decode ( byte [ ] data , String pri key ) {", "try {", "Cipher cipher = Cipher . get Instance ( STR_ ) ;", "java . security . Key k = get Private Key ( pri key ) ;", "cipher . init ( Cipher . DECRYPT MODE , k ) ;", "byte [ ] de Bytes = cipher . do Final ( data ) ;", "return de Bytes ; }", "catch ( Exception e ) {", "log . error ( pri key , e ) ; }", "return null ; }"]}
{"ids": "43459", "code": ["public void add Landing Pad ( int x , int z ) {", "Block Position pos = new Block Position ( x , NUM_ , z ) ;", "if ( ! spawn Locations . contains ( pos ) ) {", "spawn Locations . add ( pos ) ;", "occupied Landing Pads . put ( pos , false ) ; } }"]}
{"ids": "80421", "code": ["static Attack Strategy create ( String params ) {", "String [ ] arg = params . split ( STR_ , - NUM_ ) ;", "if ( arg . length != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + params + STR_ ) ; }", "Pair < String , String > desc = parse Strategy ( arg [ NUM_ ] ) ;", "Target Selection Strategy targeter = Target Selection Strategy Factory . get ( desc . first ( ) , desc . second ( ) ) ;", "desc = parse Strategy ( arg [ NUM_ ] ) ;", "Positioning Strategy positioner = Positioning Strategy Factory . get ( desc . first ( ) , desc . second ( ) ) ;", "return new Compound Attack Strategy ( get Sub Strategy ( arg [ NUM_ ] ) , targeter , positioner ) ; }"]}
{"ids": "27828", "code": ["final public void write Chunk ( L locator , KVO < O > [ ] chunk ) throws Mock Stale Locator Exception {", "synchronized ( this ) {", "if ( stale Locators . contains ( locator . get Partition Id ( ) ) ) {", "throw new Mock Stale Locator Exception ( locator ) ; }", "if ( ! known Locators . contains ( locator . get Partition Id ( ) ) ) {", "throw new Runtime Exception ( STR_ + locator ) ; } }", "accept Write ( locator , chunk ) ; }"]}
{"ids": "72781", "code": ["public Event event ( int id ) {", "if ( ! host ) {", "return ( Event ) events . get ( new Integer ( id ) ) ; }", "return null ; }"]}
{"ids": "34826", "code": ["private void init Values ( ) {", "I Preference Store store = do Get Preference Store ( ) ;", "final String stored Items = store . get String ( Checker Preferences . PREF CHECKER CUSTOM CLASSES ) ;", "if ( ! stored Items . equals ( STR_ ) ) {", "custom Checkers . set Items ( stored Items . split ( STR_ ) ) ; } }"]}
{"ids": "65415", "code": ["void sync ( int source Repo Index , int dest Repo Index , Authentication Info subject ) throws IO Exception {", "LOG . info ( STR_ ) ;", "Notebook Authorization auth = Notebook Authorization . get Instance ( ) ;", "Notebook Repo src Repo = get Repo ( source Repo Index ) ;", "Notebook Repo dst Repo = get Repo ( dest Repo Index ) ;", "List < Note Info > all Src Notes = src Repo . list ( subject ) ;", "List < Note Info > src Notes = auth . filter By User ( all Src Notes , subject ) ;", "List < Note Info > dst Notes = dst Repo . list ( subject ) ;", "Map < String , List < String > > note Ids = notes Check Diff ( src Notes , src Repo , dst Notes , dst Repo , subject ) ;", "List < String > push Note Ids = note Ids . get ( push Key ) ;", "List < String > pull Note Ids = note Ids . get ( pull Key ) ;", "List < String > del Dst Note Ids = note Ids . get ( del Dst Key ) ;", "if ( ! push Note Ids . is Empty ( ) ) {", "LOG . info ( STR_ ) ;", "for ( String id : push Note Ids ) {", "LOG . info ( STR_ + id ) ; }", "push Notes ( subject , push Note Ids , src Repo , dst Repo , false ) ; }", "else {", "LOG . info ( STR_ ) ; }", "if ( ! pull Note Ids . is Empty ( ) ) {", "LOG . info ( STR_ ) ;", "for ( String id : pull Note Ids ) {", "LOG . info ( STR_ + id ) ; }", "push Notes ( subject , pull Note Ids , dst Repo , src Repo , true ) ; }", "else {", "LOG . info ( STR_ ) ; }", "if ( ! del Dst Note Ids . is Empty ( ) ) {", "LOG . info ( STR_ ) ;", "for ( String id : del Dst Note Ids ) {", "LOG . info ( STR_ + id ) ; }", "delete Notes ( subject , del Dst Note Ids , dst Repo ) ; }", "else {", "LOG . info ( STR_ ) ; }", "LOG . info ( STR_ ) ; }"]}
{"ids": "31782", "code": ["@ Nullable public static String md 5 ( @ Nullable File file , @ Nullable Ignite Logger log ) {", "if ( file != null ) return file . is File ( ) ? file Md 5 ( file , log ) : directory Md 5 ( file , log ) ;", "return null ; }"]}
{"ids": "25879", "code": ["@ Override public boolean has Next ( ) {", "if ( all Rows Result . size ( ) == NUM_ ) {", "return false ; }", "total Record Counter ++ ;", "list Record Counter ++ ;", "if ( list Record Counter == NUM_ || ( list Record Counter >= current Row Pointer . size ( ) && current List Counter < all Rows Result . size ( ) ) ) {", "list Record Counter = NUM_ ;", "current Row Pointer = all Rows Result . get ( current List Counter ) ;", "current List Counter ++ ; }", "return total Record Counter < total Number Of Records ; }"]}
{"ids": "46696", "code": ["public void trim To Size ( ) {", "delegate . trim To Size ( ) ; }"]}
{"ids": "24757", "code": ["public final void clear ( ) {", "caches . clear ( ) ;", "sections . clear ( ) ; }"]}
{"ids": "45868", "code": ["static Set < Node > to Node Set ( Iterator < Node > i ) {", "Set < Node > node Set = new Hash Set < Node > ( ) ;", "while ( i . has Next ( ) ) {", "Node n = i . next ( ) ;", "node Set . add ( n ) ;", "if ( n . get Node Type ( ) == Node . ELEMENT NODE ) {", "Named Node Map nnm = n . get Attributes ( ) ;", "for ( int j = NUM_ , length = nnm . get Length ( ) ; j < length ; j ++ ) {", "node Set . add ( nnm . item ( j ) ) ; } } }", "return node Set ; }"]}
{"ids": "68149", "code": ["public static void run Concurrently ( final Callable < Void > task , final int times ) throws Exception {", "final Executor Service service = Executors . new Fixed Thread Pool ( NUM_ ) ;", "final List < Future < ? > > futures = new Array List < Future < ? > > ( ) ;", "for ( int i = NUM_ ; i < times ; i ++ ) {", "futures . add ( service . submit ( task ) ) ; }", "for ( final Future < ? > future : futures ) {", "future . get ( ) ; } }"]}
{"ids": "22850", "code": ["private static Array List < Container Vm > create Vm List ( int broker Id , int container Vms Number ) {", "Array List < Container Vm > container Vms = new Array List < Container Vm > ( ) ;", "for ( int i = NUM_ ; i < container Vms Number ; ++ i ) {", "Array List < Container Pe > pe List = new Array List < Container Pe > ( ) ;", "int vm Type = i / ( int ) Math . ceil ( ( double ) container Vms Number / NUM_ ) ;", "for ( int j = NUM_ ; j < Constants Examples . VM PES [ vm Type ] ; ++ j ) {", "pe List . add ( new Container Pe ( j , new Cotainer Pe Provisioner Simple ( ( double ) Constants Examples . VM MIPS [ vm Type ] ) ) ) ; }", "container Vms . add ( new Power Container Vm ( I Ds . poll Id ( Container Vm . class ) , broker Id , ( double ) Constants Examples . VM MIPS [ vm Type ] , ( float ) Constants Examples . VM RAM [ vm Type ] , Constants Examples . VM BW , Constants Examples . VM SIZE , STR_ , new Container Scheduler Time Shared Over Subscription ( pe List ) , new Container Ram Provisioner Simple ( Constants Examples . VM RAM [ vm Type ] ) , new Container Bw Provisioner Simple ( Constants Examples . VM BW ) , pe List , Constants Examples . SCHEDULING INTERVAL ) ) ; }", "return container Vms ; }"]}
{"ids": "21770", "code": ["public static void add Port Use ( Map < Storage Port , Integer > port Use Counts , Storage Port port ) {", "if ( ! port Use Counts . contains Key ( port ) ) {", "port Use Counts . put ( port , NUM_ ) ; }", "else {", "Integer new Count = port Use Counts . get ( port ) + NUM_ ;", "port Use Counts . put ( port , new Count ) ; } }"]}
{"ids": "20621", "code": ["@ Override public synchronized Cache Object < V > put ( K key , Cache Object < V > value ) {", "if ( cache . size ( ) >= max Size ) {", "if ( remove Expired ( ) <= NUM_ ) {", "if ( cache Full Remove Type instanceof Remove Type Not Remove ) {", "return null ; }", "if ( full Remove One ( ) == null ) {", "return null ; } } }", "value . set Enter Time ( System . current Time Millis ( ) ) ;", "cache . put ( key , value ) ;", "return value ; }"]}
{"ids": "66009", "code": ["public void remove Model Change ( String table Name , Model Validator listener ) {", "if ( table Name == null || listener == null ) return ;", "String property Name = m global Validators . contains ( listener ) ? table Name + STR_ : table Name + listener . get AD Client ID ( ) ;", "Array List < Model Validator > list = m model Change Listeners . get ( property Name ) ;", "if ( list == null ) return ;", "list . remove ( listener ) ;", "if ( list . size ( ) == NUM_ ) m model Change Listeners . remove ( property Name ) ; }"]}
{"ids": "22493", "code": ["private String create Connection Name ( ) {", "String Builder name Buffer = new String Builder ( ) ;", "name Buffer . append ( get Connection Type ( ) ) ;", "name Buffer . append ( STR_ ) ;", "name Buffer . append ( host ) ;", "name Buffer . append ( STR_ ) ;", "name Buffer . append ( port ) ;", "return name Buffer . to String ( ) ; }"]}
{"ids": "1203", "code": ["public Query execute ( Page Context pc , SQL sql , int maxrows , int fetchsize , Time Span timeout ) throws Page Exception {", "Stopwatch stopwatch = new Stopwatch ( Stopwatch . UNIT NANO ) ;", "stopwatch . start ( ) ;", "String pretty SQL = null ;", "Selects selects = null ;", "try {", "Select Parser parser = new Select Parser ( ) ;", "selects = parser . parse ( sql . get SQL String ( ) ) ;", "Query q = qoq . execute ( pc , sql , selects , maxrows ) ;", "q . set Execution Time ( stopwatch . time ( ) ) ;", "return q ; }", "catch ( SQL Parser Exception spe ) {", "pretty SQL = SQL Prettyfier . prettyfie ( sql . get SQL String ( ) ) ;", "try {", "Query query = executer . execute ( pc , sql , pretty SQL , maxrows ) ;", "query . set Execution Time ( stopwatch . time ( ) ) ;", "return query ; }", "catch ( Page Exception ex ) { } }", "catch ( Page Exception e ) { }", "try {", "boolean is Union = false ;", "Set < String > tables = null ;", "if ( selects != null ) {", "HSQL Util 2 hsql 2 = new HSQL Util 2 ( selects ) ;", "is Union = hsql 2 . is Union ( ) ;", "tables = hsql 2 . get Invoked Tables ( ) ; }", "else {", "if ( pretty SQL == null ) pretty SQL = SQL Prettyfier . prettyfie ( sql . get SQL String ( ) ) ;", "HSQL Util hsql = new HSQL Util ( pretty SQL ) ;", "tables = hsql . get Invoked Tables ( ) ;", "is Union = hsql . is Union ( ) ; }", "String str SQL = String Util . replace ( sql . get SQL String ( ) , STR_ , STR_ , false ) ;", "str SQL = String Util . replace ( str SQL , STR_ , STR_ , false ) ;", "sql . set SQL String ( str SQL ) ;", "return execute ( pc , sql , maxrows , fetchsize , timeout , stopwatch , tables , is Union ) ; }", "catch ( Parse Exception e ) {", "throw new Database Exception ( e . get Message ( ) , null , sql , null ) ; } }"]}
{"ids": "21972", "code": ["@ POST @ Produces ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Path ( STR_ ) @ Check Permission ( roles = { Role . TENANT ADMIN } ) public Task Resource Rep discover Host ( @ Path Param ( STR_ ) URI id ) {", "Arg Validator . check Field Uri Type ( id , Host . class , STR_ ) ;", "Host host = query Object ( Host . class , id , true ) ;", "return do Discover Host ( host ) ; }"]}
{"ids": "81982", "code": ["public static final void read Fully ( Input Stream i , byte b [ ] , int off , int len ) throws IO Exception {", "if ( len < NUM_ ) {", "throw new Index Out Of Bounds Exception ( ) ; }", "int n = NUM_ ;", "while ( n < len ) {", "int count = i . read ( b , off + n , len - n ) ;", "if ( count < NUM_ ) {", "throw new EOF Exception ( ) ; }", "n += count ; } }"]}
{"ids": "1504", "code": ["private void draw Lines ( Canvas canvas ) {", "for ( int i = NUM_ ; i < connection Order . size ( ) - NUM_ ; i ++ ) {", "draw Line ( canvas , circles [ connection Order . get ( i ) ] , circles [ connection Order . get ( i + NUM_ ) ] ) ; } }"]}
{"ids": "33386", "code": ["public static File to File ( Java File Object java File Object ) {", "return new File ( java File Object . get Name ( ) ) ; }"]}
{"ids": "49301", "code": ["public Writable Raster create Compatible Writable Raster ( int w , int h ) {", "int [ ] b Offs = { NUM_ , NUM_ , NUM_ } ;", "return Raster . create Interleaved Raster ( Data Buffer . TYPE BYTE , w , h , w * NUM_ , NUM_ , b Offs , null ) ; }"]}
{"ids": "62944", "code": ["public static String execute ( String command ) {", "return Subprocess Uttility . execute ( command ) ; }"]}
{"ids": "86721", "code": ["public synchronized void update Progress ( final int value ) {", "final Thread t = Thread . current Thread ( ) ;", "final My Integer v = m Individual Thread Progress . get ( t ) ;", "if ( v == null ) {", "m Individual Thread Progress . put ( t , new My Integer ( value ) ) ; }", "else {", "v . set Value ( value ) ; }", "if ( value > m Last Reported Progress ) {", "int min = Integer . MAX VALUE ;", "for ( final My Integer m : m Individual Thread Progress . values ( ) ) {", "if ( m . get Value ( ) < min ) {", "min = m . get Value ( ) ; } }", "if ( min > m Last Reported Progress ) {", "m Last Reported Progress = min ;", "Diagnostic . progress ( STR_ + min + STR_ + m Name ) ; } } }"]}
{"ids": "3008", "code": ["private Context Handler create Context Handler ( String directory , boolean is In Jar , File install Root Directory , int expires In Seconds ) {", "final Context Handler context Handler = new Context Handler ( ) ;", "final Resource Handler resource Handler = new Expires Resource Handler ( expires In Seconds ) ;", "final String directory With Slash = STR_ + directory ;", "context Handler . set Context Path ( directory With Slash ) ;", "Resource directory Resource = get Directory Resource ( directory , is In Jar , install Root Directory ) ;", "directory Resource = new Js Minifying Resource ( directory Resource ) ;", "if ( is In Jar ) {", "directory Resource = new Caching Resource ( directory Resource , directory With Slash ) ; }", "resource Handler . set Base Resource ( directory Resource ) ;", "if ( ! is In Jar ) {", "resource Handler . set Min Memory Mapped Content Length ( NUM_ ) ; }", "context Handler . set Handler ( resource Handler ) ;", "return context Handler ; }"]}
{"ids": "29408", "code": ["public boolean starts With ( java . lang . Char Sequence prefix ) {", "return starts With ( prefix , NUM_ ) ; }"]}
{"ids": "13657", "code": ["private List < Container Initializer > jsp Initializers ( ) {", "Jetty Jasper Initializer sci = new Jetty Jasper Initializer ( ) ;", "Container Initializer initializer = new Container Initializer ( sci , null ) ;", "List < Container Initializer > initializers = new Array List < Container Initializer > ( ) ;", "initializers . add ( initializer ) ;", "return initializers ; }"]}
{"ids": "62234", "code": ["public static Temp Path create Directory ( ) throws IO Exception {", "return wrap ( Files . create Temp Directory ( PREFIX ) ) ; }"]}
{"ids": "78434", "code": ["public Collection < String > list Columns ( String table ) throws Database Exception {", "Collection < String > result = new Array List < String > ( ) ;", "Result Set rs = null ;", "try {", "Database Meta Data dbm = connection . get Meta Data ( ) ;", "rs = dbm . get Columns ( null , null , table , null ) ;", "while ( rs . next ( ) ) {", "result . add ( rs . get String ( STR_ ) ) ; } }", "catch ( SQL Exception e ) {", "throw new Database Exception ( e ) ; }", "finally {", "if ( rs != null ) {", "try {", "rs . close ( ) ; }", "catch ( SQL Exception e ) { } } }", "return result ; }"]}
{"ids": "29089", "code": ["public void add Created Resource ( Location location , Resource resource ) {", "resource List . add ( resource ) ;", "location To Resource Map . put ( location , resource ) ; }"]}
{"ids": "55831", "code": ["public void signal Event ( ) {", "Collection < Semaphore > semaphores = semaphores . values ( ) ;", "for ( Semaphore semaphore : semaphores ) {", "semaphore . release ( ) ;", "semaphores . remove ( semaphore ) ; } }"]}
{"ids": "7857", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( obj == this ) {", "return true ; }", "if ( ! ( obj instanceof Keyed Objects ) ) {", "return false ; }", "Keyed Objects that = ( Keyed Objects ) obj ;", "int count = get Item Count ( ) ;", "if ( count != that . get Item Count ( ) ) {", "return false ; }", "for ( int i = NUM_ ; i < count ; i ++ ) {", "Comparable k 1 = get Key ( i ) ;", "Comparable k 2 = that . get Key ( i ) ;", "if ( ! k 1 . equals ( k 2 ) ) {", "return false ; }", "Object o 1 = get Object ( i ) ;", "Object o 2 = that . get Object ( i ) ;", "if ( o 1 == null ) {", "if ( o 2 != null ) {", "return false ; } }", "else {", "if ( ! o 1 . equals ( o 2 ) ) {", "return false ; } } }", "return true ; }"]}
{"ids": "21126", "code": ["protected boolean is Quorum Maintained ( ) {", "if ( node Count == NUM_ ) {", "log . info ( STR_ ) ;", "return true ; }", "int quorum Node Cnt = node Count / NUM_ + NUM_ ;", "Coordinator Client coordinator Client = coordinator . get Coordinator Client ( ) ;", "List < Service > all Active Dbsvcs = coordinator Client . locate All Svcs All Vers ( Constants . DBSVC NAME ) ;", "List < String > other Active Dbsvc Ids = new Array List < > ( ) ;", "String my Svc Id = coordinator . get My Svc Id ( ) ;", "String local Db Svc Id = STR_ + my Svc Id . substring ( my Svc Id . last Index Of ( STR_ ) ) ;", "for ( Service active Dbsvc : all Active Dbsvcs ) {", "if ( ! local Db Svc Id . equals ( active Dbsvc . get Id ( ) ) ) {", "other Active Dbsvc Ids . add ( active Dbsvc . get Id ( ) ) ; } }", "log . info ( STR_ , other Active Dbsvc Ids , quorum Node Cnt ) ;", "boolean is Maintained = other Active Dbsvc Ids . size ( ) >= quorum Node Cnt ;", "if ( ! is Maintained ) {", "log . info ( STR_ ) ; }", "return is Maintained ; }"]}
{"ids": "40783", "code": ["public static void schedule Next Alarm ( Context context ) {", "schedule Next Alarm ( context , Alert Utils . create Alarm Manager ( context ) , REMINDER QUERY BATCH SIZE , System . current Time Millis ( ) ) ; }"]}
{"ids": "61752", "code": ["public void request Stop ( ) {", "stop Requested . set ( true ) ; }"]}
{"ids": "86171", "code": ["@ Safe Varargs public static < T > T [ ] join ( Int Function < T [ ] > array Function , T [ ] ... arrays ) {", "if ( arrays . length == NUM_ ) {", "return array Function . apply ( NUM_ ) ; }", "if ( arrays . length == NUM_ ) {", "return arrays [ NUM_ ] ; }", "if ( arrays . length == NUM_ ) {", "return join ( array Function , arrays [ NUM_ ] , arrays [ NUM_ ] ) ; }", "T [ ] not Null = null ;", "int final Size = NUM_ ;", "int null Arrays = NUM_ ;", "List < T > list = new Array List < > ( arrays . length * NUM_ ) ;", "for ( T [ ] array : arrays ) {", "if ( ( array == null ) || ( array . length == NUM_ ) ) {", "null Arrays ++ ; }", "else {", "not Null = array ;", "final Size += array . length ;", "Collections . add All ( list , array ) ; } }", "if ( null Arrays == arrays . length ) {", "return array Function . apply ( NUM_ ) ; }", "if ( null Arrays == ( arrays . length - NUM_ ) ) {", "return not Null ; }", "return list . to Array ( array Function . apply ( list . size ( ) ) ) ; }"]}
{"ids": "14478", "code": ["private static Set < String > split Path ( Relaxed URL url ) {", "Set < String > results = new Hash Set < String > ( ) ;", "Set < String > queries = normalize Query ( url . get Query ( ) ) ;", "results . add ( STR_ ) ;", "for ( String q : queries ) {", "results . add ( STR_ + q ) ; }", "Set < String > paths = split Path ( url . get Path ( ) ) ;", "results . add All ( paths ) ;", "for ( String p : paths ) {", "for ( String q : queries ) {", "results . add ( p + STR_ + q ) ; } }", "return results ; }"]}
{"ids": "65560", "code": ["public Action Forward init Best Selling Report ( Action Mapping mapping , Action Form form , Http Servlet Request request , Http Servlet Response response ) throws Application Exception , Operation Exception {", "Action Forward fwd = init ( mapping , form , request , response ) ;", "if ( fwd != null ) return fwd ;", "Selling Item Form report Form = ( Selling Item Form ) form ;", "String time Period = Report Date Manager . TODAY ;", "String date Range = Constants . FIXED DATE RANGE ;", "report Form . set Time Period ( time Period ) ;", "report Form . set Date Range ( date Range ) ;", "report Form . set From Date ( STR_ ) ;", "report Form . set To Date ( STR_ ) ;", "report Form . validate ( mapping , request ) ;", "return mapping . find Forward ( INIT BEST SELLING REPORT ) ; }"]}
{"ids": "28146", "code": ["@ Override public void transaction Begin ( ) {", "for ( Bigdata Graph Listener listener : listeners ) {", "listener . transaction Begin ( ) ; } }"]}
{"ids": "69389", "code": ["public synchronized void add ( Job job ) {", "boolean can Run Immediately = dag Manager . add Job ( job ) ;", "if ( can Run Immediately ) {", "LOG . debug ( STR_ + job + STR_ ) ;", "jobs To Run . add ( job ) ; }", "increment Submitted Job Count ( ) ; }"]}
{"ids": "4075", "code": ["public void add Constant ( Constant Pool Entry entry ) {", "if ( entry instanceof Utf 8 Constant ) {", "Utf 8 Constant utf 8 = ( Utf 8 Constant ) entry ;", "utf 8 Map . put ( utf 8 . get Value ( ) , utf 8 ) ; }", "entries . add ( entry ) ; }"]}
{"ids": "49379", "code": ["static void write Rule ( Zone Offset Transition Rule rule , Data Output out ) throws IO Exception {", "int month = rule . month ;", "byte dom = rule . dom ;", "int dow = rule . dow ;", "Local Time time = rule . time ;", "boolean time End Of Day = rule . time End Of Day ;", "Time Definition time Definition = rule . time Definition ;", "Zone Offset standard Offset = rule . standard Offset ;", "Zone Offset offset Before = rule . offset Before ;", "Zone Offset offset After = rule . offset After ;", "int time Secs = ( time End Of Day ? NUM_ : time . to Second Of Day ( ) ) ;", "int std Offset = standard Offset . get Total Seconds ( ) ;", "int before Diff = offset Before . get Total Seconds ( ) - std Offset ;", "int after Diff = offset After . get Total Seconds ( ) - std Offset ;", "int time Byte = ( time Secs % NUM_ == NUM_ ? ( time End Of Day ? NUM_ : time . get Hour ( ) ) : NUM_ ) ;", "int std Offset Byte = ( std Offset % NUM_ == NUM_ ? std Offset / NUM_ + NUM_ : NUM_ ) ;", "int before Byte = ( before Diff == NUM_ || before Diff == NUM_ || before Diff == NUM_ ? before Diff / NUM_ : NUM_ ) ;", "int after Byte = ( after Diff == NUM_ || after Diff == NUM_ || after Diff == NUM_ ? after Diff / NUM_ : NUM_ ) ;", "int dow Byte = ( dow == - NUM_ ? NUM_ : dow ) ;", "int b = ( month << NUM_ ) + ( ( dom + NUM_ ) << NUM_ ) + ( dow Byte << NUM_ ) + ( time Byte << NUM_ ) + ( time Definition . ordinal ( ) << NUM_ ) + ( std Offset Byte << NUM_ ) + ( before Byte << NUM_ ) + after Byte ;", "out . write Int ( b ) ;", "if ( time Byte == NUM_ ) {", "out . write Int ( time Secs ) ; }", "if ( std Offset Byte == NUM_ ) {", "out . write Int ( std Offset ) ; }", "if ( before Byte == NUM_ ) {", "out . write Int ( offset Before . get Total Seconds ( ) ) ; }", "if ( after Byte == NUM_ ) {", "out . write Int ( offset After . get Total Seconds ( ) ) ; } }"]}
{"ids": "72929", "code": ["@ Suppress Warnings ( STR_ ) public static < T > Type Serializer < T > deserialize ( byte [ ] bytes ) throws IO Exception {", "Byte Array Input Stream bis = new Byte Array Input Stream ( bytes ) ;", "Object Input in = null ;", "try {", "in = new Object Input Stream ( bis ) ;", "return ( Type Serializer < T > ) in . read Object ( ) ; }", "catch ( Class Not Found Exception e ) {", "throw new IO Exception ( STR_ ) ; }", "finally {", "try {", "bis . close ( ) ; }", "catch ( IO Exception ex ) { }", "try {", "if ( in != null ) {", "in . close ( ) ; } }", "catch ( IO Exception ex ) { } } }"]}
{"ids": "73311", "code": ["public void show Selected Neuron Properties ( ) {", "Neuron Dialog dialog = Neuron Dialog . create Neuron Dialog ( get Selected Neurons ( ) ) ;", "dialog . set Modality Type ( Dialog . Modality Type . MODELESS ) ;", "dialog . pack ( ) ;", "dialog . set Location Relative To ( null ) ;", "dialog . set Visible ( true ) ; }"]}
{"ids": "1280", "code": ["private static boolean has Changes Of Children ( long last , Page Context pc , Class clazz ) {", "java . lang . reflect . Method [ ] methods = clazz . get Methods ( ) ;", "java . lang . reflect . Method method ;", "Class [ ] params ;", "for ( int i = NUM_ ; i < methods . length ; i ++ ) {", "method = methods [ i ] ;", "if ( method . get Declaring Class ( ) == clazz ) {", "if ( has Changes Of Children ( pc , last , method . get Return Type ( ) ) ) return true ;", "params = method . get Parameter Types ( ) ;", "for ( int y = NUM_ ; y < params . length ; y ++ ) {", "if ( has Changes Of Children ( pc , last , params [ y ] ) ) return true ; } } }", "return false ; }"]}
{"ids": "65918", "code": ["public static String remove Special Char ( String temp Str ) {", "if ( temp Str != null ) {", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ;", "while ( temp Str . index Of ( STR_ ) > NUM_ ) {", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ; }", "temp Str = replace ( temp Str , STR_ , STR_ , true , true ) ; }", "return temp Str ; }"]}
{"ids": "73267", "code": ["public Run Script Action ( Network Panel network Panel ) {", "super ( STR_ ) ;", "put Value ( SMALL ICON , Resource Manager . get Image Icon ( STR_ ) ) ;", "put Value ( SHORT DESCRIPTION , STR_ ) ;", "this . network Panel = network Panel ; }"]}
{"ids": "43676", "code": ["public T web Image ( String url ) {", "return web Image ( url , true , false , NUM_ ) ; }"]}
{"ids": "30312", "code": ["private Map < Installment , List < Receipt > > consolidate Tuples Installment Wise ( final List < Installment Receipt Tuple > tuples ) {", "final Map < Installment , List < Receipt > > consolidated = new Hash Map < Installment , List < Receipt > > ( ) ;", "for ( final Installment Receipt Tuple t : tuples ) {", "List < Receipt > receipts For Installment = consolidated . get ( t . installment ) ;", "if ( receipts For Installment == null ) {", "receipts For Installment = new Array List < Receipt > ( ) ;", "consolidated . put ( t . installment , receipts For Installment ) ; }", "if ( ! receipts For Installment . contains ( t . receipt ) ) receipts For Installment . add ( t . receipt ) ; }", "LOGGER . info ( STR_ + consolidated ) ;", "return consolidated ; }"]}
{"ids": "34122", "code": ["public static boolean is Valid Email ( String email ) {", "final String email Pattern = STR_ ;", "Matcher matcher ;", "Pattern pattern = Pattern . compile ( email Pattern ) ;", "matcher = pattern . matcher ( email ) ;", "if ( matcher != null ) return matcher . matches ( ) ;", "else return false ; }"]}
{"ids": "71201", "code": ["public void add ( Line Merge Directed Edge directed Edge ) {", "directed Edges . add ( directed Edge ) ; }"]}
{"ids": "5543", "code": ["public String report ( ) {", "String Buffer report = new String Buffer ( ) ;", "int Hash Table = new int [ table . table Size ] ;", "calculate Slot Usage ( ) ;", "int max = max Collisions ( ) ;", "int [ ] slot Usage Count = new int [ max + NUM_ ] ;", "for ( int i : int Hash Table ) {", "slot Usage Count [ i ] ++ ; }", "report . append ( STR_ + num Entries + STR_ ) ;", "report . append ( STR_ + ( num Entries / ( NUM_ * table . table Size ) + STR_ ) ) ;", "float weighted Avg = NUM_ ;", "int num Non Empty = NUM_ ;", "report . append ( STR_ ) ;", "for ( int j = NUM_ ; j <= max ; j ++ ) {", "if ( slot Usage Count [ j ] != NUM_ ) {", "report . append ( j + STR_ + slot Usage Count [ j ] + STR_ ) ;", "if ( j != NUM_ ) {", "weighted Avg += slot Usage Count [ j ] * j ;", "num Non Empty += slot Usage Count [ j ] ; } } }", "weighted Avg /= num Non Empty ;", "report . append ( STR_ + min Collisions ( ) + STR_ + max + STR_ + weighted Avg ) ;", "return report . to String ( ) ; }"]}
{"ids": "11689", "code": ["public boolean zip ( String zip Location , String to Be Zipped Name ) {", "boolean ret = false ;", "if ( verbose ) Debug . put ( STR_ ) ;", "File to Be Zipped = new File ( to Be Zipped Name ) ;", "if ( to Be Zipped . exists ( ) ) {", "try {", "File Utils . save Zip File ( zip Location , to Be Zipped ) ;", "ret = true ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }", "return ret ; }"]}
{"ids": "31524", "code": ["private Hash Map < Integer , Boolean > generate Expanded State Map ( ) {", "Hash Map < Integer , Boolean > parent List Item Hash Map = new Hash Map < > ( ) ;", "int child Count = NUM_ ;", "Object list Item ;", "Parent Wrapper parent Wrapper ;", "int list Item Count = m Item List . size ( ) ;", "for ( int i = NUM_ ; i < list Item Count ; i ++ ) {", "if ( m Item List . get ( i ) != null ) {", "list Item = get List Item ( i ) ;", "if ( list Item instanceof Parent Wrapper ) {", "parent Wrapper = ( Parent Wrapper ) list Item ;", "parent List Item Hash Map . put ( i - child Count , parent Wrapper . is Expanded ( ) ) ; }", "else {", "child Count ++ ; } } }", "return parent List Item Hash Map ; }"]}
{"ids": "64799", "code": ["public void add Audio Packet Listener ( Listener < Audio Packet > listener ) {", "m Audio Packet Broadcaster . add Listener ( listener ) ; }"]}
{"ids": "33444", "code": ["public Java Environment ( File java Path ) {", "Objects . require Non Null ( java Path ) ;", "this . java Path = java Path ; }"]}
{"ids": "81932", "code": ["void add Callback ( JS Object source , String method , JS Function callback , boolean async ) {", "String key = source . to JS Pointer ( ) + STR_ + method ;", "callbacks . put ( key , callback ) ;", "String id = JS Object . ID KEY ;", "String self = source . to JS Pointer ( ) ;", "String js = self + STR_ + method + STR_ + STR_ + self + STR_ + method + STR_ + STR_ + STR_ + STR_ + STR_ + id + STR_ + STR_ + js Lookup Table + STR_ + js Lookup Table + STR_ + id + STR_ + js Lookup Table + STR_ + js Lookup Table + STR_ + id + STR_ + STR_ + STR_ + js Lookup Table + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ;", "exec ( js , async ) ; }"]}
{"ids": "73938", "code": ["public void remove All Blocks From Section ( ) {", "for ( int i = m Block Entries . size ( ) ; i > NUM_ ; i -- ) {", "Block b = m Block Entries . get ( i - NUM_ ) ;", "if ( b != null ) {", "b . remove Property Change Listener ( m Block Listeners . get ( i - NUM_ ) ) ; }", "m Block Listeners . remove ( i - NUM_ ) ;", "m Block Entries . remove ( i - NUM_ ) ; }", "for ( int i = m Forward Entry Points . size ( ) ; i > NUM_ ; i -- ) {", "m Forward Entry Points . remove ( i - NUM_ ) ; }", "for ( int i = m Reverse Entry Points . size ( ) ; i > NUM_ ; i -- ) {", "m Reverse Entry Points . remove ( i - NUM_ ) ; }", "initialization Needed = false ; }"]}
{"ids": "36972", "code": ["private static boolean is Operator Variable Access ( final I Navi Operand Tree Node node ) {", "final List < I Navi Operand Tree Node > children = node . get Children ( ) ;", "if ( children . size ( ) == NUM_ ) {", "final I Navi Operand Tree Node child 0 = children . get ( NUM_ ) ;", "final I Navi Operand Tree Node child 1 = children . get ( NUM_ ) ;", "return is Variable ( child 0 ) ^ is Variable ( child 1 ) ; }", "else {", "return false ; } }"]}
{"ids": "12949", "code": ["public void load ( Data Input raf In ) throws IO Exception , Mary Configuration Exception {", "int num Idx = raf In . read Int ( ) ;", "idx Interval = raf In . read Int ( ) ;", "if ( idx Interval <= NUM_ ) {", "throw new Mary Configuration Exception ( STR_ ) ; }", "byte Ptrs = new long [ num Idx ] ;", "time Ptrs = new long [ num Idx ] ;", "int num Bytes To Read = NUM_ * num Idx + NUM_ ;", "byte [ ] data = new byte [ num Bytes To Read ] ;", "raf In . read Fully ( data ) ;", "Data Input buf In = new Data Input Stream ( new Byte Array Input Stream ( data ) ) ;", "for ( int i = NUM_ ; i < num Idx ; i ++ ) {", "byte Ptrs [ i ] = buf In . read Long ( ) ;", "time Ptrs [ i ] = buf In . read Long ( ) ;", "if ( i > NUM_ ) {", "if ( byte Ptrs [ i ] < byte Ptrs [ i - NUM_ ] || time Ptrs [ i ] < time Ptrs [ i - NUM_ ] ) {", "throw new Mary Configuration Exception ( STR_ ) ; } } }", "buf In . read Long ( ) ;", "buf In . read Long ( ) ; }"]}
{"ids": "10846", "code": ["public void signoff ( String unique ID ) {", "Debug . message ( STR_ , STR_ + unique ID + STR_ ) ;", "caches . remove ( unique ID ) ;", "view Attribute Lists . remove ( unique ID ) ;", "timestamps . remove ( unique ID ) ; }"]}
{"ids": "21878", "code": ["private String create Non CG Srdf Pair Steps On Empty Group ( List < Volume Descriptor > source Descriptors , List < Volume Descriptor > target Descriptors , Remote Director Group group , Map < URI , Volume > uri Volume Map , String wait For , Workflow workflow ) {", "Storage System system = db Client . query Object ( Storage System . class , group . get Source Storage System Uri ( ) ) ;", "URI vpool Change Uri = get Virtual Pool Change Volume ( source Descriptors ) ;", "log . info ( STR_ , vpool Change Uri ) ;", "List < URI > source UR Is = Volume Descriptor . get Volume UR Is ( source Descriptors ) ;", "List < URI > target UR Is = new Array List < > ( ) ;", "for ( URI source URI : source UR Is ) {", "Volume source = uri Volume Map . get ( source URI ) ;", "String Set srdf Targets = source . get Srdf Targets ( ) ;", "for ( String target Str : srdf Targets ) {", "URI target URI = URI . create ( target Str ) ;", "target UR Is . add ( target URI ) ; } }", "Method create List Method = create List Replicas Method ( system . get Id ( ) , source UR Is , target UR Is , vpool Change Uri , true ) ;", "Method rollback Method = rollback SRDF Links Method ( system . get Id ( ) , source UR Is , target UR Is , false ) ;", "String step Id = workflow . create Step ( CREATE SRDF ACTIVE VOLUME PAIR STEP GROUP , CREATE SRDF ACTIVE VOLUME PAIR STEP DESC , wait For , system . get Id ( ) , system . get System Type ( ) , get Class ( ) , create List Method , rollback Method , null ) ;", "return step Id ; }"]}
{"ids": "82964", "code": ["public static Long downsampler Timestamp ( Long millitimestamp , long window Size ) {", "return millitimestamp - ( millitimestamp % window Size ) ; }"]}
{"ids": "84993", "code": ["public I Status run ( I Progress Monitor monitor ) throws Invocation Target Exception {", "Zip File zip File = null ;", "File Output Stream fos = null ;", "Buffered Output Stream dest = null ;", "Buffered Input Stream is = null ;", "job Status = Status . OK STATUS ;", "try {", "zip File = new Zip File ( archive ) ;", "monitor . begin Task ( STR_ + archive . get Name ( ) , zip File . size ( ) ) ;", "Enumeration < ? extends Zip Entry > entries = zip File . entries ( ) ;", "while ( entries . has More Elements ( ) ) {", "Zip Entry zip Entry = entries . next Element ( ) ;", "String current Entry = zip Entry . get Name ( ) ;", "File dest File = new File ( target Dir , current Entry ) ;", "File destination Parent = dest File . get Parent File ( ) ;", "if ( ! zip Entry . is Directory ( ) ) {", "destination Parent . mkdirs ( ) ;", "is = new Buffered Input Stream ( zip File . get Input Stream ( zip Entry ) ) ;", "int num Bytes Read ;", "byte bytes [ ] = new byte [ BUFSIZE ] ;", "fos = new File Output Stream ( dest File ) ;", "dest = new Buffered Output Stream ( fos , BUFSIZE ) ;", "while ( ( num Bytes Read = is . read ( bytes , NUM_ , BUFSIZE ) ) != - NUM_ ) {", "dest . write ( bytes , NUM_ , num Bytes Read ) ; }", "dest . flush ( ) ; }", "else {", "dest File . mkdirs ( ) ; }", "monitor . worked ( NUM_ ) ;", "if ( monitor . is Canceled ( ) ) {", "job Status = Status . CANCEL STATUS ;", "break ; } }", "if ( ! monitor . is Canceled ( ) ) {", "job Status = Status . OK STATUS ; } }", "catch ( Zip Exception ze ) {", "String errormsg = error Message ( STR_ ) ;", "job Status = new Status ( Status . ERROR , Core Plugin . PLUGIN ID , errormsg ) ;", "Core Plugin Log . log Error ( ze , errormsg ) ; }", "catch ( IO Exception ioe ) {", "String errormsg = error Message ( ) ;", "job Status = new Status ( Status . ERROR , Core Plugin . PLUGIN ID , errormsg ) ;", "Core Plugin Log . log Error ( ioe , errormsg ) ; }", "finally {", "try {", "if ( zip File != null ) {", "zip File . close ( ) ; }", "if ( is != null ) {", "is . close ( ) ; }", "if ( dest != null ) {", "dest . close ( ) ; } }", "catch ( IO Exception ioe ) {", "String errormsg = error Message ( ) ;", "job Status = new Status ( Status . ERROR , Core Plugin . PLUGIN ID , errormsg ) ;", "Core Plugin Log . log Error ( ioe , errormsg ) ; } }", "return job Status ; }"]}
{"ids": "61748", "code": ["public int read ( String table , String key , Set < String > fields , Hash Map < String , Byte Iterator > result ) {", "long st = System . nano Time ( ) ;", "int res = db . read ( table , key , fields , result ) ;", "long en = System . nano Time ( ) ;", "measurements . measure ( STR_ , ( int ) ( ( en - st ) / NUM_ ) ) ;", "measurements . report Return Code ( STR_ , res ) ;", "return res ; }"]}
{"ids": "5402", "code": ["public boolean has Next ( ) {", "if ( deal > NUM_ ) {", "sc . close ( ) ; }", "return ( deal <= NUM_ ) ; }"]}
{"ids": "31857", "code": ["private void filter Node Map ( Concurrent Map < String , Collection < Cluster Node > > map , final Cluster Node excl Node ) {", "for ( String cache Name : registered Caches . key Set ( ) ) {", "String masked Name = mask Null ( cache Name ) ;", "while ( true ) {", "Collection < Cluster Node > old Nodes = map . get ( masked Name ) ;", "if ( old Nodes == null || old Nodes . is Empty ( ) ) break ;", "Collection < Cluster Node > new Nodes = new Array List < > ( old Nodes ) ;", "if ( ! new Nodes . remove ( excl Node ) ) break ;", "if ( map . replace ( masked Name , old Nodes , new Nodes ) ) break ; } } }"]}
{"ids": "84613", "code": ["private static void adjust Abs ( double [ ] array , int lower , int upper ) {", "int j , k ;", "double temp ;", "j = lower ;", "k = lower * NUM_ ;", "while ( k <= upper ) {", "if ( ( k < upper ) && ( Math . abs ( array [ k - NUM_ ] ) < Math . abs ( array [ k ] ) ) ) {", "k += NUM_ ; }", "if ( Math . abs ( array [ j - NUM_ ] ) < Math . abs ( array [ k - NUM_ ] ) ) {", "temp = array [ j - NUM_ ] ;", "array [ j - NUM_ ] = array [ k - NUM_ ] ;", "array [ k - NUM_ ] = temp ; }", "j = k ;", "k *= NUM_ ; } }"]}
{"ids": "19629", "code": ["public synchronized I Audio Processor remove ( int index ) {", "I Audio Processor processor = processors . remove ( index ) ;", "build Final Processor ( ) ;", "return processor ; }"]}
{"ids": "12157", "code": ["Linked List < Trie Node < T > > make Suffix Chain ( Trie Node < T > root , String suffix , T value ) {", "Linked List < Trie Node < T > > result = new Linked List < > ( ) ;", "String root Prefix = root . get Prefix ( ) ;", "for ( int i = NUM_ , suffix Size = suffix . length ( ) ; i <= suffix Size ; i ++ ) {", "String new Prefix = root Prefix + suffix . substring ( NUM_ , i ) ;", "Trie Node < T > new Node = Trie Node . make Node ( new Prefix ) ;", "result . add ( new Node ) ;", "root . add Child ( new Node ) ;", "root = new Node ; }", "root . set Value ( value ) ;", "return result ; }"]}
{"ids": "4198", "code": ["private static By by From Locator ( String locator ) {", "if ( locator . starts With ( STR_ ) ) {", "return By . xpath ( locator ) ; }", "if ( locator . starts With ( STR_ ) ) {", "return By . id ( locator . replace First ( STR_ , STR_ ) ) ; }", "if ( locator . starts With ( STR_ ) ) {", "return By . css Selector ( locator . replace First ( STR_ , STR_ ) ) ; }", "if ( locator . starts With ( STR_ ) ) {", "return By . xpath ( locator . replace First ( STR_ , STR_ ) ) ; }", "if ( locator . starts With ( STR_ ) ) {", "return By . name ( locator . replace First ( STR_ , STR_ ) ) ; }", "if ( locator . starts With ( STR_ ) ) {", "return By . link Text ( locator . replace First ( STR_ , STR_ ) ) ; }", "if ( locator . starts With ( STR_ ) ) {", "return By . partial Link Text ( locator . replace First ( STR_ , STR_ ) ) ; }", "throw new Illegal Argument Exception ( STR_ + locator ) ; }"]}
{"ids": "36498", "code": ["private static void task Started ( Progress Thread task ) {", "for ( Progress Thread State Listener l : listener . get Listeners ( Progress Thread State Listener . class ) ) {", "l . progress Thread Started ( task ) ; } }"]}
{"ids": "13022", "code": ["public static final void is Comment WF ( DOM Error Handler error Handler , DOM Error Impl error , DOM Locator Impl locator , String datavalue , boolean is XML 11 Version ) {", "if ( datavalue == null || ( datavalue . length ( ) == NUM_ ) ) {", "return ; }", "char [ ] dataarray = datavalue . to Char Array ( ) ;", "int datalength = dataarray . length ;", "if ( is XML 11 Version ) {", "int i = NUM_ ;", "while ( i < datalength ) {", "char c = dataarray [ i ++ ] ;", "if ( XML 11 Char . is XML 11 Invalid ( c ) ) {", "if ( XML Char . is High Surrogate ( c ) && i < datalength ) {", "char c 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( c 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( c , c 2 ) ) ) {", "continue ; } }", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , new Object [ ] { Integer . to String ( dataarray [ i - NUM_ ] , NUM_ ) } ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; }", "else if ( c == STR_ && i < datalength && dataarray [ i ] == STR_ ) {", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , null ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; } } }", "else {", "int i = NUM_ ;", "while ( i < datalength ) {", "char c = dataarray [ i ++ ] ;", "if ( XML Char . is Invalid ( c ) ) {", "if ( XML Char . is High Surrogate ( c ) && i < datalength ) {", "char c 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( c 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( c , c 2 ) ) ) {", "continue ; } }", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , new Object [ ] { Integer . to String ( dataarray [ i - NUM_ ] , NUM_ ) } ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; }", "else if ( c == STR_ && i < datalength && dataarray [ i ] == STR_ ) {", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , null ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; } } } }"]}
{"ids": "53805", "code": ["private void throw Exception If Destroyed ( String method ) throws Deepstream Record Destroyed Exception {", "if ( this . is Destroyed ) {", "throw new Deepstream Record Destroyed Exception ( method ) ; } }"]}
{"ids": "72875", "code": ["public void upload ( final Input Stream in , String artifact , String version , String file Name , Properties props ) throws IO Exception {", "props . put ( FILE NAME PROPERTY , file Name ) ;", "props . put ( VERSION PROPERTY , version ) ;", "props . put ( ARTIFACT PROPERTY , artifact ) ;", "store Properties ( artifact , version , props ) ;", "try ( Output Stream out = new Output Stream ( get Artifact ( artifact , version , file Name ) ) ) {", "IO Utils . copy Large ( in , out ) ; }", "finally {", "in . close ( ) ; } }"]}
{"ids": "20881", "code": ["public void load ( ) throws IO Exception {", "if ( magic Number == NUM_ ) {", "try ( Input Reader Little Endian ins = new Input Reader Little Endian ( new File Input Stream Adapter ( file Name ) ) ) {", "magic Number = ins . read Long ( ) ;", "if ( magic Number != MAGIC NUMBER ) throw new IO Exception ( STR_ ) ;", "version = ins . read Long ( ) ;", "if ( version > DAA VERSION ) throw new IO Exception ( STR_ ) ;", "diamond Build = ins . read Long ( ) ;", "db Seqs = ins . read Long ( ) ;", "db Seqs Used = ins . read Long ( ) ;", "db Letters = ins . read Long ( ) ;", "flags = ins . read Long ( ) ;", "query Records = ins . read Long ( ) ;", "mode Rank = ins . read Int ( ) ;", "gap Open = ins . read Int ( ) ;", "gap Extend = ins . read Int ( ) ;", "reward = ins . read Int ( ) ;", "penalty = ins . read Int ( ) ;", "reserved 1 = ins . read Int ( ) ;", "reserved 2 = ins . read Int ( ) ;", "reserved 3 = ins . read Int ( ) ;", "k = ins . read Double ( ) ;", "lambda = ins . read Double ( ) ;", "reserved 4 = ins . read Double ( ) ;", "reserved 5 = ins . read Double ( ) ;", "for ( int i = NUM_ ; i < score Matrix . length ; i ++ ) {", "score Matrix [ i ] = ( byte ) ins . read ( ) ; }", "score Matrix Name = Basic . to String ( score Matrix ) ;", "for ( int i = NUM_ ; i < block Size . length ; i ++ ) block Size [ i ] = ins . read Long ( ) ;", "if ( block Size [ NUM_ ] == NUM_ ) throw new IO Exception ( STR_ ) ;", "for ( int i = NUM_ ; i < block Type Rank . length ; i ++ ) {", "block Type Rank [ i ] = ( byte ) ins . read ( ) ;", "switch ( Block Type . value ( block Type Rank [ i ] ) ) {", "case ref names :", "if ( ref Names Block Index != - NUM_ ) throw new IO Exception ( STR_ ) ;", "ref Names Block Index = i ;", "break ;", "case ref lengths :", "if ( ref Lengths Block Index != - NUM_ ) throw new IO Exception ( STR_ ) ;", "ref Lengths Block Index = i ;", "break ;", "case alignments :", "if ( alignments Block Index != - NUM_ ) throw new IO Exception ( STR_ ) ;", "alignments Block Index = i ;", "break ; } }", "if ( ref Names Block Index == - NUM_ ) throw new IO Exception ( STR_ ) ;", "if ( ref Lengths Block Index == - NUM_ ) throw new IO Exception ( STR_ ) ;", "if ( alignments Block Index == - NUM_ ) throw new IO Exception ( STR_ ) ;", "if ( ref Lengths Block Index < ref Names Block Index ) throw new IO Exception ( STR_ ) ;", "header Size = ins . get Position ( ) ;", "ln K = Math . log ( k ) ; } } }"]}
{"ids": "76696", "code": ["private final void count All ( ) throws IO Exception {", "Multi Doc Values . Ordinal Map ordinal Map ;", "if ( dv instanceof Multi Doc Values . Multi Sorted Set Doc Values ) {", "ordinal Map = ( ( Multi Sorted Set Doc Values ) dv ) . mapping ; }", "else {", "ordinal Map = null ; }", "Index Reader orig Reader = state . get Orig Reader ( ) ;", "for ( Leaf Reader Context context : orig Reader . leaves ( ) ) {", "Leaf Reader reader = context . reader ( ) ;", "Sorted Set Doc Values seg Values = reader . get Sorted Set Doc Values ( field ) ;", "if ( seg Values == null ) {", "continue ; }", "Bits live Docs = reader . get Live Docs ( ) ;", "if ( ordinal Map != null ) {", "final Long Values ord Map = ordinal Map . get Global Ords ( context . ord ) ;", "int num Seg Ords = ( int ) seg Values . get Value Count ( ) ;", "final int [ ] seg Counts = new int [ num Seg Ords ] ;", "int doc ID ;", "while ( ( doc ID = seg Values . next Doc ( ) ) != Doc Id Set Iterator . NO MORE DOCS ) {", "if ( live Docs == null || live Docs . get ( doc ID ) ) {", "int term = ( int ) seg Values . next Ord ( ) ;", "while ( term != Sorted Set Doc Values . NO MORE ORDS ) {", "seg Counts [ term ] ++ ;", "term = ( int ) seg Values . next Ord ( ) ; } } }", "for ( int ord = NUM_ ; ord < num Seg Ords ; ord ++ ) {", "int count = seg Counts [ ord ] ;", "if ( count != NUM_ ) {", "counts [ ( int ) ord Map . get ( ord ) ] += count ; } } }", "else {", "int doc ID ;", "while ( ( doc ID = seg Values . next Doc ( ) ) != Doc Id Set Iterator . NO MORE DOCS ) {", "if ( live Docs == null || live Docs . get ( doc ID ) ) {", "int term = ( int ) seg Values . next Ord ( ) ;", "while ( term != Sorted Set Doc Values . NO MORE ORDS ) {", "counts [ term ] ++ ;", "term = ( int ) seg Values . next Ord ( ) ; } } } } } }"]}
{"ids": "14081", "code": ["public void add To Parent ( Element header E ) throws Exception {", "Document doc = header E . get Owner Document ( ) ;", "Element security E = doc . create Element NS ( wsse NS , WSSE Constants . TAG WSSE + STR_ + WSSE Constants . TAG SECURITYT ) ;", "security E . set Attribute NS ( SOAP Binding Constants . NS XML , WSSE Constants . TAG XML WSSE , wsse NS ) ;", "header E . append Child ( security E ) ;", "Document binary Token D = XML Utils . to DOM Document ( to String ( ) , debug ) ;", "Element binary Token E = binary Token D . get Document Element ( ) ;", "security E . append Child ( doc . import Node ( binary Token E , true ) ) ; }"]}
{"ids": "69005", "code": ["public void update ( ) {", "if ( amplitude > NUM_ ) {", "long elapsed = System . current Time Millis ( ) - timestamp ;", "double delta = amplitude * Math . exp ( - elapsed / time Constant ) ;", "if ( Math . abs ( delta ) > NUM_ ) {", "viewpoint Node . drag ( last Dx * delta , last Dy * delta ) ; }", "else {", "amplitude = NUM_ ;", "update Look At ( ) ; } } }"]}
{"ids": "61918", "code": ["@ Override public Assignment sample ( ) {", "if ( ! samples . is Empty ( ) ) {", "int selection = sampler . next Int ( samples . size ( ) ) ;", "Assignment selected = samples . get ( selection ) ;", "return selected ; }", "else {", "log . warning ( STR_ ) ;", "return new Assignment ( ) ; } }"]}
{"ids": "29659", "code": ["@ Sneaky Throws public static X 509 Certificate read Certificate ( Input Stream is ) {", "return ( X 509 Certificate ) CERT FACTORY . generate Certificate ( is ) ; }"]}
{"ids": "83478", "code": ["public Guacamole HTTP Tunnel Map ( ) {", "executor . schedule At Fixed Rate ( new Tunnel Timeout Task ( TUNNEL TIMEOUT * NUM_ ) , TUNNEL TIMEOUT , TUNNEL TIMEOUT , Time Unit . SECONDS ) ; }"]}
{"ids": "54009", "code": ["default B with ( String key , Class < ? > value ) {", "return with ( key , value != null ? value . get Name ( ) : null ) ; }"]}
{"ids": "19746", "code": ["private void rename ( Table table ) {", "if ( rename Definitions != null ) {", "for ( Column col : table . get All Columns ( ) ) {", "String new Col Name = rename Definitions . get New Column Name ( table . get Schema ( ) , table . get Name ( ) , col . get Name ( ) ) ;", "if ( new Col Name != null ) col . set Name ( new Col Name ) ; }", "String new Table Name = rename Definitions . get New Table Name ( table . get Schema ( ) , table . get Name ( ) ) ;", "String new Schema Name = rename Definitions . get New Schema Name ( table . get Schema ( ) , table . get Name ( ) ) ;", "if ( new Table Name != null ) table . set Table ( new Table Name ) ;", "if ( new Schema Name != null ) table . set Schema ( new Schema Name ) ; } }"]}
{"ids": "80934", "code": ["public synchronized boolean put ( long fp ) {", "int index = ( int ) ( fp & this . mask ) ;", "long [ ] list = this . table [ index ] ;", "if ( list != null ) {", "int listlen = list . length ;", "for ( int i = NUM_ ; i < listlen ; i ++ ) {", "if ( list [ i ] == fp ) return true ; } }", "if ( count >= threshold ) {", "rehash ( ) ;", "index = ( int ) ( fp & this . mask ) ;", "list = this . table [ index ] ; }", "int len = ( list == null ? NUM_ : list . length ) ;", "long [ ] new List = new long [ len + NUM_ ] ;", "if ( list != null ) System . arraycopy ( list , NUM_ , new List , NUM_ , len ) ;", "new List [ len ] = fp ;", "this . table [ index ] = new List ;", "this . count ++ ;", "return false ; }"]}
{"ids": "73281", "code": ["public void apply Layout ( ) {", "layout . set Initial Location ( get Position ( ) ) ;", "layout . layout Neurons ( get Neuron List ( ) ) ; }"]}
{"ids": "34020", "code": ["float layer Size ( int p 76490 1 ) {", "if ( ( float ) p 76490 1 < ( float ) this . height Limit * NUM_ ) {", "return - NUM_ ; }", "else {", "float f = ( float ) this . height Limit / NUM_ ;", "float f 1 = f - ( float ) p 76490 1 ;", "float f 2 = Math Helper . sqrt float ( f * f - f 1 * f 1 ) ;", "if ( f 1 == NUM_ ) {", "f 2 = f ; }", "else if ( Math . abs ( f 1 ) >= f ) {", "return NUM_ ; }", "return f 2 * NUM_ ; } }"]}
{"ids": "46297", "code": ["public static Method find Static Method ( Class < ? > type , String name , Class < ? > ... args ) throws No Such Method Exception {", "Method method = find Method ( type , name , args ) ;", "if ( ! Modifier . is Static ( method . get Modifiers ( ) ) ) {", "throw new No Such Method Exception ( STR_ + name + STR_ ) ; }", "return method ; }"]}
{"ids": "4519", "code": ["private void fetch Search Service Cards From Server ( String keyword , String category Id ) {", "final Map < String , String > params = new Hash Map < String , String > ( NUM_ ) ;", "params . put ( Http Constants . LATITUDE , Shared Preference Helper . get String ( R . string . pref latitude ) ) ;", "params . put ( Http Constants . LONGITUDE , Shared Preference Helper . get String ( R . string . pref longitude ) ) ;", "params . put ( Http Constants . TYPE , Http Constants . Search Type . SERVICE CARD ) ;", "params . put ( Http Constants . GROUP ID , category Id ) ;", "params . put ( Http Constants . PER , STR_ ) ;", "params . put ( Http Constants . RADIUS , STR_ ) ;", "params . put ( Http Constants . TITLE , keyword ) ;", "Retro Callback retro Callback ;", "retro Callback = new Retro Callback ( this ) ;", "retro Callback . set Request Id ( Http Constants . Api Response Codes . SEARCH SERVICES ) ;", "retro Callback List . add ( retro Callback ) ;", "params . put ( Http Constants . PAGE , STR_ ) ;", "m Yelo Api . get Service Cards ( params , retro Callback ) ;", "m Swipe Refresh Layout . set Refreshing ( true ) ; }"]}
{"ids": "7036", "code": ["public void add Phonenumber ( String a Phonenumber ) {", "if ( m Phone Numbers . index Of ( a Phonenumber ) < NUM_ ) {", "m Phone Numbers . add ( a Phonenumber ) ; } }"]}
{"ids": "47868", "code": ["boolean compare Methods ( Method a , Method b ) {", "if ( ( a == null ) != ( b == null ) ) {", "return false ; }", "if ( a != null && b != null ) {", "if ( ! a . equals ( b ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "46066", "code": ["Marker Segment find Marker Segment ( int tag ) {", "Iterator iter = marker Sequence . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Marker Segment seg = ( Marker Segment ) iter . next ( ) ;", "if ( seg . tag == tag ) {", "return seg ; } }", "return null ; }"]}
{"ids": "35567", "code": ["private static Reader open Input ( String from ) {", "try {", "return Cli Utils . reader ( from ) ; }", "catch ( IO Exception e ) {", "log . error ( STR_ , e ) ;", "System . exit ( NUM_ ) ;", "return null ; } }"]}
{"ids": "64949", "code": ["public Publisher Concat Array < T > concat Additional Source First ( Publisher < ? extends T > source ) {", "int n = array . length ;", "@ Suppress Warnings ( STR_ ) Publisher < ? extends T > [ ] new Array = new Publisher [ n + NUM_ ] ;", "System . arraycopy ( array , NUM_ , new Array , NUM_ , n ) ;", "new Array [ NUM_ ] = source ;", "return new Publisher Concat Array < > ( delay Error , new Array ) ; }"]}
{"ids": "89", "code": ["protected void do Publish ( String tenant Id , List < T > items , String subscriber , int retry Count , long delay ) throws Exception {", "String data = mapper . write Value As String ( items ) ;", "Text Message tm = session . create Text Message ( data ) ;", "if ( tenant Id != null ) {", "tm . set String Property ( STR_ , tenant Id ) ; }", "if ( subscriber != null ) {", "tm . set String Property ( STR_ , subscriber ) ; }", "tm . set Int Property ( STR_ , retry Count ) ;", "if ( delay > NUM_ ) {", "tm . set Long Property ( STR_ , System . current Time Millis ( ) + delay ) ; }", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( STR_ + tm ) ; }", "producer . send ( tm ) ; }"]}
{"ids": "4689", "code": ["protected void check Valid ( ) throws URI Exception {", "if ( ! ( equals ( scheme , DEFAULT SCHEME ) || scheme == null ) ) {", "throw new URI Exception ( URI Exception . PARSING , STR_ ) ; } }"]}
{"ids": "4377", "code": ["@ Override public List < Period > generate Periods ( Date Time Unit date Time Unit ) {", "Calendar cal = get Calendar ( ) ;", "date Time Unit . set Month ( NUM_ ) ;", "date Time Unit . set Day ( NUM_ ) ;", "List < Period > periods = Lists . new Array List ( ) ;", "int year = date Time Unit . get Year ( ) ;", "while ( date Time Unit . get Year ( ) == year ) {", "periods . add ( create Period ( date Time Unit , cal ) ) ;", "date Time Unit = cal . plus Months ( date Time Unit , NUM_ ) ; }", "return periods ; }"]}
{"ids": "49820", "code": ["public static Secret Key create AES Key ( ) {", "try {", "final Key Generator kgen = Key Generator . get Instance ( STR_ ) ;", "final int key Size = NUM_ ;", "kgen . init ( key Size ) ;", "return kgen . generate Key ( ) ; }", "catch ( final No Such Algorithm Exception e ) {", "e . print Stack Trace ( ) ; }", "return null ; }"]}
{"ids": "65546", "code": ["@ Override public void value Change ( Value Change Event e ) {", "String name = e . get Property Name ( ) ;", "Object value = e . get New Value ( ) ;", "log . config ( name + STR_ + value ) ;", "if ( value == null ) return ; }"]}
{"ids": "8617", "code": ["@ Request Mapping ( value = STR_ , method = POST , produces = APPLICATION JSON VALUE ) public Response Entity < Page Response < User DTO > > find All ( @ Request Body Page Request By Example < User DTO > prbe ) throws URI Syntax Exception {", "Page Response < User DTO > page Response = user DTO Service . find All ( prbe ) ;", "return new Response Entity < > ( page Response , new Http Headers ( ) , Http Status . OK ) ; }"]}
{"ids": "71408", "code": ["public boolean is Read Only ( boolean use Session Status ) throws SQL Exception {", "if ( use Session Status && ! this . is Closed && version Meets Minimum ( NUM_ , NUM_ , NUM_ ) && ! get Use Local Session State ( ) && get Read Only Propagates To Server ( ) ) {", "java . sql . Statement stmt = null ;", "java . sql . Result Set rs = null ;", "try {", "try {", "stmt = get Metadata Safe Statement ( ) ;", "rs = stmt . execute Query ( STR_ ) ;", "if ( rs . next ( ) ) {", "return rs . get Int ( NUM_ ) != NUM_ ; } }", "catch ( SQL Exception ex 1 ) {", "if ( ex 1 . get Error Code ( ) != Mysql Error Numbers . ER MUST CHANGE PASSWORD || get Disconnect On Expired Passwords ( ) ) {", "throw SQL Error . create SQL Exception ( STR_ , SQL Error . SQL STATE GENERAL ERROR , ex 1 , get Exception Interceptor ( ) ) ; } } }", "finally {", "if ( rs != null ) {", "try {", "rs . close ( ) ; }", "catch ( Exception ex ) { }", "rs = null ; }", "if ( stmt != null ) {", "try {", "stmt . close ( ) ; }", "catch ( Exception ex ) { }", "stmt = null ; } } }", "return this . read Only ; }"]}
{"ids": "68390", "code": ["private static Downscale Quality add Constant ( String type ) {", "init ( ) ;", "if ( const List . contains Key ( type ) ) {", "throw new Runtime Exception ( STR_ + type + STR_ ) ; }", "Downscale Quality q = new Downscale Quality ( type ) ;", "const List . put ( type , q ) ;", "return q ; }"]}
{"ids": "11043", "code": ["public void bail ( String message , boolean print Usage Statement ) {", "Debug . output ( message ) ;", "if ( print Usage Statement ) print Usage ( ) ;", "System . exit ( NUM_ ) ; }"]}
{"ids": "67887", "code": ["private void assert Timestamps Equal With Epsilon ( long expected , long actual , int epsilon , String desc ) {", "assert True ( STR_ + desc + STR_ + epsilon + STR_ + expected + STR_ + actual , Math . abs ( actual - expected ) < epsilon ) ; }"]}
{"ids": "79759", "code": ["public Spider Sitemap XML Parser ( Spider Param params ) {", "super ( ) ;", "if ( params == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . params = params ; }"]}
{"ids": "22794", "code": ["public void add Hop ( int id ) {", "if ( entities == null ) {", "return ; }", "hops Number ++ ;", "entities . add ( Integer . value Of ( id ) ) ; }"]}
{"ids": "38140", "code": ["protected boolean [ ] dataset Integrity ( boolean nominal Predictor , boolean numeric Predictor , boolean string Predictor , boolean date Predictor , boolean relational Predictor , boolean multi Instance , int class Type , boolean predictor Missing , boolean class Missing ) {", "print ( STR_ ) ;", "print Attribute Summary ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type ) ;", "print ( STR_ ) ;", "int num Train = get Num Instances ( ) , num Classes = NUM_ , missing Level = NUM_ ;", "boolean [ ] result = new boolean [ NUM_ ] ;", "Instances train = null ;", "Associator associator = null ;", "try {", "train = make Test Dataset ( NUM_ , num Train , nominal Predictor ? get Num Nominal ( ) : NUM_ , numeric Predictor ? get Num Numeric ( ) : NUM_ , string Predictor ? get Num String ( ) : NUM_ , date Predictor ? get Num Date ( ) : NUM_ , relational Predictor ? get Num Relational ( ) : NUM_ , num Classes , class Type , multi Instance ) ;", "if ( missing Level > NUM_ ) {", "add Missing ( train , missing Level , predictor Missing , class Missing ) ; }", "associator = Abstract Associator . make Copies ( get Associator ( ) , NUM_ ) [ NUM_ ] ; }", "catch ( Exception ex ) {", "throw new Error ( STR_ + ex . get Message ( ) ) ; }", "try {", "Instances train Copy = new Instances ( train ) ;", "associator . build Associations ( train Copy ) ;", "compare Datasets ( train , train Copy ) ;", "println ( STR_ ) ;", "result [ NUM_ ] = true ; }", "catch ( Exception ex ) {", "println ( STR_ ) ;", "result [ NUM_ ] = false ;", "if ( m Debug ) {", "println ( STR_ ) ;", "print ( STR_ ) ;", "println ( STR_ + ex . get Message ( ) + STR_ ) ;", "println ( STR_ ) ;", "println ( STR_ + train . to String ( ) + STR_ ) ; } }", "return result ; }"]}
{"ids": "86403", "code": ["public boolean is Empty ( ) {", "return m Event Queue . is Empty ( ) ; }"]}
{"ids": "3344", "code": ["public void read Entries ( Table Kelp table , In Segment reader , Segment Entry Callback cb ) {", "Temp Buffer t Buf = Temp Buffer . create Large ( ) ;", "byte [ ] buffer = t Buf . buffer ( ) ;", "In Store s In = reader . get Store Read ( ) ;", "byte [ ] table Key = new byte [ Table Kelp . TABLE KEY SIZE ] ;", "for ( int ptr = length ( ) - BLOCK SIZE ; ptr > NUM_ ; ptr -= BLOCK SIZE ) {", "s In . read ( get Address ( ) + ptr , buffer , NUM_ , buffer . length ) ;", "int index = NUM_ ;", "long seq = Bits Util . read Long ( buffer , index ) ;", "index += NUM_ ;", "if ( seq != get Sequence ( ) ) {", "log . warning ( L . l ( STR_ , seq , get Sequence ( ) , Long . to Hex String ( get Address ( ) + ptr ) ) ) ;", "break ; }", "System . arraycopy ( buffer , index , table Key , NUM_ , table Key . length ) ;", "index += table Key . length ;", "if ( ! Arrays . equals ( table Key , table Key ) ) {", "log . warning ( L . l ( STR_ , Hex . to Short Hex ( table Key ) , Hex . to Short Hex ( table Key ) , Long . to Hex String ( get Address ( ) + ptr ) ) ) ;", "break ; }", "int head = index ;", "while ( head < BLOCK SIZE && buffer [ head ] != NUM_ ) {", "head = read Entry ( table , buffer , head , cb , get Address ( ) ) ; }", "boolean is Cont = buffer [ head + NUM_ ] != NUM_ ;", "if ( ! is Cont ) {", "break ; } }", "t Buf . free ( ) ; }"]}
{"ids": "21892", "code": ["static int number Of Hosts ( Map < URI , List < Initiator > > net 2 Initiators Map ) {", "Set < URI > host Set = new Hash Set < URI > ( ) ;", "for ( List < Initiator > initiators : net 2 Initiators Map . values ( ) ) {", "for ( Initiator init : initiators ) {", "host Set . add ( init . get Host ( ) ) ; } }", "return host Set . size ( ) ; }"]}
{"ids": "71658", "code": ["protected Attributes Impl start Prefix Mapping ( Element element , Namespace Stack namespace Stack ) throws SAX Exception {", "Attributes Impl namespace Attributes = null ;", "Namespace element Namespace = element . get Namespace ( ) ;", "if ( ( element Namespace != null ) && ! is Ignoreable Namespace ( element Namespace , namespace Stack ) ) {", "namespace Stack . push ( element Namespace ) ;", "content Handler . start Prefix Mapping ( element Namespace . get Prefix ( ) , element Namespace . get URI ( ) ) ;", "namespace Attributes = add Namespace Attribute ( namespace Attributes , element Namespace ) ; }", "List < Namespace > declared Namespaces = element . declared Namespaces ( ) ;", "for ( Namespace namespace : declared Namespaces ) {", "if ( ! is Ignoreable Namespace ( namespace , namespace Stack ) ) {", "namespace Stack . push ( namespace ) ;", "content Handler . start Prefix Mapping ( namespace . get Prefix ( ) , namespace . get URI ( ) ) ;", "namespace Attributes = add Namespace Attribute ( namespace Attributes , namespace ) ; } }", "return namespace Attributes ; }"]}
{"ids": "20154", "code": ["private static Data Flavor [ ] convert To Array ( List < Data Flavor > data Flavour List ) {", "Data Flavor [ ] array = new Data Flavor [ data Flavour List . size ( ) ] ;", "data Flavour List . to Array ( array ) ;", "return array ; }"]}
{"ids": "1117", "code": ["public static String translate Attribute ( String attributes ) throws IO Exception {", "short [ ] flags = str Attr To Boolean Flags ( attributes ) ;", "String Builder sb = new String Builder ( ) ;", "if ( flags [ READ ONLY ] == YES ) sb . append ( STR_ ) ;", "else if ( flags [ READ ONLY ] == NO ) sb . append ( STR_ ) ;", "if ( flags [ HIDDEN ] == YES ) sb . append ( STR_ ) ;", "else if ( flags [ HIDDEN ] == NO ) sb . append ( STR_ ) ;", "if ( flags [ SYSTEM ] == YES ) sb . append ( STR_ ) ;", "else if ( flags [ SYSTEM ] == NO ) sb . append ( STR_ ) ;", "if ( flags [ ARCHIVE ] == YES ) sb . append ( STR_ ) ;", "else if ( flags [ ARCHIVE ] == NO ) sb . append ( STR_ ) ;", "return sb . to String ( ) ; }"]}
{"ids": "32197", "code": ["public static int next Index Id ( ) {", "return msg Idx . get And Increment ( ) ; }"]}
{"ids": "25563", "code": ["public static boolean check Security Infos ( String endpoint , Identity client Identity , List < Security Info > security Infos ) {", "if ( client Identity . is Secure ( ) ) {", "if ( security Infos == null || security Infos . is Empty ( ) ) {", "LOG . warn ( STR_ , endpoint ) ;", "return false ; }", "else {", "for ( Security Info security Info : security Infos ) {", "if ( check Security Info ( endpoint , client Identity , security Info ) ) {", "return true ; } }", "return false ; } }", "else if ( security Infos != null && ! security Infos . is Empty ( ) ) {", "LOG . warn ( STR_ , endpoint ) ;", "return false ; }", "return true ; }"]}
{"ids": "2333", "code": ["public static Array List < Byte String > byte Arrays To Strings ( Array List < byte [ ] > byte Arrays ) {", "if ( byte Arrays == null ) {", "return null ; }", "Array List < Byte String > byte Strings = new Array List < Byte String > ( ) ;", "for ( byte [ ] bytes : byte Arrays ) {", "byte Strings . add ( Byte String . of ( bytes ) ) ; }", "return byte Strings ; }"]}
{"ids": "63085", "code": ["void add Index ( Index Type type , List < String > column Names ) {", "Index Definition index = new Index Definition ( ) ;", "index . index Name = table Name + STR_ + indexes . size ( ) ;", "index . column Names = New . array List ( column Names ) ;", "index . type = type ;", "indexes . add ( index ) ; }"]}
{"ids": "70047", "code": ["public Builder with Key Store Key Password ( String key Store Key Password ) {", "properties . set Property ( Netty Options . SSL KEY STORE KEY PASSWORD , Assert . not Null ( key Store Key Password , STR_ ) ) ;", "return this ; }"]}
{"ids": "22965", "code": ["public Zookeeper State Machine Ensemble ( Curator Framework curator Client , String base Path ) {", "this ( curator Client , base Path , true , DEFAULT LOGSIZE ) ; }"]}
{"ids": "60397", "code": ["public static Custom Shortcut Set create Shortcut ( char ch ) {", "Character mnemonic = Character . value Of ( ch ) ;", "String shortcut = System Info . is Mac && System Info . is Java Version At Least ( STR_ ) ? STR_ + mnemonic : STR_ + mnemonic ;", "return Custom Shortcut Set . from String ( shortcut ) ; }"]}
{"ids": "82539", "code": ["public void gc ( ) {", "System . gc ( ) ; }"]}
{"ids": "32814", "code": ["private Node delete Min ( Node x ) {", "if ( x . left == null ) return x . right ;", "x . left = delete Min ( x . left ) ;", "x . size = NUM_ + size ( x . left ) + size ( x . right ) ;", "x . height = NUM_ + Math . max ( height ( x . left ) , height ( x . right ) ) ;", "return balance ( x ) ; }"]}
{"ids": "55686", "code": ["public static void reset Counters ( ) {", "errors = NUM_ ;", "warnings = NUM_ ; }"]}
{"ids": "85387", "code": ["public void write ( Ceylon Config config , File source , Output Stream out ) throws IO Exception {", "if ( source . is File ( ) ) {", "Input Stream in = null ;", "try {", "in = new File Input Stream ( source ) ;", "write ( config , in , out ) ; }", "finally {", "if ( in != null ) {", "try {", "in . close ( ) ; }", "catch ( IO Exception e ) { } } } }", "else {", "throw new File Not Found Exception ( STR_ ) ; } }"]}
{"ids": "34979", "code": ["protected Map < Target Class , List < Attribute . Type Compound > > sift ( final Iterable < Attribute . Type Compound > type Compounds ) {", "final Map < Target Class , List < Attribute . Type Compound > > target Class To Compound = new Enum Map < > ( Target Class . class ) ;", "for ( Target Class target Class : Target Class . values ( ) ) {", "target Class To Compound . put ( target Class , new Array List < Type Compound > ( ) ) ; }", "for ( final Attribute . Type Compound type Compound : type Compounds ) {", "final Target Type type Compound Target = type Compound . position . type ;", "final List < Attribute . Type Compound > dest List ;", "if ( Element Annotation Util . contains ( type Compound Target , annotated Targets ( ) ) ) {", "dest List = target Class To Compound . get ( Target Class . TARGETED ) ; }", "else if ( Element Annotation Util . contains ( type Compound Target , valid Targets ( ) ) ) {", "dest List = target Class To Compound . get ( Target Class . VALID ) ; }", "else {", "dest List = target Class To Compound . get ( Target Class . INVALID ) ; }", "dest List . add ( type Compound ) ; }", "return target Class To Compound ; }"]}
{"ids": "47700", "code": ["protected synchronized void update Location ( Point new Locn ) {", "prev = locn ;", "locn = new Locn ;", "if ( Math . abs ( locn . x - prev . x ) > hysteresis || Math . abs ( locn . y - prev . y ) > hysteresis ) {", "if ( timer . is Running ( ) ) timer . stop ( ) ; }", "else {", "if ( ! timer . is Running ( ) ) timer . start ( ) ; } }"]}
{"ids": "61950", "code": ["@ Override public int compare To ( Value o ) {", "if ( o instanceof String Val ) {", "return str . compare To ( ( ( String Val ) o ) . str ) ; }", "else {", "return NUM_ ; } }"]}
{"ids": "79906", "code": ["public void bind ( Integer Property property , int value ) {", "if ( is Achieved ( ) ) return ;", "bind ( property . greater Than Or Equal To ( value ) ) ;", "Boolean Binding bb = property . greater Than Or Equal To ( value / NUM_ ) ;", "progress Listener = null ;", "bb . add Listener ( progress Listener ) ; }"]}
{"ids": "49543", "code": ["public synchronized void write ( String log Data ) {", "if ( log Enabled ) {", "hist Data . append ( log Data ) ;", "hist Data . revalidate ( ) ;", "synchronized ( hist Data ) {", "hist Data . notify ( ) ; } } }"]}
{"ids": "36804", "code": ["public void close Connection ( ) {", "try {", "if ( m connection != null ) {", "m connection . close ( ) ; } }", "catch ( final SQL Exception exception ) {", "Navi Logger . severe ( STR_ , exception ) ; }", "m connection = null ; }"]}
{"ids": "11518", "code": ["public void remove Action Listener ( Action Listener listener ) {", "forward Projection Button . add Action Listener ( listener ) ;", "back Projection Button . add Action Listener ( listener ) ; }"]}
{"ids": "46481", "code": ["boolean is Literal ( int index ) {", "if ( is Valid Mask ( ) && index < string . length ( ) ) {", "return literal Mask . get ( index ) ; }", "return false ; }"]}
{"ids": "75949", "code": ["public Word Iterator ( ) {", "this ( Locale . get Default ( ) ) ; }"]}
{"ids": "68316", "code": ["@ Override public void close ( ) {", "if ( leaf != null ) {", "leaf . close ( ) ;", "leaf = null ; }", "cc Mgr . release Index Locks ( ) ;", "dirs May Be Updated = null ; }"]}
{"ids": "68260", "code": ["public void push File ( String local , String remote , I Sync Progress Monitor monitor ) throws Sync Exception , IO Exception , Timeout Exception {", "File f = new File ( local ) ;", "if ( ! f . exists ( ) ) {", "throw new Sync Exception ( Sync Error . NO LOCAL FILE ) ; }", "if ( f . is Directory ( ) ) {", "throw new Sync Exception ( Sync Error . LOCAL IS DIRECTORY ) ; }", "monitor . start ( ( int ) f . length ( ) ) ;", "do Push File ( local , remote , monitor ) ;", "monitor . stop ( ) ; }"]}
{"ids": "20045", "code": ["public void resize ( int size ) {", "if ( buffer != null ) {", "if ( size >= NUM_ && size < buffer . size ( ) ) {", "int old Last Index = buffer . size ( ) - NUM_ ;", "int new Last Index = size - NUM_ ;", "for ( int i = old Last Index ; i > new Last Index ; i -- ) {", "buffer . remove ( i ) ; } } }", "else {", "if ( size >= NUM_ && size < offsets . size ( ) ) {", "long offset = offsets . get ( size ) ;", "byte Cache . resize ( key , offset ) ;", "Array List < Long > new Offsets = new Array List < Long > ( size ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "new Offsets . add ( offsets . get ( i ) ) ; }", "offsets = new Offsets ; } } }"]}
{"ids": "39319", "code": ["protected void init From Dir ( String prefix , File dir ) {", "File [ ] files ;", "files = dir . list Files ( new Class File Filter ( ) ) ;", "for ( File file : files ) {", "if ( prefix == null ) {", "add ( file . get Name ( ) ) ; }", "else {", "add ( prefix + STR_ + file . get Name ( ) ) ; } }", "files = dir . list Files ( new Directory Filter ( ) ) ;", "for ( File file : files ) {", "if ( prefix == null ) {", "init From Dir ( file . get Name ( ) , file ) ; }", "else {", "init From Dir ( prefix + STR_ + file . get Name ( ) , file ) ; } } }"]}
{"ids": "44874", "code": ["public static long now ( ) {", "return System . current Time Millis ( ) ; }"]}
{"ids": "54916", "code": ["public static String collapse Newlines ( String arg Str ) {", "char last = arg Str . char At ( NUM_ ) ;", "String Buffer arg Buf = new String Buffer ( ) ;", "for ( int c Idx = NUM_ ; c Idx < arg Str . length ( ) ; c Idx ++ ) {", "char ch = arg Str . char At ( c Idx ) ;", "if ( ch != STR_ || last != STR_ ) {", "arg Buf . append ( ch ) ;", "last = ch ; } }", "return arg Buf . to String ( ) ; }"]}
{"ids": "39178", "code": ["@ Override protected String generate Javadoc ( int index ) throws Exception {", "throw new Exception ( STR_ ) ; }"]}
{"ids": "73585", "code": ["public Properties extract Properties ( Iterable < Map . Entry < String , String > > prop Src ) {", "Properties result = new Properties ( ) ;", "for ( Map . Entry < String , String > entry : prop Src ) {", "String name = entry . get Key ( ) ;", "if ( is Namespaced Property ( name ) ) {", "String val = entry . get Value ( ) ;", "result . set Property ( name , val ) ; } }", "return result ; }"]}
{"ids": "30171", "code": ["public T remove Last ( ) {", "if ( rows . size ( ) != NUM_ ) rows . remove ( rows . size ( ) - NUM_ ) ;", "return instance ( ) ; }"]}
{"ids": "82001", "code": ["public static void ensure Visible ( String component Name ) {", "if ( verbose ) {", "log ( STR_ + component Name + STR_ ) ; }", "ensure Visible ( find By Name ( component Name ) ) ; }"]}
{"ids": "16777", "code": ["public void end Representation ( ) {", "if ( ! representation Protections Set ) {", "if ( current Representation Protections != null ) {", "Collections . sort ( current Representation Protections , this ) ; }", "representation Protections = current Representation Protections ;", "representation Protections Set = true ; }", "else {", "if ( current Representation Protections == null ) {", "Assertions . check State ( representation Protections == null ) ; }", "else {", "Collections . sort ( current Representation Protections , this ) ;", "Assertions . check State ( current Representation Protections . equals ( representation Protections ) ) ; } }", "current Representation Protections = null ; }"]}
{"ids": "7563", "code": ["public Standard Pie Section Label Generator ( String label Format ) {", "this ( label Format , Number Format . get Number Instance ( ) , Number Format . get Percent Instance ( ) ) ; }"]}
{"ids": "50211", "code": ["public static Char Sequence [ ] split ( Char Sequence line , int delimiter ) {", "Char Sequence [ ] tokens 0 = split ( line , delimiter , N ) ;", "if ( tokens 0 . length < N ) {", "return tokens 0 ; }", "else {", "Char Sequence [ ] tokens 1 = split ( tokens 0 [ N - NUM_ ] , delimiter ) ;", "Char Sequence [ ] tokens 2 = new Char Sequence [ tokens 0 . length + tokens 1 . length - NUM_ ] ;", "System . arraycopy ( tokens 0 , NUM_ , tokens 2 , NUM_ , tokens 0 . length - NUM_ ) ;", "System . arraycopy ( tokens 1 , NUM_ , tokens 2 , tokens 0 . length - NUM_ , tokens 1 . length ) ;", "return tokens 2 ; } }"]}
{"ids": "6944", "code": ["public CC Timer ( Object t , String s , float seconds ) {", "target = t ;", "selector = s ;", "interval = seconds ;", "elapsed = - NUM_ ;", "try {", "Class < ? > cls = target . get Class ( ) ;", "invocation = cls . get Method ( s , Float . TYPE ) ; }", "catch ( No Such Method Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "77318", "code": ["public Tuple read ( ) throws IO Exception {", "try {", "Map fields = json Tuple Stream . next ( ) ;", "if ( fields == null ) {", "Map m = new Hash Map ( ) ;", "m . put ( STR_ , true ) ;", "return new Tuple ( m ) ; }", "else {", "String msg = ( String ) fields . get ( STR_ ) ;", "if ( msg != null ) {", "Handled Exception io Exception = new Handled Exception ( msg ) ;", "throw io Exception ; }", "if ( trace ) {", "fields . put ( STR_ , this . base Url ) ;", "if ( slice != null ) {", "fields . put ( STR_ , slice ) ; } }", "if ( field Mappings != null ) {", "fields = map Fields ( fields , field Mappings ) ; }", "return new Tuple ( fields ) ; } }", "catch ( Handled Exception e ) {", "throw new IO Exception ( STR_ + this . base Url + STR_ + e . get Message ( ) ) ; }", "catch ( Exception e ) {", "throw new IO Exception ( STR_ + this . base Url + STR_ , e ) ; } }"]}
{"ids": "36276", "code": ["private String compute ( String left , double right , boolean is Integer ) {", "if ( left == null && Double . is Na N ( right ) ) {", "return null ; }", "if ( is Integer && right == ( int ) right ) {", "return ( left == null ? STR_ : left ) + ( int ) right ; }", "else if ( Double . is Infinite ( right ) ) {", "return ( left == null ? STR_ : left ) + Tools . format Number ( right ) ; }", "else {", "return ( left == null ? STR_ : left ) + ( Double . is Na N ( right ) ? STR_ : right ) ; } }"]}
{"ids": "73176", "code": ["public void remove Property Change Listener ( final Property Change Listener listener ) {", "property Change Support . remove Property Change Listener ( listener ) ; }"]}
{"ids": "45645", "code": ["public final int [ ] hash Signature ( final int [ ] signature ) {", "int [ ] hash = new int [ stages ] ;", "int rows = signature . length / stages ;", "for ( int i = NUM_ ; i < signature . length ; i ++ ) {", "int stage = Math . min ( i / rows , stages - NUM_ ) ;", "hash [ stage ] = ( int ) ( ( hash [ stage ] + ( long ) signature [ i ] * LARGE PRIME ) % buckets ) ; }", "return hash ; }"]}
{"ids": "76403", "code": ["private void add Trigger Group Name ( String group Name ) throws Job Persistence Exception , Resource Exception {", "add Repo List Name ( group Name , TRIGGER GROUP NAMES RESOURCE PATH , STR_ ) ; }"]}
{"ids": "10706", "code": ["private synchronized void clear Temp Files ( ) {", "if ( ( temp Files != null ) && ( temp Files . size ( ) > NUM_ ) ) {", "Iterator it = temp Files . iterator ( ) ;", "File file = null ;", "while ( it . has Next ( ) ) {", "file = ( File ) it . next ( ) ;", "file . delete ( ) ; }", "temp Files . clear ( ) ; } }"]}
{"ids": "486", "code": ["private Bitmap read And Decompress Thumbnail ( File file ) {", "try {", "if ( file . length ( ) > NUM_ ) {", "File Input Stream instream = new File Input Stream ( file ) ;", "Readable Byte Channel bytechan = Channels . new Channel ( instream ) ;", "Byte Buffer buff = Byte Buffer . allocate Direct ( ( int ) file . length ( ) ) ;", "if ( buff != null ) {", "bytechan . read ( buff ) ;", "instream . close ( ) ;", "buff . rewind ( ) ;", "PDQ Image pthumb = Decompression Service . decompress Thumbnail Image ( buff ) ;", "if ( pthumb != null ) {", "Bitmap bm = Conversion Service . convert PDQ Image To Bitmap ( pthumb , false ) ;", "pthumb . close ( ) ;", "return bm ; } } } }", "catch ( IO Exception ex ) {", "ex . print Stack Trace ( ) ; }", "return null ; }"]}
{"ids": "7820", "code": ["public Rectangle 2 D shrink ( Rectangle 2 D area , Rectangle 2 D result ) {", "if ( result == null ) {", "result = new Rectangle 2 D . Double ( ) ; }", "result . set Rect ( area . get X ( ) + this . left , area . get Y ( ) + this . top , area . get Width ( ) - this . left - this . right , area . get Height ( ) - this . top - this . bottom ) ;", "return result ; }"]}
{"ids": "40498", "code": ["public static String assert JQ ( Solr Query Request req , String ... tests ) throws Exception {", "return assert JQ ( req , JSON Test Util . DEFAULT DELTA , tests ) ; }"]}
{"ids": "43646", "code": ["protected void serialize ( String filename ) {", "classifier . serialize Classifier ( filename ) ; }"]}
{"ids": "9536", "code": ["private Object process Execute ( Statement proxy , Method method , Object [ ] args ) throws Throwable {", "long start Time = log Slow Query ? System . current Time Millis ( ) : NUM_ ;", "try {", "if ( method . get Name ( ) == STR_ ) return new Proxied Result Set ( proxy , method , args ) ;", "return target Invoke ( method , args ) ; }", "finally {", "if ( log Slow Query ) log Query ( proxy , args , start Time ) ; } }"]}
{"ids": "46528", "code": ["int bounded Index Of ( String string , char search , int start , int end ) {", "int ret Value = string . index Of ( search , start ) ;", "if ( ret Value >= end ) {", "return - NUM_ ; }", "return ret Value ; }"]}
{"ids": "27156", "code": ["public int incr ( T k , int delta ) {", "Integer i = counts . get ( k ) ;", "if ( i == null ) {", "i = NUM_ ; }", "int next = i . int Value ( ) + delta ;", "if ( next < NUM_ ) {", "throw new java . lang . Arithmetic Exception ( ) ; }", "if ( next == NUM_ ) {", "counts . remove ( k ) ; }", "else {", "counts . put ( k , i + delta ) ; }", "return i ; }"]}
{"ids": "5630", "code": ["public void send ( final Osc Packet the Packet , final Tcp Client the Client ) {", "the Client . send ( the Packet . get Bytes ( ) ) ; }"]}
{"ids": "45367", "code": ["public static Map < String , Mapped Class > fill In The Gaps ( Map < String , Mapped Class > mapped Classes , Mapping Mode mode ) {", "for ( String original Name : mapped Classes . key Set ( ) ) {", "mapped Classes = fill Gap ( mapped Classes . get ( original Name ) , mapped Classes , mode ) ; }", "return mapped Classes ; }"]}
{"ids": "31140", "code": ["private void read Object ( Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "if ( name == null ) {", "if ( types != null ) {", "throw new Invalid Object Exception ( STR_ ) ; } }", "else {", "try {", "check ( ) ; }", "catch ( Runtime Exception e ) {", "rethrow ( e ) ; } }", "if ( constraints != null && constraints . is Empty ( ) ) {", "throw new Invalid Object Exception ( STR_ ) ; } }"]}
{"ids": "4298", "code": ["public static boolean between ( Date base Date , Date start Date , Date end Date ) {", "if ( start Date . equals ( end Date ) || end Date . before ( start Date ) ) {", "return false ; }", "if ( ( start Date . before ( base Date ) || start Date . equals ( base Date ) ) && ( end Date . after ( base Date ) || end Date . equals ( base Date ) ) ) {", "return true ; }", "return false ; }"]}
{"ids": "71861", "code": ["public void add Listener ( final Timeout Event Listener listener ) {", "final long timeout = listener . get Timeout ( ) ;", "if ( timeout > NUM_ ) {", "listeners . add ( listener ) ;", "synchronized ( state Lock ) {", "pending Listener Min Delay = Math . min ( pending Listener Min Delay , timeout ) ;", "state Lock . notify All ( ) ; } } }"]}
{"ids": "36508", "code": ["public static String transform Tool Tip Text ( final String description , final boolean add HTML Tags , final int line Length , final boolean escape Slashes , final boolean escape HTML ) {", "String complete Text = description . trim ( ) ;", "if ( escape HTML ) {", "complete Text = Tools . escape HTML ( complete Text ) ; }", "if ( escape Slashes ) {", "complete Text = complete Text . replace All ( STR_ , STR_ ) ; }", "String Buffer result = new String Buffer ( ) ;", "if ( add HTML Tags ) {", "result . append ( STR_ ) ; }", "complete Text = Tools . transform All Line Separators ( complete Text ) ;", "String [ ] lines = complete Text . split ( STR_ ) ;", "for ( String text : lines ) {", "boolean first = true ;", "while ( text . length ( ) > line Length ) {", "int space Index = text . index Of ( STR_ , line Length ) ;", "if ( ! first ) {", "result . append ( STR_ ) ; }", "first = false ;", "if ( space Index >= NUM_ ) {", "result . append ( text . substring ( NUM_ , space Index ) ) ;", "text = text . substring ( space Index + NUM_ ) ; }", "else {", "result . append ( text ) ;", "text = STR_ ; } }", "if ( ! first && text . length ( ) > NUM_ ) {", "result . append ( STR_ ) ; }", "result . append ( text ) ;", "result . append ( STR_ ) ; }", "if ( add HTML Tags ) {", "result . append ( STR_ ) ; }", "return result . to String ( ) ; }"]}
{"ids": "3508", "code": ["@ Override public void write ( byte [ ] buffer , int offset , int length ) {", "if ( is Closed ( ) || is Head ( ) ) {", "return ; }", "int byte Length = offset ;", "while ( true ) {", "int sublen = Math . min ( length , SIZE - byte Length ) ;", "System . arraycopy ( buffer , offset , buffer , byte Length , sublen ) ;", "offset += sublen ;", "length -= sublen ;", "byte Length += sublen ;", "if ( length <= NUM_ ) {", "break ; }", "offset = byte Length ;", "flush Byte Buffer ( ) ;", "byte Length = offset ; }", "offset = byte Length ; }"]}
{"ids": "39500", "code": ["public Client Http Request ( URL Connection connection ) throws IO Exception {", "this . connection = connection ;", "connection . set Do Output ( true ) ;", "connection . set Do Input ( true ) ;", "connection . set Request Property ( STR_ , STR_ + boundary ) ; }"]}
{"ids": "55130", "code": ["private void append Tag ( String tag Name , String value ) {", "xml . append ( STR_ ) ;", "xml . append ( tag Name ) ;", "xml . append ( STR_ ) ;", "xml . append ( value ) ;", "xml . append ( STR_ ) ;", "xml . append ( tag Name ) ;", "xml . append ( STR_ ) ; }"]}
{"ids": "34272", "code": ["@ Override public Certificate Token Validation Extra Info extra Info ( ) {", "return extra Info ; }"]}
{"ids": "67527", "code": ["public void add Top Level Contents ( Collection < Content Element > contents ) {", "top Level Contents . add All ( contents ) ; }"]}
{"ids": "8481", "code": ["public static void with Instance ( Map < String , Object > args , Closure c ) throws SQL Exception , Class Not Found Exception {", "Sql sql = null ;", "try {", "sql = new Instance ( args ) ;", "c . call ( sql ) ; }", "finally {", "if ( sql != null ) sql . close ( ) ; } }"]}
{"ids": "67020", "code": ["public void dd Solve ( Set < Node > qry Nodes ) {", "long solve time = NUM_ , prepare time = NUM_ ;", "if ( has Executed == false ) solve ( ) ;", "if ( dd Prepared == false || offline Processor == null ) {", "offline Processor = new Offline Processor ( this ) ;", "I Figure Manager . clean Cache ( ) ;", "dd Prepared = true ;", "ps . println ( ) ;", "ps . println ( STR_ ) ; }", "int init size = qry Nodes . size ( ) ;", "if ( init size == NUM_ ) {", "ps . println ( STR_ ) ;", "return ; }", "Date prepare begin = new Date ( ) ;", "offline Processor . init ( ) ;", "offline Processor . add User Def Pts ( qry Nodes ) ;", "offline Processor . run Optimizations ( ) ;", "Date prepare end = new Date ( ) ;", "prepare time += prepare end . get Time ( ) - prepare begin . get Time ( ) ;", "Date begin = new Date ( ) ;", "prepare Next Run ( ) ;", "node Generator . init Flow Graph ( this ) ;", "solve Constraints ( ) ;", "Date end = new Date ( ) ;", "solve time += end . get Time ( ) - begin . get Time ( ) ;", "ps . println ( ) ;", "ps . printf ( STR_ , ( double ) prepare time / NUM_ ) ;", "ps . printf ( STR_ , ( double ) solve time / NUM_ ) ; }"]}
{"ids": "47842", "code": ["private static void delete From ( int delete At , int [ ] starts , int num Starts ) {", "while ( starts [ -- num Starts ] > delete At ) {", "starts [ num Starts ] -= NUM_ ; } }"]}
{"ids": "7301", "code": ["public static Event Type Metadata create Bean Type ( String name , Class clazz , boolean is Pre Configured Static , boolean is Pre Configured , boolean is Configured , Type Class type Class ) {", "Set < String > secondary Names = null ;", "if ( name == null ) {", "name = clazz . get Name ( ) ; }", "else {", "if ( ! name . equals ( clazz . get Name ( ) ) ) {", "secondary Names = new Linked Hash Set < String > ( ) ;", "secondary Names . add ( clazz . get Name ( ) ) ; } }", "return new Event Type Metadata ( name , secondary Names , type Class , is Pre Configured Static , is Pre Configured , is Configured , Application Type . CLASS , false ) ; }"]}
{"ids": "48148", "code": ["public static boolean use Subject Creds Only ( GSS Caller caller ) {", "if ( caller instanceof Http Caller ) {", "return false ; }", "String prop Value = Access Controller . do Privileged ( new Get Property Action ( STR_ , STR_ ) ) ;", "return ( ! prop Value . equals Ignore Case ( STR_ ) ) ; }"]}
{"ids": "24881", "code": ["public void delete Storage ( Storage Data storage Data ) throws Business Exception , IO Exception {", "Storage Data local = get Local Storage Data Object ( storage Data ) ;", "synchronized ( local ) {", "if ( ( storage Recorder . is Recording On ( ) || storage Recorder . is Recording Scheduled ( ) ) && Objects . equals ( local , recorder Storage Data ) ) {", "throw new Business Exception ( STR_ + local + STR_ , Storage Error Code Enum . STORAGE ALREADY CLOSED ) ; }", "if ( local . is Storage Opened ( ) ) {", "Storage Writer writer = opened Storages Map . get ( local ) ;", "if ( writer != null ) {", "writer . cancel ( ) ; }", "opened Storages Map . remove ( local ) ; }", "delete Complete Storage Data From Disk ( local ) ;", "existing Storages Set . remove ( local ) ; } }"]}
{"ids": "25403", "code": ["public Coap Response advanced ( Request request ) {", "assign Client Uri If Empty ( request ) ;", "return synchronous ( request ) ; }"]}
{"ids": "36221", "code": ["@ Override public boolean condition Ok ( Example example ) {", "boolean is Ok = true ;", "for ( Attribute attribute : checked Attributes ) {", "is Ok &= ! Double . is Na N ( example . get Value ( attribute ) ) ; }", "return is Ok ; }"]}
{"ids": "12673", "code": ["private void load Binary ( Input Stream is ) throws IO Exception {", "if ( use New IO && is instanceof File Input Stream ) {", "File Input Stream fis = ( File Input Stream ) is ;", "if ( use Indexing ) {", "load Binary Index ( new URL ( index Name ) ) ;", "map Database ( fis ) ; }", "else {", "load Mapped Binary ( fis ) ; } }", "else {", "Data Input Stream dis = new Data Input Stream ( new Buffered Input Stream ( is ) ) ;", "load Binary ( dis ) ; } }"]}
{"ids": "22574", "code": ["public VN Xe Command Job delete Luns From Lun Group ( String lun Group Id , List < String > luns ) {", "Lun Group Modify Param param = new Lun Group Modify Param ( ) ;", "List < Lun Add Param > lun Delete = new Array List < Lun Add Param > ( ) ;", "for ( String lun Id : luns ) {", "VN Xe Base lun = new VN Xe Base ( lun Id ) ;", "Lun Add Param lun Add = new Lun Add Param ( ) ;", "lun Add . set Lun ( lun ) ;", "lun Delete . add ( lun Add ) ; }", "param . set Lun Delete ( lun Delete ) ;", "Lun Group Requests req = new Lun Group Requests ( kh Client ) ;", "return req . modify Lun Group Async ( lun Group Id , param ) ; }"]}
{"ids": "30946", "code": ["public void remove Locators ( Lookup Locator [ ] locators ) {", "test Set For Null ( locators ) ;", "synchronized ( this ) {", "if ( terminated ) {", "throw new Illegal State Exception ( STR_ ) ; }", "Hash Map groups Map = new Hash Map ( NUM_ ) ;", "for ( int i = NUM_ ; i < locators . length ; i ++ ) {", "Locator Reg reg = remove Discovered Locator ( locators [ i ] ) ;", "if ( reg != null ) {", "groups Map . put ( reg . proxy , reg . member Groups ) ;", "continue ; }", "reg = find Reg ( locators [ i ] ) ;", "if ( reg != null ) {", "undiscovered Locators . remove ( reg ) ; } }", "if ( ! groups Map . is Empty ( ) && ! listeners . is Empty ( ) ) {", "add Notify ( ( Array List ) listeners . clone ( ) , groups Map , true ) ; } } }"]}
{"ids": "4964", "code": ["public boolean is selected ( Item Selection Choice p choice ) {", "return sel array [ p choice . ordinal ( ) ] ; }"]}
{"ids": "37051", "code": ["private void add ( final I Progress Operation operation ) {", "final Grid Bag Constraints constraints = new Grid Bag Constraints ( ) ;", "constraints . fill = Grid Bag Constraints . HORIZONTAL ;", "constraints . gridy = counter ++ ;", "constraints . gridx = NUM_ ;", "constraints . weightx = NUM_ ;", "constraints . weighty = NUM_ ;", "m progress Panel . add ( operation . get Progress Panel ( ) , constraints ) ; }"]}
{"ids": "15189", "code": ["public Key Store Builder with Provider ( final String provider Name ) {", "Provider provider = Security . get Provider ( provider Name ) ;", "if ( provider == null ) {", "throw new Illegal Argument Exception ( STR_ + provider Name ) ; }", "return with Provider ( provider ) ; }"]}
{"ids": "32621", "code": ["public Composite Route Finder ( final Game Map map , final Hash Map < Match < Territory > , Integer > matches ) {", "m map = map ;", "m matches = matches ;", "s logger . finer ( STR_ ) ; }"]}
{"ids": "48993", "code": ["public TCP Endpoint ( String host , int port ) {", "this ( host , port , null , null ) ; }"]}
{"ids": "49964", "code": ["public Program Rewriter ( Array List < Hop Rewrite Rule > h Rewrites , Array List < Statement Block Rewrite Rule > sb Rewrites ) {", "dag Rule Set = new Array List < Hop Rewrite Rule > ( ) ;", "dag Rule Set . add All ( h Rewrites ) ;", "sb Rule Set = new Array List < Statement Block Rewrite Rule > ( ) ;", "sb Rule Set . add All ( sb Rewrites ) ; }"]}
{"ids": "37195", "code": ["private J Menu create Settings Menu ( ) {", "final J Menu menu = new J Menu ( STR_ ) ;", "menu . set Mnemonic ( STR_ ) ;", "menu . add ( new C Action Show Settings Dialog ( get Parent ( ) ) ) ;", "menu . add ( new J Separator ( ) ) ;", "menu . add ( new C Action Initial Callgraph Settings ( get Parent ( ) ) ) ;", "menu . add ( new C Action Initial Flowgraph Settings ( get Parent ( ) ) ) ;", "return menu ; }"]}
{"ids": "49464", "code": ["public static void write String ( Data Output Stream os , String s ) throws IO Exception {", "if ( s == null ) {", "os . write Int ( - NUM_ ) ; }", "else {", "byte array [ ] = s . get Bytes ( ) ;", "os . write Int ( array . length ) ;", "os . write ( array ) ; } }"]}
{"ids": "27126", "code": ["public static boolean is Java Valid Name ( String str ) {", "if ( str . is Empty ( ) ) return false ;", "if ( java Keys . contains ( str ) ) return false ;", "char first = str . char At ( NUM_ ) ;", "if ( is Valid Name Start Char ( first ) ) {", "for ( int i = NUM_ ; i < str . length ( ) ; ++ i ) {", "char c = str . char At ( i ) ;", "if ( ! is Valid Name Char ( c ) ) return false ; }", "return true ; }", "else {", "return false ; } }"]}
{"ids": "2531", "code": ["private List < String > create Commands ( ) {", "List < String > commands = create Node Commands ( nodejs File , ts File ) ;", "List < String > args = create Node Args ( ) ;", "if ( args != null ) {", "commands . add All ( args ) ; }", "return commands ; }"]}
{"ids": "34452", "code": ["private void parse Packages ( Sensor Context sensor Context ) {", "for ( Directory directory : package List ) {", "sensor Context . save Measure ( directory , Core Metrics . DIRECTORIES , NUM_ ) ;", "sensor Context . save Measure ( directory , Core Metrics . FILES , ( double ) files Count . get ( directory ) ) ; } }"]}
{"ids": "52868", "code": ["@ Reference ( authors = STR_ , booktitle = STR_ , title = STR_ , url = STR_ ) public static < V extends Number Vector > double log Likelihood ( Relation < V > relation , Clustering < ? extends Mean Model > clustering , Number Vector Distance Function < ? super V > distance Function ) {", "List < ? extends Cluster < ? extends Mean Model > > clusters = clustering . get All Clusters ( ) ;", "final int dim = Relation Util . dimensionality ( relation ) ;", "final int m = clusters . size ( ) ;", "int n = NUM_ ;", "int [ ] n i = new int [ m ] ;", "double d = NUM_ ;", "double [ ] d i = new double [ m ] ;", "Iterator < ? extends Cluster < ? extends Mean Model > > it = clusters . iterator ( ) ;", "for ( int i = NUM_ ; it . has Next ( ) ; ++ i ) {", "Cluster < ? extends Mean Model > cluster = it . next ( ) ;", "n += n i [ i ] = cluster . size ( ) ;", "d += d i [ i ] = variance Of Cluster ( cluster , distance Function , relation ) ; }", "if ( n <= m ) {", "return Double . NEGATIVE INFINITY ; }", "final double v = d / ( n - m ) , logv = Math . log ( v ) ;", "double log Likelihood = NUM_ ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "log Likelihood += n i [ i ] * Math . log ( n i [ i ] ) - n i [ i ] * NUM_ * Math Util . LOGTWOPI - n i [ i ] * dim * NUM_ * logv - ( d i [ i ] - m ) * NUM_ ; }", "log Likelihood -= n * Math . log ( n ) ;", "return log Likelihood ; }"]}
{"ids": "42155", "code": ["private static Class < ? > [ ] classes For Params ( List < String > params ) {", "Class < ? > [ ] result = new Class < ? > [ params . size ( ) ] ;", "for ( int i = NUM_ ; i < params . size ( ) ; i ++ ) {", "result [ i ] = class For Param ( params . get ( i ) ) ; }", "return result ; }"]}
{"ids": "4816", "code": ["final public void trim To Size ( ) {", "for ( Gaz Entry ge : gaz . values ( ) ) {", "ge . trim To Size ( ) ; } }"]}
{"ids": "13945", "code": ["public boolean contains Select Account ( ) {", "return prompts . contains ( PROMPT SELECT ACCOUNT ) ; }"]}
{"ids": "38988", "code": ["protected static void quick Sort ( Instances insts , int [ ] indices , int attidx , int left , int right ) {", "if ( left < right ) {", "int middle = partition ( insts , indices , attidx , left , right ) ;", "quick Sort ( insts , indices , attidx , left , middle ) ;", "quick Sort ( insts , indices , attidx , middle + NUM_ , right ) ; } }"]}
{"ids": "81851", "code": ["public Image flip Image Horizontally ( Image image , boolean maintain Opacity ) {", "int [ ] rgb = image . get RGB ( ) ;", "int [ ] new RGB = new int [ rgb . length ] ;", "int width = image . get Width ( ) ;", "int height = image . get Height ( ) ;", "for ( int y = NUM_ ; y < height ; y ++ ) {", "for ( int x = NUM_ ; x < width ; x ++ ) {", "new RGB [ ( width - x - NUM_ ) + y * width ] = rgb [ x + y * width ] ; } }", "return Encoded Image . create From RGB ( new RGB , width , height , ! maintain Opacity ) ; }"]}
{"ids": "3368", "code": ["private void read Segments ( ) throws IO Exception {", "for ( Segment Extent 10 extent : segment Extents ) {", "try ( Read Stream is = open Read ( extent . address ( ) , extent . length ( ) ) ) {", "is . skip ( extent . length ( ) - BLOCK SIZE ) ;", "long sequence = Bits Util . read Long ( is ) ;", "byte [ ] table Key = new byte [ TABLE KEY SIZE ] ;", "is . read All ( table Key , NUM_ , table Key . length ) ;", "if ( sequence > NUM_ ) {", "Segment 10 segment = new Segment 10 ( sequence , table Key , extent ) ;", "segments . add ( segment ) ; } } } }"]}
{"ids": "83369", "code": ["public static double project Time Within 24 Hours ( double time ) {", "double seconds In One Day = NUM_ * NUM_ * NUM_ ;", "if ( time == Double . NEGATIVE INFINITY || time == Double . POSITIVE INFINITY ) {", "Debug Lib . stop System And Report Inconsistency ( STR_ ) ; }", "while ( time < NUM_ ) {", "time += seconds In One Day ; }", "if ( time < seconds In One Day ) {", "return time ; }", "else {", "return ( ( time / seconds In One Day ) - ( Math . floor ( time / seconds In One Day ) ) ) * seconds In One Day ; } }"]}
{"ids": "85420", "code": ["@ Suppress Warnings ( STR_ ) public static void check Type ( Map < String , Object > map , String name ) {", "Map < String , Object > tmap ;", "if ( map . get ( Metamodel Generator . KEY TYPE ) instanceof Map ) {", "tmap = ( Map < String , Object > ) map . get ( Metamodel Generator . KEY TYPE ) ; }", "else if ( map . get ( Metamodel Generator . KEY TYPE ) instanceof String ) {", "tmap = new Hash Map < String , Object > ( ) ;", "tmap . put ( Metamodel Generator . KEY NAME , map . get ( Metamodel Generator . KEY TYPE ) ) ; }", "else {", "tmap = map ; }", "int join = name . index Of ( STR_ ) ;", "if ( join > NUM_ ) {", "while ( join > NUM_ && ! pointy Brackets Even ( name . substring ( NUM_ , join ) ) ) {", "join = name . index Of ( STR_ , join + NUM_ ) ; }", "if ( join > NUM_ ) {", "Assert . assert Equals ( STR_ , STR_ , tmap . get ( STR_ ) ) ;", "check Type Parameters ( - NUM_ , ( List < Map < String , Object > > ) tmap . get ( Metamodel Generator . KEY TYPES ) , name . substring ( NUM_ , join ) ) ;", "check Type Parameters ( - NUM_ , ( List < Map < String , Object > > ) tmap . get ( Metamodel Generator . KEY TYPES ) , name . substring ( join + NUM_ ) ) ;", "return ; } }", "join = name . index Of ( STR_ ) ;", "if ( join > NUM_ ) {", "while ( join > NUM_ && ! pointy Brackets Even ( name . substring ( NUM_ , join ) ) ) {", "join = name . index Of ( STR_ , join + NUM_ ) ; }", "if ( join > NUM_ ) {", "Assert . assert Equals ( STR_ , STR_ , tmap . get ( STR_ ) ) ;", "check Type Parameters ( - NUM_ , ( List < Map < String , Object > > ) tmap . get ( Metamodel Generator . KEY TYPES ) , name . substring ( NUM_ , join ) ) ;", "check Type Parameters ( - NUM_ , ( List < Map < String , Object > > ) tmap . get ( Metamodel Generator . KEY TYPES ) , name . substring ( join + NUM_ ) ) ;", "return ; } }", "int sep = name . index Of ( STR_ ) ;", "String type Params = null ;", "if ( sep > NUM_ ) {", "type Params = name . substring ( sep + NUM_ , name . length ( ) - NUM_ ) ;", "name = name . substring ( NUM_ , sep ) ; }", "if ( tmap . contains Key ( Metamodel Generator . KEY PACKAGE ) ) {", "Assert . assert Equals ( name , String . format ( STR_ , package Name ( tmap ) , tmap . get ( Metamodel Generator . KEY NAME ) ) ) ; }", "else {", "Assert . assert Equals ( name , tmap . get ( Metamodel Generator . KEY NAME ) ) ; }", "if ( type Params != null ) {", "List < Map < String , Object > > tparms = ( List < Map < String , Object > > ) tmap . get ( Metamodel Generator . KEY TYPE PARAMS ) ;", "Assert . assert False ( STR_ , tparms . is Empty ( ) ) ;", "check Type Parameters ( NUM_ , tparms , type Params ) ; } }"]}
{"ids": "70776", "code": ["public Querier CLI ( String [ ] args ) {", "cli Options = create Options ( ) ;", "try {", "Command Line Parser parser = new Gnu Parser ( ) ;", "command Line = parser . parse ( cli Options , args , true ) ;", "if ( has Option ( STR_ ) ) {", "print Help ( ) ;", "System . exit ( NUM_ ) ; }", "if ( ! parse Options ( ) ) {", "logger . info ( STR_ ) ;", "print Help ( ) ;", "System . exit ( NUM_ ) ; } }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "System . exit ( NUM_ ) ; } }"]}
{"ids": "76423", "code": ["void write Value Properties ( String full Id , long db Id , String local Id , Json Value value , Connection connection ) throws SQL Exception {", "if ( cfg . has Possible Searchable Properties ( ) ) {", "Integer batching Count = NUM_ ;", "Prepared Statement prop Create Statement = get Prepared Statement ( connection , Query Definition . PROPCREATEQUERYSTR ) ;", "try {", "batching Count = write Value Properties ( full Id , db Id , local Id , value , connection , prop Create Statement , batching Count ) ;", "if ( enable Batching && batching Count > NUM_ ) {", "int [ ] num Updates = prop Create Statement . execute Batch ( ) ;", "logger . debug ( STR_ , num Updates ) ;", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ , Arrays . as List ( num Updates ) ) ; }", "prop Create Statement . clear Batch ( ) ; } }", "finally {", "Cleanup Helper . logged Close ( prop Create Statement ) ; } } }"]}
{"ids": "20687", "code": ["protected double compute Max Y Axis Value Log Scale ( double max Value ) {", "double v = NUM_ ;", "int mantisse = NUM_ ;", "int exponent = NUM_ ;", "while ( v < max Value ) {", "if ( mantisse < NUM_ ) mantisse ++ ;", "else {", "mantisse = NUM_ ;", "exponent ++ ; }", "v = mantisse * Math . pow ( NUM_ , exponent ) ; }", "return Math . log 10 ( v ) ; }"]}
{"ids": "86448", "code": ["public void add Focus Cleared Listener ( Focus Cleared Listener focus Cleared Listener ) {", "m Focus Cleared Listeners . add ( focus Cleared Listener ) ; }"]}
{"ids": "65115", "code": ["public void add Item Listener ( Item Listener a Listener ) {", "listener List . add ( Item Listener . class , a Listener ) ; }"]}
{"ids": "10837", "code": ["public static Mosaic Levy create Mosaic Levy ( final Mosaic Id mosaic Id ) {", "return new Mosaic Levy ( Mosaic Transfer Fee Type . Absolute , generate Random Account ( ) , mosaic Id , Quantity . from Value ( NUM_ ) ) ; }"]}
{"ids": "72503", "code": ["public int rank Of ( double value ) {", "int ret = NUM_ ;", "if ( ! has Capacity ( ) ) {", "ret = Arrays . binary Search ( data , value ) ;", "if ( ret < NUM_ ) {", "return - ret - NUM_ ; }", "else {", "return ret ; } }", "else {", "for ( int i = NUM_ ; i < next ; i ++ ) {", "if ( data [ i ] < value ) {", "ret ++ ; } }", "return ret ; } }"]}
{"ids": "52504", "code": ["public static < T > Predicate < T > not ( Predicate < T > predicate ) {", "return predicate . negate ( ) ; }"]}
{"ids": "6986", "code": ["private static void add Margin Top To Content Child ( View m Content Child , int status Bar Height ) {", "if ( m Content Child == null ) {", "return ; }", "if ( ! TAG MARGIN ADDED . equals ( m Content Child . get Tag ( ) ) ) {", "Frame Layout . Layout Params lp = ( Frame Layout . Layout Params ) m Content Child . get Layout Params ( ) ;", "lp . top Margin += status Bar Height ;", "m Content Child . set Layout Params ( lp ) ;", "m Content Child . set Tag ( TAG MARGIN ADDED ) ; } }"]}
{"ids": "80109", "code": ["static byte [ ] hex String To Byte Array ( String hex String ) {", "String s = hex String ;", "int len = s . length ( ) ;", "if ( len % NUM_ == NUM_ ) {", "s = STR_ + s ;", "len ++ ; }", "byte [ ] data = new byte [ len / NUM_ ] ;", "for ( int i = NUM_ ; i < len ; i += NUM_ ) {", "data [ i / NUM_ ] = ( byte ) ( ( Character . digit ( s . char At ( i ) , NUM_ ) << NUM_ ) + Character . digit ( s . char At ( i + NUM_ ) , NUM_ ) ) ; }", "return data ; }"]}
{"ids": "50895", "code": ["private void fetch Schema ( ) throws Execution Exception , Rpc Exception , Timeout Exception {", "Message schema = Rpc . get ( my Client . get Schema ( ) , FETCH SCHEMA TIMEOUT MS , Time Unit . MILLISECONDS ) ;", "LOG . info ( STR_ + schema . entities . length + STR_ + schema . constants . length + STR_ ) ;", "int atoms = NUM_ ;", "for ( Entity type : schema . entities ) {", "if ( Atom Metadata . find ( type ) != null ) {", "atoms ++ ; }", "Dynamic . register ( type ) ; }", "LOG . info ( STR_ + atoms + STR_ ) ;", "for ( Constant Set set : schema . constants ) {", "Constant Set . register ( set ) ; } }"]}
{"ids": "72499", "code": ["private void append ( String Builder buffer , double [ ] data , String prefix , String separator , String suffix ) {", "buffer . append ( prefix ) ;", "for ( int i = NUM_ ; i < data . length ; ++ i ) {", "if ( i > NUM_ ) {", "buffer . append ( separator ) ; }", "buffer . append ( data [ i ] ) ; }", "buffer . append ( suffix ) ; }"]}
{"ids": "35743", "code": ["public T to Real Array ( ) {", "return output Array Type . cast ( Array Multidimensionalizer . multidimensionalize ( real , dimensions ) ) ; }"]}
{"ids": "50098", "code": ["private Array List < Writable Comparable > read Partitions ( File System fs , Path p , Job Conf job ) throws IO Exception {", "Sequence File . Reader reader = new Sequence File . Reader ( fs , p , job ) ;", "Array List < Writable Comparable > parts = new Array List < Writable Comparable > ( ) ;", "try {", "Double Writable key = new Double Writable ( ) ;", "Null Writable value = Null Writable . get ( ) ;", "while ( reader . next ( key , value ) ) {", "parts . add ( key ) ;", "key = new Double Writable ( ) ; } }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; }", "finally {", "IO Util Functions . close Silently ( reader ) ; }", "reader . close ( ) ;", "return parts ; }"]}
{"ids": "19813", "code": ["public boolean poll Seqno ( long seqno ) {", "return seqno <= disk Log . get Max Seqno ( ) ; }"]}
{"ids": "42156", "code": ["public E push ( E value ) {", "elements . add ( value ) ;", "return value ; }"]}
{"ids": "27317", "code": ["public long cardinality ( final int tail Index ) {", "return range Count ( tail Index ) ; }"]}
{"ids": "53419", "code": ["protected void finish Grid Row ( ) {", "Grid Bag Constraints constraints = new Grid Bag Constraints ( ) ;", "constraints . gridwidth = Grid Bag Constraints . REMAINDER ;", "constraints . weightx = NUM_ ;", "final J Label icon ;", "if ( param . is Optional ( ) ) {", "if ( param . is Defined ( ) && param . took Default Value ( ) && ! ( param instanceof Flag ) ) {", "icon = new J Label ( Stock Icon . get Stock Icon ( Stock Icon . DIALOG INFORMATION ) ) ;", "icon . set Tool Tip Text ( STR_ + param . get Default Value As String ( ) ) ; }", "else {", "icon = new J Label ( ) ;", "icon . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ; } }", "else {", "if ( ! param . is Defined ( ) ) {", "icon = new J Label ( Stock Icon . get Stock Icon ( Stock Icon . DIALOG ERROR ) ) ;", "icon . set Tool Tip Text ( STR_ ) ; }", "else {", "icon = new J Label ( ) ;", "icon . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ; } }", "parent . add ( icon , constraints ) ; }"]}
{"ids": "34328", "code": ["@ Override public void shutdown ( ) {", "if ( ! should Keep Adb Alive ) {", "Android Debug Bridge . disconnect Bridge ( ) ;", "Android Debug Bridge . terminate ( ) ; }", "logger . info ( STR_ ) ; }"]}
{"ids": "85612", "code": ["public void ping Received ( Ping pong ) {", "long now = System . current Time Millis ( ) ;", "long previous Received = ( int ) ( last Ping Sent . get ( ) & NUM_ ) ;", "log . debug ( STR_ , new Object [ ] { get Id ( ) , now , pong . get Value 2 ( ) , previous Received } ) ;", "if ( pong . get Value 2 ( ) == previous Received ) {", "last Ping Time . set ( ( int ) ( now & NUM_ ) - pong . get Value 2 ( ) ) ; }", "last Pong Received . set ( now ) ; }"]}
{"ids": "42544", "code": ["public static int find Object Literal ( Object literal ) {", "synchronized ( object Literals ) {", "Integer result = object Literals . get ( literal ) ;", "return result == null ? NUM_ : result . int Value ( ) ; } }"]}
{"ids": "74740", "code": ["@ Override public void reset Viewable Area ( ) {", "throw new Runtime Exception ( STR_ ) ; }"]}
{"ids": "53528", "code": ["public static Lexicon build Wumpus Lex ( ) {", "Lexicon l = new Lexicon ( ) ;", "Array List < Lex Word > list = new Array List < Lex Word > ( ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "list . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "l . put ( STR_ , list ) ;", "Array List < Lex Word > verb List = new Array List < Lex Word > ( ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "verb List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "l . put ( STR_ , verb List ) ;", "Array List < Lex Word > adj List = new Array List < Lex Word > ( ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "adj List . add ( new Lex Word ( STR_ , ( float ) NUM_ ) ) ;", "l . put ( STR_ , adj List ) ;", "l . add Lex Words ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ;", "l . add Lex Words ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ;", "l . add Lex Words ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ;", "l . add Lex Words ( build Name Lexicon ( ) ) ;", "l . add Lex Words ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ;", "l . add Lex Words ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ;", "l . add Lex Words ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ;", "l . add Lex Words ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ;", "return l ; }"]}
{"ids": "54655", "code": ["public void add ( X 509 Trust Manager mgr ) {", "if ( mgr instanceof X 509 Extensions ) {", "managers . add ( ( X 509 Extensions ) mgr ) ; }", "else {", "managers . add ( new X 509 Extensions Wrapper ( mgr ) ) ; } }"]}
{"ids": "44280", "code": ["public Iterator < Tree Node > find Children ( ) {", "List < Tree Node > nodes ;", "if ( children == null ) nodes = Collections . empty List ( ) ;", "else nodes = children ;", "return nodes . iterator ( ) ; }"]}
{"ids": "75772", "code": ["public static double I ( double P [ ] [ ] , int j , int k ) {", "double I = NUM_ ;", "double p x = P [ j ] [ j ] ;", "double p y = P [ k ] [ k ] ;", "double p xy = P [ j ] [ k ] ;", "I += p xy * Math . log ( p xy / ( p x * p y ) ) ;", "I += ( NUM_ - p xy ) * Math . log ( ( NUM_ - p xy ) / ( ( NUM_ - p x ) * ( NUM_ - p y ) ) ) ;", "return I ; }"]}
{"ids": "81794", "code": ["static String value To String ( Object value , int indent Factor , int indent ) {", "if ( value == null || value . equals ( null ) ) {", "return STR_ ; }", "try {", "if ( value instanceof String ) {", "return quote ( ( String ) value ) ; } }", "catch ( Exception e ) { }", "if ( value instanceof Float || value instanceof Double || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long ) {", "return number To String ( value ) ; }", "if ( value instanceof Boolean ) {", "return value . to String ( ) ; }", "if ( value instanceof Map ) {", "return print ( ( Map ) value , indent Factor , indent ) ; }", "if ( value instanceof List ) {", "return print ( ( List ) value , indent Factor , indent ) ; }", "return quote ( value . to String ( ) ) ; }"]}
{"ids": "56224", "code": ["public static boolean is Retained At Runtime ( Class < ? extends Annotation > annotation Type ) {", "Retention retention = annotation Type . get Annotation ( Retention . class ) ;", "return retention != null && retention . value ( ) == Retention Policy . RUNTIME ; }"]}
{"ids": "3716", "code": ["public void add Class Path ( String classpath ) {", "char sep = Caucho Util . get Path Separator Char ( ) ;", "int head = NUM_ ;", "int tail = NUM_ ;", "while ( head < classpath . length ( ) ) {", "tail = classpath . index Of ( sep , head ) ;", "String segment = null ;", "if ( tail < NUM_ ) {", "segment = classpath . substring ( head ) ;", "head = classpath . length ( ) ; }", "else {", "segment = classpath . substring ( head , tail ) ;", "head = tail + NUM_ ; }", "if ( segment . equals ( STR_ ) ) continue ;", "else if ( segment . ends With ( STR_ ) || segment . ends With ( STR_ ) ) add Merge Path ( Jar Path . create ( Vfs Old . lookup ( segment ) ) ) ;", "else add Merge Path ( Vfs Old . lookup ( segment ) ) ; } }"]}
{"ids": "10331", "code": ["@ Singleton public static synchronized void load Directories ( String first Option ) throws Invalid Config Exception {", "if ( user Id Directories == null ) {", "user Id Directories = new Tree Map < String , String > ( ) ;", "user Id Directories . put ( STR_ , ( first Option == null ) ? STR_ : first Option ) ;", "Properties properties = directories Properties ( ) ;", "for ( Map . Entry < Object , Object > entry : properties . entry Set ( ) ) {", "String key = String Utils . trim ( ( String ) entry . get Key ( ) ) ;", "String value = String Utils . trim ( ( String ) entry . get Value ( ) ) ;", "if ( key != null && value != null ) {", "user Id Directories . put ( key , value ) ; }", "else {", "String error = DIRECTORIES PROPFILE PATH + STR_ ;", "LOG . error ( error ) ;", "throw new Invalid Config Exception ( Invalid Config Exception . TYPE . INVALID PROPERTIES FILE , error ) ; } }", "if ( ( user Id Directories . size ( ) - NUM_ ) == NUM_ ) {", "String error = STR_ + DIRECTORIES PROPFILE PATH + STR_ ;", "LOG . error ( error ) ;", "throw new Invalid Config Exception ( Invalid Config Exception . TYPE . INVALID PROPERTIES FILE , error ) ; } } }"]}
{"ids": "52788", "code": ["public static Individuum null Individuum ( int dim ) {", "short [ ] gene = new short [ dim ] ;", "Arrays . fill ( gene , DONT CARE ) ;", "return new Individuum ( NUM_ , gene ) ; }"]}
{"ids": "51843", "code": ["public List < Class < ? > > find All Classes ( String uri ) throws IO Exception , Class Not Found Exception {", "List < Class < ? > > classes = new Array List < > ( ) ;", "List < String > strings = find All Strings ( uri ) ;", "for ( String class Name : strings ) {", "Class < ? > clazz = class Loader . load Class ( class Name ) ;", "classes . add ( clazz ) ; }", "return classes ; }"]}
{"ids": "30086", "code": ["public void shuffle Inventory ( @ Nonnull I Inventory inv , @ Nonnull Random random ) {", "final List < Item Stack > list = get Inventory List ( inv ) ;", "Collections . shuffle ( list , random ) ;", "for ( int i = NUM_ ; i < inv . get Size Inventory ( ) ; ++ i ) {", "inv . set Inventory Slot Contents ( i , list . get ( i ) ) ; } }"]}
{"ids": "86069", "code": ["public void run Asserts ( List < Step > list , int size , Boolean need Assignee ) {", "assert Equals ( size , list . size ( ) ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "run Asserts ( list . get ( i ) , i , need Assignee ) ; } }"]}
{"ids": "34215", "code": ["public static boolean register Transform ( final String transform URI ) {", "final boolean added = transforms . add ( transform URI ) ;", "return added ; }"]}
{"ids": "72038", "code": ["public AND Condition ( Condition ... conditions ) {", "Reject . if Null ( conditions ) ;", "this . conditions = Arrays . as List ( conditions ) ; }"]}
{"ids": "35629", "code": ["private void update Controls ( ) {", "Spinner difficulty = ( Spinner ) find View By Id ( R . id . spinner difficulty Level ) ;", "difficulty . set Selection ( Game Activity . get Difficulty Index ( ) ) ;", "Button resume = ( Button ) find View By Id ( R . id . button resume Game ) ;", "resume . set Enabled ( Game Activity . can Resume From Save ( ) ) ;", "Check Box never Lose Ball = ( Check Box ) find View By Id ( R . id . checkbox never Lose Ball ) ;", "never Lose Ball . set Checked ( Game Activity . get Never Lose Ball ( ) ) ;", "Check Box sound Effects Enabled = ( Check Box ) find View By Id ( R . id . checkbox sound Effects Enabled ) ;", "sound Effects Enabled . set Checked ( Game Activity . get Sound Effects Enabled ( ) ) ;", "Text View high Score = ( Text View ) find View By Id ( R . id . text high Score ) ;", "high Score . set Text ( String . value Of ( m High Score ) ) ; }"]}
{"ids": "41446", "code": ["public static void write ( Output Stream out , int c ) {", "if ( out == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "try {", "out . write ( c ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e . get Message ( ) , e ) ; } }"]}
{"ids": "73793", "code": ["public void message ( Loco Net Message m ) {", "if ( m . get Num Data Elements ( ) != NUM_ ) {", "return ; }", "int b 1 = m . get Element ( NUM_ ) & NUM_ ;", "int b 2 = m . get Element ( NUM_ ) & NUM_ ;", "int b 3 = m . get Element ( NUM_ ) & NUM_ ;", "int b 4 = m . get Element ( NUM_ ) & NUM_ ;", "if ( ( b 1 == NUM_ ) && ( ( b 2 == NUM_ ) || ( b 2 == NUM_ ) || ( b 2 == NUM_ ) ) && ( b 3 == NUM_ ) ) {", "id Box . set Selected Index ( b 4 + NUM_ ) ; } }"]}
{"ids": "27824", "code": ["public Void call ( ) throws Exception {", "byte [ ] [ ] keys = new byte [ nops ] [ ] ;", "byte [ ] [ ] vals = new byte [ nops ] [ ] ;", "if ( r . next Double ( ) <= insert Rate ) {", "for ( int i = NUM_ ; i < nops ; i ++ ) {", "keys [ i ] = next Key ( ) ;", "vals [ i ] = new byte [ NUM_ ] ;", "r . next Bytes ( vals [ i ] ) ; }", "lock . lock ( ) ;", "try {", "ndx . submit ( NUM_ , nops , keys , vals , Batch Insert Constructor . RETURN NO VALUES , null ) ;", "if ( ground Truth != null ) {", "ground Truth . submit ( NUM_ , nops , keys , vals , Batch Insert Constructor . RETURN NO VALUES , null ) ; } }", "finally {", "lock . unlock ( ) ; } }", "else {", "for ( int i = NUM_ ; i < nops ; i ++ ) {", "keys [ i ] = next Key ( ) ; }", "lock . lock ( ) ;", "try {", "ndx . submit ( NUM_ , nops , keys , null , Batch Remove Constructor . RETURN MUTATION COUNT , null ) ;", "if ( ground Truth != null ) {", "ground Truth . submit ( NUM_ , nops , keys , null , Batch Remove Constructor . RETURN MUTATION COUNT , null ) ; } }", "finally {", "lock . unlock ( ) ; } }", "return null ; }"]}
{"ids": "73670", "code": ["public boolean allow Multiple Additions ( String system Name ) {", "return true ; }"]}
{"ids": "4893", "code": ["public static double ln Factorial ( int x ) {", "if ( x < NUM_ ) throw new Illegal Argument Exception ( STR_ + x ) ;", "else if ( x > NUM_ ) return ln Gamma ( x + NUM_ ) ;", "else {", "int l = factorials Buffer . size ( ) ;", "for ( int i = l ; i <= x ; i ++ ) {", "factorials Buffer . add ( log ( i ) + factorials Buffer . get ( i - NUM_ ) ) ; }", "return factorials Buffer . get ( x ) ; } }"]}
{"ids": "1756", "code": ["public void sync ( ) throws IO Exception {", "try {", "latch . await ( ) ; }", "catch ( Interrupted Exception e ) {", "Thread . interrupted ( ) ;", "throw IO Exception Support . create ( e ) ; }", "fail On Error ( ) ; }"]}
{"ids": "9462", "code": ["public static void close Silently ( Closeable closeable ) {", "if ( closeable == null ) {", "return ; }", "try {", "closeable . close ( ) ; }", "catch ( Runtime Exception rethrown ) {", "throw rethrown ; }", "catch ( Exception ignored ) { } }"]}
{"ids": "64470", "code": ["public synchronized boolean append ( final byte [ ] data ) {", "if ( data == null ) {", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ ) ; }", "return true ; }", "File Output Stream fout = null ;", "Output Stream out = null ;", "try {", "fout = new File Output Stream ( file , true ) ;", "out = new Buffered Output Stream ( fout , data . length ) ;", "out . write ( data ) ;", "out . flush ( ) ; }", "catch ( final Exception ex ) {", "return false ; }", "finally {", "if ( fout != null ) {", "try {", "fout . close ( ) ; }", "catch ( final IO Exception e ) {", "if ( Cfg . EXCEPTION ) {", "Check . log ( e ) ; }", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ + e . to String ( ) ) ; } } }", "if ( out != null ) {", "try {", "out . close ( ) ; }", "catch ( final IO Exception e ) {", "if ( Cfg . EXCEPTION ) {", "Check . log ( e ) ; }", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ + e . to String ( ) ) ; } } } }", "return true ; }"]}
{"ids": "25037", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) private void notify List Listeners ( ) {", "if ( ! list Listeners . is Empty ( ) ) {", "List temp = new Array List ( sensor Data Objects . values ( ) ) ;", "temp . add All ( object Storages . values ( ) ) ;", "for ( List Listener < ? > list Listener : list Listeners ) {", "list Listener . content Changed ( temp ) ; } } }"]}
{"ids": "1317", "code": ["private AFTP Client action Open ( ) throws IO Exception , Page Exception {", "required ( STR_ , server ) ;", "required ( STR_ , username ) ;", "required ( STR_ , password ) ;", "AFTP Client client = get Client ( ) ;", "write Cfftp ( client ) ;", "return client ; }"]}
{"ids": "81060", "code": ["public void close ( ) {", "if ( element Layers != null ) {", "element Layers . clear ( ) ;", "element Layers = null ; }", "input Source = null ;", "cur Listener = null ; }"]}
{"ids": "10348", "code": ["public void start ( ) {", "if ( monitor Thread != null ) {", "if ( ! monitor Thread . is Alive ( ) ) {", "start Monitor Thread ( ) ; }", "else {", "LOG . error ( STR_ ) ; } }", "else {", "start Monitor Thread ( ) ; } }"]}
{"ids": "25492", "code": ["@ HLE Unimplemented @ HLE Function ( nid = NUM_ , version = NUM_ ) public int sce Usb Cam Poll Read Video Frame End ( ) {", "if ( jpeg Buffer == null || jpeg Buffer . is Null ( ) ) {", "return Sce Kernel Errors . ERROR USBCAM NO READ ON VIDEO FRAME ; }", "if ( current Video Frame Count <= last Video Frame Count ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( String . format ( STR_ , current Video Frame Count , last Video Frame Count ) ) ; }", "return Sce Kernel Errors . ERROR USBCAM NO VIDEO FRAME AVAILABLE ; }", "return write Current Video Image ( jpeg Buffer , jpeg Buffer Size ) ; }"]}
{"ids": "38646", "code": ["public void scale ( int factor ) {", "if ( m icon != null ) {", "remove All ( ) ;", "Image pic = m icon . get Image ( ) ;", "int width = m icon . get Icon Width ( ) ;", "int height = m icon . get Icon Height ( ) ;", "int reduction = width / factor ;", "width -= reduction ;", "height -= reduction ;", "pic = pic . get Scaled Instance ( width , height , Image . SCALE SMOOTH ) ;", "m icon = new Image Icon ( pic ) ;", "m visual Label = new J Label ( m icon ) ;", "add ( m visual Label , Border Layout . CENTER ) ;", "Dimension d = m visual Label . get Preferred Size ( ) ;", "Dimension d 2 = new Dimension ( ( int ) d . get Width ( ) + NUM_ , ( int ) d . get Height ( ) + NUM_ ) ;", "set Minimum Size ( d 2 ) ;", "set Preferred Size ( d 2 ) ;", "set Maximum Size ( d 2 ) ; } }"]}
{"ids": "31121", "code": ["private void read Object ( Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "in . default Read Object ( ) ;", "try {", "init From Name ( get Name ( ) ) ; }", "catch ( Runtime Exception e ) {", "if ( e instanceof Null Pointer Exception || e instanceof Illegal Argument Exception ) {", "Invalid Object Exception ee = new Invalid Object Exception ( e . get Message ( ) ) ;", "ee . init Cause ( e ) ;", "throw ee ; }", "throw e ; } }"]}
{"ids": "50426", "code": ["public String to Lower Camel ( ) {", "return to Camel ( Case Format . LOWER CAMEL ) ; }"]}
{"ids": "22050", "code": ["protected List < Block Object > sort Full Copy Source List ( List < Block Object > fc Source Objects ) {", "List < Block Object > sorted Source Objects = new Array List < Block Object > ( ) ;", "Map < String , Block Object > fc Sourc Objects Map = new Hash Map < String , Block Object > ( ) ;", "for ( Block Object fc Source Object : fc Source Objects ) {", "fc Sourc Objects Map . put ( fc Source Object . get Label ( ) , fc Source Object ) ; }", "List < String > fc Source Labels = new Array List < String > ( fc Sourc Objects Map . key Set ( ) ) ;", "Collections . sort ( fc Source Labels ) ;", "for ( String fc Source Label : fc Source Labels ) {", "sorted Source Objects . add ( fc Sourc Objects Map . get ( fc Source Label ) ) ; }", "return sorted Source Objects ; }"]}
{"ids": "16821", "code": ["public Movie Set Add Action ( boolean with Title ) {", "if ( with Title ) {", "put Value ( NAME , BUNDLE . get String ( STR_ ) ) ; }", "put Value ( LARGE ICON KEY , Icon Manager . LIST ADD ) ;", "put Value ( SMALL ICON , Icon Manager . LIST ADD ) ;", "put Value ( SHORT DESCRIPTION , BUNDLE . get String ( STR_ ) ) ; }"]}
{"ids": "19915", "code": ["protected void create Registry ( int port ) {", "if ( rmi Registry == null ) {", "try {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ + port ) ; }", "rmi Registry = Locate Registry . create Registry ( port ) ; }", "catch ( Throwable e ) {", "throw new Server Runtime Exception ( STR_ + port , e ) ; } } }"]}
{"ids": "78005", "code": ["public void poll ( final Udp Socket Statistics Handler handler ) {", "this . statistics Handler = handler ;", "try {", "file Loader . load ( ) ;", "final Byte Buffer buffer = file Loader . get Buffer ( ) ;", "line Parser . reset ( ) ;", "line Parser . handle Token ( buffer , buffer . position ( ) , buffer . limit ( ) ) ; }", "finally {", "this . statistics Handler = null ; }", "monitored Sockets . purge Entries Older Than ( update Count ) ;", "update Count ++ ; }"]}
{"ids": "86431", "code": ["void fix White Space ( ) {", "final int index = m Output Builder . length ( ) - NUM_ ;", "if ( index >= NUM_ ) {", "final char last Character = m Output Builder . char At ( index ) ;", "if ( ! Character . is Whitespace ( last Character ) ) {", "m Output Builder . append ( STR_ ) ; } } }"]}
{"ids": "43677", "code": ["public boolean expired ( long expire ) {", "long mod = time . get Time ( ) ;", "long now = System . current Time Millis ( ) ;", "long diff = now - mod ;", "if ( diff > expire && get Source ( ) != NETWORK ) {", "return true ; }", "return false ; }"]}
{"ids": "27510", "code": ["private void handle Done Query ( final UUID query Id , final Future < Void > done Query Future ) {", "try {", "done Query Future . get ( ) ;", "throw new Interrupted Exception ( ) ; }", "catch ( Interrupted Exception e ) {", "throw new Runtime Exception ( e ) ; }", "catch ( Execution Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "73981", "code": ["synchronized public static List < String > former Identities ( ) {", "if ( instance == null ) {", "instance = new Node Identity ( ) ;", "log . info ( STR_ , instance . get Identity ( ) ) ; }", "return instance . get Former Identities ( ) ; }"]}
{"ids": "47518", "code": ["@ Override public Japanese Date date Epoch Day ( long epoch Day ) {", "return new Japanese Date ( Local Date . of Epoch Day ( epoch Day ) ) ; }"]}
{"ids": "32477", "code": ["private void check Empty ( ) {", "for ( int i = NUM_ ; i < grid Count ( ) ; i ++ ) {", "Ignite Cache < Integer , String > cache = jcache ( i ) ;", "assert Equals ( NUM_ , cache . local Size ( ) ) ;", "assert Equals ( NUM_ , cache . size ( ) ) ;", "for ( Cache Peek Mode peek Mode : Cache Peek Mode . values ( ) ) {", "assert Equals ( NUM_ , cache . local Size ( peek Mode ) ) ;", "assert Equals ( NUM_ , cache . size ( peek Mode ) ) ; } }", "check Primary Size ( NUM_ ) ; }"]}
{"ids": "37529", "code": ["@ Loop Processor Annotations ( loop Processor Annotations = { @ Loop Processor Annotation ( process Path = { I Modeling Element Definitions . CLASSES PROCESSOR , I Modeling Element Definitions . OPERATIONS PROCESSOR } ) , @ Loop Processor Annotation ( process Path = { I Modeling Element Definitions . INTERFACES PROCESSOR , I Modeling Element Definitions . OPERATIONS PROCESSOR } ) } , aspect = Loop Aspect Constants . AFTER ) public static void operations Processor ( @ Generation Registry Generation Policy Registry generation Value Getter , @ Generation Base Element Object element , @ Generation Loop Element Object model Package , @ Generation Loop Element ( id = { I Modeling Element Definitions . CLASSES PROCESSOR , I Modeling Element Definitions . INTERFACES PROCESSOR } ) Object parent ) {", "List < Object > user Added Depend Types = generation Value Getter . get Values ( DEPEND TYPES TRACKER , parent ) ;", "List < Object > parameters Argument = generation Value Getter . get Values ( I Modeling Decisions . OPERATION PARAMETER ARGUMENT , element , parent ) ;", "for ( Object item : parameters Argument ) {", "if ( item instanceof Simple Entry == false ) {", "continue ; }", "Simple Entry < ? , ? > simple Entry = ( Simple Entry < ? , ? > ) item ;", "Object type = simple Entry . get Key ( ) ;", "if ( ! user Added Depend Types . contains ( type ) ) {", "List < Object > types = generation Value Getter . get Values ( I Modeling Constants . TYPES TRACKER , model Package , type ) ;", "if ( types . is Empty ( ) ) {", "continue ; }", "add Depend ( generation Value Getter , parent , type ) ; } } }"]}
{"ids": "66257", "code": ["public static void add Language ( Language language ) {", "if ( language == null ) return ;", "Array List < Language > list = new Array List < Language > ( Arrays . as List ( s languages ) ) ;", "list . add ( language ) ;", "s languages = new Language [ list . size ( ) ] ;", "list . to Array ( s languages ) ; }"]}
{"ids": "44489", "code": ["protected void do Add User ( User user ) throws Users Repository Exception {", "Connection conn = null ;", "Prepared Statement add User Statement = null ;", "try {", "conn = open Connection ( ) ;", "add User Statement = conn . prepare Statement ( m insert User Sql ) ;", "set User For Insert Statement ( user , add User Statement ) ;", "add User Statement . execute ( ) ; }", "catch ( SQL Exception sql Exc ) {", "sql Exc . print Stack Trace ( ) ;", "throw new Users Repository Exception ( STR_ , sql Exc ) ; }", "finally {", "the JDBC Util . close JDBC Statement ( add User Statement ) ;", "the JDBC Util . close JDBC Connection ( conn ) ; } }"]}
{"ids": "78129", "code": ["void block Mix 128 ( long k 1 , long k 2 ) {", "h 1 ^= mix K 1 ( k 1 ) ;", "h 1 = Long . rotate Left ( h 1 , NUM_ ) ;", "h 1 += h 2 ;", "h 1 = ( h 1 * NUM_ ) + NUM_ ;", "h 2 ^= mix K 2 ( k 2 ) ;", "h 2 = Long . rotate Left ( h 2 , NUM_ ) ;", "h 2 += h 1 ;", "h 2 = ( h 2 * NUM_ ) + NUM_ ; }"]}
{"ids": "22758", "code": ["private void register Host ( Sim Event ev ) {", "Network Host hs = ( Network Host ) ev . get Data ( ) ;", "hostlist . put ( hs . get Id ( ) , hs ) ; }"]}
{"ids": "8813", "code": ["void create Jar ( File Output Stream out Stream , Map < String , byte [ ] > all ) throws IO Exception {", "Jar Output Stream jar = new Jar Output Stream ( out Stream ) ;", "for ( Entry < String , byte [ ] > entry : all . entry Set ( ) ) {", "String name = entry . get Key ( ) ;", "Jar Entry jar entry = new Jar Entry ( name ) ;", "jar . put Next Entry ( jar entry ) ;", "jar . write ( entry . get Value ( ) ) ;", "jar . close Entry ( ) ; }", "jar . flush ( ) ;", "jar . close ( ) ; }"]}
{"ids": "72141", "code": ["public void append Cell ( int value ) {", "append Cell ( String . value Of ( value ) ) ; }"]}
{"ids": "29618", "code": ["public void expect Server Proxy Failed ( ) {", "expected Api Calls . add ( new Api Call ( SERVER PROXY FAILED ) ) ; }"]}
{"ids": "72198", "code": ["public Object remove ( final Object key ) {", "return parameters . remove ( key ) ; }"]}
{"ids": "36229", "code": ["@ Override public void recalculate Attribute Statistics ( Attribute attribute ) {", "List < Attribute > all Attributes = new Array List < Attribute > ( ) ;", "all Attributes . add ( attribute ) ;", "recalculate Attribute Statistics ( all Attributes ) ; }"]}
{"ids": "51877", "code": ["public boolean is Empty ( ) {", "return children . is Empty ( ) ; }"]}
{"ids": "832", "code": ["private Bsh Method load Scripted Command ( Input Stream in , String name , Class [ ] arg Types , String resource Path , Interpreter interpreter ) throws Util Eval Error {", "try {", "interpreter . eval ( new Input Stream Reader ( in ) , this , resource Path ) ; }", "catch ( Eval Error e ) {", "Interpreter . debug ( e . to String ( ) ) ;", "throw new Util Eval Error ( STR_ + e . get Message ( ) ) ; }", "Bsh Method meth = get Method ( name , arg Types ) ;", "return meth ; }"]}
{"ids": "862", "code": ["public static Object invoke Compiled Command ( Class command Class , Object [ ] args , Interpreter interpreter , Call Stack callstack ) throws Util Eval Error {", "Object [ ] invoke Args = new Object [ args . length + NUM_ ] ;", "invoke Args [ NUM_ ] = interpreter ;", "invoke Args [ NUM_ ] = callstack ;", "System . arraycopy ( args , NUM_ , invoke Args , NUM_ , args . length ) ;", "Bsh Class Manager bcm = interpreter . get Class Manager ( ) ;", "try {", "return Reflect . invoke Static Method ( bcm , command Class , STR_ , invoke Args ) ; }", "catch ( Invocation Target Exception e ) {", "throw new Util Eval Error ( STR_ + e . get Target Exception ( ) ) ; }", "catch ( Reflect Error e ) {", "throw new Util Eval Error ( STR_ + e ) ; } }"]}
{"ids": "37873", "code": ["private static void compute Probabilities Multinomial Logistic ( double [ ] responses ) {", "double [ ] r = responses . clone ( ) ;", "for ( int j = NUM_ ; j < r . length ; j ++ ) {", "double sum = NUM_ ;", "boolean overflow = false ;", "for ( int k = NUM_ ; k < r . length ; k ++ ) {", "if ( r [ k ] - r [ j ] > NUM_ ) {", "overflow = true ;", "break ; }", "sum += Math . exp ( r [ k ] - r [ j ] ) ; }", "if ( overflow ) {", "responses [ j ] = NUM_ ; }", "else {", "responses [ j ] = NUM_ / sum ; } } }"]}
{"ids": "14932", "code": ["public int add Client External ( SSO Token token , Map props ) throws AM Client Cap Exception {", "synchronized ( external Client Data ) {", "ext Cap Instance . add Client ( token , props ) ;", "String ct = get Client Type ( props ) ;", "Map e Map = merge With Parent ( props ) ;", "external Client Data . put ( ct , e Map ) ;", "add To Indexes ( ct , e Map ) ; }", "return NUM_ ; }"]}
{"ids": "35410", "code": ["public static void delete ( File resource To Delete ) throws IO Exception {", "if ( resource To Delete . exists ( ) ) {", "delete ( resource To Delete . to Path ( ) ) ; } }"]}
{"ids": "21368", "code": ["private void add Export Remove Volume Steps ( Workflow workflow , Protection System rp System , URI export Group ID , List < URI > bo I Ds ) throws Internal Exception {", "Export Group export Group = db Client . query Object ( Export Group . class , export Group ID ) ;", "String export Step = workflow . create Step Id ( ) ;", "init Task Status ( export Group , export Step , Operation . Status . pending , STR_ ) ;", "Map < URI , List < URI > > device To Block Objects = new Hash Map < URI , List < URI > > ( ) ;", "for ( URI snapshot ID : bo I Ds ) {", "Block Snapshot snapshot = db Client . query Object ( Block Snapshot . class , snapshot ID ) ;", "List < Block Object > objects To Remove = get Export Objects For Bookmark ( snapshot ) ;", "for ( Block Object block Object : objects To Remove ) {", "List < URI > block Objects = device To Block Objects . get ( block Object . get Storage Controller ( ) ) ;", "if ( block Objects == null ) {", "block Objects = new Array List < URI > ( ) ;", "device To Block Objects . put ( block Object . get Storage Controller ( ) , block Objects ) ; }", "block Objects . add ( block Object . get Id ( ) ) ; } }", "for ( Map . Entry < URI , List < URI > > device Entry : device To Block Objects . entry Set ( ) ) {", "log . info ( String . format ( STR_ , export Group . get Id ( ) , device Entry . get Key ( ) , device Entry . get Value ( ) ) ) ;", "export Wf Utils . generate Export Group Remove Volumes ( workflow , STEP EXPORT REMOVE SNAPSHOT , STEP EXPORT GROUP DISABLE , device Entry . get Key ( ) , export Group ID , device Entry . get Value ( ) ) ; }", "log . info ( String . format ( STR_ , export Group . get Id ( ) ) ) ; }"]}
{"ids": "11030", "code": ["public static void remove ( String dbg Token ) {", "dbg Table . remove ( dbg Token ) ; }"]}
{"ids": "55008", "code": ["protected boolean is Recompilation Needed ( int [ ] loaded Checksums ) {", "this . checksums [ NUM_ ] = calculate Checksum ( ) ;", "if ( this . checksums [ NUM_ ] != loaded Checksums [ NUM_ ] ) {", "if ( Trace . swc Checksum ) {", "Trace . trace ( STR_ ) ; }", "return true ; }", "if ( ! is Swc Checksum Enabled ) {", "if ( Trace . swc Checksum ) {", "Trace . trace ( STR_ ) ; }", "return false ; }", "Map < Q Name , Long > signature Checksums = swc Def Signature Checksums ;", "if ( signature Checksums == null ) {", "if ( Trace . swc Checksum ) {", "Trace . trace ( STR_ ) ; } }", "else {", "for ( Map . Entry < Q Name , Long > entry : signature Checksums . entry Set ( ) ) {", "Q Name q Name = ( Q Name ) entry . get Key ( ) ;", "Long data Signature Checksum = ( Long ) entry . get Value ( ) ;", "Long swc Signature Checksum = swc Context . get Checksum ( q Name ) ;", "if ( swc Signature Checksum == null && q Name != null ) {", "Source source = swc Context . get Source ( q Name . get Namespace ( ) , q Name . get Local Part ( ) ) ;", "if ( source != null ) {", "swc Signature Checksum = new Long ( source . get Last Modified ( ) ) ; } }", "if ( Trace . swc Checksum ) {", "if ( data Signature Checksum == null ) {", "throw new Illegal State Exception ( STR_ ) ; } }", "if ( data Signature Checksum != null && swc Signature Checksum == null ) {", "if ( Trace . swc Checksum ) {", "Trace . trace ( STR_ ) ;", "Trace . trace ( STR_ + entry . get Key ( ) ) ;", "Trace . trace ( STR_ + data Signature Checksum ) ;", "Trace . trace ( STR_ + swc Signature Checksum ) ; }", "return true ; }", "if ( data Signature Checksum != null ) {", "if ( data Signature Checksum . long Value ( ) != swc Signature Checksum . long Value ( ) ) {", "if ( Trace . swc Checksum ) {", "Trace . trace ( STR_ ) ;", "Trace . trace ( STR_ + entry . get Key ( ) ) ;", "Trace . trace ( STR_ + data Signature Checksum ) ;", "Trace . trace ( STR_ + swc Signature Checksum ) ; }", "return true ; } }", "else {", "return true ; } } }", "boolean result = ! are Swc File Checksums Equal ( ) ;", "if ( Trace . swc Checksum ) {", "Trace . trace ( STR_ + ( result ? STR_ : STR_ ) ) ; }", "return result ; }"]}
{"ids": "71360", "code": ["public static String dump As Hex ( byte [ ] byte Buffer , int length ) {", "String Builder output Builder = new String Builder ( length * NUM_ ) ;", "int p = NUM_ ;", "int rows = length / NUM_ ;", "for ( int i = NUM_ ; ( i < rows ) && ( p < length ) ; i ++ ) {", "int ptemp = p ;", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "String hex Val = Integer . to Hex String ( byte Buffer [ ptemp ] & NUM_ ) ;", "if ( hex Val . length ( ) == NUM_ ) {", "hex Val = STR_ + hex Val ; }", "output Builder . append ( hex Val + STR_ ) ;", "ptemp ++ ; }", "output Builder . append ( STR_ ) ;", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "int b = NUM_ & byte Buffer [ p ] ;", "if ( b > NUM_ && b < NUM_ ) {", "output Builder . append ( ( char ) b + STR_ ) ; }", "else {", "output Builder . append ( STR_ ) ; }", "p ++ ; }", "output Builder . append ( STR_ ) ; }", "int n = NUM_ ;", "for ( int i = p ; i < length ; i ++ ) {", "String hex Val = Integer . to Hex String ( byte Buffer [ i ] & NUM_ ) ;", "if ( hex Val . length ( ) == NUM_ ) {", "hex Val = STR_ + hex Val ; }", "output Builder . append ( hex Val + STR_ ) ;", "n ++ ; }", "for ( int i = n ; i < NUM_ ; i ++ ) {", "output Builder . append ( STR_ ) ; }", "output Builder . append ( STR_ ) ;", "for ( int i = p ; i < length ; i ++ ) {", "int b = NUM_ & byte Buffer [ i ] ;", "if ( b > NUM_ && b < NUM_ ) {", "output Builder . append ( ( char ) b + STR_ ) ; }", "else {", "output Builder . append ( STR_ ) ; } }", "output Builder . append ( STR_ ) ;", "return output Builder . to String ( ) ; }"]}
{"ids": "40312", "code": ["public void parse File ( Chat Event Parse Listener listener ) {", "synchronized ( this ) {", "@ Suppress Warnings ( STR_ ) long start Time = System . current Time Millis ( ) ;", "Buffered Reader reader = null ;", "try {", "reader = new Buffered Reader ( new File Reader ( path To File ) ) ;", "String current Line = reader . read Line ( ) ;", "while ( current Line != null ) {", "try {", "Chat Event event = Chat Event Utils . deserialize Chat Event ( current Line ) ;", "if ( ! listener . on New Event Parsed ( event ) ) {", "break ; } }", "catch ( Throwable t ) {", "LOG . warn ( STR_ + current Line + STR_ , t ) ; }", "current Line = reader . read Line ( ) ; }", "listener . on Parse Completed ( ) ; }", "catch ( IO Exception ioe ) {", "throw new Runtime Exception ( ioe ) ; }", "finally {", "if ( reader != null ) {", "try {", "reader . close ( ) ; }", "catch ( Throwable t ) { } } } } }"]}
{"ids": "49129", "code": ["private Coder Result escape Sequence Other ( short new Byte ) {", "if ( new Byte >= NUM_ && new Byte <= NUM_ ) {", "state = ESCAPE SEQUENCE OTHER ;", "version Sequence Allowed = false ;", "queue . write ( new Byte ) ; }", "else if ( new Byte >= NUM_ && new Byte <= NUM_ ) {", "state = NORMAL BYTES ;", "version Sequence Allowed = false ;", "queue . reset ( ) ; }", "else {", "return malformed Input ( ERR ESCBYTE ) ; }", "return Coder Result . UNDERFLOW ; }"]}
{"ids": "40192", "code": ["@ Nullable public static Network Parameters from ID ( String id ) {", "if ( id . equals ( ID MAINNET ) ) {", "return Main Net Params . get ( ) ; }", "else if ( id . equals ( ID TESTNET ) ) {", "return Test Net 3 Params . get ( ) ; }", "else if ( id . equals ( ID UNITTESTNET ) ) {", "return Unit Test Params . get ( ) ; }", "else if ( id . equals ( ID REGTEST ) ) {", "return Reg Test Params . get ( ) ; }", "else if ( id . equals ( ID ALPHANET ) ) {", "return Alpha Net Params . get ( ) ; }", "else {", "return null ; } }"]}
{"ids": "17877", "code": ["public void add Certificates And CR Ls ( Cert Store cert Store ) throws Cert Store Exception , CMS Exception {", "certs . add All ( CMS Utils . get Certificates From Store ( cert Store ) ) ;", "crls . add All ( CMS Utils . get CR Ls From Store ( cert Store ) ) ; }"]}
{"ids": "63619", "code": ["private double find Angle ( Point origin Point , Point target Point ) {", "int x 1 = origin Point . x ;", "int y 1 = origin Point . y ;", "int x 2 = target Point . x ;", "int y 2 = target Point . y ;", "double angle = NUM_ ;", "double offset = NUM_ ;", "double side A = x 2 - x 1 ;", "double side B = NUM_ ;", "if ( y 1 >= y 2 ) {", "side B = y 1 - y 2 ;", "offset = Math . to Radians ( - NUM_ ) ; }", "else {", "side B = - ( y 2 - y 1 ) ;", "offset = Math . to Radians ( NUM_ ) ; }", "if ( side B == NUM_ ) {", "return angle ; }", "angle = Math . atan ( side A / side B ) ;", "return angle + offset ; }"]}
{"ids": "14674", "code": ["void clear Resource Index ( String resource Type Name ) {", "Set resource Types = new Hash Set ( ) ;", "resource Types . add All ( resource Indices . key Set ( ) ) ;", "Iterator iter = resource Types . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String resource Type = ( String ) iter . next ( ) ;", "if ( resource Type . equals Ignore Case ( resource Type Name ) ) {", "resource Indices . remove ( resource Type ) ;", "break ; } } }"]}
{"ids": "4379", "code": ["@ Override public List < Period > generate Rolling Periods ( Date Time Unit date Time Unit ) {", "Calendar calendar = get Calendar ( ) ;", "List < Period > periods = Lists . new Array List ( ) ;", "date Time Unit = calendar . minus Days ( date Time Unit , calendar . weekday ( date Time Unit ) - NUM_ ) ;", "date Time Unit = calendar . minus Days ( date Time Unit , NUM_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "periods . add ( create Period ( date Time Unit , calendar ) ) ;", "date Time Unit = calendar . plus Weeks ( date Time Unit , NUM_ ) ; }", "return periods ; }"]}
{"ids": "7052", "code": ["public boolean reset Unread Counts ( int a Section ) {", "boolean ret Code = false ;", "Array List < Room Summary > summaries List = m Summary List By Group Position . get ( a Section ) ;", "if ( null != summaries List ) {", "for ( int summary Idx = NUM_ ; summary Idx < summaries List . size ( ) ; summary Idx ++ ) {", "ret Code |= reset Unread Count ( a Section , summary Idx ) ; } }", "else {", "Log . w ( DBG CLASS NAME , STR_ + a Section + STR_ ) ; }", "return ret Code ; }"]}
{"ids": "23387", "code": ["public static void add Category ( Lexicon Category category ) {", "categories . add ( category ) ; }"]}
{"ids": "9346", "code": ["public static void cache Client User Id ( Consumer Bean consumer Bean , Long internal Id , String client Id ) {", "cache Client User Id ( consumer Bean . get Short name ( ) , internal Id , client Id ) ; }"]}
{"ids": "39563", "code": ["protected void process Entity ( IXML Reader reader , IXML Entity Resolver entity Resolver ) throws Exception {", "if ( ! XML Util . check Literal ( reader , STR_ ) ) {", "XML Util . skip Tag ( reader ) ;", "return ; }", "XML Util . skip Whitespace ( reader , null ) ;", "char ch = XML Util . read Char ( reader , STR_ ) ;", "if ( ch == STR_ ) {", "XML Util . skip Whitespace ( reader , null ) ;", "entity Resolver = this . parameter Entity Resolver ; }", "else {", "reader . unread ( ch ) ; }", "String key = XML Util . scan Identifier ( reader ) ;", "XML Util . skip Whitespace ( reader , null ) ;", "ch = XML Util . read Char ( reader , STR_ ) ;", "String system ID = null ;", "String public ID = null ;", "switch ( ch ) {", "case STR_ :", "if ( ! XML Util . check Literal ( reader , STR_ ) ) {", "XML Util . skip Tag ( reader ) ;", "return ; }", "XML Util . skip Whitespace ( reader , null ) ;", "public ID = XML Util . scan String ( reader , STR_ , this . parameter Entity Resolver ) ;", "XML Util . skip Whitespace ( reader , null ) ;", "system ID = XML Util . scan String ( reader , STR_ , this . parameter Entity Resolver ) ;", "XML Util . skip Whitespace ( reader , null ) ;", "XML Util . read Char ( reader , STR_ ) ;", "break ;", "case STR_ :", "if ( ! XML Util . check Literal ( reader , STR_ ) ) {", "XML Util . skip Tag ( reader ) ;", "return ; }", "XML Util . skip Whitespace ( reader , null ) ;", "system ID = XML Util . scan String ( reader , STR_ , this . parameter Entity Resolver ) ;", "XML Util . skip Whitespace ( reader , null ) ;", "XML Util . read Char ( reader , STR_ ) ;", "break ;", "case STR_ :", "case STR_ :", "reader . unread ( ch ) ;", "String value = XML Util . scan String ( reader , STR_ , this . parameter Entity Resolver ) ;", "entity Resolver . add Internal Entity ( key , value ) ;", "XML Util . skip Whitespace ( reader , null ) ;", "XML Util . read Char ( reader , STR_ ) ;", "break ;", "default :", "XML Util . skip Tag ( reader ) ; }", "if ( system ID != null ) {", "entity Resolver . add External Entity ( key , public ID , system ID ) ; } }"]}
{"ids": "66439", "code": ["protected String do It ( ) throws Exception {", "log . info ( STR_ + p Selection + STR_ + p Date Invoiced + STR_ + p AD Org ID + STR_ + p C B Partner ID + STR_ + p M In Out ID + STR_ + p doc Action + STR_ + p Consolidate Document ) ;", "String sql = null ;", "if ( p Selection ) {", "sql = STR_ + STR_ + STR_ + STR_ + STR_ ; }", "else {", "sql = STR_ + STR_ ;", "if ( p AD Org ID != NUM_ ) sql += STR_ ;", "if ( p C B Partner ID != NUM_ ) sql += STR_ ;", "if ( p M In Out ID != NUM_ ) sql += STR_ ;", "sql += STR_ + STR_ + STR_ ; }", "Prepared Statement pstmt = null ;", "try {", "pstmt = DB . prepare Statement ( sql , get Trx Name ( ) ) ;", "int index = NUM_ ;", "if ( p Selection ) {", "pstmt . set Int ( index , get AD P Instance ID ( ) ) ; }", "else {", "if ( p AD Org ID != NUM_ ) pstmt . set Int ( index ++ , p AD Org ID ) ;", "if ( p C B Partner ID != NUM_ ) pstmt . set Int ( index ++ , p C B Partner ID ) ;", "if ( p M In Out ID != NUM_ ) pstmt . set Int ( index ++ , p M In Out ID ) ; } }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , sql , e ) ; }", "return generate ( pstmt ) ; }"]}
{"ids": "6739", "code": ["public static S 2 Cell Id from Face IJ ( int face , int i , int j ) {", "long n [ ] = { NUM_ , face << ( POS BITS - NUM_ ) } ;", "int bits = ( face & SWAP MASK ) ;", "for ( int k = NUM_ ; k >= NUM_ ; -- k ) {", "bits = get Bits ( n , i , j , k , bits ) ; }", "S 2 Cell Id s = new S 2 Cell Id ( ( ( ( n [ NUM_ ] << NUM_ ) + n [ NUM_ ] ) << NUM_ ) + NUM_ ) ;", "return s ; }"]}
{"ids": "37181", "code": ["private void update Actions ( final I Navi Project project ) {", "m load Project Action . set Enabled ( ! project . is Loaded ( ) ) ;", "if ( m add Address Space Action != null ) {", "m add Address Space Action . set Enabled ( project . is Loaded ( ) ) ; }", "m search View Action . set Enabled ( project . is Loaded ( ) ) ;", "m forward Action . set Enabled ( project . is Loaded ( ) ) ; }"]}
{"ids": "10011", "code": ["public boolean truncate Too Long Number ( Phone Number number ) {", "if ( is Valid Number ( number ) ) {", "return true ; }", "Phone Number number Copy = new Phone Number ( ) ;", "number Copy . merge From ( number ) ;", "long national Number = number . get National Number ( ) ;", "do {", "national Number /= NUM_ ;", "number Copy . set National Number ( national Number ) ;", "if ( is Possible Number With Reason ( number Copy ) == Validation Result . TOO SHORT || national Number == NUM_ ) {", "return false ; } }", "while ( ! is Valid Number ( number Copy ) ) ;", "number . set National Number ( national Number ) ;", "return true ; }"]}
{"ids": "50156", "code": ["public static boolean is Within Time Comparison Epsilon ( long time Micros ) {", "long now = Utils . get System Now Micros Utc ( ) ;", "return Math . abs ( time Micros - now ) < time Comparison Epsilon ; }"]}
{"ids": "83914", "code": ["public Optional < Histogram > histogram ( ) {", "return Optional . empty ( ) ; }"]}
{"ids": "65783", "code": ["private J Label create Weekday ( String title ) {", "J Label label = new J Label ( title ) ;", "label . set Horizontal Alignment ( Swing Constants . CENTER ) ;", "label . set Horizontal Text Position ( Swing Constants . CENTER ) ;", "label . set Request Focus Enabled ( false ) ;", "label . set Background ( Adempiere PLAF . get Primary 1 ( ) ) ;", "label . set Foreground ( Color . white ) ;", "label . set Opaque ( true ) ;", "return label ; }"]}
{"ids": "54066", "code": ["default Path append ( String rel Path ) {", "return append ( Path . parse ( rel Path ) ) ; }"]}
{"ids": "44690", "code": ["public static int index Of ( String value , String substring ) {", "return value != null && substring != null ? value . index Of ( substring ) : - NUM_ ; }"]}
{"ids": "41614", "code": ["public int read SI 32 ( ) throws IO Exception {", "synch Bits ( ) ;", "int b 0 = in . read ( ) ;", "if ( b 0 < NUM_ ) {", "throw new IO Exception ( STR_ ) ; }", "int b 1 = in . read ( ) ;", "if ( b 1 < NUM_ ) {", "throw new IO Exception ( STR_ ) ; }", "int b 2 = in . read ( ) ;", "if ( b 2 < NUM_ ) {", "throw new IO Exception ( STR_ ) ; }", "byte [ ] a Byte = new byte [ NUM_ ] ;", "int count = in . read ( a Byte ) ;", "if ( count < NUM_ ) {", "throw new IO Exception ( STR_ ) ; }", "bytes Read += NUM_ ;", "return ( int ) ( ( a Byte [ NUM_ ] * NUM_ * NUM_ * NUM_ ) + ( b 2 * NUM_ * NUM_ ) + ( b 1 * NUM_ ) + b 0 ) ; }"]}
{"ids": "25248", "code": ["public void format ( long in Date , String Builder buffer ) {", "buffer . append ( format ( in Date ) ) ; }"]}
{"ids": "13511", "code": ["public Profiler clear Results ( ) {", "lapped . clear ( ) ;", "return this ; }"]}
{"ids": "28142", "code": ["@ Override public Graph Query has ( final String key , final Object value ) {", "criteria . add ( new Has ( key , value ) ) ;", "return this ; }"]}
{"ids": "14841", "code": ["public void add Attribute Value ( Principal principal , Guid guid , String name , String value ) throws UMS Exception {", "modify Attribute Value ( Modification Type . ADD , principal , guid , name , value ) ; }"]}
{"ids": "78028", "code": ["public static void copy Stream ( Input Stream input Stream , Output Stream output Stream ) {", "if ( input Stream != null && output Stream != null ) {", "try {", "int length = - NUM_ ;", "byte [ ] buffer = new byte [ Constant . Capacity . BYTES PER MB ] ;", "while ( ( length = input Stream . read ( buffer , NUM_ , buffer . length ) ) != - NUM_ ) {", "output Stream . write ( buffer , NUM_ , length ) ;", "output Stream . flush ( ) ; } }", "catch ( Exception e ) {", "throw new File Util Exception ( e ) ; } } }"]}
{"ids": "35022", "code": ["private void print Type Members ( List < ? extends Element > members , List < Type Element > inner Class ) {", "for ( Element element : members ) {", "if ( is Public Or Protected ( element ) ) {", "print Member ( element , inner Class ) ; } } }"]}
{"ids": "72538", "code": ["private void initialize Basic Variables ( final int start Column ) {", "basic Variables = new int [ get Width ( ) - NUM_ ] ;", "basic Rows = new int [ get Height ( ) ] ;", "Arrays . fill ( basic Variables , - NUM_ ) ;", "for ( int i = start Column ; i < get Width ( ) - NUM_ ; i ++ ) {", "Integer row = find Basic Row ( i ) ;", "if ( row != null ) {", "basic Variables [ i ] = row ;", "basic Rows [ row ] = i ; } } }"]}
{"ids": "87004", "code": ["private void attach Header ( SIP Header h ) {", "if ( h == null ) throw new Illegal Argument Exception ( STR_ ) ;", "try {", "if ( h instanceof SIP Header List ) {", "SIP Header List < ? > hl = ( SIP Header List < ? > ) h ;", "if ( hl . is Empty ( ) ) {", "return ; } }", "attach Header ( h , false , false ) ; }", "catch ( SIP Duplicate Header Exception ex ) { } }"]}
{"ids": "12887", "code": ["public String phonemise ( String text , String pos , String Builder g 2 p Method ) {", "String result = userdict Lookup ( text , pos ) ;", "if ( result != null ) {", "g 2 p Method . append ( STR_ ) ;", "return result ; }", "result = lexicon Lookup ( text , pos ) ;", "if ( result != null ) {", "g 2 p Method . append ( STR_ ) ;", "return result ; }", "String normalised = Mary Utils . normalise Unicode Letters ( text , get Locale ( ) ) ;", "if ( ! normalised . equals ( text ) ) {", "result = userdict Lookup ( normalised , pos ) ;", "if ( result != null ) {", "g 2 p Method . append ( STR_ ) ;", "return result ; }", "result = lexicon Lookup ( normalised , pos ) ;", "if ( result != null ) {", "g 2 p Method . append ( STR_ ) ;", "return result ; } }", "String phones = lts . predict Pronunciation ( text ) ;", "result = lts . syllabify ( phones ) ;", "if ( result != null ) {", "g 2 p Method . append ( STR_ ) ;", "return result ; }", "return null ; }"]}
{"ids": "74646", "code": ["public static void stop ( int exit code ) {", "System . exit ( exit code ) ; }"]}
{"ids": "72532", "code": ["private Field ODE State And Derivative < Decimal 64 > state ( double t ) {", "return new Field ODE State And Derivative < > ( zero . add ( t ) , new Decimal 64 [ NUM_ ] , new Decimal 64 [ NUM_ ] ) ; }"]}
{"ids": "9016", "code": ["private Spannable highlight Hashtags ( Spannable text ) {", "if ( text == null ) {", "return null ; }", "final Matcher matcher = PATTERN HASHTAGS . matcher ( text ) ;", "while ( matcher . find ( ) ) {", "final int start = matcher . start ( NUM_ ) ;", "final int end = matcher . end ( NUM_ ) ;", "text . set Span ( new Foreground Color Span ( m Highlight Color ) , start , end , Spanned . SPAN EXCLUSIVE EXCLUSIVE ) ;", "text . set Span ( new Style Span ( android . graphics . Typeface . BOLD ) , start , end , Spanned . SPAN EXCLUSIVE EXCLUSIVE ) ; }", "return text ; }"]}
{"ids": "46853", "code": ["private static void check For Null Element ( Object [ ] arg , String arg Name ) {", "if ( ( arg == null ) || ( arg . length == NUM_ ) ) {", "throw new Illegal Argument Exception ( STR_ + arg Name + STR_ ) ; }", "for ( int i = NUM_ ; i < arg . length ; i ++ ) {", "if ( arg [ i ] == null ) {", "throw new Illegal Argument Exception ( STR_ + arg Name + STR_ + i + STR_ ) ; } } }"]}
{"ids": "44209", "code": ["public Input Stream execute Download ( String url , String cookie ) throws IO Exception {", "String [ ] [ ] header Params = new String [ ] [ ] { { STR_ , cookie } , { STR_ , STR_ } } ;", "Http Entity http Entity = execute Get ( url , null , header Params ) ;", "return http Entity . get Content ( ) ; }"]}
{"ids": "81852", "code": ["public Image flip Image Vertically ( Image image , boolean maintain Opacity ) {", "int [ ] rgb = image . get RGB ( ) ;", "int [ ] new RGB = new int [ rgb . length ] ;", "int width = image . get Width ( ) ;", "int height = image . get Height ( ) ;", "for ( int y = NUM_ ; y < height ; y ++ ) {", "for ( int x = NUM_ ; x < width ; x ++ ) {", "new RGB [ x + ( height - y - NUM_ ) * width ] = rgb [ x + y * width ] ; } }", "return Encoded Image . create From RGB ( new RGB , width , height , ! maintain Opacity ) ; }"]}
{"ids": "76829", "code": ["public Morfologik Filter Factory ( Map < String , String > args ) {", "super ( args ) ;", "final String DICTIONARY RESOURCE ATTRIBUTE = STR_ ;", "String dictionary Resource = get ( args , DICTIONARY RESOURCE ATTRIBUTE ) ;", "if ( dictionary Resource != null && ! dictionary Resource . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ + DICTIONARY RESOURCE ATTRIBUTE + STR_ + STR_ + DICTIONARY ATTRIBUTE + STR_ ) ; }", "resource Name = get ( args , DICTIONARY ATTRIBUTE ) ;", "if ( ! args . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ + args ) ; } }"]}
{"ids": "2576", "code": ["public static String pad Left ( String str , int total Chars ) {", "if ( str == null ) str = STR_ ;", "String Buffer sb = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < total Chars - str . length ( ) ; i ++ ) {", "sb . append ( STR_ ) ; }", "sb . append ( str ) ;", "return sb . to String ( ) ; }"]}
{"ids": "48291", "code": ["public int hash Code ( ) {", "int myhash = NUM_ + policy Identifier . hash Code ( ) ;", "myhash = NUM_ * myhash + policy Qualifiers . hash Code ( ) ;", "return myhash ; }"]}
{"ids": "44177", "code": ["public Unix Terminal ( ) throws IO Exception {", "this ( System . in , System . out , Charset . default Charset ( ) ) ; }"]}
{"ids": "55466", "code": ["private void check Streams ( ) {", "if ( ( System . current Time Millis ( ) - last Checked ) / NUM_ < CHECK DELAY ) {", "return ; }", "last Checked = System . current Time Millis ( ) ;", "Set < Stream Info > remove = new Hash Set < > ( ) ;", "for ( Stream Info info : data ) {", "if ( ! info . is Valid ( ) || ! info . get Online ( ) ) {", "remove . add ( info ) ; } }", "for ( Stream Info info : remove ) {", "data . remove ( info ) ;", "item Removed ( info ) ; }", "if ( remove . is Empty ( ) ) {", "list Data Changed ( ) ; } }"]}
{"ids": "3991", "code": ["public void add Priority Package ( String pkg ) {", "if ( priority Packages == null ) priority Packages = new String [ NUM_ ] ;", "int old Length = priority Packages . length ;", "String [ ] new Pkgs = new String [ old Length + NUM_ ] ;", "System . arraycopy ( priority Packages , NUM_ , new Pkgs , NUM_ , old Length ) ;", "if ( ! pkg . ends With ( STR_ ) ) pkg = pkg + STR_ ;", "new Pkgs [ old Length ] = pkg ;", "priority Packages = new Pkgs ; }"]}
{"ids": "85231", "code": ["public static String verify Certificate ( X 509 Certificate cert , Collection < CRL > crls , Calendar calendar ) {", "if ( Sign Utils . has Unsupported Critical Extension ( cert ) ) return STR_ ;", "try {", "cert . check Validity ( calendar . get Time ( ) ) ; }", "catch ( Exception e ) {", "return e . get Message ( ) ; }", "if ( crls != null ) {", "for ( CRL crl : crls ) {", "if ( crl . is Revoked ( cert ) ) return STR_ ; } }", "return null ; }"]}
{"ids": "32757", "code": ["public static void expand ( ) {", "String [ ] st = new String [ L ] ;", "int i ;", "for ( i = NUM_ ; i < R ; i ++ ) st [ i ] = STR_ + ( char ) i ;", "st [ i ++ ] = STR_ ;", "int codeword = Binary Std In . read Int ( W ) ;", "if ( codeword == R ) return ;", "String val = st [ codeword ] ;", "while ( true ) {", "Binary Std Out . write ( val ) ;", "codeword = Binary Std In . read Int ( W ) ;", "if ( codeword == R ) break ;", "String s = st [ codeword ] ;", "if ( i == codeword ) s = val + val . char At ( NUM_ ) ;", "if ( i < L ) st [ i ++ ] = val + s . char At ( NUM_ ) ;", "val = s ; }", "Binary Std Out . close ( ) ; }"]}
{"ids": "36460", "code": ["@ Override public boolean is Rotate Edge Labels ( ) {", "return graph Creator . is Rotating Edge Labels ( ) ; }"]}
{"ids": "44463", "code": ["public static Response Code create Extension ( String name ) {", "String Buffer buffer = new String Buffer ( name . length ( ) + NUM_ ) ;", "if ( ! name . starts With ( STR_ ) ) {", "buffer . append ( STR_ ) ; }", "buffer . append ( name ) ;", "return new Response Code ( buffer . to String ( ) ) ; }"]}
{"ids": "13879", "code": ["public void delete Servers ( Set servers ) throws AM Console Exception {", "if ( servers . contains ( System Properties . get Server Instance Name ( ) ) ) {", "throw new AM Console Exception ( get Localized String ( STR_ ) ) ; }", "String server Name = null ;", "try {", "if ( ( servers != null ) && ! servers . is Empty ( ) ) {", "SSO Token token = get User SSO Token ( ) ;", "for ( Iterator i = servers . iterator ( ) ; i . has Next ( ) ; ) {", "server Name = ( String ) i . next ( ) ;", "String [ ] param = { server Name } ;", "log Event ( STR_ , param ) ;", "Server Configuration . delete Server Instance ( token , server Name ) ;", "log Event ( STR_ , param ) ; } } }", "catch ( SMS Exception e ) {", "String [ ] params = { server Name , e . get Message ( ) } ;", "log Event ( STR_ , params ) ;", "throw new AM Console Exception ( get Error String ( e ) ) ; }", "catch ( SSO Exception e ) {", "String [ ] params = { server Name , e . get Message ( ) } ;", "log Event ( STR_ , params ) ;", "throw new AM Console Exception ( get Error String ( e ) ) ; } }"]}
{"ids": "69477", "code": ["public boolean add ( terminal sym ) throws internal error {", "boolean result ;", "not null ( sym ) ;", "result = elements . get ( sym . index ( ) ) ;", "if ( ! result ) elements . set ( sym . index ( ) ) ;", "return result ; }"]}
{"ids": "78980", "code": ["private void create Recursivly ( String path ) throws Keeper Exception , Interrupted Exception {", "try {", "if ( zk . exists ( path , true ) == null && path . length ( ) > NUM_ ) {", "String temp = path . substring ( NUM_ , path . last Index Of ( File . separator ) ) ;", "create Recursivly ( temp ) ;", "zk . create ( path , null , Ids . OPEN ACL UNSAFE , Create Mode . PERSISTENT ) ; }", "else {", "return ; } }", "catch ( Keeper Exception e ) {", "throw e ; }", "catch ( Interrupted Exception e ) {", "throw e ; } }"]}
{"ids": "35874", "code": ["public void stop Recording ( ) {", "m Handler . send Message ( m Handler . obtain Message ( MSG STOP RECORDING ) ) ;", "m Handler . send Message ( m Handler . obtain Message ( MSG QUIT ) ) ; }"]}
{"ids": "79162", "code": ["private void write Tag ( String name , Tag tag ) throws IO Exception {", "Tag Type type = tag . get Type ( ) ;", "byte [ ] name Bytes = name . get Bytes ( Standard Charsets . UTF 8 ) ;", "if ( type == Tag Type . END ) {", "throw new IO Exception ( STR_ ) ; }", "os . write Byte ( type . get Id ( ) ) ;", "os . write Short ( name Bytes . length ) ;", "os . write ( name Bytes ) ;", "write Tag Payload ( tag ) ; }"]}
{"ids": "46995", "code": ["public int hash Code ( ) {", "if ( myhash == - NUM_ ) {", "if ( timestamp == null ) {", "myhash = signer Cert Path . hash Code ( ) ; }", "else {", "myhash = signer Cert Path . hash Code ( ) + timestamp . hash Code ( ) ; } }", "return myhash ; }"]}
{"ids": "67052", "code": ["public Type Variable BV type Variable ( ) {", "int id = type Variable List . size ( ) ;", "type Variable List . add ( null ) ;", "Type Variable BV result = new Type Variable BV ( id , this ) ;", "type Variable List . set ( id , result ) ;", "return result ; }"]}
{"ids": "15176", "code": ["public int process ( Callback [ ] callbacks , int state ) throws Auth Login Exception {", "init Auth Config ( ) ;", "X 509 Certificate [ ] all Certs = null ;", "try {", "Http Servlet Request servlet Request = get Http Servlet Request ( ) ;", "if ( servlet Request != null ) {", "all Certs = ( X 509 Certificate [ ] ) servlet Request . get Attribute ( STR_ ) ;", "if ( all Certs == null || all Certs . length == NUM_ ) {", "debug . message ( STR_ ) ;", "if ( ! portal gw cert auth enabled ) {", "debug . error ( STR_ + STR_ ) ;", "throw new Auth Login Exception ( am Auth Cert , STR_ , null ) ; }", "thecert = get Portal Style Cert ( servlet Request ) ;", "all Certs = new X 509 Certificate [ ] { thecert } ; }", "else {", "if ( portal gw cert auth enabled && portal gw cert preferred ) {", "thecert = get Portal Style Cert ( servlet Request ) ;", "all Certs = new X 509 Certificate [ ] { thecert } ; }", "else {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ , all Certs . length ) ; }", "thecert = all Certs [ NUM_ ] ; } } }", "else {", "thecert = send Callback ( ) ; }", "if ( thecert == null ) {", "debug . message ( STR_ ) ;", "throw new Auth Login Exception ( am Auth Cert , STR_ , null ) ; }", "get Token From Cert ( thecert ) ;", "store Username Passwd ( user Token Id , null ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + user Token Id + STR_ ) ; } }", "catch ( Auth Login Exception e ) {", "set Failure ID ( user Token Id ) ;", "debug . error ( STR_ , e ) ;", "throw new Auth Login Exception ( am Auth Cert , STR_ , null ) ; }", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + thecert . to String ( ) ) ; }", "if ( am Auth Cert chk Cert In LDAP . equals Ignore Case ( STR_ ) && am Auth Cert chk CRL . equals Ignore Case ( STR_ ) && ! ocsp Enabled ) {", "return IS Auth Constants . LOGIN SUCCEED ; }", "if ( ldap Param == null ) {", "set Ldap Store Param ( ) ; }", "if ( am Auth Cert chk Cert In LDAP . equals Ignore Case ( STR_ ) ) {", "X 509 Certificate ldapcert = AM Cert Store . get Registered Certificate ( ldap Param , thecert , am Auth Cert chk Attr Cert In LDAP ) ;", "if ( ldapcert == null ) {", "debug . error ( STR_ ) ;", "set Failure ID ( user Token Id ) ;", "throw new Auth Login Exception ( am Auth Cert , STR_ , null ) ; } }", "int ret = do JCE Revocation Validation ( all Certs ) ;", "if ( ret != IS Auth Constants . LOGIN SUCCEED ) {", "debug . error ( STR_ ) ;", "set Failure ID ( user Token Id ) ;", "throw new Auth Login Exception ( am Auth Cert , STR_ , null ) ; }", "return IS Auth Constants . LOGIN SUCCEED ; }"]}
{"ids": "7182", "code": ["public void add ( Select Clause Element Raw element ) {", "select Clause Elements . add ( element ) ; }"]}
{"ids": "5746", "code": ["public static boolean is Normal ( Geo Time Serie gts , int buckets , double pcterror , boolean bessel ) {", "if ( NUM_ == gts . values ) {", "return true ; }", "if ( TYPE . DOUBLE != gts . type && TYPE . LONG != gts . type ) {", "return false ; }", "double [ ] musigma = musigma ( gts , bessel ) ;", "double mu = musigma [ NUM_ ] ;", "double sigma = musigma [ NUM_ ] ;", "if ( NUM_ == sigma ) {", "return false ; }", "double [ ] bounds = SAX Utils . get Bounds ( buckets ) ;", "int [ ] counts = new int [ bounds . length + NUM_ ] ;", "for ( int i = NUM_ ; i < gts . values ; i ++ ) {", "double v = ( ( double ) GTS Helper . value At Index ( gts , i ) - mu ) / sigma ;", "int insertion = Arrays . binary Search ( bounds , v ) ;", "if ( insertion >= NUM_ ) {", "counts [ insertion ] ++ ; }", "else {", "counts [ - ( NUM_ + insertion ) ] ++ ; } }", "double mean = gts . values / counts . length ;", "for ( int i = NUM_ ; i < counts . length ; i ++ ) {", "if ( Math . abs ( NUM_ - ( counts [ i ] / mean ) ) > pcterror ) {", "return false ; } }", "return true ; }"]}
{"ids": "69049", "code": ["public void load From Properties ( Properties properties ) {", "projected = String Util . get Boolean Value ( properties , STR_ , false , true ) ;", "tie Point = String Util . get Double Array ( properties , STR_ , null , true ) ;", "scale = String Util . get Double Array ( properties , STR_ , null , true ) ;", "globe = String Util . get String Value ( properties , STR_ , null , true ) ;", "raster Width = String Util . get Integer Value ( properties , STR_ , true , NUM_ , true ) ;", "raster Length = String Util . get Integer Value ( properties , STR_ , true , NUM_ , true ) ;", "datum Code = String Util . get Integer Value ( properties , STR_ , true , NUM_ , false ) ;", "ellipsoid Code = String Util . get Integer Value ( properties , STR_ , true , NUM_ , false ) ;", "semi Major Axis = String Util . get Double Value ( properties , STR_ , true , Double . Na N , false ) ;", "semi Minor Axis = String Util . get Double Value ( properties , STR_ , true , Double . Na N , false ) ;", "inverse Flattening = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "gcs Prime Meridian Lon = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "proj Code = String Util . get Integer Value ( properties , STR_ , true , NUM_ , false ) ;", "pcs Code = String Util . get Integer Value ( properties , STR_ , true , NUM_ , false ) ;", "coord Transform Code = String Util . get Integer Value ( properties , STR_ , true , NUM_ , false ) ;", "std Parallel 1 = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "pole Lat = ( int ) ( Math . signum ( std Parallel 1 ) * NUM_ ) ;", "std Parallel 2 = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "natural Origin Lon = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "natural Origin Lat = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "false Origin Lon = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "false Origin Lat = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "false Easting = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "false Northing = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "center Easting = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "center Northing = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "center Lon = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "center Lat = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "scale At Natural Origin = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "scale At Center = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "azimuth = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "straight Vert Pole Lon = String Util . get Double Value ( properties , STR_ , false , Double . Na N , false ) ;", "gcs Citation = String Util . get String Value ( properties , STR_ , null , false ) ;", "pcs Citation = String Util . get String Value ( properties , STR_ , null , false ) ;", "proj Linear Units = String Util . get String Value ( properties , STR_ , STR_ , false ) ;", "if ( coord Transform Code == Geo Key . Code Undefined ) {", "String citation = ( pcs Citation == null ? STR_ : pcs Citation . to Lower Case ( ) ) ;", "if ( citation . contains ( STR_ ) && ( citation . contains ( STR_ ) || citation . contains ( STR_ ) || citation . contains ( STR_ ) ) ) {", "coord Transform Code = Geo Key . Code CT Mercator ;", "if ( Double . is Na N ( natural Origin Lon ) ) natural Origin Lon = NUM_ ;", "if ( Double . is Na N ( false Easting ) ) false Easting = NUM_ ;", "if ( Double . is Na N ( false Northing ) ) false Northing = NUM_ ;", "if ( citation . contains ( STR_ ) && citation . contains ( STR_ ) ) {", "if ( ! Double . is Na N ( semi Major Axis ) ) semi Minor Axis = semi Major Axis ;", "else {", "semi Major Axis = SEMI MAJOR AXIS [ NUM_ ] ;", "semi Minor Axis = SEMI MINOR AXIS [ NUM_ ] ; } } } } }"]}
{"ids": "63483", "code": ["public Show Progress ( ) {", "start = last = System . current Time Millis ( ) ; }"]}
{"ids": "3181", "code": ["public static Repository Expression parse Repository Expression ( String to Parse ) throws Parse Error {", "Stream Tokenizer t = Parser . tokenize ( to Parse ) ;", "Term creator = Parser . parse Term ( t ) ;", "List < Operation > operations = Parser . parse Operation List ( t ) ;", "Repository Expression ex = new Repository Expression ( creator ) ;", "if ( ! operations . is Empty ( ) ) {", "throw new Parse Error ( STR_ ) ; }", "return ex ; }"]}
{"ids": "67528", "code": ["public void add Section ( Source Section section ) {", "sections . add ( section ) ; }"]}
{"ids": "75048", "code": ["private int [ ] version Parts ( String version ) {", "String [ ] parts = version . split ( STR_ ) ;", "int [ ] p = new int [ NUM_ ] ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "int pi ;", "if ( i < parts . length ) {", "p [ i ] = Integer . parse Int ( parts [ i ] ) ; }", "else {", "p [ i ] = - NUM_ ; } }", "return p ; }"]}
{"ids": "86641", "code": ["public static boolean approx Equals ( final double a , final double b , final double tolerance ) {", "if ( Double . is Na N ( a ) || Double . is Na N ( b ) ) {", "return false ; }", "if ( a == b ) {", "return true ; }", "if ( Double . is Infinite ( a ) || Double . is Infinite ( b ) ) {", "return false ; }", "if ( a >= ( b - tolerance ) && a <= ( b + tolerance ) ) {", "return true ; }", "return false ; }"]}
{"ids": "85404", "code": ["public static Map < String , Object > load Json Model ( File js File ) {", "try {", "Map < String , Object > model = Java Script Resolver . read Json Model ( js File ) ;", "if ( model == null ) {", "throw new Compiler Error Exception ( STR_ + js File . get Absolute Path ( ) ) ; }", "if ( ! model . contains Key ( STR_ ) ) {", "throw new Ceylon Run Js Exception ( STR_ + js File + STR_ ) ; }", "return model ; }", "catch ( IO Exception ex ) {", "throw new Compiler Error Exception ( STR_ + js File ) ; } }"]}
{"ids": "86843", "code": ["static String [ ] split Line ( final String line ) {", "final int ix 0 = line . index Of ( STR_ ) ;", "final int ix = ix 0 == - NUM_ ? line . length ( ) : ix 0 ;", "final String less Comment = line . substring ( NUM_ , ix ) ;", "if ( less Comment . matches ( STR_ ) ) {", "return null ; }", "return less Comment . split ( STR_ ) ; }"]}
{"ids": "22099", "code": ["private List < Volume > create Volume Data ( String name , int num Volumes ) {", "List < Volume > volumes = new Array List < Volume > ( ) ;", "URI cg Uri = create Block Consistency Group ( name + STR_ ) ;", "for ( int i = NUM_ ; i <= num Volumes ; i ++ ) {", "Volume volume = new Volume ( ) ;", "URI volume URI = URI Util . create Id ( Volume . class ) ;", "test Volume UR Is . add ( volume URI ) ;", "volume . set Id ( volume URI ) ;", "volume . set Label ( name + i ) ;", "volume . set Consistency Group ( cg Uri ) ;", "db Client . create Object ( volume ) ; }", "return volumes ; }"]}
{"ids": "68550", "code": ["private static < T > T hash Map To Object ( Linked Hash Map map , Class < T > type ) {", "try {", "return string To Object ( mapper . write Value As String ( map ) , type ) ; }", "catch ( IO Exception e ) {", "log . warn ( STR_ + type . get Name ( ) + STR_ + map . to String ( ) + STR_ + e . get Message ( ) ) ;", "return null ; } }"]}
{"ids": "70705", "code": ["private void delete SMS ( String cmd , String search ) {", "int nb Deleted = - NUM_ ;", "if ( cmd . equals ( STR_ ) ) {", "nb Deleted = m Sms Manager . delete All Sms ( ) ; }", "else if ( cmd . equals ( STR_ ) ) {", "nb Deleted = m Sms Manager . delete Sent Sms ( ) ; }", "else if ( cmd . starts With ( STR_ ) ) {", "Integer number = Tools . parse Int ( search ) ;", "if ( number == null ) {", "number = NUM_ ; }", "if ( cmd . equals ( STR_ ) ) {", "nb Deleted = m Sms Manager . delete Last Sms ( number ) ; }", "else if ( cmd . equals ( STR_ ) ) {", "nb Deleted = m Sms Manager . delete Last In Sms ( number ) ; }", "else if ( cmd . equals ( STR_ ) ) {", "nb Deleted = m Sms Manager . delete Last Out Sms ( number ) ; }", "else {", "send ( R . string . chat del sms error ) ; } }", "else if ( cmd . equals ( STR_ ) && search != null ) {", "Array List < Contact > contacts = Contacts Manager . get Matching Contacts ( s Context , search ) ;", "if ( contacts . size ( ) > NUM_ ) {", "String Builder sb = new String Builder ( get String ( R . string . chat specify details ) ) ;", "sb . append ( Tools . Line Sep ) ;", "for ( Contact contact : contacts ) {", "sb . append ( contact . name ) ;", "sb . append ( Tools . Line Sep ) ; }", "send ( sb . to String ( ) ) ; }", "else if ( contacts . size ( ) == NUM_ ) {", "Contact contact = contacts . get ( NUM_ ) ;", "send ( R . string . chat del sms from , contact . name ) ;", "nb Deleted = m Sms Manager . delete Sms By Contact ( contact . raw Ids ) ; }", "else {", "send ( R . string . chat no match for , search ) ; } }", "else if ( cmd . equals ( STR_ ) && search != null ) {", "send ( R . string . chat del sms from , search ) ;", "nb Deleted = m Sms Manager . delete Sms By Number ( search ) ;", "if ( nb Deleted <= NUM_ ) {", "send ( R . string . chat no match for , search ) ; } }", "else {", "send ( R . string . chat del sms syntax ) ; }", "if ( nb Deleted >= NUM_ ) {", "send ( R . string . chat del sms nb , nb Deleted ) ; }", "else if ( nb Deleted == - NUM_ ) {", "send ( R . string . chat del sms error ) ; } }"]}
{"ids": "42725", "code": ["private static Blocks Remove Info is Start Block ( Block Node rem Block , Block Node start Block ) {", "List < Insn Node > rem Insns = rem Block . get Instructions ( ) ;", "List < Insn Node > start Insns = start Block . get Instructions ( ) ;", "if ( rem Insns . size ( ) < start Insns . size ( ) ) {", "return null ; }", "int start Pos = rem Insns . size ( ) - start Insns . size ( ) ;", "int end Pos = NUM_ ;", "if ( ! check Insns ( rem Insns , start Insns , start Pos , null ) ) {", "if ( check Insns ( rem Insns , start Insns , NUM_ , null ) ) {", "start Pos = NUM_ ;", "end Pos = start Insns . size ( ) ; }", "else {", "boolean found = false ;", "for ( int i = NUM_ ; i < start Pos ; i ++ ) {", "if ( check Insns ( rem Insns , start Insns , i , null ) ) {", "start Pos = i ;", "end Pos = start Insns . size ( ) + i ;", "found = true ;", "break ; } }", "if ( ! found ) {", "return null ; } } }", "Blocks Pair start Pair = new Blocks Pair ( rem Block , start Block ) ;", "Blocks Remove Info remove Info = new Blocks Remove Info ( start Pair ) ;", "remove Info . set Start Split Index ( start Pos ) ;", "remove Info . set End Split Index ( end Pos ) ;", "if ( end Pos != NUM_ ) {", "remove Info . set End ( start Pair ) ; }", "if ( ! check Insns ( rem Insns , start Insns , start Pos , remove Info ) ) {", "return null ; }", "return remove Info ; }"]}
{"ids": "25837", "code": ["public boolean check Error ( ) {", "return pw . check Error ( ) ; }"]}
{"ids": "85169", "code": ["public List < Pdf Document > split By Size ( long size ) {", "List < Page Range > split Ranges = new Array List < > ( ) ;", "int current Page = NUM_ ;", "int num Of Pages = pdf Document . get Number Of Pages ( ) ;", "while ( current Page <= num Of Pages ) {", "Page Range next Range = get Next Range ( current Page , num Of Pages , size ) ;", "split Ranges . add ( next Range ) ;", "List < Integer > all Pages = next Range . get All Pages ( ) ;", "current Page = ( int ) all Pages . get ( all Pages . size ( ) - NUM_ ) + NUM_ ; }", "return extract Page Ranges ( split Ranges ) ; }"]}
{"ids": "14657", "code": ["private boolean validate Auth Schemes ( Set auth Scheme Set ) throws Policy Exception {", "if ( auth Scheme Set . is Empty ( ) ) {", "String args [ ] = { AUTH SCHEME } ;", "throw new Policy Exception ( Res Bundle Utils . rb Name , STR_ , args , null ) ; }", "Iterator auth Scheme Set Iter = auth Scheme Set . iterator ( ) ;", "auth Schemes . clear ( ) ;", "while ( auth Scheme Set Iter . has Next ( ) ) {", "try {", "String auth Scheme = ( String ) auth Scheme Set Iter . next ( ) ;", "auth Schemes . add ( auth Scheme ) ; }", "catch ( Class Cast Exception e ) {", "String args [ ] = { AUTH SCHEME } ;", "throw new Policy Exception ( Res Bundle Utils . rb Name , STR_ , args , null ) ; } }", "return true ; }"]}
{"ids": "85336", "code": ["public static UUID from UUID As URN String To UUID ( String UUI Das URN ) {", "if ( ! UUI Das URN . starts With ( UUID Helper . UUID as a URN PREFIX ) ) {", "IMF Error Logger imf Error Logger = new IMF Error Logger Impl ( ) ;", "imf Error Logger . add Error ( IMF Error Logger . IMF Errors . Error Codes . UUID ERROR , IMF Error Logger . IMF Errors . Error Levels . FATAL , String . format ( STR_ + STR_ , UUI Das URN , UUID Helper . UUID as a URN PREFIX ) ) ;", "throw new IMF Exception ( String . format ( STR_ , UUI Das URN , UUID Helper . UUID as a URN PREFIX ) , imf Error Logger ) ; }", "return UUID . from String ( UUI Das URN . split ( UUID Helper . UUID as a URN PREFIX ) [ NUM_ ] ) ; }"]}
{"ids": "32865", "code": ["public String read Line ( ) {", "String line ;", "try {", "line = scanner . next Line ( ) ; }", "catch ( No Such Element Exception e ) {", "line = null ; }", "return line ; }"]}
{"ids": "36507", "code": ["public static Gradient Paint make Red Paint ( final double width , final double height ) {", "return new Gradient Paint ( NUM_ , NUM_ , new Color ( NUM_ , NUM_ , NUM_ ) , ( float ) width / NUM_ , ( float ) height / NUM_ , new Color ( NUM_ , NUM_ , NUM_ ) , true ) ; }"]}
{"ids": "45573", "code": ["public static List < String > match Numbers ( String text ) {", "String pattern = STR_ ;", "Pattern pat = Pattern . compile ( pattern ) ;", "Matcher m = pat . matcher ( text ) ;", "List < String > matches = new Array List < String > ( ) ;", "while ( m . find ( ) ) {", "matches . add ( m . group ( ) ) ; }", "return matches ; }"]}
{"ids": "86149", "code": ["private boolean delete Storage ( Tracker Server tracker Server , String group Name , String storage Ip Addr ) throws IO Exception {", "byte [ ] header ;", "byte [ ] b Group Name ;", "byte [ ] bs ;", "int len ;", "Socket tracker Socket ;", "tracker Socket = tracker Server . get Socket ( ) ;", "Output Stream out = tracker Socket . get Output Stream ( ) ;", "bs = group Name . get Bytes ( Client Global . g charset ) ;", "b Group Name = new byte [ Proto Common . FDFS GROUP NAME MAX LEN ] ;", "if ( bs . length <= Proto Common . FDFS GROUP NAME MAX LEN ) {", "len = bs . length ; }", "else {", "len = Proto Common . FDFS GROUP NAME MAX LEN ; }", "Arrays . fill ( b Group Name , ( byte ) NUM_ ) ;", "System . arraycopy ( bs , NUM_ , b Group Name , NUM_ , len ) ;", "int ip Addr Len ;", "byte [ ] b Ip Addr = storage Ip Addr . get Bytes ( Client Global . g charset ) ;", "if ( b Ip Addr . length < Proto Common . FDFS IPADDR SIZE ) {", "ip Addr Len = b Ip Addr . length ; }", "else {", "ip Addr Len = Proto Common . FDFS IPADDR SIZE - NUM_ ; }", "header = Proto Common . pack Header ( Proto Common . TRACKER PROTO CMD SERVER DELETE STORAGE , Proto Common . FDFS GROUP NAME MAX LEN + ip Addr Len , ( byte ) NUM_ ) ;", "byte [ ] whole Pkg = new byte [ header . length + b Group Name . length + ip Addr Len ] ;", "System . arraycopy ( header , NUM_ , whole Pkg , NUM_ , header . length ) ;", "System . arraycopy ( b Group Name , NUM_ , whole Pkg , header . length , b Group Name . length ) ;", "System . arraycopy ( b Ip Addr , NUM_ , whole Pkg , header . length + b Group Name . length , ip Addr Len ) ;", "out . write ( whole Pkg ) ;", "Proto Common . Recv Package Info pkg Info = Proto Common . recv Package ( tracker Socket . get Input Stream ( ) , Proto Common . TRACKER PROTO CMD RESP , NUM_ ) ;", "this . errno = pkg Info . errno ;", "return pkg Info . errno == NUM_ ; }"]}
{"ids": "62198", "code": ["@ Override public UUID create Entry Node ( UUID parent Node ) {", "UUID uuid = UUID . random UUID ( ) ;", "graph Server . add Vertex ( uuid ) ;", "graph Server . add Edge ( uuid , parent Node ) ;", "return uuid ; }"]}
{"ids": "39830", "code": ["protected void assert Delivery States ( final Collection < Customer Order Delivery > deliveries , final Map < String , String > expected State ) {", "for ( Customer Order Delivery delivery : deliveries ) {", "assert Equals ( STR_ + delivery . get Delivery Group ( ) + STR_ + delivery . get Delivery Num ( ) , expected State . get ( delivery . get Delivery Group ( ) ) , delivery . get Delivery Status ( ) ) ; } }"]}
{"ids": "40260", "code": ["@ Nullable @ Worker Thread static File write Bitmap To File ( @ Non Null Bitmap bitmap , @ Non Null File file ) {", "File Output Stream file Stream = null ;", "try {", "Byte Array Output Stream byte Stream = new Byte Array Output Stream ( ) ;", "bitmap . compress ( Bitmap . Compress Format . PNG , NUM_ , byte Stream ) ;", "file Stream = new File Output Stream ( file ) ;", "file Stream . write ( byte Stream . to Byte Array ( ) ) ;", "return file ; }", "catch ( IO Exception e ) {", "Log . e ( TAG , e . get Message ( ) , e ) ; }", "finally {", "if ( file Stream != null ) {", "try {", "file Stream . close ( ) ; }", "catch ( IO Exception e ) {", "Log . e ( TAG , e . get Message ( ) , e ) ; } } }", "return null ; }"]}
{"ids": "80016", "code": ["public static Sentence parse ( final String text , final Conversation Context ctx ) {", "String txt ;", "if ( text == null ) {", "txt = STR_ ; }", "else {", "if ( ( ctx != null ) && ctx . is For Matching ( ) ) {", "final Expression Matcher matcher = new Expression Matcher ( ) ;", "txt = matcher . read Matching Flags ( text ) ;", "if ( matcher . is Any Flag Set ( ) ) {", "return matcher . parse Sentence ( txt , ctx ) ; } }", "else {", "txt = text ; } }", "txt = txt . trim ( ) ;", "final Sentence Implementation sentence = new Sentence Implementation ( ctx , txt ) ;", "try {", "final Conversation Parser parser = new Conversation Parser ( sentence ) ;", "sentence . parse ( parser ) ;", "sentence . classify Words ( parser ) ;", "if ( ( ctx != null ) && ctx . get Merge Expressions ( ) ) {", "sentence . evaluate Sentence Type ( ) ;", "sentence . merge Words ( ) ;", "if ( ! ctx . is For Matching ( ) ) {", "sentence . standardize Sentence Type ( ) ;", "sentence . performa Aliasing ( ) ; } }", "sentence . set Error ( parser . get Error String ( ) ) ; }", "catch ( final Exception e ) {", "LOGGER . error ( STR_ + text + STR_ ) ;", "sentence . set Error ( e . get Message ( ) ) ;", "e . print Stack Trace ( ) ; }", "return sentence ; }"]}
{"ids": "3007", "code": ["private void add Entry To Info List ( Entry entry , List < Entry Info > entry Info List ) {", "if ( entry Info List != null ) {", "String type To Add = entry . get Type ( ) ;", "if ( type To Add . equals ( Db Logic . Constants . quotation ) ) {", "type To Add = Db Logic . Constants . note ; }", "entry Info List . add ( new Entry Info ( entry . get Id ( ) , entry . get Note Or Title ( STR_ ) , entry . get Quotation ( STR_ ) , entry . get Is Public ( ) , entry . has First Child Id ( ) , entry . has Parent Id ( ) , type To Add ) ) ; } }"]}
{"ids": "54176", "code": ["private void update Sliding ( float new Position Normalized ) {", "current Slide = new Position Normalized ;", "state = current Slide == NUM_ ? EXPANDED : current Slide == NUM_ ? COLLAPSED : SLIDING ;", "float slide Y = Math . abs ( ( current Slide * max Slide ) - max Slide ) ;", "slidable View . set Y ( slide Y ) ;", "invalidate ( ) ;", "notify Listeners ( current Slide ) ; }"]}
{"ids": "86789", "code": ["void flush ( Vcf Writer writer ) throws IO Exception {", "if ( m Prev Record != null ) {", "if ( ! m Prev Dense ) {", "write Count ( writer , m Prev Record ) ; }", "else {", "m Vcf Filter Statistics . increment ( Stat . DENSITY WINDOW COUNT ) ; } }", "m Prev Record = null ;", "m Prev Dense = false ; }"]}
{"ids": "29421", "code": ["public boolean equals ( String str ) {", "if ( str == null ) return false ;", "if ( length != str . length ( ) ) return false ;", "for ( int i = length , j = offset + length ; -- i >= NUM_ ; ) {", "if ( array [ -- j ] != str . char At ( i ) ) return false ; }", "return true ; }"]}
{"ids": "24507", "code": ["protected void flush ( ) {", "stream . flush ( ) ; }"]}
{"ids": "32479", "code": ["private Server Starter start Servers ( ) throws Exception {", "Server Starter srv Starter = new Server Starter ( ) ;", "Thread t = new Thread ( srv Starter ) ;", "t . set Daemon ( true ) ;", "t . set Name ( STR_ ) ;", "t . start ( ) ;", "srv Starter . wait For Server Start ( ) ;", "return srv Starter ; }"]}
{"ids": "62889", "code": ["public Pagination evaluate ( final Class entity Class ) {", "Paginate paginate = entity Class != null ? ( Paginate ) entity Class . get Annotation ( Paginate . class ) : null ;", "int default Limit = paginate != null ? paginate . default Limit ( ) : DEFAULT PAGE LIMIT ;", "int max Limit = paginate != null ? paginate . max Limit ( ) : MAX PAGE LIMIT ;", "evaluate ( default Limit , max Limit ) ;", "generate Totals = generate Totals && ( paginate == null || paginate . countable ( ) ) ;", "return this ; }"]}
{"ids": "46732", "code": ["public boolean deregister Service Provider ( Object provider ) {", "Object oprovider = map . get ( provider . get Class ( ) ) ;", "if ( provider == oprovider ) {", "map . remove ( provider . get Class ( ) ) ;", "poset . remove ( provider ) ;", "if ( provider instanceof Registerable Service ) {", "Registerable Service rs = ( Registerable Service ) provider ;", "rs . on Deregistration ( registry , category ) ; }", "return true ; }", "return false ; }"]}
{"ids": "2028", "code": ["public Newest First Comparator ( Date now ) {", "Preconditions . check Not Null ( now ) ;", "m Now = new Date ( now . get Time ( ) + MILLIS IN DAY ) ; }"]}
{"ids": "7855", "code": ["protected void update ( Comparable x , Object y ) {", "int index = index Of ( x ) ;", "if ( index < NUM_ ) {", "throw new Series Exception ( STR_ + x ) ; }", "else {", "Comparable Object Item item = get Data Item ( index ) ;", "item . set Object ( y ) ;", "fire Series Changed ( ) ; } }"]}
{"ids": "3295", "code": ["public void write Field ( String name , float value ) throws java . io . IO Exception {", "write Field ( name , Float . to String ( value ) ) ; }"]}
{"ids": "75876", "code": ["public byte [ ] decode Data ( byte [ ] data , int num Error Correction Bytes ) throws Reed Solomon Exception , Data Too Large Exception {", "if ( data == null || data . length == NUM_ ) {", "return null ; }", "if ( data . length > NUM_ ) {", "throw new Data Too Large Exception ( STR_ ) ; }", "int [ ] data Ints = new int [ data . length ] ;", "for ( int i = NUM_ ; i < data . length ; i ++ ) {", "data Ints [ i ] = data [ i ] & NUM_ ; }", "int total Bytes = data . length - num Error Correction Bytes ;", "decoder . decode ( data Ints , num Error Correction Bytes ) ;", "Byte Array Output Stream bos = new Byte Array Output Stream ( ) ;", "for ( int i = NUM_ ; i < total Bytes && i < data Ints . length ; i ++ ) {", "bos . write ( data Ints [ i ] ) ; }", "return bos . to Byte Array ( ) ; }"]}
{"ids": "8535", "code": ["public static boolean is Valid Mobile ( @ Non Null String mobile ) {", "if ( ! Text Utils . is Empty ( mobile ) && mobile . length ( ) == NUM_ ) {", "if ( mobile . starts With ( STR_ ) || mobile . starts With ( STR_ ) || mobile . starts With ( STR_ ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "3867", "code": ["public String convert Error ( String filename , int line , int column , String message ) {", "String src Filename = null ;", "int dest Line = NUM_ ;", "int src Line = NUM_ ;", "for ( int i = NUM_ ; i < lines . size ( ) ; i ++ ) {", "Line map = lines . get ( i ) ;", "if ( filename != null && ! filename . ends With ( dst Filename ) ) { }", "else if ( map . dst Line <= line && line <= map . get Last Destination Line ( ) ) {", "src Filename = map . src Filename ;", "src Line = map . get Source Line ( line ) ; } }", "if ( src Filename != null ) return src Filename + STR_ + src Line + STR_ + message ;", "else return filename + STR_ + line + STR_ + message ; }"]}
{"ids": "14278", "code": ["protected boolean is Attributes Modified ( ) {", "if ( attributes != null ) {", "return ( attributes . is Empty ( ) ) ? false : true ; }", "return false ; }"]}
{"ids": "32514", "code": ["@ Nullable public static Ignore Descriptor for Method ( Class cls , Method mthd ) {", "if ( mthd . is Annotation Present ( Ignite Ignore . class ) ) {", "Ignite Ignore ignore = mthd . get Annotation ( Ignite Ignore . class ) ;", "String reason = ignore . value ( ) ;", "if ( F . is Empty ( reason ) ) throw new Illegal Argument Exception ( STR_ + cls . get Name ( ) + STR_ + mthd . get Name ( ) + STR_ ) ;", "return new Ignore Descriptor ( reason , ignore . force Failure ( ) ) ; }", "else return null ; }"]}
{"ids": "55618", "code": ["protected int draw Message Size ( ) {", "int size Diff = size Range [ NUM_ ] == size Range [ NUM_ ] ? NUM_ : rng . next Int ( size Range [ NUM_ ] - size Range [ NUM_ ] ) ;", "return size Range [ NUM_ ] + size Diff ; }"]}
{"ids": "66884", "code": ["public static String [ ] grab Args ( String signature ) {", "Matcher matcher = sig RE . matcher ( signature ) ;", "boolean b = matcher . matches ( ) ;", "if ( ! b && matcher . group Count ( ) != NUM_ ) logger . error ( STR_ , signature ) ;", "String args = matcher . group ( NUM_ ) ;", "if ( args . is Empty ( ) ) return new String [ NUM_ ] ;", "return args . split ( STR_ ) ; }"]}
{"ids": "7352", "code": ["public void process Dispatch ( Uniform Pair < Event Bean [ ] > events ) {", "if ( ! for Clause Delivery ) {", "dispatch Internal ( events ) ;", "return ; }", "if ( ( group Delivery Expressions == null ) || ( group Delivery Expressions . length == NUM_ ) ) {", "Uniform Pair < Event Bean [ ] > todeliver = new Uniform Pair < Event Bean [ ] > ( null , null ) ;", "if ( events != null ) {", "if ( events . get First ( ) != null ) {", "for ( Event Bean the Event : events . get First ( ) ) {", "todeliver . set First ( new Event Bean [ ] { the Event } ) ;", "dispatch Internal ( todeliver ) ; }", "todeliver . set First ( null ) ; }", "if ( events . get Second ( ) != null ) {", "for ( Event Bean the Event : events . get Second ( ) ) {", "todeliver . set Second ( new Event Bean [ ] { the Event } ) ;", "dispatch Internal ( todeliver ) ; }", "todeliver . set Second ( null ) ; } }", "return ; }", "Map < Object , Uniform Pair < Event Bean [ ] > > groups ;", "try {", "groups = get Grouped Results ( events ) ; }", "catch ( Runtime Exception ex ) {", "log . error ( STR_ + ex . get Message ( ) + STR_ , ex ) ;", "dispatch Internal ( events ) ;", "return ; }", "for ( Map . Entry < Object , Uniform Pair < Event Bean [ ] > > group : groups . entry Set ( ) ) {", "dispatch Internal ( group . get Value ( ) ) ; } }"]}
{"ids": "73067", "code": ["public void put Long ( long pos , long val ) {", "unsafe . put Long ( pos + addr , val ) ; }"]}
{"ids": "21369", "code": ["public boolean delete R Set Step ( URI rp System Id , List < URI > volume Ids , String token ) throws Internal Exception {", "List < String > replication Set Names = new Array List < String > ( ) ;", "try {", "List < Recover Point Volume Protection Info > volume Protection Info List = new Array List < Recover Point Volume Protection Info > ( ) ;", "Protection System rp System = db Client . query Object ( Protection System . class , rp System Id ) ;", "Recover Point Client rp = RP Helper . get Recover Point Client ( rp System ) ;", "for ( URI volume Id : volume Ids ) {", "Volume volume = db Client . query Object ( Volume . class , volume Id ) ;", "Recover Point Volume Protection Info volume Protection Info = rp . get Protection Info For Volume ( RP Helper . get RPW Wn ( volume . get Id ( ) , db Client ) ) ;", "Volume source Volume = RP Helper . get RP Source Volume ( db Client , volume ) ;", "Virtual Pool virtual Pool = db Client . query Object ( Virtual Pool . class , source Volume . get Virtual Pool ( ) ) ;", "volume Protection Info . set Metro Point ( Virtual Pool . v Pool Specifies Metro Point ( virtual Pool ) ) ;", "volume Protection Info List . add ( volume Protection Info ) ;", "replication Set Names . add ( volume . get R Set Name ( ) ) ; }", "if ( ! volume Protection Info List . is Empty ( ) ) {", "rp . delete Replication Sets ( volume Protection Info List ) ; }", "Workflow Step Completer . step Succeded ( token ) ; }", "catch ( Exception e ) {", "log . error ( String . format ( STR_ , replication Set Names . to String ( ) ) ) ;", "return step Failed ( token , e , STR_ ) ; }", "return true ; }"]}
{"ids": "29853", "code": ["private void move To Next ( ) {", "check Main Thread ( ) ;", "scheduled . set ( false ) ;", "Bitmap next = pending . poll ( ) ;", "if ( next != null ) {", "if ( current != null && ! finished . offer ( current ) ) throw new Runtime Exception ( STR_ ) ;", "current = next ;", "invalidate Self ( ) ;", "ensure Scheduled ( ) ;", "frame Available Subject . on Next ( null ) ;", "fps Counter . update ( ) ; } }"]}
{"ids": "66027", "code": ["public String rma ( Properties ctx , int Window No , Grid Tab m Tab , Grid Field m Field , Object value ) {", "Integer M RMA ID = ( Integer ) value ;", "if ( M RMA ID == null || M RMA ID . int Value ( ) == NUM_ ) return STR_ ;", "if ( is Callout Active ( ) ) return STR_ ;", "MRMA rma = new MRMA ( ctx , M RMA ID . int Value ( ) , null ) ;", "M In Out original Receipt = rma . get Shipment ( ) ;", "if ( rma . get ID ( ) != NUM_ ) {", "m Tab . set Value ( STR_ , original Receipt . get Date Ordered ( ) ) ;", "m Tab . set Value ( STR_ , original Receipt . get PO Reference ( ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get AD Org ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get AD Org Trx ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get C Activity ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get C Campaign ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get C Project ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get User 1 ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get User 2 ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get M Warehouse ID ( ) ) ) ;", "m Tab . set Value ( STR_ , original Receipt . get Delivery Rule ( ) ) ;", "m Tab . set Value ( STR_ , original Receipt . get Delivery Via Rule ( ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get M Shipper ID ( ) ) ) ;", "m Tab . set Value ( STR_ , original Receipt . get Freight Cost Rule ( ) ) ;", "m Tab . set Value ( STR_ , original Receipt . get Freight Amt ( ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get C B Partner ID ( ) ) ) ;", "m Tab . set Value ( STR_ , new Integer ( original Receipt . get C B Partner Location ID ( ) ) ) ;", "if ( original Receipt . get AD User ID ( ) > NUM_ ) m Tab . set Value ( STR_ , new Integer ( original Receipt . get AD User ID ( ) ) ) ;", "else m Tab . set Value ( STR_ , null ) ; }", "return STR_ ; }"]}
{"ids": "82417", "code": ["public final long read Long ( ) throws java . io . IO Exception {", "read Fully ( scratch , NUM_ , NUM_ ) ;", "int h = ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) ;", "int l = ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( scratch [ NUM_ ] & NUM_ ) << NUM_ ) ;", "return ( ( ( long ) h ) << NUM_ ) | ( ( long ) l ) & NUM_ ; }"]}
{"ids": "35775", "code": ["private Object [ ] resolve Parameters ( Executable executable , Optional < Object > target , Object outer Instance , Extension Context extension Context , Extension Registry extension Registry ) {", "Preconditions . not Null ( target , STR_ ) ;", "Parameter [ ] parameters = executable . get Parameters ( ) ;", "Object [ ] values = new Object [ parameters . length ] ;", "int start = NUM_ ;", "if ( outer Instance != null ) {", "values [ NUM_ ] = outer Instance ;", "start = NUM_ ; }", "for ( int i = start ; i < parameters . length ; i ++ ) {", "Parameter Context parameter Context = new Default Parameter Context ( parameters [ i ] , i , target ) ;", "values [ i ] = resolve Parameter ( parameter Context , executable , extension Context , extension Registry ) ; }", "return values ; }"]}
{"ids": "27128", "code": ["public static boolean is Valid Name Char ( char c ) {", "return is Valid Name Start Char ( c ) || ( c >= STR_ && c <= STR_ ) ; }"]}
{"ids": "69504", "code": ["protected static boolean id start char ( int ch ) {", "return ( ch >= STR_ && ch <= STR_ ) || ( ch >= STR_ && ch <= STR_ ) || ( ch == STR_ ) ; }"]}
{"ids": "46620", "code": ["public int hash Code ( ) {", "int fhash = ( family != null ) ? family . hash Code ( ) : NUM_ ;", "return fhash ^ style ^ size ; }"]}
{"ids": "79124", "code": ["private Command Handler Enum ( final Command command 1 ) {", "this . command = command 1 ; }"]}
{"ids": "45563", "code": ["public static boolean is Float ( String desc ) {", "return desc . ends With ( STR_ ) ; }"]}
{"ids": "68360", "code": ["public void component Resized ( Component Event e ) {", "J Scroll Bar bar = get Vertical Scroll Bar ( ) ;", "int incr = ( int ) ( get Size ( ) . get Height ( ) - ( bar . get Unit Increment ( NUM_ ) * NUM_ ) ) ;", "get Vertical Scroll Bar ( ) . set Block Increment ( incr ) ; }"]}
{"ids": "11044", "code": ["public Arg ( String a Name , String desc , int expected Number Of Arguments , boolean expect Dashed Arguments ) {", "name = a Name ;", "description = desc ;", "num Expected Values = expected Number Of Arguments ;", "c = name . char At ( NUM_ ) ;", "dashed Arguments = expect Dashed Arguments ; }"]}
{"ids": "47112", "code": ["private boolean remove ( Object o , Object [ ] snapshot , int index ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "Object [ ] current = get Array ( ) ;", "int len = current . length ;", "if ( snapshot != current ) find Index : {", "int prefix = Math . min ( index , len ) ;", "for ( int i = NUM_ ; i < prefix ; i ++ ) {", "if ( current [ i ] != snapshot [ i ] && eq ( o , current [ i ] ) ) {", "index = i ;", "break find Index ; } }", "if ( index >= len ) return false ;", "if ( current [ index ] == o ) break find Index ;", "index = index Of ( o , current , index , len ) ;", "if ( index < NUM_ ) return false ; }", "Object [ ] new Elements = new Object [ len - NUM_ ] ;", "System . arraycopy ( current , NUM_ , new Elements , NUM_ , index ) ;", "System . arraycopy ( current , index + NUM_ , new Elements , index , len - index - NUM_ ) ;", "set Array ( new Elements ) ;", "return true ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "36066", "code": ["public void remove Model ( Model model ) {", "models . remove ( model ) ; }"]}
{"ids": "165", "code": ["public void read Map ( int map Number ) {", "Input Stream map file ;", "try {", "map file = new File Input Stream ( STR_ + map Number + STR_ ) ;", "try {", "byte [ ] data = new byte [ map file . available ( ) ] ;", "map file . read ( data ) ;", "map file . close ( ) ;", "String load data = new String ( data , STR_ ) ;", "make Map ( load data ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }", "catch ( File Not Found Exception e 1 ) {", "e 1 . print Stack Trace ( ) ; } }"]}
{"ids": "86643", "code": ["public static double hoeffding Ln ( double trials , double observed , double prob ) {", "return - NUM_ * Math . pow ( trials * prob - observed , NUM_ ) / trials ; }"]}
{"ids": "49680", "code": ["public void add ( Match match , Applied Region applied Region ) {", "add ( match , applied Region , false ) ; }"]}
{"ids": "79771", "code": ["public void reset ( ) {", "tech Tree . check Sub Tree ( tech Tree . get Path For Row ( NUM_ ) , true ) ; }"]}
{"ids": "10811", "code": ["@ Suppress Warnings ( STR_ ) private static < T > void assert Throws ( final Consumer < Void > consumer , final Class < T > exception Class , final Consumer < T > assert Exception Properties , final String message ) {", "final String normalized Message = null == message ? STR_ : String . format ( STR_ , message ) ;", "try {", "consumer . accept ( null ) ; }", "catch ( final Exception ex ) {", "if ( exception Class . is Assignable From ( ex . get Class ( ) ) ) {", "assert Exception Properties . accept ( ( T ) ex ) ;", "return ; }", "Assert . fail ( String . format ( STR_ , normalized Message , ex . get Class ( ) , ex . get Message ( ) ) ) ; }", "Assert . fail ( String . format ( STR_ , normalized Message , exception Class ) ) ; }"]}
{"ids": "22918", "code": ["public boolean is Empty ( ) {", "return nodes . is Empty ( ) && ways . is Empty ( ) && relations . is Empty ( ) ; }"]}
{"ids": "82002", "code": ["public static void assert Bool ( boolean b ) {", "if ( verbose ) {", "log ( STR_ + b + STR_ ) ; }", "if ( ! b ) {", "throw new Runtime Exception ( ) ; } }"]}
{"ids": "41987", "code": ["public Tag Key Value Map Converter ( boolean null If Empty , String id Key ) {", "Objects . require Non Null ( id Key ) ;", "this . null If Empty = null If Empty ;", "this . add Id = true ;", "this . id Key = id Key ; }"]}
{"ids": "11027", "code": ["private static void post Init ( ) {", "debug All = dbg Table . contains Key ( debug All Token ) ; }"]}
{"ids": "30711", "code": ["private Fast Concurrent Skip List Map . Node < K , V > hi Node ( ) {", "if ( hi == null ) return m . find Last ( ) ;", "else if ( hi Inclusive ) return m . find Near ( hi , m . LT | m . EQ ) ;", "else return m . find Near ( hi , m . LT ) ; }"]}
{"ids": "11090", "code": ["protected void process Event Properties ( Properties event Props ) {", "int status ;", "Node node ;", "Line line ;", "String cmd = event Props . get Property ( COMMAND FIELD ) ;", "int index = Prop Utils . int From Properties ( event Props , INDEX FIELD , ERROR VALUE INT ) ;", "if ( cmd . equals ( NODE OBJECT ) ) {", "int shape = Prop Utils . int From Properties ( event Props , SHAPE FIELD , ERROR VALUE INT ) ;", "if ( index == ERROR VALUE INT ) {", "Debug . error ( STR_ ) ;", "return ; }", "node = node List . get ( index ) ;", "if ( shape == NUM_ ) {", "String icon = event Props . get Property ( ICON FIELD ) ;", "if ( DEBUG ) Debug . output ( STR_ + icon ) ; }", "if ( shape == NODE DELETE ) {", "if ( node != null ) {", "line List . del ( node ) ;", "node List . del ( node ) ; } }", "else if ( shape == NODE MOVE && node != null ) {", "set Node Position From Event Props ( node , event Props ) ;", "line List . move ( node ) ;", "node . set Time ( Double . parse Double ( event Props . get Property ( TIME FIELD , STR_ ) ) ) ; }", "else {", "status = Prop Utils . int From Properties ( event Props , STATUS FIELD , NUM_ ) ;", "int menu = Prop Utils . int From Properties ( event Props , MENU FIELD , NUM_ ) ;", "String label = event Props . get Property ( LABEL FIELD ) ;", "if ( label == null ) {", "label = event Props . get Property ( INDEX FIELD ) ; }", "String ip = event Props . get Property ( IP FIELD ) ;", "boolean is Localhost = false ;", "if ( ip != null && localhost IP != null ) {", "is Localhost = localhost IP . equals ( ip ) ;", "if ( DEBUG ) {", "Debug . output ( STR_ + localhost IP ) ; } }", "if ( DEBUG ) {", "Debug . output ( STR_ + label + STR_ ) ; }", "try {", "if ( shape != ERROR VALUE INT ) {", "node = node List . add ( label , index , shape , menu , status ) ;", "node . set Localhost ( is Localhost ) ; } }", "catch ( Exception e ) {", "Debug . error ( STR_ ) ; }", "set Node Position From Event Props ( node , event Props ) ; } }", "else if ( cmd . equals ( NODE OBJECT STATUS ) ) {", "if ( index == ERROR VALUE INT ) {", "Debug . error ( STR_ ) ;", "return ; }", "node = node List . get ( index ) ;", "if ( node != null ) {", "status = Prop Utils . int From Properties ( event Props , STATUS FIELD , ERROR VALUE INT ) ;", "if ( status != ERROR VALUE INT ) {", "node . set Status ( status ) ; } } }", "else if ( cmd . equals ( LINK OBJECT STATUS ) ) {", "if ( index == ERROR VALUE INT ) {", "Debug . error ( STR_ ) ;", "return ; }", "line = line List . get ( index ) ;", "if ( line != null ) {", "status = Prop Utils . int From Properties ( event Props , STATUS FIELD , ERROR VALUE INT ) ;", "if ( status != ERROR VALUE INT ) {", "line . set Status ( status ) ; } } }", "else if ( cmd . equals ( LINK OBJECT ) ) {", "if ( index == ERROR VALUE INT ) {", "Debug . error ( STR_ ) ;", "return ; }", "line = line List . get ( index ) ;", "int shape = Prop Utils . int From Properties ( event Props , SHAPE FIELD , ERROR VALUE INT ) ;", "if ( shape == NODE DELETE ) {", "line List . del ( index ) ; }", "else {", "status = Prop Utils . int From Properties ( event Props , STATUS FIELD , NUM_ ) ;", "int node 1 = Prop Utils . int From Properties ( event Props , LINK NODE 1 FIELD , ERROR VALUE INT ) ;", "int node 2 = Prop Utils . int From Properties ( event Props , LINK NODE 2 FIELD , ERROR VALUE INT ) ;", "if ( node 1 == ERROR VALUE INT || node 2 == ERROR VALUE INT ) {", "Debug . error ( STR_ ) ;", "return ; }", "Node n 1 = node List . get ( node 1 ) ;", "Node n 2 = node List . get ( node 2 ) ;", "if ( n 1 != null && n 2 != null ) {", "line List . add ( String . value Of ( index ) , index , shape , status , n 1 , n 2 ) ; }", "else {", "if ( DEBUG ) {", "Debug . output ( STR_ ) ; } } } }", "else if ( cmd . equals ( REFRESH ) || cmd . equals ( UPDATE ) ) { }", "else if ( cmd . equals ( CLEAR ) ) {", "if ( node List != null ) {", "node List . flush ( ) ; }", "if ( line List != null ) {", "line List . flush ( ) ; } }", "else {", "if ( DEBUG ) {", "Debug . output ( STR_ + event Props . to String ( ) ) ; } }", "manage Graphics ( ) ; }"]}
{"ids": "14804", "code": ["protected static void add Id Repo AMSDK Plugin ( SSO Token token , String org Name ) throws SMS Exception , SSO Exception {", "Service Config Manager scm = new Service Config Manager ( Service Manager . REALM SERVICE , token ) ;", "Service Config sc = scm . get Organization Config ( org Name , null ) ;", "Map attributes = new Hash Map ( ) ;", "Set values = new Hash Set ( ) ;", "values . add ( STR_ ) ;", "attributes . put ( STR_ , values ) ;", "values = new Hash Set ( ) ;", "values . add ( DN Mapper . realm Name To AMSDK Name ( DN Mapper . org Name To DN ( org Name ) ) ) ;", "attributes . put ( STR_ , values ) ;", "sc . add Sub Config ( STR_ , STR_ , NUM_ , attributes ) ; }"]}
{"ids": "72808", "code": ["public static String on Key Press ( String key ) {", "pin = pin . concat ( key ) ;", "return pin ; }"]}
{"ids": "38448", "code": ["public boolean is Hierachic ( String string ) {", "int index = string . index Of ( m Seperator ) ;", "if ( ( index == ( string . length ( ) - NUM_ ) ) || ( index == - NUM_ ) ) {", "return false ; }", "return true ; }"]}
{"ids": "64480", "code": ["public static final Byte Buffer buffer To Byte Buffer ( final byte [ ] buffer , final Byte Order order ) {", "final Byte Buffer ret Buff = Byte Buffer . wrap ( buffer ) ;", "ret Buff . order ( order ) ;", "return ret Buff ; }"]}
{"ids": "73245", "code": ["private URI process Local Files ( URI uri ) {", "String uri Str = uri . to String ( ) ;", "if ( uri Str . starts With ( STR_ ) ) {", "uri Str = STR_ + System . get Property ( STR_ ) + STR_ + uri Str . substring ( NUM_ ) ;", "URL url ;", "try {", "url = new URL ( uri Str ) ;", "return url . to URI ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }", "return uri ; }"]}
{"ids": "85145", "code": ["public int read Int ( ) throws IO Exception {", "length += NUM_ ;", "int k 1 = in . read ( ) ;", "if ( k 1 < NUM_ ) return NUM_ ;", "int k 2 = in . read ( ) << NUM_ ;", "int k 3 = in . read ( ) << NUM_ ;", "return k 1 + k 2 + k 3 + ( in . read ( ) << NUM_ ) ; }"]}
{"ids": "10091", "code": ["public void add Transformation ( Tag Transformation tag Transformation ) {", "if ( tag Transformation != null ) {", "mappings . put ( tag Transformation . get Source Tag ( ) , tag Transformation ) ; } }"]}
{"ids": "56885", "code": ["private boolean is Db Configuration Present ( ) {", "return String Utils . is Not Blank ( select Column ) && String Utils . is Not Blank ( table Name ) ; }"]}
{"ids": "42745", "code": ["public boolean is Incomplete Numerical Run ( String pin ) {", "final int len = pin . length ( ) ;", "int consecutive = NUM_ ;", "char last = pin . char At ( NUM_ ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "final char c = pin . char At ( i ) ;", "if ( last == c ) {", "consecutive ++ ; }", "else {", "consecutive = NUM_ ; }", "last = c ;", "if ( consecutive >= NUM_ ) {", "return true ; } }", "return false ; }"]}
{"ids": "10659", "code": ["private static void generate Java Script Log Alert Close Window ( Writer writer , String message ) throws IO Exception {", "writer . write ( STR_ + message + STR_ ) ;", "writer . write ( STR_ ) ;", "writer . write ( STR_ ) ; }"]}
{"ids": "71809", "code": ["private static Result Code register Error Result Code ( final int int Value , final Localizable Message name , final Enum result Code Enum ) {", "final Result Code t = new Result Code ( int Value , name , true , result Code Enum ) ;", "ELEMENTS . put ( int Value , t ) ;", "return t ; }"]}
{"ids": "29030", "code": ["public void add All ( Exception Set other ) {", "exception Set . or ( other . exception Set ) ;", "explicit Set . or ( other . explicit Set ) ;", "size = count Bits ( exception Set ) ;", "common Supertype = null ; }"]}
{"ids": "25491", "code": ["@ HLE Unimplemented @ HLE Function ( nid = NUM_ , version = NUM_ ) public int sce Usb Cam Start Video ( ) {", "if ( ! setup Video ( ) ) {", "log . warn ( String . format ( STR_ ) ) ; }", "return NUM_ ; }"]}
{"ids": "15437", "code": ["protected Resource Loader License Locator ( final Charset charset , final String ... license Files ) {", "if ( license Files == null || license Files . length == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( charset == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "this . license Files = new Array List < String > ( Arrays . as List ( license Files ) ) ;", "this . charset = charset ; }"]}
{"ids": "32948", "code": ["@ Inject public Project Type Registry ( Set < Project Type Def > types ) {", "project Types = new Hash Map < > ( ) ;", "validated Data = new Hash Map < > ( ) ;", "validate ( types ) ;", "for ( Project Type Def type : validated Data . values ( ) ) {", "try {", "init ( type ) ; }", "catch ( Project Type Constraint Exception e ) {", "LOG . error ( e . get Message ( ) ) ; } } }"]}
{"ids": "19922", "code": ["static public void add Notification Listener ( JMX Connector jmx Connector , Class < ? > mbean Interface , String mbean Name , Notification Listener notification Listener , boolean ignored ) throws Instance Not Found Exception , Exception {", "M Bean Server Connection mbsc = jmx Connector . get M Bean Server Connection ( ) ;", "Object Name object Name = generate M Bean Object Name ( mbean Interface . get Name ( ) , mbean Name ) ;", "mbsc . add Notification Listener ( object Name , notification Listener , null , null ) ; }"]}
{"ids": "13446", "code": ["private void consume ( ) {", "consumer . subscribe ( topics ) ;", "while ( running . get ( ) ) {", "try {", "Consumer Records records = consumer . poll ( poll Interval Ms ) ;", "if ( records == null ) {", "continue ; }", "Iterator < Consumer Record < String , String > > iterator = records . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "send Message ( iterator . next ( ) ) ; } }", "catch ( Exception ex ) {", "String error = STR_ ;", "logger . error ( error , ex ) ;", "bus . send ( Config Constants . CONSUMER ERROR TOPIC , get Error String ( error , ex . get Message ( ) ) ) ; } } }"]}
{"ids": "33781", "code": ["private byte [ ] read Raw Bytes Slow Path ( final int size ) throws IO Exception {", "if ( size <= NUM_ ) {", "if ( size == NUM_ ) {", "return Internal . EMPTY BYTE ARRAY ; }", "else {", "throw Invalid Protocol Buffer Exception . negative Size ( ) ; } }", "if ( total Bytes Retired + buffer Pos + size > current Limit ) {", "skip Raw Bytes ( current Limit - total Bytes Retired - buffer Pos ) ;", "throw Invalid Protocol Buffer Exception . truncated Message ( ) ; }", "if ( size < BUFFER SIZE ) {", "final byte [ ] bytes = new byte [ size ] ;", "int pos = buffer Size - buffer Pos ;", "System . arraycopy ( buffer , buffer Pos , bytes , NUM_ , pos ) ;", "buffer Pos = buffer Size ;", "ensure Available ( size - pos ) ;", "System . arraycopy ( buffer , NUM_ , bytes , pos , size - pos ) ;", "buffer Pos = size - pos ;", "return bytes ; }", "else {", "final int original Buffer Pos = buffer Pos ;", "final int original Buffer Size = buffer Size ;", "total Bytes Retired += buffer Size ;", "buffer Pos = NUM_ ;", "buffer Size = NUM_ ;", "int size Left = size - ( original Buffer Size - original Buffer Pos ) ;", "final List < byte [ ] > chunks = new Array List < byte [ ] > ( ) ;", "while ( size Left > NUM_ ) {", "final byte [ ] chunk = new byte [ Math . min ( size Left , BUFFER SIZE ) ] ;", "int pos = NUM_ ;", "while ( pos < chunk . length ) {", "final int n = ( input == null ) ? - NUM_ : input . read ( chunk , pos , chunk . length - pos ) ;", "if ( n == - NUM_ ) {", "throw Invalid Protocol Buffer Exception . truncated Message ( ) ; }", "total Bytes Retired += n ;", "pos += n ; }", "size Left -= chunk . length ;", "chunks . add ( chunk ) ; }", "final byte [ ] bytes = new byte [ size ] ;", "int pos = original Buffer Size - original Buffer Pos ;", "System . arraycopy ( buffer , original Buffer Pos , bytes , NUM_ , pos ) ;", "for ( final byte [ ] chunk : chunks ) {", "System . arraycopy ( chunk , NUM_ , bytes , pos , chunk . length ) ;", "pos += chunk . length ; }", "return bytes ; } }"]}
{"ids": "8317", "code": ["public static boolean is Class Literal Possible ( Class Node class Node ) {", "return Modifier . is Public ( class Node . get Modifiers ( ) ) ; }"]}
{"ids": "15435", "code": ["private Properties load Log File ( License license , boolean create ) {", "Properties log = new Properties ( ) ;", "File log File = get Log File ( license ) ;", "try {", "if ( create && log File . create New File ( ) ) {", "logger . fine ( STR_ + log File . get Absolute Path ( ) ) ; }", "final Input Stream in = new File Input Stream ( log File ) ;", "try {", "log . load ( in ) ; }", "finally {", "in . close ( ) ; } }", "catch ( File Not Found Exception ex ) {", "if ( create ) {", "logger . log ( Level . SEVERE , STR_ + log File . get Absolute Path ( ) , ex ) ; }", "else {", "logger . fine ( STR_ ) ; } }", "catch ( IO Exception ex ) {", "logger . log ( Level . WARNING , STR_ + log File . get Absolute Path ( ) , ex ) ; }", "return log ; }"]}
{"ids": "76797", "code": ["public HTML Strip Char Filter Factory ( Map < String , String > args ) {", "super ( args ) ;", "escaped Tags = get Set ( args , STR_ ) ;", "if ( ! args . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ + args ) ; } }"]}
{"ids": "44862", "code": ["public static int update ( long id , V v ) {", "String passwd = ( String ) v . value ( STR_ ) ;", "if ( ! X . is Empty ( passwd ) ) {", "passwd = encrypt ( passwd ) ;", "v . set ( STR_ , passwd , true ) ; }", "else {", "v . remove ( STR_ ) ; }", "return Helper . update ( id , v . set ( STR_ , System . current Time Millis ( ) ) , User . class ) ; }"]}
{"ids": "86158", "code": ["public boolean is Safe Mode ( ) {", "return this . safe Mode ; }"]}
{"ids": "68751", "code": ["public void add Last Item ( M model ) {", "add Item ( m Datas . size ( ) , model ) ; }"]}
{"ids": "6593", "code": ["static boolean has Localized Messages ( ) {", "return GUI Mediator . is English Locale ( ) || ! FIRST MESSAGE . equals ( I 18 n . tr ( FIRST MESSAGE ) ) ; }"]}
{"ids": "43205", "code": ["public static Docker Image from Image Name ( String image Name ) {", "image Name = prepare ( image Name ) ;", "String [ ] parts = image Name . split ( SECTION SEPARATOR ) ;", "switch ( parts . length ) {", "case NUM_ :", "return from Parts ( null , null , parts [ NUM_ ] ) ;", "case NUM_ :", "if ( is Valid Namespace ( parts [ NUM_ ] ) ) {", "return from Parts ( null , parts [ NUM_ ] , parts [ NUM_ ] ) ; }", "else {", "return from Parts ( parts [ NUM_ ] , null , parts [ NUM_ ] ) ; }", "case NUM_ :", "return from Parts ( parts [ NUM_ ] , parts [ NUM_ ] , parts [ NUM_ ] ) ;", "default :", "throw new Illegal Argument Exception ( STR_ + image Name ) ; } }"]}
{"ids": "36828", "code": ["public synchronized void listen ( final Set < Notification Channel > channel Names ) {", "m channels . add All ( channel Names ) ; }"]}
{"ids": "72056", "code": ["private void display Non Verbose ( Console Application app , String category Name , String type Name , Tag tag , Set < String > property Names ) {", "if ( ! app . is Script Friendly ( ) ) {", "display Property Option Key ( app ) ;", "app . println ( ) ;", "app . println ( ) ; }", "Table Builder builder = new Table Builder ( ) ;", "builder . append Heading ( INFO DSCFG HEADING COMPONENT NAME . get ( ) ) ;", "builder . append Heading ( INFO DSCFG HEADING COMPONENT TYPE . get ( ) ) ;", "builder . append Heading ( INFO DSCFG HEADING PROPERTY NAME . get ( ) ) ;", "builder . append Heading ( INFO DSCFG HEADING PROPERTY OPTIONS . get ( ) ) ;", "builder . append Heading ( INFO DSCFG HEADING PROPERTY SYNTAX . get ( ) ) ;", "builder . add Sort Key ( NUM_ ) ;", "builder . add Sort Key ( NUM_ ) ;", "builder . add Sort Key ( NUM_ ) ;", "for ( String category : category Map . key Set ( ) ) {", "if ( category Name != null && ! category Name . equals ( category ) ) {", "continue ; }", "Map < String , Abstract Managed Object Definition < ? , ? > > sub Types = category Map . get ( category ) ;", "for ( String type : sub Types . key Set ( ) ) {", "if ( type Name != null && ! type Name . equals ( type ) ) {", "continue ; }", "Abstract Managed Object Definition < ? , ? > mod = sub Types . get ( type ) ;", "if ( cannot Display ( app , mod , tag ) ) {", "continue ; }", "Set < Property Definition < ? > > pds = get Property Definitions ( mod ) ;", "for ( Property Definition < ? > pd : pds ) {", "if ( cannot Display ( app , pd , property Names ) ) {", "continue ; }", "builder . start Row ( ) ;", "builder . append Cell ( category ) ;", "builder . append Cell ( type ) ;", "builder . append Cell ( pd . get Name ( ) ) ;", "builder . append Cell ( get Property Option Summary ( pd ) ) ;", "Property Definition Usage Builder v = new Property Definition Usage Builder ( false ) ;", "builder . append Cell ( v . get Usage ( pd ) ) ; } } }", "Table Printer printer ;", "if ( app . is Script Friendly ( ) ) {", "printer = create Script Friendly Table Printer ( app . get Output Stream ( ) ) ; }", "else {", "printer = new Text Table Printer ( app . get Output Stream ( ) ) ; }", "builder . print ( printer ) ; }"]}
{"ids": "34385", "code": ["private Document parse ( final String data ) {", "if ( doc Builder == null || data == null ) {", "return null ; }", "Document document = null ;", "try {", "String buf = BEGINPART + data + ENDPART ;", "Input Source input Source = new Input Source ( new String Reader ( buf ) ) ;", "document = doc Builder . parse ( input Source ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "return document ; }"]}
{"ids": "21377", "code": ["public boolean is Production Journal ( Set < String > production Copies , Volume volume ) {", "for ( String production Copy : production Copies ) {", "if ( production Copy . equals Ignore Case ( volume . get Rp Copy Name ( ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "4698", "code": ["public static String decode ( final String escaped ) throws URI Exception {", "try {", "final byte [ ] rawdata = URL Codec . decode Url ( Encoding Util . get Ascii Bytes ( escaped ) ) ;", "return Encoding Util . get String ( rawdata , URI . get Default Protocol Charset ( ) ) ; }", "catch ( final Decoder Exception e ) {", "throw new URI Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "73879", "code": ["void wait Before Next Poll ( int polling Interval ) throws Interrupted Exception {", "synchronized ( this ) {", "wait ( polling Interval ) ; }", "if ( ! poll Outstanding ) {", "return ; }", "log . debug ( STR_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "synchronized ( this ) {", "wait ( polling Interval / NUM_ ) ; }", "log . debug ( STR_ ) ;", "if ( ! poll Outstanding ) {", "return ; } } }"]}
{"ids": "80886", "code": ["private void shift Mapping Vector Tokens Left ( int line Num , int start Col , int shift ) {", "boolean last Was Begin TLA Token = false ;", "int last Begin TLA Tok Col = - NUM_ ;", "Vector line = ( Vector ) mapping Vector . element At ( line Num ) ;", "for ( int i = NUM_ ; i < line . size ( ) ; i ++ ) {", "Mapping Object obj = ( Mapping Object ) line . element At ( i ) ;", "if ( obj . get Type ( ) == Mapping Object . BEGIN TLATOKEN ) {", "Mapping Object . Begin TLA Token tobj = ( Mapping Object . Begin TLA Token ) obj ;", "int col = tobj . get Column ( ) ;", "if ( col >= start Col ) {", "tobj . set Column ( col - shift ) ; }", "last Was Begin TLA Token = true ;", "last Begin TLA Tok Col = tobj . get Column ( ) ; }", "else {", "if ( obj . get Type ( ) == Mapping Object . END TLATOKEN ) {", "Mapping Object . End TLA Token tobj = ( Mapping Object . End TLA Token ) obj ;", "int col = tobj . get Column ( ) ;", "if ( col >= start Col ) {", "tobj . set Column ( col - shift ) ; }", "if ( last Was Begin TLA Token && tobj . get Column ( ) <= last Begin TLA Tok Col ) {", "Pcal Debug . Report Bug ( STR_ ) ; } }", "else if ( obj . get Type ( ) == Mapping Object . SOURCE TOKEN ) {", "Mapping Object . Source Token tobj = ( Mapping Object . Source Token ) obj ;", "int col = tobj . get Begin Column ( ) ;", "if ( col >= start Col ) {", "tobj . set Begin Column ( col - shift ) ; }", "col = tobj . get End Column ( ) ;", "if ( col >= start Col ) {", "tobj . set End Column ( col - shift ) ; }", "last Was Begin TLA Token = false ; } } } }"]}
{"ids": "26959", "code": ["protected Dimension compute Lengths ( String anno Text ) {", "String [ ] lines = Util . split Lines ( anno Text ) ;", "int line Length = NUM_ ;", "for ( String line : lines ) {", "if ( line . length ( ) > line Length ) line Length = line . length ( ) ; }", "return new Dimension ( line Length + NUM_ , lines . length + NUM_ ) ; }"]}
{"ids": "7539", "code": ["public static void write Image Map ( Print Writer writer , String name , Chart Rendering Info info , Tool Tip Tag Fragment Generator tool Tip Tag Fragment Generator , URL Tag Fragment Generator url Tag Fragment Generator ) throws IO Exception {", "writer . println ( Image Map Utilities . get Image Map ( name , info , tool Tip Tag Fragment Generator , url Tag Fragment Generator ) ) ; }"]}
{"ids": "51833", "code": ["Import Note Builder add Message ( Import Note Message . Type type , String message ) {", "if ( ! Strings . is Null Or Empty ( message ) ) {", "messages . add ( new Import Note Message ( type , message ) ) ; }", "return this ; }"]}
{"ids": "4419", "code": ["public static List < String > as String List ( Collection < ? extends Object > objects ) {", "List < String > list = new Array List < > ( ) ;", "for ( Object object : objects ) {", "list . add ( String . value Of ( object ) ) ; }", "return list ; }"]}
{"ids": "34879", "code": ["public < E extends T > E min ( Iterable < E > iterable ) {", "Iterator < E > iterator = iterable . iterator ( ) ;", "E min So Far = iterator . next ( ) ;", "while ( iterator . has Next ( ) ) {", "min So Far = min ( min So Far , iterator . next ( ) ) ; }", "return min So Far ; }"]}
{"ids": "48971", "code": ["public synchronized int read ( byte b [ ] , int off , int len ) throws IO Exception {", "if ( len <= NUM_ ) return NUM_ ;", "int more Space ;", "synchronized ( lock ) {", "if ( pos >= present ) pos = present = NUM_ ;", "else if ( pos >= water Mark ) {", "System . arraycopy ( buffer , pos , buffer , NUM_ , present - pos ) ;", "present -= pos ;", "pos = NUM_ ; }", "int free Space = buffer . length - present ;", "more Space = Math . max ( free Space - requested , NUM_ ) ; }", "if ( more Space > NUM_ ) manager . send Request ( info , more Space ) ;", "synchronized ( lock ) {", "requested += more Space ;", "while ( ( pos >= present ) && ! disconnected ) {", "try {", "lock . wait ( ) ; }", "catch ( Interrupted Exception e ) { } }", "if ( disconnected && pos >= present ) return - NUM_ ;", "int available = present - pos ;", "if ( len < available ) {", "System . arraycopy ( buffer , pos , b , off , len ) ;", "pos += len ;", "return len ; }", "else {", "System . arraycopy ( buffer , pos , b , off , available ) ;", "pos = present = NUM_ ;", "return available ; } } }"]}
{"ids": "30236", "code": ["public static List < Item Stack > consolidate Item Stacks ( List < Item Stack > input Stacks ) {", "List < Item Stack > output Stacks = new Array List < Item Stack > ( ) ;", "for ( Item Stack source IS : input Stacks ) {", "boolean b Found = false ;", "for ( Item Stack dest IS : output Stacks ) {", "if ( dest IS != null && source IS != null && item Stack Ingredients Match ( dest IS , source IS ) ) {", "b Found = true ;", "dest IS . stack Size += source IS . stack Size ; } }", "if ( ! b Found ) output Stacks . add ( source IS . copy ( ) ) ; }", "return output Stacks ; }"]}
{"ids": "18238", "code": ["protected Character is WFXML Char ( String chardata ) {", "Character ref Invalid Char ;", "if ( chardata == null || ( chardata . length ( ) == NUM_ ) ) {", "return null ; }", "char [ ] dataarray = chardata . to Char Array ( ) ;", "int datalength = dataarray . length ;", "if ( f Is XML Version 11 ) {", "int i = NUM_ ;", "while ( i < datalength ) {", "if ( XML 11 Char . is XML 11 Invalid ( dataarray [ i ++ ] ) ) {", "char ch = dataarray [ i - NUM_ ] ;", "if ( XML Char . is High Surrogate ( ch ) && i < datalength ) {", "char ch 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( ch 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( ch , ch 2 ) ) ) {", "continue ; } }", "ref Invalid Char = new Character ( ch ) ;", "return ref Invalid Char ; } } }", "else {", "int i = NUM_ ;", "while ( i < datalength ) {", "if ( XML Char . is Invalid ( dataarray [ i ++ ] ) ) {", "char ch = dataarray [ i - NUM_ ] ;", "if ( XML Char . is High Surrogate ( ch ) && i < datalength ) {", "char ch 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( ch 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( ch , ch 2 ) ) ) {", "continue ; } }", "ref Invalid Char = new Character ( ch ) ;", "return ref Invalid Char ; } } }", "return null ; }"]}
{"ids": "86551", "code": ["public final Parallel Flux < T > do On Next ( Consumer < ? super T > on Next ) {", "Objects . require Non Null ( on Next , STR_ ) ;", "return do On Signal ( this , on Next , null , null , null , null , null , null , null ) ; }"]}
{"ids": "22599", "code": ["public < T extends Data Object > void insert In Batches ( List < T > records , int partition Size , Db Client db Client , String type ) {", "List < List < T > > volume partitions = Lists . partition ( records , partition Size ) ;", "for ( List < T > partition : volume partitions ) {", "try {", "db Client . create Object ( partition ) ;", "log . info ( STR_ , partition . size ( ) , type ) ; }", "catch ( Database Exception e ) {", "log . error ( STR_ , type , e ) ; } } }"]}
{"ids": "14756", "code": ["public void modify ( SSO Token token , String obj Name , Modification Item [ ] mods ) throws SMS Exception , SSO Exception {", "if ( ( obj Name == null ) || ( obj Name . length ( ) == NUM_ ) || ( mods == null ) || ( mods . length == NUM_ ) ) {", "throw new Illegal Argument Exception ( STR_ + STR_ ) ; }", "m RW Lock . read Request ( ) ;", "try {", "if ( ! root . is Exists ( m Root Dir , obj Name ) ) {", "String errmsg = STR_ + obj Name + STR_ ;", "m Debug . error ( errmsg ) ;", "throw new Service Not Found Exception ( errmsg ) ; } }", "finally {", "m RW Lock . read Done ( ) ; }", "m RW Lock . write Request ( ) ;", "try {", "SMS Flat File Tree Node node = root . get Child ( obj Name ) ;", "if ( node == null ) {", "String errmsg = STR_ + obj Name + STR_ ;", "m Debug . error ( errmsg ) ;", "throw new Service Not Found Exception ( errmsg ) ; }", "String filepath = node . get Attribute Filename ( m Root Dir ) ;", "if ( filepath == null ) {", "String errmsg = STR_ + obj Name + STR_ ;", "m Debug . error ( errmsg ) ;", "throw new Service Not Found Exception ( errmsg ) ; }", "File filehandle = new File ( filepath ) ;", "if ( ! filehandle . is File ( ) ) {", "String errmsg = STR_ + STR_ + obj Name + STR_ ;", "m Debug . error ( errmsg ) ;", "throw new Service Not Found Exception ( errmsg ) ; }", "Properties props = load Properties ( filehandle , obj Name ) ;", "boolean has Sun Xml Key Value = props . get Property ( SMS Entry . ATTR XML KEYVAL ) != null ;", "for ( int i = NUM_ ; i < mods . length ; i ++ ) {", "modify Values ( obj Name , mods [ i ] , props ) ; }", "save Properties ( props , filehandle , obj Name ) ;", "String new Sun XML Key Value = props . get Property ( SMS Entry . ATTR XML KEYVAL ) ;", "if ( new Sun XML Key Value != null ) {", "Set xml Key Vals = to Val Set ( SMS Entry . ATTR XML KEYVAL , new Sun XML Key Value ) ;", "if ( ! has Sun Xml Key Value ) {", "delete Sun Xml Key Val Files ( node ) ; }", "create Sun Xml Key Val Files ( node , xml Key Vals ) ;", "save Directory Tree ( ) ; } }", "finally {", "m RW Lock . write Done ( ) ; } }"]}
{"ids": "39761", "code": ["public void remove On Tab Selected Listener ( On Tab Selected Listener listener ) {", "if ( listener != null ) {", "m Listeners . remove ( listener ) ; } }"]}
{"ids": "19851", "code": ["public Connect Uri Manager ( List < String > connect Uri ) throws THL Exception {", "this . uri List = connect Uri ;", "if ( connect Uri . size ( ) == NUM_ ) {", "throw new THL Exception ( STR_ ) ; } }"]}
{"ids": "21585", "code": ["private void add Volumes To Parking Storage Group ( Storage System storage , String policy Name , Set < String > volume Device Ids ) throws Exception {", "String [ ] tokens = policy Name . split ( Constants . SMIS PLUS REGEX ) ;", "CIM Object Path group Path = helper . get Volume Group Based On SLO ( storage , storage , tokens [ NUM_ ] , tokens [ NUM_ ] , tokens [ NUM_ ] ) ;", "if ( group Path == null ) {", "group Path = helper . create Volume Group Based On SLO ( storage , storage , tokens [ NUM_ ] , tokens [ NUM_ ] , tokens [ NUM_ ] ) ; }", "CIM Argument [ ] in Args = helper . get Add Volumes To Masking Group Input Arguments ( storage , group Path , volume Device Ids ) ;", "CIM Argument [ ] out Args = new CIM Argument [ NUM_ ] ;", "Smis Job add Volumes To SG Job = new Smis Synch Sub Task Job ( null , storage . get Id ( ) , Smis Constants . ADD MEMBERS ) ;", "helper . invoke Method Synchronously ( storage , cim Path . get Controller Config Svc Path ( storage ) , STR_ , in Args , out Args , add Volumes To SG Job ) ; }"]}
{"ids": "24121", "code": ["private boolean is Stoppable ( ) {", "return ( is Running ( ) && get Cache ( ) != null ) ; }"]}
{"ids": "51903", "code": ["private void log ( String message , String level , String level Color , Print Stream ps ) {", "String Builder builder = new String Builder ( ) ;", "if ( ! level . equals ( STR_ ) ) builder . append ( get Prefix ( level , level Color ) ) ;", "builder . append ( message ) ;", "String ts = builder . to String ( ) ;", "ps . println ( ts ) ;", "for ( Log Handler hand : handlers ) hand . on Log ( level , message , ts , this ) ; }"]}
{"ids": "25012", "code": ["public static boolean is Public ( int mod ) {", "return Modifier . is Public ( mod ) ; }"]}
{"ids": "52972", "code": ["public JSON Buffer append String ( Object cont ) {", "if ( stack . empty ( ) || stack . peek ( ) != Operand . ARRAY ) {", "throw new JSON Exception ( STR_ ) ; }", "add Quoted String ( cont ) ;", "add Separator ( ) ;", "return this ; }"]}
{"ids": "19928", "code": ["public static void delete User From Authentication Info ( Authentication Info authentication Info ) throws Server Runtime Exception {", "String username = authentication Info . get Username ( ) ;", "String password File Location = authentication Info . get Password File Location ( ) ;", "try {", "Properties Configuration props = new Properties Configuration ( password File Location ) ;", "String username In File = props . get String ( username ) ;", "if ( username In File == null ) {", "throw new Server Runtime Exception ( Message Format . format ( STR_ , username ) ) ; }", "props . clear Property ( username ) ;", "props . save ( ) ; }", "catch ( org . apache . commons . configuration . Configuration Exception ce ) {", "logger . error ( STR_ + authentication Info . get Password File Location ( ) , ce ) ;", "throw new Server Runtime Exception ( STR_ + ce . get Message ( ) ) ; } }"]}
{"ids": "14228", "code": ["public void error ( Level level , String message Id , String data [ ] , Object session ) throws Log Exception {", "error ( level , message Id , data , session , null ) ; }"]}
{"ids": "19630", "code": ["public synchronized void remove ( I Audio Processor processor ) {", "processors . remove ( processor ) ;", "build Final Processor ( ) ; }"]}
{"ids": "15571", "code": ["private boolean is Method Contained ( Method m , List < Method > wrapper Methods ) {", "String name = m . get Name ( ) ;", "Class < ? > [ ] param Types = m . get Parameter Types ( ) ;", "Class < ? > return Type = m . get Return Type ( ) ;", "for ( Method wm : wrapper Methods ) {", "if ( name . equals ( wm . get Name ( ) ) && Arrays . equals ( param Types , wm . get Parameter Types ( ) ) && return Type == wm . get Return Type ( ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "74525", "code": ["void update Pressed ( Action Event e , boolean new Route ) {", "String u Name = user Name . get Text ( ) ;", "Route g = check Names OK ( ) ;", "if ( g == null ) {", "return ; }", "g . set User Name ( u Name ) ;", "g . clear Output Turnouts ( ) ;", "g . clear Output Sensors ( ) ;", "g . clear Route Sensors ( ) ;", "initialize Included List ( ) ;", "set Turnout Information ( g ) ;", "set Sensor Information ( g ) ;", "g . set Output Script Name ( script File . get Text ( ) ) ;", "g . set Output Sound Name ( sound File . get Text ( ) ) ;", "set Control Information ( g ) ;", "cur Route = g ;", "finish Update ( ) ;", "status 1 . set Text ( ( new Route ? Bundle . get Message ( STR_ ) : Bundle . get Message ( STR_ ) ) + STR_ + u Name + STR_ + included Turnout List . size ( ) + STR_ + Bundle . get Message ( STR_ ) + STR_ + included Sensor List . size ( ) + STR_ + Bundle . get Message ( STR_ ) + STR_ ) ; }"]}
{"ids": "39369", "code": ["private static void check For X Stream ( ) {", "try {", "Class . for Name ( STR_ ) ;", "m Present = true ; }", "catch ( Exception e ) {", "m Present = false ; } }"]}
{"ids": "32106", "code": ["@ Override public int batch Size ( ) {", "return batch Size ; }"]}
{"ids": "65537", "code": ["public void clear ( ) {", "m Attached Scrap . clear ( ) ;", "recycle And Clear Cached Views ( ) ; }"]}
{"ids": "9776", "code": ["public D Check Update ( J Frame parent ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "init Components ( ) ; }"]}
{"ids": "76931", "code": ["public static Automaton minimize Simple ( Automaton a ) {", "Set < Integer > initial Set = new Hash Set < Integer > ( ) ;", "a = determinize Simple ( Operations . reverse ( a , initial Set ) , initial Set ) ;", "initial Set . clear ( ) ;", "a = determinize Simple ( Operations . reverse ( a , initial Set ) , initial Set ) ;", "return a ; }"]}
{"ids": "71588", "code": ["public void add Column ( Column column ) {", "if ( column != null ) {", "columns . add ( column ) ; } }"]}
{"ids": "52969", "code": ["private boolean check For Na Ns ( Number Vector vec ) {", "for ( int i = NUM_ , d = vec . get Dimensionality ( ) ; i < d ; i ++ ) {", "double v = vec . double Value ( i ) ;", "if ( v != v ) {", "return true ; } }", "return false ; }"]}
{"ids": "35415", "code": ["public static void fill ( String Builder strb , int offset ) {", "while ( strb . length ( ) < offset ) strb . append ( STR_ ) ; }"]}
{"ids": "35930", "code": ["public void open For Write ( ) throws Event Exception {", "File f = new File ( Config Utils . get Initial Property Expanded ( m address . get Pathname ( ) ) ) ;", "try {", "if ( ! f . exists ( ) ) {", "f . create New File ( ) ; }", "else {", "LOGGER . info ( STR_ + m address . get Pathname ( ) ) ; } }", "catch ( IO Exception ioe ) {", "throw new Event Exception ( STR_ + m address . get Pathname ( ) + STR_ + ioe ) ; }", "try {", "m fos = new File Output Stream ( f , true ) ; }", "catch ( File Not Found Exception fnfe ) {", "throw new Event Exception ( STR_ + m address . get Pathname ( ) + STR_ + fnfe ) ; } }"]}
{"ids": "74695", "code": ["public final double cos ( ) {", "return Math . cos ( this . radians ) ; }"]}
{"ids": "60225", "code": ["public int size ( ) {", "return prefixes . size ( ) ; }"]}
{"ids": "83903", "code": ["public static String timestamp ( Date Time ts ) {", "return Long . to String ( ts . get Millis ( ) / NUM_ ) ; }"]}
{"ids": "67632", "code": ["public String consume ( String name , boolean required ) throws Parse Exception {", "if ( name == null ) {", "if ( content == null && required ) {", "throw new Parse Exception ( Core Error Domain . ERR . missing Required Content ) ; }", "content Consumed = true ;", "return content ; }", "String value = attrs . get ( name ) ;", "if ( value == null ) {", "if ( required ) {", "Parse Exception pe = new Parse Exception ( Core Error Domain . ERR . missing Attribute ) ;", "pe . set Internal Reason ( STR_ + name + STR_ ) ;", "throw pe ; }", "return null ; }", "attrs . remove ( name ) ;", "return value ; }"]}
{"ids": "72325", "code": ["public int copy ( byte [ ] bytes , int at ) {", "System . arraycopy ( this . bytes , NUM_ , bytes , at , this . length ) ;", "return at + this . length ; }"]}
{"ids": "40132", "code": ["public void import Key ( EC Key key ) {", "lock . lock ( ) ;", "try {", "check Key Encryption State Matches ( key ) ;", "if ( has Key ( key ) ) return ;", "import Key Locked ( key ) ;", "queue On Keys Added ( Immutable List . of ( key ) ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "83513", "code": ["public Connection Group Tree ( User Context user Context , Connection Group root , List < Object Permission . Type > permissions ) throws Guacamole Exception {", "this . root API Group = new API Connection Group ( root ) ;", "retrieved Groups . put ( root . get Identifier ( ) , this . root API Group ) ;", "User self = user Context . self ( ) ;", "this . connection Permissions = self . get Connection Permissions ( ) ;", "this . sharing Profile Permissions = self . get Sharing Profile Permissions ( ) ;", "this . connection Directory = user Context . get Connection Directory ( ) ;", "this . connection Group Directory = user Context . get Connection Group Directory ( ) ;", "this . sharing Profile Directory = user Context . get Sharing Profile Directory ( ) ;", "add Connection Group Descendants ( Collections . singleton ( root ) , permissions ) ; }"]}
{"ids": "9516", "code": ["private boolean contains Single Metric ( Buffered Reader reader ) throws Format Parse Exception {", "try {", "reader . mark ( NUM_ ) ;", "char first Char = ( char ) reader . read ( ) ;", "reader . reset ( ) ;", "return first Char == STR_ ; }", "catch ( IO Exception e ) {", "throw new Format Parse Exception ( STR_ , e ) ; } }"]}
{"ids": "14916", "code": ["private void read Service Config ( ) throws SSO Exception , SMS Exception {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ ) ; }", "SSO Token internal Token = ( SSO Token ) Access Controller . do Privileged ( Admin Token Action . get Instance ( ) ) ;", "service Schema Manager = new Service Schema Manager ( G 11 N SETTINGS SERVICE NAME , internal Token ) ;", "Service Schema gsc = service Schema Manager . get Global Schema ( ) ;", "raw Service Data = gsc . get Attribute Defaults ( ) ; }"]}
{"ids": "86443", "code": ["public void refresh Preferences ( Context context ) {", "if ( m Enabled Res Id != NUM_ ) {", "final Shared Preferences prefs = Preference Manager . get Default Shared Preferences ( context ) ;", "if ( ! prefs . get Boolean ( context . get String ( m Enabled Res Id ) , m Enabled Default ) ) {", "set Trigger Keys ( Collections . < Long > empty Set ( ) ) ;", "return ; } }", "set Trigger Keys ( Key Combo Preference . get Key Codes For Preference ( context , m Assigned Keys Res Id ) ) ; }"]}
{"ids": "2790", "code": ["void add Inherited Types ( Type Mirror type Mirror , Types types Utils ) {", "if ( ! Compiler Utils . type Mirror In Collection ( inherited Types , type Mirror , types Utils ) ) {", "inherited Types . add ( type Mirror ) ; } }"]}
{"ids": "83927", "code": ["public static Histogram multiply ( Histogram x , double y ) {", "return x . modify Event Counters ( null ) ; }"]}
{"ids": "31848", "code": ["public void add Cache Participants ( Map < UUID , Ignite Uuid > all Participants , Map < UUID , Ignite Uuid > added Participants ) {", "ver Store . add Participants ( all Participants , added Participants ) ; }"]}
{"ids": "13754", "code": ["private void savepost Mni ( String mnipost Location , String mnipost Resp Location , List manage Name Id List , com . sun . identity . saml 2 . jaxb . metadata . Object Factory obj Fact ) throws JAXB Exception {", "if ( mnipost Location != null && mnipost Location . length ( ) > NUM_ ) {", "Manage Name ID Service Element sls Elem Post = obj Fact . create Manage Name ID Service Element ( ) ;", "sls Elem Post . set Binding ( http Post Binding ) ;", "sls Elem Post . set Location ( mnipost Location ) ;", "sls Elem Post . set Response Location ( mnipost Resp Location ) ;", "manage Name Id List . add ( sls Elem Post ) ; } }"]}
{"ids": "2636", "code": ["public static boolean go To Update Page ( Context context ) {", "final Uri play Store Uri = Uri . parse ( STR_ + context . get Package Name ( ) ) ;", "Fresh Air Log . i ( STR_ + play Store Uri . to String ( ) ) ;", "final Intent play Store Intent = new Intent ( Intent . ACTION VIEW , play Store Uri ) ;", "final Package Manager package Manager = context . get Package Manager ( ) ;", "for ( Resolve Info resolve Info : package Manager . query Intent Activities ( play Store Intent , NUM_ ) ) {", "final Activity Info resolve Activity = resolve Info . activity Info ;", "final String resolve Package Name = resolve Activity . package Name ;", "if ( resolve Package Name . equals ( STR_ ) ) {", "Fresh Air Log . i ( STR_ ) ;", "play Store Intent . set Component ( new Component Name ( resolve Package Name , resolve Activity . name ) ) ;", "context . start Activity ( play Store Intent ) ;", "return true ; } }", "Fresh Air Log . e ( STR_ + play Store Uri . to String ( ) ) ;", "return false ; }"]}
{"ids": "60310", "code": ["public static List < String > to Relative Files ( @ Not Null Virtual File root , @ Not Null final Collection < Virtual File > files ) {", "Array List < String > rc = new Array List < String > ( files . size ( ) ) ;", "for ( Virtual File file : files ) {", "rc . add ( relative Path ( root , file ) ) ; }", "return rc ; }"]}
{"ids": "31089", "code": ["synchronized static void ensure Security Manager ( ) {", "if ( System . get Security Manager ( ) == null ) {", "System . set Security Manager ( new RMI Security Manager ( ) ) ; } }"]}
{"ids": "65575", "code": ["public static Big Decimal rate ( int p C Currency From ID , int p C Currency To ID , Timestamp p Conversion Date , int p C Conversion Type ID , int p AD Client ID , int p AD Org ID ) throws SQL Exception {", "if ( p C Currency From ID == p C Currency To ID ) return Adempiere . ONE ;", "Timestamp Conversion Date = p Conversion Date ;", "if ( Conversion Date == null ) Conversion Date = new Timestamp ( System . current Time Millis ( ) ) ;", "Conversion Date = Adempiere . trunc ( Conversion Date ) ;", "int C Conversion Type ID = p C Conversion Type ID ;", "if ( C Conversion Type ID == NUM_ ) {", "String sql = STR_ + STR_ + STR_ + STR_ + STR_ ;", "C Conversion Type ID = Adempiere . get SQL Value ( sql , p AD Client ID ) ; }", "Big Decimal rate = null ;", "String sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ;", "Prepared Statement pstmt = Adempiere . prepare Statement ( sql ) ;", "pstmt . set Int ( NUM_ , p C Currency From ID ) ;", "pstmt . set Int ( NUM_ , p C Currency To ID ) ;", "pstmt . set Int ( NUM_ , C Conversion Type ID ) ;", "pstmt . set Timestamp ( NUM_ , Conversion Date ) ;", "pstmt . set Timestamp ( NUM_ , Conversion Date ) ;", "pstmt . set Int ( NUM_ , p AD Client ID ) ;", "pstmt . set Int ( NUM_ , p AD Org ID ) ;", "Result Set rs = pstmt . execute Query ( ) ;", "if ( rs . next ( ) ) {", "rate = rs . get Big Decimal ( NUM_ ) ; }", "rs . close ( ) ;", "pstmt . close ( ) ;", "if ( rate == null ) return null ;", "return rate ; }"]}
{"ids": "34468", "code": ["public static List < Rule > parse Referential ( String path ) {", "Ruleset ruleset = Delphi Rules Utils . build Rule Set From Xml ( Delphi Rules Utils . get Configuration From File ( path ) ) ;", "List < Rule > rules Repository = new Array List < Rule > ( ) ;", "for ( Delphi Rule f Rule : ruleset . get Rules ( ) ) {", "rules Repository . add ( create Repository Rule ( f Rule ) ) ; }", "return rules Repository ; }"]}
{"ids": "14094", "code": ["public org . w 3 c . dom . Document encrypt And Replace WSS Elements ( org . w 3 c . dom . Document doc , java . util . Map elm Map , java . lang . String enc Data Enc Alg , int enc Data Enc Alg Strength , String cert Alias , int kek Strength , java . lang . String token Type , java . lang . String provider ID ) throws Encryption Exception {", "return null ; }"]}
{"ids": "10122", "code": ["public void insert Child ( Node node , int index ) {", "node . detach From Parent ( ) ;", "node . parent Node = this ;", "try {", "init Child Nodes ( node ) ;", "child Nodes . add ( index , node ) ; }", "catch ( Index Out Of Bounds Exception ignore ) {", "throw new Lagarto DOM Exception ( STR_ + index ) ; }", "reindex Children ( ) ; }"]}
{"ids": "73144", "code": ["private boolean between Zero And One ( final String param Name , final double val ) {", "if ( ( val < NUM_ ) || ( val > NUM_ ) ) {", "J Option Pane . show Message Dialog ( null , param Name + STR_ , STR_ , J Option Pane . WARNING MESSAGE ) ;", "return false ; }", "return true ; }"]}
{"ids": "13683", "code": ["private static List < String > split Camel Case ( String class Name ) {", "String remaining = class Name ;", "List < String > result = new Array List < String > ( ) ;", "while ( ! remaining . is Empty ( ) ) {", "boolean found = false ;", "for ( int i = NUM_ ; i < remaining . length ( ) ; i ++ ) {", "if ( Character . is Upper Case ( remaining . char At ( i ) ) ) {", "result . add ( remaining . substring ( NUM_ , i ) ) ;", "remaining = remaining . substring ( i ) ;", "found = true ;", "break ; } }", "if ( ! found ) {", "result . add ( remaining ) ;", "remaining = STR_ ; } }", "return result ; }"]}
{"ids": "15267", "code": ["public static Node List select Node List ( Node doc , String str , Namespace Context nsctx ) throws X Path Exception {", "X Path Factory xpf = xpath Factory Cache . get Instance For Current Thread ( ) ;", "X Path xpath = xpf . new X Path ( ) ;", "xpath . set Namespace Context ( nsctx ) ;", "X Path Expression expr = xpath . compile ( str ) ;", "return ( Node List ) expr . evaluate ( doc , X Path Constants . NODESET ) ; }"]}
{"ids": "24215", "code": ["private void generate Discovery ( ) throws SAX Exception {", "handler . start Element ( STR_ , LOCATORS , LOCATORS , EMPTY ) ;", "generate Locators ( ) ;", "handler . end Element ( STR_ , LOCATORS , LOCATORS ) ; }"]}
{"ids": "4773", "code": ["protected Basic Type ( Class < T > type , int sql Type ) {", "super ( type , sql Type ) ;", "check Null = ! type . is Primitive ( ) ; }"]}
{"ids": "36480", "code": ["public void apply Properties ( ) {", "for ( Parameter Type type : all Parameter Types ) {", "String value = all Parameter Values . get Property ( type . get Key ( ) ) ;", "Parameter Service . set Parameter Value ( type , value ) ; } }"]}
{"ids": "31695", "code": ["public void add ( Cluster Node new Node ) {", "if ( node != null ) {", "nodes = new Array List < > ( NUM_ ) ;", "nodes . add ( node ) ;", "node = null ; }", "nodes . add ( new Node ) ; }"]}
{"ids": "74251", "code": ["public boolean check If Backup Set Exists ( String set Name ) {", "validate Not Null Or Empty ( set Name ) ;", "try {", "File file = new File ( get Backup Root ( ) , set Name ) ;", "if ( file . exists ( ) ) {", "return true ; } }", "catch ( Exception e ) {", "log . error ( STR_ ) ; }", "return false ; }"]}
{"ids": "39544", "code": ["public static String [ ] to Quoted And Comma Separated Array ( String str ) throws IO Exception {", "Linked List < String > values = new Linked List < String > ( ) ;", "Stream Tokenizer tt = new Stream Tokenizer ( new String Reader ( str ) ) ;", "tt . word Chars ( STR_ , STR_ ) ;", "tt . word Chars ( STR_ , STR_ ) ;", "tt . word Chars ( NUM_ + NUM_ , NUM_ ) ;", "tt . whitespace Chars ( NUM_ , STR_ ) ;", "tt . quote Char ( STR_ ) ;", "tt . quote Char ( STR_ ) ;", "while ( tt . next Token ( ) != Stream Tokenizer . TT EOF ) {", "switch ( tt . ttype ) {", "case Stream Tokenizer . TT WORD :", "case STR_ :", "case STR_ :", "values . add ( tt . sval ) ;", "break ; } }", "return values . to Array ( new String [ values . size ( ) ] ) ; }"]}
{"ids": "4263", "code": ["public Smart Thresholds parse ( final Resource threshold File Resource ) throws IO Exception {", "final Smart Thresholds holder = new Smart Thresholds ( ) ;", "Buffered Reader reader = null ;", "try {", "reader = new Buffered Reader ( new Input Stream Reader ( threshold File Resource . get Input Stream ( ) ) ) ;", "String line ;", "while ( ( line = reader . read Line ( ) ) != null ) {", "if ( line . starts With ( STR_ ) ) {", "String [ ] line Input = line . split ( STR_ ) ;", "holder . add Threshold ( new Smart Threshold ( line Input ) ) ; } } }", "finally {", "if ( reader != null ) {", "reader . close ( ) ; } }", "return holder ; }"]}
{"ids": "9302", "code": ["public void shutdown ( ) {", "Executor Service executor = Executors . new Scheduled Thread Pool ( NUM_ ) ;", "executor . submit ( create Shutdown ( NUM_ ) ) ; }"]}
{"ids": "39462", "code": ["@ Override public Point drawing To View ( Point 2 D . Double p ) {", "return new Point ( ( int ) ( p . x * scale Factor ) - translation . x , ( int ) ( p . y * scale Factor ) - translation . y ) ; }"]}
{"ids": "80594", "code": ["public void add Descriptor ( final Setup Descriptor desc ) {", "descriptors . add ( desc ) ; }"]}
{"ids": "26340", "code": ["public static String compile Progress Success Action ( String progress Success Action ) throws Template Model Exception {", "Environment env = Common Ftl Util . get Current Environment ( ) ;", "return compile Progress Success Action ( progress Success Action , Context Ftl Util . get Request ( env ) , Context Ftl Util . get Response ( env ) ) ; }"]}
{"ids": "44078", "code": ["public static String join ( String separator , float ... elements ) {", "if ( elements == null || elements . length == NUM_ ) {", "return STR_ ; }", "List < Number > list = new Array List < Number > ( elements . length ) ;", "for ( Float elem : elements ) {", "list . add ( elem ) ; }", "return join ( separator , list ) ; }"]}
{"ids": "57104", "code": ["public static void put Unsigned Byte ( Byte Buffer bb , short v ) {", "bb . put ( ( byte ) ( v & NUM_ ) ) ; }"]}
{"ids": "76818", "code": ["@ Override public Trie optimize ( Trie orig ) {", "List < Char Sequence > cmds = orig . cmds ;", "List < Row > rows = new Array List < > ( ) ;", "List < Row > orows = orig . rows ;", "int remap [ ] = new int [ orows . size ( ) ] ;", "for ( int j = orows . size ( ) - NUM_ ; j >= NUM_ ; j -- ) {", "Row now = new Remap ( orows . get ( j ) , remap ) ;", "boolean merged = false ;", "for ( int i = NUM_ ; i < rows . size ( ) ; i ++ ) {", "Row q = merge ( now , rows . get ( i ) ) ;", "if ( q != null ) {", "rows . set ( i , q ) ;", "merged = true ;", "remap [ j ] = i ;", "break ; } }", "if ( merged == false ) {", "remap [ j ] = rows . size ( ) ;", "rows . add ( now ) ; } }", "int root = remap [ orig . root ] ;", "Arrays . fill ( remap , - NUM_ ) ;", "rows = remove Gaps ( root , rows , new Array List < Row > ( ) , remap ) ;", "return new Trie ( orig . forward , remap [ root ] , cmds , rows ) ; }"]}
{"ids": "8950", "code": ["protected void wait For External Store Mount ( ) throws Exception {", "String ext Storage State = Environment . get External Storage State ( ) ;", "int current Wait Time = NUM_ ;", "while ( ! ext Storage State . equals ( Environment . MEDIA MOUNTED ) ) {", "Log . i ( LOG TAG , STR_ ) ;", "current Wait Time = timeout Wait ( current Wait Time , DEFAULT WAIT POLL TIME , DEFAULT MAX WAIT TIME , STR_ ) ;", "ext Storage State = Environment . get External Storage State ( ) ; } }"]}
{"ids": "50960", "code": ["public boolean upload And Install Apk ( @ Not Null I Device device , @ Not Null String package Name , @ Not Null File local File , @ Not Null Launch Status launch Status ) {", "if ( ! needs Install ( device , local File , package Name ) ) {", "return true ; }", "String remote Path = STR_ + package Name ;", "my Printer . stdout ( STR_ + local File + STR_ + remote Path ) ;", "try {", "device . push File ( local File . get Path ( ) , remote Path ) ;", "boolean installed = install App ( device , remote Path , package Name , launch Status ) ;", "if ( installed ) {", "my Installed Apk Cache . set Installed ( device , local File , package Name ) ; }", "return installed ; }", "catch ( Exception e ) {", "my Printer . stderr ( e . to String ( ) ) ;", "return false ; } }"]}
{"ids": "6699", "code": ["public void open ( final long [ ] list , final int position ) {", "launch Player Activity = true ;", "synchronized ( this ) {", "if ( m Shuffle Mode == SHUFFLE AUTO ) {", "m Shuffle Mode = SHUFFLE NORMAL ; }", "final long old Id = get Audio Id ( ) ;", "final int listlength = list . length ;", "boolean newlist = true ;", "if ( m Play List Len == listlength ) {", "newlist = false ;", "for ( int i = NUM_ ; i < listlength ; i ++ ) {", "if ( list [ i ] != m Play List [ i ] ) {", "newlist = true ;", "break ; } } }", "if ( newlist ) {", "add To Play List ( list , - NUM_ ) ;", "notify Change ( QUEUE CHANGED ) ; }", "if ( position >= NUM_ ) {", "m Play Pos = position ; }", "else {", "m Play Pos = m Shuffler . next Int ( m Play List Len ) ; }", "m History . clear ( ) ;", "open Current And Next ( ) ;", "if ( old Id != get Audio Id ( ) ) {", "notify Change ( META CHANGED ) ; } } }"]}
{"ids": "29", "code": ["protected static Node deserialize String ( String doc ) {", "try {", "String Reader reader = new String Reader ( doc ) ;", "Stream Source source = new Stream Source ( reader ) ;", "DOM Result result = new DOM Result ( ) ;", "Transformer Factory tf = Transformer Factory . new Instance ( ) ;", "Transformer transformer = tf . new Transformer ( ) ;", "transformer . set Output Property ( Output Keys . ENCODING , DEFAULT ENCODING ) ;", "transformer . set Output Property ( Output Keys . INDENT , DEFAULT INDENT ) ;", "transformer . transform ( source , result ) ;", "return result . get Node ( ) ; }", "catch ( Throwable e ) {", "log . log ( Level . SEVERE , STR_ , e ) ; }", "return null ; }"]}
{"ids": "71279", "code": ["public void send Event To Agent ( final String event ) {", "synchronized ( event Socket ) {", "event Writer . print ( event ) ;", "event Writer . flush ( ) ; } }"]}
{"ids": "1722", "code": ["private void apply JMS Objects ( Hash Map < String , String > filters ) {", "String Writer writer = new String Writer ( ) ;", "Print Writer print Writer = new Print Writer ( writer ) ;", "print Writer . println ( ) ;", "for ( String str : get Queue List ( ) ) {", "print Writer . println ( STR_ + str + STR_ ) ; }", "for ( String str : get Topic List ( ) ) {", "print Writer . println ( STR_ + str + STR_ ) ; }", "filters . put ( STR_ , writer . to String ( ) ) ; }"]}
{"ids": "65639", "code": ["public void add Selection Column ( Grid Field m Field ) {", "log . config ( m Field . get Header ( ) ) ;", "int display Length = m Field . get Display Length ( ) ;", "if ( display Length <= NUM_ || display Length > FIELDLENGTH ) m Field . set Display Length ( FIELDLENGTH ) ;", "else display Length = NUM_ ;", "W Editor editor = null ;", "Label label = null ;", "Row panel = new Row ( ) ;", "content Simple Rows . append Child ( panel ) ;", "if ( m Field . is Range ( ) ) {", "Hbox box = new Hbox ( ) ;", "editor = Web Editor Factory . get Editor ( m Field , false ) ;", "label = editor . get Label ( ) ;", "editor . set Mandatory ( false ) ;", "editor . set Read Write ( true ) ;", "editor . dynamic Display ( ) ;", "Component field Label = editor . get Component ( ) ;", "box . append Child ( editor . get Component ( ) ) ;", "range First Editor . add ( m Field . get Column Name ( ) ) ;", "W Editor to Range Editor = Web Editor Factory . get Editor ( m Field , false ) ;", "to Range Editor . set Mandatory ( false ) ;", "to Range Editor . set Read Write ( true ) ;", "to Range Editor . dynamic Display ( ) ;", "m s Editors 2 . add ( to Range Editor ) ;", "Label separator = new Label ( STR_ ) ;", "box . append Child ( separator ) ;", "Component field Label 1 = to Range Editor . get Component ( ) ;", "box . append Child ( to Range Editor . get Component ( ) ) ;", "if ( display Length > NUM_ ) m Field . set Display Length ( display Length ) ;", "if ( is Two Columns ) {", "if ( ! is Pair ) panel = new Row ( ) ; }", "else panel = new Row ( ) ;", "panel . append Child ( Layout Utils . make Right Align ( label ) ) ;", "panel . append Child ( box ) ;", "field Label . add Event Listener ( Events . ON OK , this ) ;", "field Label 1 . add Event Listener ( Events . ON OK , this ) ; }", "else {", "editor = Web Editor Factory . get Editor ( m Field , false ) ;", "label = editor . get Label ( ) ;", "editor . set Mandatory ( false ) ;", "editor . set Read Write ( true ) ;", "editor . dynamic Display ( ) ;", "Component field Label = editor . get Component ( ) ;", "if ( display Length > NUM_ ) m Field . set Display Length ( display Length ) ;", "panel . append Child ( Layout Utils . make Right Align ( label ) ) ;", "panel . append Child ( field Label ) ;", "field Label . add Event Listener ( Events . ON OK , this ) ;", "m s Editors 2 . add ( null ) ; }", "m s Editors . add ( editor ) ; }"]}
{"ids": "75716", "code": ["public void add Search Listener ( Search Listener l ) {", "m Search Listeners . add ( l ) ; }"]}
{"ids": "14077", "code": ["public boolean is Single Attribute Container ( ) {", "return false ; }"]}
{"ids": "47688", "code": ["public void open ( File file ) throws IO Exception {", "check AWT Permission ( ) ;", "check Exec ( ) ;", "check Action Support ( Action . OPEN ) ;", "check File Validation ( file ) ;", "peer . open ( file ) ; }"]}
{"ids": "26844", "code": ["public static String convert ISO 8601 Duration To Normal Time ( String iso Time ) {", "String formatted Time = new String ( ) ;", "if ( iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) ) {", "String hours = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "String minutes = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "String seconds = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "formatted Time = hours + STR_ + format To 2 Digits ( minutes ) + STR_ + format To 2 Digits ( seconds ) ; }", "else if ( ! iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) ) {", "String minutes = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "String seconds = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "formatted Time = minutes + STR_ + format To 2 Digits ( seconds ) ; }", "else if ( iso Time . contains ( STR_ ) && ! iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) ) {", "String hours = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "String seconds = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "formatted Time = hours + STR_ + format To 2 Digits ( seconds ) ; }", "else if ( iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) && ! iso Time . contains ( STR_ ) ) {", "String hours = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "String minutes = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "formatted Time = hours + STR_ + format To 2 Digits ( minutes ) + STR_ ; }", "else if ( ! iso Time . contains ( STR_ ) && ! iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) ) {", "String seconds = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "formatted Time = STR_ + format To 2 Digits ( seconds ) ; }", "else if ( ! iso Time . contains ( STR_ ) && iso Time . contains ( STR_ ) && ! iso Time . contains ( STR_ ) ) {", "String minutes = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "formatted Time = minutes + STR_ ; }", "else if ( iso Time . contains ( STR_ ) && ! iso Time . contains ( STR_ ) && ! iso Time . contains ( STR_ ) ) {", "String hours = iso Time . substring ( iso Time . index Of ( STR_ ) + NUM_ , iso Time . index Of ( STR_ ) ) ;", "formatted Time = hours + STR_ ; }", "return formatted Time ; }"]}
{"ids": "68827", "code": ["public byte map ( byte src ) {", "char c = map ( ( char ) src ) ;", "if ( c < Byte . MIN VALUE || c > Byte . MAX VALUE ) {", "return NUM_ ; }", "return ( byte ) c ; }"]}
{"ids": "50442", "code": ["public String wrap If Keyword Or Built In ( String name ) {", "if ( KEYWORD BUILT IN SET . contains ( name ) ) {", "return name + STR_ ; }", "return name ; }"]}
{"ids": "35283", "code": ["public Issue Matcher add ( ) {", "Issue Matcher issue Matcher = new Issue Matcher ( ) ;", "issue Matchers . add ( issue Matcher ) ;", "return issue Matcher ; }"]}
{"ids": "4050", "code": ["private < T > Inject Scope < T > find Scope ( Annotated Element ann Element ) {", "for ( Annotation ann : ann Element . get Annotations ( ) ) {", "Class < ? extends Annotation > ann Type = ann . annotation Type ( ) ;", "if ( ann Type . is Annotation Present ( Scope . class ) ) {", "Supplier < Inject Scope < T > > scope Gen = ( Supplier ) scope Map . get ( ann Type ) ;", "if ( scope Gen != null ) {", "return scope Gen . get ( ) ; }", "else {", "log . fine ( L . l ( STR_ , ann Type . get Simple Name ( ) ) ) ; } } }", "return new Inject Scope Factory < > ( ) ; }"]}
{"ids": "75446", "code": ["public void remove Property Change Listener ( I Property Change Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "48457", "code": ["@ Override public int previous ( ) {", "Character Iterator text = get Text ( ) ;", "if ( current ( ) == text . get Begin Index ( ) ) {", "return Break Iterator . DONE ; }", "int start = current ( ) ;", "int last Result = cached Last Known Break ;", "if ( last Result >= start || last Result <= Break Iterator . DONE ) {", "get Previous ( ) ;", "last Result = handle Previous ( ) ; }", "else {", "text . set Index ( last Result ) ; }", "int result = last Result ;", "while ( result != Break Iterator . DONE && result < start ) {", "last Result = result ;", "result = handle Next ( ) ; }", "text . set Index ( last Result ) ;", "cached Last Known Break = last Result ;", "return last Result ; }"]}
{"ids": "68363", "code": ["public Deferred Image Replaced Element ( Image Resource image Resource , Repaint Listener repaint Listener , int w , int h ) {", "this . image Resource = image Resource ;", "loaded = false ;", "this . repaint Listener = repaint Listener ;", "if ( w == - NUM_ && h == - NUM_ ) {", "do Scale Image = false ;", "target Height = NUM_ ;", "target Width = NUM_ ; }", "else {", "do Scale Image = true ;", "target Height = Math . max ( NUM_ , h ) ;", "target Width = Math . max ( NUM_ , w ) ; }", "image = Image Util . create Compatible Buffered Image ( target Width , target Height ) ; }"]}
{"ids": "46773", "code": ["public boolean starts With ( Name n ) {", "if ( n instanceof Compound Name ) {", "return ( impl . starts With ( n . size ( ) , n . get All ( ) ) ) ; }", "else {", "return false ; } }"]}
{"ids": "81350", "code": ["public Parameterized Generic Method Binding ( Method Binding original Method , Type Binding [ ] type Arguments , Lookup Environment environment ) {", "this . environment = environment ;", "this . modifiers = original Method . modifiers ;", "this . selector = original Method . selector ;", "this . declaring Class = original Method . declaring Class ;", "this . type Variables = Binding . NO TYPE VARIABLES ;", "this . type Arguments = type Arguments ;", "this . is Raw = false ;", "this . tag Bits = original Method . tag Bits ;", "this . original Method = original Method ;", "this . parameters = Scope . substitute ( this , original Method . parameters ) ;", "this . return Type = Scope . substitute ( this , original Method . return Type ) ;", "this . thrown Exceptions = Scope . substitute ( this , original Method . thrown Exceptions ) ;", "if ( this . thrown Exceptions == null ) this . thrown Exceptions = Binding . NO EXCEPTIONS ;", "check Missing Type : {", "if ( ( this . tag Bits & Tag Bits . Has Missing Type ) != NUM_ ) break check Missing Type ;", "if ( ( this . return Type . tag Bits & Tag Bits . Has Missing Type ) != NUM_ ) {", "this . tag Bits |= Tag Bits . Has Missing Type ;", "break check Missing Type ; }", "for ( int i = NUM_ , max = this . parameters . length ; i < max ; i ++ ) {", "if ( ( this . parameters [ i ] . tag Bits & Tag Bits . Has Missing Type ) != NUM_ ) {", "this . tag Bits |= Tag Bits . Has Missing Type ;", "break check Missing Type ; } }", "for ( int i = NUM_ , max = this . thrown Exceptions . length ; i < max ; i ++ ) {", "if ( ( this . thrown Exceptions [ i ] . tag Bits & Tag Bits . Has Missing Type ) != NUM_ ) {", "this . tag Bits |= Tag Bits . Has Missing Type ;", "break check Missing Type ; } } }", "this . was Inferred = true ; }"]}
{"ids": "83779", "code": ["public byte [ ] sign ( byte [ ] hash ) {", "ECDSA Signer signer = new ECDSA Signer ( new H Mac DSAK Calculator ( new SHA 256 Digest ( ) ) ) ;", "signer . init ( true , new EC Private Key Parameters ( priv , domain ) ) ;", "Big Integer [ ] signature = signer . generate Signature ( hash ) ;", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "try {", "DER Sequence Generator seq = new DER Sequence Generator ( baos ) ;", "seq . add Object ( new ASN 1 Integer ( signature [ NUM_ ] ) ) ;", "seq . add Object ( new ASN 1 Integer ( to Canonical S ( signature [ NUM_ ] ) ) ) ;", "seq . close ( ) ;", "return baos . to Byte Array ( ) ; }", "catch ( IO Exception e ) { }", "return null ; }"]}
{"ids": "9892", "code": ["public Time Period ( Date start Time , Date end Time ) {", "if ( start Time != null && end Time != null && ! end Time . after ( start Time ) ) {", "throw new Illegal Argument Exception ( STR_ + end Time + STR_ + start Time ) ; }", "this . start Time = start Time ;", "this . end Time = end Time ; }"]}
{"ids": "73261", "code": ["J Menu create Edit Menu ( ) {", "J Menu edit Menu = new J Menu ( STR_ ) ;", "edit Menu . add ( action Manager . get Cut Action ( ) ) ;", "edit Menu . add ( action Manager . get Copy Action ( ) ) ;", "edit Menu . add ( action Manager . get Paste Action ( ) ) ;", "edit Menu . add ( action Manager . get Delete Action ( ) ) ;", "edit Menu . add Separator ( ) ;", "edit Menu . add ( action Manager . get Clear Source Neurons Action ( ) ) ;", "edit Menu . add ( action Manager . get Set Source Neurons Action ( ) ) ;", "edit Menu . add ( action Manager . get Connection Menu ( ) ) ;", "edit Menu . add ( action Manager . get Add Synapse Group Action ( ) ) ;", "edit Menu . add Separator ( ) ;", "edit Menu . add ( action Manager . get Randomize Objects Action ( ) ) ;", "edit Menu . add ( action Manager . get Show Adjust Synapses Dialog ( ) ) ;", "edit Menu . add Separator ( ) ;", "edit Menu . add ( action Manager . get Layout Menu ( ) ) ;", "edit Menu . add ( action Manager . get Group Menu ( ) ) ;", "edit Menu . add Separator ( ) ;", "edit Menu . add ( create Align Menu ( ) ) ;", "edit Menu . add ( create Spacing Menu ( ) ) ;", "edit Menu . add Separator ( ) ;", "edit Menu . add ( action Manager . get Set Neuron Properties Action ( ) ) ;", "edit Menu . add ( action Manager . get Set Synapse Properties Action ( ) ) ;", "edit Menu . add Separator ( ) ;", "edit Menu . add ( create Selection Menu ( ) ) ;", "return edit Menu ; }"]}
{"ids": "84576", "code": ["public void current State ( long state , Model current Model ) {", "current State = state ;", "if ( loggers != null ) {", "for ( Logger logger : loggers ) {", "logger . log ( state ) ; } } }"]}
{"ids": "13974", "code": ["public boolean is Signed ( ) {", "return signed ; }"]}
{"ids": "8429", "code": ["public Object parse Text ( String text ) {", "if ( text == null || text . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return parse ( new Line Column Reader ( new String Reader ( text ) ) ) ; }"]}
{"ids": "73691", "code": ["protected void add Chooser Filters ( J File Chooser chooser ) {", "javax . swing . filechooser . File Name Extension Filter filter ;", "chooser . add Choosable File Filter ( filter = new javax . swing . filechooser . File Name Extension Filter ( STR_ , STR_ ) ) ;", "chooser . set File Filter ( filter ) ; }"]}
{"ids": "8588", "code": ["public void on Stop ( ) {", "if ( null != m Service ) {", "if ( null != m Context ) {", "m Context . unbind Service ( m Service Connection ) ; }", "m Service Connection = null ;", "m Service = null ; } }"]}
{"ids": "10721", "code": ["private void eliminar Usuarios Organo ( Gestion Organizacion BI organizacion BI , Organizacion VO organizacion VO ) {", "organizacion BI . eliminar Usuarios Organo ( organizacion VO . get Id ( ) ) ; }"]}
{"ids": "73251", "code": ["private static void add Previous Layer ( List < List < Neuron > > layers , List < Neuron > source Layer , List < Neuron > layer To Check ) {", "final int MAXLAYERS = NUM_ ;", "Set < Neuron > new Layer Temp = new Hash Set < Neuron > ( ) ;", "boolean the Next Layer Is The Source Layer = false ;", "for ( Neuron neuron : layer To Check ) {", "for ( Synapse synapse : neuron . get Fan In ( ) ) {", "Neuron source Neuron = synapse . get Source ( ) ;", "if ( source Layer . contains ( source Neuron ) ) {", "the Next Layer Is The Source Layer = true ; }", "if ( source Neuron == neuron ) {", "continue ; }", "new Layer Temp . add ( synapse . get Source ( ) ) ; } }", "if ( ( the Next Layer Is The Source Layer ) || ( new Layer Temp . size ( ) == NUM_ ) || ( layers . size ( ) > MAXLAYERS ) ) {", "layers . add ( source Layer ) ; }", "else {", "List < Neuron > new Layer = new Array List < Neuron > ( new Layer Temp ) ;", "Collections . sort ( new Layer , Orientation Comparator . X ORDER ) ;", "layers . add ( new Layer ) ;", "add Previous Layer ( layers , source Layer , new Layer ) ; } }"]}
{"ids": "85039", "code": ["public static int find Nonwhitespace Character ( String s , int index ) {", "int s Length = s . length ( ) ;", "while ( index < s Length && Character . is Whitespace ( s . char At ( index ) ) ) {", "index ++ ; }", "return index ; }"]}
{"ids": "31174", "code": ["public Primitive ( Object value ) {", "this . value = value ;", "type = ( value != null ) ? Utilities . get Primitive Type ( value . get Class ( ) ) : null ;", "if ( type == null ) {", "throw new Illegal Argument Exception ( STR_ + value ) ; } }"]}
{"ids": "35882", "code": ["public void create Cash Based Journal Entries And Reversals For Savings Tax ( final Office office , final String currency Code , final CASH ACCOUNTS FOR SAVINGS account Type To Be Debited , final CASH ACCOUNTS FOR SAVINGS account Type To Be Credited , final Long savings Product Id , final Long payment Type Id , final Long savings Id , final String transaction Id , final Date transaction Date , final Big Decimal amount , final Boolean is Reversal , final List < Tax Payment DTO > tax Details ) {", "for ( Tax Payment DTO tax Payment DTO : tax Details ) {", "if ( tax Payment DTO . get Amount ( ) != null ) {", "if ( tax Payment DTO . get Credit Account Id ( ) == null ) {", "create Cash Based Credit Journal Entries And Reversals For Savings ( office , currency Code , account Type To Be Credited . get Value ( ) , savings Product Id , payment Type Id , savings Id , transaction Id , transaction Date , tax Payment DTO . get Amount ( ) , is Reversal ) ; }", "else {", "create Cash Based Credit Journal Entries And Reversals For Savings ( office , currency Code , tax Payment DTO . get Credit Account Id ( ) , savings Id , transaction Id , transaction Date , tax Payment DTO . get Amount ( ) , is Reversal ) ; } } }", "create Cash Based Debit Journal Entries And Reversals For Savings ( office , currency Code , account Type To Be Debited . get Value ( ) , savings Product Id , payment Type Id , savings Id , transaction Id , transaction Date , amount , is Reversal ) ; }"]}
{"ids": "8276", "code": ["public static Calendar clear Time ( final Calendar self ) {", "clear Time Common ( self ) ;", "return self ; }"]}
{"ids": "73599", "code": ["@ Override public void handle Key ( int virtual Key Code , int transition State , char key Char ) {", "switch Control Keys ( virtual Key Code , transition State ) ;", "input Buffer . add ( new Global Key Event ( this , virtual Key Code , transition State , key Char , menu Pressed , shift Pressed , control Pressed , extended Key ) ) ; }"]}
{"ids": "26976", "code": ["public static String strip Leading Period ( String s ) {", "if ( null != s && s . starts With ( STR_ ) ) return s . substring ( Math . min ( NUM_ , s . length ( ) ) , s . length ( ) ) ;", "return s ; }"]}
{"ids": "41044", "code": ["private void clean Up Labels ( ) {", "int id = NUM_ ;", "for ( Iterator < Label > i = labels . iterator ( ) ; i . has Next ( ) ; ) {", "Label label = i . next ( ) ;", "if ( label . is Empty ( ) ) {", "i . remove ( ) ; }", "else {", "label . compact ( ) ;", "label . id = id ++ ; } } }"]}
{"ids": "63151", "code": ["public static long nanos From Date ( long ms ) {", "Calendar cal = get Calendar ( ) ;", "cal . set Time In Millis ( ms ) ;", "return nanos From Calendar ( cal ) ; }"]}
{"ids": "22078", "code": ["protected Balanced Web Resource create Https Client ( final String username , final String password , List < String > hosts ) throws No Such Algorithm Exception {", "return create Https Client ( username , password , hosts , true ) ; }"]}
{"ids": "81453", "code": ["public static char [ ] create Array Signature ( char [ ] type Signature , int array Count ) {", "if ( array Count == NUM_ ) return type Signature ;", "int sig Length = type Signature . length ;", "char [ ] result = new char [ array Count + sig Length ] ;", "for ( int i = NUM_ ; i < array Count ; i ++ ) {", "result [ i ] = C ARRAY ; }", "System . arraycopy ( type Signature , NUM_ , result , array Count , sig Length ) ;", "return result ; }"]}
{"ids": "71673", "code": ["public void println ( ) throws IO Exception {", "writer . write ( format . get Line Separator ( ) ) ; }"]}
{"ids": "12721", "code": ["protected void increase Buffer Size ( int min Size ) {", "int new Length = buf . length ;", "while ( new Length < min Size ) new Length *= NUM_ ;", "double [ ] new Buf = new double [ new Length ] ;", "int avail = currently In Buffer ( ) ;", "System . arraycopy ( buf , read Pos , new Buf , NUM_ , avail ) ;", "buf = new Buf ;", "read Pos = NUM_ ;", "write Pos = avail ; }"]}
{"ids": "37825", "code": ["private void handle Enumerated Attribute ( Instances train Instances ) throws Exception {", "Instance instance ;", "m distribution = new Distribution ( m complexity Index , train Instances . num Classes ( ) ) ;", "Enumeration < Instance > enu = train Instances . enumerate Instances ( ) ;", "while ( enu . has More Elements ( ) ) {", "instance = enu . next Element ( ) ;", "if ( ! instance . is Missing ( m att Index ) ) {", "m distribution . add ( ( int ) instance . value ( m att Index ) , instance ) ; } }", "if ( m distribution . check ( m min No Obj ) ) {", "m num Subsets = m complexity Index ;", "m info Gain = info Gain Crit . split Crit Value ( m distribution , m sum Of Weights ) ;", "m gain Ratio = gain Ratio Crit . split Crit Value ( m distribution , m sum Of Weights , m info Gain ) ; } }"]}
{"ids": "44881", "code": ["public static String encode ( byte [ ] data ) {", "int start = NUM_ ;", "int len = data . length ;", "String Buffer buf = new String Buffer ( data . length * NUM_ / NUM_ ) ;", "int end = len - NUM_ ;", "int i = start ;", "int n = NUM_ ;", "while ( i <= end ) {", "int d = ( ( ( ( int ) data [ i ] ) & NUM_ ) << NUM_ ) | ( ( ( ( int ) data [ i + NUM_ ] ) & NUM_ ) << NUM_ ) | ( ( ( int ) data [ i + NUM_ ] ) & NUM_ ) ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( legal Chars [ d & NUM_ ] ) ;", "i += NUM_ ;", "if ( n ++ >= NUM_ ) {", "n = NUM_ ; } }", "if ( i == start + len - NUM_ ) {", "int d = ( ( ( ( int ) data [ i ] ) & NUM_ ) << NUM_ ) | ( ( ( ( int ) data [ i + NUM_ ] ) & NUM_ ) << NUM_ ) ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( STR_ ) ; }", "else if ( i == start + len - NUM_ ) {", "int d = ( ( ( int ) data [ i ] ) & NUM_ ) << NUM_ ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( legal Chars [ ( d > > NUM_ ) & NUM_ ] ) ;", "buf . append ( STR_ ) ; }", "return buf . to String ( ) ; }"]}
{"ids": "82053", "code": ["public static Font create Bitmap Font ( String name , Image bitmap , int [ ] cut Offsets , int [ ] char Width , String charsets ) {", "Font f = create Bitmap Font ( bitmap , cut Offsets , char Width , charsets ) ;", "bitmap Cache . put ( name , f ) ;", "return f ; }"]}
{"ids": "23822", "code": ["static boolean is Tenured ( Memory Pool MX Bean memory Pool MX Bean ) {", "if ( memory Pool MX Bean . get Type ( ) != Memory Type . HEAP ) {", "return false ; }", "String name = memory Pool MX Bean . get Name ( ) ;", "return name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || ( HEAP POOL != null && name . equals ( HEAP POOL ) ) ; }"]}
{"ids": "73095", "code": ["public static < T > T interpreter Only ( Callable < T > callable ) throws Exception {", "return callable . call ( ) ; }"]}
{"ids": "42885", "code": ["private void add Selector For Protocol ( Properties settings , String protocol , Protocol Dispatch Selector ps ) {", "String proxy = settings . get Property ( protocol ) ;", "if ( proxy != null ) {", "Fixed Proxy Selector protocol Selector = Proxy Util . parse Proxy Settings ( proxy ) ;", "ps . set Selector ( protocol , protocol Selector ) ; } }"]}
{"ids": "55690", "code": ["public static void read Skel ( Buffered Reader reader ) throws IO Exception {", "List < String > lines = new Array List < String > ( ) ;", "String Builder section = new String Builder ( ) ;", "String ln ;", "while ( ( ln = reader . read Line ( ) ) != null ) {", "if ( ln . starts With ( STR_ ) ) {", "lines . add ( section . to String ( ) ) ;", "section . set Length ( NUM_ ) ; }", "else {", "section . append ( ln ) ;", "section . append ( NL ) ; } }", "if ( section . length ( ) > NUM_ ) lines . add ( section . to String ( ) ) ;", "if ( lines . size ( ) != size ) {", "Out . error ( Error Messages . WRONG SKELETON ) ;", "throw new Generator Exception ( ) ; }", "line = new String [ size ] ;", "for ( int i = NUM_ ; i < size ; i ++ ) line [ i ] = lines . get ( i ) ; }"]}
{"ids": "5846", "code": ["public boolean contains ( File file , String file Content ) {", "if ( exists ( file ) ) {", "String content = read File Content ( file ) ;", "return content != null && content . equals ( file Content ) ; }", "return false ; }"]}
{"ids": "5439", "code": ["public static boolean [ ] [ ] load Image ( File file , char off Char ) throws File Not Found Exception , Runtime Exception {", "Array List < String > rows = load Image Pad ( file , off Char ) ;", "String s = rows . get ( NUM_ ) ;", "boolean [ ] [ ] img = new boolean [ rows . size ( ) ] [ s . length ( ) ] ;", "for ( int i = NUM_ ; i < rows . size ( ) ; i ++ ) {", "s = rows . get ( i ) ;", "for ( int j = NUM_ ; j < s . length ( ) ; j ++ ) {", "char c = s . char At ( j ) ;", "if ( c == off Char ) {", "img [ i ] [ j ] = false ; }", "else {", "img [ i ] [ j ] = true ; } } }", "return img ; }"]}
{"ids": "30310", "code": ["protected void update Receipt Status When Cancelled ( final String receipt Number ) {", "final List < Egdm Collected Receipt > egdm Collected Receipts = demand Generic DAO . get All Egdm Collected Receipts ( receipt Number ) ;", "if ( egdm Collected Receipts != null && ! egdm Collected Receipts . is Empty ( ) ) for ( final Egdm Collected Receipt eg Dm Collected Receipt : egdm Collected Receipts ) {", "eg Dm Collected Receipt . set Status ( Demand Constants . CANCELLED RECEIPT ) ;", "eg Dm Collected Receipt . set Updated Time ( new Date ( ) ) ;", "egdm Collected Receipt DAO . update ( eg Dm Collected Receipt ) ; } }"]}
{"ids": "1012", "code": ["public void add Animation ( int id , Animation ... animations ) {", "if ( m Animations . get ( id ) == null ) {", "m Animations . put ( id , new Array List < Animation > ( animations . length ) ) ;", "if ( id != Animation . FULL PAGE ) {", "m Animated Views . add ( id ) ; } }", "Array List < Animation > anims = m Animations . get ( id ) ;", "Collections . add All ( anims , animations ) ; }"]}
{"ids": "10350", "code": ["protected boolean exists In Range ( String x , int min Length , int max Length ) {", "x = String Utils . trim To Null ( x ) ;", "return x != null && x . length ( ) >= min Length && x . length ( ) <= max Length ; }"]}
{"ids": "31392", "code": ["public synchronized void unwatch ( String path Name ) throws IO Exception {", "unregister All ( Paths . get ( path Name ) ) ; }"]}
{"ids": "45", "code": ["public Criteria add Property ( String name , String value , Operator operator ) {", "properties . add ( new Property Criteria ( name , value , operator ) ) ;", "return this ; }"]}
{"ids": "75032", "code": ["public void remove Column ( final String column Name ) {", "if ( column Name == null ) {", "return ; }", "final List < String > cols = Arrays . as List ( get Info ( ) . headers ) ;", "final int col Index = cols . index Of ( column Name ) ;", "remove Column ( col Index ) ; }"]}
{"ids": "21720", "code": ["public static Un Managed Protection Set check Un Managed Protection Set Exists In DB ( Db Client db Client , String native Guid ) throws IO Exception {", "List < Un Managed Protection Set > cgs = Custom Query Utility . get Un Managed Protection Set By Native Guid ( db Client , native Guid ) ;", "Iterator < Un Managed Protection Set > cgs Itr = cgs . iterator ( ) ;", "if ( cgs Itr . has Next ( ) ) {", "return cgs Itr . next ( ) ; }", "return null ; }"]}
{"ids": "31754", "code": ["private void check Query ( String exp Res , String qry ) throws Exception {", "assert Equals ( NUM_ , execute Hive Query ( STR_ ) ) ;", "assert Equals ( NUM_ , execute Hive Query ( STR_ + STR_ + STR_ + STR_ + qry ) ) ;", "Igfs Input Stream in = igfs . open ( new Igfs Path ( STR_ ) ) ;", "byte [ ] buf = new byte [ ( int ) in . length ( ) ] ;", "in . read ( buf ) ;", "assert Equals ( exp Res , new String ( buf ) ) ; }"]}
{"ids": "55398", "code": ["public void close ( ) {", "stop Timers ( ) ;", "closed = true ;", "window . dispose ( ) ;", "if ( listener != null ) {", "listener . notification Removed ( this ) ; }", "if ( activity Listener != null ) {", "Activity Tracker . remove Activity Listener ( activity Listener ) ; } }"]}
{"ids": "27584", "code": ["protected boolean should Move ( final I Load Balancer Service load Balancer Service ) {", "if ( load Balancer Service == null ) throw new Illegal Argument Exception ( ) ;", "final boolean highly Utilized Service ;", "try {", "final UUID service UUID = resource Manager . get Data Service UUID ( ) ;", "highly Utilized Service = load Balancer Service . is Highly Utilized Data Service ( service UUID ) ; }", "catch ( Exception ex ) {", "log . warn ( STR_ ) ;", "return false ; }", "if ( ! highly Utilized Service ) {", "if ( log . is Info Enabled ( ) ) log . info ( STR_ ) ;", "return false ; }", "final Resource Scores resource Scores = resource Manager . get Resource Scores ( ) ;", "final boolean should Move = ( resource Scores . percent CPU Time >= resource Manager . move Percent Cpu Time Threshold ) || ( resource Scores . major Page Faults Per Sec > NUM_ ) || ( resource Scores . data Dir Bytes Free < Bytes . gigabyte * NUM_ ) || ( resource Scores . data Dir Bytes Free < Bytes . gigabyte * NUM_ ) ;", "return should Move ; }"]}
{"ids": "22170", "code": ["private static Object [ ] convert Throwable Messages ( final Object [ ] args ) {", "if ( args != null ) {", "for ( int i = NUM_ ; i < args . length ; i ++ ) {", "if ( args [ i ] instanceof Throwable ) {", "Throwable t = ( Throwable ) args [ i ] ;", "if ( t . get Message ( ) != null ) {", "args [ i ] = t . get Message ( ) ; } } } }", "return args ; }"]}
{"ids": "51083", "code": ["protected void wrap Content ( ) {", "if ( ! DO WRAP ) {", "return ; }", "if ( m Text == null ) {", "return ; }", "Canvas c = new Canvas ( ) ;", "c . set Font ( m Font ) ;", "Font Metrics fm = c . get Font Metrics ( m Font ) ;", "String string = get Text ( ) ;", "if ( m To Upper Case ) {", "string = string . to Upper Case ( ) ; }", "int tw = fm . string Width ( string ) + NUM_ * ( m Horizontal Padding + m Horizontal Margin ) ;", "int th = fm . get Max Ascent ( ) + NUM_ * fm . get Max Descent ( ) + NUM_ * ( m Vertical Padding + m Vertical Margin ) ;", "m Widget . set Wrap Width ( tw ) ;", "m Widget . set Wrap Height ( th ) ;", "if ( tw > m Widget . get Min Width ( ) ) {", "m Widget . set Min Width ( tw ) ; }", "if ( th > m Widget . get Min Height ( ) ) {", "m Widget . set Min Height ( th ) ; }", "if ( m Widget . get Horizontal Dimension Behaviour ( ) == Constraint Widget . Dimension Behaviour . WRAP CONTENT ) {", "m Widget . set Width ( tw ) ; }", "if ( m Widget . get Vertical Dimension Behaviour ( ) == Constraint Widget . Dimension Behaviour . WRAP CONTENT ) {", "m Widget . set Height ( th ) ; }", "if ( m Widget . get Horizontal Dimension Behaviour ( ) == Constraint Widget . Dimension Behaviour . FIXED ) {", "if ( m Widget . get Width ( ) <= m Widget . get Min Width ( ) ) {", "m Widget . set Horizontal Dimension Behaviour ( Constraint Widget . Dimension Behaviour . WRAP CONTENT ) ; } }", "if ( m Widget . get Vertical Dimension Behaviour ( ) == Constraint Widget . Dimension Behaviour . FIXED ) {", "if ( m Widget . get Height ( ) <= m Widget . get Min Height ( ) ) {", "m Widget . set Vertical Dimension Behaviour ( Constraint Widget . Dimension Behaviour . WRAP CONTENT ) ; } }", "int baseline = fm . get Ascent ( ) + fm . get Max Descent ( ) + m Vertical Padding + m Vertical Margin ;", "m Widget . set Baseline Distance ( baseline ) ; }"]}
{"ids": "76921", "code": ["public RAF Directory ( Path path , Lock Factory lock Factory ) throws IO Exception {", "super ( path , lock Factory ) ;", "path . to File ( ) ; }"]}
{"ids": "40766", "code": ["public static void add Minutes To List ( Context context , Array List < Integer > values , Array List < String > labels , int minutes ) {", "int index = values . index Of ( minutes ) ;", "if ( index != - NUM_ ) {", "return ; }", "String label = construct Reminder Label ( context , minutes , false ) ;", "int len = values . size ( ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "if ( minutes < values . get ( i ) ) {", "values . add ( i , minutes ) ;", "labels . add ( i , label ) ;", "return ; } }", "values . add ( minutes ) ;", "labels . add ( len , label ) ; }"]}
{"ids": "46280", "code": ["private static int [ ] maybe Sort ( int [ ] values ) {", "if ( ! is Sorted ( values , NUM_ , false ) ) {", "values = values . clone ( ) ;", "Arrays . sort ( values ) ; }", "return values ; }"]}
{"ids": "68802", "code": ["private void do Text Normal ( final PDF Page cmds , final String text ) {", "final Point F zero = new Point F ( ) ;", "final Matrix scale = new Matrix ( ) ;", "Utils . set Mat Values ( scale , fsize , NUM_ , NUM_ , fsize * th , NUM_ , tr ) ;", "final Matrix at = new Matrix ( ) ;", "final List < PDF Glyph > l = ( List < PDF Glyph > ) font . get Glyphs ( text ) ;", "for ( final PDF Glyph glyph : l ) {", "at . set ( cur ) ;", "at . pre Concat ( scale ) ;", "final Point F advance = glyph . add Commands ( cmds , at , tm ) ;", "float advance X = ( advance . x * fsize ) + tc ;", "if ( glyph . get Char ( ) == STR_ ) {", "advance X += tw ; }", "advance X *= th ;", "cur . pre Translate ( advance X , advance . y ) ; }", "final float [ ] src = { zero . x , zero . y } ;", "final float [ ] dst = new float [ src . length ] ;", "cur . map Points ( dst , src ) ;", "prev End . set ( dst [ NUM_ ] , dst [ NUM_ ] ) ; }"]}
{"ids": "72757", "code": ["public synchronized static void initialize ( Connection conn ) throws SQL Exception {", "if ( log Hadoop Id Patterns != null && log Lineage Patterns != null ) {", "return ; }", "load Lineage Patterns ( conn ) ;", "load Hadoop Id Patterns ( conn ) ; }"]}
{"ids": "71601", "code": ["public void add Indices ( Collection < I Index > indices ) {", "for ( Iterator < I Index > it = indices . iterator ( ) ; it . has Next ( ) ; ) {", "add Index ( ( I Index ) it . next ( ) ) ; } }"]}
{"ids": "14210", "code": ["public static boolean is Cookie Secure ( ) {", "return secure Cookie ; }"]}
{"ids": "25570", "code": ["public static List < Object Model > load Json Stream ( Input Stream input ) {", "List < Object Model > models = new Array List < > ( ) ;", "Reader reader = new Input Stream Reader ( input ) ;", "Object Model [ ] object Models = GSON . from Json ( reader , Object Model [ ] . class ) ;", "for ( Object Model object Model : object Models ) {", "models . add ( object Model ) ; }", "return models ; }"]}
{"ids": "25517", "code": ["private int add Wordlen Weights ( Channel chan , int weight Idx ) {", "int [ ] weigths Tab = atrac 3 p wl weights [ chan . ch Num * NUM_ + weight Idx - NUM_ ] ;", "for ( int i = NUM_ ; i < ctx . num Quant Units ; i ++ ) {", "chan . qu Wordlen [ i ] += weigths Tab [ i ] ;", "if ( chan . qu Wordlen [ i ] < NUM_ || chan . qu Wordlen [ i ] > NUM_ ) {", "log . error ( String . format ( STR_ , i , chan . qu Wordlen [ i ] ) ) ;", "return AT 3 P ERROR ; } }", "return NUM_ ; }"]}
{"ids": "42403", "code": ["final void prune Exceptional Out ( IR ir ) {", "int n = get Number Of Exceptional Out ( ) ;", "if ( n > NUM_ ) {", "Computed BB Enum handlers = new Computed BB Enum ( n ) ;", "Enumeration < Instruction > e = forward Real Instr Enumerator ( ) ;", "while ( e . has More Elements ( ) ) {", "Instruction x = e . next Element ( ) ;", "Enumeration < Basic Block > bbs = get Applicable Exceptional Out ( x ) ;", "while ( bbs . has More Elements ( ) ) {", "Basic Block bb = bbs . next Element ( ) ;", "handlers . add Possibly Duplicate Element ( bb ) ; } }", "delete Exceptional Out ( ) ;", "for ( int i = NUM_ ; handlers . has More Elements ( ) ; i ++ ) {", "Exception Handler Basic Block b = ( Exception Handler Basic Block ) handlers . next Element ( ) ;", "insert Out ( b ) ; } }", "recompute Normal Out ( ir ) ; }"]}
{"ids": "52776", "code": ["private Pair < DBID Var , Double > single Iteration ( Relation < V > relationx , Relation < ? extends Number Vector > relationy ) {", "final int dim = Relation Util . dimensionality ( relationx ) ;", "final int dimy = Relation Util . dimensionality ( relationy ) ;", "assert ( dim == NUM_ ) ;", "KNN Query < V > knn Query = Query Util . get KNN Query ( relationx , get Distance Function ( ) , k + NUM_ ) ;", "Array Modifiable DBI Ds ids = DBID Util . new Array ( relationx . get DBI Ds ( ) ) ;", "ids . sort ( ) ;", "double [ ] [ ] X = new double [ ids . size ( ) ] [ NUM_ ] ;", "double [ ] [ ] F = new double [ ids . size ( ) ] [ ids . size ( ) ] ;", "double [ ] [ ] Y = new double [ ids . size ( ) ] [ dimy ] ; {", "int i = NUM_ ;", "for ( DBID Iter id = ids . iter ( ) ; id . valid ( ) ; id . advance ( ) , i ++ ) { {", "V vec = relationx . get ( id ) ;", "double la = vec . double Value ( NUM_ ) ;", "double lo = vec . double Value ( NUM_ ) ;", "X [ i ] [ NUM_ ] = NUM_ ;", "X [ i ] [ NUM_ ] = la ;", "X [ i ] [ NUM_ ] = lo ;", "X [ i ] [ NUM_ ] = la * lo ;", "X [ i ] [ NUM_ ] = la * la ;", "X [ i ] [ NUM_ ] = lo * lo ; } {", "final Number Vector vecy = relationy . get ( id ) ;", "for ( int d = NUM_ ; d < dimy ; d ++ ) {", "double idy = vecy . double Value ( d ) ;", "Y [ i ] [ d ] = idy ; } } {", "KNN List neighbors = knn Query . get KNN For DBID ( id , k + NUM_ ) ;", "Modifiable DBI Ds neighborhood = DBID Util . new Array ( neighbors . size ( ) ) ;", "for ( DBID Iter neighbor = neighbors . iter ( ) ; neighbor . valid ( ) ; neighbor . advance ( ) ) {", "if ( DBID Util . equal ( id , neighbor ) ) {", "continue ; }", "neighborhood . add ( neighbor ) ; }", "F [ i ] [ i ] = NUM_ ;", "final int nweight = - NUM_ / neighborhood . size ( ) ;", "for ( DBID Iter iter = neighborhood . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) {", "int pos = ids . binary Search ( iter ) ;", "assert ( pos >= NUM_ ) ;", "F [ pos ] [ i ] = nweight ; } } } }", "double [ ] [ ] common = times ( transpose Times Transpose ( X , F ) , F ) ;", "double [ ] [ ] b = times ( inverse ( times ( common , X ) ) , times ( common , Y ) ) ;", "double [ ] [ ] sigma Mat = times ( F , minus Equals ( times ( X , b ) , times ( F , Y ) ) ) ;", "final double sigma sum square = norm F ( sigma Mat ) / ( relationx . size ( ) - NUM_ - NUM_ ) ;", "final double norm = NUM_ / Math . sqrt ( sigma sum square ) ;", "double [ ] [ ] E = times Equals ( times ( F , minus ( Y , times ( X , b ) ) ) , norm ) ;", "DBID Var worstid = DBID Util . new Var ( ) ;", "double worstscore = Double . NEGATIVE INFINITY ;", "int i = NUM_ ;", "for ( DBID Iter id = ids . iter ( ) ; id . valid ( ) ; id . advance ( ) , i ++ ) {", "double err = square Sum ( get Row ( E , i ) ) ;", "if ( err > worstscore ) {", "worstscore = err ;", "worstid . set ( id ) ; } }", "return new Pair < > ( worstid , Math . sqrt ( worstscore ) ) ; }"]}
{"ids": "40109", "code": ["public String to Spaced String ( ) {", "final String original = to String ( ) ;", "final String Builder builder = new String Builder ( ) ;", "for ( int i = NUM_ ; i < original . length ( ) ; i ++ ) {", "if ( i > NUM_ && ( i % NUM_ ) == NUM_ ) builder . append ( STR_ ) ;", "builder . append ( original . char At ( i ) ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "84246", "code": ["private int parse Content Type ( final byte [ ] b , final int off ) throws Parse Exception {", "content Type Val = Primitives Parser . parse Byte ( b , off ) ;", "if ( Content Type . deserialize ( content Type Val ) == null ) {", "throw new Bad Ciphertext Exception ( STR_ ) ; }", "return NUM_ ; }"]}
{"ids": "81482", "code": ["@ Benchmark public void non Caching ( ) {", "run ( ) ; }"]}
{"ids": "8789", "code": ["private void r Line To ( float dx , float dy ) {", "if ( is Empty ( ) ) {", "m Path . move To ( m Last X = NUM_ , m Last Y = NUM_ ) ; }", "dx += m Last X ;", "dy += m Last Y ;", "m Path . line To ( m Last X = dx , m Last Y = dy ) ; }"]}
{"ids": "26577", "code": ["@ Override public Conflict Results parse Output ( final String stdout , final String stderr ) {", "final List < String > content Conflicts = new Array List < String > ( ) ;", "final List < String > rename Conflicts = new Array List < String > ( ) ;", "final List < String > both Conflicts = new Array List < String > ( ) ;", "final String [ ] lines = get Lines ( stderr ) ;", "for ( final String line : lines ) {", "final int index = line . last Index Of ( STR_ ) ;", "if ( index != - NUM_ ) {", "if ( String Utils . ends With ( line , BOTH CONFLICTS SUFFIX ) ) {", "both Conflicts . add ( line . substring ( NUM_ , index ) ) ; }", "else if ( String Utils . ends With ( line , RENAME CONFLICT SUFFIX ) ) {", "rename Conflicts . add ( line . substring ( NUM_ , index ) ) ; }", "else {", "content Conflicts . add ( line . substring ( NUM_ , index ) ) ; } } }", "return new Conflict Results ( content Conflicts , rename Conflicts , both Conflicts ) ; }"]}
{"ids": "4721", "code": ["protected void send Start ( final Output Stream out ) throws IO Exception {", "LOG . trace ( STR_ ) ;", "out . write ( EXTRA BYTES ) ;", "out . write ( get Part Boundary ( ) ) ;", "out . write ( CRLF BYTES ) ; }"]}
{"ids": "66096", "code": ["public void add Actual Qty ( Big Decimal add ) {", "m actual Qty = m actual Qty . add ( add ) ; }"]}
{"ids": "83031", "code": ["public static void print Stack Trace ( SQL Exception e , Print Writer pw ) {", "SQL Exception next = e ;", "while ( next != null ) {", "next . print Stack Trace ( pw ) ;", "next = next . get Next Exception ( ) ;", "if ( next != null ) {", "pw . println ( STR_ ) ; } } }"]}
{"ids": "43767", "code": ["protected void initialize World ( ) {", "Body ground = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "ground . add Fixture ( bf ) ; }", "ground . translate ( new Vector 2 ( NUM_ , - NUM_ ) ) ;", "ground . set Mass ( Mass Type . INFINITE ) ;", "world . add Body ( ground ) ;", "Body head = new Simulation Body ( ) ; {", "Convex c = Geometry . create Circle ( NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "head . add Fixture ( bf ) ; }", "head . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( head ) ;", "Body torso = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "torso . add Fixture ( bf ) ; } {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "c . translate ( new Vector 2 ( NUM_ , NUM_ ) ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "torso . add Fixture ( bf ) ; }", "torso . translate ( new Vector 2 ( NUM_ , - NUM_ ) ) ;", "torso . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( torso ) ;", "Body right Humerus = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "right Humerus . add Fixture ( bf ) ; }", "right Humerus . translate ( new Vector 2 ( NUM_ , - NUM_ ) ) ;", "right Humerus . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( right Humerus ) ;", "Body right Ulna = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "right Ulna . add Fixture ( bf ) ; }", "right Ulna . translate ( new Vector 2 ( NUM_ , - NUM_ ) ) ;", "right Ulna . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( right Ulna ) ;", "Body neck = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "neck . add Fixture ( bf ) ; }", "neck . translate ( new Vector 2 ( NUM_ , - NUM_ ) ) ;", "neck . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( neck ) ;", "Body left Humerus = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "left Humerus . add Fixture ( bf ) ; }", "left Humerus . translate ( new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "left Humerus . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( left Humerus ) ;", "Body left Ulna = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "left Ulna . add Fixture ( bf ) ; }", "left Ulna . translate ( new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "left Ulna . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( left Ulna ) ;", "Body right Femur = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "right Femur . add Fixture ( bf ) ; }", "right Femur . translate ( new Vector 2 ( NUM_ , - NUM_ ) ) ;", "right Femur . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( right Femur ) ;", "Body left Femur = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "left Femur . add Fixture ( bf ) ; }", "left Femur . translate ( new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "left Femur . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( left Femur ) ;", "Body right Tibia = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "right Tibia . add Fixture ( bf ) ; }", "right Tibia . translate ( new Vector 2 ( NUM_ , - NUM_ ) ) ;", "right Tibia . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( right Tibia ) ;", "Body left Tibia = new Simulation Body ( ) ; {", "Convex c = Geometry . create Rectangle ( NUM_ , NUM_ ) ;", "Body Fixture bf = new Body Fixture ( c ) ;", "left Tibia . add Fixture ( bf ) ; }", "left Tibia . translate ( new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "left Tibia . set Mass ( Mass Type . NORMAL ) ;", "world . add Body ( left Tibia ) ;", "Revolute Joint head To Neck = new Revolute Joint ( head , neck , new Vector 2 ( NUM_ , - NUM_ ) ) ;", "head To Neck . set Limit Enabled ( false ) ;", "head To Neck . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "head To Neck . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "head To Neck . set Motor Enabled ( false ) ;", "head To Neck . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "head To Neck . set Maximum Motor Torque ( NUM_ ) ;", "head To Neck . set Collision Allowed ( false ) ;", "world . add Joint ( head To Neck ) ;", "Revolute Joint neck To Torso = new Revolute Joint ( neck , torso , new Vector 2 ( NUM_ , - NUM_ ) ) ;", "neck To Torso . set Limit Enabled ( false ) ;", "neck To Torso . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "neck To Torso . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "neck To Torso . set Motor Enabled ( false ) ;", "neck To Torso . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "neck To Torso . set Maximum Motor Torque ( NUM_ ) ;", "neck To Torso . set Collision Allowed ( false ) ;", "world . add Joint ( neck To Torso ) ;", "Revolute Joint torso To Left Humerus = new Revolute Joint ( torso , left Humerus , new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "torso To Left Humerus . set Limit Enabled ( false ) ;", "torso To Left Humerus . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "torso To Left Humerus . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "torso To Left Humerus . set Motor Enabled ( false ) ;", "torso To Left Humerus . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "torso To Left Humerus . set Maximum Motor Torque ( NUM_ ) ;", "torso To Left Humerus . set Collision Allowed ( false ) ;", "world . add Joint ( torso To Left Humerus ) ;", "Revolute Joint torso To Right Humerus = new Revolute Joint ( torso , right Humerus , new Vector 2 ( NUM_ , - NUM_ ) ) ;", "torso To Right Humerus . set Limit Enabled ( false ) ;", "torso To Right Humerus . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "torso To Right Humerus . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "torso To Right Humerus . set Motor Enabled ( false ) ;", "torso To Right Humerus . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "torso To Right Humerus . set Maximum Motor Torque ( NUM_ ) ;", "torso To Right Humerus . set Collision Allowed ( false ) ;", "world . add Joint ( torso To Right Humerus ) ;", "Revolute Joint right Humerus To Right Ulna = new Revolute Joint ( right Humerus , right Ulna , new Vector 2 ( NUM_ , - NUM_ ) ) ;", "right Humerus To Right Ulna . set Limit Enabled ( false ) ;", "right Humerus To Right Ulna . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "right Humerus To Right Ulna . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "right Humerus To Right Ulna . set Motor Enabled ( false ) ;", "right Humerus To Right Ulna . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "right Humerus To Right Ulna . set Maximum Motor Torque ( NUM_ ) ;", "right Humerus To Right Ulna . set Collision Allowed ( false ) ;", "world . add Joint ( right Humerus To Right Ulna ) ;", "Revolute Joint left Humerus To Left Ulna = new Revolute Joint ( left Humerus , left Ulna , new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "left Humerus To Left Ulna . set Limit Enabled ( false ) ;", "left Humerus To Left Ulna . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "left Humerus To Left Ulna . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "left Humerus To Left Ulna . set Motor Enabled ( false ) ;", "left Humerus To Left Ulna . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "left Humerus To Left Ulna . set Maximum Motor Torque ( NUM_ ) ;", "left Humerus To Left Ulna . set Collision Allowed ( false ) ;", "world . add Joint ( left Humerus To Left Ulna ) ;", "Revolute Joint torso To Right Femur = new Revolute Joint ( torso , right Femur , new Vector 2 ( NUM_ , - NUM_ ) ) ;", "torso To Right Femur . set Limit Enabled ( false ) ;", "torso To Right Femur . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "torso To Right Femur . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "torso To Right Femur . set Motor Enabled ( false ) ;", "torso To Right Femur . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "torso To Right Femur . set Maximum Motor Torque ( NUM_ ) ;", "torso To Right Femur . set Collision Allowed ( false ) ;", "world . add Joint ( torso To Right Femur ) ;", "Revolute Joint torso To Left Femur = new Revolute Joint ( torso , left Femur , new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "torso To Left Femur . set Limit Enabled ( false ) ;", "torso To Left Femur . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "torso To Left Femur . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "torso To Left Femur . set Motor Enabled ( false ) ;", "torso To Left Femur . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "torso To Left Femur . set Maximum Motor Torque ( NUM_ ) ;", "torso To Left Femur . set Collision Allowed ( false ) ;", "world . add Joint ( torso To Left Femur ) ;", "Revolute Joint right Femur To Right Tibia = new Revolute Joint ( right Femur , right Tibia , new Vector 2 ( NUM_ , - NUM_ ) ) ;", "right Femur To Right Tibia . set Limit Enabled ( false ) ;", "right Femur To Right Tibia . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "right Femur To Right Tibia . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "right Femur To Right Tibia . set Motor Enabled ( false ) ;", "right Femur To Right Tibia . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "right Femur To Right Tibia . set Maximum Motor Torque ( NUM_ ) ;", "right Femur To Right Tibia . set Collision Allowed ( false ) ;", "world . add Joint ( right Femur To Right Tibia ) ;", "Revolute Joint left Femur To Left Tibia = new Revolute Joint ( left Femur , left Tibia , new Vector 2 ( - NUM_ , - NUM_ ) ) ;", "left Femur To Left Tibia . set Limit Enabled ( false ) ;", "left Femur To Left Tibia . set Limits ( Math . to Radians ( NUM_ ) , Math . to Radians ( NUM_ ) ) ;", "left Femur To Left Tibia . set Reference Angle ( Math . to Radians ( NUM_ ) ) ;", "left Femur To Left Tibia . set Motor Enabled ( false ) ;", "left Femur To Left Tibia . set Motor Speed ( Math . to Radians ( NUM_ ) ) ;", "left Femur To Left Tibia . set Maximum Motor Torque ( NUM_ ) ;", "left Femur To Left Tibia . set Collision Allowed ( false ) ;", "world . add Joint ( left Femur To Left Tibia ) ; }"]}
{"ids": "77875", "code": ["@ Suppress Warnings ( STR_ ) public Data Response paginate List ( Map < String , String > request Params , Paginate Request paginate Request , Object query , String default Sort , Map properties ) {", "if ( paginate Request == null ) {", "paginate Request = new Paginate Request ( ) ; }", "if ( paginate Request . get Start ( ) == null ) {", "paginate Request . set Start ( Request Util . get Integer ( request Params , STR_ , NUM_ ) ) ; }", "if ( paginate Request . get Size ( ) == null ) {", "paginate Request . set Size ( Request Util . get Integer ( request Params , STR_ , NUM_ ) ) ; }", "if ( paginate Request . get Order ( ) == null ) {", "paginate Request . set Order ( request Params . get ( STR_ ) ) ; }", "if ( paginate Request . get Sort ( ) == null ) {", "paginate Request . set Sort ( request Params . get ( STR_ ) ) ; }", "Integer start = paginate Request . get Start ( ) ;", "if ( start == null || start < NUM_ ) {", "start = NUM_ ; }", "Integer size = paginate Request . get Size ( ) ;", "if ( size == null || size < NUM_ ) {", "size = NUM_ ; }", "String sort = paginate Request . get Sort ( ) ;", "if ( sort == null ) {", "sort = default Sort ; }", "String order = paginate Request . get Order ( ) ;", "if ( order == null ) {", "order = STR_ ; }", "if ( sort != null && ! properties . is Empty ( ) ) {", "Object qp = properties . get ( sort ) ;", "if ( qp == null ) {", "throw new Activiti Illegal Argument Exception ( STR_ + sort + STR_ ) ; }", "if ( query instanceof Abstract Query ) {", "Abstract Query query Object = ( Abstract Query ) query ;", "Query Property query Property = ( Query Property ) qp ;", "query Object . order By ( query Property ) ;", "if ( order . equals ( STR_ ) ) {", "query Object . asc ( ) ; }", "else if ( order . equals ( STR_ ) ) {", "query Object . desc ( ) ; }", "else {", "throw new Activiti Illegal Argument Exception ( STR_ + order + STR_ ) ; } }", "else if ( query instanceof org . activiti . idm . engine . impl . Abstract Query ) {", "org . activiti . idm . engine . impl . Abstract Query query Object = ( org . activiti . idm . engine . impl . Abstract Query ) query ;", "org . activiti . idm . api . Query Property query Property = ( org . activiti . idm . api . Query Property ) qp ;", "query Object . order By ( query Property ) ;", "if ( order . equals ( STR_ ) ) {", "query Object . asc ( ) ; }", "else if ( order . equals ( STR_ ) ) {", "query Object . desc ( ) ; }", "else {", "throw new Activiti Illegal Argument Exception ( STR_ + order + STR_ ) ; } } }", "Data Response response = new Data Response ( ) ;", "response . set Start ( start ) ;", "response . set Sort ( sort ) ;", "response . set Order ( order ) ;", "if ( query instanceof Abstract Query ) {", "Abstract Query query Object = ( Abstract Query ) query ;", "List list = process List ( query Object . list Page ( start , size ) ) ;", "response . set Total ( query Object . count ( ) ) ;", "response . set Size ( list . size ( ) ) ;", "response . set Data ( list ) ; }", "else if ( query instanceof org . activiti . idm . engine . impl . Abstract Query ) {", "org . activiti . idm . engine . impl . Abstract Query query Object = ( org . activiti . idm . engine . impl . Abstract Query ) query ;", "List list = process List ( query Object . list Page ( start , size ) ) ;", "response . set Total ( query Object . count ( ) ) ;", "response . set Size ( list . size ( ) ) ;", "response . set Data ( list ) ; }", "return response ; }"]}
{"ids": "39503", "code": ["public void curve To ( double x 1 , double y 1 , double x 2 , double y 2 , double x 3 , double y 3 ) {", "if ( size ( ) == NUM_ ) {", "throw new Illegal Path State Exception ( STR_ ) ; }", "Node last Point = get ( size ( ) - NUM_ ) ;", "last Point . mask |= C 2 MASK ;", "last Point . x [ NUM_ ] = x 1 ;", "last Point . y [ NUM_ ] = y 1 ;", "if ( ( last Point . mask & C 1 C 2 MASK ) == C 1 C 2 MASK ) {", "last Point . keep Colinear = Math . abs ( Geom . angle ( last Point . x [ NUM_ ] , last Point . y [ NUM_ ] , last Point . x [ NUM_ ] , last Point . y [ NUM_ ] ) - Geom . angle ( last Point . x [ NUM_ ] , last Point . y [ NUM_ ] , last Point . x [ NUM_ ] , last Point . y [ NUM_ ] ) ) < NUM_ ; }", "add ( new Node ( C 1 MASK , x 3 , y 3 , x 2 , y 2 , x 3 , y 3 ) ) ; }"]}
{"ids": "68555", "code": ["private void open Counter Data Input Stream ( ) throws Data Fallback Exception {", "if ( d Input == null ) {", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ + counter File . get Name ( ) + STR_ ) ;", "try {", "d Input = new Buffered Reader ( new File Reader ( counter File ) ) ; }", "catch ( IO Exception e ) {", "throw new Data Fallback Exception ( e . get Message ( ) ) ; } } }"]}
{"ids": "80017", "code": ["public String read Next Word ( ) {", "if ( tokenizer . has More Tokens ( ) ) {", "return tokenizer . next Token ( ) ; }", "else {", "return null ; } }"]}
{"ids": "38163", "code": ["@ Override public void build Associations ( Instances data ) throws Exception {", "build Associations ( ( Object ) data ) ;", "return ; }"]}
{"ids": "10203", "code": ["public static String replace First ( String s , String sub , String with ) {", "int i = s . index Of ( sub ) ;", "if ( i == - NUM_ ) {", "return s ; }", "return s . substring ( NUM_ , i ) + with + s . substring ( i + sub . length ( ) ) ; }"]}
{"ids": "54934", "code": ["public void add Object ( String s ) throws Exception {", "inspect ( Class . for Name ( s ) ) ; }"]}
{"ids": "68368", "code": ["public static void main ( String [ ] args ) throws Exception {", "final J Frame frame = new HTML Test ( args ) ;", "frame . set Default Close Operation ( J Frame . EXIT ON CLOSE ) ;", "frame . pack ( ) ;", "frame . set Visible ( true ) ; }"]}
{"ids": "62119", "code": ["@ Override public int hash Code ( ) {", "return raw String . hash Code ( ) ; }"]}
{"ids": "38984", "code": ["public static boolean write To File ( String filename , String message , boolean append ) {", "boolean result ;", "Buffered Writer writer ;", "try {", "writer = new Buffered Writer ( new File Writer ( filename , append ) ) ;", "writer . write ( message ) ;", "writer . new Line ( ) ;", "writer . flush ( ) ;", "writer . close ( ) ;", "result = true ; }", "catch ( Exception e ) {", "result = false ; }", "return result ; }"]}
{"ids": "46722", "code": ["public int hash Code ( ) {", "return ( NUM_ * color Model . hash Code ( ) ) + ( NUM_ * sample Model . hash Code ( ) ) ; }"]}
{"ids": "5207", "code": ["public void write File ( String name , String mime Type , String file Name , byte [ ] data ) throws IO Exception {", "if ( data == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( file Name == null || file Name . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "out . write Bytes ( PREFIX ) ;", "out . write Bytes ( boundary ) ;", "out . write Bytes ( NEWLINE ) ;", "out . write Bytes ( STR_ + name + STR_ + file Name + STR_ ) ;", "out . write Bytes ( NEWLINE ) ;", "if ( mime Type != null ) {", "out . write Bytes ( STR_ + mime Type ) ;", "out . write Bytes ( NEWLINE ) ; }", "out . write Bytes ( NEWLINE ) ;", "out . write ( data , NUM_ , data . length ) ;", "out . write Bytes ( NEWLINE ) ;", "out . flush ( ) ; }"]}
{"ids": "86419", "code": ["@ Target Api ( Build . VERSION CODES . ICE CREAM SANDWICH MR 1 ) private void on Configuration Changed ( Configuration new Config ) {", "final Locale new Locale = new Config . locale ;", "if ( new Locale . equals ( m System Locale ) ) {", "return ; }", "m System Locale = new Locale ;", "ensure Supported Locale ( ) ; }"]}
{"ids": "65262", "code": ["private static boolean is GM Tish ( String name ) {", "if ( name . length ( ) < NUM_ ) {", "return false ; }", "char c 1 = name . char At ( NUM_ ) ;", "char c 2 = name . char At ( NUM_ ) ;", "char c 3 = name . char At ( NUM_ ) ;", "if ( ! ( ( c 1 == STR_ || c 1 == STR_ ) && ( c 2 == STR_ || c 2 == STR_ ) && ( c 3 == STR_ || c 3 == STR_ ) ) && ! ( ( c 1 == STR_ || c 1 == STR_ ) && ( c 2 == STR_ || c 2 == STR_ ) && ( c 3 == STR_ || c 3 == STR_ ) ) && ! ( ( c 1 == STR_ || c 1 == STR_ ) && ( c 2 == STR_ || c 2 == STR_ ) && ( c 3 == STR_ ) ) ) {", "return false ; }", "if ( name . length ( ) == NUM_ ) {", "return true ; }", "String offset = name . substring ( NUM_ ) ;", "if ( offset . starts With ( STR_ ) ) {", "return offset . equals ( STR_ ) || offset . equals ( STR_ ) || offset . equals ( STR_ ) ; }", "else {", "return offset . equals ( STR_ ) || offset . equals ( STR_ ) || offset . equals ( STR_ ) ; } }"]}
{"ids": "77005", "code": ["protected void add Whole Match ( String Builder sb , String surface , String analyzed ) {", "sb . append ( STR_ ) ;", "sb . append ( surface ) ;", "sb . append ( STR_ ) ; }"]}
{"ids": "63357", "code": ["public void start ( ) {", "stop At = System . current Time Millis ( ) + MAX PROCESSING TIME ; }"]}
{"ids": "25703", "code": ["private Object [ ] single Row ( int row ) {", "Object [ ] res = new Object [ this . n Fields ] ;", "for ( int i = NUM_ ; i < this . n Fields ; i += NUM_ ) {", "if ( this . is Null == null || ! this . is Null [ row * this . n Fields + i ] ) {", "res [ i ] = Array Funcs . new Instance ( this . types [ i ] , NUM_ ) ;", "System . arraycopy ( this . data [ i ] , row , res [ i ] , NUM_ , NUM_ ) ; } }", "return res ; }"]}
{"ids": "10208", "code": ["public static String remove Chars ( String src , String chars ) {", "int i = src . length ( ) ;", "String Builder sb = new String Builder ( i ) ;", "for ( int j = NUM_ ; j < i ; j ++ ) {", "char c = src . char At ( j ) ;", "if ( chars . index Of ( c ) == - NUM_ ) {", "sb . append ( c ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "51740", "code": ["private void add All Columns ( ) throws SQL Exception {", "Database Meta Data meta Data = get Database Meta Data ( ) ;", "List < String > columns = new Array List < > ( ) ;", "try ( Result Set rs = meta Data . get Columns ( null , null , normalize Object Name ( statement Model . get Table Name ( ) ) , null ) ) {", "while ( rs . next ( ) ) {", "columns . add ( quote Object Name ( rs . get String ( IDX COLUMN NAME ) ) ) ; } }", "column Names = columns . to Array ( new String [ NUM_ ] ) ;", "add Returning Clause ( ) ; }"]}
{"ids": "27525", "code": ["static private void copy Stream ( final Input Stream content , final Output Stream outstr ) throws IO Exception {", "final byte [ ] buf = new byte [ GZIP BUFFER ] ;", "while ( true ) {", "final int rdlen = content . read ( buf ) ;", "if ( rdlen <= NUM_ ) {", "break ; }", "outstr . write ( buf , NUM_ , rdlen ) ; } }"]}
{"ids": "52432", "code": ["public void check And Setup Streams Drawer ( ) {", "setup List View Adapter ( ) ; }"]}
{"ids": "82288", "code": ["private com . codename 1 . ui . Component copy Component ( com . codename 1 . ui . Component cmp ) {", "com . codename 1 . ui . Container cnt = builder . create Container ( res , copied Resource Name ) ;", "com . codename 1 . ui . Component dest = builder . find By Name ( cmp . get Name ( ) , cnt ) ;", "if ( dest != null && dest . get Parent ( ) != null ) {", "remove Component Sync ( dest . get Parent ( ) , dest ) ; }", "return dest ; }"]}
{"ids": "30368", "code": ["@ Override public Big Decimal calculate Total Pending Advance ( final Big Decimal total Advance Paid , final Date bill Date , final Work Order Estimate work Order Estimate , final Long bill Id ) {", "final C Chart Of Accounts advance COA = contractor Advance Service . get Contractor Advance Accountcode For WOE ( work Order Estimate . get Id ( ) ) ;", "Big Decimal total Pending Balance = Big Decimal . ZERO ;", "Big Decimal total Advance Adjusted = Big Decimal . ZERO ;", "if ( advance COA != null && total Advance Paid != null && total Advance Paid . compare To ( Big Decimal . ZERO ) > NUM_ ) {", "total Advance Adjusted = get Total Advance Adjusted For WOE ( bill Date , work Order Estimate . get Id ( ) , advance COA . get Id ( ) , bill Id ) ;", "if ( total Advance Adjusted != null && total Advance Adjusted . compare To ( Big Decimal . ZERO ) > NUM_ && total Advance Adjusted . compare To ( Big Decimal . ZERO ) > NUM_ ) total Pending Balance = total Advance Adjusted . subtract ( total Advance Adjusted ) ;", "else total Pending Balance = total Advance Paid ; }", "return total Pending Balance ; }"]}
{"ids": "4506", "code": ["private void load Profile ( String user Id , String name ) {", "final Intent user Profile Intent = new Intent ( get Activity ( ) , User Profile Activity . class ) ;", "user Profile Intent . put Extra ( App Constants . Keys . USER ID , user Id ) ;", "user Profile Intent . put Extra ( App Constants . Keys . USER NAME , name ) ;", "user Profile Intent . put Extra ( App Constants . Keys . SERVICE SCREEN TYPE , App Constants . Service Screen Type . PROFILE ) ;", "start Activity ( user Profile Intent ) ; }"]}
{"ids": "86342", "code": ["private void scroll By ( final int increment ) {", "index += increment ;", "if ( index < NUM_ ) {", "index = NUM_ ; }", "if ( index >= items . size ( ) ) {", "index = items . size ( ) - NUM_ ; }", "redraw ( ) ; }"]}
{"ids": "52355", "code": ["public static boolean symbol Needs Quoting ( Char Sequence symbol , boolean quote Operators ) {", "int length = symbol . length ( ) ;", "if ( length == NUM_ ) {", "throw new Empty Symbol Exception ( ) ; }", "if ( ! is Identifier Keyword ( symbol ) ) {", "char c = symbol . char At ( NUM_ ) ;", "if ( ! quote Operators && is Operator Part ( c ) ) {", "for ( int ii = NUM_ ; ii < length ; ii ++ ) {", "c = symbol . char At ( ii ) ;", "if ( ! is Operator Part ( c ) ) {", "return true ; } }", "return false ; }", "else if ( is Identifier Start ( c ) ) {", "for ( int ii = NUM_ ; ii < length ; ii ++ ) {", "c = symbol . char At ( ii ) ;", "if ( ( c == STR_ || c < NUM_ || c > NUM_ ) || ! is Identifier Part ( c ) ) {", "return true ; } }", "return false ; } }", "return true ; }"]}
{"ids": "27520", "code": ["public static long parse Commit Counter File ( final String name , final String ext ) throws Number Format Exception {", "if ( name == null ) throw new Illegal Argument Exception ( ) ;", "if ( ext == null ) throw new Illegal Argument Exception ( ) ;", "final int len = name . length ( ) - ext . length ( ) ;", "final String file Base Name = name . substring ( NUM_ , len ) ;", "final long commit Counter = Long . parse Long ( file Base Name ) ;", "return commit Counter ; }"]}
{"ids": "78507", "code": ["public static Document load Document ( File file ) throws Exception {", "Document Builder Factory factory = Document Builder Factory . new Instance ( ) ;", "Document Builder builder = factory . new Document Builder ( ) ;", "return builder . parse ( file ) ; }"]}
{"ids": "2642", "code": ["private Node new Floating Comment ( ) {", "Node c = new Node ( Token . EMPTY ) ;", "link Comment To Node ( c ) ;", "return c ; }"]}
{"ids": "30353", "code": ["public Boolean is Hod ( final Long assign Id ) {", "final List < Head Of Departments > hod List = employee Department Repository . get All Hod Departments ( assign Id ) ;", "return ! hod List . is Empty ( ) ; }"]}
{"ids": "35576", "code": ["public Munger single Label Mode ( String ... languages ) {", "return single Label Mode ( Arrays . as List ( languages ) ) ; }"]}
{"ids": "23583", "code": ["public Stat Value [ ] match Spec ( Stat Spec spec ) {", "if ( spec . get Combine Type ( ) == Stat Spec . GLOBAL ) {", "Stat Value [ ] all Values = match Spec ( new Raw Stat Spec ( spec ) ) ;", "if ( all Values . length == NUM_ ) {", "return all Values ; }", "else {", "Combo Value cv = new Combo Value ( all Values ) ;", "return new Stat Value [ ] { cv } ; } }", "else {", "List l = new Array List ( ) ;", "Stat Archive Reader . Stat Archive File [ ] archives = get Archives ( ) ;", "for ( int i = NUM_ ; i < archives . length ; i ++ ) {", "Stat Archive File f = archives [ i ] ;", "if ( spec . archive Matches ( f . get File ( ) ) ) {", "f . match Spec ( spec , l ) ; } }", "Stat Value [ ] result = new Stat Value [ l . size ( ) ] ;", "return ( Stat Value [ ] ) l . to Array ( result ) ; } }"]}
{"ids": "38039", "code": ["private void assign Cluster Nums ( int [ ] cl num ) throws Exception {", "if ( m children != null && m children . size ( ) < NUM_ ) {", "throw new Exception ( STR_ ) ; }", "m cluster Num = cl num [ NUM_ ] ;", "cl num [ NUM_ ] ++ ;", "if ( m children != null ) {", "for ( int i = NUM_ ; i < m children . size ( ) ; i ++ ) {", "C Node child = m children . get ( i ) ;", "child . assign Cluster Nums ( cl num ) ; } } }"]}
{"ids": "47980", "code": ["protected void close Subpath ( ) {", "m PS Stream . println ( CLOSEPATH STR ) ;", "m Pen X = m Start Path X ;", "m Pen Y = m Start Path Y ; }"]}
{"ids": "46851", "code": ["public Model M Bean Notification Info ( String [ ] notif Types , String name , String description ) {", "this ( notif Types , name , description , null ) ; }"]}
{"ids": "12134", "code": ["public void clean Build Task ( long id ) throws Not Found Exception {", "Future Build Task task = tasks . remove ( id ) ;", "if ( task == null ) {", "throw new Not Found Exception ( String . format ( STR_ , id ) ) ; }", "task . cancel ( true ) ;", "cleanup ( task ) ; }"]}
{"ids": "22895", "code": ["public void move To ( final int lon Center , final int lat Center ) {", "double m Lat Center = Geo Math . lat E 7 To Mercator ( lat Center ) ;", "double m Top = Geo Math . lat E 7 To Mercator ( top ) ;", "int new Bottom = Geo Math . mercator To Lat E 7 ( m Lat Center - ( m Top - bottom Mercator ) / NUM_ ) ;", "try {", "translate ( ( lon Center - left - ( int ) ( width / NUM_ ) ) , new Bottom - bottom ) ; }", "catch ( Osm Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "26580", "code": ["public void send Event ( final String name , final Map < String , String > properties ) {", "final String event Name = String . format ( Tfs Telemetry Constants . PLUGIN ACTION EVENT NAME FORMAT , name ) ;", "final Property Map Builder builder = new Property Map Builder ( properties ) ;", "logger . debug ( String . format ( STR_ , name , builder . to String ( ) ) ) ;", "if ( telemetry Client != null ) {", "telemetry Client . track Event ( event Name , builder . build ( ) , null ) ; } }"]}
{"ids": "6568", "code": ["public void handle Header Column Pressed ( Point p ) {", "J Table Header th = TABLE . get Table Header ( ) ;", "int col = th . column At Point ( p ) ;", "int c = TABLE . convert Column Index To Model ( col ) ;", "if ( c != - NUM_ ) {", "TABLE . set Pressed Column Index ( c ) ;", "th . repaint ( th . get Header Rect ( col ) ) ; } }"]}
{"ids": "39693", "code": ["private static List < Fixed Record > create Fixed Records ( int count ) {", "List < Fixed Record > records = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "records . add ( new Fixed Record ( i ) ) ; }", "return records ; }"]}
{"ids": "4412", "code": ["public Tracked Entity Instance Query Params add Attributes If Not Exist ( List < Query Item > attrs ) {", "for ( Query Item attr : attrs ) {", "if ( attributes != null && ! attributes . contains ( attr ) ) {", "attributes . add ( attr ) ; } }", "return this ; }"]}
{"ids": "9138", "code": ["protected final void delete DBFFDC Files ( String directory To Delete ) throws Ade Exception {", "try {", "final File dir To Delete = new File ( directory To Delete ) ;", "String [ ] file List = dir To Delete . list ( ) ;", "if ( file List . length == NUM_ ) {", "dir To Delete . delete ( ) ; }", "else {", "for ( int i = NUM_ ; i < file List . length ; i ++ ) {", "final File f = new File ( dir To Delete , file List [ i ] ) ;", "if ( f . is Directory ( ) ) {", "final String file Path = f . get Path ( ) ;", "delete DBFFDC Files ( file Path ) ;", "continue ; }", "f . delete ( ) ; }", "file List = dir To Delete . list ( ) ;", "if ( file List . length == NUM_ ) {", "dir To Delete . delete ( ) ; } } }", "catch ( Exception e ) {", "throw new Ade Internal Exception ( STR_ , e ) ; } }"]}
{"ids": "72459", "code": ["public static void check Serialized Equality ( Object object ) {", "Object object 2 = serialize And Recover ( object ) ;", "Assert . assert Equals ( STR_ , object , object 2 ) ;", "Assert . assert Equals ( STR_ , object . hash Code ( ) , object 2 . hash Code ( ) ) ; }"]}
{"ids": "22772", "code": ["public static double mean ( final List < Double > list ) {", "double sum = NUM_ ;", "for ( Double number : list ) {", "sum += number ; }", "return sum / list . size ( ) ; }"]}
{"ids": "35211", "code": ["private static String from Html Entity ( String str ) {", "Character ch = map . get ( str ) ;", "return ( ch != null ) ? ch . to String ( ) : str ; }"]}
{"ids": "54691", "code": ["public final Array List < Wifi Record > load Wifis By Bssid ( final String bssid , final Integer session ) {", "final Array List < Wifi Record > wifis = new Array List < > ( ) ;", "String select Sql ;", "if ( session != null ) {", "select Sql = Schema . COL BSSID + STR_ + bssid + STR_ + Schema . COL SESSION ID + STR_ + session + STR_ ; }", "else {", "select Sql = Schema . COL BSSID + STR_ + bssid + STR_ ; }", "final Cursor cursor = content Resolver . query ( Content Provider . CONTENT URI WIFI , null , select Sql , null , null ) ;", "final int column Index = cursor . get Column Index ( Schema . COL BSSID ) ;", "final int column Index 2 = cursor . get Column Index ( Schema . COL SSID ) ;", "final int column Index 3 = cursor . get Column Index ( Schema . COL CAPABILITIES ) ;", "final int column Index 4 = cursor . get Column Index ( Schema . COL FREQUENCY ) ;", "final int column Index 5 = cursor . get Column Index ( Schema . COL LEVEL ) ;", "final int column Index 6 = cursor . get Column Index ( Schema . COL TIMESTAMP ) ;", "final int column Index 7 = cursor . get Column Index ( Schema . COL BEGIN POSITION ID ) ;", "final int column Index 8 = cursor . get Column Index ( Schema . COL END POSITION ID ) ;", "final int column Index 9 = cursor . get Column Index ( Schema . COL KNOWN WIFI ) ;", "while ( cursor . move To Next ( ) ) {", "final Wifi Record wifi = new Wifi Record ( ) ;", "wifi . set Bssid ( cursor . get String ( column Index ) ) ;", "wifi . set Ssid ( cursor . get String ( column Index 2 ) ) ;", "wifi . set Capabilities ( cursor . get String ( column Index 3 ) ) ;", "wifi . set Frequency ( cursor . get Int ( column Index 4 ) ) ;", "wifi . set Level ( cursor . get Int ( column Index 5 ) ) ;", "wifi . set Open Bmap Timestamp ( cursor . get Long ( column Index 6 ) ) ;", "wifi . set Begin Position ( load Position By Id ( cursor . get String ( column Index 7 ) ) ) ;", "wifi . set End Position ( load Position By Id ( cursor . get String ( column Index 8 ) ) ) ;", "wifi . set Catalog Status ( Catalog Status . values ( ) [ cursor . get Int ( column Index 9 ) ] ) ;", "wifis . add ( wifi ) ; }", "cursor . close ( ) ;", "return wifis ; }"]}
{"ids": "62082", "code": ["@ Override public void deinstall ( J Editor Pane editor ) {", "super . deinstall ( editor ) ;", "editor . remove Key Listener ( this ) ; }"]}
{"ids": "75458", "code": ["public boolean is Secure ( ) {", "return m Tls Cipher != null && ! m Tls Cipher . is Empty ( ) ; }"]}
{"ids": "68314", "code": ["public void sample ( Record rec ) {", "total Recs ++ ;", "if ( samples . size ( ) < MAX SAMPLES ) {", "samples . add ( new Sample ( rec , schema ) ) ;", "update New Value Interval ( rec ) ; }", "else {", "double flip = random . next Double ( ) ;", "if ( flip < ( double ) MAX SAMPLES / total Recs ) {", "samples . set ( random . next Int ( MAX SAMPLES ) , new Sample ( rec , schema ) ) ;", "update New Value Interval ( rec ) ; } } }"]}
{"ids": "22558", "code": ["public Tenant Create Param prepare Tenant Param ( Keystone Tenant tenant ) {", "Tenant Create Param param = new Tenant Create Param ( Cinder Constants . TENANT NAME PREFIX + STR_ + tenant . get Name ( ) , prepare User Mappings ( tenant . get Id ( ) ) ) ;", "param . set Description ( get Proper Tenant Description ( tenant . get Description ( ) ) ) ;", "return param ; }"]}
{"ids": "24327", "code": ["private void force Internal Error ( ) {", "throw new Internal Error ( STR_ ) ; }"]}
{"ids": "7605", "code": ["public static Image Encoder new Instance ( String format ) {", "Image Encoder image Encoder = null ;", "String class Name = ( String ) encoders . get ( format ) ;", "if ( class Name == null ) {", "throw new Illegal Argument Exception ( STR_ + format ) ; }", "try {", "Class image Encoder Class = Class . for Name ( class Name ) ;", "image Encoder = ( Image Encoder ) image Encoder Class . new Instance ( ) ; }", "catch ( Exception e ) {", "throw new Illegal Argument Exception ( e . to String ( ) ) ; }", "return image Encoder ; }"]}
{"ids": "52162", "code": ["public double empirical HSI Cincomplete Cholesky ( Tetrad Matrix Gy , Tetrad Matrix Gx , Tetrad Matrix Gz , int m ) {", "int ky = Gy . columns ( ) ;", "int kx = Gx . columns ( ) ;", "int kz = Gz . columns ( ) ;", "Tetrad Matrix H = Kernel Utils . construct H ( m ) ;", "Tetrad Matrix Gcy = H . times ( Gy ) ;", "Tetrad Matrix Gcx = H . times ( Gx ) ;", "Tetrad Matrix Gcz = H . times ( Gz ) ;", "Tetrad Matrix A = new Tetrad Matrix ( ky , kx ) ;", "Tetrad Matrix Gcyt = Gcy . transpose ( ) ;", "A = Gcyt . times ( Gcx ) ;", "Tetrad Matrix B = Gcy . times ( A ) ;", "Tetrad Matrix Kyx = new Tetrad Matrix ( m , m ) ;", "Tetrad Matrix Gcxt = new Tetrad Matrix ( kx , m ) ;", "Gcxt = Gcx . transpose ( ) ;", "Kyx = B . times ( Gcxt ) ;", "double emp HSIC = NUM_ ;", "double xy = NUM_ ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "emp HSIC += matrix Product Entry ( B , Gcxt , i , i ) ; }", "Tetrad Matrix Gytz = Gcyt . times ( Gcz ) ;", "Tetrad Matrix Gczt = Gcz . transpose ( ) ;", "Tetrad Matrix Gztx = Gczt . times ( Gcx ) ;", "Tetrad Matrix Gztz = Gczt . times ( Gcz ) ;", "Tetrad Matrix Gztzr = Gztz . copy ( ) ;", "for ( int i = NUM_ ; i < kz ; i ++ ) {", "Gztzr . set ( i , i , Gztz . get ( i , i ) + this . regularizer ) ; }", "Tetrad Matrix ZI = Gztzr . inverse ( ) ;", "Tetrad Matrix Z Izt = ZI . times ( Gczt ) ;", "Tetrad Matrix Gzr = Gcz . copy ( ) ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "for ( int j = NUM_ ; j < kz ; j ++ ) {", "Gzr . set ( i , j , Gcz . get ( i , j ) * ( - NUM_ / this . regularizer ) ) ; } }", "Tetrad Matrix Zinv = Gzr . times ( Z Izt ) ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "Zinv . set ( i , i , Zinv . get ( i , i ) + ( NUM_ / this . regularizer ) ) ; }", "Tetrad Matrix Gztzinv = Gczt . times ( Zinv ) ;", "Tetrad Matrix Gzinvz = Zinv . times ( Gcz ) ;", "Tetrad Matrix Gztinv 2 z = Gztzinv . times ( Gzinvz ) ;", "Tetrad Matrix Gytzztzinv 2 z = Gytz . times ( Gztinv 2 z ) ;", "Tetrad Matrix Gytzztzinv 2 zztx = Gytzztzinv 2 z . times ( Gztx ) ;", "Tetrad Matrix Gyytzztzinv 2 zztx = Gcy . times ( Gytzztzinv 2 zztx ) ;", "double second = NUM_ ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "second += matrix Product Entry ( Gyytzztzinv 2 zztx , Gcxt , i , i ) ; }", "emp HSIC -= NUM_ * second ;", "Tetrad Matrix Gxtz = Gcxt . times ( Gcz ) ;", "Tetrad Matrix Gxtzztinv 2 z = Gxtz . times ( Gztinv 2 z ) ;", "Tetrad Matrix Gyytzztzinv 2 zztxxtzztinv 2 z = Gyytzztzinv 2 zztx . times ( Gxtzztinv 2 z ) ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "emp HSIC += matrix Product Entry ( Gyytzztzinv 2 zztxxtzztinv 2 z , Gczt , i , i ) ; }", "double betaz = NUM_ ;", "for ( int i = NUM_ ; i < ( m - NUM_ ) ; i ++ ) {", "for ( int j = ( i + NUM_ ) ; j < m ; j ++ ) {", "betaz += Math . pow ( matrix Product Entry ( Gcz , Gczt , i , j ) , NUM_ ) ;", "betaz += Math . pow ( matrix Product Entry ( Gcz , Gczt , j , i ) , NUM_ ) ; } }", "emp HSIC *= ( m / ( betaz * ( m - NUM_ ) ) ) ;", "return emp HSIC ; }"]}
{"ids": "75792", "code": ["public static File parse ( String [ ] options , String option , File def Value ) throws Exception {", "String value = Utils . get Option ( option , options ) ;", "if ( value . is Empty ( ) ) return def Value ;", "else return new File ( value ) ; }"]}
{"ids": "28002", "code": ["public void ensure Capacity ( int min Capacity ) {", "int old Capacity = capacity ;", "if ( min Capacity > old Capacity ) {", "int new Capacity = ( old Capacity * NUM_ ) / NUM_ + NUM_ ;", "if ( new Capacity < min Capacity ) new Capacity = min Capacity ;", "Bit Vector vector = to Bit Vector ( ) ;", "vector . set Size ( new Capacity * bits Per Element ) ;", "this . bits = vector . elements ( ) ;", "this . capacity = new Capacity ; } }"]}
{"ids": "22171", "code": ["private String detail Base ( final Method method ) {", "final Class < ? > clazz = method . get Declaring Class ( ) ;", "final String detail Base = Message Utils . bundle Name For Class ( clazz ) ;", "if ( is Blank ( detail Base ) ) {", "throw new Illegal State Exception ( STR_ + clazz ) ; }", "return detail Base ; }"]}
{"ids": "35358", "code": ["public void finished ( ) throws IO Exception {", "output Stream . close ( ) ; }"]}
{"ids": "48504", "code": ["public final void lock ( ) {", "Sun Toolkit . awt Lock ( ) ; }"]}
{"ids": "74656", "code": ["public Update Response remove ( long id ) throws IO Exception , Solr Server Exception {", "Update Response res = solr Client . delete By Id ( String . value Of ( id ) ) ;", "solr Client . commit ( false , true , true ) ;", "return res ; }"]}
{"ids": "38334", "code": ["public void switch Setup ( ) {", "int ret Val ;", "ret Val = m Setup File Chooser . show Open Dialog ( this ) ;", "if ( ret Val != J File Chooser . APPROVE OPTION ) {", "return ; }", "m Db Utils . initialize ( m Setup File Chooser . get Selected File ( ) ) ;", "m URL = m Db Utils . get Database URL ( ) ;", "m User = m Db Utils . get Username ( ) ;", "m Password = m Db Utils . get Password ( ) ;", "m Text URL . set Text ( m URL ) ; }"]}
{"ids": "86954", "code": ["private Client Details Entity load Client Object ( final OIDC Authorization Request Context authorization Request ) {", "log . debug ( STR_ , authorization Request . get Client Id ( ) ) ;", "return client Service . load Client By Client Id ( authorization Request . get Client Id ( ) ) ; }"]}
{"ids": "7283", "code": ["public void add Field Property ( String name , String accessor Field ) {", "field Properties . add ( new Legacy Field Prop Desc ( name , accessor Field ) ) ; }"]}
{"ids": "17018", "code": ["private void parse No Wild Cards ( ) {", "this . f Segments = new String [ NUM_ ] ;", "this . f Segments [ NUM_ ] = this . f Pattern ;", "this . f Bound = this . f Length ; }"]}
{"ids": "67953", "code": ["public Map < String , String > environment ( ) {", "String base 64 = to String Base 64 ( ) ;", "if ( base 64 == null || base 64 . length ( ) == NUM_ ) {", "return Collections . empty Map ( ) ; }", "Map < String , String > environment = Maps . new Hash Map ( ) ;", "environment . put ( Baggage Utils . BAGGAGE ENVIRONMENT VARIABLE , base 64 ) ;", "return environment ; }"]}
{"ids": "55234", "code": ["public void listen Mod Log ( String username , String token ) {", "if ( ! has Server ( ) ) {", "return ; }", "if ( mod Log Listen . contains Key ( username ) ) {", "return ; }", "this . token = token ;", "long user Id = get User Id ( username ) ;", "mod Log Listen . put ( username , user Id ) ;", "LOGGER . info ( STR_ + username + STR_ + user Id ) ;", "if ( user Id != - NUM_ ) {", "send Listen Mod Log ( user Id , true ) ; } }"]}
{"ids": "28977", "code": ["public static boolean is Valid Class Name ( String class Name ) {", "if ( class Name . index Of ( STR_ ) >= NUM_ ) {", "return false ; }", "return true ; }"]}
{"ids": "73782", "code": ["@ Suppress Warnings ( STR_ ) public void new Minute ( ) {", "if ( ! in Sync With Internal Fast Clock ) {", "return ; }", "if ( correct Fast Clock || synchronize With Internal Clock ) {", "Date now = clock . get Time ( ) ;", "if ( now . get Minutes ( ) != NUM_ ) {", "cur Days = now . get Date ( ) ;", "cur Hours = now . get Hours ( ) ;", "cur Minutes = now . get Minutes ( ) ;", "long millis = now . get Time ( ) ;", "long elapsed MS = millis % MSECPERMINUTE ;", "double frac min = elapsed MS / ( double ) MSECPERMINUTE ;", "cur Fractional Minutes = ( int ) CORRECTION - ( int ) ( CORRECTION * frac min ) ;", "set Clock ( ) ; } }", "else if ( set Internal && ! correct Fast Clock && ! synchronize With Internal Clock ) {", "in Sync With Internal Fast Clock = false ;", "initiate Read ( ) ; } }"]}
{"ids": "21475", "code": ["private < T extends Discovered System Object > boolean is Data Collection Scan Job Scheduling Needed ( long last Scan Time , boolean in Progress ) {", "long system Time = System . current Time Millis ( ) ;", "long refresh Interval = get Refresh Interval ( Controller Service Impl . SCANNER ) ;", "if ( in Progress ) {", "return false ; }", "if ( last Scan Time > NUM_ && ( system Time - last Scan Time < refresh Interval * NUM_ ) ) {", "logger . info ( STR_ ) ;", "return false ; }", "return true ; }"]}
{"ids": "37317", "code": ["private void remove Breakpoints ( final Set < Breakpoint Address > breakpoint Address Set , final Breakpoint Storage storage ) {", "if ( breakpoint Address Set . size ( ) != NUM_ ) {", "final Set < Breakpoint > breakpoints = storage . get Break Points By Address ( breakpoint Address Set ) ;", "storage . remove Breakpoints ( breakpoint Address Set ) ;", "for ( final Breakpoint Manager Listener listener : listeners ) {", "try {", "listener . breakpoints Removed ( breakpoints ) ; }", "catch ( final Exception e ) {", "C Utility Functions . log Exception ( e ) ; } } } }"]}
{"ids": "14832", "code": ["public void replace Creation Template ( Guid guid , String template Name , Attr Set attr Set ) throws Config Manager Exception {", "if ( guid == null ) {", "guid = new Guid ( root DN ) ; }", "DN dn = DN . value Of ( guid . get Dn ( ) ) ;", "String org = STR_ ;", "List < RDN > rdns = new Array List < > ( ) ;", "for ( RDN rdn : dn ) {", "rdns . add ( NUM_ , rdn ) ; }", "for ( RDN rdn : rdns ) {", "org = org + STR_ + LDAP Utils . rdn Value ( rdn ) ; }", "String service = CREATIONPATH + STR_ + template Name ;", "Map map = convert To Map ( attr Set ) ;", "try {", "replace Service Attributes ( org , service , map ) ; }", "catch ( SMS Exception e ) {", "String args [ ] = new String [ NUM_ ] ;", "args [ NUM_ ] = e . to String ( ) ;", "throw new Config Manager Exception ( i 18 n . get String ( IUMS Constants . ERROR CM , args ) ) ; }", "catch ( SSO Exception se ) {", "String args [ ] = new String [ NUM_ ] ;", "args [ NUM_ ] = se . to String ( ) ;", "throw new Config Manager Exception ( i 18 n . get String ( IUMS Constants . ERROR CM , args ) ) ; } }"]}
{"ids": "30813", "code": ["private void read Object ( Object Input Stream stream ) throws IO Exception , Class Not Found Exception {", "stream . default Read Object ( ) ;", "Marshalled Instance mi = ( Marshalled Instance ) stream . read Object ( ) ;", "try {", "listener = ( Remote Event Listener ) mi . get ( false ) ; }", "catch ( Throwable e ) {", "if ( e instanceof Error && Throwable Constants . retryable ( e ) == Throwable Constants . BAD OBJECT ) {", "throw ( Error ) e ; }", "logger . log ( Level . WARNING , STR_ , e ) ; } }"]}
{"ids": "22548", "code": ["public Sc Server create Cluster Server ( String ssn , String cluster Name , String os Id ) throws Storage Center API Exception {", "Parameters params = new Parameters ( ) ;", "params . add ( STR_ , cluster Name ) ;", "params . add ( STR_ , ssn ) ;", "params . add ( STR_ , NOTES STRING ) ;", "params . add ( STR_ , os Id ) ;", "Rest Result rr = rest Client . post ( STR_ , params . to Json ( ) ) ;", "if ( ! check Results ( rr ) ) {", "String error = String . format ( STR_ , cluster Name , rr . get Error Msg ( ) ) ;", "throw new Storage Center API Exception ( error ) ; }", "return gson . from Json ( rr . get Result ( ) , Sc Server . class ) ; }"]}
{"ids": "79186", "code": ["static Potion Type from Name ( String name ) {", "for ( Potion Type Table table : values ( ) ) {", "if ( name . equals Ignore Case ( table . name ) ) return table . type ; }", "return Potion Type . value Of ( name . to Upper Case ( ) ) ; }"]}
{"ids": "31602", "code": ["public synchronized void remove Curl Mesh ( Curl Mesh mesh ) {", "while ( m Curl Meshes . remove ( mesh ) ) ; }"]}
{"ids": "43588", "code": ["private List < Datum > sample Nbest List ( int source Id , Sequence < I String > source , Sentence Level Metric < I String , String > score Metric , List < Rich Translation < I String , String > > translations , List < Sequence < I String > > references ) {", "int [ ] source Ids = new int [ NUM_ ] ;", "source Ids [ NUM_ ] = source Id ;", "List < Sequence < I String > > sources = new Array List < > ( NUM_ ) ;", "sources . add ( source ) ;", "List < List < Rich Translation < I String , String > > > translation List = new Array List < List < Rich Translation < I String , String > > > ( NUM_ ) ;", "translation List . add ( translations ) ;", "List < List < Sequence < I String > > > reference List = new Array List < List < Sequence < I String > > > ( NUM_ ) ;", "reference List . add ( references ) ;", "return sample Nbest Lists ( source Ids , sources , score Metric , translation List , reference List ) ; }"]}
{"ids": "63250", "code": ["public boolean is Closed ( ) {", "return map . is Closed ( ) ; }"]}
{"ids": "45211", "code": ["public void insert Think Time ( ) {", "Script Step think Time Script Step = Script Step Factory . create Think Time ( get Min Think Time ( ) , get Max Think Time ( ) ) ;", "steps . add ( get Insert Index ( ) , think Time Script Step ) ;", "min Think Time = STR_ ;", "max Think Time = STR_ ;", "reindex Script Steps ( ) ; }"]}
{"ids": "60434", "code": ["public void add Node ( final Instruction instruction ) {", "instructions . add ( instruction ) ;", "if ( prev Instruction != null ) {", "add Edge ( prev Instruction , instruction ) ; }", "prev Instruction = instruction ; }"]}
{"ids": "3968", "code": ["public void ensure Capacity ( int minimum Capacity ) {", "if ( minimum Capacity <= capacity ) return ;", "if ( minimum Capacity > NUM_ ) {", "capacity = ( minimum Capacity + NUM_ ) & ~ NUM_ ; }", "else {", "while ( capacity < minimum Capacity ) {", "capacity += capacity ; } }", "byte [ ] bytes = new byte [ capacity ] ;", "System . arraycopy ( buffer , NUM_ , bytes , NUM_ , length ) ;", "buffer = bytes ; }"]}
{"ids": "71255", "code": ["public < T > JSONAPI Document < List < T > > read Document Collection ( Input Stream data Stream , Class < T > clazz ) {", "try {", "resource Cache . init ( ) ;", "Json Node root Node = object Mapper . read Tree ( data Stream ) ;", "Validation Utils . ensure Not Error ( object Mapper , root Node ) ;", "Validation Utils . ensure Collection ( root Node ) ;", "resource Cache . cache ( parse Included ( root Node ) ) ;", "List < T > resource List = new Array List < > ( ) ;", "for ( Json Node element : root Node . get ( DATA ) ) {", "T pojo = read Object ( element , clazz , true ) ;", "resource List . add ( pojo ) ; }", "JSONAPI Document < List < T > > result = new JSONAPI Document < > ( resource List , object Mapper ) ;", "if ( root Node . has ( META ) ) {", "result . set Meta ( map Meta ( root Node . get ( META ) ) ) ; }", "if ( root Node . has ( LINKS ) ) {", "result . set Links ( new Links ( map Links ( root Node . get ( LINKS ) ) ) ) ; }", "return result ; }", "catch ( Runtime Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; }", "finally {", "resource Cache . clear ( ) ; } }"]}
{"ids": "70178", "code": ["public void add Targeted By Swarm ( int entity Id , int weapon Id ) {", "hit By Swarms Entity . add Element ( new Integer ( entity Id ) ) ;", "hit By Swarms Weapon . add Element ( new Integer ( weapon Id ) ) ; }"]}
{"ids": "32397", "code": ["private boolean is Checkpoint Exists ( Connection conn , String key ) throws SQL Exception {", "Prepared Statement st = null ;", "Result Set rs = null ;", "try {", "st = conn . prepare Statement ( chk Exists Sql ) ;", "st . set String ( NUM_ , key ) ;", "rs = st . execute Query ( ) ;", "return rs . next ( ) ; }", "finally {", "U . close ( rs , log ) ;", "U . close ( st , log ) ; } }"]}
{"ids": "5782", "code": ["public static void copy Stream ( Input Stream is , Output Stream os , byte [ ] buffer , int buffer Size , String confid , double file Size , Context context ) throws IO Exception {", "double downloaded = NUM_ ;", "int [ ] update = new int [ NUM_ ] ;", "try {", "for ( ; ; ) {", "int count = is . read ( buffer , NUM_ , buffer Size ) ;", "downloaded += count ;", "if ( count == - NUM_ ) {", "if ( context != null ) { }", "break ; }", "os . write ( buffer , NUM_ , count ) ;", "if ( context != null ) {", "update [ NUM_ ] = ( int ) downloaded ;", "update [ NUM_ ] = ( int ) file Size ;", "update [ NUM_ ] = ( int ) ( ( downloaded / file Size ) * NUM_ ) ; } } }", "catch ( IO Exception e ) {", "throw e ; } }"]}
{"ids": "44123", "code": ["@ Override public void write Header ( ) throws IO Exception {", "os = new PDF Writer ( new Buffered Output Stream ( ros ) , PDF VERSION ) ;", "delay Image Queue = new PDF Image Delay Queue ( os ) ;", "delay Paint Queue = new PDF Paint Delay Queue ( os , delay Image Queue ) ;", "font Table = new PDF Font Table ( os ) ;", "PDF Doc Info info = os . open Doc Info ( STR_ ) ;", "info . set Title ( get Property ( TITLE ) ) ;", "info . set Author ( get Property ( AUTHOR ) ) ;", "info . set Subject ( get Property ( SUBJECT ) ) ;", "info . set Keywords ( get Property ( KEYWORDS ) ) ;", "info . set Creator ( get Creator ( ) ) ;", "info . set Producer ( producer == null ? STR_ : producer ) ;", "if ( ! is Device Independent ( ) ) {", "Calendar now = Calendar . get Instance ( ) ;", "info . set Creation Date ( now ) ;", "info . set Modification Date ( now ) ; }", "info . set Trapped ( STR_ ) ;", "os . close ( info ) ;", "PDF Catalog catalog = os . open Catalog ( STR_ , STR_ ) ;", "catalog . set Outlines ( STR_ ) ;", "catalog . set Page Mode ( STR_ ) ;", "catalog . set Viewer Preferences ( STR_ ) ;", "catalog . set Open Action ( new Object [ ] { os . ref ( STR_ ) , os . name ( STR_ ) } ) ;", "os . close ( catalog ) ;", "PDF Viewer Preferences prefs = os . open Viewer Preferences ( STR_ ) ;", "prefs . set Fit Window ( true ) ;", "prefs . set Center Window ( false ) ;", "os . close ( prefs ) ;", "alpha Index = NUM_ ;", "ext G States = new Hash Map < Float , String > ( ) ;", "if ( ! is Multi Page ( ) ) {", "open Page ( get Size ( ) , null ) ; } }"]}
{"ids": "43979", "code": ["protected String parse String ( int closing Character ) throws IO Exception , RDF Parse Exception {", "String Builder sb = get Builder ( ) ;", "while ( true ) {", "int c = read Code Point ( ) ;", "if ( c == closing Character ) {", "break ; }", "else if ( c == - NUM_ ) {", "throw EOF Exception ( ) ; }", "append Codepoint ( sb , c ) ;", "if ( c == STR_ ) {", "c = read Code Point ( ) ;", "if ( c == - NUM_ ) {", "throw EOF Exception ( ) ; }", "append Codepoint ( sb , c ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "48575", "code": ["private void code Unwrap Return Value ( Class < ? > type , Data Output Stream out ) throws IO Exception {", "if ( type . is Primitive ( ) ) {", "Primitive Type Info prim = Primitive Type Info . get ( type ) ;", "out . write Byte ( opc checkcast ) ;", "out . write Short ( cp . get Class ( prim . wrapper Class Name ) ) ;", "out . write Byte ( opc invokevirtual ) ;", "out . write Short ( cp . get Method Ref ( prim . wrapper Class Name , prim . unwrap Method Name , prim . unwrap Method Desc ) ) ;", "if ( type == int . class || type == boolean . class || type == byte . class || type == char . class || type == short . class ) {", "out . write Byte ( opc ireturn ) ; }", "else if ( type == long . class ) {", "out . write Byte ( opc lreturn ) ; }", "else if ( type == float . class ) {", "out . write Byte ( opc freturn ) ; }", "else if ( type == double . class ) {", "out . write Byte ( opc dreturn ) ; }", "else {", "throw new Assertion Error ( ) ; } }", "else {", "out . write Byte ( opc checkcast ) ;", "out . write Short ( cp . get Class ( dot To Slash ( type . get Name ( ) ) ) ) ;", "out . write Byte ( opc areturn ) ; } }"]}
{"ids": "34809", "code": ["private String format Link ( String [ ] parts ) {", "String anchor , text ;", "if ( parts . length < NUM_ ) {", "anchor = STR_ ;", "text = STR_ ; }", "else {", "anchor = parts [ NUM_ ] ;", "text = parts [ NUM_ ] ; }", "return String . format ( STR_ , anchor , text ) ; }"]}
{"ids": "81188", "code": ["public boolean fix Utils ( String [ ] utils ) throws Exception {", "for ( String util : utils ) {", "if ( ! check Util ( util ) ) {", "if ( check Util ( STR_ ) ) {", "if ( has Util ( util , STR_ ) ) {", "fix Util ( util , Root Tools . util Path ) ; } }", "else {", "if ( check Util ( STR_ ) ) {", "if ( has Util ( util , STR_ ) ) {", "fix Util ( util , Root Tools . util Path ) ; } }", "else {", "return false ; } } } }", "return true ; }"]}
{"ids": "4885", "code": ["public static String [ ] ls Directories ( String directory ) throws Exception {", "String [ ] tmp = ls ( directory ) ;", "Array List < String > files = new Array List < > ( ) ;", "for ( String s : tmp ) {", "if ( is Directory ( directory + File . separator + s ) ) files . add ( s ) ; }", "return files . to Array ( new String [ files . size ( ) ] ) ; }"]}
{"ids": "35337", "code": ["public static void encode ( Appendable out , int value ) throws IO Exception {", "value = to VLQ Signed ( value ) ;", "do {", "int digit = value & VLQ BASE MASK ;", "value >>>= VLQ BASE SHIFT ;", "if ( value > NUM_ ) {", "digit |= VLQ CONTINUATION BIT ; }", "out . append ( Base 64 . to Base 64 ( digit ) ) ; }", "while ( value > NUM_ ) ; }"]}
{"ids": "36634", "code": ["public mx I Cell Overlay remove Cell Overlay ( Object cell , mx I Cell Overlay overlay ) {", "if ( overlay == null ) {", "remove Cell Overlays ( cell ) ; }", "else {", "mx I Cell Overlay [ ] arr = get Cell Overlays ( cell ) ;", "if ( arr != null ) {", "List < mx I Cell Overlay > list = Arrays . as List ( arr ) ;", "if ( list . remove ( overlay ) ) {", "remove Cell Overlay Component ( overlay , cell ) ; }", "arr = ( mx I Cell Overlay [ ] ) list . to Array ( ) ;", "overlays . put ( cell , arr ) ; } }", "return overlay ; }"]}
{"ids": "71598", "code": ["public void remove Foreign Key ( int idx ) {", "foreign Keys . remove ( idx ) ; }"]}
{"ids": "78472", "code": ["public void add Gefaehrdungs Umsetzung ( Gefaehrdungs Umsetzung gefaehrdung ) {", "if ( ! all Gefaehrdungs Umsetzungen . contains ( gefaehrdung ) ) {", "all Gefaehrdungs Umsetzungen . add ( gefaehrdung ) ; } }"]}
{"ids": "3860", "code": ["String normalize Class Path ( String class Path , boolean generate Relative ) {", "char sep = Caucho Util . get Path Separator Char ( ) ;", "int head = NUM_ ;", "int tail = NUM_ ;", "Char Buffer cb = Char Buffer . allocate ( ) ;", "while ( head < class Path . length ( ) ) {", "tail = class Path . index Of ( sep , head ) ;", "if ( tail < NUM_ ) tail = class Path . length ( ) ;", "if ( tail > head ) {", "String segment = class Path . substring ( head , tail ) ;", "segment = normalize Path ( segment , generate Relative ) ;", "if ( segment != null ) {", "if ( cb . length ( ) != NUM_ ) cb . append ( sep ) ;", "cb . append ( segment ) ; } }", "head = tail + NUM_ ; }", "return cb . close ( ) ; }"]}
{"ids": "35067", "code": ["protected Node string Conversion ( Node node ) {", "Type Element string Element = elements . get Type Element ( STR_ ) ;", "if ( ! Types Utils . is String ( node . get Type ( ) ) ) {", "Node converted = new String Conversion Node ( node . get Tree ( ) , node , string Element . as Type ( ) ) ;", "add To Converted Lookup Map ( converted ) ;", "insert Node After ( converted , node ) ;", "return converted ; }", "else {", "return node ; } }"]}
{"ids": "48611", "code": ["private void validate ( ) throws URI Syntax Exception {", "String s = get Scheme ( ) ;", "if ( ( s != null ) && ( s . compare To ( STR_ ) == NUM_ ) ) {", "return ; }", "if ( get Local Vm Id ( ) == - NUM_ ) {", "throw new URI Syntax Exception ( uri . to String ( ) , STR_ ) ; } }"]}
{"ids": "16155", "code": ["public synchronized void finish Writing ( ) {", "done Writing = true ;", "notify All ( ) ; }"]}
{"ids": "27541", "code": ["private long offset 2 Physical Address ( final long offset ) {", "return offset + header Size ; }"]}
{"ids": "14469", "code": ["public static boolean is Authorized ( String log Name , String operation , Object credential ) {", "return authorizer . is Authorized ( log Name , operation , credential ) ; }"]}
{"ids": "7078", "code": ["public Permission Request Object on Rational ( Func 3 rational Func ) {", "m Rational Func = rational Func ;", "return this ; }"]}
{"ids": "30573", "code": ["public Generic Principal ( String user Name , String password , List < String > roles , Map < String , List < Generic Principal . Attribute > > write Entries , Map < String , List < Generic Principal . Attribute > > read Entries , Map < String , List < Generic Principal . Attribute > > execute Tasks ) {", "this . user Name = user Name ;", "this . password = password ;", "this . write Entries = write Entries ;", "this . read Entries = read Entries ;", "this . execute Tasks = execute Tasks ;", "if ( roles != null ) {", "this . roles = new String [ roles . size ( ) ] ;", "this . roles = roles . to Array ( this . roles ) ;", "if ( this . roles . length > NUM_ ) Arrays . sort ( this . roles ) ; }", "write Match Objects = new Hash Map < String , Match Object > ( ) ;", "read Match Objects = new Hash Map < String , Match Object > ( ) ;", "execute Match Objects = new Hash Map < String , Match Object > ( ) ;", "user Defined Roles = new Array List < String > ( ) ; }"]}
{"ids": "80072", "code": ["public static int roll 1 D 6 ( ) {", "return rand . next Int ( NUM_ ) + NUM_ ; }"]}
{"ids": "67982", "code": ["static byte [ ] septet Stream 2 octet Stream ( byte [ ] septets ) {", "int octet Length = ( int ) Math . ceil ( ( ( septets . length * NUM_ ) ) / NUM_ ) ;", "byte [ ] octets = new byte [ octet Length ] ;", "for ( int i = NUM_ ; i < septets . length ; i ++ ) {", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "if ( ( septets [ i ] & ( NUM_ << j ) ) != NUM_ ) {", "int bit Index = ( i * NUM_ ) + j ;", "octets [ bit Index > > > NUM_ ] |= NUM_ << ( bit Index & NUM_ ) ; } } }", "return octets ; }"]}
{"ids": "72509", "code": ["@ Override public double height ( final int marker Index ) {", "Math Utils . check Range Inclusive ( marker Index , NUM_ , marker Array . length - NUM_ ) ;", "return marker Array [ marker Index ] . marker Height ; }"]}
{"ids": "54100", "code": ["public < K , V > void consume ( String group Id , String client Id , Offset Reset Strategy auto Offset Reset , Deserializer < K > key Deserializer , Deserializer < V > value Deserializer , Boolean Supplier continuation , Offset Commit Callback offset Commit Callback , Runnable completion , Collection < String > topics , java . util . function . Consumer < Consumer Record < K , V > > consumer Function ) {", "Properties props = get Consumer Properties ( group Id , client Id , auto Offset Reset ) ;", "Thread t = new Thread ( null ) ;", "t . set Name ( client Id + STR_ ) ;", "t . start ( ) ; }"]}
{"ids": "63341", "code": ["public static void reindex ( Connection conn ) throws SQL Exception {", "init ( conn ) ;", "remove All Triggers ( conn , TRIGGER PREFIX ) ;", "remove Index Files ( conn ) ;", "Statement stat = conn . create Statement ( ) ;", "Result Set rs = stat . execute Query ( STR_ + SCHEMA + STR_ ) ;", "while ( rs . next ( ) ) {", "String schema = rs . get String ( STR_ ) ;", "String table = rs . get String ( STR_ ) ;", "create Trigger ( conn , schema , table ) ;", "index Existing Rows ( conn , schema , table ) ; } }"]}
{"ids": "51018", "code": ["private void resize Tables ( ) {", "if ( m Object Data Used > m Object Data . length - MAX DATA SIZE ) {", "m Object Data = Arrays . copy Of ( m Object Data , m Object Data . length * NUM_ ) ; }", "if ( m Object Count < m Types . length ) {", "return ; }", "m Object Offset = Arrays . copy Of ( m Object Offset , m Object Offset . length * NUM_ ) ;", "m Types = Arrays . copy Of ( m Types , m Types . length * NUM_ ) ;", "m Objects = Arrays . copy Of ( m Objects , m Objects . length * NUM_ ) ;", "m Rect = Arrays . copy Of ( m Rect , m Rect . length * NUM_ ) ; }"]}
{"ids": "30044", "code": ["public static String queue Name From DB Name ( String db Name ) {", "String [ ] tokens = db Name . split ( STR_ , NUM_ ) ;", "return tokens [ NUM_ ] ; }"]}
{"ids": "80880", "code": ["public String Use This ( int type , String id , String context ) {", "int i = Find Sym ( type , id , context ) ;", "if ( i == symtab . size ( ) ) return id ;", "else return ( ( Sym Tab Entry ) symtab . element At ( i ) ) . use This ; }"]}
{"ids": "78875", "code": ["private float angle ( Touch State s ) {", "return ( float ) Math . to Degrees ( Math . atan 2 ( s . y Down - s . y Current , s . x Down - s . x Current ) ) ; }"]}
{"ids": "62865", "code": ["private int uint 16 From Data ( int offset ) {", "return two Bytes To Int ( Arrays . copy Of Range ( data ( ) , offset , offset + NUM_ ) , Constants . CC 2540 BYTE ORDER ) ; }"]}
{"ids": "56916", "code": ["private static String remove Quotes Encolosing Option ( String file Name , String option ) throws Exception {", "String option 1 = remove Quote Characters If Necessary ( file Name , option , STR_ ) ;", "if ( ! option 1 . equals ( option ) ) {", "return option 1 ; }", "return remove Quote Characters If Necessary ( file Name , option , STR_ ) ; }"]}
{"ids": "60478", "code": ["@ Nullable public Dimension adjust ( @ Not Null Dimension new Preferred Size , @ Nullable Dimension old Preferred Size , @ Not Null Editor Impl editor ) {", "if ( old Preferred Size == null || my Skip ) {", "return new Preferred Size ; }", "if ( new Preferred Size . height != old Preferred Size . height ) {", "return new Preferred Size ; }", "strip Timings ( ) ;", "my Timings . add ( System . current Time Millis ( ) ) ;", "if ( my Timings . size ( ) < FREQUENT SIZE CHANGES NUMBER ) {", "return new Preferred Size ; }", "boolean increase Width = new Preferred Size . width > old Preferred Size . width ;", "Dimension result ;", "if ( increase Width ) {", "final int space Width = Editor Util . get Space Width ( Font . PLAIN , editor ) ;", "new Preferred Size . width += my Reserve Columns * space Width ;", "my Reserve Columns += NUM_ ;", "result = new Preferred Size ; }", "else {", "result = old Preferred Size ; }", "schedule Size Update ( editor ) ;", "return result ; }"]}
{"ids": "42435", "code": ["public RVM Field find Declared Field ( Atom field Name , Atom field Descriptor ) {", "for ( RVM Field field : declared Fields ) {", "if ( field . get Name ( ) == field Name && field . get Descriptor ( ) == field Descriptor ) {", "return field ; } }", "return null ; }"]}
{"ids": "7871", "code": ["public Quarter ( Date time , Time Zone zone ) {", "this ( time , zone , Locale . get Default ( ) ) ; }"]}
{"ids": "4484", "code": ["public static boolean read Boolean ( final JSON Array json Array , final int index , final boolean required , final boolean not Null ) throws JSON Exception {", "if ( required ) {", "return json Array . get Boolean ( index ) ; }", "if ( not Null && json Array . is Null ( index ) ) {", "throw new JSON Exception ( String . format ( Locale . US , NULL VALUE FORMAT ARRAY , index ) ) ; }", "boolean value = false ;", "if ( ! json Array . is Null ( index ) ) {", "value = json Array . get Boolean ( index ) ; }", "return value ; }"]}
{"ids": "33580", "code": ["protected static void auto Boxing ( Method Visitor mv , Type field Type ) {", "switch ( field Type . get Sort ( ) ) {", "case Type . BOOLEAN :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ;", "case Type . BYTE :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ;", "case Type . CHAR :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ;", "case Type . SHORT :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ;", "case Type . INT :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ;", "case Type . FLOAT :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ;", "case Type . LONG :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ;", "case Type . DOUBLE :", "mv . visit Method Insn ( INVOKESTATIC , STR_ , STR_ , STR_ ) ;", "break ; } }"]}
{"ids": "74836", "code": ["public final void open Pdf File ( final byte [ ] data ) throws Pdf Exception {", "final Random Access Buffer pdf datafile ;", "try {", "if ( Pdf File Reader . always Cache In Memory == - NUM_ || data . length < Pdf File Reader . always Cache In Memory ) {", "pdf datafile = new Random Access Data Buffer ( data ) ; }", "else {", "try {", "final File file = File . create Temp File ( STR_ , STR_ , new File ( Object Store . temp dir ) ) ;", "temp File Name = file . get Absolute Path ( ) ;", "final java . io . File Output Stream a = new java . io . File Output Stream ( file ) ;", "a . write ( data ) ;", "a . flush ( ) ;", "a . close ( ) ;", "pdf datafile = new Random Access File Buffer ( temp File Name , STR_ ) ; }", "catch ( final Exception e ) {", "throw new Runtime Exception ( STR_ + Object Store . temp dir + STR_ + e ) ; } }", "object Reader . init ( pdf datafile ) ; }", "catch ( final Exception e ) {", "Log Writer . write Log ( STR_ + e + STR_ ) ;", "throw new Pdf Exception ( STR_ + e + STR_ ) ; } }"]}
{"ids": "27045", "code": ["public static void main ( String [ ] args ) {", "if ( args . length < NUM_ ) {", "LOGGER . error ( STR_ ) ;", "return ; }", "int last Index = args . length - NUM_ ;", "Path [ ] files = get Files ( args ) ;", "Main main = new Main ( ) ;", "main . generate ( files [ last Index ] , Arrays . copy Of ( files , last Index ) ) ; }"]}
{"ids": "9008", "code": ["@ Nullable E await Match ( int start ) {", "for ( int step = NUM_ , total Spins = NUM_ ; ( step < ARENA LENGTH ) && ( total Spins < SPINS ) ; step ++ ) {", "int index = ( start + step ) & ARENA MASK ;", "Atomic Reference < Object > slot = arena [ index ] ;", "Object found = slot . get ( ) ;", "if ( found == FREE ) {", "if ( slot . compare And Set ( FREE , WAITER ) ) {", "int slot Spins = NUM_ ;", "for ( ; ; ) {", "found = slot . get ( ) ;", "if ( ( found != WAITER ) && slot . compare And Set ( found , FREE ) ) {", "@ Suppress Warnings ( STR_ ) E e = ( E ) found ;", "return e ; }", "else if ( ( slot Spins >= SPINS PER STEP ) && ( found == WAITER ) && ( slot . compare And Set ( WAITER , FREE ) ) ) {", "total Spins += slot Spins ;", "break ; }", "slot Spins ++ ; } } }", "else if ( ( found != WAITER ) && slot . compare And Set ( found , FREE ) ) {", "@ Suppress Warnings ( STR_ ) E e = ( E ) found ;", "return e ; } }", "return null ; }"]}
{"ids": "52822", "code": ["private Array List < Signature > construct One Signatures ( Set DBI Ds [ ] [ ] partitions , final long [ ] [ ] markers ) {", "final int dim = partitions . length ;", "Array List < Signature > signatures = new Array List < > ( ) ;", "for ( int d = NUM_ ; d < dim ; d ++ ) {", "final DBI Ds [ ] parts = partitions [ d ] ;", "if ( parts == null ) {", "continue ; }", "final long [ ] marked = markers [ d ] ;", "for ( int start = Bits Util . next Set Bit ( marked , NUM_ ) ; start >= NUM_ ; ) {", "int end = Bits Util . next Clear Bit ( marked , start + NUM_ ) ;", "end = ( end == - NUM_ ) ? dim : end ;", "int [ ] signature = new int [ dim << NUM_ ] ;", "Arrays . fill ( signature , - NUM_ ) ;", "signature [ d << NUM_ ] = start ;", "signature [ ( d << NUM_ ) + NUM_ ] = end - NUM_ ;", "Hash Set Modifiable DBI Ds sids = union DBI Ds ( parts , start , end ) ;", "if ( LOG . is Debugging ( ) ) {", "LOG . debug ( STR_ + d + STR_ + start + STR_ + ( end - NUM_ ) ) ; }", "signatures . add ( new Signature ( signature , sids ) ) ;", "start = ( end < dim ) ? Bits Util . next Set Bit ( marked , end + NUM_ ) : - NUM_ ; } }", "return signatures ; }"]}
{"ids": "60077", "code": ["public static int find End Trim Newline Chars ( Char Sequence s ) {", "for ( int i = s . length ( ) ; i > NUM_ ; ) {", "if ( s . char At ( i - NUM_ ) != STR_ ) {", "return i ; }", "i -- ;", "if ( i > NUM_ && s . char At ( i - NUM_ ) == STR_ ) {", "i -- ; } }", "return NUM_ ; }"]}
{"ids": "74747", "code": ["private void calc Coordinates ( final float x , final float [ ] [ ] Trm , float char Spacing ) {", "final float [ ] [ ] trm = new float [ NUM_ ] [ NUM_ ] ;", "for ( int xx = NUM_ ; xx < NUM_ ; xx ++ ) {", "System . arraycopy ( Trm [ xx ] , NUM_ , trm [ xx ] , NUM_ , NUM_ ) ; }", "x 1 = x ;", "x 2 = trm [ NUM_ ] [ NUM_ ] - ( char Spacing * trm [ NUM_ ] [ NUM_ ] ) ;", "if ( glyph Data . is Horizontal ( ) ) {", "if ( trm [ NUM_ ] [ NUM_ ] < NUM_ ) {", "x 1 = x + trm [ NUM_ ] [ NUM_ ] - ( char Spacing * trm [ NUM_ ] [ NUM_ ] ) ;", "x 2 = trm [ NUM_ ] [ NUM_ ] ; }", "else if ( trm [ NUM_ ] [ NUM_ ] > NUM_ ) {", "x 1 = x ;", "x 2 = trm [ NUM_ ] [ NUM_ ] ; } }", "else if ( trm [ NUM_ ] [ NUM_ ] > NUM_ ) {", "x 1 = trm [ NUM_ ] [ NUM_ ] ;", "x 2 = x + trm [ NUM_ ] [ NUM_ ] - ( char Spacing * trm [ NUM_ ] [ NUM_ ] ) ; }", "else if ( trm [ NUM_ ] [ NUM_ ] < NUM_ ) {", "x 2 = trm [ NUM_ ] [ NUM_ ] ;", "x 1 = x + trm [ NUM_ ] [ NUM_ ] - ( char Spacing * trm [ NUM_ ] [ NUM_ ] ) ; } }"]}
{"ids": "73680", "code": ["public void print Entry ( Writer w ) {", "try {", "String indent = STR_ ;", "int indent Width = indent . length ( ) ;", "Hardcopy Writer ww = ( Hardcopy Writer ) w ;", "int text Space = ww . get Characters Per Line ( ) - indent Width - NUM_ ;", "String new Line = STR_ ;", "w . write ( new Line , NUM_ , NUM_ ) ;", "String s = STR_ + id ;", "w . write ( s , NUM_ , s . length ( ) ) ;", "if ( ! ( consist Number . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + consist Number ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( road Name . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + road Name ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( road Number . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + road Number ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( model . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + model ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( loco 1 Dcc Address . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + loco 1 Dcc Address + STR_ + loco 1 Direction ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( loco 2 Dcc Address . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + loco 2 Dcc Address + STR_ + loco 2 Direction ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( loco 3 Dcc Address . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + loco 3 Dcc Address + STR_ + loco 3 Direction ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( loco 4 Dcc Address . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + loco 4 Dcc Address + STR_ + loco 4 Direction ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( loco 5 Dcc Address . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + loco 5 Dcc Address + STR_ + loco 5 Direction ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( loco 6 Dcc Address . equals ( STR_ ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + loco 6 Dcc Address + STR_ + loco 6 Direction ;", "w . write ( s , NUM_ , s . length ( ) ) ; }", "if ( ! ( comment . equals ( STR_ ) ) ) {", "Vector < String > comment Vector = wrap Comment ( comment , text Space ) ;", "int k = NUM_ ;", "w . write ( new Line , NUM_ , NUM_ ) ;", "s = STR_ + comment Vector . element At ( k ) ;", "w . write ( s , NUM_ , s . length ( ) ) ;", "k ++ ;", "while ( k < comment Vector . size ( ) ) {", "String token = comment Vector . element At ( k ) ;", "if ( ! token . equals ( STR_ ) ) {", "s = indent + token ; }", "else {", "s = token ; }", "w . write ( s , NUM_ , s . length ( ) ) ;", "k ++ ; } }", "w . write ( new Line , NUM_ , NUM_ ) ; }", "catch ( IO Exception e ) {", "log . error ( STR_ + e ) ; } }"]}
{"ids": "65571", "code": ["protected java . util . Date from Julian ( int julian ) {", "YMD ymd = new YMD ( julian ) ;", "Gregorian Calendar cal = new Gregorian Calendar ( ymd . year , ymd . month - NUM_ , ymd . day ) ;", "return cal . get Time ( ) ; }"]}
{"ids": "63242", "code": ["public synchronized boolean remove Last ( K obj ) {", "if ( peek Last ( ) != obj ) {", "return false ; }", "array = Arrays . copy Of ( array , array . length - NUM_ ) ;", "return true ; }"]}
{"ids": "85096", "code": ["private boolean serialize Compact RDF Struct Prop ( XMP Node node , int indent , boolean has RDF Resource Qual ) throws XMP Exception , IO Exception {", "boolean has Attr Fields = false ;", "boolean has Elem Fields = false ;", "boolean emit End Tag = true ;", "for ( Iterator ic = node . iterate Children ( ) ; ic . has Next ( ) ; ) {", "XMP Node field = ( XMP Node ) ic . next ( ) ;", "if ( can Be RDF Attr Prop ( field ) ) {", "has Attr Fields = true ; }", "else {", "has Elem Fields = true ; }", "if ( has Attr Fields && has Elem Fields ) {", "break ; } }", "if ( has RDF Resource Qual && has Elem Fields ) {", "throw new XMP Exception ( STR_ , XMP Error . BADRDF ) ; }", "if ( ! node . has Children ( ) ) {", "write ( STR_ ) ;", "write Newline ( ) ;", "emit End Tag = false ; }", "else if ( ! has Elem Fields ) {", "serialize Compact RDF Attr Props ( node , indent + NUM_ ) ;", "write ( STR_ ) ;", "write Newline ( ) ;", "emit End Tag = false ; }", "else if ( ! has Attr Fields ) {", "write ( STR_ ) ;", "write Newline ( ) ;", "serialize Compact RDF Element Props ( node , indent + NUM_ ) ; }", "else {", "write ( STR_ ) ;", "write Newline ( ) ;", "write Indent ( indent + NUM_ ) ;", "write ( RDF STRUCT START ) ;", "serialize Compact RDF Attr Props ( node , indent + NUM_ ) ;", "write ( STR_ ) ;", "write Newline ( ) ;", "serialize Compact RDF Element Props ( node , indent + NUM_ ) ;", "write Indent ( indent + NUM_ ) ;", "write ( RDF STRUCT END ) ;", "write Newline ( ) ; }", "return emit End Tag ; }"]}
{"ids": "61893", "code": ["public default Utility Table query Util ( B Network network , String query Var , Assignment evidence ) {", "return query Util ( new Query . Util Query ( network , Arrays . as List ( query Var ) , evidence ) ) ; }"]}
{"ids": "43618", "code": ["public static float [ ] string List To Numeric ( List < String > score List ) throws Number Format Exception {", "float [ ] scores = new float [ score List . size ( ) ] ;", "int score Id = NUM_ ;", "for ( String score : score List ) {", "float float Score = ( float ) Double . parse Double ( score ) ;", "if ( Float . is Na N ( float Score ) ) {", "throw new Number Format Exception ( STR_ + score ) ; }", "scores [ score Id ++ ] = float Score ; }", "return scores ; }"]}
{"ids": "972", "code": ["@ Override public void next ( ) {", "current Image = Optional . of ( add Index And Get Image By Offset ( + NUM_ ) ) ;", "event Bus . post ( new Source Has Pending Update Event ( this ) ) ; }"]}
{"ids": "83220", "code": ["private List < Activity > find Best Insertion ( List < Activity > partial Route , boolean allow As Major ) {", "int start Index = NUM_ ;", "int end Index = partial Route . size ( ) - NUM_ ;", "if ( allow As Major ) {", "start Index = NUM_ ;", "end Index = partial Route . size ( ) ; }", "List < Activity > new List = partial Route ;", "double best = Double . POSITIVE INFINITY ;", "List < Activity > best List = null ;", "for ( int i = start Index ; i <= end Index ; i ++ ) {", "List < Activity > tmp List = new Array List < > ( new List ) ;", "Activity tmp Activity = get Relocation Activity ( ) ;", "tmp List . add ( i , tmp Activity ) ;", "double tmp = evaluate List ( tmp List ) ;", "if ( tmp < best ) {", "if ( i == NUM_ ) {", "tmp Activity . set Type ( STR_ ) ;", "tmp Activity . set End Time ( Time . parse Time ( STR_ ) ) ; }", "else if ( i == partial Route . size ( ) ) {", "tmp Activity . set Type ( STR_ ) ; }", "else {", "tmp Activity . set Type ( STR_ ) ;", "tmp Activity . set Maximum Duration ( Time . parse Time ( STR_ ) ) ; }", "best = tmp ;", "best List = tmp List ; } }", "return best List ; }"]}
{"ids": "51547", "code": ["public void write Short ( int value ) throws IO Exception {", "check Write Primitive Types ( ) ;", "primitive Types . write Short ( value ) ; }"]}
{"ids": "61856", "code": ["private boolean is Initialized ( ) {", "return pool Names != null && ! pool Names . is Empty ( ) ; }"]}
{"ids": "35583", "code": ["private void register Extra Valid Subject ( String subject ) {", "extra Valid Subjects . add ( subject ) ;", "restored Statements . add All ( unknown Subjects . remove All ( subject ) ) ; }"]}
{"ids": "3282", "code": ["public static String trim Line ( String line ) {", "int idx = line . index Of ( STR_ ) ;", "if ( idx != - NUM_ ) {", "line = line . substring ( NUM_ , idx ) ; }", "return line . trim ( ) ; }"]}
{"ids": "29459", "code": ["public double distance 2 ( double p 1 , double p 2 ) {", "return ( p 1 - p 2 ) * ( p 1 - p 2 ) ; }"]}
{"ids": "12029", "code": ["public Iterator < T > iterator ( ) {", "return order List . iterator ( ) ; }"]}
{"ids": "21925", "code": ["private void verify Domains Is Not In Use ( String Set domains ) {", "check For Active Tenants Using Domains ( domains ) ;", "check For Vdc Roles Using Domains ( domains ) ;", "check For Tenant Roles Using Domains ( domains ) ;", "check For User Groups Using Domains ( domains ) ; }"]}
{"ids": "5441", "code": ["private Hashtable < I Point , List < I Circle > > filter ( Hashtable < I Point , I Circle [ ] > circle Intersections ) {", "Hashtable < I Point , List < I Circle > > real = new Hashtable < I Point , List < I Circle > > ( ) ;", "for ( I Point pt : circle Intersections . key Set ( ) ) {", "I Circle [ ] circs = circle Intersections . get ( pt ) ;", "for ( int i = NUM_ ; i < circs . length - NUM_ ; i ++ ) {", "for ( int j = i + NUM_ ; j < circs . length ; j ++ ) {", "I Point [ ] pts = intersects ( circs [ i ] , circs [ j ] ) ;", "if ( pts != null ) {", "for ( I Point p : pts ) {", "report ( real , p , circs [ i ] , circs [ j ] ) ; } } } } }", "return real ; }"]}
{"ids": "83106", "code": ["public void init Without J Unit For Fixture ( Class fixture , Method method ) {", "this . test Class = fixture ;", "this . test Method Name = method . get Name ( ) ; }"]}
{"ids": "10519", "code": ["protected Java Type find Serialization Type ( Annotated a , boolean use Static Typing , Java Type declared Type ) {", "Class < ? > ser Class = annotation Introspector . find Serialization Type ( a ) ;", "if ( ser Class != null ) {", "Class < ? > raw Declared = declared Type . get Raw Class ( ) ;", "if ( ser Class . is Assignable From ( raw Declared ) ) {", "declared Type = declared Type . widen By ( ser Class ) ; }", "else {", "if ( ! raw Declared . is Assignable From ( ser Class ) ) {", "throw new Illegal Argument Exception ( STR_ + a . get Name ( ) + STR_ + ser Class . get Name ( ) + STR_ + raw Declared . get Name ( ) ) ; }", "declared Type = config . construct Specialized Type ( declared Type , ser Class ) ; }", "use Static Typing = true ; }", "Java Type secondary = Bean Serializer Factory . modify Secondary Types By Annotation ( config , a , declared Type ) ;", "if ( secondary != declared Type ) {", "use Static Typing = true ;", "declared Type = secondary ; }", "if ( ! use Static Typing ) {", "Json Serialize . Typing typing = annotation Introspector . find Serialization Typing ( a ) ;", "if ( typing != null ) {", "use Static Typing = ( typing == Json Serialize . Typing . STATIC ) ; } }", "return use Static Typing ? declared Type : null ; }"]}
{"ids": "35025", "code": ["private static void convert ( A Scene scene , Input Stream in , Output Stream out ) throws IO Exception , Def Exception , Parse Exception {", "Index Unit iu = Java Parser . parse ( in ) ;", "extract Scene ( iu , scene ) ;", "try ( Writer w = new Buffered Writer ( new Output Stream Writer ( out ) ) ) {", "Index File Writer . write ( scene , w ) ; } }"]}
{"ids": "12874", "code": ["public static void load ( marytts . modules . synthesis . Voice mary Voice ) throws No Such Property Exception {", "if ( mary 2 freetts Voices == null ) mary 2 freetts Voices = new Hash Map < marytts . modules . synthesis . Voice , com . sun . speech . freetts . Voice > ( ) ;", "if ( freetts 2 mary Voices == null ) freetts 2 mary Voices = new Hash Map < com . sun . speech . freetts . Voice , marytts . modules . synthesis . Voice > ( ) ;", "if ( mary 2 freetts Voices . contains Key ( mary Voice ) ) return ;", "load ( mary Voice , create Free TTS Voice ( mary Voice ) ) ; }"]}
{"ids": "38739", "code": ["public synchronized void add Incremental Classifier Listener ( Incremental Classifier Listener cl ) {", "m incremental Classifier Listeners . add ( cl ) ; }"]}
{"ids": "50472", "code": ["public float read R 4 ( ) throws java . io . IO Exception {", "return Float . int Bits To Float ( ( int ) read DWORD ( ) ) ; }"]}
{"ids": "69401", "code": ["public static boolean files Exist On Dest But Not Src ( Configuration conf , Path src , Path dest , Optional < Path Filter > filter ) throws IO Exception {", "Set < File Status > src File Statuses = get File Statuses Recursive ( conf , src , filter ) ;", "Set < File Status > dest File Statuses = get File Statuses Recursive ( conf , dest , filter ) ;", "Map < String , Long > src File Sizes = null ;", "Map < String , Long > dest File Sizes = null ;", "try {", "src File Sizes = get Rel Path To Sizes ( src , src File Statuses ) ;", "dest File Sizes = get Rel Path To Sizes ( dest , dest File Statuses ) ; }", "catch ( Argument Exception e ) {", "throw new IO Exception ( STR_ , e ) ; }", "for ( String file : dest File Sizes . key Set ( ) ) {", "if ( ! src File Sizes . contains Key ( file ) ) {", "LOG . warn ( String . format ( STR_ , file , dest , src ) ) ;", "return true ; } }", "return false ; }"]}
{"ids": "59611", "code": ["protected void convert Order ( Sql Select select , Blackboard bb , Rel Collation collation , List < Sql Node > order Expr List , Sql Node offset , Sql Node fetch ) {", "if ( select . get Order List ( ) == null || select . get Order List ( ) . get List ( ) . is Empty ( ) ) {", "assert collation . get Field Collations ( ) . is Empty ( ) ;", "if ( ( offset == null || ( ( Sql Literal ) offset ) . big Decimal Value ( ) . equals ( Big Decimal . ZERO ) ) && fetch == null ) {", "return ; } }", "bb . set Root ( Logical Sort . create ( bb . root , collation , offset == null ? null : convert Expression ( offset ) , fetch == null ? null : convert Expression ( fetch ) ) , false ) ;", "if ( order Expr List . size ( ) > NUM_ && ! bb . top ) {", "final List < Rex Node > exprs = new Array List < > ( ) ;", "final Rel Data Type row Type = bb . root . get Row Type ( ) ;", "final int field Count = row Type . get Field Count ( ) - order Expr List . size ( ) ;", "for ( int i = NUM_ ; i < field Count ; i ++ ) {", "exprs . add ( rex Builder . make Input Ref ( bb . root , i ) ) ; }", "bb . set Root ( Logical Project . create ( bb . root , exprs , row Type . get Field Names ( ) . sub List ( NUM_ , field Count ) ) , false ) ; } }"]}
{"ids": "23395", "code": ["public void tick Block ( Block Pos pos ) {", "List < Block Pos > valid Coords = new Array List < > ( ) ;", "for ( int x Offset = - TICK RANGE ; x Offset <= TICK RANGE ; x Offset ++ ) {", "for ( int z Offset = - TICK RANGE ; z Offset <= TICK RANGE ; z Offset ++ ) {", "if ( x Offset == NUM_ && z Offset == NUM_ ) continue ;", "if ( is Valid Swap Position ( pos . add ( x Offset , NUM_ , z Offset ) ) ) valid Coords . add ( pos . add ( x Offset , NUM_ , z Offset ) ) ; } }", "if ( ! valid Coords . is Empty ( ) && ! world . is Remote ) {", "Block Pos to Swap = valid Coords . get ( rand . next Int ( valid Coords . size ( ) ) ) ;", "world . set Block State ( to Swap , state To Set , NUM_ | NUM_ ) ; } }"]}
{"ids": "46406", "code": ["private void configure Message Label ( J Label label ) {", "Color color = ( Color ) Default Lookup . get ( option Pane , this , STR_ ) ;", "if ( color != null ) {", "label . set Foreground ( color ) ; }", "Font message Font = ( Font ) Default Lookup . get ( option Pane , this , STR_ ) ;", "if ( message Font != null ) {", "label . set Font ( message Font ) ; } }"]}
{"ids": "56608", "code": ["default Filterable < T > remove All ( final Stream < ? extends T > stream ) {", "final Set < T > set = stream . collect ( Collectors . to Set ( ) ) ;", "return filter Not ( null ) ; }"]}
{"ids": "2012", "code": ["private static Metering Rectangle [ ] regions For Normalized Coord ( float nx , float ny , float fraction , final Rect crop Region , int sensor Orientation ) {", "int min Crop Edge = Math . min ( crop Region . width ( ) , crop Region . height ( ) ) ;", "int half Side Length = ( int ) ( NUM_ * fraction * min Crop Edge ) ;", "Point F nsc = Camera Util . normalized Sensor Coords For Normalized Display Coords ( nx , ny , sensor Orientation ) ;", "int x Center Sensor = ( int ) ( crop Region . left + nsc . x * crop Region . width ( ) ) ;", "int y Center Sensor = ( int ) ( crop Region . top + nsc . y * crop Region . height ( ) ) ;", "Rect metering Region = new Rect ( x Center Sensor - half Side Length , y Center Sensor - half Side Length , x Center Sensor + half Side Length , y Center Sensor + half Side Length ) ;", "metering Region . left = Camera Util . clamp ( metering Region . left , crop Region . left , crop Region . right ) ;", "metering Region . top = Camera Util . clamp ( metering Region . top , crop Region . top , crop Region . bottom ) ;", "metering Region . right = Camera Util . clamp ( metering Region . right , crop Region . left , crop Region . right ) ;", "metering Region . bottom = Camera Util . clamp ( metering Region . bottom , crop Region . top , crop Region . bottom ) ;", "return new Metering Rectangle [ ] { new Metering Rectangle ( metering Region , CAMERA 2 REGION WEIGHT ) } ; }"]}
{"ids": "84813", "code": ["public Vector ( double comp [ ] ) throws Negative Array Size Exception {", "int n = comp . length ;", "if ( n <= NUM_ ) throw new Negative Array Size Exception ( STR_ ) ;", "components = new double [ n ] ;", "System . arraycopy ( comp , NUM_ , components , NUM_ , n ) ; }"]}
{"ids": "69754", "code": ["public long lon To Pixel ( double lon ) {", "return ( long ) ( ( lon + NUM_ ) / NUM_ * Math . pow ( NUM_ , zoom ) * NUM_ ) ; }"]}
{"ids": "27000", "code": ["public static boolean world File Values Appear Geographic ( AV List values ) {", "double x Location ;", "double y Location ;", "double x Pixel Size ;", "double y Pixel Size ;", "Object o = values . get Value ( WORLD FILE X LOCATION ) ;", "if ( o != null && o instanceof Double ) x Location = ( Double ) o ;", "else return false ;", "o = values . get Value ( WORLD FILE Y LOCATION ) ;", "if ( o != null && o instanceof Double ) y Location = ( Double ) o ;", "else return false ;", "o = values . get Value ( WORLD FILE X PIXEL SIZE ) ;", "if ( o != null && o instanceof Double ) x Pixel Size = ( Double ) o ;", "else return false ;", "o = values . get Value ( WORLD FILE Y PIXEL SIZE ) ;", "if ( o != null && o instanceof Double ) y Pixel Size = ( Double ) o ;", "else return false ;", "return ( Angle . is Valid Longitude ( x Pixel Size ) && Angle . is Valid Latitude ( y Pixel Size ) && Angle . is Valid Longitude ( x Location ) && Angle . is Valid Latitude ( y Location ) ) ; }"]}
{"ids": "14857", "code": ["public void remove ( Session ID session ID ) {", "remote Session Set . remove ( session ID ) ; }"]}
{"ids": "27361", "code": ["public Iterator < Abstract Page > child Iterator ( final boolean dirty Nodes Only ) {", "if ( dirty Nodes Only ) {", "return new Dirty Child Iterator ( this ) ; }", "else {", "return new Child Iterator ( ) ; } }"]}
{"ids": "78836", "code": ["public HMACT 64 ( byte [ ] key ) {", "super ( STR_ ) ;", "int length = Math . min ( key . length , BLOCK LENGTH ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "ipad [ i ] = ( byte ) ( key [ i ] ^ IPAD ) ;", "opad [ i ] = ( byte ) ( key [ i ] ^ OPAD ) ; }", "for ( int i = length ; i < BLOCK LENGTH ; i ++ ) {", "ipad [ i ] = IPAD ;", "opad [ i ] = OPAD ; }", "try {", "md 5 = Message Digest . get Instance ( STR_ ) ; }", "catch ( Exception ex ) {", "throw new Illegal State Exception ( ex . get Message ( ) ) ; }", "engine Reset ( ) ; }"]}
{"ids": "3495", "code": ["public boolean starts With ( String string ) {", "if ( string == null ) return false ;", "int strlen = string . length ( ) ;", "if ( length < strlen ) return false ;", "char [ ] buffer = buffer ;", "int offset = offset ;", "while ( -- strlen >= NUM_ ) {", "if ( buffer [ offset + strlen ] != string . char At ( strlen ) ) return false ; }", "return true ; }"]}
{"ids": "33741", "code": ["private void write Raw Bytes Internal ( final Byte Buffer value ) throws IO Exception {", "int length = value . remaining ( ) ;", "if ( limit - position >= length ) {", "value . get ( buffer , position , length ) ;", "position += length ;", "total Bytes Written += length ; }", "else {", "final int bytes Written = limit - position ;", "value . get ( buffer , position , bytes Written ) ;", "length -= bytes Written ;", "position = limit ;", "total Bytes Written += bytes Written ;", "refresh Buffer ( ) ;", "while ( length > limit ) {", "value . get ( buffer , NUM_ , limit ) ;", "output . write ( buffer , NUM_ , limit ) ;", "length -= limit ;", "total Bytes Written += limit ; }", "value . get ( buffer , NUM_ , length ) ;", "position = length ;", "total Bytes Written += length ; } }"]}
{"ids": "14347", "code": ["private void process LDIF ( Connection conn , String path ) throws Upgrade Exception {", "Change Record Reader reader = null ;", "try {", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ + path ) ; }", "Map < String , String > tags = new Hash Map < String , String > ( NUM_ ) ;", "tags . put ( STR_ , base DN ) ;", "tags . put ( STR_ , STR_ ) ;", "String content = AM Setup Servlet . read File ( path ) ;", "String tag Swapped = String Utils . tag Swap ( content , tags ) ;", "reader = new LDIF Change Record Reader ( new Byte Array Input Stream ( tag Swapped . get Bytes ( Charset . for Name ( STR_ ) ) ) ) ;", "Change Record Writer writer = new Connection Change Record Writer ( conn ) ;", "while ( reader . has Next ( ) ) {", "writer . write Change Record ( reader . read Change Record ( ) ) ; } }", "catch ( IO Exception ioe ) {", "DEBUG . error ( STR_ + path , ioe ) ;", "throw new Upgrade Exception ( ioe ) ; }", "finally {", "IO Utils . close If Not Null ( reader ) ; } }"]}
{"ids": "19678", "code": ["private void print Progress ( long row , long row From , long row Till ) {", "long rows Processed = row + chunk Size - row From ;", "if ( rows Processed > ( row Till - row From ) ) rows Processed = ( row Till - row From ) ;", "print ( String . format ( STR_ , ( int ) ( ( ( double ) ( rows Processed ) / ( double ) ( row Till - row From ) ) * NUM_ ) ) ) ; }"]}
{"ids": "24071", "code": ["void post Remote Release Lock ( Object object Name ) throws Interrupted Exception {", "if ( ! acquire Destroy Read Lock ( NUM_ ) ) {", "return ; }", "try {", "check Destroyed ( ) ;", "drain Permitted Requests ( ) ;", "grant Lock ( object Name ) ; }", "catch ( Lock Service Destroyed Exception e ) { }", "catch ( Lock Grantor Destroyed Exception e ) { }", "finally {", "release Destroy Read Lock ( ) ; } }"]}
{"ids": "54695", "code": ["public final Array List < Position Record > load Positions ( final int session , final Double min Lat , final Double max Lat , final Double min Lon , final Double max Lon ) {", "final Array List < Position Record > positions = new Array List < > ( ) ;", "String selection = Schema . COL SESSION ID + STR_ ;", "Cursor cursor = null ;", "List < String > selection Args = null ;", "if ( min Lat != null & max Lat != null && min Lon != null && max Lon != null ) {", "selection Args = new Array List < > ( ) ;", "selection Args . add ( String . value Of ( session ) ) ;", "selection Args . add ( String . value Of ( min Lat ) ) ;", "selection Args . add ( String . value Of ( max Lat ) ) ;", "selection Args . add ( String . value Of ( min Lon ) ) ;", "selection Args . add ( String . value Of ( max Lon ) ) ;", "selection += STR_ + Schema . COL LATITUDE + STR_ + Schema . COL LATITUDE + STR_ + Schema . COL LONGITUDE + STR_ + Schema . COL LONGITUDE + STR_ ;", "cursor = content Resolver . query ( Content Provider . CONTENT URI POSITION , null , selection , selection Args . to Array ( new String [ NUM_ ] ) , Schema . COL TIMESTAMP ) ; }", "else {", "Log . v ( TAG , STR_ ) ;", "cursor = content Resolver . query ( Content Provider . CONTENT URI POSITION , null , null , null , Schema . COL TIMESTAMP ) ; }", "while ( cursor . move To Next ( ) ) {", "positions . add ( position From Cursor ( cursor ) ) ; }", "cursor . close ( ) ;", "return positions ; }"]}
{"ids": "82016", "code": ["public static Check Box create Toggle ( String text , Image icon ) {", "Check Box cb = new Check Box ( text , icon ) ;", "cb . set Toggle ( true ) ;", "return cb ; }"]}
{"ids": "35174", "code": ["public long add Completed Batch ( Request Batch request Batch ) {", "long completed Batch Id = insert Batch As Completed ( request Batch ) ;", "for ( Request request : request Batch . get Requests ( ) ) {", "request . set Batch Id ( completed Batch Id ) ;", "File file = new File ( request . get Destination Path ( ) ) ;", "long length = file . exists ( ) ? file . length ( ) : NUM_ ;", "insert Request As Completed Download ( request . get Destination Path ( ) , length , request ) ; }", "return completed Batch Id ; }"]}
{"ids": "2492", "code": ["public static File create Minimal Split ( String input Folder , int num Folds , int num Available J Cas , boolean is Sequence ) throws Exception {", "File output Folder = new File ( input Folder , STR_ ) ;", "int split Num = ( int ) Math . ceil ( num Folds / ( double ) num Available J Cas ) ;", "Collection Reader Description create Reader = Collection Reader Factory . create Reader Description ( Binary Cas Reader . class , Binary Cas Reader . PARAM SOURCE LOCATION , input Folder , Binary Cas Reader . PARAM PATTERNS , STR_ ) ;", "Analysis Engine Description multiplier = Analysis Engine Factory . create Engine Description ( Fold Classification Unit Cas Multiplier . class , Fold Classification Unit Cas Multiplier . PARAM REQUESTED SPLITS , split Num , Fold Classification Unit Cas Multiplier . PARAM USE SEQUENCES , is Sequence ) ;", "Analysis Engine Description xmi Writer = Analysis Engine Factory . create Engine Description ( Binary Cas Writer . class , Binary Cas Writer . PARAM TARGET LOCATION , output Folder . get Absolute Path ( ) , Binary Cas Writer . PARAM FORMAT , STR_ ) ;", "Analysis Engine Description both = Analysis Engine Factory . create Engine Description ( multiplier , xmi Writer ) ;", "Simple Pipeline . run Pipeline ( create Reader , both ) ;", "is Number Of Cas Created Larger Equal Num Folds ( output Folder , num Folds ) ;", "return output Folder ; }"]}
{"ids": "13978", "code": ["public org . w 3 c . dom . Element sign XML ( org . w 3 c . dom . Document doc , java . lang . String cert Alias ) throws XML Signature Exception {", "return sign XML ( doc , cert Alias , null ) ; }"]}
{"ids": "70277", "code": ["Firing Plan guess Best Firing Plan Under Heat ( Entity shooter , @ Nullable Entity State shooter State , Targetable target , @ Nullable Entity State target State , int max Heat , I Game game ) {", "if ( max Heat < NUM_ ) {", "max Heat = NUM_ ; }", "Firing Plan alpha Strike = guess Full Firing Plan ( shooter , shooter State , target , target State , game ) ;", "if ( alpha Strike . get Heat ( ) <= max Heat && ! ( shooter instanceof Infantry ) && ! ( shooter instanceof Battle Armor ) ) {", "return alpha Strike ; }", "Firing Plan heat Plans [ ] = calc Firing Plans Under Heat ( shooter , alpha Strike ) ;", "Arrays . sort ( heat Plans ) ;", "if ( heat Plans . length > NUM_ ) {", "return heat Plans [ NUM_ ] ; }", "else {", "return new Firing Plan ( target ) ; } }"]}
{"ids": "21894", "code": ["public static Volume Group Rest Rep map ( Volume Group from ) {", "if ( from == null ) {", "return null ; }", "Volume Group Rest Rep rep = new Volume Group Rest Rep ( ) ;", "map Data Object Fields ( from , rep ) ;", "rep . set Description ( from . get Description ( ) ) ;", "rep . set Roles ( from . get Roles ( ) ) ;", "rep . set Parent ( to Related Resource ( Resource Type Enum . VOLUME GROUP , from . get Parent ( ) ) ) ;", "rep . set Migration Group By ( from . get Migration Group By ( ) ) ;", "rep . set Migration Type ( from . get Migration Type ( ) ) ;", "return rep ; }"]}
{"ids": "38480", "code": ["public void add Action Listener ( Action Listener new Listener ) {", "m listeners . add ( new Listener ) ; }"]}
{"ids": "9290", "code": ["@ Deprecated public Shapeless Recipe add Ingredient ( int count , Material ingredient , int rawdata ) {", "Validate . is True ( ingredients . size ( ) + count <= NUM_ , STR_ ) ;", "if ( rawdata == - NUM_ ) {", "rawdata = Short . MAX VALUE ; }", "while ( count -- > NUM_ ) {", "ingredients . add ( new Item Stack ( ingredient , NUM_ , ( short ) rawdata ) ) ; }", "return this ; }"]}
{"ids": "75560", "code": ["public String order ( ) {", "return m Order By . length ( ) > NUM_ ? m Order By . to String ( ) : null ; }"]}
{"ids": "67718", "code": ["public static byte [ ] encoding To Bytes ( final String str , final String encoding ) {", "if ( str == null ) {", "return null ; }", "try {", "return str . get Bytes ( encoding ) ; }", "catch ( final Unsupported Encoding Exception e ) {", "throw new Error ( encoding + STR_ + e ) ; } }"]}
{"ids": "25204", "code": ["public void before ( ) throws Throwable {", "if ( Build . VERSION . SDK INT >= Build . VERSION CODES . M ) {", "Process Builder process Builder = new Process Builder ( ) ;", "process Builder . command ( STR_ , STR_ ) ;", "process Builder . redirect Error Stream ( ) ;", "Process process = process Builder . start ( ) ;", "process . wait For ( ) ;", "if ( process . exit Value ( ) != NUM_ ) {", "Log . e ( LOG TAG , STR_ + process . exit Value ( ) ) ; } } }"]}
{"ids": "29143", "code": ["public void add Meta ( char meta , String replacement ) {", "meta Character Set . set ( meta ) ;", "replacement Map . put ( new String ( new char [ ] { meta } ) , replacement ) ; }"]}
{"ids": "82938", "code": ["public static List < History > find History By Job ( Entity Manager em , JPA Entity job , Big Integer limit ) {", "require Argument ( em != null , STR_ ) ;", "require Argument ( job != null , STR_ ) ;", "Typed Query < History > query = em . create Named Query ( STR_ , History . class ) ;", "if ( limit != null ) {", "query . set Max Results ( limit . int Value ( ) ) ; }", "try {", "query . set Parameter ( STR_ , job ) ;", "return query . get Result List ( ) ; }", "catch ( No Result Exception ex ) {", "return new Array List < History > ( NUM_ ) ; } }"]}
{"ids": "36483", "code": ["private void draw Overflow Indicator ( final Graphics g , int max X ) {", "int width = NUM_ ;", "int height = NUM_ ;", "int x Offset = NUM_ ;", "int step Size = width / NUM_ ;", "int dot Size = NUM_ ;", "int x = max X - width - x Offset ;", "int y = button . get Size ( ) . height - height ;", "g . set Color ( LIGHTER GRAY ) ;", "g . fill Rect ( x , y , width , width ) ;", "g . set Color ( Color . GRAY ) ;", "g . draw Round Rect ( x , y , width , width , NUM_ , NUM_ ) ;", "g . set Color ( Color . BLACK ) ;", "g . fill Oval ( x + step Size , y + NUM_ , dot Size , dot Size ) ;", "g . fill Oval ( x + step Size * NUM_ , y + NUM_ , dot Size , dot Size ) ;", "g . fill Oval ( x + step Size * NUM_ , y + NUM_ , dot Size , dot Size ) ;", "g . dispose ( ) ; }"]}
{"ids": "34256", "code": ["public static boolean is PEM ( Input Stream is ) {", "try {", "String start PEM = STR_ ;", "int header Length = NUM_ ;", "byte [ ] preamble = new byte [ header Length ] ;", "if ( is . read ( preamble , NUM_ , header Length ) > NUM_ ) {", "String start Array = new String ( preamble ) ;", "return start Array . starts With ( start PEM ) ; }", "return false ; }", "catch ( Exception e ) {", "throw new DSS Exception ( STR_ ) ; } }"]}
{"ids": "46756", "code": ["protected byte [ ] engine Wrap ( Key key ) throws Illegal Block Size Exception , Invalid Key Exception {", "throw new Unsupported Operation Exception ( ) ; }"]}
{"ids": "9287", "code": ["@ Deprecated public Java Plugin Loader ( Server instance ) {", "Validate . not Null ( instance , STR_ ) ;", "server = instance ; }"]}
{"ids": "49169", "code": ["public void add Separator ( ) {", "if ( log . is Loggable ( Platform Logger . Level . FINER ) ) {", "log . finer ( STR_ ) ; } }"]}
{"ids": "49023", "code": ["private static Class < ? > load Class ( URL [ ] urls , String name ) throws Class Not Found Exception {", "Class Loader parent = get RMI Context Class Loader ( ) ;", "if ( loader Log . is Loggable ( Log . VERBOSE ) ) {", "loader Log . log ( Log . VERBOSE , STR_ + parent + STR_ ) ; }", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm == null ) {", "try {", "Class < ? > c = Class . for Name ( name , false , parent ) ;", "if ( loader Log . is Loggable ( Log . VERBOSE ) ) {", "loader Log . log ( Log . VERBOSE , STR_ + name + STR_ + STR_ + STR_ + STR_ + c . get Class Loader ( ) ) ; }", "return c ; }", "catch ( Class Not Found Exception e ) {", "if ( loader Log . is Loggable ( Log . BRIEF ) ) {", "loader Log . log ( Log . BRIEF , STR_ + name + STR_ + STR_ + STR_ , e ) ; }", "throw new Class Not Found Exception ( e . get Message ( ) + STR_ , e . get Exception ( ) ) ; } }", "Loader loader = lookup Loader ( urls , parent ) ;", "try {", "if ( loader != null ) {", "loader . check Permissions ( ) ; } }", "catch ( Security Exception e ) {", "try {", "Class < ? > c = load Class For Name ( name , false , parent ) ;", "if ( loader Log . is Loggable ( Log . VERBOSE ) ) {", "loader Log . log ( Log . VERBOSE , STR_ + name + STR_ + STR_ + STR_ + STR_ + c . get Class Loader ( ) ) ; }", "return c ; }", "catch ( Class Not Found Exception unimportant ) {", "if ( loader Log . is Loggable ( Log . BRIEF ) ) {", "loader Log . log ( Log . BRIEF , STR_ + name + STR_ + STR_ + STR_ , e ) ; }", "throw new Class Not Found Exception ( STR_ , e ) ; } }", "try {", "Class < ? > c = load Class For Name ( name , false , loader ) ;", "if ( loader Log . is Loggable ( Log . VERBOSE ) ) {", "loader Log . log ( Log . VERBOSE , STR_ + name + STR_ + STR_ + STR_ + c . get Class Loader ( ) ) ; }", "return c ; }", "catch ( Class Not Found Exception e ) {", "if ( loader Log . is Loggable ( Log . BRIEF ) ) {", "loader Log . log ( Log . BRIEF , STR_ + name + STR_ , e ) ; }", "throw e ; } }"]}
{"ids": "36842", "code": ["public static final List < I Navi Raw Module > load Raw Modules ( final Abstract SQL Provider provider ) throws Couldnt Load Data Exception {", "Preconditions . check Not Null ( provider , STR_ ) ;", "final C Connection connection = provider . get Connection ( ) ;", "final List < I Navi Raw Module > modules = new Array List < I Navi Raw Module > ( ) ;", "if ( ! Postgre SQL Helpers . has Table ( connection , C Table Names . RAW MODULES TABLE ) ) {", "return modules ; }", "final String query = STR_ + C Table Names . RAW MODULES TABLE + STR_ ;", "try ( Result Set result Set = connection . execute Query ( query , true ) ) {", "while ( result Set . next ( ) ) {", "final int raw Module Id = result Set . get Int ( STR_ ) ;", "final String name = Postgre SQL Helpers . read String ( result Set , STR_ ) ;", "final boolean is Complete = Postgre SQL Database Functions . check Raw Modules Tables ( provider . get Connection ( ) , Postgre SQL Helpers . get Database Name ( provider . get Connection ( ) ) , raw Module Id ) ;", "final int function Count = is Complete ? Postgre SQL Database Functions . get Raw Module Function Count ( connection , raw Module Id ) : NUM_ ;", "final C Raw Module module = new C Raw Module ( raw Module Id , name , function Count , is Complete , provider ) ;", "modules . add ( module ) ; } }", "catch ( final SQL Exception e ) {", "throw new Couldnt Load Data Exception ( e ) ; }", "return modules ; }"]}
{"ids": "46078", "code": ["void write ( Image Output Stream ios ) throws IO Exception {", "length = NUM_ + data . length ;", "write Tag ( ios ) ;", "ios . write ( data ) ; }"]}
{"ids": "37303", "code": ["private static List < Register Description > parse Register Information ( final Node node ) throws Message Parser Exception {", "final List < Register Description > registers = new Array List < > ( ) ;", "final Node List nodes = node . get Child Nodes ( ) ;", "for ( int i = NUM_ ; i < nodes . get Length ( ) ; ++ i ) {", "final Node child = nodes . item ( i ) ;", "final String register Name = get Attribute ( child , STR_ ) ;", "final String register Size = get Attribute ( child , STR_ ) ;", "final String register Editable = get Attribute ( child , STR_ ) ;", "registers . add ( new Register Description ( register Name , Integer . value Of ( register Size ) , Boolean . value Of ( register Editable ) ) ) ; }", "return registers ; }"]}
{"ids": "40249", "code": ["public Named Thread Factory ( String name Prefix ) {", "this . name Prefix = Objects . require Non Null ( name Prefix ) ;", "group = get Thread Group ( ) ;", "daemon = true ; }"]}
{"ids": "25698", "code": ["public int add Column ( Object new Col , int length ) throws Fits Exception {", "if ( this . n Fields > NUM_ && Array . get Length ( new Col ) != this . n Rows ) {", "throw new Fits Exception ( STR_ ) ; }", "if ( this . n Fields == NUM_ ) {", "this . n Rows = Array . get Length ( new Col ) ; }", "Object [ ] new Data = new Object [ this . n Fields + NUM_ ] ;", "int [ ] new Offsets = new int [ this . n Fields + NUM_ ] ;", "int [ ] new Lengths = new int [ this . n Fields + NUM_ ] ;", "Class < ? > [ ] new Types = new Class [ this . n Fields + NUM_ ] ;", "String [ ] new Nulls = new String [ this . n Fields + NUM_ ] ;", "System . arraycopy ( this . data , NUM_ , new Data , NUM_ , this . n Fields ) ;", "System . arraycopy ( this . offsets , NUM_ , new Offsets , NUM_ , this . n Fields ) ;", "System . arraycopy ( this . lengths , NUM_ , new Lengths , NUM_ , this . n Fields ) ;", "System . arraycopy ( this . types , NUM_ , new Types , NUM_ , this . n Fields ) ;", "System . arraycopy ( this . nulls , NUM_ , new Nulls , NUM_ , this . n Fields ) ;", "this . data = new Data ;", "this . offsets = new Offsets ;", "this . lengths = new Lengths ;", "this . types = new Types ;", "this . nulls = new Nulls ;", "new Data [ this . n Fields ] = new Col ;", "this . offsets [ this . n Fields ] = this . row Len + NUM_ ;", "this . lengths [ this . n Fields ] = length ;", "this . types [ this . n Fields ] = Array Funcs . get Base Class ( new Col ) ;", "this . row Len += length + NUM_ ;", "if ( this . is Null != null ) {", "boolean [ ] new Is Null = new boolean [ this . n Rows * ( this . n Fields + NUM_ ) ] ;", "int add = NUM_ ;", "for ( int i = NUM_ ; i < this . is Null . length ; i += NUM_ ) {", "if ( i % this . n Fields == NUM_ ) {", "add += NUM_ ; }", "if ( this . is Null [ i ] ) {", "new Is Null [ i + add ] = true ; } }", "this . is Null = new Is Null ; }", "this . n Fields += NUM_ ;", "this . buffer = null ;", "return this . n Fields ; }"]}
{"ids": "87014", "code": ["public void add Transaction ( SIP Server Transaction server Transaction ) throws IO Exception {", "if ( logger . is Logging Enabled ( Log Writer . TRACE DEBUG ) ) logger . log Debug ( STR_ + server Transaction ) ;", "server Transaction . map ( ) ;", "add Transaction Hash ( server Transaction ) ; }"]}
{"ids": "21245", "code": ["private void delay Retry ( int multiplier ) {", "debug ( STR_ ) ;", "try {", "Thread . sleep ( NUM_ * multiplier ) ; }", "catch ( Interrupted Exception e ) {", "warn ( e , STR_ ) ; } }"]}
{"ids": "34476", "code": ["public void reset ( ) {", "if ( m Download Bandwidth != null ) {", "m Download Bandwidth . reset ( ) ; }", "m Current Bandwidth Connection Quality . set ( Connection Quality . UNKNOWN ) ; }"]}
{"ids": "15799", "code": ["private Diff Part decode Full Revision ( final int block Size L ) throws Unsupported Encoding Exception , Decoding Exception {", "if ( block Size L < NUM_ ) {", "throw new Decoding Exception ( STR_ + block Size L ) ; }", "int l = r . read ( block Size L ) ;", "Byte Array Output Stream output = new Byte Array Output Stream ( ) ;", "for ( int i = NUM_ ; i < l ; i ++ ) {", "output . write ( r . read Byte ( ) ) ; }", "Diff Part part = new Diff Part ( Diff Action . FULL REVISION UNCOMPRESSED ) ;", "part . set Text ( output . to String ( WIKIPEDIA ENCODING ) ) ;", "return part ; }"]}
{"ids": "1218", "code": ["private synchronized static void remove Child Character Data ( Node node , boolean deep ) {", "Node List list = node . get Child Nodes ( ) ;", "for ( int i = list . get Length ( ) ; i >= NUM_ ; i -- ) {", "Node n = list . item ( i ) ;", "if ( n == null ) continue ;", "if ( n instanceof Character Data ) node . remove Child ( XML Caster . to Raw Node ( n ) ) ;", "else if ( deep ) remove Child Character Data ( n , deep ) ; } }"]}
{"ids": "43612", "code": ["private void load Corpus ( String source , String target , String align ) throws IO Exception {", "logger . info ( STR_ ) ;", "Time Keeper timer = Timing Utils . start ( ) ;", "int num Source Positions = NUM_ ;", "int num Target Positions = NUM_ ;", "num Sentences = NUM_ ;", "Parallel Corpus corpus = new Parallel Corpus ( NUM_ ) ;", "try ( Line Number Reader f Reader = IO Tools . get Reader From File ( source ) ) {", "Line Number Reader e Reader = IO Tools . get Reader From File ( target ) ;", "Line Number Reader a Reader = IO Tools . get Reader From File ( align ) ;", "for ( String f Line ; ( f Line = f Reader . read Line ( ) ) != null ; ) {", "String e Line = e Reader . read Line ( ) ;", "String a Line = a Reader . read Line ( ) ;", "Aligned Sentence example = corpus . get Sentence ( f Line , e Line , a Line ) ;", "if ( example != null ) {", "num Source Positions += example . source Length ( ) ;", "num Target Positions += example . target Length ( ) ;", "++ num Sentences ; } } }", "final int initial Vocabulary Size = corpus . get Vocabulary ( ) . size ( ) ;", "timer . mark ( STR_ ) ;", "logger . info ( STR_ , num Source Positions , num Target Positions , num Sentences ) ;", "final int src Length = num Source Positions + num Sentences ;", "if ( src Length < NUM_ ) throw new Runtime Exception ( STR_ ) ;", "src Bitext = new int [ src Length ] ;", "f 2 e = new int [ src Length ] ;", "final int tgt Length = num Target Positions + num Sentences ;", "if ( tgt Length < NUM_ ) throw new Runtime Exception ( STR_ ) ;", "tgt Bitext = new int [ tgt Length ] ;", "e 2 f = new int [ tgt Length ] ;", "try ( Line Number Reader f Reader = IO Tools . get Reader From File ( source ) ) {", "Line Number Reader e Reader = IO Tools . get Reader From File ( target ) ;", "Line Number Reader a Reader = IO Tools . get Reader From File ( align ) ;", "int src Offset = NUM_ ;", "int tgt Offset = NUM_ ;", "for ( String f Line ; ( f Line = f Reader . read Line ( ) ) != null ; ) {", "String e Line = e Reader . read Line ( ) ;", "String a Line = a Reader . read Line ( ) ;", "Aligned Sentence sentence = corpus . get Sentence ( f Line , e Line , a Line ) ;", "if ( sentence == null ) {", "logger . info ( STR_ , f Reader . get Line Number ( ) ) ; }", "else {", "System . arraycopy ( sentence . source , NUM_ , src Bitext , src Offset , sentence . source Length ( ) ) ;", "System . arraycopy ( sentence . f 2 e , NUM_ , f 2 e , src Offset , sentence . f 2 e . length ) ;", "System . arraycopy ( sentence . target , NUM_ , tgt Bitext , tgt Offset , sentence . target Length ( ) ) ;", "System . arraycopy ( sentence . e 2 f , NUM_ , e 2 f , tgt Offset , sentence . e 2 f . length ) ;", "src Offset += sentence . source Length ( ) ;", "tgt Offset += sentence . target Length ( ) ;", "src Bitext [ src Offset ] = to Sentence Offset ( tgt Offset ) ;", "tgt Bitext [ tgt Offset ] = to Sentence Offset ( src Offset ) ;", "++ src Offset ;", "++ tgt Offset ; } } }", "this . vocabulary = corpus . get Vocabulary ( ) ;", "assert initial Vocabulary Size == vocabulary . size ( ) ;", "timer . mark ( STR_ ) ;", "logger . info ( STR_ , timer ) ; }"]}
{"ids": "81103", "code": ["public static float mix Friction ( float friction 1 , float friction 2 ) {", "return Math Utils . sqrt ( friction 1 * friction 2 ) ; }"]}
{"ids": "35605", "code": ["public String serialize ( Object obj , String content Type ) throws Api Exception {", "if ( content Type . starts With ( STR_ ) ) {", "return json . serialize ( obj ) ; }", "else {", "throw new Api Exception ( NUM_ , STR_ + content Type ) ; } }"]}
{"ids": "21903", "code": ["private boolean is Native Volume Expansion Supported ( Volume vplex Volume , Long new Size ) {", "boolean use Native Volume Expansion = true ;", "String Set assoc Volume Ids = vplex Volume . get Associated Volumes ( ) ;", "if ( null == assoc Volume Ids ) {", "s logger . warn ( STR_ , vplex Volume . for Display ( ) ) ;", "use Native Volume Expansion = false ; }", "else {", "for ( String assoc Volume Id : assoc Volume Ids ) {", "Volume assoc Volume = permissions Helper . get Object By Id ( URI . create ( assoc Volume Id ) , Volume . class ) ;", "try {", "super . verify Volume Expansion Request ( assoc Volume , new Size ) ; }", "catch ( Exception e ) {", "use Native Volume Expansion = false ;", "break ; } } }", "return use Native Volume Expansion ; }"]}
{"ids": "74194", "code": ["public void update GUI ( Roster Entry r ) {", "road Name . set Text ( r . get Road Name ( ) ) ;", "road Number . set Text ( r . get Road Number ( ) ) ;", "mfg . set Text ( r . get Mfg ( ) ) ;", "owner . set Text ( r . get Owner ( ) ) ;", "model . set Text ( r . get Model ( ) ) ;", "comment . set Text ( r . get Comment ( ) ) ;", "decoder Model . set Text ( r . get Decoder Model ( ) ) ;", "decoder Family . set Text ( r . get Decoder Family ( ) ) ;", "decoder Comment . set Text ( r . get Decoder Comment ( ) ) ;", "date Updated . set Text ( r . get Date Updated ( ) ) ;", "max Speed Spinner . set Value ( Integer . value Of ( r . get Max Speed PCT ( ) ) ) ; }"]}
{"ids": "4309", "code": ["public static Double oizp ( Number value ) {", "if ( value == null ) {", "return null ; }", "return ( value . double Value ( ) >= NUM_ ) ? NUM_ : NUM_ ; }"]}
{"ids": "44199", "code": ["public Terminal Size with ( Terminal Size size ) {", "if ( equals ( size ) ) {", "return this ; }", "return size ; }"]}
{"ids": "68156", "code": ["private boolean is Gzip Allowed ( final Http Servlet Request request ) {", "return ! Dispatcher Stream Locator . is Included Request ( request ) && Wro Util . is Gzip Supported ( request ) ; }"]}
{"ids": "64959", "code": ["public Replay Processor ( int buffer Size , boolean unbounded ) {", "if ( unbounded ) {", "this . buffer = new Unbounded Buffer < > ( buffer Size ) ; }", "else {", "this . buffer = new Bounded Buffer < > ( buffer Size ) ; }", "SUBSCRIBERS . lazy Set ( this , EMPTY ) ; }"]}
{"ids": "62794", "code": ["protected void on Show Conversations ( @ Non Null List < C > conversations ) {", "if ( DEBUG ) {", "Log . d ( TAG , STR_ + conversations . size ( ) + STR_ ) ; }", "m View . show Conversations ( new Array List < > ( conversations ) ) ; }"]}
{"ids": "86653", "code": ["public void enqueue Job ( final Runnable job ) {", "synchronized ( m Sleep Sync ) {", "if ( has Job ( ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "set Job ( job ) ;", "m Sleep Sync . notify All ( ) ; } }"]}
{"ids": "23240", "code": ["public void update Nonce Parameters ( ) {", "if ( m Next Nonce . equals ( m Nonce ) ) {", "m Cnonce Counter ++ ; }", "else {", "m Cnonce Counter = NUM_ ;", "m Nonce = m Next Nonce ; } }"]}
{"ids": "21520", "code": ["private void match V Pools ( URI rp System Id ) {", "List < URI > storage Pool Ids = Connectivity Util . get RP System Storage Pools ( db Client , rp System Id ) ;", "String Buffer error Message = new String Buffer ( ) ;", "if ( storage Pool Ids != null && ! storage Pool Ids . is Empty ( ) ) {", "List < Storage Pool > storage Pools = db Client . query Object ( Storage Pool . class , storage Pool Ids ) ;", "Implicit Pool Matcher . match Modified Storage Pools With All Virtual Pool ( storage Pools , db Client , coordinator , error Message ) ; } }"]}
{"ids": "80547", "code": ["public static Big Decimal calculate Fee ( Player player , int price ) {", "Big Decimal fee = Big Decimal . value Of ( price ) ;", "fee = fee . multiply ( Big Decimal . value Of ( TRADING FEE PERCENTAGE ) ) ;", "if ( player . is Bad Boy ( ) ) {", "fee = fee . multiply ( Big Decimal . value Of ( NUM_ + TRADING FEE PLAYER KILLER PENALTY ) ) ; }", "Big Decimal fee Bonus = Big Decimal . ONE ;", "fee Bonus = Big Decimal . value Of ( Math . exp ( - player . get Tradescore ( ) / FEE BONUS CONSTANT ) ) ;", "fee = fee . multiply ( fee Bonus ) ;", "return fee . max ( Big Decimal . ONE ) ; }"]}
{"ids": "45206", "code": ["private void add Search History ( ) {", "add Search History ( tf Search Editor . get Text ( ) ) ; }"]}
{"ids": "54793", "code": ["Array List < Source File > trim File List ( Array List < Source File > files ) {", "Hash Map < String , String > names = new Hash Map < String , String > ( ) ;", "Array List < Source File > list = new Array List < Source File > ( ) ;", "int size = files . size ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "boolean add It = false ;", "Source File fi = files . get ( i ) ;", "String f Name = fi . get Raw Name ( ) ;", "if ( m swf Filter == null ) {", "if ( names . get ( f Name ) == null ) add It = true ; }", "else {", "add It = m swf Filter . contains Source ( fi ) ; }", "if ( add It ) {", "names . put ( f Name , f Name ) ;", "list . add ( fi ) ; } }", "return list ; }"]}
{"ids": "79496", "code": ["public Entity Query order By ( String ... fields ) {", "this . order By = Arrays . as List ( fields ) ;", "return this ; }"]}
{"ids": "26130", "code": ["public Stemmed String ( String orig , String stemmed ) {", "str Orig = orig ;", "str Stemmed = stemmed ; }"]}
{"ids": "21156", "code": ["public Log Network Stream Merger ( Log Request req , Media Type media Type , Log Svc Properties Loader properties Loader ) {", "logger . trace ( STR_ ) ;", "this . request = req ;", "this . media Type = media Type ;", "this . properties Loader = properties Loader ;", "List < Log Network Reader > readers = get Log Network Streams ( ) ;", "int size = readers . size ( ) ;", "log Heads = new Log Message [ size ] ;", "this . log Stream List = new Log Network Reader [ size ] ;", "int index = NUM_ ;", "for ( Log Network Reader reader : readers ) {", "log Stream List [ index ] = reader ;", "log Heads [ index ] = null ;", "index ++ ; } }"]}
{"ids": "49549", "code": ["public static String pack Cipher Suites ( String [ ] ciphers ) {", "String cipher Set = null ;", "if ( ciphers != null ) {", "String Buffer buf = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < ciphers . length ; i ++ ) {", "buf . append ( ciphers [ i ] ) ;", "if ( i < ciphers . length - NUM_ ) {", "buf . append ( STR_ ) ; } }", "cipher Set = buf . to String ( ) ; }", "return cipher Set ; }"]}
{"ids": "55098", "code": ["private static boolean is An Argument ( final String arg ) {", "return ( arg . starts With ( STR_ ) && ( arg . length ( ) > NUM_ ) && ! Character . is Digit ( arg . char At ( NUM_ ) ) ) ; }"]}
{"ids": "1217", "code": ["private synchronized static void remove Children ( Node node , short type , boolean deep ) {", "Node List list = node . get Child Nodes ( ) ;", "for ( int i = list . get Length ( ) ; i >= NUM_ ; i -- ) {", "Node n = list . item ( i ) ;", "if ( n == null ) continue ;", "if ( n . get Node Type ( ) == type || type == UNDEFINED NODE ) node . remove Child ( XML Caster . to Raw Node ( n ) ) ;", "else if ( deep ) remove Children ( n , type , deep ) ; } }"]}
{"ids": "66590", "code": ["public boolean is Valid Savepoint ( Savepoint sp ) {", "if ( is Source ( ) ) return false ;", "boolean result = false ;", "if ( sp != null ) result = true ;", "return result ; }"]}
{"ids": "54046", "code": ["public static void columns For ( Result Set result Set , Table Editor editor ) throws SQL Exception {", "List < Column > columns = new Array List < > ( ) ;", "columns For ( result Set , null ) ;", "editor . set Columns ( columns ) ; }"]}
{"ids": "31644", "code": ["private static void write ( Collection < String > src , File out ) throws IO Exception {", "try ( Writer writer = new Buffered Writer ( new File Writer ( out ) ) ) {", "for ( String line : src ) writer . write ( line + STR_ ) ; } }"]}
{"ids": "44428", "code": ["private long reset Uid Validity ( ) throws IO Exception {", "long timestamp = System . current Time Millis ( ) ;", "set Uid Validity ( timestamp ) ;", "return timestamp ; }"]}
{"ids": "55855", "code": ["public final Array List < Move > pseudo Legal Moves ( Position pos ) {", "Array List < Move > move List = get Move List Obj ( ) ;", "final boolean wtm = pos . white Move ;", "for ( int x = NUM_ ; x < NUM_ ; x ++ ) {", "for ( int y = NUM_ ; y < NUM_ ; y ++ ) {", "int sq = Position . get Square ( x , y ) ;", "int p = pos . get Piece ( sq ) ;", "if ( ( p == Piece . EMPTY ) || ( Piece . is White ( p ) != wtm ) ) {", "continue ; }", "if ( ( p == Piece . WROOK ) || ( p == Piece . BROOK ) || ( p == Piece . WQUEEN ) || ( p == Piece . BQUEEN ) ) {", "if ( add Direction ( move List , pos , sq , NUM_ - x , NUM_ ) ) return move List ;", "if ( add Direction ( move List , pos , sq , NUM_ - y , NUM_ ) ) return move List ;", "if ( add Direction ( move List , pos , sq , x , - NUM_ ) ) return move List ;", "if ( add Direction ( move List , pos , sq , y , - NUM_ ) ) return move List ; }", "if ( ( p == Piece . WBISHOP ) || ( p == Piece . BBISHOP ) || ( p == Piece . WQUEEN ) || ( p == Piece . BQUEEN ) ) {", "if ( add Direction ( move List , pos , sq , Math . min ( NUM_ - x , NUM_ - y ) , NUM_ ) ) return move List ;", "if ( add Direction ( move List , pos , sq , Math . min ( x , NUM_ - y ) , NUM_ ) ) return move List ;", "if ( add Direction ( move List , pos , sq , Math . min ( x , y ) , - NUM_ ) ) return move List ;", "if ( add Direction ( move List , pos , sq , Math . min ( NUM_ - x , y ) , - NUM_ ) ) return move List ; }", "if ( ( p == Piece . WKNIGHT ) || ( p == Piece . BKNIGHT ) ) {", "if ( x < NUM_ && y < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( x < NUM_ && y < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( x > NUM_ && y < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( x > NUM_ && y < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( x > NUM_ && y > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ;", "if ( x > NUM_ && y > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ;", "if ( x < NUM_ && y > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ;", "if ( x < NUM_ && y > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ; }", "if ( ( p == Piece . WKING ) || ( p == Piece . BKING ) ) {", "if ( x < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( x < NUM_ && y < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( y < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( x > NUM_ && y < NUM_ && add Direction ( move List , pos , sq , NUM_ , NUM_ ) ) return move List ;", "if ( x > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ;", "if ( x > NUM_ && y > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ;", "if ( y > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ;", "if ( x < NUM_ && y > NUM_ && add Direction ( move List , pos , sq , NUM_ , - NUM_ ) ) return move List ;", "int k 0 = wtm ? Position . get Square ( NUM_ , NUM_ ) : Position . get Square ( NUM_ , NUM_ ) ;", "if ( Position . get Square ( x , y ) == k 0 ) {", "int a Castle = wtm ? Position . A 1 CASTLE : Position . A 8 CASTLE ;", "int h Castle = wtm ? Position . H 1 CASTLE : Position . H 8 CASTLE ;", "int rook = wtm ? Piece . WROOK : Piece . BROOK ;", "if ( ( ( pos . get Castle Mask ( ) & ( NUM_ << h Castle ) ) != NUM_ ) && ( pos . get Piece ( k 0 + NUM_ ) == Piece . EMPTY ) && ( pos . get Piece ( k 0 + NUM_ ) == Piece . EMPTY ) && ( pos . get Piece ( k 0 + NUM_ ) == rook ) && ! sq Attacked ( pos , k 0 ) && ! sq Attacked ( pos , k 0 + NUM_ ) ) {", "move List . add ( get Move Obj ( k 0 , k 0 + NUM_ , Piece . EMPTY ) ) ; }", "if ( ( ( pos . get Castle Mask ( ) & ( NUM_ << a Castle ) ) != NUM_ ) && ( pos . get Piece ( k 0 - NUM_ ) == Piece . EMPTY ) && ( pos . get Piece ( k 0 - NUM_ ) == Piece . EMPTY ) && ( pos . get Piece ( k 0 - NUM_ ) == Piece . EMPTY ) && ( pos . get Piece ( k 0 - NUM_ ) == rook ) && ! sq Attacked ( pos , k 0 ) && ! sq Attacked ( pos , k 0 - NUM_ ) ) {", "move List . add ( get Move Obj ( k 0 , k 0 - NUM_ , Piece . EMPTY ) ) ; } } }", "if ( ( p == Piece . WPAWN ) || ( p == Piece . BPAWN ) ) {", "int y Dir = wtm ? NUM_ : - NUM_ ;", "if ( pos . get Piece ( sq + y Dir ) == Piece . EMPTY ) {", "add Pawn Moves ( move List , sq , sq + y Dir ) ;", "if ( ( y == ( wtm ? NUM_ : NUM_ ) ) && ( pos . get Piece ( sq + NUM_ * y Dir ) == Piece . EMPTY ) ) {", "add Pawn Moves ( move List , sq , sq + y Dir * NUM_ ) ; } }", "if ( x > NUM_ ) {", "int to Sq = sq + y Dir - NUM_ ;", "int cap = pos . get Piece ( to Sq ) ;", "if ( cap != Piece . EMPTY ) {", "if ( Piece . is White ( cap ) != wtm ) {", "if ( cap == ( wtm ? Piece . BKING : Piece . WKING ) ) {", "return Move List ( move List ) ;", "move List = get Move List Obj ( ) ;", "move List . add ( get Move Obj ( sq , to Sq , Piece . EMPTY ) ) ;", "return move List ; }", "else {", "add Pawn Moves ( move List , sq , to Sq ) ; } } }", "else if ( to Sq == pos . get Ep Square ( ) ) {", "add Pawn Moves ( move List , sq , to Sq ) ; } }", "if ( x < NUM_ ) {", "int to Sq = sq + y Dir + NUM_ ;", "int cap = pos . get Piece ( to Sq ) ;", "if ( cap != Piece . EMPTY ) {", "if ( Piece . is White ( cap ) != wtm ) {", "if ( cap == ( wtm ? Piece . BKING : Piece . WKING ) ) {", "return Move List ( move List ) ;", "move List = get Move List Obj ( ) ;", "move List . add ( get Move Obj ( sq , to Sq , Piece . EMPTY ) ) ;", "return move List ; }", "else {", "add Pawn Moves ( move List , sq , to Sq ) ; } } }", "else if ( to Sq == pos . get Ep Square ( ) ) {", "add Pawn Moves ( move List , sq , to Sq ) ; } } } } }", "return move List ; }"]}
{"ids": "69751", "code": ["private void handle Static Site Request ( Static Site Request . Point Request request , Transport Network transport Network , Task Statistics ts ) {", "Static Computer computer = new Static Computer ( request , transport Network , ts ) ;", "if ( request . request . bucket != null ) computer . run ( ) ;", "else {", "try {", "Piped Input Stream pis = new Piped Input Stream ( ) ;", "Piped Output Stream pos = new Piped Output Stream ( pis ) ;", "finish Priority Task ( request , pis ) ;", "computer . write ( pos ) ;", "pos . close ( ) ; }", "catch ( IO Exception e ) {", "LOG . error ( STR_ , e ) ; } }", "delete Request ( request ) ; }"]}
{"ids": "55310", "code": ["public synchronized void remove Room ( String room ) {", "if ( ! Helper . validate Stream ( room ) ) {", "return ; }", "room = room . to Lower Case ( ) ;", "if ( rooms . remove ( room ) ) {", "unsub Room ( room ) ;", "remove Emotes ( room ) ;", "prev Emotesets . remove ( room ) ; } }"]}
{"ids": "73295", "code": ["public void add All ( final Collection elements ) {", "adjusting = true ;", "Set old Selection = new Hash Set ( selection ) ;", "boolean rv = selection . add All ( elements ) ;", "adjusting = false ;", "if ( rv ) {", "fire Selection Changed ( old Selection , selection ) ; }", "old Selection = null ; }"]}
{"ids": "72285", "code": ["public boolean has Feature ( int feature ) {", "return ( ( feature >= MODE FIRST && feature <= MODE LAST ) || ( feature >= FEATURE FIRST && feature <= FEATURE LAST ) ) && ( feature == MODE OFF || m Capabilities . get ( feature ) ) ; }"]}
{"ids": "32102", "code": ["public Set < Integer > backup Partitions ( UUID node Id ) {", "Set < Integer > set = backup . get ( node Id ) ;", "return set == null ? Collections . < Integer > empty Set ( ) : set ; }"]}
{"ids": "82525", "code": ["public java . lang . String Buffer insert ( int offset , java . lang . String str ) {", "internal . insert ( offset , str ) ;", "return this ; }"]}
{"ids": "78394", "code": ["public Loader load ( String image Url ) {", "Image Url = image Url ;", "return this ; }"]}
{"ids": "36171", "code": ["private void build PTR ( ) {", "double [ ] temp row ;", "double [ ] [ ] PTRA ;", "int k ;", "Pivot Transform pt ;", "PTR = Matrix . identity ( n , n ) ;", "PTRA = PTR . get Array ( ) ;", "k = pivot Transform Queue . size ( ) ;", "while ( k -- > NUM_ ) {", "pt = pivot Transform Queue . remove Last ( ) ;", "temp row = PTRA [ pt . pos 1 ] ;", "PTRA [ pt . pos 1 ] = PTRA [ pt . pos 2 ] ;", "PTRA [ pt . pos 2 ] = temp row ; } }"]}
{"ids": "47428", "code": ["public Bidi create Line Bidi ( int line Start , int line Limit ) {", "Attributed String astr = new Attributed String ( STR_ ) ;", "Bidi new Bidi = new Bidi ( astr . get Iterator ( ) ) ;", "return bidi Base . set Line ( this , bidi Base , new Bidi , new Bidi . bidi Base , line Start , line Limit ) ; }"]}
{"ids": "50902", "code": ["public void restart And Install If Necessary ( ) {", "File patches Dir = new File ( my Sdk Handler . get Location ( ) , Patch Installer Util . PATCHES DIR NAME ) ;", "Studio Logger Progress Indicator progress = new Studio Logger Progress Indicator ( Patch Installer Factory . class ) ;", "if ( patches Dir . exists ( ) ) {", "File [ ] sub Dirs = patches Dir . list Files ( null ) ;", "for ( File patch Dir : sub Dirs ) {", "process Patch ( my Sdk Handler . get Location ( ) , progress , patch Dir ) ; } } }"]}
{"ids": "75777", "code": ["public static double [ ] [ ] align ( int [ ] real , double [ ] pred ) {", "int missing = number Of Missing Labels ( real ) ;", "double [ ] real = new double [ real . length - missing ] ;", "double [ ] pred = new double [ real . length - missing ] ;", "int offset = NUM_ ;", "for ( int i = NUM_ ; i < real . length ; i ++ ) {", "if ( real [ i ] == - NUM_ || pred [ i ] == - NUM_ || Double . is Na N ( pred [ i ] ) ) {", "offset ++ ;", "continue ; }", "real [ i - offset ] = real [ i ] ;", "pred [ i - offset ] = pred [ i ] ; }", "double [ ] [ ] res = new double [ NUM_ ] [ NUM_ ] ;", "res [ NUM_ ] = real ;", "res [ NUM_ ] = pred ;", "return res ; }"]}
{"ids": "86250", "code": ["public void append ( File file , FTP Data Transfer Listener listener ) throws Illegal State Exception , File Not Found Exception , IO Exception , FTP Illegal Reply Exception , FTP Exception , FTP Data Transfer Exception , FTP Aborted Exception {", "if ( ! file . exists ( ) ) {", "throw new File Not Found Exception ( file . get Absolute Path ( ) ) ; }", "Input Stream input Stream = null ;", "try {", "input Stream = new File Input Stream ( file ) ; }", "catch ( IO Exception e ) {", "throw new FTP Data Transfer Exception ( e ) ; }", "try {", "append ( file . get Name ( ) , input Stream , NUM_ , listener ) ; }", "catch ( Illegal State Exception e ) {", "throw e ; }", "catch ( IO Exception e ) {", "throw e ; }", "catch ( FTP Illegal Reply Exception e ) {", "throw e ; }", "catch ( FTP Exception e ) {", "throw e ; }", "catch ( FTP Data Transfer Exception e ) {", "throw e ; }", "catch ( FTP Aborted Exception e ) {", "throw e ; }", "finally {", "if ( input Stream != null ) {", "try {", "input Stream . close ( ) ; }", "catch ( Throwable t ) { ; } } } }"]}
{"ids": "55093", "code": ["public static boolean is Scoped Name ( String name ) {", "return name . index Of ( STR_ ) != - NUM_ ; }"]}
{"ids": "85647", "code": ["public Input ( Io Buffer buf ) {", "super ( buf ) ;", "amf 3 mode = NUM_ ;", "string References = new Array List < String > ( ) ;", "class References = new Array List < Class Reference > ( ) ; }"]}
{"ids": "25194", "code": ["public static Properties load Config File ( String path ) {", "Properties property = null ;", "File file = new File ( path ) ;", "if ( file . exists ( ) && file . can Read ( ) ) {", "try {", "property = new Properties ( ) ;", "property . load ( new File Reader ( file . get Absolute Path ( ) ) ) ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }", "return property ; }"]}
{"ids": "7226", "code": ["protected static void to EPL Views ( String Writer writer , List < View > views ) {", "if ( ( views != null ) && ( views . size ( ) != NUM_ ) ) {", "writer . write ( STR_ ) ;", "String delimiter = STR_ ;", "for ( View view : views ) {", "writer . write ( delimiter ) ;", "view . to EPL ( writer ) ;", "delimiter = STR_ ; } } }"]}
{"ids": "79791", "code": ["protected void remove Database Listeners ( ) {", "database Listeners . clear ( ) ; }"]}
{"ids": "69466", "code": ["public void add Generic Attr ( Generic Attr g ) {", "generic . add Element ( g ) ; }"]}
{"ids": "83280", "code": ["private List < Fahrzeit Event > add Fahrt Info To Fahrzeit Events ( List < Fahrt Event > fahrt Events , List < Fahrzeit Event > fahrzeit Events , boolean keep Fahrzeit Events Without Fahrt Event ) {", "List < Fahrzeit Event > fahrzeit Events Out = new Linked List < Fahrzeit Event > ( ) ;", "Map < String , Fahrt Event > rbl Date Kurs Date Time Ist 2 Fahrt Event Map = new Hash Map < String , Fahrt Event > ( ) ;", "Set < String > search Strings = new Tree Set < String > ( ) ;", "for ( Fahrt Event fahrt Event : fahrt Events ) {", "String search Id = String . value Of ( fahrt Event . get Rbl Date ( ) ) + String . value Of ( fahrt Event . get Kurs ( ) ) + fahrt Event . get Departure Date Ist ( ) + fahrt Event . get Departure Time Ist ( ) ;", "if ( search Strings . contains ( search Id ) ) {", "log . warn ( STR_ + search Id ) ; }", "else {", "search Strings . add ( search Id ) ;", "rbl Date Kurs Date Time Ist 2 Fahrt Event Map . put ( search Id , fahrt Event ) ; } }", "int number Of Missing Fahrt Events = NUM_ ;", "for ( Fahrzeit Event fahrzeit Event : fahrzeit Events ) {", "String search Id = String . value Of ( fahrzeit Event . get Rbl Date ( ) ) + String . value Of ( fahrzeit Event . get Kurs ( ) ) + fahrzeit Event . get Departure Date Ist ( ) + fahrzeit Event . get Departure Time Ist ( ) ;", "Fahrt Event fahrt Event = rbl Date Kurs Date Time Ist 2 Fahrt Event Map . get ( search Id ) ;", "if ( fahrt Event == null ) {", "number Of Missing Fahrt Events ++ ;", "if ( keep Fahrzeit Events Without Fahrt Event ) {", "fahrzeit Events Out . add ( fahrzeit Event ) ; } }", "else {", "fahrzeit Event . add ( fahrt Event ) ;", "fahrzeit Events Out . add ( fahrzeit Event ) ; } }", "log . info ( number Of Missing Fahrt Events + STR_ ) ;", "log . info ( STR_ + fahrzeit Events Out . size ( ) + STR_ ) ;", "return fahrzeit Events Out ; }"]}
{"ids": "31680", "code": ["private void check UUID ( String uuid , int code ) {", "check Hash ( UUID . from String ( uuid ) , code ) ; }"]}
{"ids": "39662", "code": ["@ Override protected void prepare Write ( Writable Byte Channel channel ) throws Exception {", "os = Channels . new Output Stream ( channel ) ; }"]}
{"ids": "14885", "code": ["public void run ( ) {", "try {", "boolean clean Remote Sessions = false ;", "synchronized ( this ) {", "Collection < State Info > infos = new Array List < > ( ) ;", "infos . add All ( servers . values ( ) ) ;", "infos . add All ( sites . values ( ) ) ;", "for ( State Info info : infos ) {", "info . is Up = check Server Up ( info ) ;", "if ( ! info . is Up ) {", "down . add ( info . id ) ; }", "else {", "if ( ! down . is Empty ( ) && down . remove ( info . id ) ) {", "clean Remote Sessions = true ; } } } }", "if ( clean Remote Sessions ) {", "foreign Session Handler . clean Up Remote Sessions ( ) ; } }", "catch ( Exception ex ) {", "session Debug . error ( STR_ + ex . get Message ( ) , ex ) ; } }"]}
{"ids": "51897", "code": ["public Builder add Header ( String name , String value ) {", "headers . add ( new Header ( name , value ) ) ;", "return this ; }"]}
{"ids": "78121", "code": ["public static double normal CDF ( double x ) {", "return ( NUM_ * ( NUM_ + ( erf ( x / ( Math . sqrt ( NUM_ ) ) ) ) ) ) ; }"]}
{"ids": "38378", "code": ["public void remove Result ( String name ) {", "String Buffer buff = m Results . get ( name ) ;", "if ( buff != null ) {", "m Results . remove ( name ) ;", "m Model . remove Element ( name ) ;", "m Objs . remove ( name ) ;", "System . gc ( ) ; } }"]}
{"ids": "20220", "code": ["private void add Entry ( ) {", "filter Model . add New Entry ( ) ;", "extent Model . populate ( null ) ;", "remove FTC Button . set Enabled ( false ) ;", "add Extent Button . set Enabled ( false ) ;", "remove Extent Button . set Enabled ( false ) ; }"]}
{"ids": "50749", "code": ["double [ ] [ ] Calc Theoretical SV Values ( Variogram vario , double Maximum Disply Distanst ) {", "double [ ] [ ] res = new double [ NUM_ * Number Of Lags + NUM_ ] [ NUM_ ] ;", "for ( int i = NUM_ ; i < res . length ; i ++ ) {", "res [ i ] [ NUM_ ] = i * Maximum Disply Distanst / ( NUM_ * Number Of Lags ) ;", "switch ( vario . Type ) {", "case EXPONENTIAL :", "if ( res [ i ] [ NUM_ ] != NUM_ ) {", "res [ i ] [ NUM_ ] = vario . Nugget + vario . Sill * ( NUM_ - Math . exp ( - res [ i ] [ NUM_ ] / vario . Range ) ) ; }", "else {", "res [ i ] [ NUM_ ] = vario . Nugget ; }", "break ;", "case GAUSSIAN :", "if ( res [ i ] [ NUM_ ] != NUM_ ) {", "res [ i ] [ NUM_ ] = vario . Nugget + vario . Sill * ( NUM_ - Math . exp ( - NUM_ * ( Math . pow ( res [ i ] [ NUM_ ] , NUM_ ) ) / ( Math . pow ( vario . Range , NUM_ ) ) ) ) ; }", "else {", "res [ i ] [ NUM_ ] = vario . Nugget ; }", "break ;", "case SPHERICAL :", "if ( res [ i ] [ NUM_ ] > vario . Range ) {", "res [ i ] [ NUM_ ] = vario . Nugget + vario . Sill ; }", "else if ( res [ i ] [ NUM_ ] > NUM_ && res [ i ] [ NUM_ ] <= vario . Range ) {", "res [ i ] [ NUM_ ] = vario . Nugget + vario . Sill * ( NUM_ * res [ i ] [ NUM_ ] / vario . Range - NUM_ * Math . pow ( ( res [ i ] [ NUM_ ] / vario . Range ) , NUM_ ) ) ; }", "else {", "res [ i ] [ NUM_ ] = vario . Nugget ; }", "break ; } }", "return res ; }"]}
{"ids": "9787", "code": ["public D Export Private Key Open Ssl ( J Frame parent , String entry Alias , Password Quality Config password Quality Config ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "this . entry Alias = entry Alias ;", "this . password Quality Config = password Quality Config ;", "init Components ( ) ; }"]}
{"ids": "65981", "code": ["public Big Decimal sum ( String sql Expression ) {", "return aggregate ( sql Expression , AGGREGATE SUM ) ; }"]}
{"ids": "7511", "code": ["@ Override public int calculate Offset X ( ) {", "return ( int ) ( Math . cos ( this . angle ) * this . distance ) - this . shadow Size ; }"]}
{"ids": "44950", "code": ["public String add Days ( Object odays , String format ) {", "int days = Function Handler . get Int ( odays ) ;", "Calendar now = Calendar . get Instance ( ) ;", "now . add ( Calendar . DAY OF YEAR , days ) ;", "Date Format formatter = get Formatter ( format ) ;", "return formatter . format ( now . get Time ( ) ) ; }"]}
{"ids": "6797", "code": ["private static File create Temp File ( Context context , @ Nullable String mime Type ) throws IO Exception {", "File external Cache Dir = context . get External Cache Dir ( ) ;", "File internal Cache Dir = context . get Cache Dir ( ) ;", "File cache Dir ;", "if ( external Cache Dir == null && internal Cache Dir == null ) {", "throw new IO Exception ( STR_ ) ; }", "if ( external Cache Dir == null ) {", "cache Dir = internal Cache Dir ; }", "else if ( internal Cache Dir == null ) {", "cache Dir = external Cache Dir ; }", "else {", "cache Dir = external Cache Dir . get Free Space ( ) > internal Cache Dir . get Free Space ( ) ? external Cache Dir : internal Cache Dir ; }", "return File . create Temp File ( TEMP FILE PREFIX , get File Extension For Type ( mime Type ) , cache Dir ) ; }"]}
{"ids": "48837", "code": ["public Writable Raster create Compatible Writable Raster ( int w , int h ) {", "if ( w <= NUM_ || h <= NUM_ ) {", "throw new Raster Format Exception ( STR_ + ( ( w <= NUM_ ) ? STR_ : STR_ ) ) ; }", "Sample Model sm = sample Model . create Compatible Sample Model ( w , h ) ;", "return new Integer Interleaved Raster ( sm , new Point ( NUM_ , NUM_ ) ) ; }"]}
{"ids": "26932", "code": ["public static String [ ] scheduler Command Args ( Config config , Config runtime , List < Integer > free Ports ) {", "if ( free Ports . size ( ) < PORTS REQUIRED FOR SCHEDULER ) {", "throw new Runtime Exception ( STR_ ) ; }", "for ( int port : free Ports ) {", "if ( port == - NUM_ ) {", "throw new Runtime Exception ( STR_ ) ; } }", "int http Port = free Ports . get ( NUM_ ) ;", "List < String > commands = new Array List < > ( ) ;", "commands . add ( STR_ ) ;", "commands . add ( Context . cluster ( config ) ) ;", "commands . add ( STR_ ) ;", "commands . add ( Context . role ( config ) ) ;", "commands . add ( STR_ ) ;", "commands . add ( Context . environ ( config ) ) ;", "commands . add ( STR_ ) ;", "commands . add ( Context . topology Name ( config ) ) ;", "commands . add ( STR_ ) ;", "commands . add ( Context . topology Binary File ( config ) ) ;", "commands . add ( STR_ ) ;", "commands . add ( Integer . to String ( http Port ) ) ;", "return commands . to Array ( new String [ NUM_ ] ) ; }"]}
{"ids": "77307", "code": ["public Document Analysis Request add Document ( Solr Input Document doc ) {", "documents . add ( doc ) ;", "return this ; }"]}
{"ids": "46761", "code": ["public final Key do Phase ( Key key , boolean last Phase ) throws Invalid Key Exception , Illegal State Exception {", "choose First Provider ( ) ;", "return spi . engine Do Phase ( key , last Phase ) ; }"]}
{"ids": "25282", "code": ["public void read Buckets From Prefs ( ) {", "Shared Preferences prefs = m Context . get Shared Preferences ( SHARED PREFS , NUM_ ) ;", "Set < String > buckets = prefs . get String Set ( PREF BUCKETS IDS , new Tree Set < String > ( ) ) ;", "m Buckets . clear ( ) ;", "for ( String bucket Id : buckets ) {", "Auto Mix Bucket bucket = restore Bucket From Id ( bucket Id ) ;", "m Buckets . add ( bucket ) ; } }"]}
{"ids": "41496", "code": ["@ Override public void accept App Offer ( Offer offer ) {", "int index = get Index ( offer , app Offers ) ;", "if ( index != - NUM_ ) {", "app Offers . remove ( index ) ;", "app Offer Stream . on Next ( offer ) ; }", "index = get Index ( offer , accepted Offers ) ;", "if ( index == - NUM_ ) {", "accepted Offers . add ( offer ) ; } }"]}
{"ids": "14387", "code": ["public void write Request ( ) {", "Object lock = new Object ( ) ;", "synchronized ( lock ) {", "synchronized ( this ) {", "boolean go Ahead With Write = writer Locks . size ( ) == NUM_ && current Readers == NUM_ && current Writers == NUM_ ;", "if ( go Ahead With Write ) {", "++ current Writers ;", "return ; }", "writer Locks . add Last ( lock ) ; }", "try {", "lock . wait ( ) ; }", "catch ( Interrupted Exception e ) { } } }"]}
{"ids": "86334", "code": ["public void remove Selection Listener ( final Selection Listener listener ) {", "check Widget ( ) ;", "listeners . remove ( listener ) ; }"]}
{"ids": "80690", "code": ["private synchronized String read Input Stream ( Input Stream Reader input Stream Reader ) throws IO Exception , Bad Location Exception {", "Buffered Reader buffered Reader = null ;", "try {", "buffered Reader = new Buffered Reader ( input Stream Reader ) ;", "String new Line = STR_ ;", "String Buffer sb = new String Buffer ( ) ;", "String line ;", "while ( ( line = buffered Reader . read Line ( ) ) != null ) {", "sb . append ( line + new Line ) ; }", "return sb . to String ( ) ; }", "finally {", "if ( null != buffered Reader ) buffered Reader . close ( ) ;", "if ( null != input Stream Reader ) input Stream Reader . close ( ) ; } }"]}
{"ids": "85405", "code": ["private List < Map < String , Object > > type Parameters ( List < Type Parameter > tpl , Declaration from ) {", "if ( tpl != null && ! tpl . is Empty ( ) ) {", "List < Map < String , Object > > l = new Array List < > ( tpl . size ( ) ) ;", "for ( Type Parameter tp : tpl ) {", "l . add ( type Parameter Map ( tp , from ) ) ; }", "return l ; }", "return null ; }"]}
{"ids": "5559", "code": ["private static boolean within Two ( I Node n , I Node goal ) {", "Double Linked List < I Move > moves = n . valid Moves ( ) ;", "for ( Iterator < I Move > it = moves . iterator ( ) ; it . has Next ( ) ; ) {", "I Move move = it . next ( ) ;", "I Node successor = n . copy ( ) ;", "move . execute ( successor ) ;", "if ( within One ( successor , goal ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "4803", "code": ["public Penn Treebank Reader ( String treebank Home , String [ ] sections , String parse View Name ) throws Exception {", "super ( Corpus Reader Configurator . build Resource Manager ( PENN TREEBANK WSJ , treebank Home ) ) ;", "this . parse View Name = parse View Name ;", "combined WSJ Home = treebank Home ;", "if ( sections == null ) this . sections = IO Utils . ls Directories ( combined WSJ Home ) ;", "else {", "this . sections = new String [ sections . length ] ;", "System . arraycopy ( sections , NUM_ , this . sections , NUM_ , sections . length ) ; }", "update Current Files ( ) ; }"]}
{"ids": "19763", "code": ["protected void apply Row Change Data ( Row Change Data data , List < Repl Option > options , String source Dbms Type ) throws Replicator Exception {", "if ( options != null ) {", "try {", "if ( apply Session Variables ( null , options ) ) {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ ) ; }", "execute Pending Batch ( ) ;", "statement . execute Batch ( ) ;", "statement . clear Batch ( ) ; } }", "catch ( SQL Exception e ) {", "throw new Applier Exception ( STR_ , e ) ; } }", "List < Repl Option > row Options = data . get Options ( ) ;", "if ( row Options != null ) {", "try {", "if ( apply Session Variables ( null , row Options ) ) {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ ) ; }", "execute Pending Batch ( ) ;", "statement . execute Batch ( ) ;", "statement . clear Batch ( ) ; } }", "catch ( SQL Exception e ) {", "throw new Applier Exception ( STR_ , e ) ; } }", "for ( One Row Change row : data . get Row Changes ( ) ) {", "apply One Row Change Prepared ( row , source Dbms Type ) ; } }"]}
{"ids": "82569", "code": ["public boolean is Infinite ( ) {", "return is Infinite ( value ) ; }"]}
{"ids": "49844", "code": ["public void receive Redundancy ( ) {", "try {", "while ( true ) {", "if ( m In . read ( m In Buffer ) <= NUM_ ) return ; } }", "catch ( IO Exception e ) { } }"]}
{"ids": "63243", "code": ["MV Store ( Hash Map < String , Object > config ) {", "Object o = config . get ( STR_ ) ;", "this . compression Level = o == null ? NUM_ : ( Integer ) o ;", "String file Name = ( String ) config . get ( STR_ ) ;", "o = config . get ( STR_ ) ;", "if ( o == null ) {", "page Split Size = file Name == null ? NUM_ * NUM_ : NUM_ * NUM_ ; }", "else {", "page Split Size = ( Integer ) o ; }", "o = config . get ( STR_ ) ;", "this . background Exception Handler = ( Uncaught Exception Handler ) o ;", "meta = new MV Map < String , String > ( String Data Type . INSTANCE , String Data Type . INSTANCE ) ;", "Hash Map < String , Object > c = New . hash Map ( ) ;", "c . put ( STR_ , NUM_ ) ;", "c . put ( STR_ , current Version ) ;", "meta . init ( this , c ) ;", "file Store = ( File Store ) config . get ( STR_ ) ;", "if ( file Name == null && file Store == null ) {", "cache = null ;", "cache Chunk Ref = null ;", "return ; }", "if ( file Store == null ) {", "file Store Is Provided = false ;", "file Store = new File Store ( ) ; }", "else {", "file Store Is Provided = true ; }", "retention Time = file Store . get Default Retention Time ( ) ;", "boolean read Only = config . contains Key ( STR_ ) ;", "o = config . get ( STR_ ) ;", "int mb = o == null ? NUM_ : ( Integer ) o ;", "if ( mb > NUM_ ) {", "Cache Long Key LIRS . Config cc = new Cache Long Key LIRS . Config ( ) ;", "cc . max Memory = mb * NUM_ * NUM_ ;", "o = config . get ( STR_ ) ;", "if ( o != null ) {", "cc . segment Count = ( Integer ) o ; }", "cache = new Cache Long Key LIRS < Page > ( cc ) ;", "cc . max Memory /= NUM_ ;", "cache Chunk Ref = new Cache Long Key LIRS < Page Children > ( cc ) ; }", "o = config . get ( STR_ ) ;", "int kb = o == null ? NUM_ : ( Integer ) o ;", "auto Commit Memory = kb * NUM_ * NUM_ ;", "o = config . get ( STR_ ) ;", "auto Compact Fill Rate = o == null ? NUM_ : ( Integer ) o ;", "char [ ] encryption Key = ( char [ ] ) config . get ( STR_ ) ;", "try {", "if ( ! file Store Is Provided ) {", "file Store . open ( file Name , read Only , encryption Key ) ; }", "if ( file Store . size ( ) == NUM_ ) {", "creation Time = get Time Absolute ( ) ;", "last Commit Time = creation Time ;", "store Header . put ( STR_ , NUM_ ) ;", "store Header . put ( STR_ , BLOCK SIZE ) ;", "store Header . put ( STR_ , FORMAT WRITE ) ;", "store Header . put ( STR_ , creation Time ) ;", "write Store Header ( ) ; }", "else {", "read Store Header ( ) ; } }", "catch ( Illegal State Exception e ) {", "panic ( e ) ; }", "finally {", "if ( encryption Key != null ) {", "Arrays . fill ( encryption Key , ( char ) NUM_ ) ; } }", "last Commit Time = get Time Since Creation ( ) ;", "o = config . get ( STR_ ) ;", "int delay = o == null ? NUM_ : ( Integer ) o ;", "set Auto Commit Delay ( delay ) ; }"]}
{"ids": "70690", "code": ["public static boolean is Valid Vector ( Vector 2 f vector ) {", "if ( vector == null ) return false ;", "if ( Float . is Na N ( vector . x ) || Float . is Na N ( vector . y ) ) return false ;", "if ( Float . is Infinite ( vector . x ) || Float . is Infinite ( vector . y ) ) return false ;", "return true ; }"]}
{"ids": "45280", "code": ["public static URL resolve URL ( URL base , String target ) throws Malformed URL Exception {", "target = target . trim ( ) ;", "if ( target . starts With ( STR_ ) ) {", "return fix Pure Query Targets ( base , target ) ; }", "return new URL ( base , target ) ; }"]}
{"ids": "53080", "code": ["protected int max Depth ( Layout . Node node ) {", "int depth = NUM_ ;", "for ( int i = NUM_ ; i < node . num Children ( ) ; i ++ ) {", "Layout . Node child = node . get Child ( i ) ;", "depth = Math . max ( depth , max Depth ( child ) ) ; }", "return depth + NUM_ ; }"]}
{"ids": "31113", "code": ["private static URL [ ] path To UR Ls ( String path ) throws Malformed URL Exception {", "synchronized ( path To UR Ls Cache ) {", "Object [ ] v = ( Object [ ] ) path To UR Ls Cache . get ( path ) ;", "if ( v != null ) {", "return ( URL [ ] ) v [ NUM_ ] ; } }", "String Tokenizer st = new String Tokenizer ( path ) ;", "URL [ ] urls = new URL [ st . count Tokens ( ) ] ;", "for ( int i = NUM_ ; st . has More Tokens ( ) ; i ++ ) {", "urls [ i ] = new URL ( st . next Token ( ) ) ; }", "synchronized ( path To UR Ls Cache ) {", "path To UR Ls Cache . put ( path , new Object [ ] { urls , new Soft Reference ( path ) } ) ; }", "return urls ; }"]}
{"ids": "10411", "code": ["private void add Final ( Object [ ] stacks ) {", "Object [ ] input = new Object [ input Size ] , output = new Object [ output Size ] ;", "for ( int i = NUM_ ; i < stacks . length ; i ++ ) {", "if ( i < input Size ) {", "input [ i ] = stacks [ i ] ; }", "else if ( ! ( i - input Size > output Size ) ) {", "output [ i - input Size ] = stacks [ i ] ; }", "else {", "throw new Runtime Exception ( STR_ ) ; } }", "add Recipe ( input , output ) ; }"]}
{"ids": "51719", "code": ["protected void fire Connection Closed ( ) {", "Connection Event evt = new Connection Event ( this ) ;", "for ( Connection Event Listener listener : connection Event Listeners ) {", "listener . connection Closed ( evt ) ; } }"]}
{"ids": "32051", "code": ["public static void put Int Volatile ( Object obj , long off , int val ) {", "UNSAFE . put Int Volatile ( obj , off , val ) ; }"]}
{"ids": "60015", "code": ["public static URI create Uri From Server Set ( Set < Inet Socket Address > server Inet Set , String path , String protocol ) throws URI Syntax Exception {", "Inet Socket Address inet Socket Address = Service Utils . select Random Item ( server Inet Set ) ;", "String address = inet Socket Address . get Host String ( ) ;", "int port = inet Socket Address . get Port ( ) ;", "URI uri = new URI ( protocol , null , address , port , path , null , null ) ;", "return uri ; }"]}
{"ids": "28400", "code": ["public Plot Navigator ( Plot plot , String ... axes Names ) {", "this ( plot , Arrays . as List ( axes Names ) ) ; }"]}
{"ids": "65618", "code": ["public void add Column ( Class class Type , boolean read Only , String header ) {", "m model Header Class . add ( class Type ) ;", "set Column Read Only ( m model Header Class . size ( ) - NUM_ , read Only ) ;", "add Column ( header ) ;", "W List Item Renderer renderer = ( W List Item Renderer ) get Item Renderer ( ) ;", "renderer . set Column Class ( ( renderer . get No Columns ( ) - NUM_ ) , class Type ) ;", "return ; }"]}
{"ids": "73445", "code": ["Point Comparator ( int dimension ) {", "this . dimension = dimension ; }"]}
{"ids": "70788", "code": ["public static void add Element ( Document doc , Element root Element , String element Name , String type In , String is Array In , String partitioner In ) {", "Element element = doc . create Element ( STR_ ) ;", "root Element . append Child ( element ) ;", "Element name = doc . create Element ( STR_ ) ;", "name . append Child ( doc . create Text Node ( element Name ) ) ;", "element . append Child ( name ) ;", "Element type = doc . create Element ( STR_ ) ;", "type . append Child ( doc . create Text Node ( type In ) ) ;", "element . append Child ( type ) ;", "if ( is Array In . equals ( STR_ ) ) {", "element . append Child ( doc . create Element ( STR_ ) ) ; }", "if ( partitioner In != null ) {", "Element partitioner = doc . create Element ( STR_ ) ;", "partitioner . append Child ( doc . create Text Node ( partitioner In ) ) ;", "element . append Child ( partitioner ) ; } }"]}
{"ids": "72015", "code": ["public final void add Instance Of ( String class Name ) {", "Reject . if Null ( class Name ) ;", "String value = class Name . trim ( ) ;", "if ( ! value . matches ( CLASS RE ) ) {", "throw new Illegal Argument Exception ( STR_ + value + STR_ ) ; }", "instance Of Interfaces . add ( value ) ; }"]}
{"ids": "54175", "code": ["public boolean is Displayed Expecting Components ( ) {", "boolean result = false ;", "if ( conditions . is Condition Met ( visibility Of ( window ) ) ) {", "if ( components . is Empty ( ) ) {", "close Button . click ( ) ; }", "else {", "result = true ; } }", "return result ; }"]}
{"ids": "45359", "code": ["private void process Run Started Tag ( String identifier ) {", "Pattern num Tests Pattern = Pattern . compile ( STR_ ) ;", "Matcher num Tests = num Tests Pattern . matcher ( identifier ) ;", "if ( num Tests . find ( ) ) {", "try {", "m Num Tests Expected = Integer . parse Int ( num Tests . group ( NUM_ ) ) ; }", "catch ( Number Format Exception e ) {", "Log . e ( LOG TAG , STR_ + num Tests . group ( NUM_ ) ) ; } }", "if ( m Num Tests Expected > NUM_ ) {", "report Test Run Started ( ) ;", "m Num Tests Run = NUM_ ;", "m Test Run In Progress = true ; } }"]}
{"ids": "33179", "code": ["public Styled String insert ( char ch , int offset ) throws String Index Out Of Bounds Exception {", "if ( offset < NUM_ || offset > builder . length ( ) ) {", "throw new String Index Out Of Bounds Exception ( STR_ + offset + STR_ ) ; }", "builder . insert ( offset , ch ) ;", "return this ; }"]}
{"ids": "67492", "code": ["public void add Root ( Proto Element root ) {", "roots . add ( root ) ; }"]}
{"ids": "24914", "code": ["public void expand To Object And Select ( Object element Or Tree Path , int level ) {", "if ( check Busy ( ) ) {", "return ; }", "Object parent = get Parent Element ( element Or Tree Path ) ;", "if ( ( ( parent != null ) && get Expanded State ( parent ) ) || is Root Element ( element Or Tree Path ) ) {", "Widget w = internal Get Widget To Select ( element Or Tree Path ) ;", "if ( null != w ) {", "List < Object > selection List = new Array List < > ( ) ;", "selection List . add ( w ) ;", "set Selection ( selection List ) ;", "object To Select . set ( null ) ; }", "else {", "object To Select . set ( element Or Tree Path ) ; } }", "else {", "object To Select . set ( element Or Tree Path ) ;", "List < Object > objects To Expand = create Object List ( parent , new Array List < > ( ) ) ;", "if ( ! objects To Expand . is Empty ( ) ) {", "objects To Be Expanded . add All ( objects To Expand ) ;", "Widget w = internal Expand ( element Or Tree Path , true ) ;", "if ( w != null ) {", "internal Expand To Level ( w , level ) ; } }", "else {", "Widget w = internal Get Widget To Select ( element Or Tree Path ) ;", "if ( null != w ) {", "List < Object > selection List = new Array List < > ( ) ;", "selection List . add ( w ) ;", "set Selection ( selection List ) ;", "object To Select . set ( null ) ; } } } }"]}
{"ids": "72140", "code": ["public void append Cell ( float value ) {", "append Cell ( String . value Of ( value ) ) ; }"]}
{"ids": "75442", "code": ["public SVN Change Set Collector ( I Synchronize Page Configuration configuration ) {", "super ( configuration ) ; }"]}
{"ids": "15667", "code": ["public void ensure Max Size ( int max Width , int max Height , boolean keep Proportions ) {", "int width = canvas . get Width ( ) ;", "int height = canvas . get Height ( ) ;", "if ( keep Proportions ) {", "if ( width > height ) {", "if ( width > max Width ) {", "height = Math . round ( height *= max Width / ( double ) width ) ;", "width = max Width ; } }", "else {", "if ( height > max Height ) {", "width = Math . round ( width *= max Height / ( double ) height ) ;", "height = max Height ; } } }", "else {", "width = Math . min ( width , max Width ) ;", "height = Math . min ( height , max Height ) ; }", "resize ( width , height ) ; }"]}
{"ids": "48487", "code": ["public static boolean is Normalized ( Char Sequence src , java . text . Normalizer . Form form , int option ) {", "return Normalizer Base . is Normalized ( src . to String ( ) , form , option ) ; }"]}
{"ids": "85217", "code": ["public static String unescape Som ( String s ) {", "int idx = s . index Of ( STR_ ) ;", "if ( idx < NUM_ ) return s ;", "String Builder sb = new String Builder ( ) ;", "int last = NUM_ ;", "while ( idx >= NUM_ ) {", "sb . append ( s . substring ( last , idx ) ) ;", "last = idx + NUM_ ;", "idx = s . index Of ( STR_ , idx + NUM_ ) ; }", "sb . append ( s . substring ( last ) ) ;", "return sb . to String ( ) ; }"]}
{"ids": "33972", "code": ["private static Copy State read Copy State ( Data Input in ) throws IO Exception {", "byte [ ] infos Bytes = new byte [ in . read V Int ( ) ] ;", "in . read Bytes ( infos Bytes , NUM_ , infos Bytes . length ) ;", "long gen = in . read V Long ( ) ;", "long version = in . read V Long ( ) ;", "Map < String , File Meta Data > files = Copy Files Handler . read Files Meta Data ( in ) ;", "int count = in . read V Int ( ) ;", "Set < String > completed Merge Files = new Hash Set < > ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "completed Merge Files . add ( in . read String ( ) ) ; }", "long primary Gen = in . read V Long ( ) ;", "return new Copy State ( files , version , gen , infos Bytes , completed Merge Files , primary Gen , null ) ; }"]}
{"ids": "30328", "code": ["@ Transactional public void redeem ( final String token Number , final String service ) {", "final Token token = token Repository . find By Token Number And Service ( token Number , service ) ;", "if ( token == null ) throw new Application Runtime Exception ( STR_ + token Number + STR_ ) ;", "redeem ( token ) ; }"]}
{"ids": "69426", "code": ["public int lighten Color ( int color , float factor ) {", "float r = Color . red ( color ) * factor ;", "float g = Color . green ( color ) * factor ;", "float b = Color . blue ( color ) * factor ;", "int ir = Math . min ( NUM_ , ( int ) r ) ;", "int ig = Math . min ( NUM_ , ( int ) g ) ;", "int ib = Math . min ( NUM_ , ( int ) b ) ;", "int ia = Color . alpha ( color ) ;", "return ( Color . argb ( ia , ir , ig , ib ) ) ; }"]}
{"ids": "36968", "code": ["private static String to Database String ( final Operand Size size ) {", "switch ( size ) {", "case BYTE :", "return STR_ ;", "case WORD :", "return STR_ ;", "case DWORD :", "return STR_ ;", "case QWORD :", "return STR_ ;", "case OWORD :", "return STR_ ;", "case ADDRESS :", "return STR_ ;", "default :", "throw new Illegal Argument Exception ( String . format ( STR_ , size ) ) ; } }"]}
{"ids": "85579", "code": ["static String file Name Of Class ( final String class Name , String type Suffix ) {", "return class Name . replace ( STR_ , STR_ ) + STR_ + type Suffix ; }"]}
{"ids": "75086", "code": ["public void write Pv ( Process Var pv , int recursive Depth ) {", "write Pv ( pv , recursive Depth , false ) ; }"]}
{"ids": "85117", "code": ["private static void assert Qual NS ( String qual NS ) throws XMP Exception {", "if ( qual NS == null || qual NS . length ( ) == NUM_ ) {", "throw new XMP Exception ( STR_ , XMP Error . BADSCHEMA ) ; } }"]}
{"ids": "53359", "code": ["public static String Builder format To ( String Builder buf , float [ ] d , String sep , Number Format nf ) {", "if ( d == null ) {", "return buf . append ( STR_ ) ; }", "if ( d . length == NUM_ ) {", "return buf ; }", "buf . append ( nf . format ( d [ NUM_ ] ) ) ;", "for ( int i = NUM_ ; i < d . length ; i ++ ) {", "buf . append ( sep ) ;", "buf . append ( nf . format ( d [ i ] ) ) ; }", "return buf ; }"]}
{"ids": "69007", "code": ["public int remove Viewpoints ( int [ ] indices ) {", "for ( int i = indices . length - NUM_ ; i >= NUM_ ; -- i ) viewpoint List . remove ( indices [ i ] ) ;", "viewpoint Index = indices [ NUM_ ] - NUM_ ;", "if ( viewpoint List . size ( ) == NUM_ ) {", "viewpoint Index = - NUM_ ; }", "else if ( viewpoint Index < NUM_ ) {", "viewpoint Index = viewpoint List . size ( ) - NUM_ ; }", "return ( viewpoint Index ) ; }"]}
{"ids": "37241", "code": ["private void update Color ( ) {", "try {", "Breakpoint Condition Parser . evaluate ( input Field . get Text ( ) ) ;", "input Field . set Background ( Color . WHITE ) ; }", "catch ( final Invalid Formula Exception e ) {", "input Field . set Background ( Color . RED ) ; } }"]}
{"ids": "67444", "code": ["public void remove Ignored View ( View v ) {", "ignored Views . remove ( v ) ; }"]}
{"ids": "30872", "code": ["private static boolean ensure Current ( Leased Resource resource ) {", "return resource . get Expiration ( ) > System Time . time Millis ( ) ; }"]}
{"ids": "69280", "code": ["public void toggle Section Selected ( int section Index ) {", "set Section Selected ( section Index , ! is Section Selected ( section Index ) ) ; }"]}
{"ids": "49214", "code": ["void stop Scrolling Instance ( ) {", "if ( log . is Loggable ( Platform Logger . Level . FINER ) ) {", "log . finer ( STR_ + this ) ; }", "i scroller . stop ( ) ; }"]}
{"ids": "74046", "code": ["@ edu . umd . cs . findbugs . annotations . Suppress FB Warnings ( value = STR_ , justification = STR_ ) protected void new Internal Minute ( ) {", "double orig Current = m Current Intensity ;", "int orig State = m State ;", "int steps = get Number Of Steps ( ) ;", "if ( ( m Transition Duration > NUM_ ) && ( steps > NUM_ ) ) {", "double steps Per Minute = steps / m Transition Duration ;", "double step Size = NUM_ / ( double ) steps ;", "double intensity Diff Per Minute = step Size * steps Per Minute ;", "if ( Math . abs ( m Current Intensity - m Transition Target Intensity ) != NUM_ ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + m Transition Target Intensity + STR_ + m Current Intensity ) ; }", "if ( m Transition Target Intensity > m Current Intensity ) {", "m Current Intensity = m Current Intensity + intensity Diff Per Minute ;", "if ( m Current Intensity >= m Transition Target Intensity ) {", "m Current Intensity = m Transition Target Intensity ;", "if ( m Current Intensity >= get Max Intensity ( ) ) {", "m State = ON ; }", "else {", "m State = INTERMEDIATE ; } } }", "else {", "m Current Intensity = m Current Intensity - intensity Diff Per Minute ;", "if ( m Current Intensity <= m Transition Target Intensity ) {", "m Current Intensity = m Transition Target Intensity ;", "if ( m Current Intensity <= get Min Intensity ( ) ) {", "m State = OFF ; }", "else {", "m State = INTERMEDIATE ; } } }", "send Intensity ( m Current Intensity ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + m Transition Target Intensity + STR_ + m Current Intensity ) ; } } }", "if ( orig Current != m Current Intensity ) {", "fire Property Change ( STR_ , Double . value Of ( orig Current ) , Double . value Of ( m Current Intensity ) ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + orig Current + STR_ + m Current Intensity ) ; } }", "if ( orig State != m State ) {", "fire Property Change ( STR_ , Integer . value Of ( orig State ) , Integer . value Of ( m State ) ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + orig Current + STR_ + m Current Intensity ) ; } } }"]}
{"ids": "49989", "code": ["public void execute 2 ( Kahan Object in 1 , double in 2 ) {", "if ( Double . is Infinite ( in 1 . sum ) || Double . is Infinite ( in 2 ) ) {", "in 1 . set ( Double . is Infinite ( in 2 ) ? in 2 : in 1 . sum , NUM_ ) ;", "return ; }", "double correction = in 2 + in 1 . correction ;", "double sum = in 1 . sum + correction ;", "in 1 . set ( sum , correction - ( sum - in 1 . sum ) ) ; }"]}
{"ids": "68034", "code": ["@ Override public XML Event peek ( ) throws XML Stream Exception {", "log . log ( Level . FINE , STR_ ) ;", "if ( ! has Next ( ) ) {", "throw new XML Stream Exception ( STR_ ) ; }", "log . log ( Level . FINE , STR_ , next Event ) ;", "return next Event ; }"]}
{"ids": "7128", "code": ["public static String replace End Point ( String url , String end Point ) {", "return end Point + url . replace First ( DEFAULT ENDPOINT , STR_ ) ; }"]}
{"ids": "83949", "code": ["private void make Ok Path ( ) {", "path 1 . reset ( ) ;", "int w 2 = get Measured Width ( ) / NUM_ ;", "int h 2 = get Measured Height ( ) / NUM_ ;", "double a = Math . cos ( Math . to Radians ( NUM_ ) ) * get Radius ( ) ;", "double c = Math . sin ( Math . to Radians ( NUM_ ) ) * get Radius ( ) ;", "double l = Math . cos ( Math . to Radians ( NUM_ ) ) * NUM_ * a ;", "double b = Math . sin ( Math . to Radians ( NUM_ ) ) * l ;", "double m = Math . cos ( Math . to Radians ( NUM_ ) ) * l ;", "path 1 . move To ( ( float ) ( w 2 - a ) , ( float ) ( h 2 - c ) ) ;", "path 1 . line To ( ( float ) ( w 2 - a + m ) , ( float ) ( h 2 - c + Math . sin ( Math . to Radians ( NUM_ ) ) * l ) ) ;", "path 1 . line To ( ( float ) ( w 2 + a ) , ( float ) ( h 2 - c ) ) ;", "path Measure 1 . set Path ( path 1 , false ) ;", "m Mark Oklength = path Measure 1 . get Length ( ) ; }"]}
{"ids": "56863", "code": ["protected List < String > add Whitespace ( List < String > list ) {", "List < String > whitespace List = new Array List < > ( ) ;", "for ( String value : list ) {", "whitespace List . add ( add Whitespace ( value ) ) ; }", "return whitespace List ; }"]}
{"ids": "84969", "code": ["public static String compute Qualified Widget Type Name ( Node widget Node ) {", "if ( widget Node . get Node Type ( ) != Node . ELEMENT NODE ) {", "return null ; }", "String type Name = widget Node . get Local Name ( ) ;", "if ( type Name . length ( ) == NUM_ || Character . is Lower Case ( type Name . char At ( NUM_ ) ) ) {", "return null ; }", "String package Name = Ui Binder Utilities . get Package Name ( widget Node . get Namespace URI ( ) ) ;", "return package Name != null ? Java Utilities . get Qualified Type Name ( type Name , package Name ) : null ; }"]}
{"ids": "29870", "code": ["private static boolean process Ftyp Atom ( Parsable Byte Array atom Data ) {", "atom Data . set Position ( Atom . HEADER SIZE ) ;", "int major Brand = atom Data . read Int ( ) ;", "if ( major Brand == BRAND QUICKTIME ) {", "return true ; }", "atom Data . skip Bytes ( NUM_ ) ;", "while ( atom Data . bytes Left ( ) > NUM_ ) {", "if ( atom Data . read Int ( ) == BRAND QUICKTIME ) {", "return true ; } }", "return false ; }"]}
{"ids": "68241", "code": ["public String delete ( String url , final int expected Status Code ) {", "return delete ( url , Collections . < String , String > empty Map ( ) , expected Status Code ) ; }"]}
{"ids": "38096", "code": ["protected void running Sum ( Set < Map . Entry < Double , Double > > c , double value , double [ ] sums ) {", "double offset = CONST - Math . log ( m Width ) ;", "double log Factor = Math . log ( m Threshold ) - Math . log ( NUM_ - m Threshold ) ;", "double log Sum Of Weights = Math . log ( m Sum Of Weights ) ;", "Iterator < Map . Entry < Double , Double > > itr = c . iterator ( ) ;", "while ( itr . has Next ( ) ) {", "Map . Entry < Double , Double > entry = itr . next ( ) ;", "if ( entry . get Value ( ) > NUM_ ) {", "double diff = ( entry . get Key ( ) - value ) / m Width ;", "double log Density = offset - NUM_ * diff * diff ;", "double log Weight = Math . log ( entry . get Value ( ) ) ;", "sums [ NUM_ ] = log Of Sum ( sums [ NUM_ ] , log Weight + log Density ) ;", "sums [ NUM_ ] = log Of Sum ( sums [ NUM_ ] , log Weight ) ;", "if ( log Density + log Sum Of Weights < log Of Sum ( log Factor + sums [ NUM_ ] , log Density + sums [ NUM_ ] ) ) {", "break ; } } } }"]}
{"ids": "61925", "code": ["@ Override public Categorical Table copy ( ) {", "Map < Value , Double > new Table = new Hash Map < Value , Double > ( ) ;", "for ( Value v : table . key Set ( ) ) {", "new Table . put ( v , table . get ( v ) ) ; }", "return new Categorical Table ( variable , new Table ) ; }"]}
{"ids": "17087", "code": ["public Configuration sub Config ( String prefix , String key Prefix ) {", "Configuration sub = new Configuration ( ) ;", "add To Sub Conf ( sub , prefix . length ( ) > NUM_ ? prefix + STR_ + key Prefix : key Prefix ) ;", "return sub ; }"]}
{"ids": "15394", "code": ["public Map < String , String > map Name To Display Name ( Set < String > names ) throws SMS Exception , SSO Exception {", "final Map < String , String > map = new Hash Map < > ( names . size ( ) ) ;", "for ( String name : names ) {", "if ( sms Console Service Config . is Service Visible ( name ) ) {", "final Service Schema Manager service Schema Manager = service Schema Manager Factory . build ( name ) ;", "String display Name = get Localized Service Name ( service Schema Manager , name ) ;", "String resource Name = service Schema Manager . get Resource Name ( ) ;", "if ( ! name . equals ( display Name ) && ! String Utils . is Blank ( resource Name ) ) {", "map . put ( resource Name , display Name ) ; } } }", "return map ; }"]}
{"ids": "25325", "code": ["public static void queue Bitmap ( String key , Bitmap bmp ) {", "m Bitmap Queue . put ( key , bmp ) ; }"]}
{"ids": "3400", "code": ["public void add Listener ( After Server Start Listener listener ) {", "after Start Listeners . add ( listener ) ; }"]}
{"ids": "46833", "code": ["public Relation Notification ( String notif Type , Object source Obj , long sequence , long time Stamp , String message , String id , String type Name , Object Name object Name , List < Object Name > unreg M Bean List ) throws Illegal Argument Exception {", "super ( notif Type , source Obj , sequence , time Stamp , message ) ;", "if ( ! is Valid Basic Strict ( notif Type , source Obj , id , type Name ) || ! is Valid Create ( notif Type ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "relation Id = id ;", "relation Type Name = type Name ;", "relation Obj Name = safe Get Object Name ( object Name ) ;", "unregister M Bean List = safe Get Object Name List ( unreg M Bean List ) ; }"]}
{"ids": "37772", "code": ["protected double entropy ( double [ ] [ ] data Zs , double [ ] [ ] data Ws ) {", "double entropy = NUM_ ;", "int num Instances = data Zs . length ;", "for ( int j = NUM_ ; j < m num Classes ; j ++ ) {", "double m = NUM_ ;", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < num Instances ; i ++ ) {", "m += data Zs [ i ] [ j ] * data Ws [ i ] [ j ] ;", "sum += data Ws [ i ] [ j ] ; }", "m /= sum ;", "for ( int i = NUM_ ; i < num Instances ; i ++ ) {", "entropy += data Ws [ i ] [ j ] * Math . pow ( data Zs [ i ] [ j ] - m , NUM_ ) ; } }", "return entropy ; }"]}
{"ids": "84680", "code": ["protected void write Distribution ( Parameter parameter , boolean is Ref , XML Writer writer ) {", "switch ( parameter . prior Type ) {", "case UNIFORM PRIOR :", "String id = parameter . taxa Id + STR_ ;", "if ( is Ref ) {", "writer . write I Dref ( Uniform Distribution Model Parser . UNIFORM DISTRIBUTION MODEL , id ) ; }", "else {", "writer . write Open Tag ( Uniform Distribution Model Parser . UNIFORM DISTRIBUTION MODEL , new Attribute [ ] { new Attribute . Default < String > ( XML Parser . ID , id ) } ) ;", "writer . write Open Tag ( Uniform Distribution Model Parser . LOWER ) ;", "writer . write Text ( Double . to String ( parameter . uniform Lower ) ) ;", "writer . write Close Tag ( Uniform Distribution Model Parser . LOWER ) ;", "writer . write Open Tag ( Uniform Distribution Model Parser . UPPER ) ;", "writer . write Text ( Double . to String ( parameter . uniform Upper ) ) ;", "writer . write Close Tag ( Uniform Distribution Model Parser . UPPER ) ;", "writer . write Close Tag ( Uniform Distribution Model Parser . UNIFORM DISTRIBUTION MODEL ) ; }", "break ;", "case EXPONENTIAL PRIOR :", "writer . write Open Tag ( Exponential Distribution Model . EXPONENTIAL DISTRIBUTION MODEL ) ;", "writer . write Open Tag ( Distribution Model Parser . MEAN ) ;", "writer . write Text ( Double . to String ( parameter . mean ) ) ;", "writer . write Close Tag ( Distribution Model Parser . MEAN ) ;", "writer . write Open Tag ( Distribution Model Parser . OFFSET ) ;", "writer . write Text ( Double . to String ( parameter . offset ) ) ;", "writer . write Close Tag ( Distribution Model Parser . OFFSET ) ;", "writer . write Close Tag ( Exponential Distribution Model . EXPONENTIAL DISTRIBUTION MODEL ) ;", "break ;", "case NORMAL PRIOR :", "writer . write Open Tag ( Normal Distribution Model Parser . NORMAL DISTRIBUTION MODEL ) ;", "writer . write Open Tag ( Normal Distribution Model Parser . MEAN ) ;", "writer . write Text ( Double . to String ( parameter . mean ) ) ;", "writer . write Close Tag ( Normal Distribution Model Parser . MEAN ) ;", "writer . write Open Tag ( Normal Distribution Model Parser . STDEV ) ;", "writer . write Text ( Double . to String ( parameter . stdev ) ) ;", "writer . write Close Tag ( Normal Distribution Model Parser . STDEV ) ;", "writer . write Close Tag ( Normal Distribution Model Parser . NORMAL DISTRIBUTION MODEL ) ;", "break ;", "case LOGNORMAL PRIOR :", "writer . write Open Tag ( Log Normal Distribution Model Parser . LOGNORMAL DISTRIBUTION MODEL , new Attribute [ ] { new Attribute . Default < Boolean > ( Log Normal Distribution Model Parser . MEAN IN REAL SPACE , parameter . is Mean In Real Space ( ) ) , new Attribute . Default < Boolean > ( Log Normal Distribution Model Parser . STDEV IN REAL SPACE , parameter . is Mean In Real Space ( ) ) } ) ;", "writer . write Open Tag ( Log Normal Distribution Model Parser . MEAN ) ;", "writer . write Text ( Double . to String ( parameter . mean ) ) ;", "writer . write Close Tag ( Log Normal Distribution Model Parser . MEAN ) ;", "writer . write Open Tag ( Log Normal Distribution Model Parser . STDEV ) ;", "writer . write Text ( Double . to String ( parameter . stdev ) ) ;", "writer . write Close Tag ( Log Normal Distribution Model Parser . STDEV ) ;", "writer . write Open Tag ( Log Normal Distribution Model Parser . OFFSET ) ;", "writer . write Text ( Double . to String ( parameter . offset ) ) ;", "writer . write Close Tag ( Log Normal Distribution Model Parser . OFFSET ) ;", "writer . write Close Tag ( Log Normal Distribution Model Parser . LOGNORMAL DISTRIBUTION MODEL ) ;", "break ;", "case GAMMA PRIOR :", "writer . write Open Tag ( Gamma Distribution Model . GAMMA DISTRIBUTION MODEL ) ;", "writer . write Open Tag ( Distribution Model Parser . SHAPE ) ;", "writer . write Text ( Double . to String ( parameter . shape ) ) ;", "writer . write Close Tag ( Distribution Model Parser . SHAPE ) ;", "writer . write Open Tag ( Distribution Model Parser . SCALE ) ;", "writer . write Text ( Double . to String ( parameter . scale ) ) ;", "writer . write Close Tag ( Distribution Model Parser . SCALE ) ;", "writer . write Open Tag ( Distribution Model Parser . OFFSET ) ;", "writer . write Text ( Double . to String ( parameter . offset ) ) ;", "writer . write Close Tag ( Distribution Model Parser . OFFSET ) ;", "writer . write Close Tag ( Gamma Distribution Model . GAMMA DISTRIBUTION MODEL ) ;", "break ;", "default :", "throw new Illegal Argument Exception ( STR_ + parameter . get Name ( ) ) ; } }"]}
{"ids": "38550", "code": ["public void save Working Instances To File Q ( ) {", "if ( m IO Thread == null ) {", "m File Chooser . set Capabilities Filter ( m Filter Editor . get Capabilities Filter ( ) ) ;", "m File Chooser . set Accept All File Filter Used ( false ) ;", "int return Val = m File Chooser . show Save Dialog ( this ) ;", "if ( return Val == J File Chooser . APPROVE OPTION ) {", "Instances inst = new Instances ( m Instances ) ;", "inst . set Class Index ( m Att Visualize Panel . get Coloring Index ( ) ) ;", "save Instances To File ( m File Chooser . get Saver ( ) , inst ) ; }", "File Filter temp = m File Chooser . get File Filter ( ) ;", "m File Chooser . set Accept All File Filter Used ( true ) ;", "m File Chooser . set File Filter ( temp ) ; }", "else {", "J Option Pane . show Message Dialog ( this , STR_ + STR_ , STR_ , J Option Pane . WARNING MESSAGE ) ; } }"]}
{"ids": "60436", "code": ["private boolean adjust Indent ( ) {", "Alignment Impl alignment = Core Formatter Util . get Alignment ( my Current Block ) ;", "White Space white Space = my Current Block . get White Space ( ) ;", "if ( alignment == null || my Alignments To Skip . contains ( alignment ) ) {", "if ( white Space . contains Line Feeds ( ) ) {", "adjust Spacing By Indent Offset ( ) ; }", "else {", "white Space . arrange Spaces ( my Current Block . get Space Property ( ) ) ; }", "return true ; }", "Block Alignment Processor alignment Processor = ALIGNMENT PROCESSORS . get ( alignment . get Anchor ( ) ) ;", "if ( alignment Processor == null ) {", "LOG . error ( String . format ( STR_ , alignment . get Anchor ( ) ) ) ;", "return true ; }", "Block Alignment Processor . Context context = new Block Alignment Processor . Context ( my Document , alignment , my Current Block , my Alignment Mappings , my Backward Shifted Aligned Blocks , get Indent Options To Use ( my Current Block , my Default Indent Option ) , my Right Margin ) ;", "Block Alignment Processor . Result result = alignment Processor . apply Alignment ( context ) ;", "final Leaf Block Wrapper offset Responsible Block = alignment . get Offset Resp Block Before ( my Current Block ) ;", "switch ( result ) {", "case TARGET BLOCK PROCESSED NOT ALIGNED :", "return true ;", "case TARGET BLOCK ALIGNED :", "store Alignment Mapping ( ) ;", "return true ;", "case BACKWARD BLOCK ALIGNED :", "if ( offset Responsible Block == null ) {", "return true ; }", "Set < Leaf Block Wrapper > blocks Caused Realignment = new Hash Set < Leaf Block Wrapper > ( ) ;", "my Backward Shifted Aligned Blocks . clear ( ) ;", "my Backward Shifted Aligned Blocks . put ( offset Responsible Block , blocks Caused Realignment ) ;", "blocks Caused Realignment . add ( my Current Block ) ;", "store Alignment Mapping ( my Current Block , offset Responsible Block ) ;", "my Current Block = offset Responsible Block . get Next Block ( ) ;", "on Current Line Changed ( ) ;", "return false ;", "case RECURSION DETECTED :", "my Current Block = offset Responsible Block ;", "case UNABLE TO ALIGN BACKWARD BLOCK :", "my Alignments To Skip . add ( alignment ) ;", "return false ;", "default :", "return true ; } }"]}
{"ids": "33934", "code": ["@ Override public void append Code ( Type declaring Type , Type Tuple input Types , Type output Type , List < Variable > input Vars , String Builder b ) {", "b . append ( field . to Code ( declaring Type , input Vars ) ) ; }"]}
{"ids": "61994", "code": ["public Forward Planner ( Dialogue System system ) {", "this . system = system ; }"]}
{"ids": "44853", "code": ["private J Button add Button ( String text , Container container , float alignment ) {", "J Button button = new J Button ( text ) ;", "button . set Alignment X ( alignment ) ;", "container . add ( button ) ;", "return button ; }"]}
{"ids": "46578", "code": ["private boolean no Match For Tag In Attributes ( Attribute Set attr , HTML . Tag t , Object tag Value ) {", "if ( attr != null && attr . is Defined ( t ) ) {", "Object new Value = attr . get Attribute ( t ) ;", "if ( ( tag Value == null ) ? ( new Value == null ) : ( new Value != null && tag Value . equals ( new Value ) ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "56825", "code": ["public String business Object Data Key To String ( Business Object Data Key business Object Data Key ) {", "if ( business Object Data Key == null ) {", "return null ; }", "return business Object Data Key To String ( business Object Data Key . get Namespace ( ) , business Object Data Key . get Business Object Definition Name ( ) , business Object Data Key . get Business Object Format Usage ( ) , business Object Data Key . get Business Object Format File Type ( ) , business Object Data Key . get Business Object Format Version ( ) , business Object Data Key . get Partition Value ( ) , business Object Data Key . get Sub Partition Values ( ) , business Object Data Key . get Business Object Data Version ( ) ) ; }"]}
{"ids": "41492", "code": ["private Usage create Talk Usage ( Context context ) {", "if ( talk Usage != null ) {", "return talk Usage ; }", "Type Token < List < Usage > > token = new Type Token < List < Usage > > ( ) { } ;", "List < Usage > init Talk IO = Json Utils . parse Json File ( context , STR_ , token ) ;", "talk Usage = init Talk IO . get ( NUM_ ) ;", "return talk Usage ; }"]}
{"ids": "60288", "code": ["@ Nullable public Gr Call enclosing Call ( String name , Gdsl Members Holder Consumer consumer ) {", "final Psi Element place = consumer . get Place ( ) ;", "if ( place == null ) return null ;", "Gr Call call = Psi Tree Util . get Parent Of Type ( place , Gr Call . class , true ) ;", "if ( call == null ) return null ;", "while ( call != null && ! name . equals ( get Invoked Method Name ( call ) ) ) {", "call = Psi Tree Util . get Parent Of Type ( call , Gr Call . class , true ) ; }", "if ( call == null ) return null ;", "final Gr Argument List argument List = call . get Argument List ( ) ;", "if ( argument List != null ) {", "for ( Gr Expression arg : argument List . get Expression Arguments ( ) ) {", "if ( arg instanceof Gr Closable Block && Psi Tree Util . find Common Parent ( place , arg ) == arg ) {", "return call ; } } }", "if ( call instanceof Gr Method Call Expression ) {", "for ( Gr Expression arg : call . get Closure Arguments ( ) ) {", "if ( arg instanceof Gr Closable Block && Psi Tree Util . find Common Parent ( place , arg ) == arg ) {", "return call ; } } }", "return null ; }"]}
{"ids": "22174", "code": ["public static void gen Ovfenv Iso Image ( String ovfenv Prop KV Str , String iso File Path ) {", "byte [ ] b Ovfenv Prop KV Str = ovfenv Prop KV Str . get Bytes ( ) ;", "String prop File Path = STR_ ;", "File prop File = new File ( prop File Path ) ;", "try {", "File Utils . write Plain File ( prop File Path , b Ovfenv Prop KV Str ) ; }", "catch ( Exception e 1 ) {", "prop File . delete ( ) ;", "log . error ( STR_ , e 1 . get Message ( ) ) ;", "throw new Illegal State Exception ( STR_ ) ; }", "try {", "File iso File = new File ( iso File Path ) ;", "String [ ] gen ISO Image Command = { GENISO CMD , STR_ , STR_ , STR_ , prop File Path , STR_ , iso File Path , STR_ , STR_ } ;", "Exec . Result result = Exec . sudo ( CMD TIMEOUT , gen ISO Image Command ) ;", "if ( ! result . exited Normally ( ) || result . get Exit Value ( ) != NUM_ ) {", "log . error ( STR_ , result . get Exit Value ( ) , result . get Std Error ( ) ) ;", "throw new Illegal State Exception ( STR_ ) ; } }", "catch ( Exception e ) {", "throw e ; }", "finally {", "prop File . delete ( ) ; } }"]}
{"ids": "21021", "code": ["public static void create Actionable Event ( Db Client db Client , Event Utils . Event Code event Code , URI tenant , String name , String description , String warning , Data Object resource , List < URI > affected Resources , String approve Method , Object [ ] approve Parameters ) {", "create Actionable Event ( db Client , event Code , tenant , name , description , warning , resource , affected Resources , approve Method , approve Parameters , null , null ) ; }"]}
{"ids": "85338", "code": ["public Rational ( Byte Provider byte Provider ) throws IO Exception {", "MXF Property Populator . populate Field ( byte Provider , this , STR_ ) ;", "MXF Property Populator . populate Field ( byte Provider , this , STR_ ) ; }"]}
{"ids": "46854", "code": ["public synchronized void remove Notifications ( String type ) throws Instance Not Found Exception {", "Vector < Integer > v = get Notification I Ds ( type ) ;", "if ( v . is Empty ( ) ) throw new Instance Not Found Exception ( STR_ ) ;", "for ( Integer i : v ) remove Notification ( i ) ; }"]}
{"ids": "70628", "code": ["private void unify Via Atom ( Atomic parent Atom ) {", "Atomic child Atom = get Rule Conclusion Atom ( ) ;", "Query parent = parent Atom . get Parent Query ( ) ;", "Map < String , String > unifiers = child Atom . get Unifiers ( parent Atom ) ;", "head . unify ( unifiers ) ;", "body . unify ( unifiers ) ;", "Set < String > child F Vs = body . get Var Set ( ) ;", "Set < String > parent B Vs = parent Atom . get Var Names ( ) ;", "Set < String > parent Vars = parent . get Var Set ( ) ;", "parent B Vs . for Each ( null ) ;", "child F Vs . for Each ( null ) ; }"]}
{"ids": "86167", "code": ["static void add Uuid ( Ssf Node node , UUID uuid ) {", "node . set ( STR_ , uuid . get Most Significant Bits ( ) ) ;", "node . set ( STR_ , uuid . get Least Significant Bits ( ) ) ; }"]}
{"ids": "86577", "code": ["public Flux Concat Array < T > concat Additional Source First ( Publisher < ? extends T > source ) {", "int n = array . length ;", "@ Suppress Warnings ( STR_ ) Publisher < ? extends T > [ ] new Array = new Publisher [ n + NUM_ ] ;", "System . arraycopy ( array , NUM_ , new Array , NUM_ , n ) ;", "new Array [ NUM_ ] = source ;", "return new Flux Concat Array < > ( delay Error , new Array ) ; }"]}
{"ids": "40266", "code": ["public void shutdown ( ) {", "shutdown Server Thread ( ) ;", "shutdown Sessions ( ) ; }"]}
{"ids": "25996", "code": ["private boolean is Local Id ( String local Id ) {", "if ( ! local Id . starts With ( STR_ ) ) {", "return false ; }", "for ( int i = NUM_ ; i < local Id . length ( ) ; ++ i ) {", "char c = local Id . char At ( i ) ;", "if ( ! ( c >= STR_ && c <= STR_ ) && ! ( c >= STR_ && c <= STR_ ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "3568", "code": ["public Server Socket Bar bind ( Server Socket Bar ss ) throws Config Exception , IO Exception {", "synchronized ( ssl Init Lock ) {", "if ( std Server Socket != null ) throw new Config Exception ( L . l ( STR_ ) ) ;", "try {", "init Config ( ) ; }", "catch ( Runtime Exception e ) {", "e . print Stack Trace ( ) ;", "throw e ; }", "std Server Socket = ss ;", "init SSL ( ) ;", "return this ; } }"]}
{"ids": "51821", "code": ["private void reset Output Builders ( ) {", "ansi = Ansi . ansi ( ) ;", "string Builder = new String Builder ( ) ; }"]}
{"ids": "59379", "code": ["public String read ( Byte Buffer buf , Dictionary Cache dict ) {", "String Builder out = new String Builder ( ) ;", "if ( pre != null ) out . append ( pre ) ;", "if ( type == VOID ) return out . to String ( ) ;", "if ( type == NULL ) {", "out . append ( STR_ ) ;", "return out . to String ( ) ; }", "if ( type == BYTE ) {", "out . append ( buf . get ( ) ) ;", "return out . to String ( ) ; }", "if ( type == SHORT ) {", "out . append ( buf . get Short ( ) ) ;", "return out . to String ( ) ; }", "if ( type == INT ) {", "out . append ( buf . get Int ( ) ) ;", "return out . to String ( ) ; }", "if ( type == LONG ) {", "out . append ( buf . get Long ( ) ) ;", "return out . to String ( ) ; }", "if ( type == DOUBLE ) {", "out . append ( buf . get Double ( ) ) ;", "return out . to String ( ) ; }", "if ( type == BOOLEAN ) {", "out . append ( ( buf . get ( ) == NUM_ ? STR_ : STR_ ) ) ;", "return out . to String ( ) ; }", "if ( type == STRING ) {", "short pos = buf . get Short ( ) ;", "if ( pos > - NUM_ ) {", "out . append ( STR_ ) ;", "out . append ( dict . get ( pos ) ) ;", "out . append ( STR_ ) ; }", "else {", "int size = NUM_ ;", "int val = buf . get ( ) & NUM_ ;", "while ( val == NUM_ ) {", "size += val ;", "val = buf . get ( ) & NUM_ ; }", "size += val ;", "byte [ ] data = new byte [ size ] ;", "buf . get ( data ) ;", "out . append ( STR_ ) ;", "out . append ( new String ( data , Standard Charsets . UTF 8 ) ) ;", "out . append ( STR_ ) ; }", "return out . to String ( ) ; }", "return null ; }"]}
{"ids": "24092", "code": ["public void remove Resource Listener ( Resource Events Listener listener ) {", "resource Listeners . remove ( listener ) ; }"]}
{"ids": "71989", "code": ["public String build Java Vendor ( ) {", "return properties . get Property ( STR_ ) ; }"]}
{"ids": "47052", "code": ["final void treeify ( Node < K , V > [ ] tab ) {", "Tree Node < K , V > root = null ;", "for ( Tree Node < K , V > x = this , next ; x != null ; x = next ) {", "next = ( Tree Node < K , V > ) x . next ;", "x . left = x . right = null ;", "if ( root == null ) {", "x . parent = null ;", "x . red = false ;", "root = x ; }", "else {", "K k = x . key ;", "int h = x . hash ;", "Class < ? > kc = null ;", "for ( Tree Node < K , V > p = root ; ; ) {", "int dir , ph ;", "K pk = p . key ;", "if ( ( ph = p . hash ) > h ) dir = - NUM_ ;", "else if ( ph < h ) dir = NUM_ ;", "else if ( ( kc == null && ( kc = comparable Class For ( k ) ) == null ) || ( dir = compare Comparables ( kc , k , pk ) ) == NUM_ ) dir = tie Break Order ( k , pk ) ;", "Tree Node < K , V > xp = p ;", "if ( ( p = ( dir <= NUM_ ) ? p . left : p . right ) == null ) {", "x . parent = xp ;", "if ( dir <= NUM_ ) xp . left = x ;", "else xp . right = x ;", "root = balance Insertion ( root , x ) ;", "break ; } } } }", "move Root To Front ( tab , root ) ; }"]}
{"ids": "70392", "code": ["private void add Category To Tree ( Default Mutable Tree Node node , String [ ] names ) {", "if ( names . length == NUM_ ) {", "return ; }", "boolean matched = false ;", "for ( @ Suppress Warnings ( STR_ ) Enumeration < Default Mutable Tree Node > e = node . children ( ) ; e . has More Elements ( ) ; ) {", "Default Mutable Tree Node child Node = e . next Element ( ) ;", "String node Name = ( String ) child Node . get User Object ( ) ;", "if ( node Name . equals ( names [ NUM_ ] ) ) {", "if ( names . length > NUM_ ) {", "add Category To Tree ( child Node , Arrays . copy Of Range ( names , NUM_ , names . length ) ) ;", "matched = true ; }", "else { } } }", "if ( ! matched ) {", "Default Mutable Tree Node root = node ;", "for ( int i = NUM_ ; i < names . length ; i ++ ) {", "Default Mutable Tree Node new Node = new Default Mutable Tree Node ( names [ i ] ) ;", "root . add ( new Node ) ;", "root = new Node ; } } }"]}
{"ids": "53811", "code": ["private void edit Note ( int note Id ) {", "hide Soft Keyboard ( ) ;", "Intent intent = new Intent ( Main Activity . this , Note Activity . class ) ;", "intent . set Flags ( Intent . FLAG ACTIVITY CLEAR TASK ) ;", "intent . put Extra ( STR_ , String . value Of ( note Id ) ) ;", "start Activity ( intent ) ; }"]}
{"ids": "33383", "code": ["public final Entry add Entry ( Position input Position , Position output Position ) {", "Entry entry = new Entry ( input Position , output Position ) ;", "entries . add ( entry ) ;", "return entry ; }"]}
{"ids": "75099", "code": ["public void un Hide Action Bar ( View view ) {", "if ( toolbar Auto Hider != null ) toolbar Auto Hider . show Component ( ) ; }"]}
{"ids": "53375", "code": ["public static String format Time Delta ( long time , Char Sequence sep ) {", "final String Builder sb = new String Builder ( ) ;", "final Formatter fmt = new Formatter ( sb ) ;", "for ( int i = TIME UNIT SIZES . length - NUM_ ; i >= NUM_ ; -- i ) {", "if ( i == NUM_ && sb . length ( ) > NUM_ ) {", "continue ; }", "if ( sb . length ( ) > NUM_ ) {", "sb . append ( sep ) ; }", "final long ac Value = time / TIME UNIT SIZES [ i ] ;", "time = time % TIME UNIT SIZES [ i ] ;", "if ( ! ( ac Value == NUM_ && sb . length ( ) == NUM_ ) ) {", "fmt . format ( STR_ + TIME UNIT DIGITS [ i ] + STR_ , Long . value Of ( ac Value ) , TIME UNIT NAMES [ i ] ) ; } }", "fmt . close ( ) ;", "return sb . to String ( ) ; }"]}
{"ids": "71001", "code": ["public void run ( ) {", "Log . d ( LOG , STR_ + sample Rate + STR_ + channels + STR_ + buffer Size In Bytes + STR_ + buffer Size In Ms + STR_ ) ;", "is Playing = false ;", "Audio Track atrack = null ;", "try {", "atrack = new Audio Track ( Audio Manager . STREAM MUSIC , sample Rate , channels == NUM_ ? Audio Format . CHANNEL CONFIGURATION MONO : Audio Format . CHANNEL CONFIGURATION STEREO , Audio Format . ENCODING PCM 16 BIT , buffer Size In Bytes , Audio Track . MODE STREAM ) ;", "atrack . set Playback Position Update Listener ( this ) ;", "atrack . set Position Notification Period ( ms To Samples ( NUM_ , sample Rate , channels ) ) ;", "if ( player Callback != null ) player Callback . player Audio Track Created ( atrack ) ;", "this . audio Track = atrack ; }", "catch ( Throwable t ) {", "Log . e ( LOG , STR_ + t ) ;", "stop ( ) ;", "if ( player Callback != null ) player Callback . player Exception ( t ) ; }", "while ( ! stopped ) {", "int ln = acquire Samples ( ) ;", "if ( stopped || ln == NUM_ ) {", "release Samples ( ) ;", "break ; }", "int written Now = NUM_ ;", "do {", "if ( written Now != NUM_ ) {", "Log . d ( LOG , STR_ ) ;", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) { } }", "int written = atrack . write ( lsamples , written Now , ln ) ;", "if ( written < NUM_ ) {", "Log . e ( LOG , STR_ + written ) ;", "stopped = true ;", "break ; }", "written Total += written ;", "int buffered = written Total - atrack . get Playback Head Position ( ) * channels ;", "if ( ! stopped && ! is Playing ) {", "if ( buffered * NUM_ >= buffer Size In Bytes ) {", "Log . d ( LOG , STR_ + buffered + STR_ ) ;", "atrack . play ( ) ;", "is Playing = true ; }", "else {", "Log . d ( LOG , STR_ ) ; } }", "written Now += written ;", "ln -= written ; }", "while ( ln > NUM_ && ! stopped ) ;", "release Samples ( ) ; }", "if ( ! stopped && stopped By EOF ) wait For Last Tone ( ) ;", "if ( is Playing ) atrack . pause ( ) ;", "atrack . flush ( ) ;", "atrack . release ( ) ;", "stopped = true ;", "Log . d ( LOG , STR_ ) ; }"]}
{"ids": "86639", "code": ["public static double [ ] deconvolve ( final double [ ] p , final double rate ) {", "final double [ ] r = Arrays . copy Of ( p , p . length ) ;", "for ( int k = NUM_ ; k < p . length ; k ++ ) {", "for ( int j = NUM_ ; j < p . length ; j ++ ) {", "if ( k + j < p . length ) {", "r [ k + j ] -= rate * p [ k ] * p [ j ] ; } } }", "double sum = NUM_ ;", "for ( final double q : r ) {", "sum += q ; }", "sum = NUM_ / sum ;", "for ( int k = NUM_ ; k < r . length ; k ++ ) {", "r [ k ] *= sum ; }", "return r ; }"]}
{"ids": "46288", "code": ["private synchronized void read Object ( java . io . Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "init ( get Name ( ) ) ; }"]}
{"ids": "7957", "code": ["public static double calculate Column Total ( Values 2 D data , int column , int [ ] valid Rows ) {", "Param Checks . null Not Permitted ( data , STR_ ) ;", "double total = NUM_ ;", "int row Count = data . get Row Count ( ) ;", "for ( int v = NUM_ ; v < valid Rows . length ; v ++ ) {", "int row = valid Rows [ v ] ;", "if ( row < row Count ) {", "Number n = data . get Value ( row , column ) ;", "if ( n != null ) {", "total += n . double Value ( ) ; } } }", "return total ; }"]}
{"ids": "29156", "code": ["public boolean open Analysis ( File f , Save Type save Type ) {", "if ( ! f . exists ( ) || ! f . can Read ( ) ) {", "throw new Illegal Argument Exception ( STR_ + f . get Path ( ) ) ; }", "main Frame Load Save Helper . prepare For File Load ( f , save Type ) ;", "main Frame Load Save Helper . load Analysis ( f ) ;", "return true ; }"]}
{"ids": "84911", "code": ["protected void draw Normal Message ( Draw Handler draw Handler , Point Double send , Point Double receive , Relation Drawer . Arrow End Type arrow End Type , boolean fill Arrow , Drawing Info drawing Info ) {", "Line line = new Line ( send , receive ) ;", "draw Handler . draw Line ( line ) ;", "draw Handler . set Line Type ( Line Type . SOLID ) ;", "Relation Drawer . draw Arrow To Line ( receive , draw Handler , line , false , arrow End Type , fill Arrow , false ) ;", "double height = send . y - drawing Info . get Vertical Start ( send Tick ) ;", "double top Left X ;", "Align Horizontal h Alignment ;", "if ( from == get First Lifeline ( ) ) {", "top Left X = send . x ;", "h Alignment = Align Horizontal . LEFT ; }", "else {", "top Left X = receive . x ;", "h Alignment = Align Horizontal . RIGHT ; }", "if ( duration == NUM_ ) {", "h Alignment = Align Horizontal . CENTER ; }", "top Left X += LIFELINE TEXT PADDING ;", "Text Splitter . draw Text ( draw Handler , text Lines , top Left X , send . y - height , Math . abs ( send . x - receive . x ) - LIFELINE TEXT PADDING * NUM_ , height , h Alignment , Align Vertical . BOTTOM ) ; }"]}
{"ids": "73682", "code": ["private void kill Consist ( ) {", "if ( valid Loco Adr ( loco Text Field 1 . get Text ( ) ) < NUM_ ) {", "return ; }", "int loco Addr = get Loco Addr ( loco Text Field 1 , adr Button 1 ) ;", "send Nce Binary Command ( loco Addr , Nce Binary Command . LOCO CMD KILL CONSIST , ( byte ) NUM_ ) ; }"]}
{"ids": "46102", "code": ["public Listen Key start Listening ( ) throws IO Exception {", "return start Listening ( null , NUM_ ) ; }"]}
{"ids": "43535", "code": ["@ Nonnull public static Set < Flag > parse ( @ Nonnegative final int bitmask ) {", "Check . not Negative ( bitmask , STR_ ) ;", "final Set < Flag > flags = new Hash Set < Flag > ( ) ;", "for ( final Flag flag : values ( ) ) {", "if ( ( bitmask & flag . get Number ( ) ) != NUM_ ) {", "flags . add ( flag ) ; } }", "return flags ; }"]}
{"ids": "46988", "code": ["@ Suppress Warnings ( STR_ ) private void parse ( ) throws SAX Exception , IO Exception {", "init ( ) ;", "try {", "m Hand Cont . set Document Locator ( this ) ;", "m Hand Cont . start Document ( ) ;", "if ( m Ph != PH MISC DTD ) {", "m Ph = PH MISC DTD ; }", "int evt = EV NULL ;", "do {", "wsskip ( ) ;", "switch ( evt = step ( ) ) {", "case EV ELM :", "case EV ELMS :", "m Ph = PH DOCELM ;", "break ;", "case EV COMM :", "case EV PI :", "break ;", "case EV DTD :", "if ( m Ph >= PH DTD MISC ) {", "panic ( FAULT ) ; }", "m Ph = PH DTD MISC ;", "break ;", "default :", "panic ( FAULT ) ; } }", "while ( m Ph < PH DOCELM ) ;", "do {", "switch ( evt ) {", "case EV ELM :", "case EV ELMS :", "if ( m Is NS Aware == true ) {", "m Hand Cont . start Element ( m Elm . value , m Elm . name , STR_ , m Attrs ) ; }", "else {", "m Hand Cont . start Element ( STR_ , STR_ , m Elm . name , m Attrs ) ; }", "if ( evt == EV ELMS ) {", "evt = step ( ) ;", "break ; }", "case EV ELME :", "if ( m Is NS Aware == true ) {", "m Hand Cont . end Element ( m Elm . value , m Elm . name , STR_ ) ; }", "else {", "m Hand Cont . end Element ( STR_ , STR_ , m Elm . name ) ; }", "while ( m Pref . list == m Elm ) {", "m Hand Cont . end Prefix Mapping ( m Pref . name ) ;", "m Pref = del ( m Pref ) ; }", "m Elm = del ( m Elm ) ;", "if ( m Elm == null ) {", "m Ph = PH DOCELM MISC ; }", "else {", "evt = step ( ) ; }", "break ;", "case EV TEXT :", "case EV WSPC :", "case EV CDAT :", "case EV COMM :", "case EV PI :", "case EV ENT :", "evt = step ( ) ;", "break ;", "default :", "panic ( FAULT ) ; } }", "while ( m Ph == PH DOCELM ) ;", "do {", "if ( wsskip ( ) == EOS ) {", "break ; }", "switch ( step ( ) ) {", "case EV COMM :", "case EV PI :", "break ;", "default :", "panic ( FAULT ) ; } }", "while ( m Ph == PH DOCELM MISC ) ;", "m Ph = PH AFTER DOC ; }", "catch ( SAX Exception saxe ) {", "throw saxe ; }", "catch ( IO Exception ioe ) {", "throw ioe ; }", "catch ( Runtime Exception rte ) {", "throw rte ; }", "catch ( Exception e ) {", "panic ( e . to String ( ) ) ; }", "finally {", "m Hand Cont . end Document ( ) ;", "cleanup ( ) ; } }"]}
{"ids": "81134", "code": ["public void add Match String ( String match String ) {", "match Strings . add ( match String ) ; }"]}
{"ids": "9015", "code": ["public String time Ago ( final long millis ) {", "return time ( System . current Time Millis ( ) - millis ) ; }"]}
{"ids": "34044", "code": ["public static byte [ ] hex String To Byte Array ( String input ) {", "if ( ( input == null ) || ( input . length ( ) % NUM_ != NUM_ ) ) {", "throw new Illegal Argument Exception ( STR_ + STR_ + input ) ; }", "byte [ ] output = new byte [ input . length ( ) / NUM_ ] ;", "for ( int i = NUM_ ; i < output . length ; i ++ ) {", "output [ i ] = ( byte ) ( ( Character . digit ( input . char At ( i * NUM_ ) , NUM_ ) << NUM_ ) + Character . digit ( input . char At ( i * NUM_ + NUM_ ) , NUM_ ) ) ; }", "return output ; }"]}
{"ids": "20394", "code": ["private boolean stop Tracking Job ( Job Status job Status ) {", "boolean removed ;", "boolean rocking ;", "synchronized ( m Jobs ) {", "removed = m Jobs . remove ( job Status ) ;", "rocking = m Ready To Rock ; }", "if ( removed && rocking ) {", "for ( int i = NUM_ ; i < m Controllers . size ( ) ; i ++ ) {", "State Controller controller = m Controllers . get ( i ) ;", "controller . maybe Stop Tracking Job ( job Status ) ; } }", "return removed ; }"]}
{"ids": "83341", "code": ["public double coefficient Of Variance ( ) {", "return Math . sqrt ( variance ( ) ) / mean ( ) ; }"]}
{"ids": "60174", "code": ["public Skeleton Version Checker ( int default Version ) {", "my Explicit Version = create Tree Map ( ) ;", "my Default Version = default Version ;", "load ( ) ; }"]}
{"ids": "14260", "code": ["@ Override public Attribute Schema Impl upgrade Attribute ( Attribute Schema Impl new Attr ) throws Upgrade Exception {", "return update Default Values ( new Attr , Collections . singleton ( OLDEST VERSION ) ) ; }"]}
{"ids": "62257", "code": ["public static String to Dalvik Name ( String canonical Name ) {", "final boolean is Array = ( canonical Name . char At ( NUM_ ) == STR_ ) ;", "if ( is Array ) {", "return canonical Name . replace ( STR_ , STR_ ) ; }", "else {", "if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else if ( canonical Name . equals ( STR_ ) ) return STR_ ;", "else return STR_ + canonical Name . replace ( STR_ , STR_ ) + STR_ ; } }"]}
{"ids": "23802", "code": ["public void unregister Client ( Client Proxy Membership ID proxy ID , Acceptor Impl acceptor , boolean client Disconnected Cleanly ) {", "unregister Client ( proxy ID ) ;", "if ( acceptor != null ) {", "Cache Client Notifier ccn = acceptor . get Cache Client Notifier ( ) ;", "if ( ccn != null ) {", "try {", "ccn . unregister Client ( proxy ID , client Disconnected Cleanly ) ; }", "catch ( Cancel Exception ignore ) { } } } }"]}
{"ids": "75543", "code": ["private String double Quotes Handling ( String resource ) {", "return resource . replace All ( STR_ , Matcher . quote Replacement ( STR_ ) ) ; }"]}
{"ids": "26878", "code": ["public static int allocate New Container ( Array List < Container > containers , Resource capacity , int padding Percentage ) {", "containers . add ( new Container ( capacity , padding Percentage ) ) ;", "return containers . size ( ) ; }"]}
{"ids": "8929", "code": ["protected String do Wait For Path ( String file Path ) {", "String path = null ;", "long wait Time Millis = NUM_ ;", "assert True ( STR_ + file Path + STR_ , m Sm . is Obb Mounted ( file Path ) ) ;", "while ( path == null ) {", "try {", "Thread . sleep ( WAIT TIME INCR ) ;", "wait Time Millis += WAIT TIME INCR ;", "if ( wait Time Millis > MAX WAIT TIME ) {", "fail ( STR_ + file Path ) ; } }", "catch ( Interrupted Exception e ) { }", "path = m Sm . get Mounted Obb Path ( file Path ) ; }", "Log . i ( LOG TAG , STR_ + path ) ;", "return path ; }"]}
{"ids": "21929", "code": ["@ Override protected boolean is Zone Level Resource ( ) {", "return false ; }"]}
{"ids": "19796", "code": ["private void validate Message ( String expected Type , String type , long return Code , String service , String payload ) throws Replicator Exception {", "if ( ! type . equals ( expected Type ) ) {", "throw new Replicator Exception ( STR_ + Protocol . TYPE FILTERED + STR_ + type + STR_ ) ; }", "else if ( return Code != NUM_ ) {", "throw new Replicator Exception ( STR_ + return Code + STR_ + payload ) ; }", "else if ( ! service . equals ( message Generator . get Service ( ) ) ) {", "throw new Replicator Exception ( STR_ + service + STR_ + message Generator . get Service ( ) + STR_ ) ; } }"]}
{"ids": "66569", "code": ["private void close Databases ( ) {", "s logger . log ( Level . INFO , STR_ ) ;", "s logger . log ( Level . INFO , STR_ ) ;", "m source . close ( ) ;", "m target . close ( ) ;", "m source . reset ( ) ;", "m source = null ;", "m target . reset ( ) ;", "m target = null ;", "m direction = null ;", "m object Type = null ;", "m object Types = null ;", "m source Map = null ;", "m target Map = null ;", "m object List = new Array List < String > ( ) ;", "m tracking List = new Array List < String > ( ) ;", "m temp Indexes = null ;", "m counter Prg = null ;", "m counter Drp = null ;", "m counter Upd = null ;", "m counter Add = null ;", "m total Prg = null ;", "m total Drp = null ;", "m total Upd = null ;", "m total Add = null ;", "m detail Type = null ;", "m detail Types = null ;", "m detail Counter Drp = null ;", "m detail Counter Upd = null ;", "m detail Counter Add = null ;", "System . gc ( ) ; }"]}
{"ids": "64510", "code": ["public static byte [ ] MD 5 ( final byte [ ] message , final int offset , final int length ) {", "Message Digest digest ;", "try {", "digest = Message Digest . get Instance ( STR_ ) ;", "digest . update ( message , offset , length ) ;", "final byte [ ] md 5 = digest . digest ( ) ;", "return md 5 ; }", "catch ( final No Such Algorithm Exception e ) {", "if ( Cfg . EXCEPTION ) {", "Check . log ( e ) ; } }", "return null ; }"]}
{"ids": "69407", "code": ["private int run Metastore Compare Job ( Optional < Path > input Table List Path , Path output Path ) throws Interrupted Exception , IO Exception , Class Not Found Exception , Template Render Exception {", "LOG . info ( STR_ ) ;", "int result ;", "if ( input Table List Path . is Present ( ) ) {", "result = run Metastore Compare Job With Text Input ( input Table List Path . get ( ) , output Path ) ; }", "else {", "result = run Metastore Compare Job ( output Path ) ; }", "if ( result == NUM_ ) {", "LOG . info ( STR_ + STR_ + Velocity Utils . render Template ( STEP 1 HQL TEMPLATE , velocity Context ) ) ; }", "return result ; }"]}
{"ids": "14983", "code": ["public void delete Sub People Containers ( Set people Containers ) throws AM Exception , SSO Exception {", "Iterator iter = people Containers . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String people Container DN = ( String ) iter . next ( ) ;", "AM People Container people Container = new AM People Container Impl ( super . token , people Container DN ) ;", "people Container . delete ( ) ; } }"]}
{"ids": "80749", "code": ["private void add Error Message ( String message ) {", "if ( message != null ) {", "m error Messages . append ( message ) ; }", "m error Messages . append ( STR_ ) ; }"]}
{"ids": "59979", "code": ["public void write ( String key , byte [ ] new Value ) throws Exception {", "Map < String , byte [ ] > entry = new Hash Map < > ( ) ;", "entry . put ( key , new Value ) ;", "write ( entry ) ; }"]}
{"ids": "83141", "code": ["private boolean both Links Have Same Link Stats ( Link link A , Link link B ) {", "boolean both Links Have Same Link Stats = true ;", "if ( link A . get Freespeed ( ) != link B . get Freespeed ( ) ) {", "both Links Have Same Link Stats = false ; }", "if ( link A . get Capacity ( ) != link B . get Capacity ( ) ) {", "both Links Have Same Link Stats = false ; }", "return both Links Have Same Link Stats ; }"]}
{"ids": "1745", "code": ["public String generate Sanitized Id ( ) {", "String result = generate Id ( ) ;", "result = result . replace ( STR_ , STR_ ) ;", "result = result . replace ( STR_ , STR_ ) ;", "result = result . replace ( STR_ , STR_ ) ;", "return result ; }"]}
{"ids": "42859", "code": ["private Object parse Element ( Node element ) throws Xml Parse Exception {", "try {", "return parse Element Raw ( element ) ; }", "catch ( Exception e ) {", "throw new Xml Parse Exception ( STR_ + element . get Node Name ( ) , e ) ; } }"]}
{"ids": "8637", "code": ["public static String format ( Money money ) {", "long micro Amount = NUM_ ;", "if ( money != null ) {", "micro Amount = money . get Micro Amount ( ) ; }", "else {", "return PLACEHOLDER NULL ; }", "double amount = ( double ) micro Amount / MICRO UNITS ;", "return String . format ( FORMAT MONEY , amount ) ; }"]}
{"ids": "59900", "code": ["public void log Warning ( String message ) {", "logger . warning ( log Prefix + message ) ; }"]}
{"ids": "63862", "code": ["public static String read As String ( Input Stream is ) throws IO Exception {", "String Buffer buf = new String Buffer ( ) ;", "byte [ ] b = new byte [ NUM_ ] ;", "int nread = - NUM_ ;", "while ( ( nread = is . read ( b ) ) >= NUM_ ) {", "String s = new String ( b , NUM_ , nread ) ;", "buf . append ( s ) ; }", "return buf . to String ( ) ; }"]}
{"ids": "69951", "code": ["public static synchronized void unregister Transaction Service Plugin ( Transaction Service Plugin l ) {", "if ( service != null ) {", "service . remove TS Listener ( l ) ; }", "ts Listeners List . remove ( l ) ; }"]}
{"ids": "38408", "code": ["protected static void isort ( int level [ ] , float BC [ ] ) {", "float temp ;", "int temp 2 ;", "for ( int i = NUM_ ; i < BC . length - NUM_ ; i ++ ) {", "int j = i ;", "temp = BC [ j + NUM_ ] ;", "temp 2 = level [ j + NUM_ ] ;", "if ( temp == NUM_ ) {", "continue ; }", "int prej = j + NUM_ ;", "while ( j > - NUM_ && ( temp < BC [ j ] || BC [ j ] == NUM_ ) ) {", "if ( BC [ j ] == NUM_ ) {", "j -- ;", "continue ; }", "else {", "BC [ prej ] = BC [ j ] ;", "level [ prej ] = level [ j ] ;", "prej = j ;", "j -- ; } }", "BC [ prej ] = temp ;", "level [ prej ] = temp 2 ; } }"]}
{"ids": "11416", "code": ["public void find And Init ( Object some Obj ) {", "if ( some Obj instanceof com . bbn . openmap . Map Bean ) {", "logger . fine ( STR_ ) ;", "set Map Bean ( ( Map Bean ) some Obj ) ; } }"]}
{"ids": "81950", "code": ["public void remove All Layers ( ) {", "layers . remove All Elements ( ) ;", "refresh Layers = true ;", "super . repaint ( ) ; }"]}
{"ids": "11212", "code": ["private void write Object ( Object Output Stream oos ) throws IO Exception {", "oos . default Write Object ( ) ;", "write Stroke ( oos , stroke , OM Graphic Adapter . BASIC STROKE ) ;", "write Texture Mask ( oos , texture Mask ) ; }"]}
{"ids": "35214", "code": ["public Reflective Attribute ( Class < O > object Type , Class < A > field Type , String field Name ) {", "super ( object Type , field Type , field Name ) ;", "Field field ;", "try {", "field = get Field ( object Type , field Name ) ;", "if ( ! field . is Accessible ( ) ) {", "field . set Accessible ( true ) ; } }", "catch ( Exception e ) {", "throw new Illegal State Exception ( STR_ + field Name + STR_ + object Type . get Name ( ) + STR_ ) ; }", "if ( ! field Type . is Assignable From ( field . get Type ( ) ) ) {", "throw new Illegal State Exception ( STR_ + field Name + STR_ + field . get Type ( ) + STR_ + object Type . get Name ( ) + STR_ + field Type . get Name ( ) ) ; }", "this . field = field ; }"]}
{"ids": "55606", "code": ["private void process Event ( Event Log Control check , final String name , final DTN Host host 1 , final DTN Host host 2 , final Message message ) {", "String desc String ;", "if ( ! check . show Event ( ) ) {", "return ; }", "desc String = name + STR_ + ( host 1 != null ? host 1 : STR_ ) + ( host 2 != null ? ( HOST DELIM + host 2 ) : STR_ ) + ( message != null ? STR_ + message : STR_ ) ;", "if ( reg Exp != null && ! desc String . matches ( reg Exp ) ) {", "return ; }", "if ( check . pause On Event ( ) ) {", "gui . set Paused ( true ) ;", "if ( host 1 != null ) {", "gui . set Focus ( host 1 ) ; } }", "add Event ( name , host 1 , host 2 , message , check . pause On Event ( ) ) ; }"]}
{"ids": "24114", "code": ["public boolean remove Membership Listener ( Membership Listener listener ) {", "return membership Listeners . remove ( listener ) != null ; }"]}
{"ids": "33461", "code": ["public static Uri add Message To Uri ( Content Resolver resolver , Uri uri , String address , String body , String subject , Long date , boolean read , boolean delivery Report , long thread Id ) {", "Content Values values = new Content Values ( NUM_ ) ;", "values . put ( ADDRESS , address ) ;", "if ( date != null ) {", "values . put ( DATE , date ) ; }", "values . put ( READ , read ? Integer . value Of ( NUM_ ) : Integer . value Of ( NUM_ ) ) ;", "values . put ( SUBJECT , subject ) ;", "values . put ( BODY , body ) ;", "if ( delivery Report ) {", "values . put ( STATUS , STATUS PENDING ) ; }", "if ( thread Id != - NUM_ ) {", "values . put ( THREAD ID , thread Id ) ; }", "return resolver . insert ( uri , values ) ; }"]}
{"ids": "8272", "code": ["public static Calendar next ( Calendar self ) {", "Calendar result = ( Calendar ) self . clone ( ) ;", "result . add ( Calendar . DAY OF YEAR , NUM_ ) ;", "return result ; }"]}
{"ids": "65407", "code": ["protected void angular Object Client Bind ( Notebook Socket conn , Hash Set < String > user And Roles , Notebook notebook , Message from Message ) throws Exception {", "String note Id = from Message . get Type ( STR_ ) ;", "String var Name = from Message . get Type ( STR_ ) ;", "Object var Value = from Message . get ( STR_ ) ;", "String paragraph Id = from Message . get Type ( STR_ ) ;", "Note note = notebook . get Note ( note Id ) ;", "if ( paragraph Id == null ) {", "throw new Illegal Argument Exception ( STR_ + STR_ ) ; }", "if ( note != null ) {", "final Interpreter Group interpreter Group = find Interpreter Group For Paragraph ( note , paragraph Id ) ;", "final Angular Object Registry registry = interpreter Group . get Angular Object Registry ( ) ;", "if ( registry instanceof Remote Angular Object Registry ) {", "Remote Angular Object Registry remote Registry = ( Remote Angular Object Registry ) registry ;", "push Angular Object To Remote Registry ( note Id , paragraph Id , var Name , var Value , remote Registry , interpreter Group . get Id ( ) , conn ) ; }", "else {", "push Angular Object To Local Repo ( note Id , paragraph Id , var Name , var Value , registry , interpreter Group . get Id ( ) , conn ) ; } } }"]}
{"ids": "37197", "code": ["public C Project Tree ( final J Frame parent , final C Database Manager database Manager ) {", "Preconditions . check Not Null ( database Manager , STR_ ) ;", "m tree Model = new C Project Tree Model ( this ) ;", "set Model ( m tree Model ) ;", "C Project Tree Drag Handler Initializer . initialize ( parent , this , database Manager ) ;", "add Mouse Listener ( new Internal Mouse Listener ( ) ) ;", "set Scrolls On Expand ( false ) ;", "set Root Visible ( false ) ;", "m root Node = new C Root Node ( this , database Manager ) ;", "m tree Model . set Root ( m root Node ) ;", "set Cell Renderer ( new Icon Node Renderer ( ) ) ;", "m popup . add ( C Action Proxy . proxy ( new C Add Database Action ( this ) ) ) ; }"]}
{"ids": "80025", "code": ["public boolean is Object ( ) {", "return type String . starts With ( OBJECT ) ; }"]}
{"ids": "55223", "code": ["private void auto Request Mods ( ) {", "if ( ! c . auto Request Mods Enabled ( ) ) {", "return ; }", "Set < String > joined Channels = c . get Joined Channels ( ) ;", "for ( String channel : joined Channels ) {", "if ( ! mods Already Requested . contains ( channel ) ) {", "LOGGER . info ( STR_ + channel ) ;", "mods Already Requested . add ( channel ) ;", "request Mods Silent ( channel ) ;", "return ; } } }"]}
{"ids": "65710", "code": ["public void build Depreciation ( ) {", "if ( ! is Depreciated ( ) ) {", "return ; }", "String Buffer sb = new String Buffer ( ) ;", "load ( get Trx Name ( ) ) ;", "M Asset Acct assetacct = get A Asset Acct ( null , get Trx Name ( ) ) ;", "M Depreciation depreciation C = M Depreciation . get ( get Ctx ( ) , assetacct . get A Depreciation ID ( ) ) ;", "M Depreciation depreciation F = M Depreciation . get ( get Ctx ( ) , assetacct . get A Depreciation F ID ( ) ) ;", "int offset C = NUM_ , offset F = NUM_ ;", "Big Decimal asset Cost = get Actual Cost ( ) ;", "Big Decimal accum Dep C = get A Accumulated Depr ( false ) ;", "Big Decimal accum Dep F = get A Accumulated Depr ( true ) ;", "int life Periods C = get Use Life Months ( false ) + offset C ;", "int life Periods F = get Use Life Months ( true ) + offset F ;", "int life Periods = ( life Periods C > life Periods F ? life Periods C : life Periods F ) ;", "Big Decimal exp C = Env . ZERO ;", "Big Decimal exp F = Env . ZERO ;", "if ( C Log Mgt . is Level Fine ( ) ) {", "sb . append ( STR_ + get A Current Period ( ) + STR_ + get Asset Depreciation Date ( ) + STR_ ) ;", "sb . append ( STR_ + offset C + STR_ + offset F + STR_ ) ;", "sb . append ( STR_ + life Periods C + STR_ + life Periods F + STR_ + life Periods + STR_ ) ; }", "trunc Depreciation ( ) ;", "int A Current Period = get A Current Period ( ) ;", "for ( int current Period = A Current Period , cnt = NUM_ ; current Period <= life Periods ; current Period ++ , cnt ++ ) {", "exp C = Env . ZERO ;", "exp F = Env . ZERO ;", "String help = STR_ + accum Dep C + STR_ + accum Dep F + STR_ ;", "if ( life Periods C > current Period || ! depreciation C . require Last Period Adjustment ( ) ) {", "set Fiscal ( false ) ;", "exp C = depreciation C . invoke ( this , assetacct , current Period , accum Dep C ) ;", "accum Dep C = accum Dep C . add ( exp C ) ; }", "else if ( life Periods C == current Period ) {", "exp C = asset Cost . subtract ( accum Dep C ) ;", "accum Dep C = asset Cost ; }", "if ( life Periods F > current Period || ! depreciation F . require Last Period Adjustment ( ) ) {", "set Fiscal ( true ) ;", "exp F = depreciation F . invoke ( this , assetacct , current Period , accum Dep F ) ;", "accum Dep F = accum Dep F . add ( exp F ) ; }", "else if ( life Periods F == current Period ) {", "exp F = asset Cost . subtract ( accum Dep F ) ;", "accum Dep F = asset Cost ; }", "help += STR_ + exp C + STR_ + exp F + STR_ + accum Dep C + STR_ + accum Dep F ;", "int months = NUM_ ;", "months = months + ( current Period - A Current Period ) ;", "Timestamp date Acct = Time Util . get Month Last Day ( Time Util . add Months ( get Date Acct ( ) , months ) ) ;", "M Depreciation Exp . create Depreciation ( this , current Period , date Acct , exp C , exp F , accum Dep C , accum Dep F , help , get Trx Name ( ) ) ;", "if ( C Log Mgt . is Level Fine ( ) ) {", "String info = STR_ + cnt + STR_ + current Period + STR_ + life Periods C + STR_ + life Periods F + STR_ + exp C + STR_ + exp F + STR_ + accum Dep C + STR_ + accum Dep F + STR_ + date Acct ;", "log . fine ( STR_ + info + Env . NL + Env . NL ) ;", "sb . append ( info + Env . NL ) ; } }", "log . fine ( sb . to String ( ) ) ;", "m build Depreciation = false ; }"]}
{"ids": "1659", "code": ["public synchronized void rename File ( JDBC Sequential File file , String new File Name ) throws SQL Exception {", "try {", "connection . set Auto Commit ( false ) ;", "rename File . set String ( NUM_ , new File Name ) ;", "rename File . set Int ( NUM_ , file . get Id ( ) ) ;", "rename File . execute Update ( ) ;", "connection . commit ( ) ; }", "catch ( SQL Exception e ) {", "connection . rollback ( ) ;", "throw e ; } }"]}
{"ids": "8576", "code": ["public static void handle Error Violations ( Formatter formatter , long num Errors ) {", "Exit Code exit Code = formatter . get Exit Status ( num Errors ) ;", "if ( exit Code != Exit Code . SUCCESS ) {", "System . exit ( exit Code . ordinal ( ) ) ; } }"]}
{"ids": "73190", "code": ["public void remove ( final Sensor sensor ) {", "Set < Sensor > old Selection = new Hash Set < Sensor > ( selection ) ;", "boolean rv = selection . remove ( sensor ) ;", "if ( rv ) {", "fire Selection Changed ( old Selection , selection ) ; } }"]}
{"ids": "53615", "code": ["protected void print Way ( Map Way way , Default Entity View Info p Info , boolean as Area ) {", "List < Map Node > nodes = get Way Nodes ( way ) ;", "if ( nodes != null ) {", "boolean as Oneway = false ;", "Name Info text Info = null ;", "if ( scale >= p Info . min Name Scale * display Factor ) {", "as Oneway = way . is Oneway ( ) ;", "if ( way . get Name ( ) != null && p Info . name Color != null ) {", "text Info = new Name Info ( way . get Name ( ) , p Info . name Color , p Info . print Order ) ; } }", "print Line ( image Bdr , nodes , p Info , as Area , as Oneway , text Info ) ; } }"]}
{"ids": "17308", "code": ["public Element full Path ( Managed Object Reference obj ) throws Invalid Property Fault Msg , Runtime Fault Fault Msg , Finder Exception {", "List < Object Content > set = ancestry Set ( obj ) ;", "Map < Mo Ref , Element > child To Parent = new Hash Map < > ( ) ;", "for ( Object Content cont : set ) {", "Mo Ref key = new Mo Ref ( cont . get Obj ( ) ) ;", "Managed Object Reference parent Ref = get Parent ( cont ) ;", "Element parent ;", "if ( parent Ref != null ) {", "parent = Element . make ( parent Ref , get Name ( cont ) ) ; }", "else {", "parent = Element . make ( cont . get Obj ( ) , get Name ( cont ) ) ; }", "child To Parent . put ( key , parent ) ; }", "Mo Ref next = new Mo Ref ( obj ) ;", "List < String > path = new Array List < > ( ) ;", "while ( true ) {", "Element parent = child To Parent . get ( next ) ;", "path . add ( parent . path ) ;", "if ( next . equals ( new Mo Ref ( parent . object ) ) ) {", "break ; }", "next = new Mo Ref ( parent . object ) ; }", "Collections . reverse ( path ) ;", "String Builder sb = new String Builder ( ) ;", "for ( String s : path ) {", "sb . append ( STR_ ) ;", "sb . append ( s ) ; }", "return Element . make ( obj , sb . to String ( ) ) ; }"]}
{"ids": "73410", "code": ["private boolean no Object Was Clicked On ( ) {", "boolean picked Node Null = ( picked Node == null ) ;", "boolean camera Picked = ( picked Node instanceof P Camera ) ;", "return ( picked Node Null || camera Picked ) ; }"]}
{"ids": "32800", "code": ["@ Override public int hash Code ( ) {", "throw new Unsupported Operation Exception ( STR_ ) ; }"]}
{"ids": "8547", "code": ["public Builder measurement Mappings ( Map < String , String > measurement Mappings ) {", "Map < String , Pattern > mappings By Pattern = new Hash Map < String , Pattern > ( ) ;", "for ( Map . Entry < String , String > entry : measurement Mappings . entry Set ( ) ) {", "try {", "final Pattern pattern = Pattern . compile ( entry . get Value ( ) ) ;", "mappings By Pattern . put ( entry . get Key ( ) , pattern ) ; }", "catch ( Pattern Syntax Exception e ) {", "throw new Runtime Exception ( STR_ + entry . get Value ( ) , e ) ; } }", "this . measurement Mappings = mappings By Pattern ;", "return this ; }"]}
{"ids": "43889", "code": ["public static void extract ( File zip File , File dest Dir ) throws IO Exception {", "Zip File zf = new Zip File ( zip File ) ;", "try {", "extract ( zf , dest Dir ) ; }", "finally {", "zf . close ( ) ; } }"]}
{"ids": "59573", "code": ["public Config ( String file ) {", "this ( new File ( CONFIG DIR , file . contains ( STR_ ) ? file : file . concat ( STR_ ) ) ) ; }"]}
{"ids": "17091", "code": ["public Goto Line Dialog ( J Text Component text ) {", "super ( Action Utils . get Frame For ( text ) , false ) ;", "init Components ( ) ;", "this . text = text ;", "set Location Relative To ( text . get Root Pane ( ) ) ; }"]}
{"ids": "51686", "code": ["public int length ( ) {", "return this . filled Length ; }"]}
{"ids": "42537", "code": ["@ Override public boolean equals ( Object o ) {", "if ( o instanceof Prefix ) {", "return value . equals ( ( ( Prefix ) o ) . value ) ; }", "return false ; }"]}
{"ids": "8934", "code": ["private void notify Wifi State ( ) {", "synchronized ( m Wifi Monitor ) {", "Log . v ( LOG TAG , STR_ ) ;", "m Wifi Monitor . notify ( ) ; } }"]}
{"ids": "79765", "code": ["private boolean array Key Value Exists ( String key , String value ) {", "if ( visited Post . contains Key ( key ) ) {", "for ( String s : visited Post . get ( key ) ) {", "if ( s . equals ( value ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "36658", "code": ["public void remove Diagram Change Listener ( mx Diagram Change Listener listener ) {", "if ( diagram Change Listeners != null ) {", "diagram Change Listeners . remove ( listener ) ; } }"]}
{"ids": "55572", "code": ["public static Connectivity Grid Connectivity Grid Factory ( int key , double max Range ) {", "if ( gridobjects . contains Key ( ( Integer ) key ) ) {", "return ( Connectivity Grid ) gridobjects . get ( ( Integer ) key ) ; }", "else {", "Connectivity Grid newgrid = new Connectivity Grid ( ( int ) Math . ceil ( max Range * cell Size Multiplier ) ) ;", "gridobjects . put ( ( Integer ) key , newgrid ) ;", "return newgrid ; } }"]}
{"ids": "85363", "code": ["public static String strip Leading Dollar ( String str ) {", "return ( str . char At ( NUM_ ) == STR_ ) ? str . substring ( NUM_ ) : str ; }"]}
{"ids": "9394", "code": ["public P Norm Normalization ( double p ) {", "if ( p <= NUM_ || Double . is Na N ( p ) ) throw new Illegal Argument Exception ( STR_ + p ) ;", "this . p = p ; }"]}
{"ids": "38883", "code": ["@ Override public void accept Data Point ( Chart Event e ) {", "if ( e . get Reset ( ) ) {", "m x Count = NUM_ ;", "m max = NUM_ ;", "m min = NUM_ ; }", "if ( m output Frame != null ) {", "boolean refresh = false ;", "if ( e . get Legend Text ( ) != null & e . get Legend Text ( ) != m legend Text ) {", "m legend Text = e . get Legend Text ( ) ;", "refresh = true ; }", "if ( e . get Min ( ) != m min || e . get Max ( ) != m max ) {", "m old Max = m max ;", "m old Min = m min ;", "m max = e . get Max ( ) ;", "m min = e . get Min ( ) ;", "refresh = true ;", "m y Scale Update = true ; }", "if ( refresh ) {", "m legend Panel . repaint ( ) ;", "m scale Panel . repaint ( ) ; }", "accept Data Point ( e . get Data Point ( ) ) ; }", "m x Count ++ ; }"]}
{"ids": "7317", "code": ["public int size ( ) {", "return values . size ( ) ; }"]}
{"ids": "34576", "code": ["public static String right Trim ( final String value ) {", "validate ( value , NULL STRING PREDICATE , NULL STRING MSG SUPPLIER ) ;", "return value . replace All ( STR_ , STR_ ) ; }"]}
{"ids": "23271", "code": ["public synchronized void put Message ( Object obj ) {", "fifo . add Element ( obj ) ;", "num Message ++ ;", "notify All ( ) ; }"]}
{"ids": "82056", "code": ["public void dispose ( ) {", "if ( is Disposed ( ) ) {", "return ; }", "set Disposed ( true ) ;", "if ( ! menu ) {", "super . dispose ( ) ; } }"]}
{"ids": "5045", "code": ["public double signed distance ( Pla Point Float p point ) {", "double dx = point b . v x - point a . v x ;", "double dy = point b . v y - point a . v y ;", "double det = dy * ( p point . v x - point a . v x ) - dx * ( p point . v y - point a . v y ) ;", "double length = Math . sqrt ( dx * dx + dy * dy ) ;", "return det / length ; }"]}
{"ids": "75810", "code": ["public static double [ ] ones ( int L ) {", "double m [ ] = new double [ L ] ;", "Arrays . fill ( m , NUM_ ) ;", "return m ; }"]}
{"ids": "72070", "code": ["public static Delete Sub Command Handler create ( Sub Command Argument Parser parser , Managed Object Path < ? , ? > p , Set Relation Definition < ? , ? > r ) throws Argument Exception {", "return new Delete Sub Command Handler ( parser , p , r , p . child ( r ) ) ; }"]}
{"ids": "38405", "code": ["protected void remove Cycles ( ) {", "int visited [ ] = new int [ m nodes . size ( ) ] ;", "for ( int i = NUM_ ; i < graph Matrix . length ; i ++ ) {", "if ( visited [ i ] == NUM_ ) {", "remove Cycles 2 ( i , visited ) ;", "visited [ i ] = NUM_ ; } } }"]}
{"ids": "86082", "code": ["public synchronized void kill ( ) {", "running = false ;", "closed = true ;", "try {", "STDIN . close ( ) ; }", "catch ( IO Exception e ) { }", "try {", "process . destroy ( ) ; }", "catch ( Exception e ) { } }"]}
{"ids": "1855", "code": ["public static Metrics create ( Map < String , String > dimension Map ) {", "Map < String , String > map = Maps . new Tree Map ( ) ;", "map . put All ( dimension Map ) ;", "return new Metrics ( Collections . unmodifiable Map ( map ) ) ; }"]}
{"ids": "49047", "code": ["protected Class < ? > resolve Class ( Object Stream Class class Desc ) throws IO Exception , Class Not Found Exception {", "Object annotation = read Location ( ) ;", "String class Name = class Desc . get Name ( ) ;", "Class Loader default Loader = skip Default Resolve Class ? null : latest User Defined Loader ( ) ;", "String codebase = null ;", "if ( ! use Codebase Only && annotation instanceof String ) {", "codebase = ( String ) annotation ; }", "try {", "return RMI Class Loader . load Class ( codebase , class Name , default Loader ) ; }", "catch ( Access Control Exception e ) {", "return check Sun Class ( class Name , e ) ; }", "catch ( Class Not Found Exception e ) {", "try {", "if ( Character . is Lower Case ( class Name . char At ( NUM_ ) ) && class Name . index Of ( STR_ ) == - NUM_ ) {", "return super . resolve Class ( class Desc ) ; } }", "catch ( Class Not Found Exception e 2 ) { }", "throw e ; } }"]}
{"ids": "80368", "code": ["public boolean contains ( final Creature Respawn Point point ) {", "if ( point == null ) {", "return false ; }", "final IRP Zone entity Zone = point . get Zone ( ) ;", "return zone . equals ( entity Zone ) && shape . contains ( point . get X ( ) , point . get Y ( ) ) ; }"]}
{"ids": "20134", "code": ["public boolean is Use Anti Alias ( ) {", "return use Anti Alias ; }"]}
{"ids": "25873", "code": ["private void load Level File ( String table Name , String column Name , String cube Name , String schema Name ) {", "String base Location = Carbon Util . get Carbon Store Path ( schema Name , cube Name ) ;", "base Location = base Location + File . separator + schema Name + File . separator + cube Name ;", "if ( load Folder List . size ( ) == NUM_ ) {", "check And Update Folder List ( base Location ) ; }", "try {", "File [ ] files Array = null ;", "for ( File load Foler : load Folder List ) {", "files Array = get Files Array ( load Foler , table Name + STR_ + column Name ) ;", "if ( null != files Array ) {", "for ( int i = NUM_ ; i < files Array . length ; i ++ ) {", "read Level File And Update Cache ( files Array [ i ] , table Name + STR_ + column Name ) ; } } } }", "catch ( IO Exception e ) {", "LOGGER . error ( STR_ ) ; } }"]}
{"ids": "8928", "code": ["protected void do Validate Zero Long File ( String path , String filename , long size , boolean check Contents ) {", "File in File = new File ( path , filename ) ;", "Data Input Stream in Stream = null ;", "Log . i ( LOG TAG , STR_ + filename + STR_ + path ) ;", "try {", "in Stream = new Data Input Stream ( new File Input Stream ( in File ) ) ;", "if ( check Contents ) {", "for ( long i = NUM_ ; i < size ; ++ i ) {", "if ( in Stream . read Long ( ) != NUM_ ) {", "fail ( STR_ + filename ) ; } } }", "if ( in Stream != null ) {", "in Stream . close ( ) ; }", "Log . i ( LOG TAG , STR_ + filename + STR_ + size + STR_ ) ; }", "catch ( IO Exception e ) {", "fail ( STR_ + in File + STR_ + e . to String ( ) ) ; } }"]}
{"ids": "24709", "code": ["public String apply Mask ( String mask , String value ) {", "return ( String ) get Mask Or Get Cursor Index ( mask , value , NUM_ , true ) ; }"]}
{"ids": "74994", "code": ["private void compute Duration ( ) {", "duration = System . current Time Millis ( ) - start ;", "total duration += duration ; }"]}
{"ids": "11678", "code": ["public int handle NITF Header ( Binary File bin File ) {", "try {", "byte [ ] nitf Array = bin File . read Bytes ( NUM_ , false ) ;", "String nitf = new String ( nitf Array ) ;", "bin File . seek ( RPF DATE LOCATION ) ;", "nitf Array = bin File . read Bytes ( NUM_ , false ) ;", "nitf = new String ( nitf Array ) ;", "if ( nitf . equals Ignore Case ( STR_ ) || nitf . equals Ignore Case ( STR_ ) ) return NUM_ ;", "bin File . seek ( RPF DATE LOCATION + TOC NITF HEADER LENGTH ) ;", "nitf Array = bin File . read Bytes ( NUM_ , false ) ;", "nitf = new String ( nitf Array ) ;", "if ( nitf . equals Ignore Case ( STR_ ) || nitf . equals Ignore Case ( STR_ ) ) return TOC NITF HEADER LENGTH ;", "bin File . seek ( RPF DATE LOCATION + FRAME SHORT NITF HEADER LENGTH ) ;", "nitf Array = bin File . read Bytes ( NUM_ , false ) ;", "nitf = new String ( nitf Array ) ;", "if ( nitf . equals Ignore Case ( STR_ ) || nitf . equals Ignore Case ( STR_ ) ) return FRAME SHORT NITF HEADER LENGTH ;", "bin File . seek ( RPF DATE LOCATION + FRAME LONG NITF HEADER LENGTH ) ;", "nitf Array = bin File . read Bytes ( NUM_ , false ) ;", "nitf = new String ( nitf Array ) ;", "if ( nitf . equals Ignore Case ( STR_ ) || nitf . equals Ignore Case ( STR_ ) ) return FRAME LONG NITF HEADER LENGTH ; }", "catch ( IO Exception e ) {", "Debug . error ( STR_ + e ) ;", "return - NUM_ ; }", "catch ( Format Exception f ) {", "Debug . error ( STR_ + f ) ;", "return - NUM_ ; }", "return - NUM_ ; }"]}
{"ids": "43363", "code": ["public Buffered Image take Screenshot ( ) {", "Debug . set Debug Level ( NUM_ ) ;", "File scr File = driver . get Screenshot As ( Output Type . FILE ) ;", "Buffered Image buffered Image = null ;", "try {", "buffered Image = Image IO . read ( scr File ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "return buffered Image ; }"]}
{"ids": "51052", "code": ["private void pick Center Overlap ( Scout Widget [ ] list ) {", "for ( int i = NUM_ ; i < list . length ; i ++ ) {", "Scout Widget scout Widget = list [ i ] ;", "float center X = scout Widget . get X ( ) + scout Widget . get Width ( ) / NUM_ ;", "float center Y = scout Widget . get Y ( ) + scout Widget . get Height ( ) / NUM_ ;", "for ( int j = NUM_ ; j < list . length ; j ++ ) {", "if ( i == j ) continue ;", "Scout Widget widget = list [ j ] ;", "if ( scout Widget . is Guideline ( ) ) {", "continue ; }", "if ( ! widget . is Guideline ( ) && Scout Widget . distance ( scout Widget , widget ) > MAX DIST FOR CENTER OVERLAP ) {", "continue ; }", "if ( ! widget . is Guideline ( ) || widget . is Vertical Guideline ( ) ) {", "if ( Math . abs ( widget . get X ( ) - center X ) < CENTER ERROR ) {", "scout Widget . set Edge Centered ( NUM_ , widget , Direction . WEST ) ; }", "if ( Math . abs ( widget . get X ( ) + widget . get Width ( ) - center X ) < CENTER ERROR ) {", "scout Widget . set Edge Centered ( NUM_ , widget , Direction . EAST ) ; } }", "if ( ! widget . is Guideline ( ) || widget . is Horizontal Guideline ( ) ) {", "if ( Math . abs ( widget . get Y ( ) - center Y ) < CENTER ERROR ) {", "scout Widget . set Edge Centered ( NUM_ , widget , Direction . NORTH ) ; }", "if ( Math . abs ( widget . get Y ( ) + widget . get Height ( ) - center Y ) < CENTER ERROR ) {", "scout Widget . set Edge Centered ( NUM_ , widget , Direction . SOUTH ) ; } } } } }"]}
