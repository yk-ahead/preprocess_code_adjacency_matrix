{"ids": "37963", "raw_code": "protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){\n  print(\"kernel doesn't alter original datasets\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);\n  print(\"...\");\n  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;\n  boolean[] result=new boolean[2];\n  Instances train=null;\n  Kernel kernel=null;\n  try {\n    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);\n    if (missingLevel > 0) {\n      addMissing(train,missingLevel,predictorMissing,classMissing);\n    }\n    kernel=Kernel.makeCopies(getKernel(),1)[0];\n  }\n catch (  Exception ex) {\n    throw new Error(\"Error setting up for tests: \" + ex.getMessage());\n  }\n  try {\n    Instances trainCopy=new Instances(train);\n    kernel.buildKernel(trainCopy);\n    compareDatasets(train,trainCopy);\n    println(\"yes\");\n    result[0]=true;\n  }\n catch (  Exception ex) {\n    println(\"no\");\n    result[0]=false;\n    if (m_Debug) {\n      println(\"\\n=== Full Report ===\");\n      print(\"Problem during building\");\n      println(\": \" + ex.getMessage() + \"\\n\");\n      println(\"Here is the dataset:\\n\");\n      println(\"=== Train Dataset ===\\n\" + train.toString() + \"\\n\");\n    }\n  }\n  return result;\n}"}
{"ids": "38468", "raw_code": "@Override public void closingOK(){\n  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();\n  for (int i=0; i < m_listModel.size(); i++) {\n    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);\n    specs.add(a);\n  }\n  if (m_modifyL != null) {\n    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);\n  }\n  m_filter.setAttributeSpecs(specs);\n}"}
{"ids": "20101", "raw_code": "private static boolean isDoubleEqual(double value,double valueToCompare){\n  return (Math.abs(value - valueToCompare) < 0.001);\n}"}
{"ids": "7488", "raw_code": "@Override public void datasetChanged(DatasetChangeEvent event){\n  super.datasetChanged(event);\n  if (this.subplots == null) {\n    return;\n  }\n  XYDataset dataset=null;\n  if (event.getDataset() instanceof XYDataset) {\n    dataset=(XYDataset)event.getDataset();\n  }\n  for (  XYPlot subplot : this.subplots) {\n    if (subplot.indexOf(dataset) >= 0) {\n      subplot.configureRangeAxes();\n    }\n  }\n}"}
{"ids": "26930", "raw_code": "public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){\n  boolean ret=false;\n  try {\n    scheduler.initialize(config,runtime);\n    ret=scheduler.onSchedule(packing);\n    if (ret) {\n      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);\n    }\n else {\n      LOG.severe(\"Failed to invoke IScheduler as library\");\n    }\n  }\n  finally {\n    scheduler.close();\n  }\n  return ret;\n}"}
{"ids": "66883", "raw_code": "public static boolean isStringType(Type t){\n  return t.equals(RefType.v(\"java.lang.String\"));\n}"}
{"ids": "56795", "raw_code": "private void validateSqlStatement(String sql,int jdbcStatementIndex){\n  Assert.isTrue(StringUtils.isNotBlank(sql),\"JDBC statement [\" + jdbcStatementIndex + \"] SQL is required\");\n}"}
{"ids": "80601", "raw_code": "private static void useMissile(Player player){\n  StackableItem projectilesItem=null;\n  if (player.getRangeWeapon() != null) {\n    projectilesItem=player.getAmmunition();\n  }\n  if (projectilesItem == null) {\n    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();\n  }\n  if (projectilesItem != null) {\n    projectilesItem.removeOne();\n  }\n}"}
{"ids": "25383", "raw_code": "public TcpMatcher(final NetworkConfig config){\n  super(config);\n}"}
{"ids": "20694", "raw_code": "private int determineMaxLevelRec(int level,Node v){\n  int newLevel=level;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);\n  }\n  return newLevel;\n}"}
{"ids": "25997", "raw_code": "private synchronized void putMapEntry(String localId,MapEntry entry){\n  if (!isLocalId(localId)) {\n    throw new IllegalStateException(\"Tried to get invalid local id: \\\"\" + localId + \"\\\".\");\n  }\n  JSONObject json=new JSONObject();\n  try {\n    json.put(\"retainCount\",entry.retainCount);\n    if (entry.objectId != null) {\n      json.put(\"objectId\",entry.objectId);\n    }\n  }\n catch (  JSONException je) {\n    throw new IllegalStateException(\"Error creating local id map entry.\",je);\n  }\n  File file=new File(diskPath,localId);\n  if (!diskPath.exists()) {\n    diskPath.mkdirs();\n  }\n  try {\n    ParseFileUtils.writeJSONObjectToFile(file,json);\n  }\n catch (  IOException e) {\n  }\n}"}
{"ids": "74215", "raw_code": "public void deleteLeaves(String name){\n  for (int i=0; i < _leaves.size(); i++) {\n    CatalogTreeLeaf leaf=_leaves.get(i);\n    if (name.equals(leaf.getName())) {\n      _leaves.remove(i);\n    }\n  }\n}"}
{"ids": "4673", "raw_code": "protected boolean validate(final char[] component,final int soffset,int eoffset,final BitSet generous){\n  if (eoffset == -1) {\n    eoffset=component.length - 1;\n  }\n  for (int i=soffset; i <= eoffset; i++) {\n    if (!generous.get(component[i])) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "42226", "raw_code": "public boolean removeShutdownHook(Thread hook){\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null) {\n    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);\n  }\n  if (hook == null)   throw new NullPointerException(\"null is not allowed here\");\n  if (VMState > 0) {\n    throw new IllegalStateException();\n  }\nsynchronized (hooksList) {\n    return hooksList.remove(hook);\n  }\n}"}
{"ids": "54799", "raw_code": "public void run(){\n  while (m_keyboardStream != null) {\n    try {\n      if (m_keyboardReadRequest) {\n        String s=m_keyboardStream.readLine();\n        m_keyboardInput.add(s);\n        m_keyboardReadRequest=false;\nsynchronized (this) {\n          notifyAll();\n        }\n      }\n else       try {\n        Thread.sleep(50);\n      }\n catch (      InterruptedException ie) {\n      }\n    }\n catch (    IOException io) {\n    }\n  }\n}"}
{"ids": "84544", "raw_code": "public boolean boundScroll(){\n  float curScroll=getStackScroll();\n  float newScroll=getBoundedStackScroll(curScroll);\n  if (Float.compare(newScroll,curScroll) != 0) {\n    setStackScroll(newScroll);\n    return true;\n  }\n  return false;\n}"}
{"ids": "37730", "raw_code": "@Override public AggregateableEvaluation aggregate(Evaluation evaluation){\n  m_Incorrect+=evaluation.incorrect();\n  m_Correct+=evaluation.correct();\n  m_Unclassified+=evaluation.unclassified();\n  m_MissingClass+=evaluation.m_MissingClass;\n  m_WithClass+=evaluation.m_WithClass;\n  if (evaluation.m_ConfusionMatrix != null) {\n    double[][] newMatrix=evaluation.confusionMatrix();\n    if (newMatrix != null) {\n      for (int i=0; i < m_ConfusionMatrix.length; i++) {\n        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {\n          m_ConfusionMatrix[i][j]+=newMatrix[i][j];\n        }\n      }\n    }\n  }\n  double[] newClassPriors=evaluation.m_ClassPriors;\n  if (newClassPriors != null && m_ClassPriors != null) {\n    for (int i=0; i < this.m_ClassPriors.length; i++) {\n      m_ClassPriors[i]=newClassPriors[i];\n    }\n  }\n  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;\n  m_TotalCost+=evaluation.totalCost();\n  m_SumErr+=evaluation.m_SumErr;\n  m_SumAbsErr+=evaluation.m_SumAbsErr;\n  m_SumSqrErr+=evaluation.m_SumSqrErr;\n  m_SumClass+=evaluation.m_SumClass;\n  m_SumSqrClass+=evaluation.m_SumSqrClass;\n  m_SumPredicted+=evaluation.m_SumPredicted;\n  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;\n  m_SumClassPredicted+=evaluation.m_SumClassPredicted;\n  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;\n  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;\n  m_SumKBInfo+=evaluation.m_SumKBInfo;\n  double[] newMarginCounts=evaluation.m_MarginCounts;\n  if (newMarginCounts != null) {\n    for (int i=0; i < m_MarginCounts.length; i++) {\n      m_MarginCounts[i]+=newMarginCounts[i];\n    }\n  }\n  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;\n  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;\n  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;\n  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;\n  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;\n  m_TotalCoverage+=evaluation.m_TotalCoverage;\n  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;\n  if (predsToAdd != null) {\n    if (m_Predictions == null) {\n      m_Predictions=new ArrayList<Prediction>();\n    }\n    for (int i=0; i < predsToAdd.size(); i++) {\n      m_Predictions.add(predsToAdd.get(i));\n    }\n  }\n  return this;\n}"}
{"ids": "22559", "raw_code": "public void waitForVolumesToBeVisible(CGRequestParams request){\n  scan(request.getCopies(),request.getRsets());\n}"}
{"ids": "66785", "raw_code": "public void updateView(){\n  if (fInputElement != null && fParentComposite != null) {\n    IndicatorViewState oldState=fStateMap.get(fInputElement);\n    boolean reload=fFilesToReoad.contains(fInputElement);\n    if (reload || oldState == null) {\n      JsonObject jsonObject=DroidsafePluginUtilities.parseIndicatorFile(fInputElement);\n      if (jsonObject == null)       return;\n      fFilesToReoad.remove(fInputElement);\n      fState=new IndicatorViewState(fInputElement,jsonObject,getSecuritySpec(),oldState);\n      fStateMap.put(fInputElement,fState);\n    }\n else {\n      fState=oldState;\n    }\n    setPartName(fState.indicatorType);\n    showPage(PAGE_VIEWER);\n    fTreeViewer.setInput(fState.jsonObject);\n    if (fTreeViewer.getSorter() == null)     sortByField(getSortByField());\n  }\n else {\n    setPartName(DEFAULT_PART_NAME);\n  }\n}"}
{"ids": "38792", "raw_code": "@Override public boolean connectionAllowed(String eventName){\n  if (m_listenees.containsKey(eventName)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "68051", "raw_code": "public boolean isPrefixed(){\n  return name.indexOf(':') >= 0;\n}"}
{"ids": "71337", "raw_code": "public void releaseAnyConnection(Connection connection) throws SQLException {\n  try {\n    connection.close();\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(ex);\n  }\n}"}
{"ids": "50146", "raw_code": "public QuickActionView addActions(Collection<Action> actions){\n  checkShown();\n  mActions.addAll(actions);\n  return this;\n}"}
{"ids": "49792", "raw_code": "public CharSeq concat(CharSeq another){\n  return new CharSeq(str + another.str);\n}"}
{"ids": "62807", "raw_code": "@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {\n  resp.setContentType(\"text/plain\");\n  PrintWriter sendToClient=resp.getWriter();\n  for (  Video v : this.videos) {\n    sendToClient.write(v.getName() + \" : \" + v.getUrl()+ \"\\n\");\n  }\n}"}
{"ids": "74058", "raw_code": "protected void notifyStateChange(int oldState,int newState){\n  mState=newState;\n  if (oldState != newState) {\n    firePropertyChange(\"KnownState\",Integer.valueOf(oldState),Integer.valueOf(newState));\n  }\n}"}
{"ids": "30048", "raw_code": "public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){\n  return String.format(\"%s_%s_%s.p%1d_s%1d\",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());\n}"}
{"ids": "14909", "raw_code": "public static String decodeCharset(String s,String charset){\n  if (s == null) {\n    return null;\n  }\n  try {\n    byte buf[]=s.getBytes(ASCII_CHARSET);\n    return (new String(buf,0,buf.length,charset));\n  }\n catch (  UnsupportedEncodingException uee) {\n    return s;\n  }\n}"}
{"ids": "67362", "raw_code": "public void addRestrictedDomain(String domainName){\n  if (StringUtils.isEmpty(domainName)) {\n    return;\n  }\n  if (restrictedDomains == null) {\n    restrictedDomains=new ArrayList<>();\n  }\n  restrictedDomains.add(domainName);\n}"}
{"ids": "23610", "raw_code": "StoppableReadLock(ReadWriteLock lock,CancelCriterion stopper){\n  this.lock=lock.readLock();\n  this.stopper=stopper;\n}"}
{"ids": "48956", "raw_code": "private long computeInterfaceHash(){\n  long hash=0;\n  ByteArrayOutputStream sink=new ByteArrayOutputStream(512);\n  try {\n    MessageDigest md=MessageDigest.getInstance(\"SHA\");\n    DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md));\n    out.writeInt(INTERFACE_HASH_STUB_VERSION);\n    for (    Method method : remoteMethods) {\n      MethodDoc methodDoc=method.methodDoc();\n      out.writeUTF(methodDoc.name());\n      out.writeUTF(Util.methodDescriptorOf(methodDoc));\n      ClassDoc exceptions[]=methodDoc.thrownExceptions();\n      Arrays.sort(exceptions,new ClassDocComparator());\n      for (      ClassDoc ex : exceptions) {\n        out.writeUTF(Util.binaryNameOf(ex));\n      }\n    }\n    out.flush();\n    byte hashArray[]=md.digest();\n    for (int i=0; i < Math.min(8,hashArray.length); i++) {\n      hash+=((long)(hashArray[i] & 0xFF)) << (i * 8);\n    }\n  }\n catch (  IOException e) {\n    throw new AssertionError(e);\n  }\ncatch (  NoSuchAlgorithmException e) {\n    throw new AssertionError(e);\n  }\n  return hash;\n}"}
{"ids": "33320", "raw_code": "public boolean isEmpty(){\n  return items.isEmpty();\n}"}
{"ids": "30919", "raw_code": "private ServiceRegistrar[] buildServiceRegistrar(){\n  int k=0;\n  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];\n  Iterator iter=proxyRegSet.iterator();\n  while (iter.hasNext()) {\n    ProxyReg reg=(ProxyReg)iter.next();\n    proxys[k++]=reg.proxy;\n  }\n  return proxys;\n}"}
{"ids": "46842", "raw_code": "private static boolean checkValue(String val) throws MalformedObjectNameException {\n  if (val == null)   throw new NullPointerException(\"Invalid value (null)\");\n  final int len=val.length();\n  if (len == 0)   return false;\n  final char[] s=val.toCharArray();\n  final int[] result=parseValue(s,0);\n  final int endValue=result[0];\n  final boolean value_pattern=result[1] == 1;\n  if (endValue < len)   throw new MalformedObjectNameException(\"Invalid character in value: `\" + s[endValue] + \"'\");\n  return value_pattern;\n}"}
{"ids": "23998", "raw_code": "protected void recoverPrimary(Set excludedServers){\n  if (pool.getPoolOrCacheCancelInProgress() != null) {\n    return;\n  }\n  final boolean isDebugEnabled=logger.isDebugEnabled();\n  if (queueConnections.getPrimary() != null) {\n    if (isDebugEnabled) {\n      logger.debug(\"Primary recovery not needed\");\n    }\n    return;\n  }\n  if (isDebugEnabled) {\n    logger.debug(\"SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover\");\n  }\n  if (printRecoveringPrimary) {\n    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));\n    printRecoveringPrimary=false;\n  }\n  QueueConnectionImpl newPrimary=null;\n  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {\n    List backups=queueConnections.getBackups();\n    newPrimary=promoteBackupToPrimary(backups);\n    if (newPrimary == null) {\n      break;\n    }\n    if (!addToConnectionList(newPrimary,true)) {\nsynchronized (lock) {\n        queueConnections=queueConnections.removeConnection(newPrimary);\n      }\n      newPrimary=null;\n    }\n  }\n  if (newPrimary != null) {\n    if (isDebugEnabled) {\n      logger.debug(\"SubscriptionManager redundancy satisfier - Switched backup server to primary: {}\",newPrimary.getEndpoint());\n    }\n    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {\n      ClientServerObserver bo=ClientServerObserverHolder.getInstance();\n      bo.afterPrimaryRecovered(newPrimary.getServer());\n    }\n    cqsConnected();\n    printPrimaryNotFoundError=true;\n    printRecoveringPrimary=true;\n    return;\n  }\n  while (newPrimary == null) {\n    newPrimary=createNewPrimary(excludedServers);\n    if (newPrimary == null) {\n      break;\n    }\n    if (!addToConnectionList(newPrimary,true)) {\n      excludedServers.add(newPrimary.getServer());\n      newPrimary=null;\n    }\n    if (newPrimary != null) {\n      if (isDebugEnabled) {\n        logger.debug(\"SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}\",newPrimary.getEndpoint());\n      }\n      if (!recoverInterest(newPrimary,true)) {\n        excludedServers.add(newPrimary.getServer());\n        newPrimary=null;\n      }\n      cqsConnected();\n    }\n    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {\n      ClientServerObserver bo=ClientServerObserverHolder.getInstance();\n      bo.afterPrimaryRecovered(newPrimary.getServer());\n    }\n    printPrimaryNotFoundError=true;\n    printRecoveringPrimary=true;\n    return;\n  }\n  cqsDisconnected();\n  if (isDebugEnabled) {\n    logger.debug(\"SubscriptionManager redundancy satisfier - Could not recover a new primary\");\n  }\nsynchronized (lock) {\n    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);\n    lock.notifyAll();\n  }\n}"}
{"ids": "11867", "raw_code": "protected boolean needToRefetchData(){\n  long now=System.currentTimeMillis();\n  long last=lastDataFetchTime;\n  if ((last + fetchIntervalMillis) < now) {\n    lastDataFetchTime=now;\n    return true;\n  }\n  return false;\n}"}
{"ids": "21029", "raw_code": "public byte[] toBytes(){\n  try {\n    ByteArrayOutputStream out=new ByteArrayOutputStream();\n    _field.store(out,null);\n    return out.toByteArray();\n  }\n catch (  IOException e) {\n    throw new IllegalStateException(e);\n  }\n}"}
{"ids": "6990", "raw_code": "@SuppressWarnings(\"unchecked\") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){\n  if (styleName == null || enumClass == null) {\n    return defaultValue;\n  }\n  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {\n    final Style.HasCssName anEnum=(Style.HasCssName)constant;\n    final String cssClass=anEnum.getCssName();\n    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {\n      return (E)anEnum;\n    }\n  }\n  return defaultValue;\n}"}
{"ids": "25459", "raw_code": "@HLEUnimplemented @HLEFunction(nid=0x3C37A7A6,version=150,checkInsideInterrupt=true) public int sceMpegNextAvcRpAu(@CheckArgument(\"checkMpegHandle\") int mpeg,int streamUid){\n  if (!streamMap.containsKey(streamUid)) {\n    log.warn(String.format(\"sceMpegNextAvcRpAu bad stream 0x%X\",streamUid));\n    return -1;\n  }\n  int result=hleMpegGetAvcAu(null);\n  if (result != 0) {\n    if (log.isDebugEnabled()) {\n      log.debug(String.format(\"sceMpegNextAvcRpAu returning 0x%08X\",result));\n    }\n    return result;\n  }\n  videoFrameCount++;\n  startedMpeg=true;\n  return 0;\n}"}
{"ids": "21807", "raw_code": "private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){\n  Map<URI,ExportMask> exportMaskMap=new HashMap<>();\n  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);\n  while (exportMaskIterator.hasNext()) {\n    ExportMask exportMask=exportMaskIterator.next();\n    exportMaskMap.put(exportMask.getId(),exportMask);\n  }\n  return exportMaskMap;\n}"}
{"ids": "63057", "raw_code": "public ImmutableArray2<K> insert(int index,K obj){\n  int len=length + 1;\n  int newLen=len;\n  boolean extendable;\n  if (index == len - 1) {\n    AtomicBoolean x=canExtend;\n    if (x != null) {\n      canExtend=null;\n      if (array.length > index && x.getAndSet(false)) {\n        array[index]=obj;\n        return new ImmutableArray2<K>(array,len,true);\n      }\n    }\n    extendable=true;\n    newLen=len + 4;\n  }\n else {\n    extendable=false;\n  }\n  @SuppressWarnings(\"unchecked\") K[] a2=(K[])new Object[newLen];\n  DataUtils.copyWithGap(array,a2,length,index);\n  a2[index]=obj;\n  return new ImmutableArray2<K>(a2,len,extendable);\n}"}
{"ids": "43774", "raw_code": "public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {\n  final List<String> curves=Arrays.asList(new String[]{\"q\",\"h\",\"t\",\"l\",\"p\"});\n  if (!curves.contains(type)) {\n    throw new RuntimeException(\"fadeAudio: passed invalid type: \" + type);\n  }\n  File file=new File(path);\n  String outFile=file.getCanonicalPath() + \"_faded.wav\";\n  ArrayList<String> cmd=new ArrayList<String>();\n  cmd.add(soxBin);\n  cmd.add(path);\n  cmd.add(outFile);\n  cmd.add(\"fade\");\n  cmd.add(type);\n  cmd.add(fadeInLength + \"\");\n  if (stopTime != -1)   cmd.add(stopTime + \"\");\n  if (fadeOutLength != -1)   cmd.add(fadeOutLength + \"\");\n  try {\n    int rc=execSox(cmd,callback);\n    if (rc != 0) {\n      outFile=null;\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  return outFile;\n}"}
{"ids": "61741", "raw_code": "public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){\n  ClassProperties cp=new ClassProperties(properties);\n  for (  Class c : cls) {\n    cp.load(c,inherit);\n  }\n  return cp;\n}"}
{"ids": "85085", "raw_code": "private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException {\n  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,\"exif:GPSTimeStamp\",false);\n  if (gpsDateTime == null) {\n    return;\n  }\n  try {\n    XMPDateTime binGPSStamp;\n    XMPDateTime binOtherDate;\n    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());\n    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {\n      return;\n    }\n    XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,\"exif:DateTimeOriginal\",false);\n    if (otherDate == null) {\n      otherDate=XMPNodeUtils.findChildNode(exifSchema,\"exif:DateTimeDigitized\",false);\n    }\n    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());\n    Calendar cal=binGPSStamp.getCalendar();\n    cal.set(Calendar.YEAR,binOtherDate.getYear());\n    cal.set(Calendar.MONTH,binOtherDate.getMonth());\n    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());\n    binGPSStamp=new XMPDateTimeImpl(cal);\n    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));\n  }\n catch (  XMPException e) {\n    return;\n  }\n}"}
{"ids": "56925", "raw_code": "protected boolean cellConsumesEventType(Cell<?> cell,String eventType){\n  Set<String> consumedEvents=cell.getConsumedEvents();\n  return consumedEvents != null && consumedEvents.contains(eventType);\n}"}
{"ids": "76471", "raw_code": "public long max(){\n  return deltaMax.get();\n}"}
{"ids": "47690", "raw_code": "public void print(File file) throws IOException {\n  checkExec();\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null) {\n    sm.checkPrintJobAccess();\n  }\n  checkActionSupport(Action.PRINT);\n  checkFileValidation(file);\n  peer.print(file);\n}"}
{"ids": "69160", "raw_code": "@Override public String expect(Pattern pattern){\n  final String token=read(pattern);\n  if (token == null) {\n    throw new ParserException(\"Expected pattern '\" + pattern.pattern() + \"' was not encountered in document: \"+ document);\n  }\n  return token;\n}"}
{"ids": "4739", "raw_code": "public void addParameters(final NameValuePair[] parameters){\n  LOG.trace(\"enter PostMethod.addParameters(NameValuePair[])\");\n  if (parameters == null) {\n    LOG.warn(\"Attempt to addParameters(null) ignored\");\n  }\n else {\n    super.clearRequestBody();\n    for (int i=0; i < parameters.length; i++) {\n      params.add(parameters[i]);\n    }\n  }\n}"}
{"ids": "42446", "raw_code": "@Pure public Atom annotationInterfaceToAnnotationClass(){\n  byte[] annotationClassName_tmp=new byte[val.length + 2];\n  System.arraycopy(val,0,annotationClassName_tmp,0,val.length - 1);\n  annotationClassName_tmp[val.length - 1]='$';\n  annotationClassName_tmp[val.length]='$';\n  annotationClassName_tmp[val.length + 1]=';';\n  return Atom.findOrCreateUtf8Atom(annotationClassName_tmp);\n}"}
{"ids": "22820", "raw_code": "public boolean resourceSupportAR(Integer id){\n  if (id == null) {\n    return false;\n  }\n  return resourceSupportAR(id.intValue());\n}"}
{"ids": "7228", "raw_code": "public PatternGuardExpr(String namespace,String name,Expression[] parameters,PatternExpr guarded){\n  this(namespace,name,Arrays.asList(parameters),guarded);\n}"}
{"ids": "59553", "raw_code": "@Override public void onTmpFilesCopied(ResultCode result){\n  dismissLoadingDialog();\n  finish();\n}"}
{"ids": "11854", "raw_code": "public synchronized OMGraphicList prepare(){\n  Projection projection=getProjection();\n  boolean DEBUG_FINE=logger.isLoggable(Level.FINE);\n  if (projection == null) {\n    if (DEBUG_FINE) {\n      logger.fine(getName() + \": prepare called with null projection\");\n    }\n    return new OMGraphicList();\n  }\n  if (spatialIndex == null) {\n    if (DEBUG_FINE) {\n      logger.fine(getName() + \": spatialIndex is null!\");\n    }\n    OMGraphicList list=getList();\n    if (list != null) {\n      list.generate(projection,true);\n      return list;\n    }\n else {\n      return new OMGraphicList();\n    }\n  }\n  Point2D ul=projection.getUpperLeft();\n  Point2D lr=projection.getLowerRight();\n  double ulLat=ul.getY();\n  double ulLon=ul.getX();\n  double lrLat=lr.getY();\n  double lrLon=lr.getX();\n  OMGraphicList list=new OMGraphicList();\n  if (ProjMath.isCrossingDateline(ulLon,lrLon,projection.getScale())) {\n    if (DEBUG_FINE) {\n      logger.fine(\"ShapeLayer.computeGraphics(): Dateline is on screen\");\n    }\n    double ymin=Math.min(ulLat,lrLat);\n    double ymax=Math.max(ulLat,lrLat);\n    try {\n      list=spatialIndex.getOMGraphics(ulLon,ymin,180.0d,ymax,list,drawingAttributes,projection,coordTransform);\n      list=spatialIndex.getOMGraphics(-180.0d,ymin,lrLon,ymax,list,drawingAttributes,projection,coordTransform);\n    }\n catch (    InterruptedIOException iioe) {\n      list=null;\n    }\ncatch (    IOException ex) {\n      if (DEBUG_FINE) {\n        ex.printStackTrace();\n      }\n    }\ncatch (    FormatException fe) {\n      if (DEBUG_FINE) {\n        fe.printStackTrace();\n      }\n    }\ncatch (    NullPointerException npe) {\n      if (DEBUG_FINE) {\n        npe.printStackTrace();\n      }\n    }\n  }\n else {\n    double xmin=Math.min(ulLon,lrLon);\n    double xmax=Math.max(ulLon,lrLon);\n    double ymin=Math.min(ulLat,lrLat);\n    double ymax=Math.max(ulLat,lrLat);\n    try {\n      list=spatialIndex.getOMGraphics(xmin,ymin,xmax,ymax,list,drawingAttributes,projection,coordTransform);\n    }\n catch (    InterruptedIOException iioe) {\n      list=null;\n    }\ncatch (    java.io.IOException ex) {\n      if (DEBUG_FINE) {\n        ex.printStackTrace();\n      }\n    }\ncatch (    FormatException fe) {\n      if (DEBUG_FINE) {\n        fe.printStackTrace();\n      }\n    }\ncatch (    NullPointerException npe) {\n      if (DEBUG_FINE) {\n        npe.printStackTrace();\n      }\n    }\n  }\n  return list;\n}"}
{"ids": "26163", "raw_code": "private boolean isFieldPackagePrivate(Element attribute){\n  Set<Modifier> modifiers=attribute.getModifiers();\n  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);\n}"}
{"ids": "12611", "raw_code": "private void loadText(InputStream is){\n  BufferedReader reader;\n  String line;\n  unitList=new ArrayList();\n  unitTypesList=new ArrayList();\n  if (is == null) {\n    throw new Error(\"Can't load cluster db file.\");\n  }\n  reader=new BufferedReader(new InputStreamReader(is));\n  try {\n    line=reader.readLine();\n    lineCount++;\n    while (line != null) {\n      if (!line.startsWith(\"***\")) {\n        parseAndAdd(line,reader);\n      }\n      line=reader.readLine();\n    }\n    reader.close();\n    units=new DatabaseClusterUnit[unitList.size()];\n    units=(DatabaseClusterUnit[])unitList.toArray(units);\n    unitList=null;\n    unitTypes=new UnitType[unitTypesList.size()];\n    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);\n    unitTypesList=null;\n  }\n catch (  IOException e) {\n    throw new Error(e.getMessage() + \" at line \" + lineCount);\n  }\n finally {\n  }\n}"}
{"ids": "80128", "raw_code": "@Override public void onAdded(final RPObject object){\n  if (isUser(object)) {\n    if (object.has(\"adminlevel\")) {\n      adminlevel=object.getInt(\"adminlevel\");\n    }\n  }\n}"}
{"ids": "86992", "raw_code": "private String local_number() throws ParseException {\n  StringBuilder s=new StringBuilder();\n  if (debug)   dbg_enter(\"local_number\");\n  try {\n    int lc=0;\n    while (lexer.hasMoreChars()) {\n      char la=lexer.lookAhead(0);\n      if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || Lexer.isHexDigit(la)) {\n        lexer.consume(1);\n        s.append(la);\n        lc++;\n      }\n else       if (lc > 0)       break;\n else       throw createParseException(\"unexepcted \" + la);\n    }\n    return s.toString();\n  }\n  finally {\n    if (debug)     dbg_leave(\"local_number\");\n  }\n}"}
{"ids": "30032", "raw_code": "public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){\n  alphaAnimator(animators,view,0f);\n  animators.add(ObjectAnimator.ofFloat(view,\"translationY\",-recyclerView.getMeasuredHeight() >> 1,0));\n  if (FlexibleAdapter.DEBUG)   Log.v(TAG,\"Added TOP Animator\");\n}"}
{"ids": "47944", "raw_code": "MutableBigInteger(MutableBigInteger val){\n  intLen=val.intLen;\n  value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen);\n}"}
{"ids": "40230", "raw_code": "public CheckpointManager(NetworkParameters params,@Nullable InputStream inputStream) throws IOException {\n  this.params=checkNotNull(params);\n  if (inputStream == null)   inputStream=openStream(params);\n  checkNotNull(inputStream);\n  inputStream=new BufferedInputStream(inputStream);\n  inputStream.mark(1);\n  int first=inputStream.read();\n  inputStream.reset();\n  if (first == BINARY_MAGIC.charAt(0))   dataHash=readBinary(inputStream);\n else   if (first == TEXTUAL_MAGIC.charAt(0))   dataHash=readTextual(inputStream);\n else   throw new IOException(\"Unsupported format.\");\n}"}
{"ids": "20057", "raw_code": "private String liveness(){\n  boolean isClosed=false;\n  try {\n    if (isClosed()) {\n      isClosed=true;\n    }\n  }\n catch (  SQLException s) {\n    isClosed=true;\n  }\n  if (isClosed) {\n    return \"CLOSED\";\n  }\n  return \"OPEN\";\n}"}
{"ids": "46349", "raw_code": "public Dimension minimumLayoutSize(Container target){\n  Dimension size;\nsynchronized (this) {\n    checkContainer(target);\n    checkRequests();\n    size=new Dimension(xTotal.minimum,yTotal.minimum);\n  }\n  Insets insets=target.getInsets();\n  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);\n  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);\n  return size;\n}"}
{"ids": "52710", "raw_code": "public boolean select(int position){\n  View v=mAllList.get(position);\n  if (mMultiChoiceAdapter != null) {\n    performVibrate();\n    performSelect(v,position,true);\n    return true;\n  }\n  return false;\n}"}
{"ids": "35293", "raw_code": "private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){\n  long start=System.currentTimeMillis();\n  long end=start;\n  do {\n    end=System.currentTimeMillis();\n  }\n while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);\n  if (page.getActiveEditor() != internalFileEditor)   logger.warn(\"selected editor was not activated within timout\");\n}"}
{"ids": "43019", "raw_code": "private Solution largestObjectiveValue(int objective,Population population){\n  Solution largest=null;\n  double value=Double.NEGATIVE_INFINITY;\n  for (  Solution solution : population) {\n    if (solution.getObjective(objective) > value) {\n      largest=solution;\n      value=solution.getObjective(objective);\n    }\n  }\n  return largest;\n}"}
{"ids": "16143", "raw_code": "public static int convertLatmToY(int latm){\n  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));\n  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;\n  if (v < 0)   return -1;\n  return (int)v;\n}"}
{"ids": "14771", "raw_code": "public void registerCallbackHandler(SMSObjectListener changeListener) throws SMSException {\n  objectListener=changeListener;\n  if (!notificationInitialized) {\n    String notificationFlag=SystemProperties.get(NOTIFICATION_PROPERTY,\"true\");\n    if (notificationFlag.equalsIgnoreCase(\"true\")) {\n      try {\n        URL url=WebtopNaming.getNotificationURL();\n        PLLClient.addNotificationHandler(JAXRPCUtil.SMS_SERVICE,new SMSNotificationHandler());\n        client.send(\"registerNotificationURL\",url.toString(),null,null);\n        if (debug.messageEnabled()) {\n          debug.message(\"SMSJAXRPCObject: Using \" + \"notification mechanism for cache updates: \" + url);\n        }\n      }\n catch (      Exception e) {\n        if (debug.warningEnabled()) {\n          debug.warning(\"SMSJAXRPCObject: Registering for \" + \"notification via URL failed: \" + e.getMessage() + \"\\nUsing polling mechanism for updates\");\n        }\n        startPollingThreadIfEnabled(getCachePollingInterval());\n      }\n    }\n else {\n      startPollingThreadIfEnabled(getCachePollingInterval());\n    }\n    notificationInitialized=true;\n  }\n}"}
{"ids": "52179", "raw_code": "protected double currentScoreFunction(){\n  double score=0.;\n  for (int i=0; i < this.values[this.currentVar1].length; i++) {\n    for (int j=0; j < this.values[this.currentVar2].length; j++) {\n      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);\n    }\n  }\n  return score;\n}"}
{"ids": "70752", "raw_code": "private int checkZoneLink(SpannableStringBuilder out,String in,int start){\n  int pos=start + 3;\n  StringBuilder temp=new StringBuilder();\n  String targetString=in.substring(pos,Math.min(in.length(),pos + 20));\n  boolean prevIsDash=false;\n  for (int i=0; i < targetString.length(); i++) {\n    char c=targetString.charAt(i);\n    if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {\n      temp.append(c);\n      prevIsDash=false;\n    }\n else     if (c == '-') {\n      if (i == 0) {\n        return -1;\n      }\n      if (prevIsDash) {\n        temp.deleteCharAt(temp.length() - 1);\n        break;\n      }\n      temp.append(c);\n      prevIsDash=true;\n    }\n else {\n      if (prevIsDash) {\n        temp.deleteCharAt(temp.length() - 1);\n      }\n      break;\n    }\n  }\n  String zone=temp.toString();\n  if (zone.length() < 3 || zone.equalsIgnoreCase(\"null\")) {\n    return -1;\n  }\n  out.append(zone);\n  return pos + zone.length() - 1;\n}"}
{"ids": "72471", "raw_code": "public void checkNextPoissonConsistency(double mean){\n  final int sampleSize=1000;\n  final int minExpectedCount=7;\n  long maxObservedValue=0;\n  final double alpha=0.001;\n  UnitTestUtils.Frequency<Long> frequency=new UnitTestUtils.Frequency<Long>();\n  for (int i=0; i < sampleSize; i++) {\n    long value=randomData.nextPoisson(mean);\n    if (value > maxObservedValue) {\n      maxObservedValue=value;\n    }\n    frequency.addValue(value);\n  }\n  PoissonDistribution poissonDistribution=new PoissonDistribution(mean);\n  int lower=1;\n  while (poissonDistribution.cumulativeProbability(lower - 1) * sampleSize < minExpectedCount) {\n    lower++;\n  }\n  int upper=(int)(5 * mean);\n  while ((1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize < minExpectedCount) {\n    upper--;\n  }\n  int binWidth=0;\n  boolean widthSufficient=false;\n  double lowerBinMass=0;\n  double upperBinMass=0;\n  while (!widthSufficient) {\n    binWidth++;\n    lowerBinMass=poissonDistribution.probability(lower - 1,lower + binWidth - 1);\n    upperBinMass=poissonDistribution.probability(upper - binWidth - 1,upper - 1);\n    widthSufficient=FastMath.min(lowerBinMass,upperBinMass) * sampleSize >= minExpectedCount;\n  }\n  List<Integer> binBounds=new ArrayList<Integer>();\n  binBounds.add(lower);\n  int bound=lower + binWidth;\n  while (bound < upper - binWidth) {\n    binBounds.add(bound);\n    bound+=binWidth;\n  }\n  binBounds.add(upper);\n  final int binCount=binBounds.size() + 1;\n  long[] observed=new long[binCount];\n  double[] expected=new double[binCount];\n  observed[0]=0;\n  for (int i=0; i < lower; i++) {\n    observed[0]+=frequency.getCount((long)i);\n  }\n  expected[0]=poissonDistribution.cumulativeProbability(lower - 1) * sampleSize;\n  observed[binCount - 1]=0;\n  for (int i=upper; i <= maxObservedValue; i++) {\n    observed[binCount - 1]+=frequency.getCount((long)i);\n  }\n  expected[binCount - 1]=(1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize;\n  for (int i=1; i < binCount - 1; i++) {\n    observed[i]=0;\n    for (int j=binBounds.get(i - 1); j < binBounds.get(i); j++) {\n      observed[i]+=frequency.getCount((long)j);\n    }\n    expected[i]=(poissonDistribution.cumulativeProbability(binBounds.get(i) - 1) - poissonDistribution.cumulativeProbability(binBounds.get(i - 1) - 1)) * sampleSize;\n  }\n  if (UnitTestUtils.chiSquareTest(expected,observed) < alpha) {\n    StringBuilder msgBuffer=new StringBuilder();\n    DecimalFormat df=new DecimalFormat(\"#.##\");\n    msgBuffer.append(\"Chisquare test failed for mean = \");\n    msgBuffer.append(mean);\n    msgBuffer.append(\" p-value = \");\n    msgBuffer.append(UnitTestUtils.chiSquareTest(expected,observed));\n    msgBuffer.append(\" chisquare statistic = \");\n    msgBuffer.append(UnitTestUtils.chiSquare(expected,observed));\n    msgBuffer.append(\". \\n\");\n    msgBuffer.append(\"bin\\t\\texpected\\tobserved\\n\");\n    for (int i=0; i < expected.length; i++) {\n      msgBuffer.append(\"[\");\n      msgBuffer.append(i == 0 ? 1 : binBounds.get(i - 1));\n      msgBuffer.append(\",\");\n      msgBuffer.append(i == binBounds.size() ? \"inf\" : binBounds.get(i));\n      msgBuffer.append(\")\");\n      msgBuffer.append(\"\\t\\t\");\n      msgBuffer.append(df.format(expected[i]));\n      msgBuffer.append(\"\\t\\t\");\n      msgBuffer.append(observed[i]);\n      msgBuffer.append(\"\\n\");\n    }\n    msgBuffer.append(\"This test can fail randomly due to sampling error with probability \");\n    msgBuffer.append(alpha);\n    msgBuffer.append(\".\");\n    Assert.fail(msgBuffer.toString());\n  }\n}"}
{"ids": "2608", "raw_code": "public static void checkValid(double[] x){\n  for (  double v : x) {\n    if (Double.isNaN(v)) {\n      throw new RuntimeException(\"Invalid entry \" + v);\n    }\n  }\n}"}
{"ids": "68311", "raw_code": "public double percentage(ConstantRange range){\n  SortedSet<Constant> sorted=values();\n  SortedSet<Constant> contained=new TreeSet<Constant>();\n  Constant prev=null;\n  for (  Constant pct : sorted) {\n    if (range.contains(pct))     contained.add(pct);\n else     if (contained.isEmpty())     prev=pct;\n  }\n  if (contained.size() == 0)   return 0.0;\n  double prevPercent=prev == null ? 0.0 : pcts.get(prev);\n  return pcts.get(contained.last()) - prevPercent;\n}"}
{"ids": "32268", "raw_code": "public static void closeQuiet(@Nullable Closeable closeable){\n  if (closeable != null) {\n    try {\n      closeable.close();\n    }\n catch (    IOException ignored) {\n    }\n  }\n}"}
{"ids": "1227", "raw_code": "@Override public void releaseLuceePageContext(PageContext pc,boolean register){\n  if (pc.getId() < 0)   return;\n  pc.release();\n  ThreadLocalPageContext.release();\n  runningPcs.remove(Integer.valueOf(pc.getId()));\n  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);\n}"}
{"ids": "6431", "raw_code": "private static byte[] stringToByteArray(String str){\n  if (str == null) {\n    return null;\n  }\n  byte[] srcByte=str.getBytes();\n  int srcLength=srcByte.length;\n  byte[] result=new byte[srcLength + 1];\n  System.arraycopy(srcByte,0,result,0,srcLength);\n  result[srcLength]=0;\n  return result;\n}"}
{"ids": "53986", "raw_code": "public static Properties loadProperties(ClassLoader classLoader,String classpathResource){\n  return loadProperties(null,classpathResource);\n}"}
{"ids": "62054", "raw_code": "@Override public boolean equals(Object o){\n  if (o instanceof Graph) {\n    return string.equals(o.toString());\n  }\n  return false;\n}"}
{"ids": "80868", "raw_code": "private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){\n  return map[loc.getLine()][loc.getColumn()];\n}"}
{"ids": "44860", "raw_code": "public String parse(File file,JSON m){\n  try {\n    Template template=getTemplate(file);\n    if (template != null) {\n      StringWriter w=new StringWriter();\n      BufferedWriter writer=new BufferedWriter(w);\n      template.merge(new VelocityContext(m),writer);\n      writer.flush();\n      writer.close();\n      return w.toString();\n    }\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n  return null;\n}"}
{"ids": "45935", "raw_code": "public Repository(String domain,boolean fairLock){\n  lock=new ReentrantReadWriteLock(fairLock);\n  domainTb=new HashMap<String,Map<String,NamedObject>>(5);\n  if (domain != null && domain.length() != 0)   this.domain=domain.intern();\n else   this.domain=ServiceName.DOMAIN;\n  domainTb.put(this.domain,new HashMap<String,NamedObject>());\n}"}
{"ids": "21576", "raw_code": "private void updateVolumeLabels(Volume trustedSrc,Volume invalidTgt){\n  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTgt.getVirtualArray());\n  StringBuilder newLabel=new StringBuilder();\n  newLabel.append(trustedSrc.getLabel());\n  newLabel.append(\"-target-\");\n  newLabel.append(invalidTgtVA.getLabel());\n  log.info(\"Revised name for target: \" + newLabel.toString());\n  invalidTgt.setLabel(newLabel.toString());\n  NamedURI projectURI=invalidTgt.getProject();\n  projectURI.setName(newLabel.toString());\n  invalidTgt.setProject(projectURI);\n  NamedURI tenantURI=invalidTgt.getTenant();\n  tenantURI.setName(newLabel.toString());\n  invalidTgt.setTenant(tenantURI);\n  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTgt);\n  if (tgtVplexVolume != null) {\n    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedSrc);\n    if (srcVplexVolume != null) {\n      newLabel.setLength(0);\n      newLabel.append(srcVplexVolume.getLabel());\n      newLabel.append(\"-target-\");\n      newLabel.append(invalidTgtVA.getLabel());\n      log.info(\"Revised name for VPlex target: \" + newLabel.toString());\n      tgtVplexVolume.setLabel(newLabel.toString());\n      projectURI=tgtVplexVolume.getProject();\n      projectURI.setName(newLabel.toString());\n      tgtVplexVolume.setProject(projectURI);\n      tenantURI=tgtVplexVolume.getTenant();\n      tenantURI.setName(newLabel.toString());\n      tgtVplexVolume.setTenant(tenantURI);\n      dbClient.updateAndReindexObject(tgtVplexVolume);\n    }\n  }\n}"}
{"ids": "75413", "raw_code": "protected void handle(Exception exception,String title,String message){\n  Utils.handleError(getShell(),exception,title,message);\n}"}
{"ids": "11276", "raw_code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  i18n=Environment.getI18n();\n  beanContextChildSupport=new BeanContextChildSupport(this);\n}"}
{"ids": "82762", "raw_code": "private void paintForegroundEnabled(Graphics2D g,int width,int height){\n  Shape s=decodeArrowPath(width,height);\n  g.setPaint(enabledColor);\n  g.fill(s);\n}"}
{"ids": "72151", "raw_code": "public boolean allowsTrailingArguments(){\n  return allowsTrailingArguments;\n}"}
{"ids": "36600", "raw_code": "private void evaluatePopup(MouseEvent e){\n  if (e.isPopupTrigger()) {\n    JPopupMenu menu=createBookmarkPopupMenu();\n    if (menu != null) {\n      menu.show(this,e.getX(),e.getY());\n    }\n  }\n}"}
{"ids": "30903", "raw_code": "private boolean removeTask(Task t,int min){\n  for (int i=tasks.size(); --i >= min; ) {\n    if (tasks.get(i) == t) {\n      tasks.remove(i);\n      if (i < firstPending) {\n        firstPending--;\n        for (int j=threads.size(); --j >= 0; ) {\n          TaskThread thread=threads.get(j);\n          if (thread.task == t) {\n            if (thread != Thread.currentThread())             thread.interrupt();\n            break;\n          }\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "17268", "raw_code": "protected void ensurePathExists(String path){\n  String[] paths=path.split(\"/\");\n  StringBuffer spath=new StringBuffer(\"/\");\n  for (  String temp : paths) {\n    if (StringUtils.isBlank(temp)) {\n      continue;\n    }\n    spath.append(temp);\n    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);\n    spath.append(\"/\");\n  }\n}"}
{"ids": "48550", "raw_code": "public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {\n  int i=name.lastIndexOf('.');\n  if (i != -1) {\n    SecurityManager sm=System.getSecurityManager();\n    if (sm != null) {\n      sm.checkPackageAccess(name.substring(0,i));\n    }\n  }\n  if (ucp.knownToNotExist(name)) {\n    Class<?> c=findLoadedClass(name);\n    if (c != null) {\n      if (resolve) {\n        resolveClass(c);\n      }\n      return c;\n    }\n    throw new ClassNotFoundException(name);\n  }\n  return (super.loadClass(name,resolve));\n}"}
{"ids": "78820", "raw_code": "public void add(@NonNull T item){\nsynchronized (lock) {\n    if (items == null) {\n      items=new ArrayList<>();\n    }\n    items.add(item);\n  }\n  if (notifyOnChange) {\n    notifyItemInserted(items.size());\n  }\n}"}
{"ids": "32415", "raw_code": "private void checkPendingCustomMessages(){\n  if (joiningNodes.isEmpty() && isLocalNodeCoordinator()) {\n    TcpDiscoveryCustomEventMessage msg;\n    while ((msg=pendingCustomMsgs.poll()) != null) {\n      processCustomMessage(msg);\n      if (msg.verified())       msgHist.add(msg);\n    }\n  }\n}"}
{"ids": "35649", "raw_code": "private float calculateScrambleImageHeightMultiplier(float multiplier){\nswitch (currentPuzzle) {\ncase PuzzleUtils.TYPE_777:\ncase PuzzleUtils.TYPE_666:\ncase PuzzleUtils.TYPE_555:\ncase PuzzleUtils.TYPE_222:\ncase PuzzleUtils.TYPE_444:\ncase PuzzleUtils.TYPE_333:\n    return (multiplier / 4) * 3;\ncase PuzzleUtils.TYPE_CLOCK:\n  return multiplier / 2;\ncase PuzzleUtils.TYPE_MEGA:\nreturn (multiplier / 2);\ncase PuzzleUtils.TYPE_PYRA:\nreturn (float)(multiplier / Math.sqrt(1.25));\ncase PuzzleUtils.TYPE_SKEWB:\nreturn (multiplier / 4) * 3;\ncase PuzzleUtils.TYPE_SQUARE1:\nreturn multiplier;\n}\nreturn multiplier;\n}"}
{"ids": "23838", "raw_code": "protected void closeCallbacksExceptListener(){\n  closeCacheCallback(getCacheLoader());\n  closeCacheCallback(getCacheWriter());\n  closeCacheCallback(getEvictionController());\n}"}
{"ids": "80201", "raw_code": "private void populateProfiles(final ProfileList profiles){\n  profilesComboBox.removeAllItems();\n  for (  Profile p : profiles) {\n    profilesComboBox.addItem(p);\n  }\n  final int count=profilesComboBox.getItemCount();\n  if (count != 0) {\n    profilesComboBox.setSelectedIndex(count - 1);\n  }\n}"}
{"ids": "19821", "raw_code": "private long checkFileHeader(BufferedFileDataInput bfdi) throws ReplicatorException, InterruptedException {\n  int magic=0;\n  short major=0;\n  short minor=0;\n  try {\n    bfdi.waitAvailable(HEADER_LENGTH,HEADER_WAIT_MILLIS);\n    magic=bfdi.readInt();\n    major=bfdi.readShort();\n    minor=bfdi.readShort();\n    baseSeqno=bfdi.readLong();\n  }\n catch (  IOException e) {\n    throw new THLException(\"Failed to read file header from  \" + file.getAbsolutePath(),e);\n  }\n  if (magic != MAGIC_NUMBER)   throw new THLException(\"Could not open file \" + file.getAbsolutePath() + \" : invalid magic number\");\n  if (major != MAJOR_VERSION)   throw new THLException(\"Could not open file \" + file.getAbsolutePath() + \" : incompatible major version\");\n  if (minor != MINOR_VERSION)   logger.warn(\"Minor version mismatch : file \" + file.getAbsolutePath() + \" using format \"+ major+ \".\"+ minor+ \" - Tungsten running version \"+ MAJOR_VERSION+ \".\"+ MINOR_VERSION);\n  return baseSeqno;\n}"}
{"ids": "64844", "raw_code": "public float realAbsolute(){\n  return Math.abs(mLeft);\n}"}
{"ids": "52844", "raw_code": "private ExtremumType extremumType(int n,double[] alpha_extreme,HyperBoundingBox interval){\n  if (n == alpha_extreme.length - 1) {\n    return extremumType;\n  }\n  double[] alpha_extreme_l=new double[alpha_extreme.length];\n  double[] alpha_extreme_r=new double[alpha_extreme.length];\n  double[] alpha_extreme_c=new double[alpha_extreme.length];\n  System.arraycopy(alpha_extreme,0,alpha_extreme_l,0,alpha_extreme.length);\n  System.arraycopy(alpha_extreme,0,alpha_extreme_r,0,alpha_extreme.length);\n  System.arraycopy(alpha_extreme,0,alpha_extreme_c,0,alpha_extreme.length);\n  double[] centroid=SpatialUtil.centroid(interval);\n  for (int i=0; i < n; i++) {\n    alpha_extreme_l[i]=centroid[i];\n    alpha_extreme_r[i]=centroid[i];\n    alpha_extreme_c[i]=centroid[i];\n  }\n  double intervalLength=interval.getMax(n) - interval.getMin(n);\n  alpha_extreme_l[n]=Math.random() * intervalLength + interval.getMin(n);\n  alpha_extreme_r[n]=Math.random() * intervalLength + interval.getMin(n);\n  double f_c=function(alpha_extreme_c);\n  double f_l=function(alpha_extreme_l);\n  double f_r=function(alpha_extreme_r);\n  if (f_l < f_c) {\n    if (f_r < f_c || Math.abs(f_r - f_c) < DELTA) {\n      return ExtremumType.MAXIMUM;\n    }\n  }\n  if (f_r < f_c) {\n    if (f_l < f_c || Math.abs(f_l - f_c) < DELTA) {\n      return ExtremumType.MAXIMUM;\n    }\n  }\n  if (f_l > f_c) {\n    if (f_r > f_c || Math.abs(f_r - f_c) < DELTA) {\n      return ExtremumType.MINIMUM;\n    }\n  }\n  if (f_r > f_c) {\n    if (f_l > f_c || Math.abs(f_l - f_c) < DELTA) {\n      return ExtremumType.MINIMUM;\n    }\n  }\n  if (Math.abs(f_l - f_c) < DELTA && Math.abs(f_r - f_c) < DELTA) {\n    return ExtremumType.CONSTANT;\n  }\n  throw new IllegalArgumentException(\"Houston, we have a problem!\\n\" + this + \"\\n\"+ \"f_l \"+ f_l+ \"\\n\"+ \"f_c \"+ f_c+ \"\\n\"+ \"f_r \"+ f_r+ \"\\n\"+ \"p \"+ vec.toArray()+ \"\\n\"+ \"alpha   \"+ FormatUtil.format(alpha_extreme_c)+ \"\\n\"+ \"alpha_l \"+ FormatUtil.format(alpha_extreme_l)+ \"\\n\"+ \"alpha_r \"+ FormatUtil.format(alpha_extreme_r)+ \"\\n\"+ \"n \"+ n);\n}"}
{"ids": "60193", "raw_code": "protected void processMouseEvent(MouseEvent e){\n  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {\n    finishEditing(true);\n  }\n  super.processMouseEvent(e);\n}"}
{"ids": "36852", "raw_code": "protected boolean hasAllTables() throws CouldntLoadDataException, InvalidDatabaseException {\n  NaviLogger.info(\"Checking the existence of the BinNavi database tables\");\n  final int counter=PostgreSQLHelpers.getTableCount(getConnection(),Lists.newArrayList(TABLES));\n  if (counter == 0) {\n    return false;\n  }\n else   if (counter == TABLES.length) {\n    return true;\n  }\n else {\n    throw new InvalidDatabaseException(String.format(\"Invalid database state (%d of %d tables found)\",counter,TABLES.length));\n  }\n}"}
{"ids": "34485", "raw_code": "public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException {\n  String[][] featureStringArray=toStrings(features);\n  Pipe pipe=transducer.getInputPipe();\n  Instance instance=new Instance(featureStringArray,null,null,null);\n  instance=pipe.instanceFrom(instance);\n  Sequence<?> data=(Sequence<?>)instance.getData();\n  Sequence<?> untypedSequence=transducer.transduce(data);\n  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);\n  List<String> returnValues=new ArrayList<String>();\n  for (int i=0; i < sequence.size(); i++) {\n    String encodedOutcome=sequence.get(i);\n    returnValues.add(outcomeEncoder.decode(encodedOutcome));\n  }\n  return returnValues;\n}"}
{"ids": "62968", "raw_code": "public void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){\n  onBindHeaderViewHolder(holder,position,Collections.emptyList());\n}"}
{"ids": "36397", "raw_code": "private void updateLineList(){\n  if (horizontalLineRadiobutton.isSelected()) {\n    setHorizontalLineSelected();\n  }\n else {\n    setVerticalLineSelected();\n  }\n  updateButtonStates();\n}"}
{"ids": "32926", "raw_code": "public void rectangle(double x,double y,double halfWidth,double halfHeight){\n  if (halfWidth < 0)   throw new IllegalArgumentException(\"half width can't be negative\");\n  if (halfHeight < 0)   throw new IllegalArgumentException(\"half height can't be negative\");\n  double xs=scaleX(x);\n  double ys=scaleY(y);\n  double ws=factorX(2 * halfWidth);\n  double hs=factorY(2 * halfHeight);\n  if (ws <= 1 && hs <= 1)   pixel(x,y);\n else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));\n  draw();\n}"}
{"ids": "43312", "raw_code": "public void replaceSplitElement(int aIndex,Fragment aSplitElement){\n  splits.set(aIndex,aSplitElement);\n}"}
{"ids": "3003", "raw_code": "private void startItemList(StringBuilder result,String rootId){\n  result.append(\"<div class=\\\"container\\\"\" + \"><div class=\\\"alone fakealone\\\" id=\\\"alone_ef_\" + rootId + \"\\\"></div><div class=\\\"justchildren fakejustchildren\\\">\");\n}"}
{"ids": "39653", "raw_code": "private static int numInitialSplits(long numRecords){\n  final int maxSplits=100;\n  final long recordsPerSplit=10000;\n  return (int)Math.min(maxSplits,numRecords / recordsPerSplit + 1);\n}"}
{"ids": "34834", "raw_code": "private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){\n  final DirectoryScanner ds=new DirectoryScanner();\n  ds.setFollowSymlinks(true);\n  ds.setBasedir(sourceDir);\n  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));\n  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));\n  ds.addDefaultExcludes();\n  try {\n    ds.scan();\n  }\n catch (  IllegalStateException e) {\n    return new String[0];\n  }\n  return ds.getIncludedFiles();\n}"}
{"ids": "51062", "raw_code": "public boolean hasSingleElement(){\n  return mSelectedWidgets.size() == 1;\n}"}
{"ids": "32342", "raw_code": "public IgfsPath(URI uri){\n  A.notNull(uri,\"uri\");\n  path=normalizePath(uri.getPath());\n}"}
{"ids": "7293", "raw_code": "public void addGetters(int assignedPropertyNumber,String propertyName){\n  for (  EventType type : knownTypes) {\n    EventPropertyGetter getter=type.getGetter(propertyName);\n    VariantPropertyGetterRow row=allGetters.get(type);\n    if (row == null) {\nsynchronized (this) {\n        row=new VariantPropertyGetterRow(type,new EventPropertyGetter[assignedPropertyNumber + 1]);\n        allGetters.put(type,row);\n      }\n    }\n    row.addGetter(assignedPropertyNumber,getter);\n  }\n  properties.add(propertyName);\n}"}
{"ids": "26965", "raw_code": "protected void markUsed(Entry entry){\n  entry.lastUsed=System.nanoTime();\n}"}
{"ids": "56191", "raw_code": "private void handleStateLeft(InetAddress endpoint,String[] pieces){\n  assert pieces.length >= 2;\n  Collection<Token> tokens=getTokensFor(endpoint);\n  if (logger.isDebugEnabled())   logger.debug(\"Node {} state left, tokens {}\",endpoint,tokens);\n  excise(tokens,endpoint,extractExpireTime(pieces));\n}"}
{"ids": "31807", "raw_code": "@SuppressWarnings(\"UnusedDeclaration\") public KeyValuePersistenceSettings(File settingsFile){\n  InputStream in;\n  try {\n    in=new FileInputStream(settingsFile);\n  }\n catch (  IOException e) {\n    throw new IgniteException(\"Failed to get input stream for Cassandra persistence settings file: \" + settingsFile.getAbsolutePath(),e);\n  }\n  init(loadSettings(in));\n}"}
{"ids": "33562", "raw_code": "public boolean containsWordBreakingChar(final @NonNull CharSequence input){\n  if (!TextUtils.isEmpty(input)) {\n    for (int i=0; i < input.length(); i++) {\n      char c=input.charAt(i);\n      if (isWordBreakingChar(c)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "71226", "raw_code": "private void checkInteriorIntersections(){\n  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {\n    SegmentString ss0=(SegmentString)i.next();\n    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {\n      SegmentString ss1=(SegmentString)j.next();\n      checkInteriorIntersections(ss0,ss1);\n    }\n  }\n}"}
{"ids": "70625", "raw_code": "private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){\n  return null;\n}"}
{"ids": "19784", "raw_code": "private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){\n  int cdcPos=cdcSpecs.size();\n  if (cdcColumnsAtFront)   cdcPos=0;\n  ColumnSpec spec=cdcRowChangeData.new ColumnSpec();\n  spec.setIndex(cdcPos + 1);\n  spec.setName(\"CDC_OP_TYPE\");\n  spec.setType(java.sql.Types.VARCHAR);\n  spec.setLength(1);\n  cdcSpecs.add(cdcPos,spec);\n  spec=cdcRowChangeData.new ColumnSpec();\n  spec.setIndex(cdcPos + 1 + 1);\n  spec.setName(\"CDC_TIMESTAMP\");\n  spec.setType(java.sql.Types.TIMESTAMP);\n  cdcSpecs.add(cdcPos + 1,spec);\n  spec=cdcRowChangeData.new ColumnSpec();\n  spec.setIndex(cdcPos + 1 + 2);\n  spec.setName(\"CDC_SEQUENCE_NUMBER\");\n  spec.setType(java.sql.Types.BIGINT);\n  cdcSpecs.add(cdcPos + 2,spec);\n}"}
{"ids": "50875", "raw_code": "public static String convertToJavaFieldName(String name){\n  int dotIndex=name.indexOf('.');\n  if (dotIndex >= 0) {\n    name=name.substring(0,dotIndex);\n  }\n  String[] split=name.split(\"[_-]\");\n  StringBuilder out=new StringBuilder();\n  boolean first=true;\n  for (  String section : split) {\n    if (first) {\n      first=false;\n      out.append(section);\n    }\n else {\n      out.append(StringUtil.capitalize(section));\n    }\n  }\n  return out.toString();\n}"}
{"ids": "59688", "raw_code": "protected void execute(String[] sqls,SQLiteDatabase db){\n  String throwSQL=\"\";\n  try {\n    if (sqls != null) {\n      for (      String sql : sqls) {\n        throwSQL=sql;\n        db.execSQL(BaseUtility.changeCase(sql));\n      }\n    }\n  }\n catch (  SQLException e) {\n    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);\n  }\n}"}
{"ids": "70344", "raw_code": "private void refreshDoneButton(boolean done){\n  butDone.setText(done ? Messages.getString(\"ChatLounge.notDone\") : Messages.getString(\"ChatLounge.imDone\"));\n}"}
{"ids": "17376", "raw_code": "private void createMigrationTaskPage(){\n  MigrationTaskEditor migrationTaskEditor=new MigrationTaskEditor(migrationTask,getContainer());\n  int index=addPage(migrationTaskEditor.getControl());\n  setPageText(index,\"Task\");\n  taskListeners.add(migrationTaskEditor);\n}"}
{"ids": "71884", "raw_code": "private boolean hasNext(Pattern pattern){\n  if (!hasNext()) {\n    return false;\n  }\n  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));\n  return matcher.find();\n}"}
{"ids": "76212", "raw_code": "void pushInt(int i){\nswitch (i) {\ncase -1:\n    mv.visitInsn(ICONST_M1);\n  return;\ncase 0:\nmv.visitInsn(ICONST_0);\nreturn;\ncase 1:\nmv.visitInsn(ICONST_1);\nreturn;\ncase 2:\nmv.visitInsn(ICONST_2);\nreturn;\ncase 3:\nmv.visitInsn(ICONST_3);\nreturn;\ncase 4:\nmv.visitInsn(ICONST_4);\nreturn;\ncase 5:\nmv.visitInsn(ICONST_5);\nreturn;\n}\nif (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {\nmv.visitIntInsn(BIPUSH,i);\nreturn;\n}\nif (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {\nmv.visitIntInsn(SIPUSH,i);\nreturn;\n}\nmv.visitLdcInsn(Integer.valueOf(i));\n}"}
{"ids": "63162", "raw_code": "public static String xmlNode(String name,String attributes,String content,boolean indent){\n  String start=attributes == null ? name : name + attributes;\n  if (content == null) {\n    return \"<\" + start + \"/>\\n\";\n  }\n  if (indent && content.indexOf('\\n') >= 0) {\n    content=\"\\n\" + indent(content);\n  }\n  return \"<\" + start + \">\"+ content+ \"</\"+ name+ \">\\n\";\n}"}
{"ids": "78821", "raw_code": "public void add(int position,@NonNull T item){\nsynchronized (lock) {\n    if (items == null) {\n      items=new ArrayList<>();\n    }\n    items.add(position,item);\n  }\n  if (notifyOnChange) {\n    notifyItemInserted(position);\n  }\n}"}
{"ids": "56891", "raw_code": "public List<String> splitStringWithDefaultDelimiterEscaped(String inputString){\n  String delimiter=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER);\n  String escapeChar=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER_ESCAPE_CHAR);\n  List<String> splitString=new ArrayList<>();\n  if (StringUtils.isNotBlank(inputString)) {\n    String regex=\"(?<!\" + Pattern.quote(escapeChar) + \")\"+ Pattern.quote(delimiter);\n    for (    String s : inputString.split(regex)) {\n      splitString.add(s.replace(escapeChar + delimiter,delimiter));\n    }\n  }\n  return splitString;\n}"}
{"ids": "60356", "raw_code": "protected final boolean readAvailableBlocking() throws IOException {\n  char[] buffer=myBuffer;\n  StringBuilder token=myTextBuffer;\n  token.setLength(0);\n  boolean read=false;\n  int n;\n  while ((n=myReader.read(buffer)) > 0) {\n    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);\n    read=true;\nsynchronized (myTextBuffer) {\n      processLine(buffer,token,n);\n    }\n    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);\n  }\n  submitToken();\n  return read;\n}"}
{"ids": "29023", "raw_code": "public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {\n  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();\n  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {\n    State state=i.next();\n    checkCircularity(state,obligation,basicBlockId);\n    ObligationSet obligationSet=state.getObligationSet();\n    obligationSet.remove(obligation);\n    if (!obligationSet.isEmpty()) {\n      updatedStateMap.put(obligationSet,state);\n    }\n  }\n  replaceMap(updatedStateMap);\n}"}
{"ids": "62286", "raw_code": "public ContentImpl createCompoundPackageContent(OleBlobImpl blob,String prettyName,String className,String typeName,ByteBuffer blobBb,int dataBlockLen){\n  return new CompoundContentImpl(blob,prettyName,className,typeName,blobBb.position(),dataBlockLen);\n}"}
{"ids": "38957", "raw_code": "protected boolean checkCoverage(){\n  int i;\n  int n;\n  int[] count;\n  Range r;\n  String attrIndex;\n  SubspaceClusterDefinition cl;\n  count=new int[getNumAttributes()];\n  for (i=0; i < getNumAttributes(); i++) {\n    for (n=0; n < getClusters().length; n++) {\n      cl=(SubspaceClusterDefinition)getClusters()[n];\n      r=new Range(cl.getAttrIndexRange());\n      r.setUpper(getNumAttributes());\n      if (r.isInRange(i)) {\n        count[i]++;\n      }\n    }\n  }\n  attrIndex=\"\";\n  for (i=0; i < count.length; i++) {\n    if (count[i] == 0) {\n      if (attrIndex.length() != 0) {\n        attrIndex+=\",\";\n      }\n      attrIndex+=(i + 1);\n    }\n  }\n  if (attrIndex.length() != 0) {\n    throw new IllegalArgumentException(\"The following attributes are not covered by a cluster \" + \"definition: \" + attrIndex + \"\\n\");\n  }\n  return true;\n}"}
{"ids": "42174", "raw_code": "private Set<Integer> findValues(String string){\n  Set<Integer> results=new TreeSet<Integer>();\n  for (  String str : string.split(\",\")) {\n    if (!str.equals(\"\")) {\n      results.add(findValue(str));\n    }\n  }\n  return results;\n}"}
{"ids": "67750", "raw_code": "@Deprecated public void append(final String name,final String value){\n  List<String> l=map.get(name);\n  if (l != null) {\n    l.add(value);\n  }\n else {\n    l=Lists.newArrayList(value);\n    map.put(name,l);\n  }\n}"}
{"ids": "7067", "raw_code": "public Statement between(Object former,Object later){\n  statement.append(\" BETWEEN \");\n  append(former);\n  statement.append(\" AND \");\n  append(later);\n  return this;\n}"}
{"ids": "27614", "raw_code": "public byte[] encode1(final String s){\n  final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length());\n  final int nwritten=uc.encode(s,tmp);\n  final int npack=LongPacker.getByteLength(nwritten);\n  final byte[] a=new byte[npack + nwritten];\n  final DataOutputBuffer dob=new DataOutputBuffer(0,a);\n  try {\n    dob.packLong(nwritten);\n    dob.append(tmp.array(),0,tmp.pos());\n    return a;\n  }\n  finally {\n    try {\n      dob.close();\n    }\n catch (    IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}"}
{"ids": "5744", "raw_code": "public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){\n  Map<Object,Long> occurrences=new HashMap<Object,Long>();\n  for (int i=0; i < gts.values; i++) {\n    Object value=GTSHelper.valueAtIndex(gts,i);\n    if (!occurrences.containsKey(value)) {\n      occurrences.put(value,1L);\n    }\n else {\n      occurrences.put(value,1L + occurrences.get(value));\n    }\n  }\n  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {\n    occurrences.put(null,(long)(gts.bucketcount - gts.values));\n  }\n  return occurrences;\n}"}
{"ids": "56377", "raw_code": "public QueryStringQueryBuilder field(String field){\n  if (fields == null) {\n    fields=new ArrayList<>();\n  }\n  fields.add(field);\n  return this;\n}"}
{"ids": "31526", "raw_code": "public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){\n  return a.thenCombine(b,function);\n}"}
{"ids": "19738", "raw_code": "protected String buildCreateSchemaStatement() throws ReplicatorException {\n  return null;\n}"}
{"ids": "55264", "raw_code": "public StreamInfoManager(TwitchApi api,StreamInfoListener listener){\n  this.listener=listener;\n  this.api=api;\n  pendingRequests=new HashMap<>();\n  invalidStreamInfo=new StreamInfo(\"invalid\",listener);\n  invalidStreamInfo.setRequested();\n}"}
{"ids": "53556", "raw_code": "public Sentence asSentence(){\n  return Sentence.newConjunction(sentences);\n}"}
{"ids": "80040", "raw_code": "public boolean isPronoun(){\n  return typeString.contains(SUFFIX_PRONOUN);\n}"}
{"ids": "81838", "raw_code": "public static Vector tokenizeString(String source,String separator){\n  if (separator.length() == 1) {\n    return tokenizeString(source,separator.charAt(0));\n  }\n  Vector tokenized=new Vector();\n  int len=source.length();\n  StringBuilder buf=new StringBuilder();\n  for (int iter=0; iter < len; iter++) {\n    char current=source.charAt(iter);\n    if (separator.indexOf(current) > -1) {\n      if (buf.length() > 0) {\n        tokenized.addElement(buf.toString());\n        buf=new StringBuilder();\n      }\n    }\n else {\n      buf.append(current);\n    }\n  }\n  if (buf.length() > 0) {\n    tokenized.addElement(buf.toString());\n  }\n  return tokenized;\n}"}
{"ids": "59732", "raw_code": "public void update(){\n  if (lastTime != -1L) {\n    long delta=System.nanoTime() - lastTime;\n    rollingAverage.addValue(delta);\n  }\n  lastTime=System.nanoTime();\n}"}
{"ids": "24698", "raw_code": "public List<ValidationErrorMessage> validate(){\n  errorMessageIds.clear();\n  if (paymentProduct == null) {\n    throw new NullPointerException(\"Error validating PaymentRequest, please set a paymentProduct first.\");\n  }\n  for (  PaymentProductField field : paymentProduct.getPaymentProductFields()) {\n    if (!isFieldInAccountOnFileAndNotAltered(field)) {\n      errorMessageIds.addAll(field.validateValue(getValue(field.getId())));\n    }\n  }\n  return errorMessageIds;\n}"}
{"ids": "84252", "raw_code": "CryptoResult(final T result,final List<K> masterKeys,final CiphertextHeaders headers){\n  result_=result;\n  masterKeys_=Collections.unmodifiableList(masterKeys);\n  headers_=headers;\n  encryptionContext_=headers_.getEncryptionContextMap();\n}"}
{"ids": "9460", "raw_code": "public void stateChanged(ChangeEvent e){\n  if (ignoreUpdate) {\n    return;\n  }\n  double value=(double)(1800 - setpointSlider.getValue()) / 10;\n  setSetPoint(value);\n  sim.setSetPoint(value);\n}"}
{"ids": "67709", "raw_code": "public static String[] parseDelimitedList(String list,char delimiter){\n  String delim=\"\" + delimiter;\n  StringTokenizer st=new StringTokenizer(list + delim + \" \",delim,true);\n  ArrayList<String> v=new ArrayList<String>();\n  String lastToken=\"\";\n  String word=\"\";\n  while (st.hasMoreTokens()) {\n    String tok=st.nextToken();\n    if (lastToken != null) {\n      if (tok.equals(delim)) {\n        word=word + lastToken;\n        if (lastToken.equals(delim))         tok=null;\n      }\n else {\n        if (!word.equals(\"\"))         v.add(word);\n        word=\"\";\n      }\n    }\n    lastToken=tok;\n  }\n  return v.toArray(new String[0]);\n}"}
{"ids": "73376", "raw_code": "private void initializeLayout(){\n  GridLayout gl=new GridLayout(0,2);\n  gl.setVgap(5);\n  setLayout(gl);\n  add(new JLabel(\"Frozen: \"));\n  add(frozenDD);\n  add(new JLabel(\"Upper Bound:\"));\n  add(tfUpBound);\n  add(new JLabel(\"Lower Bound\"));\n  add(tfLowBound);\n  add(new JLabel(\"Increment:\"));\n  add(tfIncrement);\n  add(new JLabel(\"Delay:\"));\n  add(tfDelay);\n  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));\n}"}
{"ids": "62095", "raw_code": "@Override public boolean isRunning(){\n  return (frame != null && frame.isVisible());\n}"}
{"ids": "82892", "raw_code": "public Result result(SqlNode node,Collection<Clause> clauses,RelNode rel){\n  final String alias2=SqlValidatorUtil.getAlias(node,-1);\n  final String alias3=alias2 != null ? alias2 : \"t\";\n  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);\n  final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null;\n  return new Result(node,clauses,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType())));\n}"}
{"ids": "70858", "raw_code": "private static void _trustAllHttpsCertificates(){\n  SSLContext context;\n  if (_trustManagers == null) {\n    _trustManagers=new TrustManager[]{new FakeX509TrustManager()};\n  }\n  try {\n    context=SSLContext.getInstance(\"SSL\");\n    context.init(null,_trustManagers,new SecureRandom());\n  }\n catch (  GeneralSecurityException gse) {\n    throw new IllegalStateException(gse.getMessage());\n  }\n  HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());\n}"}
{"ids": "73479", "raw_code": "private void addInternalListeners(){\n  cbDistribution.addItemListener(cbItemListener);\n}"}
{"ids": "46977", "raw_code": "private void bappend(char ch){\n  try {\n    mBuff[++mBuffIdx]=ch;\n  }\n catch (  Exception exp) {\n    char buff[]=new char[mBuff.length << 1];\n    System.arraycopy(mBuff,0,buff,0,mBuff.length);\n    mBuff=buff;\n    mBuff[mBuffIdx]=ch;\n  }\n}"}
{"ids": "30969", "raw_code": "public void initializeOwnerReferencesForField(StateManager sm,FieldMetaData fmd){\n  if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {\n    Collection<?> collection=(Collection<?>)sm.fetch(fmd.getIndex());\n    if (collection != null) {\n      for (      Object item : collection) {\n        if (item != null) {\n          _relationsManager.setOwnerStateManagerForPersistentInstance(item,sm,fmd);\n        }\n      }\n    }\n  }\n else   if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE || fmd.isEmbeddedPC()) {\n    Object value=sm.fetch(fmd.getIndex());\n    if (value != null) {\n      _relationsManager.setOwnerStateManagerForPersistentInstance(value,sm,fmd);\n    }\n  }\n}"}
{"ids": "71088", "raw_code": "public Node(Coordinate pt){\n  this(pt,new DirectedEdgeStar());\n}"}
{"ids": "55293", "raw_code": "public synchronized void increase(){\n  if (accuracy > 0) {\n    long timePassed=System.currentTimeMillis() - lastAdded;\n    if (timePassed > accuracy) {\n      clearUp();\n      if (count > 0) {\n        data.addFirst(lastAdded + accuracy);\n      }\n      lastAdded=System.currentTimeMillis();\n      count=0;\n    }\n    count++;\n  }\n else {\n    clearUp();\n    data.addFirst(System.currentTimeMillis());\n  }\n}"}
{"ids": "60260", "raw_code": "public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {\n  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {\n    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);\n    handler.addParameters(\"HEAD\");\n    handler.endOptions();\n    handler.addParameters(paths);\n    handler.run();\n  }\n}"}
{"ids": "20801", "raw_code": "public TaggedValueIterator(final String aLine,final boolean attemptFirstWord,final String... tags){\n  this.aLine=aLine;\n  this.attemptFirstWord=attemptFirstWord;\n  this.tags=tags;\n  tagPos=0;\n  nextResult=getNextResult();\n  if (attemptFirstWord) {\n    int a=0;\n    while (a < aLine.length()) {\n      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++;\n else       break;\n    }\n    int b=a + 1;\n    while (b < aLine.length()) {\n      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++;\n else       break;\n    }\n    if (b - a > 4) {\n      nextResult=aLine.substring(a,b);\n    }\n    tagPos=b;\n  }\n}"}
{"ids": "17335", "raw_code": "public void ascendTree(){\n  if (null != parentPath) {\n    parentPath.append(PARENT_PATH);\n    return;\n  }\n  File parentTree=calcParentTree();\n  if (null != parentTree) {\n    treeFile=parentTree;\n    return;\n  }\n  parentPath=new StringBuilder(provideLastName());\n  parentPath.append(PARENT_PATH);\n}"}
{"ids": "3705", "raw_code": "public boolean canRead(){\n  return _is != null;\n}"}
{"ids": "1930", "raw_code": "void onItemDismissed(final int position){\n  final T removed=mData.get(position);\n  final boolean wasRemoved=remove(position);\n  if (wasRemoved && mDataChangeListener != null) {\n    mDataChangeListener.onItemRemoved(removed,position);\n  }\n}"}
{"ids": "59740", "raw_code": "public static double normalPDF(double x,double variance,double meanValue){\n  double standardDeviation=Math.sqrt(variance);\n  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));\n}"}
{"ids": "42383", "raw_code": "private void clearRegisters(Instruction start,Instruction end){\n  for (Instruction p=start; ; p=p.nextInstructionInCodeOrder()) {\n    for (Enumeration<Operand> ops=p.getOperands(); ops.hasMoreElements(); ) {\n      Operand op=ops.nextElement();\n      if (op instanceof RegisterOperand) {\n        RegisterOperand rOp=(RegisterOperand)op;\n        clearDepGraphNodeForRegister(rOp.getRegister());\n      }\n    }\n    if (p == end)     break;\n  }\n  for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) {\n    Register r=e.nextElement();\n    clearDepGraphNodeForRegister(r);\n  }\n}"}
{"ids": "36420", "raw_code": "public void fireAnnotationSelected(WorkflowAnnotation anno){\n  List<WorkflowAnnotation> list=new LinkedList<>();\n  list.add(anno);\n  fireAnnotationsChanged(AnnotationEvent.SELECTED_ANNOTATION_CHANGED,list);\n}"}
{"ids": "56138", "raw_code": "public boolean updateStatsAndReturnIfAllowed(){\n  long now=SystemClock.elapsedRealtime();\n  long deltaMs=now - mLastRequestTimestamp;\n  if (deltaMs < mDelayMs)   return false;\n  mLastRequestTimestamp=now;\n  if (deltaMs < 2 * mDelayMs) {\n    mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2);\n  }\n else {\n    mDelayMs=MIN_DELAY;\n  }\n  return true;\n}"}
{"ids": "16025", "raw_code": "public boolean verifyServerEvidenceMessage(BigInteger serverM2) throws CryptoException {\n  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {\n    throw new CryptoException(\"Impossible to compute and verify M2: \" + \"some data are missing from the previous operations (A,M1,S)\");\n  }\n  BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S);\n  if (computedM2.equals(serverM2)) {\n    this.M2=serverM2;\n    return true;\n  }\n  return false;\n}"}
{"ids": "46450", "raw_code": "public void handleText(String text){\n  if (skippingCharacters > 0) {\n    if (skippingCharacters >= text.length()) {\n      skippingCharacters-=text.length();\n      return;\n    }\n else {\n      text=text.substring(skippingCharacters);\n      skippingCharacters=0;\n    }\n  }\n  if (rtfDestination != null) {\n    rtfDestination.handleText(text);\n    return;\n  }\n  warning(\"Text with no destination. oops.\");\n}"}
{"ids": "27328", "raw_code": "public final boolean remove(final URI serviceURI){\n  boolean modified=false;\nsynchronized (this) {\n    if (aliases.remove(serviceURI) != null) {\n      modified=true;\n    }\n    final ServiceFactory factory=services.remove(serviceURI);\n    if (factory != null) {\n      modified=true;\n      if (factory instanceof CustomServiceFactory) {\n        customServices.remove(factory);\n      }\n    }\n  }\n  return modified;\n}"}
{"ids": "60447", "raw_code": "@Nullable private static String referenceToAttribute(String attrib,boolean includeDummies){\n  while (attrib.startsWith(\"\\\\\\\\\")) {\n    attrib=attrib.substring(2);\n  }\n  if (attrib.startsWith(\"\\\\$\")) {\n    if (includeDummies) {\n      attrib=attrib.substring(1);\n    }\n else     return null;\n  }\n  if (!StringUtil.startsWithChar(attrib,'$')) {\n    return null;\n  }\n  attrib=attrib.substring(1);\n  if (StringUtil.startsWithChar(attrib,'{')) {\n    String cleanAttribute=null;\n    for (int i=1; i < attrib.length(); i++) {\n      char currChar=attrib.charAt(i);\n      if (currChar == '{' || currChar == '.') {\n        cleanAttribute=null;\n        break;\n      }\n else       if (currChar == '}') {\n        cleanAttribute=attrib.substring(1,i);\n        break;\n      }\n    }\n    attrib=cleanAttribute;\n  }\n else {\n    for (int i=0; i < attrib.length(); i++) {\n      char currChar=attrib.charAt(i);\n      if (currChar == '{' || currChar == '}' || currChar == '.') {\n        attrib=attrib.substring(0,i);\n        break;\n      }\n    }\n  }\n  return attrib;\n}"}
{"ids": "69142", "raw_code": "public void record(RecordBuilderImpl recordBuilder){\n  storeBitmap(recordBuilder);\n  OutputStream viewHierarchyDump=null;\n  try {\n    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());\n    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);\n    mAlbum.addRecord(recordBuilder);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n finally {\n    if (viewHierarchyDump != null) {\n      try {\n        viewHierarchyDump.close();\n      }\n catch (      IOException e) {\n        Log.e(\"ScreenshotImpl\",\"Exception closing viewHierarchyDump\",e);\n      }\n    }\n  }\n}"}
{"ids": "39498", "raw_code": "protected boolean isCorrectMethod(Method method,Object[] args){\n  return (proxySignature.equals(method.getName()) && args.length == 1);\n}"}
{"ids": "22206", "raw_code": "public void checkBackupInfo(final File backupInfoFile,boolean backupInMultiVdc){\n  try (InputStream fis=new FileInputStream(backupInfoFile)){\n    Properties properties=new Properties();\n    properties.load(fis);\n    checkVersion(properties);\n    checkHosts(properties,backupInMultiVdc);\n  }\n catch (  IOException ex) {\n    log.warn(\"Unable to check backup Info\",ex);\n  }\n}"}
{"ids": "47567", "raw_code": "static String toLowerCase(String s){\n  int len=s.length();\n  StringBuilder sb=null;\n  for (int i=0; i < len; i++) {\n    char c=s.charAt(i);\n    if ((c >= 'a' && c <= 'z') || (c == '.')) {\n      if (sb != null)       sb.append(c);\n    }\n else     if ((c >= '0' && c <= '9') || (c == '-')) {\n      if (sb != null)       sb.append(c);\n    }\n else     if (c >= 'A' && c <= 'Z') {\n      if (sb == null) {\n        sb=new StringBuilder(len);\n        sb.append(s,0,i);\n      }\n      sb.append((char)(c - CASE_DIFF));\n    }\n else {\n      throw new IllegalArgumentException(\"Invalid characters in hostname\");\n    }\n  }\n  return sb == null ? s : sb.toString();\n}"}
{"ids": "7206", "raw_code": "public static void assertProps(UniformPair<EventBean> received,String[] propertyNames,Object[] expectedInsert,Object[] expectedRemoved){\n  assertProps(received.getFirst(),propertyNames,expectedInsert);\n  assertProps(received.getSecond(),propertyNames,expectedRemoved);\n}"}
{"ids": "51264", "raw_code": "public int size(){\n  return al.size();\n}"}
{"ids": "67720", "raw_code": "public static String toUpperCase(String src){\n  if (src == null) {\n    return null;\n  }\n else {\n    return src.toUpperCase();\n  }\n}"}
{"ids": "52017", "raw_code": "public final Iterator<KnowledgeEdge> requiredEdgesIterator(){\n  Set<KnowledgeEdge> edges=new HashSet<>();\n  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {\n    final Set<MyNode> first=o.getFirst();\n    for (    MyNode s1 : first) {\n      final Set<MyNode> second=o.getSecond();\n      for (      MyNode s2 : second) {\n        if (!s1.equals(s2)) {\n          edges.add(new KnowledgeEdge(s1.getName(),s2.getName()));\n        }\n      }\n    }\n  }\n  return edges.iterator();\n}"}
{"ids": "5964", "raw_code": "@Deprecated public void unlock(LockState<T> lockState){\n  if (lockState == null) {\n    throw new IllegalArgumentException(\"lockState is null\");\n  }\n  if (lockState.setLock != this) {\n    throw new IllegalArgumentException(\"The lockState passed was not from this instance\");\n  }\n  if (lockState.thread != Thread.currentThread()) {\n    throw new IllegalArgumentException(\"The thread that created this lockState is not the same as the one unlocking it\");\n  }\n  threadSet.remove(Thread.currentThread());\n  for (  ReentrantLock lock : lockState.locks) {\n    lock.unlock();\n  }\n}"}
{"ids": "16490", "raw_code": "private static String forceNumberStringToTwoDigits(String text){\n  while (text.length() < 2) {\n    text=\"0\" + text;\n  }\n  if (text.length() > 2) {\n    text=text.substring(text.length() - 2,text.length());\n  }\n  return text;\n}"}
{"ids": "80424", "raw_code": "public void addDropItem(final String name,final double probability,final int min,final int max){\n  dropsItems.add(new DropItem(name,probability,min,max));\n}"}
{"ids": "82949", "raw_code": "public static <E extends Identifiable>List<E> findByPrimaryKeys(EntityManager em,List<BigInteger> ids,Class<E> type){\n  requireArgument(em != null,\"The entity manager cannot be null.\");\n  requireArgument(ids != null && !ids.isEmpty(),\"IDs cannot be null or empty.\");\n  requireArgument(type != null,\"The entity type cannot be null.\");\n  TypedQuery<E> query=em.createNamedQuery(\"JPAEntity.findByPrimaryKeys\",type);\n  query.setHint(\"javax.persistence.cache.storeMode\",\"REFRESH\");\n  try {\n    query.setParameter(\"ids\",ids);\n    query.setParameter(\"deleted\",false);\n    return query.getResultList();\n  }\n catch (  NoResultException ex) {\n    return new ArrayList<>(0);\n  }\n}"}
{"ids": "47010", "raw_code": "public int hashCode(){\n  int h=hash;\n  if (h == -1) {\n    try {\n      h=Arrays.hashCode(X509CertImpl.getEncodedInternal(this));\n    }\n catch (    CertificateException e) {\n      h=0;\n    }\n    hash=h;\n  }\n  return h;\n}"}
{"ids": "67416", "raw_code": "public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup,final float finishedPercentage){\n  float tmpFinishedPercentage=0;\nswitch (rolloutGroup.getStatus()) {\ncase READY:\ncase SCHEDULED:\ncase ERROR:\n    tmpFinishedPercentage=0.0F;\n  break;\ncase FINISHED:\ntmpFinishedPercentage=100.0F;\nbreak;\ncase RUNNING:\ntmpFinishedPercentage=finishedPercentage;\nbreak;\ndefault :\nbreak;\n}\nreturn String.format(\"%.1f\",tmpFinishedPercentage);\n}"}
{"ids": "60001", "raw_code": "public static String generateHostName(String vmName,String hostId){\n  String hostname=vmName + '-' + hostId;\n  Preconditions.checkState(hostname.equals(hostname.toLowerCase()),\"hostname should not contain upper case characters\");\n  return hostname;\n}"}
{"ids": "86826", "raw_code": "protected void transferFromFile(File idFile) throws IOException {\n  try (BufferedReader br=new BufferedReader(new FileReader(idFile))){\n    String line;\n    while ((line=br.readLine()) != null) {\n      line=line.trim();\n      if (line.length() > 0) {\n        transfer(line);\n      }\n    }\n  }\n }"}
{"ids": "10578", "raw_code": "private static String unwrap(String expression){\n  if (expression.startsWith(\"((\")) {\n    expression=expression.substring(expression.indexOf(\")\") + 1,expression.length() - 1);\n    if (expression.endsWith(\"]\")) {\n      expression=expression.substring(0,expression.lastIndexOf(\"[\"));\n    }\n else {\n      expression=expression.substring(0,expression.lastIndexOf(\".\"));\n    }\n  }\n  return expression;\n}"}
{"ids": "81893", "raw_code": "public boolean areAllSegmentPresent(int datasetSize){\n  return mPieSegmentList.size() == datasetSize;\n}"}
{"ids": "55619", "raw_code": "protected int drawNextEventTimeDiff(){\n  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);\n  return msgInterval[0] + timeDiff;\n}"}
{"ids": "86671", "raw_code": "public static String toBits(final long x){\n  final StringBuilder sb=new StringBuilder();\n  long t=x;\n  for (int i=0; i < 64; i++) {\n    if ((i & 7) == 0 && i > 0) {\n      sb.append(\":\");\n    }\n    sb.append(t < 0 ? \"1\" : \"0\");\n    t=t << 1;\n  }\n  assert t == 0;\n  return sb.toString();\n}"}
{"ids": "19645", "raw_code": "public MessageTokenizer(IDiscordClient client,String content){\n  if (content == null)   throw new IllegalArgumentException(\"Content cannot be null!\");\n  if (content.length() == 0)   throw new IllegalArgumentException(\"Content must have length!\");\n  if (client == null)   throw new IllegalArgumentException(\"Client cannot be null!\");\n  this.content=content;\n  this.client=client;\n  stepForward(0);\n}"}
{"ids": "9401", "raw_code": "public void await(int ID) throws InterruptedException {\n  if (parties == 1)   return;\n  final boolean startCondition=competitionCondition;\n  int competingFor=(locks.length * 2 - 1 - ID) / 2;\n  while (competingFor >= 0) {\n    final Lock node=locks[competingFor];\n    if (node.tryLock()) {\nsynchronized (node) {\n        while (competitionCondition == startCondition)         node.wait();\n      }\n      node.unlock();\n      wakeUpTarget(competingFor * 2 + 1);\n      wakeUpTarget(competingFor * 2 + 2);\n      return;\n    }\n else {\n      if (competingFor == 0)       break;\n      competingFor=(competingFor - 1) / 2;\n    }\n  }\n  competitionCondition=!competitionCondition;\n  wakeUpTarget(0);\n}"}
{"ids": "4395", "raw_code": "private void loadTranslationsCacheIfEmpty(){\n  if (translationCache.isEmpty()) {\n    for (    ObjectTranslation translation : translations) {\n      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {\n        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());\n        translationCache.put(key,translation.getValue());\n      }\n    }\n  }\n}"}
{"ids": "11281", "raw_code": "public NavMouseMode(boolean shouldConsumeEvents){\n  super(modeID,shouldConsumeEvents);\n  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\n  rectAttributes.setLinePaint(Color.GRAY);\n  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);\n  rectAttributes.setMatted(true);\n}"}
{"ids": "22824", "raw_code": "public void addEvent(SimEvent newEvent){\n  newEvent.setSerial(serial++);\n  sortedSet.add(newEvent);\n}"}
{"ids": "35910", "raw_code": "public static File createTempPath(String path) throws IOException {\n  String sep=File.separator;\n  File tempDir=new File(System.getProperty(\"java.io.tmpdir\") + sep + path);\n  if (!tempDir.exists())   if (!tempDir.mkdirs()) {\n    boolean status=tempDir.delete();\n    throw new IOException(\"creation failed for dir \" + tempDir + \"status = \"+ status);\n  }\n  tempDir.deleteOnExit();\n  return tempDir;\n}"}
{"ids": "67853", "raw_code": "public void hspan(double start,double end,Paint color,String legend){\n  LegendText legendText=new LegendText(color,legend);\n  comments.add(legendText);\n  plotElements.add(new HSpan(start,end,color,legendText));\n}"}
{"ids": "5145", "raw_code": "public StateInteractive extent_to_whole_connections(){\n  Set<BrdItem> selected_items=new TreeSet<BrdItem>();\n  for (  BrdItem curr_item : items_list) {\n    if (curr_item instanceof BrdConnectable) {\n      selected_items.addAll(curr_item.get_connection_items());\n    }\n  }\n  if (selected_items.isEmpty()) {\n    return return_state;\n  }\n  items_list=selected_items;\n  actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_CONNECTIONS);\n  filter();\n  i_brd.repaint();\n  return this;\n}"}
{"ids": "27368", "raw_code": "public static IKeyBuilder newInstance(int capacity,CollatorEnum collatorChoice,Locale locale,Object strength,DecompositionEnum mode){\n  if (collatorChoice == CollatorEnum.ASCII) {\n    return new KeyBuilder(capacity);\n  }\n  if (locale == null) {\n    locale=Locale.getDefault();\n    if (log.isInfoEnabled())     log.info(\"Using default locale: \" + locale.getDisplayName());\n  }\n  final boolean icu=collatorChoice == CollatorEnum.ICU;\n  if (icu && !DefaultKeyBuilderFactory.isICUAvailable()) {\n    throw new UnsupportedOperationException(DefaultKeyBuilderFactory.ICU_NOT_AVAILABLE);\n  }\n  final byte[] buf=createBuffer(capacity);\n  final int len=0;\nswitch (collatorChoice) {\ncase ICU:\n    return new KeyBuilder(new ICUSortKeyGenerator(locale,strength,mode),len,buf);\ncase JDK:\n  return new KeyBuilder(new JDKSortKeyGenerator(locale,strength,mode),len,buf);\ndefault :\nthrow new UnsupportedOperationException(\"Collator not supported: \" + collatorChoice);\n}\n}"}
{"ids": "10928", "raw_code": "protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException {\n  Properties props=new Properties();\n  props.load(is);\n  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);\n  String oldPrefix=getPropertyPrefix();\n  setProperties(null,props);\n  setPropertyPrefix(oldPrefix);\n}"}
{"ids": "63539", "raw_code": "Connection openNewConnection() throws SQLException {\n  Connection newConn=DriverManager.getConnection(url,user,password);\n  if (url.startsWith(\"jdbc:derby:\")) {\n    try (Statement s=newConn.createStatement()){\n    }\n   }\n else   if (url.startsWith(\"jdbc:hsqldb:\")) {\n    try (Statement s=newConn.createStatement()){\n      s.execute(\"SET WRITE_DELAY 1\");\n    }\n   }\n  return newConn;\n}"}
{"ids": "57146", "raw_code": "protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){\n  TopologyInstance ti=getCurrentInstance(false);\n  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);\n  if (switches == null) {\n    switches=new HashSet<Long>();\n    switches.add(pinSwitch);\n  }\n  for (  long sid : switches) {\n    IOFSwitch sw=floodlightProvider.getSwitch(sid);\n    if (sw == null)     continue;\n    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();\n    if (enabledPorts == null)     continue;\n    Set<Short> ports=new HashSet<Short>();\n    ports.addAll(enabledPorts);\n    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);\n    if (portsKnownToTopo != null) {\n      for (      short p : portsKnownToTopo) {\n        NodePortTuple npt=new NodePortTuple(sid,p);\n        if (ti.isBroadcastDomainPort(npt) == false) {\n          ports.remove(p);\n        }\n      }\n    }\n    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);\n    if (portsToEliminate != null) {\n      ports.removeAll(portsToEliminate);\n    }\n    if (pinSwitch == sid) {\n      ports.remove(pi.getInPort());\n    }\n    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);\n  }\n}"}
{"ids": "80129", "raw_code": "public void sleepMillis(final long millis){\n  try {\n    Thread.sleep(millis);\n  }\n catch (  final InterruptedException e) {\n    logger.error(e,e);\n  }\n}"}
{"ids": "70013", "raw_code": "private static void verifyWriteSetNotFound(final BTree btree){\n  log.info(\"\");\n  for (int i=0; i < 1000; i++) {\n    if (btree.contains(i)) {\n      throw new RuntimeException(\"Not expecting: key=\" + i);\n    }\n  }\n}"}
{"ids": "9194", "raw_code": "private double calculateEntropy(double... masses){\n  double res=0;\n  for (  double d : masses) {\n    res-=(d == 0) ? 0 : d * Math.log(d);\n  }\n  return res / LOG2;\n}"}
{"ids": "38365", "raw_code": "@Override public void mousePressed(MouseEvent e){\n  m_frameLimiter.setRepeats(true);\n  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {\n    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {\n      m_mouseState=2;\n    }\n else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {\n      m_oldMousePos.width=e.getX();\n      m_oldMousePos.height=e.getY();\n      m_newMousePos.width=e.getX();\n      m_newMousePos.height=e.getY();\n      m_mouseState=3;\n      Graphics g=getGraphics();\n      if (m_ZoomBoxColor == null) {\n        g.setColor(Color.black);\n      }\n else {\n        g.setColor(m_ZoomBoxColor);\n      }\n      if (m_ZoomBoxXORColor == null) {\n        g.setXORMode(Color.white);\n      }\n else {\n        g.setXORMode(m_ZoomBoxXORColor);\n      }\n      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);\n      g.dispose();\n    }\n else {\n      m_oldMousePos.width=e.getX();\n      m_oldMousePos.height=e.getY();\n      m_newMousePos.width=e.getX();\n      m_newMousePos.height=e.getY();\n      m_mouseState=1;\n      m_frameLimiter.start();\n    }\n  }\n else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {\n    saveComponent();\n  }\n else   if (m_mouseState == 0 && m_scaling == 0) {\n  }\n}"}
{"ids": "41451", "raw_code": "private static double parseDoubleValue(String parseString,String openTag,String closeTag,DataTypeValidationException exception) throws DataTypeValidationException {\n  String tagValue;\n  tagValue=parseStringValue(parseString,openTag,closeTag,exception);\n  double doubleValue;\n  try {\n    doubleValue=Double.parseDouble(tagValue);\n  }\n catch (  NumberFormatException e) {\n    throw e;\n  }\n  return doubleValue;\n}"}
{"ids": "54768", "raw_code": "public void putString(String s) throws ArrayIndexOutOfBoundsException, UnsupportedEncodingException {\n  byte[] bytes=s.getBytes(\"UTF-8\");\n  int length=bytes.length;\n  int endAt=m_index + length + 1;\n  if (endAt > m_content.length)   throw new ArrayIndexOutOfBoundsException(endAt + \" > \" + m_content.length);\n  System.arraycopy(bytes,0,m_content,m_index,length);\n  m_index+=length;\n  m_content[m_index++]='\\0';\n  debugAppendString(s);\n}"}
{"ids": "13063", "raw_code": "@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {\n  if (fErrorHandler != null) {\n    SAXParseException saxException=createSAXParseException(exception);\n    try {\n      fErrorHandler.error(saxException);\n    }\n catch (    SAXParseException e) {\n      throw createXMLParseException(e);\n    }\ncatch (    SAXException e) {\n      throw createXNIException(e);\n    }\n  }\n}"}
{"ids": "37245", "raw_code": "public CStatusPanel(final BackEndDebuggerProvider debuggerProvider){\n  super(new BorderLayout());\n  Preconditions.checkNotNull(debuggerProvider,\"IE1094: Debugger provider argument can not be null\");\n  m_label.setForeground(Color.BLACK);\n  add(m_label);\n  m_synchronizer=new CStatusLabelSynchronizer(m_label,debuggerProvider);\n}"}
{"ids": "69034", "raw_code": "@Override public boolean open(String access){\n  if (access.equals(\"r\")) {\n    try {\n      iStream=new FileImageInputStream(new File(filePath));\n      parser=new LabelParser();\n      metadata=parser.parseHeader(iStream);\n      iStream.close();\n      iStream=null;\n    }\n catch (    IOException e) {\n      try {\n        iStream.close();\n      }\n catch (      Exception x) {\n      }\n      return (false);\n    }\n  }\n  return (super.open(access));\n}"}
{"ids": "32391", "raw_code": "@Nullable public String fileName(){\n  return JavaLogger.fileName(delegate);\n}"}
{"ids": "43962", "raw_code": "public static BNode parseBNode(String nTriplesBNode,ValueFactory valueFactory) throws IllegalArgumentException {\n  if (nTriplesBNode.startsWith(\"_:\")) {\n    return valueFactory.createBNode(nTriplesBNode.substring(2));\n  }\n else {\n    throw new IllegalArgumentException(\"Not a legal N-Triples Blank Node: \" + nTriplesBNode);\n  }\n}"}
{"ids": "63217", "raw_code": "public void freeObject(int id){\n  if (cacheId == id) {\n    cacheId=-1;\n    cache=null;\n  }\n  map.remove(id);\n}"}
{"ids": "51812", "raw_code": "private void stretchViewVertically(View view,int crossSize){\n  LayoutParams lp=(LayoutParams)view.getLayoutParams();\n  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;\n  newHeight=Math.max(newHeight,0);\n  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));\n}"}
{"ids": "76612", "raw_code": "public static InetAddress hexToInet6Address(String addrHexString) throws IllegalArgumentException {\n  try {\n    return numericToInetAddress(String.format(\"%s:%s:%s:%s:%s:%s:%s:%s\",addrHexString.substring(0,4),addrHexString.substring(4,8),addrHexString.substring(8,12),addrHexString.substring(12,16),addrHexString.substring(16,20),addrHexString.substring(20,24),addrHexString.substring(24,28),addrHexString.substring(28,32)));\n  }\n catch (  Exception e) {\n    Log.e(\"NetworkUtils\",\"error in hexToInet6Address(\" + addrHexString + \"): \"+ e);\n    throw new IllegalArgumentException(e);\n  }\n}"}
{"ids": "51518", "raw_code": "public double readDouble() throws IOException {\n  return primitiveTypes.readDouble();\n}"}
{"ids": "80316", "raw_code": "private boolean isAtMaximum(Adjustable bar){\n  return (bar.getValue() + bar.getVisibleAmount() >= bar.getMaximum());\n}"}
{"ids": "10890", "raw_code": "protected void parseAndAddMapTileSet(URL tileSetProperties) throws IOException, MalformedURLException {\n  Properties descProps=new Properties();\n  Logger logger=getLogger();\n  logger.info(\"going to read props\");\n  InputStream descURLStream=tileSetProperties.openStream();\n  descProps.load(descURLStream);\n  logger.info(\"loaded \" + tileSetProperties.toString() + \" \"+ descProps.toString());\n  MapTileSet mts=createMapTileSetFromProperties(descProps);\n  if (mts != null && mts.allGood()) {\n    String mtsName=mts.getName();\n    mapTileSets.put(mts.getName(),mts);\n    logger.info(\"Adding \" + mtsName + \" dataset\");\n  }\n  descURLStream.close();\n}"}
{"ids": "8893", "raw_code": "public void enablePan(BluetoothAdapter adapter){\n  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);\n  assertNotNull(mPan);\n  long start=System.currentTimeMillis();\n  mPan.setBluetoothTethering(true);\n  long stop=System.currentTimeMillis();\n  assertTrue(mPan.isTetheringOn());\n  writeOutput(String.format(\"enablePan() completed in %d ms\",(stop - start)));\n}"}
{"ids": "30249", "raw_code": "private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){\n  int w=Math.abs(x2 - x1);\n  int h=Math.abs(z2 - z1);\n  if (bAllowDiags) {\n    if (w < h)     w=0;\n else     h=0;\n  }\n  return w + h + 1;\n}"}
{"ids": "21623", "raw_code": "private Workflow.Method createVolumesMethod(URI systemURI,URI poolURI,List<URI> volumeURIs,VirtualPoolCapabilityValuesWrapper capabilities){\n  return new Workflow.Method(\"createVolumes\",systemURI,poolURI,volumeURIs,capabilities);\n}"}
{"ids": "78366", "raw_code": "public void init(GuiManualHerblore manual){\n  for (  ManualWidgetBase widget : widgets)   widget.init(manual);\n}"}
{"ids": "13921", "raw_code": "@Get public Representation userCodeForm() throws OAuth2RestletException, InvalidGrantException, NotFoundException, ServerException {\n  final OAuth2Request request=requestFactory.create(getRequest());\n  if (request.getParameter(OAuth2Constants.DeviceCode.USER_CODE) != null) {\n    return verify(null);\n  }\n else {\n    return getTemplateRepresentation(FORM,request,null);\n  }\n}"}
{"ids": "68679", "raw_code": "public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){\n  final double oneMinusBeta=1.0 - beta;\n  final double A=Math.pow(forward * strike,oneMinusBeta);\n  final double sqrtA=Math.sqrt(A);\n  double logM;\n  if (!isClose(forward,strike))   logM=Math.log(forward / strike);\n else {\n    final double epsilon=(forward - strike) / strike;\n    logM=epsilon - .5 * epsilon * epsilon;\n  }\n  final double z=(nu / alpha) * sqrtA * logM;\n  final double B=1.0 - 2.0 * rho * z + z * z;\n  final double C=oneMinusBeta * oneMinusBeta * logM* logM;\n  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);\n  final double xx=Math.log(tmp);\n  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);\n  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));\n  double multiplier;\n  final double m=10;\n  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;\n else {\n    final double talpha=(0.5 - rho * rho) / (1.0 - rho);\n    final double tbeta=alpha - .5;\n    final double tgamma=rho / (1 - rho);\n    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;\n  }\n  return (alpha / D) * multiplier * d;\n}"}
{"ids": "8886", "raw_code": "public void close(){\n  while (!mReceivers.isEmpty()) {\n    mContext.unregisterReceiver(mReceivers.remove(0));\n  }\n  if (mOutputWriter != null) {\n    try {\n      mOutputWriter.close();\n    }\n catch (    IOException e) {\n      Log.w(mTag,\"Test output file could not be closed\",e);\n    }\n  }\n}"}
{"ids": "5200", "raw_code": "private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){\n  for (  String path : paths) {\n    String relativePath=fileHandler.getName(path);\n    if (prefix != null) {\n      relativePath=fileHandler.append(prefix,relativePath);\n    }\n    if (classpaths != null) {\n      classpaths.add(relativePath);\n    }\n    if (fileHandler.isDirectory(path)) {\n      String[] children=fileHandler.getChildren(path);\n      if (children != null && children.length != 0) {\n        resolveFiles(null,files,children,relativePath);\n      }\n    }\n else {\n      files.put(relativePath,path);\n    }\n  }\n}"}
{"ids": "62711", "raw_code": "public synchronized void reloadConfiguration(){\n  properties=null;\n  finalParameters.clear();\n}"}
{"ids": "23111", "raw_code": "protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){\nsynchronized (messageProcessors) {\n    if (messageProcessors.remove(oldMessageProcessor)) {\n      oldMessageProcessor.stop();\n    }\n  }\n}"}
{"ids": "48303", "raw_code": "X509IssuerSerial(X509Certificate cert){\n  this(cert.getIssuerX500Principal(),cert.getSerialNumber());\n}"}
{"ids": "19990", "raw_code": "public void putBytes(byte[] bytes){\n  ensureCapacity(bytes.length);\n  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);\n  this.position+=bytes.length;\n}"}
{"ids": "31039", "raw_code": "public static String arrayToDelimitedString(Object[] arr,String delim){\n  if (arr == null) {\n    return \"\";\n  }\n  StringBuffer sb=new StringBuffer();\n  for (int i=0; i < arr.length; i++) {\n    if (i > 0) {\n      sb.append(delim);\n    }\n    sb.append(arr[i]);\n  }\n  return sb.toString();\n}"}
{"ids": "66217", "raw_code": "public static CompiereColor parse(String attributes){\n  CompiereColor cc=new CompiereColor();\n  try {\n    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);\n  }\n catch (  Exception e) {\n    log.severe(\"(\" + attributes + \") - \"+ e.toString());\n  }\n  return cc;\n}"}
{"ids": "35869", "raw_code": "public synchronized static LuaState newLuaState(){\n  int i=getNextStateIndex();\n  LuaState L=new LuaState(i);\n  states.add(i,L);\n  return L;\n}"}
{"ids": "78154", "raw_code": "static long checkPreambleSize(Memory mem){\n  final long cap=mem.getCapacity();\n  if (cap < 8) {\n    throwNotBigEnough(cap,8);\n  }\n  final long pre0=mem.getLong(0);\n  final int preLongs=(int)(pre0 & 0X3FL);\n  final int required=Math.max(preLongs << 3,8);\n  if (cap < required) {\n    throwNotBigEnough(cap,required);\n  }\n  return pre0;\n}"}
{"ids": "31961", "raw_code": "public static Collection<InetAddress> toInetAddresses(Collection<String> addrs,Collection<String> hostNames) throws IgniteCheckedException {\n  Set<InetAddress> res=new HashSet<>(addrs.size());\n  Iterator<String> hostNamesIt=hostNames.iterator();\n  for (  String addr : addrs) {\n    String hostName=hostNamesIt.hasNext() ? hostNamesIt.next() : null;\n    InetAddress inetAddr=null;\n    if (!F.isEmpty(hostName)) {\n      try {\n        inetAddr=InetAddress.getByName(hostName);\n      }\n catch (      UnknownHostException ignored) {\n      }\n    }\n    if (inetAddr == null || inetAddr.isLoopbackAddress()) {\n      try {\n        inetAddr=InetAddress.getByName(addr);\n      }\n catch (      UnknownHostException ignored) {\n      }\n    }\n    if (inetAddr != null)     res.add(inetAddr);\n  }\n  if (res.isEmpty())   throw new IgniteCheckedException(\"Addresses can not be resolved [addr=\" + addrs + \", hostNames=\"+ hostNames+ ']');\n  return res;\n}"}
{"ids": "13971", "raw_code": "public static String removeNewLineChars(String s){\n  String retString=null;\n  if ((s != null) && (s.length() > 0) && (s.indexOf('\\n') != -1)) {\n    char[] chars=s.toCharArray();\n    int len=chars.length;\n    StringBuffer sb=new StringBuffer(len);\n    for (int i=0; i < len; i++) {\n      char c=chars[i];\n      if (c != '\\n') {\n        sb.append(c);\n      }\n    }\n    retString=sb.toString();\n  }\n else {\n    retString=s;\n  }\n  return retString;\n}"}
{"ids": "78109", "raw_code": "void calculateCounters(){\n  if (!isDBAvailable())   return;\n  long time=System.currentTimeMillis();\n  int total=0;\n  write.lock();\n  try {\n    countResetFeedsAndCategories();\n    total+=countFeedsWithUnread();\n    countCategoriesWithUnread();\n    countSpecialCategories(total);\n  }\n  finally {\n    write.unlock();\n  }\n  Log.i(TAG,String.format(\"Recalculated counters, total unread: %s (took %sms)\",total,(System.currentTimeMillis() - time)));\n}"}
{"ids": "80220", "raw_code": "protected void appendHTML(final StringBuilder sbuf,final char ch){\nswitch (ch) {\ncase '<':\n    sbuf.append(\"&lt;\");\n  break;\ncase '>':\nsbuf.append(\"&gt;\");\nbreak;\ncase '&':\nsbuf.append(\"&amp;\");\nbreak;\ndefault :\nsbuf.append(ch);\nbreak;\n}\n}"}
{"ids": "70656", "raw_code": "private Collection<Var> migrateColumns(SQLTable currentTable){\n  List<Var> vars=new ArrayList<>();\n  String tableType=currentTable.getEntityType();\n  Map<String,ResourceType.DataType> columns=currentTable.getColumns();\n  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();\n  for (  String column : columns.keySet()) {\n    ResourceType.DataType columnType=columns.get(column);\n    if (foreignColumns.containsKey(column)) {\n      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));\n    }\n else {\n      vars.addAll(migrateAsResource(tableType,columnType,column));\n    }\n  }\n  return vars;\n}"}
{"ids": "19799", "raw_code": "public int retrieveRowCount(String tableName) throws SQLException {\n  ResultSet rs=null;\n  int rowCount=-1;\n  try {\n    rs=statement.executeQuery(\"SELECT COUNT(*) FROM \" + tableName);\n    rs.next();\n    rowCount=rs.getInt(1);\n  }\n  finally {\n    if (rs != null) {\n      rs.close();\n    }\n  }\n  return rowCount;\n}"}
{"ids": "36251", "raw_code": "@Override public int addAttribute(Attribute a){\n  if (a == null) {\n    throw new IllegalArgumentException(\"Attribute must not be null\");\n  }\n else {\n    int index=-1;\n    Attribute original=a;\n    a=(Attribute)a.clone();\n    if (unusedColumnList.size() > 0) {\nsynchronized (unusedColumnList) {\n        if (unusedColumnList.size() > 0) {\n          index=unusedColumnList.remove(0);\n          attributes.set(index,a);\n        }\n else {\n          index=attributes.size();\n          attributes.add(a);\n        }\n      }\n    }\n else {\n      index=attributes.size();\n      attributes.add(a);\n    }\n    a.setTableIndex(index);\n    original.setTableIndex(index);\n    return index;\n  }\n}"}
{"ids": "63177", "raw_code": "public static <X>void sortTopN(X[] array,int offset,int limit,Comparator<? super X> comp){\n  partitionTopN(array,offset,limit,comp);\n  Arrays.sort(array,offset,(int)Math.min((long)offset + limit,array.length),comp);\n}"}
{"ids": "23131", "raw_code": "protected boolean isServerTransaction(){\n  return this instanceof SIPServerTransaction;\n}"}
{"ids": "53889", "raw_code": "public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {\n  int toRead=len;\n  while (toRead > 0) {\n    int ret=in.read(buf,off,toRead);\n    if (ret < 0) {\n      throw new IOException(\"Premature EOF from inputStream\");\n    }\n    toRead-=ret;\n    off+=ret;\n  }\n}"}
{"ids": "26213", "raw_code": "public static String addToCartBulk(HttpServletRequest request,HttpServletResponse response){\n  String categoryId=request.getParameter(\"category_id\");\n  ShoppingCart cart=getCartObject(request);\n  Delegator delegator=(Delegator)request.getAttribute(\"delegator\");\n  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute(\"dispatcher\");\n  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);\n  String controlDirective;\n  Map<String,Object> result;\n  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);\n  String catalogId=CatalogWorker.getCurrentCatalogId(request);\n  result=cartHelper.addToCartBulk(catalogId,categoryId,paramMap);\n  controlDirective=processResult(result,request);\n  if (controlDirective.equals(ERROR)) {\n    return \"error\";\n  }\n else {\n    return \"success\";\n  }\n}"}
{"ids": "36127", "raw_code": "public void addFrequentSet(FrequentItemSet itemSet){\n  frequentSets.add(itemSet);\n  maximumSetSize=Math.max(itemSet.getNumberOfItems(),maximumSetSize);\n}"}
{"ids": "29891", "raw_code": "private int skipFromPeekBuffer(int length){\n  int bytesSkipped=Math.min(peekBufferLength,length);\n  updatePeekBuffer(bytesSkipped);\n  return bytesSkipped;\n}"}
{"ids": "21798", "raw_code": "protected Workflow.Method createRemoveVolumesFromCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){\n  return new Workflow.Method(REMOVE_VOLUMES_FROM_CG_STEP,vplexURI,cgURI,vplexVolumeURIs);\n}"}
{"ids": "55397", "raw_code": "private static int showUrlsPrompt(Component parent,List<String> urls){\n  String text=\"<html><body style='width: 100px;'>\";\n  for (  String url : urls) {\n    url=splitUrl(url);\n    text+=url + \"<br />\";\n  }\n  String okOption=\"Open URL\";\n  if (urls.size() > 1) {\n    okOption=\"Open \" + urls.size() + \" URLs\";\n  }\n  String[] options={okOption,\"Cancel\"};\n  if (urls.size() == 1) {\n    options=new String[]{okOption,\"Copy URL\",\"Cancel\"};\n  }\n  int chosenOption=JOptionPane.showOptionDialog(parent,text,\"Open in default browser?\",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);\n  return chosenOption;\n}"}
{"ids": "84968", "raw_code": "private static String computeRegexString(String originalString,String oldName,String newName){\n  StringBuilder builder=new StringBuilder(originalString.length());\n  String oldNameOrNewNameRegEx=String.format(\"(%s)|(%s)\",Pattern.quote(oldName),Pattern.quote(newName));\n  int i=originalString.indexOf(oldName);\n  if (i >= 0) {\n    int prevI=0;\n    while (i >= 0) {\n      builder.append(Pattern.quote(originalString.substring(prevI,i)));\n      builder.append(oldNameOrNewNameRegEx);\n      prevI=i;\n      i=originalString.indexOf(oldName,i + oldName.length());\n    }\n    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));\n  }\n  return builder.toString();\n}"}
{"ids": "38910", "raw_code": "public void doHistory(KeyEvent e){\n  if (e.getSource() == m_Input) {\nswitch (e.getKeyCode()) {\ncase KeyEvent.VK_UP:\n      if (m_HistoryPos > 0) {\n        m_HistoryPos--;\n        String command=m_CommandHistory.elementAt(m_HistoryPos);\n        m_Input.setText(command);\n      }\n    break;\ncase KeyEvent.VK_DOWN:\n  if (m_HistoryPos < m_CommandHistory.size()) {\n    m_HistoryPos++;\n    String command=\"\";\n    if (m_HistoryPos < m_CommandHistory.size()) {\n      command=m_CommandHistory.elementAt(m_HistoryPos);\n    }\n    m_Input.setText(command);\n  }\nbreak;\ndefault :\nbreak;\n}\n}\n}"}
{"ids": "81344", "raw_code": "public static ReferenceBinding[] substitute(Substitution substitution,ReferenceBinding[] originalTypes){\n  if (originalTypes == null)   return null;\n  ReferenceBinding[] substitutedTypes=originalTypes;\n  for (int i=0, length=originalTypes.length; i < length; i++) {\n    ReferenceBinding originalType=originalTypes[i];\n    TypeBinding substitutedType=substitute(substitution,originalType);\n    if (!(substitutedType instanceof ReferenceBinding)) {\n      return null;\n    }\n    if (substitutedType != originalType) {\n      if (substitutedTypes == originalTypes) {\n        System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i);\n      }\n      substitutedTypes[i]=(ReferenceBinding)substitutedType;\n    }\n else     if (substitutedTypes != originalTypes) {\n      substitutedTypes[i]=originalType;\n    }\n  }\n  return substitutedTypes;\n}"}
{"ids": "48994", "raw_code": "private static Collection<TCPTransport> allKnownTransports(){\n  Set<TCPTransport> s;\nsynchronized (localEndpoints) {\n    s=new HashSet<TCPTransport>(localEndpoints.size());\n    for (    LinkedList<TCPEndpoint> epList : localEndpoints.values()) {\n      TCPEndpoint ep=epList.getFirst();\n      s.add(ep.transport);\n    }\n  }\n  return s;\n}"}
{"ids": "71964", "raw_code": "public void requestSecondsUntilIdleLockout(){\n  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_IDLE_LOCKOUT);\n}"}
{"ids": "59586", "raw_code": "@RequestMapping(value=\"/hive\",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {\n  IHiveClient hiveClient=HiveClientFactory.getHiveClient();\n  List<String> results=null;\n  try {\n    results=hiveClient.getHiveDbNames();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new IOException(e);\n  }\n  return results;\n}"}
{"ids": "78148", "raw_code": "private static double hackyAdjuster(double f){\n  double tmp=Math.sqrt(1.0 - f);\n  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));\n}"}
{"ids": "43816", "raw_code": "private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){\n  boolean mutated=false;\n  for (  String oldFieldName : document.getPropertyNames()) {\n    newDocument.addProperty(oldFieldName);\n    List<String> oldValues=document.getProperty(oldFieldName);\n    if (oldValues != null) {\n      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;\n      for (      String oldValue : oldValues) {\n        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {\n          mutated=true;\n        }\n else {\n          addProperty(oldFieldName,oldValue,newDocument);\n        }\n      }\n    }\n  }\n  return mutated;\n}"}
{"ids": "23902", "raw_code": "public void unlockForClear(InternalDistributedMember locker){\nsynchronized (this.clearLockSync) {\n    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();\n    if (instance != null && logger.isDebugEnabled()) {\n      logger.debug(\"Unlocking for clear, from member {} RVV {}\",locker,System.identityHashCode(this));\n    }\n    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {\n      if (instance != null && logger.isDebugEnabled()) {\n        logger.debug(\"current clear lock owner was {} not unlocking\",lockOwner);\n      }\n      return;\n    }\n    unlockVersionGeneration(locker);\n  }\n}"}
{"ids": "64768", "raw_code": "public void write(ByteBuffer buffer) throws IOException {\n  buffer.position(0);\n  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {\n    while (buffer.hasRemaining()) {\n      mFileChannel.write(buffer);\n    }\n    updateWaveFileSize();\n  }\n else {\n    int remaining=(int)(mMaxSize - mFileChannel.size());\n    remaining-=(int)(remaining % mAudioFormat.getFrameSize());\n    byte[] bytes=buffer.array();\n    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));\n    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));\n    while (current.hasRemaining()) {\n      mFileChannel.write(current);\n    }\n    updateWaveFileSize();\n    rollover();\n    while (next.hasRemaining()) {\n      mFileChannel.write(next);\n    }\n    updateWaveFileSize();\n  }\n}"}
{"ids": "31530", "raw_code": "public static double dmod_d(double lhs,double rhs){\n  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;\n}"}
{"ids": "57031", "raw_code": "public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){\n  boolean matched=true;\n  int bitsToShift=32 - cidrMaskBits;\n  if (bitsToShift > 0) {\n    cidrPrefix=cidrPrefix >> bitsToShift;\n    ip=ip >> bitsToShift;\n    cidrPrefix=cidrPrefix << bitsToShift;\n    ip=ip << bitsToShift;\n  }\n  if (cidrPrefix != ip) {\n    matched=false;\n  }\n  return matched;\n}"}
{"ids": "48723", "raw_code": "final void putLong(int offset,long value){\n  unsafe.putLong(offset + address,value);\n}"}
{"ids": "10164", "raw_code": "public static String gensalt(int log_rounds,SecureRandom random){\n  StringBuffer rs=new StringBuffer();\n  byte rnd[]=new byte[BCRYPT_SALT_LEN];\n  random.nextBytes(rnd);\n  rs.append(\"$2a$\");\n  if (log_rounds < 10) {\n    rs.append(\"0\");\n  }\n  if (log_rounds > 30) {\n    throw new IllegalArgumentException(\"log_rounds exceeds maximum (30)\");\n  }\n  rs.append(Integer.toString(log_rounds));\n  rs.append(\"$\");\n  rs.append(encode_base64(rnd,rnd.length));\n  return rs.toString();\n}"}
{"ids": "30305", "raw_code": "public StringBuffer numberToString(final String strNumberToConvert){\n  String strNumber=\"\", signBit=\"\";\n  if (strNumberToConvert.startsWith(\"-\")) {\n    strNumber=\"\" + strNumberToConvert.substring(1,strNumberToConvert.length());\n    signBit=\"-\";\n  }\n else   strNumber=\"\" + strNumberToConvert;\n  final DecimalFormat dft=new DecimalFormat(\"##############0.00\");\n  final String strtemp=\"\" + dft.format(Double.parseDouble(strNumber));\n  StringBuffer strbNumber=new StringBuffer(strtemp);\n  final int intLen=strbNumber.length();\n  for (int i=intLen - 6; i > 0; i=i - 2)   strbNumber.insert(i,',');\n  if (signBit.equals(\"-\"))   strbNumber=strbNumber.insert(0,\"-\");\n  return strbNumber;\n}"}
{"ids": "8536", "raw_code": "private void runInitScriptIfRequired(String url,Connection connection) throws SQLException {\n  Matcher matcher=INITSCRIPT_MATCHING_PATTERN.matcher(url);\n  if (matcher.matches()) {\n    String initScriptPath=matcher.group(2);\n    try {\n      URL resource=Resources.getResource(initScriptPath);\n      String sql=Resources.toString(resource,Charsets.UTF_8);\n      ScriptUtils.executeSqlScript(connection,initScriptPath,sql);\n    }\n catch (    IOException|IllegalArgumentException e) {\n      LOGGER.warn(\"Could not load classpath init script: {}\",initScriptPath);\n      throw new SQLException(\"Could not load classpath init script: \" + initScriptPath,e);\n    }\ncatch (    ScriptException e) {\n      LOGGER.error(\"Error while executing init script: {}\",initScriptPath,e);\n      throw new SQLException(\"Error while executing init script: \" + initScriptPath,e);\n    }\n  }\n}"}
{"ids": "72362", "raw_code": "public static void checkFinite(final double[] val) throws MathIllegalArgumentException {\n  for (int i=0; i < val.length; i++) {\n    final double x=val[i];\n    if (Double.isInfinite(x) || Double.isNaN(x)) {\n      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);\n    }\n  }\n}"}
{"ids": "70884", "raw_code": "private void initKeyboardButtons(KeyboardView view){\n  mButtons=new ArrayList<>();\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9));\n  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear));\n  for (  View button : mButtons) {\n    button.setOnClickListener(this);\n  }\n}"}
{"ids": "9172", "raw_code": "private static String findRelativePath(String filePath,String dirPath){\n  String relPath;\n  if (!dirPath.endsWith(File.separator)) {\n    dirPath=dirPath + File.separator;\n  }\n  if (filePath.startsWith(dirPath)) {\n    relPath=filePath.substring(dirPath.length());\n  }\n else {\n    relPath=filePath;\n  }\n  return relPath;\n}"}
{"ids": "76339", "raw_code": "public void resetSingleton(){\n  root=null;\n  tmpFileCounter.set(0);\n  accessedFiles.clear();\n  shouldAllThrowIOException=false;\n  classesThatShouldThrowIOException.clear();\nsynchronized (leakingResources) {\n    for (    LeakingResource resource : leakingResources) {\n      try {\n        resource.release();\n      }\n catch (      Exception e) {\n        logger.warn(\"Failed to release resource: \" + e.getMessage(),e);\n      }\n    }\n    leakingResources.clear();\n  }\n}"}
{"ids": "80372", "raw_code": "public static String generateStringOfCharacters(int count){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < count; i++) {\n    sb.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length())));\n  }\n  return sb.toString();\n}"}
{"ids": "68667", "raw_code": "private ExchangeRateManager(){\n  if (System.getProperty(\"EXPERIMENTAL\") == null)   throw new UnsupportedOperationException(\"Work in progress\");\n  addKnownRates();\n}"}
{"ids": "86978", "raw_code": "public void removeAttribute(String name){\n  if (name != null)   if (attributesList != null) {\n    for (int i=0; i < attributesList.size(); i++) {\n      Object o=attributesList.elementAt(i);\n      if (o instanceof AttributeField) {\n        AttributeField a=(AttributeField)o;\n        try {\n          String n=a.getName();\n          if (n != null) {\n            if (name.equals(n)) {\n              attributesList.remove(a);\n            }\n          }\n        }\n catch (        SdpParseException e) {\n        }\n      }\n    }\n  }\n}"}
{"ids": "55945", "raw_code": "@Override public void evict(String key){\n  key=safetyKey(key);\n  final File file=new File(cacheDirectory,key);\n  file.delete();\n}"}
{"ids": "66433", "raw_code": "public static boolean isUniqueContraintError(Exception e){\n  if (DB.isPostgreSQL())   return isSQLState(e,\"23505\");\n  return isErrorCode(e,1);\n}"}
{"ids": "43987", "raw_code": "private void insertUsedContextPrefixes(){\n  int unknownPrefixesCount=unknownPrefixesInXMLLiteral.size();\n  if (unknownPrefixesCount > 0) {\n    StringBuilder contextPrefixes=new StringBuilder(1024);\n    ElementInfo topElement=peekStack();\n    for (int i=0; i < unknownPrefixesCount; i++) {\n      String prefix=unknownPrefixesInXMLLiteral.get(i);\n      String namespace=topElement.getNamespace(prefix);\n      if (namespace != null) {\n        appendNamespaceDecl(contextPrefixes,prefix,namespace);\n      }\n    }\n    int endOfFirstStartTag=charBuf.indexOf(\">\");\n    charBuf.insert(endOfFirstStartTag,contextPrefixes.toString());\n  }\n  unknownPrefixesInXMLLiteral.clear();\n}"}
{"ids": "32177", "raw_code": "public void addPutTimeNanos(long duration){\n  putTimeNanos.addAndGet(duration);\n  if (delegate != null)   delegate.addPutTimeNanos(duration);\n}"}
{"ids": "83784", "raw_code": "public static List<Integer> precomputeHashes(byte[] data,long tweak){\n  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);\n  for (int i=0; i < MAX_HASH_FUNCS; ++i) {\n    list.add(murmurhash3bit(i,data,tweak));\n  }\n  return list;\n}"}
{"ids": "86888", "raw_code": "@RequestProcessing(value=\"/member/{userName}/following/tags\",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingTags(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {\n  final JSONObject user=(JSONObject)request.getAttribute(User.USER);\n  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(\"skinDirName\"));\n  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();\n  context.setRenderer(renderer);\n  renderer.setTemplateName(\"/home/following-tags.ftl\");\n  final Map<String,Object> dataModel=renderer.getDataModel();\n  filler.fillHeaderAndFooter(request,response,dataModel);\n  String pageNumStr=request.getParameter(\"p\");\n  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {\n    pageNumStr=\"1\";\n  }\n  final int pageNum=Integer.valueOf(pageNumStr);\n  final int pageSize=Symphonys.getInt(\"userHomeFollowingTagsCnt\");\n  final int windowSize=Symphonys.getInt(\"userHomeFollowingTagsWindowSize\");\n  fillHomeUser(dataModel,user);\n  final String followingId=user.optString(Keys.OBJECT_ID);\n  dataModel.put(Follow.FOLLOWING_ID,followingId);\n  avatarQueryService.fillUserAvatarURL(user);\n  final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize);\n  final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS);\n  dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags);\n  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);\n  if (isLoggedIn) {\n    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);\n    final String followerId=currentUser.optString(Keys.OBJECT_ID);\n    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);\n    dataModel.put(Common.IS_FOLLOWING,isFollowing);\n    for (    final JSONObject followingTag : followingTags) {\n      final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID);\n      followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId));\n    }\n  }\n  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));\n  final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);\n  final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize);\n  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);\n  if (!pageNums.isEmpty()) {\n    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));\n    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));\n  }\n  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);\n  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);\n  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);\n}"}
{"ids": "10930", "raw_code": "public int elevationAt(float lat,float lon){\n  if (frame_is_valid == true) {\n    if (lat >= dsi.sw_lat && lat <= dsi.ne_lat && lon >= dsi.sw_lon && lon <= dsi.ne_lon) {\n      int lat_index=Math.round((lat - dsi.sw_lat) * 36000 / uhl.lat_post_interval);\n      int lon_index=Math.round((lon - dsi.sw_lon) * 36000 / uhl.lon_post_interval);\n      if (elevations[lon_index] == null)       readDataRecord(lon_index);\n      return (int)elevations[lon_index][lat_index];\n    }\n  }\n  return -32767;\n}"}
{"ids": "52997", "raw_code": "private void deleteChildren(Element container){\n  while (container.hasChildNodes()) {\n    container.removeChild(container.getLastChild());\n  }\n}"}
{"ids": "15505", "raw_code": "private void saveInitialChildState(FacesContext facesContext,UIComponent component){\n  if (component instanceof EditableValueHolder && !component.isTransient()) {\n    String clientId=component.getClientId(facesContext);\n    SavedState state=new SavedState();\n    initialChildState.put(clientId,state);\n    state.populate((EditableValueHolder)component);\n  }\n  Iterator<UIComponent> iterator=component.getFacetsAndChildren();\n  while (iterator.hasNext()) {\n    saveChildState(facesContext,iterator.next());\n  }\n}"}
{"ids": "4956", "raw_code": "public boolean is_overlap(){\n  Set<BrdItem> start_contacts=get_start_contacts();\n  Set<BrdItem> end_contacts=get_end_contacts();\n  for (  BrdItem end_contact : end_contacts) {\n    if (start_contacts.contains(end_contact))     return true;\n  }\n  return false;\n}"}
{"ids": "67500", "raw_code": "static Object ensureNotNull(Location location,Object value){\n  if (value == null) {\n    throw new EvalException(location,\"Snippet runtime does not support null values.\");\n  }\n  return value;\n}"}
{"ids": "51680", "raw_code": "private static String padRight(String s,int minLength){\n  return String.format(\"%1$-\" + minLength + \"s\",s);\n}"}
{"ids": "73165", "raw_code": "public void addPreferencesButton(){\n  JButton prefsButton=new JButton(\"Prefs\");\n  prefsButton.setHideActionText(true);\n  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));\n  buttonPanel.add(prefsButton);\n}"}
{"ids": "1289", "raw_code": "public void clearUnused(ConfigImpl config){\n  SystemOut.printDate(config.getOutWriter(),\"PagePool: \" + size() + \">(\"+ maxSize+ \")\");\n  if (size() > maxSize) {\n    Object[] keys=keys();\n    LongKeyList list=new LongKeyList();\n    for (int i=0; i < keys.length; i++) {\n      PageSource ps=getPageSource(keys[i],false);\n      long updateTime=ps.getLastAccessTime();\n      if (updateTime + timeout < System.currentTimeMillis()) {\n        long add=((ps.getAccessCount() - 1) * 10000);\n        if (add > timeout)         add=timeout;\n        list.add(updateTime + add,keys[i]);\n      }\n    }\n    while (size() > maxSize) {\n      Object key=list.shift();\n      if (key == null)       break;\n      remove(key);\n    }\n  }\n}"}
{"ids": "48809", "raw_code": "public ShortInterleavedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){\n  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);\n}"}
{"ids": "35226", "raw_code": "@Override public boolean flingBackward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {\n  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());\n  if (isVertical)   scrollable.setAsVerticalList();\n else   scrollable.setAsHorizontalList();\n  return scrollable.flingBackward();\n}"}
{"ids": "75824", "raw_code": "protected static double toDouble(String s){\n  try {\n    return Double.parseDouble(s);\n  }\n catch (  Exception e) {\n    TestCase.fail(\"Failed to parse double: \" + s + \"\\n\"+ throwableToString(e));\n    return Double.NaN;\n  }\n}"}
{"ids": "37030", "raw_code": "public void addListener(final IFilterPanelListener<T> listener){\n  m_listeners.addListener(listener);\n}"}
{"ids": "20449", "raw_code": "public void testmirror(File orig,File origni,File truecolor){\n  File mirror=TestSupport.addSuffixToName(orig,\"_mirror\");\n  File recov=TestSupport.addSuffixToName(orig,\"_recov\");\n  long crc0=0;\n  boolean interlaced;\n  boolean palete;\n{\n    PngReader pngr=new PngReader(orig);\n    PngWriter pngw=null;\n    try {\n      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());\n      palete=pngr.imgInfo.indexed;\n      pngr.prepareSimpleDigestComputation();\n      interlaced=pngr.isInterlaced();\n      pngw=new PngWriter(mirror,pngr.imgInfo,true);\n      pngw.setFilterType(FilterType.FILTER_CYCLIC);\n      pngw.copyChunksFrom(pngr.getChunksList());\n      IImageLineSet<? extends IImageLine> lines=pngr.readRows();\n      for (int row=0; row < pngr.imgInfo.rows; row++) {\n        mirrorLine(lines.getImageLine(row),pngr.imgInfo);\n        pngw.writeRow(lines.getImageLine(row));\n      }\n      pngr.end();\n      crc0=PngHelperInternal.getDigest(pngr);\n      pngw.end();\n    }\n  finally {\n      pngr.close();\n      if (pngw != null)       pngw.close();\n    }\n  }\n{\n    PngReader pngr2=new PngReader(mirror);\n    PngWriter pngw=null;\n    try {\n      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());\n      pngw=new PngWriter(recov,pngr2.imgInfo,true);\n      pngw.setFilterType(FilterType.FILTER_DEFAULT);\n      pngw.copyChunksFrom(pngr2.getChunksList());\n      for (int row=0; row < pngr2.imgInfo.rows; row++) {\n        IImageLine line=pngr2.readRow();\n        mirrorLine(line,pngr2.imgInfo);\n        pngw.writeRow(line);\n      }\n      pngr2.end();\n      pngw.end();\n    }\n  finally {\n      pngr2.close();\n      if (pngw != null)       pngw.close();\n    }\n  }\n  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);\n else   TestSupport.testSameCrc(recov,origni);\n  if (interlaced)   additionalTestInterlaced(orig,origni);\n  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);\n}"}
{"ids": "50891", "raw_code": "public boolean isStable(){\n  return myFeatures.contains(FEATURE_STABLE);\n}"}
{"ids": "75444", "raw_code": "protected void performDefaults(){\n  super.performDefaults();\n  initializeValues();\n  verifyValidation();\n}"}
{"ids": "14102", "raw_code": "private void updateStatus(String relayState,int currentStatus){\n  Integer tmp=(Integer)currentStatusMap.get(relayState);\n  if (tmp != null) {\n    int previousStatus=tmp.intValue();\nswitch (previousStatus) {\ncase LOGOUT_SUCCEEDED_STATUS:\n      if (currentStatus > previousStatus) {\n        currentStatusMap.put(relayState,new Integer(currentStatus));\n      }\n    break;\ncase LOGOUT_FAILED_STATUS:\n  if (currentStatus < LOGOUT_FAILED_STATUS) {\n    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));\n  }\nbreak;\ndefault :\nbreak;\n}\n}\n else {\ncurrentStatusMap.put(relayState,new Integer(currentStatus));\n}\n}"}
{"ids": "14398", "raw_code": "public static Set<String> listServers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {\n  Set<String> members=new HashSet<>();\n  String siteId=getSiteId(ssoToken,siteName);\n  if (siteId != null) {\n    Set<String> allServers=ServerConfiguration.getServers(ssoToken);\n    for (    String svr : allServers) {\n      if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) {\n        members.add(svr);\n      }\n    }\n  }\n  return members;\n}"}
{"ids": "75708", "raw_code": "public static GenericObjectEditorDialog createDialog(Container parent){\n  return createDialog(parent,null);\n}"}
{"ids": "20245", "raw_code": "public static boolean containsInLineFeatures(StyledLayerDescriptor sld){\n  if (sld != null) {\n    for (    StyledLayer layer : sld.layers()) {\n      if (layer instanceof UserLayer) {\n        UserLayer userLayer=(UserLayer)layer;\n        if (userLayer.getInlineFeatureDatastore() != null) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "48588", "raw_code": "public byte decodeBuffer(InputStream in)[] throws IOException {\n  ByteArrayOutputStream outStream=new ByteArrayOutputStream();\n  decodeBuffer(in,outStream);\n  return (outStream.toByteArray());\n}"}
{"ids": "14038", "raw_code": "public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {\n  int maxContentLength=SAMLUtils.getMaxContentLength();\n  if (maxContentLength != 0) {\n    int length=request.getContentLength();\n    if (length == -1) {\n      throw new ServletException(bundle.getString(\"unknownLength\"));\n    }\n    if (length > maxContentLength) {\n      if (debug.messageEnabled()) {\n        debug.message(\"FSUtils.checkHTTPRequestLength: \" + \"content length too large\" + length);\n      }\n      throw new ServletException(bundle.getString(\"largeContentLength\"));\n    }\n  }\n}"}
{"ids": "62791", "raw_code": "public void push(Notification notification,NotificationResponseListener listener){\n  final String notificationTopic=notification.getTopic();\n  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;\n  Request req=Utils.buildRequest(client,topic,notification,gateway);\n  semaphore.acquireUninterruptibly();\n  req.send(new ResponseListener(semaphore,notification,listener));\n}"}
{"ids": "34004", "raw_code": "public void updateFromResource(){\n  for (  String resource : resources) {\n    InputStream is=ClassLoader.getSystemResourceAsStream(resource);\n    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);\n    for (    EntryType type : myMap.keySet()) {\n      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);\n      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);\n      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();\n      LinkedHashSet<String> keys=new LinkedHashSet<String>();\n      keys.addAll(dataMappings.keySet());\n      keys.addAll(resourceMappings.keySet());\n      for (      String key : keys) {\n        if (resourceMappings.containsKey(key)) {\n          tempMappings.put(key,resourceMappings.get(key));\n        }\n else {\n          tempMappings.put(key,dataMappings.get(key));\n        }\n      }\n      myMap.put(type,tempMappings);\n    }\n  }\n}"}
{"ids": "86346", "raw_code": "private void deselect(final int index,final boolean shouldFireEvents){\n  checkWidget();\n  if (index < 0 || index >= items.size()) {\n    return;\n  }\n  final DLItem item=selection.remove(index);\n  if (shouldFireEvents) {\n    fireSelectionEvent(item);\n  }\n  final List<DLItem> deselectedItems=new ArrayList<DLItem>();\n  item.setLastAction(LAST_ACTION.DESELECTION);\n  deselectedItems.add(item);\n  if (shouldFireEvents) {\n    fireSelectionChangeEvent(deselectedItems);\n  }\n  redrawTables();\n}"}
{"ids": "68374", "raw_code": "public boolean isLeaf(Object nd){\n  Node node=(Node)nd;\n  return !node.hasChildNodes();\n}"}
{"ids": "52735", "raw_code": "private double[] parseVector(String s){\n  String[] entries=WHITESPACE_PATTERN.split(s);\n  double[] d=new double[entries.length];\n  for (int i=0; i < entries.length; i++) {\n    try {\n      d[i]=ParseUtil.parseDouble(entries[i]);\n    }\n catch (    NumberFormatException e) {\n      throw new AbortException(\"Could not parse vector.\");\n    }\n  }\n  return d;\n}"}
{"ids": "31798", "raw_code": "public SessionWrapper(Session ses){\n  this.ses=ses;\n  this.time=System.currentTimeMillis();\n}"}
{"ids": "35879", "raw_code": "public static List<BatchResponse> postWithSingleRequest(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){\n  final List<BatchRequest> batchRequests=new ArrayList<>();\n  batchRequests.add(br);\n  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);\n  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);\n  Assert.assertNotNull(response);\n  Assert.assertTrue(response.size() > 0);\n  return response;\n}"}
{"ids": "59889", "raw_code": "public File programDirectory(){\n  return programDirectory;\n}"}
{"ids": "74050", "raw_code": "@Override public void clearRouteSensors(){\n  _controlSensorList=new ArrayList<>();\n}"}
{"ids": "19938", "raw_code": "public static KEYSTORE_TYPE fromString(String x) throws ConfigurationException {\n  for (  KEYSTORE_TYPE currentType : KEYSTORE_TYPE.values()) {\n    if (x.equalsIgnoreCase(currentType.toString()))     return currentType;\n  }\n  throw new ConfigurationException(MessageFormat.format(\"Cannot cast into a known CERTIFICATE_KEY_TYPE: {0}\",x));\n}"}
{"ids": "56383", "raw_code": "public ObjectMapper nextLevel(ObjectMapper level){\n  ObjectMapper previous=levelStack.peek();\n  levelStack.push(level);\n  return previous;\n}"}
{"ids": "78324", "raw_code": "public JSONObject toJson() throws JSONException {\n  JSONObject json=new JSONObject();\n  JSONArray jpods=new JSONArray();\n  for (  DiasporaPod pod : pods) {\n    jpods.put(pod.toJson());\n  }\n  json.put(\"pods\",jpods);\n  json.put(\"timestamp\",System.currentTimeMillis());\n  return json;\n}"}
{"ids": "9599", "raw_code": "public static KeyStore load(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {\n  KeyStoreType keyStoreType=null;\n  try {\n    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));\n  }\n catch (  FileNotFoundException ex) {\n    throw ex;\n  }\ncatch (  IOException ex) {\n    throw new CryptoException(res.getString(\"NoLoadKeyStore.exception.message\"),ex);\n  }\n  if (keyStoreType == null) {\n    return null;\n  }\n  return load(keyStoreFile,password,keyStoreType);\n}"}
{"ids": "34765", "raw_code": "@VisibleForTesting static boolean isPrecachingEnabled(Context context){\n  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n  return prefs.getBoolean(PREF_IS_PRECACHING_ENABLED,false);\n}"}
{"ids": "48133", "raw_code": "@Override public boolean equals(Object obj){\n  if (this == obj)   return true;\n  if (!(obj instanceof PrincipalEntry))   return false;\n  PrincipalEntry that=(PrincipalEntry)obj;\n  return (principalClass.equals(that.principalClass) && principalName.equals(that.principalName));\n}"}
{"ids": "76602", "raw_code": "public boolean isValidLockdownProfile(){\n  try {\n    return true;\n  }\n catch (  IllegalArgumentException e) {\n    Log.w(TAG,\"Invalid address\",e);\n    return false;\n  }\n}"}
{"ids": "48733", "raw_code": "private int readServerResponse() throws IOException {\n  StringBuffer replyBuf=new StringBuffer(32);\n  int c;\n  int continuingCode=-1;\n  int code;\n  String response;\n  serverResponse.setSize(0);\n  while (true) {\n    while ((c=in.read()) != -1) {\n      if (c == '\\r') {\n        if ((c=in.read()) != '\\n') {\n          replyBuf.append('\\r');\n        }\n      }\n      replyBuf.append((char)c);\n      if (c == '\\n') {\n        break;\n      }\n    }\n    response=replyBuf.toString();\n    replyBuf.setLength(0);\n    if (logger.isLoggable(PlatformLogger.Level.FINEST)) {\n      logger.finest(\"Server [\" + serverAddr + \"] --> \"+ response);\n    }\n    if (response.length() == 0) {\n      code=-1;\n    }\n else {\n      try {\n        code=Integer.parseInt(response.substring(0,3));\n      }\n catch (      NumberFormatException e) {\n        code=-1;\n      }\ncatch (      StringIndexOutOfBoundsException e) {\n        continue;\n      }\n    }\n    serverResponse.addElement(response);\n    if (continuingCode != -1) {\n      if (code != continuingCode || (response.length() >= 4 && response.charAt(3) == '-')) {\n        continue;\n      }\n else {\n        continuingCode=-1;\n        break;\n      }\n    }\n else     if (response.length() >= 4 && response.charAt(3) == '-') {\n      continuingCode=code;\n      continue;\n    }\n else {\n      break;\n    }\n  }\n  return code;\n}"}
{"ids": "7238", "raw_code": "public FromClause(Stream streamOne,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){\n  this(streamOne);\n  add(streamTwo);\n  outerJoinQualifiers.add(outerJoinQualifier);\n}"}
{"ids": "79951", "raw_code": "public static KdbDatabase createKdbDatabase(Credentials credentials,KdbHeader kdbHeader,InputStream inputStream) throws IOException {\n  DataInput dataInput=new LittleEndianDataInputStream(inputStream);\n  checkSignature(dataInput);\n  deserializeHeader(kdbHeader,dataInput);\n  InputStream decryptedInputStream=kdbHeader.createDecryptedInputStream(credentials.getKey(),inputStream);\n  MessageDigest digest=Encryption.getMessageDigestInstance();\n  DigestInputStream digestInputStream=new DigestInputStream(decryptedInputStream,digest);\n  dataInput=new LittleEndianDataInputStream(digestInputStream);\n  KdbDatabase kdbDatabase=new KdbDatabase();\n  KdbGroup lastGroup=(KdbGroup)kdbDatabase.getRootGroup();\n  for (long group=0; group < kdbHeader.getGroupCount(); group++) {\n    lastGroup=deserializeGroup(lastGroup,dataInput);\n  }\n  for (long entry=0; entry < kdbHeader.getEntryCount(); entry++) {\n    deserializeEntry(kdbDatabase,dataInput);\n  }\n  if (!Arrays.equals(digest.digest(),kdbHeader.getContentHash())) {\n    throw new IllegalStateException(\"Hash values did not match\");\n  }\n  digestInputStream.close();\n  return kdbDatabase;\n}"}
{"ids": "15797", "raw_code": "private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {\n  if (blockSize_S < 1 || blockSize_L < 1) {\n    throw new DecodingException(\"Invalid value for blockSize_S: \" + blockSize_S + \" or blockSize_L: \"+ blockSize_L);\n  }\n  int s=r.read(blockSize_S);\n  int l=r.read(blockSize_L);\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  for (int i=0; i < l; i++) {\n    output.write(r.readByte());\n  }\n  DiffPart part=new DiffPart(DiffAction.INSERT);\n  part.setStart(s);\n  part.setText(output.toString(WIKIPEDIA_ENCODING));\n  return part;\n}"}
{"ids": "39249", "raw_code": "public void sort(){\n  Arrays.sort(V,0,size());\n}"}
{"ids": "16822", "raw_code": "public void rebuildPanel(){\n  if (activeWorker != null && !activeWorker.isDone()) {\n    activeWorker.cancel(true);\n  }\n  panelImages.removeAll();\n  panelImages.revalidate();\n  scrollPane.repaint();\n  activeWorker=new ImageLoader(mediaFiles);\n  activeWorker.execute();\n}"}
{"ids": "20443", "raw_code": "protected void processBytes(byte[] buf,int off,int len){\n  nBytesIn+=len;\n  if (len < 1 || state.isDone())   return;\n  if (state == State.ROW_READY)   throw new PngjInputException(\"this should only be called if waitingForMoreInput\");\n  if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException(\"should not happen\");\n  inf.setInput(buf,off,len);\n  if (isCallbackMode()) {\n    while (inflateData()) {\n      int nextRowLen=processRowCallback();\n      prepareForNextRow(nextRowLen);\n      if (isDone())       processDoneCallback();\n    }\n  }\n else   inflateData();\n}"}
{"ids": "31377", "raw_code": "public final void goToNextPage(){\n  final boolean isLastPage=viewPager.getCurrentItem() == (pages.size() - 1);\n  if (!isLastPage) {\n    viewPager.setCurrentItem(viewPager.getCurrentItem() + 1,true);\n  }\n}"}
{"ids": "41046", "raw_code": "public List<TypeId<?>> asList(){\n  return Collections.unmodifiableList(Arrays.asList(types));\n}"}
{"ids": "9092", "raw_code": "private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){\n  String deleteStatement=\"DELETE FROM \" + RULES_TABLE + \" WHERE RULE_INTERNAL_ID=%d\";\n  for (  Rule rule : rulesToDelete) {\n    batchList.add(String.format(deleteStatement,rule.getUid()));\n  }\n}"}
{"ids": "16259", "raw_code": "public boolean isVisited(Object element){\n  return myVisitedElements.containsKey(element);\n}"}
{"ids": "68662", "raw_code": "public AwsIotConnection(AbstractAwsIotClient client){\n  this.client=client;\n}"}
{"ids": "53676", "raw_code": "public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){\n  final CompletableFuture<T> future=new CompletableFuture<T>();\n  future.completeExceptionally(throwable);\n  return future;\n}"}
{"ids": "66751", "raw_code": "protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){\n  double sumErr=0.0;\n  double sumAbsErr=0.0;\n  double sumAbsPercentErr=0.0;\n  double sumErrSquared=0.0;\n  int processedPoints=0;\n  int n=data.size();\n  for (int i=0; i < n; i++) {\n    double error=model.get(i) - data.get(i).value;\n    sumErr+=error;\n    sumAbsErr+=Math.abs(error);\n    sumAbsPercentErr+=Math.abs(error / data.get(i).value);\n    sumErrSquared+=error * error;\n    processedPoints++;\n  }\n  this.bias=sumErr / processedPoints;\n  this.mad=sumAbsErr / processedPoints;\n  this.mape=sumAbsPercentErr / processedPoints;\n  this.mse=sumErrSquared / processedPoints;\n  this.sae=sumAbsErr;\n  errorsInit=true;\n}"}
{"ids": "65122", "raw_code": "public boolean checkModifiers(MouseEvent e){\n  return e.getModifiers() == modifiers;\n}"}
{"ids": "85403", "raw_code": "public void emitRetainedVars(GenerateJsVisitor gen){\n  if (!retainedVars.isEmpty()) {\n    gen.out(\"var \");\n    boolean first=true;\n    for (    String varName : retainedVars) {\n      if (!first) {\n        gen.out(\",\");\n      }\n      first=false;\n      gen.out(varName);\n    }\n    gen.endLine(true);\n    retainedVars.clear();\n  }\n}"}
{"ids": "16666", "raw_code": "public List<StructuredTranslation> KbestExtractOnHG(HyperGraph hg,int topN){\n  resetState();\n  if (hg == null || hg.goalNode == null) {\n    return emptyList();\n  }\n  final List<StructuredTranslation> kbest=new ArrayList<>(topN);\n  for (int k=1; k <= topN; k++) {\n    StructuredTranslation translation=getKthStructuredTranslation(hg.goalNode,k);\n    if (translation == null) {\n      break;\n    }\n    kbest.add(translation);\n  }\n  return kbest;\n}"}
{"ids": "21981", "raw_code": "public static boolean isSnapshotFullCopySupported(URI blockSnapURI,DbClient dbClient){\n  BlockSnapshot blockObj=dbClient.queryObject(BlockSnapshot.class,blockSnapURI);\n  StorageSystem storage=dbClient.queryObject(StorageSystem.class,blockObj.getStorageController());\n  return (storage != null && (storage.deviceIsType(Type.openstack) || storage.deviceIsType(Type.vnxblock) || storage.deviceIsType(Type.ibmxiv)|| storage.deviceIsType(Type.vmax)));\n}"}
{"ids": "83428", "raw_code": "public Iterable<ServiceDescriptor> listServices(){\n  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();\n  for (  FileDescriptor fileDescriptor : fileDescriptors) {\n    serviceDescriptors.addAll(fileDescriptor.getServices());\n  }\n  return serviceDescriptors;\n}"}
{"ids": "53170", "raw_code": "public static double quantile(double p,double alpha,double beta){\n  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {\n    return Double.NaN;\n  }\n  if (p < 0 || p > 1) {\n    return Double.NaN;\n  }\n  if (p == 0) {\n    return 0.0;\n  }\n  if (p == 1) {\n    return 1.0;\n  }\n  if (p > 0.5) {\n    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));\n  }\n else {\n    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));\n  }\n}"}
{"ids": "31843", "raw_code": "private SharedDeployment createNewDeployment(GridDeploymentMetadata meta,boolean isCache){\n  assert Thread.holdsLock(mux);\n  assert meta.parentLoader() == null;\n  IgniteUuid ldrId=IgniteUuid.fromUuid(ctx.localNodeId());\n  GridDeploymentClassLoader clsLdr;\n  if (meta.deploymentMode() == CONTINUOUS || meta.participants() == null) {\n    clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,ctx.config().getClassLoader() != null ? ctx.config().getClassLoader() : U.gridClassLoader(),meta.classLoaderId(),meta.senderNodeId(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),meta.deploymentMode() == CONTINUOUS,false);\n    if (meta.participants() != null)     for (    Map.Entry<UUID,IgniteUuid> e : meta.participants().entrySet())     clsLdr.register(e.getKey(),e.getValue());\n    if (log.isDebugEnabled())     log.debug(\"Created class loader in CONTINUOUS mode or without participants \" + \"[ldr=\" + clsLdr + \", meta=\"+ meta+ ']');\n  }\n else {\n    assert meta.deploymentMode() == SHARED;\n    clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,U.gridClassLoader(),meta.participants(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),false,false);\n    if (log.isDebugEnabled())     log.debug(\"Created classloader in SHARED mode with participants \" + \"[ldr=\" + clsLdr + \", meta=\"+ meta+ ']');\n  }\n  SharedDeployment dep=new SharedDeployment(meta.deploymentMode(),clsLdr,ldrId,meta.userVersion(),meta.alias());\n  if (log.isDebugEnabled())   log.debug(\"Created new deployment: \" + dep);\n  if (isCache) {\n    List<SharedDeployment> deps=F.addIfAbsent(cache,meta.userVersion(),new LinkedList<SharedDeployment>());\n    assert deps != null;\n    deps.add(dep);\n    if (log.isDebugEnabled())     log.debug(\"Added deployment to cache: \" + cache);\n  }\n  return dep;\n}"}
{"ids": "77204", "raw_code": "public MultiTermQuery(final String field){\n  this.field=Objects.requireNonNull(field,\"field must not be null\");\n}"}
{"ids": "22783", "raw_code": "public static void printLine(Object message){\n  if (!isDisabled()) {\n    printLine(String.valueOf(message));\n  }\n}"}
{"ids": "35296", "raw_code": "public static boolean isAccessorPair(TMember member,TMember member2){\n  return (member instanceof TGetter && member2 instanceof TSetter) || (member instanceof TSetter && member2 instanceof TGetter);\n}"}
{"ids": "30059", "raw_code": "public static DateFormat createUTCDateFormatter(String dateFormat){\n  DateFormat formatter=new SimpleDateFormat(dateFormat);\n  formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n  return formatter;\n}"}
{"ids": "83068", "raw_code": "public void writeLinkedKml(final String filename,final KmlType kml){\n  if (filename.equals(\"doc.kml\")) {\n    throw new IllegalArgumentException(\"The filename 'doc.kml' is reserved for the primary kml.\");\n  }\n  if (filename.equals(\"main.kml\")) {\n    throw new IllegalArgumentException(\"The filename 'main.kml' is reserved for the main kml.\");\n  }\n  writeKml(filename,kml);\n}"}
{"ids": "26865", "raw_code": "String destinationFilePath(){\n  return destinationFilePath;\n}"}
{"ids": "8551", "raw_code": "public BootPanel(){\n  initComponents();\n}"}
{"ids": "50240", "raw_code": "private List<Header> defaultHeaders(){\n  DateFormat dateFormat=new SimpleDateFormat(\"EEE, dd mmm yyyy HH:mm:ss zzz\");\n  List<Header> headers=new ArrayList<>();\n  headers.add(new BasicHeader(\"Date\",dateFormat.format(new Date())));\n  return headers;\n}"}
{"ids": "54138", "raw_code": "public AemParsys clear(){\n  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));\n  list.forEach(null);\n  return this;\n}"}
{"ids": "69124", "raw_code": "private void registerNewClient(JsonObject jData){\n  Client newClient=gson.fromJson(jData,Client.class);\n  if (newClient.isValid()) {\n    addClient(newClient);\n    broadcastNewClient(newClient);\n    sendClientList(newClient);\n  }\n else {\n    logger.log(Level.WARNING,\"Could not unpack received data into a Client.\");\n  }\n}"}
{"ids": "54859", "raw_code": "EdgeMap<Block> findLoops(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){\n  EdgeMap<Block> loops=new EdgeMap<Block>();\n  for (  Block b : code)   for (  Edge s : b.succ())   if (isLoop(s,idom)) {\n    verboseStatus(\"backedge \" + s);\n    Block h=s.to;\n    Set<Block> loop=loops.get(h);\n    Set<Block> work=new TreeSet<Block>();\n    for (    Edge p : pred.get(h)) {\n      if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) {\n        loop.add(p.from);\n        work.add(p.from);\n      }\n    }\n    while (!work.isEmpty()) {\n      Block x=getBlock(work);\n      for (      Edge p : pred.get(x)) {\n        if (p.from != h && !loop.contains(p.from)) {\n          loop.add(p.from);\n          work.add(p.from);\n        }\n      }\n    }\n  }\n  return loops;\n}"}
{"ids": "73744", "raw_code": "public int[] readLine(){\n  int record[]=new int[MAX_LEN];\n  int checksum=0;\n  try {\n    while (((charIn=buffIn.read()) == 0xd) || (charIn == 0xa)) {\n    }\n    if (charIn != ':') {\n      if (log.isDebugEnabled()) {\n        log.debug(\"HexFile.readLine no colon at start of line \" + lineNo);\n      }\n      return new int[]{-1};\n    }\n  }\n catch (  IOException e) {\n    JOptionPane.showMessageDialog(this,\"I/O Error reading hex file!\",\"Hex File\",JOptionPane.ERROR_MESSAGE);\n    if (log.isDebugEnabled()) {\n      log.debug(\"I/O Error reading hex file!\" + e.toString());\n    }\n  }\n  record[LEN]=rdHexByte();\n  checksum+=record[LEN];\n  record[ADDRH]=rdHexByte();\n  checksum+=record[ADDRH];\n  record[ADDRL]=rdHexByte();\n  checksum+=record[ADDRL];\n  record[TYPE]=rdHexByte();\n  checksum+=record[TYPE];\n  address=(address & 0xffff0000) + record[ADDRH] * 256 + record[ADDRL];\n  type=record[TYPE];\n  if (type != END) {\n    len=record[LEN];\n    for (int i=1; i <= len; i++) {\n      record[TYPE + i]=rdHexByte();\n      checksum+=record[TYPE + i];\n    }\n  }\n  int fileCheck=rdHexByte();\n  if (((checksum + fileCheck) & 0xff) != 0) {\n    log.error(\"HexFile.readLine bad checksum at line \" + lineNo);\n  }\n  lineNo++;\n  return record;\n}"}
{"ids": "74365", "raw_code": "public void renameEditorPanel(Editor panel){\n  if (panelsList.size() == 0) {\n    return;\n  }\n  for (int i=0; i < panelsList.size(); i++) {\n    Object o=panelsList.get(i);\n    if (o == panel) {\n      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);\n      r.setText(panel.getTitle());\n      return;\n    }\n  }\n}"}
{"ids": "80901", "raw_code": "private boolean fitsAsSingleLine(int col){\n  return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));\n}"}
{"ids": "69048", "raw_code": "public void sphericalToWorld(Vector3 vec){\n  if (pjUnprojected == null) {\n    String projStr=\"+proj=longlat +a=\" + projInfo.getSemiMajorAxis() + \" +b=\"+ projInfo.getSemiMinorAxis()+ \" +no_defs\";\n    pjUnprojected=Proj4.newInstance(projStr);\n  }\n  if (pjProjected == null) {\n    pjProjected=Proj4.newInstance(proj4String);\n  }\n  try {\n    vec.toArray(coord);\n    coord[0]=Math.toRadians(coord[0]);\n    coord[1]=Math.toRadians(coord[1]);\n    pjUnprojected.transform(pjProjected,coord);\n    vec.setX(coord[0]);\n    vec.setY(coord[1]);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "81978", "raw_code": "public static String encodeUrl(final String str){\n  return encode(str,\"%20\");\n}"}
{"ids": "6334", "raw_code": "private long buildSize(int durationInSeconds,LinkInfo linfo){\n  long result=-1;\n  double bitRateSum=0;\nswitch (linfo.fmt) {\ncase 5:\n    bitRateSum=0.25 + 64d / 1024d;\n  break;\ncase 6:\nbitRateSum=0.8 + 64d / 1024d;\nbreak;\ncase 17:\nbitRateSum=0.05 + 24d / 1024d;\nbreak;\ncase 18:\nbitRateSum=0.5 + 96d / 1024d;\nbreak;\ncase 22:\nbitRateSum=2.9 + 192d / 1024d;\nbreak;\ncase 34:\nbitRateSum=0.5 + 128d / 1024d;\nbreak;\ncase 35:\nbitRateSum=1 + 128d / 1024d;\nbreak;\ncase 36:\nbitRateSum=0.17 + 38d / 1024d;\nbreak;\ncase 37:\nbitRateSum=5.9 + 192d / 1024d;\nbreak;\ncase 38:\nbitRateSum=5 + 192d / 1024d;\nbreak;\ncase 43:\nbitRateSum=0.5 + 128d / 1024d;\nbreak;\ncase 44:\nbitRateSum=1 + 128d / 1024d;\nbreak;\ncase 45:\nbitRateSum=2 + 192d / 1024d;\nbreak;\ncase 46:\nbitRateSum=3 + 192d / 1024d;\nbreak;\ncase 82:\nbitRateSum=0.5 + 96d / 1024d;\nbreak;\ncase 83:\nbitRateSum=0.5 + 96d / 1024d;\nbreak;\ncase 84:\nbitRateSum=2.9 + 152d / 1024d;\nbreak;\ncase 85:\nbitRateSum=2.9 + 152d / 1024d;\nbreak;\ncase 100:\nbitRateSum=0.5 + 128d / 1024d;\nbreak;\ncase 101:\nbitRateSum=1 + 192d / 1024d;\nbreak;\ncase 102:\nbitRateSum=2 + 192d / 1024d;\nbreak;\ncase 133:\nbitRateSum=0.3 + 256d / 1024d;\nbreak;\ncase 134:\nbitRateSum=0.4 + 256d / 1024d;\nbreak;\ncase 135:\nbitRateSum=1 + 256d / 1024d;\nbreak;\ncase 136:\nbitRateSum=1.5 + 256d / 1024d;\nbreak;\ncase 137:\nbitRateSum=2.9 + 256d / 1024d;\nbreak;\ncase 139:\nbitRateSum=48d / 1024d;\nbreak;\ncase 140:\nbitRateSum=128d / 1024d;\nbreak;\ncase 141:\nbitRateSum=256d / 1024d;\nbreak;\n}\nbitRateSum=bitRateSum * 1024 * 1024;\nresult=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));\nreturn result;\n}"}
{"ids": "25127", "raw_code": "@Override public void actOn(File f){\n  BufferedReader reader=null;\n  try {\n    reader=new BufferedReader(new FileReader(f));\n    announceSeedsFromReader(reader);\n  }\n catch (  FileNotFoundException fnf) {\n    logger.log(Level.SEVERE,\"seed file source not found\",fnf);\n  }\n finally {\n    IOUtils.closeQuietly(reader);\n  }\n}"}
{"ids": "16835", "raw_code": "public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){\n  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);\n}"}
{"ids": "78755", "raw_code": "public ResourcesPoet addTypedArray(String name,@NotNull List<String> values){\n  Element element=document.createElement(\"array\");\n  element.setAttribute(\"name\",name);\n  for (  String value : values) {\n    Element valueElement=document.createElement(\"item\");\n    valueElement.appendChild(document.createTextNode(value));\n    element.appendChild(valueElement);\n  }\n  resourceElement.appendChild(element);\n  return this;\n}"}
{"ids": "64504", "raw_code": "public boolean addSubAction(final ConfAction actionConf) throws GeneralException, ConfigurationException {\n  if (actionConf.getType() != null) {\n    final SubAction sub=SubAction.factory(actionConf.getType(),actionConf);\n    if (sub == null) {\n      if (Cfg.DEBUG) {\n        Check.log(TAG + \" Error (addSubAction): unknown type: \" + actionConf.getType());\n      }\n      return false;\n    }\n    list.add(sub);\n    if (sub instanceof SubActionSlow) {\n      setQueue(MAIN_QUEUE);\n    }\n    return true;\n  }\n else {\n    if (Cfg.DEBUG) {\n      Check.log(TAG + \" Error (addSubAction): null type \");\n    }\n    return false;\n  }\n}"}
{"ids": "3360", "raw_code": "void fillEntryTree(Set<PageLeafEntry> entries,Row row){\n  int ptr=_rowHead;\n  byte[] buffer=_buffer;\n  while (ptr < BLOCK_SIZE) {\n    int code=buffer[ptr] & CODE_MASK;\n    int len=getLength(code,row);\n    if (code == INSERT || code == REMOVE) {\n      PageLeafEntry entry=new PageLeafEntry(this,row,ptr,len,code);\n      entries.add(entry);\n    }\n    ptr+=len;\n  }\n}"}
{"ids": "22968", "raw_code": "public static <S>boolean containsAtleastOne(Collection<S> left,Collection<S> right){\n  if (left == null || right == null) {\n    return false;\n  }\n  for (  S id : left) {\n    if (right.contains(id)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "21681", "raw_code": "public void logDiff(String id,String field,String db,String hw){\n  StringBuffer diffBuffer=new StringBuffer(String.format(\"Controller database object ID [%s], field [%s]: \",id,field));\n  if (db == null || db.isEmpty() || db.equalsIgnoreCase(NO_MATCHING_ENTRY)) {\n    diffBuffer.append(String.format(\"The hardware reported entry [%s], whereas the controller is not managing or does not have a reference to the same resource\\n\",hw));\n  }\n else   if (hw == null || hw.isEmpty() || hw.equalsIgnoreCase(NO_MATCHING_ENTRY)) {\n    diffBuffer.append(String.format(\"The controller is managing resource [%s], whereas the hardware did not report that resource\\n\",db));\n  }\n else {\n    diffBuffer.append(String.format(\"The controller references resource: [%s], whereas the hardware reported the actual resource as: [%s]\\n\",db != null ? db : \"null\",hw != null ? hw : \"null\"));\n  }\n  msgs.append(diffBuffer.toString() + \"\\n\");\n  if (log != null) {\n    log.info(diffBuffer.toString());\n  }\n}"}
{"ids": "62545", "raw_code": "public FieldFrameBodyIMG(Lyrics3Image image){\n  images.add(image);\n}"}
{"ids": "83494", "raw_code": "public AbstractResource(String mimetype){\n  this(mimetype,System.currentTimeMillis());\n}"}
{"ids": "71005", "raw_code": "private Parameters(){\n  for (Iterator i=arguments.iterator(); i.hasNext(); ) {\n    String arg=(String)i.next();\n    arg=arg.toLowerCase();\n    if (!arg.startsWith(\"-\"))     throw new IllegalArgumentException(\"Command-line argument does not start with '-': \" + arg);\n    int colonIndex=arg.indexOf(\":\");\n    String key;\n    String value;\n    if (colonIndex >= 0) {\n      key=arg.substring(1,colonIndex);\n      value=arg.substring(colonIndex + 1);\n    }\n else {\n      key=arg.substring(1);\n      value=\"\";\n    }\n    if (!allowedKeys.contains(key))     throw new IllegalArgumentException(\"Unrecognized command-line argument: \" + arg.substring(1) + \". Valid arguments are: \"+ StringUtil.toCommaDelimitedString(allowedKeys));\n    hashtable.put(key,value);\n  }\n  for (Iterator i=requiredKeys.iterator(); i.hasNext(); ) {\n    String requiredKey=(String)i.next();\n    if (!hashtable.containsKey(requiredKey))     throw new IllegalArgumentException(\"Required command-line argument is missing: \" + requiredKey);\n  }\n}"}
{"ids": "52669", "raw_code": "public List<TLV> initRespondSmp(String question,String secret,boolean initiating) throws OtrException {\n  if (question != null && !initiating)   throw new IllegalArgumentException(\"Only supply a question if initiating\");\n  byte[] our_fp=Hex.decode(keyManager.getLocalFingerprint(sessionID));\n  String remoteFingerprint=keyManager.getRemoteFingerprint(sessionID);\n  if (remoteFingerprint == null)   throw new OtrException(\"no fingerprint for remote user\");\n  byte[] their_fp=Hex.decode(remoteFingerprint);\n  byte[] sessionId;\n  try {\n    sessionId=computeSessionId(session.getS());\n  }\n catch (  SMException ex) {\n    throw new OtrException(ex);\n  }\n  byte[] bytes=secret.getBytes(SerializationUtils.UTF8);\n  int combined_buf_len=41 + sessionId.length + bytes.length;\n  byte[] combined_buf=new byte[combined_buf_len];\n  combined_buf[0]=1;\n  if (initiating) {\n    System.arraycopy(our_fp,0,combined_buf,1,20);\n    System.arraycopy(their_fp,0,combined_buf,21,20);\n  }\n else {\n    System.arraycopy(their_fp,0,combined_buf,1,20);\n    System.arraycopy(our_fp,0,combined_buf,21,20);\n  }\n  System.arraycopy(sessionId,0,combined_buf,41,sessionId.length);\n  System.arraycopy(bytes,0,combined_buf,41 + sessionId.length,bytes.length);\n  MessageDigest sha256;\n  try {\n    sha256=MessageDigest.getInstance(\"SHA-256\");\n  }\n catch (  NoSuchAlgorithmException ex) {\n    throw new OtrException(ex);\n  }\n  byte[] combined_secret=sha256.digest(combined_buf);\n  byte[] smpmsg;\n  try {\n    if (initiating) {\n      smpmsg=SM.step1(smstate,combined_secret);\n    }\n else {\n      smpmsg=SM.step2b(smstate,combined_secret);\n    }\n  }\n catch (  SMException ex) {\n    throw new OtrException(ex);\n  }\n  if (question != null) {\n    bytes=question.getBytes(SerializationUtils.UTF8);\n    byte[] qsmpmsg=new byte[bytes.length + 1 + smpmsg.length];\n    System.arraycopy(bytes,0,qsmpmsg,0,bytes.length);\n    System.arraycopy(smpmsg,0,qsmpmsg,bytes.length + 1,smpmsg.length);\n    smpmsg=qsmpmsg;\n  }\n  TLV sendtlv=new TLV(initiating ? (question != null ? TLV.SMP1Q : TLV.SMP1) : TLV.SMP2,smpmsg);\n  smstate.nextExpected=initiating ? SM.EXPECT2 : SM.EXPECT3;\n  return makeTlvList(sendtlv);\n}"}
{"ids": "12486", "raw_code": "private double melToLinFreq(double inputFreq){\n  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));\n}"}
{"ids": "55988", "raw_code": "public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){\n  mIconWidthPx=iconWidthPx;\n  mIconHeightPx=iconHeightPx;\n  mCornerRadiusPx=cornerRadiusPx;\n  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);\n  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);\n  mBackgroundPaint.setColor(backgroundColor);\n  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);\n  mTextPaint.setColor(Color.WHITE);\n  mTextPaint.setFakeBoldText(true);\n  mTextPaint.setTextSize(textSizePx);\n  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();\n  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);\n  mTextYOffset=-textFontMetrics.top;\n}"}
{"ids": "76574", "raw_code": "protected void arraycopy(byte[] buf,int pos,int length){\n  mMessage.write(buf,pos,length);\n  mPosition=mPosition + length;\n}"}
{"ids": "31799", "raw_code": "public boolean expired(){\n  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;\n}"}
{"ids": "52318", "raw_code": "private void handleSelection(View view,Item item,int position){\n  if (!item.isSelectable()) {\n    return;\n  }\n  if (item.isSelected() && !mAllowDeselection) {\n    return;\n  }\n  boolean selected=false;\n  if (mPositionBasedStateManagement) {\n    selected=mSelections.contains(position);\n  }\n else {\n    selected=item.isSelected();\n  }\n  if (mSelectWithItemUpdate || view == null) {\n    if (!mMultiSelect) {\n      deselect();\n    }\n    if (selected) {\n      deselect(position);\n    }\n else {\n      select(position);\n    }\n  }\n else {\n    if (!mMultiSelect) {\n      if (mPositionBasedStateManagement) {\n        Iterator<Integer> entries=mSelections.iterator();\n        while (entries.hasNext()) {\n          Integer pos=entries.next();\n          if (pos != position) {\n            deselect(pos,entries);\n          }\n        }\n      }\n else {\n        Set<Integer> selections=getSelections();\n        for (        int pos : selections) {\n          if (pos != position) {\n            deselect(pos);\n          }\n        }\n      }\n    }\n    item.withSetSelected(!selected);\n    view.setSelected(!selected);\n    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);\n    if (mPositionBasedStateManagement) {\n      if (selected) {\n        if (mSelections.contains(position)) {\n          mSelections.remove(position);\n        }\n      }\n else {\n        mSelections.add(position);\n      }\n    }\n  }\n}"}
{"ids": "65707", "raw_code": "public boolean canInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){\n  if (assetwk == null) {\n    log.warning(\"@NotFound@ @A_Depreciation_Workfile_ID@\");\n    return false;\n  }\n  int offset=0;\n  int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal());\n  boolean ok=(offset <= A_Current_Period);\n  if (CLogMgt.isLevelFinest())   log.finest(\"A_Current_Period=\" + A_Current_Period + \", lifePeriods=\"+ lifePeriods+ \" (offset=\"+ offset+ \") ==> OK=\"+ ok);\n  return ok;\n}"}
{"ids": "67405", "raw_code": "public void addTextChangeListener(final FilterQueryChangeListener textChangeListener){\n  listeners.add(textChangeListener);\n}"}
{"ids": "80193", "raw_code": "@Override public Iterator<Profile> iterator(){\n  return profiles.iterator();\n}"}
{"ids": "85147", "raw_code": "private boolean startsWithSpace(String str){\n  return str.length() != 0 && str.charAt(0) == ' ';\n}"}
{"ids": "69101", "raw_code": "private int keyToLevel(String key){\n  String[] token=key.split(\"/\");\n  return (token.length - 1);\n}"}
{"ids": "11663", "raw_code": "public boolean mouseDragged(MouseEvent e){\n  if (grabbed_plot_graphics_) {\n    int x=e.getX();\n    int y=e.getY();\n    int dx=x - prevX;\n    int dy=y - prevY;\n    plotX+=dx;\n    plotY+=dy;\n    prevX=x;\n    prevY=y;\n    graph.resize(plotX,plotY,plotWidth,plotHeight);\n    OMGraphicList plotGraphics=graph.getPlotGraphics();\n    plotGraphics.generate(getProjection(),true);\n    repaint();\n  }\n  return false;\n}"}
{"ids": "9684", "raw_code": "public void load(GeneralSubtrees generalSubtrees){\n  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();\n  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());\n  data=new Object[generalSubtreesList.size()][3];\n  int i=0;\n  for (  GeneralSubtree generalSubtree : generalSubtreesList) {\n    data[i][0]=generalSubtree;\n    data[i][1]=generalSubtree;\n    data[i][2]=generalSubtree;\n    i++;\n  }\n  fireTableDataChanged();\n}"}
{"ids": "77520", "raw_code": "public boolean isPingDisabled(){\n  return (null != healthcheck && !healthcheck.exists());\n}"}
{"ids": "85002", "raw_code": "public static void writeToFile(File file,String contents) throws IOException {\n  FileOutputStream fos=new FileOutputStream(file);\n  fos.write(contents.getBytes());\n  fos.close();\n}"}
{"ids": "31744", "raw_code": "public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){\n  Text key=new Text();\n  for (  Pair<String,Integer> pair : flatData) {\n    key.set(pair.key);\n    ArrayList<IntWritable> valList;\n    if (!mockInput.containsKey(key)) {\n      valList=new ArrayList<>();\n      mockInput.put(key,valList);\n      key=new Text();\n    }\n else     valList=(ArrayList<IntWritable>)mockInput.get(key);\n    valList.add(new IntWritable(pair.value()));\n  }\n}"}
{"ids": "71091", "raw_code": "public static double angle(Coordinate p0,Coordinate p1){\n  double dx=p1.x - p0.x;\n  double dy=p1.y - p0.y;\n  return Math.atan2(dy,dx);\n}"}
{"ids": "62951", "raw_code": "public InMemoryCursor(String[] columnNames){\n  mCurrentPosition=-1;\n  mColumnNames=columnNames;\n}"}
{"ids": "36412", "raw_code": "private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){\n  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {\nswitch (RapidMinerGUI.getDragHighlighteMode()) {\ncase FULL:\ncase BORDER:\n      drawDragBorder(process,g2);\n    break;\ncase NONE:\ndefault :\n  break;\n}\n}\n}"}
{"ids": "83748", "raw_code": "public ModbusTransaction createTransaction(){\n  ModbusSerialTransaction transaction=new ModbusSerialTransaction();\n  transaction.setTransport(this);\n  return transaction;\n}"}
{"ids": "68447", "raw_code": "public void start(){\n  if (runner == null) {\n    runner=new Thread(this,\"Runner\");\n    runner.start();\n  }\n}"}
{"ids": "9136", "raw_code": "protected final File createDBFFDCDirectory(){\n  File dbffdcDir=new File(ffdcDirectoryName);\n  if (!dbffdcDir.exists()) {\n    final boolean isDBFFDcDirCreated=dbffdcDir.mkdirs();\n    if (isDBFFDcDirCreated) {\n      dbffdcDir=new File(ffdcDirectoryName);\n      return dbffdcDir;\n    }\n  }\n else   if (!dbffdcDir.isDirectory()) {\n    return null;\n  }\n  return dbffdcDir;\n}"}
{"ids": "62459", "raw_code": "public static String readCharacterSizedString(InputStream stream) throws IOException {\n  StringBuilder result=new StringBuilder();\n  int strLen=readUINT16(stream);\n  int character=stream.read();\n  character|=stream.read() << 8;\n  do {\n    if (character != 0) {\n      result.append((char)character);\n      character=stream.read();\n      character|=stream.read() << 8;\n    }\n  }\n while (character != 0 || (result.length() + 1) > strLen);\n  if (strLen != (result.length() + 1)) {\n    throw new IllegalStateException(\"Invalid Data for current interpretation\");\n  }\n  return result.toString();\n}"}
{"ids": "76676", "raw_code": "protected void processChildren(QueryNode queryTree) throws QueryNodeException {\n  List<QueryNode> children=queryTree.getChildren();\n  ChildrenList newChildren;\n  if (children != null && children.size() > 0) {\n    newChildren=allocateChildrenList();\n    try {\n      for (      QueryNode child : children) {\n        child=processIteration(child);\n        if (child == null) {\n          throw new NullPointerException();\n        }\n        newChildren.add(child);\n      }\n      List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren);\n      queryTree.set(orderedChildrenList);\n    }\n  finally {\n      newChildren.beingUsed=false;\n    }\n  }\n}"}
{"ids": "6661", "raw_code": "private void initializeMessages(List<String> messages){\n  messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));\n  if (OSUtils.isWindows()) {\n    messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));\n  }\n else   if (OSUtils.isMacOSX()) {\n    messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));\n  }\n else   if (OSUtils.isLinux()) {\n    messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));\n  }\n else {\n    messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));\n  }\n  if (!OSUtils.isMacOSX()) {\n    messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));\n  }\n  messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));\n  Collections.shuffle(messages);\n  _currentTip=-1;\n}"}
{"ids": "72013", "raw_code": "public PersistedQueue(final File queueEnvPath,final String queueName,final int cacheSize){\n  queueEnvPath.mkdirs();\n  final EnvironmentConfig dbEnvConfig=new EnvironmentConfig();\n  dbEnvConfig.setTransactional(false);\n  dbEnvConfig.setAllowCreate(true);\n  this.dbEnv=new Environment(queueEnvPath,dbEnvConfig);\n  DatabaseConfig dbConfig=new DatabaseConfig();\n  dbConfig.setTransactional(false);\n  dbConfig.setAllowCreate(true);\n  dbConfig.setDeferredWrite(true);\n  this.queueDatabase=dbEnv.openDatabase(null,queueName,dbConfig);\n  this.queueName=queueName;\n  this.cacheSize=cacheSize;\n  this.opsCounter=0;\n}"}
{"ids": "75534", "raw_code": "protected final StringBuilder write(StringBuilder sb,final Object... objects){\n  for (  Object string : objects)   sb.append(string);\n  return sb;\n}"}
{"ids": "16707", "raw_code": "public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  int vocabSize=in.readInt();\n  for (int i=0; i < vocabSize; i++) {\n    String line=in.readUTF();\n    Vocabulary.id(line);\n  }\n  numTokens=in.readDouble();\n  countFuncs=new long[in.readInt()][2];\n  for (int i=0; i < countFuncs.length; i++) {\n    countFuncs[i][0]=in.readLong();\n    countFuncs[i][1]=in.readLong();\n  }\n  typesFuncs=new long[in.readInt()][2];\n  for (int i=0; i < typesFuncs.length; i++) {\n    typesFuncs[i][0]=in.readLong();\n    typesFuncs[i][1]=in.readLong();\n  }\n  quantizationBase=in.readDouble();\n  bf=new BloomFilter();\n  bf.readExternal(in);\n}"}
{"ids": "53141", "raw_code": "public static double computeMAD(double[] x,double median){\n  for (int i=0; i < x.length; i++) {\n    x[i]=Math.abs(x[i] - median);\n  }\n  double mad=QuickSelect.median(x);\n  if (!(mad > 0.)) {\n    double min=Double.POSITIVE_INFINITY;\n    for (    double xi : x) {\n      if (xi > 0. && xi < min) {\n        min=xi;\n      }\n    }\n    if (min < Double.POSITIVE_INFINITY) {\n      mad=min;\n    }\n else {\n      mad=1.0;\n    }\n  }\n  if (mad == Double.POSITIVE_INFINITY) {\n    double max=0.;\n    for (    double xi : x) {\n      if (xi < Double.POSITIVE_INFINITY && xi > max) {\n        max=xi;\n      }\n    }\n    if (max < Double.POSITIVE_INFINITY) {\n      mad=max;\n    }\n else {\n      mad=1.0;\n    }\n  }\n  return mad;\n}"}
{"ids": "86974", "raw_code": "public SdpException(Throwable rootCause){\n  super(rootCause.getLocalizedMessage());\n}"}
{"ids": "73778", "raw_code": "protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){\n  Set<PropertyChangeListener> v;\nsynchronized (this) {\n    v=new HashSet<>(listeners);\n  }\n  for (  PropertyChangeListener listener : v) {\n    listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));\n  }\n}"}
{"ids": "30679", "raw_code": "public boolean indicateDirtyRead(ITemplateHolder template){\n  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());\n}"}
{"ids": "27035", "raw_code": "protected void applyAttributesToSymbol(TacticalGraphicAttributes graphicAttributes,TacticalSymbolAttributes symbolAttributes){\n  Double value=graphicAttributes.getInteriorOpacity();\n  if (value != null) {\n    symbolAttributes.setOpacity(value);\n  }\n  value=graphicAttributes.getScale();\n  if (value != null) {\n    symbolAttributes.setScale(value);\n  }\n  Material material=graphicAttributes.getInteriorMaterial();\n  symbolAttributes.setInteriorMaterial(material);\n  Font font=graphicAttributes.getTextModifierFont();\n  if (font != null) {\n    symbolAttributes.setTextModifierFont(font);\n  }\n  material=graphicAttributes.getTextModifierMaterial();\n  if (material != null) {\n    symbolAttributes.setTextModifierMaterial(material);\n  }\n}"}
{"ids": "33321", "raw_code": "public RemoteServiceDescriptor(String baseUrl,HttpJsonRequestFactory requestFactory) throws IllegalArgumentException {\n  this.baseUrl=baseUrl;\n  this.requestFactory=requestFactory;\n  try {\n    final URL baseUrlURL=new URL(baseUrl);\n    final String protocol=baseUrlURL.getProtocol();\n    if (!(protocol.equals(\"http\") || protocol.equals(\"https\"))) {\n      throw new IllegalArgumentException(String.format(\"Invalid URL: %s\",baseUrl));\n    }\n  }\n catch (  MalformedURLException e) {\n    throw new IllegalArgumentException(String.format(\"Invalid URL: %s\",baseUrl));\n  }\n}"}
{"ids": "63378", "raw_code": "public Server start() throws SQLException {\n  try {\n    started=true;\n    service.start();\n    String name=service.getName() + \" (\" + service.getURL()+ \")\";\n    Thread t=new Thread(this,name);\n    t.setDaemon(service.isDaemon());\n    t.start();\n    for (int i=1; i < 64; i+=i) {\n      wait(i);\n      if (isRunning(false)) {\n        return this;\n      }\n    }\n    if (isRunning(true)) {\n      return this;\n    }\n    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,\"timeout; \" + \"please check your network configuration, specially the file /etc/hosts\");\n  }\n catch (  DbException e) {\n    throw DbException.toSQLException(e);\n  }\n}"}
{"ids": "74544", "raw_code": "@Override public boolean isComplete(){\n  return true;\n}"}
{"ids": "85288", "raw_code": "public ByteMatrix encode(String contents,int width,int height,Map<EncodeHintType,Object> hints) throws WriterException {\n  if (contents == null || contents.length() == 0) {\n    throw new IllegalArgumentException(\"Found empty contents\");\n  }\n  if (width < 0 || height < 0) {\n    throw new IllegalArgumentException(\"Requested dimensions are too small: \" + width + 'x'+ height);\n  }\n  ErrorCorrectionLevel errorCorrectionLevel=ErrorCorrectionLevel.L;\n  if (hints != null) {\n    ErrorCorrectionLevel requestedECLevel=(ErrorCorrectionLevel)hints.get(EncodeHintType.ERROR_CORRECTION);\n    if (requestedECLevel != null) {\n      errorCorrectionLevel=requestedECLevel;\n    }\n  }\n  QRCode code=new QRCode();\n  Encoder.encode(contents,errorCorrectionLevel,hints,code);\n  return renderResult(code,width,height);\n}"}
{"ids": "3386", "raw_code": "public Request header(String key,String value){\n  Objects.requireNonNull(key);\n  Objects.requireNonNull(value);\n  _headers.put(key,value);\n  return this;\n}"}
{"ids": "6625", "raw_code": "public void updateUI(){\n  super.updateUI();\n  setBackground(new Color(255,255,255,0));\n  setWrapStyleWord(true);\n  setHighlighter(null);\n  setEditable(false);\n  LookAndFeel.installBorder(this,\"Label.border\");\n  LookAndFeel.installColorsAndFont(this,\"Label.background\",\"Label.foreground\",\"Label.font\");\n  if (resizeHandler != null) {\n    resizeHandler.componentResized(null);\n  }\n  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);\n  if (policy != null) {\n    GUIUtils.restrictSize(this,policy);\n  }\n}"}
{"ids": "19958", "raw_code": "public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {\n  return pool.submit(task);\n}"}
{"ids": "1907", "raw_code": "private void checkBucketName(String name) throws InvalidBucketNameException {\n  if (name == null) {\n    throw new InvalidBucketNameException(NULL_STRING,\"null bucket name\");\n  }\n  if (name.length() < 3 || name.length() > 63) {\n    String msg=\"bucket name must be at least 3 and no more than 63 characters long\";\n    throw new InvalidBucketNameException(name,msg);\n  }\n  if (name.matches(\"\\\\.\\\\.\")) {\n    String msg=\"bucket name cannot contain successive periods. For more information refer \" + \"http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\";\n    throw new InvalidBucketNameException(name,msg);\n  }\n  if (!name.matches(\"^[a-z0-9][a-z0-9\\\\.\\\\-]+[a-z0-9]$\")) {\n    String msg=\"bucket name does not follow Amazon S3 standards. For more information refer \" + \"http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\";\n    throw new InvalidBucketNameException(name,msg);\n  }\n}"}
{"ids": "56797", "raw_code": "private void validateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request){\n  Assert.notNull(request,\"A user namespace authorization create request must be specified.\");\n  validateUserNamespaceAuthorizationKey(request.getUserNamespaceAuthorizationKey());\n  validateNamespacePermissions(request.getNamespacePermissions());\n}"}
{"ids": "20007", "raw_code": "protected String format(Object o){\n  return o.toString();\n}"}
{"ids": "22015", "raw_code": "protected boolean canDeleteConsistencyGroup(final BlockConsistencyGroup consistencyGroup){\n  return (!consistencyGroup.getInactive() && !consistencyGroup.created());\n}"}
{"ids": "1760", "raw_code": "public AmqpMessage receiveNoWait() throws Exception {\n  checkClosed();\n  return prefetch.poll();\n}"}
{"ids": "70296", "raw_code": "private void checkDuplicateNamesDuringDelete(List<Integer> ids){\n  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);\n  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));\n  for (  Entity e : myEntities) {\n    String rawName=e.getShortNameRaw();\n    ArrayList<Integer> namedIds=rawNameToId.get(rawName);\n    if (namedIds == null) {\n      namedIds=new ArrayList<Integer>();\n    }\n    namedIds.add(e.getId());\n    rawNameToId.put(rawName,namedIds);\n  }\n  for (  int id : ids) {\n    Entity removedEntity=game.getEntity(id);\n    if (removedEntity == null) {\n      continue;\n    }\n    String removedRawName=removedEntity.getShortNameRaw();\n    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());\n    if ((count != null) && (count > 1)) {\n      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);\n      for (      Integer i : namedIds) {\n        Entity e=game.getEntity(i);\n        String eRawName=e.getShortNameRaw();\n        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {\n          e.duplicateMarker--;\n          e.generateShortName();\n          e.generateDisplayName();\n          if (!ids.contains(e.getId())) {\n            sendUpdateEntity(e);\n          }\n        }\n      }\n      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));\n    }\n else     if (count != null) {\n      duplicateNameHash.remove(removedEntity.getShortNameRaw());\n    }\n  }\n}"}
{"ids": "2499", "raw_code": "public void releaseSelections(Set<Entity> items){\n  for (  Entity item : items) {\n    releaseSelection(item);\n  }\n}"}
{"ids": "83250", "raw_code": "public HubLinkMapping(String fileName,int numberOfHubs,Network network){\n  this.numberOfHubs=numberOfHubs;\n  if (fileName.contains(\".mappingTable.\")) {\n    readMappingTable(fileName);\n    unMappedLinksAtZeroHub=true;\n    return;\n  }\n  handleUnmappedLinksStart();\n  try {\n    FileReader fr=new FileReader(fileName);\n    BufferedReader br=new BufferedReader(fr);\n    String line;\n    StringTokenizer tokenizer;\n    String token;\n    int linkId;\n    line=br.readLine();\n    while (line != null) {\n      tokenizer=new StringTokenizer(line);\n      for (int i=0; i < this.numberOfHubs; i++) {\n        token=tokenizer.nextToken();\n        linkId=(int)Double.parseDouble(token);\n        linkHubMapping.put(Integer.toString(linkId),i);\n      }\n      if (tokenizer.hasMoreTokens()) {\n        throw new RuntimeException(\"the number of hubs is wrong\");\n      }\n      line=br.readLine();\n    }\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Error reading the hub link mapping file\");\n  }\n  linkHubMapping.remove(\"-1\");\n  handleUnmappedLinksEnd(network);\n}"}
{"ids": "74305", "raw_code": "public boolean deleteLoadName(String load){\n  if (!_loadList.contains(load)) {\n    return false;\n  }\n  _loadList.remove(load);\n  log.debug(\"train (\" + getName() + \") delete car load \"+ load);\n  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());\n  return true;\n}"}
{"ids": "17282", "raw_code": "private ComputeState validateComputeName(String awsId,String vmName) throws Throwable {\n  if (this.isAwsClientMock) {\n    return null;\n  }\n  ComputeState computeState=getComputeByAWSId(this.host,awsId);\n  String tagNameValue=computeState.name;\n  assertNotNull(\"'displayName' property should be present\",tagNameValue);\n  assertEquals(vmName,tagNameValue);\n  return computeState;\n}"}
{"ids": "79178", "raw_code": "public static String fromTag(IntArrayTag tag){\n  StringBuilder builder=new StringBuilder();\n  builder.append(ARRAY_START);\n  boolean start=true;\n  for (  int value : tag.getValue()) {\n    IntTag i=new IntTag(value);\n    if (start) {\n      start=false;\n    }\n else {\n      builder.append(ELEMENT_SEPERATOR);\n    }\n    builder.append(fromTag(i));\n  }\n  builder.append(ARRAY_END);\n  return builder.toString();\n}"}
{"ids": "84990", "raw_code": "public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){\n  if (argIndex < 0 || argIndex >= args.size()) {\n    return 0;\n  }\n  if (tryRemovingArgValue) {\n    String argValue=getArgValue(args,argIndex + 1);\n    if (argValue != null) {\n      args.remove(argIndex + 1);\n    }\n  }\n  args.remove(argIndex);\n  return argIndex;\n}"}
{"ids": "14679", "raw_code": "void replacePolicyInResourceTree(ServiceTypeManager svtm,SSOToken token,Policy oldPolicy,Policy newPolicy) throws PolicyException, SSOException {\n  removePolicyFromResourceTree(svtm,token,oldPolicy);\n  addPolicyToResourceTree(svtm,token,newPolicy);\n}"}
{"ids": "9400", "raw_code": "public AtomicDoubleArray(int length){\n  larray=new AtomicLongArray(length);\n  long ZERO=Double.doubleToRawLongBits(0.0);\n  for (int i=0; i < length; i++)   larray.set(i,ZERO);\n}"}
{"ids": "386", "raw_code": "private static BufferedImage makeSquare(BufferedImage input){\n  if (input.getHeight() == input.getWidth()) {\n    return input;\n  }\n else {\n    int max=Math.max(input.getHeight(),input.getWidth());\n    int dx=(max - input.getWidth()) / 2;\n    int dy=(max - input.getHeight()) / 2;\n    return createImg(max,max,input.getType(),null);\n  }\n}"}
{"ids": "46983", "raw_code": "public void writeStartElement(String localName) throws XMLStreamException {\n  if (localName == null || localName.length() == 0) {\n    throw new XMLStreamException(\"Local Name cannot be null or empty\");\n  }\n  _state=STATE_ELEMENT;\n  if (_currentEle != null && _currentEle.getState() == ELEMENT_STARTTAG_OPEN) {\n    closeStartTag();\n  }\n  _currentEle=new Element(_currentEle,localName,false);\n  openStartTag();\n  _writer.write(localName);\n}"}
{"ids": "36443", "raw_code": "public void addProcessInteractionListener(final ProcessInteractionListener l){\n  if (l == null) {\n    throw new IllegalArgumentException(\"l must not be null!\");\n  }\n  processInteractionListeners.add(l);\n}"}
{"ids": "26003", "raw_code": "private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){\n  if (root == null || seen.containsKey(root)) {\n    return;\n  }\n  if (yieldRoot) {\n    if (!visit(root)) {\n      return;\n    }\n  }\n  seen.put(root,root);\n  if (root instanceof JSONObject) {\n    JSONObject json=(JSONObject)root;\n    Iterator<String> keys=json.keys();\n    while (keys.hasNext()) {\n      String key=keys.next();\n      try {\n        traverseInternal(json.get(key),true,seen);\n      }\n catch (      JSONException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n else   if (root instanceof JSONArray) {\n    JSONArray array=(JSONArray)root;\n    for (int i=0; i < array.length(); ++i) {\n      try {\n        traverseInternal(array.get(i),true,seen);\n      }\n catch (      JSONException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n else   if (root instanceof Map) {\n    Map<?,?> map=(Map<?,?>)root;\n    for (    Object value : map.values()) {\n      traverseInternal(value,true,seen);\n    }\n  }\n else   if (root instanceof List) {\n    List<?> list=(List<?>)root;\n    for (    Object value : list) {\n      traverseInternal(value,true,seen);\n    }\n  }\n else   if (root instanceof ParseObject) {\n    if (traverseParseObjects) {\n      ParseObject object=(ParseObject)root;\n      for (      String key : object.keySet()) {\n        traverseInternal(object.get(key),true,seen);\n      }\n    }\n  }\n else   if (root instanceof ParseACL) {\n    ParseACL acl=(ParseACL)root;\n    ParseUser user=acl.getUnresolvedUser();\n    if (user != null && user.isCurrentUser()) {\n      traverseInternal(user,true,seen);\n    }\n  }\n}"}
{"ids": "74464", "raw_code": "public CommonTurnoutOperationConfig(TurnoutOperation op){\n  super(op);\n  myOp=(CommonTurnoutOperation)op;\n  maxTriesSpinner=new JSpinner();\n  intervalSpinner=new JSpinner();\n  Box vbox=Box.createVerticalBox();\n  Box hbox1=Box.createHorizontalBox();\n  Box hbox2=Box.createHorizontalBox();\n  vbox.add(hbox2);\n  vbox.add(hbox1);\n  vbox.add(Box.createVerticalGlue());\n  hbox1.add(new JLabel(Bundle.getMessage(\"Interval\")));\n  hbox1.add(Box.createHorizontalGlue());\n  intervalSpinner.setMinimumSize(new Dimension(100,20));\n  intervalSpinner.setModel(new SpinnerNumberModel(myOp.getInterval(),CommonTurnoutOperation.minInterval,CommonTurnoutOperation.maxInterval,CommonTurnoutOperation.intervalStepSize));\n  hbox1.add(intervalSpinner);\n  hbox2.add(new JLabel(Bundle.getMessage(\"TimesToTry\")));\n  hbox2.add(Box.createHorizontalGlue());\n  maxTriesSpinner.setMinimumSize(new Dimension(100,20));\n  maxTriesSpinner.setModel(new SpinnerNumberModel(myOp.getMaxTries(),CommonTurnoutOperation.minMaxTries,CommonTurnoutOperation.maxMaxTries,1));\n  hbox2.add(maxTriesSpinner);\n  Box hbox3=Box.createHorizontalBox();\n  hbox3.add(Box.createHorizontalStrut(150));\n  vbox.add(hbox3);\n  add(vbox);\n}"}
{"ids": "35691", "raw_code": "public String findInterlanguageLink(String lang){\n  int start=page.indexOf(\"[[\" + lang + \":\");\n  if (start < 0)   return null;\n  int end=page.indexOf(\"]]\",start);\n  if (end < 0)   return null;\n  String link=page.substring(start + 3 + lang.length(),end);\n  if (link.indexOf(\"\\n\") != -1) {\n    return null;\n  }\n  if (link.length() == 0)   return null;\n  return link;\n}"}
{"ids": "37190", "raw_code": "private void updateActions(final INaviAddressSpace addressSpace){\n  m_loadAddressSpaceAction.setEnabled(!addressSpace.isLoaded());\n}"}
{"ids": "86544", "raw_code": "public static <T>ParallelFlux<T> from(Publisher<? extends T> source,int parallelism){\n  return from(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());\n}"}
{"ids": "86215", "raw_code": "private void addGumball(float xPos,float yPos){\n  Gumball gumball=new Gumball();\n  gumball.mXInitPos=xPos;\n  gumball.mYInitPos=yPos;\n  gumball.mSoundPoolId=UUID.randomUUID();\n  mSoundPoolId.put(gumball.mSoundPoolId,false);\n  mGameView.addGumball(gumball);\n  mSoundPool.play(mSoundBallDrop,1,1,0,0,1);\n}"}
{"ids": "1640", "raw_code": "int put(T segment,List<? super T> recycleBin){\n  int count;\n  if (lastCount == 0) {\n    count=0;\n    lastCount=1;\n    last=segment;\n  }\n else   if (Objects.deepEquals(last,segment)) {\n    ++lastCount;\n    count=0;\n    recycleBin.add(segment);\n  }\n else {\n    count=lastCount;\n    lastCount=1;\n    last=segment;\n  }\n  return count;\n}"}
{"ids": "69621", "raw_code": "public Channel chan(final String topic,final JsonNode payload){\n  LOG.log(Level.FINE,\"chan: {0}, {1}\",new Object[]{topic,payload});\n  final Channel channel=new Channel(topic,payload,Socket.this);\nsynchronized (channels) {\n    channels.add(channel);\n  }\n  return channel;\n}"}
{"ids": "5038", "raw_code": "public PlaPointFloat change_size(double p_new_size){\n  if (v_x == 0 && v_y == 0) {\n    return this;\n  }\n  double length=Math.sqrt(v_x * v_x + v_y * v_y);\n  double new_x=(v_x * p_new_size) / length;\n  double new_y=(v_y * p_new_size) / length;\n  return new PlaPointFloat(new_x,new_y);\n}"}
{"ids": "3359", "raw_code": "int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){\n  int rowHead=_rowHead;\n  int blobTail=_blobTail;\n  int rowLength=row.length();\n  rowHead-=rowLength;\n  if (rowHead < blobTail) {\n    return -1;\n  }\n  byte[] buffer=_buffer;\n  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);\n  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);\n  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);\n  if (blobTail < 0) {\n    return -1;\n  }\n  setBlobTail(blobTail);\n  rowHead(rowHead);\n  validateBlock(row);\n  return rowHead;\n}"}
{"ids": "31779", "raw_code": "private void addDefaultUri() throws IgniteSpiException {\n  assert uriEncodedList != null;\n  URI uri;\n  try {\n    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();\n  }\n catch (  IgniteCheckedException e) {\n    throw new IgniteSpiException(\"Failed to initialize default file scanner\",e);\n  }\n  uriEncodedList.add(uri);\n}"}
{"ids": "86825", "raw_code": "protected void transfer(String seqRange) throws IOException {\n  try {\n    final int rangePos=seqRange.indexOf('-');\n    if (rangePos == -1) {\n      transfer(Long.parseLong(seqRange));\n    }\n else {\n      final String start=seqRange.substring(0,rangePos);\n      final String end=seqRange.substring(rangePos + 1);\n      final long startIdx;\n      if (start.length() == 0) {\n        startIdx=0;\n      }\n else {\n        startIdx=Long.parseLong(start);\n      }\n      final long endIdx;\n      if (end.length() == 0) {\n        endIdx=mReader.numberSequences() - 1;\n      }\n else {\n        endIdx=Long.parseLong(end);\n      }\n      if (startIdx > endIdx) {\n        throw new NumberFormatException(\"Invalid range: \" + seqRange);\n      }\n      for (long i=startIdx; i <= endIdx; i++) {\n        transfer(i);\n      }\n    }\n  }\n catch (  final NumberFormatException e) {\n    warnInvalidSequence(seqRange);\n  }\n}"}
{"ids": "71090", "raw_code": "public static double distancePointLinePerpendicular(Coordinate p,Coordinate A,Coordinate B){\n  double len2=(B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y);\n  double s=((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y)) / len2;\n  return Math.abs(s) * Math.sqrt(len2);\n}"}
{"ids": "71999", "raw_code": "public String patchFixIds(){\n  return properties.getProperty(\"patch.fix.ids\");\n}"}
{"ids": "82414", "raw_code": "public final void readFully(byte[] b) throws java.io.IOException {\n  readFully(b,0,b.length);\n}"}
{"ids": "40745", "raw_code": "public static boolean isJellybeanOrLater(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;\n}"}
{"ids": "52074", "raw_code": "public PartialCorrelationPdf(int n,int k){\n  this.n=n;\n  this.k=k;\n  double gammaRatio=gammaRatio(n,k);\n  this.constant=(1 / Math.pow(Math.PI,0.5)) * gammaRatio;\n  this.outsideExp=(double)(n - k - 2) / 2.0;\n}"}
{"ids": "15616", "raw_code": "private static boolean isEnabled(){\n  if (SystemUtils.IS_OS_WINDOWS) {\n    return false;\n  }\n  try {\n    List<String> lines=CommandUtil.executeCommandAndGetLines(Collections.singletonList(\"sestatus\"));\n    for (    String line : lines) {\n      if (line.contains(\"SELinux status\")) {\n        if (line.contains(\"enabled\")) {\n          Logger.info(\"SELinux is enabled on this system\");\n          return true;\n        }\n        return false;\n      }\n    }\n  }\n catch (  Exception ex) {\n  }\n  return false;\n}"}
{"ids": "74774", "raw_code": "public boolean validate(){\n  outputFile=new File(outputPath);\n  if (outputFile.exists() || outputFile.isDirectory()) {\n    invalidMessage=\"Output file already exists.\";\n    return valid=false;\n  }\n  if (!signMode) {\n    keyFile=new File(keyFilePath);\n    if (!keyFile.exists() || keyFile.isDirectory()) {\n      invalidMessage=\"Key file not found.\";\n      return valid=false;\n    }\n  }\n  return valid=true;\n}"}
{"ids": "81841", "raw_code": "public void addResponseCodeListener(ActionListener a){\n  responseCodeListeners.addElement(a);\n}"}
{"ids": "77069", "raw_code": "public static boolean hasDeadStatesFromInitial(Automaton a){\n  BitSet reachableFromInitial=getLiveStatesFromInitial(a);\n  BitSet reachableFromAccept=getLiveStatesToAccept(a);\n  reachableFromInitial.andNot(reachableFromAccept);\n  return reachableFromInitial.isEmpty() == false;\n}"}
{"ids": "80724", "raw_code": "public Decimal subtract(Decimal decimal){\n  assertDefined();\n  if (null == m_value) {\n    return (decimal);\n  }\n  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());\n  return new Decimal(value,SCALE);\n}"}
{"ids": "27345", "raw_code": "protected int skipLine(int c) throws IOException {\n  while (c != -1 && c != '\\r' && c != '\\n') {\n    c=reader.read();\n  }\n  if (c == '\\n') {\n    c=reader.read();\n    lineNo++;\n    reportLocation(lineNo,1);\n  }\n else   if (c == '\\r') {\n    c=reader.read();\n    if (c == '\\n') {\n      c=reader.read();\n    }\n    lineNo++;\n    reportLocation(lineNo,1);\n  }\n  return c;\n}"}
{"ids": "24720", "raw_code": "public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){\n  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));\n}"}
{"ids": "51086", "raw_code": "public boolean step(){\n  long current=System.currentTimeMillis();\n  if (mStart == 0 || (current - mStart < 0)) {\n    mProgress=0;\n  }\n else   if (current - mStart > mDuration) {\n    if (mLoop) {\n      mProgress=0;\n      start();\n      return true;\n    }\n    mProgress=1;\n    return false;\n  }\n else {\n    mProgress=(current - mStart) / (double)mDuration;\n  }\n  return true;\n}"}
{"ids": "52340", "raw_code": "protected void load_raw_characters(StringBuilder sb) throws IOException {\n  int c=read_char();\n  for (; ; ) {\n    c=read_char();\nswitch (c) {\ncase CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:\ncase CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:\ncase CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:\n      continue;\ncase -1:\n    return;\ndefault :\n  if (!IonTokenConstsX.is7bitValue(c)) {\n    c=read_large_char_sequence(c);\n  }\n}\nif (IonUTF8.needsSurrogateEncoding(c)) {\nsb.append(IonUTF8.highSurrogate(c));\nc=IonUTF8.lowSurrogate(c);\n}\nsb.append((char)c);\n}\n}"}
{"ids": "29504", "raw_code": "public SignatureFakingOracle(final String documentString) throws SignatureFakingException {\n  Security.addProvider(new BouncyCastleProvider());\n  signatureValueElements=new LinkedList<Node>();\n  keyInfoElements=new LinkedList<Node>();\n  certificates=new LinkedList<String>();\n  certHandlers=new LinkedList<CertificateHandler>();\n  try {\n    doc=DomUtilities.stringToDom(documentString);\n    crawlSignatureElements();\n    log.debug(\"found \" + signatureValueElements.size() + \" SignatureValue elements\");\n    crawlKeyInfoElements();\n    log.debug(\"found \" + keyInfoElements.size() + \" KeyInfo elements containing X509 certificates\");\n  }\n catch (  SAXException e) {\n    throw new SignatureFakingException(e);\n  }\n}"}
{"ids": "27290", "raw_code": "public ArbitraryLengthPathNode(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final long lowerBound,final long upperBound){\n  this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.DROP_VARS,new ArrayList<VarNode>()),new NV(Annotations.LOWER_BOUND,lowerBound),new NV(Annotations.UPPER_BOUND,upperBound)));\n  final Set<VarNode> dropVars=new LinkedHashSet<>();\n  dropVars.add(tVarLeft);\n  dropVars.add(tVarRight);\n  setProperty(Annotations.DROP_VARS,dropVars);\n}"}
{"ids": "65433", "raw_code": "private Integer scanYamlDirectiveNumber(Mark startMark){\n  char ch=reader.peek();\n  if (!Character.isDigit(ch)) {\n    throw new ScannerException(\"while scanning a directive\",startMark,\"expected a digit, but found \" + ch + \"(\"+ ((int)ch)+ \")\",reader.getMark());\n  }\n  int length=0;\n  while (Character.isDigit(reader.peek(length))) {\n    length++;\n  }\n  Integer value=Integer.parseInt(reader.prefixForward(length));\n  return value;\n}"}
{"ids": "75755", "raw_code": "public static final String toBitString(int i[]){\n  StringBuilder sb=new StringBuilder(i.length);\n  for (  int b : i) {\n    sb.append(b);\n  }\n  return sb.toString();\n}"}
{"ids": "64839", "raw_code": "public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){\n  return convertToSigned16BitSamples(buffer.getSamples());\n}"}
{"ids": "53935", "raw_code": "boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){\n  updateTokenTimestamps();\n  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);\n  if (!valid)   DHT.logDebug(\"Received Invalid token from \" + ip.getHostAddress());\n  return valid;\n}"}
{"ids": "36400", "raw_code": "public void expandAll(){\n  cancelEditing();\n  final TreeModel tm=getModel();\n  final Object root=tm.getRoot();\n  if (root != null) {\n    expandAllPaths(new TreePath(root),tm);\n  }\n}"}
{"ids": "27253", "raw_code": "protected void describeVocabularies(final IVCount[] predicatePartitionCounts){\n  final Set<String> namespaces=new LinkedHashSet<String>();\n{\n    for (    IVCount tmp : predicatePartitionCounts) {\n      final URI p=(URI)tmp.getValue();\n      String namespace=p.getNamespace();\n      if (namespace.endsWith(\"#\")) {\n        namespace=namespace.substring(0,namespace.length() - 1);\n      }\n      namespaces.add(namespace);\n    }\n  }\n  final String[] a=namespaces.toArray(new String[namespaces.size()]);\n  Arrays.sort(a);\n  for (  String namespace : a) {\n    g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(namespace));\n  }\n}"}
{"ids": "82238", "raw_code": "public static void showErrorMessage(String msg){\n  showErrorMessage(msg,3500);\n}"}
{"ids": "81615", "raw_code": "@Override protected void onDestroy(){\n  super.onDestroy();\n  doReallyStop(false);\n  mFragments.dispatchDestroy();\n  if (mLoaderManager != null) {\n    mLoaderManager.doDestroy();\n  }\n}"}
{"ids": "49287", "raw_code": "static WindowsFileAttributes fromFindData(long address){\n  int fileAttrs=unsafe.getInt(address + OFFSETOF_FIND_DATA_ATTRIBUTES);\n  long creationTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_CREATETIME);\n  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTACCESSTIME);\n  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTWRITETIME);\n  long size=((long)(unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);\n  int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(address + OFFSETOF_FIND_DATA_RESERVED0) : 0;\n  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);\n}"}
{"ids": "8601", "raw_code": "public void fireEventProgrammatically(Event event){\n  if (!event.isConsumed())   ripplerPane.fireEvent(event);\n}"}
{"ids": "76450", "raw_code": "private boolean hasFullEntry(JsonValue entry,QuerySide querySide){\n  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {\n    return sourceQueryFullEntry;\n  }\n else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {\n    return targetQueryFullEntry;\n  }\n  if (entry != null) {\n    short ignoreFields=0;\n    if (entry.isDefined(\"_id\")) {\n      ignoreFields++;\n    }\n    if (entry.isDefined(\"_rev\")) {\n      ignoreFields++;\n    }\n    ignoreFields+=2;\n    return entry.size() > ignoreFields;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "80804", "raw_code": "public static boolean isModule(IResource resource){\n  return (resource != null && TLA_EXTENSION.equals(resource.getFileExtension()));\n}"}
{"ids": "78054", "raw_code": "public int writeAnnotation(Annotation annotation){\n  int off=data.position();\n  writeByte(annotation.visibility);\n  writeEncodedArray(annotation.encodedAnnotation);\n  return off;\n}"}
{"ids": "78007", "raw_code": "public static long fromInet4Address(final InetAddress inetAddress){\n  ensureIsInet4Address(inetAddress);\n  return Integer.toUnsignedLong(inetAddress.hashCode());\n}"}
{"ids": "67789", "raw_code": "public List<GenericEntry> retrieveAllAccountInfoRequests(Date fromDate) throws AppsForYourDomainException, IOException, ServiceException {\n  String url=BASE_URL + \"account/\" + domain;\n  if (fromDate != null) {\n    url+=\"?fromDate=\" + DATE_FORMAT.format(fromDate);\n  }\n  return getAllPages(new URL(url),GenericFeed.class);\n}"}
{"ids": "36711", "raw_code": "protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){\n  int h4=h / 4;\n  int r=w - 1;\n  if (fillColor != null || fillPaint != null) {\n    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));\n    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));\n    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));\n    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));\n    if (isShadow) {\n      g.setColor(mxConstants.SHADOW_COLOR);\n      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);\n      g.fill(area);\n      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);\n    }\n    if (fillPaint != null) {\n      g.setPaint(fillPaint);\n    }\n else {\n      g.setColor(fillColor);\n    }\n    g.fill(area);\n  }\n  if (penColor != null) {\n    g.setColor(penColor);\n    int h2=h4 / 2;\n    g.drawOval(x,y,r,h4);\n    g.drawLine(x,y + h2,x,y + h - h2);\n    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);\n    g.drawArc(x,y + h - h4,r,h4,0,-180);\n  }\n}"}
{"ids": "63018", "raw_code": "public StringList plus(String... args){\n  StringList newList=new StringList();\n  newList.addAll(this);\n  newList.addAll(Arrays.asList(args));\n  return newList;\n}"}
{"ids": "8577", "raw_code": "private void walkParseTree(List<SwiftBaseListener> listeners,TopLevelContext tree){\n  ParseTreeWalker walker=new ParseTreeWalker();\n  listeners.forEach(null);\n}"}
{"ids": "43307", "raw_code": "protected List<DecompoundedWord> makeSplit(String aWord){\n  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();\n  for (int i=0; i < aWord.length(); i++) {\n    String leftWord=aWord.substring(0,i + 1);\n    String rightWord=aWord.substring(i + 1);\n    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;\n    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;\n    if (leftGood && rightGood) {\n      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + \"+\" + rightWord);\n      split.setSplitPos(i);\n      result.add(split);\n    }\n    for (    String morpheme : morphemes.getAll()) {\n      try {\n        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());\n        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {\n          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + \"(\" + morpheme+ \")+\"+ rightWord);\n          split.setSplitPos(i);\n          result.add(split);\n        }\n      }\n catch (      StringIndexOutOfBoundsException e) {\n        continue;\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "66759", "raw_code": "public static String classNamePath(String className){\n  String filename=className.replace(\".\",File.separator);\n  filename=filename.replaceFirst(\"[$][0-9]+\",\"\");\n  if (filename.indexOf(\"$\") > 0) {\n    filename=filename.substring(0,filename.indexOf(\"$\"));\n  }\n  return \"src\" + File.separator + filename+ \".java\";\n}"}
{"ids": "16875", "raw_code": "public void removeTitlePrefix(String prfx){\n  titlePrefix.remove(prfx);\n  firePropertyChange(TITLE_PREFIX,null,titlePrefix);\n}"}
{"ids": "74232", "raw_code": "public int findCarByRoadNumber(String roadNumber){\n  if (sysList != null) {\n    if (!roadNumber.equals(_roadNumber)) {\n      return getIndex(0,roadNumber);\n    }\n    int index=getIndex(_index,roadNumber);\n    if (index > 0) {\n      return index;\n    }\n    return getIndex(0,roadNumber);\n  }\n  return -1;\n}"}
{"ids": "28974", "raw_code": "@SlashedClassName @SuppressFBWarnings(\"TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK\") public static String toSlashedClassName(@SlashedClassName(when=When.UNKNOWN) String className){\n  if (className.indexOf('.') >= 0) {\n    return DescriptorFactory.canonicalizeString(className.replace('.','/'));\n  }\n  return className;\n}"}
{"ids": "75785", "raw_code": "public static double P_AveragePrecision(int y[],int r[]){\n  double avg_prec=0;\n  int L=y.length;\n  List<Integer> ones=new ArrayList<Integer>();\n  for (int j=0; j < L; j++) {\n    if (y[j] == 1) {\n      ones.add(j);\n    }\n  }\n  if (ones.size() <= 0)   return 1.0;\n  for (  int j : ones) {\n    double s=0.0;\n    for (    int k : ones) {\n      if (r[k] <= r[j]) {\n        s++;\n      }\n    }\n    avg_prec+=(s / (1. + r[j]));\n  }\n  avg_prec/=ones.size();\n  return avg_prec;\n}"}
{"ids": "74285", "raw_code": "public Location newLocation(String name){\n  Location location=getLocationByName(name);\n  if (location == null) {\n    _id++;\n    location=new Location(Integer.toString(_id),name);\n    Integer oldSize=Integer.valueOf(_locationHashTable.size());\n    _locationHashTable.put(location.getId(),location);\n    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));\n  }\n  return location;\n}"}
{"ids": "31874", "raw_code": "@Override public void close(){\n  closing=true;\n  if (reservations == null || reservations.compareAndSet(0,-1))   doClose();\n}"}
{"ids": "51009", "raw_code": "public static boolean isAndroidSdkDirInLocalPropertiesFile(@NotNull File projectDir){\n  String androidHome=getAndroidHomeFromLocalPropertiesFile(projectDir);\n  if (!Strings.isNullOrEmpty(androidHome)) {\n    String msg=String.format(\"Found Android SDK home at '%1$s' (from local.properties file)\",androidHome);\n    LOG.info(msg);\n    return true;\n  }\n  return false;\n}"}
{"ids": "38741", "raw_code": "@Override public boolean connectionAllowed(String eventName){\n  if (eventName.equals(\"trainingSet\") && m_listenees.containsKey(eventName)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "2464", "raw_code": "public static Vector2 pow(Vector2 o,double power){\n  return new Vector2(Math.pow(o.x,power),Math.pow(o.z,power));\n}"}
{"ids": "31549", "raw_code": "public Prototype undump(InputStream stream,String chunkname) throws IOException {\n  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;\n  String sname=getSourceName(chunkname);\n  LoadState s=new LoadState(stream,sname);\n  s.loadHeader();\nswitch (s.luacNumberFormat) {\ncase NUMBER_FORMAT_FLOATS_OR_DOUBLES:\ncase NUMBER_FORMAT_INTS_ONLY:\ncase NUMBER_FORMAT_NUM_PATCH_INT32:\n    break;\ndefault :\n  throw new LuaError(\"unsupported int size\");\n}\nreturn s.loadFunction(LuaString.valueOf(sname));\n}"}
{"ids": "11520", "raw_code": "public void addButton(URL url,String info,ActionListener al){\n  JButton b=new JButton(new ImageIcon(url,info));\n  b.setToolTipText(info);\n  b.setMargin(new Insets(0,0,0,0));\n  b.addActionListener(al);\n  b.setBorderPainted(false);\n  add(b);\n}"}
{"ids": "85905", "raw_code": "private void mapRequestToResponses(Matcher<Request> requestMatcher,ResponseSource responses){\n  mappings.add(new MatcherResponseSourcePair(requestMatcher,responses));\n}"}
{"ids": "24939", "raw_code": "@Override protected void commitToInput(){\n  JmxBeanSensorAssignment assignment=getInput();\n  if (null != assignment) {\n    assignment.setDomain(domainText.getText());\n    assignment.setObjectNameParameters(new HashMap<>(parametersMap));\n    if (allAttributesButton.getSelection()) {\n      assignment.setAttributes(Collections.<String>emptySet());\n    }\n else {\n      assignment.setAttributes(new HashSet<>(attributesSet));\n    }\n  }\n}"}
{"ids": "81984", "raw_code": "public static String[] split(String original,String separator){\n  Vector nodes=new Vector();\n  int index=original.indexOf(separator);\n  while (index >= 0) {\n    nodes.addElement(original.substring(0,index));\n    original=original.substring(index + separator.length());\n    index=original.indexOf(separator);\n  }\n  nodes.addElement(original);\n  String[] ret=new String[nodes.size()];\n  for (int i=0; i < nodes.size(); i++) {\n    ret[i]=(String)nodes.elementAt(i);\n  }\n  return ret;\n}"}
{"ids": "42390", "raw_code": "public void insertTwin(Instruction inst,Instruction twin){\n  ListIterator<GCIRMapElement> iter=list.listIterator();\n  while (iter.hasNext()) {\n    GCIRMapElement newPtr=iter.next();\n    if (newPtr.getInstruction() == inst) {\n      iter.add(newPtr.createTwin(twin));\n      return;\n    }\n  }\n  throw new OptimizingCompilerException(\"GCIRMap.createTwin: \" + inst + \" not found\");\n}"}
{"ids": "82535", "raw_code": "public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException {\n  Object o=newInstanceImpl();\n  if (o == null) {\n    throw new InstantiationException();\n  }\n  return o;\n}"}
{"ids": "55212", "raw_code": "public boolean isFull(){\n  if (maxSize > 0 && notifications.size() >= maxSize) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "64939", "raw_code": "private void schedulePlaylistSave(){\n  if (!mPlaylistLoading) {\n    if (mPlaylistSavePending.compareAndSet(false,true)) {\n      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);\n    }\n  }\n}"}
{"ids": "74092", "raw_code": "public boolean isToRead(){\n  Iterator<VariableValue> i=variables.iterator();\n  while (i.hasNext()) {\n    VariableValue v=i.next();\n    if (v.isToRead()) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "1427", "raw_code": "@Deprecated public static Integer Integer(int i){\n  return Integer.valueOf(i);\n}"}
{"ids": "81307", "raw_code": "public void saveIndexes(){\n  ArrayList toSave=new ArrayList();\nsynchronized (this) {\n    Object[] valueTable=this.indexes.valueTable;\n    for (int i=0, l=valueTable.length; i < l; i++) {\n      Index index=(Index)valueTable[i];\n      if (index != null)       toSave.add(index);\n    }\n  }\n  boolean allSaved=true;\n  for (int i=0, length=toSave.size(); i < length; i++) {\n    Index index=(Index)toSave.get(i);\n    ReadWriteMonitor monitor=index.monitor;\n    if (monitor == null)     continue;\n    try {\n      monitor.enterRead();\n      if (index.hasChanged()) {\n        if (monitor.exitReadEnterWrite()) {\n          try {\n            saveIndex(index);\n          }\n catch (          IOException e) {\n            if (VERBOSE) {\n              Util.verbose(\"-> got the following exception while saving:\",System.err);\n              e.printStackTrace();\n            }\n            allSaved=false;\n          }\n finally {\n            monitor.exitWriteEnterRead();\n          }\n        }\n else {\n          allSaved=false;\n        }\n      }\n    }\n  finally {\n      monitor.exitRead();\n    }\n  }\n  if (this.participantsContainers != null && this.participantUpdated) {\n    writeParticipantsIndexNamesFile();\n    this.participantUpdated=false;\n  }\n  this.needToSave=!allSaved;\n}"}
{"ids": "46460", "raw_code": "public UndoableEdit insertString(int where,String str) throws BadLocationException {\n  if (where >= count || where < 0) {\n    throw new BadLocationException(\"Invalid location\",count);\n  }\n  char[] chars=str.toCharArray();\n  replace(where,0,chars,0,chars.length);\n  if (marks != null) {\n    updateMarksForInsert(where,str.length());\n  }\n  return new InsertUndo(where,str.length());\n}"}
{"ids": "41574", "raw_code": "boolean writeData() throws IOException {\n  int tosend;\n  int sent;\n  byte[] block=new byte[kBlockSize];\n  do {\n    tosend=Math.min(sendStreamSize - totalSent,block.length);\n    System.arraycopy(sendData,totalSent,block,0,tosend);\n    if (tosend > 0) {\n      sent=localSend(block,tosend);\n      updateLocalClock();\n      if (sent != -1) {\n        totalSent+=sent;\n      }\n else {\n        logger.log(Level.FINE,\"Flow Controlled\");\n      }\n    }\n else {\n      sent=tosend=0;\n    }\n  }\n while (sent > 0);\n  if (logger.isLoggable(Level.FINER)) {\n    logger.log(Level.FINER,\"Sent: \" + totalSent + \" remaining: \"+ (sendStreamSize - totalSent));\n  }\n  return tosend == 0;\n}"}
{"ids": "82585", "raw_code": "public static int copyAndCloseOutput(Reader input,Writer output) throws IOException {\n  try {\n    return copy(input,output);\n  }\n  finally {\n    output.close();\n  }\n}"}
{"ids": "44803", "raw_code": "public int checkBookiesUp(int count,int timeout) throws Exception {\n  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);\n  try {\n    int mostRecentSize=0;\n    for (int i=0; i < timeout; i++) {\n      try {\n        List<String> children=zkc.getChildren(\"/ledgers/available\",false);\n        children.remove(\"readonly\");\n        mostRecentSize=children.size();\n        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {\n          LOG.info(\"Found \" + mostRecentSize + \" bookies up, \"+ \"waiting for \"+ count);\n          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {\n            for (            String child : children) {\n              LOG.info(\" server: \" + child);\n            }\n          }\n        }\n        if (mostRecentSize == count) {\n          break;\n        }\n      }\n catch (      KeeperException e) {\n      }\n      Thread.sleep(1000);\n    }\n    return mostRecentSize;\n  }\n  finally {\n    zkc.close();\n  }\n}"}
{"ids": "11482", "raw_code": "public Point2D inverseTransform(Point2D src,Point2D dst){\n  try {\n    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);\n    dst=rotTransform.inverseTransform(src,dst);\n  }\n catch (  NoninvertibleTransformException e) {\n    logger.log(Level.FINE,e.getMessage(),e);\n  }\n  return dst;\n}"}
{"ids": "8496", "raw_code": "public static Throwable shouldFail(Class clazz,Closure code){\n  Throwable th=null;\n  try {\n    code.call();\n  }\n catch (  GroovyRuntimeException gre) {\n    th=ScriptBytecodeAdapter.unwrap(gre);\n  }\ncatch (  Throwable e) {\n    th=e;\n  }\n  if (th == null) {\n    fail(\"Closure \" + code + \" should have failed with an exception of type \"+ clazz.getName());\n  }\n else   if (!clazz.isInstance(th)) {\n    fail(\"Closure \" + code + \" should have failed with an exception of type \"+ clazz.getName()+ \", instead got Exception \"+ th);\n  }\n  return th;\n}"}
{"ids": "48161", "raw_code": "public void encodeAndSign(X500Name subject,Signature signature) throws CertificateException, IOException, SignatureException {\n  DerOutputStream out, scratch;\n  byte[] certificateRequestInfo;\n  byte[] sig;\n  if (encoded != null)   throw new SignatureException(\"request is already signed\");\n  this.subject=subject;\n  scratch=new DerOutputStream();\n  scratch.putInteger(BigInteger.ZERO);\n  subject.encode(scratch);\n  scratch.write(subjectPublicKeyInfo.getEncoded());\n  attributeSet.encode(scratch);\n  out=new DerOutputStream();\n  out.write(DerValue.tag_Sequence,scratch);\n  certificateRequestInfo=out.toByteArray();\n  scratch=out;\n  signature.update(certificateRequestInfo,0,certificateRequestInfo.length);\n  sig=signature.sign();\n  AlgorithmId algId=null;\n  try {\n    algId=AlgorithmId.get(signature.getAlgorithm());\n  }\n catch (  NoSuchAlgorithmException nsae) {\n    throw new SignatureException(nsae);\n  }\n  algId.encode(scratch);\n  scratch.putBitString(sig);\n  out=new DerOutputStream();\n  out.write(DerValue.tag_Sequence,scratch);\n  encoded=out.toByteArray();\n}"}
{"ids": "35913", "raw_code": "public synchronized void schedulePeriodicTask(TimerTask task,long period){\n  try {\n    m_timer.scheduleAtFixedRate(task,0,period);\n  }\n catch (  IllegalStateException ie) {\n    m_timer=new Timer();\n    m_timer.scheduleAtFixedRate(task,0,period);\n  }\n}"}
{"ids": "72451", "raw_code": "protected void checkRowIndex(final int row) throws MathIllegalArgumentException {\n  if (row < 0 || row >= getRowDimension()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,getRowDimension() - 1);\n  }\n}"}
{"ids": "50427", "raw_code": "public Name join(String identifier){\n  validateLowerUnderscore(identifier);\n  List<NamePiece> newPieceList=new ArrayList<>();\n  newPieceList.addAll(namePieces);\n  newPieceList.add(new NamePiece(identifier,CaseFormat.LOWER_UNDERSCORE));\n  return new Name(newPieceList);\n}"}
{"ids": "69990", "raw_code": "private LocalDateTime parseDate(String dateStr,boolean tryAgain){\n  LocalDateTime date=LocalDateTime.now(ZoneId.of(\"GMT\"));\n  if (mDateTimeFormatter == null) {\n    initFormatter(dateStr);\n  }\n  if (mDateTimeFormatter != null) {\n    try {\n      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);\n    }\n catch (    DateTimeParseException e) {\n      Timber.d(String.format(\"ParseException parsing date: %s\",dateStr));\n      if (tryAgain) {\n        Timber.d(\"ParseException encountered, re-initializing the date parser\");\n        mDateTimeFormatter=null;\n        parseDate(dateStr,false);\n      }\n    }\n  }\n  return date;\n}"}
{"ids": "54153", "raw_code": "public void remove(RequestFilter filter){\n  filters.remove(filter);\n}"}
{"ids": "75658", "raw_code": "protected void removeClassifiers(int[] indices){\n  int i;\n  if (indices == null) {\n    m_ModelClassifiers.removeAllElements();\n  }\n else {\n    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);\n  }\n  setModified(true);\n}"}
{"ids": "66115", "raw_code": "public void addElement(Object anObject){\n  p_data.add(anObject);\n  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);\n  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);\n}"}
{"ids": "21034", "raw_code": "public void addAssignedVirtualArrays(Set<String> virtualArrayURIs){\n  if ((virtualArrayURIs != null) && (!virtualArrayURIs.isEmpty())) {\n    HashSet<String> addVirtualArrays=new HashSet<String>();\n    addVirtualArrays.addAll(virtualArrayURIs);\n    if (_assignedVirtualArrays == null) {\n      setAssignedVirtualArrays(new StringSet());\n      _assignedVirtualArrays.addAll(addVirtualArrays);\n    }\n else {\n      _assignedVirtualArrays.addAll(addVirtualArrays);\n    }\n    updateVirtualArrayTags();\n  }\n}"}
{"ids": "69712", "raw_code": "private boolean dropInTrash(){\n  if (mHighlightedBlockView != null) {\n    mHighlightedBlockView.setHighlightedConnection(null);\n    mHighlightedBlockView=null;\n  }\n  mDraggedConnections.clear();\n  return mController.trashRootBlock(mPendingDrag.getRootDraggedBlock());\n}"}
{"ids": "8549", "raw_code": "<T>List<T> concatValues(final T[]... data){\n  final List<T> rv=new ArrayList<>();\n  for (  T[] values : data) {\n    rv.addAll(Arrays.asList(values));\n  }\n  return rv;\n}"}
{"ids": "52173", "raw_code": "public DagIterator(Graph pattern){\n  for (  Edge edge : pattern.getEdges()) {\n    if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) {\n      continue;\n    }\n    throw new IllegalArgumentException(\"The graph may consist only of \" + \"directed and undirected edges: \" + edge);\n  }\n  decoratedGraphs.add(new DecoratedGraph(pattern));\n}"}
{"ids": "64361", "raw_code": "private boolean validateCustomCatalog(String title,String value){\n  return false;\n}"}
{"ids": "24037", "raw_code": "public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q,int poolSize,PoolStatHelper stats,ThreadFactory tf){\n  this(q,poolSize,stats,tf,Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + \"IDLE_THREAD_TIMEOUT\",30000 * 60),false);\n}"}
{"ids": "31479", "raw_code": "protected boolean isSSDPDiscovery(String body){\n  if (body != null && body.startsWith(\"M-SEARCH * HTTP/1.1\") && body.contains(\"MAN: \\\"ssdp:discover\\\"\")) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "51642", "raw_code": "@Override public void addChild(WXComponent child,int index){\n  if (child == null || index < -1) {\n    return;\n  }\n  if (child instanceof WXBaseRefresh) {\n    if (!checkRefreshOrLoading(child)) {\n      mRefreshs.add(child);\n    }\n    return;\n  }\n  if (mChildren == null) {\n    mChildren=new ArrayList<>();\n  }\n  int count=mChildren.size();\n  index=index >= count ? -1 : index;\n  if (index == -1) {\n    mChildren.add(child);\n  }\n else {\n    mChildren.add(index,child);\n  }\n}"}
{"ids": "46343", "raw_code": "private void restoreSortingSelection(int[] selection,int lead,ModelChange change){\n  for (int i=selection.length - 1; i >= 0; i--) {\n    selection[i]=convertRowIndexToView(selection[i],change);\n  }\n  lead=convertRowIndexToView(lead,change);\n  if (selection.length == 0 || (selection.length == 1 && selection[0] == getSelectedRow())) {\n    return;\n  }\n  selectionModel.setValueIsAdjusting(true);\n  selectionModel.clearSelection();\n  for (int i=selection.length - 1; i >= 0; i--) {\n    if (selection[i] != -1) {\n      selectionModel.addSelectionInterval(selection[i],selection[i]);\n    }\n  }\n  SwingUtilities2.setLeadAnchorWithoutSelection(selectionModel,lead,lead);\n  selectionModel.setValueIsAdjusting(false);\n}"}
{"ids": "71286", "raw_code": "@After public void clean(){\n  mute(null);\n  mute(null);\n  mute(null);\n}"}
{"ids": "54121", "raw_code": "public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {\n  if (eventCount < 0)   throw new IllegalArgumentException(\"The eventCount may not be negative\");\n  if (eventCount == 0)   return;\n  int eventsRemaining=eventCount;\n  final long stopTime=System.currentTimeMillis() + timeoutInMillis;\n  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {\n    Event nextEvent=queue.poll();\n    if (nextEvent != null) {\n      if (condition.test(nextEvent)) {\n        --eventsRemaining;\n        consumedEvents.accept(nextEvent);\n      }\n else {\n        ignoredEvents.accept(nextEvent);\n      }\n    }\n  }\n  if (eventsRemaining > 0) {\n    throw new TimeoutException(\"Received \" + (eventCount - eventsRemaining) + \" of \"+ eventCount+ \" in \"+ timeoutInMillis+ \"ms\");\n  }\n}"}
{"ids": "78082", "raw_code": "private void updateUiFromCommand(Command command){\n  if (command == null) {\n    return;\n  }\n  actionsComboBox.setText(command.getAction());\n  dataTextField.setText(command.getData());\n  categoryTextField.setText(command.getCategory());\n  mimeTextField.setText(command.getMimeType());\n  componentTextField.setText(command.getComponent());\n  userTextField.setText(command.getUser());\n  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());\n  List<IntentFlags> flags=command.getFlags();\n  if (flags != null && flags.size() > 0) {\n    for (    IntentFlags flag : command.getFlags()) {\n      flagsList_.setSelectedValue(flag,false);\n    }\n  }\n else {\n    flagsList_.setSelectedIndex(0);\n  }\n  updateFlagsTextField();\n  tableModel_.removeAllRows();\n  List<ExtraField> extras=command.getExtras();\n  if (extras != null && extras.size() > 0) {\n    for (    ExtraField extra : extras) {\n      tableModel_.addRow(extra);\n    }\n  }\n  updateTableVisibility();\n}"}
{"ids": "80078", "raw_code": "public static int randGaussian(final int mean,final int sd){\n  return (int)(rand.nextGaussian() * sd + mean);\n}"}
{"ids": "31952", "raw_code": "public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){\n  IgniteLogger log=logRef.get();\n  if (log == null) {\n    logRef.compareAndSet(null,ctx.log(obj.getClass()));\n    log=logRef.get();\n  }\n  return log;\n}"}
{"ids": "73920", "raw_code": "protected boolean readReceiveDelay(){\n  try {\n    receiveDelay=Integer.parseInt(receiveDelayField.getText());\n  }\n catch (  Exception e) {\n    statusText1.setText(rb.getString(\"Error7\"));\n    statusText1.setVisible(true);\n    receiveDelay=0;\n    errorInStatus1=true;\n    resetNotes2();\n    return (false);\n  }\n  if (receiveDelay < 0) {\n    statusText1.setText(rb.getString(\"Error8\"));\n    statusText1.setVisible(true);\n    receiveDelay=0;\n    errorInStatus1=true;\n    resetNotes2();\n    return (false);\n  }\n  if (receiveDelay > 65535) {\n    statusText1.setText(rb.getString(\"Error9\"));\n    statusText1.setVisible(true);\n    receiveDelay=0;\n    errorInStatus1=true;\n    resetNotes2();\n    return (false);\n  }\n  return true;\n}"}
{"ids": "85099", "raw_code": "private void writeIndent(int times) throws IOException {\n  for (int i=options.getBaseIndent() + times; i > 0; i--) {\n    writer.write(options.getIndent());\n  }\n}"}
{"ids": "7323", "raw_code": "public static int parseString(String value){\n  return Integer.parseInt(value);\n}"}
{"ids": "49211", "raw_code": "void doHandleJavaMouseEvent(MouseEvent mouseEvent){\n  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {\n    return;\n  }\n  XBaseWindow grabWindow=XAwtState.getGrabWindow();\n  Point ptGlobal=mouseEvent.getLocationOnScreen();\n  if (!hasPointerMoved) {\n    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {\n      hasPointerMoved=true;\n    }\n  }\n  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);\n  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;\n  XBaseMenuWindow cwnd=getShowingLeaf();\nswitch (mouseEvent.getID()) {\ncase MouseEvent.MOUSE_PRESSED:\n    showingMousePressedSubmenu=null;\n  if ((grabWindow == this) && (wnd == null)) {\n    ungrabInput();\n  }\n else {\n    grabInput();\n    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {\n      if (wnd.getShowingSubmenu() == item) {\n        showingMousePressedSubmenu=(XMenuPeer)item;\n      }\n      wnd.selectItem(item,true);\n    }\n else {\n      if (wnd != null) {\n        wnd.selectItem(null,false);\n      }\n    }\n  }\nbreak;\ncase MouseEvent.MOUSE_RELEASED:\nif (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {\nif (item instanceof XMenuPeer) {\n  if (showingMousePressedSubmenu == item) {\n    if (wnd instanceof XMenuBarPeer) {\n      ungrabInput();\n    }\n else {\n      wnd.selectItem(item,false);\n    }\n  }\n}\n else {\n  item.action(mouseEvent.getWhen());\n  ungrabInput();\n}\n}\n else {\nif (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {\n  ungrabInput();\n}\n}\nshowingMousePressedSubmenu=null;\nbreak;\ncase MouseEvent.MOUSE_DRAGGED:\nif (wnd != null) {\nif (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {\nif (grabWindow == this) {\nwnd.selectItem(item,true);\n}\n}\n else {\nwnd.selectItem(null,false);\n}\n}\n else {\nif (cwnd != null) {\ncwnd.selectItem(null,false);\n}\n}\nbreak;\n}\n}"}
{"ids": "33047", "raw_code": "public boolean isInvalidNode(){\n  ASTNode first=fNodes.get(0);\n  ASTNode candidate=first.getParent();\n  if (candidate == null)   return false;\n  if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;\n  return false;\n}"}
{"ids": "38721", "raw_code": "public synchronized void removeBatchClustererListener(BatchClustererListener cl){\n  m_batchClustererListeners.remove(cl);\n}"}
{"ids": "26011", "raw_code": "void removeKnownObject(ParseObject object){\nsynchronized (mutex) {\n    knownObjects.remove(object);\n  }\n}"}
{"ids": "72702", "raw_code": "static HeapBytesStore<byte[]> wrap(@NotNull byte[] bytes){\n  return HeapBytesStore.wrap(bytes);\n}"}
{"ids": "76478", "raw_code": "private static String parse(JsonValue base){\n  if (!base.isString()) {\n    return null;\n  }\n  return buildString(base.asString());\n}"}
{"ids": "31867", "raw_code": "private void growEntries(){\n  int newLen=(next.length << 1) + 1;\n  int[] newNext=new int[newLen];\n  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);\n  next=newNext;\n  nextEmpty=new int[newLen];\n  Arrays.fill(nextEmpty,-1);\n  Object[] newObjs=new Object[newLen];\n  System.arraycopy(objs,0,newObjs,0,size);\n  objs=newObjs;\n}"}
{"ids": "14789", "raw_code": "private void clear(){\n  valid=false;\n  if ((listenerObjects == null) || listenerObjects.isEmpty()) {\n    deregisterListener();\n  }\n  ssm=null;\n  if (SMSEntry.cacheSMSEntries) {\n    orgConfigs.clear();\n    globalConfigs.clear();\n  }\n}"}
{"ids": "42524", "raw_code": "public static void registerDecayableObject(Decayable obj){\n  decayObjects.add(obj);\n}"}
{"ids": "35431", "raw_code": "public static void assertExpectedOutputContains(String expectedString,String x){\n  if (!x.contains(expectedString)) {\n    fail(\"expected '\" + expectedString + \"' not found in '\"+ x+ \"'\");\n  }\n}"}
{"ids": "39318", "raw_code": "public boolean remove(String classname){\n  String pkgname;\n  HashSet<String> names;\n  classname=cleanUp(classname);\n  pkgname=extractPackage(classname);\n  names=m_Cache.get(pkgname);\n  if (names != null) {\n    return names.remove(classname);\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "8093", "raw_code": "static boolean isAssignableTo(ClassNode type,ClassNode toBeAssignedTo){\n  if (UNKNOWN_PARAMETER_TYPE == type)   return true;\n  if (type == toBeAssignedTo)   return true;\n  if (toBeAssignedTo.redirect() == STRING_TYPE && type.redirect() == GSTRING_TYPE) {\n    return true;\n  }\n  if (isPrimitiveType(toBeAssignedTo))   toBeAssignedTo=getWrapper(toBeAssignedTo);\n  if (isPrimitiveType(type))   type=getWrapper(type);\n  if (Double_TYPE == toBeAssignedTo) {\n    return type.isDerivedFrom(Number_TYPE);\n  }\n  if (Float_TYPE == toBeAssignedTo) {\n    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect();\n  }\n  if (Long_TYPE == toBeAssignedTo) {\n    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect();\n  }\n  if (Integer_TYPE == toBeAssignedTo) {\n    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect();\n  }\n  if (Short_TYPE == toBeAssignedTo) {\n    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect() && Integer_TYPE != type.redirect();\n  }\n  if (Byte_TYPE == toBeAssignedTo) {\n    return type.redirect() == Byte_TYPE;\n  }\n  if (type.isArray() && toBeAssignedTo.isArray()) {\n    return isAssignableTo(type.getComponentType(),toBeAssignedTo.getComponentType());\n  }\n  if (type.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(toBeAssignedTo)) {\n    return true;\n  }\n  if (toBeAssignedTo.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(type)) {\n    return true;\n  }\n  if (implementsInterfaceOrIsSubclassOf(type,toBeAssignedTo)) {\n    if (OBJECT_TYPE.equals(toBeAssignedTo))     return true;\n    if (toBeAssignedTo.isUsingGenerics()) {\n      GenericsType gt=GenericsUtils.buildWildcardType(toBeAssignedTo);\n      return gt.isCompatibleWith(type);\n    }\n    return true;\n  }\n  if (type.isDerivedFrom(CLOSURE_TYPE) && isSAMType(toBeAssignedTo)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "56394", "raw_code": "public synchronized int totalRecoverFiles(){\n  int total=0;\n  for (  File file : fileDetails.values()) {\n    if (file.reused() == false) {\n      total++;\n    }\n  }\n  return total;\n}"}
{"ids": "67199", "raw_code": "@Override @Timed public void deleteAssignment(Experiment experiment,User.ID userID,Context context,Application.Name appName,Assignment currentAssignment){\n  deleteUserFromLookUp(experiment.getID(),userID,context);\n  boolean countUp=false;\n  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,currentAssignment,countUp,eventLog,null,assignUserToExport,assignBucketCount));\n  deleteAssignmentOld(experiment.getID(),userID,context,appName,currentAssignment.getBucketLabel());\n  removeIndexUserToExperiment(userID,experiment.getID(),context,appName);\n  removeIndexUserToBucket(userID,experiment.getID(),context,currentAssignment.getBucketLabel());\n  removeIndexExperimentsToUser(userID,experiment.getID(),context,appName);\n}"}
{"ids": "3813", "raw_code": "public static ThreadDump create(){\n  ThreadDump threadDump=_threadDumpRef.get();\n  if (threadDump == null) {\n    threadDump=new ThreadDumpPro();\n    _threadDumpRef.compareAndSet(null,threadDump);\n    threadDump=_threadDumpRef.get();\n  }\n  return threadDump;\n}"}
{"ids": "64764", "raw_code": "private void checkStart(){\n  if (mCanProcessAudio && !mOutput.isRunning() && mOutput.available() <= mBufferStartThreshold) {\n    mOutput.start();\n  }\n}"}
{"ids": "75011", "raw_code": "protected boolean matchesFilter(final String input,final String[] filter){\n  for (  final String match : filter) {\n    if (!input.contains(match))     return false;\n  }\n  return true;\n}"}
{"ids": "84992", "raw_code": "public IStatus run(IProgressMonitor monitor){\n  InputStream input=null;\n  FileOutputStream output=null;\n  IStatus jobStatus=Status.OK_STATUS;\n  byte[] b=new byte[1024];\n  int bytesRead;\n  try {\n    HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n    input=url.openStream();\n    long totalBytesRead=0L;\n    int responseStatusCode=connection.getResponseCode();\n    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {\n      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(\"Remote ServerError: {0} ({1})\",responseStatusCode,connection.getResponseMessage()));\n    }\n    long contentLength=connection.getContentLength();\n    output=new FileOutputStream(target);\n    monitor.beginTask(\"Downloading \" + url.toString(),(int)contentLength);\n    while (jobStatus == Status.OK_STATUS) {\n      if (contentLength > 0 && totalBytesRead >= contentLength) {\n        break;\n      }\n      bytesRead=input.read(b);\n      if (bytesRead == -1) {\n        break;\n      }\n      output.write(b,0,bytesRead);\n      totalBytesRead+=bytesRead;\n      monitor.worked(bytesRead);\n      if (monitor.isCanceled()) {\n        jobStatus=Status.CANCEL_STATUS;\n        break;\n      }\n    }\n  }\n catch (  MalformedURLException e) {\n    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,\"Malformed URL: \" + url.toExternalForm(),e);\n  }\ncatch (  IOException e) {\n    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,\"IO error while downloading \" + url.toExternalForm(),e);\n  }\n  closeStreams(input,output);\n  return jobStatus;\n}"}
{"ids": "66035", "raw_code": "private void createMissingValues(){\n  String sql=\"SELECT ra.A_RegistrationAttribute_ID \" + \"FROM A_RegistrationAttribute ra\" + \" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)\"+ \" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) \"+ \"WHERE r.A_Registration_ID=?\"+ \" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v \"+ \"WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)\";\n  PreparedStatement pstmt=null;\n  try {\n    pstmt=DB.prepareStatement(sql,get_TrxName());\n    pstmt.setInt(1,getA_Registration_ID());\n    ResultSet rs=pstmt.executeQuery();\n    while (rs.next()) {\n      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),\"?\");\n      v.saveEx();\n    }\n    rs.close();\n    pstmt.close();\n    pstmt=null;\n  }\n catch (  Exception e) {\n    log.log(Level.SEVERE,null,e);\n  }\n  try {\n    if (pstmt != null)     pstmt.close();\n    pstmt=null;\n  }\n catch (  Exception e) {\n    pstmt=null;\n  }\n}"}
{"ids": "34254", "raw_code": "private static String normalisePath(String path){\n  return path.replace('\\\\','/');\n}"}
{"ids": "54775", "raw_code": "public void startLaunchNotifier(){\n  if (m_launchNotification == null)   throw new NullPointerException();\n  m_launchNotifierThread.setDaemon(true);\n  m_launchNotifierThread.start();\n}"}
{"ids": "49128", "raw_code": "private static void encode(List<AclEntry> acl,long address){\n  long offset=address;\n  for (  AclEntry ace : acl) {\n    int flags=0;\n    UserPrincipal who=ace.principal();\n    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();\n    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;\n    int uid;\n    if (user.isSpecial()) {\n      uid=-1;\n      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;\n else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);\n else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;\n else       throw new AssertionError(\"Unable to map special identifier\");\n    }\n else {\n      if (user instanceof UnixUserPrincipals.Group) {\n        uid=user.gid();\n        flags|=ACE_IDENTIFIER_GROUP;\n      }\n else {\n        uid=user.uid();\n      }\n    }\n    int type;\nswitch (ace.type()) {\ncase ALLOW:\n      type=ACE_ACCESS_ALLOWED_ACE_TYPE;\n    break;\ncase DENY:\n  type=ACE_ACCESS_DENIED_ACE_TYPE;\nbreak;\ncase AUDIT:\ntype=ACE_SYSTEM_AUDIT_ACE_TYPE;\nbreak;\ncase ALARM:\ntype=ACE_SYSTEM_ALARM_ACE_TYPE;\nbreak;\ndefault :\nthrow new AssertionError(\"Unable to map ACE type\");\n}\nSet<AclEntryPermission> aceMask=ace.permissions();\nint mask=0;\nif (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;\nif (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;\nif (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;\nif (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;\nif (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;\nif (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;\nif (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;\nif (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;\nif (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;\nif (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;\nif (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;\nif (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;\nif (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;\nif (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;\nSet<AclEntryFlag> aceFlags=ace.flags();\nif (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;\nif (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;\nif (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;\nif (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;\nunsafe.putInt(offset + OFFSETOF_UID,uid);\nunsafe.putInt(offset + OFFSETOF_MASK,mask);\nunsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);\nunsafe.putShort(offset + OFFSETOF_TYPE,(short)type);\noffset+=SIZEOF_ACE_T;\n}\n}"}
{"ids": "64475", "raw_code": "public static String expandHiddenDir(final String filename){\n  final int macro=filename.indexOf(hiddenDirMacro,0);\n  String expandedFilter;\n  if (macro == -1) {\n    return filename;\n  }\n  if (Cfg.DEBUG) {\n    Check.log(TAG + \" expanding macro\");\n  }\n  expandedFilter=filename.replaceFirst(\"\\\\$dir\\\\$\",StringUtils.chomp(Path.hidden(),\"/\"));\n  if (Cfg.DEBUG) {\n    Check.log(TAG + \" expandedFilter: \" + expandedFilter);\n  }\n  return expandedFilter;\n}"}
{"ids": "74883", "raw_code": "public void updateValue(final Object value,final boolean isSelected,boolean sync){\n  if (isReadOnly()) {\n    return;\n  }\n  if (GenericFormFactory.isTextForm(formType)) {\n    textString=(String)value;\n    if (textString != null && textString.equals(lastTextString)) {\n      sync=false;\n    }\n    lastTextString=textString;\n  }\n else {\n    textString=(String)value;\n    this.isSelected=isSelected;\n    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {\n      sync=false;\n    }\n    lastTextString=textString;\n    lastIsSelected=isSelected;\n  }\n  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {\n    syncGUI(value);\n  }\n}"}
{"ids": "79055", "raw_code": "public boolean hasNext() throws IOException {\n  dataInputStream.mark(1);\n  int val=dataInputStream.read();\n  dataInputStream.reset();\n  return val != -1;\n}"}
{"ids": "19725", "raw_code": "public void completeHeartbeat(Database database,long seqno,String eventId) throws SQLException {\n  if (logger.isDebugEnabled())   logger.debug(\"Processing slave heartbeat update\");\n  Statement st=null;\n  ResultSet rs=null;\n  Timestamp sts=new Timestamp(0);\n  Timestamp now=new Timestamp(System.currentTimeMillis());\n  ArrayList<Column> whereClause=new ArrayList<Column>();\n  ArrayList<Column> values=new ArrayList<Column>();\n  if (logger.isDebugEnabled())   logger.debug(\"Processing slave heartbeat update: \" + now);\n  try {\n    st=database.createStatement();\n    rs=st.executeQuery(sourceTsQuery);\n    if (rs.next())     sts=rs.getTimestamp(1);\n  }\n  finally {\n    if (rs != null) {\n      try {\n        rs.close();\n      }\n catch (      SQLException e) {\n      }\n    }\n    if (st != null) {\n      try {\n        st.close();\n      }\n catch (      SQLException e) {\n      }\n    }\n  }\n  long lag_millis=now.getTime() - sts.getTime();\n  hbId.setValue(KEY);\n  whereClause.add(hbId);\n  hbSeqno.setValue(seqno);\n  hbEventId.setValue(eventId);\n  hbTargetTstamp.setValue(now);\n  hbLagMillis.setValue(lag_millis);\n  values.add(hbSeqno);\n  values.add(hbEventId);\n  values.add(hbTargetTstamp);\n  values.add(hbLagMillis);\n  database.update(hbTable,whereClause,values);\n}"}
{"ids": "15993", "raw_code": "public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {\n  if (!key.isPrivate()) {\n    throw new IllegalArgumentException(\"Private key required for decryption\");\n  }\n  BigInteger n=key.getModulus();\n  BigInteger d=key.getExponent();\n  byte[] C=new byte[inLen];\n  System.arraycopy(in,inOff,C,0,C.length);\n  BigInteger c=new BigInteger(1,C);\n  BigInteger r=c.modPow(d,n);\n  return generateKey(n,r,keyLen);\n}"}
{"ids": "78644", "raw_code": "public PrivateKey loadPrivateKey() throws Exception {\n  if (defaultKeys) {\n    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);\n  }\n  if (priKey == null) {\n    FileReader f=new FileReader(path + \"privatekey\" + this.id);\n    BufferedReader r=new BufferedReader(f);\n    String tmp=\"\";\n    String key=\"\";\n    while ((tmp=r.readLine()) != null) {\n      key=key + tmp;\n    }\n    f.close();\n    r.close();\n    priKey=getPrivateKeyFromString(key);\n  }\n  return priKey;\n}"}
{"ids": "17069", "raw_code": "public void removeCategoriesListener(SnapshotCategoriesListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "16496", "raw_code": "private Integer zGetWeekNumberForASevenDayRange(LocalDate firstDateInRange,WeekFields weekFieldRules,boolean requireUnanimousWeekNumber){\n  ArrayList<Integer> weekNumbersList=new ArrayList<Integer>();\n  for (int daysIntoTheFuture=0; daysIntoTheFuture <= 6; ++daysIntoTheFuture) {\n    LocalDate currentDateInRange;\n    try {\n      currentDateInRange=firstDateInRange.plusDays(daysIntoTheFuture);\n      int currentWeekNumber=currentDateInRange.get(weekFieldRules.weekOfWeekBasedYear());\n      weekNumbersList.add(currentWeekNumber);\n    }\n catch (    Exception ex) {\n      return 1;\n    }\n  }\n  boolean isUnanimous=(InternalUtilities.areObjectsEqual(weekNumbersList.get(0),weekNumbersList.get(6)));\n  if (isUnanimous) {\n    return weekNumbersList.get(0);\n  }\n  if (requireUnanimousWeekNumber) {\n    return null;\n  }\n  int mostCommonWeekNumber=InternalUtilities.getMostCommonElementInList(weekNumbersList);\n  return mostCommonWeekNumber;\n}"}
{"ids": "80956", "raw_code": "private boolean isNotInArray(String str,String[] array){\n  for (int i=0; i < array.length; i++) {\n    if (str.equals(array[i])) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "22124", "raw_code": "public void init() throws Exception {\n  loadParameterFromZK();\n  _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES);\n  _log.info(\"Max invalid login attempts from the same client IP: {}\",_maxAuthnLoginAttemtsCount);\n  _log.info(\"Life time in minutes of invalid login records for a client IP: {}\",_maxAuthnLoginAttemtsLifeTimeInMins);\n  _log.info(\"Cleanup thread schedule interval: {} minutes\",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS);\n}"}
{"ids": "77512", "raw_code": "public List<String> makeURLList(String shard){\n  List<String> urls=StrUtils.splitSmart(shard,\"|\",true);\n  for (int i=0; i < urls.size(); i++) {\n    urls.set(i,buildUrl(urls.get(i)));\n  }\n  if (urls.size() > 1)   Collections.shuffle(urls,r);\n  return urls;\n}"}
{"ids": "44129", "raw_code": "private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {\n  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));\n}"}
{"ids": "35403", "raw_code": "public void addVertex(Object id) throws IllegalArgumentException {\n  if (initialized) {\n    throw new IllegalArgumentException();\n  }\n  Vertex vertex=new Vertex(id);\n  Object existing=vertexMap.put(id,vertex);\n  if (existing != null) {\n    throw new IllegalArgumentException();\n  }\n  vertexList.add(vertex);\n}"}
{"ids": "73824", "raw_code": "public void configureLocalServices(){\n  clientMemo.setLnTrafficController(this);\n  clientMemo.configureCommandStation(LnCommandStationType.COMMAND_STATION_DCS100,false,false);\n  clientMemo.configureManagers();\n}"}
{"ids": "46537", "raw_code": "protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){\n  updateGrid();\n  calculateColumnRequirements(axis);\n  if (r == null) {\n    r=new SizeRequirements();\n  }\n  long min=0;\n  long pref=0;\n  int n=columnRequirements.length;\n  for (int i=0; i < n; i++) {\n    SizeRequirements req=columnRequirements[i];\n    min+=req.minimum;\n    pref+=req.preferred;\n  }\n  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;\n  min+=adjust;\n  pref+=adjust;\n  r.minimum=(int)min;\n  r.preferred=(int)pref;\n  r.maximum=(int)pref;\n  AttributeSet attr=getAttributes();\n  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);\n  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {\n    if (r.minimum < (int)min) {\n      r.maximum=r.minimum=r.preferred=(int)min;\n    }\n  }\n  totalColumnRequirements.minimum=r.minimum;\n  totalColumnRequirements.preferred=r.preferred;\n  totalColumnRequirements.maximum=r.maximum;\n  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);\n  if (o != null) {\n    String ta=o.toString();\n    if (ta.equals(\"left\")) {\n      r.alignment=0;\n    }\n else     if (ta.equals(\"center\")) {\n      r.alignment=0.5f;\n    }\n else     if (ta.equals(\"right\")) {\n      r.alignment=1;\n    }\n else {\n      r.alignment=0;\n    }\n  }\n else {\n    r.alignment=0;\n  }\n  return r;\n}"}
{"ids": "3974", "raw_code": "public void append(String string){\n  for (int i=0; i < string.length(); i++)   append(string.charAt(i));\n}"}
{"ids": "29334", "raw_code": "public ListenableFuture<String> push(final String name,final Expression func){\n  String let=String.format(\"let %s = %s\",name,func.toHaskell());\n  return pullRaw(let);\n}"}
{"ids": "71634", "raw_code": "public MetaDataColumnDescriptor(String columnName,int jdbcType,Object defaultValue){\n  _columnName=columnName.toUpperCase();\n  _jdbcType=jdbcType;\n  _defaultValue=defaultValue;\n}"}
{"ids": "52768", "raw_code": "private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){\n  if (dim == 0) {\n    DBIDArrayIter iter=ids.iter();\n    iter.seek(start);\n    NumberVector first=relation.get(iter);\n    iter.advance();\n    boolean degenerate=true;\n    loop:     for (; iter.getOffset() < end; iter.advance()) {\n      NumberVector other=relation.get(iter);\n      for (int d=0; d < lmin.length; d++) {\n        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {\n          degenerate=false;\n          break loop;\n        }\n      }\n    }\n    if (degenerate) {\n      double[] center=new double[lmin.length];\n      for (int d=0; d < lmin.length; d++) {\n        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];\n        if (center[d] > min[d] + width[d]) {\n          center[d]-=width[d];\n        }\n      }\n      children.add(new Node(code,center,end - start,level,null));\n      return;\n    }\n  }\n  if (dim == lmin.length) {\n    double[] center=new double[lmin.length];\n    for (int d=0; d < lmin.length; d++) {\n      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];\n      if (center[d] > min[d] + width[d]) {\n        center[d]-=width[d];\n      }\n    }\n    if (end - start < nmin) {\n      children.add(new Node(code,center,end - start,level,null));\n      return;\n    }\n else {\n      List<Node> newchildren=new ArrayList<>();\n      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);\n      children.add(new Node(code,center,end - start,level,newchildren));\n      return;\n    }\n  }\n else {\n    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();\n    siter.seek(start);\n    eiter.seek(end - 1);\n    while (siter.getOffset() < eiter.getOffset()) {\n      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {\n        siter.advance();\n        continue;\n      }\n      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {\n        eiter.retract();\n        continue;\n      }\n      ids.swap(siter.getOffset(),eiter.getOffset() - 1);\n      siter.advance();\n      eiter.retract();\n    }\n    final int spos=siter.getOffset();\n    if (start < spos) {\n      final double tmp=lmax[dim];\n      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;\n      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);\n      lmax[dim]=tmp;\n    }\n    if (spos < end) {\n      final double tmp=lmin[dim];\n      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;\n      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));\n      lmin[dim]=tmp;\n    }\n  }\n}"}
{"ids": "71987", "raw_code": "public DataProviderEvent(final LocalizableMessage reason,final Set<Type> types){\n  Reject.ifNull(reason,types);\n  Reject.ifTrue(types.isEmpty());\n  this.reason=reason;\n  final EnumSet<Type> tmp=EnumSet.noneOf(Type.class);\n  tmp.addAll(types);\n  this.types=Collections.unmodifiableSet(tmp);\n}"}
{"ids": "57296", "raw_code": "public <T>List<String> validateBean(T bean,String errIfBeanNull){\n  List<String> errors=new ArrayList<String>();\n  if (bean == null) {\n    errors.add(errIfBeanNull);\n    return errors;\n  }\n  Set<ConstraintViolation<T>> violations=validator.validate(bean);\n  for (  ConstraintViolation<T> violation : violations) {\n    errors.add(violation.getMessage());\n  }\n  return errors;\n}"}
{"ids": "84947", "raw_code": "protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){\n  if (command.offset == -1 || document.getLength() == 0) {\n    return;\n  }\n  try {\n    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);\n    int line=document.getLineOfOffset(p);\n    int start=document.getLineOffset(line);\n    int whiteend=findEndOfWhiteSpace(document,start,command.offset);\n    if (whiteend == command.offset) {\n      int indLine=findMatchingOpenBracket(document,line,command.offset,1);\n      if (indLine != -1 && indLine != line) {\n        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));\n        replaceText.append(document.get(whiteend,command.offset - whiteend));\n        replaceText.append(command.text);\n        command.length=command.offset - start;\n        command.offset=start;\n        command.text=replaceText.toString();\n      }\n    }\n  }\n catch (  BadLocationException e) {\n    GWTPluginLog.logError(e);\n  }\n}"}
{"ids": "10019", "raw_code": "private String attemptToChooseFormattingPattern(){\n  if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) {\n    getAvailableFormats(nationalNumber.toString());\n    String formattedNumber=attemptToFormatAccruedDigits();\n    if (formattedNumber.length() > 0) {\n      return formattedNumber;\n    }\n    return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString();\n  }\n else {\n    return appendNationalNumber(nationalNumber.toString());\n  }\n}"}
{"ids": "36434", "raw_code": "private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){\n  Graphics2D gPr=(Graphics2D)g2.create();\n  Rectangle2D loc=anno.getLocation();\n  gPr.translate(loc.getX(),loc.getY());\n  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());\n  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());\n  pane.setSize(size);\n  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));\n  pane.setCaretPosition(0);\n  pane.paint(gPr);\n  gPr.dispose();\n}"}
{"ids": "5520", "raw_code": "public void add(IPoint pt){\n  if (inProgress) {\n    throw new ConcurrentModificationException(\"Can't add point while iterator in progress\");\n  }\n  points.add(pt);\n}"}
{"ids": "54020", "raw_code": "public static Configuration load(Reader reader) throws IOException {\n  try {\n    Properties properties=new Properties();\n    properties.load(reader);\n    return from(properties);\n  }\n  finally {\n    reader.close();\n  }\n}"}
{"ids": "41121", "raw_code": "public void add(OffsettedItem item){\n  throwIfPrepared();\n  try {\n    if (item.getAlignment() > getAlignment()) {\n      throw new IllegalArgumentException(\"incompatible item alignment\");\n    }\n  }\n catch (  NullPointerException ex) {\n    throw new NullPointerException(\"item == null\");\n  }\n  items.add(item);\n}"}
{"ids": "36058", "raw_code": "public static void addAnnotationToXML(Element annotationsElement,String name,String value){\n  if (value == null) {\n    deleteAnnotationFromXML(annotationsElement,name);\n  }\n else {\n    final Document doc=annotationsElement.getOwnerDocument();\n    Element elem=doc.createElement(\"annotation\");\n    annotationsElement.appendChild(elem);\n    elem.setAttribute(\"key\",name);\n    elem.setTextContent(value);\n  }\n}"}
{"ids": "51515", "raw_code": "public boolean readBoolean() throws IOException {\n  return primitiveTypes.readBoolean();\n}"}
{"ids": "82039", "raw_code": "public void startTicker(long delay,boolean rightToLeft){\n  if (!tickerEnabled) {\n    return;\n  }\n  if (!isCellRenderer()) {\n    Form parent=getComponentForm();\n    if (parent != null) {\n      parent.registerAnimatedInternal(this);\n    }\n  }\n  tickerStartTime=System.currentTimeMillis();\n  tickerDelay=delay;\n  tickerRunning=true;\n  this.rightToLeft=rightToLeft;\n  if (isRTL()) {\n    this.rightToLeft=!this.rightToLeft;\n  }\n}"}
{"ids": "48169", "raw_code": "static CipherSuite valueOf(int id1,int id2){\n  id1&=0xff;\n  id2&=0xff;\n  int id=(id1 << 8) | id2;\n  CipherSuite c=idMap.get(id);\n  if (c == null) {\n    String h1=Integer.toString(id1,16);\n    String h2=Integer.toString(id2,16);\n    c=new CipherSuite(\"Unknown 0x\" + h1 + \":0x\"+ h2,id);\n  }\n  return c;\n}"}
{"ids": "76449", "raw_code": "public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){\n  Map<String,Object> pendingActionMap=new HashMap<String,Object>();\n  pendingActionMap.put(MAPPING_NAME,mappingName);\n  pendingActionMap.put(SOURCE_OBJECT,sourceObject);\n  pendingActionMap.put(RECON_ID,reconId);\n  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());\n  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());\n  return pendingActionContext;\n}"}
{"ids": "66771", "raw_code": "public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){\n  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {\n    ITextEditor editor=(ITextEditor)openedEditor;\n    if (fProcessedClasses.contains(className)) {\n      if (fClassesNeedUpdate.contains(className)) {\n        ClassMarkerProcessor classProcessor=get(className);\n        classProcessor.updateTaintMarkers(editor);\n        fClassesNeedUpdate.remove(className);\n      }\n    }\n else {\n      fProcessedClasses.add(className);\n      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);\n      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);\n      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {\n        IEditorInput input=editor.getEditorInput();\n        if (input instanceof FileEditorInput) {\n          ClassMarkerProcessor classProcessor=get(className);\n          classProcessor.showDroidsafeTextMarkers(editor);\n        }\n      }\n    }\n  }\n}"}
{"ids": "62900", "raw_code": "private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){\n  ClassReference objClassRef=objSubjectExpression.getClassReference();\n  if (null == objClassRef || null == objClassRef.getFQN()) {\n    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);\n    return;\n  }\n  objTypesSet.add(objClassRef.getFQN());\n}"}
{"ids": "2083", "raw_code": "private static List<Size> pickUpToThree(List<Size> sizes){\n  List<Size> result=new ArrayList<Size>();\n  Size largest=sizes.get(0);\n  result.add(largest);\n  Size lastSize=largest;\n  for (  Size size : sizes) {\n    double targetArea=Math.pow(.5,result.size()) * area(largest);\n    if (area(size) < targetArea) {\n      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {\n        result.add(lastSize);\n      }\n else {\n        result.add(size);\n      }\n    }\n    lastSize=size;\n    if (result.size() == 3) {\n      break;\n    }\n  }\n  if (result.size() < 3 && !result.contains(lastSize)) {\n    result.add(lastSize);\n  }\n  return result;\n}"}
{"ids": "75751", "raw_code": "public static void copyToClipboard(Transferable t){\n  ClipboardHelper.copyToClipboard(t);\n}"}
{"ids": "59710", "raw_code": "public static String formatPercent(int downloadSize,int fileSize){\n  float num=(float)downloadSize / fileSize;\n  float percent=((float)(int)(num * 1000)) / 10;\n  return String.valueOf(percent + \"%\");\n}"}
{"ids": "46205", "raw_code": "final private String attrDef2AttrDesc(Attributes attrs) throws NamingException {\n  StringBuffer attrDesc=new StringBuffer(\"( \");\n  Attribute attr=null;\n  int count=0;\n  attr=attrs.get(NUMERICOID_ID);\n  if (attr != null) {\n    attrDesc.append(writeNumericOID(attr));\n    count++;\n  }\n else {\n    throw new ConfigurationException(\"Attribute type doesn't\" + \"have a numeric OID\");\n  }\n  attr=attrs.get(NAME_ID);\n  if (attr != null) {\n    attrDesc.append(writeQDescrs(attr));\n    count++;\n  }\n  attr=attrs.get(DESC_ID);\n  if (attr != null) {\n    attrDesc.append(writeQDString(attr));\n    count++;\n  }\n  attr=attrs.get(OBSOLETE_ID);\n  if (attr != null) {\n    attrDesc.append(writeBoolean(attr));\n    count++;\n  }\n  attr=attrs.get(SUP_ID);\n  if (attr != null) {\n    attrDesc.append(writeWOID(attr));\n    count++;\n  }\n  attr=attrs.get(EQUALITY_ID);\n  if (attr != null) {\n    attrDesc.append(writeWOID(attr));\n    count++;\n  }\n  attr=attrs.get(ORDERING_ID);\n  if (attr != null) {\n    attrDesc.append(writeWOID(attr));\n    count++;\n  }\n  attr=attrs.get(SUBSTR_ID);\n  if (attr != null) {\n    attrDesc.append(writeWOID(attr));\n    count++;\n  }\n  attr=attrs.get(SYNTAX_ID);\n  if (attr != null) {\n    attrDesc.append(writeWOID(attr));\n    count++;\n  }\n  attr=attrs.get(SINGLE_VAL_ID);\n  if (attr != null) {\n    attrDesc.append(writeBoolean(attr));\n    count++;\n  }\n  attr=attrs.get(COLLECTIVE_ID);\n  if (attr != null) {\n    attrDesc.append(writeBoolean(attr));\n    count++;\n  }\n  attr=attrs.get(NO_USER_MOD_ID);\n  if (attr != null) {\n    attrDesc.append(writeBoolean(attr));\n    count++;\n  }\n  attr=attrs.get(USAGE_ID);\n  if (attr != null) {\n    attrDesc.append(writeQDString(attr));\n    count++;\n  }\n  if (count < attrs.size()) {\n    String attrId=null;\n    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {\n      attr=ae.next();\n      attrId=attr.getID();\n      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(SINGLE_VAL_ID)|| attrId.equals(EQUALITY_ID)|| attrId.equals(ORDERING_ID)|| attrId.equals(SUBSTR_ID)|| attrId.equals(NO_USER_MOD_ID)|| attrId.equals(USAGE_ID)|| attrId.equals(SUP_ID)|| attrId.equals(COLLECTIVE_ID)|| attrId.equals(OBSOLETE_ID)) {\n        continue;\n      }\n else {\n        attrDesc.append(writeQDStrings(attr));\n      }\n    }\n  }\n  attrDesc.append(\")\");\n  return attrDesc.toString();\n}"}
{"ids": "52498", "raw_code": "public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){\n  Collection<T> newCollection;\n  try {\n    @SuppressWarnings(\"unchecked\") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();\n    newCollection=cls.newInstance();\n  }\n catch (  InstantiationException|IllegalAccessException e) {\n    throw new IllegalStateException(e);\n  }\n  for (  T element : mutableCollection) {\n    newCollection.add(Utils.makeImmutable(element));\n  }\n  return Collections.unmodifiableCollection(newCollection);\n}"}
{"ids": "70383", "raw_code": "public synchronized void trackHexImages(IHex hex,MediaTracker tracker){\n  Image base=hexToImageCache.get(hex);\n  List<Image> superImgs=hexToImageListCache.get(hex);\n  List<Image> orthoImgs=orthoListCache.get(hex);\n  tracker.addImage(base,1);\n  if (superImgs != null) {\n    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {\n      tracker.addImage(i.next(),1);\n    }\n  }\n  if (orthoImgs != null) {\n    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {\n      tracker.addImage(i.next(),1);\n    }\n  }\n}"}
{"ids": "57", "raw_code": "public boolean isProcessed(Trace trace,Node node,Direction direction){\n  boolean ret=false;\n  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {\n    if (uriFilter == null || uriFilter.test(node.getUri())) {\n      ret=true;\n    }\n  }\n  if (log.isLoggable(Level.FINEST)) {\n    log.finest(\"ProcessManager/Processor: isProcessed trace=\" + trace + \" node=\"+ node+ \" direction=\"+ direction+ \"? \"+ ret);\n  }\n  return ret;\n}"}
{"ids": "71239", "raw_code": "private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){\n  QuadEdge curr=edge;\n  int edgeCount=0;\n  boolean isFrame=false;\n  do {\n    triEdges[edgeCount]=curr;\n    if (isFrameEdge(curr))     isFrame=true;\n    QuadEdge sym=curr.sym();\n    if (!visitedEdges.contains(sym))     edgeStack.push(sym);\n    visitedEdges.add(curr);\n    edgeCount++;\n    curr=curr.lNext();\n  }\n while (curr != edge);\n  if (isFrame && !includeFrame)   return null;\n  return triEdges;\n}"}
{"ids": "17071", "raw_code": "public static synchronized DataSourceViewsManager sharedInstance(){\n  if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager();\n  return sharedInstance;\n}"}
{"ids": "51904", "raw_code": "public String tag(String inner,String c1,String c2){\n  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;\n  String s=\"[\";\n  if (color)   s+=\"<\" + c1 + \">\";\n  s+=inner;\n  if (color)   s+=\"<\" + c2 + \">\";\n  s+=\"] \";\n  if (color)   s+=\"<\" + c1 + \">\";\n  return color ? Pretty.format(s) : s;\n}"}
{"ids": "24189", "raw_code": "private final String loadXmlDefinition(){\n  final Cache cache=CacheFactory.getAnyInstance();\n  final StringWriter stringWriter=new StringWriter();\n  final PrintWriter printWriter=new PrintWriter(stringWriter);\n  CacheXmlGenerator.generate(cache,printWriter,true,false,false);\n  printWriter.close();\n  return loadXmlDefinition(stringWriter.toString());\n}"}
{"ids": "41867", "raw_code": "private Long id(HttpServletRequest request){\n  Long id=null;\n  String pathInfo=request.getPathInfo();\n  if (pathInfo != null && pathInfo.length() > 1) {\n    String idString=pathInfo.substring(1);\n    id=Long.valueOf(idString);\n  }\n  return id;\n}"}
{"ids": "85646", "raw_code": "public void uncompress(){\n  data.position(0);\n  InflaterInputStream inflater=new InflaterInputStream(data.asInputStream());\n  byte[] buffer=new byte[8192];\n  IoBuffer tmp=IoBuffer.allocate(0);\n  tmp.setAutoExpand(true);\n  try {\n    while (inflater.available() > 0) {\n      int decompressed=inflater.read(buffer);\n      if (decompressed <= 0) {\n        break;\n      }\n      tmp.put(buffer,0,decompressed);\n    }\n  }\n catch (  IOException e) {\n    tmp.free();\n    throw new RuntimeException(\"could not uncompress data\",e);\n  }\n finally {\n    if (inflater != null) {\n      try {\n        inflater.close();\n      }\n catch (      IOException e1) {\n      }\n    }\n  }\n  data.free();\n  data=tmp;\n  data.flip();\n  prepareIO();\n}"}
{"ids": "78006", "raw_code": "public void poll(final TcpSocketStatisticsHandler handler){\n  this.statisticsHandler=handler;\n  try {\n    fileLoader.load();\n    final ByteBuffer buffer=fileLoader.getBuffer();\n    lineParser.reset();\n    lineParser.handleToken(buffer,buffer.position(),buffer.limit());\n  }\n  finally {\n    this.statisticsHandler=null;\n  }\n  monitoredSockets.purgeEntriesOlderThan(updateCount);\n  updateCount++;\n}"}
{"ids": "51411", "raw_code": "public int compareTo(CharBuffer otherBuffer){\n  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();\n  int thisPos=position;\n  int otherPos=otherBuffer.position;\n  char thisByte, otherByte;\n  while (compareRemaining > 0) {\n    thisByte=get(thisPos);\n    otherByte=otherBuffer.get(otherPos);\n    if (thisByte != otherByte) {\n      return thisByte < otherByte ? -1 : 1;\n    }\n    thisPos++;\n    otherPos++;\n    compareRemaining--;\n  }\n  return remaining() - otherBuffer.remaining();\n}"}
{"ids": "14667", "raw_code": "private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {\n  PolicyNotification policyNotification=null;\n  try {\n    String notificationDataBlock=getNotificationDataBlock(xml);\n    if (notificationDataBlock != null) {\n      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));\n      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);\n      if (rootNode != null) {\n        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);\n        if (notificationNode != null) {\n          policyNotification=PolicyNotification.parseXML(notificationNode);\n        }\n else {\n          debug.error(\"ResultsCacheUtil.\" + \"extractPolicyNotification():\" + \"cannot find notification node\");\n          throw new PolicyEvaluationException(ResBundleUtils.rbName,\"invalid_root_element\",null,null);\n        }\n      }\n else {\n        debug.error(\"ResultsCacheUtil.\" + \"extractPolicyNotification():\");\n      }\n    }\n else {\n      debug.error(\"ResultsCacheUtil:\" + \"extractPolicyNotification():\" + \"notification data block is null\");\n    }\n  }\n catch (  Exception xe) {\n    debug.error(\"ResultsCacheUtil.extractPolicyNotification():\",xe);\n    throw new PolicyEvaluationException(ResBundleUtils.rbName,\"xml_parsing_error\",null,xe);\n  }\n  return policyNotification;\n}"}
{"ids": "6177", "raw_code": "private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){\n  try {\n    Class classTmp=getClassForName(className);\n    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);\n    declaredConstructor.setAccessible(true);\n    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));\n  }\n catch (  Exception e) {\n    Log.d(WearBusTools.BUSWEAR_TAG,\"syncEvent error: \" + e.getMessage());\n  }\n  return null;\n}"}
{"ids": "22905", "raw_code": "public boolean isLoginSet(){\n  return (username != null && (password != null && !username.equals(\"\") && !password.equals(\"\"))) || oauth;\n}"}
{"ids": "7101", "raw_code": "public void addContentItem(ContentItem contentItem){\n  if (contentItems == null) {\n    contentItems=new ArrayList<ContentItem>();\n  }\n  contentItems.add(contentItem);\n}"}
{"ids": "834", "raw_code": "public static String canonicalizeClassName(String name){\n  String classname=name.replace('/','.');\n  classname=classname.replace('\\\\','.');\n  if (classname.startsWith(\"class \"))   classname=classname.substring(6);\n  if (classname.endsWith(\".class\"))   classname=classname.substring(0,classname.length() - 6);\n  return classname;\n}"}
{"ids": "24391", "raw_code": "public static final void pause(final int milliseconds){\n  if (milliseconds >= 1000 || logger.isDebugEnabled()) {\n    logger.info(\"Pausing for {} ms...\",milliseconds);\n  }\n  final long target=System.currentTimeMillis() + milliseconds;\n  try {\n    for (; ; ) {\n      long msLeft=target - System.currentTimeMillis();\n      if (msLeft <= 0) {\n        break;\n      }\n      Thread.sleep(msLeft);\n    }\n  }\n catch (  InterruptedException e) {\n    Assert.fail(\"interrupted\",e);\n  }\n}"}
{"ids": "63897", "raw_code": "public boolean isHighlightWithInvisibleEdge(){\n  return highlightWithInvisibleEdge;\n}"}
{"ids": "31739", "raw_code": "private Configuration prepareJobForCancelling() throws Exception {\n  prepareFile(\"/testFile\",1500);\n  executedTasks.set(0);\n  cancelledTasks.set(0);\n  failMapperId.set(0);\n  splitsCount.set(0);\n  Configuration cfg=new Configuration();\n  setupFileSystems(cfg);\n  Job job=Job.getInstance(cfg);\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(IntWritable.class);\n  job.setMapperClass(CancellingTestMapper.class);\n  job.setNumReduceTasks(0);\n  job.setInputFormatClass(InFormat.class);\n  FileInputFormat.setInputPaths(job,new Path(\"igfs://:\" + getTestGridName(0) + \"@/\"));\n  FileOutputFormat.setOutputPath(job,new Path(\"igfs://:\" + getTestGridName(0) + \"@/output/\"));\n  job.setJarByClass(getClass());\n  return job.getConfiguration();\n}"}
{"ids": "82988", "raw_code": "protected void generateFields(){\n  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {\n    Element element=iterator.next();\n    if (!element.used) {\n      iterator.remove();\n      continue;\n    }\n    PsiField[] fields=mClass.getFields();\n    boolean duplicateField=false;\n    for (    PsiField field : fields) {\n      String name=field.getName();\n      if (name != null && name.equals(element.getFieldName())) {\n        duplicateField=true;\n        break;\n      }\n    }\n    if (duplicateField) {\n      iterator.remove();\n      continue;\n    }\n    mClass.add(mFactory.createFieldFromText(\"private \" + element.name + \" \"+ element.getFieldName()+ \";\",mClass));\n  }\n}"}
{"ids": "69011", "raw_code": "public boolean isFlying(){\n  return (flyThroughDialog != null);\n}"}
{"ids": "24432", "raw_code": "public synchronized void init(){\n  channelFactory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool());\n  datagramChannelFactory=new NioDatagramChannelFactory(Executors.newCachedThreadPool());\n  timer=new HashedWheelTimer();\n}"}
{"ids": "73636", "raw_code": "private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){\n  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {\n    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;\n    int maxOffset=mOverScrollOffsetLimit;\n    if (mUnconsumedOverScrollOffset > 0) {\n      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);\n    }\n else     if (mUnconsumedOverScrollOffset < 0) {\n      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);\n    }\n    setScrollingOffset(getUnconsumedScrollingOffset());\n  }\n  pullEdgeEffects(dxUnconsumed,dyUnconsumed);\n}"}
{"ids": "69321", "raw_code": "private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){\n  String queryLikeSelection2=\"%\" + query.textQuery + \"%\";\n  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};\n  Cursor cursor=null;\n  try {\n    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);\n    if (cursor != null) {\n      waypoints.ensureCapacity(cursor.getCount());\n      while (cursor.moveToNext()) {\n        Waypoint waypoint=providerUtils.createWaypoint(cursor);\n        if (LocationUtils.isValidLocation(waypoint.getLocation())) {\n          waypoints.add(waypoint);\n        }\n      }\n    }\n  }\n  finally {\n    if (cursor != null) {\n      cursor.close();\n    }\n  }\n}"}
{"ids": "68935", "raw_code": "void release(){\n  imageLoader.cancelPendingRequests();\n  loading=new boolean[noxItems.size()];\n}"}
{"ids": "77314", "raw_code": "public void add(String name,long cnt){\n  if (_values == null) {\n    _values=new ArrayList<>(30);\n  }\n  _values.add(new Count(this,name,cnt));\n}"}
{"ids": "20904", "raw_code": "public void addParam(AstNode param){\n  assertNotNull(param);\n  if (params == null) {\n    params=new ArrayList<AstNode>();\n  }\n  params.add(param);\n  param.setParent(this);\n}"}
{"ids": "69701", "raw_code": "DeleteEvent(@NonNull JSONObject json) throws JSONException {\n  super(TYPE_DELETE,json);\n  if (TextUtils.isEmpty(mBlockId)) {\n    throw new JSONException(TYPENAME_DELETE + \" requires \" + JSON_BLOCK_ID);\n  }\n  mOldXml=json.optString(JSON_OLD_VALUE);\n  JSONArray ids=json.getJSONArray(JSON_IDS);\n  int count=ids.length();\n  List<String> temp=new ArrayList<>(count);\n  for (int i=0; i < count; ++i) {\n    temp.add(ids.getString(i));\n  }\n  mIds=Collections.unmodifiableList(temp);\n}"}
{"ids": "22042", "raw_code": "public static boolean isFullCopyRestorable(Volume volume,DbClient dbClient){\n  boolean result=false;\n  String replicaState=volume.getReplicaState();\n  if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {\n    ReplicationState state=ReplicationState.getEnumValue(replicaState);\n    if (state != null && state == ReplicationState.SYNCHRONIZED) {\n      result=true;\n    }\n  }\n  return result;\n}"}
{"ids": "48707", "raw_code": "private static boolean isBufferTooLarge(ByteBuffer buf){\n  return isBufferTooLarge(buf.capacity());\n}"}
{"ids": "13986", "raw_code": "public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String certAlias) throws XMLSignatureException {\n  return verifyXMLSignature(element,DEF_ID_ATTRIBUTE,certAlias);\n}"}
{"ids": "83162", "raw_code": "public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException {\n  String line=reader.readLine();\n  while (line != null && line.length() > 0) {\n    line=reader.readLine();\n  }\n}"}
{"ids": "9334", "raw_code": "private void parseParameters(String parameters){\n  Log.v(\"HttpHeader\",\"HttpAuthHeader.parseParameters():\" + \" parameters: \" + parameters);\n  if (parameters != null) {\n    int i;\n    do {\n      i=parameters.indexOf(',');\n      if (i < 0) {\n        parseParameter(parameters);\n      }\n else {\n        parseParameter(parameters.substring(0,i));\n        parameters=parameters.substring(i + 1);\n      }\n    }\n while (i >= 0);\n  }\n}"}
{"ids": "79728", "raw_code": "public void addHttpSessionToken(String site,String token){\n  if (!site.contains(\":\")) {\n    site=site + (\":80\");\n  }\n  HttpSessionTokensSet siteTokens=sessionTokens.get(site);\n  if (siteTokens == null) {\n    siteTokens=new HttpSessionTokensSet();\n    sessionTokens.put(site,siteTokens);\n  }\n  log.info(\"Added new session token for site '\" + site + \"': \"+ token);\n  siteTokens.addToken(token);\n  unmarkRemovedDefaultSessionToken(site,token);\n}"}
{"ids": "17013", "raw_code": "public GradleDistribution deserializeFromString(String distributionString){\n  Preconditions.checkNotNull(distributionString);\n  String localInstallationPrefix=\"GRADLE_DISTRIBUTION(LOCAL_INSTALLATION(\";\n  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith(\"))\")) {\n    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);\n    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));\n  }\n  String remoteDistributionPrefix=\"GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION(\";\n  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith(\"))\")) {\n    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);\n    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));\n  }\n  String versionPrefix=\"GRADLE_DISTRIBUTION(VERSION(\";\n  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith(\"))\")) {\n    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);\n    return GradleDistribution.forVersion(version);\n  }\n  String wrapperString=\"GRADLE_DISTRIBUTION(WRAPPER)\";\n  if (distributionString.equals(wrapperString)) {\n    return GradleDistribution.fromBuild();\n  }\n  String message=String.format(\"Cannot deserialize Gradle distribution string '%s.'\",distributionString);\n  throw new RuntimeException(message);\n}"}
{"ids": "16147", "raw_code": "public double metersToPixels(){\n  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;\n  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));\n  return screenSize.longitude / windowWidth * metersToLon;\n}"}
{"ids": "54568", "raw_code": "public boolean sendViaDataSocket(byte[] bytes,int start,int len){\n  if (dataOutputStream == null) {\n    Log.i(TAG,\"Can't send via null dataOutputStream\");\n    return false;\n  }\n  if (len == 0) {\n    return true;\n  }\n  try {\n    dataOutputStream.write(bytes,start,len);\n  }\n catch (  IOException e) {\n    Log.i(TAG,\"Couldn't write output stream for data socket\");\n    Log.i(TAG,e.toString());\n    return false;\n  }\n  localDataSocket.reportTraffic(len);\n  return true;\n}"}
{"ids": "29714", "raw_code": "private void pushContext(BaseContext c){\n  contextStack.push(c);\n}"}
{"ids": "73009", "raw_code": "@Override public void bookmarksOrHistoryPicker(ComboViews startView){\n  if (mTabControl.getCurrentWebView() == null) {\n    return;\n  }\n  if (isInCustomActionMode()) {\n    endActionMode();\n  }\n  Bundle extras=new Bundle();\n  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());\n  mUi.showComboView(startView,extras);\n}"}
{"ids": "12695", "raw_code": "public FST(String fileName,String encoding,boolean verbose) throws IOException {\n  FileInputStream fis=new FileInputStream(fileName);\n  try {\n    loadHeaderless(fis,encoding,verbose);\n  }\n  finally {\n    fis.close();\n  }\n}"}
{"ids": "12825", "raw_code": "public static double[] normalizeZscore(double[] x){\n  double mn=mean(x,0);\n  double sd=standardDeviation(x,0);\n  for (int i=0; i < x.length; i++)   if (!Double.isNaN(x[i]))   x[i]=(x[i] - mn) / sd;\n  return x;\n}"}
{"ids": "80813", "raw_code": "void addLocation(String location){\n  if (fLocationList.contains(location)) {\n    return;\n  }\n  fLocationList.add(location);\n  fTableViewer.refresh();\n  fTableViewer.setChecked(location,true);\n  fTableViewer.setSelection(new StructuredSelection(location));\n  validateLocations();\n}"}
{"ids": "33031", "raw_code": "public JavaFormatter(String lineDelimiter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){\n  fLineDelimiter=lineDelimiter;\n  fUseCodeFormatter=useCodeFormatter;\n  fInitialIndentLevel=initialIndentLevel;\n  fProject=project;\n}"}
{"ids": "55596", "raw_code": "private static void checkPathNeed(){\n  if (samplingInterval == -1) {\n    lastPreloadTime=readMorePaths();\n  }\n  if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {\n    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) {\n      lastPreloadTime=readMorePaths();\n    }\n  }\n}"}
{"ids": "65099", "raw_code": "@SuppressWarnings(\"unchecked\") public void restore(String fileName) throws IOException, ClassNotFoundException {\n  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));\n  locations=(Map<V,Point>)ois.readObject();\n  ois.close();\n  initializeLocations();\n  locked=true;\n  fireStateChanged();\n}"}
{"ids": "23833", "raw_code": "public void waitForData(){\n  if (this.initialized) {\n    return;\n  }\n  waitOnInitialization(this.initializationLatchAfterGetInitialImage);\n}"}
{"ids": "12497", "raw_code": "private void blackmanHarris4sMin(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.36;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));\n}"}
{"ids": "59409", "raw_code": "public int hashCode(){\n  return _lowerNick.hashCode();\n}"}
{"ids": "53795", "raw_code": "public boolean incrementReceived(){\n  Long diff=System.currentTimeMillis() - startTime;\n  if (diff >= 1000) {\n    packetsPerSecond=intervalPackets;\n    startTime=System.currentTimeMillis();\n    intervalPackets=1;\n    return true;\n  }\n else {\n    intervalPackets++;\n  }\n  this.receivedPackets++;\n  return false;\n}"}
{"ids": "80050", "raw_code": "Sentence parseSentence(final String text,final ConversationContext ctx){\n  if (isEmpty()) {\n    return ConversationParser.parse(text,ctx);\n  }\n  String txt=text.trim();\n  final Sentence sentence=new SentenceImplementation(ctx,txt);\n  txt=ConversationParser.detectSentenceType(txt,sentence);\n  if (typeMatching) {\n    readTypeMatchExpressions(txt,ctx,sentence);\n  }\n else   if (exactMatching) {\n    readSimpleExpressions(txt,ctx,sentence);\n  }\n else   if (similarMatching) {\n    readSimpleExpressions(txt,ctx,sentence);\n  }\n else   if (jokerMatching) {\n    readJokerExpressions(txt,ctx,sentence);\n  }\n else   if (caseInsensitive) {\n    readSimpleExpressions(txt,ctx,sentence);\n  }\n  return sentence;\n}"}
{"ids": "54094", "raw_code": "public KafkaCluster usingDirectory(File dataDir){\n  if (running)   throw new IllegalStateException(\"Unable to add a broker when the cluster is already running\");\n  if (dataDir != null && dataDir.exists() && !dataDir.isDirectory() && !dataDir.canWrite() && !dataDir.canRead()) {\n    throw new IllegalArgumentException(\"The directory must be readable and writable\");\n  }\n  this.dataDir=dataDir;\n  return this;\n}"}
{"ids": "12897", "raw_code": "protected boolean checkProsodicPosition(Element currentRulePart,String prosodicPositionType){\n  NamedNodeMap attNodes=currentRulePart.getAttributes();\n  for (int z=0; z < attNodes.getLength(); z++) {\n    Node el=attNodes.item(z);\n    String currentAtt=el.getNodeName();\n    String currentVal=el.getNodeValue();\n    if (currentAtt.equals(\"type\")) {\n      if (!currentVal.startsWith(\"!\")) {\n        if (!prosodicPositionType.equals(currentVal))         return false;\n      }\n else {\n        currentVal=currentVal.substring(1,currentVal.length());\n        if (prosodicPositionType.equals(currentVal))         return false;\n      }\n    }\n  }\n  return true;\n}"}
{"ids": "36292", "raw_code": "public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){\n  registerOperators(name,operatorsXML,classLoader,null);\n}"}
{"ids": "15058", "raw_code": "public void deleteSubGroupContainers(Set groupContainers) throws AMException, SSOException {\n  Iterator iter=groupContainers.iterator();\n  while (iter.hasNext()) {\n    String groupContainerDN=(String)iter.next();\n    AMGroupContainer groupContainer=new AMGroupContainerImpl(token,groupContainerDN);\n    groupContainer.delete();\n  }\n}"}
{"ids": "79155", "raw_code": "public GlowTask(Plugin owner,Runnable task,boolean sync,long delay,long period){\n  super(task,null);\n  taskId=nextTaskId.getAndIncrement();\n  description=task.toString();\n  this.owner=owner;\n  this.delay=delay;\n  this.period=period;\n  counter=0;\n  this.sync=sync;\n}"}
{"ids": "42286", "raw_code": "public static void init(String[] args){\n  try {\n    compiler.initCompiler(args);\n    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {\n      optCompiler.initCompiler(args);\n    }\n  }\n catch (  Throwable e) {\n    while (e != null) {\n      e.printStackTrace();\n      e=e.getCause();\n    }\n  }\n}"}
{"ids": "79709", "raw_code": "public static String encode(Serializable o){\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  try {\n    ObjectOutputStream oos=new ObjectOutputStream(bos);\n    try {\n      oos.writeObject(o);\n      oos.flush();\n    }\n  finally {\n      oos.close();\n    }\n    return Base64.encodeBytes(bos.toByteArray());\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "3192", "raw_code": "private static boolean isIdentifierName(String k){\n  int n=k.length();\n  if (n == 0) {\n    return false;\n  }\n  if (!Character.isJavaIdentifierStart(k.charAt(0))) {\n    return false;\n  }\n  for (int i=1; i < n; ++i) {\n    if (!Character.isJavaIdentifierPart(k.charAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "59594", "raw_code": "static boolean lessThanUnsignedLong(long x1,long x2){\n  return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE);\n}"}
{"ids": "52265", "raw_code": "private void moveSingleNode(Object source,Point newPoint){\n  DisplayNode node=(DisplayNode)source;\n  int deltaX=newPoint.x - clickPoint.x;\n  int deltaY=newPoint.y - clickPoint.y;\n  int newX=node.getLocation().x + deltaX;\n  int newY=node.getLocation().y + deltaY;\n  node.setLocation(newX,newY);\n}"}
{"ids": "10382", "raw_code": "@SuppressWarnings(\"rawtypes\") protected KafkaSpoutWrapper createKafkaSpout(Map conf,TopologyContext context,SpoutOutputCollector collector,final String topic,String schemeClsName,SpoutSpec spoutSpec,Map<String,StreamDefinition> sds) throws Exception {\n  String kafkaBrokerZkQuorum=config.getString(\"spout.kafkaBrokerZkQuorum\");\n  BrokerHosts hosts=null;\n  if (config.hasPath(\"spout.kafkaBrokerZkBasePath\")) {\n    hosts=new ZkHosts(kafkaBrokerZkQuorum,config.getString(\"spout.kafkaBrokerZkBasePath\"));\n  }\n else {\n    hosts=new ZkHosts(kafkaBrokerZkQuorum);\n  }\n  String transactionZkRoot=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT;\n  if (config.hasPath(\"spout.stormKafkaTransactionZkPath\")) {\n    transactionZkRoot=config.getString(\"spout.stormKafkaTransactionZkPath\");\n  }\n  String zkStateTransactionRelPath=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH;\n  if (config.hasPath(\"spout.stormKafkaEagleConsumer\")) {\n    zkStateTransactionRelPath=config.getString(\"spout.stormKafkaEagleConsumer\");\n  }\n  SpoutConfig spoutConfig=new SpoutConfig(hosts,topic,transactionZkRoot,zkStateTransactionRelPath + \"/\" + topic+ \"/\"+ topologyId);\n  boolean stormKafkaUseSameZkQuorumWithKafkaBroker=config.getBoolean(\"spout.stormKafkaUseSameZkQuorumWithKafkaBroker\");\n  if (stormKafkaUseSameZkQuorumWithKafkaBroker) {\n    ZkServerPortUtils utils=new ZkServerPortUtils(kafkaBrokerZkQuorum);\n    spoutConfig.zkServers=utils.getZkHosts();\n    spoutConfig.zkPort=utils.getZkPort();\n  }\n else {\n    ZkServerPortUtils utils=new ZkServerPortUtils(config.getString(\"spout.stormKafkaTransactionZkQuorum\"));\n    spoutConfig.zkServers=utils.getZkHosts();\n    spoutConfig.zkPort=utils.getZkPort();\n  }\n  spoutConfig.stateUpdateIntervalMs=config.hasPath(\"spout.stormKafkaStateUpdateIntervalMs\") ? config.getInt(\"spout.stormKafkaStateUpdateIntervalMs\") : 2000;\n  spoutConfig.fetchSizeBytes=config.hasPath(\"spout.stormKafkaFetchSizeBytes\") ? config.getInt(\"spout.stormKafkaFetchSizeBytes\") : 1048586;\n  if (config.hasPath(\"spout.stormKafkaStartOffsetTime\")) {\n    spoutConfig.startOffsetTime=config.getInt(\"spout.stormKafkaStartOffsetTime\");\n  }\n  spoutConfig.scheme=createMultiScheme(conf,topic,schemeClsName);\n  KafkaSpoutWrapper wrapper=new KafkaSpoutWrapper(spoutConfig,kafkaSpoutMetric);\n  SpoutOutputCollectorWrapper collectorWrapper=new SpoutOutputCollectorWrapper(this,collector,topic,spoutSpec,numOfRouterBolts,sds,this.serializer);\n  wrapper.open(conf,context,collectorWrapper);\n  if (LOG.isInfoEnabled()) {\n    LOG.info(\"create and open kafka wrapper: topic {}, scheme class{} \",topic,schemeClsName);\n  }\n  return wrapper;\n}"}
{"ids": "40881", "raw_code": "public Builder addEmail(Email email){\n  emails.add(email);\n  return this;\n}"}
{"ids": "1890", "raw_code": "public static HashProvider best(HashParameters params){\n  return best(params,EnumSet.of(HashSupport.STATEFUL));\n}"}
{"ids": "55383", "raw_code": "public synchronized void loadFromFile(){\n  entries.clear();\n  Path file=Paths.get(fileName);\n  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){\n    String line;\n    do {\n      line=reader.readLine();\n      AddressbookEntry parsedEntry=parseLine(line);\n      if (parsedEntry != null) {\n        entries.put(parsedEntry.getName(),parsedEntry);\n      }\n    }\n while (line != null);\n  }\n catch (  IOException ex) {\n    LOGGER.warning(\"Error reading addressbook: \" + ex.getLocalizedMessage());\n  }\n  LOGGER.info(\"Read \" + entries.size() + \" addressbook entries from \"+ fileName);\n  scanCategories();\n}"}
{"ids": "1928", "raw_code": "public boolean remove(final int position){\n  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);\n  final boolean success=removeTransaction.perform();\n  mTransactions.offer(removeTransaction);\n  return success;\n}"}
{"ids": "85406", "raw_code": "private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){\n  if (types == null || types.isEmpty())   return;\n  List<Map<String,Object>> sats=new ArrayList<>(types.size());\n  for (  Type st : types) {\n    sats.add(typeMap(st,from));\n  }\n  m.put(key,sats);\n}"}
{"ids": "50115", "raw_code": "public static void clearAssertionInformation(){\n  _AssertInfos.clear();\n  _AssertOccured=false;\n}"}
{"ids": "1623", "raw_code": "public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){\n  final Operator indexScan=generateIndexScan(ais,table);\n  final Schema schema=SchemaCache.globalSchema(ais);\n  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();\n  IndexRowType indexType=schema.indexRowType(pkey.getIndex());\n  return generateBranchPlan(table,indexScan,indexType);\n}"}
{"ids": "24793", "raw_code": "public long startstack(){\n  return Long.parseLong(fields[27]);\n}"}
{"ids": "1147", "raw_code": "public boolean match(MimeType other){\n  if (this == other)   return true;\n  if (type != null && other.type != null && !type.equals(other.type))   return false;\n  if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false;\n  return true;\n}"}
{"ids": "36554", "raw_code": "@Override public boolean isArmed(){\n  return other.isArmed();\n}"}
{"ids": "21902", "raw_code": "protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {\n  URI volumeVarrayURI=volume.getVirtualArray();\n  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);\n  s_logger.info(\"Virtual volume varray is {}\",volumeVarrayURI);\n  URI volumeVpoolURI=volume.getVirtualPool();\n  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);\n  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();\n  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null);\n  Map<String,Object> volumeParams=new HashMap<String,Object>();\n  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());\n  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());\n  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());\n  if (operationsWrapper != null) {\n    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {\n      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());\n    }\n    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {\n      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());\n    }\n  }\n  vplexVirtualVolumeDesc.setParameters(volumeParams);\n  descriptors.add(vplexVirtualVolumeDesc);\n  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {\n    Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI);\n    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities));\n  }\n  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);\n  if (haVarrayURI != null) {\n    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);\n    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);\n    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);\n    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {\n      Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI);\n      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities));\n    }\n  }\n  return descriptors;\n}"}
{"ids": "26459", "raw_code": "public static boolean isJavaScriptEnabled(HttpServletRequest request){\n  HttpSession session=request.getSession();\n  Boolean javaScriptEnabled=(Boolean)session.getAttribute(\"javaScriptEnabled\");\n  if (javaScriptEnabled != null) {\n    return javaScriptEnabled.booleanValue();\n  }\n  return false;\n}"}
{"ids": "47034", "raw_code": "public boolean equals(Object obj){\n  if (this == obj)   return true;\n  if (obj instanceof ECFieldFp) {\n    return (p.equals(((ECFieldFp)obj).p));\n  }\n  return false;\n}"}
{"ids": "70329", "raw_code": "public static boolean validSkinSpecFile(String fileName){\n  File file=new File(Configuration.skinsDir(),fileName);\n  if (!file.exists() || !file.isFile()) {\n    return false;\n  }\n  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();\n  try {\n    DocumentBuilder builder=dbf.newDocumentBuilder();\n    Document doc=builder.parse(file);\n    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);\n    if (listOfComponents.getLength() > 0) {\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n catch (  Exception e) {\n    return false;\n  }\n}"}
{"ids": "7826", "raw_code": "@Override public void handleMouseMoved(ChartCanvas canvas,MouseEvent e){\n  if (!canvas.isTooltipEnabled()) {\n    return;\n  }\n  String text=getTooltipText(canvas,e.getX(),e.getY());\n  canvas.setTooltip(text,e.getScreenX(),e.getScreenY());\n}"}
{"ids": "25509", "raw_code": "private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {\n  if (doUmdBuffering) {\n    return false;\n  }\n  File file=new File(filename);\n  if (file.exists()) {\n    RandomAccessFile raf=new RandomAccessFile(file,\"r\");\n    FileChannel roChannel=raf.getChannel();\n    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());\n    emulator.load(\"disc0:/PSP_GAME/SYSDIR/EBOOT.BIN\",readbuffer);\n    raf.close();\n    log.info(\"Using unpacked UMD EBOOT.BIN image\");\n    return true;\n  }\n  return false;\n}"}
{"ids": "21568", "raw_code": "public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){\n  VirtualPool virtualPool=null;\n  StoragePool storagePool=null;\n  Volume volume=null;\n  if (URIUtil.isType(blockObjectURI,Volume.class)) {\n    volume=_dbClient.queryObject(Volume.class,blockObjectURI);\n  }\n else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {\n    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);\n    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());\n  }\n else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {\n    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);\n    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());\n    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());\n  }\n  if (volume != null) {\n    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());\n    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());\n  }\n  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());\n}"}
{"ids": "74689", "raw_code": "public static LatLon rhumbEndPosition(LatLon p,double rhumbAzimuthRadians,double pathLengthRadians){\n  if (p == null) {\n    throw new IllegalArgumentException(\"LatLon Is Null\");\n  }\n  return rhumbEndPosition(p,Angle.fromRadians(rhumbAzimuthRadians),Angle.fromRadians(pathLengthRadians));\n}"}
{"ids": "47822", "raw_code": "public Dimension maximumLayoutSize(Container target){\n  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);\n}"}
{"ids": "2635", "raw_code": "public static String readStream(InputStream in){\n  BufferedReader reader=new BufferedReader(new InputStreamReader(in));\n  StringBuilder sb=new StringBuilder();\n  String line=null;\n  try {\n    while ((line=reader.readLine()) != null) {\n      sb.append(line + \"\\n\");\n    }\n  }\n catch (  IOException e) {\n    FreshAirLog.e(\"Error reading stream\",e);\n  }\n finally {\n    try {\n      in.close();\n    }\n catch (    IOException e) {\n    }\n    try {\n      reader.close();\n    }\n catch (    IOException e) {\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "30955", "raw_code": "private void logExpiration(Entry e){\n  if (e.renewalsDone()) {\n    logger.log(Level.FINE,\"Reached desired expiration for lease {0}\",e.lease);\n  }\n else {\n    logger.log(Levels.FAILED,\"Lease {0} expired before reaching desired expiration\",e.lease);\n  }\n}"}
{"ids": "44043", "raw_code": "void removeRipple(Ripple ripple){\n  final Ripple[] ripples=mExitingRipples;\n  final int count=mExitingRipplesCount;\n  final int index=getRippleIndex(ripple);\n  if (index >= 0) {\n    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));\n    ripples[count - 1]=null;\n    mExitingRipplesCount--;\n    invalidateSelf();\n  }\n}"}
{"ids": "86115", "raw_code": "@Override public void onDrawEye(Eye eye){\n  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\n  Engine.checkGLError(\"mColorParam\");\n  if (!prefOrientationProviderString.equals(\"0\")) {\n    if (firstOnDrawEye > 0) {\n      firstOnDrawEye--;\n      float[] m=new float[16];\n      Matrix.invertM(m,0,mHeadViewSDK,0);\n      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);\n      if (eye.getType() == Eye.Type.RIGHT) {\n        mEyeRightView=m;\n      }\n else       if (eye.getType() == Eye.Type.LEFT) {\n        mEyeLeftView=m;\n      }\n      return;\n    }\n    float[] m=new float[16];\n    if (eye.getType() == Eye.Type.RIGHT) {\n      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);\n    }\n else {\n      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);\n    }\n    Matrix.multiplyMM(mView,0,m,0,mCamera,0);\n  }\n else {\n    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);\n  }\n  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);\n  GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);\n  GLES20.glEnable(GLES20.GL_BLEND);\n  if (prefShowEnv && bgEnv.isReady()) {\n    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);\n    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);\n    bgEnv.draw(eye.getType(),mModelViewProjection);\n  }\n  GLES20.glDisable(GLES20.GL_DEPTH_TEST);\n  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);\n  cameraPreview.draw(eye.getType(),mModelViewProjection);\n  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);\n  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);\n  screen.draw(eye.getType(),mModelViewProjection);\n  for (  ButtonThing button : buttonList) {\n    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);\n    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);\n    button.draw(eye.getType(),mModelViewProjection);\n  }\n  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);\n  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);\n}"}
{"ids": "54108", "raw_code": "protected SourceRecords consumeRecordsByTopic(int numRecords) throws InterruptedException {\n  SourceRecords records=new SourceRecords();\n  consumeRecords(numRecords,null);\n  return records;\n}"}
{"ids": "16569", "raw_code": "@Override public boolean equals(Object o){\n  if (this == o) {\n    return true;\n  }\n  if (!(o instanceof PrototypeSize)) {\n    return false;\n  }\n  PrototypeSize size=(PrototypeSize)o;\n  return prototype.equals(size.prototype);\n}"}
{"ids": "64231", "raw_code": "public static boolean isValidVector(Vector2f vector){\n  if (vector == null) {\n    return false;\n  }\n  if (Float.isNaN(vector.x) || Float.isNaN(vector.y)) {\n    return false;\n  }\n  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "80038", "raw_code": "public boolean isObsessional(){\n  return typeString.contains(SUFFIX_OBSESSIONAL);\n}"}
{"ids": "74203", "raw_code": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=\"FE_FLOATING_POINT_EQUALITY\",justification=\"equality is specifically 'Unchanged' here\") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){\n  if (blk == referenced && speed == desiredSpeedStep) {\n    return;\n  }\n  float blockLength=blk.getLengthMm();\n  if (blk == referenced) {\n    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));\n    blockLength=distanceRemaining;\n    log.debug(\"Block passed is the same as we are currently processing\");\n  }\n else {\n    referenced=blk;\n  }\n  changeLocoSpeed(t,blockLength,speed);\n}"}
{"ids": "47875", "raw_code": "public boolean remove(Object targetChild){\n  return remove(targetChild,true);\n}"}
{"ids": "28959", "raw_code": "private void notifyClassObservers(ClassDescriptor classDescriptor){\n  for (  IClassObserver observer : classObserverList) {\n    observer.observeClass(classDescriptor);\n  }\n}"}
{"ids": "46930", "raw_code": "public void dup2(){\n  mv.visitInsn(Opcodes.DUP2);\n}"}
{"ids": "55959", "raw_code": "public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){\n  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());\n}"}
{"ids": "67770", "raw_code": "protected void throwParseException(ParseException e) throws ParseException {\n  if (locator != null) {\n    String elementLocation=\"\";\n    if (curHandler != null) {\n      elementLocation+=\", element \" + curHandler.qName;\n    }\n    String location=\"[Line \" + String.valueOf(locator.getLineNumber()) + \", Column \"+ String.valueOf(locator.getColumnNumber())+ elementLocation+ \"] \";\n    LogUtils.logException(logger,Level.FINE,location,e);\n    throw new ParseException(location + e.getMessage(),e);\n  }\n else {\n    LogUtils.logException(logger,Level.FINE,null,e);\n    throw e;\n  }\n}"}
{"ids": "38326", "raw_code": "public CustomEditor(){\n  setLayout(new BorderLayout());\n  add(m_Label,BorderLayout.CENTER);\n  m_DeleteBut.addActionListener(m_InnerActionListener);\n  m_EditBut.addActionListener(m_InnerActionListener);\n  m_UpBut.addActionListener(m_InnerActionListener);\n  m_DownBut.addActionListener(m_InnerActionListener);\n  m_AddBut.addActionListener(m_InnerActionListener);\n  m_ElementList.addListSelectionListener(m_InnerSelectionListener);\n  m_ElementList.addMouseListener(m_InnerMouseListener);\n  m_AddBut.setToolTipText(\"Add the current item to the list\");\n  m_DeleteBut.setToolTipText(\"Delete the selected list item\");\n  m_EditBut.setToolTipText(\"Edit the selected list item\");\n  m_UpBut.setToolTipText(\"Move the selected item(s) one up\");\n  m_DownBut.setToolTipText(\"Move the selected item(s) one down\");\n}"}
{"ids": "83888", "raw_code": "public MemoidOne(Function<? super Input,? extends Output> fn,BiPredicate<Input,Input> equality){\n  fn_=Objects.requireNonNull(fn);\n  equality_=Objects.requireNonNull(equality);\n}"}
{"ids": "7166", "raw_code": "public static EPType singleValue(Class singleValueType){\n  if (singleValueType != null && singleValueType.isArray()) {\n    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());\n  }\n  return new ClassEPType(singleValueType);\n}"}
{"ids": "20103", "raw_code": "private static Class<?> convertFieldType(String fieldType){\n  if (fieldTypeMap.containsKey(fieldType)) {\n    return fieldTypeMap.get(fieldType);\n  }\n  return null;\n}"}
{"ids": "15417", "raw_code": "void addXMLElementAfterTokenIndex(int lastTokenIndex,XMLElement element,boolean addAfterNewLine) throws Exception {\n  addXMLElementAfterTokenIndex(lastTokenIndex,element,addAfterNewLine,true);\n}"}
{"ids": "70127", "raw_code": "public void collapseBuilding(Building bldg){\n  buildings.removeElement(bldg);\n  Enumeration<Coords> bldgCoords=bldg.getCoords();\n  while (bldgCoords.hasMoreElements()) {\n    final Coords coords=bldgCoords.nextElement();\n    collapseBuilding(coords);\n  }\n}"}
{"ids": "59953", "raw_code": "@RpcMethod public void detachISO(String vmId,boolean isDeleteFile,AsyncMethodCallback<Host.AsyncClient.detach_iso_call> handler) throws RpcException {\n  ensureClient();\n  DetachISORequest detachISORequest=new DetachISORequest(vmId);\n  detachISORequest.setDelete_file(isDeleteFile);\n  clientProxy.setTimeout(DETACH_ISO_TIMEOUT_MS);\n  logger.info(\"detach_iso vm {}, target {}, request {}\",vmId,getHostIp(),detachISORequest);\n  try {\n    clientProxy.detach_iso(detachISORequest,handler);\n  }\n catch (  TException e) {\n    throw new RpcException(e.getMessage());\n  }\n}"}
{"ids": "59999", "raw_code": "private String readNfcErrorMsg(ByteBuffer reply) throws IOException {\n  int errorType=reply.getInt();\n  int errorCode=reply.getInt();\n  int msgLen=reply.getInt();\n  if (msgLen == 0) {\n    return \"\";\n  }\n  ByteBuffer msgBuffer=ByteBuffer.allocate(msgLen);\n  readFully(msgBuffer);\n  String errorMsg=new String(msgBuffer.array(),0,msgLen - 1,Charsets.US_ASCII);\n  return String.format(\"NFC Error %d/%d: %s\",errorType,errorCode,errorMsg);\n}"}
{"ids": "59828", "raw_code": "private void show(boolean show){\n  if (show) {\n    if (mXFade != null) {\n      mXFade.cancel();\n    }\n    mState=STATE_PIE;\n    mCurrentItem=null;\n    PieItem root=getRoot();\n    for (    PieItem openItem : mOpen) {\n      if (openItem.hasItems()) {\n        for (        PieItem item : openItem.getItems()) {\n          item.setSelected(false);\n        }\n      }\n    }\n    mLabel.setText(\"\");\n    mOpen.clear();\n    mOpen.add(root);\n    layoutPie();\n    fadeIn();\n  }\n else {\n    mState=STATE_IDLE;\n    mTapMode=false;\n    if (mXFade != null) {\n      mXFade.cancel();\n    }\n    if (mLabel != null) {\n      mLabel.setText(\"\");\n    }\n  }\n  setVisible(show);\n  mHandler.sendEmptyMessage(show ? MSG_OPEN : MSG_CLOSE);\n}"}
{"ids": "21927", "raw_code": "private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){\n  modifiedProvider.setLastModified(System.currentTimeMillis());\n  if (newObject) {\n    _dbClient.createObject(modifiedProvider);\n  }\n else {\n    _dbClient.persistObject(modifiedProvider);\n  }\n  notifyChange();\n}"}
{"ids": "73316", "raw_code": "public void addUndoableAction(UndoableAction action){\n  undoStack.push(action);\n  redoStack.removeAllElements();\n}"}
{"ids": "10183", "raw_code": "public IntArrayList(int[] data){\n  array=new int[(int)(data.length * 1.1) + 1];\n  size=data.length;\n  System.arraycopy(data,0,array,0,size);\n}"}
{"ids": "40227", "raw_code": "private void addPingTimeData(long sample){\n  lastPingTimesLock.lock();\n  try {\n    if (lastPingTimes == null) {\n      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];\n      Arrays.fill(lastPingTimes,sample);\n    }\n else {\n      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);\n      lastPingTimes[lastPingTimes.length - 1]=sample;\n    }\n  }\n  finally {\n    lastPingTimesLock.unlock();\n  }\n}"}
{"ids": "87062", "raw_code": "public StringBuilder encodeBody(StringBuilder buffer){\n  return buffer.append(contentEncoding);\n}"}
{"ids": "44936", "raw_code": "public String substring(String subject,int start,int stop){\n  if (stop == -1 || stop >= subject.length()) {\n    return subject.substring(start);\n  }\n  return subject.substring(start,stop);\n}"}
{"ids": "74143", "raw_code": "public boolean controlRunTrain(int idx){\n  if (log.isDebugEnabled()) {\n    log.debug(\"controlRunTrain= \" + idx + \" runMode= \"+ _runMode+ \" - warrant= \"+ getDisplayName());\n  }\n  boolean ret=true;\n  int oldIndex=-MODE_MANUAL;\n  if (_engineer == null) {\nswitch (idx) {\ncase HALT:\ncase RESUME:\ncase RETRY:\n      ret=false;\n    break;\ncase ABORT:\n  if (_runMode == Warrant.MODE_LEARN) {\n    firePropertyChange(\"abortLearn\",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));\n  }\n else {\n    stopWarrant(true);\n  }\nbreak;\n}\n}\n else {\nsynchronized (_engineer) {\noldIndex=_engineer.getRunState();\nswitch (idx) {\ncase HALT:\n_engineer.setHalt(true);\nbreak;\ncase RESUME:\n_engineer.setHalt(false);\nrestart();\nret=moveIntoNextBlock(MID);\nbreak;\ncase RETRY:\nBlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);\nret=false;\nif (bo != null) {\nOBlock b=bo.getBlock();\nif (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {\n_idxCurrentOrder++;\nif (b.equals(_stoppingBlock)) {\n_stoppingBlock.removePropertyChangeListener(this);\n_stoppingBlock=null;\n}\nbo.setPath(this);\nrestart();\ngoingActive(b);\nret=true;\n}\n}\nbreak;\ncase ABORT:\nstopWarrant(true);\nbreak;\n}\n}\n}\nif (ret) {\nfirePropertyChange(\"controlChange\",Integer.valueOf(oldIndex),Integer.valueOf(idx));\n}\nreturn ret;\n}"}
{"ids": "81026", "raw_code": "public void removeCustomSashFormListener(ICustomSashFormListener listener){\n  if (customSashFormListeners != null) {\n    customSashFormListeners.remove(listener);\n  }\n}"}
{"ids": "86743", "raw_code": "@Override public void close() throws IOException {\n  if (mBufferCount > 0) {\n    try {\n      mQueue.write(mBuffer,0,mBufferCount);\n    }\n catch (    InterruptedException e) {\n      throw new IOException(\"GzipAsynchOutputStream interrupted during write/3\");\n    }\n    mBufferCount=0;\n  }\n  mQueue.close();\n  try {\n    mThread.join();\n  }\n catch (  InterruptedException e) {\n    throw new IOException(\"AsynchOutputStream interrupted during close\");\n  }\n finally {\n    super.close();\n  }\n  checkException();\n}"}
{"ids": "64675", "raw_code": "public static int parseStringAsInt(String in) throws IndexParseFieldException {\n  try {\n    return Integer.parseInt(in);\n  }\n catch (  NumberFormatException e) {\n    throw new IndexParseFieldException(in,e);\n  }\n}"}
{"ids": "49366", "raw_code": "public ZoneRulesBuilder addWindow(ZoneOffset standardOffset,LocalDateTime until,TimeDefinition untilDefinition){\n  Objects.requireNonNull(standardOffset,\"standardOffset\");\n  Objects.requireNonNull(until,\"until\");\n  Objects.requireNonNull(untilDefinition,\"untilDefinition\");\n  TZWindow window=new TZWindow(standardOffset,until,untilDefinition);\n  if (windowList.size() > 0) {\n    TZWindow previous=windowList.get(windowList.size() - 1);\n    window.validateWindowOrder(previous);\n  }\n  windowList.add(window);\n  return this;\n}"}
{"ids": "5477", "raw_code": "public Hashtable<IPoint,List<ILineSegment>> intersections(Iterator<ILineSegment> it){\n  Collection<ILineSegment> c=new ArrayList<ILineSegment>();\n  while (it.hasNext()) {\n    c.add(it.next());\n  }\n  return intersections(c.toArray(new ILineSegment[]{}));\n}"}
{"ids": "82051", "raw_code": "public boolean isTTFNativeFont(){\n  return ttf;\n}"}
{"ids": "33273", "raw_code": "private void registerProviders(){\n  final DevMachine devMachine=appContext.getDevMachine();\n  if (devMachine == null) {\n    return;\n  }\n  final Set<Macro> providers=getMacros(devMachine);\n  checkNotNull(providers);\n  if (providers.isEmpty()) {\n    return;\n  }\n  providerRegistry.register(providers);\n}"}
{"ids": "74971", "raw_code": "private static long signFromBit_antiCyclic(final double value){\n  return Double.doubleToRawLongBits(value) >> 62 | 1;\n}"}
{"ids": "59672", "raw_code": "private void analyzeClassFields(String className,int action){\n  try {\n    Class<?> dynamicClass=Class.forName(className);\n    Field[] fields=dynamicClass.getDeclaredFields();\n    for (    Field field : fields) {\n      if (isPrivateAndNonPrimitive(field)) {\n        oneToAnyConditions(className,field,action);\n        manyToAnyConditions(className,field,action);\n      }\n    }\n  }\n catch (  ClassNotFoundException ex) {\n    ex.printStackTrace();\n    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className);\n  }\n}"}
{"ids": "37228", "raw_code": "public static void loadAll(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){\n  checkArguments(parent,debugger,offset);\n  final CDumpAllWaiter waiter=new CDumpAllWaiter(debugger,offset,size);\n  CProgressDialog.showEndless(parent,\"Loading memory\" + \" ...\",waiter);\n  if (waiter.getException() != null) {\n    CUtilityFunctions.logException(waiter.getException());\n    final String innerMessage=\"E00078: \" + \"Could not load memory section\";\n    final String innerDescription=CUtilityFunctions.createDescription(String.format(\"The memory section starting at address '%s' could not loaded.\",offset.toHexString()),new String[]{\"There was a problem with the connection to the debug client.\"},new String[]{\"The memory data was not loaded.\"});\n    NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException());\n  }\n}"}
{"ids": "85658", "raw_code": "public static boolean deleteDirectory(String directory,boolean useOSNativeDelete) throws IOException {\n  boolean result=false;\n  if (!useOSNativeDelete) {\n    File dir=new File(directory);\n    for (    File file : dir.listFiles()) {\n      if (file.delete()) {\n        log.debug(\"{} was deleted\",file.getName());\n      }\n else {\n        log.debug(\"{} was not deleted\",file.getName());\n        file.deleteOnExit();\n      }\n      file=null;\n    }\n    if (dir.delete()) {\n      log.debug(\"Directory was deleted\");\n      result=true;\n    }\n else {\n      log.debug(\"Directory was not deleted, it may be deleted on exit\");\n      dir.deleteOnExit();\n    }\n    dir=null;\n  }\n else {\n    Process p=null;\n    Thread std=null;\n    try {\n      Runtime runTime=Runtime.getRuntime();\n      log.debug(\"Execute runtime\");\n      if (File.separatorChar == '\\\\') {\n        p=runTime.exec(\"CMD /D /C \\\"RMDIR /Q /S \" + directory.replace('/','\\\\') + \"\\\"\");\n      }\n else {\n        p=runTime.exec(\"rm -rf \" + directory.replace('\\\\',File.separatorChar));\n      }\n      std=stdOut(p);\n      while (std.isAlive()) {\n        try {\n          Thread.sleep(250);\n        }\n catch (        Exception e) {\n        }\n      }\n      log.debug(\"Process threads wait exited\");\n      result=true;\n    }\n catch (    Exception e) {\n      log.error(\"Error running delete script\",e);\n    }\n finally {\n      if (null != p) {\n        log.debug(\"Destroying process\");\n        p.destroy();\n        p=null;\n      }\n      std=null;\n    }\n  }\n  return result;\n}"}
{"ids": "74336", "raw_code": "public void writeOperationsCarFile(){\n  makeBackupFile(defaultOperationsFilename());\n  try {\n    if (!checkFile(defaultOperationsFilename())) {\n      java.io.File file=new java.io.File(defaultOperationsFilename());\n      java.io.File parentDir=file.getParentFile();\n      if (!parentDir.exists()) {\n        if (!parentDir.mkdir()) {\n          log.error(\"Directory wasn't created\");\n        }\n      }\n      if (file.createNewFile()) {\n        log.debug(\"File created\");\n      }\n    }\n    writeFile(defaultOperationsFilename());\n  }\n catch (  Exception e) {\n    log.error(\"Exception while writing the new CSV operations file, may not be complete: \" + e);\n  }\n}"}
{"ids": "55237", "raw_code": "private boolean hasNewFollowers(List<Follower> followers){\n  return !followers.isEmpty() && followers.get(0).newFollower;\n}"}
{"ids": "16134", "raw_code": "private void onTrackPointElementStart(Attributes attributes) throws SAXException {\n  String latitude=attributes.getValue(ATT_LAT);\n  String longitude=attributes.getValue(ATT_LON);\n  if (latitude == null || longitude == null) {\n    throw new SAXException(createErrorMessage(\"Point with no longitude or latitude.\"));\n  }\n  try {\n    latitudeValue=Double.parseDouble(latitude);\n    longitudeValue=Double.parseDouble(longitude);\n  }\n catch (  NumberFormatException e) {\n    throw new SAXException(createErrorMessage(\"Unable to parse latitude/longitude: \" + latitude + \"/\"+ longitude),e);\n  }\n}"}
{"ids": "64754", "raw_code": "protected final void firePropertyChange(PropertyChangeEvent evt){\n  pcs.firePropertyChange(evt);\n}"}
{"ids": "37492", "raw_code": "private void drawBackground(final Graphics g){\n  g.setColor(m_bgColorOffset);\n  g.fillRect(-m_firstColumn * m_charWidth,0,m_offsetViewWidth,getHeight());\n}"}
{"ids": "78339", "raw_code": "public void addUniqueAttribute(final String elementName,final String attrName){\n  if ((elementName != null) && (attrName != null)) {\n    _uniqueElementAttrMap.put(elementName,attrName);\n  }\n}"}
{"ids": "59965", "raw_code": "private static DeleteVmResponse checkDeleteVmResponse(DeleteVmResponse deleteVmResponse) throws RpcException {\n  logger.info(\"Checking {}\",deleteVmResponse);\nswitch (deleteVmResponse.getResult()) {\ncase OK:\n    break;\ncase SYSTEM_ERROR:\n  throw new SystemErrorException(deleteVmResponse.getError());\ncase VM_NOT_FOUND:\nthrow new VmNotFoundException(deleteVmResponse.getError());\ncase VM_NOT_POWERED_OFF:\nthrow new VmNotPoweredOffException(deleteVmResponse.getError());\ndefault :\nthrow new RpcException(String.format(\"Unknown response: %s\",deleteVmResponse.getResult()));\n}\nreturn deleteVmResponse;\n}"}
{"ids": "69888", "raw_code": "public BlazeValueFactory valueFactory(){\n  return vf;\n}"}
{"ids": "13929", "raw_code": "public StatefulRefreshToken(JsonValue token) throws InvalidGrantException {\n  super(token);\n  if (!OAUTH_REFRESH_TOKEN.equals(getTokenName())) {\n    throw new InvalidGrantException(\"Token is not an refresh token: \" + getTokenId());\n  }\n}"}
{"ids": "71734", "raw_code": "public void putStyle(String styleId,StyleSelector styleSelector){\n  try {\n    int id=Integer.parseInt(styleId);\n    mMaxStyleId=Math.max(mMaxStyleId,id);\n  }\n catch (  NumberFormatException e) {\n  }\n  mStyles.put(styleId,styleSelector);\n}"}
{"ids": "24242", "raw_code": "private static String extractClientName(String clientId,String host){\n  String hostExcludedId=\"\";\n  if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) {\n    hostExcludedId=clientId.substring(host.length());\n  }\n else {\n    int firstDotIndex=host.indexOf(\".\");\n    if (firstDotIndex != -1) {\n      String hostShortName=host.substring(0,firstDotIndex);\n      hostExcludedId=clientId.substring(hostShortName.length());\n    }\n  }\n  String vmPIDAndKindRegex=\"\\\\(\\\\w+:\\\\w+\\\\)\";\n  String regex=\"(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+\";\n  String name=NOT_AVAILABLE;\n  String temp=hostExcludedId;\n  int openIndex=temp.indexOf(\"(\");\n  if (openIndex != -1) {\n    regex=vmPIDAndKindRegex + regex;\n  }\n  if (temp.matches(regex)) {\n    String[] splitted=temp.split(\":\");\n    name=splitted[splitted.length - 1];\n  }\n  return name;\n}"}
{"ids": "56550", "raw_code": "public static <T>FastFuture<T> fromCompletableFuture(final CompletableFuture<T> cf){\n  final FastFuture<T> f=new FastFuture<>();\n  cf.thenAccept(null);\n  cf.exceptionally(null);\n  return f;\n}"}
{"ids": "79187", "raw_code": "public static boolean isPlaceAction(InventoryAction action){\nswitch (action) {\ncase SWAP_WITH_CURSOR:\ncase PLACE_ONE:\ncase PLACE_ALL:\ncase PLACE_SOME:\n    return true;\n}\nreturn false;\n}"}
{"ids": "81977", "raw_code": "public static byte[] readInputStream(InputStream i) throws IOException {\n  ByteArrayOutputStream b=new ByteArrayOutputStream();\n  copy(i,b);\n  return b.toByteArray();\n}"}
{"ids": "6519", "raw_code": "public void playMedia(boolean showPlayerWindow){\n  String filename=stopAndPrepareFilename();\n  if (filename.length() > 0) {\n    MPlayerMediator mplayerMediator=MPlayerMediator.instance();\n    if (mplayerMediator != null) {\n      mplayerMediator.showPlayerWindow(showPlayerWindow);\n    }\n    mplayer.open(filename,getAdjustedVolume());\n  }\n  notifyState(getState());\n}"}
{"ids": "11947", "raw_code": "public static String toUTF8String(String s){\n  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));\n}"}
{"ids": "32276", "raw_code": "public static int encodeCacheFlags(Collection<GridClientCacheFlag> flagSet){\n  int bits=0;\n  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;\n  return bits;\n}"}
{"ids": "28392", "raw_code": "public void add(DataSource source,boolean visible){\n  add(data.size(),source,visible);\n}"}
{"ids": "62535", "raw_code": "private static synchronized String formatAndParse(SimpleDateFormat formatDate,SimpleDateFormat parseDate,String text){\n  try {\n    Date date=parseDate.parse(text);\n    String result=formatDate.format(date);\n    return result;\n  }\n catch (  ParseException e) {\n    logger.warning(\"Unable to parse:\" + text);\n  }\n  return \"\";\n}"}
{"ids": "39919", "raw_code": "private void throwArrayIndexOutOfBoundsException(int itemIndex){\n  throw new ArrayIndexOutOfBoundsException(\"Your item index can't be 0 or greater than space item size,\" + \" your items size is \" + spaceItems.size() + \", your current index is :\"+ itemIndex);\n}"}
{"ids": "49476", "raw_code": "private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){\n  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {\n    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {\n      return null;\n    }\n    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);\n    if (nextbit == -1) {\n      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {\n        lastPosition=stopBeforeLocus.getPosition();\n        return null;\n      }\n      lastReferenceSequence++;\n      lastPosition=0;\n    }\n else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {\n      lastPosition=nextbit;\n      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);\n    }\n else     if (nextbit >= stopBeforeLocus.getPosition()) {\n      return null;\n    }\n  }\n  return null;\n}"}
{"ids": "7046", "raw_code": "public static void launchEmailIntent(final Activity activity,String addr,String text){\n  Log.i(LOG_TAG,\"Launch email intent from \" + activity.getLocalClassName());\n  Intent emailIntent=new Intent(Intent.ACTION_SEND);\n  emailIntent.putExtra(Intent.EXTRA_EMAIL,new String[]{addr});\n  emailIntent.setType(\"text/plain\");\n  PackageManager emailpackageManager=activity.getPackageManager();\n  List<ResolveInfo> emailresolveInfos=emailpackageManager.queryIntentActivities(emailIntent,0);\n  if (emailresolveInfos.size() > 0) {\n    activity.startActivity(emailIntent);\n  }\n}"}
{"ids": "32761", "raw_code": "public int count(){\n  return n;\n}"}
{"ids": "10982", "raw_code": "public void writeLEChars(String s) throws IOException {\n  int length=s.length();\n  for (int i=0; i < length; i++) {\n    int c=s.charAt(i);\n    out.write(c & 0xFF);\n    out.write((c >>> 8) & 0xFF);\n  }\n  written+=length * 2;\n}"}
{"ids": "83352", "raw_code": "public void writeToFile(String filename){\n  GridUtils.writeSpatialGridTable(this,filename);\n}"}
{"ids": "42574", "raw_code": "public void readConfig(String filename) throws FileNotFoundException {\n  if (filename == null || filename.equals(\"\"))   return;\n  readConfig(new FileReader(filename));\n}"}
{"ids": "80383", "raw_code": "private void applyTradingBonus(Player player){\n  player.incrementTradescore();\n}"}
{"ids": "37232", "raw_code": "private static void createCombinedTrace(final TraceList newTrace,final List<TraceList> traces,final Set<BreakpointAddress> addresses){\n  final Set<BreakpointAddress> visitedAddresses=new LinkedHashSet<BreakpointAddress>();\n  for (  final TraceList trace : traces) {\n    for (    final ITraceEvent event : trace) {\n      final BreakpointAddress address=event.getOffset();\n      if (!addresses.contains(address)) {\n        continue;\n      }\n      if (visitedAddresses.contains(address)) {\n        continue;\n      }\n      visitedAddresses.add(address);\n      newTrace.addEvent(event);\n    }\n  }\n}"}
{"ids": "27588", "raw_code": "public void interruptAll(){\nsynchronized (knownActorTasks) {\n    for (    Future<Void> ft : knownActorTasks) {\n      ft.cancel(true);\n    }\n    threadGuard.interruptAll();\n  }\n}"}
{"ids": "53898", "raw_code": "@SuppressWarnings(\"unchecked\") public void registerDefaultDeviceTypes(){\n  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();\n  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {\n    String key=entry.getKey();\n    String value=entry.getValue();\n    try {\n      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));\n    }\n catch (    ClassNotFoundException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "55057", "raw_code": "private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> dependencyMap,SwcDependencyInfoImpl depInfo){\n  Set<String> removeSet=new HashSet<String>();\n  SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation);\n  Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>();\n  for (  String swcDependLocation : dependencyMap.get(swcLocation)) {\n    for (    String swcDependLocation2 : dependencyMap.get(swcLocation)) {\n      if (swcDependLocation.equals(swcDependLocation2))       continue;\n      Set<String> externalScripts=externalsBySwc.get(swcDependLocation);\n      Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2);\n      if (externalScripts == null) {\n        externalScripts=externalInfo.getExternalScripts(swcDependLocation);\n        externalsBySwc.put(swcDependLocation,externalScripts);\n      }\n      if (externalScripts2 == null) {\n        externalScripts2=externalInfo.getExternalScripts(swcDependLocation2);\n        externalsBySwc.put(swcDependLocation2,externalScripts2);\n      }\n      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {\n        removeSet.add(swcDependLocation);\n        break;\n      }\n    }\n  }\n  Set<String> dependencySet=dependencyMap.get(swcLocation);\n  dependencySet.removeAll(removeSet);\n}"}
{"ids": "14783", "raw_code": "public void delete(SSOToken token,String dn) throws SMSException, SSOException {\n  for (  String entry : subEntries(token,dn,\"*\",0,false,false)) {\n    debug.message(\"SMSLdapObject: deleting sub-entry: {}\",entry);\n    delete(token,getNamingAttribute() + \"=\" + entry+ \",\"+ dn);\n  }\n  for (  String subOrg : searchSubOrgNames(token,dn,\"*\",0,false,false,false)) {\n    debug.message(\"SMSLdapObject: deleting suborganization: {}\",subOrg);\n    delete(token,subOrg);\n  }\n  delete(token.getPrincipal(),dn);\n  objectChanged(dn,DELETE);\n}"}
{"ids": "24525", "raw_code": "private static <T extends AbstractBlockBase<T>>void enqueueSuccessors(T block,PriorityQueue<T> worklist,BitSet visitedBlocks){\n  for (  T successor : block.getSuccessors()) {\n    if (!visitedBlocks.get(successor.getId())) {\n      visitedBlocks.set(successor.getId());\n      worklist.add(successor);\n    }\n  }\n}"}
{"ids": "26075", "raw_code": "public void addRole(String role){\n  if (role != null) {\n    roles.add(role);\n  }\n}"}
{"ids": "37206", "raw_code": "public CModulesCheckBoxPanel(final CModulesTableModel modulesTableModel){\n  super(new BorderLayout());\n  final JCheckBox checkBox=new JCheckBox(\"Show full module paths\");\n  checkBox.addItemListener(new InternalCheckboxListener());\n  add(checkBox);\n  m_modulesTableModel=modulesTableModel;\n}"}
{"ids": "3817", "raw_code": "public QDate(){\n  this(_gmtTimeZone);\n}"}
{"ids": "56358", "raw_code": "protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){\n  int latest=-1;\n  for (  String name : blobs.keySet()) {\n    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {\n      try {\n        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));\n        if (gen > latest) {\n          latest=gen;\n        }\n      }\n catch (      NumberFormatException ex) {\n        logger.warn(\"failed to parse index file name [{}]\",name);\n      }\n    }\n  }\n  if (latest >= 0) {\n    try {\n      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);\n    }\n catch (    IOException e) {\n      logger.warn(\"failed to read index file  [{}]\",e,SNAPSHOT_INDEX_PREFIX + latest);\n    }\n  }\n  List<SnapshotFiles> snapshots=new ArrayList<>();\n  for (  String name : blobs.keySet()) {\n    try {\n      BlobStoreIndexShardSnapshot snapshot=null;\n      if (name.startsWith(SNAPSHOT_PREFIX)) {\n        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);\n      }\n else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {\n        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);\n      }\n      if (snapshot != null) {\n        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));\n      }\n    }\n catch (    IOException e) {\n      logger.warn(\"failed to read commit point [{}]\",e,name);\n    }\n  }\n  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);\n}"}
{"ids": "44667", "raw_code": "protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {\n  this.quest=quest;\n  this.dayByDay=data.readByte() > 0;\n  this.normalAutoStart=data.readByte() > 0;\n  this.lvmin=data.readShort();\n  this.lvmax=data.readShort();\n  this.mbmin=data.readShort();\n  this.charismaMin=data.readShort();\n  this.charmMin=data.readShort();\n  this.craftMin=data.readShort();\n  this.insightMin=data.readShort();\n  this.senseMin=data.readShort();\n  this.willMin=data.readShort();\n  this.pop=data.readShort();\n  this.pettamenessmin=data.readShort();\n  this.subJobFlag=data.readShort();\n  this.npc=data.readInt();\n  this.interval=data.readInt();\n  this.end=data.readString();\n  this.startscript=data.readString();\n  this.endscript=data.readString();\n  short size=data.readShort();\n  for (int i=0; i < size; i++) {\n    int field=data.readInt();\n    fieldEnter.add(field);\n  }\n  size=data.readShort();\n  for (int i=0; i < size; i++) {\n    short job=data.readShort();\n    jobs.add(job);\n  }\n  size=data.readShort();\n  for (int i=0; i < size; i++) {\n    int id=data.readInt();\n    boolean acquire=data.readByte() > 0;\n    skills.put(id,acquire);\n  }\n  size=data.readShort();\n  for (int i=0; i < size; i++) {\n    int id=data.readInt();\n    byte state=data.readByte();\n    byte order=data.readByte();\n    quests.put(id,state);\n  }\n  size=data.readShort();\n  for (int i=0; i < size; i++) {\n    int id=data.readInt();\n    int count=data.readInt();\n    byte order=data.readByte();\n    items.put(id,count);\n  }\n  size=data.readShort();\n  for (int i=0; i < size; i++) {\n    int id=data.readInt();\n    int count=data.readInt();\n    mobs.put(id,count);\n  }\n  size=data.readShort();\n  for (int i=0; i < size; i++) {\n    int id=data.readInt();\n    pets.add(id);\n  }\n}"}
{"ids": "4457", "raw_code": "public boolean isArmed(){\n  return other.isArmed();\n}"}
{"ids": "27141", "raw_code": "public static AttribKey forHtmlAttrib(ElKey el,String localName){\n  return new AttribKey(el,HTML_NS,localName);\n}"}
{"ids": "35746", "raw_code": "SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){\n  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);\n  _baseComponentType=linearArrayType.getComponentType();\n  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);\n  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);\n  _numRows=numRows;\n  _numCols=numCols;\n  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());\n  Collections.sort(keys);\n  _rowIndices=new int[keys.size()];\n  _colIndices=new int[keys.size()];\n  _linearIndices=new int[keys.size()];\n  _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));\n  _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));\n  for (int i=0; i < keys.size(); i++) {\n    SparseKey key=keys.get(i);\n    _rowIndices[i]=key.row;\n    _colIndices[i]=key.col;\n    _linearIndices[i]=key.linearIndex;\n    SparseValue value=sparseMap.get(key);\n    setSparseValue(value,_realValues,_imagValues,i);\n  }\n}"}
{"ids": "73826", "raw_code": "private String idString(int id1,int id2){\n  return \"0x\" + Integer.toHexString(id2 & 0x7F) + \" 0x\"+ Integer.toHexString(id1 & 0x7F)+ \" (\"+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ \")\";\n}"}
{"ids": "22722", "raw_code": "public EtagCache resetStats(){\n  hits.set(0);\n  misses.set(0);\n  return this;\n}"}
{"ids": "69999", "raw_code": "private void showFilterDialog(Filter filter){\n  int sortOrder=mAdapter.getCount() - 1;\n  if (filter == null) {\n    EditFilterActivity.createNewFilter(getActivity(),sortOrder);\n  }\n else {\n    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);\n  }\n}"}
{"ids": "11697", "raw_code": "public static int numPixelsBetween(int x1,int y1,int x2,int y2){\n  return (int)Math.sqrt(Math.pow((double)(x1 - x2),2.0) + Math.pow((double)(y1 - y2),2.0));\n}"}
{"ids": "74910", "raw_code": "static boolean allowsPopup(FormObject formObject){\nswitch (formObject.getParameterConstant(PdfDictionary.Subtype)) {\ncase PdfDictionary.Text:\ncase PdfDictionary.Square:\ncase PdfDictionary.Highlight:\ncase PdfDictionary.Underline:\ncase PdfDictionary.StrickOut:\ncase PdfDictionary.Stamp:\n    return true;\ndefault :\n  return false;\n}\n}"}
{"ids": "84308", "raw_code": "public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException {\n  Git git;\n  File gitDir=new File(\".\");\n  try {\n    git=Git.open(gitDir);\n  }\n catch (  RepositoryNotFoundException rnfe) {\n    String fullPathOfCurrentDir=pathOf(gitDir);\n    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));\n    String summary;\n    List<String> messages=new ArrayList<String>();\n    if (gitRoot == null) {\n      summary=\"Releases can only be performed from Git repositories.\";\n      messages.add(summary);\n      messages.add(fullPathOfCurrentDir + \" is not a Git repository.\");\n    }\n else {\n      summary=\"The release plugin can only be run from the root folder of your Git repository\";\n      messages.add(summary);\n      messages.add(fullPathOfCurrentDir + \" is not the root of a Gir repository\");\n      messages.add(\"Try running the release plugin from \" + pathOf(gitRoot));\n    }\n    throw new ValidationException(summary,messages);\n  }\ncatch (  Exception e) {\n    throw new ValidationException(\"Could not open git repository. Is \" + pathOf(gitDir) + \" a git repository?\",Arrays.asList(\"Exception returned when accessing the git repo:\",e.toString()));\n  }\n  return new LocalGitRepo(git,remoteUrl);\n}"}
{"ids": "2460", "raw_code": "public static Vector2 min(Vector2 o1,Vector2 o2){\n  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));\n}"}
{"ids": "45334", "raw_code": "public void serialize(KXmlSerializer serializer) throws IOException {\n  mDeviceInfo.serialize(serializer);\n  serializeHostInfo(serializer);\n  serializeTestSummary(serializer);\n  monkeyTag.serialize(serializer);\n  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());\n  Collections.sort(pkgs,new PkgComparator());\n  for (  TestPackageResult r : pkgs) {\n    r.serialize(serializer);\n  }\n}"}
{"ids": "22112", "raw_code": "private void verifyBlockMirrorMigration() throws Exception {\n  log.info(\"Verifying BlockMirror migration.\");\n  Iterator<BlockMirror> blockMirrorItr=_dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs);\n  List<BlockObject> blockObjects=new ArrayList<BlockObject>();\n  while (blockMirrorItr.hasNext()) {\n    blockObjects.add(blockMirrorItr.next());\n  }\n  verifyBlockObjects(blockObjects);\n}"}
{"ids": "52362", "raw_code": "public LogFormatter(Logger log){\n  if (log == null)   log=Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n  Level lvl=null;\n  while (log != null) {\n    lvl=log.getLevel();\n    if (lvl != null)     break;\n    log=log.getParent();\n  }\n  ;\n  if (lvl == null)   lvl=Level.WARNING;\n  this.level=lvl;\n}"}
{"ids": "53067", "raw_code": "public void applyCamera(GL2 gl){\n  gl.glMatrixMode(GL2.GL_PROJECTION);\n  gl.glLoadIdentity();\n  glu.gluPerspective(45f,width / (float)height,0.f,10.f);\n  eye[0]=(float)Math.sin(theta) * 2.f;\n  eye[1]=.5f;\n  eye[2]=(float)Math.cos(theta) * 2.f;\n  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);\n  gl.glMatrixMode(GL2.GL_MODELVIEW);\n  gl.glLoadIdentity();\n  gl.glViewport(0,0,width,height);\n}"}
{"ids": "21031", "raw_code": "public void addToExistingVolumesIfAbsent(Map<String,Integer> volumeWWNs){\n  if (_existingVolumes == null) {\n    _existingVolumes=new StringMap();\n  }\n  for (  String wwn : volumeWWNs.keySet()) {\n    String normalizedWWN=BlockObject.normalizeWWN(wwn);\n    if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) {\n      String hluStr=ExportGroup.LUN_UNASSIGNED_STR;\n      Integer hlu=volumeWWNs.get(normalizedWWN);\n      if (hlu != null) {\n        hluStr=hlu.toString();\n      }\n      _existingVolumes.put(normalizedWWN,hluStr);\n    }\n  }\n}"}
{"ids": "3723", "raw_code": "public PathImpl createTempFile(String prefix,String suffix) throws IOException {\n  if (prefix == null || prefix.length() == 0)   prefix=\"t\";\n  if (suffix == null)   suffix=\".tmp\";\nsynchronized (LOCK) {\n    for (int i=0; i < 32768; i++) {\n      int r=Math.abs((int)RandomUtil.getRandomLong());\n      PathImpl file=lookup(prefix + r + suffix);\n      if (file.createNewFile())       return file;\n    }\n  }\n  throw new IOException(\"cannot create temp file\");\n}"}
{"ids": "34982", "raw_code": "static Map<TargetType,List<TypeCompound>> partitionByTargetType(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... targetTypes){\n  final Map<TargetType,List<TypeCompound>> targetTypeToAnnos=new HashMap<>();\n  for (  TargetType targetType : targetTypes) {\n    targetTypeToAnnos.put(targetType,new ArrayList<TypeCompound>(10));\n  }\n  for (  final TypeCompound anno : annos) {\n    final List<TypeCompound> annoSet=targetTypeToAnnos.get(anno.getPosition().type);\n    if (annoSet != null) {\n      annoSet.add(anno);\n    }\n else     if (unmatched != null) {\n      unmatched.add(anno);\n    }\n  }\n  return targetTypeToAnnos;\n}"}
{"ids": "78004", "raw_code": "public void load(){\n  try {\n    if (fileChannel == null) {\n      fileChannel=FileChannel.open(path,StandardOpenOption.READ);\n    }\n    fileChannel.position(0L);\n    buffer.clear();\n    tmp.clear();\n    while (fileChannel.read(tmp) > 0) {\n      tmp.flip();\n      if (tmp.remaining() > buffer.capacity() - buffer.position()) {\n        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));\n        buffer.flip();\n        next.put(buffer);\n        buffer=next;\n      }\n      buffer.put(tmp);\n      tmp.clear();\n    }\n    buffer.flip();\n  }\n catch (  final IOException e) {\n    throw new UncheckedIOException(e);\n  }\n}"}
{"ids": "80148", "raw_code": "private void onHPChange(final int amount){\n  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {\n    if (amount > 0) {\n      addTextIndicator(\"+\" + amount,NotificationType.POSITIVE);\n    }\n else {\n      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);\n    }\n  }\n}"}
{"ids": "50994", "raw_code": "@NotNull private File resolveName(@NotNull String name) throws IOException {\n  File file;\n  if (name.startsWith(ROOT)) {\n    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));\n  }\n else   if (myLastTemplateFolders != null) {\n    file=new File(myLastTemplateFolders.peek(),name);\n  }\n else {\n    file=new File(myTemplateRootFolder,name);\n  }\n  return file.getCanonicalFile();\n}"}
{"ids": "43879", "raw_code": "public static String[] decodeArray(String encodedArray){\n  String[] items=encodedArray.split(\"_\\\\.\");\n  ArrayList<String> list=new ArrayList<String>();\n  for (int i=0; i < items.length; i++) {\n    String item=items[i];\n    item=gsub(\"__\",\"_\",item);\n    if (!item.equals(\"\")) {\n      list.add(item);\n    }\n  }\n  return list.toArray(new String[list.size()]);\n}"}
{"ids": "27593", "raw_code": "private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {\n  assert uuid != null;\n  assert resource != null;\n  assert length >= 0;\n  assert is != null;\n  assert !sentStatus;\n  long bytesWritten=0L;\n  final long begin=System.nanoTime();\n  final OutputStream os=s.getOutputStream();\n  try {\n{\n      final DataOutputStream dos=new DataOutputStream(os);\n      dos.write(new byte[]{StatusEnum.OK.get()});\n      dos.writeLong(length);\n      dos.flush();\n      bytesWritten+=1 + Bytes.SIZEOF_LONG;\n      sentStatus=true;\n    }\n    final long checksum;\n{\n      final int BUFSIZE=Bytes.kilobyte32 * 2;\n      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());\n      final byte[] buff=new byte[BUFSIZE];\n      while (true) {\n        final int read=cis.read(buff,0,BUFSIZE);\n        if (read <= 0)         break;\n        os.write(buff,0,read);\n        bytesWritten+=read;\n      }\n      checksum=cis.getChecksum().getValue();\n    }\n{\n      final DataOutputStream dos=new DataOutputStream(os);\n      dos.writeLong(checksum);\n      bytesWritten+=Bytes.SIZEOF_LONG;\n      dos.flush();\n    }\n    os.flush();\n    if (log.isInfoEnabled())     log.info(\"Sent: uuid=\" + uuid + \", resource=\"+ resource+ \", length=\"+ length+ \", checksum=\"+ checksum+ \", elapsed=\"+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ \"ms\");\n  }\n  finally {\n    try {\n      os.close();\n    }\n catch (    Throwable t) {\n    }\n    counters.bytesWritten.add(bytesWritten);\n    counters.elapsedWriteNanos.add(System.nanoTime() - begin);\nsynchronized (counters.maxWriteSizeLock) {\n      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);\n    }\n  }\n}"}
{"ids": "28666", "raw_code": "public long sigignore(){\n  return Long.parseLong(fields[32]);\n}"}
{"ids": "43940", "raw_code": "public String render(ValueExpr theExpr) throws Exception {\n  theExpr.visit(this);\n  return mBuffer.toString();\n}"}
{"ids": "34482", "raw_code": "public void stopSampling(){\n  if (mSamplingCounter.decrementAndGet() == 0) {\n    mHandler.stopSamplingThread();\n    addFinalSample();\n  }\n}"}
{"ids": "9772", "raw_code": "public DSignCsr(JFrame parent,PKCS10CertificationRequest pkcs10Csr,File csrFile,PrivateKey signPrivateKey,KeyPairType signKeyPairType,X509Certificate verificationCertificate,Provider provider) throws CryptoException {\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  this.pkcs10Csr=pkcs10Csr;\n  this.csrFile=csrFile;\n  this.signPrivateKey=signPrivateKey;\n  this.signKeyPairType=signKeyPairType;\n  this.verificationCertificate=verificationCertificate;\n  this.provider=provider;\n  setTitle(res.getString(\"DSignCsr.Title\"));\n  initComponents();\n}"}
{"ids": "43196", "raw_code": "public static String parseVolumeHostDirectory(String volume){\n  if (StringUtils.isEmpty(volume)) {\n    return volume;\n  }\n  if (!volume.contains(HOST_CONTAINER_DIR_DELIMITER)) {\n    return volume;\n  }\n  String[] hostContainerDir=volume.split(HOST_CONTAINER_DIR_DELIMITER);\n  if (hostContainerDir.length != 2) {\n    throw new IllegalArgumentException(\"Invalid volume directory.\");\n  }\n  String hostDir=hostContainerDir[0];\n  return hostDir;\n}"}
{"ids": "12591", "raw_code": "private String fmtTime(double time){\n  return Utilities.pad(timeFormatter.format(time) + \"s\",10);\n}"}
{"ids": "49514", "raw_code": "public static String right(String s,int width,char fillChar){\n  if (s.length() >= width) {\n    return s;\n  }\n  StringBuffer sb=new StringBuffer(width);\n  for (int i=width - s.length(); --i >= 0; ) {\n    sb.append(fillChar);\n  }\n  sb.append(s);\n  return sb.toString();\n}"}
{"ids": "37283", "raw_code": "private List<Pair<String,Object>> toPairList(final Map<String,Object> bindings){\n  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();\n  for (  final Map.Entry<String,Object> pair : bindings.entrySet()) {\n    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));\n  }\n  return blist;\n}"}
{"ids": "25418", "raw_code": "public void addMessageObserver(final MessageObserver observer){\n  if (observer == null) {\n    throw new NullPointerException();\n  }\n else   if (messageObservers == null) {\n    initMessageObserverList();\n  }\n  messageObservers.add(observer);\n}"}
{"ids": "16262", "raw_code": "public void show(char initialChar){\n  initialString=initialString.append(initialChar);\n  show();\n  if (SWT.getPlatform() != \"carbon\") {\n    setEditText(initialString.toString());\n  }\n}"}
{"ids": "39225", "raw_code": "public static DoubleVector rnorm(int n,double mean,double sd,Random random){\n  if (sd < 0.0)   throw new IllegalArgumentException(\"standard deviation < 0.0\");\n  if (sd == 0.0)   return new DoubleVector(n,mean);\n  DoubleVector v=new DoubleVector(n);\n  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);\n  return v;\n}"}
{"ids": "74834", "raw_code": "private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {\n  while (pointer != -1) {\n    movePointer(pointer);\n    final byte[] raw=objectReader.readObjectData(-1,null);\n    final StringBuilder objectName=new StringBuilder();\n    char current1, last=' ';\n    int matched=0, i1=0;\n    while (i1 < raw.length) {\n      current1=(char)raw[i1];\n      if (current1 == 10 || current1 == 13) {\n        current1=' ';\n      }\n      if (current1 == ' ' && last == ' ') {\n        matched=0;\n      }\n else       if (current1 == pattern.charAt(matched)) {\n        matched++;\n      }\n else {\n        matched=0;\n        objectName.append(current1);\n      }\n      if (matched == 3) {\n        break;\n      }\n      last=current1;\n      i1++;\n    }\n    objectName.append('R');\n    final PdfObject pdfObject=new CompressedObject(objectName.toString());\n    pdfObject.setCompressedStream(true);\n    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);\n    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);\n    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);\n    byte[] xrefs=pdfObject.getDecodedStream();\n    if (xrefs == null) {\n      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);\n    }\n    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);\n    if (Index == null) {\n      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);\n    }\n else {\n      final int count=Index.length;\n      int pntr=0;\n      for (int aa=0; aa < count; aa+=2) {\n        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);\n      }\n    }\n    if (rootObj == null) {\n      rootObj=pdfObject.getDictionary(PdfDictionary.Root);\n      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);\n      if (encryptObj != null) {\n        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);\n        if (IDs != null && this.ID == null) {\n          this.ID=IDs[0];\n        }\n      }\n      infoObject=pdfObject.getDictionary(PdfDictionary.Info);\n    }\n    if (linearObj != null) {\n      pointer=-1;\n    }\n else {\n      pointer=pdfObject.getInt(PdfDictionary.Prev);\n      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {\n        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);\n      }\n    }\n  }\n  return rootObj;\n}"}
{"ids": "72706", "raw_code": "public boolean isKnownSub(String subName){\n  return KNOWN_SUBS.contains(subName);\n}"}
{"ids": "36943", "raw_code": "public boolean isStored(){\n  return Integer.signum(id) != -1;\n}"}
{"ids": "73930", "raw_code": "public boolean isSearchLightBit(int bit){\n  if (nodeType != SMINI) {\n    log.error(\"Invalid query of Searchlights bits - not SMINI node\");\n    return (false);\n  }\n  if ((bit < 0) || (bit > 47)) {\n    log.error(\"Invalid bit number in query of SMINI Searchlights bits: \" + Integer.toString(bit));\n    return (false);\n  }\n  if (locSearchLightBits[bit] == 1) {\n    return (true);\n  }\n  return (false);\n}"}
{"ids": "20900", "raw_code": "public void put(String sample,HiddenAttribute attribute,Object value){\n  put(sample,attribute.toString(),value);\n}"}
{"ids": "35925", "raw_code": "void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {\n  m_msgRcvCounter.addAndGet(msgs.size());\n  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {\n    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {\n      m_totalMsgsDropped.increment();\n      return;\n    }\n  }\n  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());\n  for (int i=0, t=msgs.size(); i < t; i++) {\n    JetstreamMessage tm=msgs.get(i);\n    if (tm.getTopic() == null) {\n      m_totalMsgsDropped.increment();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Topic is not present in incoming message\");\n      }\n      continue;\n    }\n    MessageServiceRequest msr=new MessageServiceRequest(tm);\n    msr.setPriority(tm.getPriority());\n    msr.setSequenceid(tm.getSequenceId());\n    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {\n      if (!m_internalMsgProcessor.processRequest(msr)) {\n        m_totalMsgsDropped.increment();\n        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,\"Dispatch Queue Full\");\n      }\n      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);\n      m_totalMsgsRcvd.increment();\n    }\n else {\n      requests.add(msr);\n    }\n  }\n  if (!requests.isEmpty()) {\n    int batchsize=requests.size();\n    if (!m_msgProcessor.processBatch(requests)) {\n      m_totalMsgsDropped.addAndGet(batchsize);\n      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,\"High Priority Dispatch Queue Full - \" + \" Requested capacity = \" + batchsize + \" : available capacity = \"+ m_msgProcessor.getAvailableCapacity());\n    }\n    m_avgMsgsRcvdPerSec.add(batchsize);\n    m_totalMsgsRcvd.addAndGet(batchsize);\n  }\n  if (stats != null) {\n    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());\n    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());\n    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());\n  }\n}"}
{"ids": "46729", "raw_code": "public boolean unsetOrdering(Object first,Object second){\n  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);\n  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);\n  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);\n}"}
{"ids": "41709", "raw_code": "public String convertSWFToHTML(InputStream in) throws Exception {\n  StringWriter out1=new StringWriter();\n  output=new PrintWriter(out1);\n  TagParser parser=new TagParser(this);\n  SWFReader reader=new SWFReader(parser,in);\n  reader.readFile();\n  in.close();\n  sizeCount=reader.size;\n  final String ret=\"<html>\" + (headerstr.isEmpty() ? \"<body>\" : \"<header>\" + headerstr + \"</header><body>\") + out1.toString()+ \"</body></html>\";\n  return ret;\n}"}
{"ids": "11433", "raw_code": "public Shape greatCircleLineShape(){\n  GeneralPath path=null;\n  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {\n    double y1=llpts[0];\n    double x1=llpts[1];\n    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);\n    boolean firstCoords=true;\n    for (int i=2; i < llpts.length; i+=2) {\n      double y2=llpts[i];\n      double x2=llpts[i + 1];\n      double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2);\n      int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg);\n      if (nsegs == 0) {\n        nsegs=1;\n      }\n      double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false);\n      if (returnDegrees) {\n        ProjMath.arrayRadToDeg(coords);\n      }\n      for (int j=0; j <= coords.length - 1; j+=2) {\n        if (firstCoords) {\n          path.moveTo(coords[j + 1],coords[j]);\n          firstCoords=false;\n        }\n else {\n          path.lineTo(coords[j + 1],coords[j]);\n        }\n      }\n      x1=x2;\n      y1=y2;\n    }\n    if (returnDegrees) {\n      path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));\n    }\n else {\n      path.lineTo(x1,y1);\n    }\n  }\n  return path;\n}"}
{"ids": "25364", "raw_code": "public Connection(final InetSocketAddress peerAddress){\n  this(peerAddress,(Handshaker)null);\n}"}
{"ids": "73747", "raw_code": "protected synchronized void notifyVersion(SprogVersion v){\n  ver=v;\n  for (  SprogVersionListener listener : getCopyOfListeners()) {\n    try {\n      listener.notifyVersion(ver);\n      versionListeners.remove(listener);\n    }\n catch (    Exception e) {\n      log.warn(\"notify: During dispatch to \" + listener + \"\\nException \"+ e);\n    }\n  }\n}"}
{"ids": "47697", "raw_code": "protected void acceptDrop(int dropOperation){\n  DropTargetContextPeer peer=getDropTargetContextPeer();\n  if (peer != null) {\n    peer.acceptDrop(dropOperation);\n  }\n}"}
{"ids": "38989", "raw_code": "public void splitNode(KDTreeNode node,int numNodesCreated,double[][] nodeRanges,double[][] universe) throws Exception {\n  correctlyInitialized();\n  if (node.m_NodesRectBounds == null) {\n    node.m_NodesRectBounds=new double[2][node.m_NodeRanges.length];\n    for (int i=0; i < node.m_NodeRanges.length; i++) {\n      node.m_NodesRectBounds[MIN][i]=node.m_NodeRanges[i][MIN];\n      node.m_NodesRectBounds[MAX][i]=node.m_NodeRanges[i][MAX];\n    }\n  }\n  double maxRectWidth=Double.NEGATIVE_INFINITY, maxPtWidth=Double.NEGATIVE_INFINITY, tempval;\n  int splitDim=-1, classIdx=m_Instances.classIndex();\n  for (int i=0; i < node.m_NodesRectBounds[0].length; i++) {\n    if (i == classIdx)     continue;\n    tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i];\n    if (m_NormalizeNodeWidth) {\n      tempval=tempval / universe[i][WIDTH];\n    }\n    if (tempval > maxRectWidth && node.m_NodeRanges[i][WIDTH] > 0.0)     maxRectWidth=tempval;\n  }\n  for (int i=0; i < node.m_NodesRectBounds[0].length; i++) {\n    if (i == classIdx)     continue;\n    tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i];\n    if (m_NormalizeNodeWidth) {\n      tempval=tempval / universe[i][WIDTH];\n    }\n    if (tempval >= maxRectWidth * (1 - ERR) && node.m_NodeRanges[i][WIDTH] > 0.0) {\n      if (node.m_NodeRanges[i][WIDTH] > maxPtWidth) {\n        maxPtWidth=node.m_NodeRanges[i][WIDTH];\n        if (m_NormalizeNodeWidth)         maxPtWidth=maxPtWidth / universe[i][WIDTH];\n        splitDim=i;\n      }\n    }\n  }\n  double splitVal=node.m_NodesRectBounds[MIN][splitDim] + (node.m_NodesRectBounds[MAX][splitDim] - node.m_NodesRectBounds[MIN][splitDim]) * 0.5;\n  if (splitVal < node.m_NodeRanges[splitDim][MIN])   splitVal=node.m_NodeRanges[splitDim][MIN];\n else   if (splitVal >= node.m_NodeRanges[splitDim][MAX])   splitVal=node.m_NodeRanges[splitDim][MAX] - node.m_NodeRanges[splitDim][WIDTH] * 0.001;\n  int rightStart=rearrangePoints(m_InstList,node.m_Start,node.m_End,splitDim,splitVal);\n  if (rightStart == node.m_Start || rightStart > node.m_End) {\n    if (rightStart == node.m_Start)     throw new Exception(\"Left child is empty in node \" + node.m_NodeNumber + \". Not possible with \"+ \"SlidingMidPointofWidestSide splitting method. Please \"+ \"check code.\");\n else     throw new Exception(\"Right child is empty in node \" + node.m_NodeNumber + \". Not possible with \"+ \"SlidingMidPointofWidestSide splitting method. Please \"+ \"check code.\");\n  }\n  node.m_SplitDim=splitDim;\n  node.m_SplitValue=splitVal;\n  double[][] widths=new double[2][node.m_NodesRectBounds[0].length];\n  System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length);\n  System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length);\n  widths[MAX][splitDim]=splitVal;\n  node.m_Left=new KDTreeNode(numNodesCreated + 1,node.m_Start,rightStart - 1,m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,rightStart - 1),widths);\n  widths=new double[2][node.m_NodesRectBounds[0].length];\n  System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length);\n  System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length);\n  widths[MIN][splitDim]=splitVal;\n  node.m_Right=new KDTreeNode(numNodesCreated + 2,rightStart,node.m_End,m_EuclideanDistance.initializeRanges(m_InstList,rightStart,node.m_End),widths);\n}"}
{"ids": "86244", "raw_code": "public Date modifiedDate(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {\nsynchronized (lock) {\n    if (!connected) {\n      throw new IllegalStateException(\"Client not connected\");\n    }\n    if (!authenticated) {\n      throw new IllegalStateException(\"Client not authenticated\");\n    }\n    communication.sendFTPCommand(\"MDTM \" + path);\n    FTPReply r=communication.readFTPReply();\n    touchAutoNoopTimer();\n    if (!r.isSuccessCode()) {\n      throw new FTPException(r);\n    }\n    String[] messages=r.getMessages();\n    if (messages.length != 1) {\n      throw new FTPIllegalReplyException();\n    }\n else {\n      try {\n        return MDTM_DATE_FORMAT.parse(messages[0]);\n      }\n catch (      ParseException e) {\n        throw new FTPIllegalReplyException();\n      }\n    }\n  }\n}"}
{"ids": "35063", "raw_code": "public ControlFlowGraph run(CompilationUnitTree root,ProcessingEnvironment env,MethodTree tree,ClassTree classTree){\n  UnderlyingAST underlyingAST=new CFGMethod(tree,classTree);\n  return run(root,env,underlyingAST);\n}"}
{"ids": "70147", "raw_code": "private boolean isValidEngine(){\n  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {\n    problem.append(\"Flags:\" + engineFlags);\n    return false;\n  }\n  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {\n    problem.append(\"Invalid Engine type for support vehicle engines!\");\n    return false;\n  }\n  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {\n    problem.append(\"Rating:\" + engineRating);\n    return false;\n  }\n  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {\n    engineFlags|=LARGE_ENGINE;\n  }\nswitch (engineType) {\ncase COMBUSTION_ENGINE:\ncase NORMAL_ENGINE:\ncase XL_ENGINE:\ncase XXL_ENGINE:\ncase FUEL_CELL:\ncase NONE:\ncase MAGLEV:\ncase BATTERY:\ncase SOLAR:\n    break;\ncase COMPACT_ENGINE:\n  if (hasFlag(LARGE_ENGINE)) {\n    problem.append(Messages.getString(\"Engine.invalidCompactLarge\"));\n    return false;\n  }\nbreak;\ncase LIGHT_ENGINE:\ncase FISSION:\nif (hasFlag(CLAN_ENGINE)) {\nproblem.append(Messages.getString(\"Engine.invalidSphereOnly\"));\nreturn false;\n}\nbreak;\ndefault :\nproblem.append(\"Type:\" + engineType);\nreturn false;\n}\nreturn true;\n}"}
{"ids": "64817", "raw_code": "private void calculateD(double[] b){\n  int length=mExtremalIndices.size() - 1;\n  mD=new double[length];\n  for (int k=0; k < length; k++) {\n    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);\n  }\n}"}
{"ids": "79837", "raw_code": "public static byte[] base64decode(String coded){\n  if (null == coded)   return null;\n  byte[] src=coded.getBytes();\n  int len=src.length;\n  int dlen=len - (len / 77);\n  dlen=(dlen >>> 2) + (dlen >>> 1);\n  int rem=0;\n  if (61 == src[len - 1])   rem++;\n  if (61 == src[len - 2])   rem++;\n  dlen-=rem;\n  byte[] dst=new byte[dlen];\n  int pos=0;\n  int dpos=0;\n  int col=0;\n  len-=4;\n  while (pos < len) {\n    byte b0=_base64de[src[pos++]];\n    byte b1=_base64de[src[pos++]];\n    byte b2=_base64de[src[pos++]];\n    byte b3=_base64de[src[pos++]];\n    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(\"Invalid character at or around position \" + pos);\n    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));\n    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));\n    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));\n    col+=4;\n    if (76 == col) {\n      if (10 != src[pos++])       throw new RuntimeException(\"No linefeed found at position \" + (pos - 1));\n      col=0;\n    }\n  }\n  byte b0=_base64de[src[pos++]];\n  byte b1=_base64de[src[pos++]];\n  byte b2=_base64de[src[pos++]];\n  byte b3=_base64de[src[pos++]];\n  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(\"Invalid character at or around position \" + pos);\n  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));\n  if (2 == rem)   return dst;\n  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));\n  if (1 == rem)   return dst;\n  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));\n  return dst;\n}"}
{"ids": "70014", "raw_code": "private static Properties loadProperties(String propertiesFile){\n  Properties properties=new Properties();\n  try (InputStream is=new FileInputStream(propertiesFile)){\n    properties.load(is);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"failed to load properties\",e);\n  }\n  return properties;\n}"}
{"ids": "22182", "raw_code": "public Map<String,Map<String,String>> list(String serviceName){\n  Map<String,Map<String,String>> results=new HashMap<String,Map<String,String>>();\n  ServiceInfo[] infos=jmdns.list(\"_\" + serviceName + \"._tcp.local.\");\n  for (  ServiceInfo info : infos) {\n    _log.info(\"ServiceInfo:{}\",info);\n    final String[] hostAddrs=info.getHostAddresses();\n    final StringBuffer buf=new StringBuffer();\n    for (    String hostAddr : hostAddrs) {\n      buf.append(hostAddr);\n      buf.append(';');\n    }\n    final String key=buf.toString();\n    _log.info(\"\\tkey:{}\",key);\n    final Map<String,String> values=new HashMap<String,String>();\n    for (Enumeration<String> e=info.getPropertyNames(); e.hasMoreElements(); ) {\n      final String prop=e.nextElement();\n      final String value=new String(info.getPropertyBytes(prop));\n      _log.info(\"\\tprop:{}, value:{}\",prop,value);\n      values.put(prop,value);\n    }\n    if (values.isEmpty()) {\n      _log.warn(\"values are empty for key: {}\",key);\n    }\n    results.put(key,values.isEmpty() ? null : values);\n  }\n  return results;\n}"}
{"ids": "56590", "raw_code": "@SuppressWarnings({\"unchecked\"}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){\n  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));\n}"}
{"ids": "47802", "raw_code": "private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){\nswitch (newAlign) {\ncase LEFT:\n    x+=ltr ? 0 : width;\n  break;\ncase CENTER:\nx+=width / 2;\nbreak;\ncase RIGHT:\nx+=ltr ? width : 0;\nbreak;\ncase LEADING:\nbreak;\ncase TRAILING:\nx+=width;\nbreak;\n}\nint maxAscent=0;\nint nonbaselineHeight=0;\nint baselineOffset=0;\nif (useBaseline) {\nint maxDescent=0;\nfor (int i=rowStart; i < rowEnd; i++) {\nComponent m=target.getComponent(i);\nif (m.visible) {\nif (ascent[i] >= 0) {\nmaxAscent=Math.max(maxAscent,ascent[i]);\nmaxDescent=Math.max(maxDescent,descent[i]);\n}\n else {\nnonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);\n}\n}\n}\nheight=Math.max(maxAscent + maxDescent,nonbaselineHeight);\nbaselineOffset=(height - maxAscent - maxDescent) / 2;\n}\nfor (int i=rowStart; i < rowEnd; i++) {\nComponent m=target.getComponent(i);\nif (m.isVisible()) {\nint cy;\nif (useBaseline && ascent[i] >= 0) {\ncy=y + baselineOffset + maxAscent - ascent[i];\n}\n else {\ncy=y + (height - m.height) / 2;\n}\nif (ltr) {\nm.setLocation(x,cy);\n}\n else {\nm.setLocation(target.width - x - m.width,cy);\n}\nx+=m.width + hgap;\n}\n}\nreturn height;\n}"}
{"ids": "7806", "raw_code": "public double adjustedPow10(double val){\n  boolean negFlag=(val < 0.0);\n  if (negFlag) {\n    val=-val;\n  }\n  double res;\n  if (val < 1.0) {\n    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;\n  }\n else {\n    res=Math.pow(10,val);\n  }\n  return negFlag ? (-res) : res;\n}"}
{"ids": "6004", "raw_code": "public static void proxyPort(final int port){\n  final String portValue=Integer.toString(port);\n  setProperty(\"http.proxyPort\",portValue);\n  setProperty(\"https.proxyPort\",portValue);\n}"}
{"ids": "21018", "raw_code": "public static String fetchClusterName(String clusterCgName){\n  String clusterName=null;\n  if (clusterCgName != null && !clusterCgName.isEmpty()) {\n    String[] tmp=clusterCgName.split(SPLITTER);\n    clusterName=tmp[0];\n  }\n  return clusterName;\n}"}
{"ids": "9779", "raw_code": "public DViewAsymmetricKeyFields(JDialog parent,String title,RSAPublicKey rsaPublicKey){\n  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);\n  key=rsaPublicKey;\n  initFields();\n}"}
{"ids": "20293", "raw_code": "public static boolean isAttribute(Object objValue){\n  if (objValue instanceof String) {\n    String stringValue=(String)objValue;\n    if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "27366", "raw_code": "public static String decodeASCII(final byte[] key,final int off,final int len){\n  final byte[] b=new byte[len];\n  System.arraycopy(key,off,b,0,len);\n  for (int i=0; i < len; i++) {\n    b[i]=decodeByte(b[i]);\n  }\n  try {\n    return new String(b,\"US-ASCII\");\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "36604", "raw_code": "@Override public void valueChanged(TreeSelectionEvent e){\n  if (preventEvent) {\n    return;\n  }\n  if (mainFrame != null) {\n    List<Operator> selectedOperators=getSelectedOperators();\n    if (selectedOperators != null && !selectedOperators.isEmpty()) {\n      mainFrame.selectOperators(selectedOperators);\n    }\n  }\n}"}
{"ids": "22677", "raw_code": "public synchronized void removePropertyChangeListener(PropertyChangeListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "4494", "raw_code": "private static Intent createShareIntent(Context context,final String shareText){\n  final Intent shareIntent=new Intent(Intent.ACTION_SEND);\n  shareIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,context.getString(R.string.share_subject));\n  shareIntent.putExtra(android.content.Intent.EXTRA_TEXT,shareText);\n  shareIntent.setType(\"text/plain\");\n  return shareIntent;\n}"}
{"ids": "30642", "raw_code": "public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){\n  if (UnsafeHolder.isAvailable()) {\n    return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName);\n  }\n  return AtomicIntegerFieldUpdater.newUpdater(tclass,fieldName);\n}"}
{"ids": "72527", "raw_code": "private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {\n  final int n=sequence[k];\n  final double subStep=step / n;\n  final double subStep2=2 * subStep;\n  double t=t0 + subStep;\n  for (int i=0; i < y0.length; ++i) {\n    yEnd[i]=y0[i] + subStep * f[0][i];\n  }\n  f[1]=computeDerivatives(t,yEnd);\n  final double[] yTmp=y0.clone();\n  for (int j=1; j < n; ++j) {\n    if (2 * j == n) {\n      System.arraycopy(yEnd,0,yMiddle,0,y0.length);\n    }\n    t+=subStep;\n    for (int i=0; i < y0.length; ++i) {\n      final double middle=yEnd[i];\n      yEnd[i]=yTmp[i] + subStep2 * f[j][i];\n      yTmp[i]=middle;\n    }\n    f[j + 1]=computeDerivatives(t,yEnd);\n    if (performTest && (j <= maxChecks) && (k < maxIter)) {\n      double initialNorm=0.0;\n      for (int l=0; l < scale.length; ++l) {\n        final double ratio=f[0][l] / scale[l];\n        initialNorm+=ratio * ratio;\n      }\n      double deltaNorm=0.0;\n      for (int l=0; l < scale.length; ++l) {\n        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];\n        deltaNorm+=ratio * ratio;\n      }\n      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {\n        return false;\n      }\n    }\n  }\n  for (int i=0; i < y0.length; ++i) {\n    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);\n  }\n  return true;\n}"}
{"ids": "7165", "raw_code": "public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){\n  Object numRows;\n  Object offset;\n  if (ctx.o != null) {\n    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);\n    offset=parseNumOrVariableIdent(ctx.n2,ctx.i2);\n  }\n else   if (ctx.c != null) {\n    offset=parseNumOrVariableIdent(ctx.n1,ctx.i1);\n    numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2);\n  }\n else {\n    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);\n    offset=null;\n  }\n  Integer numRowsInt=null;\n  String numRowsVariable=null;\n  if (numRows instanceof String) {\n    numRowsVariable=(String)numRows;\n  }\n else {\n    numRowsInt=(Integer)numRows;\n  }\n  Integer offsetInt=null;\n  String offsetVariable=null;\n  if (offset instanceof String) {\n    offsetVariable=(String)offset;\n  }\n else {\n    offsetInt=(Integer)offset;\n  }\n  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);\n}"}
{"ids": "4945", "raw_code": "public final int first_common_layer(BrdItem p_other){\n  int max_first_layer=Math.max(first_layer(),p_other.first_layer());\n  int min_last_layer=Math.min(last_layer(),p_other.last_layer());\n  if (max_first_layer > min_last_layer) {\n    return -1;\n  }\n  return max_first_layer;\n}"}
{"ids": "62169", "raw_code": "public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){\n  if (getMaxKilobits(drive) == -1)   return null;\n  int stored=getAmountStored(drive,stack);\n  int amountGiven=Math.min(amountWanted,stored);\n  if (amountGiven > 0) {\n    setAmountStored(drive,stack,stored - amountGiven);\n    stack.stackSize+=amountGiven;\n    markDirty(drive);\n  }\n  return stack;\n}"}
{"ids": "33089", "raw_code": "public void saveIndexes(){\n  ArrayList toSave=new ArrayList();\nsynchronized (this) {\n    Object[] valueTable=this.indexes.valueTable;\n    for (int i=0, l=valueTable.length; i < l; i++) {\n      Index index=(Index)valueTable[i];\n      if (index != null)       toSave.add(index);\n    }\n  }\n  boolean allSaved=true;\n  for (int i=0, length=toSave.size(); i < length; i++) {\n    Index index=(Index)toSave.get(i);\n    ReadWriteMonitor monitor=index.monitor;\n    if (monitor == null)     continue;\n    try {\n      monitor.enterRead();\n      if (index.hasChanged()) {\n        if (monitor.exitReadEnterWrite()) {\n          try {\n            saveIndex(index);\n          }\n catch (          IOException e) {\n            if (JobManager.VERBOSE) {\n              Util.verbose(\"-> got the following exception while saving:\",System.err);\n              e.printStackTrace();\n            }\n            allSaved=false;\n          }\n finally {\n            monitor.exitWriteEnterRead();\n          }\n        }\n else {\n          allSaved=false;\n        }\n      }\n    }\n  finally {\n      monitor.exitRead();\n    }\n  }\n  if (this.participantsContainers != null && this.participantUpdated) {\n    writeParticipantsIndexNamesFile();\n    this.participantUpdated=false;\n  }\n  this.needToSave=!allSaved;\n}"}
{"ids": "70066", "raw_code": "public void addItem(Artist artist,int position){\n  if (artist == null)   throw new NullPointerException(\"The item cannot be null\");\n  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(\"The position must be between 0 and lastIndex + 1\");\n  artists.add(position,artist);\n  notifyItemInserted(position);\n}"}
{"ids": "36040", "raw_code": "public void expandAndSelectIfExists(RepositoryLocation location){\n  if (location.parent() != null) {\n    expandIfExists(location.parent(),location.getName());\n  }\n else {\n    expandIfExists(location,null);\n  }\n  scrollPathToVisible(getSelectionPath());\n}"}
{"ids": "23236", "raw_code": "public static void saveProvisioningValidity(Context context,long validity){\n  if (validity <= 0L) {\n    return;\n  }\n  long next=System.currentTimeMillis() + validity;\n  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);\n  SharedPreferences.Editor editor=preferences.edit();\n  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);\n  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);\n  editor.commit();\n}"}
{"ids": "22530", "raw_code": "public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){\n  LOG.info(\"Unexporting volumes from initiators\");\n  DriverTask task=new DellSCDriverTask(\"unexportVolumes\");\n  ScServer server=null;\n  StringBuilder errBuffer=new StringBuilder();\n  int volumesUnmapped=0;\n  for (  StorageVolume volume : volumes) {\n    String ssn=volume.getStorageSystemId();\n    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),\".\") == 2;\n    try {\n      StorageCenterAPI api=connectionManager.getConnection(ssn);\n      ScVolume scVol=null;\n      if (isSnapshot) {\n        scVol=api.findReplayView(volume.getNativeId());\n        if (scVol != null) {\n          api.deleteVolume(scVol.instanceId);\n          volumesUnmapped++;\n          continue;\n        }\n      }\n else {\n        scVol=api.getVolume(volume.getNativeId());\n      }\n      if (scVol == null) {\n        throw new DellSCDriverException(String.format(\"Unable to find volume %s\",volume.getNativeId()));\n      }\n      if (server == null) {\n        server=findScServer(api,ssn,initiators);\n      }\n      if (server == null) {\n        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);\n      }\n      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);\n      for (      ScMappingProfile mappingProfile : mappingProfiles) {\n        api.deleteMappingProfile(mappingProfile.instanceId);\n      }\n      volumesUnmapped++;\n      LOG.info(\"Volume '{}' unexported from server '{}'\",scVol.name,server.name);\n    }\n catch (    StorageCenterAPIException|DellSCDriverException dex) {\n      String error=String.format(\"Error unmapping volume %s: %s\",volume.getDisplayName(),dex);\n      LOG.error(error);\n      errBuffer.append(String.format(\"%s%n\",error));\n      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {\n        break;\n      }\n    }\n  }\n  task.setMessage(errBuffer.toString());\n  if (volumesUnmapped == volumes.size()) {\n    task.setStatus(TaskStatus.READY);\n  }\n else   if (volumesUnmapped == 0) {\n    task.setStatus(TaskStatus.FAILED);\n  }\n else {\n    task.setStatus(TaskStatus.PARTIALLY_FAILED);\n  }\n  return task;\n}"}
{"ids": "59914", "raw_code": "public void createClusterAsync(final String projectId,final ClusterCreateSpec clusterCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {\n  String path=String.format(\"%s/%s/clusters\",getBasePath(),projectId);\n  createObjectAsync(path,serializeObjectAsJson(clusterCreateSpec),responseCallback);\n}"}
{"ids": "71882", "raw_code": "public static DereferenceAliasesPolicy valueOf(final int intValue){\n  if (intValue < 0 || intValue >= ELEMENTS.length) {\n    return null;\n  }\n  return ELEMENTS[intValue];\n}"}
{"ids": "51154", "raw_code": "public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {\n  byte[] bytes=value.getBytes(\"UTF-8\");\n  out.writeUnsafe(QUOTE);\n  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);\n  out.writeUnsafe(QUOTE);\n}"}
{"ids": "49474", "raw_code": "public void add(final SAMRecord read,final int position){\n  recordAndOffsets.add(new RecordAndOffset(read,position));\n}"}
{"ids": "224", "raw_code": "private Sha256Hash calculateHash(){\n  try {\n    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);\n    writeHeader(bos);\n    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray())));\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "13597", "raw_code": "private void addPropertyType(URI p,Resource t){\n  OwlProperty prop=getProperty(p);\n  if (t.equals(OWL.TRANSITIVEPROPERTY)) {\n    prop.setTransitive();\n  }\n else   if (t.equals(OWL.SYMMETRICPROPERTY)) {\n    prop.setSymmetric();\n  }\n else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) {\n    prop.setAsymmetric();\n  }\n else   if (t.equals(OWL.FUNCTIONALPROPERTY)) {\n    prop.setFunctional();\n  }\n else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {\n    prop.setInverseFunctional();\n  }\n else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) {\n    prop.setIrreflexive();\n  }\n}"}
{"ids": "43520", "raw_code": "public static void equals(Object object1,Object object2){\n  checkAssertion(object1.equals(object2),null);\n}"}
{"ids": "67000", "raw_code": "public Dependencies resolveFromFile(File file,String className,SootClass sc){\n  DexlibWrapper wrapper=cache.get(file);\n  if (wrapper == null) {\n    wrapper=new DexlibWrapper(file);\n    cache.put(file,wrapper);\n    wrapper.initialize();\n  }\n  Dependencies deps=wrapper.makeSootClass(sc,className);\n  addSourceFileTag(sc,\"dalvik_source_\" + file.getName());\n  return deps;\n}"}
{"ids": "9864", "raw_code": "public static String buildResponseUrl(String tenant,LogoutState logoutState){\n  String retval=null;\n  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());\n  if (samlResponse != null) {\n    log.info(\"SAML SLO Response is \" + samlResponse.toString());\n    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);\n  }\n  return retval;\n}"}
{"ids": "53963", "raw_code": "private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){\n  if (list == null || list.size() <= 2)   return;\n  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);\n  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();\n  int size=list.size();\n  PathParser.PathDataNode currentNode=null;\n  int i=0;\n  while (i < size - 1) {\n    currentNode=list.get(i);\n    if (!isInterpolatableCommand(currentNode.mType)) {\n      i++;\n      continue;\n    }\n    boolean validSequence=true;\n    int k=i;\n    for (int j=i; j < size && validSequence; j++) {\n      if (currentNode.mType == list.get(j).mType) {\n        k=j;\n        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;\n      }\n else       validSequence=false;\n    }\n    if (k - i > 2) {\n      interpolateSubList(list.subList(i,k + 1));\n    }\n    i++;\n  }\n}"}
{"ids": "39348", "raw_code": "private void initTokenizer(StreamTokenizer tokenizer){\n  tokenizer.resetSyntax();\n  tokenizer.whitespaceChars(0,(' ' - 1));\n  tokenizer.wordChars(' ','\\u00FF');\n  tokenizer.whitespaceChars(',',',');\n  tokenizer.whitespaceChars(':',':');\n  tokenizer.commentChar('|');\n  tokenizer.whitespaceChars('\\t','\\t');\n  tokenizer.quoteChar('\"');\n  tokenizer.quoteChar('\\'');\n  tokenizer.eolIsSignificant(true);\n}"}
{"ids": "75225", "raw_code": "protected void run_ThreadSizeLoop() throws Exception {\n  for (int i=25; i <= 100; i+=25) {\n    setNumWorkers(i);\n    try {\n      Thread.sleep(60 * 1000);\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}"}
{"ids": "10954", "raw_code": "protected boolean read(){\n  if (!nReuseHeader) {\n    Debug.message(\"iso8211\",\"DDFRecord reusing header, calling readHeader()\");\n    return readHeader();\n  }\n  byte[] tempData=new byte[nDataSize - nFieldOffset];\n  int nReadBytes=poModule.read(tempData,0,tempData.length);\n  System.arraycopy(pachData,nFieldOffset,tempData,0,tempData.length);\n  if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) {\n    return false;\n  }\n else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) {\n    Debug.error(\"DDFRecord: Data record is short on DDF file.\");\n    return false;\n  }\n  return true;\n}"}
{"ids": "49923", "raw_code": "public MLResults execute(Script script){\n  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);\n  scriptExecutor.setExplain(explain);\n  scriptExecutor.setExplainLevel(explainLevel);\n  scriptExecutor.setStatistics(statistics);\n  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());\n  return execute(script,scriptExecutor);\n}"}
{"ids": "85529", "raw_code": "public void disable(RichFormatterFeature feature){\n  features.remove(feature);\n}"}
{"ids": "86513", "raw_code": "public void removeEventListener(ZWaveEventListener eventListener){\nsynchronized (zwaveEventListeners) {\n    zwaveEventListeners.remove(eventListener);\n  }\n}"}
{"ids": "67336", "raw_code": "private static double pythonTime(){\n  return System.currentTimeMillis() / 1000;\n}"}
{"ids": "2305", "raw_code": "@SafeVarargs public final void add(T... newItems){\n  add(Arrays.asList(newItems));\n}"}
{"ids": "85457", "raw_code": "public static String quoteIfJavaKeyword(String name){\n  return JVMModuleUtil.quoteIfJavaKeyword(name);\n}"}
{"ids": "5924", "raw_code": "private static <T,ID>void addDropTableStatements(DatabaseType databaseType,TableInfo<T,ID> tableInfo,List<String> statements){\n  List<String> statementsBefore=new ArrayList<String>();\n  List<String> statementsAfter=new ArrayList<String>();\n  for (  FieldType fieldType : tableInfo.getFieldTypes()) {\n    databaseType.dropColumnArg(fieldType,statementsBefore,statementsAfter);\n  }\n  StringBuilder sb=new StringBuilder(64);\n  sb.append(\"DROP TABLE \");\n  databaseType.appendEscapedEntityName(sb,tableInfo.getTableName());\n  sb.append(' ');\n  statements.addAll(statementsBefore);\n  statements.add(sb.toString());\n  statements.addAll(statementsAfter);\n}"}
{"ids": "27393", "raw_code": "public boolean isLocked(){\n  return !queue.isEmpty();\n}"}
{"ids": "62259", "raw_code": "private static ClassInfo findOrCreateClass(String t){\n  if (!t.endsWith(\"[]\")) {\n    return ClassInfo.findOrCreateClass(t);\n  }\n else {\n    String baseType=t.substring(0,t.indexOf(\"[]\"));\n    int level=(t.length() - t.indexOf(\"[]\")) / 2;\n    String s=\"\";\n    for (int i=0; i < level; ++i)     s+=\"[\";\n    if (baseType.equals(\"int\"))     s+=\"I\";\n else     if (baseType.equals(\"boolean\"))     s+=\"B\";\n else     s+=\"L\" + baseType + \";\";\n    return ClassInfo.findOrCreateClass(s);\n  }\n}"}
{"ids": "25457", "raw_code": "@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){\n  long ticks=ticksAddr.getValue() - rtcMagicOffset;\n  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);\n  time.write(timeAddr);\n  return 0;\n}"}
{"ids": "47958", "raw_code": "private BigInteger oddModPow(BigInteger y,BigInteger z){\n  if (y.equals(ONE))   return this;\n  if (signum == 0)   return ZERO;\n  int[] base=mag.clone();\n  int[] exp=y.mag;\n  int[] mod=z.mag;\n  int modLen=mod.length;\n  if ((modLen & 1) != 0) {\n    int[] x=new int[modLen + 1];\n    System.arraycopy(mod,0,x,1,modLen);\n    mod=x;\n    modLen++;\n  }\n  int wbits=0;\n  int ebits=bitLength(exp,exp.length);\n  if ((ebits != 17) || (exp[0] != 65537)) {\n    while (ebits > bnExpModThreshTable[wbits]) {\n      wbits++;\n    }\n  }\n  int tblmask=1 << wbits;\n  int[][] table=new int[tblmask][];\n  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];\n  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);\n  long inv=-MutableBigInteger.inverseMod64(n0);\n  int[] a=leftShift(base,base.length,modLen << 5);\n  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);\n  b2.normalize();\n  MutableBigInteger r=a2.divide(b2,q);\n  table[0]=r.toIntArray();\n  if (table[0].length < modLen) {\n    int offset=modLen - table[0].length;\n    int[] t2=new int[modLen];\n    System.arraycopy(table[0],0,t2,offset,table[0].length);\n    table[0]=t2;\n  }\n  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);\n  int[] t=Arrays.copyOf(b,modLen);\n  for (int i=1; i < tblmask; i++) {\n    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);\n  }\n  int bitpos=1 << ((ebits - 1) & (32 - 1));\n  int buf=0;\n  int elen=exp.length;\n  int eIndex=0;\n  for (int i=0; i <= wbits; i++) {\n    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);\n    bitpos>>>=1;\n    if (bitpos == 0) {\n      eIndex++;\n      bitpos=1 << (32 - 1);\n      elen--;\n    }\n  }\n  int multpos=ebits;\n  ebits--;\n  boolean isone=true;\n  multpos=ebits - wbits;\n  while ((buf & 1) == 0) {\n    buf>>>=1;\n    multpos++;\n  }\n  int[] mult=table[buf >>> 1];\n  buf=0;\n  if (multpos == ebits)   isone=false;\n  while (true) {\n    ebits--;\n    buf<<=1;\n    if (elen != 0) {\n      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;\n      bitpos>>>=1;\n      if (bitpos == 0) {\n        eIndex++;\n        bitpos=1 << (32 - 1);\n        elen--;\n      }\n    }\n    if ((buf & tblmask) != 0) {\n      multpos=ebits - wbits;\n      while ((buf & 1) == 0) {\n        buf>>>=1;\n        multpos++;\n      }\n      mult=table[buf >>> 1];\n      buf=0;\n    }\n    if (ebits == multpos) {\n      if (isone) {\n        b=mult.clone();\n        isone=false;\n      }\n else {\n        t=b;\n        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);\n        t=a;\n        a=b;\n        b=t;\n      }\n    }\n    if (ebits == 0)     break;\n    if (!isone) {\n      t=b;\n      a=montgomerySquare(t,mod,modLen,inv,a);\n      t=a;\n      a=b;\n      b=t;\n    }\n  }\n  int[] t2=new int[2 * modLen];\n  System.arraycopy(b,0,t2,modLen,modLen);\n  b=montReduce(t2,mod,modLen,(int)inv);\n  t2=Arrays.copyOf(b,modLen);\n  return new BigInteger(1,t2);\n}"}
{"ids": "60415", "raw_code": "public int nextToken(){\n  while (index < length && Character.isWhitespace(expr[index])) {\n    index++;\n  }\n  tokenVal=null;\n  if (index == length)   return TOKEN_END;\n  int start=index;\n  char currentChar=expr[index];\n  char nextChar=(char)0;\n  index++;\n  if (index < length)   nextChar=expr[index];\nswitch (currentChar) {\ncase '(':\n    return TOKEN_LBRACE;\ncase ')':\n  return TOKEN_RBRACE;\ncase '=':\nreturn TOKEN_EQ;\ncase '!':\nif (nextChar == '=') {\nindex++;\nreturn TOKEN_NOT_EQ;\n}\nreturn TOKEN_NOT;\ncase '|':\nif (nextChar == '|') {\nindex++;\nreturn TOKEN_OR;\n}\nbreak;\ncase '&':\nif (nextChar == '&') {\nindex++;\nreturn TOKEN_AND;\n}\nbreak;\ncase '>':\nif (nextChar == '=') {\nindex++;\nreturn TOKEN_GE;\n}\nreturn TOKEN_GT;\ncase '<':\nif (nextChar == '=') {\nindex++;\nreturn TOKEN_LE;\n}\nreturn TOKEN_LT;\ndefault :\nbreak;\n}\nint end=index;\nif (currentChar == '\"' || currentChar == '\\'') {\nchar endChar=currentChar;\nboolean escaped=false;\nstart++;\nfor (; index < length; index++) {\nif (expr[index] == '\\\\' && !escaped) {\nescaped=true;\ncontinue;\n}\nif (expr[index] == endChar && !escaped) break;\nescaped=false;\n}\nend=index;\nindex++;\n}\n else if (currentChar == '/') {\nchar endChar=currentChar;\nboolean escaped=false;\nfor (; index < length; index++) {\nif (expr[index] == '\\\\' && !escaped) {\nescaped=true;\ncontinue;\n}\nif (expr[index] == endChar && !escaped) break;\nescaped=false;\n}\nend=++index;\n}\n else {\nfor (; index < length; index++) {\nif (isMetaChar(expr[index])) break;\n}\nend=index;\n}\nthis.tokenVal=new String(expr,start,end - start);\nreturn TOKEN_STRING;\n}"}
{"ids": "21098", "raw_code": "public void auditCallhome(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){\n  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);\n}"}
{"ids": "23275", "raw_code": "public static String constructNTPtime(long date){\n  long ntpTime=2208988800L;\n  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;\n  return String.valueOf(startTime);\n}"}
{"ids": "34302", "raw_code": "protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleTypes){\n  List<MediaType> acceptableTypes=getAcceptableTypes(exchange);\n  producibleTypes=getProducibleTypes(exchange,producibleTypes);\n  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();\n  for (  MediaType acceptable : acceptableTypes) {\n    for (    MediaType producible : producibleTypes) {\n      if (acceptable.isCompatibleWith(producible)) {\n        compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible));\n      }\n    }\n  }\n  List<MediaType> result=new ArrayList<>(compatibleMediaTypes);\n  MediaType.sortBySpecificityAndQuality(result);\n  for (  MediaType mediaType : compatibleMediaTypes) {\n    if (mediaType.isConcrete()) {\n      return mediaType;\n    }\n else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {\n      return MediaType.APPLICATION_OCTET_STREAM;\n    }\n  }\n  return null;\n}"}
{"ids": "10190", "raw_code": "public void ensureCapacity(int mincap){\n  if (mincap > array.length) {\n    int newcap=((array.length * 3) >> 1) + 1;\n    int[] olddata=array;\n    array=new int[newcap < mincap ? mincap : newcap];\n    System.arraycopy(olddata,0,array,0,size);\n  }\n}"}
{"ids": "77115", "raw_code": "public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {\n  if (cleaner != null) {\n    invalidated=true;\n    barrier.lazySet(0);\n    Thread.yield();\n    for (    ByteBuffer b : bufs) {\n      cleaner.freeBuffer(resourceDescription,b);\n    }\n  }\n}"}
{"ids": "24572", "raw_code": "public int addDir(File file){\n  if (!file.exists()) {\n    return 0;\n  }\n  String[] names=getNames(getFiles(file,\".class\"));\n  loadClass(file,names);\n  return 1;\n}"}
{"ids": "7570", "raw_code": "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof BubbleXYItemLabelGenerator)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  BubbleXYItemLabelGenerator that=(BubbleXYItemLabelGenerator)obj;\n  if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "15270", "raw_code": "public static boolean hasElementChild(Node node){\n  NodeList nl=node.getChildNodes();\n  Node child=null;\n  int length=nl.getLength();\n  for (int i=0; i < length; i++) {\n    child=nl.item(i);\n    if (child.getNodeType() == Node.ELEMENT_NODE) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "49208", "raw_code": "public void delItem(int index){\nsynchronized (getMenuTreeLock()) {\n    if (selectedIndex == index) {\n      selectItem(null,false);\n    }\n else     if (selectedIndex > index) {\n      selectedIndex--;\n    }\n    if (index < items.size()) {\n      items.remove(index);\n    }\n else {\n      if (log.isLoggable(PlatformLogger.Level.FINE)) {\n        log.fine(\"WARNING: Attempt to remove non-existing menu item, index : \" + index + \", item count : \"+ items.size());\n      }\n    }\n  }\n  updateSize();\n}"}
{"ids": "68413", "raw_code": "public static int countCSSPrimitiveNames(){\n  return ALL_PRIMITIVE_PROPERTY_NAMES.size();\n}"}
{"ids": "40787", "raw_code": "private static Intent createMapActivityIntent(Context context,URLSpan[] urlSpans){\n  for (int span_i=0; span_i < urlSpans.length; span_i++) {\n    URLSpan urlSpan=urlSpans[span_i];\n    String urlString=urlSpan.getURL();\n    if (urlString.startsWith(GEO_PREFIX)) {\n      Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString));\n      geoIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n      return geoIntent;\n    }\n  }\n  return null;\n}"}
{"ids": "30224", "raw_code": "private StringBuilder generateParameters(){\n  StringBuilder parameters=new StringBuilder();\n  if (filterMap == null && expandParameters == null) {\n    return parameters;\n  }\n  parameters.append('?');\n  int filterParameterCounter=0;\n  if (filterMap != null && !filterMap.isEmpty()) {\n    parameters.append(FILTER_PREFIX);\n    for (    Map.Entry<String,String> filterEntry : filterMap.entrySet()) {\n      parameters.append(String.format(\"%s eq '%s'\",filterEntry.getKey(),filterEntry.getValue()));\n      if (++filterParameterCounter < filterMap.size()) {\n        parameters.append(\" and \");\n      }\n    }\n    if (expandParameters != null) {\n      parameters.append(\"&\");\n    }\n  }\n  if (expandParameters != null) {\n    parameters.append(EXPAND_PREFIX);\n    Iterator iterator=expandParameters.iterator();\n    parameters.append(String.format(\"%s\",iterator.next()));\n    while (iterator.hasNext()) {\n      parameters.append(String.format(\",%s\",iterator.next()));\n    }\n  }\n  return parameters;\n}"}
{"ids": "28973", "raw_code": "public static @CheckForNull @SlashedClassName String fromFieldSignature(String signature){\n  if (signature.charAt(0) != 'L') {\n    return null;\n  }\n  return signature.substring(1,signature.length() - 1);\n}"}
{"ids": "53605", "raw_code": "private void paintPreview(int dx,int dy,float zoomfactor){\n  if (image != null) {\n    Graphics2D g2=(Graphics2D)getGraphics();\n    UColor bg=renderer.getBackgroundColor();\n    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));\n    int newWidth=Math.round(image.getWidth(null) * zoomfactor);\n    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);\n    g2.drawImage(image,dx,dy,newWidth,newHeight,null);\n    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());\n else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());\n    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);\n else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());\n  }\n}"}
{"ids": "62656", "raw_code": "public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){\n  int count=0;\n  List<List<Double>> ret=new ArrayList<List<Double>>();\n  while (count < arr.size()) {\n    List<Double> sublist=arr.subList(count,count + chunk);\n    count+=chunk;\n    ret.add(sublist);\n  }\n  for (  List<Double> lists : ret) {\n    if (lists.size() < chunk)     ret.remove(lists);\n  }\n  return ret;\n}"}
{"ids": "46263", "raw_code": "private static void updateWindowUI(Window window){\n  SwingUtilities.updateComponentTreeUI(window);\n  Window ownedWins[]=window.getOwnedWindows();\n  for (  Window ownedWin : ownedWins) {\n    updateWindowUI(ownedWin);\n  }\n}"}
{"ids": "51056", "raw_code": "public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){\n  ArrayList<ConstraintWidget> found=new ArrayList<>();\n  Rectangle area=new Rectangle(x,y,width,height);\n  for (  ConstraintWidget widget : container.getChildren()) {\n    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);\n    if (!decorator.isVisible()) {\n      continue;\n    }\n    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());\n    if (area.intersects(bounds)) {\n      found.add(widget);\n    }\n  }\n  return found;\n}"}
{"ids": "52356", "raw_code": "public final void printSymbol(CharSequence text) throws IOException {\n  if (text == null) {\n    appendAscii(\"null.symbol\");\n  }\n else   if (text.length() == 0) {\n    throw new EmptySymbolException();\n  }\n else   if (symbolNeedsQuoting(text,true)) {\n    appendAscii('\\'');\n    printCodePoints(text,SYMBOL_ESCAPE_CODES);\n    appendAscii('\\'');\n  }\n else {\n    appendAscii(text);\n  }\n}"}
{"ids": "75538", "raw_code": "private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){\n  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);\n  for (  Class<?> classe : classes)   result.add(classe);\n}"}
{"ids": "13792", "raw_code": "public void schemaChanged(String serviceName,String version){\nsynchronized (mapRealmToFormat) {\n    mapRealmToFormat.remove(ROOT);\n  }\n}"}
{"ids": "13183", "raw_code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  date.year=YEAR;\n  date.day=DAY;\n  if (str.charAt(0) != '-' || str.charAt(1) != '-') {\n    throw new SchemaDateTimeException(\"Invalid format for gMonth: \" + str);\n  }\n  int stop=4;\n  date.month=parseInt(str,2,stop);\n  if (str.length() >= stop + 2 && str.charAt(stop) == '-' && str.charAt(stop + 1) == '-') {\n    stop+=2;\n  }\n  if (stop < len) {\n    if (!isNextCharUTCSign(str,stop,len)) {\n      throw new SchemaDateTimeException(\"Error in month parsing: \" + str);\n    }\n else {\n      getTimeZone(str,date,stop,len);\n    }\n  }\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=1;\n  return date;\n}"}
{"ids": "86507", "raw_code": "private void addToQueue(SerialMessage serialMessage){\n  if (serialMessage == null) {\n    return;\n  }\n  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {\n    msgQueue.add(serialMessage);\n  }\n  sendMessage();\n}"}
{"ids": "52971", "raw_code": "private DBID stringToDBID(String query){\n  return DBIDUtil.importInteger(Integer.valueOf(query));\n}"}
{"ids": "29710", "raw_code": "public ThriftServiceMetadata(Class<?> serviceType){\n  requireNonNull(serviceType,\"serviceType\");\n  interfaces=init(null,Collections.singleton(serviceType));\n}"}
{"ids": "59932", "raw_code": "public static Response invalidEntity(ConstraintViolationException e){\n  StringBuilder errorMessage=new StringBuilder();\n  boolean firstPass=true;\n  for (  ConstraintViolation error : e.getConstraintViolations()) {\n    if (!firstPass) {\n      errorMessage.append(\", \");\n    }\n    errorMessage.append(String.format(\"%s %s (was %s)\",error.getPropertyPath(),error.getMessage(),error.getInvalidValue()));\n    firstPass=false;\n  }\n  ExternalException externalException=new ExternalException(ErrorCode.INVALID_ENTITY,errorMessage.toString(),null);\n  return externalException(externalException);\n}"}
{"ids": "74146", "raw_code": "public String checkStartBlock(int mode){\n  if (log.isDebugEnabled())   log.debug(\"checkStartBlock for warrant \\\"\" + getDisplayName() + \"\\\".\");\n  BlockOrder bo=_orders.get(0);\n  OBlock block=bo.getBlock();\n  String msg=block.allocate(this);\n  if (msg != null) {\n    return msg;\n  }\n  msg=bo.setPath(this);\n  if (msg != null) {\n    return msg;\n  }\n  int state=block.getState();\n  if ((state & OBlock.DARK) != 0 || _tempRunBlind) {\n    msg=Bundle.getMessage(\"BlockDark\",block.getDisplayName());\n  }\n else   if ((state & OBlock.OCCUPIED) == 0) {\n    if (mode == MODE_LEARN) {\n      msg=\"learnStart\";\n    }\n else {\n      msg=\"warnStart\";\n    }\n    msg=Bundle.getMessage(msg,getTrainName(),block.getDisplayName());\n  }\n else {\n    TrackerTableAction.stopTrackerIn(block);\n  }\n  return msg;\n}"}
{"ids": "67509", "raw_code": "private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){\n  TokenStream tokens=new TokenStream(header);\n  Elem selector=parseExpr(tokens);\n  tokens.checkAtEnd();\n  ImmutableList.Builder<Case> cases=ImmutableList.builder();\n  List<Elem> defaultElems=null;\n  boolean done;\n  String line=getNextLine();\n  Matcher matcher=COMMAND_LINE.matcher(line);\n  String command;\n  String rest;\n  if (matcher.find()) {\n    command=matcher.group(COMMAND_NAME_GROUP);\n    rest=line.substring(matcher.end());\n    done=false;\n  }\n else {\n    error(\"expected '@end', '@case' or '@default' command after 'switch'\");\n    done=true;\n    command=null;\n    rest=null;\n  }\n  while (!done) {\nswitch (command) {\ncase END_COMMAND:\n      checkHeaderEmpty(command,rest);\n    done=true;\n  break;\ncase DEFAULT_COMMAND:\ncheckHeaderEmpty(command,rest);\nif (defaultElems != null) {\nerror(\"duplicate '@default' in @switch\");\n}\ndefaultElems=parseUntil(indent,layout,END_COMMAND);\ncommand=lastTerminator;\nrest=lastTerminatorHeader;\ndone=lastTerminator == null;\nbreak;\ncase CASE_COMMAND:\ntokens=new TokenStream(rest);\nElem value=parseExpr(tokens);\ntokens.checkAtEnd();\nList<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);\nif (value != null) {\ncases.add(Case.create(value,caseElems));\n}\ncommand=lastTerminator;\nrest=lastTerminatorHeader;\ndone=lastTerminator == null;\nbreak;\ndefault :\nunexpectedCommandError(command);\ndone=true;\nbreak;\n}\n}\nif (selector != null) {\nelems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));\n}\n}"}
{"ids": "10899", "raw_code": "public void init(String prefix,java.net.URL url){\n  try {\n    java.io.InputStream in=url.openStream();\n    Properties props=new Properties();\n    props.load(in);\n    init(getLayers(prefix,props));\n  }\n catch (  java.net.MalformedURLException murle) {\n    logger.warning(\"LayerHandler.init(URL): \" + url + \" is not a valid URL\");\n  }\ncatch (  java.io.IOException e) {\n    logger.warning(\"LayerHandler.init(URL): Caught an IOException\");\n  }\n}"}
{"ids": "23606", "raw_code": "public static Properties createProperties(final Map<String,String> map){\n  Properties properties=new Properties();\n  if (!(map == null || map.isEmpty())) {\n    for (    Entry<String,String> entry : map.entrySet()) {\n      properties.setProperty(entry.getKey(),entry.getValue());\n    }\n  }\n  return properties;\n}"}
{"ids": "10119", "raw_code": "public Node selectFirst(String query){\n  List<Node> selectedNodes=select(query);\n  if (selectedNodes.isEmpty()) {\n    return null;\n  }\n  return selectedNodes.get(0);\n}"}
{"ids": "11057", "raw_code": "public static String[] stringArrayFromProperties(Properties p,String propName,String tok){\n  String[] ret=null;\n  String raw=p.getProperty(propName);\n  if (raw != null && raw.length() > 0) {\n    try {\n      StringTokenizer token=new StringTokenizer(raw,tok);\n      int numPaths=token.countTokens();\n      ret=new String[numPaths];\n      for (int i=0; i < numPaths; i++) {\n        ret[i]=token.nextToken();\n      }\n      return ret;\n    }\n catch (    java.util.NoSuchElementException e) {\n      e.printStackTrace();\n    }\n  }\n  return ret;\n}"}
{"ids": "11167", "raw_code": "public void generate(int x1,int y1,int x2,int y2){\n  Point midPoint=new Point();\n  Point arcCenter=new Point();\n  Point2D peakPoint=new Point2D.Float();\n  double distance=Math.sqrt(Math.pow(Math.abs(y2 - y1),2.0) + Math.pow(Math.abs(x2 - x1),2.0));\n  double straightLineSlope=Math.atan((double)(y2 - y1) / (double)(x2 - x1));\n  double inverseSlope=straightLineSlope - (Math.PI / 2.0);\n  if (Debug.debugging(\"arc\")) {\n    Debug.output(\"ArcCalc.generate: Slope is \" + Math.toDegrees(straightLineSlope) + \" degrees, distance = \"+ distance+ \" pixels.\");\n  }\n  midPoint.setLocation(x1 + ((x2 - x1) / 2),y1 + ((y2 - y1) / 2));\n  if (Debug.debugging(\"arc\")) {\n    Debug.output(\"ArcCalc.generate: Center point for (\" + x1 + \", \"+ y1+ \") to (\"+ x2+ \", \"+ y2+ \") is (\"+ midPoint.x+ \", \"+ midPoint.y+ \")\");\n  }\n  double arccos=Math.cos(arcAngle);\n  double arcRadius;\n  if (arccos != 1.0) {\n    arcRadius=distance / Math.sqrt(2.0 * (1.0 - Math.cos(arcAngle)));\n  }\n else {\n    arcRadius=distance / Math.sqrt(2.0);\n  }\n  if (Debug.debugging(\"arc\")) {\n    Debug.output(\"ArcCalc.generate: radius of arc = \" + arcRadius);\n  }\n  double x=arcRadius - arcRadius * Math.cos(arcAngle);\n  double rPrime=(distance / 2.0) * (Math.sqrt(1.0 - Math.pow(x / distance,2.0))) / Math.sin(arcAngle / 2.0);\n  if (Debug.debugging(\"arc\")) {\n    Debug.output(\"ArcCalc.generate: rPrime = \" + rPrime);\n  }\n  int direction=1;\n  if (arcUp)   direction=-1;\n  arcCenter.x=midPoint.x + (direction * (int)(rPrime * Math.cos(inverseSlope)));\n  arcCenter.y=midPoint.y + (direction * (int)(rPrime * Math.sin(inverseSlope)));\n  if (Debug.debugging(\"arc\")) {\n    Debug.output(\"ArcCalc.generateArc: creating supplimental graphics list\");\n    arcGraphics=new OMGraphicList();\n    double dist1=Math.sqrt(Math.pow((double)(arcCenter.x - x1),2.0) + Math.pow((double)(arcCenter.y - y1),2.0));\n    double dist2=Math.sqrt(Math.pow((double)(arcCenter.x - x2),2.0) + Math.pow((double)(arcCenter.y - y2),2.0));\n    Debug.output(\"ArcCalc.generate: Center focus for arc is (\" + arcCenter.x + \", \"+ arcCenter.y+ \") along slope line of \"+ Math.toDegrees(inverseSlope)+ \" degrees).\");\n    Debug.output(\"ArcCalc.generate: Distance to point 1 from arc focus = \" + dist1 + \"\\n                    Distance to point 2 from arc focus = \"+ dist2);\n    OMRect point1=new OMRect(x1 - 1,y1 - 1,x1 + 1,y1 + 1);\n    OMRect point2=new OMRect(x2 - 1,y2 - 1,x2 + 1,y2 + 1);\n    OMRect arcPoint=new OMRect(arcCenter.x - 1,arcCenter.y - 1,arcCenter.x + 1,arcCenter.y + 1);\n    point1.setLinePaint(OMColor.red);\n    point2.setLinePaint(OMColor.red);\n    arcPoint.setLinePaint(OMColor.blue);\n    arcGraphics.add(point1);\n    arcGraphics.add(point2);\n    arcGraphics.add(arcPoint);\n    OMLine line1=new OMLine(x1,y1,x2,y2);\n    OMLine line2=new OMLine(midPoint.x,midPoint.y,arcCenter.x,arcCenter.y);\n    arcGraphics.add(line1);\n    arcGraphics.add(line2);\n  }\n  int realCount=0;\n  double startSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x1,y1);\n  double endSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x2,y2);\n  double smallSlope, largeSlope;\n  double angleIncrement;\n  smallSlope=(startSlope > endSlope) ? endSlope : startSlope;\n  largeSlope=(smallSlope == startSlope) ? endSlope : startSlope;\n  while (Math.abs(smallSlope - largeSlope) > Math.PI) {\n    if (Math.abs(largeSlope - smallSlope - Math.PI) < .001) {\n      break;\n    }\n    Debug.message(\"arc\",\"ArcCalc.generate: Modifying the starting slope.\");\n    double tmpSlope=smallSlope + MoreMath.TWO_PI;\n    smallSlope=largeSlope;\n    largeSlope=tmpSlope;\n  }\n  if (MoreMath.approximately_equal(arcAngle,Math.PI) && arcUp) {\n    Debug.message(\"arc\",\"ArcCalc.generate: Modifying 180 angle points.\");\n    double tmpSlope=smallSlope + MoreMath.TWO_PI;\n    smallSlope=largeSlope;\n    largeSlope=tmpSlope;\n  }\n  if (Math.abs(y2 - y1) < Math.abs(x2 - x1)) {\n    angleIncrement=Math.PI / Math.abs(x2 - x1);\n  }\n else {\n    angleIncrement=Math.PI / Math.abs(y2 - y1);\n  }\n  int numPoints=(int)(Math.abs(smallSlope - largeSlope) / angleIncrement + 2);\n  float[] xPoints=new float[numPoints];\n  float[] yPoints=new float[numPoints];\n  if (Debug.debugging(\"arc\")) {\n    Debug.output(\"ArcCalc.generate: angle to x1, y1 is \" + startSlope + \" (\"+ Math.toDegrees(startSlope)+ \" degrees), angle to x2, y2 is \"+ endSlope+ \" (\"+ Math.toDegrees(endSlope)+ \" degrees)\");\n    Debug.output(\"ArcCalc.generate: Starting angle is \" + smallSlope + \"(\"+ Math.toDegrees(smallSlope)+ \" degrees), end angle is \"+ largeSlope+ \" (\"+ Math.toDegrees(largeSlope)+ \" degrees), incrementing by \"+ angleIncrement+ \" (\"+ Math.toDegrees(angleIncrement)+ \" degrees)\");\n  }\n  reversed=false;\n  while (smallSlope < largeSlope && realCount < numPoints) {\n    xPoints[realCount]=arcCenter.x + (int)(arcRadius * Math.cos(smallSlope));\n    yPoints[realCount]=arcCenter.y + (int)(arcRadius * Math.sin(smallSlope));\n    if (realCount == 0 && xPoints[realCount] == x2) {\n      Debug.message(\"arc\",\"ArcCalc: line reversed\");\n      reversed=true;\n    }\n    if (Debug.debugging(\"arc\") && realCount == 0) {\n      OMLine startLine=new OMLine(arcCenter.x,arcCenter.y,(int)xPoints[0],(int)yPoints[0]);\n      startLine.setLinePaint(OMColor.white);\n      arcGraphics.add(startLine);\n    }\n else     if (Debug.debugging(\"arcdetail\")) {\n      Debug.output(\"  angle \" + smallSlope + \" (\"+ smallSlope * 180 / Math.PI + \" degrees)  = \" + xPoints[realCount] + \", \" + yPoints[realCount]);\n    }\n    if (Math.abs(largeSlope - smallSlope - (arcAngle / 2.0)) < angleIncrement) {\n      peakPoint.setLocation(xPoints[realCount],yPoints[realCount]);\n      Debug.message(\"arc\",\"ArcCalc: Found a midpoint.\");\n    }\n    smallSlope+=angleIncrement;\n    realCount++;\n  }\n  xpoints=new float[realCount];\n  ypoints=new float[realCount];\n  System.arraycopy(xPoints,0,xpoints,0,realCount);\n  System.arraycopy(yPoints,0,ypoints,0,realCount);\n}"}
{"ids": "86420", "raw_code": "private static int compareLocales(Locale primary,Locale other){\n  final String lang=primary.getLanguage();\n  if ((lang == null) || !lang.equals(other.getLanguage())) {\n    return 0;\n  }\n  final String country=primary.getCountry();\n  if ((country == null) || !country.equals(other.getCountry())) {\n    return 1;\n  }\n  final String variant=primary.getVariant();\n  if ((variant == null) || !variant.equals(other.getVariant())) {\n    return 2;\n  }\n  return 3;\n}"}
{"ids": "63548", "raw_code": "void queryReadResult(PreparedStatement prep) throws SQLException {\n  ResultSet rs=prep.executeQuery();\n  ResultSetMetaData meta=rs.getMetaData();\n  int columnCount=meta.getColumnCount();\n  while (rs.next()) {\n    for (int i=0; i < columnCount; i++) {\n      rs.getString(i + 1);\n    }\n  }\n}"}
{"ids": "66252", "raw_code": "public boolean equals(Object obj){\n  if (obj instanceof MSort) {\n    MSort ms=(MSort)obj;\n    if (data == ms.data)     return true;\n  }\n  return false;\n}"}
{"ids": "36811", "raw_code": "public static void endTransaction(final CConnection connection) throws SQLException {\n  endTransaction(connection.getConnection());\n}"}
{"ids": "15372", "raw_code": "private void changeOpenAMDebugFolder(String newOpenAMDebugFolder){\n  SystemPropertiesManager.initializeProperties(DebugConstants.CONFIG_DEBUG_DIRECTORY,newOpenAMDebugFolder);\n}"}
{"ids": "40582", "raw_code": "protected String computeFullUrl(URL baseUrl,String link){\n  if (link == null || link.length() == 0) {\n    return null;\n  }\n  if (!link.startsWith(\"http\")) {\n    if (link.startsWith(\"/\")) {\n      link=baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority()+ link;\n    }\n else {\n      if (link.contains(\":\")) {\n        return null;\n      }\n      String path=baseUrl.getPath();\n      if (!path.endsWith(\"/\")) {\n        int sep=path.lastIndexOf(\"/\");\n        String file=path.substring(sep + 1);\n        if (file.contains(\".\") || file.contains(\"?\"))         path=path.substring(0,sep);\n      }\n      link=baseUrl.getProtocol() + \"://\" + baseUrl.getAuthority()+ path+ \"/\"+ link;\n    }\n  }\n  link=normalizeUrlEnding(link);\n  String l=link.toLowerCase(Locale.ROOT);\n  if (l.endsWith(\".jpg\") || l.endsWith(\".jpeg\") || l.endsWith(\".png\")|| l.endsWith(\".gif\")) {\n    return null;\n  }\n  return link;\n}"}
{"ids": "3848", "raw_code": "private void loadManifest(){\n  if (_isManifestRead)   return;\nsynchronized (this) {\n    if (_isManifestRead)     return;\n    try {\n      _manifest=_jarPath.getManifest();\n      if (_manifest == null)       return;\n      Attributes attr=_manifest.getMainAttributes();\n      if (attr != null)       addManifestPackage(\"\",attr);\n      Map<String,Attributes> entries=_manifest.getEntries();\n      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {\n        String pkg=entry.getKey();\n        attr=entry.getValue();\n        if (attr == null)         continue;\n        addManifestPackage(pkg,attr);\n      }\n    }\n catch (    IOException e) {\n      log.log(Level.WARNING,e.toString(),e);\n    }\n finally {\n      _isManifestRead=true;\n    }\n  }\n}"}
{"ids": "81351", "raw_code": "public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){\n  if (originalTypes == null)   return null;\n  ReferenceBinding[] convertedTypes=originalTypes;\n  for (int i=0, length=originalTypes.length; i < length; i++) {\n    ReferenceBinding originalType=originalTypes[i];\n    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);\n    if (convertedType != originalType) {\n      if (convertedTypes == originalTypes) {\n        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);\n      }\n      convertedTypes[i]=convertedType;\n    }\n else     if (convertedTypes != originalTypes) {\n      convertedTypes[i]=originalType;\n    }\n  }\n  return convertedTypes;\n}"}
{"ids": "71589", "raw_code": "public void addColumn(int idx,Column column){\n  if (column != null) {\n    columns.add(idx,column);\n  }\n}"}
{"ids": "83722", "raw_code": "public void readData(DataInput din) throws IOException {\n  reference=din.readUnsignedShort();\n  andMask=din.readUnsignedShort();\n  orMask=din.readUnsignedShort();\n}"}
{"ids": "63936", "raw_code": "boolean removeDisplay(Display display){\n  return m_displays.remove(display);\n}"}
{"ids": "86655", "raw_code": "public double nextGaussian(){\n  if (mHaveNextNextGaussian) {\n    mHaveNextNextGaussian=false;\n    return mNextNextGaussian;\n  }\n else {\n    double v1, v2, s;\n    do {\n      v1=2 * nextDouble() - 1;\n      v2=2 * nextDouble() - 1;\n      s=v1 * v1 + v2 * v2;\n    }\n while (s >= 1 || s == 0);\n    final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);\n    mNextNextGaussian=v2 * multiplier;\n    mHaveNextNextGaussian=true;\n    return v1 * multiplier;\n  }\n}"}
{"ids": "27513", "raw_code": "private void fireEvent(final IRunningQuery q){\n  if (q == null)   throw new IllegalArgumentException();\n  if (listeners.isEmpty()) {\n    return;\n  }\n  final IRunningQueryListener[] a=listeners.toArray(new IRunningQueryListener[0]);\n  for (  IRunningQueryListener l : a) {\n    final IRunningQueryListener listener=l;\n    try {\n      listener.notify(q);\n    }\n catch (    Throwable t) {\n      if (InnerCause.isInnerCause(t,InterruptedException.class)) {\n        throw new RuntimeException(t);\n      }\n      log.error(t,t);\n    }\n  }\n}"}
{"ids": "23116", "raw_code": "private void updateContactHeaderPort(int localPort,SIPMessage message){\n  if (message != null && message.getContactHeader() != null) {\n    ContactHeader contactHeader=message.getContactHeader();\n    Address contactAddress=contactHeader.getAddress();\n    contactAddress.setPort(localPort);\n  }\n}"}
{"ids": "69757", "raw_code": "@Override public void visitVertex(StreetRouter.State state){\n  Integer edgeIdx=state.backEdge;\n  if (!(edgeIdx == null || edgeIdx == -1)) {\n    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);\n    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());\n    feature.addProperty(\"weight\",state.weight);\n    feature.addProperty(\"mode\",state.streetMode);\n    feature.addProperty(\"backEdge\",state.backEdge);\n    features.add(feature);\n  }\n}"}
{"ids": "9222", "raw_code": "public static void deleteFileOrLog(File file){\n  if (!file.delete()) {\n    logger.warn(FAILED_DELETING_FILE + file.getPath());\n  }\n}"}
{"ids": "13358", "raw_code": "public GitlabGroupMember addGroupMember(GitlabGroup group,GitlabUser user,GitlabAccessLevel accessLevel) throws IOException {\n  return addGroupMember(group.getId(),user.getId(),accessLevel);\n}"}
{"ids": "14460", "raw_code": "protected Logger(String name,String resourceBundleName){\n  super(name,resourceBundleName);\n}"}
{"ids": "53139", "raw_code": "public static double computeMAD(double[] x,double median){\n  for (int i=0; i < x.length; i++) {\n    x[i]=Math.abs(x[i] - median);\n  }\n  double mad=QuickSelect.median(x);\n  if (!(mad > 0.)) {\n    double min=Double.POSITIVE_INFINITY;\n    for (    double xi : x) {\n      if (xi > 0. && xi < min) {\n        min=xi;\n      }\n    }\n    if (min < Double.POSITIVE_INFINITY) {\n      mad=min;\n    }\n else {\n      mad=1.0;\n    }\n  }\n  return mad;\n}"}
{"ids": "36926", "raw_code": "private static <T>void initializeKnownPlugins(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){\n  for (  final PluginConfigItem pt : xmlPluginOrder) {\n    processedPlugins.add(pt.getGUID());\n    final IPlugin<T> plugin=findPlugin(validatedPlugins,pt.getGUID());\n    if (plugin != null) {\n      if (pt.isLoad()) {\n        initializePlugin(plugin,pluginInterface,registry,initializedPlugins);\n      }\n else {\n        registry.addDisabledPlugin(plugin,DisabledPluginReason.NotLoaded);\n      }\n    }\n  }\n}"}
{"ids": "37509", "raw_code": "public static void sessionStop(){\n  if (mProcess == null)   return;\n  mProcess.destroy();\n  mProcess=null;\n}"}
{"ids": "4530", "raw_code": "public static Request newUploadVideoRequest(Session session,File file,Callback callback) throws FileNotFoundException {\n  ParcelFileDescriptor descriptor=ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY);\n  Bundle parameters=new Bundle(1);\n  parameters.putParcelable(file.getName(),descriptor);\n  return new Request(session,MY_VIDEOS,parameters,HttpMethod.POST,callback);\n}"}
{"ids": "32416", "raw_code": "private MulticastSocket createSocket() throws IOException {\n  MulticastSocket sock=new MulticastSocket(mcastPort);\n  sock.setLoopbackMode(false);\n  if (sockItf != null)   sock.setInterface(sockItf);\n  if (sock.getLoopbackMode())   U.warn(log,\"Loopback mode is disabled which prevents nodes on the same machine from discovering \" + \"each other.\");\n  sock.joinGroup(mcastGrp);\n  if (ttl != -1)   sock.setTimeToLive(ttl);\n  return sock;\n}"}
{"ids": "84725", "raw_code": "void copyNodeStructure(ArrayList<Node> destination){\n  while (destination.size() < nodes.size())   destination.add(new Node());\n  while (destination.size() > nodes.size())   destination.remove(0);\n  int n=nodes.size();\n  for (int i=0; i < n; i++) {\n    Node node0=nodes.get(i);\n    Node node1=destination.get(i);\n    node1.heightParameter=node0.heightParameter;\n    node1.rateParameter=node0.rateParameter;\n    node1.traitParameter=node0.traitParameter;\n    node1.partitioning=node0.partitioning;\n    node1.taxon=node0.taxon;\n    node1.bifurcation=node0.bifurcation;\n    node1.number=node0.number;\n    node1.myHashCode=node0.myHashCode;\n    if (node0.leftParent != null) {\n      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));\n    }\n else {\n      node1.leftParent=null;\n    }\n    if (node0.rightParent != null) {\n      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));\n    }\n else {\n      node1.rightParent=null;\n    }\n    if (node0.leftChild != null) {\n      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));\n    }\n else {\n      node1.leftChild=null;\n    }\n    if (node0.rightChild != null) {\n      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));\n    }\n else {\n      node1.rightChild=null;\n    }\n  }\n}"}
{"ids": "49590", "raw_code": "private void validateWill(String dest,Object payload){\n  if ((dest == null) || (payload == null)) {\n    throw new IllegalArgumentException();\n  }\n  MqttTopic.validate(dest,false);\n}"}
{"ids": "65376", "raw_code": "private Member nextMember(Member.Type type){\n  return new TestMember(type,new Address(\"localhost\",++port),new Address(\"localhost\",port + 1000));\n}"}
{"ids": "48546", "raw_code": "protected void encodeLineSuffix(OutputStream aStream) throws IOException {\n  pStream.println();\n}"}
{"ids": "82182", "raw_code": "boolean isSystemFont(){\n  return systemFont;\n}"}
{"ids": "34238", "raw_code": "public void addToBeLoaded(final String url){\n  if (toBeLoaded == null) {\n    toBeLoaded=new ArrayList<String>();\n  }\n  if (StringUtils.isNotBlank(url)) {\n    toBeLoaded.add(url);\n  }\n}"}
{"ids": "82880", "raw_code": "public AppraiseGitReviewClient(Repository repo){\n  this.repo=repo;\n  this.author=new PersonIdent(repo);\n}"}
{"ids": "27540", "raw_code": "public RootBlockView(final boolean rootBlock0,final ByteBuffer buf,final ChecksumUtility checker) throws RootBlockException {\n  if (buf == null)   throw new IllegalArgumentException();\n  if (buf.remaining() != SIZEOF_ROOT_BLOCK) {\n    throw new IllegalArgumentException(\"Expecting \" + SIZEOF_ROOT_BLOCK + \" remaining, actual=\"+ buf.remaining());\n  }\n  this.buf=buf.asReadOnlyBuffer();\n  this.rootBlock0=rootBlock0;\nswitch (getStoreType()) {\ncase RW:\n{\n      am=new RWAddressManager(null);\n      break;\n    }\ncase WORM:\n{\n    final int offsetBits=getOffsetBits();\n    am=new WormAddressManager(offsetBits);\n    break;\n  }\ndefault :\nthrow new RootBlockException(\"Unknown storeType=\" + getStoreType());\n}\nif (checker == null) {\nlog.warn(\"Checksum will not be validated\");\n}\nthis.checker=checker;\nvalid();\n}"}
{"ids": "4759", "raw_code": "protected SOAPRequest createSOAPRequest(final String methodName,final SOAPMethodRequestWriter requestWriter){\n  final PostMethod method=new PostMethod(endpoint.toString());\n  method.setContentChunked(false);\n  setRequestHeaders(method,methodName);\n  final SOAPRequestEntity requestEntity=buildRequestEntity(methodName,requestWriter);\n  requestEntity.setSOAPHeaderProvider(soapHeaderProvider);\n  final BufferedSOAPRequestEntity bufferedEntity=new BufferedSOAPRequestEntity(requestEntity);\n  method.setRequestEntity(bufferedEntity);\n  return new SOAPRequest(method,requestEntity);\n}"}
{"ids": "33948", "raw_code": "@SuppressWarnings(\"unchecked\") @Test public void innerEnum(){\n  Class<?> pc=PlayingCard.class;\n  List<Enum<?>> include=new ArrayList<>();\n  List<Enum<?>> exclude=new ArrayList<>();\n  for (  Class<?> c : pc.getDeclaredClasses()) {\n    int mods=c.getModifiers();\n    if (c.isEnum()) {\n      if (Modifier.isPublic(mods)) {\n        include.addAll(asList(c.getEnumConstants()));\n      }\n else {\n        exclude.addAll(asList(c.getEnumConstants()));\n      }\n    }\n  }\n  Set<TypedOperation> actual=getConcreteOperations(pc);\n  assertEquals(\"number of statements\",include.size() + 5,actual.size());\n  for (  Enum<?> e : include) {\n    assertTrue(\"enum constant \" + e.name() + \" should occur\",actual.contains(createEnumOperation(e)));\n  }\n  for (  Enum<?> e : exclude) {\n    assertFalse(\"enum constant \" + e.name() + \" should not occur\",actual.contains(createEnumOperation(e)));\n  }\n}"}
{"ids": "54087", "raw_code": "public static boolean inTargetDir(File file){\n  return inTargetDir(file.toPath());\n}"}
{"ids": "29398", "raw_code": "public final boolean skipAny(char c,CharSequence csq){\n  int i=index;\n  int n=csq.length();\n  for (; (i < n) && (csq.charAt(i) == c); i++) {\n  }\n  if (i == index)   return false;\n  index=i;\n  return true;\n}"}
{"ids": "86965", "raw_code": "public Phone createPhone(String value){\n  PhoneField phoneImpl=new PhoneField();\n  try {\n    phoneImpl.setValue(value);\n  }\n catch (  SdpException s) {\n    s.printStackTrace();\n  }\n  return phoneImpl;\n}"}
{"ids": "32628", "raw_code": "private String convertToHtml(final String string){\n  return \"<pre><br/>\" + string.replaceAll(\"\\n\",\"<br/>\") + \"<br/></pre>\";\n}"}
{"ids": "49325", "raw_code": "public Image createAcceleratedImage(Component target,int width,int height){\n  ColorModel model=getColorModel(Transparency.OPAQUE);\n  WritableRaster wr=model.createCompatibleWritableRaster(width,height);\n  return new OffScreenImage(target,model,wr,model.isAlphaPremultiplied());\n}"}
{"ids": "43492", "raw_code": "public static void writeStringToWriter(String string,Writer writer) throws IOException {\n  BufferedWriter bw=new BufferedWriter(writer);\n  try {\n    bw.write(string);\n  }\n  finally {\n    bw.close();\n  }\n}"}
{"ids": "66219", "raw_code": "public boolean isFlat(){\n  return TYPE_FLAT.equals(getType());\n}"}
{"ids": "83623", "raw_code": "@Deprecated private List<CharSequence> buildLimitedNetworksList(){\n  final Context context=getActivity();\n  final ArrayList<CharSequence> limited=Lists.newArrayList();\n  if (hasSubscription(context)) {\n    final String subscriberId=getActiveSubscriberId(context);\n    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) {\n      limited.add(getText(R.string.data_usage_list_mobile));\n    }\n    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) {\n      limited.add(getText(R.string.data_usage_tab_3g));\n    }\n    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) {\n      limited.add(getText(R.string.data_usage_tab_4g));\n    }\n  }\n  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {\n    limited.add(getText(R.string.data_usage_tab_wifi));\n  }\n  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {\n    limited.add(getText(R.string.data_usage_tab_ethernet));\n  }\n  return limited;\n}"}
{"ids": "29304", "raw_code": "public int evalRPN(String[] tokens){\n  if (tokens == null || tokens.length == 0)   return 0;\n  Stack<String> s=new Stack<String>();\n  int len=tokens.length;\n  for (int i=0; i < len; i++) {\n    String cur=tokens[i];\n    if (isOperator(cur)) {\n      int t2=Integer.parseInt(s.pop());\n      int t1=Integer.parseInt(s.pop());\n      int res=calculate(t1,t2,cur);\n      s.push(Integer.toString(res));\n    }\n else     s.push(cur);\n  }\n  return Integer.valueOf(s.peek());\n}"}
{"ids": "78815", "raw_code": "@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){\n  return term1.compareTo(term2);\n}"}
{"ids": "16133", "raw_code": "public AABB merge(AABB other){\n  minX=Math.min(minX,other.minX);\n  maxX=Math.max(maxX,other.maxX);\n  minY=Math.min(minY,other.minY);\n  maxY=Math.max(maxY,other.maxY);\n  minZ=Math.min(minZ,other.minZ);\n  maxZ=Math.max(maxZ,other.maxZ);\n  return this;\n}"}
{"ids": "10298", "raw_code": "public static String generateAutoTag(int stackOffset){\n  StackTraceElement[] currentStack=getCurrentStack();\n  StackTraceElement element=currentStack[stackOffset];\n  String className=element.getClassName();\n  String pkgPath[]=className.split(\"\\\\.\");\n  if (pkgPath.length > 0) {\n    className=pkgPath[pkgPath.length - 1];\n  }\n  StringBuilder sbInnerClass=new StringBuilder();\n  int index;\n  String strLoop=className;\n  while ((index=strLoop.lastIndexOf(\"$\")) != -1) {\n    String piece=strLoop.substring(index + 1);\n    sbInnerClass.insert(0,piece);\n    if (!piece.matches(\"[0-9$]+\")) {\n      break;\n    }\n    sbInnerClass.insert(0,\"$\");\n    strLoop=strLoop.substring(0,index);\n  }\n  if (sbInnerClass.length() > 0 && sbInnerClass.charAt(0) == '$') {\n    sbInnerClass.deleteCharAt(0);\n  }\n  String innerClassName=sbInnerClass.toString();\n  if (TextUtils.isDigitsOnly(innerClassName)) {\n    innerClassName=null;\n  }\n  return TextUtils.isEmpty(innerClassName) ? className : innerClassName;\n}"}
{"ids": "70944", "raw_code": "private void handleSubscribe(String[] args){\nswitch (args[1]) {\ncase \"rr\":\n    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);\n  payloadSubscribers.put(args[2],rrsub);\nidToType.put(args[2],args[1]);\nReactiveSocket rrclient=createClient.get();\nPublisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));\nrrpub.subscribe(rrsub);\nbreak;\ncase \"rs\":\nTestSubscriber<Payload> rssub=new TestSubscriber<>(0L);\npayloadSubscribers.put(args[2],rssub);\nidToType.put(args[2],args[1]);\nReactiveSocket rsclient=createClient.get();\nPublisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));\nrspub.subscribe(rssub);\nbreak;\ncase \"sub\":\nTestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);\npayloadSubscribers.put(args[2],rsubsub);\nidToType.put(args[2],args[1]);\nReactiveSocket rsubclient=createClient.get();\nPublisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));\nrsubpub.subscribe(rsubsub);\nbreak;\ncase \"fnf\":\nTestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);\nfnfSubscribers.put(args[2],fnfsub);\nidToType.put(args[2],args[1]);\nReactiveSocket fnfclient=createClient.get();\nPublisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));\nfnfpub.subscribe(fnfsub);\nbreak;\ndefault :\nbreak;\n}\n}"}
{"ids": "67417", "raw_code": "@PostConstruct public void init(){\n  configurationViews.add(defaultDistributionSetTypeLayout);\n  configurationViews.add(authenticationConfigurationView);\n  configurationViews.add(pollingConfigurationView);\n}"}
{"ids": "77976", "raw_code": "@Override public void start(){\n  for (int i=0; i < threadCount; ++i) {\n    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();\n    for (    SystemStreamPartition ssp : ssps) {\n      if (Math.abs(ssp.hashCode()) % threadCount == i) {\n        threadSsps.add(ssp);\n      }\n    }\n    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),\"MockSystemConsumer-\" + i);\n    thread.setDaemon(true);\n    threads.add(thread);\n    thread.start();\n  }\n}"}
{"ids": "42920", "raw_code": "private List<double[]> initializeWeightsND(){\n  int N=50;\n  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);\n  for (int i=0; i < numberOfPoints * N; i++) {\n    double[] weight=new double[numberOfObjectives];\n    for (int j=0; j < numberOfObjectives; j++) {\n      weight[j]=PRNG.nextDouble();\n    }\n    double sum=StatUtils.sum(weight);\n    for (int j=0; j < numberOfObjectives; j++) {\n      weight[j]/=sum;\n    }\n    candidates.add(weight);\n  }\n  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);\n  for (int i=0; i < numberOfObjectives; i++) {\n    double[] weight=new double[numberOfObjectives];\n    weight[i]=1.0;\n    weights.add(weight);\n  }\n  while (weights.size() < numberOfPoints) {\n    double[] weight=null;\n    double distance=Double.NEGATIVE_INFINITY;\n    for (int i=0; i < candidates.size(); i++) {\n      double d=Double.POSITIVE_INFINITY;\n      for (int j=0; j < weights.size(); j++) {\n        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));\n      }\n      if (d > distance) {\n        weight=candidates.get(i);\n        distance=d;\n      }\n    }\n    weights.add(weight);\n    candidates.remove(weight);\n  }\n  return weights;\n}"}
{"ids": "71592", "raw_code": "public void removeColumn(Column column){\n  if (column != null) {\n    columns.remove(column);\n  }\n}"}
{"ids": "5415", "raw_code": "public String info(){\n  StringBuilder sb=new StringBuilder(\"Report: size: \" + tableSize + \", elements: \"+ elements+ \", loadFactor: \"+ loadFactor+ \", threshold: \"+ threshold);\n  sb.append(\", empty bins:\" + numEmpty);\n  int size=0;\n  int min=elements;\n  int max=-1;\n  for (int i=0; i < tableSize; i++) {\n    LinkedList<String> list=bins[i];\n    if (list != null) {\n      int sz=list.size();\n      size+=sz;\n      if (sz < min) {\n        min=sz;\n      }\n      if (sz > max) {\n        max=sz;\n      }\n    }\n  }\n  float avg=size;\n  int base=(tableSize - numEmpty);\n  if (base == 0) {\n    sb.append(\", average:0\");\n    sb.append(\", minListSize:0\");\n    sb.append(\", maxListSize:0\");\n  }\n else {\n    avg/=base;\n    sb.append(\", average:\" + avg);\n    sb.append(\", minListSize:\" + min);\n    sb.append(\", maxListSize:\" + max);\n  }\n  return sb.toString();\n}"}
{"ids": "61777", "raw_code": "public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo){\n  update();\n  boolean result=false;\n  if (!mAvailableOutputBuffers.isEmpty()) {\n    int index=mAvailableOutputBuffers.peek();\n    MediaCodec.BufferInfo info=mOutputBufferInfo[index];\n    out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags);\n    result=true;\n  }\n  return result;\n}"}
{"ids": "25881", "raw_code": "@Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException {\n  try {\n    fillScannedResult(blocksChunkHolder);\n  }\n catch (  FilterUnsupportedException e) {\n    throw new QueryExecutionException(e.getMessage());\n  }\n  return scannedResult;\n}"}
{"ids": "62026", "raw_code": "@Override public int hashCode(){\n  return subconditions.hashCode() - operator.hashCode();\n}"}
{"ids": "66360", "raw_code": "public void balanceSegments(){\n  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();\n  for (int i=0; i < elements.length; i++) {\n    MAcctSchemaElement ase=elements[i];\n    if (ase.isBalanced())     balanceSegment(ase.getElementType());\n  }\n}"}
{"ids": "36428", "raw_code": "public AnnotationDrawer(final AnnotationsModel model,final ProcessRendererModel rendererModel){\n  this.model=model;\n  this.rendererModel=rendererModel;\n  this.displayCache=new HashMap<>();\n  this.cachedID=new HashMap<>();\n  pane=new JEditorPane(\"text/html\",\"\");\n  pane.setBorder(null);\n  pane.setOpaque(false);\n}"}
{"ids": "80975", "raw_code": "public boolean hasUserPartitions(){\n  return !userOutput.isEmpty();\n}"}
{"ids": "37480", "raw_code": "@Override public void insertString(final int offs,final String str,final AttributeSet attr){\n  if (offs < 0) {\n    return;\n  }\n  if (str.length() > 1) {\n    int i;\n    for (i=0; i < str.length(); i++) {\n      if (str.charAt(i) == '\\n') {\n        remainingTextString=str.substring(i + 1);\n        remainingTextAttr=attr;\n        inputKeyListener.keyPressed(new KeyEvent(new Container(),KeyEvent.KEY_PRESSED,0,0,KeyEvent.VK_ENTER,'\\n'));\n        break;\n      }\n else {\n        insertChar(offs + i,\"\" + str.charAt(i));\n      }\n    }\n  }\n else   if (str.length() == 1) {\n    insertChar(offs,str);\n  }\n}"}
{"ids": "59580", "raw_code": "public static int putInt(byte[] bytes,int offset,int val){\n  if (littleEndian) {\n    val=Integer.reverseBytes(val);\n  }\n  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);\n  return offset + Bytes.SIZEOF_INT;\n}"}
{"ids": "28384", "raw_code": "public Item(Drawable symbol,String labelText,Font font){\n  double fontSize=font.getSize2D();\n  setLayout(new EdgeLayout(fontSize,0.0));\n  this.symbol=symbol;\n  add(symbol,Location.WEST);\n  label=new Label(labelText);\n  label.setFont(font);\n  label.setAlignmentX(0.0);\n  label.setAlignmentY(0.5);\n  add(label,Location.CENTER);\n}"}
{"ids": "80389", "raw_code": "public int consume(){\n  int consumedAmount;\n  if (Math.abs(left) < Math.abs(getRegen())) {\n    consumedAmount=left;\n    left=0;\n  }\n else {\n    consumedAmount=getRegen();\n    left-=getRegen();\n  }\n  return consumedAmount;\n}"}
{"ids": "31717", "raw_code": "private Delegate delegate() throws HadoopIgfsCommunicationException {\n  Exception errShmem=null;\n  Exception errTcp=null;\n  Delegate curDelegate=delegateRef.get();\n  if (curDelegate != null)   return curDelegate;\n  boolean skipInProc=parameter(conf,PARAM_IGFS_ENDPOINT_NO_EMBED,authority,false);\n  if (!skipInProc) {\n    IgfsEx igfs=getIgfsEx(endpoint.grid(),endpoint.igfs());\n    if (igfs != null) {\n      HadoopIgfsEx hadoop=null;\n      try {\n        hadoop=new HadoopIgfsInProc(igfs,log,userName);\n        curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));\n      }\n catch (      IOException|IgniteCheckedException e) {\n        if (e instanceof HadoopIgfsCommunicationException)         if (hadoop != null)         hadoop.close(true);\n        if (log.isDebugEnabled())         log.debug(\"Failed to connect to in-process IGFS, fallback to IPC mode.\",e);\n      }\n    }\n  }\n  boolean skipLocShmem=parameter(conf,PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM,authority,false);\n  if (curDelegate == null && !skipLocShmem && !U.isWindows()) {\n    HadoopIgfsEx hadoop=null;\n    try {\n      hadoop=new HadoopIgfsOutProc(endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName);\n      curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));\n    }\n catch (    IOException|IgniteCheckedException e) {\n      if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true);\n      if (log.isDebugEnabled())       log.debug(\"Failed to connect to IGFS using shared memory [port=\" + endpoint.port() + ']',e);\n      errShmem=e;\n    }\n  }\n  boolean skipLocTcp=parameter(conf,PARAM_IGFS_ENDPOINT_NO_LOCAL_TCP,authority,false);\n  if (curDelegate == null && !skipLocTcp) {\n    HadoopIgfsEx hadoop=null;\n    try {\n      hadoop=new HadoopIgfsOutProc(LOCALHOST,endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName);\n      curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));\n    }\n catch (    IOException|IgniteCheckedException e) {\n      if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true);\n      if (log.isDebugEnabled())       log.debug(\"Failed to connect to IGFS using TCP [host=\" + endpoint.host() + \", port=\"+ endpoint.port()+ ']',e);\n      errTcp=e;\n    }\n  }\n  if (curDelegate == null && (skipLocTcp || !F.eq(LOCALHOST,endpoint.host()))) {\n    HadoopIgfsEx hadoop=null;\n    try {\n      hadoop=new HadoopIgfsOutProc(endpoint.host(),endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName);\n      curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));\n    }\n catch (    IOException|IgniteCheckedException e) {\n      if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true);\n      if (log.isDebugEnabled())       log.debug(\"Failed to connect to IGFS using TCP [host=\" + endpoint.host() + \", port=\"+ endpoint.port()+ ']',e);\n      errTcp=e;\n    }\n  }\n  if (curDelegate != null) {\n    if (!delegateRef.compareAndSet(null,curDelegate))     curDelegate.doomed=true;\n    return curDelegate;\n  }\n else {\n    SB errMsg=new SB(\"Failed to connect to IGFS [endpoint=igfs://\" + authority + \", attempts=[\");\n    if (errShmem != null)     errMsg.a(\"[type=SHMEM, port=\" + endpoint.port() + \", err=\"+ errShmem+ \"], \");\n    errMsg.a(\"[type=TCP, host=\" + endpoint.host() + \", port=\"+ endpoint.port()+ \", err=\"+ errTcp+ \"]] \");\n    errMsg.a(\"(ensure that IGFS is running and have IPC endpoint enabled; ensure that \" + \"ignite-shmem-1.0.0.jar is in Hadoop classpath if you use shared memory endpoint).\");\n    throw new HadoopIgfsCommunicationException(errMsg.toString());\n  }\n}"}
{"ids": "7239", "raw_code": "public FromClause add(OuterJoinQualifier outerJoinQualifier){\n  outerJoinQualifiers.add(outerJoinQualifier);\n  return this;\n}"}
{"ids": "26149", "raw_code": "public int size(){\n  return patterns.size();\n}"}
{"ids": "78103", "raw_code": "private SublimeBaseMenuItem addInternal(int pivotID,Positioned positioned,SublimeBaseMenuItem newItem){\n  int newItemGroupId=newItem.getGroupId();\n  checkExistenceOfGroup(newItemGroupId);\n  int pivotIndex=findItemIndex(pivotID);\n  SublimeBaseMenuItem pivot=mItems.get(pivotIndex);\n  if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {\n    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId);\n    int index=findGroupIndex(newItemGroupId);\n    if (index >= 0) {\n      mItems.add(index,newItem);\n    }\n else {\n      if (positioned == Positioned.BEFORE) {\n        if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {\n          mItems.add(pivotIndex,newItem);\n        }\n else {\n          mItems.add(newItem);\n        }\n      }\n else       if (positioned == Positioned.AFTER) {\n        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) {\n          mItems.add(pivotIndex + 1,newItem);\n        }\n else {\n          mItems.add(newItem);\n        }\n      }\n    }\n  }\n else {\n    if (newItemGroupId != NO_GROUP_ID) {\n      int lastGroupIndex=findLastGroupIndex(newItemGroupId);\n      if (lastGroupIndex == mItems.size()) {\n        if (positioned == Positioned.BEFORE) {\n          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) {\n            mItems.add(pivotIndex,newItem);\n          }\n else {\n            mItems.add(newItem);\n          }\n        }\n else         if (positioned == Positioned.AFTER) {\n          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {\n            mItems.add(pivotIndex + 1,newItem);\n          }\n else {\n            mItems.add(newItem);\n          }\n        }\n      }\n else {\n        if (newItemGroupId == pivot.getGroupId()) {\n          if (positioned == Positioned.BEFORE) {\n            if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {\n              mItems.add(pivotIndex,newItem);\n            }\n else {\n              mItems.add(lastGroupIndex + 1,newItem);\n            }\n          }\n else           if (positioned == Positioned.AFTER) {\n            mItems.add(pivotIndex + 1,newItem);\n          }\n        }\n else {\n          mItems.add(lastGroupIndex + 1,newItem);\n        }\n      }\n    }\n else {\n      if (positioned == Positioned.BEFORE) {\n        if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) {\n          mItems.add(pivotIndex,newItem);\n        }\n else {\n          mItems.add(newItem);\n        }\n      }\n else       if (positioned == Positioned.AFTER) {\n        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {\n          mItems.add(pivotIndex + 1,newItem);\n        }\n else {\n          mItems.add(newItem);\n        }\n      }\n    }\n  }\n  onItemsChanged();\n  return newItem;\n}"}
{"ids": "67973", "raw_code": "public static void writeUint8(OutputStream theOs,int theValue) throws IOException {\n  theOs.write(theValue);\n}"}
{"ids": "53774", "raw_code": "@Override public void addHeader(final String header,final String value){\n  mHeadersOptions.add(new HeaderOption(header,value));\n}"}
{"ids": "13977", "raw_code": "public void store() throws SAMLException {\n  try {\n    keyProvider.store();\n  }\n catch (  KeyStoreException e) {\n    throw new SAMLException(e.getMessage());\n  }\ncatch (  CertificateException e) {\n    throw new SAMLException(e.getMessage());\n  }\ncatch (  NoSuchAlgorithmException e) {\n    throw new SAMLException(e.getMessage());\n  }\ncatch (  IOException e) {\n    throw new SAMLException(e.getMessage());\n  }\n}"}
{"ids": "36937", "raw_code": "static void appendToPointerHierarchy(final BaseType type,final BaseType pointer){\n  Preconditions.checkNotNull(type,\"Error: type argument can not be null.\");\n  Preconditions.checkNotNull(pointer,\"Error: pointer argument can not be null.\");\n  Preconditions.checkArgument(type != pointer,\"Error: Can not establish pointer relation between identical types.\");\n  Preconditions.checkArgument(pointer.pointedToBy != type,\"Error: Can not establish circular pointer relation.\");\n  Preconditions.checkArgument(type.pointsTo != pointer,\"Error: Can not establish circular pointer relation.\");\n  pointer.pointsTo=type;\n  type.pointedToBy=pointer;\n}"}
{"ids": "54399", "raw_code": "public Optional<T> last(){\n  Iterator<T> iterator=iterator();\n  T value=null;\n  while (iterator.hasNext())   value=iterator.next();\n  return Optional.of(value);\n}"}
{"ids": "72342", "raw_code": "public static void threadSleep(long millis){\n  try {\n    Thread.sleep(millis);\n  }\n catch (  InterruptedException ex) {\n    Log.e(\"Exception\",StringUtils.exceptionStackTraceToString(ex));\n  }\n}"}
{"ids": "84533", "raw_code": "static boolean isPackageAccess(final int modifiers){\n  return (modifiers & ACCESS_TEST) == 0;\n}"}
{"ids": "80247", "raw_code": "ManagedWindowDecorator(Window window,String windowId){\n  this.window=window;\n  name=\"system.\" + windowId;\n}"}
{"ids": "23764", "raw_code": "boolean handleRemoteCanRebalance(long size){\n  return false;\n}"}
{"ids": "75020", "raw_code": "public static File toSLDFile(final File file){\n  final String path=file.getAbsolutePath();\n  final String base=path.substring(0,path.length() - 4);\n  String newPath=base + \".sld\";\n  File sld=new File(newPath);\n  if (sld.exists()) {\n    return sld;\n  }\n  newPath=base + \".SLD\";\n  sld=new File(newPath);\n  if (sld.exists()) {\n    return sld;\n  }\n  return null;\n}"}
{"ids": "24878", "raw_code": "private String insertProperties(String template,Map<String,String> properties){\n  for (  Entry<String,String> entry : properties.entrySet()) {\n    template=template.replace(entry.getKey(),entry.getValue());\n  }\n  return template;\n}"}
{"ids": "16824", "raw_code": "public static void changeFont(JComponent comp,int style){\n  Font font=comp.getFont();\n  comp.setFont(font.deriveFont(style));\n}"}
{"ids": "59748", "raw_code": "public void drawContours(Mat img,Color color){\n  Drawing.drawContours(img,contours,color);\n}"}
{"ids": "33666", "raw_code": "public static void saveX509Cert(String certStr,File certFile) throws IOException {\n  BufferedWriter writer=new BufferedWriter(new FileWriter(certFile));\n  writer.write(BEGIN_CERT);\n  writer.newLine();\n  writer.write(certStr);\n  writer.newLine();\n  writer.write(END_CERT);\n  writer.newLine();\n  writer.close();\n}"}
{"ids": "73641", "raw_code": "public void clearOnCentralPositionChangedListener(){\n  mOnCentralPositionChangedListeners.clear();\n}"}
{"ids": "52690", "raw_code": "public static boolean isStanza(Packet packet){\n  if (packet instanceof Message)   return true;\n  if (packet instanceof IQ)   return true;\n  if (packet instanceof Presence)   return true;\n  return false;\n}"}
{"ids": "74887", "raw_code": "@Override public int execute(final FormObject form,final int type,final String code,final int eventType,final char keyPressed){\n  int messageCode=ActionHandler.NOMESSAGE;\n  if (code instanceof String) {\n    final String js=code;\n    final String[] args=JSFunction.convertToArray(js);\n    final String command=args[0];\n    if (command.startsWith(\"AF\")) {\n      messageCode=handleAFCommands(form,command,js,args,eventType,keyPressed);\n    }\n  }\n  return messageCode;\n}"}
{"ids": "62859", "raw_code": "private boolean needsUpdate(Long bundleVersion,String beanVersion){\n  if (beanVersion.contains(\"OAD\")) {\n    Log.i(TAG,\"Bundle version: \" + bundleVersion);\n    Log.i(TAG,\"Bean version: \" + beanVersion);\n    return true;\n  }\n else {\n    try {\n      long parsedVersion=Long.parseLong(beanVersion.split(\" \")[0]);\n      Log.i(TAG,\"Bundle version: \" + bundleVersion);\n      Log.i(TAG,\"Bean version: \" + parsedVersion);\n      if (bundleVersion > parsedVersion) {\n        return true;\n      }\n else {\n        Log.i(TAG,\"No update required!\");\n      }\n    }\n catch (    NumberFormatException e) {\n      Log.e(TAG,\"Couldn't parse Bean Version: \" + beanVersion);\n      fail(BeanError.UNPARSABLE_FW_VERSION);\n    }\n  }\n  return false;\n}"}
{"ids": "52476", "raw_code": "public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){\n  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {\n    String logicalTableName=entry.getKey();\n    TableGroup group=entry.getValue();\n    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);\n  }\n}"}
{"ids": "36204", "raw_code": "public Process(final String xmlString) throws IOException, XMLException {\n  initContext();\n  StringReader in=new StringReader(xmlString);\n  readProcess(in);\n  in.close();\n}"}
{"ids": "40845", "raw_code": "public ConsulTopologyFraction(){\n  this.url=DEFAULT_URL;\n}"}
{"ids": "10391", "raw_code": "protected String buildQualifierRegex(String qualifierValue){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"^\");\n  sb.append(qualifierValue);\n  sb.append(\"$\");\n  return sb.toString();\n}"}
{"ids": "71614", "raw_code": "public String shortenName(String name,int desiredLength){\n  int originalLength=name.length();\n  if ((desiredLength <= 0) || (originalLength <= desiredLength)) {\n    return name;\n  }\n  int delta=originalLength - desiredLength;\n  int startCut=desiredLength / 2;\n  StringBuffer result=new StringBuffer();\n  result.append(name.substring(0,startCut));\n  if (((startCut == 0) || (name.charAt(startCut - 1) != '_')) && ((startCut + delta + 1 == originalLength) || (name.charAt(startCut + delta + 1) != '_'))) {\n    result.append(\"_\");\n  }\n  result.append(name.substring(startCut + delta + 1,originalLength));\n  return result.toString();\n}"}
{"ids": "28366", "raw_code": "public static Color blend(Color color1,Color color2,double weight){\n  double w2=MathUtils.limit(weight,0.0,1.0);\n  double w1=1.0 - w2;\n  int r=(int)Math.round(w1 * color1.getRed() + w2 * color2.getRed());\n  int g=(int)Math.round(w1 * color1.getGreen() + w2 * color2.getGreen());\n  int b=(int)Math.round(w1 * color1.getBlue() + w2 * color2.getBlue());\n  int a=(int)Math.round(w1 * color1.getAlpha() + w2 * color2.getAlpha());\n  return new Color(r,g,b,a);\n}"}
{"ids": "5014", "raw_code": "private void decideUILookAndFeel(MainOptions options){\n  try {\n    boolean systemPlaf=false;\n    systemPlaf=options.system_plaf;\n    String systemPlafReq=System.getenv(\"systemplaf\");\n    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(\"true\"))     systemPlaf=true;\n    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n  }\n catch (  Exception exc) {\n    exc.printStackTrace();\n  }\n}"}
{"ids": "85654", "raw_code": "public static byte[] hexStringToByteArray(String strA){\n  ByteArrayOutputStream result=new ByteArrayOutputStream();\n  byte sum=(byte)0x00;\n  boolean nextCharIsUpper=true;\n  for (int i=0; i < strA.length(); i++) {\n    char c=strA.charAt(i);\nswitch (Character.toUpperCase(c)) {\ncase '0':\n      if (nextCharIsUpper) {\n        sum=(byte)0x00;\n        nextCharIsUpper=false;\n      }\n else {\n        sum|=(byte)0x00;\n        result.write(sum);\n        nextCharIsUpper=true;\n      }\n    break;\ncase '1':\n  if (nextCharIsUpper) {\n    sum=(byte)0x10;\n    nextCharIsUpper=false;\n  }\n else {\n    sum|=(byte)0x01;\n    result.write(sum);\n    nextCharIsUpper=true;\n  }\nbreak;\ncase '2':\nif (nextCharIsUpper) {\nsum=(byte)0x20;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x02;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase '3':\nif (nextCharIsUpper) {\nsum=(byte)0x30;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x03;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase '4':\nif (nextCharIsUpper) {\nsum=(byte)0x40;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x04;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase '5':\nif (nextCharIsUpper) {\nsum=(byte)0x50;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x05;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase '6':\nif (nextCharIsUpper) {\nsum=(byte)0x60;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x06;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase '7':\nif (nextCharIsUpper) {\nsum=(byte)0x70;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x07;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase '8':\nif (nextCharIsUpper) {\nsum=(byte)0x80;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x08;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase '9':\nif (nextCharIsUpper) {\nsum=(byte)0x90;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x09;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase 'A':\nif (nextCharIsUpper) {\nsum=(byte)0xA0;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x0A;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase 'B':\nif (nextCharIsUpper) {\nsum=(byte)0xB0;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x0B;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase 'C':\nif (nextCharIsUpper) {\nsum=(byte)0xC0;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x0C;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase 'D':\nif (nextCharIsUpper) {\nsum=(byte)0xD0;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x0D;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase 'E':\nif (nextCharIsUpper) {\nsum=(byte)0xE0;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x0E;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ncase 'F':\nif (nextCharIsUpper) {\nsum=(byte)0xF0;\nnextCharIsUpper=false;\n}\n else {\nsum|=(byte)0x0F;\nresult.write(sum);\nnextCharIsUpper=true;\n}\nbreak;\ndefault :\nbreak;\n}\n}\nif (!nextCharIsUpper) {\nthrow new RuntimeException(\"The String did not contain an equal number of hex digits\");\n}\nreturn result.toByteArray();\n}"}
{"ids": "73194", "raw_code": "public void removeSensorSelectionListener(SensorSelectionListener listener){\n  listenerList.remove(SensorSelectionListener.class,listener);\n}"}
{"ids": "29428", "raw_code": "public void write(int c) throws IOException {\n  if (_output == null)   throw new IOException(\"Writer closed\");\n  _output.append((char)c);\n}"}
{"ids": "32183", "raw_code": "public void register(GridCacheTtlManager mgr){\nsynchronized (mux) {\n    if (cleanupWorker == null)     startCleanupWorker();\n    mgrs.add(mgr);\n  }\n}"}
{"ids": "14445", "raw_code": "public void initializeKeyStore(){\n  try {\n    Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(logName);\n    resetCurrentFileList(logName);\n    addToCurrentFileList(logName,logName,logName);\n    String logPath=lmanager.getProperty(LogConstants.LOG_LOCATION);\n    if (!logPath.endsWith(\"/\"))     logPath+=\"/\";\n    String fileName=logName;\n    String loggerFileName=logPath + PREFIX + \"log.\"+ fileName;\n    String verifierFileName=logPath + PREFIX + \"ver.\"+ fileName;\n    Debug.message(logName + \":Logger Keystore name = \" + loggerFileName);\n    Debug.message(logName + \":Verifier Keystore name= \" + verifierFileName);\n    helper.initializeSecureLogHelper(loggerFileName,logPassword,verifierFileName,logPassword);\n    Debug.message(logName + \":Initialized SecureLogHelper\");\n    helper.initializeVerifier(verifierFileName,logPassword,verPassword);\n    Debug.message(logName + \":Done init of SecureLogHelper and Verifier\");\n  }\n catch (  Exception e) {\n    Debug.error(logName + \":Logger: exception thrown while initializing secure logger\",e);\n  }\n}"}
{"ids": "30932", "raw_code": "public void discard(ServiceRegistrar reg){\nsynchronized (registrars) {\n    if (terminated) {\n      throw new IllegalStateException(\"discovery terminated\");\n    }\n    if (reg == null)     return;\n    sendDiscarded(reg,null);\n  }\n}"}
{"ids": "13113", "raw_code": "public boolean isFinalState(int state){\n  return (state < 0) ? false : fFinalStateFlags[state];\n}"}
{"ids": "4234", "raw_code": "public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){\n  if (maxNumScaleMarkers < 2) {\n    maxNumScaleMarkers=2;\n  }\n  int scale=calcScale(proteinLength,maxNumScaleMarkers);\n  StringBuilder sb=new StringBuilder(\"0\");\n  int index=0;\n  int numRemaining=proteinLength;\n  while (index <= proteinLength) {\n    index+=scale;\n    numRemaining-=scale;\n    sb.append(\",\");\n    if ((numRemaining > 0) && (numRemaining < scale)) {\n      if (numRemaining < (scale / 2)) {\n        sb.append(proteinLength);\n        break;\n      }\n    }\n    if (index >= proteinLength) {\n      sb.append(proteinLength);\n    }\n else {\n      sb.append(index);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "54613", "raw_code": "public void writeFigTreeBlock(Map<String,Object> settings) throws IOException {\n  writer.println(\"\\nbegin figtree;\");\n  for (  String key : settings.keySet()) {\n    Object value=settings.get(key);\n    writer.println(\"\\tset \" + key + \"=\"+ createString(value)+ \";\");\n  }\n  writer.println(\"end;\\n\");\n}"}
{"ids": "49078", "raw_code": "public int hashCode(){\n  return font.hashCode() ^ glyphs.length;\n}"}
{"ids": "13277", "raw_code": "@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {\n  fInDTD=true;\n  try {\n    if (fLexicalHandler != null) {\n      fLexicalHandler.startDTD(rootElement,publicId,systemId);\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n  if (fDeclHandler != null) {\n    fDeclaredAttrs=new SymbolHash();\n  }\n}"}
{"ids": "66212", "raw_code": "public void cleanStart(){\n  Connection conn=getConnection(true,true);\n  if (conn == null)   throw new IllegalStateException(\"No Database\");\n  dropDatabase(conn);\n  createUser(conn);\n  createDatabase(conn);\n  try {\n    if (conn != null)     conn.close();\n  }\n catch (  SQLException e2) {\n    log.log(Level.SEVERE,\"close connection\",e2);\n  }\n  conn=null;\n}"}
{"ids": "65300", "raw_code": "static TemplateModelException newMethodArgInvalidValueException(String methodName,int argIdx,Object... details){\n  return new _TemplateModelException(methodName,\"(...) argument #\",Integer.valueOf(argIdx + 1),\" had invalid value: \",details);\n}"}
{"ids": "23215", "raw_code": "private void loadMap(String extension,String mimeType){\n  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {\n    mimeTypeToExtensionMap.put(mimeType,extension);\n  }\n  extensionToMimeTypeMap.put(extension,mimeType);\n  if (isImageType(mimeType)) {\n    imageMimeTypeSet.add(mimeType);\n  }\n}"}
{"ids": "34391", "raw_code": "private String convertTimestamp(){\n  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + \"+\",\"\\\\\\\\S+\");\n  result=result.replaceAll(Pattern.quote(\".\"),\"\\\\\\\\.\");\n  return result;\n}"}
{"ids": "49545", "raw_code": "public static String encode(byte[] bytes){\n  int len=bytes.length;\n  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);\n  int i=0;\n  int j=len;\n  while (j >= 3) {\n    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));\n    i+=3;\n    j-=3;\n  }\n  if (j == 2) {\n    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));\n  }\n  if (j == 1) {\n    encoded.append(to64(((bytes[i] & 0xff)),2));\n  }\n  return encoded.toString();\n}"}
{"ids": "40610", "raw_code": "private static boolean containsChroot(String zkHost){\n  return zkHost.contains(\"/\");\n}"}
{"ids": "53975", "raw_code": "public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){\n  if (contains(client.listDatabaseNames(),dbName)) {\n    dbOperation.accept(client.getDatabase(dbName));\n  }\n}"}
{"ids": "71644", "raw_code": "protected int createHashCode(){\n  int result=uri.hashCode() ^ prefix.hashCode();\n  if (result == 0) {\n    result=0xbabe;\n  }\n  return result;\n}"}
{"ids": "35508", "raw_code": "@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){\n  exception.printStackTrace();\n  Log.e(\"TrafficService\",\"Error connecting: \" + exception.getMessage());\n  onDisconnect(false);\n}"}
{"ids": "44925", "raw_code": "static private String SHORT_Max_Plus(){\n  long tempValue=Short.MAX_VALUE + 1;\n  return String.valueOf(tempValue);\n}"}
{"ids": "72786", "raw_code": "public static String encode(String value){\n  value=value.replace(\"&\",\"&amp;\");\n  value=value.replace(\"<\",\"&lt;\");\n  value=value.replace(\">\",\"&gt;\");\n  value=value.replace(\"\\\"\",\"&quot;\");\n  value=value.replace(\"'\",\"&#x27;\");\n  value=value.replace(\"/\",\"&#x2F;\");\n  return value;\n}"}
{"ids": "56869", "raw_code": "public void createDatabaseEntitiesForStoragePolicyTesting(){\n  createDatabaseEntitiesForStoragePolicyTesting(AbstractServiceTest.STORAGE_POLICY_NAMESPACE_CD,Arrays.asList(AbstractServiceTest.STORAGE_POLICY_RULE_TYPE),AbstractServiceTest.BDEF_NAMESPACE,AbstractServiceTest.BDEF_NAME,Arrays.asList(AbstractServiceTest.FORMAT_FILE_TYPE_CODE),Arrays.asList(AbstractServiceTest.STORAGE_NAME),Arrays.asList(AbstractServiceTest.STORAGE_NAME_2));\n}"}
{"ids": "68785", "raw_code": "private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {\n  int rotation=0;\n  RectF mediabox=null;\n  RectF cropbox=null;\n  PDFObject mediaboxObj=getInheritedValue(pageObj,\"MediaBox\");\n  if (mediaboxObj != null) {\n    mediabox=parseRect(mediaboxObj);\n  }\n  PDFObject cropboxObj=getInheritedValue(pageObj,\"CropBox\");\n  if (cropboxObj != null) {\n    cropbox=parseRect(cropboxObj);\n  }\n  PDFObject rotateObj=getInheritedValue(pageObj,\"Rotate\");\n  if (rotateObj != null) {\n    rotation=rotateObj.getIntValue();\n  }\n  RectF bbox=((cropbox == null) ? mediabox : cropbox);\n  return new PDFPage(pagenum,bbox,rotation,cache);\n}"}
{"ids": "14623", "raw_code": "static Map addElementToMap(String key,Set values,Map toMap){\n  if ((key != null) && (toMap != null)) {\n    toMap.put(key,values);\n  }\n  return toMap;\n}"}
{"ids": "80102", "raw_code": "public void saveBootProp() throws IOException {\n  if (!bootProp.equals(bootPropOrg)) {\n    final String propFile=jarFolder + \"jar.properties\";\n    final OutputStream os=new FileOutputStream(propFile);\n    try {\n      bootProp.store(os,\"Stendhal Boot Configuration\");\n    }\n  finally {\n      os.close();\n    }\n  }\n}"}
{"ids": "45278", "raw_code": "private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {\n  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));\n  try {\n    String line=reader.readLine();\n    while (line != null) {\n      if (line.startsWith(\"Recno:: \")) {\n        line=\"Recno:: \" + currentRecordNumber++;\n      }\n      writer.println(line);\n      line=reader.readLine();\n    }\n    return currentRecordNumber;\n  }\n  finally {\n    reader.close();\n  }\n}"}
{"ids": "4828", "raw_code": "public static String morpha(String text,boolean tags){\n  if (text.isEmpty()) {\n    return \"\";\n  }\n  String[] textParts=whitespace.split(text);\n  StringBuilder result=new StringBuilder();\n  try {\n    for (    String textPart : textParts) {\n      Morpha morpha=new Morpha(new StringReader(textPart),tags);\n      if (result.length() != 0) {\n        result.append(\" \");\n      }\n      result.append(morpha.next());\n    }\n  }\n catch (  Error e) {\n    return text;\n  }\ncatch (  java.io.IOException e) {\n    return text;\n  }\n  return result.toString();\n}"}
{"ids": "9221", "raw_code": "public static void deleteFile(File file) throws AdeUsageException {\n  if (!file.delete()) {\n    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());\n  }\n}"}
{"ids": "6477", "raw_code": "public Shape createCheckMark(final int x,final int y,final int w,final int h){\n  double xf=w / 12.0;\n  double hf=h / 12.0;\n  path.reset();\n  path.moveTo(x,y + 7.0 * hf);\n  path.lineTo(x + 2.0 * xf,y + 7.0 * hf);\n  path.lineTo(x + 4.75 * xf,y + 10.0 * hf);\n  path.lineTo(x + 9.0 * xf,y);\n  path.lineTo(x + 11.0 * xf,y);\n  path.lineTo(x + 5.0 * xf,y + 12.0 * hf);\n  path.closePath();\n  return path;\n}"}
{"ids": "27059", "raw_code": "public TCPChannelClient(ExecutorService executor,TCPChannelEvents eventListener,String ip,int port){\n  this.executor=executor;\n  executorThreadCheck=new ThreadUtils.ThreadChecker();\n  executorThreadCheck.detachThread();\n  this.eventListener=eventListener;\n  InetAddress address;\n  try {\n    address=InetAddress.getByName(ip);\n  }\n catch (  UnknownHostException e) {\n    reportError(\"Invalid IP address.\");\n    return;\n  }\n  if (address.isAnyLocalAddress()) {\n    socket=new TCPSocketServer(address,port);\n  }\n else {\n    socket=new TCPSocketClient(address,port);\n  }\n  socket.start();\n}"}
{"ids": "11343", "raw_code": "protected void cutSelectedBean(){\n  if (Debug.debugging(\"beanbox\"))   Debug.output(\"Enter> cutSelectedBean\");\n  if (selectedBean == null || selectedBeanLocation == null) {\n    if (Debug.debugging(\"beanbox\"))     Debug.output(\"selectedBean=\" + selectedBean);\n    if (Debug.debugging(\"beanbox\"))     Debug.output(\"selectedBeanLocation=\" + selectedBeanLocation);\n    clearSelection();\n    return;\n  }\n  try {\n    serBean=new ByteArrayOutputStream();\n    ObjectOutputStream oos=new ObjectOutputStream(serBean);\n    oos.writeObject(selectedBean);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    clearSelection();\n    if (Debug.debugging(\"beanbox\"))     Debug.output(\"Exit> copySelectedBean\");\n    return;\n  }\n  cutBean=selectedBean;\n  selectedBeanBox.showCut(selectedBean);\n  if (Debug.debugging(\"beanbox\"))   Debug.output(\"Exit> cutSelectedBean\");\n}"}
{"ids": "11319", "raw_code": "public void actionPerformed(java.awt.event.ActionEvent e){\n  Object source=e.getSource();\n  if (!(source instanceof JMenuItem))   return;\n  JMenuItem mi=(JMenuItem)source;\n  String name=mi.getText();\n  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);\n  if (targetLayer == null) {\n    Debug.message(\"defaultdndcatcher\",\"ERROR> DefaultDnDCatcher::actionPerformed: \" + \"no layer found with name \" + name);\n    return;\n  }\n  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));\n}"}
{"ids": "20227", "raw_code": "private void addEntry(){\n  model.addNewEntry();\n  removeButton.setEnabled(false);\n}"}
{"ids": "52804", "raw_code": "private void ensureSize(){\n  if (children == EMPTY_CHILDREN) {\n    children=new FPNode[1];\n    return;\n  }\n  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);\n  children=Arrays.copyOf(children,newsize);\n}"}
{"ids": "51409", "raw_code": "public UUID(long mostSigBits,long leastSigBits){\n  this.mostSigBits=mostSigBits;\n  this.leastSigBits=leastSigBits;\n  init();\n}"}
{"ids": "15480", "raw_code": "private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {\n  ResponseWriter writer=context.getResponseWriter();\n  String userHandler=getNonEmptyUserHandler(handlerValue);\n  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);\n  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {\n    behaviors=null;\n  }\n  if (params == null) {\n    params=Collections.emptyList();\n  }\n  String handler=null;\nswitch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {\ncase USER_HANDLER_ONLY:\n    handler=userHandler;\n  break;\ncase SINGLE_BEHAVIOR_ONLY:\nhandler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);\nbreak;\ncase SUBMIT_ONLY:\nhandler=getSubmitHandler(context,component,params,submitTarget,true);\nbreak;\ncase CHAIN:\nhandler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);\nbreak;\ndefault :\nassert (false);\n}\nwriter.writeAttribute(handlerName,handler,null);\n}"}
{"ids": "82934", "raw_code": "public String constructTSDBMetricName(){\n  StringBuilder sb=new StringBuilder(getScope());\n  if (_namespace != null && !_namespace.isEmpty()) {\n    sb.append(getNamespace());\n  }\n  return sb.toString();\n}"}
{"ids": "55240", "raw_code": "protected synchronized void received(int responseCode,String stream,String json){\n  FollowerInfo result=parseFollowers(stream,json);\n  if (result != null) {\n    noError(stream);\n    cached.put(stream,result);\n    if (type == Follower.Type.FOLLOWER) {\n      listener.receivedFollowers(result);\n      if (hasNewFollowers(result.followers)) {\n        listener.newFollowers(result);\n      }\n    }\n else     if (type == Follower.Type.SUBSCRIBER) {\n      listener.receivedSubscribers(result);\n    }\n    requested.add(stream);\n  }\n else {\n    String errorMessage=\"\";\n    if (responseCode == 404) {\n      errorMessage=\"Channel not found.\";\n      error(stream,10);\n    }\n else     if (responseCode == 200) {\n      errorMessage=\"Parse error.\";\n      error(stream,1);\n    }\n else     if (responseCode == 401 || responseCode == 403) {\n      errorMessage=\"Access denied.\";\n      error(stream,1);\n    }\n else     if (responseCode == 422) {\n      errorMessage=\"No data for this channel.\";\n      error(stream,10);\n    }\n else {\n      errorMessage=\"Request error.\";\n      error(stream,1);\n    }\n    FollowerInfo errorResult=new FollowerInfo(type,stream,errorMessage);\n    cached.put(stream,errorResult);\n    if (type == Follower.Type.FOLLOWER) {\n      listener.receivedFollowers(errorResult);\n    }\n else     if (type == Follower.Type.SUBSCRIBER) {\n      listener.receivedSubscribers(errorResult);\n    }\n  }\n}"}
{"ids": "30063", "raw_code": "public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {\n  PreparedStatement stmt=null;\n  ResultSet rs=null;\n  try {\n    stmt=connection.prepareStatement(rawSqlQuery);\n    for (int index=0; index < parameters.length; index++) {\n      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);\n    }\n    rs=stmt.executeQuery();\n    List<T> result=Lists.newLinkedList();\n    while (rs.next()) {\n      result.add(rowProcessor.process(rs));\n    }\n    return result;\n  }\n  finally {\n    JdbcUtils.closeResultSet(rs);\n    JdbcUtils.closeStatement(stmt);\n  }\n}"}
{"ids": "39084", "raw_code": "public void enableDependency(Capability c){\n  if (doNotCheckCapabilities()) {\n    return;\n  }\n  if (c == Capability.NOMINAL_ATTRIBUTES) {\n    enableDependency(Capability.BINARY_ATTRIBUTES);\n  }\n else   if (c == Capability.BINARY_ATTRIBUTES) {\n    enableDependency(Capability.UNARY_ATTRIBUTES);\n  }\n else   if (c == Capability.UNARY_ATTRIBUTES) {\n    enableDependency(Capability.EMPTY_NOMINAL_ATTRIBUTES);\n  }\n else   if (c == Capability.NOMINAL_CLASS) {\n    enableDependency(Capability.BINARY_CLASS);\n  }\n  m_Dependencies.add(c);\n}"}
{"ids": "71281", "raw_code": "public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){\n  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);\n  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);\n  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();\n  if (previousVariablesMap == null) {\n    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);\n  }\n else {\n    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);\n  }\n  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);\n  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);\n  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);\n}"}
{"ids": "78749", "raw_code": "public ResourcesPoet addInteger(String name,String value){\n  Element bool=document.createElement(\"integer\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(String.valueOf(value)));\n  resourceElement.appendChild(bool);\n  return this;\n}"}
{"ids": "72181", "raw_code": "public int availableInProcess(){\n  return Math.max(0,maxInProcess - pending.size());\n}"}
{"ids": "55279", "raw_code": "public boolean shouldExecuteAction(){\n  if (delay <= 0) {\n    return true;\n  }\n  long timePassed=System.currentTimeMillis() - lastActionExecuted;\n  if (timePassed > delay * 100) {\n    lastActionExecuted=System.currentTimeMillis();\n    return true;\n  }\n  return false;\n}"}
{"ids": "24049", "raw_code": "protected void handleOrDeferMessage(DistributionMessage msg){\nsynchronized (startupLock) {\n    if (beingSick || playingDead) {\n      if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {\n        startupMessages.add(new StartupEvent(msg));\n        return;\n      }\n    }\n    if (!processingEvents) {\n      startupMessages.add(new StartupEvent(msg));\n      return;\n    }\n  }\n  dispatchMessage(msg);\n}"}
{"ids": "21392", "raw_code": "public boolean zoneExportRemoveVolumes(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs,String stepId){\n  NetworkZoningParam zoningParam=zoningParams.get(0);\n  _log.info(String.format(\"Entering zoneExportRemoveVolumes for ExportGroup: %s Volumes: %s\",zoningParam.getExportGroupDisplay(),volumeURIs.toString()));\n  return doZoneExportMasksDelete(zoningParams,volumeURIs,stepId);\n}"}
{"ids": "43594", "raw_code": "private void shutdown(){\n  if (nbestListWriter != null) {\n    logger.info(\"Closing n-best writer\");\n    nbestListWriter.close();\n  }\n  if (alignmentWriter != null) {\n    logger.info(\"Closing alignment writer\");\n    alignmentWriter.close();\n  }\n}"}
{"ids": "19859", "raw_code": "public List<Map<String,String>> list(Database conn) throws SQLException {\n  ResultSet rs=null;\n  Statement statement=conn.createStatement();\n  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();\n  try {\n    rs=statement.executeQuery(select);\n    while (rs.next()) {\n      Map<String,String> shard=new HashMap<String,String>();\n      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));\n      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));\n      shardToChannels.add(shard);\n    }\n  }\n  finally {\n    close(rs);\n    close(statement);\n  }\n  return shardToChannels;\n}"}
{"ids": "80709", "raw_code": "public Boolean isHidden(File f){\n  String name=f.getName();\n  if ((name != null) && !name.equals(\"\") && (name.charAt(0) == '.')) {\n    return Boolean.TRUE;\n  }\n else {\n    return Boolean.FALSE;\n  }\n}"}
{"ids": "70073", "raw_code": "private boolean scrollViewCanScrollVertically(ScrollView scrollView,int direction){\n  final int offset=Math.max(0,scrollView.getScrollY());\n  final int range=computeVerticalScrollRange(scrollView) - scrollView.getHeight();\n  if (range == 0)   return false;\n  if (direction < 0) {\n    return offset > 0;\n  }\n else {\n    return offset < range - 1;\n  }\n}"}
{"ids": "11340", "raw_code": "public JarInfo loadJar() throws IOException {\n  ZipInputStream zis=null;\n  Manifest mf=null;\n  boolean empty=true;\n  try {\n    zis=new ZipInputStream(jarStream);\n    ZipEntry ent=null;\n    while ((ent=zis.getNextEntry()) != null) {\n      empty=false;\n      String name=ent.getName();\n      if (Manifest.isManifestName(name)) {\n        ByteArrayOutputStream baos=new ByteArrayOutputStream();\n        byte buffer[]=new byte[1024];\n        for (; ; ) {\n          int len=zis.read(buffer);\n          if (len < 0) {\n            break;\n          }\n          baos.write(buffer,0,len);\n        }\n        byte[] buf=baos.toByteArray();\n        mf=new Manifest(buf);\n      }\n    }\n  }\n catch (  IOException ex) {\n    throw ex;\n  }\ncatch (  Throwable th) {\n    th.printStackTrace();\n    throw new IOException(\"loadJar caught: \" + th);\n  }\n finally {\n    if (zis != null) {\n      try {\n        zis.close();\n      }\n catch (      Exception ex) {\n      }\n    }\n  }\n  if (empty) {\n    throw new IOException(\"JAR file is corrupt or empty\");\n  }\n  JarInfo ji=createJarInfo(mf);\n  return ji;\n}"}
{"ids": "16858", "raw_code": "public void invalidateTitleSortable(){\n  for (  Movie movie : new ArrayList<>(movieList)) {\n    movie.clearTitleSortable();\n  }\n}"}
{"ids": "61915", "raw_code": "public void addRow(Assignment head,double prob){\n  if (prob < 0.0f || prob > 1.02f) {\n    return;\n  }\n  headVars.addAll(head.getVariables());\n  table.put(head,prob);\n}"}
{"ids": "24267", "raw_code": "public byte[] createJarFromFileContent(final String fileName,final String content) throws IOException {\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  JarOutputStream jarOutputStream=new JarOutputStream(byteArrayOutputStream);\n  JarEntry entry=new JarEntry(fileName);\n  entry.setTime(System.currentTimeMillis());\n  jarOutputStream.putNextEntry(entry);\n  jarOutputStream.write(content.getBytes());\n  jarOutputStream.closeEntry();\n  jarOutputStream.close();\n  return byteArrayOutputStream.toByteArray();\n}"}
{"ids": "84263", "raw_code": "private boolean goTo(long day,boolean animate,boolean setSelected,boolean forceScroll){\n  if (setSelected) {\n    mSelectedDay.setTimeInMillis(day);\n  }\n  mTempDay.setTimeInMillis(day);\n  final int position=getPositionFromDay(day);\n  View child;\n  int i=0;\n  int top=0;\n  do {\n    child=getChildAt(i++);\n    if (child == null) {\n      break;\n    }\n    top=child.getTop();\n  }\n while (top < 0);\n  int selectedPosition;\n  if (child != null) {\n    selectedPosition=getPositionForView(child);\n  }\n else {\n    selectedPosition=0;\n  }\n  if (setSelected) {\n    mAdapter.setSelectedDay(mSelectedDay);\n  }\n  if (position != selectedPosition || forceScroll) {\n    setMonthDisplayed(mTempDay);\n    mPreviousScrollState=OnScrollListener.SCROLL_STATE_FLING;\n    if (animate) {\n      smoothScrollToPositionFromTop(position,LIST_TOP_OFFSET,GOTO_SCROLL_DURATION);\n      return true;\n    }\n else {\n      postSetSelection(position);\n    }\n  }\n else   if (setSelected) {\n    setMonthDisplayed(mSelectedDay);\n  }\n  return false;\n}"}
{"ids": "5542", "raw_code": "public boolean search(V v){\n  int h=hashMethod.hash(v);\n  LinkedList<V> list=(LinkedList<V>)table[h];\n  if (list == null) {\n    return false;\n  }\n  return list.contains(v);\n}"}
{"ids": "69030", "raw_code": "public void addListener(ColorMapListener listener){\n  listeners.add(listener);\n}"}
{"ids": "52771", "raw_code": "protected void computePDists(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists){\n  FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress(\"pdists\",relation.size(),LOG) : null;\n  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {\n    final KNNList neighbors=knn.getKNNForDBID(iditer,kreach + 1);\n    int ks=0;\n    double ssum=0.;\n    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) {\n      if (DBIDUtil.equal(neighbor,iditer)) {\n        continue;\n      }\n      final double d=neighbor.doubleValue();\n      ssum+=d * d;\n      ks++;\n    }\n    double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.;\n    pdists.putDouble(iditer,pdist);\n    LOG.incrementProcessed(prdsProgress);\n  }\n  LOG.ensureCompleted(prdsProgress);\n}"}
{"ids": "43069", "raw_code": "ExternalProblem(Process process){\n  this(process.getInputStream(),process.getOutputStream());\n  RedirectStream.redirect(process.getErrorStream(),System.err);\n}"}
{"ids": "14503", "raw_code": "protected static boolean networkMonitorExist(String nwMonName){\n  String classMethod=\"OpenSSOMonitoringUtil.networkMonitorExist: \";\n  if (debug.messageEnabled()) {\n    debug.message(classMethod + \"checking \" + nwMonName);\n  }\n  if ((nwMonName == null) || (nwMonName.length() == 0)) {\n    if (debug.warningEnabled()) {\n      debug.warning(classMethod + \"isNull\");\n    }\n    return false;\n  }\n  Set<String> ntwStats=NetworkMonitor.getInstanceNames();\n  String ss=nwMonName.toLowerCase();\n  if (ntwStats.contains(ss)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "66680", "raw_code": "public void andWith(List<QueryPredicate> predicates){\n  children.addAll(predicates);\n}"}
{"ids": "70238", "raw_code": "public void addRoll(MMRandom rng){\n  int result=rng.randomInt(this.faces) + this.min;\n  all.addElement(new Integer(result));\n  this.total+=result;\n  if (keep != -1 && all.size() >= keep) {\n    this.total=0;\n    Collections.sort(all,Collections.reverseOrder());\n    for (int i=0; i < keep; i++) {\n      this.total+=all.get(i);\n    }\n  }\n}"}
{"ids": "39207", "raw_code": "public boolean checkCanonicalUserOptions(){\n  boolean result;\n  OptionHandler handler;\n  String[] userOptions;\n  String[] userOptionsCheck;\n  print(\"Canonical user options...\");\n  try {\n    handler=getDefaultHandler();\n    handler.setOptions(getUserOptions());\n    if (getDebug()) {\n      print(\"\\n  Getting canonical user options: \");\n    }\n    userOptions=handler.getOptions();\n    if (getDebug()) {\n      println(printOptions(userOptions));\n    }\n    if (getDebug()) {\n      println(\"  Setting canonical user options\");\n    }\n    handler.setOptions(userOptions.clone());\n    if (getDebug()) {\n      println(\"  Checking canonical user options\");\n    }\n    userOptionsCheck=handler.getOptions();\n    compareOptions(userOptions,userOptionsCheck);\n    println(\"yes\");\n    result=true;\n  }\n catch (  Exception e) {\n    println(\"no\");\n    result=false;\n    if (getDebug()) {\n      println(e);\n    }\n  }\n  return result;\n}"}
{"ids": "75840", "raw_code": "public static void pushEncryptedMessage(final TextSecureEnvelope envelope){\n  while (true) {\n    try {\n      queue.put(envelope);\n      return;\n    }\n catch (    final InterruptedException e) {\n    }\n  }\n}"}
{"ids": "28706", "raw_code": "public static int randomRangeInt(int min,int max){\n  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min));\n}"}
{"ids": "21910", "raw_code": "private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){\n  Set<URI> groupSet=new HashSet<URI>();\n  addTask(taskList,source,taskId,operationType);\n  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {\n    BlockMirror mirror=entry.getKey();\n    Volume mirrorSource=entry.getValue();\n    if (source.isInCG() && null != taskList.getTaskList()) {\n      groupSet.add(mirrorSource.getConsistencyGroup());\n    }\n  }\n  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);\n  for (  BlockConsistencyGroup group : groups) {\n    addTask(taskList,group,taskId,operationType);\n  }\n}"}
{"ids": "3112", "raw_code": "public void addListener(NavigatorListener listener){\n  listeners.add(listener);\n}"}
{"ids": "78969", "raw_code": "public void closeStream(){\n  CarbonUtil.closeStreams(stream);\n  executorService.shutdown();\n}"}
{"ids": "50220", "raw_code": "public double patience(int k,F f,int N){\n  double pf=p(f);\n  BinomialDistribution dist=new BinomialDistribution(null,N,pf);\n  double p0=Math.pow(1 - pf,N);\n  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);\n}"}
{"ids": "7927", "raw_code": "public static List seriesNameListFromDataArray(Object[][] data){\n  int seriesCount=data.length;\n  List seriesNameList=new java.util.ArrayList(seriesCount);\n  for (int i=0; i < seriesCount; i++) {\n    seriesNameList.add(\"Series \" + (i + 1));\n  }\n  return seriesNameList;\n}"}
{"ids": "52966", "raw_code": "@Override public void run(){\n  MultipleObjectsBundle data=generator.loadData();\n  if (LOG.isVerbose()) {\n    LOG.verbose(\"Writing output ...\");\n  }\n  try {\n    if (outputFile.exists() && LOG.isVerbose()) {\n      LOG.verbose(\"The file \" + outputFile + \" already exists, \"+ \"the generator result will be APPENDED.\");\n    }\n    try (OutputStreamWriter outStream=new FileWriter(outputFile,true)){\n      writeClusters(outStream,data);\n    }\n   }\n catch (  IOException e) {\n    throw new AbortException(\"IO Error in data generator.\",e);\n  }\n  if (LOG.isVerbose()) {\n    LOG.verbose(\"Done.\");\n  }\n}"}
{"ids": "21778", "raw_code": "private boolean usedAllRule17Directors(Set<String> allocatedDirectors,PortAllocationContext context){\n  Set<String> rule17Directors=getRule17Directors(context);\n  for (  String director : allocatedDirectors) {\n    rule17Directors.remove(director);\n  }\n  return rule17Directors.isEmpty();\n}"}
{"ids": "85054", "raw_code": "public void stop(){\nsynchronized (privateInstanceLock) {\n    if (connectionAcceptThread == null) {\n      return;\n    }\n  }\n  isStopped.set(true);\n  try {\n    connectionAcceptThread.interrupt();\n    connectionAcceptThread.join();\n  }\n catch (  InterruptedException e) {\n  }\n  try {\n    serverSocket.close();\n  }\n catch (  IOException e) {\n  }\n}"}
{"ids": "13132", "raw_code": "private static String expandSystemIdStrictOn(String systemId,String baseSystemId) throws URI.MalformedURIException {\n  URI systemURI=new URI(systemId,true);\n  if (systemURI.isAbsoluteURI()) {\n    return systemId;\n  }\n  URI baseURI=null;\n  if (baseSystemId == null || baseSystemId.length() == 0) {\n    baseURI=getUserDir();\n  }\n else {\n    baseURI=new URI(baseSystemId,true);\n    if (!baseURI.isAbsoluteURI()) {\n      baseURI.absolutize(getUserDir());\n    }\n  }\n  systemURI.absolutize(baseURI);\n  return systemURI.toString();\n}"}
{"ids": "54789", "raw_code": "public static void free(DMessage msg){\n  int index=size2Index(msg.getSize());\n  msg.clear();\n  if (index < 0)   ;\n else   if (m_cache[index] != null)   ;\n else   m_cache[index]=msg;\n}"}
{"ids": "84480", "raw_code": "public boolean equalsIgnoreCase(final StrBuilder other){\n  if (this == other) {\n    return true;\n  }\n  if (this.size != other.size) {\n    return false;\n  }\n  final char thisBuf[]=this.buffer;\n  final char otherBuf[]=other.buffer;\n  for (int i=size - 1; i >= 0; i--) {\n    final char c1=thisBuf[i];\n    final char c2=otherBuf[i];\n    if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "64656", "raw_code": "protected static Long convertUuidToLong(UUID uuid){\n  if (uuid == null) {\n    return null;\n  }\n  Long convertedUuid;\n  if (uuid.version() == 1) {\n    convertedUuid=uuid.timestamp();\n  }\n else {\n    convertedUuid=uuid.getMostSignificantBits();\n  }\n  return convertedUuid;\n}"}
{"ids": "24995", "raw_code": "public void addVMArguments(String vmArgumentName,String vmArgumentValue){\n  VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentValue);\n  vmSet.add(vmArg);\n}"}
{"ids": "33914", "raw_code": "private void applyTo(ClassVisitor v,Field f){\n  if (Log.isLoggingOn()) {\n    Log.logLine(String.format(\"Visiting field %s\",f.toGenericString()));\n  }\n  v.visit(f);\n}"}
{"ids": "22032", "raw_code": "public TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){\n  return unlinkTargetVolumesFromSnapshotSession(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);\n}"}
{"ids": "71204", "raw_code": "private List reverse(List seq){\n  LinkedList newSeq=new LinkedList();\n  for (Iterator i=seq.iterator(); i.hasNext(); ) {\n    DirectedEdge de=(DirectedEdge)i.next();\n    newSeq.addFirst(de.getSym());\n  }\n  return newSeq;\n}"}
{"ids": "25655", "raw_code": "@Deprecated @Override public String readLine() throws IOException {\n  StringBuilder b=new StringBuilder(0);\n  int chr;\n  while ((chr=read()) >= 0) {\n    if (chr != '\\n') {\n      b.append((char)chr);\n    }\n else {\n      return b.toString();\n    }\n  }\n  return b.toString();\n}"}
{"ids": "74821", "raw_code": "private void addToScene(final Node items){\n  collection.add(items);\n}"}
{"ids": "71996", "raw_code": "public String documentationHomePageUrl(){\n  return properties.getProperty(\"doc.homepage.url\");\n}"}
{"ids": "86635", "raw_code": "public static boolean hasTaxonomyInfo(SequencesReader reader){\n  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);\n  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);\n  if (taxonFile.exists() && mappingFile.exists()) {\n    return true;\n  }\n else   if (taxonFile.exists() || mappingFile.exists()) {\n    throw new NoTalkbackSlimException(\"Reference SDF does not contain both taxonomy and sequences lookup\");\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "8326", "raw_code": "public void replace(ClassNode type,int n){\n  remove(n);\n  push(type);\n}"}
{"ids": "76862", "raw_code": "private static Boolean isInsidePolygon(final GeoPoint point,final List<GeoPoint> polyPoints){\n  final double latitude=point.getLatitude();\n  final double longitude=point.getLongitude();\n  final double sinLatitude=Math.sin(latitude);\n  final double cosLatitude=Math.cos(latitude);\n  final double sinLongitude=Math.sin(longitude);\n  final double cosLongitude=Math.cos(longitude);\n  double arcDistance=0.0;\n  Double prevAngle=null;\n  for (  final GeoPoint polyPoint : polyPoints) {\n    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);\n    if (angle == null) {\n      return null;\n    }\n    if (prevAngle != null) {\n      double angleDelta=angle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta+=Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta-=Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      arcDistance+=angleDelta;\n    }\n    prevAngle=angle;\n  }\n  if (prevAngle != null) {\n    final Double lastAngle=computeAngle(polyPoints.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);\n    if (lastAngle == null) {\n      return null;\n    }\n    double angleDelta=lastAngle - prevAngle;\n    if (angleDelta < -Math.PI) {\n      angleDelta+=Math.PI * 2.0;\n    }\n    if (angleDelta > Math.PI) {\n      angleDelta-=Math.PI * 2.0;\n    }\n    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    arcDistance+=angleDelta;\n  }\n  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n    return null;\n  }\n  return arcDistance > 0.0;\n}"}
{"ids": "32815", "raw_code": "private Node deleteMax(Node x){\n  if (x.right == null)   return x.left;\n  x.right=deleteMax(x.right);\n  x.size=1 + size(x.left) + size(x.right);\n  x.height=1 + Math.max(height(x.left),height(x.right));\n  return balance(x);\n}"}
{"ids": "45980", "raw_code": "private TreeNode(long nodeValue,SnmpMibAgent agent,TreeNode sup){\n  this.nodeValue=nodeValue;\n  this.parent=sup;\n  agents.addElement(agent);\n}"}
{"ids": "7909", "raw_code": "public Week(Date time){\n  this(time,TimeZone.getDefault(),Locale.getDefault());\n}"}
{"ids": "4073", "raw_code": "public CodeAttribute createCode(){\n  CodeAttribute code=new CodeAttribute();\n  for (int i=0; i < _attributes.size(); i++) {\n    Attribute attr=_attributes.get(i);\n    if (attr instanceof CodeAttribute)     return (CodeAttribute)attr;\n  }\n  return null;\n}"}
{"ids": "32817", "raw_code": "public BinaryOut(String filename){\n  try {\n    OutputStream os=new FileOutputStream(filename);\n    out=new BufferedOutputStream(os);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "44578", "raw_code": "public static boolean createNewFile(File targetFile){\n  if (targetFile.exists())   targetFile.delete();\n  try {\n    return targetFile.createNewFile();\n  }\n catch (  IOException e) {\n    return false;\n  }\n}"}
{"ids": "9890", "raw_code": "public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){\n  Validate.notNull(samlAuthorityConfig);\n  Validate.notNull(tokenRestrictions);\n  Validate.notEmpty(validCerts);\n  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();\n  boolean authorityCertInValidCerts=false;\n  for (  List<Certificate> currentChain : validCerts) {\n    Validate.notEmpty(currentChain);\n    Validate.noNullElements(currentChain);\n    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {\n      authorityCertInValidCerts=true;\n    }\n  }\n  Validate.isTrue(authorityCertInValidCerts,\"signing certificate chain is not in valid chains.\");\n  Validate.isTrue(clockTolerance >= 0);\n  this.samlAuthorityConfig=samlAuthorityConfig;\n  this.validCerts=validCerts;\n  this.clockTolerance=clockTolerance;\n  this.tokenRestrictions=tokenRestrictions;\n  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();\n  if (inExternalIdps != null) {\n    for (    IDPConfig conf : inExternalIdps) {\n      if (conf != null) {\n        idpsSet.put(conf.getEntityID(),conf);\n      }\n    }\n  }\n  this.externalIdps=Collections.unmodifiableMap(idpsSet);\n}"}
{"ids": "85725", "raw_code": "public static void checkNotEmpty(String string){\n  if (string.isEmpty()) {\n    throw new NullPointerException();\n  }\n}"}
{"ids": "16911", "raw_code": "public void cancelUnnamedTasks(){\n  if (unnamedTaskExecutor != null) {\n    unnamedTaskExecutor.shutdownNow();\n  }\n}"}
{"ids": "83911", "raw_code": "public SimpleMetricGroup(GroupName name,Stream<? extends Metric> i){\n  this(name,i.collect(Collectors.<Metric>toList()));\n}"}
{"ids": "70323", "raw_code": "public boolean isInside(Point point){\n  return bounds.contains(point);\n}"}
{"ids": "1686", "raw_code": "private void resolveProtocols(ClassLoader loader){\n  ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,loader);\n  loadProtocolManagerFactories(serviceLoader);\n}"}
{"ids": "73985", "raw_code": "public static List<InetAddress> hostAddresses(){\n  List<InetAddress> addrList=new ArrayList<>();\n  Enumeration<NetworkInterface> IFCs=null;\n  try {\n    IFCs=NetworkInterface.getNetworkInterfaces();\n  }\n catch (  SocketException ex) {\n    log.error(\"Unable to get network interfaces.\",ex);\n  }\n  if (IFCs != null) {\n    while (IFCs.hasMoreElements()) {\n      NetworkInterface IFC=IFCs.nextElement();\n      try {\n        if (IFC.isUp()) {\n          Enumeration<InetAddress> addresses=IFC.getInetAddresses();\n          while (addresses.hasMoreElements()) {\n            InetAddress address=addresses.nextElement();\n            if (!address.isLoopbackAddress() && !address.isLinkLocalAddress()) {\n              addrList.add(address);\n            }\n          }\n        }\n      }\n catch (      SocketException ex) {\n        log.error(\"Unable to read network interface {}.\",IFC.toString(),ex);\n      }\n    }\n  }\n  return addrList;\n}"}
{"ids": "13417", "raw_code": "public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){\n  final int height=options.outHeight;\n  final int width=options.outWidth;\n  int inSampleSize=1;\n  if (rqsW == 0 || rqsH == 0)   return 1;\n  if (height > rqsH || width > rqsW) {\n    final int heightRatio=Math.round((float)height / (float)rqsH);\n    final int widthRatio=Math.round((float)width / (float)rqsW);\n    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;\n  }\n  return inSampleSize;\n}"}
{"ids": "80145", "raw_code": "public boolean hasStatus(final StatusID status){\n  return statuses.contains(status);\n}"}
{"ids": "64862", "raw_code": "public void addChannelMap(ChannelMap channelMap){\n  if (!mChannelMaps.contains(channelMap)) {\n    mChannelMaps.add(channelMap);\n    int index=mChannelMaps.indexOf(channelMap);\n    fireIntervalAdded(this,index,index);\n    broadcast(new ChannelMapEvent(channelMap,Event.ADD));\n  }\n}"}
{"ids": "82359", "raw_code": "@Override public boolean add(E o){\n  if (null == o) {\n    throw new NullPointerException();\n  }\n  if (offer(o)) {\n    return true;\n  }\n  throw new IllegalStateException();\n}"}
{"ids": "31064", "raw_code": "public Object putResource(Object key,Object value){\n  return (objectCache.put(key,value));\n}"}
{"ids": "76757", "raw_code": "private String replaceSuffix(String value,String toReplace,String changeTo){\n  String vvalue;\n  if ((value == null) || (toReplace == null) || (changeTo == null)) {\n    return value;\n  }\n  vvalue=removeSuffix(value,toReplace);\n  if (value.equals(vvalue)) {\n    return value;\n  }\n else {\n    return vvalue + changeTo;\n  }\n}"}
{"ids": "12321", "raw_code": "private void executeClaimedTask(ClaimedTask claimedTask){\n  if (!claimedTask.setStartTime(new Date())) {\n    _log.info(\"Claimed task is overdue; range not scanned: {}\",claimedTask.getTask());\n    return;\n  }\n  ScanRangeTask task=claimedTask.getTask();\n  boolean releaseTask=false;\n  try {\n    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL);\n    releaseTask=asyncRangeScan(task);\n  }\n  finally {\n    unclaimTask(claimedTask,releaseTask);\n    _backgroundService.submit(_startScansIfAvailableRunnable);\n  }\n}"}
{"ids": "37002", "raw_code": "private static boolean createNaviDirectory(){\n  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));\n  return dir.exists() || dir.mkdir();\n}"}
{"ids": "29058", "raw_code": "public Iterator<Target> targetIterator(){\n  return targetList.iterator();\n}"}
{"ids": "24912", "raw_code": "private void fitSizeOfScrolledContent(){\n  Point p=scrollComposite.getSize();\n  main.setSize(main.computeSize(p.x,SWT.DEFAULT));\n}"}
{"ids": "34896", "raw_code": "public int hashCode(){\n  return name.hashCode();\n}"}
{"ids": "9675", "raw_code": "public DCryptoStrength(JFrame parent) throws CryptoException {\n  super(parent,res.getString(\"DCryptoStrength.Title\"),ModalityType.DOCUMENT_MODAL);\n  initComponents();\n}"}
{"ids": "6594", "raw_code": "private Component createSeparator(){\n  JSeparator sep=new JSeparator(SwingConstants.VERTICAL);\n  sep.setPreferredSize(new Dimension(2,30));\n  sep.setMinimumSize(new Dimension(2,30));\n  return sep;\n}"}
{"ids": "16034", "raw_code": "public byte[] generateSignature() throws CryptoException, DataLengthException {\n  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);\n  if (sLen != 0) {\n    random.nextBytes(salt);\n    System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen);\n  }\n  byte[] h=new byte[hLen];\n  contentDigest.update(mDash,0,mDash.length);\n  contentDigest.doFinal(h,0);\n  block[block.length - sLen - 1- hLen- 1]=0x01;\n  System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen);\n  byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1);\n  for (int i=0; i != dbMask.length; i++) {\n    block[i]^=dbMask[i];\n  }\n  block[0]&=(0xff >> ((block.length * 8) - emBits));\n  System.arraycopy(h,0,block,block.length - hLen - 1,hLen);\n  block[block.length - 1]=trailer;\n  byte[] b=cipher.processBlock(block,0,block.length);\n  clearBlock(block);\n  return b;\n}"}
{"ids": "53469", "raw_code": "public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){\n  final int dim=quanth * quants * quantb;\n  assert (dim > 0);\n  final double[][] m=new double[dim][dim];\n  for (int x=0; x < dim; x++) {\n    final int hx=x / (quantb * quants);\n    final int sx=(x / quantb) % quants;\n    final int bx=x % quantb;\n    for (int y=x; y < dim; y++) {\n      final int hy=y / (quantb * quants);\n      final int sy=(y / quantb) % quants;\n      final int by=y % quantb;\n      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);\n      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);\n      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);\n      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);\n      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;\n      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;\n      final double db=(bx - by) / (double)quantb;\n      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);\n      m[x][y]=m[y][x]=val;\n    }\n  }\n  return m;\n}"}
{"ids": "42605", "raw_code": "public static void openFileIntent(Context context,File openFile){\n  if (context != null && openFile.exists()) {\n    try {\n      Intent intent=getFileIntent(context,openFile);\n      context.startActivity(intent);\n    }\n catch (    Exception e) {\n      GlobalUtils.logThis(TAG,\"openFileIntent Exception\",e);\n    }\n  }\n}"}
{"ids": "5668", "raw_code": "public static PlainText plain(short text){\n  return plain(Integer.toString(text));\n}"}
{"ids": "22225", "raw_code": "private String createComponentChanges(){\n  StringBuilder builder=new StringBuilder();\n  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {\n    builder.append(createApiChanges(serviceCatalogDiff));\n  }\n  return builder.toString();\n}"}
{"ids": "70069", "raw_code": "public static synchronized void it(String description,UnsafeBlock block){\n  it(description,identity(),block);\n}"}
{"ids": "78785", "raw_code": "public static boolean isWritable(final File file,final boolean makeDirs){\n  if (file == null) {\n    Log.e(FileUtils.class,\"isWritable(): Null or Empty parameter given\");\n    return false;\n  }\n  final String fileParentDir=file.getParent();\n  if (!TextUtils.isEmpty(fileParentDir)) {\n    final File fileDir=new File(fileParentDir);\n    if (!fileDir.exists()) {\n      if (makeDirs)       return makeDirsForFile(file);\n else       return false;\n    }\n  }\n  boolean isWritable=true;\n  if (file.exists())   isWritable=file.canWrite();\n else {\n    try {\n      isWritable=file.createNewFile();\n    }\n catch (    IOException e) {\n    }\n    if (isWritable)     isWritable=file.delete();\n  }\n  return isWritable;\n}"}
{"ids": "14268", "raw_code": "private static void createOrgAuthConfig(String realmName) throws Exception {\n  String classMethod=\"UpgradeUtils:createOrgAuthConfig: \";\n  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);\n  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);\n  if (orgConfig != null) {\n    Map aa=orgConfig.getAttributes();\n    if (debug.messageEnabled()) {\n      debug.message(classMethod + \"Org is :\" + realmName);\n      debug.message(classMethod + \"Attribute Map is :\" + aa);\n    }\n    String orgName=realmName;\n    if (LDAPUtils.isDN(realmName)) {\n      orgName=LDAPUtils.rdnValueFromDn(realmName);\n    }\n    String authConfigName=orgName + \"-authconfig\";\n    String adminAuthConfigName=orgName + \"-admin-authconfig\";\n    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);\n    if (debug.messageEnabled()) {\n      debug.message(classMethod + \"authConfigAttrValue : \" + authConfigAttrValue);\n    }\n    Set newVal=new HashSet();\n    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {\n      newVal.add(authConfigName);\n      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);\n    }\n    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);\n    if (debug.messageEnabled()) {\n      debug.message(\"adminauthConfigAttrValue : \" + adminConfigAttrValue);\n    }\n    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {\n      newVal.clear();\n      newVal.add(adminAuthConfigName);\n      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);\n    }\n    aa=orgConfig.getAttributes();\n    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);\n    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);\n    if (authConfig == null) {\n      s.addSubConfig(NAMED_CONFIG,null,0,null);\n      authConfig=s.getSubConfig(NAMED_CONFIG);\n    }\n    Map aMap=new HashMap();\n    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);\n    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);\n    aMap.clear();\n    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);\n    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);\n  }\n}"}
{"ids": "71839", "raw_code": "@Override public int hashCode(){\n  return oid.hashCode();\n}"}
{"ids": "64727", "raw_code": "protected void findCandidateCrossings(S2Point a,S2Point b,List<Integer> candidateCrossings){\n  Preconditions.checkState(indexComputed);\n  ArrayList<S2CellId> cover=Lists.newArrayList();\n  getCovering(a,b,false,cover);\n  Set<Integer> uniqueSet=new HashSet<Integer>();\n  getEdgesInParentCells(cover,uniqueSet);\n  getEdgesInChildrenCells(a,b,cover,uniqueSet);\n  candidateCrossings.clear();\n  candidateCrossings.addAll(uniqueSet);\n}"}
{"ids": "36037", "raw_code": "public RepositoryLocation(String repositoryName,String[] pathComponents) throws MalformedRepositoryLocationException {\n  if (repositoryName == null || repositoryName.isEmpty()) {\n    throw new MalformedRepositoryLocationException(\"repositoryName must not contain null or empty!\");\n  }\n  if (pathComponents == null) {\n    throw new MalformedRepositoryLocationException(\"pathComponents must not be null!\");\n  }\n  for (  String pathComp : pathComponents) {\n    if (pathComp == null || pathComp.isEmpty()) {\n      throw new MalformedRepositoryLocationException(\"path must not contain null or empty strings!\");\n    }\n  }\n  this.repositoryName=repositoryName;\n  this.path=pathComponents;\n}"}
{"ids": "81275", "raw_code": "protected JavaElementDelta createDeltaTree(IJavaElement element,JavaElementDelta delta){\n  JavaElementDelta childDelta=delta;\n  ArrayList ancestors=getAncestors(element);\n  if (ancestors == null) {\n    if (equalsAndSameParent(delta.getElement(),getElement())) {\n      this.kind=delta.kind;\n      this.changeFlags=delta.changeFlags;\n      this.movedToHandle=delta.movedToHandle;\n      this.movedFromHandle=delta.movedFromHandle;\n    }\n  }\n else {\n    for (int i=0, size=ancestors.size(); i < size; i++) {\n      IJavaElement ancestor=(IJavaElement)ancestors.get(i);\n      JavaElementDelta ancestorDelta=new JavaElementDelta(ancestor);\n      ancestorDelta.addAffectedChild(childDelta);\n      childDelta=ancestorDelta;\n    }\n  }\n  return childDelta;\n}"}
{"ids": "87087", "raw_code": "public int size(){\n  if (hmap == null) {\n    return 0;\n  }\n  return hmap.size();\n}"}
{"ids": "83381", "raw_code": "public boolean coordinateInZone(Id<ActivityFacility> zoneID,Coord coordinate){\n  Point point=MGC.xy2Point(coordinate.getX(),coordinate.getY());\n  return pointInZone(zoneID,point);\n}"}
{"ids": "12725", "raw_code": "public XwavesLabelfileReader(Reader reader) throws IOException {\n  this.reader=new BufferedReader(reader);\n  parseLabels();\n  reader.close();\n}"}
{"ids": "79964", "raw_code": "public static double parseDoubleDefault(String s,double def){\n  if (s == null) {\n    return def;\n  }\n  try {\n    return Double.parseDouble(s);\n  }\n catch (  NumberFormatException e) {\n    return def;\n  }\n}"}
{"ids": "24115", "raw_code": "public boolean putProfile(Profile profile){\n  return putProfile(profile,false);\n}"}
{"ids": "44336", "raw_code": "public void print(char c){\n  writer.print(c);\n}"}
{"ids": "69708", "raw_code": "public void initBlockViews(){\n  if (mWorkspaceView != null) {\n    List<Block> rootBlocks=mWorkspace.getRootBlocks();\n    ConnectionManager connManager=mWorkspace.getConnectionManager();\n    for (int i=0; i < rootBlocks.size(); i++) {\n      BlockGroup bg=mViewFactory.buildBlockGroupTree(rootBlocks.get(i),connManager,mTouchHandler);\n      mWorkspaceView.addView(bg);\n    }\n  }\n}"}
{"ids": "13811", "raw_code": "protected void clearAllTrails(SSOTokenID tokenID){\n  boolean removed=false;\n  String key=tokenID.toString();\nsynchronized (mapTokenIDs) {\n    removed=(mapTokenIDs.remove(key) != null);\n  }\n}"}
{"ids": "45805", "raw_code": "void scramble(){\n  initialSize=getSize();\n  int a[]=new int[initialSize.height / 2];\n  double f=initialSize.width / (double)a.length;\n  for (int i=a.length; --i >= 0; ) {\n    a[i]=(int)(i * f);\n  }\n  for (int i=a.length; --i >= 0; ) {\n    int j=(int)(i * Math.random());\n    int t=a[i];\n    a[i]=a[j];\n    a[j]=t;\n  }\n  arr=a;\n}"}
{"ids": "47787", "raw_code": "private static int convertSRGBtoLinearRGB(int color){\n  float input, output;\n  input=color / 255.0f;\n  if (input <= 0.04045f) {\n    output=input / 12.92f;\n  }\n else {\n    output=(float)Math.pow((input + 0.055) / 1.055,2.4);\n  }\n  return Math.round(output * 255.0f);\n}"}
{"ids": "86602", "raw_code": "public void recordBeginning(){\n  final String msg=\"Usage beginning module=\" + mModuleName + \" runId=\"+ mRunId;\n  mUsageMessages.add(msg);\n  Diagnostic.developerLog(msg);\n  mClient.recordBeginning(mModuleName,mRunId);\n}"}
{"ids": "71121", "raw_code": "public void addSplitEdges(List edgeList){\n  addEndpoints();\n  Iterator it=iterator();\n  EdgeIntersection eiPrev=(EdgeIntersection)it.next();\n  while (it.hasNext()) {\n    EdgeIntersection ei=(EdgeIntersection)it.next();\n    Edge newEdge=createSplitEdge(eiPrev,ei);\n    edgeList.add(newEdge);\n    eiPrev=ei;\n  }\n}"}
{"ids": "1840", "raw_code": "public MemBasedCache(int maxCacheSizeInBytes){\n  mMaxCacheSizeInBytes=maxCacheSizeInBytes;\n  mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true);\n}"}
{"ids": "34629", "raw_code": "public void updateMaxTextWidths(float requiredWidth,float matchContentsWidth){\n  mMaxRequiredWidth=Math.max(mMaxRequiredWidth,requiredWidth);\n  mMaxMatchContentsWidth=Math.max(mMaxMatchContentsWidth,matchContentsWidth);\n}"}
{"ids": "53054", "raw_code": "public void enableOverview(boolean b){\n  if (overviewItem != null) {\n    overviewItem.setEnabled(b);\n  }\n}"}
{"ids": "77524", "raw_code": "public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException {\n  List<String> children=getCollections(zkClient);\n  page.selected=children;\n  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {\n    page.rows=20;\n    page.start=0;\n  }\n  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);\n  if (page.filterType != FilterType.status)   page.selectPage(children);\n  return page;\n}"}
{"ids": "81120", "raw_code": "private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {\n  PrintWriter out=response.getWriter();\n  String label=request.getParameter(\"stop\");\n  Monitor mon=removeMon(label,null,DEFAULT_UNITS);\n  if (mon == null) {\n    out.println(ERROR + \": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel\");\n  }\n else {\n    mon.stop();\n    out.println(OK + \": stop successfully called on - \" + mon);\n  }\n}"}
{"ids": "67779", "raw_code": "public static String normalizeUrl(String requestUrl) throws OAuthException {\n  if ((requestUrl == null) || (requestUrl.length() == 0)) {\n    throw new OAuthException(\"Request Url cannot be empty\");\n  }\n  URI uri;\n  try {\n    uri=new URI(requestUrl);\n  }\n catch (  URISyntaxException e) {\n    throw new OAuthException(e);\n  }\n  String authority=uri.getAuthority();\n  String scheme=uri.getScheme();\n  if (authority == null || scheme == null) {\n    throw new OAuthException(\"Invalid Request Url\");\n  }\n  authority=authority.toLowerCase();\n  scheme=scheme.toLowerCase();\n  if ((scheme.equals(\"http\") && uri.getPort() == 80) || (scheme.equals(\"https\") && uri.getPort() == 443)) {\n    int index=authority.lastIndexOf(\":\");\n    if (index >= 0) {\n      authority=authority.substring(0,index);\n    }\n  }\n  return scheme + \"://\" + authority+ uri.getRawPath();\n}"}
{"ids": "84181", "raw_code": "public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {\n  boolean isDebug=false;\n  if (isDebugInvoke()) {\n    isDebug=true;\n    PrintWriter dbg=createDebugPrintWriter();\n    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);\n    dIs.startTop2();\n    is=dIs;\n    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);\n    dOs.startTop2();\n    os=dOs;\n  }\n  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);\n  AbstractHessianInput in;\n  AbstractHessianOutput out;\nswitch (header) {\ncase CALL_1_REPLY_1:\n    in=_hessianFactory.createHessianInput(is);\n  out=_hessianFactory.createHessianOutput(os);\nbreak;\ncase CALL_1_REPLY_2:\nin=_hessianFactory.createHessianInput(is);\nout=_hessianFactory.createHessian2Output(os);\nbreak;\ncase HESSIAN_2:\nin=_hessianFactory.createHessian2Input(is);\nin.readCall();\nout=_hessianFactory.createHessian2Output(os);\nbreak;\ndefault :\nthrow new IllegalStateException(header + \" is an unknown Hessian call\");\n}\nif (serializerFactory != null) {\nin.setSerializerFactory(serializerFactory);\nout.setSerializerFactory(serializerFactory);\n}\ntry {\ninvoke(_service,in,out);\n}\n  finally {\nin.close();\nout.close();\nif (isDebug) os.close();\n}\n}"}
{"ids": "30438", "raw_code": "private void commitLocalTransaction() throws CommitFailedException {\n  if (_tx == null) {\n    return;\n  }\n  if (_logger.isLoggable(Level.FINEST)) {\n    _logger.log(Level.FINEST,\"Committing local transaction: \" + _tx);\n  }\n  try {\n    _tx.commit();\n  }\n catch (  Exception e) {\n    if (_logger.isLoggable(Level.SEVERE)) {\n      _logger.log(Level.SEVERE,\"Failed to commit local transaction: \" + _tx,e);\n    }\n    throw new CommitFailedException(e);\n  }\n}"}
{"ids": "14338", "raw_code": "public static Entry addObjectClass(Entry entry){\n  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);\n  if (attribute == null) {\n    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);\n  }\n  return entry;\n}"}
{"ids": "30274", "raw_code": "@SuppressWarnings(\"unchecked\") public List<Boundary> populateArea(final Long wardId){\n  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);\n  ;\n  List<Boundary> areaList=new LinkedList<Boundary>();\n  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(\"Area\",hType);\n  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);\n  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));\n  LOGGER.info(\"***********Ajax AreaList: \" + areaList.toString());\n  return areaList;\n}"}
{"ids": "67838", "raw_code": "private static String readName(DataInputStream dis,byte data[]) throws IOException {\n  int c=dis.readUnsignedByte();\n  if ((c & 0xc0) == 0xc0) {\n    c=((c & 0x3f) << 8) + dis.readUnsignedByte();\n    HashSet<Integer> jumps=new HashSet<Integer>();\n    jumps.add(c);\n    return readName(data,c,jumps);\n  }\n  if (c == 0) {\n    return \"\";\n  }\n  byte b[]=new byte[c];\n  dis.readFully(b);\n  String s=IDN.toUnicode(new String(b));\n  String t=readName(dis,data);\n  if (t.length() > 0) {\n    s=s + \".\" + t;\n  }\n  return s;\n}"}
{"ids": "1725", "raw_code": "public SimpleString concat(final char c){\n  byte[] bytes=new byte[data.length + 2];\n  System.arraycopy(data,0,bytes,0,data.length);\n  bytes[data.length]=(byte)(c & 0xFF);\n  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);\n  return new SimpleString(bytes);\n}"}
{"ids": "12699", "raw_code": "public void deepFill(MaryNode specTree){\n  tree=specTree;\n  numberOfLeaves=0;\n  sortNode(0,tree);\n}"}
{"ids": "22915", "raw_code": "public int nodeCount(){\n  return nodes == null ? 0 : nodes.size();\n}"}
{"ids": "71342", "raw_code": "public void addToGlobalBlacklist(String host){\n  addToGlobalBlacklist(host,System.currentTimeMillis() + this.globalBlacklistTimeout);\n}"}
{"ids": "49937", "raw_code": "public boolean addNode(Lop node){\n  if (nodes.contains(node))   return false;\n  nodes.add(node);\n  return true;\n}"}
{"ids": "47067", "raw_code": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n  s.defaultWriteObject();\n  for (Node<K,V> n=findFirst(); n != null; n=n.next) {\n    V v=n.getValidValue();\n    if (v != null) {\n      s.writeObject(n.key);\n      s.writeObject(v);\n    }\n  }\n  s.writeObject(null);\n}"}
{"ids": "75808", "raw_code": "public static final double sigma(double a){\n  return 1.0 / (1.0 + Math.exp(-a));\n}"}
{"ids": "53939", "raw_code": "public void insertOrRefresh(final KBucketEntry newEntry){\n  if (newEntry == null)   return;\n  List<KBucketEntry> entriesRef=entries;\n  for (  KBucketEntry existing : entriesRef) {\n    if (existing.equals(newEntry)) {\n      existing.mergeInTimestamps(newEntry);\n      return;\n    }\n    if (existing.matchIPorID(newEntry)) {\n      DHT.logInfo(\"new node \" + newEntry + \" claims same ID or IP as \"+ existing+ \", might be impersonation attack or IP change. ignoring until old entry times out\");\n      return;\n    }\n  }\n  if (newEntry.verifiedReachable()) {\n    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {\n      modifyMainBucket(null,newEntry);\n      return;\n    }\n    if (replaceBadEntry(newEntry))     return;\n    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);\n    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {\n      modifyMainBucket(youngest,newEntry);\n      insertInReplacementBucket(youngest);\n      return;\n    }\n  }\n  insertInReplacementBucket(newEntry);\n}"}
{"ids": "44135", "raw_code": "public void translate(double x,double y){\n  currentTransform.translate(x,y);\n  try {\n    writeTransform(new AffineTransform(1,0,0,1,x,y));\n  }\n catch (  IOException e) {\n    handleException(e);\n  }\n}"}
{"ids": "21985", "raw_code": "public static boolean isSupportedAddRPProtectionVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){\n  s_logger.info(String.format(\"Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]...\",currentVpool.getLabel(),newVpool.getLabel()));\n  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {\n    return false;\n  }\n  if (volume.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) {\n    notSuppReasonBuff.append(\"Can't add RecoverPoint Protection since it already exists.\");\n    return false;\n  }\n  if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {\n    notSuppReasonBuff.append(\"Can't add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first.\");\n    return false;\n  }\n  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {\n    notSuppReasonBuff.append(\"Can't add MetroPoint Protection directly to VPLEX Local volume. \" + \"Upgrade from VPLEX Local to VPLEX Distributed first.\");\n    return false;\n  }\n  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};\n  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);\n  if (!changes.isEmpty()) {\n    notSuppReasonBuff.append(\"These target virtual pool differences are invalid: \");\n    fillInNotSupportedReasons(changes,notSuppReasonBuff);\n    return false;\n  }\n  include=new String[]{PROTECTION_VARRAY_SETTINGS};\n  changes=analyzeChanges(currentVpool,newVpool,include,null,null);\n  if (changes.isEmpty()) {\n    notSuppReasonBuff.append(\"These target virtual pool differences are required: \");\n    fillInNotSupportedReasons(changes,notSuppReasonBuff);\n    return false;\n  }\n  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) {\n    VirtualPoolChangeOperationEnum op=vplexCommonChecks(volume,currentVpool,newVpool,dbClient,notSuppReasonBuff,include);\n    if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "11133", "raw_code": "private void writeObject(ObjectOutputStream oos) throws IOException {\n  oos.defaultWriteObject();\n  boolean writeFont=(f != OMText.DEFAULT_FONT);\n  oos.writeBoolean(writeFont);\n  if (writeFont) {\n    oos.writeObject(f.getName());\n    oos.writeInt(f.getSize());\n    oos.writeInt(f.getStyle());\n  }\n  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);\n  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);\n}"}
{"ids": "42694", "raw_code": "private static void writeSpaces(Writer out,int amt) throws IOException {\n  while (amt > 0) {\n    out.write(' ');\n    amt--;\n  }\n}"}
{"ids": "53436", "raw_code": "public static double relativeOverlap(SpatialComparable box1,SpatialComparable box2){\n  final int dim=assertSameDimensionality(box1,box2);\n  double overlap=1.;\n  double vol1=1.;\n  double vol2=1.;\n  for (int i=0; i < dim; i++) {\n    final double box1min=box1.getMin(i);\n    final double box1max=box1.getMax(i);\n    final double box2min=box2.getMin(i);\n    final double box2max=box2.getMax(i);\n    final double omax=Math.min(box1max,box2max);\n    final double omin=Math.max(box1min,box2min);\n    if (omax <= omin) {\n      return 0.;\n    }\n    overlap*=omax - omin;\n    vol1*=box1max - box1min;\n    vol2*=box2max - box2min;\n  }\n  return overlap / (vol1 + vol2);\n}"}
{"ids": "40276", "raw_code": "protected void handleAutoDraw(){\n  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {\n    onAutoDraw();\n  }\n}"}
{"ids": "65252", "raw_code": "private MethodDescriptor[] sortMethodDescriptors(MethodDescriptor[] methodDescriptors){\n  return methodSorter != null ? methodSorter.sortMethodDescriptors(methodDescriptors) : methodDescriptors;\n}"}
{"ids": "11048", "raw_code": "public static Properties parsePropertyList(String list) throws PropertyStringFormatException {\n  return parsePropertyList(list,propertySeparators,keyValueSeparators);\n}"}
{"ids": "65181", "raw_code": "public boolean packageHasAnnotation(Annotation annotation){\n  try {\n    Package pkg=type.getPackage();\n    if (pkg == null) {\n      return false;\n    }\n    String className=pkg.getName() + \".package-info\";\n    Class<?> packageType=Class.forName(className);\n    AnnotationAccessor accessor=new AnnotationAccessor(supportedAnnotations,packageType,ignoreAnnotationFailure);\n    return accessor.typeHas(annotation);\n  }\n catch (  ClassNotFoundException e) {\n    return false;\n  }\n}"}
{"ids": "37101", "raw_code": "private String buildToolTip(final CTaggedGraphNodesContainerNode node){\n  final StringBuilder tooltip=new StringBuilder(\"<html>\");\n  boolean first=true;\n  for (  final NaviNode graphnode : node.getGraphNodes()) {\n    if (!first) {\n      tooltip.append(\"<br>\");\n    }\n    tooltip.append(CNodesDisplayString.getDisplayString(graphnode));\n    first=false;\n  }\n  return tooltip + \"</html>\";\n}"}
{"ids": "39908", "raw_code": "public void makeGraph(File linkGraph) throws Exception {\n  String temp212;\n  int rowNum=0;\n  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));\n  while ((temp212=br.readLine()) != null) {\n    String[] strs=temp212.split(\" \");\n    for (int i=0; i < strs.length; i++) {\n      graph[rowNum][i]=Double.parseDouble(strs[i]);\n    }\n    rowNum++;\n  }\n  for (int i=0; i < dataNum; i++) {\n    for (int j=0; j < dimension; j++) {\n      W[i][j]=r.nextDouble();\n      H[j][i]=r.nextDouble();\n    }\n  }\n  for (int i=0; i < dataNum; i++) {\n    double sumW=0;\n    double sumH=0;\n    for (int j=0; j < dimension; j++) {\n      sumW+=W[i][j] * W[i][j];\n      sumH+=H[j][i] * H[j][i];\n    }\n    sumW=Math.sqrt(sumW);\n    sumH=Math.sqrt(sumH);\n    for (int j=0; j < dimension; j++) {\n      W[i][j]/=sumW;\n      H[j][i]/=sumH;\n    }\n  }\n  trainW();\n  init=false;\n}"}
{"ids": "8558", "raw_code": "public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){\n  return clickListeners.remove(itemClickListener);\n}"}
{"ids": "86681", "raw_code": "public static String padRight(final String s,final int length){\n  final int pad=length - s.length();\n  return pad > 0 ? s + getSpaceString(pad) : s;\n}"}
{"ids": "71843", "raw_code": "private static String[] collationMatchingRuleNames(final List<String> localeNames,final int numSuffix,final String symbolicSuffix){\n  final List<String> names=new ArrayList<>();\n  for (  String localeName : localeNames) {\n    if (symbolicSuffix.isEmpty()) {\n      names.add(localeName);\n    }\n else {\n      names.add(localeName + \".\" + numSuffix);\n      names.add(localeName + \".\" + symbolicSuffix);\n    }\n  }\n  return names.toArray(new String[names.size()]);\n}"}
{"ids": "47513", "raw_code": "private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){\n  int numMonths=(maxYear - minYear + 1) * 12 + 1;\n  int epochMonth=0;\n  int[] epochMonths=new int[numMonths];\n  minMonthLength=Integer.MAX_VALUE;\n  maxMonthLength=Integer.MIN_VALUE;\n  for (int year=minYear; year <= maxYear; year++) {\n    int[] months=years.get(year);\n    for (int month=0; month < 12; month++) {\n      int length=months[month];\n      epochMonths[epochMonth++]=epochDay;\n      if (length < 29 || length > 32) {\n        throw new IllegalArgumentException(\"Invalid month length in year: \" + minYear);\n      }\n      epochDay+=length;\n      minMonthLength=Math.min(minMonthLength,length);\n      maxMonthLength=Math.max(maxMonthLength,length);\n    }\n  }\n  epochMonths[epochMonth++]=epochDay;\n  if (epochMonth != epochMonths.length) {\n    throw new IllegalStateException(\"Did not fill epochMonths exactly: ndx = \" + epochMonth + \" should be \"+ epochMonths.length);\n  }\n  return epochMonths;\n}"}
{"ids": "20951", "raw_code": "private static String descriptorToInternalName(String descriptor){\nswitch (descriptor.charAt(0)) {\ncase 'B':\ncase 'C':\ncase 'D':\ncase 'F':\ncase 'I':\ncase 'J':\ncase 'S':\ncase 'Z':\ncase 'V':\ncase '[':\n    return descriptor;\ncase 'L':\n  return classDescriptorToInternalName(descriptor);\ndefault :\nthrow new IllegalArgumentException(\"bad descriptor:\" + descriptor);\n}\n}"}
{"ids": "72923", "raw_code": "public Subscription register(Object mBean,MBeanDescription description){\n  return register(mBean,description.getMBeanName(getNextId()));\n}"}
{"ids": "9454", "raw_code": "public void registerManufacturerSpecificBuilder(int companyId,ADManufacturerSpecificBuilder builder){\n  if (companyId < 0 || 0xFFFF < companyId) {\n    String message=String.format(\"'companyId' is out of the valid range: %d\",companyId);\n    throw new IllegalArgumentException(message);\n  }\n  if (builder == null) {\n    return;\n  }\n  Integer key=Integer.valueOf(companyId);\n  List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key);\n  if (builders == null) {\n    builders=new ArrayList<ADManufacturerSpecificBuilder>();\n    mMSBuilders.put(key,builders);\n  }\n  builders.add(0,builder);\n}"}
{"ids": "36982", "raw_code": "public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){\n  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();\n  try {\n    return translator.translate(new StandardEnvironment(),node);\n  }\n catch (  final InternalTranslationException e) {\n    CUtilityFunctions.logException(e);\n    final String message=\"E000XXX: \" + \"Could not show REIL code for node\";\n    final String description=CUtilityFunctions.createDescription(String.format(\"BinNavi could not show the REIL code for basic block at '%X'.\",node.getAddress()),new String[]{\"The instructions could not be converted to REIL code.\"},new String[]{\"You can not fix this problem yourself. Please contact \" + \"the BinNavi support.\"});\n    NaviErrorDialog.show(parent,message,description,e);\n  }\n  return null;\n}"}
{"ids": "20728", "raw_code": "private static float computeSimilarity(Lane a,Lane b){\n  int same=0;\n  int diff=0;\n  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());\n  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());\n  for (int i=firstCoordinate; i <= lastCoordinate; i++) {\n    char cha=a.charAt(i);\n    char chb=b.charAt(i);\n    if (Character.isLetter(cha) && Character.isLetter(chb)) {\n      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;\n else       diff++;\n    }\n  }\n  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);\n}"}
{"ids": "24325", "raw_code": "private void forceOverflow(){\n  forceOverflow();\n}"}
{"ids": "5252", "raw_code": "public static EjbJarXmlVersion valueOf(DocumentType docType) throws NullPointerException {\n  return valueOf(docType.getPublicId());\n}"}
{"ids": "62653", "raw_code": "public static List<Double> mergeCoords(List<Double> x,List<Double> y){\n  if (x.size() != y.size())   throw new IllegalArgumentException(\"Sample sizes must be the same for each data applyTransformToDestination.\");\n  List<Double> ret=new ArrayList<>();\n  for (int i=0; i < x.size(); i++) {\n    ret.add(x.get(i));\n    ret.add(y.get(i));\n  }\n  return ret;\n}"}
{"ids": "86328", "raw_code": "private void buildDescriptionPanel(final Composite parent){\n  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);\n  descriptionLabel.setText(\"\");\n  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));\n}"}
{"ids": "10769", "raw_code": "public HttpMethodClient(){\n  this(5000,10000,3 * 60000);\n}"}
{"ids": "16036", "raw_code": "public ISO9796d2PSSSigner(AsymmetricBlockCipher cipher,Digest digest,int saltLength,boolean implicit){\n  this.cipher=cipher;\n  this.digest=digest;\n  this.hLen=digest.getDigestSize();\n  this.saltLength=saltLength;\n  if (implicit) {\n    trailer=TRAILER_IMPLICIT;\n  }\n else {\n    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());\n    if (trailerObj != null) {\n      trailer=trailerObj.intValue();\n    }\n else {\n      throw new IllegalArgumentException(\"no valid trailer for digest\");\n    }\n  }\n}"}
{"ids": "62310", "raw_code": "String decodeTextValue(byte[] data) throws IOException {\n  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));\n  if (isCompressed) {\n    StringBuilder textBuf=new StringBuilder(data.length);\n    int dataStart=TEXT_COMPRESSION_HEADER.length;\n    int dataEnd=dataStart;\n    boolean inCompressedMode=true;\n    while (dataEnd < data.length) {\n      if (data[dataEnd] == (byte)0x00) {\n        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);\n        inCompressedMode=!inCompressedMode;\n        ++dataEnd;\n        dataStart=dataEnd;\n      }\n else {\n        ++dataEnd;\n      }\n    }\n    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);\n    return textBuf.toString();\n  }\n  return decodeUncompressedText(data,getCharset());\n}"}
{"ids": "14287", "raw_code": "private <S,T>Set<T> extract(final Collection<S> collection,final Extractor<S,T> extractor){\n  final Set<T> values=new HashSet<T>(collection.size());\n  for (  final S instance : collection) {\n    values.add(extractor.getValue(instance));\n  }\n  return values;\n}"}
{"ids": "78093", "raw_code": "public static boolean isZTE(){\n  return sBuildModel.startsWith(\"zte\");\n}"}
{"ids": "4832", "raw_code": "static public String normalizeToEncoding(String origString_,Charset encoding_){\n  String normString=origString_;\n  CharsetEncoder encoder=encoding_.newEncoder();\n  if (!encoder.canEncode(origString_)) {\n    final int length=origString_.length();\n    char[] normSeq=new char[(origString_.length())];\n    int charNum=0;\n    for (int offset=0; offset < length; ) {\n      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);\n      Character replacedChar=replacement.getFirst();\n      int codepoint=replacement.getSecond();\n      if (null != replacedChar) {\n        normSeq[charNum]=replacedChar;\n        charNum++;\n      }\n      offset+=Character.charCount(codepoint);\n    }\n    normString=new String(normSeq);\n  }\n  return normString;\n}"}
{"ids": "38154", "raw_code": "public int size(){\n  return m_sets.size();\n}"}
{"ids": "78383", "raw_code": "public static float approximateLength(float controlPoints[][]){\n  float length=0;\n  for (int i=0; i < controlPoints.length - 1; i++) {\n    float xDif=controlPoints[i + 1][0] - controlPoints[i][0];\n    float yDif=controlPoints[i + 1][1] - controlPoints[i][1];\n    float zDif=controlPoints[i + 1][2] - controlPoints[i][2];\n    length+=Math.sqrt(xDif * xDif + yDif * yDif + zDif * zDif);\n  }\n  return length;\n}"}
{"ids": "7255", "raw_code": "public UpdateClause addAssignment(Expression expression){\n  assignments.add(new Assignment(expression));\n  return this;\n}"}
{"ids": "52431", "raw_code": "public void hasNetworkConnection(NetworkRequestCheckListener listener){\n  if (hasNetworkConnection()) {\n    testNetworkRequest(listener);\n  }\n else {\n    listener.onNoResponse();\n  }\n}"}
{"ids": "69828", "raw_code": "public void assignThreadForSubscriber(@NonNull Object subscriber){\n  Looper looper=Looper.myLooper();\n  if (looper != null) {\n    mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subscriber),looper != Looper.getMainLooper() ? new Handler(looper) : mUiThreadHandler);\n  }\n else {\n    mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subscriber));\n  }\n}"}
{"ids": "14649", "raw_code": "private void validateDynamicAttribute(Set dynamicSet) throws PolicyException {\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"IDRepoResponseProvider.validateDynamicAttribute():\" + \"entering with dynamicSet=\" + dynamicSet);\n  }\n  responseAttrNames=new HashSet();\n  repoAttrNames=new HashSet();\n  responseAttrToRepoAttr=new HashMap();\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"IDRepoResponseProvider.validateDynamicAttribute():\" + \"valid dynamic attributes:\" + validDynamicAttrNames);\n  }\n  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"IDRepoResponseProvider.validateDynamicAttribute():\" + \"selected dynamic attributes:\" + dynamicAttrs);\n  }\n  Iterator dynamicAttrsIter=dynamicAttrs.iterator();\n  while (dynamicAttrsIter.hasNext()) {\n    String attr=(String)dynamicAttrsIter.next();\n    if (!validDynamicAttrNames.contains(attr)) {\n      if (DEBUG.warningEnabled()) {\n        DEBUG.warning(\"IDReporesponseProvider.\" + \"validateDynamicAttribute():Invalid dynamic property \" + \"encountered:\"+ attr);\n      }\n      continue;\n    }\n    String[] attrNames=parseDynamicAttrName(attr);\n    String responseAttrName=attrNames[0];\n    String repoAttrName=attrNames[1];\n    responseAttrNames.add(responseAttrName);\n    repoAttrNames.add(repoAttrName);\n    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"IDRepoResponseProvider.\" + \"validateDynamicAttribute():\" + \"responseAttrName=\" + responseAttrName + \", repoAttrName=\"+ repoAttrName);\n    }\n  }\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"IDRepoResponseProvider.validateDynamicAttribute():\" + \"responseAttrToRepoAttr=\" + responseAttrToRepoAttr);\n    DEBUG.message(\"IDRepoResponseProvider.validateDynamicAttribute():\" + \"returning\");\n  }\n}"}
{"ids": "74156", "raw_code": "public synchronized void init(){\n  ArrayList<Warrant> tempList=new ArrayList<Warrant>();\n  List<String> systemNameList=_manager.getSystemNameList();\n  Iterator<String> iter=systemNameList.iterator();\n  while (iter.hasNext()) {\n    Warrant w=_manager.getBySystemName(iter.next());\n    if (!_warList.contains(w)) {\n      w.addPropertyChangeListener(this);\n    }\n else {\n      _warList.remove(w);\n    }\n    tempList.add(w);\n  }\n  for (int i=0; i < _warList.size(); i++) {\n    Warrant w=_warList.get(i);\n    if (!_warNX.contains(w)) {\n      w.removePropertyChangeListener(this);\n    }\n  }\n  for (int i=0; i < _warNX.size(); i++) {\n    tempList.add(_warNX.get(i));\n  }\n  _warList=tempList;\n}"}
{"ids": "82134", "raw_code": "public void addCommand(Command cmd,int offset){\n  menuBar.addCommand(cmd,offset);\n}"}
{"ids": "17348", "raw_code": "private static void drawShape(GL2 gl,Shape s){\n  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);\n  float[] lastMoveTo=new float[6];\n  float[] f=new float[6];\n  while (!it.isDone()) {\n    int res=it.currentSegment(f);\nswitch (res) {\ncase PathIterator.SEG_CLOSE:\n      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);\n    break;\ncase PathIterator.SEG_MOVETO:\n  GLPanel.V(gl,f[0],f[1]);\nSystem.arraycopy(f,0,lastMoveTo,0,6);\nbreak;\ncase PathIterator.SEG_LINETO:\nGLPanel.V(gl,f[0],f[1]);\nbreak;\ncase PathIterator.SEG_CUBICTO:\nCubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);\ndrawShape(gl,c);\nbreak;\ndefault :\nthrow new Error(\"Error while drawing AWT shape. \" + \"Path iterator setment not handled:\" + res);\n}\nit.next();\n}\n}"}
{"ids": "1809", "raw_code": "@Override protected void tearDown() throws NamingException, JMSException {\n  NamingEnumeration<Binding> iter=context.listBindings(\"\");\n  while (iter.hasMore()) {\n    Binding binding=iter.next();\n    Object connFactory=binding.getObject();\n    if (connFactory instanceof ActiveMQConnectionFactory) {\n    }\n  }\n}"}
{"ids": "80592", "raw_code": "protected List<URI> load(final InputStream in) throws SAXException, IOException {\n  SAXParser saxParser;\n  final SAXParserFactory factory=SAXParserFactory.newInstance();\n  try {\n    saxParser=factory.newSAXParser();\n  }\n catch (  final ParserConfigurationException ex) {\n    throw new SAXException(ex);\n  }\n  groups=new LinkedList<URI>();\n  saxParser.parse(in,this);\n  return groups;\n}"}
{"ids": "67706", "raw_code": "@Deprecated public static String Collection2String(Collection<?> in,String separator){\n  if (in == null) {\n    return null;\n  }\n  return Iterator2String(in.iterator(),separator);\n}"}
{"ids": "29654", "raw_code": "public static byte[] decodeBase64(String base64Str){\n  return DatatypeConverter.parseBase64Binary(base64Str);\n}"}
{"ids": "40275", "raw_code": "protected void removeAllPremoveDrops(){\n  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {\n    if (info.isPremoveDrop) {\n      premoves.remove(info);\n    }\n  }\n}"}
{"ids": "66246", "raw_code": "public static String sayNumber(StringBuffer appendTo,double number) throws IllegalArgumentException {\n  if (number == Double.MIN_VALUE) {\n    throw new IllegalArgumentException(\"Out of range\");\n  }\n  if (number < 0) {\n    appendTo.append(\"Minus \");\n  }\n  double abs=Math.abs(number);\n  if (abs < POWER_THREE) {\n    saySimpleNumber(appendTo,(int)abs);\n  }\n else   if (abs < 2000) {\n    int thousand=(int)(abs % POWER_THREE);\n    appendTo.append(\"Seribu \");\n    saySimpleNumber(appendTo,thousand);\n  }\n else   if (abs < POWER_SIX) {\n    int thousand=(int)(abs % POWER_SIX / POWER_THREE);\n    saySimpleNumber(appendTo,thousand);\n    appendTo.append(\" Ribu\");\n    double remainder=abs - thousand * POWER_THREE;\n    if (remainder > 0) {\n      appendTo.append(' ');\n      sayNumber(appendTo,remainder);\n    }\n  }\n else   if (abs < POWER_NINE) {\n    int million=(int)(abs % POWER_NINE / POWER_SIX);\n    saySimpleNumber(appendTo,million);\n    appendTo.append(\" Juta\");\n    double remainder=abs - million * POWER_SIX;\n    if (remainder > 0) {\n      appendTo.append(' ');\n      sayNumber(appendTo,remainder);\n    }\n  }\n else   if (abs < POWER_TWELVE) {\n    int billion=(int)(abs % POWER_TWELVE / POWER_NINE);\n    saySimpleNumber(appendTo,billion);\n    appendTo.append(\" Milyar\");\n    double remainder=abs - billion * POWER_NINE;\n    if (remainder > 0) {\n      appendTo.append(' ');\n      sayNumber(appendTo,remainder);\n    }\n  }\n else   if (abs < POWER_FIFTEEN) {\n    int trillion=(int)(abs % POWER_FIFTEEN / POWER_TWELVE);\n    saySimpleNumber(appendTo,trillion);\n    appendTo.append(\" Trilyun\");\n    double remainder=abs - trillion * POWER_TWELVE;\n    if (remainder > 0) {\n      appendTo.append(' ');\n      sayNumber(appendTo,remainder);\n    }\n  }\n else {\n    appendTo.append(\"Lebih Dari Seribu Triliun\");\n  }\n  return appendTo.toString();\n}"}
{"ids": "74159", "raw_code": "public void stop(){\n  _throttle.setSpeedSetting(-0.5F);\n  _throttle.setSpeedSetting(0.0F);\n  stopLabel.setIcon(stopIcon);\n  stopLabel.setIconTextGap(_gap);\n  pack();\n}"}
{"ids": "84599", "raw_code": "public void makeDirty(){\n  betaChanged=true;\n  newMode=true;\n  precisionChanged=true;\n  regressionInterface.makeDirty(instance);\n}"}
{"ids": "82831", "raw_code": "private List<String> split(String prefix){\n  List<String> parts=new ArrayList<String>();\n  int bracketCount=0;\n  boolean inquotes=false;\n  int lastIndex=0;\n  for (int i=0; i < prefix.length(); i++) {\n    char c=prefix.charAt(i);\n    if (c == '[') {\n      bracketCount++;\n      continue;\n    }\n else     if (c == '\"') {\n      inquotes=!inquotes;\n      continue;\n    }\n else     if (c == ']') {\n      bracketCount--;\n      if (bracketCount < 0) {\n        throw new RuntimeException(\"Malformed prefix: \" + prefix);\n      }\n      continue;\n    }\n    if (c == ':' && !inquotes && bracketCount == 0) {\n      parts.add(prefix.substring(lastIndex,i));\n      lastIndex=i + 1;\n    }\n  }\n  if (lastIndex < prefix.length() - 1 && !inquotes && bracketCount == 0) {\n    parts.add(prefix.substring(lastIndex));\n  }\n  return parts;\n}"}
{"ids": "69136", "raw_code": "public static long lowerHexToUnsignedLong(String lowerHex){\n  int length=lowerHex.length();\n  if (length < 1 || length > 32)   throw isntLowerHexLong(lowerHex);\n  int i=length > 16 ? length - 16 : 0;\n  long result=0;\n  for (; i < length; i++) {\n    char c=lowerHex.charAt(i);\n    result<<=4;\n    if (c >= '0' && c <= '9') {\n      result|=c - '0';\n    }\n else     if (c >= 'a' && c <= 'f') {\n      result|=c - 'a' + 10;\n    }\n else {\n      throw isntLowerHexLong(lowerHex);\n    }\n  }\n  return result;\n}"}
{"ids": "27949", "raw_code": "public static double sampleSkewStandardError(int size){\n  int n=size;\n  return Math.sqrt(6.0 * n * (n - 1) / ((n - 2) * (n + 1) * (n + 3)));\n}"}
{"ids": "9670", "raw_code": "public void load(List<PolicyQualifierInfo> policyQualifierInfo){\n  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);\n  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());\n  data=new Object[policyQualifierInfoArray.length][1];\n  int i=0;\n  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {\n    data[i][0]=policyQualInfo;\n    i++;\n  }\n  fireTableDataChanged();\n}"}
{"ids": "13623", "raw_code": "public void runScript(Reader reader) throws IOException, SQLException {\n  try {\n    boolean originalAutoCommit=connection.getAutoCommit();\n    try {\n      if (originalAutoCommit != this.autoCommit) {\n        connection.setAutoCommit(this.autoCommit);\n      }\n      runScript(connection,reader);\n    }\n  finally {\n      connection.setAutoCommit(originalAutoCommit);\n    }\n  }\n catch (  IOException|SQLException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(\"Error running script.  Cause: \" + e,e);\n  }\n}"}
{"ids": "84738", "raw_code": "public double doOperation() throws OperatorFailedException {\n  double logq;\n  final NodeRef root=tree.getRoot();\n  final double oldTreeHeight=tree.getNodeHeight(root);\n  NodeRef i;\n  do {\n    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));\n  }\n while (root == i);\n  final NodeRef iP=tree.getParent(i);\n  final NodeRef CiP=getOtherChild(tree,iP,i);\n  final NodeRef PiP=tree.getParent(iP);\n  final double delta=getDelta();\n  final double oldHeight=tree.getNodeHeight(iP);\n  final double newHeight=oldHeight + delta;\n  if (delta > 0) {\n    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {\n      NodeRef newParent=PiP;\n      NodeRef newChild=iP;\n      while (tree.getNodeHeight(newParent) < newHeight) {\n        newChild=newParent;\n        newParent=tree.getParent(newParent);\n        if (newParent == null)         break;\n      }\n      tree.beginTreeEdit();\n      if (tree.isRoot(newChild)) {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(PiP,iP);\n        tree.addChild(iP,newChild);\n        tree.addChild(PiP,CiP);\n        tree.setRoot(iP);\n        if (tree.hasNodeTraits()) {\n          tree.swapAllTraits(newChild,iP);\n        }\n        if (tree.hasRates()) {\n          final double rootNodeRate=tree.getNodeRate(newChild);\n          tree.setNodeRate(newChild,tree.getNodeRate(iP));\n          tree.setNodeRate(iP,rootNodeRate);\n        }\n      }\n else {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(PiP,iP);\n        tree.removeChild(newParent,newChild);\n        tree.addChild(iP,newChild);\n        tree.addChild(PiP,CiP);\n        tree.addChild(newParent,iP);\n      }\n      tree.setNodeHeight(iP,newHeight);\n      tree.endTreeEdit();\n      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);\n      logq=-Math.log(possibleSources);\n    }\n else {\n      tree.setNodeHeight(iP,newHeight);\n      logq=0.0;\n    }\n  }\n else {\n    if (tree.getNodeHeight(i) > newHeight) {\n      return Double.NEGATIVE_INFINITY;\n    }\n    if (tree.getNodeHeight(CiP) > newHeight) {\n      List<NodeRef> newChildren=new ArrayList<NodeRef>();\n      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);\n      if (newChildren.size() == 0) {\n        return Double.NEGATIVE_INFINITY;\n      }\n      final int childIndex=MathUtils.nextInt(newChildren.size());\n      NodeRef newChild=newChildren.get(childIndex);\n      NodeRef newParent=tree.getParent(newChild);\n      tree.beginTreeEdit();\n      if (tree.isRoot(iP)) {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(newParent,newChild);\n        tree.addChild(iP,newChild);\n        tree.addChild(newParent,iP);\n        tree.setRoot(CiP);\n        if (tree.hasNodeTraits()) {\n          tree.swapAllTraits(iP,CiP);\n        }\n        if (tree.hasRates()) {\n          final double rootNodeRate=tree.getNodeRate(iP);\n          tree.setNodeRate(iP,tree.getNodeRate(CiP));\n          tree.setNodeRate(CiP,rootNodeRate);\n        }\n      }\n else {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(PiP,iP);\n        tree.removeChild(newParent,newChild);\n        tree.addChild(iP,newChild);\n        tree.addChild(PiP,CiP);\n        tree.addChild(newParent,iP);\n      }\n      tree.setNodeHeight(iP,newHeight);\n      tree.endTreeEdit();\n      logq=Math.log(possibleDestinations);\n    }\n else {\n      tree.setNodeHeight(iP,newHeight);\n      logq=0.0;\n    }\n  }\n  if (swapInRandomRate) {\n    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));\n    if (j != i) {\n      final double tmp=tree.getNodeRate(i);\n      tree.setNodeRate(i,tree.getNodeRate(j));\n      tree.setNodeRate(j,tmp);\n    }\n  }\n  if (swapInRandomTrait) {\n    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));\n    if (j != i) {\n      tree.swapAllTraits(i,j);\n    }\n  }\n  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(\"invalid slide\");\n  if (scaledDirichletBranches) {\n    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(\"Temporarily disabled.\");\n  }\n  return logq;\n}"}
{"ids": "46067", "raw_code": "MarkerSegment findMarkerSegment(Class cls,boolean first){\n  if (first) {\n    Iterator iter=markerSequence.iterator();\n    while (iter.hasNext()) {\n      MarkerSegment seg=(MarkerSegment)iter.next();\n      if (cls.isInstance(seg)) {\n        return seg;\n      }\n    }\n  }\n else {\n    ListIterator iter=markerSequence.listIterator(markerSequence.size());\n    while (iter.hasPrevious()) {\n      MarkerSegment seg=(MarkerSegment)iter.previous();\n      if (cls.isInstance(seg)) {\n        return seg;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "56609", "raw_code": "default Filterable<T> removeAll(final T... values){\n  return removeAll(Stream.of(values));\n}"}
{"ids": "28860", "raw_code": "public void reset(boolean clear){\n  gotVersion=false;\n  gotHeaderLength=false;\n  gotHeader=false;\n  gotBody=false;\n  gotBodyBoundary=false;\n  headerLength=0;\n  bodyLength=0;\n  bodyBytesReceived=0;\n  if (clear) {\n    bufferOffset=0;\n    buffer.clear();\n    bodyFile=null;\n    if (bodyStream != null) {\n      try {\n        bodyStream.close();\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n      }\n      bodyStream=null;\n    }\n  }\n}"}
{"ids": "70064", "raw_code": "private void saveAndClose(boolean save){\n  content.setEnabled(false);\n  if (timer != null) {\n    timer.cancel();\n    timer=null;\n  }\n  if (timerNextSync != null) {\n    timerNextSync.cancel();\n    timerNextSync=null;\n  }\n  if (save) {\n    Log.d(LOG_TAG,\"saveAndClose with SAVE\");\n    saveData(null);\n  }\n else {\n    Log.d(LOG_TAG,\"saveAndClose WITHOUT save\");\n  }\n  Intent data=new Intent();\n  data.setAction(Intent.ACTION_VIEW);\n  data.putExtra(PARAM_NOTE,note);\n  data.putExtra(PARAM_NOTE_POSITION,notePosition);\n  setResult(RESULT_OK,data);\n  finish();\n}"}
{"ids": "33460", "raw_code": "public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){\n  final Uri CONTENT_URI=Uri.parse(\"content://sms/outbox\");\n  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);\n}"}
{"ids": "29985", "raw_code": "public static final double calcNiceNumber(final double RANGE,final boolean ROUND){\n  double niceFraction;\n  double exponent=Math.floor(Math.log10(RANGE));\n  double fraction=RANGE / Math.pow(10,exponent);\n  if (ROUND) {\n    if (Double.compare(fraction,1.5) < 0) {\n      niceFraction=1;\n    }\n else     if (Double.compare(fraction,3) < 0) {\n      niceFraction=2;\n    }\n else     if (Double.compare(fraction,7) < 0) {\n      niceFraction=5;\n    }\n else {\n      niceFraction=10;\n    }\n  }\n else {\n    if (Double.compare(fraction,1) <= 0) {\n      niceFraction=1;\n    }\n else     if (Double.compare(fraction,2) <= 0) {\n      niceFraction=2;\n    }\n else     if (Double.compare(fraction,5) <= 0) {\n      niceFraction=5;\n    }\n else {\n      niceFraction=10;\n    }\n  }\n  return niceFraction * Math.pow(10,exponent);\n}"}
{"ids": "26579", "raw_code": "public void sendMetric(final String name,final double value){\n  logger.debug(String.format(\"sendMetric(%s, %f)\",name,value));\n  if (telemetryClient != null) {\n    telemetryClient.trackMetric(name,value);\n  }\n}"}
{"ids": "54059", "raw_code": "default Document putAll(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){\n  for (  Field field : fields) {\n    if (acceptableFieldNames.test(field.getName())) {\n      setValue(field.getName(),field.getValue());\n    }\n  }\n  return this;\n}"}
{"ids": "15627", "raw_code": "public static URL findResourceBase(String baseResource,ClassLoader loader){\n  URL url=loader.getResource(baseResource);\n  return findResourceBase(url,baseResource);\n}"}
{"ids": "7278", "raw_code": "public String toEPL(EPStatementFormatter formatter){\n  StringWriter writer=new StringWriter();\n  toEPL(formatter,writer);\n  return writer.toString();\n}"}
{"ids": "46969", "raw_code": "public boolean isSpecified(int index){\n  if ((index < 0) || (index >= mLength)) {\n    throw new ArrayIndexOutOfBoundsException(\"\");\n  }\n  String str=mItems[(index << 3) + 5];\n  return ((str != null) ? (str.charAt(0) == 'd') : true);\n}"}
{"ids": "23582", "raw_code": "public StatArchiveReader(String archiveName) throws IOException {\n  this(new File[]{new File(archiveName)},null,false);\n}"}
{"ids": "68272", "raw_code": "private static void initAdbSocketAddr(){\n  try {\n    sAdbServerPort=getAdbServerPort();\n    InetAddress hostAddr=InetAddress.getByName(DEFAULT_ADB_HOST);\n    sSocketAddr=new InetSocketAddress(hostAddr,sAdbServerPort);\n  }\n catch (  UnknownHostException e) {\n  }\n}"}
{"ids": "55127", "raw_code": "private boolean matchesAnyTag(String tagName){\n  return tagNames.contains(tagName);\n}"}
{"ids": "62894", "raw_code": "default void shutdown(){\n  Platform.exit();\n}"}
{"ids": "46345", "raw_code": "public boolean isExpanded(int row){\n  TreeUI tree=getUI();\n  if (tree != null) {\n    TreePath path=tree.getPathForRow(this,row);\n    if (path != null) {\n      Boolean value=expandedState.get(path);\n      return (value != null && value.booleanValue());\n    }\n  }\n  return false;\n}"}
{"ids": "24580", "raw_code": "private static int labelEnd(String s){\n  int colonIndex=s.indexOf(\":\");\n  int semicolonIndex=s.indexOf(\";\");\n  if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) {\n    return colonIndex;\n  }\n else {\n    return -1;\n  }\n}"}
{"ids": "85879", "raw_code": "public HttpMethodInfo(Method method,Object handler,Object[] args,MultivaluedMap<String,Object> formParameters,Response responder){\n  this.method=method;\n  this.handler=handler;\n  this.args=Arrays.copyOf(args,args.length);\n  this.formParameters=formParameters;\n  this.responder=responder;\n}"}
{"ids": "38369", "raw_code": "private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){\n  Color oldColor=g.getColor();\n  g.setPaintMode();\n  if (m_FontColor == null) {\n    g.setColor(Color.black);\n  }\n else {\n    g.setColor(m_FontColor);\n  }\n  String st;\n  if (e_or_n) {\n    Edge e=m_edges[s].m_edge;\n    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {\n      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());\n    }\n  }\n else {\n    Node e=m_nodes[s].m_node;\n    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {\n      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());\n    }\n  }\n  g.setColor(oldColor);\n}"}
{"ids": "55490", "raw_code": "public void update(List<Race> races){\n  if (currentRace == null) {\n    return;\n  }\n  if (races.contains(currentRace)) {\n    setRace(races.get(races.indexOf(currentRace)));\n  }\n}"}
{"ids": "65226", "raw_code": "public boolean required(){\n  return _parameterMetadata.contains(Metadata.REQUIRED);\n}"}
{"ids": "73105", "raw_code": "protected void sendDataToReceiver(ResultReceiver receiver,Intent originalIntent,Serializable data){\n  if (receiver != null && data != null) {\n    Bundle bundle=new Bundle();\n    bundle.putParcelable(ServiceReceiver.EXTRA_ORIGINAL_INTENT,originalIntent);\n    bundle.putSerializable(ServiceReceiver.EXTRA_DATA,data);\n    receiver.send(ServiceReceiver.STATUS_DATA,bundle);\n  }\n}"}
{"ids": "20925", "raw_code": "private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData data,boolean forceFlat){\n  NativeRegExp re;\n  String str=ScriptRuntime.toString(thisObj);\n  data.str=str;\n  Scriptable topScope=ScriptableObject.getTopLevelScope(scope);\n  if (args.length == 0) {\n    Object compiled=NativeRegExp.compileRE(cx,\"\",\"\",false);\n    re=new NativeRegExp(topScope,compiled);\n  }\n else   if (args[0] instanceof NativeRegExp) {\n    re=(NativeRegExp)args[0];\n  }\n else {\n    String src=ScriptRuntime.toString(args[0]);\n    String opt;\n    if (data.optarg < args.length) {\n      args[0]=src;\n      opt=ScriptRuntime.toString(args[data.optarg]);\n    }\n else {\n      opt=null;\n    }\n    Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat);\n    re=new NativeRegExp(topScope,compiled);\n  }\n  data.global=(re.getFlags() & NativeRegExp.JSREG_GLOB) != 0;\n  int[] indexp={0};\n  Object result=null;\n  if (data.mode == RA_SEARCH) {\n    result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);\n    if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length);\n else     result=Integer.valueOf(-1);\n  }\n else   if (data.global) {\n    re.lastIndex=0;\n    for (int count=0; indexp[0] <= str.length(); count++) {\n      result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);\n      if (result == null || !result.equals(Boolean.TRUE))       break;\n      if (data.mode == RA_MATCH) {\n        match_glob(data,cx,scope,count,reImpl);\n      }\n else {\n        if (data.mode != RA_REPLACE)         Kit.codeBug();\n        SubString lastMatch=reImpl.lastMatch;\n        int leftIndex=data.leftIndex;\n        int leftlen=lastMatch.index - leftIndex;\n        data.leftIndex=lastMatch.index + lastMatch.length;\n        replace_glob(data,cx,scope,reImpl,leftIndex,leftlen);\n      }\n      if (reImpl.lastMatch.length == 0) {\n        if (indexp[0] == str.length())         break;\n        indexp[0]++;\n      }\n    }\n  }\n else {\n    result=re.executeRegExp(cx,scope,reImpl,str,indexp,((data.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH));\n  }\n  return result;\n}"}
{"ids": "43475", "raw_code": "public void removeBiomeType(BiomeDictionary.Type type){\n  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();\n  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));\n  for (  BiomeGenBase biome : entryList) {\n    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();\n    while (iterator.hasNext()) {\n      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();\n    }\n  }\n}"}
{"ids": "46588", "raw_code": "static SizeRequirements calculateTiledRequirements(LayoutIterator iter,SizeRequirements r){\n  long minimum=0;\n  long maximum=0;\n  long preferred=0;\n  int lastMargin=0;\n  int totalSpacing=0;\n  int n=iter.getCount();\n  for (int i=0; i < n; i++) {\n    iter.setIndex(i);\n    int margin0=lastMargin;\n    int margin1=(int)iter.getLeadingCollapseSpan();\n    totalSpacing+=Math.max(margin0,margin1);\n    preferred+=(int)iter.getPreferredSpan(0);\n    minimum+=iter.getMinimumSpan(0);\n    maximum+=iter.getMaximumSpan(0);\n    lastMargin=(int)iter.getTrailingCollapseSpan();\n  }\n  totalSpacing+=lastMargin;\n  totalSpacing+=2 * iter.getBorderWidth();\n  minimum+=totalSpacing;\n  preferred+=totalSpacing;\n  maximum+=totalSpacing;\n  if (r == null) {\n    r=new SizeRequirements();\n  }\n  r.minimum=(minimum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)minimum;\n  r.preferred=(preferred > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)preferred;\n  r.maximum=(maximum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)maximum;\n  return r;\n}"}
{"ids": "71980", "raw_code": "private static LDAPFilter createORFilter(FilterSet filterSet) throws LDAPException, IOException {\n  List<JAXBElement<?>> list=filterSet.getFilterGroup();\n  ArrayList<RawFilter> filters=new ArrayList<>(list.size());\n  for (  JAXBElement<?> filter : list) {\n    filters.add(createFilter(filter));\n  }\n  return LDAPFilter.createORFilter(filters);\n}"}
{"ids": "83499", "raw_code": "private void sendBlob(String index,byte[] blob){\n  sendInstruction(new GuacamoleInstruction(\"blob\",index,DatatypeConverter.printBase64Binary(blob)));\n}"}
{"ids": "52491", "raw_code": "public static Set<Interval> mergeIntervalToSet(Set<Interval> intervals,Interval intervalToMerge){\n  LinkedHashSet<Interval> copyOfOriginalSet=new LinkedHashSet<>(intervals);\n  copyOfOriginalSet.add(intervalToMerge);\n  return mergeIntervalSet(copyOfOriginalSet);\n}"}
{"ids": "22762", "raw_code": "public void addNode(TopologicalNode node){\n  nodeList.add(node);\n}"}
{"ids": "32967", "raw_code": "public void printText(String text){\n  view.print(text,text.endsWith(\"\\r\"));\n  for (  ActionDelegate actionDelegate : actionDelegates) {\n    actionDelegate.onConsoleOutput(this);\n  }\n}"}
{"ids": "36256", "raw_code": "@Override public void trim(){\n  if (counter < x.length) {\n    int[] y=new int[counter];\n    System.arraycopy(x,0,y,0,counter);\n    x=y;\n    resizeValues(counter);\n  }\n}"}
{"ids": "2275", "raw_code": "void assertThreadsStayAlive(long millis,Thread... threads){\n  try {\n    delay(millis);\n    for (    Thread thread : threads)     assertTrue(thread.isAlive());\n  }\n catch (  InterruptedException fail) {\n    threadFail(\"Unexpected InterruptedException\");\n  }\n}"}
{"ids": "29757", "raw_code": "public AbstractWorkerManager(String id){\n  _id=id;\n  _status=new WorkerManagerStatus();\n  setExecutionMode(EXECUTION_MODE.NON_SERIAL);\n  setupExecutor();\n}"}
{"ids": "12922", "raw_code": "@Override public void applyInline(double[] data,int pos,int len){\n  int i;\n  double[] dataOut=new double[len];\n  if (len > real.length) {\n    throw new IllegalArgumentException(\"Length must not be larger than FFT size\");\n  }\n  int middle=len / 2 + len % 2;\n  System.arraycopy(data,0,dataOut,0,len);\n  System.arraycopy(dataOut,pos + middle,real,0,len - middle);\n  System.arraycopy(dataOut,pos,real,real.length - middle,middle);\n  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);\n  Arrays.fill(imag,0,imag.length,0.);\n  FFT.transform(real,imag,false);\n  process(real,imag);\n  FFT.transform(real,imag,true);\n  System.arraycopy(real,0,dataOut,pos + middle,len - middle);\n  System.arraycopy(real,real.length - middle,dataOut,pos,middle);\n  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);\n  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];\n  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);\n  double scale=origAvgEnergy / newAvgEnergy;\n  for (i=0; i < len; i++)   data[i]*=0.8 * scale;\n}"}
{"ids": "4940", "raw_code": "public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){\n  shove_fail_clear();\n  changed_area_clear();\n  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);\n  if (!r_ok)   return false;\n  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;\n  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);\n  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);\n  return true;\n}"}
{"ids": "14451", "raw_code": "public static byte[] toByteArray(String str){\n  int len=str.length();\n  StringTokenizer st=new StringTokenizer(str,\":\");\n  String[] newStrArray=new String[st.countTokens()];\n  int j=0;\n  while (st.hasMoreTokens()) {\n    newStrArray[j]=st.nextToken();\n    j++;\n  }\n  byte[] ret=new byte[newStrArray.length];\n  int tmp;\n  for (int i=0; i < newStrArray.length; i++) {\n    tmp=Integer.parseInt(newStrArray[i],16);\n    ret[i]=(byte)(tmp - 128);\n  }\n  return ret;\n}"}
{"ids": "49156", "raw_code": "int maxLength(){\n  FontMetrics fm=getFontMetrics(getFont());\n  int m=0;\n  int end=items.size();\n  for (int i=0; i < end; i++) {\n    int l=fm.stringWidth(((String)items.elementAt(i)));\n    m=Math.max(m,l);\n  }\n  return m;\n}"}
{"ids": "5037", "raw_code": "public PlaPointInt round_to_the_left(PlaDirection p_dir){\n  PlaPointFloat dir=p_dir.to_float();\n  double rounded_x;\n  if (dir.v_y > 0) {\n    rounded_x=Math.floor(v_x);\n  }\n else   if (dir.v_y < 0) {\n    rounded_x=Math.ceil(v_x);\n  }\n else {\n    rounded_x=Math.round(v_x);\n  }\n  double rounded_y;\n  if (dir.v_x > 0) {\n    rounded_y=Math.ceil(v_y);\n  }\n else   if (dir.v_x < 0) {\n    rounded_y=Math.floor(v_y);\n  }\n else {\n    rounded_y=Math.round(v_y);\n  }\n  return new PlaPointInt(rounded_x,rounded_y);\n}"}
{"ids": "11967", "raw_code": "public static byte[] unwrapVCF(File sourceFile,File tmpFile) throws FileNotFoundException, IOException {\n  ZipArchiveInputStream in=null;\n  FileOutputStream fos=null;\n  String hmacString=null;\n  try {\n    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));\n    ArchiveEntry entry;\n    in.getNextEntry();\n    fos=new FileOutputStream(tmpFile);\n    IOUtils.copy(in,fos);\n    entry=in.getNextEntry();\n    hmacString=entry.getName();\n    return Utils.hexToBytes(hmacString);\n  }\n catch (  StringIndexOutOfBoundsException e) {\n    logger.error(\"Error parsing hmac: \" + hmacString + \" is no valid hex String\",e);\n    throw e;\n  }\ncatch (  Exception e) {\n    logger.error(\"Error unwrapping VCF file\",e);\n    throw e;\n  }\n finally {\n    if (fos != null) {\n      fos.flush();\n      fos.close();\n    }\n    if (in != null) {\n      in.close();\n    }\n  }\n}"}
{"ids": "50487", "raw_code": "public boolean registerUser(String username,String password,String uri) throws DataAccessException {\n  if (checkUsernameExists(username)) {\n    return false;\n  }\n  storeUser(username,password,uri);\n  return true;\n}"}
{"ids": "68215", "raw_code": "public SELECT(@NonNull String... columns){\n  if (columns == null) {\n    throw new NullPointerException(\"SELECT: Columns are null\");\n  }\n  if (columns.length == 0)   throw new IllegalArgumentException(\"At least on column is required\");\n  StringBuilder builder=new StringBuilder(\"SELECT \");\n  for (int i=0; i < columns.length; i++) {\n    builder.append(columns[i]);\n    if (i != (columns.length - 1))     builder.append(\", \");\n  }\n  sql=builder.toString();\n}"}
{"ids": "34199", "raw_code": "public JKSSignatureToken(InputStream ksStream,String ksPassword){\n  try {\n    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());\n    password=(ksPassword == null) ? null : ksPassword.toCharArray();\n    keyStore.load(ksStream,password);\n  }\n catch (  Exception e) {\n    throw new DSSException(e);\n  }\n finally {\n    if (ksStream != null) {\n      try {\n        ksStream.close();\n      }\n catch (      IOException e) {\n        logger.error(e.getMessage(),e);\n      }\n    }\n  }\n}"}
{"ids": "47850", "raw_code": "protected void writeLocation(String loc) throws IOException {\n  hadAnnotations|=(loc != null);\n  locOut.writeObject(loc);\n}"}
{"ids": "431", "raw_code": "protected int __offset(int vtable_offset){\n  int vtable=bb_pos - bb.getInt(bb_pos);\n  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;\n}"}
{"ids": "21284", "raw_code": "public static String selectText(XPathExpression expr,Node context){\n  try {\n    return (String)expr.evaluate(context,XPathConstants.STRING);\n  }\n catch (  XPathExpressionException e) {\n    throw new XmlException(e);\n  }\n}"}
{"ids": "29711", "raw_code": "public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){\n  if (inHeaders.isEmpty()) {\n    return HttpHeaders.EMPTY_HEADERS;\n  }\n  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());\n  toArmeria(inHeaders,out);\n  return out;\n}"}
{"ids": "25324", "raw_code": "public static int calculateRMSLevel(short[] audioData,int numframes){\n  long lSum=0;\n  int numread=0;\n  for (  short s : audioData) {\n    lSum=lSum + s;\n    numread++;\n    if (numread == numframes)     break;\n  }\n  double dAvg=lSum / numframes;\n  double sumMeanSquare=0d;\n  numread=0;\n  for (  short anAudioData : audioData) {\n    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);\n    numread++;\n    if (numread == numframes)     break;\n  }\n  double averageMeanSquare=sumMeanSquare / numframes;\n  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);\n}"}
{"ids": "76386", "raw_code": "public void bindKeyStore(final KeyStoreService keyStoreService){\n  this.keyStore=keyStoreService;\n}"}
{"ids": "69714", "raw_code": "protected void drawConnectorCenters(Canvas c){\n  List<Connection> connections=mBlock.getAllConnections();\n  Paint paint=new Paint();\n  paint.setStyle(Paint.Style.FILL);\n  for (int i=0; i < connections.size(); i++) {\n    Connection conn=connections.get(i);\n    if (conn.inDragMode()) {\n      if (conn.isConnected()) {\n        paint.setColor(Color.RED);\n      }\n else {\n        paint.setColor(Color.MAGENTA);\n      }\n    }\n else {\n      if (conn.isConnected()) {\n        paint.setColor(Color.GREEN);\n      }\n else {\n        paint.setColor(Color.CYAN);\n      }\n    }\n    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);\n    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);\n    if (mHelper.useRtl()) {\n      mTempConnectionPosition.x+=mBlockViewSize.x;\n    }\n    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint);\n  }\n}"}
{"ids": "29056", "raw_code": "private static boolean isMerge(InstructionHandle handle){\n  if (handle.hasTargeters()) {\n    InstructionTargeter[] targeterList=handle.getTargeters();\n    for (    InstructionTargeter targeter : targeterList) {\n      if (targeter instanceof BranchInstruction) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "22155", "raw_code": "private synchronized void loadTrustManager(){\n  try {\n    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);\n    tmf.init(keystore);\n    for (    TrustManager trustManager : tmf.getTrustManagers()) {\n      if (trustManager instanceof X509TrustManager) {\n        defaultViPRTrustManager=(X509TrustManager)trustManager;\n        log.debug(\"found a X509TrustManager instance\");\n        break;\n      }\n    }\n    log.info(\"renew trust manager. the # of certificates in trust store is {}\",defaultViPRTrustManager.getAcceptedIssuers().length);\n  }\n catch (  GeneralSecurityException e) {\n    log.error(e.getMessage(),e);\n  }\n}"}
{"ids": "14484", "raw_code": "public ThreadPool(String name,int poolSize){\n  this.poolSize=poolSize;\n  this.poolName=name;\n  taskList=new LinkedList<Runnable>();\n  threads=new WorkerThread[poolSize];\n  createThreads();\n}"}
{"ids": "84294", "raw_code": "public final void addHelperTextColor(@ColorInt final int color){\n  if (!helperTextColors.contains(color)) {\n    helperTextColors.add(color);\n    verifyPasswordStrength();\n  }\n}"}
{"ids": "47866", "raw_code": "@SuppressWarnings(\"rawtypes\") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {\n  String cname=classDesc.getName();\n  return ClassFinder.resolveClass(cname,this.loader);\n}"}
{"ids": "43891", "raw_code": "public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){\n  int result=-1;\n  int sublen=key.length;\n  int maxpos, first, sp=0;\n  maxpos=Math.min(toIndex,a.length) - sublen;\n  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {\n    first=find(a,first,maxpos,key[0]);\n    if ((first < 0) || (first > maxpos)) {\n      break;\n    }\n    for (sp=1; sp < sublen; sp++) {\n      if (a[first + sp] != key[sp]) {\n        sp=sublen;\n      }\n    }\n  }\n  if (sublen == 0) {\n    result=0;\n  }\n else   if (sp == sublen) {\n    result=(first - 1);\n  }\n  return result;\n}"}
{"ids": "17320", "raw_code": "private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){\n  result.add(new GraphEdge(head,tail,original.getRelation()));\n}"}
{"ids": "11080", "raw_code": "public void addStates(State[] s){\n  for (int i=0; i < s.length; i++)   states.addElement(s[i]);\n}"}
{"ids": "75202", "raw_code": "private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  init(getMask(actions));\n}"}
{"ids": "49240", "raw_code": "private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){\n  byte[] result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);\n  if (result != null) {\n    return result;\n  }\n else {\n    long sleepTime=INIT_SLEEP_TIME;\n    for (int i=0; i < MAX_ATTEMPTS; i++) {\n      try {\n        Thread.sleep(sleepTime);\n      }\n catch (      InterruptedException e) {\n        return result;\n      }\n      sleepTime*=2;\n      result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);\n      if (result != null) {\n        return result;\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "138", "raw_code": "public Tasker addTask(Task task){\n  tasks.add(task);\n  lastAddedTask=task;\n  return this;\n}"}
{"ids": "41051", "raw_code": "public void sort(){\n  throwIfImmutable();\n  if (!sorted) {\n    Arrays.sort(values,0,size);\n    sorted=true;\n  }\n}"}
{"ids": "60395", "raw_code": "public DefaultActionGroup(@NotNull AnAction... actions){\n  this(Arrays.asList(actions));\n}"}
{"ids": "6552", "raw_code": "public int add(T dl,int row){\n  _list.add(row,dl);\n  fireTableRowsInserted(row,row);\n  return row;\n}"}
{"ids": "469", "raw_code": "@SuppressLint(\"DrawAllocation\") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  int widthMode=MeasureSpec.getMode(widthMeasureSpec);\n  int heightMode=MeasureSpec.getMode(heightMeasureSpec);\n  int maxWidth=MeasureSpec.getSize(widthMeasureSpec);\n  int maxHeight=MeasureSpec.getSize(heightMeasureSpec);\n  if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE;\n  if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE;\n  int paddingLeft=getPaddingLeft();\n  int paddingTop=getPaddingTop();\n  int paddingRight=getPaddingRight();\n  int paddingBottom=getPaddingBottom();\n  int maxRightBound=maxWidth - paddingRight;\n  int maxBottomBound=maxHeight - paddingBottom;\n  int left;\n  int top;\n  int right;\n  int bottom;\n  int rightBound=paddingLeft;\n  int maxRightNoPadding=rightBound;\n  int bottomBound;\n  int lastMaxBottom=paddingTop;\n  int maxBottom=lastMaxBottom;\n  int childWidth;\n  int childHeight;\n  int lineStartIndex=0;\n  int lineEndIndex;\n  rectList.clear();\n  int childCount=getChildCount();\n  for (int index=0; index < childCount; index++) {\n    final View child=getChildAt(index);\n    child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);\n    if (child.getVisibility() == View.GONE)     continue;\n    final LayoutParams lp=(LayoutParams)child.getLayoutParams();\n    childWidth=child.getMeasuredWidth();\n    childHeight=child.getMeasuredHeight();\n    left=rightBound + lp.leftMargin;\n    right=left + childWidth;\n    rightBound=right + lp.rightMargin;\n    if (rightBound > maxRightBound) {\n      lineEndIndex=index;\n      adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex);\n      if (maxBottom >= maxBottomBound)       break;\n      if (lineEndIndex == lineStartIndex) {\n        child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED);\n        childWidth=child.getMeasuredWidth();\n        childHeight=child.getMeasuredHeight();\n      }\n      left=paddingLeft + lp.leftMargin;\n      right=left + childWidth;\n      rightBound=right + lp.rightMargin;\n      lastMaxBottom=maxBottom;\n      top=lastMaxBottom + lp.topMargin;\n      bottom=top + childHeight;\n      bottomBound=bottom + lp.bottomMargin;\n      lineStartIndex=index;\n    }\n else {\n      top=lastMaxBottom + lp.topMargin;\n      bottom=top + childHeight;\n      bottomBound=bottom + lp.bottomMargin;\n    }\n    if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound;\n    if (bottomBound > maxBottom)     maxBottom=bottomBound;\n    Rect rect=new Rect();\n    rect.left=left;\n    rect.top=top;\n    rect.right=right;\n    rect.bottom=bottom;\n    rectList.add(rect);\n  }\n  adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size());\n  int measuredWidth;\n  int measuredHeight;\n  if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth;\n else   measuredWidth=maxRightNoPadding + paddingRight;\n  if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight;\n else {\n    measuredHeight=maxBottom + paddingBottom;\n    if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight;\n  }\n  setMeasuredDimension(measuredWidth,measuredHeight);\n}"}
{"ids": "971", "raw_code": "private void ensureBufferCapacity(int desiredCapacity){\n  int capacity=pixelBuffer.length;\n  while (capacity < desiredCapacity) {\n    capacity*=2;\n  }\n  if (capacity > pixelBuffer.length) {\n    pixelBuffer=new byte[capacity];\n  }\n}"}
{"ids": "56214", "raw_code": "public static <K,V>ConcurrentMap<K,V> newConcurrentMapWithAggressiveConcurrency(){\n  return new ConcurrentHashMap<>(16,0.75f,aggressiveConcurrencyLevel);\n}"}
{"ids": "38842", "raw_code": "@Override public boolean connectionAllowed(String eventName){\n  if (m_listenee != null || !eventName.equals(\"instance\")) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "55632", "raw_code": "protected char skipAllWhitespace(Reader r) throws IOException {\n  char c;\n  do {\n    c=(char)r.read();\n  }\n while (Character.isWhitespace(c) && c != (char)-1);\n  return c;\n}"}
{"ids": "15391", "raw_code": "private String resourceId(){\n  return subSchemaPath.isEmpty() ? null : lastSchemaNodeName();\n}"}
{"ids": "48100", "raw_code": "@Override public boolean isInitial(){\n  return init;\n}"}
{"ids": "8127", "raw_code": "public static String denormalize(final CharSequence self){\n  if (lineSeparator == null) {\n    final StringWriter sw=new StringWriter(2);\n    try {\n      final BufferedWriter bw=new BufferedWriter(sw);\n      bw.newLine();\n      bw.flush();\n      lineSeparator=sw.toString();\n    }\n catch (    IOException ioe) {\n      lineSeparator=\"\\n\";\n    }\n  }\n  final int len=self.length();\n  if (len < 1) {\n    return self.toString();\n  }\n  final StringBuilder sb=new StringBuilder((110 * len) / 100);\n  int i=0;\n  CharSequence cs=(self instanceof GString) ? self.toString() : self;\n  while (i < len) {\n    final char ch=cs.charAt(i++);\nswitch (ch) {\ncase '\\r':\n      sb.append(lineSeparator);\n    if ((i < len) && (cs.charAt(i) == '\\n')) {\n      ++i;\n    }\n  break;\ncase '\\n':\nsb.append(lineSeparator);\nbreak;\ndefault :\nsb.append(ch);\nbreak;\n}\n}\nreturn sb.toString();\n}"}
{"ids": "30547", "raw_code": "public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){\n  try {\n    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);\n    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "48427", "raw_code": "public boolean isAborted(){\n  return isAborted.get();\n}"}
{"ids": "31893", "raw_code": "public IpcSharedMemorySpace(String tokFileName,int writerPid,int readerPid,int size,boolean reader,IgniteLogger parent) throws IgniteCheckedException {\n  assert size > 0 : \"Size cannot be less than 1 byte\";\n  log=parent.getLogger(IpcSharedMemorySpace.class);\n  opSize=size;\n  shmemPtr=IpcSharedMemoryUtils.allocateSystemResources(tokFileName,size,DEBUG && log.isDebugEnabled());\n  shmemId=IpcSharedMemoryUtils.sharedMemoryId(shmemPtr);\n  semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr);\n  isReader=reader;\n  this.tokFileName=tokFileName;\n  this.readerPid=readerPid;\n  this.writerPid=writerPid;\n  if (DEBUG && log.isDebugEnabled())   log.debug(\"Shared memory space has been created: \" + this);\n}"}
{"ids": "70652", "raw_code": "@Override public void close(){\n  try {\n    if (connection != null) {\n      connection.close();\n    }\n  }\n catch (  SQLException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "71282", "raw_code": "public Version addQualifier(String qualifier){\n  List<String> newQualifiers=new ArrayList<>(this.qualifiers);\n  newQualifiers.add(qualifier);\n  return new Version(major,minor,patch,newQualifiers.toArray(new String[newQualifiers.size()]));\n}"}
{"ids": "67956", "raw_code": "public static void unregisterBaggageHandler(BaggageHandler handler){\n  handlers.remove(handler);\n}"}
{"ids": "7936", "raw_code": "public DefaultHeatMapDataset(int xSamples,int ySamples,double minX,double maxX,double minY,double maxY){\n  if (xSamples < 1) {\n    throw new IllegalArgumentException(\"Requires 'xSamples' > 0\");\n  }\n  if (ySamples < 1) {\n    throw new IllegalArgumentException(\"Requires 'ySamples' > 0\");\n  }\n  if (Double.isInfinite(minX) || Double.isNaN(minX)) {\n    throw new IllegalArgumentException(\"'minX' cannot be INF or NaN.\");\n  }\n  if (Double.isInfinite(maxX) || Double.isNaN(maxX)) {\n    throw new IllegalArgumentException(\"'maxX' cannot be INF or NaN.\");\n  }\n  if (Double.isInfinite(minY) || Double.isNaN(minY)) {\n    throw new IllegalArgumentException(\"'minY' cannot be INF or NaN.\");\n  }\n  if (Double.isInfinite(maxY) || Double.isNaN(maxY)) {\n    throw new IllegalArgumentException(\"'maxY' cannot be INF or NaN.\");\n  }\n  this.xSamples=xSamples;\n  this.ySamples=ySamples;\n  this.minX=minX;\n  this.maxX=maxX;\n  this.minY=minY;\n  this.maxY=maxY;\n  this.zValues=new double[xSamples][];\n  for (int x=0; x < xSamples; x++) {\n    this.zValues[x]=new double[ySamples];\n  }\n}"}
{"ids": "7207", "raw_code": "public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){\n  if (compareArraySize(expected,actual)) {\n    return;\n  }\n  int numMatches=0;\n  boolean[] foundReceived=new boolean[actual.length];\n  for (  EventBean[] expectedObject : expected) {\n    boolean found=false;\n    for (int i=0; i < actual.length; i++) {\n      if (foundReceived[i]) {\n        continue;\n      }\n      boolean match=compareEqualsExactOrder(actual[i],expectedObject);\n      if (match) {\n        found=true;\n        numMatches++;\n        foundReceived[i]=true;\n        break;\n      }\n    }\n    if (!found) {\n      log.error(\".assertEqualsAnyOrder Not found in received results is expected=\" + Arrays.toString(expectedObject));\n      log.error(\".assertEqualsAnyOrder received=\" + Arrays.toString(actual));\n    }\n    ScopeTestHelper.assertTrue(found);\n  }\n  ScopeTestHelper.assertEquals(numMatches,expected.length);\n}"}
{"ids": "44318", "raw_code": "private void collectText(){\n  if (textNodeCount > 1) {\n    firstTextNode.setText(textBuffer.toString());\n  }\n  textNodeCount=0;\n}"}
{"ids": "86192", "raw_code": "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) public static <T extends Annotation>T unproxy(T annotation){\n  Function unproxyFunction=getUnproxyFunction(annotation.annotationType());\n  return (T)unproxyFunction.apply(annotation);\n}"}
{"ids": "55115", "raw_code": "public static List<Node> parseExpression(Context context,HashSet<String> configNamespaces,String text){\n  return parseExpression(context,configNamespaces,text,0,false);\n}"}
{"ids": "29956", "raw_code": "public void addTickMarkSection(final Section SECTION){\n  if (null == SECTION)   return;\n  tickMarkSections.add(SECTION);\n  Collections.sort(tickMarkSections,new SectionComparator());\n  fireUpdateEvent(REDRAW_EVENT);\n}"}
{"ids": "52961", "raw_code": "protected static double calcQ_i(double f,double lambda){\n  return lambda * Math.exp(-lambda * f);\n}"}
{"ids": "5921", "raw_code": "void flush(){\n  printStream.flush();\n}"}
{"ids": "3481", "raw_code": "public CharBuffer delete(int start,int end){\n  int length=length();\n  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();\n  end=Math.min(length,end);\n  int tail=length - end;\n  char[] buffer=buffer();\n  for (int i=0; i < tail; i++) {\n    buffer[start + i]=buffer[end + i];\n  }\n  length(length - (end - start));\n  return this;\n}"}
{"ids": "55316", "raw_code": "public void addListener(SpeedrunsLiveListener listener){\n  listeners.add(listener);\n}"}
{"ids": "54795", "raw_code": "public int action(String fault,String action){\n  Integer current=get(fault);\n  if (current == null)   throw new IllegalArgumentException(fault);\n  boolean no=action.startsWith(\"no\");\n  if (no)   action=action.substring(2);\n  Integer bit=getAction(action);\n  if (bit == null)   throw new IllegalArgumentException(action);\n  int old=current.intValue();\n  int mask=bit.intValue();\n  int n=(old & (~mask));\n  n=(no) ? n : (n | mask);\n  put(fault,new Integer(n));\n  return n;\n}"}
{"ids": "39637", "raw_code": "public static <T>T decodeFromBase64(Coder<T> coder,String encodedValue) throws CoderException {\n  return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(encodedValue)),Coder.Context.OUTER);\n}"}
{"ids": "15247", "raw_code": "public void validate(Set setData) throws ValidationException {\n  for (Iterator iter=setData.iterator(); iter.hasNext(); ) {\n    performValidation((String)iter.next());\n  }\n}"}
{"ids": "44942", "raw_code": "public String add(Object... values){\n  double result=0;\n  for (int i=0; i < values.length; i++) {\n    result+=FunctionHandler.getDouble(values[i]);\n  }\n  return Double.toString(result);\n}"}
{"ids": "75869", "raw_code": "public List<String> listMyDBs(String owner,boolean restricted){\n  Connection conn=null;\n  try {\n    conn=getConnection();\n    return listMyDBs(conn,owner,restricted);\n  }\n catch (  Exception ex) {\n    logger.log(Level.SEVERE,\"Exception\",ex);\n  }\n finally {\n    DBUtils.close(conn);\n  }\n  return null;\n}"}
{"ids": "68800", "raw_code": "protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){\n  float input=inputs[inputOffset];\n  for (int i=0; i < getNumOutputs(); i++) {\n    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));\n  }\n}"}
{"ids": "81141", "raw_code": "public int compare(Object o1,Object o2){\n  return comparator.compare(o1,o2);\n}"}
{"ids": "38302", "raw_code": "public void addCheckBoxActionListener(ActionListener al){\n  m_enableDistributedExperiment.addActionListener(al);\n}"}
{"ids": "85291", "raw_code": "GF256Poly addOrSubtract(GF256Poly other){\n  if (!field.equals(other.field)) {\n    throw new IllegalArgumentException(\"GF256Polys do not have same GF256 field\");\n  }\n  if (isZero()) {\n    return other;\n  }\n  if (other.isZero()) {\n    return this;\n  }\n  int[] smallerCoefficients=this.coefficients;\n  int[] largerCoefficients=other.coefficients;\n  if (smallerCoefficients.length > largerCoefficients.length) {\n    int[] temp=smallerCoefficients;\n    smallerCoefficients=largerCoefficients;\n    largerCoefficients=temp;\n  }\n  int[] sumDiff=new int[largerCoefficients.length];\n  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;\n  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);\n  for (int i=lengthDiff; i < largerCoefficients.length; i++) {\n    sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);\n  }\n  return new GF256Poly(field,sumDiff);\n}"}
{"ids": "54391", "raw_code": "public static long firstFieldOffset(Class clazz){\n  long minSize=roundUpTo8(headerSize(clazz));\n  while (clazz != Object.class) {\n    for (    Field f : clazz.getDeclaredFields()) {\n      if ((f.getModifiers() & Modifier.STATIC) == 0) {\n        long offset=unsafe.objectFieldOffset(f);\n        if (offset < minSize) {\n          minSize=offset;\n        }\n      }\n    }\n    clazz=clazz.getSuperclass();\n  }\n  return minSize;\n}"}
{"ids": "15669", "raw_code": "public final V extractFirst(){\n  if (size() > 0) {\n    if (GWT.isScript()) {\n      V ret=jsArray.get(0);\n      jsArray.remove(0);\n      return ret;\n    }\n else {\n      return javaArray.remove(0);\n    }\n  }\n  return null;\n}"}
{"ids": "7401", "raw_code": "@Override public void actionPerformed(ActionEvent event){\n  String command=event.getActionCommand();\n  if (command.equals(\"SelectLabelFont\")) {\n    attemptLabelFontSelection();\n  }\n else   if (command.equals(\"SelectLabelPaint\")) {\n    attemptModifyLabelPaint();\n  }\n else   if (command.equals(\"SelectTickLabelFont\")) {\n    attemptTickLabelFontSelection();\n  }\n}"}
{"ids": "14402", "raw_code": "public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {\n  ServiceConfig sc=getServerConfig(ssoToken,instanceName);\n  if (sc != null) {\n    Map map=sc.getAttributes();\n    map.remove(ATTR_PARENT_SITE_ID);\n    Set newSet=getPropertiesSet(upgradedValues);\n    map.put(ATTR_SERVER_CONFIG,newSet);\n    sc.setAttributes(map);\n  }\n else {\n    throw new ConfigurationException(\"Unable to upgrade server \" + \"default properties: no properties found!\");\n  }\n}"}
{"ids": "15493", "raw_code": "public static <T>T instance(Class<T> clazz){\n  try {\n    return clazz.newInstance();\n  }\n catch (  InstantiationException|IllegalAccessException e) {\n    throw new IllegalStateException(e);\n  }\n}"}
{"ids": "23288", "raw_code": "public GenericSipMsrpSession createMsrpSession(ContactId contact,String featureTag,String[] acceptTypes,String[] acceptWrappedTypes){\n  if (sLogger.isActivated()) {\n    sLogger.info(\"Initiate a MSRP session with contact \" + contact);\n  }\n  return new OriginatingSipMsrpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,acceptTypes,acceptWrappedTypes);\n}"}
{"ids": "84705", "raw_code": "protected void drawMark(Graphics2D g2,float x,float y,Color color){\n  Rectangle2D bounds=mark.getBounds2D();\n  float w=(float)bounds.getWidth();\n  float h=(float)bounds.getHeight();\n  x=x - (w / 2);\n  y=y - (h / 2);\n  g2.translate(x,y);\n  if (color == null) {\n    if (markFillPaint != null) {\n      g2.setPaint(markFillPaint);\n      g2.fill(mark);\n    }\n  }\n else {\n    g2.setPaint(color);\n    g2.fill(mark);\n  }\n  g2.setPaint(markPaint);\n  g2.setStroke(markStroke);\n  g2.draw(mark);\n  g2.translate(-x,-y);\n  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);\n  markBounds.add(rect);\n}"}
{"ids": "11471", "raw_code": "public void componentResized(ComponentEvent e){\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"Size changed: \" + getWidth() + \" x \"+ getHeight());\n  }\n  projection.setWidth(getWidth());\n  projection.setHeight(getHeight());\n  fireProjectionChanged();\n}"}
{"ids": "24964", "raw_code": "private void changeValue(AbstractStorageLabel<Object> label,Object newValue){\n  if (!Objects.equals(label.getValue(),newValue)) {\nsynchronized (labelEditListeners) {\n      for (      LabelEditListener listener : labelEditListeners) {\n        listener.preLabelValueChange(label);\n      }\n    }\n    label.setValue(newValue);\nsynchronized (labelEditListeners) {\n      for (      LabelEditListener listener : labelEditListeners) {\n        listener.postLabelValueChange(label);\n      }\n    }\n  }\n}"}
{"ids": "55041", "raw_code": "public void write(byte[] b,int offset,int length) throws IOException {\n  if (entry.getMethod() == DEFLATED) {\n    if (length > 0) {\n      if (!def.finished()) {\n        def.setInput(b,offset,length);\n        while (!def.needsInput()) {\n          deflate();\n        }\n      }\n    }\n  }\n else {\n    writeOut(b,offset,length);\n    written+=length;\n  }\n  crc.update(b,offset,length);\n}"}
{"ids": "40851", "raw_code": "public void updatePoint(float x,float y){\n  if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) {\n    listener.onAngleChangedListener(getAngle(x,-y));\n  }\n}"}
{"ids": "51661", "raw_code": "@Override public int clampViewPositionHorizontal(View child,int left,int dx){\n  if (mDraggedView == null) {\n    return 0;\n  }\n  final int leftBound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);\n  final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);\n  return Math.min(Math.max(left,leftBound),rightBound);\n}"}
{"ids": "62215", "raw_code": "HttpRequestWrapper(HttpServletRequest request){\n  super(request);\n}"}
{"ids": "38477", "raw_code": "private int convertToPanelX(double xval){\n  double temp=(xval - m_minX) / m_rangeX;\n  temp=temp * m_panelWidth;\n  return (int)temp;\n}"}
{"ids": "68905", "raw_code": "public void forward(HttpServerRequest request){\n  forward(request,null);\n}"}
{"ids": "31771", "raw_code": "private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {\n  Set<String> pkCols=new HashSet<>();\n  stmt.setString(1,owner);\n  stmt.setString(2,tbl);\n  try (ResultSet pkRs=stmt.executeQuery()){\n    while (pkRs.next())     pkCols.add(pkRs.getString(1));\n  }\n   return pkCols;\n}"}
{"ids": "62462", "raw_code": "public static long readUINT32(InputStream stream) throws IOException {\n  long result=0;\n  for (int i=0; i <= 24; i+=8) {\n    result|=(long)stream.read() << i;\n  }\n  return result;\n}"}
{"ids": "35343", "raw_code": "private Token toPrefixToken(ILeafNode leaf){\n  Lexer lexer=new InternalN4JSLexer();\n  String text=leaf.getText();\n  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());\n  ANTLRStringStream stream=new ANTLRStringStream(prefix);\n  lexer.setCharStream(stream);\n  Token nextToken=lexer.nextToken();\n  return new CommonToken(nextToken.getType(),nextToken.getText());\n}"}
{"ids": "35268", "raw_code": "protected void add(CSVRecord record){\n  records.add(Objects.requireNonNull(record));\n}"}
{"ids": "20500", "raw_code": "private void scheduledEnqueueSend(){\n  schedulerQueueSize.decrementAndGet();\n  scheduled.set(false);\n  enqueueSendWithErrorLogging();\n}"}
{"ids": "4053", "raw_code": "private <T>BindingAmp<T> findObjectBinding(Key<T> key){\n  Objects.requireNonNull(key);\n  if (key.qualifiers().length != 1) {\n    throw new IllegalArgumentException();\n  }\n  return (BindingAmp)findBinding(Key.of(Object.class,key.qualifiers()[0]));\n}"}
{"ids": "24438", "raw_code": "public boolean ifTaskCompletedSuccessOrFailureFromResponse(ResponseOnSingeRequest myResponse){\n  boolean isCompleted=false;\n  try {\n    if (myResponse == null || myResponse.isFailObtainResponse()) {\n      return isCompleted;\n    }\n    String responseBody=myResponse.getResponseBody();\n    if (responseBody.matches(successRegex) || responseBody.matches(failureRegex)) {\n      isCompleted=true;\n    }\n  }\n catch (  Exception t) {\n    logger.error(\"fail\" + t);\n  }\n  return isCompleted;\n}"}
{"ids": "37670", "raw_code": "public void centerHorizontal(ArrayList<Integer> nodes){\n  if (m_bNeedsUndoAction) {\n    addUndoAction(new centerHorizontalAction(nodes));\n  }\n  int nMinY=-1;\n  int nMaxY=-1;\n  for (int iNode=0; iNode < nodes.size(); iNode++) {\n    int nY=getPositionY(nodes.get(iNode));\n    if (nY < nMinY || iNode == 0) {\n      nMinY=nY;\n    }\n    if (nY > nMaxY || iNode == 0) {\n      nMaxY=nY;\n    }\n  }\n  for (int iNode=0; iNode < nodes.size(); iNode++) {\n    int nNode=nodes.get(iNode);\n    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);\n  }\n}"}
{"ids": "67260", "raw_code": "protected void appendText(final String text){\n  if (text != null) {\n    textBody.append(text);\n  }\n}"}
{"ids": "30037", "raw_code": "public void onRestoreInstanceState(Bundle savedInstanceState){\n  mSelectedPositions.addAll(savedInstanceState.getIntegerArrayList(TAG));\n  Log.d(TAG,\"Restore selection \" + mSelectedPositions);\n}"}
{"ids": "7863", "raw_code": "public Hour(int hour,Day day){\n  ParamChecks.nullNotPermitted(day,\"day\");\n  this.hour=(byte)hour;\n  this.day=day;\n  peg(Calendar.getInstance());\n}"}
{"ids": "38551", "raw_code": "public void undo(){\n  if (--m_tempUndoIndex < 0) {\n    m_tempUndoIndex=m_tempUndoFiles.length - 1;\n  }\n  if (m_tempUndoFiles[m_tempUndoIndex] != null) {\n    AbstractFileLoader loader=ConverterUtils.getLoaderForFile(m_tempUndoFiles[m_tempUndoIndex]);\n    try {\n      loader.setFile(m_tempUndoFiles[m_tempUndoIndex]);\n      setInstancesFromFile(loader);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      m_Log.logMessage(e.toString());\n      JOptionPane.showMessageDialog(PreprocessPanel.this,\"Cannot perform undo operation!\\n\" + e.toString(),\"Undo\",JOptionPane.ERROR_MESSAGE);\n    }\n    m_tempUndoFiles[m_tempUndoIndex]=null;\n  }\n  int temp=m_tempUndoIndex - 1;\n  if (temp < 0) {\n    temp=m_tempUndoFiles.length - 1;\n  }\n  m_UndoBut.setEnabled(m_tempUndoFiles[temp] != null);\n}"}
{"ids": "54565", "raw_code": "public static boolean isConnectedUsingWifi(){\n  Context context=FeApp.getAppContext();\n  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo ni=cm.getActiveNetworkInfo();\n  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;\n}"}
{"ids": "77481", "raw_code": "public void close() throws IOException {\n  if (writer != null)   writer.flushBuffer();\n}"}
{"ids": "36203", "raw_code": "public Process(final File file,final ProgressListener progressListener) throws IOException, XMLException {\n  this.processLocation=new FileProcessLocation(file);\n  initContext();\n  Reader in=null;\n  try {\n    in=new InputStreamReader(new FileInputStream(file),\"UTF-8\");\n    readProcess(in,progressListener);\n  }\n catch (  IOException e) {\n    throw e;\n  }\n finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n}"}
{"ids": "51000", "raw_code": "@Override public void processNewLines(String[] lines){\n  for (  String line : lines) {\n    if (line.startsWith(\"idx\")) {\n      continue;\n    }\n    if (line.contains(\"No such file\")) {\n      myIsFileMissing=true;\n      return;\n    }\n    String[] values=line.split(LINE_SPLIT_REGEX);\n    if (values.length < INDEX_OF_TX_BYTES) {\n      continue;\n    }\n    try {\n      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);\n      if (myUid == lineUid) {\n        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);\n        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);\n        if (tempRxBytes < 0 || tempTxBytes < 0) {\n          LOG.warning(String.format(\"Negative rxBytes %1$d and/or txBytes %2$d in %3$s\",tempRxBytes,tempTxBytes,line));\n          continue;\n        }\n        myRxBytes+=tempRxBytes;\n        myTxBytes+=tempTxBytes;\n      }\n    }\n catch (    NumberFormatException e) {\n      LOG.warning(String.format(\"Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s\",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));\n    }\n  }\n}"}
{"ids": "24490", "raw_code": "public void adjustIndentation(int delta){\n  if (delta < 0) {\n    indentationLevel=Math.max(0,indentationLevel + delta);\n  }\n else {\n    indentationLevel+=delta;\n  }\n}"}
{"ids": "53747", "raw_code": "public int capacity(){\n  return capacity.get();\n}"}
{"ids": "69506", "raw_code": "protected static token do_code_string() throws java.io.IOException {\n  StringBuffer result=new StringBuffer();\n  advance();\n  advance();\n  while (!(next_char == ':' && next_char2 == '}')) {\n    if (next_char == EOF_CHAR) {\n      emit_error(\"Specification file ends inside a code string\");\n      break;\n    }\n    result.append(new Character((char)next_char));\n    advance();\n  }\n  advance();\n  advance();\n  return new str_token(sym.CODE_STRING,result.toString());\n}"}
{"ids": "44944", "raw_code": "public String random(Object omin,Object omax){\n  int min=FunctionHandler.getInt(omin);\n  int max=FunctionHandler.getInt(omax);\n  if (max > min) {\n    return Integer.toString(rnd.nextInt(max - min) + min);\n  }\n  return \"0\";\n}"}
{"ids": "85378", "raw_code": "public static File searchPaths(Iterable<? extends File> paths,String relFile){\n  for (  File path : paths) {\n    File f=new File(path,relFile);\n    if (f.exists()) {\n      return path;\n    }\n  }\n  return null;\n}"}
{"ids": "25030", "raw_code": "private void loadConfigurationFromJvmParameters(){\n  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);\n  if (null != repositoryProperty) {\n    String[] repositoryIpHost=repositoryProperty.split(\":\");\n    if (repositoryIpHost.length == 2) {\n      String repositoryIp=repositoryIpHost[0];\n      String repositoryPort=repositoryIpHost[1];\n      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {\n        log.info(\"Repository information found in the JVM parameters: IP=\" + repositoryIp + \" Port=\"+ repositoryPort);\n        try {\n          int port=Integer.parseInt(repositoryPort);\n          setRepository(repositoryIp,port);\n        }\n catch (        Exception e) {\n          log.warn(\"Repository could not be defined from the data in the JVM parameters\",e);\n        }\n      }\n    }\n  }\n  String agentName=System.getProperty(AGENT_NAME_PROPERTY);\n  if (StringUtils.isNotBlank(agentName)) {\n    try {\n      log.info(\"Agent name found in the JVM parameters: AgentName=\" + agentName);\n      setAgentName(agentName);\n    }\n catch (    Exception e) {\n      log.warn(\"Agent name could not be defined from the data in the JVM parameters\",e);\n    }\n  }\n else {\n    try {\n      setAgentName(DEFAULT_AGENT_NAME);\n    }\n catch (    StorageException e) {\n      log.warn(\"Agent name could not be defined from default agent name\",e);\n    }\n  }\n}"}
{"ids": "29076", "raw_code": "public boolean softSignin() throws IOException {\n  if (url == null) {\n    throw new IllegalStateException(\"Null host\");\n  }\n  checkResolveHost();\n  if (sessionId != null) {\n    if (checkAuthorized(getAuthCheckUrl(sessionId))) {\n      LOGGER.fine(\"Skipping soft init; session ID already exists - \" + sessionId);\n      return true;\n    }\n else {\n      sessionId=null;\n    }\n  }\n  long id=loadSessionId();\n  if (id == 0) {\n    return false;\n  }\n  boolean authorized=checkAuthorized(getAuthCheckUrl(id));\n  if (authorized) {\n    LOGGER.info(\"Authorized with session ID: \" + id);\n    this.sessionId=id;\n  }\n  return authorized;\n}"}
{"ids": "80379", "raw_code": "protected static boolean approxUnit(final StringBuilder sbuf,final int amount,final int size,final String name){\n  int count=amount / size;\n  int remainder;\n  if (count == 0) {\n    return false;\n  }\n  remainder=amount - (count * size);\n  if (remainder >= (size * 95 / 100)) {\n    count++;\n    sbuf.append(count);\n  }\n else   if (remainder >= (size * 3 / 4)) {\n    count++;\n    sbuf.append(\"just under \");\n    sbuf.append(count);\n  }\n else   if (remainder >= (size * 1 / 4)) {\n    sbuf.append(\"about \");\n    sbuf.append(count);\n    sbuf.append(\" and a half\");\n    count=2;\n  }\n else   if (remainder >= (size * 5 / 100)) {\n    sbuf.append(\"just over \");\n    sbuf.append(count);\n  }\n else {\n    sbuf.append(count);\n  }\n  sbuf.append(' ');\n  sbuf.append(Grammar.plnoun(count,name));\n  return true;\n}"}
{"ids": "45872", "raw_code": "public static Element createElement(Document doc,String tag,String nsURI,String prefix){\n  String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + \":\" + tag;\n  return doc.createElementNS(nsURI,qName);\n}"}
{"ids": "350", "raw_code": "public static void modifyFile(File file,Function<String,String> modifier) throws IOException {\n  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);\n  String result=modifier.apply(content);\n  Files.write(result.getBytes(StandardCharsets.UTF_8),file);\n}"}
{"ids": "11440", "raw_code": "protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){\n  double phi_deg=lat;\n  double phi=ProjMath.degToRad(phi_deg);\n  double lamba_deg=lon;\n  double lamba=ProjMath.degToRad(lamba_deg);\n  double dlamda=lamba - lamdaf;\n  if (dlamda > Math.PI) {\n    dlamda-=MoreMath.TWO_PI_D;\n  }\n else   if (dlamda < -Math.PI) {\n    dlamda+=MoreMath.TWO_PI_D;\n  }\n  double e=ellps.ecc;\n  double r=0.0d;\n  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {\n    double t=lambTsfn(phi,Math.sin(phi),e);\n    r=ellps.radius * F * Math.pow(t,n);\n  }\n  double theta=n * dlamda;\n  double easting=falseEasting + r * Math.sin(theta - alpha);\n  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);\n  lp.setLocation(easting,northing);\n  return dlamda;\n}"}
{"ids": "74405", "raw_code": "protected boolean removeTurntable(LayoutTurntable o){\n  if (!noWarnTurntable) {\n    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(\"Question4r\"),Bundle.getMessage(\"WarningTitle\"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(\"ButtonYes\"),Bundle.getMessage(\"ButtonNo\"),rb.getString(\"ButtonYesPlus\")},Bundle.getMessage(\"ButtonNo\"));\n    if (selectedValue == 1) {\n      return (false);\n    }\n    if (selectedValue == 2) {\n      noWarnTurntable=true;\n    }\n  }\n  if (selectedObject == o) {\n    selectedObject=null;\n  }\n  if (prevSelectedObject == o) {\n    prevSelectedObject=null;\n  }\n  for (int j=0; j < o.getNumberRays(); j++) {\n    TrackSegment t=o.getRayConnectOrdered(j);\n    if (t != null) {\n      substituteAnchor(o.getRayCoordsIndexed(j),o,t);\n    }\n  }\n  for (int i=0; i < turntableList.size(); i++) {\n    LayoutTurntable lx=turntableList.get(i);\n    if (lx == o) {\n      turntableList.remove(i);\n      o.remove();\n      setDirty(true);\n      repaint();\n      return (true);\n    }\n  }\n  return (false);\n}"}
{"ids": "62568", "raw_code": "public INDArray asMatrix(BufferedImage image){\n  if (channels == 3) {\n    return toBgr(image);\n  }\n else {\n    image=scalingIfNeed(image,true);\n    int w=image.getWidth();\n    int h=image.getHeight();\n    INDArray ret=Nd4j.create(h,w);\n    for (int i=0; i < h; i++) {\n      for (int j=0; j < w; j++) {\n        ret.putScalar(new int[]{i,j},image.getRGB(i,j));\n      }\n    }\n    return ret;\n  }\n}"}
{"ids": "20496", "raw_code": "public int scheduledQueueSize(){\n  return schedulerQueueSize.get();\n}"}
{"ids": "9678", "raw_code": "public DGeneralNameChooser(JFrame parent,String title,GeneralName generalName){\n  super(parent,title,ModalityType.DOCUMENT_MODAL);\n  initComponents(generalName);\n}"}
{"ids": "71217", "raw_code": "private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){\n  Coordinate basePt=seg0.p1;\n  double ang0=Angle.angle(basePt,seg0.p0);\n  double ang1=Angle.angle(basePt,seg1.p1);\n  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);\n  double angDiffHalf=angDiff / 2;\n  double midAng=Angle.normalize(ang0 + angDiffHalf);\n  double mitreMidAng=Angle.normalize(midAng + Math.PI);\n  double mitreDist=mitreLimit * distance;\n  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));\n  double bevelHalfLen=distance - bevelDelta;\n  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);\n  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);\n  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);\n  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);\n  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);\n  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);\n  if (side == Position.LEFT) {\n    segList.addPt(bevelEndLeft);\n    segList.addPt(bevelEndRight);\n  }\n else {\n    segList.addPt(bevelEndRight);\n    segList.addPt(bevelEndLeft);\n  }\n}"}
{"ids": "86184", "raw_code": "public static String formatSimpleDecimal(double d){\n  return simpleFormat.format(d);\n}"}
{"ids": "7541", "raw_code": "protected AbstractCategoryItemLabelGenerator(String labelFormat,DateFormat formatter){\n  ParamChecks.nullNotPermitted(labelFormat,\"labelFormat\");\n  ParamChecks.nullNotPermitted(formatter,\"formatter\");\n  this.labelFormat=labelFormat;\n  this.numberFormat=null;\n  this.percentFormat=NumberFormat.getPercentInstance();\n  this.dateFormat=formatter;\n  this.nullValueString=\"-\";\n}"}
{"ids": "49160", "raw_code": "public void delItems(int s,int e){\n  boolean hsbWasVisible=hsbVis;\n  boolean vsbWasVisible=vsbVis;\n  int oldLastDisplayed=lastItemDisplayed();\n  if (log.isLoggable(PlatformLogger.Level.FINE)) {\n    log.fine(\"Deleting from \" + s + \" to \"+ e);\n  }\n  if (log.isLoggable(PlatformLogger.Level.FINEST)) {\n    log.finest(\"Last displayed item: \" + oldLastDisplayed + \", items in window \"+ itemsInWindow()+ \", size \"+ items.size());\n  }\n  if (items.size() == 0) {\n    return;\n  }\n  if (s > e) {\n    int tmp=s;\n    s=e;\n    e=tmp;\n  }\n  if (s < 0) {\n    s=0;\n  }\n  if (e >= items.size()) {\n    e=items.size() - 1;\n  }\n  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());\n  for (int i=s; i <= e; i++) {\n    items.removeElementAt(s);\n    int j=posInSel(i);\n    if (j != -1) {\n      int newsel[]=new int[selected.length - 1];\n      System.arraycopy(selected,0,newsel,0,j);\n      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));\n      selected=newsel;\n    }\n  }\n  int diff=(e - s) + 1;\n  for (int i=0; i < selected.length; i++) {\n    if (selected[i] > e) {\n      selected[i]-=diff;\n    }\n  }\n  int options=PAINT_VSCROLL;\n  if (getFocusIndex() > e) {\n    setFocusIndex(getFocusIndex() - (e - s + 1));\n    options|=PAINT_FOCUS;\n  }\n else   if (getFocusIndex() >= s && getFocusIndex() <= e) {\n    int focusBound=(items.size() > 0) ? 0 : -1;\n    setFocusIndex(Math.max(s - 1,focusBound));\n    options|=PAINT_FOCUS;\n  }\n  if (log.isLoggable(PlatformLogger.Level.FINEST)) {\n    log.finest(\"Multiple selections: \" + multipleSelections);\n  }\n  if (vsb.getValue() >= s) {\n    if (vsb.getValue() <= e) {\n      vsb.setValue(e + 1 - diff);\n    }\n else {\n      vsb.setValue(vsb.getValue() - diff);\n    }\n  }\n  int oldMaxLength=maxLength;\n  maxLength=maxLength();\n  if (maxLength != oldMaxLength) {\n    options|=PAINT_HSCROLL;\n  }\n  layout();\n  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);\n  if (repaintNeeded) {\n    options|=PAINT_ALL;\n  }\n  repaint(s,oldLastDisplayed,options);\n}"}
{"ids": "48910", "raw_code": "static long makeId(SnmpOid oid){\n  long id=0;\n  long[] arcs=oid.longValue(false);\n  id|=arcs[0] << 56;\n  id|=arcs[1] << 48;\n  id|=arcs[2] << 40;\n  id|=arcs[3] << 32;\n  id|=arcs[4] << 24;\n  id|=arcs[5] << 16;\n  id|=arcs[6] << 8;\n  id|=arcs[7];\n  return id;\n}"}
{"ids": "48118", "raw_code": "private void cacheAttribute(String attrId,byte[][] values){\n  String cacheKey=name + \"|\" + attrId;\n  valueCache.put(cacheKey,values);\n}"}
{"ids": "46752", "raw_code": "void read(Reader policy) throws ParsingException, IOException {\n  if (!(policy instanceof BufferedReader)) {\n    policy=new BufferedReader(policy);\n  }\n  st=new StreamTokenizer(policy);\n  st.resetSyntax();\n  st.wordChars('a','z');\n  st.wordChars('A','Z');\n  st.wordChars('.','.');\n  st.wordChars('0','9');\n  st.wordChars('_','_');\n  st.wordChars('$','$');\n  st.wordChars(128 + 32,255);\n  st.whitespaceChars(0,' ');\n  st.commentChar('/');\n  st.quoteChar('\\'');\n  st.quoteChar('\"');\n  st.lowerCaseMode(false);\n  st.ordinaryChar('/');\n  st.slashSlashComments(true);\n  st.slashStarComments(true);\n  st.parseNumbers();\n  Hashtable<String,Vector<String>> processedPermissions=null;\n  lookahead=st.nextToken();\n  while (lookahead != StreamTokenizer.TT_EOF) {\n    if (peek(\"grant\")) {\n      GrantEntry ge=parseGrantEntry(processedPermissions);\n      if (ge != null)       grantEntries.addElement(ge);\n    }\n else {\n      throw new ParsingException(st.lineno(),\"expected grant \" + \"statement\");\n    }\n    match(\";\");\n  }\n}"}
{"ids": "38312", "raw_code": "private void destinationTypeChanged(){\n  if (m_Exp == null)   return;\n  String str=\"\";\n  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {\n    m_ResultsDestinationPathLabel.setText(\"URL:\");\n    str=m_destinationDatabaseURL;\n    m_BrowseDestinationButton.setEnabled(true);\n    m_BrowseDestinationButton.setText(\"User...\");\n  }\n else {\n    m_ResultsDestinationPathLabel.setText(\"Filename:\");\n    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {\n      int ind=m_destinationFilename.lastIndexOf(\".csv\");\n      if (ind > -1) {\n        m_destinationFilename=m_destinationFilename.substring(0,ind) + \".arff\";\n      }\n    }\n    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {\n      int ind=m_destinationFilename.lastIndexOf(\".arff\");\n      if (ind > -1) {\n        m_destinationFilename=m_destinationFilename.substring(0,ind) + \".csv\";\n      }\n    }\n    str=m_destinationFilename;\n    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {\n      int ind=str.lastIndexOf(\".csv\");\n      if (ind > -1) {\n        str=str.substring(0,ind) + \".arff\";\n      }\n    }\n    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {\n      int ind=str.lastIndexOf(\".arff\");\n      if (ind > -1) {\n        str=str.substring(0,ind) + \".csv\";\n      }\n    }\n    m_BrowseDestinationButton.setEnabled(true);\n    m_BrowseDestinationButton.setText(\"Browse...\");\n  }\n  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {\n    DatabaseResultListener drl=null;\n    try {\n      drl=new DatabaseResultListener();\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n    drl.setDatabaseURL(m_destinationDatabaseURL);\n    m_Exp.setResultListener(drl);\n  }\n else {\n    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {\n      InstancesResultListener irl=new InstancesResultListener();\n      if (!m_destinationFilename.equals(\"\")) {\n        irl.setOutputFile(new File(m_destinationFilename));\n      }\n      m_Exp.setResultListener(irl);\n    }\n else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {\n      CSVResultListener crl=new CSVResultListener();\n      if (!m_destinationFilename.equals(\"\")) {\n        crl.setOutputFile(new File(m_destinationFilename));\n      }\n      m_Exp.setResultListener(crl);\n    }\n  }\n  m_ResultsDestinationPathTField.setText(str);\n  m_Support.firePropertyChange(\"\",null,null);\n}"}
{"ids": "53384", "raw_code": "public static InputStream tryGzipInput(InputStream in) throws IOException {\n  if (!in.markSupported()) {\n    PushbackInputStream pb=new PushbackInputStream(in,16);\n    in=pb;\n    byte[] magic={0,0};\n    pb.read(magic);\n    pb.unread(magic);\n    if (magic[0] == 31 && magic[1] == -117) {\n      return new GZIPInputStream(pb);\n    }\n    return in;\n  }\n  in.mark(16);\n  boolean isgzip=(in.read() == 31 && in.read() == -117);\n  in.reset();\n  if (isgzip) {\n    in=new GZIPInputStream(in);\n  }\n  return in;\n}"}
{"ids": "76685", "raw_code": "public static Query newPrefixQuery(String field,InetAddress value,int prefixLength){\n  if (value == null) {\n    throw new IllegalArgumentException(\"InetAddress must not be null\");\n  }\n  if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {\n    throw new IllegalArgumentException(\"illegal prefixLength '\" + prefixLength + \"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges\");\n  }\n  byte lower[]=value.getAddress();\n  byte upper[]=value.getAddress();\n  for (int i=prefixLength; i < 8 * lower.length; i++) {\n    int m=1 << (7 - (i & 7));\n    lower[i >> 3]&=~m;\n    upper[i >> 3]|=m;\n  }\n  try {\n    return newRangeQuery(field,InetAddress.getByAddress(lower),InetAddress.getByAddress(upper));\n  }\n catch (  UnknownHostException e) {\n    throw new AssertionError(e);\n  }\n}"}
{"ids": "14245", "raw_code": "public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {\n  SubjectTypeManager mgr=pm.getSubjectTypeManager();\n  Subject subject=mgr.getSubject(\"AMIdentitySubject\");\n  Set<String> set=new HashSet<String>();\n  set.add(user.getUniversalId());\n  subject.setValues(set);\n  return subject;\n}"}
{"ids": "8466", "raw_code": "private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){\n  commandLineList.add(\"--classpath\");\n  commandLineList.add(classpath.toString());\n  if (jointCompilation) {\n    commandLineList.add(\"-j\");\n    commandLineList.addAll(jointOptions);\n  }\n  if (destDir != null) {\n    commandLineList.add(\"-d\");\n    commandLineList.add(destDir.getPath());\n  }\n  if (encoding != null) {\n    commandLineList.add(\"--encoding\");\n    commandLineList.add(encoding);\n  }\n  if (stacktrace) {\n    commandLineList.add(\"-e\");\n  }\n  if (parameters) {\n    commandLineList.add(\"--parameters\");\n  }\n  if (useIndy) {\n    commandLineList.add(\"--indy\");\n  }\n  if (scriptBaseClass != null) {\n    commandLineList.add(\"-b\");\n    commandLineList.add(scriptBaseClass);\n  }\n  if (configscript != null) {\n    commandLineList.add(\"--configscript\");\n    commandLineList.add(configscript);\n  }\n}"}
{"ids": "70356", "raw_code": "private synchronized void loadHexImage(IHex hex){\n  hexTileset.assignMatch(hex,boardview);\n  hexTileset.trackHexImages(hex,tracker);\n}"}
{"ids": "66938", "raw_code": "private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){\n  Element parameter=document.createElement(\"parameter\");\n  parameter.appendChild(parentElement);\n  parameter.setAttribute(\"package\",spec.getPackageName());\n  parameter.setAttribute(\"class\",spec.getClassName());\n  parameter.setAttribute(\"field\",spec.getFieldName());\n}"}
{"ids": "47671", "raw_code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  init(getMask(actions));\n}"}
{"ids": "43989", "raw_code": "@Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {\n  if (reader == null) {\n    throw new IllegalArgumentException(\"Reader cannot be 'null'\");\n  }\n  if (baseURI == null) {\n    throw new IllegalArgumentException(\"Base URI cannot be 'null'\");\n  }\n  InputSource inputSource=new InputSource(reader);\n  inputSource.setSystemId(baseURI);\n  parse(inputSource);\n}"}
{"ids": "75585", "raw_code": "private String excludeDestinationStatement(String text){\n  int idx=-1;\n  if ((idx=text.indexOf(\"Destination will be\")) != -1) {\n    text=text.substring(0,idx);\n  }\n  return text;\n}"}
{"ids": "11077", "raw_code": "public static void addFile(String s) throws IOException {\n  File f=new File(s);\n  addFile(f);\n}"}
{"ids": "53257", "raw_code": "@Deprecated public void put(Collection<Integer> data){\n  for (  Integer value : data) {\n    final int val=value.intValue();\n    min=val < min ? val : min;\n    max=val > max ? val : max;\n  }\n}"}
{"ids": "48603", "raw_code": "public IntBuffer majorVersionBuffer(){\n  int[] holder=new int[1];\n  holder[0]=getMajorVersion();\n  IntBuffer ib=IntBuffer.wrap(holder);\n  ib.limit(1);\n  return ib;\n}"}
{"ids": "29627", "raw_code": "public static byte[] createDataToSign(byte[] digest){\n  byte[] prefix=getDigestInfoPrefix(digest);\n  byte[] digestInfo=new byte[prefix.length + digest.length];\n  System.arraycopy(prefix,0,digestInfo,0,prefix.length);\n  System.arraycopy(digest,0,digestInfo,prefix.length,digest.length);\n  return digestInfo;\n}"}
{"ids": "6021", "raw_code": "public HttpRequest ifModifiedSince(final long value){\n  connection.setIfModifiedSince(value);\n  return this;\n}"}
{"ids": "69908", "raw_code": "public static String tmpJournal(){\n  final File file=Code.wrapThrow(null);\n  file.deleteOnExit();\n  return file.getAbsolutePath();\n}"}
{"ids": "52965", "raw_code": "protected static void printErrorMessage(Exception e){\n  if (e instanceof AbortException) {\n    LoggingConfiguration.setVerbose(Level.VERBOSE);\n    LOG.verbose(e.getMessage());\n  }\n else   if (e instanceof UnspecifiedParameterException) {\n    LOG.error(e.getMessage());\n  }\n else   if (e instanceof ParameterException) {\n    LOG.error(e.getMessage());\n  }\n else {\n    LOG.exception(e);\n  }\n}"}
{"ids": "9354", "raw_code": "private void applyL1Reg(final double eta_t,Vec x){\n  if (lambda1 > 0) {\n    l1U+=eta_t * lambda1;\n    for (int k=0; k < ws.length; k++) {\n      final Vec w_k=ws[k];\n      final double[] l1Q_k=l1Q[k];\n      for (      IndexValue iv : x) {\n        final int i=iv.getIndex();\n        final double z=w_k.get(i);\n        double newW_i=0;\n        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));\n else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));\n        l1Q_k[i]+=(newW_i - z);\n        w_k.set(i,newW_i);\n      }\n    }\n  }\n}"}
{"ids": "33152", "raw_code": "public static MoveParticipant[] loadMoveParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,MoveArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){\n  RefactoringParticipant[] participants=fgMoveExtensions.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);\n  MoveParticipant[] result=new MoveParticipant[participants.length];\n  System.arraycopy(participants,0,result,0,participants.length);\n  return result;\n}"}
{"ids": "52932", "raw_code": "private long[] determinePreferenceVector(Relation<V> relation,ModifiableDBIDs[] neighborIDs,StringBuilder msg){\n  if (strategy.equals(Strategy.APRIORI)) {\n    return determinePreferenceVectorByApriori(relation,neighborIDs,msg);\n  }\n else   if (strategy.equals(Strategy.MAX_INTERSECTION)) {\n    return determinePreferenceVectorByMaxIntersection(neighborIDs,msg);\n  }\n else {\n    throw new IllegalStateException(\"Should never happen!\");\n  }\n}"}
{"ids": "82761", "raw_code": "private void paintForegroundDisabled(Graphics2D g,int width,int height){\n  Shape s=decodeArrowPath(width,height);\n  g.setPaint(disabledColor);\n  g.fill(s);\n}"}
{"ids": "3178", "raw_code": "private void onUser(@NotNull TLAbsUser absUser){\n  User currentUser=null;\n  User user=null;\n  if (absUser instanceof TLUser) {\n    final TLUser tlUser=(TLUser)absUser;\n    if (tlUser.isMutualContact()) {\n      currentUser=(User)databaseManager.getUserById(tlUser.getId());\n      user=onUserContact(currentUser,tlUser);\n    }\n else     if (tlUser.isDeleted()) {\n      currentUser=(User)databaseManager.getUserById(tlUser.getId());\n      user=onUserDelete(currentUser,tlUser);\n    }\n else     if (tlUser.isContact()) {\n      currentUser=(User)databaseManager.getUserById(tlUser.getId());\n      user=onUserRequest(currentUser,tlUser);\n    }\n else     if (tlUser.isSelf() || !tlUser.isBot()) {\n      currentUser=(User)databaseManager.getUserById(tlUser.getId());\n      user=onUserForeign(currentUser,tlUser);\n    }\n else {\n      BotLogger.info(LOGTAG,\"Bot received\");\n    }\n  }\n  if ((currentUser == null) && (user != null)) {\n    databaseManager.addUser(user);\n  }\n else   if (user != null) {\n    databaseManager.updateUser(user);\n  }\n}"}
{"ids": "68033", "raw_code": "@Override public boolean hasNext(){\n  log.log(Level.FINE,\"hasNext()\");\n  boolean result=(nextEvent != null);\n  log.log(Level.FINE,\"hasNext(): {0}\",result);\n  return result;\n}"}
{"ids": "66007", "raw_code": "private void initialize(ModelValidator validator,MClient client){\n  if (client == null)   m_globalValidators.add(validator);\n  m_validators.add(validator);\n  validator.initialize(this,client);\n}"}
{"ids": "34892", "raw_code": "public void reset(){\n  engineReset();\n  state=INITIAL;\n}"}
{"ids": "36602", "raw_code": "public Perspective createUserPerspective(final String name,final boolean show){\n  Perspective perspective=model.addPerspective(name,true);\n  perspective.store(context);\n  if (show) {\n    showPerspective(name);\n  }\n  return perspective;\n}"}
{"ids": "86640", "raw_code": "public static double phred(double error){\n  return -10 * Math.log10(error);\n}"}
{"ids": "35395", "raw_code": "@SafeVarargs public final Token<TokenType> expect(TokenType... expected) throws SimpleParserException {\n  if (hasType(expected))   return this;\n  throw new SimpleParserException(line,column,\"Expected \" + Arrays.toString(expected) + \", but got \"+ toString());\n}"}
{"ids": "30291", "raw_code": "EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){\n  EgDemandDetails demandDetail=null;\n  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {\n    final Installment currInstallment=getCurrentInstallment(module);\n    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);\n    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException(\" Penalty Demand reason Master is null in method  insertPenalty\");\n    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);\n    if (egDemandReason == null)     throw new ApplicationRuntimeException(\" Penalty Demand reason is null in method  insertPenalty \");\n    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);\n  }\n  return demandDetail;\n}"}
{"ids": "12557", "raw_code": "public SampleInfo(ByteBuffer bb) throws IOException {\n  numberOfChannels=bb.getInt();\n  sampleRate=bb.getInt();\n  coeffMin=bb.getFloat();\n  coeffRange=bb.getFloat();\n  postEmphasis=bb.getFloat();\n  residualFold=bb.getInt();\n}"}
{"ids": "50178", "raw_code": "public void handleMaintenance(Operation maintOp){\n  performPendingRequestMaintenance();\n  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);\n  maintOp.complete();\n}"}
{"ids": "8104", "raw_code": "public static boolean isPostJDK7(String bytecodeVersion){\n  return JDK7.equals(bytecodeVersion) || JDK8.equals(bytecodeVersion);\n}"}
{"ids": "54936", "raw_code": "private InputStream findTemplate(String path,String template){\n  try {\n    File file=new File(path,template);\n    if (file.canRead()) {\n      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));\n    }\n else {\n      return null;\n    }\n  }\n catch (  FileNotFoundException fnfe) {\n    return null;\n  }\n}"}
{"ids": "83535", "raw_code": "public void addListener(CircularProgressViewListener listener){\n  if (listener != null)   listeners.add(listener);\n}"}
{"ids": "14960", "raw_code": "public SiteStatusCheckThreadImpl(){\n  super();\n  urlCheckers=new HashMap();\n}"}
{"ids": "74716", "raw_code": "@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){\n  glyphDisplay.setScalingValues(0,0,scaling);\n  final float OLDglyphScale=glyphScale;\n  if (isFormGlyph) {\n    glyphScale=scaling * glyphScale;\n  }\n  AffineTransform aff=null;\n  if (glyphScale != 1f) {\n    aff=g2.getTransform();\n    g2.scale(glyphScale,glyphScale);\n  }\n  glyphDisplay.setG2(g2);\n  glyphDisplay.paint(null,null,null);\n  if (aff != null) {\n    g2.setTransform(aff);\n  }\n  glyphScale=OLDglyphScale;\n}"}
{"ids": "85402", "raw_code": "public List<String> reset(List<String> replace){\n  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());\n  copy.addAll(retainedVars);\n  retainedVars.clear();\n  if (replace != null) {\n    retainedVars.addAll(replace);\n  }\n  return copy;\n}"}
{"ids": "48883", "raw_code": "protected void release(){\n  AppContext tempAppContext=null;\nsynchronized (grabReleaseSynchronizer) {\n    if (usageCount > 1) {\n      --usageCount;\n    }\n else {\nsynchronized (threadGroupSynchronizer) {\n        tempAppContext=resetAppContext();\n      }\n    }\n  }\n  if (tempAppContext != null) {\n    try {\n      tempAppContext.dispose();\n    }\n catch (    IllegalThreadStateException e) {\n    }\n  }\n}"}
{"ids": "53706", "raw_code": "public synchronized void deleteAllTables(){\n  List<String> tableNames=new ArrayList<String>(tableLookup.keySet());\n  for (  String s : tableNames) {\n    deleteTable(s);\n  }\n}"}
{"ids": "72250", "raw_code": "public PetCategory findOne(String id){\n  log.debug(\"Request to get PetCategory : {}\",id);\n  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id));\n  return petCategory;\n}"}
{"ids": "79725", "raw_code": "private void markRemovedDefaultSessionToken(String site,String token){\n  if (removedDefaultTokens == null)   removedDefaultTokens=new HashMap<>(1);\n  HashSet<String> removedSet=removedDefaultTokens.get(site);\n  if (removedSet == null) {\n    removedSet=new HashSet<>(1);\n    removedDefaultTokens.put(site,removedSet);\n  }\n  removedSet.add(token);\n}"}
{"ids": "21622", "raw_code": "private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){\n  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();\n  for (  VolumeDescriptor descr : addDescriptors) {\n    URI deviceURI=descr.getDeviceURI();\n    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);\n    if (volumesToUpdateByCG == null) {\n      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();\n      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);\n    }\n    URI consistencyGroupURI=descr.getConsistencyGroupURI();\n    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);\n    if (volumesToUpdate == null) {\n      volumesToUpdate=new HashMap<String,List<URI>>();\n      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);\n    }\n    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);\n    if (volumesToAdd == null) {\n      volumesToAdd=new ArrayList<URI>();\n      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);\n    }\n    volumesToAdd.add(descr.getVolumeURI());\n  }\n  for (  VolumeDescriptor descr : removeDescriptors) {\n    URI deviceURI=descr.getDeviceURI();\n    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);\n    if (volumesToUpdateByCG == null) {\n      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();\n      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);\n    }\n    URI consistencyGroupURI=descr.getConsistencyGroupURI();\n    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);\n    if (volumesToUpdate == null) {\n      volumesToUpdate=new HashMap<String,List<URI>>();\n      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);\n    }\n    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);\n    if (volumesToRemove == null) {\n      volumesToRemove=new ArrayList<URI>();\n      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);\n    }\n    volumesToRemove.add(descr.getVolumeURI());\n  }\n  return deviceToCGMap;\n}"}
{"ids": "25381", "raw_code": "public Exchange(final Request request,final Origin origin){\n  this.currentRequest=request;\n  this.origin=origin;\n  this.timestamp=System.currentTimeMillis();\n}"}
{"ids": "47298", "raw_code": "public static final FileTime unixTimeToFileTime(long utime){\n  return FileTime.from(utime,TimeUnit.SECONDS);\n}"}
{"ids": "40915", "raw_code": "public void removeAddress(AddressEntity address){\n  addresses.remove(address);\n}"}
{"ids": "15426", "raw_code": "private boolean verifyMigrateFromProductHome(String migrateFromProductHome) throws InstallException {\n  if (migrateFromProductHome == null || migrateFromProductHome.length() == 0) {\n    Debug.log(\"MultipleMigrateDriver.verifyMigrateFromProductHome() :\" + \"empty product home by the user\");\n    Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND));\n    return false;\n  }\n  if (!migrateFromProductHome.equals(ConfigUtil.getHomePath())) {\n    Debug.log(\"MultipleMigrateDriver.verifyMigrateFromProductHome() : \" + \"Migrate from product home: \" + migrateFromProductHome + \", New product home: \"+ ConfigUtil.getHomePath());\n    String translateFile=migrateFromProductHome + MigrateFromInstFinderStore.getRelativeTranslateFile();\n    if (!FileUtils.isFileValid(translateFile)) {\n      Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND));\n      return false;\n    }\n  }\n else {\n    Debug.log(\"MultipleMigrateDriver - Error:\" + \"This product has been already migrated!\");\n    throw new InstallException(LocalizedMessage.get(LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED));\n  }\n  return true;\n}"}
{"ids": "12906", "raw_code": "private void insertProsodySettings(Utterance utterance,Element element){\n  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);\n  if (prosody == null) {\n    return;\n  }\n  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);\n  if (voice != null && DomUtils.isAncestor(prosody,voice)) {\n    return;\n  }\n  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);\n  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {\n    return;\n  }\n  for (  String att : PROSODY_ATTRIBUTES) {\n    String val=prosody.getAttribute(att);\n    if (!val.equals(\"\")) {\n      utterance.setString(att,val);\n    }\n  }\n}"}
{"ids": "33695", "raw_code": "public static boolean createFolder(@SuppressWarnings(\"UnusedParameters\") Context mContext,String path,String folderName){\n  File SDCardRoot=new File(path,folderName);\n  if (!SDCardRoot.exists()) {\n    return SDCardRoot.mkdir();\n  }\n  return false;\n}"}
{"ids": "29235", "raw_code": "void add(Object key){\n  table.put(key,key);\n}"}
{"ids": "52576", "raw_code": "public Configuration loadConfigFromResource(Resource resource){\n  PropertiesConfiguration result=new PropertiesConfiguration();\n  try {\n    result.load(resource.getInputStream());\n    return result;\n  }\n catch (  ConfigurationException|IOException e) {\n    LOG.error(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);\n    throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);\n  }\n}"}
{"ids": "55835", "raw_code": "public final void log(String filename,int lineNumber,String method,String tag,int level,String message){\n  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());\n  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);\n  if (filename != null) {\n    lm.addString(filename,LogMessage.PART_KEY_FILENAME);\n    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);\n  }\n  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);\n  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);\n  lm.addString(message,LogMessage.PART_KEY_MESSAGE);\n  log(lm);\n}"}
{"ids": "4287", "raw_code": "public static boolean expressionIsTrue(double leftSide,Operator operator,double rightSide){\n  final String expression=leftSide + operator.getMathematicalOperator() + rightSide;\n  return expressionIsTrue(expression);\n}"}
{"ids": "52551", "raw_code": "public synchronized void commit(){\nsynchronized (mutex) {\n    Map<Column,Set<Interval>> temp=workingIntervals;\n    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());\n    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));\n    super.columns=new LinkedHashSet<>(temp.keySet());\n  }\n}"}
{"ids": "81460", "raw_code": "public static String extractIndentString(String line,int tabWidth,int indentWidth){\n  if (tabWidth < 0 || indentWidth < 0 || line == null) {\n    throw new IllegalArgumentException();\n  }\n  int size=line.length();\n  int end=0;\n  int spaceEquivs=0;\n  int characters=0;\n  for (int i=0; i < size; i++) {\n    char c=line.charAt(i);\n    if (c == '\\t') {\n      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);\n      characters++;\n    }\n else     if (isIndentChar(c)) {\n      spaceEquivs++;\n      characters++;\n    }\n else {\n      break;\n    }\n    if (spaceEquivs >= indentWidth) {\n      end+=characters;\n      characters=0;\n      if (indentWidth == 0) {\n        spaceEquivs=0;\n      }\n else {\n        spaceEquivs=spaceEquivs % indentWidth;\n      }\n    }\n  }\n  if (end == 0) {\n    return Util.EMPTY_STRING;\n  }\n else   if (end == size) {\n    return line;\n  }\n else {\n    return line.substring(0,end);\n  }\n}"}
{"ids": "52921", "raw_code": "private void preInsert(MkMaxEntry q,MkMaxEntry nodeEntry,KNNHeap knns_q){\n  if (LOG.isDebugging()) {\n    LOG.debugFine(\"preInsert \" + q + \" - \"+ nodeEntry+ \"\\n\");\n  }\n  double knnDist_q=knns_q.getKNNDistance();\n  MkMaxTreeNode<O> node=getNode(nodeEntry);\n  double knnDist_node=0.;\n  if (node.isLeaf()) {\n    for (int i=0; i < node.getNumEntries(); i++) {\n      MkMaxEntry p=node.getEntry(i);\n      double dist_pq=distance(p.getRoutingObjectID(),q.getRoutingObjectID());\n      if (dist_pq <= knnDist_q) {\n        knns_q.insert(dist_pq,p.getRoutingObjectID());\n        if (knns_q.size() >= getKmax()) {\n          knnDist_q=knns_q.getKNNDistance();\n          q.setKnnDistance(knnDist_q);\n        }\n      }\n      if (dist_pq <= p.getKnnDistance()) {\n        KNNList knns_p=knnq.getKNNForDBID(p.getRoutingObjectID(),getKmax() - 1);\n        if (knns_p.size() + 1 < getKmax()) {\n          p.setKnnDistance(Double.NaN);\n        }\n else {\n          double knnDist_p=Math.max(dist_pq,knns_p.getKNNDistance());\n          p.setKnnDistance(knnDist_p);\n        }\n      }\n      knnDist_node=Math.max(knnDist_node,p.getKnnDistance());\n    }\n  }\n else {\n    List<DoubleIntPair> entries=getSortedEntries(node,q.getRoutingObjectID());\n    for (    DoubleIntPair distEntry : entries) {\n      MkMaxEntry dirEntry=node.getEntry(distEntry.second);\n      double entry_knnDist=dirEntry.getKnnDistance();\n      if (distEntry.second < entry_knnDist || distEntry.second < knnDist_q) {\n        preInsert(q,dirEntry,knns_q);\n        knnDist_q=knns_q.getKNNDistance();\n      }\n      knnDist_node=Math.max(knnDist_node,dirEntry.getKnnDistance());\n    }\n  }\n  if (LOG.isDebugging()) {\n    LOG.debugFine(nodeEntry + \"set knn dist \" + knnDist_node);\n  }\n  nodeEntry.setKnnDistance(knnDist_node);\n}"}
{"ids": "12197", "raw_code": "private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){\n  if (matches(statusLine,x,y)) {\n    final String filename=statusLine.substring(3);\n    if (!container.contains(filename)) {\n      container.add(filename);\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "1191", "raw_code": "public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {\n  return encode(plain.getBytes(charset));\n}"}
{"ids": "86931", "raw_code": "public void slide(SLIDE slide){\n  if (slide == SLIDE.UP) {\n    if (!isPanelShown()) {\n      int position=0;\n      if (items != null) {\n        position=items.size() / 2;\n      }\n      slideUp(position);\n    }\n  }\n else {\n    hidePanelPickerUI();\n  }\n}"}
{"ids": "53112", "raw_code": "public boolean isDebuggingFinest(){\n  return logger.isLoggable(Level.FINEST);\n}"}
{"ids": "85198", "raw_code": "public void reset(){\n  ns.removeAllElements();\n  ks.setLength(0);\n  cur=tt.root;\n  run();\n}"}
{"ids": "8781", "raw_code": "@LayoutlibDelegate static float sin(float angle){\n  return (float)Math.sin(angle);\n}"}
{"ids": "74901", "raw_code": "public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){\n  final BufferedImage image=AnnotationFactory.getIcon(form);\n  if (image != null) {\n    final GraphicsState gs=new GraphicsState();\n    final int iconHeight=image.getHeight();\n    final int iconWidth=image.getWidth();\n    final float[] rect=form.getFloatArray(PdfDictionary.Rect);\n    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {\n      rect[2]=rect[0] + iconWidth;\n      rect[1]=rect[3] - iconHeight;\n      form.setFloatArray(PdfDictionary.Rect,rect);\n    }\nswitch (rotation % 360) {\ncase 0:\n      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};\n    gs.x=rect[0];\n  gs.y=rect[3] - iconHeight;\ngs.CTM[2][0]=rect[0];\ngs.CTM[2][1]=rect[3] - iconHeight;\nbreak;\ncase 90:\ngs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};\ngs.x=rect[0] + iconHeight;\ngs.y=rect[3];\ngs.CTM[2][0]=rect[0] + iconHeight;\ngs.CTM[2][1]=rect[3];\nbreak;\ncase 180:\ngs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};\ngs.x=rect[0];\ngs.y=rect[3] + iconHeight;\ngs.CTM[2][0]=rect[0];\ngs.CTM[2][1]=rect[3] + iconHeight;\nbreak;\ncase 270:\ngs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};\ngs.x=rect[0] - iconHeight;\ngs.y=rect[3];\ngs.CTM[2][0]=rect[0] - iconHeight;\ngs.CTM[2][1]=rect[3];\nbreak;\n}\nif (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {\ncurrent.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);\ncurrent.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);\n}\ncurrent.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);\nif (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {\ncurrent.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);\ncurrent.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);\n}\n}\n}"}
{"ids": "78198", "raw_code": "public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {\n  return null;\n}"}
{"ids": "14849", "raw_code": "public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {\n  prototype.parseSessionString();\n  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);\n}"}
{"ids": "77072", "raw_code": "public static Automaton determinize(Automaton a,int maxDeterminizedStates){\n  if (a.isDeterministic()) {\n    return a;\n  }\n  if (a.getNumStates() <= 1) {\n    return a;\n  }\n  Automaton.Builder b=new Automaton.Builder();\n  SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0);\n  b.createState();\n  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();\n  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();\n  worklist.add(initialset);\n  b.setAccept(0,a.isAccept(0));\n  newstate.put(initialset,0);\n  final PointTransitionSet points=new PointTransitionSet();\n  final SortedIntSet statesSet=new SortedIntSet(5);\n  Transition t=new Transition();\n  while (worklist.size() > 0) {\n    SortedIntSet.FrozenIntSet s=worklist.removeFirst();\n    for (int i=0; i < s.values.length; i++) {\n      final int s0=s.values[i];\n      int numTransitions=a.getNumTransitions(s0);\n      a.initTransition(s0,t);\n      for (int j=0; j < numTransitions; j++) {\n        a.getNextTransition(t);\n        points.add(t);\n      }\n    }\n    if (points.count == 0) {\n      continue;\n    }\n    points.sort();\n    int lastPoint=-1;\n    int accCount=0;\n    final int r=s.state;\n    for (int i=0; i < points.count; i++) {\n      final int point=points.points[i].point;\n      if (statesSet.upto > 0) {\n        assert lastPoint != -1;\n        statesSet.computeHash();\n        Integer q=newstate.get(statesSet);\n        if (q == null) {\n          q=b.createState();\n          if (q >= maxDeterminizedStates) {\n            throw new TooComplexToDeterminizeException(a,maxDeterminizedStates);\n          }\n          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);\n          worklist.add(p);\n          b.setAccept(q,accCount > 0);\n          newstate.put(p,q);\n        }\n else {\n          assert (accCount > 0 ? true : false) == b.isAccept(q) : \"accCount=\" + accCount + \" vs existing accept=\"+ b.isAccept(q)+ \" states=\"+ statesSet;\n        }\n        b.addTransition(r,q,lastPoint,point - 1);\n      }\n      int[] transitions=points.points[i].ends.transitions;\n      int limit=points.points[i].ends.next;\n      for (int j=0; j < limit; j+=3) {\n        int dest=transitions[j];\n        statesSet.decr(dest);\n        accCount-=a.isAccept(dest) ? 1 : 0;\n      }\n      points.points[i].ends.next=0;\n      transitions=points.points[i].starts.transitions;\n      limit=points.points[i].starts.next;\n      for (int j=0; j < limit; j+=3) {\n        int dest=transitions[j];\n        statesSet.incr(dest);\n        accCount+=a.isAccept(dest) ? 1 : 0;\n      }\n      lastPoint=point;\n      points.points[i].starts.next=0;\n    }\n    points.reset();\n    assert statesSet.upto == 0 : \"upto=\" + statesSet.upto;\n  }\n  Automaton result=b.finish();\n  assert result.isDeterministic();\n  return result;\n}"}
{"ids": "72522", "raw_code": "private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){\n  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));\n  final UnivariateFunction f=null;\n  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;\n  double afterRootT=ta, afterRootG=0.0;\n  if (ta == tb) {\n    beforeRootT=ta;\n    beforeRootG=ga;\n    afterRootT=shiftedBy(beforeRootT,convergence);\n    afterRootG=f.value(afterRootT);\n  }\n else   if (ga != 0.0 && gb == 0.0) {\n    beforeRootT=tb;\n    beforeRootG=gb;\n    afterRootT=shiftedBy(beforeRootT,convergence);\n    afterRootG=f.value(afterRootT);\n  }\n else   if (ga != 0.0) {\n    final double newGa=f.value(ta);\n    if (ga > 0 != newGa > 0) {\n      beforeRootT=ta;\n      beforeRootG=newGa;\n      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);\n      afterRootG=f.value(afterRootT);\n    }\n  }\n  double loopT=ta, loopG=ga;\n  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {\n    if (loopG == 0.0) {\n      beforeRootT=loopT;\n      beforeRootG=loopG;\n      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);\n      afterRootG=f.value(afterRootT);\n    }\n else {\n      if (forward) {\n        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);\n        beforeRootT=interval.getLeftAbscissa();\n        beforeRootG=interval.getLeftValue();\n        afterRootT=interval.getRightAbscissa();\n        afterRootG=interval.getRightValue();\n      }\n else {\n        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);\n        beforeRootT=interval.getRightAbscissa();\n        beforeRootG=interval.getRightValue();\n        afterRootT=interval.getLeftAbscissa();\n        afterRootG=interval.getLeftValue();\n      }\n    }\n    if (beforeRootT == afterRootT) {\n      afterRootT=nextAfter(afterRootT);\n      afterRootG=f.value(afterRootT);\n    }\n    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));\n    loopT=afterRootT;\n    loopG=afterRootG;\n  }\n  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {\n    return false;\n  }\n else {\n    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));\n    increasing=!g0Positive;\n    pendingEventTime=beforeRootT;\n    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;\n    pendingEvent=true;\n    afterEvent=afterRootT;\n    afterG=afterRootG;\n    check(afterG > 0 == increasing);\n    check(increasing == gb >= ga);\n    return true;\n  }\n}"}
{"ids": "84127", "raw_code": "public static int compare(Comparable c1,Comparable c2,boolean nullGreater){\n  if (c1 == c2) {\n    return 0;\n  }\n else   if (c1 == null) {\n    return (nullGreater ? 1 : -1);\n  }\n else   if (c2 == null) {\n    return (nullGreater ? -1 : 1);\n  }\n  return c1.compareTo(c2);\n}"}
{"ids": "73531", "raw_code": "public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {\n  if (iterator.hasNext()) {\nsynchronized (iterator.next()) {\n      return syncRest(iterator,task);\n    }\n  }\n else {\n    return task.call();\n  }\n}"}
{"ids": "81999", "raw_code": "private static Component findByName(Container root,String componentName){\n  if (verbose) {\n    log(\"findByName(\" + root + \", \"+ componentName+ \")\");\n  }\n  int count=root.getComponentCount();\n  for (int iter=0; iter < count; iter++) {\n    Component c=root.getComponentAt(iter);\n    String n=c.getName();\n    if (n != null && n.equals(componentName)) {\n      return c;\n    }\n    if (c instanceof Container) {\n      c=findByName((Container)c,componentName);\n      if (c != null) {\n        return c;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "63640", "raw_code": "public boolean isFingerprint(ClassTemplate classTemplate){\n  return fingerprintClass.equals(classTemplate.getImplementingClass());\n}"}
{"ids": "32588", "raw_code": "public void writeField(final String name,final float value) throws java.io.IOException {\n  writeField(name,Float.toString(value));\n}"}
{"ids": "7933", "raw_code": "private List extractColumnKeys(String line){\n  List keys=new java.util.ArrayList();\n  int fieldIndex=0;\n  int start=0;\n  for (int i=0; i < line.length(); i++) {\n    if (line.charAt(i) == this.fieldDelimiter) {\n      if (fieldIndex > 0) {\n        String key=line.substring(start,i);\n        keys.add(removeStringDelimiters(key));\n      }\n      start=i + 1;\n      fieldIndex++;\n    }\n  }\n  String key=line.substring(start,line.length());\n  keys.add(removeStringDelimiters(key));\n  return keys;\n}"}
{"ids": "36710", "raw_code": "protected void drawRhombus(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){\n  int halfWidth=w / 2;\n  int halfHeight=h / 2;\n  Polygon rhombus=new Polygon();\n  rhombus.addPoint(x + halfWidth,y);\n  rhombus.addPoint(x + w,y + halfHeight);\n  rhombus.addPoint(x + halfWidth,y + h);\n  rhombus.addPoint(x,y + halfHeight);\n  drawPolygon(rhombus,fillColor,fillPaint,penColor,shadow);\n}"}
{"ids": "47884", "raw_code": "static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n  ClassLoader cl=sibling.getClassLoader();\n  Class<?> cls=ClassFinder.findClass(className,cl);\n  return cls.newInstance();\n}"}
{"ids": "8848", "raw_code": "public synchronized void show(Bundle options){\n  if (DEBUG)   Log.d(TAG,\"show(); mKeyguardView==\" + mKeyguardView);\n  boolean enableScreenRotation=shouldEnableScreenRotation();\n  maybeCreateKeyguardLocked(enableScreenRotation,false,options);\n  maybeEnableScreenRotation(enableScreenRotation);\n  final int visFlags=View.STATUS_BAR_DISABLE_HOME;\n  if (DEBUG)   Log.v(TAG,\"show:setSystemUiVisibility(\" + Integer.toHexString(visFlags) + \")\");\n  mKeyguardHost.setSystemUiVisibility(visFlags);\n  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);\n  mKeyguardHost.setVisibility(View.VISIBLE);\n  mKeyguardView.show();\n  mKeyguardView.requestFocus();\n}"}
{"ids": "46717", "raw_code": "public static int computeStringWidth(FontMetrics fm,String str){\n  return SwingUtilities2.stringWidth(null,fm,str);\n}"}
{"ids": "86414", "raw_code": "private boolean passesSanityCheck(AccessibilityEvent event){\n  final CharSequence afterText=getEventText(event);\n  final CharSequence beforeText=event.getBeforeText();\n  if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) {\n    return true;\n  }\n  if (afterText == null || beforeText == null) {\n    return false;\n  }\n  final int diff=(event.getAddedCount() - event.getRemovedCount());\n  return ((beforeText.length() + diff) == afterText.length());\n}"}
{"ids": "11275", "raw_code": "public void actionPerformed(ActionEvent ae){\n  String command=ae.getActionCommand();\n  if (command == DisplayPaletteCmd) {\n    if (Debug.debugging(\"layer\")) {\n      Debug.output(getName() + \" displaying palette\");\n    }\n    showPalette();\n  }\n else   if (command == HidePaletteCmd) {\n    if (Debug.debugging(\"layer\")) {\n      Debug.output(getName() + \" hiding palette\");\n    }\n    hidePalette();\n  }\n else   if (command == DisplayPropertiesCmd) {\n    Inspector inspector=new Inspector();\n    inspector.inspectPropertyConsumer(this);\n  }\n}"}
{"ids": "52507", "raw_code": "@JsonCreator public DataSourceMetadata(@JsonProperty(\"name\") String name,@JsonProperty(\"properties\") Map<String,String> properties,@JsonProperty(\"segments\") List<DataSegment> segments){\n  this.name=name;\n  this.properties=Collections.unmodifiableMap(properties);\n  this.segments=Collections.unmodifiableList(segments);\n}"}
{"ids": "86966", "raw_code": "public EMail createEMail(String value){\n  EmailField emailImpl=new EmailField();\n  try {\n    emailImpl.setValue(value);\n  }\n catch (  SdpException s) {\n    s.printStackTrace();\n  }\n  return emailImpl;\n}"}
{"ids": "66442", "raw_code": "public AddressLookup(String serverUrl,String serialNo,String password){\n  this.serverUrl=serverUrl.trim();\n  this.clientID=serialNo.trim();\n  this.accessCode=password.trim();\n}"}
{"ids": "72243", "raw_code": "public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){\n  if (permission == null || permission.equals(\"\")) {\n    throw new IllegalArgumentException(\"Empty permission\");\n  }\n  if (server != null && (server.equalsIgnoreCase(\"global\") || server.equals(\"\"))) {\n    server=null;\n  }\n  if (world != null && world.equals(\"\")) {\n    world=null;\n  }\n  if (world != null && server == null) {\n    server=\"global\";\n  }\n  this.permission=permission;\n  this.value=value;\n  this.override=override;\n  this.expireAt=expireAt;\n  this.server=server;\n  this.world=world;\n  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();\n}"}
{"ids": "85209", "raw_code": "public Cell(int rowspan,int colspan){\n  this.rowspan=Math.max(rowspan,1);\n  this.colspan=Math.max(colspan,1);\n}"}
{"ids": "21141", "raw_code": "private void initializeLocalAndTargetInfo() throws Exception {\n  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);\n  if (targetSiteInfo == null) {\n    targetSiteInfo=new SiteInfo();\n    try {\n      coordinator.setTargetInfo(targetSiteInfo,false);\n      log.info(\"Step1b: Target site info set to: {}\",targetSiteInfo);\n    }\n catch (    CoordinatorClientException e) {\n      log.info(\"Step1b: Wait another control node to set target\");\n      retrySleep();\n      throw e;\n    }\n  }\n  localVdcPropInfo=localRepository.getVdcPropertyInfo();\n  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);\n  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));\n  targetVdcPropInfo=loadVdcConfig();\n  if (isGeoUpgradeFromPreYoda()) {\n    log.info(\"Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk\");\n    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));\n    localRepository.setVdcPropertyInfo(localVdcPropInfo);\n  }\n else {\n    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {\n      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());\n      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));\n      localRepository.setVdcPropertyInfo(localVdcPropInfo);\n      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);\n      String[] vdcIds=vdc_ids.split(\",\");\n      if (vdcIds.length > 1) {\n        log.info(\"More than one Vdc, rebooting\");\n        reboot();\n      }\n    }\n  }\n  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);\n  if (targetPowerOffState == null) {\n    try {\n      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));\n      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);\n      log.info(\"Step1b: Target poweroff state set to: {}\",PowerOffState.State.NONE);\n    }\n catch (    CoordinatorClientException e) {\n      log.info(\"Step1b: Wait another control node to set target\");\n      retrySleep();\n      throw e;\n    }\n  }\n}"}
{"ids": "5535", "raw_code": "public boolean equals(Object interval){\n  if (intervals == null) {\n    return false;\n  }\n  return intervals.contains(interval);\n}"}
{"ids": "81981", "raw_code": "public static String relativeToAbsolute(String baseURL,String relativeURL){\n  if (relativeURL.startsWith(\"/\")) {\n    return getURLProtocol(baseURL) + \"://\" + getURLHost(baseURL)+ relativeURL;\n  }\n else {\n    return getURLProtocol(baseURL) + \"://\" + getURLHost(baseURL)+ getURLBasePath(baseURL)+ relativeURL;\n  }\n}"}
{"ids": "53945", "raw_code": "public void start(){\n  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {\n    DHT.logDebug(\"Starting Task: \" + toString());\n    startTime=System.currentTimeMillis();\n    try {\n      serializedUpdate.run();\n    }\n catch (    Exception e) {\n      DHT.log(e,LogLevel.Error);\n    }\n  }\n}"}
{"ids": "50108", "raw_code": "private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){\n  for (int i=0; i < instructions.size(); i++) {\n    Instruction currInst=instructions.get(i);\n    if (op == 0) {\n      if (currInst instanceof MRJobInstruction) {\n        MRJobInstruction currMRInst=(MRJobInstruction)currInst;\n        if (currMRInst.findMRInstructions(lineNumber)) {\n          BreakPointInstruction breakpoint=new BreakPointInstruction();\n          breakpoint.setLocation(currInst);\n          breakpoint.setInstID(instID++);\n          breakpoint.setBPInstructionLocation(location);\n          instructions.add(i,breakpoint);\n          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);\n          return;\n        }\n      }\n else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {\n        if (currInst.getLineNum() == lineNumber) {\n          BreakPointInstruction breakpoint=new BreakPointInstruction();\n          breakpoint.setLocation(currInst);\n          breakpoint.setInstID(instID++);\n          breakpoint.setBPInstructionLocation(location);\n          instructions.add(i,breakpoint);\n          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);\n          return;\n        }\n      }\n else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {\n        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;\n        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);\n        breakpoint.setBPInstructionLocation(location);\n        instructions.set(i,breakpoint);\n        DMLBreakpointManager.updateBreakpoint(lineNumber,status);\n        return;\n      }\n    }\n else {\n      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {\n        if (op == 1) {\n          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;\n          breakpoint.setLocation(currInst);\n          breakpoint.setInstID(currInst.getInstID());\n          breakpoint.setBPInstructionStatus(status);\n          breakpoint.setBPInstructionLocation(location);\n          instructions.set(i,breakpoint);\n          DMLBreakpointManager.updateBreakpoint(lineNumber,status);\n        }\n else {\n          instructions.remove(i);\n          DMLBreakpointManager.removeBreakpoint(lineNumber,status);\n        }\n        return;\n      }\n    }\n  }\n}"}
{"ids": "19718", "raw_code": "private void closeFile(){\n  if (plogStream != null) {\n    try {\n      plogStream.close();\n      logger.info(\"File \" + plogFilename + \" closed.\");\n    }\n catch (    IOException e) {\n      logger.warn(\"Unable to close file cleanly: \" + plogFilename);\n    }\n finally {\n      plogStream=null;\n    }\n  }\n}"}
{"ids": "41410", "raw_code": "private void parseFirstConsonant(){\n  Iterator iter=alFirstConsonants.iterator();\n  while (iter.hasNext()) {\n    String strFirstCon=(String)iter.next();\n    if (strSyllable.startsWith(strFirstCon,iCurPos)) {\n      strFirstConsonant=strFirstCon;\n      iCurPos+=strFirstCon.length();\n      return;\n    }\n  }\n  strFirstConsonant=ZERO;\n}"}
{"ids": "80158", "raw_code": "private BuddyPanelController(){\n  buddyPanel=new JPanel();\n  buddyPanel.setLayout(new SBoxLayout(SBoxLayout.VERTICAL));\n  model=new BuddyListModel();\n  JList<Buddy> list=new BuddyPanel(model);\n  buddyPanel.add(list,SLayout.EXPAND_X);\n}"}
{"ids": "8592", "raw_code": "public static CLPlatform[] listGPUPoweredPlatforms(){\n  CLPlatform[] platforms=listPlatforms();\n  List<CLPlatform> out=new ArrayList<CLPlatform>(platforms.length);\n  for (  CLPlatform platform : platforms) {\n    if (platform.listGPUDevices(true).length > 0)     out.add(platform);\n  }\n  return out.toArray(new CLPlatform[out.size()]);\n}"}
{"ids": "16920", "raw_code": "public ActionRequestHelper dependsOn(ActionRequestHelper dependency){\n  mDependencies.add(dependency);\n  return this;\n}"}
{"ids": "63276", "raw_code": "static boolean isDate(Object obj){\n  return obj instanceof Date && obj.getClass() == Date.class;\n}"}
{"ids": "72557", "raw_code": "private static List<Vector2D> buildQuadrilateral(final Vector2D... points){\n  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();\n  for (  Vector2D p : points) {\n    if (!quadrilateral.contains(p)) {\n      quadrilateral.add(p);\n    }\n  }\n  return quadrilateral;\n}"}
{"ids": "14974", "raw_code": "public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){\n  Properties defaultProp=null;\n  if (withDefaults) {\n    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());\n    defaultProp=ServerConfiguration.getDefaults(appToken);\n  }\n  PropertiesHolder oldProps;\n  PropertiesHolder newProps;\n  do {\n    oldProps=propertiesHolderRef.get();\n    final Properties combined=new Properties();\n    if (defaultProp != null) {\n      combined.putAll(defaultProp);\n    }\n    if (!reset) {\n      combined.putAll(oldProps.properties);\n    }\n    combined.putAll(properties);\n    newProps=new PropertiesHolder(Maps.fromProperties(combined));\n  }\n while (!propertiesHolderRef.compareAndSet(oldProps,newProps));\n}"}
{"ids": "73423", "raw_code": "public void addNetworkListener(final NetworkListener listener){\n  networkListeners.add(listener);\n}"}
{"ids": "73271", "raw_code": "public void addErrorListener(final ErrorListener errorListener){\n  if (errorListeners == null) {\n    errorListeners=new ArrayList<ErrorListener>();\n  }\n  errorListeners.add(errorListener);\n}"}
{"ids": "72016", "raw_code": "private void validateClassName(String className){\n  String nvalue=className.trim();\n  if (!nvalue.matches(CLASS_RE)) {\n    throw PropertyException.illegalPropertyValueException(this,className);\n  }\n}"}
{"ids": "36816", "raw_code": "public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {\n  final String query=\"INSERT INTO \" + CTableNames.BASE_TYPES_TABLE + \" SELECT \"+ moduleId+ \", id, name, size, pointer, signed \"+ \"FROM \"+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId);\n  connection.executeUpdate(query,true);\n  final String updateSequence=String.format(\"SELECT setval('bn_base_types_id_seq', \" + \"COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s\",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);\n  connection.executeQuery(updateSequence,true);\n}"}
{"ids": "21908", "raw_code": "public void recordFileSystemOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){\n  try {\n    boolean opStatus=(Operation.Status.ready == status) ? true : false;\n    String evType;\n    evType=opType.getEvType(opStatus);\n    String evDesc=opType.getDescription();\n    String opStage=AuditLogManager.AUDITOP_END;\n    _logger.info(\"opType: {} detail: {}\",opType.toString(),evType.toString() + ':' + evDesc);\n    URI uri=(URI)extParam[0];\n    recordBourneFileSystemEvent(dbClient,evType,status,evDesc,uri);\n    auditFile(dbClient,opType,opStatus,opStage,uri.toString());\n  }\n catch (  Exception e) {\n    _logger.error(\"Failed to record filesystem operation {}, err:\",opType.toString(),e);\n  }\n}"}
{"ids": "9781", "raw_code": "public DExamineSsl(JFrame parent,KseFrame kseFrame){\n  super(parent,res.getString(\"DExamineSsl.Title\"),Dialog.ModalityType.DOCUMENT_MODAL);\n  this.kseFrame=kseFrame;\n  initComponents();\n}"}
{"ids": "84940", "raw_code": "private static List<String> computeDynamicVMArgs(IJavaProject javaProject){\n  ArrayList<String> out=new ArrayList<String>();\n  String devJarPath=maybeGetDevJarPath(javaProject);\n  if (devJarPath.length() > 0) {\n    out.add(\"-Dgwt.devjar=\\\"\" + devJarPath + '\"');\n  }\n  return out;\n}"}
{"ids": "72433", "raw_code": "public double[] skipTo(final int index) throws MathIllegalArgumentException {\n  if (index == 0) {\n    Arrays.fill(x,0);\n  }\n else {\n    final int i=index - 1;\n    final long grayCode=i ^ (i >> 1);\n    for (int j=0; j < dimension; j++) {\n      long result=0;\n      for (int k=1; k <= BITS; k++) {\n        final long shift=grayCode >> (k - 1);\n        if (shift == 0) {\n          break;\n        }\n        final long ik=shift & 1;\n        result^=ik * direction[j][k];\n      }\n      x[j]=result;\n    }\n  }\n  count=index;\n  return nextVector();\n}"}
{"ids": "14765", "raw_code": "public void removeOrganizationConfiguration(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {\n  if ((groupName == null) || groupName.length() == 0) {\n    groupName=SMSUtils.DEFAULT;\n  }\n  String orgdn=DNMapper.orgNameToDN(orgName);\n  validateSCM();\n  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);\n  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);\n  if (cEntry.isNewEntry()) {\n    return;\n  }\n  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {\n    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);\n    amsdk.unassignService(serviceName);\n  }\n  if (!cEntry.isNewEntry()) {\n    SMSEntry entry=cEntry.getClonedSMSEntry();\n    entry.delete(token);\n    cEntry.refresh(entry);\n  }\n}"}
{"ids": "73430", "raw_code": "public void removeGroupListener(final GroupListener listener){\n  groupListeners.remove(listener);\n}"}
{"ids": "77969", "raw_code": "public SetChangelogMapping(String source,String taskName,int changelogPartitionNumber){\n  super(source);\n  setType(TYPE);\n  setKey(taskName);\n  putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartitionNumber));\n}"}
{"ids": "81487", "raw_code": "@Override protected String extractKey(final String name){\n  final String key=unescape(name.substring(0,name.length() - 4));\n  return key.equals(\"\\0\") ? null : key;\n}"}
{"ids": "24963", "raw_code": "@SuppressWarnings(\"unchecked\") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException {\n  Method parseKeyMethod=findParseMethod(keyClass);\n  Method parseValueMethod=findParseMethod(valueClass);\n  if ((null != parseKeyMethod) && (null != parseValueMethod)) {\n    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {\n      try {\n        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());\n        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());\n        if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) {\n          map.put((K)transformedKey,(V)transformedValue);\n        }\n      }\n catch (      Exception e) {\n        throw new PreferenceException(\"Error transforming Map<java.lang.String, java.lang.String> to Map<\" + keyClass.getName() + \", \"+ valueClass.getName()+ \">.\",e);\n      }\n    }\n  }\n else   if (null == parseKeyMethod) {\n    throw new PreferenceException(\"Error transforming Map<java.lang.String, java.lang.String> to Map<\" + keyClass.getName() + \", \"+ valueClass.getName()+ \">.\"+ \"Parsing method can not be found in class \"+ keyClass.getName()+ \".\");\n  }\n else {\n    throw new PreferenceException(\"Error transforming Map<java.lang.String, java.lang.String> to Map<\" + keyClass.getName() + \", \"+ valueClass.getName()+ \">.\"+ \"Parsing method can not be found in class \"+ valueClass.getName()+ \".\");\n  }\n}"}
{"ids": "49174", "raw_code": "public boolean grabInput(){\n  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {\n    grabLog.fine(\"Grab input on {0}\",this);\n  }\n  XToolkit.awtLock();\n  try {\n    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {\n      grabLog.fine(\"    Already Grabbed\");\n      return true;\n    }\n    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();\n    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);\n    final int ownerEvents=1;\n    if (!XToolkit.getSunAwtDisableGrab()) {\n      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);\n      if (ptrGrab != XConstants.GrabSuccess) {\n        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);\n        XAwtState.setGrabWindow(null);\n        grabLog.fine(\"    Grab Failure - mouse\");\n        return false;\n      }\n      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);\n      if (keyGrab != XConstants.GrabSuccess) {\n        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);\n        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);\n        XAwtState.setGrabWindow(null);\n        grabLog.fine(\"    Grab Failure - keyboard\");\n        return false;\n      }\n    }\n    if (prevGrabWindow != null) {\n      prevGrabWindow.ungrabInputImpl();\n    }\n    XAwtState.setGrabWindow(this);\n    grabLog.fine(\"    Grab - success\");\n    return true;\n  }\n  finally {\n    XToolkit.awtUnlock();\n  }\n}"}
{"ids": "33926", "raw_code": "public ComponentManager(Collection<Sequence> generalSeeds){\n  Set<Sequence> seedSet=new LinkedHashSet<>(generalSeeds.size());\n  seedSet.addAll(generalSeeds);\n  this.gralSeeds=Collections.unmodifiableSet(seedSet);\n  gralComponents=new SequenceCollection(seedSet);\n}"}
{"ids": "68796", "raw_code": "private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {\n  final byte[] paddedPassword=padPassword(userPassword);\n  MessageDigest md5=createMD5Digest();\n  md5.reset();\n  md5.update(paddedPassword);\n  md5.update(oValue);\n  md5.update((byte)(pValue & 0xFF));\n  md5.update((byte)((pValue >> 8) & 0xFF));\n  md5.update((byte)((pValue >> 16) & 0xFF));\n  md5.update((byte)(pValue >> 24));\n  if (firstDocIdValue != null) {\n    md5.update(firstDocIdValue);\n  }\n  if (revision >= 4 && !encryptMetadata) {\n    for (int i=0; i < 4; ++i) {\n      md5.update((byte)0xFF);\n    }\n  }\n  byte[] hash=md5.digest();\n  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);\n  final byte[] key=new byte[keyLen];\n  if (revision >= 3) {\n    for (int i=0; i < 50; ++i) {\n      md5.update(hash,0,key.length);\n      digestTo(md5,hash);\n    }\n  }\n  System.arraycopy(hash,0,key,0,key.length);\n  return key;\n}"}
{"ids": "44697", "raw_code": "public MessageCapture(final Logger logger,final boolean captureEntity){\n  this(logger,captureEntity,false);\n}"}
{"ids": "69208", "raw_code": "public static final byte[] unzip(byte[] in) throws IOException {\n  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);\n  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));\n  byte[] buf=new byte[BUF_SIZE];\n  while (true) {\n    int size=inStream.read(buf);\n    if (size <= 0)     break;\n    outStream.write(buf,0,size);\n  }\n  outStream.close();\n  return outStream.toByteArray();\n}"}
{"ids": "17097", "raw_code": "public static void insertIntoCombo(JComboBox combo,Object item){\n  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();\n  if (model.getSize() == 0) {\n    model.insertElementAt(item,0);\n    return;\n  }\n  Object o=model.getElementAt(0);\n  if (o.equals(item)) {\n    return;\n  }\n  model.removeElement(item);\n  model.insertElementAt(item,0);\n  combo.setSelectedIndex(0);\n}"}
{"ids": "65380", "raw_code": "private boolean pythonErrorIn(String output){\n  boolean isError=false;\n  String[] outputMultiline=output.split(\"\\n\");\n  Matcher errorMatcher;\n  for (  String row : outputMultiline) {\n    errorMatcher=errorInLastLine.matcher(row);\n    if (errorMatcher.find() == true) {\n      isError=true;\n      break;\n    }\n  }\n  return isError;\n}"}
{"ids": "53048", "raw_code": "public Set<T> keySet(){\n  return Collections.unmodifiableSet(map.keySet());\n}"}
{"ids": "25328", "raw_code": "public void onStart(){\n  if (mAudioMirrorBuffer == null) {\n    mAudioMirrorBuffer=new byte[262144];\n  }\n  if (mStreamer != null) {\n    mStreamer.start();\n  }\n  if (mInsecureStreamer != null) {\n    mInsecureStreamer.start();\n  }\n}"}
{"ids": "361", "raw_code": "public NativeRunner(File eclipsec){\n  this.eclipsec=Objects.requireNonNull(eclipsec);\n}"}
{"ids": "27492", "raw_code": "private static String indent(final int height){\n  return CoreBaseBOp.indent(height);\n}"}
{"ids": "2351", "raw_code": "public static Calendar reduceCalendar(Calendar calendar){\n  calendar.set(Calendar.MILLISECOND,0);\n  calendar.set(Calendar.SECOND,0);\n  calendar.set(Calendar.MINUTE,0);\n  calendar.set(Calendar.HOUR,0);\n  calendar.set(Calendar.HOUR_OF_DAY,0);\n  return calendar;\n}"}
{"ids": "10255", "raw_code": "public static String surround(String string,String prefix,String suffix){\n  if (string.startsWith(prefix) == false) {\n    string=prefix + string;\n  }\n  if (string.endsWith(suffix) == false) {\n    string+=suffix;\n  }\n  return string;\n}"}
{"ids": "9025", "raw_code": "public static String trimOrPad(String str,int length,char padChar){\n  String result;\n  if (str == null) {\n    result=\"\";\n  }\n else {\n    result=str;\n  }\n  if (result.length() > length) {\n    return result.substring(0,length);\n  }\n  while (result.length() < length) {\n    result+=padChar;\n  }\n  return result;\n}"}
{"ids": "14297", "raw_code": "void scheduleToTimerPool(){\n  if (sessionPollerPool.isPollingEnabled()) {\n    long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;\n    if (sessionPollerPool.getCacheBasedPolling()) {\n      timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime);\n    }\n    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);\n  }\n else {\n    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {\n      long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;\n      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);\n    }\n  }\n}"}
{"ids": "15990", "raw_code": "public CipherParameters decrypt(byte[] in,int keyLen){\n  return decrypt(in,0,in.length,keyLen);\n}"}
{"ids": "35126", "raw_code": "private static void logOsInfo(){\n  Logger.appendLog(\"[Main][I]User Os is \" + Cfg.getOs());\n  Logger.appendLog(\"[Main][I]Os name : \" + Os.getOsName());\n  Logger.appendLog(\"[Main][I]User Platform is : \" + Os.platform());\n  Logger.appendLog(\"[Main][I]JAVA version : \" + System.getProperty(\"java.version\"));\n  Logger.appendLog(\"[Main][I]Available cores (cpu) = \" + HostInfo.availableCpus());\n  Logger.appendLog(\"[Main][I]Max allocated memory = \" + HostInfo.getMaxMemory() + \" bytes\");\n}"}
{"ids": "21687", "raw_code": "public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){\n  return String.format(\"%s+%s+%s\",transportType,_deviceTypeMap.get(deviceType),fabricId);\n}"}
{"ids": "8003", "raw_code": "@Override public boolean equalsValue(final Object other){\n  return Objects.equals(this.value,other);\n}"}
{"ids": "14468", "raw_code": "public static void error(String msg,Throwable t){\n  debugInst.debug(IDebug.ERROR,msg,t);\n}"}
{"ids": "23130", "raw_code": "public void removeEventListener(SIPTransactionEventListener oldListener){\n  eventListeners.remove(oldListener);\n}"}
{"ids": "62239", "raw_code": "public static ExecutionSystem newExecutionSystem(URI uri,Map<String,?> env) throws IOException {\n  return newExecutionSystem(uri,env,null);\n}"}
{"ids": "44738", "raw_code": "public static boolean isCommand(IElementType type){\n  return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND;\n}"}
{"ids": "67907", "raw_code": "public void send(XTraceReport report){\n  outgoing.offer(report);\n}"}
{"ids": "60377", "raw_code": "@Contract(pure=true) public static boolean startsWithConcatenation(@NotNull String string,@NotNull String... prefixes){\n  int offset=0;\n  for (  String prefix : prefixes) {\n    int prefixLen=prefix.length();\n    if (!string.regionMatches(offset,prefix,0,prefixLen)) {\n      return false;\n    }\n    offset+=prefixLen;\n  }\n  return true;\n}"}
{"ids": "11297", "raw_code": "public boolean fireMapMouseClicked(MouseEvent evt){\n  if (DEBUG) {\n    logger.fine(\"MapMouseSupport: fireMapMouseClicked\");\n  }\n  clickHappened=true;\n  boolean consumed=false;\n  evt=new MapMouseEvent(getParentMode(),evt);\n  if (priorityListener != null && evt.getClickCount() > 1) {\n    priorityListener.mouseClicked(evt);\n    consumed=true;\n  }\n  priorityListener=null;\n  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) {\n    Iterator<MapMouseListener> it=iterator();\n    while (it.hasNext() && !consumed) {\n      MapMouseListener target=it.next();\n      consumed=target.mouseClicked(evt) && consumeEvents;\n      if (consumed) {\n        priorityListener=target;\n      }\n    }\n  }\n  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0));\n  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {\n    proxy.mouseClicked(evt);\n    consumed=true;\n  }\n  return consumed;\n}"}
{"ids": "55131", "raw_code": "private void emitClass(DocComment comment){\n  String tagName=(comment.getType() == DocComment.CLASS) ? \"classRec\" : \"interfaceRec\";\n  xml.append(\"\\n<\");\n  xml.append(tagName);\n  xml.append(\" name='\");\n  xml.append(comment.getName());\n  xml.append(\"' fullname='\");\n  xml.append(comment.getFullname());\n  String sourcefile=comment.getSourceFile();\n  if (sourcefile != null) {\n    xml.append(\"' sourcefile='\");\n    xml.append(sourcefile);\n  }\n  xml.append(\"' namespace='\");\n  xml.append(comment.getNamespace());\n  xml.append(\"' access='\");\n  xml.append(comment.getAccess());\n  xml.append(\"' \");\n  if (comment.getType() == DocComment.INTERFACE) {\n    String[] baseClasses=comment.getBaseclasses();\n    if (baseClasses != null) {\n      xml.append(\"baseClasses='\");\n      for (int i=0; i < baseClasses.length; i++) {\n        String baseclass=baseClasses[i];\n        if (baseclass != null) {\n          if (i != 0)           xml.append(\";\");\n          xml.append(baseclass);\n        }\n      }\n      xml.append(\"' \");\n    }\n  }\n else {\n    xml.append(\"baseclass='\");\n    xml.append(comment.getBaseClass());\n    xml.append(\"' \");\n    String[] interfaces=comment.getInterfaces();\n    if (interfaces != null) {\n      xml.append(\"interfaces='\");\n      for (int i=0; i < interfaces.length; i++) {\n        String inter=interfaces[i];\n        if (inter != null) {\n          if (i != 0)           xml.append(\";\");\n          xml.append(inter);\n        }\n      }\n      xml.append(\"' \");\n    }\n  }\n  xml.append(\"isFinal='\");\n  xml.append(comment.isFinal());\n  xml.append(\"' \");\n  xml.append(\"isDynamic='\");\n  xml.append(comment.isDynamic());\n  xml.append(\"' \");\n  xml.append(\">\");\n  String desc=comment.getDescription();\n  if (desc != null)   appendTag(\"description\",comment.getDescription());\n  emitTags(comment.getAllTags());\n  if (comment.getMetadata() != null)   emitMetadata(comment.getMetadata());\n  xml.append(\"\\n</\");\n  xml.append(tagName);\n  xml.append(\">\");\n}"}
{"ids": "66420", "raw_code": "protected void paintContentBorderTopEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){\n  if (isContentBorderPainted) {\n    g.setColor(selectHighlight);\n    g.fillRect(x,y,w - 1,1);\n  }\n}"}
{"ids": "83228", "raw_code": "public void analyzeAllItAndWriteResults(){\n  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);\n  PrintStream stream;\n  try {\n    stream=new PrintStream(new File(outputDir + \"routesAndTTs.txt\"));\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n    return;\n  }\n  String header=\"it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low\";\n  stream.println(header);\n  double totalTTIt;\n  double[] avgRouteTTsIt;\n  int[] routeUsersIt;\n  for (int i=0; i <= lastIteration; i++) {\n    log.info(\"Starting to analyze iteration \" + i + \" of \"+ lastIteration+ \" iterations.\");\n    String eventsFilename=runDir.getEventsFilename(i);\n    EventsManager eventsManager=new EventsManagerImpl();\n    TtAnalyzeBraess handler=new TtAnalyzeBraess();\n    eventsManager.addHandler(handler);\n    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);\n    reader.readFile(eventsFilename);\n    totalTTIt=handler.getTotalTT();\n    avgRouteTTsIt=handler.calculateAvgRouteTTs();\n    routeUsersIt=handler.getRouteUsers();\n    StringBuffer line=new StringBuffer();\n    line.append(i + \"\\t\" + totalTTIt);\n    for (int j=0; j < 3; j++) {\n      line.append(\"\\t\" + routeUsersIt[j]);\n    }\n    for (int j=0; j < 3; j++) {\n      line.append(\"\\t\" + avgRouteTTsIt[j]);\n    }\n    stream.println(line.toString());\n  }\n  stream.close();\n  log.info(lastIteration + \" Iterations analyzed.\");\n}"}
{"ids": "71410", "raw_code": "public int executeUpdate(String sql) throws SQLException {\n  return Util.truncateAndConvertToInt(executeLargeUpdate(sql));\n}"}
{"ids": "8800", "raw_code": "@LayoutlibDelegate static long currentThreadTimeMillis(){\n  return System.currentTimeMillis();\n}"}
{"ids": "71906", "raw_code": "public static Entry makeEntry(List<String> ldifLines){\n  return makeEntry(ldifLines.toArray(new String[ldifLines.size()]));\n}"}
{"ids": "25658", "raw_code": "public int format(int val,byte[] buf,int off,int len){\n  if (val == Integer.MIN_VALUE) {\n    if (len > ByteFormatter.NUMBER_BASE) {\n      return format(\"-2147483648\",buf,off,len);\n    }\n else {\n      truncationFiller(buf,off,len);\n      return off + len;\n    }\n  }\n  int pos=Math.abs(val);\n  int ndig=1;\n  int dmax=ByteFormatter.NUMBER_BASE;\n  while (ndig < ByteFormatter.NUMBER_BASE && pos >= dmax) {\n    ndig++;\n    dmax*=ByteFormatter.NUMBER_BASE;\n  }\n  if (val < 0) {\n    ndig++;\n  }\n  if (ndig > len || ndig > buf.length - off) {\n    truncationFiller(buf,off,len);\n    return off + len;\n  }\n  off+=ndig;\n  int xoff=off - 1;\n  do {\n    buf[xoff]=ByteFormatter.DIGITS[pos % ByteFormatter.NUMBER_BASE];\n    xoff--;\n    pos/=ByteFormatter.NUMBER_BASE;\n  }\n while (pos > 0);\n  if (val < 0) {\n    buf[xoff]=(byte)'-';\n  }\n  return off;\n}"}
{"ids": "1137", "raw_code": "public void append(char c[]){\n  int maxlength=buffer.length - pos;\n  if (c.length < maxlength) {\n    System.arraycopy(c,0,buffer,pos,c.length);\n    pos+=c.length;\n  }\n else {\n    System.arraycopy(c,0,buffer,pos,maxlength);\n    curr.next=new Entity(buffer);\n    curr=curr.next;\n    length+=buffer.length;\n    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];\n    if (c.length > maxlength) {\n      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);\n      pos=c.length - maxlength;\n    }\n else {\n      pos=0;\n    }\n  }\n}"}
{"ids": "23185", "raw_code": "private boolean isAnnotation(){\n  return implInterfaces.contains(\"java.lang.annotation.Annotation\");\n}"}
{"ids": "42399", "raw_code": "public final boolean isExceptionHandlerEquivalent(BasicBlock other){\n  if (exceptionHandlers != other.exceptionHandlers) {\n    Enumeration<BasicBlock> e1=getExceptionHandlers();\n    Enumeration<BasicBlock> e2=other.getExceptionHandlers();\n    while (e1.hasMoreElements()) {\n      if (!e2.hasMoreElements())       return false;\n      if (e1.nextElement() != e2.nextElement())       return false;\n    }\n    if (e2.hasMoreElements())     return false;\n  }\n  return true;\n}"}
{"ids": "55101", "raw_code": "public int checksum(){\n  return calculateChecksum(compile_checksum.toString());\n}"}
{"ids": "66787", "raw_code": "public boolean longLabel(){\n  return fState.longLabel;\n}"}
{"ids": "1921", "raw_code": "public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){\n  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);\n  this.hitState=hitState[0];\n  yoloView=new ImageView(hitState[1]);\n  yoloView.setFitWidth(yoloWidth);\n  this.parent=parent;\n  zone=stageZone;\n}"}
{"ids": "48734", "raw_code": "private Socket openDataConnection(String cmd) throws sun.net.ftp.FtpProtocolException, IOException {\n  Socket clientSocket;\n  if (passiveMode) {\n    try {\n      return openPassiveDataConnection(cmd);\n    }\n catch (    sun.net.ftp.FtpProtocolException e) {\n      String errmsg=e.getMessage();\n      if (!errmsg.startsWith(\"PASV\") && !errmsg.startsWith(\"EPSV\")) {\n        throw e;\n      }\n    }\n  }\n  ServerSocket portSocket;\n  InetAddress myAddress;\n  String portCmd;\n  if (proxy != null && proxy.type() == Proxy.Type.SOCKS) {\n    throw new sun.net.ftp.FtpProtocolException(\"Passive mode failed\");\n  }\n  portSocket=new ServerSocket(0,1,server.getLocalAddress());\n  try {\n    myAddress=portSocket.getInetAddress();\n    if (myAddress.isAnyLocalAddress()) {\n      myAddress=server.getLocalAddress();\n    }\n    portCmd=\"EPRT |\" + ((myAddress instanceof Inet6Address) ? \"2\" : \"1\") + \"|\"+ myAddress.getHostAddress()+ \"|\"+ portSocket.getLocalPort()+ \"|\";\n    if (!issueCommand(portCmd) || !issueCommand(cmd)) {\n      portCmd=\"PORT \";\n      byte[] addr=myAddress.getAddress();\n      for (int i=0; i < addr.length; i++) {\n        portCmd=portCmd + (addr[i] & 0xFF) + \",\";\n      }\n      portCmd=portCmd + ((portSocket.getLocalPort() >>> 8) & 0xff) + \",\"+ (portSocket.getLocalPort() & 0xff);\n      issueCommandCheck(portCmd);\n      issueCommandCheck(cmd);\n    }\n    if (connectTimeout >= 0) {\n      portSocket.setSoTimeout(connectTimeout);\n    }\n else {\n      if (defaultConnectTimeout > 0) {\n        portSocket.setSoTimeout(defaultConnectTimeout);\n      }\n    }\n    clientSocket=portSocket.accept();\n    if (readTimeout >= 0) {\n      clientSocket.setSoTimeout(readTimeout);\n    }\n else {\n      if (defaultSoTimeout > 0) {\n        clientSocket.setSoTimeout(defaultSoTimeout);\n      }\n    }\n  }\n  finally {\n    portSocket.close();\n  }\n  if (useCrypto) {\n    try {\n      clientSocket=sslFact.createSocket(clientSocket,serverAddr.getHostName(),serverAddr.getPort(),true);\n    }\n catch (    Exception ex) {\n      throw new IOException(ex.getLocalizedMessage());\n    }\n  }\n  return clientSocket;\n}"}
{"ids": "78436", "raw_code": "private void createInsertList(final IItem item,List<IItem> tempList,List<IItem> insertList,int depth,int removed){\n  if (!tempList.contains(item)) {\n    tempList.add(item);\n    if (depth == 0) {\n      insertList.add(item);\n    }\n    if (item.getItems() != null) {\n      depth++;\n      for (      IItem child : item.getItems()) {\n        createInsertList(child,tempList,insertList,depth,removed);\n      }\n    }\n  }\n else {\n    insertList.remove(item);\n    removed++;\n  }\n}"}
{"ids": "74899", "raw_code": "@SuppressWarnings(\"UnusedReturnValue\") public int readOutlineFileMetadata(final PdfObject OutlinesObj,final PdfObjectReader currentPdfFile){\n  final int count=OutlinesObj.getInt(PdfDictionary.Count);\n  final PdfObject FirstObj=OutlinesObj.getDictionary(PdfDictionary.First);\n  currentPdfFile.checkResolved(FirstObj);\n  if (FirstObj != null) {\n    final Element root=OutlineDataXML.createElement(\"root\");\n    OutlineDataXML.appendChild(root);\n    final int level=0;\n    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);\n  }\n  return count;\n}"}
{"ids": "23541", "raw_code": "private int decodeRunLength(int k){\n  if ((k & 1) == 1) {\n    return ((k >>> 1) & 63) ^ 63;\n  }\n else {\n    return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1;\n  }\n}"}
{"ids": "53338", "raw_code": "public NoDuplicateValueGlobalConstraint(AbstractParameter<?,?>... parameters){\n  this.parameters=Arrays.asList(parameters);\n}"}
{"ids": "47720", "raw_code": "protected void flip(BufferCapabilities.FlipContents flipAction){\n  if (peer != null) {\n    Image backBuffer=getBackBuffer();\n    if (backBuffer != null) {\n      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);\n    }\n  }\n else {\n    throw new IllegalStateException(\"Component must have a valid peer\");\n  }\n}"}
{"ids": "29520", "raw_code": "public static Map<String,String> allNamespaces(SOAPElement ele){\n  Map<String,String> nsList=new TreeMap<String,String>();\n  log.trace(\"Starting Namespace Lookup in \" + ele.getNodeName());\n  allNamespaces(ele,nsList);\n  log.trace(\"Namespace Lookup done: \" + nsList);\n  return nsList;\n}"}
{"ids": "33732", "raw_code": "private void drawHook(Canvas canvas){\n  Path hookPath=new Path();\n  double sweepAngle=Math.PI / 180 * 180;\n  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;\n  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;\n  float i=getBigCircleRadius() / 2;\n  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);\n  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);\n  Matrix matrix=new Matrix();\n  matrix.reset();\n  int restoreCount=canvas.getSaveCount();\n  hookPath.close();\n  canvas.rotate(-45,rectF.centerX(),rectF.centerY());\n  canvas.drawPath(hookPath,mHookPaint);\n  canvas.restoreToCount(restoreCount);\n}"}
{"ids": "73926", "raw_code": "public void continueButtonActionPerformed(java.awt.event.ActionEvent e){\n  if (testRunning && testSuspended) {\n    testSuspended=false;\n    if (wrapTest) {\n      statusText1.setText(\"Running Wraparound Test\");\n      statusText1.setVisible(true);\n    }\n  }\n}"}
{"ids": "25463", "raw_code": "@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(\"checkPtpId\") int id,int timeout,int nonblock){\n  return 0;\n}"}
{"ids": "36429", "raw_code": "public void reset(){\n  displayCache.clear();\n  cachedID.clear();\n}"}
{"ids": "51939", "raw_code": "private void copyDirectory(File source,File dest) throws IOException {\n  for (  File f : source.listFiles()) {\n    File sourceFile=new File(source,f.getName());\n    File destFile=new File(dest,f.getName());\n    if (f.isDirectory()) {\n      destFile.mkdirs();\n      copyDirectory(sourceFile,destFile);\n    }\n else     copyFile(sourceFile,destFile);\n  }\n}"}
{"ids": "78215", "raw_code": "private void recordLogData(){\n  try {\n    int size=mRecordingData.size();\n    if (size == 0) {\n      return;\n    }\n    Vector<String> recordingData=new Vector<>(mRecordingData);\n    File logDir=Constants.getRecordDir(this);\n    logDir.mkdirs();\n    File logFile=new File(logDir,mRecordingFilename);\n    FileWriter logFileWriter=new FileWriter(logFile,true);\n    for (int i=0; i < size; i++) {\n      logFileWriter.append(recordingData.elementAt(i) + \"\\n\");\n      mRecordingData.removeElementAt(0);\n    }\n    recordingData.removeAllElements();\n    logFileWriter.close();\n  }\n catch (  Exception e) {\n    Log.e(LOG_TAG,\"recordLogData:Error writing the log to file. Exception: \" + e.toString());\n  }\n}"}
{"ids": "57313", "raw_code": "private static List<Command> loadRewrites(String str){\n  assert str != null;\n  List<Command> commands=new ArrayList<>();\n  for (  String line : str.split(\"\\n\")) {\n    addLine(commands,line);\n  }\n  return commands;\n}"}
{"ids": "31737", "raw_code": "private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){\n  int totalWeight=0;\n  List<WeightedNode> nodes=new ArrayList<>(top.size());\n  for (  ClusterNode node : top) {\n    Collection<HadoopInputSplit> split=mappers.get(node.id());\n    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);\n    nodes.add(new WeightedNode(node.id(),weight,weight));\n    totalWeight+=weight;\n  }\n  int totalAdjustedWeight=0;\n  for (  WeightedNode node : nodes) {\n    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;\n    node.weight=Math.round(node.floatWeight);\n    totalAdjustedWeight+=node.weight;\n  }\n  Collections.sort(nodes);\n  if (totalAdjustedWeight > reducerCnt) {\n    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);\n    while (totalAdjustedWeight != reducerCnt) {\n      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);\n      WeightedNode node=iter.previous();\n      if (node.weight > 0) {\n        node.weight-=1;\n        totalAdjustedWeight--;\n      }\n    }\n  }\n else   if (totalAdjustedWeight < reducerCnt) {\n    ListIterator<WeightedNode> iter=nodes.listIterator(0);\n    while (totalAdjustedWeight != reducerCnt) {\n      if (!iter.hasNext())       iter=nodes.listIterator(0);\n      WeightedNode node=iter.next();\n      if (node.floatWeight > 0.0f) {\n        node.weight+=1;\n        totalAdjustedWeight++;\n      }\n    }\n  }\n  int idx=0;\n  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);\n  for (  WeightedNode node : nodes) {\n    if (node.weight > 0) {\n      int[] arr=new int[node.weight];\n      for (int i=0; i < arr.length; i++)       arr[i]=idx++;\n      reducers.put(node.nodeId,arr);\n    }\n  }\n  return reducers;\n}"}
{"ids": "11246", "raw_code": "public void httpRequest(HttpRequestEvent e) throws java.io.IOException {\n  String request=e.getRequest();\n  if (Debug.debugging(\"shis\")) {\n    Debug.output(\"SHIS: Handling request - \\\"\" + request + \"\\\"\");\n  }\n  if (request.charAt(0) == '/') {\n    request=request.substring(0,request.length());\n  }\n  int index=0;\n  index=request.indexOf('?');\n  if (index != -1) {\n    request=request.substring(index + 1,request.length());\n    Debug.message(\"shis\",\"SHIS: GET Request received\");\n  }\n else {\n    Debug.message(\"shis\",\"SHIS: Probably a POST Request received\");\n  }\n  try {\n    iServer.handleRequest(request,e.getOutputStream());\n  }\n catch (  IOException ioe) {\n    Debug.error(\"SHIS: caught IOException - \\n\" + ioe.getMessage());\n  }\ncatch (  MapRequestFormatException exception) {\n    String message=\"OpenMap SimpleHttpImageServer encountered an problem with your request:\\n\\n\" + exception.getMessage() + \"\\n\\n\"+ ErrorMessage;\n    HttpConnection.writeHttpResponse(e.getOutputStream(),HttpConnection.CONTENT_PLAIN,message);\n  }\n}"}
{"ids": "54487", "raw_code": "public String format(double val){\n  DecimalFormat df=getDoubleFormat();\n  if (df != null) {\n    return df.format(val);\n  }\n  return Double.toString(val);\n}"}
{"ids": "81528", "raw_code": "public void removePositions(Collection<Integer> positions){\n  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);\n  Collections.sort(positionsList);\n  Collections.reverse(positionsList);\n  for (  int position : positionsList) {\n    mItems.remove(position);\n  }\n  notifyDataSetChanged();\n}"}
{"ids": "52259", "raw_code": "private void resetShapeBounds(){\n  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;\n  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);\n}"}
{"ids": "30245", "raw_code": "public static Colour attemptToGetAsColour(String part){\n  Colour col=null;\n  try {\n    col=Colour.valueOf(part.toUpperCase());\n  }\n catch (  Exception e) {\n  }\n  return col;\n}"}
{"ids": "55845", "raw_code": "public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){\n  ArrayList<Move> optimalMoves=new ArrayList<Move>();\n  ArrayList<Move> unknownMoves=new ArrayList<Move>();\n  final int MATE0=100000;\n  int bestScore=-1000000;\n  UndoInfo ui=new UndoInfo();\n  for (  Move m : moveList) {\n    pos.makeMove(m,ui);\n    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);\n    GtbProbeResult res=gtbProbe(pos);\n    pos.unMakeMove(m,ui);\n    if (res.result == GtbProbeResult.UNKNOWN) {\n      unknownMoves.add(m);\n    }\n else {\n      int wScore;\n      if (res.result == GtbProbeResult.WMATE) {\n        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;\n else         wScore=1;\n      }\n else       if (res.result == GtbProbeResult.BMATE) {\n        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);\n else         wScore=-1;\n      }\n else {\n        wScore=0;\n      }\n      int score=pos.whiteMove ? wScore : -wScore;\n      if (score > bestScore) {\n        optimalMoves.clear();\n        optimalMoves.add(m);\n        bestScore=score;\n      }\n else       if (score == bestScore) {\n        optimalMoves.add(m);\n      }\n else {\n      }\n    }\n  }\n  for (  Move m : unknownMoves)   optimalMoves.add(m);\n  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;\n}"}
{"ids": "39219", "raw_code": "public int rank(){\n  double eps=Math.pow(2.0,-52.0);\n  double tol=Math.max(m,n) * s[0] * eps;\n  int r=0;\n  for (int i=0; i < s.length; i++) {\n    if (s[i] > tol) {\n      r++;\n    }\n  }\n  return r;\n}"}
{"ids": "34053", "raw_code": "public static void executeRandomModifiableVariableModification(ModifiableVariableHolder object){\n  Field field=object.getRandomModifiableVariableField();\n  executeModifiableVariableModification(object,field);\n}"}
{"ids": "38517", "raw_code": "public static boolean save(File file,String content){\n  boolean result;\n  BufferedWriter writer;\n  writer=null;\n  try {\n    writer=new BufferedWriter(new FileWriter(file));\n    writer.write(content);\n    writer.flush();\n    result=true;\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    result=false;\n  }\n finally {\n    if (writer != null) {\n      try {\n        writer.close();\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "78254", "raw_code": "private void deleteOldTemp(File fileCfg){\n  BufferedReader reader=null;\n  try {\n    int count=0;\n    reader=new BufferedReader(new FileReader(fileCfg));\n    String sLine;\n    while ((sLine=reader.readLine()) != null) {\n      File file=new File(sLine);\n      if (!file.exists()) {\n        continue;\n      }\n      if (file.delete()) {\n        count++;\n      }\n else {\n        hsDeleteOnExit.add(file);\n      }\n    }\n    logDebug(LogArea.CONFIG,\"Deleted %d old temp files listed in %s\",count,fileCfg.getAbsolutePath());\n  }\n catch (  IOException e) {\n  }\n finally {\n    if (reader != null) {\n      try {\n        reader.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}"}
{"ids": "69882", "raw_code": "public void flush(){\n  final BigdataSailRepositoryConnection cxn=tlTx.get();\n  if (cxn != null) {\n    Code.wrapThrow(null);\n  }\n}"}
{"ids": "74787", "raw_code": "@Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){\n  BufferedImage image=null;\n  Raster ras=JPEGDecoder.getRasterFromJPEG(data,\"JPEG\");\n  if (ras != null) {\n    ras=cleanupRaster(ras,pX,pY,componentCount);\n    final int w=ras.getWidth();\n    final int h=ras.getHeight();\n    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();\n    image=createImage(w,h,rgb.getData());\n  }\n  return image;\n}"}
{"ids": "64248", "raw_code": "public void despawn(VisibleObject object){\n  despawn(object,true);\n}"}
{"ids": "10079", "raw_code": "@SuppressWarnings(\"rawtypes\") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {\n  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {\n    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();\n    String entryName=normalizeEntryName(entry);\n    if (entryName.startsWith(CONSTRAINTS)) {\n      String filename=FilenameUtils.getName(entry.getName());\n      ConstraintSet constraintSet=new ConstraintSet();\n      constraintSet.setProject(aProject);\n      constraintSet.setName(filename);\n      aRepository.createConstraintSet(constraintSet);\n      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));\n      LOG.info(\"Imported constraint [\" + filename + \"] for project [\"+ aProject.getName()+ \"] with id [\"+ aProject.getId()+ \"]\");\n    }\n  }\n}"}
{"ids": "84014", "raw_code": "public Operation copyTo(Extent target){\n  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());\n  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());\n  copy.setTransform(transform);\n  return copy;\n}"}
{"ids": "47612", "raw_code": "@CallerSensitive public Class<?> forClass(){\n  if (cl == null) {\n    return null;\n  }\n  requireInitialized();\n  if (System.getSecurityManager() != null) {\n    Class<?> caller=Reflection.getCallerClass();\n    if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(),cl.getClassLoader())) {\n      ReflectUtil.checkPackageAccess(cl);\n    }\n  }\n  return cl;\n}"}
{"ids": "40802", "raw_code": "private void pathStyleHelper(String style,String offset){\n  if (style == null) {\n    return;\n  }\n  if (style.equals(\"none\")) {\n    strokePaint.setPathEffect(null);\n    return;\n  }\n  StringTokenizer st=new StringTokenizer(style,\" ,\");\n  int count=st.countTokens();\n  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];\n  float max=0;\n  float current=1f;\n  int i=0;\n  while (st.hasMoreTokens()) {\n    intervals[i++]=current=toFloat(st.nextToken(),current);\n    max+=current;\n  }\n  for (int start=0; i < intervals.length; i++, start++) {\n    max+=intervals[i]=intervals[start];\n  }\n  float off=0f;\n  if (offset != null) {\n    try {\n      off=Float.parseFloat(offset) % max;\n    }\n catch (    NumberFormatException e) {\n    }\n  }\n  strokePaint.setPathEffect(new DashPathEffect(intervals,off));\n}"}
{"ids": "16573", "raw_code": "private Size parseOldBoundedSize(String token,boolean setMax){\n  int semicolonIndex=token.indexOf(';');\n  String sizeToken1=token.substring(4,semicolonIndex);\n  String sizeToken2=token.substring(semicolonIndex + 1,token.length() - 1);\n  Size size1=parseAtomicSize(sizeToken1);\n  Size size2=parseAtomicSize(sizeToken2);\n  if (isConstant(size1)) {\n    if (size2 instanceof Sizes.ComponentSize) {\n      return new BoundedSize(size2,setMax ? null : size1,setMax ? size1 : null);\n    }\n    throw new IllegalArgumentException(\"Bounded sizes must not be both constants.\");\n  }\n  if (isConstant(size2)) {\n    return new BoundedSize(size1,setMax ? null : size2,setMax ? size2 : null);\n  }\n  throw new IllegalArgumentException(\"Bounded sizes must not be both logical.\");\n}"}
{"ids": "32552", "raw_code": "Builder addEncodedQueryParameter(String encodedName,String encodedValue){\n  if (encodedName == null)   throw new IllegalArgumentException(\"encodedName == null\");\n  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();\n  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true));\n  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null);\n  return this;\n}"}
{"ids": "82930", "raw_code": "public Namespace(PrincipalUser creator,String qualifier,PrincipalUser owner,Set<PrincipalUser> users){\n  super(creator);\n  setQualifier(qualifier);\n  setOwner(owner);\n  if (users != null && !users.isEmpty()) {\n    setUsers(users);\n  }\n  addUser(owner);\n}"}
{"ids": "68982", "raw_code": "public void update(long dt,float ratioY){\n  double step=2 * Math.PI / POINTS_PER_CIRCLE;\n  angle+=dt * BUBBLE_D_ANGLE;\n  float fromX=startX + (float)(0.05f * Math.sin(angle));\n  float toX=fromX + size;\n  float fromY=this.fromY + dt * speed;\n  float toY=fromY + size;\n  centerY+=dt * virtualSpeed;\n  getColor()[3]=(TOP_Y - centerY / TOP_Y);\n  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));\n  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));\n  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {\n    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));\n    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));\n  }\n  this.fromY=fromY;\n}"}
{"ids": "15675", "raw_code": "public final void clear(){\n  if (GWT.isScript()) {\n    jsArray.clear();\n  }\n else {\n    javaArray.clear();\n  }\n}"}
{"ids": "17680", "raw_code": "void fullyLock(){\n  putLock.lock();\n  takeLock.lock();\n}"}
{"ids": "67148", "raw_code": "private void updatePodcastPublicationDateAndLastMediaUrl(Episode episode,Podcast podcast){\n  Date podcastPublicationDate=podcast.getPublicationDate();\n  boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate()));\n  if (episodePubDateIsMoreRecent) {\n    podcast.setPublicationDate(episode.getPublicationDate());\n    podcast.setLastEpisodeMediaUrl(episode.getMediaUrl());\n  }\n}"}
{"ids": "52982", "raw_code": "public static <O>KNNQuery<O> precomputedKNNQuery(Database database,Relation<O> relation,DistanceQuery<O> dq,int k){\n  KNNQuery<O> knnq=database.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);\n  if (knnq instanceof PreprocessorKNNQuery) {\n    return knnq;\n  }\n  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);\n  preproc.initialize();\n  return preproc.getKNNQuery(dq,k);\n}"}
{"ids": "48538", "raw_code": "public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){\n  if (img == null) {\n    return true;\n  }\n  if (xform == null || xform.isIdentity()) {\n    return drawImage(img,0,0,null,observer);\n  }\n  if (isHiDPIImage(img)) {\n    final int w=img.getWidth(null);\n    final int h=img.getHeight(null);\n    final AffineTransform tx=new AffineTransform(transform);\n    transform(xform);\n    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);\n    transform.setTransform(tx);\n    invalidateTransform();\n    return result;\n  }\n  try {\n    return imagepipe.transformImage(this,img,xform,observer);\n  }\n catch (  InvalidPipeException e) {\n    try {\n      revalidateAll();\n      return imagepipe.transformImage(this,img,xform,observer);\n    }\n catch (    InvalidPipeException e2) {\n      return false;\n    }\n  }\n finally {\n    surfaceData.markDirty();\n  }\n}"}
{"ids": "13771", "raw_code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  super.beginDisplay(event,false);\n  resetButtonState(TBL_BUTTON_DELETE);\n  AgentsModel model=(AgentsModel)getModel();\n  String agentType=getDisplayIDType();\n  Object[] param={agentType};\n  ptModel.setPageTitleText(model.getLocalizedString(\"agenttype.\" + agentType));\n  ptModel.setPageTitleHelpMessage(model.getLocalizedString(\"agenttype.\" + agentType + \".help\"));\n  tblModel.setTitle(MessageFormat.format(model.getLocalizedString(\"table.agents.title.name\"),param));\n  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(\"table.agents.summary\"),param));\n  tblModel.setSummary(MessageFormat.format(model.getLocalizedString(\"table.agents.summary\"),param));\n  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString(\"table.agent.groups.title.name\"),param));\n  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(\"table.agent.groups.summary\"),param));\n  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString(\"table.agent.groups.summary\"),param));\n  getAgentNames();\n  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);\n  b.setDisabled(true);\n  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);\n  b.setDisabled(true);\n}"}
{"ids": "4965", "raw_code": "public void select_all(){\n  Arrays.fill(sel_array,true);\n}"}
{"ids": "39835", "raw_code": "public NvpBuilder addRaw(final String name,final String value){\n  npv.put(name,value);\n  return this;\n}"}
{"ids": "61943", "raw_code": "@Override public int length(){\n  return set.size();\n}"}
{"ids": "39853", "raw_code": "public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){\n  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);\n  return map(countries,CountryRO.class,Country.class);\n}"}
{"ids": "44025", "raw_code": "public void addPauseListener(AnimatorPauseListener listener){\n  if (mPauseListeners == null) {\n    mPauseListeners=new ArrayList<AnimatorPauseListener>();\n  }\n  mPauseListeners.add(listener);\n}"}
{"ids": "38236", "raw_code": "@Override public boolean batchFinished() throws Exception {\n  if (getInputFormat() == null) {\n    throw new IllegalStateException(\"No input instance format defined\");\n  }\n  Instances toFilter=getInputFormat();\n  if (!isFirstBatchDone()) {\n    Instances toFilterIgnoringAttributes=removeIgnored(toFilter);\n    File file=getSerializedClustererFile();\n    if (!file.isDirectory()) {\n      ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file));\n      m_ActualClusterer=(Clusterer)ois.readObject();\n      Instances header=null;\n      try {\n        header=(Instances)ois.readObject();\n      }\n catch (      Exception e) {\n      }\n      ois.close();\n      if ((header != null) && (!header.equalHeaders(toFilterIgnoringAttributes))) {\n        throw new WekaException(\"Training header of clusterer and filter dataset don't match:\\n\" + header.equalHeadersMsg(toFilterIgnoringAttributes));\n      }\n    }\n else {\n      m_ActualClusterer=AbstractClusterer.makeCopy(m_Clusterer);\n      m_ActualClusterer.buildClusterer(toFilterIgnoringAttributes);\n    }\n    Instances filtered=new Instances(toFilter,0);\n    ArrayList<String> nominal_values=new ArrayList<String>(m_ActualClusterer.numberOfClusters());\n    for (int i=0; i < m_ActualClusterer.numberOfClusters(); i++) {\n      nominal_values.add(\"cluster\" + (i + 1));\n    }\n    filtered.insertAttributeAt(new Attribute(\"cluster\",nominal_values),filtered.numAttributes());\n    setOutputFormat(filtered);\n  }\n  for (int i=0; i < toFilter.numInstances(); i++) {\n    convertInstance(toFilter.instance(i));\n  }\n  flushInput();\n  m_NewBatch=true;\n  m_FirstBatchDone=true;\n  return (numPendingOutput() != 0);\n}"}
{"ids": "83312", "raw_code": "public void addComponent(T component){\n  components.add(component);\n}"}
{"ids": "67329", "raw_code": "public static UiResult openUrl(URI uri){\n  return openUrl(uri.toString());\n}"}
{"ids": "48821", "raw_code": "public ByteBandedRaster(SampleModel sampleModel,Point origin){\n  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);\n}"}
{"ids": "24252", "raw_code": "static boolean isRefreshNotificationRegistered(NotificationListener client,RefreshNotificationType type){\n  boolean isRegistered=false;\n  Map<RefreshNotificationType,Integer> notifications=null;\nsynchronized (refreshClients) {\n    notifications=(Map<RefreshNotificationType,Integer>)refreshClients.get(client);\n  }\n  if (notifications != null) {\n    Integer timerNotificationId=notifications.get(type);\n    if (timerNotificationId != null) {\n      isRegistered=true;\n    }\n  }\n  return isRegistered;\n}"}
{"ids": "31709", "raw_code": "private Collection<String> readProcessOutput(Process proc) throws IOException {\n  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));\n  Collection<String> res=new ArrayList<>();\n  String s;\n  while ((s=rdr.readLine()) != null)   res.add(s);\n  return res;\n}"}
{"ids": "86864", "raw_code": "public void fillHeaderAndFooter(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel) throws Exception {\n  fillHeader(request,response,dataModel);\n  fillFooter(dataModel);\n}"}
{"ids": "30716", "raw_code": "public void addOperand(ISpacePredicate operand){\n  if (_operandsList == null)   _operandsList=new ArrayList<ISpacePredicate>();\n  _operandsList.add(operand);\n}"}
{"ids": "12301", "raw_code": "public static String decode(String s,Type t){\n  if (s == null) {\n    throw new IllegalArgumentException();\n  }\n  final int n=s.length();\n  if (n == 0) {\n    return s;\n  }\n  if (s.indexOf('%') < 0) {\n    if (t == Type.QUERY_PARAM) {\n      if (s.indexOf('+') < 0) {\n        return s;\n      }\n    }\n else {\n      return s;\n    }\n  }\n else {\n    if (n < 2) {\n      throw new IllegalArgumentException(\"Malformed percent-encoded octet at index 1\");\n    }\n    if (s.charAt(n - 2) == '%') {\n      throw new IllegalArgumentException(\"Malformed percent-encoded octet at index \" + (n - 2));\n    }\n  }\n  if (t == null) {\n    return decode(s,n);\n  }\nswitch (t) {\ncase HOST:\n    return decodeHost(s,n);\ncase QUERY_PARAM:\n  return decodeQueryParam(s,n);\ndefault :\nreturn decode(s,n);\n}\n}"}
{"ids": "30309", "raw_code": "public BigDecimal calculateTotalCollectedAmt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {\n  return bri.getTotalAmount();\n}"}
{"ids": "40910", "raw_code": "public void removeAllIms(){\n  ims.clear();\n}"}
{"ids": "27519", "raw_code": "public void copyReader(String encoding,Reader r) throws IOException {\n  super.setContentEncoding(encoding);\n  String s=readString(r);\n  content=s.getBytes(encoding);\n}"}
{"ids": "78962", "raw_code": "private void clearDictionaryCache(){\n  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();\n  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());\n  for (int i=0; i < reverseDictionaries.size(); i++) {\n    Dictionary dictionary=reverseDictionaries.get(i);\n    dictionary.clear();\n  }\n}"}
{"ids": "8122", "raw_code": "public static String toTypeString(Object[] arguments,int maxSize){\n  if (arguments == null) {\n    return \"null\";\n  }\n  StringBuilder argBuf=new StringBuilder();\n  for (int i=0; i < arguments.length; i++) {\n    if (maxSize != -1 && argBuf.length() > maxSize) {\n      argBuf.append(\"...\");\n      break;\n    }\n else {\n      if (i > 0) {\n        argBuf.append(\", \");\n      }\n      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : \"null\");\n    }\n  }\n  return argBuf.toString();\n}"}
{"ids": "46431", "raw_code": "public boolean renameFile(File oldFile,File newFile){\nsynchronized (fileCache) {\n    if (oldFile.renameTo(newFile)) {\n      validateFileCache();\n      return true;\n    }\n    return false;\n  }\n}"}
{"ids": "2009", "raw_code": "public Future<?> execute(CameraCommand command){\n  if (mClosed) {\n    return Futures.immediateFuture(null);\n  }\nsynchronized (mLock) {\n    if (mExecutor == null) {\n      mExecutor=mExecutorProvider.get();\n    }\n    checkNotNull(mExecutor);\n    return mExecutor.submit(new CommandRunnable(command));\n  }\n}"}
{"ids": "15738", "raw_code": "public int length(){\n  return text.length();\n}"}
{"ids": "71334", "raw_code": "public static String serializeDigestResponse(Map<String,String> paramMap){\n  StringBuilder sb=new StringBuilder(\"Digest \");\n  boolean prefixComma=false;\n  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {\n    if (!prefixComma) {\n      prefixComma=true;\n    }\n else {\n      sb.append(\", \");\n    }\n    sb.append(entry.getKey());\n    sb.append(\"=\");\n    sb.append(entry.getValue());\n  }\n  return sb.toString();\n}"}
{"ids": "10491", "raw_code": "protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){\n  return JsonEncoding.UTF8;\n}"}
{"ids": "51869", "raw_code": "static BufferedImage convertImage(BufferedImage image){\nswitch (image.getType()) {\ncase BufferedImage.TYPE_INT_ARGB_PRE:\n    return image;\ncase BufferedImage.TYPE_4BYTE_ABGR:\n  image.coerceData(true);\nreturn image;\n}\nBufferedImage convertedImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);\nGraphics2D g=convertedImage.createGraphics();\ng.setColor(new java.awt.Color(0f,0f,0f,0f));\ng.fillRect(0,0,image.getWidth(),image.getHeight());\ng.drawImage(image,0,0,null);\ng.dispose();\nreturn convertedImage;\n}"}
{"ids": "45746", "raw_code": "public long start(){\n  startTime=System.currentTimeMillis();\n  return startTime;\n}"}
{"ids": "62754", "raw_code": "public void next(){\n  if (iterator.hasNext()) {\n    View currentView=iterator.next();\n    if (isUsingDefaultListener())     currentView.setOnClickListener(null);\n    if (iterator.nextIndex() < mViews.size()) {\n      View nextView=mViews.get(iterator.nextIndex());\n      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);\n      ControllerAnimator animator=getDefaultForwardAnimation();\n      animator.setOldView(currentView);\n      animator.setNewView(nextView);\n      currentView.startAnimation(animator);\n      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();\n    }\n else {\n      if (mLoop) {\n        iterator=mViews.listIterator();\n        View nextView=mViews.get(0);\n        if (mUseDefaultListener)         nextView.setOnClickListener(listener);\n        ControllerAnimator animator=getDefaultForwardAnimation();\n        animator.setOldView(currentView);\n        animator.setNewView(nextView);\n        currentView.startAnimation(animator);\n      }\n    }\n  }\n}"}
{"ids": "877", "raw_code": "public void cacheResolvedMethod(Class clas,Class[] types,Method method){\n  if (Interpreter.DEBUG)   Interpreter.debug(\"cacheResolvedMethod putting: \" + clas + \" \"+ method);\n  SignatureKey sk=new SignatureKey(clas,method.getName(),types);\n  if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method);\n else   resolvedObjectMethods.put(sk,method);\n}"}
{"ids": "15521", "raw_code": "private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){\n  ArrayList<String> removalNameList=new ArrayList<>();\n  if (contextMap != null) {\n    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {\n      String passivationCapableId=entry.getKey();\n      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);\n      ViewScopeContextObject contextObject=entry.getValue();\n      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);\n      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);\n      removalNameList.add(contextObject.getName());\n    }\n    Iterator<String> removalNames=removalNameList.iterator();\n    while (removalNames.hasNext()) {\n      String name=removalNames.next();\n      viewMap.remove(name);\n    }\n    contextMap.clear();\n  }\n}"}
{"ids": "29131", "raw_code": "public static void close(@CheckForNull OutputStream outputStream){\n  if (outputStream == null) {\n    return;\n  }\n  try {\n    outputStream.close();\n  }\n catch (  IOException e) {\n  }\n}"}
{"ids": "13035", "raw_code": "@Override public Node item(int index){\n  return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null;\n}"}
{"ids": "60469", "raw_code": "private int charToVisibleWidth(char c,@JdkConstants.FontStyle int fontType,int currentX){\n  if (c == '\\n') {\n    return 0;\n  }\n  if (c == '\\t') {\n    return EditorUtil.nextTabStop(currentX,this) - currentX;\n  }\n  return EditorUtil.charWidth(c,fontType,this);\n}"}
{"ids": "9094", "raw_code": "public static void createDir(File target) throws AdeUsageException {\n  if (!target.exists() && !target.mkdir() && !target.exists()) {\n    throw new AdeUsageException(\"Failed creating directory \" + target.getPath());\n  }\n}"}
{"ids": "5748", "raw_code": "public GTSEncoder(long baseTimestamp){\n  this.baseTimestamp=baseTimestamp;\n  this.stream=new ByteArrayOutputStream();\n  this.wrappingKey=null;\n}"}
{"ids": "69738", "raw_code": "public static String encode(final Coordinate[] coords){\n  long lastLat=0;\n  long lastLng=0;\n  final StringBuffer result=new StringBuffer();\n  for (  final Coordinate point : coords) {\n    long lat=Math.round(point.y * 1e5);\n    long lng=Math.round(point.x * 1e5);\n    long dLat=lat - lastLat;\n    long dLng=lng - lastLng;\n    encode(dLat,result);\n    encode(dLng,result);\n    lastLat=lat;\n    lastLng=lng;\n  }\n  return result.toString();\n}"}
{"ids": "73394", "raw_code": "private void extractWeightValues(List<Synapse> synapses){\n  int exWeights=0;\n  int inWeights=0;\n  for (  Synapse s : synapses) {\n    double w=s.getStrength();\n    if (w > 0) {\n      exWeights++;\n    }\n else {\n      inWeights++;\n    }\n  }\n  weights[0]=new double[exWeights];\n  weights[1]=new double[inWeights];\n  exWeights=0;\n  inWeights=0;\n  if (weights[0].length != 0) {\n    for (    Synapse s : synapses) {\n      double w=s.getStrength();\n      if (w > 0) {\n        weights[0][exWeights++]=w;\n      }\n else {\n        weights[1][inWeights++]=w;\n      }\n    }\n  }\n}"}
{"ids": "14424", "raw_code": "@Override public void close(){\n  try {\n    flush();\n  }\n catch (  AMLogException ale) {\n    Debug.error(tableName + \":DBHandler:close/flush error: \" + ale.getMessage());\n  }\n  if (conn != null) {\n    try {\n      conn.close();\n    }\n catch (    SQLException ce) {\n      Debug.error(tableName + \":DBHandler: Unable To Close Connection\",ce);\n    }\n  }\n  stopBufferTimer();\n}"}
{"ids": "83785", "raw_code": "public boolean contains(List<Integer> hashes){\n  Iterator<Integer> ni=hashes.iterator();\n  for (int i=0; i < hashFunctions; ++i) {\n    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "19996", "raw_code": "private void ensureCapacity(int additionalData){\n  if ((this.position + additionalData) > this.byteBuffer.length) {\n    int newLength=(int)(this.byteBuffer.length * 1.25);\n    if (newLength < (this.byteBuffer.length + additionalData)) {\n      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);\n    }\n    if (newLength < this.byteBuffer.length) {\n      newLength=this.byteBuffer.length + additionalData;\n    }\n    byte[] newBytes=new byte[newLength];\n    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);\n    this.byteBuffer=newBytes;\n  }\n}"}
{"ids": "10009", "raw_code": "public boolean isValidNumber(PhoneNumber number){\n  String regionCode=getRegionCodeForNumber(number);\n  return isValidNumberForRegion(number,regionCode);\n}"}
{"ids": "12074", "raw_code": "private String trimUrl(String uri){\n  if (uri == null)   return \"\";\n  if (uri.endsWith(\"/\"))   uri=uri.substring(0,uri.length() - 1);\n  return uri;\n}"}
{"ids": "35101", "raw_code": "public static String addAlpha(String originalColor,double alpha){\n  long alphaFixed=Math.round(alpha * 255);\n  String alphaHex=Long.toHexString(alphaFixed);\n  if (alphaHex.length() == 1) {\n    alphaHex=\"0\" + alphaHex;\n  }\n  originalColor=originalColor.replace(\"#\",\"#\" + alphaHex);\n  return originalColor;\n}"}
{"ids": "52970", "raw_code": "public void stop(){\n  server.stop(0);\n}"}
{"ids": "13182", "raw_code": "protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {\n  int len=str.length();\n  DateTimeData date=new DateTimeData(str,this);\n  int start=0;\n  char c=str.charAt(start++);\n  if (c != 'P' && c != '-') {\n    throw new SchemaDateTimeException();\n  }\n else {\n    date.utc=(c == '-') ? '-' : 0;\n    if (c == '-' && str.charAt(start++) != 'P') {\n      throw new SchemaDateTimeException();\n    }\n  }\n  int negate=1;\n  if (date.utc == '-') {\n    negate=-1;\n  }\n  boolean designator=false;\n  int endDate=indexOf(str,start,len,'T');\n  if (endDate == -1) {\n    endDate=len;\n  }\n else   if (durationType == YEARMONTHDURATION_TYPE) {\n    throw new SchemaDateTimeException();\n  }\n  int end=indexOf(str,start,endDate,'Y');\n  if (end != -1) {\n    if (durationType == DAYTIMEDURATION_TYPE) {\n      throw new SchemaDateTimeException();\n    }\n    date.year=negate * parseInt(str,start,end);\n    start=end + 1;\n    designator=true;\n  }\n  end=indexOf(str,start,endDate,'M');\n  if (end != -1) {\n    if (durationType == DAYTIMEDURATION_TYPE) {\n      throw new SchemaDateTimeException();\n    }\n    date.month=negate * parseInt(str,start,end);\n    start=end + 1;\n    designator=true;\n  }\n  end=indexOf(str,start,endDate,'D');\n  if (end != -1) {\n    if (durationType == YEARMONTHDURATION_TYPE) {\n      throw new SchemaDateTimeException();\n    }\n    date.day=negate * parseInt(str,start,end);\n    start=end + 1;\n    designator=true;\n  }\n  if (len == endDate && start != len) {\n    throw new SchemaDateTimeException();\n  }\n  if (len != endDate) {\n    end=indexOf(str,++start,len,'H');\n    if (end != -1) {\n      date.hour=negate * parseInt(str,start,end);\n      start=end + 1;\n      designator=true;\n    }\n    end=indexOf(str,start,len,'M');\n    if (end != -1) {\n      date.minute=negate * parseInt(str,start,end);\n      start=end + 1;\n      designator=true;\n    }\n    end=indexOf(str,start,len,'S');\n    if (end != -1) {\n      date.second=negate * parseSecond(str,start,end);\n      start=end + 1;\n      designator=true;\n    }\n    if (start != len || str.charAt(--start) == 'T') {\n      throw new SchemaDateTimeException();\n    }\n  }\n  if (!designator) {\n    throw new SchemaDateTimeException();\n  }\n  return date;\n}"}
{"ids": "42297", "raw_code": "final void copyIntoLocalState(Operand[] _localState){\n  localState=new Operand[_localState.length];\n  System.arraycopy(_localState,0,localState,0,_localState.length);\n  setLocalKnown();\n}"}
{"ids": "66585", "raw_code": "@SuppressWarnings(\"unchecked\") private HashMap<String,DBObject> loadDBObjects(Class objectClass){\n  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();\n  DBObject dbObject=new DBObject(this,objectClass);\n  String objectToLoad=s_logger.localizeMessage(\"object\");\n  String objectsToLoad=s_logger.localizeMessage(\"objects\");\n  String sqlLoadHeaders=null;\n  String sqlLoadContents=null;\n  if (dbObject != null) {\n    objectToLoad=dbObject.getObjectType();\n    objectsToLoad=dbObject.getObjectTypes();\n    sqlLoadHeaders=dbObject.getLoadHeaderSQL();\n    sqlLoadContents=dbObject.getLoadContentSQL();\n  }\n  s_logger.log(Level.FINE,\"loadDBObjects\",new Object[]{objectsToLoad,getDirection()});\n  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);\n  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);\n  int counter=0;\n  if (dbObject != null) {\n    String sql=dbObject.getLoadObjectSQL();\n    Statement stmt=setStatement();\n    ResultSet rs=executeQuery(stmt,sql);\n    while (getResultSetNext(rs)) {\n      String s=getResultSetString(rs,\"OBJECT_NAME\");\n      if (!objectMap.containsKey(s)) {\n        DBObject obj=new DBObject(this,objectClass,s);\n        obj.populate(stmtLoadHeaders,stmtLoadContents);\n        if (obj.isPopulated()) {\n          objectMap.put(s.toUpperCase(),obj);\n          counter++;\n        }\n      }\n    }\n    releaseResultSet(rs);\n    releaseStatement(stmt);\n  }\n  releasePreparedStatement(stmtLoadHeaders);\n  releasePreparedStatement(stmtLoadContents);\n  if (counter == 1)   s_logger.log(Level.FINE,\"dbObjectsLoaded\",new Object[]{Integer.toString(counter),objectToLoad});\n else   s_logger.log(Level.FINE,\"dbObjectsLoaded\",new Object[]{Integer.toString(counter),objectsToLoad});\n  s_logger.flush();\n  return objectMap;\n}"}
{"ids": "23993", "raw_code": "protected Object attemptReadResponse(Connection cnx) throws Exception {\n  Message msg=createResponseMessage();\n  if (msg != null) {\n    msg.setComms(cnx.getSocket(),cnx.getInputStream(),cnx.getOutputStream(),cnx.getCommBuffer(),cnx.getStats());\n    if (msg instanceof ChunkedMessage) {\n      try {\n        return processResponse(msg,cnx);\n      }\n  finally {\n        msg.unsetComms();\n        processSecureBytes(cnx,msg);\n      }\n    }\n else {\n      try {\n        msg.recv();\n      }\n  finally {\n        msg.unsetComms();\n        processSecureBytes(cnx,msg);\n      }\n      return processResponse(msg,cnx);\n    }\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "86779", "raw_code": "public synchronized boolean add(E e,boolean hasNext){\n  while (mInternalQueue.size() >= mMaxSize && !mClosed) {\n    notifyAll();\n    try {\n      wait(TIMEOUT);\n    }\n catch (    InterruptedException e1) {\n      mClosed=true;\n      ProgramState.checkAbort();\n      throw new IllegalStateException(\"Interrupted but program not aborting?\",e1);\n    }\n    ProgramState.checkAbort();\n  }\n  if (mClosed) {\n    return true;\n  }\n  final boolean wasEmpty=mInternalQueue.isEmpty();\n  mHasNext=hasNext;\n  mInternalQueue.add(e);\n  if (wasEmpty) {\n    notifyAll();\n  }\n  return true;\n}"}
{"ids": "80262", "raw_code": "public boolean hasNatureAndWeapon(Nature nature,String weapon){\n  return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.equals(this.weapon)));\n}"}
{"ids": "23788", "raw_code": "public void dump(String infoMsg){\n  storage.getOnlineMembers();\n  storage.getOfflineMembers();\n  storage.getOfflineAndEqualMembers();\n  storage.getMyInitializingID();\n  storage.getMyPersistentID();\n  final StringBuilder buf=new StringBuilder(2000);\n  if (infoMsg != null) {\n    buf.append(infoMsg);\n    buf.append(\": \");\n  }\n  buf.append(\"\\nMY PERSISTENT ID:\\n\");\n  buf.append(storage.getMyPersistentID());\n  buf.append(\"\\nMY INITIALIZING ID:\\n\");\n  buf.append(storage.getMyInitializingID());\n  buf.append(\"\\nONLINE MEMBERS:\\n\");\n  for (  PersistentMemberID id : storage.getOnlineMembers()) {\n    buf.append(\"\\t\");\n    buf.append(id);\n    buf.append(\"\\n\");\n  }\n  buf.append(\"\\nOFFLINE MEMBERS:\\n\");\n  for (  PersistentMemberID id : storage.getOfflineMembers()) {\n    buf.append(\"\\t\");\n    buf.append(id);\n    buf.append(\"\\n\");\n  }\n  buf.append(\"\\nOFFLINE AND EQUAL MEMBERS:\\n\");\n  for (  PersistentMemberID id : storage.getOfflineAndEqualMembers()) {\n    buf.append(\"\\t\");\n    buf.append(id);\n    buf.append(\"\\n\");\n  }\n  logger.debug(buf.toString());\n}"}
{"ids": "33964", "raw_code": "static Sort parseSort(long timestampSec,IndexState state,List<Object> fields,List<String> sortFieldNames,Map<String,FieldDef> dynamicFields){\n  List<SortField> sortFields=new ArrayList<SortField>();\n  for (  Object _sub : fields) {\n    Request sub=(Request)_sub;\n    String fieldName=sub.getString(\"field\");\n    SortField sf;\n    if (sortFieldNames != null) {\n      sortFieldNames.add(fieldName);\n    }\n    if (fieldName.equals(\"docid\")) {\n      sf=SortField.FIELD_DOC;\n    }\n else     if (fieldName.equals(\"score\")) {\n      sf=SortField.FIELD_SCORE;\n    }\n else {\n      FieldDef fd;\n      if (dynamicFields != null) {\n        fd=dynamicFields.get(fieldName);\n      }\n else {\n        fd=null;\n      }\n      if (fd == null) {\n        fd=state.getField(fieldName);\n      }\n      if (fd == null) {\n        sub.fail(\"field\",\"field \\\"\" + fieldName + \"\\\" was not registered and was not specified as a dynamicField\");\n        fd=null;\n      }\n      if (fd.valueSource != null) {\n        sf=fd.valueSource.getSortField(sub.getBoolean(\"reverse\"));\n      }\n else       if (fd.valueType == FieldDef.FieldValueType.LAT_LON) {\n        if (fd.fieldType.docValuesType() == DocValuesType.NONE) {\n          sub.fail(\"field\",\"field \\\"\" + fieldName + \"\\\" was not registered with sort=true\");\n        }\n        Request sub2=sub.getStruct(\"origin\");\n        sf=LatLonDocValuesField.newDistanceSort(fieldName,sub2.getDouble(\"latitude\"),sub2.getDouble(\"longitude\"));\n      }\n else {\n        if ((fd.fieldType != null && fd.fieldType.docValuesType() == DocValuesType.NONE) || (fd.fieldType == null && fd.valueSource == null)) {\n          sub.fail(\"field\",\"field \\\"\" + fieldName + \"\\\" was not registered with sort=true\");\n        }\n        if (fd.multiValued) {\n          String selectorString=sub.getEnum(\"selector\");\n          if (fd.valueType == FieldDef.FieldValueType.ATOM) {\n            SortedSetSelector.Type selector;\n            if (selectorString.equals(\"min\")) {\n              selector=SortedSetSelector.Type.MIN;\n            }\n else             if (selectorString.equals(\"max\")) {\n              selector=SortedSetSelector.Type.MAX;\n            }\n else             if (selectorString.equals(\"middle_min\")) {\n              selector=SortedSetSelector.Type.MIDDLE_MIN;\n            }\n else             if (selectorString.equals(\"middle_max\")) {\n              selector=SortedSetSelector.Type.MIDDLE_MAX;\n            }\n else {\n              assert false;\n              selector=null;\n            }\n            sf=new SortedSetSortField(fieldName,sub.getBoolean(\"reverse\"),selector);\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.INT) {\n            sf=new SortedNumericSortField(fieldName,SortField.Type.INT,sub.getBoolean(\"reverse\"),parseNumericSelector(sub,selectorString));\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.LONG) {\n            sf=new SortedNumericSortField(fieldName,SortField.Type.LONG,sub.getBoolean(\"reverse\"),parseNumericSelector(sub,selectorString));\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) {\n            sf=new SortedNumericSortField(fieldName,SortField.Type.FLOAT,sub.getBoolean(\"reverse\"),parseNumericSelector(sub,selectorString));\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {\n            sf=new SortedNumericSortField(fieldName,SortField.Type.DOUBLE,sub.getBoolean(\"reverse\"),parseNumericSelector(sub,selectorString));\n          }\n else {\n            sub.fail(\"field\",\"cannot sort by multiValued field \\\"\" + fieldName + \"\\\": type is \"+ fd.valueType);\n            assert false;\n            sf=null;\n          }\n        }\n else {\n          SortField.Type sortType;\n          if (fd.valueType == FieldDef.FieldValueType.ATOM) {\n            sortType=SortField.Type.STRING;\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.LONG || fd.valueType == FieldDef.FieldValueType.DATE_TIME) {\n            sortType=SortField.Type.LONG;\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.INT) {\n            sortType=SortField.Type.INT;\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {\n            sortType=SortField.Type.DOUBLE;\n          }\n else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) {\n            sortType=SortField.Type.FLOAT;\n          }\n else {\n            sub.fail(\"field\",\"cannot sort by field \\\"\" + fieldName + \"\\\": type is \"+ fd.valueType);\n            assert false;\n            sortType=null;\n          }\n          sf=new SortField(fieldName,sortType,sub.getBoolean(\"reverse\"));\n        }\n      }\n      boolean hasMissingLast=sub.hasParam(\"missingLast\");\n      boolean missingLast=sub.getBoolean(\"missingLast\");\n      if (fd.valueType == FieldDef.FieldValueType.ATOM) {\n        if (missingLast) {\n          sf.setMissingValue(SortField.STRING_LAST);\n        }\n else {\n          sf.setMissingValue(SortField.STRING_FIRST);\n        }\n      }\n else       if (fd.valueType == FieldDef.FieldValueType.INT) {\n        sf.setMissingValue(missingLast ? Integer.MAX_VALUE : Integer.MIN_VALUE);\n      }\n else       if (fd.valueType == FieldDef.FieldValueType.LONG) {\n        sf.setMissingValue(missingLast ? Long.MAX_VALUE : Long.MIN_VALUE);\n      }\n else       if (fd.valueType == FieldDef.FieldValueType.FLOAT) {\n        sf.setMissingValue(missingLast ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY);\n      }\n else       if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {\n        sf.setMissingValue(missingLast ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);\n      }\n else       if (hasMissingLast) {\n        sub.fail(\"missingLast\",\"field=\" + fieldName + \": can only specify missingLast for string and numeric field types: got SortField type \"+ sf.getType());\n      }\n    }\n    sortFields.add(sf);\n  }\n  return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n}"}
{"ids": "19570", "raw_code": "@NotNull private Optional<TypeConversion> findConversionFromDbValue(@NotNull Type source,@NotNull Type target){\n  if (isAssignable(target,source))   return Optional.of(TypeConversion.identity());\n  Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFromDbValue(source,target);\n  if (directConversion.isPresent())   return directConversion;\n  Optional<TypeConversion> arrayConversion=findArrayConversion(source,target);\n  if (arrayConversion.isPresent())   return arrayConversion;\n  Optional<TypeConversion> optionalConversion=findOptionalConversion(source,target);\n  if (optionalConversion.isPresent())   return optionalConversion;\n  Optional<TypeConversion> enumConversion=findEnumConversion(target);\n  if (enumConversion.isPresent())   return enumConversion;\n  return Optional.empty();\n}"}
{"ids": "16149", "raw_code": "private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){\n  AreaPanel ap=api.ap();\n  TimeTree rootTt=ap.getTimeTree();\n  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);\n  if (tt == null || tt.id == api.currTtId)   return false;\n  sortedApiTree.remove(api);\n  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);\n  return true;\n}"}
{"ids": "45705", "raw_code": "@RequestMapping(value={\"/\",\"\"},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute(\"userroles\") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();\n    jpaUserRoles.setUserRoleId(userRoles.getUserRoleId());\n    jpaUserRoles.setRole(userRoles.getRole());\n    Users users=new Users();\n    users.setUsername(userRoles.getUsername());\n    jpaUserRoles.setUsers(users);\n    userRolesDAO.update(jpaUserRoles);\n    restWrapper=new RestWrapper(userRoles,RestWrapper.OK);\n    LOGGER.info(\"Record with ID:\" + userRoles.getUserRoleId() + \" updated in UserRoles by User:\"+ principal.getName()+ userRoles);\n  }\n catch (  Exception e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}"}
{"ids": "62694", "raw_code": "public static void printThreadInfo(PrintWriter stream,String title){\n  final int STACK_DEPTH=20;\n  boolean contention=threadBean.isThreadContentionMonitoringEnabled();\n  long[] threadIds=threadBean.getAllThreadIds();\n  stream.println(\"Process Thread Dump: \" + title);\n  stream.println(threadIds.length + \" active threads\");\n  for (  long tid : threadIds) {\n    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);\n    if (info == null) {\n      stream.println(\"  Inactive\");\n      continue;\n    }\n    stream.println(\"Thread \" + getTaskName(info.getThreadId(),info.getThreadName()) + \":\");\n    Thread.State state=info.getThreadState();\n    stream.println(\"  State: \" + state);\n    stream.println(\"  Blocked count: \" + info.getBlockedCount());\n    stream.println(\"  Waited count: \" + info.getWaitedCount());\n    if (contention) {\n      stream.println(\"  Blocked time: \" + info.getBlockedTime());\n      stream.println(\"  Waited time: \" + info.getWaitedTime());\n    }\n    if (state == Thread.State.WAITING) {\n      stream.println(\"  Waiting on \" + info.getLockName());\n    }\n else     if (state == Thread.State.BLOCKED) {\n      stream.println(\"  Blocked on \" + info.getLockName());\n      stream.println(\"  Blocked by \" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));\n    }\n    stream.println(\"  Stack:\");\n    for (    StackTraceElement frame : info.getStackTrace()) {\n      stream.println(\"    \" + frame.toString());\n    }\n  }\n  stream.flush();\n}"}
{"ids": "52894", "raw_code": "@Override public void writeExternal(ObjectOutput out) throws IOException {\n  super.writeExternal(out);\n  out.writeObject(approximation);\n}"}
{"ids": "7275", "raw_code": "public void add(String methodName,List<Expression> parameters){\n  chain.add(new DotExpressionItem(methodName,parameters,false));\n}"}
{"ids": "84008", "raw_code": "public static Request request(){\n  return threadLocal.get();\n}"}
{"ids": "55462", "raw_code": "private void scheduleCommercial(int length){\n  Long delay=commercialDelay.getSettingValue();\n  if (delay == null) {\n    setCommercialResult(\"Invalid delay specified.\");\n    clearCommercialButtonsSelection();\n  }\n else {\n    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;\n    scheduledCommercialLength=length;\n    update();\n  }\n}"}
{"ids": "47812", "raw_code": "public int hashCode(){\n  long bits=Double.doubleToLongBits(m00);\n  bits=bits * 31 + Double.doubleToLongBits(m01);\n  bits=bits * 31 + Double.doubleToLongBits(m02);\n  bits=bits * 31 + Double.doubleToLongBits(m10);\n  bits=bits * 31 + Double.doubleToLongBits(m11);\n  bits=bits * 31 + Double.doubleToLongBits(m12);\n  return (((int)bits) ^ ((int)(bits >> 32)));\n}"}
{"ids": "68665", "raw_code": "public void unsubscribe(AWSIotMessage message) throws AWSIotException {\n  try {\n    unsubscribeTopic(message);\n  }\n catch (  AwsIotRetryableException e) {\n    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {\n      unsubscribeQueue.add(message);\n    }\n else {\n      LOGGER.info(\"Failed to unsubscribe to \" + message.getTopic());\n      throw new AWSIotException(e);\n    }\n  }\n}"}
{"ids": "3515", "raw_code": "public void clientDisconnect(){\n  try {\n    OutHttpApp responseStream=_responseStream;\n    if (responseStream != null) {\n      responseStream.close();\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.FINER,e.toString(),e);\n  }\n  ConnectionTcp conn=connTcp();\n  if (conn != null) {\n    conn.clientDisconnect();\n  }\n  killKeepalive(\"client disconnect\");\n}"}
{"ids": "46774", "raw_code": "public boolean endsWith(Name n){\n  if (n instanceof CompoundName) {\n    return (impl.endsWith(n.size(),n.getAll()));\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "13651", "raw_code": "private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){\n  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);\n}"}
{"ids": "34848", "raw_code": "@SuppressWarnings(\"purity\") private static boolean isRegex(String s){\n  try {\n    Pattern.compile(s);\n  }\n catch (  PatternSyntaxException e) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "32745", "raw_code": "public static void flush(){\n  clearBuffer();\n  try {\n    out.flush();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "44392", "raw_code": "private String attachFooterToText(String content) throws MessagingException, IOException {\n  StringBuilder builder=new StringBuilder(content);\n  ensureTrailingCarriageReturn(content,builder);\n  builder.append(getFooterText());\n  return builder.toString();\n}"}
{"ids": "55566", "raw_code": "public static Sentence make(final Connective connective,final Sentence... children2){\n  return make(connective,Arrays.asList(children2));\n}"}
{"ids": "63248", "raw_code": "public synchronized void init(){\n  init=true;\n  for (  String mapName : store.getMapNames()) {\n    if (mapName.startsWith(\"temp.\")) {\n      MVMap<Object,Integer> temp=openTempMap(mapName);\n      store.removeMap(temp);\n    }\n  }\nsynchronized (undoLog) {\n    if (undoLog.size() > 0) {\n      for (      Long key : undoLog.keySet()) {\n        int transactionId=getTransactionId(key);\n        openTransactions.set(transactionId);\n      }\n    }\n  }\n}"}
{"ids": "83319", "raw_code": "public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){\n  double[] keys=histogram.keys();\n  Arrays.sort(keys);\n  double sum=0;\n  for (  double key : keys) {\n    double val=histogram.get(key);\n    sum+=val;\n    histogram.put(key,sum);\n  }\n  return histogram;\n}"}
{"ids": "14797", "raw_code": "void addAttributeValues(String attrName,Set values) throws SMSException {\n  if (attrName != null && values != null && !values.isEmpty()) {\n    Map attrs=getAttributes();\n    Set origValues=(Set)attrs.get(attrName);\n    Set newValues=new HashSet(values);\n    if (origValues != null && !origValues.isEmpty()) {\n      newValues.addAll(origValues);\n    }\n    Map newAttrs=new HashMap();\n    newAttrs.put(attrName,newValues);\n    setAttributes(newAttrs);\n  }\n}"}
{"ids": "65315", "raw_code": "SegmentManager commitIndex(long commitIndex){\n  this.commitIndex=Math.max(this.commitIndex,commitIndex);\n  return this;\n}"}
{"ids": "22689", "raw_code": "public void finishFragments(){\n  for (  Fragment comment : closingFragments) {\n    finishFragment(comment);\n  }\n  closingFragments.clear();\n}"}
{"ids": "10541", "raw_code": "private final void _writeUTF8Segments(byte[] utf8,int offset,int totalLen) throws IOException, JsonGenerationException {\n  do {\n    int len=Math.min(_outputMaxContiguous,totalLen);\n    _writeUTF8Segment(utf8,offset,len);\n    offset+=len;\n    totalLen-=len;\n  }\n while (totalLen > 0);\n}"}
{"ids": "11874", "raw_code": "public Collection<Node> matchingScenariosAndExamples(final Feature feature){\n  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();\n  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();\n  for (  final ScenarioDefinition scenario : allScenarios) {\n    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());\n    allTagsForScenario.addAll(feature.getTags());\n    if (scenario instanceof ScenarioOutline) {\n      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));\n    }\n else {\n      if (matches(allTagsForScenario)) {\n        matchingScenariosAndExamples.add(scenario);\n      }\n    }\n  }\n  return matchingScenariosAndExamples;\n}"}
{"ids": "78277", "raw_code": "public boolean isSetQueueSize(){\n  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);\n}"}
{"ids": "23049", "raw_code": "public void requestContactCapabilities(Set<ContactId> contacts) throws RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException {\n  if (mApi == null) {\n    throw new RcsServiceNotAvailableException();\n  }\n  if (contacts == null || contacts.isEmpty()) {\n    throw new RcsIllegalArgumentException(\"contacts must not be null or empty!\");\n  }\n  try {\n    mApi.requestContactCapabilities2(new ArrayList<>(contacts));\n  }\n catch (  Exception e) {\n    RcsIllegalArgumentException.assertException(e);\n    RcsServiceNotRegisteredException.assertException(e);\n    throw new RcsGenericException(e);\n  }\n}"}
{"ids": "14838", "raw_code": "public boolean validate(String value,String rule){\n  return (value.equalsIgnoreCase(rule));\n}"}
{"ids": "19730", "raw_code": "public boolean offer(E event,int taskId) throws InterruptedException {\n  assertNotDone();\n  if (predicate.match(event)) {\n    this.matched[taskId]=true;\n    for (    boolean match : matched) {\n      if (!match)       return true;\n    }\n    responseQueue.put(new EventHolder(event));\n    done=true;\n    return true;\n  }\n else   return false;\n}"}
{"ids": "44753", "raw_code": "private static AlgorithmParameterSpec algorithmParameterSpec(){\n  final SecureRandom random=new SecureRandom();\n  final byte[] bytes=new byte[CcAes.BLOCK];\n  random.nextBytes(bytes);\n  return new IvParameterSpec(bytes);\n}"}
{"ids": "63624", "raw_code": "public void drawLinesAndPoints(Graphics2D g2d,ArrayList<ComparableLabel> orderedDateSet,HashMap<ComparableLabel,Integer> dataPoints,long yMaxMark){\n  int sectionWidth=this.graphWidth / orderedDateSet.size();\n  int xOffset=sectionWidth / 2;\n  int yPrevValue;\n  int yCurrentValue;\n  float prevOffsetPerc;\n  float currentOffsetPerc;\n  g2d.setColor(this.lineColor);\n  for (int i=0; i < orderedDateSet.size(); i++) {\n    if (i != 0) {\n      yPrevValue=dataPoints.get(orderedDateSet.get(i - 1));\n      yCurrentValue=dataPoints.get(orderedDateSet.get(i));\n      prevOffsetPerc=yPrevValue / (float)yMaxMark;\n      currentOffsetPerc=yCurrentValue / (float)yMaxMark;\n      g2d.drawLine(this.graphLeft + (i - 1) * sectionWidth + xOffset,this.graphBottom - Math.round(prevOffsetPerc * this.graphHeight),this.graphLeft + i * sectionWidth + xOffset,Math.round(this.graphBottom - currentOffsetPerc * this.graphHeight));\n    }\n else {\n      yCurrentValue=dataPoints.get(orderedDateSet.get(i));\n      currentOffsetPerc=yCurrentValue / (float)yMaxMark;\n      g2d.fillOval(this.graphLeft + (i) * sectionWidth + xOffset - this.pointRadius,this.graphBottom - Math.round(currentOffsetPerc * this.graphHeight) - this.pointRadius,this.pointRadius * 2,this.pointRadius * 2);\n    }\n  }\n}"}
{"ids": "3663", "raw_code": "final public void println(String s){\n  Writer out=this.out;\n  if (out == null)   return;\n  try {\n    if (s == null)     out.write(_nullChars,0,_nullChars.length);\n else     out.write(s,0,s.length());\n    out.write(_newline,0,_newline.length);\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n  }\n}"}
{"ids": "27163", "raw_code": "private static URI refragUri(URI uri,String frag) throws URISyntaxException {\n  return new URI(uri.getScheme(),uri.getSchemeSpecificPart(),frag);\n}"}
{"ids": "73325", "raw_code": "@Override public void paint(final PPaintContext ppc){\n  final Paint paint=getPaint();\n  if (paint != null) {\n    final Graphics2D g2=ppc.getGraphics();\n    final PBounds bounds=getUnionOfChildrenBounds(null);\n    if (fillBackground) {\n      g2.setPaint(backgroundColor);\n      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);\n    }\n    if (drawOutline) {\n      g2.setPaint(lineColor);\n      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);\n    }\n  }\n}"}
{"ids": "55861", "raw_code": "public final synchronized byte[] toByteArray(){\n  ByteArrayOutputStream baos=null;\n  DataOutputStream dos=null;\n  try {\n    baos=new ByteArrayOutputStream(32768);\n    dos=new DataOutputStream(baos);\n    game.writeToStream(dos);\n    dos.flush();\n    return baos.toByteArray();\n  }\n catch (  IOException e) {\n    return null;\n  }\n finally {\n    if (dos != null)     try {\n      dos.close();\n    }\n catch (    IOException ex) {\n    }\n    if (baos != null)     try {\n      baos.close();\n    }\n catch (    IOException ex) {\n    }\n  }\n}"}
{"ids": "22693", "raw_code": "protected final void drawArrowHead(Graphics2D g,int x,int y,int sgn){\n  g.setStroke(Strokes.getStroke(StrokeType.SOLID,1));\n  int size=diagram().arrowSize;\nswitch (headType) {\ncase CLOSED:\n    Polygon p=new Polygon(new int[]{x,x + sgn * size,x + sgn * size,x},new int[]{y,y - size,y + size,y},4);\n  g.fillPolygon(p);\nbreak;\ncase OPEN:\ng.drawLine(x,y,x + sgn * size,y - size);\ng.drawLine(x,y,x + sgn * size,y + size);\nbreak;\ncase ROUNDED:\nint left=sgn == -1 ? x - 2 * size : x;\nint top=y - size;\ng.fillArc(left,top,size * 2,size * 2,90,sgn * 180);\n}\n}"}
{"ids": "46523", "raw_code": "void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){\n  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);\n  int x=ax + gap;\n  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());\n  img.paintIcon(c,g,x,y);\n}"}
{"ids": "76368", "raw_code": "public static void fullReset(){\n  resetRuntime();\nsynchronized (readProperties) {\n    readProperties.clear();\n  }\n}"}
{"ids": "73173", "raw_code": "private BufferedImage toBufferedImage(final Image image){\n  if (image instanceof BufferedImage) {\n    return (BufferedImage)image;\n  }\n  if (image instanceof VolatileImage) {\n    VolatileImage volatileImage=(VolatileImage)image;\n    return volatileImage.getSnapshot();\n  }\n  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();\n  GraphicsDevice graphicsDevice=graphicsEnvironment.getDefaultScreenDevice();\n  GraphicsConfiguration graphicsConfiguration=graphicsDevice.getDefaultConfiguration();\n  BufferedImage bufferedImage=graphicsConfiguration.createCompatibleImage(image.getWidth(null),image.getHeight(null));\n  Graphics2D g=bufferedImage.createGraphics();\n  g.drawImage(image,0,0,null);\n  g.dispose();\n  return bufferedImage;\n}"}
{"ids": "70927", "raw_code": "public final boolean isCancelled(){\n  if (cancelled) {\n    pass(\"cancelled\",cancelled);\n  }\n else {\n    fail(\"cancelled\");\n  }\n  return cancelled;\n}"}
{"ids": "71081", "raw_code": "public void remove(DirectedEdge de){\n  outEdges.remove(de);\n}"}
{"ids": "10464", "raw_code": "public Builder untilDate(Date date){\n  untilDate=QUERY_DATE.format(date);\n  return this;\n}"}
{"ids": "49876", "raw_code": "public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException {\n  try {\n    if (fileSystem != null) {\n      Path rootDir=new Path(BaseUri);\n      FileStatus[] files=fileSystem.listStatus(rootDir);\n      for (      FileStatus file : files) {\n        fileSystem.delete(file.getPath(),false);\n      }\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Error in deleting all files.\");\n  }\n}"}
{"ids": "63605", "raw_code": "@Override public boolean canBeCollidedWith(){\n  return true;\n}"}
{"ids": "67367", "raw_code": "public void submit(String queueName,DispatcherTask dispatcherTask){\nsynchronized (syncRoot) {\n    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);\n    if (currentTaskRunner == null) {\n      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);\n      currentTasksMap.put(queueName,currentTaskRunner);\n      executorService.execute(currentTaskRunner);\n    }\n else {\n      enqueueNextTask(queueName,dispatcherTask);\n    }\n  }\n}"}
{"ids": "12556", "raw_code": "public void dump(Writer writer){\n  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));\n  pw.println(\"#========== Wave ==========\");\n  pw.println(\"#Type: NULL\");\n  pw.println(\"#Sample_Rate: \" + (int)audioFormat.getSampleRate());\n  pw.println(\"#Num_of_Samples: \" + samples.length / 2);\n  pw.println(\"#Num_of_Channels: \" + audioFormat.getChannels());\n  if (samples != null) {\n    for (int i=0; i < samples.length; i+=2) {\n      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));\n    }\n  }\n  pw.flush();\n}"}
{"ids": "65788", "raw_code": "public void addFieldBuffered(VEditor editor,GridField mField){\n  wrap=mField != null ? !mField.isSameLine() : false;\n  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);\n  prevEditor=editor;\n  prevField=mField;\n}"}
{"ids": "4900", "raw_code": "public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){\n  ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape);\n  incomplete_expansion_rooms.add(new_room);\n  return new_room;\n}"}
{"ids": "21970", "raw_code": "private void validateVNXFileSMISProviderMandatoryDetails(StorageSystemRequestParam param){\n  ArgValidator.checkFieldValidIP(param.getSmisProviderIP(),\"smis_provider_ip\");\n  ArgValidator.checkFieldNotNull(param.getSmisPortNumber(),\"smis_port_number\");\n  ArgValidator.checkFieldRange(param.getSmisPortNumber(),1,65535,\"smis_port_number\");\n  ArgValidator.checkFieldNotEmpty(param.getSmisUserName(),\"smis_user_name\");\n  ArgValidator.checkFieldNotEmpty(param.getSmisPassword(),\"smis_password\");\n}"}
{"ids": "4898", "raw_code": "private ArtLocateResult calculate_next_trace(boolean p_layer_changed,boolean p_at_fanout_end){\n  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();\n  corner_list.add(current_from_point);\n  if (!p_at_fanout_end) {\n    PlaPointFloat adjusted_start_corner=adjust_start_corner();\n    if (adjusted_start_corner != current_from_point) {\n      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);\n      corner_list.add(add_corner);\n      corner_list.add(adjusted_start_corner);\n      previous_from_point=current_from_point;\n      current_from_point=adjusted_start_corner;\n    }\n  }\n  PlaPointFloat prev_corner=current_from_point;\n  for (int c_limit=0; c_limit < 1000; c_limit++) {\n    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();\n    if (next_corners.isEmpty())     break;\n    for (    PlaPointFloat curr_next_corner : next_corners) {\n      if (curr_next_corner == prev_corner)       continue;\n      corner_list.add(curr_next_corner);\n      previous_from_point=current_from_point;\n      current_from_point=curr_next_corner;\n      prev_corner=curr_next_corner;\n    }\n  }\n  int next_layer=current_trace_layer;\n  if (p_layer_changed) {\n    current_from_door_index=current_target_door_index + 1;\n    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;\n    if (next_room != null) {\n      next_layer=next_room.get_layer();\n    }\n  }\n  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());\n  PlaPointInt prev_point=null;\n  for (  PlaPointFloat a_float : corner_list) {\n    PlaPointInt curr_point=a_float.round();\n    if (curr_point.equals(prev_point))     continue;\n    rounded_corner_list.add(curr_point);\n    prev_point=curr_point;\n  }\n  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);\n  current_trace_layer=next_layer;\n  return result;\n}"}
{"ids": "52911", "raw_code": "private double[] max(double[] distances1,double[] distances2){\n  if (distances1.length != distances2.length) {\n    throw new RuntimeException(\"different lengths!\");\n  }\n  double[] result=new double[distances1.length];\n  for (int i=0; i < distances1.length; i++) {\n    result[i]=Math.max(distances1[i],distances2[i]);\n  }\n  return result;\n}"}
{"ids": "5003", "raw_code": "public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){\n  if (p_color == null)   return;\n  Graphics2D g2=(Graphics2D)p_g;\n  Polygon draw_polygon=new Polygon();\n  for (int index=0; index < p_points.length; index++) {\n    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);\n    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));\n  }\n  g2.setColor(p_color);\n  set_translucency(g2,p_translucency_factor);\n  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  g2.fill(draw_polygon);\n}"}
{"ids": "458", "raw_code": "public void goToCurrentDay(){\n  int monthDifference=FlexibleCalendarHelper.getMonthDifference(displayYear,displayMonth);\n  Calendar cal=Calendar.getInstance();\n  selectedDateItem.setDay(cal.get(Calendar.DAY_OF_MONTH));\n  selectedDateItem.setMonth(cal.get(Calendar.MONTH));\n  selectedDateItem.setYear(cal.get(Calendar.YEAR));\n  if (disableAutoDateSelection) {\n    this.userSelectedItem=selectedDateItem.clone();\n  }\n  if (monthDifference != 0) {\n    resetAdapters=true;\n    if (monthDifference < 0) {\n      monthInfPagerAdapter.setFakeCount(lastPosition);\n      monthInfPagerAdapter.notifyDataSetChanged();\n    }\n    shouldOverrideComputedDate=true;\n    moveToPosition(monthDifference);\n  }\n else {\n    FlexibleCalendarGridAdapter currentlyVisibleAdapter=monthViewPagerAdapter.getMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER);\n    currentlyVisibleAdapter.notifyDataSetChanged();\n  }\n}"}
{"ids": "60231", "raw_code": "public boolean isValidTemplate(){\n  return isValidTemplate(template);\n}"}
{"ids": "23693", "raw_code": "public Object take() throws InterruptedException, ForceReattemptException {\n  throw new UnsupportedOperationException();\n}"}
{"ids": "52051", "raw_code": "@SuppressWarnings({\"SuspiciousNameCombination\"}) public static double normalCdf(double y){\n  double f, h;\n  int j;\n  double dcphi, x, z, f1, f2, f3, f4, f5;\n  x=y;\n  if (Math.abs(x) > 15.) {\n    dcphi=0.;\n  }\n else {\n    j=(int)Math.floor(Math.abs(x) * 16. + .5);\n    z=j * .0625;\n    h=Math.abs(x) - z;\n    f=r[j];\n    f1=f * z - 1;\n    f2=f + z * f1;\n    f3=f1 * 2. + z * f2;\n    f4=f2 * 3 + z * f3;\n    f5=f3 * 4 + z * f4;\n    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;\n    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);\n  }\n  if (x < 0.) {\n    return dcphi;\n  }\n else {\n    return (1.0 - dcphi);\n  }\n}"}
{"ids": "3469", "raw_code": "private void destroy(){\n  if (log.isLoggable(Level.FINEST)) {\n    log.finest(this + \" destroying connection\");\n  }\n  try {\n    _socket.forceShutdown();\n  }\n catch (  Throwable e) {\n  }\n  try {\n    closeConnection();\n  }\n catch (  Throwable e) {\n    log.log(Level.FINER,e.toString(),e);\n  }\n  _port.removeConnection(this);\n}"}
{"ids": "81819", "raw_code": "int atom() throws RESyntaxException {\n  int ret=node(RE.OP_ATOM,0);\n  int lenAtom=0;\n  atomLoop:   while (idx < len) {\n    if ((idx + 1) < len) {\n      char c=pattern.charAt(idx + 1);\n      if (pattern.charAt(idx) == '\\\\') {\n        int idxEscape=idx;\n        escape();\n        if (idx < len) {\n          c=pattern.charAt(idx);\n        }\n        idx=idxEscape;\n      }\nswitch (c) {\ncase '{':\ncase '?':\ncase '*':\ncase '+':\n        if (lenAtom != 0) {\n          break atomLoop;\n        }\n    }\n  }\nswitch (pattern.charAt(idx)) {\ncase ']':\ncase '^':\ncase '$':\ncase '.':\ncase '[':\ncase '(':\ncase ')':\ncase '|':\n    break atomLoop;\ncase '{':\ncase '?':\ncase '*':\ncase '+':\n  if (lenAtom == 0) {\n    syntaxError(\"Missing operand to closure\");\n  }\nbreak atomLoop;\ncase '\\\\':\n{\nint idxBeforeEscape=idx;\nint c=escape();\nif ((c & ESC_MASK) == ESC_MASK) {\n  idx=idxBeforeEscape;\n  break atomLoop;\n}\nemit((char)c);\nlenAtom++;\n}\nbreak;\ndefault :\nemit(pattern.charAt(idx++));\nlenAtom++;\nbreak;\n}\n}\nif (lenAtom == 0) {\ninternalError();\n}\ninstruction[ret + RE.offsetOpdata]=(char)lenAtom;\nreturn ret;\n}"}
{"ids": "70569", "raw_code": "public boolean isNetworkConnected(){\n  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);\n  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();\n  return networkInfo != null && networkInfo.isConnectedOrConnecting();\n}"}
{"ids": "13735", "raw_code": "public void put(String name,String supported,String authScheme,String level,boolean isDefault){\n  SAMLv2AuthContext c=new SAMLv2AuthContext();\n  c.name=name;\n  c.supported=supported;\n  if (authScheme.length() != 0 && authScheme != null) {\n    int index=authScheme.lastIndexOf(\"=\");\n    c.value=authScheme.substring(index + 1);\n    c.key=authScheme.substring(0,index);\n  }\n else {\n    c.value=\"\";\n    c.key=\"\";\n  }\n  c.level=level;\n  c.isDefault=isDefault;\n  collections.put(name,c);\n}"}
{"ids": "71190", "raw_code": "private void replaceCollapsedEdges(){\n  List newEdges=new ArrayList();\n  for (Iterator it=edgeList.iterator(); it.hasNext(); ) {\n    Edge e=(Edge)it.next();\n    if (e.isCollapsed()) {\n      it.remove();\n      newEdges.add(e.getCollapsedEdge());\n    }\n  }\n  edgeList.addAll(newEdges);\n}"}
{"ids": "82716", "raw_code": "public SeaGlassTitlePane(JRootPane rootPane,SeaGlassRootPaneUI ui){\n  this.rootPane=rootPane;\n  this.rootPaneUI=ui;\n  rootParent=(RootPaneContainer)rootPane.getParent();\n  installTitlePane();\n}"}
{"ids": "51546", "raw_code": "public void writeLong(long value) throws IOException {\n  checkWritePrimitiveTypes();\n  primitiveTypes.writeLong(value);\n}"}
{"ids": "30512", "raw_code": "static public URL findContainerXML(String _containerName){\n  URL _containerNameURL=null;\n  String _containerNameFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + \"/\" + _containerName+ \".xml\";\n  _containerNameURL=getResourceURL(_containerNameFilePath);\n  if (_containerNameURL != null) {\n    if (_logger.isLoggable(Level.INFO)) {\n      _logger.info(\"Loaded the container xml file < \" + _containerNameURL + \" >.\");\n    }\n  }\n  return _containerNameURL;\n}"}
{"ids": "85424", "raw_code": "public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){\n  List<String> result=new ArrayList<String>(names.size());\n  for (  String name : names) {\n    expandWildcard(result,dirs,name,forBackend);\n  }\n  return result;\n}"}
{"ids": "67371", "raw_code": "public static Charset forName(String charsetName){\n  return forName(charsetName,null);\n}"}
{"ids": "35793", "raw_code": "public NSNumber(int i){\n  doubleValue=longValue=i;\n  type=INTEGER;\n}"}
{"ids": "16207", "raw_code": "public static void dump(String message,StackTraceElement[] stackTrace){\n  dump(message,Arrays.asList(stackTrace));\n}"}
{"ids": "44706", "raw_code": "public Matcher next() throws IOException {\n  readahead();\n  if (matches == null) {\n    throw new NoSuchElementException();\n  }\n  Matcher matcher=matches.next();\n  if (discard) {\n    Pattern pattern=matcher.pattern();\n    for (int n=0; n < patterns.length; n++) {\n      if (patterns[n] == pattern) {\n        patterns[n]=null;\n        break;\n      }\n    }\n  }\n  return matcher;\n}"}
{"ids": "76491", "raw_code": "@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){\n  Dimension dimension=dimensionSetting.get();\n  updateLayerManager(dimension);\n  processRecycleQueue();\n  Fragment fragment;\n  while ((fragment=loadingQueue.poll()) != null) {\n    loadFragment(dimension,fragment);\n    dimension=dimensionSetting.get();\n    updateLayerManager(dimension);\n    processRecycleQueue();\n  }\n  layerManager.clearInvalidatedLayers();\n}"}
{"ids": "50326", "raw_code": "default FieldDeclaration addPrivateField(Class<?> typeClass,String name){\n  return addField(typeClass,name,Modifier.PRIVATE);\n}"}
{"ids": "85272", "raw_code": "void ReconstructPrivateSubrs(int Font,IndexBaseItem[] fdPrivateBase,OffsetItem[] fdSubrs){\n  for (int i=0; i < fonts[Font].fdprivateLengths.length; i++) {\n    if (fdSubrs[i] != null && fonts[Font].PrivateSubrsOffset[i] >= 0) {\n      OutputList.addLast(new SubrMarkerItem(fdSubrs[i],fdPrivateBase[i]));\n      if (NewLSubrsIndex[i] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[i])),0,NewLSubrsIndex[i].length));\n    }\n  }\n}"}
{"ids": "68736", "raw_code": "public void initGL(){\n  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);\n  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);\n  mWindowSurface.makeCurrent();\n  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);\n  initGLComponents();\n}"}
{"ids": "45597", "raw_code": "Builder addLenient(String line){\n  int index=line.indexOf(\":\",1);\n  if (index != -1) {\n    return addLenient(line.substring(0,index),line.substring(index + 1));\n  }\n else   if (line.startsWith(\":\")) {\n    return addLenient(\"\",line.substring(1));\n  }\n else {\n    return addLenient(\"\",line);\n  }\n}"}
{"ids": "79737", "raw_code": "public static void mergeNodeChildren(TreeNode node){\n  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;\n  for (int i=0; i < masterNode.getChildCount(); i++) {\n    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i);\n    if (!child.isLeaf()) {\n      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child);\n    }\n  }\n}"}
{"ids": "21240", "raw_code": "private static Object createAndBindItem(ParameterAccess parameters,Class<?> itemType){\n  try {\n    Object value=itemType.newInstance();\n    bind(value,parameters);\n    return value;\n  }\n catch (  InstantiationException|IllegalAccessException e) {\n    throw new BindingException(\"Failed to instantiate new instance of \" + itemType,e);\n  }\n}"}
{"ids": "38308", "raw_code": "public SimpleSetupPanel(Experiment exp){\n  this();\n  setExperiment(exp);\n}"}
{"ids": "51980", "raw_code": "public static void addListener(Listener listener){\n  listeners.addLast(listener);\n}"}
{"ids": "49352", "raw_code": "private static void processArgs(String[] args){\n  for (int i=0; i < args.length; i++) {\n    String arg=args[i];\n    if (arg.equals(\"-o\")) {\n      outputDir=args[++i];\n    }\n else     if (arg.equals(\"-spec\")) {\n      unicodeData=args[++i];\n    }\n else     if (arg.equals(\"-language\")) {\n      language=args[++i];\n    }\n else     if (arg.equals(\"-country\")) {\n      country=args[++i];\n    }\n else     if (arg.equals(\"-valiant\")) {\n      valiant=args[++i];\n    }\n else {\n      usage();\n    }\n  }\n  localeName=getLocaleName();\n}"}
{"ids": "21414", "raw_code": "public static boolean isZoningRequired(DbClient dbClient,VirtualArray nh){\n  if (nh.getAutoSanZoning() == false) {\n    _log.info(\"SAN Zoning is not enabled for Neighborhood: \" + nh.getLabel());\n    return false;\n  }\n  return NetworkUtil.areNetworkSystemDiscovered(dbClient);\n}"}
{"ids": "15420", "raw_code": "private void initXMLTree() throws Exception {\n  updateFilteredTokens();\n  ArrayList elements=getElements(getFilteredTokens());\n  if (elements.size() > 1) {\n    throw new Exception(\"More than one root elements encountered\");\n  }\n  setRootElement((XMLElement)elements.get(0));\n}"}
{"ids": "49798", "raw_code": "public boolean startsWith(CharSeq prefix){\n  return str.startsWith(prefix.str);\n}"}
{"ids": "38464", "raw_code": "public boolean containsWindow(Class<?> windowClass){\n  return (getWindow(windowClass) != null);\n}"}
{"ids": "27007", "raw_code": "public AbstractSurfaceObject(AbstractSurfaceObject source){\n  super(source);\n  this.visible=source.visible;\n  this.uniqueId=nextUniqueId();\n  this.lastModifiedTime=System.currentTimeMillis();\n  this.enableBatchPicking=source.enableBatchPicking;\n}"}
{"ids": "66953", "raw_code": "public SootMethodAndClass parseSootMethodString(String parseString){\n  if (!parseString.startsWith(\"<\") || !parseString.endsWith(\">\")) {\n    throw new IllegalArgumentException(\"Illegal format of \" + parseString + \" (should use soot method representation)\");\n  }\n  String name=\"\";\n  String className=\"\";\n  String returnType=\"\";\n  Pattern pattern=Pattern.compile(\"<(.*?):\");\n  Matcher matcher=pattern.matcher(parseString);\n  if (matcher.find()) {\n    className=matcher.group(1);\n  }\n  pattern=Pattern.compile(\": (.*?) \");\n  matcher=pattern.matcher(parseString);\n  if (matcher.find()) {\n    returnType=matcher.group(1);\n    parseString=parseString.substring(matcher.end(1));\n  }\n  pattern=Pattern.compile(\" (.*?)\\\\(\");\n  matcher=pattern.matcher(parseString);\n  if (matcher.find()) {\n    name=matcher.group(1);\n  }\n  List<String> paramList=new ArrayList<String>();\n  pattern=Pattern.compile(\"\\\\((.*?)\\\\)\");\n  matcher=pattern.matcher(parseString);\n  if (matcher.find()) {\n    String params=matcher.group(1);\n    for (    String param : params.split(\",\"))     paramList.add(param.trim());\n  }\n  return new SootMethodAndClass(name,className,returnType,paramList);\n}"}
{"ids": "82877", "raw_code": "private void createNewReviewTask(TaskRepository repository,TaskData taskData) throws CoreException {\n  Repository repo=AppraisePluginUtils.getGitRepoForRepository(repository);\n  AppraisePluginReviewClient client;\n  try {\n    client=new AppraisePluginReviewClient(repository);\n  }\n catch (  GitClientException e1) {\n    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,\"Failed to initialize git client\"));\n  }\n  String currentBranch;\n  try {\n    currentBranch=repo.getFullBranch();\n  }\n catch (  IOException e) {\n    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,\"Error retrieving current branch\",e));\n  }\n  if (MASTER_REF.equals(currentBranch)) {\n    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,\"Cannot create review on master branch\"));\n  }\n  setAttributeValue(taskData,schema.REQUESTER,repository.getUserName());\n  setAttributeValue(taskData,schema.TARGET_REF,MASTER_REF);\n  setAttributeValue(taskData,schema.REVIEW_REF,currentBranch);\n  RevCommit reviewCommit;\n  try {\n    reviewCommit=client.getReviewCommit(currentBranch,MASTER_REF);\n  }\n catch (  GitClientException e) {\n    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,\"Cannot find a merge base\",e));\n  }\n  if (reviewCommit == null) {\n    throw new CoreException(new Status(IStatus.INFO,AppraiseConnectorPlugin.PLUGIN_ID,\"No commits to review on \" + currentBranch));\n  }\n  setAttributeValue(taskData,schema.DESCRIPTION,reviewCommit.getFullMessage());\n  setAttributeValue(taskData,schema.REVIEW_COMMIT,reviewCommit.getName());\n  try {\n    List<DiffEntry> diffs=client.getReviewDiffs(currentBranch,MASTER_REF);\n    populateDiffs(repository,diffs,taskData);\n  }\n catch (  Exception e) {\n    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,\"Failed to load review diffs\",e));\n  }\n}"}
{"ids": "12962", "raw_code": "@Override public void startup() throws Exception {\n  Log.d(Mary.LOG,\"Register UnitSelection voices:\");\n  List<String> voiceNames=MaryProperties.getList(\"unitselection.voices.list\");\n  for (  String voiceName : voiceNames) {\n    long time=System.currentTimeMillis();\n    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);\n    Log.d(Mary.LOG,\"Voice '\" + unitSelVoice + \"'\");\n    Voice.registerVoice(unitSelVoice);\n    long newtime=System.currentTimeMillis() - time;\n    Log.i(Mary.LOG,\"Loading of voice \" + voiceName + \" took \"+ newtime+ \" milliseconds\");\n  }\n  Log.i(Mary.LOG,\"started.\");\n}"}
{"ids": "78169", "raw_code": "public int findStartOfColumn(int column){\n  if (column == mColumns)   return getSpaceUsed();\n  int currentColumn=0;\n  int currentCharIndex=0;\n  while (true) {\n    int newCharIndex=currentCharIndex;\n    char c=mText[newCharIndex++];\n    boolean isHigh=Character.isHighSurrogate(c);\n    int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c;\n    int wcwidth=WcWidth.width(codePoint);\n    if (wcwidth > 0) {\n      currentColumn+=wcwidth;\n      if (currentColumn == column) {\n        while (newCharIndex < mSpaceUsed) {\n          if (Character.isHighSurrogate(mText[newCharIndex])) {\n            if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) {\n              newCharIndex+=2;\n            }\n else {\n              break;\n            }\n          }\n else           if (WcWidth.width(mText[newCharIndex]) <= 0) {\n            newCharIndex++;\n          }\n else {\n            break;\n          }\n        }\n        return newCharIndex;\n      }\n else       if (currentColumn > column) {\n        return currentCharIndex;\n      }\n    }\n    currentCharIndex=newCharIndex;\n  }\n}"}
{"ids": "55537", "raw_code": "public static Color decode(String color,Color defaultColor){\n  if (color == null) {\n    return defaultColor;\n  }\n  Color c=getNamedColor(color);\n  if (c == null) {\n    try {\n      c=Color.decode(color);\n    }\n catch (    NumberFormatException ex) {\n      return defaultColor;\n    }\n  }\n  return c;\n}"}
{"ids": "12891", "raw_code": "public static LinkedList<MaryModule> modulesRequiredForProcessing(MaryDataType sourceType,MaryDataType targetType,Locale locale,Voice voice){\n  if (!registrationComplete)   throw new IllegalStateException(\"Cannot inquire about modules while registration is ongoing\");\n  if (sourceType == null)   throw new NullPointerException(\"Received null source type\");\n  if (targetType == null)   throw new NullPointerException(\"Received null target type\");\n  LinkedList<MaryDataType> seenTypes=new LinkedList<MaryDataType>();\n  seenTypes.add(sourceType);\n  return modulesRequiredForProcessing(sourceType,targetType,locale,voice,seenTypes);\n}"}
{"ids": "9278", "raw_code": "public double distance(Vector o){\n  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));\n}"}
{"ids": "67902", "raw_code": "public static long calculateElapsedGC(){\n  long timeMillis=0;\n  for (  GarbageCollectorMXBean gcbean : gcbeans) {\n    timeMillis+=gcbean.getCollectionTime();\n  }\n  return timeMillis;\n}"}
{"ids": "450", "raw_code": "public void startObject(int numfields){\n  notNested();\n  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];\n  vtable_in_use=numfields;\n  Arrays.fill(vtable,0,vtable_in_use,0);\n  nested=true;\n  object_start=offset();\n}"}
{"ids": "71020", "raw_code": "public static String stringOfChar(char ch,int count){\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < count; i++) {\n    buf.append(ch);\n  }\n  return buf.toString();\n}"}
{"ids": "956", "raw_code": "private void addConnectionView(Connection connection){\n  PlatformImpl.runAndWait(null);\n}"}
{"ids": "38513", "raw_code": "public void addScriptFinishedListener(ScriptExecutionListener l){\n  m_FinishedListeners.add(l);\n}"}
{"ids": "44405", "raw_code": "public void CONT(int sessionNumber) throws Exception {\n  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);\n  testElements.add(new ContinuationElement(sessionNumber));\n}"}
{"ids": "56157", "raw_code": "public static double calcRotationAngleInDegrees(PointF centerPt,PointF targetPt){\n  double theta=Math.atan2(targetPt.y - centerPt.y,targetPt.x - centerPt.x);\n  double angle=Math.toDegrees(theta);\n  if (angle < 0) {\n    angle+=360;\n  }\n  return angle;\n}"}
{"ids": "67666", "raw_code": "public int countIn(CharSequence sequence){\n  int count=0;\n  for (int i=0; i < sequence.length(); i++) {\n    if (matches(sequence.charAt(i))) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"ids": "48231", "raw_code": "public DeltaCRLIndicatorExtension(int crlNum) throws IOException {\n  super(PKIXExtensions.DeltaCRLIndicator_Id,true,BigInteger.valueOf(crlNum),NAME,LABEL);\n}"}
{"ids": "9242", "raw_code": "static private double calcLogProb(int numAppear,double mu){\n  final double sigma=calcSigmaFromMu(mu);\n  final double logNumAppear=Math.log(numAppear);\n  final double overMu=Math.max(logNumAppear - mu,0.0);\n  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);\n  assert (res <= 0);\n  return res;\n}"}
{"ids": "39699", "raw_code": "@Override public SoftwarePIDController withTolerance(double tolerance){\n  target=target.withTolerance(Math.abs(tolerance));\n  return this;\n}"}
{"ids": "48785", "raw_code": "protected final void dragDropFinished(final boolean success,final int operations,final int x,final int y){\n  DragSourceEvent event=new DragSourceDropEvent(getDragSourceContext(),operations & sourceActions,success,x,y);\n  EventDispatcher dispatcher=new EventDispatcher(DISPATCH_FINISH,event);\n  SunToolkit.invokeLaterOnAppContext(SunToolkit.targetToAppContext(getComponent()),dispatcher);\n  startSecondaryEventLoop();\n  setNativeContext(0);\n  dragImage=null;\n  dragImageOffset=null;\n}"}
{"ids": "54477", "raw_code": "protected static String extractSecretAccessKey(String s3uri){\n  return s3uri.substring(s3uri.indexOf(':',s3uri.indexOf(\"://\") + 1) + 1,s3uri.indexOf('@'));\n}"}
{"ids": "70701", "raw_code": "private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){\n  if (contactInformation.equals(\"\")) {\n    String lastRecipient=RecipientCmd.getLastRecipientNumber();\n    String lastRecipientName=RecipientCmd.getLastRecipientName();\n    if (lastRecipient != null) {\n      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);\n    }\n else {\n      send(\"error: last recipient not set\");\n    }\n  }\n else {\n    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);\n    if (resolvedContact == null) {\n      send(R.string.chat_no_match_for,contactInformation);\n    }\n else     if (resolvedContact.isDistinct()) {\n      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);\n    }\n else {\n      askForMoreDetails(resolvedContact.getCandidates());\n    }\n  }\n}"}
{"ids": "66860", "raw_code": "public void addSafeClass(SootClass clz){\n  safeClasses.add(clz.getName());\n}"}
{"ids": "64324", "raw_code": "private boolean activeListHasRoom(){\n  int maxDownloads=1;\n  return mActiveList.size() < maxDownloads;\n}"}
{"ids": "56201", "raw_code": "public boolean isRunning(){\n  return this.running;\n}"}
{"ids": "76732", "raw_code": "protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){\n  try {\n    InputStream is=clazz.getResourceAsStream(resource);\n    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));\n    Map<String,Step> steps=new HashMap<>();\n    String step;\n    while ((step=readLine(r)) != null) {\n      Step s=parseStep(r,step);\n      steps.put(s.name,s);\n    }\n    r.close();\n    return steps;\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "80560", "raw_code": "public String betToString(){\n  final StringBuilder sb=new StringBuilder();\n  sb.append(amount);\n  sb.append(\" \");\n  sb.append(itemName);\n  sb.append(\" on \");\n  sb.append(target);\n  return sb.toString();\n}"}
{"ids": "57162", "raw_code": "private boolean checkMatchIp(Map<String,Object> rows){\n  boolean matchEther=false;\n  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);\n  if (val != null) {\n    int type=0;\n    if (val.startsWith(\"0x\")) {\n      type=Integer.parseInt(val.substring(2),16);\n    }\n else {\n      try {\n        type=Integer.parseInt(val);\n      }\n catch (      NumberFormatException e) {\n      }\n    }\n    if (type == 2048)     matchEther=true;\n  }\n  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;\n  return true;\n}"}
{"ids": "8814", "raw_code": "private String classToEntryPath(Class<?> clazz){\n  String name=\"\";\n  Class<?> parent;\n  while ((parent=clazz.getEnclosingClass()) != null) {\n    name=\"$\" + clazz.getSimpleName() + name;\n    clazz=parent;\n  }\n  return classNameToEntryPath(clazz.getCanonicalName() + name);\n}"}
{"ids": "4807", "raw_code": "public static String write(POSMikheevCounter counter){\n  return POSBaseLineCounter.write(counter);\n}"}
{"ids": "35016", "raw_code": "private Map<String,AnnotationMirror> annosInPackage(PackageElement packageElement){\n  return createImportedAnnotationsMap(ElementFilter.typesIn(packageElement.getEnclosedElements()));\n}"}
{"ids": "22904", "raw_code": "public OsmElement pasteFrom(){\n  List<Way> ways=storage.getWays();\n  List<Node> nodes=storage.getNodes();\n  if (mode == Mode.CUT) {\n    reset();\n    if (ways != null && ways.size() == 1) {\n      Way w=ways.get(0);\n      w.setState(savedState);\n      for (      Node nd : w.getNodes()) {\n        Log.d(\"PasteFrom\",\"Restoring state for \" + nd.getOsmId());\n        nd.setState(savedNdState.get(nd));\n      }\n      return w;\n    }\n else     if (nodes != null && nodes.size() == 1) {\n      Node n=nodes.get(0);\n      n.setState(savedState);\n      return n;\n    }\n  }\n else {\n    if (ways != null && ways.size() == 1) {\n      return ways.get(0);\n    }\n else     if (nodes != null && nodes.size() == 1) {\n      return nodes.get(0);\n    }\n  }\n  return null;\n}"}
{"ids": "45787", "raw_code": "public final void updateCursor(){\n  updatePending.set(false);\n  updateCursorImpl();\n}"}
{"ids": "46715", "raw_code": "public static boolean isMiddleMouseButton(MouseEvent anEvent){\n  return ((anEvent.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON2);\n}"}
{"ids": "43127", "raw_code": "public void addSuccessMessage(final String successMessage){\n  successMessageList.add(successMessage);\n}"}
{"ids": "74474", "raw_code": "private void startStoppedChanged(){\n  clock.setStartStopped(startStoppedCheckBox.isSelected());\n  changed=true;\n}"}
{"ids": "11500", "raw_code": "public void close() throws IOException {\n  try {\n    Debug.message(\"binaryfile\",\"StreamInputReader.close()\");\n    if (Debug.debugging(\"connection_problems\")) {\n      Thread.sleep(1000);\n    }\n    if (inputStream != null)     inputStream.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  inputStream=null;\n}"}
{"ids": "1520", "raw_code": "private void readBinary(final LittleEndianDataInputStream dis) throws IOException {\n  RajLog.i(\"StlPaser: Reading Binary\");\n  dis.skip(80);\n  int facetCount=dis.readInt();\n  float[] verticesArr=new float[facetCount * 9];\n  float[] normalsArr=new float[facetCount * 9];\n  int[] indicesArr=new int[facetCount * 3];\n  float[] tempNorms=new float[3];\n  int vertPos=0, normPos=0;\n  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;\n  while (dis.available() > 0) {\n    for (int j=0; j < 3; j++) {\n      tempNorms[j]=dis.readFloat();\n      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {\n        RajLog.w(\"STL contains bad normals of NaN or Infinite!\");\n        tempNorms[0]=0;\n        tempNorms[1]=0;\n        tempNorms[2]=0;\n        break;\n      }\n    }\n    for (int j=0; j < 3; j++) {\n      normalsArr[normPos++]=tempNorms[0];\n      normalsArr[normPos++]=tempNorms[1];\n      normalsArr[normPos++]=tempNorms[2];\n    }\n    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();\n    dis.skip(2);\n  }\n  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);\n}"}
{"ids": "85108", "raw_code": "public static void assertSpecificLang(String specificLang) throws XMPException {\n  if (specificLang == null || specificLang.length() == 0) {\n    throw new XMPException(\"Empty specific language\",XMPError.BADPARAM);\n  }\n}"}
{"ids": "63597", "raw_code": "public int onBlockExploded(){\n  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);\n}"}
{"ids": "83489", "raw_code": "@Override public boolean hasQueuedReaderThreads(){\n  return readerLock.hasQueuedThreads();\n}"}
{"ids": "36655", "raw_code": "public long inactiveTimeMillis(){\n  return System.currentTimeMillis() - lastTimeMillis;\n}"}
{"ids": "14825", "raw_code": "public void addDefinition(ICOSDefinition cosDef) throws UMSException {\n  if (!(cosDef instanceof DirectCOSDefinition)) {\n    String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION);\n    throw new UMSException(msg);\n  }\n  String[] cosAttributes=cosDef.getCOSAttributes();\n  AbstractCollection aList=(AbstractCollection)Arrays.asList(ICOSDefinition.qualifiers);\n  for (int i=0; i < cosAttributes.length; i++) {\n    String cosAttribute=null;\n    String qualifier=null;\n    StringTokenizer st=new StringTokenizer(cosAttributes[i]);\n    if (st.hasMoreTokens()) {\n      cosAttribute=st.nextToken();\n    }\n    if (cosAttribute == null) {\n      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);\n      throw new UMSException(msg);\n    }\n    if (st.hasMoreTokens())     qualifier=st.nextToken();\n    if (qualifier == null) {\n      qualifier=ICOSDefinition.qualifiers[ICOSDefinition.DEFAULT];\n      cosDef.removeCOSAttribute(cosAttribute);\n      cosDef.addCOSAttribute(cosAttribute,ICOSDefinition.DEFAULT);\n    }\n    if (!aList.contains(qualifier)) {\n      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);\n      throw new UMSException(msg);\n    }\n  }\n  PersistentObject po=(PersistentObject)cosDef;\n  _parentObject.addChild(po);\n}"}
{"ids": "34301", "raw_code": "QName toQName(Class<?> outputClass){\n  String localPart;\n  String namespaceUri;\n  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {\n    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);\n    localPart=annotation.name();\n    namespaceUri=annotation.namespace();\n  }\n else   if (outputClass.isAnnotationPresent(XmlType.class)) {\n    XmlType annotation=outputClass.getAnnotation(XmlType.class);\n    localPart=annotation.name();\n    namespaceUri=annotation.namespace();\n  }\n else {\n    throw new IllegalArgumentException(\"Outputclass [\" + outputClass + \"] is \"+ \"neither annotated with @XmlRootElement nor @XmlType\");\n  }\n  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {\n    localPart=ClassUtils.getShortNameAsProperty(outputClass);\n  }\n  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {\n    Package outputClassPackage=outputClass.getPackage();\n    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {\n      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);\n      namespaceUri=annotation.namespace();\n    }\n else {\n      namespaceUri=XMLConstants.NULL_NS_URI;\n    }\n  }\n  return new QName(namespaceUri,localPart);\n}"}
{"ids": "476", "raw_code": "private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {\n  try {\n    return signJWT(secret,jwtID,ttl,iss,claims);\n  }\n catch (  JOSEException e) {\n    e.printStackTrace();\n    throw new HmacException(\"Cannot generate JWT\",e);\n  }\n}"}
{"ids": "41700", "raw_code": "public void exportSymbols(String[] exportNames,Symbol[] symbols){\n  if (exportedSymbols == null) {\n    exportedSymbols=new ArrayList();\n  }\n  for (int i=0; i < exportNames.length && i < symbols.length; i++) {\n    exportedSymbols.add(new ExportedSymbol(symbols[i],exportNames[i]));\n  }\n}"}
{"ids": "34986", "raw_code": "public static AnnotationMirror findEffectiveAnnotationInHierarchy(final QualifierHierarchy qualifierHierarchy,final AnnotatedTypeMirror toSearch,final AnnotationMirror top){\n  return findEffectiveAnnotationInHierarchy(qualifierHierarchy,toSearch,top,false);\n}"}
{"ids": "3945", "raw_code": "public boolean toFail(){\n  LifecycleState state;\nsynchronized (this) {\n    state=_state;\n    if (state.isAfterDestroying()) {\n      return false;\n    }\n    _state=FAILED;\n    _lastChangeTime=CurrentTime.currentTime();\n  }\n  if (_log != null && _log.isLoggable(_level))   _log.log(_level,\"fail \" + _name);\n  notifyListeners(state,FAILED);\n  _failCount++;\n  return true;\n}"}
{"ids": "45230", "raw_code": "private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {\n  int read=0;\n  int res=0;\n  while (read < n) {\n    res=in.read(buf,read + pos,n - read);\n    if (res > 0) {\n      read+=res;\n    }\n else {\n      throw new IOException(\"Read failed, got \" + read + \" of \"+ n);\n    }\n  }\n}"}
{"ids": "74523", "raw_code": "void cancelIncludedOnly(){\n  if (!_showAllInput) {\n    _inputAllButton.doClick();\n  }\n  if (!_showAllOutput) {\n    _outputAllButton.doClick();\n  }\n  if (!_showAllAlign) {\n    _alignAllButton.doClick();\n  }\n}"}
{"ids": "70661", "raw_code": "List<Entry> killAll(boolean rootIncluded){\n  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);\n  Entry entry;\n  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {\n    entry=entries.get(i);\n    if (entry.dead)     continue;\n    entry.dead=true;\n    if (i != 0) {\n      killed.add(entry);\n    }\n  }\n  return killed;\n}"}
{"ids": "21190", "raw_code": "public static String parseDiskString(String input){\n  String delims=\"[ ]+\";\n  String[] tokens=input.split(delims);\n  return tokens[0];\n}"}
{"ids": "36713", "raw_code": "protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){\n  GeneralPath path=new GeneralPath();\n  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));\n  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));\n  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));\n  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));\n  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));\n  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));\n  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));\n  path.closePath();\n  drawPath(path,fillColor,fillPaint,penColor,shadow);\n}"}
{"ids": "31119", "raw_code": "private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {\n  Object saved=state.get();\n  try {\n    state.set(obj);\n    return ctx.isTrustedObject(obj);\n  }\n  finally {\n    state.set(saved);\n  }\n}"}
{"ids": "73248", "raw_code": "private void connectEqualized(SynapseGroup synapseGroup){\n  currentOrderingIndices=new int[sourceNeurons.length];\n  int numConnectsPerSrc;\n  int expectedNumSyns;\n  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {\n    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));\n  }\n else {\n    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);\n  }\n  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;\n  synapseGroup.preAllocateSynapses(expectedNumSyns);\n  for (int i=0, n=sourceNeurons.length; i < n; i++) {\n    currentOrderingIndices[i]=numConnectsPerSrc;\n    Neuron src=sourceNeurons[i];\n    Neuron tar;\n    for (int j=0; j < numConnectsPerSrc; j++) {\n      tar=targetNeurons[sparseOrdering[i][j]];\n      Synapse s=new Synapse(src,tar);\n      synapseGroup.addNewSynapse(s);\n    }\n  }\n}"}
{"ids": "8213", "raw_code": "public static Number multiply(Character left,Character right){\n  return multiply(Integer.valueOf(left),right);\n}"}
{"ids": "8143", "raw_code": "public static String normalize(final CharSequence self){\n  final String s=self.toString();\n  int nx=s.indexOf('\\r');\n  if (nx < 0) {\n    return s;\n  }\n  final int len=s.length();\n  final StringBuilder sb=new StringBuilder(len);\n  int i=0;\n  do {\n    sb.append(s,i,nx);\n    sb.append('\\n');\n    if ((i=nx + 1) >= len)     break;\n    if (s.charAt(i) == '\\n') {\n      if (++i >= len)       break;\n    }\n    nx=s.indexOf('\\r',i);\n  }\n while (nx > 0);\n  sb.append(s,i,len);\n  return sb.toString();\n}"}
{"ids": "27426", "raw_code": "public void write(final int b) throws IOException {\n  if (m_store == null) {\n    throw new IllegalStateException(ERR_NO_STORE);\n  }\n  if (m_isSaved) {\n    throw new IllegalStateException(ERR_ALREADY_SAVED);\n  }\n  if (m_count == m_blobThreshold && !m_writingHdr) {\n    if (m_blobHeader == null) {\n      m_blobHeader=new ArrayList<Integer>();\n    }\n    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);\n    m_blobHeader.add(curAddr);\n    m_count=0;\n  }\n  m_buf[m_count++]=(byte)b;\n  m_bytesWritten++;\n}"}
{"ids": "3831", "raw_code": "public StartListener(Object resource){\n  _resource=resource;\n}"}
{"ids": "73507", "raw_code": "public List<T> asFlatList(){\n  List<T> list=new ArrayList<T>();\n  for (int i=0; i < getRowCount(); i++) {\n    for (int j=0; j < getColumnCount(); j++) {\n      list.add(getLogicalValueAt(i,j));\n    }\n  }\n  return list;\n}"}
{"ids": "68622", "raw_code": "public void recordTimestamp(){\n  long curTimestamp=System.currentTimeMillis();\n  if (usedFields > 0) {\n    long diff=curTimestamp - lastValue;\n    if (usedFields == diffs.length) {\n      long removedValue=diffs[curPosition];\n      diffs[curPosition]=diff;\n      calculateNewAverage(removedValue,diff,false);\n      shiftEnd();\n    }\n else {\n      calculateNewAverage(0,diff,true);\n      diffs[curPosition]=diff;\n      shiftEnd();\n    }\n  }\n else   if (lastValue != -1) {\n    long diff=curTimestamp - lastValue;\n    currentAverage=0;\n    diffs[curPosition]=diff;\n    calculateNewAverage(0,diff,true);\n    shiftEnd();\n  }\n  lastValue=curTimestamp;\n}"}
{"ids": "2270", "raw_code": "@AfterMethod public void tearDown() throws Exception {\n  Throwable t=threadFailure.getAndSet(null);\n  if (t != null) {\n    if (t instanceof Error)     throw (Error)t;\n else     if (t instanceof RuntimeException)     throw (RuntimeException)t;\n else     if (t instanceof Exception)     throw (Exception)t;\n else {\n      AssertionFailedError afe=new AssertionFailedError(t.toString());\n      afe.initCause(t);\n      throw afe;\n    }\n  }\n  if (Thread.interrupted())   tearDownFail(\"interrupt status set in main thread\");\n  checkForkJoinPoolThreadLeaks();\n}"}
{"ids": "38963", "raw_code": "protected double defaultMaxRadius(){\n  return Math.sqrt(2.0);\n}"}
{"ids": "46655", "raw_code": "public void insert(Component component,int index){\n  if (index < 0) {\n    throw new IllegalArgumentException(\"index less than zero.\");\n  }\n  int nitems=getComponentCount();\n  Vector<Component> tempItems=new Vector<Component>();\n  for (int i=index; i < nitems; i++) {\n    tempItems.addElement(getComponent(index));\n    remove(index);\n  }\n  add(component);\n  for (  Component tempItem : tempItems) {\n    add(tempItem);\n  }\n}"}
{"ids": "36312", "raw_code": "public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){\n  List<String> result=new LinkedList<>();\n  StringBuilder b=new StringBuilder();\n  boolean readEscape=false;\n  int indexCount=-1;\n  for (  char c : source.toCharArray()) {\n    indexCount++;\n    if (readEscape) {\n      boolean found=false;\n      if (c == splitCharacter) {\n        found=true;\n        b.append(c);\n      }\n else       if (c == escapeChar) {\n        found=true;\n        b.append(c);\n      }\n else {\n        for (        char s : specialCharacters) {\n          if (s == c) {\n            found=true;\n            b.append(c);\n            break;\n          }\n        }\n      }\n      if (!found) {\n        throw new IllegalArgumentException(\"String '\" + source + \"' contains illegal escaped character '\"+ c+ \"'.\");\n      }\n      readEscape=false;\n    }\n else     if (c == escapeChar) {\n      readEscape=true;\n    }\n else     if (c == splitCharacter) {\n      readEscape=false;\n      result.add(b.toString());\n      if (splitLimit != -1) {\n        if (result.size() == splitLimit - 1) {\n          result.add(source.substring(indexCount + 1));\n          return result;\n        }\n      }\n      b=new StringBuilder();\n    }\n else {\n      readEscape=false;\n      b.append(c);\n    }\n  }\n  result.add(b.toString());\n  return result;\n}"}
{"ids": "46520", "raw_code": "void addRule(String[] selector,AttributeSet declaration,boolean isLinked){\n  int n=selector.length;\n  StringBuilder sb=new StringBuilder();\n  sb.append(selector[0]);\n  for (int counter=1; counter < n; counter++) {\n    sb.append(' ');\n    sb.append(selector[counter]);\n  }\n  String selectorName=sb.toString();\n  Style rule=getStyle(selectorName);\n  if (rule == null) {\n    Style altRule=addStyle(selectorName,null);\nsynchronized (this) {\n      SelectorMapping mapping=getRootSelectorMapping();\n      for (int i=n - 1; i >= 0; i--) {\n        mapping=mapping.getChildSelectorMapping(selector[i],true);\n      }\n      rule=mapping.getStyle();\n      if (rule == null) {\n        rule=altRule;\n        mapping.setStyle(rule);\n        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());\n      }\n    }\n  }\n  if (isLinked) {\n    rule=getLinkedStyle(rule);\n  }\n  rule.addAttributes(declaration);\n}"}
{"ids": "29859", "raw_code": "public Builder appendReadData(byte[] data){\n  Assertions.checkState(data != null && data.length > 0);\n  segments.add(new Segment(data,null));\n  return this;\n}"}
{"ids": "34210", "raw_code": "private boolean isLatestDssKeystore(TSLParserResult parseResult){\n  List<String> englishSchemeInformationURIs=parseResult.getEnglishSchemeInformationURIs();\n  return englishSchemeInformationURIs.contains(ojUrl);\n}"}
{"ids": "11788", "raw_code": "public LayerGraphicWarehouseSupport(){\n  initDrawingAttributes();\n  graphics=new OMGraphicList();\n  graphics.setTraverseMode(OMGraphicList.LAST_ADDED_ON_TOP);\n}"}
{"ids": "41464", "raw_code": "public boolean matchesNamingConvension(){\n  return packageName.matches(JAVA_PACKAGE_CONVENSION);\n}"}
{"ids": "49002", "raw_code": "void rememberFactory(String host,RMISocketFactory factory){\nsynchronized (successTable) {\n    while (hostList.size() >= MaxRememberedHosts) {\n      successTable.remove(hostList.elementAt(0));\n      hostList.removeElementAt(0);\n    }\n    hostList.addElement(host);\n    successTable.put(host,factory);\n  }\n}"}
{"ids": "48480", "raw_code": "public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){\n  int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);\n  if (length <= (destLimit - destStart)) {\n    return length;\n  }\n else {\n    throw new IndexOutOfBoundsException(Integer.toString(length));\n  }\n}"}
{"ids": "29937", "raw_code": "private void removeObsoleteElements(List<String> names,Map<String,View> sharedElements,List<String> elementsToRemove){\n  if (elementsToRemove.size() > 0) {\n    names.removeAll(elementsToRemove);\n    for (    String elementToRemove : elementsToRemove) {\n      sharedElements.remove(elementToRemove);\n    }\n  }\n}"}
{"ids": "71211", "raw_code": "public static double bufferDistanceError(int quadSegs){\n  double alpha=Math.PI / 2.0 / quadSegs;\n  return 1 - Math.cos(alpha / 2.0);\n}"}
{"ids": "28554", "raw_code": "public void add(Character character){\n  elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));\n}"}
{"ids": "43945", "raw_code": "public void removeChild(Group theGroup){\n  mChildren.remove(theGroup);\n}"}
{"ids": "21518", "raw_code": "protected StoragePort checkPortExistsInDB(String nativeGuid) throws IOException {\n  StoragePort port=null;\n  List<StoragePort> portInDB=CustomQueryUtility.getActiveStoragePortByNativeGuid(_dbClient,nativeGuid);\n  if (portInDB != null && !portInDB.isEmpty()) {\n    port=portInDB.get(0);\n  }\n  return port;\n}"}
{"ids": "43309", "raw_code": "public void appendSplitElement(Fragment aSplit){\n  splits.add(aSplit);\n}"}
{"ids": "40792", "raw_code": "public RespokeDirectConnection directConnection(){\n  if (null != directConnectionReference) {\n    return directConnectionReference.get();\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "10018", "raw_code": "private String appendNationalNumber(String nationalNumber){\n  int prefixBeforeNationalNumberLength=prefixBeforeNationalNumber.length();\n  if (shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > 0 && prefixBeforeNationalNumber.charAt(prefixBeforeNationalNumberLength - 1) != SEPARATOR_BEFORE_NATIONAL_NUMBER) {\n    return new String(prefixBeforeNationalNumber) + SEPARATOR_BEFORE_NATIONAL_NUMBER + nationalNumber;\n  }\n else {\n    return prefixBeforeNationalNumber + nationalNumber;\n  }\n}"}
{"ids": "73310", "raw_code": "public void cut(){\n  copy();\n  deleteSelectedObjects();\n}"}
{"ids": "19833", "raw_code": "public synchronized void release(){\n  index.clear();\n}"}
{"ids": "19728", "raw_code": "public void configure(){\n  if (cmdPrefix != null) {\n    prefix=cmdPrefix.split(\" \");\n  }\n}"}
{"ids": "44124", "raw_code": "protected void writeTransform(AffineTransform t) throws IOException {\n  pageStream.matrix(t);\n}"}
{"ids": "82208", "raw_code": "public PainterChain prependPainter(Painter p){\n  Painter[] newChain=new Painter[chain.length + 1];\n  System.arraycopy(chain,1,newChain,0,chain.length);\n  newChain[0]=p;\n  return new PainterChain(newChain);\n}"}
{"ids": "67512", "raw_code": "@Nullable private Operator.Kind parseOperator(TokenStream tokens){\n  if (tokens.has(\"=\")) {\n    tokens.next();\n    tokens.expect(\"=\");\n    return Operator.Kind.EQUALS;\n  }\n  if (tokens.has(\"!\")) {\n    tokens.next();\n    tokens.expect(\"=\");\n    return Operator.Kind.NOT_EQUALS;\n  }\n  if (tokens.has(\"<\")) {\n    tokens.next();\n    if (tokens.has(\"=\")) {\n      tokens.next();\n      return Operator.Kind.LESS_EQUAL;\n    }\n    return Operator.Kind.LESS;\n  }\n  if (tokens.has(\">\")) {\n    tokens.next();\n    if (tokens.has(\"=\")) {\n      tokens.next();\n      return Operator.Kind.GREATER_EQUAL;\n    }\n    return Operator.Kind.GREATER;\n  }\n  return null;\n}"}
{"ids": "35224", "raw_code": "@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {\n  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);\n}"}
{"ids": "4497", "raw_code": "private void queueUpSyncs(final Cursor contactsCursor){\n  ContactSyncEntry syncEntry=null;\n  while (contactsCursor.moveToNext()) {\n    if (syncEntry == null) {\n      syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE);\n    }\n    final String number=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\n    final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n    if (!TextUtils.isEmpty(number)) {\n      syncEntry.addNumber(numberToNational(number));\n      syncEntry.addName(name);\n      if (syncEntry.isFull()) {\n        Logger.d(TAG,\"Adding sync entry to queue\");\n        mSyncQueue.add(syncEntry);\n        syncEntry=null;\n      }\n    }\n  }\n}"}
{"ids": "75820", "raw_code": "public static void writeResultToFile(Result result,String fname) throws Exception {\n  PrintWriter outer=new PrintWriter(new BufferedWriter(new FileWriter(fname)));\n  outer.write(result.toString());\n  outer.close();\n}"}
{"ids": "16721", "raw_code": "private static void renderTree(Tree tree,int indent,boolean parentLabelNull,boolean firstSibling,boolean leftSiblingPreTerminal,boolean topLevel,StringBuilder sb){\n  boolean suppressIndent=(parentLabelNull || (firstSibling && tree.isPreTerminal()) || (leftSiblingPreTerminal && tree.isPreTerminal()));\n  if (suppressIndent) {\n    sb.append(' ');\n  }\n else {\n    if (!topLevel) {\n      sb.append('\\n');\n    }\n    for (int i=0; i < indent; i++) {\n      sb.append(\"  \");\n    }\n  }\n  if (tree.isLeaf() || tree.isPreTerminal()) {\n    renderFlat(tree,sb);\n    return;\n  }\n  sb.append('(');\n  sb.append(tree.getLabel());\n  renderChildren(tree.getChildren(),indent + 1,false,sb);\n  sb.append(')');\n}"}
{"ids": "65915", "raw_code": "public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){\n  int flags=0;\n  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;\n  Pattern p=Pattern.compile(regex,flags);\n  Matcher m=p.matcher(original);\n  StringBuffer newSB=new StringBuffer();\n  boolean result=m.find();\n  while (result) {\n    m.appendReplacement(newSB,replace);\n    result=m.find();\n  }\n  m.appendTail(newSB);\n  return newSB;\n}"}
{"ids": "63376", "raw_code": "public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){\n  char ca=a.charAt(ai);\n  char cb=b.charAt(bi);\n  if (ignoreCase) {\n    ca=Character.toUpperCase(ca);\n    cb=Character.toUpperCase(cb);\n  }\n  return ca == cb;\n}"}
{"ids": "11960", "raw_code": "private void adjustBackingFileLength(byte[] buffer,long index) throws IOException {\n  if (buffer == null || buffer.length == 0) {\n    throw new IOException(\"Buffer null or empty!\");\n  }\n  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;\n  if (newsize > realLength()) {\n    backingRandomAccessFile.setLength(newsize);\n  }\n}"}
{"ids": "5018", "raw_code": "private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pin_list){\n  Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>();\n  if (p_pin_list.isEmpty()) {\n    return result;\n  }\n  Iterator<DsnNetPin> it=p_pin_list.iterator();\n  DsnNetPin prev_pin=it.next();\n  while (it.hasNext()) {\n    DsnNetPin next_pin=it.next();\n    Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>();\n    curr_subnet_pin_list.add(prev_pin);\n    curr_subnet_pin_list.add(next_pin);\n    result.add(curr_subnet_pin_list);\n    prev_pin=next_pin;\n  }\n  return result;\n}"}
{"ids": "46549", "raw_code": "private char[] parseEntityReference() throws IOException {\n  int pos=strpos;\n  if ((ch=readCh()) == '#') {\n    int n=0;\n    ch=readCh();\n    if ((ch >= '0') && (ch <= '9') || ch == 'x' || ch == 'X') {\n      if ((ch >= '0') && (ch <= '9')) {\n        while ((ch >= '0') && (ch <= '9')) {\n          n=(n * 10) + ch - '0';\n          ch=readCh();\n        }\n      }\n else {\n        ch=readCh();\n        char lch=(char)Character.toLowerCase(ch);\n        while ((lch >= '0') && (lch <= '9') || (lch >= 'a') && (lch <= 'f')) {\n          if (lch >= '0' && lch <= '9') {\n            n=(n * 16) + lch - '0';\n          }\n else {\n            n=(n * 16) + lch - 'a' + 10;\n          }\n          ch=readCh();\n          lch=(char)Character.toLowerCase(ch);\n        }\n      }\nswitch (ch) {\ncase '\\n':\n        ln++;\n      ch=readCh();\n    lfCount++;\n  break;\ncase '\\r':\nln++;\nif ((ch=readCh()) == '\\n') {\nch=readCh();\ncrlfCount++;\n}\n else {\ncrCount++;\n}\nbreak;\ncase ';':\nch=readCh();\nbreak;\n}\nchar data[]=mapNumericReference(n);\nreturn data;\n}\naddString('#');\nif (!parseIdentifier(false)) {\nerror(\"ident.expected\");\nstrpos=pos;\nchar data[]={'&','#'};\nreturn data;\n}\n}\n else if (!parseIdentifier(false)) {\nchar data[]={'&'};\nreturn data;\n}\nboolean semicolon=false;\nswitch (ch) {\ncase '\\n':\nln++;\nch=readCh();\nlfCount++;\nbreak;\ncase '\\r':\nln++;\nif ((ch=readCh()) == '\\n') {\nch=readCh();\ncrlfCount++;\n}\n else {\ncrCount++;\n}\nbreak;\ncase ';':\nsemicolon=true;\nch=readCh();\nbreak;\n}\nString nm=getString(pos);\nEntity ent=dtd.getEntity(nm);\nif (!strict && (ent == null)) {\nent=dtd.getEntity(nm.toLowerCase());\n}\nif ((ent == null) || !ent.isGeneral()) {\nif (nm.length() == 0) {\nerror(\"invalid.entref\",nm);\nreturn new char[0];\n}\nString str=\"&\" + nm + (semicolon ? \";\" : \"\");\nchar b[]=new char[str.length()];\nstr.getChars(0,b.length,b,0);\nreturn b;\n}\nreturn ent.getData();\n}"}
{"ids": "84950", "raw_code": "private static String createJsMethodInvocationExpression(String methodName,boolean isStatic,String... paramNames){\n  StringBuilder sb=new StringBuilder();\n  sb.append(isStatic ? WND : THIS);\n  sb.append(\".\");\n  sb.append(methodName);\n  sb.append(\"(\");\n  for (int i=0; i < paramNames.length; i++) {\n    if (i != 0) {\n      sb.append(\", \");\n    }\n    sb.append(paramNames[i]);\n  }\n  sb.append(\");\");\n  return sb.toString();\n}"}
{"ids": "52256", "raw_code": "public void doDoubleClickAction(){\n  doDoubleClickAction(null);\n}"}
{"ids": "59676", "raw_code": "protected void dropTables(List<String> dropTableNames,SQLiteDatabase db){\n  if (dropTableNames != null && !dropTableNames.isEmpty()) {\n    String[] dropTableSQLS=new String[dropTableNames.size()];\n    for (int i=0; i < dropTableSQLS.length; i++) {\n      dropTableSQLS[i]=generateDropTableSQL(dropTableNames.get(i));\n    }\n    execute(dropTableSQLS,db);\n  }\n}"}
{"ids": "82901", "raw_code": "public Boolean exists(String email){\n  for (  Person person : people) {\n    if (email.equals(person.getEmail())) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "68323", "raw_code": "public void crabDownDirBlockForModification(BlockId blk){\n  lockTbl.xLock(blk,txNum);\n  writenIndexBlks.add(blk);\n}"}
{"ids": "4746", "raw_code": "private static void removeReferenceToConnection(final HttpConnectionWithReference connection){\nsynchronized (REFERENCE_TO_CONNECTION_SOURCE) {\n    REFERENCE_TO_CONNECTION_SOURCE.remove(connection.reference);\n  }\n}"}
{"ids": "24624", "raw_code": "public boolean matchesWord(){\n  return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));\n}"}
{"ids": "53526", "raw_code": "public VacuumEnvironment(){\n  Random r=new Random();\n  envState=new VacuumEnvironmentState(0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty,0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty);\n}"}
{"ids": "48937", "raw_code": "public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){\n  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);\n  if (remoteClass == null)   return;\n  RMIGenerator gen;\n  try {\n    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);\n  }\n catch (  ClassNotFound e) {\n    env.error(0,\"rmic.class.not.found\",e.name);\n    return;\n  }\n  gen.generate();\n}"}
{"ids": "80628", "raw_code": "public void remove(final CreatureRespawnPoint point){\n  respawnPoints.remove(point);\n}"}
{"ids": "10787", "raw_code": "public static long bytesToLong(final byte[] bytes){\n  final ByteBuffer buffer=ByteBuffer.allocate(8);\n  buffer.put(bytes,0,8);\n  buffer.flip();\n  return buffer.getLong();\n}"}
{"ids": "83252", "raw_code": "public void print(){\n  Object[] iterChargingTimes=chargingTimes.toArray();\n  Arrays.sort(iterChargingTimes);\n  for (int i=0; i < iterChargingTimes.length; i++) {\n    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];\n    curItem.print();\n  }\n}"}
{"ids": "46781", "raw_code": "public boolean isEmpty(){\n  return rdns.isEmpty();\n}"}
{"ids": "85779", "raw_code": "private void writeLocalCSV(MedtronicSensorRecord mostRecentData,Context context){\n  try {\n    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug(\"writeLocalCSV SAVING  EMPTY!!\");\n else     log.debug(\"writeLocalCSV SAVING --> \" + mostRecentData.bGValue);\n    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),\"save.bin\")));\n    oos.writeObject(mostRecentData);\n    oos.flush();\n    oos.close();\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"write to OutputStream failed\",e);\n    log.error(\"write to OutputStream failed\",e);\n  }\n}"}
{"ids": "14763", "raw_code": "public ServiceConfig createOrganizationConfig(String orgName,Map attrs) throws SMSException, SSOException {\n  validateSSM();\n  ServiceSchemaImpl ss=ssm.getSchema(SchemaType.ORGANIZATION);\n  if (ss == null) {\n    String[] args={serviceName};\n    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,\"sms-service-does-not-have-org-schema\",args));\n  }\n  String orgdn=DNMapper.orgNameToDN(orgName);\n  CreateServiceConfig.checkBaseNodesForOrg(token,orgdn,serviceName,version);\n  String orgDN=scm.constructServiceConfigDN(SMSUtils.DEFAULT,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);\n  try {\n    CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,orgDN);\n    if (cEntry.isDirty()) {\n      cEntry.refresh();\n    }\n    if (cEntry.isNewEntry()) {\n      CreateServiceConfig.createSubConfigEntry(token,orgDN,ss,null,null,attrs,orgName);\n      if (ServiceManager.isCoexistenceMode()) {\n        String smsDN=DNMapper.orgNameToDN(orgName);\n        OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(smsDN),smsDN);\n        amsdk.assignService(serviceName);\n      }\n    }\n else     if (attrs != null && !attrs.isEmpty()) {\n      ServiceConfig sc=getOrganizationConfig(orgName,null);\n      sc.setAttributes(attrs);\n    }\n  }\n catch (  ServiceAlreadyExistsException slee) {\n  }\n  return (getOrganizationConfig(orgName,null));\n}"}
{"ids": "13758", "raw_code": "public void deleteAuthenticationDomain(String realm,String cotName) throws AMConsoleException {\n  String[] param={realm,cotName};\n  logEvent(\"ATTEMPT_DELETE_AUTH_DOMAINS\",param);\n  try {\n    CircleOfTrustManager manager=getCircleOfTrustManager();\n    manager.deleteCircleOfTrust(realm,cotName);\n    logEvent(\"SUCCEED_DELETE_AUTH_DOMAIN\",param);\n  }\n catch (  COTException e) {\n    String strError=getErrorString(e);\n    String[] paramsEx={realm,cotName,strError};\n    logEvent(\"FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN\",paramsEx);\n    throw new AMConsoleException(strError);\n  }\n}"}
{"ids": "81010", "raw_code": "void eventPreModify(ActionType type,long position,boolean isSingle){\n  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {\n    startAction(type,isSingle);\n  }\n else {\n    isBackspace=actionPosition() > position;\n  }\n  if (isSingle && type == ActionType.INSERT) {\n    updateNewRange(position);\n    previousTime=System.currentTimeMillis();\n  }\n}"}
{"ids": "8332", "raw_code": "public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){\n  return parentName;\n}"}
{"ids": "59610", "raw_code": "public RelNode convertSelect(SqlSelect select,boolean top){\n  final SqlValidatorScope selectScope=validator.getWhereScope(select);\n  final Blackboard bb=createBlackboard(selectScope,null,top);\n  convertSelectImpl(bb,select);\n  return bb.root;\n}"}
{"ids": "64876", "raw_code": "private static String formatSampleRate(int rate){\n  return MHZ_FORMATTER.format((double)rate / 1E6d);\n}"}
{"ids": "43872", "raw_code": "public final boolean isClosed(){\n  return closed.get();\n}"}
{"ids": "41545", "raw_code": "void start(){\n  this.running=true;\n  Thread thread=new Thread(this,\"IceConnector@\" + hashCode());\n  thread.setDaemon(true);\n  thread.start();\n}"}
{"ids": "55751", "raw_code": "public static byte[] escape(final byte[] bytes){\n  final byte[] temp=new byte[2 * bytes.length];\n  int currentPosition=0;\n  for (  final byte b : bytes) {\n    if (b == ESCAPE_CHAR) {\n      temp[currentPosition++]=ESCAPE_CHAR;\n      temp[currentPosition++]=REPLACEMENT_CHAR;\n    }\n else     if (b == DELIMITER) {\n      temp[currentPosition++]=ESCAPE_CHAR;\n      temp[currentPosition++]=ESCAPE_CHAR;\n    }\n else {\n      temp[currentPosition++]=b;\n    }\n  }\n  final byte[] escaped=new byte[currentPosition];\n  System.arraycopy(temp,0,escaped,0,currentPosition);\n  return escaped;\n}"}
{"ids": "53970", "raw_code": "public MongoClient clientForMembers(ServerAddress... seeds){\n  List<ServerAddress> addresses=new ArrayList<>();\n  for (  ServerAddress seedAddress : seeds) {\n    if (seedAddress != null)     addresses.add(seedAddress);\n  }\n  return clientForMembers(addresses);\n}"}
{"ids": "1405", "raw_code": "public static boolean stringToBooleanValue(String str) throws ExpressionException {\n  str=StringUtil.toLowerCase(str.trim());\n  if (str.equals(\"yes\") || str.equals(\"true\"))   return true;\n else   if (str.equals(\"no\") || str.equals(\"false\"))   return false;\n  throw new CasterException(\"Can't cast String [\" + str + \"] to boolean\");\n}"}
{"ids": "67141", "raw_code": "public void generateClassFile(OutputStream os){\n  ClassWriter cw=new SootASMClassWriter(ClassWriter.COMPUTE_FRAMES);\n  cv=cw;\n  generateByteCode();\n  try {\n    os.write(cw.toByteArray());\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Could not write class file in the ASM-backend!\",e);\n  }\n}"}
{"ids": "55104", "raw_code": "private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){\n  String value=(String)args.get(EMBEDASCFF);\n  boolean useCFF=true;\n  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;\n  if (value != null) {\n    useCFF=Boolean.parseBoolean(value.trim());\n  }\n  return useCFF;\n}"}
{"ids": "11254", "raw_code": "public static void main(String[] args){\n  new GeneratorTester(args);\n}"}
{"ids": "16686", "raw_code": "private String mosesize(String feature){\n  if (joshuaConfiguration.moses) {\n    if (feature.startsWith(\"tm_\") || feature.startsWith(\"lm_\"))     return feature.replace(\"_\",\"-\");\n  }\n  return feature;\n}"}
{"ids": "32301", "raw_code": "private void checkShutdown(){\nsynchronized (mux) {\n    if (isBeingShutdown)     throw new RejectedExecutionException(\"Failed to execute command during executor shutdown.\");\n  }\n}"}
{"ids": "36496", "raw_code": "private static final void checkQueueForDependenciesAndExecuteUnblockedTasks(){\n  List<ProgressThread> toRemove=new LinkedList<>();\nsynchronized (LOCK) {\n    for (    ProgressThread pg : queuedThreads) {\n      if (!pg.isBlockedByDependencies()) {\n        if (!pg.isWaiting()) {\n          toRemove.add(pg);\n          EXECUTOR.execute(pg.makeWrapper());\n        }\n      }\n    }\n  }\n  for (  ProgressThread pg : toRemove) {\nsynchronized (LOCK) {\n      queuedThreads.remove(pg);\n    }\n  }\n}"}
{"ids": "51078", "raw_code": "public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){\n  if (y1 > y2) {\n    int temp=y1;\n    y1=y2;\n    y2=temp;\n  }\n  if (text == null) {\n    g.drawLine(x,y1,x,y2);\n    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);\n    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);\n    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);\n    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);\n    return;\n  }\n  Canvas c=new Canvas();\n  FontMetrics fm=c.getFontMetrics(sFont);\n  g.setFont(sFont);\n  int padding=4;\n  Rectangle2D bounds=fm.getStringBounds(text,g);\n  int th=(int)bounds.getHeight();\n  int offset=3 * CONNECTION_ARROW_SIZE;\n  int h=((y2 - y1) - (th + 2 * padding)) / 2;\n  if (h <= padding) {\n    g.drawLine(x,y1,x,y2);\n    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);\n    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);\n    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);\n  }\n else {\n    g.drawLine(x,y1,x,y1 + h);\n    g.drawLine(x,y2 - h,x,y2);\n    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);\n    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);\n    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);\n    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);\n    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);\n  }\n}"}
{"ids": "74397", "raw_code": "protected void removeMarkers(){\n  for (int i=markerImage.size(); i > 0; i--) {\n    LocoIcon il=markerImage.get(i - 1);\n    if ((il != null) && (il.isActive())) {\n      markerImage.remove(i - 1);\n      il.remove();\n      il.dispose();\n      setDirty(true);\n    }\n  }\n  super.removeMarkers();\n  repaint();\n}"}
{"ids": "72710", "raw_code": "public IElementType captureString(){\n  CharSequence buffer=getBuffer();\n  int currentPosition=getTokenEnd();\n  setTokenStart(currentPosition);\n  int bufferEnd=getBufferEnd();\n  char openQuote=buffer.charAt(currentPosition);\n  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);\n  boolean quotesDiffer=openQuote != closeQuote;\n  boolean isEscaped=false;\n  int quotesDepth=0;\n  currentPosition++;\n  while (currentPosition < bufferEnd) {\n    char currentChar=buffer.charAt(currentPosition);\n    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {\n      break;\n    }\n    if (!isEscaped && quotesDiffer) {\n      if (currentChar == openQuote) {\n        quotesDepth++;\n      }\n else       if (currentChar == closeQuote) {\n        quotesDepth--;\n      }\n    }\n    isEscaped=!isEscaped && currentChar == '\\\\';\n    currentPosition++;\n  }\n  if (currentPosition < bufferEnd) {\n    currentPosition++;\n  }\n  setTokenEnd(currentPosition);\n  PerlStringLexer stringLexer=getStringLexer();\n  popState();\n  preparsedTokensList.addAll(lexCurrentToken(stringLexer));\n  return getPreParsedToken();\n}"}
{"ids": "6576", "raw_code": "public static String toLocalizedInteger(long value){\n  return NUMBER_FORMAT0.format(value);\n}"}
{"ids": "63902", "raw_code": "protected void sqrtLayout(VisualTable labels){\n  Rectangle2D b=getLayoutBounds();\n  double breadth=getBreadth(b);\n  double span=m_hi - m_lo;\n  double splo=MathLib.safeSqrt(m_prevlo);\n  double spspan=MathLib.safeSqrt(m_prevhi) - splo;\n  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));\n  double slo=MathLib.safeSqrt(m_lo);\n  double sspan=MathLib.safeSqrt(m_hi) - slo;\n  Iterator iter=labels.tuples();\n  while (iter.hasNext()) {\n    VisualItem item=(VisualItem)iter.next();\n    reset(item);\n    double v=item.getDouble(VALUE);\n    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;\n    set(item,x,b);\n  }\n  Index index=labels.index(VALUE);\n  double step=getLinearStep(span,breadth / span);\n  if (step == 0)   step=1;\n  int r;\n  for (double x, v=vlo; v <= m_hi; v+=step) {\n    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;\n    if (x < -0.5) {\n      continue;\n    }\n else     if ((r=index.get(v)) >= 0) {\n      VisualItem item=labels.getItem(r);\n      item.setVisible(true);\n      item.setEndVisible(true);\n    }\n else {\n      VisualItem item=labels.addItem();\n      item.set(LABEL,m_nf.format(v));\n      item.setDouble(VALUE,v);\n      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);\n      if (f <= 0 || f >= 1.0) {\n        item.setStartVisible(true);\n      }\n      set(item,f * breadth,b);\n      set(item,x,b);\n    }\n  }\n}"}
{"ids": "62109", "raw_code": "public static Template create(String value){\n  if (Settings.isFunction(value)) {\n    return new FunctionalTemplate(value);\n  }\n  if (Graph.isRelational(value)) {\n    try {\n      return new RelationalTemplate(value);\n    }\n catch (    Exception e) {\n      log.warning(\"illegal relational structure: \" + value + \")\");\n      return new StringTemplate(value);\n    }\n  }\n else   if (RegexTemplate.isPossibleRegex(value)) {\n    try {\n      if (ArithmeticTemplate.isArithmeticExpression(value)) {\n        return new ArithmeticTemplate(value);\n      }\n      return new RegexTemplate(value);\n    }\n catch (    PatternSyntaxException e) {\n      log.warning(\"illegal pattern: \" + value + \")\");\n      return new StringTemplate(value);\n    }\n  }\n else {\n    return new StringTemplate(value);\n  }\n}"}
{"ids": "66736", "raw_code": "protected boolean customShouldTakeFocus(){\n  if (customArea instanceof Label) {\n    return false;\n  }\n  if (customArea instanceof CLabel) {\n    return (customArea.getStyle() & SWT.NO_FOCUS) > 0;\n  }\n  return true;\n}"}
{"ids": "21397", "raw_code": "private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZones,Map<String,StoragePort> initiatorPortsMap){\n  Map<String,List<Zone>> filteredMap=new HashMap<String,List<Zone>>();\n  Zone zone=null;\n  List<Zone> zones=null;\n  for (  String initiatorWwn : wwnToZones.keySet()) {\n    for (    String portWwn : initiatorPortsMap.keySet()) {\n      zone=_networkScheduler.selectExistingZoneForInitiatorPort(network,initiatorWwn,portWwn,wwnToZones.get(initiatorWwn));\n      if (zone != null) {\n        zones=filteredMap.get(initiatorWwn);\n        if (zones == null) {\n          zones=new ArrayList<>();\n          filteredMap.put(initiatorWwn,zones);\n        }\n        zones.add(zone);\n      }\n    }\n  }\n  return filteredMap;\n}"}
{"ids": "5378", "raw_code": "private void writeJarPostResource(Element postResourceEl,String path){\n  postResourceEl.setAttribute(\"className\",JAR_RESOURCE_SET);\n  postResourceEl.setAttribute(\"base\",path.replace(\"&\",\"&amp;\"));\n}"}
{"ids": "63311", "raw_code": "public void closeFile() throws IOException {\n  file.close();\n  file=null;\n}"}
{"ids": "13525", "raw_code": "public TypedEventListener(EventListener<E> wrappedListener,Class<E> eventClass){\n  this.eventClass=eventClass;\n  this.wrappedListener=wrappedListener;\n}"}
{"ids": "75503", "raw_code": "public static Corleone context(String jobContext){\n  if (jobContext == null || jobContext.equals(\"\")) {\n    throw new IllegalArgumentException(\"Job context must not be null or empty.\");\n  }\n  contexts.clear();\n  contexts.add(jobContext);\n  return getInstance();\n}"}
{"ids": "39196", "raw_code": "public static double info(int counts[]){\n  int total=0;\n  double x=0;\n  for (  int count : counts) {\n    x-=xlogx(count);\n    total+=count;\n  }\n  return x + xlogx(total);\n}"}
{"ids": "67089", "raw_code": "public void addMethod(SootMethod m){\n  checkLevel(SIGNATURES);\n  if (m.isDeclared())   throw new RuntimeException(\"already declared: \" + m.getName());\n  if (subSigToMethods.get(m.getNumberedSubSignature()) != null) {\n    throw new RuntimeException(\"Attempting to add method \" + m.getSubSignature() + \" to class \"+ this+ \", but the class already has a method with that signature.\");\n  }\n  subSigToMethods.put(m.getNumberedSubSignature(),m);\n  methodList.add(m);\n  m.setDeclared(true);\n  m.setDeclaringClass(this);\n}"}
{"ids": "50171", "raw_code": "private void addReplicationFactor(Operation op){\n  op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);\n}"}
{"ids": "6617", "raw_code": "private static Frame showInitialSplash(){\n  Frame splashFrame=null;\n  Image image=null;\n  URL imageURL=getChosenSplashURL();\n  if (imageURL != null) {\n    try {\n      image=ImageIO.read(imageURL);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n    if (image != null) {\n      splashFrame=AWTSplashWindow.splash(image);\n    }\n  }\n  return splashFrame;\n}"}
{"ids": "48564", "raw_code": "protected void decodeLineSuffix(PushbackInputStream inStream,OutputStream outStream) throws IOException {\n  int c;\n  while (true) {\n    c=inStream.read();\n    if (c == -1) {\n      throw new CEStreamExhausted();\n    }\n    if (c == '\\n') {\n      break;\n    }\n    if (c == '\\r') {\n      c=inStream.read();\n      if ((c != '\\n') && (c != -1)) {\n        inStream.unread(c);\n      }\n      break;\n    }\n  }\n}"}
{"ids": "23109", "raw_code": "public void addTransaction(SIPServerTransaction serverTransaction) throws IOException {\n  if (isLoggingEnabled())   stackLogger.logDebug(\"added transaction \" + serverTransaction);\n  serverTransaction.map();\n  addTransactionHash(serverTransaction);\n}"}
{"ids": "66881", "raw_code": "public boolean containsPoly(SootMethod method){\n  return getMethod(method) != null;\n}"}
{"ids": "42904", "raw_code": "public JKTagMapping(final String sourceQName,final String targetQName,final JKNamespace namespace){\n  logger.info(String.format(\"creating TagMapping with sourceTag(%s) and (%s)\",sourceQName,targetQName));\n  this.sourceQName=sourceQName;\n  this.targetQName=targetQName;\n  this.namespace=namespace;\n  this.auto=true;\n}"}
{"ids": "65700", "raw_code": "private void selectAttributeSetInstance(){\n  int m_warehouse_id=getM_Warehouse_ID();\n  int m_product_id=getM_Product_ID();\n  if (m_product_id <= 0)   return;\n  MProduct product=MProduct.get(getCtx(),m_product_id);\n  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);\n  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + \" - \" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);\n  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);\n  if (pai.getM_AttributeSetInstance_ID() != -1) {\n    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());\n    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));\n  }\n else {\n    fAttrSetInstance_ID.setValue(Integer.valueOf(0));\n  }\n}"}
{"ids": "22898", "raw_code": "private void ensureFileOpen(){\n  if (savingDisabled) {\n    Log.e(TAG,\"Saving disabled but tried to ensureFileOpen\");\n    return;\n  }\n  if (saveFileStream != null)   return;\n  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);\n  try {\n    FileOutputStream fileOutput=null;\n    DataOutputStream out=null;\n    if (saveFile.exists()) {\n      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);\n      out=new DataOutputStream(new BufferedOutputStream(fileOutput));\n    }\n else {\n      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);\n      out=new DataOutputStream(new BufferedOutputStream(fileOutput));\n      out.writeInt(TrackPoint.FORMAT_VERSION);\n      savedTrackPoints=0;\n    }\n    saveFileStream=out;\n  }\n catch (  Exception e) {\n    markSavingBroken(\"Failed to open track save file\",e);\n  }\n}"}
{"ids": "68478", "raw_code": "@Override public void stop(Runnable arg0){\n  stop();\n  arg0.run();\n}"}
{"ids": "36189", "raw_code": "protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {\n  int index=0;\n  do {\n    byte readByte=(byte)(0x000000FF & inputStream.read());\n    if (readByte == -1 || readByte == (byte)divider) {\n      return index;\n    }\n    buffer[index]=readByte;\n    index++;\n  }\n while (index < buffer.length);\n  return index;\n}"}
{"ids": "4510", "raw_code": "private void loadUserInfoIntoActionBar(){\n  if (!TextUtils.isEmpty(mWithUserImage)) {\n    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);\n  }\n}"}
{"ids": "51028", "raw_code": "public static Direction directionForArrowKey(KeyEvent e){\n  int index=Math.max(0,Math.min(e.getKeyCode(),KeyEvent.VK_DOWN) - KeyEvent.VK_LEFT);\n  return Direction.values()[index];\n}"}
{"ids": "78622", "raw_code": "public TraceGraph(Collection<Span> spans){\n  this.spansByParent=new SpansByParent(spans);\n  this.spansByTracerId=new SpansByTracerId(spans);\n}"}
{"ids": "79436", "raw_code": "public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){\n  int month, day, year, hour, minute, second;\n  try {\n    month=Integer.parseInt(monthStr);\n    day=Integer.parseInt(dayStr);\n    year=Integer.parseInt(yearStr);\n    hour=Integer.parseInt(hourStr);\n    minute=Integer.parseInt(minuteStr);\n    second=Integer.parseInt(secondStr);\n  }\n catch (  Exception e) {\n    return null;\n  }\n  return toDate(month,day,year,hour,minute,second);\n}"}
{"ids": "26922", "raw_code": "protected void handleMesosFailure(String taskId){\n  int attempt=TaskUtils.getAttemptForTaskId(taskId);\n  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));\n  boolean hasAttemptsLeft=attempt < container.retries;\n  if (hasAttemptsLeft) {\n    LOG.warning(String.format(\"Retrying task: %s, attempt: %d\",container.name,attempt + 1));\n    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);\n    scheduleNewTask(newTaskId);\n  }\n else {\n    LOG.severe(\"Would not restart the job since it is beyond retries: \" + attempt);\n  }\n}"}
{"ids": "25543", "raw_code": "private void updateLtp(SingleChannelElement sce){\n  IndividualChannelStream ics=sce.ics;\n  float saved[]=sce.saved;\n  float savedLtp[]=sce.coeffs;\n  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;\n  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;\n  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {\n    System.arraycopy(saved,0,savedLtp,0,512);\n    Arrays.fill(savedLtp,576,576 + 448,0f);\n    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);\n    for (int i=0; i < 64; i++) {\n      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];\n    }\n  }\n else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {\n    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);\n    Arrays.fill(savedLtp,576,576 + 448,0f);\n    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);\n    for (int i=0; i < 64; i++) {\n      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];\n    }\n  }\n else {\n    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);\n    for (int i=0; i < 512; i++) {\n      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];\n    }\n  }\n  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);\n  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);\n  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);\n}"}
{"ids": "23927", "raw_code": "public static File findConfigInWorkingDirectory(){\n  for (  final String suffix : SUFFIXES) {\n    final File configFile=new File(System.getProperty(\"user.dir\"),PREFIX + suffix);\n    if (configFile.isFile()) {\n      return configFile;\n    }\n  }\n  return null;\n}"}
{"ids": "7712", "raw_code": "@Override public void drawRangeMarker(Graphics2D g2,XYPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){\n  if (marker instanceof ValueMarker) {\n    ValueMarker vm=(ValueMarker)marker;\n    double value=vm.getValue();\n    Range range=rangeAxis.getRange();\n    if (!range.contains(value)) {\n      return;\n    }\n    double v=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());\n    PlotOrientation orientation=plot.getOrientation();\n    Line2D line=null;\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);\n    }\n else {\n      throw new IllegalStateException(\"Unrecognised orientation.\");\n    }\n    final Composite originalComposite=g2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    g2.setPaint(marker.getPaint());\n    g2.setStroke(marker.getStroke());\n    g2.draw(line);\n    String label=marker.getLabel();\n    RectangleAnchor anchor=marker.getLabelAnchor();\n    if (label != null) {\n      Font labelFont=marker.getLabelFont();\n      g2.setFont(labelFont);\n      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);\n      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());\n      g2.setPaint(marker.getLabelBackgroundColor());\n      g2.fill(r);\n      g2.setPaint(marker.getLabelPaint());\n      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(originalComposite);\n  }\n else   if (marker instanceof IntervalMarker) {\n    IntervalMarker im=(IntervalMarker)marker;\n    double start=im.getStartValue();\n    double end=im.getEndValue();\n    Range range=rangeAxis.getRange();\n    if (!(range.intersects(start,end))) {\n      return;\n    }\n    double start2d=rangeAxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());\n    double end2d=rangeAxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());\n    double low=Math.min(start2d,end2d);\n    double high=Math.max(start2d,end2d);\n    PlotOrientation orientation=plot.getOrientation();\n    Rectangle2D rect=null;\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      low=Math.max(low,dataArea.getMinX());\n      high=Math.min(high,dataArea.getMaxX());\n      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      low=Math.max(low,dataArea.getMinY());\n      high=Math.min(high,dataArea.getMaxY());\n      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);\n    }\n    final Composite originalComposite=g2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    Paint p=marker.getPaint();\n    if (p instanceof GradientPaint) {\n      GradientPaint gp=(GradientPaint)p;\n      GradientPaintTransformer t=im.getGradientPaintTransformer();\n      if (t != null) {\n        gp=t.transform(gp,rect);\n      }\n      g2.setPaint(gp);\n    }\n else {\n      g2.setPaint(p);\n    }\n    g2.fill(rect);\n    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {\n      if (orientation == PlotOrientation.VERTICAL) {\n        Line2D line=new Line2D.Double();\n        double x0=dataArea.getMinX();\n        double x1=dataArea.getMaxX();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(x0,start2d,x1,start2d);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(x0,end2d,x1,end2d);\n          g2.draw(line);\n        }\n      }\n else {\n        Line2D line=new Line2D.Double();\n        double y0=dataArea.getMinY();\n        double y1=dataArea.getMaxY();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(start2d,y0,start2d,y1);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(end2d,y0,end2d,y1);\n          g2.draw(line);\n        }\n      }\n    }\n    String label=marker.getLabel();\n    RectangleAnchor anchor=marker.getLabelAnchor();\n    if (label != null) {\n      Font labelFont=marker.getLabelFont();\n      g2.setFont(labelFont);\n      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);\n      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());\n      g2.setPaint(marker.getLabelBackgroundColor());\n      g2.fill(r);\n      g2.setPaint(marker.getLabelPaint());\n      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(originalComposite);\n  }\n}"}
{"ids": "74952", "raw_code": "protected boolean attemptToAddWord(Word word){\n  double additionalLength=word.getWordWidth();\n  additionalLength+=!words.isEmpty() ? spaceSize : 0;\n  if (currentLineLength + additionalLength <= maxLength || maxLength == -1) {\n    words.add(word);\n    currentLineLength+=additionalLength;\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "83647", "raw_code": "@Override public boolean onPreferenceClick(Preference preference){\n  if (preference == mPlayExample) {\n    getSampleText();\n    return true;\n  }\n  return false;\n}"}
{"ids": "23265", "raw_code": "public void readWwwAuthenticateHeader(String header){\n  if (header != null) {\n    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);\n    if (!mIsDigestAuthentication) {\n      return;\n    }\n    String value=getValue(header,\"realm\");\n    mDigest.setRealm(value);\n    value=getValue(header,\"opaque\");\n    mDigest.setOpaque(value);\n    value=getValue(header,\"qop\");\n    mDigest.setQop(value);\n    value=getValue(header,\"nonce\");\n    mDigest.setNextnonce(value);\n  }\n}"}
{"ids": "4326", "raw_code": "public static String valueOf(Boolean value){\n  return value != null ? String.valueOf(value) : null;\n}"}
{"ids": "42165", "raw_code": "public AllocationSite(int line,int column){\nsynchronized (sites) {\n    this.id=sites.size();\n    sites.add(this);\n  }\n  this.line=line;\n  this.column=column;\n}"}
{"ids": "26954", "raw_code": "public final static int parseInt(char[] digitChars,int offset,int len){\n  int num=digitChars[offset] - '0';\n  len+=offset;\n  if (++offset < len) {\n    num=(num * 10) + (digitChars[offset] - '0');\n    if (++offset < len) {\n      num=(num * 10) + (digitChars[offset] - '0');\n      if (++offset < len) {\n        num=(num * 10) + (digitChars[offset] - '0');\n        if (++offset < len) {\n          num=(num * 10) + (digitChars[offset] - '0');\n          if (++offset < len) {\n            num=(num * 10) + (digitChars[offset] - '0');\n            if (++offset < len) {\n              num=(num * 10) + (digitChars[offset] - '0');\n              if (++offset < len) {\n                num=(num * 10) + (digitChars[offset] - '0');\n                if (++offset < len) {\n                  num=(num * 10) + (digitChars[offset] - '0');\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return num;\n}"}
{"ids": "39526", "raw_code": "public ActivityMonitorSample(){\n  initComponents();\n  ownerARadio.setActionCommand(\"A\");\n  ownerBRadio.setActionCommand(\"B\");\n  ownerCRadio.setActionCommand(\"C\");\n  indicatorA.setActivityOwner(\"A\");\n  indicatorB.setActivityOwner(\"B\");\n  indicatorC.setActivityOwner(\"C\");\n  JActivityWindow.getInstance();\n}"}
{"ids": "74686", "raw_code": "public static LatLon[] greatCircleExtremeLocations(LatLon location,Angle azimuth){\n  if (location == null) {\n    throw new IllegalArgumentException(\"Location Is Null\");\n  }\n  if (azimuth == null) {\n    throw new IllegalArgumentException(\"Azimuth Is Null\");\n  }\n  double lat0=location.getLatitude().radians;\n  double az=azimuth.radians;\n  double tanDistance=-Math.tan(lat0) / Math.cos(az);\n  double distance=Math.atan(tanDistance);\n  Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0));\n  Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0));\n  return new LatLon[]{greatCircleEndPosition(location,azimuth,extremeDistance1),greatCircleEndPosition(location,azimuth,extremeDistance2)};\n}"}
{"ids": "23027", "raw_code": "private void initCheckbox(CheckBoxPreference checkbox,boolean checked,boolean enabled){\n  checkbox.setChecked(checked);\n  checkbox.setEnabled(enabled);\n}"}
{"ids": "43973", "raw_code": "public static int findURISplitIndex(String uri){\n  int uriLength=uri.length();\n  int idx=uriLength - 1;\n  for (; idx >= 0; idx--) {\n    if (!TurtleUtil.isNameChar(uri.charAt(idx))) {\n      break;\n    }\n  }\n  idx++;\n  for (; idx < uriLength; idx++) {\n    if (TurtleUtil.isNameStartChar(uri.charAt(idx))) {\n      break;\n    }\n  }\n  if (!TurtleUtil.isNameEndChar(uri.charAt(uriLength - 1))) {\n    return -1;\n  }\n  if (idx > 0 && idx < uriLength) {\n    return idx;\n  }\n  return -1;\n}"}
{"ids": "66214", "raw_code": "private void writeLog(String cmd){\n  try {\n    if (m_writer == null) {\n      File file=File.createTempFile(\"create\",\".log\");\n      m_writer=new PrintWriter(new FileWriter(file));\n      log.info(file.toString());\n    }\n    m_writer.println(cmd);\n    m_writer.flush();\n  }\n catch (  Exception e) {\n    log.severe(e.toString());\n  }\n}"}
{"ids": "12249", "raw_code": "public void reload(String why){\n  mFullPhotoPaths=mRootDir.list(MediaScanner.JPG_FILENAME_FILTER);\n  if ((mFullPhotoPaths != null) && (mFullPhotoPaths.length == 0)) {\n    mFullPhotoPaths=null;\n    Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + \"AdapterArrayHelper.refreshLocal(\"+ mRootDir+ \") \"+ 0);\n  }\n else   if (mFullPhotoPaths != null) {\n    if (Global.debugEnabled) {\n      Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + \"AdapterArrayHelper.refreshLocal(\"+ mRootDir+ \") \"+ mFullPhotoPaths.length);\n    }\n    String parentDirString=mRootDir.getAbsolutePath();\n    for (int i=0; i < mFullPhotoPaths.length; i++) {\n      mFullPhotoPaths[i]=parentDirString + \"/\" + mFullPhotoPaths[i];\n    }\n  }\n}"}
{"ids": "13213", "raw_code": "protected void addContentSpecToElement(XMLElementDecl elementDecl){\n  if ((fDepth == 0 || (fDepth == 1 && elementDecl.type == XMLElementDecl.TYPE_MIXED)) && fNodeIndexStack != null) {\n    if (elementDecl.type == XMLElementDecl.TYPE_MIXED) {\n      int pcdata=addUniqueLeafNode(null);\n      if (fNodeIndexStack[0] == -1) {\n        fNodeIndexStack[0]=pcdata;\n      }\n else {\n        fNodeIndexStack[0]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_CHOICE,pcdata,fNodeIndexStack[0]);\n      }\n    }\n    setContentSpecIndex(fCurrentElementIndex,fNodeIndexStack[fDepth]);\n  }\n}"}
{"ids": "47665", "raw_code": "private void growSpine(){\n  spine=new int[(spine.length << 1) + 1];\n  threshold=(int)(spine.length * loadFactor);\n  Arrays.fill(spine,-1);\n  for (int i=0; i < size; i++) {\n    insert(objs[i],i);\n  }\n}"}
{"ids": "73769", "raw_code": "public void reconnect(){\n  if (opened && !allowConnectionRecovery) {\n    return;\n  }\n  reconnectwait thread=new reconnectwait();\n  thread.start();\n  try {\n    thread.join();\n  }\n catch (  InterruptedException e) {\n    log.error(\"Unable to join to the reconnection thread \" + e.getMessage());\n  }\n  if (!opened) {\n    log.error(\"Failed to re-establish connectivity\");\n  }\n else {\n    log.info(\"Reconnected to \" + getCurrentPortName());\n    resetupConnection();\n  }\n}"}
{"ids": "32111", "raw_code": "public Collection<GridPortRecord> records(){\nsynchronized (recs) {\n    return Collections.unmodifiableCollection(new ArrayList<>(recs));\n  }\n}"}
{"ids": "27066", "raw_code": "public float distanceToOtherCircle(Circle circle){\n  return (float)Math.abs(Math.sqrt(Math.pow(circle.center.x - center.x,2) + Math.pow(circle.center.y - center.y,2)));\n}"}
{"ids": "31008", "raw_code": "public SimpleCommand(String commandName,String... args){\n  this(commandName,(Argument)null);\n  ArrayList<Argument> argList=new ArrayList<Argument>();\n  for (  String arg : args)   argList.add(new Argument(arg));\n  _arguments=argList.toArray(new Argument[0]);\n}"}
{"ids": "65140", "raw_code": "public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){\n  super(selectionModifiers);\n  this.addToSelectionModifiers=addToSelectionModifiers;\n  this.lensPaintable=new LensPaintable();\n  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\n}"}
{"ids": "83850", "raw_code": "public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){\n  int[] results=new int[nodes.length];\n  Arrays.fill(results,intialValue);\n  boolean[] alreadyScanned=new boolean[nodes.length];\n  Arrays.fill(alreadyScanned,false);\n  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);\n  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);\n  return results;\n}"}
{"ids": "30830", "raw_code": "private boolean announce(String[] groups){\n  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {\n    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();\n    Discovery disco;\n    try {\n      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());\n    }\n catch (    DiscoveryProtocolException e) {\n      throw new AssertionError(e);\n    }\n    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());\n    while (ei.hasNext()) {\n      try {\n        packets.addAll(Arrays.asList(ei.next()));\n      }\n catch (      Exception e) {\n        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,\"exception encoding multicast\" + \" announcement\",e);\n      }\n    }\n    lastLocator=myLocator;\n    lastGroups=groups;\n    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);\n  }\n  try {\n    send(dataPackets);\n  }\n catch (  InterruptedIOException e) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "11155", "raw_code": "public DrawingAttributes(){\n  propertyChangeSupport=new PropertyChangeSupport(this);\n}"}
{"ids": "14666", "raw_code": "static void createPolicyTree(String configName,String configId,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException {\n  try {\n    ServiceConfig pConfig=scm.getOrganizationConfig(org,null);\n    if (pConfig == null) {\n      scm.createOrganizationConfig(org,null);\n      pConfig=scm.getOrganizationConfig(org,null);\n    }\n    pConfig.addSubConfig(configName,configId,0,null);\n  }\n catch (  ServiceAlreadyExistsException se) {\n    if (debug.messageEnabled()) {\n      debug.message(\"PolicyManager->createPolicyTree: Name: \" + configName + \" ID: \"+ configId+ \" Policy service already exists under org->\"+ org);\n    }\n  }\ncatch (  SMSException e) {\n    String[] objs={org};\n    if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {\n      throw (new NoPermissionException(ResBundleUtils.rbName,\"insufficient_access_rights\",null));\n    }\n else {\n      throw (new PolicyException(ResBundleUtils.rbName,\"unable_to_create_policy_for_org\",objs,e));\n    }\n  }\n}"}
{"ids": "21554", "raw_code": "private void rollbackMethodForCreateSnapshot(boolean isSnapshotCreated,boolean isDummyLunPathAdded,HDSApiClient hdsApiClient,StorageSystem storage,URI snapshot) throws Exception {\n  if (isDummyLunPathAdded) {\n    log.info(\"Remove dummy path while doing roll back\");\n    hdsProtectionOperations.removeDummyLunPath(storage,snapshot);\n  }\n  if (isSnapshotCreated) {\n    log.info(\"Remove snapshot volume for roll back\");\n    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);\n    String systemObjectID=HDSUtils.getSystemObjectID(storage);\n    String logicalUnitObjId=HDSUtils.getLogicalUnitObjectId(snapshotObj.getNativeId(),storage);\n    hdsApiClient.deleteSnapshotVolume(systemObjectID,logicalUnitObjId,storage.getModel());\n  }\n}"}
{"ids": "85664", "raw_code": "public static int convertStringToTimeSeconds(String time){\n  int result=0;\n  if (time.endsWith(\"H\")) {\n    int hoursToAdd=Integer.valueOf(StringUtils.remove(time,'H'));\n    result=(60 * 60) * hoursToAdd;\n  }\n else   if (time.endsWith(\"M\")) {\n    int minsToAdd=Integer.valueOf(StringUtils.remove(time,'M'));\n    result=60 * minsToAdd;\n  }\n else   if (time.endsWith(\"S\")) {\n    int secsToAdd=Integer.valueOf(StringUtils.remove(time,'S'));\n    result=secsToAdd;\n  }\n  return result;\n}"}
{"ids": "55879", "raw_code": "public void readPrefs(SharedPreferences settings,ActionFactory factory){\n  boolean visible=false;\n  String actionId=settings.getString(\"button_action_\" + name + \"_0\",\"\");\n  mainAction=factory.getAction(actionId);\n  if (mainAction != null)   visible=true;\n  menuActions.clear();\n  for (int i=0; i < maxMenuActions; i++) {\n    actionId=settings.getString(\"button_action_\" + name + \"_\"+ (i + 1),\"\");\n    UIAction a=factory.getAction(actionId);\n    if (a != null)     visible=true;\n    menuActions.add(a);\n  }\n  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);\n}"}
{"ids": "64325", "raw_code": "public boolean addToActiveList(DownloadInfoRunnable downloadInfoRunnable){\n  return activeListHasRoom() && mActiveList.add(downloadInfoRunnable);\n}"}
{"ids": "80894", "raw_code": "private void addExprToTLA(TLAExpr expr){\n  Vector sv=expr.toStringVector();\n  Vector exprMapping=expr.toMappingVector();\n  int indent=tlacodeNextLine.length();\n  int nextLine=0;\n  if (indent != 0) {\n    MappingObject.shiftMappingVector(exprMapping,indent);\n    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));\n    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));\n    nextLine=1;\n    if (sv.size() > 1) {\n      endCurrentLineOfTLA();\n    }\n  }\n  if (sv.size() > 1) {\n    String spaces=NSpaces(indent);\n    while (nextLine < sv.size() - 1) {\n      tlacode.addElement(spaces + ((String)sv.elementAt(nextLine)));\n      mappingVector.addElement((Vector)exprMapping.elementAt(nextLine));\n      nextLine++;\n    }\n    tlacodeNextLine=spaces + ((String)sv.elementAt(nextLine));\n    mappingVectorNextLine=(Vector)exprMapping.elementAt(nextLine);\n  }\n else   if (indent == 0) {\n    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));\n    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));\n  }\n}"}
{"ids": "33055", "raw_code": "private boolean isUpperCaseCamelCaseHunk(String hunk){\n  if (hunk.length() < 2)   return false;\n  for (int i=0; i < hunk.length(); i++) {\n    if (!isLegalChar(hunk.charAt(i)))     return false;\n  }\n  return true;\n}"}
{"ids": "62931", "raw_code": "public void type(String string){\n  for (int i=0; i < string.length(); i++) {\n    char c=string.charAt(i);\n    type(c);\n  }\n}"}
{"ids": "33409", "raw_code": "public boolean providesIdentifier(){\n  return false;\n}"}
{"ids": "28231", "raw_code": "static void removeRedundantAffix(TranslatorUtils.IContain iContain,List<String> strList){\n  if (strList.size() <= 1) {\n    return;\n  }\n  int w=0;\n  for (  String str : strList) {\n    if (w == 0 || !iContain.containFunc(str,strList.get(w - 1))) {\n      strList.set(w,str);\n      w++;\n    }\n  }\n  strList=strList.subList(0,w);\n}"}
{"ids": "3975", "raw_code": "public static int nextInt(int n){\n  Random random=getRandom();\n  int value=random.nextInt(n);\n  if (!_isTest)   _freeRandomList.free(random);\n  return value;\n}"}
{"ids": "40743", "raw_code": "protected void doResumeUpdates(){\n  Calendar cal=Calendar.getInstance(Locale.getDefault());\n  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;\n  mShowWeekNumber=false;\n  updateHeader();\n  goTo(mSelectedDay.toMillis(true),false,false,false);\n  mAdapter.setSelectedDay(mSelectedDay);\n  mTodayUpdater.run();\n}"}
{"ids": "80387", "raw_code": "private void storeLastUsed(){\n  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));\n}"}
{"ids": "76124", "raw_code": "private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){\n  int childTypes=child.types;\n  int contents=top.contents;\n  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);\n  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {\n    if (containerIndex < 0) {\n      contents|=transparencyAllowed;\n      break;\n    }\n    ElementContainmentInfo container=openElements.get(containerIndex);\n    contents|=transparencyAllowed & container.contents;\n    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;\n  }\n  return (contents & childTypes) != 0;\n}"}
{"ids": "9551", "raw_code": "public static int[] extractArcs(ASN1ObjectIdentifier oid) throws InvalidObjectIdException {\n  String oidStr=oid.getId();\n  StringTokenizer strTokCnt=new StringTokenizer(oidStr,\".\",false);\n  int arcCount=strTokCnt.countTokens();\n  StringTokenizer strTok=new StringTokenizer(oidStr,\".\",true);\n  boolean expectDelimiter=false;\n  int[] arcs=new int[arcCount];\n  int i=0;\n  while (strTok.hasMoreTokens()) {\n    String token=strTok.nextToken();\n    if (expectDelimiter && (!token.equals(\".\") || !strTok.hasMoreTokens())) {\n      throw new InvalidObjectIdException(res.getString(\"InvalidOidNotNonNegativeIntSequence.exception.message\"));\n    }\n else     if (!expectDelimiter) {\n      try {\n        arcs[i]=Integer.parseInt(token);\n        if (arcs[i] < 0) {\n          throw new InvalidObjectIdException(res.getString(\"InvalidOidNotNonNegativeIntSequence.exception.message\"));\n        }\n        i++;\n      }\n catch (      NumberFormatException ex) {\n        throw new InvalidObjectIdException(res.getString(\"InvalidOidNotNonNegativeIntSequence.exception.message\"));\n      }\n    }\n    expectDelimiter=!expectDelimiter;\n  }\n  return arcs;\n}"}
{"ids": "37744", "raw_code": "protected void updateStatsForConditionalDensityEstimator(ConditionalDensityEstimator classifier,Instance classMissing,double classValue) throws Exception {\n  if (m_PriorEstimator == null) {\n    setNumericPriorsFromBuffer();\n  }\n  m_SumSchemeEntropy-=classifier.logDensity(classMissing,classValue) * classMissing.weight() / Utils.log2;\n  m_SumPriorEntropy-=m_PriorEstimator.logDensity(classValue) * classMissing.weight() / Utils.log2;\n}"}
{"ids": "30596", "raw_code": "public ClusterPolicy createClusterPolicy(String clusterMemberName) throws CreateException {\n  long time1=System.currentTimeMillis();\n  if (_clusterPolicies == null) {\n    _clusterMemberNames=getClusterMemberNames();\n    if (_clusterMemberNames != null && _clusterMemberNames.length > 0) {\n      _clusterPolicies=new HashMap<String,ClusterPolicy>();\n      ClusterPolicy[] tempPolicy=new ClusterPolicy[_clusterMemberNames.length];\n      for (int i=0; i < _clusterMemberNames.length; i++)       tempPolicy[i]=createClusterPolicyInternal(_clusterMemberNames[i]);\n      ArrayList<ReplicationPolicy> selectedReplPolicies=new ArrayList<ReplicationPolicy>(_clusterMemberNames.length);\n      List<String> selectedReplGroupNames=new ArrayList<String>(_clusterMemberNames.length);\n      for (int i=0; i < tempPolicy.length; i++)       if (tempPolicy[i].m_ReplicationPolicy != null && !selectedReplGroupNames.contains(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName)) {\n        selectedReplPolicies.add(tempPolicy[i].m_ReplicationPolicy);\n        selectedReplGroupNames.add(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName);\n      }\n      if (selectedReplPolicies.isEmpty())       selectedReplPolicies=null;\n else       selectedReplPolicies.trimToSize();\n      for (int i=0; i < _clusterMemberNames.length; i++) {\n        tempPolicy[i].m_ReplicationGroups=selectedReplPolicies;\n        _clusterPolicies.put(_clusterMemberNames[i],tempPolicy[i]);\n      }\n    }\n  }\n  ClusterPolicy result=_clusterPolicies.get(clusterMemberName);\n  if (result == null)   result=createClusterPolicyInternal(clusterMemberName);\n  long time2=System.currentTimeMillis();\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.fine(\"Creation of ClusterPolicy instance for \\\"\" + clusterMemberName + \"\\\" cluster member took \"+ (time2 - time1)+ \" msec.\");\n  }\n  return result;\n}"}
{"ids": "53505", "raw_code": "public static boolean compareDoubles(double a,double b){\n  if (Double.isNaN(a) && Double.isNaN(b))   return true;\n  if (!Double.isInfinite(a) && !Double.isInfinite(b))   return Math.abs(a - b) <= EPSILON;\n  return a == b;\n}"}
{"ids": "30262", "raw_code": "public static double logOfBase(double number,int base){\n  return Math.log(number) / Math.log(base);\n}"}
{"ids": "60393", "raw_code": "public FileSaverDescriptor(@NotNull String title,@NotNull String description,String... extensions){\n  super(true,true,true,true,false,false);\n  setTitle(title);\n  setDescription(description);\n  this.extensions=Arrays.asList(extensions);\n}"}
{"ids": "42096", "raw_code": "public void addRun(final Run run){\n  runs.add(run);\n  run.setId(runIdCounter++);\n}"}
{"ids": "16113", "raw_code": "void copyInto(Converter[] converters){\n  System.arraycopy(iConverters,0,converters,0,iConverters.length);\n}"}
{"ids": "74049", "raw_code": "@Override public boolean addOutputSensor(String sensorName,int state){\n  OutputSensor outputSensor=new OutputSensor(sensorName);\n  if (!outputSensor.setState(state)) {\n    return false;\n  }\n  _outputSensorList.add(outputSensor);\n  return true;\n}"}
{"ids": "3733", "raw_code": "public void init(SocketChannel channel){\n  _channel=channel;\n  _readBuffer.clear();\n  _readBuffer.flip();\n  _needsFlush=false;\n}"}
{"ids": "49858", "raw_code": "public void reset(){\n  Timber.i(\"resetting QueuedMediaPlayer...\");\n  mCurrentPlayer.reset();\n  mNextPlayer.reset();\n  mQueue=Collections.emptyList();\n  mQueueIndex=0;\n  mRequestedSeekPosition=0;\n  mPlayWhenPrepared=false;\n}"}
{"ids": "8000", "raw_code": "@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){\n  if (this.value != null)   consumer.accept(this.value);\n  return this;\n}"}
{"ids": "73659", "raw_code": "protected void sendIntensity(double intensity){\n  if (log.isDebugEnabled()) {\n    log.debug(\"sendIntensity(\" + intensity + \")\"+ \" lastOutputStep: \"+ lastOutputStep+ \" maxDimStep: \"+ maxDimStep);\n  }\n  int newStep=(int)Math.round(intensity * maxDimStep);\n  if ((newStep < 0) || (newStep > maxDimStep)) {\n    log.error(\"newStep wrong: \" + newStep + \" intensity: \"+ intensity);\n  }\n  if (newStep == 0) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"intensity \" + intensity + \" within current step, return\");\n    }\n    return;\n  }\n  X10Sequence out=new X10Sequence();\n  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);\n  tc.sendX10Sequence(out,null);\n  lastOutputStep=newStep;\n  if (log.isDebugEnabled()) {\n    log.debug(\"sendIntensity(\" + intensity + \") house \"+ X10Sequence.houseValueToText(housecode)+ \" device \"+ devicecode+ \" newStep: \"+ newStep);\n  }\n}"}
{"ids": "79156", "raw_code": "public GlowScheduler(GlowServer server,WorldScheduler worlds){\n  this.server=server;\n  this.worlds=worlds;\n  inTickTaskCondition=worlds.getAdvanceCondition();\n  tickEndRun=null;\n  primaryThread=Thread.currentThread();\n}"}
{"ids": "42580", "raw_code": "public void characters(char[] ch,int start,int length) throws SAXException {\n  try {\n    stopTerminator();\n    if (w == null)     return;\n    int end=start + length;\n    for (int i=start; i < end; i++) {\n      char c=ch[i];\nswitch (c) {\ncase '&':\n        w.write(\"&amp;\");\n      break;\ncase '<':\n    w.write(\"&lt;\");\n  break;\ncase '>':\nw.write(\"&gt;\");\nbreak;\ncase '\\n':\ncase '\\r':\ncase '\\t':\nw.write(c);\nbreak;\ndefault :\nif (canEncode(c)) {\nw.write(c);\n}\n else {\nw.write(\"&#\");\nw.write(Integer.toString(c));\nw.write(\";\");\n}\nbreak;\n}\n}\n}\n catch (IOException e) {\nthrow new SAXException(e);\n}\n}"}
{"ids": "42685", "raw_code": "public static String toHumanReadableString(final String iso8601Duration){\n  String str=\"\";\n  if (iso8601Duration.matches(\"P\\\\d+[YMD].+\")) {\n    str=\"inf.\";\n  }\n else {\n    String hours=getHours(iso8601Duration), minutes=getMinutes(iso8601Duration), seconds=getSeconds(iso8601Duration);\n    if (hours != null) {\n      str=hours;\n      if (minutes != null && minutes.length() == 1) {\n        minutes=\"0\" + minutes;\n      }\n    }\n    if (str.isEmpty())     str=minutes;\n else     str+=\":\" + minutes;\n    if (str.isEmpty())     str=seconds;\n else     str+=\":\" + seconds;\n  }\n  return str;\n}"}
{"ids": "23232", "raw_code": "@Override public IChatMessage sendMessage(final String text) throws RemoteException {\n  if (TextUtils.isEmpty(text)) {\n    throw new ServerApiIllegalArgumentException(\"GroupChat message must not be null or empty!\");\n  }\n  int messageLength=text.length();\n  int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength();\n  if (messageLength > maxMessageLength) {\n    throw new ServerApiIllegalArgumentException(\"chat message length: \" + messageLength + \" exceeds max group chat message length: \"+ maxMessageLength+ \"!\");\n  }\n  if (!isAllowedToSendMessage()) {\n    throw new ServerApiPermissionDeniedException(\"Not allowed to send GroupChat message on the connected IMS server!\");\n  }\n  try {\n    mImService.removeGroupChatComposingStatus(mChatId);\n    long timestamp=System.currentTimeMillis();\n    final ChatMessage msg=ChatUtils.createTextMessage(null,text,timestamp,timestamp);\n    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),text,msg.getMimeType(),mChatId,Direction.OUTGOING);\n    addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);\n    if (!mChatService.isGroupChatActive(mChatId)) {\n      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);\n    }\n    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);\n    return new ChatMessageImpl(persistedStorage);\n  }\n catch (  ServerApiBaseException e) {\n    if (!e.shouldNotBeLogged()) {\n      sLogger.error(ExceptionUtil.getFullStackTrace(e));\n    }\n    throw e;\n  }\ncatch (  Exception e) {\n    sLogger.error(ExceptionUtil.getFullStackTrace(e));\n    throw new ServerApiGenericException(e);\n  }\n}"}
{"ids": "30017", "raw_code": "public DockNodeEventHandler(Node node){\n  this.node=node;\n}"}
{"ids": "56371", "raw_code": "private int readSourceToLog(Settings settings){\n  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,\"1000\");\n  try {\n    return Integer.parseInt(sourceToLog,10);\n  }\n catch (  NumberFormatException e) {\n    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;\n  }\n}"}
{"ids": "21107", "raw_code": "private void deleteCurrentLicenseFileOnDisk(){\n  File licenseFile=new File(LicenseConstants.LICENSE_FILE_PATH);\n  if (licenseFile.exists()) {\n    licenseFile.delete();\n  }\n}"}
{"ids": "35409", "raw_code": "public static Path createDirectory(final Path parent,final String folderName){\n  final File file=new File(parent.toFile(),folderName);\n  if (!file.exists()) {\n    if (!file.mkdir()) {\n      throw new RuntimeException(\"Error while trying to create folder at \" + parent + \" with \"+ folderName+ \".\");\n    }\n  }\n  file.deleteOnExit();\n  return file.toPath();\n}"}
{"ids": "34472", "raw_code": "protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){\n  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();\n  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();\n  for (  UnitInterface unit : units) {\n    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);\n    allFunctions.addAll(unitFunctions);\n    for (    FunctionInterface unitFunction : unitFunctions) {\n      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {\n        usedFunctions.add(usedFunction);\n      }\n    }\n  }\n  allFunctions.removeAll(usedFunctions);\n  return allFunctions;\n}"}
{"ids": "14363", "raw_code": "private static void addItemsToList(int startIndex,int endIndex){\n  for (int i=startIndex; i < endIndex; i++) {\n    values.add(new Integer(i));\n  }\n}"}
{"ids": "42857", "raw_code": "public static synchronized List<Proxy> noProxyList(){\n  if (noProxyList == null) {\n    ArrayList<Proxy> list=new ArrayList<Proxy>(1);\n    list.add(Proxy.NO_PROXY);\n    noProxyList=Collections.unmodifiableList(list);\n  }\n  return noProxyList;\n}"}
{"ids": "86781", "raw_code": "public void tallyVariant(VcfHeader header,VcfRecord rec){\n  tallyVariant(rec,header.getSampleNames());\n}"}
{"ids": "71923", "raw_code": "public LDIFEntryReader(final String... ldifLines){\n  super(Arrays.asList(ldifLines));\n}"}
{"ids": "83238", "raw_code": "public void updatePresonInfo(){\n  this.leftPerson=person2LeavingPersonInfo.get(this.personId);\n  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);\n}"}
{"ids": "15405", "raw_code": "public void presentLicenses(boolean preAccept){\n  LicenseSet licenses=licenseModule.getRequiredLicenses();\n  if (preAccept) {\n    licenses.acceptAll();\n  }\n else {\n    for (    License license : licenses) {\n      if (license.isAccepted()) {\n        continue;\n      }\n      user.show(\"\");\n      user.show(license.getLicenseText());\n      String input=user.ask(\"prompt\");\n      if (input != null && YES.startsWith(input.toLowerCase())) {\n        license.accept();\n      }\n else {\n        license.reject();\n      }\n    }\n  }\n}"}
{"ids": "10877", "raw_code": "public void addGeoKey(XTIFFField geoKey){\n  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);\n  hasGeoKeys=true;\n}"}
{"ids": "5745", "raw_code": "public static GeoTimeSerie detect(GeoTimeSerie gts,int alphabetSize,int wordLen,int windowLen,Collection<String> patterns,boolean standardizePAA) throws WarpScriptException {\n  GeoTimeSerie gtsPatterns=GTSHelper.bSAX(gts,alphabetSize,wordLen,windowLen,standardizePAA);\n  GTSHelper.sort(gtsPatterns);\n  GeoTimeSerie detected=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,16);\n  detected.setMetadata(gts.getMetadata());\n  int lastidx=-1;\n  for (int i=0; i < gtsPatterns.values; i++) {\n    if (!patterns.contains(gtsPatterns.stringValues[i])) {\n      continue;\n    }\n    for (int j=0; j < windowLen; j++) {\n      if (i + j > lastidx) {\n        lastidx=i + j;\n        GTSHelper.setValue(detected,GTSHelper.tickAtIndex(gts,lastidx),GTSHelper.locationAtIndex(gts,lastidx),GTSHelper.elevationAtIndex(gts,lastidx),GTSHelper.valueAtIndex(gts,lastidx),false);\n      }\n    }\n  }\n  return detected;\n}"}
{"ids": "52801", "raw_code": "private StringBuilder debugDumpCandidates(StringBuilder msg,List<? extends Itemset> candidates,VectorFieldTypeInformation<BitVector> meta){\n  msg.append(':');\n  for (  Itemset itemset : candidates) {\n    msg.append(\" [\");\n    itemset.appendTo(msg,meta);\n    msg.append(']');\n  }\n  return msg;\n}"}
{"ids": "42092", "raw_code": "public void addOutboundRule(final OutboundRule outboundRule){\n  outboundRule.setId(outboundRuleIdCounter++);\n  outboundRules.add(outboundRule);\n}"}
{"ids": "63970", "raw_code": "public Skype(String username,String password){\n  this.username=username;\n  this.password=password;\n}"}
{"ids": "49083", "raw_code": "private void addFlags(int newflags){\n  flags=getLayoutFlags() | newflags;\n}"}
{"ids": "9615", "raw_code": "public static String matchCertificate(KeyStore keyStore,X509Certificate cert) throws CryptoException {\n  try {\n    for (Enumeration aliases=keyStore.aliases(); aliases.hasMoreElements(); ) {\n      String alias=(String)aliases.nextElement();\n      if (keyStore.isCertificateEntry(alias)) {\n        X509Certificate compCert=X509CertUtil.convertCertificate(keyStore.getCertificate(alias));\n        if (cert.equals(compCert)) {\n          return alias;\n        }\n      }\n    }\n    return null;\n  }\n catch (  KeyStoreException ex) {\n    throw new CryptoException(res.getString(\"NoMatchCertificate.exception.message\"),ex);\n  }\n}"}
{"ids": "78110", "raw_code": "void purgeLastArticles(int amountToPurge){\n  if (!isDBAvailable())   return;\n  long time=System.currentTimeMillis();\n  String query=\"_id IN ( SELECT _id FROM \" + TABLE_ARTICLES + \" WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET \"+ (Utils.ARTICLE_LIMIT - amountToPurge + \")\");\n  safelyDeleteArticles(query,null);\n  Log.d(TAG,\"purgeLastArticles took \" + (System.currentTimeMillis() - time) + \"ms\");\n}"}
{"ids": "41815", "raw_code": "public void reclaimViews(List<View> views){\n  int childCount=getChildCount();\n  RecyclerListener listener=mRecycler.mRecyclerListener;\n  for (int i=0; i < childCount; i++) {\n    View child=getChildAt(i);\n    TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();\n    if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {\n      views.add(child);\n      if (listener != null) {\n        listener.onMovedToScrapHeap(child);\n      }\n    }\n  }\n  mRecycler.reclaimScrapViews(views);\n  removeAllViewsInLayout();\n}"}
{"ids": "30876", "raw_code": "ProxyVerifier(TxnManager serverProxy,Uuid proxyID){\n  if (!(serverProxy instanceof RemoteMethodControl)) {\n    throw new UnsupportedOperationException(\"No verifier available for non-constrainable service\");\n  }\n else   if (!(serverProxy instanceof TrustEquivalence)) {\n    throw new UnsupportedOperationException(\"Verifier requires service proxy to implement \" + \"TrustEquivalence\");\n  }\n else   if (proxyID == null) {\n    throw new IllegalArgumentException(\"Proxy id cannot be null\");\n  }\n  this.serverProxy=(RemoteMethodControl)serverProxy;\n  this.proxyID=proxyID;\n}"}
{"ids": "71796", "raw_code": "public void paint(Graphics g){\n  g.translate(0,translateY);\n  super.paint(g);\n}"}
{"ids": "72368", "raw_code": "private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {\n  final long result=a + b;\n  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {\n    throw new MathRuntimeException(pattern,a,b);\n  }\n  return result;\n}"}
{"ids": "85097", "raw_code": "private void serializeCompactRDFGeneralQualifier(int indent,XMPNode node) throws IOException, XMPException {\n  write(\" rdf:parseType=\\\"Resource\\\">\");\n  writeNewline();\n  serializeCanonicalRDFProperty(node,false,true,indent + 1);\n  for (Iterator iq=node.iterateQualifier(); iq.hasNext(); ) {\n    XMPNode qualifier=(XMPNode)iq.next();\n    serializeCanonicalRDFProperty(qualifier,false,false,indent + 1);\n  }\n}"}
{"ids": "44852", "raw_code": "private JCheckBox addCheckbox(String text,Container container){\n  JCheckBox checkbox=new JCheckBox(text);\n  checkbox.setAlignmentX(Component.LEFT_ALIGNMENT);\n  checkbox.setBorder(BorderFactory.createEmptyBorder(0,0,10,5));\n  container.add(checkbox);\n  return checkbox;\n}"}
{"ids": "68817", "raw_code": "public void push(){\n  state.cliprgn=g.getClipBounds();\n  stack.push(state);\n  state=(GraphicsState)state.clone();\n}"}
{"ids": "19628", "raw_code": "public synchronized int add(IAudioProcessor processor){\n  processors.add(processor);\n  buildFinalProcessor();\n  return processors.indexOf(processor);\n}"}
{"ids": "40177", "raw_code": "public ScriptBuilder data(int index,byte[] data){\n  byte[] copy=Arrays.copyOf(data,data.length);\n  int opcode;\n  if (data.length == 0) {\n    opcode=OP_0;\n  }\n else   if (data.length == 1) {\n    byte b=data[0];\n    if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b);\n else     opcode=1;\n  }\n else   if (data.length < OP_PUSHDATA1) {\n    opcode=data.length;\n  }\n else   if (data.length < 256) {\n    opcode=OP_PUSHDATA1;\n  }\n else   if (data.length < 65536) {\n    opcode=OP_PUSHDATA2;\n  }\n else {\n    throw new RuntimeException(\"Unimplemented\");\n  }\n  return addChunk(index,new ScriptChunk(opcode,copy));\n}"}
{"ids": "68399", "raw_code": "public static boolean isEmbeddedBase64Image(String uri){\n  return (uri != null && uri.startsWith(\"data:image/\"));\n}"}
{"ids": "45984", "raw_code": "void changeState(int newState){\n  int oldState;\nsynchronized (stateLock) {\n    if (state == newState)     return;\n    oldState=state;\n    state=newState;\n    stateLock.notifyAll();\n  }\n  sendStateChangeNotification(oldState,newState);\n}"}
{"ids": "59706", "raw_code": "private int parseLinkLabel(){\n  String m=match(LINK_LABEL);\n  return m == null ? 0 : m.length();\n}"}
{"ids": "50322", "raw_code": "private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){\n  if (commentsToAttribute.size() == 0)   return;\n  List<Node> children=node.getChildrenNodes();\n  PositionUtils.sortByBeginPosition(children);\n  for (  Node child : children) {\n    List<Comment> commentsInsideChild=new LinkedList<Comment>();\n    for (    Comment c : commentsToAttribute) {\n      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {\n        commentsInsideChild.add(c);\n      }\n    }\n    commentsToAttribute.removeAll(commentsInsideChild);\n    insertCommentsInNode(child,commentsInsideChild);\n  }\n  List<Comment> attributedComments=new LinkedList<Comment>();\n  for (  Comment comment : commentsToAttribute) {\n    if (comment.isLineComment()) {\n      for (      Node child : children) {\n        if (child.getEndLine() == comment.getBeginLine()) {\n          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {\n            attributedComments.add(comment);\n          }\n        }\n      }\n    }\n  }\n  Comment previousComment=null;\n  attributedComments=new LinkedList<Comment>();\n  List<Node> childrenAndComments=new LinkedList<Node>();\n  childrenAndComments.addAll(children);\n  childrenAndComments.addAll(commentsToAttribute);\n  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);\n  for (  Node thing : childrenAndComments) {\n    if (thing instanceof Comment) {\n      previousComment=(Comment)thing;\n      if (!previousComment.isOrphan()) {\n        previousComment=null;\n      }\n    }\n else {\n      if (previousComment != null && !thing.hasComment()) {\n        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {\n          thing.setComment(previousComment);\n          attributedComments.add(previousComment);\n          previousComment=null;\n        }\n      }\n    }\n  }\n  commentsToAttribute.removeAll(attributedComments);\n  for (  Comment c : commentsToAttribute) {\n    if (c.isOrphan()) {\n      node.addOrphanComment(c);\n    }\n  }\n}"}
{"ids": "41810", "raw_code": "public static String readFileAsString(File file) throws FileNotFoundException {\n  return readFileAsString(file.getAbsolutePath());\n}"}
{"ids": "68091", "raw_code": "protected void onException(final WroRuntimeException e){\n  throw e;\n}"}
{"ids": "22900", "raw_code": "public void close(){\n  if (!isOpen)   return;\n  Log.d(TAG,\"Trying to close track\");\n  loadingLock.lock();\n  try {\n    save();\n    if (saveFileStream != null) {\n      SavingHelper.close(saveFileStream);\n      saveFileStream=null;\n    }\n    savingDisabled=true;\n    isOpen=false;\n    Log.i(TAG,\"Track closed\");\n  }\n  finally {\n    loadingLock.unlock();\n  }\n}"}
{"ids": "72991", "raw_code": "@Override public List chunkString(String sToChunk){\n  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());\n  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);\n  return Arrays.asList(sRes);\n}"}
{"ids": "25782", "raw_code": "public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){\n  StringBuilder builder=new StringBuilder();\n  int index=0;\n  for (; index < noDictionaryDimsMapping.length; index++) {\n    builder.append(noDictionaryDimsMapping[index]);\n    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);\n  }\n  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);\n  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();\n  return str;\n}"}
{"ids": "38329", "raw_code": "public void clear(){\n  m_Model.clear();\n  setButtons(null);\n}"}
{"ids": "680", "raw_code": "public static int brighter(int c){\n  int r=red(c), g=green(c), b=blue(c);\n  int i=(int)(1.0 / (1.0 - scale));\n  if (r == 0 && g == 0 && b == 0) {\n    return rgba(i,i,i,alpha(c));\n  }\n  if (r > 0 && r < i)   r=i;\n  if (g > 0 && g < i)   g=i;\n  if (b > 0 && b < i)   b=i;\n  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));\n}"}
{"ids": "81990", "raw_code": "public void shutdown(){\n  running=false;\n  if (networkThreads != null) {\n    for (    NetworkThread n : networkThreads) {\n      n.stopped=true;\n    }\n  }\n  networkThreads=null;\nsynchronized (LOCK) {\n    LOCK.notifyAll();\n  }\n}"}
{"ids": "83907", "raw_code": "private static MetricValue number_to_metric_value_(Number elem){\n  if (elem == null)   return MetricValue.EMPTY;\n  final String num=elem.toString();\n  try {\n    return MetricValue.fromIntValue(Long.parseLong(num));\n  }\n catch (  NumberFormatException ex) {\n  }\n  try {\n    return MetricValue.fromDblValue(Double.parseDouble(num));\n  }\n catch (  NumberFormatException ex) {\n  }\n  return MetricValue.fromStrValue(num);\n}"}
{"ids": "86648", "raw_code": "public boolean overlaps(String sequence,int start,int end){\n  if (start == MISSING || end == MISSING || end < start) {\n    throw new IllegalArgumentException();\n  }\n  if (!mSequence.equals(sequence)) {\n    return false;\n  }\n  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "9363", "raw_code": "public OkapiBM25(double k1,double b){\n  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException(\"coefficient k1 must be a non negative constant, not \" + k1);\n  this.k1=k1;\n  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException(\"coefficient b must be in the range [0,1], not \" + b);\n  this.b=b;\n}"}
{"ids": "4231", "raw_code": "public boolean isConfigured(){\n  LOG.debug(\"lookup url: \" + url);\n  return url != null && !url.isEmpty();\n}"}
{"ids": "74438", "raw_code": "public boolean makeBackupFile(String directory,File file){\n  if (file == null) {\n    log.info(\"No file to backup\");\n  }\n else   if (file.canWrite()) {\n    String backupFullName=directory + File.separator + createFileNameWithDate(file.getName());\n    if (log.isDebugEnabled()) {\n      log.debug(\"new backup file: \" + backupFullName);\n    }\n    File backupFile=findFile(backupFullName);\n    if (backupFile != null) {\n      if (backupFile.delete()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"deleted backup file \" + backupFullName);\n        }\n      }\n    }\n else {\n      backupFile=new File(backupFullName);\n    }\n    File parentDir=backupFile.getParentFile();\n    if (!parentDir.exists()) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"creating backup directory: \" + parentDir.getName());\n      }\n      if (!parentDir.mkdirs()) {\n        log.error(\"backup directory not created\");\n        return false;\n      }\n    }\n    if (file.renameTo(new File(backupFullName))) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"created new backup file \" + backupFullName);\n      }\n    }\n else {\n      if (log.isDebugEnabled()) {\n        log.debug(\"could not create backup file \" + backupFullName);\n      }\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "19879", "raw_code": "public void removeStorage() throws BackupException {\n  logger.debug(\"Removing contents of storage directory: \" + dataDirSpec.getAbsolutePath());\n  processHelper.exec(\"Removing contents of storage directory\",rmCmd);\n}"}
{"ids": "54756", "raw_code": "private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){\n  Map<String,String> labels=containerConfig.getLabels();\n  if (labels == null) {\n    labels=new HashMap<>();\n  }\n  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());\n  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());\n  containerConfig.withLabels(labels);\n}"}
{"ids": "15002", "raw_code": "public void deleteUsers(Set users) throws AMException, SSOException {\n  Iterator iter=users.iterator();\n  while (iter.hasNext()) {\n    String userDN=(String)iter.next();\n    AMUser user=new AMUserImpl(super.token,userDN);\n    user.delete();\n  }\n}"}
{"ids": "71977", "raw_code": "@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {\n  if (requestID == null && localName.equals(\"batchRequest\")) {\n    requestID=attributes.getValue(\"requestID\");\n  }\n  super.startElement(uri,localName,qName,attributes);\n}"}
{"ids": "17048", "raw_code": "public Storage(){\n  this(new File(getTemporaryStorageDirectoryString()));\n}"}
{"ids": "36207", "raw_code": "public void addBreakpointListener(final BreakpointListener listener){\n  breakpointListeners.add(listener);\n}"}
{"ids": "47738", "raw_code": "public void update(Graphics g){\n  if (isShowing()) {\n    if (!(peer instanceof LightweightPeer)) {\n      g.clearRect(0,0,width,height);\n    }\n    paint(g);\n  }\n}"}
{"ids": "6348", "raw_code": "public static void printStackTrace(Throwable e){\n  try {\n    Debug.printStackTrace(e);\n  }\n catch (  Throwable f) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "85466", "raw_code": "@Override public Void visitType(TypeElement e,Void p){\n  scan(e.getTypeParameters(),p);\n  checkCamelCase(e,true);\n  super.visitType(e,p);\n  return null;\n}"}
{"ids": "80407", "raw_code": "public Block(boolean multiPush){\n  this(multiPush,\"block\",null,Arrays.asList(\"scrape-1\",\"scrape-2\"));\n}"}
{"ids": "38126", "raw_code": "private double Poisson(double x){\n  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));\n}"}
{"ids": "11778", "raw_code": "protected Expression findExpression(String source){\n  if (source != null && source.length() > 0) {\n    source=source.trim();\n    if (source.length() == 0) {\n      return null;\n    }\n    String leftSide=source;\n    String rightSide=null;\n    Connector op=findOp(leftSide);\n    if (op != null) {\n      rightSide=op.getRightSide(leftSide);\n      leftSide=leftSide.substring(0,op.sourceLoc);\n      Expression leftExpression=findExpression(leftSide);\n      Expression rightExpression=findExpression(rightSide);\n      if (leftExpression != null) {\n        op.addExpr(leftExpression);\n      }\n      if (rightExpression != null) {\n        op.addExpr(rightExpression);\n      }\n      return op;\n    }\n    op=findMiniOp(leftSide);\n    if (op != null) {\n      rightSide=op.getRightSide(leftSide);\n      leftSide=leftSide.substring(0,op.sourceLoc);\n      Expression leftExpression=findExpression(leftSide);\n      Expression rightExpression=findExpression(rightSide);\n      if (leftExpression != null) {\n        op.addExpr(leftExpression);\n      }\n      if (rightExpression != null) {\n        op.addExpr(rightExpression);\n      }\n      return op;\n    }\n    if (logger.isLoggable(Level.FINER)) {\n      logger.finer(\"need to break up: \" + source);\n    }\n    return findMathOp(source);\n  }\n  return null;\n}"}
{"ids": "190", "raw_code": "void putChannel(final StoredClientChannel channel){\n  putChannel(channel,true);\n}"}
{"ids": "83759", "raw_code": "@SuppressWarnings(\"ResultOfMethodCallIgnored\") public static void pipeInputToOutputStream(InputStream in,File fileOut,boolean ignoreErrors) throws IOException {\n  if (fileOut == null) {\n    logger.error(\"The output filename doesn't exist or is invalid\");\n    if (!ignoreErrors) {\n      throw new IOException(\"The output filename doesn't exist or is invalid\");\n    }\n  }\n else {\n    File parent=fileOut.getParentFile();\n    if (parent != null && !parent.exists()) {\n      parent.mkdirs();\n    }\n    OutputStream fileStream=null;\n    try {\n      fileStream=new FileOutputStream(fileOut);\n      pipeInputToOutputStream(in,fileStream,true,ignoreErrors);\n    }\n catch (    IOException e) {\n      if (fileStream != null) {\n        try {\n          fileStream.close();\n        }\n catch (        IOException ex) {\n          logger.error(\"Cannot close stream - {}\",ex.getMessage());\n        }\n      }\n      if (!ignoreErrors) {\n        throw e;\n      }\n    }\n  }\n}"}
{"ids": "70955", "raw_code": "public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){\n  boolean scheduled=true;\n  Thread currentThread=Thread.currentThread();\n  if (currentThread.equals(dutyThread)) {\n    timerWheel.newTimeout(delayTime,unit,null);\n  }\n else {\n    scheduled=actions.offer(null);\n  }\n  return scheduled;\n}"}
{"ids": "82169", "raw_code": "void addAttributeSelection(String exp){\n  int index=exp.indexOf('=');\n  String value=null;\n  int constraint=AttString.EQUALS;\n  if (index != -1) {\n    if (index == 0) {\n      setTagId(TAG_CSS_ILLEGAL_SELECTOR);\n      return;\n    }\n    int opIndex=index;\n    char c=exp.charAt(index - 1);\n    if (c == '~') {\n      constraint=AttString.CONTAINS_WORD;\n      opIndex--;\n    }\n else     if (c == '|') {\n      constraint=AttString.BEGINS_WITH;\n      opIndex--;\n    }\n    value=exp.substring(index + 1);\n    if (((value.startsWith(\"\\\"\")) && (value.endsWith(\"\\\"\"))) || ((value.startsWith(\"'\")) && (value.endsWith(\"'\")))) {\n      value=value.substring(1,value.length() - 1);\n    }\n    exp=exp.substring(0,opIndex);\n  }\n  if (attributeSelections == null) {\n    attributeSelections=new Vector();\n  }\n  attributeSelections.addElement(new AttString(exp,constraint,value));\n}"}
{"ids": "61981", "raw_code": "public Value sample(){\n  int index=sampler.nextInt(actionValues.size());\n  if (actionValuesAsArray == null) {\n    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);\n  }\n  return actionValuesAsArray[index];\n}"}
{"ids": "30973", "raw_code": "@Override public void channelClosed(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception {\n  curr_conns.decrementAndGet();\n  channelGroup.remove(channelHandlerContext.getChannel());\n}"}
{"ids": "74950", "raw_code": "private static void configureHeadLessSimulation(){\n  System.setProperty(\"java.awt.headless\",\"true\");\n  GAMA.setHeadLessMode();\n}"}
{"ids": "40614", "raw_code": "public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException {\n  TimerContext time=stats.time(dir + \"_remove_event\");\n  try {\n    String path=event.getId();\n    String responsePath=dir + \"/\" + response_prefix+ path.substring(path.lastIndexOf(\"-\") + 1);\n    if (zookeeper.exists(responsePath,true)) {\n      zookeeper.setData(responsePath,event.getBytes(),true);\n    }\n    byte[] data=zookeeper.getData(path,null,null,true);\n    zookeeper.delete(path,-1,true);\n    return data;\n  }\n  finally {\n    time.stop();\n  }\n}"}
{"ids": "13709", "raw_code": "public PropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model,Set attributeSchemas) throws SMSException, SSOException {\n  this.model=model;\n  this.serviceName=serviceSchema.getServiceName();\n  getServiceResourceBundle(serviceSchema);\n  if (serviceBundle != null) {\n    mapTypeToAttributeSchema=new HashMap(attributeSchemas.size() * 2);\n    mapTypeToAttributeSchema.put(NULL_TYPE,attributeSchemas);\n  }\n}"}
{"ids": "11045", "raw_code": "public boolean is(String arg,boolean allowAbbr){\n  if (name.equalsIgnoreCase(arg)) {\n    return true;\n  }\n  if (allowAbbr && arg.length() == 1) {\n    if (arg.charAt(0) == c) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "63000", "raw_code": "static public void addAll(List<String> list,String[] array){\n  for (  String item : array)   list.add(item);\n}"}
{"ids": "23480", "raw_code": "void remove(SuperCardToast superCardToast){\n  mList.remove(superCardToast);\n}"}
{"ids": "14253", "raw_code": "private String partiallyEscapeAssertionValue(String assertionValue){\n  StringBuilder sb=new StringBuilder(assertionValue.length());\n  for (int j=0; j < assertionValue.length(); j++) {\n    char c=assertionValue.charAt(j);\n    if (c == '*') {\n      sb.append(c);\n    }\n else {\n      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "53644", "raw_code": "@Override public void step(MessageLogger logger){\n  try {\n    addAgent();\n    env.step();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "64279", "raw_code": "public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){\n  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);\n}"}
{"ids": "46212", "raw_code": "synchronized boolean release(){\n  d(\"release()\");\n  if (state == BUSY) {\n    state=IDLE;\n    idleSince=System.currentTimeMillis();\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "77467", "raw_code": "private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int count){\n  if (slice != null) {\n    Collection<Replica> allReplicasForShard=slice.getReplicas();\n    if (allReplicasForShard == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"No replicas found  in shard/collection: \" + shard + \"/\"+ collectionName);\n    }\n    if (allReplicasForShard.size() == 1) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"There is only one replica available in shard/collection: \" + shard + \"/\"+ collectionName+ \". Cannot delete that.\");\n    }\n    if (allReplicasForShard.size() <= count) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"There are lesser num replicas requested to be deleted than are available in shard/collection : \" + shard + \"/\"+ collectionName+ \" Requested: \"+ count+ \" Available: \"+ allReplicasForShard.size()+ \".\");\n    }\n  }\n}"}
{"ids": "50310", "raw_code": "default ClassDeclaration asClass(){\n  throw new UnsupportedOperationException(String.format(\"%s is not a class\",this));\n}"}
{"ids": "69424", "raw_code": "private static String partitionSpecToName(Map<String,String> spec){\n  StringBuilder sb=new StringBuilder();\n  for (  Map.Entry<String,String> entry : spec.entrySet()) {\n    if (sb.length() != 0) {\n      sb.append(\"/\");\n    }\n    sb.append(entry.getKey() + \"=\" + entry.getValue());\n  }\n  return sb.toString();\n}"}
{"ids": "25755", "raw_code": "@Modifying @Transactional public void deleteCheque(@PathVariable Long chequeID){\n  chequeRepository.delete(chequeID);\n  photoRepository.deleteByChequeId(chequeID.toString());\n}"}
{"ids": "52066", "raw_code": "public static synchronized double partialCorrelation(TetradMatrix submatrix){\n  try {\n    TetradMatrix inverse=submatrix.inverse();\n    double a=-1.0 * inverse.get(0,1);\n    double v0=inverse.get(0,0);\n    double v1=inverse.get(1,1);\n    double b=Math.sqrt(v0 * v1);\n    return a / b;\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return Double.NaN;\n  }\n}"}
{"ids": "63697", "raw_code": "public void addColumn(String name,String expr){\n  Expression ex=ExpressionParser.parse(expr);\n  Throwable t=ExpressionParser.getError();\n  if (t != null) {\n    throw new RuntimeException(t);\n  }\n else {\n    addColumn(name,ex);\n  }\n}"}
{"ids": "32180", "raw_code": "public void addPutAndGetTimeNanos(long duration){\n  putTimeNanos.addAndGet(duration);\n  getTimeNanos.addAndGet(duration);\n  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);\n}"}
{"ids": "55198", "raw_code": "String parse(String cellStr,int layoutConstant){\n  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];\n}"}
{"ids": "74139", "raw_code": "public void pseudoPropertyChange(String propName,Object old,Object n){\n  if (log.isDebugEnabled()) {\n    log.debug(\"pseudoPropertyChange: Block \\\"\" + getSystemName() + \" property \\\"\"+ propName+ \"\\\" new value= \"+ n.toString());\n  }\n  firePropertyChange(propName,old,n);\n}"}
{"ids": "70681", "raw_code": "public static String runCmd(File directory,List<String> cmd,String errorMessage) throws Exception {\n  ProcessBuilder pb=new ProcessBuilder(cmd);\n  pb.directory(directory);\n  pb.redirectErrorStream(true);\n  Process p=pb.start();\n  String s;\n  StringBuilder sb=new StringBuilder();\n  BufferedReader stdout=new BufferedReader(new InputStreamReader(p.getInputStream()));\n  while ((s=stdout.readLine()) != null) {\n    logger.info(s);\n    sb.append(s);\n    sb.append('\\n');\n  }\n  String sbs=sb.toString();\n  int exitValue=p.waitFor();\n  if (exitValue != 0)   throw new Exception(errorMessage + \" exit value \" + exitValue+ \"  \"+ sbs);\n  return sbs;\n}"}
{"ids": "59892", "raw_code": "@Override public SelectableChannel selectableChannel(){\n  return socketChannel;\n}"}
{"ids": "79176", "raw_code": "public static String fromTag(ByteArrayTag tag){\n  StringBuilder builder=new StringBuilder();\n  builder.append(ARRAY_START);\n  boolean start=true;\n  for (  byte value : tag.getValue()) {\n    ByteTag b=new ByteTag(value);\n    if (start) {\n      start=false;\n    }\n else {\n      builder.append(ELEMENT_SEPERATOR);\n    }\n    builder.append(fromTag(b));\n  }\n  builder.append(ARRAY_END);\n  return builder.toString();\n}"}
{"ids": "73807", "raw_code": "@Override protected void addChooserFilters(JFileChooser chooser){\n  javax.swing.filechooser.FileNameExtensionFilter filter=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage(\"FileFilterLabel\",\"*.dfm, *.hex\"),\"dmf\",\"hex\");\n  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(\"Digitrax Mangled Firmware (*.dmf)\",\"dmf\"));\n  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(\"Intel Hex Format Firmware (*.hex)\",\"hex\"));\n  chooser.addChoosableFileFilter(filter);\n  chooser.setFileFilter(filter);\n}"}
{"ids": "49241", "raw_code": "private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){\n  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);\n  if (result != null) {\n    return result;\n  }\n else {\n    long sleepTime=INIT_SLEEP_TIME;\n    for (int i=0; i < MAX_ATTEMPTS; i++) {\n      try {\n        Thread.sleep(sleepTime);\n      }\n catch (      InterruptedException e) {\n        return result;\n      }\n      sleepTime*=2;\n      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);\n      if (result != null) {\n        return result;\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "67649", "raw_code": "public static DateTime parseRfc822(String str) throws ParseException {\n  Date date;\nsynchronized (dateTimeFormat822) {\n    try {\n      date=dateTimeFormat822.parse(str);\n    }\n catch (    java.text.ParseException e) {\n      throw new ParseException(e);\n    }\n  }\n  return new DateTime(date);\n}"}
{"ids": "44561", "raw_code": "public Model validateModel(Dataset dataset,URI shapesGraphURI,Resource minSeverity,boolean validateShapes,Function<RDFNode,String> labelFunction,ProgressMonitor monitor) throws InterruptedException {\n  if (dataset.getDefaultModel() == null) {\n    throw new IllegalArgumentException(\"Dataset requires a default model\");\n  }\n  Model shapesModel=dataset.getNamedModel(shapesGraphURI.toString());\n  if (monitor != null) {\n    monitor.subTask(\"Preparing execution plan\");\n  }\n  List<Property> constraintProperties=SHACLUtil.getAllConstraintProperties(validateShapes);\n  Map<Resource,List<SHConstraint>> map=buildShape2ConstraintsMap(shapesModel,dataset.getDefaultModel(),constraintProperties,validateShapes);\n  if (monitor != null) {\n    monitor.subTask(\"\");\n  }\n  if (monitor != null) {\n    monitor.beginTask(\"Validating constraints for \" + map.size() + \" shapes...\",map.size());\n  }\n  Model results=JenaUtil.createMemoryModel();\n  results.setNsPrefixes(dataset.getDefaultModel());\n  for (  Resource shape : map.keySet()) {\n    for (    SHConstraint constraint : map.get(shape)) {\n      validateConstraintForShape(dataset,shapesGraphURI,minSeverity,constraint,shape,results,labelFunction,monitor);\n      if (monitor != null) {\n        monitor.worked(1);\n        if (monitor.isCanceled()) {\n          throw new InterruptedException();\n        }\n      }\n    }\n  }\n  return results;\n}"}
{"ids": "85129", "raw_code": "public PdfPage addAnnotation(PdfAnnotation annotation){\n  return addAnnotation(-1,annotation,true);\n}"}
{"ids": "14039", "raw_code": "public static String findPreferredIDP(String realm,HttpServletRequest request){\n  if (request == null) {\n    return null;\n  }\n  String succinctID=request.getParameter(IFSConstants.PROVIDER_ID_KEY);\n  if ((succinctID == null) || succinctID.length() == 0) {\n    debug.message(\"FSUtils.findPreferredIDP::Pref IDP not found.\");\n    return null;\n  }\n  succinctID=succinctID.trim();\n  String preferredSuccinctId=null;\n  StringTokenizer st=new StringTokenizer(succinctID,\" \");\n  while (st.hasMoreTokens()) {\n    preferredSuccinctId=st.nextToken();\n    if ((preferredSuccinctId.length() < 28) && st.hasMoreTokens()) {\n      preferredSuccinctId=preferredSuccinctId + \"+\" + st.nextToken();\n    }\n  }\n  preferredSuccinctId=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccinctId));\n  return getProviderIDFromSuccinctID(realm,preferredSuccinctId);\n}"}
{"ids": "21548", "raw_code": "private void checkAndCreateDirectory(final String directoryName){\n  try {\n    final File dir=new File(directoryName);\n    if (!dir.exists() && dir.mkdirs()) {\n      _logger.debug(\"Debug dump directory created successfully.\");\n    }\n  }\n catch (  Exception ex) {\n    _logger.error(\"Debug dump directory creation failed due to {}\",ex.getMessage());\n  }\n}"}
{"ids": "40727", "raw_code": "public int findEventPositionNearestTime(Time time,long id){\n  if (mRowInfo == null) {\n    return 0;\n  }\n  long millis=time.toMillis(false);\n  long minDistance=Integer.MAX_VALUE;\n  long idFoundMinDistance=Integer.MAX_VALUE;\n  int minIndex=0;\n  int idFoundMinIndex=0;\n  int eventInTimeIndex=-1;\n  int allDayEventInTimeIndex=-1;\n  int allDayEventDay=0;\n  int minDay=0;\n  boolean idFound=false;\n  int len=mRowInfo.size();\n  for (int index=0; index < len; index++) {\n    RowInfo row=mRowInfo.get(index);\n    if (row.mType == TYPE_DAY) {\n      continue;\n    }\n    if (row.mEventId == id) {\n      if (row.mEventStartTimeMilli == millis) {\n        return index;\n      }\n      long distance=Math.abs(millis - row.mEventStartTimeMilli);\n      if (distance < idFoundMinDistance) {\n        idFoundMinDistance=distance;\n        idFoundMinIndex=index;\n      }\n      idFound=true;\n    }\n    if (!idFound) {\n      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {\n        if (row.mAllDay) {\n          if (allDayEventInTimeIndex == -1) {\n            allDayEventInTimeIndex=index;\n            allDayEventDay=row.mDay;\n          }\n        }\n else         if (eventInTimeIndex == -1) {\n          eventInTimeIndex=index;\n        }\n      }\n else       if (eventInTimeIndex == -1) {\n        long distance=Math.abs(millis - row.mEventStartTimeMilli);\n        if (distance < minDistance) {\n          minDistance=distance;\n          minIndex=index;\n          minDay=row.mDay;\n        }\n      }\n    }\n  }\n  if (idFound) {\n    return idFoundMinIndex;\n  }\n  if (eventInTimeIndex != -1) {\n    return eventInTimeIndex;\n  }\n else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {\n    return allDayEventInTimeIndex;\n  }\n  return minIndex;\n}"}
{"ids": "37334", "raw_code": "private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {\n  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();\n  final String parentRegister=getParentRegister(subRegister);\n  final OperandSize archSize=environment.getArchitectureSize();\n  if (isHigher8BitRegister(subRegister)) {\n    final String maskResult=environment.getNextVariableString();\n    final String shiftResult=environment.getNextVariableString();\n    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,\"65280\",OperandSize.WORD,maskResult));\n    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,\"-8\",OperandSize.BYTE,shiftResult));\n    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);\n  }\n else {\n    final OperandSize subRegisterSize=getRegisterSize(subRegister);\n    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));\n    final String result=environment.getNextVariableString();\n    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));\n    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);\n  }\n}"}
{"ids": "41943", "raw_code": "public Interceptor[] buildMethodInterceptors(Method method){\n  Interceptors before=method.getAnnotation(Interceptors.class);\n  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;\n}"}
{"ids": "22007", "raw_code": "private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){\n  Class refClass=left.getClass();\n  Method[] methods=refClass.getMethods();\n  for (  Method method : methods) {\n    boolean contain=false;\n    Name nameAnn=method.getAnnotation(Name.class);\n    if (nameAnn == null) {\n      continue;\n    }\n    String key=nameAnn.value();\n    if (contained != null && contained.contains(key)) {\n      contain=true;\n    }\n else     if (included != null && !included.contains(key)) {\n      continue;\n    }\n    if (excluded.contains(key)) {\n      continue;\n    }\n    Class type=method.getReturnType();\n    try {\n      Object obja=method.invoke(left);\n      Object objb=method.invoke(right);\n      if (type == StringSet.class) {\n        if (contain) {\n          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);\n        }\n else {\n          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);\n        }\n      }\n else       if (type == StringMap.class) {\n        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);\n      }\n else       if (type == StringSetMap.class) {\n        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);\n      }\n else {\n        if (!isEqual(obja,objb)) {\n          Change change=new Change(key,obja,objb,nameAnn.value());\n          changes.put(key,change);\n        }\n      }\n    }\n catch (    IllegalAccessException ex) {\n      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});\n    }\ncatch (    InvocationTargetException ex) {\n      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});\n    }\n  }\n}"}
{"ids": "42349", "raw_code": "static void removeAllPhis(IR ir){\n  for (Instruction s=ir.firstInstructionInCodeOrder(), sentinel=ir.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) {\n    nextInstr=s.nextInstructionInCodeOrder();\n    if (Phi.conforms(s))     s.remove();\n  }\n}"}
{"ids": "76217", "raw_code": "private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){\n  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();\n  for (  TestCase test : tests) {\n    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));\n  }\n  return testToGoals;\n}"}
{"ids": "41944", "raw_code": "public Interceptor[] buildRouteInterceptors(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInters,Method method){\n  List<Interceptor> allInters=new ArrayList<Interceptor>();\n  for (  Interceptor defaultInter : defaultInters) {\n    allInters.add(defaultInter);\n  }\n  for (  Interceptor resourceInter : resourceInters) {\n    allInters.add(resourceInter);\n  }\n  for (  Interceptor methodInter : methodInters) {\n    allInters.add(methodInter);\n  }\n  Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass);\n  Class<? extends Interceptor>[] methodClears=getMethodClears(method);\n  if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) {\n    for (int i=0; i < allInters.size(); i++) {\n      i=clearInterceptor(allInters,resourceClears,i);\n      i=clearInterceptor(allInters,methodClears,i);\n    }\n  }\n  return allInters.toArray(new Interceptor[allInters.size()]);\n}"}
{"ids": "53147", "raw_code": "public static double quantile(double p,double k,double theta,double shift){\n  return Math.exp(GammaDistribution.quantile(p,k,theta)) + shift;\n}"}
{"ids": "48719", "raw_code": "final void putByte(int offset,byte value){\n  unsafe.putByte(offset + address,value);\n}"}
{"ids": "56263", "raw_code": "public final void addValidationError(String error){\n  validationErrors.add(error);\n}"}
{"ids": "24484", "raw_code": "public static void parseOptionSettingTo(String optionSetting,Map<String,String> dst){\n  int eqIndex=optionSetting.indexOf('=');\n  if (eqIndex == -1) {\n    throw new InternalError(\"Option setting has does not match the pattern <name>=<value>: \" + optionSetting);\n  }\n  dst.put(optionSetting.substring(0,eqIndex),optionSetting.substring(eqIndex + 1));\n}"}
{"ids": "16023", "raw_code": "public BigInteger generateClientCredentials(byte[] salt,byte[] identity,byte[] password){\n  this.x=SRP6Util.calculateX(digest,N,salt,identity,password);\n  this.a=selectPrivateValue();\n  this.A=g.modPow(a,N);\n  return A;\n}"}
{"ids": "77464", "raw_code": "public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {\n  LOG.info(\"SolrSuggester.build(\" + name + \")\");\n  dictionary=dictionaryFactory.create(core,searcher);\n  lookup.build(dictionary);\n  if (storeDir != null) {\n    File target=getStoreFile();\n    if (!lookup.store(new FileOutputStream(target))) {\n      LOG.error(\"Store Lookup build failed\");\n    }\n else {\n      LOG.info(\"Stored suggest data to: \" + target.getAbsolutePath());\n    }\n  }\n}"}
{"ids": "81237", "raw_code": "public void start(String json){\n  guidedTourSteps.clear();\n  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);\n  log.setDebugMode(configuration.getDebugMode());\n  this.guidedTourSteps=configuration.getSteps();\n  this.tourName=configuration.getName();\n  if (this.tourName == null || tourName.isEmpty()) {\n    tourName=\"unamed\";\n  }\n  this.hasWelcomeStep=configuration.getHasWelcomeStep();\n  startTour();\n}"}
{"ids": "44436", "raw_code": "public static MaildirMessageName createUniqueName(MaildirFolder parentFolder,long size){\n  String timestamp=String.valueOf(System.currentTimeMillis());\n  timestamp=timestamp.substring(0,timestamp.length() - 3);\n  StringBuilder uniquePart=new StringBuilder();\n  uniquePart.append(Integer.toHexString(random.nextInt()));\n  uniquePart.append(timestamp.substring(timestamp.length() - 3));\n  uniquePart.append(processName);\n  uniquePart.append(getNextDeliveryNumber());\n  String sizeString=\",S=\" + String.valueOf(size);\n  String fullName=timestamp + \".\" + uniquePart.toString()+ \".\"+ currentHostname+ sizeString;\n  MaildirMessageName uniqueName=new MaildirMessageName(parentFolder,fullName);\n  uniqueName.timestamp=timestamp;\n  uniqueName.uniqueString=uniquePart.toString();\n  uniqueName.hostname=currentHostname;\n  uniqueName.sizeString=sizeString;\n  uniqueName.isSplit=true;\n  uniqueName.size=size;\n  return uniqueName;\n}"}
{"ids": "42296", "raw_code": "private void adjustBCIndex(Instruction barrier){\n  NormalMethod source=barrier.position().method;\n  if (source.isForOsrSpecialization()) {\n    barrier.adjustBytecodeIndex(-source.getOsrPrologueLength());\n  }\n}"}
{"ids": "86911", "raw_code": "public static long[] interpose(long[] vector,int vectorLen,int offset,int len){\n  long[] updated=create(vectorLen + len);\n  int idx=offset >> 6;\n  System.arraycopy(vector,0,updated,0,idx);\n  if (idx < vector.length) {\n    int delta=offset & 63;\n    updated[idx]|=vector[idx] & maskBelow(delta);\n  }\n  copy(vector,offset,updated,offset + len,vectorLen - offset);\n  return updated;\n}"}
{"ids": "26007", "raw_code": "Task<Void> synchronizeAllAuthDataAsync(){\n  Map<String,Map<String,String>> authData;\nsynchronized (mutex) {\n    if (!isCurrentUser()) {\n      return Task.forResult(null);\n    }\n    authData=getAuthData();\n  }\n  List<Task<Void>> tasks=new ArrayList<>(authData.size());\n  for (  String authType : authData.keySet()) {\n    tasks.add(synchronizeAuthDataAsync(authType));\n  }\n  return Task.whenAll(tasks);\n}"}
{"ids": "45902", "raw_code": "public static Element createElementInEncryptionSpace(Document doc,String elementName){\n  if (doc == null) {\n    throw new RuntimeException(\"Document is null\");\n  }\n  if ((xencPrefix == null) || (xencPrefix.length() == 0)) {\n    return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,elementName);\n  }\n  return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,xencPrefix + \":\" + elementName);\n}"}
{"ids": "68787", "raw_code": "public void addCommands(PDFPage page,Matrix extra){\nsynchronized (commands) {\n    addPush();\n    if (extra != null) {\n      addXform(extra);\n    }\n    commands.addAll(page.getCommands());\n    addPop();\n  }\n  updateImages();\n}"}
{"ids": "50483", "raw_code": "public void addLast(StatementSequence statements){\n  if (statements != null) {\n    sequence.addAll(statements.sequence);\n  }\n}"}
{"ids": "41006", "raw_code": "private void notifyActivityStateChanged(Bundle bundle){\n  if (!mRecords.isEmpty()) {\n    Log.d(TAG,\"notifyActivityStatusChanged:clients = \" + mRecords.size());\nsynchronized (mRecords) {\n      Iterator<Record> iterator=mRecords.iterator();\n      while (iterator.hasNext()) {\n        Record record=(Record)iterator.next();\n        FmRadioListener listener=record.mCallback;\n        if (listener == null) {\n          iterator.remove();\n          return;\n        }\n        listener.onCallBack(bundle);\n      }\n    }\n  }\n}"}
{"ids": "68686", "raw_code": "public double elasticity(final double spot){\n  final double val=value();\n  final double del=delta(spot);\n  if (val > Constants.QL_EPSILON)   return del / val * spot;\n else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;\n else   if (del > 0.0)   return Double.MAX_VALUE;\n else   return Double.MIN_VALUE;\n}"}
{"ids": "74063", "raw_code": "public static float roundDecimal(float value){\n  return roundDecimal(value,Math.log10(INT_PRECISION));\n}"}
{"ids": "81227", "raw_code": "@AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions,@NotNull @Assisted Scope environmentScope,@Nullable @Assisted String environmentName){\n  this.runOptions=runOptions;\n  this.ram=runOptions.getMemorySize();\n  this.title=RUNNER_NAME + runnerCounter.getRunnerNumber() + (environmentName == null ? \"\" : \" - \" + getCorrectName(environmentName));\n  this.activeTab=locale.runnerTabConsole();\n  this.status=IN_QUEUE;\n  this.scope=environmentScope;\n  creationTime=System.currentTimeMillis();\n  String environmentId=runOptions.getEnvironmentId();\n  if (environmentId == null || environmentId.startsWith(\"project:/\")) {\n    this.type=util.getType();\n  }\n else {\n    this.type=util.getCorrectCategoryName(runOptions.getEnvironmentId());\n  }\n  if (environmentId != null) {\n    runOptions.setEnvironmentId(environmentId);\n  }\n}"}
{"ids": "36272", "raw_code": "private String dateToString(Date input){\n  if (input == null) {\n    return null;\n  }\n else {\n    return input.toString();\n  }\n}"}
{"ids": "16560", "raw_code": "private static int componentSize(Component component,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){\n  if (formSpec == null) {\n    return prefMeasure.sizeOf(component);\n  }\n else   if (formSpec.getSize() == Sizes.MINIMUM) {\n    return minMeasure.sizeOf(component);\n  }\n else   if (formSpec.getSize() == Sizes.PREFERRED) {\n    return prefMeasure.sizeOf(component);\n  }\n else {\n    return Math.min(cellSize,prefMeasure.sizeOf(component));\n  }\n}"}
{"ids": "76915", "raw_code": "protected synchronized void start(long curPrimaryGen) throws IOException {\n  if (state.equals(\"init\") == false) {\n    throw new IllegalStateException(\"already started\");\n  }\n  message(\"top: now start\");\n  try {\n    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);\n    long maxPendingGen=-1;\n    for (    String fileName : dir.listAll()) {\n      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {\n        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);\n        if (gen > maxPendingGen) {\n          maxPendingGen=gen;\n        }\n      }\n    }\n    SegmentInfos infos;\n    if (segmentsFileName == null) {\n      infos=new SegmentInfos();\n      message(\"top: init: no segments in index\");\n    }\n else {\n      message(\"top: init: read existing segments commit \" + segmentsFileName);\n      infos=SegmentInfos.readCommit(dir,segmentsFileName);\n      message(\"top: init: segments: \" + infos.toString() + \" version=\"+ infos.getVersion());\n      Collection<String> indexFiles=infos.files(false);\n      lastCommitFiles.add(segmentsFileName);\n      lastCommitFiles.addAll(indexFiles);\n      deleter.incRef(lastCommitFiles);\n      lastNRTFiles.addAll(indexFiles);\n      deleter.incRef(lastNRTFiles);\n      message(\"top: commitFiles=\" + lastCommitFiles);\n      message(\"top: nrtFiles=\" + lastNRTFiles);\n    }\n    message(\"top: delete unknown files on init: all files=\" + Arrays.toString(dir.listAll()));\n    deleter.deleteUnknownFiles(segmentsFileName);\n    message(\"top: done delete unknown files on init: all files=\" + Arrays.toString(dir.listAll()));\n    String s=infos.getUserData().get(PRIMARY_GEN_KEY);\n    long myPrimaryGen;\n    if (s == null) {\n      assert infos.size() == 0;\n      myPrimaryGen=-1;\n    }\n else {\n      myPrimaryGen=Long.parseLong(s);\n    }\n    message(\"top: myPrimaryGen=\" + myPrimaryGen);\n    boolean doCommit;\n    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {\n      assert myPrimaryGen < curPrimaryGen;\n      final long initSyncStartNS=System.nanoTime();\n      message(\"top: init: primary changed while we were down myPrimaryGen=\" + myPrimaryGen + \" vs curPrimaryGen=\"+ curPrimaryGen+ \"; sync now before mgr init\");\n      CopyJob job=null;\n      message(\"top: now delete starting commit point \" + segmentsFileName);\n      assert deleter.getRefCount(segmentsFileName) == 1;\n      deleter.decRef(Collections.singleton(segmentsFileName));\n      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {\n        throw new RuntimeException(\"replica cannot start: existing segments file=\" + segmentsFileName + \" must be removed in order to start, but the file delete failed\");\n      }\n      boolean didRemove=lastCommitFiles.remove(segmentsFileName);\n      assert didRemove;\n      while (true) {\n        job=newCopyJob(\"sync on startup replica=\" + name() + \" myVersion=\"+ infos.getVersion(),null,null,true,null);\n        job.start();\n        message(\"top: init: sync sis.version=\" + job.getCopyState().version);\n        try {\n          job.runBlocking();\n          job.finish();\n          break;\n        }\n catch (        IOException ioe) {\n          job.cancel(\"startup failed\",ioe);\n          if (ioe.getMessage().contains(\"checksum mismatch after file copy\")) {\n            message(\"top: failed to copy: \" + ioe + \"; retrying\");\n          }\n else {\n            throw ioe;\n          }\n        }\n      }\n      lastPrimaryGen=job.getCopyState().primaryGen;\n      byte[] infosBytes=job.getCopyState().infosBytes;\n      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(\"SegmentInfos\",job.getCopyState().infosBytes)),job.getCopyState().gen);\n      syncInfos.updateGeneration(infos);\n      infos=syncInfos;\n      assert infos.getVersion() == job.getCopyState().version;\n      message(\"  version=\" + infos.getVersion() + \" segments=\"+ infos.toString());\n      message(\"top: init: incRef nrtFiles=\" + job.getFileNames());\n      deleter.incRef(job.getFileNames());\n      message(\"top: init: decRef lastNRTFiles=\" + lastNRTFiles);\n      deleter.decRef(lastNRTFiles);\n      lastNRTFiles.clear();\n      lastNRTFiles.addAll(job.getFileNames());\n      message(\"top: init: set lastNRTFiles=\" + lastNRTFiles);\n      lastFileMetaData=job.getCopyState().files;\n      message(String.format(Locale.ROOT,\"top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d\",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));\n      doCommit=true;\n    }\n else {\n      doCommit=false;\n      lastPrimaryGen=curPrimaryGen;\n      message(\"top: same primary as before\");\n    }\n    if (infos.getGeneration() < maxPendingGen) {\n      message(\"top: move infos generation from \" + infos.getGeneration() + \" to \"+ maxPendingGen);\n      infos.setNextWriteGeneration(maxPendingGen);\n    }\n    sendNewReplica();\n    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);\n    IndexSearcher searcher=mgr.acquire();\n    try {\n      int hitCount=searcher.count(new TermQuery(new Term(\"marker\",\"marker\")));\n      message(\"top: marker count=\" + hitCount + \" version=\"+ ((DirectoryReader)searcher.getIndexReader()).getVersion());\n    }\n  finally {\n      mgr.release(searcher);\n    }\n    if (doCommit) {\n      commit();\n    }\n    message(\"top: done start\");\n    state=\"idle\";\n  }\n catch (  Throwable t) {\n    if (t.getMessage().startsWith(\"replica cannot start\") == false) {\n      message(\"exc on start:\");\n      t.printStackTrace(printStream);\n    }\n else {\n      dir.close();\n    }\n    IOUtils.reThrow(t);\n  }\n}"}
{"ids": "44735", "raw_code": "public static boolean isSameElementType(ASTNode node1,ASTNode node2){\n  return node1 != null && node2 != null && node1.getElementType() == node1.getElementType();\n}"}
{"ids": "21153", "raw_code": "@Override public LogMessage readNextLogMessage(){\n  try {\n    if (reader == null) {\n      return null;\n    }\n    while (true) {\n      String line=reader.readLine();\n      if (line == null) {\n        close();\n        if (currentLog != null && matchRegex(currentLog)) {\n          incrementLogCount(currentLog);\n          return currentLog;\n        }\n        return null;\n      }\n      fileLineNumber++;\n      LogMessage nextLog=null;\n      if (parser != null) {\n        nextLog=parser.parseLine(line,request);\n      }\n else {\n        for (        LogParser parser : parserTable) {\n          nextLog=parser.parseLine(line,request);\n          if (!nextLog.isContinuation()) {\n            this.parser=parser;\n            break;\n          }\n        }\n        if (nextLog == null || nextLog.isContinuation()) {\n          status.appendInfo(this.filePath,fileLineNumber);\n          continue;\n        }\n      }\n      if (nextLog.isContinuation()) {\n        if (currentLog != null) {\n          currentLog.appendMessage(LogUtil.stringToBytes(line));\n        }\n      }\n else       if (nextLog.isRejected()) {\n        if (currentLog != null) {\n          LogMessage returnedLog=currentLog;\n          currentLog=null;\n          if (matchRegex(returnedLog)) {\n            incrementLogCount(returnedLog);\n            return returnedLog;\n          }\n        }\n      }\n else       if (nextLog.isRejectedLast()) {\n        if (currentLog != null) {\n          LogMessage returnedLog=currentLog;\n          currentLog=null;\n          if (matchRegex(returnedLog)) {\n            incrementLogCount(returnedLog);\n            return returnedLog;\n          }\n        }\n        break;\n      }\n else {\n        if (currentLog != null) {\n          LogMessage returnedLog=currentLog;\n          currentLog=nextLog;\n          if (returnedLog.isHeader() && currentLog.isHeader()) {\n            continue;\n          }\n          if (matchRegex(returnedLog)) {\n            incrementLogCount(returnedLog);\n            return returnedLog;\n          }\n        }\n else {\n          currentLog=nextLog;\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    status.appendErrFileName(filePath);\n  }\n  return null;\n}"}
{"ids": "12615", "raw_code": "private void loadBinary(DataInputStream is) throws IOException {\n  if (is.readInt() != MAGIC) {\n    throw new Error(\"Bad magic in db\");\n  }\n  if (is.readInt() != VERSION) {\n    throw new Error(\"Bad VERSION in db\");\n  }\n  continuityWeight=is.readInt();\n  optimalCoupling=is.readInt();\n  extendSelections=is.readInt();\n  joinMethod=is.readInt();\n  joinWeightShift=is.readInt();\n  int weightLength=is.readInt();\n  joinWeights=new int[weightLength];\n  for (int i=0; i < joinWeights.length; i++) {\n    joinWeights[i]=is.readInt();\n  }\n  int unitsLength=is.readInt();\n  units=new DatabaseClusterUnit[unitsLength];\n  for (int i=0; i < units.length; i++) {\n    units[i]=new DatabaseClusterUnit(is);\n  }\n  int unitTypesLength=is.readInt();\n  unitTypes=new UnitType[unitTypesLength];\n  for (int i=0; i < unitTypes.length; i++) {\n    unitTypes[i]=new UnitType(is);\n  }\n  sts=new SampleSet(is);\n  mcep=new SampleSet(is);\n  int numCarts=is.readInt();\n  cartMap=new HashMap();\n  for (int i=0; i < numCarts; i++) {\n    String name=Utilities.getString(is);\n    CART cart=CARTImpl.loadBinary(is);\n    cartMap.put(name,cart);\n    if (defaultCart == null) {\n      defaultCart=cart;\n    }\n  }\n}"}
{"ids": "14057", "raw_code": "protected boolean isIDPProxyEnabled(FSAuthnRequest authnRequest) throws FSException {\n  if (authnRequest.getMinorVersion() != IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {\n    return false;\n  }\n  FSScoping scoping=authnRequest.getScoping();\n  if (scoping != null && scoping.getProxyCount() == 0) {\n    return false;\n  }\n  String enabledString=IDFFMetaUtils.getFirstAttributeValueFromConfig(spConfig,IFSConstants.ENABLE_IDP_PROXY);\n  if (enabledString != null && enabledString.equalsIgnoreCase(\"true\")) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "67326", "raw_code": "private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {\n  File tempRules=copyToTempFile(prolog,tempDir);\n  try {\n    Compiler comp=new Compiler();\n    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());\n  }\n  finally {\n    tempRules.delete();\n  }\n}"}
{"ids": "40606", "raw_code": "public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {\n  LOG.info(\"build()\");\n  dictionary=dictionaryFactory.create(core,searcher);\n  lookup.build(dictionary);\n  if (storeDir != null) {\n    File target=new File(storeDir,factory.storeFileName());\n    if (!lookup.store(new FileOutputStream(target))) {\n      LOG.error(\"Store Lookup build failed\");\n    }\n else {\n      LOG.info(\"Stored suggest data to: \" + target.getAbsolutePath());\n    }\n  }\n}"}
{"ids": "59912", "raw_code": "public void createDiskAsync(final String projectId,final DiskCreateSpec diskCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {\n  final String path=String.format(\"%s/%s/disks\",getBasePath(),projectId);\n  createObjectAsync(path,serializeObjectAsJson(diskCreateSpec),responseCallback);\n}"}
{"ids": "4715", "raw_code": "@Override public boolean domainMatch(final String host,final String domain){\n  return host.endsWith(domain);\n}"}
{"ids": "46826", "raw_code": "public synchronized void disableAttribute(String name){\n  enabledAttributes.removeElement(name);\n}"}
{"ids": "46920", "raw_code": "public void push(final Handle handle){\n  mv.visitLdcInsn(handle);\n}"}
{"ids": "25730", "raw_code": "public static IFitsHeader lookup(String key){\n  int keyLength=key.length();\n  if (keyLength > 0 && Character.isDigit(key.charAt(keyLength - 1))) {\n    StringBuilder builder=new StringBuilder();\n    for (int index=0; index < keyLength; index++) {\n      char character=key.charAt(index);\n      if (Character.isDigit(character)) {\n        if (builder.charAt(builder.length() - 1) != 'n') {\n          builder.append('n');\n        }\n      }\n else {\n        builder.append(character);\n      }\n    }\n    return STANDARD_KEYS.get(builder.toString());\n  }\n  return STANDARD_KEYS.get(key);\n}"}
{"ids": "12306", "raw_code": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {\n    sb.append((char)bb.get(0));\n    return i + 2;\n  }\n else {\n    CharBuffer cb=UTF_8_CHARSET.decode(bb);\n    sb.append(cb.toString());\n    return i + bb.limit() * 3 - 1;\n  }\n}"}
{"ids": "23238", "raw_code": "public void start(){\n  if (sLogger.isActivated()) {\n    sLogger.info(\"Start address book monitoring\");\n  }\n  mCleanupExecutor=Executors.newSingleThreadExecutor();\n  if (!mObserverIsRegistered) {\n    mContactsContractObserver=new ContactsContractObserver(new Handler());\n    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);\n    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);\n    mContactsContractCursor.registerContentObserver(mContactsContractObserver);\n    mObserverIsRegistered=true;\n  }\n}"}
{"ids": "56112", "raw_code": "public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){\n  mSinks.put(sourceUrn,sinks);\n  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size());\n}"}
{"ids": "8623", "raw_code": "public User toEntity(UserDTO dto){\n  return toEntity(dto,1);\n}"}
{"ids": "71629", "raw_code": "protected void writeExternalForeignKeyDropStmt(Table table,ForeignKey foreignKey,StringBuilder ddl){\n  writeTableAlterStmt(table,ddl);\n  ddl.append(\"DROP CONSTRAINT \");\n  printIdentifier(getForeignKeyName(table,foreignKey),ddl);\n  printEndOfStatement(ddl);\n}"}
{"ids": "74622", "raw_code": "public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {\n  Long quit_time=System.currentTimeMillis() + timeout_ms;\n  if (fileLock != null && fileLock.isValid()) {\n    return;\n  }\n  do {\n    try {\n      fileLock=fileToLock.tryLock();\n      return;\n    }\n catch (    OverlappingFileLockException e) {\n      Thread.sleep(1000);\n    }\n  }\n while (System.currentTimeMillis() < quit_time);\n  throw new TimeoutException();\n}"}
{"ids": "25717", "raw_code": "@Deprecated public void pointToData(Data o) throws FitsException {\n  o.fillHeader(this);\n}"}
{"ids": "60270", "raw_code": "@NotNull protected VirtualFile[] collectAffectedFiles(@NotNull Project project,@NotNull VirtualFile[] files){\n  List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length);\n  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);\n  for (  VirtualFile file : files) {\n    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {\n      affectedFiles.add(file);\n    }\n else     if (file.isDirectory() && isRecursive()) {\n      addChildren(project,affectedFiles,file);\n    }\n  }\n  return VfsUtilCore.toVirtualFileArray(affectedFiles);\n}"}
{"ids": "54198", "raw_code": "protected void update(int length){\n  tickLabelValues.clear();\n  tickLabels.clear();\n  tickLabelPositions.clear();\n  if (scale.isLogScaleEnabled()) {\n    updateTickLabelForLogScale(length);\n  }\n else {\n    updateTickLabelForLinearScale(length);\n  }\n  updateTickVisibility();\n  updateTickLabelMaxLengthAndHeight();\n}"}
{"ids": "60444", "raw_code": "private static boolean isWithinBounds(VisualPosition targetPosition,VisualPosition startPosition,VisualPosition endPosition){\n  return targetPosition.line >= startPosition.line && targetPosition.line <= endPosition.line && targetPosition.column >= startPosition.column && targetPosition.column <= endPosition.column;\n}"}
{"ids": "28112", "raw_code": "static public void assertStatementIndicesConsistent(final AbstractTripleStore db,final int maxerrors){\n  if (log.isInfoEnabled())   log.info(\"Verifying statement indices\");\n  final AtomicInteger nerrs=new AtomicInteger(0);\n  final int from, to;\n  if (db.getSPOKeyArity() == 3) {\n    from=SPOKeyOrder.FIRST_TRIPLE_INDEX;\n    to=SPOKeyOrder.LAST_TRIPLE_INDEX;\n  }\n else {\n    from=SPOKeyOrder.FIRST_QUAD_INDEX;\n    to=SPOKeyOrder.LAST_QUAD_INDEX;\n  }\n  for (int i=from; i <= to; i++) {\n    for (int j=from; j <= to; j++) {\n      if (i <= j) {\n        continue;\n      }\n      assertSameStatements(db,SPOKeyOrder.valueOf(i),SPOKeyOrder.valueOf(j),nerrs,maxerrors);\n    }\n  }\n  assertEquals(0,nerrs.get());\n}"}
{"ids": "82678", "raw_code": "public void show(@IdRes final int itemId){\n  map.add(itemId);\n  navigation.invalidateBadge(itemId);\n}"}
{"ids": "75492", "raw_code": "public Options put(String option,Integer value){\n  if (value == null) {\n    return remove(option);\n  }\n  options.put(option,value.toString());\n  return this;\n}"}
{"ids": "24768", "raw_code": "private int determineTargetPage(int currentPage,float pageOffset,int velocity,int deltaX){\n  int targetPage;\n  if (Math.abs(deltaX) > flingDistance && Math.abs(velocity) > minimumVelocity) {\n    if (virtualPos < 0) {\n      targetPage=velocity > 0 ? currentPage : currentPage + 1;\n    }\n else {\n      targetPage=velocity > 0 ? currentPage + 1 : currentPage;\n    }\n  }\n else {\n    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;\n    targetPage=(int)(currentPage + pageOffset + truncator);\n  }\n  if (items.size() > 0) {\n    final ItemInfo firstItem=items.get(0);\n    final ItemInfo lastItem=items.get(items.size() - 1);\n    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));\n  }\n  if (targetPage > currentPage && onCardChangeListener != null) {\n    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);\n  }\n  return targetPage;\n}"}
{"ids": "8888", "raw_code": "public void disable(BluetoothAdapter adapter){\n  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);\n  long start=-1;\n  BluetoothReceiver receiver=getBluetoothReceiver(mask);\n  int state=adapter.getState();\nswitch (state) {\ncase BluetoothAdapter.STATE_OFF:\n    assertFalse(adapter.isEnabled());\n  removeReceiver(receiver);\nreturn;\ncase BluetoothAdapter.STATE_TURNING_ON:\nassertFalse(adapter.isEnabled());\nstart=System.currentTimeMillis();\nbreak;\ncase BluetoothAdapter.STATE_ON:\nassertTrue(adapter.isEnabled());\nstart=System.currentTimeMillis();\nassertTrue(adapter.disable());\nbreak;\ncase BluetoothAdapter.STATE_TURNING_OFF:\nassertFalse(adapter.isEnabled());\nmask=0;\nbreak;\ndefault :\nremoveReceiver(receiver);\nfail(String.format(\"disable() invalid state: state=%d\",state));\n}\nlong s=System.currentTimeMillis();\nwhile (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {\nstate=adapter.getState();\nif (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {\nassertFalse(adapter.isEnabled());\nlong finish=receiver.getCompletedTime();\nif (start != -1 && finish != -1) {\nwriteOutput(String.format(\"disable() completed in %d ms\",(finish - start)));\n}\n else {\nwriteOutput(\"disable() completed\");\n}\nremoveReceiver(receiver);\nreturn;\n}\nsleep(POLL_TIME);\n}\nint firedFlags=receiver.getFiredFlags();\nremoveReceiver(receiver);\nfail(String.format(\"disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)\",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));\n}"}
{"ids": "62233", "raw_code": "public static String toRegex(String glob,String separator){\n  checkNotNull(separator,\"separator must be non-null\");\n  checkArgument(separator.length() == 1,\"separator must be a single character: %s\",separator);\n  return toRegex(glob,separator.charAt(0));\n}"}
{"ids": "16330", "raw_code": "public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){\n  int len=str.length();\n  if (len == 0) {\n    return new String[0];\n  }\n  List<String> list=new ArrayList<String>();\n  int i=0;\n  int start=0;\n  boolean match=false;\n  while (i < len) {\n    if (str.charAt(i) == '\\\\') {\n      match=true;\n      i+=2;\n    }\n else     if (str.charAt(i) == separatorChar) {\n      if (retainEmpty || match) {\n        list.add(str.substring(start,i));\n        match=false;\n      }\n      start=++i;\n    }\n else {\n      match=true;\n      i++;\n    }\n  }\n  if (retainEmpty || match) {\n    list.add(str.substring(start,i));\n  }\n  return list.toArray(new String[list.size()]);\n}"}
{"ids": "42376", "raw_code": "private static HashMap<BasicBlockPair,HashSet<Register>> findSplitPoints(IR ir,LiveAnalysis live,LSTGraph lst){\n  HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10);\n  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {\n    LSTNode node=(LSTNode)e.nextElement();\n    BasicBlock header=node.getHeader();\n    BitVector loop=node.getLoop();\n    if (loop == null)     continue;\n    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {\n      BasicBlock bb=in.nextElement();\n      if (loop.get(bb.getNumber()))       continue;\n      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);\n      for (      Register r : liveRegisters) {\n        if (r.isSymbolic()) {\n          HashSet<Register> s=findOrCreateSplitSet(result,bb,header);\n          s.add(r);\n        }\n      }\n    }\n    for (int i=0; i < loop.length(); i++) {\n      if (loop.get(i)) {\n        BasicBlock bb=ir.getBasicBlock(i);\n        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {\n          BasicBlock dest=out.nextElement();\n          if (loop.get(dest.getNumber()))           continue;\n          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);\n          for (          Register r : liveRegisters) {\n            if (r.isSymbolic()) {\n              HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);\n              s.add(r);\n            }\n          }\n        }\n      }\n    }\n  }\n  addEntriesForInfrequentBlocks(ir,live,result);\n  return result;\n}"}
{"ids": "81986", "raw_code": "public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){\n  System.arraycopy(sourceArray,0,destinationArray,0,offset);\n  System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1);\n}"}
{"ids": "52674", "raw_code": "@SuppressWarnings(\"unchecked\") public DictionaryAdapter(Context context,File dbPath,String dbName,String defaultTable){\n  mContext=context;\n  mDbName=dbName;\n  mDefaultTable=defaultTable;\n  mDbPath=dbPath;\n  mDbFile=new File(dbPath,mDbName);\n  if (mDbFile.exists()) {\n    open();\n  }\n}"}
{"ids": "10938", "raw_code": "public boolean handleFile(File file){\n  if (DEBUG) {\n    logger.fine(\"searching finds: \" + file.getAbsolutePath());\n  }\n  filenames.add(file);\n  return true;\n}"}
{"ids": "83406", "raw_code": "public boolean looksLikeNumberComing(){\n  if (n >= s.length())   return false;\n  return Character.isDigit(s.charAt(n));\n}"}
{"ids": "51528", "raw_code": "public short readShort() throws IOException {\n  return primitiveTypes.readShort();\n}"}
{"ids": "51491", "raw_code": "public void print(int inum){\n  print(String.valueOf(inum));\n}"}
{"ids": "37419", "raw_code": "public static <NodeType extends IViewNode<?>>ZyProximityNode<?> createProximityNode(final Graph2D graph,final ZyGraphNode<?> attachedNode,final int degree,final boolean isIncoming){\n  Preconditions.checkNotNull(graph,\"Graph argument can not be null\");\n  Preconditions.checkNotNull(attachedNode,\"Target node argument can not be null\");\n  final ZyLabelContent labelcontent=new ZyLabelContent(null);\n  labelcontent.addLineContent(new ZyLineContent(String.valueOf(degree),new Font(\"New Courier\",Font.PLAIN,12),null));\n  final ZyProximityNodeRealizer<NodeType> r=new ZyProximityNodeRealizer<NodeType>(labelcontent);\n  final Node node=graph.createNode(r);\n  @SuppressWarnings(\"unchecked\") final ZyProximityNode<NodeType> infoNode=new ZyProximityNode<NodeType>(node,r,(ZyGraphNode<NodeType>)attachedNode,isIncoming);\n  final ZyNodeData<ZyProximityNode<NodeType>> data=new ZyNodeData<ZyProximityNode<NodeType>>(infoNode);\n  r.setUserData(data);\n  return infoNode;\n}"}
{"ids": "21413", "raw_code": "public static boolean isZoningRequired(DbClient dbClient,URI varrayUri){\n  if (varrayUri != null) {\n    VirtualArray nh=dbClient.queryObject(VirtualArray.class,varrayUri);\n    if (nh != null) {\n      return isZoningRequired(dbClient,nh);\n    }\n  }\n  return false;\n}"}
{"ids": "6919", "raw_code": "protected CCAnimation(String name,float delay,ArrayList<CCSpriteFrame> frames){\n  delay_=delay;\n  name_=name;\n  frames_=new ArrayList<CCSpriteFrame>();\n  if (frames != null)   frames_.addAll(frames);\n}"}
{"ids": "10593", "raw_code": "private void navigateToDump(){\n  TreePath currentPath=tree.getSelectionPath();\n  tree.setSelectionPath(currentPath.getParentPath());\n  tree.scrollPathToVisible(currentPath.getParentPath());\n}"}
{"ids": "33466", "raw_code": "public synchronized void addMessages(ArrayList<SmsMmsMessage> newMessages){\n  if (newMessages != null) {\n    messages.addAll(0,newMessages);\n    UpdateMessageCount();\n  }\n}"}
{"ids": "55811", "raw_code": "protected void drawCenterText(Canvas c){\n  CharSequence centerText=mChart.getCenterText();\n  if (mChart.isDrawCenterTextEnabled() && centerText != null) {\n    MPPointF center=mChart.getCenterCircleBox();\n    MPPointF offset=mChart.getCenterTextOffset();\n    float x=center.x + offset.x;\n    float y=center.y + offset.y;\n    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();\n    RectF holeRect=mRectBuffer[0];\n    holeRect.left=x - innerRadius;\n    holeRect.top=y - innerRadius;\n    holeRect.right=x + innerRadius;\n    holeRect.bottom=y + innerRadius;\n    RectF boundingRect=mRectBuffer[1];\n    boundingRect.set(holeRect);\n    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;\n    if (radiusPercent > 0.0) {\n      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);\n    }\n    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {\n      mCenterTextLastBounds.set(boundingRect);\n      mCenterTextLastValue=centerText;\n      float width=mCenterTextLastBounds.width();\n      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);\n    }\n    float layoutHeight=mCenterTextLayout.getHeight();\n    c.save();\n    if (Build.VERSION.SDK_INT >= 18) {\n      Path path=mDrawCenterTextPathBuffer;\n      path.reset();\n      path.addOval(holeRect,Path.Direction.CW);\n      c.clipPath(path);\n    }\n    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);\n    mCenterTextLayout.draw(c);\n    c.restore();\n    MPPointF.recycleInstance(center);\n    MPPointF.recycleInstance(offset);\n  }\n}"}
{"ids": "11675", "raw_code": "protected void groupFrames(Vector<Frame> frames,Vector<Group> groups,boolean isDchum) throws MakeTocException {\n  Frame frame;\n  Group group;\n  int groupCount;\n  int nFrames=frames.size();\n  Debug.message(\"maketoc\",\"MakeToc: *** grouping frames ***\");\n  for (int i=0; i < nFrames; i++) {\n    Debug.message(\"maketocdetail\",\"MakeToc: group addition, starting outer loop\");\n    frame=(Frame)frames.elementAt(i);\n    if (!frame.marked) {\n      groupCount=groups.size();\n      group=new Group();\n      group.left=maxSide / 2;\n      group.right=group.left + 1;\n      group.top=maxSide / 2;\n      group.bottom=group.top + 1;\n      group.horiz_pos[group.top]=frame.top;\n      group.horiz_pos[group.bottom]=frame.bottom;\n      group.vert_pos[group.left]=frame.left;\n      group.vert_pos[group.right]=frame.right;\n      group.h_interval=frame.h_interval;\n      group.v_interval=frame.v_interval;\n      group.h_resolution=frame.h_resolution;\n      group.v_resolution=frame.v_resolution;\n      group.scale=frame.scale;\n      group.zone=frame.zone;\n      group.cib=frame.cib;\n      group.cdted=frame.cdted;\n      frame.x=group.left;\n      frame.y=group.top;\n      frame.group=groupCount;\n      frame.marked=true;\n      Debug.message(\"maketocdetail\",\"Maketoc.groupFrames: created group \" + groupCount + \" for frame \"+ i+ \", - \"+ frame.filename+ \" checking other frames for neighbors\");\n      if (!isDchum) {\n        for (int j=0; j < nFrames; j++) {\n          if (i == j) {\n            Debug.message(\"maketocdetail\",\"Maketoc.groupFrames: inner loop, i = j = \" + i + \", frame that created group added to group, expecting false return\");\n            continue;\n          }\n          Frame f=(Frame)frames.elementAt(j);\n          if (addFrameToGroup(group,f,groupCount)) {\n            Debug.message(\"maketocdetail\",\"Maketoc.groupFrames: added frame \" + j + \" to group \"+ groupCount);\n            continue;\n          }\n        }\n      }\n      Debug.message(\"maketocdetail\",\"Maketoc.groupFrames: adding another group - \" + groupCount + \" *******************\\n\\n\");\n      groups.add(group);\n    }\n    fireProgressUpdate(ProgressEvent.UPDATE,\"Organizing frames\",i,nFrames);\n  }\n  if (Debug.debugging(\"maketoc\")) {\n    Debug.output(\"MakeToc: Number of boundary rectangles (groups): \" + groups.size());\n  }\n}"}
{"ids": "72364", "raw_code": "public double doubleValue(){\n  return d.doubleValue();\n}"}
{"ids": "8388", "raw_code": "public static ObjectOutputStream newObjectOutputStream(Path self) throws IOException {\n  return new ObjectOutputStream(Files.newOutputStream(self));\n}"}
{"ids": "34204", "raw_code": "public void add(final CertificateValidity certificateValidity){\n  certificateValidityList.add(certificateValidity);\n}"}
{"ids": "14694", "raw_code": "public void addPolicyListener(PolicyListener policyListener){\n  policyCache.addPolicyListener(policyListener);\n}"}
{"ids": "44882", "raw_code": "public static Result verify(String sid,String code){\n  String id=\"//captcha/\" + sid;\n  Code c=(Code)Cache.get(id);\n  if (c == null) {\n    log.warn(\"no code in cache, sid=\" + sid);\n    return Result.badcode;\n  }\n else   if (!X.isSame(code,c.code)) {\n    log.warn(\"is not same, code.server=\" + c.code + \", code.client=\"+ code);\n    return Result.badcode;\n  }\n else   if (c.expired < System.currentTimeMillis()) {\n    log.warn(\"expired, expired=\" + c.expired);\n    return Result.expired;\n  }\n  return Result.ok;\n}"}
{"ids": "36839", "raw_code": "protected static INaviRawModule findRawModule(final int rawModuleId,final List<INaviRawModule> rawModules){\n  Preconditions.checkArgument(rawModuleId > 0,\"Raw module id %s must be positive integer\",rawModuleId);\n  Preconditions.checkNotNull(rawModules,\"IE02263: raw modules argument can not be null\");\n  for (  final INaviRawModule rawModule : rawModules) {\n    if (rawModule.getId() == rawModuleId) {\n      return rawModule;\n    }\n  }\n  throw new IllegalStateException(\"IE00160: Could not find raw module\");\n}"}
{"ids": "68200", "raw_code": "public static Object extractTypeChecked(List<Object> args,int i,Class clazz,Function<List<Object>,Object> extractFunc){\n  if (args.size() < i + 1) {\n    return null;\n  }\n else   if (clazz.isInstance(args.get(i))) {\n    return extractFunc.apply(args);\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "47517", "raw_code": "@Override public JapaneseDate dateYearDay(int prolepticYear,int dayOfYear){\n  return new JapaneseDate(LocalDate.ofYearDay(prolepticYear,dayOfYear));\n}"}
{"ids": "48367", "raw_code": "private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {\n  if (ks.containsAlias(alias) == false) {\n    MessageFormat form=new MessageFormat(rb.getString(\"Alias.alias.does.not.exist\"));\n    Object[] source={alias};\n    throw new Exception(form.format(source));\n  }\n  PasswordProtection pp=null;\n  Entry entry;\n  try {\n    entry=ks.getEntry(alias,pp);\n    pkey=null;\n  }\n catch (  UnrecoverableEntryException une) {\n    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {\n      throw une;\n    }\n    if (pkey != null) {\n      pp=new PasswordProtection(pkey);\n      entry=ks.getEntry(alias,pp);\n    }\n else {\n      try {\n        pp=new PasswordProtection(pstore);\n        entry=ks.getEntry(alias,pp);\n        pkey=pstore;\n      }\n catch (      UnrecoverableEntryException une2) {\n        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {\n          throw une2;\n        }\n else {\n          pkey=getKeyPasswd(alias,null,null);\n          pp=new PasswordProtection(pkey);\n          entry=ks.getEntry(alias,pp);\n        }\n      }\n    }\n  }\n  return Pair.of(entry,pkey);\n}"}
{"ids": "34885", "raw_code": "URLClassLoader newLoader(URL base){\n  return new URLClassLoader(new URL[]{base});\n}"}
{"ids": "40262", "raw_code": "public Wiser(){\n  this.server=new SMTPServer(new SimpleMessageListenerAdapter(this));\n}"}
{"ids": "32516", "raw_code": "protected static int[] concat(@Nullable int[] arr,int... obj){\n  int[] newArr;\n  if (arr == null || arr.length == 0)   newArr=obj;\n else {\n    newArr=Arrays.copyOf(arr,arr.length + obj.length);\n    System.arraycopy(obj,0,newArr,arr.length,obj.length);\n  }\n  return newArr;\n}"}
{"ids": "17354", "raw_code": "public void truckCamera(float size){\n  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));\n}"}
{"ids": "30069", "raw_code": "public void shutdown(){\n  scheduledExecutorService.shutdownNow();\n}"}
{"ids": "9383", "raw_code": "protected int splitListIndex(List<Pair<Double,Integer>> S){\n  return S.size() / 2;\n}"}
{"ids": "73937", "raw_code": "public static synchronized void addPropertyChangeListener(PropertyChangeListener l){\n  if (!listeners.contains(l)) {\n    listeners.add(l);\n  }\n}"}
{"ids": "13644", "raw_code": "private static void cleanDirectory(File path){\n  if (path == null)   return;\n  if (path.exists()) {\n    for (    File f : path.listFiles()) {\n      if (f.isDirectory())       cleanDirectory(f);\n      f.delete();\n    }\n  }\n}"}
{"ids": "32200", "raw_code": "private GridCacheVersion minVersion(Iterable<IgniteTxEntry> entries,GridCacheVersion min,IgniteInternalTx tx){\n  for (  IgniteTxEntry txEntry : entries) {\n    GridCacheEntryEx cached=txEntry.cached();\n    assert txEntry.isRead() || !cached.obsolete(tx.xidVersion()) : \"Invalid obsolete version for transaction [entry=\" + cached + \", tx=\"+ tx+ ']';\n    for (    GridCacheMvccCandidate cand : cached.remoteMvccSnapshot())     if (min == null || cand.version().isLess(min))     min=cand.version();\n  }\n  return min;\n}"}
{"ids": "4458", "raw_code": "public DimensionedScalar(String fieldValue) throws IllegalArgumentException {\n  super(\"\",\"\");\n  Matcher matcher=PATTERN.matcher(fieldValue);\n  if (matcher.find()) {\n    String name=matcher.group(1);\n    String dimensions=matcher.group(2);\n    String value=matcher.group(3);\n    setName(name);\n    setValue(value);\n    this.dimensions=new Dimensions(dimensions);\n  }\n else {\n    throw new DictionaryException(\"CANNOT PARSE:  >\" + fieldValue + \"<\");\n  }\n}"}
{"ids": "66397", "raw_code": "public void characters(char ch[],int start,int length) throws SAXException {\n  m_valueBuffer.append(ch,start,length);\n}"}
{"ids": "37984", "raw_code": "protected double computeStdDev(Instance inst,Matrix k) throws Exception {\n  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;\n  double s=0;\n  int n=m_L.length;\n  for (int i=0; i < n; i++) {\n    double t=0;\n    for (int j=0; j < n; j++) {\n      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);\n    }\n    s+=t * k.get(i,0);\n  }\n  double sigma=m_delta;\n  if (kappa > s) {\n    sigma=Math.sqrt(kappa - s);\n  }\n  return sigma;\n}"}
{"ids": "62868", "raw_code": "public MultiplexManager(DataStore... dataStores){\n  this.dataStores=Arrays.asList(dataStores);\n}"}
{"ids": "80951", "raw_code": "public boolean matchesRawNamePattern(Object item){\n  String prefix=patternMatcher.getPattern();\n  String text=getElementName(item);\n  if (text == null)   return false;\n  int textLength=text.length();\n  int prefixLength=prefix.length();\n  if (textLength < prefixLength) {\n    return false;\n  }\n  for (int i=prefixLength - 1; i >= 0; i--) {\n    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;\n  }\n  return true;\n}"}
{"ids": "49625", "raw_code": "public static @Nonnull <T>T valueOrDefault(@Nullable T value,@Nonnull T defaultValue){\n  return value == null ? defaultValue : value;\n}"}
{"ids": "14091", "raw_code": "public String chooseServerAlias(String keyType,Principal[] issuers,Socket socket){\n  return defaultX509KM.chooseServerAlias(keyType,issuers,socket);\n}"}
{"ids": "84784", "raw_code": "public static double pdf(double x,double shape,double scale,double factor){\n  if (x <= 0)   return 0.0;\n  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));\n  return factor * a;\n}"}
{"ids": "66030", "raw_code": "public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){\n  Integer C_Charge_ID=(Integer)value;\n  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return \"\";\n  String sql=\"SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?\";\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  try {\n    pstmt=DB.prepareStatement(sql,null);\n    pstmt.setInt(1,C_Charge_ID.intValue());\n    rs=pstmt.executeQuery();\n    if (rs.next()) {\n      mTab.setValue(\"PriceEntered\",rs.getBigDecimal(1));\n    }\n  }\n catch (  SQLException e) {\n    log.log(Level.SEVERE,sql,e);\n    return e.getLocalizedMessage();\n  }\n finally {\n    DB.close(rs,pstmt);\n    rs=null;\n    pstmt=null;\n  }\n  return tax(ctx,WindowNo,mTab,mField,value);\n}"}
{"ids": "35247", "raw_code": "protected Array<Actor> parse(){\n  actors=GdxArrays.newArray(Actor.class);\n  invokePreListeners(actors);\n  final StringBuilder builder=new StringBuilder();\n  while (templateReader.hasNextCharacter()) {\n    final char character=templateReader.nextCharacter();\n    if (character == syntax.getArgumentOpening()) {\n      processArgument();\n    }\n else     if (character == syntax.getTagOpening()) {\n      if (isNextCharacterCommentOpening()) {\n        processComment();\n        continue;\n      }\n      if (currentParentTag != null) {\n        currentParentTag.handleDataBetweenTags(builder);\n      }\n      Strings.clearBuilder(builder);\n      processTag(builder);\n    }\n else {\n      builder.append(character);\n    }\n  }\n  if (currentParentTag != null) {\n    throwError('\"' + currentParentTag.getTagName() + \"\\\" tag was never closed.\");\n  }\n  invokePortListeners(actors);\n  return actors;\n}"}
{"ids": "67972", "raw_code": "public void flush() throws IOException {\n  WspUtil.writeUint8(os_,0x01);\n  writePublicIdentifier(os_,publicID_);\n  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);\n  writeStringTable(os_);\n  wbxmlBody_.close();\n  wbxmlBody_.writeTo(os_);\n  os_.flush();\n}"}
{"ids": "35342", "raw_code": "private Token toASIToken(ILeafNode leaf){\n  if (leaf.isHidden()) {\n    return newSemicolonToken(leaf);\n  }\n else {\n    if (!leafNodes.hasNext()) {\n      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);\n      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);\n      if (tokenType == semicolonTokenType) {\n        return new CommonToken(semicolonTokenType,leaf.getText());\n      }\n      if (leaf.getTotalEndOffset() == endOffset) {\n        leafNodes=Iterators.emptyIterator();\n        return new CommonToken(tokenType,leaf.getText());\n      }\n      next=new CommonToken(semicolonTokenType,leaf.getText());\n      return new CommonToken(tokenType,leaf.getText());\n    }\n else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {\n      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);\n      next=new CommonToken(tokenType);\n      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());\n    }\n else {\n      return newSemicolonToken(leaf);\n    }\n  }\n}"}
{"ids": "59570", "raw_code": "@Override public PacketBuffer write(PacketBuffer buf){\n  values.forEach(null);\n  return buf;\n}"}
{"ids": "60394", "raw_code": "public final void registerFileType(@NotNull FileType type,@NonNls @Nullable String... defaultAssociatedExtensions){\n  List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>();\n  if (defaultAssociatedExtensions != null) {\n    for (    String extension : defaultAssociatedExtensions) {\n      matchers.add(new ExtensionFileNameMatcher(extension));\n    }\n  }\n  registerFileType(type,matchers);\n}"}
{"ids": "81771", "raw_code": "public int parseInt(String localeFormattedInteger){\n  return Integer.parseInt(localeFormattedInteger);\n}"}
{"ids": "14015", "raw_code": "public static RequestSecurityTokenResponse parseXML(String xml) throws WSFederationException {\n  Document doc=XMLUtils.toDOMDocument(xml,debug);\n  Element root=doc.getDocumentElement();\n  return new RequestSecurityTokenResponse(root);\n}"}
{"ids": "77948", "raw_code": "@Override public void requestResources(SamzaResourceRequest resourceRequest){\n  final int DEFAULT_PRIORITY=0;\n  log.info(\"Requesting resources on  \" + resourceRequest.getPreferredHost() + \" for container \"+ resourceRequest.getContainerID());\n  int memoryMb=resourceRequest.getMemoryMB();\n  int cpuCores=resourceRequest.getNumCores();\n  String containerLabel=yarnConfig.getContainerLabel();\n  String preferredHost=resourceRequest.getPreferredHost();\n  Resource capability=Resource.newInstance(memoryMb,cpuCores);\n  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);\n  AMRMClient.ContainerRequest issuedRequest;\n  if (preferredHost.equals(\"ANY_HOST\")) {\n    log.info(\"Making a request for ANY_HOST \" + preferredHost);\n    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);\n  }\n else {\n    log.info(\"Making a preferred host request on \" + preferredHost);\n    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);\n  }\nsynchronized (lock) {\n    requestsMap.put(resourceRequest,issuedRequest);\n    amClient.addContainerRequest(issuedRequest);\n  }\n}"}
{"ids": "64245", "raw_code": "private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){\n  int playerLevel=player.getLevel();\n  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();\n  for (  ExtractedItemsCollection collection : itemsCollections) {\n    if (collection.getMinLevel() > playerLevel) {\n      continue;\n    }\n    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {\n      continue;\n    }\n    result.add(collection);\n  }\n  return result;\n}"}
{"ids": "55613", "raw_code": "private void drawHost(Graphics2D g2){\n  Coord loc=node.getLocation();\n  if (drawCoverage && node.isRadioActive()) {\n    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();\n    interfaces.addAll(node.getInterfaces());\n    for (    NetworkInterface ni : interfaces) {\n      double range=ni.getTransmitRange();\n      Ellipse2D.Double coverage;\n      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));\n      g2.setColor(rangeColor);\n      g2.draw(coverage);\n    }\n  }\n  if (drawConnections) {\n    g2.setColor(conColor);\n    Coord c1=node.getLocation();\n    ArrayList<Connection> conList=new ArrayList<Connection>();\n    conList.addAll(node.getConnections());\n    for (    Connection c : conList) {\n      DTNHost otherNode=c.getOtherNode(node);\n      Coord c2;\n      if (otherNode == null) {\n        continue;\n      }\n      c2=otherNode.getLocation();\n      g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));\n    }\n  }\n  g2.setColor(hostColor);\n  g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));\n  if (isHighlighted()) {\n    g2.setColor(highlightedNodeColor);\n    g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);\n  }\n  if (drawNodeName) {\n    g2.setColor(hostNameColor);\n    g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));\n  }\n}"}
{"ids": "69526", "raw_code": "public boolean add(symbol sym) throws internal_error {\n  Object previous;\n  not_null(sym);\n  previous=_all.put(sym.name(),sym);\n  return previous == null;\n}"}
{"ids": "15674", "raw_code": "public final int size(){\n  if (GWT.isScript()) {\n    return jsArray.size();\n  }\n else {\n    return javaArray.size();\n  }\n}"}
{"ids": "76896", "raw_code": "public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){\n  if (isNumericallyIdentical(q)) {\n    for (    GeoPoint p : notablePoints) {\n      if (meetsAllBounds(p,bounds,moreBounds)) {\n        return true;\n      }\n    }\n    for (    GeoPoint p : moreNotablePoints) {\n      if (meetsAllBounds(p,bounds,moreBounds)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  final double lineVectorX=y * q.z - z * q.y;\n  final double lineVectorY=z * q.x - x * q.z;\n  final double lineVectorZ=x * q.y - y * q.x;\n  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {\n    return false;\n  }\n  double x0;\n  double y0;\n  double z0;\n  final double denomYZ=this.y * q.z - this.z * q.y;\n  final double denomXZ=this.x * q.z - this.z * q.x;\n  final double denomXY=this.x * q.y - this.y * q.x;\n  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {\n    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {\n      return false;\n    }\n    final double denom=1.0 / denomYZ;\n    x0=0.0;\n    y0=(-this.D * q.z - this.z * -q.D) * denom;\n    z0=(this.y * -q.D + this.D * q.y) * denom;\n  }\n else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {\n    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {\n      return false;\n    }\n    final double denom=1.0 / denomXZ;\n    x0=(-this.D * q.z - this.z * -q.D) * denom;\n    y0=0.0;\n    z0=(this.x * -q.D + this.D * q.x) * denom;\n  }\n else {\n    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {\n      return false;\n    }\n    final double denom=1.0 / denomXY;\n    x0=(-this.D * q.y - this.y * -q.D) * denom;\n    y0=(this.x * -q.D + this.D * q.x) * denom;\n    z0=0.0;\n  }\n  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;\n  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);\n  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;\n  final double BsquaredMinus=B * B - 4.0 * A * C;\n  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {\n    final double inverse2A=1.0 / (2.0 * A);\n    final double t=-B * inverse2A;\n    final double pointX=lineVectorX * t + x0;\n    final double pointY=lineVectorY * t + y0;\n    final double pointZ=lineVectorZ * t + z0;\n    for (    final Membership bound : bounds) {\n      if (!bound.isWithin(pointX,pointY,pointZ)) {\n        return false;\n      }\n    }\n    for (    final Membership bound : moreBounds) {\n      if (!bound.isWithin(pointX,pointY,pointZ)) {\n        return false;\n      }\n    }\n    return true;\n  }\n else   if (BsquaredMinus > 0.0) {\n    final double inverse2A=1.0 / (2.0 * A);\n    final double sqrtTerm=Math.sqrt(BsquaredMinus);\n    final double t1=(-B + sqrtTerm) * inverse2A;\n    final double t2=(-B - sqrtTerm) * inverse2A;\n    final double point1X=lineVectorX * t1 + x0;\n    final double point1Y=lineVectorY * t1 + y0;\n    final double point1Z=lineVectorZ * t1 + z0;\n    boolean point1Valid=true;\n    for (    final Membership bound : bounds) {\n      if (!bound.isWithin(point1X,point1Y,point1Z)) {\n        point1Valid=false;\n        break;\n      }\n    }\n    if (point1Valid) {\n      for (      final Membership bound : moreBounds) {\n        if (!bound.isWithin(point1X,point1Y,point1Z)) {\n          point1Valid=false;\n          break;\n        }\n      }\n    }\n    if (point1Valid) {\n      return true;\n    }\n    final double point2X=lineVectorX * t2 + x0;\n    final double point2Y=lineVectorY * t2 + y0;\n    final double point2Z=lineVectorZ * t2 + z0;\n    for (    final Membership bound : bounds) {\n      if (!bound.isWithin(point2X,point2Y,point2Z)) {\n        return false;\n      }\n    }\n    for (    final Membership bound : moreBounds) {\n      if (!bound.isWithin(point2X,point2Y,point2Z)) {\n        return false;\n      }\n    }\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "53536", "raw_code": "public double SumOutlinkAuthorityScore(Page page){\n  List<String> outLinks=page.getOutlinks();\n  double authScore=0;\n  for (int i=0; i < outLinks.size(); i++) {\n    Page outLink=pTable.get(outLinks.get(i));\n    if (outLink != null) {\n      authScore+=outLink.authority;\n    }\n  }\n  return authScore;\n}"}
{"ids": "47990", "raw_code": "public synchronized void end(){\n  graphicsToBeDrawn.close();\n  if (currentGraphics != null) {\n    graphicsDrawn.append(currentGraphics);\n  }\n  graphicsDrawn.closeWhenEmpty();\n  if (printerJobThread != null && printerJobThread.isAlive()) {\n    try {\n      printerJobThread.join();\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}"}
{"ids": "8984", "raw_code": "public List<FileStatus> browse(String filePath) throws Exception {\n  LOG.info(\"HDFS File Path   :  \" + filePath + \"   and EndPoint  : \"+ hdfsEndPoint);\n  FileSystem hdfsFileSystem=null;\n  FileStatus[] listStatus;\n  try {\n    Configuration config=createConfig();\n    hdfsFileSystem=getFileSystem(config);\n    Path path=new Path(filePath);\n    listStatus=hdfsFileSystem.listStatus(path);\n  }\n catch (  Exception ex) {\n    LOG.error(\" Exception when browsing files for the path \" + filePath,ex.getMessage());\n    throw new Exception(\" Exception When browsing Files in HDFS .. Message :  \" + ex.getMessage());\n  }\n finally {\n    if (hdfsFileSystem != null)     hdfsFileSystem.close();\n  }\n  return Arrays.asList(listStatus);\n}"}
{"ids": "68638", "raw_code": "public EipModelWizardInitialObjectCreationPage(String pageId){\n  super(pageId);\n}"}
{"ids": "16068", "raw_code": "private static void checkPermission() throws SecurityException {\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null) {\n    sm.checkPermission(new JodaTimePermission(\"CurrentTime.setProvider\"));\n  }\n}"}
{"ids": "14556", "raw_code": "private void storePassword(String password){\n  if (isStore && sharedState != null) {\n    sharedState.put(getPwdKey(),password);\n  }\n}"}
{"ids": "48099", "raw_code": "void deleteChild(PolicyNode childNode){\n  if (isImmutable) {\n    throw new IllegalStateException(\"PolicyNode is immutable\");\n  }\n  mChildren.remove(childNode);\n}"}
{"ids": "43519", "raw_code": "public ExternalProcessResult awaitTerminationAndResult(int timeoutMs,boolean destroyOnError) throws InterruptedException, TimeoutException, OperationCancellation, IOException {\n  awaitTermination(timeoutMs,destroyOnError);\n  return new ExternalProcessResult(process.exitValue(),getStdOutBytes(),getStdErrBytes());\n}"}
{"ids": "8363", "raw_code": "public void refreshInheritedMethods(Set modifiedSuperExpandos){\n  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {\n    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();\n    if (superExpando != this) {\n      refreshInheritedMethods(superExpando);\n    }\n  }\n}"}
{"ids": "7199", "raw_code": "public static List<Fragment> parsePlaceholder(String parseString) throws PlaceholderParseException {\n  List<Fragment> result=new ArrayList<Fragment>();\n  int currOutputIndex=0;\n  int currSearchIndex=0;\n  while (true) {\n    if (currSearchIndex == parseString.length()) {\n      break;\n    }\n    int startIndex=parseString.indexOf(\"${\",currSearchIndex);\n    if (startIndex == -1) {\n      if (currOutputIndex < parseString.length()) {\n        String endString=parseString.substring(currOutputIndex,parseString.length());\n        TextFragment textFragment=new TextFragment(endString);\n        result.add(textFragment);\n      }\n      break;\n    }\n    if (startIndex > 0) {\n      String textSoFar=parseString.substring(currOutputIndex,startIndex);\n      if (textSoFar.length() != 0) {\n        result.add(new TextFragment(textSoFar));\n      }\n    }\n    if ((startIndex > 0) && (parseString.charAt(startIndex - 1) == '$')) {\n      currOutputIndex=startIndex + 1;\n      currSearchIndex=startIndex + 1;\n      continue;\n    }\n    int endIndex=parseString.indexOf('}',startIndex);\n    if (endIndex == -1) {\n      throw new PlaceholderParseException(\"Syntax error in property or variable: '\" + parseString.substring(startIndex,parseString.length()) + \"'\");\n    }\n    String between=parseString.substring(startIndex + 2,endIndex);\n    ParameterFragment parameterFragment=new ParameterFragment(between);\n    result.add(parameterFragment);\n    currOutputIndex=endIndex + 1;\n    currSearchIndex=endIndex;\n  }\n  LinkedList<Fragment> fragments=new LinkedList<Fragment>();\n  fragments.add(result.get(0));\n  for (int i=1; i < result.size(); i++) {\n    Fragment fragment=result.get(i);\n    if (!(result.get(i) instanceof TextFragment)) {\n      fragments.add(fragment);\n      continue;\n    }\n    if (!(fragments.getLast() instanceof TextFragment)) {\n      fragments.add(fragment);\n      continue;\n    }\n    TextFragment textFragment=(TextFragment)fragments.getLast();\n    fragments.removeLast();\n    fragments.add(new TextFragment(textFragment.getValue() + fragment.getValue()));\n  }\n  return fragments;\n}"}
{"ids": "25404", "raw_code": "@Override protected void failed(){\n  relation.setCanceled(true);\n  super.failed();\n}"}
{"ids": "2975", "raw_code": "private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException {\n  if (uri.startsWith(\"/notebooks/\")) {\n    handleHtmlShowNotebooks(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/quotations/\")) {\n    handleHtmlShowQuotations(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/sources/\")) {\n    handleHtmlShowSources(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/source/\")) {\n    handleHtmlShowSource(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/notebook/\")) {\n    handleHtmlShowNotebook(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/search/\")) {\n    handleHtmlSearch(requestAndResponse);\n  }\n else   if (uri.equals(\"/help/\")) {\n    handleHtmlBasicHelp(requestAndResponse);\n  }\n else   if (uri.equals(\"/advancedHelp/\")) {\n    handleHtmlAdvancedHelp(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/help/\")) {\n    handleHtmlHelp(requestAndResponse);\n  }\n else   if (uri.equals(\"/backup/\")) {\n    handleHtmlUserBackupForm(requestAndResponse);\n  }\n else   if (uri.equals(\"/restore/\")) {\n    handleHtmlUserRestoreForm(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/account/\")) {\n    handleHtmlShowAccount(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/accounts/\")) {\n    handleHtmlShowAccounts(requestAndResponse);\n  }\n else   if (uri.equals(\"/shutdown/\")) {\n    handleHtmlShutdownForm(requestAndResponse);\n  }\n else   if (uri.equals(\"/clear/\")) {\n    handleHtmlClearForm(requestAndResponse);\n  }\n else   if (uri.equals(\"/onlineBackup/\")) {\n    handleHtmlOnlineBackupForm(requestAndResponse);\n  }\n else   if (uri.equals(\"/checkForErrors/\")) {\n    handleHtmlCheckForErrorsForm(requestAndResponse);\n  }\n else   if (uri.equals(\"/backups/\")) {\n    handleHtmlShowDBBackups(requestAndResponse);\n  }\n else   if (uri.equals(\"/offlineBackup/\")) {\n    handleHtmlOfflineDbBackupForm(requestAndResponse);\n  }\n else   if (uri.equals(\"/noteJson/\")) {\n    handleJsonShowEntry(requestAndResponse);\n  }\n else   if (uri.equals(\"/noteParentJson/\")) {\n    handleJsonShowEntryParent(requestAndResponse);\n  }\n else   if (uri.equals(\"/noteChildrenJson/\")) {\n    handleJsonShowEntryChildren(requestAndResponse);\n  }\n else   if (uri.equals(\"/searchNotesJson/\")) {\n    handleJsonSearchNotes(requestAndResponse);\n  }\n else   if (uri.equals(\"/newNotebook/\")) {\n    handleHtmlNewNotebookForm(requestAndResponse);\n  }\n else   if (uri.equals(\"/nothing/\")) {\n    handleHtmlNothing(requestAndResponse);\n  }\n else   if (uri.equals(\"/couldNotCreateNote/\")) {\n    handleHtmlCouldNotCreateNote(requestAndResponse);\n  }\n else   if (uri.equals(\"/restoreBackupCommand/\")) {\n    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);\n  }\n else   if (uri.equals(\"/signedOut/\")) {\n    handleHtmlShowSignedOut(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/changePassword/\")) {\n    handleHtmlChangePassword(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/changeAccount/\")) {\n    handleHtmlChangeAccount(requestAndResponse);\n  }\n else   if (uri.startsWith(\"/closeAccount/\")) {\n    handleHtmlCloseAccount(requestAndResponse);\n  }\n else   if (uri.equals(\"/isSignedIn/\")) {\n    handleJsonIsSignedIn(requestAndResponse);\n  }\n else   if (uri.equals(\"/restoreFrame/\")) {\n    handleHtmlUserRestoreFrame(requestAndResponse);\n  }\n else {\n    returnHtml404(requestAndResponse);\n  }\n}"}
{"ids": "10081", "raw_code": "private void changeAnnotationDocumentState(SourceDocument aSourceDocument,User aUser,AnnotationDocumentStateTransition aAnnotationDocumentStateTransition){\n  AnnotationDocument annotationDocument=repository.getAnnotationDocument(aSourceDocument,aUser);\n  annotationDocument.setState(AnnotationDocumentStateTransition.transition(aAnnotationDocumentStateTransition));\n  try {\n    repository.createAnnotationDocument(annotationDocument);\n  }\n catch (  IOException e) {\n    LOG.info(\"Unable to get the LOG file\");\n  }\n}"}
{"ids": "83326", "raw_code": "boolean removeEdge(SparseEdge e){\n  boolean removedEdge=edges.remove(e);\n  boolean removedNeighbour=neighbours.remove(e.getOpposite(this));\n  if (removedEdge && removedNeighbour)   return true;\n else   if (!removedEdge && !removedNeighbour)   return false;\n else   throw new RuntimeException(\"Graph connectivity appears to be inconsitent!\");\n}"}
{"ids": "61971", "raw_code": "public boolean hasDescendant(Pattern pattern){\n  Queue<BNode> nodesToProcess=new LinkedList<BNode>();\n  nodesToProcess.add(this);\n  while (!nodesToProcess.isEmpty()) {\n    BNode currentNode=nodesToProcess.poll();\n    for (    BNode descendantNode : currentNode.getOutputNodes()) {\n      Matcher matcher=pattern.matcher(descendantNode.getId());\n      if (matcher.matches()) {\n        return true;\n      }\n      if (!nodesToProcess.contains(descendantNode)) {\n        nodesToProcess.add(descendantNode);\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "49350", "raw_code": "private static void generateFiles(){\n  String[] classNames;\n  ResourceBundle rules, info;\n  info=ResourceBundle.getBundle(\"sun.text.resources.BreakIteratorInfo\",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);\n  classNames=info.getStringArray(\"BreakIteratorClasses\");\n  rules=ResourceBundle.getBundle(\"sun.text.resources.BreakIteratorRules\",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);\n  if (info.containsKey(\"CharacterData\")) {\n    generateDataFile(info.getString(\"CharacterData\"),rules.getString(\"CharacterBreakRules\"),classNames[0]);\n  }\n  if (info.containsKey(\"WordData\")) {\n    generateDataFile(info.getString(\"WordData\"),rules.getString(\"WordBreakRules\"),classNames[1]);\n  }\n  if (info.containsKey(\"LineData\")) {\n    generateDataFile(info.getString(\"LineData\"),rules.getString(\"LineBreakRules\"),classNames[2]);\n  }\n  if (info.containsKey(\"SentenceData\")) {\n    generateDataFile(info.getString(\"SentenceData\"),rules.getString(\"SentenceBreakRules\"),classNames[3]);\n  }\n}"}
{"ids": "50404", "raw_code": "public static boolean isCglibProxy(Object object){\n  return ClassUtils.isCglibProxyClass(object.getClass());\n}"}
{"ids": "77787", "raw_code": "public static boolean equals(boolean[] field1,boolean[] field2){\n  if (field1 == null || field1.length == 0) {\n    return field2 == null || field2.length == 0;\n  }\n else {\n    return Arrays.equals(field1,field2);\n  }\n}"}
{"ids": "36424", "raw_code": "public void toFront(final WorkflowAnnotation anno){\n  if (anno == null) {\n    throw new IllegalArgumentException(\"anno must not be null!\");\n  }\nsynchronized (lock) {\n    if (annotationsDrawOrder.remove(anno)) {\n      annotationsDrawOrder.add(anno);\n    }\n    if (annotationsEventOrder.remove(anno)) {\n      annotationsEventOrder.add(0,anno);\n    }\n  }\n}"}
{"ids": "73227", "raw_code": "public synchronized void addFrame(final Image image,final long frameDuration){\n  totalDuration+=frameDuration;\n  frames.add(new AnimFrame(image,totalDuration));\n}"}
{"ids": "52338", "raw_code": "public static String printCodePointAsString(int codePoint){\n  StringBuilder builder=new StringBuilder(12);\n  builder.append('\"');\n  try {\n    printStringCodePoint(builder,codePoint);\n  }\n catch (  IOException e) {\n    throw new Error(e);\n  }\n  builder.append('\"');\n  return builder.toString();\n}"}
{"ids": "56073", "raw_code": "private void cleanupMinidumpFile(){\n  if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) {\n    Log.w(TAG,\"Unable to mark \" + mFileToUpload + \" as uploaded.\");\n    if (!mFileToUpload.delete()) {\n      Log.w(TAG,\"Cannot delete \" + mFileToUpload);\n    }\n  }\n}"}
{"ids": "82899", "raw_code": "@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){\n  return extractThumbnail(source,width,height,OPTIONS_NONE);\n}"}
{"ids": "28790", "raw_code": "private void writePkgInfo() throws BuildException {\n  File pkgInfo=new File(mContentsDir,\"PkgInfo\");\n  PrintWriter writer=null;\n  try {\n    writer=new PrintWriter(new BufferedWriter(new FileWriter(pkgInfo)));\n    writer.print(bundleProperties.getCFBundlePackageType());\n    writer.println(bundleProperties.getCFBundleSignature());\n    writer.flush();\n  }\n catch (  IOException ex) {\n    throw new BuildException(\"Cannot create PkgInfo file: \" + ex);\n  }\n finally {\n    mFileUtils.close(writer);\n  }\n}"}
{"ids": "7322", "raw_code": "public EventBean[] toArray(){\n  if (firstEvent == null) {\n    return new EventBean[0];\n  }\n  if (additionalEvents == null) {\n    return new EventBean[]{firstEvent};\n  }\n  EventBean[] events=new EventBean[1 + additionalEvents.size()];\n  events[0]=firstEvent;\n  int count=1;\n  for (  EventBean theEvent : additionalEvents) {\n    events[count]=theEvent;\n    count++;\n  }\n  return events;\n}"}
{"ids": "48190", "raw_code": "private byte[] decode(DerInputStream in) throws IOException {\n  DerValue val=in.getDerValue();\n  byte[] derEncoding=val.toByteArray();\n  derEncoding[0]=DerValue.tag_SetOf;\n  DerInputStream derIn=new DerInputStream(derEncoding);\n  DerValue[] derVals=derIn.getSet(3,true);\n  PKCS9Attribute attrib;\n  ObjectIdentifier oid;\n  boolean reuseEncoding=true;\n  for (int i=0; i < derVals.length; i++) {\n    try {\n      attrib=new PKCS9Attribute(derVals[i]);\n    }\n catch (    ParsingException e) {\n      if (ignoreUnsupportedAttributes) {\n        reuseEncoding=false;\n        continue;\n      }\n else {\n        throw e;\n      }\n    }\n    oid=attrib.getOID();\n    if (attributes.get(oid) != null)     throw new IOException(\"Duplicate PKCS9 attribute: \" + oid);\n    if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException(\"Attribute \" + oid + \" not permitted in this attribute set\");\n    attributes.put(oid,attrib);\n  }\n  return reuseEncoding ? derEncoding : generateDerEncoding();\n}"}
{"ids": "9356", "raw_code": "@Override public CategoricalResults clone(){\n  CategoricalResults copy=new CategoricalResults(n);\n  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);\n  return copy;\n}"}
{"ids": "62932", "raw_code": "private boolean typeSpecialChar(char c){\nswitch (c) {\ncase '\\t':\n    controller.keyPress(KeyEvent.VK_TAB);\n  controller.keyRelease(KeyEvent.VK_TAB);\nreturn true;\ncase '\\n':\ncontroller.keyPress(KeyEvent.VK_ENTER);\ncontroller.keyRelease(KeyEvent.VK_ENTER);\nreturn true;\ndefault :\nreturn false;\n}\n}"}
{"ids": "67627", "raw_code": "protected static boolean eq(Object o1,Object o2){\n  return o1 == null ? o2 == null : o1.equals(o2);\n}"}
{"ids": "55209", "raw_code": "public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){\n  Objects.requireNonNull(notifications);\n  final int position=indexOf(notifications,startId);\n  if (position == -1) {\n    return Iterables.limit(notifications,limitSize);\n  }\n  if (inclusive) {\n    return Iterables.limit(Iterables.skip(notifications,position),limitSize);\n  }\n  return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize);\n}"}
{"ids": "23984", "raw_code": "public boolean writeData(PdxWriter writer,Object obj){\n  if (isRelevant(obj.getClass())) {\n    writeData(writer,obj,getClassInfo(obj.getClass()));\n    return true;\n  }\n  return false;\n}"}
{"ids": "64261", "raw_code": "protected final void writeC(ByteBuffer buf,int value){\n  buf.put((byte)value);\n}"}
{"ids": "12610", "raw_code": "public ViterbiPoint(Item item){\n  this.item=item;\n}"}
{"ids": "66421", "raw_code": "protected void paintContentBorderBottomEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){\n  if (isContentBorderPainted) {\n    g.setColor(darkShadow);\n    g.fillRect(x,y + h - 1,w - 1,1);\n  }\n}"}
{"ids": "40123", "raw_code": "public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException {\n  try {\n    byte[] bs=decodeAsciiArmoredPEM(pem);\n    ByteBuffer data=ByteBuffer.wrap(bs);\n    final ASN1Object ob=asn1Parser.parseASN1(data);\n    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);\n    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));\n    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));\n    return createKeyFromModulusAndExponent(modulus,exponent);\n  }\n catch (  IllegalArgumentException e) {\n    throw new InvalidKeyException();\n  }\n}"}
{"ids": "64944", "raw_code": "public static <T>ParallelPublisher<T> from(Publisher<? extends T> source,boolean ordered,int parallelism){\n  return from(source,ordered,parallelism,Px.bufferSize(),Px.defaultQueueSupplier(Px.bufferSize()));\n}"}
{"ids": "70638", "raw_code": "public void addToQueue(Var var){\n  addToQueue(Collections.singleton(var));\n}"}
{"ids": "48778", "raw_code": "public String canonicalize(String simpleURL){\n  String resultURL=simpleURL;\n  if (simpleURL.startsWith(\"ftp.\")) {\n    resultURL=\"ftp://\" + simpleURL;\n  }\n else   if (simpleURL.startsWith(\"gopher.\")) {\n    resultURL=\"gopher://\" + simpleURL;\n  }\n else   if (simpleURL.startsWith(\"/\")) {\n    resultURL=\"file:\" + simpleURL;\n  }\n else   if (!hasProtocolName(simpleURL)) {\n    if (isSimpleHostName(simpleURL)) {\n      simpleURL=\"www.\" + simpleURL + \".com\";\n    }\n    resultURL=\"http://\" + simpleURL;\n  }\n  return resultURL;\n}"}
{"ids": "86891", "raw_code": "@RequestProcessing(value=\"/member/{userName}/points\",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomePoints(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {\n  final JSONObject user=(JSONObject)request.getAttribute(User.USER);\n  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(\"skinDirName\"));\n  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();\n  context.setRenderer(renderer);\n  renderer.setTemplateName(\"/home/points.ftl\");\n  final Map<String,Object> dataModel=renderer.getDataModel();\n  filler.fillHeaderAndFooter(request,response,dataModel);\n  String pageNumStr=request.getParameter(\"p\");\n  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {\n    pageNumStr=\"1\";\n  }\n  final int pageNum=Integer.valueOf(pageNumStr);\n  final int pageSize=Symphonys.getInt(\"userHomePointsCnt\");\n  final int windowSize=Symphonys.getInt(\"userHomePointsWindowSize\");\n  fillHomeUser(dataModel,user);\n  avatarQueryService.fillUserAvatarURL(user);\n  final String followingId=user.optString(Keys.OBJECT_ID);\n  dataModel.put(Follow.FOLLOWING_ID,followingId);\n  final JSONObject userPointsResult=pointtransferQueryService.getUserPoints(user.optString(Keys.OBJECT_ID),pageNum,pageSize);\n  final List<JSONObject> userPoints=CollectionUtils.<JSONObject>jsonArrayToList(userPointsResult.optJSONArray(Keys.RESULTS));\n  dataModel.put(Common.USER_HOME_POINTS,userPoints);\n  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);\n  if (isLoggedIn) {\n    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);\n    final String followerId=currentUser.optString(Keys.OBJECT_ID);\n    final boolean isFollowing=followQueryService.isFollowing(followerId,user.optString(Keys.OBJECT_ID));\n    dataModel.put(Common.IS_FOLLOWING,isFollowing);\n  }\n  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));\n  final int pointsCnt=userPointsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);\n  final int pageCount=(int)Math.ceil((double)pointsCnt / (double)pageSize);\n  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);\n  if (!pageNums.isEmpty()) {\n    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));\n    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));\n  }\n  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);\n  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);\n  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);\n}"}
{"ids": "45644", "raw_code": "private static double norm(final double[] v){\n  double agg=0;\n  for (int i=0; i < v.length; i++) {\n    agg+=(v[i] * v[i]);\n  }\n  return Math.sqrt(agg);\n}"}
{"ids": "12509", "raw_code": "private double mean(double[] vec){\n  double result=0;\n  for (int i=0; i < vec.length; i++)   result+=vec[i];\n  return result / vec.length;\n}"}
{"ids": "1922", "raw_code": "private Sprite(float xPos,float yPos,float xVel,float yVel,Image... sprites){\n  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);\n  playerStates.addAll(Arrays.asList(sprites));\n  spriteFrame.setTranslateX(xPos);\n  spriteFrame.setTranslateY(yPos);\n  this.xPos=xPos;\n  this.yPos=yPos;\n  this.xVel=xVel;\n  this.yVel=yVel;\n}"}
{"ids": "39955", "raw_code": "protected static SyncToken createSyncToken(String dateString,@Nullable String uuid){\n  try {\n    return new SyncToken(DB_DATE_FORMAT.parse(dateString),uuid);\n  }\n catch (  ParseException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "41090", "raw_code": "private static boolean equalsHandlesNulls(Object a,Object b){\n  return a == b || (a != null && a.equals(b));\n}"}
{"ids": "28294", "raw_code": "public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {\n  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());\n  client=new EtcdClient(uris.toArray(new URI[uris.size()]));\n  client.setRetryHandler(retryPolicy);\n  initialSetAllFlagz();\n}"}
{"ids": "71019", "raw_code": "public static String replace(String str,char oldChar,String newStr){\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < str.length(); i++) {\n    char ch=str.charAt(i);\n    if (ch == oldChar) {\n      buf.append(newStr);\n    }\n else {\n      buf.append(ch);\n    }\n  }\n  return buf.toString();\n}"}
{"ids": "30282", "raw_code": "@Action(value=\"/receipts/challan-newform\") @ValidationErrorPage(value=ERROR) @SkipValidation public String newform(){\n  setLoginDept();\n  SimpleDateFormat sdf=new SimpleDateFormat(\"dd/MM/yyyy\");\n  try {\n    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));\n  }\n catch (  ParseException e) {\n    LOGGER.error(getText(\"Error parsing Cut Off Date\") + e.getMessage());\n  }\n  return NEW;\n}"}
{"ids": "85360", "raw_code": "public TypeDeclaration canonicalize(){\n  List<Type> sts=getSatisfiedTypes();\n  if (sts.isEmpty()) {\n    return unit.getAnythingDeclaration();\n  }\n else   if (sts.size() == 1) {\n    Type st=sts.get(0);\n    if (st.isExactlyNothing()) {\n      return unit.getNothingDeclaration();\n    }\n  }\n  for (  Type st : sts) {\n    if (st.isUnion()) {\n      List<Type> caseTypes=st.getCaseTypes();\n      List<Type> ulist=new ArrayList<Type>(caseTypes.size());\n      for (      Type ct : caseTypes) {\n        List<Type> ilist=new ArrayList<Type>(sts.size());\n        for (        Type pt : sts) {\n          if (pt == st) {\n            addToIntersection(ilist,ct,unit);\n          }\n else {\n            addToIntersection(ilist,pt,unit);\n          }\n        }\n        Type it=canonicalIntersection(ilist,unit);\n        addToUnion(ulist,it);\n      }\n      TypeDeclaration result=new UnionType(unit);\n      result.setCaseTypes(ulist);\n      return result;\n    }\n  }\n  return this;\n}"}
{"ids": "70667", "raw_code": "public static void openOtherUri(final String url,final Activity activity){\n  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));\n  activity.startActivity(intent);\n}"}
{"ids": "77280", "raw_code": "public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader,int timeoutInMs){\n  return waitForAllActiveAndLiveReplicas(zkStateReader,null,timeoutInMs);\n}"}
{"ids": "21014", "raw_code": "public boolean checkForRp(){\n  return NullColumnValueGetter.isNotNullValue(getRpCopyName());\n}"}
{"ids": "62903", "raw_code": "public static List<String> splitPath(File file){\n  List<String> output=new ArrayList<>();\n  File current=file;\n  while (current != null) {\n    output.add(current.getName());\n    current=current.getParentFile();\n  }\n  Collections.reverse(output);\n  return output;\n}"}
{"ids": "84675", "raw_code": "protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){\n  for (int i=0; i < taxa.getTaxonCount(); i++) {\n    Taxon taxon=taxa.getTaxon(i);\n    if (!availableTaxa.contains(taxon)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "4360", "raw_code": "public boolean hasMapObjects(){\n  return mapObjects != null && !mapObjects.isEmpty();\n}"}
{"ids": "398", "raw_code": "public void performActions() throws Throwable {\n  for (  Throwing.Runnable action : actions) {\n    action.run();\n  }\n}"}
{"ids": "42148", "raw_code": "public java.util.Collection<ObjectReference> dumpThreadRoots(int width){\n  return Collections.emptyList();\n}"}
{"ids": "68115", "raw_code": "private void checkResourceChange(final Resource resource,final Group group,final Callback callback,final AtomicBoolean isChanged) throws Exception {\n  if (isChanged(resource,group.getName())) {\n    isChanged.compareAndSet(false,true);\n    callback.onResourceChanged(resource);\n    lifecycleCallback.onResourceChanged(resource);\n  }\n}"}
{"ids": "1055", "raw_code": "private synchronized boolean _restart() throws ServletException {\n  if (singelton != null)   singelton.reset();\n  initEngine();\n  System.gc();\n  return true;\n}"}
{"ids": "38800", "raw_code": "public Sorter(){\n  useDefaultVisual();\n  setLayout(new BorderLayout());\n  add(m_visual,BorderLayout.CENTER);\n  m_env=Environment.getSystemWide();\n  m_stopRequested=new AtomicBoolean(false);\n}"}
{"ids": "53155", "raw_code": "public static double logpdf(double x,double mu,double shape){\n  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  final double v=(x - mu) / mu;\n  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;\n}"}
{"ids": "27546", "raw_code": "public T findByCommitCounter(final long commitCounter){\n  if (commitCounter < 0L)   throw new IllegalArgumentException();\n  final Lock lock=readLock();\n  lock.lock();\n  try {\n    @SuppressWarnings(\"unchecked\") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);\n    while (itr.hasNext()) {\n      final ITuple<T> t=itr.next();\n      final T r=t.getObject();\n      final IRootBlockView rb=r.getRootBlock();\n      if (rb.getCommitCounter() <= commitCounter) {\n        return r;\n      }\n    }\n    return null;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "44007", "raw_code": "public static String traceExcetion(Throwable ex){\n  final Writer result=new StringWriter();\n  final PrintWriter printWriter=new PrintWriter(result);\n  ex.printStackTrace(printWriter);\n  String stacktrace=result.toString();\n  Log.e(TAG,\"ERROR ---> \" + stacktrace);\n  return stacktrace;\n}"}
{"ids": "67900", "raw_code": "public static Pair<String,String> split(String varName){\n  int splitIndex=varName.indexOf('.');\n  if (splitIndex < 0) {\n    return null;\n  }\n  String left=varName.substring(0,splitIndex);\n  String right=varName.substring(splitIndex + 1);\n  if (left == null || left.length() == 0 || right == null || right.length() == 0) {\n    return null;\n  }\n  return Pair.of(left,right);\n}"}
{"ids": "44900", "raw_code": "public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){\n  Table mapping=(Table)t.getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + t + \"] declaretion\");\n    return -1;\n  }\n  if (!X.isEmpty(mapping.name())) {\n    return updateTable(mapping.name(),where,args,sets);\n  }\n  return -1;\n}"}
{"ids": "7021", "raw_code": "private void stopVideoFadingEdgesScreenTimer(){\n  if (null != mVideoFadingEdgesTimer) {\n    mVideoFadingEdgesTimer.cancel();\n    mVideoFadingEdgesTimer=null;\n    mVideoFadingEdgesTimerTask=null;\n  }\n}"}
{"ids": "71862", "raw_code": "public void removeListener(final TimeoutEventListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "39095", "raw_code": "protected static void processGenericPropertiesCreatorProps(File propsFile){\n  try {\n    Properties expProps=new Properties();\n    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));\n    expProps.load(bi);\n    bi.close();\n    bi=null;\n    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();\n    Set<Object> keys=expProps.keySet();\n    Iterator<Object> keysI=keys.iterator();\n    while (keysI.hasNext()) {\n      String key=(String)keysI.next();\n      String existingVal=GPCInputProps.getProperty(key,\"\");\n      if (existingVal.length() > 0) {\n        String newVal=expProps.getProperty(key);\n        if (existingVal.indexOf(newVal) < 0) {\n          newVal=existingVal + \",\" + newVal;\n          GPCInputProps.put(key,newVal);\n        }\n      }\n else {\n        String newVal=expProps.getProperty(key);\n        GPCInputProps.put(key,newVal);\n      }\n    }\n  }\n catch (  Exception ex) {\n  }\n}"}
{"ids": "79076", "raw_code": "private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){\n  if (null == tableLockMap.get(absoluteTableIdentifier)) {\n    tableLockMap.put(absoluteTableIdentifier,new Object());\n  }\n}"}
{"ids": "24390", "raw_code": "public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){\n  join(async.getThread(),timeoutMilliseconds);\n}"}
{"ids": "48641", "raw_code": "void define(MemberDefinition field,int slot,int from,int to){\n  if (from >= to) {\n    return;\n  }\n  for (int i=0; i < len; i++) {\n    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {\n      locals[i].from=Math.min(locals[i].from,from);\n      locals[i].to=Math.max(locals[i].to,to);\n      return;\n    }\n  }\n  if (len == locals.length) {\n    LocalVariable newlocals[]=new LocalVariable[len * 2];\n    System.arraycopy(locals,0,newlocals,0,len);\n    locals=newlocals;\n  }\n  locals[len++]=new LocalVariable(field,slot,from,to);\n}"}
{"ids": "46465", "raw_code": "public void mousePressed(MouseEvent e){\n  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);\n  if (SwingUtilities.isLeftMouseButton(e)) {\n    if (e.isConsumed()) {\n      shouldHandleRelease=true;\n    }\n else {\n      shouldHandleRelease=false;\n      adjustCaretAndFocus(e);\n      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {\n        selectWord(e);\n      }\n    }\n  }\n}"}
{"ids": "8471", "raw_code": "public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {\n  Object object=eval(source,lineNo,columnNo,funcBody);\n  if (object instanceof Closure) {\n    Closure closure=(Closure)object;\n    return closure.call(arguments.toArray());\n  }\n  return object;\n}"}
{"ids": "871", "raw_code": "public Set keySet(){\n  return totalKeySet();\n}"}
{"ids": "60218", "raw_code": "public void output(List list,Writer out) throws IOException {\n  printContentRange(out,list,0,list.size(),0,createNamespaceStack());\n  out.flush();\n}"}
{"ids": "30292", "raw_code": "public boolean consumeEncumbranceBudget(final Map<String,Object> detailsMap){\n  if (detailsMap == null)   throw new ValidationException(Arrays.asList(new ValidationError(\"required input is null\",\"required input is null\")));\n  detailsMap.put(Constants.CONSUMEORRELEASE,true);\n  final BigDecimal bd=getDetails(detailsMap);\n  return bd.intValue() == 1;\n}"}
{"ids": "15904", "raw_code": "private int[] mod(int[] a,int[] f){\n  int df=computeDegree(f);\n  if (df == -1) {\n    throw new ArithmeticException(\"Division by zero\");\n  }\n  int[] result=new int[a.length];\n  int hc=headCoefficient(f);\n  hc=field.inverse(hc);\n  System.arraycopy(a,0,result,0,result.length);\n  while (df <= computeDegree(result)) {\n    int[] q;\n    int coeff=field.mult(headCoefficient(result),hc);\n    q=multWithMonomial(f,computeDegree(result) - df);\n    q=multWithElement(q,coeff);\n    result=add(q,result);\n  }\n  return result;\n}"}
{"ids": "67696", "raw_code": "public static void appendHexJavaScriptRepresentation(StringBuilder sb,char c){\n  sb.append(\"\\\\u\");\n  String val=Integer.toHexString(c);\n  for (int j=val.length(); j < 4; j++) {\n    sb.append('0');\n  }\n  sb.append(val);\n}"}
{"ids": "83117", "raw_code": "private void printBootstrapMap(){\n  LOG.info(\"Bootstrap map:\");\n  for (  Integer i : chainMap.keySet()) {\n    LOG.info(String.format(\"  %6d: %d\",i,chainMap.get(i)));\n  }\n}"}
{"ids": "45721", "raw_code": "private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){\n  ArrayList<FilterSpec> specs=new ArrayList<>();\n  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());\n  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {\n    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);\n    List<?> batchList=list.subList(i,nextOffset);\n    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));\n  }\n  FilterSpec orSpec=FilterSpec.or(specs);\n  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);\n}"}
{"ids": "24885", "raw_code": "protected void addTags(E data,Builder builder){\n  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());\n  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));\n  if (null != platformIdent) {\n    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());\n  }\n}"}
{"ids": "4261", "raw_code": "public int compare(String s1,String s2){\n  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);\n  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);\n  final boolean match1matches=match1.matches();\n  final boolean match2matches=match2.matches();\n  if (match1matches ^ match2matches) {\n    return (match1matches) ? 1 : -1;\n  }\n else   if (match1matches && match2matches) {\n    int signature1=Integer.parseInt(match1.group(1));\n    int signature2=Integer.parseInt(match2.group(1));\n    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;\n    if (comparison == 0) {\n      int start1=Integer.parseInt(match1.group(2));\n      int start2=Integer.parseInt(match2.group(2));\n      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;\n    }\n    if (comparison == 0) {\n      int end1=Integer.parseInt(match1.group(3));\n      int end2=Integer.parseInt(match2.group(3));\n      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;\n    }\n    return comparison;\n  }\n else {\n    int seqLength1=s1.length(), n2=s2.length();\n    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {\n      char c1=s1.charAt(i1);\n      char c2=s2.charAt(i2);\n      if (c1 != c2) {\n        c1=Character.toUpperCase(c1);\n        c2=Character.toUpperCase(c2);\n        if (c1 != c2) {\n          c1=Character.toLowerCase(c1);\n          c2=Character.toLowerCase(c2);\n          if (c1 != c2) {\n            return c1 - c2;\n          }\n        }\n      }\n    }\n    return seqLength1 - n2;\n  }\n}"}
{"ids": "75892", "raw_code": "private static int loadBuildNumber(Context context,PackageManager packageManager){\n  try {\n    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);\n    Bundle metaData=appInfo.metaData;\n    if (metaData != null) {\n      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);\n    }\n  }\n catch (  PackageManager.NameNotFoundException e) {\n    L.e(\"Exception thrown when accessing the application info:\");\n    e.printStackTrace();\n  }\n  return 0;\n}"}
{"ids": "75882", "raw_code": "protected HttpURLConnection configureRequest(final HttpURLConnection request){\n  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);\n  request.setRequestProperty(HEADER_USER_AGENT,userAgent);\n  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());\n  return request;\n}"}
{"ids": "29277", "raw_code": "public static String convertToTitle(int n){\n  if (n <= 0)   return \"\";\n  StringBuilder title=new StringBuilder();\n  while (n > 0) {\n    n--;\n    int r=n % 26;\n    title.insert(0,(char)('A' + r));\n    n=n / 26;\n  }\n  return title.toString();\n}"}
{"ids": "67805", "raw_code": "static public void process(String input,String output,String packFileName){\n  process(new Settings(),input,output,packFileName);\n}"}
{"ids": "86739", "raw_code": "public static long[] asLongArray(final List<Long> l){\n  final long[] a=new long[l.size()];\n  for (int i=0; i < a.length; i++) {\n    a[i]=l.get(i);\n  }\n  return a;\n}"}
{"ids": "37272", "raw_code": "private void updateMenuState(){\n  m_appendAnd.setEnabled(m_criteriumNode.allowAppend(CAndCriterium.class));\n  m_appendOr.setEnabled(m_criteriumNode.allowAppend(COrCriterium.class));\n  m_appendNot.setEnabled(m_criteriumNode.allowAppend(CNotCriterium.class));\n  m_insertAnd.setEnabled(m_criteriumNode.allowInsert(CAndCriterium.class));\n  m_insertOr.setEnabled(m_criteriumNode.allowInsert(COrCriterium.class));\n  m_insertNot.setEnabled(m_criteriumNode.allowInsert(CNotCriterium.class));\n  m_conditionSubmenu.setEnabled(m_criteriumNode.allowAppend(CConditionCriterium.class));\n  m_remove.setEnabled(!m_criteriumNode.isRoot());\n  m_removeAll.setEnabled(m_criteriumNode.getChildCount() != 0);\n}"}
{"ids": "31610", "raw_code": "public static String formatListToString(List<String> list){\n  String result=\"\";\n  for (  String s : list)   result+=s + \"\\t\\t\";\n  result=result.trim();\n  return result.toUpperCase();\n}"}
{"ids": "45987", "raw_code": "@Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {\n  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {\n    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,\"removeNotificationListener\",\"Removing listener \" + listener);\n  }\n  notifBroadcaster.removeNotificationListener(listener);\n}"}
{"ids": "35670", "raw_code": "public static boolean isNewer(long ts1,long size1,long ts2,long size2){\n  return ts1 > ts2 || (ts1 == ts2 && size1 < size2);\n}"}
{"ids": "85421", "raw_code": "public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){\n  List<File> dirs=new ArrayList<File>();\n  dirs.add(dir);\n  return expandSpecWildcards(dirs,modules,forBackend);\n}"}
{"ids": "8878", "raw_code": "private static String reportListContents(Collection<ProcessErrorStateInfo> errList){\n  if (errList == null)   return null;\n  StringBuilder builder=new StringBuilder();\n  Iterator<ProcessErrorStateInfo> iter=errList.iterator();\n  while (iter.hasNext()) {\n    ProcessErrorStateInfo entry=iter.next();\n    String condition;\nswitch (entry.condition) {\ncase ActivityManager.ProcessErrorStateInfo.CRASHED:\n      condition=\"a CRASH\";\n    break;\ncase ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING:\n  condition=\"an ANR\";\nbreak;\ndefault :\ncondition=\"an unknown error\";\nbreak;\n}\nbuilder.append(String.format(\"Process %s encountered %s (%s)\",entry.processName,condition,entry.shortMsg));\nif (entry.condition == ActivityManager.ProcessErrorStateInfo.CRASHED) {\nbuilder.append(String.format(\" with stack trace:\\n%s\\n\",entry.stackTrace));\n}\nbuilder.append(\"\\n\");\n}\nreturn builder.toString();\n}"}
{"ids": "39622", "raw_code": "@Override public boolean start() throws IOException {\n  LOG.info(\"Starting reader using {}\",initialCheckpointGenerator);\n  try {\n    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);\n    List<ShardRecordsIterator> iterators=newArrayList();\n    for (    ShardCheckpoint checkpoint : initialCheckpoint) {\n      iterators.add(checkpoint.getShardRecordsIterator(kinesis));\n    }\n    shardIterators=new RoundRobin<>(iterators);\n  }\n catch (  TransientKinesisException e) {\n    throw new IOException(e);\n  }\n  return advance();\n}"}
{"ids": "63205", "raw_code": "@Override public XADataSource createXADataSource(Properties properties) throws SQLException {\n  Properties propertiesCopy=new Properties();\n  if (properties != null) {\n    propertiesCopy.putAll(properties);\n  }\n  rejectUnsupportedOptions(propertiesCopy);\n  rejectPoolingOptions(propertiesCopy);\n  JdbcDataSource dataSource=new JdbcDataSource();\n  setupH2DataSource(dataSource,propertiesCopy);\n  return dataSource;\n}"}
{"ids": "72395", "raw_code": "public static double toDegrees(double x){\n  if (Double.isInfinite(x) || x == 0.0) {\n    return x;\n  }\n  final double facta=57.2957763671875;\n  final double factb=3.145894820876798E-6;\n  double xa=doubleHighPart(x);\n  double xb=x - xa;\n  return xb * factb + xb * facta + xa * factb + xa * facta;\n}"}
{"ids": "30311", "raw_code": "void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){\n  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {\n    demand.put(fieldName,BigDecimal.ZERO);\n    collection.put(fieldName,BigDecimal.ZERO);\n    rebates.put(fieldName,BigDecimal.ZERO);\n  }\n}"}
{"ids": "37570", "raw_code": "protected Instance specifier(int i){\n  return m_Specifiers.get(i);\n}"}
{"ids": "13528", "raw_code": "public ShapedCraftingRecipe(Item nominalOutput,RecipeFunction recipeFunction,String format,boolean mirrored,ItemIngredient... ingredients){\n  this.nominalOutput=nominalOutput;\n  String[] formatLines=format.split(\"\\\\-\");\n  int numIngredients=0;\n  int width=0;\n  for (  String formatLine : formatLines) {\n    width=Math.max(width,formatLine.length());\n    for (    char c : formatLine.toCharArray()) {\n      if (c == ' ') {\n        continue;\n      }\n else       if (c >= 'A' && c <= 'Z') {\n        numIngredients++;\n      }\n else {\n        throw new IllegalArgumentException(\"Invalid character in format string \" + format + \": \"+ c);\n      }\n    }\n  }\n  this.width=width;\n  this.height=formatLines.length;\n  this.posx=new int[numIngredients];\n  this.posy=new int[numIngredients];\n  this.ingredients=new ItemIngredient[numIngredients];\n  this.mirrored=mirrored;\n  int ingredientIndex=0;\n  for (int y=0; y < this.height; y++) {\n    String formatLine=formatLines[y];\n    for (int x=0; x < formatLine.length(); x++) {\n      char c=formatLine.charAt(x);\n      if (c == ' ') {\n        continue;\n      }\n      this.posx[ingredientIndex]=x;\n      this.posy[ingredientIndex]=y;\n      this.ingredients[ingredientIndex]=ingredients[c - 'A'];\n      ingredientIndex++;\n    }\n  }\n  this.recipeFunction=recipeFunction;\n  this.lastIngredientIndexOnFirstLine=getLastIngredientIndexOnFirstLine();\n}"}
{"ids": "11091", "raw_code": "private Socket connect(String host,String portString) throws IOException {\n  int port=0;\n  Socket sock=null;\n  boolean DEBUG=Debug.debugging(\"netmap\");\n  try {\n    port=Integer.parseInt(portString,10);\n  }\n catch (  NumberFormatException e) {\n    if (DEBUG)     Debug.output(\"Illegal name \" + host + \":\"+ portString);\n    throw new IOException(\"Illegal port: \" + portString);\n  }\n  if (DEBUG)   Debug.output(\"Connecting to server \" + host + \":\"+ port);\n  try {\n    sock=new Socket(host,port);\n  }\n catch (  IOException e) {\n    if (sock != null)     sock.close();\n    if (DEBUG) {\n      Debug.output(\"Can't connect to \" + host + \":\"+ port+ \"\\n   \"+ e);\n    }\n    throw e;\n  }\n  return sock;\n}"}
{"ids": "38205", "raw_code": "@Override public boolean batchFinished(){\n  if (getInputFormat() == null) {\n    throw new IllegalStateException(\"No input instance format defined\");\n  }\n  Instances toFilter=getInputFormat();\n  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);\n  if (m_Inverse) {\n    for (int i=0; i < cutOff; i++) {\n      push(toFilter.instance(i));\n    }\n  }\n else {\n    for (int i=cutOff; i < toFilter.numInstances(); i++) {\n      push(toFilter.instance(i));\n    }\n  }\n  flushInput();\n  m_NewBatch=true;\n  m_FirstBatchDone=true;\n  return (numPendingOutput() != 0);\n}"}
{"ids": "11439", "raw_code": "public void computeParameters(){\n  if (ellps == null) {\n    ellps=Ellipsoid.WGS_84;\n  }\n  if (mode == MODE_BELGIUM) {\n    alpha=0.00014204d;\n  }\n else {\n    alpha=0d;\n  }\n  double phi1=ProjMath.degToRad(lambert_sp_one);\n  double phi2=ProjMath.degToRad(lambert_sp_two);\n  double phif=ProjMath.degToRad(referenceLatitude);\n  double e=ellps.ecc;\n  double sinphi;\n  sinphi=Math.sin(phi1);\n  double m1=lambMsfn(sinphi,Math.cos(phi1),e);\n  double t1=lambTsfn(phi1,sinphi,e);\n  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {\n    n=sinphi;\n  }\n else {\n    sinphi=Math.sin(phi2);\n    double m2=lambMsfn(sinphi,Math.cos(phi2),e);\n    double t2=lambTsfn(phi2,sinphi,e);\n    n=Math.log(m1 / m2) / Math.log(t1 / t2);\n  }\n  F=m1 / (n * Math.pow(t1,n));\n  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {\n    rf=0.0d;\n  }\n else {\n    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);\n  }\n  lamdaf=ProjMath.degToRad(centralMeridian);\n  locationCenterXPixel=((double)getWidth() / 2d);\n  locationCenterYPixel=((double)getHeight() / 2d);\n  locationPixelsPerLambert=(double)getPPM() / getScale();\n  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);\n  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());\n  locationOriginX=lp.getX();\n  locationOriginY=lp.getY();\n  LatLonPoint center=getCenter();\n  lp=LLToWorld(center.getY(),center.getX(),lp);\n  locationCenterXLambert=lp.getX();\n  locationCenterYLambert=lp.getY();\n  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;\n  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;\n  if (Debug.debugging(\"Lambert\")) {\n    Debug.output(\"Creating LambertConformal: center x = \" + locationCenterXLambert + \", center y = \"+ locationCenterYLambert);\n    Debug.output(\"Creating LambertConformal: origin x = \" + locationOriginX + \", origin y = \"+ locationOriginY);\n  }\n}"}
{"ids": "7132", "raw_code": "protected OkHttpClient configureHttpClient(){\n  final OkHttpClient.Builder builder=new OkHttpClient.Builder();\n  final CookieManager cookieManager=new CookieManager();\n  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);\n  builder.cookieJar(new JavaNetCookieJar(cookieManager));\n  builder.connectTimeout(60,TimeUnit.SECONDS);\n  builder.writeTimeout(60,TimeUnit.SECONDS);\n  builder.readTimeout(90,TimeUnit.SECONDS);\n  return builder.build();\n}"}
{"ids": "66054", "raw_code": "public String parseFile(File file){\n  log.config(file.getAbsolutePath());\n  String line=null;\n  try {\n    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);\n    String errMsg=\"\";\n    int lineNo=1;\n    while ((line=in.readLine()) != null && errMsg.length() == 0) {\n      errMsg=parseLine(line,lineNo);\n      lineNo++;\n    }\n    line=null;\n    in.close();\n    if (errMsg.length() != 0)     return errMsg;\n  }\n catch (  Exception ioe) {\n    String s=ioe.getLocalizedMessage();\n    if (s == null || s.length() == 0)     s=ioe.toString();\n    return \"Parse Error: Line=\" + line + \" - \"+ s;\n  }\n  return \"\";\n}"}
{"ids": "74468", "raw_code": "public void load(Element element,Object o){\n  log.error(\"load(Element, Object) called unexpectedly\");\n}"}
{"ids": "11233", "raw_code": "public OMRaster(double lt,double ln,int offset_x1,int offset_y1,ImageIcon ii){\n  this(lt,ln,offset_x1,offset_y1,ii.getImage());\n}"}
{"ids": "82196", "raw_code": "private synchronized boolean startDequeue(){\n  int threads=Math.min(queue.size(),maxThreads);\n  for (int i=0; i < threads; i++) {\n    ResourceThread t=(ResourceThread)queue.firstElement();\n    queue.removeElementAt(0);\n    running.addElement(t);\n    threadCount++;\n  }\n  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {\n    ResourceThread t=(ResourceThread)e.nextElement();\n    t.go();\n  }\n  return (threads > 0);\n}"}
{"ids": "46710", "raw_code": "public void propertyChange(PropertyChangeEvent evt){\n  String name=evt.getPropertyName();\n  if (name == \"width\" || name == \"preferredWidth\") {\n    invalidateWidthCache();\n    fireColumnMarginChanged();\n  }\n}"}
{"ids": "43521", "raw_code": "public static void assertEquals(Object object1,Object object2){\n  checkAssertion(object1.equals(object2),null);\n}"}
{"ids": "72", "raw_code": "public String formatSQL(Object obj,Object expr){\n  String sql=null;\n  if (expr instanceof String) {\n    sql=(String)expr;\n    if (log.isLoggable(Level.FINEST)) {\n      log.finest(\"SQL retrieved from state = \" + sql);\n    }\n  }\n else   if (obj != null) {\n    sql=toString(obj);\n    if (sql != null) {\n      if (sql.startsWith(\"prep\")) {\n        sql=sql.replaceFirst(\"prep[0-9]*: \",\"\");\n      }\n      sql=sql.replaceAll(\"X'.*'\",BINARY_SQL_MARKER);\n    }\n    if (log.isLoggable(Level.FINEST)) {\n      log.finest(\"SQL derived from context = \" + sql);\n    }\n  }\n  return sql;\n}"}
{"ids": "71804", "raw_code": "public void addFakeView(View childView){\n  childView.layout(0,0,getWidth(),childView.getMeasuredHeight());\n  views.add(childView);\n}"}
{"ids": "85720", "raw_code": "@SuppressWarnings(\"unchecked\") public Promise<Result,Progress> resolve(Result result){\n  List<DoneCallback<Result>> doneCallbacks;\n  List<AlwaysCallback> alwaysCallbacks;\nsynchronized (this) {\n    validateInPendingState();\n    mState=STATE_RESOLVED;\n    printStateChanged(\"RESOLVED\");\n    mResult=result;\n    doneCallbacks=mCallbacks.cloneDoneCallbacks();\n    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();\n    clearCallbacks();\n  }\n  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {\n    triggerAllDones(doneCallbacks);\n    triggerAllAlways(alwaysCallbacks);\n  }\n  return this;\n}"}
{"ids": "21675", "raw_code": "private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){\n  snapshot.setNativeId(unitySnap.getId());\n  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));\n  snapshot.setDeviceLabel(unitySnap.getName());\n  snapshot.setIsSyncActive(true);\n  snapshot.setInactive(false);\n  snapshot.setCreationTime(Calendar.getInstance());\n  snapshot.setWWN(unitySnap.getAttachedWWN());\n  snapshot.setAllocatedCapacity(unitySnap.getSize());\n  snapshot.setProvisionedCapacity(unitySnap.getSize());\n  dbClient.createObject(snapshot);\n}"}
{"ids": "43955", "raw_code": "public void save() throws IOException {\n  if (!props.isEmpty()) {\n    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);\n  }\n  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + \".default\"),true);\n}"}
{"ids": "48543", "raw_code": "static void dispose(long pData,long pConfigInfo){\n  OGLRenderQueue rq=OGLRenderQueue.getInstance();\n  rq.lock();\n  try {\n    OGLContext.setScratchSurface(pConfigInfo);\n    RenderBuffer buf=rq.getBuffer();\n    rq.ensureCapacityAndAlignment(12,4);\n    buf.putInt(DISPOSE_SURFACE);\n    buf.putLong(pData);\n    rq.flushNow();\n  }\n  finally {\n    rq.unlock();\n  }\n}"}
{"ids": "19620", "raw_code": "@Override public boolean release(int decrement){\n  if (isEmpty) {\n    return false;\n  }\n  if (decrement < 1) {\n    throw new IllegalStateException(String.format(\"release(%d) argument is not positive. Buffer Info: %s\",decrement,toVerboseString()));\n  }\n  final int refCnt=ledger.decrement(decrement);\n  if (BaseAllocator.DEBUG) {\n    historicalLog.recordEvent(\"release(%d). original value: %d\",decrement,refCnt + decrement);\n  }\n  if (refCnt < 0) {\n    throw new IllegalStateException(String.format(\"ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s\",id,toVerboseString()));\n  }\n  return refCnt == 0;\n}"}
{"ids": "81437", "raw_code": "int listSize(){\n  int result=memSize();\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    ASTNode child=(ASTNode)it.next();\n    result+=child.treeSize();\n  }\n  return result;\n}"}
{"ids": "53140", "raw_code": "public UniformDistribution estimate(double min,double max,final int count){\n  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;\n  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));\n}"}
{"ids": "56414", "raw_code": "public static RepositoryMetaData readFrom(StreamInput in) throws IOException {\n  String name=in.readString();\n  String type=in.readString();\n  Settings settings=Settings.readSettingsFromStream(in);\n  return new RepositoryMetaData(name,type,settings);\n}"}
{"ids": "43840", "raw_code": "public static boolean isPrimitiveDatatype(IRI datatype){\n  return datatype.equals(XMLSchema.DURATION) || datatype.equals(XMLSchema.DATETIME) || datatype.equals(XMLSchema.TIME)|| datatype.equals(XMLSchema.DATE)|| datatype.equals(XMLSchema.GYEARMONTH)|| datatype.equals(XMLSchema.GYEAR)|| datatype.equals(XMLSchema.GMONTHDAY)|| datatype.equals(XMLSchema.GDAY)|| datatype.equals(XMLSchema.GMONTH)|| datatype.equals(XMLSchema.STRING)|| datatype.equals(XMLSchema.BOOLEAN)|| datatype.equals(XMLSchema.BASE64BINARY)|| datatype.equals(XMLSchema.HEXBINARY)|| datatype.equals(XMLSchema.FLOAT)|| datatype.equals(XMLSchema.DECIMAL)|| datatype.equals(XMLSchema.DOUBLE)|| datatype.equals(XMLSchema.ANYURI)|| datatype.equals(XMLSchema.QNAME)|| datatype.equals(XMLSchema.NOTATION);\n}"}
{"ids": "73787", "raw_code": "protected void appendLine(JComponent c){\n  c.setAlignmentX(0.f);\n  contents.add(c);\n}"}
{"ids": "5912", "raw_code": "public void postProcess(){\n  if (foreignColumnName != null) {\n    foreignAutoRefresh=true;\n  }\n  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {\n    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;\n  }\n}"}
{"ids": "78255", "raw_code": "private void persistNewTemp(File fileCfg){\n  if (hsDeleteOnExit.size() == 0) {\n    logDebug(LogArea.CONFIG,\"No temp file names to persist on exit.\");\n    fileCfg.delete();\n    return;\n  }\n  logDebug(LogArea.CONFIG,\"Persisting %d temp file names into %s\",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());\n  BufferedWriter writer=null;\n  try {\n    writer=new BufferedWriter(new FileWriter(fileCfg));\n    for (    File file : hsDeleteOnExit) {\n      if (!file.delete()) {\n        String f=file.getCanonicalPath();\n        writer.write(f);\n        writer.newLine();\n        logWarn(LogArea.JAR,\"JVM failed to release %s\",f);\n      }\n    }\n  }\n catch (  IOException e) {\n  }\n finally {\n    if (writer != null) {\n      try {\n        writer.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}"}
{"ids": "78646", "raw_code": "public void addWritten(byte[] value){\n  writeSetLock.lock();\n  writeSet.add(new TimestampValuePair(ets,value));\n  writeSetLock.unlock();\n}"}
{"ids": "56227", "raw_code": "public static boolean hasBinding(Injector injector,Key<?> key){\n  Binding<?> binding=getBinding(injector,key);\n  return binding != null;\n}"}
{"ids": "19890", "raw_code": "private OpenReplicatorManagerMBean createInternalService(String serviceName) throws ReplicatorException {\n  logger.info(\"Starting replication service: name=\" + serviceName);\n  try {\n    OpenReplicatorManager orm=new OpenReplicatorManager(serviceName);\n    orm.setRmiHost(managerRMIHost);\n    orm.setRmiPort(managerRMIPort);\n    orm.setHostTimeZone(hostTimeZone);\n    orm.setReplicatorTimeZone(replicatorTimeZone);\n    orm.advertiseInternal();\n    orm.setSecurityInfo(this.securityInfo);\n    return (OpenReplicatorManagerMBean)orm;\n  }\n catch (  Exception e) {\n    throw new ReplicatorException(String.format(\"Unable to instantiate replication service '%s'\",serviceName),e);\n  }\n}"}
{"ids": "76936", "raw_code": "public static CheckIndex.Status checkIndex(Directory dir) throws IOException {\n  return checkIndex(dir,true);\n}"}
{"ids": "14696", "raw_code": "static void policyChanged(String serviceTypeName,PolicyEvent pe){\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"PolicyEvaulator.policyChanged():serviceTypeName=\" + serviceTypeName);\n  }\n  resourceNamesMap.remove(serviceTypeName);\n  Cache resourceNamesCache=(Cache)resourceNamesMap.get(serviceTypeName);\n  if ((resourceNamesCache == null) || (resourceNamesCache.isEmpty())) {\n    return;\n  }\n  try {\n    DEBUG.error(\"PolicyEvaluator.policyChanged: enterred try block\");\n    ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager();\n    ServiceType serviceType=stm.getServiceType(serviceTypeName);\n    Set resourceNamesToRemove=new HashSet();\nsynchronized (resourceNamesCache) {\n      Enumeration resourceNames=resourceNamesCache.keys();\n      while (resourceNames.hasMoreElements()) {\n        String resourceName=(String)resourceNames.nextElement();\n        if (resourceNamesToRemove.contains(resourceName)) {\n          continue;\n        }\n        Set affectedResourceNames=pe.getResourceNames();\n        Iterator iter=affectedResourceNames.iterator();\n        while (iter.hasNext()) {\n          String affectedResourceName=(String)iter.next();\n          if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) {\n            resourceNamesToRemove.add(resourceName);\n          }\n        }\n      }\n      Iterator iter1=resourceNamesToRemove.iterator();\n      while (iter1.hasNext()) {\n        String resourceNameToRemove=(String)iter1.next();\n        resourceNamesCache.remove(resourceNameToRemove);\n      }\n    }\n  }\n catch (  SSOException e) {\n    DEBUG.error(\"PolicyEvaluator.policyChanged:\",e);\n  }\ncatch (  PolicyException pex) {\n    DEBUG.error(\"PolicyEvaluator.policyChanged:\",pex);\n  }\n  if (DEBUG.messageEnabled()) {\n    DEBUG.message(\"PolicyEvaulator.policyChanged():serviceTypeName=\" + serviceTypeName + \", new cached resoruceNames=\"+ resourceNamesMap.get(serviceTypeName));\n  }\n}"}
{"ids": "54740", "raw_code": "private void startHideAnimations(){\n  animationPlaying=true;\n  lightAnimationLayout();\n  if (buttonType.equals(ButtonType.CIRCLE)) {\n    if (hideOrderType.equals(OrderType.DEFAULT)) {\n      for (int i=0; i < buttonNum; i++) {\n        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);\n      }\n    }\n else     if (hideOrderType.equals(OrderType.REVERSE)) {\n      for (int i=0; i < buttonNum; i++) {\n        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);\n      }\n    }\n else     if (hideOrderType.equals(OrderType.RANDOM)) {\n      Random random=new Random();\n      boolean[] used=new boolean[buttonNum];\n      for (int i=0; i < buttonNum; i++)       used[i]=false;\n      int count=0;\n      while (true) {\n        int i=random.nextInt(buttonNum);\n        if (!used[i]) {\n          used[i]=true;\n          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);\n          count++;\n          if (count == buttonNum)           break;\n        }\n      }\n    }\n  }\n else   if (buttonType.equals(ButtonType.HAM)) {\n    if (hideOrderType.equals(OrderType.DEFAULT)) {\n      for (int i=0; i < buttonNum; i++) {\n        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);\n      }\n    }\n else     if (hideOrderType.equals(OrderType.REVERSE)) {\n      for (int i=0; i < buttonNum; i++) {\n        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);\n      }\n    }\n else     if (hideOrderType.equals(OrderType.RANDOM)) {\n      Random random=new Random();\n      boolean[] used=new boolean[buttonNum];\n      for (int i=0; i < buttonNum; i++)       used[i]=false;\n      int count=0;\n      while (true) {\n        int i=random.nextInt(buttonNum);\n        if (!used[i]) {\n          used[i]=true;\n          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);\n          count++;\n          if (count == buttonNum)           break;\n        }\n      }\n    }\n  }\n}"}
{"ids": "32032", "raw_code": "public static void putShort(long addr,short val){\n  if (UNALIGNED)   UNSAFE.putShort(addr,val);\n else   putShortByByte(addr,val,BIG_ENDIAN);\n}"}
{"ids": "12649", "raw_code": "public PronounceableFSM(URL url,boolean scanFromFront) throws IOException {\n  this.scanFromFront=scanFromFront;\n  InputStream is=Utilities.getInputStream(url);\n  loadText(is);\n  is.close();\n}"}
{"ids": "3995", "raw_code": "@Override public String findLibrary(String name){\n  String systemName=System.mapLibraryName(name);\n  ArrayList<Loader> loaders=getLoaders();\n  for (int i=0; i < loaders.size(); i++) {\n    Loader loader=loaders.get(i);\n    Path path=loader.getPath(systemName);\n    if (path != null && path.canRead()) {\n      return path.getNativePath();\n    }\n    path=loader.getPath(\"native/\" + systemName);\n    if (path != null && path.canRead()) {\n      return path.getNativePath();\n    }\n  }\n  for (int i=0; i < _nativePath.size(); i++) {\n    Path path=_nativePath.get(i);\n    if (path.canRead())     return path.getNativePath();\n  }\n  return super.findLibrary(name);\n}"}
{"ids": "73521", "raw_code": "public void removeComponentListener(final ComponentUpdateListener listener){\n  componentListeners.remove(listener);\n}"}
{"ids": "27940", "raw_code": "protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){\n  if (expected == null)   throw new IllegalArgumentException();\n  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);\n  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();\n  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();\n  if (expected.isMetricRequest()) {\n    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);\n  }\n else   if (expected.isMetricMetadata()) {\n    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);\n  }\n else   if (expected.isMetricValue()) {\n    if (decl == null)     throw new IllegalArgumentException(\"Declaration required for metric value record\");\n    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);\n  }\n else {\n    throw new AssertionError();\n  }\n  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());\n  assertEquals(\"messages not equal()\",expected,actual);\n  final byte[] actualData=new byte[xdr.getLength()];\n  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);\n  return actualData;\n}"}
{"ids": "76756", "raw_code": "private boolean isIndexable(String term){\n  return (term.length() < 30) && (term.length() > 2);\n}"}
{"ids": "15309", "raw_code": "public static String decode(String encoded,AMEncryption encr){\n  if (checkCaller()) {\n    try {\n      ISSecurityPermission isp=new ISSecurityPermission(\"access\",\"adminpassword\");\n      if (securityManager != null) {\n        securityManager.checkPermission(isp);\n      }\n    }\n catch (    SecurityException e) {\n      Debug debug=Debug.getInstance(\"amSDK\");\n      debug.error(\"Security Alert: Unauthorized access to \" + \"Encoding/Decoding password utility: Returning NULL\",e);\n      return null;\n    }\n  }\n  if (encoded == null || encoded.length() == 0) {\n    return (null);\n  }\n  byte[] encData=null;\n  encData=Base64.decode(encoded.trim());\n  if (encData == null) {\n    return null;\n  }\n  byte[] rawData=encr.decrypt(encData);\n  if (rawData == null) {\n    return (null);\n  }\n  String answer=null;\n  try {\n    answer=new String(rawData,\"utf-8\");\n  }\n catch (  UnsupportedEncodingException uue) {\n    Debug debug=Debug.getInstance(\"amSDK\");\n    debug.error(\"Crypt:: Unsupported encoding UTF-8\",uue);\n    answer=new String(rawData);\n  }\n  return (answer);\n}"}
{"ids": "25005", "raw_code": "public void addConnection(Connection connection){\n  if (connection == null)   throw new IllegalArgumentException(\"connection cannot be null.\");\nsynchronized (connectionsLock) {\n    Connection[] newConnections=new Connection[connections.length + 1];\n    newConnections[0]=connection;\n    System.arraycopy(connections,0,newConnections,1,connections.length);\n    connections=newConnections;\n  }\n  connection.addListener(invokeListener);\n  if (TRACE)   trace(\"kryonet\",\"Added connection to ObjectSpace: \" + connection);\n}"}
{"ids": "53514", "raw_code": "public double distance(Point2D pt){\n  final double x_distance=(pt.getX() - x) * (pt.getX() - x);\n  final double y_distance=(pt.getY() - y) * (pt.getY() - y);\n  return Math.sqrt(x_distance + y_distance);\n}"}
{"ids": "62712", "raw_code": "private static int convertToInt(String value,int defaultValue){\n  String trim=value.trim();\n  if (trim.length() == 0) {\n    return defaultValue;\n  }\n  return Integer.parseInt(trim);\n}"}
{"ids": "49124", "raw_code": "@Override public void run(){\n  try {\n    for (; ; ) {\n      int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT);\n      assert n > 0;\n      long address=bufferAddress;\n      for (int i=0; i < n; i++) {\n        boolean shutdown=processEvent(address);\n        if (shutdown)         return;\n        address+=SIZEOF_PORT_EVENT;\n      }\n    }\n  }\n catch (  UnixException x) {\n    x.printStackTrace();\n  }\n}"}
{"ids": "55942", "raw_code": "@Override public List<String> allKeys(){\n  List<String> nameFiles=new ArrayList<>();\n  File[] files=cacheDirectory.listFiles();\n  if (files == null)   return nameFiles;\n  for (  File file : files) {\n    if (file.isFile()) {\n      nameFiles.add(file.getName());\n    }\n  }\n  return nameFiles;\n}"}
{"ids": "61996", "raw_code": "public DialogueRecorder(DialogueSystem system){\n  this.settings=system.getSettings();\n}"}
{"ids": "40785", "raw_code": "private static final void rescheduleMissedAlarms(ContentResolver cr,Context context,AlarmManagerInterface manager){\n  long now=System.currentTimeMillis();\n  long ancient=now - DateUtils.DAY_IN_MILLIS;\n  String[] projection=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME};\n  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {\n    Log.d(TAG,\"Manifest.permission.READ_CALENDAR is not granted\");\n    return;\n  }\n  Cursor cursor=cr.query(CalendarAlerts.CONTENT_URI,projection,WHERE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(now),Long.toString(ancient),Long.toString(now)}),SORT_ORDER_ALARMTIME_ASC);\n  if (cursor == null) {\n    return;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"missed alarms found: \" + cursor.getCount());\n  }\n  try {\n    long alarmTime=-1;\n    while (cursor.moveToNext()) {\n      long newAlarmTime=cursor.getLong(0);\n      if (alarmTime != newAlarmTime) {\n        if (DEBUG) {\n          Log.w(TAG,\"rescheduling missed alarm. alarmTime: \" + newAlarmTime);\n        }\n        AlertUtils.scheduleAlarm(context,manager,newAlarmTime);\n        alarmTime=newAlarmTime;\n      }\n    }\n  }\n  finally {\n    cursor.close();\n  }\n}"}
{"ids": "13184", "raw_code": "@Override protected String dateToString(DateTimeData date){\n  StringBuffer message=new StringBuffer(5);\n  message.append('-');\n  message.append('-');\n  append(message,date.month,2);\n  append(message,(char)date.utc,0);\n  return message.toString();\n}"}
{"ids": "83574", "raw_code": "public void swap(int i,int j){\n  x.assertTrue(i < list.size());\n  x.assertTrue(j < list.size());\n  list.set(i,list.set(j,list.get(i)));\n}"}
{"ids": "10356", "raw_code": "private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){\n  List<NameValuePair> data=new ArrayList<NameValuePair>();\n  if (ipt != null && organisationKey != null) {\n    data.add(new BasicNameValuePair(\"organisationKey\",StringUtils.trimToEmpty(organisationKey)));\n    data.add(new BasicNameValuePair(\"name\",StringUtils.trimToEmpty(ipt.getName())));\n    data.add(new BasicNameValuePair(\"description\",StringUtils.trimToEmpty(ipt.getDescription())));\n    data.add(new BasicNameValuePair(\"primaryContactType\",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));\n    data.add(new BasicNameValuePair(\"primaryContactName\",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));\n    data.add(new BasicNameValuePair(\"primaryContactEmail\",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));\n    data.add(new BasicNameValuePair(\"serviceTypes\",SERVICE_TYPE_RSS));\n    data.add(new BasicNameValuePair(\"serviceURLs\",getRssFeedURL()));\n  }\n else {\n    log.debug(\"One or both of IPT and Organisation key were null. Params needed for ws will be empty\");\n  }\n  return data;\n}"}
{"ids": "8181", "raw_code": "public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {\n  try {\n    T result=action.call(self);\n    Closeable temp=self;\n    self=null;\n    temp.close();\n    return result;\n  }\n  finally {\n    DefaultGroovyMethodsSupport.closeWithWarning(self);\n  }\n}"}
{"ids": "14615", "raw_code": "public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){\n  boolean matched=false;\n  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {\n    if (isMatch(actualString,(String)iter.next(),wildCard)) {\n      matched=true;\n      break;\n    }\n  }\n  return matched;\n}"}
{"ids": "24064", "raw_code": "public synchronized void addServer(ServerLocation location,String[] groups,ServerLoad initialLoad,long loadPollInterval){\n  serverGroupMap.put(location,groups);\n  LoadHolder connectionLoad=new LoadHolder(location,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollInterval);\n  addGroups(connectionLoadMap,groups,connectionLoad);\n  LoadHolder queueLoad=new LoadHolder(location,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollInterval);\n  addGroups(queueLoadMap,groups,queueLoad);\n  updateLoad(location,initialLoad);\n}"}
{"ids": "74213", "raw_code": "public void addLeaf(CatalogTreeLeaf leaf){\n  _leaves.add(leaf);\n}"}
{"ids": "52379", "raw_code": "private static String stampToString(long tstamp,String formatMask){\n  StringBuilder sb=new StringBuilder(30);\n  Formatter fmt=new Formatter(sb,Locale.US);\n  int[] pieces=new int[NUMIDX];\n  ComponentTime.unpackBits(tstamp,pieces);\n  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);\n  fmt.close();\n  return (sb.toString());\n}"}
{"ids": "22589", "raw_code": "public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){\n  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);\n  urlBld.append(resourceId);\n  urlBld.append(URL_LUN_MODIFY_ACTION);\n  _url=urlBld.toString();\n  return postRequestAsync(param);\n}"}
{"ids": "44668", "raw_code": "public boolean similarTo(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (!(o instanceof SemanticConcept)) {\n    return false;\n  }\n  SemanticConcept otherConcept=(SemanticConcept)o;\n  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);\n  synset_intersection.retainAll(otherConcept.synsets);\n  if (!synset_intersection.isEmpty()) {\n    return true;\n  }\n  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);\n  concept_intersection.retainAll(otherConcept.concepts);\n  return !concept_intersection.isEmpty();\n}"}
{"ids": "16632", "raw_code": "public void jGoogleAnalyticsTracker(final String eventType,final String version,final String trackerId){\n  final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(\"vdi_calculator\",version,trackerId);\n  final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase());\n  tracker.trackAsynchronously(focusPoint);\n}"}
{"ids": "25300", "raw_code": "public void put(Song song){\n  if (!mSongs.contains(song)) {\n    mSongs.add(song);\n  }\n}"}
{"ids": "60161", "raw_code": "@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){\n  final List<PsiElement> result=new ArrayList<PsiElement>();\n  for (  final PsiElement element : myPsiElements) {\n    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {\n      if (name.equals(child.getName())) {\n        result.add(child);\n      }\n    }\n  }\n  return new PsiQuery(result.toArray(new PsiElement[result.size()]));\n}"}
{"ids": "62004", "raw_code": "@Override public boolean equals(Object o){\n  return o.hashCode() == hashCode();\n}"}
{"ids": "50465", "raw_code": "private ArrayList<String> parseJson(String text){\n  text=text.substring(text.indexOf(\"\\\\nEvents\\\\n\") + SIZE_OF_EVENTS,text.indexOf(\"\\\\n\\\\n\\\\nBirths\"));\n  ArrayList<String> events=new ArrayList<String>();\n  if (text.isEmpty()) {\n    return events;\n  }\n  int startIndex=0, endIndex=0;\n  while (endIndex != -1) {\n    endIndex=text.indexOf(\"\\\\n\",startIndex + DELIMITER_SIZE);\n    String eventText=(endIndex == -1 ? text.substring(startIndex) : text.substring(startIndex,endIndex));\n    Pattern pattern=Pattern.compile(\"\\\\\\\\u2013\\\\s*\");\n    Matcher matcher=pattern.matcher(eventText);\n    eventText=matcher.replaceAll(\"\");\n    pattern=Pattern.compile(\"(^\\\\d+)\");\n    matcher=pattern.matcher(eventText);\n    if (matcher.find()) {\n      eventText=matcher.replaceFirst(matcher.group(1) + \",\");\n    }\n    eventText=\"In \" + eventText;\n    startIndex=endIndex + 2;\n    events.add(eventText);\n  }\n  Collections.reverse(events);\n  return events;\n}"}
{"ids": "75684", "raw_code": "@Override public void removeTableModelListener(TableModelListener l){\n  m_Listeners.remove(l);\n}"}
{"ids": "84111", "raw_code": "public StrBuilder replace(int startIndex,int endIndex,String replaceStr){\n  endIndex=validateRange(startIndex,endIndex);\n  int insertLen=(replaceStr == null ? 0 : replaceStr.length());\n  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);\n  return this;\n}"}
{"ids": "62228", "raw_code": "public static void addPermissionRecursive(Path path,PosixFilePermission permission) throws IOException {\n  changePermissionsRecursive(path,PermissionChange.ADD,Collections.singleton(permission));\n}"}
{"ids": "33299", "raw_code": "public static boolean hasVisibleChildren(ActionGroup group,PresentationFactory factory,ActionManager actionManager,PerspectiveManager perspectiveManager){\n  ActionEvent event=new ActionEvent(factory.getPresentation(group),actionManager,perspectiveManager);\n  for (  Action anAction : group.getChildren(event)) {\n    if (anAction == null) {\n      Log.error(Utils.class,\"Null action found in group \" + group + \", \"+ factory.getPresentation(group));\n      continue;\n    }\n    if (anAction instanceof Separator) {\n      continue;\n    }\n    final Presentation presentation=factory.getPresentation(anAction);\n    anAction.update(new ActionEvent(presentation,actionManager,perspectiveManager));\n    if (anAction instanceof ActionGroup) {\n      ActionGroup childGroup=(ActionGroup)anAction;\n      if (childGroup.isPopup()) {\n        if (!presentation.isVisible()) {\n          continue;\n        }\n      }\n      if (hasVisibleChildren(childGroup,factory,actionManager,perspectiveManager)) {\n        return true;\n      }\n    }\n else     if (presentation.isVisible()) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "69271", "raw_code": "private static void checkArgReferences(String typeSnippet,int numberOfArgs){\n  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet);\n  while (argRefMatcher.find()) {\n    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;\n    Preconditions.checkArgument(index >= 0,\"%s not allowed, indices start at 1\",argRefMatcher.group(0));\n    Preconditions.checkArgument(index < numberOfArgs,\"%s too large for number of provided type mirrors\",argRefMatcher.group(0));\n  }\n}"}
{"ids": "73254", "raw_code": "public void randomize(){\n  randomizeIncomingWeights();\n  normalizeIncomingWeights();\n}"}
{"ids": "22799", "raw_code": "private boolean isFileValid(File file,String methodName){\n  if (file == null) {\n    Log.printConcatLine(name,\".\",methodName,\": Warning - the given file is null.\");\n    return false;\n  }\n  String fileName=file.getName();\n  if (fileName == null || fileName.length() == 0) {\n    Log.printConcatLine(name,\".\" + methodName,\": Warning - invalid file name.\");\n    return false;\n  }\n  return true;\n}"}
{"ids": "62699", "raw_code": "public void append(byte[] bytes){\n  append(bytes,0,bytes.length);\n}"}
{"ids": "84052", "raw_code": "public static boolean enoughSpaceOnPhone(long updateSize){\n  return getRealSizeOnPhone() > updateSize;\n}"}
{"ids": "19795", "raw_code": "private Object stringToValue(Object oldValue,String newValue) throws ReplicatorException {\n  if (oldValue instanceof String) {\n    return newValue;\n  }\n else   if (oldValue instanceof Integer) {\n    return Integer.valueOf(newValue);\n  }\n else   if (oldValue instanceof SerialBlob) {\n    try {\n      return DatabaseHelper.getSafeBlob(newValue.getBytes());\n    }\n catch (    SQLException e) {\n      throw new ReplicatorException(\"Unable to convert back from String to SerialBlob: \" + e,e);\n    }\n  }\n else {\n    return newValue;\n  }\n}"}
{"ids": "52359", "raw_code": "public String toZString(){\n  StringBuilder buffer=new StringBuilder(32);\n  try {\n    printZ(buffer);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Exception printing to StringBuilder\",e);\n  }\n  return buffer.toString();\n}"}
{"ids": "59625", "raw_code": "public TrieDictionary<T> build(int baseId){\n  byte[] trieBytes=buildTrieBytes(baseId);\n  TrieDictionary<T> r=new TrieDictionary<T>(trieBytes);\n  return r;\n}"}
{"ids": "62074", "raw_code": "public void recordState(DialogueState state,String name){\n  states.put(name,state);\n  if (!listModel.contains(name)) {\n    int position=name.contains(CURRENT) ? 0 : Math.min(2,listModel.size());\n    listModel.add(position,name);\n  }\n}"}
{"ids": "20186", "raw_code": "public GeoServerWPSClient(GeoServerConnection connection){\n  this.connection=connection;\n}"}
{"ids": "57354", "raw_code": "protected ConnectionStateSSLv3(SSLSessionImpl session){\n  try {\n    CipherSuite cipherSuite=session.cipherSuite;\n    boolean is_exportabe=cipherSuite.isExportable();\n    hash_size=cipherSuite.getMACLength();\n    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;\n    int iv_size=cipherSuite.ivSize;\n    block_size=cipherSuite.getBlockSize();\n    String algName=cipherSuite.getBulkEncryptionAlgorithm();\n    String hashName=cipherSuite.getHashName();\n    if (logger != null) {\n      logger.println(\"ConnectionStateSSLv3.create:\");\n      logger.println(\"  cipher suite name: \" + session.getCipherSuite());\n      logger.println(\"  encryption alg name: \" + algName);\n      logger.println(\"  hash alg name: \" + hashName);\n      logger.println(\"  hash size: \" + hash_size);\n      logger.println(\"  block size: \" + block_size);\n      logger.println(\"  IV size:\" + iv_size);\n      logger.println(\"  key size: \" + key_size);\n    }\n    byte[] clientRandom=session.clientRandom;\n    byte[] serverRandom=session.serverRandom;\n    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];\n    byte[] seed=new byte[clientRandom.length + serverRandom.length];\n    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);\n    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);\n    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);\n    byte[] client_mac_secret=new byte[hash_size];\n    byte[] server_mac_secret=new byte[hash_size];\n    byte[] client_key=new byte[key_size];\n    byte[] server_key=new byte[key_size];\n    boolean is_client=!session.isServer;\n    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);\n    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);\n    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);\n    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);\n    IvParameterSpec clientIV=null;\n    IvParameterSpec serverIV=null;\n    if (is_exportabe) {\n      if (logger != null) {\n        logger.println(\"ConnectionStateSSLv3: is_exportable\");\n      }\n      MessageDigest md5=MessageDigest.getInstance(\"MD5\");\n      md5.update(client_key);\n      md5.update(clientRandom);\n      md5.update(serverRandom);\n      client_key=md5.digest();\n      md5.update(server_key);\n      md5.update(serverRandom);\n      md5.update(clientRandom);\n      server_key=md5.digest();\n      key_size=cipherSuite.expandedKeyMaterial;\n      if (block_size != 0) {\n        md5.update(clientRandom);\n        md5.update(serverRandom);\n        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);\n        md5.update(serverRandom);\n        md5.update(clientRandom);\n        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);\n      }\n    }\n else     if (block_size != 0) {\n      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);\n      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);\n    }\n    if (logger != null) {\n      logger.println(\"is exportable: \" + is_exportabe);\n      logger.println(\"master_secret\");\n      logger.print(session.master_secret);\n      logger.println(\"client_random\");\n      logger.print(clientRandom);\n      logger.println(\"server_random\");\n      logger.print(serverRandom);\n      logger.println(\"client_mac_secret\");\n      logger.print(client_mac_secret);\n      logger.println(\"server_mac_secret\");\n      logger.print(server_mac_secret);\n      logger.println(\"client_key\");\n      logger.print(client_key,0,key_size);\n      logger.println(\"server_key\");\n      logger.print(server_key,0,key_size);\n      if (clientIV != null) {\n        logger.println(\"client_iv\");\n        logger.print(clientIV.getIV());\n        logger.println(\"server_iv\");\n        logger.print(serverIV.getIV());\n      }\n else {\n        logger.println(\"no IV.\");\n      }\n    }\n    if (algName == null) {\n      encCipher=new NullCipher();\n      decCipher=new NullCipher();\n    }\n else {\n      encCipher=Cipher.getInstance(algName);\n      decCipher=Cipher.getInstance(algName);\n      if (is_client) {\n        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);\n        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);\n      }\n else {\n        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);\n        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);\n      }\n    }\n    messageDigest=MessageDigest.getInstance(hashName);\n    if (is_client) {\n      mac_write_secret=client_mac_secret;\n      mac_read_secret=server_mac_secret;\n    }\n else {\n      mac_write_secret=server_mac_secret;\n      mac_read_secret=client_mac_secret;\n    }\n    if (hashName.equals(\"MD5\")) {\n      pad_1=SSLv3Constants.MD5pad1;\n      pad_2=SSLv3Constants.MD5pad2;\n    }\n else {\n      pad_1=SSLv3Constants.SHApad1;\n      pad_2=SSLv3Constants.SHApad2;\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException(\"Error during computation of security parameters\"));\n  }\n}"}
{"ids": "31363", "raw_code": "public boolean compare(Object expected,Object current){\n  if (current != null) {\n    equal=current.equals(expected);\n  }\n else   if (expected != null) {\n    equal=expected.equals(1.0);\n  }\n  return equal;\n}"}
{"ids": "56800", "raw_code": "private List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromEntities(List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities){\n  List<UserNamespaceAuthorization> userNamespaceAuthorizations=new ArrayList<>();\n  for (  UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities) {\n    userNamespaceAuthorizations.add(createUserNamespaceAuthorizationFromEntity(userNamespaceAuthorizationEntity));\n  }\n  return userNamespaceAuthorizations;\n}"}
{"ids": "78201", "raw_code": "private void readHeader() throws OpenStegoException {\n  this.dataHeader=new DCTDataHeader(this,this.config);\n}"}
{"ids": "25745", "raw_code": "protected void drawText(String text1,String text2,int x,int y,Canvas c){\n  if (textPaint == null) {\n    Paint p=new Paint();\n    p.setTypeface(RobotoLightTypeface.getInstance(context));\n    p.setColor(textColor);\n    p.setTextSize(14 * pixelDensity);\n    this.textPaint=p;\n  }\n  float w=textPaint.measureText(text1,0,text1.length());\n  int offset=(int)w / 2;\n  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);\n  w=textPaint.measureText(text2,0,text2.length());\n  offset=(int)w / 2;\n  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);\n}"}
{"ids": "48437", "raw_code": "public static boolean pointOutsidePrefSize(JTable table,int row,int column,Point p){\n  if (table.convertColumnIndexToModel(column) != 0 || row == -1) {\n    return true;\n  }\n  TableCellRenderer tcr=table.getCellRenderer(row,column);\n  Object value=table.getValueAt(row,column);\n  Component cell=tcr.getTableCellRendererComponent(table,value,false,false,row,column);\n  Dimension itemSize=cell.getPreferredSize();\n  Rectangle cellBounds=table.getCellRect(row,column,false);\n  cellBounds.width=itemSize.width;\n  cellBounds.height=itemSize.height;\n  assert (p.x >= cellBounds.x && p.y >= cellBounds.y);\n  return p.x > cellBounds.x + cellBounds.width || p.y > cellBounds.y + cellBounds.height;\n}"}
{"ids": "85733", "raw_code": "public Builder addSourceFolder(@NonNull File folder){\n  foldersToScan.add(folder);\n  return this;\n}"}
{"ids": "21877", "raw_code": "public Method suspendSRDFGroupMethod(final URI systemURI,final RemoteDirectorGroup group,final List<URI> sourceVolumes,final List<URI> targetVolumes){\n  return new Workflow.Method(SUSPEND_SRDF_GROUP_METHOD,systemURI,group,sourceVolumes,targetVolumes);\n}"}
{"ids": "40838", "raw_code": "private void fieldGoalAtt(Team offense,Team defense){\n  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);\n  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);\n  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);\n  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);\n  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {\n    if (gamePoss) {\n      homeScore+=3;\n      HomeKStats[3]++;\n      HomeKStats[2]++;\n    }\n else {\n      awayScore+=3;\n      AwayKStats[3]++;\n      AwayKStats[2]++;\n    }\n    gameEventLog+=getEventPrefix() + offense.abbr + \" K \"+ offense.getK(0).name+ \" made the \"+ (110 - gameYardLine)+ \" yard FG.\";\n    addPointsQuarter(3);\n    offense.getK(0).statsFGMade++;\n    offense.getK(0).statsFGAtt++;\n    if (!playingOT)     kickOff(offense);\n else     resetForOT();\n  }\n else {\n    gameEventLog+=getEventPrefix() + offense.abbr + \" K \"+ offense.getK(0).name+ \" missed the \"+ (110 - gameYardLine)+ \" yard FG.\";\n    offense.getK(0).statsFGAtt++;\n    if (!playingOT) {\n      gameYardLine=Math.max(100 - gameYardLine,20);\n      gameDown=1;\n      gameYardsNeed=10;\n      if (gamePoss) {\n        HomeKStats[3]++;\n      }\n else {\n        AwayKStats[3]++;\n      }\n      gamePoss=!gamePoss;\n    }\n else     resetForOT();\n  }\n  gameTime-=20;\n}"}
{"ids": "36144", "raw_code": "@Override public double calculateM(double delta,double epsilon){\n  double i=1;\n  while (conf(i,delta) > epsilon / 2.0d) {\n    i=i + 10000;\n  }\n  if (i > 1) {\n    i=i - 10000;\n  }\n  while (conf(i,delta) > (epsilon / 2.0d)) {\n    i++;\n  }\n  return Math.ceil(i);\n}"}
{"ids": "63102", "raw_code": "public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {\n  ServerSocket socket=null;\n  if (SysProperties.ENABLE_ANONYMOUS_TLS) {\n    removeAnonFromLegacyAlgorithms();\n  }\n  setKeystore();\n  ServerSocketFactory f=SSLServerSocketFactory.getDefault();\n  SSLServerSocket secureSocket;\n  if (bindAddress == null) {\n    secureSocket=(SSLServerSocket)f.createServerSocket(port);\n  }\n else {\n    secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);\n  }\n  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));\n  if (SysProperties.ENABLE_ANONYMOUS_TLS) {\n    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());\n    secureSocket.setEnabledCipherSuites(list);\n  }\n  socket=secureSocket;\n  return socket;\n}"}
{"ids": "84135", "raw_code": "public void printBytes(byte[] data,int offset,int length) throws IOException {\n  int i;\n  for (; length >= 3; length-=3) {\n    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));\n    os.write(base64encode(chunk >> 18));\n    os.write(base64encode(chunk >> 12));\n    os.write(base64encode(chunk >> 6));\n    os.write(base64encode(chunk));\n    offset+=3;\n  }\n  if (length == 2) {\n    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);\n    os.write(base64encode(chunk >> 12));\n    os.write(base64encode(chunk >> 6));\n    os.write(base64encode(chunk));\n    os.write('=');\n  }\n else   if (length == 1) {\n    int chunk=data[offset] & 0xff;\n    os.write(base64encode(chunk >> 6));\n    os.write(base64encode(chunk));\n    os.write('=');\n    os.write('=');\n  }\n}"}
{"ids": "22518", "raw_code": "public void deleteVVset(String nativeId) throws Exception {\n  _log.info(\"3PARDriver: deleteVVset enter\");\n  ClientResponse clientResp=null;\n  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);\n  _log.info(\"3PARDriver:deleteVVset running delete VV Set \" + path);\n  try {\n    clientResp=delete(path);\n    if (clientResp == null) {\n      _log.error(\"3PARDriver:deleteVVset There is no response from 3PAR\");\n      throw new HP3PARException(\"There is no response from 3PAR\");\n    }\n else     if (clientResp.getStatus() != 200) {\n      String errResp=getResponseDetails(clientResp);\n      throw new HP3PARException(errResp);\n    }\n else {\n      _log.info(\"3PARDriver: deleteVVset success\");\n    }\n  }\n catch (  Exception e) {\n    throw e;\n  }\n finally {\n    if (clientResp != null) {\n      clientResp.close();\n    }\n    _log.info(\"3PARDriver:deleteVVset leave\");\n  }\n}"}
{"ids": "74227", "raw_code": "private int findKeyCommentIndex(String keyName){\n  for (int i=0; i < keyValComments.size(); i++) {\n    String t=keyValComments.get(i);\n    String targetedKey=\"! \" + keyName + \": \";\n    if (t.startsWith(targetedKey)) {\n      return i;\n    }\n  }\n  if (log.isDebugEnabled()) {\n    log.debug(\"Did not find key \" + keyName);\n  }\n  return -1;\n}"}
{"ids": "34727", "raw_code": "public static boolean isAddToHomeIntentSupported(Context context){\n  PackageManager pm=context.getPackageManager();\n  Intent i=new Intent(INSTALL_SHORTCUT);\n  List<ResolveInfo> receivers=pm.queryBroadcastReceivers(i,PackageManager.GET_INTENT_FILTERS);\n  return !receivers.isEmpty();\n}"}
{"ids": "19491", "raw_code": "InMemoryEntryStore(){\n  entries=Maps.newHashMap();\n  topLevelEntries=Sets.newHashSet();\n  children=HashMultimap.create();\n}"}
{"ids": "31041", "raw_code": "public ClassAnnotator(URL[] codebase,Properties props){\n  if (props != null)   properties.putAll(props);\n  setAnnotationURLs(codebase);\n}"}
{"ids": "67275", "raw_code": "public int next(){\n  return mix(gen.getAndIncrement());\n}"}
{"ids": "22723", "raw_code": "public InputStream put(final URLConnection connection,final boolean flushCacheOnClose){\n  final String key=getKey(connection);\n  if (key == null)   return null;\n  if (!isCacheable((HttpURLConnection)connection))   try {\n    cache.remove(key);\n    return null;\n  }\n catch (  IOException e) {\n    return null;\n  }\n  String etag=connection.getHeaderField(HEADER_ETAG);\n  if (etag == null || etag.length() == 0)   return null;\n  Editor editor;\n  try {\n    editor=cache.edit(key);\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (editor == null)   return null;\n  try {\n    editor.set(ETAG,etag);\n  }\n catch (  IOException e) {\n    try {\n      editor.abort();\n    }\n catch (    IOException ignored) {\n    }\n    return null;\n  }\n  InputStream input;\n  try {\n    input=connection.getInputStream();\n    if (!(input instanceof InflaterInputStream) && ENCODING_GZIP.equals(connection.getHeaderField(HEADER_CONTENT_ENCODING)))     input=new GZIPInputStream(input);\n  }\n catch (  IOException e) {\n    return null;\n  }\n  OutputStream output;\n  try {\n    output=editor.newOutputStream(BODY);\n  }\n catch (  IOException e) {\n    return null;\n  }\n  if (output != null)   return new CacheStream(input,output,editor,this,flushCacheOnClose);\n else   return null;\n}"}
{"ids": "16779", "raw_code": "public static String[] parseTitle(String title){\n  String v[]={\"\",\"\"};\n  if (title == null)   return v;\n  Pattern p=Pattern.compile(\"(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?\",Pattern.CASE_INSENSITIVE);\n  Matcher m=p.matcher(title);\n  if (m.find()) {\n    v[0]=m.group(1);\n    v[1]=m.group(2);\n  }\n else {\n    v[0]=title;\n  }\n  return v;\n}"}
{"ids": "75558", "raw_code": "public String sel(){\n  return mSelection.toString();\n}"}
{"ids": "75417", "raw_code": "public void rootRemoved(ISVNRepositoryLocation root){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.repositoryRemoved(root);\n  }\n}"}
{"ids": "42281", "raw_code": "public synchronized void insert(double _priority,Object _data){\n  numElements++;\n  if (numElements == queue.length) {\n    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];\n    System.arraycopy(queue,0,tmp,0,queue.length);\n    for (int i=queue.length; i < tmp.length; i++) {\n      tmp[i]=new PriorityQueueNode();\n    }\n    queue=tmp;\n  }\n  queue[numElements].data=_data;\n  queue[numElements].priority=_priority;\n  reheapify(numElements);\n}"}
{"ids": "33329", "raw_code": "protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {\n  String setGroup=\"export GROUP_NAME=`(getent group \" + getGid() + \" || (groupadd -g \"+ getGid()+ \" user && echo user:x:\"+ getGid()+ \")) | cut -d: -f1`\";\n  String setUser=\"export USER_NAME=`(getent passwd \" + getUid() + \" || (useradd -u \"+ getUid()+ \" -g ${GROUP_NAME} user && echo user:x:\"+ getGid()+ \")) | cut -d: -f1`\";\n  String chownCommand=\"chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true\";\n  return setGroup + \" && \" + setUser+ \" && \"+ chownCommand+ \" && \"+ command+ \" && \"+ chownCommand;\n}"}
{"ids": "30553", "raw_code": "public AbstractDMLQuery parseSqlQuery(SQLQuery sqlQuery,ISpaceProxy space) throws SQLException {\n  AbstractDMLQuery query=(AbstractDMLQuery)getQueryFromCache(getUniqueKey(sqlQuery));\n  try {\n    if (query == null) {\n      if (_logger.isLoggable(Level.FINE)) {\n        _logger.fine(\"Query wasn't in cache, will be parsed\");\n      }\n      SqlParser parser=initParser(sqlQuery.getQuery());\n      query=parse(parser);\n      query.setTableName(sqlQuery.getTypeName());\n      query.validateQuery(space);\n      if (!query.isPrepared() && !query.containsSubQueries())       query.build();\n      addQueryToCache(getUniqueKey(sqlQuery),query);\n      if (!query.isPrepared())       return query;\n    }\n    query=query.clone();\n    return query;\n  }\n catch (  SQLException sqlEx) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.log(Level.FINE,\"Error executing statement [\" + sqlQuery.getQuery() + \"]\",sqlEx);\n    }\n    throw sqlEx;\n  }\ncatch (  Throwable t) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.log(Level.FINE,\"Couldn't parse given statement [\" + sqlQuery.getQuery() + \"]\",t);\n    }\n    SQLException sqlEx=new SQLException(\"Error in statement [\" + sqlQuery.getQuery() + \"]; Cause: \"+ t,\"GSP\",-201);\n    sqlEx.initCause(t);\n    throw sqlEx;\n  }\n}"}
{"ids": "38404", "raw_code": "private int indexOfElementInLevel(int element,int level[]) throws Exception {\n  for (int i=0; i < level.length; i++) {\n    if (level[i] == element) {\n      return i;\n    }\n  }\n  throw new Exception(\"Error. Didn't find element \" + m_nodes.get(element).ID + \" in level. Inspect code for \"+ \"weka.gui.graphvisualizer.HierarchicalBCEngine\");\n}"}
{"ids": "14949", "raw_code": "public int size(){\n  return _attrs.size();\n}"}
{"ids": "12698", "raw_code": "public void deepSort(int[] setFeatureSequence){\n  featureSequence=setFeatureSequence;\n  numberOfLeaves=0;\n  tree=new MaryNode(0,featureVectors.length);\n  sortNode(0,tree);\n}"}
{"ids": "54075", "raw_code": "public void removeListeners(){\n  listeners.clear();\n}"}
{"ids": "75786", "raw_code": "public static double L_RankLoss(int y[],int r[]){\n  int L=y.length;\n  ArrayList<Integer> tI=new ArrayList<Integer>();\n  ArrayList<Integer> fI=new ArrayList<Integer>();\n  for (int j=0; j < L; j++) {\n    if (y[j] == 1) {\n      tI.add(j);\n    }\n else {\n      fI.add(j);\n    }\n  }\n  if (!tI.isEmpty() && !fI.isEmpty()) {\n    int c=0;\n    for (    int k : tI) {\n      for (      int l : fI) {\n        if (position(k,r) < position(l,r)) {\n          c++;\n        }\n      }\n    }\n    return (double)c / (double)(tI.size() * fI.size());\n  }\n else {\n    return 0.0;\n  }\n}"}
{"ids": "53002", "raw_code": "private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){\n  final DBIDs ids=clus.getIDs();\n  double weight=ids.size();\n  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {\n    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));\n    if (projP[0] != projP[0] || projP[1] != projP[1]) {\n      continue;\n    }\n    hull.add(projP);\n  }\n  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {\n    weight+=.5 * addRecursively(hull,hier,iter.get());\n  }\n  return weight;\n}"}
{"ids": "65962", "raw_code": "public void attributeUpdate(PrintServiceAttributeEvent psae){\n  log.fine(\"attributeUpdate - \" + psae);\n}"}
{"ids": "73125", "raw_code": "public void evict() throws Exception {\n  assertOpen();\n  boolean isEmpty;\nsynchronized (this) {\n    isEmpty=pool.isEmpty();\n  }\n  if (!isEmpty) {\n    if (softMinEvictableIdleTimeMillis > 0) {\n      int numToEvict=getNumIdle() - getMinIdle();\n      evict(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict);\n    }\n    if (minEvictableIdleTimeMillis > 0) {\n      int numToEvict=getNumIdle();\n      evict(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict);\n    }\n  }\n}"}
{"ids": "76236", "raw_code": "protected void generateRandomPopulation(int population_size){\n  logger.debug(\"Creating random population\");\n  for (int i=0; i < population_size; i++) {\n    T individual=chromosomeFactory.getChromosome();\n    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {\n      individual.addFitness(fitnessFunction);\n    }\n    population.add(individual);\n    if (isFinished())     break;\n  }\n  logger.debug(\"Created \" + population.size() + \" individuals\");\n}"}
{"ids": "43706", "raw_code": "public List<Visitante> listar(){\n  List<Visitante> dados=new ArrayList<>();\n  try {\n    String sql=\"SELECT tb_visitantes.* FROM tb_visitantes \";\n    stm=conector.prepareStatement(sql);\n    rs=stm.executeQuery(sql);\n    while (rs.next()) {\n      dados.add(new Visitante(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),Tempo.toDate(rs.getTimestamp(7)),rs.getString(8),rs.getString(9)));\n    }\n    stm.close();\n    rs.close();\n  }\n catch (  SQLException ex) {\n    Mensagem.erro(\"Erro ao consultar visitantes na base de dados! \\n\" + ex);\n  }\n  return dados;\n}"}
{"ids": "42424", "raw_code": "private void insertBefore(Instruction[] list,Instruction s){\n  for (  Instruction x : list) {\n    s.insertBefore(x);\n  }\n}"}
{"ids": "24750", "raw_code": "public static Builder newBuilder(){\n  return new Builder();\n}"}
{"ids": "70099", "raw_code": "public int countArray(String[] array){\n  return array.length;\n}"}
{"ids": "74669", "raw_code": "private void processUnprocessed(){\n  boolean clean_processings=Boolean.getBoolean(\"Archive.processings.clean\");\n  logger.info(\"Archives processing clean instead of recovery \" + \"(Archive.processings.clean) requested by user (\" + clean_processings + \")\");\n  productService.processUnprocessed(!clean_processings);\n}"}
{"ids": "75618", "raw_code": "public double[] popy(double x_[]){\n  return popY(new double[][]{x_})[0];\n}"}
{"ids": "56467", "raw_code": "public GeoDistanceBuilder addUnboundedFrom(String key,double from){\n  ranges.add(new Range(key,from,null));\n  return this;\n}"}
{"ids": "71975", "raw_code": "private void sendResponse(Document doc,MessageFactory messageFactory,String contentType,HttpServletResponse res) throws IOException, SOAPException {\n  SOAPMessage reply=messageFactory.createMessage();\n  SOAPHeader header=reply.getSOAPHeader();\n  header.detachNode();\n  SOAPBody replyBody=reply.getSOAPBody();\n  res.setHeader(\"Content-Type\",contentType);\n  replyBody.addDocument(doc);\n  reply.saveChanges();\n  OutputStream os=res.getOutputStream();\n  reply.writeTo(os);\n  os.flush();\n}"}
{"ids": "67683", "raw_code": "public static String replaceChars(String str,String oldchars,char newchar){\n  int pos=indexOfChars(str,oldchars);\n  if (pos == -1) {\n    return str;\n  }\n  StringBuilder buf=new StringBuilder(str);\n  do {\n    buf.setCharAt(pos,newchar);\n    pos=indexOfChars(str,oldchars,pos + 1);\n  }\n while (pos != -1);\n  return buf.toString();\n}"}
{"ids": "25394", "raw_code": "public InMemoryMessageExchangeStore(final NetworkConfig config,TokenProvider tokenProvider){\n  if (config == null) {\n    throw new NullPointerException(\"Configuration must not be null\");\n  }\n  if (tokenProvider == null) {\n    throw new NullPointerException(\"TokenProvider must not be null\");\n  }\n  this.tokenProvider=tokenProvider;\n  this.config=config;\n}"}
{"ids": "6703", "raw_code": "public static void next(){\n  try {\n    if (musicPlaybackService != null) {\n      musicPlaybackService.next();\n    }\n  }\n catch (  final RemoteException ignored) {\n  }\n}"}
{"ids": "523", "raw_code": "private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){\n  drawPaint.setStyle(Paint.Style.FILL);\n  float strokeRadius=radius + mRadiusStrokeWidth;\n  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);\n  drawPaint.setXfermode(null);\n  final int halfBitmapWidth=bitmap.getWidth() / 2;\n  final int halfBitmapHeight=bitmap.getHeight() / 2;\n  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);\n  Matrix shaderMatrix=new Matrix();\n  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();\n  float scale=radius * 2 / minSize;\n  shaderMatrix.setScale(scale,scale);\n  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));\n  bitmapShader.setLocalMatrix(shaderMatrix);\n  drawPaint.setShader(bitmapShader);\n  canvas.drawCircle(centerX,centerY,radius,drawPaint);\n  drawPaint.setShader(null);\n}"}
{"ids": "69620", "raw_code": "public MqttDevice mqttDevice(){\n  return mqttDevice;\n}"}
{"ids": "63172", "raw_code": "public AbbaLockingDetector startCollecting(){\n  thread=new Thread(this,\"AbbaLockingDetector\");\n  thread.setDaemon(true);\n  thread.start();\n  return this;\n}"}
{"ids": "79909", "raw_code": "public float toMeters(double pixels){\n  return (float)(pixels * METERS_PER_PIXELS);\n}"}
{"ids": "1372", "raw_code": "boolean addToBuffer(char c) throws IOException {\n  int len=sb.length();\n  if (len == 0 && c != CHAR_LT)   return false;\n  sb.append(c);\n  if (++len >= minTagLen) {\n    boolean isClosingTag=(len >= 2 && sb.charAt(1) == CHAR_SL);\n    String substr;\n    if (isClosingTag)     substr=sb.substring(2);\n else     substr=sb.substring(1);\n    for (int i=0; i < EXCLUDE_TAGS.length; i++) {\n      if (substr.equalsIgnoreCase(EXCLUDE_TAGS[i])) {\n        if (isClosingTag) {\n          depthDec(i);\n          printBuffer();\n          lastChar=0;\n        }\n else {\n          depthInc(i);\n        }\n      }\n    }\n  }\n  return true;\n}"}
{"ids": "24153", "raw_code": "public static <T>T jsonToObject(String jsonString,Class<T> klass){\n  T objectFromJson=null;\n  try {\n    GfJsonObject jsonObject=new GfJsonObject(jsonString);\n    objectFromJson=klass.newInstance();\n    Method[] declaredMethods=klass.getDeclaredMethods();\n    Map<String,Method> methodsMap=new HashMap<String,Method>();\n    for (    Method method : declaredMethods) {\n      methodsMap.put(method.getName(),method);\n    }\n    int noOfFields=jsonObject.size();\n    Iterator<String> keys=jsonObject.keys();\n    while (keys.hasNext()) {\n      String key=keys.next();\n      Method method=methodsMap.get(\"set\" + capitalize(key));\n      if (method != null) {\n        Class<?>[] parameterTypes=method.getParameterTypes();\n        if (parameterTypes.length == 1) {\n          Class<?> parameterType=parameterTypes[0];\n          Object value=jsonObject.get(key);\n          if (isPrimitiveOrWrapper(parameterType)) {\n            value=getPrimitiveOrWrapperValue(parameterType,value);\n          }\n else           if (isArray(parameterType)) {\n            value=toArray(value,parameterType);\n          }\n else           if (isList(parameterType)) {\n            value=toList(value,parameterType);\n          }\n else           if (isMap(parameterType)) {\n            value=toMap(value,parameterType);\n          }\n else           if (isSet(parameterType)) {\n            value=toSet(value,parameterType);\n          }\n else {\n            value=jsonToObject(value.toString(),parameterType);\n          }\n          method.invoke(objectFromJson,new Object[]{value});\n          noOfFields--;\n        }\n      }\n    }\n    if (noOfFields != 0) {\n      throw new IllegalArgumentException(\"Not enough setter methods for fields in given JSON String : \" + jsonString + \" in class : \"+ klass);\n    }\n  }\n catch (  InstantiationException e) {\n    throw new IllegalArgumentException(\"Couldn't convert JSON to Object of type \" + klass,e);\n  }\ncatch (  IllegalAccessException e) {\n    throw new IllegalArgumentException(\"Couldn't convert JSON to Object of type \" + klass,e);\n  }\ncatch (  GfJsonException e) {\n    throw new IllegalArgumentException(\"Couldn't convert JSON to Object of type \" + klass,e);\n  }\ncatch (  IllegalArgumentException e) {\n    throw new IllegalArgumentException(\"Couldn't convert JSON to Object of type \" + klass,e);\n  }\ncatch (  InvocationTargetException e) {\n    throw new IllegalArgumentException(\"Couldn't convert JSON to Object of type \" + klass,e);\n  }\n  return objectFromJson;\n}"}
{"ids": "24297", "raw_code": "private Cache createCache() throws CacheException {\n  final Properties props=new Properties();\n  props.setProperty(LOCATORS,\"\");\n  props.setProperty(MCAST_PORT,\"0\");\n  return CacheFactory.create(DistributedSystem.connect(props));\n}"}
{"ids": "37583", "raw_code": "protected String[][] toArray(){\n  int i;\n  int n;\n  int ii;\n  int nn;\n  int x;\n  int y;\n  String[][] result;\n  String[][] tmpResult;\n  int cols;\n  int rows;\n  boolean valueExists;\n  rows=getVisibleRowCount();\n  if (getShowAverage()) {\n    rows++;\n  }\n  cols=getVisibleColCount();\n  if (getShowStdDev()) {\n    cols=cols * 3;\n  }\n else {\n    cols=cols * 2;\n  }\n  result=new String[rows + 2][cols + 1];\n  result[0][0]=trimString(\"Dataset\",getRowNameWidth());\n  x=1;\n  for (ii=0; ii < getColCount(); ii++) {\n    i=getDisplayCol(ii);\n    if (getColHidden(i)) {\n      continue;\n    }\n    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());\n    x++;\n    if (getShowStdDev()) {\n      result[0][x]=\"\";\n      x++;\n    }\n    result[0][x]=\"\";\n    x++;\n  }\n  y=1;\n  for (ii=0; ii < getRowCount(); ii++) {\n    i=getDisplayRow(ii);\n    if (!getRowHidden(i)) {\n      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());\n      y++;\n    }\n  }\n  y=1;\n  for (ii=0; ii < getRowCount(); ii++) {\n    i=getDisplayRow(ii);\n    if (getRowHidden(i)) {\n      continue;\n    }\n    x=1;\n    for (nn=0; nn < getColCount(); nn++) {\n      n=getDisplayCol(nn);\n      if (getColHidden(n)) {\n        continue;\n      }\n      valueExists=(!Double.isNaN(getMean(n,i)));\n      if (!valueExists) {\n        result[y][x]=\"\";\n      }\n else {\n        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());\n      }\n      x++;\n      if (getShowStdDev()) {\n        if (!valueExists) {\n          result[y][x]=\"\";\n        }\n else         if (Double.isInfinite(getStdDev(n,i))) {\n          result[y][x]=\"Inf\";\n        }\n else {\n          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());\n        }\n        x++;\n      }\n      if (!valueExists) {\n        result[y][x]=\"\";\n      }\n else {\nswitch (getSignificance(n,i)) {\ncase SIGNIFICANCE_TIE:\n          result[y][x]=TIE_STRING;\n        break;\ncase SIGNIFICANCE_WIN:\n      result[y][x]=WIN_STRING;\n    break;\ncase SIGNIFICANCE_LOSS:\n  result[y][x]=LOSS_STRING;\nbreak;\n}\n}\nx++;\n}\ny++;\n}\nif (getShowAverage()) {\ny=result.length - 2;\nx=0;\nresult[y][0]=\"Average\";\nx++;\nfor (ii=0; ii < getColCount(); ii++) {\ni=getDisplayCol(ii);\nif (getColHidden(i)) {\ncontinue;\n}\nresult[y][x]=doubleToString(getAverage(i),getMeanPrec());\nx++;\nif (getShowStdDev()) {\nresult[y][x]=\"\";\nx++;\n}\nresult[y][x]=\"\";\nx++;\n}\n}\ny=result.length - 1;\nx=0;\nresult[y][0]=LEFT_PARENTHESES + WIN_STRING + \"/\"+ TIE_STRING+ \"/\"+ LOSS_STRING+ RIGHT_PARENTHESES;\nx++;\nfor (ii=0; ii < getColCount(); ii++) {\ni=getDisplayCol(ii);\nif (getColHidden(i)) {\ncontinue;\n}\nresult[y][x]=\"\";\nx++;\nif (getShowStdDev()) {\nresult[y][x]=\"\";\nx++;\n}\nresult[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + \"/\"+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ \"/\"+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;\nx++;\n}\ntmpResult=new String[result.length][result[0].length - 1];\nx=0;\nfor (i=0; i < result[0].length; i++) {\nif (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {\ncontinue;\n}\nfor (n=0; n < result.length; n++) {\ntmpResult[n][x]=result[n][i];\n}\nx++;\n}\nresult=tmpResult;\nreturn result;\n}"}
{"ids": "78724", "raw_code": "private Environment(){\n  throw ContractUtils.unreachable();\n}"}
{"ids": "40912", "raw_code": "public void removePhoto(PhotoEntity photo){\n  photos.remove(photo);\n}"}
{"ids": "20788", "raw_code": "public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){\n  activeMatchesForClassification.clear();\n  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {\n    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {\n      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);\n    }\n  }\n  float bestScore=0;\n  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {\n    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n    float score=matchBlock.getBitScore();\n    if (score > bestScore)     bestScore=score;\n  }\n  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);\n}"}
{"ids": "56212", "raw_code": "public E[] toArray(E[] a){\n  if (a.length != array.length()) {\n    throw new ElasticsearchGenerationException(\"AtomicArrays can only be copied to arrays of the same size\");\n  }\n  for (int i=0; i < array.length(); i++) {\n    a[i]=array.get(i);\n  }\n  return a;\n}"}
{"ids": "76959", "raw_code": "synchronized public void failOn(Failure fail){\n  if (failures == null) {\n    failures=new ArrayList<>();\n  }\n  failures.add(fail);\n}"}
{"ids": "55342", "raw_code": "private static Set<String> createCategoriesSet(Set<String> categories){\n  Set<String> result=new HashSet<>();\n  for (  String cat : categories) {\n    result.add(StringUtil.toLowerCase(cat));\n  }\n  return result;\n}"}
{"ids": "86248", "raw_code": "public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {\n  if (!file.exists()) {\n    throw new FileNotFoundException(file.getAbsolutePath());\n  }\n  InputStream inputStream=null;\n  try {\n    inputStream=new FileInputStream(file);\n  }\n catch (  IOException e) {\n    throw new FTPDataTransferException(e);\n  }\n  try {\n    upload(file.getName(),inputStream,restartAt,restartAt,listener);\n  }\n catch (  IllegalStateException e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw e;\n  }\ncatch (  FTPIllegalReplyException e) {\n    throw e;\n  }\ncatch (  FTPException e) {\n    throw e;\n  }\ncatch (  FTPDataTransferException e) {\n    throw e;\n  }\ncatch (  FTPAbortedException e) {\n    throw e;\n  }\n finally {\n    if (inputStream != null) {\n      try {\n        inputStream.close();\n      }\n catch (      Throwable t) {\n        ;\n      }\n    }\n  }\n}"}
{"ids": "40265", "raw_code": "public SSLSocket createSSLSocket(Socket socket) throws IOException {\n  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());\n  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();\n  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));\n  s.setUseClientMode(false);\n  s.setEnabledCipherSuites(s.getSupportedCipherSuites());\n  return s;\n}"}
{"ids": "23837", "raw_code": "static boolean causedByRDE(DiskAccessException dae){\n  boolean result=false;\n  if (dae != null) {\n    Throwable cause=dae.getCause();\n    while (cause != null) {\n      if (cause instanceof RegionDestroyedException) {\n        result=true;\n        break;\n      }\n      cause=cause.getCause();\n    }\n  }\n  return result;\n}"}
{"ids": "27074", "raw_code": "public MagicVariablesArgumentsBundle(@NonNull Map<String,String> arguments,@NonNull Map<String,String> variables,String layerName,@NonNull DisplayMetrics metrics){\n  super(arguments,metrics);\n  mVariables=variables;\n  mLayerNamePrefix='@' + layerName.replace('-','_') + '_';\n}"}
{"ids": "25493", "raw_code": "@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){\n  this.workArea=workArea.getAddress();\n  this.workAreaSize=workAreaSize;\n  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);\n  frameRate=usbCamSetupVideoExParam.framerate;\n  whiteBalance=usbCamSetupVideoExParam.wb;\n  saturation=usbCamSetupVideoExParam.saturation;\n  brightness=usbCamSetupVideoExParam.brightness;\n  contrast=usbCamSetupVideoExParam.contrast;\n  sharpness=usbCamSetupVideoExParam.sharpness;\n  imageEffectMode=usbCamSetupVideoExParam.effectmode;\n  frameSize=usbCamSetupVideoExParam.framesize;\n  evLevel=usbCamSetupVideoExParam.evlevel;\n  if (!setupVideo()) {\n    log.warn(String.format(\"Cannot find webcam\"));\n    return SceKernelErrors.ERROR_USBCAM_NOT_READY;\n  }\n  return 0;\n}"}
{"ids": "49830", "raw_code": "public static Date convertISO8601toDate(String dateString) throws ParseException {\n  DateFormat dateFormat=new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n  Date date=dateFormat.parse(dateString);\n  return date;\n}"}
{"ids": "9951", "raw_code": "public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {\n  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();\n  dbf.setValidating(false);\n  dbf.setIgnoringComments(false);\n  dbf.setIgnoringElementContentWhitespace(true);\n  dbf.setNamespaceAware(true);\n  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);\n  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);\n  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);\n  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);\n  dbf.setFeature(LOAD_EXTERNAL_DTD,false);\n  DocumentBuilder db=null;\n  db=dbf.newDocumentBuilder();\n  db.setEntityResolver(new NullResolver());\n  db.setErrorHandler(new SamlParserErrorHandler());\n  return db.parse(is);\n}"}
{"ids": "32445", "raw_code": "public void resetCount(){\n  msgCnt.set(0);\n}"}
{"ids": "41569", "raw_code": "void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {\n  realm=new byte[length];\n  System.arraycopy(attributeValue,offset,realm,0,length);\n}"}
{"ids": "41351", "raw_code": "public boolean is_same(Object obj){\n  if (this == obj)   return true;\n  if (obj == null)   return false;\n  if (getClass() != obj.getClass())   return false;\n  HouseNumber other=(HouseNumber)obj;\n  if (number == null) {\n    if (name == null) {\n      if (other.name != null)       return false;\n    }\n else     if (!name.equals(other.name))     return false;\n  }\n else   if (!number.equals(other.number))   return false;\n  if (street == null) {\n    if (other.street != null)     return false;\n  }\n else   if (!street.equals(other.street))   return false;\n  return true;\n}"}
{"ids": "53947", "raw_code": "public int threeWayDistance(Key k1,Key k2){\n  byte[] h0=hash;\n  byte[] h1=k1.hash;\n  byte[] h2=k2.hash;\n  int mmi=mismatch(h1,h2);\n  if (mmi == -1)   return 0;\n  int h=Byte.toUnsignedInt(h0[mmi]);\n  int a=Byte.toUnsignedInt(h1[mmi]);\n  int b=Byte.toUnsignedInt(h2[mmi]);\n  return Integer.compareUnsigned(a ^ h,b ^ h);\n}"}
{"ids": "12060", "raw_code": "public AsyncSelector() throws IOException {\n  this(Selector.open());\n}"}
{"ids": "82252", "raw_code": "public void removeChildAt(int index){\n  if ((index < 0) || (children == null) || (index >= children.size())) {\n    throw new ArrayIndexOutOfBoundsException();\n  }\n  Element child=(Element)children.get(index);\n  child.setParent(null);\n  children.remove(index);\n}"}
{"ids": "51930", "raw_code": "static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {\n  File[] files=file.listFiles();\n  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);\n}"}
{"ids": "31861", "raw_code": "public static boolean hasSuppressed(@Nullable Throwable t,@Nullable Class<? extends Throwable> cls){\n  if (t == null || cls == null)   return false;\n  if (t.getSuppressed() != null) {\n    for (    Throwable th : t.getSuppressed()) {\n      if (cls.isAssignableFrom(th.getClass()))       return true;\n      if (hasSuppressed(th,cls))       return true;\n    }\n  }\n  return false;\n}"}
{"ids": "63031", "raw_code": "static int writeVarLong(OutputStream out,long x) throws IOException {\n  int len=0;\n  while ((x & ~0x7f) != 0) {\n    out.write((byte)(0x80 | (x & 0x7f)));\n    x>>>=7;\n    len++;\n  }\n  out.write((byte)x);\n  return ++len;\n}"}
{"ids": "49249", "raw_code": "protected void engineUpdate(byte b) throws SignatureException {\n  messageDigest.update(b);\n  needsReset=true;\n}"}
{"ids": "60788", "raw_code": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    s.defaultWriteObject();\n    for (Node<E> p=first; p != null; p=p.next)     s.writeObject(p.item);\n    s.writeObject(null);\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "21084", "raw_code": "private boolean checkIfInitiatorForRPBeforeMigration(Initiator initiator){\n  if (initiator == null) {\n    return false;\n  }\n  boolean isRP=true;\n  if (NullColumnValueGetter.isNullValue(initiator.getHostName()) || !NullColumnValueGetter.isNullURI(initiator.getHost())) {\n    isRP=false;\n  }\n  log.debug(\"RP initiator? \" + (isRP ? \"Yes!\" : \"No!\"));\n  return isRP;\n}"}
{"ids": "86497", "raw_code": "@Override public Collection<SerialMessage> initialize(boolean refresh){\n  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();\n  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {\n    result.add(getSupportedMessage());\n  }\n  return result;\n}"}
{"ids": "49968", "raw_code": "public static DMLConfig readConfigurationFile(String configPath) throws ParseException, FileNotFoundException {\n  DMLConfig config=new DMLConfig();\n  if (configPath != null) {\n    try {\n      config=new DMLConfig(configPath,false);\n    }\n catch (    FileNotFoundException fnfe) {\n      LOG.error(\"Custom config file \" + configPath + \" not found.\");\n      throw fnfe;\n    }\ncatch (    ParseException e) {\n      throw e;\n    }\n  }\n else {\n    try {\n      config=new DMLConfig(DEFAULT_SYSTEMML_CONFIG_FILEPATH,false);\n    }\n catch (    FileNotFoundException fnfe) {\n      LOG.info(\"Using internal default configuration settings.  If you wish to \" + \"customize any settings, please supply a `SystemML-config.xml` file.\");\n      config=new DMLConfig();\n    }\ncatch (    ParseException e) {\n      throw e;\n    }\n  }\n  return config;\n}"}
{"ids": "83585", "raw_code": "private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){\n  String[] t=new String[buffer.length + lastRead.length];\n  System.arraycopy(buffer,0,t,0,buffer.length);\n  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);\n  return t;\n}"}
{"ids": "60368", "raw_code": "private static boolean isRetina(){\n  if (SystemInfo.isAppleJvm) {\n    return hasAppleRetinaDevice();\n  }\n  if (SystemInfo.isMac) {\n    GraphicsEnvironment e=GraphicsEnvironment.getLocalGraphicsEnvironment();\n    GraphicsDevice[] devices=e.getScreenDevices();\n    for (    GraphicsDevice device : devices) {\n      if (isOracleMacRetinaDevice(device)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "48936", "raw_code": "public void pOln(Object o) throws IOException {\n  pO(o.toString());\n  pln();\n}"}
{"ids": "80271", "raw_code": "private void drawCombat(final Graphics2D g2d,final int x,final int y,final int width,final int height){\n  Rectangle2D wrect=entity.getArea();\n  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));\n  int circleHeight=(int)((srect.height - 2) / SQRT2);\n  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);\n  if (entity.isAttacking(User.get())) {\n    g2d.setColor(RING_COLOR_ORANGE);\n    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);\n    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);\n    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);\n    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);\n  }\n  if (entity.isBeingAttacked()) {\n    Color lineColor;\n    g2d.setColor(RING_COLOR_RED);\n    if (entity.isAttacking(User.get())) {\n      lineColor=RING_COLOR_RED;\n      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);\n    }\n else {\n      lineColor=RING_COLOR_DARK_RED;\n      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);\n      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);\n      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);\n      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);\n      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);\n    }\n    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);\n    for (    Entity attacker : entity.getAttackers()) {\n      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));\n    }\n    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);\n  }\n else   if (entity.isAttacking(User.get())) {\n    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);\n  }\n  drawAttack(g2d,x,y,width,height);\n  if (entity.isDefending()) {\n    final int sx=srect.x + srect.width - ICON_OFFSET;\n    final int sy=y + height - 2 * ICON_OFFSET;\nswitch (entity.getResolution()) {\ncase BLOCKED:\n      blockedSprite.draw(g2d,sx,sy);\n    break;\ncase MISSED:\n  missedSprite.draw(g2d,sx,sy);\nbreak;\ncase HIT:\nhitSprite.draw(g2d,sx,sy);\nbreak;\ndefault :\n}\n}\n}"}
{"ids": "48505", "raw_code": "public final void addReference(Object ref){\n  refSet.add(ref);\n}"}
{"ids": "76462", "raw_code": "public RequirementsBuilder addRequireProperty(String name,RequirementsBuilder builder){\n  addProperty(name,builder);\n  requiredProperties.add(name);\n  return this;\n}"}
{"ids": "63009", "raw_code": "public HeadRule(String dir,String rule){\n  String[] tmp=P_TAGSETS.split(rule);\n  int i, size=tmp.length;\n  b_r2l=dir.equals(DIR_RIGHT_TO_LEFT);\n  a_tagSets=new HeadTagSet[size];\n  for (i=0; i < size; i++)   a_tagSets[i]=new HeadTagSet(tmp[i]);\n}"}
{"ids": "83858", "raw_code": "@Override public <T>Future<T> submit(Callable<T> task){\nsynchronized (this) {\n    active.incrementAndGet();\n    long timeout=0;\n    while (queue.remainingCapacity() == 0) {\n      try {\n        if (timeout <= giveupTime) {\n          Thread.sleep(DEFAULT_SLEEP);\n          timeout+=DEFAULT_SLEEP;\n        }\n else {\n          throw new RuntimeException(\"Timed out because TPE is too busy...\");\n        }\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return super.submit(task);\n  }\n}"}
{"ids": "51715", "raw_code": "protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){\n  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {\n    final XSQLDA xSqlDa=new XSQLDA(1);\n    xSqlDa.sqld=xSqlDa.sqln=0;\n    return xSqlDa;\n  }\n  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());\n  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {\n    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);\n    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];\n    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);\n    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();\n    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();\n    xSqlVar.sqllen=(short)fieldDescriptor.getLength();\n    xSqlVar.sqlind=new ShortByReference();\n    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;\n    xSqlVar.sqldata=new Memory(requiredDataSize);\n  }\n  return xSqlDa;\n}"}
{"ids": "86909", "raw_code": "public static void overwrite(long[] vector,long val,int offset,int len){\n  int idx=offset >> 6;\n  int bitIdx=offset & 63;\n  int truncatedValLen=Math.min(len,64 - bitIdx);\n  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);\n  vector[idx]|=val << bitIdx;\n  if (len != truncatedValLen) {\n    long mask=maskBelow(len - truncatedValLen);\n    vector[idx + 1]&=~mask;\n    vector[idx + 1]|=(val >>> truncatedValLen);\n  }\n}"}
{"ids": "30460", "raw_code": "public static boolean isEmpty(String string){\n  if (null == string)   return true;\n  return string.equals(EMPTY);\n}"}
{"ids": "15653", "raw_code": "protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){\n  FastMap<String> declaredProperties=new FastMap<String>();\n  String backColor=context.readWidgetProperty(\"backColor\");\n  if (backColor != null && backColor.length() > 0) {\n    declaredProperties.put(\"backColor\",backColor);\n  }\n  String fontName=context.readWidgetProperty(\"fontName\");\n  if (fontName != null && fontName.length() > 0) {\n    declaredProperties.put(\"fontName\",fontName);\n  }\n  String fontSize=context.readWidgetProperty(\"fontSize\");\n  if (fontSize != null && fontSize.length() > 0) {\n    declaredProperties.put(\"fontSize\",fontSize);\n  }\n  String foreColor=context.readWidgetProperty(\"foreColor\");\n  if (foreColor != null && foreColor.length() > 0) {\n    declaredProperties.put(\"foreColor\",foreColor);\n  }\n  String justification=context.readWidgetProperty(\"justification\");\n  if (justification != null && justification.length() > 0) {\n    declaredProperties.put(\"justification\",justification);\n  }\n  String bold=context.readWidgetProperty(\"bold\");\n  if (bold != null && bold.length() > 0) {\n    declaredProperties.put(\"bold\",bold);\n  }\n  String italic=context.readWidgetProperty(\"italic\");\n  if (italic != null && italic.length() > 0) {\n    declaredProperties.put(\"italic\",italic);\n  }\n  String subscript=context.readWidgetProperty(\"subscript\");\n  if (subscript != null && subscript.length() > 0) {\n    declaredProperties.put(\"subscript\",subscript);\n  }\n  String superscript=context.readWidgetProperty(\"superscript\");\n  if (superscript != null && superscript.length() > 0) {\n    declaredProperties.put(\"superscript\",superscript);\n  }\n  String underline=context.readWidgetProperty(\"underline\");\n  if (underline != null && underline.length() > 0) {\n    declaredProperties.put(\"underline\",underline);\n  }\n  String strikethrough=context.readWidgetProperty(\"strikethrough\");\n  if (strikethrough != null && strikethrough.length() > 0) {\n    declaredProperties.put(\"strikethrough\",strikethrough);\n  }\n  return declaredProperties;\n}"}
{"ids": "35502", "raw_code": "private void updateTrafficProjections(){\n  List<AirMapTraffic> updated=new ArrayList<>();\n  for (  AirMapTraffic traffic : allTraffic) {\n    if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) {\n      allTraffic.remove(traffic);\n      Coordinate projected=projectedCoordinate(traffic);\n      traffic.setCoordinate(projected);\n      traffic.setShowAlert(false);\n      allTraffic.add(traffic);\n      updated.add(traffic);\n    }\n  }\n  notifyUpdated(updated);\n}"}
{"ids": "24257", "raw_code": "public static void logStackTrace(Level level,Throwable throwable){\n  logStackTrace(level,throwable,null);\n}"}
{"ids": "84554", "raw_code": "public static float computeContrastBetweenColors(int bg,int fg){\n  float bgR=Color.red(bg) / 255f;\n  float bgG=Color.green(bg) / 255f;\n  float bgB=Color.blue(bg) / 255f;\n  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);\n  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);\n  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);\n  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;\n  float fgR=Color.red(fg) / 255f;\n  float fgG=Color.green(fg) / 255f;\n  float fgB=Color.blue(fg) / 255f;\n  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);\n  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);\n  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);\n  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;\n  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));\n}"}
{"ids": "84440", "raw_code": "public static String decodeBCD(final short bcd){\n  return String.format(\"%x.%02x\",(bcd & 0xFF00) >> 8,bcd & 0x00FF);\n}"}
{"ids": "74420", "raw_code": "public void addLayoutEditor(LayoutEditor panel){\n  if (panels.size() > 0) {\n    for (int i=0; i < panels.size(); i++) {\n      LayoutEditor ed=panels.get(i);\n      if (ed == panel) {\n        return;\n      }\n    }\n  }\n  panels.add(panel);\n}"}
{"ids": "68109", "raw_code": "void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException {\n  LOG.debug(\"wildcard resources: {}\",allFiles);\n  if (allFiles.isEmpty()) {\n    final String message=String.format(\"No resource found for wildcard: %s\",wildcardContext.getWildcard());\n    LOG.warn(message);\n    throw new IOException(message);\n  }\n  if (wildcardExpanderHandler != null) {\n    try {\n      wildcardExpanderHandler.apply(allFiles);\n    }\n catch (    final IOException e) {\n      throw e;\n    }\ncatch (    final Exception e) {\n      LOG.debug(\"wildcard expanding error. Reporting original exception\",e);\n      throw new IOException(\"Exception during expanding wildcard: \" + e.getMessage());\n    }\n  }\n}"}
{"ids": "21974", "raw_code": "@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path(\"/{id}/ip-interfaces\") public IpInterfaceRestRep createIpInterface(@PathParam(\"id\") URI id,IpInterfaceCreateParam createParam) throws DatabaseException {\n  Host host=queryObject(Host.class,id,true);\n  validateIpInterfaceData(createParam,null);\n  IpInterface ipInterface=new IpInterface();\n  ipInterface.setHost(host.getId());\n  ipInterface.setId(URIUtil.createId(IpInterface.class));\n  populateIpInterface(createParam,ipInterface);\n  _dbClient.createObject(ipInterface);\n  auditOp(OperationTypeEnum.CREATE_HOST_IPINTERFACE,true,null,ipInterface.auditParameters());\n  return map(ipInterface);\n}"}
{"ids": "16249", "raw_code": "protected List<IEditProposal> collectEditProposals(){\n  List<IEditProposal> proposals=new ArrayList<IEditProposal>();\n  View selectedView=getSelectedView();\n  if (selectedView != null) {\n    if (proposalProviders != null) {\n      for (      IEditProposalProvider provider : proposalProviders) {\n        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {\n          if (editProposal.isApplicable())           proposals.add(editProposal);\n        }\n      }\n    }\n  }\n  return proposals;\n}"}
{"ids": "43202", "raw_code": "private void ensureNamespaceExists(Result result){\n  DockerImage image=DockerImage.fromImageName(result.name);\n  if (image.getNamespace() == null) {\n    result.name=String.format(\"%s/%s\",DEFAULT_NAMESPACE,image.getRepository());\n  }\n}"}
{"ids": "38931", "raw_code": "protected int chooseRandomIndexBasedOnProportions(double[] proportionArray,Random random){\n  double probSum;\n  double val;\n  int index;\n  double sum;\n  probSum=Utils.sum(proportionArray);\n  val=random.nextDouble() * probSum;\n  index=0;\n  sum=0.0;\n  while ((sum <= val) && (index < proportionArray.length)) {\n    sum+=proportionArray[index++];\n  }\n  return index - 1;\n}"}
{"ids": "74823", "raw_code": "private void checkWidth(final int[] rect){\n  final int x1=rect[0];\n  final int y2=rect[1];\n  final int y1=y2 + rect[3];\n  final int x2=x1 + rect[2];\n  if (x1 < pageX1) {\n    pageX1=x1;\n  }\n  if (x2 > pageX2) {\n    pageX2=x2;\n  }\n  if (y1 > pageY1) {\n    pageY1=y1;\n  }\n  if (y2 < pageY2) {\n    pageY2=y2;\n  }\n}"}
{"ids": "60192", "raw_code": "@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){\n  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();\n  if (components.isEmpty()) {\n    return siblingLists;\n  }\n  if (components.size() == 1) {\n    RadComponent component=components.get(0);\n    siblingLists.put(component.getParent(),Collections.singletonList(component));\n    return siblingLists;\n  }\n  for (  RadComponent component : components) {\n    RadComponent parent=component.getParent();\n    List<RadComponent> children=siblingLists.get(parent);\n    if (children == null) {\n      children=new ArrayList<RadComponent>();\n      siblingLists.put(parent,children);\n    }\n    children.add(component);\n  }\n  return siblingLists;\n}"}
{"ids": "53118", "raw_code": "private int countNonNewline(String str,int off,int len){\n  for (int cnt=0; cnt < len; cnt++) {\n    final int pos=off + cnt;\n    if (str.charAt(pos) == UNIX_NEWLINE) {\n      return cnt;\n    }\n    if (str.charAt(pos) == CARRIAGE_RETURN) {\n      return cnt;\n    }\n  }\n  return len;\n}"}
{"ids": "4135", "raw_code": "public String description(){\n  StringBuilder sb=new StringBuilder();\n  if (isCombo()) {\n    int i=0;\n    for (    NewComboLeg leg : m_comboLegs) {\n      if (i++ > 0) {\n        sb.append(\"/\");\n      }\n      sb.append(leg.toString());\n    }\n  }\n else {\n    sb.append(m_symbol);\n    app(sb,m_secType);\n    app(sb,m_exchange);\n    if (m_exchange != null && m_exchange.equals(\"SMART\") && m_primaryExch != null) {\n      app(sb,m_primaryExch);\n    }\n    app(sb,m_expiry);\n    if (m_strike != 0) {\n      app(sb,m_strike);\n    }\n    if (m_right != Right.None) {\n      app(sb,m_right);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "34276", "raw_code": "public void addClaimedSignerRole(final String claimedSignerRole){\n  if ((claimedSignerRole == null) || (claimedSignerRole.length() == 0)) {\n    throw new NullPointerException(\"claimedSignerRole\");\n  }\n  if (claimedSignerRoles == null) {\n    claimedSignerRoles=new ArrayList<String>();\n  }\n  claimedSignerRoles.add(claimedSignerRole);\n}"}
{"ids": "34861", "raw_code": "@SuppressWarnings(\"nullness\") @GwtIncompatible(\"java.io.ObjectOutputStream\") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {\n  stream.writeInt(map.size());\n  for (  Map.Entry<K,V> entry : map.entrySet()) {\n    stream.writeObject(entry.getKey());\n    stream.writeObject(entry.getValue());\n  }\n}"}
{"ids": "1699", "raw_code": "protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {\n  Thread.sleep(sleepMillis,sleepNanos);\n}"}
{"ids": "76311", "raw_code": "public static void restorePreviousOutAndErrStream(){\n  if (!alreadyMuted) {\n    return;\n  }\n  System.setOut(latestOut);\n  System.setErr(latestErr);\n  alreadyMuted=false;\n}"}
{"ids": "34039", "raw_code": "public static BigInteger CRT(List<BigInteger> congs,List<BigInteger> moduli){\n  BigInteger[] cs=ArrayConverter.convertListToArray(congs);\n  BigInteger[] ms=ArrayConverter.convertListToArray(moduli);\n  return CRT(cs,ms);\n}"}
{"ids": "43175", "raw_code": "protected <T extends TaskServiceDocument<E>,E extends Enum<E>>T waitForTaskCompletion(String documentSelfLink,Class<T> type) throws Throwable {\n  return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());\n}"}
{"ids": "76498", "raw_code": "private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){\n  List<EndIsland> result=new LinkedList<EndIsland>();\n  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {\n    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {\n      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);\n      if (island != null) {\n        result.add(island);\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "51038", "raw_code": "private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){\n  if (a.intersects(b)) {\n    gap.width=0;\n    return false;\n  }\n  int ax1=a.x;\n  int ax2=a.x + a.width;\n  int ay1=a.y;\n  int ay2=a.y + a.height;\n  int bx1=b.x;\n  int bx2=b.x + b.width;\n  int by1=b.y;\n  int by2=b.y + b.height;\n  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);\n  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);\n  if (xOverlap <= 0 && yOverlap <= 0) {\n    gap.width=0;\n    return false;\n  }\n  if (xOverlap > 0) {\n    gap.x=Math.max(ax1,bx1);\n    gap.y=(ay1 > by1) ? by2 : ay2;\n    gap.width=xOverlap;\n    gap.height=-yOverlap;\n  }\n  if (yOverlap > 0) {\n    gap.x=(ax1 > bx1) ? bx2 : ax2;\n    gap.y=Math.max(ay1,by1);\n    gap.width=-xOverlap;\n    gap.height=yOverlap;\n  }\n  return true;\n}"}
{"ids": "16213", "raw_code": "public static boolean isIntentAvailable(Context context,String action){\n  final PackageManager packageManager=context.getPackageManager();\n  final Intent intent=new Intent(action);\n  Log.d(MP_TAG,\"Looking for intent \" + action);\n  List<ResolveInfo> list=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);\n  return list.size() > 0;\n}"}
{"ids": "48745", "raw_code": "private void sendCONNECTRequest() throws IOException {\n  int port=url.getPort();\n  requests.set(0,HTTP_CONNECT + \" \" + connectRequestURI(url)+ \" \"+ httpVersion,null);\n  requests.setIfNotSet(\"User-Agent\",userAgent);\n  String host=url.getHost();\n  if (port != -1 && port != url.getDefaultPort()) {\n    host+=\":\" + String.valueOf(port);\n  }\n  requests.setIfNotSet(\"Host\",host);\n  requests.setIfNotSet(\"Accept\",acceptString);\n  if (http.getHttpKeepAliveSet()) {\n    requests.setIfNotSet(\"Proxy-Connection\",\"keep-alive\");\n  }\n  setPreemptiveProxyAuthentication(requests);\n  if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n    logger.fine(requests.toString());\n  }\n  http.writeRequests(requests,null);\n}"}
{"ids": "48363", "raw_code": "private boolean isSelfSigned(X509Certificate cert){\n  return signedBy(cert,cert);\n}"}
{"ids": "45706", "raw_code": "@RequestMapping(value={\"/\",\"\"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute(\"userroles\") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){\n  RestWrapper restWrapper=null;\n  if (bindingResult.hasErrors()) {\n    BindingResultError bindingResultError=new BindingResultError();\n    return bindingResultError.errorMessage(bindingResult);\n  }\n  try {\n    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();\n    jpaUserRoles.setUserRoleId(userRoles.getUserRoleId());\n    jpaUserRoles.setRole(userRoles.getRole());\n    Users users=new Users();\n    users.setUsername(userRoles.getUsername());\n    jpaUserRoles.setUsers(users);\n    Integer userRolesId=userRolesDAO.insert(jpaUserRoles);\n    userRoles.setUserRoleId(userRolesId);\n    restWrapper=new RestWrapper(userRoles,RestWrapper.OK);\n    LOGGER.info(\"Record with ID:\" + userRoles.getUserRoleId() + \" inserted in UserRoles by User:\"+ principal.getName()+ userRoles);\n  }\n catch (  Exception e) {\n    LOGGER.error(e);\n    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);\n  }\n  return restWrapper;\n}"}
{"ids": "53322", "raw_code": "public void rewind(){\nsynchronized (used) {\n    for (    ParameterPair pair : used) {\n      current.addParameter(pair.option,pair.value);\n    }\n    used.clear();\n  }\n}"}
{"ids": "29331", "raw_code": "public List<Interval> merge(List<Interval> intervals){\n  List<Interval> res=new ArrayList<>();\n  if (intervals == null || intervals.size() == 0) {\n    return res;\n  }\n  Collections.sort(intervals,null);\n  Interval prev=null;\n  for (  Interval i : intervals) {\n    if (prev == null || prev.end < i.start) {\n      res.add(i);\n      prev=i;\n    }\n else     if (i.end > prev.end) {\n      prev.end=i.end;\n    }\n  }\n  return res;\n}"}
{"ids": "35024", "raw_code": "private String formatType(Object typeRep){\n  StringTokenizer tokenizer=new StringTokenizer(typeRep.toString(),\"()<>[], \",true);\n  StringBuilder sb=new StringBuilder();\n  while (tokenizer.hasMoreTokens()) {\n    String token=tokenizer.nextToken();\n    if (token.length() == 1 || token.lastIndexOf('.') == -1)     sb.append(token);\n else {\n      int index=token.lastIndexOf('.');\n      sb.append(token.substring(index + 1));\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "50989", "raw_code": "@NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception {\n  return sha1(keyStoreFile,null,null);\n}"}
{"ids": "7440", "raw_code": "@Override public void panDomainAxes(double panRange,PlotRenderingInfo info,Point2D source){\n  XYPlot subplot=findSubplot(info,source);\n  if (subplot == null) {\n    return;\n  }\n  if (!subplot.isDomainPannable()) {\n    return;\n  }\n  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));\n  if (subplotInfo == null) {\n    return;\n  }\n  for (int i=0; i < subplot.getDomainAxisCount(); i++) {\n    ValueAxis domainAxis=subplot.getDomainAxis(i);\n    if (domainAxis != null) {\n      domainAxis.pan(panRange);\n    }\n  }\n}"}
{"ids": "76511", "raw_code": "private void init(){\n  startController=new PourStartController();\n  startController.setCheckView(this);\n  waveController=new WaveController();\n  waveController.setCheckView(this);\n  PourFinishController finishController=new PourFinishController();\n  finishController.setCheckView(this);\n  TickController tickController=new TickController();\n  tickController.setCheckView(this);\n  List<BaseController> finishControllers=new ArrayList<>();\n  finishControllers.add(finishController);\n  finishControllers.add(tickController);\n  this.finishControllers=finishControllers;\n}"}
{"ids": "6471", "raw_code": "private JLabel createIconLabel(JCheckBox checkBox){\n  checkBox.setOpaque(false);\n  checkBox.setSize(checkBox.getMinimumSize());\n  Image image=new BufferedImage(checkBox.getWidth(),checkBox.getHeight(),Transparency.TRANSLUCENT);\n  Graphics g=image.getGraphics();\n  checkBox.paint(g);\n  g.dispose();\n  return new JLabel(new ImageIcon(image));\n}"}
{"ids": "62094", "raw_code": "public void closeWindow(){\n  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);\n  frame.dispatchEvent(ev);\n}"}
{"ids": "21976", "raw_code": "private void populateHostData(Host host,HostParam param){\n  if (param.getName() != null) {\n    host.setLabel(param.getName());\n  }\n  if (param.getHostName() != null) {\n    host.setHostName(param.getHostName());\n  }\n  if (param.getCluster() != null) {\n    host.setCluster(param.getCluster());\n  }\n  if (param.getOsVersion() != null) {\n    host.setOsVersion(param.getOsVersion());\n  }\n  if (param.getUserName() != null) {\n    host.setUsername(param.getUserName());\n  }\n  if (param.getPassword() != null) {\n    host.setPassword(param.getPassword());\n  }\n  if (param.getPortNumber() != null) {\n    host.setPortNumber(param.getPortNumber());\n  }\n  if (param.getUseSsl() != null) {\n    host.setUseSSL(param.getUseSsl());\n  }\n  if (param.getType() != null) {\n    host.setType(param.getType());\n  }\n  if (param.getDiscoverable() != null) {\n    host.setDiscoverable(param.getDiscoverable());\n  }\n  if (param.getVcenterDataCenter() != null) {\n    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());\n  }\n  Cluster cluster=null;\n  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {\n    cluster=queryObject(Cluster.class,param.getCluster(),true);\n    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {\n      host.setVcenterDataCenter(cluster.getVcenterDataCenter());\n    }\n    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {\n      host.setProject(cluster.getProject());\n    }\n  }\n  if (param.getBootVolume() != null) {\n    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());\n  }\n}"}
{"ids": "50884", "raw_code": "@Nullable public AvdInfo createOrUpdateAvd(@Nullable AvdInfo currentInfo,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){\n  if (!initIfNecessary()) {\n    return null;\n  }\n  File avdFolder;\n  try {\n    if (currentInfo != null) {\n      avdFolder=new File(currentInfo.getDataFolderPath());\n    }\n else {\n      avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true);\n    }\n  }\n catch (  AndroidLocation.AndroidLocationException e) {\n    IJ_LOG.error(\"Could not create AVD \" + avdName,e);\n    return null;\n  }\n  Dimension resolution=device.getScreenSize(orientation);\n  assert resolution != null;\n  String skinName=null;\n  if (skinFolder == null && isCircular) {\n    skinFolder=getRoundSkin(systemImageDescription);\n  }\n  if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) {\n    skinFolder=null;\n  }\n  if (skinFolder == null) {\n    skinName=String.format(\"%dx%d\",Math.round(resolution.getWidth()),Math.round(resolution.getHeight()));\n  }\n  if (orientation == ScreenOrientation.LANDSCAPE) {\n    hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));\n  }\n  if (currentInfo != null && !avdName.equals(currentInfo.getName())) {\n    boolean success=myAvdManager.moveAvd(currentInfo,avdName,currentInfo.getDataFolderPath(),SDK_LOG);\n    if (!success) {\n      return null;\n    }\n  }\n  return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,currentInfo != null,SDK_LOG);\n}"}
{"ids": "67033", "raw_code": "public DisjointSets(int numElements){\n  array=new int[numElements];\n  Arrays.fill(array,-1);\n}"}
{"ids": "9197", "raw_code": "public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException {\n  if (m_finalClusters == null) {\n    updateClusters(clusterData,matIndexToMsgInternalId);\n  }\n  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {\n    final String n=entry.getKey();\n    final Collection<Integer> c=entry.getValue();\n    out.printf(\"%s\\t\",n);\n    for (    int m : c) {\n      out.printf(\"%d\\t\",matIndexToMsgInternalId[m]);\n    }\n    out.println();\n  }\n}"}
{"ids": "4941", "raw_code": "public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){\n  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();\n  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);\n  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());\n  for (int index=0; index < trace_shapes.size(); ++index) {\n    ShapeTile curr_trace_shape=trace_shapes.get(index);\n    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);\n    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);\n    if (!check_shove_ok)     return false;\n  }\n  return true;\n}"}
{"ids": "53985", "raw_code": "public static void delete(File fileOrFolder) throws IOException {\n  if (fileOrFolder != null)   delete(fileOrFolder.toPath());\n}"}
{"ids": "10884", "raw_code": "public static double[] expandArrayD(int bufferSize,double[] currentArray){\n  if (currentArray == null) {\n    return new double[bufferSize * 3];\n  }\n  int length=currentArray.length;\n  double[] ret=new double[length + bufferSize * 3];\n  System.arraycopy(currentArray,0,ret,0,length);\n  return ret;\n}"}
{"ids": "41344", "raw_code": "@SuppressWarnings(\"unchecked\") public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory){\n  if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) {\n    BeanDefinition sessionFactoryBeanDefinition=configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName);\n    MutablePropertyValues propertyValues=sessionFactoryBeanDefinition.getPropertyValues();\n    if (mappingResources != null) {\n      PropertyValue propertyValue=propertyValues.getPropertyValue(\"mappingResources\");\n      if (propertyValue == null) {\n        propertyValue=new PropertyValue(\"mappingResources\",new ArrayList());\n        propertyValues.addPropertyValue(propertyValue);\n      }\n      List existingMappingResources=(List)propertyValue.getValue();\n      existingMappingResources.addAll(mappingResources);\n    }\n    if (annotatedClasses != null) {\n      PropertyValue propertyValue=propertyValues.getPropertyValue(\"annotatedClasses\");\n      if (propertyValue == null) {\n        propertyValue=new PropertyValue(\"annotatedClasses\",new ArrayList());\n        propertyValues.addPropertyValue(propertyValue);\n      }\n      List existingMappingResources=(List)propertyValue.getValue();\n      existingMappingResources.addAll(annotatedClasses);\n    }\n    if (configLocations != null) {\n      PropertyValue propertyValue=propertyValues.getPropertyValue(\"configLocations\");\n      if (propertyValue == null) {\n        propertyValue=new PropertyValue(\"configLocations\",new ArrayList());\n        propertyValues.addPropertyValue(propertyValue);\n      }\n      List existingConfigLocations=(List)propertyValue.getValue();\n      existingConfigLocations.addAll(configLocations);\n    }\n    if (hibernateProperties != null) {\n      PropertyValue propertyValue=propertyValues.getPropertyValue(\"hibernateProperties\");\n      if (propertyValue == null) {\n        propertyValue=new PropertyValue(\"hibernateProperties\",new Properties());\n        propertyValues.addPropertyValue(propertyValue);\n      }\n      Properties existingHibernateProperties=(Properties)propertyValue.getValue();\n      existingHibernateProperties.putAll(hibernateProperties);\n    }\n  }\n else {\n    throw new NoSuchBeanDefinitionException(\"No bean named [\" + sessionFactoryBeanName + \"] exists within the bean factory. \"+ \"Cannot post process session factory to add Hibernate resource definitions.\");\n  }\n}"}
{"ids": "78807", "raw_code": "protected int encode(double value,double lower,double upper,int nbits){\n  if (value < lower)   return 0;\n  int maxval=(int)(Math.pow(2,nbits) - 1);\n  if (value >= upper)   return maxval;\n  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));\n}"}
{"ids": "11497", "raw_code": "public long skipBytes(long n) throws IOException {\n  long count=0;\n  long gotsofar=0;\n  if (inputStream == null) {\n    reopen();\n    if (inputStream == null) {\n      reopen();\n      throw new IOException(\"Stream closed, can't be reopened\");\n    }\n  }\n  while (count < n) {\n    gotsofar=inputStream.skip(n - count);\n    if (gotsofar == 0) {\n      Debug.error(\"StreamInputReader can't skip \" + n + \" bytes as instructed\");\n      break;\n    }\n    count+=gotsofar;\n  }\n  count((int)count);\n  return count;\n}"}
{"ids": "13844", "raw_code": "public void handleTblDSAttributeMapListHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {\n  try {\n    Map values=getValues();\n    onBeforeSaveProfile(values);\n    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);\n    WSPPServiceDSAttributeMapListEditViewBean vb=(WSPPServiceDSAttributeMapListEditViewBean)getViewBean(WSPPServiceDSAttributeMapListEditViewBean.class);\n    unlockPageTrail();\n    passPgSessionMap(vb);\n    vb.populateValues((String)getDisplayFieldValue(\"tblDSAttributeMapListHrefAction\"));\n    vb.forwardTo(getRequestContext());\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());\n    forwardTo();\n  }\n}"}
{"ids": "47059", "raw_code": "private V doGet(Object key){\n  if (key == null)   throw new NullPointerException();\n  Comparator<? super K> cmp=comparator;\n  outer:   for (; ; ) {\n    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {\n      Object v;\n      int c;\n      if (n == null)       break outer;\n      Node<K,V> f=n.next;\n      if (n != b.next)       break;\n      if ((v=n.value) == null) {\n        n.helpDelete(b,f);\n        break;\n      }\n      if (b.value == null || v == n)       break;\n      if ((c=cpr(cmp,key,n.key)) == 0) {\n        @SuppressWarnings(\"unchecked\") V vv=(V)v;\n        return vv;\n      }\n      if (c < 0)       break outer;\n      b=n;\n      n=f;\n    }\n  }\n  return null;\n}"}
{"ids": "54805", "raw_code": "void handleSwfLoadedEvent(SwfLoadedEvent e){\n  dumpSwfLoadedLine(e);\n}"}
{"ids": "33472", "raw_code": "private void quickReply(){\n  quickReplySmsMessage=smsPopupPager.getActiveMessage();\n  quickReply(quickReplySmsMessage.getReplyText());\n}"}
{"ids": "59574", "raw_code": "public boolean hasChanged(){\n  return System.identityHashCode(config) != initialHash;\n}"}
{"ids": "78213", "raw_code": "void fixCompatibility(View root){\n  Queue<View> queue=new LinkedList<View>();\n  queue.add(root);\n  View view=null;\n  while ((view=queue.poll()) != null) {\n    if (view instanceof ViewGroup) {\n      ViewGroup group=(ViewGroup)view;\n      for (int i=0; i < group.getChildCount(); i++) {\n        queue.add(group.getChildAt(i));\n      }\n    }\n  }\n}"}
{"ids": "14549", "raw_code": "public void substituteHeader(int state,String header) throws AuthLoginException {\n  if (debug.messageEnabled()) {\n    debug.message(\"substituteHeader : state=\" + state + \", header=\"+ header);\n  }\n  if (state > stateLength) {\n    throw new AuthLoginException(bundleName,\"invalidState\",new Object[]{new Integer(state)});\n  }\n  Callback[] ext=getCallback(state);\n  if (ext.length <= 0) {\n    throw new AuthLoginException(bundleName,\"invalidCallbackIndex\",null);\n  }\n  if ((header != null) && (header.length() != 0)) {\n    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];\n    pc.setHeader(header);\n  }\n}"}
{"ids": "69741", "raw_code": "public static Service createService(PatternTimetable timetable){\n  Calendar calendar=new Calendar();\n  calendar.monday=timetable.monday ? 1 : 0;\n  calendar.tuesday=timetable.tuesday ? 1 : 0;\n  calendar.wednesday=timetable.wednesday ? 1 : 0;\n  calendar.thursday=timetable.thursday ? 1 : 0;\n  calendar.friday=timetable.friday ? 1 : 0;\n  calendar.saturday=timetable.saturday ? 1 : 0;\n  calendar.sunday=timetable.sunday ? 1 : 0;\n  StringBuilder nameBuilder=new StringBuilder(\"MOD-\");\n  nameBuilder.append(timetable.monday ? 'M' : 'x');\n  nameBuilder.append(timetable.monday ? 'T' : 'x');\n  nameBuilder.append(timetable.monday ? 'W' : 'x');\n  nameBuilder.append(timetable.monday ? 'T' : 'x');\n  nameBuilder.append(timetable.monday ? 'F' : 'x');\n  nameBuilder.append(timetable.monday ? 'S' : 'x');\n  nameBuilder.append(timetable.monday ? 'S' : 'x');\n  Service service=new Service(nameBuilder.toString());\n  calendar.start_date=18500101;\n  calendar.end_date=22000101;\n  service.calendar=calendar;\n  return service;\n}"}
{"ids": "30172", "raw_code": "public T allowedUsers(User... users){\n  List<User> usersList=Arrays.asList(users);\n  this.userPredicate=null;\n  return instance();\n}"}
{"ids": "22467", "raw_code": "VPlexDistributedDeviceInfo findDistributedDevice(String deviceName) throws VPlexApiException {\n  return findDistributedDevice(deviceName,false);\n}"}
{"ids": "76918", "raw_code": "static CopyState readCopyState(DataInput in) throws IOException {\n  byte[] infosBytes=new byte[in.readVInt()];\n  in.readBytes(infosBytes,0,infosBytes.length);\n  long gen=in.readVLong();\n  long version=in.readVLong();\n  Map<String,FileMetaData> files=readFilesMetaData(in);\n  int count=in.readVInt();\n  Set<String> completedMergeFiles=new HashSet<>();\n  for (int i=0; i < count; i++) {\n    completedMergeFiles.add(in.readString());\n  }\n  long primaryGen=in.readVLong();\n  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);\n}"}
{"ids": "19664", "raw_code": "public void notifyTasks(){\n  if (tracker.shouldInterruptTask()) {\n    for (    Thread t : threadMap.values()) {\n      t.interrupt();\n    }\n  }\n}"}
{"ids": "73453", "raw_code": "public boolean confirmOverwrite(final File file){\n  String message=\"The file \\\"\" + file.getName() + \"\\\" already exists. Overwrite?\";\n  Object[] options={\"OK\",\"Cancel\"};\n  return JOptionPane.YES_OPTION == JOptionPane.showOptionDialog(null,message,\"Warning\",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);\n}"}
{"ids": "35331", "raw_code": "public int findLine(int offset){\n  int line=lineStarts.length - 1;\n  while ((lineStarts[line] > offset) && (line > 0)) {\n    line--;\n  }\n  return line;\n}"}
{"ids": "73186", "raw_code": "public void clear(){\n  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);\n  selection.clear();\n  if (!oldSelection.isEmpty()) {\n    fireSelectionChanged(oldSelection,selection);\n  }\n}"}
{"ids": "41758", "raw_code": "private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException {\n  ThriftFileElement element=null;\n  File dir=null;\n  File file=findFirstExisting(path,null);\n  if (file != null) {\n    file=file.getCanonicalFile();\n    if (loadedFiles.containsKey(file.getAbsolutePath())) {\n      return;\n    }\n    dir=file.getParentFile();\n    element=loadSingleFile(file.getParentFile(),file.getName());\n  }\n  if (element == null) {\n    throw new FileNotFoundException(\"Failed to locate \" + path + \" in \"+ includePaths);\n  }\n  loadedFiles.put(file.getAbsolutePath(),element);\n  ImmutableList<IncludeElement> includes=element.includes();\n  if (includes.size() > 0) {\n    includePaths.addFirst(dir);\n    for (    IncludeElement include : includes) {\n      if (!include.isCpp()) {\n        loadFileRecursively(include.path(),loadedFiles);\n      }\n    }\n    includePaths.removeFirst();\n  }\n}"}
{"ids": "51183", "raw_code": "public void assureProxyOk(){\n  if (socket.isClosed()) {\n    restart();\n  }\n}"}
{"ids": "19642", "raw_code": "@Override public boolean add(IMessage message){\n  return add(message,false);\n}"}
{"ids": "53946", "raw_code": "public Key(byte[] hash){\n  if (hash.length != SHA1_HASH_LENGTH) {\n    throw new IllegalArgumentException(\"Invalid Hash must be 20bytes, was: \" + hash.length);\n  }\n  System.arraycopy(hash,0,this.hash,0,SHA1_HASH_LENGTH);\n}"}
{"ids": "69772", "raw_code": "private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){\n  Way osmWay=new Way();\n  StringJoiner stringJoiner=new StringJoiner(\";\");\n  for (  OSMEntity.Tag tag : iosmWay.tags) {\n    osmWay.addTag(tag.key,tag.value);\n    stringJoiner.add(tag.key + \"=\" + tag.value);\n  }\n  if (newTag != null && newValue != null) {\n    osmWay.addTag(newTag,newValue);\n    stringJoiner.add(newTag + \"=\" + newValue);\n  }\n  Set<EdgeStore.EdgeFlag> forwardFiltered;\n  Set<EdgeStore.EdgeFlag> backwardFiltered;\n  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);\n  forwardFiltered=filterFlags(roadPermission.forward);\n  backwardFiltered=filterFlags(roadPermission.backward);\n  String tags=\"Tags: \" + stringJoiner.toString();\n  assertEquals(tags,forwardExpected,forwardFiltered);\n  assertEquals(tags,backwardExpected,backwardFiltered);\n  return roadPermission;\n}"}
{"ids": "13860", "raw_code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  IdentitySubjectModel subjectModel=getSubjectModel();\n  PolicyModel model=(PolicyModel)getModel();\n  super.beginDisplay(event);\n  if (!canModify) {\n    Map mapValues=getDefaultValues();\n    if ((mapValues != null) && !mapValues.isEmpty()) {\n      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);\n      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);\n      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,\",\",false));\n    }\n  }\n else {\n    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);\n    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);\n    OptionList entityTypes=createOptionList(supportedEntityTypes);\n    entityTypes.add(0,\"policy.subject.select.identity.type\",\"\");\n    menu.setOptions(entityTypes);\n    menu.setValue(\"\");\n    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);\n    child.restoreStateData();\n    if (!submitCycle) {\n      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());\n    }\n else {\n      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));\n      OptionList selected=addRemoveModel.getSelectedOptionList();\n      List selectedIds=AMAdminUtils.toList(selected);\n      child.resetStateData();\n      addRemoveModel.setAvailableOptionList(possible);\n      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));\n    }\n  }\n}"}
{"ids": "63367", "raw_code": "public byte[] readBytes() throws IOException {\n  int len=readInt();\n  if (len == -1) {\n    return null;\n  }\n  byte[] b=DataUtils.newBytes(len);\n  in.readFully(b);\n  return b;\n}"}
{"ids": "39322", "raw_code": "public String useRelativePathTipText(){\n  return \"Use relative rather than absolute paths\";\n}"}
{"ids": "21425", "raw_code": "public List<Interface> showInterface() throws NetworkDeviceControllerException {\n  List<Interface> interfaces=new ArrayList<Interface>();\n  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};\n  StringBuilder buf=new StringBuilder();\n  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(\"MDSDialog.showInterface.cmd\"),60000,prompts,buf);\n  String[] lines=getLines(buf);\n  String[] regex={MDSDialogProperties.getString(\"MDSDialog.showInterface.interfacename.match\"),MDSDialogProperties.getString(\"MDSDialog.showInterface.Portdescription.match\"),MDSDialogProperties.getString(\"MDSDialog.showInterface.PortWWN.match\"),MDSDialogProperties.getString(\"MDSDialog.showInterface.PortmodeFCID.match\"),MDSDialogProperties.getString(\"MDSDialog.showInterface.Portvsan.match\"),MDSDialogProperties.getString(\"MDSDialog.showInterface.Portmode.match\")};\n  String[] groups=new String[10];\n  Interface intf=null;\n  for (  String line : lines) {\n    int index=match(line,regex,groups);\nswitch (index) {\ncase 0:\n      intf=new Interface(groups[0]);\n    intf.setStatus(groups[1]);\n  interfaces.add(intf);\nbreak;\ncase 1:\nintf.setDescription(groups[0]);\nbreak;\ncase 2:\nintf.setWwpn(groups[0]);\nbreak;\ncase 3:\nintf.setMode(groups[0]);\nintf.setFcid(groups[1]);\nbreak;\ncase 4:\nintf.setVsan(groups[0]);\nbreak;\ncase 5:\nintf.setMode(groups[0]);\nbreak;\n}\n}\nreturn interfaces;\n}"}
{"ids": "75112", "raw_code": "protected void clearDataLists(int obdService){\nswitch (obdService) {\ncase OBD_SVC_DATA:\ncase OBD_SVC_FREEZEFRAME:\n    pidSupported.clear();\n  PidPvs.clear();\nbreak;\ncase OBD_SVC_READ_CODES:\ncase OBD_SVC_PENDINGCODES:\ncase OBD_SVC_PERMACODES:\ntCodes.clear();\nbreak;\ncase OBD_SVC_VEH_INFO:\npidSupported.clear();\nVidPvs.clear();\nbreak;\n}\n}"}
{"ids": "71236", "raw_code": "public QuadEdge makeEdge(Vertex o,Vertex d){\n  QuadEdge q=QuadEdge.makeEdge(o,d);\n  quadEdges.add(q);\n  return q;\n}"}
{"ids": "77477", "raw_code": "public static void sortSeqs(List<String> seqs){\n  Collections.sort(seqs,null);\n}"}
{"ids": "82756", "raw_code": "private Shape decodeEdge(int width,int height){\n  path.reset();\n  path.moveTo(width - 2,0);\n  path.lineTo(width - 2,height - 4);\n  path.lineTo(width - 4,height - 2);\n  path.lineTo(3,height - 2);\n  return path;\n}"}
{"ids": "78549", "raw_code": "public boolean hasBeenCalled(String resourceName){\n  return uris.contains(resourceName);\n}"}
{"ids": "53473", "raw_code": "@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  super.readExternal(in);\n  isLeaf=in.readBoolean();\n  numEntries=in.readInt();\n}"}
{"ids": "15120", "raw_code": "public static ConnectionFactory newFailoverConnectionPool(Set<LDAPURL> servers,String username,char[] password,int maxSize,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){\n  List<ConnectionFactory> factories=new ArrayList<ConnectionFactory>(servers.size());\n  for (  LDAPURL ldapurl : servers) {\n    ConnectionFactory cf=Connections.newFixedConnectionPool(newConnectionFactory(ldapurl,username,password,heartBeatInterval,heartBeatTimeUnit,ldapOptions),maxSize);\n    factories.add(cf);\n  }\n  return loadBalanceFactories(factories);\n}"}
{"ids": "74857", "raw_code": "public PrintfFormat(final String fmtArg) throws IllegalArgumentException {\n  this(Locale.getDefault(),fmtArg);\n}"}
{"ids": "72163", "raw_code": "public MessagePropertyKey(String description,Integer ordinal){\n  this.description=description;\n  this.ordinal=ordinal;\n}"}
{"ids": "54503", "raw_code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {\n  Kryo kryo=new Kryo();\n  Input lInput=new Input(bos.toByteArray());\n  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());\n  lInput.close();\n  return oper;\n}"}
{"ids": "48751", "raw_code": "private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){\n  if (supported == null) {\n    supported=new HashMap<String,Boolean>();\n    cache=new HashMap<String,Negotiator>();\n  }\n  String hostname=hci.host;\n  hostname=hostname.toLowerCase();\n  if (supported.containsKey(hostname)) {\n    return supported.get(hostname);\n  }\n  Negotiator neg=Negotiator.getNegotiator(hci);\n  if (neg != null) {\n    supported.put(hostname,true);\n    cache.put(hostname,neg);\n    return true;\n  }\n else {\n    supported.put(hostname,false);\n    return false;\n  }\n}"}
{"ids": "81902", "raw_code": "public Shape chartToScreenShape(Shape s){\n  GeneralPath p=new GeneralPath();\n  Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());\n  if (currentTransform != null) {\n    inverse.concatenate(currentTransform);\n  }\n  p.append(s.getPathIterator(inverse),false);\n  return p;\n}"}
{"ids": "33406", "raw_code": "public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {\n  return authenticate(discoveries,returnToUrl,returnToUrl);\n}"}
{"ids": "42744", "raw_code": "public boolean isNumericalRun(String pin){\n  final int len=pin.length();\n  int prevDigit=Character.digit(pin.charAt(0),10);\n  int prevDiff=Integer.MAX_VALUE;\n  boolean isRun=true;\n  for (int i=1; isRun && i < len; i++) {\n    final int digit=Character.digit(pin.charAt(i),10);\n    final int diff=digit - prevDigit;\n    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {\n      isRun=false;\n    }\n    prevDiff=diff;\n    prevDigit=digit;\n  }\n  return isRun;\n}"}
{"ids": "44250", "raw_code": "public static int uriType(String uri){\n  if (uri.indexOf(':') != -1) {\n    return ABS_URI;\n  }\n else   if (uri.startsWith(\"/\")) {\n    return ROOT_REL_URI;\n  }\n else {\n    return NOROOT_REL_URI;\n  }\n}"}
{"ids": "9510", "raw_code": "public static boolean isResourceReference(String str){\n  return str.startsWith(BIG_QUOTE_LEFT) && str.endsWith(BIG_QUOTE_RIGHT) && str.charAt(1) == AT.charAt(0);\n}"}
{"ids": "82928", "raw_code": "public boolean leave() throws KeeperException, InterruptedException {\n  zooKeeper.delete(rootPath + \"/\" + name,0);\n  while (true) {\nsynchronized (mutex) {\n      List<String> list=zooKeeper.getChildren(rootPath,true);\n      if (list.size() > 0) {\n        mutex.wait();\n      }\n else {\n        return true;\n      }\n    }\n  }\n}"}
{"ids": "7266", "raw_code": "public SelectClause addWithAsProvidedName(String propertyName,String asName){\n  selectList.add(new SelectClauseExpression(new PropertyValueExpression(propertyName),asName));\n  return this;\n}"}
{"ids": "20945", "raw_code": "public void addInterface(String interfaceName){\n  short interfaceIndex=itsConstantPool.addClass(interfaceName);\n  itsInterfaces.add(Short.valueOf(interfaceIndex));\n}"}
{"ids": "10260", "raw_code": "public static String cutFromIndexOf(String string,String substring){\n  int i=string.indexOf(substring);\n  if (i != -1) {\n    string=string.substring(i);\n  }\n  return string;\n}"}
{"ids": "10355", "raw_code": "private Response requestHttpGetFromRegistry(String url) throws RegistryException {\n  try {\n    Response resp=http.get(url);\n    if (resp != null && resp.content != null) {\n      return resp;\n    }\n else {\n      throw new RegistryException(TYPE.BAD_RESPONSE,\"Response content is null\");\n    }\n  }\n catch (  ClassCastException e) {\n    throw new RegistryException(TYPE.BAD_RESPONSE,e);\n  }\ncatch (  ConnectException e) {\n    throw new RegistryException(TYPE.PROXY,e);\n  }\ncatch (  UnknownHostException e) {\n    try {\n      http.get(\"http://www.google.com\");\n    }\n catch (    Exception e1) {\n      throw new RegistryException(TYPE.NO_INTERNET,e1);\n    }\n    throw new RegistryException(TYPE.SITE_DOWN,e);\n  }\ncatch (  IOException e) {\n    throw new RegistryException(TYPE.IO_ERROR,e);\n  }\ncatch (  URISyntaxException e) {\n    throw new RegistryException(TYPE.BAD_REQUEST,\"Please check the request URL: \" + ((url != null) ? url : \"empty URL used!\"));\n  }\n}"}
{"ids": "83449", "raw_code": "public void init(RemoteAuthenticatedUser currentUser){\n  this.currentUser=currentUser;\n}"}
{"ids": "16796", "raw_code": "private void removeTvShow(TvShow tvShow){\nsynchronized (root) {\n    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);\n    DefaultMutableTreeNode parent=root;\n    if (child != null) {\n      int index=getIndexOfChild(parent,child);\n      nodeMap.remove(tvShow);\n      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {\n        nodeMap.remove(episode);\n        episode.removePropertyChangeListener(propertyChangeListener);\n      }\n      tvShow.removePropertyChangeListener(propertyChangeListener);\n      child.removeAllChildren();\n      child.removeFromParent();\n      if (index > -1) {\n        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});\n        for (        TreeModelListener listener : listeners) {\n          try {\n            listener.treeNodesRemoved(event);\n          }\n catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {\n          }\n        }\n      }\n    }\n  }\n}"}
{"ids": "41291", "raw_code": "private ComplianceFeature checkEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){\n  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE);\n  if ((operation.isEnabled() && encryptStatus) || (!operation.isEnabled() && !encryptStatus)) {\n    policy.setCompliance(true);\n  }\n else {\n    policy.setCompliance(false);\n    policy.setMessage(resources.getString(R.string.error_encrypt_policy));\n  }\n  return policy;\n}"}
{"ids": "76320", "raw_code": "public static int instanceOf(Object o,Class<?> c){\n  if (o == null)   return FALSE;\n  return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE;\n}"}
{"ids": "27934", "raw_code": "@Override public Void call() throws Exception {\n  MulticastSocket datagramSocket=null;\n  ExecutorService service=null;\n  try {\n    datagramSocket=new MulticastSocket(port);\n    datagramSocket.joinGroup(group);\n    service=Executors.newSingleThreadScheduledExecutor(new DaemonThreadFactory(\"GangliaListener\"));\n    final byte[] buffer=new byte[BUFFER_SIZE];\n    final DatagramPacket packet=new DatagramPacket(buffer,0,buffer.length);\n    listening=true;\n    while (true) {\n      try {\n        datagramSocket.receive(packet);\n        if (Thread.interrupted()) {\n          break;\n        }\n        final IGangliaMessage msg=decodeRecord(packet.getData(),packet.getOffset(),packet.getLength());\n        if (msg != null) {\n          service.submit(new DispatchTask(handler,msg));\n        }\n      }\n catch (      Throwable t) {\n        log.warn(t,t);\n      }\n    }\n    return (Void)null;\n  }\n  finally {\n    if (service != null) {\n      service.shutdown();\n    }\n    if (datagramSocket != null) {\n      datagramSocket.close();\n    }\n    listening=false;\n  }\n}"}
{"ids": "8300", "raw_code": "protected static void invalidateSwitchPoints(){\n  if (LOG_ENABLED) {\n    LOG.info(\"invalidating switch point\");\n  }\nsynchronized (IndyInterface.class) {\n    SwitchPoint old=switchPoint;\n    switchPoint=new SwitchPoint();\n    SwitchPoint.invalidateAll(new SwitchPoint[]{old});\n  }\n}"}
{"ids": "22235", "raw_code": "public VdcConfig toConfigParam(Properties vdcInfo){\n  log.info(\"copy {} to the sync config param\",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));\n  VdcConfig vdcConfig=new VdcConfig();\n  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));\n  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));\n  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));\n  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);\n  if ((name != null) && (!name.isEmpty())) {\n    vdcConfig.setName(name);\n  }\n  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);\n  if ((description != null) && (!description.isEmpty())) {\n    vdcConfig.setDescription(description);\n  }\n  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);\n  if (endPnt != null) {\n    vdcConfig.setApiEndpoint(endPnt);\n  }\n  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));\n  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));\n  return vdcConfig;\n}"}
{"ids": "2002", "raw_code": "private double prediction(Instance inst){\n  double[] normalizedInstance=normalizedInstance(inst);\n  double normalizedPrediction=prediction(normalizedInstance);\n  return denormalizedPrediction(normalizedPrediction);\n}"}
{"ids": "64391", "raw_code": "protected Object finish(Map settings) throws WizardException {\n  return provider.finish(settings);\n}"}
{"ids": "2001", "raw_code": "protected void fireClusterChange(long timestamp,String type,String message){\n  if (listeners != null && !listeners.isEmpty()) {\n    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);\n    Vector targets;\nsynchronized (this) {\n      targets=(Vector)listeners.clone();\n    }\n    Enumeration e=targets.elements();\n    while (e.hasMoreElements()) {\n      ClusterEventListener l=(ClusterEventListener)e.nextElement();\n      l.changeCluster(event);\n    }\n  }\n}"}
{"ids": "48523", "raw_code": "public int rgbFor(int pixel){\n  return surfaceType.rgbFor(pixel,colorModel);\n}"}
{"ids": "36468", "raw_code": "protected void addBottomComponent(Component bottomComponent){\n  c.weighty=2;\n  layout.setConstraints(bottomComponent,c);\n  contentPanel.add(bottomComponent);\n}"}
{"ids": "68192", "raw_code": "public static File createTempDir(File dir,boolean cleanup) throws IOException {\n  if (!dir.mkdirs() && !dir.exists()) {\n    throw new IOException(String.format(\"Failed to create directory structure '%s'\",dir.toString()));\n  }\n  if (cleanup) {\n    addCleanupHook(dir.toPath());\n  }\n  return dir;\n}"}
{"ids": "68624", "raw_code": "public static String readCookieIgnoreSpecialCharacters(HttpServletRequest request,String cookieName){\n  String cs=request.getHeader(\"cookie\");\n  if (cs == null)   return null;\n  int start=cs.indexOf(cookieName);\n  if (start < 0)   return null;\n  cs=cs.substring(start + 1 + cookieName.length());\n  int end=cs.indexOf(';');\n  if (end > 0) {\n    cs=cs.substring(0,end);\n  }\n  return cs;\n}"}
{"ids": "50855", "raw_code": "protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){\n  if (visited.contains(this)) {\n    return;\n  }\n  visited.add(this);\n  doMerge(visited,type,seenQualifiers,result);\n}"}
{"ids": "48856", "raw_code": "private byte[] translateTransferableString(String str,long format) throws IOException {\n  Long lFormat=Long.valueOf(format);\n  String charset=getBestCharsetForTextFormat(lFormat,null);\n  String eoln=(String)nativeEOLNs.get(lFormat);\n  if (eoln != null) {\n    int length=str.length();\n    StringBuffer buffer=new StringBuffer(length * 2);\n    for (int i=0; i < length; i++) {\n      if (str.startsWith(eoln,i)) {\n        buffer.append(eoln);\n        i+=eoln.length() - 1;\n        continue;\n      }\n      char c=str.charAt(i);\n      if (c == '\\n') {\n        buffer.append(eoln);\n      }\n else {\n        buffer.append(c);\n      }\n    }\n    str=buffer.toString();\n  }\n  byte[] bytes=str.getBytes(charset);\n  Integer terminators=(Integer)nativeTerminators.get(lFormat);\n  if (terminators != null) {\n    int numTerminators=terminators.intValue();\n    byte[] terminatedBytes=new byte[bytes.length + numTerminators];\n    System.arraycopy(bytes,0,terminatedBytes,0,bytes.length);\n    for (int i=bytes.length; i < terminatedBytes.length; i++) {\n      terminatedBytes[i]=0x0;\n    }\n    bytes=terminatedBytes;\n  }\n  return bytes;\n}"}
{"ids": "46626", "raw_code": "public Position createPosition(int offset) throws BadLocationException {\n  while (queue.poll() != null) {\n    unusedMarks++;\n  }\n  if (unusedMarks > Math.max(5,(marks.size() / 10))) {\n    removeUnusedMarks();\n  }\n  int g0=getGapStart();\n  int g1=getGapEnd();\n  int index=(offset < g0) ? offset : offset + (g1 - g0);\n  search.index=index;\n  int sortIndex=findSortIndex(search);\n  MarkData m;\n  StickyPosition position;\n  if (sortIndex < marks.size() && (m=marks.elementAt(sortIndex)).index == index && (position=m.getPosition()) != null) {\n  }\n else {\n    position=new StickyPosition();\n    m=new MarkData(index,position,queue);\n    position.setMark(m);\n    marks.insertElementAt(m,sortIndex);\n  }\n  return position;\n}"}
{"ids": "63167", "raw_code": "public static String pad(String string,int n,String padding,boolean right){\n  if (n < 0) {\n    n=0;\n  }\n  if (n < string.length()) {\n    return string.substring(0,n);\n  }\n else   if (n == string.length()) {\n    return string;\n  }\n  char paddingChar;\n  if (padding == null || padding.length() == 0) {\n    paddingChar=' ';\n  }\n else {\n    paddingChar=padding.charAt(0);\n  }\n  StringBuilder buff=new StringBuilder(n);\n  n-=string.length();\n  if (right) {\n    buff.append(string);\n  }\n  for (int i=0; i < n; i++) {\n    buff.append(paddingChar);\n  }\n  if (!right) {\n    buff.append(string);\n  }\n  return buff.toString();\n}"}
{"ids": "49080", "raw_code": "private final void resetDTX(AffineTransform at){\n  fsref=null;\n  dtx=at;\n  invdtx=null;\n  if (!dtx.isIdentity()) {\n    try {\n      invdtx=dtx.createInverse();\n    }\n catch (    NoninvertibleTransformException e) {\n    }\n  }\n  if (gti != null) {\n    gti.strikesRef=null;\n  }\n}"}
{"ids": "55340", "raw_code": "public static void addActivityListener(ActivityListener listener){\n  if (listener != null) {\n    startTracking();\n    listeners.add(listener);\n  }\n}"}
{"ids": "32607", "raw_code": "public void addMutedUsername(final String username,final Date muteTill){\n  if (isUsernameMuted(username)) {\n    removeMutedUsername(username);\n  }\n  Timestamp muteTillTs=null;\n  if (muteTill != null) {\n    muteTillTs=new Timestamp(muteTill.getTime());\n  }\n  s_logger.fine(\"Muting username:\" + username);\n  final Connection con=Database.getConnection();\n  try {\n    final PreparedStatement ps=con.prepareStatement(\"insert into muted_usernames (username, mute_till) values (?, ?)\");\n    ps.setString(1,username);\n    ps.setTimestamp(2,muteTillTs);\n    ps.execute();\n    ps.close();\n    con.commit();\n  }\n catch (  final SQLException sqle) {\n    if (sqle.getErrorCode() == 30000) {\n      s_logger.info(\"Tried to create duplicate muted username:\" + username + \" error:\"+ sqle.getMessage());\n      return;\n    }\n    s_logger.log(Level.SEVERE,\"Error inserting muted username:\" + username,sqle);\n    throw new IllegalStateException(sqle.getMessage());\n  }\n finally {\n    DbUtil.closeConnection(con);\n  }\n}"}
{"ids": "51061", "raw_code": "public boolean isEmpty(){\n  return mSelectedWidgets.isEmpty();\n}"}
{"ids": "47303", "raw_code": "public void close() throws IOException {\n  if (!closed) {\n    try {\n      finish();\n    }\n  finally {\n      out.close();\n      closed=true;\n    }\n  }\n}"}
{"ids": "76362", "raw_code": "public static void nextBytes(byte[] bytes){\n  wasAccessed=true;\n  for (int i=0; i < bytes.length; )   for (int rnd=nextInt(), n=Math.min(bytes.length - i,4); n-- > 0; rnd>>=8)   bytes[i++]=(byte)rnd;\n}"}
{"ids": "7718", "raw_code": "protected void drawLowFarOut(double aRadius,Graphics2D g2,double xx,double m){\n  double side=aRadius * 2;\n  g2.draw(new Line2D.Double(xx - side,m - side,xx + side,m - side));\n  g2.draw(new Line2D.Double(xx - side,m - side,xx,m));\n  g2.draw(new Line2D.Double(xx + side,m - side,xx,m));\n}"}
{"ids": "9917", "raw_code": "private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {\n  if (name == null) {\n    throw new IllegalArgumentException(\"Null name\");\n  }\n  if (attrBinding == null) {\n    throw new IllegalArgumentException(\"Null binding\");\n  }\n  if (attrLocation == null) {\n    throw new IllegalArgumentException(\"Null location\");\n  }\n  Element endPt=doc.createElement(name);\n  endPt.setAttribute(SAMLNames.BINDING,attrBinding);\n  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);\n  if (attrResponseLocation != null) {\n    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);\n  }\n  return endPt;\n}"}
{"ids": "3183", "raw_code": "void putFile(String relativePath,Codebase codebase){\n  try {\n    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);\n    File src=codebase.getFile(relativePath);\n    boolean srcExists=filesystem.exists(src);\n    boolean destExists=filesystem.exists(dest);\n    boolean srcExecutable=filesystem.isExecutable(src);\n    boolean destExecutable=filesystem.isExecutable(dest);\n    if (!srcExists && !destExists) {\n      throw new MoeProblem(\"Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s\",relativePath,src,dest);\n    }\n    if (!srcExists) {\n      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),\"rm\",relativePath);\n      return;\n    }\n    try {\n      filesystem.makeDirsForFile(dest);\n      filesystem.copyFile(src,dest);\n    }\n catch (    IOException e) {\n      throw new MoeProblem(e.getMessage());\n    }\n    if (!destExists) {\n      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),\"add\",\"--parents\",relativePath);\n    }\n    String mimeType=guessMimeType(relativePath);\n    if (mimeType != null) {\n      try {\n        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),\"propset\",\"svn:mime-type\",mimeType,relativePath);\n      }\n catch (      CommandRunner.CommandException e) {\n        ui.message(\"Error setting mime-type for %s\",relativePath);\n      }\n    }\n    if (destExecutable != srcExecutable) {\n      if (srcExecutable) {\n        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),\"propset\",\"svn:executable\",\"*\",relativePath);\n      }\n else {\n        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),\"propdel\",\"svn:executable\",relativePath);\n      }\n    }\n  }\n catch (  CommandRunner.CommandException e) {\n    throw new MoeProblem(\"problem occurred while running svn: \" + e.stderr);\n  }\n}"}
{"ids": "23189", "raw_code": "private byte[] convertBitmapToBytes(final Bitmap bitmap){\n  int size=bitmap.getRowBytes() * bitmap.getHeight();\n  ByteArrayOutputStream out=new ByteArrayOutputStream(size);\n  try {\n    if (bitmap.compress(Bitmap.CompressFormat.PNG,0,out)) {\n      return out.toByteArray();\n    }\n    if (sLogger.isActivated()) {\n      sLogger.debug(\"Unable to convert bitmap, compression failed\");\n    }\n    return null;\n  }\n  finally {\n    CloseableUtils.tryToClose(out);\n  }\n}"}
{"ids": "60446", "raw_code": "private static void saveTemplate(File parentDir,FileTemplateBase template,final String lineSeparator) throws IOException {\n  final File templateFile=new File(parentDir,encodeFileName(template.getName(),template.getExtension()));\n  FileOutputStream fileOutputStream;\n  try {\n    fileOutputStream=new FileOutputStream(templateFile);\n  }\n catch (  FileNotFoundException e) {\n    FileUtil.delete(templateFile);\n    fileOutputStream=new FileOutputStream(templateFile);\n  }\n  OutputStreamWriter outputStreamWriter=new OutputStreamWriter(fileOutputStream,CharsetToolkit.UTF8_CHARSET);\n  String content=template.getText();\n  if (!lineSeparator.equals(\"\\n\")) {\n    content=StringUtil.convertLineSeparators(content,lineSeparator);\n  }\n  outputStreamWriter.write(content);\n  outputStreamWriter.close();\n  fileOutputStream.close();\n}"}
{"ids": "39625", "raw_code": "public void addComposite(TransformTreeNode node){\n  parts.add(node);\n}"}
{"ids": "70108", "raw_code": "protected static void postProcessFlood(IHex[] hexSet,int modifier){\n  int n;\n  IHex field;\n  ITerrainFactory f=Terrains.getTerrainFactory();\n  for (n=0; n < hexSet.length; n++) {\n    field=hexSet[n];\n    int elev=field.getLevel() - modifier;\n    if ((elev == 0) && !(field.containsTerrain(Terrains.WATER)) && !(field.containsTerrain(Terrains.PAVEMENT))) {\n      field.addTerrain(f.createTerrain(Terrains.SWAMP,1));\n    }\n else     if (elev < 0) {\n      if (elev < -4) {\n        elev=-4;\n      }\n      field.removeAllTerrains();\n      field.addTerrain(f.createTerrain(Terrains.WATER,-elev));\n      field.setLevel(modifier);\n    }\n  }\n}"}
{"ids": "85057", "raw_code": "public ModuleHandle addModule(String moduleName,String sessionKey){\n  String sanitizedModuleName=generateUniqueNameIfNullOrEmpty(moduleName,\"Module\");\n  ModuleHandle moduleHandle=new ModuleHandle(sanitizedModuleName,sessionKey);\nsynchronized (privateInstanceLock) {\n    modules.add(moduleHandle);\n  }\n  setTerminated(false);\n  return moduleHandle;\n}"}
{"ids": "13177", "raw_code": "protected int indexOf(String buffer,int start,int end,char ch){\n  for (int i=start; i < end; i++) {\n    if (buffer.charAt(i) == ch) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"ids": "84600", "raw_code": "public static double variance(double[] x,double mean){\n  double var=0;\n  int count=x.length;\n  for (  double aX : x) {\n    if (Double.isNaN(aX)) {\n      count--;\n    }\n else {\n      double diff=aX - mean;\n      var+=diff * diff;\n    }\n  }\n  if (count < 2) {\n    count=1;\n  }\n else {\n    count=count - 1;\n  }\n  return var / (double)count;\n}"}
{"ids": "2972", "raw_code": "private void stashRequestUser(RequestAndResponse requestAndResponse){\n  if (requestAndResponse.wasUserAlreadyStashed) {\n    return;\n  }\n  requestAndResponse.wasUserAlreadyStashed=true;\n  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));\n  if (user != null) {\n    requestAndResponse.userIsAdmin=user.getIsAdmin();\n    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();\n    requestAndResponse.userOptions=user.getOptions();\n  }\n else {\n    requestAndResponse.userOptions=\"{}\";\n  }\n}"}
{"ids": "74022", "raw_code": "@Override public void sendLocationList(){\n  List<Location> locationList=lm.getLocationsByNameList();\n  ArrayList<Attribute> location;\n  for (  Location loc : locationList) {\n    location=new ArrayList<Attribute>(1);\n    location.add(new Attribute(LOCATIONS,loc));\n    try {\n      sendMessage(location);\n    }\n catch (    IOException ioe) {\n      log.debug(\"could not send train \" + loc.getName());\n    }\n  }\n}"}
{"ids": "60476", "raw_code": "@Override public boolean isInsideSoftWrap(@NotNull VisualPosition visual){\n  return isInsideSoftWrap(visual,false);\n}"}
{"ids": "30509", "raw_code": "static public InputStream findClusterXML(String _clusterXML){\n  String schemaNameToBeUsed=_clusterXML;\n  InputStream schemaInputStream;\n  String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + \"/\" + schemaNameToBeUsed+ ClusterXML.CLUSTER_XML_FILE_SUFFIX;\n  schemaInputStream=getResourceStream(schemaFilePath);\n  if (schemaInputStream != null) {\n    if (_logger.isLoggable(Level.INFO)) {\n      _logger.info(\"Loaded the cluster XML < \" + getResourceURL(schemaNameToBeUsed) + \" > for the cluster config setup.\");\n    }\n    return schemaInputStream;\n  }\n else {\n    String defaultSchemaFileName=Constants.Container.CONTAINER_CONFIG_DIRECTORY + \"/\" + Constants.Schemas.DEFAULT_SCHEMA+ ClusterXML.CLUSTER_XML_FILE_SUFFIX;\n    schemaInputStream=getResourceStream(defaultSchemaFileName);\n    if (schemaInputStream != null) {\n      if (_logger.isLoggable(Level.WARNING)) {\n        _logger.warning(\"Could not find the cluster xml file: \" + schemaFilePath + \".\\n Loaded the default cluster xml < \"+ getResourceURL(defaultSchemaFileName)+ \" > for the cluster config setup.\");\n      }\n      return schemaInputStream;\n    }\n else {\n      if (_logger.isLoggable(Level.WARNING)) {\n        _logger.warning(\"The requested cluster xml file does not exist in the following path: \" + defaultSchemaFileName);\n      }\n    }\n  }\n  return schemaInputStream;\n}"}
{"ids": "44068", "raw_code": "public boolean isValid(World world){\n  return true;\n}"}
{"ids": "84502", "raw_code": "private ParsePosition next(final ParsePosition pos){\n  pos.setIndex(pos.getIndex() + 1);\n  return pos;\n}"}
{"ids": "3380", "raw_code": "private int flush(int offset){\n  try {\n    _os.write(_buffer,0,offset);\n    _offset=0;\n    return 0;\n  }\n catch (  IOException e) {\n    throw new H3ExceptionOut(e);\n  }\n}"}
{"ids": "7573", "raw_code": "protected String generateSectionLabel(PieDataset dataset,Comparable key){\n  String result=null;\n  if (dataset != null) {\n    Object[] items=createItemArray(dataset,key);\n    result=MessageFormat.format(this.labelFormat,items);\n  }\n  return result;\n}"}
{"ids": "19729", "raw_code": "public void exec(String description,String[] baseCommand) throws BackupException {\n  exec(description,baseCommand,null,null,null,false,false);\n}"}
{"ids": "1868", "raw_code": "public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException {\n  try {\n    checkNotNull(inStream);\n    Properties properties=new Properties();\n    properties.load(inStream);\n    return (create(properties));\n  }\n  finally {\n    if (inStream != null) {\n      inStream.close();\n    }\n  }\n}"}
{"ids": "16656", "raw_code": "protected int[] splitSentence(String sentence){\n  String[] w=sentence.split(\"\\\\s+\");\n  int[] words=new int[w.length];\n  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);\n  return words;\n}"}
{"ids": "53586", "raw_code": "public static boolean isFailure(List<Action> actions){\n  return actions.isEmpty();\n}"}
{"ids": "6498", "raw_code": "public void addToDictionary(String s){\n  if (!getAutoComplete())   return;\n  if (dict == null) {\n    setUp();\n    this.dict=createDefaultDictionary();\n  }\n  dict.addEntry(s.trim());\n}"}
{"ids": "75809", "raw_code": "public static int[][] deep_copy(int M[][]){\n  int[][] C=new int[M.length][];\n  for (int i=0; i < C.length; i++) {\n    C[i]=Arrays.copyOf(M[i],M[i].length);\n  }\n  return C;\n}"}
{"ids": "1778", "raw_code": "public void waitForMessageToArrive(){\n  LOG.info(\"Waiting for message to arrive\");\n  long start=System.currentTimeMillis();\nsynchronized (messages) {\n    try {\n      while (hasReceivedMessage()) {\n        messages.wait(4000);\n      }\n    }\n catch (    InterruptedException e) {\n      LOG.info(\"Caught: \" + e);\n    }\n  }\n  long end=System.currentTimeMillis() - start;\n  LOG.info(\"End of wait for \" + end + \" millis\");\n}"}
{"ids": "32838", "raw_code": "public Date(String date){\n  String[] fields=date.split(\"/\");\n  if (fields.length != 3) {\n    throw new IllegalArgumentException(\"Invalid date\");\n  }\n  month=Integer.parseInt(fields[0]);\n  day=Integer.parseInt(fields[1]);\n  year=Integer.parseInt(fields[2]);\n  if (!isValid(month,day,year))   throw new IllegalArgumentException(\"Invalid date\");\n}"}
{"ids": "9322", "raw_code": "public static void copy(File src,File dst) throws IOException {\n  if (src.isDirectory()) {\n    ensureDirectoryExists(dst);\n    String[] filesList=src.list();\n    for (    String file : filesList) {\n      File srcFile=new File(src,file);\n      File destFile=new File(dst,file);\n      copy(srcFile,destFile);\n    }\n  }\n else {\n    copyFile(src,dst);\n  }\n}"}
{"ids": "6723", "raw_code": "public MapObjects(PokemonGo api){\n  this.api=api;\n}"}
{"ids": "49011", "raw_code": "static void incrementKeepAliveCount(){\nsynchronized (keepAliveLock) {\n    keepAliveCount++;\n    if (reaper == null) {\n      reaper=AccessController.doPrivileged(new NewThreadAction(new Reaper(),\"Reaper\",false));\n      reaper.start();\n    }\n    if (gcLatencyRequest == null) {\n      gcLatencyRequest=GC.requestLatency(gcInterval);\n    }\n  }\n}"}
{"ids": "47893", "raw_code": "static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){\n  MethodType targetType=target.type();\n  MethodType collectorType=collector.type();\n  int collectArgCount=collectorType.parameterCount();\n  Class<?> collectValType=collectorType.returnType();\n  int collectValCount=(collectValType == void.class ? 0 : 1);\n  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);\n  if (!retainOriginalArgs) {\n    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());\n  }\n  MethodType lambdaType=srcType.invokerType();\n  Name[] names=arguments(2,lambdaType);\n  final int collectNamePos=names.length - 2;\n  final int targetNamePos=names.length - 1;\n  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);\n  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);\n  Name[] targetArgs=new Name[targetType.parameterCount()];\n  int inputArgPos=1;\n  int targetArgPos=0;\n  int chunk=collectArgPos;\n  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);\n  inputArgPos+=chunk;\n  targetArgPos+=chunk;\n  if (collectValType != void.class) {\n    targetArgs[targetArgPos++]=names[collectNamePos];\n  }\n  chunk=collectArgCount;\n  if (retainOriginalArgs) {\n    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);\n    targetArgPos+=chunk;\n  }\n  inputArgPos+=chunk;\n  chunk=targetArgs.length - targetArgPos;\n  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);\n  assert (inputArgPos + chunk == collectNamePos);\n  names[targetNamePos]=new Name(target,(Object[])targetArgs);\n  LambdaForm form=new LambdaForm(\"collect\",lambdaType.parameterCount(),names);\n  return SimpleMethodHandle.make(srcType,form);\n}"}
{"ids": "30714", "raw_code": "public InSpacePredicate(Object... values){\n  _inValues=new HashSet<Object>();\n  for (  Object value : values) {\n    _inValues.add(value);\n  }\n}"}
{"ids": "76429", "raw_code": "protected List<String> prepareSortKeyStatements(List<SortKey> sortKeys){\n  List<String> keys=new ArrayList<String>();\n  for (int i=0; i < sortKeys.size(); i++) {\n    SortKey sortKey=sortKeys.get(i);\n    keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? \" ASC\" : \" DESC\"));\n  }\n  return keys;\n}"}
{"ids": "68198", "raw_code": "private Optional<CuratorFramework> createClient(String zookeeperUrl){\n  if (StringUtils.isNotBlank(zookeeperUrl)) {\n    CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl);\n    client.start();\n    return Optional.of(client);\n  }\n else {\n    return Optional.empty();\n  }\n}"}
{"ids": "74088", "raw_code": "public static String addCvDescription(String toolTip,String cvDescription,String mask){\n  String descString=cvDescription;\n  String temp=getMaskDescription(mask);\n  if (temp.length() > 0) {\n    descString=descString + \" \" + temp;\n  }\n  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {\n    if (toolTip == null) {\n      toolTip=descString;\n    }\n else {\n      toolTip=addTextHTMLaware(toolTip,\" (\" + descString + \")\");\n    }\n  }\n else   if (toolTip == null) {\n    toolTip=\"\";\n  }\n  return toolTip;\n}"}
{"ids": "46581", "raw_code": "private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){\n  Enumeration keys=from.getAttributeNames();\n  String value=\"\";\n  while (keys.hasMoreElements()) {\n    Object key=keys.nextElement();\n    if (key instanceof CSS.Attribute) {\n      value=value + \" \" + key+ \"=\"+ from.getAttribute(key)+ \";\";\n    }\n else {\n      to.addAttribute(key,from.getAttribute(key));\n    }\n  }\n  if (value.length() > 0) {\n    to.addAttribute(HTML.Attribute.STYLE,value);\n  }\n}"}
{"ids": "66016", "raw_code": "public void updateAmount(){\n  setAmt(getTotalAmount());\n}"}
{"ids": "38436", "raw_code": "private void updateLegends(){\n  if (m_span == null) {\n    m_span=new JPanel();\n  }\n  JPanel padder=new JPanel();\n  JPanel padd2=new JPanel();\n  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));\n  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));\n  LegendEntry tmp;\n  GridBagLayout gb=new GridBagLayout();\n  GridBagLayout gb2=new GridBagLayout();\n  GridBagConstraints constraints=new GridBagConstraints();\n  m_span.removeAll();\n  padder.setLayout(gb);\n  m_span.setLayout(gb2);\n  constraints.anchor=GridBagConstraints.CENTER;\n  constraints.gridx=0;\n  constraints.gridy=0;\n  constraints.weightx=5;\n  constraints.fill=GridBagConstraints.HORIZONTAL;\n  constraints.gridwidth=1;\n  constraints.gridheight=1;\n  constraints.insets=new Insets(0,0,0,0);\n  padder.add(m_span,constraints);\n  constraints.gridx=0;\n  constraints.gridy=1;\n  constraints.weightx=5;\n  constraints.fill=GridBagConstraints.BOTH;\n  constraints.gridwidth=1;\n  constraints.gridheight=1;\n  constraints.weighty=5;\n  constraints.insets=new Insets(0,0,0,0);\n  padder.add(padd2,constraints);\n  constraints.weighty=0;\n  setViewportView(padder);\n  constraints.anchor=GridBagConstraints.CENTER;\n  constraints.gridx=0;\n  constraints.gridy=0;\n  constraints.weightx=5;\n  constraints.fill=GridBagConstraints.HORIZONTAL;\n  constraints.gridwidth=1;\n  constraints.gridheight=1;\n  constraints.weighty=5;\n  constraints.insets=new Insets(2,4,2,4);\n  for (int i=0; i < m_plots.size(); i++) {\n    tmp=new LegendEntry(m_plots.get(i),i);\n    constraints.gridy=i;\n    m_span.add(tmp,constraints);\n  }\n}"}
{"ids": "4560", "raw_code": "public static byte[] readDex(File file) throws IOException {\n  return readDex(file.toPath());\n}"}
{"ids": "55364", "raw_code": "public void runCommercial(String stream,int length){\n  if (stream == null || stream.isEmpty()) {\n    commercialResult(stream,\"Can't run commercial, not on a channel.\",TwitchApi.RequestResult.FAILED);\n  }\n else {\n    String channel=\"#\" + stream;\n    if (isChannelOpen(channel)) {\n      g.printLine(channel,\"Trying to run \" + length + \"s commercial..\");\n    }\n else {\n      g.printLine(\"Trying to run \" + length + \"s commercial.. (\"+ stream+ \")\");\n    }\n    api.runCommercial(stream,settings.getString(\"token\"),length);\n  }\n}"}
{"ids": "85415", "raw_code": "void generateWhile(Tree.WhileStatement that){\n  Tree.WhileClause whileClause=that.getWhileClause();\n  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),\"while\",false);\n  for (  VarHolder v : vars) {\n    v.forget();\n  }\n}"}
{"ids": "52063", "raw_code": "public static double igamma(double a,double x){\n  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);\n  double sum=0.0;\n  for (int i=0; i < 100; i++) {\n    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);\n  }\n  return (coef * sum);\n}"}
{"ids": "80654", "raw_code": "public void initializeActiveSlotsList(String slots){\n  if (activeSlotsList == null) {\n    activeSlotsList=new ArrayList<String>();\n  }\n  for (  String s : slots.split(\";\")) {\n    activeSlotsList.add(s);\n  }\n}"}
{"ids": "1606", "raw_code": "private static String convertActionTypeToIntent(RamlActionType actionType,boolean isTargetCollection){\nswitch (actionType) {\ncase DELETE:\n    return \"delete\";\ncase GET:\n  return \"get\";\ncase POST:\nif (isTargetCollection) {\n  return \"create\";\n}\ncase PUT:\nreturn \"update\";\ncase PATCH:\nreturn \"modify\";\ndefault :\nreturn \"do\";\n}\n}"}
{"ids": "72185", "raw_code": "public static String hide(final String key){\n  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);\n}"}
{"ids": "33485", "raw_code": "private synchronized IMqttToken removeMqttToken(Bundle data){\n  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);\n  if (activityToken != null) {\n    int tokenNumber=Integer.parseInt(activityToken);\n    IMqttToken token=tokenMap.get(tokenNumber);\n    tokenMap.delete(tokenNumber);\n    return token;\n  }\n  return null;\n}"}
{"ids": "56416", "raw_code": "public static boolean isExplicitAllType(String[] types){\n  return types != null && types.length == 1 && ALL.equals(types[0]);\n}"}
{"ids": "57797", "raw_code": "private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {\n  int start=position;\n  StringBuilder result=null;\n  if (returnText && text != null) {\n    result=new StringBuilder();\n    result.append(text);\n  }\n  search:   while (true) {\n    if (position + delimiter.length > limit) {\n      if (start < position && returnText) {\n        if (result == null) {\n          result=new StringBuilder();\n        }\n        result.append(buffer,start,position - start);\n      }\n      if (!fillBuffer(delimiter.length)) {\n        checkRelaxed(UNEXPECTED_EOF);\n        type=COMMENT;\n        return null;\n      }\n      start=position;\n    }\n    for (int i=0; i < delimiter.length; i++) {\n      if (buffer[position + i] != delimiter[i]) {\n        position++;\n        continue search;\n      }\n    }\n    break;\n  }\n  int end=position;\n  position+=delimiter.length;\n  if (!returnText) {\n    return null;\n  }\n else   if (result == null) {\n    return stringPool.get(buffer,start,end - start);\n  }\n else {\n    result.append(buffer,start,end - start);\n    return result.toString();\n  }\n}"}
{"ids": "52886", "raw_code": "public boolean isLeaf(){\n  return children == null || children.isEmpty();\n}"}
{"ids": "36414", "raw_code": "public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){\n  Graphics2D g2S=(Graphics2D)g2.create();\n  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);\n  GeneralPath bottom=new GeneralPath();\n  bottom.moveTo(shadow.getX(),rect.getMaxY());\n  bottom.lineTo(rect.getMaxX(),rect.getMaxY());\n  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());\n  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());\n  bottom.closePath();\n  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));\n  g2S.fill(bottom);\n  GeneralPath right=new GeneralPath();\n  right.moveTo(rect.getMaxX(),shadow.getMinY());\n  right.lineTo(shadow.getMaxX(),shadow.getMinY());\n  right.lineTo(shadow.getMaxX(),shadow.getMaxY());\n  right.lineTo(rect.getMaxX(),rect.getMaxY());\n  right.closePath();\n  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));\n  g2S.fill(right);\n  g2S.dispose();\n}"}
{"ids": "23956", "raw_code": "public static void interrupt(final Thread thread){\n  if (thread != null) {\n    thread.interrupt();\n  }\n}"}
{"ids": "82127", "raw_code": "public static Container east(Component east){\n  return Container.encloseIn(new BorderLayout(),east,BorderLayout.EAST);\n}"}
{"ids": "38608", "raw_code": "public void loadLayout(File oFile,boolean newTab){\n  loadLayout(oFile,newTab,false);\n}"}
{"ids": "45399", "raw_code": "public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){\n  if (file == null) {\n    throw new NullPointerException(\"The file must not be null\");\n  }\n  addTracker(file.getPath(),marker,deleteStrategy);\n}"}
{"ids": "33418", "raw_code": "public boolean hasParameter(String name){\n  return _parameters.hasParameter(name);\n}"}
{"ids": "3124", "raw_code": "public static boolean isSQL99NonReservedKeyword(String identifier){\n  if (identifier == null) {\n    throw new NullPointerException(\"The identifier cannot be null\");\n  }\n  return Arrays.binarySearch(SQL99_NON_RESERVED,identifier.toUpperCase()) >= 0;\n}"}
{"ids": "27522", "raw_code": "@Override public long handleCommit(final long commitTime){\n  if (error != null)   throw new IndexInconsistentError(error);\n  final IRootBlockView view=journal.getRootBlockView();\n  final ByteBuffer rbv=view.asReadOnlyBuffer();\n  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());\n  for (int i=0; i < rbv.capacity(); i++) {\n    bb.put(rbv.get());\n  }\n  bb.flip();\n  return journal.write(bb);\n}"}
{"ids": "22186", "raw_code": "public boolean isAppendTaskName(){\n  return appendTaskName;\n}"}
{"ids": "62088", "raw_code": "private static boolean isStartElement(String line){\n  int first=line.lastIndexOf(\"<\");\n  int last=line.lastIndexOf(\">\");\n  if (last < first) {\n    return true;\n  }\n else {\n    int firstEnd=line.lastIndexOf(\"</\");\n    int lastEnd=line.lastIndexOf(\"/>\");\n    if ((firstEnd != first) && ((lastEnd + 1) != last)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "4115", "raw_code": "long readLong() throws IOException {\n  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));\n}"}
{"ids": "39134", "raw_code": "@Override public Instance remove(int index){\n  return m_Instances.remove(index);\n}"}
{"ids": "54476", "raw_code": "protected static String extractAccessKey(String s3uri){\n  return s3uri.substring(s3uri.indexOf(\"://\") + 3,s3uri.indexOf(':',s3uri.indexOf(\"://\") + 3));\n}"}
{"ids": "63230", "raw_code": "public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){\n  if (removeIndex > 0 && oldSize > 0) {\n    System.arraycopy(src,0,dst,0,removeIndex);\n  }\n  if (removeIndex < oldSize) {\n    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);\n  }\n}"}
{"ids": "14964", "raw_code": "public SiteMonitor(String[] urlList){\n  siteUrlList=urlList;\n}"}
{"ids": "69891", "raw_code": "public Optional<BlazeVertex> vertex(final String vertexId){\n  try (final CloseableIterator<Vertex> it=vertices(vertexId)){\n    final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();\n    if (it.hasNext()) {\n      throw new IllegalStateException(\"Multiple vertices found with id: \" + vertexId);\n    }\n    return v;\n  }\n }"}
{"ids": "81118", "raw_code": "private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {\n  String label=request.getParameter(\"start\");\n  String detail=request.getParameter(\"detail\");\n  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);\n  startMon(key);\n  PrintWriter out=response.getWriter();\n  out.println(OK + \": start successfully called on - \" + label);\n}"}
{"ids": "84814", "raw_code": "public double norm(){\n  double sum=0;\n  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];\n  return Math.sqrt(sum);\n}"}
{"ids": "75778", "raw_code": "public static double P_Harmonic(int Y[][],int Ypred[][]){\n  int allMissings=0;\n  int N=Y.length;\n  double loss=0.0;\n  for (int i=0; i < N; i++) {\n    if (allMissing(Y[i])) {\n      allMissings++;\n      continue;\n    }\n    double curLoss=P_Harmonic(Y[i],Ypred[i]);\n    if (Double.isNaN(curLoss)) {\n      allMissings++;\n      continue;\n    }\n    loss+=curLoss;\n  }\n  return loss / (double)(N - allMissings);\n}"}
{"ids": "48410", "raw_code": "public void writeEntry(CCacheOutputStream cos) throws IOException {\n  cos.write16(adType);\n  cos.write32(adData.length);\n  cos.write(adData,0,adData.length);\n}"}
{"ids": "12861", "raw_code": "public static String readLabelFile(String entrySeparator,boolean ensureInitialBoundary,String trfname) throws IOException {\n  BufferedReader lab=new BufferedReader(new FileReader(trfname));\n  try {\n    XwavesLabelfileReader xlds=new XwavesLabelfileReader(trfname);\n    String result=StringUtils.join(entrySeparator,xlds.getLabelSymbols());\n    if (ensureInitialBoundary && result.charAt(0) != '_') {\n      result=\"_\" + entrySeparator + result;\n    }\n    return result;\n  }\n  finally {\n    lab.close();\n  }\n}"}
{"ids": "16114", "raw_code": "ConverterSet add(Converter converter,Converter[] removed){\n  Converter[] converters=iConverters;\n  int length=converters.length;\n  for (int i=0; i < length; i++) {\n    Converter existing=converters[i];\n    if (converter.equals(existing)) {\n      if (removed != null) {\n        removed[0]=null;\n      }\n      return this;\n    }\n    if (converter.getSupportedType() == existing.getSupportedType()) {\n      Converter[] copy=new Converter[length];\n      for (int j=0; j < length; j++) {\n        if (j != i) {\n          copy[j]=converters[j];\n        }\n else {\n          copy[j]=converter;\n        }\n      }\n      if (removed != null) {\n        removed[0]=existing;\n      }\n      return new ConverterSet(copy);\n    }\n  }\n  Converter[] copy=new Converter[length + 1];\n  System.arraycopy(converters,0,copy,0,length);\n  copy[length]=converter;\n  if (removed != null) {\n    removed[0]=null;\n  }\n  return new ConverterSet(copy);\n}"}
{"ids": "81495", "raw_code": "private void parse() throws SAXException {\n  XStream xstream=(XStream)properties.get(CONFIGURED_XSTREAM_PROPERTY);\n  if (xstream == null) {\n    xstream=new XStream();\n  }\n  final List<?> source=(List<?>)properties.get(SOURCE_OBJECT_LIST_PROPERTY);\n  if (source == null || source.isEmpty()) {\n    throw new SAXException(\"Missing or empty source object list. Setting property \\\"\" + SOURCE_OBJECT_LIST_PROPERTY + \"\\\" is mandatory\");\n  }\n  try {\n    startDocument(true);\n    for (    final Object name : source) {\n      xstream.marshal(name,this);\n    }\n    endDocument(true);\n  }\n catch (  final StreamException e) {\n    if (e.getCause() instanceof SAXException) {\n      throw (SAXException)e.getCause();\n    }\n else {\n      throw new SAXException(e);\n    }\n  }\n}"}
{"ids": "44429", "raw_code": "private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){\n  TreeMap<MessageUid,MaildirMessageName> sortedMap;\n  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;\n else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);\n  if (to != null)   return sortedMap.subMap(from,to.next());\n  return sortedMap.tailMap(from);\n}"}
{"ids": "23182", "raw_code": "private static boolean compareParam(String jdiffParam,Type reflectionParamType){\n  if (jdiffParam == null) {\n    return false;\n  }\n  String reflectionParam=typeToString(reflectionParamType);\n  if (jdiffParam.equals(reflectionParam)) {\n    return true;\n  }\n  int jdiffParamEndOffset=jdiffParam.indexOf(\"...\");\n  int reflectionParamEndOffset=reflectionParam.indexOf(\"[]\");\n  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {\n    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);\n    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);\n    return jdiffParam.equals(reflectionParam);\n  }\n  return false;\n}"}
{"ids": "65120", "raw_code": "public void mouseWheelMoved(MouseWheelEvent e){\n  boolean accepted=checkModifiers(e);\n  if (accepted == true) {\n    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();\n    Point2D mouse=e.getPoint();\n    Point2D center=vv.getCenter();\n    int amount=e.getWheelRotation();\n    if (zoomAtMouse) {\n      if (amount > 0) {\n        scaler.scale(vv,in,mouse);\n      }\n else       if (amount < 0) {\n        scaler.scale(vv,out,mouse);\n      }\n    }\n else {\n      if (amount > 0) {\n        scaler.scale(vv,in,center);\n      }\n else       if (amount < 0) {\n        scaler.scale(vv,out,center);\n      }\n    }\n    e.consume();\n    vv.repaint();\n  }\n}"}
{"ids": "77629", "raw_code": "private void handleStartElement(XMLStreamReader parser,Set<Node> childrenFound,Handler handler,Map<String,Object> values,Stack<Set<String>> stack,boolean recordStarted) throws IOException, XMLStreamException {\n  Node n=getMatchingNode(parser,childNodes);\n  Map<String,Object> decends=new HashMap<>();\n  if (n != null) {\n    childrenFound.add(n);\n    n.parse(parser,handler,values,stack,recordStarted);\n    return;\n  }\n  Node dn=this;\n  do {\n    if (dn.wildCardNodes != null) {\n      n=getMatchingNode(parser,dn.wildCardNodes);\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser,handler,values,stack,recordStarted);\n        break;\n      }\n      for (      Node nn : dn.wildCardNodes)       decends.put(nn.name,nn);\n    }\n    dn=dn.wildAncestor;\n  }\n while (dn != null);\n  if (n == null) {\n    int count=1;\n    while (count != 0) {\n      int token=parser.next();\n      if (token == START_ELEMENT) {\n        Node nn=(Node)decends.get(parser.getLocalName());\n        if (nn != null) {\n          childrenFound.add(nn);\n          nn.parse(parser,handler,values,stack,recordStarted);\n        }\n else         count++;\n      }\n else       if (token == END_ELEMENT)       count--;\n    }\n  }\n}"}
{"ids": "85351", "raw_code": "public boolean equivalent(IMFMarkerType other){\n  if (other == null) {\n    return false;\n  }\n  boolean result=true;\n  result&=offset.equals(other.getOffset());\n  result&=label.equivalent(other.getLabel());\n  return result;\n}"}
{"ids": "52024", "raw_code": "public static Discretization discretize(double[] _data,double[] cutoffs,String variableName,List<String> categories){\n  if (cutoffs == null) {\n    throw new NullPointerException();\n  }\n  for (int i=0; i < cutoffs.length - 1; i++) {\n    if (!(cutoffs[i] <= cutoffs[i + 1])) {\n      throw new NullPointerException(\"Cutoffs must be in nondecreasing order.\");\n    }\n  }\n  if (variableName == null) {\n    throw new NullPointerException();\n  }\n  int numCategories=cutoffs.length + 1;\n  if (categories != null && categories.size() != numCategories) {\n    throw new IllegalArgumentException(\"If specified, the list of \" + \"categories names must be one longer than the length of \" + \"the cutoffs array.\");\n  }\n  DiscreteVariable variable;\n  if (categories == null) {\n    variable=new DiscreteVariable(variableName,numCategories);\n  }\n else {\n    variable=new DiscreteVariable(variableName,categories);\n  }\n  int[] discreteData=new int[_data.length];\n  loop:   for (int i=0; i < _data.length; i++) {\n    if (Double.isNaN(_data[i])) {\n      discreteData[i]=DiscreteVariable.MISSING_VALUE;\n      continue;\n    }\n    for (int j=0; j < cutoffs.length; j++) {\n      if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < cutoffs[j]) {\n        discreteData[i]=j;\n        continue loop;\n      }\n    }\n    discreteData[i]=cutoffs.length;\n  }\n  return new Discretization(variable,discreteData);\n}"}
{"ids": "54955", "raw_code": "private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {\n  String arg=\"\";\n  if (node == null) {\n    rsvc.error(\"#include() error :  null argument\");\n    return false;\n  }\n  Object value=node.value(context);\n  if (value == null) {\n    rsvc.error(\"#include() error :  null argument\");\n    return false;\n  }\n  arg=value.toString();\n  Resource resource=null;\n  try {\n    resource=rsvc.getContent(arg,getInputEncoding(context));\n  }\n catch (  ResourceNotFoundException rnfe) {\n    rsvc.error(\"#include(): cannot find resource '\" + arg + \"', called from template \"+ context.getCurrentTemplateName()+ \" at (\"+ getLine()+ \", \"+ getColumn()+ \")\");\n    throw rnfe;\n  }\ncatch (  Exception e) {\n    rsvc.error(\"#include(): arg = '\" + arg + \"', called from template \"+ context.getCurrentTemplateName()+ \" at (\"+ getLine()+ \", \"+ getColumn()+ \") : \"+ e);\n  }\n  if (resource == null)   return false;\n  writer.write((String)resource.getData());\n  return true;\n}"}
{"ids": "9465", "raw_code": "public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){\n  double[] m=this.m;\n  m[0]*=xScale;\n  m[4]*=xScale;\n  m[8]*=xScale;\n  m[12]*=xScale;\n  m[1]*=yScale;\n  m[5]*=yScale;\n  m[9]*=yScale;\n  m[13]*=yScale;\n  m[2]*=zScale;\n  m[6]*=zScale;\n  m[10]*=zScale;\n  m[14]*=zScale;\n  return this;\n}"}
{"ids": "73462", "raw_code": "public void changeState(){\n  linked=!linked;\n  link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage();\n  repaint();\n}"}
{"ids": "71061", "raw_code": "public static Geometry bufferBySegments(Geometry g,double distance){\n  Geometry segs=LineHandlingFunctions.extractSegments(g);\n  double posDist=Math.abs(distance);\n  Geometry segBuf=bufferByComponents(segs,posDist);\n  if (distance < 0.0)   return g.difference(segBuf);\n  return g.union(segBuf);\n}"}
{"ids": "22162", "raw_code": "public void recordEndTime(){\n  int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get());\n  _log.info(\"Request response time: {} ms\",msDiff);\n  updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false);\n  updateMinMaxReqRspMs(msDiff);\n  if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) {\n    _alertLog.warn(MessageFormat.format(\"Request took an unusually long time to complete: {0}ms\",msDiff));\n  }\n  _currentRequestStartTime.remove();\n}"}
{"ids": "17024", "raw_code": "private boolean isAccessibleUserToKibana(Set<String> filters){\n  if (filters.contains(\"/.kibana\")) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "34443", "raw_code": "public boolean clear(){\n  try {\n    list.clear();\n    fireTableDataChanged();\n  }\n catch (  Exception e) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "74035", "raw_code": "public boolean load(File fi) throws JmriConfigureXmlException {\n  return load(fi,false);\n}"}
{"ids": "47574", "raw_code": "public void addRequestProperty(String key,String value){\n  if (connected)   throw new IllegalStateException(\"Already connected\");\n  if (key == null)   throw new NullPointerException(\"key is null\");\n  if (requests == null)   requests=new MessageHeader();\n  requests.add(key,value);\n}"}
{"ids": "65352", "raw_code": "ServerMember update(Address clientAddress,Instant time){\n  if (clientAddress != null) {\n    this.clientAddress=clientAddress;\n    if (time.isAfter(updated)) {\n      this.updated=Assert.notNull(time,\"time\");\n    }\n  }\n  return this;\n}"}
{"ids": "7397", "raw_code": "@Override public void actionPerformed(ActionEvent event){\n  String command=event.getActionCommand();\n  if (command.equals(\"BackgroundPaint\")) {\n    attemptModifyBackgroundPaint();\n  }\n}"}
{"ids": "36084", "raw_code": "public byte[] serializeToBuffer(Object o) throws IOException {\n  ByteArrayOutputStream bufOut=new ByteArrayOutputStream();\n  try {\n    serialize(bufOut,o);\n    bufOut.flush();\n    return bufOut.toByteArray();\n  }\n  finally {\n    bufOut.close();\n  }\n}"}
{"ids": "80843", "raw_code": "ModulePointer resolve(String modName){\n  return (ModulePointer)context.get(modName);\n}"}
{"ids": "4573", "raw_code": "public NarClassLoader(final File narWorkingDirectory) throws ClassNotFoundException, IOException {\n  super(new URL[0]);\n  this.narWorkingDirectory=narWorkingDirectory;\n  updateClasspath(narWorkingDirectory);\n}"}
{"ids": "81345", "raw_code": "public static TypeBinding[] substitute(Substitution substitution,TypeBinding[] originalTypes){\n  if (originalTypes == null)   return null;\n  TypeBinding[] substitutedTypes=originalTypes;\n  for (int i=0, length=originalTypes.length; i < length; i++) {\n    TypeBinding originalType=originalTypes[i];\n    TypeBinding substitutedParameter=substitute(substitution,originalType);\n    if (substitutedParameter != originalType) {\n      if (substitutedTypes == originalTypes) {\n        System.arraycopy(originalTypes,0,substitutedTypes=new TypeBinding[length],0,i);\n      }\n      substitutedTypes[i]=substitutedParameter;\n    }\n else     if (substitutedTypes != originalTypes) {\n      substitutedTypes[i]=originalType;\n    }\n  }\n  return substitutedTypes;\n}"}
{"ids": "9059", "raw_code": "private boolean checkIfScrolling(float[] lastPoints,MotionEvent ev){\n  float[] point=new float[2];\n  point[0]=ev.getRawX();\n  point[1]=ev.getRawY();\n  float delta=getDistance(lastPoints,point);\n  return Math.abs(delta) > mSlop;\n}"}
{"ids": "55733", "raw_code": "public Edge(S src,Symbol symbol,S dest){\n  this.src=src;\n  this.symbol=symbol;\n  this.dest=dest;\n  this.srcItem=src.getFirstItem();\n  this.hashCache=calcHashCode();\n}"}
{"ids": "49091", "raw_code": "public ExtendedTextLabel createExtended(Font font,CoreMetrics lm,Decoration decorator,int start,int limit){\n  if (start >= limit || start < lineStart || limit > lineLimit) {\n    throw new IllegalArgumentException(\"bad start: \" + start + \" or limit: \"+ limit);\n  }\n  int level=lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart);\n  int linedir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;\n  int layoutFlags=flags & ~0x9;\n  if ((level & 0x1) != 0)   layoutFlags|=1;\n  if ((linedir & 0x1) != 0)   layoutFlags|=8;\n  TextSource source=new StandardTextSource(text,start,limit - start,lineStart,lineLimit - lineStart,level,layoutFlags,font,frc,lm);\n  return new ExtendedTextSourceLabel(source,decorator);\n}"}
{"ids": "65276", "raw_code": "public static String rightPad(String s,int minLength,char filling){\n  int ln=s.length();\n  if (minLength <= ln) {\n    return s;\n  }\n  StringBuilder res=new StringBuilder(minLength);\n  res.append(s);\n  int dif=minLength - ln;\n  for (int i=0; i < dif; i++) {\n    res.append(filling);\n  }\n  return res.toString();\n}"}
{"ids": "71847", "raw_code": "private static String readQuotedDescriptor(final SubstringReader reader,final boolean allowCompatChars) throws DecodeException {\n  int length=0;\n  reader.skipWhitespaces();\n  try {\n    char c=reader.read();\n    if (c != '\\'') {\n      throw DecodeException.error(ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1.get(reader.pos() - 1,c));\n    }\n    reader.mark();\n    while ((c=reader.read()) != '\\'') {\n      if (length == 0 && !isAlpha(c)) {\n        throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));\n      }\n      if (!isKeyChar(c,allowCompatChars)) {\n        throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));\n      }\n      length++;\n    }\n    reader.reset();\n    final String descr=reader.read(length);\n    reader.read();\n    return descr;\n  }\n catch (  final StringIndexOutOfBoundsException e) {\n    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());\n  }\n}"}
{"ids": "34498", "raw_code": "public String toCSV(){\n  StringBuilder builder=new StringBuilder();\n  builder.append(\",,Predicted Class,\\n\");\n  builder.append(\",,\");\n  for (  T predicted : classes) {\n    builder.append(String.format(\"%s,\",predicted));\n  }\n  builder.append(\"Total\\n\");\n  String firstColumnLabel=\"Actual Class,\";\n  for (  T actual : classes) {\n    builder.append(firstColumnLabel);\n    firstColumnLabel=\",\";\n    builder.append(String.format(\"%s,\",actual));\n    for (    T predicted : classes) {\n      builder.append(getCount(actual,predicted));\n      builder.append(\",\");\n    }\n    builder.append(getActualTotal(actual));\n    builder.append(\"\\n\");\n  }\n  builder.append(\",Total,\");\n  for (  T predicted : classes) {\n    builder.append(getPredictedTotal(predicted));\n    builder.append(\",\");\n  }\n  builder.append(\"\\n\");\n  return builder.toString();\n}"}
{"ids": "5913", "raw_code": "public Object assignIdValue(Object data,Number val,ObjectCache objectCache) throws SQLException {\n  Object idVal=dataPersister.convertIdNumber(val);\n  if (idVal == null) {\n    throw new SQLException(\"Invalid class \" + dataPersister + \" for sequence-id \"+ this);\n  }\n else {\n    assignField(data,idVal,false,objectCache);\n    return idVal;\n  }\n}"}
{"ids": "56387", "raw_code": "public final boolean isOpen(){\n  return closed.get() == false;\n}"}
{"ids": "29517", "raw_code": "public static String soapToString(SOAPElement element){\n  return domToString(element.getOwnerDocument());\n}"}
{"ids": "64214", "raw_code": "@Override public void close() throws IOException {\n  try {\n    out.close();\n  }\n  finally {\n    lockFile.delete();\n  }\n}"}
{"ids": "30276", "raw_code": "@Override public boolean equals(Object x,Object y) throws HibernateException {\n  if (x == null) {\n    return y == null;\n  }\n  return x.equals(y);\n}"}
{"ids": "12798", "raw_code": "@Override public final void writeBoolean(boolean v) throws IOException {\n  dis.writeBoolean(v);\n}"}
{"ids": "72990", "raw_code": "public void train(Set<String> sFileNames){\n  Iterator<String> iFile=sFileNames.iterator();\n  while (iFile.hasNext()) {\n    String sText=utils.loadFileToString(iFile.next());\n    train(sText);\n  }\n}"}
{"ids": "12738", "raw_code": "public PrintfFormat(String fmtArg) throws IllegalArgumentException {\n  this(Locale.getDefault(),fmtArg);\n}"}
{"ids": "67253", "raw_code": "public static void writeFixInt32(final OutputStream output,final int val) throws IOException {\n  output.write((val >>> 24) & 0xFF);\n  output.write((val >>> 16) & 0xFF);\n  output.write((val >>> 8) & 0xFF);\n  output.write(val & 0xFF);\n}"}
{"ids": "30150", "raw_code": "public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){\n  QueuedCube key=new QueuedCube(x,y,z,world);\n  AsyncCubeIOProvider task=cubeTasks.get(key);\n  if (task == null) {\n    task=new AsyncCubeIOProvider(key,loader);\n    task.addCallback(runnable);\n    cubeTasks.put(key,task);\n    pool.execute(task);\n  }\n else {\n    task.addCallback(runnable);\n  }\n  Column loadedColumn;\n  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {\n    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);\n  }\n else {\n    task.setColumn(loadedColumn);\n  }\n}"}
{"ids": "39846", "raw_code": "public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){\n  if (!enabled) {\n    return false;\n  }\n  if (availableFrom != null && now.before(availableFrom)) {\n    return false;\n  }\n  if (availableTo != null && now.after(availableTo)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "83696", "raw_code": "private long loadLargestMessageId(){\n  ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc();\n  return releaseMessage == null ? 0 : releaseMessage.getId();\n}"}
{"ids": "16787", "raw_code": "public void removeChangeListener(ChangeListener l){\n  if (listeners == null)   return;\n  listeners.remove(l);\n}"}
{"ids": "52560", "raw_code": "public static RequestLog dump(){\n  RequestLog current=RLOG.get();\n  RequestLog copy=new RequestLog(current);\n  current.clear();\n  RLOG.remove();\n  return copy;\n}"}
{"ids": "38346", "raw_code": "protected DefaultListModel stringToModel(String s){\n  DefaultListModel result;\n  String tmpStr;\n  int i;\n  boolean quote;\n  String[] find;\n  String[] replace;\n  int index;\n  result=new DefaultListModel();\n  find=new String[]{\"\\\"\\\"\",\"\\\\n\",\"\\\\r\",\"\\\\t\"};\n  replace=new String[]{\"\\\"\",\"\\n\",\"\\r\",\"\\t\"};\n  for (i=0; i < find.length; i++) {\n    tmpStr=\"\";\n    while (s.length() > 0) {\n      index=s.indexOf(find[i]);\n      if (index > -1) {\n        tmpStr+=s.substring(0,index) + replace[i];\n        s=s.substring(index + 2);\n      }\n else {\n        tmpStr+=s;\n        s=\"\";\n      }\n    }\n    s=tmpStr;\n  }\n  quote=false;\n  tmpStr=\"\";\n  for (i=0; i < s.length(); i++) {\n    if (s.charAt(i) == '\"') {\n      quote=!quote;\n      tmpStr+=\"\" + s.charAt(i);\n    }\n else     if (s.charAt(i) == ',') {\n      if (quote) {\n        tmpStr+=\"\" + s.charAt(i);\n      }\n else {\n        if (tmpStr.startsWith(\"\\\"\")) {\n          tmpStr=tmpStr.substring(1,tmpStr.length() - 1);\n        }\n        result.addElement(tmpStr);\n        tmpStr=\"\";\n      }\n    }\n else {\n      tmpStr+=\"\" + s.charAt(i);\n    }\n  }\n  if (!tmpStr.equals(\"\")) {\n    if (tmpStr.startsWith(\"\\\"\")) {\n      tmpStr=tmpStr.substring(1,tmpStr.length() - 1);\n    }\n    result.addElement(tmpStr);\n  }\n  return result;\n}"}
{"ids": "14444", "raw_code": "public static void resetCurrentFileList(String logName){\n  currentFileList.remove(PREFIX + logName);\n}"}
{"ids": "9104", "raw_code": "public static synchronized ResultSet executeQuery(String sqlStatement){\n  logger.trace(String.format(\"executeQuery( %s ) -->entry\",sqlStatement));\n  ResultSet R=null;\n  final Statement S=getStatement();\n  if (S == null) {\n    logger.error(\"executeQuery() <--exit (error: Statement unavailable)\");\n    return null;\n  }\n  try {\n    R=S.executeQuery(sqlStatement);\n    logger.trace(\"executeQuery() <--exit (normal): \" + (null == R));\n    return R;\n  }\n catch (  Throwable t) {\n    surfaceThrowable(String.format(\"executeQuery( %s )\",sqlStatement),t);\n    cleanup(S,R);\n  }\n  return null;\n}"}
{"ids": "49624", "raw_code": "public static String urlEncode(@Nullable String s){\n  if (s == null) {\n    return \"\";\n  }\n  try {\n    return URLEncoder.encode(s,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new AssertionError(\"UTF-8 should be supported in every JVM\");\n  }\n}"}
{"ids": "36838", "raw_code": "protected static boolean checkRawModulesTables(final CConnection connection,final String databaseName,final int rawModuleId){\n  Preconditions.checkNotNull(connection,\"IE02261: Connection argument can not be null\");\n  Preconditions.checkNotNull(databaseName,\"IE02262: Database name argument can not be null\");\n  Preconditions.checkArgument(rawModuleId > 0,\"Raw module id %s must be a positive integer\",rawModuleId);\n  final ImmutableSet<String> rawTableNames=ImmutableSet.of(String.format(CTableNames.RAW_ADDRESS_COMMENTS_TABLE,rawModuleId),String.format(CTableNames.RAW_ADDRESS_REFERENCES_TABLE,rawModuleId),String.format(CTableNames.RAW_BASE_TYPES,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCK_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCKS_TABLE,rawModuleId),String.format(CTableNames.RAW_CALLGRAPH_TABLE,rawModuleId),String.format(CTableNames.RAW_CONTROL_FLOW_GRAPHS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_SUBSTITUTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREE_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPES_TABLE,rawModuleId),String.format(CTableNames.RAW_FUNCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_OPERANDS_TABLE,rawModuleId),String.format(CTableNames.RAW_SECTIONS,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPE_INSTANCES,rawModuleId),String.format(CTableNames.RAW_TYPE_INSTACES,rawModuleId),String.format(CTableNames.RAW_TYPES,rawModuleId));\n  final Pair<CConnection,String> cacheKey=new Pair<>(connection,databaseName);\n  if (PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames)) {\n    return true;\n  }\n else {\n    if (!PostgreSQLDatabaseFunctions.fillCache(cacheKey)) {\n      return false;\n    }\n    return PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames);\n  }\n}"}
{"ids": "43853", "raw_code": "public static float parseFloat(String s){\n  if (POSITIVE_INFINITY.equals(s)) {\n    return Float.POSITIVE_INFINITY;\n  }\n else   if (NEGATIVE_INFINITY.equals(s)) {\n    return Float.NEGATIVE_INFINITY;\n  }\n else   if (NaN.equals(s)) {\n    return Float.NaN;\n  }\n else {\n    s=trimPlusSign(s);\n    return Float.parseFloat(s);\n  }\n}"}
{"ids": "59546", "raw_code": "public void requestPasswordForShareViaLink(boolean createShare){\n  SharePasswordDialogFragment dialog=SharePasswordDialogFragment.newInstance(mFile,createShare);\n  dialog.show(getFragmentManager(),SharePasswordDialogFragment.PASSWORD_FRAGMENT);\n}"}
{"ids": "24326", "raw_code": "private void forceOutOfMemory(){\n  ArrayList junk=new ArrayList();\n  for (; ; ) {\n    junk.add(new long[100000]);\n  }\n}"}
{"ids": "76121", "raw_code": "@TCB static String stripBannedCodeunits(String s){\n  int safeLimit=longestPrefixOfGoodCodeunits(s);\n  if (safeLimit < 0) {\n    return s;\n  }\n  StringBuilder sb=new StringBuilder(s);\n  stripBannedCodeunits(sb,safeLimit);\n  return sb.toString();\n}"}
{"ids": "36363", "raw_code": "public static void assertLinewiseEquals(String message,String expected,String actual){\n  try (Scanner expectedScanner=new Scanner(expected);Scanner actualScanner=new Scanner(actual)){\n    String expectedLine=null;\n    String actualLine=null;\n    int lineCounter=1;\n    while (expectedScanner.hasNextLine()) {\n      expectedLine=expectedScanner.nextLine();\n      if (actualScanner.hasNextLine()) {\n        actualLine=actualScanner.nextLine();\n      }\n else {\n        fail(\"Line \" + lineCounter + \": actual input has less lines then expected result! Expected: \"+ expectedLine);\n      }\n      assertEquals(\"Line \" + lineCounter + \": \"+ message+ \"\\n\\nExpected:\\n\"+ expected+ \"\\nActual:\\n\"+ actual,expectedLine,actualLine);\n      ++lineCounter;\n    }\n  }\n }"}
{"ids": "68392", "raw_code": "private void warning(String msg,Throwable th){\n  warning(msg);\n  th.printStackTrace();\n}"}
{"ids": "79974", "raw_code": "public String fullForm(final String str,final String lowString){\n  String ret=lowString;\n  PrefixEntry found=prefixMap.get(str);\n  if (found != null) {\n    ret=found.prefixSingular + ret;\n  }\n else {\n    for (    PrefixEntry entry : prefixEndList) {\n      if (str.endsWith(entry.keyword)) {\n        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);\n        break;\n      }\n    }\n  }\n  return ret;\n}"}
{"ids": "71946", "raw_code": "public void clearPasswordExpirationWarnedTime(){\n  operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_EXPIRATION_WARNED_TIME);\n}"}
{"ids": "8433", "raw_code": "public void removeListeners(){\n  if (globalListener != null) {\n    try {\n      InvokerHelper.invokeMethod(currentObject,\"removePropertyChangeListener\",globalListener);\n    }\n catch (    Exception e) {\n    }\n    globalListener=null;\n  }\n  if (localListener != null) {\n    try {\n      InvokerHelper.invokeMethod(currentObject,\"removePropertyChangeListener\",new Object[]{propertyName,localListener});\n    }\n catch (    Exception e) {\n    }\n    localListener=null;\n  }\n  if (syntheticFullBinding != null) {\n    syntheticFullBinding.unbind();\n  }\n}"}
{"ids": "62638", "raw_code": "public static String padLeft(String str,int totalChars){\n  if (str == null)   str=\"null\";\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < totalChars - str.length(); i++) {\n    sb.append(\" \");\n  }\n  sb.append(str);\n  return sb.toString();\n}"}
{"ids": "86638", "raw_code": "public void showScores(boolean flag){\n  mShowScores=flag;\n  SwingUtilities.invokeLater(null);\n}"}
{"ids": "37974", "raw_code": "protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){\n  if (n <= 0) {\n    return getReturnValue(n);\n  }\n  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {\n    return getReturnValue(n);\n  }\n  int adr=0;\n  if (m_useRecursionCache) {\n    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;\n    if (cachekhK[adr % maxCache] == adr + 1) {\n      return cachekh[adr % maxCache];\n    }\n  }\n  double result=0;\n  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);\n  if (m_useRecursionCache) {\n    cachekhK[adr % maxCache]=adr + 1;\n    cachekh[adr % maxCache]=result;\n  }\n  return result;\n}"}
{"ids": "62940", "raw_code": "protected void startRecoarding(){\n  coordinates.clear();\n  enabled=true;\n}"}
{"ids": "66185", "raw_code": "public void addInputMethodListener(InputMethodListener l){\n  m_textPane.addInputMethodListener(l);\n}"}
{"ids": "63201", "raw_code": "public static void load(String url){\n  String driver=getDriver(url);\n  if (driver != null) {\n    loadUserClass(driver);\n  }\n}"}
{"ids": "4594", "raw_code": "protected void putCommand(final Class commandClass,final String[] names){\n  Check.isTrue(names.length > 0,\"names.length > 0\");\n  _commandsToCanonicalNames.put(commandClass,names[0]);\n  for (int i=0; i < names.length; i++) {\n    _aliasesToCommands.put(names[i],commandClass);\n  }\n}"}
{"ids": "33609", "raw_code": "private void SaveGCMData(){\n  try {\n    SharedPreferences preferences=getSharedPreferences();\n    SharedPreferences.Editor editor=preferences.edit();\n    editor.putString(PREFS_PUSHER_APP_ID_KEY,mPusherAppId);\n    editor.putString(PREFS_PUSHER_URL_KEY,mPusherUrl);\n    editor.putString(PREFS_PUSHER_FILE_TAG_KEY,mPusherBaseFileTag);\n    editor.commit();\n  }\n catch (  Exception e) {\n    Log.e(LOG_TAG,\"SaveGCMData failed \" + e.getLocalizedMessage());\n  }\n}"}
{"ids": "82733", "raw_code": "private void paintBackgroundSolid(Graphics2D g,JComponent c,int x,int y,int width,int height){\n  Color color=c.getBackground();\n  if (type == CommonControlState.DISABLED) {\n    color=new Color(color.getRed(),color.getGreen(),color.getBlue(),0x80);\n  }\n  Shape s=shapeGenerator.createRoundRectangle(x - 2,y - 2,width + 4,height + 4,CornerSize.BORDER);\n  g.setPaint(color);\n  g.fill(s);\n  if (isPaintLineSeperators(c)) {\n    paintLineSeparator(g,c,width,height);\n  }\n}"}
{"ids": "14263", "raw_code": "public static void addAttributeDefaultValues(String serviceName,String subSchemaName,String schemaType,String attributeName,Set defaultValues) throws UpgradeException {\n  String classMethod=\"UpgradeUtils:addAttributeDefaultValues : \";\n  if (debug.messageEnabled()) {\n    debug.message(classMethod + \"Updating attribute default values\");\n    debug.message(\"in :\" + serviceName + \"for attribute: \"+ attributeName);\n  }\n  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType);\n  try {\n    Map attributeDefaults=ss.getAttributeDefaults();\n    Set oldAttrValues=(Set)attributeDefaults.get(attributeName);\n    Set newAttrValues=((oldAttrValues == null) || oldAttrValues.isEmpty()) ? new HashSet() : new HashSet(oldAttrValues);\n    newAttrValues.addAll(defaultValues);\n    ss.setAttributeDefaults(attributeName,newAttrValues);\n  }\n catch (  SSOException ssoe) {\n    throw new UpgradeException(\"Invalid SSOToken\");\n  }\ncatch (  SMSException sme) {\n    throw new UpgradeException(\"Failed to add attribute default \" + \"values\");\n  }\n}"}
{"ids": "10325", "raw_code": "public boolean isMetadataModifiedSinceLastPublication(){\n  return metadataModifiedSinceLastPublication;\n}"}
{"ids": "85397", "raw_code": "public Options resourceDirs(List<File> value){\n  resourceDirs.clear();\n  resourceDirs.addAll(value);\n  return this;\n}"}
{"ids": "8083", "raw_code": "private static ClassNode makeType(ClassNode cn,boolean usingClass){\n  if (usingClass) {\n    ClassNode clazzType=CLASS_Type.getPlainNodeReference();\n    clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(cn)});\n    return clazzType;\n  }\n else {\n    return cn;\n  }\n}"}
{"ids": "21412", "raw_code": "protected String toMessage(Map<String,String> results){\n  StringBuilder builder=new StringBuilder();\n  if (results != null) {\n    for (    Map.Entry<String,String> entry : results.entrySet()) {\n      builder.append(entry.getKey() + \": \" + entry.getValue()+ \";\\n\");\n    }\n  }\n  return builder.toString();\n}"}
{"ids": "7292", "raw_code": "public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){\n  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];\n  System.arraycopy(array,0,newArray,0,array.length);\n  int counter=array.length;\n  for (  EventBean eventToAdd : eventsToAdd) {\n    newArray[counter++]=eventToAdd;\n  }\n  return newArray;\n}"}
{"ids": "31374", "raw_code": "private void reflectMemberVariablesInFinalButton(){\n  final boolean lastPageReached=(viewPager.getCurrentItem() + 1) == pages.size();\n  final boolean buttonShouldBeInvisible=!lastPageReached || finalButtonDisabled;\n  final boolean buttonIsCurrentlyInvisible=finalButton.getVisibility() == View.INVISIBLE;\n  final boolean shouldUpdateButton=buttonShouldBeInvisible != buttonIsCurrentlyInvisible;\n  if (shouldUpdateButton) {\n    final Animator buttonAnimator=buttonShouldBeInvisible ? buttonAnimatorFactory.newFinalButtonDisappearAnimator(finalButton) : buttonAnimatorFactory.newFinalButtonAppearAnimator(finalButton);\n    if (buttonShouldBeInvisible) {\n      disableButton(buttonAnimator,finalButton);\n    }\n else {\n      enableButton(buttonAnimator,finalButton);\n    }\n  }\n}"}
{"ids": "9855", "raw_code": "private RelyingParty validateRelyingParty(HttpServletRequest request,String tenantName){\n  Validate.notNull(request,\"request\");\n  Validate.notEmpty(tenantName,\"tenantName\");\n  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();\n  Validate.notNull(idmFactory,\"idmFactory\");\n  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();\n  idmAccessor.setTenant(tenantName);\n  String encodedEntityId=request.getParameter(Shared.RELYINGPARTY_ENTITYID);\n  if (encodedEntityId == null || encodedEntityId.isEmpty()) {\n    logger.error(\"No Relying Party's entity ID found. Ignore the request!\");\n    return null;\n  }\n  String rpEntityId=new String(Base64.decode(encodedEntityId));\n  RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId);\n  if (rp != null) {\n    return rp;\n  }\n else {\n    logger.error(\"Unknown relying party: \" + rpEntityId);\n    return null;\n  }\n}"}
{"ids": "20775", "raw_code": "public void rotateZ(double theta){\n  Matrix3D tmp=new Matrix3D();\n  double c=Math.cos(theta);\n  double s=Math.sin(theta);\n  tmp.set(0,0,c);\n  tmp.set(0,1,-s);\n  tmp.set(1,0,s);\n  tmp.set(1,1,c);\n  preMultiply(tmp);\n}"}
{"ids": "50157", "raw_code": "public ServiceHost startFactory(Service instanceService){\n  final Class<? extends Service> serviceClass=instanceService.getClass();\n  return startFactory(serviceClass,null);\n}"}
{"ids": "4013", "raw_code": "void wakeOut(){\n  OnAvailable outFlow=_outFlow;\n  if (outFlow == null) {\n    return;\n  }\n  if (_creditsIn <= _queue.head()) {\n    return;\n  }\n  StateOutPipe stateOld;\n  StateOutPipe stateNew;\n  do {\n    stateOld=_stateOutRef.get();\n    if (!stateOld.isFull()) {\n      return;\n    }\n    stateNew=stateOld.toWake();\n  }\n while (!_stateOutRef.compareAndSet(stateOld,stateNew));\n  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){\n    Objects.requireNonNull(outbox);\n    PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);\n    outbox.offer(msg);\n  }\n }"}
{"ids": "34958", "raw_code": "public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){\n  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();\n  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {\n    final TypeVariable target=typeParam.getUnderlyingType();\n    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);\n    if (inferredType != null) {\n      assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound()));\n      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType));\n    }\n else {\n      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));\n      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));\n    }\n  }\n  for (  AFConstraint argConstraint : afArgumentConstraints) {\n    if (argConstraint instanceof F2A) {\n      assignmentAfs.add(argConstraint);\n    }\n  }\n  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();\n  for (  AFConstraint afConstraint : assignmentAfs) {\n    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));\n  }\n  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);\n  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));\n  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();\n  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);\n  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);\n  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);\n  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);\n}"}
{"ids": "60479", "raw_code": "public static int columnsNumber(char c,int x,int prevX,int plainSpaceSize){\n  if (c != '\\t') {\n    return 1;\n  }\n  int result=(x - prevX) / plainSpaceSize;\n  if ((x - prevX) % plainSpaceSize > 0) {\n    result++;\n  }\n  return result;\n}"}
{"ids": "78914", "raw_code": "public KafkaMessageListenerContainer(ConsumerFactory<K,V> consumerFactory,ContainerProperties containerProperties,TopicPartitionInitialOffset... topicPartitions){\n  super(containerProperties);\n  Assert.notNull(consumerFactory,\"A ConsumerFactory must be provided\");\n  this.consumerFactory=consumerFactory;\n  if (topicPartitions != null) {\n    this.topicPartitions=Arrays.copyOf(topicPartitions,topicPartitions.length);\n  }\n else {\n    this.topicPartitions=containerProperties.getTopicPartitions();\n  }\n}"}
{"ids": "5075", "raw_code": "public PlaLineInt translate_by(PlaVectorInt p_vector){\n  if (p_vector.equals(PlaVectorInt.ZERO))   return this;\n  PlaPointInt new_a=point_a.translate_by(p_vector);\n  PlaPointInt new_b=point_b.translate_by(p_vector);\n  return new PlaLineInt(new_a,new_b);\n}"}
{"ids": "6362", "raw_code": "@SuppressWarnings(\"all\") final void reject(Runnable command){\n  handler.rejectedExecution(command,this);\n}"}
{"ids": "53814", "raw_code": "private int calculateMenuMargin(){\n  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);\n  Display display=wm.getDefaultDisplay();\n  Point size=new Point();\n  display.getSize(size);\n  int height=size.y;\n  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);\n}"}
{"ids": "63304", "raw_code": "protected byte[] generateSalt(){\n  return HEADER.getBytes(Constants.UTF8);\n}"}
{"ids": "73443", "raw_code": "public void addListener(final ProjectorListener projectorListener){\n  if (listeners == null) {\n    listeners=new ArrayList<ProjectorListener>();\n  }\n  listeners.add(projectorListener);\n}"}
{"ids": "43869", "raw_code": "protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){\n  TupleExpr result=null;\n  if (expressions.size() > 1) {\n    double lowestCardinality=Double.POSITIVE_INFINITY;\n    for (    TupleExpr tupleExpr : expressions) {\n      double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars);\n      if (cardinality < lowestCardinality || result == null) {\n        lowestCardinality=cardinality;\n        result=tupleExpr;\n      }\n    }\n  }\n else {\n    result=expressions.get(0);\n  }\n  return result;\n}"}
{"ids": "67983", "raw_code": "public static void writeBcdNumber(OutputStream os,String number) throws IOException {\n  int bcd=0x00;\n  int n=0;\n  for (int i=0; i < number.length(); i++) {\nswitch (number.charAt(i)) {\ncase '0':\n      bcd|=0x00;\n    break;\ncase '1':\n  bcd|=0x10;\nbreak;\ncase '2':\nbcd|=0x20;\nbreak;\ncase '3':\nbcd|=0x30;\nbreak;\ncase '4':\nbcd|=0x40;\nbreak;\ncase '5':\nbcd|=0x50;\nbreak;\ncase '6':\nbcd|=0x60;\nbreak;\ncase '7':\nbcd|=0x70;\nbreak;\ncase '8':\nbcd|=0x80;\nbreak;\ncase '9':\nbcd|=0x90;\nbreak;\ncase '*':\nbcd|=0xA0;\nbreak;\ncase '#':\nbcd|=0xB0;\nbreak;\ncase 'a':\nbcd|=0xC0;\nbreak;\ncase 'b':\nbcd|=0xE0;\nbreak;\n}\nn++;\nif (n == 2) {\nos.write(bcd);\nn=0;\nbcd=0x00;\n}\n else {\nbcd>>=4;\n}\n}\nif (n == 1) {\nbcd|=0xF0;\nos.write(bcd);\n}\n}"}
{"ids": "59439", "raw_code": "public void addMessage(String message){\n  messages.addLast(message);\n  if (messages.size() > MAX_HISTORY) {\n    messages.removeFirst();\n  }\n  pointer=messages.size();\n}"}
{"ids": "26912", "raw_code": "@VisibleForTesting protected void startExecutor(final int container){\n  LOG.info(\"Starting a new executor for container: \" + container);\n  final Process containerExecutor=startExecutorProcess(container);\n  processToContainer.put(containerExecutor,container);\n  LOG.info(\"Started the executor for container: \" + container);\n  startExecutorMonitor(container,containerExecutor);\n}"}
{"ids": "54163", "raw_code": "public void accept(AbstractReporter r){\n  r.testStart(this);\n  r.browserInfoEntry(browserInfoEntry);\n  Iterator<LogEntry> entryIterator=logEntries.iterator();\n  while (entryIterator.hasNext()) {\n    LogEntry entry=entryIterator.next();\n    if (!entryIterator.hasNext()) {\n      entry.setLast(true);\n    }\n    visit(entry,r);\n  }\n  r.testEnd(this);\n}"}
{"ids": "10334", "raw_code": "private void loadLatestExtensionVersions(){\n  try {\n    List<Extension> all=registryManager.getExtensions();\n    if (!all.isEmpty()) {\n      setLatestExtensionVersions(getLatestVersions(all));\n    }\n  }\n catch (  RegistryException e) {\n    String msg=RegistryException.logRegistryException(e.getType(),this);\n    warnings.addStartupError(msg);\n    LOG.error(msg);\n    msg=getText(\"admin.extensions.couldnt.load\",new String[]{cfg.getRegistryUrl()});\n    warnings.addStartupError(msg);\n    LOG.error(msg);\n  }\n finally {\n    if (getLatestExtensionVersions() == null) {\n      setLatestExtensionVersions(new ArrayList<Extension>());\n    }\n  }\n}"}
{"ids": "55530", "raw_code": "public void cancelAutoCompletion(){\n  if (inCompletion) {\n    textField.setText(textBefore);\n    textField.setCaretPosition(caretPosBefore);\n    prevCompletion=null;\n    prevCompletionIndex=0;\n    inCompletion=false;\n  }\n}"}
{"ids": "30227", "raw_code": "public ClientPropertiesBuilder withProxyHostName(String proxyHostName){\n  properties.setProperty(CLIENT_SERVICE_PROXY_HOST_NAME,proxyHostName);\n  return this;\n}"}
{"ids": "75531", "raw_code": "public static void verifySetterMethods(Class<?> clazz,MappedField... fields){\n  String methodName=null;\n  String fieldName=null;\n  Class<?> fieldType=null;\n  try {\n    for (    MappedField field : fields) {\n      fieldName=field.getName();\n      fieldType=field.getType();\n      String customSet=field.setMethod();\n      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {\n        clazz.getMethod(customSet,fieldType);\n        field.setMethod(customSet);\n        continue;\n      }\n catch (      Exception e) {\n        Error.customMethod(\"set\",customSet,clazz);\n      }\n      methodName=mSet(fieldName);\n      clazz.getMethod(methodName,fieldType);\n      field.setMethod(methodName);\n    }\n  }\n catch (  Exception e) {\n    Error.method(methodName,fieldName,clazz);\n  }\n}"}
{"ids": "30246", "raw_code": "public static Variation attemptToGetAsVariant(String part){\n  try {\n    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());\n    if (var != null) {\n      Variation bv=new Variation();\n      bv.setValue(var.value());\n      return bv;\n    }\n  }\n catch (  Exception e) {\n  }\n  try {\n    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());\n    if (var != null) {\n      Variation bv=new Variation();\n      bv.setValue(var.value());\n      return bv;\n    }\n  }\n catch (  Exception e) {\n  }\n  try {\n    FlowerTypes var=FlowerTypes.fromValue(part);\n    if (var != null) {\n      Variation bv=new Variation();\n      bv.setValue(var.value());\n      return bv;\n    }\n  }\n catch (  Exception e) {\n  }\n  try {\n    EntityTypes var=EntityTypes.fromValue(part);\n    if (var != null) {\n      Variation bv=new Variation();\n      bv.setValue(var.value());\n      return bv;\n    }\n  }\n catch (  Exception e) {\n  }\n  try {\n    MonsterEggTypes var=MonsterEggTypes.fromValue(part);\n    if (var != null) {\n      Variation bv=new Variation();\n      bv.setValue(var.value());\n      return bv;\n    }\n  }\n catch (  Exception e) {\n  }\n  try {\n    ShapeTypes var=ShapeTypes.fromValue(part);\n    if (var != null) {\n      Variation bv=new Variation();\n      bv.setValue(var.value());\n      return bv;\n    }\n  }\n catch (  Exception e) {\n  }\n  try {\n    HalfTypes var=HalfTypes.fromValue(part);\n    if (var != null) {\n      Variation bv=new Variation();\n      bv.setValue(var.value());\n      return bv;\n    }\n  }\n catch (  Exception e) {\n  }\n  return null;\n}"}
{"ids": "84906", "raw_code": "public void resetTextBoxIndexesExcept(Set<Integer> excludedList){\n  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());\n  unusedTextBoxIndexes.removeAll(excludedList);\n  for (  Integer index : unusedTextBoxIndexes) {\n    points.removeTextBox(index);\n  }\n}"}
{"ids": "72505", "raw_code": "public double[] levelZeroData(){\n  List<Buffer> levelZeroBuffers=bufferMap.get(0);\n  int length=0;\n  for (  Buffer buffer : levelZeroBuffers) {\n    if (!buffer.hasCapacity()) {\n      length+=buffer.size;\n    }\n else {\n      length+=buffer.next;\n    }\n  }\n  int pos=0;\n  int currLen;\n  final double[] out=new double[length];\n  for (  Buffer buffer : levelZeroBuffers) {\n    if (!buffer.hasCapacity()) {\n      currLen=buffer.size;\n    }\n else {\n      currLen=buffer.next;\n    }\n    System.arraycopy(buffer.data,0,out,pos,currLen);\n    pos+=currLen;\n  }\n  return out;\n}"}
{"ids": "21423", "raw_code": "public String[] showVersion() throws NetworkDeviceControllerException {\n  String[] returnVal=new String[2];\n  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};\n  StringBuilder buf=new StringBuilder();\n  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(\"MDSDialog.showVersion.cmd\"),10000,prompts,buf);\n  String[] lines=getLines(buf);\n  String[] regex={MDSDialogProperties.getString(\"MDSDialog.showVersion.version.match\"),MDSDialogProperties.getString(\"MDSDialog.showVersion.MDS.match\"),MDSDialogProperties.getString(\"MDSDialog.showVersion.Nexus.match\")};\n  String[] groups=new String[2];\n  for (  String line : lines) {\n    int index=match(line,regex,groups);\nswitch (index) {\ncase 0:\n      returnVal[1]=groups[0];\n    break;\ncase 1:\n  returnVal[0]=groups[0];\nbreak;\ncase 2:\nreturnVal[0]=groups[0];\nbreak;\n}\n}\nreturn returnVal;\n}"}
{"ids": "28713", "raw_code": "public static int countMatches(String string,char c){\n  int n=0;\n  for (  char tc : string.toCharArray()) {\n    if (c == tc)     n++;\n  }\n  return n;\n}"}
{"ids": "55233", "raw_code": "private ImageIcon addColor(ImageIcon icon,Color color){\n  if (icon == null || color == null) {\n    return icon;\n  }\n  BufferedImage newImage=new BufferedImage(icon.getIconWidth(),icon.getIconWidth(),BufferedImage.TYPE_INT_ARGB);\n  Graphics g=newImage.getGraphics();\n  g.setColor(color);\n  g.drawImage(icon.getImage(),0,0,color,null);\n  g.dispose();\n  return new ImageIcon(newImage);\n}"}
{"ids": "15936", "raw_code": "public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {\n  ByteArrayOutputStream buf=new ByteArrayOutputStream();\n  pipeAllLimited(inStr,limit,buf);\n  return buf.toByteArray();\n}"}
{"ids": "363", "raw_code": "protected String searchFor(final String target,String start){\n  return searchFor(target,null,start);\n}"}
{"ids": "32187", "raw_code": "private int validatePreloadOrder(CacheConfiguration[] cfgs) throws IgniteCheckedException {\n  int maxOrder=0;\n  for (  CacheConfiguration cfg : cfgs) {\n    int rebalanceOrder=cfg.getRebalanceOrder();\n    if (rebalanceOrder > 0) {\n      if (cfg.getCacheMode() == LOCAL)       throw new IgniteCheckedException(\"Rebalance order set for local cache (fix configuration and restart the \" + \"node): \" + U.maskName(cfg.getName()));\n      if (cfg.getRebalanceMode() == CacheRebalanceMode.NONE)       throw new IgniteCheckedException(\"Only caches with SYNC or ASYNC rebalance mode can be set as rebalance \" + \"dependency for other caches [cacheName=\" + U.maskName(cfg.getName()) + \", rebalanceMode=\"+ cfg.getRebalanceMode()+ \", rebalanceOrder=\"+ cfg.getRebalanceOrder()+ ']');\n      maxOrder=Math.max(maxOrder,rebalanceOrder);\n    }\n else     if (rebalanceOrder < 0)     throw new IgniteCheckedException(\"Rebalance order cannot be negative for cache (fix configuration and restart \" + \"the node) [cacheName=\" + U.maskName(cfg.getName()) + \", rebalanceOrder=\"+ rebalanceOrder+ ']');\n  }\n  return maxOrder;\n}"}
{"ids": "13425", "raw_code": "public void execute(){\n  mPlayer.setLoopMode(mDoLoop);\n  mThread=new Thread(this,\"Movie Player\");\n  mThread.start();\n}"}
{"ids": "20173", "raw_code": "@Override public void removeEnvVar(EnvVar envVar){\n  if (envVar != null) {\n    envVarList.remove(envVar);\n  }\n}"}
{"ids": "9248", "raw_code": "static private String calcThreshold(double scoreThreshold,double lambda){\n  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);\n  int maxNum=1000000;\n  if (calcLogProb(maxNum,lambda) > logProbThreshold) {\n    return \">1e6\";\n  }\n  int minNum=1;\n  while (minNum < maxNum) {\n    final int midNum=(maxNum + minNum) / 2;\n    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;\n    if (passThreshold) {\n      maxNum=midNum;\n    }\n else {\n      if (midNum == minNum) {\n        break;\n      }\n      minNum=midNum;\n    }\n  }\n  return Integer.toString(maxNum);\n}"}
{"ids": "84534", "raw_code": "private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){\n  Type[] result=bounds;\n  int i=0;\n  for (; i < result.length; i++) {\n    final Type unrolled=unrollVariables(typeArguments,result[i]);\n    if (unrolled == null) {\n      result=ArrayUtils.remove(result,i--);\n    }\n else {\n      result[i]=unrolled;\n    }\n  }\n  return result;\n}"}
{"ids": "22433", "raw_code": "public void deleteQuota(String id) throws IsilonException {\n  delete(_baseUrl.resolve(URI_QUOTAS),id,\"quota\");\n}"}
{"ids": "28423", "raw_code": "public static Map<String,String> createBasicAuthHeader(String username,String password,Map<String,String> headerMap){\n  if (headerMap == null)   headerMap=new HashMap<>();\n  String credentials=username + \":\" + password;\n  String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP);\n  headerMap.put(\"Authorization\",\"Basic \" + base64EncodedCredentials);\n  return headerMap;\n}"}
{"ids": "20221", "raw_code": "private void addExtentEntry(){\n  extentModel.addNewEntry();\n  removeExtentButton.setEnabled(false);\n}"}
{"ids": "69770", "raw_code": "private TransportNetwork checkCached(String networkId){\n  try {\n    String filename=networkId + \"_\" + R5Version.version+ \".dat\";\n    File cacheLocation=new File(cacheDir,networkId + \"_\" + R5Version.version+ \".dat\");\n    if (cacheLocation.exists())     LOG.info(\"Found locally-cached TransportNetwork at {}\",cacheLocation);\n else {\n      LOG.info(\"No locally cached transport network at {}.\",cacheLocation);\n      if (sourceBucket != null) {\n        LOG.info(\"Checking for cached transport network on S3.\");\n        S3Object tn;\n        try {\n          tn=s3.getObject(sourceBucket,filename);\n        }\n catch (        AmazonServiceException ex) {\n          LOG.info(\"No cached transport network was found in S3. It will be built from scratch.\");\n          return null;\n        }\n        cacheDir.mkdirs();\n        LOG.info(\"Copying pre-built transport network from S3 to local file {}\",cacheLocation);\n        FileOutputStream fos=new FileOutputStream(cacheLocation);\n        InputStream is=tn.getObjectContent();\n        try {\n          ByteStreams.copy(is,fos);\n        }\n  finally {\n          is.close();\n          fos.close();\n        }\n      }\n else {\n        LOG.info(\"Transport network was not found\");\n        return null;\n      }\n    }\n    LOG.info(\"Loading cached transport network at {}\",cacheLocation);\n    FileInputStream fis=new FileInputStream(cacheLocation);\n    try {\n      return TransportNetwork.read(fis);\n    }\n  finally {\n      fis.close();\n    }\n  }\n catch (  Exception e) {\n    LOG.error(\"Exception occurred retrieving cached transport network\",e);\n    return null;\n  }\n}"}
{"ids": "74109", "raw_code": "void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {\n  XmlFile xf=new XmlFile(){\n  }\n;\n  xf.rootFromFile(file);\n}"}
{"ids": "6416", "raw_code": "protected void execute(Runnable evt){\n  executor.execute(evt);\n}"}
{"ids": "25429", "raw_code": "private void sendNextMessageOverNetwork() throws Exception {\n  RawData raw=outgoing.take();\n  if (raw == null)   throw new NullPointerException();\n  sendNext(raw);\n}"}
{"ids": "81488", "raw_code": "public void addAttributeFor(final Field field){\n  fieldToUseAsAttribute.add(field);\n}"}
{"ids": "79729", "raw_code": "public boolean isSessionToken(String token){\nsynchronized (sessionTokens) {\n    return sessionTokens.contains(token);\n  }\n}"}
{"ids": "62660", "raw_code": "public static double rootMeansSquaredError(double[] real,double[] predicted){\n  double ret=0.0;\n  for (int i=0; i < real.length; i++) {\n    ret+=Math.pow((real[i] - predicted[i]),2);\n  }\n  return Math.sqrt(ret / real.length);\n}"}
{"ids": "59629", "raw_code": "public void export(ByteBuffer buf){\n  buf.putInt(seqId);\n  if (info.isRowBlockEnabled())   buf.putInt(nRows);\n  export(primaryKey,buf);\n  for (  ByteArray cb : cellBlocks) {\n    export(cb,buf);\n  }\n}"}
{"ids": "30394", "raw_code": "private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){\n  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();\n  accountdetailmap.put(VoucherConstant.GLCODE,glcode);\n  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);\n  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);\n  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());\n  return accountdetailmap;\n}"}
{"ids": "38325", "raw_code": "private void updateRadioLinks(){\n  m_advanceDataSetFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());\n  m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());\n  if (m_Exp != null) {\n    if (!m_GeneratorPropertyPanel.getEditorActive()) {\n      m_Exp.setAdvanceDataSetFirst(true);\n    }\n else {\n      m_Exp.setAdvanceDataSetFirst(m_advanceDataSetFirst.isSelected());\n    }\n  }\n}"}
{"ids": "42061", "raw_code": "public static byte[] select(String appId,String suffix){\n  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;\n  return select(cardletAid);\n}"}
{"ids": "51850", "raw_code": "public List<Properties> findAvailableProperties(String uri) throws IOException {\n  _resourcesNotLoaded.clear();\n  String fulluri=_path + uri;\n  List<Properties> properties=new ArrayList<>();\n  Enumeration<URL> resources=getResources(fulluri);\n  while (resources.hasMoreElements()) {\n    URL url=resources.nextElement();\n    try {\n      Properties props=loadProperties(url);\n      properties.add(props);\n    }\n catch (    Exception notAvailable) {\n      _resourcesNotLoaded.add(url.toExternalForm());\n    }\n  }\n  return properties;\n}"}
{"ids": "35313", "raw_code": "void internalAddRootEntry(ProjectComparisonEntry entry){\n  entries.add(entry);\n}"}
{"ids": "70746", "raw_code": "public static Source fromURL(URL url,Charset cs) throws IOException {\n  URI uri;\n  try {\n    uri=url.toURI();\n  }\n catch (  URISyntaxException e) {\n    throw new IOException(\"Illegal URI\",e);\n  }\n  try (InputStream is=url.openStream()){\n    return fromStream(is,uri,cs);\n  }\n }"}
{"ids": "66838", "raw_code": "public RE extractRE() throws InterruptedException {\n  arden();\n  if (!coeffs.isEmpty()) {\n    throw new RuntimeException(\"production still has free variables\");\n  }\n  return unionREs(terms);\n}"}
{"ids": "14588", "raw_code": "public void addResult(AMIdentity id,Map attrs){\n  searchResults.add(id);\n  resultsMap.put(id,attrs);\n}"}
{"ids": "60306", "raw_code": "public <T extends IntentionAction & LocalQuickFix>void registerBatchFix(@NotNull T fix,@Nullable TextRange range,@Nullable final HighlightDisplayKey key){\n  if (range == null) {\n    range=new TextRange(myStartOffset,myEndOffset);\n  }\n  if (myBatchFixes == null) {\n    myBatchFixes=new ArrayList<QuickFixInfo>();\n  }\n  myBatchFixes.add(new QuickFixInfo(fix,range,key));\n}"}
{"ids": "33219", "raw_code": "protected void createFile(ZipEntry entry){\n  IPath pathname=new Path(entry.getName());\n  ZipEntry parent;\n  if (pathname.segmentCount() == 1) {\n    parent=root;\n  }\n else {\n    parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));\n  }\n  addToChildren(parent,entry);\n}"}
{"ids": "35219", "raw_code": "@Override public String dumpWindowHierarchy(boolean compressed){\n  device.setCompressedLayoutHeirarchy(compressed);\n  try {\n    ByteArrayOutputStream os=new ByteArrayOutputStream();\n    device.dumpWindowHierarchy(os);\n    os.close();\n    return os.toString(\"UTF-8\");\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    device.setCompressedLayoutHeirarchy(false);\n  }\n  return null;\n}"}
{"ids": "68906", "raw_code": "public void registerObserver(RuleChangesObserver observer){\n  observers.add(observer);\n}"}
{"ids": "3896", "raw_code": "private void sendUpdateHeartbeats(){\n  HeartbeatServiceLocal heartbeat=_bartender.getHeartbeatLocal();\n  if (heartbeat != null) {\n    heartbeat.updateHeartbeats();\n  }\n}"}
{"ids": "70030", "raw_code": "public SSLEngine initSslEngine(boolean client) throws Exception {\n  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());\n  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));\n  KeyStore trustStore;\n  if (properties.sslTrustStorePath() != null) {\n    LOGGER.debug(\"Using separate trust store\");\n    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());\n  }\n else {\n    trustStore=keyStore;\n    LOGGER.debug(\"Using key store as trust store\");\n  }\n  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n  trustManagerFactory.init(trustStore);\n  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();\n  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();\n  SSLContext sslContext=SSLContext.getInstance(\"TLS\");\n  sslContext.init(keyManagers,trustManagers,null);\n  SSLEngine sslEngine=sslContext.createSSLEngine();\n  sslEngine.setUseClientMode(client);\n  sslEngine.setWantClientAuth(true);\n  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());\n  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());\n  sslEngine.setEnableSessionCreation(true);\n  return sslEngine;\n}"}
{"ids": "85251", "raw_code": "public GetBufferedRandomAccessSource(IRandomAccessSource source){\n  this.source=source;\n  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];\n  this.getBufferStart=-1;\n  this.getBufferEnd=-1;\n}"}
{"ids": "11041", "raw_code": "public ArgParser(String pName){\n  programName=pName;\n  args=new Vector();\n  args.add(new HelpArg());\n}"}
{"ids": "38671", "raw_code": "public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {\n  Vector<Object> v=new Vector<Object>();\n  v.add(model);\n  if (header != null) {\n    v.add(header);\n  }\n  v.trimToSize();\n  XStream.write(saveTo.getAbsolutePath(),v);\n}"}
{"ids": "48497", "raw_code": "private void sortAndCollapse(){\n  Collections.sort(mSpans);\n  mAddsSinceSort=0;\n  Iterator iter=mSpans.iterator();\n  Span span=null;\n  if (iter.hasNext()) {\n    span=(Span)iter.next();\n  }\n  while (iter.hasNext()) {\n    Span nextSpan=(Span)iter.next();\n    if (span.subsume(nextSpan)) {\n      iter.remove();\n    }\n else {\n      span=nextSpan;\n    }\n  }\n}"}
{"ids": "52930", "raw_code": "public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){\n  final int nele=end - begin;\n  DBIDArrayIter it=ind.iter();\n  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele)));\n  int minInd=begin, maxInd=end - 1;\n  while (minInd < maxInd) {\n    double currEle=tpro.doubleValue(it.seek(minInd));\n    if (currEle > rs) {\n      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {\n        maxInd--;\n      }\n      if (minInd == maxInd) {\n        break;\n      }\n      ind.swap(minInd,maxInd);\n      maxInd--;\n    }\n    minInd++;\n  }\n  if (minInd == end - 1) {\n    minInd=(begin + end) >>> 1;\n  }\n  return minInd;\n}"}
{"ids": "15383", "raw_code": "public LoginConfiguration forceAuth(String forceAuthReqParam){\n  forceAuth=Boolean.parseBoolean(forceAuthReqParam);\n  return this;\n}"}
{"ids": "19892", "raw_code": "@MethodDesc(description=\"Stops the replicator service\",usage=\"stop\") public void stop() throws Exception {\n  try {\n    handleEventSynchronous(new StopEvent());\n    if (doneLatch != null) {\n      doneLatch.countDown();\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"Stop operation failed\",e);\n    throw new Exception(e.toString());\n  }\n}"}
{"ids": "50435", "raw_code": "public String linkForMessage(ProtoElement element){\n  if (isExternalFile(element.getFile())) {\n    String fullName=element.getFullName();\n    return String.format(\"[%s]{@link external:\\\"%s\\\"}\",fullName,fullName);\n  }\n else {\n    String simpleName=element.getSimpleName();\n    return String.format(\"[%s]{@link %s}\",simpleName,simpleName);\n  }\n}"}
{"ids": "4888", "raw_code": "public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {\n  Scanner scanner=new Scanner(fileStream,charsetName);\n  ArrayList<T> list=new ArrayList<>();\n  while (scanner.hasNextLine()) {\n    String line=scanner.nextLine();\n    list.add(transformer.transform(line));\n  }\n  scanner.close();\n  return list;\n}"}
{"ids": "28559", "raw_code": "public boolean remove(JsonElement element){\n  return elements.remove(element);\n}"}
{"ids": "69604", "raw_code": "public TSink<byte[]> sendBytes(TStream<byte[]> stream){\n  Objects.requireNonNull(stream,\"stream\");\n  return sendBinary(stream,null);\n}"}
{"ids": "64299", "raw_code": "private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){\n  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));\n}"}
{"ids": "14159", "raw_code": "protected boolean needToEscapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){\n  return true;\n}"}
{"ids": "76324", "raw_code": "private void updatePathConstraints(TestChromosome test){\n  List<BranchCondition> pathCondition=ConcolicExecution.getSymbolicPath(test);\n  pathConditions.put(test,pathCondition);\n}"}
{"ids": "31948", "raw_code": "public static boolean p2pLoader(ClassLoader ldr){\n  return ldr instanceof GridDeploymentInfo;\n}"}
{"ids": "44424", "raw_code": "private static String removeSubTrailers(String decodedSubject){\n  int subStringStart=0;\n  int subStringEnd=decodedSubject.length();\n  int originalSize=decodedSubject.length();\n  int curPos=originalSize - 1;\n  while (true) {\n    char c=decodedSubject.charAt(curPos--);\n    if (c == WS) {\n      subStringEnd--;\n    }\n else {\n      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {\n        subStringEnd-=FWD_PARENS.length();\n      }\n      break;\n    }\n  }\n  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);\n  return decodedSubject;\n}"}
{"ids": "86813", "raw_code": "boolean nextSource() throws IOException {\n  if (mSourceIt.hasNext()) {\n    final InputStream is=mSourceIt.next();\n    if (is == null) {\n      mSource=null;\n      return false;\n    }\n else {\n      mSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE);\n    }\n    mSourceClosed=false;\n    mInputBufferPosition=0;\n    mInputBufferLength=0;\n    mBufferLength=0;\n    mBufferPosition=0;\n    return true;\n  }\n  if (mSource != null) {\n    mSource.close();\n  }\n  mSource=null;\n  return false;\n}"}
{"ids": "40065", "raw_code": "public static byte[] bitmapToBytes(Bitmap bm){\n  byte[] bytes=null;\n  if (bm != null) {\n    ByteArrayOutputStream baos=new ByteArrayOutputStream();\n    bm.compress(Bitmap.CompressFormat.PNG,100,baos);\n    bytes=baos.toByteArray();\n  }\n  return bytes;\n}"}
{"ids": "67663", "raw_code": "public static String inflate(String name){\n  return inflate(name,gPrefix);\n}"}
{"ids": "40616", "raw_code": "private void writeAttr(String name,String val) throws IOException {\n  writeAttr(name,val,true);\n}"}
{"ids": "46206", "raw_code": "final private String syntaxDef2SyntaxDesc(Attributes attrs) throws NamingException {\n  StringBuffer syntaxDesc=new StringBuffer(\"( \");\n  Attribute attr=null;\n  int count=0;\n  attr=attrs.get(NUMERICOID_ID);\n  if (attr != null) {\n    syntaxDesc.append(writeNumericOID(attr));\n    count++;\n  }\n else {\n    throw new ConfigurationException(\"Attribute type doesn't\" + \"have a numeric OID\");\n  }\n  attr=attrs.get(DESC_ID);\n  if (attr != null) {\n    syntaxDesc.append(writeQDString(attr));\n    count++;\n  }\n  if (count < attrs.size()) {\n    String attrId=null;\n    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {\n      attr=ae.next();\n      attrId=attr.getID();\n      if (attrId.equals(NUMERICOID_ID) || attrId.equals(DESC_ID)) {\n        continue;\n      }\n else {\n        syntaxDesc.append(writeQDStrings(attr));\n      }\n    }\n  }\n  syntaxDesc.append(\")\");\n  return syntaxDesc.toString();\n}"}
{"ids": "3634", "raw_code": "@Override public void write(Buffer buffer,boolean isEnd) throws IOException {\n  if (_s == null) {\n    buffer.free();\n    return;\n  }\n  try {\n    _needsFlush=true;\n    if (buffer.isDirect()) {\n      _totalWriteBytes+=buffer.length();\n      _s.write(buffer.direct());\n      return;\n    }\n    _totalWriteBytes+=buffer.length();\n    while (buffer.length() > 0) {\n      _writeBuffer.clear();\n      buffer.read(_writeBuffer);\n      _writeBuffer.flip();\n      _s.write(_writeBuffer);\n    }\n  }\n catch (  IOException e) {\n    IOException exn=ClientDisconnectException.create(this + \":\" + e,e);\n    try {\n      close();\n    }\n catch (    IOException e1) {\n    }\n    throw exn;\n  }\n finally {\n    buffer.free();\n  }\n}"}
{"ids": "7173", "raw_code": "protected void recursiveNestedJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] currentPath,Collection<EventBean[]> result,ExprEvaluatorContext exprEvaluatorContext){\n  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();\n  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);\n  nestedExecNode.process(lookupEvent,currentPath,nestedResult,exprEvaluatorContext);\n  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);\n  if (!isLastStream) {\n    for (    EventBean[] row : nestedResult) {\n      EventBean lookup=row[nestedStreams[nestingOrderIndex]];\n      recursiveNestedJoin(lookup,nestingOrderIndex + 1,row,result,exprEvaluatorContext);\n    }\n    return;\n  }\n  for (  EventBean[] row : nestedResult) {\n    result.add(row);\n  }\n}"}
{"ids": "83402", "raw_code": "public String generateMinimalMATSimConfig(){\n  Config config=new Config();\n  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);\n  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);\n  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,\"tRue\");\n  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);\n  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);\n  String[] str={\"car\",\"pt\"};\n  changeModeConfig.setModes(str);\n  return writeConfigFile(config);\n}"}
{"ids": "46416", "raw_code": "private int convertLocationToColumn(int x,int y){\n  if (cellWidth > 0) {\n    if (layoutOrientation == JList.VERTICAL) {\n      return 0;\n    }\n    Insets insets=list.getInsets();\n    int col;\n    if (isLeftToRight) {\n      col=(x - insets.left) / cellWidth;\n    }\n else {\n      col=(list.getWidth() - x - insets.right- 1) / cellWidth;\n    }\n    if (col < 0) {\n      return 0;\n    }\n else     if (col >= columnCount) {\n      return columnCount - 1;\n    }\n    return col;\n  }\n  return 0;\n}"}
{"ids": "85025", "raw_code": "public static List<File> findFilesInDir(File directory,FilenameFilter filter){\n  Vector<File> files=new Vector<File>();\n  File[] entries=directory.listFiles();\n  for (  File entry : entries) {\n    if (filter == null || filter.accept(directory,entry.getName())) {\n      files.add(entry);\n    }\n    if (entry.isDirectory()) {\n      files.addAll(findFilesInDir(entry,filter));\n    }\n  }\n  return files;\n}"}
{"ids": "78428", "raw_code": "public String generateDrop(String table){\n  StringBuffer result=new StringBuffer();\n  result.append(\"DROP TABLE \");\n  result.append(table);\n  result.append(\";\\n\");\n  return result.toString();\n}"}
{"ids": "80990", "raw_code": "private void registerChildListeners(){\n  Iterator<PropertyChangeListener> iter=fChildListeners.iterator();\n  while (iter.hasNext()) {\n    PropertyChangeListener listener=iter.next();\n    listener.register();\n  }\n}"}
{"ids": "52485", "raw_code": "private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){\n  try {\n    for (    DimensionField field : dimension.getDimensionFields()) {\n      if (field == dimension.getKey()) {\n        continue;\n      }\n      if (dimensionRowOld != null) {\n        String oldRowValue=dimensionRowOld.get(field);\n        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);\n        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);\n        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);\n        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));\n        oldRowValuesKeySet.remove(rowId);\n        if (oldRowValuesKeySet.isEmpty()) {\n          keyValueStore.remove(oldRowValueKey);\n        }\n else {\n          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);\n          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);\n        }\n      }\n      String rowValue=dimensionRow.get(field);\n      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);\n      String rowValueSKeys=keyValueStore.get(rowValueKey);\n      Set<String> rowValueSKeySet=new LinkedHashSet<>();\n      if (rowValueSKeys != null) {\n        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));\n      }\n      rowValueSKeySet.add(rowId);\n      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);\n      keyValueStore.put(rowValueKey,updatedRowValueSKeys);\n    }\n  }\n catch (  IOException e) {\n    LOG.error(\"Exception while adding dimension description entry in key value store : {}\",e);\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "67462", "raw_code": "public List<Instruction> reduceInstructions(final List<Instruction> instructions){\n  lock.lock();\n  try {\n    this.instructions=instructions;\n    stackSizeSimulator.buildStackSizes(instructions);\n    return reduceInstructionsInternal(instructions);\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "32110", "raw_code": "protected boolean isLockedLocally(UUID newOwnerID){\n  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);\n}"}
{"ids": "11144", "raw_code": "public void deletePoint(int position){\n  int renderType=poly.getRenderType();\n  Projection proj=getProjection();\n  boolean needToHookUp=false;\n  if (position <= 0 && isEnclosed()) {\n    enclose(false);\n    needToHookUp=true;\n  }\n  if (renderType == OMGraphic.RENDERTYPE_LATLON) {\n    Debug.message(\"eomg\",\"EditableOMPoly: removing point from lat/lon poly\");\n    if (proj != null) {\n      double[] ll=poly.getLatLonArray();\n      double[] newll=new double[ll.length - 2];\n      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);\n      if (actualPosition >= ll.length) {\n        System.arraycopy(ll,0,newll,0,ll.length - 2);\n        position=(ll.length - 2) / 2;\n      }\n else       if (actualPosition <= 0) {\n        System.arraycopy(ll,2,newll,0,ll.length - 2);\n        position=0;\n      }\n else {\n        System.arraycopy(ll,0,newll,0,actualPosition);\n        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);\n      }\n      poly.setLocation(newll,poly.getUnits());\n    }\n  }\n else {\n    Debug.message(\"eomg\",\"EditableOMPoly: removing point from x/y or offset poly\");\n    int currentLength=poly.xs.length;\n    int[] newxs=new int[currentLength - 1];\n    int[] newys=new int[currentLength - 1];\n    if (position >= currentLength) {\n      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);\n      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);\n      position=currentLength - 1;\n    }\n else     if (position <= 0) {\n      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);\n      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);\n      position=0;\n    }\n else {\n      System.arraycopy(poly.xs,0,newxs,0,position);\n      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);\n      System.arraycopy(poly.ys,0,newys,0,position);\n      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);\n    }\n    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {\n      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);\n    }\n else {\n      poly.setLocation(newxs,newys);\n    }\n  }\n  if (proj != null) {\n    poly.regenerate(proj);\n  }\n  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);\n  if (gpo != null && gp != null) {\n    gpo.removeGrabPoint(gp);\n  }\n  if (needToHookUp) {\n    enclose(true);\n  }\n}"}
{"ids": "57315", "raw_code": "@Override public boolean deleteLeftWord(){\n  mInputConnection.beginBatchEdit();\n  if (mInputConnection.getSelectedText(0) != null) {\n    mInputConnection.commitText(\"\",0);\n  }\n else {\n    CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);\n    if (beforeCursor != null) {\n      int beforeCursorLength=beforeCursor.length();\n      Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor);\n      int lastIndex=0;\n      while (m.find()) {\n        lastIndex=beforeCursorLength == m.end() ? m.start() : m.end();\n      }\n      if (lastIndex > 0) {\n        mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0);\n      }\n else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) {\n        mInputConnection.deleteSurroundingText(beforeCursorLength,0);\n      }\n    }\n  }\n  mInputConnection.endBatchEdit();\n  return true;\n}"}
{"ids": "52022", "raw_code": "public static DataSet readContinuous(File file,char delimiter) throws IOException {\n  return readInContinuousData(file,delimiter,Collections.singleton(\"MULT\"));\n}"}
{"ids": "46645", "raw_code": "protected boolean arePathsContiguous(TreePath[] paths){\n  if (rowMapper == null || paths.length < 2)   return true;\n else {\n    BitSet bitSet=new BitSet(32);\n    int anIndex, counter, min;\n    int pathCount=paths.length;\n    int validCount=0;\n    TreePath[] tempPath=new TreePath[1];\n    tempPath[0]=paths[0];\n    min=rowMapper.getRowsForPaths(tempPath)[0];\n    for (counter=0; counter < pathCount; counter++) {\n      if (paths[counter] != null) {\n        tempPath[0]=paths[counter];\n        int[] rows=rowMapper.getRowsForPaths(tempPath);\n        if (rows == null) {\n          return false;\n        }\n        anIndex=rows[0];\n        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;\n        if (anIndex < min)         min=anIndex;\n        if (!bitSet.get(anIndex)) {\n          bitSet.set(anIndex);\n          validCount++;\n        }\n      }\n    }\n    int maxCounter=validCount + min;\n    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;\n  }\n  return true;\n}"}
{"ids": "82855", "raw_code": "static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){\n  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();\n  Color color=c.getCaretColor();\n  if (color == null || color instanceof UIResource) {\n    c.setCaretColor((Color)style.get(context,prefix + \".caretForeground\"));\n  }\n  Color fg=c.getForeground();\n  if (fg == null || fg instanceof UIResource) {\n    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);\n    if (fg != null) {\n      c.setForeground(fg);\n    }\n  }\n  Object ar=style.get(context,prefix + \".caretAspectRatio\");\n  if (ar instanceof Number) {\n    c.putClientProperty(\"caretAspectRatio\",ar);\n  }\n  context.setComponentState(SELECTED | FOCUSED);\n  Color s=c.getSelectionColor();\n  if (s == null || s instanceof UIResource) {\n    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));\n  }\n  Color sfg=c.getSelectedTextColor();\n  if (sfg == null || sfg instanceof UIResource) {\n    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));\n  }\n  context.setComponentState(DISABLED);\n  Color dfg=c.getDisabledTextColor();\n  if (dfg == null || dfg instanceof UIResource) {\n    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));\n  }\n  Insets margin=c.getMargin();\n  if (margin == null || margin instanceof UIResource) {\n    margin=(Insets)style.get(context,prefix + \".margin\");\n    if (margin == null) {\n      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;\n    }\n    c.setMargin(margin);\n  }\n  Caret caret=c.getCaret();\n  if (caret instanceof UIResource) {\n    Object o=style.get(context,prefix + \".caretBlinkRate\");\n    if (o != null && o instanceof Integer) {\n      Integer rate=(Integer)o;\n      caret.setBlinkRate(rate.intValue());\n    }\n  }\n}"}
{"ids": "65171", "raw_code": "@SuppressLint(\"DrawAllocation\") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  int widthMode=MeasureSpec.getMode(widthMeasureSpec);\n  int heightMode=MeasureSpec.getMode(heightMeasureSpec);\n  int maxWidth=MeasureSpec.getSize(widthMeasureSpec);\n  int maxHeight=MeasureSpec.getSize(heightMeasureSpec);\n  if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE;\n  if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE;\n  int paddingLeft=getPaddingLeft();\n  int paddingTop=getPaddingTop();\n  int paddingRight=getPaddingRight();\n  int paddingBottom=getPaddingBottom();\n  int maxRightBound=maxWidth - paddingRight;\n  int maxBottomBound=maxHeight - paddingBottom;\n  int left;\n  int top;\n  int right;\n  int bottom;\n  int rightBound=paddingLeft;\n  int maxRightNoPadding=rightBound;\n  int bottomBound;\n  int lastMaxBottom=paddingTop;\n  int maxBottom=lastMaxBottom;\n  int childWidth;\n  int childHeight;\n  int lineStartIndex=0;\n  int lineEndIndex=0;\n  rectList.clear();\n  int childCount=getChildCount();\n  for (int index=0; index < childCount; index++) {\n    final View child=getChildAt(index);\n    child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);\n    if (child.getVisibility() == View.GONE)     continue;\n    final AutoWrapLayout.LayoutParams lp=(AutoWrapLayout.LayoutParams)child.getLayoutParams();\n    childWidth=child.getMeasuredWidth();\n    childHeight=child.getMeasuredHeight();\n    left=rightBound + lp.leftMargin;\n    right=left + childWidth;\n    rightBound=right + lp.rightMargin;\n    if (rightBound > maxRightBound) {\n      lineEndIndex=index;\n      adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex);\n      if (maxBottom >= maxBottomBound)       break;\n      if (lineEndIndex == lineStartIndex) {\n        child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED);\n        childWidth=child.getMeasuredWidth();\n        childHeight=child.getMeasuredHeight();\n      }\n      left=paddingLeft + lp.leftMargin;\n      right=left + childWidth;\n      rightBound=right + lp.rightMargin;\n      lastMaxBottom=maxBottom;\n      top=lastMaxBottom + lp.topMargin;\n      bottom=top + childHeight;\n      bottomBound=bottom + lp.bottomMargin;\n      lineStartIndex=index;\n    }\n else {\n      top=lastMaxBottom + lp.topMargin;\n      bottom=top + childHeight;\n      bottomBound=bottom + lp.bottomMargin;\n    }\n    if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound;\n    if (bottomBound > maxBottom)     maxBottom=bottomBound;\n    Rect rect=new Rect();\n    rect.left=left;\n    rect.top=top;\n    rect.right=right;\n    rect.bottom=bottom;\n    rectList.add(rect);\n  }\n  adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size());\n  int measuredWidth;\n  int measuredHeight;\n  if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth;\n else   measuredWidth=maxRightNoPadding + paddingRight;\n  if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight;\n else {\n    measuredHeight=maxBottom + paddingBottom;\n    if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight;\n  }\n  setMeasuredDimension(measuredWidth,measuredHeight);\n}"}
{"ids": "82457", "raw_code": "public final void wait() throws java.lang.InterruptedException {\n  wait(0);\n}"}
{"ids": "56378", "raw_code": "public QueryStringQueryBuilder field(String field,float boost){\n  if (fields == null) {\n    fields=new ArrayList<>();\n  }\n  fields.add(field);\n  if (fieldsBoosts == null) {\n    fieldsBoosts=new ObjectFloatHashMap<>();\n  }\n  fieldsBoosts.put(field,boost);\n  return this;\n}"}
{"ids": "44388", "raw_code": "protected void initStreamBufferSize(){\n  String streamBufferSizeParam=getInitParameter(\"streamBufferSize\");\n  setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam));\n  if (isDebug()) {\n    log(\"streamBufferSize: \" + getStreamBufferSize());\n  }\n}"}
{"ids": "53997", "raw_code": "public static Number asNumber(String value,Supplier<Number> defaultValueProvider){\n  if (value != null) {\n    try {\n      return Short.valueOf(value);\n    }\n catch (    NumberFormatException e1) {\n      try {\n        return Integer.valueOf(value);\n      }\n catch (      NumberFormatException e2) {\n        try {\n          return Long.valueOf(value);\n        }\n catch (        NumberFormatException e3) {\n          try {\n            return Float.valueOf(value);\n          }\n catch (          NumberFormatException e4) {\n            try {\n              return Double.valueOf(value);\n            }\n catch (            NumberFormatException e5) {\n              try {\n                return new BigInteger(value);\n              }\n catch (              NumberFormatException e6) {\n                try {\n                  return new BigDecimal(value);\n                }\n catch (                NumberFormatException e7) {\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return defaultValueProvider != null ? defaultValueProvider.get() : null;\n}"}
{"ids": "14344", "raw_code": "private String applyReplacement(final BidiMap replacement,String contents){\n  for (  Object key : replacement.keySet()) {\n    String attributeName=(String)key;\n    String attributeInitials=(String)replacement.get(key);\n    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));\n  }\n  return contents;\n}"}
{"ids": "46328", "raw_code": "public KeyImpl(KerberosPrincipal principal,char[] password,String algorithm){\n  try {\n    PrincipalName princ=new PrincipalName(principal.getName());\n    EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm);\n    this.keyBytes=key.getBytes();\n    this.keyType=key.getEType();\n  }\n catch (  KrbException e) {\n    throw new IllegalArgumentException(e.getMessage());\n  }\n}"}
{"ids": "81347", "raw_code": "public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){\n  int count=0;\n  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;\n  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;\n  if (count == 0)   return recordedAnnotations;\n  int index=recordedAnnotations.length;\n  AnnotationBinding[] result=new AnnotationBinding[index + count];\n  System.arraycopy(recordedAnnotations,0,result,0,index);\n  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);\n  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);\n  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);\n  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);\n  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);\n  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);\n  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);\n  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);\n  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);\n  return result;\n}"}
{"ids": "66743", "raw_code": "public static void process(List<Packages> pkgList) throws Exception {\n  init();\n  String[] temps=templates.split(\",\");\n  String[] vmFiles=new String[temps.length];\n  for (int i=0; i < temps.length; i++) {\n    vmFiles[i]=temps[i] + \".vm\";\n  }\n  for (  Packages pkg : pkgList) {\n    for (    String vmFile : vmFiles) {\n      generator(vmFile,pkg);\n    }\n  }\n}"}
{"ids": "80294", "raw_code": "public boolean check(final Direction dir,final boolean facing){\n  if (this.dir != dir) {\n    return false;\n  }\n  if (this.facing != facing) {\n    return false;\n  }\n  final long now=System.currentTimeMillis();\n  if (now >= expiration) {\n    return false;\n  }\n  expiration=now + DELAY;\n  return true;\n}"}
{"ids": "31340", "raw_code": "private void parse(String path) throws Exception {\n  if (path != null) {\n    count=path.length();\n    data=new char[count];\n    path.getChars(0,count,data,0);\n  }\n  path();\n}"}
{"ids": "11958", "raw_code": "protected synchronized void readDontVerify() throws IOException, FileEncryptionException {\n  if (backingRandomAccessFile.length() < headerSize()) {\n    throw new FileEncryptionException(\"Invalid file header\");\n  }\n  long oldpos=backingRandomAccessFile.getFilePointer();\n  backingRandomAccessFile.seek(0);\n  byte[] header_data=new byte[headerSize() - FileHeader.AUTH_TAG_SIZE];\n  backingRandomAccessFile.read(header_data);\n  backingRandomAccessFile.seek(oldpos);\n  DataInputStream istream=new DataInputStream(new ByteArrayInputStream(header_data));\n  byte[] tmpmagic=new byte[PANBOX_FILE_MAGIC.length];\n  istream.read(tmpmagic);\n  if (!Arrays.equals(tmpmagic,PANBOX_FILE_MAGIC)) {\n    throw new FileEncryptionException(\"Invalid magic number in file header\");\n  }\n  byte[] tmpversion=new byte[PANBOX_FILE_VERSION.length];\n  istream.read(tmpversion);\n  if (!Arrays.equals(tmpversion,PANBOX_FILE_VERSION)) {\n    throw new FileEncryptionException(\"Invalid version in file header. Expected version is \" + PANBOX_FILE_VERSION.toString());\n  }\n  this.shareKeyVersion=istream.readInt();\n  istream.close();\n}"}
{"ids": "82178", "raw_code": "private boolean isMediaTypeSupported(String media){\n  for (int i=0; i < SUPPORTED_MEDIA_TYPES.length; i++) {\n    if (media.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[i])) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "43270", "raw_code": "private void export_dependencies(JCas jcas){\n  dependencies=new LinkedHashMap<Token,List<Dependency>>();\n  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());\n  for (  Dependency dependency : select(jcas,Dependency.class)) {\n    Token governor=dependency.getGovernor();\n    Token dependent=dependency.getDependent();\n    List<Dependency> l=dependencies.get(governor);\n    if (l == null) {\n      dependencies.put(governor,new ArrayList<Dependency>());\n      l=dependencies.get(governor);\n    }\n    l.add(dependency);\n    nonGoverned.remove(dependent);\n  }\n  for (  Token t : nonGoverned) {\n    traverseDependents(t,\"\",-1);\n    writeToFile(\"component\",componentId,\"p\",\"dep\",\"dep\");\n    componentId++;\n  }\n}"}
{"ids": "76939", "raw_code": "public static String randomRegexpishString(Random r){\n  return randomRegexpishString(r,20);\n}"}
{"ids": "56896", "raw_code": "public List<ExpectedPartitionValueEntity> createExpectedPartitionValueEntities(String partitionKeyGroupName,List<String> expectedPartitionValues){\n  PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDao.getPartitionKeyGroupByName(partitionKeyGroupName);\n  if (partitionKeyGroupEntity == null) {\n    partitionKeyGroupEntity=partitionKeyGroupDaoTestHelper.createPartitionKeyGroupEntity(partitionKeyGroupName);\n  }\n  List<ExpectedPartitionValueEntity> expectedPartitionValueEntities=new ArrayList<>();\n  for (  String expectedPartitionValue : expectedPartitionValues) {\n    ExpectedPartitionValueEntity expectedPartitionValueEntity=new ExpectedPartitionValueEntity();\n    expectedPartitionValueEntity.setPartitionKeyGroup(partitionKeyGroupEntity);\n    expectedPartitionValueEntity.setPartitionValue(expectedPartitionValue);\n    expectedPartitionValueEntities.add(expectedPartitionValueDao.saveAndRefresh(expectedPartitionValueEntity));\n  }\n  return expectedPartitionValueEntities;\n}"}
{"ids": "60387", "raw_code": "public static LowMemoryWatcher register(@NotNull Runnable runnable){\n  return new LowMemoryWatcher(runnable);\n}"}
{"ids": "24980", "raw_code": "public static String formatLong(long number){\n  return intFormat.format(number);\n}"}
{"ids": "63319", "raw_code": "public synchronized int copyDirect(int pageId,OutputStream out) throws IOException {\n  byte[] buffer=new byte[pageSize];\n  if (pageId >= pageCount) {\n    return -1;\n  }\n  file.seek((long)pageId << pageSizeShift);\n  file.readFullyDirect(buffer,0,pageSize);\n  readCount++;\n  out.write(buffer,0,pageSize);\n  return pageId + 1;\n}"}
{"ids": "24321", "raw_code": "private void assertBackupStatus(final BackupStatus backupStatus){\n  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();\n  assertFalse(backupMap.isEmpty());\n  for (  DistributedMember member : backupMap.keySet()) {\n    for (    PersistentID id : backupMap.get(member)) {\n      assertNotNull(id.getHost());\n      assertNotNull(id.getUUID());\n      assertNotNull(id.getDirectory());\n    }\n  }\n}"}
{"ids": "40144", "raw_code": "public synchronized void checkState(State... requiredStates) throws IllegalStateException {\n  for (  State requiredState : requiredStates) {\n    if (requiredState.equals(currentState)) {\n      return;\n    }\n  }\n  throw new IllegalStateException(String.format(Locale.US,\"Expected states %s, but in state %s\",Lists.newArrayList(requiredStates),currentState));\n}"}
{"ids": "16864", "raw_code": "public void sortMovies(){\nsynchronized (movies) {\n    Utils.sortList(movies,MOVIE_SET_COMPARATOR);\n    movieIds.clear();\n    for (    Movie movie : movies) {\n      movieIds.add(movie.getDbId());\n    }\n  }\n  firePropertyChange(\"movies\",null,movies);\n}"}
{"ids": "30408", "raw_code": "public KeyValueListParser(String pairDelimiterRegex,String keyValDelimiterRegex){\n  pairDelimiter=Pattern.compile(pairDelimiterRegex);\n  keyValDelimiter=Pattern.compile(keyValDelimiterRegex);\n}"}
{"ids": "4241", "raw_code": "private synchronized boolean pollStatsBroker(Destination queue){\n  statsMessageListener.setDestination(queue);\n  Timestamp timestamp=new Timestamp(System.currentTimeMillis());\n  LOGGER.debug(\"Setting the destination to \" + getQueueName(queue) + \" at \"+ timestamp);\n  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));\n  try {\n    Thread.sleep(3 * 1000);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  return statsMessageListener.getStats() != null;\n}"}
{"ids": "39519", "raw_code": "public File makeAcceptable(File pathname){\n  if (accept(pathname)) {\n    return pathname;\n  }\n else {\n    return new File(pathname.getPath() + '.' + defaultExtension);\n  }\n}"}
{"ids": "50434", "raw_code": "public String jsTypeName(TypeRef typeRef){\nswitch (typeRef.getKind()) {\ncase TYPE_MESSAGE:\n    return \"Object\";\ncase TYPE_ENUM:\n  return \"number\";\ndefault :\n{\n  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());\n  if (!Strings.isNullOrEmpty(name)) {\n    return name;\n  }\n  throw new IllegalArgumentException(\"unknown type kind: \" + typeRef.getKind());\n}\n}\n}"}
{"ids": "78321", "raw_code": "public StateMachine createStateMachine(StateMachineDefinition stateMachineDefinition){\n  final Map<EventDefinition,EventData> eventDataMap=stateMachineDefinition.getEventDataMap();\n  Set<Event> allEvents=createAllEvents(eventDataMap);\n  Set<StateDefinition> stateDefinitions=stateMachineDefinition.getStates();\n  Set<State> states=new HashSet<>();\n  for (  StateDefinition stateDefinition : stateDefinitions) {\n    State state=convertStateDefinitionToState(stateDefinition);\n    states.add(state);\n  }\n  StateMachine stateMachine=new StateMachine(stateMachineDefinition.getVersion(),stateMachineDefinition.getName(),stateMachineDefinition.getDescription(),states,stateMachineDefinition.getCorrelationId());\n  stateMachinesDAO.create(stateMachine);\n  for (  Event event : allEvents) {\n    event.setStateMachineInstanceId(stateMachine.getId());\n    eventPersistenceService.persistEvent(event);\n  }\n  for (  State state : stateMachine.getStates()) {\n    auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null));\n  }\n  return stateMachine;\n}"}
{"ids": "11264", "raw_code": "public void dispose(){\n  clearListeners();\n  if (attributes != null) {\n    attributes.clear();\n  }\n  removed(null);\n}"}
{"ids": "69492", "raw_code": "public static terminal find(String with_name){\n  if (with_name == null)   return null;\n else   return (terminal)_all.get(with_name);\n}"}
{"ids": "74395", "raw_code": "public LayoutBlock createNewLayoutBlock(String systemName,String userName){\n  LayoutBlock block=null;\n  if (userName == null || userName.equals(\"\")) {\n    log.error(\"Attempt to create a LayoutBlock with no user name\");\n    return null;\n  }\n  block=getByUserName(userName);\n  if (block != null) {\n    return null;\n  }\n  String sName=\"\";\n  if (systemName == null) {\n    boolean found=true;\n    while (found) {\n      sName=\"ILB\" + blkNum;\n      blkNum++;\n      block=getBySystemName(sName);\n      if (block == null) {\n        found=false;\n      }\n    }\n  }\n else {\n    block=getBySystemName((systemName.toUpperCase()));\n    if (block != null) {\n      return null;\n    }\n    sName=systemName.toUpperCase();\n  }\n  block=new LayoutBlock(sName,userName);\n  register(block);\n  return block;\n}"}
{"ids": "74741", "raw_code": "@Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException {\n  options.set(values);\n  if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {\n  }\n}"}
{"ids": "33388", "raw_code": "public static String escapeRegex(final String regex){\n  Matcher match=REGEX_CHARS.matcher(regex);\n  return match.replaceAll(\"\\\\\\\\$1\");\n}"}
{"ids": "63371", "raw_code": "private ValueGeometry(byte[] bytes,Geometry geometry){\n  this.bytes=bytes;\n  this.geometry=geometry;\n  this.hashCode=Arrays.hashCode(bytes);\n}"}
{"ids": "35582", "raw_code": "private void finishCommon(){\n  if (!unknownSubjects.isEmpty()) {\n    if (statements.isEmpty() && restoredStatements.isEmpty()) {\n      throw new BadSubjectException(unknownSubjects.keySet(),uris);\n    }\n else {\n      log.info(\"Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}\",unknownSubjects.keySet(),uris.entityData(),uris.entity());\n    }\n  }\n  if (revisionId == null) {\n    throw new ContainedException(\"Didn't get a revision id for \" + statements);\n  }\n  if (lastModified == null) {\n    throw new ContainedException(\"Didn't get a last modified date for \" + statements);\n  }\n  for (  Pair<URI,Literal> dataStatement : dataStatements) {\n    statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));\n  }\n  statements.addAll(restoredStatements);\n}"}
{"ids": "74877", "raw_code": "public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){\n  if (image == null) {\n    return;\n  }\n  final ImagePanel display=new ImagePanel(image);\n  display.setLayout(new BorderLayout());\n  if (user_message != null) {\n    display.add(new JLabel(user_message),BorderLayout.SOUTH);\n  }\n  final int width=image.getWidth();\n  final int height=image.getHeight();\n  display.setSize(new Dimension(width + 10,height + 10));\n  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);\n}"}
{"ids": "72735", "raw_code": "@Override public Path call() throws Exception {\n  final Set<FileVisitOption> options;\n  if (followLinks) {\n    options=EnumSet.of(FileVisitOption.FOLLOW_LINKS);\n  }\n else {\n    options=EnumSet.noneOf(FileVisitOption.class);\n  }\n  logger.info(String.format(\"Starting scan of: \\\"%s\\\".\",path));\n  try {\n    Files.walkFileTree(path,options,maxDepth,this);\n  }\n catch (  IOException e) {\n    logger.log(Level.SEVERE,String.format(\"Error while scanning path: \\\"%s\\\".\",path),e);\n    throw e;\n  }\n  logger.info(String.format(\"Completed scan of: \\\"%s\\\".\",path));\n  return path;\n}"}
{"ids": "4483", "raw_code": "public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return jsonArray.getInt(index);\n  }\n  if (notNull && jsonArray.isNull(index)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));\n  }\n  int value=0;\n  if (!jsonArray.isNull(index)) {\n    value=jsonArray.getInt(index);\n  }\n  return value;\n}"}
{"ids": "56788", "raw_code": "private void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection){\n  Assert.notNull(storagePolicySelection,\"A storage policy selection must be specified.\");\n  businessObjectDataHelper.validateBusinessObjectDataKey(storagePolicySelection.getBusinessObjectDataKey(),true,true);\n  storagePolicyHelper.validateStoragePolicyKey(storagePolicySelection.getStoragePolicyKey());\n  Assert.notNull(storagePolicySelection.getStoragePolicyVersion(),\"A storage policy version must be specified.\");\n}"}
{"ids": "3039", "raw_code": "public static Object toArray(Collection<?> collection,Class<?> componentType){\n  if (componentType.isPrimitive()) {\n    Object array=Array.newInstance(componentType,collection.size());\n    int index=0;\n    for (    Object value : collection) {\n      Array.set(array,index++,value);\n    }\n    return array;\n  }\n  return collection.toArray((Object[])Array.newInstance(componentType,collection.size()));\n}"}
{"ids": "49881", "raw_code": "GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException {\n  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));\n}"}
{"ids": "65084", "raw_code": "public void labelDistances(Hypergraph<V,E> graph,V root){\n  labelDistances(graph,Collections.singleton(root));\n}"}
{"ids": "24489", "raw_code": "public int position(){\n  return lineBuffer == null ? 0 : lineBuffer.length();\n}"}
{"ids": "52493", "raw_code": "public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){\n  DateTime intervalEnd=interval.getEnd();\n  DateTime sliceStart=interval.getStart();\n  DateTime periodStart=timeGrain.roundFloor(sliceStart);\n  if (!sliceStart.equals(periodStart)) {\n    LOG.info(\"Interval {} is not aligned to TimeGrain {} starting {}\",interval,timeGrain,periodStart);\n    throw new IllegalArgumentException(\"Interval must be aligned to the TimeGrain starting \" + periodStart);\n  }\n  List<Interval> intervalSlices=new ArrayList<>();\n  while (sliceStart.isBefore(intervalEnd)) {\n    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);\n    Interval slicedInterval=new Interval(sliceStart,sliceEnd);\n    if (!interval.contains(slicedInterval)) {\n      LOG.info(\"Interval {} is not a multiple of TimeGrain {}\",interval,timeGrain);\n      throw new IllegalArgumentException(\"Interval must be a multiple of the TimeGrain\");\n    }\n    intervalSlices.add(slicedInterval);\n    sliceStart=sliceEnd;\n  }\n  LOG.debug(\"Sliced interval {} into {} slices of {} grain\",interval,intervalSlices.size(),timeGrain);\n  return intervalSlices;\n}"}
{"ids": "80024", "raw_code": "public boolean isGerund(){\n  return typeString.startsWith(VERB_GERUND);\n}"}
{"ids": "68908", "raw_code": "private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){\n  JsonObject request=new JsonObject();\n  JsonArray jsonHeaders=new JsonArray();\n  headers.forEach(null);\n  request.put(\"headers\",jsonHeaders);\n  request.put(\"uri\",uri);\n  request.put(\"method\",method.toString());\n  request.put(\"payload\",payload);\n  return request;\n}"}
{"ids": "77506", "raw_code": "private long downloadTlogFiles(File tmpTlogDir,long latestGeneration) throws Exception {\n  LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n  tlogFilesDownloaded=Collections.synchronizedList(new ArrayList<>());\n  long bytesDownloaded=0;\n  boolean status=tmpTlogDir.mkdirs();\n  if (!status) {\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n  }\n  for (  Map<String,Object> file : tlogFilesToDownload) {\n    String saveAs=(String)(file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n    localFileFetcher=new LocalFsFileFetcher(tmpTlogDir,file,saveAs,TLOG_FILE,latestGeneration);\n    currentFile=file;\n    localFileFetcher.fetchFile();\n    bytesDownloaded+=localFileFetcher.getBytesDownloaded();\n    tlogFilesDownloaded.add(new HashMap<>(file));\n  }\n  return bytesDownloaded;\n}"}
{"ids": "49288", "raw_code": "static WindowsFileAttributes readAttributes(long handle) throws WindowsException {\n  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);\n  try {\n    long address=buffer.address();\n    GetFileInformationByHandle(handle,address);\n    int reparseTag=0;\n    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);\n    if (isReparsePoint(fileAttrs)) {\n      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;\n      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);\n      try {\n        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);\n        reparseTag=(int)unsafe.getLong(reparseBuffer.address());\n      }\n  finally {\n        reparseBuffer.release();\n      }\n    }\n    return fromFileInformation(address,reparseTag);\n  }\n  finally {\n    buffer.release();\n  }\n}"}
{"ids": "69970", "raw_code": "protected void addAllForReplay(Collection<Participant> participants){\n  Iterator<Participant> it=participants.iterator();\n  while (it.hasNext()) {\n    Participant p=it.next();\n    replayCompletion(p);\n  }\n}"}
{"ids": "11082", "raw_code": "public static JPanel createCheckbox(String boxlabel,String[] buttons,boolean[] checked,ActionListener al){\n  JPanel jp=createPaletteJPanel(boxlabel);\n  for (int j=0; j < buttons.length; j++) {\n    JCheckBox jcb=new JCheckBox(buttons[j]);\n    jcb.setActionCommand(Integer.toString(j));\n    if (al != null)     jcb.addActionListener(al);\n    jcb.setSelected(checked[j]);\n    jp.add(jcb);\n  }\n  return jp;\n}"}
{"ids": "54424", "raw_code": "public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){\n  GPOMutable destAggs=aeDest.getAggregates();\n  GPOMutable srcAggs=aeSrc.getAggregates();\n  if (srcAggs.getFieldsBoolean() != null) {\n    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);\n  }\n  if (srcAggs.getFieldsCharacter() != null) {\n    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);\n  }\n  if (srcAggs.getFieldsString() != null) {\n    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);\n  }\n  if (srcAggs.getFieldsShort() != null) {\n    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);\n  }\n  if (srcAggs.getFieldsInteger() != null) {\n    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);\n  }\n  if (srcAggs.getFieldsLong() != null) {\n    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);\n  }\n  if (srcAggs.getFieldsFloat() != null) {\n    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);\n  }\n  if (srcAggs.getFieldsDouble() != null) {\n    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);\n  }\n}"}
{"ids": "52843", "raw_code": "public static double assignProbabilitiesToInstances(Relation<? extends NumberVector> relation,List<? extends EMClusterModel<?>> models,WritableDataStore<double[]> probClusterIGivenX){\n  final int k=models.size();\n  double emSum=0.;\n  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {\n    NumberVector vec=relation.get(iditer);\n    double[] probabilities=new double[k];\n{\n      int i=0;\n      for (      EMClusterModel<?> m : models) {\n        probabilities[i]=m.estimateDensity(vec);\n        ++i;\n      }\n    }\n    double priorProbability=0.;\n    for (int i=0; i < k; i++) {\n      priorProbability+=probabilities[i];\n    }\n    double logP=Math.max(Math.log(priorProbability),MIN_LOGLIKELIHOOD);\n    emSum+=(logP == logP) ? logP : 0.;\n    double[] clusterProbabilities=new double[k];\n    if (priorProbability > 0.) {\n      for (int i=0; i < k; i++) {\n        clusterProbabilities[i]=probabilities[i] / priorProbability;\n      }\n    }\n    probClusterIGivenX.put(iditer,clusterProbabilities);\n  }\n  return emSum / relation.size();\n}"}
{"ids": "21069", "raw_code": "public static String asString(URI value){\n  return value != null ? value.toString() : null;\n}"}
{"ids": "28346", "raw_code": "public Kernel(int offset,double[] values){\n  this.values=Arrays.copyOf(values,values.length);\n  this.offset=offset;\n}"}
{"ids": "42373", "raw_code": "private void initializeWorkList(){\n  for (  GVCongruenceClass c : B) {\n    if (c.size() == 1) {\n      continue;\n    }\n    Iterator<ValueGraphVertex> i=c.iterator();\n    ValueGraphVertex first=i.next();\n    while (i.hasNext()) {\n      ValueGraphVertex v=i.next();\n      if (!checkCongruence(first,v)) {\n        workList.push(c);\n        break;\n      }\n    }\n  }\n}"}
{"ids": "35303", "raw_code": "@Override protected void beforeModelLinked(EObject model,IDiagnosticConsumer diagnosticsConsumer){\n  ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource());\n  if (adapter != null)   adapter.clear();\n  UnionMemberScope.clearCachedComposedMembers(model);\n}"}
{"ids": "20876", "raw_code": "public void treeExpanded(TreeExpansionEvent event){\n  inspectorWindow.updateView(Director.ALL);\n}"}
{"ids": "39049", "raw_code": "public void convertInfixToPostfix(String infixExp) throws Exception {\n  m_originalInfix=infixExp;\n  infixExp=Utils.removeSubstring(infixExp,\" \");\n  infixExp=Utils.replaceSubstring(infixExp,\"log\",\"l\");\n  infixExp=Utils.replaceSubstring(infixExp,\"abs\",\"b\");\n  infixExp=Utils.replaceSubstring(infixExp,\"cos\",\"c\");\n  infixExp=Utils.replaceSubstring(infixExp,\"exp\",\"e\");\n  infixExp=Utils.replaceSubstring(infixExp,\"sqrt\",\"s\");\n  infixExp=Utils.replaceSubstring(infixExp,\"floor\",\"f\");\n  infixExp=Utils.replaceSubstring(infixExp,\"ceil\",\"h\");\n  infixExp=Utils.replaceSubstring(infixExp,\"rint\",\"r\");\n  infixExp=Utils.replaceSubstring(infixExp,\"tan\",\"t\");\n  infixExp=Utils.replaceSubstring(infixExp,\"sin\",\"n\");\n  StringTokenizer tokenizer=new StringTokenizer(infixExp,OPERATORS,true);\n  m_postFixExpVector=new Vector<ExpressionComponent>();\n  while (tokenizer.hasMoreTokens()) {\n    String tok=tokenizer.nextToken();\n    if (tok.length() > 1) {\n      handleOperand(tok);\n    }\n else {\n      if (isOperator(tok.charAt(0))) {\n        handleOperator(tok);\n      }\n else {\n        handleOperand(tok);\n      }\n    }\n    m_previousTok=tok;\n  }\n  while (!m_operatorStack.empty()) {\n    String popop=(String)(m_operatorStack.pop());\n    if (popop.charAt(0) == '(' || popop.charAt(0) == ')') {\n      throw new Exception(\"Mis-matched parenthesis!\");\n    }\n    m_postFixExpVector.addElement(new Operator(popop.charAt(0)));\n  }\n}"}
{"ids": "44629", "raw_code": "public boolean hasItem(T object){\nsynchronized (mLock) {\n    return source.contains(object);\n  }\n}"}
{"ids": "48188", "raw_code": "private static boolean versionMatches(Integer v1,int v2){\n  if (v1 == null || v1 == 0 || v2 == 0) {\n    return true;\n  }\n  return v1.equals(v2);\n}"}
{"ids": "71642", "raw_code": "private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){\n  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);\n  while (iter.hasNext()) {\n    Element xsdAttribute=iter.next();\n    String name=xsdAttribute.attributeValue(\"name\");\n    QName qname=getQName(name);\n    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);\n    if (dataType != null) {\n      elementFactory.setAttributeXSDatatype(qname,dataType);\n    }\n  }\n  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);\n  if (schemaSequence != null) {\n    onChildElements(schemaSequence,elementFactory);\n  }\n  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);\n  if (schemaChoice != null) {\n    onChildElements(schemaChoice,elementFactory);\n  }\n  Element schemaAll=schemaComplexType.element(XSD_ALL);\n  if (schemaAll != null) {\n    onChildElements(schemaAll,elementFactory);\n  }\n}"}
{"ids": "51832", "raw_code": "private void pushAnnotatorsRef(String values){\n  annotatorsRef.push(annotatorsRef.peek());\n  setAnnotatorsRef(values);\n}"}
{"ids": "72007", "raw_code": "public String versionCompact(){\n  return properties.getProperty(\"version.compact\");\n}"}
{"ids": "65346", "raw_code": "private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){\n  if (entry.getSequence() > session.getCommandSequence()) {\n    session.registerSequenceQuery(entry.getSequence(),null);\n  }\n else {\n    indexQuery(entry,future);\n  }\n}"}
{"ids": "53500", "raw_code": "public static <T>List<T> rest(List<T> l){\n  return l.subList(1,l.size());\n}"}
{"ids": "11415", "raw_code": "public void findAndUndo(Object someObj){\n  if (someObj instanceof com.bbn.openmap.MapBean) {\n    logger.fine(\"ProjectionStack removing a MapBean.\");\n    MapBean map=getMapBean();\n    if (map != null && map == (MapBean)someObj) {\n      setMapBean(null);\n    }\n  }\n}"}
{"ids": "26244", "raw_code": "public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){\n  if (exist()) {\n    getProductionRunRoutingTasks();\n    if (quantity == null)     getQuantity();\n    Timestamp endDate=null;\n    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {\n      GenericValue routingTask=iter.next();\n      if (priority.compareTo(routingTask.getLong(\"priority\")) <= 0) {\n        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);\n        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);\n        routingTask.set(\"estimatedStartDate\",startDate);\n        routingTask.set(\"estimatedCompletionDate\",endDate);\n        startDate=endDate;\n      }\n    }\n    return endDate;\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "28787", "raw_code": "public void addDocumentType(DocumentType documentType){\n  mDocumentTypes.add(documentType);\n}"}
{"ids": "80912", "raw_code": "private static Position nextTokenPos(Position pos,Token[][] spec){\n  if (pos == null) {\n    return null;\n  }\n  int nextItem=pos.item + 1;\n  if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {\n    return new Position(pos.line,nextItem);\n  }\n  int nextLine=pos.line + 1;\n  while ((nextLine < spec.length) && (spec[nextLine].length == 0)) {\n    nextLine++;\n  }\n  if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {\n    return new Position(nextLine,0);\n  }\n  return null;\n}"}
{"ids": "6959", "raw_code": "public void update(GL10 gl){\n  if (taskQueue.size() > 0) {\n    GLResorceTask res;\n    while ((res=taskQueue.poll()) != null) {\n      res.perform(gl);\n    }\n  }\n}"}
{"ids": "84602", "raw_code": "public static double[] HPDInterval(double proportion,double[] x,int[] indices){\n  double minRange=Double.MAX_VALUE;\n  int hpdIndex=0;\n  final int diff=(int)Math.round(proportion * (double)x.length);\n  for (int i=0; i <= (x.length - diff); i++) {\n    final double minValue=x[indices[i]];\n    final double maxValue=x[indices[i + diff - 1]];\n    final double range=Math.abs(maxValue - minValue);\n    if (range < minRange) {\n      minRange=range;\n      hpdIndex=i;\n    }\n  }\n  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};\n}"}
{"ids": "23892", "raw_code": "private void checkIfDirectoriesExist(File[] disk_dirs){\n  DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs);\n}"}
{"ids": "21772", "raw_code": "public void addPortToAlreadyAllocatedContext(StoragePort port,StorageHADomain haDomain,StorageSystem.Type arrayType,String switchName){\n  String engine=getEngine(port,haDomain,arrayType);\n  if (engine != null) {\n    _alreadyAllocatedEngines.add(engine);\n  }\n  String directorType=getDirectorType(arrayType,haDomain);\n  if (directorType != null) {\n    _alreadyAllocatedDirectorTypes.add(directorType);\n  }\n  String director=getDirector(port,haDomain);\n  if (director != null) {\n    _alreadyAllocatedDirectors.add(director);\n  }\n  String cpu=getCpu(port,haDomain,arrayType);\n  if (cpu != null) {\n    _alreadyAllocatedCpus.add(cpu);\n  }\n  if (switchName != null) {\n    _alreadyAllocatedSwitches.add(switchName);\n  }\n}"}
{"ids": "23592", "raw_code": "public static void writeListOfLongs(List list,boolean hasLongIDs,DataOutput out) throws IOException {\n  if (list == null) {\n    out.writeInt(-1);\n  }\n else {\n    out.writeInt(list.size());\n    out.writeBoolean(hasLongIDs);\n    for (Iterator it=list.iterator(); it.hasNext(); ) {\n      Long l=(Long)it.next();\n      if (hasLongIDs) {\n        out.writeLong(l.longValue());\n      }\n else {\n        out.writeInt((int)l.longValue());\n      }\n    }\n  }\n}"}
{"ids": "46509", "raw_code": "public boolean isDefined(Object attrName){\n  return table.containsKey(attrName);\n}"}
{"ids": "79920", "raw_code": "private void showPreloadingStage(){\n  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);\n  preloadingStage.initOwner(primaryStage);\n  preloadingStage.setScene(new PreloadingScene());\n  preloadingStage.show();\n  primaryStage.setOnShowing(null);\n}"}
{"ids": "49699", "raw_code": "private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {\n  String[] parts=ip.split(\"\\\\.\");\n  if (parts.length > 4 || mustHave4 && parts.length != 4) {\n    throw new IPMatcherException(\"Malformed IP specification \" + ip);\n  }\n  try {\n    for (int i=0; i < parts.length; i++) {\n      int p=Integer.parseInt(parts[i]);\n      if (p < 0 || p > 255) {\n        throw new IPMatcherException(\"Malformed IP specification \" + ip);\n      }\n      bytes[i]=(byte)(p < 128 ? p : p - 256);\n    }\n  }\n catch (  NumberFormatException nfe) {\n    throw new IPMatcherException(\"Malformed IP specification \" + ip,nfe);\n  }\n  return parts.length;\n}"}
{"ids": "39971", "raw_code": "protected void reply(RequestContext context,String key,String message){\n  try {\n    HttpServletRequest request=context.getRequest();\n    String filename=request.getRemoteAddr();\n    end(filename,key,message);\n  }\n catch (  Exception e) {\n  }\n}"}
{"ids": "52", "raw_code": "protected void addHeaders(HttpURLConnection connection,String tenantId){\n  if (tenantId == null) {\n    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);\n  }\n  if (tenantId != null) {\n    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);\n  }\n  if (authorization == null && username != null) {\n    String authString=username + \":\" + password;\n    String encoded=encoder.encodeToString(authString.getBytes());\n    authorization=\"Basic \" + encoded;\n  }\n  if (authorization != null) {\n    connection.setRequestProperty(\"Authorization\",authorization);\n  }\n}"}
{"ids": "81016", "raw_code": "public void addLongSelectionListener(SelectionListener listener){\n  if (listener == null)   throw new IllegalArgumentException();\n  if (hexEditControl == null) {\n    if (listOfLongListeners == null)     listOfLongListeners=new ArrayList<>();\n    listOfLongListeners.add(listener);\n  }\n else {\n    hexEditControl.addLongSelectionListener(listener);\n  }\n}"}
{"ids": "49583", "raw_code": "public Debug(String clientID,ClientComms comms){\n  this.clientID=clientID;\n  this.comms=comms;\n  log.setResourceName(clientID);\n}"}
{"ids": "66459", "raw_code": "protected String alterCase(String value){\nswitch (getCase()) {\ncase UPPERCASE:\n    return value.toUpperCase();\ncase LOWERCASE:\n  return value.toLowerCase();\ndefault :\nreturn value;\n}\n}"}
{"ids": "23880", "raw_code": "private boolean isAckRequired(){\n  return this.ackRequired;\n}"}
{"ids": "74406", "raw_code": "void addReporter(String textReporter,int xx,int yy){\n  ReporterIcon l=new ReporterIcon(this);\n  l.setReporter(textReporter);\n  l.setLocation(xx,yy);\n  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);\n  l.setDisplayLevel(LABELS);\n  setDirty(true);\n  putItem(l);\n}"}
{"ids": "21922", "raw_code": "private boolean hasConnectivityToAllSystems(Initiator initiator,Collection<URI> storageSystems,ExportGroup exportGroup){\n  return hasConnectivityToAllSystems(initiator,storageSystems,null,exportGroup);\n}"}
{"ids": "43643", "raw_code": "private Derivation<TK,FV> constructDerivation(Derivation<TK,FV> markedNode,int sourceInputId,FeatureExtractor<TK,FV> featurizer,Scorer<FV> scorer,SearchHeuristic<TK,FV> heuristic,OutputSpace<TK,FV> outputSpace){\n  final List<Derivation<TK,FV>> nodes=new LinkedList<>();\n  Derivation<TK,FV> p=markedNode;\n  while (p != null) {\n    nodes.add(0,p);\n    p=p.parent;\n  }\n  p=markedNode.bestChild;\n  while (p != null) {\n    nodes.add(p);\n    p=p.bestChild;\n  }\n  Derivation<TK,FV> goalHyp=null;\n  for (  Derivation<TK,FV> node : nodes) {\n    goalHyp=goalHyp == null ? node : new Derivation<>(sourceInputId,node.rule,goalHyp.length,goalHyp,featurizer,scorer,heuristic,outputSpace);\n  }\n  return goalHyp;\n}"}
{"ids": "37033", "raw_code": "private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException {\n  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();\n  for (  final Object childObject : ast.getChildren()) {\n    children.add(convert((CommonTree)childObject));\n  }\n  return new CAbstractOrExpression(children);\n}"}
{"ids": "73315", "raw_code": "public JDialog displayPanelInWindow(final JPanel panel,String title){\n  JDialog frame=new GenericJDialog();\n  frame.setContentPane(panel);\n  frame.pack();\n  frame.setTitle(title);\n  frame.setVisible(true);\n  return frame;\n}"}
{"ids": "32908", "raw_code": "public static void compress(){\n  String s=BinaryStdIn.readString();\n  char[] input=s.toCharArray();\n  int[] freq=new int[R];\n  for (int i=0; i < input.length; i++)   freq[input[i]]++;\n  Node root=buildTrie(freq);\n  String[] st=new String[R];\n  buildCode(st,root,\"\");\n  writeTrie(root);\n  BinaryStdOut.write(input.length);\n  for (int i=0; i < input.length; i++) {\n    String code=st[input[i]];\n    for (int j=0; j < code.length(); j++) {\n      if (code.charAt(j) == '0') {\n        BinaryStdOut.write(false);\n      }\n else       if (code.charAt(j) == '1') {\n        BinaryStdOut.write(true);\n      }\n else       throw new IllegalStateException(\"Illegal state\");\n    }\n  }\n  BinaryStdOut.close();\n}"}
{"ids": "27029", "raw_code": "protected double computeAzimuthLabelOffset(double radius,double maxRadius){\n  return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadius / radius);\n}"}
{"ids": "49199", "raw_code": "public void displayChanged(){\n  executeDisplayChangedOnEDT(getGraphicsConfiguration());\n}"}
{"ids": "52536", "raw_code": "private static Stream<Method> extractMethods(Class clazz){\n  try {\n    Method[] methods=clazz.getMethods();\n    if (methods.length > 0) {\n      return Stream.of(methods);\n    }\n  }\n catch (  Exception|Error e) {\n    LOG.warn(\"Problems loading class at startup: {}\",clazz,e);\n  }\n  return Stream.empty();\n}"}
{"ids": "43417", "raw_code": "@Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){\n  String suffixCloudUnit=application.getSuffixCloudUnitIO();\n  JedisPool pool=null;\n  Jedis jedis=null;\n  try {\n    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);\n    jedis=pool.getResource();\n    String subNameSpace=concatSubNameSpace(application);\n    String key=subNameSpace + suffixCloudUnit;\n    String frontend=\"frontend:\" + key.toLowerCase();\n    jedis.lset(frontend,1,\"http://\" + dockerManagerIP + \":\"+ serverPort);\n    String frontendServerManager=\"frontend:manager-\" + key.toLowerCase();\n    jedis.lset(frontendServerManager,1,\"http://\" + dockerManagerIP + \":\"+ serverManagerPort);\n  }\n catch (  JedisConnectionException|UnsupportedEncodingException e) {\n    logger.error(\"HipacheRedisUtils Exception\",e);\n  }\n finally {\n    if (jedis != null) {\n      pool.destroy();\n    }\n  }\n}"}
{"ids": "42688", "raw_code": "protected void remove(int itemPosition){\n  if (itemPosition >= 0 && itemPosition < getItemCount()) {\n    list.remove(itemPosition);\n  }\n}"}
{"ids": "80520", "raw_code": "protected String chooseRandomEnemys(){\n  final List<String> enemyList=new LinkedList<String>(enemyForces.keySet());\n  final int enemySize=enemyList.size();\n  final int position=Rand.rand(enemySize);\n  return enemyList.get(position);\n}"}
{"ids": "22065", "raw_code": "public void sortPools(List<StoragePool> storagePools){\n  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(storagePools);\n  Collections.sort(storagePools,_storagePoolComparator);\n}"}
{"ids": "27079", "raw_code": "public RhythmGroup addOverlays(Collection<RhythmOverlay> overlays){\n  mOverlays.addAll(overlays);\n  if (mCurrentOverlayIndex == NO_OVERLAY) {\n    selectOverlay(0);\n  }\n  return this;\n}"}
{"ids": "53492", "raw_code": "public static Resource forPath(final String path) throws UnknownResourceException {\n  Resource resource;\n  if (path.startsWith(ClasspathResource.PREFIX + \":\")) {\n    resource=new ClasspathResource(path);\n  }\n else   if (path.startsWith(FileResource.PREFIX + \":\")) {\n    resource=new FileResource(path);\n  }\n else {\n    resource=forPath(FileResource.PREFIX + \":\" + path);\n  }\n  return resource;\n}"}
{"ids": "6618", "raw_code": "private static boolean isOlderThanLeopard(){\n  String version=System.getProperty(\"os.version\");\n  StringTokenizer tk=new StringTokenizer(version,\".\");\n  int major=Integer.parseInt(tk.nextToken());\n  int minor=Integer.parseInt(tk.nextToken());\n  return major == 10 && minor < 6;\n}"}
{"ids": "67699", "raw_code": "public static String xmlContentEscape(String s){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < s.length(); i++) {\n    char c=s.charAt(i);\nswitch (c) {\ncase '&':\n      sb.append(\"&amp;\");\n    break;\ncase '<':\n  sb.append(\"&lt;\");\nbreak;\ncase '\\000':\ncase '\\001':\ncase '\\002':\ncase '\\003':\ncase '\\004':\ncase '\\005':\ncase '\\006':\ncase '\\007':\ncase '\\010':\ncase '\\013':\ncase '\\014':\ncase '\\016':\ncase '\\017':\ncase '\\020':\ncase '\\021':\ncase '\\022':\ncase '\\023':\ncase '\\024':\ncase '\\025':\ncase '\\026':\ncase '\\027':\ncase '\\030':\ncase '\\031':\ncase '\\032':\ncase '\\033':\ncase '\\034':\ncase '\\035':\ncase '\\036':\ncase '\\037':\nbreak;\ndefault :\nsb.append(c);\n}\n}\nreturn sb.toString();\n}"}
{"ids": "9359", "raw_code": "private void feedForward(Vec input,List<Vec> activations,List<Vec> derivatives){\n  Vec x=input;\n  for (int i=0; i < Ws.size(); i++) {\n    Matrix W_i=Ws.get(i);\n    Vec b_i=bs.get(i);\n    Vec a_i=activations.get(i);\n    a_i.zeroOut();\n    W_i.multiply(x,1,a_i);\n    a_i.mutableAdd(b_i);\n    a_i.applyFunction(f);\n    Vec d_i=derivatives.get(i);\n    a_i.copyTo(d_i);\n    d_i.applyFunction(f.getD());\n    x=a_i;\n  }\n}"}
{"ids": "59117", "raw_code": "private File findFile(File directory,String name) throws FileNotFoundException {\n  File file=new File(directory,name);\n  if (file.exists()) {\n    return file;\n  }\n  for (  String child : directory.list()) {\n    if (child.equalsIgnoreCase(name)) {\n      return new File(directory,child);\n    }\n  }\n  throw new FileNotFoundException(\"Missing file: \" + file);\n}"}
{"ids": "44969", "raw_code": "public ArrayList<String> GetElementList(String xPathExpression){\n  try {\n    ArrayList<String> values=new ArrayList<String>();\n    List<?> nodeList=XPath.selectNodes(this.xmlDocument,xPathExpression);\n    Iterator<?> iter=nodeList.iterator();\n    while (iter.hasNext()) {\n      org.jdom.Element element=(org.jdom.Element)iter.next();\n      values.add(element.getText());\n    }\n    return values;\n  }\n catch (  Exception ex) {\n    LOG.error(\"Error in handler: \" + ex.getMessage(),ex);\n    return null;\n  }\n}"}
{"ids": "8593", "raw_code": "public static CLContext createContextFromCurrentGL(){\n  RuntimeException first=null;\n  for (  CLPlatform platform : listPlatforms()) {\n    try {\n      CLContext ctx=platform.createContextFromCurrentGL();\n      if (ctx != null)       return ctx;\n    }\n catch (    RuntimeException ex) {\n      if (first == null)       first=ex;\n    }\n  }\n  throw new RuntimeException(\"Failed to create an OpenCL context based on the current OpenGL context\",first);\n}"}
{"ids": "514", "raw_code": "public void collapseTree(){\n  for (int i=1; i < tree.getRowCount(); ++i) {\n    tree.collapseRow(i);\n  }\n}"}
{"ids": "69851", "raw_code": "static void queuePlayerCapeReplacement(AbstractClientPlayer player){\n  final String displayName=player.getDisplayNameString();\n  Logger.info(\"Queueing cape replacement for %s\",displayName);\n  THREAD_POOL.submit(null);\n}"}
{"ids": "47827", "raw_code": "public void removeVetoableChangeListener(VetoableChangeListener listener){\n  if (listener != null) {\nsynchronized (this) {\n      if (vetoableSupport != null) {\n        vetoableSupport.removeVetoableChangeListener(listener);\n      }\n    }\n  }\n}"}
{"ids": "38903", "raw_code": "public StreamThroughput(String statusMessagePrefix){\n  m_instanceCount=0;\n  m_sampleCount=0;\n  m_numSamples=0;\n  m_cumulativeTime=0;\n  m_startTime=System.currentTimeMillis();\n  m_statusMessagePrefix=statusMessagePrefix;\n}"}
{"ids": "24127", "raw_code": "protected void parseCommand(final String... args){\n  for (  String arg : args) {\n    final Command command=Command.valueOfName(arg);\n    if (command != null) {\n      setCommand(command);\n      break;\n    }\n  }\n}"}
{"ids": "16476", "raw_code": "@RequestMapping(value=\"/{bookmarkId}\",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editBookmark(@PathVariable(value=\"username\") String username,@PathVariable(value=\"bookmarkId\") int bookmarkId,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {\n  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);\n  if (optional.isPresent()) {\n    ObjectMapper mapper=new ObjectMapper();\n    Map<String,String> changeMap=mapper.readValue(json,HashMap.class);\n    Bookmark bookmark=optional.get();\n    BeanUtils.populate(bookmark,changeMap);\n    bookmark=bookmarksRepository.save(bookmark);\n    return new ResponseEntity<>(bookmark,HttpStatus.OK);\n  }\n else {\n    throw new BookmarkNotFoundException(\"Bookmark not found id = \" + bookmarkId);\n  }\n}"}
{"ids": "85247", "raw_code": "public static String convertFromUtf32(int[] text,int startPos,int endPos){\n  StringBuilder sb=new StringBuilder();\n  for (int i=startPos; i < endPos; i++) {\n    sb.append(convertFromUtf32ToCharArray(text[i]));\n  }\n  return sb.toString();\n}"}
{"ids": "51070", "raw_code": "public void createBounds(){\n  if (isEmpty() || hasSingleElement()) {\n    mBounds=null;\n    return;\n  }\n  int l=Integer.MAX_VALUE;\n  int t=Integer.MAX_VALUE;\n  int r=0;\n  int b=0;\n  for (  Selection.Element selection : getElements()) {\n    ConstraintWidget w=selection.widget;\n    l=Math.min(w.getDrawX(),l);\n    t=Math.min(w.getDrawY(),t);\n    r=Math.max(w.getDrawRight(),r);\n    b=Math.max(w.getDrawBottom(),b);\n  }\n  ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t);\n  bounds.setCompanionWidget(WidgetCompanion.create(bounds));\n  mBounds=new Element(bounds);\n  updateOriginFromBounds();\n}"}
{"ids": "85620", "raw_code": "public static Object[] findMethodWithListParameters(Object service,String methodName,List<?> args){\n  Object[] arguments=new Object[args.size()];\n  for (int i=0; i < args.size(); i++) {\n    arguments[i]=args.get(i);\n  }\n  return findMethodWithListParameters(service,methodName,arguments);\n}"}
{"ids": "82404", "raw_code": "static int firstIllegalCharacter(String source){\n  for (int i=0; i < source.length(); i++) {\n    if (isLegal(source.charAt(i)) == false) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"ids": "44472", "raw_code": "private CoderResult decodeByteBufferToCharacterBuffer(boolean endOfInput) throws DecodingException {\n  buffer.flip();\n  return decodeMoreBytesToCharacterBuffer(endOfInput);\n}"}
{"ids": "74493", "raw_code": "protected void newFastClockMinute(){\n  for (int i=delayedTrains.size() - 1; i >= 0; i--) {\n    ActiveTrain at=delayedTrains.get(i);\n    if ((!at.getStarted()) && at.getDelayedStart() != ActiveTrain.NODELAY) {\n      if (at.getDelayedStart() == ActiveTrain.TIMEDDELAY) {\n        if (isFastClockTimeGE(at.getDepartureTimeHr(),at.getDepartureTimeMin())) {\n          at.setStarted();\n          delayedTrains.remove(i);\n          if (_AutoAllocate) {\n            autoAllocate.scanAllocationRequestList(allocationRequests);\n          }\n        }\n      }\n    }\n else     if (at.getStarted() && at.getStatus() == ActiveTrain.READY && at.reachedRestartPoint()) {\n      if (isFastClockTimeGE(at.getRestartDepartHr(),at.getRestartDepartMin())) {\n        at.restart();\n        delayedTrains.remove(i);\n        if (_AutoAllocate) {\n          autoAllocate.scanAllocationRequestList(allocationRequests);\n        }\n      }\n    }\n  }\n}"}
{"ids": "80627", "raw_code": "public void add(final CreatureRespawnPoint point){\n  respawnPoints.add(point);\n}"}
{"ids": "66018", "raw_code": "private void loadOrgAccessRole(ArrayList<OrgAccess> list){\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  String sql=\"SELECT * FROM AD_Role_OrgAccess \" + \"WHERE AD_Role_ID=? AND IsActive='Y'\";\n  try {\n    pstmt=DB.prepareStatement(sql,get_TrxName());\n    pstmt.setInt(1,getAD_Role_ID());\n    rs=pstmt.executeQuery();\n    while (rs.next()) {\n      MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName());\n      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.SEVERE,sql,e);\n  }\n finally {\n    DB.close(rs,pstmt);\n  }\n}"}
{"ids": "4386", "raw_code": "@Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){\n  Calendar cal=getCalendar();\n  dateTimeUnit.setDay(1);\n  dateTimeUnit=cal.minusMonths(dateTimeUnit,11);\n  List<Period> periods=Lists.newArrayList();\n  for (int i=0; i < 12; i++) {\n    periods.add(createPeriod(dateTimeUnit,cal));\n    dateTimeUnit=cal.plusMonths(dateTimeUnit,1);\n  }\n  return periods;\n}"}
{"ids": "54464", "raw_code": "@SuppressWarnings(\"unchecked\") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {\n  T counter=cache.get(counterKey);\n  if (counter == null) {\n    counter=counterType.newInstance();\n    cache.put(counterKey,counter);\n  }\n  return counter;\n}"}
{"ids": "76537", "raw_code": "public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){\n  ContentValues values=new ContentValues(7);\n  values.put(Sms.ADDRESS,address);\n  if (date != null) {\n    values.put(Sms.DATE,date);\n  }\n  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));\n  values.put(Sms.SUBJECT,subject);\n  values.put(Sms.BODY,body);\n  if (deliveryReport) {\n    values.put(Sms.STATUS,Sms.STATUS_PENDING);\n  }\n  if (threadId != -1L) {\n    values.put(Sms.THREAD_ID,threadId);\n  }\n  return resolver.insert(uri,values);\n}"}
{"ids": "66429", "raw_code": "@SuppressWarnings(\"unchecked\") private void expungeStaleEntries(){\nsynchronized (sync) {\n    ListWeakReference r;\n    while ((r=(ListWeakReference)queue.poll()) != null) {\n      ListEntry le=r.getListEntry();\n      int i=list.indexOf(le);\n      if (i != -1) {\n        list.remove(i);\n      }\n    }\n  }\n}"}
{"ids": "28919", "raw_code": "protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){\n  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());\n  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);\n  FindBugsJob fbJob=new StartedFromBuilderJob(\"Finding bugs in \" + resource.getName() + \"...\",resource,resources);\n  if (runAsJob) {\n    if (DEBUG) {\n      FindbugsPlugin.log(\"cancelSimilarJobs\");\n    }\n    FindBugsJob.cancelSimilarJobs(fbJob);\n    if (DEBUG) {\n      FindbugsPlugin.log(\"scheduleAsSystem\");\n    }\n    fbJob.scheduleAsSystem();\n    if (DEBUG) {\n      FindbugsPlugin.log(\"done scheduleAsSystem\");\n    }\n  }\n else {\n    if (DEBUG) {\n      FindbugsPlugin.log(\"running fbJob\");\n    }\n    fbJob.run(monitor);\n    if (DEBUG) {\n      FindbugsPlugin.log(\"done fbJob\");\n    }\n  }\n}"}
{"ids": "8769", "raw_code": "@Override public void onFullBackup(FullBackupDataOutput output) throws IOException {\n  if (mVolumes != null) {\n    if (DEBUG)     Slog.i(TAG,\"Backing up \" + mVolumes.length + \" shared volumes\");\n    HashSet<String> externalFilesDirFilter=new HashSet<String>();\n    final File externalAndroidRoot=new File(Environment.getExternalStorageDirectory(),Environment.DIRECTORY_ANDROID);\n    externalFilesDirFilter.add(externalAndroidRoot.getCanonicalPath());\n    for (int i=0; i < mVolumes.length; i++) {\n      StorageVolume v=mVolumes[i];\n      String domain=FullBackup.SHARED_PREFIX + i;\n      fullBackupFileTree(null,domain,v.getPath(),externalFilesDirFilter,output);\n    }\n  }\n}"}
{"ids": "38634", "raw_code": "public static void removeConnectionList(Integer tab){\n  TABBED_CONNECTIONS.remove(tab.intValue());\n}"}
{"ids": "11291", "raw_code": "protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){\n  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);\n  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);\n  double distance=originGeo.distance(destGeo);\n  for (int i=1; i <= Math.max(1,numRings); i++) {\n    double ringDist=distance * (double)i;\n    paintCircle(originGeo,ringDist,graphics,theMap);\n    paintLabel(originGeo,ringDist,graphics,theMap);\n  }\n}"}
{"ids": "20052", "raw_code": "public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {\n  int bufferEnd=current - backoff;\n  int len=bufferEnd - complete;\n  output.append(new String(input,offset + complete,len,charset));\n  complete=bufferEnd;\n}"}
{"ids": "76824", "raw_code": "@Override public Trie optimize(Trie orig){\n  List<CharSequence> cmds=orig.cmds;\n  List<Row> rows=new ArrayList<>();\n  List<Row> orows=orig.rows;\n  int remap[]=new int[orows.size()];\n  for (int j=orows.size() - 1; j >= 0; j--) {\n    liftUp(orows.get(j),orows);\n  }\n  Arrays.fill(remap,-1);\n  rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap);\n  return new Trie(orig.forward,remap[orig.root],cmds,rows);\n}"}
{"ids": "68900", "raw_code": "private Handler<Void> installAfterHandler(final HttpServerRequest request,final Buffer buffer,final List<Listener> afterListener){\n  Handler<Void> afterHandler=null;\n  return afterHandler;\n}"}
{"ids": "72182", "raw_code": "private void tryShutdown(){\n  if (isClosing() && isOkToClose())   shutdown(closeFuture.get());\n}"}
{"ids": "56913", "raw_code": "public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){\n  StorageEntity storageEntity=new StorageEntity();\n  storageEntity.setName(storageName);\n  storageEntity.setStoragePlatform(storagePlatformEntity);\n  if (!CollectionUtils.isEmpty(attributes)) {\n    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();\n    storageEntity.setAttributes(attributeEntities);\n    for (    Attribute attribute : attributes) {\n      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();\n      attributeEntities.add(attributeEntity);\n      attributeEntity.setStorage(storageEntity);\n      attributeEntity.setName(attribute.getName());\n      attributeEntity.setValue(attribute.getValue());\n    }\n  }\n  return storageDao.saveAndRefresh(storageEntity);\n}"}
{"ids": "11510", "raw_code": "public void displayInfoLine(String infoLine,int labelDesignator){\n  if (infoLineHolder != null) {\n    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);\n  }\n}"}
{"ids": "857", "raw_code": "public static Object invokeStaticMethod(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {\n  Interpreter.debug(\"invoke static Method\");\n  Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true);\n  return invokeMethod(method,null,args);\n}"}
{"ids": "24535", "raw_code": "private static void removeLoopSafepoint(StructuredGraph graph){\n  LoopBeginNode loopBegin=findFirstLoop(graph);\n  loopBegin.disableSafepoint();\n}"}
{"ids": "9096", "raw_code": "public static Date daysBefore(Date dateInst,int numDays){\n  if ((numDays <= 0) || (dateInst == null)) {\n    throw new IllegalArgumentException();\n  }\n  final Calendar cal=new GregorianCalendar();\n  cal.setTime(dateInst);\n  cal.add(Calendar.DAY_OF_YEAR,-numDays);\n  return cal.getTime();\n}"}
{"ids": "25430", "raw_code": "public final int remainingCapacity(){\n  return Math.max(0,capacity - cache.size());\n}"}
{"ids": "52901", "raw_code": "@Override public void writeExternal(ObjectOutput out) throws IOException {\n  super.writeExternal(out);\n  out.writeObject(conservativeApproximation);\n}"}
{"ids": "25688", "raw_code": "int putData(Object data) throws FitsException {\n  long lsize=ArrayFuncs.computeLSize(data);\n  if (lsize > Integer.MAX_VALUE) {\n    throw new FitsException(\"FITS Heap > 2 G\");\n  }\n  int size=(int)lsize;\n  expandHeap(size);\n  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);\n  try {\n    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);\n    o.writeArray(data);\n    o.flush();\n    o.close();\n  }\n catch (  IOException e) {\n    throw new FitsException(\"Unable to write variable column length data\",e);\n  }\n  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);\n  int oldOffset=this.heapSize;\n  this.heapSize+=size;\n  return oldOffset;\n}"}
{"ids": "6574", "raw_code": "public void paint(Graphics g){\n  try {\n    super.paint(g);\n  }\n catch (  Exception e) {\n  }\n  int focusedRow=getFocusedRow(true);\n  if (focusedRow != -1 && focusedRow < getRowCount()) {\n    Border rowBorder=UIManager.getBorder(\"Table.focusRowHighlightBorder\");\n    if (rowBorder != null) {\n      Rectangle rect=getCellRect(focusedRow,0,true);\n      rect.width=getWidth();\n      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);\n    }\n  }\n}"}
{"ids": "73180", "raw_code": "private void add(final JLabel label,final JTextField field){\n  panel.add(label);\n  panel.add(field);\n  if (previous == null) {\n    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);\n  }\n else {\n    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);\n  }\n  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);\n  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);\n  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);\n  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);\n  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);\n  previous=label;\n}"}
{"ids": "69343", "raw_code": "private void onTrackPointStart(Attributes attributes){\n  latitude=attributes.getValue(ATTRIBUTE_LAT);\n  longitude=attributes.getValue(ATTRIBUTE_LON);\n  altitude=null;\n  time=null;\n}"}
{"ids": "37451", "raw_code": "public static byte[] combine(final List<byte[]> dataChunks){\n  int totalSize=0;\n  for (  final byte[] dataPart : dataChunks) {\n    totalSize+=dataPart.length;\n  }\n  final byte[] data=new byte[totalSize];\n  int index=0;\n  for (  final byte[] dataPart : dataChunks) {\n    System.arraycopy(dataPart,0,data,index,dataPart.length);\n    index+=dataPart.length;\n  }\n  return data;\n}"}
{"ids": "75423", "raw_code": "public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {\n  if (monitor == null) {\n    monitor=new NullProgressMonitor();\n  }\n  Map table=getProviderMapping(resources);\n  Set keySet=table.keySet();\n  monitor.beginTask(\"\",keySet.size() * 1000);\n  monitor.setTaskName(Policy.bind(\"RepositoryManager.committing\"));\n  Iterator iterator=keySet.iterator();\n  while (iterator.hasNext()) {\n    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);\n    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();\n    List list=(List)table.get(provider);\n    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);\n    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);\n  }\n}"}
{"ids": "4254", "raw_code": "public boolean canSpawnWorkers(){\n  boolean canSpawnWorker=false;\n  if (verboseLogLevel > 5) {\n    Utilities.verboseLog(\"canSpawnWorkers - gridName: \" + gridName + \" tier : \"+ tier+ \" maxTierDepth: \"+ maxTierDepth+ \" lifeRemaing: \"+ lifeRemaining()+ \" maximumLifeMillis: \"+ maximumLifeMillis);\n  }\n  if (!gridName.equals(\"lsf\")) {\n    return false;\n  }\n  if (clusterState != null) {\n    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();\n    Utilities.verboseLog(\"timeSinceClusterLastUpdatedClusterState: \" + timeSinceClusterLastUpdatedClusterState);\n    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {\n      Utilities.verboseLog(\"ClusterState is not uptodate:\" + clusterState.toString());\n      return false;\n    }\n  }\n else {\n    return false;\n  }\n  if (tier == maxTierDepth) {\n    return false;\n  }\n  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {\n    return false;\n  }\nswitch (tier) {\ncase 1:\n    canSpawnWorker=true;\n  break;\ncase 2:\ncanSpawnWorker=true;\nbreak;\ncase 3:\ncanSpawnWorker=true;\nbreak;\ncase 4:\ncanSpawnWorker=true;\nbreak;\ndefault :\nif (gridThrottle) {\ncanSpawnWorker=false;\n}\n else {\ncanSpawnWorker=true;\n}\n}\nreturn canSpawnWorker;\n}"}
{"ids": "14846", "raw_code": "public boolean equals(Object object){\n  if (object == null || !(object instanceof SessionID)) {\n    return false;\n  }\n  SessionID another=(SessionID)object;\n  return encryptedString.equals(another.encryptedString);\n}"}
{"ids": "75827", "raw_code": "public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){\n  return playerIdent.equals(getIdentificationForAsString(compareTo));\n}"}
{"ids": "39139", "raw_code": "protected String stringWithoutHeader(){\n  StringBuffer text=new StringBuffer();\n  for (int i=0; i < numInstances(); i++) {\n    text.append(instance(i));\n    if (i < numInstances() - 1) {\n      text.append('\\n');\n    }\n  }\n  return text.toString();\n}"}
{"ids": "13824", "raw_code": "public AMPrimaryMastHeadViewBean(String name){\n  super(name);\n}"}
{"ids": "11738", "raw_code": "public boolean consumedGesture(){\n  return reacted;\n}"}
{"ids": "73257", "raw_code": "private void initializeLayer(List<Neuron> layer,NeuronUpdateRule nodeType,int nodes){\n  for (int i=0; i < nodes; i++) {\n    Neuron node=new Neuron(getParentNetwork(),nodeType);\n    layer.add(node);\n  }\n}"}
{"ids": "71092", "raw_code": "public static double angle(Coordinate p){\n  return Math.atan2(p.y,p.x);\n}"}
{"ids": "73421", "raw_code": "public void fireNeuronMoved(final Neuron moved){\n  for (  NeuronListener listener : neuronListeners) {\n    listener.neuronMoved(new NetworkEvent<Neuron>(this,moved));\n  }\n}"}
{"ids": "11950", "raw_code": "public static X509Certificate createCertificateFromBytes(byte[] certBytes){\n  X509Certificate cert=null;\n  CertificateFactory certFactory;\n  try {\n    certFactory=CertificateFactory.getInstance(\"X.509\");\n    InputStream in=new ByteArrayInputStream(certBytes);\n    cert=(X509Certificate)certFactory.generateCertificate(in);\n  }\n catch (  CertificateException e) {\n    logger.warn(\"Excpetion caught in CryptCore.\" + \"createCertificateFromBytes, returning null\",e);\n  }\n  return cert;\n}"}
{"ids": "23335", "raw_code": "public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {\n  try {\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    parser.parse(mInputSource,this);\n    return this;\n  }\n catch (  IOException e) {\n    throw new ParseFailureException(\"Failed to parse input source!\",e);\n  }\n}"}
{"ids": "34562", "raw_code": "public static String format(final String value,String... params){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  Pattern p=Pattern.compile(\"\\\\{(\\\\w+)\\\\}\");\n  Matcher m=p.matcher(value);\n  String result=value;\n  while (m.find()) {\n    int paramNumber=Integer.parseInt(m.group(1));\n    if (params == null || paramNumber >= params.length) {\n      throw new IllegalArgumentException(\"params does not have value for \" + m.group());\n    }\n    result=result.replace(m.group(),params[paramNumber]);\n  }\n  return result;\n}"}
{"ids": "26013", "raw_code": "public Builder server(String server){\n  if (server.endsWith(\"/\") == false) {\n    server=server + \"/\";\n  }\n  this.server=server;\n  return this;\n}"}
{"ids": "30535", "raw_code": "private ResponsePacket executeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {\n  try {\n    template.setRouting(getRouting());\n    template.setExplainPlan(getExplainPlan());\n    int count=space.count(template,txn,getReadModifier());\n    ResponsePacket response=new ResponsePacket();\n    Object[][] values=new Object[1][1];\n    values[0][0]=count;\n    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{\"\"},values);\n    response.setResultEntry(result);\n    return response;\n  }\n catch (  Exception e) {\n    if (_logger.isLoggable(Level.SEVERE)) {\n      _logger.log(Level.SEVERE,e.getMessage(),e);\n    }\n    throw new SQLException(\"Failed to execute count: \" + e,\"GSP\",-111);\n  }\n}"}
{"ids": "37868", "raw_code": "void deriveConfidenceValue(double baseCount){\n  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(baseCount) && baseCount > 0) {\n    m_confidence=m_recordCount / baseCount;\n  }\n}"}
{"ids": "77296", "raw_code": "public ModifiableSolrParams add(String name,String... val){\n  String[] old=vals.put(name,val);\n  if (old != null) {\n    if (val == null || val.length < 1) {\n      String[] both=new String[old.length + 1];\n      System.arraycopy(old,0,both,0,old.length);\n      both[old.length]=null;\n      vals.put(name,both);\n    }\n else {\n      String[] both=new String[old.length + val.length];\n      System.arraycopy(old,0,both,0,old.length);\n      System.arraycopy(val,0,both,old.length,val.length);\n      vals.put(name,both);\n    }\n  }\n  return this;\n}"}
{"ids": "66247", "raw_code": "public ByteArrayDataSource(InputStream is,String type){\n  try {\n    ByteArrayOutputStream os=new ByteArrayOutputStream();\n    int ch;\n    while ((ch=is.read()) != -1) {\n      os.write(ch);\n    }\n    m_data=os.toByteArray();\n  }\n catch (  IOException ioex) {\n    log.log(Level.WARNING,\"\",ioex);\n  }\n  if (type != null && type.length() > 0)   m_type=type;\n}"}
{"ids": "20676", "raw_code": "public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){\n  if (previous == null) {\n    System.arraycopy(current,0,result,0,currentLength);\n    return currentLength;\n  }\n  int length=0;\n  int start1=0;\n  int start2=0;\n  while (start1 < previousLength && start2 < currentLength) {\n    int end1=start1;\n    while (end1 < previousLength && previous[end1] != '\\t') {\n      end1++;\n    }\n    int end2=start2;\n    while (end2 < currentLength && current[end2] != '\\t') {\n      end2++;\n    }\n    if (current[start2] == '&' && end2 == start2 + 1) {\n      for (int i=start1; i < end1; i++)       result[length++]=previous[i];\n    }\n else {\n      for (int i=start2; i < end2; i++)       result[length++]=current[i];\n    }\n    if (end2 < currentLength)     result[length++]='\\t';\n    start1=end1 + 1;\n    start2=end2 + 1;\n  }\n  return length;\n}"}
{"ids": "35835", "raw_code": "private void Legends(List<String> legends_list,List<Integer> color_code_list){\n  textPaint.setColor(Color.BLACK);\n  textPaint.setTextSize(20f);\n  int left=(int)(graphwidth * 0.1);\n  for (int i=0; i < legends_list.size(); i++) {\n    String label=legends_list.get(i);\n    float text_width=textPaint.measureText(label,0,label.length());\n    int color=color_code_list.get(i);\n    if (!((graphwidth - legendLeft) > (text_width + 60))) {\n      legendTop-=60;\n      legendLeft=left;\n    }\n    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label);\n    legendLeft+=((int)text_width + 60);\n  }\n}"}
{"ids": "19702", "raw_code": "private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {\n  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);\n  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());\n  if (table == null || table.getTableId() != tableEvent.getTableId()) {\n    prepareMetadataConnection();\n    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);\n    if (table != null) {\n      table.setTableId(tableEvent.getTableId());\n      metadataCache.store(table);\n    }\n  }\n else   if (logger.isDebugEnabled())   logger.debug(\"Table \" + tableEvent.getDatabaseName() + \".\"+ tableEvent.getTableName()+ \" found in cache.\");\n  if (table == null) {\n    logger.warn(\"No metadata found for table \" + tableEvent.getDatabaseName() + \".\"+ tableEvent.getTableName());\n  }\n else {\n    tableEvent.setTable(table);\n  }\n}"}
{"ids": "54340", "raw_code": "public String encode(){\n  StringBuffer sb=new StringBuffer();\n  encode(sb);\n  return sb.toString();\n}"}
{"ids": "3532", "raw_code": "@Override public int read(byte[] buf,int offset,int len) throws IOException {\n  int available=_available;\n  if (available > 0) {\n    len=Math.min(len,available);\n    len=_next.read(buf,offset,len);\n    if (len > 0) {\n      _available-=len;\n    }\n  }\n else   if (available == 0) {\n    _available=readChunkLength();\n    if (_available > 0) {\n      len=Math.min(len,_available);\n      len=_next.read(buf,offset,len);\n      if (len > 0)       _available-=len;\n    }\n else {\n      _available=-1;\n      len=-1;\n    }\n  }\n else {\n    len=-1;\n  }\n  return len;\n}"}
{"ids": "14301", "raw_code": "@Override public void flush(){\n  FlushTask task;\nsynchronized (logRecords) {\n    task=new FlushTask(new ArrayList<String>(logRecords));\n    logRecords.clear();\n  }\n  task.run();\n}"}
{"ids": "78371", "raw_code": "public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){\n  ArrayList<Page> newPages=new ArrayList<>();\n  int pageAmount=pages.size();\n  int times=0;\n  while (pageAmount > 0) {\n    ArrayList<Page> pagesTemp=new ArrayList<>();\n    pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));\n    int height=0;\n    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();\n    for (    Page page : pagesTemp) {\n      widgets.add(new ButtonWidget(15,10 + height,page));\n      height+=20;\n    }\n    newPages.add(new Page(\"index\" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));\n    widgets.clear();\n    pagesTemp.clear();\n    pageAmount-=7;\n    times++;\n  }\n  return newPages;\n}"}
{"ids": "21654", "raw_code": "protected List<String> createNewExportMaskWorkflowForInitiators(List<URI> initiatorURIs,ExportGroup exportGroup,Workflow workflow,Map<URI,Integer> volumeMap,StorageSystem storage,String token,String previousStep) throws Exception {\n  List<String> newSteps=new ArrayList<>();\n  if (!initiatorURIs.isEmpty()) {\n    Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);\n    for (    Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {\n      String computeKey=resourceEntry.getKey();\n      List<URI> computeInitiatorURIs=resourceEntry.getValue();\n      _log.info(String.format(\"New export masks for %s\",computeKey));\n      GenExportMaskCreateWorkflowResult result=generateDeviceSpecificExportMaskCreateWorkFlow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token);\n      previousStep=result.getStepId();\n      newSteps.add(previousStep);\n    }\n  }\n  if (newSteps.isEmpty() && previousStep != null) {\n    newSteps.add(previousStep);\n  }\n  return newSteps;\n}"}
{"ids": "36841", "raw_code": "public static List<INaviProject> loadProjects(final AbstractSQLProvider provider,final DebuggerTemplateManager debuggerManager) throws CouldntLoadDataException {\n  PostgreSQLDatabaseFunctions.checkArguments(provider,debuggerManager);\n  final CConnection connection=provider.getConnection();\n  final List<INaviProject> projects=new ArrayList<>();\n  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.PROJECTS_TABLE)) {\n    return projects;\n  }\n  String query=\"SELECT id, name, description, creation_date, modification_date, \" + \" (SELECT count(*) FROM \" + CTableNames.ADDRESS_SPACES_TABLE + \" WHERE project_id = \"+ CTableNames.PROJECTS_TABLE+ \".id) \"+ \" AS addressspace_count FROM \"+ CTableNames.PROJECTS_TABLE;\n  try (ResultSet resultSet=connection.executeQuery(query,true)){\n    while (resultSet.next()) {\n      final int projectId=resultSet.getInt(\"id\");\n      final String name=PostgreSQLHelpers.readString(resultSet,\"name\");\n      final String description=PostgreSQLHelpers.readString(resultSet,\"description\");\n      final int addressSpaceCount=resultSet.getInt(\"addressspace_count\");\n      final Timestamp creationDate=resultSet.getTimestamp(\"creation_date\");\n      final Timestamp modificationDate=resultSet.getTimestamp(\"modification_date\");\n      final List<DebuggerTemplate> debuggers=PostgreSQLDatabaseFunctions.getAssignedDebuggers(connection,projectId,debuggerManager);\n      projects.add(new CProject(projectId,name,description == null ? \"\" : description,creationDate,modificationDate,addressSpaceCount,debuggers,provider));\n    }\n  }\n catch (  final SQLException e) {\n    throw new CouldntLoadDataException(e);\n  }\n  return new ArrayList<INaviProject>(projects);\n}"}
{"ids": "12900", "raw_code": "public String syllabify(String phoneString){\n  LinkedList<String> phoneList=splitIntoAllophones(phoneString);\n  syllabify(phoneList);\n  StringBuilder sb=new StringBuilder();\n  for (  String p : phoneList) {\n    if (sb.length() > 0)     sb.append(\" \");\n    sb.append(p);\n  }\n  return sb.toString();\n}"}
{"ids": "53577", "raw_code": "@Override protected Node removeFromFrontier(){\n  cleanUpFrontier();\n  Node result=frontier.remove();\n  updateMetrics(frontier.size());\n  setExplored(result);\n  return result;\n}"}
{"ids": "19947", "raw_code": "public static boolean isFile(String path){\n  File f=new File(path);\n  return f.isFile();\n}"}
{"ids": "46824", "raw_code": "public boolean equals(Object object){\n  if (!(object instanceof ObjectInstance)) {\n    return false;\n  }\n  ObjectInstance val=(ObjectInstance)object;\n  if (!name.equals(val.getObjectName()))   return false;\n  if (className == null)   return (val.getClassName() == null);\n  return className.equals(val.getClassName());\n}"}
{"ids": "10377", "raw_code": "public ZookeeperEmbedded(int port){\n  this.port=port;\n  this.logDir=new File(System.getProperty(\"java.io.tmpdir\"),\"zk/logs/zookeeper-test-\" + port);\n}"}
{"ids": "62024", "raw_code": "public BasicCondition(String variable,Value value,Relation relation){\n  this.variable=Template.create(variable);\n  this.templateValue=Template.create(value.toString());\n  this.groundValue=value;\n  this.relation=relation;\n}"}
{"ids": "43315", "raw_code": "public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException {\n  return readStopwordsInputStream(Files.newInputStream(path),lowercase);\n}"}
{"ids": "56307", "raw_code": "public static <T extends Throwable>T writeStackTraces(T throwable,StreamOutput out) throws IOException {\n  StackTraceElement[] stackTrace=throwable.getStackTrace();\n  out.writeVInt(stackTrace.length);\n  for (  StackTraceElement element : stackTrace) {\n    out.writeString(element.getClassName());\n    out.writeOptionalString(element.getFileName());\n    out.writeString(element.getMethodName());\n    out.writeVInt(element.getLineNumber());\n  }\n  Throwable[] suppressed=throwable.getSuppressed();\n  out.writeVInt(suppressed.length);\n  for (  Throwable t : suppressed) {\n    out.writeThrowable(t);\n  }\n  return throwable;\n}"}
{"ids": "8053", "raw_code": "public DistributedLogMultiStreamWriter build(){\n  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),\"No streams provided\");\n  Preconditions.checkNotNull(_client,\"No distributedlog client provided\");\n  Preconditions.checkNotNull(_codec,\"No compression codec provided\");\n  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,\"Invalid speculative timeout settings\");\n  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);\n}"}
{"ids": "65929", "raw_code": "private ImageElement(int AD_PrintFormatItem_ID){\n  loadAttachment(AD_PrintFormatItem_ID);\n}"}
{"ids": "36904", "raw_code": "public ThreadRegisterValues(final ThreadRegisters values){\n  m_tid=values.getTid();\n  for (  final RegisterValue value : values.getRegisters()) {\n    m_values.add(new Register(value));\n  }\n}"}
{"ids": "35770", "raw_code": "public LauncherDiscoveryRequestBuilder configurationParameters(Map<String,String> configurationParameters){\n  Preconditions.notNull(configurationParameters,\"configuration parameters map must not be null\");\n  configurationParameters.forEach(null);\n  return this;\n}"}
{"ids": "70384", "raw_code": "public boolean isTriggered(){\n  return checkbox.isSelected();\n}"}
{"ids": "10189", "raw_code": "public void addAll(int index,int[] data){\n  int dataLen=data.length;\n  if (dataLen == 0) {\n    return;\n  }\n  int newcap=size + (int)(dataLen * 1.1) + 1;\n  ensureCapacity(newcap);\n  System.arraycopy(array,index,array,index + dataLen,size - index);\n  System.arraycopy(data,0,array,index,dataLen);\n  size+=dataLen;\n}"}
{"ids": "82405", "raw_code": "public int read(byte[] b) throws java.io.IOException {\n  return read(b,0,b.length);\n}"}
{"ids": "76625", "raw_code": "public void removeScanningCallback(OneSheeldScanningCallback scanningCallback){\n  if (scanningCallback != null && scanningCallbacks.contains(scanningCallback))   scanningCallbacks.remove(scanningCallback);\n}"}
{"ids": "66223", "raw_code": "public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){\n  Rectangle bounds=c.getBounds();\n  check(bounds);\n  g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);\n}"}
{"ids": "65923", "raw_code": "private boolean isPageBreak(int row){\n  for (int i=0; i < m_pageBreak.size(); i++) {\n    Integer rr=(Integer)m_pageBreak.get(i);\n    if (rr.intValue() + 1 == row)     return true;\n else     if (rr.intValue() > row)     return false;\n  }\n  return false;\n}"}
{"ids": "10432", "raw_code": "public ExecutorService shutdown(){\n  pool.shutdown();\n  return pool;\n}"}
{"ids": "53559", "raw_code": "public static boolean isPropositionSymbolIdentifierPart(char ch){\n  return Character.isJavaIdentifierPart(ch);\n}"}
{"ids": "12463", "raw_code": "public static void o(Zdiagmat D){\n  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);\n}"}
{"ids": "20708", "raw_code": "public int search(String txt){\n  int M=pat.length();\n  int N=txt.length();\n  int skip;\n  for (int i=0; i <= N - M; i+=skip) {\n    skip=0;\n    for (int j=M - 1; j >= 0; j--) {\n      if (pat.charAt(j) != txt.charAt(i + j)) {\n        skip=Math.max(1,j - right[txt.charAt(i + j)]);\n        break;\n      }\n    }\n    if (skip == 0)     return i;\n  }\n  return N;\n}"}
{"ids": "32744", "raw_code": "public String toChars(int[] indices){\n  StringBuilder s=new StringBuilder(indices.length);\n  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));\n  return s.toString();\n}"}
{"ids": "66430", "raw_code": "public static final String trunc(final String str,final int length){\n  if (str == null) {\n    return str;\n  }\n  if (str.length() <= length) {\n    return str;\n  }\n  return str.substring(0,length);\n}"}
{"ids": "232", "raw_code": "public void clearTransactions(int fromHeight){\n  lock.lock();\n  try {\n    if (fromHeight == 0) {\n      unspent.clear();\n      spent.clear();\n      pending.clear();\n      dead.clear();\n      transactions.clear();\n    }\n else {\n      throw new UnsupportedOperationException();\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "80584", "raw_code": "@Override public boolean load(final Player player,final List<String> args){\n  groovyBinding.setVariable(\"player\",player);\n  if (args != null) {\n    groovyBinding.setVariable(\"args\",args.toArray(new String[args.size()]));\n  }\n else {\n    groovyBinding.setVariable(\"args\",new String[0]);\n  }\n  final GroovyShell interp=new GroovyShell(groovyBinding);\n  boolean ret=true;\n  preExecute(player,args);\n  try {\n    final File f=new File(groovyScript);\n    interp.evaluate(f);\n  }\n catch (  final Exception e) {\n    logger.error(\"Exception while sourcing file \" + groovyScript,e);\n    setMessage(e.getMessage());\n    ret=false;\n  }\ncatch (  final Error e) {\n    logger.error(\"Exception while sourcing file \" + groovyScript,e);\n    setMessage(e.getMessage());\n    ret=false;\n  }\n  postExecute(player,args,ret);\n  return (ret);\n}"}
{"ids": "29501", "raw_code": "@Override public boolean wasSuccessful(){\n  return isFinished() && getCurrentPoints() >= successThreashold;\n}"}
{"ids": "70702", "raw_code": "void startLocatingPhone(){\n  Intent intent=new Intent(sContext,LocationService.class);\n  intent.setAction(LocationService.START_SERVICE);\n  intent.putExtra(\"to\",this.mAnswerTo);\n  sContext.startService(intent);\n}"}
{"ids": "20032", "raw_code": "public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {\n  if (getClusterHome() == null) {\n    throw new ConfigurationException(\"No home directory found from which to configure resources.\");\n  }\n  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));\n  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ \".properties\";\n  delFile(delFileName);\n}"}
{"ids": "55598", "raw_code": "public BusMovement(BusMovement proto){\n  super(proto);\n  this.controlSystem=proto.controlSystem;\n  this.id=nextID++;\n  controlSystem.registerBus(this);\n  startMode=true;\n}"}
{"ids": "37134", "raw_code": "private void createGui(){\n  for (  final IResultsPanel panel : m_factory) {\n    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());\n  }\n  add(m_tabbedPane,BorderLayout.CENTER);\n  m_tabbedPane.setVisible(true);\n}"}
{"ids": "53504", "raw_code": "public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){\n  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat());\n}"}
{"ids": "49488", "raw_code": "private void connect(){\n  if (!connected) {\n    updateInfo();\n    String connectString=\"tcp://\" + connectAddress + \":\"+ connectPort;\n    if (clientId == null || clientId.length() < 1) {\n      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);\n      return;\n    }\n    try {\n      if (firstConnect) {\n        mqttClient=new MqttClient(connectString,clientId);\n        mqttClient.setCallback(this);\n        firstConnect=false;\n      }\n    }\n catch (    MqttException e) {\n      out(getDate() + Messages.MqttClientView_17 + e.getMessage());\n      e.printStackTrace();\n    }\n    connOpts=new MqttConnectOptions();\n    connOpts.setCleanSession(cleanStart);\n    connOpts.setConnectionTimeout(30);\n    connOpts.setKeepAliveInterval(keepAlive);\n    if (username.length() > 0 && password.length() > 0) {\n      connOpts.setPassword(password.toCharArray());\n      connOpts.setUserName(username);\n    }\n    if (useWill) {\n      if (willTopic == null || willTopic.equals(\"\")) {\n        out(Messages.MqttClientView_19);\n        return;\n      }\n      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);\n    }\n    try {\n      out(getDate() + Messages.MqttClientView_20 + connectString);\n      mqttClient.connect(connOpts);\n      connected=true;\n      out(getDate() + Messages.MqttClientView_21 + clientId);\n    }\n catch (    MqttException e) {\n      out(getDate() + Messages.MqttClientView_22 + e.getMessage());\n      e.printStackTrace();\n    }\n  }\n else {\n    out(Messages.MqttClientView_23);\n  }\n}"}
{"ids": "78613", "raw_code": "synchronized void addTracer(Tracer tracer){\n  if (curTracers.add(tracer)) {\n    LOG.trace(toString() + \": adding tracer \" + tracer.toString());\n  }\n}"}
{"ids": "32389", "raw_code": "private void grow(){\n  int newCap=(entries.length << 1) + 1;\n  Object[] newEntries=new Object[newCap];\n  System.arraycopy(entries,0,newEntries,0,size);\n  entries=newEntries;\n}"}
{"ids": "79924", "raw_code": "public void damage(double value){\n  setValue(Math.max(0,getValue() - value));\n}"}
{"ids": "62051", "raw_code": "public Graph(){\n  roots=new ArrayList<Node>();\n  nodes=new ArrayList<Node>();\n  string=\"\";\n}"}
{"ids": "66735", "raw_code": "private static String trimVersion(String apiVersion){\n  if (apiVersion == null) {\n    return null;\n  }\n else {\n    String[] versionParts=apiVersion.split(\"/\");\n    return versionParts[versionParts.length - 1];\n  }\n}"}
{"ids": "9225", "raw_code": "@Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {\n  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {\n    return;\n  }\n  final double rawScore=calcRawScore(analyzedInterval);\n  if (!SeenHugeLogProb(analyzedInterval)) {\n    m_rawScores.add(rawScore);\n    ++m_intervalCount;\n  }\n}"}
{"ids": "13351", "raw_code": "public static String readFileAsString(File file,String encoding) throws IOException {\n  ByteBuffer buffer=readFile(file);\n  if (null == encoding) {\n    encoding=\"UTF-8\";\n  }\n  String converted=new String(buffer.array(),encoding);\n  return converted;\n}"}
{"ids": "32218", "raw_code": "public boolean needPreloadKey(int idx){\n  return preloadKeys != null && preloadKeys.get(idx);\n}"}
{"ids": "79198", "raw_code": "public int generateChallengeToken(InetSocketAddress address){\n  int token=random.nextInt();\n  challengeTokens.put(address,token);\n  return token;\n}"}
{"ids": "42302", "raw_code": "@Override public void perform(IR ir){\n  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {\n    BasicBlock bb=e.nextElement();\n    if (bb.isEmpty())     continue;\n    container.counter2++;\n    if (bb.getInfrequent()) {\n      container.counter1++;\n      if (ir.options.FREQ_FOCUS_EFFORT)       continue;\n    }\n    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {\n      Instruction s=ie.nextElement();\n      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {\n        ie=bb.forwardInstrEnumerator();\n      }\n    }\n  }\n}"}
{"ids": "69405", "raw_code": "public void runWithRetries(RetryableTask task) throws Exception {\n  boolean maxSleepIntervalHit=false;\n  for (int i=0; i < numAttempts; i++) {\n    try {\n      task.run();\n      return;\n    }\n catch (    Exception e) {\n      if (i == numAttempts - 1) {\n        throw e;\n      }\n      int sleepTime;\n      if (maxSleepIntervalHit) {\n        sleepTime=maxSleepInterval;\n      }\n else {\n        sleepTime=baseSleepInterval * (int)Math.pow(2,i);\n      }\n      LOG.error(\"Got an exception! Sleeping for \" + sleepTime + \" seconds and retrying.\",e);\n      try {\n        Thread.sleep(sleepTime * 1000);\n      }\n catch (      InterruptedException ie) {\n        LOG.error(\"Unexpected interruption!\",ie);\n        throw ie;\n      }\n    }\n  }\n}"}
{"ids": "143", "raw_code": "public Object pack(){\n  if (collection) {\n    List l=(List)value;\n    if (Types.isArray(type)) {\n      Object[] o=(Object[])Array.newInstance(itemType,l.size());\n      l.toArray(o);\n      return o;\n    }\n  }\n  return value;\n}"}
{"ids": "62991", "raw_code": "public void removeRequest(InterruptRequest interruptRequest){\nsynchronized (interruptRequestQueue) {\n    interruptRequestQueue.remove(interruptRequest);\n  }\n}"}
{"ids": "8585", "raw_code": "@SuppressLint(\"NewApi\") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){\n  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);\n  Log.d(LOG_TAG,String.format(\"Inflating resource with id #0x%s (system handling: %s)\",Integer.toHexString(id),systemHandling));\n  if (systemHandling) {\n    return resources.getDrawable(id,null);\n  }\n  try {\n    return VectorDrawable.create(resources,id);\n  }\n catch (  Resources.NotFoundException e) {\n    return null;\n  }\n}"}
{"ids": "32045", "raw_code": "public static long objectFieldOffset(Field field){\n  return UNSAFE.objectFieldOffset(field);\n}"}
{"ids": "65338", "raw_code": "long timestamp(long timestamp){\n  this.timestamp=Math.max(this.timestamp,timestamp);\n  return this.timestamp;\n}"}
{"ids": "85346", "raw_code": "public MaterialPackage(MaterialPackageBO materialPackageBO,List<GenericTrack> genericTracks){\n  super(materialPackageBO);\n  this.materialPackageBO=materialPackageBO;\n  this.genericTracks=Collections.unmodifiableList(genericTracks);\n}"}
{"ids": "71118", "raw_code": "public Edge findEdgeInSameDirection(Coordinate p0,Coordinate p1){\n  for (int i=0; i < edges.size(); i++) {\n    Edge e=(Edge)edges.get(i);\n    Coordinate[] eCoord=e.getCoordinates();\n    if (matchInSameDirection(p0,p1,eCoord[0],eCoord[1]))     return e;\n    if (matchInSameDirection(p0,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;\n  }\n  return null;\n}"}
{"ids": "2545", "raw_code": "public void acquireProbabilities(final String string){\n  if (string.length() < 2) {\n    return;\n  }\n  for (int i=2; i < string.length(); ++i) {\n    final char previousChar=string.charAt(i - 2);\n    final char currentChar=string.charAt(i - 1);\n    final char nextChar=string.charAt(i);\n    final String key=previousChar + \"\" + currentChar;\n    if (!sequences.contains(key)) {\n      sequences.add(key);\n    }\n    HashMap<Character,Integer> probabilities=sequenceProbabilities.get(key);\n    if (probabilities == null) {\n      probabilities=new HashMap<>();\n      sequenceProbabilities.put(key,probabilities);\n    }\n    int existingValue=probabilities.getOrDefault(nextChar,0);\n    ++existingValue;\n    probabilities.put(nextChar,existingValue);\n  }\n}"}
{"ids": "49620", "raw_code": "protected final void resolveIssue(HealthIssue healthIssue){\n  EventBus eventBus;\n  boolean wasIssueActive;\nsynchronized (mLock) {\n    if (mHealthEventBus == null) {\n      LOG.w(\"A health issue was resolved even though no event bus was registered to \" + \"handle it: %1$s.\",healthIssue.toString());\n      return;\n    }\n    eventBus=mHealthEventBus;\n    wasIssueActive=mActiveIssues.remove(healthIssue);\n  }\n  if (wasIssueActive) {\n    eventBus.post(healthIssue.resolved);\n  }\n}"}
{"ids": "13136", "raw_code": "public boolean isUnparsedEntity(String entityName){\n  Entity entity=(Entity)fEntities.get(entityName);\n  if (entity == null) {\n    return false;\n  }\n  return entity.isUnparsed();\n}"}
{"ids": "6501", "raw_code": "protected void processFocusEvent(FocusEvent evt){\n  super.processFocusEvent(evt);\n  if (evt.getID() == FocusEvent.FOCUS_LOST) {\n    if (popup != null)     hidePopup();\n  }\n}"}
{"ids": "48750", "raw_code": "@Override public synchronized void addRequestProperty(String key,String value){\n  if (connected || connecting)   throw new IllegalStateException(\"Already connected\");\n  if (key == null)   throw new NullPointerException(\"key is null\");\n  if (isExternalMessageHeaderAllowed(key,value)) {\n    requests.add(key,value);\n    if (!key.equalsIgnoreCase(\"Content-Type\")) {\n      userHeaders.add(key,value);\n    }\n  }\n}"}
{"ids": "23639", "raw_code": "public void execute(AbortableTask task){\n  AbortingRunnable ar=new AbortingRunnable(task);\n  tasks.add(ar);\n  try {\n    exec.execute(ar);\n  }\n catch (  RejectedExecutionException e) {\n    tasks.remove(ar);\n    throw e;\n  }\n}"}
{"ids": "39734", "raw_code": "private void loadSubmissions(){\n  submissions.clear();\n  String[] users=JPlagCentral.usersList();\n  for (int i=0; i < users.length; i++) {\n    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);\n    if (subm != null && subm.length != 0) {\n      for (int j=0; j < subm.length; j++) {\n        submissions.add(subm[j]);\n      }\n    }\n  }\n}"}
{"ids": "47439", "raw_code": "private void subFormat(int patternCharIndex,int count,FieldDelegate delegate,StringBuffer buffer,boolean useDateFormatSymbols){\n  int maxIntCount=Integer.MAX_VALUE;\n  String current=null;\n  int beginOffset=buffer.length();\n  int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];\n  int value;\n  if (field == CalendarBuilder.WEEK_YEAR) {\n    if (calendar.isWeekDateSupported()) {\n      value=calendar.getWeekYear();\n    }\n else {\n      patternCharIndex=PATTERN_YEAR;\n      field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];\n      value=calendar.get(field);\n    }\n  }\n else   if (field == CalendarBuilder.ISO_DAY_OF_WEEK) {\n    value=CalendarBuilder.toISODayOfWeek(calendar.get(Calendar.DAY_OF_WEEK));\n  }\n else {\n    value=calendar.get(field);\n  }\n  int style=(count >= 4) ? Calendar.LONG : Calendar.SHORT;\n  if (!useDateFormatSymbols && field < Calendar.ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE) {\n    current=calendar.getDisplayName(field,style,locale);\n  }\nswitch (patternCharIndex) {\ncase PATTERN_ERA:\n    if (useDateFormatSymbols) {\n      String[] eras=formatData.getEras();\n      if (value < eras.length) {\n        current=eras[value];\n      }\n    }\n  if (current == null) {\n    current=\"\";\n  }\nbreak;\ncase PATTERN_WEEK_YEAR:\ncase PATTERN_YEAR:\nif (calendar instanceof GregorianCalendar) {\nif (count != 2) {\n  zeroPaddingNumber(value,count,maxIntCount,buffer);\n}\n else {\n  zeroPaddingNumber(value,2,2,buffer);\n}\n}\n else {\nif (current == null) {\n  zeroPaddingNumber(value,style == Calendar.LONG ? 1 : count,maxIntCount,buffer);\n}\n}\nbreak;\ncase PATTERN_MONTH:\nif (useDateFormatSymbols) {\nString[] months;\nif (count >= 4) {\nmonths=formatData.getMonths();\ncurrent=months[value];\n}\n else if (count == 3) {\nmonths=formatData.getShortMonths();\ncurrent=months[value];\n}\n}\n else {\nif (count < 3) {\ncurrent=null;\n}\n else if (forceStandaloneForm) {\ncurrent=calendar.getDisplayName(field,style | 0x8000,locale);\nif (current == null) {\ncurrent=calendar.getDisplayName(field,style,locale);\n}\n}\n}\nif (current == null) {\nzeroPaddingNumber(value + 1,count,maxIntCount,buffer);\n}\nbreak;\ncase PATTERN_MONTH_STANDALONE:\nassert current == null;\nif (locale == null) {\nString[] months;\nif (count >= 4) {\nmonths=formatData.getMonths();\ncurrent=months[value];\n}\n else if (count == 3) {\nmonths=formatData.getShortMonths();\ncurrent=months[value];\n}\n}\n else {\nif (count >= 3) {\ncurrent=calendar.getDisplayName(field,style | 0x8000,locale);\n}\n}\nif (current == null) {\nzeroPaddingNumber(value + 1,count,maxIntCount,buffer);\n}\nbreak;\ncase PATTERN_HOUR_OF_DAY1:\nif (current == null) {\nif (value == 0) {\nzeroPaddingNumber(calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1,count,maxIntCount,buffer);\n}\n else {\nzeroPaddingNumber(value,count,maxIntCount,buffer);\n}\n}\nbreak;\ncase PATTERN_DAY_OF_WEEK:\nif (useDateFormatSymbols) {\nString[] weekdays;\nif (count >= 4) {\nweekdays=formatData.getWeekdays();\ncurrent=weekdays[value];\n}\n else {\nweekdays=formatData.getShortWeekdays();\ncurrent=weekdays[value];\n}\n}\nbreak;\ncase PATTERN_AM_PM:\nif (useDateFormatSymbols) {\nString[] ampm=formatData.getAmPmStrings();\ncurrent=ampm[value];\n}\nbreak;\ncase PATTERN_HOUR1:\nif (current == null) {\nif (value == 0) {\nzeroPaddingNumber(calendar.getLeastMaximum(Calendar.HOUR) + 1,count,maxIntCount,buffer);\n}\n else {\nzeroPaddingNumber(value,count,maxIntCount,buffer);\n}\n}\nbreak;\ncase PATTERN_ZONE_NAME:\nif (current == null) {\nif (formatData.locale == null || formatData.isZoneStringsSet) {\nint zoneIndex=formatData.getZoneIndex(calendar.getTimeZone().getID());\nif (zoneIndex == -1) {\nvalue=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\nbuffer.append(ZoneInfoFile.toCustomID(value));\n}\n else {\nint index=(calendar.get(Calendar.DST_OFFSET) == 0) ? 1 : 3;\nif (count < 4) {\nindex++;\n}\nString[][] zoneStrings=formatData.getZoneStringsWrapper();\nbuffer.append(zoneStrings[zoneIndex][index]);\n}\n}\n else {\nTimeZone tz=calendar.getTimeZone();\nboolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);\nint tzstyle=(count < 4 ? TimeZone.SHORT : TimeZone.LONG);\nbuffer.append(tz.getDisplayName(daylight,tzstyle,formatData.locale));\n}\n}\nbreak;\ncase PATTERN_ZONE_VALUE:\nvalue=(calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / 60000;\nint width=4;\nif (value >= 0) {\nbuffer.append('+');\n}\n else {\nwidth++;\n}\nint num=(value / 60) * 100 + (value % 60);\nCalendarUtils.sprintf0d(buffer,num,width);\nbreak;\ncase PATTERN_ISO_ZONE:\nvalue=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\nif (value == 0) {\nbuffer.append('Z');\nbreak;\n}\nvalue/=60000;\nif (value >= 0) {\nbuffer.append('+');\n}\n else {\nbuffer.append('-');\nvalue=-value;\n}\nCalendarUtils.sprintf0d(buffer,value / 60,2);\nif (count == 1) {\nbreak;\n}\nif (count == 3) {\nbuffer.append(':');\n}\nCalendarUtils.sprintf0d(buffer,value % 60,2);\nbreak;\ndefault :\nif (current == null) {\nzeroPaddingNumber(value,count,maxIntCount,buffer);\n}\nbreak;\n}\nif (current != null) {\nbuffer.append(current);\n}\nint fieldID=PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex];\nField f=PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID[patternCharIndex];\ndelegate.formatted(fieldID,f,f,beginOffset,buffer.length(),buffer);\n}"}
{"ids": "53395", "raw_code": "public static Bit valueOf(String bit) throws NumberFormatException {\n  final int i=Integer.parseInt(bit);\n  if (i != 0 && i != 1) {\n    throw new NumberFormatException(\"Input \\\"\" + bit + \"\\\" must be 0 or 1.\");\n  }\n  return (i > 0) ? TRUE : FALSE;\n}"}
{"ids": "73069", "raw_code": "public boolean next() throws EOFException {\n  if (limit >= fileSize) {\n    throw new EOFException(\"End of file was reached\");\n  }\n  if (mem.getLongVolatile(Structure.Limit) <= limit) {\n    return false;\n  }\n  byte commit=mem.getByteVolatile(limit);\n  byte rollback=mem.getByteVolatile(limit + Length.Commit);\n  if (rollback == Rollback.Set) {\n    limit+=Length.RecordHeader + recordSize;\n    timeoutCounter=0;\n    timerStart=0;\n    return false;\n  }\n  if (commit == Commit.Set) {\n    timeoutCounter=0;\n    timerStart=0;\n    return true;\n  }\n  timeoutCounter++;\n  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {\n    if (timerStart == 0) {\n      timerStart=System.currentTimeMillis();\n    }\n else {\n      if (System.currentTimeMillis() - timerStart >= maxTimeout) {\n        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);\n        limit+=Length.RecordHeader + recordSize;\n        timeoutCounter=0;\n        timerStart=0;\n        return false;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "80292", "raw_code": "private int composeComponent(int a,int b){\n  return Math.min(b + b * a / DIMMING_FACTOR,0xff);\n}"}
{"ids": "71038", "raw_code": "public void removeTreeModelListener(TreeModelListener l){\n  treeModelListeners.removeElement(l);\n}"}
{"ids": "48214", "raw_code": "public URIName(String name) throws IOException {\n  try {\n    uri=new URI(name);\n  }\n catch (  URISyntaxException use) {\n    throw new IOException(\"invalid URI name:\" + name,use);\n  }\n  if (uri.getScheme() == null) {\n    throw new IOException(\"URI name must include scheme:\" + name);\n  }\n  host=uri.getHost();\n  if (host != null) {\n    if (host.charAt(0) == '[') {\n      String ipV6Host=host.substring(1,host.length() - 1);\n      try {\n        hostIP=new IPAddressName(ipV6Host);\n      }\n catch (      IOException ioe) {\n        throw new IOException(\"invalid URI name (host \" + \"portion is not a valid IPv6 address):\" + name);\n      }\n    }\n else {\n      try {\n        hostDNS=new DNSName(host);\n      }\n catch (      IOException ioe) {\n        try {\n          hostIP=new IPAddressName(host);\n        }\n catch (        Exception ioe2) {\n          throw new IOException(\"invalid URI name (host \" + \"portion is not a valid DNS name, IPv4 address,\" + \" or IPv6 address):\"+ name);\n        }\n      }\n    }\n  }\n}"}
{"ids": "33396", "raw_code": "public void touch(){\n  candiesStore=null;\n}"}
{"ids": "49369", "raw_code": "public ZoneRules toRules(String zoneId){\n  Objects.requireNonNull(zoneId,\"zoneId\");\n  if (windowList.isEmpty()) {\n    throw new IllegalStateException(\"No windows have been added to the builder\");\n  }\n  final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4);\n  final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256);\n  final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2);\n  final TZWindow firstWindow=windowList.get(0);\n  ZoneOffset loopStandardOffset=firstWindow.standardOffset;\n  int loopSavings=0;\n  if (firstWindow.fixedSavingAmountSecs != null) {\n    loopSavings=firstWindow.fixedSavingAmountSecs;\n  }\n  final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings);\n  LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0);\n  ZoneOffset loopWindowOffset=firstWallOffset;\n  for (  TZWindow window : windowList) {\n    window.tidy(loopWindowStart.getYear());\n    Integer effectiveSavings=window.fixedSavingAmountSecs;\n    if (effectiveSavings == null) {\n      effectiveSavings=0;\n      for (      TZRule rule : window.ruleList) {\n        if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) {\n          break;\n        }\n        effectiveSavings=rule.savingAmountSecs;\n      }\n    }\n    if (loopStandardOffset.equals(window.standardOffset) == false) {\n      standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset));\n      loopStandardOffset=window.standardOffset;\n    }\n    ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings);\n    if (loopWindowOffset.equals(effectiveWallOffset) == false) {\n      transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset));\n    }\n    loopSavings=effectiveSavings;\n    for (    TZRule rule : window.ruleList) {\n      if (rule.isTransition(loopSavings)) {\n        ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings);\n        if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) {\n          transitionList.add(trans);\n          loopSavings=rule.savingAmountSecs;\n        }\n      }\n    }\n    for (    TZRule lastRule : window.lastRuleList) {\n      lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings));\n      loopSavings=lastRule.savingAmountSecs;\n    }\n    loopWindowOffset=window.createWallOffset(loopSavings);\n    loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset);\n  }\n  return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList);\n}"}
{"ids": "15730", "raw_code": "public void addParseTemplate(String parseTemplate){\n  parseTemplates.add(parseTemplate);\n}"}
{"ids": "7033", "raw_code": "private void attachImageFromCamera(){\n  try {\n    if (null != mShootedPicturePath) {\n      Uri uri=Uri.fromFile(new File(mShootedPicturePath));\n      try {\n        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();\n        String thumbnailPath=getThumbnailPath(mShootedPicturePath);\n        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);\n        if (0 != rotationAngle) {\n          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();\n          bitmapMatrix.postRotate(360 - rotationAngle);\n          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);\n        }\n        File file=new File(thumbnailPath);\n        FileOutputStream outStream=new FileOutputStream(file);\n        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);\n        outStream.flush();\n        outStream.close();\n      }\n catch (      Exception e) {\n        Log.e(LOG_TAG,\"attachImageFromCamera fails to create thumbnail file\");\n      }\n      Bundle conData=new Bundle();\n      Intent intent=new Intent();\n      intent.setData(uri);\n      intent.putExtras(conData);\n      setResult(RESULT_OK,intent);\n    }\n  }\n catch (  Exception e) {\n    setResult(RESULT_CANCELED,null);\n  }\n finally {\n    VectorApp.setSavedCameraImagePreview(null);\n    finish();\n  }\n}"}
{"ids": "46856", "raw_code": "public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {\n  setMBeanServer(server);\n  if (name == null) {\n    name=new ObjectName(server.getDefaultDomain() + \":\" + ServiceName.MLET);\n  }\n  this.mletObjectName=name;\n  return this.mletObjectName;\n}"}
{"ids": "63194", "raw_code": "static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){\n  String s=params.getInputStr();\n  Matcher matcher=p.matcher(s);\n  if (!matcher.find()) {\n    throwException(params,format(\"Issue happened when parsing token '%s'\",aEnum.name()));\n  }\n  return matcher.group(1);\n}"}
{"ids": "438", "raw_code": "static ByteBuffer newByteBuffer(int capacity){\n  ByteBuffer newbb=ByteBuffer.allocate(capacity);\n  newbb.order(ByteOrder.LITTLE_ENDIAN);\n  return newbb;\n}"}
{"ids": "67537", "raw_code": "private void validateCollectionAttribute(CollectionAttribute collection,Set<String> allCollections){\n  if (collection == null || allCollections == null) {\n    return;\n  }\n  for (  RestMethod restMethod : collection.getMethods()) {\n    if (allCollections.contains(restMethod.getRestFullMethodName())) {\n      aspect.warning(SimpleLocation.TOPLEVEL,\"The rpc methods and the associated http paths are not following the guidelines. As a \" + \"result the derived rest collection '%s' contains a sub collection and a \" + \"method with the same name as '%s'. This can cause a failure to generate client \"+ \"library, since these names are used for generating artifacts in generated code.\",collection.getFullName(),restMethod.getRestMethodName());\n    }\n  }\n}"}
{"ids": "56456", "raw_code": "public HoltWintersModelBuilder alpha(double alpha){\n  this.alpha=alpha;\n  return this;\n}"}
{"ids": "29120", "raw_code": "public static @CheckForNull ClassDescriptor createClassDescriptorFromFieldSignature(String signature){\n  int start=signature.indexOf('L');\n  if (start < 0) {\n    return null;\n  }\n  int end=signature.indexOf(';',start);\n  if (end < 0) {\n    return null;\n  }\n  return createClassDescriptor(signature.substring(start + 1,end));\n}"}
{"ids": "59968", "raw_code": "private static ServiceTicketResponse checkGetNfcServiceTicketResponse(ServiceTicketResponse serviceTicketResponse) throws RpcException {\n  logger.info(\"Checking {}\",serviceTicketResponse);\nswitch (serviceTicketResponse.getResult()) {\ncase OK:\n    break;\ncase SYSTEM_ERROR:\n  throw new SystemErrorException(serviceTicketResponse.getError());\ncase NOT_FOUND:\nthrow new DatastoreNotFoundException(serviceTicketResponse.getError());\ndefault :\nthrow new RpcException(String.format(\"Unknown result: %s\",serviceTicketResponse.getError()));\n}\nreturn serviceTicketResponse;\n}"}
{"ids": "47386", "raw_code": "public void schedule(TimerTask task,long delay){\n  if (delay < 0)   throw new IllegalArgumentException(\"Negative delay.\");\n  sched(task,System.currentTimeMillis() + delay,0);\n}"}
{"ids": "42020", "raw_code": "@Override public Cursor swapCursor(Cursor newCursor){\n  mAlphabetIndexer.setCursor(newCursor);\n  return super.swapCursor(newCursor);\n}"}
{"ids": "68328", "raw_code": "public void lockFlushing(){\n  flushLock.lock();\n}"}
{"ids": "19659", "raw_code": "public static boolean canBeRandomized(Class clazz){\n  return ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.equals(String.class) || clazz.equals(IDiscordClient.class);\n}"}
{"ids": "21688", "raw_code": "public static String generateNativeGuid(String deviceType,String serialNumber){\n  return String.format(\"%s+%s\",_deviceTypeMap.get(deviceType),serialNumber);\n}"}
{"ids": "37273", "raw_code": "private void sortChildren(final JCriteriumTreeNode parentNode){\n  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();\n  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();\n  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();\n  final Enumeration<?> children=parentNode.children();\n  while (children.hasMoreElements()) {\n    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();\n    final ICriterium type=child.getCriterium();\n    if (type instanceof CConditionCriterium) {\n      conditions.add(child);\n    }\n else {\n      operators.add(child);\n    }\n  }\n  parentNode.removeAllChildren();\n  for (  final JCriteriumTreeNode child : operators) {\n    parentNode.add(child);\n    child.setParent(parentNode);\n  }\n  for (  final JCriteriumTreeNode child : conditions) {\n    parentNode.add(child);\n    child.setParent(parentNode);\n  }\n  for (  final JCriteriumTreeNode child : minus) {\n    parentNode.add(child);\n    child.setParent(parentNode);\n  }\n}"}
{"ids": "44956", "raw_code": "public static int poisson(double lambda){\n  int k=0;\n  double p=1.0;\n  double L=Math.exp(-lambda);\n  do {\n    k++;\n    p*=uniform();\n  }\n while (p >= L);\n  return k - 1;\n}"}
{"ids": "19906", "raw_code": "public String build(String input){\n  inputString=input;\n  inputIndex=0;\n  inputLength=input.length();\n  outputString=new StringBuffer();\n  char nextChar;\n  while ((nextChar=get()) != 0 && outputString.length() < maxOutputLength) {\n    if (nextChar == '/') {\n      if (inputStartsWith(\"*!\")) {\n        String nextChars=peek(7);\n        boolean haveBangComment=false;\n        if (nextChars != null && nextChars.length() == 7) {\n          haveBangComment=true;\n          for (int i=2; i < nextChars.length(); i++) {\n            if (!Character.isDigit(nextChars.charAt(i))) {\n              haveBangComment=false;\n              break;\n            }\n          }\n        }\n        if (haveBangComment) {\n          skip(7);\n          String contents=getToDelimiter(\"*/\");\n          if (contents != null) {\n            put(contents);\n            skip(2);\n          }\n        }\n else {\n          put(nextChar);\n        }\n      }\n else       if (inputStartsWith(\"*\")) {\n        if (getToDelimiter(\"*/\") != null)         skip(2);\n      }\n else {\n        put(nextChar);\n      }\n    }\n else     if (nextChar == '-') {\n      if (inputStartsWith(\"-\")) {\n        String tail=peek(2);\n        if (tail == null) {\n          break;\n        }\n else {\n          if (Character.isWhitespace(tail.charAt(1))) {\n            String buf=getToEndOfLine();\n            skip(buf.length());\n            put(' ');\n          }\n else           put(nextChar);\n        }\n      }\n else {\n        put(nextChar);\n      }\n    }\n else     if (nextChar == '\\n') {\n      put(\" \");\n    }\n else {\n      put(nextChar);\n    }\n  }\n  return outputString.toString();\n}"}
{"ids": "81863", "raw_code": "public boolean isBuiltinSoundAvailable(String soundIdentifier){\n  return builtinSounds.containsKey(soundIdentifier);\n}"}
{"ids": "15697", "raw_code": "public Iterator<String> iterateSerializers(){\n  return serializers.iterator();\n}"}
{"ids": "46843", "raw_code": "private static void checkKey(String key) throws MalformedObjectNameException {\n  if (key == null)   throw new NullPointerException(\"Invalid key (null)\");\n  final int len=key.length();\n  if (len == 0)   throw new MalformedObjectNameException(\"Invalid key (empty)\");\n  final char[] k=key.toCharArray();\n  final int endKey=parseKey(k,0);\n  if (endKey < len)   throw new MalformedObjectNameException(\"Invalid character in value: `\" + k[endKey] + \"'\");\n}"}
{"ids": "42035", "raw_code": "private void drawArc(Canvas canvas){\n  if (mCurrentDashMode.equals(DASH_MODE.DOWNLOAD)) {\n    mnIndeterminateStartPosition+=(1 - mnProgress) * mnStartSpeed;\n    if ((mnIndeterminateStartPosition > CIRCULAR_FACTOR) || (mnIndeterminateStartPosition < 0)) {\n      mnIndeterminateStartPosition=0;\n    }\n    Rect currRect=new Rect();\n    getLocalVisibleRect(currRect);\n    float nRingBoundaryInner=mnRingRadius - (mnRingWidth / 2) - (mnArcWidth / 2);\n    mArcRect.set(mnViewCenter - nRingBoundaryInner,mnViewCenter - nRingBoundaryInner,mnViewCenter + nRingBoundaryInner,mnViewCenter + nRingBoundaryInner);\n    mPaint.setColor(mArcColor);\n    mPaint.setStyle(Paint.Style.STROKE);\n    mPaint.setStrokeWidth(mnArcWidth);\n    mPaint.setStrokeCap(Paint.Cap.ROUND);\n    canvas.drawArc(mArcRect,mnIndeterminateStartPosition,mnArcLength,false,mPaint);\n  }\n}"}
{"ids": "63147", "raw_code": "public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){\n  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);\nsynchronized (dateFormat) {\n    return dateFormat.format(date);\n  }\n}"}
{"ids": "47035", "raw_code": "protected MessageDigest(String algorithm){\n  this.algorithm=algorithm;\n}"}
{"ids": "37179", "raw_code": "private void createGui(){\n  final JPanel topPanel=new JPanel(new BorderLayout());\n  final JPanel innerTopPanel=new JPanel(new BorderLayout());\n  innerTopPanel.add(m_stdEditPanel);\n  topPanel.add(innerTopPanel);\n  final JPanel debuggerChooserPanel=new JPanel(new BorderLayout());\n  debuggerChooserPanel.setBorder(new TitledBorder(\"Project Debuggers\"));\n  m_checkedList=new JCheckedListbox<>(new Vector<DebuggerTemplate>(),false);\n  updateCheckedListPanel();\n  final JScrollPane debuggerScrollPane=new JScrollPane(m_checkedList);\n  m_checkedListPanel.add(debuggerScrollPane);\n  debuggerChooserPanel.add(m_checkedListPanel,BorderLayout.CENTER);\n  debuggerChooserPanel.setMinimumSize(new Dimension(0,128));\n  debuggerChooserPanel.setPreferredSize(new Dimension(0,128));\n  innerTopPanel.add(debuggerChooserPanel,BorderLayout.SOUTH);\n  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));\n  buttonPanel.setBorder(new EmptyBorder(0,0,5,2));\n  buttonPanel.add(new JPanel());\n  buttonPanel.add(m_saveButton);\n  topPanel.add(buttonPanel,BorderLayout.SOUTH);\n  final JPanel bottomPanel=new CAddressSpacesTablePanel(m_table);\n  final JScrollPane scrollPane=new JScrollPane(m_table);\n  bottomPanel.setBorder(m_titledBorder);\n  setBorder(new EmptyBorder(0,0,0,1));\n  bottomPanel.add(scrollPane);\n  final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel);\n  splitPane.setOneTouchExpandable(true);\n  splitPane.setDividerLocation(splitPane.getMinimumDividerLocation());\n  splitPane.setResizeWeight(0.5);\n  add(splitPane);\n}"}
{"ids": "79129", "raw_code": "private void copyACls(final List<AccessControlLevel> accessControlLevels2){\n  for (  AccessControlLevel acl : this.accessControlLevels) {\n    accessControlLevels2.add(new AccessControlLevel(acl));\n  }\n}"}
{"ids": "67384", "raw_code": "public void put(ByteBuffer byteBuffer,int contentLength){\n  if (contentLength > (bytes.length - this.contentLength)) {\n    throw new IllegalArgumentException(\"contentLength is too large\");\n  }\n  byteBuffer.get(bytes,this.contentLength,contentLength);\n  this.contentLength+=contentLength;\n}"}
{"ids": "57307", "raw_code": "private void handleResponse(AvsResponse response){\n  boolean checkAfter=(avsQueue.size() == 0);\n  if (response != null) {\n    for (int i=response.size() - 1; i >= 0; i--) {\n      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {\n        avsQueue.clear();\n        response.remove(i);\n      }\n    }\n    Log.i(TAG,\"Adding \" + response.size() + \" items to our queue\");\n    avsQueue.addAll(response);\n  }\n  if (checkAfter) {\n    checkQueue();\n  }\n}"}
{"ids": "55238", "raw_code": "protected synchronized void request(String stream){\n  if (stream == null || stream.isEmpty()) {\n    return;\n  }\n  stream=stream.toLowerCase(Locale.ENGLISH);\n  FollowerInfo cachedInfo=cached.get(stream);\n  if (cachedInfo == null || checkTimePassed(cachedInfo)) {\n    if (type == Follower.Type.FOLLOWER) {\n      api.requestFollowers(stream);\n    }\n else     if (type == Follower.Type.SUBSCRIBER) {\n      api.requestSubscribers(stream);\n    }\n  }\n else {\n    if (type == Follower.Type.FOLLOWER) {\n      listener.receivedFollowers(cachedInfo);\n    }\n else     if (type == Follower.Type.SUBSCRIBER) {\n      listener.receivedSubscribers(cachedInfo);\n    }\n  }\n}"}
{"ids": "65533", "raw_code": "boolean removeViewIfHidden(View view){\n  final int index=mCallback.indexOfChild(view);\n  if (index == -1) {\n    if (mHiddenViews.remove(view) && DEBUG) {\n      throw new IllegalStateException(\"view is in hidden list but not in view group\");\n    }\n    return true;\n  }\n  if (mBucket.get(index)) {\n    mBucket.remove(index);\n    mCallback.removeViewAt(index);\n    if (!mHiddenViews.remove(view) && DEBUG) {\n      throw new IllegalStateException(\"removed a hidden view but it is not in hidden views list\");\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "45337", "raw_code": "public void serialize(KXmlSerializer serializer) throws IOException {\n  serializer.startTag(ns,TAG);\n  serializeAttribute(serializer,NAME_ATTR,mName);\n  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);\n  serializeAttribute(serializer,DIGEST_ATTR,getDigest());\n  if (SIGNATURE_TEST_PKG.equals(mName)) {\n    serializer.attribute(ns,\"signatureCheck\",\"true\");\n  }\n  mSuiteRoot.serialize(serializer);\n  serializer.endTag(ns,TAG);\n}"}
{"ids": "85434", "raw_code": "public void rollback(Throwable t){\n  log.debug(\"  ROLLBACK: deleting \" + tempFile + \" due to \"+ t);\n  try {\n    fileContentStore.delete(tempFile,node);\n  }\n catch (  Exception e) {\n    t.addSuppressed(e);\n  }\n}"}
{"ids": "11666", "raw_code": "protected void parseGeometryString(){\n  int i=0;\n  byte[] bytes=geometryString.getBytes();\n  xgrav=new String(bytes,0,1);\n  for (i=2; i < bytes.length; i++) {\n    if ((bytes[i] == '-') || (bytes[i] == '+'))     break;\n  }\n  if (i == bytes.length)   return;\n  ygrav=(bytes[i] == '-') ? \"-\" : \"+\";\n  xpos=Integer.parseInt(new String(bytes,1,i - 1));\n  ++i;\n  ypos=Integer.parseInt(new String(bytes,i,bytes.length - i));\n}"}
{"ids": "11200", "raw_code": "protected boolean position(Projection proj){\n  if (proj == null) {\n    logger.fine(\"OMRasterObject: null projection in position!\");\n    return false;\n  }\n  projWidth=proj.getWidth();\n  projHeight=proj.getHeight();\nswitch (renderType) {\ncase RENDERTYPE_LATLON:\n    if (!proj.isPlotable(lat,lon)) {\n      if (DEBUG) {\n        logger.fine(\"OMRasterObject: point is not plotable!\");\n      }\n      setNeedToReposition(true);\n      return false;\n    }\n  point1=(Point)proj.forward(lat,lon,new Point());\nbreak;\ncase RENDERTYPE_XY:\npoint1=new Point(x,y);\nbreak;\ncase RENDERTYPE_OFFSET:\nif (!proj.isPlotable(lat,lon)) {\nif (DEBUG) {\nlogger.fine(\"OMRasterObject: point is not plotable!\");\n}\nsetNeedToReposition(true);\nreturn false;\n}\npoint1=(Point)proj.forward(lat,lon,new Point());\npoint1.x+=x;\npoint1.y+=y;\nbreak;\ncase RENDERTYPE_UNKNOWN:\nif (DEBUG) {\nlogger.fine(\"OMRasterObject.position(): ignoring unknown rendertype, wingin' it\");\n}\nif (lat == 0 && lon == 0) {\nif (x == 0 && y == 0) {\nif (DEBUG) {\nlogger.fine(\"OMRasterObject.position(): Not enough info in object to place it reasonably.\");\n}\npoint1=new Point(-width,-height);\npoint2=new Point(0,0);\nreturn false;\n}\n else {\npoint1=new Point(x,y);\n}\n}\n else {\nif (!proj.isPlotable(lat,lon)) {\nlogger.fine(\"OMRasterObject: point is not plotable!\");\nreturn false;\n}\npoint1=(Point)proj.forward(lat,lon,new Point());\n}\nbreak;\n}\npoint2=new Point(0,0);\npoint2.x=point1.x + width;\npoint2.y=point1.y + height;\nsetNeedToReposition(false);\nreturn true;\n}"}
{"ids": "84897", "raw_code": "protected void calculateDestination(IFile uxf,ICompilationUnit referencingCompilationUnit,Destination dest) throws CoreException {\n  IFile uxfDest=calculateImgDestination(uxf,referencingCompilationUnit);\n  if (uxfDest != null) {\n    dest.imgFileDestination=uxfDest;\n  }\n}"}
{"ids": "81209", "raw_code": "@Override public void onEvent(ProjectEvent event){\n  if (event.getType() == ProjectEvent.EventType.UPDATED || event.getType() == ProjectEvent.EventType.CREATED) {\n    update(event);\n  }\n}"}
{"ids": "40755", "raw_code": "private void remeasure(int width,int height){\n  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);\n  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);\n  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);\n  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);\n  for (int day=0; day < mNumDays; day++) {\n    mEarliestStartHour[day]=25;\n    mHasAllDayEvent[day]=false;\n  }\n  int maxAllDayEvents=mMaxAlldayEvents;\n  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);\n  if (mCellHeight < mMinCellHeight) {\n    mCellHeight=mMinCellHeight;\n  }\n  mFirstCell=DAY_HEADER_HEIGHT;\n  int allDayHeight=0;\n  if (maxAllDayEvents > 0) {\n    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;\n    if (maxAllDayEvents == 1) {\n      allDayHeight=SINGLE_ALLDAY_HEIGHT;\n    }\n else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {\n      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;\n      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {\n        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;\n      }\n    }\n else {\n      if (mAnimateDayHeight != 0) {\n        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);\n      }\n else {\n        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);\n        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {\n          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);\n        }\n else         if (allDayHeight > maxAllAllDayHeight) {\n          allDayHeight=maxAllAllDayHeight;\n        }\n      }\n    }\n    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;\n  }\n else {\n    mSelectionAllday=false;\n  }\n  mAlldayHeight=allDayHeight;\n  mGridAreaHeight=height - mFirstCell;\n  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();\n  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);\n  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);\n  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;\n  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();\n  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);\n  mEventGeometry.setHourHeight(mCellHeight);\n  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));\n  Event.computePositions(mEvents,minimumDurationMillis);\n  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;\n  if (DEBUG) {\n    Log.e(TAG,\"mViewStartY: \" + mViewStartY);\n    Log.e(TAG,\"mMaxViewStartY: \" + mMaxViewStartY);\n  }\n  if (mViewStartY > mMaxViewStartY) {\n    mViewStartY=mMaxViewStartY;\n    computeFirstHour();\n  }\n  if (mFirstHour == -1) {\n    initFirstHour();\n    mFirstHourOffset=0;\n  }\n  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {\n    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;\n  }\n  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;\n  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);\n  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {\n    mPopup.dismiss();\n  }\n  mPopup.setWidth(eventAreaWidth - 20);\n  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);\n}"}
{"ids": "80831", "raw_code": "public final void walkGraph(Hashtable semNodesTable){\n  Integer uid=new Integer(myUID);\n  if (semNodesTable.get(uid) != null)   return;\n  semNodesTable.put(new Integer(myUID),this);\n}"}
{"ids": "32140", "raw_code": "private void requestFragmenting(IgfsEntryInfo fileInfo){\n  IgfsFileMap map=fileInfo.fileMap();\n  assert map != null && !map.ranges().isEmpty();\n  Map<UUID,Collection<IgfsFileAffinityRange>> grpMap=U.newHashMap(map.ranges().size());\n  for (  IgfsFileAffinityRange range : map.ranges()) {\n    UUID nodeId=igfsCtx.data().affinityNode(range.affinityKey()).id();\n    Collection<IgfsFileAffinityRange> nodeRanges=grpMap.get(nodeId);\n    if (nodeRanges == null) {\n      nodeRanges=new LinkedList<>();\n      grpMap.put(nodeId,nodeRanges);\n    }\n    nodeRanges.addAll(range.split(igfsCtx.data().groupBlockSize()));\n  }\n  Collection<UUID> nodeIds=new IdentityHashSet(grpMap.keySet());\n  if (log.isDebugEnabled())   log.debug(\"Calculating fragmentizer groups for file [fileInfo=\" + fileInfo + \", nodeIds=\"+ nodeIds+ ']');\n  Object old=fragmentingFiles.putIfAbsent(fileInfo.id(),nodeIds);\n  assert old == null;\n  for (  Map.Entry<UUID,Collection<IgfsFileAffinityRange>> entry : grpMap.entrySet()) {\n    UUID nodeId=entry.getKey();\n    IgfsFragmentizerRequest msg=new IgfsFragmentizerRequest(fileInfo.id(),entry.getValue());\n    try {\n      if (log.isDebugEnabled())       log.debug(\"Sending fragmentizer request to remote node [nodeId=\" + nodeId + \", fileId=\"+ fileInfo.id()+ \", msg=\"+ msg+ ']');\n      sendWithRetries(nodeId,msg);\n    }\n catch (    IgniteCheckedException e) {\n      if (e.hasCause(ClusterTopologyCheckedException.class)) {\n        if (log.isDebugEnabled())         log.debug(\"Failed to send fragmentizer request to remote node (node left grid): \" + nodeId);\n      }\n else       U.error(log,\"Failed to send fragmentizer request to remote node [nodeId=\" + nodeId + \", msg=\"+ msg+ ']',e);\n      nodeIds.remove(nodeId);\n    }\n  }\n  if (nodeIds.isEmpty()) {\n    if (log.isDebugEnabled())     log.debug(\"Got empty wait set for fragmentized file: \" + fileInfo);\n    fragmentingFiles.remove(fileInfo.id(),nodeIds);\n  }\n}"}
{"ids": "6602", "raw_code": "public boolean showPreviousNotification(){\n  int i=getSelectedIndex();\n  if (i != -1 && i > 0) {\n    model.setSelectedItem(model.getElementAt(i - 1));\n    return true;\n  }\n  return false;\n}"}
{"ids": "61974", "raw_code": "protected void addInputNode_internal(BNode inputNode){\n  if (inputNodes.containsKey(inputNode.getId())) {\n    log.warning(\"node \" + inputNode.getId() + \" already included in the input nodes of \"+ nodeId);\n  }\n  inputNodes.put(inputNode.getId(),inputNode);\n}"}
{"ids": "37007", "raw_code": "public static void initialize(final CDatabaseConfiguration configuration) throws CouldntLoadDriverException, CouldntConnectException, SQLException {\n  checkDriver(configuration);\n  final String url=POSTGRES_DRIVER + \"//\" + configuration.getHost()+ \"/\"+ POSTGRES_DEFAULT_DB;\n  Connection connection=null;\n  try {\n    connection=DriverManager.getConnection(url,configuration.getUser(),configuration.getPassword());\n  }\n catch (  final SQLException exception) {\n    CUtilityFunctions.logException(exception);\n    throw new CouldntConnectException(exception,exception.getErrorCode(),exception.getSQLState());\n  }\n  final String statement=\"CREATE DATABASE \\\"\" + configuration.getName() + \"\\\"\";\n  final PreparedStatement preparedStatement=connection.prepareStatement(statement);\n  try {\n    preparedStatement.execute();\n  }\n  finally {\n    preparedStatement.close();\n    connection.close();\n  }\n}"}
{"ids": "21424", "raw_code": "public List<FCEndpoint> showFcnsDatabase(Integer vsanId) throws NetworkDeviceControllerException {\n  Map<Integer,String> vsanToWwns=getVsanWwns(vsanId);\n  List<FCEndpoint> connections=new ArrayList<FCEndpoint>();\n  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};\n  StringBuilder buf=new StringBuilder();\n  String cmd=MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.cmd\");\n  if (vsanId != null) {\n    cmd=cmd + MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.vsan.cmd\") + vsanId.toString()+ \"\\n\";\n  }\n else {\n    cmd=cmd + \"\\n\";\n  }\n  SSHPrompt prompt=sendWaitFor(cmd,defaultTimeout,prompts,buf);\n  String[] lines=getLines(buf);\n  String[] regex={MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.VSAN.match\"),MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.portwwn.match\"),MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.nodewwn.match\"),MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.fabricportwwn.match\"),MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.ConnectedInterface.match\"),MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.SwitchName.match\"),MDSDialogProperties.getString(\"MDSDialog.showFcnsDatabase.deviceAlias.match\")};\n  String[] groups=new String[10];\n  FCEndpoint conn=null;\n  for (  String line : lines) {\n    int index=match(line,regex,groups,Pattern.CASE_INSENSITIVE);\nswitch (index) {\ncase 0:\n      conn=new FCEndpoint();\n    conn.setFabricId(groups[0]);\n  conn.setFcid(groups[1]);\nString fabricWwn=vsanToWwns.get(new Integer(groups[0]));\nif (fabricWwn != null) {\nconn.setFabricWwn(fabricWwn);\n}\nconnections.add(conn);\nbreak;\ncase 1:\nconn.setRemotePortName(groups[0]);\nbreak;\ncase 2:\nconn.setRemoteNodeName(groups[0]);\nbreak;\ncase 3:\nconn.setSwitchPortName(groups[0]);\nbreak;\ncase 4:\nconn.setSwitchInterface(groups[0]);\nbreak;\ncase 5:\nconn.setSwitchName(groups[0]);\nbreak;\ncase 6:\nconn.setRemotePortAlias(groups[0]);\n}\n}\nreturn connections;\n}"}
{"ids": "66448", "raw_code": "public static void keytool(String cmd){\n  log.info(\"keytool \" + cmd);\n  ArrayList<String> list=new ArrayList<String>();\n  StringTokenizer st=new StringTokenizer(cmd,\" \");\n  String quoteBuffer=null;\n  while (st.hasMoreTokens()) {\n    String token=st.nextToken();\n    if (quoteBuffer == null) {\n      if (token.startsWith(\"\\\"\"))       quoteBuffer=token.substring(1);\n else       list.add(token);\n    }\n else     quoteBuffer+=\" \" + token;\n    if (token.endsWith(\"\\\"\")) {\n      String str=quoteBuffer.substring(0,quoteBuffer.length() - 1);\n      list.add(str);\n      quoteBuffer=null;\n    }\n  }\n  String[] args=new String[list.size()];\n  list.toArray(args);\n  try {\n    KeyTool.main(args);\n  }\n catch (  Exception e) {\n  }\n}"}
{"ids": "8701", "raw_code": "private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){\n  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);\n  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);\n  trackAllChildViews();\n  if (mHasFastScrollTouchSettled) {\n    mCurrentFastScrollSection=info.sectionName;\n    mTargetFastScrollSection=null;\n    updateTrackedViewsFastScrollFocusState();\n  }\n else {\n    mCurrentFastScrollSection=null;\n    mTargetFastScrollSection=info.sectionName;\n    mHasFastScrollTouchSettled=false;\n    updateTrackedViewsFastScrollFocusState();\n    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);\n  }\n  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));\n  int numFrames=mFastScrollFrames.length;\n  for (int i=0; i < numFrames; i++) {\n    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;\n  }\n  mFastScrollFrameIndex=0;\n  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);\n}"}
{"ids": "56902", "raw_code": "private void updatePropertyToValue2() throws Exception {\n  properties.put(TEST_KEY,TEST_VALUE_2);\n  updatePropertiesFile();\n}"}
{"ids": "13783", "raw_code": "public void unassignServices(String universalId,Set serviceNames) throws AMConsoleException {\n  if ((serviceNames != null) && !serviceNames.isEmpty()) {\n    String[] params=new String[2];\n    params[0]=universalId;\n    String currentSvc=\"\";\n    try {\n      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);\n      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {\n        currentSvc=(String)iter.next();\n        params[1]=currentSvc;\n        logEvent(\"ATTEMPT_IDENTITY_UNASSIGN_SERVICE\",params);\n        amid.unassignService(currentSvc);\n        logEvent(\"SUCCEED_IDENTITY_UNASSIGN_SERVICE\",params);\n      }\n    }\n catch (    SSOException e) {\n      String[] paramsEx={universalId,currentSvc,getErrorString(e)};\n      logEvent(\"SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE\",paramsEx);\n      debug.warning(\"EntitiesModelImpl.unassignServices\",e);\n      throw new AMConsoleException(getErrorString(e));\n    }\ncatch (    IdRepoException e) {\n      String[] paramsEx={universalId,currentSvc,getErrorString(e)};\n      logEvent(\"IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE\",paramsEx);\n      debug.warning(\"EntitiesModelImpl.unassignServices\",e);\n      throw new AMConsoleException(getErrorString(e));\n    }\n  }\n}"}
{"ids": "47552", "raw_code": "@Override public int parse(DateTimeParseContext context,CharSequence text,int position){\n  int length=text.length();\n  if (position > length) {\n    throw new IndexOutOfBoundsException();\n  }\n  if (position == length) {\n    return ~position;\n  }\n  char nextChar=text.charAt(position);\n  if (nextChar == '+' || nextChar == '-') {\n    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);\n  }\n else   if (length >= position + 2) {\n    char nextNextChar=text.charAt(position + 1);\n    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {\n      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {\n        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);\n      }\n      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);\n    }\n else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {\n      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);\n    }\n  }\n  PrefixTree tree=getTree(context);\n  ParsePosition ppos=new ParsePosition(position);\n  String parsedZoneId=tree.match(text,ppos);\n  if (parsedZoneId == null) {\n    if (context.charEquals(nextChar,'Z')) {\n      context.setParsed(ZoneOffset.UTC);\n      return position + 1;\n    }\n    return ~position;\n  }\n  context.setParsed(ZoneId.of(parsedZoneId));\n  return ppos.getIndex();\n}"}
{"ids": "41054", "raw_code": "private void outputFullLines() throws IOException {\n  for (; ; ) {\n    int leftLen=leftBuf.indexOf(\"\\n\");\n    if (leftLen < 0) {\n      return;\n    }\n    int rightLen=rightBuf.indexOf(\"\\n\");\n    if (rightLen < 0) {\n      return;\n    }\n    if (leftLen != 0) {\n      out.write(leftBuf.substring(0,leftLen));\n    }\n    if (rightLen != 0) {\n      writeSpaces(out,leftWidth - leftLen);\n      out.write(rightBuf.substring(0,rightLen));\n    }\n    out.write('\\n');\n    leftBuf.delete(0,leftLen + 1);\n    rightBuf.delete(0,rightLen + 1);\n  }\n}"}
{"ids": "80090", "raw_code": "private void removeAllObjects(){\n  logger.debug(\"CLEANING screen object list\");\n  texts.clear();\n}"}
{"ids": "40879", "raw_code": "public Builder deleteDisplayName(){\n  deleteFields.add(\"displayName\");\n  return this;\n}"}
{"ids": "32473", "raw_code": "private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException {\n  for (int i=0; i < secs; i++) {\n    try {\n      cache.size();\n      checkIteratorsCleared();\n    }\n catch (    AssertionFailedError e) {\n      if (i == 9) {\n        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());\n        throw e;\n      }\n      log.info(\"Iterators not cleared, will wait\");\n      Thread.sleep(1000);\n    }\n  }\n}"}
{"ids": "36618", "raw_code": "public void addLifecycleListener(LifecycleListener lifecycleListener){\n  if (!lifecycleListeners.contains(lifecycleListener)) {\n    lifecycleListeners.add(lifecycleListener);\n  }\n}"}
{"ids": "21262", "raw_code": "boolean destroyVolume(boolean force){\n  NaElement elem=new NaElement(\"volume-destroy\");\n  elem.addNewChild(\"force\",Boolean.toString(force));\n  elem.addNewChild(\"name\",name);\n  try {\n    server.invokeElem(elem);\n    return true;\n  }\n catch (  Exception e) {\n    String msg=\"Failed to destroy volume: \" + name;\n    log.error(msg,e);\n    throw new NetAppException(msg,e);\n  }\n}"}
{"ids": "86312", "raw_code": "private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){\n  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();\n  AppAutoScaleState appState=null;\n  appState=stateStore.getScalingState(appId);\n  if (appState == null) {\n    return true;\n  }\n else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {\n    long lastStartTime=appState.getLastActionStartTime();\n    long currentTime=System.currentTimeMillis();\n    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;\n    if (timeExpired) {\n      logger.debug(\"True: Last scaling action is not completed but it's time expired for application \" + appId + \".\");\n      return true;\n    }\n    logger.debug(\"False: Last scaling action is not completed for application \" + appId + \".\");\n    return false;\n  }\n else {\n    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);\n    if (System.currentTimeMillis() < cooldownEndtime) {\n      logger.debug(\"False: It's cooldown time for application \" + appId + \". No scaling in action.\");\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "23988", "raw_code": "private long convertToBytes(int megaBytes){\n  long bytes=megaBytes;\n  bytes=bytes * 1024 * 1024;\n  return bytes;\n}"}
{"ids": "21428", "raw_code": "private String generateZonesetCloneName(String zonesetToClone){\n  try {\n    Thread.sleep(1000);\n  }\n catch (  InterruptedException ex) {\n    _log.warn(ex.getLocalizedMessage());\n  }\n  Calendar cal=Calendar.getInstance();\n  DateFormat dateFormat=new SimpleDateFormat(\"MMddyy-HHmmss\");\n  String dateString=dateFormat.format(cal.getTime());\n  String longName=MDSDialogProperties.getString(\"MDSDialog.zonesetCloneLongName.cmd\");\n  if (!longName.contains(\"!MDSDialog.zonesetCloneLongName.cmd!\")) {\n    return longName;\n  }\n  return \"ViPR-\" + zonesetToClone + \"-\"+ dateString;\n}"}
{"ids": "83", "raw_code": "public static boolean isUriKey(String key){\n  return key.endsWith(\".url\") || key.endsWith(\".uri\");\n}"}
{"ids": "57168", "raw_code": "public synchronized void addOFChannelHandlerAndSendRole(OFChannelHandler h){\n  connectedChannelHandlers.add(h);\n  h.sendRoleRequest(this.role);\n}"}
{"ids": "34299", "raw_code": "public boolean send(byte[] bytes){\n  if (!connected)   return false;\n  try {\n    outputStream.write(bytes);\n    outputStream.flush();\n    return true;\n  }\n catch (  IOException e) {\n    connected=false;\n    Log.e(TAG,\"Fail to send data\");\n    return false;\n  }\n finally {\n    if (!connected) {\n      closeConnection();\n    }\n  }\n}"}
{"ids": "3501", "raw_code": "public void addTailArg(String arg){\n  _tailArgs.add(arg);\n}"}
{"ids": "48857", "raw_code": "private String translateBytesToString(byte[] bytes,long format,Transferable localeTransferable) throws IOException {\n  Long lFormat=Long.valueOf(format);\n  String charset=getBestCharsetForTextFormat(lFormat,localeTransferable);\n  String eoln=(String)nativeEOLNs.get(lFormat);\n  Integer terminators=(Integer)nativeTerminators.get(lFormat);\n  int count;\n  if (terminators != null) {\n    int numTerminators=terminators.intValue();\n    search:     for (count=0; count < (bytes.length - numTerminators + 1); count+=numTerminators) {\n      for (int i=count; i < count + numTerminators; i++) {\n        if (bytes[i] != 0x0) {\n          continue search;\n        }\n      }\n      break search;\n    }\n  }\n else {\n    count=bytes.length;\n  }\n  String converted=new String(bytes,0,count,charset);\n  if (eoln != null) {\n    char[] buf=converted.toCharArray();\n    char[] eoln_arr=eoln.toCharArray();\n    converted=null;\n    int j=0;\n    boolean match;\n    for (int i=0; i < buf.length; ) {\n      if (i + eoln_arr.length > buf.length) {\n        buf[j++]=buf[i++];\n        continue;\n      }\n      match=true;\n      for (int k=0, l=i; k < eoln_arr.length; k++, l++) {\n        if (eoln_arr[k] != buf[l]) {\n          match=false;\n          break;\n        }\n      }\n      if (match) {\n        buf[j++]='\\n';\n        i+=eoln_arr.length;\n      }\n else {\n        buf[j++]=buf[i++];\n      }\n    }\n    converted=new String(buf,0,j);\n  }\n  return converted;\n}"}
{"ids": "27284", "raw_code": "public InlineURIHandler(final String namespace){\n  this.namespace=namespace;\n  this.len=namespace.length();\n}"}
{"ids": "50751", "raw_code": "private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){\n  int n=NNPoints.size();\n  double[] mat=new double[n + 1];\n  double dist=0.0;\n  for (int i=0; i < n; i++) {\n    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2)));\n    mat[i]=getTheoreticalSVValue(dist,variogram);\n  }\n  mat[n]=1;\n  return mat;\n}"}
{"ids": "38905", "raw_code": "public void updateEnd(Logger log){\n  m_instanceCount++;\n  m_sampleCount++;\n  double end=System.currentTimeMillis();\n  double temp=end - m_updateStart;\n  m_cumulativeTime+=temp;\n  boolean toFastToMeasure=false;\n  if ((end - m_startTime) >= m_sampleTime) {\n    computeUpdate(end);\n    if (log != null) {\n      log.statusMessage(m_statusMessagePrefix + \"Processed \" + m_instanceCount+ \" insts @ \"+ m_avInstsPerSec / m_numSamples + \" insts/sec\" + (toFastToMeasure ? \"*\" : \"\"));\n    }\n    m_sampleCount=0;\n    m_cumulativeTime=0;\n    m_startTime=System.currentTimeMillis();\n  }\n}"}
{"ids": "72739", "raw_code": "public boolean shouldInclude(final Path path){\n  return includeMatchers.size() == 0 || matches(path,includeMatchers);\n}"}
{"ids": "70405", "raw_code": "public ArrayList<MechSummary> generateUnits(int num,UnitFilter filter){\n  ArrayList<MechSummary> retVal=new ArrayList<>();\n  for (int i=0; i < num; i++) {\n    MechSummary ms=generateUnit(filter);\n    if (ms != null) {\n      retVal.add(ms);\n    }\n  }\n  return retVal;\n}"}
{"ids": "46659", "raw_code": "public void contentsChanged(ListDataEvent e){\n  Object oldSelection=selectedItemReminder;\n  Object newSelection=dataModel.getSelectedItem();\n  if (oldSelection == null || !oldSelection.equals(newSelection)) {\n    selectedItemChanged();\n    if (!selectingItem) {\n      fireActionEvent();\n    }\n  }\n}"}
{"ids": "38080", "raw_code": "protected void adjustCanopies(double[] densities){\n  if (m_numClustersRequested < 0) {\n    assignCanopiesToCanopyCenters();\n    m_trainingData=new Instances(m_canopies,0);\n    return;\n  }\n  if (m_canopies.numInstances() > m_numClustersRequested) {\n    int[] sortedIndexes=Utils.stableSort(densities);\n    Instances finalCanopies=new Instances(m_canopies,0);\n    int count=0;\n    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {\n      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));\n      count++;\n    }\n    m_canopies=finalCanopies;\n    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();\n    List<double[]> tempT2Dists=new ArrayList<double[]>();\n    List<double[]> tempMissings=new ArrayList<double[]>();\n    count=0;\n    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {\n      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));\n      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));\n      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));\n      count++;\n    }\n    m_canopyCenters=tempCanopyCenters;\n    m_canopyT2Density=tempT2Dists;\n    m_canopyNumMissingForNumerics=tempMissings;\n  }\n else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {\n    Random r=new Random(getSeed());\n    for (int i=0; i < 10; i++) {\n      r.nextInt();\n    }\n    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();\n    DecisionTableHashKey hk=null;\n    for (int i=0; i < m_canopies.numInstances(); i++) {\n      try {\n        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);\n        initC.put(hk,null);\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n    }\n    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {\n      int instIndex=r.nextInt(j + 1);\n      try {\n        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n      if (!initC.containsKey(hk)) {\n        Instance newInstance=m_trainingData.instance(instIndex);\n        m_canopies.add(newInstance);\n        double[] density=new double[1];\n        density[0]=1.0;\n        m_canopyT2Density.add(density);\n        double[][] center=new double[newInstance.numAttributes()][0];\n        double[] numMissingNumerics=new double[newInstance.numAttributes()];\n        updateCanopyCenter(newInstance,center,numMissingNumerics);\n        m_canopyCenters.add(center);\n        m_canopyNumMissingForNumerics.add(numMissingNumerics);\n        initC.put(hk,null);\n      }\n      m_trainingData.swap(j,instIndex);\n      if (m_canopies.numInstances() == m_numClustersRequested) {\n        break;\n      }\n    }\n  }\n  assignCanopiesToCanopyCenters();\n  m_trainingData=new Instances(m_canopies,0);\n}"}
{"ids": "67801", "raw_code": "protected void createFromHValues(int[] hValues,int partitions){\n  Arrays.sort(hValues);\n  this.splits=new int[partitions];\n  int maxH=0x7fffffff;\n  for (int i=0; i < splits.length; i++) {\n    int quantile=(int)((long)(i + 1) * hValues.length / partitions);\n    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];\n  }\n}"}
{"ids": "24163", "raw_code": "private String convertUserInputIntoAFullyQualifiedPath(final String userInput){\n  if (FileUtils.denotesAbsolutePath(userInput)) {\n    return userInput;\n  }\n  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {\n    Assert.notNull(home,\"Home directory could not be determined from system properties\");\n    if (userInput.length() > 1) {\n      return home + userInput.substring(1);\n    }\n  }\n  String fullPath=getWorkingDirectoryAsString() + userInput;\n  return fullPath;\n}"}
{"ids": "44642", "raw_code": "public byte readByte() throws IOException {\n  return dis.readByte();\n}"}
{"ids": "27202", "raw_code": "protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {\n  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());\n  hkdf.init(new HKDFParameters(ikm,salt,info));\n  byte[] okm=new byte[length];\n  hkdf.generateBytes(okm,0,length);\n  return okm;\n}"}
{"ids": "55244", "raw_code": "public boolean isEmoteIgnored(Emoticon emote){\n  return ignoredEmotes.contains(emote.code);\n}"}
{"ids": "74479", "raw_code": "@SuppressWarnings(\"unchecked\") public void readFile(String fileName) throws JDOMException, IOException {\n  if (checkFile(fileName)) {\n    Element root=rootFromName(fileName);\n    Element roster;\n    if (root == null) {\n      log.warn(\"consist file could not be read\");\n      return;\n    }\n    roster=root.getChild(\"roster\");\n    if (roster == null) {\n      log.debug(\"consist file does not contain a roster entry\");\n      return;\n    }\n    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter(\"consist\"));\n    try {\n      Element consist;\n      do {\n        consist=consistIterator.next();\n        consistFromXml(consist);\n      }\n while (consistIterator.hasNext());\n    }\n catch (    NoSuchElementException nde) {\n      log.debug(\"end of consist list\");\n    }\n  }\n else {\n    log.info(\"Consist file does not exist.  One will be created if necessary.\");\n  }\n}"}
{"ids": "48714", "raw_code": "private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {\n  return accept0(ssfd,newfd,isaa);\n}"}
{"ids": "53020", "raw_code": "protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {\n  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);\n  SVGDocument doc=cloneDocument();\n  TranscoderInput input=new TranscoderInput(doc);\n  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));\n  TranscoderOutput output=new TranscoderOutput(out);\n  transcoder.transcode(input,output);\n  out.flush();\n  out.close();\n}"}
{"ids": "13222", "raw_code": "@Override public Document newDocument(){\n  return new mf.org.apache.xerces.dom.DocumentImpl();\n}"}
{"ids": "25485", "raw_code": "@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){\n  checkSasHandleGood(sasCore);\n  grainSamples=grain;\n  return 0;\n}"}
{"ids": "38415", "raw_code": "protected static void drawDataPoint(double x,double y,double xprev,double yprev,int size,int shape,Graphics gx){\n  drawDataPoint(x,y,size,shape,gx);\n  gx.drawLine((int)x,(int)y,(int)xprev,(int)yprev);\n}"}
{"ids": "23750", "raw_code": "static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {\n  Iterator it=set.iterator();\n  boolean keepGoing=true;\n  boolean sentLastChunk=false;\n  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());\n  do {\n    mos.reset();\n    int avgItemSize=0;\n    int itemCount=0;\n    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {\n      Object key=it.next();\n      DataSerializer.writeObject(key,mos);\n      itemCount++;\n      avgItemSize=mos.size() / itemCount;\n    }\n    DataSerializer.writeObject((Object)null,mos);\n    int lastMsg=it.hasNext() ? 0 : 1;\n    keepGoing=proc.executeWith(mos,lastMsg);\n    sentLastChunk=lastMsg == 1 && keepGoing;\n  }\n while (keepGoing && it.hasNext());\n  return sentLastChunk;\n}"}
{"ids": "36012", "raw_code": "private int[] parseMetaDataInformation() throws UserError {\n  int[] selectedColumns=new int[metaData.size()];\n  Set<String> usedColumnNames=new HashSet<>();\n  int columnIndex=0;\n  int usedColumnIndex=0;\n  for (  ColumnMetaData column : metaData) {\n    if (!column.isRemoved()) {\n      selectedColumns[usedColumnIndex]=columnIndex;\n      usedColumnIndex++;\n      String columnName=column.getName();\n      if (!usedColumnNames.contains(columnName)) {\n        usedColumnNames.add(columnName);\n      }\n else {\n        throw new UserError(null,\"data_import.non_unique_column_name\",columnName);\n      }\n    }\n    columnIndex++;\n  }\n  int[] attributeColumns=Arrays.copyOf(selectedColumns,usedColumnIndex);\n  return attributeColumns;\n}"}
{"ids": "10592", "raw_code": "private void addDumpFile(){\n  addDumpFile(dumpFile);\n}"}
{"ids": "85177", "raw_code": "public boolean isPageInRange(int pageNumber){\n  for (int ind=0; ind < sequenceStarts.size(); ind++) {\n    if (sequenceStarts.get(ind) <= pageNumber && pageNumber <= sequenceEnds.get(ind))     return true;\n  }\n  return false;\n}"}
{"ids": "4403", "raw_code": "@SuppressWarnings(\"unchecked\") public static <T extends DimensionalItemObject>List<T> asTypedList(Collection<DimensionalItemObject> collection){\n  List<T> list=new ArrayList<>();\n  if (collection != null) {\n    for (    DimensionalItemObject object : collection) {\n      list.add((T)object);\n    }\n  }\n  return list;\n}"}
{"ids": "62300", "raw_code": "void addNewTable(String name,int tdefPageNumber,Short type,String linkedDbName,String linkedTableName) throws IOException {\n  addTable(name,Integer.valueOf(tdefPageNumber),type,linkedDbName,linkedTableName);\n  addToSystemCatalog(name,tdefPageNumber,type,linkedDbName,linkedTableName,_tableParentId);\n  addToAccessControlEntries(tdefPageNumber,_tableParentId,_newTableSIDs);\n}"}
{"ids": "40053", "raw_code": "public static String hashpw(byte[] password0,final String salt){\n  BCrypt B;\n  String real_salt;\n  byte passwordb[]=null, saltb[], hashed[];\n  char minor=(char)0;\n  int rounds, off=0;\n  final StringBuffer rs=new StringBuffer();\n  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {\n    throw new IllegalArgumentException(\"Invalid salt version\");\n  }\n  if (salt.charAt(2) == '$') {\n    off=3;\n  }\n else {\n    minor=salt.charAt(2);\n    if (minor != 'a' || salt.charAt(3) != '$') {\n      throw new IllegalArgumentException(\"Invalid salt revision\");\n    }\n    off=4;\n  }\n  if (salt.charAt(off + 2) > '$') {\n    throw new IllegalArgumentException(\"Missing salt rounds\");\n  }\n  rounds=Integer.parseInt(salt.substring(off,off + 2));\n  real_salt=salt.substring(off + 3,off + 25);\n  try {\n    if (minor >= (byte)'a') {\n      passwordb=Arrays.copyOf(password0,password0.length + 1);\n      passwordb[passwordb.length - 1]=(byte)0;\n    }\n else {\n      passwordb=Arrays.copyOf(password0,password0.length);\n    }\n    saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);\n    B=new BCrypt();\n    hashed=B.crypt_raw(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());\n  }\n  finally {\n    if (password0 != null) {\n      Arrays.fill(password0,(byte)'\\0');\n      password0=null;\n    }\n    if (passwordb != null) {\n      Arrays.fill(passwordb,(byte)'\\0');\n      passwordb=null;\n    }\n  }\n  rs.append(\"$2\");\n  if (minor >= 'a') {\n    rs.append(minor);\n  }\n  rs.append(\"$\");\n  if (rounds < 10) {\n    rs.append(\"0\");\n  }\n  if (rounds > 30) {\n    throw new IllegalArgumentException(\"rounds exceeds maximum (30)\");\n  }\n  rs.append(Integer.toString(rounds));\n  rs.append(\"$\");\n  rs.append(encode_base64(saltb,saltb.length));\n  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));\n  return rs.toString();\n}"}
{"ids": "50882", "raw_code": "public void removeListener(@NotNull ConfigurationListener listener){\n  if (myListeners != null) {\n    myListeners.remove(listener);\n    if (myListeners.isEmpty()) {\n      myListeners=null;\n    }\n  }\n}"}
{"ids": "80693", "raw_code": "public void doWindowOpen(){\n  doConnect();\n}"}
{"ids": "4024", "raw_code": "public boolean schedule(Runnable task,ClassLoader loader){\n  boolean isPriority=false;\n  boolean isQueue=true;\n  boolean isWake=true;\n  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);\n}"}
{"ids": "73468", "raw_code": "public static double[] parseVectorString(String vectorString){\n  String[] parsedString=vectorString.split(\",\");\n  double[] vector=new double[parsedString.length];\n  for (int j=0; j < parsedString.length; j++) {\n    double val=Utils.doubleParsable(parsedString[j]);\n    vector[j]=Double.isNaN(val) ? 0 : val;\n  }\n  return vector;\n}"}
{"ids": "29160", "raw_code": "@Override public char next(){\n  ++docPos;\n  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {\n    return text.next();\n  }\n  try {\n    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);\n  }\n catch (  BadLocationException e) {\n    throw new RuntimeException(e);\n  }\n  segmentEnd+=text.count;\n  return text.current();\n}"}
{"ids": "80235", "raw_code": "private void adjustRowHeights(JTable table){\n  for (int row=0; row < table.getRowCount(); row++) {\n    int rowHeight=table.getRowHeight();\n    for (int column=0; column < table.getColumnCount(); column++) {\n      Component comp=table.prepareRenderer(table.getCellRenderer(row,column),row,column);\n      rowHeight=Math.max(rowHeight,comp.getPreferredSize().height);\n    }\n    table.setRowHeight(row,rowHeight);\n  }\n}"}
{"ids": "21680", "raw_code": "public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){\n  List<URI> remediatedURIs=new ArrayList<URI>();\n  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);\n  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);\n  for (  Volume volume : remediatedVolumes) {\n    remediatedURIs.add(volume.getId());\n  }\n  return remediatedURIs;\n}"}
{"ids": "47041", "raw_code": "private FormatString[] parse(String s){\n  ArrayList<FormatString> al=new ArrayList<>();\n  Matcher m=fsPattern.matcher(s);\n  for (int i=0, len=s.length(); i < len; ) {\n    if (m.find(i)) {\n      if (m.start() != i) {\n        checkText(s,i,m.start());\n        al.add(new FixedString(s.substring(i,m.start())));\n      }\n      al.add(new FormatSpecifier(m));\n      i=m.end();\n    }\n else {\n      checkText(s,i,len);\n      al.add(new FixedString(s.substring(i)));\n      break;\n    }\n  }\n  return al.toArray(new FormatString[al.size()]);\n}"}
{"ids": "40929", "raw_code": "private void updateIndexColumnButtons(){\n  indexRemoveButton.setEnabled(false);\n  indexUpButton.setEnabled(false);\n  indexDownButton.setEnabled(false);\n  int index=selectedColumns.getSelectionIndex();\n  if (index >= 0) {\n    indexRemoveButton.setEnabled(true);\n    if (index > 0) {\n      indexUpButton.setEnabled(true);\n    }\n else     if (index < selectedColumns.getItemCount() - 1) {\n      indexDownButton.setEnabled(true);\n    }\n  }\n}"}
{"ids": "71750", "raw_code": "public String urlForPOISearch(String tag,BoundingBox bb,int limit,int timeout){\n  StringBuilder s=new StringBuilder();\n  s.append(mService + \"?data=\");\n  String sBB=\"(\" + bb.getLatSouth() + \",\"+ bb.getLonWest()+ \",\"+ bb.getLatNorth()+ \",\"+ bb.getLonEast()+ \")\";\n  String data=\"[out:json][timeout:\" + timeout + \"];(\"+ \"node[\"+ tag+ \"]\"+ sBB+ \";\"+ \"way[\"+ tag+ \"]\"+ sBB+ \";\"+ \"relation[\"+ tag+ \"]\"+ sBB+ \";\"+ \");out qt center \"+ limit+ \" tags;\";\n  Log.d(BonusPackHelper.LOG_TAG,\"data=\" + data);\n  s.append(URLEncoder.encode(data));\n  return s.toString();\n}"}
{"ids": "74820", "raw_code": "public void waitForDecodingToFinish(){\n  while (isDecoding) {\n    try {\n      Thread.sleep(100);\n    }\n catch (    final InterruptedException e) {\n      LogWriter.writeLog(\"Exception: \" + e.getMessage());\n      isDecoding=false;\n    }\n  }\n}"}
{"ids": "80373", "raw_code": "private static String wikiToPlainText(String content){\n  content=content.replaceAll(\"\\\\[\\\\[[iI]mage:[^\\\\]]*\\\\]\\\\]\",\"\");\n  content=content.replaceAll(\"(?s)<!--.*?-->\",\"\");\n  content=content.replaceAll(\"(?s)<ref>.*?</ref>\",\"\");\n  content=content.replaceAll(\"(?s)\\\\{\\\\{([^{}]*?\\\\{\\\\{[^{}]*?\\\\}\\\\})+[^{}].*?\\\\}\\\\}\",\"\");\n  content=content.replaceAll(\"(?s)\\\\{\\\\{.*?\\\\}\\\\}\",\"\");\n  content=content.replaceAll(\"(?s)\\\\{\\\\|.*?\\\\|\\\\}\",\"\");\n  content=content.replaceAll(\"\\\\[\\\\[[^\\\\]]*\\\\|\",\"\");\n  content=content.replaceAll(\"\\\\[\\\\[\",\"\");\n  content=content.replaceAll(\"\\\\]\\\\]\",\"\");\n  content=content.replaceAll(\"(?s)<.*?>\",\"\");\n  content=content.trim();\n  final int size=content.length();\n  int endOfFirstParagraph=content.indexOf(\"\\n\",50);\n  if (endOfFirstParagraph < 0) {\n    endOfFirstParagraph=size;\n  }\n  content=content.substring(0,Math.min(endOfFirstParagraph,1024));\n  return content;\n}"}
{"ids": "48510", "raw_code": "private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){\n  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));\n}"}
{"ids": "44901", "raw_code": "public static int update(String sql,Object[] args){\n  Connection c=null;\n  PreparedStatement p=null;\n  try {\n    c=getConnection();\n    if (c == null)     return -1;\n    p=c.prepareStatement(sql);\n    int order=1;\n    if (args != null) {\n      for (int i=0; i < args.length; i++) {\n        Object o=args[i];\n        setParameter(p,order++,o);\n      }\n    }\n    return p.executeUpdate();\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(sql + toString(args),e);\n  }\n finally {\n    close(p,c);\n  }\n  return 0;\n}"}
{"ids": "30683", "raw_code": "public boolean isLockSubject(){\n  return true;\n}"}
{"ids": "50145", "raw_code": "public QuickActionView addAction(Action action){\n  checkShown();\n  mActions.add(action);\n  return this;\n}"}
{"ids": "20040", "raw_code": "protected boolean display(File helpFile) throws HelpException {\n  if (helpFile.exists()) {\n    loadAndWrite(helpFile);\n    return true;\n  }\n else {\n    File notFound=new File(helpDir,NOT_FOUND);\n    if (notFound.exists())     loadAndWrite(notFound);\n else     throw new HelpException(\"Topic not found, try 'help' for more information\");\n    return false;\n  }\n}"}
{"ids": "32816", "raw_code": "public Point2D either(){\n  return best1;\n}"}
{"ids": "1202", "raw_code": "private static void removeTable(Connection conn,String name) throws SQLException {\n  name=name.replace('.','_');\n  Statement stat=conn.createStatement();\n  stat.execute(\"DROP TABLE \" + name);\n  DBUtil.commitEL(conn);\n}"}
{"ids": "29108", "raw_code": "public boolean containsCategory(String category){\n  return !hiddenBugCategorySet.contains(category);\n}"}
{"ids": "22046", "raw_code": "public static boolean isVolumeFullCopySource(Volume volume,DbClient dbClient){\n  boolean isFullCopySource=false;\n  StringSet fullCopyIds=volume.getFullCopies();\n  if ((fullCopyIds != null) && (!fullCopyIds.isEmpty())) {\n    Iterator<String> fullCopyIdsIter=fullCopyIds.iterator();\n    while (fullCopyIdsIter.hasNext()) {\n      URI fullCopyURI=URI.create(fullCopyIdsIter.next());\n      Volume fullCopyVolume=dbClient.queryObject(Volume.class,fullCopyURI);\n      if ((fullCopyVolume != null) && (!fullCopyVolume.getInactive())) {\n        isFullCopySource=true;\n      }\n    }\n  }\n  return isFullCopySource;\n}"}
{"ids": "36606", "raw_code": "@Override public void assertEquals(String message,Object expectedObj,Object actualObj){\n  LinearRegressionModel expected=(LinearRegressionModel)expectedObj;\n  LinearRegressionModel actual=(LinearRegressionModel)actualObj;\n  message=message + \" - Linear Regression Model \\\"\" + actual.getSource()+ \"\\\" does not match the expected Model\";\n  Assert.assertArrayEquals(message + \" : coefficients are not equal\",expected.getCoefficients(),actual.getCoefficients(),1E-15);\n  Assert.assertArrayEquals(message + \" : probabilities are not equal\",expected.getProbabilities(),actual.getProbabilities(),1E-15);\n  Assert.assertArrayEquals(message + \" : selected attributes are not equal\",expected.getSelectedAttributeNames(),actual.getSelectedAttributeNames());\n  Assert.assertArrayEquals(message + \" : selected attributes are not equal\",expected.getSelectedAttributes(),actual.getSelectedAttributes());\n  Assert.assertArrayEquals(message + \" : standard errors are not equal\",expected.getStandardErrors(),actual.getStandardErrors(),1E-15);\n  Assert.assertArrayEquals(message + \" : standardized coefficients are not equal\",expected.getStandardizedCoefficients(),actual.getStandardizedCoefficients(),1E-15);\n  Assert.assertArrayEquals(message + \" : tolerances are not equal\",expected.getTolerances(),actual.getTolerances(),1E-15);\n  Assert.assertArrayEquals(message + \" : t statistics are not equal\",expected.getTStats(),actual.getTStats(),1E-15);\n}"}
{"ids": "3786", "raw_code": "final public void println(String v){\n  try {\n    _out.println(v);\n  }\n catch (  IOException e) {\n    log.log(Level.FINE,e.toString(),e);\n  }\n}"}
{"ids": "49936", "raw_code": "private boolean rContainsRMInstruction(ProgramBlock pb,String varName){\n  if (pb instanceof WhileProgramBlock) {\n    WhileProgramBlock tmp=(WhileProgramBlock)pb;\n    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;\n  }\n else   if (pb instanceof IfProgramBlock) {\n    IfProgramBlock tmp=(IfProgramBlock)pb;\n    for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInstruction(c,varName))     return true;\n    for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInstruction(c,varName))     return true;\n  }\n else   if (pb instanceof ForProgramBlock) {\n    ForProgramBlock tmp=(ForProgramBlock)pb;\n    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;\n  }\n else   if (pb instanceof FunctionProgramBlock) {\n  }\n else {\n    for (    Instruction inst : pb.getInstructions()) {\n      String instStr=inst.toString();\n      if (instStr.contains(\"rmfilevar\" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains(\"rmvar\" + Lop.OPERAND_DELIMITOR + varName)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "35441", "raw_code": "public ProjectImporter(final File rootFolder){\n  assertNotNull(\"Root folder cannot be null.\",rootFolder);\n  assertTrue(\"Root folder does not exist: \" + rootFolder,rootFolder.exists());\n  assertTrue(\"Root folder must be a folder. But was a file: \" + rootFolder,rootFolder.isDirectory());\n  assertTrue(\"Root folder directory content cannot be read: \" + rootFolder,rootFolder.canRead());\n  assertTrue(\"No files were found in the directory: \" + rootFolder,null != rootFolder.listFiles());\n  this.rootFolder=rootFolder;\n}"}
{"ids": "75244", "raw_code": "public static boolean isRegistered(Class<?> clazz){\n  return regModules.containsKey(clazz.getName());\n}"}
{"ids": "23753", "raw_code": "public void waitForOperations(){\n  operator.waitForOperations();\n}"}
{"ids": "39969", "raw_code": "private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {\n  try {\n    String xml=completeXform(convertUuidsToIds(post));\n    File file=File.createTempFile(\"projectbuendia\",null);\n    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());\n  }\n catch (  IOException e) {\n    throw new GenericRestException(\"Error storing xform data\",e);\n  }\ncatch (  ResponseException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new ConversionException(\"Error processing xform data\",e);\n  }\n  Encounter encounter=guessEncounterFromXformSubmission(post);\n  if (encounter == null) {\n    return post;\n  }\n  SimpleObject returnJson=new SimpleObject();\n  EncounterResource.populateJsonProperties(encounter,returnJson);\n  return returnJson;\n}"}
{"ids": "12021", "raw_code": "public Endpoint(URI endpointUrl,SecurityMode... modes){\n  if (modes == null || endpointUrl == null)   throw new IllegalArgumentException(\"null arg\");\n  for (  SecurityMode m : modes) {\n    if (m == null)     throw new IllegalArgumentException(\"null arg\");\n    hash=13 * hash + m.hashCode();\n  }\n  this.endpointUrl=endpointUrl.toString();\n  this.modes=modes;\n  this.endpointConfiguration=EndpointConfiguration.defaults();\n  hash=13 * hash + endpointUrl.hashCode();\n}"}
{"ids": "43977", "raw_code": "protected Value parseValue() throws IOException, RDFParseException, RDFHandlerException {\n  int c=peekCodePoint();\n  if (c == '<') {\n    return parseURI();\n  }\n else   if (c == ':' || TurtleUtil.isPrefixStartChar(c)) {\n    return parseQNameOrBoolean();\n  }\n else   if (c == '_') {\n    return parseNodeID();\n  }\n else   if (c == '\"' || c == '\\'') {\n    return parseQuotedLiteral();\n  }\n else   if (ASCIIUtil.isNumber(c) || c == '.' || c == '+' || c == '-') {\n    return parseNumber();\n  }\n else   if (c == -1) {\n    throwEOFException();\n    return null;\n  }\n else {\n    reportFatalError(\"Expected an RDF value here, found '\" + new String(Character.toChars(c)) + \"'\");\n    return null;\n  }\n}"}
{"ids": "7913", "raw_code": "public TimeSeriesCollection(){\n  this(null,TimeZone.getDefault());\n}"}
{"ids": "43423", "raw_code": "@RequestMapping(value=\"/container/{containerId}/application/{applicationName}\",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(\"path\") String path) throws ServiceException, CheckException, IOException {\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"containerId:\" + containerId);\n    logger.debug(\"applicationName:\" + applicationName);\n    logger.debug(\"path:\" + path);\n  }\n  fileService.createDirectory(applicationName,containerId,path);\n  return new HttpOk();\n}"}
{"ids": "5002", "raw_code": "public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){\n  if (p_color == null)   return;\n  if (p_ellipse_arr.length <= 0)   return;\n  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);\n  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {\n    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);\n    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);\n    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {\n      continue;\n    }\n    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);\n    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);\n    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);\n    AffineTransform affine_transform=new AffineTransform();\n    affine_transform.rotate(rotation,center.getX(),center.getY());\n    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);\n    draw_path.append(rotated_ellipse,false);\n  }\n  Graphics2D g2=(Graphics2D)p_g;\n  g2.setColor(p_color);\n  set_translucency(g2,p_translucency_factor);\n  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  g2.fill(draw_path);\n}"}
{"ids": "20483", "raw_code": "private void refreshChallengeCounts(){\n  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);\n}"}
{"ids": "68708", "raw_code": "public Identity(final int dim){\n  this(dim,EnumSet.noneOf(Address.Flags.class));\n}"}
{"ids": "75007", "raw_code": "private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){\n  final int[] awtPixels=new int[width * height];\n  final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA);\n  swtImageData.transparentPixel=TRANSPARENT_COLOR;\n  final int step=swtImageData.depth / 8;\n  final byte[] data=swtImageData.data;\n  bufferedImage.getRGB(0,0,width,height,awtPixels,0,width);\n  for (int i=0; i < height; i++) {\n    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;\n    for (int j=0; j < width; j++) {\n      final int rgb=awtPixels[j + i * width];\n      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {\n        data[idx++]=(byte)(rgb >> k & 0xFF);\n      }\n    }\n  }\n  return swtImageData;\n}"}
{"ids": "49821", "raw_code": "public static boolean isUnlimitedStrengthPolicyAvailable(){\n  try {\n    return Cipher.getMaxAllowedKeyLength(\"AES\") >= 256;\n  }\n catch (  final NoSuchAlgorithmException e) {\n    e.printStackTrace();\n  }\n  return false;\n}"}
{"ids": "5010", "raw_code": "private void fillStackTrace(StringBuffer buffer,StackTraceElement[] elements){\n  for (int index=0; index < elements.length; index++) {\n    buffer.append(elements[index]);\n    buffer.append(\"\\n\");\n  }\n}"}
{"ids": "12534", "raw_code": "public static boolean isFileTypeSupported(int fileType){\n  List providers=getMidiFileWriters();\n  for (int i=0; i < providers.size(); i++) {\n    MidiFileWriter writer=(MidiFileWriter)providers.get(i);\n    if (writer.isFileTypeSupported(fileType)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "14750", "raw_code": "public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {\n  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {\n    throw new IllegalArgumentException(\"SMSFlatFileObject.modify: \" + \"One or more arguments is null or empty\");\n  }\n  String objKey=objName.toLowerCase();\n  String filepath=null;\n  mRWLock.readRequest();\n  try {\n    filepath=mNameMap.getProperty(objKey);\n    if (filepath == null) {\n      String errmsg=\"SMSFlatFileObject.modify: object \" + objName + \" not found.\";\n      mDebug.error(errmsg);\n      throw new ServiceNotFoundException(errmsg);\n    }\n  }\n  finally {\n    mRWLock.readDone();\n  }\n  mRWLock.writeRequest();\n  try {\n    filepath=mNameMap.getProperty(objKey);\n    if (filepath == null) {\n      String errmsg=\"SMSFlatFileObject.modify: object \" + objName + \" not found.\";\n      mDebug.error(errmsg);\n      throw new ServiceNotFoundException(errmsg);\n    }\n    File filehandle=new File(filepath);\n    if (!filehandle.isFile()) {\n      String errmsg=\"SMSFlatFileObject.modify: Attributes file for object \" + objName + \" not found.\";\n      mDebug.error(errmsg);\n      throw new ServiceNotFoundException(errmsg);\n    }\n    Properties props=loadProperties(filehandle,objName);\n    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;\n    for (int i=0; i < mods.length; i++) {\n      modifyValues(objName,mods[i],props);\n    }\n    saveProperties(props,filehandle,objName);\n    if (!hasSunXmlKeyValue) {\n      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;\n    }\n    if (hasSunXmlKeyValue) {\n      deleteSunXmlKeyValFiles(filehandle.getParentFile());\n      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));\n      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);\n    }\n  }\n  finally {\n    mRWLock.writeDone();\n  }\n}"}
{"ids": "35721", "raw_code": "private void makeItems(int fingerPosition,List<View> viewList){\n  if (fingerPosition >= viewList.size()) {\n    return;\n  }\n  for (int i=0; i < viewList.size(); i++) {\n    int translationY=Math.min(Math.max(Math.abs(fingerPosition - i) * intervalHeight,10),maxTranslationHeight);\n    updateItemHeightAnimator(viewList.get(i),translationY);\n  }\n}"}
{"ids": "24212", "raw_code": "private boolean pathIsWindows(String path){\n  if (path != null && path.length() > 1) {\n    return (Character.isLetter(path.charAt(0)) && path.charAt(1) == ':') || (path.startsWith(\"//\") || path.startsWith(\"\\\\\\\\\"));\n  }\n  return false;\n}"}
{"ids": "83386", "raw_code": "public static byte[] readBinaryFile(File sourceFile){\n  byte[] result=null;\n  try {\n    BufferedInputStream input;\n    input=new BufferedInputStream(new FileInputStream(sourceFile));\n    int num=input.available();\n    result=new byte[num];\n    input.read(result,0,num);\n    input.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    result=null;\n  }\n  return result;\n}"}
{"ids": "36135", "raw_code": "public void addTerm(SplitCondition condition){\n  terms.add(condition);\n}"}
{"ids": "11583", "raw_code": "public void rebuildEventList(boolean resetSelected){\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"rebuilding list\");\n  }\n  allEvents=null;\n  activeEvents=null;\n  hideDetails();\n  initInterface(getActiveEvents(),resetSelected);\n  highlightCurrentEvent(currentTime);\n  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());\n}"}
{"ids": "23695", "raw_code": "public DiskStoreFactory createDiskStoreFactory(){\n  return new DiskStoreFactoryImpl(this);\n}"}
{"ids": "67383", "raw_code": "public void put(byte[] buffer,int offset,int count){\n  if (count > (bytes.length - this.contentLength)) {\n    throw new IllegalArgumentException(\"buffer is too large\");\n  }\n  System.arraycopy(buffer,offset,bytes,this.contentLength,count);\n  this.contentLength+=count;\n}"}
{"ids": "41071", "raw_code": "private void markReserved(int ropReg,int category){\n  reservedRopRegs.set(ropReg,ropReg + category,true);\n}"}
{"ids": "45912", "raw_code": "public static void registerDefaultResolvers(){\nsynchronized (resolverList) {\n    resolverList.add(new ResourceResolver(new ResolverFragment()));\n    resolverList.add(new ResourceResolver(new ResolverLocalFilesystem()));\n    resolverList.add(new ResourceResolver(new ResolverXPointer()));\n    resolverList.add(new ResourceResolver(new ResolverDirectHTTP()));\n  }\n}"}
{"ids": "67382", "raw_code": "private void release(ByteArray byteArray){\nsynchronized (syncRoot) {\n    if (availableByteArrays.size() >= maxAvailableArraysCount) {\n      return;\n    }\n    if (!availableByteArrays.contains(byteArray)) {\n      availableByteArrays.add(byteArray);\n    }\n  }\n}"}
{"ids": "7626", "raw_code": "@Override public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){\n  if (marker instanceof ValueMarker) {\n    ValueMarker vm=(ValueMarker)marker;\n    double value=vm.getValue();\n    Range range=axis.getRange();\n    if (!range.contains(value)) {\n      return;\n    }\n    final Composite savedComposite=g2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    PlotOrientation orientation=plot.getOrientation();\n    double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());\n    Line2D line=null;\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);\n    }\n else {\n      throw new IllegalStateException();\n    }\n    g2.setPaint(marker.getPaint());\n    g2.setStroke(marker.getStroke());\n    g2.draw(line);\n    String label=marker.getLabel();\n    RectangleAnchor anchor=marker.getLabelAnchor();\n    if (label != null) {\n      Font labelFont=marker.getLabelFont();\n      g2.setFont(labelFont);\n      Point2D coordinates=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);\n      Rectangle2D rect=TextUtils.calcAlignedStringBounds(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());\n      g2.setPaint(marker.getLabelBackgroundColor());\n      g2.fill(rect);\n      g2.setPaint(marker.getLabelPaint());\n      TextUtils.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(savedComposite);\n  }\n else   if (marker instanceof IntervalMarker) {\n    IntervalMarker im=(IntervalMarker)marker;\n    double start=im.getStartValue();\n    double end=im.getEndValue();\n    Range range=axis.getRange();\n    if (!(range.intersects(start,end))) {\n      return;\n    }\n    final Composite savedComposite=g2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    double start2d=axis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());\n    double end2d=axis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());\n    double low=Math.min(start2d,end2d);\n    double high=Math.max(start2d,end2d);\n    PlotOrientation orientation=plot.getOrientation();\n    Rectangle2D rect=null;\n    if (orientation == PlotOrientation.HORIZONTAL) {\n      low=Math.max(low,dataArea.getMinX());\n      high=Math.min(high,dataArea.getMaxX());\n      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());\n    }\n else     if (orientation == PlotOrientation.VERTICAL) {\n      low=Math.max(low,dataArea.getMinY());\n      high=Math.min(high,dataArea.getMaxY());\n      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);\n    }\n    Paint p=marker.getPaint();\n    if (p instanceof GradientPaint) {\n      GradientPaint gp=(GradientPaint)p;\n      GradientPaintTransformer t=im.getGradientPaintTransformer();\n      if (t != null) {\n        gp=t.transform(gp,rect);\n      }\n      g2.setPaint(gp);\n    }\n else {\n      g2.setPaint(p);\n    }\n    g2.fill(rect);\n    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {\n      if (orientation == PlotOrientation.VERTICAL) {\n        Line2D line=new Line2D.Double();\n        double x0=dataArea.getMinX();\n        double x1=dataArea.getMaxX();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(x0,start2d,x1,start2d);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(x0,end2d,x1,end2d);\n          g2.draw(line);\n        }\n      }\n else {\n        Line2D line=new Line2D.Double();\n        double y0=dataArea.getMinY();\n        double y1=dataArea.getMaxY();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(start2d,y0,start2d,y1);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(end2d,y0,end2d,y1);\n          g2.draw(line);\n        }\n      }\n    }\n    String label=marker.getLabel();\n    RectangleAnchor anchor=marker.getLabelAnchor();\n    if (label != null) {\n      Font labelFont=marker.getLabelFont();\n      g2.setFont(labelFont);\n      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);\n      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());\n      g2.setPaint(marker.getLabelBackgroundColor());\n      g2.fill(r);\n      g2.setPaint(marker.getLabelPaint());\n      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(savedComposite);\n  }\n}"}
{"ids": "39767", "raw_code": "private void init(){\n  acceptableMethods=new ArrayList<>();\n  acceptableMethods.add(new NoAuthenticationRequiredMethod());\n  acceptableMethods.add(new GssApiMethod());\n  acceptableMethods.add(new UsernamePasswordMethod());\n}"}
{"ids": "21235", "raw_code": "private boolean lockOrder(Order order){\n  lock.lock();\n  try {\n    return activeOrders.add(order.getId());\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "23252", "raw_code": "public void put(Buffer buffer){\n  if (buffer.getLength() <= 2) {\n    return;\n  }\n  byte[] currentRtpPacketData=((byte[])buffer.getData());\n  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);\n  if (h264RtpHeaders.getFUI_F()) {\n    return;\n  }\n  if (reassembledData == null) {\n    timestamp=buffer.getTimestamp();\n    format=buffer.getFormat();\n    seqNumber=buffer.getSequenceNumber();\n    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();\n    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];\n    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];\n    reassembledDataHasStart=false;\n    reassembledDataHasEnd=false;\n  }\n  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);\n  int payloadStartPosition=h264RtpHeaders.getHeaderSize();\n  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();\n  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {\n    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());\n    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());\n    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);\n    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);\n  }\n  reassembledDataSize[posSeq]=payloadLength;\n  reassembledDataFullSize+=payloadLength;\n  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);\n  videoOrientation=buffer.getVideoOrientation();\n}"}
{"ids": "35647", "raw_code": "private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){\n  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {\n    List<String> userNames=getUserNamesList(entry.getValue());\n    if (userNames.size() > 1) {\n      String newUserName=getNewUserName(userNames);\n      for (      LogCommitInfo commit : entry.getValue()) {\n        commit.setUserName(newUserName);\n      }\n    }\n  }\n}"}
{"ids": "28349", "raw_code": "@SuppressWarnings(\"unchecked\") public JdbcData(Connection connection,String table,boolean buffered){\n  this.connection=connection;\n  this.table=table;\n  setBuffered(buffered);\n  try {\n    setColumnTypes(getJdbcColumnTypes());\n  }\n catch (  SQLException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "86747", "raw_code": "public static byte[] readData(final URL url) throws IOException {\n  try (InputStream input=url.openStream()){\n    return readData(input);\n  }\n }"}
{"ids": "6577", "raw_code": "public static String toKilobytes(long bytes){\n  if (bytes < 0)   return \"? \" + GENERAL_UNIT_KILOBYTES;\n  long kbytes=bytes / 1024;\n  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;\n  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;\n}"}
{"ids": "51957", "raw_code": "private PendingIntent createRequestPendingIntent(@NonNull String pendingIntentClassName){\n  PendingIntent pendingIntent=null;\n  try {\n    Class classOfPendingIntent=Class.forName(pendingIntentClassName);\n    if (classOfPendingIntent != null) {\n      Intent intent=new Intent(mContext,classOfPendingIntent);\n      pendingIntent=PendingIntent.getService(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);\n    }\n  }\n catch (  ClassNotFoundException e) {\n    e.printStackTrace();\n  }\n  return pendingIntent;\n}"}
{"ids": "371", "raw_code": "public void configs(SwtPlatform... platforms){\n  configs(Arrays.asList(platforms));\n}"}
{"ids": "15155", "raw_code": "protected int checkIPRange(){\n  int retVal=0;\n  String ipVersion;\n  String ipType;\n  Map<String,String> holdDetails;\n  for (  String nextIP : IPRangeRange) {\n    try {\n      holdDetails=checkIPVersion(nextIP);\n    }\n catch (    IllegalArgumentException e) {\n      if (debug.warningEnabled()) {\n        debug.warning(\"{}.checkIPRange: IP type could not be validated. IP={}\",ADAPTIVE,nextIP,e);\n      }\n      continue;\n    }\n    ipVersion=holdDetails.get(IP_Version);\n    ipType=holdDetails.get(IP_TYPE);\n    if (ipVersion.equalsIgnoreCase(IP_V6) && ValidateIPaddress.isIPv6(clientIP)) {\n      if (debug.messageEnabled()) {\n        debug.message(\"{}.checkIPRange: {} --> {}\",ADAPTIVE,clientIP,nextIP);\n        debug.message(\"IP version is: {}\",IP_V6);\n        debug.message(\"Client IP is: {}\",IPv6Address.fromString(clientIP));\n      }\n      if (ipType.equalsIgnoreCase(\"Range\")) {\n        String first=holdDetails.get(IP_START);\n        String last=holdDetails.get(IP_END);\n        IPv6AddressRange iPv6AddressRange=IPv6AddressRange.fromFirstAndLast(IPv6Address.fromString(first),IPv6Address.fromString(last));\n        if (iPv6AddressRange.contains(IPv6Address.fromString(clientIP))) {\n          retVal=IPRangeScore;\n          break;\n        }\n      }\n else       if (ipType.equalsIgnoreCase(\"CIDR\")) {\n        IPv6Network iPv6Network=IPv6Network.fromString(nextIP);\n        if (iPv6Network.contains(IPv6Address.fromString(clientIP))) {\n          retVal=IPRangeScore;\n          break;\n        }\n      }\n else {\n        IPv6Address iPv6AddressNextIP=IPv6Address.fromString(nextIP);\n        if (iPv6AddressNextIP.compareTo(IPv6Address.fromString(clientIP)) == 0) {\n          retVal=IPRangeScore;\n          break;\n        }\n      }\n    }\n else     if (ipVersion.equalsIgnoreCase(IP_V4) && ValidateIPaddress.isIPv4(clientIP)) {\n      if (debug.messageEnabled()) {\n        debug.message(\"{}.checkIPRange: {} --> {}\",ADAPTIVE,clientIP,nextIP);\n        debug.message(\"IP version is: {}\",IP_V4);\n        debug.message(\"Client IP is: {}\",clientIP);\n      }\n      IPRange theRange=new IPRange(nextIP);\n      if (theRange.inRange(clientIP)) {\n        retVal=IPRangeScore;\n        break;\n      }\n    }\n  }\n  if (!IPRangeInvert) {\n    retVal=IPRangeScore - retVal;\n  }\n  return retVal;\n}"}
{"ids": "5072", "raw_code": "@Override public ShapeTileSimplex to_Simplex(){\n  if (is_empty())   return ShapeTileSimplex.EMPTY;\n  ArrayList<PlaLineInt> line_arr=new ArrayList<PlaLineInt>(4);\n  line_arr.add(new PlaLineInt(box_ll,PlaDirection.RIGHT));\n  line_arr.add(new PlaLineInt(box_ur,PlaDirection.UP));\n  line_arr.add(new PlaLineInt(box_ur,PlaDirection.LEFT));\n  line_arr.add(new PlaLineInt(box_ll,PlaDirection.DOWN));\n  return new ShapeTileSimplex(line_arr);\n}"}
{"ids": "15402", "raw_code": "private void injectContent(Inject injectContent) throws IOException, MojoExecutionException {\n  Map<Pattern,File> contents=getContentsMap(injectContent.getContents());\n  File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile());\n  BufferedReader reader=null;\n  BufferedWriter writer=null;\n  try {\n    reader=ioFactory.newReader(injectContent.getDestinationFile());\n    writer=ioFactory.newWriter(tmpFile);\n    String line;\n    while ((line=reader.readLine()) != null) {\n      File content=doesLineMatchId(contents,line);\n      if (content != null) {\n        ioFactory.writeContent(writer,content,getContentConverter(injectContent));\n      }\n else {\n        ioFactory.writeLine(writer,line);\n      }\n    }\n  }\n  finally {\n    if (reader != null) {\n      reader.close();\n    }\n    if (writer != null) {\n      writer.flush();\n      writer.close();\n    }\n  }\n  ioFactory.moveTo(tmpFile,injectContent.getDestinationFile());\n}"}
{"ids": "37062", "raw_code": "private static boolean createBooleanSetting(final Map<String,String> rawSettings,final String settingName,final boolean defaultValue){\n  final String settingString=rawSettings.get(settingName);\n  if (settingString == null) {\n    return defaultValue;\n  }\n else {\n    try {\n      return Boolean.parseBoolean(settingString);\n    }\n catch (    final NumberFormatException exception) {\n      CUtilityFunctions.logException(exception);\n      return defaultValue;\n    }\n  }\n}"}
{"ids": "52392", "raw_code": "String generateKey() throws OracleException {\n  byte[] data=null;\n  try {\n    data=HashFuncs.getRandom();\n  }\n catch (  Exception e) {\n    if (OracleLog.isLoggingEnabled())     log.warning(e.toString());\n  }\n  if (data == null) {\n    data=fetchGuid();\n  }\n  if (data == null) {\n    throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID);\n  }\n  return (ByteArray.rawToHex(data));\n}"}
{"ids": "9371", "raw_code": "public double[] arrayCopy(){\n  double[] array=new double[length()];\n  for (  IndexValue iv : this)   array[iv.getIndex()]=iv.getValue();\n  return array;\n}"}
{"ids": "51825", "raw_code": "private void initPattern(){\n  StringBuffer patternTemplateRegex=new StringBuffer();\n  logger.debug(\"Get placeholder matcher\");\n  Matcher placeholderMatcher=getPlaceholderMatcher();\n  logger.debug(\"Replace all placeholder with regex group capture\");\n  while (placeholderMatcher.find()) {\n    String group=placeholderMatcher.group(1);\n    if (!groups.contains(group)) {\n      logger.trace(\"New group found, add it, replace with a capture group\");\n      groups.add(group);\n      String groupRegex=getGroupRegex(group);\n      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(\"(?<\" + group + \">\"+ groupRegex+ \")\"));\n    }\n else {\n      logger.trace(\"Existing group found, replace with a back reference\");\n      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(\"\\\\k<\" + group + \">\"));\n    }\n  }\n  placeholderMatcher.appendTail(patternTemplateRegex);\n  String patternRegex=patternTemplateRegex.toString();\n  logger.debug(\"pattern:\" + patternRegex);\n  pattern=Pattern.compile(patternRegex);\n}"}
{"ids": "60471", "raw_code": "public List<SoftWrapImpl> removeStartingFrom(int offset){\n  int startIndex=getSoftWrapIndex(offset);\n  if (startIndex < 0) {\n    startIndex=-startIndex - 1;\n  }\n  if (startIndex >= myWraps.size()) {\n    return Collections.emptyList();\n  }\n  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());\n  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);\n  tail.clear();\n  return result;\n}"}
{"ids": "43146", "raw_code": "public static String formatDps(final double dps){\n  return \"(\" + String.format(\"%.2f\",dps) + \" dps)\";\n}"}
{"ids": "10218", "raw_code": "public static String truncate(String string,int length){\n  if (string.length() > length) {\n    string=string.substring(0,length);\n  }\n  return string;\n}"}
{"ids": "64300", "raw_code": "private boolean checkDisband(Legion legion){\n  if (legion.isDisbanding()) {\n    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {\n      disbandLegion(legion);\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "747", "raw_code": "public static InputStream streamFromString(String location) throws IOException {\n  InputStream is=null;\n  URL url=urlFromString(location,null,false);\n  if (url != null) {\n    is=url.openStream();\n  }\n else {\n    File f=new File(location);\n    if (f.exists())     is=new FileInputStream(f);\n  }\n  if (is == null) {\n    return null;\n  }\n else   if (isGZipFile(location)) {\n    return new GZIPInputStream(is);\n  }\n else {\n    return is;\n  }\n}"}
{"ids": "85926", "raw_code": "public void add(T item){\nsynchronized (lock) {\n    items.add(identifiedItemFactory.create(item));\n  }\n  notifyDataSetChanged();\n}"}
{"ids": "21907", "raw_code": "private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){\n  CifsShareACL shareACL=null;\n  for (  UnManagedCifsShareACL origACL : origACLList) {\n    shareACL=new CifsShareACL();\n    shareACL.setId(URIUtil.createId(CifsShareACL.class));\n    shareACL.setUser(origACL.getUser());\n    shareACL.setPermission(origACL.getPermission());\n    shareACL.setShareName(origACL.getShareName());\n    shareACL.setFileSystemId(fileshare.getId());\n    shareACLList.add(shareACL);\n    _logger.info(\"share ACLs details {}\",shareACL.toString());\n  }\n}"}
{"ids": "23292", "raw_code": "public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {\n  try {\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    parser.parse(mInputSource,this);\n    return this;\n  }\n catch (  IOException e) {\n    throw new ParseFailureException(\"Failed to parse input source!\",e);\n  }\n}"}
{"ids": "40891", "raw_code": "public Builder deleteEntitlements(){\n  deleteFields.add(\"entitlements\");\n  return this;\n}"}
{"ids": "34226", "raw_code": "protected void incorporateSignedProperties() throws DSSException {\n  signedPropertiesDom=DSSXMLUtils.addElement(documentDom,qualifyingPropertiesDom,XAdES,XADES_SIGNED_PROPERTIES);\n  signedPropertiesDom.setAttribute(ID,\"xades-\" + deterministicId);\n  incorporateSignedSignatureProperties();\n}"}
{"ids": "81491", "raw_code": "public int depth(){\n  return pointer;\n}"}
{"ids": "86311", "raw_code": "public void monitor(ScalingStateMonitorTask task){\n  taskQueue.add(task);\n  startMonitor();\n}"}
{"ids": "75524", "raw_code": "private static void writeFile(File file,List<String> lines) throws IOException {\n  if (!file.exists())   file.createNewFile();\n  FileWriter fw=new FileWriter(file);\n  BufferedWriter Bw=new BufferedWriter(fw);\n  PrintWriter pw=new PrintWriter(Bw);\n  for (  String line : lines)   pw.println(line);\n  Bw.close();\n  fw.close();\n  pw.close();\n}"}
{"ids": "11954", "raw_code": "public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {\n  if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {\n    throw new FileEncryptionException(\"Invalid auth tag parameter given!\");\n  }\n else {\n    byte[] storedAuthTag=atagList.get(chunkIdx);\n    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {\n      return false;\n    }\n else {\n      return true;\n    }\n  }\n}"}
{"ids": "68643", "raw_code": "private Document parseRouteFile() throws Exception {\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  factory.setNamespaceAware(true);\n  DocumentBuilder builder=factory.newDocumentBuilder();\n  return builder.parse(routeFile);\n}"}
{"ids": "10934", "raw_code": "public void removeDTEDDirectoryHandler(DTEDDirectoryHandler handler){\n  directories.remove(handler);\n}"}
{"ids": "44228", "raw_code": "public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {\n  addFile(contentProvider,fileName,entryInformation,Optional.empty());\n}"}
{"ids": "45955", "raw_code": "private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){\n  int max=original.size();\n  Vector<SnmpVarBind> result=new Vector<>(max - limit);\n  int i=limit;\n  for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) {\n    SnmpVarBind var=e.nextElement();\n    if (i > 0)     continue;\n    result.addElement(new SnmpVarBind(var.oid,var.value));\n  }\n  return result;\n}"}
{"ids": "60269", "raw_code": "public final void delayTask(@NotNull TransactionRunnable task){\n  myDelayedTasks.add(task);\n}"}
{"ids": "33308", "raw_code": "private static <T>int migrateAll(Migration<T> migration) throws Exception {\n  int migrated=0;\n  for (  T entity : migration.getAllEntities()) {\n    try {\n      if (migration.isMigrated(entity))       continue;\n    }\n catch (    Exception x) {\n      LOG.error(\"Couldn't check if the entity '{}' is migrated due to occurred error\",entity);\n      throw x;\n    }\n    try {\n      migration.migrate(entity);\n    }\n catch (    Exception x) {\n      LOG.error(\"Error migrating the entity '{}\",entity);\n      throw x;\n    }\n    migrated++;\n  }\n  return migrated;\n}"}
{"ids": "50407", "raw_code": "public static String encodeToString(byte[] src){\n  if (src == null) {\n    return null;\n  }\n  if (src.length == 0) {\n    return \"\";\n  }\n  String result;\n  try {\n    result=new String(delegate.encode(src),DEFAULT_CHARSET.displayName());\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new IllegalStateException(e);\n  }\n  return result;\n}"}
{"ids": "83997", "raw_code": "public static void chunkTaskSync(RegionWrapper region,final RunnableVal<int[]> task){\n  final int p1x=region.minX;\n  final int p1z=region.minZ;\n  final int p2x=region.maxX;\n  final int p2z=region.maxZ;\n  final int bcx=p1x >> 4;\n  final int bcz=p1z >> 4;\n  final int tcx=p2x >> 4;\n  final int tcz=p2z >> 4;\n  task.value=new int[7];\n  for (int x=bcx; x <= tcx; x++) {\n    for (int z=bcz; z <= tcz; z++) {\n      task.value[0]=x;\n      task.value[1]=z;\n      task.value[2]=task.value[0] << 4;\n      task.value[3]=task.value[1] << 4;\n      task.value[4]=task.value[2] + 15;\n      task.value[5]=task.value[3] + 15;\n      task.value[6]=0;\n      if (task.value[0] == bcx) {\n        task.value[2]=p1x;\n        task.value[6]=1;\n      }\n      if (task.value[0] == tcx) {\n        task.value[4]=p2x;\n        task.value[6]=1;\n      }\n      if (task.value[1] == bcz) {\n        task.value[3]=p1z;\n        task.value[6]=1;\n      }\n      if (task.value[1] == tcz) {\n        task.value[5]=p2z;\n        task.value[6]=1;\n      }\n      task.run();\n    }\n  }\n}"}
{"ids": "9011", "raw_code": "public ElsaSerializerPojo make(){\n  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));\n}"}
{"ids": "12613", "raw_code": "private void loadBinary(InputStream is) throws IOException {\n  if (is instanceof FileInputStream) {\n    FileInputStream fis=(FileInputStream)is;\n    FileChannel fc=fis.getChannel();\n    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());\n    bb.load();\n    loadBinary(bb);\n    is.close();\n  }\n else {\n    loadBinary(new DataInputStream(is));\n  }\n}"}
{"ids": "8320", "raw_code": "private static boolean isTwoSlotType(ClassNode type){\n  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;\n}"}
{"ids": "86317", "raw_code": "public SpecificationRunnerBuilder sections(String[] paramSections){\n  Collections.addAll(this.sections,paramSections);\n  return this;\n}"}
{"ids": "44466", "raw_code": "private void consumeCRLF() throws DecodingException {\n  char next=nextChar();\n  if (next != '\\n') {\n    consumeChar('\\r');\n  }\n  consumeChar('\\n');\n}"}
{"ids": "9862", "raw_code": "private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {\n  String sessionId=null;\n  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();\n  Validate.notNull(sessionList,\"sessionList\");\n  Validate.isTrue(sessionList.size() > 0);\n  for (  SessionIndex sessionIndex : sessionList) {\n    Validate.notNull(sessionIndex);\n    String participantSession=sessionIndex.getSessionIndex();\n    Validate.notNull(participantSession,\"participantSession\");\n    Session session=sessionManager.getByParticipant(participantSession);\n    if (session == null) {\n      throw new SamlServiceException(\"Server session not found\");\n    }\n    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {\n      throw new SamlServiceException(\"Issuer URL does not match session participant URL\");\n    }\n    if (sessionId == null) {\n      sessionId=session.getId();\n    }\n else {\n      if (!sessionId.equals(session.getId())) {\n        throw new SamlServiceException(\"Participant requested multiple server sessions to be terminated\");\n      }\n    }\n  }\n  return sessionId;\n}"}
{"ids": "72725", "raw_code": "public void accept(final Path file) throws InterruptedException {\n  logger.info(String.format(\"Sending to thread pool; will queue if full: \\\"%s\\\".\",file));\n  permits.acquire();\n  executor.execute(new ConsumerTask(file));\n}"}
{"ids": "7390", "raw_code": "private Activity checkActivity(){\n  Activity activity=mActivity.get();\n  if (activity == null) {\n    throw new IllegalStateException(\"No activity set. Either subclass PermisoActivity or call Permiso.setActivity() in onCreate() and onResume() of your Activity.\");\n  }\n  return activity;\n}"}
{"ids": "68529", "raw_code": "@Override public synchronized void start(){\n  LOGGER.info(\"Starting the C2MON alive timer mechanism.\");\n  timer=new Timer(\"C2MON-alive-timer\");\n  timer.schedule(this,INITIAL_SCAN_DELAY,SCAN_INTERVAL);\n  running=true;\n}"}
{"ids": "77400", "raw_code": "public boolean isLandingPage(URL url){\n  if (url.getQuery() != null) {\n    return false;\n  }\n else {\n    return landingPageSuffix(url) != \"\";\n  }\n}"}
{"ids": "62288", "raw_code": "protected static void writeRowCountDefinitions(TableCreator creator,ByteBuffer buffer){\n  writeRowCountDefinitions(creator,buffer,creator.getIndexCount());\n}"}
{"ids": "5620", "raw_code": "public void send(String theString){\n  send(theString.getBytes());\n}"}
{"ids": "21195", "raw_code": "public void init(){\n  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);\n  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);\n}"}
{"ids": "29594", "raw_code": "private void sign(final byte[] contentBytes,final ByteArrayOutputStream mimeContent) throws Exception {\n  String algId=conf.getSignatureAlgorithmId();\n  String keyId=conf.getActiveSigningKey();\n  log.debug(\"Signing directory with signing key '{}' \" + \"and signing algorithm '{}'\",keyId,algId);\n  String signature=signHelper(keyId,algId,contentBytes);\n  mimeContent.write(envelopeHeader.getBytes());\n  try (MultipartEncoder encoder=new MultipartEncoder(mimeContent,envelopeBoundary)){\n    encoder.startPart(mpMixedContentType(dataBoundary));\n    encoder.write(contentBytes);\n    String algURI=CryptoUtils.getSignatureAlgorithmURI(algId);\n    String hashURI=hashCalculator.getAlgoURI();\n    Path verificatioCertPath=conf.getCertPath(keyId);\n    encoder.startPart(MimeTypes.BINARY,new String[]{HEADER_CONTENT_TRANSFER_ENCODING + \": base64\",HEADER_SIG_ALGO_ID + \": \" + algURI,HEADER_VERIFICATION_CERT_HASH + \": \" + getVerificationCertHash(verificatioCertPath)+ \"; \"+ HEADER_HASH_ALGORITHM_ID+ \"=\"+ hashURI});\n    encoder.write(signature.getBytes());\n  }\n   log.debug(\"Generated signed directory:\\n{}\\n\",mimeContent.toString());\n  Files.write(tempConfPath,mimeContent.toByteArray());\n  log.debug(\"Written signed directory to '{}'\",tempConfPath);\n}"}
{"ids": "68777", "raw_code": "private boolean nextItemIs(String match) throws IOException {\n  int c;\n  while (isWhiteSpace(c=buf.get())) {\n  }\n  for (int i=0; i < match.length(); i++) {\n    if (i > 0) {\n      c=buf.get();\n    }\n    if (c != match.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "23618", "raw_code": "public static Object deserializeObject(final byte[] objBytes,final ClassLoader loader) throws IOException, ClassNotFoundException {\n  ObjectInputStream objIn=null;\n  try {\n    objIn=new ClassLoaderObjectInputStream(new ByteArrayInputStream(objBytes),loader);\n    return objIn.readObject();\n  }\n  finally {\n    close(objIn);\n  }\n}"}
{"ids": "9201", "raw_code": "public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {\n  a_adeVersion=adeVersion;\n  if (startIntervalDateTime < 0) {\n    throw new IllegalArgumentException(String.format(\"Interval start time must be \" + \"greater than 0! Failed creating new interval with parameters: serialNum=%d, \" + \"startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, \"+ \"intervalClassification=%s, adeVersion=%s\",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));\n  }\n  m_startIntervalTime=startIntervalDateTime;\n  m_framingFlowType=intervalDataType;\n  m_serialNum=serialNum;\n  m_intervalClassification=intervalClassification;\n  if (m_intervalClassification == null) {\n    m_intervalClassification=IntervalClassificationEnum.REGULAR;\n  }\n  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();\n  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();\n  m_source=source;\n  if (coverageFactor <= 0 || coverageFactor > 1) {\n    throw new AdeInternalException(\"Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: \" + coverageFactor);\n  }\n  m_coverageFactor=coverageFactor;\n}"}
{"ids": "36671", "raw_code": "public static boolean isTrue(Map<String,Object> dict,String key){\n  return isTrue(dict,key,false);\n}"}
{"ids": "72802", "raw_code": "private void initMapLayer(){\n  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());\n  Log.i(TAG,Float.toString(zoom));\n  mapView.setCurrentZoom(zoom,0,0);\n  float width=mapView.getWidth() - zoom * image.getWidth();\n  float height=mapView.getHeight() - zoom * image.getHeight();\n  mapView.translate(width / 2,height / 2);\n}"}
{"ids": "27948", "raw_code": "public static double sampleSkew(int size,double moment3,double sampleVariance){\n  int n=size;\n  double s=Math.sqrt(sampleVariance);\n  double m3=moment3 * n;\n  return n * m3 / ((n - 1) * (n - 2) * s* s* s);\n}"}
{"ids": "10061", "raw_code": "private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException {\n  int offset=getFirstSpanOffset(spans);\n  assert (start >= offset);\n  assert (end >= offset);\n  spans+=HTML_OPEN_SPAN;\n  int substart=getSpanPos(spans,start - offset);\n  int subend=getSpanPos(spans,end - offset + 1);\n  return spans.substring(substart,subend);\n}"}
{"ids": "84577", "raw_code": "public void finished(long chainLength){\n  currentState=chainLength;\n  if (loggers != null) {\n    for (    Logger logger : loggers) {\n      logger.log(currentState);\n      logger.stopLogging();\n    }\n  }\n  if (showOperatorAnalysis) {\n    showOperatorAnalysis(System.out);\n  }\n  if (operatorAnalysisFile != null) {\n    try {\n      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));\n      showOperatorAnalysis(out);\n      out.flush();\n      out.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "74765", "raw_code": "protected void positiveClose(){\n  freeContent();\n}"}
{"ids": "82406", "raw_code": "public InputStreamReader(java.io.InputStream is,java.lang.String enc) throws java.io.UnsupportedEncodingException {\n  internal=is;\n  this.enc=enc.intern();\n}"}
{"ids": "1838", "raw_code": "public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception {\n  ProtonServerSenderContext protonSender=serverSenders.get(consumer);\n  if (protonSender != null) {\n    return protonSender.deliverMessage(message,deliveryCount);\n  }\n  return 0;\n}"}
{"ids": "73702", "raw_code": "public static String decode(AbstractMessage msg,Boolean ext,int header){\n  if (ext == false) {\n    return decode(msg);\n  }\n  return \"Bootloader Message Type: \" + header;\n}"}
{"ids": "38944", "raw_code": "private Instance votedReclassifyExample(Instance example) throws Exception {\n  int classVotes[]=new int[getNumClasses()];\n  for (int i=0; i < classVotes.length; i++) {\n    classVotes[i]=0;\n  }\n  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {\n    RuleList rl=e.nextElement();\n    int classValue=(int)rl.classifyInstance(example);\n    if (classValue >= 0) {\n      classVotes[classValue]++;\n    }\n  }\n  int maxVote=0;\n  int vote=-1;\n  for (int i=0; i < classVotes.length; i++) {\n    if (classVotes[i] > maxVote) {\n      maxVote=classVotes[i];\n      vote=i;\n    }\n  }\n  if (vote >= 0) {\n    example.setClassValue(vote);\n  }\n else {\n    throw new Exception(\"Error in instance classification.\");\n  }\n  return example;\n}"}
{"ids": "48781", "raw_code": "public final int hashCode(){\n  return System.identityHashCode(this);\n}"}
{"ids": "283", "raw_code": "private boolean keyChainContainsPrivateKey(Collection<ECKey> keyChain,ECKey keyToAdd){\n  if (keyChain == null || keyToAdd == null) {\n    return false;\n  }\n else {\n    for (    ECKey loopKey : keyChain) {\n      if (Arrays.equals(keyToAdd.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) {\n        return true;\n      }\n    }\n    return false;\n  }\n}"}
{"ids": "40176", "raw_code": "public ScriptBuilder data(byte[] data){\n  if (data.length == 0)   return smallNum(0);\n else   return data(chunks.size(),data);\n}"}
{"ids": "5339", "raw_code": "private void writeUserRegistry(LocalContainer container,File configDir,Map<String,String> users,Map<String,List<String>> groups) throws IOException {\n  File usersXML=new File(configDir,\"cargo-users.xml\");\n  PrintStream writer=ServerConfigUtils.open(usersXML);\n  writer.println(\"  <basicRegistry id=\\\"basic\\\">\");\n  for (  Map.Entry<String,String> user : users.entrySet()) {\n    writer.print(\"    <user name=\\\"\");\n    writer.print(user.getKey());\n    writer.print(\"\\\" password=\\\"\");\n    writer.print(user.getValue());\n    writer.println(\"\\\"/>\");\n  }\n  for (  Map.Entry<String,List<String>> group : groups.entrySet()) {\n    writer.print(\"    <group name=\\\"\");\n    writer.print(group.getKey());\n    writer.println(\"\\\">\");\n    for (    String member : group.getValue()) {\n      writer.print(\"      <member name=\\\"\");\n      writer.print(member);\n      writer.println(\"\\\"/>\");\n    }\n    writer.println(\"    </group>\");\n  }\n  writer.println(\"  </basicRegistry>\");\n  ServerConfigUtils.close(writer);\n}"}
{"ids": "17029", "raw_code": "@GenIgnore static Record createRecord(String name,String address,Class itf,JsonObject metadata){\n  return createRecord(name,address,itf.getName(),metadata);\n}"}
{"ids": "32739", "raw_code": "public StopwatchCPU(){\n  threadTimer=ManagementFactory.getThreadMXBean();\n  start=threadTimer.getCurrentThreadCpuTime();\n}"}
{"ids": "12761", "raw_code": "public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {\n  if (inputtype == null || locale == null || voice == null || inputtext == null) {\n    throw new NullPointerException(\"Null argument\");\n  }\n  byte[] audio=null;\n  String query=\"Select outputaudio FROM marycache WHERE inputtype = '\" + inputtype + \"' AND outputtype = 'AUDIO' AND locale = '\"+ locale+ \"' AND voice = '\"+ voice+ \"' AND outputparams = '\"+ outputparams+ \"' AND style = '\"+ style+ \"' AND effects = '\"+ effects+ \"' AND inputtext = ?\";\n  PreparedStatement st=connection.prepareStatement(query);\n  st.setString(1,inputtext);\n  ResultSet results=st.executeQuery();\n  if (results.next()) {\n    audio=results.getBytes(1);\n  }\n  return audio;\n}"}
{"ids": "42095", "raw_code": "public void addCondition(final Condition condition){\n  conditions.add(condition);\n  condition.setId(conditionIdCounter++);\n}"}
{"ids": "30058", "raw_code": "public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){\n  byte[] buffer=new byte[byteBuffer.remaining()];\n  byteBuffer.get(buffer);\n  return buffer;\n}"}
{"ids": "21381", "raw_code": "public static Set<URI> fetchRPTargetVirtualPools(DbClient dbClient){\n  Set<URI> rpProtectedTargetVPools=new HashSet<URI>();\n  try {\n    List<URI> vpoolProtectionSettingsURIs=dbClient.queryByType(VpoolProtectionVarraySettings.class,true);\n    Iterator<VpoolProtectionVarraySettings> vPoolProtectionSettingsItr=dbClient.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingsURIs,true);\n    while (vPoolProtectionSettingsItr.hasNext()) {\n      VpoolProtectionVarraySettings rSetting=vPoolProtectionSettingsItr.next();\n      if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) {\n        rpProtectedTargetVPools.add(rSetting.getVirtualPool());\n      }\n    }\n  }\n catch (  Exception ex) {\n    _log.error(\"Exception occurred while fetching RP enabled virtualpools\",ex);\n  }\n  return rpProtectedTargetVPools;\n}"}
{"ids": "64407", "raw_code": "public int cardinality(){\n  int sum=0;\n  for (  long l : this.data)   sum+=Long.bitCount(l);\n  return sum;\n}"}
{"ids": "67507", "raw_code": "private String deEscapeLiteral(String lit){\n  return lit.replaceAll(\"\\\\\\\\\\\"\",\"\\\"\");\n}"}
{"ids": "9693", "raw_code": "public DNewKeyStoreType(JFrame parent){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  setTitle(res.getString(\"DNewKeyStoreType.Title\"));\n  initComponents();\n}"}
{"ids": "84511", "raw_code": "public void removeListener(final L listener){\n  Validate.notNull(listener,\"Listener object cannot be null.\");\n  listeners.remove(listener);\n}"}
{"ids": "77939", "raw_code": "public void run(){\n  start();\n  try {\n    while (true) {\n      Thread.sleep(interval);\n      processConfigMessages();\n    }\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n    log.warn(\"Got interrupt in config manager thread, so shutting down\");\n  }\n finally {\n    log.info(\"Stopping the config manager\");\n    stop();\n  }\n}"}
{"ids": "46335", "raw_code": "private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  init(getName(),getMask(actions));\n}"}
{"ids": "41093", "raw_code": "public int predBlockIndexForSourcesIndex(int sourcesIndex){\n  return operands.get(sourcesIndex).blockIndex;\n}"}
{"ids": "86660", "raw_code": "void appendProgramDescription(final WrappingStringBuilder wb){\n  if (!mProgramDescription.equals(\"\")) {\n    wb.append(LS);\n    wb.setWrapIndent(0);\n    wb.wrapTextWithNewLines(mProgramDescription);\n  }\n}"}
{"ids": "6590", "raw_code": "@SuppressWarnings(\"deprecation\") private static final URL toURL(String location,boolean file){\n  if (file) {\n    File f=new File(location);\n    if (f.exists()) {\n      try {\n        return f.toURL();\n      }\n catch (      MalformedURLException murl) {\n        return null;\n      }\n    }\n else {\n      return null;\n    }\n  }\n else {\n    return getURL(location);\n  }\n}"}
{"ids": "12582", "raw_code": "protected Object parseValue(String string){\n  int openParen=string.indexOf(\"(\");\n  String type=string.substring(0,openParen);\n  String value=string.substring(openParen + 1,string.length() - 1);\n  if (type.equals(\"String\")) {\n    return value;\n  }\n else   if (type.equals(\"Float\")) {\n    return new Float(Float.parseFloat(value));\n  }\n else   if (type.equals(\"Integer\")) {\n    return new Integer(Integer.parseInt(value));\n  }\n else   if (type.equals(\"List\")) {\n    StringTokenizer tok=new StringTokenizer(value,\",\");\n    int size=tok.countTokens();\n    int[] values=new int[size];\n    for (int i=0; i < size; i++) {\n      float fval=Float.parseFloat(tok.nextToken());\n      values[i]=Math.round(fval);\n    }\n    return values;\n  }\n else {\n    throw new Error(\"Unknown type: \" + type);\n  }\n}"}
{"ids": "20174", "raw_code": "@Override public void update(List<EnvVar> dataList){\n  envVarList.clear();\n  if (dataList == null) {\n    for (    EnvVar envVar : builtInEnvVarMap.values()) {\n      envVarList.add(envVar);\n    }\n  }\n else {\n    for (    EnvVar envVar : dataList) {\n      if (builtInEnvVarMap.containsKey(envVar.getName())) {\n        envVarList.add(new EnvVar(envVar,true));\n      }\n else {\n        envVarList.add(new EnvVar(envVar,false));\n      }\n    }\n  }\n  setEnvironmentVariableValues();\n}"}
{"ids": "23835", "raw_code": "protected void notifyTimestampsToGateways(EntryEventImpl event){\n  VersionTagHolder updateTimeStampEvent=new VersionTagHolder(event.getVersionTag());\n  updateTimeStampEvent.setOperation(Operation.UPDATE_VERSION_STAMP);\n  updateTimeStampEvent.setKeyInfo(event.getKeyInfo());\n  updateTimeStampEvent.setGenerateCallbacks(false);\n  updateTimeStampEvent.distributedMember=event.getDistributedMember();\n  updateTimeStampEvent.setNewEventId(getSystem());\n  if (event.getRegion() instanceof BucketRegion) {\n    BucketRegion br=(BucketRegion)event.getRegion();\n    PartitionedRegion pr=br.getPartitionedRegion();\n    updateTimeStampEvent.setRegion(pr);\n    if (pr.isParallelWanEnabled()) {\n      br.handleWANEvent(updateTimeStampEvent);\n    }\n    if (pr.isInitialized()) {\n      pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);\n    }\n  }\n else {\n    updateTimeStampEvent.setRegion(event.getRegion());\n    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);\n  }\n}"}
{"ids": "19652", "raw_code": "public Token nextRegex(Pattern pattern){\n  if (!hasNextRegex(pattern))   throw new IllegalStateException(\"No more occurrences found!\");\n  Matcher matcher=anyMentionPattern.matcher(remaining);\n  if (!matcher.find())   throw new IllegalStateException(\"Couldn't find any matches!\");\n  final int start=currentPosition + matcher.start();\n  final int end=currentPosition + matcher.end();\n  stepTo(end);\n  return new Token(this,start,end);\n}"}
{"ids": "67332", "raw_code": "public String asString() throws IOException {\n  long len=getContentLength();\n  ByteArrayOutputStream buf;\n  if (0 < len) {\n    buf=new ByteArrayOutputStream((int)len);\n  }\n else {\n    buf=new ByteArrayOutputStream();\n  }\n  writeTo(buf);\n  return decode(buf.toByteArray(),getCharacterEncoding());\n}"}
{"ids": "49572", "raw_code": "public void execute() throws IOException {\n  String key=\"mqtt-\" + (System.currentTimeMillis() / 1000);\n  String b64Key=Base64.encode(key);\n  sendHandshakeRequest(b64Key);\n  receiveHandshakeResponse(b64Key);\n}"}
{"ids": "84004", "raw_code": "private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException {\n  try {\n    while (emitQueue.size() > taskCountAllowed) {\n      Future<byte[]> future=emitQueue.remove();\n      byte[] toWrite=future.get();\n      blockSizes.add(toWrite.length);\n      out.write(toWrite);\n    }\n    tryEmit();\n  }\n catch (  ExecutionException e) {\n    throw new IOException(e);\n  }\ncatch (  InterruptedException e) {\n    throw new InterruptedIOException();\n  }\n}"}
{"ids": "17160", "raw_code": "public static void scaleRectAboutCenter(Rect r,float scale){\n  if (scale != 1.0f) {\n    int cx=r.centerX();\n    int cy=r.centerY();\n    r.offset(-cx,-cy);\n    r.left=(int)(r.left * scale + 0.5f);\n    r.top=(int)(r.top * scale + 0.5f);\n    r.right=(int)(r.right * scale + 0.5f);\n    r.bottom=(int)(r.bottom * scale + 0.5f);\n    r.offset(cx,cy);\n  }\n}"}
{"ids": "62327", "raw_code": "private static CharHandler parseUnprintableExtCodes(String[] codeStrings){\n  if (codeStrings.length != 1) {\n    throw new IllegalStateException(\"Unexpected code strings \" + Arrays.asList(codeStrings));\n  }\n  byte[] bytes=codesToBytes(codeStrings[0],true);\n  if (bytes.length != 1) {\n    throw new IllegalStateException(\"Unexpected code strings \" + Arrays.asList(codeStrings));\n  }\n  return new UnprintableExtCharHandler(bytes[0]);\n}"}
{"ids": "64334", "raw_code": "public void updatePendingList(){\n  while (mPendingList.size() > 0 && activeListHasRoom()) {\n    DownloadInfoRunnable pending=mPendingList.get(0);\n    pending.changeStatusState(new ActiveState(pending));\n  }\n}"}
{"ids": "29561", "raw_code": "@SuppressWarnings(\"unused\") public static float valueRangeLimit(float value,float startValue,float endValue){\n  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);\n  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);\n  return value;\n}"}
{"ids": "44574", "raw_code": "public static boolean isConnected(NetType netType,NetworkInfo networkInfo){\n  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;\n else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;\n else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;\n  return false;\n}"}
{"ids": "24417", "raw_code": "public void deleteItem(int position){\n  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {\n    mDataList.remove(position);\n    notifyItemRemoved(position);\n  }\n}"}
{"ids": "81855", "raw_code": "private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){\n  if (sourceChannel == destChannel) {\n    return sourceChannel;\n  }\n  float ratio=((float)offset) / ((float)distance);\n  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);\n  if (sourceChannel > destChannel) {\n    return sourceChannel - pos;\n  }\n else {\n    return sourceChannel + pos;\n  }\n}"}
{"ids": "38466", "raw_code": "public static void addStartupListener(StartUpListener s){\n  m_StartupListeners.add(s);\n}"}
{"ids": "31921", "raw_code": "public static void closeQuiet(@Nullable SelectionKey rsrc){\n  if (rsrc != null)   closeQuiet(rsrc.channel());\n}"}
{"ids": "83938", "raw_code": "public CompletableFuture<NewFile> run(){\n  LOG.log(Level.FINE,\"starting optimized file creation for {0} files\",files.size());\n  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();\n  final List<TSData> fjpFiles=this.files;\n  TASK_POOL.execute(null);\nsynchronized (OUTSTANDING) {\n    OUTSTANDING.add(fileCreation);\n  }\n  this.files=new LinkedList<>();\n  return fileCreation;\n}"}
{"ids": "85416", "raw_code": "protected JsOutput newJsOutput(Module m) throws IOException {\n  return new JsOutput(m,isCompilingLanguageModule());\n}"}
{"ids": "10289", "raw_code": "public String text(){\n  StringBuilder sb=new StringBuilder();\n  for (  Node node : nodes) {\n    sb.append(node.getTextContent());\n  }\n  return sb.toString();\n}"}
{"ids": "3866", "raw_code": "public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){\n  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));\n}"}
{"ids": "42234", "raw_code": "public String(StringBuffer stringbuffer){\n  offset=0;\nsynchronized (stringbuffer) {\n    value=stringbuffer.shareValue();\n    count=stringbuffer.length();\n  }\n}"}
{"ids": "7942", "raw_code": "public static Range iterateToFindDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  ParamChecks.nullNotPermitted(dataset,\"dataset\");\n  ParamChecks.nullNotPermitted(visibleSeriesKeys,\"visibleSeriesKeys\");\n  double minimum=Double.POSITIVE_INFINITY;\n  double maximum=Double.NEGATIVE_INFINITY;\n  if (includeInterval && dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;\n    Iterator iterator=visibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey=(Comparable)iterator.next();\n      int series=dataset.indexOf(seriesKey);\n      int itemCount=dataset.getItemCount(series);\n      for (int item=0; item < itemCount; item++) {\n        double xvalue=ixyd.getXValue(series,item);\n        double lvalue=ixyd.getStartXValue(series,item);\n        double uvalue=ixyd.getEndXValue(series,item);\n        if (!Double.isNaN(xvalue)) {\n          minimum=Math.min(minimum,xvalue);\n          maximum=Math.max(maximum,xvalue);\n        }\n        if (!Double.isNaN(lvalue)) {\n          minimum=Math.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum=Math.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else {\n    Iterator iterator=visibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey=(Comparable)iterator.next();\n      int series=dataset.indexOf(seriesKey);\n      int itemCount=dataset.getItemCount(series);\n      for (int item=0; item < itemCount; item++) {\n        double x=dataset.getXValue(series,item);\n        if (!Double.isNaN(x)) {\n          minimum=Math.min(minimum,x);\n          maximum=Math.max(maximum,x);\n        }\n      }\n    }\n  }\n  if (minimum == Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}"}
{"ids": "15034", "raw_code": "private void checkComplianceAttributes(AttrSet attrSet,boolean ignoreCompliance) throws AMException {\n  if (!ignoreCompliance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {\n    complianceImpl.verifyAttributes(attrSet);\n  }\n}"}
{"ids": "21671", "raw_code": "private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){\n  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);\n  for (  ZoneInfo zoneInfo : zoningMap.values()) {\n    log.info(\"Found zone: {} for initiator {} and port {}\",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});\n  }\n  mask.setZoningMap(zoningMap);\n}"}
{"ids": "23320", "raw_code": "public InvitationStatus waitInvitationAnswer(){\n  return waitInvitationAnswer(mRingingPeriod);\n}"}
{"ids": "46402", "raw_code": "private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel rsm,ListSelectionModel csm){\n  int totalCount;\n  int minX, maxX, minY, maxY;\n  boolean rs=table.getRowSelectionAllowed();\n  boolean cs=table.getColumnSelectionAllowed();\n  if (rs && cs) {\n    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();\n    minX=csm.getMinSelectionIndex();\n    maxX=csm.getMaxSelectionIndex();\n    minY=rsm.getMinSelectionIndex();\n    maxY=rsm.getMaxSelectionIndex();\n  }\n else   if (rs) {\n    totalCount=table.getSelectedRowCount();\n    minX=0;\n    maxX=table.getColumnCount() - 1;\n    minY=rsm.getMinSelectionIndex();\n    maxY=rsm.getMaxSelectionIndex();\n  }\n else   if (cs) {\n    totalCount=table.getSelectedColumnCount();\n    minX=csm.getMinSelectionIndex();\n    maxX=csm.getMaxSelectionIndex();\n    minY=0;\n    maxY=table.getRowCount() - 1;\n  }\n else {\n    totalCount=0;\n    minX=maxX=minY=maxY=0;\n  }\n  boolean stayInSelection;\n  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {\n    stayInSelection=false;\n    maxX=table.getColumnCount() - 1;\n    maxY=table.getRowCount() - 1;\n    minX=Math.min(0,maxX);\n    minY=Math.min(0,maxY);\n  }\n else {\n    stayInSelection=true;\n  }\n  if (dy == 1 && leadColumn == -1) {\n    leadColumn=minX;\n    leadRow=-1;\n  }\n else   if (dx == 1 && leadRow == -1) {\n    leadRow=minY;\n    leadColumn=-1;\n  }\n else   if (dy == -1 && leadColumn == -1) {\n    leadColumn=maxX;\n    leadRow=maxY + 1;\n  }\n else   if (dx == -1 && leadRow == -1) {\n    leadRow=maxY;\n    leadColumn=maxX + 1;\n  }\n  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);\n  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);\n  do {\n    calcNextPos(dx,minX,maxX,dy,minY,maxY);\n  }\n while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));\n  return stayInSelection;\n}"}
{"ids": "52155", "raw_code": "private double[][] xPrime(int t){\n  double[][] x=new double[1][getNumLags() * numVars];\n  for (int i=0; i < getNumLags(); i++) {\n    double[][] yPrime=yPrime(t - i - 1);\n    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);\n  }\n  return x;\n}"}
{"ids": "28372", "raw_code": "public int size(){\n  return components.size();\n}"}
{"ids": "28727", "raw_code": "public void omitLessFreq(){\n  if (name == null)   return;\n  int threshold=n_words[0] / LESS_FREQ_RATIO;\n  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;\n  Set<String> keys=freq.keySet();\n  int roman=0;\n  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {\n    String key=i.next();\n    int count=freq.get(key);\n    if (count <= threshold) {\n      n_words[key.length() - 1]-=count;\n      i.remove();\n    }\n else {\n      if (key.matches(\"^[A-Za-z]$\")) {\n        roman+=count;\n      }\n    }\n  }\n  if (roman < n_words[0] / 3) {\n    Set<String> keys2=freq.keySet();\n    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {\n      String key=i.next();\n      if (key.matches(\".*[A-Za-z].*\")) {\n        n_words[key.length() - 1]-=freq.get(key);\n        i.remove();\n      }\n    }\n  }\n}"}
{"ids": "13938", "raw_code": "public static PublicKeySelector fromString(String type){\n  if (type != null) {\n    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {\n      if (type.equalsIgnoreCase(keySelector.type)) {\n        return keySelector;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "11209", "raw_code": "public static void describeShapeDetail(Shape shape,double flattening){\n  PathIterator pi2=shape.getPathIterator(null);\n  FlatteningPathIterator pi=new FlatteningPathIterator(pi2,flattening);\n  double[] coords=new double[6];\n  int pointCount=0;\n  Debug.output(\" -- start describeShapeDetail with flattening[\" + flattening + \"]\");\n  while (!pi.isDone()) {\n    int type=pi.currentSegment(coords);\n    Debug.output(\" Shape point [\" + type + \"] (\"+ (pointCount++)+ \") \"+ coords[0]+ \", \"+ coords[1]);\n    pi.next();\n  }\n  Debug.output(\" -- end (\" + pointCount + \")\");\n}"}
{"ids": "53065", "raw_code": "protected static String shortenClassname(String nam,char c){\n  final int lastdot=nam.lastIndexOf(c);\n  if (lastdot >= 0) {\n    nam=nam.substring(lastdot + 1);\n  }\n  return nam;\n}"}
{"ids": "49116", "raw_code": "@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){\n  if (flipAction == BufferCapabilities.FlipContents.COPIED) {\n    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);\n    SurfaceData sd=vsm.getPrimarySurfaceData();\n    if (sd instanceof GLXVSyncOffScreenSurfaceData) {\n      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;\n      SurfaceData bbsd=vsd.getFlipSurface();\n      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);\n      try {\n        bbg.drawImage(xBackBuffer,0,0,null);\n      }\n  finally {\n        bbg.dispose();\n      }\n    }\n else {\n      Graphics g=peer.getGraphics();\n      try {\n        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);\n      }\n  finally {\n        g.dispose();\n      }\n      return;\n    }\n  }\n else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {\n    return;\n  }\n  OGLSurfaceData.swapBuffers(peer.getContentWindow());\n  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {\n    Graphics g=xBackBuffer.getGraphics();\n    try {\n      g.setColor(target.getBackground());\n      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());\n    }\n  finally {\n      g.dispose();\n    }\n  }\n}"}
{"ids": "13576", "raw_code": "public boolean addProperty(OwlProperty property){\n  property.addRestriction(this);\n  return properties.add(property);\n}"}
{"ids": "80139", "raw_code": "void onMoved(){\n  double diff=System.currentTimeMillis() - timeStamp;\n  timeStamp=0;\n  if (diff > DISCARD_THRESHOLD) {\n    return;\n  }\n  double recentJitter=0;\n  double sum=0.0;\n  for (int i=0; i < VECTOR_LENGTH; i++) {\n    double old=times[i];\n    double avg=(diff + old) / 2;\n    recentJitter+=Math.abs(old - diff);\n    times[i]=avg;\n    diff=old;\n    sum+=avg;\n  }\n  recentJitter/=8;\n  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;\n  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);\n  WtWindowManager wm=WtWindowManager.getInstance();\n  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));\n  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));\n}"}
{"ids": "31189", "raw_code": "public ServiceID(DataInput in) throws IOException {\n  this.mostSig=in.readLong();\n  this.leastSig=in.readLong();\n}"}
{"ids": "8022", "raw_code": "@SneakyThrows public void addKeyToKeystore(KeyStore keyStore,X509Certificate cert,RSAPrivateKey privateKey,String alias,String password){\n  KeyStore.PasswordProtection pass=new KeyStore.PasswordProtection(password.toCharArray());\n  Certificate[] certificateChain={cert};\n  keyStore.setEntry(alias,new KeyStore.PrivateKeyEntry(privateKey,certificateChain),pass);\n}"}
{"ids": "66789", "raw_code": "public boolean needsReload(File file){\n  return fFilesToReoad.contains(file);\n}"}
{"ids": "56341", "raw_code": "public PutRepositoryRequest source(byte[] repositoryDefinition){\n  return source(repositoryDefinition,0,repositoryDefinition.length);\n}"}
{"ids": "35988", "raw_code": "@Override public void write(String str){\n  int start=0;\n  while (start < str.length()) {\n    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());\n    Log.i(TAG,str.substring(start,end));\n    start=end;\n  }\n}"}
{"ids": "79069", "raw_code": "private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){\n  int[] sortIndex;\n  int[] sortIndexInverted;\n  Arrays.sort(dictionarySortModels);\n  sortIndex=new int[dictionarySortModels.length];\n  sortIndexInverted=new int[dictionarySortModels.length];\n  for (int i=0; i < dictionarySortModels.length; i++) {\n    CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i];\n    sortIndex[i]=dictionarySortModel.getKey();\n    sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1;\n  }\n  dictionarySortModels=null;\n  List<Integer> sortIndexList=convertToList(sortIndex);\n  List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted);\n  return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList);\n}"}
{"ids": "69744", "raw_code": "private void addFeature(JsonNode feature,int index){\n  PointFeature feat=null;\n  try {\n    feat=PointFeature.fromJsonNode(feature);\n  }\n catch (  EmptyPolygonException e) {\n    LOG.warn(\"Empty MultiPolygon, skipping.\");\n    return;\n  }\ncatch (  UnsupportedGeometryException e) {\n    LOG.warn(e.message);\n    return;\n  }\n  if (feat == null) {\n    return;\n  }\n  addFeature(feat,index);\n}"}
{"ids": "74992", "raw_code": "public BitString(final String value){\n  this(value.length());\n  for (int i=0; i < value.length(); i++) {\n    if (value.charAt(i) == '1') {\n      setBit(value.length() - (i + 1),true);\n    }\n else     if (value.charAt(i) != '0') {\n      throw new IllegalArgumentException(\"Illegal character at position \" + i);\n    }\n  }\n}"}
{"ids": "39396", "raw_code": "public void write(Writer writer) throws Exception {\n  writer.write(toString());\n  writer.flush();\n}"}
{"ids": "72601", "raw_code": "public static boolean isCglibRenamedMethod(Method renamedMethod){\n  String name=renamedMethod.getName();\n  if (name.startsWith(CGLIB_RENAMED_METHOD_PREFIX)) {\n    int i=name.length() - 1;\n    while (i >= 0 && Character.isDigit(name.charAt(i))) {\n      i--;\n    }\n    return ((i > CGLIB_RENAMED_METHOD_PREFIX.length()) && (i < name.length() - 1) && (name.charAt(i) == '$'));\n  }\n  return false;\n}"}
{"ids": "14366", "raw_code": "public PWResetException(String bundleName,String errCode,Object[] args){\n  super(bundleName,errCode,args);\n  errList=new ArrayList(1);\n  errList.add(getMessage());\n}"}
{"ids": "12407", "raw_code": "public static String[] unionArrays(String[] array1,String[] array2){\n  if (array1 == null) {\n    return array2;\n  }\n  if (array2 == null) {\n    return array1;\n  }\n  Set<String> set=new LinkedHashSet<>();\n  set.addAll(Arrays.asList(array1));\n  set.addAll(Arrays.asList(array2));\n  return set.toArray(new String[set.size()]);\n}"}
{"ids": "49217", "raw_code": "boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){\n  if (!window.isShowing()) {\n    stateLog.finer(\"Window is not showing\");\n    return false;\n  }\n  int wm_state=window.getWMState();\n  if (wm_state == XUtilConstants.WithdrawnState) {\n    stateLog.finer(\"WithdrawnState\");\n    return false;\n  }\n else {\n    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {\n      stateLog.finer(\"Window WM_STATE is \" + wm_state);\n    }\n  }\n  boolean is_state_change=false;\n  if (e.get_atom() == XA_WM_STATE.getAtom()) {\n    is_state_change=true;\n  }\n  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {\n    is_state_change|=proto.isStateChange(e);\n    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {\n      stateLog.finest(proto + \": is state changed = \" + is_state_change);\n    }\n  }\n  return is_state_change;\n}"}
{"ids": "45890", "raw_code": "@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();\n  if (xpathOwnerNode == null) {\n    return null;\n  }\n  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);\n  int currentNode=xctxt.getCurrentNode();\n  DTM dtm=xctxt.getDTM(currentNode);\n  int docContext=dtm.getDocument();\n  if (DTM.NULL == docContext) {\n    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);\n  }\n{\n    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));\n    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);\n    if (currentDoc != xpathOwnerDoc) {\n      throw new TransformerException(I18n.translate(\"xpath.funcHere.documentsDiffer\"));\n    }\n  }\n  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());\n  NodeSetDTM nodeSet=nodes.mutableNodeset();\n{\n    int hereNode=DTM.NULL;\nswitch (dtm.getNodeType(xpathOwnerNodeDTM)) {\ncase Node.ATTRIBUTE_NODE:\ncase Node.PROCESSING_INSTRUCTION_NODE:\n{\n        hereNode=xpathOwnerNodeDTM;\n        nodeSet.addNode(hereNode);\n        break;\n      }\ncase Node.TEXT_NODE:\n{\n      hereNode=dtm.getParent(xpathOwnerNodeDTM);\n      nodeSet.addNode(hereNode);\n      break;\n    }\ndefault :\n  break;\n}\n}\nnodeSet.detach();\nreturn nodes;\n}"}
{"ids": "66885", "raw_code": "public static String grabClass(String signature){\n  Matcher matcher=sigRE.matcher(signature);\n  boolean b=matcher.matches();\n  if (!b && matcher.groupCount() != 4)   logger.error(\"Bad method signature: {}\",signature);\n  return matcher.group(1);\n}"}
{"ids": "83910", "raw_code": "public TimeSeriesMetricDeltaSet(Stream<Entry<Tags,MetricValue>> td){\n  values_=Any2.right(td.collect(Collectors.toMap(null,null,null,null)));\n}"}
{"ids": "65258", "raw_code": "public int size(){\n  return nodes.size();\n}"}
{"ids": "39303", "raw_code": "@Override public final E nextElement(){\n  E result=m_Vector.get(m_Counter);\n  m_Counter++;\n  if (m_Counter == m_SpecialElement) {\n    m_Counter++;\n  }\n  return result;\n}"}
{"ids": "71902", "raw_code": "private ByteString escapeBytes(final ByteString value){\n  if (!needEscaping(value)) {\n    return value;\n  }\n  final ByteStringBuilder builder=new ByteStringBuilder();\n  for (int i=0; i < value.length(); i++) {\n    final byte b=value.byteAt(i);\n    if (isByteToEscape(b)) {\n      builder.appendByte(DN.NORMALIZED_ESC_BYTE);\n    }\n    builder.appendByte(b);\n  }\n  return builder.toByteString();\n}"}
{"ids": "72936", "raw_code": "public InputBuilder<T> repeatAll(int times){\n  List<T> toAppend=new ArrayList<>();\n  for (int i=0; i < times; i++) {\n    toAppend.addAll(input);\n  }\n  input.addAll(toAppend);\n  return this;\n}"}
{"ids": "13848", "raw_code": "@SuppressWarnings(\"unused\") public void handleButton3Request(RequestInvocationEvent event){\n  backTrail();\n  try {\n    String name=(String)getPageSessionAttribute(SAVE_VB_NAME);\n    ViewBean vb=getViewBean(Class.forName(name));\n    passPgSessionMap(vb);\n    vb.forwardTo(getRequestContext());\n  }\n catch (  ClassNotFoundException e) {\n    debug.warning(\"AbstractAuditViewBean.handleButton3Request:\",e);\n  }\n}"}
{"ids": "52336", "raw_code": "public IonException(Throwable cause){\n  super(cause.getMessage(),cause);\n}"}
{"ids": "5032", "raw_code": "public final double distance(){\n  return Math.sqrt(distance_square());\n}"}
{"ids": "48103", "raw_code": "private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException {\n  String msg=\"timestamp\";\n  if (debug != null)   debug.println(\"---checking \" + msg + \":\"+ date.toString()+ \"...\");\n  try {\n    cert.checkValidity(date);\n  }\n catch (  CertificateExpiredException e) {\n    throw new CertPathValidatorException(msg + \" check failed\",e,null,-1,BasicReason.EXPIRED);\n  }\ncatch (  CertificateNotYetValidException e) {\n    throw new CertPathValidatorException(msg + \" check failed\",e,null,-1,BasicReason.NOT_YET_VALID);\n  }\n  if (debug != null)   debug.println(msg + \" verified.\");\n}"}
{"ids": "51132", "raw_code": "public static byte[] encryptPassword(final String password,final byte[] seed) throws NoSuchAlgorithmException {\n  if (password == null || password.equals(\"\")) {\n    return new byte[0];\n  }\n  final MessageDigest messageDigest=MessageDigest.getInstance(\"SHA-1\");\n  final byte[] stage1=messageDigest.digest(password.getBytes());\n  messageDigest.reset();\n  final byte[] stage2=messageDigest.digest(stage1);\n  messageDigest.reset();\n  messageDigest.update(seed);\n  messageDigest.update(stage2);\n  final byte[] digest=messageDigest.digest();\n  final byte[] returnBytes=new byte[digest.length];\n  for (int i=0; i < digest.length; i++) {\n    returnBytes[i]=(byte)(stage1[i] ^ digest[i]);\n  }\n  return returnBytes;\n}"}
{"ids": "27999", "raw_code": "public int rows(){\n  return rows;\n}"}
{"ids": "85684", "raw_code": "public static String array2hex(final byte[] array){\n  return byteArray2String(array,\"0x\",\", \",true,16);\n}"}
{"ids": "74221", "raw_code": "public double reduceTo(int width,int height,double limit){\n  int w=getIconWidth();\n  int h=getIconHeight();\n  double scale=1.0;\n  if (w > width) {\n    scale=((double)width) / w;\n  }\n  if (h > height) {\n    scale=Math.min(scale,((double)height) / h);\n  }\n  if (scale < 1) {\n    if (limit > 0.0) {\n      scale=Math.max(scale,limit);\n    }\n    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);\n    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);\n  }\n  return scale;\n}"}
{"ids": "81862", "raw_code": "public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException {\n  builtinSounds.put(soundIdentifier,convertBuiltinSound(data));\n}"}
{"ids": "15822", "raw_code": "private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException {\n  try {\n    int count=0;\n    PreparedStatement statement=null;\n    ResultSet result=null;\n    try {\n      StringBuffer sqlString=new StringBuffer();\n      StringBuffer subconditions=new StringBuffer();\n      sqlString.append(\"SELECT distinct(count(*)) FROM \" + GeneratorConstants.TABLE_TPLID_TPLNAME + \" as tpl, \"+ GeneratorConstants.TABLE_TPLID_PAGEID+ \" AS p WHERE tpl.templateId = p.templateId \"+ (whitelist ? \"AND\" : \"AND NOT\")+ \" (\");\n      for (      @SuppressWarnings(\"unused\") String fragment : templateFragments) {\n        if (subconditions.length() != 0) {\n          subconditions.append(\"OR \");\n        }\n        subconditions.append(\"tpl.templateName LIKE ?\");\n      }\n      sqlString.append(subconditions);\n      sqlString.append(\")\");\n      statement=connection.prepareStatement(sqlString.toString());\n      int curIdx=1;\n      for (      String fragment : templateFragments) {\n        fragment=fragment.toLowerCase();\n        fragment=fragment.trim();\n        fragment=fragment.replaceAll(\" \",\"_\");\n        statement.setString(curIdx++,fragment + \"%\");\n      }\n      result=execute(statement);\n      if (result == null) {\n        return 0;\n      }\n      if (result.next()) {\n        count=result.getInt(1);\n      }\n    }\n  finally {\n      if (statement != null) {\n        statement.close();\n      }\n      if (result != null) {\n        result.close();\n      }\n    }\n    return count;\n  }\n catch (  Exception e) {\n    throw new WikiApiException(e);\n  }\n}"}
{"ids": "68821", "raw_code": "public static int findName(String name,int[] table){\n  for (int i=0; i < table.length; i++) {\n    if (name.equals(getName(table[i]))) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"ids": "34322", "raw_code": "private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){\n  Log.i(TAG,\"transform --1--\");\n  boolean scaleUp=(options & 0x1) != 0;\n  boolean recycle=(options & 0x2) != 0;\n  int deltaX=source.getWidth() - targetWidth;\n  int deltaY=source.getHeight() - targetHeight;\n  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {\n    Log.i(TAG,\"transform --2--\");\n    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);\n    Canvas c=new Canvas(b2);\n    int deltaXHalf=Math.max(0,deltaX / 2);\n    int deltaYHalf=Math.max(0,deltaY / 2);\n    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));\n    int dstX=(targetWidth - src.width()) / 2;\n    int dstY=(targetHeight - src.height()) / 2;\n    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);\n    c.drawBitmap(source,src,dst,null);\n    if (recycle) {\n      source.recycle();\n    }\n    c.setBitmap(null);\n    Log.i(TAG,\"transform --3--\");\n    return b2;\n  }\n  float bitmapWidthF=source.getWidth();\n  float bitmapHeightF=source.getHeight();\n  Log.i(TAG,\"bitmapWidthF:\" + bitmapWidthF + \",bitmapHeightF:\"+ bitmapHeightF);\n  float bitmapAspect=bitmapWidthF / bitmapHeightF;\n  float viewAspect=(float)targetWidth / targetHeight;\n  Log.i(TAG,\"targetWidth:\" + targetWidth + \",targetHeight:\"+ targetHeight);\n  if (bitmapAspect > viewAspect) {\n    float scale=targetHeight / bitmapHeightF;\n    if (scale < .9F || scale > 1F) {\n      scaler.setScale(scale,scale);\n    }\n else {\n      scaler=null;\n    }\n  }\n else {\n    float scale=targetWidth / bitmapWidthF;\n    if (scale < .9F || scale > 1F) {\n      scaler.setScale(scale,scale);\n    }\n else {\n      scaler=null;\n    }\n  }\n  Bitmap b1;\n  if (scaler != null) {\n    Log.i(TAG,\"transform --3.1--\");\n    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);\n  }\n else {\n    Log.i(TAG,\"transform --3.2--\");\n    b1=source;\n  }\n  if (recycle && b1 != source) {\n    Log.i(TAG,\"transform --4--\");\n    source.recycle();\n  }\n  int dx1=Math.max(0,b1.getWidth() - targetWidth);\n  int dy1=Math.max(0,b1.getHeight() - targetHeight);\n  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);\n  if (b2 != b1) {\n    if (recycle || b1 != source) {\n      Log.i(TAG,\"transform --5--\");\n      b1.recycle();\n    }\n  }\n  Log.i(TAG,\"transform --6--\");\n  if (b2 == null) {\n    Log.i(TAG,\"transform --7--\");\n  }\n  return b2;\n}"}
{"ids": "69322", "raw_code": "private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){\n  for (  Track track : tracks) {\n    double score=scoreTrackResult(query,track);\n    output.add(new ScoredResult(track,score));\n  }\n}"}
{"ids": "68987", "raw_code": "private Long currentTime(){\n  return System.currentTimeMillis() / 1000;\n}"}
{"ids": "76680", "raw_code": "private static byte[] encode(double latitude,double longitude){\n  byte[] bytes=new byte[2 * Integer.BYTES];\n  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);\n  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);\n  return bytes;\n}"}
{"ids": "32052", "raw_code": "public static void putLongVolatile(Object obj,long off,long val){\n  UNSAFE.putLongVolatile(obj,off,val);\n}"}
{"ids": "32919", "raw_code": "public void circle(double x,double y,double r){\n  if (r < 0)   throw new IllegalArgumentException(\"circle radius can't be negative\");\n  double xs=scaleX(x);\n  double ys=scaleY(y);\n  double ws=factorX(2 * r);\n  double hs=factorY(2 * r);\n  if (ws <= 1 && hs <= 1)   pixel(x,y);\n else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));\n  draw();\n}"}
{"ids": "41631", "raw_code": "public void writeSI32(int value) throws IOException {\n  flushBits();\n  out.write(value & 0xff);\n  out.write(value >> 8);\n  out.write(value >> 16);\n  out.write(value >> 24);\n  bytesWritten+=4;\n}"}
{"ids": "71927", "raw_code": "private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){\n  final String value=sequence.toString();\n  for (int i=0; i < value.length(); i++) {\n    final char c=value.charAt(i);\n    if (MAP_2_NULL.contains(c)) {\n      continue;\n    }\n    if (MAP_2_SPACE.contains(c)) {\n      if (canMapToSpace(buffer,trim)) {\n        buffer.append(SPACE_CHAR);\n      }\n      continue;\n    }\n    if (foldCase) {\n      final String mapping=CASE_MAP_TABLE.get(c);\n      if (mapping != null) {\n        buffer.append(mapping);\n        continue;\n      }\n    }\n    buffer.append(c);\n  }\n}"}
{"ids": "20239", "raw_code": "public void addButtonPressedListener(FieldConfigStringButtonInterface listener){\n  if (buttonPressedListenerList == null) {\n    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();\n  }\n  buttonPressedListenerList.add(listener);\n}"}
{"ids": "13227", "raw_code": "private void fillXMLAttribute(Attributes att,int index){\n  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));\n  String type=att.getType(index);\n  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));\n}"}
{"ids": "5213", "raw_code": "public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {\n  if (size < 0) {\n    return 0;\n  }\n  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));\n  byte[] buf=new byte[64 * 1024];\n  int bytesRead;\n  long pos=0;\n  long remaining=size;\n  try {\n    if (offset != 0) {\n      is.skip(offset);\n      pos+=offset;\n    }\n    while (remaining != 0) {\n      int max=buf.length;\n      if (max > remaining) {\n        max=(int)remaining;\n      }\n      bytesRead=is.read(buf,0,max);\n      if (bytesRead == -1) {\n        break;\n      }\n      out.write(buf,0,bytesRead);\n      pos+=bytesRead;\n      remaining-=bytesRead;\n    }\n    out.flush();\n  }\n catch (  Exception e) {\n    out.flush();\n  }\n finally {\n    try {\n      is.close();\n    }\n catch (    Exception e) {\n    }\n  }\n  return pos;\n}"}
{"ids": "79953", "raw_code": "private static void deserializeHeader(KdbHeader kdbHeader,DataInput dataInput) throws IOException {\n  kdbHeader.setFlags(dataInput.readInt());\n  kdbHeader.setVersion(dataInput.readInt());\n  byte[] buffer=new byte[16];\n  dataInput.readFully(buffer);\n  kdbHeader.setMasterSeed(buffer);\n  buffer=new byte[16];\n  dataInput.readFully(buffer);\n  kdbHeader.setEncryptionIv(buffer);\n  kdbHeader.setGroupCount(dataInput.readInt());\n  kdbHeader.setEntryCount(dataInput.readInt());\n  byte[] buffer32=new byte[32];\n  dataInput.readFully(buffer32);\n  kdbHeader.setContentHash(buffer32);\n  buffer32=new byte[32];\n  dataInput.readFully(buffer32);\n  kdbHeader.setTransformSeed(buffer32);\n  kdbHeader.setTransformRounds(dataInput.readInt());\n}"}
{"ids": "85465", "raw_code": "public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){\n  EnumSet<OutputElement> outputs;\n  if (annotated instanceof Tree.AnyClass) {\n    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);\n  }\n else   if (annotated instanceof Tree.AnyInterface) {\n    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);\n  }\n else   if (annotated instanceof Tree.TypeAliasDeclaration) {\n    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);\n  }\n else   if (annotated instanceof Tree.Constructor) {\n    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);\n  }\n else   if (annotated instanceof Tree.Enumerated) {\n    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);\n  }\n else   if (annotated instanceof Tree.AnyMethod) {\n    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);\n  }\n else   if (annotated instanceof Tree.AttributeDeclaration) {\n    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);\n  }\n else   if (annotated instanceof Tree.AttributeGetterDefinition) {\n    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);\n  }\n else   if (annotated instanceof Tree.AttributeSetterDefinition) {\n    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);\n  }\n else   if (annotated instanceof Tree.ObjectDefinition) {\n    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);\n  }\n else {\n    throw BugException.unhandledNodeCase(annotated);\n  }\n  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);\n}"}
{"ids": "27100", "raw_code": "public boolean areAllPermissionsGranted(){\n  return deniedPermissionResponses.isEmpty();\n}"}
{"ids": "14918", "raw_code": "private String fetchCharsetFromCache(Client client,Locale loc){\n  Map cCache=(Map)charsetCache.get(client.getClientType());\n  String val=null;\n  if (cCache != null) {\n    val=(String)cCache.get(loc);\n  }\n  return val;\n}"}
{"ids": "70269", "raw_code": "public void addControlRoll(PilotingRollData control){\n  controlRolls.addElement(control);\n}"}
{"ids": "79739", "raw_code": "void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult changes){\n  if (addonsDialog != null) {\n    addonsDialog.setDownloadingUpdates();\n  }\n  if (getView() != null) {\n    Set<AddOn> addOns=new HashSet<>(changes.getUninstalls());\n    addOns.addAll(changes.getOldVersions());\n    Set<Extension> extensions=new HashSet<>();\n    extensions.addAll(changes.getUnloadExtensions());\n    extensions.addAll(changes.getSoftUnloadExtensions());\n    if (!warnUnsavedResourcesOrActiveActions(caller,addOns,extensions,true)) {\n      return;\n    }\n  }\n  uninstallAddOns(caller,changes.getUninstalls(),false);\n  Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions());\n  allAddons.addAll(changes.getInstalls());\n  for (  AddOn addOn : allAddons) {\n    if (addonsDialog != null) {\n      addonsDialog.notifyAddOnDownloading(addOn);\n    }\n    downloadAddOn(addOn);\n  }\n}"}
{"ids": "80173", "raw_code": "void repaintChildren(){\n  for (  Component child : panel.getComponents()) {\n    child.repaint();\n  }\n}"}
{"ids": "43857", "raw_code": "private static String readComment(String input,int index){\n  String comment=null;\n  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));\n  if (matcher.find()) {\n    comment=matcher.group(1);\n    comment=comment.substring(1);\n  }\n  return comment;\n}"}
{"ids": "62688", "raw_code": "public static int findNext(String str,char separator,char escapeChar,int start,StringBuilder split){\n  int numPreEscapes=0;\n  for (int i=start; i < str.length(); i++) {\n    char curChar=str.charAt(i);\n    if (numPreEscapes == 0 && curChar == separator) {\n      return i;\n    }\n else {\n      split.append(curChar);\n      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;\n    }\n  }\n  return -1;\n}"}
{"ids": "29846", "raw_code": "private static String guessContentType(String url){\n  url=url.toLowerCase();\n  if (url.endsWith(\".webm\")) {\n    return \"video/webm\";\n  }\n else   if (url.endsWith(\".mp4\")) {\n    return \"video/mp4\";\n  }\n else   if (url.matches(\".*\\\\.jpe?g\")) {\n    return \"image/jpeg\";\n  }\n else   if (url.endsWith(\".png\")) {\n    return \"image/png\";\n  }\n else   if (url.endsWith(\".gif\")) {\n    return \"image/gif\";\n  }\n else {\n    return \"application/octet-stream\";\n  }\n}"}
{"ids": "24213", "raw_code": "public void connect(){\n  connect(this.logWriter);\n}"}
{"ids": "40553", "raw_code": "public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse resp){\n  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {\n    return false;\n  }\n  final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq);\n  final String etag=HttpCacheHeaderUtil.calcEtag(solrReq);\n  resp.setDateHeader(\"Last-Modified\",lastMod);\n  resp.setHeader(\"ETag\",etag);\n  if (checkETagValidators(req,resp,reqMethod,etag)) {\n    return true;\n  }\n  if (checkLastModValidators(req,resp,lastMod)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "21431", "raw_code": "public IvrZoneset showActiveIvrZoneset() throws NetworkDeviceControllerException {\n  List<IvrZoneset> zonesets=showIvrZonesets(true);\n  return zonesets.isEmpty() ? null : zonesets.get(0);\n}"}
{"ids": "27313", "raw_code": "public void replaceNonOptionalNonMinusNodesWith(final List<IGroupMemberNode> ordered,final boolean recomputeDefinitelyProduced){\n  nonOptionalNonMinusNodes.clear();\n  nonOptionalNonMinusNodes.addAll(ordered);\n  if (recomputeDefinitelyProduced) {\n    recomputeDefinitelyProduced();\n  }\n}"}
{"ids": "13203", "raw_code": "@Override public int hashCode(){\n  return type << 16 | value.hashCode() << 8 | otherValue.hashCode();\n}"}
{"ids": "66661", "raw_code": "protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {\nswitch (typeCategory) {\ncase STRUCT:\ncase TRAIT:\n    deleteTypeVertex(instanceVertex,force);\n  break;\ncase CLASS:\ndeleteEntities(Collections.singletonList(instanceVertex));\nbreak;\ndefault :\nthrow new IllegalStateException(\"Type category \" + typeCategory + \" not handled\");\n}\n}"}
{"ids": "82581", "raw_code": "public static List<String> readToList(Reader r) throws IOException {\n  try (BufferedReader in=new BufferedReader(r)){\n    List<String> l=new ArrayList<>();\n    String line=null;\n    while ((line=in.readLine()) != null)     l.add(line);\n    return Collections.unmodifiableList(l);\n  }\n }"}
{"ids": "32174", "raw_code": "@SuppressWarnings(\"unchecked\") public void addCacheContext(GridCacheContext cacheCtx) throws IgniteCheckedException {\n  if (ctxMap.containsKey(cacheCtx.cacheId())) {\n    GridCacheContext<K,V> existing=ctxMap.get(cacheCtx.cacheId());\n    throw new IgniteCheckedException(\"Failed to start cache due to conflicting cache ID \" + \"(change cache name and restart grid) [cacheName=\" + cacheCtx.name() + \", conflictingCacheName=\"+ existing.name()+ ']');\n  }\n  CacheStoreManager mgr=cacheCtx.store();\n  if (mgr.configured() && mgr.isLocal())   locStoreCnt.incrementAndGet();\n  ctxMap.put(cacheCtx.cacheId(),cacheCtx);\n}"}
{"ids": "10506", "raw_code": "protected static boolean isCglibGetCallbacks(AnnotatedMethod am){\n  Class<?> rt=am.getRawType();\n  if (rt == null || !rt.isArray()) {\n    return false;\n  }\n  Class<?> compType=rt.getComponentType();\n  Package pkg=compType.getPackage();\n  if (pkg != null) {\n    String pname=pkg.getName();\n    if (pname.startsWith(\"net.sf.cglib\") || pname.startsWith(\"org.hibernate.repackage.cglib\")) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "6649", "raw_code": "public int compareTo(NamedMediaType other){\n  return _name.compareTo(other._name);\n}"}
{"ids": "68364", "raw_code": "protected ReplacedElement newIrreplaceableImageElement(int cssWidth,int cssHeight){\n  BufferedImage missingImage;\n  ReplacedElement mre;\n  try {\n    missingImage=ImageUtil.createCompatibleBufferedImage(cssWidth,cssHeight,BufferedImage.TYPE_INT_RGB);\n    Graphics2D g=missingImage.createGraphics();\n    g.setColor(Color.BLACK);\n    g.setBackground(Color.WHITE);\n    g.setFont(new Font(\"Serif\",Font.PLAIN,12));\n    g.drawString(\"Missing\",0,12);\n    g.dispose();\n    mre=new ImageReplacedElement(missingImage,cssWidth,cssHeight);\n  }\n catch (  Exception e) {\n    mre=new EmptyReplacedElement(cssWidth < 0 ? 0 : cssWidth,cssHeight < 0 ? 0 : cssHeight);\n  }\n  return mre;\n}"}
{"ids": "54851", "raw_code": "public boolean greaterThan(FXGVersion version){\n  return (compareTo(version) > 0);\n}"}
{"ids": "63203", "raw_code": "@Override public DataSource createDataSource(Properties properties) throws SQLException {\n  Properties propertiesCopy=new Properties();\n  if (properties != null) {\n    propertiesCopy.putAll(properties);\n  }\n  rejectUnsupportedOptions(propertiesCopy);\n  rejectPoolingOptions(propertiesCopy);\n  JdbcDataSource dataSource=new JdbcDataSource();\n  setupH2DataSource(dataSource,propertiesCopy);\n  return dataSource;\n}"}
{"ids": "13507", "raw_code": "public Set<String> find(T object){\n  if (!locations.containsKey(object)) {\n    locations.put(object,new HashSet<>());\n  }\n  return Collections.unmodifiableSet(locations.get(object));\n}"}
{"ids": "85136", "raw_code": "public void addMetaObject(MetaObject object){\n  for (int k=0; k < MetaObjects.size(); ++k) {\n    if (MetaObjects.get(k) == null) {\n      MetaObjects.set(k,object);\n      return;\n    }\n  }\n  MetaObjects.add(object);\n}"}
{"ids": "39263", "raw_code": "public boolean remove(String word){\n  return m_Words.remove(word);\n}"}
{"ids": "75739", "raw_code": "public synchronized void addRecentItem(T item){\n  item=fromString(toString(item));\n  if (m_RecentItems.size() > 0) {\n    if (item.equals(m_RecentItems.get(0)))     return;\n  }\n  m_RecentItems.remove(item);\n  m_RecentItems.add(0,item);\n  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);\n  if (m_IgnoreChanges)   return;\n  writeProps();\n  updateMenu();\n  notifyRecentItemListenersOfAdd(item);\n}"}
{"ids": "55118", "raw_code": "public void cfgPackage(ConfigurationValue cfgval,String name,String desc){\n  packages.add(new PackageInfo(name,desc));\n  packageNames.add(name);\n}"}
{"ids": "22101", "raw_code": "private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception {\n  Volume volume=new Volume();\n  URI volumeURI=URIUtil.createId(Volume.class);\n  testVolumeURIs.add(volumeURI);\n  volume.setId(volumeURI);\n  volume.setLabel(\"blockMirrorVolume\");\n  URI cgUri=createBlockConsistencyGroup(\"blockMirrorVolume-cg\");\n  volume.setConsistencyGroup(cgUri);\n  _dbClient.createObject(volume);\n  for (int i=1; i <= numBlockMirrors; i++) {\n    BlockMirror blockMirror=new BlockMirror();\n    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);\n    testBlockMirrorURIs.add(blockMirrorURI);\n    blockMirror.setId(blockMirrorURI);\n    blockMirror.setLabel(name + i);\n    blockMirror.setConsistencyGroup(cgUri);\n    _dbClient.createObject(blockMirror);\n  }\n}"}
{"ids": "25399", "raw_code": "@Override public synchronized void start(){\n  if (running) {\n    return;\n  }\n  LOGGER.info(\"Starting server\");\n  if (endpoints.isEmpty()) {\n    int port=config.getInt(NetworkConfig.Keys.COAP_PORT);\n    LOGGER.log(Level.INFO,\"No endpoints have been defined for server, setting up server endpoint on default port {0}\",port);\n    addEndpoint(new CoapEndpoint(port,this.config));\n  }\n  int started=0;\n  for (  Endpoint ep : endpoints) {\n    try {\n      ep.start();\n      ++started;\n    }\n catch (    IOException e) {\n      LOGGER.log(Level.SEVERE,\"Cannot start server endpoint [\" + ep.getAddress() + \"]\",e);\n    }\n  }\n  if (started == 0) {\n    throw new IllegalStateException(\"None of the server endpoints could be started\");\n  }\n else {\n    running=true;\n  }\n}"}
{"ids": "53628", "raw_code": "protected void clearResult(){\n  md.clearResult();\n  localizationResult.setText(\"<HTML>Result: <BR><BR><BR></HTML>\");\n}"}
{"ids": "80944", "raw_code": "public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){\n  int placeHolderPosition=-1;\n  String placeHolder=null;\n  for (int i=0; i < parameters.length; i++) {\n    if (parameters[i] == null) {\n      break;\n    }\n    placeHolder=\"%\" + (i + 1) + \"%\";\n    placeHolderPosition=buffer.indexOf(placeHolder);\n    if (placeHolderPosition != -1) {\n      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);\n    }\n else {\n      break;\n    }\n  }\n  return buffer;\n}"}
{"ids": "31075", "raw_code": "public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {\n  Document document=builder.parse(xmlFile);\n  return (parseConfiguration(document));\n}"}
{"ids": "52161", "raw_code": "private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){\n  TetradMatrix Kyx=Ky.times(Kx);\n  TetradMatrix Kyz=Ky.times(Kz);\n  TetradMatrix Kzx=Kz.times(Kx);\n  TetradMatrix Kzreg=Kz.copy();\n  for (int i=0; i < m; i++) {\n    double ent=(Kzreg.get(i,i) + this.regularizer);\n    Kzreg.set(i,i,ent);\n  }\n  TetradMatrix A=Kzreg.inverse();\n  Kzreg=A.times(A);\n  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);\n  A=Kyz.times(Kzreg);\n  Kyzzregzx=A.times(Kzx);\n  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();\n  Kyzzregzxzzregz=Kyzzregzx.times(Kz);\n  A=Kyzzregzxzzregz.times(Kzreg);\n  Kyzzregzxzzregz=A.times(Kz);\n  double empHSIC=0.0;\n  for (int i=0; i < m; i++) {\n    empHSIC+=Kyx.get(i,i);\n    empHSIC+=(-2 * Kyzzregzx.get(i,i));\n    empHSIC+=Kyzzregzxzzregz.get(i,i);\n  }\n  empHSIC/=Math.pow(m - 1,2);\n  double Bz=0.0;\n  for (int i=0; i < (m - 1); i++) {\n    for (int j=(i + 1); j < m; j++) {\n      Bz+=Math.pow(Kz.get(i,j),2);\n      Bz+=Math.pow(Kz.get(j,i),2);\n    }\n  }\n  Bz=(m * (m - 1)) / Bz;\n  empHSIC*=Bz;\n  return empHSIC;\n}"}
{"ids": "11673", "raw_code": "public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException {\n  create(rpfFilePaths,outputFile,false);\n}"}
{"ids": "46224", "raw_code": "private synchronized void postEvent(EventInfo eventInfo){\n  eventQueue.add(eventInfo);\n  notifyAll();\n}"}
{"ids": "10708", "raw_code": "private void processBmpImage(BufferedImage image){\n  if (!isError) {\n    File outputFile=new File(path,prefix + (numPage + 1) + \".bmp\");\n    try {\n      ImageIO.write(image,\"bmp\",outputFile);\n      addTempFile(outputFile);\n      addScanFile(outputFile);\n      numPage++;\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n      endProcess(true,false);\n    }\n  }\n}"}
{"ids": "3453", "raw_code": "public PathHandler(String path){\n  this(Paths.get(path));\n}"}
{"ids": "66395", "raw_code": "public boolean loadLines(){\n  boolean result=false;\n  try {\n    m_parser.parse(new InputSource(m_reader),this);\n    result=true;\n    m_success=true;\n  }\n catch (  SAXException e) {\n    m_errorMessage=\"ErrorParsingData\";\n    m_errorDescription=e.getMessage();\n  }\ncatch (  IOException e) {\n    m_errorMessage=\"ErrorReadingData\";\n    m_errorDescription=e.getMessage();\n  }\n  return result;\n}"}
{"ids": "4618", "raw_code": "private void loadIgnoreFile(final String srcFolder){\n  ignoreFile=IgnoreFile.load(srcFolder);\n  if (ignoreFile == null) {\n    loadDefaultExcludePattern(srcFolder);\n  }\n}"}
{"ids": "27481", "raw_code": "public boolean removeArg(final BOp arg){\n  if (arg == null)   throw new IllegalArgumentException();\n  if (arg == this)   throw new IllegalArgumentException();\n  if (args.remove(arg)) {\n    mutation();\n    return true;\n  }\n  return false;\n}"}
{"ids": "48163", "raw_code": "public PKCS10Attribute(PKCS9Attribute attr){\n  this.attributeId=attr.getOID();\n  this.attributeValue=attr.getValue();\n}"}
{"ids": "53812", "raw_code": "public void createNote(Note note){\n  SQLiteDatabase db=getWritableDatabase();\n  String spannableAsHtml=Html.toHtml(note.getSpannable());\n  String date=dt.format(new Date());\n  ContentValues values=new ContentValues();\n  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);\n  values.put(KEY_NOTE_TITLE,note.getTitle());\n  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));\n  values.put(KEY_DATE_UPDATED,date);\n  db.insert(TABLE_NOTES,null,values);\n  db.close();\n}"}
{"ids": "55203", "raw_code": "void addNext(Node<T> n){\n  nextNodes.add(n);\n  Collections.sort(nextNodes,isVertical ? verticalComparator : horizontalComparator);\n}"}
{"ids": "82421", "raw_code": "public final String readUTF() throws IOException {\n  return decodeUTF(readUnsignedShort());\n}"}
{"ids": "4799", "raw_code": "private void myAdd(LinkedList<Integer> l,int i){\n  l.add(i);\n}"}
{"ids": "46635", "raw_code": "public static RepaintManager currentManager(Component c){\n  return currentManager(AppContext.getAppContext());\n}"}
{"ids": "22458", "raw_code": "private boolean isRecoverPointInitiator(String portWWN){\n  return portWWN.contains(RECOVERPOINT_INITIATOR_PREFIX);\n}"}
{"ids": "3534", "raw_code": "@Override public void send(Buffer buffer){\n  _outProxy.write(_outWriter,buffer,false);\n}"}
{"ids": "29950", "raw_code": "public void addSection(final Section SECTION){\n  if (null == SECTION)   return;\n  sections.add(SECTION);\n  Collections.sort(sections,new SectionComparator());\n  fireUpdateEvent(SECTION_EVENT);\n}"}
{"ids": "60438", "raw_code": "private int calculatePreferredWrapPosition(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){\n  boolean hasTabs=false;\n  boolean canOptimize=true;\n  boolean hasNonSpaceSymbols=false;\n  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {\n    char c=text.charAt(i);\nswitch (c) {\ncase '\\t':\n{\n        hasTabs=true;\n        if (hasNonSpaceSymbols) {\n          canOptimize=false;\n          break loop;\n        }\n      }\ncase ' ':\n    break;\ndefault :\n  hasNonSpaceSymbols=true;\n}\n}\nif (!hasTabs) {\nreturn wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);\n}\n else if (canOptimize) {\nreturn wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);\n}\n else {\nreturn wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);\n}\n}"}
{"ids": "15938", "raw_code": "public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {\n  byte[] bs=new byte[BUFFER_SIZE];\n  int numRead;\n  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {\n    outStr.write(bs,0,numRead);\n  }\n}"}
{"ids": "24437", "raw_code": "public void sendMessageUntilStopCount(int stopCount){\n  for (int i=processedWorkerCount; i < workers.size(); ++i) {\n    ActorRef worker=workers.get(i);\n    try {\n      Thread.sleep(1L);\n    }\n catch (    InterruptedException e) {\n      logger.error(\"sleep exception \" + e + \" details: \",e);\n    }\n    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);\n    processedWorkerCount++;\n    if (processedWorkerCount > stopCount) {\n      return;\n    }\n    logger.debug(\"REQ_SENT: {} / {} taskId {}\",processedWorkerCount,requestTotalCount,taskIdTrim);\n  }\n}"}
{"ids": "33716", "raw_code": "public static ArrayList<String> stringToArrayList(String string){\n  return new ArrayList<>(Arrays.asList(string.split(\",\")));\n}"}
{"ids": "86256", "raw_code": "private String pickCharset(){\n  if (charset != null) {\n    return charset;\n  }\n else   if (utf8Supported) {\n    return \"UTF-8\";\n  }\n else {\n    return System.getProperty(\"file.encoding\");\n  }\n}"}
{"ids": "80070", "raw_code": "public void addLayer(final LayerDefinition layer){\n  layer.setMap(this);\n  layers.add(layer);\n}"}
{"ids": "16840", "raw_code": "@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){\n  LOGGER.debug(\"Detect episodes/seasons from file \" + file.getName());\n  EpisodeMatchingResult result=new EpisodeMatchingResult();\n  String fileName=file.getName();\n  result=parseString(fileName);\n  Collections.sort(result.episodes);\n  Matcher matcher=stackingMarkerPattern.matcher(result.name);\n  result.stackingMarkerFound=matcher.matches();\n  LOGGER.debug(\"returning result \" + result);\n  return result;\n}"}
{"ids": "33937", "raw_code": "public static TypedOperation createArrayCreation(ArrayType arrayType){\n  List<Type> typeList=new ArrayList<>();\n  typeList.add(JavaTypes.INT_TYPE);\n  TypeTuple inputTypes=new TypeTuple(typeList);\n  return new TypedTermOperation(new ArrayCreation(arrayType),inputTypes,arrayType);\n}"}
{"ids": "27259", "raw_code": "public void fireEvent(final SPARQLUpdateEvent e){\n  if (isReadOnly())   throw new UnsupportedOperationException();\n  if (e == null)   throw new IllegalArgumentException();\n  if (listeners.isEmpty()) {\n    return;\n  }\n  final ISPARQLUpdateListener[] a=listeners.toArray(new ISPARQLUpdateListener[0]);\n  for (  ISPARQLUpdateListener l : a) {\n    final ISPARQLUpdateListener listener=l;\n    try {\n      listener.updateEvent(e);\n    }\n catch (    Throwable t) {\n      if (InnerCause.isInnerCause(t,InterruptedException.class)) {\n        throw new RuntimeException(t);\n      }\n      log.error(t,t);\n    }\n  }\n}"}
{"ids": "30136", "raw_code": "public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){\n  if (!VALID_TYPES.contains(prefType)) {\n    throw new IllegalArgumentException(\"The specified type: \" + prefType + \" is not supported in preferences\");\n  }\n  this.prefType=prefType;\n  return this;\n}"}
{"ids": "81785", "raw_code": "protected boolean isNumeric(String text){\n  text=text.trim();\n  int tlen=text.length();\n  for (int i=0; i < tlen; i++) {\n    if (Character.isDigit(text.charAt(i)) == false) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "45559", "raw_code": "public static boolean isChar(String desc){\n  return desc.endsWith(\"C\");\n}"}
{"ids": "14082", "raw_code": "public boolean isClientAuthentication(){\n  return clientAuthentication;\n}"}
{"ids": "73172", "raw_code": "private JPanel createImageFilePanel(){\n  JPanel panel=new JPanel();\n  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));\n  panel.add(imageFileName);\n  panel.add(Box.createHorizontalStrut(6));\n  panel.add(new JButton(openImageFile));\n  return panel;\n}"}
{"ids": "15401", "raw_code": "void writeLine(BufferedWriter writer,String line) throws IOException {\n  writer.write(line);\n  writer.newLine();\n}"}
{"ids": "51879", "raw_code": "public Layer childAt(int index){\n  return children.get(index);\n}"}
{"ids": "33681", "raw_code": "public static Function<Value,Value> ofValue(){\n  return VALUE;\n}"}
{"ids": "19981", "raw_code": "public static String removeQuotes(String s){\n  if (s == null) {\n    return null;\n  }\n  String trimmed=s.trim();\n  if (trimmed.length() == 0) {\n    return trimmed;\n  }\n  int i=nextNonQuoteIndex(trimmed,0,true);\n  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);\n  return trimmed.substring(i,j + 1);\n}"}
{"ids": "572", "raw_code": "public FloatColumn(int nrows,int capacity,float defaultValue){\n  super(float.class,new Float(defaultValue));\n  if (capacity < nrows) {\n    throw new IllegalArgumentException(\"Capacity value can not be less than the row count.\");\n  }\n  m_values=new float[capacity];\n  Arrays.fill(m_values,defaultValue);\n  m_size=nrows;\n}"}
{"ids": "11823", "raw_code": "void readPRJ() throws IOException {\n  while (true) {\n    String S=isr.readLine();\n    if (S == null)     return;\n    if (S.startsWith(\"EOP\"))     return;\n  }\n}"}
{"ids": "16111", "raw_code": "private void checkAlterPeriodConverters() throws SecurityException {\n  SecurityManager sm=System.getSecurityManager();\n  if (sm != null) {\n    sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterPeriodConverters\"));\n  }\n}"}
{"ids": "35578", "raw_code": "public void importFromChange(Change sourceChange){\n  if (sourceChange.revision() > 0) {\n    this.revisionId=new NumericLiteralImpl(sourceChange.revision());\n  }\n  if (sourceChange.timestamp() != null) {\n    Date date=sourceChange.timestamp();\n    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"),Locale.ROOT);\n    c.setTime(date);\n    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);\n  }\n}"}
{"ids": "76710", "raw_code": "protected PrintWriter lineFileOut(Document doc){\n  return lineFileOut;\n}"}
{"ids": "56379", "raw_code": "@Override public Query newFuzzyQuery(String text,int fuzziness){\n  if (settings.lowercaseExpandedTerms()) {\n    text=text.toLowerCase(settings.locale());\n  }\n  BooleanQuery.Builder bq=new BooleanQuery.Builder();\n  bq.setDisableCoord(true);\n  for (  Map.Entry<String,Float> entry : weights.entrySet()) {\n    try {\n      Query q=new FuzzyQuery(new Term(entry.getKey(),text),fuzziness);\n      q.setBoost(entry.getValue());\n      bq.add(q,BooleanClause.Occur.SHOULD);\n    }\n catch (    RuntimeException e) {\n      rethrowUnlessLenient(e);\n    }\n  }\n  return super.simplify(bq.build());\n}"}
{"ids": "40991", "raw_code": "public void startPlayback(){\n  Log.d(TAG,\">> startPlayback\");\n  if (null == mRecordFile) {\n    Log.e(TAG,\"no file to playback!\");\n    return;\n  }\n  mPlayer=new MediaPlayer();\n  try {\n    mPlayer.setDataSource(mRecordFile.getAbsolutePath());\n    Log.d(TAG,\"MediaPlayer.setDataSource(\" + mRecordFile.getAbsolutePath() + \")\");\n    mPlayer.setOnCompletionListener(this);\n    mPlayer.setOnErrorListener(this);\n    mPlayer.prepare();\n    Log.d(TAG,\"MediaPlayer.prepare()\");\n    mPlayer.start();\n  }\n catch (  IOException e) {\n    Log.e(TAG,\"Exception while trying to playback recording file: \" + e);\n    setError(ERROR_PLAYER_INTERNAL);\n    return;\n  }\ncatch (  IllegalArgumentException e) {\n    Log.e(TAG,\"Exception while trying to playback recording file: \" + e);\n    setError(ERROR_PLAYER_INTERNAL);\n    return;\n  }\ncatch (  SecurityException e) {\n    Log.e(TAG,\"Exception while trying to playback recording file: \" + e);\n    setError(ERROR_PLAYER_INTERNAL);\n    return;\n  }\ncatch (  IllegalStateException e) {\n    Log.e(TAG,\"Exception while trying to playback recording file: \" + e);\n    setError(ERROR_PLAYER_INTERNAL);\n    return;\n  }\n  setState(STATE_PLAYBACK);\n  Log.d(TAG,\"<< startPlayback\");\n}"}
{"ids": "30546", "raw_code": "public static void resetContext(){\n  contexts.set(null);\n}"}
{"ids": "26066", "raw_code": "public static Object convertToParameterValues(Object object){\n  Collection<Object> collection;\n  if (object instanceof Object[]) {\n    collection=Arrays.asList((Object[])object);\n  }\n else   if (object instanceof Collection) {\n    collection=(Collection<Object>)object;\n  }\n else {\n    LOGGER.warn(\"Unable to convert value, ignoring\");\n    return new Object[]{};\n  }\n  List<Object> s=new LinkedList<Object>();\n  for (  Object o : collection) {\n    Object converted=convertToParameterValue(o);\n    if (converted instanceof Object[]) {\n      s.addAll(Arrays.asList((Object[])converted));\n    }\n else {\n      s.add(converted);\n    }\n  }\n  return s.toArray(new Object[s.size()]);\n}"}
{"ids": "22140", "raw_code": "public boolean logoutUser(String username,HttpServletRequest req){\n  return logoutUser(username,req,true,true);\n}"}
{"ids": "17276", "raw_code": "public static Operation createOperationToUpdateOrCreateNetworkInterface(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){\n  String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic);\n  Operation networkInterfaceOperation=null;\n  if (existingInterfaceLink == null) {\n    networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK);\n  }\n else {\n    networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink);\n  }\n  return networkInterfaceOperation;\n}"}
{"ids": "10774", "raw_code": "public CodeSourceFacade(final CodeSource codeSource){\n  this.location=codeSource.getLocation();\n  final Certificate[] certificates=codeSource.getCertificates();\n  if (null == certificates || 0 == certificates.length) {\n    LOGGER.warning(String.format(\"no certificate found for %s\",codeSource));\n    this.firstCertificate=null;\n    return;\n  }\n  this.firstCertificate=(X509Certificate)certificates[0];\n}"}
{"ids": "48920", "raw_code": "public JdpBroadcaster(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException {\n  this.addr=address;\n  this.port=port;\n  ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;\n  channel=DatagramChannel.open(family);\n  channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);\n  channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl);\n  if (srcAddress != null) {\n    NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress);\n    try {\n      channel.bind(new InetSocketAddress(srcAddress,0));\n    }\n catch (    UnsupportedAddressTypeException ex) {\n      throw new JdpException(\"Unable to bind to source address\");\n    }\n    channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf);\n  }\n}"}
{"ids": "67871", "raw_code": "public void close() throws IOException {\n  rrdFile.close();\n}"}
{"ids": "83853", "raw_code": "public Vector rotateInDegree(double degree){\n  return rotateInRadian(Math.toRadians(degree));\n}"}
{"ids": "80184", "raw_code": "void hideBorder(){\n  Insets insets=getInsets();\n  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));\n}"}
{"ids": "55", "raw_code": "public void remove(String btxn){\nsynchronized (filterMap) {\n    FilterProcessor oldfp=filterMap.get(btxn);\n    if (oldfp != null) {\n      globalExclusionFilters.remove(oldfp);\n      btxnFilters.remove(oldfp);\n    }\n  }\n}"}
{"ids": "68547", "raw_code": "public boolean addTagId(final Long tagId){\n  if (tagId != null && tagId > 0) {\n    return tagIds.add(tagId);\n  }\n  return false;\n}"}
{"ids": "31454", "raw_code": "public void supportTlsIntolerantServer(SSLSocket socket){\n  socket.setEnabledProtocols(new String[]{\"SSLv3\"});\n}"}
{"ids": "77899", "raw_code": "public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions){\n  List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(executions.size());\n  HashSet<String> previousIds=new HashSet<String>();\n  for (  ExecutionEntity execution : executions) {\n    if (execution.getParentId() == null) {\n      orderedList.add(execution);\n      previousIds.add(execution.getId());\n    }\n  }\n  while (orderedList.size() < executions.size()) {\n    for (    ExecutionEntity execution : executions) {\n      if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {\n        orderedList.add(execution);\n        previousIds.add(execution.getId());\n      }\n    }\n  }\n  return orderedList;\n}"}
{"ids": "84708", "raw_code": "public void initTKF91(){\n  int iNumNodes=iParent.length;\n  double iBeta[]=new double[iNumNodes];\n  iB=new double[iNumNodes];\n  iE=new double[iNumNodes];\n  iH=new double[iNumNodes];\n  iN=new double[iNumNodes];\n  iInitial=1.0;\n  for (int i=0; i < iNumNodes; i++) {\n    if (i == iNumNodes - 1) {\n      iBeta[i]=1.0 / iMu;\n      iH[i]=0.0;\n    }\n else {\n      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);\n      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);\n      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);\n    }\n    iB[i]=iLambda * iBeta[i];\n    iE[i]=iMu * iBeta[i];\n    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];\n    iInitial*=(1.0 - iB[i]);\n  }\n}"}
{"ids": "13606", "raw_code": "public static String serializeExpression(Node s){\n  if (s instanceof ASTTerm) {\n    ASTTerm a=(ASTTerm)s;\n    return (a.isNotFlag() ? \"!\" : \"\") + \" \" + a.getTerm();\n  }\n  String prefix=\"\";\n  String suffix=\"\";\n  String join=\" \";\n  if (s instanceof ASTExpression) {\n    ASTExpression a=(ASTExpression)s;\n    prefix=(a.isNotFlag() ? \"!\" : \"\") + \"(\";\n    suffix=\")\";\n    join=\" \" + a.getType() + \" \";\n  }\n  List<String> children=new ArrayList<String>();\n  for (int i=0; i < s.jjtGetNumChildren(); i++) {\n    children.add(serializeExpression(s.jjtGetChild(i)));\n  }\n  return prefix + StringUtils.join(children,join) + suffix;\n}"}
{"ids": "82812", "raw_code": "private void defineInternalFrameMenuButtons(UIDefaults d){\n  String p=\"InternalFrame:InternalFrameTitlePane:\\\"InternalFrameTitlePane.menuButton\\\"\";\n  String c=PAINTER_PREFIX + \"TitlePaneMenuButtonPainter\";\n  d.put(p + \".WindowNotFocused\",new TitlePaneMenuButtonWindowNotFocusedState());\n  d.put(p + \".contentMargins\",new InsetsUIResource(0,0,0,0));\n  d.put(p + \"[Enabled].iconPainter\",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED));\n  d.put(p + \"[Disabled].iconPainter\",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_DISABLED));\n  d.put(p + \"[MouseOver].iconPainter\",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER));\n  d.put(p + \"[Pressed].iconPainter\",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED));\n  d.put(p + \"[Enabled+WindowNotFocused].iconPainter\",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED_WINDOWNOTFOCUSED));\n  d.put(p + \"[MouseOver+WindowNotFocused].iconPainter\",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER_WINDOWNOTFOCUSED));\n  d.put(p + \"[Pressed+WindowNotFocused].iconPainter\",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED_WINDOWNOTFOCUSED));\n  d.put(p + \".icon\",new SeaGlassIcon(p,\"iconPainter\",19,18));\n}"}
{"ids": "21631", "raw_code": "public static Workflow.Method restoreFromCloneMethod(URI storage,List<URI> clone,Boolean updateOpStatus,boolean isCG){\n  return new Workflow.Method(\"restoreFromCloneStep\",storage,clone,updateOpStatus,isCG);\n}"}
{"ids": "38664", "raw_code": "@Override public synchronized void removeDataSourceListener(DataSourceListener dsl){\n  m_dataSourceListeners.remove(dsl);\n}"}
{"ids": "43329", "raw_code": "public String rightStr(String str,int length){\n  return str.substring(Math.max(0,str.length() - length));\n}"}
{"ids": "73941", "raw_code": "public void clearNameInUnoccupiedBlocks(){\n  for (int i=0; i < mBlockEntries.size(); i++) {\n    Block b=mBlockEntries.get(i);\n    if (b.getState() == Block.UNOCCUPIED) {\n      b.setValue(\"  \");\n    }\n  }\n}"}
{"ids": "13534", "raw_code": "public static Object unserialize(Data data){\n  try {\n    Class clazz=(Class)Class.forName((String)data.get(\"class\"));\n    if (clazz.isEnum()) {\n      return Enum.valueOf(clazz,data.get(\"value\"));\n    }\n else     if (clazz == Vector3D.class) {\n      return new Vector3D(data.get(\"x\"),data.get(\"y\"),data.get(\"z\"));\n    }\n else     if (clazz == Vector2D.class) {\n      return new Vector2D(data.get(\"x\"),(double)data.get(\"y\"));\n    }\n else {\n      return unserialize(clazz,data);\n    }\n  }\n catch (  Exception e) {\n    throw new DataException(e);\n  }\n}"}
{"ids": "31914", "raw_code": "public static void onGridStop() throws InterruptedException {\nsynchronized (mux) {\n    if (gridCnt == 0)     return;\n    --gridCnt;\n    Thread timer0=timer;\n    if (gridCnt == 0 && timer0 != null) {\n      timer=null;\n      timer0.interrupt();\n      timer0.join();\n    }\n  }\n}"}
{"ids": "50991", "raw_code": "public void pushTemplateFolder(@NotNull String folderName) throws IOException {\n  myLastTemplateFolders.push(resolveName(folderName));\n}"}
{"ids": "42318", "raw_code": "public void printDepthFirst(){\n  print(new DepthFirstEnumerator(_firstNode));\n}"}
{"ids": "22817", "raw_code": "public void addEvent(SimEvent newEvent){\n  double eventTime=newEvent.eventTime();\n  if (eventTime >= maxTime) {\n    list.add(newEvent);\n    maxTime=eventTime;\n    return;\n  }\n  ListIterator<SimEvent> iterator=list.listIterator();\n  SimEvent event;\n  while (iterator.hasNext()) {\n    event=iterator.next();\n    if (event.eventTime() > eventTime) {\n      iterator.previous();\n      iterator.add(newEvent);\n      return;\n    }\n  }\n  list.add(newEvent);\n}"}
{"ids": "3127", "raw_code": "public DbSchemaEjbGenerator(GeneratedTables genTables,SchemaElement schemaElement){\n  this(genTables,schemaElement,CollectionType.COLLECTION,false,false,false);\n}"}
{"ids": "53668", "raw_code": "@Override public void initialize(){\n  board=null;\nswitch (simPaneCtrl.getParamValueIndex(PARAM_INIT_CONF)) {\ncase 0:\n    board=new EightPuzzleBoard(new int[]{1,2,5,3,4,0,6,7,8});\n  break;\ncase 1:\nboard=new EightPuzzleBoard(new int[]{1,4,2,7,5,8,3,0,6});\nbreak;\ncase 2:\nboard=new EightPuzzleBoard(new int[]{0,8,7,6,5,4,3,2,1});\nbreak;\ncase 3:\nboard=new EightPuzzleBoard(new int[]{0,1,2,3,4,5,6,7,8});\nRandom r=new Random(System.currentTimeMillis());\nfor (int i=0; i < 200; i++) {\nswitch (r.nextInt(4)) {\ncase 0:\nboard.moveGapUp();\nbreak;\ncase 1:\nboard.moveGapDown();\nbreak;\ncase 2:\nboard.moveGapLeft();\nbreak;\ncase 3:\nboard.moveGapRight();\nbreak;\n}\n}\n}\nstateViewCtrl.initialize(board);\n}"}
{"ids": "73229", "raw_code": "private void initTreeMap(){\n  if (entityType == null) {\n    entityType=\"Mouse\";\n  }\n  if (entityType.equalsIgnoreCase(\"Circle\")) {\n    imageMap=RotatingEntityManager.getCircle();\n  }\n  if (entityType.equalsIgnoreCase(\"Mouse\")) {\n    imageMap=RotatingEntityManager.getMouse();\n  }\n else   if (entityType.equalsIgnoreCase(\"Amy\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"amy\",20);\n  }\n else   if (entityType.equalsIgnoreCase(\"Arnold\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"arno\",20);\n  }\n else   if (entityType.equalsIgnoreCase(\"Boy\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"boy\",20);\n  }\n else   if (entityType.equalsIgnoreCase(\"Cow\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"cow\",25);\n  }\n else   if (entityType.equalsIgnoreCase(\"Girl\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"girl\",20);\n  }\n else   if (entityType.equalsIgnoreCase(\"Lion\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"lion\",15);\n  }\n else   if (entityType.equalsIgnoreCase(\"Susi\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"susi\",20);\n  }\n else   if (entityType.equalsIgnoreCase(\"Jake\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"jake\",20);\n  }\n else   if (entityType.equalsIgnoreCase(\"Steve\")) {\n    imageMap=RotatingEntityManager.getRotatingTileset(\"steve\",20);\n  }\n  update();\n}"}
{"ids": "19769", "raw_code": "public static File locateReplicatorHomeDir(){\n  if (replicatorHomeDir == null) {\n    String replicatorHome=System.getProperty(HOME_DIR);\n    if (replicatorHome == null)     replicatorHome=System.getProperty(\"user.dir\");\n    replicatorHomeDir=new File(replicatorHome);\n    if (!replicatorHomeDir.isDirectory()) {\n      throw new ServerRuntimeException(\"Replicator home does not exist or is invalid: \" + replicatorHomeDir);\n    }\n  }\n  return replicatorHomeDir;\n}"}
{"ids": "80705", "raw_code": "public StringData(String data){\n  m_data=data;\n}"}
{"ids": "71248", "raw_code": "void writeRepeatedSqr(DD xdd){\n  if (xdd.ge(DD.valueOf(1)))   throw new IllegalArgumentException(\"Argument must be < 1\");\n  int count=0;\n  while (xdd.doubleValue() > 1e-300) {\n    count++;\n    if (count == 100)     count=count;\n    double x=xdd.doubleValue();\n    DD xSqr=xdd.sqr();\n    String s=xSqr.toString();\n    DD xSqr2=DD.parse(s);\n    xdd=xSqr;\n  }\n}"}
{"ids": "81152", "raw_code": "public static final void open(File file) throws NoSuchMethodException {\n  if (Platform.isMacOSX()) {\n    execArgs(\"open\",file.getAbsolutePath());\n  }\n else   if (Platform.isWindows()) {\n    if (file.isDirectory()) {\n      execArgs(\"explorer\",file.getAbsolutePath());\n    }\n else {\n      execArgs(\"start\",file.getAbsolutePath());\n    }\n  }\n else   if (Platform.isUnix() && hasUnixCommand(\"gnome-open\")) {\n    execArgs(\"gnome-open\",file.toString());\n  }\n else   if (Platform.isUnix() && hasUnixCommand(\"konqueror\")) {\n    execArgs(\"konqueror\",file.toString());\n  }\n else   if (Platform.isSolaris() && file.isDirectory()) {\n    execArgs(\"/usr/dt/bin/dtfile\",\"-folder\",file.getAbsolutePath());\n  }\n else {\n    throw new NoSuchMethodException(\"Cannot open files on this platform\");\n  }\n}"}
{"ids": "62255", "raw_code": "private static String[] norm(String path){\n  String[] elements=path.split(\"[/\\\\\\\\]\");\n  ArrayList<String> stack=new ArrayList<String>();\n  for (  String e : elements) {\n    if (e.isEmpty() || e.equals(\".\"))     continue;\n    if (e.equals(\"..\")) {\n      if (!stack.isEmpty())       stack.remove(stack.size() - 1);\n else       return null;\n      continue;\n    }\n    stack.add(e);\n  }\n  return stack.toArray(new String[stack.size()]);\n}"}
{"ids": "77445", "raw_code": "static Random random(){\n  if (null == LUCENE_TEST_CASE) {\n    return null;\n  }\n else {\n    try {\n      Method randomMethod=LUCENE_TEST_CASE.getMethod(\"random\");\n      return (Random)randomMethod.invoke(null);\n    }\n catch (    Exception e) {\n      throw new IllegalStateException(\"Unable to use reflection to invoke LuceneTestCase.random()\",e);\n    }\n  }\n}"}
{"ids": "51602", "raw_code": "protected String record(String deployment){\n  deployments.add(deployment);\n  return deployment;\n}"}
{"ids": "30411", "raw_code": "private static void shutDownMySQLAbandonedConnectionCleanupThread(ClassLoader classLoader){\n  try {\n    Class<?> mysqlCleanupThreadClass;\n    try {\n      mysqlCleanupThreadClass=classLoader.loadClass(\"com.mysql.jdbc.AbandonedConnectionCleanupThread\");\n    }\n catch (    ClassNotFoundException e) {\n      LOG.trace(\"Failed to load MySQL abandoned connection cleanup thread class. Presuming DB App is \" + \"not being run with MySQL and ignoring\",e);\n      return;\n    }\n    Method shutdownMethod=mysqlCleanupThreadClass.getMethod(\"shutdown\");\n    shutdownMethod.invoke(null);\n    LOG.debug(\"Successfully shutdown MySQL connection cleanup thread.\");\n  }\n catch (  Throwable e) {\n    LOG.warn(\"Failed to shutdown MySQL connection cleanup thread. Ignoring.\",e);\n  }\n}"}
{"ids": "62067", "raw_code": "public void write(byte[] buffer){\n  if (isFinal) {\n    log.warning(\"attempting to write to a final SpeechData object\");\n    return;\n  }\n  byte[] newData=new byte[data.length + buffer.length];\n  System.arraycopy(data,0,newData,0,data.length);\n  System.arraycopy(buffer,0,newData,data.length,buffer.length);\n  data=newData;\n}"}
{"ids": "54925", "raw_code": "public String parse(String controlTemplate,Context controlContext) throws Exception {\n  this.controlContext=controlContext;\n  fillContextDefaults(this.controlContext);\n  fillContextProperties(this.controlContext);\n  Template template=getTemplate(controlTemplate,inputEncoding);\n  StringWriter sw=new StringWriter();\n  template.merge(controlContext,sw);\n  return sw.toString();\n}"}
{"ids": "2064", "raw_code": "public static long writeFile(String path,byte[] jpeg,ExifInterface exif) throws IOException {\n  if (!createDirectoryIfNeeded(path)) {\n    Log.e(TAG,\"Failed to create parent directory for file: \" + path);\n    return -1;\n  }\n  if (exif != null) {\n    exif.writeExif(jpeg,path);\n    File f=new File(path);\n    return f.length();\n  }\n else {\n    return writeFile(path,jpeg);\n  }\n}"}
{"ids": "21896", "raw_code": "private boolean checkForImageServers(){\n  boolean imageServerExists=true;\n  List<URI> imageServerURIList=_dbClient.queryByType(ComputeImageServer.class,true);\n  ArrayList<URI> tempList=Lists.newArrayList(imageServerURIList.iterator());\n  if (tempList.isEmpty()) {\n    imageServerExists=false;\n  }\n  return imageServerExists;\n}"}
{"ids": "86236", "raw_code": "public void removeExtension(String ext){\nsynchronized (exts) {\n    ext=ext.toLowerCase();\n    exts.remove(ext);\n  }\n}"}
{"ids": "9397", "raw_code": "protected double distance(int i,int k,int[] designations){\n  return Math.sqrt(Math.max(selfK[i] - 2.0 / ownes[k] * evalSumK(i,k,designations) + meanSqrdNorms[k] * normConsts[k],0));\n}"}
{"ids": "15302", "raw_code": "public StringBuffer format(Object pat,StringBuffer result,FieldPosition fpos){\n  String pattern=processPattern((String)pat);\n  int lastOffset=0;\n  for (int i=0; i <= maxOffset; ++i) {\n    int offidx=offsets[i];\n    result.append(pattern.substring(lastOffset,offsets[i]));\n    lastOffset=offidx;\n    String key=arguments[i];\n    String obj;\n    if (key.length() > 0) {\n      obj=formatObject(processKey(key));\n    }\n else {\n      result.append(this.ldel);\n      result.append(this.rdel);\n      continue;\n    }\n    if (obj == null) {\n      String lessgreedy=ldel + key;\n      int fromright=lessgreedy.lastIndexOf(ldel);\n      if (fromright > 0) {\n        String newkey=lessgreedy.substring(fromright + ldel.length());\n        String newsubst=formatObject(processKey(newkey));\n        if (newsubst != null) {\n          obj=lessgreedy.substring(0,fromright) + newsubst;\n        }\n      }\n    }\n    if (obj == null) {\n      if (throwex) {\n        throw new IllegalArgumentException(\"ObjectForKey\");\n      }\n else {\n        obj=ldel + key + rdel;\n      }\n    }\n    result.append(obj);\n  }\n  result.append(pattern.substring(lastOffset,pattern.length()));\n  return result;\n}"}
{"ids": "41743", "raw_code": "void release(Object owner,Field field){\n  Map<String,Integer> fields=owners.get(owner);\n  if (fields != null) {\n    release();\n    Integer count=fields.get(field.toGenericString());\n    if (--count > 0) {\n      fields.put(field.toGenericString(),count);\n    }\n else {\n      fields.remove(field.toGenericString());\n    }\n  }\n  if (fields != null && fields.isEmpty()) {\n    owners.remove(owner);\n  }\n}"}
{"ids": "47102", "raw_code": "static Executor screenExecutor(Executor e){\n  if (!useCommonPool && e == ForkJoinPool.commonPool())   return asyncPool;\n  if (e == null)   throw new NullPointerException();\n  return e;\n}"}
{"ids": "63977", "raw_code": "public void addGroupPropertiesListener(GroupPropertiesListener groupPropertiesListener){\n  groupPropertiesListeners.add(groupPropertiesListener);\n}"}
{"ids": "36835", "raw_code": "public static void editGlobalFunctionComment(final AbstractSQLProvider provider,final INaviFunction function,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {\n  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);\n}"}
{"ids": "15033", "raw_code": "public boolean doesEntryExists(SSOToken token,String entryDN){\n  try {\n    PersistentObject po=UMSObject.getObject(internalToken,new Guid(entryDN));\n  }\n catch (  UMSException ue) {\n    if (entryDN.indexOf(\"agents\") < 0) {\n      if (debug.messageEnabled()) {\n        debug.message(\"DirectoryServicesImpl.doesProfileExist(): + \" + \"Exception caught: \",ue);\n      }\n    }\n    return false;\n  }\n  return true;\n}"}
{"ids": "47896", "raw_code": "private static int hashWrapperName(String xn){\n  if (xn.length() < 3) {\n    return 0;\n  }\n  return (3 * xn.charAt(1) + xn.charAt(2)) % 16;\n}"}
{"ids": "24306", "raw_code": "private void createPRWithTotalNumPropSetList(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy){\n  Iterator nodeIterator=vmList.iterator();\n  while (nodeIterator.hasNext()) {\n    VM vm=(VM)nodeIterator.next();\n    vm.invoke(createMultiplePRWithTotalNumBucketPropSet(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,11));\n  }\n}"}
{"ids": "12479", "raw_code": "public Zdiagmat(Zmat A,int k) throws JampackException {\n  Parameters.BaseIndexNotChangeable=true;\n  basex=Parameters.BaseIndex;\n  if (k >= 0) {\n    if (k >= A.ncol) {\n      throw new JampackException(\"Diagonal out of range.\");\n    }\n    order=Math.min(A.nrow,A.ncol - k);\n    re=new double[order];\n    im=new double[order];\n    for (int i=0; i < order; i++) {\n      re[i]=A.re[i][i + k];\n      im[i]=A.im[i][i + k];\n    }\n  }\n else {\n    k=-k;\n    if (k >= A.nrow) {\n      throw new JampackException(\"Diagonal out of range.\");\n    }\n    order=Math.min(A.nrow - k,A.ncol);\n    re=new double[order];\n    im=new double[order];\n    for (int i=0; i < order; i++) {\n      re[i]=A.re[i + k][i];\n      im[i]=A.im[i + k][i];\n    }\n  }\n  getProperties();\n}"}
{"ids": "73253", "raw_code": "public void buildNetwork(){\n  Neuron firstNeuron=new Neuron(network,DEFAULT_NEURON_TYPE);\n  List<Neuron> currentLayer=new ArrayList<Neuron>();\n  firstNeuron.setPosition(initialPosition);\n  currentLayer.add(firstNeuron);\n  int numNeuronsLastLayer=(int)Math.pow(numBrachesPerNeuron,numLayers);\n  double totalSpace=numNeuronsLastLayer * horizontalSpacing;\n  for (int layerIndex=1; layerIndex <= numLayers; layerIndex++) {\n    List<Neuron> tempList=new ArrayList<Neuron>();\n    double layerSpacing=totalSpace / (int)Math.pow(numBrachesPerNeuron,layerIndex);\n    double branchWidth=layerSpacing * (numBrachesPerNeuron - 1);\n    for (    Neuron baseNeuron : currentLayer) {\n      network.addNeuron(baseNeuron);\n      double initialXOffset=branchWidth / 2;\n      for (int j=0; j < numBrachesPerNeuron; j++) {\n        Neuron targetNeuron=new Neuron(network,new LinearRule());\n        targetNeuron.setLocation(baseNeuron.getX() - initialXOffset + (j * layerSpacing),initialPosition.y - (layerIndex * verticalSpacing));\n        tempList.add(targetNeuron);\n        network.addNeuron(targetNeuron);\n        targetNeuron.setUpdatePriority(layerIndex);\n        Synapse synapse=new Synapse(network,baseNeuron,targetNeuron,new StaticSynapseRule());\n        network.addSynapse(synapse);\n      }\n    }\n    currentLayer=tempList;\n  }\n}"}
{"ids": "69488", "raw_code": "public Enumeration productions(){\n  return _productions.elements();\n}"}
{"ids": "9692", "raw_code": "public DJarInfo(JFrame parent) throws IOException {\n  this(parent,res.getString(\"DJarInfo.Title\"),ModalityType.DOCUMENT_MODAL);\n}"}
{"ids": "85746", "raw_code": "protected void transformPointArrayNoTouch(float[] pts){\n  mMatrixValueToPx.mapPoints(pts);\n  mMatrixOffset.mapPoints(pts);\n}"}
{"ids": "51738", "raw_code": "private void convertEscapedFunction(final StringBuilder target,final CharSequence escapedFunction) throws FBSQLParseException {\n  final String templateResult=FBEscapedFunctionHelper.convertTemplate(escapedFunction.toString(),mode);\n  target.append(templateResult != null ? templateResult : escapedFunction);\n}"}
{"ids": "23317", "raw_code": "public void addListener(ImsSessionListener listener){\n  mListeners.add(listener);\n}"}
{"ids": "33145", "raw_code": "public static IPath stampToPath(final long stamp){\n  fgCalendar.setTimeInMillis(stamp);\n  final StringBuffer buffer=new StringBuffer(256);\n  buffer.append(fgCalendar.get(Calendar.YEAR));\n  buffer.append(IPath.SEPARATOR);\n  buffer.append(fgCalendar.get(Calendar.MONTH) + 1);\n  buffer.append(IPath.SEPARATOR);\n  buffer.append(fgCalendar.get(Calendar.WEEK_OF_YEAR));\n  return new Path(buffer.toString());\n}"}
{"ids": "55471", "raw_code": "public void printUserMessage(UserMessage message){\n  User user=message.user;\n  boolean ignored=message.ignored_compact;\n  if (ignored) {\n    printCompact(\"IGNORED\",user);\n    return;\n  }\n  Color color=message.color;\n  boolean action=message.action;\n  String text=message.text;\n  TagEmotes emotes=message.emotes;\n  boolean highlighted=message.highlighted;\n  if (message.whisper && message.action) {\n    color=StyleConstants.getForeground(styles.info());\n    highlighted=true;\n  }\n  closeCompactMode();\n  MutableAttributeSet style;\n  if (highlighted) {\n    style=styles.highlight(color);\n  }\n else {\n    style=styles.standard();\n  }\n  print(getTimePrefix(),style);\n  printUser(user,action,message.whisper,message.id);\n  if (!highlighted && action && styles.actionColored()) {\n    style=styles.standard(user.getDisplayColor());\n  }\n  printSpecials(text,user,style,emotes,false,message.bits > 0);\n  printNewline();\n}"}
{"ids": "75507", "raw_code": "public static boolean isAccessModifier(String str){\n  return str.equals(\"static\") || str.equals(\"public\") || str.equals(\"protected\")|| str.equals(\"private\")|| str.equals(\"final\")|| str.equals(\"transient\");\n}"}
{"ids": "65335", "raw_code": "protected void handleAppendRequestFailure(MemberState member,AppendRequest request,Throwable error){\n  failAttempt(member,error);\n}"}
{"ids": "19608", "raw_code": "public static String decode(byte[] utf8) throws CharacterCodingException {\n  return decode(ByteBuffer.wrap(utf8),true);\n}"}
{"ids": "10107", "raw_code": "private Map<String,String> attributesToLowerCase(){\n  Map<String,String> lowerCaseAttributes=new LinkedHashMap<String,String>();\n  for (  String key : attributes.keySet()) {\n    lowerCaseAttributes.put(key.toLowerCase(),attributes.get(key));\n  }\n  return lowerCaseAttributes;\n}"}
{"ids": "39736", "raw_code": "public byte[] readNextPart() throws JPlagException {\n  if (remainingBytes == 0) {\n    throw new JPlagException(\"downloadException\",\"There's nothing left to be downloaded!\",\"\");\n  }\n  try {\n    FileInputStream in=new FileInputStream(file);\n    in.skip(filesize - remainingBytes);\n    int partsize=remainingBytes;\n    if (partsize > 81920)     partsize=81920;\n    byte[] data=new byte[partsize];\n    in.read(data);\n    in.close();\n    remainingBytes-=partsize;\n    return data;\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    throw new JPlagException(\"downloadException\",\"Unable to read\" + \" submission part from server!\",\"\");\n  }\n}"}
{"ids": "8438", "raw_code": "public boolean isMultiLineTabbed(){\n  return multiLineTab;\n}"}
{"ids": "38090", "raw_code": "protected void computeParameters(){\n  if (m_SumOfWeights > 0) {\n    m_Mean=m_SumOfValues / m_SumOfWeights;\n    double stdDev=Math.sqrt(Math.abs(m_SumOfValuesSq - m_Mean * m_SumOfValues) / m_SumOfWeights);\n    if (stdDev > 1e-10) {\n      m_StandardDev=Math.max(m_Precision / (2 * 3),stdDev);\n    }\n  }\n}"}
{"ids": "66551", "raw_code": "public String translateDataType(String sourceVendorName,String targetVendorName,String dataType,int size,int scale){\n  return getDataType(targetVendorName,getDataTypeID(sourceVendorName,dataType),size,scale);\n}"}
{"ids": "54838", "raw_code": "public static List<ShapeRecord> rectangle(double startx,double starty,double width,double height,double radiusX,double radiusY,double topLeftRadiusX,double topLeftRadiusY,double topRightRadiusX,double topRightRadiusY,double bottomLeftRadiusX,double bottomLeftRadiusY,double bottomRightRadiusX,double bottomRightRadiusY){\n  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();\n  if (radiusX == 0.0) {\n    radiusY=radiusX=0;\n  }\n else   if (radiusY == 0.0) {\n    radiusY=radiusX;\n  }\n  if (radiusX > width / 2.0)   radiusX=width / 2.0;\n  if (radiusY > height / 2.0)   radiusY=height / 2.0;\n  double[] topLeftRadius=getCornerRadius(topLeftRadiusX,topLeftRadiusY,radiusX,radiusY,width,height);\n  topLeftRadiusX=topLeftRadius[0];\n  topLeftRadiusY=topLeftRadius[1];\n  double[] topRightRadius=getCornerRadius(topRightRadiusX,topRightRadiusY,radiusX,radiusY,width,height);\n  topRightRadiusX=topRightRadius[0];\n  topRightRadiusY=topRightRadius[1];\n  double[] bottomLeftRadius=getCornerRadius(bottomLeftRadiusX,bottomLeftRadiusY,radiusX,radiusY,width,height);\n  bottomLeftRadiusX=bottomLeftRadius[0];\n  bottomLeftRadiusY=bottomLeftRadius[1];\n  double[] bottomRightRadius=getCornerRadius(bottomRightRadiusX,bottomRightRadiusY,radiusX,radiusY,width,height);\n  bottomRightRadiusX=bottomRightRadius[0];\n  bottomRightRadiusY=bottomRightRadius[1];\n  double c0=0.923879532511;\n  double c1=0.382683432365;\n  double c3=0.707106781187;\n  double rx=bottomRightRadiusX;\n  double ry=bottomRightRadiusY;\n  double tx=rx / 0.923879532511;\n  double ty=ry / 0.923879532511;\n  double dx, currentx;\n  double dy, currenty;\n  dx=startx + width - rx;\n  dy=starty + height - ry;\n  shapeRecords.add(move((dx + rx),dy));\n  currentx=(dx + rx);\n  currenty=dy;\n  if (bottomRightRadiusX != 0.0) {\n    shapeRecords.add(curvedEdge(currentx,currenty,(dx + c0 * tx),(dy + c1 * ty),(dx + c3 * rx),(dy + c3 * ry)));\n    shapeRecords.add(curvedEdge((dx + c3 * rx),(dy + c3 * ry),(dx + c1 * tx),(dy + c0 * ty),dx,(dy + ry)));\n    currentx=dx;\n    currenty=dy + ry;\n  }\n  rx=bottomLeftRadiusX;\n  ry=bottomLeftRadiusY;\n  tx=rx / 0.923879532511;\n  ty=ry / 0.923879532511;\n  dx=startx + rx;\n  dy=starty + height - ry;\n  shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy + ry)));\n  currentx=dx;\n  currenty=dy + ry;\n  if (bottomLeftRadiusX != 0.0) {\n    shapeRecords.add(curvedEdge(currentx,currenty,(dx - c1 * tx),(dy + c0 * ty),(dx - c3 * rx),(dy + c3 * ry)));\n    shapeRecords.add(curvedEdge((dx - c3 * rx),(dy + c3 * ry),(dx - c0 * tx),(dy + c1 * ty),(dx - rx),dy));\n    currentx=dx - rx;\n    currenty=dy;\n  }\n  rx=topLeftRadiusX;\n  ry=topLeftRadiusY;\n  tx=rx / 0.923879532511;\n  ty=ry / 0.923879532511;\n  dx=startx + rx;\n  dy=starty + ry;\n  shapeRecords.addAll(straightEdge(currentx,currenty,(dx - rx),dy));\n  currentx=dx - rx;\n  currenty=dy;\n  if (topLeftRadiusX != 0.0) {\n    shapeRecords.add(curvedEdge(currentx,currenty,(dx - c0 * tx),(dy - c1 * ty),(dx - c3 * rx),(dy - c3 * ry)));\n    shapeRecords.add(curvedEdge((dx - c3 * rx),(dy - c3 * ry),(dx - c1 * tx),(dy - c0 * ty),dx,(dy - ry)));\n    currentx=dx;\n    currenty=dy - ry;\n  }\n  rx=topRightRadiusX;\n  ry=topRightRadiusY;\n  tx=rx / 0.923879532511;\n  ty=ry / 0.923879532511;\n  dx=startx + width - rx;\n  dy=starty + ry;\n  shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy - ry)));\n  currentx=dx;\n  currenty=dy - ry;\n  if (topRightRadiusX != 0.0) {\n    shapeRecords.add(curvedEdge(currentx,currenty,(dx + c1 * tx),(dy - c0 * ty),(dx + c3 * rx),(dy - c3 * ry)));\n    shapeRecords.add(curvedEdge((dx + c3 * rx),(dy - c3 * ry),(dx + c0 * tx),(dy - c1 * ty),(dx + rx),dy));\n    currentx=(dx + rx);\n    currenty=dy;\n  }\n  rx=bottomRightRadiusX;\n  ry=bottomRightRadiusY;\n  tx=rx / 0.923879532511;\n  ty=ry / 0.923879532511;\n  dx=startx + width - rx;\n  dy=starty + height - ry;\n  shapeRecords.addAll(straightEdge(currentx,currenty,(dx + rx),dy));\n  return shapeRecords;\n}"}
{"ids": "55515", "raw_code": "protected void moveDownSelected(){\n  int selectedIndex=table.getSelectedRow();\n  if (selectedIndex > -1) {\n    int index=data.moveDown(indexToModel(selectedIndex));\n    setRowSelected(indexToView(index));\n  }\n}"}
{"ids": "3748", "raw_code": "JarWithFile(PathImpl backing){\n  super(backing);\n}"}
{"ids": "72734", "raw_code": "public List<Runnable> shutdownNow(){\n  logger.info(\"Shutting down scanner immediately.\");\n  return executor.shutdownNow();\n}"}
{"ids": "60309", "raw_code": "public static List<String> toRelativePaths(@NotNull VirtualFile root,@NotNull final Collection<FilePath> filePaths){\n  ArrayList<String> rc=new ArrayList<String>(filePaths.size());\n  for (  FilePath path : filePaths) {\n    rc.add(relativePath(root,path));\n  }\n  return rc;\n}"}
{"ids": "83636", "raw_code": "private void handleUnlockOrInstall(){\n  if (isFinishing()) {\n    return;\n  }\nswitch (mKeyStore.state()) {\ncase UNINITIALIZED:\n{\n      ensureKeyGuard();\n      return;\n    }\ncase LOCKED:\n{\n    new UnlockDialog();\n    return;\n  }\ncase UNLOCKED:\n{\n  if (!checkKeyGuardQuality()) {\n    new ConfigureKeyGuardDialog();\n    return;\n  }\n  installIfAvailable();\n  finish();\n  return;\n}\n}\n}"}
{"ids": "40762", "raw_code": "private void offsetStartTimeIfNecessary(Time startTime,Time endTime,String rrule,CalendarEventModel model){\n  if (rrule == null || rrule.isEmpty()) {\n    return;\n  }\n  mEventRecurrence.parse(rrule);\n  if (mEventRecurrence.freq != EventRecurrence.WEEKLY) {\n    return;\n  }\n  if (mEventRecurrence.byday.length > mEventRecurrence.bydayCount) {\n    return;\n  }\n  int closestWeekday=Integer.MAX_VALUE;\n  int weekstart=EventRecurrence.day2TimeDay(mEventRecurrence.wkst);\n  int startDay=startTime.weekDay;\n  for (int i=0; i < mEventRecurrence.bydayCount; i++) {\n    int day=EventRecurrence.day2TimeDay(mEventRecurrence.byday[i]);\n    if (day == startDay) {\n      return;\n    }\n    if (day < weekstart) {\n      day+=7;\n    }\n    if (day > startDay && (day < closestWeekday || closestWeekday < startDay)) {\n      closestWeekday=day;\n    }\n    if (closestWeekday == Integer.MAX_VALUE || closestWeekday < startDay) {\n      if (day < closestWeekday) {\n        closestWeekday=day;\n      }\n    }\n  }\n  if (closestWeekday < startDay) {\n    closestWeekday+=7;\n  }\n  int daysOffset=closestWeekday - startDay;\n  startTime.monthDay+=daysOffset;\n  endTime.monthDay+=daysOffset;\n  long newStartTime=startTime.normalize(true);\n  long newEndTime=endTime.normalize(true);\n  model.mStart=newStartTime;\n  model.mEnd=newEndTime;\n}"}
{"ids": "53579", "raw_code": "private void cleanUpFrontier(){\n  while (!frontier.isEmpty() && isExplored(frontier.element()))   frontier.remove();\n}"}
{"ids": "85585", "raw_code": "public static boolean isBeforeToday(Calendar _calendar){\n  return _calendar.before(Calendar.getInstance());\n}"}
{"ids": "41458", "raw_code": "public static ViewItemGroup buildLoginUI(ModelApplication modelApp,Activity activity){\n  ViewItemGroup viewItems=new ViewItemGroup(activity);\n  TextView usernameText=new TextView(activity);\n  usernameText.setText(R.string.username);\n  viewItems.addView(usernameText);\n  ViewItemFactory viewItemFactory=ViewItemFactory.instance();\n  ViewItem usernameItem=viewItemFactory.create(LoginViewID.USERNAME,viewItemFactory.TEXT_DATATYPE_DB_ID,activity);\n  viewItems.addViewItem(usernameItem,new OmniText(modelApp.getUsername()));\n  TextView passwordText=new TextView(activity);\n  passwordText.setText(R.string.password);\n  viewItems.addView(passwordText);\n  ViewItem passwordItem=viewItemFactory.create(LoginViewID.PASSWORD,viewItemFactory.PASSWORD_INPUT_DATATYPE_DB_ID,activity);\n  viewItems.addViewItem(passwordItem,new OmniPasswordInput(modelApp.getPassword()));\n  return viewItems;\n}"}
{"ids": "22482", "raw_code": "public void unMapVolumeFromSCSIInitiator(String volumeId,String initiatorId) throws Exception {\n  String uri=ScaleIOConstants.getUnmapVolumeToScsiInitiatorURI(volumeId);\n  ScaleIOUnmapVolumeToScsiInitiator unmapParm=new ScaleIOUnmapVolumeToScsiInitiator();\n  unmapParm.setScsiInitiatorId(initiatorId);\n  post(URI.create(uri),getJsonForEntity(unmapParm));\n}"}
{"ids": "10791", "raw_code": "public Collection<T> asCollection(){\n  return this.list;\n}"}
{"ids": "51024", "raw_code": "private static void addQuarterArc(Path2D.Float path,float x1,float y1,float x2,float y2,float curvature,boolean verticalStart){\n  boolean down=y1 < y2;\n  boolean left=x1 > x2;\n  float cx1=0;\n  float cy1=0;\n  float cx2=0;\n  float cy2=0;\n  if (verticalStart) {\n    cx1=x1;\n    cy2=y2;\n    if (left) {\n      cx2=x1 - curvature;\n    }\n else {\n      cx2=x1 + curvature;\n    }\n    if (down) {\n      cy1=y2 - curvature;\n    }\n else {\n      cy1=y2 + curvature;\n    }\n  }\n else {\n    cx2=x2;\n    cy1=y1;\n    if (left) {\n      cx1=x2 + curvature;\n    }\n else {\n      cx1=x2 - curvature;\n    }\n    if (down) {\n      cy2=y1 + curvature;\n    }\n else {\n      cy2=y1 - curvature;\n    }\n  }\n  path.curveTo(cx1,cy1,cx2,cy2,x2,y2);\n}"}
{"ids": "59699", "raw_code": "@Override public void parse(String content,Node block){\n  this.block=block;\n  this.input=content.trim();\n  this.index=0;\n  this.lastDelimiter=null;\n  this.lastBracket=null;\n  boolean moreToParse;\n  do {\n    moreToParse=parseInline();\n  }\n while (moreToParse);\n  processDelimiters(null);\n  mergeTextNodes(block.getFirstChild(),block.getLastChild());\n}"}
{"ids": "59603", "raw_code": "public static void random(byte[] b,int offset,int length){\n  checkPositionIndex(offset,b.length,\"offset\");\n  checkArgument(length > 0,\"length must be greater than 0\");\n  checkPositionIndex(offset + length,b.length,\"offset + length\");\n  byte[] buf=new byte[length];\n  RNG.nextBytes(buf);\n  System.arraycopy(buf,0,b,offset,length);\n}"}
{"ids": "76627", "raw_code": "public void removeAllScanningCallbacks(){\n  scanningCallbacks.clear();\n}"}
{"ids": "52299", "raw_code": "public int read(byte[] buf,int off,int len) throws TTransportException {\n  if (inputStream_ == null) {\n    throw new TTransportException(TTransportException.NOT_OPEN,\"Cannot read from null inputStream\");\n  }\n  int bytesRead;\n  try {\n    bytesRead=inputStream_.read(buf,off,len);\n  }\n catch (  IOException iox) {\n    throw new TTransportException(TTransportException.UNKNOWN,iox);\n  }\n  if (bytesRead < 0) {\n    throw new TTransportException(TTransportException.END_OF_FILE);\n  }\n  return bytesRead;\n}"}
{"ids": "24199", "raw_code": "public void handleManagerCreation() throws ManagementException {\n  if (!isServiceInitialised(\"handleManagerCreation\")) {\n    return;\n  }\n  ObjectName managerMBeanName=MBeanJMXAdapter.getManagerName();\n  ManagerMBeanBridge bridge=new ManagerMBeanBridge(service);\n  ManagerMXBean bean=new ManagerMBean(bridge);\n  service.registerInternalMBean(bean,managerMBeanName);\n}"}
{"ids": "73104", "raw_code": "@SuppressWarnings(\"unused\") private boolean checkSetShape(Shape oldShape,Shape newShape){\n  Shape currentShape=getShape();\n  assert oldShape != newShape : \"Wrong old shape assumption?\";\n  assert newShape != currentShape : \"Redundant shape change? shape=\" + currentShape;\n  assert oldShape == currentShape || oldShape.getParent() == currentShape : \"Out-of-order shape change?\" + \"\\nparentShape=\" + currentShape + \"\\noldShape=\"+ oldShape+ \"\\nnewShape=\"+ newShape;\n  return true;\n}"}
{"ids": "6460", "raw_code": "protected boolean isFileVisible(File file){\n  if (file == null || !file.exists() || !file.canRead() || file.isHidden()) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "86695", "raw_code": "public static String[] append(final String[] a,final String... b){\n  final int alen=a.length;\n  final int blen=b.length;\n  final String[] res=Arrays.copyOf(a,alen + blen);\n  System.arraycopy(b,0,res,alen,blen);\n  return res;\n}"}
{"ids": "15013", "raw_code": "public void delete() throws AMException, SSOException {\n  delete(false);\n}"}
{"ids": "82542", "raw_code": "public String(byte[] bytes,int off,int len,java.lang.String enc) throws java.io.UnsupportedEncodingException {\n  this(bytesToChars(bytes,off,len,enc));\n}"}
{"ids": "52799", "raw_code": "private boolean initializeSearchItemset(BitVector bv,int[] scratchi,int[] iters){\n  for (int i=0; i < scratchi.length; i++) {\n    iters[i]=(i == 0) ? bv.iter() : bv.iterAdvance(iters[i - 1]);\n    if (iters[i] < 0) {\n      return false;\n    }\n    scratchi[i]=bv.iterDim(iters[i]);\n  }\n  return true;\n}"}
{"ids": "81044", "raw_code": "private Rectangle computeEditorBounds(){\n  if (row == -1 || column == -1)   return new Rectangle(0,0,0,0);\n  Rectangle cell=grid.getCellBounds(column,row);\n  Rectangle area=grid.getClientArea();\n  if (cell.x < area.x + area.width) {\n    if (cell.x + cell.width > area.x + area.width) {\n      cell.width=area.x + area.width - cell.x;\n    }\n  }\n  Rectangle editorRect=new Rectangle(cell.x,cell.y,minimumWidth,minimumHeight);\n  if (grabHorizontal) {\n    editorRect.width=Math.max(cell.width,minimumWidth);\n  }\n  if (grabVertical) {\n    editorRect.height=Math.max(cell.height,minimumHeight);\n  }\n  if (horizontalAlignment == SWT.RIGHT) {\n    editorRect.x+=cell.width - editorRect.width;\n  }\n else   if (horizontalAlignment == SWT.LEFT) {\n  }\n else {\n    editorRect.x+=(cell.width - editorRect.width) / 2;\n  }\n  if (verticalAlignment == SWT.BOTTOM) {\n    editorRect.y+=cell.height - editorRect.height;\n  }\n else   if (verticalAlignment == SWT.TOP) {\n  }\n else {\n    editorRect.y+=(cell.height - editorRect.height) / 2;\n  }\n  return editorRect;\n}"}
{"ids": "3637", "raw_code": "public int read(byte[] buffer,int offset,int length) throws IOException {\n  throw new UnsupportedOperationException(String.valueOf(this));\n}"}
{"ids": "28708", "raw_code": "public Cuboid(World world,int x1,int y1,int z1,int x2,int y2,int z2){\n  this.worldName=world.getName();\n  this.x1=Math.min(x1,x2);\n  this.x2=Math.max(x1,x2);\n  this.y1=Math.min(y1,y2);\n  this.y2=Math.max(y1,y2);\n  this.z1=Math.min(z1,z2);\n  this.z2=Math.max(z1,z2);\n}"}
{"ids": "84583", "raw_code": "@SuppressWarnings({\"SuspiciousNameCombination\"}) public double logMarginalLikelihoodSmoothed(List<Double> v,double delta,double Pdata){\n  final double logDelta=StrictMath.log(delta);\n  final double logInvDelta=StrictMath.log(1.0 - delta);\n  final int n=v.size();\n  final double logN=StrictMath.log(n);\n  final double offset=logInvDelta - Pdata;\n  double bottom=logN + logDelta - logInvDelta;\n  double top=bottom + Pdata;\n  for (int i=0; i < n; i++) {\n    double weight=-LogTricks.logSum(logDelta,offset + v.get(i));\n    top=LogTricks.logSum(top,weight + v.get(i));\n    bottom=LogTricks.logSum(bottom,weight);\n  }\n  return top - bottom;\n}"}
{"ids": "22687", "raw_code": "public boolean isNewMessage(){\n  if (message == null) {\n    throw new IllegalStateException(\"no message present\");\n  }\n  return message.startsWith(\"new(\") || message.equals(\"new\");\n}"}
{"ids": "6584", "raw_code": "private void installProperties(){\n  System.setProperty(\"http.agent\",UserAgentGenerator.getUserAgent());\n  if (OSUtils.isMacOSX()) {\n    System.setProperty(\"apple.laf.useScreenMenuBar\",\"true\");\n  }\n}"}
{"ids": "76585", "raw_code": "private void loadRecipients(int addressType,HashSet<String> recipients,HashMap<Integer,EncodedStringValue[]> addressMap,boolean excludeMyNumber){\n  EncodedStringValue[] array=addressMap.get(addressType);\n  if (array == null) {\n    return;\n  }\n  if (excludeMyNumber && array.length == 1) {\n    return;\n  }\n  String myNumber=excludeMyNumber ? mTelephonyManager.getLine1Number() : null;\n  for (  EncodedStringValue v : array) {\n    if (v != null) {\n      String number=v.getString();\n      if ((myNumber == null || !PhoneNumberUtils.compare(number,myNumber)) && !recipients.contains(number)) {\n        recipients.add(number);\n      }\n    }\n  }\n}"}
{"ids": "54786", "raw_code": "private String scriptFromDisk(String name){\n  name=name.replace('\\\\','/');\n  final char SEP=';';\n  String pkgPart=\"\";\n  String pathPart=\"\";\n  String namePart=\"\";\n  int at=name.indexOf(SEP);\n  if (at > -1) {\n    int nextAt=name.indexOf(SEP,at + 1);\n    if (nextAt > -1) {\n      pathPart=name.substring(0,at);\n      pkgPart=name.substring(at + 1,nextAt);\n      namePart=name.substring(nextAt + 1);\n    }\n else {\n      pathPart=name.substring(0,at);\n      namePart=name.substring(at + 1);\n    }\n  }\n else {\n    at=name.lastIndexOf('/');\n    if (at > -1) {\n      int mx=name.lastIndexOf(\"/mx/\");\n      if (mx > -1) {\n        pathPart=name.substring(0,mx);\n        pkgPart=name.substring(mx + 1,at);\n      }\n else {\n        pathPart=name.substring(0,at);\n      }\n      namePart=name.substring(at + 1);\n    }\n else {\n      pathPart=\".\";\n      namePart=name;\n    }\n  }\n  String script=null;\n  try {\n    Charset realEncoding=null;\n    Charset bomEncoding=null;\n    InputStream in=locateScriptFile(pathPart,pkgPart,namePart);\n    if (in != null) {\n      try {\n        BufferedInputStream bis=new BufferedInputStream(in);\n        bomEncoding=getEncodingFromBOM(bis);\n        script=pullInSource(bis,bomEncoding);\n        realEncoding=getEncodingFromXMLDirective(script);\n      }\n  finally {\n        try {\n          in.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n    if (realEncoding != null && !realEncoding.equals(bomEncoding)) {\n      in=locateScriptFile(pathPart,pkgPart,namePart);\n      if (in != null) {\n        try {\n          BufferedInputStream bis=new BufferedInputStream(in);\n          getEncodingFromBOM(bis);\n          script=pullInSource(bis,realEncoding);\n        }\n  finally {\n          try {\n            in.close();\n          }\n catch (          IOException e) {\n          }\n        }\n      }\n    }\n  }\n catch (  FileNotFoundException fnf) {\n    fnf.printStackTrace();\n  }\n  return script;\n}"}
{"ids": "82947", "raw_code": "@PrePersist public void prePersist(){\n  lockTime=System.currentTimeMillis();\n}"}
{"ids": "4992", "raw_code": "public LibPadstack add(String p_name,ShapeConvex[] p_shapes,boolean p_attach_allowed,boolean p_placed_absolute){\n  int pad_no=count() + 1;\n  LibPadstack new_padstack=new LibPadstack(p_name,pad_no,p_shapes,p_attach_allowed,p_placed_absolute);\n  padstack_list.add(new_padstack);\n  return new_padstack;\n}"}
{"ids": "13201", "raw_code": "@Override public void startContentModel(String elementName,Augmentations augs) throws XNIException {\n  if (fValidation) {\n    fDTDElementDeclName=elementName;\n    fMixedElementTypes.clear();\n  }\n  if (fDTDGrammar != null)   fDTDGrammar.startContentModel(elementName,augs);\n  if (fDTDContentModelHandler != null) {\n    fDTDContentModelHandler.startContentModel(elementName,augs);\n  }\n}"}
{"ids": "11183", "raw_code": "public OMRangeRings(LatLonPoint center,double radius,Length units,int nverts){\n  super(center,radius,units,nverts);\n  centerPoint=createCenterPoint();\n  form.setMaximumFractionDigits(2);\n}"}
{"ids": "33420", "raw_code": "public static InputSource createInputSource(String s){\n  try {\n    return new InputSource(new ByteArrayInputStream(s.getBytes(\"UTF-8\")));\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "78009", "raw_code": "public static String toDebugString(final long socketIdentifier){\n  final int ipBits=(int)socketIdentifier;\n  final int port=extractPortNumber(socketIdentifier);\n  final int inode=(int)(socketIdentifier >> 48);\n  return Integer.toHexString(ipBits) + \":\" + port+ \"/\"+ inode;\n}"}
{"ids": "78355", "raw_code": "public static String readFromFile(final File path) throws IOException {\n  FileInputStream fis=null;\n  try {\n    fis=new FileInputStream(path);\n    return readFromFile(fis);\n  }\n  finally {\n    if (fis != null) {\n      fis.close();\n    }\n  }\n}"}
{"ids": "16943", "raw_code": "public static int XToTileX(int x,int tileGridXOffset,int tileWidth){\n  x-=tileGridXOffset;\n  if (x < 0) {\n    x+=1 - tileWidth;\n  }\n  return x / tileWidth;\n}"}
{"ids": "69681", "raw_code": "public Input(String name,@InputType int type,@Alignment int align,Connection connection){\n  mName=name;\n  mType=type;\n  mAlign=align;\n  mConnection=connection;\n  if (mConnection != null) {\n    mConnection.setInput(this);\n  }\n}"}
{"ids": "873", "raw_code": "public static BshClassManager createClassManager(Interpreter interpreter){\n  BshClassManager manager;\n  if (Capabilities.classExists(\"java.lang.ref.WeakReference\") && Capabilities.classExists(\"java.util.HashMap\") && Capabilities.classExists(\"bsh.classpath.ClassManagerImpl\"))   try {\n    Class clas=Class.forName(\"bsh.classpath.ClassManagerImpl\");\n    manager=(BshClassManager)clas.newInstance();\n  }\n catch (  Exception e) {\n    throw new InterpreterError(\"Error loading classmanager: \" + e);\n  }\n else   manager=new BshClassManager();\n  if (interpreter == null)   interpreter=new Interpreter();\n  manager.declaringInterpreter=interpreter;\n  return manager;\n}"}
{"ids": "71953", "raw_code": "public void requestLastLoginTime(){\n  operations.add(PasswordPolicyStateOperationType.GET_LAST_LOGIN_TIME);\n}"}
{"ids": "41374", "raw_code": "public static Stream<String> wordsOf(String text){\n  requireNonNull(text);\n  return WORDS.splitAsStream(text);\n}"}
{"ids": "21092", "raw_code": "public Joiner match(String field,Object... value){\n  return match(field,Arrays.asList(value));\n}"}
{"ids": "54649", "raw_code": "private String removeYouTubeMarkup(String plot){\n  if (plot == null)   return null;\n  return plot.replaceAll(\"\\\\[.*\\\\]\",\"\");\n}"}
{"ids": "20260", "raw_code": "private String createDashArrayString(List<Float> dashesArray){\n  StringBuilder sb=new StringBuilder();\n  if (dashesArray != null) {\n    int index=0;\n    for (    Float value : dashesArray) {\n      String str=Float.toString(value);\n      if (str.endsWith(\".0\")) {\n        sb.append(value.intValue());\n      }\n else {\n        sb.append(value);\n      }\n      if (index < dashesArray.size() - 1) {\n        sb.append(\" \");\n      }\n      index++;\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "71339", "raw_code": "public long position(java.sql.Blob pattern,long start) throws SQLException {\n  return position(pattern.getBytes(0,(int)pattern.length()),start);\n}"}
{"ids": "33973", "raw_code": "protected synchronized T load() throws IOException {\n  long genLoaded=-1;\n  IOException ioe=null;\n  List<String> genFiles=new ArrayList<String>();\n  String[] files;\n  try {\n    files=dir.listAll();\n  }\n catch (  IOException ioe2) {\n    return null;\n  }\n  T loaded=null;\n  for (  String file : files) {\n    if (file.startsWith(prefix)) {\n      long gen=Long.parseLong(file.substring(prefix.length()));\n      if (genLoaded == -1 || gen > genLoaded) {\n        genFiles.add(file);\n        IndexInput in=dir.openInput(file,IOContext.DEFAULT);\n        try {\n          loaded=loadOne(in);\n        }\n catch (        IOException ioe2) {\n          if (ioe == null) {\n            ioe=ioe2;\n          }\n        }\n finally {\n          in.close();\n        }\n        genLoaded=gen;\n      }\n    }\n  }\n  if (genLoaded == -1) {\n    if (ioe != null) {\n      throw ioe;\n    }\n  }\n else {\n    if (genFiles.size() > 1) {\n      String curFileName=prefix + genLoaded;\n      for (      String file : genFiles) {\n        long gen=Long.parseLong(file.substring(prefix.length()));\n        if (canDelete(gen) && !curFileName.equals(file)) {\n          dir.deleteFile(file);\n        }\n      }\n    }\n    nextWriteGen=1 + genLoaded;\n  }\n  return loaded;\n}"}
{"ids": "12262", "raw_code": "public static String readLine(InputStream in,String charset) throws IOException {\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  while (true) {\n    int b=in.read();\n    if (b == -1) {\n      if (baos.size() == 0) {\n        return null;\n      }\n else {\n        break;\n      }\n    }\n    if (b == '\\n') {\n      break;\n    }\n    if (b != '\\r') {\n      baos.write(b);\n      continue;\n    }\n    int b2=in.read();\n    if (b2 == -1) {\n      baos.write(b);\n      break;\n    }\n    if (b2 == '\\n') {\n      break;\n    }\n    baos.write(b);\n    baos.write(b2);\n  }\n  return baos.toString(charset);\n}"}
{"ids": "3150", "raw_code": "public boolean checkTableExists(TableDefinition table){\n  String column=null;\n  for (  FieldDefinition field : table.getFields()) {\n    if (column == null) {\n      column=field.getName();\n    }\n else     if (field.isPrimaryKey()) {\n      column=field.getName();\n      break;\n    }\n  }\n  String sql=\"SELECT \" + column + \" FROM \"+ table.getFullName()+ \" WHERE \"+ column+ \" <> \"+ column;\n  DataReadQuery query=new DataReadQuery(sql);\n  query.setMaxRows(1);\n  try {\n    session.executeQuery(query);\n    return true;\n  }\n catch (  Exception notFound) {\n    return false;\n  }\n finally {\n  }\n}"}
{"ids": "43110", "raw_code": "private int processColon(int length){\n  if (_hasScheme) {\n    if (!readUserPass(length) && _buffer.length() > 0) {\n      _reader.goBack();\n      _buffer.delete(_buffer.length() - 1,_buffer.length());\n      int backtrackOnFail=_reader.getPosition() - _buffer.length() + length;\n      if (!readDomainName(_buffer.substring(length))) {\n        _reader.seek(backtrackOnFail);\n        readEnd(ReadEndState.InvalidUrl);\n      }\n      length=0;\n    }\n  }\n else   if (readScheme() && _buffer.length() > 0) {\n    _hasScheme=true;\n    length=_buffer.length();\n  }\n else   if (_buffer.length() > 0 && _options.hasFlag(UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN) && _reader.canReadChars(1)) {\n    _reader.goBack();\n    _buffer.delete(_buffer.length() - 1,_buffer.length());\n    readDomainName(_buffer.toString());\n  }\n else {\n    readEnd(ReadEndState.InvalidUrl);\n    length=0;\n  }\n  return length;\n}"}
{"ids": "27616", "raw_code": "public void compress(byte[] bytes,int off,int len,OutputStream os){\n  try {\n    os.write(bytes,off,len);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "27443", "raw_code": "public void assertNotJoined(final UUID serviceId){\n  m_triggers.add(new QuorumEventInvariant(QuorumEventEnum.SERVICE_JOIN,serviceId));\n  if (isMember(m_quorum.getJoined(),serviceId))   broken();\n}"}
{"ids": "5103", "raw_code": "public final void print(String value){\n  try {\n    Element rootElement=workDoc.getDefaultRootElement();\n    int deleteLines=rootElement.getElementCount() - linesMax;\n    for (int index=0; index < deleteLines; index++) {\n      Element elem=rootElement.getElement(0);\n      workDoc.remove(elem.getStartOffset(),elem.getEndOffset());\n    }\n    workDoc.insertString(workDoc.getLength(),value,null);\n    textArea.setCaretPosition(workDoc.getLength());\n  }\n catch (  Exception exc) {\n    exc.printStackTrace();\n  }\n}"}
{"ids": "83509", "raw_code": "private void addConnectionGroups(Collection<ConnectionGroup> connectionGroups){\n  for (  ConnectionGroup connectionGroup : connectionGroups) {\n    APIConnectionGroup parent=retrievedGroups.get(connectionGroup.getParentIdentifier());\n    if (parent != null) {\n      Collection<APIConnectionGroup> children=parent.getChildConnectionGroups();\n      if (children == null) {\n        children=new ArrayList<APIConnectionGroup>();\n        parent.setChildConnectionGroups(children);\n      }\n      APIConnectionGroup apiConnectionGroup=new APIConnectionGroup(connectionGroup);\n      retrievedGroups.put(connectionGroup.getIdentifier(),apiConnectionGroup);\n      children.add(apiConnectionGroup);\n    }\n else     logger.debug(\"Connection group \\\"{}\\\" cannot be added to the tree: parent \\\"{}\\\" does not actually exist.\",connectionGroup.getIdentifier(),connectionGroup.getParentIdentifier());\n  }\n}"}
{"ids": "53518", "raw_code": "public void loadMap(InputStream input,String groupID) throws Exception {\n  shapes=parser.parse(input,groupID);\n  boundaries=new ArrayList<Rect2D>(shapes.size());\n  for (  IGeometric2D shape : shapes) {\n    boundaries.add(shape.getBounds());\n  }\n}"}
{"ids": "39460", "raw_code": "public void addDecoration(LineDecoration decoration){\n  if (decoration != null) {\n    decorations.add(decoration);\n  }\n}"}
{"ids": "59705", "raw_code": "private String parseLinkTitle(){\n  String title=match(LINK_TITLE);\n  if (title != null) {\n    return Escaping.unescapeString(title.substring(1,title.length() - 1));\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "53241", "raw_code": "@Override public void put(double val){\n  final double nn=this.n + 1.0;\n  final double delta=val - m1;\n  final double delta_nn=delta / nn;\n  final double delta_nn2=delta_nn * delta_nn;\n  final double inc=delta * delta_nn * this.n;\n  m4+=inc * delta_nn2 * (nn * nn - 3. * nn + 3.) + 6. * delta_nn2 * m2 - 4. * delta_nn * m3;\n  m3+=inc * delta_nn * (nn - 2) - 3. * delta_nn * m2;\n  m2+=inc;\n  m1+=delta_nn;\n  n=nn;\n  min=Math.min(min,val);\n  max=Math.max(max,val);\n}"}
{"ids": "52636", "raw_code": "public void close(){\n  this.closed=true;\n}"}
{"ids": "75742", "raw_code": "public int size(){\n  return m_RecentItems.size();\n}"}
{"ids": "85408", "raw_code": "public Destructurer(final Tree.Pattern that,final GenerateJsVisitor gen,final Set<Declaration> directAccess,final String expvar,boolean first,final boolean forAssert){\n  this.gen=gen;\n  jsw=gen == null ? null : gen.out;\n  names=gen == null ? null : gen.getNames();\n  this.directAccess=directAccess;\n  this.expvar=expvar;\n  this.first=first;\n  this.forAssert=forAssert;\n  that.visit(this);\n  if (jsw != null && !attribs.isEmpty()) {\n    for (    Value attr : attribs) {\n      jsw.write(\";\",names.self((TypeDeclaration)attr.getContainer()),\".\",names.name(attr),\"=\",names.name(attr));\n    }\n  }\n}"}
{"ids": "13847", "raw_code": "@SuppressWarnings(\"unused\") public void handleTblSubConfigButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {\n  submitCycle=true;\n  CCActionTable tbl=(CCActionTable)getChild(TBL_SUB_CONFIG);\n  tbl.restoreStateData();\n  CCActionTableModel tblModel=(CCActionTableModel)tbl.getModel();\n  Integer[] selected=tblModel.getSelectedRows();\n  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);\n  List list=szCache.getSerializedObj();\n  Set<String> names=new HashSet<>(selected.length * 2);\n  for (  Integer index : selected) {\n    SMSubConfig sc=(SMSubConfig)list.get(index);\n    names.add(sc.getName());\n  }\n  try {\n    AbstractAuditModel model=(AbstractAuditModel)getModel();\n    model.deleteEventHandles(names);\n    if (selected.length == 1) {\n      setInlineAlertMessage(TYPE_INFO,INFORMATION_MESSAGE,\"event.handler.message.deleted\");\n    }\n else {\n      setInlineAlertMessage(TYPE_INFO,INFORMATION_MESSAGE,\"event.handler.message.deleted.plural\");\n    }\n  }\n catch (  AMConsoleException e) {\n    setInlineAlertMessage(TYPE_ERROR,ERROR_MESSAGE,e.getMessage());\n  }\n  submitCycle=false;\n  forwardTo();\n}"}
{"ids": "43022", "raw_code": "private double normVector(double[] z){\n  double sum=0;\n  for (int i=0; i < problem.getNumberOfObjectives(); i++) {\n    sum+=z[i] * z[i];\n  }\n  return Math.sqrt(sum);\n}"}
{"ids": "52111", "raw_code": "public int hashCode(){\n  return 127 * factor.hashCode() + lag;\n}"}
{"ids": "52071", "raw_code": "public void deserializeArchivedVersions() throws RuntimeException {\n  System.out.println(\"Deserializing archived instances in \" + getArchiveDirectory() + \".\");\n  File archive=new File(getArchiveDirectory());\n  if (!archive.exists() || !archive.isDirectory()) {\n    return;\n  }\n  String[] listing=archive.list();\n  for (  String archiveName : listing) {\n    if (!(archiveName.endsWith(\".zip\"))) {\n      continue;\n    }\n    try {\n      File file=new File(getArchiveDirectory(),archiveName);\n      ZipFile zipFile=new ZipFile(file);\n      ZipEntry entry=zipFile.getEntry(\"class_fields.ser\");\n      InputStream inputStream=zipFile.getInputStream(entry);\n      ObjectInputStream objectIn=new ObjectInputStream(inputStream);\n      Map<String,List<String>> classFields=(Map<String,List<String>>)objectIn.readObject();\n      zipFile.close();\n      for (      String className : classFields.keySet()) {\n        List<String> fieldNames=classFields.get(className);\n        Class<?> clazz=Class.forName(className);\n        ObjectStreamClass streamClass=ObjectStreamClass.lookup(clazz);\n        if (streamClass == null) {\n          System.out.println();\n        }\n        for (        String fieldName : fieldNames) {\n          assert streamClass != null;\n          ObjectStreamField field=streamClass.getField(fieldName);\n          if (field == null) {\n            throw new RuntimeException(\"Field '\" + fieldName + \"' was dropped from class '\"+ className+ \"' as a serializable field! Please \"+ \"put it back!!!\"+ \"\\nIt used to be in \"+ className+ \" in this archive: \"+ archiveName+ \".\");\n          }\n        }\n      }\n    }\n catch (    ClassNotFoundException e) {\n      throw new RuntimeException(\"Could not read class_fields.ser in archive + \" + archiveName + \" .\",e);\n    }\ncatch (    IOException e) {\n      throw new RuntimeException(\"Problem reading archive\" + archiveName + \"; see cause.\",e);\n    }\n    System.out.println(\"...Deserializing instances in \" + archiveName + \"...\");\n    ZipEntry zipEntry=null;\n    try {\n      File file=new File(getArchiveDirectory(),archiveName);\n      FileInputStream in=new FileInputStream(file);\n      ZipInputStream zipinputstream=new ZipInputStream(in);\n      while ((zipEntry=zipinputstream.getNextEntry()) != null) {\n        if (!zipEntry.getName().endsWith(\".ser\")) {\n          continue;\n        }\n        ObjectInputStream objectIn=new ObjectInputStream(zipinputstream);\n        objectIn.readObject();\n        zipinputstream.closeEntry();\n      }\n      zipinputstream.close();\n    }\n catch (    ClassNotFoundException e) {\n      throw new RuntimeException(\"Could not read object zipped file \" + zipEntry.getName() + \" in archive \"+ archiveName+ \". \"+ \"Perhaps the class was renamed, moved to another package, or \"+ \"removed. In any case, please put it back where it was.\",e);\n    }\ncatch (    IOException e) {\n      throw new RuntimeException(\"Problem reading archive\" + archiveName + \"; see cause.\",e);\n    }\n  }\n  System.out.println(\"Finished deserializing archived instances.\");\n}"}
{"ids": "71177", "raw_code": "private void convertMaximalToMinimalEdgeRings(List ringEdges){\n  for (Iterator i=ringEdges.iterator(); i.hasNext(); ) {\n    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next();\n    long label=de.getLabel();\n    List intNodes=findIntersectionNodes(de,label);\n    if (intNodes == null)     continue;\n    for (Iterator iNode=intNodes.iterator(); iNode.hasNext(); ) {\n      Node node=(Node)iNode.next();\n      computeNextCCWEdges(node,label);\n    }\n  }\n}"}
{"ids": "86502", "raw_code": "public byte[] generateMAC(byte commandClass,byte[] ciphertext,byte sendingNode,byte receivingNode,byte[] iv) throws GeneralSecurityException {\n  traceHex(\"generateMAC ciphertext\",ciphertext);\n  traceHex(\"generateMAC iv\",iv);\n  int bufferSize=ciphertext.length + 4;\n  byte[] buffer=new byte[bufferSize];\n  byte[] tempAuth=new byte[16];\n  buffer[0]=commandClass;\n  buffer[1]=sendingNode;\n  buffer[2]=receivingNode;\n  buffer[3]=(byte)ciphertext.length;\n  System.arraycopy(ciphertext,0,buffer,4,ciphertext.length);\n  traceHex(\"generateMAC NetworkKey\",networkKey.getEncoded());\n  traceHex(\"generateMAC Raw Auth (minus IV)\",buffer);\n  Cipher encryptCipher=Cipher.getInstance(\"AES/ECB/NoPadding\");\n  encryptCipher.init(Cipher.ENCRYPT_MODE,authKey);\n  tempAuth=encryptCipher.doFinal(iv);\n  traceHex(\"generateMAC tmp1\",tempAuth);\n  byte[] encpck=new byte[16];\n  int block=0;\n  for (int i=0; i < bufferSize; i++) {\n    encpck[block]=buffer[i];\n    block++;\n    if (block == 16) {\n      for (int j=0; j < 16; j++) {\n        tempAuth[j]=(byte)(encpck[j] ^ tempAuth[j]);\n        encpck[j]=0;\n      }\n      Arrays.fill(encpck,(byte)0);\n      block=0;\n      encryptCipher.init(Cipher.ENCRYPT_MODE,authKey);\n      tempAuth=encryptCipher.doFinal(tempAuth);\n    }\n  }\n  if (block > 0) {\n    for (int i=0; i < 16; i++) {\n      tempAuth[i]=(byte)(encpck[i] ^ tempAuth[i]);\n    }\n    encryptCipher.init(Cipher.ENCRYPT_MODE,authKey);\n    tempAuth=encryptCipher.doFinal(tempAuth);\n  }\n  traceHex(\"generateMAC Computed Auth\",tempAuth);\n  byte[] mac=new byte[8];\n  System.arraycopy(tempAuth,0,mac,0,8);\n  return mac;\n}"}
{"ids": "23037", "raw_code": "public void removeEventListener(ImageSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {\n  if (mApi == null) {\n    throw new RcsServiceNotAvailableException();\n  }\n  try {\n    WeakReference<IImageSharingListener> weakRef=mImageSharingListeners.remove(listener);\n    if (weakRef == null) {\n      return;\n    }\n    IImageSharingListener rcsListener=weakRef.get();\n    if (rcsListener != null) {\n      mApi.removeEventListener2(rcsListener);\n    }\n  }\n catch (  Exception e) {\n    RcsIllegalArgumentException.assertException(e);\n    throw new RcsGenericException(e);\n  }\n}"}
{"ids": "64769", "raw_code": "private void updateWaveFileSize() throws IOException {\n  ByteBuffer buffer=getUnsignedIntegerBuffer(mFileChannel.size() - 8);\n  mFileChannel.write(buffer,4);\n  ByteBuffer buffer2=getUnsignedIntegerBuffer(mFileChannel.size() - 44);\n  mFileChannel.write(buffer2,40);\n}"}
{"ids": "3493", "raw_code": "public boolean matches(String sa){\n  if (_length != sa.length())   return false;\n  char[] buffer=_buffer;\n  int offset=_offset;\n  for (int i=_length - 1; i >= 0; i--)   if (_buffer[_offset + i] != sa.charAt(i))   return false;\n  return true;\n}"}
{"ids": "20696", "raw_code": "public double computeMaxClassValueUsingPercentFactorPerSeries(DefaultChartData chartData,String[] series,double[] percentFactorPerSeries){\n  double maxValue=0;\n  for (  String className : chartData.getClassNamesIncludingDisabled()) {\n    double total=0;\n    for (int i=0; i < series.length; i++) {\n      String seriesName=series[i];\n      if (transposedHeightsAdditive)       total+=percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className);\n else       total=Math.max(total,percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className));\n    }\n    if (total > maxValue) {\n      maxValue=total;\n    }\n  }\n  return 1.1 * maxValue;\n}"}
{"ids": "64859", "raw_code": "public int addChannel(Channel channel){\n  int index=-1;\nswitch (channel.getChannelType()) {\ncase STANDARD:\n    mChannels.add(channel);\n  index=mChannels.size() - 1;\nfireTableRowsInserted(index,index);\nbreak;\ncase TRAFFIC:\nmTrafficChannels.add(channel);\nindex=mChannels.size() - 1;\nbreak;\ndefault :\nbreak;\n}\nbroadcast(new ChannelEvent(channel,Event.NOTIFICATION_ADD));\nif (channel.getEnabled()) {\nbroadcast(new ChannelEvent(channel,Event.REQUEST_ENABLE));\n}\nreturn index;\n}"}
{"ids": "10248", "raw_code": "public static String join(Object... array){\n  if (array == null) {\n    return null;\n  }\n  if (array.length == 0) {\n    return StringPool.EMPTY;\n  }\n  if (array.length == 1) {\n    return String.valueOf(array[0]);\n  }\n  final StringBuilder sb=new StringBuilder(array.length * 16);\n  for (int i=0; i < array.length; i++) {\n    sb.append(array[i]);\n  }\n  return sb.toString();\n}"}
{"ids": "55748", "raw_code": "public boolean hasTrait(final StoreTrait storeTrait){\n  final Set<StoreTrait> traits=getTraits();\n  return null != traits && traits.contains(storeTrait);\n}"}
{"ids": "66595", "raw_code": "public void createSupply(MWMInOutBoundLine boundline,BigDecimal qtySupply){\n  MProduct product=MProduct.get(boundline.getCtx(),boundline.getM_Product_ID());\n  if (product.isBOM()) {\n    createMO(boundline,product,qtySupply);\n  }\n else   if (product.isPurchased()) {\n    createRequisition(boundline,product,qtySupply);\n  }\n}"}
{"ids": "26759", "raw_code": "public int size(){\n  return parameters.size();\n}"}
{"ids": "83719", "raw_code": "public void readData(DataInput din) throws IOException {\n  reference=din.readUnsignedShort();\n}"}
{"ids": "62722", "raw_code": "public float dotProduct(DenseVector df){\n  float res=0.0f;\n  for (int i=0; i < Math.min(size,df.getLength()); i++) {\n    res+=u[i] * df.u[i];\n  }\n  return res;\n}"}
{"ids": "22773", "raw_code": "public static double stDev(final List<Double> list){\n  return Math.sqrt(variance(list));\n}"}
{"ids": "10191", "raw_code": "public void trimToSize(){\n  if (size < array.length) {\n    int[] olddata=array;\n    array=new int[size];\n    System.arraycopy(olddata,0,array,0,size);\n  }\n}"}
{"ids": "1423", "raw_code": "public static int compare(Date left,boolean right){\n  return compare(left,right ? 1D : 0D);\n}"}
{"ids": "27279", "raw_code": "private IBindingSet[] decodeNextChunk() throws IOException {\n  if (nsolutions == solutionSetCount) {\n    if (log.isDebugEnabled())     log.debug(\"Read solutionSet: name=\" + name + \", solutionSetSize=\"+ nsolutions);\n    return null;\n  }\n  in.readInt();\n  final int chunkSize=in.readInt();\n  final int byteLength=in.readInt();\n  final byte[] a=new byte[byteLength];\n  in.readFully(a);\n  final DataInputBuffer buf=new DataInputBuffer(a);\n  final IBindingSet[] t=new IBindingSet[chunkSize];\n  for (int i=0; i < chunkSize; i++) {\n    t[i]=decoder.decodeSolution(buf,true);\n    if (log.isTraceEnabled())     log.trace(\"Read: name=\" + name + \", solution=\"+ t[i]);\n  }\n  nsolutions+=chunkSize;\n  if (log.isTraceEnabled())   log.trace(\"Read chunk: name=\" + name + \", chunkSize=\"+ chunkSize+ \", bytesRead=\"+ (SolutionSetStreamEncoder.CHUNK_HEADER_SIZE + byteLength)+ \", solutionSetSize=\"+ nsolutions);\n  return t;\n}"}
{"ids": "43578", "raw_code": "public UDPClientSocket(Logger logger){\n  this.logger=logger;\n  try {\n    socket=new DatagramSocket();\n    socket.setBroadcast(true);\n    socket.setSendBufferSize(1024 * 1024 * 8);\n    socket.setReceiveBufferSize(1024 * 1024 * 8);\n    socket.setSoTimeout(1);\n  }\n catch (  SocketException e) {\n    logger.severe(\"**** FAILED TO CREATE SOCKET!\");\n    logger.severe(\"java.net.SocketException: \" + e.getMessage());\n    System.exit(1);\n  }\n}"}
{"ids": "32563", "raw_code": "public void multiplyAllValuesBy(final double multiplyBy,final int RoundType){\n  for (  final T t : keySet()) {\n    double val=mapValues.get(t);\nswitch (RoundType) {\ncase 1:\n      val=Math.floor(val * multiplyBy);\n    break;\ncase 2:\n  val=Math.round(val * multiplyBy);\nbreak;\ncase 3:\nval=Math.ceil(val * multiplyBy);\nbreak;\ndefault :\nval=val * multiplyBy;\nbreak;\n}\nput(t,(int)val);\n}\n}"}
{"ids": "81282", "raw_code": "protected void computeFolderChildren(File folder,boolean isIncluded,String[] pkgName,ArrayList vChildren,char[][] inclusionPatterns,char[][] exclusionPatterns) throws JavaModelException {\n  if (isIncluded) {\n    IPackageFragment pkg=getPackageFragment(pkgName);\n    vChildren.add(pkg);\n  }\n  try {\n    File[] members=folder.listFiles();\n    boolean hasIncluded=isIncluded;\n    int length=members.length;\n    if (length > 0) {\n      JavaProject javaProject=(JavaProject)getJavaProject();\n      String sourceLevel=javaProject.getOption(JavaCore.COMPILER_SOURCE,true);\n      String complianceLevel=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,true);\n      for (int i=0; i < length; i++) {\n        File member=members[i];\n        String memberName=member.getName();\n        if (member.isDirectory()) {\n          if (Util.isValidFolderNameForPackage(memberName,sourceLevel,complianceLevel)) {\n            String[] newNames=Util.arrayConcat(pkgName,manager.intern(memberName));\n            boolean isMemberIncluded=false;\n            computeFolderChildren(member,isMemberIncluded,newNames,vChildren,inclusionPatterns,exclusionPatterns);\n          }\n        }\n else {\n          if (!hasIncluded && Util.isValidCompilationUnitName(memberName,sourceLevel,complianceLevel)) {\n            hasIncluded=true;\n            IPackageFragment pkg=getPackageFragment(pkgName);\n            vChildren.add(pkg);\n          }\n        }\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    throw new JavaModelException(e,IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST);\n  }\ncatch (  CoreException e) {\n    throw new JavaModelException(e);\n  }\n}"}
{"ids": "343", "raw_code": "public static String quote(File input){\n  return quote(input.getAbsolutePath());\n}"}
{"ids": "31994", "raw_code": "private void readFromNet() throws IgniteCheckedException {\n  try {\n    inNetBuf.clear();\n    int read=ch.read(inNetBuf);\n    if (read == -1)     throw new IgniteCheckedException(\"Failed to read remote node response (connection closed).\");\n  }\n catch (  IOException e) {\n    throw new IgniteCheckedException(\"Failed to write byte to socket.\",e);\n  }\n}"}
{"ids": "56370", "raw_code": "synchronized void clear(){\n  maps=new Maps();\n  tombstones.clear();\n  ramBytesUsedCurrent.set(0);\n  if (mgr != null) {\n    mgr.removeListener(this);\n    mgr=null;\n  }\n}"}
{"ids": "47771", "raw_code": "public synchronized void removeConsumer(ImageConsumer ic){\n  ics.removeElement(ic);\n}"}
{"ids": "70948", "raw_code": "private void updateAperture(int newValue,long now){\n  int previous=targetAperture;\n  targetAperture=newValue;\n  targetAperture=Math.max(minAperture,targetAperture);\n  int maxAperture=Math.min(this.maxAperture,activeSockets.size() + activeFactories.size());\n  targetAperture=Math.min(maxAperture,targetAperture);\n  lastApertureRefresh=now;\n  pendings.reset((minPendings + maxPendings) / 2);\n  if (targetAperture != previous) {\n    logger.debug(\"Current pending={}, new target={}, previous target={}\",pendings.value(),targetAperture,previous);\n  }\n}"}
{"ids": "3544", "raw_code": "public I buildInvocation(Object protocolKey,I invocation) throws ConfigException {\n  Objects.requireNonNull(invocation);\n  invocation=buildInvocation(invocation);\n  LruCache<Object,I> invocationCache=_invocationCache;\n  if (invocationCache != null) {\n    I oldInvocation;\n    oldInvocation=invocationCache.get(protocolKey);\n    if (oldInvocation != null && !oldInvocation.isModified()) {\n      return oldInvocation;\n    }\n    if (invocation.getURLLength() < _maxURLLength) {\n      invocationCache.put(protocolKey,invocation);\n    }\n  }\n  return invocation;\n}"}
{"ids": "64852", "raw_code": "public static BinaryMessage checkAndCorrect(BinaryMessage message,int startIndex){\n  boolean parityError=message.cardinality() % 2 != 0;\n  int syndrome=getSyndrome(message,startIndex);\n  if (syndrome == 0) {\n    if (parityError) {\n      message.flip(startIndex + 23);\n    }\n    message.setCRC(CRC.PASSED);\n    return message;\n  }\n  int original=message.getInt(0,22);\n  int index=-1;\n  int syndromeWeight=3;\n  int errors=0;\n  while (index < 23) {\n    if (index != -1) {\n      if (index > 0) {\n        message.flip(index - 1);\n      }\n      message.flip(index);\n      syndromeWeight=2;\n    }\n    syndrome=getSyndrome(message,startIndex);\n    if (syndrome > 0) {\n      for (int i=0; i < 23; i++) {\n        errors=Integer.bitCount(syndrome);\n        if (errors <= syndromeWeight) {\n          message.xor(12,11,syndrome);\n          message.rotateRight(i,startIndex,startIndex + 22);\n          if (index >= 0) {\n            errors++;\n          }\n          int corrected=message.getInt(0,22);\n          if (Integer.bitCount(original ^ corrected) > 3) {\n            message.setCRC(CRC.FAILED_CRC);\n            return message;\n          }\n          message.setCRC(CRC.PASSED);\n          return message;\n        }\n else {\n          message.rotateLeft(startIndex,startIndex + 22);\n          syndrome=getSyndrome(message,startIndex);\n        }\n      }\n      index++;\n    }\n  }\n  message.setCRC(CRC.FAILED_CRC);\n  return message;\n}"}
{"ids": "7334", "raw_code": "public static List<Object> validateAndEvaluate(String viewName,StatementContext statementContext,List<ExprNode> expressions) throws ViewParameterException {\n  List<Object> results=new ArrayList<Object>();\n  int expressionNumber=0;\n  StreamTypeService streamTypeService=new StreamTypeServiceImpl(statementContext.getEngineURI(),false);\n  for (  ExprNode expr : expressions) {\n    Object result=validateAndEvaluateExpr(viewName,statementContext,expr,streamTypeService,expressionNumber);\n    results.add(result);\n    expressionNumber++;\n  }\n  return results;\n}"}
{"ids": "60284", "raw_code": "@NotNull public static String parseRelativeDirectory(@NotNull String s) throws SvnBindException {\n  s=s.trim();\n  int length=s.length();\n  String result;\n  if (isUnescapedQuote(s,length - 1)) {\n    int index=lastUnescapedIndexOf(s,length - 1,'\"');\n    assertIndex(s,index,\"Could not find start quote\");\n    result=s.substring(index + 1,length - 1);\n  }\n else {\n    int index=lastUnescapedIndexOf(s,length,' ');\n    assertIndex(s,index,\"Could not find separating space\");\n    result=s.substring(index + 1);\n  }\n  return unescape(result);\n}"}
{"ids": "13852", "raw_code": "public void beginDisplay(DisplayEvent event) throws ModelControlException {\n  IdentitySubjectModel subjectModel=getSubjectModel();\n  PolicyModel model=(PolicyModel)getModel();\n  super.beginDisplay(event);\n  CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);\n  Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);\n  OptionList entityTypes=createOptionList(supportedEntityTypes);\n  entityTypes.add(0,\"policy.subject.select.identity.type\",\"\");\n  menu.setOptions(entityTypes);\n  menu.setValue(\"\");\n  CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);\n  child.restoreStateData();\n  OptionList selected=addRemoveModel.getSelectedOptionList();\n  OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));\n  child.resetStateData();\n  addRemoveModel.setAvailableOptionList(possible);\n}"}
{"ids": "25673", "raw_code": "private void decode64(ByteBuffer infile,LongArrayPointer a){\n  byte[] nbitplanes=new byte[N03];\n  byte[] tmagic=new byte[2];\n  infile.get(tmagic);\n  if (tmagic[0] != CODE_MAGIC[0] || tmagic[1] != CODE_MAGIC[1]) {\n    throw new RuntimeException(\"Compression error\");\n  }\n  this.nx=infile.getInt();\n  this.ny=infile.getInt();\n  this.scale=infile.getInt();\n  long sumall=infile.getLong();\n  infile.get(nbitplanes);\n  dodecode64(infile,a,nbitplanes);\n  a.set(0,sumall);\n}"}
{"ids": "63482", "raw_code": "private static void createScript() throws Exception {\n  Class.forName(\"org.h2.Driver\");\n  Connection conn=DriverManager.getConnection(\"jdbc:h2:mem:test\");\n  Statement stat=conn.createStatement();\n  stat.execute(\"CREATE TABLE TEST(NAME VARCHAR)\");\n  stat.execute(\"INSERT INTO TEST VALUES('Hello World')\");\n  stat.execute(\"SCRIPT TO 'script.sql'\");\n  stat.close();\n  conn.close();\n}"}
{"ids": "33645", "raw_code": "public void addJobGroupToNeverDelete(String group){\n  if (group != null)   jobGroupsToNeverDelete.add(group);\n}"}
{"ids": "3466", "raw_code": "@Override public void requestPollRead(){\n  try {\n    requestLoop();\n  }\n catch (  Exception e) {\n    log.log(Level.WARNING,e.toString(),e);\n  }\n}"}
{"ids": "56385", "raw_code": "public MultiMatchQueryBuilder field(String field){\n  fields.add(field);\n  return this;\n}"}
{"ids": "15872", "raw_code": "void encode(OutputStream os,boolean include_h) throws IOException {\n  int q=params.q;\n  os.write(getEncoded(f));\n  if (params.basisType == NTRUSigningKeyGenerationParameters.BASIS_TYPE_STANDARD) {\n    IntegerPolynomial fPrimeInt=fPrime.toIntegerPolynomial();\n    for (int i=0; i < fPrimeInt.coeffs.length; i++) {\n      fPrimeInt.coeffs[i]+=q / 2;\n    }\n    os.write(fPrimeInt.toBinary(q));\n  }\n else {\n    os.write(getEncoded(fPrime));\n  }\n  if (include_h) {\n    os.write(h.toBinary(q));\n  }\n}"}
{"ids": "32146", "raw_code": "private void signalNoAcks(){\n  lock.lock();\n  try {\n    allAcksRcvCond.signalAll();\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "80400", "raw_code": "private static String arrayToString(int[] array){\n  StringBuilder sb=new StringBuilder();\n  boolean first=true;\n  for (  int i : array) {\n    if (first) {\n      first=false;\n    }\n else {\n      sb.append(\" \");\n    }\n    sb.append(i);\n  }\n  return sb.toString();\n}"}
{"ids": "63175", "raw_code": "public static byte[] copy(byte[] source,byte[] target){\n  int len=source.length;\n  if (len > target.length) {\n    target=new byte[len];\n  }\n  System.arraycopy(source,0,target,0,len);\n  return target;\n}"}
{"ids": "9477", "raw_code": "public double greatCircleDistance(Location location){\n  if (location == null) {\n    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,\"Location\",\"greatCircleDistance\",\"missingLocation\"));\n  }\n  double lat1Radians=Math.toRadians(this.latitude);\n  double lon1Radians=Math.toRadians(this.longitude);\n  double lat2Radians=Math.toRadians(location.latitude);\n  double lon2Radians=Math.toRadians(location.longitude);\n  if (lat1Radians == lat2Radians && lon1Radians == lon2Radians) {\n    return 0;\n  }\n  double a=Math.sin((lat2Radians - lat1Radians) / 2.0);\n  double b=Math.sin((lon2Radians - lon1Radians) / 2.0);\n  double c=a * a + Math.cos(lat1Radians) * Math.cos(lat2Radians) * b* b;\n  double distanceRadians=2.0 * Math.asin(Math.sqrt(c));\n  return Double.isNaN(distanceRadians) ? 0 : distanceRadians;\n}"}
{"ids": "36418", "raw_code": "public void fireOperatorMoved(Operator operator){\n  List<Operator> list=new LinkedList<>();\n  list.add(operator);\n  fireOperatorsMoved(list);\n}"}
{"ids": "62015", "raw_code": "@Override public void modifyVariableId(String oldId,String newId){\n  if (baseVar.equals(oldId)) {\n    baseVar=newId.replace(\"'\",\"\");\n  }\n}"}
{"ids": "38254", "raw_code": "public AddUserFields(){\n  m_attributeSpecs=new ArrayList<AttributeSpec>();\n}"}
{"ids": "55088", "raw_code": "private Integer parseInt(String s,int flags){\n  if (convertColorNames(flags)) {\n    String c=Descriptor.convertColorName(s);\n    if (c != null) {\n      s=c;\n    }\n  }\n  try {\n    if (hasLeadingZeros(s)) {\n      return null;\n    }\n else {\n      return Integer.decode(s);\n    }\n  }\n catch (  NumberFormatException e) {\n    return null;\n  }\n}"}
{"ids": "75224", "raw_code": "protected void stopWorkers(Collection<WorkerThread> workers){\n  if (workers == null) {\n    workers=this.workers;\n  }\n  final Iterator<WorkerThread> iter=workers.iterator();\n  while (iter.hasNext()) {\n    final WorkerThread worker=iter.next();\n    if ((worker.getStatus() & (WorkerThread.sENDED | WorkerThread.sENDING)) == 0) {\n      worker.signalShutdown();\n      runningWorkers--;\n    }\n  }\n}"}
{"ids": "55051", "raw_code": "public ArrayList<Mapping> cloneFrame(){\n  if (stack[top] == null)   return null;\n  ArrayList<Mapping> clone=new ArrayList<Mapping>();\n  for (Mapping map=topOfFrame(); map != null; map=next()) {\n    clone.add(map);\n  }\n  return clone;\n}"}
{"ids": "53987", "raw_code": "private static int computeHashCode(int seed,Object... objects){\n  if (objects == null || objects.length == 0) {\n    return seed * HashCode.PRIME;\n  }\n  int hc=seed;\n  for (  Object object : objects) {\n    hc=HashCode.PRIME * hc;\n    if (object instanceof byte[]) {\n      hc+=Arrays.hashCode((byte[])object);\n    }\n else     if (object instanceof boolean[]) {\n      hc+=Arrays.hashCode((boolean[])object);\n    }\n else     if (object instanceof short[]) {\n      hc+=Arrays.hashCode((short[])object);\n    }\n else     if (object instanceof int[]) {\n      hc+=Arrays.hashCode((int[])object);\n    }\n else     if (object instanceof long[]) {\n      hc+=Arrays.hashCode((long[])object);\n    }\n else     if (object instanceof float[]) {\n      hc+=Arrays.hashCode((float[])object);\n    }\n else     if (object instanceof double[]) {\n      hc+=Arrays.hashCode((double[])object);\n    }\n else     if (object instanceof char[]) {\n      hc+=Arrays.hashCode((char[])object);\n    }\n else     if (object instanceof Object[]) {\n      hc+=Arrays.hashCode((Object[])object);\n    }\n else     if (object != null) {\n      hc+=object.hashCode();\n    }\n  }\n  return hc;\n}"}
{"ids": "61852", "raw_code": "protected float calculateStateTransitionPercentage(String name,boolean flapping){\n  int flapInterval=getFlapInterval(name);\n  LinkedList<Boolean> list=getFlaps(name);\n  float lowWeight=getFlapLowWeight(name);\n  float highWeight=getFlapHighWeight(name);\n  float weightRange=highWeight - lowWeight;\n  float result=0;\n  for (int i=list.size() - 1; i >= 0; i--) {\n    boolean thisFlap=list.get(i);\n    if (flapping != thisFlap) {\n      float weight=lowWeight + (weightRange * i / (flapInterval - 1));\n      result+=weight;\n    }\n  }\n  return result / flapInterval;\n}"}
{"ids": "84221", "raw_code": "public static String mangleName(Method method,boolean isFull){\n  StringBuffer sb=new StringBuffer();\n  sb.append(method.getName());\n  Class[] params=method.getParameterTypes();\n  for (int i=0; i < params.length; i++) {\n    sb.append('_');\n    sb.append(mangleClass(params[i],isFull));\n  }\n  return sb.toString();\n}"}
{"ids": "76748", "raw_code": "private void saveState(){\n  savedStartOffset=offsetAttribute.startOffset();\n  savedEndOffset=offsetAttribute.endOffset();\n  hasIllegalOffsets=(savedEndOffset - savedStartOffset != termAttribute.length());\n  savedType=typeAttribute.type();\n  if (savedBuffer.length < termAttribute.length()) {\n    savedBuffer=new char[ArrayUtil.oversize(termAttribute.length(),Character.BYTES)];\n  }\n  System.arraycopy(termAttribute.buffer(),0,savedBuffer,0,termAttribute.length());\n  iterator.text=savedBuffer;\n  hasSavedState=true;\n}"}
{"ids": "24895", "raw_code": "private void printOutDefinedIPs(List<String> definedIPs){\n  List<String> ipList=new ArrayList<>();\n  for (  String ip : definedIPs) {\n    if (ip.indexOf(':') != -1) {\n      ipList.add(\"|- IPv6: \" + ip);\n    }\n else {\n      ipList.add(\"|- IPv4: \" + ip);\n    }\n  }\n  Collections.sort(ipList);\n  for (  String ip : ipList) {\n    log.info(ip);\n  }\n}"}
{"ids": "2890", "raw_code": "private void disposeCodec(IoSession session){\n  disposeEncoder(session);\n  disposeDecoder(session);\n  disposeDecoderOut(session);\n}"}
{"ids": "84490", "raw_code": "@Override public Object parseObject(final String source,final ParsePosition pos){\n  return parser.parseObject(source,pos);\n}"}
{"ids": "83930", "raw_code": "@Override public default Stream<TimeSeriesCollection> stream(){\n  return StreamSupport.stream(spliterator(),false);\n}"}
{"ids": "59564", "raw_code": "private ManifestModInfo registerMod(File file,Manifest manifest){\n  ManifestModInfo mod=loadMod(file,manifest);\n  if (mod != null) {\n    if (idMap.containsKey(mod.getModID())) {\n      ModInfo mod2=idMap.get(mod.getModID());\n      duplicates.put(mod.getModID(),mod);\n      duplicates.put(mod.getModID(),mod2);\n      log.error(\"Duplicate mod IDs for files '%s' and '%s'\",mod.getModFile(),mod2.getModFile());\n    }\n else {\n      modList.add(mod);\n      idMap.put(mod.getModID(),mod);\n    }\n  }\n  return mod;\n}"}
{"ids": "7528", "raw_code": "protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){\n  List blocks=container.getBlocks();\n  Block b=(Block)blocks.get(0);\n  Size2D s=b.arrange(g2,RectangleConstraint.NONE);\n  b.setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));\n  return new Size2D(s.width,s.height);\n}"}
{"ids": "1834", "raw_code": "public static boolean isContentType(String contentType,Message message){\n  if (contentType == null) {\n    return message.getContentType() == null;\n  }\n else {\n    return contentType.equals(message.getContentType());\n  }\n}"}
{"ids": "12070", "raw_code": "private static X509Certificate generateCertificate(String dn,int days,String applicationUri,KeyPair keys,org.opcfoundation.ua.transport.security.KeyPair issuerKeys,String... hostNames) throws GeneralSecurityException, IOException {\n  PrivateKey privkey=keys.getPrivate();\n  PublicKey publicKey=keys.getPublic();\n  return generateCertificate(dn,days,applicationUri,publicKey,privkey,issuerKeys,hostNames);\n}"}
{"ids": "75050", "raw_code": "private String checkAllDependencies(HashMap<String,ModuleDescriptor> modlist){\n  for (  ModuleDescriptor md : modlist.values()) {\n    String res=checkDependencies(md,modlist);\n    if (!res.isEmpty()) {\n      return res;\n    }\n  }\n  return \"\";\n}"}
{"ids": "50987", "raw_code": "public static void checkDirectoryIsWriteable(@NotNull File directory) throws IOException {\n  while (!directory.exists() || !directory.isDirectory()) {\n    directory=directory.getParentFile();\n  }\n  if (!directory.canWrite()) {\n    throw new IOException(\"Cannot write to folder: \" + directory.getAbsolutePath());\n  }\n}"}
{"ids": "47572", "raw_code": "private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {\n  s.defaultWriteObject();\n}"}
{"ids": "68124", "raw_code": "protected String extractImportUrl(final Matcher matcher){\n  return matcher.group(INDEX_URL);\n}"}
{"ids": "47419", "raw_code": "@Override public boolean equals(Object that){\n  if (this == that) {\n    return true;\n  }\n  if (that == null) {\n    return false;\n  }\n  if (getClass() != that.getClass()) {\n    return false;\n  }\n  Collator other=(Collator)that;\n  return ((strength == other.strength) && (decmp == other.decmp));\n}"}
{"ids": "8808", "raw_code": "Type renameTypeAsType(Type type){\n  if (type == null) {\n    return null;\n  }\n  if (type.getSort() == Type.OBJECT) {\n    String in=type.getInternalName();\n    String newIn=renameInternalType(in);\n    if (newIn != in) {\n      return Type.getType(\"L\" + newIn + \";\");\n    }\n  }\n else   if (type.getSort() == Type.ARRAY) {\n    StringBuilder sb=new StringBuilder();\n    for (int n=type.getDimensions(); n > 0; n--) {\n      sb.append('[');\n    }\n    sb.append(renameType(type.getElementType()));\n    return Type.getType(sb.toString());\n  }\n  return type;\n}"}
{"ids": "67434", "raw_code": "@PreAuthorize(SpringEvalExpressions.HAS_AUTH_SYSTEM_ADMIN) @Override public ResponseEntity<Collection<String>> invalidateCaches(){\n  final Collection<String> cacheNames=cacheManager.getCacheNames();\n  LOGGER.info(\"Invalidating caches {}\",cacheNames);\n  cacheNames.forEach(null);\n  return ResponseEntity.ok(cacheNames);\n}"}
{"ids": "51073", "raw_code": "public static void drawSnapHorizontalMargin(ViewTransform transform,Graphics2D g,int x1,int x2,int y1,String text,boolean textOver){\n  Canvas c=new Canvas();\n  FontMetrics fm=c.getFontMetrics(sFont);\n  g.setFont(sFont);\n  int padding=transform.getSwingDimension(4);\n  Rectangle2D bounds=fm.getStringBounds(text,g);\n  int tw=(int)bounds.getWidth();\n  int offset=6 * CONNECTION_ARROW_SIZE;\n  if (x1 > x2) {\n    int temp=x1;\n    x1=x2;\n    x2=temp;\n  }\n  int w=((x2 - x1) - (tw + 2 * padding)) / 2;\n  if (w <= padding) {\n    g.drawLine(x1,y1,x2,y1);\n    if (textOver) {\n      offset=-1 * offset / 2;\n    }\n    g.drawString(text,x1 + w + padding,y1 + offset);\n  }\n else {\n    g.drawLine(x1,y1,x1 + w,y1);\n    g.drawLine(x2 - w,y1,x2,y1);\n    g.drawString(text,x1 + w + padding,(int)(y1 + (bounds.getHeight() / 2)));\n  }\n  g.drawLine(x1,y1 - CONNECTION_ARROW_SIZE,x1,y1 + CONNECTION_ARROW_SIZE);\n  g.drawLine(x2,y1 - CONNECTION_ARROW_SIZE,x2,y1 + CONNECTION_ARROW_SIZE);\n}"}
{"ids": "33821", "raw_code": "public static GenericRecord subsetRecord(GenericRecord record,Schema subsetSchema){\n  return subsetRecord(record,subsetSchema,null);\n}"}
{"ids": "40733", "raw_code": "static public void queueOperation(Context context,OperationInfo args){\n  args.calculateScheduledTime();\nsynchronized (sWorkQueue) {\n    sWorkQueue.add(args);\n    sWorkQueue.notify();\n  }\n  context.startService(new Intent(context,AsyncQueryServiceHelper.class));\n}"}
{"ids": "5485", "raw_code": "private static Cell[] interpret(String string){\n  Cell[] cells=new Cell[9];\n  for (int i=0; i < string.length(); i++) {\n    int dig=string.charAt(i) - '1';\n    int col=dig % 3;\n    int row=dig / 3;\n    cells[i]=new Cell(col,row);\n  }\n  return cells;\n}"}
{"ids": "65110", "raw_code": "public Shape transform(Shape shape){\n  Rectangle2D bounds=shape.getBounds2D();\n  Point2D center=new Point2D.Double(bounds.getCenterX(),bounds.getCenterY());\n  Point2D newCenter=transform(center);\n  double dx=newCenter.getX() - center.getX();\n  double dy=newCenter.getY() - center.getY();\n  AffineTransform at=AffineTransform.getTranslateInstance(dx,dy);\n  return at.createTransformedShape(shape);\n}"}
{"ids": "47724", "raw_code": "public void list(PrintWriter out,int indent){\n  for (int i=0; i < indent; i++) {\n    out.print(\" \");\n  }\n  out.println(this);\n}"}
{"ids": "48109", "raw_code": "public static RevocationStatus check(X509Certificate cert,X509Certificate issuerCert) throws IOException, CertPathValidatorException {\n  CertId certId=null;\n  URI responderURI=null;\n  try {\n    X509CertImpl certImpl=X509CertImpl.toImpl(cert);\n    responderURI=getResponderURI(certImpl);\n    if (responderURI == null) {\n      throw new CertPathValidatorException(\"No OCSP Responder URI in certificate\");\n    }\n    certId=new CertId(issuerCert,certImpl.getSerialNumberObject());\n  }\n catch (  CertificateException|IOException e) {\n    throw new CertPathValidatorException(\"Exception while encoding OCSPRequest\",e);\n  }\n  OCSPResponse ocspResponse=check(Collections.singletonList(certId),responderURI,issuerCert,null,null,Collections.<Extension>emptyList());\n  return (RevocationStatus)ocspResponse.getSingleResponse(certId);\n}"}
{"ids": "48517", "raw_code": "public static CompositeType forAlphaComposite(AlphaComposite ac){\nswitch (ac.getRule()) {\ncase AlphaComposite.CLEAR:\n    return Clear;\ncase AlphaComposite.SRC:\n  if (ac.getAlpha() >= 1.0f) {\n    return SrcNoEa;\n  }\n else {\n    return Src;\n  }\ncase AlphaComposite.DST:\nreturn Dst;\ncase AlphaComposite.SRC_OVER:\nif (ac.getAlpha() >= 1.0f) {\nreturn SrcOverNoEa;\n}\n else {\nreturn SrcOver;\n}\ncase AlphaComposite.DST_OVER:\nreturn DstOver;\ncase AlphaComposite.SRC_IN:\nreturn SrcIn;\ncase AlphaComposite.DST_IN:\nreturn DstIn;\ncase AlphaComposite.SRC_OUT:\nreturn SrcOut;\ncase AlphaComposite.DST_OUT:\nreturn DstOut;\ncase AlphaComposite.SRC_ATOP:\nreturn SrcAtop;\ncase AlphaComposite.DST_ATOP:\nreturn DstAtop;\ncase AlphaComposite.XOR:\nreturn AlphaXor;\ndefault :\nthrow new InternalError(\"Unrecognized alpha rule\");\n}\n}"}
{"ids": "12552", "raw_code": "private List findPhonemes(){\n  Set set=new HashSet();\n  for (int i=0; i < stateMachine.length; i++) {\n    if (stateMachine[i] instanceof FinalState) {\n      FinalState fstate=(FinalState)stateMachine[i];\n      if (fstate.phoneList != null) {\n        for (int j=0; j < fstate.phoneList.length; j++) {\n          set.add(fstate.phoneList[j]);\n        }\n      }\n    }\n  }\n  return new ArrayList(set);\n}"}
{"ids": "23669", "raw_code": "public static File removeParent(File parent,File file){\n  String absolutePath=file.getAbsolutePath();\n  String parentAbsolutePath=parent.getAbsolutePath();\n  String newPath=absolutePath.replace(parentAbsolutePath + \"/\",\"\");\n  return new File(newPath);\n}"}
{"ids": "28352", "raw_code": "public static boolean almostEqual(double a,double b,double delta){\n  return Math.abs(a - b) <= delta;\n}"}
{"ids": "7509", "raw_code": "private double calculateLog(double value){\n  return Math.log(value) / this.baseLog;\n}"}
{"ids": "11935", "raw_code": "@Override public boolean uploadFile(String source,String dest){\n  FileInputStream fis;\n  try {\n    File file=new File(source);\n    fis=new FileInputStream(file);\n    mDBApi.putFileOverwrite(dest,fis,file.length(),null);\n    fis.close();\n    return true;\n  }\n catch (  DropboxUnlinkedException e) {\n    Log.d(String.valueOf(R.string.app_name),\"User has unlinked.\",e);\n    return false;\n  }\ncatch (  DropboxException e) {\n    Log.d(String.valueOf(R.string.app_name),\"Something went wrong while uploading.\",e);\n    return false;\n  }\ncatch (  FileNotFoundException e) {\n    Log.d(String.valueOf(R.string.app_name),\"File not found.\",e);\n    return false;\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n    return false;\n  }\n}"}
{"ids": "39683", "raw_code": "private File createZipFileHandle() throws IOException {\n  File zipFile=File.createTempFile(\"test\",\"zip\",tmpOutputFolder.getRoot());\n  assertTrue(zipFile.delete());\n  return zipFile;\n}"}
{"ids": "62497", "raw_code": "public boolean isEmpty(){\n  return (tag == null || tag.isEmpty()) && images.size() == 0;\n}"}
{"ids": "39917", "raw_code": "@SuppressWarnings(\"unchecked\") private void restoreBadges(){\n  Bundle restoredBundle=savedInstanceState;\n  if (restoredBundle != null) {\n    if (restoredBundle.containsKey(BADGE_FULL_TEXT_KEY)) {\n      shouldShowBadgeWithNinePlus=restoredBundle.getBoolean(BADGE_FULL_TEXT_KEY);\n    }\n    if (restoredBundle.containsKey(BUDGES_ITEM_BUNDLE_KEY)) {\n      badgeSaveInstanceHashMap=(HashMap<Integer,Object>)savedInstanceState.getSerializable(BUDGES_ITEM_BUNDLE_KEY);\n      if (badgeSaveInstanceHashMap != null) {\n        for (        Integer integer : badgeSaveInstanceHashMap.keySet()) {\n          BadgeHelper.forceShowBadge(badgeList.get(integer),(BadgeItem)badgeSaveInstanceHashMap.get(integer),shouldShowBadgeWithNinePlus);\n        }\n      }\n    }\n  }\n}"}
{"ids": "72788", "raw_code": "public void touch(){\n  touch=System.currentTimeMillis();\n  if (worker != null) {\n    worker.touch();\n  }\n}"}
{"ids": "67984", "raw_code": "public void addMsgWaiting(MwiType type,int count,MwiProfile profile,boolean storeMessage){\n  if (count > 255) {\n    count=255;\n  }\n  messages_.add(new MsgWaiting(type,count,profile,storeMessage));\n}"}
{"ids": "39823", "raw_code": "private void pushStack(int newTop){\n  if (stackSize == stack.length) {\n    int[] newStack=new int[stackSize * 2];\n    int[] newPathIndices=new int[stackSize * 2];\n    String[] newPathNames=new String[stackSize * 2];\n    System.arraycopy(stack,0,newStack,0,stackSize);\n    System.arraycopy(pathIndices,0,newPathIndices,0,stackSize);\n    System.arraycopy(pathNames,0,newPathNames,0,stackSize);\n    stack=newStack;\n    pathIndices=newPathIndices;\n    pathNames=newPathNames;\n  }\n  stack[stackSize++]=newTop;\n}"}
{"ids": "12355", "raw_code": "public void addGossipMember(GossipMember member){\n  gossipMembers.add(member);\n}"}
{"ids": "37265", "raw_code": "public boolean isCaseSensitive(){\n  return m_caseSensitiveBox.isSelected();\n}"}
{"ids": "7858", "raw_code": "@Override public boolean equals(Object obj){\n  if (!(obj instanceof PolynomialFunction2D)) {\n    return false;\n  }\n  PolynomialFunction2D that=(PolynomialFunction2D)obj;\n  return Arrays.equals(this.coefficients,that.coefficients);\n}"}
{"ids": "2768", "raw_code": "public static int convertToColorInt(String a,String r,String g,String b,boolean useAlpha){\n  int alpha=useAlpha ? Integer.parseInt(a,16) : 0xff;\n  int red=Integer.parseInt(r,16);\n  int green=Integer.parseInt(g,16);\n  int blue=Integer.parseInt(b,16);\n  return Color.argb(useAlpha ? alpha : -1,red,green,blue);\n}"}
{"ids": "36474", "raw_code": "@Override public void endElement(String uri,String localName,String qName) throws SAXException {\n  if (qName.equals(TAG_ROOT)) {\n  }\n else   if (qName.equals(TAG_GROUP) || qName.equals(TAG_PROPERTY)) {\n    SettingsItem item=itemStack.remove(itemStack.size() - 1);\n    settingsItems.put(item.getKey(),item);\n  }\n else {\n    throw new SAXException(\"Unknown tag or usage: \" + localName);\n  }\n}"}
{"ids": "25425", "raw_code": "public void cancelAll(){\n  endpoint.cancelAll();\n}"}
{"ids": "39146", "raw_code": "@Override public double value(int attIndex){\n  int index=locateIndex(attIndex);\n  if ((index >= 0) && (m_Indices[index] == attIndex)) {\n    return m_AttValues[index];\n  }\n else {\n    return 0.0;\n  }\n}"}
{"ids": "43798", "raw_code": "public boolean delete() throws IOException {\n  if (closed.compareAndSet(false,true)) {\n    close(false);\n    boolean success=allocatedNodesList.delete();\n    success&=nioFile.delete();\n    return success;\n  }\n  return false;\n}"}
{"ids": "34858", "raw_code": "public static boolean hasNoPrefix(final AnnotatedTypeMirror annoType){\n  if (annoType == null) {\n    return true;\n  }\n  for (  AnnotationMirror mirror : annoType.getAnnotations()) {\n    if (!hasNoPrefix(mirror)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "34855", "raw_code": "public static void tryFormatSatisfiability(String format) throws IllegalFormatException {\n  @SuppressWarnings(\"unused\") String unused=String.format(format,(Object[])null);\n}"}
{"ids": "31953", "raw_code": "public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Class<?> cls){\n  IgniteLogger log=logRef.get();\n  if (log == null) {\n    logRef.compareAndSet(null,ctx.log(cls));\n    log=logRef.get();\n  }\n  return log;\n}"}
{"ids": "44555", "raw_code": "public static List<ConstraintViolation> check(Resource resource,ProgressMonitor monitor){\n  return check(resource,SPIN.constraint,null,monitor);\n}"}
{"ids": "16890", "raw_code": "public static boolean isValidImdbId(String imdbId){\n  if (StringUtils.isEmpty(imdbId)) {\n    return false;\n  }\n  return imdbId.matches(\"tt\\\\d{7}\");\n}"}
{"ids": "29767", "raw_code": "protected void showRecordedVideo(){\n  String absPath=mCurrentVideoFile.getAbsolutePath();\n  Intent intent=new Intent(this,PlayerActivity.class);\n  intent.putExtra(PlayerActivity.EXTRA_VIDEO_PATH,absPath);\n  startActivity(intent);\n  mCurrentVideoFile=null;\n}"}
{"ids": "71148", "raw_code": "private void write(Coordinate[] coords,int level,StringBuffer buf){\n  startLine(\"<coordinates>\",level,buf);\n  boolean isNewLine=false;\n  for (int i=0; i < coords.length; i++) {\n    if (i > 0) {\n      buf.append(TUPLE_SEPARATOR);\n    }\n    if (isNewLine) {\n      startLine(\"  \",level,buf);\n      isNewLine=false;\n    }\n    write(coords[i],buf);\n    if ((i + 1) % maxCoordinatesPerLine == 0 && i < coords.length - 1) {\n      buf.append(\"\\n\");\n      isNewLine=true;\n    }\n  }\n  buf.append(\"</coordinates>\\n\");\n}"}
{"ids": "48786", "raw_code": "public boolean canPopupOverlapTaskBar(){\n  boolean result=true;\n  try {\n    SecurityManager sm=System.getSecurityManager();\n    if (sm != null) {\n      sm.checkPermission(SecurityConstants.AWT.SET_WINDOW_ALWAYS_ON_TOP_PERMISSION);\n    }\n  }\n catch (  SecurityException se) {\n    result=false;\n  }\n  return result;\n}"}
{"ids": "56839", "raw_code": "public Job createJobForCreateCluster(String activitiXmlClasspathResourceName,List<Parameter> parameters) throws Exception {\n  return createJobForCreateCluster(activitiXmlClasspathResourceName,parameters,null);\n}"}
{"ids": "10476", "raw_code": "public static List<String> findMainClasses(File rootDir) throws IOException {\n  List<String> ret=new ArrayList<>();\n  if (!rootDir.exists()) {\n    return ret;\n  }\n  if (!rootDir.isDirectory()) {\n    throw new IllegalArgumentException(String.format(\"Path %s is not a directory\",rootDir.getPath()));\n  }\n  findClasses(ret,rootDir,rootDir.getAbsolutePath() + \"/\");\n  return ret;\n}"}
{"ids": "32994", "raw_code": "private static String validateXML(String string) throws IOException {\n  for (int i=0; i < string.length(); i++) {\n    char ch=string.charAt(i);\n    if (!(ch == 9 || ch == 10 || ch == 13 || ch >= 32))     throw new IOException(\"Character reference \\\"&#\" + Integer.toString(ch) + \"\\\" is an invalid XML character.\");\n  }\n  return string;\n}"}
{"ids": "8517", "raw_code": "public void readValues(){\n  readValues(false);\n}"}
{"ids": "34415", "raw_code": "protected static boolean isAccessCompatibleWithInstantRun(int access){\n  return ((access & Opcodes.ACC_ABSTRACT) == 0) && ((access & Opcodes.ACC_BRIDGE) == 0);\n}"}
{"ids": "10431", "raw_code": "public ThreadedListenerManager(ExecutorService pool){\n  managerNumber=MANAGER_COUNT.getAndIncrement();\n  this.pool=pool;\n}"}
{"ids": "47415", "raw_code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  if (choiceLimits.length != choiceFormats.length) {\n    throw new InvalidObjectException(\"limits and format arrays of different length.\");\n  }\n}"}
{"ids": "71214", "raw_code": "private void computeOffsetSegment(LineSegment seg,int side,double distance,LineSegment offset){\n  int sideSign=side == Position.LEFT ? 1 : -1;\n  double dx=seg.p1.x - seg.p0.x;\n  double dy=seg.p1.y - seg.p0.y;\n  double len=Math.sqrt(dx * dx + dy * dy);\n  double ux=sideSign * distance * dx / len;\n  double uy=sideSign * distance * dy / len;\n  offset.p0.x=seg.p0.x - uy;\n  offset.p0.y=seg.p0.y + ux;\n  offset.p1.x=seg.p1.x - uy;\n  offset.p1.y=seg.p1.y + ux;\n}"}
{"ids": "51349", "raw_code": "@SuppressWarnings(\"unchecked\") public synchronized E elementAt(int location){\n  if (location < elementCount) {\n    return (E)elementData[location];\n  }\n  throw arrayIndexOutOfBoundsException(location,elementCount);\n}"}
{"ids": "68911", "raw_code": "private List<QoSRule> createQoSRules(JsonObject qosSettings){\n  List<QoSRule> rules=new ArrayList<>();\n  if (qosSettings.containsKey(JSON_FIELD_RULES)) {\n    JsonObject jsonRules=qosSettings.getJsonObject(JSON_FIELD_RULES);\n    for (    String urlPatternRegExp : jsonRules.fieldNames()) {\n      log.debug(\"Creating a new QoS rule object for URL pattern: \" + urlPatternRegExp);\n      JsonObject jsonRule=jsonRules.getJsonObject(urlPatternRegExp);\n      Pattern urlPattern=Pattern.compile(urlPatternRegExp);\n      QoSRule rule=new QoSRule(urlPattern);\n      boolean addRule=false;\n      if (jsonRule.containsKey(\"reject\")) {\n        addRule=true;\n        rule.setReject(jsonRule.getDouble(\"reject\"));\n      }\n      if (jsonRule.containsKey(\"warn\")) {\n        addRule=true;\n        rule.setWarn(jsonRule.getDouble(\"warn\"));\n      }\n      if (addRule) {\n        rules.add(rule);\n      }\n else {\n        log.warn(\"No or unknown QoS action defined for rule {}. This rule will not be loaded!\",urlPatternRegExp);\n      }\n    }\n  }\n  return rules;\n}"}
{"ids": "15357", "raw_code": "private static final byte[] toOctets(int identifier,String text){\n  byte[] s=text.getBytes(StandardCharsets.UTF_8);\n  byte[] base=OctetUtils.toOctets(AttributeType.VENDOR_SPECIFIC,identifier);\n  int maxTextSpace=Attribute.MAX_ATTRIBUTE_LENGTH - base.length;\n  byte[] octets;\n  if (s.length > maxTextSpace) {\n    octets=new byte[Attribute.MAX_ATTRIBUTE_LENGTH];\n    System.arraycopy(s,0,octets,base.length,Attribute.MAX_ATTRIBUTE_LENGTH - base.length);\n  }\n else {\n    octets=new byte[base.length + s.length];\n    System.arraycopy(s,0,octets,base.length,s.length);\n  }\n  System.arraycopy(base,0,octets,0,base.length);\n  octets[1]=(byte)octets.length;\n  return octets;\n}"}
{"ids": "16593", "raw_code": "private Double formatDoubleValue(Double value,int places){\n  BigDecimal bd=new BigDecimal(value);\n  bd=bd.setScale(places,RoundingMode.HALF_UP);\n  return bd.doubleValue();\n}"}
{"ids": "51771", "raw_code": "@Override public void flush() throws IOException {\n  out.flush();\n}"}
{"ids": "12229", "raw_code": "protected int moveOrCopyFiles(boolean move,String what,File[] destFiles,File[] sourceFiles){\n  int opCode=(move) ? OP_MOVE : OP_COPY;\n  mModifiedSrcFiles=(move) ? new ArrayList<String>() : null;\n  mModifiedDestFiles=new ArrayList<String>();\n  openLogfile();\n  onPreProcess(what,null,null,opCode);\n  int itemCount=0;\n  int pos=0;\n  int fileCount=destFiles.length;\n  while (pos < fileCount) {\n    File sourceFile=sourceFiles[pos];\n    File destFile=destFiles[pos];\n    File destRenamed=renameDuplicate(destFile);\n    if (osFileMoveOrCopy(move,destRenamed,sourceFile))     itemCount++;\n    log(((move) ? \"MOVE /y \" : \"COPY /y \"),getFilenameForLog(sourceFile),\" \",getFilenameForLog(destRenamed));\n    File sourceSidecar=getSidecar(sourceFile);\n    if (osFileExists(sourceSidecar)) {\n      File destSidecar=getSidecar(destRenamed);\n      if (osFileMoveOrCopy(move,destSidecar,sourceSidecar))       itemCount++;\n      log(((move) ? \"MOVE /y \" : \"COPY /y \"),getFilenameForLog(sourceSidecar),\" \",getFilenameForLog(destSidecar));\n    }\n    pos++;\n  }\n  int modifyCount=mModifiedDestFiles.size();\n  String[] modifiedSourceFiles=((mModifiedSrcFiles != null) && (mModifiedSrcFiles.size() > 0)) ? mModifiedSrcFiles.toArray(new String[modifyCount]) : null;\n  onPostProcess(what,modifiedSourceFiles,(modifyCount > 0) ? mModifiedDestFiles.toArray(new String[modifyCount]) : null,itemCount,sourceFiles.length,opCode);\n  closeLogFile();\n  return itemCount;\n}"}
{"ids": "45755", "raw_code": "static boolean isCOctetStringValid(String value,int maxLength){\n  if (value == null)   return true;\n  if (value.length() >= maxLength)   return false;\n  return true;\n}"}
{"ids": "10923", "raw_code": "public Rectangle2D createProperBounds(double x1,double y1,double x2,double y2){\n  double x=Math.min(x1,x2);\n  double y=Math.min(y1,y2);\n  double w=Math.abs(x1 - x2);\n  double h=Math.abs(y1 - y2);\n  return new Rectangle2D.Double(x,y,w,h);\n}"}
{"ids": "83222", "raw_code": "private void createFile(int number,String extention){\n  for (int i=0; i < number; i++) {\n    try {\n      BufferedWriter output=new BufferedWriter(new FileWriter(new File(textInputFolder + \"/File\" + String.valueOf(i)+ extention)));\n      try {\n        output.write(\"File number \");\n        output.write(String.valueOf(i));\n      }\n  finally {\n        output.close();\n      }\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "80033", "raw_code": "public boolean isAnimal(){\n  return typeString.contains(SUFFIX_ANIMAL);\n}"}
{"ids": "19966", "raw_code": "public void addNotification(PingNotification notification){\n  notifications.add(notification);\n}"}
{"ids": "21246", "raw_code": "public List<Datastore> createNfsDatastore(ClusterComputeResource cluster,FileShareRestRep fileSystem,FileSystemExportParam export,URI datacenterId,String datastoreName){\n  addNfsDatastoreTag(fileSystem,export,datacenterId,datastoreName);\n  List<Datastore> datastores=Lists.newArrayList();\n  String fileServer=StringUtils.substringBefore(export.getMountPoint(),\":\");\n  String mountPath=StringUtils.substringAfter(export.getMountPoint(),\":\");\n  for (  HostSystem host : cluster.getHosts()) {\n    datastores.add(execute(new CreateNfsDatastore(host,fileServer,mountPath,datastoreName)));\n    addAffectedResource(fileSystem);\n    ExecutionUtils.clearRollback();\n  }\n  return datastores;\n}"}
{"ids": "86296", "raw_code": "public Album(Context context,Uri mediaUri){\n  super();\n  media.add(0,new Media(context,mediaUri));\n  setCurrentPhotoIndex(0);\n}"}
{"ids": "2043", "raw_code": "protected void initializeTaskDone(Set<TaskImageContainer> tasks,Optional<Runnable> runnableWhenDone){\n  Set<CaptureSession> sessionSet=new HashSet<>();\n  Map<CaptureSession,Integer> sessionTaskCount=new HashMap<>();\n  for (  TaskImageContainer task : tasks) {\n    sessionSet.add(task.mSession);\n    Integer currentCount=sessionTaskCount.get(task.mSession);\n    if (currentCount == null) {\n      sessionTaskCount.put(task.mSession,1);\n    }\n else {\n      sessionTaskCount.put(task.mSession,currentCount + 1);\n    }\n  }\nsynchronized (mShadowTaskMap) {\n    for (    CaptureSession captureSession : sessionSet) {\n      BlockSignalProtocol protocol=new BlockSignalProtocol();\n      protocol.setCount(sessionTaskCount.get(captureSession));\n      final ImageShadowTask shadowTask;\n      shadowTask=new ImageShadowTask(protocol,captureSession,runnableWhenDone);\n      mShadowTaskMap.put(captureSession,shadowTask);\n      mProcessingTaskConsumer.enqueueTask(shadowTask);\n    }\n  }\n}"}
{"ids": "72579", "raw_code": "public static String unquote(String name){\n  return isQuoted(name) ? name.substring(1,name.length() - 1) : name;\n}"}
{"ids": "47101", "raw_code": "private static <T>T reportJoin(Object r){\n  if (r instanceof AltResult) {\n    Throwable x;\n    if ((x=((AltResult)r).ex) == null)     return null;\n    if (x instanceof CancellationException)     throw (CancellationException)x;\n    if (x instanceof CompletionException)     throw (CompletionException)x;\n    throw new CompletionException(x);\n  }\n  @SuppressWarnings(\"unchecked\") T t=(T)r;\n  return t;\n}"}
{"ids": "73673", "raw_code": "private boolean saveMacro(){\n  if (firstTime) {\n    try {\n      Thread.sleep(firstTimeSleep);\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n  firstTime=false;\n  byte[] macroAccy=new byte[macroSize];\n  int index=0;\n  int accyNum=0;\n  accyNum=getAccyRow(macroAccy,index,textAccy1,accyTextField1,cmdButton1);\n  if (accyNum < 0) {\n    return false;\n  }\n  if (accyNum > 0) {\n    index+=2;\n  }\n  accyNum=getAccyRow(macroAccy,index,textAccy2,accyTextField2,cmdButton2);\n  if (accyNum < 0) {\n    return false;\n  }\n  if (accyNum > 0) {\n    index+=2;\n  }\n  accyNum=getAccyRow(macroAccy,index,textAccy3,accyTextField3,cmdButton3);\n  if (accyNum < 0) {\n    return false;\n  }\n  if (accyNum > 0) {\n    index+=2;\n  }\n  accyNum=getAccyRow(macroAccy,index,textAccy4,accyTextField4,cmdButton4);\n  if (accyNum < 0) {\n    return false;\n  }\n  if (accyNum > 0) {\n    index+=2;\n  }\n  accyNum=getAccyRow(macroAccy,index,textAccy5,accyTextField5,cmdButton5);\n  if (accyNum < 0) {\n    return false;\n  }\n  if (accyNum > 0) {\n    index+=2;\n  }\n  accyNum=getAccyRow(macroAccy,index,textAccy6,accyTextField6,cmdButton6);\n  if (accyNum < 0) {\n    return false;\n  }\n  if (accyNum > 0) {\n    index+=2;\n  }\n  accyNum=getAccyRow(macroAccy,index,textAccy7,accyTextField7,cmdButton7);\n  if (accyNum < 0) {\n    return false;\n  }\n  if (accyNum > 0) {\n    index+=2;\n  }\n  if (!isUsb) {\n    accyNum=getAccyRow(macroAccy,index,textAccy8,accyTextField8,cmdButton8);\n    if (accyNum < 0) {\n      return false;\n    }\n    if (accyNum > 0) {\n      index+=2;\n    }\n    accyNum=getAccyRow(macroAccy,index,textAccy9,accyTextField9,cmdButton9);\n    if (accyNum < 0) {\n      return false;\n    }\n    if (accyNum > 0) {\n      index+=2;\n    }\n  }\n  accyNum=getAccyRow(macroAccy,index,textAccy10,accyTextField10,cmdButton10);\n  if (accyNum < 0) {\n    JOptionPane.showMessageDialog(this,rb.getString(\"EnterMacroNumberLine10\"),rb.getString(\"NceMacro\"),JOptionPane.ERROR_MESSAGE);\n    return false;\n  }\n  processMemory(false,true,macroNum,macroAccy);\n  return true;\n}"}
{"ids": "12914", "raw_code": "public void writeIntoSPTKLF0File(String sptkFileName) throws IOException {\n  LEDataOutputStream lf0Data=new LEDataOutputStream(new BufferedOutputStream(new FileOutputStream(sptkFileName)));\n  for (int i=0; i < this.contour.length; i++) {\n    double f0Val=contour[i];\n    if (contour[i] == 0.0f) {\n      lf0Data.writeFloat(NEGATIVE_MAXIMUM);\n    }\n else {\n      lf0Data.writeFloat((float)Math.log(contour[i]));\n    }\n  }\n  lf0Data.flush();\n  lf0Data.close();\n}"}
{"ids": "67307", "raw_code": "public static Element find(Node parent,String name){\n  NodeList list=parent.getChildNodes();\n  for (int i=0; i < list.getLength(); i++) {\n    Node n=list.item(i);\n    if (n instanceof Element) {\n      Element e=(Element)n;\n      if (name.equals(e.getAttribute(\"id\"))) {\n        return e;\n      }\n    }\n    Element r=find(n,name);\n    if (r != null) {\n      return r;\n    }\n  }\n  return null;\n}"}
{"ids": "66833", "raw_code": "public static RE mkStar(RE x){\n  if (x.equals(epsilon) || x.equals(empty)) {\n    return epsilon;\n  }\n  RE res=new RE(ReOp.STAR);\n  res.unaryArg=x;\n  return res;\n}"}
{"ids": "73296", "raw_code": "public void remove(final Object element){\n  Set oldSelection=new HashSet(selection);\n  boolean rv=selection.remove(element);\n  if (rv) {\n    fireSelectionChanged(oldSelection,selection);\n  }\n  oldSelection=null;\n}"}
{"ids": "32793", "raw_code": "public void printf(Locale locale,String format,Object... args){\n  out.printf(locale,format,args);\n  out.flush();\n}"}
{"ids": "41139", "raw_code": "public void addSuffix(DalvInsn insn){\n  suffix.add(insn);\n}"}
{"ids": "31973", "raw_code": "private void closeSelector(){\n  if (selector.isOpen()) {\n    if (log.isDebugEnabled())     log.debug(\"Closing all listening sockets.\");\n    for (    SelectionKey key : selector.keys())     U.close(key.channel(),log);\n    if (log.isDebugEnabled())     log.debug(\"Closing NIO selector.\");\n    U.close(selector,log);\n  }\n}"}
{"ids": "26702", "raw_code": "public static Number sub(Number a,Number b){\n  if (isFloatingPoint(a) || isFloatingPoint(b)) {\n    return a.doubleValue() - b.doubleValue();\n  }\n else {\n    return a.longValue() - b.longValue();\n  }\n}"}
{"ids": "71838", "raw_code": "public Builder requiredAttributes(final String... nameOrOIDs){\n  return requiredAttributes(Arrays.asList(nameOrOIDs));\n}"}
{"ids": "78081", "raw_code": "private void showHistoryDialog(){\n  JBList commandsList=new JBList(HistoryUtils.getCommandsFromHistory());\n  commandsList.setCellRenderer(new HistoryListCellRenderer());\n  commandsList.setEmptyText(\"No data to display\");\n  commandsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n  String[] buttons={\"OK\",\"Cancel\"};\n  int result=JOptionPane.showOptionDialog(toolWindowContent,commandsList,\"Command history\",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,buttons,buttons[0]);\n  if (result == 0) {\n    updateUiFromCommand((Command)commandsList.getSelectedValue());\n  }\n}"}
{"ids": "27754", "raw_code": "protected static byte[] read(InputStream is) throws IOException {\n  final boolean close=true;\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  try {\n    int i;\n    while ((i=is.read()) != -1) {\n      baos.write(i);\n    }\n  }\n  finally {\n    try {\n      if (close) {\n        is.close();\n      }\n      baos.close();\n    }\n catch (    Exception ex) {\n      log.warn(\"Could not close input/output stream: \" + ex,ex);\n    }\n  }\n  return baos.toByteArray();\n}"}
{"ids": "30269", "raw_code": "public Notification find(Integer notificationID){\n  Notification notification=new Notification(context,notificationID,null);\n  if (notification.getAttributes() == null)   notification.loadAttributesFromPreferences();\n  return notification;\n}"}
{"ids": "83346", "raw_code": "public static void writeHistogram(TDoubleDoubleHashMap distr,String filename) throws FileNotFoundException, IOException {\n  BufferedWriter aWriter=IOUtils.getBufferedWriter(filename);\n  aWriter.write(\"bin\\tcount\");\n  aWriter.newLine();\n  double[] keys=distr.keys();\n  Arrays.sort(keys);\n  for (  double key : keys) {\n    aWriter.write(String.valueOf(key));\n    aWriter.write(\"\\t\");\n    aWriter.write(String.valueOf(distr.get(key)));\n    aWriter.newLine();\n  }\n  aWriter.close();\n}"}
{"ids": "8202", "raw_code": "public static Number plus(Character left,Number right){\n  return NumberNumberPlus.plus(Integer.valueOf(left),right);\n}"}
{"ids": "15295", "raw_code": "public boolean removeElement(Object obj){\nsynchronized (actions) {\n    if (allowToChange) {\n      boolean result=actions.remove(obj);\n      if (actions.isEmpty()) {\n        if (headTask != null) {\n          cancel();\n        }\n      }\n      return result;\n    }\n  }\n  return false;\n}"}
{"ids": "35634", "raw_code": "private static FloatBuffer createVertexArray(float[] coords){\n  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * 4);\n  bb.order(ByteOrder.nativeOrder());\n  FloatBuffer fb=bb.asFloatBuffer();\n  fb.put(coords);\n  fb.position(0);\n  return fb;\n}"}
{"ids": "78206", "raw_code": "private Object[] invWmSubBand(Image img,double[] wm,int n,double threshold){\n  int m=0;\n  double z=0.0;\n  double v=0.0;\n  for (int i=0; i < img.getWidth() * img.getHeight(); i++) {\n    if (img.getData()[i] > threshold) {\n      z+=(img.getData()[i] * wm[i % n]);\n      v+=Math.abs(img.getData()[i]);\n      m++;\n    }\n  }\n  return new Object[]{m,z,v};\n}"}
{"ids": "19930", "raw_code": "private static TungstenProperties loadSecurityPropertiesFromFile(String propertiesFileLocation) throws ConfigurationException {\n  TungstenProperties securityProps=null;\n  FileInputStream securityConfigurationFileInputStream=null;\n  if (propertiesFileLocation == null && ClusterConfiguration.getClusterHome() == null) {\n    throw new ConfigurationException(\"No cluster.home found from which to configure cluster resources.\");\n  }\n  File securityPropertiesFile;\n  if (propertiesFileLocation == null) {\n    File clusterConfDirectory=ClusterConfiguration.getDir(ClusterConfiguration.getGlobalConfigDirName(ClusterConfiguration.getClusterHome()));\n    securityPropertiesFile=new File(clusterConfDirectory.getPath(),SecurityConf.SECURITY_PROPERTIES_FILE_NAME);\n  }\n else {\n    securityPropertiesFile=new File(propertiesFileLocation);\n  }\n  try {\n    securityProps=new TungstenProperties();\n    securityConfigurationFileInputStream=new FileInputStream(securityPropertiesFile);\n    securityProps.load(securityConfigurationFileInputStream,true);\n    closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream);\n  }\n catch (  FileNotFoundException e) {\n    String msg=MessageFormat.format(\"Cannot find configuration file: {0}\",securityPropertiesFile.getPath());\n    logger.debug(msg,e);\n    throw new ConfigurationException(msg);\n  }\ncatch (  IOException e) {\n    String msg=MessageFormat.format(\"Cannot load configuration file: {0}.\\n Reason: {1}\",securityPropertiesFile.getPath(),e.getMessage());\n    logger.debug(msg,e);\n    throw new ConfigurationException(msg);\n  }\n finally {\n    closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream);\n  }\n  if (logger.isDebugEnabled()) {\n    logger.debug(MessageFormat.format(\": {0}\",securityPropertiesFile.getPath()));\n  }\n  securityProps.put(SecurityConf.SECURITY_PROPERTIES_PARENT_FILE_LOCATION,securityPropertiesFile.getAbsolutePath());\n  return securityProps;\n}"}
{"ids": "10707", "raw_code": "private synchronized void clearScanFiles(){\n  if ((allFiles != null) && (allFiles.size() > 0)) {\n    Iterator it=allFiles.iterator();\n    File file=null;\n    while (it.hasNext()) {\n      file=(File)it.next();\n      file.delete();\n    }\n    allFiles.clear();\n  }\n}"}
{"ids": "47534", "raw_code": "public DateTimeParseException(String message,CharSequence parsedData,int errorIndex){\n  super(message);\n  this.parsedString=parsedData.toString();\n  this.errorIndex=errorIndex;\n}"}
{"ids": "82110", "raw_code": "private boolean areParallelSiblings(Component source,Component target,int axis){\n  ComponentInfo sourceInfo=getComponentInfo(source);\n  ComponentInfo targetInfo=getComponentInfo(target);\n  Spring sourceSpring;\n  Spring targetSpring;\n  if (axis == HORIZONTAL) {\n    sourceSpring=sourceInfo.horizontalSpring;\n    targetSpring=targetInfo.horizontalSpring;\n  }\n else {\n    sourceSpring=sourceInfo.verticalSpring;\n    targetSpring=targetInfo.verticalSpring;\n  }\n  ArrayList sourcePath=tmpParallelSet;\n  sourcePath.clear();\n  Spring spring=sourceSpring.getParent();\n  while (spring != null) {\n    sourcePath.add(spring);\n    spring=spring.getParent();\n  }\n  spring=targetSpring.getParent();\n  while (spring != null) {\n    if (sourcePath.contains(spring)) {\n      sourcePath.clear();\n      while (spring != null) {\n        if (spring instanceof ParallelGroup) {\n          return true;\n        }\n        spring=spring.getParent();\n      }\n      return false;\n    }\n    spring=spring.getParent();\n  }\n  sourcePath.clear();\n  return false;\n}"}
{"ids": "84184", "raw_code": "protected Object readObjectImpl(Class cl) throws IOException {\n  try {\n    Object obj=cl.newInstance();\n    if (_refs == null)     _refs=new ArrayList();\n    _refs.add(obj);\n    HashMap fieldMap=getFieldMap(cl);\n    int code=read();\n    for (; code >= 0 && code != 'z'; code=read()) {\n      unread();\n      Object key=readObject();\n      Field field=(Field)fieldMap.get(key);\n      if (field != null) {\n        Object value=readObject(field.getType());\n        field.set(obj,value);\n      }\n else {\n        Object value=readObject();\n      }\n    }\n    if (code != 'z')     throw expect(\"map\",code);\n    try {\n      Method method=cl.getMethod(\"readResolve\",new Class[0]);\n      return method.invoke(obj,new Object[0]);\n    }\n catch (    Exception e) {\n    }\n    return obj;\n  }\n catch (  IOException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new IOExceptionWrapper(e);\n  }\n}"}
{"ids": "5671", "raw_code": "public static PlainText plain(int text){\n  return plain(Integer.toString(text));\n}"}
{"ids": "85586", "raw_code": "public static boolean isToday(Calendar _calendar){\n  Calendar now=Calendar.getInstance();\n  if (now.get(Calendar.DAY_OF_MONTH) == _calendar.get(Calendar.DAY_OF_MONTH)) {\n    if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) {\n      if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "23170", "raw_code": "protected void sprint(double doubleField){\n  sprint(String.valueOf(doubleField));\n}"}
{"ids": "21615", "raw_code": "private StoragePort assignPortBasedOnUsage(List<StoragePort> matchingTargetPorts,Map<StoragePort,Integer> portUsage){\n  StoragePort foundPort=null;\n  for (  StoragePort matchedPort : matchingTargetPorts) {\n    if (portUsage.get(matchedPort) == null) {\n      portUsage.put(matchedPort,0);\n    }\n    if (foundPort == null) {\n      foundPort=matchedPort;\n    }\n else {\n      if (portUsage.get(matchedPort) < portUsage.get(foundPort)) {\n        foundPort=matchedPort;\n      }\n    }\n  }\n  if (foundPort != null) {\n    portUsage.put(foundPort,portUsage.get(foundPort) + 1);\n  }\n  return foundPort;\n}"}
{"ids": "55623", "raw_code": "public ExternalEvent nextEvent(){\n  if (queue.size() == 0) {\n    return new ExternalEvent(Double.MAX_VALUE);\n  }\n  ExternalEvent ee=queue.get(nextEventIndex);\n  nextEventIndex++;\n  if (nextEventIndex >= queue.size()) {\n    queue=readEvents(nrofPreload);\n    nextEventIndex=0;\n  }\n  return ee;\n}"}
{"ids": "53438", "raw_code": "public void appendToBuffer(StringBuilder buf){\n  Iterator<double[]> iter=points.iterator();\n  while (iter.hasNext()) {\n    double[] data=iter.next();\n    for (int i=0; i < data.length; i++) {\n      if (i > 0) {\n        buf.append(\",\");\n      }\n      buf.append(data[i]);\n    }\n    if (iter.hasNext()) {\n      buf.append(\" \");\n    }\n  }\n}"}
{"ids": "74273", "raw_code": "public void updateComboBox(JComboBox<Track> box){\n  box.removeAllItems();\n  box.addItem(null);\n  List<Track> tracks=getTrackByNameList(null);\n  for (  Track track : tracks) {\n    box.addItem(track);\n  }\n}"}
{"ids": "33140", "raw_code": "public RefactoringSessionTransformer(final boolean projects){\n  fProjects=projects;\n}"}
{"ids": "4644", "raw_code": "public CompareResult open(){\n  final ContentComparator[] comparatorArray=comparators.toArray(new ContentComparator[comparators.size()]);\n  final CustomCompareEditorInput input=new CustomCompareEditorInput(modified,original,ancestor,comparatorArray,compareConfiguration,externalCompareHandler);\n  if (compareConfiguration.isLeftEditable() || compareConfiguration.isRightEditable()) {\n    compareConfiguration.setProperty(\"org.eclipse.compare.internal.CONFIRM_SAVE_PROPERTY\",Boolean.FALSE);\n    input.setAlwaysDirty(alwaysDirty);\n  }\n  input.addSaveListener(new ProxyCompareSaveListener());\n  log.info(MessageFormat.format(\"Comparing {0} to {1}\",getLabelNOLOC(modified),getLabelNOLOC(original)));\n  compareUIType.openCompareUI(input);\n  final boolean contentsIdentical=(input.getCompareResult() == null);\n  final boolean contentsSaved=(input.getSavedContents().length > 0);\n  return new CompareResult(contentsIdentical,input.wasOKPressed(),contentsSaved);\n}"}
{"ids": "15703", "raw_code": "protected void addResource(String resource){\n  if (!StringUtils.isEmpty(resource)) {\n    resources.add(resource);\n  }\n}"}
{"ids": "65514", "raw_code": "public static boolean isNumeric(String maybeNumeric){\n  return maybeNumeric != null && maybeNumeric.matches(\"[0-9]+\");\n}"}
{"ids": "9809", "raw_code": "public void openKeyStore(File keyStoreFile,String defaultPassword){\n  try {\n    if (!keyStoreFile.isFile()) {\n      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString(\"OpenAction.NotFile.message\"),keyStoreFile),res.getString(\"OpenAction.OpenKeyStore.Title\"),JOptionPane.WARNING_MESSAGE);\n      return;\n    }\n    if (isKeyStoreFileOpen(keyStoreFile)) {\n      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString(\"OpenAction.NoOpenKeyStoreAlreadyOpen.message\"),keyStoreFile),res.getString(\"OpenAction.OpenKeyStore.Title\"),JOptionPane.WARNING_MESSAGE);\n      return;\n    }\n    Password password=(defaultPassword != null) ? new Password(defaultPassword.toCharArray()) : null;\n    KeyStore openedKeyStore=null;\n    boolean firstTry=true;\n    while (true) {\n      if (password == null) {\n        password=showPasswordDialog(keyStoreFile);\n      }\n      if (password == null) {\n        return;\n      }\n      try {\n        openedKeyStore=KeyStoreUtil.load(keyStoreFile,password);\n        break;\n      }\n catch (      KeyStoreLoadException klex) {\n        if (defaultPassword == null || !firstTry) {\n          int tryAgainChoice=showErrorMessage(keyStoreFile,klex);\n          if (tryAgainChoice == JOptionPane.NO_OPTION) {\n            return;\n          }\n        }\n      }\n      password.nullPassword();\n      password=null;\n      firstTry=false;\n    }\n    if (openedKeyStore == null) {\n      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString(\"OpenAction.FileNotRecognisedType.message\"),keyStoreFile.getName()),res.getString(\"OpenAction.OpenKeyStore.Title\"),JOptionPane.WARNING_MESSAGE);\n      return;\n    }\n    kseFrame.addKeyStore(openedKeyStore,keyStoreFile,password);\n  }\n catch (  FileNotFoundException ex) {\n    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString(\"OpenAction.NoReadFile.message\"),keyStoreFile),res.getString(\"OpenAction.OpenKeyStore.Title\"),JOptionPane.WARNING_MESSAGE);\n  }\ncatch (  Exception ex) {\n    DError.displayError(frame,ex);\n  }\n}"}
{"ids": "6611", "raw_code": "private final void append(List<? super NameValuePair> l,final String k,final String v){\n  if (v != null)   l.add(new NameValuePair(k,v));\n}"}
{"ids": "11023", "raw_code": "protected Properties createProperties(URL location) throws IOException {\n  InputStream is=null;\n  if (location != null) {\n    is=location.openStream();\n  }\n  Properties tmpProperties=new Properties();\n  if (is != null) {\n    tmpProperties.load(is);\n  }\n  return tmpProperties;\n}"}
{"ids": "83081", "raw_code": "protected double calcPlanWeight(final T plan,final double maxScore){\n  if (plan.getScore() == null) {\n    return Double.NaN;\n  }\n  double weight=Math.exp(this.beta * (plan.getScore() - maxScore));\n  if (weight < MIN_WEIGHT)   weight=MIN_WEIGHT;\n  return weight;\n}"}
{"ids": "74096", "raw_code": "void findValue(){\n  if (log.isDebugEnabled()) {\n    log.debug(\"findValue invoked on \" + label());\n  }\n  for (int i=0; i < _value.getItemCount(); i++) {\n    String choice=_value.getItemAt(i);\n    SettingList sl=choiceHash.get(choice);\n    if (sl.match()) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"  match in \" + i);\n      }\n      _value.setSelectedItem(choice);\n      return;\n    }\n  }\n  if (log.isDebugEnabled()) {\n    log.debug(\"   no match\");\n  }\n}"}
{"ids": "82477", "raw_code": "public java.lang.StringBuilder insert(int index,java.lang.String string){\n  if (string == null) {\n    string=\"null\";\n  }\n  int min=string.length();\n  if (min != 0) {\n    move(min,index);\n    string.getChars(0,min,value,index);\n    count+=min;\n  }\n  return this;\n}"}
{"ids": "27049", "raw_code": "public void mkdir(String key) throws IOException {\n  key=key.replace(\" \",\"\");\n  if (key.endsWith(\"/\") && !key.equals(\"/\")) {\n    throw new InvalidParameterException(\"Trailing slash not allowed in zookeeper path\");\n  }\n  String[] split=key.split(\"/\");\n  StringBuilder builder=new StringBuilder();\n  for (  String s : split) {\n    builder.append(s);\n    if (!s.isEmpty() && !exists(builder.toString())) {\n      zkState.set(builder.toString(),null);\n    }\n    builder.append(\"/\");\n  }\n}"}
{"ids": "7786", "raw_code": "public double calculateLog(double value){\n  return Math.log(value) / this.baseLog;\n}"}
{"ids": "2450", "raw_code": "public static Vector3 pow(Vector3 o,double power){\n  return new Vector3(Math.pow(o.x,power),Math.pow(o.y,power),Math.pow(o.z,power));\n}"}
{"ids": "53900", "raw_code": "public DatagramPacket responseReceive() throws IOException {\n  byte[] buf=new byte[1024];\n  DatagramPacket dp=new DatagramPacket(buf,buf.length);\n  datagramSocket.receive(dp);\n  return dp;\n}"}
{"ids": "85128", "raw_code": "@Override public void flush(){\n  flush(false);\n}"}
{"ids": "72284", "raw_code": "public static float[] temperatureToRGB(int degreesK){\n  int k=MathUtils.constrain(degreesK,1000,20000);\n  float a=(k % 100) / 100.0f;\n  int i=((k - 1000) / 100) * 3;\n  return new float[]{interp(i,a),interp(i + 1,a),interp(i + 2,a)};\n}"}
{"ids": "78385", "raw_code": "public AdvancedStateMap.Builder withName(Function<PropertiesMap,String> mapper){\n  this.nameMapper=mapper;\n  return this;\n}"}
{"ids": "73809", "raw_code": "public synchronized void message(LocoNetMessage m){\n  int opCode=m.getOpCode();\nswitch (opCode) {\ncase LnConstants.OPC_PEER_XFER:\n    int src=m.getElement(2);\n  int dst=m.getElement(3) + m.getElement(4) * 256;\nint[] packet=m.getPeerXfrData();\nif (src == lowPart(LocoBufferAddress)) {\nString lbv=((packet[2] != 0) ? dotme(packet[2]) : \"1.0\");\nsetLBVersion(lbv);\n}\nif (dst == LocoBufferAddress && src == lowPart(unitAddress) && (packet[4] == unitSubAddress)) {\nstopTimer();\nreplyReceived();\nString fw=((packet[2] != 0) ? dotme(packet[2]) : \"1.3.2\");\nsetLIOVersion(fw);\nif (packet[0] == LocoIO.LOCOIO_SV_READ || reading) {\nif (lastOpCv >= 0 && lastOpCv <= 50) {\n  int data=(packet[2] != 0) ? packet[5] : packet[7];\n  int channel=(lastOpCv / 3) - 1;\n  if (channel < 0) {\n    log.warn(\"... channel is less than zero!!!\");\n    channel=0;\n  }\n  int type=lastOpCv - (channel * 3 + 3);\n  log.debug(\"... updating port \" + channel + \" SV\"+ type+ \"(\"+ (type == 1 ? \"value1\" : type == 2 ? \"value2\" : type == 0 ? \"mode\" : \"unknown\")+ \") = 0x\"+ Integer.toHexString(data));\n  if (type == 2) {\n    setV2(channel,data);\n    setMode(channel,\"<none>\");\n  }\n else   if (type == 1) {\n    setV1(channel,data);\n    setMode(channel,\"<none>\");\n  }\n else   if (type == 0) {\n    setSV(channel,data);\n    LocoIOMode lim=validmodes.getLocoIOModeFor(getSV(channel),getV1(channel),getV2(channel));\n    if (lim == null) {\n      setMode(channel,\"<none>\");\n      setAddr(channel,0);\n      log.debug(\"Could not find mode!\");\n    }\n else {\n      setMode(channel,lim.getFullMode());\n      setAddr(channel,validmodes.valuesToAddress(lim.getOpcode(),getSV(channel),getV1(channel),getV2(channel)));\n    }\n    log.debug(\"... decoded address (\" + \"cv=\" + Integer.toHexString(getSV(channel)) + \" \"+ \"v1=\"+ Integer.toHexString(getV1(channel))+ \" \"+ \"v2=\"+ Integer.toHexString(getV2(channel))+ \") \"+ \"is \"+ getAddr(channel)+ \"(0x\"+ Integer.toHexString(getAddr(channel))+ \")\");\n  }\n else {\n    log.warn(\"OPC_PEER_XFR: Type (\" + type + \") is not {0,1,2} for channel \"+ channel);\n  }\n}\n else {\n}\n}\nissueNextOperation();\nreturn;\n}\n else {\nreturn;\n}\ncase LnConstants.OPC_INPUT_REP:\nif (log.isDebugEnabled()) {\nlog.debug(LnConstants.OPC_NAME(opCode) + \" received\");\n}\nfor (int i=0; i < _numRows; i++) {\nif (capture[i]) {\nif (log.isDebugEnabled()) {\nlog.debug(\"row set for capture: \" + i);\n}\nint val1=m.getElement(1);\nint val2=m.getElement(2);\nsetAddr(i,((val2 & 0x0F) << 5) * 256 + ((val1 & 0x7f) << 1) | (((val2 & LnConstants.OPC_SW_REQ_DIR) == LnConstants.OPC_SW_REQ_DIR) ? 0x01 : 0x00));\ncapture[i]=false;\n}\n}\nreturn;\ncase LnConstants.OPC_SW_REQ:\nif (log.isDebugEnabled()) {\nlog.debug(LnConstants.OPC_NAME(opCode) + \" received\");\n}\nfor (int i=0; i < _numRows; i++) {\nif (capture[i]) {\nif (log.isDebugEnabled()) {\nlog.debug(\"row set for capture: \" + i);\n}\nint val1=m.getElement(1);\nint val2=m.getElement(2);\nint addr=LocoIO.SENSOR_ADR(val1,val2);\nsetAddr(i,addr);\ncapture[i]=false;\n}\n}\nreturn;\ndefault :\n}\n}"}
{"ids": "30624", "raw_code": "public boolean handleExceptionFromServer(Writer writer,Reader reader,Throwable ex){\n  if (ex instanceof ClosedChannelException) {\n    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,\"Connection with client closed from [\" + writer.getEndPointAddress() + \"] endpoint.\");\n    return true;\n  }\n  if (ex instanceof MarshalContextClearedException) {\n    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,\"Marshal context have been cleared, probably because the exported service class loader has been unloaded, service incoming invocation from [\" + writer.getEndPointAddress() + \"] endpoint.\");\n    return true;\n  }\n  try {\n    String msg=\"LRMI Transport Protocol caught server exception caused by [\" + writer.getEndPointAddress() + \"] client.\";\n    if (ex instanceof LRMIUnhandledException) {\n      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex);\n      LRMIUnhandledException lrmiue=(LRMIUnhandledException)ex;\n      if (lrmiue.getStage() == Stage.DESERIALIZATION) {\n        reader.resetContext();\n      }\n      if (writer.isOpen())       writer.writeReply(new ReplyPacket(null,lrmiue));\n      return false;\n    }\n else     if (ex instanceof RuntimeException || ex instanceof InvalidClassException) {\n      if (_logger.isLoggable(Level.SEVERE))       _logger.log(Level.SEVERE,msg,ex);\n    }\n else     if (ex instanceof UnmarshalException) {\n      if (_logger.isLoggable(Level.WARNING))       _logger.log(Level.WARNING,msg,ex);\n    }\n else {\n      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex);\n    }\n    if (writer.isOpen())     writer.writeReply(new ReplyPacket(null,new ProtocolException(msg,ex)));\n    return true;\n  }\n catch (  Exception ex2) {\n    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,\"Failed to send handledServerException to endpoint [\" + writer.getEndPointAddress() + \"] , the client disconnected from the server.\",ex);\n    return true;\n  }\n}"}
{"ids": "70643", "raw_code": "default String resourceName(String tableName,String type){\n  return String.format(RESOURCE_NAME,tableName,type);\n}"}
{"ids": "74239", "raw_code": "protected void updateComboBoxesLoadChange(){\n  if (autoTrackCheckBox.isSelected()) {\n    updateLocationTrackComboBox();\n  }\n  if (autoDestinationTrackCheckBox.isSelected()) {\n    updateDestinationTrackComboBox();\n  }\n  if (autoFinalDestTrackCheckBox.isSelected()) {\n    updateFinalDestination();\n  }\n}"}
{"ids": "45231", "raw_code": "public static String join(NamedValue[] values,String separator){\n  StringBuilder buff=new StringBuilder();\n  for (int i=0; i < values.length; i++) {\n    buff.append(values[i]);\n    if (i < values.length - 1)     buff.append(separator);\n  }\n  return buff.toString();\n}"}
{"ids": "37778", "raw_code": "protected String sourceClass(Attribute c,double[] dist){\n  if (c.isNominal()) {\n    return Integer.toString(Utils.maxIndex(dist));\n  }\n else {\n    return Double.toString(dist[0]);\n  }\n}"}
{"ids": "75104", "raw_code": "int requestGroupData(char groupNum){\n  setCurrDataGroup(groupNum);\n  currGrpItems=knownGrpItems.get(Integer.valueOf(getCurrDataGroup()));\n  char[] payLoad={groupNum};\n  return (writeTelegram(payLoad,CMD_GROUP_READ,null));\n}"}
{"ids": "73342", "raw_code": "public AllToAllPanel(AllToAll connector,NetworkPanel networkPanel){\n  super();\n  this.connection=connector;\n  allowSelfConnectPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));\n  allowSelfConnectPanel.add(new JLabel(\" Allow Self Connections: \"));\n  allowSelfConnectPanel.add(allowSelfConnectChkBx);\n  fillFieldValues();\n  add(allowSelfConnectPanel);\n}"}
{"ids": "4910", "raw_code": "private void allocate_sections(int p_section_count){\n  section_list.ensureCapacity(p_section_count);\n  while (section_list.size() < p_section_count) {\n    section_list.add(new MazeSearchElement());\n  }\n}"}
{"ids": "36128", "raw_code": "public WeightDistribution(ColumnExampleTable columnTable,int[] selection,int attributeNumber){\n  calculateLabelWeights(columnTable,selection,attributeNumber);\n  leftLabelWeights=new double[totalLabelWeights.length];\n  leftWeight=0;\n  totalWeight=getTotalWeight(totalLabelWeights);\n  if (hasMissings) {\n    missingsWeight=getTotalWeight(missingsLabelWeights);\n    rightWeight=totalWeight - missingsWeight;\n    rightLabelWeights=arrayDifference(totalLabelWeights,missingsLabelWeights);\n  }\n else {\n    missingsWeight=0;\n    rightWeight=totalWeight;\n    rightLabelWeights=new double[totalLabelWeights.length];\n    System.arraycopy(totalLabelWeights,0,rightLabelWeights,0,totalLabelWeights.length);\n  }\n}"}
{"ids": "33390", "raw_code": "public static String removeExtension(String fileName){\n  int index=fileName.lastIndexOf('.');\n  if (index == -1) {\n    return fileName;\n  }\n else {\n    return fileName.substring(0,index);\n  }\n}"}
{"ids": "3271", "raw_code": "private static void addLeafWithNonExistingParents(Spatial root,Spatial leaf){\n  if (!(root instanceof Node)) {\n    logger.log(Level.WARNING,\"Cannot add new Leaf {0} to {1}, is not a Node!\",new Object[]{leaf.getName(),root.getName()});\n    return;\n  }\n  for (Spatial s=leaf; s.getParent() != null; s=s.getParent()) {\n    Spatial parent=s.getParent();\n    Spatial other=findTaggedSpatial(root,parent);\n    if (other == null) {\n      continue;\n    }\n    if (other instanceof Node) {\n      logger.log(Level.INFO,\"Attaching {0} to {1} in root {2} to add leaf {3}\",new Object[]{s,other,root,leaf});\n      for (Spatial spt=leaf; spt != parent; spt=spt.getParent()) {\n        spt.setUserData(ORIGINAL_NAME,spt.getName());\n        spt.setUserData(ORIGINAL_PATH,getSpatialPath(spt));\n        spt=spt.getParent();\n      }\n      Node otherNode=(Node)other;\n      otherNode.attachChild(s);\n      logger.log(LogLevel.USERINFO,\"Attached Node {0} with leaf {0}\",new Object[]{other.getName(),leaf.getName()});\n      return;\n    }\n else {\n      logger.log(Level.WARNING,\"Cannot attach leaf {0} to found spatial {1} in root {2}, not a node.\",new Object[]{leaf,other,root});\n    }\n  }\n  logger.log(Level.WARNING,\"Could not attach new Leaf {0}, no root node found.\",leaf.getName());\n}"}
{"ids": "74154", "raw_code": "private void adjustBlockListeners(List<OBlock> oldRange,List<OBlock> newRange,Tracker tracker){\n  Iterator<OBlock> iter=newRange.iterator();\n  while (iter.hasNext()) {\n    OBlock b=iter.next();\n    if (oldRange.contains(b)) {\n      oldRange.remove(b);\n      continue;\n    }\n    addBlockListener(b,tracker);\n  }\n  iter=oldRange.iterator();\n  while (iter.hasNext()) {\n    removeBlockListener(iter.next(),tracker);\n  }\n}"}
{"ids": "9351", "raw_code": "static public String hexEncode(byte[] aInput){\n  StringBuffer result=new StringBuffer();\n  final char[] digits={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\n  for (int idx=0; idx < aInput.length; ++idx) {\n    byte b=aInput[idx];\n    result.append(digits[(b & 0xf0) >> 4]);\n    result.append(digits[b & 0x0f]);\n  }\n  return result.toString();\n}"}
{"ids": "2027", "raw_code": "private static Size clampSize(Size original,double maxArea,Size maxSize){\n  if (original.getWidth() * original.getHeight() < maxArea && original.getWidth() < maxSize.getWidth() && original.getHeight() < maxSize.getHeight()) {\n    return original;\n  }\n  double ratio=Math.min(Math.sqrt(maxArea / original.area()),1.0f);\n  int width=(int)Math.round(original.width() * ratio);\n  int height=(int)Math.round(original.height() * ratio);\n  if (width > maxSize.width() || height > maxSize.height()) {\n    return computeFitWithinSize(original,maxSize);\n  }\n  return new Size(width,height);\n}"}
{"ids": "48978", "raw_code": "TCPChannel(TCPTransport tr,TCPEndpoint ep){\n  this.tr=tr;\n  this.ep=ep;\n}"}
{"ids": "13529", "raw_code": "public static Face drawDir(Direction dir,MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){\nswitch (dir) {\ncase DOWN:\n    return drawDown(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);\ncase UP:\n  return drawUp(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);\ncase NORTH:\nreturn drawNorth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);\ncase SOUTH:\nreturn drawSouth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);\ncase EAST:\nreturn drawEast(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);\ncase WEST:\nreturn drawWest(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);\n}\nthrow new RenderException(\"Invalid draw direction!\");\n}"}
{"ids": "52647", "raw_code": "public MAVLinkMessage(MAVLinkSchema schema,ByteBuffer buffer) throws MAVLinkProtocolException, MAVLinkUnknownMessage, BufferUnderflowException {\n  if (buffer.remaining() < NON_PAYLOAD_LENGTH) {\n    throw new BufferUnderflowException();\n  }\n  int startPos=buffer.position();\n  byte startSign=buffer.get();\n  if (startSign != START_OF_FRAME) {\n    throw new MAVLinkProtocolException(String.format(\"Invalid start sign: %02x, should be %02x\",startSign,START_OF_FRAME));\n  }\n  int payloadLen=buffer.get() & 0xff;\n  if (buffer.remaining() < payloadLen + NON_PAYLOAD_LENGTH - 2) {\n    buffer.position(startPos);\n    throw new BufferUnderflowException();\n  }\n  sequence=buffer.get();\n  systemID=buffer.get() & 0xff;\n  componentID=buffer.get() & 0xff;\n  msgID=buffer.get() & 0xff;\n  this.schema=schema;\n  this.definition=schema.getMessageDefinition(msgID);\n  if (definition == null) {\n    buffer.position(buffer.position() + payloadLen + CRC_LENGTH);\n    throw new MAVLinkUnknownMessage(String.format(\"Unknown message: %s\",msgID));\n  }\n  if (payloadLen != definition.payloadLength) {\n    buffer.position(buffer.position() + payloadLen + CRC_LENGTH);\n    throw new MAVLinkUnknownMessage(String.format(\"Invalid payload len for msg %s (%s): %s, should be %s\",definition.name,msgID,payloadLen,definition.payloadLength));\n  }\n  this.payload=new byte[definition.payloadLength];\n  buffer.get(payload);\n  crc=Short.reverseBytes(buffer.getShort()) & 0xffff;\n  int endPos=buffer.position();\n  buffer.position(startPos);\n  int crcCalc=calculateCRC(buffer);\n  buffer.position(endPos);\n  if (crc != crcCalc) {\n    throw new MAVLinkUnknownMessage(String.format(\"CRC error for msg %s (%s): %02x, should be %02x\",definition.name,msgID,crc,crcCalc));\n  }\n  this.payloadBB=ByteBuffer.wrap(payload);\n  payloadBB.order(schema.getByteOrder());\n}"}
{"ids": "40179", "raw_code": "protected ScriptBuilder bigNum(long num){\n  return bigNum(chunks.size(),num);\n}"}
{"ids": "4920", "raw_code": "public final void change_entries(BrdTracep p_obj,Polyline p_new_polyline,int p_keep_at_start_count,int p_keep_at_end_count){\n  int compensated_half_width=p_obj.get_half_width() + get_clearance_compensation(p_obj.clearance_idx(),p_obj.get_layer());\n  ArrayList<ShapeTile> changed_shapes=offset_shapes(p_new_polyline,compensated_half_width,p_keep_at_start_count,p_new_polyline.plaline_len(-1) - p_keep_at_end_count);\n  int old_shape_count=p_obj.tree_shape_count(this);\n  int new_shape_count=changed_shapes.size() + p_keep_at_start_count + p_keep_at_end_count;\n  AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[new_shape_count];\n  ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[new_shape_count];\n  AwtreeNodeLeaf[] old_entries=p_obj.get_search_tree_entries(this);\n  for (int index=0; index < p_keep_at_start_count; ++index) {\n    new_leaf_arr[index]=old_entries[index];\n    new_precalculated_tree_shapes[index]=p_obj.get_tree_shape(this,index);\n  }\n  for (int index=p_keep_at_start_count; index < old_shape_count - p_keep_at_end_count; ++index) {\n    remove_leaf(old_entries[index]);\n  }\n  for (int i=0; i < p_keep_at_end_count; ++i) {\n    int new_index=new_shape_count - p_keep_at_end_count + i;\n    int old_index=old_shape_count - p_keep_at_end_count + i;\n    new_leaf_arr[new_index]=old_entries[old_index];\n    new_leaf_arr[new_index].shape_index_in_object=new_index;\n    new_precalculated_tree_shapes[new_index]=p_obj.get_tree_shape(this,old_index);\n  }\n  for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {\n    new_precalculated_tree_shapes[index]=changed_shapes.get(index - p_keep_at_start_count);\n  }\n  p_obj.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);\n  for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {\n    new_leaf_arr[index]=insert(p_obj,index);\n  }\n  p_obj.set_search_tree_entries(this,new_leaf_arr);\n}"}
{"ids": "82227", "raw_code": "public void paintComponentBackground(Graphics g){\n  super.paintComponentBackground(g);\n  int clipX=g.getClipX();\n  int clipY=g.getClipY();\n  int clipW=g.getClipWidth();\n  int clipH=g.getClipHeight();\n  int width=getWidth();\n  int height=getHeight();\n  int y=getY();\n  if (infinite) {\n    int blockSize=getWidth() / 5;\n    int x=getX() + (int)((((float)value) / ((float)maxValue - minValue)) * (getWidth() - blockSize));\n    g.clipRect(x,y,blockSize,height - 1);\n  }\n else {\n    if (vertical) {\n      int actualHeight=(int)((((float)value) / ((float)maxValue - minValue)) * getHeight());\n      y+=height - actualHeight;\n    }\n else {\n      width=(int)((((float)value) / ((float)maxValue - minValue)) * getWidth());\n    }\n    g.clipRect(getX(),y,width,height);\n  }\n  paintingFull=true;\n  super.paintComponentBackground(g);\n  paintingFull=false;\n  g.setClip(clipX,clipY,clipW,clipH);\n  if (thumbImage != null && !infinite) {\n    if (!vertical) {\n      int xPos=getX() + width - thumbImage.getWidth() / 2;\n      xPos=Math.max(getX(),xPos);\n      xPos=Math.min(getX() + getWidth() - thumbImage.getWidth(),xPos);\n      g.drawImage(thumbImage,xPos,y + height / 2 - thumbImage.getHeight() / 2);\n    }\n else {\n      int yPos=y;\n      g.drawImage(thumbImage,getX() + width / 2 - thumbImage.getWidth() / 2,yPos);\n    }\n  }\n}"}
{"ids": "70245", "raw_code": "public void addAction(EntityAction ea){\n  actions.addElement(ea);\n  processGameEvent(new GameNewActionEvent(this,ea));\n}"}
{"ids": "4480", "raw_code": "public static JSONObject readJSONObject(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return jsonArray.getJSONObject(index);\n  }\n  if (notNull && jsonArray.isNull(index)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));\n  }\n  JSONObject value=null;\n  if (!jsonArray.isNull(index)) {\n    value=jsonArray.getJSONObject(index);\n  }\n  return value;\n}"}
{"ids": "84852", "raw_code": "public static void waitElementToNotBePresent(SearchContext parent,By by,int waitInSeconds){\n  Preconditions.checkNotNull(parent);\n  Preconditions.checkNotNull(by);\n  try {\n    WebElementWait wait=new WebElementWait(parent,waitInSeconds);\n    wait.until(null);\n  }\n catch (  TimeoutException e) {\n    throw new TimeoutException(String.format(\"Element %s is still present after %s seconds\",by,waitInSeconds),e);\n  }\n}"}
{"ids": "61858", "raw_code": "public boolean isVimeoURLValid(){\n  String videoID=getExtractedIdentifier();\n  return videoID.length() > 0 && TextUtils.isDigitsOnly(videoID);\n}"}
{"ids": "59560", "raw_code": "private void updateDownloadedFiles(SQLiteDatabase db,String newAccountName,String oldAccountName){\n  String whereClause=ProviderTableMeta.FILE_ACCOUNT_OWNER + \"=? AND \" + ProviderTableMeta.FILE_STORAGE_PATH+ \" IS NOT NULL\";\n  Cursor c=db.query(ProviderTableMeta.FILE_TABLE_NAME,null,whereClause,new String[]{newAccountName},null,null,null);\n  try {\n    if (c.moveToFirst()) {\n      String oldAccountPath=FileStorageUtils.getSavePath(oldAccountName);\n      String newAccountPath=FileStorageUtils.getSavePath(newAccountName);\n      File oldAccountFolder=new File(oldAccountPath);\n      File newAccountFolder=new File(newAccountPath);\n      oldAccountFolder.renameTo(newAccountFolder);\n      do {\n        String oldPath=c.getString(c.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH));\n        OCFile file=new OCFile(c.getString(c.getColumnIndex(ProviderTableMeta.FILE_PATH)));\n        String newPath=FileStorageUtils.getDefaultSavePathFor(newAccountName,file);\n        ContentValues cv=new ContentValues();\n        cv.put(ProviderTableMeta.FILE_STORAGE_PATH,newPath);\n        db.update(ProviderTableMeta.FILE_TABLE_NAME,cv,ProviderTableMeta.FILE_STORAGE_PATH + \"=?\",new String[]{oldPath});\n        Log_OC.v(\"SQL\",\"Updated path of downloaded file: old file name == \" + oldPath + \", new file name == \"+ newPath);\n      }\n while (c.moveToNext());\n    }\n  }\n  finally {\n    c.close();\n  }\n}"}
{"ids": "64365", "raw_code": "public void dumpOptions(){\n  logger.info(\"\");\n  for (  Method getter : GetConfigurationInterface.class.getMethods()) {\n    String getterName=getter.getName();\n    try {\n      Object result=getter.invoke(ConfigurationManager.getCurrentProfile());\n      if (result instanceof Boolean) {\n        result=LocalizationHelper.getYesOrNo((Boolean)result);\n      }\n      if (result instanceof List) {\n        for (int i=0; i < ((List)result).size(); i++) {\n          assert ((List)result).get(i) instanceof CustomCatalogEntry;\n          CustomCatalogEntry c=((List<CustomCatalogEntry>)result).get(i);\n          String OptionName=Helper.pad(Localization.Main.getText(\"gui.tab6.label\") + \" [\" + (i + 1)+ \"], \"+ c.getAtTop().toString(),' ',50) + \" : \";\n          logger.info(OptionName + c.getLabel() + \" (\"+ c.getValue().toString()+ \"), \"+ c.getAtTop().toString());\n        }\n      }\n else {\n        String optionName=getterName.substring(3);\n        dumpOption(optionName,result);\n      }\n    }\n catch (    IllegalAccessException e) {\n      logger.warn(\"\",e);\n    }\ncatch (    InvocationTargetException e) {\n      logger.warn(\"\",e);\n    }\n  }\n  logger.info(\"\");\n}"}
{"ids": "83520", "raw_code": "private JsonNode parseLanguageResource(Resource resource) throws IOException {\n  InputStream stream=resource.asStream();\n  if (stream == null)   return null;\n  try {\n    JsonNode tree=mapper.readTree(stream);\n    return tree;\n  }\n  finally {\n    stream.close();\n  }\n}"}
{"ids": "34315", "raw_code": "public Collection<Tuple2<TransitionState,Double>> startStates(){\n  List<Tuple2<TransitionState,Double>> result=new ArrayList<Tuple2<TransitionState,Double>>();\n{\n    double score=Math.log(LINE_MRGN_PROB);\n    addNoSubGlyphStartState(result,new int[0],TransitionStateType.LMRGN,-1,score);\n  }\n  for (int destLanguage=0; destLanguage < numLanguages; ++destLanguage) {\n    SingleLanguageModel destLM=lm.get(destLanguage);\n    double destLanguagePrior=lm.languagePrior(destLanguage);\n    for (    int c : destLM.getActiveCharacters()) {\n      if (c != spaceCharIndex) {\n        double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(getNgramProb(destLM,new int[0],c)) + Math.log(destLanguagePrior);\n        addGlyphStartStates(result,c,new int[]{c},TransitionStateType.TMPL,destLanguage,score);\n      }\n    }\n  }\n{\n    double totalSpaceProb=0.0;\n    for (int language=0; language < numLanguages; ++language)     totalSpaceProb+=getNgramProb(lm.get(language),new int[0],spaceCharIndex) * lm.languagePrior(language);\n    double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(totalSpaceProb);\n    addNoSubGlyphStartState(result,new int[]{spaceCharIndex},TransitionStateType.TMPL,-1,score);\n  }\n  return result;\n}"}
{"ids": "61926", "raw_code": "public KernelDensityFunction(Collection<double[]> points){\n  this(points.toArray(new double[points.size()][]));\n}"}
{"ids": "44524", "raw_code": "private static Object cloneSerializableObject(Object o) throws IOException, ClassNotFoundException {\n  ByteArrayOutputStream b=new ByteArrayOutputStream();\n  ObjectOutputStream out=new ObjectOutputStream(b);\n  out.writeObject(o);\n  out.flush();\n  out.close();\n  ByteArrayInputStream bi=new ByteArrayInputStream(b.toByteArray());\n  ObjectInputStream in=new ObjectInputStream(bi);\n  return in.readObject();\n}"}
{"ids": "15186", "raw_code": "private T matchTokens(String targetToken,String requestToken){\n  int wildcardIndex=0;\n  if (targetToken == null && requestToken == null) {\n    return exactMatch;\n  }\n  if (targetToken == null || requestToken == null) {\n    return noMatch;\n  }\n  int beginTargetIndex=0;\n  int beginRequestIndex=0;\n  String substr=null;\n  int targetTokenLength=targetToken.length();\n  int requestTokenLength=requestToken.length();\n  if (targetToken.indexOf(oneLevelWildcard,beginTargetIndex) != -1) {\n    while ((wildcardIndex=targetToken.indexOf(oneLevelWildcard,beginTargetIndex)) != -1) {\n      if (wildcardIndex > beginTargetIndex) {\n        substr=targetToken.substring(beginTargetIndex,wildcardIndex);\n        if ((beginRequestIndex=requestToken.indexOf(substr,beginRequestIndex)) == -1) {\n          return noMatch;\n        }\n        beginTargetIndex=beginTargetIndex + substr.length() + oneLevelWildcardLength;\n        beginRequestIndex=beginRequestIndex + substr.length();\n      }\n else {\n        if (wildcardIndex == beginTargetIndex) {\n          if (targetTokenLength == oneLevelWildcardLength) {\n            return wildcardMatch;\n          }\n else {\n            beginTargetIndex=beginTargetIndex + oneLevelWildcardLength;\n            continue;\n          }\n        }\n      }\n    }\n    if (beginTargetIndex >= targetTokenLength) {\n      return wildcardMatch;\n    }\n    String targetStr=targetToken.substring(beginTargetIndex,targetTokenLength);\n    String remRequest=requestToken.substring(beginRequestIndex,requestTokenLength);\n    int remRequestIndex=-1;\n    if ((remRequestIndex=remRequest.lastIndexOf(targetStr,remRequest.length() - 1)) == -1) {\n      return noMatch;\n    }\n else {\n      beginRequestIndex=beginRequestIndex + remRequestIndex;\n      if (beginRequestIndex + targetStr.length() >= requestTokenLength) {\n        return wildcardMatch;\n      }\n else {\n        return noMatch;\n      }\n    }\n  }\n else {\n    if (targetToken.equals(requestToken)) {\n      return exactMatch;\n    }\n  }\n  return noMatch;\n}"}
{"ids": "42378", "raw_code": "public void addVertex(ValueGraphVertex v){\n  if (vertices.add(v)) {\n    if (v.representsParameter()) {\n      nParameter++;\n    }\n    if (representativeV == null) {\n      representativeV=v;\n    }\n  }\n}"}
{"ids": "77145", "raw_code": "public Set<String> files(){\n  if (setFiles == null) {\n    throw new IllegalStateException(\"files were not computed yet\");\n  }\n  return Collections.unmodifiableSet(setFiles);\n}"}
{"ids": "76250", "raw_code": "private boolean isAssignableFrom(Throwable concreteThrowable,Set<Class<? extends Throwable>> throwableClasses){\n  for (  Class<? extends Throwable> t : throwableClasses) {\n    if (t.isAssignableFrom(concreteThrowable.getClass())) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "84155", "raw_code": "protected void print(int v) throws IOException {\n  print(String.valueOf(v));\n}"}
{"ids": "34091", "raw_code": "public Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap(){\n  List<ItemSet> itemSets=learn();\n  Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap=new Object2DoubleOpenHashMap<>(itemSets.size());\n  for (  ItemSet itemSet : itemSets) {\n    IntRBTreeSet itemSetCopy=new IntRBTreeSet(itemSet.items);\n    confidenceMap.put(itemSetCopy,itemSet.support / (double)setCount);\n  }\n  return confidenceMap;\n}"}
{"ids": "1154", "raw_code": "public static boolean isAllAlpha(String str){\n  if (str == null)   return false;\n  for (int i=str.length() - 1; i >= 0; i--) {\n    if (!Character.isLetter(str.charAt(i)))     return false;\n  }\n  return true;\n}"}
{"ids": "52803", "raw_code": "private void extract(int minsupp,int minlength,int maxlength,int item,int[] postfix,int plen,int[] buf2,int[] buf3,boolean destruct,Collector col){\n  if (header[item] == null) {\n    return;\n  }\n  if (header[item].sibling == null) {\n    if (header[item].count < minsupp) {\n      return;\n    }\n    extractLinear(header[item].count,minsupp,minlength,maxlength,item,postfix,plen,buf2,col);\n    if (destruct) {\n      Arrays.fill(header,null);\n    }\n    return;\n  }\n  int support=0;\n  for (FPNode cur=header[item]; cur != null; cur=cur.sibling) {\n    support+=cur.count;\n  }\n  if (support < minsupp) {\n    return;\n  }\n  Arrays.fill(buf3,0);\n  for (FPNode cur=header[item]; cur != null; cur=cur.sibling) {\n    for (FPNode parent=cur.parent; parent.key >= 0; parent=parent.parent) {\n      buf3[parent.key]+=cur.count;\n    }\n  }\n  final int mminlength=minlength - (plen + 1);\n  if (mminlength > 0) {\n    int fparents=0;\n    for (int i=0; i < item; i++) {\n      if (buf3[i] >= minsupp) {\n        fparents+=1;\n      }\n    }\n    if (fparents < mminlength) {\n      return;\n    }\n  }\n  final int last=item - 1;\n  FPTree proj=new FPTree(item);\n  for (FPNode cur=header[item]; cur != null; cur=cur.sibling) {\n    int j=buf2.length;\n    for (FPNode parent=cur.parent; parent.key >= 0; parent=parent.parent) {\n      if (buf3[parent.key] >= minsupp) {\n        buf2[--j]=parent.key;\n      }\n    }\n    if (buf2.length - j >= mminlength) {\n      proj.insert(proj,buf2,j,buf2.length,cur.count);\n    }\n  }\n  proj.reduceMemory();\n  postfix[plen++]=item;\n  if (plen >= minlength && plen <= maxlength) {\n    col.collect(support,postfix,0,plen);\n  }\n  for (int j=last; j >= 0; j--) {\n    proj.extract(minsupp,minlength,maxlength,j,postfix,plen,buf2,buf3,destruct,col);\n  }\n  if (destruct) {\n    header[item]=null;\n  }\n}"}
{"ids": "45232", "raw_code": "public void save(File keyStore,String type,char[] password,char[] keyPassword,String caAlias) throws GeneralSecurityException, IOException {\n  KeyStore store=KeyStore.getInstance(type);\n  store.load(null,password);\n  store.setKeyEntry(caAlias,caKey,keyPassword,caCerts);\n  OutputStream out=new FileOutputStream(keyStore);\n  try {\n    store.store(out,password);\n  }\n catch (  IOException ioe) {\n    ioe.printStackTrace();\n  }\n finally {\n    out.close();\n  }\n}"}
{"ids": "56376", "raw_code": "public OrQueryBuilder add(QueryBuilder filterBuilder){\n  filters.add(filterBuilder);\n  return this;\n}"}
{"ids": "4915", "raw_code": "public final boolean split_traces_keep_point(){\n  if (keep_point == null)   return false;\n  ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES);\n  Collection<BrdItem> picked_items=r_board.pick_items(keep_point.keep_point,keep_point.on_layer,filter);\n  for (  BrdItem curr_item : picked_items) {\n    BrdTracep a_trace=(BrdTracep)curr_item;\n    int line_idx=a_trace.polyline_find_line_idx(keep_point.keep_point);\n    if (line_idx < 1)     continue;\n    ArrayList<BrdTracep> clean_list=a_trace.split_with_end_point(line_idx,keep_point.keep_point);\n    return clean_list.size() > 0;\n  }\n  return false;\n}"}
{"ids": "5974", "raw_code": "public static byte[] flipAllBitsInPlace(byte[] bytes,int index,int length){\n  int endIndex=Math.min(bytes.length,index + length);\n  for (int i=index; i < endIndex; i++) {\n    bytes[i]=(byte)(bytes[i] ^ 0xff);\n  }\n  return bytes;\n}"}
{"ids": "5180", "raw_code": "private void addUsers(User[] users,LocalConfiguration configuration){\n  for (  User user : users) {\n    configuration.addUser(user.createUser());\n  }\n}"}
{"ids": "53728", "raw_code": "void tryToDrainBuffers(){\n  if (evictionLock.tryLock()) {\n    try {\n      drainStatus.lazySet(PROCESSING);\n      drainBuffers();\n    }\n  finally {\n      drainStatus.compareAndSet(PROCESSING,IDLE);\n      evictionLock.unlock();\n    }\n  }\n}"}
{"ids": "62908", "raw_code": "public static boolean copyFile(File source,File dest){\n  File parentDest=dest.getParentFile();\n  if (!parentDest.exists()) {\n    if (!createDirectory(parentDest.getAbsolutePath())) {\n      return false;\n    }\n  }\n  try {\n    Files.copy(source.toPath(),dest.toPath());\n    return true;\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    return false;\n  }\n}"}
{"ids": "67629", "raw_code": "@Override public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException {\n  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);\n  if (mimeType != null) {\n    attrs.add(new XmlWriter.Attribute(\"type\",mimeType.getMediaType()));\n  }\n  if (uri != null) {\n    attrs.add(new XmlWriter.Attribute(\"url\",uri));\n  }\n  if (length != -1) {\n    attrs.add(new XmlWriter.Attribute(\"length\",Long.toString(length)));\n  }\n  w.simpleElement(Namespaces.rssNs,\"enclosure\",attrs,null);\n}"}
{"ids": "78354", "raw_code": "public static boolean deleteDirectory(final File path){\n  if (path.exists()) {\n    File[] files=path.listFiles();\n    for (    File file : files) {\n      if (file.isDirectory()) {\n        deleteDirectory(file);\n      }\n else {\n        file.delete();\n      }\n    }\n  }\n  return path.delete();\n}"}
{"ids": "82038", "raw_code": "public void morph(Component source,Component destination,int duration,Runnable onCompletion){\n  morph(source,destination,duration,false,onCompletion);\n}"}
{"ids": "33054", "raw_code": "private boolean startsNewHunk(String string){\n  if (string.length() == 0)   return true;\n  return isLegalChar(string.charAt(0));\n}"}
{"ids": "67878", "raw_code": "public void clearValues(){\n  valueMap.clear();\n}"}
{"ids": "68843", "raw_code": "private HashMap<String,byte[]> readChars(byte[] d){\n  HashMap<String,byte[]> hm=new HashMap<String,byte[]>();\n  int i=findSlashName(d,\"CharStrings\");\n  if (i < 0) {\n    return hm;\n  }\n  PSParser psp=new PSParser(d,i);\n  while (true) {\n    String s=psp.readThing();\n    char c=s.charAt(0);\n    if (c == '/') {\n      int len=Integer.parseInt(psp.readThing());\n      String go=psp.readThing();\n      if (go.equals(\"-|\") || go.equals(\"RD\")) {\n        psp.setLoc(psp.getLoc() + 1);\n        byte[] line=psp.getNEncodedBytes(len,password,lenIV);\n        hm.put(s.substring(1),line);\n      }\n    }\n else     if (s.equals(\"end\")) {\n      break;\n    }\n  }\n  return hm;\n}"}
{"ids": "13968", "raw_code": "public static byte[] stringToByteArray(String input){\n  char chars[]=input.toCharArray();\n  byte bytes[]=new byte[chars.length];\n  for (int i=0; i < chars.length; i++) {\n    bytes[i]=(byte)chars[i];\n  }\n  return bytes;\n}"}
{"ids": "9310", "raw_code": "public void playFileForUser(String fileName,String userName) throws SoundPlaybackException {\n  if (userName == null || userName.isEmpty()) {\n    userName=appProperties.getProperty(\"username_to_join_channel\");\n  }\n  try {\n    Guild guild=getUsersGuild(userName);\n    joinUsersCurrentChannel(userName);\n    playFile(fileName,guild);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "54446", "raw_code": "public void addValueKeyName(String key){\n  valueKeyNames.add(key);\n}"}
{"ids": "52840", "raw_code": "public Assignment update(Border border){\n  Arrays.sort(cs);\n  int j=1;\n  boolean found=(cs[0].core == border.core);\n  for (int i=1; i < cs.length; i++) {\n    if (cs[i].core != cs[i - 1].core) {\n      cs[j++]=cs[i];\n    }\n    found|=(cs[i].core == border.core);\n  }\n  if (found) {\n    if (j == 1) {\n      Border r=cs[0];\n      cs=null;\n      return r;\n    }\n    if (j < cs.length) {\n      cs=Arrays.copyOf(cs,j);\n    }\n    return this;\n  }\n  if (j + 1 != cs.length) {\n    cs=Arrays.copyOf(cs,j + 1);\n  }\n  cs[j]=border;\n  return this;\n}"}
{"ids": "13325", "raw_code": "public static String fromChar(int value){\n  if (value > 0xffff)   return null;\n  String name;\n  initialize();\n  name=(String)_byChar.get(new Integer(value));\n  return name;\n}"}
{"ids": "53994", "raw_code": "public static List<String> splitLines(final String content){\n  if (content == null || content.length() == 0)   return Collections.emptyList();\n  String[] lines=content.split(\"[\\\\r]?\\\\n\");\n  return Arrays.asList(lines);\n}"}
{"ids": "7482", "raw_code": "@Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState state,PlotRenderingInfo info){\n  boolean b1=(area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n  boolean b2=(area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n  if (b1 || b2) {\n    return;\n  }\n  if (info != null) {\n    info.setPlotArea(area);\n  }\n  RectangleInsets insets=getInsets();\n  insets.trim(area);\n  drawChipGrid(g2,area);\n  drawWaferEdge(g2,area);\n}"}
{"ids": "73553", "raw_code": "private static void registerComponents(){\n  registerComponent(BarChartComponent.class,BarChartGui.class);\n  registerComponent(DocViewerComponent.class,DocViewerDesktopComponent.class);\n  registerComponent(ConsoleComponent.class,ConsoleDesktopComponent.class);\n  registerComponent(DisplayComponent.class,DisplayComponentDesktopGui.class);\n  registerComponent(DataWorldComponent.class,DataWorldDesktopComponent.class);\n  registerComponent(HistogramComponent.class,HistogramGui.class);\n  registerComponent(NetworkComponent.class,NetworkDesktopComponent.class);\n  registerComponent(OdorWorldComponent.class,OdorWorldDesktopComponent.class);\n  registerComponent(PieChartComponent.class,PieChartGui.class);\n  registerComponent(ProjectionComponent.class,ProjectionGui.class);\n  registerComponent(ReaderComponent.class,ReaderComponentDesktopGui.class);\n  registerComponent(ScatterPlotComponent.class,ScatterPlotGui.class);\n  registerComponent(TimeSeriesPlotComponent.class,TimeSeriesPlotGui.class);\n  registerComponent(RasterPlotComponent.class,RasterPlotGui.class);\n  registerComponent(VisionWorldComponent.class,VisionWorldDesktopComponent.class);\n  registerComponent(GameComponent.class,GameDesktopComponent.class);\n  registerComponent(DeviceInteractionComponent.class,DeviceInteractionDesktopComponent.class);\n}"}
{"ids": "46081", "raw_code": "private long skipInputBytes(long n) throws IOException {\n  cbLock.lock();\n  try {\n    return iis.skipBytes(n);\n  }\n  finally {\n    cbLock.unlock();\n  }\n}"}
{"ids": "9627", "raw_code": "public byte[] generate64BitHashId() throws CryptoException {\n  try {\n    DERBitString publicKeyBitString=encodePublicKeyAsBitString(publicKey);\n    byte[] hash=DigestUtil.getMessageDigest(publicKeyBitString.getBytes(),DigestType.SHA1);\n    byte[] subHash=Arrays.copyOfRange(hash,12,20);\n    subHash[0]&=0x0F;\n    subHash[0]|=0x40;\n    return subHash;\n  }\n catch (  IOException ex) {\n    throw new CryptoException(res.getString(\"NoGenerateKeyIdentifier.exception.message\"),ex);\n  }\n}"}
{"ids": "72075", "raw_code": "public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,OptionalRelationDefinition<C,S> r) throws ArgumentException {\n  return new CreateSubCommandHandler<>(parser,p,r,null,p.child(r));\n}"}
{"ids": "39540", "raw_code": "private Figure readLineElement(IXMLElement elem) throws IOException {\n  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();\n  readCoreAttributes(elem,a);\n  readTransformAttribute(elem,a);\n  readOpacityAttribute(elem,a);\n  readLineAttributes(elem,a);\n  if (FILL_COLOR.get(a) != null && STROKE_COLOR.get(a) == null) {\n    STROKE_COLOR.put(a,FILL_COLOR.get(a));\n  }\n  if (FILL_GRADIENT.get(a) != null && STROKE_GRADIENT.get(a) == null) {\n    STROKE_GRADIENT.put(a,FILL_GRADIENT.get(a));\n  }\n  FILL_COLOR.put(a,null);\n  FILL_GRADIENT.put(a,null);\n  double x1=toNumber(elem,readAttribute(elem,\"x1\",\"0\"));\n  double y1=toNumber(elem,readAttribute(elem,\"y1\",\"0\"));\n  double x2=toNumber(elem,readAttribute(elem,\"x2\",\"0\"));\n  double y2=toNumber(elem,readAttribute(elem,\"y2\",\"0\"));\n  Figure figure=factory.createLine(x1,y1,x2,y2,a);\n  elementObjects.put(elem,figure);\n  return figure;\n}"}
{"ids": "78266", "raw_code": "public boolean isSetCallType(){\n  return __isset_bit_vector.get(__CALLTYPE_ISSET_ID);\n}"}
{"ids": "81249", "raw_code": "private IBuffer mapSource(SourceMapper mapper,IBinaryType info,IClassFile bufferOwner){\n  char[] contents=mapper.findSource(getType(),info);\n  if (contents != null) {\n    IBuffer buffer=BufferManager.createBuffer(bufferOwner);\n    if (buffer == null)     return null;\n    BufferManager bufManager=getBufferManager();\n    bufManager.addBuffer(buffer);\n    if (buffer.getCharacters() == null) {\n      buffer.setContents(contents);\n    }\n    buffer.addBufferChangedListener(this);\n    mapper.mapSource(getOuterMostEnclosingType(),contents,info);\n    return buffer;\n  }\n else {\n    IBuffer buffer=BufferManager.createNullBuffer(bufferOwner);\n    if (buffer == null)     return null;\n    BufferManager bufManager=getBufferManager();\n    bufManager.addBuffer(buffer);\n    buffer.addBufferChangedListener(this);\n    return buffer;\n  }\n}"}
{"ids": "75012", "raw_code": "public JFileDataStoreChooser(Shell parent,int style,final List<String> extensions){\n  this(parent,style,associations(extensions));\n}"}
{"ids": "21461", "raw_code": "private void computeStaticLoadMetrics(AccessProfile accessProfile) throws BaseCollectionException {\n  URI storageSystemId=accessProfile.getSystemId();\n  StorageSystem storageSystem=null;\n  try {\n    storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);\n    _logger.info(\"started computeStaticLoadMetrics for storagesystem: {}\",storageSystem.getLabel());\n    VNXeApiClient client=getVnxUnityClient(accessProfile);\n    List<VNXeNasServer> nasServers=client.getNasServers();\n    for (    VNXeNasServer nasServer : nasServers) {\n      if ((nasServer.getMode() == VNXeNasServer.NasServerModeEnum.DESTINATION) || nasServer.getIsReplicationDestination()) {\n        _logger.debug(\"Found a replication destination NasServer\");\n        continue;\n      }\n      if (nasServer.getIsSystem()) {\n        continue;\n      }\n      VirtualNAS virtualNAS=findvNasByNativeId(storageSystem,nasServer.getId());\n      if (virtualNAS != null) {\n        _logger.info(\"Process db metrics for nas server : {}\",nasServer.getName());\n        StringMap dbMetrics=virtualNAS.getMetrics();\n        if (dbMetrics == null) {\n          dbMetrics=new StringMap();\n        }\n        StringMap tmpDbMetrics=populateDbMetrics(nasServer,client);\n        dbMetrics.putAll(tmpDbMetrics);\n        virtualNAS.setMetrics(dbMetrics);\n        _dbClient.updateObject(virtualNAS);\n      }\n    }\n  }\n catch (  Exception e) {\n    _logger.error(\"CollectStatisticsInformation failed. Storage system: {}\",storageSystemId,e);\n  }\n}"}
{"ids": "82418", "raw_code": "public final short readShort() throws java.io.IOException {\n  readFully(scratch,0,2);\n  return (short)((scratch[0] << 8) | (scratch[1] & 0xff));\n}"}
{"ids": "35693", "raw_code": "public static PronghornStage findStageByPath(GraphManager m,int... path){\n  int ordinal=path[0];\n  int i=0;\n  int limit=m.stageIdToStage.length;\n  while (i < limit) {\n    if (null != m.stageIdToStage[i]) {\n      if (-1 == m.multInputIds[m.stageIdToInputsBeginIdx[m.stageIdToStage[i].stageId]]) {\n        if (--ordinal <= 0) {\n          return findStageByPath(m,m.stageIdToStage[i],1,path);\n        }\n      }\n    }\n    i++;\n  }\n  throw new UnsupportedOperationException(\"Unable to find ordinal input stage of \" + path[0]);\n}"}
{"ids": "37731", "raw_code": "public static double[] calculateTStats(double[] coef,double[] stderror,int k){\n  double[] result=new double[k];\n  for (int i=0; i < k; i++) {\n    result[i]=coef[i] / stderror[i];\n  }\n  return result;\n}"}
{"ids": "35209", "raw_code": "static void runBootstrappers(final CoreEarlyComponent early,final List<HeroicBootstrap> bootstrappers) throws Exception {\n  for (  final HeroicBootstrap bootstrap : bootstrappers) {\n    try {\n      bootstrap.run(early);\n    }\n catch (    Exception e) {\n      throw new Exception(\"Failed to run bootstrapper \" + bootstrap,e);\n    }\n  }\n}"}
{"ids": "38547", "raw_code": "protected void saveBuffer(String name){\n  StringBuffer sb=m_History.getNamedBuffer(name);\n  if (sb != null) {\n    if (m_SaveOut.save(sb)) {\n      m_Log.logMessage(\"Save successful.\");\n    }\n  }\n}"}
{"ids": "22069", "raw_code": "public List<Recommendation> scheduleStorage(VirtualArray srcVarray,Set<URI> requestedVPlexSystems,URI srcStorageSystem,VirtualPool srcVpool,boolean isHARequest,VirtualArray requestedHaVarray,VirtualPool haVpool,VirtualPoolCapabilityValuesWrapper capabilities,Project project,VpoolUse vpoolUse,Map<VpoolUse,List<Recommendation>> currentRecommendations){\n  _log.info(\"Executing VPlex high availability placement strategy\");\n  if (!isHARequest) {\n    return scheduleStorageForLocalVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,capabilities,project,vpoolUse,currentRecommendations);\n  }\n else {\n    return scheduleStorageForDistributedVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,requestedHaVarray,haVpool,capabilities,project,vpoolUse,currentRecommendations);\n  }\n}"}
{"ids": "78854", "raw_code": "@NotNull public static List<String> completeRelativePath(@NotNull String baseDir,@NotNull String shownBaseDir,@NotNull String relativePath){\n  List<String> result=Lists.newLinkedList();\n  String bashBaseDir=OSUtil.toBashCompatible(baseDir);\n  for (  String path : completeAbsolutePath(baseDir + File.separator + relativePath,Predicates.<File>alwaysTrue())) {\n    if (path.startsWith(bashBaseDir)) {\n      result.add(shownBaseDir + path.substring(bashBaseDir.length()));\n    }\n  }\n  return result;\n}"}
{"ids": "35353", "raw_code": "protected boolean isFileSpecifyingModuleSpecifier(String specifier){\n  return specifier.length() > 0 && specifier.charAt(specifier.length() - 1) != IPath.SEPARATOR;\n}"}
{"ids": "21493", "raw_code": "private void insertExpectedPoolSettingsPerTier(CIMObjectPath capabilitiesPath,Map<String,Object> keyMap){\n  List<String> expectedPoolSettingsTier=(List<String>)keyMap.get(Constants.VNXPOOLCAPABILITIES_TIER);\n  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.NO_DATA_MOVEMENT);\n  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.AUTO_TIER);\n  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.HIGH_AVAILABLE_TIER);\n  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.LOW_AVAILABLE_TIER);\n  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.START_HIGH_THEN_AUTO_TIER);\n}"}
{"ids": "33185", "raw_code": "private static final void transferStreams(InputStream source,OutputStream destination,String path,IProgressMonitor monitor) throws CoreException {\n  monitor=Policy.monitorFor(monitor);\n  try {\nsynchronized (buffer) {\n      while (true) {\n        int bytesRead=-1;\n        try {\n          bytesRead=source.read(buffer);\n        }\n catch (        IOException e) {\n          String msg=NLS.bind(Messages.failedReadDuringWrite,path);\n          Policy.error(EFS.ERROR_READ,msg,e);\n        }\n        try {\n          if (bytesRead == -1) {\n            destination.close();\n            break;\n          }\n          destination.write(buffer,0,bytesRead);\n        }\n catch (        IOException e) {\n          String msg=NLS.bind(Messages.couldNotWrite,path);\n          Policy.error(EFS.ERROR_WRITE,msg,e);\n        }\n        monitor.worked(1);\n      }\n    }\n  }\n  finally {\n    Policy.safeClose(source);\n    Policy.safeClose(destination);\n  }\n}"}
{"ids": "4365", "raw_code": "private int pathPositionAtLevel(int orgUnitLevel){\n  return (orgUnitLevel - 1) * 12 + 2;\n}"}
{"ids": "37746", "raw_code": "protected void addNumericTrainClass(double classValue,double weight){\n  if (classValue > m_MaxTarget) {\n    m_MaxTarget=classValue;\n  }\n  if (classValue < m_MinTarget) {\n    m_MinTarget=classValue;\n  }\n  if (m_TrainClassVals == null) {\n    m_TrainClassVals=new double[100];\n    m_TrainClassWeights=new double[100];\n  }\n  if (m_NumTrainClassVals == m_TrainClassVals.length) {\n    double[] temp=new double[m_TrainClassVals.length * 2];\n    System.arraycopy(m_TrainClassVals,0,temp,0,m_TrainClassVals.length);\n    m_TrainClassVals=temp;\n    temp=new double[m_TrainClassWeights.length * 2];\n    System.arraycopy(m_TrainClassWeights,0,temp,0,m_TrainClassWeights.length);\n    m_TrainClassWeights=temp;\n  }\n  m_TrainClassVals[m_NumTrainClassVals]=classValue;\n  m_TrainClassWeights[m_NumTrainClassVals]=weight;\n  m_NumTrainClassVals++;\n}"}
{"ids": "9166", "raw_code": "private List<Group> parseGroups(JSONArray groups,String groupType) throws JSONException, AdeUsageException {\n  if (groups.length() == 0)   throw new AdeUsageException(\"No groups specified for group of type \" + groupType);\n  List<Group> currentGroups=new ArrayList<Group>();\n  for (int i=0; i < groups.length(); i++) {\n    JSONObject group=groups.getJSONObject(i);\n    String name=group.getString(\"name\");\n    String dataType=group.getString(\"dataType\");\n    short evalOrder=group.getShort(\"evaluationOrder\");\n    String ruleName=group.getString(\"ruleName\");\n    if (!verifyStringParam(name,200,\"[a-zA-Z0-9_ ]*\") || name.equalsIgnoreCase(\"unassigned\") || !validateDataType(dataType)|| evalOrder < 1 || !verifyStringParam(ruleName,200,\"[a-zA-Z0-9_ ]*\")) {\n      throw new AdeUsageException(\"Invalid parameters for a group of type \" + groupType + \" was specified\");\n    }\n    currentGroups.add(new Group(name,GroupType.valueOf(groupType),DataType.valueOf(dataType.toUpperCase()),evalOrder,ruleName));\n  }\n  validateEvaluationOrderAndName(currentGroups);\n  return currentGroups;\n}"}
{"ids": "43244", "raw_code": "public DoubleFft1d(int n){\n  if (n < 1) {\n    throw new IllegalArgumentException(\"n must be greater than 0\");\n  }\n  this.n=n;\n  if (!ConcurrencyUtils.isPowerOf2(n)) {\n    if (getReminder(n,factors) >= 211) {\n      plan=Plans.BLUESTEIN;\n      nBluestein=ConcurrencyUtils.nextPow2(n * 2 - 1);\n      bk1=new double[2 * nBluestein];\n      bk2=new double[2 * nBluestein];\n      this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(nBluestein + 0.5) / Math.log(2)) / 2))];\n      this.w=new double[nBluestein];\n      int twon=2 * nBluestein;\n      nw=ip[0];\n      if (twon > (nw << 2)) {\n        nw=twon >> 2;\n        makewt(nw);\n      }\n      nc=ip[1];\n      if (nBluestein > (nc << 2)) {\n        nc=nBluestein >> 2;\n        makect(nc,w,nw);\n      }\n      bluesteini();\n    }\n else {\n      plan=Plans.MIXED_RADIX;\n      wtable=new double[4 * n + 15];\n      wtable_r=new double[2 * n + 15];\n      cffti();\n      rffti();\n    }\n  }\n else {\n    plan=Plans.SPLIT_RADIX;\n    this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(n + 0.5) / Math.log(2)) / 2))];\n    this.w=new double[n];\n    int twon=2 * n;\n    nw=ip[0];\n    if (twon > (nw << 2)) {\n      nw=twon >> 2;\n      makewt(nw);\n    }\n    nc=ip[1];\n    if (n > (nc << 2)) {\n      nc=n >> 2;\n      makect(nc,w,nw);\n    }\n  }\n}"}
{"ids": "9637", "raw_code": "@Override public void dragGestureRecognized(DragGestureEvent evt){\n  DragEntry dragEntry=kseFrame.dragSelectedEntry();\n  if (dragEntry == null) {\n    return;\n  }\n  ImageIcon icon=dragEntry.getImage();\n  Toolkit toolkit=Toolkit.getDefaultToolkit();\n  Dimension dim=toolkit.getBestCursorSize(icon.getIconWidth(),icon.getIconHeight());\n  BufferedImage buffImage=new BufferedImage(dim.width,dim.height,BufferedImage.TYPE_INT_ARGB_PRE);\n  icon.paintIcon(evt.getComponent(),buffImage.getGraphics(),0,0);\n  cursor=toolkit.createCustomCursor(buffImage,new Point(0,0),\"keystore-entry\");\n  evt.startDrag(cursor,new KeyStoreEntryTransferable(dragEntry),this);\n}"}
{"ids": "10102", "raw_code": "public static boolean isIdentifierHelperChar(char ch){\n  return ':' == ch || '.' == ch || '-' == ch || '_' == ch;\n}"}
{"ids": "52721", "raw_code": "public void addHeader(String line){\n  header.add(line);\n}"}
{"ids": "36814", "raw_code": "public static IAddress loadAddress(final ResultSet resultSet,final String columnName) throws SQLException {\n  Preconditions.checkNotNull(resultSet,\"IE00500: Result set argument can not be null\");\n  Preconditions.checkNotNull(columnName,\"IE00501: Column name argument can not be null\");\n  final String addressString=readString(resultSet,columnName);\n  return resultSet.wasNull() ? null : new CAddress(new BigInteger(addressString));\n}"}
{"ids": "44832", "raw_code": "private static String encode(String stringToEncode){\n  String encoded;\n  try {\n    encoded=URLEncoder.encode(stringToEncode,UTF_8);\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new MCApiRuntimeException(e);\n  }\n  encoded=encoded.replace(\"*\",\"%2A\");\n  encoded=encoded.replace(\"~\",\"%7E\");\n  encoded=encoded.replace(\"+\",\"%20\");\n  return encoded;\n}"}
{"ids": "40586", "raw_code": "protected static String guessType(File file){\n  String name=file.getName();\n  String suffix=name.substring(name.lastIndexOf(\".\") + 1);\n  return mimeMap.get(suffix.toLowerCase(Locale.ROOT));\n}"}
{"ids": "48863", "raw_code": "protected Transferable createLocaleTransferable(long[] formats) throws IOException {\n  return null;\n}"}
{"ids": "48050", "raw_code": "public void putLength(int len) throws IOException {\n  if (len < 128) {\n    write((byte)len);\n  }\n else   if (len < (1 << 8)) {\n    write((byte)0x081);\n    write((byte)len);\n  }\n else   if (len < (1 << 16)) {\n    write((byte)0x082);\n    write((byte)(len >> 8));\n    write((byte)len);\n  }\n else   if (len < (1 << 24)) {\n    write((byte)0x083);\n    write((byte)(len >> 16));\n    write((byte)(len >> 8));\n    write((byte)len);\n  }\n else {\n    write((byte)0x084);\n    write((byte)(len >> 24));\n    write((byte)(len >> 16));\n    write((byte)(len >> 8));\n    write((byte)len);\n  }\n}"}
{"ids": "39488", "raw_code": "public void putGenericFontFamily(String familyName,Font font){\n  genericFontFamilies.put(familyName.toLowerCase(),font);\n}"}
{"ids": "47526", "raw_code": "@Override public String format(DateTimeFormatter formatter){\n  Objects.requireNonNull(formatter,\"formatter\");\n  return formatter.format(this);\n}"}
{"ids": "29117", "raw_code": "public @DottedClassName String toDottedClassName(){\n  return ClassName.toDottedClassName(className);\n}"}
{"ids": "9743", "raw_code": "public DAddExtensions(JFrame parent,String title,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  setTitle(res.getString(\"DAddExtensions.Title\"));\n  this.extensions=extensions;\n  this.authorityPublicKey=authorityPublicKey;\n  this.authorityCertName=authorityCertName;\n  this.authorityCertSerialNumber=authorityCertSerialNumber;\n  this.subjectPublicKey=subjectPublicKey;\n  initComponents();\n}"}
{"ids": "26842", "raw_code": "private void playNext(){\n  if (mediaType == Config.YOUTUBE_MEDIA_TYPE_VIDEO) {\n    seekVideo(0);\n    restartVideo();\n    return;\n  }\n  if (previousWasCalled) {\n    previousWasCalled=false;\n    iterator.next();\n  }\n  if (!iterator.hasNext()) {\n    iterator=youTubeVideos.listIterator();\n  }\n  videoItem=iterator.next();\n  nextWasCalled=true;\n  playVideo();\n}"}
{"ids": "83036", "raw_code": "public static <T>T invokeMethod(Object obj,String name,Object... params) throws NoSuchMethodException {\n  Class[] paramTypes=getParamTypes(params);\n  final Class<?> aClass=obj.getClass();\n  Method method;\n  try {\n    method=aClass.getDeclaredMethod(name,paramTypes);\n  }\n catch (  NoSuchMethodException e) {\n    method=aClass.getMethod(name,paramTypes);\n  }\n  method.setAccessible(true);\n  try {\n    return (T)method.invoke(obj,params);\n  }\n catch (  IllegalAccessException|InvocationTargetException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "6701", "raw_code": "private void cleanUpHistory(){\n  if (!mHistoryOfNumbers.isEmpty() && mHistoryOfNumbers.size() >= MAX_HISTORY_SIZE) {\n    for (int i=0; i < Math.max(1,MAX_HISTORY_SIZE / 2); i++) {\n      mPreviousNumbers.remove(mHistoryOfNumbers.removeFirst());\n    }\n  }\n}"}
{"ids": "62876", "raw_code": "public LogMessage(String template,int code){\n  this(template,null,EMPTY_STRING_ARRAY,code,Optional.empty());\n}"}
{"ids": "69499", "raw_code": "protected String action_translate(String act_string,int act_pos,Hashtable label_map,Hashtable label_types){\n  int id_start;\n  int pos;\n  int len;\n  String id_str;\n  boolean in_id;\n  StringBuffer result;\n  char buffer[];\n  if (act_string == null || act_string.length() == 0)   return act_string;\n  len=act_string.length();\n  result=new StringBuffer(len + 50);\n  buffer=new char[len + 1];\n  act_string.getChars(0,len,buffer,0);\n  buffer[len]='\\0';\n  in_id=false;\n  for (pos=id_start=0; pos <= len; pos++) {\n    if (in_id) {\n      if (!is_id_char(buffer[pos])) {\n        id_str=new String(buffer,id_start,pos - id_start);\n        result.append(label_translate(id_str,act_pos,label_map,label_types));\n        if (buffer[pos] != '\\0')         result.append(buffer,pos,1);\n        in_id=false;\n      }\n else {\n      }\n    }\n else {\n      if (is_id_start(buffer[pos])) {\n        in_id=true;\n        id_start=pos;\n      }\n else {\n        if (buffer[pos] != '\\0')         result.append(buffer,pos,1);\n      }\n    }\n  }\n  return result.toString();\n}"}
{"ids": "49648", "raw_code": "public boolean canLoad(){\n  return true;\n}"}
{"ids": "76330", "raw_code": "protected boolean strictParseBoolean(String s){\n  if (s == null || s.isEmpty()) {\n    throw new IllegalArgumentException(\"empty string does not represent a valid boolean\");\n  }\n  if (s.equalsIgnoreCase(\"true\")) {\n    return true;\n  }\n  if (s.equalsIgnoreCase(\"false\")) {\n    return false;\n  }\n  throw new IllegalArgumentException(\"Invalid string representing a boolean: \" + s);\n}"}
{"ids": "47493", "raw_code": "public String format(DateTimeFormatter formatter){\n  Objects.requireNonNull(formatter,\"formatter\");\n  return formatter.format(this);\n}"}
{"ids": "68712", "raw_code": "public Matrix U(){\n  return U.clone();\n}"}
{"ids": "41738", "raw_code": "private boolean isFieldVisited(Object object,Field objectField,Field field){\n  Map<String,Set<String>> bag=visitedFields.get(object);\n  if (bag == null) {\n    return false;\n  }\n  String objectFiledKey=objectField == null ? \"\" : objectField.toGenericString();\n  Set<String> fields=bag.get(objectFiledKey);\n  return fields != null && fields.contains(field);\n}"}
{"ids": "64332", "raw_code": "public void removeFromCompletedList(DownloadInfoRunnable downloadInfoRunnable){\n  mCompletedList.remove(downloadInfoRunnable);\n}"}
{"ids": "34266", "raw_code": "public String asXmlId(){\n  return DatatypeConverter.printHexBinary(tokenDigest.getValue());\n}"}
{"ids": "66211", "raw_code": "private void updateInfo(){\n  m_updating=true;\n  nameField.setText(m_cc.getName());\n  appsHostField.setText(m_cc.getAppsHost());\n  appsPortField.setText(String.valueOf(m_cc.getAppsPort()));\n  bTestApps.setIcon(getStatusIcon(m_cc.isAppsServerOK(false)));\n  boolean rw=CConnection.isServerEmbedded() ? true : !m_cc.isAppsServerOK(false);\n  dbTypeLabel.setReadWrite(rw);\n  dbTypeField.setReadWrite(rw);\n  dbTypeField.setSelectedItem(m_cc.getType());\n  hostLabel.setReadWrite(rw);\n  hostField.setReadWrite(rw);\n  hostField.setText(m_cc.getDbHost());\n  portLabel.setReadWrite(rw);\n  dbPortField.setReadWrite(rw);\n  dbPortField.setText(String.valueOf(m_cc.getDbPort()));\n  sidLabel.setReadWrite(rw);\n  sidField.setReadWrite(rw);\n  sidField.setText(m_cc.getDbName());\n  dbUidLabel.setReadWrite(rw);\n  dbUidField.setReadWrite(rw);\n  dbUidField.setText(m_cc.getDbUid());\n  dbPwdField.setEditable(rw);\n  dbPwdField.setText(m_cc.getDbPwd());\n  cbBequeath.setReadWrite(rw);\n  cbBequeath.setEnabled(m_cc.isOracle());\n  cbBequeath.setSelected(m_cc.isBequeath());\n  boolean fwEnabled=rw && m_cc.isViaFirewall() && m_cc.isOracle();\n  cbFirewall.setReadWrite(rw && m_cc.isOracle());\n  cbFirewall.setSelected(m_cc.isViaFirewall());\n  fwHostLabel.setReadWrite(fwEnabled);\n  fwHostField.setReadWrite(fwEnabled);\n  fwHostField.setText(m_cc.getFwHost());\n  fwPortLabel.setReadWrite(fwEnabled);\n  fwPortField.setReadWrite(fwEnabled);\n  fwPortField.setText(String.valueOf(m_cc.getFwPort()));\n  bTestDB.setToolTipText(m_cc.getConnectionURL());\n  bTestDB.setIcon(getStatusIcon(m_cc.isDatabaseOK()));\n  m_updating=false;\n}"}
{"ids": "19878", "raw_code": "public void createSnapshot() throws BackupException {\n  logger.debug(\"Creating snapshot: \" + this.snapshotName);\n  processHelper.exec(\"Creating file system snapshot\",lvcreateCmd);\n}"}
{"ids": "54696", "raw_code": "public final Uri storeLogFile(final LogFile logFile,final int sessionId){\n  final ContentValues values=new ContentValues();\n  values.put(Schema.COL_MANUFACTURER,logFile.getManufacturer());\n  values.put(Schema.COL_MODEL,logFile.getModel());\n  values.put(Schema.COL_REVISION,logFile.getRevision());\n  values.put(Schema.COL_SWID,logFile.getSwid());\n  values.put(Schema.COL_SWVER,logFile.getSwVersion());\n  values.put(Schema.COL_TIMESTAMP,System.currentTimeMillis());\n  values.put(Schema.COL_SESSION_ID,sessionId);\n  return contentResolver.insert(ContentProvider.CONTENT_URI_LOGFILE,values);\n}"}
{"ids": "72856", "raw_code": "public Map<String,String> merge(Map<String,String> curProps,Map<String,String> newProps) throws IOException {\n  Map<String,String> props=new HashMap<>(newProps);\n  for (  Map.Entry<String,String> e : curProps.entrySet()) {\n    String name=e.getKey();\n    String curValue=e.getValue();\n    if (props.containsKey(name)) {\n      props.put(name,curValue);\n    }\n  }\n  return props;\n}"}
{"ids": "40873", "raw_code": "public Builder deletePreferredLanguage(){\n  deleteFields.add(\"preferredLanguage\");\n  return this;\n}"}
{"ids": "59542", "raw_code": "public void onPrepared(MediaPlayer player){\n  mState=State.PLAYING;\n  updateNotification(String.format(getString(R.string.media_state_playing),mFile.getFileName()));\n  if (mMediaController != null) {\n    mMediaController.setEnabled(true);\n  }\n  player.seekTo(mStartPosition);\n  configAndStartMediaPlayer();\n  if (!mPlayOnPrepared) {\n    processPauseRequest();\n  }\n  if (mMediaController != null) {\n    mMediaController.updatePausePlay();\n  }\n}"}
{"ids": "9335", "raw_code": "private void parseParameter(String token,String value){\n  if (token != null && value != null) {\n    if (token.equalsIgnoreCase(NONCE_TOKEN)) {\n      mNonce=value;\n      return;\n    }\n    if (token.equalsIgnoreCase(STALE_TOKEN)) {\n      parseStale(value);\n      return;\n    }\n    if (token.equalsIgnoreCase(OPAQUE_TOKEN)) {\n      mOpaque=value;\n      return;\n    }\n    if (token.equalsIgnoreCase(QOP_TOKEN)) {\n      mQop=value.toLowerCase();\n      return;\n    }\n    if (token.equalsIgnoreCase(ALGORITHM_TOKEN)) {\n      mAlgorithm=value.toLowerCase();\n      return;\n    }\n  }\n}"}
{"ids": "44650", "raw_code": "public void skip(int n) throws IOException {\n  dis.skip(n);\n}"}
{"ids": "59571", "raw_code": "public void toAllInRadius(WorldServer world,Vec3d pos,double radius){\n  double maxDistance=radius * radius + radius * radius + radius * radius;\n  toAll(world.getPlayers(EntityPlayerMP.class,null));\n}"}
{"ids": "25353", "raw_code": "public static ECDHECryptography fromNamedCurveId(int supportedGroupId){\n  SupportedGroup group=SupportedGroup.fromId(supportedGroupId);\n  if (group == null) {\n    return null;\n  }\n else {\n    try {\n      return new ECDHECryptography(group.name());\n    }\n catch (    GeneralSecurityException e) {\n      LOGGER.log(Level.WARNING,\"Cannot create ephemeral keys for group [{0}]: {1}\",new Object[]{group.name(),e.getMessage()});\n      return null;\n    }\n  }\n}"}
{"ids": "1945", "raw_code": "private static void addHeader(Message message,String name,String value){\n  Map<String,List<String>> protocolHeaders=CastUtils.cast((Map<?,?>)message.get(Message.PROTOCOL_HEADERS));\n  if (protocolHeaders == null) {\n    protocolHeaders=new TreeMap<String,List<String>>(String.CASE_INSENSITIVE_ORDER);\n    message.put(Message.PROTOCOL_HEADERS,protocolHeaders);\n  }\n  List<String> header=CastUtils.cast((List<?>)protocolHeaders.get(name));\n  if (header == null) {\n    header=new ArrayList<String>();\n    protocolHeaders.put(name,header);\n  }\n  if (header.size() == 0) {\n    header.add(value);\n  }\n else {\n    header.set(0,header.get(0) + \",\" + value);\n  }\n}"}
{"ids": "66756", "raw_code": "private static void swilk(boolean[] init,double[] x,int n,int n1,int n2,double[] a,double[] w,double[] pw,int[] ifault){\n  pw[0]=1.0;\n  if (w[0] >= 0.0) {\n    w[0]=1.0;\n  }\n  double an=n;\n  ifault[0]=3;\n  int nn2=n / 2;\n  if (n2 < nn2) {\n    return;\n  }\n  ifault[0]=1;\n  if (n < 3) {\n    return;\n  }\n  if (!init[0]) {\n    if (n == 3) {\n      a[1]=SQRTH;\n    }\n else {\n      double an25=an + 0.25;\n      double summ2=0.0;\n      for (int i=1; i <= n2; ++i) {\n        a[i]=ppnd((i - TH) / an25);\n        summ2+=a[i] * a[i];\n      }\n      summ2*=2.0;\n      double ssumm2=Math.sqrt(summ2);\n      double rsn=1.0 / Math.sqrt(an);\n      double a1=poly(C1,6,rsn) - a[1] / ssumm2;\n      int i1;\n      double fac;\n      if (n > 5) {\n        i1=3;\n        double a2=-a[2] / ssumm2 + poly(C2,6,rsn);\n        fac=Math.sqrt((summ2 - 2.0 * a[1] * a[1] - 2.0 * a[2] * a[2]) / (1.0 - 2.0 * a1 * a1 - 2.0 * a2 * a2));\n        a[1]=a1;\n        a[2]=a2;\n      }\n else {\n        i1=2;\n        fac=Math.sqrt((summ2 - 2.0 * a[1] * a[1]) / (1.0 - 2.0 * a1 * a1));\n        a[1]=a1;\n      }\n      for (int i=i1; i <= nn2; ++i) {\n        a[i]=-a[i] / fac;\n      }\n    }\n    init[0]=true;\n  }\n  if (n1 < 3) {\n    return;\n  }\n  int ncens=n - n1;\n  ifault[0]=4;\n  if (ncens < 0 || (ncens > 0 && n < 20)) {\n    return;\n  }\n  ifault[0]=5;\n  double delta=ncens / an;\n  if (delta > 0.8) {\n    return;\n  }\n  double w1, xx;\n  if (w[0] < 0.0) {\n    w1=1.0 + w[0];\n    ifault[0]=0;\n  }\n else {\n    ifault[0]=6;\n    double range=x[n1] - x[1];\n    if (range < SMALL) {\n      return;\n    }\n    ifault[0]=7;\n    xx=x[1] / range;\n    double sx=xx;\n    double sa=-a[1];\n    int j=n - 1;\n    for (int i=2; i <= n1; ++i) {\n      double xi=x[i] / range;\n      sx+=xi;\n      if (i != j) {\n        sa+=sign(1,i - j) * a[Math.min(i,j)];\n      }\n      xx=xi;\n      --j;\n    }\n    ifault[0]=0;\n    if (n > 5000) {\n      ifault[0]=2;\n    }\n    sa/=n1;\n    sx/=n1;\n    double ssa=0.0;\n    double ssx=0.0;\n    double sax=0.0;\n    j=n;\n    double asa;\n    for (int i=1; i <= n1; ++i) {\n      if (i != j) {\n        asa=sign(1,i - j) * a[Math.min(i,j)] - sa;\n      }\n else {\n        asa=-sa;\n      }\n      double xsx=x[i] / range - sx;\n      ssa+=asa * asa;\n      ssx+=xsx * xsx;\n      sax+=asa * xsx;\n      --j;\n    }\n    double ssassx=Math.sqrt(ssa * ssx);\n    w1=(ssassx - sax) * (ssassx + sax) / (ssa * ssx);\n  }\n  w[0]=1.0 - w1;\n  if (n == 3) {\n    pw[0]=PI6 * (Math.asin(Math.sqrt(w[0])) - STQR);\n    return;\n  }\n  double y=Math.log(w1);\n  xx=Math.log(an);\n  double m=0.0;\n  double s=1.0;\n  if (n <= 11) {\n    double gamma=poly(G,2,an);\n    if (y >= gamma) {\n      pw[0]=SMALL;\n      return;\n    }\n    y=-Math.log(gamma - y);\n    m=poly(C3,4,an);\n    s=Math.exp(poly(C4,4,an));\n  }\n else {\n    m=poly(C5,4,xx);\n    s=Math.exp(poly(C6,3,xx));\n  }\n  if (ncens > 0) {\n    double ld=-Math.log(delta);\n    double bf=1.0 + xx * BF1;\n    double z90f=Z90 + bf * Math.pow(poly(C7,2,Math.pow(XX90,xx)),ld);\n    double z95f=Z95 + bf * Math.pow(poly(C8,2,Math.pow(XX95,xx)),ld);\n    double z99f=Z99 + bf * Math.pow(poly(C9,2,xx),ld);\n    double zfm=(z90f + z95f + z99f) / 3.0;\n    double zsd=(Z90 * (z90f - zfm) + Z95 * (z95f - zfm) + Z99 * (z99f - zfm)) / ZSS;\n    double zbar=zfm - zsd * ZM;\n    m+=zbar * s;\n    s*=zsd;\n  }\n  pw[0]=alnorm((y - m) / s,UPPER);\n}"}
{"ids": "63095", "raw_code": "public String asString(){\n  StringBuilder buff=new StringBuilder();\n  for (int i=0; i < arrayLevel; i++) {\n    if (refCount) {\n      buff.append(\"ptr< \");\n    }\n    buff.append(\"array< \");\n  }\n  if (refCount) {\n    if (!classObj.isPrimitive) {\n      buff.append(\"ptr< \");\n    }\n  }\n  buff.append(classObj.toString());\n  if (refCount) {\n    if (!classObj.isPrimitive) {\n      buff.append(\" >\");\n    }\n  }\n  for (int i=0; i < arrayLevel; i++) {\n    if (refCount) {\n      buff.append(\" >\");\n    }\n else {\n      if (!classObj.isPrimitive) {\n        buff.append(\"*\");\n      }\n    }\n    buff.append(\" >\");\n  }\n  if (!refCount) {\n    if (isObject()) {\n      buff.append(\"*\");\n    }\n  }\n  return buff.toString();\n}"}
{"ids": "62962", "raw_code": "public List<JsonObject> executeParametrizedStatement(String statement,List<String> parameterNames,List<Object> parameterValues){\n  JsonObject namedParams=JsonObject.create();\n  for (int param=0; param < parameterNames.size(); param++) {\n    namedParams.put(parameterNames.get(param),parameterValues.get(param));\n  }\n  ParameterizedN1qlQuery query=N1qlQuery.parameterized(statement,namedParams);\n  return executeQuery(query);\n}"}
{"ids": "29831", "raw_code": "public final T endAll(){\n  while (!tagStack.isEmpty()) {\n    end();\n  }\n  return getSelf();\n}"}
{"ids": "69404", "raw_code": "public static Table createPartitionedTable(Configuration conf,HiveMetastoreClient ms,HiveObjectSpec tableSpec,TableType tableType,Path warehouseRoot) throws IOException, HiveMetastoreException {\n  Path tableLocation=getPathForHiveObject(warehouseRoot,tableSpec);\n  Table table=new Table();\n  table.setDbName(tableSpec.getDbName());\n  table.setTableName(tableSpec.getTableName());\n  Map<String,String> parameters=new HashMap<>();\n  parameters.put(HiveParameterKeys.TLDT,Long.toString(System.currentTimeMillis()));\n  table.setParameters(parameters);\n  table.setTableType(tableType.toString());\n  List<FieldSchema> partitionCols=new ArrayList<>();\n  partitionCols.add(new FieldSchema(\"ds\",\"string\",\"my ds comment\"));\n  partitionCols.add(new FieldSchema(\"hr\",\"string\",\"my hr comment\"));\n  table.setPartitionKeys(partitionCols);\n  StorageDescriptor sd=new StorageDescriptor();\n  List<FieldSchema> columns=new ArrayList<>();\n  columns.add(new FieldSchema(\"key\",\"string\",\"my comment\"));\n  sd.setCols(columns);\n  if (tableType == TableType.MANAGED_TABLE || tableType == TableType.EXTERNAL_TABLE) {\n    sd.setLocation(tableLocation.toString());\n  }\n  sd.setSerdeInfo(new SerDeInfo(\"LazySimpleSerde\",\"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\",new HashMap<>()));\n  table.setSd(sd);\n  if (!ms.existsDb(table.getDbName())) {\n    ms.createDatabase(new Database(table.getDbName(),null,null,null));\n  }\n  ms.createTable(table);\n  return table;\n}"}
{"ids": "16570", "raw_code": "protected FormSpec(DefaultAlignment defaultAlignment,String encodedDescription){\n  this(defaultAlignment,Sizes.DEFAULT,NO_GROW);\n  parseAndInitValues(encodedDescription.toLowerCase(Locale.ENGLISH));\n}"}
{"ids": "61864", "raw_code": "public static <T>List<T> decode(InputStream data,Parser<T> parser) throws IOException {\n  CodedInputStream stream=CodedInputStream.newInstance(data);\n  List<T> list=new ArrayList<>();\n  while (!stream.isAtEnd()) {\n    int size=stream.readRawVarint32();\n    byte[] element=stream.readRawBytes(size);\n    T decoded=parser.parseFrom(element);\n    list.add(decoded);\n  }\n  return list;\n}"}
{"ids": "80511", "raw_code": "public Creature calculateNextCreature(final int questLevel){\n  final List<Creature> possibleCreaturesToSpawn=new ArrayList<Creature>();\n  int lastLevel=0;\n  for (  final Creature creature : sortedCreatures) {\n    if (creature.getLevel() > questLevel) {\n      break;\n    }\n    if (creature.getLevel() > lastLevel) {\n      possibleCreaturesToSpawn.clear();\n      lastLevel=creature.getLevel();\n    }\n    possibleCreaturesToSpawn.add(creature);\n  }\n  Creature creatureToSpawn=null;\n  if (possibleCreaturesToSpawn.size() == 0) {\n    creatureToSpawn=sortedCreatures.get(sortedCreatures.size() - 1);\n  }\n else {\n    Collections.shuffle(possibleCreaturesToSpawn);\n    creatureToSpawn=possibleCreaturesToSpawn.get(0);\n  }\n  return creatureToSpawn;\n}"}
{"ids": "21136", "raw_code": "@Override public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){\n  String newIntervalStr=newProps.getProperty(BackupConstants.SCHEDULE_INTERVAL);\n  String newStartTimeStr=newProps.getProperty(BackupConstants.SCHEDULE_TIME);\n  if ((newIntervalStr == null || newIntervalStr.isEmpty()) && (newStartTimeStr == null || newStartTimeStr.isEmpty())) {\n    _log.info(\"No changes in backup interval and start time\");\n    return;\n  }\n  String intervalStr=(newIntervalStr == null || newIntervalStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_INTERVAL) : newIntervalStr;\n  String startTimeStr=(newStartTimeStr == null || newStartTimeStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_TIME) : newStartTimeStr;\n  _log.info(\"intervalStr={}, startTimeStr={}\",intervalStr,startTimeStr);\n  validateBackupIntervalAndStartTime(intervalStr,startTimeStr);\n}"}
{"ids": "71580", "raw_code": "public void addTables(Collection<Table> tables){\n  for (Iterator<Table> it=tables.iterator(); it.hasNext(); ) {\n    addTable((Table)it.next());\n  }\n}"}
{"ids": "51107", "raw_code": "protected void writeFile(String template,Writer writer){\n  if (template == null) {\n    throw new IllegalArgumentException(\"template content can not be null.\");\n  }\n  BufferedWriter bufferedWriter=new BufferedWriter(writer);\n  String output=replace(template,null);\n  try {\n    bufferedWriter.append(output);\n  }\n catch (  IOException e) {\n    logger.log(Diagnostic.Kind.ERROR,\"write file failed\");\n    e.printStackTrace();\n  }\n finally {\n    try {\n      bufferedWriter.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"ids": "63948", "raw_code": "public synchronized boolean clear(){\n  if (isLoading()) {\n    return false;\n  }\n  loader=new Thread(null);\n  loader.start();\n  return true;\n}"}
{"ids": "86336", "raw_code": "public int indexOf(final RoundedToolItem item){\n  checkWidget();\n  return items.indexOf(item);\n}"}
{"ids": "33411", "raw_code": "public void addAttribute(String alias,String typeUri,boolean required,int count) throws MessageException {\n  if (alias.indexOf(',') > -1 || alias.indexOf('.') > -1 || alias.indexOf(':') > -1 || alias.indexOf('\\n') > -1)   throw new MessageException(\"Characters [.,:\\\\n] are not allowed in attribute aliases: \" + alias);\n  _parameters.set(new Parameter(\"type.\" + alias,typeUri));\n  String level=required ? \"required\" : \"if_available\";\n  Parameter levelParam=_parameters.getParameter(level);\n  Parameter newParam;\n  if (levelParam == null) {\n    newParam=new Parameter(level,alias);\n  }\n else {\n    newParam=new Parameter(level,levelParam.getValue() + \",\" + alias);\n    _parameters.removeParameters(level);\n  }\n  _parameters.set(newParam);\n  setCount(alias,count);\n  if (DEBUG)   _log.debug(\"Added new attribute to fetch request; type: \" + typeUri + \" alias: \"+ alias+ \" count: \"+ count+ \" required: \"+ required);\n}"}
{"ids": "27308", "raw_code": "public Void call() throws Exception {\n  final List<Future<Void>> tasks=new LinkedList<Future<Void>>();\n  try {\n    for (    IV<?,?> termId : graphs) {\n      final FutureTask<Void> ft=new FutureTask<Void>(new DrainIteratorTask(termId));\n      tasks.add(ft);\n      executor.execute(ft);\n    }\n    for (    Future<Void> f : tasks) {\n      f.get();\n    }\n  }\n catch (  Throwable ex) {\n    for (    Future<Void> f : tasks)     f.cancel(true);\n    throw new RuntimeException(ex);\n  }\n finally {\n    buffer.close();\n  }\n  return null;\n}"}
{"ids": "40704", "raw_code": "protected void runFullImport(String dataConfig,Map<String,String> extraParams) throws Exception {\n  HashMap<String,String> params=new HashMap<>();\n  params.put(\"command\",\"full-import\");\n  params.put(\"debug\",\"on\");\n  params.put(\"dataConfig\",dataConfig);\n  params.put(\"clean\",\"true\");\n  params.put(\"commit\",\"true\");\n  params.putAll(extraParams);\n  NamedList l=new NamedList();\n  for (  Map.Entry<String,String> e : params.entrySet()) {\n    l.add(e.getKey(),e.getValue());\n  }\n  LocalSolrQueryRequest request=new LocalSolrQueryRequest(h.getCore(),l);\n  h.query(\"/dataimport\",request);\n}"}
{"ids": "44935", "raw_code": "public String userIdFromRange(Object ominId,Object omaxId){\n  int minId=FunctionHandler.getInt(ominId);\n  int maxId=FunctionHandler.getInt(omaxId);\n  Stack<Integer> stack=getStack(minId,maxId);\n  if (stack.size() > 0) {\n    return Integer.toString(stack.pop());\n  }\n  throw new IllegalArgumentException(\"Exhausted random User Ids. Range not large enough for the number of calls.\");\n}"}
{"ids": "77968", "raw_code": "public void start(){\n  if (isStarted) {\n    log.info(\"Coordinator stream consumer already started\");\n    return;\n  }\n  log.info(\"Starting coordinator stream system consumer.\");\n  systemConsumer.start();\n  isStarted=true;\n}"}
{"ids": "37346", "raw_code": "public static void generateBinaryOperationFlags(final ITranslationEnvironment environment,final long nextOffset,final String result,final OperandSize resultSize,final List<ReilInstruction> instructions) throws IllegalArgumentException {\n  Preconditions.checkNotNull(environment,\"Error: Argument environment can't be null\");\n  Preconditions.checkNotNull(result,\"Error: Argument result can't be null\");\n  Preconditions.checkNotNull(resultSize,\"Error: Argument resultSize can't be null\");\n  Preconditions.checkNotNull(instructions,\"Error: Argument instructions can't be null\");\n  final long baseOffset=nextOffset - instructions.size();\n  long offset=nextOffset;\n  generateSignFlagCode(environment,offset,result,resultSize,instructions);\n  offset=(baseOffset + instructions.size()) - 1;\n  instructions.add(ReilHelpers.createBisz(offset + 1,resultSize,result,OperandSize.BYTE,Helpers.ZERO_FLAG));\n  instructions.add(ReilHelpers.createStr(offset + 2,OperandSize.BYTE,\"0\",OperandSize.BYTE,Helpers.CARRY_FLAG));\n  instructions.add(ReilHelpers.createStr(offset + 3,OperandSize.BYTE,\"0\",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));\n}"}
{"ids": "36648", "raw_code": "public boolean isLabelMovable(){\n  mxGraph graph=graphComponent.getGraph();\n  String label=graph.getLabel(state.getCell());\n  return graph.isLabelMovable(state.getCell()) && label != null && label.length() > 0;\n}"}
{"ids": "78046", "raw_code": "public int writeTypeList(TypeList typeList){\n  int off=data.position();\n  short[] types=typeList.types;\n  writeInt(types.length);\n  for (  short type : types) {\n    writeShort(type);\n  }\n  return off;\n}"}
{"ids": "51713", "raw_code": "public static void loadConfigResource(String resourceName) throws IOException {\n  config.clear();\n  config.putAll(loadPropertiesFromResource(resourceName));\n}"}
{"ids": "30523", "raw_code": "private Transaction createTransaction() throws LeaseDeniedException, RemoteException, TransactionException {\n  ITransactionManagerProvider transactionManagerProvider=getTransactionManagerProvider();\n  return (TransactionFactory.create(transactionManagerProvider.getTransactionManager(),_config.getTransactionTimeout())).transaction;\n}"}
{"ids": "84656", "raw_code": "public void skipWhile(String skip) throws IOException {\n  char ch;\n  do {\n    ch=read();\n  }\n while (skip.indexOf(ch) > -1);\n  unreadCharacter(ch);\n}"}
{"ids": "69722", "raw_code": "public void savePoisFromAssets(){\n  List<Poi> pois=poiAssetLoader.loadPoisFromAssets();\n  Timber.d(\"Loaded %s poi, trying to insert them\",pois.size());\n  for (  Poi poi : pois) {\n    Timber.d(\"saving poi %s\",poi);\n    savePoi(poi);\n    Timber.d(\"poi saved\");\n  }\n}"}
{"ids": "20266", "raw_code": "private void createElement(Document doc,Element parentElement,String elementName,Color value){\n  Element element=doc.createElement(elementName);\n  element.appendChild(doc.createTextNode(ColourUtils.fromColour(value)));\n  parentElement.appendChild(element);\n}"}
{"ids": "24447", "raw_code": "public static boolean beenDone(@Scope int scope,String tag,CountChecker numberOfTimes){\n  List<Long> tagSeenDates=tagLastSeenMap.get(tag);\n  if (tagSeenDates.isEmpty()) {\n    return false;\n  }\n  if (scope == THIS_APP_INSTALL) {\n    return numberOfTimes.check(tagSeenDates.size());\n  }\n else   if (scope == THIS_APP_SESSION) {\n    int counter=0;\n    for (    String tagFromList : sessionList) {\n      if (tagFromList.equals(tag)) {\n        counter++;\n      }\n    }\n    return numberOfTimes.check(counter);\n  }\n else {\n    int counter=0;\n    for (    Long seenDate : tagSeenDates) {\n      if (seenDate > lastAppUpdatedTime) {\n        counter++;\n      }\n    }\n    return numberOfTimes.check(counter);\n  }\n}"}
{"ids": "74508", "raw_code": "void variableOperatorChanged(int row,String oper){\n  ConditionalVariable variable=_variableList.get(row);\n  int oldOper=variable.getOpern();\n  if (row > 0) {\n    if (oper.equals(Bundle.getMessage(\"LogicOR\"))) {\n      variable.setOpern(Conditional.OPERATOR_OR);\n    }\n else {\n      variable.setOpern(Conditional.OPERATOR_AND);\n    }\n  }\n else {\n    variable.setOpern(Conditional.OPERATOR_NONE);\n  }\n  if (variable.getOpern() != oldOper) {\n    makeAntecedent();\n  }\n}"}
{"ids": "79792", "raw_code": "public void addHeader(String name,String val){\n  mMsgHeader=mMsgHeader + name + \": \"+ val+ mLineDelimiter;\n  addInternalHeaderFields(name,val);\n}"}
{"ids": "68926", "raw_code": "public static void checkDuplicateRequest(RedisClient redisClient,String uri,Buffer buffer,String ttl,Handler<Boolean> callback){\n  Integer timeToLive=parseTimeToLive(ttl);\n  String redisKey=getRedisKey(uri,HashCodeGenerator.createHashCode(uri,buffer.toString()));\n  handleStorage(redisClient,redisKey,timeToLive,callback);\n}"}
{"ids": "65531", "raw_code": "boolean isHidden(View view){\n  return mHiddenViews.contains(view);\n}"}
{"ids": "16588", "raw_code": "public static void deleteRecursive(@NonNull File fileOrDirectory){\n  deleteRecursive(fileOrDirectory,Collections.EMPTY_LIST);\n}"}
{"ids": "46368", "raw_code": "static boolean doesMenuBarBorderToolBar(JMenuBar c){\n  JToolBar tb=(JToolBar)MetalToolBarUI.findRegisteredComponentOfType(c,JToolBar.class);\n  if (tb != null && tb.getOrientation() == JToolBar.HORIZONTAL) {\n    JRootPane rp=SwingUtilities.getRootPane(c);\n    Point point=new Point(0,0);\n    point=SwingUtilities.convertPoint(c,point,rp);\n    int menuX=point.x;\n    int menuY=point.y;\n    point.x=point.y=0;\n    point=SwingUtilities.convertPoint(tb,point,rp);\n    return (point.x == menuX && menuY + c.getHeight() == point.y && c.getWidth() == tb.getWidth());\n  }\n  return false;\n}"}
{"ids": "8168", "raw_code": "public static void eachObject(ObjectInputStream ois,Closure closure) throws IOException, ClassNotFoundException {\n  try {\n    while (true) {\n      try {\n        Object obj=ois.readObject();\n        closure.call(obj);\n      }\n catch (      EOFException e) {\n        break;\n      }\n    }\n    InputStream temp=ois;\n    ois=null;\n    temp.close();\n  }\n  finally {\n    closeWithWarning(ois);\n  }\n}"}
{"ids": "80882", "raw_code": "private static int exitWithStatus(int status){\n  if (ToolIO.getMode() == ToolIO.SYSTEM) {\n    System.exit(status);\n  }\n  return status;\n}"}
{"ids": "27268", "raw_code": "public static double distanceInMeters(final double latP1,final double latP2,final double lonP1,final double lonP2){\n  double distRad=Math.acos(Math.sin(toRadians(latP1)) * Math.sin(toRadians(latP2)) + Math.cos(toRadians(latP1)) * Math.cos(toRadians(latP2)) * Math.cos(toRadians(lonP1 - lonP2)));\n  final double distAsDegree=toDegrees(distRad);\n  return distAsDegree * 60 * 1.1515* 1609.344;\n}"}
{"ids": "26582", "raw_code": "public void processChallenge(final String challenge) throws MalformedChallengeException {\n  String s=AuthChallengeParser.extractScheme(challenge);\n  if (!s.equalsIgnoreCase(getSchemeName())) {\n    throw new MalformedChallengeException(\"Invalid NTLM challenge: \" + challenge);\n  }\n  int i=challenge.indexOf(' ');\n  if (i != -1) {\n    s=challenge.substring(i,challenge.length());\n    this.ntlmchallenge=s.trim();\n    this.state=TYPE2_MSG_RECEIVED;\n  }\n else {\n    this.ntlmchallenge=\"\";\n    if (this.state == UNINITIATED) {\n      this.state=INITIATED;\n    }\n else {\n      this.state=FAILED;\n    }\n  }\n}"}
{"ids": "16015", "raw_code": "public static BigInteger calculateA(BigInteger p,BigInteger q,BigInteger gA,BigInteger x2s){\n  return gA.modPow(x2s,p);\n}"}
{"ids": "65986", "raw_code": "public static MCostQueue add(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID,int M_CostElement_ID,BigDecimal amt,BigDecimal qty,int precision,MCostDetail cd,String trxName){\n  if (CLogMgt.isLevelFine())   s_log.fine(\"Entering: org=\" + AD_Org_ID + \", product=\"+ product.get_ID()+ \", asi=\"+ M_AttributeSetInstance_ID+ \", amt=\"+ amt+ \", qty=\"+ qty+ \", precision=\"+ precision);\n  MCostQueue cq=new MCostQueue(product,M_AttributeSetInstance_ID,as,AD_Org_ID,M_CostElement_ID,trxName);\n  cq.setCosts(amt,qty,precision);\n  cq.setDateAcct(cd.getDateAcct());\n  cq.saveEx();\n  if (CLogMgt.isLevelFine())   s_log.fine(\"Leaving: \" + cq);\n  return cq;\n}"}
{"ids": "20138", "raw_code": "public void addUndoEvent(UndoInterface event){\n  if (shouldProcessUndoRedoAction()) {\n    boolean atEndOfList=(currentIndex >= undoList.size());\n    if (!atEndOfList) {\n      while (undoList.size() > currentIndex) {\n        int lastIndex=undoList.size() - 1;\n        undoList.remove(lastIndex);\n      }\n    }\n    undoList.add(event);\n    currentIndex=undoList.size();\n    updateMenuItems();\n    logger.debug(event.getStringRepresentation());\n  }\n}"}
{"ids": "39099", "raw_code": "public static Exception establishCacheIfNeeded(PrintStream... progress){\n  if (m_offline) {\n    return null;\n  }\n  if (REP_MIRROR == null) {\n    establishMirror();\n  }\n  Exception problem=null;\n  if (INITIAL_CACHE_BUILD_NEEDED) {\n    for (    PrintStream p : progress) {\n      p.println(\"Caching repository meta data, please wait...\");\n    }\n    problem=refreshCache(progress);\n    INITIAL_CACHE_BUILD_NEEDED=false;\n  }\n  return problem;\n}"}
{"ids": "56408", "raw_code": "public List<Snapshot> currentSnapshots(String repositoryName){\n  List<Snapshot> snapshotList=new ArrayList<>();\n  List<SnapshotsInProgress.Entry> entries=currentSnapshots(repositoryName,null);\n  for (  SnapshotsInProgress.Entry entry : entries) {\n    snapshotList.add(inProgressSnapshot(entry));\n  }\n  CollectionUtil.timSort(snapshotList);\n  return Collections.unmodifiableList(snapshotList);\n}"}
{"ids": "31527", "raw_code": "@Override protected void paintTabBackground(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){\n  if (isSelected) {\n    if (tabPlacement == TOP) {\n      g.setColor(Color.white);\n      g.fillRoundRect(x,y,w,h + R + R,R,R);\n    }\n  }\n else {\n  }\n}"}
{"ids": "77492", "raw_code": "private Automaton buildAutomaton(BytesRefHash termBytesHash){\n  final TreeSet<BytesRef> terms=new TreeSet<BytesRef>();\n  for (int i=0; i < termBytesHash.size(); i++) {\n    BytesRef ref=new BytesRef();\n    termBytesHash.get(i,ref);\n    terms.add(ref);\n  }\n  final Automaton a=DaciukMihovAutomatonBuilder.build(terms);\n  return a;\n}"}
{"ids": "63435", "raw_code": "protected String adminShutdown(){\n  server.shutdown();\n  return \"admin.jsp\";\n}"}
{"ids": "15024", "raw_code": "public void assignRole(AMRole role) throws AMException, SSOException {\n  assignRole(role.getDN());\n}"}
{"ids": "1844", "raw_code": "public static <T extends Map.Entry<String,String>>String formEncode(Collection<T> parameters) throws IOException {\n  ByteArrayOutputStream b=new ByteArrayOutputStream();\n  formEncode(parameters,b);\n  return new String(b.toByteArray());\n}"}
{"ids": "79843", "raw_code": "public void runNextPendingCommand(){\n  Runnable runnable=deltaQueue.pop();\n  runnable.run();\n}"}
{"ids": "1291", "raw_code": "private static Document loadDocument(Resource xmlFile) throws SAXException, IOException {\n  DOMParser parser=new DOMParser();\n  InputStream is=null;\n  try {\n    is=IOUtil.toBufferedInputStream(xmlFile.getInputStream());\n    InputSource source=new InputSource(is);\n    parser.parse(source);\n  }\n  finally {\n    IOUtil.closeEL(is);\n  }\n  return parser.getDocument();\n}"}
{"ids": "71928", "raw_code": "public static void prepareUnicode(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){\n  Reject.ifNull(buffer,sequence);\n  final int length=sequence.length();\n  for (int i=0; i < length; i++) {\n    final byte b=sequence.byteAt(i);\n    if ((b & 0x7F) != b) {\n      MappingTable.map(buffer,sequence.subSequence(i,length),trim,foldCase);\n      String normalizedForm=Normalizer.normalize(buffer,Form.NFKD);\n      buffer.setLength(0);\n      buffer.append(normalizedForm);\n      break;\n    }\nswitch (b) {\ncase ' ':\n      if (canMapToSpace(buffer,trim)) {\n        buffer.append(' ');\n      }\n    break;\ndefault :\n  if (b >= '\\u0009' && b < '\\u000E') {\n    if (canMapToSpace(buffer,trim)) {\n      buffer.append(SPACE_CHAR);\n    }\n  }\n else   if ((b >= '\\u0000' && b <= '\\u0008') || (b >= '\\u000E' && b <= '\\u001F') || b == '\\u007F') {\n    break;\n  }\n else   if (foldCase && b >= 'A' && b <= 'Z') {\n    buffer.append((char)(b + 32));\n  }\n else {\n    buffer.append((char)b);\n  }\nbreak;\n}\n}\nif (trim) {\nfor (int i=buffer.length() - 1; i > 0; i--) {\nif (buffer.charAt(i) == SPACE_CHAR) {\nbuffer.delete(i,i + 1);\n}\n else {\nbreak;\n}\n}\n}\n}"}
{"ids": "29072", "raw_code": "@Nonnull public BugInstance addClass(ClassNode classNode){\n  String dottedClassName=ClassName.toDottedClassName(classNode.name);\n  ClassAnnotation classAnnotation=new ClassAnnotation(dottedClassName);\n  add(classAnnotation);\n  return this;\n}"}
{"ids": "34854", "raw_code": "public static void tryFormatSatisfiability(String format) throws IllegalFormatException {\n  MessageFormat.format(format,(Object[])null);\n}"}
{"ids": "49390", "raw_code": "public static int parseUpperMap(String s) throws NumberFormatException {\n  int upperCase=MAP_UNDEFINED;\n  int length=s.length();\n  if (length >= 4 && length <= 6) {\n    upperCase=Integer.parseInt(s,16);\n  }\n else   if (s.length() != 0) {\n    throw new NumberFormatException();\n  }\n  return upperCase;\n}"}
{"ids": "42030", "raw_code": "private boolean isValidPlaylistName(String newName){\n  Playlist blankPlaylist=new Playlist(newName,false);\n  return !newName.isEmpty() && !musicLibrary.containsPlaylist(blankPlaylist);\n}"}
{"ids": "66437", "raw_code": "public String importXML(String fileName,Properties ctx,String trxName) throws Exception {\n  log.info(\"importXML:\" + fileName);\n  File in=new File(fileName);\n  if (!in.exists()) {\n    String msg=\"File does not exist: \" + fileName;\n    log.info(\"importXML:\" + msg);\n    return msg;\n  }\n  try {\n    log.info(\"starting\");\n    System.setProperty(\"javax.xml.parsers.SAXParserFactory\",\"org.apache.xerces.jaxp.SAXParserFactoryImpl\");\n    PackInHandler handler=new PackInHandler();\n    handler.set_TrxName(trxName);\n    handler.setCtx(ctx);\n    handler.setProcess(this);\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n    SAXParser parser=factory.newSAXParser();\n    String msg=\"Start Parser\";\n    log.info(msg);\n    parser.parse(in,handler);\n    msg=\"End Parser\";\n    log.info(msg);\n    return \"OK.\";\n  }\n catch (  Exception e) {\n    log.log(Level.SEVERE,\"importXML:\",e);\n    throw e;\n  }\n}"}
{"ids": "63320", "raw_code": "public synchronized void logAddOrRemoveRow(Session session,int tableId,Row row,boolean add){\n  if (logMode != LOG_MODE_OFF) {\n    if (!recoveryRunning) {\n      log.logAddOrRemoveRow(session,tableId,row,add);\n    }\n  }\n}"}
{"ids": "83332", "raw_code": "public static <V extends SampledVertex>Set<V> createSampledPartition(Collection<V> vertices){\n  Set<V> partition=new HashSet<V>();\n  for (  V vertex : vertices) {\n    if (vertex.isSampled())     partition.add(vertex);\n  }\n  return partition;\n}"}
{"ids": "62356", "raw_code": "public GremlinTransactionManager(GremlinGraphFactory graphFactory){\n  super();\n  this.graphFactory=graphFactory;\n}"}
{"ids": "38900", "raw_code": "public void shiftBeans(BeanInstance toShiftTo,boolean save){\n  if (save) {\n    m_originalCoords=new Vector<Point>();\n  }\n  int targetX=toShiftTo.getX();\n  int targetY=toShiftTo.getY();\n  for (int i=0; i < m_subFlow.size(); i++) {\n    BeanInstance temp=(BeanInstance)m_subFlow.elementAt(i);\n    if (save) {\n      Point p=new Point(temp.getX() - targetX,temp.getY() - targetY);\n      m_originalCoords.add(p);\n    }\n    temp.setX(targetX);\n    temp.setY(targetY);\n  }\n}"}
{"ids": "54716", "raw_code": "@Override protected final List<LatLong> doInBackground(final Object... args){\n  List<LatLong> points=new ArrayList<>();\n  DataHelper dbHelper=new DataHelper(mContext);\n  final ArrayList<PositionRecord> positions=dbHelper.loadPositions((Integer)args[SESSION_ID],(Double)args[MIN_LAT_COL],(Double)args[MAX_LAT_COL],(Double)args[MIN_LON_COL],(Double)args[MAX_LON_COL]);\n  for (  PositionRecord position : positions) {\n    points.add(new LatLong(position.getLatitude(),position.getLongitude()));\n  }\n  return points;\n}"}
{"ids": "25054", "raw_code": "private ApplicationEnvironment(){\n  try {\n    if (System.getProperty(BootstrapProperties.IS_UBERJAR) != null) {\n      this.mode=Mode.UBERJAR;\n      if (!loadWildFlySwarmApplicationManifestFromClasspath()) {\n        loadWildFlySwarmApplicationManifestFromTCCL();\n      }\n    }\n else {\n      this.mode=Mode.CLASSPATH;\n      loadFractionManifestsFromClasspath();\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "82961", "raw_code": "public ProducerWorker(String topic,String message){\n  this._topic=topic;\n  this._message=message;\n}"}
{"ids": "75526", "raw_code": "private static boolean functionsAreAllowed(boolean isAddAllFunction,boolean isPutAllFunction,Class<?> classD,Class<?> classS){\n  if (isAddAllFunction)   return collectionIsAssignableFrom(classD) && collectionIsAssignableFrom(classS);\n  if (isPutAllFunction)   return mapIsAssignableFrom(classD) && mapIsAssignableFrom(classS);\n  return isAssignableFrom(classD,classS);\n}"}
{"ids": "66017", "raw_code": "private void loadOrgAccessUser(ArrayList<OrgAccess> list){\n  PreparedStatement pstmt=null;\n  ResultSet rs=null;\n  String sql=\"SELECT * FROM AD_User_OrgAccess \" + \"WHERE AD_User_ID=? AND IsActive='Y'\";\n  try {\n    pstmt=DB.prepareStatement(sql,get_TrxName());\n    pstmt.setInt(1,getAD_User_ID());\n    rs=pstmt.executeQuery();\n    while (rs.next()) {\n      MUserOrgAccess oa=new MUserOrgAccess(getCtx(),rs,get_TrxName());\n      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.SEVERE,sql,e);\n  }\n finally {\n    DB.close(rs,pstmt);\n  }\n}"}
{"ids": "13514", "raw_code": "public static Vector3D max(Vector3D a,Vector3D b){\n  return new Vector3D(FastMath.max(a.getX(),b.getX()),FastMath.max(a.getY(),b.getY()),FastMath.max(a.getZ(),b.getZ()));\n}"}
{"ids": "45322", "raw_code": "private ArrayList<URLCrawlDatum> readContents(Path fetchlist) throws IOException {\n  SequenceFile.Reader reader=new SequenceFile.Reader(fs,fetchlist,conf);\n  ArrayList<URLCrawlDatum> l=new ArrayList<URLCrawlDatum>();\n  READ:   do {\n    Text key=new Text();\n    CrawlDatum value=new CrawlDatum();\n    if (!reader.next(key,value)) {\n      break READ;\n    }\n    l.add(new URLCrawlDatum(key,value));\n  }\n while (true);\n  reader.close();\n  return l;\n}"}
{"ids": "20125", "raw_code": "public static Color createRandomColour(){\n  float r=rand.nextFloat();\n  float g=rand.nextFloat();\n  float b=rand.nextFloat();\n  Color randomColor=new Color(r,g,b);\n  return randomColor;\n}"}
{"ids": "35036", "raw_code": "private static Pair<DiagnosticKind,Boolean> parseCategoryString(String category){\n  final String fixable=\"fixable-\";\n  final boolean isFixable=category.startsWith(fixable);\n  if (isFixable) {\n    category=category.substring(fixable.length());\n  }\n  DiagnosticKind categoryEnum=DiagnosticKind.fromParseString(category);\n  return Pair.of(categoryEnum,isFixable);\n}"}
{"ids": "65301", "raw_code": "public void legacyProcess(Class clazz,Method m,MethodAppearanceDecision decision){\n  if (m.getDeclaringClass() != Object.class && m.getReturnType() != void.class && m.getParameterTypes().length == 0) {\n    String mName=m.getName();\n    if (!looksLikePropertyReadMethod(mName)) {\n      decision.setExposeMethodAs(null);\n      try {\n        decision.setExposeAsProperty(new PropertyDescriptor(mName,clazz,mName,null));\n      }\n catch (      IntrospectionException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n}"}
{"ids": "12913", "raw_code": "public SPTKPitchReaderWriter(String lf0SPTKFile,float windowSizeInSeconds,float skipSizeInSeconds,int samplingRate){\n  contour=null;\n  header=new PitchFileHeader();\n  header.windowSizeInSeconds=windowSizeInSeconds;\n  header.skipSizeInSeconds=skipSizeInSeconds;\n  header.fs=samplingRate;\n  try {\n    contour=readSPTKF0Data(lf0SPTKFile);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "26837", "raw_code": "public void abort(){\n  cleanUp();\n  if (mFuture != null) {\n    mFuture.cancel(true);\n    mFuture=null;\n  }\n  if (mExecutorService != null) {\n    mExecutorService.shutdownNow();\n    mExecutorService=null;\n  }\n  mListener=null;\n}"}
{"ids": "53569", "raw_code": "public void addCSPStateListener(CSPStateListener listener){\n  listeners.add(listener);\n}"}
{"ids": "72112", "raw_code": "public static void printWrappedText(final PrintStream stream,final String message){\n  if (stream != null && message != null && !message.isEmpty()) {\n    stream.println(wrapText(message,MAX_LINE_WIDTH));\n  }\n}"}
{"ids": "985", "raw_code": "private synchronized Rect[] computeBoundingBoxes(){\n  if (!boundingBoxes.isPresent()) {\n    Rect[] bb=new Rect[(int)contours.size()];\n    for (int i=0; i < contours.size(); i++) {\n      bb[i]=boundingRect(contours.get(i));\n    }\n    boundingBoxes=Optional.of(bb);\n  }\n  return boundingBoxes.get();\n}"}
{"ids": "86867", "raw_code": "public void addTimeline(final JSONObject timeline){\n  TimelineChannel.notifyTimeline(timeline);\n  timelines.addFirst(timeline);\n  final int maxCnt=Symphonys.getInt(\"timelineCnt\");\n  if (timelines.size() > maxCnt) {\n    timelines.remove(maxCnt);\n  }\n}"}
{"ids": "66155", "raw_code": "private boolean loadLOBData(){\n  if (isStoreAttachmentsOnFileSystem) {\n    return loadLOBDataFromFileSystem();\n  }\n  return loadLOBDataFromDB();\n}"}
{"ids": "85021", "raw_code": "public static <T>List<T> copyToArrayListWithExtraCapacity(T[] elements,int extraCapacity){\n  List<T> asList;\n  if (elements != null) {\n    asList=new ArrayList<T>(elements.length + extraCapacity);\n    asList.addAll(Arrays.asList(elements));\n  }\n else {\n    asList=new ArrayList<T>(extraCapacity);\n  }\n  return asList;\n}"}
{"ids": "76470", "raw_code": "private boolean sendEventToListeners(ClusterEvent event){\n  boolean success=true;\n  for (  String listenerId : Collections.unmodifiableSet(listeners.keySet())) {\n    logger.debug(\"Notifying listener {} of event {} for instance {}\",listenerId,event.getType(),instanceId);\n    ClusterEventListener listener=listeners.get(listenerId);\n    if (listener != null && !listener.handleEvent(event)) {\n      success=false;\n    }\n  }\n  return success;\n}"}
{"ids": "23528", "raw_code": "@RequestMapping(method=RequestMethod.PUT,value=\"/{region}/{keys}\",consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value=\"update data for key\",notes=\"Update or insert (put) data for key in region.\" + \"op=REPLACE, update (replace) data with key if and only if the key exists in region\" + \"op=CAS update (compare-and-set) value having key with a new value if and only if the \\\"@old\\\" value sent matches the current value for the key in region\",response=void.class) @ApiResponses({@ApiResponse(code=200,message=\"OK.\"),@ApiResponse(code=400,message=\"Bad Request.\"),@ApiResponse(code=401,message=\"Invalid Username or Password.\"),@ApiResponse(code=403,message=\"Insufficient privileges for operation.\"),@ApiResponse(code=404,message=\"Region does not exist or if key is not mapped to some value for REPLACE or CAS.\"),@ApiResponse(code=409,message=\"For CAS, @old value does not match to the current value in region\"),@ApiResponse(code=500,message=\"GemFire throws an error or exception.\")}) @PreAuthorize(\"@securityService.authorize('WRITE', #region, #keys)\") public ResponseEntity<?> update(@PathVariable(\"region\") String region,@PathVariable(\"keys\") final String[] keys,@RequestParam(value=\"op\",defaultValue=\"PUT\") final String opValue,@RequestBody final String json){\n  logger.debug(\"updating key(s) for region ({}) \",region);\n  region=decode(region);\n  if (keys.length > 1) {\n    return updateMultipleKeys(region,keys,json);\n  }\n else {\n    return updateSingleKey(region,keys[0],json,opValue);\n  }\n}"}
{"ids": "9723", "raw_code": "public void load(X509Extension extensions){\n  Set<String> critExts=extensions.getCriticalExtensionOIDs();\n  Set<String> nonCritExts=extensions.getNonCriticalExtensionOIDs();\n  List<X509Ext> sortedExts=new ArrayList<X509Ext>();\n  for (Iterator<String> itr=critExts.iterator(); itr.hasNext(); ) {\n    String extOid=itr.next();\n    byte[] value=extensions.getExtensionValue(extOid);\n    X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,true);\n    sortedExts.add(ext);\n  }\n  for (Iterator<String> itr=nonCritExts.iterator(); itr.hasNext(); ) {\n    String extOid=itr.next();\n    byte[] value=extensions.getExtensionValue(extOid);\n    X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,false);\n    sortedExts.add(ext);\n  }\n  Collections.sort(sortedExts,new ExtensionNameComparator());\n  data=new Object[sortedExts.size()][3];\n  int i=0;\n  for (Iterator<X509Ext> itrSortedExts=sortedExts.iterator(); itrSortedExts.hasNext(); ) {\n    X509Ext ext=itrSortedExts.next();\n    loadRow(ext,i);\n    i++;\n  }\n  fireTableDataChanged();\n}"}
{"ids": "40869", "raw_code": "public Builder deleteAddresses(){\n  deleteFields.add(\"addresses\");\n  return this;\n}"}
{"ids": "65018", "raw_code": "public Query limit(int limit){\n  return limit(limit < 0 ? NO_LIMIT : Field.<Integer>field(Integer.toString(limit)));\n}"}
{"ids": "35911", "raw_code": "public static boolean fileExists(String fName){\n  boolean result=false;\n  File file=new File(fName);\n  if (file != null) {\n    result=file.exists() && file.isFile();\n  }\n  return result;\n}"}
{"ids": "11970", "raw_code": "private static void _init(){\n  addMethod(\"iConomy\",new com.earth2me.essentials.register.payment.methods.iCo6());\n  addMethod(\"iConomy\",new com.earth2me.essentials.register.payment.methods.iCo5());\n  addMethod(\"BOSEconomy\",new com.earth2me.essentials.register.payment.methods.BOSE7());\n  addMethod(\"Currency\",new com.earth2me.essentials.register.payment.methods.MCUR());\n  Dependencies.add(\"MultiCurrency\");\n  addMethod(\"Vault\",new com.earth2me.essentials.register.payment.methods.VaultEco());\n}"}
{"ids": "6385", "raw_code": "public static String convertFileName(String name,int maxBytes){\n  try {\n    return convertFileName(name,maxBytes,Charset.defaultCharset());\n  }\n catch (  CharacterCodingException cce) {\n    try {\n      return convertFileName(name,maxBytes,Charset.forName(\"UTF-8\"));\n    }\n catch (    CharacterCodingException e) {\n      throw new RuntimeException(\"UTF-8 should have encoded: \" + name,e);\n    }\n  }\n}"}
{"ids": "23670", "raw_code": "public static void copy(URL url,File file) throws IOException {\n  InputStream is=url.openStream();\n  try {\n    OutputStream os=new FileOutputStream(file);\n    try {\n      byte[] buffer=new byte[8192];\n      int read;\n      while ((read=is.read(buffer)) > 0) {\n        os.write(buffer,0,read);\n      }\n    }\n  finally {\n      os.close();\n    }\n  }\n  finally {\n    is.close();\n  }\n}"}
{"ids": "13712", "raw_code": "public void createAuthConfiguration(String name) throws AMConsoleException {\n  if ((name == null) || (name.length() == 0)) {\n    throw new AMConsoleException(getLocalizedString(\"authentication.config.missing.name\"));\n  }\n  String[] params={currentRealm,name};\n  logEvent(\"ATTEMPT_CREATE_AUTH_CONFIG\",params);\n  String errorMsg=null;\n  try {\n    AMAuthConfigUtils.createNamedConfig(name,0,new HashMap(),currentRealm,getUserSSOToken());\n    logEvent(\"SUCCEED_CREATE_AUTH_CONFIG\",params);\n  }\n catch (  SMSException e) {\n    errorMsg=getErrorString(e);\n    String[] paramsEx={currentRealm,name,errorMsg};\n    logEvent(\"SMS_EXCEPTION_CREATE_AUTH_CONFIG\",paramsEx);\n    debug.warning(\"problem creating auth instance\",e);\n  }\ncatch (  SSOException e) {\n    errorMsg=getErrorString(e);\n    String[] paramsEx={currentRealm,name,errorMsg};\n    logEvent(\"SSO_EXCEPTION_CREATE_AUTH_CONFIG\",paramsEx);\n    debug.warning(\"problem creating auth instance\",e);\n  }\ncatch (  AMConfigurationException e) {\n    errorMsg=getErrorString(e);\n    String[] paramsEx={currentRealm,name,errorMsg};\n    logEvent(\"AUTH_CONFIGURATION_EXCEPTION_CREATE_AUTH_CONFIG\",paramsEx);\n    debug.warning(\"problem creating auth instance\",e);\n  }\n  if (errorMsg != null) {\n    throw new AMConsoleException(errorMsg);\n  }\n}"}
{"ids": "32139", "raw_code": "private void sendBuffer() throws IOException {\n  buf.flip();\n  send(buf,buf.remaining());\n  buf=null;\n}"}
{"ids": "9283", "raw_code": "public void callEvent(Event event){\n  if (event.isAsynchronous()) {\n    if (Thread.holdsLock(this)) {\n      throw new IllegalStateException(event.getEventName() + \" cannot be triggered asynchronously from inside synchronized code.\");\n    }\n    if (server.isPrimaryThread()) {\n      throw new IllegalStateException(event.getEventName() + \" cannot be triggered asynchronously from primary server thread.\");\n    }\n    fireEvent(event);\n  }\n else {\nsynchronized (this) {\n      fireEvent(event);\n    }\n  }\n}"}
{"ids": "50961", "raw_code": "@Nullable private static PsiFile findFileToOpen(@NotNull List<PsiFile> files){\n  PsiFile bestFile=null;\n  FolderConfiguration bestConfig=null;\n  for (  PsiFile file : files) {\n    PsiDirectory qualifiedDirectory=file.getParent();\n    assert qualifiedDirectory != null : \"Resource file's parent directory cannot be null\";\n    FolderConfiguration config=FolderConfiguration.getConfigForFolder(qualifiedDirectory.getName());\n    if (bestConfig == null || config == null || config.compareTo(bestConfig) < 0) {\n      bestConfig=config;\n      bestFile=file;\n    }\n  }\n  return bestFile;\n}"}
{"ids": "71612", "raw_code": "protected boolean areEqual(String string1,String string2,boolean caseMatters){\n  return (caseMatters && string1.equals(string2)) || (!caseMatters && string1.equalsIgnoreCase(string2));\n}"}
{"ids": "51805", "raw_code": "protected void populateBlob(int id,byte[] baseContent,int requiredSize) throws SQLException {\n  Connection con=getConnectionViaDriverManager();\n  CallableStatement cstmt=null;\n  try {\n    cstmt=con.prepareCall(EXECUTE_FILL_BINARY_BLOB);\n    cstmt.setInt(1,id);\n    cstmt.setBytes(2,baseContent);\n    cstmt.setInt(3,requiredSize);\n    cstmt.execute();\n  }\n  finally {\n    closeQuietly(cstmt);\n    closeQuietly(con);\n  }\n}"}
{"ids": "7062", "raw_code": "public Statement isNull(){\n  statement.append(\" IS NULL\");\n  return this;\n}"}
{"ids": "48545", "raw_code": "public void clear(){\n  processQueue();\n  hash.clear();\n}"}
{"ids": "40987", "raw_code": "private void updateFavoriteStation(){\n  String showString=null;\n  if (FmRadioStation.isFavoriteStation(mContext,mCurrentStation)) {\n    String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE);\n    FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_SEARCHED,mCurrentStation);\n    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_off_selector);\n    mTextStationName.setText(\"\");\n    showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_deleted,R.string.toast_channel_deleted1);\n  }\n else {\n    String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED);\n    if (FmRadioStation.isStationExist(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED)) {\n      FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_FAVORITE,mCurrentStation);\n    }\n else {\n      FmRadioStation.insertStationToDb(mContext,stationName,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE);\n    }\n    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_on_selector);\n    mTextStationName.setText(stationName);\n    showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_added,R.string.toast_channel_added1);\n  }\n  showToast(showString);\n}"}
{"ids": "39082", "raw_code": "public Iterator<Capability> dependencies(){\n  return m_Dependencies.iterator();\n}"}
{"ids": "20463", "raw_code": "public static void notifyTicket(Context c,@NonNull Ticket t,boolean keepNotification){\n  String text;\n  String ticker;\n  int smallIcon;\n  int largeIcon;\n  int status;\nswitch (TicketsAdapter.getValidityStatus(t.getStatus(),t.getValidTo())) {\ncase TicketProvider.Tickets.STATUS_VALID:\ncase TicketProvider.Tickets.STATUS_VALID_EXPIRING:\n    text=c.getString(R.string.notif_valid_text,FormatUtil.formatDateTimeDifference(t.getValidTo()));\n  ticker=c.getString(R.string.notif_valid_ticker);\nsmallIcon=R.drawable.notification_small_ready;\nlargeIcon=R.drawable.notification_big_ready;\nstatus=TicketProvider.Tickets.STATUS_VALID_EXPIRING;\nbreak;\ncase TicketProvider.Tickets.STATUS_EXPIRING:\ncase TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED:\ntext=c.getString(R.string.notif_expiring_text,FormatUtil.formatTime(t.getValidTo()));\nticker=c.getString(R.string.notif_expiring_ticker);\nsmallIcon=R.drawable.notification_small_warning;\nlargeIcon=R.drawable.notification_big_warning;\nstatus=TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED;\nbreak;\ncase TicketProvider.Tickets.STATUS_EXPIRED:\ntext=c.getString(R.string.notif_expired_text,FormatUtil.formatTime(t.getValidTo()));\nticker=c.getString(R.string.notif_expired_ticker);\nsmallIcon=R.drawable.notification_small_expired;\nlargeIcon=R.drawable.notification_big_expired;\nstatus=TicketProvider.Tickets.STATUS_EXPIRED;\nbreak;\ndefault :\nreturn;\n}\nIntent intent=new Intent(c,WearableService.class);\nintent.setAction(\"sent_notification_to_wear\");\nintent.putExtra(\"ticket\",t);\nintent.putExtra(\"status\",status);\nc.startService(intent);\nIntent i=new Intent(c,MainActivity.class);\ni.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\ni.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId());\nPendingIntent openIntent=PendingIntent.getActivity(c,t.getNotificationId(),i,PendingIntent.FLAG_CANCEL_CURRENT);\nIntent i2=new Intent(c,MainActivity.class);\ni2.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);\ni2.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId());\ni2.putExtra(MainActivity.EXTRA_SHOW_SMS,true);\nPendingIntent showSmsIntent=PendingIntent.getActivity(c,t.getNotificationId() + 1000,i2,PendingIntent.FLAG_CANCEL_CURRENT);\nList<Action> actions=new ArrayList<Action>();\nactions.add(new Action(R.drawable.notification_show_sms,R.string.notif_show_sms,showSmsIntent));\nList<String> rows=new ArrayList<String>();\nrows.add(text);\nrows.add(c.getString(R.string.tickets_valid_from) + \": \" + FormatUtil.formatDateTime(t.getValidFrom()));\nrows.add(c.getString(R.string.tickets_code) + \": \" + t.getHash());\nfireNotification(c,t.getNotificationId(),openIntent,c.getString(R.string.application_name),text,rows,t.getCity(),ticker,smallIcon,largeIcon,actions,keepNotification);\n}"}
{"ids": "10548", "raw_code": "public final static int parseInt(String str){\n  char c=str.charAt(0);\n  int length=str.length();\n  boolean negative=(c == '-');\n  int offset=1;\n  if (negative) {\n    if (length == 1 || length > 10) {\n      return Integer.parseInt(str);\n    }\n    c=str.charAt(offset++);\n  }\n else {\n    if (length > 9) {\n      return Integer.parseInt(str);\n    }\n  }\n  if (c > '9' || c < '0') {\n    return Integer.parseInt(str);\n  }\n  int num=c - '0';\n  if (offset < length) {\n    c=str.charAt(offset++);\n    if (c > '9' || c < '0') {\n      return Integer.parseInt(str);\n    }\n    num=(num * 10) + (c - '0');\n    if (offset < length) {\n      c=str.charAt(offset++);\n      if (c > '9' || c < '0') {\n        return Integer.parseInt(str);\n      }\n      num=(num * 10) + (c - '0');\n      if (offset < length) {\n        do {\n          c=str.charAt(offset++);\n          if (c > '9' || c < '0') {\n            return Integer.parseInt(str);\n          }\n          num=(num * 10) + (c - '0');\n        }\n while (offset < length);\n      }\n    }\n  }\n  return negative ? -num : num;\n}"}
{"ids": "39617", "raw_code": "@Deprecated public static <T>T executeWithBackOff(AbstractGoogleClientRequest<T> client,String error,Object... errorArgs) throws IOException, InterruptedException {\n  return executeWithBackOff(client,String.format(error,errorArgs));\n}"}
{"ids": "56067", "raw_code": "private void checkServerResponseCode(HttpURLConnection urlConnection) throws RequestFailureException {\n  try {\n    if (urlConnection.getResponseCode() != 200) {\n      throw new RequestFailureException(\"Received \" + urlConnection.getResponseCode() + \" code instead of 200 (OK) from the server.  Aborting.\");\n    }\n  }\n catch (  IOException e) {\n    throw new RequestFailureException(\"Failed to read response code from server: \",e);\n  }\n}"}
{"ids": "36300", "raw_code": "public static void addResourceSource(ResourceSource source){\n  ALL_RESOURCE_SOURCES.add(source);\n}"}
{"ids": "73351", "raw_code": "private void commitChanges(){\n  hopfieldPropsPanel.commitChanges();\n  inputPanel.commitChanges();\n}"}
{"ids": "5131", "raw_code": "private boolean connect_to_target(PlaPointInt p_from_point){\n  if (nearest_target_item != null && target_set != null && !target_set.contains(nearest_target_item)) {\n    nearest_target_item=null;\n  }\n  if (nearest_target_item == null || !nearest_target_item.shares_net_no(net_nos)) {\n    return false;\n  }\n  boolean route_completed=false;\n  PlaPointInt connection_point=null;\n  if (nearest_target_item instanceof BrdAbit) {\n    BrdAbit target=(BrdAbit)nearest_target_item;\n    connection_point=target.center_get();\n  }\n else   if (nearest_target_item instanceof BrdTracep) {\n    return r_board.connect_to_trace(p_from_point,(BrdTracep)nearest_target_item,pen_half_width_arr[layer_active_no],clearance_class);\n  }\n else   if (nearest_target_item instanceof BrdAreaConduction) {\n    connection_point=p_from_point;\n  }\n  if (connection_point != null) {\n    route_completed=itera_connect(p_from_point,connection_point);\n  }\n  return route_completed;\n}"}
{"ids": "84548", "raw_code": "public boolean onGenericMotionEvent(MotionEvent ev){\n  if ((ev.getSource() & InputDevice.SOURCE_CLASS_POINTER) == InputDevice.SOURCE_CLASS_POINTER) {\n    int action=ev.getAction();\nswitch (action & MotionEvent.ACTION_MASK) {\ncase MotionEvent.ACTION_SCROLL:\n      float vScroll=ev.getAxisValue(MotionEvent.AXIS_VSCROLL);\n    if (vScroll > 0) {\n      if (mDeckView.ensureFocusedTask()) {\n        mDeckView.focusNextTask(true,false);\n      }\n    }\n else {\n      if (mDeckView.ensureFocusedTask()) {\n        mDeckView.focusNextTask(false,false);\n      }\n    }\n  return true;\n}\n}\nreturn false;\n}"}
{"ids": "13579", "raw_code": "public boolean addClass(OwlClass targetClass){\n  targetClass.addQCRestriction(this);\n  return qcClasses.add(targetClass);\n}"}
{"ids": "4647", "raw_code": "public void editElement(final Object element,final String columnPropertyName){\n  final int columnIndex=TableViewerUtils.columnPropertyNameToColumnIndex(columnPropertyName,true,viewer);\n  viewer.editElement(element,columnIndex);\n}"}
{"ids": "3889", "raw_code": "@Override public ServerHeartbeat server(String address,int port,boolean isSSL,String clusterId,String displayName,boolean isDynamic){\n  Objects.requireNonNull(address);\n  Objects.requireNonNull(clusterId);\n  if (address.isEmpty()) {\n    address=\"127.0.0.1\";\n  }\n  ClusterHeartbeat cluster=createCluster(clusterId);\n  ServerHeartbeat server;\n  if (isDynamic) {\n    server=cluster.createDynamicServer(address,port,isSSL);\n  }\n else {\n    server=cluster.createServer(address,port,isSSL);\n  }\n  if (displayName != null) {\n    server.setDisplayName(displayName);\n  }\n  if (!isDynamic) {\n    cluster.addSeedServer(server);\n  }\n  return server;\n}"}
{"ids": "70364", "raw_code": "private void findClub(){\n  if (ce() == null) {\n    return;\n  }\n  String title=Messages.getString(\"FiringDisplay.FindClubDialog.title\");\n  String body=Messages.getString(\"FiringDisplay.FindClubDialog.message\");\n  if (!clientgui.doYesNoDialog(title,body)) {\n    return;\n  }\n  attacks.removeAllElements();\n  attacks.addElement(new FindClubAction(cen));\n  ready();\n}"}
{"ids": "68816", "raw_code": "public PDFXref(byte[] line){\n  if (line == null) {\n    id=-1;\n    generation=-1;\n  }\n else {\n    id=Integer.parseInt(new String(line,0,10));\n    generation=Integer.parseInt(new String(line,11,5));\n  }\n  compressed=false;\n}"}
{"ids": "76613", "raw_code": "public static String[] makeStrings(Collection<InetAddress> addrs){\n  String[] result=new String[addrs.size()];\n  int i=0;\n  for (  InetAddress addr : addrs) {\n    result[i++]=addr.getHostAddress();\n  }\n  return result;\n}"}
{"ids": "71761", "raw_code": "public SmoothMoves(){\n  cycleStart=System.nanoTime() / 1000000;\n  startTimer(currentResolution);\n}"}
{"ids": "65549", "raw_code": "public static void updatePriceLists(Properties ctx,ProductBean productBean,String trxName) throws OperationException {\n  ArrayList<ProductBean> list=productBean.getProductBeanList();\n  if (list != null) {\n    int productId=productBean.getProductId();\n    Iterator<ProductBean> iter=list.iterator();\n    while (iter.hasNext()) {\n      ProductBean bean=iter.next();\n      int priceListId=bean.getPriceListId();\n      BigDecimal stdPrice=bean.getStdPrice();\n      BigDecimal listPrice=bean.getListPrice();\n      BigDecimal limitPrice=bean.getLimitPrice();\n      MPriceList priceList=MPriceList.get(ctx,priceListId,trxName);\n      if (priceList.isTaxIncluded()) {\n        stdPrice=bean.getStdPriceIncl();\n        listPrice=bean.getListPriceIncl();\n        limitPrice=bean.getLimitPriceIncl();\n      }\n      updatePriceLists(ctx,productId,priceListId,stdPrice,listPrice,limitPrice,trxName);\n    }\n  }\n}"}
{"ids": "75049", "raw_code": "private String checkDependencies(ModuleDescriptor md,HashMap<String,ModuleDescriptor> modlist){\n  logger.debug(\"Checking dependencies of \" + md.getId());\n  ModuleInterface[] requires=md.getRequires();\n  if (requires != null) {\n    for (    ModuleInterface req : requires) {\n      String res=checkOneDependency(md,req,modlist);\n      if (!res.isEmpty()) {\n        return res;\n      }\n    }\n  }\n  return \"\";\n}"}
{"ids": "84273", "raw_code": "public void deserializeFunnel(List<Object> serializedFunnel){\n  Set<Object> funnelStepAccumulator=new HashSet<>();\n  for (  Object e : serializedFunnel) {\n    if (e != null) {\n      funnelStepAccumulator.add(e);\n    }\n else {\n      funnelSteps.add(new HashSet<>(funnelStepAccumulator));\n      funnelStepAccumulator.clear();\n    }\n  }\n}"}
{"ids": "17250", "raw_code": "public static String appendParameter(CtClass type,String descriptor){\n  int i=descriptor.indexOf(')');\n  if (i < 0)   return descriptor;\n else {\n    StringBuffer newdesc=new StringBuffer();\n    newdesc.append(descriptor.substring(0,i));\n    toDescriptor(newdesc,type);\n    newdesc.append(descriptor.substring(i));\n    return newdesc.toString();\n  }\n}"}
{"ids": "20908", "raw_code": "public void addCatchClause(CatchClause clause){\n  assertNotNull(clause);\n  if (catchClauses == null) {\n    catchClauses=new ArrayList<CatchClause>();\n  }\n  catchClauses.add(clause);\n  clause.setParent(this);\n}"}
{"ids": "30480", "raw_code": "public void unlock(Object key){\n  String uid=String.valueOf(key);\n  Transaction tr=lockedUIDHashMap.get(uid);\n  if (tr == null) {\n    return;\n  }\n  try {\n    tr.commit();\n  }\n catch (  Exception e) {\n    logger.warn(\"Failed to commit transaction and unlocking the object, ignoring\",e);\n  }\n finally {\n    lockedUIDHashMap.remove(uid);\n  }\n}"}
{"ids": "29558", "raw_code": "public List<Order> fetchOrders(int startIndex,int num){\n  int endIndex=startIndex + num > orders.size() ? orders.size() : startIndex + num;\n  return orders.subList(startIndex,endIndex);\n}"}
{"ids": "21064", "raw_code": "public boolean ensureSchemaAgreement(){\n  long start=System.currentTimeMillis();\n  Map<String,List<String>> schemas=null;\n  while (System.currentTimeMillis() - start < DbClientContext.MAX_SCHEMA_WAIT_MS) {\n    try {\n      log.info(\"sleep for {} seconds before checking schema versions.\",DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS / 1000);\n      Thread.sleep(DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS);\n    }\n catch (    InterruptedException ex) {\n      log.warn(\"Interrupted during sleep\");\n    }\n    schemas=getSchemaVersions();\n    if (schemas.size() > 2) {\n      continue;\n    }\n    if (schemas.size() == 1) {\n      if (!schemas.containsKey(StorageProxy.UNREACHABLE)) {\n        return false;\n      }\n else {\n        continue;\n      }\n    }\n    if (schemas.containsKey(StorageProxy.UNREACHABLE)) {\n      return true;\n    }\n  }\n  log.error(\"Unable to converge schema versions {}\",schemas);\n  throw new IllegalStateException(\"Unable to converge schema versions\");\n}"}
{"ids": "47667", "raw_code": "void clear(){\n  stack.clear();\n}"}
{"ids": "80094", "raw_code": "private TileStore(final SpriteStore store){\n  this.store=store;\n  tiles=new ArrayList<Sprite>();\n  tiles.add(store.getEmptySprite());\n}"}
{"ids": "31161", "raw_code": "private void token(char c) throws ConfigurationException, IOException {\n  int t=st.nextToken();\n  if (t != c) {\n    if (c == '\"') {\n      syntax(\"a String\");\n    }\n else {\n      syntax(new String(new char[]{'\\'',c,+'\\''}));\n    }\n  }\n}"}
{"ids": "72592", "raw_code": "public static boolean isJarURL(URL url){\n  String protocol=url.getProtocol();\n  return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol)|| URL_PROTOCOL_WSJAR.equals(protocol));\n}"}
{"ids": "33226", "raw_code": "public Accessor(String className,ClassLoader classLoader,Class[] constructorTypes,Object[] constructorArgs){\n  try {\n    fClass=Class.forName(className,true,classLoader);\n  }\n catch (  ClassNotFoundException e) {\n    fail();\n  }\ncatch (  ExceptionInInitializerError e) {\n    fail();\n  }\n  Constructor constructor=null;\n  try {\n    constructor=fClass.getDeclaredConstructor(constructorTypes);\n  }\n catch (  SecurityException e2) {\n    fail();\n  }\ncatch (  NoSuchMethodException e2) {\n    fail();\n  }\n  Assert.isNotNull(constructor);\n  constructor.setAccessible(true);\n  try {\n    fInstance=constructor.newInstance(constructorArgs);\n  }\n catch (  IllegalArgumentException e) {\n    fail();\n  }\ncatch (  InvocationTargetException e) {\n    fail();\n  }\ncatch (  InstantiationException e) {\n    fail();\n  }\ncatch (  IllegalAccessException e) {\n    fail();\n  }\n}"}
{"ids": "41233", "raw_code": "public static List<LoggedMqttMessage> parseMessageLog(final List<String> messages,final ProgressUpdater progress,final long current,final long max) throws SpyException {\n  try {\n    final long startTime=TimeUtils.getMonotonicTime();\n    final int items=messages.size();\n    final long chunkSize=items / 10;\n    final MqttMessageLogParser parser=new MqttMessageLogParser();\n    final List<LoggedMqttMessage> list=new ArrayList<LoggedMqttMessage>();\n    long item=0;\n    long reportAt=1;\n    for (int i=0; i < items; i++) {\n      final String message=messages.get(i);\n      if (progress != null) {\n        if (progress.isCancelled()) {\n          logger.info(\"Task cancelled!\");\n          return null;\n        }\n        item++;\n        if (item % 1000 == 0) {\n          progress.update(current + item,max);\n        }\n      }\n      if ((i > 0) && (i == (chunkSize * reportAt))) {\n        final long currentTime=TimeUtils.getMonotonicTime();\n        final long timeTaken=currentTime - startTime;\n        final long totalTimeExpected=timeTaken * items / i;\n        if (timeTaken > 1000) {\n          logger.info(\"Processed {}%, estimated time left = {}s\",reportAt * 10,(totalTimeExpected - timeTaken) / 1000);\n        }\n        reportAt++;\n      }\n      try {\n        list.add(parser.parse(message));\n      }\n catch (      XMLException e) {\n        logger.error(\"Can't process message \" + message,e);\n      }\n    }\n    logger.info(\"Message audit log - parsed {} XML messages\",list.size());\n    return list;\n  }\n catch (  XMLException e) {\n    throw new SpyException(\"Can't parse the message audit log file\",e);\n  }\n}"}
{"ids": "71569", "raw_code": "public void stop(){\n  duration+=System.currentTimeMillis() - start;\n}"}
{"ids": "42545", "raw_code": "@Uninterruptible public static Address unwindNativeStackFrame(Address currfp){\n  if (VM.BuildForIA32) {\n    return currfp;\n  }\n  Address callee_fp;\n  Address fp=Magic.getCallerFramePointer(currfp);\n  Address ip;\n  do {\n    callee_fp=fp;\n    ip=Magic.getReturnAddressUnchecked(fp);\n    fp=Magic.getCallerFramePointer(fp);\n  }\n while (!MemoryManager.addressInVM(ip) && fp.NE(StackFrameLayout.getStackFrameSentinelFP()));\n  if (VM.BuildForPowerPC) {\n    return fp;\n  }\n else {\n    return callee_fp;\n  }\n}"}
{"ids": "2026", "raw_code": "public static boolean isMimeTypeImage(String mimeType){\n  return mimeType != null && mimeType.startsWith(\"image/\");\n}"}
{"ids": "74762", "raw_code": "public FXMessageDialog(final Stage parent,final Parent group){\n  this(parent);\n  content.setCenter(group);\n}"}
{"ids": "12510", "raw_code": "public Matrix abs(){\n  Matrix result=new Matrix(m,n);\n  for (int i=0; i < result.A.length; i++) {\n    for (int j=0; j < result.A[i].length; j++)     result.A[i][j]=Math.abs(A[i][j]);\n  }\n  return result;\n}"}
{"ids": "14725", "raw_code": "public void removeAttribute(String attrName) throws SMSException {\n  Set attribute=(Set)attrSet.get(attrName);\n  if (attribute == null) {\n    throw (new SMSException(LdapException.newLdapException(ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,getBundleString(IUMSConstants.SMS_ATTR_OR_VAL_EXISTS)),\"sms-ATTR_OR_VAL_EXISTS\"));\n  }\n  attrSet.remove(attrName);\n  if (modSet == null) {\n    modSet=new HashSet();\n  }\n  BasicAttribute ba=new BasicAttribute(attrName,attribute);\n  for (Iterator items=attribute.iterator(); items.hasNext(); )   ba.add(items.next());\n  modSet.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE,ba));\n}"}
{"ids": "37302", "raw_code": "private static DebuggerException parseExceptionOption(Node node){\n  return new DebuggerException(parseStringOption(node,\"exceptionName\"),parseLongOption(node,\"exceptionCode\"),DebuggerExceptionHandlingAction.convertToHandlingAction(parseIntOption(node,\"handlingAction\")));\n}"}
{"ids": "81849", "raw_code": "public Image rotate180Degrees(Image image,boolean maintainOpacity){\n  int[] rgb=image.getRGB();\n  int[] newRGB=new int[rgb.length];\n  int width=image.getWidth();\n  int height=image.getHeight();\n  for (int y=0; y < height; y++) {\n    for (int x=0; x < width; x++) {\n      int destX=width - x - 1;\n      newRGB[destX + (height - y - 1) * width]=rgb[x + y * width];\n    }\n  }\n  return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity);\n}"}
{"ids": "65711", "raw_code": "public static void updateFinantare(SetGetModel m,String changedColumnName){\n  BigDecimal valCofinantare=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Valoare_Cofinantare);\n  BigDecimal assetCost=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Asset_Cost);\n  BigDecimal valTert=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Valoare_Tert);\n  if (valCofinantare.signum() == 0 && valTert.signum() == 0) {\n    valCofinantare=assetCost;\n    valTert=Env.ZERO;\n  }\n else   if (COLUMNNAME_A_Asset_Cost.equals(changedColumnName)) {\n    valCofinantare=assetCost.subtract(valTert);\n  }\n else   if (COLUMNNAME_A_Valoare_Cofinantare.equals(changedColumnName)) {\n    valTert=assetCost.subtract(valCofinantare);\n  }\n else   if (COLUMNNAME_A_Valoare_Tert.equals(changedColumnName)) {\n    valCofinantare=assetCost.subtract(valTert);\n  }\n else {\n    valTert=assetCost.subtract(valCofinantare);\n  }\n  String tipFinantare=A_TIP_FINANTARE_Cofinantare;\n  if (valTert.signum() == 0) {\n    tipFinantare=A_TIP_FINANTARE_Proprie;\n  }\n else   if (valCofinantare.signum() == 0) {\n    tipFinantare=A_TIP_FINANTARE_Terti;\n  }\n  m.set_AttrValue(COLUMNNAME_A_Tip_Finantare,tipFinantare);\n  m.set_AttrValue(COLUMNNAME_A_Valoare_Cofinantare,valCofinantare);\n  m.set_AttrValue(COLUMNNAME_A_Valoare_Tert,valTert);\n  if (A_TIP_FINANTARE_Proprie.equals(tipFinantare) && SetGetUtil.isPersistent(m)) {\n    m.set_AttrValue(COLUMNNAME_A_FundingMode_ID,null);\n  }\n}"}
{"ids": "65643", "raw_code": "private void displayCalendar(){\n  ListItem listItem=fieldResource.getSelectedItem();\n  if (listItem == null)   return;\n  KeyNamePair pp=new KeyNamePair((Integer)listItem.getValue(),listItem.getLabel());\n  int S_Resource_ID=pp.getKey();\n  m_mAssignment.setS_Resource_ID(S_Resource_ID);\n  Date date=fieldDate.getValue();\n  if (date == null)   date=new Timestamp(System.currentTimeMillis());\n  m_loading=true;\n  schedulePane.recreate(S_Resource_ID,date);\n  m_loading=false;\n  invalidate();\n}"}
{"ids": "71146", "raw_code": "public LineString createLineString(CoordinateSequence coordinates){\n  return new LineString(coordinates,this);\n}"}
{"ids": "17267", "raw_code": "public void close(){\n  if (closed.compareAndSet(false,true)) {\n    doClose();\n  }\n}"}
{"ids": "28845", "raw_code": "void subtractFlakes(int quantity){\n  for (int i=0; i < quantity; ++i) {\n    int index=numFlakes - i - 1;\n    flakes.remove(index);\n  }\n  setNumFlakes(numFlakes - quantity);\n}"}
{"ids": "13856", "raw_code": "public boolean requiredResourceName(Policy policy,String realmName,String name){\n  getSvcTypeNameToActionsMap(policy,realmName);\n  return requiredResourceNameService.contains(name);\n}"}
{"ids": "49332", "raw_code": "public static void main(String args[]){\n  boolean ok=parseOptions(args);\n  if (!ok || !stripFiles(infiles,outfiles)) {\n    System.exit(1);\n  }\n}"}
{"ids": "68107", "raw_code": "JarFile open(final File jarFile) throws IOException {\n  isTrue(jarFile.exists(),\"The JAR file must exists.\");\n  return new JarFile(jarFile);\n}"}
{"ids": "40901", "raw_code": "public void removeAllEmails(){\n  emails.clear();\n}"}
{"ids": "14368", "raw_code": "public PWResetAdminLog(SSOToken token){\n  this.token=token;\n  if (logStatus) {\n    logger=(com.sun.identity.log.Logger)Logger.getLogger(logFile);\n  }\n  String lstr=SystemProperties.get(Constants.AM_LOCALE);\n  init(lstr);\n}"}
{"ids": "8241", "raw_code": "public static boolean isLetter(Character self){\n  return Character.isLetter(self);\n}"}
{"ids": "81311", "raw_code": "public static String createLink(String uri,String label){\n  return \"<a href='\" + uri + \"'>\"+ label+ \"</a>\";\n}"}
{"ids": "44303", "raw_code": "public static boolean isExpression(String token,boolean isXml){\n  String openExpr;\n  String closeExpr;\n  if (isXml) {\n    openExpr=OPEN_EXPR_XML;\n    closeExpr=CLOSE_EXPR_XML;\n  }\n else {\n    openExpr=OPEN_EXPR;\n    closeExpr=CLOSE_EXPR;\n  }\n  if (token.startsWith(openExpr) && token.endsWith(closeExpr)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "15863", "raw_code": "public void destroy(){\n  this.isInitialized=false;\n  this.isFinished=false;\n  this.firstNode=null;\n  this.tailLength=0;\n  this.firstNodeHeight=-1;\n}"}
{"ids": "62764", "raw_code": "public static Uri fromFile(File file){\n  if (file == null) {\n    throw new NullPointerException(\"file\");\n  }\n  PathPart path=PathPart.fromDecoded(file.getAbsolutePath());\n  return new HierarchicalUri(\"file\",Part.EMPTY,path,Part.NULL,Part.NULL);\n}"}
{"ids": "32338", "raw_code": "protected Object readFixedType(BinaryReaderExImpl reader) throws BinaryObjectException {\n  Object val=null;\nswitch (mode) {\ncase BYTE:\n    val=reader.readByteNullable(id);\n  break;\ncase SHORT:\nval=reader.readShortNullable(id);\nbreak;\ncase INT:\nval=reader.readIntNullable(id);\nbreak;\ncase LONG:\nval=reader.readLongNullable(id);\nbreak;\ncase FLOAT:\nval=reader.readFloatNullable(id);\nbreak;\ncase DOUBLE:\nval=reader.readDoubleNullable(id);\nbreak;\ncase CHAR:\nval=reader.readCharNullable(id);\nbreak;\ncase BOOLEAN:\nval=reader.readBooleanNullable(id);\nbreak;\ncase DECIMAL:\nval=reader.readDecimal(id);\nbreak;\ncase STRING:\nval=reader.readString(id);\nbreak;\ncase UUID:\nval=reader.readUuid(id);\nbreak;\ncase DATE:\nval=reader.readDate(id);\nbreak;\ncase TIMESTAMP:\nval=reader.readTimestamp(id);\nbreak;\ncase BYTE_ARR:\nval=reader.readByteArray(id);\nbreak;\ncase SHORT_ARR:\nval=reader.readShortArray(id);\nbreak;\ncase INT_ARR:\nval=reader.readIntArray(id);\nbreak;\ncase LONG_ARR:\nval=reader.readLongArray(id);\nbreak;\ncase FLOAT_ARR:\nval=reader.readFloatArray(id);\nbreak;\ncase DOUBLE_ARR:\nval=reader.readDoubleArray(id);\nbreak;\ncase CHAR_ARR:\nval=reader.readCharArray(id);\nbreak;\ncase BOOLEAN_ARR:\nval=reader.readBooleanArray(id);\nbreak;\ncase DECIMAL_ARR:\nval=reader.readDecimalArray(id);\nbreak;\ncase STRING_ARR:\nval=reader.readStringArray(id);\nbreak;\ncase UUID_ARR:\nval=reader.readUuidArray(id);\nbreak;\ncase DATE_ARR:\nval=reader.readDateArray(id);\nbreak;\ncase TIMESTAMP_ARR:\nval=reader.readTimestampArray(id);\nbreak;\ncase OBJECT_ARR:\nval=reader.readObjectArray(id);\nbreak;\ncase COL:\nval=reader.readCollection(id,null);\nbreak;\ncase MAP:\nval=reader.readMap(id,null);\nbreak;\ncase BINARY_OBJ:\nval=reader.readBinaryObject(id);\nbreak;\ncase ENUM:\nval=reader.readEnum(id,field.getType());\nbreak;\ncase ENUM_ARR:\nval=reader.readEnumArray(id,field.getType().getComponentType());\nbreak;\ncase BINARY:\ncase OBJECT:\nval=reader.readObject(id);\nbreak;\ncase CLASS:\nval=reader.readClass(id);\nbreak;\ndefault :\nassert false : \"Invalid mode: \" + mode;\n}\nreturn val;\n}"}
{"ids": "24018", "raw_code": "public void remove(RegionEntry entry,Object value){\n  Object object=map.get(entry);\n  if (object == null)   return;\n  if (object instanceof Collection) {\n    Collection coll=(Collection)object;\n    boolean removed=false;\n    if (useList) {\nsynchronized (coll) {\n        removed=coll.remove(value);\n      }\n    }\n else {\n      removed=coll.remove(value);\n    }\n    if (removed) {\n      if (coll.size() == 0) {\n        map.remove(entry);\n      }\n      atomicUpdater.decrementAndGet(this);\n    }\n  }\n else {\n    if (object.equals(value)) {\n      map.remove(entry);\n    }\n    atomicUpdater.decrementAndGet(this);\n  }\n}"}
{"ids": "52479", "raw_code": "private HashDataCache(DataCache<Pair<String,T>> cache,String algorithm){\n  this.cache=cache;\n  this.algorithm=algorithm;\n  try {\n    MessageDigest.getInstance(algorithm);\n  }\n catch (  NoSuchAlgorithmException e) {\n    String msg=\"Unable to get hash generator with algorithm: \" + algorithm;\n    LOG.warn(msg,e);\n    throw new SystemConfigException(e);\n  }\n}"}
{"ids": "30210", "raw_code": "private void marshallEnum(Object value,EnumType enumType) throws IOException {\n  LOG.debug(\"Enum value: {} of type: {}\",value,enumType);\n  jsonGenerator.writeString(value.toString());\n}"}
{"ids": "1924", "raw_code": "private void initEvents(){\n  setSelectionSounds(play,hScore,credits,quit,quitY,quitN);\n  play.setOnAction(null);\n  hScore.setOnAction(null);\n  credits.setOnAction(null);\n  quit.setOnAction(null);\n  quitY.setOnAction(null);\n  quitN.setOnAction(null);\n  scene.setOnKeyPressed(null);\n  scene.setOnKeyReleased(null);\n}"}
{"ids": "35155", "raw_code": "private String mapCollectionName(String collectionName,boolean dest){\n  if ((collectionRules.size() == 0) && (StringUtils.isBlank(defaultCollectionAppend))) {\n    return collectionName;\n  }\n  for (  String[] rule : collectionRules) {\n    String match=(dest) ? rule[0] : rule[1];\n    String replace=(dest) ? rule[1] : rule[0];\n    if (collectionName.contains(match)) {\n      return collectionName.replace(match,replace);\n    }\n  }\n  if (dest) {\n    return collectionName + defaultCollectionAppend;\n  }\n else {\n    return collectionName.replace(defaultCollectionAppend,\"\");\n  }\n}"}
{"ids": "9266", "raw_code": "static public void fillRandomIntegerUniform(IDoubleVector vec,Random rand,int min,int max){\n  final int delta=max - min;\n  for (int i=0; i < vec.getLength(); ++i) {\n    vec.set(i,min + rand.nextInt(delta));\n  }\n}"}
{"ids": "48846", "raw_code": "private static void stoppingAnimation(Thread me){\n  final FetcherInfo info=FetcherInfo.getFetcherInfo();\nsynchronized (info.waitList) {\n    int index=-1;\n    for (int i=0; i < info.fetchers.length; i++) {\n      if (info.fetchers[i] == me) {\n        return;\n      }\n      if (info.fetchers[i] == null) {\n        index=i;\n      }\n    }\n    if (index >= 0) {\n      info.fetchers[index]=me;\n      info.numFetchers++;\n      me.setName(\"Image Fetcher \" + index);\n      return;\n    }\n  }\n}"}
{"ids": "4994", "raw_code": "public boolean name_is_equal(String p_name){\n  if (p_name == null)   return false;\n  return p_name.equalsIgnoreCase(pkg_name);\n}"}
{"ids": "7427", "raw_code": "protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){\n  XYItemRenderer r=getRenderer(index);\n  if (r == null) {\n    return;\n  }\n  if (index >= getDatasetCount()) {\n    return;\n  }\n  Collection markers=getRangeMarkers(index,layer);\n  ValueAxis axis=getRangeAxisForDataset(index);\n  if (markers != null && axis != null) {\n    Iterator iterator=markers.iterator();\n    while (iterator.hasNext()) {\n      Marker marker=(Marker)iterator.next();\n      r.drawRangeMarker(g2,this,axis,marker,dataArea);\n    }\n  }\n}"}
{"ids": "68070", "raw_code": "protected boolean shouldClose(PooledConnection con,int action){\n  if (con.getConnectionVersion() < getPoolVersion())   return true;\n  if (con.isDiscarded())   return true;\n  if (isClosed())   return true;\n  if (!con.validate(action))   return true;\n  if (!terminateTransaction(con))   return true;\n  if (con.isMaxAgeExpired())   return true;\n else   return false;\n}"}
{"ids": "13533", "raw_code": "public Vector3D hsl(){\n  float r=redf();\n  float g=greenf();\n  float b=bluef();\n  float min=Math.min(Math.min(r,g),b);\n  float max=Math.max(Math.max(r,g),b);\n  float l=lighting(min,max);\n  float s=saturation(min,max,l);\n  float h=hue(r,g,b,min,max);\n  return new Vector3D(h,s,l);\n}"}
{"ids": "9303", "raw_code": "public Future<Boolean> shutdownAwaiting(long timeoutForEach){\n  ExecutorService executor=Executors.newScheduledThreadPool(0);\n  return executor.submit(createShutdown(timeoutForEach));\n}"}
{"ids": "86243", "raw_code": "public void changeDirectory(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {\nsynchronized (lock) {\n    if (!connected) {\n      throw new IllegalStateException(\"Client not connected\");\n    }\n    if (!authenticated) {\n      throw new IllegalStateException(\"Client not authenticated\");\n    }\n    communication.sendFTPCommand(\"CWD \" + path);\n    FTPReply r=communication.readFTPReply();\n    touchAutoNoopTimer();\n    if (!r.isSuccessCode()) {\n      throw new FTPException(r);\n    }\n  }\n}"}
{"ids": "4357", "raw_code": "private String removeQuote(String column){\n  return column != null ? column.replaceAll(statementBuilder.getColumnQuote(),StringUtils.EMPTY) : null;\n}"}
{"ids": "55477", "raw_code": "private boolean scrolledUpTimeout(){\n  if (fixedChat || pauseKeyPressed) {\n    return false;\n  }\n  if (!styles.autoScroll()) {\n    return false;\n  }\n  long timePassed=System.currentTimeMillis() - lastChanged;\n  if (timePassed > 1000 * styles.autoScrollTimeout()) {\n    LOGGER.info(\"ScrolledUp Timeout (\" + timePassed + \")\");\n    return true;\n  }\n  return false;\n}"}
{"ids": "45224", "raw_code": "public List<Document> search(Query query,boolean prefixWildCard){\n  List<Document> documents=new ArrayList<Document>();\n  try {\n    IndexSearcher searcher=getSearcher();\n    TopDocs search=searcher.search(query,10000);\n    for (    ScoreDoc scoreDoc : search.scoreDocs) {\n      Document doc=searcher.doc(scoreDoc.doc);\n      documents.add(doc);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new RuntimeException(e);\n  }\n  return documents;\n}"}
{"ids": "59587", "raw_code": "@RequestMapping(value=\"\",method={RequestMethod.GET}) @ResponseBody public List<JobInstance> list(JobListRequest jobRequest){\n  List<JobInstance> jobInstanceList=Collections.emptyList();\n  List<JobStatusEnum> statusList=new ArrayList<JobStatusEnum>();\n  if (null != jobRequest.getStatus()) {\n    for (    int status : jobRequest.getStatus()) {\n      statusList.add(JobStatusEnum.getByCode(status));\n    }\n  }\n  JobTimeFilterEnum timeFilter=JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());\n  try {\n    jobInstanceList=jobService.listAllJobs(jobRequest.getCubeName(),jobRequest.getProjectName(),statusList,jobRequest.getLimit(),jobRequest.getOffset(),timeFilter);\n  }\n catch (  Exception e) {\n    logger.error(e.getLocalizedMessage(),e);\n    throw new InternalErrorException(e);\n  }\n  return jobInstanceList;\n}"}
{"ids": "15912", "raw_code": "public byte[] toBinary(int q){\n  return ArrayEncoder.encodeModQ(coeffs,q);\n}"}
{"ids": "68560", "raw_code": "public final void openFallbackInputStream() throws DataFallbackException {\n  if (inputBuf == null) {\n    if (LOG.isDebugEnabled())     LOG.debug(\"openFallbackInputStream() : Opening the reader for the \" + dataFile.getName() + \"file\");\n    try {\n      setInput(new BufferedReader(new FileReader(dataFile)));\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n  }\n}"}
{"ids": "37454", "raw_code": "public void addCaretListener(final ICaretListener listener){\n  Preconditions.checkNotNull(listener,\"Error: Listener can't be null\");\n  if (!m_listeners.contains(listener)) {\n    m_listeners.add(listener);\n  }\n}"}
{"ids": "57150", "raw_code": "protected void pushBidirectionalVipRoutes(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,IPClient client,LBMember member){\n  IDevice srcDevice=null;\n  IDevice dstDevice=null;\n  Collection<? extends IDevice> allDevices=deviceManager.getAllDevices();\n  for (  IDevice d : allDevices) {\n    for (int j=0; j < d.getIPv4Addresses().length; j++) {\n      if (srcDevice == null && client.ipAddress == d.getIPv4Addresses()[j])       srcDevice=d;\n      if (dstDevice == null && member.address == d.getIPv4Addresses()[j]) {\n        dstDevice=d;\n        member.macString=dstDevice.getMACAddressString();\n      }\n      if (srcDevice != null && dstDevice != null)       break;\n    }\n  }\n  if (srcDevice == null || dstDevice == null)   return;\n  Long srcIsland=topology.getL2DomainId(sw.getId());\n  if (srcIsland == null) {\n    log.debug(\"No openflow island found for source {}/{}\",sw.getStringId(),pi.getInPort());\n    return;\n  }\n  boolean on_same_island=false;\n  boolean on_same_if=false;\n  for (  SwitchPort dstDap : dstDevice.getAttachmentPoints()) {\n    long dstSwDpid=dstDap.getSwitchDPID();\n    Long dstIsland=topology.getL2DomainId(dstSwDpid);\n    if ((dstIsland != null) && dstIsland.equals(srcIsland)) {\n      on_same_island=true;\n      if ((sw.getId() == dstSwDpid) && (pi.getInPort() == dstDap.getPort())) {\n        on_same_if=true;\n      }\n      break;\n    }\n  }\n  if (!on_same_island) {\n    if (log.isTraceEnabled()) {\n      log.trace(\"No first hop island found for destination \" + \"device {}, Action = flooding\",dstDevice);\n    }\n    return;\n  }\n  if (on_same_if) {\n    if (log.isTraceEnabled()) {\n      log.trace(\"Both source and destination are on the same \" + \"switch/port {}/{}, Action = NOP\",sw.toString(),pi.getInPort());\n    }\n    return;\n  }\n  SwitchPort[] srcDaps=srcDevice.getAttachmentPoints();\n  Arrays.sort(srcDaps,clusterIdComparator);\n  SwitchPort[] dstDaps=dstDevice.getAttachmentPoints();\n  Arrays.sort(dstDaps,clusterIdComparator);\n  int iSrcDaps=0, iDstDaps=0;\n  while ((iSrcDaps < srcDaps.length) && (iDstDaps < dstDaps.length)) {\n    SwitchPort srcDap=srcDaps[iSrcDaps];\n    SwitchPort dstDap=dstDaps[iDstDaps];\n    Long srcCluster=topology.getL2DomainId(srcDap.getSwitchDPID());\n    Long dstCluster=topology.getL2DomainId(dstDap.getSwitchDPID());\n    int srcVsDest=srcCluster.compareTo(dstCluster);\n    if (srcVsDest == 0) {\n      if (!srcDap.equals(dstDap) && (srcCluster != null) && (dstCluster != null)) {\n        Route routeIn=routingEngine.getRoute(srcDap.getSwitchDPID(),(short)srcDap.getPort(),dstDap.getSwitchDPID(),(short)dstDap.getPort(),0);\n        Route routeOut=routingEngine.getRoute(dstDap.getSwitchDPID(),(short)dstDap.getPort(),srcDap.getSwitchDPID(),(short)srcDap.getPort(),0);\n        if (routeIn != null) {\n          pushStaticVipRoute(true,routeIn,client,member,sw.getId());\n        }\n        if (routeOut != null) {\n          pushStaticVipRoute(false,routeOut,client,member,sw.getId());\n        }\n      }\n      iSrcDaps++;\n      iDstDaps++;\n    }\n else     if (srcVsDest < 0) {\n      iSrcDaps++;\n    }\n else {\n      iDstDaps++;\n    }\n  }\n  return;\n}"}
{"ids": "45869", "raw_code": "public static String parseIdFromSameDocumentURI(String uri){\n  if (uri.length() == 0) {\n    return null;\n  }\n  String id=uri.substring(1);\n  if (id != null && id.startsWith(\"xpointer(id(\")) {\n    int i1=id.indexOf('\\'');\n    int i2=id.indexOf('\\'',i1 + 1);\n    id=id.substring(i1 + 1,i2);\n  }\n  return id;\n}"}
{"ids": "25497", "raw_code": "public static String readStringNZ(Memory mem,int address,int n){\n  address&=Memory.addressMask;\n  if (address + n > MemoryMap.END_RAM) {\n    n=MemoryMap.END_RAM - address + 1;\n    if (n < 0) {\n      n=0;\n    }\n  }\n  byte[] bytes=new byte[Math.min(n,10000)];\n  int length=0;\n  IMemoryReader memoryReader=MemoryReader.getMemoryReader(address,n,1);\n  for (; n > 0; n--) {\n    int b=memoryReader.readNext();\n    if (b == 0) {\n      break;\n    }\n    if (length >= bytes.length) {\n      byte[] newBytes=new byte[bytes.length + 10000];\n      System.arraycopy(bytes,0,newBytes,0,bytes.length);\n      bytes=newBytes;\n    }\n    bytes[length]=(byte)b;\n    length++;\n  }\n  return new String(bytes,0,length,Constants.charset);\n}"}
{"ids": "64304", "raw_code": "private boolean removeLegionMember(String charName,boolean kick,String playerName){\n  LegionMemberEx legionMember=getLegionMemberEx(charName);\n  if (legionMember == null) {\n    log.error(\"Char name does not exist in legion member table: \" + charName);\n    return false;\n  }\n  deleteLegionMemberFromDB(legionMember);\n  Player player=world.findPlayer(charName);\n  if (player != null) {\n    PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_TITLE(player.getObjectId(),0,\"\",2),true);\n  }\n  if (kick) {\n    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(1300247,legionMember.getObjectId(),playerName,legionMember.getName()));\n  }\n else {\n    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(900699,legionMember.getObjectId(),charName));\n  }\n  return true;\n}"}
{"ids": "67092", "raw_code": "public boolean containsBafBody(){\n  Iterator<SootMethod> methodIt=methodIterator();\n  while (methodIt.hasNext()) {\n    SootMethod m=methodIt.next();\n    if (m.hasActiveBody() && m.getActiveBody() instanceof soot.baf.BafBody) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "67685", "raw_code": "public static String retainAllChars(String str,String retainChars){\n  int pos=indexOfChars(str,retainChars);\n  if (pos == -1) {\n    return \"\";\n  }\n  StringBuilder buf=new StringBuilder();\n  do {\n    buf.append(str.charAt(pos));\n    pos=indexOfChars(str,retainChars,pos + 1);\n  }\n while (pos != -1);\n  return buf.toString();\n}"}
{"ids": "4748", "raw_code": "public synchronized void deleteLeastUsedConnection(){\n  final HttpConnection connection=(HttpConnection)freeConnections.removeFirst();\n  if (connection != null) {\n    deleteConnection(connection);\n  }\n else   if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Attempted to reclaim an unused connection but there were none.\");\n  }\n}"}
{"ids": "83281", "raw_code": "private TransitSchedule cleanUpSchedule(TransitSchedule newTransitSchedule){\n  newTransitSchedule=TransitScheduleCleaner.removeRoutesWithoutDepartures(newTransitSchedule);\n  newTransitSchedule=TransitScheduleCleaner.removeEmptyLines(newTransitSchedule);\n  newTransitSchedule=TransitScheduleCleaner.removeStopsNotUsed(newTransitSchedule);\n  return newTransitSchedule;\n}"}
{"ids": "76759", "raw_code": "private boolean step1(){\n  if (CT == null)   return false;\n  if (suffix(CT,\"uciones\") && suffix(R2,\"uciones\")) {\n    CT=replaceSuffix(CT,\"uciones\",\"u\");\n    return true;\n  }\n  if (CT.length() >= 6) {\n    if (suffix(CT,\"imentos\") && suffix(R2,\"imentos\")) {\n      CT=removeSuffix(CT,\"imentos\");\n      return true;\n    }\n    if (suffix(CT,\"amentos\") && suffix(R2,\"amentos\")) {\n      CT=removeSuffix(CT,\"amentos\");\n      return true;\n    }\n    if (suffix(CT,\"adores\") && suffix(R2,\"adores\")) {\n      CT=removeSuffix(CT,\"adores\");\n      return true;\n    }\n    if (suffix(CT,\"adoras\") && suffix(R2,\"adoras\")) {\n      CT=removeSuffix(CT,\"adoras\");\n      return true;\n    }\n    if (suffix(CT,\"logias\") && suffix(R2,\"logias\")) {\n      replaceSuffix(CT,\"logias\",\"log\");\n      return true;\n    }\n    if (suffix(CT,\"encias\") && suffix(R2,\"encias\")) {\n      CT=replaceSuffix(CT,\"encias\",\"ente\");\n      return true;\n    }\n    if (suffix(CT,\"amente\") && suffix(R1,\"amente\")) {\n      CT=removeSuffix(CT,\"amente\");\n      return true;\n    }\n    if (suffix(CT,\"idades\") && suffix(R2,\"idades\")) {\n      CT=removeSuffix(CT,\"idades\");\n      return true;\n    }\n  }\n  if (CT.length() >= 5) {\n    if (suffix(CT,\"acoes\") && suffix(R2,\"acoes\")) {\n      CT=removeSuffix(CT,\"acoes\");\n      return true;\n    }\n    if (suffix(CT,\"imento\") && suffix(R2,\"imento\")) {\n      CT=removeSuffix(CT,\"imento\");\n      return true;\n    }\n    if (suffix(CT,\"amento\") && suffix(R2,\"amento\")) {\n      CT=removeSuffix(CT,\"amento\");\n      return true;\n    }\n    if (suffix(CT,\"adora\") && suffix(R2,\"adora\")) {\n      CT=removeSuffix(CT,\"adora\");\n      return true;\n    }\n    if (suffix(CT,\"ismos\") && suffix(R2,\"ismos\")) {\n      CT=removeSuffix(CT,\"ismos\");\n      return true;\n    }\n    if (suffix(CT,\"istas\") && suffix(R2,\"istas\")) {\n      CT=removeSuffix(CT,\"istas\");\n      return true;\n    }\n    if (suffix(CT,\"logia\") && suffix(R2,\"logia\")) {\n      CT=replaceSuffix(CT,\"logia\",\"log\");\n      return true;\n    }\n    if (suffix(CT,\"ucion\") && suffix(R2,\"ucion\")) {\n      CT=replaceSuffix(CT,\"ucion\",\"u\");\n      return true;\n    }\n    if (suffix(CT,\"encia\") && suffix(R2,\"encia\")) {\n      CT=replaceSuffix(CT,\"encia\",\"ente\");\n      return true;\n    }\n    if (suffix(CT,\"mente\") && suffix(R2,\"mente\")) {\n      CT=removeSuffix(CT,\"mente\");\n      return true;\n    }\n    if (suffix(CT,\"idade\") && suffix(R2,\"idade\")) {\n      CT=removeSuffix(CT,\"idade\");\n      return true;\n    }\n  }\n  if (CT.length() >= 4) {\n    if (suffix(CT,\"acao\") && suffix(R2,\"acao\")) {\n      CT=removeSuffix(CT,\"acao\");\n      return true;\n    }\n    if (suffix(CT,\"ezas\") && suffix(R2,\"ezas\")) {\n      CT=removeSuffix(CT,\"ezas\");\n      return true;\n    }\n    if (suffix(CT,\"icos\") && suffix(R2,\"icos\")) {\n      CT=removeSuffix(CT,\"icos\");\n      return true;\n    }\n    if (suffix(CT,\"icas\") && suffix(R2,\"icas\")) {\n      CT=removeSuffix(CT,\"icas\");\n      return true;\n    }\n    if (suffix(CT,\"ismo\") && suffix(R2,\"ismo\")) {\n      CT=removeSuffix(CT,\"ismo\");\n      return true;\n    }\n    if (suffix(CT,\"avel\") && suffix(R2,\"avel\")) {\n      CT=removeSuffix(CT,\"avel\");\n      return true;\n    }\n    if (suffix(CT,\"ivel\") && suffix(R2,\"ivel\")) {\n      CT=removeSuffix(CT,\"ivel\");\n      return true;\n    }\n    if (suffix(CT,\"ista\") && suffix(R2,\"ista\")) {\n      CT=removeSuffix(CT,\"ista\");\n      return true;\n    }\n    if (suffix(CT,\"osos\") && suffix(R2,\"osos\")) {\n      CT=removeSuffix(CT,\"osos\");\n      return true;\n    }\n    if (suffix(CT,\"osas\") && suffix(R2,\"osas\")) {\n      CT=removeSuffix(CT,\"osas\");\n      return true;\n    }\n    if (suffix(CT,\"ador\") && suffix(R2,\"ador\")) {\n      CT=removeSuffix(CT,\"ador\");\n      return true;\n    }\n    if (suffix(CT,\"ivas\") && suffix(R2,\"ivas\")) {\n      CT=removeSuffix(CT,\"ivas\");\n      return true;\n    }\n    if (suffix(CT,\"ivos\") && suffix(R2,\"ivos\")) {\n      CT=removeSuffix(CT,\"ivos\");\n      return true;\n    }\n    if (suffix(CT,\"iras\") && suffix(RV,\"iras\") && suffixPreceded(CT,\"iras\",\"e\")) {\n      CT=replaceSuffix(CT,\"iras\",\"ir\");\n      return true;\n    }\n  }\n  if (CT.length() >= 3) {\n    if (suffix(CT,\"eza\") && suffix(R2,\"eza\")) {\n      CT=removeSuffix(CT,\"eza\");\n      return true;\n    }\n    if (suffix(CT,\"ico\") && suffix(R2,\"ico\")) {\n      CT=removeSuffix(CT,\"ico\");\n      return true;\n    }\n    if (suffix(CT,\"ica\") && suffix(R2,\"ica\")) {\n      CT=removeSuffix(CT,\"ica\");\n      return true;\n    }\n    if (suffix(CT,\"oso\") && suffix(R2,\"oso\")) {\n      CT=removeSuffix(CT,\"oso\");\n      return true;\n    }\n    if (suffix(CT,\"osa\") && suffix(R2,\"osa\")) {\n      CT=removeSuffix(CT,\"osa\");\n      return true;\n    }\n    if (suffix(CT,\"iva\") && suffix(R2,\"iva\")) {\n      CT=removeSuffix(CT,\"iva\");\n      return true;\n    }\n    if (suffix(CT,\"ivo\") && suffix(R2,\"ivo\")) {\n      CT=removeSuffix(CT,\"ivo\");\n      return true;\n    }\n    if (suffix(CT,\"ira\") && suffix(RV,\"ira\") && suffixPreceded(CT,\"ira\",\"e\")) {\n      CT=replaceSuffix(CT,\"ira\",\"ir\");\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "35757", "raw_code": "void close(int contextPrec,int ownPrec) throws IOException {\n  if (ownPrec < contextPrec)   out.write(\")\");\n}"}
{"ids": "46258", "raw_code": "public void finishPainting(boolean useCache){\n  DataBufferInt dataBuffer=new DataBufferInt(w0 * h0);\n  int transparency=nativeFinishPainting(SunWritableRaster.stealData(dataBuffer,0),w0,h0);\n  SunWritableRaster.markDirty(dataBuffer);\n  int[] bands=BAND_OFFSETS[transparency - 1];\n  WritableRaster raster=Raster.createPackedRaster(dataBuffer,w0,h0,w0,bands,null);\n  ColorModel cm=COLOR_MODELS[transparency - 1];\n  Image img=new BufferedImage(cm,raster,false,null);\n  if (useCache) {\n    cache.setImage(getClass(),null,w0,h0,cacheArgs,img);\n  }\n  graphics.drawImage(img,x0,y0,null);\n}"}
{"ids": "74409", "raw_code": "public boolean deletePanel(){\n  if (!super.deletePanel()) {\n    return false;\n  }\n  turnoutList.clear();\n  trackList.clear();\n  pointList.clear();\n  xingList.clear();\n  slipList.clear();\n  turntableList.clear();\n  return true;\n}"}
{"ids": "51328", "raw_code": "public String next(){\n  return next(ANY_PATTERN);\n}"}
{"ids": "45185", "raw_code": "public Macro(File file) throws EOFException, FileNotFoundException, IOException {\n  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();\n  DocumentBuilder db=null;\n  Document doc=null;\n  try {\n    db=dbf.newDocumentBuilder();\n    InputSource is=new InputSource(new UnicodeReader(new FileInputStream(file),FILE_ENCODING));\n    is.setEncoding(FILE_ENCODING);\n    doc=db.parse(is);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    String desc=e.getMessage();\n    if (desc == null) {\n      desc=e.toString();\n    }\n    throw new IOException(\"Error parsing XML: \" + desc);\n  }\n  macroRecords=new ArrayList();\n  boolean parsedOK=initializeFromXMLFile(doc.getDocumentElement());\n  if (parsedOK == false) {\n    name=null;\n    macroRecords.clear();\n    macroRecords=null;\n    throw new IOException(\"Error parsing XML!\");\n  }\n}"}
{"ids": "70782", "raw_code": "public static void deleteESInput(){\n  String esPIRIndex=SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_NODES_PROPERTY) + \":\" + SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_PORT_PROPERTY)+ \"/\"+ SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_INDEX_PROPERTY);\n  logger.info(\"ES input being deleted at \" + esPIRIndex);\n  ProcessBuilder pDeletePIR=new ProcessBuilder(\"curl\",\"-XDELETE\",esPIRIndex);\n  try {\n    TestUtils.executeCommand(pDeletePIR);\n    logger.info(\"ES input deleted!\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "32364", "raw_code": "private boolean add(int part){\n  if (!parts.contains(part)) {\n    parts.add(part);\n    return true;\n  }\n  return false;\n}"}
{"ids": "27198", "raw_code": "private Location findFarthestLocation(Location location,Direction direction){\n  Location farthest;\n  do {\n    farthest=location;\n    location=farthest.offset(direction);\n  }\n while (gridOperator.isValidLocation(location) && gameGrid.get(location) == null);\n  return farthest;\n}"}
{"ids": "37141", "raw_code": "private JSplitPane createMainSplitPane(){\n  final JSplitPane mainSplitPane=new JSplitPane();\n  mainSplitPane.setOneTouchExpandable(true);\n  mainSplitPane.setDividerLocation(250);\n  mainSplitPane.setResizeWeight(0.33);\n  mainSplitPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);\n  m_componentPanel.setBackground(Color.WHITE);\n  mainSplitPane.setLeftComponent(createProjectTreePanel());\n  mainSplitPane.setRightComponent(m_componentPanel);\n  mainSplitPane.setBorder(new LineBorder(Color.GRAY));\n  return mainSplitPane;\n}"}
{"ids": "69986", "raw_code": "private boolean checkSetup(){\n  this.txmgr=TransactionManagerImp.getTransactionManager();\n  if (this.txmgr == null) {\n    try {\n      Hashtable<String,String> env=new Hashtable<String,String>();\n      env.put(Context.INITIAL_CONTEXT_FACTORY,this.initialContextFactory);\n      env.put(Context.PROVIDER_URL,this.providerUrl);\n      Context ctx=new InitialContext(env);\n      this.txmgrServer=(UserTransactionServer)PortableRemoteObject.narrow(ctx.lookup(this.userTransactionServerLookupName),UserTransactionServer.class);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      throw new RuntimeException(getNotFoundMessage());\n    }\n    if (this.txmgrServer == null)     throw new RuntimeException(getNotFoundMessage());\n  }\n  return this.txmgr != null;\n}"}
{"ids": "55906", "raw_code": "public static final boolean givesCheck(Position pos,Move m){\n  boolean wtm=pos.whiteMove;\n  int oKingSq=pos.getKingSq(!wtm);\n  int oKing=wtm ? Piece.BKING : Piece.WKING;\n  int p=Piece.makeWhite(m.promoteTo == Piece.EMPTY ? pos.getPiece(m.from) : m.promoteTo);\n  int d1=BitBoard.getDirection(m.to,oKingSq);\nswitch (d1) {\ncase 8:\ncase -8:\ncase 1:\ncase -1:\n    if ((p == Piece.WQUEEN) || (p == Piece.WROOK))     if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))     return true;\n  break;\ncase 9:\ncase 7:\ncase -9:\ncase -7:\nif ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) {\n  if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))   return true;\n}\n else if (p == Piece.WPAWN) {\n  if (((d1 > 0) == wtm) && (pos.getPiece(m.to + d1) == oKing))   return true;\n}\nbreak;\ndefault :\nif (d1 != 0) {\nif (p == Piece.WKNIGHT) return true;\n}\n}\nint d2=BitBoard.getDirection(m.from,oKingSq);\nif ((d2 != 0) && (d2 != d1) && (MoveGen.nextPiece(pos,m.from,d2) == oKing)) {\nint p2=MoveGen.nextPieceSafe(pos,m.from,-d2);\nswitch (d2) {\ncase 8:\ncase -8:\ncase 1:\ncase -1:\nif ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;\nbreak;\ncase 9:\ncase 7:\ncase -9:\ncase -7:\nif ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true;\nbreak;\n}\n}\nif ((m.promoteTo != Piece.EMPTY) && (d1 != 0) && (d1 == d2)) {\nswitch (d1) {\ncase 8:\ncase -8:\ncase 1:\ncase -1:\nif ((p == Piece.WQUEEN) || (p == Piece.WROOK)) if ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true;\nbreak;\ncase 9:\ncase 7:\ncase -9:\ncase -7:\nif ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) {\nif ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true;\n}\nbreak;\n}\n}\nif (p == Piece.WKING) {\nif (m.to - m.from == 2) {\nif (MoveGen.nextPieceSafe(pos,m.from,-1) == oKing) return true;\nif (MoveGen.nextPieceSafe(pos,m.from + 1,wtm ? 8 : -8) == oKing) return true;\n}\n else if (m.to - m.from == -2) {\nif (MoveGen.nextPieceSafe(pos,m.from,1) == oKing) return true;\nif (MoveGen.nextPieceSafe(pos,m.from - 1,wtm ? 8 : -8) == oKing) return true;\n}\n}\n else if (p == Piece.WPAWN) {\nif (pos.getPiece(m.to) == Piece.EMPTY) {\nint dx=Position.getX(m.to) - Position.getX(m.from);\nif (dx != 0) {\nint epSq=m.from + dx;\nint d3=BitBoard.getDirection(epSq,oKingSq);\nswitch (d3) {\ncase 9:\ncase 7:\ncase -9:\ncase -7:\nif (MoveGen.nextPiece(pos,epSq,d3) == oKing) {\nint p2=MoveGen.nextPieceSafe(pos,epSq,-d3);\nif ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true;\n}\nbreak;\ncase 1:\nif (MoveGen.nextPiece(pos,Math.max(epSq,m.from),d3) == oKing) {\nint p2=MoveGen.nextPieceSafe(pos,Math.min(epSq,m.from),-d3);\nif ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;\n}\nbreak;\ncase -1:\nif (MoveGen.nextPiece(pos,Math.min(epSq,m.from),d3) == oKing) {\nint p2=MoveGen.nextPieceSafe(pos,Math.max(epSq,m.from),-d3);\nif ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;\n}\nbreak;\n}\n}\n}\n}\nreturn false;\n}"}
{"ids": "77102", "raw_code": "public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz,Path path) throws ReflectiveOperationException {\n  return newFSDirectory(clazz,path,FSLockFactory.getDefault());\n}"}
{"ids": "31635", "raw_code": "private static Element addElement(Document doc,Node parent,String tagName,String attr1,String val1,String attr2,String val2){\n  Element elem=doc.createElement(tagName);\n  if (attr1 != null)   elem.setAttribute(attr1,val1);\n  if (attr2 != null)   elem.setAttribute(attr2,val2);\n  parent.appendChild(elem);\n  return elem;\n}"}
{"ids": "67708", "raw_code": "public static String stream2String(InputStream is,int maxLength) throws IOException {\n  byte[] buffer=new byte[4096];\n  StringWriter sw=new StringWriter();\n  int totalRead=0;\n  int read=0;\n  do {\n    sw.write(new String(buffer,0,read));\n    totalRead+=read;\n    read=is.read(buffer,0,buffer.length);\n  }\n while (((-1 == maxLength) || (totalRead < maxLength)) && (read != -1));\n  return sw.toString();\n}"}
{"ids": "60243", "raw_code": "private static Couple<String> splitNameOfRemoteBranch(String branchName){\n  int firstSlash=branchName.indexOf('/');\n  String remoteName=firstSlash > -1 ? branchName.substring(0,firstSlash) : branchName;\n  String remoteBranchName=branchName.substring(firstSlash + 1);\n  return Couple.of(remoteName,remoteBranchName);\n}"}
{"ids": "78409", "raw_code": "public static OutputStream encrypt(OutputStream unencryptedOutputStream,char[] password) throws EncryptionException, IOException {\n  OutputStream encryptedOutputStream=null;\n  PBEKeySpec pbeKeySpec=new PBEKeySpec(password);\n  PBEParameterSpec pbeParameterSpec=new PBEParameterSpec(SALT,ITERATION_COUNT);\n  try {\n    SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);\n    SecretKey pbeKey=secretKeyFactory.generateSecret(pbeKeySpec);\n    Cipher cipher=Cipher.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);\n    cipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParameterSpec);\n    encryptedOutputStream=new CipherOutputStream(unencryptedOutputStream,cipher);\n  }\n catch (  GeneralSecurityException e) {\n    throw new EncryptionException(\"There was a problem during the encryption process. See the stacktrace for details.\",e);\n  }\n  return encryptedOutputStream;\n}"}
{"ids": "44632", "raw_code": "protected void reloadSwipeStateInView(View frontView,int position){\n  if (!opened.get(position)) {\n    ViewCompat.setTranslationX(frontView,0.0f);\n  }\n else {\n    if (openedRight.get(position)) {\n      ViewCompat.setTranslationX(frontView,swipeListView.getWidth());\n    }\n else {\n      ViewCompat.setTranslationX(frontView,-swipeListView.getWidth());\n    }\n  }\n}"}
{"ids": "9472", "raw_code": "public Matrix3 multiplyByVerticalFlip(){\n  double[] m=this.m;\n  m[2]+=m[1];\n  m[5]+=m[4];\n  m[8]+=m[7];\n  m[1]=-m[1];\n  m[4]=-m[4];\n  m[7]=-m[7];\n  return this;\n}"}
{"ids": "30971", "raw_code": "public void shutdown() throws DataSourceException {\n  if (createdSessionFactory) {\n    if (sessionFactory != null && !sessionFactory.isClosed()) {\n      try {\n        sessionFactory.close();\n      }\n  finally {\n        sessionFactory=null;\n      }\n    }\n  }\n}"}
{"ids": "27936", "raw_code": "public void writeString(final String s){\n  final byte[] bytes=s.getBytes();\n  final int len=bytes.length;\n  writeInt(len);\n  System.arraycopy(bytes,0,buffer,offset,len);\n  offset+=len;\n  pad();\n}"}
{"ids": "36028", "raw_code": "private static PermissionCollection createAllPermissions(){\n  Permissions permissions=new Permissions();\n  permissions.add(new AllPermission());\n  return permissions;\n}"}
{"ids": "21417", "raw_code": "private void mergeNetworks(Network tzone,Network sZone){\n  List<String> addedEndPoints=new ArrayList<String>(sZone.retrieveEndpoints());\n  StringSet newEndPoints=sZone.retrieveEndpoints();\n  for (  String endpoint : tzone.retrieveEndpoints()) {\n    if (newEndPoints.contains(endpoint)) {\n      addedEndPoints.remove(endpoint);\n    }\n  }\n  if (!addedEndPoints.isEmpty()) {\n    tzone.addEndpoints(addedEndPoints,true);\n  }\n  tzone.setNativeGuid(sZone.getNativeGuid());\n}"}
{"ids": "20003", "raw_code": "static public void println(String msg){\n  println(msg,CLLogLevel.normal);\n}"}
{"ids": "76973", "raw_code": "private List<FacetResult> sumAssociations() throws IOException {\n  DirectoryReader indexReader=DirectoryReader.open(indexDir);\n  IndexSearcher searcher=new IndexSearcher(indexReader);\n  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);\n  FacetsCollector fc=new FacetsCollector();\n  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);\n  Facets tags=new TaxonomyFacetSumIntAssociations(\"$tags\",taxoReader,config,fc);\n  Facets genre=new TaxonomyFacetSumFloatAssociations(\"$genre\",taxoReader,config,fc);\n  List<FacetResult> results=new ArrayList<>();\n  results.add(tags.getTopChildren(10,\"tags\"));\n  results.add(genre.getTopChildren(10,\"genre\"));\n  indexReader.close();\n  taxoReader.close();\n  return results;\n}"}
{"ids": "77672", "raw_code": "public ReverseGeoCode(InputStream placenames,boolean majorOnly) throws IOException {\n  createKdTree(placenames,majorOnly);\n}"}
{"ids": "79179", "raw_code": "public static String fromTag(ListTag<Tag> tag){\n  StringBuilder builder=new StringBuilder();\n  builder.append(ARRAY_START);\n  boolean start=true;\n  for (  Tag value : tag.getValue()) {\n    if (start) {\n      start=false;\n    }\n else {\n      builder.append(ELEMENT_SEPERATOR);\n    }\n    builder.append(fromGenericTag(value));\n  }\n  builder.append(ARRAY_END);\n  return builder.toString();\n}"}
{"ids": "76142", "raw_code": "private XMLElement2 createAnotherElement(){\n  return new XMLElement2(this.entities,this.ignoreWhitespace,false,this.ignoreCase);\n}"}
{"ids": "5758", "raw_code": "public synchronized void reset(){\n  labels.clear();\n  labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,this.topic);\n  labels.put(SensisionConstants.SENSISION_LABEL_GROUPID,this.groupid);\n  for (int i=0; i < this.counters.length; i++) {\n    if (null == this.counters[i]) {\n      continue;\n    }\n    labels.put(SensisionConstants.SENSISION_LABEL_PARTITION,Integer.toString(i));\n    Sensision.clear(SensisionConstants.SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET,labels);\n    this.counters[i]=null;\n  }\n}"}
{"ids": "83854", "raw_code": "public Vector rotateInRadian(double radians){\n  final double length=length();\n  double angle=angleInRadian();\n  angle+=radians;\n  final Vector result=new Vector(Math.cos(angle),Math.sin(angle));\n  return result.multiply(length);\n}"}
{"ids": "49531", "raw_code": "public void connectionLost(java.lang.Throwable cause){\n  int rc=-1;\n  led.setAmber();\n  led.setFlash();\n  setTitleText(\"Connection Lost!....Reconnecting\");\nsynchronized (this) {\n    writeLogln(\"MQTT Connection Lost!....Reconnecting to \" + mqtt.getServerURI());\n  }\n  try {\n    while ((rc == -1) && connected) {\n      try {\nsynchronized (connLostWait) {\n          connLostWait.wait(10000);\n        }\n      }\n catch (      InterruptedException iex) {\n      }\nsynchronized (this) {\n        if (connected) {\n          writeLog(\"MQTT reconnecting......\");\n          try {\n            connect(mqtt.getServerURI(),optionsComp.isPersistenceSelected());\n            rc=0;\n          }\n catch (          MqttException mqte) {\n            rc=-1;\n          }\n          if (rc == -1) {\n            writeLogln(\"failed\");\n          }\n else {\n            writeLogln(\"success !\");\n          }\n        }\n      }\n    }\n    setTitleText(\"\");\n  }\n catch (  Exception ex) {\n    setTitleText(\"MQTT connection broken !\");\n    ex.printStackTrace();\n    disconnect();\n  }\n finally {\n    if (led.isFlashing()) {\n      led.setFlash();\n    }\n  }\n  if (connected) {\n    led.setGreen();\n    setConnected(true);\n  }\n else {\n    led.setRed();\n    setConnected(false);\n  }\n}"}
{"ids": "3523", "raw_code": "public String headerOut(String name){\n  ArrayList<String> keys=_headerKeysOut;\n  int headerSize=keys.size();\n  for (int i=0; i < headerSize; i++) {\n    String oldKey=keys.get(i);\n    if (oldKey.equalsIgnoreCase(name)) {\n      return (String)_headerValuesOut.get(i);\n    }\n  }\n  if (name.equalsIgnoreCase(\"content-length\")) {\n    return _contentLengthOut >= 0 ? String.valueOf(_contentLengthOut) : null;\n  }\n  if (name.equalsIgnoreCase(\"content-type\")) {\n    return _contentTypeOut;\n  }\n  return null;\n}"}
{"ids": "62890", "raw_code": "private static Map<String,Set<String>> parseSparseFields(MultivaluedMap<String,String> queryParams){\n  Map<String,Set<String>> result=new HashMap<>();\n  for (  Map.Entry<String,List<String>> kv : queryParams.entrySet()) {\n    String key=kv.getKey();\n    if (key.startsWith(\"fields[\") && key.endsWith(\"]\")) {\n      String type=key.substring(7,key.length() - 1);\n      LinkedHashSet<String> filters=new LinkedHashSet<>();\n      for (      String filterParams : kv.getValue()) {\n        Collections.addAll(filters,filterParams.split(\",\"));\n      }\n      if (!filters.isEmpty()) {\n        result.put(type,filters);\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "4000", "raw_code": "@Override public void addURL(URL url,boolean isScanned){\n  if (containsURL(url)) {\n    return;\n  }\n  super.addURL(url,isScanned);\n  if (isScanned)   _pendingScanRoots.add(new ScanRoot(url,null));\n}"}
{"ids": "86650", "raw_code": "public void add(final int start,final int end,final byte status){\n  final int s=start - mStart;\n  if (s < mInterval.length && end > mStart) {\n    Arrays.fill(mInterval,Math.max(s,0),Math.min(end - mStart,mInterval.length),status);\n  }\n}"}
{"ids": "73259", "raw_code": "public void reset(){\n  alpha=initAlpha;\n  neighborhoodSize=initNeighborhoodSize;\n}"}
{"ids": "55489", "raw_code": "private void reload(){\n  Document doc=textPane.getDocument();\n  doc.putProperty(Document.StreamDescriptionProperty,null);\n  reference=currentReference;\n  loadPage(currentPage);\n}"}
{"ids": "36715", "raw_code": "protected void drawHexagon(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow,String direction){\n  Polygon hexagon=new Polygon();\n  if (direction.equals(mxConstants.DIRECTION_NORTH) || direction.equals(mxConstants.DIRECTION_SOUTH)) {\n    hexagon.addPoint(x + (int)(0.5 * w),y);\n    hexagon.addPoint(x + w,y + (int)(0.25 * h));\n    hexagon.addPoint(x + w,y + (int)(0.75 * h));\n    hexagon.addPoint(x + (int)(0.5 * w),y + h);\n    hexagon.addPoint(x,y + (int)(0.75 * h));\n    hexagon.addPoint(x,y + (int)(0.25 * h));\n  }\n else {\n    hexagon.addPoint(x + (int)(0.25 * w),y);\n    hexagon.addPoint(x + (int)(0.75 * w),y);\n    hexagon.addPoint(x + w,y + (int)(0.5 * h));\n    hexagon.addPoint(x + (int)(0.75 * w),y + h);\n    hexagon.addPoint(x + (int)(0.25 * w),y + h);\n    hexagon.addPoint(x,y + (int)(0.5 * h));\n  }\n  drawPolygon(hexagon,fillColor,fillPaint,penColor,shadow);\n}"}
{"ids": "31337", "raw_code": "private boolean isStatic(Field field){\n  int modifier=field.getModifiers();\n  if (Modifier.isStatic(modifier)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "20495", "raw_code": "public int outstandingRequests(){\n  return outstanding.get();\n}"}
{"ids": "41831", "raw_code": "private View fillLeft(int pos,int nextRight){\n  if (DEBUG)   Log.i(TAG,\"fillLeft() pos: \" + pos + \" nextRight: \"+ nextRight+ M_FIRST_POSITION+ mFirstPosition);\n  View selectedView=null;\n  final int end=mListPadding.left;\n  while (nextRight > end && pos >= 0) {\n    View temp=makeColumn(pos,nextRight,false);\n    if (temp != null) {\n      selectedView=temp;\n    }\n    nextRight=mReferenceView.getLeft() - mHorizontalSpacing;\n    mFirstPosition=pos;\n    pos-=mNumRows;\n  }\n  if (mStackFromBottom) {\n    mFirstPosition=Math.max(0,pos + 1);\n  }\n  return selectedView;\n}"}
{"ids": "14711", "raw_code": "public void removeDefaultValue(String value) throws SMSException, SSOException {\n  Set defaultValues=getDefaultValues();\n  if (defaultValues != Collections.EMPTY_SET) {\n    defaultValues.remove(value);\n    updateDefaultValues(defaultValues);\n  }\n}"}
{"ids": "40299", "raw_code": "public static int keyBindingDescriptionToKeyCode(String keyBindingDescription){\n  if (StringUtils.isBlank(keyBindingDescription)) {\n    return 0;\n  }\n else   if (keyBindingDescription.equals(\"ESC\")) {\n    return SWT.ESC;\n  }\n else   if (keyBindingDescription.equals(\"F1\")) {\n    return SWT.F1;\n  }\n else   if (keyBindingDescription.equals(\"F2\")) {\n    return SWT.F2;\n  }\n else   if (keyBindingDescription.equals(\"F3\")) {\n    return SWT.F3;\n  }\n else   if (keyBindingDescription.equals(\"F4\")) {\n    return SWT.F4;\n  }\n else   if (keyBindingDescription.equals(\"F5\")) {\n    return SWT.F5;\n  }\n else   if (keyBindingDescription.equals(\"F6\")) {\n    return SWT.F6;\n  }\n else   if (keyBindingDescription.equals(\"F7\")) {\n    return SWT.F7;\n  }\n else   if (keyBindingDescription.equals(\"F8\")) {\n    return SWT.F8;\n  }\n else   if (keyBindingDescription.equals(\"F9\")) {\n    return SWT.F9;\n  }\n else   if (keyBindingDescription.equals(\"F10\")) {\n    return SWT.F10;\n  }\n else   if (keyBindingDescription.equals(\"F11\")) {\n    return SWT.F11;\n  }\n else   if (keyBindingDescription.equals(\"F12\")) {\n    return SWT.F12;\n  }\n else   if (keyBindingDescription.equals(\"SCRLOCK\")) {\n    return SWT.SCROLL_LOCK;\n  }\n else   if (VALID_ACTION_KEY_CODES.indexOf(keyBindingDescription.charAt(keyBindingDescription.length() - 1)) != -1) {\n    return keyBindingDescription.charAt(keyBindingDescription.length() - 1);\n  }\n else {\n    return 0;\n  }\n}"}
{"ids": "52824", "raw_code": "protected Signature mergeSignatures(Signature first,Signature second,int numBins){\n  int d2=-1;\n  for (int i=0; i < second.spec.length; i+=2) {\n    if (second.spec[i] >= 0) {\n      assert (d2 == -1) : \"Merging with non-1-signature?!?\";\n      d2=i;\n    }\n  }\n  assert (d2 >= 0) : \"Merging with empty signature?\";\n  if (first.spec[d2] >= 0) {\n    return null;\n  }\n  final ModifiableDBIDs intersection=DBIDUtil.intersection(first.ids,second.ids);\n  final int support=intersection.size();\n  double width=(second.spec[d2 + 1] - second.spec[d2] + 1.) / (double)numBins;\n  double expect=first.ids.size() * width;\n  if (support <= expect || support < minClusterSize) {\n    return null;\n  }\n  final double test=PoissonDistribution.rawProbability(support,expect);\n  if ((poissonThreshold) <= test) {\n    return null;\n  }\n  int[] spec=first.spec.clone();\n  spec[d2]=second.spec[d2];\n  spec[d2 + 1]=second.spec[d2];\n  final Signature newsig=new Signature(spec,intersection);\n  if (LOG.isDebugging()) {\n    LOG.debug(newsig.toString());\n  }\n  return newsig;\n}"}
{"ids": "78469", "raw_code": "public synchronized boolean enter(CnATreeElement obj) throws TransactionAbortedException {\n  if (aborted) {\n    throw new TransactionAbortedException();\n  }\n  visited.add(obj);\n  if (this.initiator != null) {\n    return false;\n  }\n  this.initiator=obj;\n  aborted=false;\n  return true;\n}"}
{"ids": "22651", "raw_code": "public Options addOption(Option opt){\n  String key=opt.getKey();\n  if (opt.hasLongOpt()) {\n    longOpts.put(opt.getLongOpt(),opt);\n  }\n  if (opt.isRequired()) {\n    if (requiredOpts.contains(key)) {\n      requiredOpts.remove(requiredOpts.indexOf(key));\n    }\n    requiredOpts.add(key);\n  }\n  shortOpts.put(key,opt);\n  return this;\n}"}
{"ids": "24350", "raw_code": "private void pauseForClientToJoin(){\n  Wait.pause(2000);\n}"}
{"ids": "3023", "raw_code": "public TransitionBuilder addFrame(int imageResource){\n  mFrames.add(imageResource);\n  return this;\n}"}
{"ids": "9033", "raw_code": "public Class<?>[] scanForClasses(String location,Class<?> implementedInterface) throws Exception {\n  LOG.debug(\"Scanning for classes at '\" + location + \"' (Implementing: '\"+ implementedInterface.getName()+ \"')\");\n  List<Class<?>> classes=new ArrayList<Class<?>>();\n  Set<String> resourceNames=findResourceNames(location,\"\",\".class\");\n  for (  String resourceName : resourceNames) {\n    String className=toClassName(resourceName);\n    Class<?> clazz=classLoader.loadClass(className);\n    if (Modifier.isAbstract(clazz.getModifiers()) || clazz.isEnum() || clazz.isAnonymousClass()) {\n      LOG.debug(\"Skipping non-instantiable class: \" + className);\n      continue;\n    }\n    if (!implementedInterface.isAssignableFrom(clazz)) {\n      continue;\n    }\n    try {\n      ClassUtils.instantiate(className,classLoader);\n    }\n catch (    Exception e) {\n      throw new CassandraMigrationException(\"Unable to instantiate class: \" + className,e);\n    }\n    classes.add(clazz);\n    LOG.debug(\"Found class: \" + className);\n  }\n  return classes.toArray(new Class<?>[classes.size()]);\n}"}
{"ids": "30155", "raw_code": "private static boolean needsSkylightUpdate(FastCubeBlockAccess access,MutableBlockPos pos){\n  if (access.getBlockLightOpacity(pos) >= 15) {\n    return false;\n  }\n  int computedLight=access.computeLightValue(pos);\n  for (  EnumFacing facing : EnumFacing.values()) {\n    pos.move(facing);\n    int currentLight=access.getLightFor(EnumSkyBlock.SKY,pos);\n    int currentOpacity=Math.max(1,access.getBlockLightOpacity(pos));\n    pos.move(facing.getOpposite());\n    if (computedLight == currentLight - currentOpacity) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "52833", "raw_code": "private ArrayList<PROCLUSCluster> assignPoints(ArrayDBIDs m_current,long[][] dimensions,Relation<V> database){\n  ModifiableDBIDs[] clusterIDs=new ModifiableDBIDs[dimensions.length];\n  for (int i=0; i < m_current.size(); i++) {\n    clusterIDs[i]=DBIDUtil.newHashSet();\n  }\n  DBIDArrayIter m_i=m_current.iter();\n  for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) {\n    V p=database.get(it);\n    double minDist=Double.NaN;\n    int best=-1, i=0;\n    for (m_i.seek(0); m_i.valid(); m_i.advance(), i++) {\n      V m=database.get(m_i);\n      double currentDist=manhattanSegmentalDistance(p,m,dimensions[i]);\n      if (!(minDist <= currentDist)) {\n        minDist=currentDist;\n        best=i;\n      }\n    }\n    assert best >= 0;\n    ModifiableDBIDs ids=clusterIDs[best];\n    ids.add(it);\n  }\n  ArrayList<PROCLUSCluster> clusters=new ArrayList<>(m_current.size());\n  for (int i=0; i < dimensions.length; i++) {\n    ModifiableDBIDs objectIDs=clusterIDs[i];\n    if (!objectIDs.isEmpty()) {\n      long[] clusterDimensions=dimensions[i];\n      double[] centroid=Centroid.make(database,objectIDs).getArrayRef();\n      clusters.add(new PROCLUSCluster(objectIDs,clusterDimensions,centroid));\n    }\n else {\n      clusters.add(null);\n    }\n  }\n  if (LOG.isDebugging()) {\n    StringBuilder msg=new StringBuilder();\n    msg.append('\\n');\n    msg.append(\"clusters \").append(clusters).append('\\n');\n    LOG.debugFine(msg.toString());\n  }\n  return clusters;\n}"}
{"ids": "84648", "raw_code": "public double slideSubtree(MutableTree tree){\n  double logHastingsRatio;\n  NodeRef i, newParent, newChild;\n  do {\n    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));\n  }\n while (tree.getRoot() == i);\n  NodeRef iP=tree.getParent(i);\n  NodeRef CiP=getOtherChild(tree,iP,i);\n  NodeRef PiP=tree.getParent(iP);\n  double delta=getDelta();\n  double oldHeight=tree.getNodeHeight(iP);\n  double newHeight=oldHeight + delta;\n  if (delta > 0) {\n    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {\n      newParent=PiP;\n      newChild=iP;\n      while (tree.getNodeHeight(newParent) < newHeight) {\n        newChild=newParent;\n        newParent=tree.getParent(newParent);\n        if (newParent == null)         break;\n      }\n      tree.beginTreeEdit();\n      if (tree.isRoot(newChild)) {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(PiP,iP);\n        tree.addChild(iP,newChild);\n        tree.addChild(PiP,CiP);\n        tree.setRoot(iP);\n      }\n else {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(PiP,iP);\n        tree.removeChild(newParent,newChild);\n        tree.addChild(iP,newChild);\n        tree.addChild(PiP,CiP);\n        tree.addChild(newParent,iP);\n      }\n      tree.setNodeHeight(iP,newHeight);\n      tree.endTreeEdit();\n      int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);\n      logHastingsRatio=Math.log(1.0 / (double)possibleSources);\n    }\n else {\n      tree.setNodeHeight(iP,newHeight);\n      logHastingsRatio=0.0;\n    }\n  }\n else {\n    if (tree.getNodeHeight(i) > newHeight) {\n      return Double.NEGATIVE_INFINITY;\n    }\n    if (tree.getNodeHeight(CiP) > newHeight) {\n      ArrayList newChildren=new ArrayList();\n      int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);\n      if (newChildren.size() == 0) {\n        return Double.NEGATIVE_INFINITY;\n      }\n      int childIndex=MathUtils.nextInt(newChildren.size());\n      newChild=(NodeRef)newChildren.get(childIndex);\n      newParent=tree.getParent(newChild);\n      tree.beginTreeEdit();\n      if (tree.isRoot(iP)) {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(newParent,newChild);\n        tree.addChild(iP,newChild);\n        tree.addChild(newParent,iP);\n        tree.setRoot(CiP);\n      }\n else {\n        tree.removeChild(iP,CiP);\n        tree.removeChild(PiP,iP);\n        tree.removeChild(newParent,newChild);\n        tree.addChild(iP,newChild);\n        tree.addChild(PiP,CiP);\n        tree.addChild(newParent,iP);\n      }\n      tree.setNodeHeight(iP,newHeight);\n      tree.endTreeEdit();\n      logHastingsRatio=Math.log((double)possibleDestinations);\n    }\n else {\n      tree.setNodeHeight(iP,newHeight);\n      logHastingsRatio=0.0;\n    }\n  }\n  return logHastingsRatio;\n}"}
{"ids": "22144", "raw_code": "public boolean isInitialized(){\n  return _initialized;\n}"}
{"ids": "22971", "raw_code": "boolean checkCameraSize(CameraOptions cameraId){\n  boolean sizeAvailable=false;\n  Camera camera=null;\n  Method method=getCameraOpenMethod();\n  if (method != null) {\n    try {\n      camera=(Camera)method.invoke(camera,new Object[]{cameraId.getValue()});\n    }\n catch (    Exception e) {\n      camera=Camera.open();\n    }\n  }\n else {\n    camera=Camera.open();\n  }\n  if (camera == null) {\n    return false;\n  }\n  Parameters param=camera.getParameters();\n  List<Camera.Size> sizes=param.getSupportedPreviewSizes();\n  for (  Camera.Size size : sizes) {\n    if ((size.width == H264Config.QVGA_WIDTH && size.height == H264Config.QVGA_HEIGHT) || (size.width == H264Config.CIF_WIDTH && size.height == H264Config.CIF_HEIGHT) || (size.width == H264Config.VGA_WIDTH && size.height == H264Config.VGA_HEIGHT)) {\n      sizeAvailable=true;\n      break;\n    }\n  }\n  camera.release();\n  return sizeAvailable;\n}"}
{"ids": "80046", "raw_code": "public void append(final String s){\n  if (first) {\n    first=false;\n  }\n else {\n    builder.append(space);\n  }\n  builder.append(s);\n}"}
{"ids": "44538", "raw_code": "public static ByteArrayOutputStream encode(String plaintext) throws IOException, MessagingException {\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  byte[] in=plaintext.getBytes();\n  ByteArrayOutputStream inStream=new ByteArrayOutputStream();\n  inStream.write(in,0,in.length);\n  if ((in.length % 3) == 1) {\n    inStream.write(0);\n    inStream.write(0);\n  }\n else   if ((in.length % 3) == 2) {\n    inStream.write(0);\n  }\n  inStream.writeTo(MimeUtility.encode(out,\"base64\"));\n  return out;\n}"}
{"ids": "51694", "raw_code": "public LookupListTable lookupList(){\n  if (lookupListTable.get() == null) {\n    lookupListTable.compareAndSet(null,gsub.createLookupList());\n  }\n  return lookupListTable.get();\n}"}
{"ids": "76474", "raw_code": "public long sum(){\n  return deltaSum.get();\n}"}
{"ids": "35159", "raw_code": "private static boolean isWordBoundary(CharSequence singleChar,String wordSeparators){\n  return TextUtils.isEmpty(singleChar) || wordSeparators.contains(singleChar);\n}"}
{"ids": "75432", "raw_code": "protected TableViewer createTable(Composite parent,int span){\n  Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION);\n  GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL);\n  data.horizontalSpan=span;\n  table.setLayoutData(data);\n  TableLayout layout=new TableLayout();\n  layout.addColumnData(new ColumnWeightData(100,true));\n  table.setLayout(layout);\n  TableColumn col=new TableColumn(table,SWT.NONE);\n  col.setResizable(true);\n  return new TableViewer(table);\n}"}
{"ids": "19715", "raw_code": "public String typeAsString(){\n  String typeStr=\"?\";\n  String subtypeStr=\"?\";\nswitch (this.type) {\ncase ETYPE_CONTROL:\n    typeStr=\" control/\";\nswitch (this.subtype) {\ncase ESTYPE_HEADER:\n    subtypeStr=\"header\";\n  break;\ncase ESTYPE_FOOTER:\nsubtypeStr=\"footer\";\nbreak;\n}\nbreak;\ncase ETYPE_TRANSACTIONS:\ntypeStr=\" transaction/\";\nswitch (this.subtype) {\ncase ESTYPE_TRAN_START:\nsubtypeStr=\"start\";\nbreak;\ncase ESTYPE_TRAN_COMMIT:\nsubtypeStr=\"commit\";\nbreak;\ncase ESTYPE_TRAN_ROLLBACK:\nsubtypeStr=\"rollback\";\nbreak;\ncase ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT:\nsubtypeStr=\"rollback_to_savepoint\";\nbreak;\ncase ESTYPE_TRAN_AUDIT:\nsubtypeStr=\"audit\";\nbreak;\n}\nbreak;\ncase ETYPE_LCR_DATA:\ntypeStr=\" LCR data/\";\nswitch (this.subtype) {\ncase ESTYPE_LCR_INSERT:\nsubtypeStr=\"insert\";\nbreak;\ncase ESTYPE_LCR_DELETE:\nsubtypeStr=\"delete\";\nbreak;\ncase ESTYPE_LCR_UPDATE:\nsubtypeStr=\"update\";\nbreak;\ncase ESTYPE_LCR_LOB_WRITE:\nsubtypeStr=\"LOB write\";\nbreak;\ncase ESTYPE_LCR_LOB_TRIM:\nsubtypeStr=\"LOB trim\";\nbreak;\ncase ESTYPE_LCR_LOB_ERASE:\nsubtypeStr=\"LOB erase\";\nbreak;\ncase ESTYPE_LCR_DDL:\nsubtypeStr=\"DDL\";\nbreak;\n}\nbreak;\ncase ETYPE_LCR_PLOG:\ntypeStr=\" LCR plog/\";\nswitch (this.subtype) {\ncase ESTYPE_LCR_PLOG_IFILE:\nsubtypeStr=\"include plog file\";\nbreak;\ncase ESTYPE_LCR_PLOG_IFILE_STATS:\nsubtypeStr=\"include plog file - rowcount\";\nbreak;\n}\nbreak;\ndefault :\ntypeStr=\" ?\" + this.type + \"/\";\nsubtypeStr=\"?\" + this.subtype;\n}\nreturn typeStr + subtypeStr;\n}"}
{"ids": "55930", "raw_code": "public Artifact load(File path) throws IOException {\n  return load(new ArtifactName(path.getName()),path);\n}"}
{"ids": "79801", "raw_code": "private static final boolean isHeaderEnd(StringBuilder sb){\n  int len=sb.length();\n  if (len > 2) {\n    if (LF2.equals(sb.substring(len - 2))) {\n      return true;\n    }\n  }\n  if (len > 4) {\n    if (CRLF2.equals(sb.substring(len - 4))) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "74496", "raw_code": "public TSActionDelay(TransitSectionAction tsa,int delay){\n  _tsa=tsa;\n  _delay=delay;\n}"}
{"ids": "9744", "raw_code": "public DAddExtensions(JDialog parent,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  setTitle(res.getString(\"DAddExtensions.Title\"));\n  this.extensions=(X509ExtensionSet)extensions.clone();\n  this.authorityPublicKey=authorityPublicKey;\n  this.authorityCertName=authorityCertName;\n  this.authorityCertSerialNumber=authorityCertSerialNumber;\n  this.subjectPublicKey=subjectPublicKey;\n  initComponents();\n}"}
{"ids": "5518", "raw_code": "public void add(IMultiPoint pt){\n  if (inProgress) {\n    throw new ConcurrentModificationException(\"Can't add point while iterator in progress\");\n  }\n  points.add(pt);\n}"}
{"ids": "33407", "raw_code": "private DiscoveryInformation verifyDiscovered(AuthSuccess authResp,DiscoveryInformation discovered) throws DiscoveryException {\n  if (authResp == null || authResp.getIdentity() == null) {\n    _log.info(\"Assertion is not about an identifier\");\n    return null;\n  }\n  if (authResp.isVersion2())   return verifyDiscovered2(authResp,discovered);\n else   return verifyDiscovered1(authResp,discovered);\n}"}
{"ids": "72333", "raw_code": "public boolean generate(ReportDescription description,Date date){\n  try {\n    Integer targetDateInt=Integer.parseInt(format.format(date));\n    AnalysisResultSet logAggregation=makeLogAnal(description,targetDateInt);\n    Report report=new Report();\n    report.setSendTime(new Date());\n    report.setTargetDate(date);\n    report.setLogReport(logAggregation);\n    report.setTargets(description.getTargets());\n    logger.debug(\"generated > \" + report);\n    reportRepository.save(report);\n    return true;\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    return false;\n  }\n}"}
{"ids": "41512", "raw_code": "@Override public void updateTextViews(Recharge recharge){\n  unitTypeTextView.setText(recharge.getUnits());\n  unitValueTextView.setText(String.valueOf(recharge.getCurrentAmount()));\n  costTextView.setText(Currency.localize(recharge.getCurrentCost(),true));\n  rechargeName.setText(recharge.getTitle());\n  confirmationTextView.setText(\"Add \" + recharge.getCurrentAmount() + \" extra \"+ recharge.getUnits()+ \" for the month?\");\n  if (recharge.getCurrentAmount() == recharge.getInitialAmount()) {\n    downArrow.setVisibility(View.INVISIBLE);\n  }\n else {\n    downArrow.setVisibility(View.VISIBLE);\n  }\n}"}
{"ids": "32201", "raw_code": "private ConcurrentMap<GridCacheVersion,IgniteInternalTx> transactionMap(IgniteInternalTx tx){\n  return (tx.near() && !tx.local()) ? nearIdMap : idMap;\n}"}
{"ids": "44878", "raw_code": "public static byte[] decode(byte[] data,String pri_key){\n  try {\n    Cipher cipher=Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n    java.security.Key k=getPrivateKey(pri_key);\n    cipher.init(Cipher.DECRYPT_MODE,k);\n    byte[] deBytes=cipher.doFinal(data);\n    return deBytes;\n  }\n catch (  Exception e) {\n    log.error(pri_key,e);\n  }\n  return null;\n}"}
{"ids": "43459", "raw_code": "public void addLandingPad(int x,int z){\n  BlockPosition pos=new BlockPosition(x,0,z);\n  if (!spawnLocations.contains(pos)) {\n    spawnLocations.add(pos);\n    occupiedLandingPads.put(pos,false);\n  }\n}"}
{"ids": "80421", "raw_code": "static AttackStrategy create(String params){\n  String[] arg=params.split(\",\",-1);\n  if (arg.length != 3) {\n    throw new IllegalArgumentException(\"Invalid compound description: '\" + params + \"'\");\n  }\n  Pair<String,String> desc=parseStrategy(arg[1]);\n  TargetSelectionStrategy targeter=TargetSelectionStrategyFactory.get(desc.first(),desc.second());\n  desc=parseStrategy(arg[2]);\n  PositioningStrategy positioner=PositioningStrategyFactory.get(desc.first(),desc.second());\n  return new CompoundAttackStrategy(getSubStrategy(arg[0]),targeter,positioner);\n}"}
{"ids": "27828", "raw_code": "final public void writeChunk(L locator,KVO<O>[] chunk) throws MockStaleLocatorException {\nsynchronized (this) {\n    if (staleLocators.contains(locator.getPartitionId())) {\n      throw new MockStaleLocatorException(locator);\n    }\n    if (!knownLocators.contains(locator.getPartitionId())) {\n      throw new RuntimeException(\"Locator not registered on DS: \" + locator);\n    }\n  }\n  acceptWrite(locator,chunk);\n}"}
{"ids": "72781", "raw_code": "public Event event(int id){\n  if (!host) {\n    return (Event)events.get(new Integer(id));\n  }\n  return null;\n}"}
{"ids": "34826", "raw_code": "private void initValues(){\n  IPreferenceStore store=doGetPreferenceStore();\n  final String storedItems=store.getString(CheckerPreferences.PREF_CHECKER_CUSTOM_CLASSES);\n  if (!storedItems.equals(\"\")) {\n    customCheckers.setItems(storedItems.split(\",\"));\n  }\n}"}
{"ids": "65415", "raw_code": "void sync(int sourceRepoIndex,int destRepoIndex,AuthenticationInfo subject) throws IOException {\n  LOG.info(\"Sync started\");\n  NotebookAuthorization auth=NotebookAuthorization.getInstance();\n  NotebookRepo srcRepo=getRepo(sourceRepoIndex);\n  NotebookRepo dstRepo=getRepo(destRepoIndex);\n  List<NoteInfo> allSrcNotes=srcRepo.list(subject);\n  List<NoteInfo> srcNotes=auth.filterByUser(allSrcNotes,subject);\n  List<NoteInfo> dstNotes=dstRepo.list(subject);\n  Map<String,List<String>> noteIds=notesCheckDiff(srcNotes,srcRepo,dstNotes,dstRepo,subject);\n  List<String> pushNoteIds=noteIds.get(pushKey);\n  List<String> pullNoteIds=noteIds.get(pullKey);\n  List<String> delDstNoteIds=noteIds.get(delDstKey);\n  if (!pushNoteIds.isEmpty()) {\n    LOG.info(\"Notes with the following IDs will be pushed\");\n    for (    String id : pushNoteIds) {\n      LOG.info(\"ID : \" + id);\n    }\n    pushNotes(subject,pushNoteIds,srcRepo,dstRepo,false);\n  }\n else {\n    LOG.info(\"Nothing to push\");\n  }\n  if (!pullNoteIds.isEmpty()) {\n    LOG.info(\"Notes with the following IDs will be pulled\");\n    for (    String id : pullNoteIds) {\n      LOG.info(\"ID : \" + id);\n    }\n    pushNotes(subject,pullNoteIds,dstRepo,srcRepo,true);\n  }\n else {\n    LOG.info(\"Nothing to pull\");\n  }\n  if (!delDstNoteIds.isEmpty()) {\n    LOG.info(\"Notes with the following IDs will be deleted from dest\");\n    for (    String id : delDstNoteIds) {\n      LOG.info(\"ID : \" + id);\n    }\n    deleteNotes(subject,delDstNoteIds,dstRepo);\n  }\n else {\n    LOG.info(\"Nothing to delete from dest\");\n  }\n  LOG.info(\"Sync ended\");\n}"}
{"ids": "31782", "raw_code": "@Nullable public static String md5(@Nullable File file,@Nullable IgniteLogger log){\n  if (file != null)   return file.isFile() ? fileMd5(file,log) : directoryMd5(file,log);\n  return null;\n}"}
{"ids": "25879", "raw_code": "@Override public boolean hasNext(){\n  if (allRowsResult.size() == 0) {\n    return false;\n  }\n  totalRecordCounter++;\n  listRecordCounter++;\n  if (listRecordCounter == 0 || (listRecordCounter >= currentRowPointer.size() && currentListCounter < allRowsResult.size())) {\n    listRecordCounter=0;\n    currentRowPointer=allRowsResult.get(currentListCounter);\n    currentListCounter++;\n  }\n  return totalRecordCounter < totalNumberOfRecords;\n}"}
{"ids": "46696", "raw_code": "public void trimToSize(){\n  delegate.trimToSize();\n}"}
{"ids": "24757", "raw_code": "public final void clear(){\n  caches.clear();\n  sections.clear();\n}"}
{"ids": "45868", "raw_code": "static Set<Node> toNodeSet(Iterator<Node> i){\n  Set<Node> nodeSet=new HashSet<Node>();\n  while (i.hasNext()) {\n    Node n=i.next();\n    nodeSet.add(n);\n    if (n.getNodeType() == Node.ELEMENT_NODE) {\n      NamedNodeMap nnm=n.getAttributes();\n      for (int j=0, length=nnm.getLength(); j < length; j++) {\n        nodeSet.add(nnm.item(j));\n      }\n    }\n  }\n  return nodeSet;\n}"}
{"ids": "68149", "raw_code": "public static void runConcurrently(final Callable<Void> task,final int times) throws Exception {\n  final ExecutorService service=Executors.newFixedThreadPool(5);\n  final List<Future<?>> futures=new ArrayList<Future<?>>();\n  for (int i=0; i < times; i++) {\n    futures.add(service.submit(task));\n  }\n  for (  final Future<?> future : futures) {\n    future.get();\n  }\n}"}
{"ids": "22850", "raw_code": "private static ArrayList<ContainerVm> createVmList(int brokerId,int containerVmsNumber){\n  ArrayList<ContainerVm> containerVms=new ArrayList<ContainerVm>();\n  for (int i=0; i < containerVmsNumber; ++i) {\n    ArrayList<ContainerPe> peList=new ArrayList<ContainerPe>();\n    int vmType=i / (int)Math.ceil((double)containerVmsNumber / 4.0D);\n    for (int j=0; j < ConstantsExamples.VM_PES[vmType]; ++j) {\n      peList.add(new ContainerPe(j,new CotainerPeProvisionerSimple((double)ConstantsExamples.VM_MIPS[vmType])));\n    }\n    containerVms.add(new PowerContainerVm(IDs.pollId(ContainerVm.class),brokerId,(double)ConstantsExamples.VM_MIPS[vmType],(float)ConstantsExamples.VM_RAM[vmType],ConstantsExamples.VM_BW,ConstantsExamples.VM_SIZE,\"Xen\",new ContainerSchedulerTimeSharedOverSubscription(peList),new ContainerRamProvisionerSimple(ConstantsExamples.VM_RAM[vmType]),new ContainerBwProvisionerSimple(ConstantsExamples.VM_BW),peList,ConstantsExamples.SCHEDULING_INTERVAL));\n  }\n  return containerVms;\n}"}
{"ids": "21770", "raw_code": "public static void addPortUse(Map<StoragePort,Integer> portUseCounts,StoragePort port){\n  if (!portUseCounts.containsKey(port)) {\n    portUseCounts.put(port,1);\n  }\n else {\n    Integer newCount=portUseCounts.get(port) + 1;\n    portUseCounts.put(port,newCount);\n  }\n}"}
{"ids": "20621", "raw_code": "@Override public synchronized CacheObject<V> put(K key,CacheObject<V> value){\n  if (cache.size() >= maxSize) {\n    if (removeExpired() <= 0) {\n      if (cacheFullRemoveType instanceof RemoveTypeNotRemove) {\n        return null;\n      }\n      if (fullRemoveOne() == null) {\n        return null;\n      }\n    }\n  }\n  value.setEnterTime(System.currentTimeMillis());\n  cache.put(key,value);\n  return value;\n}"}
{"ids": "66009", "raw_code": "public void removeModelChange(String tableName,ModelValidator listener){\n  if (tableName == null || listener == null)   return;\n  String propertyName=m_globalValidators.contains(listener) ? tableName + \"*\" : tableName + listener.getAD_Client_ID();\n  ArrayList<ModelValidator> list=m_modelChangeListeners.get(propertyName);\n  if (list == null)   return;\n  list.remove(listener);\n  if (list.size() == 0)   m_modelChangeListeners.remove(propertyName);\n}"}
{"ids": "22493", "raw_code": "private String createConnectionName(){\n  StringBuilder nameBuffer=new StringBuilder();\n  nameBuffer.append(getConnectionType());\n  nameBuffer.append(\"-\");\n  nameBuffer.append(_host);\n  nameBuffer.append(\"-\");\n  nameBuffer.append(_port);\n  return nameBuffer.toString();\n}"}
{"ids": "1203", "raw_code": "public Query execute(PageContext pc,SQL sql,int maxrows,int fetchsize,TimeSpan timeout) throws PageException {\n  Stopwatch stopwatch=new Stopwatch(Stopwatch.UNIT_NANO);\n  stopwatch.start();\n  String prettySQL=null;\n  Selects selects=null;\n  try {\n    SelectParser parser=new SelectParser();\n    selects=parser.parse(sql.getSQLString());\n    Query q=qoq.execute(pc,sql,selects,maxrows);\n    q.setExecutionTime(stopwatch.time());\n    return q;\n  }\n catch (  SQLParserException spe) {\n    prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString());\n    try {\n      Query query=executer.execute(pc,sql,prettySQL,maxrows);\n      query.setExecutionTime(stopwatch.time());\n      return query;\n    }\n catch (    PageException ex) {\n    }\n  }\ncatch (  PageException e) {\n  }\n  try {\n    boolean isUnion=false;\n    Set<String> tables=null;\n    if (selects != null) {\n      HSQLUtil2 hsql2=new HSQLUtil2(selects);\n      isUnion=hsql2.isUnion();\n      tables=hsql2.getInvokedTables();\n    }\n else {\n      if (prettySQL == null)       prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString());\n      HSQLUtil hsql=new HSQLUtil(prettySQL);\n      tables=hsql.getInvokedTables();\n      isUnion=hsql.isUnion();\n    }\n    String strSQL=StringUtil.replace(sql.getSQLString(),\"[\",\"\",false);\n    strSQL=StringUtil.replace(strSQL,\"]\",\"\",false);\n    sql.setSQLString(strSQL);\n    return _execute(pc,sql,maxrows,fetchsize,timeout,stopwatch,tables,isUnion);\n  }\n catch (  ParseException e) {\n    throw new DatabaseException(e.getMessage(),null,sql,null);\n  }\n}"}
{"ids": "21972", "raw_code": "@POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(\"/{id}/discover\") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep discoverHost(@PathParam(\"id\") URI id){\n  ArgValidator.checkFieldUriType(id,Host.class,\"id\");\n  Host host=queryObject(Host.class,id,true);\n  return doDiscoverHost(host);\n}"}
{"ids": "81982", "raw_code": "public static final void readFully(InputStream i,byte b[],int off,int len) throws IOException {\n  if (len < 0) {\n    throw new IndexOutOfBoundsException();\n  }\n  int n=0;\n  while (n < len) {\n    int count=i.read(b,off + n,len - n);\n    if (count < 0) {\n      throw new EOFException();\n    }\n    n+=count;\n  }\n}"}
{"ids": "1504", "raw_code": "private void drawLines(Canvas canvas){\n  for (int i=0; i < connectionOrder.size() - 1; i++) {\n    drawLine(canvas,circles[connectionOrder.get(i)],circles[connectionOrder.get(i + 1)]);\n  }\n}"}
{"ids": "33386", "raw_code": "public static File toFile(JavaFileObject javaFileObject){\n  return new File(javaFileObject.getName());\n}"}
{"ids": "49301", "raw_code": "public WritableRaster createCompatibleWritableRaster(int w,int h){\n  int[] bOffs={2,1,0};\n  return Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,w,h,w * 3,3,bOffs,null);\n}"}
{"ids": "62944", "raw_code": "public static String execute(String command){\n  return SubprocessUttility.execute(command);\n}"}
{"ids": "86721", "raw_code": "public synchronized void updateProgress(final int value){\n  final Thread t=Thread.currentThread();\n  final MyInteger v=mIndividualThreadProgress.get(t);\n  if (v == null) {\n    mIndividualThreadProgress.put(t,new MyInteger(value));\n  }\n else {\n    v.setValue(value);\n  }\n  if (value > mLastReportedProgress) {\n    int min=Integer.MAX_VALUE;\n    for (    final MyInteger m : mIndividualThreadProgress.values()) {\n      if (m.getValue() < min) {\n        min=m.getValue();\n      }\n    }\n    if (min > mLastReportedProgress) {\n      mLastReportedProgress=min;\n      Diagnostic.progress(\"Processed \" + min + \"% of \"+ mName);\n    }\n  }\n}"}
{"ids": "3008", "raw_code": "private ContextHandler createContextHandler(String directory,boolean isInJar,File installRootDirectory,int expiresInSeconds){\n  final ContextHandler contextHandler=new ContextHandler();\n  final ResourceHandler resourceHandler=new ExpiresResourceHandler(expiresInSeconds);\n  final String directoryWithSlash=\"/\" + directory;\n  contextHandler.setContextPath(directoryWithSlash);\n  Resource directoryResource=getDirectoryResource(directory,isInJar,installRootDirectory);\n  directoryResource=new JsMinifyingResource(directoryResource);\n  if (isInJar) {\n    directoryResource=new CachingResource(directoryResource,directoryWithSlash);\n  }\n  resourceHandler.setBaseResource(directoryResource);\n  if (!isInJar) {\n    resourceHandler.setMinMemoryMappedContentLength(0);\n  }\n  contextHandler.setHandler(resourceHandler);\n  return contextHandler;\n}"}
{"ids": "29408", "raw_code": "public boolean startsWith(java.lang.CharSequence prefix){\n  return startsWith(prefix,0);\n}"}
{"ids": "13657", "raw_code": "private List<ContainerInitializer> jspInitializers(){\n  JettyJasperInitializer sci=new JettyJasperInitializer();\n  ContainerInitializer initializer=new ContainerInitializer(sci,null);\n  List<ContainerInitializer> initializers=new ArrayList<ContainerInitializer>();\n  initializers.add(initializer);\n  return initializers;\n}"}
{"ids": "62234", "raw_code": "public static TempPath createDirectory() throws IOException {\n  return wrap(Files.createTempDirectory(PREFIX));\n}"}
{"ids": "78434", "raw_code": "public Collection<String> listColumns(String table) throws DatabaseException {\n  Collection<String> result=new ArrayList<String>();\n  ResultSet rs=null;\n  try {\n    DatabaseMetaData dbm=connection.getMetaData();\n    rs=dbm.getColumns(null,null,table,null);\n    while (rs.next()) {\n      result.add(rs.getString(\"COLUMN_NAME\"));\n    }\n  }\n catch (  SQLException e) {\n    throw new DatabaseException(e);\n  }\n finally {\n    if (rs != null) {\n      try {\n        rs.close();\n      }\n catch (      SQLException e) {\n      }\n    }\n  }\n  return result;\n}"}
{"ids": "29089", "raw_code": "public void addCreatedResource(Location location,Resource resource){\n  resourceList.add(resource);\n  locationToResourceMap.put(location,resource);\n}"}
{"ids": "55831", "raw_code": "public void signalEvent(){\n  Collection<Semaphore> semaphores=_semaphores.values();\n  for (  Semaphore semaphore : semaphores) {\n    semaphore.release();\n    semaphores.remove(semaphore);\n  }\n}"}
{"ids": "7857", "raw_code": "@Override public boolean equals(Object obj){\n  if (obj == this) {\n    return true;\n  }\n  if (!(obj instanceof KeyedObjects)) {\n    return false;\n  }\n  KeyedObjects that=(KeyedObjects)obj;\n  int count=getItemCount();\n  if (count != that.getItemCount()) {\n    return false;\n  }\n  for (int i=0; i < count; i++) {\n    Comparable k1=getKey(i);\n    Comparable k2=that.getKey(i);\n    if (!k1.equals(k2)) {\n      return false;\n    }\n    Object o1=getObject(i);\n    Object o2=that.getObject(i);\n    if (o1 == null) {\n      if (o2 != null) {\n        return false;\n      }\n    }\n else {\n      if (!o1.equals(o2)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}"}
{"ids": "21126", "raw_code": "protected boolean isQuorumMaintained(){\n  if (nodeCount == 1) {\n    log.info(\"There's no way to maintain quorum on single node deployments. Proceed anyway.\");\n    return true;\n  }\n  int quorumNodeCnt=nodeCount / 2 + 1;\n  CoordinatorClient coordinatorClient=coordinator.getCoordinatorClient();\n  List<Service> allActiveDbsvcs=coordinatorClient.locateAllSvcsAllVers(Constants.DBSVC_NAME);\n  List<String> otherActiveDbsvcIds=new ArrayList<>();\n  String mySvcId=coordinator.getMySvcId();\n  String localDbSvcId=\"db\" + mySvcId.substring(mySvcId.lastIndexOf(\"-\"));\n  for (  Service activeDbsvc : allActiveDbsvcs) {\n    if (!localDbSvcId.equals(activeDbsvc.getId())) {\n      otherActiveDbsvcIds.add(activeDbsvc.getId());\n    }\n  }\n  log.info(\"List of active dbsvc instances on other nodes: {}, expect {} instances to maintain quorum\",otherActiveDbsvcIds,quorumNodeCnt);\n  boolean isMaintained=otherActiveDbsvcIds.size() >= quorumNodeCnt;\n  if (!isMaintained) {\n    log.info(\"quorum would lost if reboot the current node. Retrying...\");\n  }\n  return isMaintained;\n}"}
{"ids": "40783", "raw_code": "public static void scheduleNextAlarm(Context context){\n  scheduleNextAlarm(context,AlertUtils.createAlarmManager(context),REMINDER_QUERY_BATCH_SIZE,System.currentTimeMillis());\n}"}
{"ids": "61752", "raw_code": "public void requestStop(){\n  stopRequested.set(true);\n}"}
{"ids": "86171", "raw_code": "@SafeVarargs public static <T>T[] join(IntFunction<T[]> arrayFunction,T[]... arrays){\n  if (arrays.length == 0) {\n    return arrayFunction.apply(0);\n  }\n  if (arrays.length == 1) {\n    return arrays[0];\n  }\n  if (arrays.length == 2) {\n    return join(arrayFunction,arrays[0],arrays[1]);\n  }\n  T[] notNull=null;\n  int finalSize=0;\n  int nullArrays=0;\n  List<T> list=new ArrayList<>(arrays.length * 10);\n  for (  T[] array : arrays) {\n    if ((array == null) || (array.length == 0)) {\n      nullArrays++;\n    }\n else {\n      notNull=array;\n      finalSize+=array.length;\n      Collections.addAll(list,array);\n    }\n  }\n  if (nullArrays == arrays.length) {\n    return arrayFunction.apply(0);\n  }\n  if (nullArrays == (arrays.length - 1)) {\n    return notNull;\n  }\n  return list.toArray(arrayFunction.apply(list.size()));\n}"}
{"ids": "14478", "raw_code": "private static Set<String> splitPath(RelaxedURL url){\n  Set<String> results=new HashSet<String>();\n  Set<String> queries=normalizeQuery(url.getQuery());\n  results.add(\"/\");\n  for (  String q : queries) {\n    results.add(\"/?\" + q);\n  }\n  Set<String> paths=splitPath(url.getPath());\n  results.addAll(paths);\n  for (  String p : paths) {\n    for (    String q : queries) {\n      results.add(p + \"?\" + q);\n    }\n  }\n  return results;\n}"}
{"ids": "65560", "raw_code": "public ActionForward initBestSellingReport(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ApplicationException, OperationException {\n  ActionForward fwd=init(mapping,form,request,response);\n  if (fwd != null)   return fwd;\n  SellingItemForm reportForm=(SellingItemForm)form;\n  String timePeriod=ReportDateManager.TODAY;\n  String dateRange=Constants.FIXED_DATE_RANGE;\n  reportForm.setTimePeriod(timePeriod);\n  reportForm.setDateRange(dateRange);\n  reportForm.setFromDate(\"\");\n  reportForm.setToDate(\"\");\n  reportForm.validate(mapping,request);\n  return mapping.findForward(INIT_BEST_SELLING_REPORT);\n}"}
{"ids": "28146", "raw_code": "@Override public void transactionBegin(){\n  for (  BigdataGraphListener listener : listeners) {\n    listener.transactionBegin();\n  }\n}"}
{"ids": "69389", "raw_code": "public synchronized void add(Job job){\n  boolean canRunImmediately=dagManager.addJob(job);\n  if (canRunImmediately) {\n    LOG.debug(\"Job \" + job + \" is ready to run.\");\n    jobsToRun.add(job);\n  }\n  incrementSubmittedJobCount();\n}"}
{"ids": "4075", "raw_code": "public void addConstant(ConstantPoolEntry entry){\n  if (entry instanceof Utf8Constant) {\n    Utf8Constant utf8=(Utf8Constant)entry;\n    _utf8Map.put(utf8.getValue(),utf8);\n  }\n  _entries.add(entry);\n}"}
{"ids": "49379", "raw_code": "static void writeRule(ZoneOffsetTransitionRule rule,DataOutput out) throws IOException {\n  int month=rule.month;\n  byte dom=rule.dom;\n  int dow=rule.dow;\n  LocalTime time=rule.time;\n  boolean timeEndOfDay=rule.timeEndOfDay;\n  TimeDefinition timeDefinition=rule.timeDefinition;\n  ZoneOffset standardOffset=rule.standardOffset;\n  ZoneOffset offsetBefore=rule.offsetBefore;\n  ZoneOffset offsetAfter=rule.offsetAfter;\n  int timeSecs=(timeEndOfDay ? 86400 : time.toSecondOfDay());\n  int stdOffset=standardOffset.getTotalSeconds();\n  int beforeDiff=offsetBefore.getTotalSeconds() - stdOffset;\n  int afterDiff=offsetAfter.getTotalSeconds() - stdOffset;\n  int timeByte=(timeSecs % 3600 == 0 ? (timeEndOfDay ? 24 : time.getHour()) : 31);\n  int stdOffsetByte=(stdOffset % 900 == 0 ? stdOffset / 900 + 128 : 255);\n  int beforeByte=(beforeDiff == 0 || beforeDiff == 1800 || beforeDiff == 3600 ? beforeDiff / 1800 : 3);\n  int afterByte=(afterDiff == 0 || afterDiff == 1800 || afterDiff == 3600 ? afterDiff / 1800 : 3);\n  int dowByte=(dow == -1 ? 0 : dow);\n  int b=(month << 28) + ((dom + 32) << 22) + (dowByte << 19)+ (timeByte << 14)+ (timeDefinition.ordinal() << 12)+ (stdOffsetByte << 4)+ (beforeByte << 2)+ afterByte;\n  out.writeInt(b);\n  if (timeByte == 31) {\n    out.writeInt(timeSecs);\n  }\n  if (stdOffsetByte == 255) {\n    out.writeInt(stdOffset);\n  }\n  if (beforeByte == 3) {\n    out.writeInt(offsetBefore.getTotalSeconds());\n  }\n  if (afterByte == 3) {\n    out.writeInt(offsetAfter.getTotalSeconds());\n  }\n}"}
{"ids": "72929", "raw_code": "@SuppressWarnings(\"unchecked typecast\") public static <T>TypeSerializer<T> deserialize(byte[] bytes) throws IOException {\n  ByteArrayInputStream bis=new ByteArrayInputStream(bytes);\n  ObjectInput in=null;\n  try {\n    in=new ObjectInputStream(bis);\n    return (TypeSerializer<T>)in.readObject();\n  }\n catch (  ClassNotFoundException e) {\n    throw new IOException(\"Could not deserialize class\");\n  }\n finally {\n    try {\n      bis.close();\n    }\n catch (    IOException ex) {\n    }\n    try {\n      if (in != null) {\n        in.close();\n      }\n    }\n catch (    IOException ex) {\n    }\n  }\n}"}
{"ids": "73311", "raw_code": "public void showSelectedNeuronProperties(){\n  NeuronDialog dialog=NeuronDialog.createNeuronDialog(getSelectedNeurons());\n  dialog.setModalityType(Dialog.ModalityType.MODELESS);\n  dialog.pack();\n  dialog.setLocationRelativeTo(null);\n  dialog.setVisible(true);\n}"}
{"ids": "1280", "raw_code": "private static boolean hasChangesOfChildren(long last,PageContext pc,Class clazz){\n  java.lang.reflect.Method[] methods=clazz.getMethods();\n  java.lang.reflect.Method method;\n  Class[] params;\n  for (int i=0; i < methods.length; i++) {\n    method=methods[i];\n    if (method.getDeclaringClass() == clazz) {\n      if (_hasChangesOfChildren(pc,last,method.getReturnType()))       return true;\n      params=method.getParameterTypes();\n      for (int y=0; y < params.length; y++) {\n        if (_hasChangesOfChildren(pc,last,params[y]))         return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "65918", "raw_code": "public static String removeSpecialChar(String tempStr){\n  if (tempStr != null) {\n    tempStr=replace(tempStr,\",\",\"\",true,true);\n    tempStr=replace(tempStr,\".\",\"\",true,true);\n    tempStr=replace(tempStr,\"!\",\"\",true,true);\n    tempStr=replace(tempStr,\"?\",\"\",true,true);\n    tempStr=replace(tempStr,\"'\",\"\",true,true);\n    tempStr=replace(tempStr,\":\",\"\",true,true);\n    tempStr=replace(tempStr,\"(\",\"\",true,true);\n    tempStr=replace(tempStr,\")\",\"\",true,true);\n    tempStr=replace(tempStr,\"+\",\"\",true,true);\n    tempStr=replace(tempStr,\"-\",\"\",true,true);\n    tempStr=replace(tempStr,\">\",\"\",true,true);\n    tempStr=replace(tempStr,\"<\",\"\",true,true);\n    tempStr=replace(tempStr,\"/\",\"\",true,true);\n    while (tempStr.indexOf(\"  \") > 0) {\n      tempStr=replace(tempStr,\"  \",\" \",true,true);\n    }\n    tempStr=replace(tempStr,\"\t\",\" \",true,true);\n  }\n  return tempStr;\n}"}
{"ids": "73267", "raw_code": "public RunScriptAction(NetworkPanel networkPanel){\n  super(\"Run Script...\");\n  putValue(SMALL_ICON,ResourceManager.getImageIcon(\"Script.png\"));\n  putValue(SHORT_DESCRIPTION,\"Open and apply a network .bsh script to this network\");\n  this.networkPanel=networkPanel;\n}"}
{"ids": "43676", "raw_code": "public T webImage(String url){\n  return webImage(url,true,false,0xFF000000);\n}"}
{"ids": "30312", "raw_code": "private Map<Installment,List<Receipt>> consolidateTuplesInstallmentWise(final List<InstallmentReceiptTuple> tuples){\n  final Map<Installment,List<Receipt>> consolidated=new HashMap<Installment,List<Receipt>>();\n  for (  final InstallmentReceiptTuple t : tuples) {\n    List<Receipt> receiptsForInstallment=consolidated.get(t.installment);\n    if (receiptsForInstallment == null) {\n      receiptsForInstallment=new ArrayList<Receipt>();\n      consolidated.put(t.installment,receiptsForInstallment);\n    }\n    if (!receiptsForInstallment.contains(t.receipt))     receiptsForInstallment.add(t.receipt);\n  }\n  LOGGER.info(\"consolidateTuplesInstallmentWise() returned: \" + consolidated);\n  return consolidated;\n}"}
{"ids": "34122", "raw_code": "public static boolean isValidEmail(String email){\n  final String emailPattern=\"^[_A-Za-z0-9-]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n  Matcher matcher;\n  Pattern pattern=Pattern.compile(emailPattern);\n  matcher=pattern.matcher(email);\n  if (matcher != null)   return matcher.matches();\n else   return false;\n}"}
{"ids": "71201", "raw_code": "public void add(LineMergeDirectedEdge directedEdge){\n  directedEdges.add(directedEdge);\n}"}
{"ids": "5543", "raw_code": "public String report(){\n  StringBuffer report=new StringBuffer();\n  intHashTable=new int[table.tableSize];\n  calculateSlotUsage();\n  int max=maxCollisions();\n  int[] slotUsageCount=new int[max + 1];\n  for (  int i : intHashTable) {\n    slotUsageCount[i]++;\n  }\n  report.append(\"Total number of entries: \" + numEntries + \"\\n\");\n  report.append(\"   Load factor:\" + (numEntries / (1.0f * table.tableSize) + \"\\n\\n\"));\n  float weightedAvg=0.0f;\n  int numNonEmpty=0;\n  report.append(\"Number of hits\\tNumber of slots\\n\");\n  for (int j=0; j <= max; j++) {\n    if (slotUsageCount[j] != 0) {\n      report.append(j + \"\\t\" + slotUsageCount[j]+ \"\\n\");\n      if (j != 0) {\n        weightedAvg+=slotUsageCount[j] * j;\n        numNonEmpty+=slotUsageCount[j];\n      }\n    }\n  }\n  weightedAvg/=numNonEmpty;\n  report.append(\"\\n  Slot statistics: min=\" + minCollisions() + \", max=\"+ max+ \", weightedAvg:\"+ weightedAvg);\n  return report.toString();\n}"}
{"ids": "11689", "raw_code": "public boolean zip(String zipLocation,String toBeZippedName){\n  boolean ret=false;\n  if (verbose)   Debug.put(\"zip\");\n  File toBeZipped=new File(toBeZippedName);\n  if (toBeZipped.exists()) {\n    try {\n      FileUtils.saveZipFile(zipLocation,toBeZipped);\n      ret=true;\n    }\n catch (    FileNotFoundException e) {\n      e.printStackTrace();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n  return ret;\n}"}
{"ids": "31524", "raw_code": "private HashMap<Integer,Boolean> generateExpandedStateMap(){\n  HashMap<Integer,Boolean> parentListItemHashMap=new HashMap<>();\n  int childCount=0;\n  Object listItem;\n  ParentWrapper parentWrapper;\n  int listItemCount=mItemList.size();\n  for (int i=0; i < listItemCount; i++) {\n    if (mItemList.get(i) != null) {\n      listItem=getListItem(i);\n      if (listItem instanceof ParentWrapper) {\n        parentWrapper=(ParentWrapper)listItem;\n        parentListItemHashMap.put(i - childCount,parentWrapper.isExpanded());\n      }\n else {\n        childCount++;\n      }\n    }\n  }\n  return parentListItemHashMap;\n}"}
{"ids": "64799", "raw_code": "public void addAudioPacketListener(Listener<AudioPacket> listener){\n  mAudioPacketBroadcaster.addListener(listener);\n}"}
{"ids": "33444", "raw_code": "public JavaEnvironment(File javaPath){\n  Objects.requireNonNull(javaPath);\n  this.javaPath=javaPath;\n}"}
{"ids": "81932", "raw_code": "void addCallback(JSObject source,String method,JSFunction callback,boolean async){\n  String key=source.toJSPointer() + \".\" + method;\n  callbacks.put(key,callback);\n  String id=JSObject.ID_KEY;\n  String self=source.toJSPointer();\n  String js=self + \".\" + method+ \"=function(){\"+ \"var len=arguments.length;var url='/!cn1command/\"+ self+ \".\"+ method+ \"?'; \"+ \"for (var i=0; i<len; i++){\"+ \"var val = arguments[i]; var strval=val;\"+ \"if ( (typeof(val) == 'object') || (typeof(val) == 'function')){ \"+ \"var id = val.\"+ id+ \"; \"+ \"if (typeof(id)=='undefined' || typeof(\"+ jsLookupTable+ \"[id]) == 'undefined' || \"+ jsLookupTable+ \"[id].\"+ id+ \"!=id){\"+ jsLookupTable+ \".push(val); id=\"+ jsLookupTable+ \".indexOf(val); Object.defineProperty(val,\\\"\"+ id+ \"\\\",{value:id, enumerable:false});\"+ \"}\"+ \"strval='\"+ jsLookupTable+ \"['+id+']'\"+ \"}\"+ \"url += encodeURIComponent(typeof(val))+'='+encodeURIComponent(strval);\"+ \"if (i < len-1){ url += '&';}\"+ \"} window.location.href=url;\"+ \"}\";\n  exec(js,async);\n}"}
{"ids": "73938", "raw_code": "public void removeAllBlocksFromSection(){\n  for (int i=mBlockEntries.size(); i > 0; i--) {\n    Block b=mBlockEntries.get(i - 1);\n    if (b != null) {\n      b.removePropertyChangeListener(mBlockListeners.get(i - 1));\n    }\n    mBlockListeners.remove(i - 1);\n    mBlockEntries.remove(i - 1);\n  }\n  for (int i=mForwardEntryPoints.size(); i > 0; i--) {\n    mForwardEntryPoints.remove(i - 1);\n  }\n  for (int i=mReverseEntryPoints.size(); i > 0; i--) {\n    mReverseEntryPoints.remove(i - 1);\n  }\n  initializationNeeded=false;\n}"}
{"ids": "36972", "raw_code": "private static boolean isOperatorVariableAccess(final INaviOperandTreeNode node){\n  final List<INaviOperandTreeNode> children=node.getChildren();\n  if (children.size() == 2) {\n    final INaviOperandTreeNode child0=children.get(0);\n    final INaviOperandTreeNode child1=children.get(1);\n    return isVariable(child0) ^ isVariable(child1);\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "12949", "raw_code": "public void load(DataInput rafIn) throws IOException, MaryConfigurationException {\n  int numIdx=rafIn.readInt();\n  idxInterval=rafIn.readInt();\n  if (idxInterval <= 0) {\n    throw new MaryConfigurationException(\"read negative index interval -- file seems corrupt\");\n  }\n  bytePtrs=new long[numIdx];\n  timePtrs=new long[numIdx];\n  int numBytesToRead=16 * numIdx + 16;\n  byte[] data=new byte[numBytesToRead];\n  rafIn.readFully(data);\n  DataInput bufIn=new DataInputStream(new ByteArrayInputStream(data));\n  for (int i=0; i < numIdx; i++) {\n    bytePtrs[i]=bufIn.readLong();\n    timePtrs[i]=bufIn.readLong();\n    if (i > 0) {\n      if (bytePtrs[i] < bytePtrs[i - 1] || timePtrs[i] < timePtrs[i - 1]) {\n        throw new MaryConfigurationException(\"File seems corrupt: Pointer positions in index fields are not strictly monotonously rising\");\n      }\n    }\n  }\n  bufIn.readLong();\n  bufIn.readLong();\n}"}
{"ids": "10846", "raw_code": "public void signoff(String uniqueID){\n  Debug.message(\"crfp\",\"CRFPServer: Client\" + uniqueID + \" signing off!\");\n  caches.remove(uniqueID);\n  viewAttributeLists.remove(uniqueID);\n  timestamps.remove(uniqueID);\n}"}
{"ids": "21878", "raw_code": "private String createNonCGSrdfPairStepsOnEmptyGroup(List<VolumeDescriptor> sourceDescriptors,List<VolumeDescriptor> targetDescriptors,RemoteDirectorGroup group,Map<URI,Volume> uriVolumeMap,String waitFor,Workflow workflow){\n  StorageSystem system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());\n  URI vpoolChangeUri=getVirtualPoolChangeVolume(sourceDescriptors);\n  log.info(\"VPoolChange URI {}\",vpoolChangeUri);\n  List<URI> sourceURIs=VolumeDescriptor.getVolumeURIs(sourceDescriptors);\n  List<URI> targetURIs=new ArrayList<>();\n  for (  URI sourceURI : sourceURIs) {\n    Volume source=uriVolumeMap.get(sourceURI);\n    StringSet srdfTargets=source.getSrdfTargets();\n    for (    String targetStr : srdfTargets) {\n      URI targetURI=URI.create(targetStr);\n      targetURIs.add(targetURI);\n    }\n  }\n  Method createListMethod=createListReplicasMethod(system.getId(),sourceURIs,targetURIs,vpoolChangeUri,true);\n  Method rollbackMethod=rollbackSRDFLinksMethod(system.getId(),sourceURIs,targetURIs,false);\n  String stepId=workflow.createStep(CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP,CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),createListMethod,rollbackMethod,null);\n  return stepId;\n}"}
{"ids": "82964", "raw_code": "public static Long downsamplerTimestamp(Long millitimestamp,long windowSize){\n  return millitimestamp - (millitimestamp % windowSize);\n}"}
{"ids": "84993", "raw_code": "public IStatus run(IProgressMonitor monitor) throws InvocationTargetException {\n  ZipFile zipFile=null;\n  FileOutputStream fos=null;\n  BufferedOutputStream dest=null;\n  BufferedInputStream is=null;\n  jobStatus=Status.OK_STATUS;\n  try {\n    zipFile=new ZipFile(archive);\n    monitor.beginTask(\"Uncompressing \" + archive.getName(),zipFile.size());\n    Enumeration<? extends ZipEntry> entries=zipFile.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry zipEntry=entries.nextElement();\n      String currentEntry=zipEntry.getName();\n      File destFile=new File(targetDir,currentEntry);\n      File destinationParent=destFile.getParentFile();\n      if (!zipEntry.isDirectory()) {\n        destinationParent.mkdirs();\n        is=new BufferedInputStream(zipFile.getInputStream(zipEntry));\n        int numBytesRead;\n        byte bytes[]=new byte[BUFSIZE];\n        fos=new FileOutputStream(destFile);\n        dest=new BufferedOutputStream(fos,BUFSIZE);\n        while ((numBytesRead=is.read(bytes,0,BUFSIZE)) != -1) {\n          dest.write(bytes,0,numBytesRead);\n        }\n        dest.flush();\n      }\n else {\n        destFile.mkdirs();\n      }\n      monitor.worked(1);\n      if (monitor.isCanceled()) {\n        jobStatus=Status.CANCEL_STATUS;\n        break;\n      }\n    }\n    if (!monitor.isCanceled()) {\n      jobStatus=Status.OK_STATUS;\n    }\n  }\n catch (  ZipException ze) {\n    String errormsg=errorMessage(\"It may be corrupted?\");\n    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);\n    CorePluginLog.logError(ze,errormsg);\n  }\ncatch (  IOException ioe) {\n    String errormsg=errorMessage();\n    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);\n    CorePluginLog.logError(ioe,errormsg);\n  }\n finally {\n    try {\n      if (zipFile != null) {\n        zipFile.close();\n      }\n      if (is != null) {\n        is.close();\n      }\n      if (dest != null) {\n        dest.close();\n      }\n    }\n catch (    IOException ioe) {\n      String errormsg=errorMessage();\n      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);\n      CorePluginLog.logError(ioe,errormsg);\n    }\n  }\n  return jobStatus;\n}"}
{"ids": "61748", "raw_code": "public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){\n  long st=System.nanoTime();\n  int res=_db.read(table,key,fields,result);\n  long en=System.nanoTime();\n  _measurements.measure(\"READ\",(int)((en - st) / 1000));\n  _measurements.reportReturnCode(\"READ\",res);\n  return res;\n}"}
{"ids": "5402", "raw_code": "public boolean hasNext(){\n  if (deal > 32000) {\n    sc.close();\n  }\n  return (deal <= 32000);\n}"}
{"ids": "31857", "raw_code": "private void filterNodeMap(ConcurrentMap<String,Collection<ClusterNode>> map,final ClusterNode exclNode){\n  for (  String cacheName : registeredCaches.keySet()) {\n    String maskedName=maskNull(cacheName);\n    while (true) {\n      Collection<ClusterNode> oldNodes=map.get(maskedName);\n      if (oldNodes == null || oldNodes.isEmpty())       break;\n      Collection<ClusterNode> newNodes=new ArrayList<>(oldNodes);\n      if (!newNodes.remove(exclNode))       break;\n      if (map.replace(maskedName,oldNodes,newNodes))       break;\n    }\n  }\n}"}
{"ids": "84613", "raw_code": "private static void adjustAbs(double[] array,int lower,int upper){\n  int j, k;\n  double temp;\n  j=lower;\n  k=lower * 2;\n  while (k <= upper) {\n    if ((k < upper) && (Math.abs(array[k - 1]) < Math.abs(array[k]))) {\n      k+=1;\n    }\n    if (Math.abs(array[j - 1]) < Math.abs(array[k - 1])) {\n      temp=array[j - 1];\n      array[j - 1]=array[k - 1];\n      array[k - 1]=temp;\n    }\n    j=k;\n    k*=2;\n  }\n}"}
{"ids": "19629", "raw_code": "public synchronized IAudioProcessor remove(int index){\n  IAudioProcessor processor=processors.remove(index);\n  buildFinalProcessor();\n  return processor;\n}"}
{"ids": "12157", "raw_code": "LinkedList<TrieNode<T>> makeSuffixChain(TrieNode<T> root,String suffix,T value){\n  LinkedList<TrieNode<T>> result=new LinkedList<>();\n  String rootPrefix=root.getPrefix();\n  for (int i=1, suffixSize=suffix.length(); i <= suffixSize; i++) {\n    String newPrefix=rootPrefix + suffix.substring(0,i);\n    TrieNode<T> newNode=TrieNode.makeNode(newPrefix);\n    result.add(newNode);\n    root.addChild(newNode);\n    root=newNode;\n  }\n  root.setValue(value);\n  return result;\n}"}
{"ids": "4198", "raw_code": "private static By byFromLocator(String locator){\n  if (locator.startsWith(\"//\")) {\n    return By.xpath(locator);\n  }\n  if (locator.startsWith(\"id=\")) {\n    return By.id(locator.replaceFirst(\"id=\",\"\"));\n  }\n  if (locator.startsWith(\"css=\")) {\n    return By.cssSelector(locator.replaceFirst(\"css=\",\"\"));\n  }\n  if (locator.startsWith(\"xpath=\")) {\n    return By.xpath(locator.replaceFirst(\"xpath=\",\"\"));\n  }\n  if (locator.startsWith(\"name=\")) {\n    return By.name(locator.replaceFirst(\"name=\",\"\"));\n  }\n  if (locator.startsWith(\"link=\")) {\n    return By.linkText(locator.replaceFirst(\"link=\",\"\"));\n  }\n  if (locator.startsWith(\"linkpartial=\")) {\n    return By.partialLinkText(locator.replaceFirst(\"linkpartial=\",\"\"));\n  }\n  throw new IllegalArgumentException(\"Locator not supported: \" + locator);\n}"}
{"ids": "36498", "raw_code": "private static void taskStarted(ProgressThread task){\n  for (  ProgressThreadStateListener l : listener.getListeners(ProgressThreadStateListener.class)) {\n    l.progressThreadStarted(task);\n  }\n}"}
{"ids": "13022", "raw_code": "public static final void isCommentWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){\n  if (datavalue == null || (datavalue.length() == 0)) {\n    return;\n  }\n  char[] dataarray=datavalue.toCharArray();\n  int datalength=dataarray.length;\n  if (isXML11Version) {\n    int i=0;\n    while (i < datalength) {\n      char c=dataarray[i++];\n      if (XML11Char.isXML11Invalid(c)) {\n        if (XMLChar.isHighSurrogate(c) && i < datalength) {\n          char c2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {\n            continue;\n          }\n        }\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"InvalidCharInComment\",new Object[]{Integer.toString(dataarray[i - 1],16)});\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n else       if (c == '-' && i < datalength && dataarray[i] == '-') {\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"DashDashInComment\",null);\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n    }\n  }\n else {\n    int i=0;\n    while (i < datalength) {\n      char c=dataarray[i++];\n      if (XMLChar.isInvalid(c)) {\n        if (XMLChar.isHighSurrogate(c) && i < datalength) {\n          char c2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {\n            continue;\n          }\n        }\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"InvalidCharInComment\",new Object[]{Integer.toString(dataarray[i - 1],16)});\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n else       if (c == '-' && i < datalength && dataarray[i] == '-') {\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,\"DashDashInComment\",null);\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n    }\n  }\n}"}
{"ids": "53805", "raw_code": "private void throwExceptionIfDestroyed(String method) throws DeepstreamRecordDestroyedException {\n  if (this.isDestroyed) {\n    throw new DeepstreamRecordDestroyedException(method);\n  }\n}"}
{"ids": "72875", "raw_code": "public void upload(final InputStream in,String artifact,String version,String fileName,Properties props) throws IOException {\n  props.put(FILE_NAME_PROPERTY,fileName);\n  props.put(VERSION_PROPERTY,version);\n  props.put(ARTIFACT_PROPERTY,artifact);\n  storeProperties(artifact,version,props);\n  try (OutputStream out=newOutputStream(getArtifact(artifact,version,fileName))){\n    IOUtils.copyLarge(in,out);\n  }\n  finally {\n    in.close();\n  }\n}"}
{"ids": "20881", "raw_code": "public void load() throws IOException {\n  if (magicNumber == 0) {\n    try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){\n      magicNumber=ins.readLong();\n      if (magicNumber != MAGIC_NUMBER)       throw new IOException(\"Input file is not a DAA file.\");\n      version=ins.readLong();\n      if (version > DAA_VERSION)       throw new IOException(\"DAA version requires later version of MEGAN.\");\n      diamondBuild=ins.readLong();\n      dbSeqs=ins.readLong();\n      dbSeqsUsed=ins.readLong();\n      dbLetters=ins.readLong();\n      flags=ins.readLong();\n      queryRecords=ins.readLong();\n      modeRank=ins.readInt();\n      gapOpen=ins.readInt();\n      gapExtend=ins.readInt();\n      reward=ins.readInt();\n      penalty=ins.readInt();\n      reserved1=ins.readInt();\n      reserved2=ins.readInt();\n      reserved3=ins.readInt();\n      k=ins.readDouble();\n      lambda=ins.readDouble();\n      reserved4=ins.readDouble();\n      reserved5=ins.readDouble();\n      for (int i=0; i < scoreMatrix.length; i++) {\n        scoreMatrix[i]=(byte)ins.read();\n      }\n      scoreMatrixName=Basic.toString(scoreMatrix);\n      for (int i=0; i < blockSize.length; i++)       blockSize[i]=ins.readLong();\n      if (blockSize[0] == 0)       throw new IOException(\"Invalid DAA file. DIAMOND run probably has not completed successfully.\");\n      for (int i=0; i < blockTypeRank.length; i++) {\n        blockTypeRank[i]=(byte)ins.read();\nswitch (BlockType.value(blockTypeRank[i])) {\ncase ref_names:\n          if (refNamesBlockIndex != -1)           throw new IOException(\"DAA file contains multiple ref_names blocks, not implemented.\");\n        refNamesBlockIndex=i;\n      break;\ncase ref_lengths:\n    if (refLengthsBlockIndex != -1)     throw new IOException(\"DAA file contains multiple ref_lengths blocks, not implemented.\");\n  refLengthsBlockIndex=i;\nbreak;\ncase alignments:\nif (alignmentsBlockIndex != -1) throw new IOException(\"DAA file contains multiple alignments blocks, not implemented.\");\nalignmentsBlockIndex=i;\nbreak;\n}\n}\nif (refNamesBlockIndex == -1) throw new IOException(\"DAA file contains 0 ref_names blocks, not implemented.\");\nif (refLengthsBlockIndex == -1) throw new IOException(\"DAA file contains 0 ref_lengths blocks, not implemented.\");\nif (alignmentsBlockIndex == -1) throw new IOException(\"DAA file contains 0 alignments blocks, not implemented.\");\nif (refLengthsBlockIndex < refNamesBlockIndex) throw new IOException(\"DAA file contains ref_lengths block before ref_names block, not implemented.\");\nheaderSize=ins.getPosition();\nlnK=Math.log(k);\n}\n }\n}"}
{"ids": "76696", "raw_code": "private final void countAll() throws IOException {\n  MultiDocValues.OrdinalMap ordinalMap;\n  if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n    ordinalMap=((MultiSortedSetDocValues)dv).mapping;\n  }\n else {\n    ordinalMap=null;\n  }\n  IndexReader origReader=state.getOrigReader();\n  for (  LeafReaderContext context : origReader.leaves()) {\n    LeafReader reader=context.reader();\n    SortedSetDocValues segValues=reader.getSortedSetDocValues(field);\n    if (segValues == null) {\n      continue;\n    }\n    Bits liveDocs=reader.getLiveDocs();\n    if (ordinalMap != null) {\n      final LongValues ordMap=ordinalMap.getGlobalOrds(context.ord);\n      int numSegOrds=(int)segValues.getValueCount();\n      final int[] segCounts=new int[numSegOrds];\n      int docID;\n      while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (liveDocs == null || liveDocs.get(docID)) {\n          int term=(int)segValues.nextOrd();\n          while (term != SortedSetDocValues.NO_MORE_ORDS) {\n            segCounts[term]++;\n            term=(int)segValues.nextOrd();\n          }\n        }\n      }\n      for (int ord=0; ord < numSegOrds; ord++) {\n        int count=segCounts[ord];\n        if (count != 0) {\n          counts[(int)ordMap.get(ord)]+=count;\n        }\n      }\n    }\n else {\n      int docID;\n      while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (liveDocs == null || liveDocs.get(docID)) {\n          int term=(int)segValues.nextOrd();\n          while (term != SortedSetDocValues.NO_MORE_ORDS) {\n            counts[term]++;\n            term=(int)segValues.nextOrd();\n          }\n        }\n      }\n    }\n  }\n}"}
{"ids": "14081", "raw_code": "public void addToParent(Element headerE) throws Exception {\n  Document doc=headerE.getOwnerDocument();\n  Element securityE=doc.createElementNS(wsseNS,WSSEConstants.TAG_WSSE + \":\" + WSSEConstants.TAG_SECURITYT);\n  securityE.setAttributeNS(SOAPBindingConstants.NS_XML,WSSEConstants.TAG_XML_WSSE,wsseNS);\n  headerE.appendChild(securityE);\n  Document binaryTokenD=XMLUtils.toDOMDocument(toString(),debug);\n  Element binaryTokenE=binaryTokenD.getDocumentElement();\n  securityE.appendChild(doc.importNode(binaryTokenE,true));\n}"}
{"ids": "69005", "raw_code": "public void update(){\n  if (amplitude > 0) {\n    long elapsed=System.currentTimeMillis() - timestamp;\n    double delta=amplitude * Math.exp(-elapsed / timeConstant);\n    if (Math.abs(delta) > 0.5) {\n      viewpointNode.drag(lastDx * delta,lastDy * delta);\n    }\n else {\n      amplitude=0;\n      updateLookAt();\n    }\n  }\n}"}
{"ids": "61918", "raw_code": "@Override public Assignment sample(){\n  if (!samples.isEmpty()) {\n    int selection=sampler.nextInt(samples.size());\n    Assignment selected=samples.get(selection);\n    return selected;\n  }\n else {\n    log.warning(\"distribution has no samples\");\n    return new Assignment();\n  }\n}"}
{"ids": "29659", "raw_code": "@SneakyThrows public static X509Certificate readCertificate(InputStream is){\n  return (X509Certificate)CERT_FACTORY.generateCertificate(is);\n}"}
{"ids": "83478", "raw_code": "public GuacamoleHTTPTunnelMap(){\n  executor.scheduleAtFixedRate(new TunnelTimeoutTask(TUNNEL_TIMEOUT * 1000l),TUNNEL_TIMEOUT,TUNNEL_TIMEOUT,TimeUnit.SECONDS);\n}"}
{"ids": "54009", "raw_code": "default B with(String key,Class<?> value){\n  return with(key,value != null ? value.getName() : null);\n}"}
{"ids": "19746", "raw_code": "private void rename(Table table){\n  if (renameDefinitions != null) {\n    for (    Column col : table.getAllColumns()) {\n      String newColName=renameDefinitions.getNewColumnName(table.getSchema(),table.getName(),col.getName());\n      if (newColName != null)       col.setName(newColName);\n    }\n    String newTableName=renameDefinitions.getNewTableName(table.getSchema(),table.getName());\n    String newSchemaName=renameDefinitions.getNewSchemaName(table.getSchema(),table.getName());\n    if (newTableName != null)     table.setTable(newTableName);\n    if (newSchemaName != null)     table.setSchema(newSchemaName);\n  }\n}"}
{"ids": "80934", "raw_code": "public synchronized boolean put(long fp){\n  int index=(int)(fp & this.mask);\n  long[] list=this.table[index];\n  if (list != null) {\n    int listlen=list.length;\n    for (int i=0; i < listlen; i++) {\n      if (list[i] == fp)       return true;\n    }\n  }\n  if (count >= threshold) {\n    rehash();\n    index=(int)(fp & this.mask);\n    list=this.table[index];\n  }\n  int len=(list == null ? 0 : list.length);\n  long[] newList=new long[len + 1];\n  if (list != null)   System.arraycopy(list,0,newList,0,len);\n  newList[len]=fp;\n  this.table[index]=newList;\n  this.count++;\n  return false;\n}"}
{"ids": "73281", "raw_code": "public void applyLayout(){\n  layout.setInitialLocation(getPosition());\n  layout.layoutNeurons(getNeuronList());\n}"}
{"ids": "34020", "raw_code": "float layerSize(int p_76490_1_){\n  if ((float)p_76490_1_ < (float)this.heightLimit * 0.3F) {\n    return -1.0F;\n  }\n else {\n    float f=(float)this.heightLimit / 2.0F;\n    float f1=f - (float)p_76490_1_;\n    float f2=MathHelper.sqrt_float(f * f - f1 * f1);\n    if (f1 == 0.0F) {\n      f2=f;\n    }\n else     if (Math.abs(f1) >= f) {\n      return 0.0F;\n    }\n    return f2 * 0.5F;\n  }\n}"}
{"ids": "46297", "raw_code": "public static Method findStaticMethod(Class<?> type,String name,Class<?>... args) throws NoSuchMethodException {\n  Method method=findMethod(type,name,args);\n  if (!Modifier.isStatic(method.getModifiers())) {\n    throw new NoSuchMethodException(\"Method '\" + name + \"' is not static\");\n  }\n  return method;\n}"}
{"ids": "4519", "raw_code": "private void fetchSearchServiceCardsFromServer(String keyword,String categoryId){\n  final Map<String,String> params=new HashMap<String,String>(5);\n  params.put(HttpConstants.LATITUDE,SharedPreferenceHelper.getString(R.string.pref_latitude));\n  params.put(HttpConstants.LONGITUDE,SharedPreferenceHelper.getString(R.string.pref_longitude));\n  params.put(HttpConstants.TYPE,HttpConstants.SearchType.SERVICE_CARD);\n  params.put(HttpConstants.GROUP_ID,categoryId);\n  params.put(HttpConstants.PER,\"20\");\n  params.put(HttpConstants.RADIUS,\"50\");\n  params.put(HttpConstants.TITLE,keyword);\n  RetroCallback retroCallback;\n  retroCallback=new RetroCallback(this);\n  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.SEARCH_SERVICES);\n  retroCallbackList.add(retroCallback);\n  params.put(HttpConstants.PAGE,\"1\");\n  mYeloApi.getServiceCards(params,retroCallback);\n  mSwipeRefreshLayout.setRefreshing(true);\n}"}
{"ids": "7036", "raw_code": "public void addPhonenumber(String aPhonenumber){\n  if (mPhoneNumbers.indexOf(aPhonenumber) < 0) {\n    mPhoneNumbers.add(aPhonenumber);\n  }\n}"}
{"ids": "47868", "raw_code": "boolean compareMethods(Method a,Method b){\n  if ((a == null) != (b == null)) {\n    return false;\n  }\n  if (a != null && b != null) {\n    if (!a.equals(b)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "46066", "raw_code": "MarkerSegment findMarkerSegment(int tag){\n  Iterator iter=markerSequence.iterator();\n  while (iter.hasNext()) {\n    MarkerSegment seg=(MarkerSegment)iter.next();\n    if (seg.tag == tag) {\n      return seg;\n    }\n  }\n  return null;\n}"}
{"ids": "35567", "raw_code": "private static Reader openInput(String from){\n  try {\n    return CliUtils.reader(from);\n  }\n catch (  IOException e) {\n    log.error(\"Error finding input\",e);\n    System.exit(1);\n    return null;\n  }\n}"}
{"ids": "64949", "raw_code": "public PublisherConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){\n  int n=array.length;\n  @SuppressWarnings(\"unchecked\") Publisher<? extends T>[] newArray=new Publisher[n + 1];\n  System.arraycopy(array,0,newArray,1,n);\n  newArray[0]=source;\n  return new PublisherConcatArray<>(delayError,newArray);\n}"}
{"ids": "89", "raw_code": "protected void doPublish(String tenantId,List<T> items,String subscriber,int retryCount,long delay) throws Exception {\n  String data=mapper.writeValueAsString(items);\n  TextMessage tm=session.createTextMessage(data);\n  if (tenantId != null) {\n    tm.setStringProperty(\"tenant\",tenantId);\n  }\n  if (subscriber != null) {\n    tm.setStringProperty(\"subscriber\",subscriber);\n  }\n  tm.setIntProperty(\"retryCount\",retryCount);\n  if (delay > 0) {\n    tm.setLongProperty(\"_AMQ_SCHED_DELIVERY\",System.currentTimeMillis() + delay);\n  }\n  if (log.isLoggable(Level.FINEST)) {\n    log.finest(\"Publish: \" + tm);\n  }\n  producer.send(tm);\n}"}
{"ids": "4689", "raw_code": "protected void checkValid() throws URIException {\n  if (!(equals(_scheme,DEFAULT_SCHEME) || _scheme == null)) {\n    throw new URIException(URIException.PARSING,\"wrong class use\");\n  }\n}"}
{"ids": "4377", "raw_code": "@Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){\n  Calendar cal=getCalendar();\n  dateTimeUnit.setMonth(1);\n  dateTimeUnit.setDay(1);\n  List<Period> periods=Lists.newArrayList();\n  int year=dateTimeUnit.getYear();\n  while (dateTimeUnit.getYear() == year) {\n    periods.add(createPeriod(dateTimeUnit,cal));\n    dateTimeUnit=cal.plusMonths(dateTimeUnit,2);\n  }\n  return periods;\n}"}
{"ids": "49820", "raw_code": "public static SecretKey createAESKey(){\n  try {\n    final KeyGenerator kgen=KeyGenerator.getInstance(\"AES\");\n    final int keySize=256;\n    kgen.init(keySize);\n    return kgen.generateKey();\n  }\n catch (  final NoSuchAlgorithmException e) {\n    e.printStackTrace();\n  }\n  return null;\n}"}
{"ids": "65546", "raw_code": "@Override public void valueChange(ValueChangeEvent e){\n  String name=e.getPropertyName();\n  Object value=e.getNewValue();\n  log.config(name + \"=\" + value);\n  if (value == null)   return;\n}"}
{"ids": "8617", "raw_code": "@RequestMapping(value=\"/page\",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<UserDTO>> findAll(@RequestBody PageRequestByExample<UserDTO> prbe) throws URISyntaxException {\n  PageResponse<UserDTO> pageResponse=userDTOService.findAll(prbe);\n  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);\n}"}
{"ids": "71408", "raw_code": "public boolean isReadOnly(boolean useSessionStatus) throws SQLException {\n  if (useSessionStatus && !this.isClosed && versionMeetsMinimum(5,6,5)&& !getUseLocalSessionState()&& getReadOnlyPropagatesToServer()) {\n    java.sql.Statement stmt=null;\n    java.sql.ResultSet rs=null;\n    try {\n      try {\n        stmt=getMetadataSafeStatement();\n        rs=stmt.executeQuery(\"select @@session.tx_read_only\");\n        if (rs.next()) {\n          return rs.getInt(1) != 0;\n        }\n      }\n catch (      SQLException ex1) {\n        if (ex1.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {\n          throw SQLError.createSQLException(\"Could not retrieve transation read-only status server\",SQLError.SQL_STATE_GENERAL_ERROR,ex1,getExceptionInterceptor());\n        }\n      }\n    }\n  finally {\n      if (rs != null) {\n        try {\n          rs.close();\n        }\n catch (        Exception ex) {\n        }\n        rs=null;\n      }\n      if (stmt != null) {\n        try {\n          stmt.close();\n        }\n catch (        Exception ex) {\n        }\n        stmt=null;\n      }\n    }\n  }\n  return this.readOnly;\n}"}
{"ids": "68390", "raw_code": "private static DownscaleQuality addConstant(String type){\n  init();\n  if (constList.containsKey(type)) {\n    throw new RuntimeException(\"Type strings for DownscaleQuality should be unique; \" + type + \" is declared twice\");\n  }\n  DownscaleQuality q=new DownscaleQuality(type);\n  constList.put(type,q);\n  return q;\n}"}
{"ids": "11043", "raw_code": "public void bail(String message,boolean printUsageStatement){\n  Debug.output(message);\n  if (printUsageStatement)   printUsage();\n  System.exit(0);\n}"}
{"ids": "67887", "raw_code": "private void assertTimestampsEqualWithEpsilon(long expected,long actual,int epsilon,String desc){\n  assertTrue(\"Expected a \" + desc + \" time within \"+ epsilon+ \"ms of \"+ expected+ \" but got \"+ actual,Math.abs(actual - expected) < epsilon);\n}"}
{"ids": "79759", "raw_code": "public SpiderSitemapXMLParser(SpiderParam params){\n  super();\n  if (params == null) {\n    throw new IllegalArgumentException(\"Parameter params must not be null.\");\n  }\n  this.params=params;\n}"}
{"ids": "22794", "raw_code": "public void addHop(int id){\n  if (entities == null) {\n    return;\n  }\n  hopsNumber++;\n  entities.add(Integer.valueOf(id));\n}"}
{"ids": "38140", "raw_code": "protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){\n  print(\"associator doesn't alter original datasets\");\n  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);\n  print(\"...\");\n  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;\n  boolean[] result=new boolean[2];\n  Instances train=null;\n  Associator associator=null;\n  try {\n    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);\n    if (missingLevel > 0) {\n      addMissing(train,missingLevel,predictorMissing,classMissing);\n    }\n    associator=AbstractAssociator.makeCopies(getAssociator(),1)[0];\n  }\n catch (  Exception ex) {\n    throw new Error(\"Error setting up for tests: \" + ex.getMessage());\n  }\n  try {\n    Instances trainCopy=new Instances(train);\n    associator.buildAssociations(trainCopy);\n    compareDatasets(train,trainCopy);\n    println(\"yes\");\n    result[0]=true;\n  }\n catch (  Exception ex) {\n    println(\"no\");\n    result[0]=false;\n    if (m_Debug) {\n      println(\"\\n=== Full Report ===\");\n      print(\"Problem during building\");\n      println(\": \" + ex.getMessage() + \"\\n\");\n      println(\"Here is the dataset:\\n\");\n      println(\"=== Train Dataset ===\\n\" + train.toString() + \"\\n\");\n    }\n  }\n  return result;\n}"}
{"ids": "86403", "raw_code": "public boolean isEmpty(){\n  return mEventQueue.isEmpty();\n}"}
{"ids": "3344", "raw_code": "public void readEntries(TableKelp table,InSegment reader,SegmentEntryCallback cb){\n  TempBuffer tBuf=TempBuffer.createLarge();\n  byte[] buffer=tBuf.buffer();\n  InStore sIn=reader.getStoreRead();\n  byte[] tableKey=new byte[TableKelp.TABLE_KEY_SIZE];\n  for (int ptr=length() - BLOCK_SIZE; ptr > 0; ptr-=BLOCK_SIZE) {\n    sIn.read(getAddress() + ptr,buffer,0,buffer.length);\n    int index=0;\n    long seq=BitsUtil.readLong(buffer,index);\n    index+=8;\n    if (seq != getSequence()) {\n      log.warning(L.l(\"Invalid sequence {0} expected {1} at 0x{2}\",seq,getSequence(),Long.toHexString(getAddress() + ptr)));\n      break;\n    }\n    System.arraycopy(buffer,index,tableKey,0,tableKey.length);\n    index+=tableKey.length;\n    if (!Arrays.equals(tableKey,_tableKey)) {\n      log.warning(L.l(\"Invalid table {0} table {1} at 0x{2}\",Hex.toShortHex(tableKey),Hex.toShortHex(_tableKey),Long.toHexString(getAddress() + ptr)));\n      break;\n    }\n    int head=index;\n    while (head < BLOCK_SIZE && buffer[head] != 0) {\n      head=readEntry(table,buffer,head,cb,getAddress());\n    }\n    boolean isCont=buffer[head + 1] != 0;\n    if (!isCont) {\n      break;\n    }\n  }\n  tBuf.free();\n}"}
{"ids": "21892", "raw_code": "static int numberOfHosts(Map<URI,List<Initiator>> net2InitiatorsMap){\n  Set<URI> hostSet=new HashSet<URI>();\n  for (  List<Initiator> initiators : net2InitiatorsMap.values()) {\n    for (    Initiator init : initiators) {\n      hostSet.add(init.getHost());\n    }\n  }\n  return hostSet.size();\n}"}
{"ids": "71658", "raw_code": "protected AttributesImpl startPrefixMapping(Element element,NamespaceStack namespaceStack) throws SAXException {\n  AttributesImpl namespaceAttributes=null;\n  Namespace elementNamespace=element.getNamespace();\n  if ((elementNamespace != null) && !isIgnoreableNamespace(elementNamespace,namespaceStack)) {\n    namespaceStack.push(elementNamespace);\n    contentHandler.startPrefixMapping(elementNamespace.getPrefix(),elementNamespace.getURI());\n    namespaceAttributes=addNamespaceAttribute(namespaceAttributes,elementNamespace);\n  }\n  List<Namespace> declaredNamespaces=element.declaredNamespaces();\n  for (  Namespace namespace : declaredNamespaces) {\n    if (!isIgnoreableNamespace(namespace,namespaceStack)) {\n      namespaceStack.push(namespace);\n      contentHandler.startPrefixMapping(namespace.getPrefix(),namespace.getURI());\n      namespaceAttributes=addNamespaceAttribute(namespaceAttributes,namespace);\n    }\n  }\n  return namespaceAttributes;\n}"}
{"ids": "20154", "raw_code": "private static DataFlavor[] convertToArray(List<DataFlavor> dataFlavourList){\n  DataFlavor[] array=new DataFlavor[dataFlavourList.size()];\n  dataFlavourList.toArray(array);\n  return array;\n}"}
{"ids": "1117", "raw_code": "public static String translateAttribute(String attributes) throws IOException {\n  short[] flags=strAttrToBooleanFlags(attributes);\n  StringBuilder sb=new StringBuilder();\n  if (flags[READ_ONLY] == YES)   sb.append(\" +R\");\n else   if (flags[READ_ONLY] == NO)   sb.append(\" -R\");\n  if (flags[HIDDEN] == YES)   sb.append(\" +H\");\n else   if (flags[HIDDEN] == NO)   sb.append(\" -H\");\n  if (flags[SYSTEM] == YES)   sb.append(\" +S\");\n else   if (flags[SYSTEM] == NO)   sb.append(\" -S\");\n  if (flags[ARCHIVE] == YES)   sb.append(\" +A\");\n else   if (flags[ARCHIVE] == NO)   sb.append(\" -A\");\n  return sb.toString();\n}"}
{"ids": "32197", "raw_code": "public static int nextIndexId(){\n  return msgIdx.getAndIncrement();\n}"}
{"ids": "25563", "raw_code": "public static boolean checkSecurityInfos(String endpoint,Identity clientIdentity,List<SecurityInfo> securityInfos){\n  if (clientIdentity.isSecure()) {\n    if (securityInfos == null || securityInfos.isEmpty()) {\n      LOG.warn(\"Client '{}' without security info try to connect through the secure endpoint\",endpoint);\n      return false;\n    }\n else {\n      for (      SecurityInfo securityInfo : securityInfos) {\n        if (checkSecurityInfo(endpoint,clientIdentity,securityInfo)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n else   if (securityInfos != null && !securityInfos.isEmpty()) {\n    LOG.warn(\"Client '{}' must connect using DTLS\",endpoint);\n    return false;\n  }\n  return true;\n}"}
{"ids": "2333", "raw_code": "public static ArrayList<ByteString> byteArraysToStrings(ArrayList<byte[]> byteArrays){\n  if (byteArrays == null) {\n    return null;\n  }\n  ArrayList<ByteString> byteStrings=new ArrayList<ByteString>();\n  for (  byte[] bytes : byteArrays) {\n    byteStrings.add(ByteString.of(bytes));\n  }\n  return byteStrings;\n}"}
{"ids": "63085", "raw_code": "void addIndex(IndexType type,List<String> columnNames){\n  IndexDefinition index=new IndexDefinition();\n  index.indexName=tableName + \"_\" + indexes.size();\n  index.columnNames=New.arrayList(columnNames);\n  index.type=type;\n  indexes.add(index);\n}"}
{"ids": "70047", "raw_code": "public Builder withKeyStoreKeyPassword(String keyStoreKeyPassword){\n  properties.setProperty(NettyOptions.SSL_KEY_STORE_KEY_PASSWORD,Assert.notNull(keyStoreKeyPassword,\"trustStorePassword\"));\n  return this;\n}"}
{"ids": "22965", "raw_code": "public ZookeeperStateMachineEnsemble(CuratorFramework curatorClient,String basePath){\n  this(curatorClient,basePath,true,DEFAULT_LOGSIZE);\n}"}
{"ids": "60397", "raw_code": "public static CustomShortcutSet createShortcut(char ch){\n  Character mnemonic=Character.valueOf(ch);\n  String shortcut=SystemInfo.isMac && SystemInfo.isJavaVersionAtLeast(\"1.7\") ? \"control alt pressed \" + mnemonic : \"alt pressed \" + mnemonic;\n  return CustomShortcutSet.fromString(shortcut);\n}"}
{"ids": "82539", "raw_code": "public void gc(){\n  System.gc();\n}"}
{"ids": "32814", "raw_code": "private Node deleteMin(Node x){\n  if (x.left == null)   return x.right;\n  x.left=deleteMin(x.left);\n  x.size=1 + size(x.left) + size(x.right);\n  x.height=1 + Math.max(height(x.left),height(x.right));\n  return balance(x);\n}"}
{"ids": "55686", "raw_code": "public static void resetCounters(){\n  errors=0;\n  warnings=0;\n}"}
{"ids": "85387", "raw_code": "public void write(CeylonConfig config,File source,OutputStream out) throws IOException {\n  if (source.isFile()) {\n    InputStream in=null;\n    try {\n      in=new FileInputStream(source);\n      write(config,in,out);\n    }\n  finally {\n      if (in != null) {\n        try {\n          in.close();\n        }\n catch (        IOException e) {\n        }\n      }\n    }\n  }\n else {\n    throw new FileNotFoundException(\"Couldn't open source configuration file\");\n  }\n}"}
{"ids": "34979", "raw_code": "protected Map<TargetClass,List<Attribute.TypeCompound>> sift(final Iterable<Attribute.TypeCompound> typeCompounds){\n  final Map<TargetClass,List<Attribute.TypeCompound>> targetClassToCompound=new EnumMap<>(TargetClass.class);\n  for (  TargetClass targetClass : TargetClass.values()) {\n    targetClassToCompound.put(targetClass,new ArrayList<TypeCompound>());\n  }\n  for (  final Attribute.TypeCompound typeCompound : typeCompounds) {\n    final TargetType typeCompoundTarget=typeCompound.position.type;\n    final List<Attribute.TypeCompound> destList;\n    if (ElementAnnotationUtil.contains(typeCompoundTarget,annotatedTargets())) {\n      destList=targetClassToCompound.get(TargetClass.TARGETED);\n    }\n else     if (ElementAnnotationUtil.contains(typeCompoundTarget,validTargets())) {\n      destList=targetClassToCompound.get(TargetClass.VALID);\n    }\n else {\n      destList=targetClassToCompound.get(TargetClass.INVALID);\n    }\n    destList.add(typeCompound);\n  }\n  return targetClassToCompound;\n}"}
{"ids": "47700", "raw_code": "protected synchronized void updateLocation(Point newLocn){\n  prev=locn;\n  locn=newLocn;\n  if (Math.abs(locn.x - prev.x) > hysteresis || Math.abs(locn.y - prev.y) > hysteresis) {\n    if (timer.isRunning())     timer.stop();\n  }\n else {\n    if (!timer.isRunning())     timer.start();\n  }\n}"}
{"ids": "61950", "raw_code": "@Override public int compareTo(Value o){\n  if (o instanceof StringVal) {\n    return str.compareTo(((StringVal)o).str);\n  }\n else {\n    return 0;\n  }\n}"}
{"ids": "79906", "raw_code": "public void bind(IntegerProperty property,int value){\n  if (isAchieved())   return;\n  bind(property.greaterThanOrEqualTo(value));\n  BooleanBinding bb=property.greaterThanOrEqualTo(value / 2);\n  progressListener=null;\n  bb.addListener(progressListener);\n}"}
{"ids": "49543", "raw_code": "public synchronized void write(String logData){\n  if (logEnabled) {\n    histData.append(logData);\n    histData.revalidate();\nsynchronized (histData) {\n      histData.notify();\n    }\n  }\n}"}
{"ids": "36804", "raw_code": "public void closeConnection(){\n  try {\n    if (m_connection != null) {\n      m_connection.close();\n    }\n  }\n catch (  final SQLException exception) {\n    NaviLogger.severe(\"Error: Closing the database connection failed with exception: %s\",exception);\n  }\n  m_connection=null;\n}"}
{"ids": "11518", "raw_code": "public void removeActionListener(ActionListener listener){\n  forwardProjectionButton.addActionListener(listener);\n  backProjectionButton.addActionListener(listener);\n}"}
{"ids": "46481", "raw_code": "boolean isLiteral(int index){\n  if (isValidMask() && index < string.length()) {\n    return literalMask.get(index);\n  }\n  return false;\n}"}
{"ids": "75949", "raw_code": "public WordIterator(){\n  this(Locale.getDefault());\n}"}
{"ids": "68316", "raw_code": "@Override public void close(){\n  if (leaf != null) {\n    leaf.close();\n    leaf=null;\n  }\n  ccMgr.releaseIndexLocks();\n  dirsMayBeUpdated=null;\n}"}
{"ids": "68260", "raw_code": "public void pushFile(String local,String remote,ISyncProgressMonitor monitor) throws SyncException, IOException, TimeoutException {\n  File f=new File(local);\n  if (!f.exists()) {\n    throw new SyncException(SyncError.NO_LOCAL_FILE);\n  }\n  if (f.isDirectory()) {\n    throw new SyncException(SyncError.LOCAL_IS_DIRECTORY);\n  }\n  monitor.start((int)f.length());\n  doPushFile(local,remote,monitor);\n  monitor.stop();\n}"}
{"ids": "20045", "raw_code": "public void resize(int size){\n  if (buffer != null) {\n    if (size >= 0 && size < buffer.size()) {\n      int oldLastIndex=buffer.size() - 1;\n      int newLastIndex=size - 1;\n      for (int i=oldLastIndex; i > newLastIndex; i--) {\n        buffer.remove(i);\n      }\n    }\n  }\n else {\n    if (size >= 0 && size < offsets.size()) {\n      long offset=offsets.get(size);\n      byteCache.resize(key,offset);\n      ArrayList<Long> newOffsets=new ArrayList<Long>(size);\n      for (int i=0; i < size; i++) {\n        newOffsets.add(offsets.get(i));\n      }\n      offsets=newOffsets;\n    }\n  }\n}"}
{"ids": "39319", "raw_code": "protected void initFromDir(String prefix,File dir){\n  File[] files;\n  files=dir.listFiles(new ClassFileFilter());\n  for (  File file : files) {\n    if (prefix == null) {\n      add(file.getName());\n    }\n else {\n      add(prefix + \".\" + file.getName());\n    }\n  }\n  files=dir.listFiles(new DirectoryFilter());\n  for (  File file : files) {\n    if (prefix == null) {\n      initFromDir(file.getName(),file);\n    }\n else {\n      initFromDir(prefix + \".\" + file.getName(),file);\n    }\n  }\n}"}
{"ids": "44874", "raw_code": "public static long now(){\n  return System.currentTimeMillis();\n}"}
{"ids": "54916", "raw_code": "public static String collapseNewlines(String argStr){\n  char last=argStr.charAt(0);\n  StringBuffer argBuf=new StringBuffer();\n  for (int cIdx=0; cIdx < argStr.length(); cIdx++) {\n    char ch=argStr.charAt(cIdx);\n    if (ch != '\\n' || last != '\\n') {\n      argBuf.append(ch);\n      last=ch;\n    }\n  }\n  return argBuf.toString();\n}"}
{"ids": "39178", "raw_code": "@Override protected String generateJavadoc(int index) throws Exception {\n  throw new Exception(\"Not used!\");\n}"}
{"ids": "73585", "raw_code": "public Properties extractProperties(Iterable<Map.Entry<String,String>> propSrc){\n  Properties result=new Properties();\n  for (  Map.Entry<String,String> entry : propSrc) {\n    String name=entry.getKey();\n    if (isNamespacedProperty(name)) {\n      String val=entry.getValue();\n      result.setProperty(name,val);\n    }\n  }\n  return result;\n}"}
{"ids": "30171", "raw_code": "public T removeLast(){\n  if (rows.size() != 0)   rows.remove(rows.size() - 1);\n  return instance();\n}"}
{"ids": "82001", "raw_code": "public static void ensureVisible(String componentName){\n  if (verbose) {\n    log(\"ensureVisible(\" + componentName + \")\");\n  }\n  ensureVisible(findByName(componentName));\n}"}
{"ids": "16777", "raw_code": "public void endRepresentation(){\n  if (!representationProtectionsSet) {\n    if (currentRepresentationProtections != null) {\n      Collections.sort(currentRepresentationProtections,this);\n    }\n    representationProtections=currentRepresentationProtections;\n    representationProtectionsSet=true;\n  }\n else {\n    if (currentRepresentationProtections == null) {\n      Assertions.checkState(representationProtections == null);\n    }\n else {\n      Collections.sort(currentRepresentationProtections,this);\n      Assertions.checkState(currentRepresentationProtections.equals(representationProtections));\n    }\n  }\n  currentRepresentationProtections=null;\n}"}
{"ids": "7563", "raw_code": "public StandardPieSectionLabelGenerator(String labelFormat){\n  this(labelFormat,NumberFormat.getNumberInstance(),NumberFormat.getPercentInstance());\n}"}
{"ids": "50211", "raw_code": "public static CharSequence[] split(CharSequence line,int delimiter){\n  CharSequence[] tokens0=split(line,delimiter,N);\n  if (tokens0.length < N) {\n    return tokens0;\n  }\n else {\n    CharSequence[] tokens1=split(tokens0[N - 1],delimiter);\n    CharSequence[] tokens2=new CharSequence[tokens0.length + tokens1.length - 1];\n    System.arraycopy(tokens0,0,tokens2,0,tokens0.length - 1);\n    System.arraycopy(tokens1,0,tokens2,tokens0.length - 1,tokens1.length);\n    return tokens2;\n  }\n}"}
{"ids": "6944", "raw_code": "public CCTimer(Object t,String s,float seconds){\n  target=t;\n  selector=s;\n  interval=seconds;\n  elapsed=-1;\n  try {\n    Class<?> cls=target.getClass();\n    invocation=cls.getMethod(s,Float.TYPE);\n  }\n catch (  NoSuchMethodException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "77318", "raw_code": "public Tuple read() throws IOException {\n  try {\n    Map fields=jsonTupleStream.next();\n    if (fields == null) {\n      Map m=new HashMap();\n      m.put(\"EOF\",true);\n      return new Tuple(m);\n    }\n else {\n      String msg=(String)fields.get(\"EXCEPTION\");\n      if (msg != null) {\n        HandledException ioException=new HandledException(msg);\n        throw ioException;\n      }\n      if (trace) {\n        fields.put(\"_CORE_\",this.baseUrl);\n        if (slice != null) {\n          fields.put(\"_SLICE_\",slice);\n        }\n      }\n      if (fieldMappings != null) {\n        fields=mapFields(fields,fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n catch (  HandledException e) {\n    throw new IOException(\"--> \" + this.baseUrl + \":\"+ e.getMessage());\n  }\ncatch (  Exception e) {\n    throw new IOException(\"--> \" + this.baseUrl + \": An exception has occurred on the server, refer to server log for details.\",e);\n  }\n}"}
{"ids": "36276", "raw_code": "private String compute(String left,double right,boolean isInteger){\n  if (left == null && Double.isNaN(right)) {\n    return null;\n  }\n  if (isInteger && right == (int)right) {\n    return (left == null ? \"\" : left) + (int)right;\n  }\n else   if (Double.isInfinite(right)) {\n    return (left == null ? \"\" : left) + Tools.formatNumber(right);\n  }\n else {\n    return (left == null ? \"\" : left) + (Double.isNaN(right) ? \"\" : right);\n  }\n}"}
{"ids": "73176", "raw_code": "public void removePropertyChangeListener(final PropertyChangeListener listener){\n  propertyChangeSupport.removePropertyChangeListener(listener);\n}"}
{"ids": "45645", "raw_code": "public final int[] hashSignature(final int[] signature){\n  int[] hash=new int[stages];\n  int rows=signature.length / stages;\n  for (int i=0; i < signature.length; i++) {\n    int stage=Math.min(i / rows,stages - 1);\n    hash[stage]=(int)((hash[stage] + (long)signature[i] * LARGE_PRIME) % buckets);\n  }\n  return hash;\n}"}
{"ids": "76403", "raw_code": "private void addTriggerGroupName(String groupName) throws JobPersistenceException, ResourceException {\n  addRepoListName(groupName,TRIGGER_GROUP_NAMES_RESOURCE_PATH,\"names\");\n}"}
{"ids": "10706", "raw_code": "private synchronized void clearTempFiles(){\n  if ((tempFiles != null) && (tempFiles.size() > 0)) {\n    Iterator it=tempFiles.iterator();\n    File file=null;\n    while (it.hasNext()) {\n      file=(File)it.next();\n      file.delete();\n    }\n    tempFiles.clear();\n  }\n}"}
{"ids": "486", "raw_code": "private Bitmap readAndDecompressThumbnail(File file){\n  try {\n    if (file.length() > 0) {\n      FileInputStream instream=new FileInputStream(file);\n      ReadableByteChannel bytechan=Channels.newChannel(instream);\n      ByteBuffer buff=ByteBuffer.allocateDirect((int)file.length());\n      if (buff != null) {\n        bytechan.read(buff);\n        instream.close();\n        buff.rewind();\n        PDQImage pthumb=DecompressionService.decompressThumbnailImage(buff);\n        if (pthumb != null) {\n          Bitmap bm=ConversionService.convertPDQImageToBitmap(pthumb,false);\n          pthumb.close();\n          return bm;\n        }\n      }\n    }\n  }\n catch (  IOException ex) {\n    ex.printStackTrace();\n  }\n  return null;\n}"}
{"ids": "7820", "raw_code": "public Rectangle2D shrink(Rectangle2D area,Rectangle2D result){\n  if (result == null) {\n    result=new Rectangle2D.Double();\n  }\n  result.setRect(area.getX() + this.left,area.getY() + this.top,area.getWidth() - this.left - this.right,area.getHeight() - this.top - this.bottom);\n  return result;\n}"}
{"ids": "40498", "raw_code": "public static String assertJQ(SolrQueryRequest req,String... tests) throws Exception {\n  return assertJQ(req,JSONTestUtil.DEFAULT_DELTA,tests);\n}"}
{"ids": "43646", "raw_code": "protected void serialize(String filename){\n  classifier.serializeClassifier(filename);\n}"}
{"ids": "9536", "raw_code": "private Object processExecute(Statement proxy,Method method,Object[] args) throws Throwable {\n  long startTime=logSlowQuery ? System.currentTimeMillis() : 0L;\n  try {\n    if (method.getName() == \"executeQuery\")     return newProxiedResultSet(proxy,method,args);\n    return targetInvoke(method,args);\n  }\n  finally {\n    if (logSlowQuery)     logQuery(proxy,args,startTime);\n  }\n}"}
{"ids": "46528", "raw_code": "int boundedIndexOf(String string,char search,int start,int end){\n  int retValue=string.indexOf(search,start);\n  if (retValue >= end) {\n    return -1;\n  }\n  return retValue;\n}"}
{"ids": "27156", "raw_code": "public int incr(T k,int delta){\n  Integer i=counts.get(k);\n  if (i == null) {\n    i=0;\n  }\n  int next=i.intValue() + delta;\n  if (next < 0) {\n    throw new java.lang.ArithmeticException();\n  }\n  if (next == 0) {\n    counts.remove(k);\n  }\n else {\n    counts.put(k,i + delta);\n  }\n  return i;\n}"}
{"ids": "5630", "raw_code": "public void send(final OscPacket thePacket,final TcpClient theClient){\n  theClient.send(thePacket.getBytes());\n}"}
{"ids": "45367", "raw_code": "public static Map<String,MappedClass> fillInTheGaps(Map<String,MappedClass> mappedClasses,MappingMode mode){\n  for (  String originalName : mappedClasses.keySet()) {\n    mappedClasses=fillGap(mappedClasses.get(originalName),mappedClasses,mode);\n  }\n  return mappedClasses;\n}"}
{"ids": "31140", "raw_code": "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  if (name == null) {\n    if (types != null) {\n      throw new InvalidObjectException(\"cannot have types with null name\");\n    }\n  }\n else {\n    try {\n      check();\n    }\n catch (    RuntimeException e) {\n      rethrow(e);\n    }\n  }\n  if (constraints != null && constraints.isEmpty()) {\n    throw new InvalidObjectException(\"constraints cannot be empty\");\n  }\n}"}
{"ids": "4298", "raw_code": "public static boolean between(Date baseDate,Date startDate,Date endDate){\n  if (startDate.equals(endDate) || endDate.before(startDate)) {\n    return false;\n  }\n  if ((startDate.before(baseDate) || startDate.equals(baseDate)) && (endDate.after(baseDate) || endDate.equals(baseDate))) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "71861", "raw_code": "public void addListener(final TimeoutEventListener listener){\n  final long timeout=listener.getTimeout();\n  if (timeout > 0) {\n    listeners.add(listener);\nsynchronized (stateLock) {\n      pendingListenerMinDelay=Math.min(pendingListenerMinDelay,timeout);\n      stateLock.notifyAll();\n    }\n  }\n}"}
{"ids": "36508", "raw_code": "public static String transformToolTipText(final String description,final boolean addHTMLTags,final int lineLength,final boolean escapeSlashes,final boolean escapeHTML){\n  String completeText=description.trim();\n  if (escapeHTML) {\n    completeText=Tools.escapeHTML(completeText);\n  }\n  if (escapeSlashes) {\n    completeText=completeText.replaceAll(\"/\",\"&#47;\");\n  }\n  StringBuffer result=new StringBuffer();\n  if (addHTMLTags) {\n    result.append(\"<html>\");\n  }\n  completeText=Tools.transformAllLineSeparators(completeText);\n  String[] lines=completeText.split(\"\\n\");\n  for (  String text : lines) {\n    boolean first=true;\n    while (text.length() > lineLength) {\n      int spaceIndex=text.indexOf(\" \",lineLength);\n      if (!first) {\n        result.append(\"<br>\");\n      }\n      first=false;\n      if (spaceIndex >= 0) {\n        result.append(text.substring(0,spaceIndex));\n        text=text.substring(spaceIndex + 1);\n      }\n else {\n        result.append(text);\n        text=\"\";\n      }\n    }\n    if (!first && text.length() > 0) {\n      result.append(\"<br>\");\n    }\n    result.append(text);\n    result.append(\"<br>\");\n  }\n  if (addHTMLTags) {\n    result.append(\"</html>\");\n  }\n  return result.toString();\n}"}
{"ids": "3508", "raw_code": "@Override public void write(byte[] buffer,int offset,int length){\n  if (isClosed() || isHead()) {\n    return;\n  }\n  int byteLength=_offset;\n  while (true) {\n    int sublen=Math.min(length,SIZE - byteLength);\n    System.arraycopy(buffer,offset,_buffer,byteLength,sublen);\n    offset+=sublen;\n    length-=sublen;\n    byteLength+=sublen;\n    if (length <= 0) {\n      break;\n    }\n    _offset=byteLength;\n    flushByteBuffer();\n    byteLength=_offset;\n  }\n  _offset=byteLength;\n}"}
{"ids": "39500", "raw_code": "public ClientHttpRequest(URLConnection connection) throws IOException {\n  this.connection=connection;\n  connection.setDoOutput(true);\n  connection.setDoInput(true);\n  connection.setRequestProperty(\"Content-Type\",\"multipart/form-data; boundary=\" + boundary);\n}"}
{"ids": "55130", "raw_code": "private void appendTag(String tagName,String value){\n  xml.append(\"\\n<\");\n  xml.append(tagName);\n  xml.append(\"><![CDATA[\");\n  xml.append(value);\n  xml.append(\"]]></\");\n  xml.append(tagName);\n  xml.append(\">\");\n}"}
{"ids": "34272", "raw_code": "@Override public CertificateTokenValidationExtraInfo extraInfo(){\n  return extraInfo;\n}"}
{"ids": "67527", "raw_code": "public void addTopLevelContents(Collection<ContentElement> contents){\n  topLevelContents.addAll(contents);\n}"}
{"ids": "8481", "raw_code": "public static void withInstance(Map<String,Object> args,Closure c) throws SQLException, ClassNotFoundException {\n  Sql sql=null;\n  try {\n    sql=newInstance(args);\n    c.call(sql);\n  }\n  finally {\n    if (sql != null)     sql.close();\n  }\n}"}
{"ids": "67020", "raw_code": "public void ddSolve(Set<Node> qryNodes){\n  long solve_time=0, prepare_time=0;\n  if (hasExecuted == false)   solve();\n  if (ddPrepared == false || offlineProcessor == null) {\n    offlineProcessor=new OfflineProcessor(this);\n    IFigureManager.cleanCache();\n    ddPrepared=true;\n    ps.println();\n    ps.println(\"==> Entering demand-driven mode (experimental).\");\n  }\n  int init_size=qryNodes.size();\n  if (init_size == 0) {\n    ps.println(\"Please provide at least one pointer.\");\n    return;\n  }\n  Date prepare_begin=new Date();\n  offlineProcessor.init();\n  offlineProcessor.addUserDefPts(qryNodes);\n  offlineProcessor.runOptimizations();\n  Date prepare_end=new Date();\n  prepare_time+=prepare_end.getTime() - prepare_begin.getTime();\n  Date begin=new Date();\n  prepareNextRun();\n  nodeGenerator.initFlowGraph(this);\n  solveConstraints();\n  Date end=new Date();\n  solve_time+=end.getTime() - begin.getTime();\n  ps.println();\n  ps.printf(\"[ddGeom] Preprocessing time: %.2f seconds\\n\",(double)prepare_time / 1000);\n  ps.printf(\"[ddGeom] Main propagation time: %.2f seconds\\n\",(double)solve_time / 1000);\n}"}
{"ids": "47842", "raw_code": "private static void deleteFrom(int deleteAt,int[] starts,int numStarts){\n  while (starts[--numStarts] > deleteAt) {\n    starts[numStarts]-=1;\n  }\n}"}
{"ids": "7301", "raw_code": "public static EventTypeMetadata createBeanType(String name,Class clazz,boolean isPreConfiguredStatic,boolean isPreConfigured,boolean isConfigured,TypeClass typeClass){\n  Set<String> secondaryNames=null;\n  if (name == null) {\n    name=clazz.getName();\n  }\n else {\n    if (!name.equals(clazz.getName())) {\n      secondaryNames=new LinkedHashSet<String>();\n      secondaryNames.add(clazz.getName());\n    }\n  }\n  return new EventTypeMetadata(name,secondaryNames,typeClass,isPreConfiguredStatic,isPreConfigured,isConfigured,ApplicationType.CLASS,false);\n}"}
{"ids": "48148", "raw_code": "public static boolean useSubjectCredsOnly(GSSCaller caller){\n  if (caller instanceof HttpCaller) {\n    return false;\n  }\n  String propValue=AccessController.doPrivileged(new GetPropertyAction(\"javax.security.auth.useSubjectCredsOnly\",\"true\"));\n  return (!propValue.equalsIgnoreCase(\"false\"));\n}"}
{"ids": "24881", "raw_code": "public void deleteStorage(StorageData storageData) throws BusinessException, IOException {\n  StorageData local=getLocalStorageDataObject(storageData);\nsynchronized (local) {\n    if ((storageRecorder.isRecordingOn() || storageRecorder.isRecordingScheduled()) && Objects.equals(local,recorderStorageData)) {\n      throw new BusinessException(\"Delete the storage \" + local + \".\",StorageErrorCodeEnum.STORAGE_ALREADY_CLOSED);\n    }\n    if (local.isStorageOpened()) {\n      StorageWriter writer=openedStoragesMap.get(local);\n      if (writer != null) {\n        writer.cancel();\n      }\n      openedStoragesMap.remove(local);\n    }\n    deleteCompleteStorageDataFromDisk(local);\n    existingStoragesSet.remove(local);\n  }\n}"}
{"ids": "25403", "raw_code": "public CoapResponse advanced(Request request){\n  assignClientUriIfEmpty(request);\n  return synchronous(request);\n}"}
{"ids": "36221", "raw_code": "@Override public boolean conditionOk(Example example){\n  boolean isOk=true;\n  for (  Attribute attribute : checkedAttributes) {\n    isOk&=!Double.isNaN(example.getValue(attribute));\n  }\n  return isOk;\n}"}
{"ids": "12673", "raw_code": "private void loadBinary(InputStream is) throws IOException {\n  if (useNewIO && is instanceof FileInputStream) {\n    FileInputStream fis=(FileInputStream)is;\n    if (useIndexing) {\n      loadBinaryIndex(new URL(indexName));\n      mapDatabase(fis);\n    }\n else {\n      loadMappedBinary(fis);\n    }\n  }\n else {\n    DataInputStream dis=new DataInputStream(new BufferedInputStream(is));\n    loadBinary(dis);\n  }\n}"}
{"ids": "22574", "raw_code": "public VNXeCommandJob deleteLunsFromLunGroup(String lunGroupId,List<String> luns){\n  LunGroupModifyParam param=new LunGroupModifyParam();\n  List<LunAddParam> lunDelete=new ArrayList<LunAddParam>();\n  for (  String lunId : luns) {\n    VNXeBase lun=new VNXeBase(lunId);\n    LunAddParam lunAdd=new LunAddParam();\n    lunAdd.setLun(lun);\n    lunDelete.add(lunAdd);\n  }\n  param.setLunDelete(lunDelete);\n  LunGroupRequests req=new LunGroupRequests(_khClient);\n  return req.modifyLunGroupAsync(lunGroupId,param);\n}"}
{"ids": "30946", "raw_code": "public void removeLocators(LookupLocator[] locators){\n  testSetForNull(locators);\nsynchronized (this) {\n    if (terminated) {\n      throw new IllegalStateException(\"discovery terminated\");\n    }\n    HashMap groupsMap=new HashMap(1);\n    for (int i=0; i < locators.length; i++) {\n      LocatorReg reg=removeDiscoveredLocator(locators[i]);\n      if (reg != null) {\n        groupsMap.put(reg.proxy,reg.memberGroups);\n        continue;\n      }\n      reg=findReg(locators[i]);\n      if (reg != null) {\n        undiscoveredLocators.remove(reg);\n      }\n    }\n    if (!groupsMap.isEmpty() && !listeners.isEmpty()) {\n      addNotify((ArrayList)listeners.clone(),groupsMap,true);\n    }\n  }\n}"}
{"ids": "4964", "raw_code": "public boolean is_selected(ItemSelectionChoice p_choice){\n  return sel_array[p_choice.ordinal()];\n}"}
{"ids": "37051", "raw_code": "private void add(final IProgressOperation operation){\n  final GridBagConstraints constraints=new GridBagConstraints();\n  constraints.fill=GridBagConstraints.HORIZONTAL;\n  constraints.gridy=counter++;\n  constraints.gridx=0;\n  constraints.weightx=1;\n  constraints.weighty=1;\n  m_progressPanel.add(operation.getProgressPanel(),constraints);\n}"}
{"ids": "15189", "raw_code": "public KeyStoreBuilder withProvider(final String providerName){\n  Provider provider=Security.getProvider(providerName);\n  if (provider == null) {\n    throw new IllegalArgumentException(\"No such provider: \" + providerName);\n  }\n  return withProvider(provider);\n}"}
{"ids": "32621", "raw_code": "public CompositeRouteFinder(final GameMap map,final HashMap<Match<Territory>,Integer> matches){\n  m_map=map;\n  m_matches=matches;\n  s_logger.finer(\"Initializing CompositeRouteFinderClass...\");\n}"}
{"ids": "48993", "raw_code": "public TCPEndpoint(String host,int port){\n  this(host,port,null,null);\n}"}
{"ids": "49964", "raw_code": "public ProgramRewriter(ArrayList<HopRewriteRule> hRewrites,ArrayList<StatementBlockRewriteRule> sbRewrites){\n  _dagRuleSet=new ArrayList<HopRewriteRule>();\n  _dagRuleSet.addAll(hRewrites);\n  _sbRuleSet=new ArrayList<StatementBlockRewriteRule>();\n  _sbRuleSet.addAll(sbRewrites);\n}"}
{"ids": "37195", "raw_code": "private JMenu createSettingsMenu(){\n  final JMenu menu=new JMenu(\"Settings\");\n  menu.setMnemonic('S');\n  menu.add(new CActionShowSettingsDialog(getParent()));\n  menu.add(new JSeparator());\n  menu.add(new CActionInitialCallgraphSettings(getParent()));\n  menu.add(new CActionInitialFlowgraphSettings(getParent()));\n  return menu;\n}"}
{"ids": "49464", "raw_code": "public static void writeString(DataOutputStream os,String s) throws IOException {\n  if (s == null) {\n    os.writeInt(-1);\n  }\n else {\n    byte array[]=s.getBytes();\n    os.writeInt(array.length);\n    os.write(array);\n  }\n}"}
{"ids": "27126", "raw_code": "public static boolean isJavaValidName(String str){\n  if (str.isEmpty())   return false;\n  if (javaKeys.contains(str))   return false;\n  char first=str.charAt(0);\n  if (isValidNameStartChar(first)) {\n    for (int i=1; i < str.length(); ++i) {\n      char c=str.charAt(i);\n      if (!isValidNameChar(c))       return false;\n    }\n    return true;\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "2531", "raw_code": "private List<String> createCommands(){\n  List<String> commands=createNodeCommands(nodejsFile,tsFile);\n  List<String> args=createNodeArgs();\n  if (args != null) {\n    commands.addAll(args);\n  }\n  return commands;\n}"}
{"ids": "34452", "raw_code": "private void parsePackages(SensorContext sensorContext){\n  for (  Directory directory : packageList) {\n    sensorContext.saveMeasure(directory,CoreMetrics.DIRECTORIES,1.0);\n    sensorContext.saveMeasure(directory,CoreMetrics.FILES,(double)filesCount.get(directory));\n  }\n}"}
{"ids": "52868", "raw_code": "@Reference(authors=\"D. Pelleg, A. Moore\",booktitle=\"X-means: Extending K-means with Efficient Estimation on the Number of Clusters\",title=\"Proceedings of the 17th International Conference on Machine Learning (ICML 2000)\",url=\"http://www.pelleg.org/shared/hp/download/xmeans.ps\") public static <V extends NumberVector>double logLikelihood(Relation<V> relation,Clustering<? extends MeanModel> clustering,NumberVectorDistanceFunction<? super V> distanceFunction){\n  List<? extends Cluster<? extends MeanModel>> clusters=clustering.getAllClusters();\n  final int dim=RelationUtil.dimensionality(relation);\n  final int m=clusters.size();\n  int n=0;\n  int[] n_i=new int[m];\n  double d=0.;\n  double[] d_i=new double[m];\n  Iterator<? extends Cluster<? extends MeanModel>> it=clusters.iterator();\n  for (int i=0; it.hasNext(); ++i) {\n    Cluster<? extends MeanModel> cluster=it.next();\n    n+=n_i[i]=cluster.size();\n    d+=d_i[i]=varianceOfCluster(cluster,distanceFunction,relation);\n  }\n  if (n <= m) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  final double v=d / (n - m), logv=Math.log(v);\n  double logLikelihood=0.;\n  for (int i=0; i < m; i++) {\n    logLikelihood+=n_i[i] * Math.log(n_i[i]) - n_i[i] * .5 * MathUtil.LOGTWOPI - n_i[i] * dim * .5* logv - (d_i[i] - m) * .5;\n  }\n  logLikelihood-=n * Math.log(n);\n  return logLikelihood;\n}"}
{"ids": "42155", "raw_code": "private static Class<?>[] classesForParams(List<String> params){\n  Class<?>[] result=new Class<?>[params.size()];\n  for (int i=0; i < params.size(); i++) {\n    result[i]=classForParam(params.get(i));\n  }\n  return result;\n}"}
{"ids": "4816", "raw_code": "final public void trimToSize(){\n  for (  GazEntry ge : gaz.values()) {\n    ge.trimToSize();\n  }\n}"}
{"ids": "13945", "raw_code": "public boolean containsSelectAccount(){\n  return prompts.contains(PROMPT_SELECT_ACCOUNT);\n}"}
{"ids": "38988", "raw_code": "protected static void quickSort(Instances insts,int[] indices,int attidx,int left,int right){\n  if (left < right) {\n    int middle=partition(insts,indices,attidx,left,right);\n    quickSort(insts,indices,attidx,left,middle);\n    quickSort(insts,indices,attidx,middle + 1,right);\n  }\n}"}
{"ids": "81851", "raw_code": "public Image flipImageHorizontally(Image image,boolean maintainOpacity){\n  int[] rgb=image.getRGB();\n  int[] newRGB=new int[rgb.length];\n  int width=image.getWidth();\n  int height=image.getHeight();\n  for (int y=0; y < height; y++) {\n    for (int x=0; x < width; x++) {\n      newRGB[(width - x - 1) + y * width]=rgb[x + y * width];\n    }\n  }\n  return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity);\n}"}
{"ids": "3368", "raw_code": "private void readSegments() throws IOException {\n  for (  SegmentExtent10 extent : _segmentExtents) {\n    try (ReadStream is=openRead(extent.address(),extent.length())){\n      is.skip(extent.length() - BLOCK_SIZE);\n      long sequence=BitsUtil.readLong(is);\n      byte[] tableKey=new byte[TABLE_KEY_SIZE];\n      is.readAll(tableKey,0,tableKey.length);\n      if (sequence > 0) {\n        Segment10 segment=new Segment10(sequence,tableKey,extent);\n        _segments.add(segment);\n      }\n    }\n   }\n}"}
{"ids": "83369", "raw_code": "public static double projectTimeWithin24Hours(double time){\n  double secondsInOneDay=60 * 60 * 24;\n  if (time == Double.NEGATIVE_INFINITY || time == Double.POSITIVE_INFINITY) {\n    DebugLib.stopSystemAndReportInconsistency(\"time is not allowed to be minus or plus infinity\");\n  }\n  while (time < 0) {\n    time+=secondsInOneDay;\n  }\n  if (time < secondsInOneDay) {\n    return time;\n  }\n else {\n    return ((time / secondsInOneDay) - (Math.floor(time / secondsInOneDay))) * secondsInOneDay;\n  }\n}"}
{"ids": "85420", "raw_code": "@SuppressWarnings(\"unchecked\") public static void checkType(Map<String,Object> map,String name){\n  Map<String,Object> tmap;\n  if (map.get(MetamodelGenerator.KEY_TYPE) instanceof Map) {\n    tmap=(Map<String,Object>)map.get(MetamodelGenerator.KEY_TYPE);\n  }\n else   if (map.get(MetamodelGenerator.KEY_TYPE) instanceof String) {\n    tmap=new HashMap<String,Object>();\n    tmap.put(MetamodelGenerator.KEY_NAME,map.get(MetamodelGenerator.KEY_TYPE));\n  }\n else {\n    tmap=map;\n  }\n  int join=name.indexOf('&');\n  if (join > 0) {\n    while (join > 0 && !pointyBracketsEven(name.substring(0,join))) {\n      join=name.indexOf('&',join + 1);\n    }\n    if (join > 0) {\n      Assert.assertEquals(\"not an intersection type\",\"i\",tmap.get(\"comp\"));\n      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join));\n      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1));\n      return;\n    }\n  }\n  join=name.indexOf('|');\n  if (join > 0) {\n    while (join > 0 && !pointyBracketsEven(name.substring(0,join))) {\n      join=name.indexOf('|',join + 1);\n    }\n    if (join > 0) {\n      Assert.assertEquals(\"not a union type\",\"u\",tmap.get(\"comp\"));\n      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join));\n      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1));\n      return;\n    }\n  }\n  int sep=name.indexOf('<');\n  String typeParams=null;\n  if (sep > 0) {\n    typeParams=name.substring(sep + 1,name.length() - 1);\n    name=name.substring(0,sep);\n  }\n  if (tmap.containsKey(MetamodelGenerator.KEY_PACKAGE)) {\n    Assert.assertEquals(name,String.format(\"%s::%s\",packageName(tmap),tmap.get(MetamodelGenerator.KEY_NAME)));\n  }\n else {\n    Assert.assertEquals(name,tmap.get(MetamodelGenerator.KEY_NAME));\n  }\n  if (typeParams != null) {\n    List<Map<String,Object>> tparms=(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPE_PARAMS);\n    Assert.assertFalse(\"Type parameters shouldn't be empty\",tparms.isEmpty());\n    checkTypeParameters(0,tparms,typeParams);\n  }\n}"}
{"ids": "70776", "raw_code": "public QuerierCLI(String[] args){\n  cliOptions=createOptions();\n  try {\n    CommandLineParser parser=new GnuParser();\n    commandLine=parser.parse(cliOptions,args,true);\n    if (hasOption(\"h\")) {\n      printHelp();\n      System.exit(1);\n    }\n    if (!parseOptions()) {\n      logger.info(\"The provided options are not valid\");\n      printHelp();\n      System.exit(1);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    System.exit(1);\n  }\n}"}
{"ids": "76423", "raw_code": "void writeValueProperties(String fullId,long dbId,String localId,JsonValue value,Connection connection) throws SQLException {\n  if (cfg.hasPossibleSearchableProperties()) {\n    Integer batchingCount=0;\n    PreparedStatement propCreateStatement=getPreparedStatement(connection,QueryDefinition.PROPCREATEQUERYSTR);\n    try {\n      batchingCount=writeValueProperties(fullId,dbId,localId,value,connection,propCreateStatement,batchingCount);\n      if (enableBatching && batchingCount > 0) {\n        int[] numUpdates=propCreateStatement.executeBatch();\n        logger.debug(\"Batch update of objectproperties updated: {}\",numUpdates);\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Writing batch of objectproperties, updated: {}\",Arrays.asList(numUpdates));\n        }\n        propCreateStatement.clearBatch();\n      }\n    }\n  finally {\n      CleanupHelper.loggedClose(propCreateStatement);\n    }\n  }\n}"}
{"ids": "20687", "raw_code": "protected double computeMaxYAxisValueLogScale(double maxValue){\n  double v=0;\n  int mantisse=0;\n  int exponent=0;\n  while (v < maxValue) {\n    if (mantisse < 9)     mantisse++;\n else {\n      mantisse=1;\n      exponent++;\n    }\n    v=mantisse * Math.pow(10,exponent);\n  }\n  return Math.log10(v);\n}"}
{"ids": "86448", "raw_code": "public void addFocusClearedListener(FocusClearedListener focusClearedListener){\n  mFocusClearedListeners.add(focusClearedListener);\n}"}
{"ids": "65115", "raw_code": "public void addItemListener(ItemListener aListener){\n  listenerList.add(ItemListener.class,aListener);\n}"}
{"ids": "10837", "raw_code": "public static MosaicLevy createMosaicLevy(final MosaicId mosaicId){\n  return new MosaicLevy(MosaicTransferFeeType.Absolute,generateRandomAccount(),mosaicId,Quantity.fromValue(123));\n}"}
{"ids": "72503", "raw_code": "public int rankOf(double value){\n  int ret=0;\n  if (!hasCapacity()) {\n    ret=Arrays.binarySearch(data,value);\n    if (ret < 0) {\n      return -ret - 1;\n    }\n else {\n      return ret;\n    }\n  }\n else {\n    for (int i=0; i < next; i++) {\n      if (data[i] < value) {\n        ret++;\n      }\n    }\n    return ret;\n  }\n}"}
{"ids": "52504", "raw_code": "public static <T>Predicate<T> not(Predicate<T> predicate){\n  return predicate.negate();\n}"}
{"ids": "6986", "raw_code": "private static void addMarginTopToContentChild(View mContentChild,int statusBarHeight){\n  if (mContentChild == null) {\n    return;\n  }\n  if (!TAG_MARGIN_ADDED.equals(mContentChild.getTag())) {\n    FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mContentChild.getLayoutParams();\n    lp.topMargin+=statusBarHeight;\n    mContentChild.setLayoutParams(lp);\n    mContentChild.setTag(TAG_MARGIN_ADDED);\n  }\n}"}
{"ids": "80109", "raw_code": "static byte[] hexStringToByteArray(String hexString){\n  String s=hexString;\n  int len=s.length();\n  if (len % 2 == 1) {\n    s=\"0\" + s;\n    len++;\n  }\n  byte[] data=new byte[len / 2];\n  for (int i=0; i < len; i+=2) {\n    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));\n  }\n  return data;\n}"}
{"ids": "50895", "raw_code": "private void fetchSchema() throws ExecutionException, RpcException, TimeoutException {\n  Message schema=Rpc.get(myClient.getSchema(),FETCH_SCHEMA_TIMEOUT_MS,TimeUnit.MILLISECONDS);\n  LOG.info(\"Schema with \" + schema.entities.length + \" classes, \"+ schema.constants.length+ \" constant sets\");\n  int atoms=0;\n  for (  Entity type : schema.entities) {\n    if (AtomMetadata.find(type) != null) {\n      atoms++;\n    }\n    Dynamic.register(type);\n  }\n  LOG.info(\"Schema with \" + atoms + \" atoms\");\n  for (  ConstantSet set : schema.constants) {\n    ConstantSet.register(set);\n  }\n}"}
{"ids": "72499", "raw_code": "private void append(StringBuilder buffer,double[] data,String prefix,String separator,String suffix){\n  buffer.append(prefix);\n  for (int i=0; i < data.length; ++i) {\n    if (i > 0) {\n      buffer.append(separator);\n    }\n    buffer.append(data[i]);\n  }\n  buffer.append(suffix);\n}"}
{"ids": "35743", "raw_code": "public T toRealArray(){\n  return _outputArrayType.cast(ArrayMultidimensionalizer.multidimensionalize(_real,_dimensions));\n}"}
{"ids": "50098", "raw_code": "private ArrayList<WritableComparable> readPartitions(FileSystem fs,Path p,JobConf job) throws IOException {\n  SequenceFile.Reader reader=new SequenceFile.Reader(fs,p,job);\n  ArrayList<WritableComparable> parts=new ArrayList<WritableComparable>();\n  try {\n    DoubleWritable key=new DoubleWritable();\n    NullWritable value=NullWritable.get();\n    while (reader.next(key,value)) {\n      parts.add(key);\n      key=new DoubleWritable();\n    }\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n finally {\n    IOUtilFunctions.closeSilently(reader);\n  }\n  reader.close();\n  return parts;\n}"}
{"ids": "19813", "raw_code": "public boolean pollSeqno(long seqno){\n  return seqno <= diskLog.getMaxSeqno();\n}"}
{"ids": "42156", "raw_code": "public E push(E value){\n  elements.add(value);\n  return value;\n}"}
{"ids": "27317", "raw_code": "public long cardinality(final int tailIndex){\n  return rangeCount(tailIndex);\n}"}
{"ids": "53419", "raw_code": "protected void finishGridRow(){\n  GridBagConstraints constraints=new GridBagConstraints();\n  constraints.gridwidth=GridBagConstraints.REMAINDER;\n  constraints.weightx=0;\n  final JLabel icon;\n  if (param.isOptional()) {\n    if (param.isDefined() && param.tookDefaultValue() && !(param instanceof Flag)) {\n      icon=new JLabel(StockIcon.getStockIcon(StockIcon.DIALOG_INFORMATION));\n      icon.setToolTipText(\"Default value: \" + param.getDefaultValueAsString());\n    }\n else {\n      icon=new JLabel();\n      icon.setMinimumSize(new Dimension(16,16));\n    }\n  }\n else {\n    if (!param.isDefined()) {\n      icon=new JLabel(StockIcon.getStockIcon(StockIcon.DIALOG_ERROR));\n      icon.setToolTipText(\"Missing value.\");\n    }\n else {\n      icon=new JLabel();\n      icon.setMinimumSize(new Dimension(16,16));\n    }\n  }\n  parent.add(icon,constraints);\n}"}
{"ids": "34328", "raw_code": "@Override public void shutdown(){\n  if (!shouldKeepAdbAlive) {\n    AndroidDebugBridge.disconnectBridge();\n    AndroidDebugBridge.terminate();\n  }\n  logger.info(\"stopping Device Manager\");\n}"}
{"ids": "85612", "raw_code": "public void pingReceived(Ping pong){\n  long now=System.currentTimeMillis();\n  long previousReceived=(int)(lastPingSent.get() & 0xffffffff);\n  log.debug(\"Pong from client id {} at {} with value {}, previous received at {}\",new Object[]{getId(),now,pong.getValue2(),previousReceived});\n  if (pong.getValue2() == previousReceived) {\n    lastPingTime.set((int)(now & 0xffffffff) - pong.getValue2());\n  }\n  lastPongReceived.set(now);\n}"}
{"ids": "42544", "raw_code": "public static int findObjectLiteral(Object literal){\nsynchronized (objectLiterals) {\n    Integer result=objectLiterals.get(literal);\n    return result == null ? 0 : result.intValue();\n  }\n}"}
{"ids": "74740", "raw_code": "@Override public void resetViewableArea(){\n  throw new RuntimeException(\"resetViewableArea called in PdfDecoderFx\");\n}"}
{"ids": "53528", "raw_code": "public static Lexicon buildWumpusLex(){\n  Lexicon l=new Lexicon();\n  ArrayList<LexWord> list=new ArrayList<LexWord>();\n  list.add(new LexWord(\"stench\",(float)0.05));\n  list.add(new LexWord(\"breeze\",(float)0.10));\n  list.add(new LexWord(\"wumpus\",(float)0.15));\n  list.add(new LexWord(\"pits\",(float)0.05));\n  list.add(new LexWord(\"friend\",(float)0.10));\n  list.add(new LexWord(\"enemy\",(float)0.10));\n  list.add(new LexWord(\"dog\",(float)0.10));\n  list.add(new LexWord(\"superhero\",(float)0.20));\n  list.add(new LexWord(\"virus\",(float)0.15));\n  l.put(\"NOUN\",list);\n  ArrayList<LexWord> verbList=new ArrayList<LexWord>();\n  verbList.add(new LexWord(\"is\",(float)0.10));\n  verbList.add(new LexWord(\"feel\",(float)0.10));\n  verbList.add(new LexWord(\"smells\",(float)0.10));\n  verbList.add(new LexWord(\"stinks\",(float)0.05));\n  verbList.add(new LexWord(\"wants\",(float)0.20));\n  verbList.add(new LexWord(\"flies\",(float)0.10));\n  verbList.add(new LexWord(\"keeps\",(float)0.05));\n  verbList.add(new LexWord(\"leaves\",(float)0.10));\n  verbList.add(new LexWord(\"throws\",(float)0.20));\n  l.put(\"VERB\",verbList);\n  ArrayList<LexWord> adjList=new ArrayList<LexWord>();\n  adjList.add(new LexWord(\"right\",(float)0.10));\n  adjList.add(new LexWord(\"dead\",(float)0.05));\n  adjList.add(new LexWord(\"smelly\",(float)0.02));\n  adjList.add(new LexWord(\"breezy\",(float)0.02));\n  adjList.add(new LexWord(\"foul\",(float)0.10));\n  adjList.add(new LexWord(\"black\",(float)0.05));\n  adjList.add(new LexWord(\"white\",(float)0.05));\n  adjList.add(new LexWord(\"callous\",(float)0.10));\n  adjList.add(new LexWord(\"proud\",(float)0.10));\n  adjList.add(new LexWord(\"right\",(float)0.10));\n  adjList.add(new LexWord(\"gold\",(float)0.06));\n  adjList.add(new LexWord(\"normal\",(float)0.25));\n  l.put(\"ADJS\",adjList);\n  l.addLexWords(\"ADVERB\",\"here\",\"0.05\",\"ahead\",\"0.05\",\"nearby\",\"0.02\",\"quickly\",\"0.05\",\"badly\",\"0.05\",\"slowly\",\"0.08\",\"sadly\",\"0.10\",\"silently\",\"0.10\",\"easily\",\"0.10\",\"seldom\",\"0.10\",\"sometimes\",\"0.10\",\"loudly\",\"0.10\",\"cordially\",\"0.05\",\"frequently\",\"0.05\");\n  l.addLexWords(\"PRONOUN\",\"me\",\"0.10\",\"you\",\"0.03\",\"i\",\"0.10\",\"it\",\"0.10\",\"us\",\"0.07\",\"they\",\"0.20\",\"he\",\"0.20\",\"she\",\"0.20\");\n  l.addLexWords(\"RELPRO\",\"that\",\"0.40\",\"which\",\"0.15\",\"who\",\"0.20\",\"whom\",\"0.02\",\"whose\",\"0.08\",\"whabt\",\"0.15\");\n  l.addLexWords(buildNameLexicon());\n  l.addLexWords(\"ARTICLE\",\"the\",\"0.40\",\"a\",\"0.30\",\"an\",\"0.10\",\"every\",\"0.05\",\"some\",\"0.15\");\n  l.addLexWords(\"PREP\",\"to\",\"0.20\",\"in\",\"0.10\",\"on\",\"0.05\",\"near\",\"0.10\",\"after\",\"0.10\",\"among\",\"0.05\",\"around\",\"0.20\",\"against\",\"0.10\",\"across\",\"0.10\");\n  l.addLexWords(\"CONJ\",\"and\",\"0.50\",\"or\",\"0.10\",\"but\",\"0.20\",\"yet\",\"0.02\",\"since\",\"0.08\",\"unless\",\"0.10\");\n  l.addLexWords(\"DIGIT\",\"0\",\"0.20\",\"1\",\"0.20\",\"2\",\"0.20\",\"3\",\"0.20\",\"4\",\"0.20\");\n  return l;\n}"}
{"ids": "54655", "raw_code": "public void add(X509TrustManager mgr){\n  if (mgr instanceof X509Extensions) {\n    managers.add((X509Extensions)mgr);\n  }\n else {\n    managers.add(new X509ExtensionsWrapper(mgr));\n  }\n}"}
{"ids": "44280", "raw_code": "public Iterator<TreeNode> findChildren(){\n  List<TreeNode> nodes;\n  if (children == null)   nodes=Collections.emptyList();\n else   nodes=children;\n  return nodes.iterator();\n}"}
{"ids": "75772", "raw_code": "public static double I(double P[][],int j,int k){\n  double I=0.0;\n  double p_x=P[j][j];\n  double p_y=P[k][k];\n  double p_xy=P[j][k];\n  I+=p_xy * Math.log(p_xy / (p_x * p_y));\n  I+=(1. - p_xy) * Math.log((1. - p_xy) / ((1. - p_x) * (1. - p_y)));\n  return I;\n}"}
{"ids": "81794", "raw_code": "static String valueToString(Object value,int indentFactor,int indent){\n  if (value == null || value.equals(null)) {\n    return \"null\";\n  }\n  try {\n    if (value instanceof String) {\n      return quote((String)value);\n    }\n  }\n catch (  Exception e) {\n  }\n  if (value instanceof Float || value instanceof Double || value instanceof Byte|| value instanceof Short|| value instanceof Integer|| value instanceof Long) {\n    return numberToString(value);\n  }\n  if (value instanceof Boolean) {\n    return value.toString();\n  }\n  if (value instanceof Map) {\n    return print((Map)value,indentFactor,indent);\n  }\n  if (value instanceof List) {\n    return print((List)value,indentFactor,indent);\n  }\n  return quote(value.toString());\n}"}
{"ids": "56224", "raw_code": "public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType){\n  Retention retention=annotationType.getAnnotation(Retention.class);\n  return retention != null && retention.value() == RetentionPolicy.RUNTIME;\n}"}
{"ids": "3716", "raw_code": "public void addClassPath(String classpath){\n  char sep=CauchoUtil.getPathSeparatorChar();\n  int head=0;\n  int tail=0;\n  while (head < classpath.length()) {\n    tail=classpath.indexOf(sep,head);\n    String segment=null;\n    if (tail < 0) {\n      segment=classpath.substring(head);\n      head=classpath.length();\n    }\n else {\n      segment=classpath.substring(head,tail);\n      head=tail + 1;\n    }\n    if (segment.equals(\"\"))     continue;\n else     if (segment.endsWith(\".jar\") || segment.endsWith(\".zip\"))     addMergePath(JarPath.create(VfsOld.lookup(segment)));\n else     addMergePath(VfsOld.lookup(segment));\n  }\n}"}
{"ids": "10331", "raw_code": "@Singleton public static synchronized void loadDirectories(String firstOption) throws InvalidConfigException {\n  if (userIdDirectories == null) {\n    userIdDirectories=new TreeMap<String,String>();\n    userIdDirectories.put(\"\",(firstOption == null) ? \"-\" : firstOption);\n    Properties properties=directoriesProperties();\n    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {\n      String key=StringUtils.trim((String)entry.getKey());\n      String value=StringUtils.trim((String)entry.getValue());\n      if (key != null && value != null) {\n        userIdDirectories.put(key,value);\n      }\n else {\n        String error=DIRECTORIES_PROPFILE_PATH + \" has been been configured wrong.\";\n        LOG.error(error);\n        throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);\n      }\n    }\n    if ((userIdDirectories.size() - 1) == 0) {\n      String error=\"No licenses could be loaded from \" + DIRECTORIES_PROPFILE_PATH + \". Please check configuration.\";\n      LOG.error(error);\n      throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);\n    }\n  }\n}"}
{"ids": "52788", "raw_code": "public static Individuum nullIndividuum(int dim){\n  short[] gene=new short[dim];\n  Arrays.fill(gene,DONT_CARE);\n  return new Individuum(0.0,gene);\n}"}
{"ids": "51843", "raw_code": "public List<Class<?>> findAllClasses(String uri) throws IOException, ClassNotFoundException {\n  List<Class<?>> classes=new ArrayList<>();\n  List<String> strings=findAllStrings(uri);\n  for (  String className : strings) {\n    Class<?> clazz=_classLoader.loadClass(className);\n    classes.add(clazz);\n  }\n  return classes;\n}"}
{"ids": "30086", "raw_code": "public void shuffleInventory(@Nonnull IInventory inv,@Nonnull Random random){\n  final List<ItemStack> list=getInventoryList(inv);\n  Collections.shuffle(list,random);\n  for (int i=0; i < inv.getSizeInventory(); ++i) {\n    inv.setInventorySlotContents(i,list.get(i));\n  }\n}"}
{"ids": "86069", "raw_code": "public void runAsserts(List<Step> list,int size,Boolean needAssignee){\n  assertEquals(size,list.size());\n  for (int i=0; i < size; i++) {\n    runAsserts(list.get(i),i,needAssignee);\n  }\n}"}
{"ids": "34215", "raw_code": "public static boolean registerTransform(final String transformURI){\n  final boolean added=transforms.add(transformURI);\n  return added;\n}"}
{"ids": "72038", "raw_code": "public ANDCondition(Condition... conditions){\n  Reject.ifNull(conditions);\n  this.conditions=Arrays.asList(conditions);\n}"}
{"ids": "35629", "raw_code": "private void updateControls(){\n  Spinner difficulty=(Spinner)findViewById(R.id.spinner_difficultyLevel);\n  difficulty.setSelection(GameActivity.getDifficultyIndex());\n  Button resume=(Button)findViewById(R.id.button_resumeGame);\n  resume.setEnabled(GameActivity.canResumeFromSave());\n  CheckBox neverLoseBall=(CheckBox)findViewById(R.id.checkbox_neverLoseBall);\n  neverLoseBall.setChecked(GameActivity.getNeverLoseBall());\n  CheckBox soundEffectsEnabled=(CheckBox)findViewById(R.id.checkbox_soundEffectsEnabled);\n  soundEffectsEnabled.setChecked(GameActivity.getSoundEffectsEnabled());\n  TextView highScore=(TextView)findViewById(R.id.text_highScore);\n  highScore.setText(String.valueOf(mHighScore));\n}"}
{"ids": "41446", "raw_code": "public static void write(OutputStream out,int c){\n  if (out == null) {\n    throw new IllegalArgumentException(\"output stream null.\");\n  }\n  try {\n    out.write(c);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e.getMessage(),e);\n  }\n}"}
{"ids": "73793", "raw_code": "public void message(LocoNetMessage m){\n  if (m.getNumDataElements() != 6) {\n    return;\n  }\n  int b1=m.getElement(0) & 0xFF;\n  int b2=m.getElement(1) & 0xFF;\n  int b3=m.getElement(2) & 0xFF;\n  int b4=m.getElement(3) & 0x07;\n  if ((b1 == 0xD7) && ((b2 == 0x12) || (b2 == 0x17) || (b2 == 0x1F)) && (b3 == 0x00)) {\n    idBox.setSelectedIndex(b4 + 1);\n  }\n}"}
{"ids": "27824", "raw_code": "public Void call() throws Exception {\n  byte[][] keys=new byte[nops][];\n  byte[][] vals=new byte[nops][];\n  if (r.nextDouble() <= insertRate) {\n    for (int i=0; i < nops; i++) {\n      keys[i]=nextKey();\n      vals[i]=new byte[5];\n      r.nextBytes(vals[i]);\n    }\n    lock.lock();\n    try {\n      ndx.submit(0,nops,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);\n      if (groundTruth != null) {\n        groundTruth.submit(0,nops,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);\n      }\n    }\n  finally {\n      lock.unlock();\n    }\n  }\n else {\n    for (int i=0; i < nops; i++) {\n      keys[i]=nextKey();\n    }\n    lock.lock();\n    try {\n      ndx.submit(0,nops,keys,null,BatchRemoveConstructor.RETURN_MUTATION_COUNT,null);\n      if (groundTruth != null) {\n        groundTruth.submit(0,nops,keys,null,BatchRemoveConstructor.RETURN_MUTATION_COUNT,null);\n      }\n    }\n  finally {\n      lock.unlock();\n    }\n  }\n  return null;\n}"}
{"ids": "73670", "raw_code": "public boolean allowMultipleAdditions(String systemName){\n  return true;\n}"}
{"ids": "4893", "raw_code": "public static double lnFactorial(int x){\n  if (x < 0)   throw new IllegalArgumentException(\"Invalid input to factorial: \" + x);\n else   if (x > 32)   return lnGamma(x + 1);\n else {\n    int l=factorialsBuffer.size();\n    for (int i=l; i <= x; i++) {\n      factorialsBuffer.add(log(i) + factorialsBuffer.get(i - 1));\n    }\n    return factorialsBuffer.get(x);\n  }\n}"}
{"ids": "1756", "raw_code": "public void sync() throws IOException {\n  try {\n    latch.await();\n  }\n catch (  InterruptedException e) {\n    Thread.interrupted();\n    throw IOExceptionSupport.create(e);\n  }\n  failOnError();\n}"}
{"ids": "9462", "raw_code": "public static void closeSilently(Closeable closeable){\n  if (closeable == null) {\n    return;\n  }\n  try {\n    closeable.close();\n  }\n catch (  RuntimeException rethrown) {\n    throw rethrown;\n  }\ncatch (  Exception ignored) {\n  }\n}"}
{"ids": "64470", "raw_code": "public synchronized boolean append(final byte[] data){\n  if (data == null) {\n    if (Cfg.DEBUG) {\n      Check.log(TAG + \" (append) null data\");\n    }\n    return true;\n  }\n  FileOutputStream fout=null;\n  OutputStream out=null;\n  try {\n    fout=new FileOutputStream(file,true);\n    out=new BufferedOutputStream(fout,data.length);\n    out.write(data);\n    out.flush();\n  }\n catch (  final Exception ex) {\n    return false;\n  }\n finally {\n    if (fout != null) {\n      try {\n        fout.close();\n      }\n catch (      final IOException e) {\n        if (Cfg.EXCEPTION) {\n          Check.log(e);\n        }\n        if (Cfg.DEBUG) {\n          Check.log(TAG + \" Error: \" + e.toString());\n        }\n      }\n    }\n    if (out != null) {\n      try {\n        out.close();\n      }\n catch (      final IOException e) {\n        if (Cfg.EXCEPTION) {\n          Check.log(e);\n        }\n        if (Cfg.DEBUG) {\n          Check.log(TAG + \" Error: \" + e.toString());\n        }\n      }\n    }\n  }\n  return true;\n}"}
{"ids": "25037", "raw_code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) private void notifyListListeners(){\n  if (!listListeners.isEmpty()) {\n    List temp=new ArrayList(sensorDataObjects.values());\n    temp.addAll(objectStorages.values());\n    for (    ListListener<?> listListener : listListeners) {\n      listListener.contentChanged(temp);\n    }\n  }\n}"}
{"ids": "1317", "raw_code": "private AFTPClient actionOpen() throws IOException, PageException {\n  required(\"server\",server);\n  required(\"username\",username);\n  required(\"password\",password);\n  AFTPClient client=getClient();\n  writeCfftp(client);\n  return client;\n}"}
{"ids": "81060", "raw_code": "public void close(){\n  if (elementLayers != null) {\n    elementLayers.clear();\n    elementLayers=null;\n  }\n  inputSource=null;\n  curListener=null;\n}"}
{"ids": "10348", "raw_code": "public void start(){\n  if (monitorThread != null) {\n    if (!monitorThread.isAlive()) {\n      startMonitorThread();\n    }\n else {\n      LOG.error(\"The monitor thread is already running\");\n    }\n  }\n else {\n    startMonitorThread();\n  }\n}"}
{"ids": "25492", "raw_code": "@HLEUnimplemented @HLEFunction(nid=0x41E73E95,version=271) public int sceUsbCamPollReadVideoFrameEnd(){\n  if (jpegBuffer == null || jpegBuffer.isNull()) {\n    return SceKernelErrors.ERROR_USBCAM_NO_READ_ON_VIDEO_FRAME;\n  }\n  if (currentVideoFrameCount <= lastVideoFrameCount) {\n    if (log.isDebugEnabled()) {\n      log.debug(String.format(\"sceUsbCamPollReadVideoFrameEnd not frame end (%d - %d)\",currentVideoFrameCount,lastVideoFrameCount));\n    }\n    return SceKernelErrors.ERROR_USBCAM_NO_VIDEO_FRAME_AVAILABLE;\n  }\n  return writeCurrentVideoImage(jpegBuffer,jpegBufferSize);\n}"}
{"ids": "38646", "raw_code": "public void scale(int factor){\n  if (m_icon != null) {\n    removeAll();\n    Image pic=m_icon.getImage();\n    int width=m_icon.getIconWidth();\n    int height=m_icon.getIconHeight();\n    int reduction=width / factor;\n    width-=reduction;\n    height-=reduction;\n    pic=pic.getScaledInstance(width,height,Image.SCALE_SMOOTH);\n    m_icon=new ImageIcon(pic);\n    m_visualLabel=new JLabel(m_icon);\n    add(m_visualLabel,BorderLayout.CENTER);\n    Dimension d=m_visualLabel.getPreferredSize();\n    Dimension d2=new Dimension((int)d.getWidth() + 10,(int)d.getHeight() + 10);\n    setMinimumSize(d2);\n    setPreferredSize(d2);\n    setMaximumSize(d2);\n  }\n}"}
{"ids": "31121", "raw_code": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n  in.defaultReadObject();\n  try {\n    initFromName(getName());\n  }\n catch (  RuntimeException e) {\n    if (e instanceof NullPointerException || e instanceof IllegalArgumentException) {\n      InvalidObjectException ee=new InvalidObjectException(e.getMessage());\n      ee.initCause(e);\n      throw ee;\n    }\n    throw e;\n  }\n}"}
{"ids": "50426", "raw_code": "public String toLowerCamel(){\n  return toCamel(CaseFormat.LOWER_CAMEL);\n}"}
{"ids": "22050", "raw_code": "protected List<BlockObject> sortFullCopySourceList(List<BlockObject> fcSourceObjects){\n  List<BlockObject> sortedSourceObjects=new ArrayList<BlockObject>();\n  Map<String,BlockObject> fcSourcObjectsMap=new HashMap<String,BlockObject>();\n  for (  BlockObject fcSourceObject : fcSourceObjects) {\n    fcSourcObjectsMap.put(fcSourceObject.getLabel(),fcSourceObject);\n  }\n  List<String> fcSourceLabels=new ArrayList<String>(fcSourcObjectsMap.keySet());\n  Collections.sort(fcSourceLabels);\n  for (  String fcSourceLabel : fcSourceLabels) {\n    sortedSourceObjects.add(fcSourcObjectsMap.get(fcSourceLabel));\n  }\n  return sortedSourceObjects;\n}"}
{"ids": "16821", "raw_code": "public MovieSetAddAction(boolean withTitle){\n  if (withTitle) {\n    putValue(NAME,BUNDLE.getString(\"movieset.add.desc\"));\n  }\n  putValue(LARGE_ICON_KEY,IconManager.LIST_ADD);\n  putValue(SMALL_ICON,IconManager.LIST_ADD);\n  putValue(SHORT_DESCRIPTION,BUNDLE.getString(\"movieset.add.desc\"));\n}"}
{"ids": "19915", "raw_code": "protected void createRegistry(int port){\n  if (rmiRegistry == null) {\n    try {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Starting RMI registry on registryPort: \" + port);\n      }\n      rmiRegistry=LocateRegistry.createRegistry(port);\n    }\n catch (    Throwable e) {\n      throw new ServerRuntimeException(\"Unable to start rmi registry on registryPort: \" + port,e);\n    }\n  }\n}"}
{"ids": "78005", "raw_code": "public void poll(final UdpSocketStatisticsHandler handler){\n  this.statisticsHandler=handler;\n  try {\n    fileLoader.load();\n    final ByteBuffer buffer=fileLoader.getBuffer();\n    lineParser.reset();\n    lineParser.handleToken(buffer,buffer.position(),buffer.limit());\n  }\n  finally {\n    this.statisticsHandler=null;\n  }\n  monitoredSockets.purgeEntriesOlderThan(updateCount);\n  updateCount++;\n}"}
{"ids": "86431", "raw_code": "void fixWhiteSpace(){\n  final int index=mOutputBuilder.length() - 1;\n  if (index >= 0) {\n    final char lastCharacter=mOutputBuilder.charAt(index);\n    if (!Character.isWhitespace(lastCharacter)) {\n      mOutputBuilder.append(\" \");\n    }\n  }\n}"}
{"ids": "43677", "raw_code": "public boolean expired(long expire){\n  long mod=time.getTime();\n  long now=System.currentTimeMillis();\n  long diff=now - mod;\n  if (diff > expire && getSource() != NETWORK) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "27510", "raw_code": "private void handleDoneQuery(final UUID queryId,final Future<Void> doneQueryFuture){\n  try {\n    doneQueryFuture.get();\n    throw new InterruptedException();\n  }\n catch (  InterruptedException e) {\n    throw new RuntimeException(e);\n  }\ncatch (  ExecutionException e) {\n    throw new RuntimeException(e);\n  }\n}"}
{"ids": "73981", "raw_code": "synchronized public static List<String> formerIdentities(){\n  if (instance == null) {\n    instance=new NodeIdentity();\n    log.info(\"Using {} as the JMRI Node identity\",instance.getIdentity());\n  }\n  return instance.getFormerIdentities();\n}"}
{"ids": "47518", "raw_code": "@Override public JapaneseDate dateEpochDay(long epochDay){\n  return new JapaneseDate(LocalDate.ofEpochDay(epochDay));\n}"}
{"ids": "32477", "raw_code": "private void checkEmpty(){\n  for (int i=0; i < gridCount(); i++) {\n    IgniteCache<Integer,String> cache=jcache(i);\n    assertEquals(0,cache.localSize());\n    assertEquals(0,cache.size());\n    for (    CachePeekMode peekMode : CachePeekMode.values()) {\n      assertEquals(0,cache.localSize(peekMode));\n      assertEquals(0,cache.size(peekMode));\n    }\n  }\n  checkPrimarySize(0);\n}"}
{"ids": "37529", "raw_code": "@LoopProcessorAnnotations(loopProcessorAnnotations={@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR}),@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.INTERFACES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR})},aspect=LoopAspectConstants.AFTER) public static void operationsProcessor(@GenerationRegistry GenerationPolicyRegistry generationValueGetter,@GenerationBaseElement Object element,@GenerationLoopElement Object modelPackage,@GenerationLoopElement(id={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.INTERFACES_PROCESSOR}) Object parent){\n  List<Object> userAddedDependTypes=generationValueGetter.getValues(DEPEND_TYPES_TRACKER,parent);\n  List<Object> parametersArgument=generationValueGetter.getValues(IModelingDecisions.OPERATION_PARAMETER_ARGUMENT,element,parent);\n  for (  Object item : parametersArgument) {\n    if (item instanceof SimpleEntry == false) {\n      continue;\n    }\n    SimpleEntry<?,?> simpleEntry=(SimpleEntry<?,?>)item;\n    Object type=simpleEntry.getKey();\n    if (!userAddedDependTypes.contains(type)) {\n      List<Object> types=generationValueGetter.getValues(IModelingConstants.TYPES_TRACKER,modelPackage,type);\n      if (types.isEmpty()) {\n        continue;\n      }\n      addDepend(generationValueGetter,parent,type);\n    }\n  }\n}"}
{"ids": "66257", "raw_code": "public static void addLanguage(Language language){\n  if (language == null)   return;\n  ArrayList<Language> list=new ArrayList<Language>(Arrays.asList(s_languages));\n  list.add(language);\n  s_languages=new Language[list.size()];\n  list.toArray(s_languages);\n}"}
{"ids": "44489", "raw_code": "protected void doAddUser(User user) throws UsersRepositoryException {\n  Connection conn=null;\n  PreparedStatement addUserStatement=null;\n  try {\n    conn=openConnection();\n    addUserStatement=conn.prepareStatement(m_insertUserSql);\n    setUserForInsertStatement(user,addUserStatement);\n    addUserStatement.execute();\n  }\n catch (  SQLException sqlExc) {\n    sqlExc.printStackTrace();\n    throw new UsersRepositoryException(\"Error accessing database\",sqlExc);\n  }\n finally {\n    theJDBCUtil.closeJDBCStatement(addUserStatement);\n    theJDBCUtil.closeJDBCConnection(conn);\n  }\n}"}
{"ids": "78129", "raw_code": "void blockMix128(long k1,long k2){\n  h1^=mixK1(k1);\n  h1=Long.rotateLeft(h1,27);\n  h1+=h2;\n  h1=(h1 * 5) + 0x52dce729;\n  h2^=mixK2(k2);\n  h2=Long.rotateLeft(h2,31);\n  h2+=h1;\n  h2=(h2 * 5) + 0x38495ab5;\n}"}
{"ids": "22758", "raw_code": "private void registerHost(SimEvent ev){\n  NetworkHost hs=(NetworkHost)ev.getData();\n  hostlist.put(hs.getId(),hs);\n}"}
{"ids": "8813", "raw_code": "void createJar(FileOutputStream outStream,Map<String,byte[]> all) throws IOException {\n  JarOutputStream jar=new JarOutputStream(outStream);\n  for (  Entry<String,byte[]> entry : all.entrySet()) {\n    String name=entry.getKey();\n    JarEntry jar_entry=new JarEntry(name);\n    jar.putNextEntry(jar_entry);\n    jar.write(entry.getValue());\n    jar.closeEntry();\n  }\n  jar.flush();\n  jar.close();\n}"}
{"ids": "72141", "raw_code": "public void appendCell(int value){\n  appendCell(String.valueOf(value));\n}"}
{"ids": "29618", "raw_code": "public void expectServerProxyFailed(){\n  expectedApiCalls.add(new ApiCall(SERVER_PROXY_FAILED));\n}"}
{"ids": "72198", "raw_code": "public Object remove(final Object key){\n  return parameters.remove(key);\n}"}
{"ids": "36229", "raw_code": "@Override public void recalculateAttributeStatistics(Attribute attribute){\n  List<Attribute> allAttributes=new ArrayList<Attribute>();\n  allAttributes.add(attribute);\n  recalculateAttributeStatistics(allAttributes);\n}"}
{"ids": "51877", "raw_code": "public boolean isEmpty(){\n  return children.isEmpty();\n}"}
{"ids": "832", "raw_code": "private BshMethod loadScriptedCommand(InputStream in,String name,Class[] argTypes,String resourcePath,Interpreter interpreter) throws UtilEvalError {\n  try {\n    interpreter.eval(new InputStreamReader(in),this,resourcePath);\n  }\n catch (  EvalError e) {\n    Interpreter.debug(e.toString());\n    throw new UtilEvalError(\"Error loading script: \" + e.getMessage());\n  }\n  BshMethod meth=getMethod(name,argTypes);\n  return meth;\n}"}
{"ids": "862", "raw_code": "public static Object invokeCompiledCommand(Class commandClass,Object[] args,Interpreter interpreter,CallStack callstack) throws UtilEvalError {\n  Object[] invokeArgs=new Object[args.length + 2];\n  invokeArgs[0]=interpreter;\n  invokeArgs[1]=callstack;\n  System.arraycopy(args,0,invokeArgs,2,args.length);\n  BshClassManager bcm=interpreter.getClassManager();\n  try {\n    return Reflect.invokeStaticMethod(bcm,commandClass,\"invoke\",invokeArgs);\n  }\n catch (  InvocationTargetException e) {\n    throw new UtilEvalError(\"Error in compiled command: \" + e.getTargetException());\n  }\ncatch (  ReflectError e) {\n    throw new UtilEvalError(\"Error invoking compiled command: \" + e);\n  }\n}"}
{"ids": "37873", "raw_code": "private static void computeProbabilitiesMultinomialLogistic(double[] responses){\n  double[] r=responses.clone();\n  for (int j=0; j < r.length; j++) {\n    double sum=0;\n    boolean overflow=false;\n    for (int k=0; k < r.length; k++) {\n      if (r[k] - r[j] > 700) {\n        overflow=true;\n        break;\n      }\n      sum+=Math.exp(r[k] - r[j]);\n    }\n    if (overflow) {\n      responses[j]=0.0;\n    }\n else {\n      responses[j]=1.0 / sum;\n    }\n  }\n}"}
{"ids": "14932", "raw_code": "public int addClientExternal(SSOToken token,Map props) throws AMClientCapException {\nsynchronized (externalClientData) {\n    extCapInstance.addClient(token,props);\n    String ct=getClientType(props);\n    Map eMap=mergeWithParent(props);\n    externalClientData.put(ct,eMap);\n    addToIndexes(ct,eMap);\n  }\n  return 0;\n}"}
{"ids": "35410", "raw_code": "public static void delete(File resourceToDelete) throws IOException {\n  if (resourceToDelete.exists()) {\n    delete(resourceToDelete.toPath());\n  }\n}"}
{"ids": "21368", "raw_code": "private void addExportRemoveVolumeSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID,List<URI> boIDs) throws InternalException {\n  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupID);\n  String exportStep=workflow.createStepId();\n  initTaskStatus(exportGroup,exportStep,Operation.Status.pending,\"export remove volumes (that contain RP snapshots)\");\n  Map<URI,List<URI>> deviceToBlockObjects=new HashMap<URI,List<URI>>();\n  for (  URI snapshotID : boIDs) {\n    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);\n    List<BlockObject> objectsToRemove=getExportObjectsForBookmark(snapshot);\n    for (    BlockObject blockObject : objectsToRemove) {\n      List<URI> blockObjects=deviceToBlockObjects.get(blockObject.getStorageController());\n      if (blockObjects == null) {\n        blockObjects=new ArrayList<URI>();\n        deviceToBlockObjects.put(blockObject.getStorageController(),blockObjects);\n      }\n      blockObjects.add(blockObject.getId());\n    }\n  }\n  for (  Map.Entry<URI,List<URI>> deviceEntry : deviceToBlockObjects.entrySet()) {\n    _log.info(String.format(\"Adding workflow step to remove RP bookmarks and associated target volumes from export.  ExportGroup: %s, Storage System: %s, BlockObjects: %s\",exportGroup.getId(),deviceEntry.getKey(),deviceEntry.getValue()));\n    _exportWfUtils.generateExportGroupRemoveVolumes(workflow,STEP_EXPORT_REMOVE_SNAPSHOT,STEP_EXPORT_GROUP_DISABLE,deviceEntry.getKey(),exportGroupID,deviceEntry.getValue());\n  }\n  _log.info(String.format(\"Created export group remove snapshot steps in workflow: %s\",exportGroup.getId()));\n}"}
{"ids": "11030", "raw_code": "public static void remove(String dbgToken){\n  dbgTable.remove(dbgToken);\n}"}
{"ids": "55008", "raw_code": "protected boolean isRecompilationNeeded(int[] loadedChecksums){\n  this.checksums[0]=calculateChecksum();\n  if (this.checksums[0] != loadedChecksums[0]) {\n    if (Trace.swcChecksum) {\n      Trace.trace(\"isRecompilationNeeded: calculated checksum differs from last checksum, recompile\");\n    }\n    return true;\n  }\n  if (!isSwcChecksumEnabled) {\n    if (Trace.swcChecksum) {\n      Trace.trace(\"isRecompilationNeeded: checksums equal, swc-checksum disabled, incremental compile\");\n    }\n    return false;\n  }\n  Map<QName,Long> signatureChecksums=swcDefSignatureChecksums;\n  if (signatureChecksums == null) {\n    if (Trace.swcChecksum) {\n      Trace.trace(\"isRecompilationNeeded: checksums equal, signatureChecksums is null, incremental compile\");\n    }\n  }\n else {\n    for (    Map.Entry<QName,Long> entry : signatureChecksums.entrySet()) {\n      QName qName=(QName)entry.getKey();\n      Long dataSignatureChecksum=(Long)entry.getValue();\n      Long swcSignatureChecksum=swcContext.getChecksum(qName);\n      if (swcSignatureChecksum == null && qName != null) {\n        Source source=swcContext.getSource(qName.getNamespace(),qName.getLocalPart());\n        if (source != null) {\n          swcSignatureChecksum=new Long(source.getLastModified());\n        }\n      }\n      if (Trace.swcChecksum) {\n        if (dataSignatureChecksum == null) {\n          throw new IllegalStateException(\"dataSignatureChecksum should never be null\");\n        }\n      }\n      if (dataSignatureChecksum != null && swcSignatureChecksum == null) {\n        if (Trace.swcChecksum) {\n          Trace.trace(\"isRecompilationNeeded: signature checksums not equal, recompile\");\n          Trace.trace(\"compare \" + entry.getKey());\n          Trace.trace(\"data =  \" + dataSignatureChecksum);\n          Trace.trace(\"swc  =  \" + swcSignatureChecksum);\n        }\n        return true;\n      }\n      if (dataSignatureChecksum != null) {\n        if (dataSignatureChecksum.longValue() != swcSignatureChecksum.longValue()) {\n          if (Trace.swcChecksum) {\n            Trace.trace(\"isRecompilationNeeded: signature checksums not equal, recompile\");\n            Trace.trace(\"compare \" + entry.getKey());\n            Trace.trace(\"data =  \" + dataSignatureChecksum);\n            Trace.trace(\"swc  =  \" + swcSignatureChecksum);\n          }\n          return true;\n        }\n      }\n else {\n        return true;\n      }\n    }\n  }\n  boolean result=!areSwcFileChecksumsEqual();\n  if (Trace.swcChecksum) {\n    Trace.trace(\"isRecompilationNeeded: \" + (result ? \"recompile\" : \"incremental compile\"));\n  }\n  return result;\n}"}
{"ids": "71360", "raw_code": "public static String dumpAsHex(byte[] byteBuffer,int length){\n  StringBuilder outputBuilder=new StringBuilder(length * 4);\n  int p=0;\n  int rows=length / 8;\n  for (int i=0; (i < rows) && (p < length); i++) {\n    int ptemp=p;\n    for (int j=0; j < 8; j++) {\n      String hexVal=Integer.toHexString(byteBuffer[ptemp] & 0xff);\n      if (hexVal.length() == 1) {\n        hexVal=\"0\" + hexVal;\n      }\n      outputBuilder.append(hexVal + \" \");\n      ptemp++;\n    }\n    outputBuilder.append(\"    \");\n    for (int j=0; j < 8; j++) {\n      int b=0xff & byteBuffer[p];\n      if (b > 32 && b < 127) {\n        outputBuilder.append((char)b + \" \");\n      }\n else {\n        outputBuilder.append(\". \");\n      }\n      p++;\n    }\n    outputBuilder.append(\"\\n\");\n  }\n  int n=0;\n  for (int i=p; i < length; i++) {\n    String hexVal=Integer.toHexString(byteBuffer[i] & 0xff);\n    if (hexVal.length() == 1) {\n      hexVal=\"0\" + hexVal;\n    }\n    outputBuilder.append(hexVal + \" \");\n    n++;\n  }\n  for (int i=n; i < 8; i++) {\n    outputBuilder.append(\"   \");\n  }\n  outputBuilder.append(\"    \");\n  for (int i=p; i < length; i++) {\n    int b=0xff & byteBuffer[i];\n    if (b > 32 && b < 127) {\n      outputBuilder.append((char)b + \" \");\n    }\n else {\n      outputBuilder.append(\". \");\n    }\n  }\n  outputBuilder.append(\"\\n\");\n  return outputBuilder.toString();\n}"}
{"ids": "40312", "raw_code": "public void parseFile(ChatEventParseListener listener){\nsynchronized (this) {\n    @SuppressWarnings(\"unused\") long startTime=System.currentTimeMillis();\n    BufferedReader reader=null;\n    try {\n      reader=new BufferedReader(new FileReader(pathToFile));\n      String currentLine=reader.readLine();\n      while (currentLine != null) {\n        try {\n          ChatEvent event=ChatEventUtils.deserializeChatEvent(currentLine);\n          if (!listener.onNewEventParsed(event)) {\n            break;\n          }\n        }\n catch (        Throwable t) {\n          LOG.warn(\"Error reading chat event line \" + currentLine + \" skipping ChatEvent\",t);\n        }\n        currentLine=reader.readLine();\n      }\n      listener.onParseCompleted();\n    }\n catch (    IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        }\n catch (        Throwable t) {\n        }\n      }\n    }\n  }\n}"}
{"ids": "49129", "raw_code": "private CoderResult escapeSequenceOther(short newByte){\n  if (newByte >= 0x20 && newByte <= 0x2F) {\n    state=ESCAPE_SEQUENCE_OTHER;\n    versionSequenceAllowed=false;\n    queue.write(newByte);\n  }\n else   if (newByte >= 0x30 && newByte <= 0x7E) {\n    state=NORMAL_BYTES;\n    versionSequenceAllowed=false;\n    queue.reset();\n  }\n else {\n    return malformedInput(ERR_ESCBYTE);\n  }\n  return CoderResult.UNDERFLOW;\n}"}
{"ids": "40192", "raw_code": "@Nullable public static NetworkParameters fromID(String id){\n  if (id.equals(ID_MAINNET)) {\n    return MainNetParams.get();\n  }\n else   if (id.equals(ID_TESTNET)) {\n    return TestNet3Params.get();\n  }\n else   if (id.equals(ID_UNITTESTNET)) {\n    return UnitTestParams.get();\n  }\n else   if (id.equals(ID_REGTEST)) {\n    return RegTestParams.get();\n  }\n else   if (id.equals(ID_ALPHANET)) {\n    return AlphaNetParams.get();\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "17877", "raw_code": "public void addCertificatesAndCRLs(CertStore certStore) throws CertStoreException, CMSException {\n  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));\n  crls.addAll(CMSUtils.getCRLsFromStore(certStore));\n}"}
{"ids": "63619", "raw_code": "private double findAngle(Point originPoint,Point targetPoint){\n  int x1=originPoint.x;\n  int y1=originPoint.y;\n  int x2=targetPoint.x;\n  int y2=targetPoint.y;\n  double angle=0.0;\n  double offset=0.0;\n  double sideA=x2 - x1;\n  double sideB=0.0;\n  if (y1 >= y2) {\n    sideB=y1 - y2;\n    offset=Math.toRadians(-90);\n  }\n else {\n    sideB=-(y2 - y1);\n    offset=Math.toRadians(90);\n  }\n  if (sideB == 0) {\n    return angle;\n  }\n  angle=Math.atan(sideA / sideB);\n  return angle + offset;\n}"}
{"ids": "14674", "raw_code": "void clearResourceIndex(String resourceTypeName){\n  Set resourceTypes=new HashSet();\n  resourceTypes.addAll(resourceIndices.keySet());\n  Iterator iter=resourceTypes.iterator();\n  while (iter.hasNext()) {\n    String resourceType=(String)iter.next();\n    if (resourceType.equalsIgnoreCase(resourceTypeName)) {\n      resourceIndices.remove(resourceType);\n      break;\n    }\n  }\n}"}
{"ids": "4379", "raw_code": "@Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){\n  Calendar calendar=getCalendar();\n  List<Period> periods=Lists.newArrayList();\n  dateTimeUnit=calendar.minusDays(dateTimeUnit,calendar.weekday(dateTimeUnit) - 1);\n  dateTimeUnit=calendar.minusDays(dateTimeUnit,357);\n  for (int i=0; i < 52; i++) {\n    periods.add(createPeriod(dateTimeUnit,calendar));\n    dateTimeUnit=calendar.plusWeeks(dateTimeUnit,1);\n  }\n  return periods;\n}"}
{"ids": "7052", "raw_code": "public boolean resetUnreadCounts(int aSection){\n  boolean retCode=false;\n  ArrayList<RoomSummary> summariesList=mSummaryListByGroupPosition.get(aSection);\n  if (null != summariesList) {\n    for (int summaryIdx=0; summaryIdx < summariesList.size(); summaryIdx++) {\n      retCode|=resetUnreadCount(aSection,summaryIdx);\n    }\n  }\n else {\n    Log.w(DBG_CLASS_NAME,\"## resetUnreadCounts(): section \" + aSection + \" was not found in the sections summary list\");\n  }\n  return retCode;\n}"}
{"ids": "23387", "raw_code": "public static void addCategory(LexiconCategory category){\n  categories.add(category);\n}"}
{"ids": "9346", "raw_code": "public static void cacheClientUserId(ConsumerBean consumerBean,Long internalId,String clientId){\n  cacheClientUserId(consumerBean.getShort_name(),internalId,clientId);\n}"}
{"ids": "39563", "raw_code": "protected void processEntity(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {\n  if (!XMLUtil.checkLiteral(reader,\"NTITY\")) {\n    XMLUtil.skipTag(reader);\n    return;\n  }\n  XMLUtil.skipWhitespace(reader,null);\n  char ch=XMLUtil.readChar(reader,'\\0');\n  if (ch == '%') {\n    XMLUtil.skipWhitespace(reader,null);\n    entityResolver=this.parameterEntityResolver;\n  }\n else {\n    reader.unread(ch);\n  }\n  String key=XMLUtil.scanIdentifier(reader);\n  XMLUtil.skipWhitespace(reader,null);\n  ch=XMLUtil.readChar(reader,'%');\n  String systemID=null;\n  String publicID=null;\nswitch (ch) {\ncase 'P':\n    if (!XMLUtil.checkLiteral(reader,\"UBLIC\")) {\n      XMLUtil.skipTag(reader);\n      return;\n    }\n  XMLUtil.skipWhitespace(reader,null);\npublicID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);\nXMLUtil.skipWhitespace(reader,null);\nsystemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);\nXMLUtil.skipWhitespace(reader,null);\nXMLUtil.readChar(reader,'%');\nbreak;\ncase 'S':\nif (!XMLUtil.checkLiteral(reader,\"YSTEM\")) {\nXMLUtil.skipTag(reader);\nreturn;\n}\nXMLUtil.skipWhitespace(reader,null);\nsystemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);\nXMLUtil.skipWhitespace(reader,null);\nXMLUtil.readChar(reader,'%');\nbreak;\ncase '\"':\ncase '\\'':\nreader.unread(ch);\nString value=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);\nentityResolver.addInternalEntity(key,value);\nXMLUtil.skipWhitespace(reader,null);\nXMLUtil.readChar(reader,'%');\nbreak;\ndefault :\nXMLUtil.skipTag(reader);\n}\nif (systemID != null) {\nentityResolver.addExternalEntity(key,publicID,systemID);\n}\n}"}
{"ids": "66439", "raw_code": "protected String doIt() throws Exception {\n  log.info(\"Selection=\" + p_Selection + \", DateInvoiced=\"+ p_DateInvoiced+ \", AD_Org_ID=\"+ p_AD_Org_ID+ \", C_BPartner_ID=\"+ p_C_BPartner_ID+ \", M_InOut_ID=\"+ p_M_InOut_ID+ \", DocAction=\"+ p_docAction+ \", Consolidate=\"+ p_ConsolidateDocument);\n  String sql=null;\n  if (p_Selection) {\n    sql=\"SELECT M_InOut.* FROM M_InOut, T_Selection \" + \"WHERE M_InOut.DocStatus='CO' AND M_InOut.IsSOTrx='Y' \" + \" AND M_InOut.M_InOut_ID = T_Selection.T_Selection_ID \"+ \" AND T_Selection.AD_PInstance_ID=? \"+ \"ORDER BY M_InOut.M_InOut_ID\";\n  }\n else {\n    sql=\"SELECT * FROM M_InOut o \" + \"WHERE DocStatus IN('CO','CL') AND IsSOTrx='Y'\";\n    if (p_AD_Org_ID != 0)     sql+=\" AND AD_Org_ID=?\";\n    if (p_C_BPartner_ID != 0)     sql+=\" AND C_BPartner_ID=?\";\n    if (p_M_InOut_ID != 0)     sql+=\" AND M_InOut_ID=?\";\n    sql+=\" AND EXISTS (SELECT * FROM M_InOutLine ol \" + \"WHERE o.M_InOut_ID=ol.M_InOut_ID AND ol.IsInvoiced='N') \" + \"ORDER BY M_InOut_ID\";\n  }\n  PreparedStatement pstmt=null;\n  try {\n    pstmt=DB.prepareStatement(sql,get_TrxName());\n    int index=1;\n    if (p_Selection) {\n      pstmt.setInt(index,getAD_PInstance_ID());\n    }\n else {\n      if (p_AD_Org_ID != 0)       pstmt.setInt(index++,p_AD_Org_ID);\n      if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID);\n      if (p_M_InOut_ID != 0)       pstmt.setInt(index++,p_M_InOut_ID);\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.SEVERE,sql,e);\n  }\n  return generate(pstmt);\n}"}
{"ids": "6739", "raw_code": "public static S2CellId fromFaceIJ(int face,int i,int j){\n  long n[]={0,face << (POS_BITS - 33)};\n  int bits=(face & SWAP_MASK);\n  for (int k=7; k >= 0; --k) {\n    bits=getBits(n,i,j,k,bits);\n  }\n  S2CellId s=new S2CellId((((n[1] << 32) + n[0]) << 1) + 1);\n  return s;\n}"}
{"ids": "37181", "raw_code": "private void updateActions(final INaviProject project){\n  m_loadProjectAction.setEnabled(!project.isLoaded());\n  if (m_addAddressSpaceAction != null) {\n    m_addAddressSpaceAction.setEnabled(project.isLoaded());\n  }\n  m_searchViewAction.setEnabled(project.isLoaded());\n  m_forwardAction.setEnabled(project.isLoaded());\n}"}
{"ids": "10011", "raw_code": "public boolean truncateTooLongNumber(PhoneNumber number){\n  if (isValidNumber(number)) {\n    return true;\n  }\n  PhoneNumber numberCopy=new PhoneNumber();\n  numberCopy.mergeFrom(number);\n  long nationalNumber=number.getNationalNumber();\n  do {\n    nationalNumber/=10;\n    numberCopy.setNationalNumber(nationalNumber);\n    if (isPossibleNumberWithReason(numberCopy) == ValidationResult.TOO_SHORT || nationalNumber == 0) {\n      return false;\n    }\n  }\n while (!isValidNumber(numberCopy));\n  number.setNationalNumber(nationalNumber);\n  return true;\n}"}
{"ids": "50156", "raw_code": "public static boolean isWithinTimeComparisonEpsilon(long timeMicros){\n  long now=Utils.getSystemNowMicrosUtc();\n  return Math.abs(timeMicros - now) < timeComparisonEpsilon;\n}"}
{"ids": "83914", "raw_code": "public Optional<Histogram> histogram(){\n  return Optional.empty();\n}"}
{"ids": "65783", "raw_code": "private JLabel createWeekday(String title){\n  JLabel label=new JLabel(title);\n  label.setHorizontalAlignment(SwingConstants.CENTER);\n  label.setHorizontalTextPosition(SwingConstants.CENTER);\n  label.setRequestFocusEnabled(false);\n  label.setBackground(AdempierePLAF.getPrimary1());\n  label.setForeground(Color.white);\n  label.setOpaque(true);\n  return label;\n}"}
{"ids": "54066", "raw_code": "default Path append(String relPath){\n  return append(Path.parse(relPath));\n}"}
{"ids": "44690", "raw_code": "public static int indexOf(String value,String substring){\n  return value != null && substring != null ? value.indexOf(substring) : -1;\n}"}
{"ids": "41614", "raw_code": "public int readSI32() throws IOException {\n  synchBits();\n  int b0=in.read();\n  if (b0 < 0) {\n    throw new IOException(\"Unexpected end of input\");\n  }\n  int b1=in.read();\n  if (b1 < 0) {\n    throw new IOException(\"Unexpected end of input\");\n  }\n  int b2=in.read();\n  if (b2 < 0) {\n    throw new IOException(\"Unexpected end of input\");\n  }\n  byte[] aByte=new byte[1];\n  int count=in.read(aByte);\n  if (count < 1) {\n    throw new IOException(\"Unexpected end of input\");\n  }\n  bytesRead+=4;\n  return (int)((aByte[0] * 256 * 256* 256) + (b2 * 256 * 256) + (b1 * 256)+ b0);\n}"}
{"ids": "25248", "raw_code": "public void format(long inDate,StringBuilder buffer){\n  buffer.append(format(inDate));\n}"}
{"ids": "13511", "raw_code": "public Profiler clearResults(){\n  lapped.clear();\n  return this;\n}"}
{"ids": "28142", "raw_code": "@Override public GraphQuery has(final String key,final Object value){\n  criteria.add(new Has(key,value));\n  return this;\n}"}
{"ids": "14841", "raw_code": "public void addAttributeValue(Principal principal,Guid guid,String name,String value) throws UMSException {\n  modifyAttributeValue(ModificationType.ADD,principal,guid,name,value);\n}"}
{"ids": "78028", "raw_code": "public static void copyStream(InputStream inputStream,OutputStream outputStream){\n  if (inputStream != null && outputStream != null) {\n    try {\n      int length=-1;\n      byte[] buffer=new byte[Constant.Capacity.BYTES_PER_MB];\n      while ((length=inputStream.read(buffer,0,buffer.length)) != -1) {\n        outputStream.write(buffer,0,length);\n        outputStream.flush();\n      }\n    }\n catch (    Exception e) {\n      throw new FileUtilException(e);\n    }\n  }\n}"}
{"ids": "35022", "raw_code": "private void printTypeMembers(List<? extends Element> members,List<TypeElement> innerClass){\n  for (  Element element : members) {\n    if (isPublicOrProtected(element)) {\n      printMember(element,innerClass);\n    }\n  }\n}"}
{"ids": "72538", "raw_code": "private void initializeBasicVariables(final int startColumn){\n  basicVariables=new int[getWidth() - 1];\n  basicRows=new int[getHeight()];\n  Arrays.fill(basicVariables,-1);\n  for (int i=startColumn; i < getWidth() - 1; i++) {\n    Integer row=findBasicRow(i);\n    if (row != null) {\n      basicVariables[i]=row;\n      basicRows[row]=i;\n    }\n  }\n}"}
{"ids": "87004", "raw_code": "private void attachHeader(SIPHeader h){\n  if (h == null)   throw new IllegalArgumentException(\"null header!\");\n  try {\n    if (h instanceof SIPHeaderList) {\n      SIPHeaderList<?> hl=(SIPHeaderList<?>)h;\n      if (hl.isEmpty()) {\n        return;\n      }\n    }\n    attachHeader(h,false,false);\n  }\n catch (  SIPDuplicateHeaderException ex) {\n  }\n}"}
{"ids": "12887", "raw_code": "public String phonemise(String text,String pos,StringBuilder g2pMethod){\n  String result=userdictLookup(text,pos);\n  if (result != null) {\n    g2pMethod.append(\"userdict\");\n    return result;\n  }\n  result=lexiconLookup(text,pos);\n  if (result != null) {\n    g2pMethod.append(\"lexicon\");\n    return result;\n  }\n  String normalised=MaryUtils.normaliseUnicodeLetters(text,getLocale());\n  if (!normalised.equals(text)) {\n    result=userdictLookup(normalised,pos);\n    if (result != null) {\n      g2pMethod.append(\"userdict\");\n      return result;\n    }\n    result=lexiconLookup(normalised,pos);\n    if (result != null) {\n      g2pMethod.append(\"lexicon\");\n      return result;\n    }\n  }\n  String phones=lts.predictPronunciation(text);\n  result=lts.syllabify(phones);\n  if (result != null) {\n    g2pMethod.append(\"rules\");\n    return result;\n  }\n  return null;\n}"}
{"ids": "74646", "raw_code": "public static void stop(int exit_code){\n  System.exit(exit_code);\n}"}
{"ids": "72532", "raw_code": "private FieldODEStateAndDerivative<Decimal64> state(double t){\n  return new FieldODEStateAndDerivative<>(zero.add(t),new Decimal64[0],new Decimal64[0]);\n}"}
{"ids": "9016", "raw_code": "private Spannable highlightHashtags(Spannable text){\n  if (text == null) {\n    return null;\n  }\n  final Matcher matcher=PATTERN_HASHTAGS.matcher(text);\n  while (matcher.find()) {\n    final int start=matcher.start(1);\n    final int end=matcher.end(1);\n    text.setSpan(new ForegroundColorSpan(mHighlightColor),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n    text.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n  }\n  return text;\n}"}
{"ids": "46853", "raw_code": "private static void checkForNullElement(Object[] arg,String argName){\n  if ((arg == null) || (arg.length == 0)) {\n    throw new IllegalArgumentException(\"Argument \" + argName + \"[] cannot be null or empty.\");\n  }\n  for (int i=0; i < arg.length; i++) {\n    if (arg[i] == null) {\n      throw new IllegalArgumentException(\"Argument's element \" + argName + \"[\"+ i+ \"] cannot be null.\");\n    }\n  }\n}"}
{"ids": "44209", "raw_code": "public InputStream executeDownload(String url,String cookie) throws IOException {\n  String[][] headerParams=new String[][]{{\"Cookie\",cookie},{\"User-Agent\",\"AndroidDownloadManager/6.0.1 (Linux; U; Android 6.0.1; Nexus 6P Build/MTC19T)\"}};\n  HttpEntity httpEntity=executeGet(url,null,headerParams);\n  return httpEntity.getContent();\n}"}
{"ids": "81852", "raw_code": "public Image flipImageVertically(Image image,boolean maintainOpacity){\n  int[] rgb=image.getRGB();\n  int[] newRGB=new int[rgb.length];\n  int width=image.getWidth();\n  int height=image.getHeight();\n  for (int y=0; y < height; y++) {\n    for (int x=0; x < width; x++) {\n      newRGB[x + (height - y - 1) * width]=rgb[x + y * width];\n    }\n  }\n  return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity);\n}"}
{"ids": "76829", "raw_code": "public MorfologikFilterFactory(Map<String,String> args){\n  super(args);\n  final String DICTIONARY_RESOURCE_ATTRIBUTE=\"dictionary-resource\";\n  String dictionaryResource=get(args,DICTIONARY_RESOURCE_ATTRIBUTE);\n  if (dictionaryResource != null && !dictionaryResource.isEmpty()) {\n    throw new IllegalArgumentException(\"The \" + DICTIONARY_RESOURCE_ATTRIBUTE + \" attribute is no \"+ \"longer supported. Use the '\"+ DICTIONARY_ATTRIBUTE+ \"' attribute instead (see LUCENE-6833).\");\n  }\n  resourceName=get(args,DICTIONARY_ATTRIBUTE);\n  if (!args.isEmpty()) {\n    throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n  }\n}"}
{"ids": "2576", "raw_code": "public static String padLeft(String str,int totalChars){\n  if (str == null)   str=\"null\";\n  StringBuffer sb=new StringBuffer();\n  for (int i=0; i < totalChars - str.length(); i++) {\n    sb.append(\" \");\n  }\n  sb.append(str);\n  return sb.toString();\n}"}
{"ids": "48291", "raw_code": "public int hashCode(){\n  int myhash=37 + policyIdentifier.hashCode();\n  myhash=37 * myhash + policyQualifiers.hashCode();\n  return myhash;\n}"}
{"ids": "44177", "raw_code": "public UnixTerminal() throws IOException {\n  this(System.in,System.out,Charset.defaultCharset());\n}"}
{"ids": "55466", "raw_code": "private void checkStreams(){\n  if ((System.currentTimeMillis() - lastChecked) / 1000 < CHECK_DELAY) {\n    return;\n  }\n  lastChecked=System.currentTimeMillis();\n  Set<StreamInfo> remove=new HashSet<>();\n  for (  StreamInfo info : data) {\n    if (!info.isValid() || !info.getOnline()) {\n      remove.add(info);\n    }\n  }\n  for (  StreamInfo info : remove) {\n    data.remove(info);\n    itemRemoved(info);\n  }\n  if (remove.isEmpty()) {\n    listDataChanged();\n  }\n}"}
{"ids": "3991", "raw_code": "public void addPriorityPackage(String pkg){\n  if (_priorityPackages == null)   _priorityPackages=new String[0];\n  int oldLength=_priorityPackages.length;\n  String[] newPkgs=new String[oldLength + 1];\n  System.arraycopy(_priorityPackages,0,newPkgs,0,oldLength);\n  if (!pkg.endsWith(\".\"))   pkg=pkg + '.';\n  newPkgs[oldLength]=pkg;\n  _priorityPackages=newPkgs;\n}"}
{"ids": "85231", "raw_code": "public static String verifyCertificate(X509Certificate cert,Collection<CRL> crls,Calendar calendar){\n  if (SignUtils.hasUnsupportedCriticalExtension(cert))   return \"Has unsupported critical extension\";\n  try {\n    cert.checkValidity(calendar.getTime());\n  }\n catch (  Exception e) {\n    return e.getMessage();\n  }\n  if (crls != null) {\n    for (    CRL crl : crls) {\n      if (crl.isRevoked(cert))       return \"Certificate revoked\";\n    }\n  }\n  return null;\n}"}
{"ids": "32757", "raw_code": "public static void expand(){\n  String[] st=new String[L];\n  int i;\n  for (i=0; i < R; i++)   st[i]=\"\" + (char)i;\n  st[i++]=\"\";\n  int codeword=BinaryStdIn.readInt(W);\n  if (codeword == R)   return;\n  String val=st[codeword];\n  while (true) {\n    BinaryStdOut.write(val);\n    codeword=BinaryStdIn.readInt(W);\n    if (codeword == R)     break;\n    String s=st[codeword];\n    if (i == codeword)     s=val + val.charAt(0);\n    if (i < L)     st[i++]=val + s.charAt(0);\n    val=s;\n  }\n  BinaryStdOut.close();\n}"}
{"ids": "36460", "raw_code": "@Override public boolean isRotateEdgeLabels(){\n  return graphCreator.isRotatingEdgeLabels();\n}"}
{"ids": "44463", "raw_code": "public static ResponseCode createExtension(String name){\n  StringBuffer buffer=new StringBuffer(name.length() + 2);\n  if (!name.startsWith(\"X\")) {\n    buffer.append('X');\n  }\n  buffer.append(name);\n  return new ResponseCode(buffer.toString());\n}"}
{"ids": "13879", "raw_code": "public void deleteServers(Set servers) throws AMConsoleException {\n  if (servers.contains(SystemProperties.getServerInstanceName())) {\n    throw new AMConsoleException(getLocalizedString(\"exception.cannot.delete.this.server.instance\"));\n  }\n  String serverName=null;\n  try {\n    if ((servers != null) && !servers.isEmpty()) {\n      SSOToken token=getUserSSOToken();\n      for (Iterator i=servers.iterator(); i.hasNext(); ) {\n        serverName=(String)i.next();\n        String[] param={serverName};\n        logEvent(\"ATTEMPT_DELETE_SERVER\",param);\n        ServerConfiguration.deleteServerInstance(token,serverName);\n        logEvent(\"SUCCEED_DELETE_SERVER\",param);\n      }\n    }\n  }\n catch (  SMSException e) {\n    String[] params={serverName,e.getMessage()};\n    logEvent(\"SMS_EXCEPTION_DELETE_SERVER\",params);\n    throw new AMConsoleException(getErrorString(e));\n  }\ncatch (  SSOException e) {\n    String[] params={serverName,e.getMessage()};\n    logEvent(\"SSO_EXCEPTION_DELETE_SERVER\",params);\n    throw new AMConsoleException(getErrorString(e));\n  }\n}"}
{"ids": "69477", "raw_code": "public boolean add(terminal sym) throws internal_error {\n  boolean result;\n  not_null(sym);\n  result=_elements.get(sym.index());\n  if (!result)   _elements.set(sym.index());\n  return result;\n}"}
{"ids": "78980", "raw_code": "private void createRecursivly(String path) throws KeeperException, InterruptedException {\n  try {\n    if (zk.exists(path,true) == null && path.length() > 0) {\n      String temp=path.substring(0,path.lastIndexOf(File.separator));\n      createRecursivly(temp);\n      zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n else {\n      return;\n    }\n  }\n catch (  KeeperException e) {\n    throw e;\n  }\ncatch (  InterruptedException e) {\n    throw e;\n  }\n}"}
{"ids": "35874", "raw_code": "public void stopRecording(){\n  mHandler.sendMessage(mHandler.obtainMessage(MSG_STOP_RECORDING));\n  mHandler.sendMessage(mHandler.obtainMessage(MSG_QUIT));\n}"}
{"ids": "79162", "raw_code": "private void writeTag(String name,Tag tag) throws IOException {\n  TagType type=tag.getType();\n  byte[] nameBytes=name.getBytes(StandardCharsets.UTF_8);\n  if (type == TagType.END) {\n    throw new IOException(\"Named TAG_End not permitted.\");\n  }\n  os.writeByte(type.getId());\n  os.writeShort(nameBytes.length);\n  os.write(nameBytes);\n  writeTagPayload(tag);\n}"}
{"ids": "46995", "raw_code": "public int hashCode(){\n  if (myhash == -1) {\n    if (timestamp == null) {\n      myhash=signerCertPath.hashCode();\n    }\n else {\n      myhash=signerCertPath.hashCode() + timestamp.hashCode();\n    }\n  }\n  return myhash;\n}"}
{"ids": "67052", "raw_code": "public TypeVariableBV typeVariable(){\n  int id=typeVariableList.size();\n  typeVariableList.add(null);\n  TypeVariableBV result=new TypeVariableBV(id,this);\n  typeVariableList.set(id,result);\n  return result;\n}"}
{"ids": "15176", "raw_code": "public int process(Callback[] callbacks,int state) throws AuthLoginException {\n  initAuthConfig();\n  X509Certificate[] allCerts=null;\n  try {\n    HttpServletRequest servletRequest=getHttpServletRequest();\n    if (servletRequest != null) {\n      allCerts=(X509Certificate[])servletRequest.getAttribute(\"javax.servlet.request.X509Certificate\");\n      if (allCerts == null || allCerts.length == 0) {\n        debug.message(\"Certificate: checking for cert passed in the URL.\");\n        if (!portal_gw_cert_auth_enabled) {\n          debug.error(\"Certificate: cert passed \" + \"in URL not enabled for this client\");\n          throw new AuthLoginException(amAuthCert,\"noURLCertAuth\",null);\n        }\n        thecert=getPortalStyleCert(servletRequest);\n        allCerts=new X509Certificate[]{thecert};\n      }\n else {\n        if (portal_gw_cert_auth_enabled && portal_gw_cert_preferred) {\n          thecert=getPortalStyleCert(servletRequest);\n          allCerts=new X509Certificate[]{thecert};\n        }\n else {\n          if (debug.messageEnabled()) {\n            debug.message(\"Certificate: got all certs from \" + \"HttpServletRequest = {}\",allCerts.length);\n          }\n          thecert=allCerts[0];\n        }\n      }\n    }\n else {\n      thecert=sendCallback();\n    }\n    if (thecert == null) {\n      debug.message(\"Certificate: no cert passed in.\");\n      throw new AuthLoginException(amAuthCert,\"noCert\",null);\n    }\n    getTokenFromCert(thecert);\n    storeUsernamePasswd(userTokenId,null);\n    if (debug.messageEnabled()) {\n      debug.message(\"in Certificate. userTokenId=\" + userTokenId + \" from getTokenFromCert\");\n    }\n  }\n catch (  AuthLoginException e) {\n    setFailureID(userTokenId);\n    debug.error(\"Certificate:  exiting validate with exception\",e);\n    throw new AuthLoginException(amAuthCert,\"noCert\",null);\n  }\n  if (debug.messageEnabled()) {\n    debug.message(\"Got client cert =\\n\" + thecert.toString());\n  }\n  if (amAuthCert_chkCertInLDAP.equalsIgnoreCase(\"false\") && amAuthCert_chkCRL.equalsIgnoreCase(\"false\") && !ocspEnabled) {\n    return ISAuthConstants.LOGIN_SUCCEED;\n  }\n  if (ldapParam == null) {\n    setLdapStoreParam();\n  }\n  if (amAuthCert_chkCertInLDAP.equalsIgnoreCase(\"true\")) {\n    X509Certificate ldapcert=AMCertStore.getRegisteredCertificate(ldapParam,thecert,amAuthCert_chkAttrCertInLDAP);\n    if (ldapcert == null) {\n      debug.error(\"X509Certificate: getRegCertificate is null\");\n      setFailureID(userTokenId);\n      throw new AuthLoginException(amAuthCert,\"CertNoReg\",null);\n    }\n  }\n  int ret=doJCERevocationValidation(allCerts);\n  if (ret != ISAuthConstants.LOGIN_SUCCEED) {\n    debug.error(\"X509Certificate:CRL / OCSP verify failed.\");\n    setFailureID(userTokenId);\n    throw new AuthLoginException(amAuthCert,\"CertVerifyFailed\",null);\n  }\n  return ISAuthConstants.LOGIN_SUCCEED;\n}"}
{"ids": "7182", "raw_code": "public void add(SelectClauseElementRaw element){\n  selectClauseElements.add(element);\n}"}
{"ids": "5746", "raw_code": "public static boolean isNormal(GeoTimeSerie gts,int buckets,double pcterror,boolean bessel){\n  if (0 == gts.values) {\n    return true;\n  }\n  if (TYPE.DOUBLE != gts.type && TYPE.LONG != gts.type) {\n    return false;\n  }\n  double[] musigma=musigma(gts,bessel);\n  double mu=musigma[0];\n  double sigma=musigma[1];\n  if (0.0D == sigma) {\n    return false;\n  }\n  double[] bounds=SAXUtils.getBounds(buckets);\n  int[] counts=new int[bounds.length + 1];\n  for (int i=0; i < gts.values; i++) {\n    double v=((double)GTSHelper.valueAtIndex(gts,i) - mu) / sigma;\n    int insertion=Arrays.binarySearch(bounds,v);\n    if (insertion >= 0) {\n      counts[insertion]++;\n    }\n else {\n      counts[-(1 + insertion)]++;\n    }\n  }\n  double mean=gts.values / counts.length;\n  for (int i=0; i < counts.length; i++) {\n    if (Math.abs(1.0D - (counts[i] / mean)) > pcterror) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "69049", "raw_code": "public void loadFromProperties(Properties properties){\n  projected=StringUtil.getBooleanValue(properties,\"ProjectionInfo.Projected\",false,true);\n  tiePoint=StringUtil.getDoubleArray(properties,\"ProjectionInfo.TiePoint\",null,true);\n  scale=StringUtil.getDoubleArray(properties,\"ProjectionInfo.Scale\",null,true);\n  globe=StringUtil.getStringValue(properties,\"ProjectionInfo.Globe\",null,true);\n  rasterWidth=StringUtil.getIntegerValue(properties,\"ProjectionInfo.RasterWidth\",true,0,true);\n  rasterLength=StringUtil.getIntegerValue(properties,\"ProjectionInfo.RasterLength\",true,0,true);\n  datumCode=StringUtil.getIntegerValue(properties,\"ProjectionInfo.DatumCode\",true,0,false);\n  ellipsoidCode=StringUtil.getIntegerValue(properties,\"ProjectionInfo.DatumCode\",true,0,false);\n  semiMajorAxis=StringUtil.getDoubleValue(properties,\"ProjectionInfo.SemiMajorAxis\",true,Double.NaN,false);\n  semiMinorAxis=StringUtil.getDoubleValue(properties,\"ProjectionInfo.SemiMinorAxis\",true,Double.NaN,false);\n  inverseFlattening=StringUtil.getDoubleValue(properties,\"ProjectionInfo.InverseFlattening\",false,Double.NaN,false);\n  gcsPrimeMeridianLon=StringUtil.getDoubleValue(properties,\"ProjectionInfo.GCSPrimeMeridianLon\",false,Double.NaN,false);\n  projCode=StringUtil.getIntegerValue(properties,\"ProjectionInfo.ProjectionCode\",true,0,false);\n  pcsCode=StringUtil.getIntegerValue(properties,\"ProjectionInfo.ProjectionCoordinateSystemCode\",true,0,false);\n  coordTransformCode=StringUtil.getIntegerValue(properties,\"ProjectionInfo.CoordTransformCode\",true,0,false);\n  stdParallel1=StringUtil.getDoubleValue(properties,\"ProjectionInfo.StdParallel1\",false,Double.NaN,false);\n  poleLat=(int)(Math.signum(stdParallel1) * 90);\n  stdParallel2=StringUtil.getDoubleValue(properties,\"ProjectionInfo.StdParallel1\",false,Double.NaN,false);\n  naturalOriginLon=StringUtil.getDoubleValue(properties,\"ProjectionInfo.NaturalOriginLon\",false,Double.NaN,false);\n  naturalOriginLat=StringUtil.getDoubleValue(properties,\"ProjectionInfo.NaturalOriginLat\",false,Double.NaN,false);\n  falseOriginLon=StringUtil.getDoubleValue(properties,\"ProjectionInfo.FalseOriginLon\",false,Double.NaN,false);\n  falseOriginLat=StringUtil.getDoubleValue(properties,\"ProjectionInfo.FalseOriginLat\",false,Double.NaN,false);\n  falseEasting=StringUtil.getDoubleValue(properties,\"ProjectionInfo.FalseEasting\",false,Double.NaN,false);\n  falseNorthing=StringUtil.getDoubleValue(properties,\"ProjectionInfo.FalseNorthing\",false,Double.NaN,false);\n  centerEasting=StringUtil.getDoubleValue(properties,\"ProjectionInfo.CenterEasting\",false,Double.NaN,false);\n  centerNorthing=StringUtil.getDoubleValue(properties,\"ProjectionInfo.CenterNorthing\",false,Double.NaN,false);\n  centerLon=StringUtil.getDoubleValue(properties,\"ProjectionInfo.CenterLon\",false,Double.NaN,false);\n  centerLat=StringUtil.getDoubleValue(properties,\"ProjectionInfo.CenterLat\",false,Double.NaN,false);\n  scaleAtNaturalOrigin=StringUtil.getDoubleValue(properties,\"ProjectionInfo.ScaleAtNaturalOrigin\",false,Double.NaN,false);\n  scaleAtCenter=StringUtil.getDoubleValue(properties,\"ProjectionInfo.ScaleAtCenter\",false,Double.NaN,false);\n  azimuth=StringUtil.getDoubleValue(properties,\"ProjectionInfo.Azimuth\",false,Double.NaN,false);\n  straightVertPoleLon=StringUtil.getDoubleValue(properties,\"ProjectionInfo.StraightVertPoleLon\",false,Double.NaN,false);\n  gcsCitation=StringUtil.getStringValue(properties,\"ProjectionInfo.GCSCitation\",null,false);\n  pcsCitation=StringUtil.getStringValue(properties,\"ProjectionInfo.PCSCitation\",null,false);\n  projLinearUnits=StringUtil.getStringValue(properties,\"ProjectionInfo.ProjLinearUnits\",\"meter\",false);\n  if (coordTransformCode == GeoKey.Code_Undefined) {\n    String citation=(pcsCitation == null ? \"\" : pcsCitation.toLowerCase());\n    if (citation.contains(\"mercator\") && (citation.contains(\"web\") || citation.contains(\"pseudo\") || citation.contains(\"global\"))) {\n      coordTransformCode=GeoKey.Code_CT_Mercator;\n      if (Double.isNaN(naturalOriginLon))       naturalOriginLon=0;\n      if (Double.isNaN(falseEasting))       falseEasting=0;\n      if (Double.isNaN(falseNorthing))       falseNorthing=0;\n      if (citation.contains(\"auxiliary\") && citation.contains(\"sphere\")) {\n        if (!Double.isNaN(semiMajorAxis))         semiMinorAxis=semiMajorAxis;\n else {\n          semiMajorAxis=SEMI_MAJOR_AXIS[0];\n          semiMinorAxis=SEMI_MINOR_AXIS[0];\n        }\n      }\n    }\n  }\n}"}
{"ids": "63483", "raw_code": "public ShowProgress(){\n  start=last=System.currentTimeMillis();\n}"}
{"ids": "3181", "raw_code": "public static RepositoryExpression parseRepositoryExpression(String toParse) throws ParseError {\n  StreamTokenizer t=Parser.tokenize(toParse);\n  Term creator=Parser.parseTerm(t);\n  List<Operation> operations=Parser.parseOperationList(t);\n  RepositoryExpression ex=new RepositoryExpression(creator);\n  if (!operations.isEmpty()) {\n    throw new ParseError(\"Expression must represent a simple repository, e.g. 'internal(revision=3)'.\");\n  }\n  return ex;\n}"}
{"ids": "67528", "raw_code": "public void addSection(SourceSection section){\n  sections.add(section);\n}"}
{"ids": "75048", "raw_code": "private int[] versionParts(String version){\n  String[] parts=version.split(\"\\\\.\");\n  int[] p=new int[3];\n  for (int i=0; i < 3; i++) {\n    int pi;\n    if (i < parts.length) {\n      p[i]=Integer.parseInt(parts[i]);\n    }\n else {\n      p[i]=-1;\n    }\n  }\n  return p;\n}"}
{"ids": "86641", "raw_code": "public static boolean approxEquals(final double a,final double b,final double tolerance){\n  if (Double.isNaN(a) || Double.isNaN(b)) {\n    return false;\n  }\n  if (a == b) {\n    return true;\n  }\n  if (Double.isInfinite(a) || Double.isInfinite(b)) {\n    return false;\n  }\n  if (a >= (b - tolerance) && a <= (b + tolerance)) {\n    return true;\n  }\n  return false;\n}"}
{"ids": "85404", "raw_code": "public static Map<String,Object> loadJsonModel(File jsFile){\n  try {\n    Map<String,Object> model=JavaScriptResolver.readJsonModel(jsFile);\n    if (model == null) {\n      throw new CompilerErrorException(\"Can't find metamodel definition in \" + jsFile.getAbsolutePath());\n    }\n    if (!model.containsKey(\"$mod-bin\")) {\n      throw new CeylonRunJsException(\"The JavaScript module \" + jsFile + \" is not compatible with the current version of ceylon-js\");\n    }\n    return model;\n  }\n catch (  IOException ex) {\n    throw new CompilerErrorException(\"Error loading model from \" + jsFile);\n  }\n}"}
{"ids": "86843", "raw_code": "static String[] splitLine(final String line){\n  final int ix0=line.indexOf('#');\n  final int ix=ix0 == -1 ? line.length() : ix0;\n  final String lessComment=line.substring(0,ix);\n  if (lessComment.matches(\"^\\\\s*$\")) {\n    return null;\n  }\n  return lessComment.split(\"\\\\s+\");\n}"}
{"ids": "22099", "raw_code": "private List<Volume> createVolumeData(String name,int numVolumes){\n  List<Volume> volumes=new ArrayList<Volume>();\n  URI cgUri=createBlockConsistencyGroup(name + \"-cg\");\n  for (int i=1; i <= numVolumes; i++) {\n    Volume volume=new Volume();\n    URI volumeURI=URIUtil.createId(Volume.class);\n    testVolumeURIs.add(volumeURI);\n    volume.setId(volumeURI);\n    volume.setLabel(name + i);\n    volume.setConsistencyGroup(cgUri);\n    _dbClient.createObject(volume);\n  }\n  return volumes;\n}"}
{"ids": "68550", "raw_code": "private static <T>T hashMapToObject(LinkedHashMap map,Class<T> type){\n  try {\n    return stringToObject(mapper.writeValueAsString(map),type);\n  }\n catch (  IOException e) {\n    log.warn(\"Could not create a object of the class \" + type.getName() + \" out of the map \"+ map.toString()+ \" :\"+ e.getMessage());\n    return null;\n  }\n}"}
{"ids": "70705", "raw_code": "private void deleteSMS(String cmd,String search){\n  int nbDeleted=-2;\n  if (cmd.equals(\"all\")) {\n    nbDeleted=mSmsManager.deleteAllSms();\n  }\n else   if (cmd.equals(\"sent\")) {\n    nbDeleted=mSmsManager.deleteSentSms();\n  }\n else   if (cmd.startsWith(\"last\")) {\n    Integer number=Tools.parseInt(search);\n    if (number == null) {\n      number=1;\n    }\n    if (cmd.equals(\"last\")) {\n      nbDeleted=mSmsManager.deleteLastSms(number);\n    }\n else     if (cmd.equals(\"lastin\")) {\n      nbDeleted=mSmsManager.deleteLastInSms(number);\n    }\n else     if (cmd.equals(\"lastout\")) {\n      nbDeleted=mSmsManager.deleteLastOutSms(number);\n    }\n else {\n      send(R.string.chat_del_sms_error);\n    }\n  }\n else   if (cmd.equals(\"contact\") && search != null) {\n    ArrayList<Contact> contacts=ContactsManager.getMatchingContacts(sContext,search);\n    if (contacts.size() > 1) {\n      StringBuilder sb=new StringBuilder(getString(R.string.chat_specify_details));\n      sb.append(Tools.LineSep);\n      for (      Contact contact : contacts) {\n        sb.append(contact.name);\n        sb.append(Tools.LineSep);\n      }\n      send(sb.toString());\n    }\n else     if (contacts.size() == 1) {\n      Contact contact=contacts.get(0);\n      send(R.string.chat_del_sms_from,contact.name);\n      nbDeleted=mSmsManager.deleteSmsByContact(contact.rawIds);\n    }\n else {\n      send(R.string.chat_no_match_for,search);\n    }\n  }\n else   if (cmd.equals(\"number\") && search != null) {\n    send(R.string.chat_del_sms_from,search);\n    nbDeleted=mSmsManager.deleteSmsByNumber(search);\n    if (nbDeleted <= 0) {\n      send(R.string.chat_no_match_for,search);\n    }\n  }\n else {\n    send(R.string.chat_del_sms_syntax);\n  }\n  if (nbDeleted >= 0) {\n    send(R.string.chat_del_sms_nb,nbDeleted);\n  }\n else   if (nbDeleted == -1) {\n    send(R.string.chat_del_sms_error);\n  }\n}"}
{"ids": "42725", "raw_code": "private static BlocksRemoveInfo isStartBlock(BlockNode remBlock,BlockNode startBlock){\n  List<InsnNode> remInsns=remBlock.getInstructions();\n  List<InsnNode> startInsns=startBlock.getInstructions();\n  if (remInsns.size() < startInsns.size()) {\n    return null;\n  }\n  int startPos=remInsns.size() - startInsns.size();\n  int endPos=0;\n  if (!checkInsns(remInsns,startInsns,startPos,null)) {\n    if (checkInsns(remInsns,startInsns,0,null)) {\n      startPos=0;\n      endPos=startInsns.size();\n    }\n else {\n      boolean found=false;\n      for (int i=1; i < startPos; i++) {\n        if (checkInsns(remInsns,startInsns,i,null)) {\n          startPos=i;\n          endPos=startInsns.size() + i;\n          found=true;\n          break;\n        }\n      }\n      if (!found) {\n        return null;\n      }\n    }\n  }\n  BlocksPair startPair=new BlocksPair(remBlock,startBlock);\n  BlocksRemoveInfo removeInfo=new BlocksRemoveInfo(startPair);\n  removeInfo.setStartSplitIndex(startPos);\n  removeInfo.setEndSplitIndex(endPos);\n  if (endPos != 0) {\n    removeInfo.setEnd(startPair);\n  }\n  if (!checkInsns(remInsns,startInsns,startPos,removeInfo)) {\n    return null;\n  }\n  return removeInfo;\n}"}
{"ids": "25837", "raw_code": "public boolean checkError(){\n  return pw.checkError();\n}"}
{"ids": "85169", "raw_code": "public List<PdfDocument> splitBySize(long size){\n  List<PageRange> splitRanges=new ArrayList<>();\n  int currentPage=1;\n  int numOfPages=pdfDocument.getNumberOfPages();\n  while (currentPage <= numOfPages) {\n    PageRange nextRange=getNextRange(currentPage,numOfPages,size);\n    splitRanges.add(nextRange);\n    List<Integer> allPages=nextRange.getAllPages();\n    currentPage=(int)allPages.get(allPages.size() - 1) + 1;\n  }\n  return extractPageRanges(splitRanges);\n}"}
{"ids": "14657", "raw_code": "private boolean validateAuthSchemes(Set authSchemeSet) throws PolicyException {\n  if (authSchemeSet.isEmpty()) {\n    String args[]={AUTH_SCHEME};\n    throw new PolicyException(ResBundleUtils.rbName,\"property_does_not_allow_empty_values\",args,null);\n  }\n  Iterator authSchemeSetIter=authSchemeSet.iterator();\n  authSchemes.clear();\n  while (authSchemeSetIter.hasNext()) {\n    try {\n      String authScheme=(String)authSchemeSetIter.next();\n      authSchemes.add(authScheme);\n    }\n catch (    ClassCastException e) {\n      String args[]={AUTH_SCHEME};\n      throw new PolicyException(ResBundleUtils.rbName,\"property_is_not_a_String\",args,null);\n    }\n  }\n  return true;\n}"}
{"ids": "85336", "raw_code": "public static UUID fromUUIDAsURNStringToUUID(String UUIDasURN){\n  if (!UUIDasURN.startsWith(UUIDHelper.UUID_as_a_URN_PREFIX)) {\n    IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();\n    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.UUID_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format(\"Input UUID %s \" + \"does not start with %s\",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX));\n    throw new IMFException(String.format(\"Input UUID %s does not start with %s\",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX),imfErrorLogger);\n  }\n  return UUID.fromString(UUIDasURN.split(UUIDHelper.UUID_as_a_URN_PREFIX)[1]);\n}"}
{"ids": "32865", "raw_code": "public String readLine(){\n  String line;\n  try {\n    line=scanner.nextLine();\n  }\n catch (  NoSuchElementException e) {\n    line=null;\n  }\n  return line;\n}"}
{"ids": "36507", "raw_code": "public static GradientPaint makeRedPaint(final double width,final double height){\n  return new GradientPaint(0f,0f,new Color(200,50,50),(float)width / 2,(float)height / 2,new Color(255,100,100),true);\n}"}
{"ids": "45573", "raw_code": "public static List<String> matchNumbers(String text){\n  String pattern=\"\\\\d+[0-9]+\";\n  Pattern pat=Pattern.compile(pattern);\n  Matcher m=pat.matcher(text);\n  List<String> matches=new ArrayList<String>();\n  while (m.find()) {\n    matches.add(m.group());\n  }\n  return matches;\n}"}
{"ids": "86149", "raw_code": "private boolean deleteStorage(TrackerServer trackerServer,String groupName,String storageIpAddr) throws IOException {\n  byte[] header;\n  byte[] bGroupName;\n  byte[] bs;\n  int len;\n  Socket trackerSocket;\n  trackerSocket=trackerServer.getSocket();\n  OutputStream out=trackerSocket.getOutputStream();\n  bs=groupName.getBytes(ClientGlobal.g_charset);\n  bGroupName=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];\n  if (bs.length <= ProtoCommon.FDFS_GROUP_NAME_MAX_LEN) {\n    len=bs.length;\n  }\n else {\n    len=ProtoCommon.FDFS_GROUP_NAME_MAX_LEN;\n  }\n  Arrays.fill(bGroupName,(byte)0);\n  System.arraycopy(bs,0,bGroupName,0,len);\n  int ipAddrLen;\n  byte[] bIpAddr=storageIpAddr.getBytes(ClientGlobal.g_charset);\n  if (bIpAddr.length < ProtoCommon.FDFS_IPADDR_SIZE) {\n    ipAddrLen=bIpAddr.length;\n  }\n else {\n    ipAddrLen=ProtoCommon.FDFS_IPADDR_SIZE - 1;\n  }\n  header=ProtoCommon.packHeader(ProtoCommon.TRACKER_PROTO_CMD_SERVER_DELETE_STORAGE,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN + ipAddrLen,(byte)0);\n  byte[] wholePkg=new byte[header.length + bGroupName.length + ipAddrLen];\n  System.arraycopy(header,0,wholePkg,0,header.length);\n  System.arraycopy(bGroupName,0,wholePkg,header.length,bGroupName.length);\n  System.arraycopy(bIpAddr,0,wholePkg,header.length + bGroupName.length,ipAddrLen);\n  out.write(wholePkg);\n  ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(trackerSocket.getInputStream(),ProtoCommon.TRACKER_PROTO_CMD_RESP,0);\n  this.errno=pkgInfo.errno;\n  return pkgInfo.errno == 0;\n}"}
{"ids": "62198", "raw_code": "@Override public UUID createEntryNode(UUID parentNode){\n  UUID uuid=UUID.randomUUID();\n  graphServer.addVertex(uuid);\n  graphServer.addEdge(uuid,parentNode);\n  return uuid;\n}"}
{"ids": "39830", "raw_code": "protected void assertDeliveryStates(final Collection<CustomerOrderDelivery> deliveries,final Map<String,String> expectedState){\n  for (  CustomerOrderDelivery delivery : deliveries) {\n    assertEquals(\"Delivery \" + delivery.getDeliveryGroup() + \", no \"+ delivery.getDeliveryNum(),expectedState.get(delivery.getDeliveryGroup()),delivery.getDeliveryStatus());\n  }\n}"}
{"ids": "40260", "raw_code": "@Nullable @WorkerThread static File writeBitmapToFile(@NonNull Bitmap bitmap,@NonNull File file){\n  FileOutputStream fileStream=null;\n  try {\n    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();\n    bitmap.compress(Bitmap.CompressFormat.PNG,0,byteStream);\n    fileStream=new FileOutputStream(file);\n    fileStream.write(byteStream.toByteArray());\n    return file;\n  }\n catch (  IOException e) {\n    Log.e(TAG,e.getMessage(),e);\n  }\n finally {\n    if (fileStream != null) {\n      try {\n        fileStream.close();\n      }\n catch (      IOException e) {\n        Log.e(TAG,e.getMessage(),e);\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "80016", "raw_code": "public static Sentence parse(final String text,final ConversationContext ctx){\n  String txt;\n  if (text == null) {\n    txt=\"\";\n  }\n else {\n    if ((ctx != null) && ctx.isForMatching()) {\n      final ExpressionMatcher matcher=new ExpressionMatcher();\n      txt=matcher.readMatchingFlags(text);\n      if (matcher.isAnyFlagSet()) {\n        return matcher.parseSentence(txt,ctx);\n      }\n    }\n else {\n      txt=text;\n    }\n  }\n  txt=txt.trim();\n  final SentenceImplementation sentence=new SentenceImplementation(ctx,txt);\n  try {\n    final ConversationParser parser=new ConversationParser(sentence);\n    sentence.parse(parser);\n    sentence.classifyWords(parser);\n    if ((ctx != null) && ctx.getMergeExpressions()) {\n      sentence.evaluateSentenceType();\n      sentence.mergeWords();\n      if (!ctx.isForMatching()) {\n        sentence.standardizeSentenceType();\n        sentence.performaAliasing();\n      }\n    }\n    sentence.setError(parser.getErrorString());\n  }\n catch (  final Exception e) {\n    LOGGER.error(\"ConversationParser.parse(): caught Exception while parsing '\" + text + '\\'');\n    sentence.setError(e.getMessage());\n    e.printStackTrace();\n  }\n  return sentence;\n}"}
{"ids": "3007", "raw_code": "private void addEntryToInfoList(Entry entry,List<EntryInfo> entryInfoList){\n  if (entryInfoList != null) {\n    String typeToAdd=entry.getType();\n    if (typeToAdd.equals(DbLogic.Constants.quotation)) {\n      typeToAdd=DbLogic.Constants.note;\n    }\n    entryInfoList.add(new EntryInfo(entry.getId(),entry.getNoteOrTitle(\"\"),entry.getQuotation(\"\"),entry.getIsPublic(),entry.hasFirstChildId(),entry.hasParentId(),typeToAdd));\n  }\n}"}
{"ids": "54176", "raw_code": "private void updateSliding(float newPositionNormalized){\n  currentSlide=newPositionNormalized;\n  state=currentSlide == 1 ? EXPANDED : currentSlide == 0 ? COLLAPSED : SLIDING;\n  float slideY=Math.abs((currentSlide * maxSlide) - maxSlide);\n  slidableView.setY(slideY);\n  invalidate();\n  notifyListeners(currentSlide);\n}"}
{"ids": "86789", "raw_code": "void flush(VcfWriter writer) throws IOException {\n  if (mPrevRecord != null) {\n    if (!mPrevDense) {\n      writeCount(writer,mPrevRecord);\n    }\n else {\n      mVcfFilterStatistics.increment(Stat.DENSITY_WINDOW_COUNT);\n    }\n  }\n  mPrevRecord=null;\n  mPrevDense=false;\n}"}
{"ids": "29421", "raw_code": "public boolean equals(String str){\n  if (str == null)   return false;\n  if (_length != str.length())   return false;\n  for (int i=_length, j=_offset + _length; --i >= 0; ) {\n    if (_array[--j] != str.charAt(i))     return false;\n  }\n  return true;\n}"}
{"ids": "24507", "raw_code": "protected void flush(){\n  stream.flush();\n}"}
{"ids": "32479", "raw_code": "private ServerStarter startServers() throws Exception {\n  ServerStarter srvStarter=new ServerStarter();\n  Thread t=new Thread(srvStarter);\n  t.setDaemon(true);\n  t.setName(\"Server Starter\");\n  t.start();\n  srvStarter.waitForServerStart();\n  return srvStarter;\n}"}
{"ids": "62889", "raw_code": "public Pagination evaluate(final Class entityClass){\n  Paginate paginate=entityClass != null ? (Paginate)entityClass.getAnnotation(Paginate.class) : null;\n  int defaultLimit=paginate != null ? paginate.defaultLimit() : DEFAULT_PAGE_LIMIT;\n  int maxLimit=paginate != null ? paginate.maxLimit() : MAX_PAGE_LIMIT;\n  evaluate(defaultLimit,maxLimit);\n  generateTotals=generateTotals && (paginate == null || paginate.countable());\n  return this;\n}"}
{"ids": "46732", "raw_code": "public boolean deregisterServiceProvider(Object provider){\n  Object oprovider=map.get(provider.getClass());\n  if (provider == oprovider) {\n    map.remove(provider.getClass());\n    poset.remove(provider);\n    if (provider instanceof RegisterableService) {\n      RegisterableService rs=(RegisterableService)provider;\n      rs.onDeregistration(registry,category);\n    }\n    return true;\n  }\n  return false;\n}"}
{"ids": "2028", "raw_code": "public NewestFirstComparator(Date now){\n  Preconditions.checkNotNull(now);\n  mNow=new Date(now.getTime() + MILLIS_IN_DAY);\n}"}
{"ids": "7855", "raw_code": "protected void update(Comparable x,Object y){\n  int index=indexOf(x);\n  if (index < 0) {\n    throw new SeriesException(\"No observation for x = \" + x);\n  }\n else {\n    ComparableObjectItem item=getDataItem(index);\n    item.setObject(y);\n    fireSeriesChanged();\n  }\n}"}
{"ids": "3295", "raw_code": "public void writeField(String name,float value) throws java.io.IOException {\n  writeField(name,Float.toString(value));\n}"}
{"ids": "75876", "raw_code": "public byte[] decodeData(byte[] data,int numErrorCorrectionBytes) throws ReedSolomonException, DataTooLargeException {\n  if (data == null || data.length == 0) {\n    return null;\n  }\n  if (data.length > 256) {\n    throw new DataTooLargeException(\"Data exceeds 256 bytes! Too large\");\n  }\n  int[] dataInts=new int[data.length];\n  for (int i=0; i < data.length; i++) {\n    dataInts[i]=data[i] & 0xFF;\n  }\n  int totalBytes=data.length - numErrorCorrectionBytes;\n  decoder.decode(dataInts,numErrorCorrectionBytes);\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  for (int i=0; i < totalBytes && i < dataInts.length; i++) {\n    bos.write(dataInts[i]);\n  }\n  return bos.toByteArray();\n}"}
{"ids": "8535", "raw_code": "public static boolean isValidMobile(@NonNull String mobile){\n  if (!TextUtils.isEmpty(mobile) && mobile.length() == 10) {\n    if (mobile.startsWith(\"9\") || mobile.startsWith(\"8\") || mobile.startsWith(\"7\")) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "3867", "raw_code": "public String convertError(String filename,int line,int column,String message){\n  String srcFilename=null;\n  int destLine=0;\n  int srcLine=0;\n  for (int i=0; i < _lines.size(); i++) {\n    Line map=_lines.get(i);\n    if (filename != null && !filename.endsWith(_dstFilename)) {\n    }\n else     if (map._dstLine <= line && line <= map.getLastDestinationLine()) {\n      srcFilename=map._srcFilename;\n      srcLine=map.getSourceLine(line);\n    }\n  }\n  if (srcFilename != null)   return srcFilename + \":\" + srcLine+ \": \"+ message;\n else   return filename + \":\" + line+ \": \"+ message;\n}"}
{"ids": "14278", "raw_code": "protected boolean isAttributesModified(){\n  if (attributes != null) {\n    return (attributes.isEmpty()) ? false : true;\n  }\n  return false;\n}"}
{"ids": "32514", "raw_code": "@Nullable public static IgnoreDescriptor forMethod(Class cls,Method mthd){\n  if (mthd.isAnnotationPresent(IgniteIgnore.class)) {\n    IgniteIgnore ignore=mthd.getAnnotation(IgniteIgnore.class);\n    String reason=ignore.value();\n    if (F.isEmpty(reason))     throw new IllegalArgumentException(\"Reason is not set for ignored test [class=\" + cls.getName() + \", method=\"+ mthd.getName()+ ']');\n    return new IgnoreDescriptor(reason,ignore.forceFailure());\n  }\n else   return null;\n}"}
{"ids": "55618", "raw_code": "protected int drawMessageSize(){\n  int sizeDiff=sizeRange[0] == sizeRange[1] ? 0 : rng.nextInt(sizeRange[1] - sizeRange[0]);\n  return sizeRange[0] + sizeDiff;\n}"}
{"ids": "66884", "raw_code": "public static String[] grabArgs(String signature){\n  Matcher matcher=sigRE.matcher(signature);\n  boolean b=matcher.matches();\n  if (!b && matcher.groupCount() != 4)   logger.error(\"Bad method signature: {}\",signature);\n  String args=matcher.group(4);\n  if (args.isEmpty())   return new String[0];\n  return args.split(\",\");\n}"}
{"ids": "7352", "raw_code": "public void processDispatch(UniformPair<EventBean[]> events){\n  if (!forClauseDelivery) {\n    dispatchInternal(events);\n    return;\n  }\n  if ((groupDeliveryExpressions == null) || (groupDeliveryExpressions.length == 0)) {\n    UniformPair<EventBean[]> todeliver=new UniformPair<EventBean[]>(null,null);\n    if (events != null) {\n      if (events.getFirst() != null) {\n        for (        EventBean theEvent : events.getFirst()) {\n          todeliver.setFirst(new EventBean[]{theEvent});\n          dispatchInternal(todeliver);\n        }\n        todeliver.setFirst(null);\n      }\n      if (events.getSecond() != null) {\n        for (        EventBean theEvent : events.getSecond()) {\n          todeliver.setSecond(new EventBean[]{theEvent});\n          dispatchInternal(todeliver);\n        }\n        todeliver.setSecond(null);\n      }\n    }\n    return;\n  }\n  Map<Object,UniformPair<EventBean[]>> groups;\n  try {\n    groups=getGroupedResults(events);\n  }\n catch (  RuntimeException ex) {\n    log.error(\"Unexpected exception evaluating grouped-delivery expressions: \" + ex.getMessage() + \", delivering ungrouped\",ex);\n    dispatchInternal(events);\n    return;\n  }\n  for (  Map.Entry<Object,UniformPair<EventBean[]>> group : groups.entrySet()) {\n    dispatchInternal(group.getValue());\n  }\n}"}
{"ids": "73067", "raw_code": "public void putLong(long pos,long val){\n  unsafe.putLong(pos + addr,val);\n}"}
{"ids": "21369", "raw_code": "public boolean deleteRSetStep(URI rpSystemId,List<URI> volumeIds,String token) throws InternalException {\n  List<String> replicationSetNames=new ArrayList<String>();\n  try {\n    List<RecoverPointVolumeProtectionInfo> volumeProtectionInfoList=new ArrayList<RecoverPointVolumeProtectionInfo>();\n    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);\n    RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem);\n    for (    URI volumeId : volumeIds) {\n      Volume volume=_dbClient.queryObject(Volume.class,volumeId);\n      RecoverPointVolumeProtectionInfo volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(volume.getId(),_dbClient));\n      Volume sourceVolume=RPHelper.getRPSourceVolume(_dbClient,volume);\n      VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());\n      volumeProtectionInfo.setMetroPoint(VirtualPool.vPoolSpecifiesMetroPoint(virtualPool));\n      volumeProtectionInfoList.add(volumeProtectionInfo);\n      replicationSetNames.add(volume.getRSetName());\n    }\n    if (!volumeProtectionInfoList.isEmpty()) {\n      rp.deleteReplicationSets(volumeProtectionInfoList);\n    }\n    WorkflowStepCompleter.stepSucceded(token);\n  }\n catch (  Exception e) {\n    _log.error(String.format(\"deleteRSetStep Failed - Replication Sets: %s\",replicationSetNames.toString()));\n    return stepFailed(token,e,\"deleteRSetStep\");\n  }\n  return true;\n}"}
{"ids": "29853", "raw_code": "private void moveToNext(){\n  checkMainThread();\n  scheduled.set(false);\n  Bitmap next=pending.poll();\n  if (next != null) {\n    if (current != null && !finished.offer(current))     throw new RuntimeException(\"Could not add image to finished queue\");\n    current=next;\n    invalidateSelf();\n    ensureScheduled();\n    frameAvailableSubject.onNext(null);\n    fpsCounter.update();\n  }\n}"}
{"ids": "66027", "raw_code": "public String rma(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){\n  Integer M_RMA_ID=(Integer)value;\n  if (M_RMA_ID == null || M_RMA_ID.intValue() == 0)   return \"\";\n  if (isCalloutActive())   return \"\";\n  MRMA rma=new MRMA(ctx,M_RMA_ID.intValue(),null);\n  MInOut originalReceipt=rma.getShipment();\n  if (rma.get_ID() != 0) {\n    mTab.setValue(\"DateOrdered\",originalReceipt.getDateOrdered());\n    mTab.setValue(\"POReference\",originalReceipt.getPOReference());\n    mTab.setValue(\"AD_Org_ID\",new Integer(originalReceipt.getAD_Org_ID()));\n    mTab.setValue(\"AD_OrgTrx_ID\",new Integer(originalReceipt.getAD_OrgTrx_ID()));\n    mTab.setValue(\"C_Activity_ID\",new Integer(originalReceipt.getC_Activity_ID()));\n    mTab.setValue(\"C_Campaign_ID\",new Integer(originalReceipt.getC_Campaign_ID()));\n    mTab.setValue(\"C_Project_ID\",new Integer(originalReceipt.getC_Project_ID()));\n    mTab.setValue(\"User1_ID\",new Integer(originalReceipt.getUser1_ID()));\n    mTab.setValue(\"User2_ID\",new Integer(originalReceipt.getUser2_ID()));\n    mTab.setValue(\"M_Warehouse_ID\",new Integer(originalReceipt.getM_Warehouse_ID()));\n    mTab.setValue(\"DeliveryRule\",originalReceipt.getDeliveryRule());\n    mTab.setValue(\"DeliveryViaRule\",originalReceipt.getDeliveryViaRule());\n    mTab.setValue(\"M_Shipper_ID\",new Integer(originalReceipt.getM_Shipper_ID()));\n    mTab.setValue(\"FreightCostRule\",originalReceipt.getFreightCostRule());\n    mTab.setValue(\"FreightAmt\",originalReceipt.getFreightAmt());\n    mTab.setValue(\"C_BPartner_ID\",new Integer(originalReceipt.getC_BPartner_ID()));\n    mTab.setValue(\"C_BPartner_Location_ID\",new Integer(originalReceipt.getC_BPartner_Location_ID()));\n    if (originalReceipt.getAD_User_ID() > 0)     mTab.setValue(\"AD_User_ID\",new Integer(originalReceipt.getAD_User_ID()));\n else     mTab.setValue(\"AD_User_ID\",null);\n  }\n  return \"\";\n}"}
{"ids": "82417", "raw_code": "public final long readLong() throws java.io.IOException {\n  readFully(scratch,0,8);\n  int h=((scratch[0] & 0xff) << 24) | ((scratch[1] & 0xff) << 16) | ((scratch[2] & 0xff) << 8)| ((scratch[3] & 0xff) << 0);\n  int l=((scratch[4] & 0xff) << 24) | ((scratch[5] & 0xff) << 16) | ((scratch[6] & 0xff) << 8)| ((scratch[7] & 0xff) << 0);\n  return (((long)h) << 32L) | ((long)l) & 0xffffffffL;\n}"}
{"ids": "35775", "raw_code": "private Object[] resolveParameters(Executable executable,Optional<Object> target,Object outerInstance,ExtensionContext extensionContext,ExtensionRegistry extensionRegistry){\n  Preconditions.notNull(target,\"target must not be null\");\n  Parameter[] parameters=executable.getParameters();\n  Object[] values=new Object[parameters.length];\n  int start=0;\n  if (outerInstance != null) {\n    values[0]=outerInstance;\n    start=1;\n  }\n  for (int i=start; i < parameters.length; i++) {\n    ParameterContext parameterContext=new DefaultParameterContext(parameters[i],i,target);\n    values[i]=resolveParameter(parameterContext,executable,extensionContext,extensionRegistry);\n  }\n  return values;\n}"}
{"ids": "27128", "raw_code": "public static boolean isValidNameChar(char c){\n  return isValidNameStartChar(c) || (c >= '0' && c <= '9');\n}"}
{"ids": "69504", "raw_code": "protected static boolean id_start_char(int ch){\n  return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch == '_');\n}"}
{"ids": "46620", "raw_code": "public int hashCode(){\n  int fhash=(family != null) ? family.hashCode() : 0;\n  return fhash ^ style ^ size;\n}"}
{"ids": "79124", "raw_code": "private CommandHandlerEnum(final Command command1){\n  this.command=command1;\n}"}
{"ids": "45563", "raw_code": "public static boolean isFloat(String desc){\n  return desc.endsWith(\"F\");\n}"}
{"ids": "68360", "raw_code": "public void componentResized(ComponentEvent e){\n  JScrollBar bar=getVerticalScrollBar();\n  int incr=(int)(getSize().getHeight() - (bar.getUnitIncrement(1) * 3));\n  getVerticalScrollBar().setBlockIncrement(incr);\n}"}
{"ids": "11044", "raw_code": "public Arg(String aName,String desc,int expectedNumberOfArguments,boolean expectDashedArguments){\n  name=aName;\n  description=desc;\n  numExpectedValues=expectedNumberOfArguments;\n  c=name.charAt(0);\n  dashedArguments=expectDashedArguments;\n}"}
{"ids": "47112", "raw_code": "private boolean remove(Object o,Object[] snapshot,int index){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] current=getArray();\n    int len=current.length;\n    if (snapshot != current)     findIndex: {\n      int prefix=Math.min(index,len);\n      for (int i=0; i < prefix; i++) {\n        if (current[i] != snapshot[i] && eq(o,current[i])) {\n          index=i;\n          break findIndex;\n        }\n      }\n      if (index >= len)       return false;\n      if (current[index] == o)       break findIndex;\n      index=indexOf(o,current,index,len);\n      if (index < 0)       return false;\n    }\n    Object[] newElements=new Object[len - 1];\n    System.arraycopy(current,0,newElements,0,index);\n    System.arraycopy(current,index + 1,newElements,index,len - index - 1);\n    setArray(newElements);\n    return true;\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "36066", "raw_code": "public void removeModel(Model model){\n  models.remove(model);\n}"}
{"ids": "165", "raw_code": "public void readMap(int map_Number){\n  InputStream map_file;\n  try {\n    map_file=new FileInputStream(\"src/Asset/stage0\" + map_Number + \".stg\");\n    try {\n      byte[] data=new byte[map_file.available()];\n      map_file.read(data);\n      map_file.close();\n      String load_data=new String(data,\"EUC-KR\");\n      makeMap(load_data);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n catch (  FileNotFoundException e1) {\n    e1.printStackTrace();\n  }\n}"}
{"ids": "86643", "raw_code": "public static double hoeffdingLn(double trials,double observed,double prob){\n  return -2 * Math.pow(trials * prob - observed,2) / trials;\n}"}
{"ids": "49680", "raw_code": "public void add(Match match,AppliedRegion appliedRegion){\n  add(match,appliedRegion,false);\n}"}
{"ids": "79771", "raw_code": "public void reset(){\n  techTree.checkSubTree(techTree.getPathForRow(0),true);\n}"}
{"ids": "10811", "raw_code": "@SuppressWarnings(\"unchecked\") private static <T>void assertThrows(final Consumer<Void> consumer,final Class<T> exceptionClass,final Consumer<T> assertExceptionProperties,final String message){\n  final String normalizedMessage=null == message ? \"\" : String.format(\"[%s]: \",message);\n  try {\n    consumer.accept(null);\n  }\n catch (  final Exception ex) {\n    if (exceptionClass.isAssignableFrom(ex.getClass())) {\n      assertExceptionProperties.accept((T)ex);\n      return;\n    }\n    Assert.fail(String.format(\"%sunexpected exception of type %s was thrown: '%s'\",normalizedMessage,ex.getClass(),ex.getMessage()));\n  }\n  Assert.fail(String.format(\"%sexpected exception of type %s was not thrown\",normalizedMessage,exceptionClass));\n}"}
{"ids": "22918", "raw_code": "public boolean isEmpty(){\n  return nodes.isEmpty() && ways.isEmpty() && relations.isEmpty();\n}"}
{"ids": "82002", "raw_code": "public static void assertBool(boolean b){\n  if (verbose) {\n    log(\"assertBool(\" + b + \")\");\n  }\n  if (!b) {\n    throw new RuntimeException();\n  }\n}"}
{"ids": "41987", "raw_code": "public TagKeyValueMapConverter(boolean nullIfEmpty,String idKey){\n  Objects.requireNonNull(idKey);\n  this.nullIfEmpty=nullIfEmpty;\n  this.addId=true;\n  this.idKey=idKey;\n}"}
{"ids": "11027", "raw_code": "private static void postInit(){\n  debugAll=dbgTable.containsKey(debugAllToken);\n}"}
{"ids": "30711", "raw_code": "private FastConcurrentSkipListMap.Node<K,V> hiNode(){\n  if (hi == null)   return m.findLast();\n else   if (hiInclusive)   return m.findNear(hi,m.LT | m.EQ);\n else   return m.findNear(hi,m.LT);\n}"}
{"ids": "11090", "raw_code": "protected void processEventProperties(Properties eventProps){\n  int status;\n  Node node;\n  Line line;\n  String cmd=eventProps.getProperty(COMMAND_FIELD);\n  int index=PropUtils.intFromProperties(eventProps,INDEX_FIELD,ERROR_VALUE_INT);\n  if (cmd.equals(NODE_OBJECT)) {\n    int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT);\n    if (index == ERROR_VALUE_INT) {\n      Debug.error(\"NMGL: error parsing object index for node.\");\n      return;\n    }\n    node=nodeList.get(index);\n    if (shape == 11) {\n      String icon=eventProps.getProperty(ICON_FIELD);\n      if (DEBUG)       Debug.output(\"NetMapReader: jimage  \" + icon);\n    }\n    if (shape == NODE_DELETE) {\n      if (node != null) {\n        lineList.del(node);\n        nodeList.del(node);\n      }\n    }\n else     if (shape == NODE_MOVE && node != null) {\n      setNodePositionFromEventProps(node,eventProps);\n      lineList.move(node);\n      node.setTime(Double.parseDouble(eventProps.getProperty(TIME_FIELD,\"0\")));\n    }\n else {\n      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0);\n      int menu=PropUtils.intFromProperties(eventProps,MENU_FIELD,0);\n      String label=eventProps.getProperty(LABEL_FIELD);\n      if (label == null) {\n        label=eventProps.getProperty(INDEX_FIELD);\n      }\n      String ip=eventProps.getProperty(IP_FIELD);\n      boolean isLocalhost=false;\n      if (ip != null && localhostIP != null) {\n        isLocalhost=localhostIP.equals(ip);\n        if (DEBUG) {\n          Debug.output(\"NetMapGraphicLoader displaying a node running on the localhost: \" + localhostIP);\n        }\n      }\n      if (DEBUG) {\n        Debug.output(\"Creating node (\" + label + \")\");\n      }\n      try {\n        if (shape != ERROR_VALUE_INT) {\n          node=nodeList.add(label,index,shape,menu,status);\n          node.setLocalhost(isLocalhost);\n        }\n      }\n catch (      Exception e) {\n        Debug.error(\"NMGL: error creating node\");\n      }\n      setNodePositionFromEventProps(node,eventProps);\n    }\n  }\n else   if (cmd.equals(NODE_OBJECT_STATUS)) {\n    if (index == ERROR_VALUE_INT) {\n      Debug.error(\"NMGL: error parsing object index for status update.\");\n      return;\n    }\n    node=nodeList.get(index);\n    if (node != null) {\n      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT);\n      if (status != ERROR_VALUE_INT) {\n        node.setStatus(status);\n      }\n    }\n  }\n else   if (cmd.equals(LINK_OBJECT_STATUS)) {\n    if (index == ERROR_VALUE_INT) {\n      Debug.error(\"NMGL: error parsing line index for status update.\");\n      return;\n    }\n    line=lineList.get(index);\n    if (line != null) {\n      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT);\n      if (status != ERROR_VALUE_INT) {\n        line.setStatus(status);\n      }\n    }\n  }\n else   if (cmd.equals(LINK_OBJECT)) {\n    if (index == ERROR_VALUE_INT) {\n      Debug.error(\"NMGL: error parsing line index for link.\");\n      return;\n    }\n    line=lineList.get(index);\n    int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT);\n    if (shape == NODE_DELETE) {\n      lineList.del(index);\n    }\n else {\n      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0);\n      int node1=PropUtils.intFromProperties(eventProps,LINK_NODE1_FIELD,ERROR_VALUE_INT);\n      int node2=PropUtils.intFromProperties(eventProps,LINK_NODE2_FIELD,ERROR_VALUE_INT);\n      if (node1 == ERROR_VALUE_INT || node2 == ERROR_VALUE_INT) {\n        Debug.error(\"NMGL: error parsing node indexes for link\");\n        return;\n      }\n      Node n1=nodeList.get(node1);\n      Node n2=nodeList.get(node2);\n      if (n1 != null && n2 != null) {\n        lineList.add(String.valueOf(index),index,shape,status,n1,n2);\n      }\n else {\n        if (DEBUG) {\n          Debug.output(\"NetMapGraphicLoader: can't create lobj, nodes are undefined\");\n        }\n      }\n    }\n  }\n else   if (cmd.equals(REFRESH) || cmd.equals(UPDATE)) {\n  }\n else   if (cmd.equals(CLEAR)) {\n    if (nodeList != null) {\n      nodeList.flush();\n    }\n    if (lineList != null) {\n      lineList.flush();\n    }\n  }\n else {\n    if (DEBUG) {\n      Debug.output(\"NMGL: received unused event: \" + eventProps.toString());\n    }\n  }\n  manageGraphics();\n}"}
{"ids": "14804", "raw_code": "protected static void addIdRepoAMSDKPlugin(SSOToken token,String orgName) throws SMSException, SSOException {\n  ServiceConfigManager scm=new ServiceConfigManager(ServiceManager.REALM_SERVICE,token);\n  ServiceConfig sc=scm.getOrganizationConfig(orgName,null);\n  Map attributes=new HashMap();\n  Set values=new HashSet();\n  values.add(\"com.iplanet.am.sdk.AMSDKRepo\");\n  attributes.put(\"sunIdRepoClass\",values);\n  values=new HashSet();\n  values.add(DNMapper.realmNameToAMSDKName(DNMapper.orgNameToDN(orgName)));\n  attributes.put(\"amSDKOrgName\",values);\n  sc.addSubConfig(\"amsdk1\",\"amSDK\",0,attributes);\n}"}
{"ids": "72808", "raw_code": "public static String onKeyPress(String key){\n  pin=pin.concat(key);\n  return pin;\n}"}
{"ids": "38448", "raw_code": "public boolean isHierachic(String string){\n  int index=string.indexOf(m_Seperator);\n  if ((index == (string.length() - 1)) || (index == -1)) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "64480", "raw_code": "public static final ByteBuffer bufferToByteBuffer(final byte[] buffer,final ByteOrder order){\n  final ByteBuffer retBuff=ByteBuffer.wrap(buffer);\n  retBuff.order(order);\n  return retBuff;\n}"}
{"ids": "73245", "raw_code": "private URI processLocalFiles(URI uri){\n  String uriStr=uri.toString();\n  if (uriStr.startsWith(\"file:\")) {\n    uriStr=\"file:\" + System.getProperty(\"user.dir\") + \"/\"+ uriStr.substring(5);\n    URL url;\n    try {\n      url=new URL(uriStr);\n      return url.toURI();\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n  return uri;\n}"}
{"ids": "85145", "raw_code": "public int readInt() throws IOException {\n  length+=4;\n  int k1=in.read();\n  if (k1 < 0)   return 0;\n  int k2=in.read() << 8;\n  int k3=in.read() << 16;\n  return k1 + k2 + k3+ (in.read() << 24);\n}"}
{"ids": "10091", "raw_code": "public void addTransformation(TagTransformation tagTransformation){\n  if (tagTransformation != null) {\n    mappings.put(tagTransformation.getSourceTag(),tagTransformation);\n  }\n}"}
{"ids": "56885", "raw_code": "private boolean isDbConfigurationPresent(){\n  return StringUtils.isNotBlank(selectColumn) && StringUtils.isNotBlank(tableName);\n}"}
{"ids": "42745", "raw_code": "public boolean isIncompleteNumericalRun(String pin){\n  final int len=pin.length();\n  int consecutive=0;\n  char last=pin.charAt(0);\n  for (int i=1; i < len; i++) {\n    final char c=pin.charAt(i);\n    if (last == c) {\n      consecutive++;\n    }\n else {\n      consecutive=0;\n    }\n    last=c;\n    if (consecutive >= 2) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "10659", "raw_code": "private static void generateJavaScriptLogAlertCloseWindow(Writer writer,String message) throws IOException {\n  writer.write(\"<script language=\\\"javascript\\\">alert(\\\"\" + message + \"\\\");\");\n  writer.write(\"window.close();\");\n  writer.write(\"</script>\");\n}"}
{"ids": "71809", "raw_code": "private static ResultCode registerErrorResultCode(final int intValue,final LocalizableMessage name,final Enum resultCodeEnum){\n  final ResultCode t=new ResultCode(intValue,name,true,resultCodeEnum);\n  ELEMENTS.put(intValue,t);\n  return t;\n}"}
{"ids": "29030", "raw_code": "public void addAll(ExceptionSet other){\n  exceptionSet.or(other.exceptionSet);\n  explicitSet.or(other.explicitSet);\n  size=countBits(exceptionSet);\n  commonSupertype=null;\n}"}
{"ids": "25491", "raw_code": "@HLEUnimplemented @HLEFunction(nid=0x574A8C3F,version=271) public int sceUsbCamStartVideo(){\n  if (!setupVideo()) {\n    log.warn(String.format(\"Cannot find webcam\"));\n  }\n  return 0;\n}"}
{"ids": "15437", "raw_code": "protected ResourceLoaderLicenseLocator(final Charset charset,final String... licenseFiles){\n  if (licenseFiles == null || licenseFiles.length == 0) {\n    throw new IllegalArgumentException(\"No license files specified\");\n  }\n  if (charset == null) {\n    throw new NullPointerException(\"Charset is null\");\n  }\n  this.licenseFiles=new ArrayList<String>(Arrays.asList(licenseFiles));\n  this.charset=charset;\n}"}
{"ids": "32948", "raw_code": "@Inject public ProjectTypeRegistry(Set<ProjectTypeDef> types){\n  projectTypes=new HashMap<>();\n  validatedData=new HashMap<>();\n  validate(types);\n  for (  ProjectTypeDef type : validatedData.values()) {\n    try {\n      init(type);\n    }\n catch (    ProjectTypeConstraintException e) {\n      LOG.error(e.getMessage());\n    }\n  }\n}"}
{"ids": "19922", "raw_code": "static public void addNotificationListener(JMXConnector jmxConnector,Class<?> mbeanInterface,String mbeanName,NotificationListener notificationListener,boolean ignored) throws InstanceNotFoundException, Exception {\n  MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection();\n  ObjectName objectName=generateMBeanObjectName(mbeanInterface.getName(),mbeanName);\n  mbsc.addNotificationListener(objectName,notificationListener,null,null);\n}"}
{"ids": "13446", "raw_code": "private void consume(){\n  consumer.subscribe(topics);\n  while (running.get()) {\n    try {\n      ConsumerRecords records=consumer.poll(pollIntervalMs);\n      if (records == null) {\n        continue;\n      }\n      Iterator<ConsumerRecord<String,String>> iterator=records.iterator();\n      while (iterator.hasNext()) {\n        sendMessage(iterator.next());\n      }\n    }\n catch (    Exception ex) {\n      String error=\"Error consuming messages from kafka\";\n      logger.error(error,ex);\n      bus.send(ConfigConstants.CONSUMER_ERROR_TOPIC,getErrorString(error,ex.getMessage()));\n    }\n  }\n}"}
{"ids": "33781", "raw_code": "private byte[] readRawBytesSlowPath(final int size) throws IOException {\n  if (size <= 0) {\n    if (size == 0) {\n      return Internal.EMPTY_BYTE_ARRAY;\n    }\n else {\n      throw InvalidProtocolBufferException.negativeSize();\n    }\n  }\n  if (totalBytesRetired + bufferPos + size > currentLimit) {\n    skipRawBytes(currentLimit - totalBytesRetired - bufferPos);\n    throw InvalidProtocolBufferException.truncatedMessage();\n  }\n  if (size < BUFFER_SIZE) {\n    final byte[] bytes=new byte[size];\n    int pos=bufferSize - bufferPos;\n    System.arraycopy(buffer,bufferPos,bytes,0,pos);\n    bufferPos=bufferSize;\n    ensureAvailable(size - pos);\n    System.arraycopy(buffer,0,bytes,pos,size - pos);\n    bufferPos=size - pos;\n    return bytes;\n  }\n else {\n    final int originalBufferPos=bufferPos;\n    final int originalBufferSize=bufferSize;\n    totalBytesRetired+=bufferSize;\n    bufferPos=0;\n    bufferSize=0;\n    int sizeLeft=size - (originalBufferSize - originalBufferPos);\n    final List<byte[]> chunks=new ArrayList<byte[]>();\n    while (sizeLeft > 0) {\n      final byte[] chunk=new byte[Math.min(sizeLeft,BUFFER_SIZE)];\n      int pos=0;\n      while (pos < chunk.length) {\n        final int n=(input == null) ? -1 : input.read(chunk,pos,chunk.length - pos);\n        if (n == -1) {\n          throw InvalidProtocolBufferException.truncatedMessage();\n        }\n        totalBytesRetired+=n;\n        pos+=n;\n      }\n      sizeLeft-=chunk.length;\n      chunks.add(chunk);\n    }\n    final byte[] bytes=new byte[size];\n    int pos=originalBufferSize - originalBufferPos;\n    System.arraycopy(buffer,originalBufferPos,bytes,0,pos);\n    for (    final byte[] chunk : chunks) {\n      System.arraycopy(chunk,0,bytes,pos,chunk.length);\n      pos+=chunk.length;\n    }\n    return bytes;\n  }\n}"}
{"ids": "8317", "raw_code": "public static boolean isClassLiteralPossible(ClassNode classNode){\n  return Modifier.isPublic(classNode.getModifiers());\n}"}
{"ids": "15435", "raw_code": "private Properties loadLogFile(License license,boolean create){\n  Properties log=new Properties();\n  File logFile=getLogFile(license);\n  try {\n    if (create && logFile.createNewFile()) {\n      logger.fine(\"Created license log file: \" + logFile.getAbsolutePath());\n    }\n    final InputStream in=new FileInputStream(logFile);\n    try {\n      log.load(in);\n    }\n  finally {\n      in.close();\n    }\n  }\n catch (  FileNotFoundException ex) {\n    if (create) {\n      logger.log(Level.SEVERE,\"Unable to create license log file: \" + logFile.getAbsolutePath(),ex);\n    }\n else {\n      logger.fine(\"Log file does not yet exist\");\n    }\n  }\ncatch (  IOException ex) {\n    logger.log(Level.WARNING,\"Unable to access license log file: \" + logFile.getAbsolutePath(),ex);\n  }\n  return log;\n}"}
{"ids": "76797", "raw_code": "public HTMLStripCharFilterFactory(Map<String,String> args){\n  super(args);\n  escapedTags=getSet(args,\"escapedTags\");\n  if (!args.isEmpty()) {\n    throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n  }\n}"}
{"ids": "44862", "raw_code": "public static int update(long id,V v){\n  String passwd=(String)v.value(\"password\");\n  if (!X.isEmpty(passwd)) {\n    passwd=encrypt(passwd);\n    v.set(\"password\",passwd,true);\n  }\n else {\n    v.remove(\"password\");\n  }\n  return Helper.update(id,v.set(\"updated\",System.currentTimeMillis()),User.class);\n}"}
{"ids": "86158", "raw_code": "public boolean isSafeMode(){\n  return this.safeMode;\n}"}
{"ids": "68751", "raw_code": "public void addLastItem(M model){\n  addItem(mDatas.size(),model);\n}"}
{"ids": "6593", "raw_code": "static boolean hasLocalizedMessages(){\n  return GUIMediator.isEnglishLocale() || !FIRST_MESSAGE.equals(I18n.tr(FIRST_MESSAGE));\n}"}
{"ids": "43205", "raw_code": "public static DockerImage fromImageName(String imageName){\n  imageName=prepare(imageName);\n  String[] parts=imageName.split(SECTION_SEPARATOR);\nswitch (parts.length) {\ncase 1:\n    return fromParts(null,null,parts[0]);\ncase 2:\n  if (isValidNamespace(parts[0])) {\n    return fromParts(null,parts[0],parts[1]);\n  }\n else {\n    return fromParts(parts[0],null,parts[1]);\n  }\ncase 3:\nreturn fromParts(parts[0],parts[1],parts[2]);\ndefault :\nthrow new IllegalArgumentException(\"Invalid image format: \" + imageName);\n}\n}"}
{"ids": "36828", "raw_code": "public synchronized void listen(final Set<NotificationChannel> channelNames){\n  m_channels.addAll(channelNames);\n}"}
{"ids": "72056", "raw_code": "private void displayNonVerbose(ConsoleApplication app,String categoryName,String typeName,Tag tag,Set<String> propertyNames){\n  if (!app.isScriptFriendly()) {\n    displayPropertyOptionKey(app);\n    app.println();\n    app.println();\n  }\n  TableBuilder builder=new TableBuilder();\n  builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_NAME.get());\n  builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_TYPE.get());\n  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_NAME.get());\n  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_OPTIONS.get());\n  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_SYNTAX.get());\n  builder.addSortKey(0);\n  builder.addSortKey(1);\n  builder.addSortKey(2);\n  for (  String category : categoryMap.keySet()) {\n    if (categoryName != null && !categoryName.equals(category)) {\n      continue;\n    }\n    Map<String,AbstractManagedObjectDefinition<?,?>> subTypes=categoryMap.get(category);\n    for (    String type : subTypes.keySet()) {\n      if (typeName != null && !typeName.equals(type)) {\n        continue;\n      }\n      AbstractManagedObjectDefinition<?,?> mod=subTypes.get(type);\n      if (cannotDisplay(app,mod,tag)) {\n        continue;\n      }\n      Set<PropertyDefinition<?>> pds=getPropertyDefinitions(mod);\n      for (      PropertyDefinition<?> pd : pds) {\n        if (cannotDisplay(app,pd,propertyNames)) {\n          continue;\n        }\n        builder.startRow();\n        builder.appendCell(category);\n        builder.appendCell(type);\n        builder.appendCell(pd.getName());\n        builder.appendCell(getPropertyOptionSummary(pd));\n        PropertyDefinitionUsageBuilder v=new PropertyDefinitionUsageBuilder(false);\n        builder.appendCell(v.getUsage(pd));\n      }\n    }\n  }\n  TablePrinter printer;\n  if (app.isScriptFriendly()) {\n    printer=createScriptFriendlyTablePrinter(app.getOutputStream());\n  }\n else {\n    printer=new TextTablePrinter(app.getOutputStream());\n  }\n  builder.print(printer);\n}"}
{"ids": "34385", "raw_code": "private Document parse(final String data){\n  if (docBuilder == null || data == null) {\n    return null;\n  }\n  Document document=null;\n  try {\n    String buf=BEGINPART + data + ENDPART;\n    InputSource inputSource=new InputSource(new StringReader(buf));\n    document=docBuilder.parse(inputSource);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  return document;\n}"}
{"ids": "21377", "raw_code": "public boolean isProductionJournal(Set<String> productionCopies,Volume volume){\n  for (  String productionCopy : productionCopies) {\n    if (productionCopy.equalsIgnoreCase(volume.getRpCopyName())) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "4698", "raw_code": "public static String decode(final String escaped) throws URIException {\n  try {\n    final byte[] rawdata=URLCodec.decodeUrl(EncodingUtil.getAsciiBytes(escaped));\n    return EncodingUtil.getString(rawdata,URI.getDefaultProtocolCharset());\n  }\n catch (  final DecoderException e) {\n    throw new URIException(e.getMessage());\n  }\n}"}
{"ids": "73879", "raw_code": "void waitBeforeNextPoll(int pollingInterval) throws InterruptedException {\nsynchronized (this) {\n    wait(pollingInterval);\n  }\n  if (!pollOutstanding) {\n    return;\n  }\n  log.debug(\"--- extra wait\");\n  for (int i=0; i < 20; i++) {\nsynchronized (this) {\n      wait(pollingInterval / 4);\n    }\n    log.debug(\"-------------extra wait\");\n    if (!pollOutstanding) {\n      return;\n    }\n  }\n}"}
{"ids": "80886", "raw_code": "private void shiftMappingVectorTokensLeft(int lineNum,int startCol,int shift){\n  boolean lastWasBeginTLAToken=false;\n  int lastBeginTLATokCol=-777;\n  Vector line=(Vector)mappingVector.elementAt(lineNum);\n  for (int i=0; i < line.size(); i++) {\n    MappingObject obj=(MappingObject)line.elementAt(i);\n    if (obj.getType() == MappingObject.BEGIN_TLATOKEN) {\n      MappingObject.BeginTLAToken tobj=(MappingObject.BeginTLAToken)obj;\n      int col=tobj.getColumn();\n      if (col >= startCol) {\n        tobj.setColumn(col - shift);\n      }\n      lastWasBeginTLAToken=true;\n      lastBeginTLATokCol=tobj.getColumn();\n    }\n else {\n      if (obj.getType() == MappingObject.END_TLATOKEN) {\n        MappingObject.EndTLAToken tobj=(MappingObject.EndTLAToken)obj;\n        int col=tobj.getColumn();\n        if (col >= startCol) {\n          tobj.setColumn(col - shift);\n        }\n        if (lastWasBeginTLAToken && tobj.getColumn() <= lastBeginTLATokCol) {\n          PcalDebug.ReportBug(\"PcalTLAGen.shiftMappingVectorTokensLeft created a null TLA Token\");\n        }\n      }\n else       if (obj.getType() == MappingObject.SOURCE_TOKEN) {\n        MappingObject.SourceToken tobj=(MappingObject.SourceToken)obj;\n        int col=tobj.getBeginColumn();\n        if (col >= startCol) {\n          tobj.setBeginColumn(col - shift);\n        }\n        col=tobj.getEndColumn();\n        if (col >= startCol) {\n          tobj.setEndColumn(col - shift);\n        }\n        lastWasBeginTLAToken=false;\n      }\n    }\n  }\n}"}
{"ids": "26959", "raw_code": "protected Dimension computeLengths(String annoText){\n  String[] lines=Util.splitLines(annoText);\n  int lineLength=0;\n  for (  String line : lines) {\n    if (line.length() > lineLength)     lineLength=line.length();\n  }\n  return new Dimension(lineLength + 5,lines.length + 1);\n}"}
{"ids": "7539", "raw_code": "public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info,ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator) throws IOException {\n  writer.println(ImageMapUtilities.getImageMap(name,info,toolTipTagFragmentGenerator,urlTagFragmentGenerator));\n}"}
{"ids": "51833", "raw_code": "ImportNoteBuilder addMessage(ImportNoteMessage.Type type,String message){\n  if (!Strings.isNullOrEmpty(message)) {\n    messages.add(new ImportNoteMessage(type,message));\n  }\n  return this;\n}"}
{"ids": "4419", "raw_code": "public static List<String> asStringList(Collection<? extends Object> objects){\n  List<String> list=new ArrayList<>();\n  for (  Object object : objects) {\n    list.add(String.valueOf(object));\n  }\n  return list;\n}"}
{"ids": "34879", "raw_code": "public <E extends T>E min(Iterable<E> iterable){\n  Iterator<E> iterator=iterable.iterator();\n  E minSoFar=iterator.next();\n  while (iterator.hasNext()) {\n    minSoFar=min(minSoFar,iterator.next());\n  }\n  return minSoFar;\n}"}
{"ids": "48971", "raw_code": "public synchronized int read(byte b[],int off,int len) throws IOException {\n  if (len <= 0)   return 0;\n  int moreSpace;\nsynchronized (lock) {\n    if (pos >= present)     pos=present=0;\n else     if (pos >= waterMark) {\n      System.arraycopy(buffer,pos,buffer,0,present - pos);\n      present-=pos;\n      pos=0;\n    }\n    int freeSpace=buffer.length - present;\n    moreSpace=Math.max(freeSpace - requested,0);\n  }\n  if (moreSpace > 0)   manager.sendRequest(info,moreSpace);\nsynchronized (lock) {\n    requested+=moreSpace;\n    while ((pos >= present) && !disconnected) {\n      try {\n        lock.wait();\n      }\n catch (      InterruptedException e) {\n      }\n    }\n    if (disconnected && pos >= present)     return -1;\n    int available=present - pos;\n    if (len < available) {\n      System.arraycopy(buffer,pos,b,off,len);\n      pos+=len;\n      return len;\n    }\n else {\n      System.arraycopy(buffer,pos,b,off,available);\n      pos=present=0;\n      return available;\n    }\n  }\n}"}
{"ids": "30236", "raw_code": "public static List<ItemStack> consolidateItemStacks(List<ItemStack> inputStacks){\n  List<ItemStack> outputStacks=new ArrayList<ItemStack>();\n  for (  ItemStack sourceIS : inputStacks) {\n    boolean bFound=false;\n    for (    ItemStack destIS : outputStacks) {\n      if (destIS != null && sourceIS != null && itemStackIngredientsMatch(destIS,sourceIS)) {\n        bFound=true;\n        destIS.stackSize+=sourceIS.stackSize;\n      }\n    }\n    if (!bFound)     outputStacks.add(sourceIS.copy());\n  }\n  return outputStacks;\n}"}
{"ids": "18238", "raw_code": "protected Character isWFXMLChar(String chardata){\n  Character refInvalidChar;\n  if (chardata == null || (chardata.length() == 0)) {\n    return null;\n  }\n  char[] dataarray=chardata.toCharArray();\n  int datalength=dataarray.length;\n  if (fIsXMLVersion11) {\n    int i=0;\n    while (i < datalength) {\n      if (XML11Char.isXML11Invalid(dataarray[i++])) {\n        char ch=dataarray[i - 1];\n        if (XMLChar.isHighSurrogate(ch) && i < datalength) {\n          char ch2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {\n            continue;\n          }\n        }\n        refInvalidChar=new Character(ch);\n        return refInvalidChar;\n      }\n    }\n  }\n else {\n    int i=0;\n    while (i < datalength) {\n      if (XMLChar.isInvalid(dataarray[i++])) {\n        char ch=dataarray[i - 1];\n        if (XMLChar.isHighSurrogate(ch) && i < datalength) {\n          char ch2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {\n            continue;\n          }\n        }\n        refInvalidChar=new Character(ch);\n        return refInvalidChar;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "86551", "raw_code": "public final ParallelFlux<T> doOnNext(Consumer<? super T> onNext){\n  Objects.requireNonNull(onNext,\"onNext\");\n  return doOnSignal(this,onNext,null,null,null,null,null,null,null);\n}"}
{"ids": "22599", "raw_code": "public <T extends DataObject>void insertInBatches(List<T> records,int partitionSize,DbClient dbClient,String type){\n  List<List<T>> volume_partitions=Lists.partition(records,partitionSize);\n  for (  List<T> partition : volume_partitions) {\n    try {\n      dbClient.createObject(partition);\n      _log.info(\"{} {} Records inserted to DB\",partition.size(),type);\n    }\n catch (    DatabaseException e) {\n      _log.error(\"Error inserting {} records into the database:\",type,e);\n    }\n  }\n}"}
{"ids": "14756", "raw_code": "public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {\n  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {\n    throw new IllegalArgumentException(\"SMSEnhancedFlatFileObject.modify: \" + \"One or more arguments is null or empty\");\n  }\n  mRWLock.readRequest();\n  try {\n    if (!root.isExists(mRootDir,objName)) {\n      String errmsg=\"SMSEnhancedFlatFileObject.modify: object \" + objName + \" not found.\";\n      mDebug.error(errmsg);\n      throw new ServiceNotFoundException(errmsg);\n    }\n  }\n  finally {\n    mRWLock.readDone();\n  }\n  mRWLock.writeRequest();\n  try {\n    SMSFlatFileTreeNode node=root.getChild(objName);\n    if (node == null) {\n      String errmsg=\"SMSEnhancedFlatFileObject.modify: object \" + objName + \" not found.\";\n      mDebug.error(errmsg);\n      throw new ServiceNotFoundException(errmsg);\n    }\n    String filepath=node.getAttributeFilename(mRootDir);\n    if (filepath == null) {\n      String errmsg=\"SMSEnhancedFlatFileObject.modify: object \" + objName + \" not found.\";\n      mDebug.error(errmsg);\n      throw new ServiceNotFoundException(errmsg);\n    }\n    File filehandle=new File(filepath);\n    if (!filehandle.isFile()) {\n      String errmsg=\"SMSEnhancedFlatFileObject.modify: Attributes file for \" + \"object \" + objName + \" not found.\";\n      mDebug.error(errmsg);\n      throw new ServiceNotFoundException(errmsg);\n    }\n    Properties props=loadProperties(filehandle,objName);\n    boolean hasSunXmlKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL) != null;\n    for (int i=0; i < mods.length; i++) {\n      modifyValues(objName,mods[i],props);\n    }\n    saveProperties(props,filehandle,objName);\n    String newSunXMLKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL);\n    if (newSunXMLKeyValue != null) {\n      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,newSunXMLKeyValue);\n      if (!hasSunXmlKeyValue) {\n        deleteSunXmlKeyValFiles(node);\n      }\n      createSunXmlKeyValFiles(node,xmlKeyVals);\n      saveDirectoryTree();\n    }\n  }\n  finally {\n    mRWLock.writeDone();\n  }\n}"}
{"ids": "39761", "raw_code": "public void removeOnTabSelectedListener(OnTabSelectedListener listener){\n  if (listener != null) {\n    mListeners.remove(listener);\n  }\n}"}
{"ids": "19851", "raw_code": "public ConnectUriManager(List<String> connectUri) throws THLException {\n  this.uriList=connectUri;\n  if (connectUri.size() == 0) {\n    throw new THLException(\"Connect URI value is empty; must be a list of one or more THL URIs\");\n  }\n}"}
{"ids": "21585", "raw_code": "private void addVolumesToParkingStorageGroup(StorageSystem storage,String policyName,Set<String> volumeDeviceIds) throws Exception {\n  String[] tokens=policyName.split(Constants.SMIS_PLUS_REGEX);\n  CIMObjectPath groupPath=_helper.getVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]);\n  if (groupPath == null) {\n    groupPath=_helper.createVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]);\n  }\n  CIMArgument[] inArgs=_helper.getAddVolumesToMaskingGroupInputArguments(storage,groupPath,volumeDeviceIds);\n  CIMArgument[] outArgs=new CIMArgument[5];\n  SmisJob addVolumesToSGJob=new SmisSynchSubTaskJob(null,storage.getId(),SmisConstants.ADD_MEMBERS);\n  _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),\"AddMembers\",inArgs,outArgs,addVolumesToSGJob);\n}"}
{"ids": "24121", "raw_code": "private boolean isStoppable(){\n  return (isRunning() && getCache() != null);\n}"}
{"ids": "51903", "raw_code": "private void log(String message,String level,String levelColor,PrintStream ps){\n  StringBuilder builder=new StringBuilder();\n  if (!level.equals(\"raw\"))   builder.append(getPrefix(level,levelColor));\n  builder.append(message);\n  String ts=builder.toString();\n  ps.println(ts);\n  for (  LogHandler hand : handlers)   hand.onLog(level,message,ts,this);\n}"}
{"ids": "25012", "raw_code": "public static boolean isPublic(int mod){\n  return Modifier.isPublic(mod);\n}"}
{"ids": "52972", "raw_code": "public JSONBuffer appendString(Object cont){\n  if (stack.empty() || stack.peek() != Operand.ARRAY) {\n    throw new JSONException(\"Appending string outside of array context.\");\n  }\n  addQuotedString(cont);\n  addSeparator();\n  return this;\n}"}
{"ids": "19928", "raw_code": "public static void deleteUserFromAuthenticationInfo(AuthenticationInfo authenticationInfo) throws ServerRuntimeException {\n  String username=authenticationInfo.getUsername();\n  String passwordFileLocation=authenticationInfo.getPasswordFileLocation();\n  try {\n    PropertiesConfiguration props=new PropertiesConfiguration(passwordFileLocation);\n    String usernameInFile=props.getString(username);\n    if (usernameInFile == null) {\n      throw new ServerRuntimeException(MessageFormat.format(\"Username does not exist: {0}\",username));\n    }\n    props.clearProperty(username);\n    props.save();\n  }\n catch (  org.apache.commons.configuration.ConfigurationException ce) {\n    logger.error(\"Error while saving properties for file:\" + authenticationInfo.getPasswordFileLocation(),ce);\n    throw new ServerRuntimeException(\"Error while saving Credentials: \" + ce.getMessage());\n  }\n}"}
{"ids": "14228", "raw_code": "public void error(Level level,String messageId,String data[],Object session) throws LogException {\n  error(level,messageId,data,session,null);\n}"}
{"ids": "19630", "raw_code": "public synchronized void remove(IAudioProcessor processor){\n  processors.remove(processor);\n  buildFinalProcessor();\n}"}
{"ids": "15571", "raw_code": "private boolean isMethodContained(Method m,List<Method> wrapperMethods){\n  String name=m.getName();\n  Class<?>[] paramTypes=m.getParameterTypes();\n  Class<?> returnType=m.getReturnType();\n  for (  Method wm : wrapperMethods) {\n    if (name.equals(wm.getName()) && Arrays.equals(paramTypes,wm.getParameterTypes()) && returnType == wm.getReturnType()) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "74525", "raw_code": "void updatePressed(ActionEvent e,boolean newRoute){\n  String uName=_userName.getText();\n  Route g=checkNamesOK();\n  if (g == null) {\n    return;\n  }\n  g.setUserName(uName);\n  g.clearOutputTurnouts();\n  g.clearOutputSensors();\n  g.clearRouteSensors();\n  initializeIncludedList();\n  setTurnoutInformation(g);\n  setSensorInformation(g);\n  g.setOutputScriptName(scriptFile.getText());\n  g.setOutputSoundName(soundFile.getText());\n  setControlInformation(g);\n  curRoute=g;\n  finishUpdate();\n  status1.setText((newRoute ? Bundle.getMessage(\"RouteAddStatusCreated\") : Bundle.getMessage(\"RouteAddStatusUpdated\")) + \": \\\"\" + uName+ \"\\\" (\"+ _includedTurnoutList.size()+ \" \"+ Bundle.getMessage(\"Turnouts\")+ \", \"+ _includedSensorList.size()+ \" \"+ Bundle.getMessage(\"Sensors\")+ \")\");\n}"}
{"ids": "39369", "raw_code": "private static void checkForXStream(){\n  try {\n    Class.forName(\"com.thoughtworks.xstream.XStream\");\n    m_Present=true;\n  }\n catch (  Exception e) {\n    m_Present=false;\n  }\n}"}
{"ids": "32106", "raw_code": "@Override public int batchSize(){\n  return batchSize;\n}"}
{"ids": "65537", "raw_code": "public void clear(){\n  mAttachedScrap.clear();\n  recycleAndClearCachedViews();\n}"}
{"ids": "9776", "raw_code": "public DCheckUpdate(JFrame parent){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  initComponents();\n}"}
{"ids": "76931", "raw_code": "public static Automaton minimizeSimple(Automaton a){\n  Set<Integer> initialSet=new HashSet<Integer>();\n  a=determinizeSimple(Operations.reverse(a,initialSet),initialSet);\n  initialSet.clear();\n  a=determinizeSimple(Operations.reverse(a,initialSet),initialSet);\n  return a;\n}"}
{"ids": "71588", "raw_code": "public void addColumn(Column column){\n  if (column != null) {\n    columns.add(column);\n  }\n}"}
{"ids": "52969", "raw_code": "private boolean checkForNaNs(NumberVector vec){\n  for (int i=0, d=vec.getDimensionality(); i < d; i++) {\n    double v=vec.doubleValue(i);\n    if (v != v) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "35415", "raw_code": "public static void fill(StringBuilder strb,int offset){\n  while (strb.length() < offset)   strb.append(' ');\n}"}
{"ids": "35930", "raw_code": "public void openForWrite() throws EventException {\n  File f=new File(ConfigUtils.getInitialPropertyExpanded(m_address.getPathname()));\n  try {\n    if (!f.exists()) {\n      f.createNewFile();\n    }\n else {\n      LOGGER.info(\"appending to file=\" + m_address.getPathname());\n    }\n  }\n catch (  IOException ioe) {\n    throw new EventException(\"failed to create file=\" + m_address.getPathname() + \", e=\"+ ioe);\n  }\n  try {\n    m_fos=new FileOutputStream(f,true);\n  }\n catch (  FileNotFoundException fnfe) {\n    throw new EventException(\"failed to open file=\" + m_address.getPathname() + \", e=\"+ fnfe);\n  }\n}"}
{"ids": "74695", "raw_code": "public final double cos(){\n  return Math.cos(this.radians);\n}"}
{"ids": "60225", "raw_code": "public int size(){\n  return prefixes.size();\n}"}
{"ids": "83903", "raw_code": "public static String timestamp(DateTime ts){\n  return Long.toString(ts.getMillis() / 1000);\n}"}
{"ids": "67632", "raw_code": "public String consume(String name,boolean required) throws ParseException {\n  if (name == null) {\n    if (content == null && required) {\n      throw new ParseException(CoreErrorDomain.ERR.missingRequiredContent);\n    }\n    contentConsumed=true;\n    return content;\n  }\n  String value=attrs.get(name);\n  if (value == null) {\n    if (required) {\n      ParseException pe=new ParseException(CoreErrorDomain.ERR.missingAttribute);\n      pe.setInternalReason(\"Missing attribute: '\" + name + \"'\");\n      throw pe;\n    }\n    return null;\n  }\n  attrs.remove(name);\n  return value;\n}"}
{"ids": "72325", "raw_code": "public int copy(byte[] bytes,int at){\n  System.arraycopy(this.bytes,0,bytes,at,this.length);\n  return at + this.length;\n}"}
{"ids": "40132", "raw_code": "public void importKey(ECKey key){\n  lock.lock();\n  try {\n    checkKeyEncryptionStateMatches(key);\n    if (hasKey(key))     return;\n    importKeyLocked(key);\n    queueOnKeysAdded(ImmutableList.of(key));\n  }\n  finally {\n    lock.unlock();\n  }\n}"}
{"ids": "83513", "raw_code": "public ConnectionGroupTree(UserContext userContext,ConnectionGroup root,List<ObjectPermission.Type> permissions) throws GuacamoleException {\n  this.rootAPIGroup=new APIConnectionGroup(root);\n  retrievedGroups.put(root.getIdentifier(),this.rootAPIGroup);\n  User self=userContext.self();\n  this.connectionPermissions=self.getConnectionPermissions();\n  this.sharingProfilePermissions=self.getSharingProfilePermissions();\n  this.connectionDirectory=userContext.getConnectionDirectory();\n  this.connectionGroupDirectory=userContext.getConnectionGroupDirectory();\n  this.sharingProfileDirectory=userContext.getSharingProfileDirectory();\n  addConnectionGroupDescendants(Collections.singleton(root),permissions);\n}"}
{"ids": "9516", "raw_code": "private boolean containsSingleMetric(BufferedReader reader) throws FormatParseException {\n  try {\n    reader.mark(1);\n    char firstChar=(char)reader.read();\n    reader.reset();\n    return firstChar == '{';\n  }\n catch (  IOException e) {\n    throw new FormatParseException(\"IOException while determining if single or multiple metrics \",e);\n  }\n}"}
{"ids": "14916", "raw_code": "private void readServiceConfig() throws SSOException, SMSException {\n  if (debug.messageEnabled()) {\n    debug.message(\"G11Settings::ReadServiceConfig\");\n  }\n  SSOToken internalToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());\n  serviceSchemaManager=new ServiceSchemaManager(G11N_SETTINGS_SERVICE_NAME,internalToken);\n  ServiceSchema gsc=serviceSchemaManager.getGlobalSchema();\n  rawServiceData=gsc.getAttributeDefaults();\n}"}
{"ids": "86443", "raw_code": "public void refreshPreferences(Context context){\n  if (mEnabledResId != 0) {\n    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);\n    if (!prefs.getBoolean(context.getString(mEnabledResId),mEnabledDefault)) {\n      setTriggerKeys(Collections.<Long>emptySet());\n      return;\n    }\n  }\n  setTriggerKeys(KeyComboPreference.getKeyCodesForPreference(context,mAssignedKeysResId));\n}"}
{"ids": "2790", "raw_code": "void addInheritedTypes(TypeMirror typeMirror,Types typesUtils){\n  if (!CompilerUtils.typeMirrorInCollection(inheritedTypes,typeMirror,typesUtils)) {\n    inheritedTypes.add(typeMirror);\n  }\n}"}
{"ids": "83927", "raw_code": "public static Histogram multiply(Histogram x,double y){\n  return x.modifyEventCounters(null);\n}"}
{"ids": "31848", "raw_code": "public void addCacheParticipants(Map<UUID,IgniteUuid> allParticipants,Map<UUID,IgniteUuid> addedParticipants){\n  verStore.addParticipants(allParticipants,addedParticipants);\n}"}
{"ids": "13754", "raw_code": "private void savepostMni(String mnipostLocation,String mnipostRespLocation,List manageNameIdList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {\n  if (mnipostLocation != null && mnipostLocation.length() > 0) {\n    ManageNameIDServiceElement slsElemPost=objFact.createManageNameIDServiceElement();\n    slsElemPost.setBinding(httpPostBinding);\n    slsElemPost.setLocation(mnipostLocation);\n    slsElemPost.setResponseLocation(mnipostRespLocation);\n    manageNameIdList.add(slsElemPost);\n  }\n}"}
{"ids": "2636", "raw_code": "public static boolean goToUpdatePage(Context context){\n  final Uri playStoreUri=Uri.parse(\"market://details?id=\" + context.getPackageName());\n  FreshAirLog.i(\"Attempting to open Play Store update page at URI: \" + playStoreUri.toString());\n  final Intent playStoreIntent=new Intent(Intent.ACTION_VIEW,playStoreUri);\n  final PackageManager packageManager=context.getPackageManager();\n  for (  ResolveInfo resolveInfo : packageManager.queryIntentActivities(playStoreIntent,0)) {\n    final ActivityInfo resolveActivity=resolveInfo.activityInfo;\n    final String resolvePackageName=resolveActivity.packageName;\n    if (resolvePackageName.equals(\"com.android.vending\")) {\n      FreshAirLog.i(\"Opening Play Store update page...\");\n      playStoreIntent.setComponent(new ComponentName(resolvePackageName,resolveActivity.name));\n      context.startActivity(playStoreIntent);\n      return true;\n    }\n  }\n  FreshAirLog.e(\"Failed to find the Play Store as a candidate for the resolution of update URI: \" + playStoreUri.toString());\n  return false;\n}"}
{"ids": "60310", "raw_code": "public static List<String> toRelativeFiles(@NotNull VirtualFile root,@NotNull final Collection<VirtualFile> files){\n  ArrayList<String> rc=new ArrayList<String>(files.size());\n  for (  VirtualFile file : files) {\n    rc.add(relativePath(root,file));\n  }\n  return rc;\n}"}
{"ids": "31089", "raw_code": "synchronized static void ensureSecurityManager(){\n  if (System.getSecurityManager() == null) {\n    System.setSecurityManager(new RMISecurityManager());\n  }\n}"}
{"ids": "65575", "raw_code": "public static BigDecimal rate(int p_C_CurrencyFrom_ID,int p_C_CurrencyTo_ID,Timestamp p_ConversionDate,int p_C_ConversionType_ID,int p_AD_Client_ID,int p_AD_Org_ID) throws SQLException {\n  if (p_C_CurrencyFrom_ID == p_C_CurrencyTo_ID)   return Adempiere.ONE;\n  Timestamp ConversionDate=p_ConversionDate;\n  if (ConversionDate == null)   ConversionDate=new Timestamp(System.currentTimeMillis());\n  ConversionDate=Adempiere.trunc(ConversionDate);\n  int C_ConversionType_ID=p_C_ConversionType_ID;\n  if (C_ConversionType_ID == 0) {\n    String sql=\"SELECT C_ConversionType_ID \" + \"FROM C_ConversionType \" + \"WHERE IsDefault='Y'\"+ \" AND AD_Client_ID IN (0,?) \"+ \"ORDER BY AD_Client_ID DESC\";\n    C_ConversionType_ID=Adempiere.getSQLValue(sql,p_AD_Client_ID);\n  }\n  BigDecimal rate=null;\n  String sql=\"SELECT MultiplyRate \" + \"FROM C_Conversion_Rate \" + \"WHERE C_Currency_ID=? AND C_Currency_ID_To=?\"+ \" AND C_ConversionType_ID=?\"+ \" AND TRUNC(ValidFrom, 'DD') <= ?\"+ \" AND TRUNC(ValidTo, 'DD') >= ?\"+ \" AND AD_Client_ID IN (0,?) AND AD_Org_ID IN (0,?) \"+ \"ORDER BY AD_Client_ID DESC, AD_Org_ID DESC, ValidFrom DESC\";\n  PreparedStatement pstmt=Adempiere.prepareStatement(sql);\n  pstmt.setInt(1,p_C_CurrencyFrom_ID);\n  pstmt.setInt(2,p_C_CurrencyTo_ID);\n  pstmt.setInt(3,C_ConversionType_ID);\n  pstmt.setTimestamp(4,ConversionDate);\n  pstmt.setTimestamp(5,ConversionDate);\n  pstmt.setInt(6,p_AD_Client_ID);\n  pstmt.setInt(7,p_AD_Org_ID);\n  ResultSet rs=pstmt.executeQuery();\n  if (rs.next()) {\n    rate=rs.getBigDecimal(1);\n  }\n  rs.close();\n  pstmt.close();\n  if (rate == null)   return null;\n  return rate;\n}"}
{"ids": "34468", "raw_code": "public static List<Rule> parseReferential(String path){\n  Ruleset ruleset=DelphiRulesUtils.buildRuleSetFromXml(DelphiRulesUtils.getConfigurationFromFile(path));\n  List<Rule> rulesRepository=new ArrayList<Rule>();\n  for (  DelphiRule fRule : ruleset.getRules()) {\n    rulesRepository.add(createRepositoryRule(fRule));\n  }\n  return rulesRepository;\n}"}
{"ids": "14094", "raw_code": "public org.w3c.dom.Document encryptAndReplaceWSSElements(org.w3c.dom.Document doc,java.util.Map elmMap,java.lang.String encDataEncAlg,int encDataEncAlgStrength,String certAlias,int kekStrength,java.lang.String tokenType,java.lang.String providerID) throws EncryptionException {\n  return null;\n}"}
{"ids": "10122", "raw_code": "public void insertChild(Node node,int index){\n  node.detachFromParent();\n  node.parentNode=this;\n  try {\n    initChildNodes(node);\n    childNodes.add(index,node);\n  }\n catch (  IndexOutOfBoundsException ignore) {\n    throw new LagartoDOMException(\"Invalid node index: \" + index);\n  }\n  reindexChildren();\n}"}
{"ids": "73144", "raw_code": "private boolean betweenZeroAndOne(final String paramName,final double val){\n  if ((val < 0) || (val > 1)) {\n    JOptionPane.showMessageDialog(null,paramName + \"should be between 0 and 1\",\"Warning!\",JOptionPane.WARNING_MESSAGE);\n    return false;\n  }\n  return true;\n}"}
{"ids": "13683", "raw_code": "private static List<String> splitCamelCase(String className){\n  String remaining=className;\n  List<String> result=new ArrayList<String>();\n  while (!remaining.isEmpty()) {\n    boolean found=false;\n    for (int i=1; i < remaining.length(); i++) {\n      if (Character.isUpperCase(remaining.charAt(i))) {\n        result.add(remaining.substring(0,i));\n        remaining=remaining.substring(i);\n        found=true;\n        break;\n      }\n    }\n    if (!found) {\n      result.add(remaining);\n      remaining=\"\";\n    }\n  }\n  return result;\n}"}
{"ids": "15267", "raw_code": "public static NodeList selectNodeList(Node doc,String str,NamespaceContext nsctx) throws XPathException {\n  XPathFactory xpf=xpathFactoryCache.getInstanceForCurrentThread();\n  XPath xpath=xpf.newXPath();\n  xpath.setNamespaceContext(nsctx);\n  XPathExpression expr=xpath.compile(str);\n  return (NodeList)expr.evaluate(doc,XPathConstants.NODESET);\n}"}
{"ids": "24215", "raw_code": "private void generateDiscovery() throws SAXException {\n  handler.startElement(\"\",LOCATORS,LOCATORS,EMPTY);\n  generateLocators();\n  handler.endElement(\"\",LOCATORS,LOCATORS);\n}"}
{"ids": "4773", "raw_code": "protected BasicType(Class<T> type,int sqlType){\n  super(type,sqlType);\n  checkNull=!type.isPrimitive();\n}"}
{"ids": "36480", "raw_code": "public void applyProperties(){\n  for (  ParameterType type : allParameterTypes) {\n    String value=allParameterValues.getProperty(type.getKey());\n    ParameterService.setParameterValue(type,value);\n  }\n}"}
{"ids": "31695", "raw_code": "public void add(ClusterNode newNode){\n  if (node != null) {\n    nodes=new ArrayList<>(2);\n    nodes.add(node);\n    node=null;\n  }\n  nodes.add(newNode);\n}"}
{"ids": "74251", "raw_code": "public boolean checkIfBackupSetExists(String setName){\n  validateNotNullOrEmpty(setName);\n  try {\n    File file=new File(getBackupRoot(),setName);\n    if (file.exists()) {\n      return true;\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Exception during backup set directory exists check\");\n  }\n  return false;\n}"}
{"ids": "39544", "raw_code": "public static String[] toQuotedAndCommaSeparatedArray(String str) throws IOException {\n  LinkedList<String> values=new LinkedList<String>();\n  StreamTokenizer tt=new StreamTokenizer(new StringReader(str));\n  tt.wordChars('a','z');\n  tt.wordChars('A','Z');\n  tt.wordChars(128 + 32,255);\n  tt.whitespaceChars(0,' ');\n  tt.quoteChar('\"');\n  tt.quoteChar('\\'');\n  while (tt.nextToken() != StreamTokenizer.TT_EOF) {\nswitch (tt.ttype) {\ncase StreamTokenizer.TT_WORD:\ncase '\"':\ncase '\\'':\n      values.add(tt.sval);\n    break;\n}\n}\nreturn values.toArray(new String[values.size()]);\n}"}
{"ids": "4263", "raw_code": "public SmartThresholds parse(final Resource thresholdFileResource) throws IOException {\n  final SmartThresholds holder=new SmartThresholds();\n  BufferedReader reader=null;\n  try {\n    reader=new BufferedReader(new InputStreamReader(thresholdFileResource.getInputStream()));\n    String line;\n    while ((line=reader.readLine()) != null) {\n      if (line.startsWith(\"SM\")) {\n        String[] lineInput=line.split(\"\\\\s+\");\n        holder.addThreshold(new SmartThreshold(lineInput));\n      }\n    }\n  }\n  finally {\n    if (reader != null) {\n      reader.close();\n    }\n  }\n  return holder;\n}"}
{"ids": "9302", "raw_code": "public void shutdown(){\n  ExecutorService executor=Executors.newScheduledThreadPool(0);\n  executor.submit(createShutdown(0));\n}"}
{"ids": "39462", "raw_code": "@Override public Point drawingToView(Point2D.Double p){\n  return new Point((int)(p.x * scaleFactor) - translation.x,(int)(p.y * scaleFactor) - translation.y);\n}"}
{"ids": "80594", "raw_code": "public void addDescriptor(final SetupDescriptor desc){\n  descriptors.add(desc);\n}"}
{"ids": "26340", "raw_code": "public static String compileProgressSuccessAction(String progressSuccessAction) throws TemplateModelException {\n  Environment env=CommonFtlUtil.getCurrentEnvironment();\n  return compileProgressSuccessAction(progressSuccessAction,ContextFtlUtil.getRequest(env),ContextFtlUtil.getResponse(env));\n}"}
{"ids": "44078", "raw_code": "public static String join(String separator,float... elements){\n  if (elements == null || elements.length == 0) {\n    return \"\";\n  }\n  List<Number> list=new ArrayList<Number>(elements.length);\n  for (  Float elem : elements) {\n    list.add(elem);\n  }\n  return join(separator,list);\n}"}
{"ids": "57104", "raw_code": "public static void putUnsignedByte(ByteBuffer bb,short v){\n  bb.put((byte)(v & 0xff));\n}"}
{"ids": "76818", "raw_code": "@Override public Trie optimize(Trie orig){\n  List<CharSequence> cmds=orig.cmds;\n  List<Row> rows=new ArrayList<>();\n  List<Row> orows=orig.rows;\n  int remap[]=new int[orows.size()];\n  for (int j=orows.size() - 1; j >= 0; j--) {\n    Row now=new Remap(orows.get(j),remap);\n    boolean merged=false;\n    for (int i=0; i < rows.size(); i++) {\n      Row q=merge(now,rows.get(i));\n      if (q != null) {\n        rows.set(i,q);\n        merged=true;\n        remap[j]=i;\n        break;\n      }\n    }\n    if (merged == false) {\n      remap[j]=rows.size();\n      rows.add(now);\n    }\n  }\n  int root=remap[orig.root];\n  Arrays.fill(remap,-1);\n  rows=removeGaps(root,rows,new ArrayList<Row>(),remap);\n  return new Trie(orig.forward,remap[root],cmds,rows);\n}"}
{"ids": "8950", "raw_code": "protected void waitForExternalStoreMount() throws Exception {\n  String extStorageState=Environment.getExternalStorageState();\n  int currentWaitTime=0;\n  while (!extStorageState.equals(Environment.MEDIA_MOUNTED)) {\n    Log.i(LOG_TAG,\"Waiting for SD card...\");\n    currentWaitTime=timeoutWait(currentWaitTime,DEFAULT_WAIT_POLL_TIME,DEFAULT_MAX_WAIT_TIME,\"Timed out waiting for SD Card to be ready!\");\n    extStorageState=Environment.getExternalStorageState();\n  }\n}"}
{"ids": "50960", "raw_code": "public boolean uploadAndInstallApk(@NotNull IDevice device,@NotNull String packageName,@NotNull File localFile,@NotNull LaunchStatus launchStatus){\n  if (!needsInstall(device,localFile,packageName)) {\n    return true;\n  }\n  String remotePath=\"/data/local/tmp/\" + packageName;\n  myPrinter.stdout(\"$ adb push \" + localFile + \" \"+ remotePath);\n  try {\n    device.pushFile(localFile.getPath(),remotePath);\n    boolean installed=installApp(device,remotePath,packageName,launchStatus);\n    if (installed) {\n      myInstalledApkCache.setInstalled(device,localFile,packageName);\n    }\n    return installed;\n  }\n catch (  Exception e) {\n    myPrinter.stderr(e.toString());\n    return false;\n  }\n}"}
{"ids": "6699", "raw_code": "public void open(final long[] list,final int position){\n  launchPlayerActivity=true;\nsynchronized (this) {\n    if (mShuffleMode == SHUFFLE_AUTO) {\n      mShuffleMode=SHUFFLE_NORMAL;\n    }\n    final long oldId=getAudioId();\n    final int listlength=list.length;\n    boolean newlist=true;\n    if (mPlayListLen == listlength) {\n      newlist=false;\n      for (int i=0; i < listlength; i++) {\n        if (list[i] != mPlayList[i]) {\n          newlist=true;\n          break;\n        }\n      }\n    }\n    if (newlist) {\n      addToPlayList(list,-1);\n      notifyChange(QUEUE_CHANGED);\n    }\n    if (position >= 0) {\n      mPlayPos=position;\n    }\n else {\n      mPlayPos=mShuffler.nextInt(mPlayListLen);\n    }\n    mHistory.clear();\n    openCurrentAndNext();\n    if (oldId != getAudioId()) {\n      notifyChange(META_CHANGED);\n    }\n  }\n}"}
{"ids": "29", "raw_code": "protected static Node deserializeString(String doc){\n  try {\n    StringReader reader=new StringReader(doc);\n    StreamSource source=new StreamSource(reader);\n    DOMResult result=new DOMResult();\n    TransformerFactory tf=TransformerFactory.newInstance();\n    Transformer transformer=tf.newTransformer();\n    transformer.setOutputProperty(OutputKeys.ENCODING,DEFAULT_ENCODING);\n    transformer.setOutputProperty(OutputKeys.INDENT,DEFAULT_INDENT);\n    transformer.transform(source,result);\n    return result.getNode();\n  }\n catch (  Throwable e) {\n    log.log(Level.SEVERE,\"Failed to serialize node\",e);\n  }\n  return null;\n}"}
{"ids": "71279", "raw_code": "public void sendEventToAgent(final String event){\nsynchronized (eventSocket) {\n    eventWriter.print(event);\n    eventWriter.flush();\n  }\n}"}
{"ids": "1722", "raw_code": "private void applyJMSObjects(HashMap<String,String> filters){\n  StringWriter writer=new StringWriter();\n  PrintWriter printWriter=new PrintWriter(writer);\n  printWriter.println();\n  for (  String str : getQueueList()) {\n    printWriter.println(\"      <queue name=\\\"\" + str + \"\\\"/>\");\n  }\n  for (  String str : getTopicList()) {\n    printWriter.println(\"      <topic name=\\\"\" + str + \"\\\"/>\");\n  }\n  filters.put(\"${jms-list.settings}\",writer.toString());\n}"}
{"ids": "65639", "raw_code": "public void addSelectionColumn(GridField mField){\n  log.config(mField.getHeader());\n  int displayLength=mField.getDisplayLength();\n  if (displayLength <= 0 || displayLength > FIELDLENGTH)   mField.setDisplayLength(FIELDLENGTH);\n else   displayLength=0;\n  WEditor editor=null;\n  Label label=null;\n  Row panel=new Row();\n  contentSimpleRows.appendChild(panel);\n  if (mField.isRange()) {\n    Hbox box=new Hbox();\n    editor=WebEditorFactory.getEditor(mField,false);\n    label=editor.getLabel();\n    editor.setMandatory(false);\n    editor.setReadWrite(true);\n    editor.dynamicDisplay();\n    Component fieldLabel=editor.getComponent();\n    box.appendChild(editor.getComponent());\n    rangeFirstEditor.add(mField.getColumnName());\n    WEditor toRangeEditor=WebEditorFactory.getEditor(mField,false);\n    toRangeEditor.setMandatory(false);\n    toRangeEditor.setReadWrite(true);\n    toRangeEditor.dynamicDisplay();\n    m_sEditors2.add(toRangeEditor);\n    Label separator=new Label(\" - \");\n    box.appendChild(separator);\n    Component fieldLabel1=toRangeEditor.getComponent();\n    box.appendChild(toRangeEditor.getComponent());\n    if (displayLength > 0)     mField.setDisplayLength(displayLength);\n    if (isTwoColumns) {\n      if (!isPair)       panel=new Row();\n    }\n else     panel=new Row();\n    panel.appendChild(LayoutUtils.makeRightAlign(label));\n    panel.appendChild(box);\n    fieldLabel.addEventListener(Events.ON_OK,this);\n    fieldLabel1.addEventListener(Events.ON_OK,this);\n  }\n else {\n    editor=WebEditorFactory.getEditor(mField,false);\n    label=editor.getLabel();\n    editor.setMandatory(false);\n    editor.setReadWrite(true);\n    editor.dynamicDisplay();\n    Component fieldLabel=editor.getComponent();\n    if (displayLength > 0)     mField.setDisplayLength(displayLength);\n    panel.appendChild(LayoutUtils.makeRightAlign(label));\n    panel.appendChild(fieldLabel);\n    fieldLabel.addEventListener(Events.ON_OK,this);\n    m_sEditors2.add(null);\n  }\n  m_sEditors.add(editor);\n}"}
{"ids": "75716", "raw_code": "public void addSearchListener(SearchListener l){\n  m_SearchListeners.add(l);\n}"}
{"ids": "14077", "raw_code": "public boolean isSingleAttributeContainer(){\n  return false;\n}"}
{"ids": "47688", "raw_code": "public void open(File file) throws IOException {\n  checkAWTPermission();\n  checkExec();\n  checkActionSupport(Action.OPEN);\n  checkFileValidation(file);\n  peer.open(file);\n}"}
{"ids": "26844", "raw_code": "public static String convertISO8601DurationToNormalTime(String isoTime){\n  String formattedTime=new String();\n  if (isoTime.contains(\"H\") && isoTime.contains(\"M\") && isoTime.contains(\"S\")) {\n    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));\n    String minutes=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('M'));\n    String seconds=isoTime.substring(isoTime.indexOf('M') + 1,isoTime.indexOf('S'));\n    formattedTime=hours + \":\" + formatTo2Digits(minutes)+ \":\"+ formatTo2Digits(seconds);\n  }\n else   if (!isoTime.contains(\"H\") && isoTime.contains(\"M\") && isoTime.contains(\"S\")) {\n    String minutes=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('M'));\n    String seconds=isoTime.substring(isoTime.indexOf('M') + 1,isoTime.indexOf('S'));\n    formattedTime=minutes + \":\" + formatTo2Digits(seconds);\n  }\n else   if (isoTime.contains(\"H\") && !isoTime.contains(\"M\") && isoTime.contains(\"S\")) {\n    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));\n    String seconds=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('S'));\n    formattedTime=hours + \":00:\" + formatTo2Digits(seconds);\n  }\n else   if (isoTime.contains(\"H\") && isoTime.contains(\"M\") && !isoTime.contains(\"S\")) {\n    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));\n    String minutes=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('M'));\n    formattedTime=hours + \":\" + formatTo2Digits(minutes)+ \":00\";\n  }\n else   if (!isoTime.contains(\"H\") && !isoTime.contains(\"M\") && isoTime.contains(\"S\")) {\n    String seconds=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('S'));\n    formattedTime=\"0:\" + formatTo2Digits(seconds);\n  }\n else   if (!isoTime.contains(\"H\") && isoTime.contains(\"M\") && !isoTime.contains(\"S\")) {\n    String minutes=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('M'));\n    formattedTime=minutes + \":00\";\n  }\n else   if (isoTime.contains(\"H\") && !isoTime.contains(\"M\") && !isoTime.contains(\"S\")) {\n    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));\n    formattedTime=hours + \":00:00\";\n  }\n  return formattedTime;\n}"}
{"ids": "68827", "raw_code": "public byte map(byte src){\n  char c=map((char)src);\n  if (c < Byte.MIN_VALUE || c > Byte.MAX_VALUE) {\n    return 0;\n  }\n  return (byte)c;\n}"}
{"ids": "50442", "raw_code": "public String wrapIfKeywordOrBuiltIn(String name){\n  if (KEYWORD_BUILT_IN_SET.contains(name)) {\n    return name + \"_\";\n  }\n  return name;\n}"}
{"ids": "35283", "raw_code": "public IssueMatcher add(){\n  IssueMatcher issueMatcher=new IssueMatcher();\n  issueMatchers.add(issueMatcher);\n  return issueMatcher;\n}"}
{"ids": "4050", "raw_code": "private <T>InjectScope<T> findScope(AnnotatedElement annElement){\n  for (  Annotation ann : annElement.getAnnotations()) {\n    Class<? extends Annotation> annType=ann.annotationType();\n    if (annType.isAnnotationPresent(Scope.class)) {\n      Supplier<InjectScope<T>> scopeGen=(Supplier)_scopeMap.get(annType);\n      if (scopeGen != null) {\n        return scopeGen.get();\n      }\n else {\n        log.fine(L.l(\"@{0} is an unknown scope\",annType.getSimpleName()));\n      }\n    }\n  }\n  return new InjectScopeFactory<>();\n}"}
{"ids": "75446", "raw_code": "public void removePropertyChangeListener(IPropertyChangeListener listener){\n  listeners.remove(listener);\n}"}
{"ids": "48457", "raw_code": "@Override public int previous(){\n  CharacterIterator text=getText();\n  if (current() == text.getBeginIndex()) {\n    return BreakIterator.DONE;\n  }\n  int start=current();\n  int lastResult=cachedLastKnownBreak;\n  if (lastResult >= start || lastResult <= BreakIterator.DONE) {\n    getPrevious();\n    lastResult=handlePrevious();\n  }\n else {\n    text.setIndex(lastResult);\n  }\n  int result=lastResult;\n  while (result != BreakIterator.DONE && result < start) {\n    lastResult=result;\n    result=handleNext();\n  }\n  text.setIndex(lastResult);\n  cachedLastKnownBreak=lastResult;\n  return lastResult;\n}"}
{"ids": "68363", "raw_code": "public DeferredImageReplacedElement(ImageResource imageResource,RepaintListener repaintListener,int w,int h){\n  this._imageResource=imageResource;\n  _loaded=false;\n  this.repaintListener=repaintListener;\n  if (w == -1 && h == -1) {\n    _doScaleImage=false;\n    _targetHeight=1;\n    _targetWidth=1;\n  }\n else {\n    _doScaleImage=true;\n    _targetHeight=Math.max(1,h);\n    _targetWidth=Math.max(1,w);\n  }\n  _image=ImageUtil.createCompatibleBufferedImage(_targetWidth,_targetHeight);\n}"}
{"ids": "46773", "raw_code": "public boolean startsWith(Name n){\n  if (n instanceof CompoundName) {\n    return (impl.startsWith(n.size(),n.getAll()));\n  }\n else {\n    return false;\n  }\n}"}
{"ids": "81350", "raw_code": "public ParameterizedGenericMethodBinding(MethodBinding originalMethod,TypeBinding[] typeArguments,LookupEnvironment environment){\n  this.environment=environment;\n  this.modifiers=originalMethod.modifiers;\n  this.selector=originalMethod.selector;\n  this.declaringClass=originalMethod.declaringClass;\n  this.typeVariables=Binding.NO_TYPE_VARIABLES;\n  this.typeArguments=typeArguments;\n  this.isRaw=false;\n  this.tagBits=originalMethod.tagBits;\n  this.originalMethod=originalMethod;\n  this.parameters=Scope.substitute(this,originalMethod.parameters);\n  this.returnType=Scope.substitute(this,originalMethod.returnType);\n  this.thrownExceptions=Scope.substitute(this,originalMethod.thrownExceptions);\n  if (this.thrownExceptions == null)   this.thrownExceptions=Binding.NO_EXCEPTIONS;\n  checkMissingType: {\n    if ((this.tagBits & TagBits.HasMissingType) != 0)     break checkMissingType;\n    if ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {\n      this.tagBits|=TagBits.HasMissingType;\n      break checkMissingType;\n    }\n    for (int i=0, max=this.parameters.length; i < max; i++) {\n      if ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {\n        this.tagBits|=TagBits.HasMissingType;\n        break checkMissingType;\n      }\n    }\n    for (int i=0, max=this.thrownExceptions.length; i < max; i++) {\n      if ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {\n        this.tagBits|=TagBits.HasMissingType;\n        break checkMissingType;\n      }\n    }\n  }\n  this.wasInferred=true;\n}"}
{"ids": "83779", "raw_code": "public byte[] sign(byte[] hash){\n  ECDSASigner signer=new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest()));\n  signer.init(true,new ECPrivateKeyParameters(priv,domain));\n  BigInteger[] signature=signer.generateSignature(hash);\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  try {\n    DERSequenceGenerator seq=new DERSequenceGenerator(baos);\n    seq.addObject(new ASN1Integer(signature[0]));\n    seq.addObject(new ASN1Integer(toCanonicalS(signature[1])));\n    seq.close();\n    return baos.toByteArray();\n  }\n catch (  IOException e) {\n  }\n  return null;\n}"}
{"ids": "9892", "raw_code": "public TimePeriod(Date startTime,Date endTime){\n  if (startTime != null && endTime != null && !endTime.after(startTime)) {\n    throw new IllegalArgumentException(\"EndTime: \" + endTime + \" is not after startTime: \"+ startTime);\n  }\n  this.startTime=startTime;\n  this.endTime=endTime;\n}"}
{"ids": "73261", "raw_code": "JMenu createEditMenu(){\n  JMenu editMenu=new JMenu(\"Edit\");\n  editMenu.add(actionManager.getCutAction());\n  editMenu.add(actionManager.getCopyAction());\n  editMenu.add(actionManager.getPasteAction());\n  editMenu.add(actionManager.getDeleteAction());\n  editMenu.addSeparator();\n  editMenu.add(actionManager.getClearSourceNeuronsAction());\n  editMenu.add(actionManager.getSetSourceNeuronsAction());\n  editMenu.add(actionManager.getConnectionMenu());\n  editMenu.add(actionManager.getAddSynapseGroupAction());\n  editMenu.addSeparator();\n  editMenu.add(actionManager.getRandomizeObjectsAction());\n  editMenu.add(actionManager.getShowAdjustSynapsesDialog());\n  editMenu.addSeparator();\n  editMenu.add(actionManager.getLayoutMenu());\n  editMenu.add(actionManager.getGroupMenu());\n  editMenu.addSeparator();\n  editMenu.add(createAlignMenu());\n  editMenu.add(createSpacingMenu());\n  editMenu.addSeparator();\n  editMenu.add(actionManager.getSetNeuronPropertiesAction());\n  editMenu.add(actionManager.getSetSynapsePropertiesAction());\n  editMenu.addSeparator();\n  editMenu.add(createSelectionMenu());\n  return editMenu;\n}"}
{"ids": "84576", "raw_code": "public void currentState(long state,Model currentModel){\n  currentState=state;\n  if (loggers != null) {\n    for (    Logger logger : loggers) {\n      logger.log(state);\n    }\n  }\n}"}
{"ids": "13974", "raw_code": "public boolean isSigned(){\n  return signed;\n}"}
{"ids": "8429", "raw_code": "public Object parseText(String text){\n  if (text == null || text.length() == 0) {\n    throw new IllegalArgumentException(\"The JSON input text should neither be null nor empty.\");\n  }\n  return parse(new LineColumnReader(new StringReader(text)));\n}"}
{"ids": "73691", "raw_code": "protected void addChooserFilters(JFileChooser chooser){\n  javax.swing.filechooser.FileNameExtensionFilter filter;\n  chooser.addChoosableFileFilter(filter=new javax.swing.filechooser.FileNameExtensionFilter(\"Intel Hex Format Firmware (*.hex)\",\"hex\"));\n  chooser.setFileFilter(filter);\n}"}
{"ids": "8588", "raw_code": "public void onStop(){\n  if (null != mService) {\n    if (null != mContext) {\n      mContext.unbindService(mServiceConnection);\n    }\n    mServiceConnection=null;\n    mService=null;\n  }\n}"}
{"ids": "10721", "raw_code": "private void eliminarUsuariosOrgano(GestionOrganizacionBI organizacionBI,OrganizacionVO organizacionVO){\n  organizacionBI.eliminarUsuariosOrgano(organizacionVO.getId());\n}"}
{"ids": "73251", "raw_code": "private static void addPreviousLayer(List<List<Neuron>> layers,List<Neuron> sourceLayer,List<Neuron> layerToCheck){\n  final int MAXLAYERS=100;\n  Set<Neuron> newLayerTemp=new HashSet<Neuron>();\n  boolean theNextLayerIsTheSourceLayer=false;\n  for (  Neuron neuron : layerToCheck) {\n    for (    Synapse synapse : neuron.getFanIn()) {\n      Neuron sourceNeuron=synapse.getSource();\n      if (sourceLayer.contains(sourceNeuron)) {\n        theNextLayerIsTheSourceLayer=true;\n      }\n      if (sourceNeuron == neuron) {\n        continue;\n      }\n      newLayerTemp.add(synapse.getSource());\n    }\n  }\n  if ((theNextLayerIsTheSourceLayer) || (newLayerTemp.size() == 0) || (layers.size() > MAXLAYERS)) {\n    layers.add(sourceLayer);\n  }\n else {\n    List<Neuron> newLayer=new ArrayList<Neuron>(newLayerTemp);\n    Collections.sort(newLayer,OrientationComparator.X_ORDER);\n    layers.add(newLayer);\n    addPreviousLayer(layers,sourceLayer,newLayer);\n  }\n}"}
{"ids": "85039", "raw_code": "public static int findNonwhitespaceCharacter(String s,int index){\n  int sLength=s.length();\n  while (index < sLength && Character.isWhitespace(s.charAt(index))) {\n    index++;\n  }\n  return index;\n}"}
{"ids": "31174", "raw_code": "public Primitive(Object value){\n  this.value=value;\n  type=(value != null) ? Utilities.getPrimitiveType(value.getClass()) : null;\n  if (type == null) {\n    throw new IllegalArgumentException(\"value is not a primitive: \" + value);\n  }\n}"}
{"ids": "35882", "raw_code": "public void createCashBasedJournalEntriesAndReversalsForSavingsTax(final Office office,final String currencyCode,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited,final Long savingsProductId,final Long paymentTypeId,final Long savingsId,final String transactionId,final Date transactionDate,final BigDecimal amount,final Boolean isReversal,final List<TaxPaymentDTO> taxDetails){\n  for (  TaxPaymentDTO taxPaymentDTO : taxDetails) {\n    if (taxPaymentDTO.getAmount() != null) {\n      if (taxPaymentDTO.getCreditAccountId() == null) {\n        createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeCredited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal);\n      }\n else {\n        createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,taxPaymentDTO.getCreditAccountId(),savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal);\n      }\n    }\n  }\n  createCashBasedDebitJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeDebited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,amount,isReversal);\n}"}
{"ids": "8276", "raw_code": "public static Calendar clearTime(final Calendar self){\n  clearTimeCommon(self);\n  return self;\n}"}
{"ids": "73599", "raw_code": "@Override public void handleKey(int virtualKeyCode,int transitionState,char keyChar){\n  switchControlKeys(virtualKeyCode,transitionState);\n  inputBuffer.add(new GlobalKeyEvent(this,virtualKeyCode,transitionState,keyChar,menuPressed,shiftPressed,controlPressed,extendedKey));\n}"}
{"ids": "26976", "raw_code": "public static String stripLeadingPeriod(String s){\n  if (null != s && s.startsWith(\".\"))   return s.substring(Math.min(1,s.length()),s.length());\n  return s;\n}"}
{"ids": "41044", "raw_code": "private void cleanUpLabels(){\n  int id=0;\n  for (Iterator<Label> i=labels.iterator(); i.hasNext(); ) {\n    Label label=i.next();\n    if (label.isEmpty()) {\n      i.remove();\n    }\n else {\n      label.compact();\n      label.id=id++;\n    }\n  }\n}"}
{"ids": "63151", "raw_code": "public static long nanosFromDate(long ms){\n  Calendar cal=getCalendar();\n  cal.setTimeInMillis(ms);\n  return nanosFromCalendar(cal);\n}"}
{"ids": "22078", "raw_code": "protected BalancedWebResource createHttpsClient(final String username,final String password,List<String> hosts) throws NoSuchAlgorithmException {\n  return createHttpsClient(username,password,hosts,true);\n}"}
{"ids": "81453", "raw_code": "public static char[] createArraySignature(char[] typeSignature,int arrayCount){\n  if (arrayCount == 0)   return typeSignature;\n  int sigLength=typeSignature.length;\n  char[] result=new char[arrayCount + sigLength];\n  for (int i=0; i < arrayCount; i++) {\n    result[i]=C_ARRAY;\n  }\n  System.arraycopy(typeSignature,0,result,arrayCount,sigLength);\n  return result;\n}"}
{"ids": "71673", "raw_code": "public void println() throws IOException {\n  writer.write(format.getLineSeparator());\n}"}
{"ids": "12721", "raw_code": "protected void increaseBufferSize(int minSize){\n  int newLength=buf.length;\n  while (newLength < minSize)   newLength*=2;\n  double[] newBuf=new double[newLength];\n  int avail=currentlyInBuffer();\n  System.arraycopy(buf,readPos,newBuf,0,avail);\n  buf=newBuf;\n  readPos=0;\n  writePos=avail;\n}"}
{"ids": "37825", "raw_code": "private void handleEnumeratedAttribute(Instances trainInstances) throws Exception {\n  Instance instance;\n  m_distribution=new Distribution(m_complexityIndex,trainInstances.numClasses());\n  Enumeration<Instance> enu=trainInstances.enumerateInstances();\n  while (enu.hasMoreElements()) {\n    instance=enu.nextElement();\n    if (!instance.isMissing(m_attIndex)) {\n      m_distribution.add((int)instance.value(m_attIndex),instance);\n    }\n  }\n  if (m_distribution.check(m_minNoObj)) {\n    m_numSubsets=m_complexityIndex;\n    m_infoGain=infoGainCrit.splitCritValue(m_distribution,m_sumOfWeights);\n    m_gainRatio=gainRatioCrit.splitCritValue(m_distribution,m_sumOfWeights,m_infoGain);\n  }\n}"}
{"ids": "44881", "raw_code": "public static String encode(byte[] data){\n  int start=0;\n  int len=data.length;\n  StringBuffer buf=new StringBuffer(data.length * 3 / 2);\n  int end=len - 3;\n  int i=start;\n  int n=0;\n  while (i <= end) {\n    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 0x0ff) << 8) | (((int)data[i + 2]) & 0x0ff);\n    buf.append(legalChars[(d >> 18) & 63]);\n    buf.append(legalChars[(d >> 12) & 63]);\n    buf.append(legalChars[(d >> 6) & 63]);\n    buf.append(legalChars[d & 63]);\n    i+=3;\n    if (n++ >= 14) {\n      n=0;\n    }\n  }\n  if (i == start + len - 2) {\n    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 255) << 8);\n    buf.append(legalChars[(d >> 18) & 63]);\n    buf.append(legalChars[(d >> 12) & 63]);\n    buf.append(legalChars[(d >> 6) & 63]);\n    buf.append(\"=\");\n  }\n else   if (i == start + len - 1) {\n    int d=(((int)data[i]) & 0x0ff) << 16;\n    buf.append(legalChars[(d >> 18) & 63]);\n    buf.append(legalChars[(d >> 12) & 63]);\n    buf.append(\"==\");\n  }\n  return buf.toString();\n}"}
{"ids": "82053", "raw_code": "public static Font createBitmapFont(String name,Image bitmap,int[] cutOffsets,int[] charWidth,String charsets){\n  Font f=createBitmapFont(bitmap,cutOffsets,charWidth,charsets);\n  bitmapCache.put(name,f);\n  return f;\n}"}
{"ids": "23822", "raw_code": "static boolean isTenured(MemoryPoolMXBean memoryPoolMXBean){\n  if (memoryPoolMXBean.getType() != MemoryType.HEAP) {\n    return false;\n  }\n  String name=memoryPoolMXBean.getName();\n  return name.equals(\"CMS Old Gen\") || name.equals(\"PS Old Gen\") || name.equals(\"G1 Old Gen\")|| name.equals(\"Old Space\")|| name.equals(\"Tenured Gen\")|| name.equals(\"Java heap\")|| name.equals(\"GenPauseless Old Gen\")|| (HEAP_POOL != null && name.equals(HEAP_POOL));\n}"}
{"ids": "73095", "raw_code": "public static <T>T interpreterOnly(Callable<T> callable) throws Exception {\n  return callable.call();\n}"}
{"ids": "42885", "raw_code": "private void addSelectorForProtocol(Properties settings,String protocol,ProtocolDispatchSelector ps){\n  String proxy=settings.getProperty(protocol);\n  if (proxy != null) {\n    FixedProxySelector protocolSelector=ProxyUtil.parseProxySettings(proxy);\n    ps.setSelector(protocol,protocolSelector);\n  }\n}"}
{"ids": "55690", "raw_code": "public static void readSkel(BufferedReader reader) throws IOException {\n  List<String> lines=new ArrayList<String>();\n  StringBuilder section=new StringBuilder();\n  String ln;\n  while ((ln=reader.readLine()) != null) {\n    if (ln.startsWith(\"---\")) {\n      lines.add(section.toString());\n      section.setLength(0);\n    }\n else {\n      section.append(ln);\n      section.append(NL);\n    }\n  }\n  if (section.length() > 0)   lines.add(section.toString());\n  if (lines.size() != size) {\n    Out.error(ErrorMessages.WRONG_SKELETON);\n    throw new GeneratorException();\n  }\n  line=new String[size];\n  for (int i=0; i < size; i++)   line[i]=lines.get(i);\n}"}
{"ids": "5846", "raw_code": "public boolean contains(File file,String fileContent){\n  if (exists(file)) {\n    String content=readFileContent(file);\n    return content != null && content.equals(fileContent);\n  }\n  return false;\n}"}
{"ids": "5439", "raw_code": "public static boolean[][] loadImage(File file,char offChar) throws FileNotFoundException, RuntimeException {\n  ArrayList<String> rows=loadImagePad(file,offChar);\n  String s=rows.get(0);\n  boolean[][] img=new boolean[rows.size()][s.length()];\n  for (int i=0; i < rows.size(); i++) {\n    s=rows.get(i);\n    for (int j=0; j < s.length(); j++) {\n      char c=s.charAt(j);\n      if (c == offChar) {\n        img[i][j]=false;\n      }\n else {\n        img[i][j]=true;\n      }\n    }\n  }\n  return img;\n}"}
{"ids": "30310", "raw_code": "protected void updateReceiptStatusWhenCancelled(final String receiptNumber){\n  final List<EgdmCollectedReceipt> egdmCollectedReceipts=demandGenericDAO.getAllEgdmCollectedReceipts(receiptNumber);\n  if (egdmCollectedReceipts != null && !egdmCollectedReceipts.isEmpty())   for (  final EgdmCollectedReceipt egDmCollectedReceipt : egdmCollectedReceipts) {\n    egDmCollectedReceipt.setStatus(DemandConstants.CANCELLED_RECEIPT);\n    egDmCollectedReceipt.setUpdatedTime(new Date());\n    egdmCollectedReceiptDAO.update(egDmCollectedReceipt);\n  }\n}"}
{"ids": "1012", "raw_code": "public void addAnimation(int id,Animation... animations){\n  if (mAnimations.get(id) == null) {\n    mAnimations.put(id,new ArrayList<Animation>(animations.length));\n    if (id != Animation.FULL_PAGE) {\n      mAnimatedViews.add(id);\n    }\n  }\n  ArrayList<Animation> anims=mAnimations.get(id);\n  Collections.addAll(anims,animations);\n}"}
{"ids": "10350", "raw_code": "protected boolean existsInRange(String x,int minLength,int maxLength){\n  x=StringUtils.trimToNull(x);\n  return x != null && x.length() >= minLength && x.length() <= maxLength;\n}"}
{"ids": "31392", "raw_code": "public synchronized void unwatch(String pathName) throws IOException {\n  unregisterAll(Paths.get(pathName));\n}"}
{"ids": "45", "raw_code": "public Criteria addProperty(String name,String value,Operator operator){\n  properties.add(new PropertyCriteria(name,value,operator));\n  return this;\n}"}
{"ids": "75032", "raw_code": "public void removeColumn(final String columnName){\n  if (columnName == null) {\n    return;\n  }\n  final List<String> cols=Arrays.asList(getInfo().headers);\n  final int colIndex=cols.indexOf(columnName);\n  removeColumn(colIndex);\n}"}
{"ids": "21720", "raw_code": "public static UnManagedProtectionSet checkUnManagedProtectionSetExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {\n  List<UnManagedProtectionSet> cgs=CustomQueryUtility.getUnManagedProtectionSetByNativeGuid(dbClient,nativeGuid);\n  Iterator<UnManagedProtectionSet> cgsItr=cgs.iterator();\n  if (cgsItr.hasNext()) {\n    return cgsItr.next();\n  }\n  return null;\n}"}
{"ids": "31754", "raw_code": "private void checkQuery(String expRes,String qry) throws Exception {\n  assertEquals(0,executeHiveQuery(\"drop table if exists result\"));\n  assertEquals(0,executeHiveQuery(\"create table result \" + \"row format delimited fields terminated by ' ' \" + \"stored as textfile \"+ \"location '/result' as \"+ qry));\n  IgfsInputStream in=igfs.open(new IgfsPath(\"/result/000000_0\"));\n  byte[] buf=new byte[(int)in.length()];\n  in.read(buf);\n  assertEquals(expRes,new String(buf));\n}"}
{"ids": "55398", "raw_code": "public void close(){\n  stopTimers();\n  closed=true;\n  window.dispose();\n  if (listener != null) {\n    listener.notificationRemoved(this);\n  }\n  if (activityListener != null) {\n    ActivityTracker.removeActivityListener(activityListener);\n  }\n}"}
{"ids": "27584", "raw_code": "protected boolean shouldMove(final ILoadBalancerService loadBalancerService){\n  if (loadBalancerService == null)   throw new IllegalArgumentException();\n  final boolean highlyUtilizedService;\n  try {\n    final UUID serviceUUID=resourceManager.getDataServiceUUID();\n    highlyUtilizedService=loadBalancerService.isHighlyUtilizedDataService(serviceUUID);\n  }\n catch (  Exception ex) {\n    log.warn(\"Could not determine if this data service is highly utilized\");\n    return false;\n  }\n  if (!highlyUtilizedService) {\n    if (log.isInfoEnabled())     log.info(\"Service is not highly utilized.\");\n    return false;\n  }\n  final ResourceScores resourceScores=resourceManager.getResourceScores();\n  final boolean shouldMove=(resourceScores.percentCPUTime >= resourceManager.movePercentCpuTimeThreshold) || (resourceScores.majorPageFaultsPerSec > 20) || (resourceScores.dataDirBytesFree < Bytes.gigabyte * 5)|| (resourceScores.dataDirBytesFree < Bytes.gigabyte * .5);\n  return shouldMove;\n}"}
{"ids": "22170", "raw_code": "private static Object[] convertThrowableMessages(final Object[] args){\n  if (args != null) {\n    for (int i=0; i < args.length; i++) {\n      if (args[i] instanceof Throwable) {\n        Throwable t=(Throwable)args[i];\n        if (t.getMessage() != null) {\n          args[i]=t.getMessage();\n        }\n      }\n    }\n  }\n  return args;\n}"}
{"ids": "51083", "raw_code": "protected void wrapContent(){\n  if (!DO_WRAP) {\n    return;\n  }\n  if (mText == null) {\n    return;\n  }\n  Canvas c=new Canvas();\n  c.setFont(mFont);\n  FontMetrics fm=c.getFontMetrics(mFont);\n  String string=getText();\n  if (mToUpperCase) {\n    string=string.toUpperCase();\n  }\n  int tw=fm.stringWidth(string) + 2 * (mHorizontalPadding + mHorizontalMargin);\n  int th=fm.getMaxAscent() + 2 * fm.getMaxDescent() + 2 * (mVerticalPadding + mVerticalMargin);\n  mWidget.setWrapWidth(tw);\n  mWidget.setWrapHeight(th);\n  if (tw > mWidget.getMinWidth()) {\n    mWidget.setMinWidth(tw);\n  }\n  if (th > mWidget.getMinHeight()) {\n    mWidget.setMinHeight(th);\n  }\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setWidth(tw);\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setHeight(th);\n  }\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getWidth() <= mWidget.getMinWidth()) {\n      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getHeight() <= mWidget.getMinHeight()) {\n      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  int baseline=fm.getAscent() + fm.getMaxDescent() + mVerticalPadding+ mVerticalMargin;\n  mWidget.setBaselineDistance(baseline);\n}"}
{"ids": "76921", "raw_code": "public RAFDirectory(Path path,LockFactory lockFactory) throws IOException {\n  super(path,lockFactory);\n  path.toFile();\n}"}
{"ids": "40766", "raw_code": "public static void addMinutesToList(Context context,ArrayList<Integer> values,ArrayList<String> labels,int minutes){\n  int index=values.indexOf(minutes);\n  if (index != -1) {\n    return;\n  }\n  String label=constructReminderLabel(context,minutes,false);\n  int len=values.size();\n  for (int i=0; i < len; i++) {\n    if (minutes < values.get(i)) {\n      values.add(i,minutes);\n      labels.add(i,label);\n      return;\n    }\n  }\n  values.add(minutes);\n  labels.add(len,label);\n}"}
{"ids": "46280", "raw_code": "private static int[] maybeSort(int[] values){\n  if (!isSorted(values,0,false)) {\n    values=values.clone();\n    Arrays.sort(values);\n  }\n  return values;\n}"}
{"ids": "68802", "raw_code": "private void doTextNormal(final PDFPage cmds,final String text){\n  final PointF zero=new PointF();\n  final Matrix scale=new Matrix();\n  Utils.setMatValues(scale,fsize,0,0,fsize * th,0,tr);\n  final Matrix at=new Matrix();\n  final List<PDFGlyph> l=(List<PDFGlyph>)font.getGlyphs(text);\n  for (  final PDFGlyph glyph : l) {\n    at.set(cur);\n    at.preConcat(scale);\n    final PointF advance=glyph.addCommands(cmds,at,tm);\n    float advanceX=(advance.x * fsize) + tc;\n    if (glyph.getChar() == ' ') {\n      advanceX+=tw;\n    }\n    advanceX*=th;\n    cur.preTranslate(advanceX,advance.y);\n  }\n  final float[] src={zero.x,zero.y};\n  final float[] dst=new float[src.length];\n  cur.mapPoints(dst,src);\n  prevEnd.set(dst[0],dst[1]);\n}"}
{"ids": "72757", "raw_code": "public synchronized static void initialize(Connection conn) throws SQLException {\n  if (logHadoopIdPatterns != null && logLineagePatterns != null) {\n    return;\n  }\n  loadLineagePatterns(conn);\n  loadHadoopIdPatterns(conn);\n}"}
{"ids": "71601", "raw_code": "public void addIndices(Collection<IIndex> indices){\n  for (Iterator<IIndex> it=indices.iterator(); it.hasNext(); ) {\n    addIndex((IIndex)it.next());\n  }\n}"}
{"ids": "14210", "raw_code": "public static boolean isCookieSecure(){\n  return secureCookie;\n}"}
{"ids": "25570", "raw_code": "public static List<ObjectModel> loadJsonStream(InputStream input){\n  List<ObjectModel> models=new ArrayList<>();\n  Reader reader=new InputStreamReader(input);\n  ObjectModel[] objectModels=GSON.fromJson(reader,ObjectModel[].class);\n  for (  ObjectModel objectModel : objectModels) {\n    models.add(objectModel);\n  }\n  return models;\n}"}
{"ids": "25517", "raw_code": "private int addWordlenWeights(Channel chan,int weightIdx){\n  int[] weigthsTab=atrac3p_wl_weights[chan.chNum * 3 + weightIdx - 1];\n  for (int i=0; i < ctx.numQuantUnits; i++) {\n    chan.quWordlen[i]+=weigthsTab[i];\n    if (chan.quWordlen[i] < 0 || chan.quWordlen[i] > 7) {\n      log.error(String.format(\"WL index out of range pos=%d, val=%d\",i,chan.quWordlen[i]));\n      return AT3P_ERROR;\n    }\n  }\n  return 0;\n}"}
{"ids": "42403", "raw_code": "final void pruneExceptionalOut(IR ir){\n  int n=getNumberOfExceptionalOut();\n  if (n > 0) {\n    ComputedBBEnum handlers=new ComputedBBEnum(n);\n    Enumeration<Instruction> e=forwardRealInstrEnumerator();\n    while (e.hasMoreElements()) {\n      Instruction x=e.nextElement();\n      Enumeration<BasicBlock> bbs=getApplicableExceptionalOut(x);\n      while (bbs.hasMoreElements()) {\n        BasicBlock bb=bbs.nextElement();\n        handlers.addPossiblyDuplicateElement(bb);\n      }\n    }\n    deleteExceptionalOut();\n    for (int i=0; handlers.hasMoreElements(); i++) {\n      ExceptionHandlerBasicBlock b=(ExceptionHandlerBasicBlock)handlers.nextElement();\n      insertOut(b);\n    }\n  }\n  recomputeNormalOut(ir);\n}"}
{"ids": "52776", "raw_code": "private Pair<DBIDVar,Double> singleIteration(Relation<V> relationx,Relation<? extends NumberVector> relationy){\n  final int dim=RelationUtil.dimensionality(relationx);\n  final int dimy=RelationUtil.dimensionality(relationy);\n  assert (dim == 2);\n  KNNQuery<V> knnQuery=QueryUtil.getKNNQuery(relationx,getDistanceFunction(),k + 1);\n  ArrayModifiableDBIDs ids=DBIDUtil.newArray(relationx.getDBIDs());\n  ids.sort();\n  double[][] X=new double[ids.size()][6];\n  double[][] F=new double[ids.size()][ids.size()];\n  double[][] Y=new double[ids.size()][dimy];\n{\n    int i=0;\n    for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {\n{\n        V vec=relationx.get(id);\n        double la=vec.doubleValue(0);\n        double lo=vec.doubleValue(1);\n        X[i][0]=1.0;\n        X[i][1]=la;\n        X[i][2]=lo;\n        X[i][3]=la * lo;\n        X[i][4]=la * la;\n        X[i][5]=lo * lo;\n      }\n{\n        final NumberVector vecy=relationy.get(id);\n        for (int d=0; d < dimy; d++) {\n          double idy=vecy.doubleValue(d);\n          Y[i][d]=idy;\n        }\n      }\n{\n        KNNList neighbors=knnQuery.getKNNForDBID(id,k + 1);\n        ModifiableDBIDs neighborhood=DBIDUtil.newArray(neighbors.size());\n        for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {\n          if (DBIDUtil.equal(id,neighbor)) {\n            continue;\n          }\n          neighborhood.add(neighbor);\n        }\n        F[i][i]=1.0;\n        final int nweight=-1 / neighborhood.size();\n        for (DBIDIter iter=neighborhood.iter(); iter.valid(); iter.advance()) {\n          int pos=ids.binarySearch(iter);\n          assert (pos >= 0);\n          F[pos][i]=nweight;\n        }\n      }\n    }\n  }\n  double[][] common=times(transposeTimesTranspose(X,F),F);\n  double[][] b=times(inverse(times(common,X)),times(common,Y));\n  double[][] sigmaMat=times(F,minusEquals(times(X,b),times(F,Y)));\n  final double sigma_sum_square=normF(sigmaMat) / (relationx.size() - 6 - 1);\n  final double norm=1 / Math.sqrt(sigma_sum_square);\n  double[][] E=timesEquals(times(F,minus(Y,times(X,b))),norm);\n  DBIDVar worstid=DBIDUtil.newVar();\n  double worstscore=Double.NEGATIVE_INFINITY;\n  int i=0;\n  for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {\n    double err=squareSum(getRow(E,i));\n    if (err > worstscore) {\n      worstscore=err;\n      worstid.set(id);\n    }\n  }\n  return new Pair<>(worstid,Math.sqrt(worstscore));\n}"}
{"ids": "40109", "raw_code": "public String toSpacedString(){\n  final String original=toString();\n  final StringBuilder builder=new StringBuilder();\n  for (int i=0; i < original.length(); i++) {\n    if (i > 0 && (i % 4) == 0)     builder.append(' ');\n    builder.append(original.charAt(i));\n  }\n  return builder.toString();\n}"}
{"ids": "84246", "raw_code": "private int parseContentType(final byte[] b,final int off) throws ParseException {\n  contentTypeVal_=PrimitivesParser.parseByte(b,off);\n  if (ContentType.deserialize(contentTypeVal_) == null) {\n    throw new BadCiphertextException(\"Invalid content type in ciphertext.\");\n  }\n  return 1;\n}"}
{"ids": "81482", "raw_code": "@Benchmark public void nonCaching(){\n  run();\n}"}
{"ids": "8789", "raw_code": "private void rLineTo(float dx,float dy){\n  if (isEmpty()) {\n    mPath.moveTo(mLastX=0,mLastY=0);\n  }\n  dx+=mLastX;\n  dy+=mLastY;\n  mPath.lineTo(mLastX=dx,mLastY=dy);\n}"}
{"ids": "26577", "raw_code": "@Override public ConflictResults parseOutput(final String stdout,final String stderr){\n  final List<String> contentConflicts=new ArrayList<String>();\n  final List<String> renameConflicts=new ArrayList<String>();\n  final List<String> bothConflicts=new ArrayList<String>();\n  final String[] lines=getLines(stderr);\n  for (  final String line : lines) {\n    final int index=line.lastIndexOf(\":\");\n    if (index != -1) {\n      if (StringUtils.endsWith(line,BOTH_CONFLICTS_SUFFIX)) {\n        bothConflicts.add(line.substring(0,index));\n      }\n else       if (StringUtils.endsWith(line,RENAME_CONFLICT_SUFFIX)) {\n        renameConflicts.add(line.substring(0,index));\n      }\n else {\n        contentConflicts.add(line.substring(0,index));\n      }\n    }\n  }\n  return new ConflictResults(contentConflicts,renameConflicts,bothConflicts);\n}"}
{"ids": "4721", "raw_code": "protected void sendStart(final OutputStream out) throws IOException {\n  LOG.trace(\"enter sendStart(OutputStream out)\");\n  out.write(EXTRA_BYTES);\n  out.write(getPartBoundary());\n  out.write(CRLF_BYTES);\n}"}
{"ids": "66096", "raw_code": "public void addActualQty(BigDecimal add){\n  m_actualQty=m_actualQty.add(add);\n}"}
{"ids": "83031", "raw_code": "public static void printStackTrace(SQLException e,PrintWriter pw){\n  SQLException next=e;\n  while (next != null) {\n    next.printStackTrace(pw);\n    next=next.getNextException();\n    if (next != null) {\n      pw.println(\"Next SQLException:\");\n    }\n  }\n}"}
{"ids": "43767", "raw_code": "protected void initializeWorld(){\n  Body ground=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(100.0,1.0);\n    BodyFixture bf=new BodyFixture(c);\n    ground.addFixture(bf);\n  }\n  ground.translate(new Vector2(0.6875,-8.75));\n  ground.setMass(MassType.INFINITE);\n  world.addBody(ground);\n  Body head=new SimulationBody();\n{\n    Convex c=Geometry.createCircle(0.25);\n    BodyFixture bf=new BodyFixture(c);\n    head.addFixture(bf);\n  }\n  head.setMass(MassType.NORMAL);\n  world.addBody(head);\n  Body torso=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.5,1.0);\n    BodyFixture bf=new BodyFixture(c);\n    torso.addFixture(bf);\n  }\n{\n    Convex c=Geometry.createRectangle(1.0,0.25);\n    c.translate(new Vector2(0.00390625,0.375));\n    BodyFixture bf=new BodyFixture(c);\n    torso.addFixture(bf);\n  }\n  torso.translate(new Vector2(0.0234375,-0.8125));\n  torso.setMass(MassType.NORMAL);\n  world.addBody(torso);\n  Body rightHumerus=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.5);\n    BodyFixture bf=new BodyFixture(c);\n    rightHumerus.addFixture(bf);\n  }\n  rightHumerus.translate(new Vector2(0.4375,-0.609375));\n  rightHumerus.setMass(MassType.NORMAL);\n  world.addBody(rightHumerus);\n  Body rightUlna=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.4);\n    BodyFixture bf=new BodyFixture(c);\n    rightUlna.addFixture(bf);\n  }\n  rightUlna.translate(new Vector2(0.44140625,-0.98828125));\n  rightUlna.setMass(MassType.NORMAL);\n  world.addBody(rightUlna);\n  Body neck=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.15,0.2);\n    BodyFixture bf=new BodyFixture(c);\n    neck.addFixture(bf);\n  }\n  neck.translate(new Vector2(0.015625,-0.2734375));\n  neck.setMass(MassType.NORMAL);\n  world.addBody(neck);\n  Body leftHumerus=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.5);\n    BodyFixture bf=new BodyFixture(c);\n    leftHumerus.addFixture(bf);\n  }\n  leftHumerus.translate(new Vector2(-0.3828125,-0.609375));\n  leftHumerus.setMass(MassType.NORMAL);\n  world.addBody(leftHumerus);\n  Body leftUlna=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.4);\n    BodyFixture bf=new BodyFixture(c);\n    leftUlna.addFixture(bf);\n  }\n  leftUlna.translate(new Vector2(-0.3828125,-0.9765625));\n  leftUlna.setMass(MassType.NORMAL);\n  world.addBody(leftUlna);\n  Body rightFemur=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.75);\n    BodyFixture bf=new BodyFixture(c);\n    rightFemur.addFixture(bf);\n  }\n  rightFemur.translate(new Vector2(0.1796875,-1.5703125));\n  rightFemur.setMass(MassType.NORMAL);\n  world.addBody(rightFemur);\n  Body leftFemur=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.75);\n    BodyFixture bf=new BodyFixture(c);\n    leftFemur.addFixture(bf);\n  }\n  leftFemur.translate(new Vector2(-0.1328125,-1.5703125));\n  leftFemur.setMass(MassType.NORMAL);\n  world.addBody(leftFemur);\n  Body rightTibia=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.5);\n    BodyFixture bf=new BodyFixture(c);\n    rightTibia.addFixture(bf);\n  }\n  rightTibia.translate(new Vector2(0.18359375,-2.11328125));\n  rightTibia.setMass(MassType.NORMAL);\n  world.addBody(rightTibia);\n  Body leftTibia=new SimulationBody();\n{\n    Convex c=Geometry.createRectangle(0.25,0.5);\n    BodyFixture bf=new BodyFixture(c);\n    leftTibia.addFixture(bf);\n  }\n  leftTibia.translate(new Vector2(-0.1328125,-2.1171875));\n  leftTibia.setMass(MassType.NORMAL);\n  world.addBody(leftTibia);\n  RevoluteJoint headToNeck=new RevoluteJoint(head,neck,new Vector2(0.01,-0.2));\n  headToNeck.setLimitEnabled(false);\n  headToNeck.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  headToNeck.setReferenceAngle(Math.toRadians(0.0));\n  headToNeck.setMotorEnabled(false);\n  headToNeck.setMotorSpeed(Math.toRadians(0.0));\n  headToNeck.setMaximumMotorTorque(0.0);\n  headToNeck.setCollisionAllowed(false);\n  world.addJoint(headToNeck);\n  RevoluteJoint neckToTorso=new RevoluteJoint(neck,torso,new Vector2(0.01,-0.35));\n  neckToTorso.setLimitEnabled(false);\n  neckToTorso.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  neckToTorso.setReferenceAngle(Math.toRadians(0.0));\n  neckToTorso.setMotorEnabled(false);\n  neckToTorso.setMotorSpeed(Math.toRadians(0.0));\n  neckToTorso.setMaximumMotorTorque(0.0);\n  neckToTorso.setCollisionAllowed(false);\n  world.addJoint(neckToTorso);\n  RevoluteJoint torsoToLeftHumerus=new RevoluteJoint(torso,leftHumerus,new Vector2(-0.4,-0.4));\n  torsoToLeftHumerus.setLimitEnabled(false);\n  torsoToLeftHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  torsoToLeftHumerus.setReferenceAngle(Math.toRadians(0.0));\n  torsoToLeftHumerus.setMotorEnabled(false);\n  torsoToLeftHumerus.setMotorSpeed(Math.toRadians(0.0));\n  torsoToLeftHumerus.setMaximumMotorTorque(0.0);\n  torsoToLeftHumerus.setCollisionAllowed(false);\n  world.addJoint(torsoToLeftHumerus);\n  RevoluteJoint torsoToRightHumerus=new RevoluteJoint(torso,rightHumerus,new Vector2(0.4,-0.4));\n  torsoToRightHumerus.setLimitEnabled(false);\n  torsoToRightHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  torsoToRightHumerus.setReferenceAngle(Math.toRadians(0.0));\n  torsoToRightHumerus.setMotorEnabled(false);\n  torsoToRightHumerus.setMotorSpeed(Math.toRadians(0.0));\n  torsoToRightHumerus.setMaximumMotorTorque(0.0);\n  torsoToRightHumerus.setCollisionAllowed(false);\n  world.addJoint(torsoToRightHumerus);\n  RevoluteJoint rightHumerusToRightUlna=new RevoluteJoint(rightHumerus,rightUlna,new Vector2(0.43,-0.82));\n  rightHumerusToRightUlna.setLimitEnabled(false);\n  rightHumerusToRightUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  rightHumerusToRightUlna.setReferenceAngle(Math.toRadians(0.0));\n  rightHumerusToRightUlna.setMotorEnabled(false);\n  rightHumerusToRightUlna.setMotorSpeed(Math.toRadians(0.0));\n  rightHumerusToRightUlna.setMaximumMotorTorque(0.0);\n  rightHumerusToRightUlna.setCollisionAllowed(false);\n  world.addJoint(rightHumerusToRightUlna);\n  RevoluteJoint leftHumerusToLeftUlna=new RevoluteJoint(leftHumerus,leftUlna,new Vector2(-0.4,-0.81));\n  leftHumerusToLeftUlna.setLimitEnabled(false);\n  leftHumerusToLeftUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  leftHumerusToLeftUlna.setReferenceAngle(Math.toRadians(0.0));\n  leftHumerusToLeftUlna.setMotorEnabled(false);\n  leftHumerusToLeftUlna.setMotorSpeed(Math.toRadians(0.0));\n  leftHumerusToLeftUlna.setMaximumMotorTorque(0.0);\n  leftHumerusToLeftUlna.setCollisionAllowed(false);\n  world.addJoint(leftHumerusToLeftUlna);\n  RevoluteJoint torsoToRightFemur=new RevoluteJoint(torso,rightFemur,new Vector2(0.16,-1.25));\n  torsoToRightFemur.setLimitEnabled(false);\n  torsoToRightFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  torsoToRightFemur.setReferenceAngle(Math.toRadians(0.0));\n  torsoToRightFemur.setMotorEnabled(false);\n  torsoToRightFemur.setMotorSpeed(Math.toRadians(0.0));\n  torsoToRightFemur.setMaximumMotorTorque(0.0);\n  torsoToRightFemur.setCollisionAllowed(false);\n  world.addJoint(torsoToRightFemur);\n  RevoluteJoint torsoToLeftFemur=new RevoluteJoint(torso,leftFemur,new Vector2(-0.13,-1.25));\n  torsoToLeftFemur.setLimitEnabled(false);\n  torsoToLeftFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  torsoToLeftFemur.setReferenceAngle(Math.toRadians(0.0));\n  torsoToLeftFemur.setMotorEnabled(false);\n  torsoToLeftFemur.setMotorSpeed(Math.toRadians(0.0));\n  torsoToLeftFemur.setMaximumMotorTorque(0.0);\n  torsoToLeftFemur.setCollisionAllowed(false);\n  world.addJoint(torsoToLeftFemur);\n  RevoluteJoint rightFemurToRightTibia=new RevoluteJoint(rightFemur,rightTibia,new Vector2(0.17,-1.9));\n  rightFemurToRightTibia.setLimitEnabled(false);\n  rightFemurToRightTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  rightFemurToRightTibia.setReferenceAngle(Math.toRadians(0.0));\n  rightFemurToRightTibia.setMotorEnabled(false);\n  rightFemurToRightTibia.setMotorSpeed(Math.toRadians(0.0));\n  rightFemurToRightTibia.setMaximumMotorTorque(0.0);\n  rightFemurToRightTibia.setCollisionAllowed(false);\n  world.addJoint(rightFemurToRightTibia);\n  RevoluteJoint leftFemurToLeftTibia=new RevoluteJoint(leftFemur,leftTibia,new Vector2(-0.14,-1.9));\n  leftFemurToLeftTibia.setLimitEnabled(false);\n  leftFemurToLeftTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));\n  leftFemurToLeftTibia.setReferenceAngle(Math.toRadians(0.0));\n  leftFemurToLeftTibia.setMotorEnabled(false);\n  leftFemurToLeftTibia.setMotorSpeed(Math.toRadians(0.0));\n  leftFemurToLeftTibia.setMaximumMotorTorque(0.0);\n  leftFemurToLeftTibia.setCollisionAllowed(false);\n  world.addJoint(leftFemurToLeftTibia);\n}"}
{"ids": "77875", "raw_code": "@SuppressWarnings(\"rawtypes\") public DataResponse paginateList(Map<String,String> requestParams,PaginateRequest paginateRequest,Object query,String defaultSort,Map properties){\n  if (paginateRequest == null) {\n    paginateRequest=new PaginateRequest();\n  }\n  if (paginateRequest.getStart() == null) {\n    paginateRequest.setStart(RequestUtil.getInteger(requestParams,\"start\",0));\n  }\n  if (paginateRequest.getSize() == null) {\n    paginateRequest.setSize(RequestUtil.getInteger(requestParams,\"size\",10));\n  }\n  if (paginateRequest.getOrder() == null) {\n    paginateRequest.setOrder(requestParams.get(\"order\"));\n  }\n  if (paginateRequest.getSort() == null) {\n    paginateRequest.setSort(requestParams.get(\"sort\"));\n  }\n  Integer start=paginateRequest.getStart();\n  if (start == null || start < 0) {\n    start=0;\n  }\n  Integer size=paginateRequest.getSize();\n  if (size == null || size < 0) {\n    size=10;\n  }\n  String sort=paginateRequest.getSort();\n  if (sort == null) {\n    sort=defaultSort;\n  }\n  String order=paginateRequest.getOrder();\n  if (order == null) {\n    order=\"asc\";\n  }\n  if (sort != null && !properties.isEmpty()) {\n    Object qp=properties.get(sort);\n    if (qp == null) {\n      throw new ActivitiIllegalArgumentException(\"Value for param 'sort' is not valid, '\" + sort + \"' is not a valid property\");\n    }\n    if (query instanceof AbstractQuery) {\n      AbstractQuery queryObject=(AbstractQuery)query;\n      QueryProperty queryProperty=(QueryProperty)qp;\n      queryObject.orderBy(queryProperty);\n      if (order.equals(\"asc\")) {\n        queryObject.asc();\n      }\n else       if (order.equals(\"desc\")) {\n        queryObject.desc();\n      }\n else {\n        throw new ActivitiIllegalArgumentException(\"Value for param 'order' is not valid : '\" + order + \"', must be 'asc' or 'desc'\");\n      }\n    }\n else     if (query instanceof org.activiti.idm.engine.impl.AbstractQuery) {\n      org.activiti.idm.engine.impl.AbstractQuery queryObject=(org.activiti.idm.engine.impl.AbstractQuery)query;\n      org.activiti.idm.api.QueryProperty queryProperty=(org.activiti.idm.api.QueryProperty)qp;\n      queryObject.orderBy(queryProperty);\n      if (order.equals(\"asc\")) {\n        queryObject.asc();\n      }\n else       if (order.equals(\"desc\")) {\n        queryObject.desc();\n      }\n else {\n        throw new ActivitiIllegalArgumentException(\"Value for param 'order' is not valid : '\" + order + \"', must be 'asc' or 'desc'\");\n      }\n    }\n  }\n  DataResponse response=new DataResponse();\n  response.setStart(start);\n  response.setSort(sort);\n  response.setOrder(order);\n  if (query instanceof AbstractQuery) {\n    AbstractQuery queryObject=(AbstractQuery)query;\n    List list=processList(queryObject.listPage(start,size));\n    response.setTotal(queryObject.count());\n    response.setSize(list.size());\n    response.setData(list);\n  }\n else   if (query instanceof org.activiti.idm.engine.impl.AbstractQuery) {\n    org.activiti.idm.engine.impl.AbstractQuery queryObject=(org.activiti.idm.engine.impl.AbstractQuery)query;\n    List list=processList(queryObject.listPage(start,size));\n    response.setTotal(queryObject.count());\n    response.setSize(list.size());\n    response.setData(list);\n  }\n  return response;\n}"}
{"ids": "39503", "raw_code": "public void curveTo(double x1,double y1,double x2,double y2,double x3,double y3){\n  if (size() == 0) {\n    throw new IllegalPathStateException(\"curveTo only allowed when not empty\");\n  }\n  Node lastPoint=get(size() - 1);\n  lastPoint.mask|=C2_MASK;\n  lastPoint.x[2]=x1;\n  lastPoint.y[2]=y1;\n  if ((lastPoint.mask & C1C2_MASK) == C1C2_MASK) {\n    lastPoint.keepColinear=Math.abs(Geom.angle(lastPoint.x[0],lastPoint.y[0],lastPoint.x[1],lastPoint.y[1]) - Geom.angle(lastPoint.x[2],lastPoint.y[2],lastPoint.x[0],lastPoint.y[0])) < 0.001;\n  }\n  add(new Node(C1_MASK,x3,y3,x2,y2,x3,y3));\n}"}
{"ids": "68555", "raw_code": "private void openCounterDataInputStream() throws DataFallbackException {\n  if (dInput == null) {\n    if (LOG.isDebugEnabled())     LOG.debug(\"openDataInputStream() ; Opening the reader for the \" + counterFile.getName() + \" file\");\n    try {\n      dInput=new BufferedReader(new FileReader(counterFile));\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n  }\n}"}
{"ids": "80017", "raw_code": "public String readNextWord(){\n  if (tokenizer.hasMoreTokens()) {\n    return tokenizer.nextToken();\n  }\n else {\n    return null;\n  }\n}"}
{"ids": "38163", "raw_code": "@Override public void buildAssociations(Instances data) throws Exception {\n  buildAssociations((Object)data);\n  return;\n}"}
{"ids": "10203", "raw_code": "public static String replaceFirst(String s,String sub,String with){\n  int i=s.indexOf(sub);\n  if (i == -1) {\n    return s;\n  }\n  return s.substring(0,i) + with + s.substring(i + sub.length());\n}"}
{"ids": "54934", "raw_code": "public void addObject(String s) throws Exception {\n  inspect(Class.forName(s));\n}"}
{"ids": "68368", "raw_code": "public static void main(String[] args) throws Exception {\n  final JFrame frame=new HTMLTest(args);\n  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  frame.pack();\n  frame.setVisible(true);\n}"}
{"ids": "62119", "raw_code": "@Override public int hashCode(){\n  return rawString.hashCode();\n}"}
{"ids": "38984", "raw_code": "public static boolean writeToFile(String filename,String message,boolean append){\n  boolean result;\n  BufferedWriter writer;\n  try {\n    writer=new BufferedWriter(new FileWriter(filename,append));\n    writer.write(message);\n    writer.newLine();\n    writer.flush();\n    writer.close();\n    result=true;\n  }\n catch (  Exception e) {\n    result=false;\n  }\n  return result;\n}"}
{"ids": "46722", "raw_code": "public int hashCode(){\n  return (9 * colorModel.hashCode()) + (14 * sampleModel.hashCode());\n}"}
{"ids": "5207", "raw_code": "public void writeFile(String name,String mimeType,String fileName,byte[] data) throws IOException {\n  if (data == null) {\n    throw new IllegalArgumentException(\"Data cannot be null.\");\n  }\n  if (fileName == null || fileName.isEmpty()) {\n    throw new IllegalArgumentException(\"File name cannot be null or empty.\");\n  }\n  out.writeBytes(PREFIX);\n  out.writeBytes(boundary);\n  out.writeBytes(NEWLINE);\n  out.writeBytes(\"Content-Disposition: form-data; name=\\\"\" + name + \"\\\"; filename=\\\"\"+ fileName+ \"\\\"\");\n  out.writeBytes(NEWLINE);\n  if (mimeType != null) {\n    out.writeBytes(\"Content-Type: \" + mimeType);\n    out.writeBytes(NEWLINE);\n  }\n  out.writeBytes(NEWLINE);\n  out.write(data,0,data.length);\n  out.writeBytes(NEWLINE);\n  out.flush();\n}"}
{"ids": "86419", "raw_code": "@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) private void onConfigurationChanged(Configuration newConfig){\n  final Locale newLocale=newConfig.locale;\n  if (newLocale.equals(mSystemLocale)) {\n    return;\n  }\n  mSystemLocale=newLocale;\n  ensureSupportedLocale();\n}"}
{"ids": "65262", "raw_code": "private static boolean isGMTish(String name){\n  if (name.length() < 3) {\n    return false;\n  }\n  char c1=name.charAt(0);\n  char c2=name.charAt(1);\n  char c3=name.charAt(2);\n  if (!((c1 == 'G' || c1 == 'g') && (c2 == 'M' || c2 == 'm') && (c3 == 'T' || c3 == 't')) && !((c1 == 'U' || c1 == 'u') && (c2 == 'T' || c2 == 't') && (c3 == 'C' || c3 == 'c')) && !((c1 == 'U' || c1 == 'u') && (c2 == 'T' || c2 == 't') && (c3 == '1'))) {\n    return false;\n  }\n  if (name.length() == 3) {\n    return true;\n  }\n  String offset=name.substring(3);\n  if (offset.startsWith(\"+\")) {\n    return offset.equals(\"+0\") || offset.equals(\"+00\") || offset.equals(\"+00:00\");\n  }\n else {\n    return offset.equals(\"-0\") || offset.equals(\"-00\") || offset.equals(\"-00:00\");\n  }\n}"}
{"ids": "77005", "raw_code": "protected void addWholeMatch(StringBuilder sb,String surface,String analyzed){\n  sb.append(\"<b>\");\n  sb.append(surface);\n  sb.append(\"</b>\");\n}"}
{"ids": "63357", "raw_code": "public void start(){\n  stopAt=System.currentTimeMillis() + MAX_PROCESSING_TIME;\n}"}
{"ids": "25703", "raw_code": "private Object[] singleRow(int row){\n  Object[] res=new Object[this.nFields];\n  for (int i=0; i < this.nFields; i+=1) {\n    if (this.isNull == null || !this.isNull[row * this.nFields + i]) {\n      res[i]=ArrayFuncs.newInstance(this.types[i],1);\n      System.arraycopy(this.data[i],row,res[i],0,1);\n    }\n  }\n  return res;\n}"}
{"ids": "10208", "raw_code": "public static String removeChars(String src,String chars){\n  int i=src.length();\n  StringBuilder sb=new StringBuilder(i);\n  for (int j=0; j < i; j++) {\n    char c=src.charAt(j);\n    if (chars.indexOf(c) == -1) {\n      sb.append(c);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "51740", "raw_code": "private void addAllColumns() throws SQLException {\n  DatabaseMetaData metaData=getDatabaseMetaData();\n  List<String> columns=new ArrayList<>();\n  try (ResultSet rs=metaData.getColumns(null,null,normalizeObjectName(statementModel.getTableName()),null)){\n    while (rs.next()) {\n      columns.add(quoteObjectName(rs.getString(IDX_COLUMN_NAME)));\n    }\n  }\n   columnNames=columns.toArray(new String[0]);\n  addReturningClause();\n}"}
{"ids": "27525", "raw_code": "static private void copyStream(final InputStream content,final OutputStream outstr) throws IOException {\n  final byte[] buf=new byte[GZIP_BUFFER];\n  while (true) {\n    final int rdlen=content.read(buf);\n    if (rdlen <= 0) {\n      break;\n    }\n    outstr.write(buf,0,rdlen);\n  }\n}"}
{"ids": "52432", "raw_code": "public void checkAndSetupStreamsDrawer(){\n  setupListViewAdapter();\n}"}
{"ids": "82288", "raw_code": "private com.codename1.ui.Component copyComponent(com.codename1.ui.Component cmp){\n  com.codename1.ui.Container cnt=builder.createContainer(res,copiedResourceName);\n  com.codename1.ui.Component dest=builder.findByName(cmp.getName(),cnt);\n  if (dest != null && dest.getParent() != null) {\n    removeComponentSync(dest.getParent(),dest);\n  }\n  return dest;\n}"}
{"ids": "30368", "raw_code": "@Override public BigDecimal calculateTotalPendingAdvance(final BigDecimal totalAdvancePaid,final Date billDate,final WorkOrderEstimate workOrderEstimate,final Long billId){\n  final CChartOfAccounts advanceCOA=contractorAdvanceService.getContractorAdvanceAccountcodeForWOE(workOrderEstimate.getId());\n  BigDecimal totalPendingBalance=BigDecimal.ZERO;\n  BigDecimal totalAdvanceAdjusted=BigDecimal.ZERO;\n  if (advanceCOA != null && totalAdvancePaid != null && totalAdvancePaid.compareTo(BigDecimal.ZERO) > 0) {\n    totalAdvanceAdjusted=getTotalAdvanceAdjustedForWOE(billDate,workOrderEstimate.getId(),advanceCOA.getId(),billId);\n    if (totalAdvanceAdjusted != null && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0 && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0)     totalPendingBalance=totalAdvanceAdjusted.subtract(totalAdvanceAdjusted);\n else     totalPendingBalance=totalAdvancePaid;\n  }\n  return totalPendingBalance;\n}"}
{"ids": "4506", "raw_code": "private void loadProfile(String userId,String name){\n  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);\n  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);\n  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);\n  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);\n  startActivity(userProfileIntent);\n}"}
{"ids": "86342", "raw_code": "private void scrollBy(final int increment){\n  index+=increment;\n  if (index < 0) {\n    index=0;\n  }\n  if (index >= items.size()) {\n    index=items.size() - 1;\n  }\n  redraw();\n}"}
{"ids": "52355", "raw_code": "public static boolean symbolNeedsQuoting(CharSequence symbol,boolean quoteOperators){\n  int length=symbol.length();\n  if (length == 0) {\n    throw new EmptySymbolException();\n  }\n  if (!isIdentifierKeyword(symbol)) {\n    char c=symbol.charAt(0);\n    if (!quoteOperators && isOperatorPart(c)) {\n      for (int ii=0; ii < length; ii++) {\n        c=symbol.charAt(ii);\n        if (!isOperatorPart(c)) {\n          return true;\n        }\n      }\n      return false;\n    }\n else     if (isIdentifierStart(c)) {\n      for (int ii=0; ii < length; ii++) {\n        c=symbol.charAt(ii);\n        if ((c == '\\'' || c < 32 || c > 126) || !isIdentifierPart(c)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "27520", "raw_code": "public static long parseCommitCounterFile(final String name,final String ext) throws NumberFormatException {\n  if (name == null)   throw new IllegalArgumentException();\n  if (ext == null)   throw new IllegalArgumentException();\n  final int len=name.length() - ext.length();\n  final String fileBaseName=name.substring(0,len);\n  final long commitCounter=Long.parseLong(fileBaseName);\n  return commitCounter;\n}"}
{"ids": "78507", "raw_code": "public static Document loadDocument(File file) throws Exception {\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  DocumentBuilder builder=factory.newDocumentBuilder();\n  return builder.parse(file);\n}"}
{"ids": "2642", "raw_code": "private Node newFloatingComment(){\n  Node c=new Node(Token.EMPTY);\n  linkCommentToNode(c);\n  return c;\n}"}
{"ids": "30353", "raw_code": "public Boolean isHod(final Long assignId){\n  final List<HeadOfDepartments> hodList=employeeDepartmentRepository.getAllHodDepartments(assignId);\n  return !hodList.isEmpty();\n}"}
{"ids": "35576", "raw_code": "public Munger singleLabelMode(String... languages){\n  return singleLabelMode(Arrays.asList(languages));\n}"}
{"ids": "23583", "raw_code": "public StatValue[] matchSpec(StatSpec spec){\n  if (spec.getCombineType() == StatSpec.GLOBAL) {\n    StatValue[] allValues=matchSpec(new RawStatSpec(spec));\n    if (allValues.length == 0) {\n      return allValues;\n    }\n else {\n      ComboValue cv=new ComboValue(allValues);\n      return new StatValue[]{cv};\n    }\n  }\n else {\n    List l=new ArrayList();\n    StatArchiveReader.StatArchiveFile[] archives=getArchives();\n    for (int i=0; i < archives.length; i++) {\n      StatArchiveFile f=archives[i];\n      if (spec.archiveMatches(f.getFile())) {\n        f.matchSpec(spec,l);\n      }\n    }\n    StatValue[] result=new StatValue[l.size()];\n    return (StatValue[])l.toArray(result);\n  }\n}"}
{"ids": "38039", "raw_code": "private void assignClusterNums(int[] cl_num) throws Exception {\n  if (m_children != null && m_children.size() < 2) {\n    throw new Exception(\"assignClusterNums: tree not built correctly!\");\n  }\n  m_clusterNum=cl_num[0];\n  cl_num[0]++;\n  if (m_children != null) {\n    for (int i=0; i < m_children.size(); i++) {\n      CNode child=m_children.get(i);\n      child.assignClusterNums(cl_num);\n    }\n  }\n}"}
{"ids": "47980", "raw_code": "protected void closeSubpath(){\n  mPSStream.println(CLOSEPATH_STR);\n  mPenX=mStartPathX;\n  mPenY=mStartPathY;\n}"}
{"ids": "46851", "raw_code": "public ModelMBeanNotificationInfo(String[] notifTypes,String name,String description){\n  this(notifTypes,name,description,null);\n}"}
{"ids": "12134", "raw_code": "public void cleanBuildTask(long id) throws NotFoundException {\n  FutureBuildTask task=tasks.remove(id);\n  if (task == null) {\n    throw new NotFoundException(String.format(\"Invalid build task id: %d\",id));\n  }\n  task.cancel(true);\n  cleanup(task);\n}"}
{"ids": "22895", "raw_code": "public void moveTo(final int lonCenter,final int latCenter){\n  double mLatCenter=GeoMath.latE7ToMercator(latCenter);\n  double mTop=GeoMath.latE7ToMercator(top);\n  int newBottom=GeoMath.mercatorToLatE7(mLatCenter - (mTop - bottomMercator) / 2);\n  try {\n    translate((lonCenter - left - (int)(width / 2L)),newBottom - bottom);\n  }\n catch (  OsmException e) {\n    e.printStackTrace();\n  }\n}"}
{"ids": "26580", "raw_code": "public void sendEvent(final String name,final Map<String,String> properties){\n  final String eventName=String.format(TfsTelemetryConstants.PLUGIN_ACTION_EVENT_NAME_FORMAT,name);\n  final PropertyMapBuilder builder=new PropertyMapBuilder(properties);\n  logger.debug(String.format(\"sendEvent(%s, %s)\",name,builder.toString()));\n  if (telemetryClient != null) {\n    telemetryClient.trackEvent(eventName,builder.build(),null);\n  }\n}"}
{"ids": "6568", "raw_code": "public void handleHeaderColumnPressed(Point p){\n  JTableHeader th=TABLE.getTableHeader();\n  int col=th.columnAtPoint(p);\n  int c=TABLE.convertColumnIndexToModel(col);\n  if (c != -1) {\n    TABLE.setPressedColumnIndex(c);\n    th.repaint(th.getHeaderRect(col));\n  }\n}"}
{"ids": "39693", "raw_code": "private static List<FixedRecord> createFixedRecords(int count){\n  List<FixedRecord> records=new ArrayList<>();\n  for (int i=0; i < count; i++) {\n    records.add(new FixedRecord(i));\n  }\n  return records;\n}"}
{"ids": "4412", "raw_code": "public TrackedEntityInstanceQueryParams addAttributesIfNotExist(List<QueryItem> attrs){\n  for (  QueryItem attr : attrs) {\n    if (attributes != null && !attributes.contains(attr)) {\n      attributes.add(attr);\n    }\n  }\n  return this;\n}"}
{"ids": "9138", "raw_code": "protected final void deleteDBFFDCFiles(String directoryToDelete) throws AdeException {\n  try {\n    final File dirToDelete=new File(directoryToDelete);\n    String[] fileList=dirToDelete.list();\n    if (fileList.length == 0) {\n      dirToDelete.delete();\n    }\n else {\n      for (int i=0; i < fileList.length; i++) {\n        final File f=new File(dirToDelete,fileList[i]);\n        if (f.isDirectory()) {\n          final String filePath=f.getPath();\n          deleteDBFFDCFiles(filePath);\n          continue;\n        }\n        f.delete();\n      }\n      fileList=dirToDelete.list();\n      if (fileList.length == 0) {\n        dirToDelete.delete();\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new AdeInternalException(\"Failed to delete the backed-up Ade DB directory\",e);\n  }\n}"}
{"ids": "72459", "raw_code": "public static void checkSerializedEquality(Object object){\n  Object object2=serializeAndRecover(object);\n  Assert.assertEquals(\"Equals check\",object,object2);\n  Assert.assertEquals(\"HashCode check\",object.hashCode(),object2.hashCode());\n}"}
{"ids": "22772", "raw_code": "public static double mean(final List<Double> list){\n  double sum=0;\n  for (  Double number : list) {\n    sum+=number;\n  }\n  return sum / list.size();\n}"}
{"ids": "35211", "raw_code": "private static String fromHtmlEntity(String str){\n  Character ch=map.get(str);\n  return (ch != null) ? ch.toString() : str;\n}"}
{"ids": "54691", "raw_code": "public final ArrayList<WifiRecord> loadWifisByBssid(final String bssid,final Integer session){\n  final ArrayList<WifiRecord> wifis=new ArrayList<>();\n  String selectSql;\n  if (session != null) {\n    selectSql=Schema.COL_BSSID + \" = \\\"\" + bssid+ \"\\\" AND \"+ Schema.COL_SESSION_ID+ \" =\\\"\"+ session+ \"\\\"\";\n  }\n else {\n    selectSql=Schema.COL_BSSID + \" = \\\"\" + bssid+ \"\\\"\";\n  }\n  final Cursor cursor=contentResolver.query(ContentProvider.CONTENT_URI_WIFI,null,selectSql,null,null);\n  final int columnIndex=cursor.getColumnIndex(Schema.COL_BSSID);\n  final int columnIndex2=cursor.getColumnIndex(Schema.COL_SSID);\n  final int columnIndex3=cursor.getColumnIndex(Schema.COL_CAPABILITIES);\n  final int columnIndex4=cursor.getColumnIndex(Schema.COL_FREQUENCY);\n  final int columnIndex5=cursor.getColumnIndex(Schema.COL_LEVEL);\n  final int columnIndex6=cursor.getColumnIndex(Schema.COL_TIMESTAMP);\n  final int columnIndex7=cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);\n  final int columnIndex8=cursor.getColumnIndex(Schema.COL_END_POSITION_ID);\n  final int columnIndex9=cursor.getColumnIndex(Schema.COL_KNOWN_WIFI);\n  while (cursor.moveToNext()) {\n    final WifiRecord wifi=new WifiRecord();\n    wifi.setBssid(cursor.getString(columnIndex));\n    wifi.setSsid(cursor.getString(columnIndex2));\n    wifi.setCapabilities(cursor.getString(columnIndex3));\n    wifi.setFrequency(cursor.getInt(columnIndex4));\n    wifi.setLevel(cursor.getInt(columnIndex5));\n    wifi.setOpenBmapTimestamp(cursor.getLong(columnIndex6));\n    wifi.setBeginPosition(loadPositionById(cursor.getString(columnIndex7)));\n    wifi.setEndPosition(loadPositionById(cursor.getString(columnIndex8)));\n    wifi.setCatalogStatus(CatalogStatus.values()[cursor.getInt(columnIndex9)]);\n    wifis.add(wifi);\n  }\n  cursor.close();\n  return wifis;\n}"}
{"ids": "62082", "raw_code": "@Override public void deinstall(JEditorPane editor){\n  super.deinstall(editor);\n  editor.removeKeyListener(this);\n}"}
{"ids": "75458", "raw_code": "public boolean isSecure(){\n  return mTlsCipher != null && !mTlsCipher.isEmpty();\n}"}
{"ids": "68314", "raw_code": "public void sample(Record rec){\n  totalRecs++;\n  if (samples.size() < MAX_SAMPLES) {\n    samples.add(new Sample(rec,schema));\n    updateNewValueInterval(rec);\n  }\n else {\n    double flip=random.nextDouble();\n    if (flip < (double)MAX_SAMPLES / totalRecs) {\n      samples.set(random.nextInt(MAX_SAMPLES),new Sample(rec,schema));\n      updateNewValueInterval(rec);\n    }\n  }\n}"}
{"ids": "22558", "raw_code": "public TenantCreateParam prepareTenantParam(KeystoneTenant tenant){\n  TenantCreateParam param=new TenantCreateParam(CinderConstants.TENANT_NAME_PREFIX + \" \" + tenant.getName(),prepareUserMappings(tenant.getId()));\n  param.setDescription(getProperTenantDescription(tenant.getDescription()));\n  return param;\n}"}
{"ids": "24327", "raw_code": "private void forceInternalError(){\n  throw new InternalError(\"gotcha\");\n}"}
{"ids": "7605", "raw_code": "public static ImageEncoder newInstance(String format){\n  ImageEncoder imageEncoder=null;\n  String className=(String)encoders.get(format);\n  if (className == null) {\n    throw new IllegalArgumentException(\"Unsupported image format - \" + format);\n  }\n  try {\n    Class imageEncoderClass=Class.forName(className);\n    imageEncoder=(ImageEncoder)imageEncoderClass.newInstance();\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(e.toString());\n  }\n  return imageEncoder;\n}"}
{"ids": "52162", "raw_code": "public double empiricalHSICincompleteCholesky(TetradMatrix Gy,TetradMatrix Gx,TetradMatrix Gz,int m){\n  int ky=Gy.columns();\n  int kx=Gx.columns();\n  int kz=Gz.columns();\n  TetradMatrix H=KernelUtils.constructH(m);\n  TetradMatrix Gcy=H.times(Gy);\n  TetradMatrix Gcx=H.times(Gx);\n  TetradMatrix Gcz=H.times(Gz);\n  TetradMatrix A=new TetradMatrix(ky,kx);\n  TetradMatrix Gcyt=Gcy.transpose();\n  A=Gcyt.times(Gcx);\n  TetradMatrix B=Gcy.times(A);\n  TetradMatrix Kyx=new TetradMatrix(m,m);\n  TetradMatrix Gcxt=new TetradMatrix(kx,m);\n  Gcxt=Gcx.transpose();\n  Kyx=B.times(Gcxt);\n  double empHSIC=0.0;\n  double xy=0.0;\n  for (int i=0; i < m; i++) {\n    empHSIC+=matrixProductEntry(B,Gcxt,i,i);\n  }\n  TetradMatrix Gytz=Gcyt.times(Gcz);\n  TetradMatrix Gczt=Gcz.transpose();\n  TetradMatrix Gztx=Gczt.times(Gcx);\n  TetradMatrix Gztz=Gczt.times(Gcz);\n  TetradMatrix Gztzr=Gztz.copy();\n  for (int i=0; i < kz; i++) {\n    Gztzr.set(i,i,Gztz.get(i,i) + this.regularizer);\n  }\n  TetradMatrix ZI=Gztzr.inverse();\n  TetradMatrix ZIzt=ZI.times(Gczt);\n  TetradMatrix Gzr=Gcz.copy();\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < kz; j++) {\n      Gzr.set(i,j,Gcz.get(i,j) * (-1.0 / this.regularizer));\n    }\n  }\n  TetradMatrix Zinv=Gzr.times(ZIzt);\n  for (int i=0; i < m; i++) {\n    Zinv.set(i,i,Zinv.get(i,i) + (1.0 / this.regularizer));\n  }\n  TetradMatrix Gztzinv=Gczt.times(Zinv);\n  TetradMatrix Gzinvz=Zinv.times(Gcz);\n  TetradMatrix Gztinv2z=Gztzinv.times(Gzinvz);\n  TetradMatrix Gytzztzinv2z=Gytz.times(Gztinv2z);\n  TetradMatrix Gytzztzinv2zztx=Gytzztzinv2z.times(Gztx);\n  TetradMatrix Gyytzztzinv2zztx=Gcy.times(Gytzztzinv2zztx);\n  double second=0.0;\n  for (int i=0; i < m; i++) {\n    second+=matrixProductEntry(Gyytzztzinv2zztx,Gcxt,i,i);\n  }\n  empHSIC-=2 * second;\n  TetradMatrix Gxtz=Gcxt.times(Gcz);\n  TetradMatrix Gxtzztinv2z=Gxtz.times(Gztinv2z);\n  TetradMatrix Gyytzztzinv2zztxxtzztinv2z=Gyytzztzinv2zztx.times(Gxtzztinv2z);\n  for (int i=0; i < m; i++) {\n    empHSIC+=matrixProductEntry(Gyytzztzinv2zztxxtzztinv2z,Gczt,i,i);\n  }\n  double betaz=0.0;\n  for (int i=0; i < (m - 1); i++) {\n    for (int j=(i + 1); j < m; j++) {\n      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,i,j),2);\n      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,j,i),2);\n    }\n  }\n  empHSIC*=(m / (betaz * (m - 1)));\n  return empHSIC;\n}"}
{"ids": "75792", "raw_code": "public static File parse(String[] options,String option,File defValue) throws Exception {\n  String value=Utils.getOption(option,options);\n  if (value.isEmpty())   return defValue;\n else   return new File(value);\n}"}
{"ids": "28002", "raw_code": "public void ensureCapacity(int minCapacity){\n  int oldCapacity=capacity;\n  if (minCapacity > oldCapacity) {\n    int newCapacity=(oldCapacity * 3) / 2 + 1;\n    if (newCapacity < minCapacity)     newCapacity=minCapacity;\n    BitVector vector=toBitVector();\n    vector.setSize(newCapacity * bitsPerElement);\n    this.bits=vector.elements();\n    this.capacity=newCapacity;\n  }\n}"}
{"ids": "22171", "raw_code": "private String detailBase(final Method method){\n  final Class<?> clazz=method.getDeclaringClass();\n  final String detailBase=MessageUtils.bundleNameForClass(clazz);\n  if (isBlank(detailBase)) {\n    throw new IllegalStateException(\"no bundle name defined for \" + clazz);\n  }\n  return detailBase;\n}"}
{"ids": "35358", "raw_code": "public void finished() throws IOException {\n  outputStream.close();\n}"}
{"ids": "48504", "raw_code": "public final void lock(){\n  SunToolkit.awtLock();\n}"}
{"ids": "74656", "raw_code": "public UpdateResponse remove(long id) throws IOException, SolrServerException {\n  UpdateResponse res=solrClient.deleteById(String.valueOf(id));\n  solrClient.commit(false,true,true);\n  return res;\n}"}
{"ids": "38334", "raw_code": "public void switchSetup(){\n  int retVal;\n  retVal=m_SetupFileChooser.showOpenDialog(this);\n  if (retVal != JFileChooser.APPROVE_OPTION) {\n    return;\n  }\n  m_DbUtils.initialize(m_SetupFileChooser.getSelectedFile());\n  m_URL=m_DbUtils.getDatabaseURL();\n  m_User=m_DbUtils.getUsername();\n  m_Password=m_DbUtils.getPassword();\n  m_TextURL.setText(m_URL);\n}"}
{"ids": "86954", "raw_code": "private ClientDetailsEntity loadClientObject(final OIDCAuthorizationRequestContext authorizationRequest){\n  log.debug(\"Loading client by id {}\",authorizationRequest.getClientId());\n  return clientService.loadClientByClientId(authorizationRequest.getClientId());\n}"}
{"ids": "7283", "raw_code": "public void addFieldProperty(String name,String accessorField){\n  fieldProperties.add(new LegacyFieldPropDesc(name,accessorField));\n}"}
{"ids": "17018", "raw_code": "private void parseNoWildCards(){\n  this.fSegments=new String[1];\n  this.fSegments[0]=this.fPattern;\n  this.fBound=this.fLength;\n}"}
{"ids": "67953", "raw_code": "public Map<String,String> environment(){\n  String base64=toStringBase64();\n  if (base64 == null || base64.length() == 0) {\n    return Collections.emptyMap();\n  }\n  Map<String,String> environment=Maps.newHashMap();\n  environment.put(BaggageUtils.BAGGAGE_ENVIRONMENT_VARIABLE,base64);\n  return environment;\n}"}
{"ids": "55234", "raw_code": "public void listenModLog(String username,String token){\n  if (!hasServer()) {\n    return;\n  }\n  if (modLogListen.containsKey(username)) {\n    return;\n  }\n  this.token=token;\n  long userId=getUserId(username);\n  modLogListen.put(username,userId);\n  LOGGER.info(\"[PubSub] LISTEN ModLog \" + username + \" \"+ userId);\n  if (userId != -1) {\n    sendListenModLog(userId,true);\n  }\n}"}
{"ids": "28977", "raw_code": "public static boolean isValidClassName(String className){\n  if (className.indexOf('(') >= 0) {\n    return false;\n  }\n  return true;\n}"}
{"ids": "73782", "raw_code": "@SuppressWarnings(\"deprecation\") public void newMinute(){\n  if (!inSyncWithInternalFastClock) {\n    return;\n  }\n  if (correctFastClock || synchronizeWithInternalClock) {\n    Date now=clock.getTime();\n    if (now.getMinutes() != 0) {\n      curDays=now.getDate();\n      curHours=now.getHours();\n      curMinutes=now.getMinutes();\n      long millis=now.getTime();\n      long elapsedMS=millis % MSECPERMINUTE;\n      double frac_min=elapsedMS / (double)MSECPERMINUTE;\n      curFractionalMinutes=(int)CORRECTION - (int)(CORRECTION * frac_min);\n      setClock();\n    }\n  }\n else   if (setInternal && !correctFastClock && !synchronizeWithInternalClock) {\n    inSyncWithInternalFastClock=false;\n    initiateRead();\n  }\n}"}
{"ids": "21475", "raw_code": "private <T extends DiscoveredSystemObject>boolean isDataCollectionScanJobSchedulingNeeded(long lastScanTime,boolean inProgress){\n  long systemTime=System.currentTimeMillis();\n  long refreshInterval=getRefreshInterval(ControllerServiceImpl.SCANNER);\n  if (inProgress) {\n    return false;\n  }\n  if (lastScanTime > 0 && (systemTime - lastScanTime < refreshInterval * 1000)) {\n    _logger.info(\"Skipping scanner job; attempt to schedule faster than refresh interval allows\");\n    return false;\n  }\n  return true;\n}"}
{"ids": "37317", "raw_code": "private void removeBreakpoints(final Set<BreakpointAddress> breakpointAddressSet,final BreakpointStorage storage){\n  if (breakpointAddressSet.size() != 0) {\n    final Set<Breakpoint> breakpoints=storage.getBreakPointsByAddress(breakpointAddressSet);\n    storage.removeBreakpoints(breakpointAddressSet);\n    for (    final BreakpointManagerListener listener : listeners) {\n      try {\n        listener.breakpointsRemoved(breakpoints);\n      }\n catch (      final Exception e) {\n        CUtilityFunctions.logException(e);\n      }\n    }\n  }\n}"}
{"ids": "14832", "raw_code": "public void replaceCreationTemplate(Guid guid,String templateName,AttrSet attrSet) throws ConfigManagerException {\n  if (guid == null) {\n    guid=new Guid(_rootDN);\n  }\n  DN dn=DN.valueOf(guid.getDn());\n  String org=\"\";\n  List<RDN> rdns=new ArrayList<>();\n  for (  RDN rdn : dn) {\n    rdns.add(0,rdn);\n  }\n  for (  RDN rdn : rdns) {\n    org=org + \"/\" + LDAPUtils.rdnValue(rdn);\n  }\n  String service=CREATIONPATH + \"/\" + templateName;\n  Map map=convertToMap(attrSet);\n  try {\n    replaceServiceAttributes(org,service,map);\n  }\n catch (  SMSException e) {\n    String args[]=new String[1];\n    args[0]=e.toString();\n    throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args));\n  }\ncatch (  SSOException se) {\n    String args[]=new String[1];\n    args[0]=se.toString();\n    throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args));\n  }\n}"}
{"ids": "30813", "raw_code": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  MarshalledInstance mi=(MarshalledInstance)stream.readObject();\n  try {\n    listener=(RemoteEventListener)mi.get(false);\n  }\n catch (  Throwable e) {\n    if (e instanceof Error && ThrowableConstants.retryable(e) == ThrowableConstants.BAD_OBJECT) {\n      throw (Error)e;\n    }\n    logger.log(Level.WARNING,\"failed to recover event listener\",e);\n  }\n}"}
{"ids": "22548", "raw_code": "public ScServer createClusterServer(String ssn,String clusterName,String osId) throws StorageCenterAPIException {\n  Parameters params=new Parameters();\n  params.add(\"Name\",clusterName);\n  params.add(\"StorageCenter\",ssn);\n  params.add(\"Notes\",NOTES_STRING);\n  params.add(\"OperatingSystem\",osId);\n  RestResult rr=restClient.post(\"StorageCenter/ScServerCluster\",params.toJson());\n  if (!checkResults(rr)) {\n    String error=String.format(\"Error creating cluster server '%s': %s\",clusterName,rr.getErrorMsg());\n    throw new StorageCenterAPIException(error);\n  }\n  return gson.fromJson(rr.getResult(),ScServer.class);\n}"}
{"ids": "79186", "raw_code": "static PotionType fromName(String name){\n  for (  PotionTypeTable table : values()) {\n    if (name.equalsIgnoreCase(table.name))     return table.type;\n  }\n  return PotionType.valueOf(name.toUpperCase());\n}"}
{"ids": "31602", "raw_code": "public synchronized void removeCurlMesh(CurlMesh mesh){\n  while (mCurlMeshes.remove(mesh))   ;\n}"}
{"ids": "43588", "raw_code": "private List<Datum> sampleNbestList(int sourceId,Sequence<IString> source,SentenceLevelMetric<IString,String> scoreMetric,List<RichTranslation<IString,String>> translations,List<Sequence<IString>> references){\n  int[] sourceIds=new int[1];\n  sourceIds[0]=sourceId;\n  List<Sequence<IString>> sources=new ArrayList<>(1);\n  sources.add(source);\n  List<List<RichTranslation<IString,String>>> translationList=new ArrayList<List<RichTranslation<IString,String>>>(1);\n  translationList.add(translations);\n  List<List<Sequence<IString>>> referenceList=new ArrayList<List<Sequence<IString>>>(1);\n  referenceList.add(references);\n  return sampleNbestLists(sourceIds,sources,scoreMetric,translationList,referenceList);\n}"}
{"ids": "63250", "raw_code": "public boolean isClosed(){\n  return map.isClosed();\n}"}
{"ids": "45211", "raw_code": "public void insertThinkTime(){\n  ScriptStep thinkTimeScriptStep=ScriptStepFactory.createThinkTime(getMinThinkTime(),getMaxThinkTime());\n  steps.add(getInsertIndex(),thinkTimeScriptStep);\n  minThinkTime=\"\";\n  maxThinkTime=\"\";\n  reindexScriptSteps();\n}"}
{"ids": "60434", "raw_code": "public void addNode(final Instruction instruction){\n  instructions.add(instruction);\n  if (prevInstruction != null) {\n    addEdge(prevInstruction,instruction);\n  }\n  prevInstruction=instruction;\n}"}
{"ids": "3968", "raw_code": "public void ensureCapacity(int minimumCapacity){\n  if (minimumCapacity <= _capacity)   return;\n  if (minimumCapacity > 0x1000) {\n    _capacity=(minimumCapacity + 0xfff) & ~0xfff;\n  }\n else {\n    while (_capacity < minimumCapacity) {\n      _capacity+=_capacity;\n    }\n  }\n  byte[] bytes=new byte[_capacity];\n  System.arraycopy(_buffer,0,bytes,0,_length);\n  _buffer=bytes;\n}"}
{"ids": "71255", "raw_code": "public <T>JSONAPIDocument<List<T>> readDocumentCollection(InputStream dataStream,Class<T> clazz){\n  try {\n    resourceCache.init();\n    JsonNode rootNode=objectMapper.readTree(dataStream);\n    ValidationUtils.ensureNotError(objectMapper,rootNode);\n    ValidationUtils.ensureCollection(rootNode);\n    resourceCache.cache(parseIncluded(rootNode));\n    List<T> resourceList=new ArrayList<>();\n    for (    JsonNode element : rootNode.get(DATA)) {\n      T pojo=readObject(element,clazz,true);\n      resourceList.add(pojo);\n    }\n    JSONAPIDocument<List<T>> result=new JSONAPIDocument<>(resourceList,objectMapper);\n    if (rootNode.has(META)) {\n      result.setMeta(mapMeta(rootNode.get(META)));\n    }\n    if (rootNode.has(LINKS)) {\n      result.setLinks(new Links(mapLinks(rootNode.get(LINKS))));\n    }\n    return result;\n  }\n catch (  RuntimeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n finally {\n    resourceCache.clear();\n  }\n}"}
{"ids": "70178", "raw_code": "public void addTargetedBySwarm(int entityId,int weaponId){\n  hitBySwarmsEntity.addElement(new Integer(entityId));\n  hitBySwarmsWeapon.addElement(new Integer(weaponId));\n}"}
{"ids": "32397", "raw_code": "private boolean isCheckpointExists(Connection conn,String key) throws SQLException {\n  PreparedStatement st=null;\n  ResultSet rs=null;\n  try {\n    st=conn.prepareStatement(chkExistsSql);\n    st.setString(1,key);\n    rs=st.executeQuery();\n    return rs.next();\n  }\n  finally {\n    U.close(rs,log);\n    U.close(st,log);\n  }\n}"}
{"ids": "5782", "raw_code": "public static void copyStream(InputStream is,OutputStream os,byte[] buffer,int bufferSize,String confid,double fileSize,Context context) throws IOException {\n  double downloaded=0;\n  int[] update=new int[3];\n  try {\n    for (; ; ) {\n      int count=is.read(buffer,0,bufferSize);\n      downloaded+=count;\n      if (count == -1) {\n        if (context != null) {\n        }\n        break;\n      }\n      os.write(buffer,0,count);\n      if (context != null) {\n        update[0]=(int)downloaded;\n        update[1]=(int)fileSize;\n        update[2]=(int)((downloaded / fileSize) * 100);\n      }\n    }\n  }\n catch (  IOException e) {\n    throw e;\n  }\n}"}
{"ids": "44123", "raw_code": "@Override public void writeHeader() throws IOException {\n  os=new PDFWriter(new BufferedOutputStream(ros),PDF_VERSION);\n  delayImageQueue=new PDFImageDelayQueue(os);\n  delayPaintQueue=new PDFPaintDelayQueue(os,delayImageQueue);\n  fontTable=new PDFFontTable(os);\n  PDFDocInfo info=os.openDocInfo(\"DocInfo\");\n  info.setTitle(getProperty(TITLE));\n  info.setAuthor(getProperty(AUTHOR));\n  info.setSubject(getProperty(SUBJECT));\n  info.setKeywords(getProperty(KEYWORDS));\n  info.setCreator(getCreator());\n  info.setProducer(producer == null ? \"\" : producer);\n  if (!isDeviceIndependent()) {\n    Calendar now=Calendar.getInstance();\n    info.setCreationDate(now);\n    info.setModificationDate(now);\n  }\n  info.setTrapped(\"False\");\n  os.close(info);\n  PDFCatalog catalog=os.openCatalog(\"Catalog\",\"RootPage\");\n  catalog.setOutlines(\"Outlines\");\n  catalog.setPageMode(\"UseOutlines\");\n  catalog.setViewerPreferences(\"Preferences\");\n  catalog.setOpenAction(new Object[]{os.ref(\"Page1\"),os.name(\"Fit\")});\n  os.close(catalog);\n  PDFViewerPreferences prefs=os.openViewerPreferences(\"Preferences\");\n  prefs.setFitWindow(true);\n  prefs.setCenterWindow(false);\n  os.close(prefs);\n  alphaIndex=1;\n  extGStates=new HashMap<Float,String>();\n  if (!isMultiPage()) {\n    openPage(getSize(),null);\n  }\n}"}
{"ids": "43979", "raw_code": "protected String parseString(int closingCharacter) throws IOException, RDFParseException {\n  StringBuilder sb=getBuilder();\n  while (true) {\n    int c=readCodePoint();\n    if (c == closingCharacter) {\n      break;\n    }\n else     if (c == -1) {\n      throwEOFException();\n    }\n    appendCodepoint(sb,c);\n    if (c == '\\\\') {\n      c=readCodePoint();\n      if (c == -1) {\n        throwEOFException();\n      }\n      appendCodepoint(sb,c);\n    }\n  }\n  return sb.toString();\n}"}
{"ids": "48575", "raw_code": "private void codeUnwrapReturnValue(Class<?> type,DataOutputStream out) throws IOException {\n  if (type.isPrimitive()) {\n    PrimitiveTypeInfo prim=PrimitiveTypeInfo.get(type);\n    out.writeByte(opc_checkcast);\n    out.writeShort(cp.getClass(prim.wrapperClassName));\n    out.writeByte(opc_invokevirtual);\n    out.writeShort(cp.getMethodRef(prim.wrapperClassName,prim.unwrapMethodName,prim.unwrapMethodDesc));\n    if (type == int.class || type == boolean.class || type == byte.class || type == char.class || type == short.class) {\n      out.writeByte(opc_ireturn);\n    }\n else     if (type == long.class) {\n      out.writeByte(opc_lreturn);\n    }\n else     if (type == float.class) {\n      out.writeByte(opc_freturn);\n    }\n else     if (type == double.class) {\n      out.writeByte(opc_dreturn);\n    }\n else {\n      throw new AssertionError();\n    }\n  }\n else {\n    out.writeByte(opc_checkcast);\n    out.writeShort(cp.getClass(dotToSlash(type.getName())));\n    out.writeByte(opc_areturn);\n  }\n}"}
{"ids": "34809", "raw_code": "private String formatLink(String[] parts){\n  String anchor, text;\n  if (parts.length < 2) {\n    anchor=\"\";\n    text=\"Checker Framework\";\n  }\n else {\n    anchor=parts[0];\n    text=parts[1];\n  }\n  return String.format(\"<A HREF=\\\"http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html%s\\\">%s</A>\",anchor,text);\n}"}
{"ids": "81188", "raw_code": "public boolean fixUtils(String[] utils) throws Exception {\n  for (  String util : utils) {\n    if (!checkUtil(util)) {\n      if (checkUtil(\"busybox\")) {\n        if (hasUtil(util,\"busybox\")) {\n          fixUtil(util,RootTools.utilPath);\n        }\n      }\n else {\n        if (checkUtil(\"toolbox\")) {\n          if (hasUtil(util,\"toolbox\")) {\n            fixUtil(util,RootTools.utilPath);\n          }\n        }\n else {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}"}
{"ids": "4885", "raw_code": "public static String[] lsDirectories(String directory) throws Exception {\n  String[] tmp=ls(directory);\n  ArrayList<String> files=new ArrayList<>();\n  for (  String s : tmp) {\n    if (isDirectory(directory + File.separator + s))     files.add(s);\n  }\n  return files.toArray(new String[files.size()]);\n}"}
{"ids": "35337", "raw_code": "public static void encode(Appendable out,int value) throws IOException {\n  value=toVLQSigned(value);\n  do {\n    int digit=value & VLQ_BASE_MASK;\n    value>>>=VLQ_BASE_SHIFT;\n    if (value > 0) {\n      digit|=VLQ_CONTINUATION_BIT;\n    }\n    out.append(Base64.toBase64(digit));\n  }\n while (value > 0);\n}"}
{"ids": "36634", "raw_code": "public mxICellOverlay removeCellOverlay(Object cell,mxICellOverlay overlay){\n  if (overlay == null) {\n    removeCellOverlays(cell);\n  }\n else {\n    mxICellOverlay[] arr=getCellOverlays(cell);\n    if (arr != null) {\n      List<mxICellOverlay> list=Arrays.asList(arr);\n      if (list.remove(overlay)) {\n        removeCellOverlayComponent(overlay,cell);\n      }\n      arr=(mxICellOverlay[])list.toArray();\n      overlays.put(cell,arr);\n    }\n  }\n  return overlay;\n}"}
{"ids": "71598", "raw_code": "public void removeForeignKey(int idx){\n  foreignKeys.remove(idx);\n}"}
{"ids": "78472", "raw_code": "public void addGefaehrdungsUmsetzung(GefaehrdungsUmsetzung gefaehrdung){\n  if (!allGefaehrdungsUmsetzungen.contains(gefaehrdung)) {\n    allGefaehrdungsUmsetzungen.add(gefaehrdung);\n  }\n}"}
{"ids": "3860", "raw_code": "String normalizeClassPath(String classPath,boolean generateRelative){\n  char sep=CauchoUtil.getPathSeparatorChar();\n  int head=0;\n  int tail=0;\n  CharBuffer cb=CharBuffer.allocate();\n  while (head < classPath.length()) {\n    tail=classPath.indexOf(sep,head);\n    if (tail < 0)     tail=classPath.length();\n    if (tail > head) {\n      String segment=classPath.substring(head,tail);\n      segment=normalizePath(segment,generateRelative);\n      if (segment != null) {\n        if (cb.length() != 0)         cb.append(sep);\n        cb.append(segment);\n      }\n    }\n    head=tail + 1;\n  }\n  return cb.close();\n}"}
{"ids": "35067", "raw_code": "protected Node stringConversion(Node node){\n  TypeElement stringElement=elements.getTypeElement(\"java.lang.String\");\n  if (!TypesUtils.isString(node.getType())) {\n    Node converted=new StringConversionNode(node.getTree(),node,stringElement.asType());\n    addToConvertedLookupMap(converted);\n    insertNodeAfter(converted,node);\n    return converted;\n  }\n else {\n    return node;\n  }\n}"}
{"ids": "48611", "raw_code": "private void validate() throws URISyntaxException {\n  String s=getScheme();\n  if ((s != null) && (s.compareTo(\"file\") == 0)) {\n    return;\n  }\n  if (getLocalVmId() == -1) {\n    throw new URISyntaxException(uri.toString(),\"Local vmid required\");\n  }\n}"}
{"ids": "16155", "raw_code": "public synchronized void finishWriting(){\n  doneWriting=true;\n  notifyAll();\n}"}
{"ids": "27541", "raw_code": "private long offset2PhysicalAddress(final long offset){\n  return offset + headerSize;\n}"}
{"ids": "14469", "raw_code": "public static boolean isAuthorized(String logName,String operation,Object credential){\n  return authorizer.isAuthorized(logName,operation,credential);\n}"}
{"ids": "7078", "raw_code": "public PermissionRequestObject onRational(Func3 rationalFunc){\n  mRationalFunc=rationalFunc;\n  return this;\n}"}
{"ids": "30573", "raw_code": "public GenericPrincipal(String userName,String password,List<String> roles,Map<String,List<GenericPrincipal.Attribute>> writeEntries,Map<String,List<GenericPrincipal.Attribute>> readEntries,Map<String,List<GenericPrincipal.Attribute>> executeTasks){\n  this.userName=userName;\n  this.password=password;\n  this.writeEntries=writeEntries;\n  this.readEntries=readEntries;\n  this.executeTasks=executeTasks;\n  if (roles != null) {\n    this.roles=new String[roles.size()];\n    this.roles=roles.toArray(this.roles);\n    if (this.roles.length > 0)     Arrays.sort(this.roles);\n  }\n  writeMatchObjects=new HashMap<String,MatchObject>();\n  readMatchObjects=new HashMap<String,MatchObject>();\n  executeMatchObjects=new HashMap<String,MatchObject>();\n  userDefinedRoles=new ArrayList<String>();\n}"}
{"ids": "80072", "raw_code": "public static int roll1D6(){\n  return rand.nextInt(6) + 1;\n}"}
{"ids": "67982", "raw_code": "static byte[] septetStream2octetStream(byte[] septets){\n  int octetLength=(int)Math.ceil(((septets.length * 7)) / 8.0);\n  byte[] octets=new byte[octetLength];\n  for (int i=0; i < septets.length; i++) {\n    for (int j=0; j < 7; j++) {\n      if ((septets[i] & (1 << j)) != 0) {\n        int bitIndex=(i * 7) + j;\n        octets[bitIndex >>> 3]|=1 << (bitIndex & 7);\n      }\n    }\n  }\n  return octets;\n}"}
{"ids": "72509", "raw_code": "@Override public double height(final int markerIndex){\n  MathUtils.checkRangeInclusive(markerIndex,1,markerArray.length - 1);\n  return markerArray[markerIndex].markerHeight;\n}"}
{"ids": "54100", "raw_code": "public <K,V>void consume(String groupId,String clientId,OffsetResetStrategy autoOffsetReset,Deserializer<K> keyDeserializer,Deserializer<V> valueDeserializer,BooleanSupplier continuation,OffsetCommitCallback offsetCommitCallback,Runnable completion,Collection<String> topics,java.util.function.Consumer<ConsumerRecord<K,V>> consumerFunction){\n  Properties props=getConsumerProperties(groupId,clientId,autoOffsetReset);\n  Thread t=new Thread(null);\n  t.setName(clientId + \"-thread\");\n  t.start();\n}"}
{"ids": "63341", "raw_code": "public static void reindex(Connection conn) throws SQLException {\n  init(conn);\n  removeAllTriggers(conn,TRIGGER_PREFIX);\n  removeIndexFiles(conn);\n  Statement stat=conn.createStatement();\n  ResultSet rs=stat.executeQuery(\"SELECT * FROM \" + SCHEMA + \".INDEXES\");\n  while (rs.next()) {\n    String schema=rs.getString(\"SCHEMA\");\n    String table=rs.getString(\"TABLE\");\n    createTrigger(conn,schema,table);\n    indexExistingRows(conn,schema,table);\n  }\n}"}
{"ids": "51018", "raw_code": "private void resizeTables(){\n  if (mObjectDataUsed > mObjectData.length - MAX_DATA_SIZE) {\n    mObjectData=Arrays.copyOf(mObjectData,mObjectData.length * 2);\n  }\n  if (mObjectCount < mTypes.length) {\n    return;\n  }\n  mObjectOffset=Arrays.copyOf(mObjectOffset,mObjectOffset.length * 2);\n  mTypes=Arrays.copyOf(mTypes,mTypes.length * 2);\n  mObjects=Arrays.copyOf(mObjects,mObjects.length * 2);\n  mRect=Arrays.copyOf(mRect,mRect.length * 2);\n}"}
{"ids": "30044", "raw_code": "public static String queueNameFromDBName(String dbName){\n  String[] tokens=dbName.split(\"_\",3);\n  return tokens[2];\n}"}
{"ids": "80880", "raw_code": "public String UseThis(int type,String id,String context){\n  int i=FindSym(type,id,context);\n  if (i == symtab.size())   return id;\n else   return ((SymTabEntry)symtab.elementAt(i)).useThis;\n}"}
{"ids": "78875", "raw_code": "private float angle(TouchState s){\n  return (float)Math.toDegrees(Math.atan2(s.yDown - s.yCurrent,s.xDown - s.xCurrent));\n}"}
{"ids": "62865", "raw_code": "private int uint16FromData(int offset){\n  return twoBytesToInt(Arrays.copyOfRange(data(),offset,offset + 2),Constants.CC2540_BYTE_ORDER);\n}"}
{"ids": "56916", "raw_code": "private static String removeQuotesEncolosingOption(String fileName,String option) throws Exception {\n  String option1=removeQuoteCharactersIfNecessary(fileName,option,'\"');\n  if (!option1.equals(option)) {\n    return option1;\n  }\n  return removeQuoteCharactersIfNecessary(fileName,option,'\\'');\n}"}
{"ids": "60478", "raw_code": "@Nullable public Dimension adjust(@NotNull Dimension newPreferredSize,@Nullable Dimension oldPreferredSize,@NotNull EditorImpl editor){\n  if (oldPreferredSize == null || mySkip) {\n    return newPreferredSize;\n  }\n  if (newPreferredSize.height != oldPreferredSize.height) {\n    return newPreferredSize;\n  }\n  stripTimings();\n  myTimings.add(System.currentTimeMillis());\n  if (myTimings.size() < FREQUENT_SIZE_CHANGES_NUMBER) {\n    return newPreferredSize;\n  }\n  boolean increaseWidth=newPreferredSize.width > oldPreferredSize.width;\n  Dimension result;\n  if (increaseWidth) {\n    final int spaceWidth=EditorUtil.getSpaceWidth(Font.PLAIN,editor);\n    newPreferredSize.width+=myReserveColumns * spaceWidth;\n    myReserveColumns+=3;\n    result=newPreferredSize;\n  }\n else {\n    result=oldPreferredSize;\n  }\n  scheduleSizeUpdate(editor);\n  return result;\n}"}
{"ids": "42435", "raw_code": "public RVMField findDeclaredField(Atom fieldName,Atom fieldDescriptor){\n  for (  RVMField field : declaredFields) {\n    if (field.getName() == fieldName && field.getDescriptor() == fieldDescriptor) {\n      return field;\n    }\n  }\n  return null;\n}"}
{"ids": "7871", "raw_code": "public Quarter(Date time,TimeZone zone){\n  this(time,zone,Locale.getDefault());\n}"}
{"ids": "4484", "raw_code": "public static boolean readBoolean(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {\n  if (required) {\n    return jsonArray.getBoolean(index);\n  }\n  if (notNull && jsonArray.isNull(index)) {\n    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));\n  }\n  boolean value=false;\n  if (!jsonArray.isNull(index)) {\n    value=jsonArray.getBoolean(index);\n  }\n  return value;\n}"}
{"ids": "33580", "raw_code": "protected static void autoBoxing(MethodVisitor mv,Type fieldType){\nswitch (fieldType.getSort()) {\ncase Type.BOOLEAN:\n    mv.visitMethodInsn(INVOKESTATIC,\"java/lang/Boolean\",\"valueOf\",\"(Z)Ljava/lang/Boolean;\");\n  break;\ncase Type.BYTE:\nmv.visitMethodInsn(INVOKESTATIC,\"java/lang/Byte\",\"valueOf\",\"(B)Ljava/lang/Byte;\");\nbreak;\ncase Type.CHAR:\nmv.visitMethodInsn(INVOKESTATIC,\"java/lang/Character\",\"valueOf\",\"(C)Ljava/lang/Character;\");\nbreak;\ncase Type.SHORT:\nmv.visitMethodInsn(INVOKESTATIC,\"java/lang/Short\",\"valueOf\",\"(S)Ljava/lang/Short;\");\nbreak;\ncase Type.INT:\nmv.visitMethodInsn(INVOKESTATIC,\"java/lang/Integer\",\"valueOf\",\"(I)Ljava/lang/Integer;\");\nbreak;\ncase Type.FLOAT:\nmv.visitMethodInsn(INVOKESTATIC,\"java/lang/Float\",\"valueOf\",\"(F)Ljava/lang/Float;\");\nbreak;\ncase Type.LONG:\nmv.visitMethodInsn(INVOKESTATIC,\"java/lang/Long\",\"valueOf\",\"(J)Ljava/lang/Long;\");\nbreak;\ncase Type.DOUBLE:\nmv.visitMethodInsn(INVOKESTATIC,\"java/lang/Double\",\"valueOf\",\"(D)Ljava/lang/Double;\");\nbreak;\n}\n}"}
{"ids": "74836", "raw_code": "public final void openPdfFile(final byte[] data) throws PdfException {\n  final RandomAccessBuffer pdf_datafile;\n  try {\n    if (PdfFileReader.alwaysCacheInMemory == -1 || data.length < PdfFileReader.alwaysCacheInMemory) {\n      pdf_datafile=new RandomAccessDataBuffer(data);\n    }\n else {\n      try {\n        final File file=File.createTempFile(\"page\",\".bin\",new File(ObjectStore.temp_dir));\n        tempFileName=file.getAbsolutePath();\n        final java.io.FileOutputStream a=new java.io.FileOutputStream(file);\n        a.write(data);\n        a.flush();\n        a.close();\n        pdf_datafile=new RandomAccessFileBuffer(tempFileName,\"r\");\n      }\n catch (      final Exception e) {\n        throw new RuntimeException(\"Unable to create temporary file in \" + ObjectStore.temp_dir + ' '+ e);\n      }\n    }\n    objectReader.init(pdf_datafile);\n  }\n catch (  final Exception e) {\n    LogWriter.writeLog(\"Exception \" + e + \" accessing file\");\n    throw new PdfException(\"Exception \" + e + \" accessing file\");\n  }\n}"}
{"ids": "27045", "raw_code": "public static void main(String[] args){\n  if (args.length < 2) {\n    LOGGER.error(\"There must be at least two arguments\");\n    return;\n  }\n  int lastIndex=args.length - 1;\n  Path[] files=getFiles(args);\n  Main main=new Main();\n  main.generate(files[lastIndex],Arrays.copyOf(files,lastIndex));\n}"}
{"ids": "9008", "raw_code": "@Nullable E awaitMatch(int start){\n  for (int step=0, totalSpins=0; (step < ARENA_LENGTH) && (totalSpins < SPINS); step++) {\n    int index=(start + step) & ARENA_MASK;\n    AtomicReference<Object> slot=arena[index];\n    Object found=slot.get();\n    if (found == FREE) {\n      if (slot.compareAndSet(FREE,WAITER)) {\n        int slotSpins=0;\n        for (; ; ) {\n          found=slot.get();\n          if ((found != WAITER) && slot.compareAndSet(found,FREE)) {\n            @SuppressWarnings(\"unchecked\") E e=(E)found;\n            return e;\n          }\n else           if ((slotSpins >= SPINS_PER_STEP) && (found == WAITER) && (slot.compareAndSet(WAITER,FREE))) {\n            totalSpins+=slotSpins;\n            break;\n          }\n          slotSpins++;\n        }\n      }\n    }\n else     if ((found != WAITER) && slot.compareAndSet(found,FREE)) {\n      @SuppressWarnings(\"unchecked\") E e=(E)found;\n      return e;\n    }\n  }\n  return null;\n}"}
{"ids": "52822", "raw_code": "private ArrayList<Signature> constructOneSignatures(SetDBIDs[][] partitions,final long[][] markers){\n  final int dim=partitions.length;\n  ArrayList<Signature> signatures=new ArrayList<>();\n  for (int d=0; d < dim; d++) {\n    final DBIDs[] parts=partitions[d];\n    if (parts == null) {\n      continue;\n    }\n    final long[] marked=markers[d];\n    for (int start=BitsUtil.nextSetBit(marked,0); start >= 0; ) {\n      int end=BitsUtil.nextClearBit(marked,start + 1);\n      end=(end == -1) ? dim : end;\n      int[] signature=new int[dim << 1];\n      Arrays.fill(signature,-1);\n      signature[d << 1]=start;\n      signature[(d << 1) + 1]=end - 1;\n      HashSetModifiableDBIDs sids=unionDBIDs(parts,start,end);\n      if (LOG.isDebugging()) {\n        LOG.debug(\"1-signature: \" + d + \" \"+ start+ \"-\"+ (end - 1));\n      }\n      signatures.add(new Signature(signature,sids));\n      start=(end < dim) ? BitsUtil.nextSetBit(marked,end + 1) : -1;\n    }\n  }\n  return signatures;\n}"}
{"ids": "60077", "raw_code": "public static int findEndTrimNewlineChars(CharSequence s){\n  for (int i=s.length(); i > 0; ) {\n    if (s.charAt(i - 1) != '\\n') {\n      return i;\n    }\n    i--;\n    if (i > 0 && s.charAt(i - 1) == '\\r') {\n      i--;\n    }\n  }\n  return 0;\n}"}
{"ids": "74747", "raw_code": "private void calcCoordinates(final float x,final float[][] Trm,float charSpacing){\n  final float[][] trm=new float[3][3];\n  for (int xx=0; xx < 3; xx++) {\n    System.arraycopy(Trm[xx],0,trm[xx],0,3);\n  }\n  x1=x;\n  x2=trm[2][0] - (charSpacing * trm[0][0]);\n  if (glyphData.isHorizontal()) {\n    if (trm[1][0] < 0) {\n      x1=x + trm[1][0] - (charSpacing * trm[0][0]);\n      x2=trm[2][0];\n    }\n else     if (trm[1][0] > 0) {\n      x1=x;\n      x2=trm[2][0];\n    }\n  }\n else   if (trm[1][0] > 0) {\n    x1=trm[2][0];\n    x2=x + trm[1][0] - (charSpacing * trm[0][0]);\n  }\n else   if (trm[1][0] < 0) {\n    x2=trm[2][0];\n    x1=x + trm[1][0] - (charSpacing * trm[0][0]);\n  }\n}"}
{"ids": "73680", "raw_code": "public void printEntry(Writer w){\n  try {\n    String indent=\"                      \";\n    int indentWidth=indent.length();\n    HardcopyWriter ww=(HardcopyWriter)w;\n    int textSpace=ww.getCharactersPerLine() - indentWidth - 1;\n    String newLine=\"\\n\";\n    w.write(newLine,0,1);\n    String s=\"   ID:                \" + _id;\n    w.write(s,0,s.length());\n    if (!(_consistNumber.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Consist number:    \" + _consistNumber;\n      w.write(s,0,s.length());\n    }\n    if (!(_roadName.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Road name:         \" + _roadName;\n      w.write(s,0,s.length());\n    }\n    if (!(_roadNumber.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Road number:       \" + _roadNumber;\n      w.write(s,0,s.length());\n    }\n    if (!(_model.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Model:             \" + _model;\n      w.write(s,0,s.length());\n    }\n    if (!(_loco1DccAddress.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Lead Address:      \" + _loco1DccAddress + \"  \"+ _loco1Direction;\n      w.write(s,0,s.length());\n    }\n    if (!(_loco2DccAddress.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Rear Address:      \" + _loco2DccAddress + \"  \"+ _loco2Direction;\n      w.write(s,0,s.length());\n    }\n    if (!(_loco3DccAddress.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Mid1 Address:      \" + _loco3DccAddress + \"  \"+ _loco3Direction;\n      w.write(s,0,s.length());\n    }\n    if (!(_loco4DccAddress.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Mid2 Address:      \" + _loco4DccAddress + \"  \"+ _loco4Direction;\n      w.write(s,0,s.length());\n    }\n    if (!(_loco5DccAddress.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Mid3 Address:      \" + _loco5DccAddress + \"  \"+ _loco5Direction;\n      w.write(s,0,s.length());\n    }\n    if (!(_loco6DccAddress.equals(\"\"))) {\n      w.write(newLine,0,1);\n      s=\"   Mid4 Address:      \" + _loco6DccAddress + \"  \"+ _loco6Direction;\n      w.write(s,0,s.length());\n    }\n    if (!(_comment.equals(\"\"))) {\n      Vector<String> commentVector=wrapComment(_comment,textSpace);\n      int k=0;\n      w.write(newLine,0,1);\n      s=\"   Comment:           \" + commentVector.elementAt(k);\n      w.write(s,0,s.length());\n      k++;\n      while (k < commentVector.size()) {\n        String token=commentVector.elementAt(k);\n        if (!token.equals(\"\\n\")) {\n          s=indent + token;\n        }\n else {\n          s=token;\n        }\n        w.write(s,0,s.length());\n        k++;\n      }\n    }\n    w.write(newLine,0,1);\n  }\n catch (  IOException e) {\n    log.error(\"Error printing ConsistRosterEntry: \" + e);\n  }\n}"}
{"ids": "65571", "raw_code": "protected java.util.Date fromJulian(int julian){\n  YMD ymd=new YMD(julian);\n  GregorianCalendar cal=new GregorianCalendar(ymd.year,ymd.month - 1,ymd.day);\n  return cal.getTime();\n}"}
{"ids": "63242", "raw_code": "public synchronized boolean removeLast(K obj){\n  if (peekLast() != obj) {\n    return false;\n  }\n  array=Arrays.copyOf(array,array.length - 1);\n  return true;\n}"}
{"ids": "85096", "raw_code": "private boolean serializeCompactRDFStructProp(XMPNode node,int indent,boolean hasRDFResourceQual) throws XMPException, IOException {\n  boolean hasAttrFields=false;\n  boolean hasElemFields=false;\n  boolean emitEndTag=true;\n  for (Iterator ic=node.iterateChildren(); ic.hasNext(); ) {\n    XMPNode field=(XMPNode)ic.next();\n    if (canBeRDFAttrProp(field)) {\n      hasAttrFields=true;\n    }\n else {\n      hasElemFields=true;\n    }\n    if (hasAttrFields && hasElemFields) {\n      break;\n    }\n  }\n  if (hasRDFResourceQual && hasElemFields) {\n    throw new XMPException(\"Can't mix rdf:resource qualifier and element fields\",XMPError.BADRDF);\n  }\n  if (!node.hasChildren()) {\n    write(\" rdf:parseType=\\\"Resource\\\"/>\");\n    writeNewline();\n    emitEndTag=false;\n  }\n else   if (!hasElemFields) {\n    serializeCompactRDFAttrProps(node,indent + 1);\n    write(\"/>\");\n    writeNewline();\n    emitEndTag=false;\n  }\n else   if (!hasAttrFields) {\n    write(\" rdf:parseType=\\\"Resource\\\">\");\n    writeNewline();\n    serializeCompactRDFElementProps(node,indent + 1);\n  }\n else {\n    write('>');\n    writeNewline();\n    writeIndent(indent + 1);\n    write(RDF_STRUCT_START);\n    serializeCompactRDFAttrProps(node,indent + 2);\n    write(\">\");\n    writeNewline();\n    serializeCompactRDFElementProps(node,indent + 1);\n    writeIndent(indent + 1);\n    write(RDF_STRUCT_END);\n    writeNewline();\n  }\n  return emitEndTag;\n}"}
{"ids": "61893", "raw_code": "public default UtilityTable queryUtil(BNetwork network,String queryVar,Assignment evidence){\n  return queryUtil(new Query.UtilQuery(network,Arrays.asList(queryVar),evidence));\n}"}
{"ids": "43618", "raw_code": "public static float[] stringListToNumeric(List<String> scoreList) throws NumberFormatException {\n  float[] scores=new float[scoreList.size()];\n  int scoreId=0;\n  for (  String score : scoreList) {\n    float floatScore=(float)Double.parseDouble(score);\n    if (Float.isNaN(floatScore)) {\n      throw new NumberFormatException(\"Unparseable number: \" + score);\n    }\n    scores[scoreId++]=floatScore;\n  }\n  return scores;\n}"}
{"ids": "972", "raw_code": "@Override public void next(){\n  currentImage=Optional.of(addIndexAndGetImageByOffset(+1));\n  eventBus.post(new SourceHasPendingUpdateEvent(this));\n}"}
{"ids": "83220", "raw_code": "private List<Activity> findBestInsertion(List<Activity> partialRoute,boolean allowAsMajor){\n  int startIndex=1;\n  int endIndex=partialRoute.size() - 1;\n  if (allowAsMajor) {\n    startIndex=0;\n    endIndex=partialRoute.size();\n  }\n  List<Activity> newList=partialRoute;\n  double best=Double.POSITIVE_INFINITY;\n  List<Activity> bestList=null;\n  for (int i=startIndex; i <= endIndex; i++) {\n    List<Activity> tmpList=new ArrayList<>(newList);\n    Activity tmpActivity=getRelocationActivity();\n    tmpList.add(i,tmpActivity);\n    double tmp=evaluateList(tmpList);\n    if (tmp < best) {\n      if (i == 0) {\n        tmpActivity.setType(\"major\");\n        tmpActivity.setEndTime(Time.parseTime(\"08:00:00\"));\n      }\n else       if (i == partialRoute.size()) {\n        tmpActivity.setType(\"major\");\n      }\n else {\n        tmpActivity.setType(\"minor\");\n        tmpActivity.setMaximumDuration(Time.parseTime(\"00:20:00\"));\n      }\n      best=tmp;\n      bestList=tmpList;\n    }\n  }\n  return bestList;\n}"}
{"ids": "51547", "raw_code": "public void writeShort(int value) throws IOException {\n  checkWritePrimitiveTypes();\n  primitiveTypes.writeShort(value);\n}"}
{"ids": "61856", "raw_code": "private boolean isInitialized(){\n  return poolNames != null && !poolNames.isEmpty();\n}"}
{"ids": "35583", "raw_code": "private void registerExtraValidSubject(String subject){\n  extraValidSubjects.add(subject);\n  restoredStatements.addAll(unknownSubjects.removeAll(subject));\n}"}
{"ids": "3282", "raw_code": "public static String trimLine(String line){\n  int idx=line.indexOf(\"//\");\n  if (idx != -1) {\n    line=line.substring(0,idx);\n  }\n  return line.trim();\n}"}
{"ids": "29459", "raw_code": "public double distance2(double p1,double p2){\n  return (p1 - p2) * (p1 - p2);\n}"}
{"ids": "12029", "raw_code": "public Iterator<T> iterator(){\n  return orderList.iterator();\n}"}
{"ids": "21925", "raw_code": "private void verifyDomainsIsNotInUse(StringSet domains){\n  checkForActiveTenantsUsingDomains(domains);\n  checkForVdcRolesUsingDomains(domains);\n  checkForTenantRolesUsingDomains(domains);\n  checkForUserGroupsUsingDomains(domains);\n}"}
{"ids": "5441", "raw_code": "private Hashtable<IPoint,List<ICircle>> filter(Hashtable<IPoint,ICircle[]> circleIntersections){\n  Hashtable<IPoint,List<ICircle>> real=new Hashtable<IPoint,List<ICircle>>();\n  for (  IPoint pt : circleIntersections.keySet()) {\n    ICircle[] circs=circleIntersections.get(pt);\n    for (int i=0; i < circs.length - 1; i++) {\n      for (int j=i + 1; j < circs.length; j++) {\n        IPoint[] pts=intersects(circs[i],circs[j]);\n        if (pts != null) {\n          for (          IPoint p : pts) {\n            report(real,p,circs[i],circs[j]);\n          }\n        }\n      }\n    }\n  }\n  return real;\n}"}
{"ids": "83106", "raw_code": "public void initWithoutJUnitForFixture(Class fixture,Method method){\n  this.testClass=fixture;\n  this.testMethodName=method.getName();\n}"}
{"ids": "10519", "raw_code": "protected JavaType findSerializationType(Annotated a,boolean useStaticTyping,JavaType declaredType){\n  Class<?> serClass=_annotationIntrospector.findSerializationType(a);\n  if (serClass != null) {\n    Class<?> rawDeclared=declaredType.getRawClass();\n    if (serClass.isAssignableFrom(rawDeclared)) {\n      declaredType=declaredType.widenBy(serClass);\n    }\n else {\n      if (!rawDeclared.isAssignableFrom(serClass)) {\n        throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\" + a.getName() + \"': class \"+ serClass.getName()+ \" not a super-type of (declared) class \"+ rawDeclared.getName());\n      }\n      declaredType=_config.constructSpecializedType(declaredType,serClass);\n    }\n    useStaticTyping=true;\n  }\n  JavaType secondary=BeanSerializerFactory.modifySecondaryTypesByAnnotation(_config,a,declaredType);\n  if (secondary != declaredType) {\n    useStaticTyping=true;\n    declaredType=secondary;\n  }\n  if (!useStaticTyping) {\n    JsonSerialize.Typing typing=_annotationIntrospector.findSerializationTyping(a);\n    if (typing != null) {\n      useStaticTyping=(typing == JsonSerialize.Typing.STATIC);\n    }\n  }\n  return useStaticTyping ? declaredType : null;\n}"}
{"ids": "35025", "raw_code": "private static void convert(AScene scene,InputStream in,OutputStream out) throws IOException, DefException, ParseException {\n  IndexUnit iu=JavaParser.parse(in);\n  extractScene(iu,scene);\n  try (Writer w=new BufferedWriter(new OutputStreamWriter(out))){\n    IndexFileWriter.write(scene,w);\n  }\n }"}
{"ids": "12874", "raw_code": "public static void load(marytts.modules.synthesis.Voice maryVoice) throws NoSuchPropertyException {\n  if (mary2freettsVoices == null)   mary2freettsVoices=new HashMap<marytts.modules.synthesis.Voice,com.sun.speech.freetts.Voice>();\n  if (freetts2maryVoices == null)   freetts2maryVoices=new HashMap<com.sun.speech.freetts.Voice,marytts.modules.synthesis.Voice>();\n  if (mary2freettsVoices.containsKey(maryVoice))   return;\n  load(maryVoice,createFreeTTSVoice(maryVoice));\n}"}
{"ids": "38739", "raw_code": "public synchronized void addIncrementalClassifierListener(IncrementalClassifierListener cl){\n  m_incrementalClassifierListeners.add(cl);\n}"}
{"ids": "50472", "raw_code": "public float readR4() throws java.io.IOException {\n  return Float.intBitsToFloat((int)readDWORD());\n}"}
{"ids": "69401", "raw_code": "public static boolean filesExistOnDestButNotSrc(Configuration conf,Path src,Path dest,Optional<PathFilter> filter) throws IOException {\n  Set<FileStatus> srcFileStatuses=getFileStatusesRecursive(conf,src,filter);\n  Set<FileStatus> destFileStatuses=getFileStatusesRecursive(conf,dest,filter);\n  Map<String,Long> srcFileSizes=null;\n  Map<String,Long> destFileSizes=null;\n  try {\n    srcFileSizes=getRelPathToSizes(src,srcFileStatuses);\n    destFileSizes=getRelPathToSizes(dest,destFileStatuses);\n  }\n catch (  ArgumentException e) {\n    throw new IOException(\"Invalid file statuses!\",e);\n  }\n  for (  String file : destFileSizes.keySet()) {\n    if (!srcFileSizes.containsKey(file)) {\n      LOG.warn(String.format(\"%s exists on %s but not in %s\",file,dest,src));\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "59611", "raw_code": "protected void convertOrder(SqlSelect select,Blackboard bb,RelCollation collation,List<SqlNode> orderExprList,SqlNode offset,SqlNode fetch){\n  if (select.getOrderList() == null || select.getOrderList().getList().isEmpty()) {\n    assert collation.getFieldCollations().isEmpty();\n    if ((offset == null || ((SqlLiteral)offset).bigDecimalValue().equals(BigDecimal.ZERO)) && fetch == null) {\n      return;\n    }\n  }\n  bb.setRoot(LogicalSort.create(bb.root,collation,offset == null ? null : convertExpression(offset),fetch == null ? null : convertExpression(fetch)),false);\n  if (orderExprList.size() > 0 && !bb.top) {\n    final List<RexNode> exprs=new ArrayList<>();\n    final RelDataType rowType=bb.root.getRowType();\n    final int fieldCount=rowType.getFieldCount() - orderExprList.size();\n    for (int i=0; i < fieldCount; i++) {\n      exprs.add(rexBuilder.makeInputRef(bb.root,i));\n    }\n    bb.setRoot(LogicalProject.create(bb.root,exprs,rowType.getFieldNames().subList(0,fieldCount)),false);\n  }\n}"}
{"ids": "23395", "raw_code": "public void tickBlock(BlockPos pos){\n  List<BlockPos> validCoords=new ArrayList<>();\n  for (int xOffset=-TICK_RANGE; xOffset <= TICK_RANGE; xOffset++) {\n    for (int zOffset=-TICK_RANGE; zOffset <= TICK_RANGE; zOffset++) {\n      if (xOffset == 0 && zOffset == 0)       continue;\n      if (isValidSwapPosition(pos.add(xOffset,0,zOffset)))       validCoords.add(pos.add(xOffset,0,zOffset));\n    }\n  }\n  if (!validCoords.isEmpty() && !world.isRemote) {\n    BlockPos toSwap=validCoords.get(rand.nextInt(validCoords.size()));\n    world.setBlockState(toSwap,stateToSet,1 | 2);\n  }\n}"}
{"ids": "46406", "raw_code": "private void configureMessageLabel(JLabel label){\n  Color color=(Color)DefaultLookup.get(optionPane,this,\"OptionPane.messageForeground\");\n  if (color != null) {\n    label.setForeground(color);\n  }\n  Font messageFont=(Font)DefaultLookup.get(optionPane,this,\"OptionPane.messageFont\");\n  if (messageFont != null) {\n    label.setFont(messageFont);\n  }\n}"}
{"ids": "56608", "raw_code": "default Filterable<T> removeAll(final Stream<? extends T> stream){\n  final Set<T> set=stream.collect(Collectors.toSet());\n  return filterNot(null);\n}"}
{"ids": "2012", "raw_code": "private static MeteringRectangle[] regionsForNormalizedCoord(float nx,float ny,float fraction,final Rect cropRegion,int sensorOrientation){\n  int minCropEdge=Math.min(cropRegion.width(),cropRegion.height());\n  int halfSideLength=(int)(0.5f * fraction * minCropEdge);\n  PointF nsc=CameraUtil.normalizedSensorCoordsForNormalizedDisplayCoords(nx,ny,sensorOrientation);\n  int xCenterSensor=(int)(cropRegion.left + nsc.x * cropRegion.width());\n  int yCenterSensor=(int)(cropRegion.top + nsc.y * cropRegion.height());\n  Rect meteringRegion=new Rect(xCenterSensor - halfSideLength,yCenterSensor - halfSideLength,xCenterSensor + halfSideLength,yCenterSensor + halfSideLength);\n  meteringRegion.left=CameraUtil.clamp(meteringRegion.left,cropRegion.left,cropRegion.right);\n  meteringRegion.top=CameraUtil.clamp(meteringRegion.top,cropRegion.top,cropRegion.bottom);\n  meteringRegion.right=CameraUtil.clamp(meteringRegion.right,cropRegion.left,cropRegion.right);\n  meteringRegion.bottom=CameraUtil.clamp(meteringRegion.bottom,cropRegion.top,cropRegion.bottom);\n  return new MeteringRectangle[]{new MeteringRectangle(meteringRegion,CAMERA2_REGION_WEIGHT)};\n}"}
{"ids": "84813", "raw_code": "public Vector(double comp[]) throws NegativeArraySizeException {\n  int n=comp.length;\n  if (n <= 0)   throw new NegativeArraySizeException(\"Vector components cannot be empty\");\n  components=new double[n];\n  System.arraycopy(comp,0,components,0,n);\n}"}
{"ids": "69754", "raw_code": "public long lonToPixel(double lon){\n  return (long)((lon + 180) / 360 * Math.pow(2,zoom) * 256);\n}"}
{"ids": "27000", "raw_code": "public static boolean worldFileValuesAppearGeographic(AVList values){\n  double xLocation;\n  double yLocation;\n  double xPixelSize;\n  double yPixelSize;\n  Object o=values.getValue(WORLD_FILE_X_LOCATION);\n  if (o != null && o instanceof Double)   xLocation=(Double)o;\n else   return false;\n  o=values.getValue(WORLD_FILE_Y_LOCATION);\n  if (o != null && o instanceof Double)   yLocation=(Double)o;\n else   return false;\n  o=values.getValue(WORLD_FILE_X_PIXEL_SIZE);\n  if (o != null && o instanceof Double)   xPixelSize=(Double)o;\n else   return false;\n  o=values.getValue(WORLD_FILE_Y_PIXEL_SIZE);\n  if (o != null && o instanceof Double)   yPixelSize=(Double)o;\n else   return false;\n  return (Angle.isValidLongitude(xPixelSize) && Angle.isValidLatitude(yPixelSize) && Angle.isValidLongitude(xLocation)&& Angle.isValidLatitude(yLocation));\n}"}
{"ids": "14857", "raw_code": "public void remove(SessionID sessionID){\n  remoteSessionSet.remove(sessionID);\n}"}
{"ids": "27361", "raw_code": "public Iterator<AbstractPage> childIterator(final boolean dirtyNodesOnly){\n  if (dirtyNodesOnly) {\n    return new DirtyChildIterator(this);\n  }\n else {\n    return new ChildIterator();\n  }\n}"}
{"ids": "78836", "raw_code": "public HMACT64(byte[] key){\n  super(\"HMACT64\");\n  int length=Math.min(key.length,BLOCK_LENGTH);\n  for (int i=0; i < length; i++) {\n    ipad[i]=(byte)(key[i] ^ IPAD);\n    opad[i]=(byte)(key[i] ^ OPAD);\n  }\n  for (int i=length; i < BLOCK_LENGTH; i++) {\n    ipad[i]=IPAD;\n    opad[i]=OPAD;\n  }\n  try {\n    md5=MessageDigest.getInstance(\"MD5\");\n  }\n catch (  Exception ex) {\n    throw new IllegalStateException(ex.getMessage());\n  }\n  engineReset();\n}"}
{"ids": "3495", "raw_code": "public boolean startsWith(String string){\n  if (string == null)   return false;\n  int strlen=string.length();\n  if (_length < strlen)   return false;\n  char[] buffer=_buffer;\n  int offset=_offset;\n  while (--strlen >= 0) {\n    if (buffer[offset + strlen] != string.charAt(strlen))     return false;\n  }\n  return true;\n}"}
{"ids": "33741", "raw_code": "private void writeRawBytesInternal(final ByteBuffer value) throws IOException {\n  int length=value.remaining();\n  if (limit - position >= length) {\n    value.get(buffer,position,length);\n    position+=length;\n    totalBytesWritten+=length;\n  }\n else {\n    final int bytesWritten=limit - position;\n    value.get(buffer,position,bytesWritten);\n    length-=bytesWritten;\n    position=limit;\n    totalBytesWritten+=bytesWritten;\n    refreshBuffer();\n    while (length > limit) {\n      value.get(buffer,0,limit);\n      output.write(buffer,0,limit);\n      length-=limit;\n      totalBytesWritten+=limit;\n    }\n    value.get(buffer,0,length);\n    position=length;\n    totalBytesWritten+=length;\n  }\n}"}
{"ids": "14347", "raw_code": "private void processLDIF(Connection conn,String path) throws UpgradeException {\n  ChangeRecordReader reader=null;\n  try {\n    if (DEBUG.messageEnabled()) {\n      DEBUG.message(\"Processing LDIF file under \" + path);\n    }\n    Map<String,String> tags=new HashMap<String,String>(2);\n    tags.put(\"@SM_CONFIG_ROOT_SUFFIX@\",baseDN);\n    tags.put(\"@DB_NAME@\",\"userRoot\");\n    String content=AMSetupServlet.readFile(path);\n    String tagSwapped=StringUtils.tagSwap(content,tags);\n    reader=new LDIFChangeRecordReader(new ByteArrayInputStream(tagSwapped.getBytes(Charset.forName(\"UTF-8\"))));\n    ChangeRecordWriter writer=new ConnectionChangeRecordWriter(conn);\n    while (reader.hasNext()) {\n      writer.writeChangeRecord(reader.readChangeRecord());\n    }\n  }\n catch (  IOException ioe) {\n    DEBUG.error(\"An error occurred while processing \" + path,ioe);\n    throw new UpgradeException(ioe);\n  }\n finally {\n    IOUtils.closeIfNotNull(reader);\n  }\n}"}
{"ids": "19678", "raw_code": "private void printProgress(long row,long rowFrom,long rowTill){\n  long rowsProcessed=row + chunkSize - rowFrom;\n  if (rowsProcessed > (rowTill - rowFrom))   rowsProcessed=(rowTill - rowFrom);\n  print(String.format(\"%d%%\",(int)(((double)(rowsProcessed) / (double)(rowTill - rowFrom)) * 100.0f)));\n}"}
{"ids": "24071", "raw_code": "void postRemoteReleaseLock(Object objectName) throws InterruptedException {\n  if (!acquireDestroyReadLock(0)) {\n    return;\n  }\n  try {\n    checkDestroyed();\n    drainPermittedRequests();\n    grantLock(objectName);\n  }\n catch (  LockServiceDestroyedException e) {\n  }\ncatch (  LockGrantorDestroyedException e) {\n  }\n finally {\n    releaseDestroyReadLock();\n  }\n}"}
{"ids": "54695", "raw_code": "public final ArrayList<PositionRecord> loadPositions(final int session,final Double minLat,final Double maxLat,final Double minLon,final Double maxLon){\n  final ArrayList<PositionRecord> positions=new ArrayList<>();\n  String selection=Schema.COL_SESSION_ID + \" = ?\";\n  Cursor cursor=null;\n  List<String> selectionArgs=null;\n  if (minLat != null & maxLat != null && minLon != null && maxLon != null) {\n    selectionArgs=new ArrayList<>();\n    selectionArgs.add(String.valueOf(session));\n    selectionArgs.add(String.valueOf(minLat));\n    selectionArgs.add(String.valueOf(maxLat));\n    selectionArgs.add(String.valueOf(minLon));\n    selectionArgs.add(String.valueOf(maxLon));\n    selection+=\"AND (\" + Schema.COL_LATITUDE + \" > ? AND \"+ Schema.COL_LATITUDE+ \" < ?) AND (\"+ Schema.COL_LONGITUDE+ \" > ? AND \"+ Schema.COL_LONGITUDE+ \" < ?)\";\n    cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,selection,selectionArgs.toArray(new String[0]),Schema.COL_TIMESTAMP);\n  }\n else {\n    Log.v(TAG,\"No boundaries provided, loading all positions\");\n    cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,null,null,Schema.COL_TIMESTAMP);\n  }\n  while (cursor.moveToNext()) {\n    positions.add(positionFromCursor(cursor));\n  }\n  cursor.close();\n  return positions;\n}"}
{"ids": "82016", "raw_code": "public static CheckBox createToggle(String text,Image icon){\n  CheckBox cb=new CheckBox(text,icon);\n  cb.setToggle(true);\n  return cb;\n}"}
{"ids": "35174", "raw_code": "public long addCompletedBatch(RequestBatch requestBatch){\n  long completedBatchId=insertBatchAsCompleted(requestBatch);\n  for (  Request request : requestBatch.getRequests()) {\n    request.setBatchId(completedBatchId);\n    File file=new File(request.getDestinationPath());\n    long length=file.exists() ? file.length() : 0;\n    insertRequestAsCompletedDownload(request.getDestinationPath(),length,request);\n  }\n  return completedBatchId;\n}"}
{"ids": "2492", "raw_code": "public static File createMinimalSplit(String inputFolder,int numFolds,int numAvailableJCas,boolean isSequence) throws Exception {\n  File outputFolder=new File(inputFolder,\"output\");\n  int splitNum=(int)Math.ceil(numFolds / (double)numAvailableJCas);\n  CollectionReaderDescription createReader=CollectionReaderFactory.createReaderDescription(BinaryCasReader.class,BinaryCasReader.PARAM_SOURCE_LOCATION,inputFolder,BinaryCasReader.PARAM_PATTERNS,\"*.bin\");\n  AnalysisEngineDescription multiplier=AnalysisEngineFactory.createEngineDescription(FoldClassificationUnitCasMultiplier.class,FoldClassificationUnitCasMultiplier.PARAM_REQUESTED_SPLITS,splitNum,FoldClassificationUnitCasMultiplier.PARAM_USE_SEQUENCES,isSequence);\n  AnalysisEngineDescription xmiWriter=AnalysisEngineFactory.createEngineDescription(BinaryCasWriter.class,BinaryCasWriter.PARAM_TARGET_LOCATION,outputFolder.getAbsolutePath(),BinaryCasWriter.PARAM_FORMAT,\"6+\");\n  AnalysisEngineDescription both=AnalysisEngineFactory.createEngineDescription(multiplier,xmiWriter);\n  SimplePipeline.runPipeline(createReader,both);\n  isNumberOfCasCreatedLargerEqualNumFolds(outputFolder,numFolds);\n  return outputFolder;\n}"}
{"ids": "13978", "raw_code": "public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias) throws XMLSignatureException {\n  return signXML(doc,certAlias,null);\n}"}
{"ids": "70277", "raw_code": "FiringPlan guessBestFiringPlanUnderHeat(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,int maxHeat,IGame game){\n  if (maxHeat < 0) {\n    maxHeat=0;\n  }\n  FiringPlan alphaStrike=guessFullFiringPlan(shooter,shooterState,target,targetState,game);\n  if (alphaStrike.getHeat() <= maxHeat && !(shooter instanceof Infantry) && !(shooter instanceof BattleArmor)) {\n    return alphaStrike;\n  }\n  FiringPlan heatPlans[]=calcFiringPlansUnderHeat(shooter,alphaStrike);\n  Arrays.sort(heatPlans);\n  if (heatPlans.length > 0) {\n    return heatPlans[0];\n  }\n else {\n    return new FiringPlan(target);\n  }\n}"}
{"ids": "21894", "raw_code": "public static VolumeGroupRestRep map(VolumeGroup from){\n  if (from == null) {\n    return null;\n  }\n  VolumeGroupRestRep rep=new VolumeGroupRestRep();\n  mapDataObjectFields(from,rep);\n  rep.setDescription(from.getDescription());\n  rep.setRoles(from.getRoles());\n  rep.setParent(toRelatedResource(ResourceTypeEnum.VOLUME_GROUP,from.getParent()));\n  rep.setMigrationGroupBy(from.getMigrationGroupBy());\n  rep.setMigrationType(from.getMigrationType());\n  return rep;\n}"}
{"ids": "38480", "raw_code": "public void addActionListener(ActionListener newListener){\n  m_listeners.add(newListener);\n}"}
{"ids": "9290", "raw_code": "@Deprecated public ShapelessRecipe addIngredient(int count,Material ingredient,int rawdata){\n  Validate.isTrue(ingredients.size() + count <= 9,\"Shapeless recipes cannot have more than 9 ingredients\");\n  if (rawdata == -1) {\n    rawdata=Short.MAX_VALUE;\n  }\n  while (count-- > 0) {\n    ingredients.add(new ItemStack(ingredient,1,(short)rawdata));\n  }\n  return this;\n}"}
{"ids": "75560", "raw_code": "public String order(){\n  return mOrderBy.length() > 0 ? mOrderBy.toString() : null;\n}"}
{"ids": "67718", "raw_code": "public static byte[] encodingToBytes(final String str,final String encoding){\n  if (str == null) {\n    return null;\n  }\n  try {\n    return str.getBytes(encoding);\n  }\n catch (  final UnsupportedEncodingException e) {\n    throw new Error(encoding + \" not supported! Original exception: \" + e);\n  }\n}"}
{"ids": "25204", "raw_code": "public void before() throws Throwable {\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    ProcessBuilder processBuilder=new ProcessBuilder();\n    processBuilder.command(\"logcat\",\"-c\");\n    processBuilder.redirectErrorStream();\n    Process process=processBuilder.start();\n    process.waitFor();\n    if (process.exitValue() != 0) {\n      Log.e(LOG_TAG,\"Error while clearing logcat, exitValue=\" + process.exitValue());\n    }\n  }\n}"}
{"ids": "29143", "raw_code": "public void addMeta(char meta,String replacement){\n  metaCharacterSet.set(meta);\n  replacementMap.put(new String(new char[]{meta}),replacement);\n}"}
{"ids": "82938", "raw_code": "public static List<History> findHistoryByJob(EntityManager em,JPAEntity job,BigInteger limit){\n  requireArgument(em != null,\"Entity manager cannot be null.\");\n  requireArgument(job != null,\"The job cannot be null.\");\n  TypedQuery<History> query=em.createNamedQuery(\"History.findByJob\",History.class);\n  if (limit != null) {\n    query.setMaxResults(limit.intValue());\n  }\n  try {\n    query.setParameter(\"entity\",job);\n    return query.getResultList();\n  }\n catch (  NoResultException ex) {\n    return new ArrayList<History>(0);\n  }\n}"}
{"ids": "36483", "raw_code": "private void drawOverflowIndicator(final Graphics g,int maxX){\n  int width=25;\n  int height=10;\n  int xOffset=10;\n  int stepSize=width / 5;\n  int dotSize=3;\n  int x=maxX - width - xOffset;\n  int y=button.getSize().height - height;\n  g.setColor(LIGHTER_GRAY);\n  g.fillRect(x,y,width,width);\n  g.setColor(Color.GRAY);\n  g.drawRoundRect(x,y,width,width,5,5);\n  g.setColor(Color.BLACK);\n  g.fillOval(x + stepSize,y + 4,dotSize,dotSize);\n  g.fillOval(x + stepSize * 2,y + 4,dotSize,dotSize);\n  g.fillOval(x + stepSize * 3,y + 4,dotSize,dotSize);\n  g.dispose();\n}"}
{"ids": "34256", "raw_code": "public static boolean isPEM(InputStream is){\n  try {\n    String startPEM=\"-----BEGIN\";\n    int headerLength=100;\n    byte[] preamble=new byte[headerLength];\n    if (is.read(preamble,0,headerLength) > 0) {\n      String startArray=new String(preamble);\n      return startArray.startsWith(startPEM);\n    }\n    return false;\n  }\n catch (  Exception e) {\n    throw new DSSException(\"Unable to read InputStream\");\n  }\n}"}
{"ids": "46756", "raw_code": "protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {\n  throw new UnsupportedOperationException();\n}"}
{"ids": "9287", "raw_code": "@Deprecated public JavaPluginLoader(Server instance){\n  Validate.notNull(instance,\"Server cannot be null\");\n  server=instance;\n}"}
{"ids": "49169", "raw_code": "public void addSeparator(){\n  if (log.isLoggable(PlatformLogger.Level.FINER)) {\n    log.finer(\"addSeparator is not implemented\");\n  }\n}"}
{"ids": "49023", "raw_code": "private static Class<?> loadClass(URL[] urls,String name) throws ClassNotFoundException {\n  ClassLoader parent=getRMIContextClassLoader();\n  if (loaderLog.isLoggable(Log.VERBOSE)) {\n    loaderLog.log(Log.VERBOSE,\"(thread context class loader: \" + parent + \")\");\n  }\n  SecurityManager sm=System.getSecurityManager();\n  if (sm == null) {\n    try {\n      Class<?> c=Class.forName(name,false,parent);\n      if (loaderLog.isLoggable(Log.VERBOSE)) {\n        loaderLog.log(Log.VERBOSE,\"class \\\"\" + name + \"\\\" found via \"+ \"thread context class loader \"+ \"(no security manager: codebase disabled), \"+ \"defined by \"+ c.getClassLoader());\n      }\n      return c;\n    }\n catch (    ClassNotFoundException e) {\n      if (loaderLog.isLoggable(Log.BRIEF)) {\n        loaderLog.log(Log.BRIEF,\"class \\\"\" + name + \"\\\" not found via \"+ \"thread context class loader \"+ \"(no security manager: codebase disabled)\",e);\n      }\n      throw new ClassNotFoundException(e.getMessage() + \" (no security manager: RMI class loader disabled)\",e.getException());\n    }\n  }\n  Loader loader=lookupLoader(urls,parent);\n  try {\n    if (loader != null) {\n      loader.checkPermissions();\n    }\n  }\n catch (  SecurityException e) {\n    try {\n      Class<?> c=loadClassForName(name,false,parent);\n      if (loaderLog.isLoggable(Log.VERBOSE)) {\n        loaderLog.log(Log.VERBOSE,\"class \\\"\" + name + \"\\\" found via \"+ \"thread context class loader \"+ \"(access to codebase denied), \"+ \"defined by \"+ c.getClassLoader());\n      }\n      return c;\n    }\n catch (    ClassNotFoundException unimportant) {\n      if (loaderLog.isLoggable(Log.BRIEF)) {\n        loaderLog.log(Log.BRIEF,\"class \\\"\" + name + \"\\\" not found via \"+ \"thread context class loader \"+ \"(access to codebase denied)\",e);\n      }\n      throw new ClassNotFoundException(\"access to class loader denied\",e);\n    }\n  }\n  try {\n    Class<?> c=loadClassForName(name,false,loader);\n    if (loaderLog.isLoggable(Log.VERBOSE)) {\n      loaderLog.log(Log.VERBOSE,\"class \\\"\" + name + \"\\\" \"+ \"found via codebase, \"+ \"defined by \"+ c.getClassLoader());\n    }\n    return c;\n  }\n catch (  ClassNotFoundException e) {\n    if (loaderLog.isLoggable(Log.BRIEF)) {\n      loaderLog.log(Log.BRIEF,\"class \\\"\" + name + \"\\\" not found via codebase\",e);\n    }\n    throw e;\n  }\n}"}
{"ids": "36842", "raw_code": "public static final List<INaviRawModule> loadRawModules(final AbstractSQLProvider provider) throws CouldntLoadDataException {\n  Preconditions.checkNotNull(provider,\"IE00416: Provider argument can not be null\");\n  final CConnection connection=provider.getConnection();\n  final List<INaviRawModule> modules=new ArrayList<INaviRawModule>();\n  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.RAW_MODULES_TABLE)) {\n    return modules;\n  }\n  final String query=\"SELECT id, name FROM \" + CTableNames.RAW_MODULES_TABLE + \" ORDER BY id\";\n  try (ResultSet resultSet=connection.executeQuery(query,true)){\n    while (resultSet.next()) {\n      final int rawModuleId=resultSet.getInt(\"id\");\n      final String name=PostgreSQLHelpers.readString(resultSet,\"name\");\n      final boolean isComplete=PostgreSQLDatabaseFunctions.checkRawModulesTables(provider.getConnection(),PostgreSQLHelpers.getDatabaseName(provider.getConnection()),rawModuleId);\n      final int functionCount=isComplete ? PostgreSQLDatabaseFunctions.getRawModuleFunctionCount(connection,rawModuleId) : 0;\n      final CRawModule module=new CRawModule(rawModuleId,name,functionCount,isComplete,provider);\n      modules.add(module);\n    }\n  }\n catch (  final SQLException e) {\n    throw new CouldntLoadDataException(e);\n  }\n  return modules;\n}"}
{"ids": "46078", "raw_code": "void write(ImageOutputStream ios) throws IOException {\n  length=2 + data.length;\n  writeTag(ios);\n  ios.write(data);\n}"}
{"ids": "37303", "raw_code": "private static List<RegisterDescription> parseRegisterInformation(final Node node) throws MessageParserException {\n  final List<RegisterDescription> registers=new ArrayList<>();\n  final NodeList nodes=node.getChildNodes();\n  for (int i=0; i < nodes.getLength(); ++i) {\n    final Node child=nodes.item(i);\n    final String registerName=getAttribute(child,\"name\");\n    final String registerSize=getAttribute(child,\"size\");\n    final String registerEditable=getAttribute(child,\"editable\");\n    registers.add(new RegisterDescription(registerName,Integer.valueOf(registerSize),Boolean.valueOf(registerEditable)));\n  }\n  return registers;\n}"}
{"ids": "40249", "raw_code": "public NamedThreadFactory(String namePrefix){\n  this.namePrefix=Objects.requireNonNull(namePrefix);\n  group=getThreadGroup();\n  daemon=true;\n}"}
{"ids": "25698", "raw_code": "public int addColumn(Object newCol,int length) throws FitsException {\n  if (this.nFields > 0 && Array.getLength(newCol) != this.nRows) {\n    throw new FitsException(\"New column has different number of rows\");\n  }\n  if (this.nFields == 0) {\n    this.nRows=Array.getLength(newCol);\n  }\n  Object[] newData=new Object[this.nFields + 1];\n  int[] newOffsets=new int[this.nFields + 1];\n  int[] newLengths=new int[this.nFields + 1];\n  Class<?>[] newTypes=new Class[this.nFields + 1];\n  String[] newNulls=new String[this.nFields + 1];\n  System.arraycopy(this.data,0,newData,0,this.nFields);\n  System.arraycopy(this.offsets,0,newOffsets,0,this.nFields);\n  System.arraycopy(this.lengths,0,newLengths,0,this.nFields);\n  System.arraycopy(this.types,0,newTypes,0,this.nFields);\n  System.arraycopy(this.nulls,0,newNulls,0,this.nFields);\n  this.data=newData;\n  this.offsets=newOffsets;\n  this.lengths=newLengths;\n  this.types=newTypes;\n  this.nulls=newNulls;\n  newData[this.nFields]=newCol;\n  this.offsets[this.nFields]=this.rowLen + 1;\n  this.lengths[this.nFields]=length;\n  this.types[this.nFields]=ArrayFuncs.getBaseClass(newCol);\n  this.rowLen+=length + 1;\n  if (this.isNull != null) {\n    boolean[] newIsNull=new boolean[this.nRows * (this.nFields + 1)];\n    int add=0;\n    for (int i=0; i < this.isNull.length; i+=1) {\n      if (i % this.nFields == 0) {\n        add+=1;\n      }\n      if (this.isNull[i]) {\n        newIsNull[i + add]=true;\n      }\n    }\n    this.isNull=newIsNull;\n  }\n  this.nFields+=1;\n  this.buffer=null;\n  return this.nFields;\n}"}
{"ids": "87014", "raw_code": "public void addTransaction(SIPServerTransaction serverTransaction) throws IOException {\n  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug(\"added transaction \" + serverTransaction);\n  serverTransaction.map();\n  addTransactionHash(serverTransaction);\n}"}
{"ids": "21245", "raw_code": "private void delayRetry(int multiplier){\n  debug(\"Sleeping before next retry...\");\n  try {\n    Thread.sleep(1000 * multiplier);\n  }\n catch (  InterruptedException e) {\n    warn(e,\"Thread sleeping failed.\\nContinuing with the next retry.\");\n  }\n}"}
{"ids": "34476", "raw_code": "public void reset(){\n  if (mDownloadBandwidth != null) {\n    mDownloadBandwidth.reset();\n  }\n  mCurrentBandwidthConnectionQuality.set(ConnectionQuality.UNKNOWN);\n}"}
{"ids": "15799", "raw_code": "private DiffPart decodeFullRevision(final int blockSize_L) throws UnsupportedEncodingException, DecodingException {\n  if (blockSize_L < 1) {\n    throw new DecodingException(\"Invalid value for blockSize_L: \" + blockSize_L);\n  }\n  int l=r.read(blockSize_L);\n  ByteArrayOutputStream output=new ByteArrayOutputStream();\n  for (int i=0; i < l; i++) {\n    output.write(r.readByte());\n  }\n  DiffPart part=new DiffPart(DiffAction.FULL_REVISION_UNCOMPRESSED);\n  part.setText(output.toString(WIKIPEDIA_ENCODING));\n  return part;\n}"}
{"ids": "1218", "raw_code": "private synchronized static void removeChildCharacterData(Node node,boolean deep){\n  NodeList list=node.getChildNodes();\n  for (int i=list.getLength(); i >= 0; i--) {\n    Node n=list.item(i);\n    if (n == null)     continue;\n    if (n instanceof CharacterData)     node.removeChild(XMLCaster.toRawNode(n));\n else     if (deep)     removeChildCharacterData(n,deep);\n  }\n}"}
{"ids": "43612", "raw_code": "private void loadCorpus(String source,String target,String align) throws IOException {\n  logger.info(\"Counting the number of corpus positions\");\n  TimeKeeper timer=TimingUtils.start();\n  int numSourcePositions=0;\n  int numTargetPositions=0;\n  numSentences=0;\n  ParallelCorpus corpus=new ParallelCorpus(1);\n  try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){\n    LineNumberReader eReader=IOTools.getReaderFromFile(target);\n    LineNumberReader aReader=IOTools.getReaderFromFile(align);\n    for (String fLine; (fLine=fReader.readLine()) != null; ) {\n      String eLine=eReader.readLine();\n      String aLine=aReader.readLine();\n      AlignedSentence example=corpus.getSentence(fLine,eLine,aLine);\n      if (example != null) {\n        numSourcePositions+=example.sourceLength();\n        numTargetPositions+=example.targetLength();\n        ++numSentences;\n      }\n    }\n  }\n   final int initialVocabularySize=corpus.getVocabulary().size();\n  timer.mark(\"Counting corpus positions\");\n  logger.info(\"Source positions: {}  Target positions: {}  Sentences: {}\",numSourcePositions,numTargetPositions,numSentences);\n  final int srcLength=numSourcePositions + numSentences;\n  if (srcLength < 0)   throw new RuntimeException(\"Maximum source bitext size exceeded\");\n  srcBitext=new int[srcLength];\n  f2e=new int[srcLength];\n  final int tgtLength=numTargetPositions + numSentences;\n  if (tgtLength < 0)   throw new RuntimeException(\"Maximum target bitext size exceeded\");\n  tgtBitext=new int[tgtLength];\n  e2f=new int[tgtLength];\n  try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){\n    LineNumberReader eReader=IOTools.getReaderFromFile(target);\n    LineNumberReader aReader=IOTools.getReaderFromFile(align);\n    int srcOffset=0;\n    int tgtOffset=0;\n    for (String fLine; (fLine=fReader.readLine()) != null; ) {\n      String eLine=eReader.readLine();\n      String aLine=aReader.readLine();\n      AlignedSentence sentence=corpus.getSentence(fLine,eLine,aLine);\n      if (sentence == null) {\n        logger.info(\"Discarding parallel example {}\",fReader.getLineNumber());\n      }\n else {\n        System.arraycopy(sentence.source,0,srcBitext,srcOffset,sentence.sourceLength());\n        System.arraycopy(sentence.f2e,0,f2e,srcOffset,sentence.f2e.length);\n        System.arraycopy(sentence.target,0,tgtBitext,tgtOffset,sentence.targetLength());\n        System.arraycopy(sentence.e2f,0,e2f,tgtOffset,sentence.e2f.length);\n        srcOffset+=sentence.sourceLength();\n        tgtOffset+=sentence.targetLength();\n        srcBitext[srcOffset]=toSentenceOffset(tgtOffset);\n        tgtBitext[tgtOffset]=toSentenceOffset(srcOffset);\n        ++srcOffset;\n        ++tgtOffset;\n      }\n    }\n  }\n   this.vocabulary=corpus.getVocabulary();\n  assert initialVocabularySize == vocabulary.size();\n  timer.mark(\"Loading corpus\");\n  logger.info(\"Done loading corpus: {}\",timer);\n}"}
{"ids": "81103", "raw_code": "public static float mixFriction(float friction1,float friction2){\n  return MathUtils.sqrt(friction1 * friction2);\n}"}
{"ids": "35605", "raw_code": "public String serialize(Object obj,String contentType) throws ApiException {\n  if (contentType.startsWith(\"application/json\")) {\n    return json.serialize(obj);\n  }\n else {\n    throw new ApiException(400,\"can not serialize object into Content-Type: \" + contentType);\n  }\n}"}
{"ids": "21903", "raw_code": "private boolean isNativeVolumeExpansionSupported(Volume vplexVolume,Long newSize){\n  boolean useNativeVolumeExpansion=true;\n  StringSet assocVolumeIds=vplexVolume.getAssociatedVolumes();\n  if (null == assocVolumeIds) {\n    s_logger.warn(\"VPLEX volume {} has no backend volumes. It was probably ingested 'Virtual Volume Only'.\",vplexVolume.forDisplay());\n    useNativeVolumeExpansion=false;\n  }\n else {\n    for (    String assocVolumeId : assocVolumeIds) {\n      Volume assocVolume=_permissionsHelper.getObjectById(URI.create(assocVolumeId),Volume.class);\n      try {\n        super.verifyVolumeExpansionRequest(assocVolume,newSize);\n      }\n catch (      Exception e) {\n        useNativeVolumeExpansion=false;\n        break;\n      }\n    }\n  }\n  return useNativeVolumeExpansion;\n}"}
{"ids": "74194", "raw_code": "public void updateGUI(RosterEntry r){\n  roadName.setText(r.getRoadName());\n  roadNumber.setText(r.getRoadNumber());\n  mfg.setText(r.getMfg());\n  owner.setText(r.getOwner());\n  model.setText(r.getModel());\n  comment.setText(r.getComment());\n  decoderModel.setText(r.getDecoderModel());\n  decoderFamily.setText(r.getDecoderFamily());\n  decoderComment.setText(r.getDecoderComment());\n  dateUpdated.setText(r.getDateUpdated());\n  maxSpeedSpinner.setValue(Integer.valueOf(r.getMaxSpeedPCT()));\n}"}
{"ids": "4309", "raw_code": "public static Double oizp(Number value){\n  if (value == null) {\n    return null;\n  }\n  return (value.doubleValue() >= 0d) ? 1d : 0d;\n}"}
{"ids": "44199", "raw_code": "public TerminalSize with(TerminalSize size){\n  if (equals(size)) {\n    return this;\n  }\n  return size;\n}"}
{"ids": "68156", "raw_code": "private boolean isGzipAllowed(final HttpServletRequest request){\n  return !DispatcherStreamLocator.isIncludedRequest(request) && WroUtil.isGzipSupported(request);\n}"}
{"ids": "64959", "raw_code": "public ReplayProcessor(int bufferSize,boolean unbounded){\n  if (unbounded) {\n    this.buffer=new UnboundedBuffer<>(bufferSize);\n  }\n else {\n    this.buffer=new BoundedBuffer<>(bufferSize);\n  }\n  SUBSCRIBERS.lazySet(this,EMPTY);\n}"}
{"ids": "62794", "raw_code": "protected void onShowConversations(@NonNull List<C> conversations){\n  if (DEBUG) {\n    Log.d(TAG,\"Showing \" + conversations.size() + \" conversations\");\n  }\n  mView.showConversations(new ArrayList<>(conversations));\n}"}
{"ids": "86653", "raw_code": "public void enqueueJob(final Runnable job){\nsynchronized (mSleepSync) {\n    if (hasJob()) {\n      throw new IllegalStateException(\"Job already enqueued\");\n    }\n    setJob(job);\n    mSleepSync.notifyAll();\n  }\n}"}
{"ids": "23240", "raw_code": "public void updateNonceParameters(){\n  if (mNextNonce.equals(mNonce)) {\n    mCnonceCounter++;\n  }\n else {\n    mCnonceCounter=1;\n    mNonce=mNextNonce;\n  }\n}"}
{"ids": "21520", "raw_code": "private void matchVPools(URI rpSystemId){\n  List<URI> storagePoolIds=ConnectivityUtil.getRPSystemStoragePools(_dbClient,rpSystemId);\n  StringBuffer errorMessage=new StringBuffer();\n  if (storagePoolIds != null && !storagePoolIds.isEmpty()) {\n    List<StoragePool> storagePools=_dbClient.queryObject(StoragePool.class,storagePoolIds);\n    ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(storagePools,_dbClient,_coordinator,errorMessage);\n  }\n}"}
{"ids": "80547", "raw_code": "public static BigDecimal calculateFee(Player player,int price){\n  BigDecimal fee=BigDecimal.valueOf(price);\n  fee=fee.multiply(BigDecimal.valueOf(TRADING_FEE_PERCENTAGE));\n  if (player.isBadBoy()) {\n    fee=fee.multiply(BigDecimal.valueOf(1 + TRADING_FEE_PLAYER_KILLER_PENALTY));\n  }\n  BigDecimal feeBonus=BigDecimal.ONE;\n  feeBonus=BigDecimal.valueOf(Math.exp(-player.getTradescore() / FEE_BONUS_CONSTANT));\n  fee=fee.multiply(feeBonus);\n  return fee.max(BigDecimal.ONE);\n}"}
{"ids": "45206", "raw_code": "private void addSearchHistory(){\n  addSearchHistory(tfSearchEditor.getText());\n}"}
{"ids": "54793", "raw_code": "ArrayList<SourceFile> trimFileList(ArrayList<SourceFile> files){\n  HashMap<String,String> names=new HashMap<String,String>();\n  ArrayList<SourceFile> list=new ArrayList<SourceFile>();\n  int size=files.size();\n  for (int i=0; i < size; i++) {\n    boolean addIt=false;\n    SourceFile fi=files.get(i);\n    String fName=fi.getRawName();\n    if (m_swfFilter == null) {\n      if (names.get(fName) == null)       addIt=true;\n    }\n else {\n      addIt=m_swfFilter.containsSource(fi);\n    }\n    if (addIt) {\n      names.put(fName,fName);\n      list.add(fi);\n    }\n  }\n  return list;\n}"}
{"ids": "79496", "raw_code": "public EntityQuery orderBy(String... fields){\n  this.orderBy=Arrays.asList(fields);\n  return this;\n}"}
{"ids": "26130", "raw_code": "public StemmedString(String orig,String stemmed){\n  strOrig=orig;\n  strStemmed=stemmed;\n}"}
{"ids": "21156", "raw_code": "public LogNetworkStreamMerger(LogRequest req,MediaType mediaType,LogSvcPropertiesLoader propertiesLoader){\n  logger.trace(\"In LogNetworkStreamMerger's constructor\");\n  this.request=req;\n  this.mediaType=mediaType;\n  this.propertiesLoader=propertiesLoader;\n  List<LogNetworkReader> readers=getLogNetworkStreams();\n  int size=readers.size();\n  logHeads=new LogMessage[size];\n  this.logStreamList=new LogNetworkReader[size];\n  int index=0;\n  for (  LogNetworkReader reader : readers) {\n    logStreamList[index]=reader;\n    logHeads[index]=null;\n    index++;\n  }\n}"}
{"ids": "49549", "raw_code": "public static String packCipherSuites(String[] ciphers){\n  String cipherSet=null;\n  if (ciphers != null) {\n    StringBuffer buf=new StringBuffer();\n    for (int i=0; i < ciphers.length; i++) {\n      buf.append(ciphers[i]);\n      if (i < ciphers.length - 1) {\n        buf.append(',');\n      }\n    }\n    cipherSet=buf.toString();\n  }\n  return cipherSet;\n}"}
{"ids": "55098", "raw_code": "private static boolean isAnArgument(final String arg){\n  return (arg.startsWith(\"-\") && (arg.length() > 1) && !Character.isDigit(arg.charAt(1)));\n}"}
{"ids": "1217", "raw_code": "private synchronized static void removeChildren(Node node,short type,boolean deep){\n  NodeList list=node.getChildNodes();\n  for (int i=list.getLength(); i >= 0; i--) {\n    Node n=list.item(i);\n    if (n == null)     continue;\n    if (n.getNodeType() == type || type == UNDEFINED_NODE)     node.removeChild(XMLCaster.toRawNode(n));\n else     if (deep)     removeChildren(n,type,deep);\n  }\n}"}
{"ids": "66590", "raw_code": "public boolean isValidSavepoint(Savepoint sp){\n  if (isSource())   return false;\n  boolean result=false;\n  if (sp != null)   result=true;\n  return result;\n}"}
{"ids": "54046", "raw_code": "public static void columnsFor(ResultSet resultSet,TableEditor editor) throws SQLException {\n  List<Column> columns=new ArrayList<>();\n  columnsFor(resultSet,null);\n  editor.setColumns(columns);\n}"}
{"ids": "31644", "raw_code": "private static void write(Collection<String> src,File out) throws IOException {\n  try (Writer writer=new BufferedWriter(new FileWriter(out))){\n    for (    String line : src)     writer.write(line + '\\n');\n  }\n }"}
{"ids": "44428", "raw_code": "private long resetUidValidity() throws IOException {\n  long timestamp=System.currentTimeMillis();\n  setUidValidity(timestamp);\n  return timestamp;\n}"}
{"ids": "55855", "raw_code": "public final ArrayList<Move> pseudoLegalMoves(Position pos){\n  ArrayList<Move> moveList=getMoveListObj();\n  final boolean wtm=pos.whiteMove;\n  for (int x=0; x < 8; x++) {\n    for (int y=0; y < 8; y++) {\n      int sq=Position.getSquare(x,y);\n      int p=pos.getPiece(sq);\n      if ((p == Piece.EMPTY) || (Piece.isWhite(p) != wtm)) {\n        continue;\n      }\n      if ((p == Piece.WROOK) || (p == Piece.BROOK) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) {\n        if (addDirection(moveList,pos,sq,7 - x,1))         return moveList;\n        if (addDirection(moveList,pos,sq,7 - y,8))         return moveList;\n        if (addDirection(moveList,pos,sq,x,-1))         return moveList;\n        if (addDirection(moveList,pos,sq,y,-8))         return moveList;\n      }\n      if ((p == Piece.WBISHOP) || (p == Piece.BBISHOP) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) {\n        if (addDirection(moveList,pos,sq,Math.min(7 - x,7 - y),9))         return moveList;\n        if (addDirection(moveList,pos,sq,Math.min(x,7 - y),7))         return moveList;\n        if (addDirection(moveList,pos,sq,Math.min(x,y),-9))         return moveList;\n        if (addDirection(moveList,pos,sq,Math.min(7 - x,y),-7))         return moveList;\n      }\n      if ((p == Piece.WKNIGHT) || (p == Piece.BKNIGHT)) {\n        if (x < 6 && y < 7 && addDirection(moveList,pos,sq,1,10))         return moveList;\n        if (x < 7 && y < 6 && addDirection(moveList,pos,sq,1,17))         return moveList;\n        if (x > 0 && y < 6 && addDirection(moveList,pos,sq,1,15))         return moveList;\n        if (x > 1 && y < 7 && addDirection(moveList,pos,sq,1,6))         return moveList;\n        if (x > 1 && y > 0 && addDirection(moveList,pos,sq,1,-10))         return moveList;\n        if (x > 0 && y > 1 && addDirection(moveList,pos,sq,1,-17))         return moveList;\n        if (x < 7 && y > 1 && addDirection(moveList,pos,sq,1,-15))         return moveList;\n        if (x < 6 && y > 0 && addDirection(moveList,pos,sq,1,-6))         return moveList;\n      }\n      if ((p == Piece.WKING) || (p == Piece.BKING)) {\n        if (x < 7 && addDirection(moveList,pos,sq,1,1))         return moveList;\n        if (x < 7 && y < 7 && addDirection(moveList,pos,sq,1,9))         return moveList;\n        if (y < 7 && addDirection(moveList,pos,sq,1,8))         return moveList;\n        if (x > 0 && y < 7 && addDirection(moveList,pos,sq,1,7))         return moveList;\n        if (x > 0 && addDirection(moveList,pos,sq,1,-1))         return moveList;\n        if (x > 0 && y > 0 && addDirection(moveList,pos,sq,1,-9))         return moveList;\n        if (y > 0 && addDirection(moveList,pos,sq,1,-8))         return moveList;\n        if (x < 7 && y > 0 && addDirection(moveList,pos,sq,1,-7))         return moveList;\n        int k0=wtm ? Position.getSquare(4,0) : Position.getSquare(4,7);\n        if (Position.getSquare(x,y) == k0) {\n          int aCastle=wtm ? Position.A1_CASTLE : Position.A8_CASTLE;\n          int hCastle=wtm ? Position.H1_CASTLE : Position.H8_CASTLE;\n          int rook=wtm ? Piece.WROOK : Piece.BROOK;\n          if (((pos.getCastleMask() & (1 << hCastle)) != 0) && (pos.getPiece(k0 + 1) == Piece.EMPTY) && (pos.getPiece(k0 + 2) == Piece.EMPTY)&& (pos.getPiece(k0 + 3) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) {\n            moveList.add(getMoveObj(k0,k0 + 2,Piece.EMPTY));\n          }\n          if (((pos.getCastleMask() & (1 << aCastle)) != 0) && (pos.getPiece(k0 - 1) == Piece.EMPTY) && (pos.getPiece(k0 - 2) == Piece.EMPTY)&& (pos.getPiece(k0 - 3) == Piece.EMPTY)&& (pos.getPiece(k0 - 4) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) {\n            moveList.add(getMoveObj(k0,k0 - 2,Piece.EMPTY));\n          }\n        }\n      }\n      if ((p == Piece.WPAWN) || (p == Piece.BPAWN)) {\n        int yDir=wtm ? 8 : -8;\n        if (pos.getPiece(sq + yDir) == Piece.EMPTY) {\n          addPawnMoves(moveList,sq,sq + yDir);\n          if ((y == (wtm ? 1 : 6)) && (pos.getPiece(sq + 2 * yDir) == Piece.EMPTY)) {\n            addPawnMoves(moveList,sq,sq + yDir * 2);\n          }\n        }\n        if (x > 0) {\n          int toSq=sq + yDir - 1;\n          int cap=pos.getPiece(toSq);\n          if (cap != Piece.EMPTY) {\n            if (Piece.isWhite(cap) != wtm) {\n              if (cap == (wtm ? Piece.BKING : Piece.WKING)) {\n                returnMoveList(moveList);\n                moveList=getMoveListObj();\n                moveList.add(getMoveObj(sq,toSq,Piece.EMPTY));\n                return moveList;\n              }\n else {\n                addPawnMoves(moveList,sq,toSq);\n              }\n            }\n          }\n else           if (toSq == pos.getEpSquare()) {\n            addPawnMoves(moveList,sq,toSq);\n          }\n        }\n        if (x < 7) {\n          int toSq=sq + yDir + 1;\n          int cap=pos.getPiece(toSq);\n          if (cap != Piece.EMPTY) {\n            if (Piece.isWhite(cap) != wtm) {\n              if (cap == (wtm ? Piece.BKING : Piece.WKING)) {\n                returnMoveList(moveList);\n                moveList=getMoveListObj();\n                moveList.add(getMoveObj(sq,toSq,Piece.EMPTY));\n                return moveList;\n              }\n else {\n                addPawnMoves(moveList,sq,toSq);\n              }\n            }\n          }\n else           if (toSq == pos.getEpSquare()) {\n            addPawnMoves(moveList,sq,toSq);\n          }\n        }\n      }\n    }\n  }\n  return moveList;\n}"}
{"ids": "69751", "raw_code": "private void handleStaticSiteRequest(StaticSiteRequest.PointRequest request,TransportNetwork transportNetwork,TaskStatistics ts){\n  StaticComputer computer=new StaticComputer(request,transportNetwork,ts);\n  if (request.request.bucket != null)   computer.run();\n else {\n    try {\n      PipedInputStream pis=new PipedInputStream();\n      PipedOutputStream pos=new PipedOutputStream(pis);\n      finishPriorityTask(request,pis);\n      computer.write(pos);\n      pos.close();\n    }\n catch (    IOException e) {\n      LOG.error(\"Could not write static output to broker\",e);\n    }\n  }\n  deleteRequest(request);\n}"}
{"ids": "55310", "raw_code": "public synchronized void removeRoom(String room){\n  if (!Helper.validateStream(room)) {\n    return;\n  }\n  room=room.toLowerCase();\n  if (rooms.remove(room)) {\n    unsubRoom(room);\n    removeEmotes(room);\n    prevEmotesets.remove(room);\n  }\n}"}
{"ids": "73295", "raw_code": "public void addAll(final Collection elements){\n  adjusting=true;\n  Set oldSelection=new HashSet(selection);\n  boolean rv=selection.addAll(elements);\n  adjusting=false;\n  if (rv) {\n    fireSelectionChanged(oldSelection,selection);\n  }\n  oldSelection=null;\n}"}
{"ids": "72285", "raw_code": "public boolean hasFeature(int feature){\n  return ((feature >= MODE_FIRST && feature <= MODE_LAST) || (feature >= FEATURE_FIRST && feature <= FEATURE_LAST)) && (feature == MODE_OFF || mCapabilities.get(feature));\n}"}
{"ids": "32102", "raw_code": "public Set<Integer> backupPartitions(UUID nodeId){\n  Set<Integer> set=backup.get(nodeId);\n  return set == null ? Collections.<Integer>emptySet() : set;\n}"}
{"ids": "82525", "raw_code": "public java.lang.StringBuffer insert(int offset,java.lang.String str){\n  internal.insert(offset,str);\n  return this;\n}"}
{"ids": "78394", "raw_code": "public Loader load(String imageUrl){\n  ImageUrl=imageUrl;\n  return this;\n}"}
{"ids": "36171", "raw_code": "private void buildPTR(){\n  double[] temp_row;\n  double[][] PTRA;\n  int k;\n  PivotTransform pt;\n  PTR=Matrix.identity(n,n);\n  PTRA=PTR.getArray();\n  k=pivotTransformQueue.size();\n  while (k-- > 0) {\n    pt=pivotTransformQueue.removeLast();\n    temp_row=PTRA[pt.pos1];\n    PTRA[pt.pos1]=PTRA[pt.pos2];\n    PTRA[pt.pos2]=temp_row;\n  }\n}"}
{"ids": "47428", "raw_code": "public Bidi createLineBidi(int lineStart,int lineLimit){\n  AttributedString astr=new AttributedString(\"\");\n  Bidi newBidi=new Bidi(astr.getIterator());\n  return bidiBase.setLine(this,bidiBase,newBidi,newBidi.bidiBase,lineStart,lineLimit);\n}"}
{"ids": "50902", "raw_code": "public void restartAndInstallIfNecessary(){\n  File patchesDir=new File(mySdkHandler.getLocation(),PatchInstallerUtil.PATCHES_DIR_NAME);\n  StudioLoggerProgressIndicator progress=new StudioLoggerProgressIndicator(PatchInstallerFactory.class);\n  if (patchesDir.exists()) {\n    File[] subDirs=patchesDir.listFiles(null);\n    for (    File patchDir : subDirs) {\n      processPatch(mySdkHandler.getLocation(),progress,patchDir);\n    }\n  }\n}"}
{"ids": "75777", "raw_code": "public static double[][] align(int[] real,double[] pred){\n  int missing=numberOfMissingLabels(real);\n  double[] _real=new double[real.length - missing];\n  double[] _pred=new double[real.length - missing];\n  int offset=0;\n  for (int i=0; i < real.length; i++) {\n    if (real[i] == -1 || pred[i] == -1.0 || Double.isNaN(pred[i])) {\n      offset++;\n      continue;\n    }\n    _real[i - offset]=real[i];\n    _pred[i - offset]=pred[i];\n  }\n  double[][] res=new double[2][0];\n  res[0]=_real;\n  res[1]=_pred;\n  return res;\n}"}
{"ids": "86250", "raw_code": "public void append(File file,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {\n  if (!file.exists()) {\n    throw new FileNotFoundException(file.getAbsolutePath());\n  }\n  InputStream inputStream=null;\n  try {\n    inputStream=new FileInputStream(file);\n  }\n catch (  IOException e) {\n    throw new FTPDataTransferException(e);\n  }\n  try {\n    append(file.getName(),inputStream,0,listener);\n  }\n catch (  IllegalStateException e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw e;\n  }\ncatch (  FTPIllegalReplyException e) {\n    throw e;\n  }\ncatch (  FTPException e) {\n    throw e;\n  }\ncatch (  FTPDataTransferException e) {\n    throw e;\n  }\ncatch (  FTPAbortedException e) {\n    throw e;\n  }\n finally {\n    if (inputStream != null) {\n      try {\n        inputStream.close();\n      }\n catch (      Throwable t) {\n        ;\n      }\n    }\n  }\n}"}
{"ids": "55093", "raw_code": "public static boolean isScopedName(String name){\n  return name.indexOf('.') != -1;\n}"}
{"ids": "85647", "raw_code": "public Input(IoBuffer buf){\n  super(buf);\n  amf3_mode=0;\n  stringReferences=new ArrayList<String>();\n  classReferences=new ArrayList<ClassReference>();\n}"}
{"ids": "25194", "raw_code": "public static Properties loadConfigFile(String path){\n  Properties property=null;\n  File file=new File(path);\n  if (file.exists() && file.canRead()) {\n    try {\n      property=new Properties();\n      property.load(new FileReader(file.getAbsolutePath()));\n    }\n catch (    FileNotFoundException e) {\n      e.printStackTrace();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n  return property;\n}"}
{"ids": "7226", "raw_code": "protected static void toEPLViews(StringWriter writer,List<View> views){\n  if ((views != null) && (views.size() != 0)) {\n    writer.write('.');\n    String delimiter=\"\";\n    for (    View view : views) {\n      writer.write(delimiter);\n      view.toEPL(writer);\n      delimiter=\".\";\n    }\n  }\n}"}
{"ids": "79791", "raw_code": "protected void removeDatabaseListeners(){\n  databaseListeners.clear();\n}"}
{"ids": "69466", "raw_code": "public void addGenericAttr(GenericAttr g){\n  generic.addElement(g);\n}"}
{"ids": "83280", "raw_code": "private List<FahrzeitEvent> addFahrtInfoToFahrzeitEvents(List<FahrtEvent> fahrtEvents,List<FahrzeitEvent> fahrzeitEvents,boolean keepFahrzeitEventsWithoutFahrtEvent){\n  List<FahrzeitEvent> fahrzeitEventsOut=new LinkedList<FahrzeitEvent>();\n  Map<String,FahrtEvent> rblDateKursDateTimeIst2FahrtEventMap=new HashMap<String,FahrtEvent>();\n  Set<String> searchStrings=new TreeSet<String>();\n  for (  FahrtEvent fahrtEvent : fahrtEvents) {\n    String searchId=String.valueOf(fahrtEvent.getRblDate()) + String.valueOf(fahrtEvent.getKurs()) + fahrtEvent.getDepartureDateIst()+ fahrtEvent.getDepartureTimeIst();\n    if (searchStrings.contains(searchId)) {\n      log.warn(\"Search string already exists. This should not happen. \" + searchId);\n    }\n else {\n      searchStrings.add(searchId);\n      rblDateKursDateTimeIst2FahrtEventMap.put(searchId,fahrtEvent);\n    }\n  }\n  int numberOfMissingFahrtEvents=0;\n  for (  FahrzeitEvent fahrzeitEvent : fahrzeitEvents) {\n    String searchId=String.valueOf(fahrzeitEvent.getRblDate()) + String.valueOf(fahrzeitEvent.getKurs()) + fahrzeitEvent.getDepartureDateIst()+ fahrzeitEvent.getDepartureTimeIst();\n    FahrtEvent fahrtEvent=rblDateKursDateTimeIst2FahrtEventMap.get(searchId);\n    if (fahrtEvent == null) {\n      numberOfMissingFahrtEvents++;\n      if (keepFahrzeitEventsWithoutFahrtEvent) {\n        fahrzeitEventsOut.add(fahrzeitEvent);\n      }\n    }\n else {\n      fahrzeitEvent.add(fahrtEvent);\n      fahrzeitEventsOut.add(fahrzeitEvent);\n    }\n  }\n  log.info(numberOfMissingFahrtEvents + \" fahrzeit events could not be linked to a fahrt event\");\n  log.info(\"Returning \" + fahrzeitEventsOut.size() + \" fahrzeitEvents\");\n  return fahrzeitEventsOut;\n}"}
{"ids": "31680", "raw_code": "private void checkUUID(String uuid,int code){\n  checkHash(UUID.fromString(uuid),code);\n}"}
{"ids": "39662", "raw_code": "@Override protected void prepareWrite(WritableByteChannel channel) throws Exception {\n  os=Channels.newOutputStream(channel);\n}"}
{"ids": "14885", "raw_code": "public void run(){\n  try {\n    boolean cleanRemoteSessions=false;\nsynchronized (this) {\n      Collection<StateInfo> infos=new ArrayList<>();\n      infos.addAll(servers.values());\n      infos.addAll(sites.values());\n      for (      StateInfo info : infos) {\n        info.isUp=checkServerUp(info);\n        if (!info.isUp) {\n          down.add(info.id);\n        }\n else {\n          if (!down.isEmpty() && down.remove(info.id)) {\n            cleanRemoteSessions=true;\n          }\n        }\n      }\n    }\n    if (cleanRemoteSessions) {\n      foreignSessionHandler.cleanUpRemoteSessions();\n    }\n  }\n catch (  Exception ex) {\n    sessionDebug.error(\"cleanRemoteSessions Background thread has encountered an Exception: \" + ex.getMessage(),ex);\n  }\n}"}
{"ids": "51897", "raw_code": "public Builder addHeader(String name,String value){\n  headers.add(new Header(name,value));\n  return this;\n}"}
{"ids": "78121", "raw_code": "public static double normalCDF(double x){\n  return (0.5 * (1.0 + (erf(x / (Math.sqrt(2.0))))));\n}"}
{"ids": "38378", "raw_code": "public void removeResult(String name){\n  StringBuffer buff=m_Results.get(name);\n  if (buff != null) {\n    m_Results.remove(name);\n    m_Model.removeElement(name);\n    m_Objs.remove(name);\n    System.gc();\n  }\n}"}
{"ids": "20220", "raw_code": "private void addEntry(){\n  filterModel.addNewEntry();\n  extentModel.populate(null);\n  removeFTCButton.setEnabled(false);\n  addExtentButton.setEnabled(false);\n  removeExtentButton.setEnabled(false);\n}"}
{"ids": "50749", "raw_code": "double[][] CalcTheoreticalSVValues(Variogram vario,double MaximumDisplyDistanst){\n  double[][] res=new double[2 * NumberOfLags + 1][2];\n  for (int i=0; i < res.length; i++) {\n    res[i][0]=i * MaximumDisplyDistanst / (2 * NumberOfLags);\nswitch (vario.Type) {\ncase EXPONENTIAL:\n      if (res[i][0] != 0) {\n        res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-res[i][0] / vario.Range));\n      }\n else {\n        res[i][1]=vario.Nugget;\n      }\n    break;\ncase GAUSSIAN:\n  if (res[i][0] != 0) {\n    res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-3 * (Math.pow(res[i][0],2)) / (Math.pow(vario.Range,2))));\n  }\n else {\n    res[i][1]=vario.Nugget;\n  }\nbreak;\ncase SPHERICAL:\nif (res[i][0] > vario.Range) {\nres[i][1]=vario.Nugget + vario.Sill;\n}\n else if (res[i][0] > 0 && res[i][0] <= vario.Range) {\nres[i][1]=vario.Nugget + vario.Sill * (1.5 * res[i][0] / vario.Range - 0.5 * Math.pow((res[i][0] / vario.Range),3));\n}\n else {\nres[i][1]=vario.Nugget;\n}\nbreak;\n}\n}\nreturn res;\n}"}
{"ids": "9787", "raw_code": "public DExportPrivateKeyOpenSsl(JFrame parent,String entryAlias,PasswordQualityConfig passwordQualityConfig){\n  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);\n  this.entryAlias=entryAlias;\n  this.passwordQualityConfig=passwordQualityConfig;\n  initComponents();\n}"}
{"ids": "65981", "raw_code": "public BigDecimal sum(String sqlExpression){\n  return aggregate(sqlExpression,AGGREGATE_SUM);\n}"}
{"ids": "7511", "raw_code": "@Override public int calculateOffsetX(){\n  return (int)(Math.cos(this.angle) * this.distance) - this.shadowSize;\n}"}
{"ids": "44950", "raw_code": "public String addDays(Object odays,String format){\n  int days=FunctionHandler.getInt(odays);\n  Calendar now=Calendar.getInstance();\n  now.add(Calendar.DAY_OF_YEAR,days);\n  DateFormat formatter=getFormatter(format);\n  return formatter.format(now.getTime());\n}"}
{"ids": "6797", "raw_code": "private static File createTempFile(Context context,@Nullable String mimeType) throws IOException {\n  File externalCacheDir=context.getExternalCacheDir();\n  File internalCacheDir=context.getCacheDir();\n  File cacheDir;\n  if (externalCacheDir == null && internalCacheDir == null) {\n    throw new IOException(\"No cache directory available\");\n  }\n  if (externalCacheDir == null) {\n    cacheDir=internalCacheDir;\n  }\n else   if (internalCacheDir == null) {\n    cacheDir=externalCacheDir;\n  }\n else {\n    cacheDir=externalCacheDir.getFreeSpace() > internalCacheDir.getFreeSpace() ? externalCacheDir : internalCacheDir;\n  }\n  return File.createTempFile(TEMP_FILE_PREFIX,getFileExtensionForType(mimeType),cacheDir);\n}"}
{"ids": "48837", "raw_code": "public WritableRaster createCompatibleWritableRaster(int w,int h){\n  if (w <= 0 || h <= 0) {\n    throw new RasterFormatException(\"negative \" + ((w <= 0) ? \"width\" : \"height\"));\n  }\n  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);\n  return new IntegerInterleavedRaster(sm,new Point(0,0));\n}"}
{"ids": "26932", "raw_code": "public static String[] schedulerCommandArgs(Config config,Config runtime,List<Integer> freePorts){\n  if (freePorts.size() < PORTS_REQUIRED_FOR_SCHEDULER) {\n    throw new RuntimeException(\"Failed to find enough ports for executor\");\n  }\n  for (  int port : freePorts) {\n    if (port == -1) {\n      throw new RuntimeException(\"Failed to find available ports for executor\");\n    }\n  }\n  int httpPort=freePorts.get(0);\n  List<String> commands=new ArrayList<>();\n  commands.add(\"--cluster\");\n  commands.add(Context.cluster(config));\n  commands.add(\"--role\");\n  commands.add(Context.role(config));\n  commands.add(\"--environment\");\n  commands.add(Context.environ(config));\n  commands.add(\"--topology_name\");\n  commands.add(Context.topologyName(config));\n  commands.add(\"--topology_bin\");\n  commands.add(Context.topologyBinaryFile(config));\n  commands.add(\"--http_port\");\n  commands.add(Integer.toString(httpPort));\n  return commands.toArray(new String[0]);\n}"}
{"ids": "77307", "raw_code": "public DocumentAnalysisRequest addDocument(SolrInputDocument doc){\n  documents.add(doc);\n  return this;\n}"}
{"ids": "46761", "raw_code": "public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {\n  chooseFirstProvider();\n  return spi.engineDoPhase(key,lastPhase);\n}"}
{"ids": "25282", "raw_code": "public void readBucketsFromPrefs(){\n  SharedPreferences prefs=mContext.getSharedPreferences(SHARED_PREFS,0);\n  Set<String> buckets=prefs.getStringSet(PREF_BUCKETS_IDS,new TreeSet<String>());\n  mBuckets.clear();\n  for (  String bucketId : buckets) {\n    AutoMixBucket bucket=restoreBucketFromId(bucketId);\n    mBuckets.add(bucket);\n  }\n}"}
{"ids": "41496", "raw_code": "@Override public void acceptAppOffer(Offer offer){\n  int index=getIndex(offer,appOffers);\n  if (index != -1) {\n    appOffers.remove(index);\n    appOfferStream.onNext(offer);\n  }\n  index=getIndex(offer,acceptedOffers);\n  if (index == -1) {\n    acceptedOffers.add(offer);\n  }\n}"}
{"ids": "14387", "raw_code": "public void writeRequest(){\n  Object lock=new Object();\nsynchronized (lock) {\nsynchronized (this) {\n      boolean goAheadWithWrite=writerLocks.size() == 0 && currentReaders == 0 && currentWriters == 0;\n      if (goAheadWithWrite) {\n        ++currentWriters;\n        return;\n      }\n      writerLocks.addLast(lock);\n    }\n    try {\n      lock.wait();\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}"}
{"ids": "86334", "raw_code": "public void removeSelectionListener(final SelectionListener listener){\n  checkWidget();\n  listeners.remove(listener);\n}"}
{"ids": "80690", "raw_code": "private synchronized String readInputStream(InputStreamReader inputStreamReader) throws IOException, BadLocationException {\n  BufferedReader bufferedReader=null;\n  try {\n    bufferedReader=new BufferedReader(inputStreamReader);\n    String newLine=\"\\n\";\n    StringBuffer sb=new StringBuffer();\n    String line;\n    while ((line=bufferedReader.readLine()) != null) {\n      sb.append(line + newLine);\n    }\n    return sb.toString();\n  }\n  finally {\n    if (null != bufferedReader)     bufferedReader.close();\n    if (null != inputStreamReader)     inputStreamReader.close();\n  }\n}"}
{"ids": "85405", "raw_code": "private List<Map<String,Object>> typeParameters(List<TypeParameter> tpl,Declaration from){\n  if (tpl != null && !tpl.isEmpty()) {\n    List<Map<String,Object>> l=new ArrayList<>(tpl.size());\n    for (    TypeParameter tp : tpl) {\n      l.add(typeParameterMap(tp,from));\n    }\n    return l;\n  }\n  return null;\n}"}
{"ids": "5559", "raw_code": "private static boolean withinTwo(INode n,INode goal){\n  DoubleLinkedList<IMove> moves=n.validMoves();\n  for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {\n    IMove move=it.next();\n    INode successor=n.copy();\n    move.execute(successor);\n    if (withinOne(successor,goal)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "4803", "raw_code": "public PennTreebankReader(String treebankHome,String[] sections,String parseViewName) throws Exception {\n  super(CorpusReaderConfigurator.buildResourceManager(PENN_TREEBANK_WSJ,treebankHome));\n  this.parseViewName=parseViewName;\n  combinedWSJHome=treebankHome;\n  if (sections == null)   this.sections=IOUtils.lsDirectories(combinedWSJHome);\n else {\n    this.sections=new String[sections.length];\n    System.arraycopy(sections,0,this.sections,0,sections.length);\n  }\n  updateCurrentFiles();\n}"}
{"ids": "19763", "raw_code": "protected void applyRowChangeData(RowChangeData data,List<ReplOption> options,String sourceDbmsType) throws ReplicatorException {\n  if (options != null) {\n    try {\n      if (applySessionVariables(null,options)) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Applying changed session variables\");\n        }\n        executePendingBatch();\n        statement.executeBatch();\n        statement.clearBatch();\n      }\n    }\n catch (    SQLException e) {\n      throw new ApplierException(\"Failed to apply session variables\",e);\n    }\n  }\n  List<ReplOption> rowOptions=data.getOptions();\n  if (rowOptions != null) {\n    try {\n      if (applySessionVariables(null,rowOptions)) {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Applying changed row option variables\");\n        }\n        executePendingBatch();\n        statement.executeBatch();\n        statement.clearBatch();\n      }\n    }\n catch (    SQLException e) {\n      throw new ApplierException(\"Failed to apply session variables\",e);\n    }\n  }\n  for (  OneRowChange row : data.getRowChanges()) {\n    applyOneRowChangePrepared(row,sourceDbmsType);\n  }\n}"}
{"ids": "82569", "raw_code": "public boolean isInfinite(){\n  return isInfinite(value);\n}"}
{"ids": "49844", "raw_code": "public void receiveRedundancy(){\n  try {\n    while (true) {\n      if (mIn.read(mInBuffer) <= 0)       return;\n    }\n  }\n catch (  IOException e) {\n  }\n}"}
{"ids": "63243", "raw_code": "MVStore(HashMap<String,Object> config){\n  Object o=config.get(\"compress\");\n  this.compressionLevel=o == null ? 0 : (Integer)o;\n  String fileName=(String)config.get(\"fileName\");\n  o=config.get(\"pageSplitSize\");\n  if (o == null) {\n    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;\n  }\n else {\n    pageSplitSize=(Integer)o;\n  }\n  o=config.get(\"backgroundExceptionHandler\");\n  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;\n  meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);\n  HashMap<String,Object> c=New.hashMap();\n  c.put(\"id\",0);\n  c.put(\"createVersion\",currentVersion);\n  meta.init(this,c);\n  fileStore=(FileStore)config.get(\"fileStore\");\n  if (fileName == null && fileStore == null) {\n    cache=null;\n    cacheChunkRef=null;\n    return;\n  }\n  if (fileStore == null) {\n    fileStoreIsProvided=false;\n    fileStore=new FileStore();\n  }\n else {\n    fileStoreIsProvided=true;\n  }\n  retentionTime=fileStore.getDefaultRetentionTime();\n  boolean readOnly=config.containsKey(\"readOnly\");\n  o=config.get(\"cacheSize\");\n  int mb=o == null ? 16 : (Integer)o;\n  if (mb > 0) {\n    CacheLongKeyLIRS.Config cc=new CacheLongKeyLIRS.Config();\n    cc.maxMemory=mb * 1024L * 1024L;\n    o=config.get(\"cacheConcurrency\");\n    if (o != null) {\n      cc.segmentCount=(Integer)o;\n    }\n    cache=new CacheLongKeyLIRS<Page>(cc);\n    cc.maxMemory/=4;\n    cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(cc);\n  }\n  o=config.get(\"autoCommitBufferSize\");\n  int kb=o == null ? 1024 : (Integer)o;\n  autoCommitMemory=kb * 1024 * 19;\n  o=config.get(\"autoCompactFillRate\");\n  autoCompactFillRate=o == null ? 50 : (Integer)o;\n  char[] encryptionKey=(char[])config.get(\"encryptionKey\");\n  try {\n    if (!fileStoreIsProvided) {\n      fileStore.open(fileName,readOnly,encryptionKey);\n    }\n    if (fileStore.size() == 0) {\n      creationTime=getTimeAbsolute();\n      lastCommitTime=creationTime;\n      storeHeader.put(\"H\",2);\n      storeHeader.put(\"blockSize\",BLOCK_SIZE);\n      storeHeader.put(\"format\",FORMAT_WRITE);\n      storeHeader.put(\"created\",creationTime);\n      writeStoreHeader();\n    }\n else {\n      readStoreHeader();\n    }\n  }\n catch (  IllegalStateException e) {\n    panic(e);\n  }\n finally {\n    if (encryptionKey != null) {\n      Arrays.fill(encryptionKey,(char)0);\n    }\n  }\n  lastCommitTime=getTimeSinceCreation();\n  o=config.get(\"autoCommitDelay\");\n  int delay=o == null ? 1000 : (Integer)o;\n  setAutoCommitDelay(delay);\n}"}
{"ids": "70690", "raw_code": "public static boolean isValidVector(Vector2f vector){\n  if (vector == null)   return false;\n  if (Float.isNaN(vector.x) || Float.isNaN(vector.y))   return false;\n  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y))   return false;\n  return true;\n}"}
{"ids": "45280", "raw_code": "public static URL resolveURL(URL base,String target) throws MalformedURLException {\n  target=target.trim();\n  if (target.startsWith(\"?\")) {\n    return fixPureQueryTargets(base,target);\n  }\n  return new URL(base,target);\n}"}
{"ids": "53080", "raw_code": "protected int maxDepth(Layout.Node node){\n  int depth=0;\n  for (int i=0; i < node.numChildren(); i++) {\n    Layout.Node child=node.getChild(i);\n    depth=Math.max(depth,maxDepth(child));\n  }\n  return depth + 1;\n}"}
{"ids": "31113", "raw_code": "private static URL[] pathToURLs(String path) throws MalformedURLException {\nsynchronized (pathToURLsCache) {\n    Object[] v=(Object[])pathToURLsCache.get(path);\n    if (v != null) {\n      return (URL[])v[0];\n    }\n  }\n  StringTokenizer st=new StringTokenizer(path);\n  URL[] urls=new URL[st.countTokens()];\n  for (int i=0; st.hasMoreTokens(); i++) {\n    urls[i]=new URL(st.nextToken());\n  }\nsynchronized (pathToURLsCache) {\n    pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)});\n  }\n  return urls;\n}"}
{"ids": "10411", "raw_code": "private void addFinal(Object[] stacks){\n  Object[] input=new Object[inputSize], output=new Object[outputSize];\n  for (int i=0; i < stacks.length; i++) {\n    if (i < inputSize) {\n      input[i]=stacks[i];\n    }\n else     if (!(i - inputSize > outputSize)) {\n      output[i - inputSize]=stacks[i];\n    }\n else {\n      throw new RuntimeException(\"Recipe is too big!\");\n    }\n  }\n  addRecipe(input,output);\n}"}
{"ids": "51719", "raw_code": "protected void fireConnectionClosed(){\n  ConnectionEvent evt=new ConnectionEvent(this);\n  for (  ConnectionEventListener listener : connectionEventListeners) {\n    listener.connectionClosed(evt);\n  }\n}"}
{"ids": "32051", "raw_code": "public static void putIntVolatile(Object obj,long off,int val){\n  UNSAFE.putIntVolatile(obj,off,val);\n}"}
{"ids": "60015", "raw_code": "public static URI createUriFromServerSet(Set<InetSocketAddress> serverInetSet,String path,String protocol) throws URISyntaxException {\n  InetSocketAddress inetSocketAddress=ServiceUtils.selectRandomItem(serverInetSet);\n  String address=inetSocketAddress.getHostString();\n  int port=inetSocketAddress.getPort();\n  URI uri=new URI(protocol,null,address,port,path,null,null);\n  return uri;\n}"}
{"ids": "28400", "raw_code": "public PlotNavigator(Plot plot,String... axesNames){\n  this(plot,Arrays.asList(axesNames));\n}"}
{"ids": "65618", "raw_code": "public void addColumn(Class classType,boolean readOnly,String header){\n  m_modelHeaderClass.add(classType);\n  setColumnReadOnly(m_modelHeaderClass.size() - 1,readOnly);\n  addColumn(header);\n  WListItemRenderer renderer=(WListItemRenderer)getItemRenderer();\n  renderer.setColumnClass((renderer.getNoColumns() - 1),classType);\n  return;\n}"}
{"ids": "73445", "raw_code": "PointComparator(int dimension){\n  this.dimension=dimension;\n}"}
{"ids": "70788", "raw_code": "public static void addElement(Document doc,Element rootElement,String elementName,String typeIn,String isArrayIn,String partitionerIn){\n  Element element=doc.createElement(\"element\");\n  rootElement.appendChild(element);\n  Element name=doc.createElement(\"name\");\n  name.appendChild(doc.createTextNode(elementName));\n  element.appendChild(name);\n  Element type=doc.createElement(\"type\");\n  type.appendChild(doc.createTextNode(typeIn));\n  element.appendChild(type);\n  if (isArrayIn.equals(\"true\")) {\n    element.appendChild(doc.createElement(\"isArray\"));\n  }\n  if (partitionerIn != null) {\n    Element partitioner=doc.createElement(\"partitioner\");\n    partitioner.appendChild(doc.createTextNode(partitionerIn));\n    element.appendChild(partitioner);\n  }\n}"}
{"ids": "72015", "raw_code": "public final void addInstanceOf(String className){\n  Reject.ifNull(className);\n  String value=className.trim();\n  if (!value.matches(CLASS_RE)) {\n    throw new IllegalArgumentException(\"\\\"\" + value + \"\\\" is not a valid Java class name\");\n  }\n  instanceOfInterfaces.add(value);\n}"}
{"ids": "54175", "raw_code": "public boolean isDisplayedExpectingComponents(){\n  boolean result=false;\n  if (conditions.isConditionMet(visibilityOf(window))) {\n    if (components.isEmpty()) {\n      closeButton.click();\n    }\n else {\n      result=true;\n    }\n  }\n  return result;\n}"}
{"ids": "45359", "raw_code": "private void processRunStartedTag(String identifier){\n  Pattern numTestsPattern=Pattern.compile(\"Running (\\\\d+) test[s]? from .*\");\n  Matcher numTests=numTestsPattern.matcher(identifier);\n  if (numTests.find()) {\n    try {\n      mNumTestsExpected=Integer.parseInt(numTests.group(1));\n    }\n catch (    NumberFormatException e) {\n      Log.e(LOG_TAG,\"Unable to determine number of tests expected, received: \" + numTests.group(1));\n    }\n  }\n  if (mNumTestsExpected > 0) {\n    reportTestRunStarted();\n    mNumTestsRun=0;\n    mTestRunInProgress=true;\n  }\n}"}
{"ids": "33179", "raw_code": "public StyledString insert(char ch,int offset) throws StringIndexOutOfBoundsException {\n  if (offset < 0 || offset > builder.length()) {\n    throw new StringIndexOutOfBoundsException(\"Invalid offset (\" + offset + \")\");\n  }\n  builder.insert(offset,ch);\n  return this;\n}"}
{"ids": "67492", "raw_code": "public void addRoot(ProtoElement root){\n  roots.add(root);\n}"}
{"ids": "24914", "raw_code": "public void expandToObjectAndSelect(Object elementOrTreePath,int level){\n  if (checkBusy()) {\n    return;\n  }\n  Object parent=getParentElement(elementOrTreePath);\n  if (((parent != null) && getExpandedState(parent)) || isRootElement(elementOrTreePath)) {\n    Widget w=internalGetWidgetToSelect(elementOrTreePath);\n    if (null != w) {\n      List<Object> selectionList=new ArrayList<>();\n      selectionList.add(w);\n      setSelection(selectionList);\n      objectToSelect.set(null);\n    }\n else {\n      objectToSelect.set(elementOrTreePath);\n    }\n  }\n else {\n    objectToSelect.set(elementOrTreePath);\n    List<Object> objectsToExpand=createObjectList(parent,new ArrayList<>());\n    if (!objectsToExpand.isEmpty()) {\n      objectsToBeExpanded.addAll(objectsToExpand);\n      Widget w=internalExpand(elementOrTreePath,true);\n      if (w != null) {\n        internalExpandToLevel(w,level);\n      }\n    }\n else {\n      Widget w=internalGetWidgetToSelect(elementOrTreePath);\n      if (null != w) {\n        List<Object> selectionList=new ArrayList<>();\n        selectionList.add(w);\n        setSelection(selectionList);\n        objectToSelect.set(null);\n      }\n    }\n  }\n}"}
{"ids": "72140", "raw_code": "public void appendCell(float value){\n  appendCell(String.valueOf(value));\n}"}
{"ids": "75442", "raw_code": "public SVNChangeSetCollector(ISynchronizePageConfiguration configuration){\n  super(configuration);\n}"}
{"ids": "15667", "raw_code": "public void ensureMaxSize(int maxWidth,int maxHeight,boolean keepProportions){\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  if (keepProportions) {\n    if (width > height) {\n      if (width > maxWidth) {\n        height=Math.round(height*=maxWidth / (double)width);\n        width=maxWidth;\n      }\n    }\n else {\n      if (height > maxHeight) {\n        width=Math.round(width*=maxHeight / (double)height);\n        height=maxHeight;\n      }\n    }\n  }\n else {\n    width=Math.min(width,maxWidth);\n    height=Math.min(height,maxHeight);\n  }\n  resize(width,height);\n}"}
{"ids": "48487", "raw_code": "public static boolean isNormalized(CharSequence src,java.text.Normalizer.Form form,int option){\n  return NormalizerBase.isNormalized(src.toString(),form,option);\n}"}
{"ids": "85217", "raw_code": "public static String unescapeSom(String s){\n  int idx=s.indexOf('\\\\');\n  if (idx < 0)   return s;\n  StringBuilder sb=new StringBuilder();\n  int last=0;\n  while (idx >= 0) {\n    sb.append(s.substring(last,idx));\n    last=idx + 1;\n    idx=s.indexOf('\\\\',idx + 1);\n  }\n  sb.append(s.substring(last));\n  return sb.toString();\n}"}
{"ids": "33972", "raw_code": "private static CopyState readCopyState(DataInput in) throws IOException {\n  byte[] infosBytes=new byte[in.readVInt()];\n  in.readBytes(infosBytes,0,infosBytes.length);\n  long gen=in.readVLong();\n  long version=in.readVLong();\n  Map<String,FileMetaData> files=CopyFilesHandler.readFilesMetaData(in);\n  int count=in.readVInt();\n  Set<String> completedMergeFiles=new HashSet<>();\n  for (int i=0; i < count; i++) {\n    completedMergeFiles.add(in.readString());\n  }\n  long primaryGen=in.readVLong();\n  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);\n}"}
{"ids": "30328", "raw_code": "@Transactional public void redeem(final String tokenNumber,final String service){\n  final Token token=tokenRepository.findByTokenNumberAndService(tokenNumber,service);\n  if (token == null)   throw new ApplicationRuntimeException(\"Token \" + tokenNumber + \" does not exist!\");\n  redeem(token);\n}"}
{"ids": "69426", "raw_code": "public int lightenColor(int color,float factor){\n  float r=Color.red(color) * factor;\n  float g=Color.green(color) * factor;\n  float b=Color.blue(color) * factor;\n  int ir=Math.min(255,(int)r);\n  int ig=Math.min(255,(int)g);\n  int ib=Math.min(255,(int)b);\n  int ia=Color.alpha(color);\n  return (Color.argb(ia,ir,ig,ib));\n}"}
{"ids": "36968", "raw_code": "private static String toDatabaseString(final OperandSize size){\nswitch (size) {\ncase BYTE:\n    return \"b1\";\ncase WORD:\n  return \"b2\";\ncase DWORD:\nreturn \"b4\";\ncase QWORD:\nreturn \"b8\";\ncase OWORD:\nreturn \"b16\";\ncase ADDRESS:\nreturn \"b4\";\ndefault :\nthrow new IllegalArgumentException(String.format(\"Error: Unknown operand size %s\",size));\n}\n}"}
{"ids": "85579", "raw_code": "static String fileNameOfClass(final String className,String typeSuffix){\n  return className.replace('.','/') + \".\" + typeSuffix;\n}"}
{"ids": "75086", "raw_code": "public void writePv(ProcessVar pv,int recursiveDepth){\n  writePv(pv,recursiveDepth,false);\n}"}
{"ids": "85117", "raw_code": "private static void assertQualNS(String qualNS) throws XMPException {\n  if (qualNS == null || qualNS.length() == 0) {\n    throw new XMPException(\"Empty qualifier namespace URI\",XMPError.BADSCHEMA);\n  }\n}"}
{"ids": "53359", "raw_code": "public static StringBuilder formatTo(StringBuilder buf,float[] d,String sep,NumberFormat nf){\n  if (d == null) {\n    return buf.append(\"null\");\n  }\n  if (d.length == 0) {\n    return buf;\n  }\n  buf.append(nf.format(d[0]));\n  for (int i=1; i < d.length; i++) {\n    buf.append(sep);\n    buf.append(nf.format(d[i]));\n  }\n  return buf;\n}"}
{"ids": "69007", "raw_code": "public int removeViewpoints(int[] indices){\n  for (int i=indices.length - 1; i >= 0; --i)   viewpointList.remove(indices[i]);\n  viewpointIndex=indices[0] - 1;\n  if (viewpointList.size() == 0) {\n    viewpointIndex=-1;\n  }\n else   if (viewpointIndex < 0) {\n    viewpointIndex=viewpointList.size() - 1;\n  }\n  return (viewpointIndex);\n}"}
{"ids": "37241", "raw_code": "private void updateColor(){\n  try {\n    BreakpointConditionParser.evaluate(inputField.getText());\n    inputField.setBackground(Color.WHITE);\n  }\n catch (  final InvalidFormulaException e) {\n    inputField.setBackground(Color.RED);\n  }\n}"}
{"ids": "67444", "raw_code": "public void removeIgnoredView(View v){\n  ignoredViews.remove(v);\n}"}
{"ids": "30872", "raw_code": "private static boolean ensureCurrent(LeasedResource resource){\n  return resource.getExpiration() > SystemTime.timeMillis();\n}"}
{"ids": "69280", "raw_code": "public void toggleSectionSelected(int sectionIndex){\n  setSectionSelected(sectionIndex,!isSectionSelected(sectionIndex));\n}"}
{"ids": "49214", "raw_code": "void stopScrollingInstance(){\n  if (log.isLoggable(PlatformLogger.Level.FINER)) {\n    log.finer(\"Stop scrolling on \" + this);\n  }\n  i_scroller.stop();\n}"}
{"ids": "74046", "raw_code": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=\"FE_FLOATING_POINT_EQUALITY\",justification=\"OK to compare floating point\") protected void newInternalMinute(){\n  double origCurrent=mCurrentIntensity;\n  int origState=mState;\n  int steps=getNumberOfSteps();\n  if ((mTransitionDuration > 0) && (steps > 0)) {\n    double stepsPerMinute=steps / mTransitionDuration;\n    double stepSize=1 / (double)steps;\n    double intensityDiffPerMinute=stepSize * stepsPerMinute;\n    if (Math.abs(mCurrentIntensity - mTransitionTargetIntensity) != 0) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"before Target: \" + mTransitionTargetIntensity + \" Current: \"+ mCurrentIntensity);\n      }\n      if (mTransitionTargetIntensity > mCurrentIntensity) {\n        mCurrentIntensity=mCurrentIntensity + intensityDiffPerMinute;\n        if (mCurrentIntensity >= mTransitionTargetIntensity) {\n          mCurrentIntensity=mTransitionTargetIntensity;\n          if (mCurrentIntensity >= getMaxIntensity()) {\n            mState=ON;\n          }\n else {\n            mState=INTERMEDIATE;\n          }\n        }\n      }\n else {\n        mCurrentIntensity=mCurrentIntensity - intensityDiffPerMinute;\n        if (mCurrentIntensity <= mTransitionTargetIntensity) {\n          mCurrentIntensity=mTransitionTargetIntensity;\n          if (mCurrentIntensity <= getMinIntensity()) {\n            mState=OFF;\n          }\n else {\n            mState=INTERMEDIATE;\n          }\n        }\n      }\n      sendIntensity(mCurrentIntensity);\n      if (log.isDebugEnabled()) {\n        log.debug(\"after Target: \" + mTransitionTargetIntensity + \" Current: \"+ mCurrentIntensity);\n      }\n    }\n  }\n  if (origCurrent != mCurrentIntensity) {\n    firePropertyChange(\"CurrentIntensity\",Double.valueOf(origCurrent),Double.valueOf(mCurrentIntensity));\n    if (log.isDebugEnabled()) {\n      log.debug(\"firePropertyChange intensity \" + origCurrent + \" -> \"+ mCurrentIntensity);\n    }\n  }\n  if (origState != mState) {\n    firePropertyChange(\"KnownState\",Integer.valueOf(origState),Integer.valueOf(mState));\n    if (log.isDebugEnabled()) {\n      log.debug(\"firePropertyChange intensity \" + origCurrent + \" -> \"+ mCurrentIntensity);\n    }\n  }\n}"}
{"ids": "49989", "raw_code": "public void execute2(KahanObject in1,double in2){\n  if (Double.isInfinite(in1._sum) || Double.isInfinite(in2)) {\n    in1.set(Double.isInfinite(in2) ? in2 : in1._sum,0);\n    return;\n  }\n  double correction=in2 + in1._correction;\n  double sum=in1._sum + correction;\n  in1.set(sum,correction - (sum - in1._sum));\n}"}
{"ids": "68034", "raw_code": "@Override public XMLEvent peek() throws XMLStreamException {\n  log.log(Level.FINE,\"peek()\");\n  if (!hasNext()) {\n    throw new XMLStreamException(\"The reader is depleted!\");\n  }\n  log.log(Level.FINE,\"peek(): {0}\",nextEvent);\n  return nextEvent;\n}"}
{"ids": "7128", "raw_code": "public static String replaceEndPoint(String url,String endPoint){\n  return endPoint + url.replaceFirst(DEFAULT_ENDPOINT,\"\");\n}"}
{"ids": "83949", "raw_code": "private void makeOkPath(){\n  path1.reset();\n  int w2=getMeasuredWidth() / 2;\n  int h2=getMeasuredHeight() / 2;\n  double a=Math.cos(Math.toRadians(25)) * getRadius();\n  double c=Math.sin(Math.toRadians(25)) * getRadius();\n  double l=Math.cos(Math.toRadians(53)) * 2 * a;\n  double b=Math.sin(Math.toRadians(53)) * l;\n  double m=Math.cos(Math.toRadians(53)) * l;\n  path1.moveTo((float)(w2 - a),(float)(h2 - c));\n  path1.lineTo((float)(w2 - a + m),(float)(h2 - c + Math.sin(Math.toRadians(53)) * l));\n  path1.lineTo((float)(w2 + a),(float)(h2 - c));\n  pathMeasure1.setPath(path1,false);\n  mMarkOklength=pathMeasure1.getLength();\n}"}
{"ids": "56863", "raw_code": "protected List<String> addWhitespace(List<String> list){\n  List<String> whitespaceList=new ArrayList<>();\n  for (  String value : list) {\n    whitespaceList.add(addWhitespace(value));\n  }\n  return whitespaceList;\n}"}
{"ids": "84969", "raw_code": "public static String computeQualifiedWidgetTypeName(Node widgetNode){\n  if (widgetNode.getNodeType() != Node.ELEMENT_NODE) {\n    return null;\n  }\n  String typeName=widgetNode.getLocalName();\n  if (typeName.length() == 0 || Character.isLowerCase(typeName.charAt(0))) {\n    return null;\n  }\n  String packageName=UiBinderUtilities.getPackageName(widgetNode.getNamespaceURI());\n  return packageName != null ? JavaUtilities.getQualifiedTypeName(typeName,packageName) : null;\n}"}
{"ids": "29870", "raw_code": "private static boolean processFtypAtom(ParsableByteArray atomData){\n  atomData.setPosition(Atom.HEADER_SIZE);\n  int majorBrand=atomData.readInt();\n  if (majorBrand == BRAND_QUICKTIME) {\n    return true;\n  }\n  atomData.skipBytes(4);\n  while (atomData.bytesLeft() > 0) {\n    if (atomData.readInt() == BRAND_QUICKTIME) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"ids": "68241", "raw_code": "public String delete(String url,final int expectedStatusCode){\n  return delete(url,Collections.<String,String>emptyMap(),expectedStatusCode);\n}"}
{"ids": "38096", "raw_code": "protected void runningSum(Set<Map.Entry<Double,Double>> c,double value,double[] sums){\n  double offset=CONST - Math.log(m_Width);\n  double logFactor=Math.log(m_Threshold) - Math.log(1 - m_Threshold);\n  double logSumOfWeights=Math.log(m_SumOfWeights);\n  Iterator<Map.Entry<Double,Double>> itr=c.iterator();\n  while (itr.hasNext()) {\n    Map.Entry<Double,Double> entry=itr.next();\n    if (entry.getValue() > 0) {\n      double diff=(entry.getKey() - value) / m_Width;\n      double logDensity=offset - 0.5 * diff * diff;\n      double logWeight=Math.log(entry.getValue());\n      sums[0]=logOfSum(sums[0],logWeight + logDensity);\n      sums[1]=logOfSum(sums[1],logWeight);\n      if (logDensity + logSumOfWeights < logOfSum(logFactor + sums[0],logDensity + sums[1])) {\n        break;\n      }\n    }\n  }\n}"}
{"ids": "61925", "raw_code": "@Override public CategoricalTable copy(){\n  Map<Value,Double> newTable=new HashMap<Value,Double>();\n  for (  Value v : table.keySet()) {\n    newTable.put(v,table.get(v));\n  }\n  return new CategoricalTable(variable,newTable);\n}"}
{"ids": "17087", "raw_code": "public Configuration subConfig(String prefix,String keyPrefix){\n  Configuration sub=new Configuration();\n  addToSubConf(sub,prefix.length() > 0 ? prefix + \".\" + keyPrefix : keyPrefix);\n  return sub;\n}"}
{"ids": "15394", "raw_code": "public Map<String,String> mapNameToDisplayName(Set<String> names) throws SMSException, SSOException {\n  final Map<String,String> map=new HashMap<>(names.size());\n  for (  String name : names) {\n    if (smsConsoleServiceConfig.isServiceVisible(name)) {\n      final ServiceSchemaManager serviceSchemaManager=serviceSchemaManagerFactory.build(name);\n      String displayName=getLocalizedServiceName(serviceSchemaManager,name);\n      String resourceName=serviceSchemaManager.getResourceName();\n      if (!name.equals(displayName) && !StringUtils.isBlank(resourceName)) {\n        map.put(resourceName,displayName);\n      }\n    }\n  }\n  return map;\n}"}
{"ids": "25325", "raw_code": "public static void queueBitmap(String key,Bitmap bmp){\n  mBitmapQueue.put(key,bmp);\n}"}
{"ids": "3400", "raw_code": "public void addListener(AfterServerStartListener listener){\n  _afterStartListeners.add(listener);\n}"}
{"ids": "46833", "raw_code": "public RelationNotification(String notifType,Object sourceObj,long sequence,long timeStamp,String message,String id,String typeName,ObjectName objectName,List<ObjectName> unregMBeanList) throws IllegalArgumentException {\n  super(notifType,sourceObj,sequence,timeStamp,message);\n  if (!isValidBasicStrict(notifType,sourceObj,id,typeName) || !isValidCreate(notifType)) {\n    throw new IllegalArgumentException(\"Invalid parameter.\");\n  }\n  relationId=id;\n  relationTypeName=typeName;\n  relationObjName=safeGetObjectName(objectName);\n  unregisterMBeanList=safeGetObjectNameList(unregMBeanList);\n}"}
{"ids": "37772", "raw_code": "protected double entropy(double[][] dataZs,double[][] dataWs){\n  double entropy=0.0;\n  int numInstances=dataZs.length;\n  for (int j=0; j < m_numClasses; j++) {\n    double m=0.0;\n    double sum=0.0;\n    for (int i=0; i < numInstances; i++) {\n      m+=dataZs[i][j] * dataWs[i][j];\n      sum+=dataWs[i][j];\n    }\n    m/=sum;\n    for (int i=0; i < numInstances; i++) {\n      entropy+=dataWs[i][j] * Math.pow(dataZs[i][j] - m,2);\n    }\n  }\n  return entropy;\n}"}
{"ids": "84680", "raw_code": "protected void writeDistribution(Parameter parameter,boolean isRef,XMLWriter writer){\nswitch (parameter.priorType) {\ncase UNIFORM_PRIOR:\n    String id=parameter.taxaId + \"-uniformDist\";\n  if (isRef) {\n    writer.writeIDref(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,id);\n  }\n else {\n    writer.writeOpenTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,id)});\n    writer.writeOpenTag(UniformDistributionModelParser.LOWER);\n    writer.writeText(Double.toString(parameter.uniformLower));\n    writer.writeCloseTag(UniformDistributionModelParser.LOWER);\n    writer.writeOpenTag(UniformDistributionModelParser.UPPER);\n    writer.writeText(Double.toString(parameter.uniformUpper));\n    writer.writeCloseTag(UniformDistributionModelParser.UPPER);\n    writer.writeCloseTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL);\n  }\nbreak;\ncase EXPONENTIAL_PRIOR:\nwriter.writeOpenTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);\nwriter.writeOpenTag(DistributionModelParser.MEAN);\nwriter.writeText(Double.toString(parameter.mean));\nwriter.writeCloseTag(DistributionModelParser.MEAN);\nwriter.writeOpenTag(DistributionModelParser.OFFSET);\nwriter.writeText(Double.toString(parameter.offset));\nwriter.writeCloseTag(DistributionModelParser.OFFSET);\nwriter.writeCloseTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);\nbreak;\ncase NORMAL_PRIOR:\nwriter.writeOpenTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL);\nwriter.writeOpenTag(NormalDistributionModelParser.MEAN);\nwriter.writeText(Double.toString(parameter.mean));\nwriter.writeCloseTag(NormalDistributionModelParser.MEAN);\nwriter.writeOpenTag(NormalDistributionModelParser.STDEV);\nwriter.writeText(Double.toString(parameter.stdev));\nwriter.writeCloseTag(NormalDistributionModelParser.STDEV);\nwriter.writeCloseTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL);\nbreak;\ncase LOGNORMAL_PRIOR:\nwriter.writeOpenTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<Boolean>(LogNormalDistributionModelParser.MEAN_IN_REAL_SPACE,parameter.isMeanInRealSpace()),new Attribute.Default<Boolean>(LogNormalDistributionModelParser.STDEV_IN_REAL_SPACE,parameter.isMeanInRealSpace())});\nwriter.writeOpenTag(LogNormalDistributionModelParser.MEAN);\nwriter.writeText(Double.toString(parameter.mean));\nwriter.writeCloseTag(LogNormalDistributionModelParser.MEAN);\nwriter.writeOpenTag(LogNormalDistributionModelParser.STDEV);\nwriter.writeText(Double.toString(parameter.stdev));\nwriter.writeCloseTag(LogNormalDistributionModelParser.STDEV);\nwriter.writeOpenTag(LogNormalDistributionModelParser.OFFSET);\nwriter.writeText(Double.toString(parameter.offset));\nwriter.writeCloseTag(LogNormalDistributionModelParser.OFFSET);\nwriter.writeCloseTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL);\nbreak;\ncase GAMMA_PRIOR:\nwriter.writeOpenTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);\nwriter.writeOpenTag(DistributionModelParser.SHAPE);\nwriter.writeText(Double.toString(parameter.shape));\nwriter.writeCloseTag(DistributionModelParser.SHAPE);\nwriter.writeOpenTag(DistributionModelParser.SCALE);\nwriter.writeText(Double.toString(parameter.scale));\nwriter.writeCloseTag(DistributionModelParser.SCALE);\nwriter.writeOpenTag(DistributionModelParser.OFFSET);\nwriter.writeText(Double.toString(parameter.offset));\nwriter.writeCloseTag(DistributionModelParser.OFFSET);\nwriter.writeCloseTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);\nbreak;\ndefault :\nthrow new IllegalArgumentException(\"Unknown Distribution Model for \" + parameter.getName());\n}\n}"}
{"ids": "38550", "raw_code": "public void saveWorkingInstancesToFileQ(){\n  if (m_IOThread == null) {\n    m_FileChooser.setCapabilitiesFilter(m_FilterEditor.getCapabilitiesFilter());\n    m_FileChooser.setAcceptAllFileFilterUsed(false);\n    int returnVal=m_FileChooser.showSaveDialog(this);\n    if (returnVal == JFileChooser.APPROVE_OPTION) {\n      Instances inst=new Instances(m_Instances);\n      inst.setClassIndex(m_AttVisualizePanel.getColoringIndex());\n      saveInstancesToFile(m_FileChooser.getSaver(),inst);\n    }\n    FileFilter temp=m_FileChooser.getFileFilter();\n    m_FileChooser.setAcceptAllFileFilterUsed(true);\n    m_FileChooser.setFileFilter(temp);\n  }\n else {\n    JOptionPane.showMessageDialog(this,\"Can't save at this time,\\n\" + \"currently busy with other IO\",\"Save Instances\",JOptionPane.WARNING_MESSAGE);\n  }\n}"}
{"ids": "60436", "raw_code": "private boolean adjustIndent(){\n  AlignmentImpl alignment=CoreFormatterUtil.getAlignment(myCurrentBlock);\n  WhiteSpace whiteSpace=myCurrentBlock.getWhiteSpace();\n  if (alignment == null || myAlignmentsToSkip.contains(alignment)) {\n    if (whiteSpace.containsLineFeeds()) {\n      adjustSpacingByIndentOffset();\n    }\n else {\n      whiteSpace.arrangeSpaces(myCurrentBlock.getSpaceProperty());\n    }\n    return true;\n  }\n  BlockAlignmentProcessor alignmentProcessor=ALIGNMENT_PROCESSORS.get(alignment.getAnchor());\n  if (alignmentProcessor == null) {\n    LOG.error(String.format(\"Can't find alignment processor for alignment anchor %s\",alignment.getAnchor()));\n    return true;\n  }\n  BlockAlignmentProcessor.Context context=new BlockAlignmentProcessor.Context(myDocument,alignment,myCurrentBlock,myAlignmentMappings,myBackwardShiftedAlignedBlocks,getIndentOptionsToUse(myCurrentBlock,myDefaultIndentOption),myRightMargin);\n  BlockAlignmentProcessor.Result result=alignmentProcessor.applyAlignment(context);\n  final LeafBlockWrapper offsetResponsibleBlock=alignment.getOffsetRespBlockBefore(myCurrentBlock);\nswitch (result) {\ncase TARGET_BLOCK_PROCESSED_NOT_ALIGNED:\n    return true;\ncase TARGET_BLOCK_ALIGNED:\n  storeAlignmentMapping();\nreturn true;\ncase BACKWARD_BLOCK_ALIGNED:\nif (offsetResponsibleBlock == null) {\nreturn true;\n}\nSet<LeafBlockWrapper> blocksCausedRealignment=new HashSet<LeafBlockWrapper>();\nmyBackwardShiftedAlignedBlocks.clear();\nmyBackwardShiftedAlignedBlocks.put(offsetResponsibleBlock,blocksCausedRealignment);\nblocksCausedRealignment.add(myCurrentBlock);\nstoreAlignmentMapping(myCurrentBlock,offsetResponsibleBlock);\nmyCurrentBlock=offsetResponsibleBlock.getNextBlock();\nonCurrentLineChanged();\nreturn false;\ncase RECURSION_DETECTED:\nmyCurrentBlock=offsetResponsibleBlock;\ncase UNABLE_TO_ALIGN_BACKWARD_BLOCK:\nmyAlignmentsToSkip.add(alignment);\nreturn false;\ndefault :\nreturn true;\n}\n}"}
{"ids": "33934", "raw_code": "@Override public void appendCode(Type declaringType,TypeTuple inputTypes,Type outputType,List<Variable> inputVars,StringBuilder b){\n  b.append(field.toCode(declaringType,inputVars));\n}"}
{"ids": "61994", "raw_code": "public ForwardPlanner(DialogueSystem system){\n  this.system=system;\n}"}
{"ids": "44853", "raw_code": "private JButton addButton(String text,Container container,float alignment){\n  JButton button=new JButton(text);\n  button.setAlignmentX(alignment);\n  container.add(button);\n  return button;\n}"}
{"ids": "46578", "raw_code": "private boolean noMatchForTagInAttributes(AttributeSet attr,HTML.Tag t,Object tagValue){\n  if (attr != null && attr.isDefined(t)) {\n    Object newValue=attr.getAttribute(t);\n    if ((tagValue == null) ? (newValue == null) : (newValue != null && tagValue.equals(newValue))) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "56825", "raw_code": "public String businessObjectDataKeyToString(BusinessObjectDataKey businessObjectDataKey){\n  if (businessObjectDataKey == null) {\n    return null;\n  }\n  return businessObjectDataKeyToString(businessObjectDataKey.getNamespace(),businessObjectDataKey.getBusinessObjectDefinitionName(),businessObjectDataKey.getBusinessObjectFormatUsage(),businessObjectDataKey.getBusinessObjectFormatFileType(),businessObjectDataKey.getBusinessObjectFormatVersion(),businessObjectDataKey.getPartitionValue(),businessObjectDataKey.getSubPartitionValues(),businessObjectDataKey.getBusinessObjectDataVersion());\n}"}
{"ids": "41492", "raw_code": "private Usage createTalkUsage(Context context){\n  if (talkUsage != null) {\n    return talkUsage;\n  }\n  TypeToken<List<Usage>> token=new TypeToken<List<Usage>>(){\n  }\n;\n  List<Usage> initTalkIO=JsonUtils.parseJsonFile(context,\"talk_io.json\",token);\n  talkUsage=initTalkIO.get(0);\n  return talkUsage;\n}"}
{"ids": "60288", "raw_code": "@Nullable public GrCall enclosingCall(String name,GdslMembersHolderConsumer consumer){\n  final PsiElement place=consumer.getPlace();\n  if (place == null)   return null;\n  GrCall call=PsiTreeUtil.getParentOfType(place,GrCall.class,true);\n  if (call == null)   return null;\n  while (call != null && !name.equals(getInvokedMethodName(call))) {\n    call=PsiTreeUtil.getParentOfType(call,GrCall.class,true);\n  }\n  if (call == null)   return null;\n  final GrArgumentList argumentList=call.getArgumentList();\n  if (argumentList != null) {\n    for (    GrExpression arg : argumentList.getExpressionArguments()) {\n      if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) {\n        return call;\n      }\n    }\n  }\n  if (call instanceof GrMethodCallExpression) {\n    for (    GrExpression arg : call.getClosureArguments()) {\n      if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) {\n        return call;\n      }\n    }\n  }\n  return null;\n}"}
{"ids": "22174", "raw_code": "public static void genOvfenvIsoImage(String ovfenvPropKVStr,String isoFilePath){\n  byte[] bOvfenvPropKVStr=ovfenvPropKVStr.getBytes();\n  String propFilePath=\"/tmp/ovf-env.properties\";\n  File propFile=new File(propFilePath);\n  try {\n    FileUtils.writePlainFile(propFilePath,bOvfenvPropKVStr);\n  }\n catch (  Exception e1) {\n    propFile.delete();\n    log.error(\"Write to prop file failed with exception: {}\",e1.getMessage());\n    throw new IllegalStateException(\"Failed to generate ovfenv prop file.\");\n  }\n  try {\n    File isoFile=new File(isoFilePath);\n    String[] genISOImageCommand={GENISO_CMD,\"--label\",\"CDROM\",\"-f\",propFilePath,\"-o\",isoFilePath,\"ovf-env.properties\",\"4096\"};\n    Exec.Result result=Exec.sudo(CMD_TIMEOUT,genISOImageCommand);\n    if (!result.exitedNormally() || result.getExitValue() != 0) {\n      log.error(\"Generating ISO image failed with exit value: {}, error: {}\",result.getExitValue(),result.getStdError());\n      throw new IllegalStateException(\"Failed to generate ISO image.\");\n    }\n  }\n catch (  Exception e) {\n    throw e;\n  }\n finally {\n    propFile.delete();\n  }\n}"}
{"ids": "21021", "raw_code": "public static void createActionableEvent(DbClient dbClient,EventUtils.EventCode eventCode,URI tenant,String name,String description,String warning,DataObject resource,List<URI> affectedResources,String approveMethod,Object[] approveParameters){\n  createActionableEvent(dbClient,eventCode,tenant,name,description,warning,resource,affectedResources,approveMethod,approveParameters,null,null);\n}"}
{"ids": "85338", "raw_code": "public Rational(ByteProvider byteProvider) throws IOException {\n  MXFPropertyPopulator.populateField(byteProvider,this,\"numerator\");\n  MXFPropertyPopulator.populateField(byteProvider,this,\"denominator\");\n}"}
{"ids": "46854", "raw_code": "public synchronized void removeNotifications(String type) throws InstanceNotFoundException {\n  Vector<Integer> v=getNotificationIDs(type);\n  if (v.isEmpty())   throw new InstanceNotFoundException(\"Timer notifications to remove not in the list of notifications\");\n  for (  Integer i : v)   removeNotification(i);\n}"}
{"ids": "70628", "raw_code": "private void unifyViaAtom(Atomic parentAtom){\n  Atomic childAtom=getRuleConclusionAtom();\n  Query parent=parentAtom.getParentQuery();\n  Map<String,String> unifiers=childAtom.getUnifiers(parentAtom);\n  head.unify(unifiers);\n  body.unify(unifiers);\n  Set<String> childFVs=body.getVarSet();\n  Set<String> parentBVs=parentAtom.getVarNames();\n  Set<String> parentVars=parent.getVarSet();\n  parentBVs.forEach(null);\n  childFVs.forEach(null);\n}"}
{"ids": "86167", "raw_code": "static void addUuid(SsfNode node,UUID uuid){\n  node.set(\"UUIDMost\",uuid.getMostSignificantBits());\n  node.set(\"UUIDLeast\",uuid.getLeastSignificantBits());\n}"}
{"ids": "86577", "raw_code": "public FluxConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){\n  int n=array.length;\n  @SuppressWarnings(\"unchecked\") Publisher<? extends T>[] newArray=new Publisher[n + 1];\n  System.arraycopy(array,0,newArray,1,n);\n  newArray[0]=source;\n  return new FluxConcatArray<>(delayError,newArray);\n}"}
{"ids": "40266", "raw_code": "public void shutdown(){\n  shutdownServerThread();\n  shutdownSessions();\n}"}
{"ids": "25996", "raw_code": "private boolean isLocalId(String localId){\n  if (!localId.startsWith(\"local_\")) {\n    return false;\n  }\n  for (int i=6; i < localId.length(); ++i) {\n    char c=localId.charAt(i);\n    if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f')) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"ids": "3568", "raw_code": "public ServerSocketBar bind(ServerSocketBar ss) throws ConfigException, IOException {\nsynchronized (_sslInitLock) {\n    if (_stdServerSocket != null)     throw new ConfigException(L.l(\"Can't create duplicte ssl factory.\"));\n    try {\n      initConfig();\n    }\n catch (    RuntimeException e) {\n      e.printStackTrace();\n      throw e;\n    }\n    _stdServerSocket=ss;\n    initSSL();\n    return this;\n  }\n}"}
{"ids": "51821", "raw_code": "private void resetOutputBuilders(){\n  ansi=Ansi.ansi();\n  stringBuilder=new StringBuilder();\n}"}
{"ids": "59379", "raw_code": "public String read(ByteBuffer buf,DictionaryCache dict){\n  StringBuilder out=new StringBuilder();\n  if (pre != null)   out.append(pre);\n  if (type == VOID)   return out.toString();\n  if (type == NULL) {\n    out.append(\"null\");\n    return out.toString();\n  }\n  if (type == BYTE) {\n    out.append(buf.get());\n    return out.toString();\n  }\n  if (type == SHORT) {\n    out.append(buf.getShort());\n    return out.toString();\n  }\n  if (type == INT) {\n    out.append(buf.getInt());\n    return out.toString();\n  }\n  if (type == LONG) {\n    out.append(buf.getLong());\n    return out.toString();\n  }\n  if (type == DOUBLE) {\n    out.append(buf.getDouble());\n    return out.toString();\n  }\n  if (type == BOOLEAN) {\n    out.append((buf.get() == 0 ? \"false\" : \"true\"));\n    return out.toString();\n  }\n  if (type == STRING) {\n    short pos=buf.getShort();\n    if (pos > -1) {\n      out.append(\"\\\"\");\n      out.append(dict.get(pos));\n      out.append(\"\\\"\");\n    }\n else {\n      int size=0;\n      int val=buf.get() & 0xFF;\n      while (val == 255) {\n        size+=val;\n        val=buf.get() & 0xFF;\n      }\n      size+=val;\n      byte[] data=new byte[size];\n      buf.get(data);\n      out.append(\"\\\"\");\n      out.append(new String(data,StandardCharsets.UTF_8));\n      out.append(\"\\\"\");\n    }\n    return out.toString();\n  }\n  return null;\n}"}
{"ids": "24092", "raw_code": "public void removeResourceListener(ResourceEventsListener listener){\n  resourceListeners.remove(listener);\n}"}
{"ids": "71989", "raw_code": "public String buildJavaVendor(){\n  return properties.getProperty(\"build.java.vendor\");\n}"}
{"ids": "47052", "raw_code": "final void treeify(Node<K,V>[] tab){\n  TreeNode<K,V> root=null;\n  for (TreeNode<K,V> x=this, next; x != null; x=next) {\n    next=(TreeNode<K,V>)x.next;\n    x.left=x.right=null;\n    if (root == null) {\n      x.parent=null;\n      x.red=false;\n      root=x;\n    }\n else {\n      K k=x.key;\n      int h=x.hash;\n      Class<?> kc=null;\n      for (TreeNode<K,V> p=root; ; ) {\n        int dir, ph;\n        K pk=p.key;\n        if ((ph=p.hash) > h)         dir=-1;\n else         if (ph < h)         dir=1;\n else         if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0)         dir=tieBreakOrder(k,pk);\n        TreeNode<K,V> xp=p;\n        if ((p=(dir <= 0) ? p.left : p.right) == null) {\n          x.parent=xp;\n          if (dir <= 0)           xp.left=x;\n else           xp.right=x;\n          root=balanceInsertion(root,x);\n          break;\n        }\n      }\n    }\n  }\n  moveRootToFront(tab,root);\n}"}
{"ids": "70392", "raw_code": "private void addCategoryToTree(DefaultMutableTreeNode node,String[] names){\n  if (names.length == 0) {\n    return;\n  }\n  boolean matched=false;\n  for (@SuppressWarnings(\"unchecked\") Enumeration<DefaultMutableTreeNode> e=node.children(); e.hasMoreElements(); ) {\n    DefaultMutableTreeNode childNode=e.nextElement();\n    String nodeName=(String)childNode.getUserObject();\n    if (nodeName.equals(names[0])) {\n      if (names.length > 1) {\n        addCategoryToTree(childNode,Arrays.copyOfRange(names,1,names.length));\n        matched=true;\n      }\n else {\n      }\n    }\n  }\n  if (!matched) {\n    DefaultMutableTreeNode root=node;\n    for (int i=0; i < names.length; i++) {\n      DefaultMutableTreeNode newNode=new DefaultMutableTreeNode(names[i]);\n      root.add(newNode);\n      root=newNode;\n    }\n  }\n}"}
{"ids": "53811", "raw_code": "private void editNote(int noteId){\n  hideSoftKeyboard();\n  Intent intent=new Intent(MainActivity.this,NoteActivity.class);\n  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\n  intent.putExtra(\"id\",String.valueOf(noteId));\n  startActivity(intent);\n}"}
{"ids": "33383", "raw_code": "public final Entry addEntry(Position inputPosition,Position outputPosition){\n  Entry entry=new Entry(inputPosition,outputPosition);\n  entries.add(entry);\n  return entry;\n}"}
{"ids": "75099", "raw_code": "public void unHideActionBar(View view){\n  if (toolbarAutoHider != null)   toolbarAutoHider.showComponent();\n}"}
{"ids": "53375", "raw_code": "public static String formatTimeDelta(long time,CharSequence sep){\n  final StringBuilder sb=new StringBuilder();\n  final Formatter fmt=new Formatter(sb);\n  for (int i=TIME_UNIT_SIZES.length - 1; i >= 0; --i) {\n    if (i == 0 && sb.length() > 4) {\n      continue;\n    }\n    if (sb.length() > 0) {\n      sb.append(sep);\n    }\n    final long acValue=time / TIME_UNIT_SIZES[i];\n    time=time % TIME_UNIT_SIZES[i];\n    if (!(acValue == 0 && sb.length() == 0)) {\n      fmt.format(\"%0\" + TIME_UNIT_DIGITS[i] + \"d%s\",Long.valueOf(acValue),TIME_UNIT_NAMES[i]);\n    }\n  }\n  fmt.close();\n  return sb.toString();\n}"}
{"ids": "71001", "raw_code": "public void run(){\n  Log.d(LOG,\"run(): sampleRate=\" + sampleRate + \", channels=\"+ channels+ \", bufferSizeInBytes=\"+ bufferSizeInBytes+ \" (\"+ bufferSizeInMs+ \" ms)\");\n  isPlaying=false;\n  AudioTrack atrack=null;\n  try {\n    atrack=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channels == 1 ? AudioFormat.CHANNEL_CONFIGURATION_MONO : AudioFormat.CHANNEL_CONFIGURATION_STEREO,AudioFormat.ENCODING_PCM_16BIT,bufferSizeInBytes,AudioTrack.MODE_STREAM);\n    atrack.setPlaybackPositionUpdateListener(this);\n    atrack.setPositionNotificationPeriod(msToSamples(200,sampleRate,channels));\n    if (playerCallback != null)     playerCallback.playerAudioTrackCreated(atrack);\n    this.audioTrack=atrack;\n  }\n catch (  Throwable t) {\n    Log.e(LOG,\"Cannot create AudioTrack: \" + t);\n    stop();\n    if (playerCallback != null)     playerCallback.playerException(t);\n  }\n  while (!stopped) {\n    int ln=acquireSamples();\n    if (stopped || ln == 0) {\n      releaseSamples();\n      break;\n    }\n    int writtenNow=0;\n    do {\n      if (writtenNow != 0) {\n        Log.d(LOG,\"too fast for playback, sleeping...\");\n        try {\n          Thread.sleep(50);\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      int written=atrack.write(lsamples,writtenNow,ln);\n      if (written < 0) {\n        Log.e(LOG,\"error in playback feed: \" + written);\n        stopped=true;\n        break;\n      }\n      writtenTotal+=written;\n      int buffered=writtenTotal - atrack.getPlaybackHeadPosition() * channels;\n      if (!stopped && !isPlaying) {\n        if (buffered * 2 >= bufferSizeInBytes) {\n          Log.d(LOG,\"start of AudioTrack - buffered \" + buffered + \" samples\");\n          atrack.play();\n          isPlaying=true;\n        }\n else {\n          Log.d(LOG,\"start buffer not filled enough - AudioTrack not started yet\");\n        }\n      }\n      writtenNow+=written;\n      ln-=written;\n    }\n while (ln > 0 && !stopped);\n    releaseSamples();\n  }\n  if (!stopped && stoppedByEOF)   waitForLastTone();\n  if (isPlaying)   atrack.pause();\n  atrack.flush();\n  atrack.release();\n  stopped=true;\n  Log.d(LOG,\"run() stopped.\");\n}"}
{"ids": "86639", "raw_code": "public static double[] deconvolve(final double[] p,final double rate){\n  final double[] r=Arrays.copyOf(p,p.length);\n  for (int k=0; k < p.length; k++) {\n    for (int j=0; j < p.length; j++) {\n      if (k + j < p.length) {\n        r[k + j]-=rate * p[k] * p[j];\n      }\n    }\n  }\n  double sum=0;\n  for (  final double q : r) {\n    sum+=q;\n  }\n  sum=1 / sum;\n  for (int k=0; k < r.length; k++) {\n    r[k]*=sum;\n  }\n  return r;\n}"}
{"ids": "46288", "raw_code": "private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {\n  s.defaultReadObject();\n  init(getName());\n}"}
{"ids": "7957", "raw_code": "public static double calculateColumnTotal(Values2D data,int column,int[] validRows){\n  ParamChecks.nullNotPermitted(data,\"data\");\n  double total=0.0;\n  int rowCount=data.getRowCount();\n  for (int v=0; v < validRows.length; v++) {\n    int row=validRows[v];\n    if (row < rowCount) {\n      Number n=data.getValue(row,column);\n      if (n != null) {\n        total+=n.doubleValue();\n      }\n    }\n  }\n  return total;\n}"}
{"ids": "29156", "raw_code": "public boolean openAnalysis(File f,SaveType saveType){\n  if (!f.exists() || !f.canRead()) {\n    throw new IllegalArgumentException(\"Can't read \" + f.getPath());\n  }\n  mainFrameLoadSaveHelper.prepareForFileLoad(f,saveType);\n  mainFrameLoadSaveHelper.loadAnalysis(f);\n  return true;\n}"}
{"ids": "84911", "raw_code": "protected void drawNormalMessage(DrawHandler drawHandler,PointDouble send,PointDouble receive,RelationDrawer.ArrowEndType arrowEndType,boolean fillArrow,DrawingInfo drawingInfo){\n  Line line=new Line(send,receive);\n  drawHandler.drawLine(line);\n  drawHandler.setLineType(LineType.SOLID);\n  RelationDrawer.drawArrowToLine(receive,drawHandler,line,false,arrowEndType,fillArrow,false);\n  double height=send.y - drawingInfo.getVerticalStart(sendTick);\n  double topLeftX;\n  AlignHorizontal hAlignment;\n  if (from == getFirstLifeline()) {\n    topLeftX=send.x;\n    hAlignment=AlignHorizontal.LEFT;\n  }\n else {\n    topLeftX=receive.x;\n    hAlignment=AlignHorizontal.RIGHT;\n  }\n  if (duration == 0) {\n    hAlignment=AlignHorizontal.CENTER;\n  }\n  topLeftX+=LIFELINE_TEXT_PADDING;\n  TextSplitter.drawText(drawHandler,textLines,topLeftX,send.y - height,Math.abs(send.x - receive.x) - LIFELINE_TEXT_PADDING * 2,height,hAlignment,AlignVertical.BOTTOM);\n}"}
{"ids": "73682", "raw_code": "private void killConsist(){\n  if (validLocoAdr(locoTextField1.getText()) < 0) {\n    return;\n  }\n  int locoAddr=getLocoAddr(locoTextField1,adrButton1);\n  sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_KILL_CONSIST,(byte)0);\n}"}
{"ids": "46102", "raw_code": "public ListenKey startListening() throws IOException {\n  return startListening(null,0);\n}"}
{"ids": "43535", "raw_code": "@Nonnull public static Set<Flag> parse(@Nonnegative final int bitmask){\n  Check.notNegative(bitmask,\"bitmask\");\n  final Set<Flag> flags=new HashSet<Flag>();\n  for (  final Flag flag : values()) {\n    if ((bitmask & flag.getNumber()) != 0) {\n      flags.add(flag);\n    }\n  }\n  return flags;\n}"}
{"ids": "46988", "raw_code": "@SuppressWarnings(\"fallthrough\") private void parse() throws SAXException, IOException {\n  init();\n  try {\n    mHandCont.setDocumentLocator(this);\n    mHandCont.startDocument();\n    if (mPh != PH_MISC_DTD) {\n      mPh=PH_MISC_DTD;\n    }\n    int evt=EV_NULL;\n    do {\n      wsskip();\nswitch (evt=step()) {\ncase EV_ELM:\ncase EV_ELMS:\n        mPh=PH_DOCELM;\n      break;\ncase EV_COMM:\ncase EV_PI:\n    break;\ncase EV_DTD:\n  if (mPh >= PH_DTD_MISC) {\n    panic(FAULT);\n  }\nmPh=PH_DTD_MISC;\nbreak;\ndefault :\npanic(FAULT);\n}\n}\n while (mPh < PH_DOCELM);\ndo {\nswitch (evt) {\ncase EV_ELM:\ncase EV_ELMS:\nif (mIsNSAware == true) {\nmHandCont.startElement(mElm.value,mElm.name,\"\",mAttrs);\n}\n else {\nmHandCont.startElement(\"\",\"\",mElm.name,mAttrs);\n}\nif (evt == EV_ELMS) {\nevt=step();\nbreak;\n}\ncase EV_ELME:\nif (mIsNSAware == true) {\nmHandCont.endElement(mElm.value,mElm.name,\"\");\n}\n else {\nmHandCont.endElement(\"\",\"\",mElm.name);\n}\nwhile (mPref.list == mElm) {\nmHandCont.endPrefixMapping(mPref.name);\nmPref=del(mPref);\n}\nmElm=del(mElm);\nif (mElm == null) {\nmPh=PH_DOCELM_MISC;\n}\n else {\nevt=step();\n}\nbreak;\ncase EV_TEXT:\ncase EV_WSPC:\ncase EV_CDAT:\ncase EV_COMM:\ncase EV_PI:\ncase EV_ENT:\nevt=step();\nbreak;\ndefault :\npanic(FAULT);\n}\n}\n while (mPh == PH_DOCELM);\ndo {\nif (wsskip() == EOS) {\nbreak;\n}\nswitch (step()) {\ncase EV_COMM:\ncase EV_PI:\nbreak;\ndefault :\npanic(FAULT);\n}\n}\n while (mPh == PH_DOCELM_MISC);\nmPh=PH_AFTER_DOC;\n}\n catch (SAXException saxe) {\nthrow saxe;\n}\ncatch (IOException ioe) {\nthrow ioe;\n}\ncatch (RuntimeException rte) {\nthrow rte;\n}\ncatch (Exception e) {\npanic(e.toString());\n}\n finally {\nmHandCont.endDocument();\ncleanup();\n}\n}"}
{"ids": "81134", "raw_code": "public void addMatchString(String matchString){\n  matchStrings.add(matchString);\n}"}
{"ids": "9015", "raw_code": "public String timeAgo(final long millis){\n  return time(System.currentTimeMillis() - millis);\n}"}
{"ids": "34044", "raw_code": "public static byte[] hexStringToByteArray(String input){\n  if ((input == null) || (input.length() % 2 != 0)) {\n    throw new IllegalArgumentException(\"The input must not be null and \" + \"shall have an even number of hexadecimal characters. Found: \" + input);\n  }\n  byte[] output=new byte[input.length() / 2];\n  for (int i=0; i < output.length; i++) {\n    output[i]=(byte)((Character.digit(input.charAt(i * 2),16) << 4) + Character.digit(input.charAt(i * 2 + 1),16));\n  }\n  return output;\n}"}
{"ids": "20394", "raw_code": "private boolean stopTrackingJob(JobStatus jobStatus){\n  boolean removed;\n  boolean rocking;\nsynchronized (mJobs) {\n    removed=mJobs.remove(jobStatus);\n    rocking=mReadyToRock;\n  }\n  if (removed && rocking) {\n    for (int i=0; i < mControllers.size(); i++) {\n      StateController controller=mControllers.get(i);\n      controller.maybeStopTrackingJob(jobStatus);\n    }\n  }\n  return removed;\n}"}
{"ids": "83341", "raw_code": "public double coefficientOfVariance(){\n  return Math.sqrt(variance()) / mean();\n}"}
{"ids": "60174", "raw_code": "public SkeletonVersionChecker(int defaultVersion){\n  myExplicitVersion=createTreeMap();\n  myDefaultVersion=defaultVersion;\n  load();\n}"}
{"ids": "14260", "raw_code": "@Override public AttributeSchemaImpl upgradeAttribute(AttributeSchemaImpl newAttr) throws UpgradeException {\n  return updateDefaultValues(newAttr,Collections.singleton(OLDEST_VERSION));\n}"}
{"ids": "62257", "raw_code": "public static String toDalvikName(String canonicalName){\n  final boolean isArray=(canonicalName.charAt(0) == '[');\n  if (isArray) {\n    return canonicalName.replace('.','/');\n  }\n else {\n    if (canonicalName.equals(\"char\"))     return \"C\";\n else     if (canonicalName.equals(\"int\"))     return \"I\";\n else     if (canonicalName.equals(\"byte\"))     return \"B\";\n else     if (canonicalName.equals(\"boolean\"))     return \"Z\";\n else     if (canonicalName.equals(\"float\"))     return \"F\";\n else     if (canonicalName.equals(\"double\"))     return \"D\";\n else     if (canonicalName.equals(\"short\"))     return \"S\";\n else     if (canonicalName.equals(\"long\"))     return \"J\";\n else     if (canonicalName.equals(\"void\"))     return \"V\";\n else     return \"L\" + canonicalName.replace('.','/') + \";\";\n  }\n}"}
{"ids": "23802", "raw_code": "public void unregisterClient(ClientProxyMembershipID proxyID,AcceptorImpl acceptor,boolean clientDisconnectedCleanly){\n  unregisterClient(proxyID);\n  if (acceptor != null) {\n    CacheClientNotifier ccn=acceptor.getCacheClientNotifier();\n    if (ccn != null) {\n      try {\n        ccn.unregisterClient(proxyID,clientDisconnectedCleanly);\n      }\n catch (      CancelException ignore) {\n      }\n    }\n  }\n}"}
{"ids": "75543", "raw_code": "private String doubleQuotesHandling(String resource){\n  return resource.replaceAll(\"\\\"\",Matcher.quoteReplacement(\"\\\\\\\"\"));\n}"}
{"ids": "26878", "raw_code": "public static int allocateNewContainer(ArrayList<Container> containers,Resource capacity,int paddingPercentage){\n  containers.add(new Container(capacity,paddingPercentage));\n  return containers.size();\n}"}
{"ids": "8929", "raw_code": "protected String doWaitForPath(String filePath){\n  String path=null;\n  long waitTimeMillis=0;\n  assertTrue(\"OBB \" + filePath + \" is not currently mounted!\",mSm.isObbMounted(filePath));\n  while (path == null) {\n    try {\n      Thread.sleep(WAIT_TIME_INCR);\n      waitTimeMillis+=WAIT_TIME_INCR;\n      if (waitTimeMillis > MAX_WAIT_TIME) {\n        fail(\"Timed out waiting to get path of OBB file \" + filePath);\n      }\n    }\n catch (    InterruptedException e) {\n    }\n    path=mSm.getMountedObbPath(filePath);\n  }\n  Log.i(LOG_TAG,\"Got OBB path: \" + path);\n  return path;\n}"}
{"ids": "21929", "raw_code": "@Override protected boolean isZoneLevelResource(){\n  return false;\n}"}
{"ids": "19796", "raw_code": "private void validateMessage(String expectedType,String type,long returnCode,String service,String payload) throws ReplicatorException {\n  if (!type.equals(expectedType)) {\n    throw new ReplicatorException(\"Server should have returned message of type \\\"\" + Protocol.TYPE_FILTERED + \"\\\", but returned \\\"\"+ type+ \"\\\" instead\");\n  }\n else   if (returnCode != 0) {\n    throw new ReplicatorException(\"Server returned a non-zero code (\" + returnCode + \"), payload: \"+ payload);\n  }\n else   if (!service.equals(messageGenerator.getService())) {\n    throw new ReplicatorException(\"Server returned unexpected service name in the message: received \\\"\" + service + \"\\\", but expected \\\"\"+ messageGenerator.getService()+ \"\\\"\");\n  }\n}"}
{"ids": "66569", "raw_code": "private void closeDatabases(){\n  s_logger.log(Level.INFO,\"\");\n  s_logger.log(Level.INFO,\"migrateCloseDatabases\");\n  m_source.close();\n  m_target.close();\n  m_source.reset();\n  m_source=null;\n  m_target.reset();\n  m_target=null;\n  m_direction=null;\n  m_objectType=null;\n  m_objectTypes=null;\n  m_sourceMap=null;\n  m_targetMap=null;\n  m_objectList=new ArrayList<String>();\n  m_trackingList=new ArrayList<String>();\n  m_tempIndexes=null;\n  m_counterPrg=null;\n  m_counterDrp=null;\n  m_counterUpd=null;\n  m_counterAdd=null;\n  m_totalPrg=null;\n  m_totalDrp=null;\n  m_totalUpd=null;\n  m_totalAdd=null;\n  m_detailType=null;\n  m_detailTypes=null;\n  m_detailCounterDrp=null;\n  m_detailCounterUpd=null;\n  m_detailCounterAdd=null;\n  System.gc();\n}"}
{"ids": "64510", "raw_code": "public static byte[] MD5(final byte[] message,final int offset,final int length){\n  MessageDigest digest;\n  try {\n    digest=MessageDigest.getInstance(\"MD5\");\n    digest.update(message,offset,length);\n    final byte[] md5=digest.digest();\n    return md5;\n  }\n catch (  final NoSuchAlgorithmException e) {\n    if (Cfg.EXCEPTION) {\n      Check.log(e);\n    }\n  }\n  return null;\n}"}
{"ids": "69407", "raw_code": "private int runMetastoreCompareJob(Optional<Path> inputTableListPath,Path outputPath) throws InterruptedException, IOException, ClassNotFoundException, TemplateRenderException {\n  LOG.info(\"Starting job for step 1...\");\n  int result;\n  if (inputTableListPath.isPresent()) {\n    result=runMetastoreCompareJobWithTextInput(inputTableListPath.get(),outputPath);\n  }\n else {\n    result=runMetastoreCompareJob(outputPath);\n  }\n  if (result == 0) {\n    LOG.info(\"Job for step 1 finished successfully! To view logging data, run the following \" + \"commands in Hive: \\n\\n\" + VelocityUtils.renderTemplate(STEP1_HQL_TEMPLATE,velocityContext));\n  }\n  return result;\n}"}
{"ids": "14983", "raw_code": "public void deleteSubPeopleContainers(Set peopleContainers) throws AMException, SSOException {\n  Iterator iter=peopleContainers.iterator();\n  while (iter.hasNext()) {\n    String peopleContainerDN=(String)iter.next();\n    AMPeopleContainer peopleContainer=new AMPeopleContainerImpl(super.token,peopleContainerDN);\n    peopleContainer.delete();\n  }\n}"}
{"ids": "80749", "raw_code": "private void addErrorMessage(String message){\n  if (message != null) {\n    m_errorMessages.append(message);\n  }\n  m_errorMessages.append(\"\\r\\n\");\n}"}
{"ids": "59979", "raw_code": "public void write(String key,byte[] newValue) throws Exception {\n  Map<String,byte[]> entry=new HashMap<>();\n  entry.put(key,newValue);\n  write(entry);\n}"}
{"ids": "83141", "raw_code": "private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){\n  boolean bothLinksHaveSameLinkStats=true;\n  if (linkA.getFreespeed() != linkB.getFreespeed()) {\n    bothLinksHaveSameLinkStats=false;\n  }\n  if (linkA.getCapacity() != linkB.getCapacity()) {\n    bothLinksHaveSameLinkStats=false;\n  }\n  return bothLinksHaveSameLinkStats;\n}"}
{"ids": "1745", "raw_code": "public String generateSanitizedId(){\n  String result=generateId();\n  result=result.replace(':','-');\n  result=result.replace('_','-');\n  result=result.replace('.','-');\n  return result;\n}"}
{"ids": "42859", "raw_code": "private Object parseElement(Node element) throws XmlParseException {\n  try {\n    return parseElementRaw(element);\n  }\n catch (  Exception e) {\n    throw new XmlParseException(\"Failed to parse: \" + element.getNodeName(),e);\n  }\n}"}
{"ids": "8637", "raw_code": "public static String format(Money money){\n  long microAmount=0;\n  if (money != null) {\n    microAmount=money.getMicroAmount();\n  }\n else {\n    return PLACEHOLDER_NULL;\n  }\n  double amount=(double)microAmount / MICRO_UNITS;\n  return String.format(FORMAT_MONEY,amount);\n}"}
{"ids": "59900", "raw_code": "public void logWarning(String message){\n  logger.warning(logPrefix + message);\n}"}
{"ids": "63862", "raw_code": "public static String readAsString(InputStream is) throws IOException {\n  StringBuffer buf=new StringBuffer();\n  byte[] b=new byte[8192];\n  int nread=-1;\n  while ((nread=is.read(b)) >= 0) {\n    String s=new String(b,0,nread);\n    buf.append(s);\n  }\n  return buf.toString();\n}"}
{"ids": "69951", "raw_code": "public static synchronized void unregisterTransactionServicePlugin(TransactionServicePlugin l){\n  if (service_ != null) {\n    service_.removeTSListener(l);\n  }\n  tsListenersList_.remove(l);\n}"}
{"ids": "38408", "raw_code": "protected static void isort(int level[],float BC[]){\n  float temp;\n  int temp2;\n  for (int i=0; i < BC.length - 1; i++) {\n    int j=i;\n    temp=BC[j + 1];\n    temp2=level[j + 1];\n    if (temp == 0) {\n      continue;\n    }\n    int prej=j + 1;\n    while (j > -1 && (temp < BC[j] || BC[j] == 0)) {\n      if (BC[j] == 0) {\n        j--;\n        continue;\n      }\n else {\n        BC[prej]=BC[j];\n        level[prej]=level[j];\n        prej=j;\n        j--;\n      }\n    }\n    BC[prej]=temp;\n    level[prej]=temp2;\n  }\n}"}
{"ids": "11416", "raw_code": "public void findAndInit(Object someObj){\n  if (someObj instanceof com.bbn.openmap.MapBean) {\n    logger.fine(\"ProjectionStack found a MapBean.\");\n    setMapBean((MapBean)someObj);\n  }\n}"}
{"ids": "81950", "raw_code": "public void removeAllLayers(){\n  _layers.removeAllElements();\n  refreshLayers=true;\n  super.repaint();\n}"}
{"ids": "11212", "raw_code": "private void writeObject(ObjectOutputStream oos) throws IOException {\n  oos.defaultWriteObject();\n  writeStroke(oos,stroke,OMGraphicAdapter.BASIC_STROKE);\n  writeTextureMask(oos,textureMask);\n}"}
{"ids": "35214", "raw_code": "public ReflectiveAttribute(Class<O> objectType,Class<A> fieldType,String fieldName){\n  super(objectType,fieldType,fieldName);\n  Field field;\n  try {\n    field=getField(objectType,fieldName);\n    if (!field.isAccessible()) {\n      field.setAccessible(true);\n    }\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(\"Invalid attribute definition: No such field '\" + fieldName + \"' in object '\"+ objectType.getName()+ \"'\");\n  }\n  if (!fieldType.isAssignableFrom(field.getType())) {\n    throw new IllegalStateException(\"Invalid attribute definition: The type of field '\" + fieldName + \"', type '\"+ field.getType()+ \"', in object '\"+ objectType.getName()+ \"', is not assignable to the type indicated: \"+ fieldType.getName());\n  }\n  this.field=field;\n}"}
{"ids": "55606", "raw_code": "private void processEvent(EventLogControl check,final String name,final DTNHost host1,final DTNHost host2,final Message message){\n  String descString;\n  if (!check.showEvent()) {\n    return;\n  }\n  descString=name + \" \" + (host1 != null ? host1 : \"\")+ (host2 != null ? (HOST_DELIM + host2) : \"\")+ (message != null ? \" \" + message : \"\");\n  if (regExp != null && !descString.matches(regExp)) {\n    return;\n  }\n  if (check.pauseOnEvent()) {\n    gui.setPaused(true);\n    if (host1 != null) {\n      gui.setFocus(host1);\n    }\n  }\n  addEvent(name,host1,host2,message,check.pauseOnEvent());\n}"}
{"ids": "24114", "raw_code": "public boolean removeMembershipListener(MembershipListener listener){\n  return membershipListeners.remove(listener) != null;\n}"}
{"ids": "33461", "raw_code": "public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){\n  ContentValues values=new ContentValues(7);\n  values.put(ADDRESS,address);\n  if (date != null) {\n    values.put(DATE,date);\n  }\n  values.put(READ,read ? Integer.valueOf(1) : Integer.valueOf(0));\n  values.put(SUBJECT,subject);\n  values.put(BODY,body);\n  if (deliveryReport) {\n    values.put(STATUS,STATUS_PENDING);\n  }\n  if (threadId != -1L) {\n    values.put(THREAD_ID,threadId);\n  }\n  return resolver.insert(uri,values);\n}"}
{"ids": "8272", "raw_code": "public static Calendar next(Calendar self){\n  Calendar result=(Calendar)self.clone();\n  result.add(Calendar.DAY_OF_YEAR,1);\n  return result;\n}"}
{"ids": "65407", "raw_code": "protected void angularObjectClientBind(NotebookSocket conn,HashSet<String> userAndRoles,Notebook notebook,Message fromMessage) throws Exception {\n  String noteId=fromMessage.getType(\"noteId\");\n  String varName=fromMessage.getType(\"name\");\n  Object varValue=fromMessage.get(\"value\");\n  String paragraphId=fromMessage.getType(\"paragraphId\");\n  Note note=notebook.getNote(noteId);\n  if (paragraphId == null) {\n    throw new IllegalArgumentException(\"target paragraph not specified for \" + \"angular value bind\");\n  }\n  if (note != null) {\n    final InterpreterGroup interpreterGroup=findInterpreterGroupForParagraph(note,paragraphId);\n    final AngularObjectRegistry registry=interpreterGroup.getAngularObjectRegistry();\n    if (registry instanceof RemoteAngularObjectRegistry) {\n      RemoteAngularObjectRegistry remoteRegistry=(RemoteAngularObjectRegistry)registry;\n      pushAngularObjectToRemoteRegistry(noteId,paragraphId,varName,varValue,remoteRegistry,interpreterGroup.getId(),conn);\n    }\n else {\n      pushAngularObjectToLocalRepo(noteId,paragraphId,varName,varValue,registry,interpreterGroup.getId(),conn);\n    }\n  }\n}"}
{"ids": "37197", "raw_code": "public CProjectTree(final JFrame parent,final CDatabaseManager databaseManager){\n  Preconditions.checkNotNull(databaseManager,\"IE01840: Database manager object can't be null\");\n  m_treeModel=new CProjectTreeModel(this);\n  setModel(m_treeModel);\n  CProjectTreeDragHandlerInitializer.initialize(parent,this,databaseManager);\n  addMouseListener(new InternalMouseListener());\n  setScrollsOnExpand(false);\n  setRootVisible(false);\n  m_rootNode=new CRootNode(this,databaseManager);\n  m_treeModel.setRoot(m_rootNode);\n  setCellRenderer(new IconNodeRenderer());\n  m_popup.add(CActionProxy.proxy(new CAddDatabaseAction(this)));\n}"}
{"ids": "80025", "raw_code": "public boolean isObject(){\n  return typeString.startsWith(OBJECT);\n}"}
{"ids": "55223", "raw_code": "private void autoRequestMods(){\n  if (!c.autoRequestModsEnabled()) {\n    return;\n  }\n  Set<String> joinedChannels=c.getJoinedChannels();\n  for (  String channel : joinedChannels) {\n    if (!modsAlreadyRequested.contains(channel)) {\n      LOGGER.info(\"Auto-requesting mods for \" + channel);\n      modsAlreadyRequested.add(channel);\n      requestModsSilent(channel);\n      return;\n    }\n  }\n}"}
{"ids": "65710", "raw_code": "public void buildDepreciation(){\n  if (!isDepreciated()) {\n    return;\n  }\n  StringBuffer sb=new StringBuffer();\n  load(get_TrxName());\n  MAssetAcct assetacct=getA_AssetAcct(null,get_TrxName());\n  MDepreciation depreciation_C=MDepreciation.get(getCtx(),assetacct.getA_Depreciation_ID());\n  MDepreciation depreciation_F=MDepreciation.get(getCtx(),assetacct.getA_Depreciation_F_ID());\n  int offset_C=0, offset_F=0;\n  BigDecimal assetCost=getActualCost();\n  BigDecimal accumDep_C=getA_Accumulated_Depr(false);\n  BigDecimal accumDep_F=getA_Accumulated_Depr(true);\n  int lifePeriods_C=getUseLifeMonths(false) + offset_C;\n  int lifePeriods_F=getUseLifeMonths(true) + offset_F;\n  int lifePeriods=(lifePeriods_C > lifePeriods_F ? lifePeriods_C : lifePeriods_F);\n  BigDecimal exp_C=Env.ZERO;\n  BigDecimal exp_F=Env.ZERO;\n  if (CLogMgt.isLevelFine()) {\n    sb.append(\"currentPeriod=\" + getA_Current_Period() + \", AssetServiceDate=\"+ getAssetDepreciationDate()+ \"\\n\");\n    sb.append(\"offset: C|F=\" + offset_C + \"|\"+ offset_F+ \"\\n\");\n    sb.append(\"life: C|F=\" + lifePeriods_C + \"|\"+ lifePeriods_F+ \" + offset =\"+ lifePeriods+ \"\\n\");\n  }\n  truncDepreciation();\n  int A_Current_Period=getA_Current_Period();\n  for (int currentPeriod=A_Current_Period, cnt=1; currentPeriod <= lifePeriods; currentPeriod++, cnt++) {\n    exp_C=Env.ZERO;\n    exp_F=Env.ZERO;\n    String help=\"\" + accumDep_C + \"|\"+ accumDep_F+ \" + \";\n    if (lifePeriods_C > currentPeriod || !depreciation_C.requireLastPeriodAdjustment()) {\n      setFiscal(false);\n      exp_C=depreciation_C.invoke(this,assetacct,currentPeriod,accumDep_C);\n      accumDep_C=accumDep_C.add(exp_C);\n    }\n else     if (lifePeriods_C == currentPeriod) {\n      exp_C=assetCost.subtract(accumDep_C);\n      accumDep_C=assetCost;\n    }\n    if (lifePeriods_F > currentPeriod || !depreciation_F.requireLastPeriodAdjustment()) {\n      setFiscal(true);\n      exp_F=depreciation_F.invoke(this,assetacct,currentPeriod,accumDep_F);\n      accumDep_F=accumDep_F.add(exp_F);\n    }\n else     if (lifePeriods_F == currentPeriod) {\n      exp_F=assetCost.subtract(accumDep_F);\n      accumDep_F=assetCost;\n    }\n    help+=\"\" + exp_C + \"|\"+ exp_F+ \" = \"+ accumDep_C+ \"|\"+ accumDep_F;\n    int months=0;\n    months=months + (currentPeriod - A_Current_Period);\n    Timestamp dateAcct=TimeUtil.getMonthLastDay(TimeUtil.addMonths(getDateAcct(),months));\n    MDepreciationExp.createDepreciation(this,currentPeriod,dateAcct,exp_C,exp_F,accumDep_C,accumDep_F,help,get_TrxName());\n    if (CLogMgt.isLevelFine()) {\n      String info=\"\" + cnt + \": period=\"+ currentPeriod+ \"/\"+ lifePeriods_C+ \"|\"+ lifePeriods_F+ \", exp=\"+ exp_C+ \"|\"+ exp_F+ \", accumDep=\"+ accumDep_C+ \"|\"+ accumDep_F+ \", DateAcct=\"+ dateAcct;\n      log.fine(\"=> \" + info + Env.NL+ Env.NL);\n      sb.append(info + Env.NL);\n    }\n  }\n  log.fine(sb.toString());\n  m_buildDepreciation=false;\n}"}
{"ids": "1659", "raw_code": "public synchronized void renameFile(JDBCSequentialFile file,String newFileName) throws SQLException {\n  try {\n    connection.setAutoCommit(false);\n    renameFile.setString(1,newFileName);\n    renameFile.setInt(2,file.getId());\n    renameFile.executeUpdate();\n    connection.commit();\n  }\n catch (  SQLException e) {\n    connection.rollback();\n    throw e;\n  }\n}"}
{"ids": "8576", "raw_code": "public static void handleErrorViolations(Formatter formatter,long numErrors){\n  ExitCode exitCode=formatter.getExitStatus(numErrors);\n  if (exitCode != ExitCode.SUCCESS) {\n    System.exit(exitCode.ordinal());\n  }\n}"}
{"ids": "73190", "raw_code": "public void remove(final Sensor sensor){\n  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);\n  boolean rv=selection.remove(sensor);\n  if (rv) {\n    fireSelectionChanged(oldSelection,selection);\n  }\n}"}
{"ids": "53615", "raw_code": "protected void printWay(MapWay way,DefaultEntityViewInfo pInfo,boolean asArea){\n  List<MapNode> nodes=getWayNodes(way);\n  if (nodes != null) {\n    boolean asOneway=false;\n    NameInfo textInfo=null;\n    if (scale >= pInfo.minNameScale * displayFactor) {\n      asOneway=way.isOneway();\n      if (way.getName() != null && pInfo.nameColor != null) {\n        textInfo=new NameInfo(way.getName(),pInfo.nameColor,pInfo.printOrder);\n      }\n    }\n    printLine(imageBdr,nodes,pInfo,asArea,asOneway,textInfo);\n  }\n}"}
{"ids": "17308", "raw_code": "public Element fullPath(ManagedObjectReference obj) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg, FinderException {\n  List<ObjectContent> set=ancestrySet(obj);\n  Map<MoRef,Element> childToParent=new HashMap<>();\n  for (  ObjectContent cont : set) {\n    MoRef key=new MoRef(cont.getObj());\n    ManagedObjectReference parentRef=getParent(cont);\n    Element parent;\n    if (parentRef != null) {\n      parent=Element.make(parentRef,getName(cont));\n    }\n else {\n      parent=Element.make(cont.getObj(),getName(cont));\n    }\n    childToParent.put(key,parent);\n  }\n  MoRef next=new MoRef(obj);\n  List<String> path=new ArrayList<>();\n  while (true) {\n    Element parent=childToParent.get(next);\n    path.add(parent.path);\n    if (next.equals(new MoRef(parent.object))) {\n      break;\n    }\n    next=new MoRef(parent.object);\n  }\n  Collections.reverse(path);\n  StringBuilder sb=new StringBuilder();\n  for (  String s : path) {\n    sb.append('/');\n    sb.append(s);\n  }\n  return Element.make(obj,sb.toString());\n}"}
{"ids": "73410", "raw_code": "private boolean noObjectWasClickedOn(){\n  boolean pickedNodeNull=(pickedNode == null);\n  boolean cameraPicked=(pickedNode instanceof PCamera);\n  return (pickedNodeNull || cameraPicked);\n}"}
{"ids": "32800", "raw_code": "@Override public int hashCode(){\n  throw new UnsupportedOperationException(\"hashCode() is not supported because sets are mutable\");\n}"}
{"ids": "8547", "raw_code": "public Builder measurementMappings(Map<String,String> measurementMappings){\n  Map<String,Pattern> mappingsByPattern=new HashMap<String,Pattern>();\n  for (  Map.Entry<String,String> entry : measurementMappings.entrySet()) {\n    try {\n      final Pattern pattern=Pattern.compile(entry.getValue());\n      mappingsByPattern.put(entry.getKey(),pattern);\n    }\n catch (    PatternSyntaxException e) {\n      throw new RuntimeException(\"Could not compile regex: \" + entry.getValue(),e);\n    }\n  }\n  this.measurementMappings=mappingsByPattern;\n  return this;\n}"}
{"ids": "43889", "raw_code": "public static void extract(File zipFile,File destDir) throws IOException {\n  ZipFile zf=new ZipFile(zipFile);\n  try {\n    extract(zf,destDir);\n  }\n  finally {\n    zf.close();\n  }\n}"}
{"ids": "59573", "raw_code": "public Config(String file){\n  this(new File(CONFIG_DIR,file.contains(\".\") ? file : file.concat(\".conf\")));\n}"}
{"ids": "17091", "raw_code": "public GotoLineDialog(JTextComponent text){\n  super(ActionUtils.getFrameFor(text),false);\n  initComponents();\n  this.text=text;\n  setLocationRelativeTo(text.getRootPane());\n}"}
{"ids": "51686", "raw_code": "public int length(){\n  return this.filledLength;\n}"}
{"ids": "42537", "raw_code": "@Override public boolean equals(Object o){\n  if (o instanceof Prefix) {\n    return value.equals(((Prefix)o).value);\n  }\n  return false;\n}"}
{"ids": "8934", "raw_code": "private void notifyWifiState(){\nsynchronized (mWifiMonitor) {\n    Log.v(LOG_TAG,\"notify wifi state changed.\");\n    mWifiMonitor.notify();\n  }\n}"}
{"ids": "79765", "raw_code": "private boolean arrayKeyValueExists(String key,String value){\n  if (visitedPost.containsKey(key)) {\n    for (    String s : visitedPost.get(key)) {\n      if (s.equals(value)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"ids": "36658", "raw_code": "public void removeDiagramChangeListener(mxDiagramChangeListener listener){\n  if (diagramChangeListeners != null) {\n    diagramChangeListeners.remove(listener);\n  }\n}"}
{"ids": "55572", "raw_code": "public static ConnectivityGrid ConnectivityGridFactory(int key,double maxRange){\n  if (gridobjects.containsKey((Integer)key)) {\n    return (ConnectivityGrid)gridobjects.get((Integer)key);\n  }\n else {\n    ConnectivityGrid newgrid=new ConnectivityGrid((int)Math.ceil(maxRange * cellSizeMultiplier));\n    gridobjects.put((Integer)key,newgrid);\n    return newgrid;\n  }\n}"}
{"ids": "85363", "raw_code": "public static String stripLeadingDollar(String str){\n  return (str.charAt(0) == '$') ? str.substring(1) : str;\n}"}
{"ids": "9394", "raw_code": "public PNormNormalization(double p){\n  if (p <= 0 || Double.isNaN(p))   throw new IllegalArgumentException(\"p must be greater than zero, not \" + p);\n  this.p=p;\n}"}
{"ids": "38883", "raw_code": "@Override public void acceptDataPoint(ChartEvent e){\n  if (e.getReset()) {\n    m_xCount=0;\n    m_max=1;\n    m_min=0;\n  }\n  if (m_outputFrame != null) {\n    boolean refresh=false;\n    if (e.getLegendText() != null & e.getLegendText() != m_legendText) {\n      m_legendText=e.getLegendText();\n      refresh=true;\n    }\n    if (e.getMin() != m_min || e.getMax() != m_max) {\n      m_oldMax=m_max;\n      m_oldMin=m_min;\n      m_max=e.getMax();\n      m_min=e.getMin();\n      refresh=true;\n      m_yScaleUpdate=true;\n    }\n    if (refresh) {\n      m_legendPanel.repaint();\n      m_scalePanel.repaint();\n    }\n    acceptDataPoint(e.getDataPoint());\n  }\n  m_xCount++;\n}"}
{"ids": "7317", "raw_code": "public int size(){\n  return values.size();\n}"}
{"ids": "34576", "raw_code": "public static String rightTrim(final String value){\n  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);\n  return value.replaceAll(\"\\\\s+$\",\"\");\n}"}
{"ids": "23271", "raw_code": "public synchronized void putMessage(Object obj){\n  fifo.addElement(obj);\n  numMessage++;\n  notifyAll();\n}"}
{"ids": "82056", "raw_code": "public void dispose(){\n  if (isDisposed()) {\n    return;\n  }\n  setDisposed(true);\n  if (!menu) {\n    super.dispose();\n  }\n}"}
{"ids": "5045", "raw_code": "public double signed_distance(PlaPointFloat p_point){\n  double dx=point_b.v_x - point_a.v_x;\n  double dy=point_b.v_y - point_a.v_y;\n  double det=dy * (p_point.v_x - point_a.v_x) - dx * (p_point.v_y - point_a.v_y);\n  double length=Math.sqrt(dx * dx + dy * dy);\n  return det / length;\n}"}
{"ids": "75810", "raw_code": "public static double[] ones(int L){\n  double m[]=new double[L];\n  Arrays.fill(m,1.);\n  return m;\n}"}
{"ids": "72070", "raw_code": "public static DeleteSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,SetRelationDefinition<?,?> r) throws ArgumentException {\n  return new DeleteSubCommandHandler(parser,p,r,p.child(r));\n}"}
{"ids": "38405", "raw_code": "protected void removeCycles(){\n  int visited[]=new int[m_nodes.size()];\n  for (int i=0; i < graphMatrix.length; i++) {\n    if (visited[i] == 0) {\n      removeCycles2(i,visited);\n      visited[i]=1;\n    }\n  }\n}"}
{"ids": "86082", "raw_code": "public synchronized void kill(){\n  running=false;\n  closed=true;\n  try {\n    STDIN.close();\n  }\n catch (  IOException e) {\n  }\n  try {\n    process.destroy();\n  }\n catch (  Exception e) {\n  }\n}"}
{"ids": "1855", "raw_code": "public static Metrics create(Map<String,String> dimensionMap){\n  Map<String,String> map=Maps.newTreeMap();\n  map.putAll(dimensionMap);\n  return new Metrics(Collections.unmodifiableMap(map));\n}"}
{"ids": "49047", "raw_code": "protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {\n  Object annotation=readLocation();\n  String className=classDesc.getName();\n  ClassLoader defaultLoader=skipDefaultResolveClass ? null : latestUserDefinedLoader();\n  String codebase=null;\n  if (!useCodebaseOnly && annotation instanceof String) {\n    codebase=(String)annotation;\n  }\n  try {\n    return RMIClassLoader.loadClass(codebase,className,defaultLoader);\n  }\n catch (  AccessControlException e) {\n    return checkSunClass(className,e);\n  }\ncatch (  ClassNotFoundException e) {\n    try {\n      if (Character.isLowerCase(className.charAt(0)) && className.indexOf('.') == -1) {\n        return super.resolveClass(classDesc);\n      }\n    }\n catch (    ClassNotFoundException e2) {\n    }\n    throw e;\n  }\n}"}
{"ids": "80368", "raw_code": "public boolean contains(final CreatureRespawnPoint point){\n  if (point == null) {\n    return false;\n  }\n  final IRPZone entityZone=point.getZone();\n  return zone.equals(entityZone) && shape.contains(point.getX(),point.getY());\n}"}
{"ids": "20134", "raw_code": "public boolean isUseAntiAlias(){\n  return useAntiAlias;\n}"}
{"ids": "25873", "raw_code": "private void loadLevelFile(String tableName,String columnName,String cubeName,String schemaName){\n  String baseLocation=CarbonUtil.getCarbonStorePath(schemaName,cubeName);\n  baseLocation=baseLocation + File.separator + schemaName+ File.separator+ cubeName;\n  if (loadFolderList.size() == 0) {\n    checkAndUpdateFolderList(baseLocation);\n  }\n  try {\n    File[] filesArray=null;\n    for (    File loadFoler : loadFolderList) {\n      filesArray=getFilesArray(loadFoler,tableName + '_' + columnName);\n      if (null != filesArray) {\n        for (int i=0; i < filesArray.length; i++) {\n          readLevelFileAndUpdateCache(filesArray[i],tableName + '_' + columnName);\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    LOGGER.error(\"Problem while populating the cache\");\n  }\n}"}
{"ids": "8928", "raw_code": "protected void doValidateZeroLongFile(String path,String filename,long size,boolean checkContents){\n  File inFile=new File(path,filename);\n  DataInputStream inStream=null;\n  Log.i(LOG_TAG,\"Validating file \" + filename + \" at \"+ path);\n  try {\n    inStream=new DataInputStream(new FileInputStream(inFile));\n    if (checkContents) {\n      for (long i=0; i < size; ++i) {\n        if (inStream.readLong() != 0) {\n          fail(\"Unexpected value read in OBB file\" + filename);\n        }\n      }\n    }\n    if (inStream != null) {\n      inStream.close();\n    }\n    Log.i(LOG_TAG,\"File \" + filename + \" successfully verified for \"+ size+ \" zeros\");\n  }\n catch (  IOException e) {\n    fail(\"IOError with file \" + inFile + \":\"+ e.toString());\n  }\n}"}
{"ids": "24709", "raw_code": "public String applyMask(String mask,String value){\n  return (String)getMaskOrGetCursorIndex(mask,value,0,true);\n}"}
{"ids": "74994", "raw_code": "private void computeDuration(){\n  duration=System.currentTimeMillis() - start;\n  total_duration+=duration;\n}"}
{"ids": "11678", "raw_code": "public int handleNITFHeader(BinaryFile binFile){\n  try {\n    byte[] nitfArray=binFile.readBytes(4,false);\n    String nitf=new String(nitfArray);\n    binFile.seek(RPF_DATE_LOCATION);\n    nitfArray=binFile.readBytes(2,false);\n    nitf=new String(nitfArray);\n    if (nitf.equalsIgnoreCase(\"19\") || nitf.equalsIgnoreCase(\"20\"))     return 0;\n    binFile.seek(RPF_DATE_LOCATION + TOC_NITF_HEADER_LENGTH);\n    nitfArray=binFile.readBytes(2,false);\n    nitf=new String(nitfArray);\n    if (nitf.equalsIgnoreCase(\"19\") || nitf.equalsIgnoreCase(\"20\"))     return TOC_NITF_HEADER_LENGTH;\n    binFile.seek(RPF_DATE_LOCATION + FRAME_SHORT_NITF_HEADER_LENGTH);\n    nitfArray=binFile.readBytes(2,false);\n    nitf=new String(nitfArray);\n    if (nitf.equalsIgnoreCase(\"19\") || nitf.equalsIgnoreCase(\"20\"))     return FRAME_SHORT_NITF_HEADER_LENGTH;\n    binFile.seek(RPF_DATE_LOCATION + FRAME_LONG_NITF_HEADER_LENGTH);\n    nitfArray=binFile.readBytes(2,false);\n    nitf=new String(nitfArray);\n    if (nitf.equalsIgnoreCase(\"19\") || nitf.equalsIgnoreCase(\"20\"))     return FRAME_LONG_NITF_HEADER_LENGTH;\n  }\n catch (  IOException e) {\n    Debug.error(\"RpfHeader: File IO Error while handling NITF header:\\n\" + e);\n    return -1;\n  }\ncatch (  FormatException f) {\n    Debug.error(\"RpfHeader: File IO Format error while reading header information:\\n\" + f);\n    return -1;\n  }\n  return -1;\n}"}
{"ids": "43363", "raw_code": "public BufferedImage takeScreenshot(){\n  Debug.setDebugLevel(3);\n  File scrFile=driver.getScreenshotAs(OutputType.FILE);\n  BufferedImage bufferedImage=null;\n  try {\n    bufferedImage=ImageIO.read(scrFile);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  return bufferedImage;\n}"}
{"ids": "51052", "raw_code": "private void pickCenterOverlap(ScoutWidget[] list){\n  for (int i=0; i < list.length; i++) {\n    ScoutWidget scoutWidget=list[i];\n    float centerX=scoutWidget.getX() + scoutWidget.getWidth() / 2;\n    float centerY=scoutWidget.getY() + scoutWidget.getHeight() / 2;\n    for (int j=0; j < list.length; j++) {\n      if (i == j)       continue;\n      ScoutWidget widget=list[j];\n      if (scoutWidget.isGuideline()) {\n        continue;\n      }\n      if (!widget.isGuideline() && ScoutWidget.distance(scoutWidget,widget) > MAX_DIST_FOR_CENTER_OVERLAP) {\n        continue;\n      }\n      if (!widget.isGuideline() || widget.isVerticalGuideline()) {\n        if (Math.abs(widget.getX() - centerX) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(1,widget,Direction.WEST);\n        }\n        if (Math.abs(widget.getX() + widget.getWidth() - centerX) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(1,widget,Direction.EAST);\n        }\n      }\n      if (!widget.isGuideline() || widget.isHorizontalGuideline()) {\n        if (Math.abs(widget.getY() - centerY) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(0,widget,Direction.NORTH);\n        }\n        if (Math.abs(widget.getY() + widget.getHeight() - centerY) < CENTER_ERROR) {\n          scoutWidget.setEdgeCentered(0,widget,Direction.SOUTH);\n        }\n      }\n    }\n  }\n}"}
