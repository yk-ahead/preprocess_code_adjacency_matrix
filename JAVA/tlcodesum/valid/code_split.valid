{"ids": "31356", "code": ["public int hash Code ( ) {", "return value . hash Code ( ) ; }"]}
{"ids": "82853", "code": ["@ Override protected void property Change ( Property Change Event evt ) {", "if ( Sea Glass Look And Feel . should Update Style ( evt ) ) {", "update Style ( ( J Text Component ) evt . get Source ( ) ) ; }", "super . property Change ( evt ) ; }"]}
{"ids": "60164", "code": ["@ Not Null public Psi Query filter ( @ Not Null final Class < ? extends Psi Named Element > clazz , @ Not Null final String name ) {", "final Set < Psi Element > result = new Hash Set < Psi Element > ( Arrays . as List ( my Psi Elements ) ) ;", "for ( final Psi Element element : my Psi Elements ) {", "final Psi Named Element named Element = Py Util . as ( element , clazz ) ;", "if ( ( named Element == null ) || ( ! name . equals ( named Element . get Name ( ) ) ) ) {", "result . remove ( element ) ; } }", "return new Psi Query ( result . to Array ( new Psi Element [ result . size ( ) ] ) ) ; }"]}
{"ids": "67737", "code": ["protected void write Qualified Name ( String ns Alias , String name ) throws IO Exception {", "if ( ns Alias != null && ns Alias . length ( ) > NUM_ ) {", "writer . write ( ns Alias ) ;", "writer . write ( STR_ ) ; }", "writer . write ( name ) ; }"]}
{"ids": "5793", "code": ["public Text Editor delete All ( String pattern ) {", "return replace All ( pattern , STR_ ) ; }"]}
{"ids": "86959", "code": ["public synchronized Gcm Helper add Registration Callback ( @ Non Null Context context , @ Non Null Gcm Registration Listener registration Listener , boolean sticky ) {", "if ( null == registration Callbacks ) {", "registration Callbacks = new Concurrent Linked Queue < > ( ) ; }", "registration Callbacks . add ( registration Listener ) ;", "if ( sticky && ! Text Utils . is Empty ( this . push Token ) ) {", "registration Listener . on Token Available ( context , push Token , false ) ; }", "return this ; }"]}
{"ids": "38767", "code": ["@ Override public void accept Training Set ( Training Set Event e ) {", "Instances training Set = e . get Training Set ( ) ;", "Data Set Event dse = new Data Set Event ( this , training Set ) ;", "accept Data Set ( dse ) ; }"]}
{"ids": "59655", "code": ["< T > List < T > on Find ( Class < T > model Class , String [ ] columns , String [ ] conditions , String order By , String limit , boolean is Eager ) {", "Base Utility . check Conditions Correct ( conditions ) ;", "List < T > data List = query ( model Class , columns , get Where Clause ( conditions ) , get Where Args ( conditions ) , null , null , order By , limit , get Foreign Key Associations ( model Class . get Name ( ) , is Eager ) ) ;", "return data List ; }"]}
{"ids": "10353", "code": ["private boolean is Agent Empty ( Agent agent ) {", "if ( agent != null ) {", "String first = agent . get First Name ( ) ;", "String last = agent . get Last Name ( ) ;", "String email = agent . get Email ( ) ;", "String home = agent . get Homepage ( ) ;", "String org = agent . get Organisation ( ) ;", "String phone = agent . get Phone ( ) ;", "String position = agent . get Position ( ) ;", "String city = null ;", "String street = null ;", "String country = null ;", "String code = null ;", "String province = null ;", "Address address = agent . get Address ( ) ;", "if ( address != null ) {", "city = address . get City ( ) ;", "street = address . get Address ( ) ;", "country = address . get Country ( ) ;", "code = address . get Postal Code ( ) ;", "province = address . get Province ( ) ; }", "String directory = null ;", "String identifier = null ;", "List < User Id > user Ids = agent . get User Ids ( ) ;", "if ( ! user Ids . is Empty ( ) ) {", "User Id user Id = user Ids . get ( NUM_ ) ;", "directory = user Id . get Directory ( ) ;", "identifier = user Id . get Identifier ( ) ; }", "return ( Strings . is Null Or Empty ( city ) && Strings . is Null Or Empty ( street ) && Strings . is Null Or Empty ( country ) && Strings . is Null Or Empty ( code ) && Strings . is Null Or Empty ( province ) && Strings . is Null Or Empty ( first ) && Strings . is Null Or Empty ( last ) && Strings . is Null Or Empty ( email ) && Strings . is Null Or Empty ( home ) && Strings . is Null Or Empty ( org ) && Strings . is Null Or Empty ( phone ) && Strings . is Null Or Empty ( position ) && Strings . is Null Or Empty ( directory ) && Strings . is Null Or Empty ( identifier ) ) ; }", "return true ; }"]}
{"ids": "55172", "code": ["public static byte [ ] calendar To Raw Bytes ( Calendar timestamp , boolean honor Device Time Offset ) {", "if ( honor Device Time Offset ) {", "int offset In Hours = Mi Band Coordinator . get Device Time Offset Hours ( ) ;", "if ( offset In Hours != NUM_ ) {", "timestamp . add ( Calendar . HOUR OF DAY , offset In Hours ) ; } }", "byte [ ] year = from Uint 16 ( timestamp . get ( Calendar . YEAR ) ) ;", "return new byte [ ] { year [ NUM_ ] , year [ NUM_ ] , from Uint 8 ( timestamp . get ( Calendar . MONTH ) + NUM_ ) , from Uint 8 ( timestamp . get ( Calendar . DATE ) ) , from Uint 8 ( timestamp . get ( Calendar . HOUR OF DAY ) ) , from Uint 8 ( timestamp . get ( Calendar . MINUTE ) ) , from Uint 8 ( timestamp . get ( Calendar . SECOND ) ) , day Of Week To Raw Bytes ( timestamp ) , NUM_ } ; }"]}
{"ids": "65650", "code": ["protected void init BP Order Details ( int C B Partner ID , boolean for Invoice ) {", "log . config ( STR_ + C B Partner ID ) ;", "Key Name Pair pp = new Key Name Pair ( NUM_ , STR_ ) ;", "order Field . remove Action Listener ( this ) ;", "order Field . remove All Items ( ) ;", "order Field . add Item ( pp ) ;", "Array List < Key Name Pair > list = load Order Data ( C B Partner ID , for Invoice , same Warehouse Cb . is Selected ( ) ) ;", "for ( Key Name Pair knp : list ) order Field . add Item ( knp ) ;", "order Field . set Selected Index ( NUM_ ) ;", "order Field . add Action Listener ( this ) ;", "init BP Details ( C B Partner ID ) ; }"]}
{"ids": "64383", "code": ["public Modpack Initialization Panel ( Wizard Controller controller , Map wizard Data , Vector < String > versions , String sel Version ) {", "init Components ( ) ;", "this . controller = controller ;", "this . wizard Data = wizard Data ;", "wizard Data . put ( KEY GAME VERSION , versions ) ;", "wizard Data . put ( STR_ , sel Version ) ;", "wizard Data . put ( KEY INCLUDING LAUNCHER , false ) ;", "configure Combo Contents ( ) ;", "check Problem ( ) ; }"]}
{"ids": "70479", "code": ["public synchronized void remove ( int index ) {", "super . remove ( index ) ;", "double removed Value = m Value . remove ( index ) ;", "if ( removed Value == m Min Value || removed Value == m Max Value ) {", "init Range ( ) ; } }"]}
{"ids": "45640", "code": ["private boolean coord Is Calendar Cell ( float y ) {", "return y > cell Height ; }"]}
{"ids": "87094", "code": ["protected void sprint ( double double Field ) {", "sprint ( String . value Of ( double Field ) ) ; }"]}
{"ids": "48318", "code": ["private int attribute Map ( String name ) {", "Integer num = map . get ( name ) ;", "if ( num == null ) {", "return NUM_ ; }", "return num . int Value ( ) ; }"]}
{"ids": "40829", "code": ["private void group Player Standing CSV ( ) {", "for ( Player QB p : team Q Bs ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; }", "for ( Player RB p : team R Bs ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; }", "for ( Player WR p : team W Rs ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; }", "for ( Player K p : team Ks ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; }", "for ( Player OL p : team O Ls ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; }", "for ( Player S p : team Ss ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; }", "for ( Player CB p : team C Bs ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; }", "for ( Player F 7 p : team F 7 s ) {", "if ( p . year == NUM_ ) team R Ss . add ( p ) ;", "else if ( p . year == NUM_ ) team F Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Os . add ( p ) ;", "else if ( p . year == NUM_ ) team J Rs . add ( p ) ;", "else if ( p . year == NUM_ ) team S Rs . add ( p ) ; } }"]}
{"ids": "5369", "code": ["public String list ( ) throws IO Exception , Tomcat Manager Exception {", "return invoke ( STR_ , null , null ) ; }"]}
{"ids": "66436", "code": ["public Attribute Filler ( Attributes Impl attributes , PO po To Auto Fill ) {", "attributes . clear ( ) ;", "atts = attributes ;", "po = po To Auto Fill ; }"]}
{"ids": "30462", "code": ["public static final void to Byte Array ( Byte Array Output Stream output , String str ) {", "if ( str == null ) {", "return ; }", "output . write ( NUM_ ) ;", "int max = str . length ( ) ;", "for ( int i = NUM_ ; i < max ; i ++ ) {", "int b = str . char At ( i ) ;", "if ( ( b >= NUM_ ) && ( b <= NUM_ ) ) {", "switch ( b ) {", "case NUM_ :", "case NUM_ :", "output . write ( NUM_ ) ;", "break ; }", "output . write ( b ) ; }", "else {", "output . write ( NUM_ ) ;", "switch ( b ) {", "case NUM_ :", "output . write ( NUM_ ) ;", "break ;", "case NUM_ :", "output . write ( NUM_ ) ;", "break ;", "case NUM_ :", "output . write ( NUM_ ) ;", "break ;", "case NUM_ :", "output . write ( NUM_ ) ;", "break ;", "case NUM_ :", "output . write ( NUM_ ) ;", "break ;", "default :", "output . write ( NUM_ ) ;", "int b 3 = b > > NUM_ ;", "int b 4 = b & NUM_ ;", "if ( b 4 < NUM_ ) b 4 += NUM_ ;", "else b 4 += NUM_ ;", "int b 2 = b 3 > > NUM_ ;", "b 3 &= NUM_ ;", "if ( b 3 < NUM_ ) b 3 += NUM_ ;", "else b 3 += NUM_ ;", "int b 1 = b 2 > > NUM_ ;", "b 2 &= NUM_ ;", "if ( b 2 < NUM_ ) b 2 += NUM_ ;", "else b 2 += NUM_ ;", "if ( b 1 < NUM_ ) b 1 += NUM_ ;", "else b 1 += NUM_ ;", "output . write ( b 1 ) ;", "output . write ( b 2 ) ;", "output . write ( b 3 ) ;", "output . write ( b 4 ) ;", "break ; } } }", "output . write ( NUM_ ) ; }"]}
{"ids": "45692", "code": ["@ Request Mapping ( value = { STR_ , STR_ } , method = Request Method . PUT ) @ Response Body public Rest Wrapper insert ( @ Model Attribute ( STR_ ) @ Valid File file , Binding Result binding Result , Principal principal ) {", "Rest Wrapper rest Wrapper = null ;", "if ( binding Result . has Errors ( ) ) {", "Binding Result Error binding Result Error = new Binding Result Error ( ) ;", "return binding Result Error . error Message ( binding Result ) ; }", "try {", "file . set Creation TS ( Date Converter . string To Date ( file . get Table Creation TS ( ) ) ) ;", "file DAO . insert ( file ) ;", "rest Wrapper = new Rest Wrapper ( file , Rest Wrapper . OK ) ;", "LOGGER . info ( STR_ + file . get Batch Id ( ) + STR_ + principal . get Name ( ) + file ) ; }", "catch ( Metadata Exception e ) {", "LOGGER . error ( e ) ;", "rest Wrapper = new Rest Wrapper ( e . get Message ( ) , Rest Wrapper . ERROR ) ; }", "return rest Wrapper ; }"]}
{"ids": "54725", "code": ["private void enable Updates ( ) {", "if ( lmgr != null ) {", "try {", "lmgr . add Gps Status Listener ( this ) ;", "lmgr . request Location Updates ( Location Manager . GPS PROVIDER , gps Logging Interval , NUM_ , this ) ; }", "catch ( Security Exception e ) {", "Log . e ( TAG , STR_ ) ; } } }"]}
{"ids": "6866", "code": ["private void add Integer ( ) {", "int old Pos = pos - NUM_ ;", "String literal = scan Integer ( ) ;", "final String substring ;", "final int radix ;", "if ( literal . starts With ( STR_ ) || literal . starts With ( STR_ ) ) {", "radix = NUM_ ;", "substring = literal . substring ( NUM_ ) ; }", "else if ( literal . starts With ( STR_ ) && literal . length ( ) > NUM_ ) {", "radix = NUM_ ;", "substring = literal . substring ( NUM_ ) ; }", "else {", "radix = NUM_ ;", "substring = literal ; }", "int value = NUM_ ;", "try {", "value = Integer . parse Int ( substring , radix ) ; }", "catch ( Number Format Exception e ) {", "error ( STR_ + radix + STR_ + literal ) ; }", "add Token ( Token Kind . INT , old Pos , pos , value ) ; }"]}
{"ids": "73598", "code": ["public void remove Mouse Listener ( Global Mouse Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "66478", "code": ["public XML Document ( double version , boolean standalone ) {", "prolog = new Vector < Object > ( NUM_ ) ;", "String Buffer version Str = new String Buffer ( ) ;", "version Str . append ( STR_ ) ;", "version Str . append ( version ) ;", "version Str . append ( STR_ ) ;", "if ( standalone ) version Str . append ( STR_ ) ;", "else version Str . append ( STR_ ) ;", "this . version Decl = version Str . to String ( ) ; }"]}
{"ids": "24221", "code": ["public Object Name create Distribution Locator ( String host , int port , String working Directory , String product Directory , String remote Command ) throws Malformed Object Name Exception {", "try {", "Distribution Locator Jmx Impl locator = ( Distribution Locator Jmx Impl ) add Distribution Locator ( ) ;", "Distribution Locator Config config = locator . get Config ( ) ;", "config . set Host ( host ) ;", "config . set Port ( port ) ;", "config . set Working Directory ( working Directory ) ;", "config . set Product Directory ( product Directory ) ;", "config . set Remote Command ( remote Command ) ;", "return new Object Name ( locator . get M Bean Name ( ) ) ; }", "catch ( Runtime Exception e ) {", "logger . warn ( e . get Message ( ) , e ) ;", "throw e ; }", "catch ( Virtual Machine Error err ) {", "System Failure . initiate Failure ( err ) ;", "throw err ; }", "catch ( Error e ) {", "System Failure . check Failure ( ) ;", "logger . error ( e . get Message ( ) , e ) ;", "throw e ; } }"]}
{"ids": "63946", "code": ["void apply Center Panel ( Grass Marlin ui ) {", "if ( tree View Component != null ) {", "center Panel Component . add ( tree View Component , Split Pane . Position . CENTER ) ; }", "center Panel Component . add ( graph Component , Split Pane . Position . RIGHT ) ;", "center Panel Component . add ( log Component , Split Pane . Position . LEFT BOTTOM ) ;", "Border b = Border Factory . create Matte Border ( NUM_ , NUM_ , NUM_ , NUM_ , Color . GRAY ) ;", "Border b 2 = Border Factory . create Matte Border ( NUM_ , NUM_ , NUM_ , NUM_ , Color . GRAY ) ;", "tree View Component . set Border ( b 2 ) ;", "graph Component . set Border ( b ) ;", "log Component . set Border ( b 2 ) ;", "center Panel Component . set Initial Size ( x , y ) ;", "Dimension d = new Dimension ( NUM_ , NUM_ ) ;", "ui . add ( new Filler ( d , d , d ) , Border Layout . WEST ) ;", "ui . add ( new Filler ( d , d , d ) , Border Layout . EAST ) ;", "ui . add ( center Panel Component , Border Layout . CENTER ) ; }"]}
{"ids": "16664", "code": ["private boolean is Abstract ( String source ) {", "int nonterminal Count = NUM_ ;", "for ( String t : source . split ( STR_ ) ) {", "if ( ! t . matches ( NT REGEX ) ) return false ;", "nonterminal Count ++ ; }", "return nonterminal Count != NUM_ ; }"]}
{"ids": "74031", "code": ["public static String UR Ifor Portable Path ( String path ) {", "if ( path . starts With ( File Util . PREFERENCES ) ) {", "return path . replace First ( File Util . PREFERENCES , STR_ ) ; }", "else if ( path . starts With ( File Util . PROGRAM ) ) {", "return path . replace First ( File Util . PROGRAM , STR_ ) ; }", "else {", "return null ; } }"]}
{"ids": "61617", "code": ["public int hash Code ( ) {", "return Float . float To Int Bits ( value ) ; }"]}
{"ids": "28687", "code": ["public static void log ( Throwable error , String message , Object ... args ) {", "if ( logging Enabled ) {", "Log . d ( TAG , args . length == NUM_ ? message : String . format ( message , args ) , error ) ; } }"]}
{"ids": "61144", "code": ["public void add Extension Namespace ( String uri , Extension Handler ext NS ) {", "m extension Function Namespaces . put ( uri , ext NS ) ; }"]}
{"ids": "81287", "code": ["private void generate Type Parameter Infos ( Binary Member parent , char [ ] signature , Hash Map new Elements , Array List type Parameter Handles ) {", "if ( signature == null ) return ;", "char [ ] [ ] type Parameter Signatures = Signature . get Type Parameters ( signature ) ;", "for ( int i = NUM_ , type Parameter Count = type Parameter Signatures . length ; i < type Parameter Count ; i ++ ) {", "char [ ] type Parameter Signature = type Parameter Signatures [ i ] ;", "char [ ] type Parameter Name = Signature . get Type Variable ( type Parameter Signature ) ;", "Char Operation . replace ( type Parameter Signature , STR_ , STR_ ) ;", "char [ ] [ ] type Parameter Bound Signatures = Signature . get Type Parameter Bounds ( type Parameter Signature ) ;", "int bound Length = type Parameter Bound Signatures . length ;", "char [ ] [ ] type Parameter Bounds = new char [ bound Length ] [ ] ;", "for ( int j = NUM_ ; j < bound Length ; j ++ ) {", "type Parameter Bounds [ j ] = Signature . to Char Array ( type Parameter Bound Signatures [ j ] ) ; }", "Type Parameter type Parameter = new Type Parameter ( parent , parent . manager , new String ( type Parameter Name ) ) ;", "Type Parameter Element Info info = new Type Parameter Element Info ( ) ;", "info . bounds = type Parameter Bounds ;", "info . bounds Signatures = type Parameter Bound Signatures ;", "type Parameter Handles . add ( type Parameter ) ;", "while ( new Elements . contains Key ( type Parameter ) ) type Parameter . occurrence Count ++ ;", "new Elements . put ( type Parameter , info ) ; } }"]}
{"ids": "57606", "code": ["private void signal Not Empty ( ) {", "final Reentrant Lock take Lock = this . take Lock ;", "take Lock . lock ( ) ;", "try {", "not Empty . signal ( ) ; }", "finally {", "take Lock . unlock ( ) ; } }"]}
{"ids": "55581", "code": ["public Routing Info ( Object o ) {", "this . text = o . to String ( ) ; }"]}
{"ids": "13416", "code": ["private List < View > add View ( View view , List < View > cache ) {", "if ( cache == null ) {", "cache = new Linked List < View > ( ) ; }", "cache . add ( view ) ;", "return cache ; }"]}
{"ids": "43191", "code": ["public static Cert Chain Key Pair generate Signed ( String fqdn , X 509 Certificate issuer Certificate , Private Key issuer Private Key ) {", "try {", "return generate Certificate And Sign ( fqdn , issuer Certificate , issuer Private Key , get Server Extensions ( issuer Certificate ) ) ; }", "catch ( Certificate Exception | Operator Creation Exception | No Such Algorithm Exception | IO Exception e ) {", "throw new Runtime Exception ( String . format ( STR_ , e . get Message ( ) ) , e ) ; } }"]}
{"ids": "20337", "code": ["private void start Animation ( ) {", "Value Animator animator = Value Animator . of Float ( NUM_ ) ;", "Array List < Name Values Holder > name Value List = ( Array List < Name Values Holder > ) m Pending Animations . clone ( ) ;", "m Pending Animations . clear ( ) ;", "int property Mask = NUM_ ;", "int property Count = name Value List . size ( ) ;", "for ( int i = NUM_ ; i < property Count ; ++ i ) {", "Name Values Holder name Values Holder = name Value List . get ( i ) ;", "property Mask |= name Values Holder . m Name Constant ; }", "m Animator Map . put ( animator , new Property Bundle ( property Mask , name Value List ) ) ;", "animator . add Update Listener ( m Animator Event Listener ) ;", "animator . add Listener ( m Animator Event Listener ) ;", "if ( m Start Delay Set ) {", "animator . set Start Delay ( m Start Delay ) ; }", "if ( m Duration Set ) {", "animator . set Duration ( m Duration ) ; }", "if ( m Interpolator Set ) {", "animator . set Interpolator ( m Interpolator ) ; }", "animator . start ( ) ; }"]}
{"ids": "14893", "code": ["public void add Request ( Request request ) {", "request Set . add ( request ) ; }"]}
{"ids": "53201", "code": ["public static double logpmf ( double x , int n , double p ) {", "if ( x < NUM_ || x > n ) {", "return Double . NEGATIVE INFINITY ; }", "if ( p <= NUM_ ) {", "return x == NUM_ ? NUM_ : Double . NEGATIVE INFINITY ; }", "if ( p >= NUM_ ) {", "return x == n ? NUM_ : Double . NEGATIVE INFINITY ; }", "final double q = NUM_ - p ;", "if ( x == NUM_ ) {", "if ( p < NUM_ ) {", "return - deviance Term ( n , n * q ) - n * p ; }", "else {", "return n * Math . log ( q ) ; } }", "if ( x == n ) {", "if ( p > NUM_ ) {", "return - deviance Term ( n , n * p ) - n * q ; }", "else {", "return n * Math . log ( p ) ; } }", "final double lc = stirling Error ( n ) - stirling Error ( x ) - stirling Error ( n - x ) - deviance Term ( x , n * p ) - deviance Term ( n - x , n * q ) ;", "final double f = ( Math Util . TWOPI * x * ( n - x ) ) / n ;", "return lc - NUM_ * Math . log ( f ) ; }"]}
{"ids": "48364", "code": ["private void byte 2 hex ( byte b , String Buffer buf ) {", "char [ ] hex Chars = { STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ } ;", "int high = ( ( b & NUM_ ) > > NUM_ ) ;", "int low = ( b & NUM_ ) ;", "buf . append ( hex Chars [ high ] ) ;", "buf . append ( hex Chars [ low ] ) ; }"]}
{"ids": "5738", "code": ["public static List < Geo Time Serie > timesplit ( Geo Time Serie gts , long quietperiod , int minvalues , String labelname ) {", "List < Geo Time Serie > series = new Array List < Geo Time Serie > ( ) ;", "if ( NUM_ == gts . values || gts . has Label ( labelname ) ) {", "series . add ( gts . clone ( ) ) ;", "return series ; }", "sort ( gts , false ) ;", "long lasttick = gts . ticks [ NUM_ ] ;", "int idx = NUM_ ;", "int gtsid = NUM_ ;", "Geo Time Serie serie = new Geo Time Serie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM_ ) ;", "serie . set Name ( gts . get Name ( ) ) ;", "Map < String , String > labels = new Hash Map < String , String > ( ) ;", "labels . put All ( gts . get Labels ( ) ) ;", "labels . put ( labelname , Integer . to String ( gtsid ) ) ;", "serie . set Labels ( labels ) ;", "while ( idx < gts . values ) {", "if ( gts . ticks [ idx ] - lasttick >= quietperiod ) {", "if ( serie . values > NUM_ && serie . values >= minvalues ) {", "series . add ( serie ) ; }", "serie = new Geo Time Serie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , NUM_ ) ;", "serie . set Name ( gts . get Name ( ) ) ;", "labels = new Hash Map < String , String > ( ) ;", "labels . put All ( gts . get Labels ( ) ) ;", "gtsid ++ ;", "labels . put ( labelname , Integer . to String ( gtsid ) ) ;", "serie . set Labels ( labels ) ; }", "Object value = GTS Helper . value At Index ( gts , idx ) ;", "GTS Helper . set Value ( serie , gts . ticks [ idx ] , null != gts . locations ? gts . locations [ idx ] : Geo Time Serie . NO LOCATION , null != gts . elevations ? gts . elevations [ idx ] : Geo Time Serie . NO ELEVATION , value , false ) ;", "lasttick = gts . ticks [ idx ] ;", "idx ++ ; }", "if ( serie . values > NUM_ && serie . values >= minvalues ) {", "series . add ( serie ) ; }", "return series ; }"]}
{"ids": "20430", "code": ["protected void check Signature ( byte [ ] buf ) {", "if ( ! Arrays . equals ( buf , Png Helper Internal . get Png Id Signature ( ) ) ) throw new Pngj Input Exception ( STR_ ) ; }"]}
{"ids": "78128", "code": ["private void two Way Merge Internal ( final Reservoir Longs Sketch sketch In , final boolean is Modifiable ) {", "if ( sketch In . get N ( ) <= sketch In . get K ( ) ) {", "two Way Merge Internal Standard ( sketch In ) ; }", "else if ( gadget . get N ( ) < gadget . get K ( ) ) {", "final Reservoir Longs Sketch tmp Sketch = gadget ;", "gadget = ( is Modifiable ? sketch In : sketch In . copy ( ) ) ;", "two Way Merge Internal Standard ( tmp Sketch ) ; }", "else if ( sketch In . get Implicit Sample Weight ( ) < gadget . get N ( ) / ( ( double ) ( gadget . get K ( ) - NUM_ ) ) ) {", "two Way Merge Internal Weighted ( sketch In ) ; }", "else {", "final Reservoir Longs Sketch tmp Sketch = gadget ;", "gadget = ( is Modifiable ? sketch In : sketch In . copy ( ) ) ;", "two Way Merge Internal Weighted ( tmp Sketch ) ; } }"]}
{"ids": "3655", "code": ["final public void print ( Object v ) {", "Writer out = this . out ;", "if ( out == null ) return ;", "try {", "if ( v == null ) out . write ( null Chars , NUM_ , null Chars . length ) ;", "else {", "String s = v . to String ( ) ;", "out . write ( s , NUM_ , s . length ( ) ) ; } }", "catch ( IO Exception e ) {", "log . log ( Level . FINE , e . to String ( ) , e ) ; } }"]}
{"ids": "56633", "code": ["public void subscribe To ( final K key , final Subscriber < V > subscriber , final Executor subscribe On ) {", "Completable Future . run Async ( null , subscribe On ) ; }"]}
{"ids": "62153", "code": ["public static boolean copy Stream ( Input Stream is , Output Stream os , Copy Listener listener , int buffer Size ) throws IO Exception {", "int current = NUM_ ;", "int total = is . available ( ) ;", "if ( total <= NUM_ ) {", "total = DEFAULT IMAGE TOTAL SIZE ; }", "final byte [ ] bytes = new byte [ buffer Size ] ;", "int count ;", "if ( should Stop Loading ( listener , current , total ) ) return false ;", "while ( ( count = is . read ( bytes , NUM_ , buffer Size ) ) != - NUM_ ) {", "os . write ( bytes , NUM_ , count ) ;", "current += count ;", "if ( should Stop Loading ( listener , current , total ) ) return false ; }", "os . flush ( ) ;", "return true ; }"]}
{"ids": "33740", "code": ["private void refresh Buffer ( ) throws IO Exception {", "if ( output == null ) {", "throw new Out Of Space Exception ( ) ; }", "output . write ( buffer , NUM_ , position ) ;", "position = NUM_ ; }"]}
{"ids": "70174", "code": ["public String damage Bay Door ( ) {", "String bay Type = STR_ ;", "Vector < Bay > potential ;", "potential = new Vector < Bay > ( ) ;", "Enumeration < Transporter > iter = transports . elements ( ) ;", "while ( iter . has More Elements ( ) ) {", "Transporter next = iter . next Element ( ) ;", "if ( next instanceof Bay ) {", "Bay next Bay = ( Bay ) next ;", "if ( next Bay . get Doors ( ) > NUM_ ) {", "potential . add ( next Bay ) ; } } }", "if ( potential . size ( ) > NUM_ ) {", "Bay chosen Bay = potential . element At ( Compute . random Int ( potential . size ( ) ) ) ;", "chosen Bay . destroy Door ( ) ;", "chosen Bay . reset Doors ( ) ;", "chosen Bay . set Doors ( chosen Bay . get Doors ( ) - NUM_ ) ;", "bay Type = chosen Bay . get Type ( ) ; }", "return bay Type ; }"]}
{"ids": "53661", "code": ["public void update Enabled State ( ) {", "boolean b = ( get Simulation Thread ( ) == null ) ;", "boolean prep = b && controller != null && controller . is Prepared ( ) ;", "clear Button . set Enabled ( b ) ;", "prepare Button . set Enabled ( b ) ;", "run Button . set Enabled ( prep ) ;", "if ( b ) pause Button . set Selected ( false ) ;", "pause Button . set Enabled ( ! b ) ;", "step Button . set Enabled ( prep ) ;", "cancel Button . set Enabled ( ! b ) ;", "for ( J Combo Box < Object > combo : selectors . combos ) combo . set Enabled ( b ) ; }"]}
{"ids": "22113", "code": ["private void prepare Volume Data ( ) throws Exception {", "prepare V Plex Volume Data ( ) ;", "prepare RP Volume Data ( ) ; }"]}
{"ids": "49433", "code": ["private static int determine Icon Id By Mime Type List ( List < String > mimetypes ) {", "if ( mimetypes == null || mimetypes . size ( ) < NUM_ ) {", "return R . drawable . file ; }", "else {", "for ( String mimetype : mimetypes ) {", "Integer icon Id = MIMETYPE TO ICON MAPPING . get ( mimetype ) ;", "if ( icon Id != null ) {", "return icon Id ; } }", "for ( String mimetype : mimetypes ) {", "String main Mimetype Part = mimetype . split ( STR_ ) [ NUM_ ] ;", "Integer icon Id = MAINMIMETYPE TO ICON MAPPING . get ( main Mimetype Part ) ;", "if ( icon Id != null ) {", "return icon Id ; } } }", "return R . drawable . file ; }"]}
{"ids": "33464", "code": ["public Sms Mms Message ( Context context , long message Id , long thread Id , long timestamp , String message Body , int unread Count , int message Type ) {", "context = context ;", "message Id = message Id ;", "thread Id = thread Id ;", "timestamp = timestamp ;", "message Body = message Body ;", "unread Count = unread Count ;", "message Type = message Type ;", "from Address = Sms Popup Utils . get Mms Address ( context , message Id ) ;", "from Email Gateway = false ;", "contact Name = Phone Number Utils . format Number ( from Address ) ;", "Contact Identification contact Identify = Sms Popup Utils . get Person Id From Phone Number ( context , from Address ) ;", "if ( contact Identify == null ) {", "contact Identify = Sms Popup Utils . get Person Id From Email ( context , from Address ) ;", "if ( contact Identify != null ) {", "from Email Gateway = true ; } }", "if ( contact Identify != null ) {", "contact Id = contact Identify . contact Id ;", "contact Lookup Key = contact Identify . contact Lookup ;", "contact Name = contact Identify . contact Name ; } }"]}
{"ids": "75674", "code": ["public void attribute As Class ( ) {", "Data Sorted Table Model model ;", "if ( m Current Col == - NUM_ ) {", "return ; }", "model = ( Data Sorted Table Model ) m Table Data . get Model ( ) ;", "if ( model . get Attribute At ( m Current Col ) == null ) {", "return ; }", "set Cursor ( Cursor . get Predefined Cursor ( Cursor . WAIT CURSOR ) ) ;", "model . attribute As Class At ( m Current Col ) ;", "set Cursor ( Cursor . get Predefined Cursor ( Cursor . DEFAULT CURSOR ) ) ; }"]}
{"ids": "77202", "code": ["public void add Listener ( Refresh Listener listener ) {", "if ( listener == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "refresh Listeners . add ( listener ) ; }"]}
{"ids": "54731", "code": ["public final void do Export ( final String track Name , final File target , int verbosity ) throws IO Exception {", "Log . i ( TAG , STR_ + target . get Absolute Path ( ) ) ;", "m Db Helper = new Database Helper ( m Context . get Application Context ( ) ) ;", "final Buffered Writer bw = new Buffered Writer ( new File Writer ( target ) ) ;", "bw . write ( XML HEADER ) ;", "bw . write ( TAG GPX ) ;", "if ( verbosity == VERBOSITY TRACK AND WAYPOINTS || verbosity == VERBOSITY WAYPOINTS ONLY || verbosity == VERBOSITY ALL ) {", "write Waypoints ( bw ) ; }", "if ( verbosity == VERBOSITY TRACK AND WAYPOINTS || verbosity == VERBOSITY ALL ) {", "write Trackpoints ( track Name , bw ) ; }", "bw . flush ( ) ;", "if ( verbosity == VERBOSITY ALL ) {", "write Wifis ( bw ) ;", "bw . flush ( ) ;", "write Cells ( bw ) ;", "bw . flush ( ) ; }", "bw . write ( TAG GPX CLOSE ) ;", "bw . close ( ) ;", "m Db Helper . close ( ) ;", "Log . i ( TAG , STR_ ) ; }"]}
{"ids": "4780", "code": ["public List < V > values In Selection ( Rich Edit Text editor , int span Type ) {", "List < V > result = new Array List < V > ( ) ;", "Selection expanded Selection = get Expanded Selection ( editor , span Type ) ;", "if ( expanded Selection != null ) {", "for ( Span < V > span : get Spans ( editor . get Text ( ) , expanded Selection ) ) {", "result . add ( span . get Value ( ) ) ; } }", "return result ; }"]}
{"ids": "64819", "code": ["private boolean is GTE Delta ( double value ) {", "return Math . abs ( value ) - Math . abs ( m Delta ) > - NUM_ ; }"]}
{"ids": "28631", "code": ["public static String row To String ( JSON Array ja ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < ja . length ( ) ; i += NUM_ ) {", "if ( i > NUM_ ) {", "sb . append ( STR_ ) ; }", "Object object = ja . opt ( i ) ;", "if ( object != null ) {", "String string = object . to String ( ) ;", "if ( string . length ( ) > NUM_ && ( string . index Of ( STR_ ) >= NUM_ || string . index Of ( STR_ ) >= NUM_ || string . index Of ( STR_ ) >= NUM_ || string . index Of ( NUM_ ) >= NUM_ || string . char At ( NUM_ ) == STR_ ) ) {", "sb . append ( STR_ ) ;", "int length = string . length ( ) ;", "for ( int j = NUM_ ; j < length ; j += NUM_ ) {", "char c = string . char At ( j ) ;", "if ( c >= STR_ && c != STR_ ) {", "sb . append ( c ) ; } }", "sb . append ( STR_ ) ; }", "else {", "sb . append ( string ) ; } } }", "sb . append ( STR_ ) ;", "return sb . to String ( ) ; }"]}
{"ids": "29865", "code": ["private void maybe Sample Sync Params ( ) {", "long playback Position Us = audio Track Util . get Playback Head Position Us ( ) ;", "if ( playback Position Us == NUM_ ) {", "return ; }", "if ( log . allow Verbose ( ) ) {", "log . v ( STR_ + playback Position Us ) ; }", "long system Clock Us = System . nano Time ( ) / NUM_ ;", "if ( system Clock Us - last Playhead Sample Time Us >= MIN PLAYHEAD OFFSET SAMPLE INTERVAL US ) {", "playhead Offsets [ next Playhead Offset Index ] = playback Position Us - system Clock Us ;", "next Playhead Offset Index = ( next Playhead Offset Index + NUM_ ) % MAX PLAYHEAD OFFSET COUNT ;", "if ( playhead Offset Count < MAX PLAYHEAD OFFSET COUNT ) {", "playhead Offset Count ++ ; }", "last Playhead Sample Time Us = system Clock Us ;", "smoothed Playhead Offset Us = NUM_ ;", "for ( int i = NUM_ ; i < playhead Offset Count ; i ++ ) {", "smoothed Playhead Offset Us += playhead Offsets [ i ] / playhead Offset Count ; } }", "if ( needs Passthrough Workarounds ( ) ) {", "return ; }", "if ( system Clock Us - last Timestamp Sample Time Us >= MIN TIMESTAMP SAMPLE INTERVAL US ) {", "audio Timestamp Set = audio Track Util . update Timestamp ( ) ;", "if ( audio Timestamp Set ) {", "long audio Timestamp Us = audio Track Util . get Timestamp Nano Time ( ) / NUM_ ;", "if ( log . allow Verbose ( ) ) {", "log . v ( STR_ + audio Timestamp Us ) ; }", "long audio Timestamp Frame Position = audio Track Util . get Timestamp Frame Position ( ) ;", "if ( audio Timestamp Us < resume System Time Us ) {", "audio Timestamp Set = false ;", "log . w ( STR_ + audio Timestamp Us + STR_ + resume System Time Us ) ; }", "else if ( Math . abs ( audio Timestamp Us - system Clock Us ) > MAX AUDIO TIMESTAMP OFFSET US ) {", "String message = STR_ + audio Timestamp Frame Position + STR_ + audio Timestamp Us + STR_ + system Clock Us + STR_ + playback Position Us ;", "if ( fail On Spurious Audio Timestamp ) {", "throw new Invalid Audio Track Timestamp Exception ( message ) ; }", "log . w ( message ) ;", "audio Timestamp Set = false ; }", "else if ( Math . abs ( frames To Duration Us ( audio Timestamp Frame Position ) - playback Position Us ) > MAX AUDIO TIMESTAMP OFFSET US ) {", "String message = STR_ + audio Timestamp Frame Position + STR_ + audio Timestamp Us + STR_ + system Clock Us + STR_ + playback Position Us ;", "if ( fail On Spurious Audio Timestamp ) {", "throw new Invalid Audio Track Timestamp Exception ( message ) ; }", "log . w ( message ) ;", "audio Timestamp Set = false ; } }", "if ( is Latency Quirk Enabled ) {", "latency Us = Amazon Quirks . get Audio HW Latency ( ) ; }", "else if ( get Latency Method != null && ! passthrough ) {", "try {", "latency Us = ( Integer ) get Latency Method . invoke ( audio Track , ( Object [ ] ) null ) * NUM_ - buffer Size Us ;", "latency Us = Math . max ( latency Us , NUM_ ) ;", "if ( latency Us > MAX LATENCY US ) {", "log . w ( STR_ + latency Us ) ;", "latency Us = NUM_ ; } }", "catch ( Exception e ) {", "get Latency Method = null ; } }", "last Timestamp Sample Time Us = system Clock Us ; } }"]}
{"ids": "81640", "code": ["@ Override public boolean contains ( Object object ) {", "if ( object == null ) {", "return false ; }", "for ( int i = NUM_ ; i < size ; i ++ ) {", "if ( object . equals ( elements [ i ] ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "67728", "code": ["public void close ( ) throws IO Exception {", "writer . close ( ) ; }"]}
{"ids": "77424", "code": ["public static void substitute Properties ( Node node , Properties properties ) {", "Node child ;", "Node next = node . get First Child ( ) ;", "while ( ( child = next ) != null ) {", "next = child . get Next Sibling ( ) ;", "if ( child . get Node Type ( ) == Node . TEXT NODE ) {", "child . set Node Value ( Properties Util . substitute Property ( child . get Node Value ( ) , properties ) ) ; }", "else if ( child . get Node Type ( ) == Node . ELEMENT NODE ) {", "Named Node Map attributes = child . get Attributes ( ) ;", "for ( int i = NUM_ ; i < attributes . get Length ( ) ; i ++ ) {", "Node attribute = attributes . item ( i ) ;", "attribute . set Node Value ( Properties Util . substitute Property ( attribute . get Node Value ( ) , properties ) ) ; }", "substitute Properties ( child , properties ) ; } } }"]}
{"ids": "10286", "code": ["@ Suppress Warnings ( STR_ ) public Pseudo Function Selector ( String function Name , String expression ) {", "super ( Type . PSEUDO FUNCTION ) ;", "this . pseudo Function = ( Pseudo Function < E > ) lookup Pseudo Function ( function Name . trim ( ) ) ;", "this . expression = expression ;", "this . parsed Expression = pseudo Function . parse Expression ( expression ) ; }"]}
{"ids": "6849", "code": ["public static String fix Query Mistakes ( String q ) {", "q = q . replace All ( STR_ , STR_ ) ;", "q = q . replace All ( STR_ , STR_ ) ;", "return q ; }"]}
{"ids": "84139", "code": ["public byte [ ] read Bytes ( ) throws IO Exception {", "if ( ! parse Tag ( ) ) throw new Burlap Protocol Exception ( STR_ ) ;", "String tag = sbuf . to String ( ) ;", "if ( tag . equals ( STR_ ) ) {", "expect End Tag ( STR_ ) ;", "return null ; }", "else if ( tag . equals ( STR_ ) ) {", "sbuf . set Length ( NUM_ ) ;", "byte [ ] value = parse Bytes ( ) ;", "expect End Tag ( STR_ ) ;", "return value ; }", "else throw expect Begin Tag ( STR_ , tag ) ; }"]}
{"ids": "12567", "code": ["public synchronized Utterance pend ( ) {", "Utterance utterance = null ;", "while ( list . size ( ) == NUM_ ) {", "try {", "wait ( ) ; }", "catch ( Interrupted Exception ie ) {", "return null ; } }", "utterance = ( Utterance ) list . remove First ( ) ;", "notify ( ) ;", "return utterance ; }"]}
{"ids": "52722", "code": ["public static Evaluation Result find Or Create ( Result Hierarchy hierarchy , Result parent , String name , String shortname ) {", "Array List < Evaluation Result > ers = Result Util . filter Results ( hierarchy , parent , Evaluation Result . class ) ;", "Evaluation Result ev = null ;", "for ( Evaluation Result e : ers ) {", "if ( shortname . equals ( e . get Short Name ( ) ) ) {", "ev = e ;", "break ; } }", "if ( ev == null ) {", "ev = new Evaluation Result ( name , shortname ) ;", "hierarchy . add ( parent , ev ) ; }", "return ev ; }"]}
{"ids": "51591", "code": ["public boolean is Connected ( ) {", "return connected . get ( ) ; }"]}
{"ids": "40100", "code": ["private void try Schedule Action ( Runnable action ) {", "try {", "scheduler . submit ( action ) ; }", "catch ( Rejected Execution Exception e ) { } }"]}
{"ids": "85055", "code": ["public void add Web App Debug Model Listener ( I Web App Debug Model Listener listener ) {", "synchronized ( private Instance Lock ) {", "web App Debug Model Listeners . add ( listener ) ; } }"]}
{"ids": "64541", "code": ["public void reset Policy ( ) {", "m Preferences . put String ( PREF LAST RESPONSE , Integer . to String ( Policy . RETRY ) ) ;", "set Retry Until ( DEFAULT RETRY UNTIL ) ;", "set Max Retries ( DEFAULT MAX RETRIES ) ;", "set Retry Count ( Long . parse Long ( DEFAULT RETRY COUNT ) ) ;", "set Validity Timestamp ( DEFAULT VALIDITY TIMESTAMP ) ;", "m Preferences . commit ( ) ; }"]}
{"ids": "61641", "code": ["public void simulate Method ( Soot Method method , Reference Variable this Var , Reference Variable return Var , Reference Variable params [ ] ) {", "String sub Signature = method . get Sub Signature ( ) ;", "if ( sub Signature . equals ( STR_ ) ) {", "java lang Security Manager get Class Context ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang Security Manager current Class Loader 0 ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang Security Manager current Loaded Class 0 ( method , this Var , return Var , params ) ;", "return ; }", "else {", "default Method ( method , this Var , return Var , params ) ;", "return ; } }"]}
{"ids": "78790", "code": ["public static boolean is File Exists ( final String path ) {", "if ( Text Utils . is Empty ( path ) ) {", "Log . e ( File Utils . class , STR_ ) ;", "return false ; }", "final File file To Check = new File ( path ) ;", "return file To Check . exists ( ) && ! file To Check . is Directory ( ) ; }"]}
{"ids": "9838", "code": ["private List < Reference > create Signature References ( XML Signature Factory xml Sig Factory , List < String > reference Id List ) throws No Such Algorithm Exception , Invalid Algorithm Parameter Exception {", "List < Reference > result = new Array List < Reference > ( ) ;", "for ( String ref Id : reference Id List ) {", "if ( ref Id == null ) {", "continue ; }", "Reference ref = xml Sig Factory . new Reference ( STR_ + ref Id , xml Sig Factory . new Digest Method ( Digest Method . SHA 512 , null ) , Collections . singleton List ( xml Sig Factory . new Canonicalization Method ( Canonicalization Method . EXCLUSIVE , ( C 14 N Method Parameter Spec ) null ) ) , null , null ) ;", "result . add ( ref ) ; }", "return Collections . unmodifiable List ( result ) ; }"]}
{"ids": "59908", "code": ["public boolean remove Network Connection ( Network Connection network Connection ) {", "return network Connections . remove ( network Connection ) ; }"]}
{"ids": "38240", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = new Vector < Option > ( ) ;", "result . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "76153", "code": ["protected Object convert Array ( Object value ) {", "return value ; }"]}
{"ids": "488", "code": ["public static String encode String ( String s ) {", "return new String ( encode ( s . get Bytes ( ) ) ) ; }"]}
{"ids": "31819", "code": ["Grid Lucene File ( Grid Lucene Directory dir ) {", "this . dir = dir ;", "files Cnt . increment And Get ( ) ; }"]}
{"ids": "18209", "code": ["public void add Attributes ( Attributes atts ) throws SAX Exception {", "int n Atts = atts . get Length ( ) ;", "for ( int i = NUM_ ; i < n Atts ; i ++ ) {", "String uri = atts . get URI ( i ) ;", "if ( null == uri ) uri = STR_ ;", "add Attribute Always ( uri , atts . get Local Name ( i ) , atts . get Q Name ( i ) , atts . get Type ( i ) , atts . get Value ( i ) , false ) ; } }"]}
{"ids": "52626", "code": ["public synchronized void add Pan Listener ( Pan Listener listener ) {", "m Pan Listeners . add ( listener ) ; }"]}
{"ids": "5033", "code": ["public double distance weighted ( Pla Point Float p other , double p horizontal weight , double p vertical weight ) {", "double delta x = v x - p other . v x ;", "double delta y = v y - p other . v y ;", "delta x *= p horizontal weight ;", "delta y *= p vertical weight ;", "double result = Math . sqrt ( delta x * delta x + delta y * delta y ) ;", "return result ; }"]}
{"ids": "872", "code": ["public Name Space swap ( Name Space new Top ) {", "Name Space old Top = ( Name Space ) ( stack . element At ( NUM_ ) ) ;", "stack . set Element At ( new Top , NUM_ ) ;", "return old Top ; }"]}
{"ids": "75521", "code": ["public static List < String > classes Path ( ) throws File Not Found Exception , Loading File Exception {", "List < File > files = get Java Files ( ) ;", "List < String > paths = new Array List < String > ( ) ;", "for ( File file : files ) paths . add ( file . get Path ( ) ) ;", "return paths ; }"]}
{"ids": "42935", "code": ["public static Number sub ( Number a , Number b ) {", "if ( is Floating Point ( a ) || is Floating Point ( b ) ) {", "return a . double Value ( ) - b . double Value ( ) ; }", "else {", "return a . long Value ( ) - b . long Value ( ) ; } }"]}
{"ids": "56697", "code": ["public static Stream < String > words Of ( String text ) {", "require Non Null ( text ) ;", "return WORDS . split As Stream ( text ) ; }"]}
{"ids": "33153", "code": ["public static Delete Participant [ ] load Delete Participants ( Refactoring Status status , Refactoring Processor processor , Object element , Delete Arguments arguments , I Participant Descriptor Filter filter , String [ ] affected Natures , Sharable Participants shared ) {", "Refactoring Participant [ ] participants = fg Delete Instance . get Participants ( status , processor , element , arguments , filter , affected Natures , shared ) ;", "Delete Participant [ ] result = new Delete Participant [ participants . length ] ;", "System . arraycopy ( participants , NUM_ , result , NUM_ , participants . length ) ;", "return result ; }"]}
{"ids": "82924", "code": ["public Put Result ( String success Count , String fail Count , List < String > error Messages ) {", "success Count = success Count ;", "fail Count = fail Count ;", "error Messages = new Array List < > ( ) ;", "if ( error Messages != null ) {", "error Messages . add All ( error Messages ) ; } }"]}
{"ids": "51437", "code": ["@ Override public int hash Code ( ) {", "int my Position = position ;", "int hash = NUM_ ;", "while ( my Position < limit ) {", "hash = hash + get ( my Position ++ ) ; }", "return hash ; }"]}
{"ids": "5978", "code": ["public void print ( Char Sequence text ) throws IO Exception {", "int size = text . length ( ) ;", "int pos = NUM_ ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "if ( text . char At ( i ) == STR_ ) {", "write ( text . sub Sequence ( pos , size ) , i - pos + NUM_ ) ;", "pos = i + NUM_ ;", "at Start Of Line = true ; } }", "write ( text . sub Sequence ( pos , size ) , size - pos ) ; }"]}
{"ids": "29165", "code": ["public void close Running App ( String device ID , String app package ) throws Interrupted Exception , IO Exception {", "cmd . run Command ( STR_ + device ID + STR_ + app package ) ; }"]}
{"ids": "68505", "code": ["public boolean filterout Invalidation ( T tag , Tag Quality Status status To Add , String status Description , Timestamp timestamp ) {", "return filterout ( tag , tag . get Value ( ) , tag . get Value Description ( ) , status To Add , status Description , timestamp ) ; }"]}
{"ids": "79916", "code": ["public void bind Y ( Double Property y Property ) {", "min Y World . bind ( y Property . add ( get Min Y ( ) ) ) ;", "max Y World . bind ( min Y World . add ( get Height ( ) ) ) ; }"]}
{"ids": "17810", "code": ["private void copy Field Attributes ( ) {", "if ( ( load Fields == null ) || fields == null ) {", "return ; }", "for ( int i = NUM_ ; i < load Fields . length ; i ++ ) {", "Object Stream Field load Field = load Fields [ i ] ;", "String name = load Field . get Name ( ) ;", "for ( int j = NUM_ ; j < fields . length ; j ++ ) {", "Object Stream Field field = fields [ j ] ;", "if ( name . equals ( field . get Name ( ) ) ) {", "load Field . set Unshared ( field . is Unshared ( ) ) ;", "load Field . set Offset ( field . get Offset ( ) ) ;", "break ; } } } }"]}
{"ids": "132", "code": ["public static Uri . Builder append Id ( Uri . Builder builder , long id ) {", "return builder . append Encoded Path ( String . value Of ( id ) ) ; }"]}
{"ids": "83630", "code": ["private static void begin Starting Service ( Context context , Intent intent ) {", "synchronized ( s Starting Service Sync ) {", "if ( s Starting Service == null ) {", "Power Manager pm = ( Power Manager ) context . get System Service ( Context . POWER SERVICE ) ;", "s Starting Service = pm . new Wake Lock ( Power Manager . PARTIAL WAKE LOCK , STR_ ) ; }", "s Starting Service . acquire ( ) ;", "if ( context . start Service ( intent ) == null ) {", "Log . e ( TAG , STR_ ) ; } } }"]}
{"ids": "49848", "code": ["private Rect calc Bounds ( int index , Paint paint ) {", "Rect bounds = new Rect ( ) ;", "Char Sequence title = get Title ( index ) ;", "bounds . right = ( int ) paint . measure Text ( title , NUM_ , title . length ( ) ) ;", "bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ;", "return bounds ; }"]}
{"ids": "32878", "code": ["public static double stddev ( double [ ] a ) {", "return Math . sqrt ( var ( a ) ) ; }"]}
{"ids": "27070", "code": ["public Simple Arguments Bundle ( @ Non Null Map < String , String > arguments , @ Non Null Display Metrics metrics ) {", "m Arguments = arguments ;", "m Metrics = metrics ; }"]}
{"ids": "67707", "code": ["public static String collapse Whitespace ( String str ) {", "return collapse ( str , WHITE SPACES , STR_ ) ; }"]}
{"ids": "35344", "code": ["private void adjust ASI And Collect Follow Elements ( Custom Internal N 4 JS Parser previous Parser , boolean strict , Set < Follow Element > result ) {", "Observable Xtext Token Stream tokens = ( Observable Xtext Token Stream ) previous Parser . get Token Stream ( ) ;", "int last Token Index = tokens . size ( ) - NUM_ ;", "if ( last Token Index >= NUM_ ) {", "Common Token last Token = ( Common Token ) tokens . LT ( - NUM_ ) ;", "@ Suppress Warnings ( STR_ ) List < Token > token List = tokens . get Tokens ( ) ;", "if ( last Token == null ) {", "return ; }", "if ( should Skip ASI ( last Token ) ) {", "if ( may Skip ASI ( last Token , tokens ) ) {", "token List . remove ( last Token Index ) ;", "result . add All ( reset And Get Follow Elements ( tokens , strict ) ) ;", "remove Postfix Operator ( result ) ; } }", "else if ( should Add Synthetic Semicolon ( previous Parser , last Token Index , last Token ) ) {", "Common Token token = new Common Token ( semi ) ;", "token List . add ( token ) ;", "result . add All ( reset And Get Follow Elements ( tokens , strict ) ) ;", "remove Postfix Operator ( result ) ; } } }"]}
{"ids": "67559", "code": ["public Linked List < Patch > patch make ( String text 1 , String text 2 ) {", "if ( text 1 == null || text 2 == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Linked List < Diff > diffs = diff main ( text 1 , text 2 , true ) ;", "if ( diffs . size ( ) > NUM_ ) {", "diff cleanup Semantic ( diffs ) ;", "diff cleanup Efficiency ( diffs ) ; }", "return patch make ( text 1 , diffs ) ; }"]}
{"ids": "22132", "code": ["private boolean is Minor Version Upgrade ( String current Version , String target Version ) {", "String current Db Schema Version = Vdc Util . get Db Schema Version ( current Version ) ;", "if ( current Db Schema Version == null ) {", "return false ; }", "return current Db Schema Version . equals ( Vdc Util . get Db Schema Version ( target Version ) ) ; }"]}
{"ids": "53120", "code": ["public static final void exception ( Throwable e ) {", "log Expensive ( Level . SEVERE , e . get Message ( ) , e ) ; }"]}
{"ids": "16576", "code": ["private static Default Alignment value Of ( String str , boolean is Horizontal ) {", "if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) {", "return FILL ALIGN ; }", "else if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) {", "return CENTER ALIGN ; }", "else if ( is Horizontal ) {", "if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) {", "return RIGHT ALIGN ; }", "else if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) {", "return LEFT ALIGN ; }", "else {", "return null ; } }", "else if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) {", "return TOP ALIGN ; }", "else if ( str . equals ( STR_ ) || str . equals ( STR_ ) ) {", "return BOTTOM ALIGN ; }", "else {", "return null ; } }"]}
{"ids": "82601", "code": ["public void combine Sets ( Hash Map < String , Set < String > > container Affinities , Operator Pair pair ) {", "Set < String > set 1 = container Affinities . get ( pair . first ) ;", "Set < String > set 2 = container Affinities . get ( pair . second ) ;", "set 1 . add All ( set 2 ) ;", "container Affinities . put ( pair . first , set 1 ) ;", "container Affinities . put ( pair . second , set 1 ) ; }"]}
{"ids": "46365", "code": ["protected void fire Property Change ( String property Name , Object old Value , Object new Value ) {", "property Change Support . fire Property Change ( property Name , old Value , new Value ) ; }"]}
{"ids": "38763", "code": ["@ Override public boolean is Busy ( ) {", "return ( m split Thread != null ) ; }"]}
{"ids": "26409", "code": ["public static < E > boolean is Not Empty ( Char Sequence c ) {", "return ( ( c != null ) && ( c . length ( ) > NUM_ ) ) ; }"]}
{"ids": "55605", "code": ["private void add Info Button ( J Panel panel , Object o , String client Prop ) {", "J Button h Button ;", "h Button = new J Button ( o . to String ( ) ) ;", "h Button . put Client Property ( client Prop , o ) ;", "h Button . add Action Listener ( this ) ;", "h Button . set Font ( font ) ;", "h Button . set Margin ( new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "h Button . set Background ( LOG BUTTON BG ) ;", "panel . add ( h Button ) ; }"]}
{"ids": "73424", "code": ["public void remove Network Listener ( Network Listener network Listener ) {", "network Listeners . remove ( network Listener ) ; }"]}
{"ids": "65271", "code": ["public static String chomp ( String s ) {", "if ( s . ends With ( STR_ ) ) return s . substring ( NUM_ , s . length ( ) - NUM_ ) ;", "if ( s . ends With ( STR_ ) || s . ends With ( STR_ ) ) return s . substring ( NUM_ , s . length ( ) - NUM_ ) ;", "return s ; }"]}
{"ids": "15808", "code": ["private void validate Surrogate Settings ( ) {", "faulty Surrogates Radio Button . set Enabled ( false ) ;", "discard Surrogates Article Radio Button . set Enabled ( false ) ;", "replace Surrogates Radio Button . set Enabled ( false ) ;", "discard Surrogates Revision Radio Button . set Selected ( true ) ; }"]}
{"ids": "23852", "code": ["static Disk Id create Disk Id ( long max Oplog Size , boolean is Persistence Type , boolean needs Linked List ) {", "long bytes = max Oplog Size * NUM_ * NUM_ ;", "if ( bytes > Integer . MAX VALUE ) {", "if ( is Persistence Type ) {", "if ( needs Linked List ) {", "return new Persistence With Long Offset ( ) ; }", "else {", "return new Persistence With Long Offset No LL ( ) ; } }", "else {", "if ( needs Linked List ) {", "return new Overflow Only With Long Offset ( ) ; }", "else {", "return new Overflow Only With Long Offset No LL ( ) ; } } }", "else {", "if ( is Persistence Type ) {", "if ( needs Linked List ) {", "return new Persistence With Int Offset ( ) ; }", "else {", "return new Persistence With Int Offset No LL ( ) ; } }", "else {", "if ( needs Linked List ) {", "return new Overflow Only With Int Offset ( ) ; }", "else {", "return new Overflow Only With Int Offset No LL ( ) ; } } } }"]}
{"ids": "61379", "code": ["public void start Element ( String namespace URI , String local Name , String name , Attributes atts ) throws org . xml . sax . SAX Exception {", "Elem Context elem Context = m elem Context ;", "if ( elem Context . m start Tag Open ) {", "close Start Tag ( ) ;", "elem Context . m start Tag Open = false ; }", "else if ( m cdata Tag Open ) {", "close CDATA ( ) ;", "m cdata Tag Open = false ; }", "else if ( m need To Call Start Document ) {", "start Document Internal ( ) ;", "m need To Call Start Document = false ; }", "if ( m need To Output Doc Type Decl ) {", "String n = name ;", "if ( n == null || n . length ( ) == NUM_ ) {", "n = local Name ; }", "output Doc Type Decl ( n ) ; }", "if ( null != namespace URI && namespace URI . length ( ) > NUM_ ) {", "super . start Element ( namespace URI , local Name , name , atts ) ;", "return ; }", "try {", "Elem Desc elem Desc = get Elem Desc 2 ( name ) ;", "int elem Flags = elem Desc . get Flags ( ) ;", "if ( m do Indent ) {", "boolean is Block Element = ( elem Flags & Elem Desc . BLOCK ) != NUM_ ;", "if ( m ispreserve ) m ispreserve = false ;", "else if ( ( null != elem Context . m element Name ) && ( ! m in Block Elem || is Block Element ) ) {", "m start New Line = true ;", "indent ( ) ; }", "m in Block Elem = ! is Block Element ; }", "if ( atts != null ) add Attributes ( atts ) ;", "m isprevtext = false ;", "final java . io . Writer writer = m writer ;", "writer . write ( STR_ ) ;", "writer . write ( name ) ;", "if ( m tracer != null ) fire Pseudo Attributes ( ) ;", "if ( ( elem Flags & Elem Desc . EMPTY ) != NUM_ ) {", "m elem Context = elem Context . push ( ) ;", "m elem Context . m element Name = name ;", "m elem Context . m element Desc = elem Desc ;", "return ; }", "else {", "elem Context = elem Context . push ( namespace URI , local Name , name ) ;", "m elem Context = elem Context ;", "elem Context . m element Desc = elem Desc ;", "elem Context . m is Raw = ( elem Flags & Elem Desc . RAW ) != NUM_ ; }", "if ( ( elem Flags & Elem Desc . HEADELEM ) != NUM_ ) {", "close Start Tag ( ) ;", "elem Context . m start Tag Open = false ;", "if ( ! m omit Meta Tag ) {", "if ( m do Indent ) indent ( ) ;", "writer . write ( STR_ ) ;", "String encoding = get Encoding ( ) ;", "String encode = Encodings . get Mime Encoding ( encoding ) ;", "writer . write ( encode ) ;", "writer . write ( STR_ ) ; } } }", "catch ( IO Exception e ) {", "throw new SAX Exception ( e ) ; } }"]}
{"ids": "54392", "code": ["public static long size Of ( Class clazz ) {", "long max Size = header Size ( clazz ) ;", "while ( clazz != Object . class ) {", "for ( Field f : clazz . get Declared Fields ( ) ) {", "if ( ( f . get Modifiers ( ) & Modifier . STATIC ) == NUM_ ) {", "long offset = unsafe . object Field Offset ( f ) ;", "if ( offset > max Size ) {", "max Size = offset + NUM_ ; } } }", "clazz = clazz . get Superclass ( ) ; }", "return round Up To 8 ( max Size ) ; }"]}
{"ids": "592", "code": ["public void add Handler ( String column Name , SQL Data Handler handler ) {", "if ( m overrides == null ) m overrides = new Hash Map ( NUM_ ) ;", "m overrides . put ( column Name , handler ) ; }"]}
{"ids": "32233", "code": ["public void add Near Evicted ( Key Cache Object key ) {", "if ( near Evicted == null ) near Evicted = new Array List < > ( ) ;", "near Evicted . add ( key ) ; }"]}
{"ids": "7105", "code": ["public Word ( String word , String display As , String ... sounds Like ) {", "this ( ) ;", "this . word = word ;", "this . display As = display As ;", "this . sounds Like = Arrays . as List ( sounds Like ) ; }"]}
{"ids": "72453", "code": ["public Enumerated Distribution ( final List < Pair < T , Double > > pmf ) throws Math Illegal Argument Exception {", "singletons = new Array List < > ( pmf . size ( ) ) ;", "final double [ ] probs = new double [ pmf . size ( ) ] ;", "for ( int i = NUM_ ; i < pmf . size ( ) ; i ++ ) {", "final Pair < T , Double > sample = pmf . get ( i ) ;", "singletons . add ( sample . get Key ( ) ) ;", "final double p = sample . get Value ( ) ;", "probs [ i ] = p ; }", "probabilities = check And Normalize ( probs ) ;", "cumulative Probabilities = new double [ probabilities . length ] ;", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < probabilities . length ; i ++ ) {", "sum += probabilities [ i ] ;", "cumulative Probabilities [ i ] = sum ; } }"]}
{"ids": "84525", "code": ["@ Override public Calendar next ( ) {", "if ( spot . equals ( end Final ) ) {", "throw new No Such Element Exception ( ) ; }", "spot . add ( Calendar . DATE , NUM_ ) ;", "return ( Calendar ) spot . clone ( ) ; }"]}
{"ids": "64036", "code": ["public void pause Work ( ) {", "m Exit Tasks Early = false ;", "set Pause ( true ) ;", "if ( DEBUG ) {", "Log . d ( Log TAG , String . format ( STR_ , this ) ) ; } }"]}
{"ids": "85330", "code": ["public static List < Error Logger . Error Object > is Virtual Track In CPL Conformed ( Payload Record cpl Payload Record , Virtual Track virtual Track , List < Payload Record > essences Header Partition Payloads ) throws IO Exception {", "List < Virtual Track > virtual Tracks = new Array List < > ( ) ;", "IMF Error Logger imf Error Logger = new IMF Error Logger Impl ( ) ;", "virtual Tracks . add ( virtual Track ) ;", "imf Error Logger . add All Errors ( check Virtual Track And Essences Header Partition Payload Records ( virtual Tracks , essences Header Partition Payloads ) ) ;", "if ( imf Error Logger . has Fatal Errors ( ) ) {", "return imf Error Logger . get Errors ( ) ; }", "imf Error Logger . add All Errors ( conform Virtual Tracks In CPL ( cpl Payload Record , essences Header Partition Payloads , false ) ) ;", "return imf Error Logger . get Errors ( ) ; }"]}
{"ids": "885", "code": ["public byte receive One Byte ( ) {", "Log . d ( TAG , STR_ ) ;", "try {", "acquire Lock ( ) ;", "m Server Socket . receive ( m Receive Packet ) ;", "Log . d ( TAG , STR_ + ( NUM_ + m Receive Packet . get Data ( ) [ NUM_ ] ) ) ;", "return m Receive Packet . get Data ( ) [ NUM_ ] ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "return Byte . MIN VALUE ; }"]}
{"ids": "31245", "code": ["public static String encode ( byte [ ] input ) {", "if ( input . length == NUM_ ) {", "return STR_ ; }", "int zeros = NUM_ ;", "while ( zeros < input . length && input [ zeros ] == NUM_ ) {", "++ zeros ; }", "input = Arrays . copy Of ( input , input . length ) ;", "char [ ] encoded = new char [ input . length * NUM_ ] ;", "int output Start = encoded . length ;", "for ( int input Start = zeros ; input Start < input . length ; ) {", "encoded [ -- output Start ] = ALPHABET [ divmod ( input , input Start , NUM_ , NUM_ ) ] ;", "if ( input [ input Start ] == NUM_ ) {", "++ input Start ; } }", "while ( output Start < encoded . length && encoded [ output Start ] == ENCODED ZERO ) {", "++ output Start ; }", "while ( -- zeros >= NUM_ ) {", "encoded [ -- output Start ] = ENCODED ZERO ; }", "return new String ( encoded , output Start , encoded . length - output Start ) ; }"]}
{"ids": "51050", "code": ["public static int [ ] cells ( int [ ] start , int [ ] end ) {", "Arrays . sort ( start ) ;", "Arrays . sort ( end ) ;", "int overlap = NUM_ ;", "int gaps = NUM_ ;", "for ( int i = NUM_ , j = NUM_ ; j < end . length ; ) {", "if ( i < start . length && start [ i ] < end [ j ] ) {", "overlap ++ ;", "i ++ ; }", "else {", "j ++ ;", "overlap -- ; }", "if ( overlap == NUM_ ) {", "gaps ++ ; } }", "int [ ] cells = new int [ gaps * NUM_ ] ;", "overlap = NUM_ ;", "gaps = NUM_ ;", "int previous Overlap = NUM_ ;", "for ( int i = NUM_ , j = NUM_ ; j < end . length ; ) {", "if ( i < start . length && start [ i ] < end [ j ] ) {", "overlap ++ ;", "if ( previous Overlap == NUM_ ) {", "cells [ gaps ++ ] = start [ i ] ; }", "i ++ ; }", "else {", "overlap -- ;", "if ( overlap == NUM_ ) {", "cells [ gaps ++ ] = end [ j ] ; }", "j ++ ; }", "previous Overlap = overlap ; }", "return cells ; }"]}
{"ids": "3506", "code": ["@ Override public In Store open Read ( long address , int size ) {", "if ( file Size ( ) < address + size ) {", "throw new Illegal State Exception ( L . l ( STR_ , this , address , size , file Size ( ) ) ) ; }", "if ( is Closed . get ( ) ) {", "throw new Illegal State Exception ( L . l ( STR_ , this ) ) ; }", "if ( file Size < address + size ) {", "throw new Illegal State Exception ( L . l ( STR_ , Long . to Hex String ( address ) , size ) ) ; }", "try {", "stream Open ( address , size ) ;", "return open Read Impl ( address , size ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "70703", "code": ["List < Address > geo Decode ( String searched Location ) {", "try {", "Geocoder geo = new Geocoder ( s Context , Locale . get Default ( ) ) ;", "List < Address > addresses = geo . get From Location Name ( searched Location , NUM_ ) ;", "if ( addresses != null && addresses . size ( ) > NUM_ ) {", "return addresses ; } }", "catch ( Exception ex ) { }", "return null ; }"]}
{"ids": "10095", "code": ["private boolean is Identifier Start Char ( int position ) {", "if ( len >= NUM_ && position >= len ) {", "return false ; }", "char ch = working [ position ] ;", "return Character . is Unicode Identifier Start ( ch ) ; }"]}
{"ids": "68080", "code": ["public void destroy ( ) {", "fallback Storage . clear ( ) ;", "File Utils . delete Quietly ( fallback Storage File ) ; }"]}
{"ids": "7261", "code": ["public static Select Clause create ( String ... property Names ) {", "List < Select Clause Element > select List = new Array List < Select Clause Element > ( ) ;", "for ( String name : property Names ) {", "select List . add ( new Select Clause Expression ( new Property Value Expression ( name ) ) ) ; }", "return new Select Clause ( Stream Selector . ISTREAM ONLY , select List ) ; }"]}
{"ids": "12996", "code": ["Configuration Error ( String msg , Exception x ) {", "super ( msg ) ;", "this . exception = x ; }"]}
{"ids": "53031", "code": ["public static String make Margin Transform ( double owidth , double oheight , double iwidth , double iheight , double lmargin , double tmargin , double rmargin , double bmargin ) {", "double swidth = iwidth + lmargin + rmargin ;", "double sheight = iheight + tmargin + bmargin ;", "double scale = Math . max ( swidth / owidth , sheight / oheight ) ;", "double offx = ( scale * owidth - swidth ) * NUM_ + lmargin ;", "double offy = ( scale * oheight - sheight ) * NUM_ + tmargin ;", "return STR_ + fmt ( NUM_ / scale ) + STR_ + fmt ( offx ) + STR_ + fmt ( offy ) + STR_ ; }"]}
{"ids": "34758", "code": ["public static boolean is Attachment ( String content Disposition ) {", "return content Disposition != null && content Disposition . region Matches ( true , NUM_ , STR_ , NUM_ , NUM_ ) ; }"]}
{"ids": "73558", "code": ["private J Menu create Insert Menu ( ) {", "J Menu insert Menu = new J Menu ( STR_ ) ;", "insert Menu . add ( action Manager . get New Network Action ( ) ) ;", "J Menu new Gauge Sub Menu = new J Menu ( STR_ ) ;", "for ( Action action : action Manager . get Plot Actions ( ) ) {", "new Gauge Sub Menu . add ( action ) ; }", "insert Menu . add ( new Gauge Sub Menu ) ;", "J Menu new World Sub Menu = new J Menu ( STR_ ) ;", "for ( Action action : action Manager . get New World Actions ( ) ) {", "new World Sub Menu . add ( action ) ; }", "insert Menu . add ( new World Sub Menu ) ;", "insert Menu . add Separator ( ) ;", "insert Menu . add ( action Manager . get New Doc Viewer Action ( ) ) ;", "insert Menu . add ( action Manager . get New Console Action ( ) ) ;", "return insert Menu ; }"]}
{"ids": "39212", "code": ["public static Vector < String > find Packages ( ) {", "Vector < String > result ;", "Enumeration < String > packages ;", "init Cache ( ) ;", "result = new Vector < String > ( ) ;", "packages = m Class Cache . packages ( ) ;", "while ( packages . has More Elements ( ) ) {", "result . add ( packages . next Element ( ) ) ; }", "Collections . sort ( result , new String Compare ( ) ) ;", "return result ; }"]}
{"ids": "73661", "code": ["public static String convert System Name To Alternate ( String system Name ) {", "if ( ! valid System Name Format ( system Name , system Name . char At ( NUM_ ) , STR_ ) ) {", "return STR_ ; }", "String alt Name = STR_ ;", "alt Name = system Name ;", "return alt Name ; }"]}
{"ids": "16580", "code": ["private void initialize User Directives ( ) {", "user Directives = new Array List < > ( ) ;", "I Eclipse Preferences preferences = Velocity Core Plugin . get Preferences ( ) ;", "String directives = preferences . get ( I Preferences Constants . VELOCITY USER DIRECTIVES , STR_ ) ;", "String Tokenizer st = new String Tokenizer ( directives , STR_ ) ;", "while ( st . has More Elements ( ) ) {", "String directive = ( String ) st . next Element ( ) ;", "String name = directive . substring ( NUM_ , directive . index Of ( STR_ ) ) ;", "int type = ( directive . ends With ( STR_ ) ? Directive . BLOCK : Directive . LINE ) ;", "user Directives . add ( STR_ + name ) ;", "add Directive ( new Velocity Directive ( name , type ) ) ; } }"]}
{"ids": "29587", "code": ["private synchronized void store Timestamp And Set Status ( Timestamper . Timestamp Succeeded message , Timestamp Record timestamp Record ) throws Exception {", "try {", "persist Timestamp Record ( message , timestamp Record ) ;", "set Timestamp Succeeded ( ) ; }", "catch ( Exception e ) {", "log . error ( STR_ , e ) ;", "set Timestamp Failed Regardless Of Queue ( new Date Time ( ) ) ;", "throw e ; } }"]}
{"ids": "10144", "code": ["public static Character [ ] values Of ( char [ ] array ) {", "Character [ ] dest = new Character [ array . length ] ;", "for ( int i = NUM_ ; i < array . length ; i ++ ) {", "dest [ i ] = Character . value Of ( array [ i ] ) ; }", "return dest ; }"]}
{"ids": "46804", "code": ["public void mark ( int readlimit ) {", "stream . mark ( readlimit ) ;", "if ( mark Supported ( ) ) {", "markpos = frame Pos ;", "mark Push Back Len = push Back Len ;", "if ( mark Push Back Len > NUM_ ) {", "if ( mark Push Back Buffer == null ) {", "mark Push Back Buffer = new byte [ frame Size ] ; }", "System . arraycopy ( push Back Buffer , NUM_ , mark Push Back Buffer , NUM_ , mark Push Back Len ) ; } } }"]}
{"ids": "932", "code": ["public static boolean needs Default Formatter ( Value Formatter formatter ) {", "if ( formatter == null ) return true ;", "if ( formatter instanceof Default Value Formatter ) return true ;", "return false ; }"]}
{"ids": "13097", "code": ["public boolean put Grammar ( Schema Grammar grammar , boolean deep , boolean ignore Conflict ) {", "if ( ! ignore Conflict ) {", "return put Grammar ( grammar , deep ) ; }", "Schema Grammar sg = get Grammar ( grammar . f Target Namespace ) ;", "if ( sg == null ) {", "put Grammar ( grammar ) ; }", "if ( ! deep ) {", "return true ; }", "Vector curr Grammars = grammar . get Imported Grammars ( ) ;", "if ( curr Grammars == null ) {", "return true ; }", "Vector grammars = ( ( Vector ) curr Grammars . clone ( ) ) ;", "Schema Grammar sg 1 , sg 2 ;", "Vector gs ;", "for ( int i = NUM_ ; i < grammars . size ( ) ; i ++ ) {", "sg 1 = ( Schema Grammar ) grammars . element At ( i ) ;", "sg 2 = get Grammar ( sg 1 . f Target Namespace ) ;", "if ( sg 2 == null ) {", "gs = sg 1 . get Imported Grammars ( ) ;", "if ( gs == null ) continue ;", "for ( int j = gs . size ( ) - NUM_ ; j >= NUM_ ; j -- ) {", "sg 2 = ( Schema Grammar ) gs . element At ( j ) ;", "if ( ! grammars . contains ( sg 2 ) ) grammars . add Element ( sg 2 ) ; } }", "else {", "grammars . remove ( sg 1 ) ; } }", "for ( int i = grammars . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "put Grammar ( ( Schema Grammar ) grammars . element At ( i ) ) ; }", "return true ; }"]}
{"ids": "32001", "code": ["public List < N > nodes ( @ Nullable Object key , int cnt ) {", "return nodes ( key , cnt , null , null ) ; }"]}
{"ids": "7148", "code": ["public boolean is Exists Key ( Connection connection , Object [ ] keys ) {", "String Builder builder = new String Builder ( ) ;", "builder . append ( STR_ ) ;", "builder . append ( table Name ) ;", "builder . append ( STR_ ) ;", "String delimiter = STR_ ;", "for ( String key Field : key Field Names ) {", "builder . append ( delimiter ) ;", "builder . append ( key Field ) ;", "builder . append ( STR_ ) ;", "delimiter = STR_ ; }", "String query = builder . to String ( ) ;", "Prepared Statement statement = null ;", "try {", "if ( ( Execution Path Debug Log . is Debug Enabled ) && ( log . is Debug Enabled ( ) ) ) {", "log . debug ( STR_ + query + STR_ + print ( keys ) + STR_ ) ; }", "statement = connection . prepare Statement ( query ) ;", "for ( int i = NUM_ ; i < keys . length ; i ++ ) {", "statement . set Object ( i + NUM_ , keys [ i ] ) ; }", "Result Set rs = statement . execute Query ( ) ;", "if ( ! rs . next ( ) ) {", "return false ; }", "return true ; }", "catch ( SQL Exception ex ) {", "String message = STR_ + query + STR_ + ex . get Message ( ) ;", "log . error ( message , ex ) ;", "store Exception Handler . handle ( message , ex ) ;", "throw new Store Exception DB Rel ( message , ex ) ; }", "finally {", "try {", "if ( statement != null ) statement . close ( ) ; }", "catch ( SQL Exception e ) { } } }"]}
{"ids": "86313", "code": ["public static < T > T implement ( Class < T > type , Object object ) {", "if ( type . is Instance ( object ) ) {", "return type . cast ( object ) ; }", "return type . cast ( Proxy . new Proxy Instance ( type . get Class Loader ( ) , new Class [ ] { type } , new Duck Type ( object ) ) ) ; }"]}
{"ids": "21422", "code": ["public boolean is Ivr Vsan ( int vsan Id ) {", "boolean in Range = vsans . contains ( vsan Id ) ;", "if ( ! in Range ) {", "for ( Int Range range : get Vsans Ranges ( ) ) {", "in Range = range . contains Integer ( vsan Id ) ;", "if ( in Range ) {", "break ; } } }", "return in Range ; }"]}
{"ids": "65835", "code": ["private void add BOM Lines ( M Product product , Big Decimal qty ) {", "MPP Product BOM bom = MPP Product BOM . get Default ( product , null ) ;", "MPP Product BOM Line [ ] bom Lines = bom . get Lines ( true ) ;", "for ( int i = NUM_ ; i < bom Lines . length ; i ++ ) add BOM Line ( bom Lines [ i ] , qty ) ;", "log . fine ( STR_ + bom Lines . length ) ; }"]}
{"ids": "23952", "code": ["private Query Exp build Optional Query Exp ( final String [ ] attributes , final Object [ ] values ) {", "Query Exp query Exp = null ;", "for ( int i = NUM_ ; i < attributes . length ; i ++ ) {", "if ( values [ i ] instanceof Boolean ) {", "if ( query Exp == null ) {", "query Exp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( ( Boolean ) values [ i ] ) ) ) ; }", "else {", "query Exp = Query . and ( query Exp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( ( Boolean ) values [ i ] ) ) ) ) ; } }", "else if ( values [ i ] instanceof Number ) {", "if ( query Exp == null ) {", "query Exp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( Number ) values [ i ] ) ) ; }", "else {", "query Exp = Query . and ( query Exp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( Number ) values [ i ] ) ) ) ; } }", "else if ( values [ i ] instanceof String ) {", "if ( query Exp == null ) {", "query Exp = Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( String ) values [ i ] ) ) ; }", "else {", "query Exp = Query . and ( query Exp , Query . eq ( Query . attr ( attributes [ i ] ) , Query . value ( ( String ) values [ i ] ) ) ) ; } } }", "return query Exp ; }"]}
{"ids": "29395", "code": ["public final boolean at ( String str , Char Sequence csq ) {", "int i = index ;", "int length = csq . length ( ) ;", "for ( int j = NUM_ ; j < str . length ( ) ; ) {", "if ( ( i >= length ) || ( str . char At ( j ++ ) != csq . char At ( i ++ ) ) ) return false ; }", "return true ; }"]}
{"ids": "41400", "code": ["public static int find Last Of ( String container , String char Seq , int begin ) {", "for ( int i = begin ; i < container . length ( ) && i >= NUM_ ; -- i ) {", "if ( char Seq . contains ( STR_ + container . char At ( i ) ) ) return i ; }", "return - NUM_ ; }"]}
{"ids": "58301", "code": ["private static Cookie Origin adjust Effective Host ( final Cookie Origin origin ) {", "String host = origin . get Host ( ) ;", "boolean is Local Host = true ;", "for ( int i = NUM_ ; i < host . length ( ) ; i ++ ) {", "char ch = host . char At ( i ) ;", "if ( ch == STR_ || ch == STR_ ) {", "is Local Host = false ;", "break ; } }", "if ( is Local Host ) {", "host += STR_ ;", "return new Cookie Origin ( host , origin . get Port ( ) , origin . get Path ( ) , origin . is Secure ( ) ) ; }", "else {", "return origin ; } }"]}
{"ids": "35325", "code": ["public boolean add Bound ( Type Bound bound ) {", "if ( bound . is Trivial ( ) ) {", "return false ; }", "final boolean was Added = internal add Bound ( bound ) ;", "if ( DEBUG ) {", "final String suffix = was Added ? STR_ : STR_ ;", "log ( STR_ + bound + suffix ) ; }", "return was Added ; }"]}
{"ids": "22828", "code": ["public boolean remove ( Sim Event event ) {", "return sorted Set . remove ( event ) ; }"]}
{"ids": "83074", "code": ["public static final void print Thread Cpu Time ( final Thread thread ) {", "if ( tbe . is Thread Cpu Time Enabled ( ) ) {", "log . info ( STR_ + thread . get Name ( ) + STR_ + get Thread Cpu Time ( thread ) + STR_ ) ; } }"]}
{"ids": "77051", "code": ["public static Version from Bits ( int major , int minor , int bugfix ) {", "return new Version ( major , minor , bugfix ) ; }"]}
{"ids": "5552", "code": ["private static I Multi Point [ ] random Points ( int n , int d , int scale ) {", "I Multi Point points [ ] = new I Multi Point [ n ] ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "String Builder sb = new String Builder ( ) ;", "for ( int j = NUM_ ; j < d ; j ++ ) {", "sb . append ( r Gen . next Double ( ) * scale ) ;", "if ( j < d - NUM_ ) {", "sb . append ( STR_ ) ; } }", "points [ i ] = new Hyperpoint ( sb . to String ( ) ) ; }", "return points ; }"]}
{"ids": "63938", "code": ["public static String bytes To String ( int [ ] b ) {", "if ( b . length < NUM_ ) {", "return STR_ ; }", "return String . format ( STR_ , b [ NUM_ ] , b [ NUM_ ] , b [ NUM_ ] , b [ NUM_ ] ) ; }"]}
{"ids": "72874", "code": ["private String convert To Iso Date Time ( String human Readable Date Time ) throws Parse Exception {", "Date Format df Initial = new Simple Date Format ( STR_ ) ;", "Date initial Date Time = df Initial . parse ( human Readable Date Time ) ;", "Date Format df = new Simple Date Format ( STR_ ) ;", "return df . format ( initial Date Time ) ; }"]}
{"ids": "47622", "code": ["private static boolean class Names Equal ( String name 1 , String name 2 ) {", "name 1 = name 1 . substring ( name 1 . last Index Of ( STR_ ) + NUM_ ) ;", "name 2 = name 2 . substring ( name 2 . last Index Of ( STR_ ) + NUM_ ) ;", "return name 1 . equals ( name 2 ) ; }"]}
{"ids": "15617", "code": ["public boolean opt Boolean ( int index ) {", "return opt Boolean ( index , false ) ; }"]}
{"ids": "43207", "code": ["public Command Builder with Long Switch If Present ( Map < String , Object > properties , String ... keys ) {", "with Long Switch If Present ( properties , Unary Operator . identity ( ) , keys ) ;", "return this ; }"]}
{"ids": "26939", "code": ["private static boolean has Specialized Handler Intents ( Context context , Intent intent ) {", "try {", "Package Manager pm = context . get Package Manager ( ) ;", "List < Resolve Info > handlers = pm . query Intent Activities ( intent , Package Manager . GET RESOLVED FILTER ) ;", "if ( handlers == null || handlers . size ( ) == NUM_ ) {", "return false ; }", "for ( Resolve Info resolve Info : handlers ) {", "Intent Filter filter = resolve Info . filter ;", "if ( filter == null ) continue ;", "if ( filter . count Data Authorities ( ) == NUM_ || filter . count Data Paths ( ) == NUM_ ) continue ;", "if ( resolve Info . activity Info == null ) continue ;", "return true ; } }", "catch ( Runtime Exception e ) {", "Log . e ( TAG , STR_ ) ; }", "return false ; }"]}
{"ids": "42016", "code": ["private void on Collection Clicked ( Long collection Id ) {", "Intent intent = new Intent ( this , Product List Activity . class ) ;", "if ( collection Id != null ) {", "intent . put Extra ( Product List Activity . EXTRA COLLECTION ID , collection Id ) ; }", "start Activity ( intent ) ; }"]}
{"ids": "83179", "code": ["public void add Frequency ( Frequency frequency ) {", "frequencies . add ( frequency ) ; }"]}
{"ids": "29138", "code": ["private static @ Nonnull URL [ ] create Classloader Urls ( @ Nonnull URL url ) throws Plugin Exception {", "List < URL > urls = new Array List < URL > ( ) ;", "urls . add ( url ) ;", "Manifest mf = null ;", "File f = new File ( url . get Path ( ) ) ;", "if ( ! f . is Directory ( ) ) {", "Jar Input Stream jis = null ;", "try {", "jis = new Jar Input Stream ( url . open Stream ( ) ) ;", "mf = jis . get Manifest ( ) ; }", "catch ( IO Exception ioe ) {", "throw new Plugin Exception ( STR_ + url , ioe ) ; }", "finally {", "IO . close ( jis ) ; } }", "else {", "File manifest = guess Manifest ( f ) ;", "if ( manifest != null ) {", "File Input Stream is = null ;", "try {", "is = new File Input Stream ( manifest ) ;", "mf = new Manifest ( is ) ; }", "catch ( IO Exception e ) {", "throw new Plugin Exception ( STR_ + url , e ) ; }", "finally {", "IO . close ( is ) ; } } }", "if ( mf != null ) {", "try {", "add Class Path From Manifest ( url , urls , mf ) ; }", "catch ( Malformed URL Exception e ) {", "throw new Plugin Exception ( STR_ + url , e ) ; } }", "return urls . to Array ( new URL [ urls . size ( ) ] ) ; }"]}
{"ids": "45506", "code": ["@ Override public void write ( String str , int st , int end ) throws IO Exception {", "out . write ( str , st , end ) ; }"]}
{"ids": "86498", "code": ["public boolean is Awake ( ) {", "return is Awake ; }"]}
{"ids": "365", "code": ["private static void transfer Streams ( Input Stream source , Output Stream destination ) {", "byte [ ] buffer = new byte [ NUM_ ] ;", "try {", "while ( true ) {", "int bytes Read = - NUM_ ;", "try {", "bytes Read = source . read ( buffer ) ; }", "catch ( IO Exception e ) {", "return ; }", "if ( bytes Read == - NUM_ ) break ;", "try {", "destination . write ( buffer , NUM_ , bytes Read ) ; }", "catch ( IO Exception e ) {", "return ; } } }", "finally {", "try {", "source . close ( ) ; }", "catch ( IO Exception e ) { }", "finally {", "try {", "destination . close ( ) ; }", "catch ( IO Exception e ) { } } } }"]}
{"ids": "82566", "code": ["public static void gc ( ) {", "if ( started Gc ) {", "force Gc = true ;", "gc Should Loop = true ; }", "start GC Thread ( ) ;", "synchronized ( LOCK ) {", "LOCK . notify ( ) ; }", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception er ) { } }"]}
{"ids": "31829", "code": ["private Array List < E > to Array List ( ) {", "Array List < E > list = new Array List < E > ( ) ;", "for ( Node < E > p = first ( ) ; p != null ; p = succ ( p ) ) {", "E item = p . item ;", "if ( item != null ) list . add ( item ) ; }", "return list ; }"]}
{"ids": "36536", "code": ["public static Blob Entry is Blob Entry For Storing ( String repository Location , String mime Type ) {", "Repository Location location ;", "try {", "location = new Repository Location ( repository Location ) ;", "Entry entry = location . locate Entry ( ) ;", "if ( entry instanceof Blob Entry ) {", "Blob Entry blob Entry = ( Blob Entry ) entry ;", "if ( mime Type . equals ( blob Entry . get Mime Type ( ) ) ) {", "return blob Entry ; }", "else {", "Swing Tools . show Simple Error Message ( STR_ , blob Entry . get Name ( ) ) ;", "return null ; } }", "else if ( entry == null ) {", "return create Blob Entry ( repository Location ) ; }", "else {", "Swing Tools . show Simple Error Message ( STR_ , entry . get Name ( ) ) ; } }", "catch ( Repository Exception e ) {", "Swing Tools . show Simple Error Message ( STR_ , e ) ; }", "catch ( Malformed Repository Location Exception e ) {", "Swing Tools . show Simple Error Message ( STR_ , e ) ; }", "return null ; }"]}
{"ids": "45674", "code": ["@ Request Mapping ( value = { STR_ , STR_ } , method = Request Method . PUT ) @ Response Body public Rest Wrapper insert ( @ Model Attribute ( STR_ ) @ Valid Batch batch , Binding Result binding Result , Principal principal ) {", "Rest Wrapper rest Wrapper = null ;", "if ( binding Result . has Errors ( ) ) {", "Binding Result Error binding Result Error = new Binding Result Error ( ) ;", "return binding Result Error . error Message ( binding Result ) ; }", "try {", "com . wipro . ats . bdre . md . dao . jpa . Batch jpa Batch = new com . wipro . ats . bdre . md . dao . jpa . Batch ( ) ;", "jpa Batch . set Batch Type ( batch . get Batch Type ( ) ) ;", "Instance Exec instance Exec = new Instance Exec ( ) ;", "if ( batch . get Source Instance Exec Id ( ) != null ) {", "instance Exec . set Instance Exec Id ( batch . get Source Instance Exec Id ( ) ) ;", "jpa Batch . set Instance Exec ( instance Exec ) ; }", "Long auto Gen Batch Id = batch DAO . insert ( jpa Batch ) ;", "batch . set Batch Id ( auto Gen Batch Id ) ;", "rest Wrapper = new Rest Wrapper ( batch , Rest Wrapper . OK ) ;", "LOGGER . info ( RECORDWITHID + batch . get Batch Id ( ) + STR_ + principal . get Name ( ) + batch ) ; }", "catch ( Metadata Exception e ) {", "LOGGER . error ( e ) ;", "rest Wrapper = new Rest Wrapper ( e . get Message ( ) , Rest Wrapper . ERROR ) ; }", "return rest Wrapper ; }"]}
{"ids": "7028", "code": ["private void on Click Gallery Image ( final Recent Media a Media Item ) {", "if ( null != m Camera ) {", "m Camera . stop Preview ( ) ; }", "m Selected Gallery Items List . add ( a Media Item ) ;", "if ( ( null != a Media Item . m Thumbnail ) && ! m Is Avatar Mode ) {", "update Ui Configuration ( UI SHOW TAKEN IMAGE , IMAGE ORIGIN GALLERY ) ;", "m Image Preview Image View . set Image Bitmap ( a Media Item . m Thumbnail ) ;", "Vector App . set Saved Camera Image Preview ( a Media Item . m Thumbnail ) ; }", "else if ( null != a Media Item . m File Uri ) {", "display Image Preview ( null , null , a Media Item . m File Uri , IMAGE ORIGIN GALLERY ) ; }", "else {", "Log . e ( LOG TAG , STR_ ) ; }", "m Image Preview Image View . set Tag ( a Media Item . m File Uri ) ; }"]}
{"ids": "41222", "code": ["public void disconnect From Broker ( final Mqtt Async Connection connection ) {", "try {", "connection . disconnect ( new Mqtt Disconnection Result Handler ( ) ) ; }", "catch ( Spy Exception e ) {", "Platform . run Later ( new Mqtt Event Handler ( new Mqtt Disconnection Attempt Failure Event ( connection , e ) ) ) ;", "logger . error ( e . get Message ( ) , e ) ; } }"]}
{"ids": "53817", "code": ["public Object [ ] copy All ( ) {", "return Arrays . copy Of ( args , args . length ) ; }"]}
{"ids": "69192", "code": ["public void start ( ) {", "LOG . info ( STR_ , port , log Level ) ;", "try {", "component . start ( ) ; }", "catch ( Exception e ) {", "throw new Illegal State Exception ( STR_ , e ) ; }", "LOG . info ( STR_ , port ) ;", "running = true ;", "started = System . current Time Millis ( ) ; }"]}
{"ids": "14054", "code": ["public FS Account Fed Info read Account Fed Info ( String user ID , String provider ID ) throws FS Account Mgmt Exception {", "return read Account Fed Info ( user ID , provider ID , null ) ; }"]}
{"ids": "5607", "code": ["public Response ( String status , String mime Type , String txt ) {", "this . status = status ;", "this . mime Type = mime Type ;", "try {", "this . data = new Byte Array Input Stream ( txt . get Bytes ( STR_ ) ) ; }", "catch ( java . io . Unsupported Encoding Exception uee ) {", "uee . print Stack Trace ( ) ; } }"]}
{"ids": "29389", "code": ["@ Parallel @ Realtime ( limit = LINEAR ) public E reduce ( Binary Operator < E > operator ) {", "Iterator < E > itr = iterator ( ) ;", "if ( ! itr . has Next ( ) ) return null ;", "E accumulator = itr . next ( ) ;", "while ( itr . has Next ( ) ) accumulator = operator . apply ( accumulator , itr . next ( ) ) ;", "return accumulator ; }"]}
{"ids": "22746", "code": ["public void save History ( String filename ) throws Exception {", "File Output Stream fos = new File Output Stream ( filename ) ;", "Object Output Stream oos = new Object Output Stream ( fos ) ;", "oos . write Object ( get History ( ) ) ;", "oos . close ( ) ; }"]}
{"ids": "74815", "code": ["private void check Size ( final int i ) {", "if ( i >= max size ) {", "final int old size = max size ;", "max size += increment size ;", "if ( max size <= i ) {", "max size = i + increment size + NUM_ ; }", "final double [ ] temp = items ;", "items = new double [ max size ] ;", "System . arraycopy ( temp , NUM_ , items , NUM_ , old size ) ;", "increment size = increment Size ( increment size ) ; } }"]}
{"ids": "63555", "code": ["public double next Gaussian ( ) {", "return random . next Gaussian ( ) ; }"]}
{"ids": "80301", "code": ["private void read From Properties ( final Properties props , final boolean default Minimized , final int default X , final int default Y , final boolean default Visible ) {", "minimized = Boolean . parse Boolean ( props . get Property ( STR_ + name + STR_ , Boolean . to String ( default Minimized ) ) ) ;", "visible = Boolean . parse Boolean ( props . get Property ( STR_ + name + STR_ , Boolean . to String ( default Visible ) ) ) ;", "x = Integer . parse Int ( props . get Property ( STR_ + name + STR_ , Integer . to String ( default X ) ) ) ;", "y = Integer . parse Int ( props . get Property ( STR_ + name + STR_ , Integer . to String ( default Y ) ) ) ; }"]}
{"ids": "66063", "code": ["public boolean send E Mail Attachments ( int AD User ID , String subject , String message , Collection < File > attachments , boolean html ) {", "M User to = M User . get ( get Ctx ( ) , AD User ID ) ;", "String to E Mail = to . get E Mail ( ) ;", "if ( to E Mail == null || to E Mail . length ( ) == NUM_ ) {", "log . warning ( STR_ + to ) ;", "return false ; }", "E Mail email = create E Mail ( null , to , subject , message , html ) ;", "if ( email == null ) return false ;", "email . add Attachments ( attachments ) ;", "try {", "return send Email Now ( null , to , email ) ; }", "catch ( Exception ex ) {", "log . severe ( get Name ( ) + STR_ + ex . get Localized Message ( ) ) ;", "return false ; } }"]}
{"ids": "30389", "code": ["private void add Unit Tax Calculation Info Clone ( final Tax Calculation Info tax Cal Info , final Tax Calculation Info clone ) {", "final List < Unit Tax Calculation Info > units = new Array List < Unit Tax Calculation Info > ( ) ;", "final List < Unit Tax Calculation Info > units By Date = new Array List < Unit Tax Calculation Info > ( ) ;", "for ( final Unit Tax Calculation Info unit Info : tax Cal Info . get Unit Tax Calculation Infos ( ) ) {", "final Unit Tax Calculation Info new Unit Info = get Unit Tax Calculation Info Clone ( unit Info ) ;", "units By Date . add ( new Unit Info ) ; }", "clone . set Unit Tax Calculation Info ( units ) ; }"]}
{"ids": "19956", "code": ["public Socket Wrapper accept ( ) throws IO Exception {", "for ( ; ; ) {", "try {", "Socket sock = server Socket . accept ( ) ;", "return new Socket Wrapper ( sock ) ; }", "catch ( Socket Timeout Exception e ) { }", "catch ( IO Exception e ) {", "if ( done ) {", "throw new Socket Termination Exception ( STR_ , e ) ; }", "else {", "throw e ; } } } }"]}
{"ids": "38848", "code": ["protected synchronized Instance process Buffers ( ) {", "if ( m first Buffer != null && m second Buffer != null && m first Buffer . size ( ) > NUM_ && m second Buffer . size ( ) > NUM_ ) {", "if ( m stop Requested . get ( ) ) {", "return null ; }", "Instance Holder first H = m first Buffer . peek ( ) ;", "Instance Holder second H = m second Buffer . peek ( ) ;", "Instance first = first H . m instance ;", "Instance second = second H . m instance ;", "int cmp = compare ( first , second , first H , second H ) ;", "if ( cmp == NUM_ ) {", "Instance new Inst = generate Merged Instance ( m first Buffer . remove ( ) , m second Buffer . remove ( ) ) ;", "return new Inst ; }", "else if ( cmp < NUM_ ) {", "do {", "m first Buffer . remove ( ) ;", "if ( m first Buffer . size ( ) > NUM_ ) {", "first H = m first Buffer . peek ( ) ;", "first = first H . m instance ;", "cmp = compare ( first , second , first H , second H ) ; } }", "while ( cmp < NUM_ && m first Buffer . size ( ) > NUM_ ) ; }", "else {", "do {", "m second Buffer . remove ( ) ;", "if ( m second Buffer . size ( ) > NUM_ ) {", "second H = m second Buffer . peek ( ) ;", "second = second H . m instance ;", "cmp = compare ( first , second , first H , second H ) ; } }", "while ( cmp > NUM_ && m second Buffer . size ( ) > NUM_ ) ; } }", "return null ; }"]}
{"ids": "82047", "code": ["public boolean is Theme Constant ( String constant Name , boolean def ) {", "String c = get Theme Constant ( constant Name , null ) ;", "if ( c == null ) {", "return def ; }", "return c . equals Ignore Case ( STR_ ) || c . equals ( STR_ ) ; }"]}
{"ids": "62989", "code": ["public void unmap ( int addr , int len ) {", "for ( int i = NUM_ ; i < len ; i += PAGE SIZE ) {", "int pte = get PTE ( addr + i ) ;", "if ( get Page ( pte ) != null ) {", "readable Memory [ pte ] = null ;", "writable Memory [ pte ] = null ;", "executable Memory [ pte ] = null ; }", "else {", "throw new Error ( STR_ + Integer . to Hex String ( addr ) + STR_ + len ) ; } } }"]}
{"ids": "55217", "code": ["private synchronized void save To Settings ( ) {", "List < List > entries To Save = new Array List < > ( ) ;", "for ( Status History Entry entry : entries . values ( ) ) {", "entries To Save . add ( entry To List ( entry ) ) ; }", "settings . put List ( STR_ , entries To Save ) ; }"]}
{"ids": "57142", "code": ["protected void add To Maintenance Queue ( Node Port Tuple npt ) {", "if ( maintenance Queue . contains ( npt ) == false ) maintenance Queue . add ( npt ) ; }"]}
{"ids": "16806", "code": ["public Movie Scraper Metadata Panel ( Movie Scraper Metadata Config config ) {", "this . config = config ;", "init Components ( ) ; }"]}
{"ids": "15840", "code": ["public int size ( ) {", "return seq . size ( ) ; }"]}
{"ids": "7205", "code": ["public static void assert Props Per Row ( Iterator < Event Bean > iterator , Safe Iterator < Event Bean > safe Iterator , String [ ] property Names , Object [ ] [ ] expected ) {", "assert Props Per Row ( EP Assertion Util . iterator To Array ( iterator ) , property Names , expected ) ;", "assert Props Per Row ( EP Assertion Util . iterator To Array ( safe Iterator ) , property Names , expected ) ;", "safe Iterator . close ( ) ; }"]}
{"ids": "52887", "code": ["public boolean is Leaf ( ) {", "return children == null || children . is Empty ( ) ; }"]}
{"ids": "8299", "code": ["public int read ( ) throws IO Exception {", "if ( has Next Char ) {", "has Next Char = false ;", "write ( next Char ) ;", "return next Char ; }", "if ( previous Line != lexer . get Line ( ) ) {", "num Unicode Escapes Found On Current Line = NUM_ ;", "previous Line = lexer . get Line ( ) ; }", "int c = reader . read ( ) ;", "if ( c != STR_ ) {", "write ( c ) ;", "return c ; }", "c = reader . read ( ) ;", "if ( c != STR_ ) {", "has Next Char = true ;", "next Char = c ;", "write ( STR_ ) ;", "return STR_ ; }", "int number Of U Chars = NUM_ ;", "do {", "number Of U Chars ++ ;", "c = reader . read ( ) ; }", "while ( c == STR_ ) ;", "check Hex Digit ( c ) ;", "String Builder char Num = new String Builder ( ) ;", "char Num . append ( ( char ) c ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "c = reader . read ( ) ;", "check Hex Digit ( c ) ;", "char Num . append ( ( char ) c ) ; }", "int rv = Integer . parse Int ( char Num . to String ( ) , NUM_ ) ;", "write ( rv ) ;", "num Unicode Escapes Found += NUM_ + number Of U Chars ;", "num Unicode Escapes Found On Current Line += NUM_ + number Of U Chars ;", "return rv ; }"]}
{"ids": "71103", "code": ["public boolean is Empty ( ) {", "if ( ! built ) return item Boundables . is Empty ( ) ;", "return root . is Empty ( ) ; }"]}
{"ids": "46491", "code": ["protected Abstract Writer ( Writer w , Document doc , int pos , int len ) {", "this . doc = doc ;", "it = new Element Iterator ( doc . get Default Root Element ( ) ) ;", "out = w ;", "start Offset = pos ;", "end Offset = pos + len ;", "Object doc Newline = doc . get Property ( Default Editor Kit . End Of Line String Property ) ;", "if ( doc Newline instanceof String ) {", "set Line Separator ( ( String ) doc Newline ) ; }", "else {", "String newline = null ;", "try {", "newline = System . get Property ( STR_ ) ; }", "catch ( Security Exception se ) { }", "if ( newline == null ) {", "newline = STR_ ; }", "set Line Separator ( newline ) ; }", "can Wrap Lines = true ; }"]}
{"ids": "83686", "code": ["protected void adjust Position Y ( int velocity Y ) {", "if ( reverse Layout ) velocity Y *= - NUM_ ;", "int child Count = get Child Count ( ) ;", "if ( child Count > NUM_ ) {", "int cur Position = View Utils . get Center Y Child Position ( this ) ;", "int child Height = get Height ( ) - get Padding Top ( ) - get Padding Bottom ( ) ;", "int fling Count = get Fling Count ( velocity Y , child Height ) ;", "int target Position = cur Position + fling Count ;", "if ( m Single Page Fling ) {", "fling Count = Math . max ( - NUM_ , Math . min ( NUM_ , fling Count ) ) ;", "target Position = fling Count == NUM_ ? cur Position : m Position On Touch Down + fling Count ; }", "target Position = Math . max ( target Position , NUM_ ) ;", "target Position = Math . min ( target Position , get Item Count ( ) - NUM_ ) ;", "if ( target Position == cur Position && ( ! m Single Page Fling || m Position On Touch Down == cur Position ) ) {", "View center Y Child = View Utils . get Center Y Child ( this ) ;", "if ( center Y Child != null ) {", "if ( m Touch Span > center Y Child . get Height ( ) * m Trigger Offset && target Position != NUM_ ) {", "if ( ! reverse Layout ) target Position -- ;", "else target Position ++ ; }", "else if ( m Touch Span < center Y Child . get Height ( ) * - m Trigger Offset && target Position != get Item Count ( ) - NUM_ ) {", "if ( ! reverse Layout ) target Position ++ ;", "else target Position -- ; } } }", "if ( DEBUG ) {", "Log . d ( STR_ , STR_ + m Touch Span ) ;", "Log . d ( STR_ , STR_ + target Position ) ; }", "smooth Scroll To Position ( safe Target Position ( target Position , get Item Count ( ) ) ) ; } }"]}
{"ids": "50782", "code": ["private void update Progress ( String progress Label , int progress ) {", "if ( my Host != null && ( ( progress != previous Progress ) || ( ! progress Label . equals ( previous Progress Label ) ) ) ) {", "my Host . update Progress ( progress Label , progress ) ; }", "previous Progress = progress ;", "previous Progress Label = progress Label ; }"]}
{"ids": "9941", "code": ["@ Override public Node import To ( Document host Document ) {", "Validate Util . validate Not Null ( host Document , STR_ ) ;", "Element cloned Token Element = ( Element ) host Document . import Node ( parsed Token . get Document Element ( ) , true ) ;", "mark Assertion Id Attribute ( cloned Token Element ) ;", "return cloned Token Element ; }"]}
{"ids": "39897", "code": ["public static Matrix random ( int m , int n ) {", "Matrix A = new Matrix ( m , n ) ;", "double [ ] [ ] X = A . get Array ( ) ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "for ( int j = NUM_ ; j < n ; j ++ ) {", "X [ i ] [ j ] = Math . random ( ) ; } }", "return A ; }"]}
{"ids": "70282", "code": ["public void add Priority Unit ( String id ) {", "if ( ! String Util . is Positive Integer ( id ) ) {", "return ; }", "add Priority Unit ( Integer . parse Int ( id ) ) ; }"]}
{"ids": "78877", "code": ["private void calc Interval Dis ( ) {", "if ( m Mark Text Paint == null ) {", "return ; }", "String default Text = STR_ ;", "Rect temp = new Rect ( ) ;", "int max = NUM_ ;", "if ( m Items != null && m Items . size ( ) > NUM_ ) {", "for ( String i : m Items ) {", "m Mark Text Paint . get Text Bounds ( i , NUM_ , i . length ( ) , temp ) ;", "if ( temp . width ( ) > max ) {", "max = temp . width ( ) ; } } }", "else {", "m Mark Text Paint . get Text Bounds ( default Text , NUM_ , default Text . length ( ) , temp ) ;", "max = temp . width ( ) ; }", "if ( ! Text Utils . is Empty ( m Addition Center Mark ) ) {", "m Mark Text Paint . set Text Size ( m Normal Text Size ) ;", "m Mark Text Paint . get Text Bounds ( m Addition Center Mark , NUM_ , m Addition Center Mark . length ( ) , temp ) ;", "m Addition Center Mark Width = temp . width ( ) ;", "max += temp . width ( ) ; }", "m Interval Dis = max * m Interval Factor ; }"]}
{"ids": "82030", "code": ["public boolean is Use Softkeys ( ) {", "return use Softkeys ; }"]}
{"ids": "23575", "code": ["public void connection Closed ( Connection Event event ) {", "if ( is Active ) {", "Managed Connection conn = ( Managed Connection ) event . get Source ( ) ;", "Transaction Manager Impl trans Manager = Transaction Manager Impl . get Transaction Manager ( ) ;", "try {", "Transaction txn = trans Manager . get Transaction ( ) ;", "if ( txn == null ) {", "mann Pool Cache . return Pooled Connection To Pool ( conn ) ; } }", "catch ( Exception se ) {", "String exception = STR_ + se . get Message ( ) ;", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( exception , se ) ; } } } }"]}
{"ids": "62432", "code": ["public Metadata Block Header ( boolean is Last Block , Block Type block Type , int data Length ) {", "Byte Buffer rawdata = Byte Buffer . allocate ( HEADER LENGTH ) ;", "this . block Type = block Type ;", "this . is Last Block = is Last Block ;", "this . data Length = data Length ;", "byte type ;", "if ( is Last Block ) {", "type = ( byte ) ( NUM_ | block Type . get Id ( ) ) ; }", "else {", "type = ( byte ) block Type . get Id ( ) ; }", "rawdata . put ( type ) ;", "rawdata . put ( ( byte ) ( ( data Length & NUM_ ) > > > NUM_ ) ) ;", "rawdata . put ( ( byte ) ( ( data Length & NUM_ ) > > > NUM_ ) ) ;", "rawdata . put ( ( byte ) ( data Length & NUM_ ) ) ;", "bytes = new byte [ HEADER LENGTH ] ;", "for ( int i = NUM_ ; i < HEADER LENGTH ; i ++ ) {", "bytes [ i ] = rawdata . get ( i ) ; } }"]}
{"ids": "35426", "code": ["private void check File To Run ( ) throws Exit Code Exception {", "if ( run This File == null || ! run This File . exists ( ) ) {", "throw new Exit Code Exception ( EXITCODE MODULE TO RUN NOT FOUND ) ; } }"]}
{"ids": "68745", "code": ["public void add Last Item ( M model ) {", "add Item ( m Datas . size ( ) , model ) ; }"]}
{"ids": "68496", "code": ["@ Managed Operation ( description = STR_ ) public void notify All Tag Cache Listeners ( ) {", "LOGGER . info ( STR_ ) ;", "for ( Long key : control Tag Cache . get Keys ( ) ) {", "control Tag Cache . acquire Write Lock On Key ( key ) ;", "try {", "Control Tag control Tag = control Tag Cache . get Copy ( key ) ;", "long event Time = System . current Time Millis ( ) ;", "control Tag Cache . notify Listener Status Confirmation ( control Tag , event Time ) ; }", "finally {", "control Tag Cache . release Write Lock On Key ( key ) ; } }", "for ( Long key : data Tag Cache . get Keys ( ) ) {", "data Tag Cache . acquire Write Lock On Key ( key ) ;", "try {", "Data Tag data Tag = data Tag Cache . get Copy ( key ) ;", "long event Time = System . current Time Millis ( ) ;", "data Tag Cache . notify Listener Status Confirmation ( data Tag , event Time ) ; }", "finally {", "data Tag Cache . release Write Lock On Key ( key ) ; } }", "LOGGER . info ( STR_ ) ; }"]}
{"ids": "78915", "code": ["public static long [ ] breakdown ( long t , @ Non Null Time Unit unit , boolean round Millis ) {", "long days = unit . to Days ( t ) ;", "long hours = unit . to Hours ( t ) % NUM_ ;", "long minutes = unit . to Minutes ( t ) % NUM_ ;", "long seconds = unit . to Seconds ( t ) % NUM_ ;", "long msecs = unit . to Millis ( t ) % NUM_ ;", "if ( round Millis ) {", "if ( msecs >= NUM_ ) {", "seconds ++ ;", "msecs = NUM_ ;", "if ( seconds == NUM_ ) {", "minutes ++ ;", "seconds = NUM_ ;", "if ( minutes == NUM_ ) {", "hours ++ ;", "minutes = NUM_ ;", "if ( hours == NUM_ ) {", "days ++ ;", "hours = NUM_ ; } } } } }", "return new long [ ] { days , hours , minutes , seconds , msecs } ; }"]}
{"ids": "60942", "code": ["private int socks Get Server Port ( ) {", "Inet Socket Address addr = ( Inet Socket Address ) proxy . address ( ) ;", "return addr . get Port ( ) ; }"]}
{"ids": "56662", "code": ["public static < T > Reactive Seq < T > from List ( final List < T > list ) {", "Objects . require Non Null ( list ) ;", "final Reversing List Spliterator array = new Reversing List Spliterator < T > ( list , false ) ;", "return Stream Utils . reactive Seq ( Stream Support . stream ( array , false ) , Optional . of Nullable ( array ) ) ; }"]}
{"ids": "5153", "code": ["private boolean process Key Up ( int key Code ) {", "if ( key Code == Key Event . KEYCODE DEL ) {", "if ( m In Kb Mode ) {", "if ( ! m Typed Times . is Empty ( ) ) {", "int deleted = delete Last Typed Key ( ) ;", "String deleted Key Str ;", "if ( deleted == get Am Or Pm Key Code ( AM ) ) {", "deleted Key Str = m Am Text ; }", "else if ( deleted == get Am Or Pm Key Code ( PM ) ) {", "deleted Key Str = m Pm Text ; }", "else {", "deleted Key Str = String . format ( STR_ , get Val From Key Code ( deleted ) ) ; }", "View Compat Utils . announce For Accessibility ( m Delegator , String . format ( m Deleted Key Format , deleted Key Str ) ) ;", "update Display ( true ) ; } } }", "else if ( key Code == Key Event . KEYCODE 0 || key Code == Key Event . KEYCODE 1 || key Code == Key Event . KEYCODE 2 || key Code == Key Event . KEYCODE 3 || key Code == Key Event . KEYCODE 4 || key Code == Key Event . KEYCODE 5 || key Code == Key Event . KEYCODE 6 || key Code == Key Event . KEYCODE 7 || key Code == Key Event . KEYCODE 8 || key Code == Key Event . KEYCODE 9 || ( ! m Is 24 Hour View && ( key Code == get Am Or Pm Key Code ( AM ) || key Code == get Am Or Pm Key Code ( PM ) ) ) ) {", "if ( ! m In Kb Mode ) {", "if ( m Radial Time Picker View == null ) {", "Log . e ( TAG , STR_ ) ;", "return true ; }", "m Typed Times . clear ( ) ;", "try Starting Kb Mode ( key Code ) ;", "return true ; }", "if ( add Key If Legal ( key Code ) ) {", "update Display ( false ) ; }", "return true ; }", "return false ; }"]}
{"ids": "11716", "code": ["public synchronized OM Graphic List prepare ( ) {", "OM Graphic List list = new OM Graphic List ( ) ;", "Projection proj = get Projection ( ) ;", "if ( proj == null ) {", "return list ; }", "Point 2 D upper Left = proj . get Upper Left ( ) ;", "Point 2 D lower Right = proj . get Lower Right ( ) ;", "if ( upper Left . get X ( ) > lower Right . get X ( ) ) {", "get Points ( new Data Bounds ( upper Left , new Point 2 D . Double ( NUM_ , lower Right . get Y ( ) ) ) , list , proj ) ;", "get Points ( new Data Bounds ( new Point 2 D . Double ( - NUM_ , upper Left . get Y ( ) ) , lower Right ) , list , proj ) ; }", "else {", "get Points ( new Data Bounds ( upper Left , lower Right ) , list , proj ) ; }", "OM Text statement = new OM Text ( NUM_ , proj . get Height ( ) - NUM_ , get Name ( ) + STR_ + list . size ( ) + STR_ + data Source . size ( ) + STR_ , OM Text . JUSTIFY LEFT ) ;", "statement . set Fill Paint ( Color . gray ) ;", "statement . generate ( proj ) ;", "list . add ( NUM_ , statement ) ;", "return list ; }"]}
{"ids": "23060", "code": ["public X 509 Name ( Vector oids , Vector values ) {", "this ( oids , values , new X 509 Default Entry Converter ( ) ) ; }"]}
{"ids": "35105", "code": ["void next Line ( ) {", "try {", "next Line = current Episode . read Line ( ) ;", "while ( next Line . equals ( STR_ ) ) next Line = current Episode . read Line ( ) ; }", "catch ( IO Exception | Null Pointer Exception e ) {", "next Line = null ; } }"]}
{"ids": "4286", "code": ["public Jobs subset ( String [ ] job Ids ) {", "final List < Job > subset Result = new Array List < Job > ( ) ;", "for ( String job Id : job Ids ) {", "Job job = job Map . get ( job Id ) ;", "if ( job . is Analysis ( ) ) {", "subset Result . add ( job ) ; } }", "return new Jobs ( subset Result ) ; }"]}
{"ids": "74174", "code": ["public void add Property Change Listener ( Property Change Listener listener ) {", "List < Property Change Listener > l = Arrays . as List ( listener List . get Listeners ( Property Change Listener . class ) ) ;", "if ( ! l . contains ( listener ) ) {", "listener List . add ( Property Change Listener . class , listener ) ; } }"]}
{"ids": "45288", "code": ["public static byte [ ] from Hex String ( String text ) {", "text = text . trim ( ) ;", "if ( text . length ( ) % NUM_ != NUM_ ) text = STR_ + text ;", "int res Len = text . length ( ) / NUM_ ;", "int lo Nibble , hi Nibble ;", "byte [ ] res = new byte [ res Len ] ;", "for ( int i = NUM_ ; i < res Len ; i ++ ) {", "int j = i << NUM_ ;", "hi Nibble = char To Nibble ( text . char At ( j ) ) ;", "lo Nibble = char To Nibble ( text . char At ( j + NUM_ ) ) ;", "if ( lo Nibble == - NUM_ || hi Nibble == - NUM_ ) return null ;", "res [ i ] = ( byte ) ( hi Nibble << NUM_ | lo Nibble ) ; }", "return res ; }"]}
{"ids": "37789", "code": ["protected static double variance ( double [ ] s , double [ ] s S , double [ ] sum Of Weights ) {", "double var = NUM_ ;", "for ( int i = NUM_ ; i < s . length ; i ++ ) {", "if ( sum Of Weights [ i ] > NUM_ ) {", "var += single Variance ( s [ i ] , s S [ i ] , sum Of Weights [ i ] ) ; } }", "return var ; }"]}
{"ids": "56282", "code": ["public void write ( Char Sequence csq ) throws IO Exception {", "final int length = csq . length ( ) ;", "for ( int i = NUM_ ; i < length ; ) {", "char c = csq . char At ( i ++ ) ;", "if ( c < NUM_ ) {", "bytes [ index ] = ( byte ) c ;", "if ( ++ index >= bytes . length ) {", "flush Buffer ( ) ; } }", "else {", "write ( c ) ; } } }"]}
{"ids": "11540", "code": ["public static boolean can Resize ( List constraints ) {", "for ( Iterator iter = constraints . iterator ( ) ; iter . has Next ( ) ; ) {", "Dock Constraint dc = ( Dock Constraint ) iter . next ( ) ;", "if ( ! dc . can Resize ( ) ) return false ; }", "return true ; }"]}
{"ids": "38836", "code": ["@ Override public boolean connection Allowed ( Event Set Descriptor esd ) {", "return connection Allowed ( esd . get Name ( ) ) ; }"]}
{"ids": "81752", "code": ["String read Number ( String source , int ofs , String token , boolean adjacent ) {", "if ( adjacent ) {", "return source . substring ( ofs , ofs + token . length ( ) ) ; }", "int len = source . length ( ) ;", "for ( int i = ofs ; i < len ; i ++ ) {", "char ch = source . char At ( i ) ;", "if ( is Numeric ( ch ) == false ) {", "if ( i == NUM_ ) {", "return null ; }", "return source . substring ( ofs , i ) ; } }", "return source . substring ( ofs ) ; }"]}
{"ids": "9360", "code": ["private Vec feed Forward ( Vec input ) {", "Vec x = input ;", "for ( int i = NUM_ ; i < Ws . size ( ) ; i ++ ) {", "Matrix W i = Ws . get ( i ) ;", "Vec b i = bs . get ( i ) ;", "Vec a i = W i . multiply ( x ) ;", "a i . mutable Add ( b i ) ;", "a i . apply Function ( f ) ;", "x = a i ; }", "return x ; }"]}
{"ids": "4958", "code": ["private boolean split wtrace other ( Brd Tracep found trace , Collection < Brd Tracep > split pieces , Array List < Pla Line Int > intersecting lines , Awtree Find Entry found entry ) {", "if ( found trace == this ) return false ;", "boolean have trace split = false ;", "for ( Pla Line Int inter line : intersecting lines ) {", "if ( have trace split ) break ;", "int line no = found entry . shape index in object + NUM_ ;", "Array List < Brd Tracep > curr split pieces = found trace . split with end line ( line no , inter line ) ;", "if ( curr split pieces . size ( ) < NUM_ ) continue ;", "have trace split = true ;", "split pieces . add All ( curr split pieces ) ; }", "if ( ! have trace split ) split pieces . add ( found trace ) ;", "return have trace split ; }"]}
{"ids": "26754", "code": ["private void print Solution ( Solution solution ) {", "if ( include Variables ) {", "for ( int i = NUM_ ; i < solution . get Number Of Variables ( ) ; i ++ ) {", "if ( i > NUM_ ) {", "writer . print ( STR_ ) ; }", "writer . print ( encode ( solution . get Variable ( i ) ) ) ; } }", "for ( int i = NUM_ ; i < solution . get Number Of Objectives ( ) ; i ++ ) {", "if ( ( i > NUM_ ) || ( include Variables && ( solution . get Number Of Variables ( ) > NUM_ ) ) ) {", "writer . print ( STR_ ) ; }", "writer . print ( solution . get Objective ( i ) ) ; }", "writer . println ( ) ; }"]}
{"ids": "78374", "code": ["public void read NBT ( NBT Tag Compound nbt ) {", "if ( nbt . has Key ( STR_ , NUM_ ) ) {", "this . decay Level = nbt . get Integer ( STR_ ) ;", "this . decay Saturation Level = nbt . get Float ( STR_ ) ;", "this . decay Acceleration Level = nbt . get Float ( STR_ ) ; } }"]}
{"ids": "63614", "code": ["public void copy To ( Position Texture Vertex [ ] verts , Textured Quad [ ] quad ) {", "Textured Polygon [ ] poly = new Textured Polygon [ quad . length ] ;", "for ( int idx = NUM_ ; idx < quad . length ; idx ++ ) {", "poly [ idx ] = new Textured Polygon ( ( Position Texture Vertex [ ] ) quad [ idx ] . vertex Positions ) ; }", "copy To ( verts , poly ) ; }"]}
{"ids": "82315", "code": ["public synchronized void delete Observer ( Observer observer ) {", "observers . remove ( observer ) ; }"]}
{"ids": "67257", "code": ["public Account Attribute as Account Attribute ( Account account ) {", "if ( account == null ) {", "return null ; }", "Account Attribute who = new Account Attribute ( ) ;", "who . name = account . get Full Name ( ) ;", "who . email = account . get Preferred Email ( ) ;", "who . username = account . get User Name ( ) ;", "return who ; }"]}
{"ids": "32997", "code": ["public void delete ( Template Persistence Data data ) {", "if ( data . is User Added ( ) ) f Templates . remove ( data ) ;", "else data . set Deleted ( true ) ; }"]}
{"ids": "37649", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "60048", "code": ["public String consume Word ( ) {", "int start = pos ;", "while ( matches Word ( ) ) pos ++ ;", "return queue . substring ( start , pos ) ; }"]}
{"ids": "24519", "code": ["public static void print Inlining ( final Resolved Java Method method , final int bci , final int inlining Depth , final boolean success , final String msg , final Object ... args ) {", "if ( Hot Spot Print Inlining . get Value ( ) ) {", "String Builder sb = new String Builder ( ) ;", "sb . append ( STR_ ) ;", "sb . append ( STR_ ) ;", "sb . append ( String . format ( STR_ , STR_ , method . is Synchronized ( ) ? STR_ : STR_ , STR_ , STR_ , method . is Native ( ) ? STR_ : STR_ ) ) ;", "sb . append ( STR_ ) ;", "sb . append ( STR_ ) ;", "for ( int i = NUM_ ; i < inlining Depth ; i ++ ) {", "sb . append ( STR_ ) ; }", "sb . append ( String . format ( STR_ , bci , method Name ( method ) , success ? STR_ : STR_ , String . format ( msg , args ) ) ) ;", "TTY . println ( sb . to String ( ) ) ; } }"]}
{"ids": "53222", "code": ["public static double calculate P Value ( double t , int v ) {", "return NUM_ * ( NUM_ - Students T Distribution . cdf ( Math . abs ( t ) , v ) ) ; }"]}
{"ids": "45875", "code": ["public static void append Child ( Node parent , Node child ) {", "Document owner Doc = get Owner Document ( parent ) ;", "if ( child . get Owner Document ( ) != owner Doc ) {", "parent . append Child ( owner Doc . import Node ( child , true ) ) ; }", "else {", "parent . append Child ( child ) ; } }"]}
{"ids": "70682", "code": ["protected void delete Session Variables ( String session Id , String ... var Names ) {", "if ( session Id . equals ( STR_ ) ) {", "return ; }", "Key key = key Factory . new Key ( session Id ) ;", "Transaction transaction = datastore . new Transaction ( ) ;", "try {", "Entity state Entity = transaction . get ( key ) ;", "Entity . Builder builder = Entity . builder ( state Entity ) ;", "String Builder del Names = new String Builder ( ) ;", "for ( String var Name : var Names ) {", "del Names . append ( var Name + STR_ ) ;", "builder = builder . remove ( var Name ) ; }", "datastore . update ( builder . build ( ) ) ; }", "catch ( Null Pointer Exception e ) { }", "finally {", "if ( transaction . active ( ) ) {", "transaction . rollback ( ) ; } } }"]}
{"ids": "72910", "code": ["@ Suppress Lint ( STR_ ) private void prune Scrap Views ( ) {", "final int max Views = m Active Views . length ;", "final int view Type Count = m View Type Count ;", "final Array List < View > [ ] scrap Views = m Scrap Views ;", "for ( int i = NUM_ ; i < view Type Count ; ++ i ) {", "final Array List < View > scrap Pile = scrap Views [ i ] ;", "int size = scrap Pile . size ( ) ;", "final int extras = size - max Views ;", "size -- ;", "for ( int j = NUM_ ; j < extras ; j ++ ) {", "remove Detached View ( scrap Pile . remove ( size -- ) , false ) ; } }", "if ( m Transient State Views != null ) {", "for ( int i = NUM_ ; i < m Transient State Views . size ( ) ; i ++ ) {", "final View v = m Transient State Views . value At ( i ) ;", "if ( ! v . has Transient State ( ) ) {", "m Transient State Views . remove At ( i ) ;", "i -- ; } } } }"]}
{"ids": "12163", "code": ["private void update Work Amount ( double work Time ) {", "if ( work Time <= NUM_ ) {", "current Work Amount *= NUM_ ; }", "else {", "total Time Taken += work Time ;", "completed Work Amount += current Work Amount ;", "current Work Amount = ( int ) Math . ceil ( target Execution Ms * completed Work Amount / total Time Taken ) ; } }"]}
{"ids": "16537", "code": ["public static boolean is Laf Aqua ( ) {", "ensure Valid Cache ( ) ;", "if ( cached Is Laf Aqua == null ) {", "cached Is Laf Aqua = Boolean . value Of ( compute Is Laf Aqua ( ) ) ; }", "return cached Is Laf Aqua . boolean Value ( ) ; }"]}
{"ids": "80477", "code": ["public void move Randomly ( ) {", "set Random Path From ( get X ( ) , get Y ( ) , get Movement Range ( ) / NUM_ ) ; }"]}
{"ids": "48941", "code": ["public void pln I ( Object o ) throws IO Exception {", "p ( o . to String ( ) ) ;", "pln ( ) ;", "p I ( ) ; }"]}
{"ids": "63604", "code": ["@ Override public void write Entity To NBT ( NBT Tag Compound par 1 NBT Tag Compound ) {", "par 1 NBT Tag Compound . set Short ( STR_ , ( short ) this . x Tile ) ;", "par 1 NBT Tag Compound . set Short ( STR_ , ( short ) this . y Tile ) ;", "par 1 NBT Tag Compound . set Short ( STR_ , ( short ) this . z Tile ) ;", "par 1 NBT Tag Compound . set Integer ( STR_ , Block . get Id From Block ( this . in Tile ) ) ;", "par 1 NBT Tag Compound . set Byte ( STR_ , ( byte ) this . in Data ) ;", "par 1 NBT Tag Compound . set Byte ( STR_ , ( byte ) this . arrow Shake ) ;", "par 1 NBT Tag Compound . set Byte ( STR_ , ( byte ) ( this . in Ground ? NUM_ : NUM_ ) ) ;", "par 1 NBT Tag Compound . set Boolean ( STR_ , this . is Explosive ) ; }"]}
{"ids": "30977", "code": ["@ Override public String Buffer format ( final double value , final String Buffer buffer , final Field Position position ) {", "return format ( Double . value Of ( value ) , buffer , position ) ; }"]}
{"ids": "48858", "code": ["private Object translate Stream To Input Stream ( Input Stream str , Data Flavor flavor , long format , Transferable locale Transferable ) throws IO Exception {", "if ( is Flavor Charset Text Type ( flavor ) && is Text Format ( format ) ) {", "str = new Reencoding Input Stream ( str , format , Data Transferer . get Text Charset ( flavor ) , locale Transferable ) ; }", "return construct Flavored Object ( str , flavor , Input Stream . class ) ; }"]}
{"ids": "62734", "code": ["public void dispose ( ) throws Iab Async In Progress Exception {", "synchronized ( m Async In Progress Lock ) {", "if ( m Async In Progress ) {", "throw new Iab Async In Progress Exception ( STR_ + STR_ + m Async Operation + STR_ ) ; } }", "log Debug ( STR_ ) ;", "m Setup Done = false ;", "if ( m Service Conn != null ) {", "log Debug ( STR_ ) ;", "if ( m Context != null ) m Context . unbind Service ( m Service Conn ) ; }", "m Disposed = true ;", "m Context = null ;", "m Service Conn = null ;", "m Service = null ;", "m Purchase Listener = null ; }"]}
{"ids": "10359", "code": ["private boolean is IPT Resource Folder ( File dir ) {", "if ( dir . exists ( ) && dir . is Directory ( ) ) {", "File persistence File = new File ( dir , PERSISTENCE FILE ) ;", "File eml File = new File ( dir , Data Dir . EML XML FILENAME ) ;", "return persistence File . is File ( ) && eml File . is File ( ) ; }", "return false ; }"]}
{"ids": "6917", "code": ["public Set < String > add Sprite Frames ( String plist , CC Texture 2 D texture ) {", "Hash Map < String , Object > dict = Plist Parser . parse ( plist ) ;", "return add Sprite Frames ( dict , texture ) ; }"]}
{"ids": "54207", "code": ["public void add Annotation ( final Annotation annotation ) {", "annotation List . add ( annotation ) ;", "annotation . setxy Graph ( xy Graph ) ;", "add ( annotation ) ;", "revalidate ( ) ;", "change Support . fire Property Change ( STR_ , null , annotation ) ; }"]}
{"ids": "55136", "code": ["public static void create Overviews ( AS Doc Configuration config ) throws Compiler Exception {", "String templates Path = config . get Templates Path ( ) ;", "String dita Path = config . get Output ( ) + STR_ + File . separator ;", "Buffered Writer writer = null ;", "Reader reader = null ;", "try {", "writer = new Buffered Writer ( new File Writer ( dita Path + STR_ ) ) ;", "if ( config . get Package Description File ( ) != null ) {", "reader = new Buffered Reader ( new File Reader ( config . get Package Description File ( ) ) ) ; }", "else {", "reader = new Buffered Reader ( new File Reader ( templates Path + STR_ ) ) ; }", "Overviews Handler h = new Overviews Handler ( writer , config ) ;", "Input Source source = new Input Source ( reader ) ;", "SAX Parser Factory factory = SAX Parser Factory . new Instance ( ) ;", "SAX Parser parser = factory . new SAX Parser ( ) ;", "parser . parse ( source , h ) ; }", "catch ( Exception e ) {", "if ( Trace . error ) e . print Stack Trace ( ) ;", "Compiler Message c = new Could Not Create ( STR_ , e . get Message ( ) ) ;", "Thread Local Toolkit . log ( c ) ;", "throw c ; }", "finally {", "if ( writer != null ) {", "try {", "writer . close ( ) ; }", "catch ( IO Exception ioe ) { } }", "if ( reader != null ) {", "try {", "reader . close ( ) ; }", "catch ( IO Exception ioe ) { } } } }"]}
{"ids": "78253", "code": ["public Create New Note Intent Builder add Tags ( @ Nullable Array List < String > tags ) {", "Array List < String > list = m Args . get String Array List ( Evernote Intent . EXTRA TAG NAME LIST ) ;", "if ( list == null ) {", "list = tags ; }", "else if ( tags != null ) {", "list . add All ( tags ) ; }", "return set Tags ( list ) ; }"]}
{"ids": "59526", "code": ["private Remote Operation Result refresh Shares For Folder ( Own Cloud Client client ) {", "Remote Operation Result result = null ;", "Get Remote Shares For File Operation operation = new Get Remote Shares For File Operation ( m Local Folder . get Remote Path ( ) , true , true ) ;", "result = operation . execute ( client ) ;", "if ( result . is Success ( ) ) {", "Array List < OC Share > shares = new Array List < OC Share > ( ) ;", "for ( Object obj : result . get Data ( ) ) {", "shares . add ( ( OC Share ) obj ) ; }", "m Storage Manager . save Shares In Folder ( shares , m Local Folder ) ; }", "return result ; }"]}
{"ids": "175", "code": ["public double dist ( Math Vector other ) {", "double dist X = this . x - other . x ;", "double dist Y = this . y - other . y ;", "return Math . sqrt ( dist X * dist X + dist Y * dist Y ) ; }"]}
{"ids": "7324", "code": ["public static String parse String ( String value ) {", "if ( ( value . starts With ( STR_ ) ) && ( value . ends With ( STR_ ) ) || ( value . starts With ( STR_ ) ) && ( value . ends With ( STR_ ) ) ) {", "if ( value . length ( ) > NUM_ ) {", "if ( value . index Of ( STR_ ) != - NUM_ ) {", "return unescape ( value . substring ( NUM_ , value . length ( ) - NUM_ ) ) ; }", "return value . substring ( NUM_ , value . length ( ) - NUM_ ) ; } }", "throw new Illegal Argument Exception ( STR_ + value + STR_ ) ; }"]}
{"ids": "82807", "code": ["private void define Desktop Panes ( UI Defaults d ) {", "d . put ( STR_ , new Color UI Resource ( NUM_ ) ) ;", "String c = PAINTER PREFIX + STR_ ;", "String p = STR_ ;", "d . put ( p + STR_ , new Lazy Painter ( c , Desktop Pane Painter . Which . BACKGROUND ENABLED ) ) ;", "p = STR_ ;", "c = PAINTER PREFIX + STR_ ;", "d . put ( p + STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Desktop Icon Painter . Which . BACKGROUND ENABLED ) ) ; }"]}
{"ids": "42072", "code": ["private void fit Image To View ( ) {", "Drawable drawable = get Drawable ( ) ;", "if ( drawable == null || drawable . get Intrinsic Width ( ) == NUM_ || drawable . get Intrinsic Height ( ) == NUM_ ) {", "return ; }", "if ( matrix == null || prev Matrix == null ) {", "return ; }", "int drawable Width = drawable . get Intrinsic Width ( ) ;", "int drawable Height = drawable . get Intrinsic Height ( ) ;", "float scale X = ( float ) view Width / drawable Width ;", "float scale Y = ( float ) view Height / drawable Height ;", "switch ( m Scale Type ) {", "case CENTER :", "scale X = scale Y = NUM_ ;", "break ;", "case CENTER CROP :", "scale X = scale Y = Math . max ( scale X , scale Y ) ;", "break ;", "case CENTER INSIDE :", "scale X = scale Y = Math . min ( NUM_ , Math . min ( scale X , scale Y ) ) ;", "case FIT CENTER :", "scale X = scale Y = Math . min ( scale X , scale Y ) ;", "break ;", "case FIT XY :", "break ;", "default :", "throw new Unsupported Operation Exception ( STR_ ) ; }", "float redundant X Space = view Width - ( scale X * drawable Width ) ;", "float redundant Y Space = view Height - ( scale Y * drawable Height ) ;", "match View Width = view Width - redundant X Space ;", "match View Height = view Height - redundant Y Space ;", "if ( ! is Zoomed ( ) && ! image Rendered At Least Once ) {", "matrix . set Scale ( scale X , scale Y ) ;", "matrix . post Translate ( redundant X Space / NUM_ , redundant Y Space / NUM_ ) ;", "normalized Scale = NUM_ ; }", "else {", "if ( prev Match View Width == NUM_ || prev Match View Height == NUM_ ) {", "save Previous Image Values ( ) ; }", "prev Matrix . get Values ( m ) ;", "m [ Matrix . MSCALE X ] = match View Width / drawable Width * normalized Scale ;", "m [ Matrix . MSCALE Y ] = match View Height / drawable Height * normalized Scale ;", "float trans X = m [ Matrix . MTRANS X ] ;", "float trans Y = m [ Matrix . MTRANS Y ] ;", "float prev Actual Width = prev Match View Width * normalized Scale ;", "float actual Width = get Image Width ( ) ;", "translate Matrix After Rotate ( Matrix . MTRANS X , trans X , prev Actual Width , actual Width , prev View Width , view Width , drawable Width ) ;", "float prev Actual Height = prev Match View Height * normalized Scale ;", "float actual Height = get Image Height ( ) ;", "translate Matrix After Rotate ( Matrix . MTRANS Y , trans Y , prev Actual Height , actual Height , prev View Height , view Height , drawable Height ) ;", "matrix . set Values ( m ) ; }", "fix Trans ( ) ;", "set Image Matrix ( matrix ) ; }"]}
{"ids": "17156", "code": ["Object Animator animate Bound Scroll ( ) {", "float cur Scroll = get Stack Scroll ( ) ;", "float new Scroll = get Bounded Stack Scroll ( cur Scroll ) ;", "if ( Float . compare ( new Scroll , cur Scroll ) != NUM_ ) {", "animate Scroll ( cur Scroll , new Scroll , null ) ; }", "return m Scroll Animator ; }"]}
{"ids": "56217", "code": ["public Int Array resize ( Int Array array , long size ) {", "if ( array instanceof Big Int Array ) {", "return resize In Place ( ( Big Int Array ) array , size ) ; }", "else {", "Abstract Array arr = ( Abstract Array ) array ;", "final Int Array new Array = new Int Array ( size , arr . clear On Resize ) ;", "for ( long i = NUM_ , end = Math . min ( size , array . size ( ) ) ; i < end ; ++ i ) {", "new Array . set ( i , array . get ( i ) ) ; }", "array . close ( ) ;", "return new Array ; } }"]}
{"ids": "23058", "code": ["public DERUTC Time ( Date time ) {", "Simple Date Format date F = new Simple Date Format ( STR_ ) ;", "date F . set Time Zone ( new Simple Time Zone ( NUM_ , STR_ ) ) ;", "this . time = Strings . to Byte Array ( date F . format ( time ) ) ; }"]}
{"ids": "53183", "code": ["public static double pdf ( double x , double mu , double beta ) {", "final double z = ( x - mu ) / beta ;", "if ( x == Double . NEGATIVE INFINITY ) {", "return NUM_ ; }", "return Math . exp ( - z - Math . exp ( - z ) ) / beta ; }"]}
{"ids": "41528", "code": ["private static byte [ ] copy buffer ( byte [ ] buffer , int s Offset , int len ) {", "byte [ ] new Data = new byte [ len ] ;", "System . arraycopy ( buffer , s Offset , new Data , NUM_ , len ) ;", "return new Data ; }"]}
{"ids": "32400", "code": ["public Shared Fs Checkpoint Spi ( ) {", "dir Paths . offer ( DFLT DIR PATH ) ; }"]}
{"ids": "14439", "code": ["private void configure ( ) throws Null Location Exception , Formatter Init Exception {", "String Interval = lmanager . get Property ( Log Constants . LOGSIGN PERIODINSECONDS ) ;", "if ( ( Interval == null ) || ( Interval . length ( ) == NUM_ ) ) {", "sign Interval = Log Constants . LOGSIGN PERIODINSECONDS DEFAULT * NUM_ ; }", "else {", "sign Interval = Long . parse Long ( Interval ) * NUM_ ; }", "String str Max File Size = lmanager . get Property ( Log Constants . MAX FILE SIZE ) ;", "if ( ( str Max File Size == null ) || ( str Max File Size . length ( ) == NUM_ ) ) {", "max File Size = NUM_ ; }", "else {", "max File Size = Integer . parse Int ( str Max File Size ) ; }", "location = lmanager . get Property ( Log Constants . LOG PROP PREFIX + STR_ + log Name + STR_ ) ;", "if ( location == null ) {", "location = lmanager . get Property ( Log Constants . LOG LOCATION ) ; }", "if ( ( location == null ) || ( location . length ( ) == NUM_ ) ) {", "throw new Null Location Exception ( STR_ ) ; }", "if ( ! location . ends With ( File . separator ) ) {", "location += File . separator ; }", "String files Per Key Store String = lmanager . get Property ( Log Constants . FILES PER KEYSTORE ) ;", "if ( ( files Per Key Store String == null ) || ( files Per Key Store String . length ( ) == NUM_ ) ) {", "if ( Debug . warning Enabled ( ) ) {", "Debug . warning ( log Name + STR_ + STR_ ) ; }", "files Per Key Store String = STR_ ; }", "files Per Key Store = Integer . parse Int ( files Per Key Store String ) ;", "if ( Debug . message Enabled ( ) ) {", "Debug . message ( log Name + STR_ + files Per Key Store String ) ; }", "String archiver Class String = lmanager . get Property ( Log Constants . ARCHIVER ) ;", "if ( ( archiver Class String == null ) || ( archiver Class String . length ( ) == NUM_ ) ) {", "throw new Null Location Exception ( STR_ ) ; }", "archiver Class = archiver Class String ; }"]}
{"ids": "32974", "code": ["public void pull ( final Pull Params params , final Progress Monitor progress Monitor ) throws IO Exception {", "pull ( params , progress Monitor , docker Daemon Uri ) ; }"]}
{"ids": "63860", "code": ["public static Input Stream stream From String ( String location ) throws IO Exception {", "Input Stream is = null ;", "URL url = url From String ( location , null , false ) ;", "if ( url != null ) {", "is = url . open Stream ( ) ; }", "else {", "File f = new File ( location ) ;", "if ( f . exists ( ) ) is = new File Input Stream ( f ) ; }", "if ( is == null ) {", "return null ; }", "else if ( is G Zip File ( location ) ) {", "return new GZIP Input Stream ( is ) ; }", "else {", "return is ; } }"]}
{"ids": "20325", "code": ["public void add Update Listener ( Animator Update Listener listener ) {", "if ( m Update Listeners == null ) {", "m Update Listeners = new Array List < Animator Update Listener > ( ) ; }", "m Update Listeners . add ( listener ) ; }"]}
{"ids": "15455", "code": ["public void handle Request ( Request Context rc ) throws CLI Exception {", "super . handle Request ( rc ) ;", "SSO Token admin SSO Token = get Admin SSO Token ( ) ;", "I Output output Writer = get Output Writer ( ) ;", "String realm = get String Option Value ( I Argument . REALM NAME ) ;", "String id Name = get String Option Value ( ARGUMENT ID NAME ) ;", "String type = get String Option Value ( ARGUMENT ID TYPE ) ;", "Id Type id Type = convert 2 Id Type ( type ) ;", "String [ ] params = { realm , type , id Name } ;", "try {", "AM Identity Repository amir = new AM Identity Repository ( admin SSO Token , realm ) ;", "Set set = amir . get Allowed Id Operations ( id Type ) ;", "if ( ! set . contains ( Id Operation . SERVICE ) ) {", "throw new CLI Exception ( Message Format . format ( get Resource String ( STR_ ) , ( Object [ ] ) params ) , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; }", "write Log ( Log Writer . LOG ACCESS , Level . INFO , STR_ , params ) ;", "AM Identity amid = new AM Identity ( admin SSO Token , id Name , id Type , realm , null ) ;", "Set services = amid . get Assignable Services ( ) ;", "if ( id Type . equals ( Id Type . USER ) ) {", "services . remove ( Constants . SVC NAME USER ) ;", "services . remove ( Constants . SVC NAME AUTH CONFIG ) ;", "services . remove ( Constants . SVC NAME SAML ) ; }", "if ( ( services != null ) && ! services . is Empty ( ) ) {", "String msg = get Resource String ( STR_ ) ;", "String [ ] arg = { STR_ } ;", "for ( Iterator i = services . iterator ( ) ; i . has Next ( ) ; ) {", "arg [ NUM_ ] = ( String ) i . next ( ) ;", "output Writer . println Message ( Message Format . format ( msg , ( Object [ ] ) arg ) ) ; } }", "else {", "output Writer . println Message ( get Resource String ( STR_ ) ) ; }", "write Log ( Log Writer . LOG ACCESS , Level . INFO , STR_ , params ) ; }", "catch ( Id Repo Exception e ) {", "String [ ] args = { realm , type , id Name , e . get Message ( ) } ;", "debug Error ( STR_ , e ) ;", "write Log ( Log Writer . LOG ERROR , Level . INFO , STR_ , args ) ;", "throw new CLI Exception ( e , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; }", "catch ( SSO Exception e ) {", "String [ ] args = { realm , type , id Name , e . get Message ( ) } ;", "debug Error ( STR_ , e ) ;", "write Log ( Log Writer . LOG ERROR , Level . INFO , STR_ , args ) ;", "throw new CLI Exception ( e , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; } }"]}
{"ids": "28869", "code": ["public boolean is Alive ( ) {", "if ( has Sent Data ) {", "if ( System . current Time Millis ( ) - last Send Time < TIMEOUT ) return true ;", "return has Received Data && last Receive Time > last Send Time ; }", "return true ; }"]}
{"ids": "80947", "code": ["private void remove Selected Items ( List items ) {", "for ( Iterator iter = items . iterator ( ) ; iter . has Next ( ) ; ) {", "Object item = iter . next ( ) ;", "remove History Item ( item ) ; }", "refresh With Last Selection = false ;", "content Provider . refresh ( ) ; }"]}
{"ids": "6776", "code": ["public static < K , V > Map < K , V > of ( K k 1 , V v 1 , K k 2 , V v 2 , K k 3 , V v 3 , K k 4 , V v 4 ) {", "Map map = of ( ) ;", "map . put ( k 1 , v 1 ) ;", "map . put ( k 2 , v 2 ) ;", "map . put ( k 3 , v 3 ) ;", "map . put ( k 4 , v 4 ) ;", "return map ; }"]}
{"ids": "1284", "code": ["public static long size Of ( Struct sct ) {", "Iterator < Entry < Key , Object > > it = sct . entry Iterator ( ) ;", "Entry < Key , Object > e ;", "long size = NUM_ ;", "while ( it . has Next ( ) ) {", "e = it . next ( ) ;", "size += Size Of . size ( e . get Key ( ) ) ;", "size += Size Of . size ( e . get Value ( ) ) ; }", "return size ; }"]}
{"ids": "20228", "code": ["@ Override public boolean is Enabled ( ) {", "if ( ( attribute Selection Panel != null ) && ! is Value Only ( ) ) {", "return attribute Selection Panel . is Enabled ( ) ; }", "else {", "if ( table != null ) {", "return table . is Enabled ( ) ; } }", "return false ; }"]}
{"ids": "18380", "code": ["public static Header [ ] parse Headers ( final Session Input Buffer inbuffer , int max Header Count , int max Line Len , Line Parser parser ) throws Http Exception , IO Exception {", "if ( inbuffer == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( parser == null ) parser = Basic Line Parser . DEFAULT ;", "Array List header Lines = new Array List ( ) ;", "Char Array Buffer current = null ;", "Char Array Buffer previous = null ;", "for ( ; ; ) {", "if ( current == null ) {", "current = new Char Array Buffer ( NUM_ ) ; }", "else {", "current . clear ( ) ; }", "int l = inbuffer . read Line ( current ) ;", "if ( l == - NUM_ || current . length ( ) < NUM_ ) {", "break ; }", "if ( ( current . char At ( NUM_ ) == STR_ || current . char At ( NUM_ ) == STR_ ) && previous != null ) {", "int i = NUM_ ;", "while ( i < current . length ( ) ) {", "char ch = current . char At ( i ) ;", "if ( ch != STR_ && ch != STR_ ) {", "break ; }", "i ++ ; }", "if ( max Line Len > NUM_ && previous . length ( ) + NUM_ + current . length ( ) - i > max Line Len ) {", "throw new IO Exception ( STR_ ) ; }", "previous . append ( STR_ ) ;", "previous . append ( current , i , current . length ( ) - i ) ; }", "else {", "header Lines . add ( current ) ;", "previous = current ;", "current = null ; }", "if ( max Header Count > NUM_ && header Lines . size ( ) >= max Header Count ) {", "throw new IO Exception ( STR_ ) ; } }", "Header [ ] headers = new Header [ header Lines . size ( ) ] ;", "for ( int i = NUM_ ; i < header Lines . size ( ) ; i ++ ) {", "Char Array Buffer buffer = ( Char Array Buffer ) header Lines . get ( i ) ;", "try {", "headers [ i ] = parser . parse Header ( buffer ) ; }", "catch ( Parse Exception ex ) {", "throw new Protocol Exception ( ex . get Message ( ) ) ; } }", "return headers ; }"]}
{"ids": "29724", "code": ["public void read Content ( byte [ ] dst , int offset , int length ) {", "System . arraycopy ( content , NUM_ , dst , offset , length ) ; }"]}
{"ids": "32016", "code": ["public static void put Object Field ( Object obj , long field Off , Object val ) {", "UNSAFE . put Object ( obj , field Off , val ) ; }"]}
{"ids": "59632", "code": ["public List < Function Desc > list All Functions ( ) {", "List < Function Desc > functions = new Array List < Function Desc > ( ) ;", "for ( Measure Desc m : measures ) {", "functions . add ( m . get Function ( ) ) ; }", "return functions ; }"]}
{"ids": "40549", "code": ["private static boolean instance Of Any ( Object o , Collection < Class > classes ) {", "for ( Class c : classes ) {", "if ( c . is Instance ( o ) ) return true ; }", "return false ; }"]}
{"ids": "84977", "code": ["public static I Proposal Computer new Setter Attribute Proposal Computer ( Content Assist Request content Assist Request , I Java Project java Project ) {", "IDOM Node node = ( IDOM Node ) content Assist Request . get Node ( ) ;", "if ( node . get Node Type ( ) != IDOM Node . ELEMENT NODE ) {", "return null ; }", "String widget Type Name = Ui Binder Xml Model Utilities . compute Qualified Widget Type Name ( node ) ;", "if ( widget Type Name == null ) {", "return null ; }", "String match String = content Assist Request . get Match String ( ) ;", "return new Setter Attribute Proposal Computer ( node , widget Type Name , java Project , match String , content Assist Request . get Replacement Begin Position ( ) , match String . length ( ) ) ; }"]}
{"ids": "12046", "code": ["public void omit All ( ) {", "if ( write Chunk != null ) bytes Written += write Chunk . position ( ) ;", "bytes Read = bytes Written ;", "list . clear ( ) ;", "write Chunk = null ;", "read Chunk = null ; }"]}
{"ids": "52444", "code": ["private void refresh ( I Launch Configuration configuration ) {", "set Launch Configuration ( configuration ) ;", "try {", "f Model = create Classpath Model ( configuration ) ; }", "catch ( Exception e ) {", "message = e . get Message ( ) ;", "set Error Message ( e . get Message ( ) ) ; }", "f Classpath Viewer . set Launch Configuration ( configuration ) ;", "f Classpath Viewer . set Input ( f Model ) ;", "set Dirty ( false ) ; }"]}
{"ids": "33083", "code": ["public void compute Package Fragment Roots ( I Classpath Entry [ ] resolved Classpath , Object Vector accumulated Roots , Hash Set root I Ds , I Classpath Entry referring Entry , boolean retrieve Exported Roots , Map root To Resolved Entries ) throws Java Model Exception {", "if ( referring Entry == null ) {", "root I Ds . add ( root ID ( ) ) ; }", "for ( int i = NUM_ , length = resolved Classpath . length ; i < length ; i ++ ) {", "compute Package Fragment Roots ( resolved Classpath [ i ] , accumulated Roots , root I Ds , referring Entry , retrieve Exported Roots , root To Resolved Entries ) ; } }"]}
{"ids": "73345", "code": ["private void init ( ) {", "set Title ( STR_ ) ;", "som Panel = new SOM Properties Panel ( network Panel , SOM Props Panel Type . CREATE GROUP ) ;", "tab Logic . add ( som Panel ) ;", "layout Panel = new Main Layout Panel ( false , this ) ;", "layout Panel . set Current Layout ( SOM Group . DEFAULT LAYOUT ) ;", "tab Layout . add ( layout Panel ) ;", "tabbed Pane . add Tab ( STR_ , tab Logic ) ;", "tabbed Pane . add Tab ( STR_ , layout Panel ) ;", "set Content Pane ( tabbed Pane ) ;", "Action help Action = new Show Help Action ( som Panel . get Help Path ( ) ) ;", "add Button ( new J Button ( help Action ) ) ; }"]}
{"ids": "68866", "code": ["private String diff lines To Chars Munge ( String text , List < String > line Array , Map < String , Integer > line Hash ) {", "int line Start = NUM_ ;", "int line End = - NUM_ ;", "String line ;", "String Builder chars = new String Builder ( ) ;", "while ( line End < text . length ( ) - NUM_ ) {", "line End = text . index Of ( STR_ , line Start ) ;", "if ( line End == - NUM_ ) {", "line End = text . length ( ) - NUM_ ; }", "line = text . substring ( line Start , line End + NUM_ ) ;", "line Start = line End + NUM_ ;", "if ( line Hash . contains Key ( line ) ) {", "chars . append ( String . value Of ( ( char ) ( int ) line Hash . get ( line ) ) ) ; }", "else {", "line Array . add ( line ) ;", "line Hash . put ( line , line Array . size ( ) - NUM_ ) ;", "chars . append ( String . value Of ( ( char ) ( line Array . size ( ) - NUM_ ) ) ) ; } }", "return chars . to String ( ) ; }"]}
{"ids": "62812", "code": ["public void remove ( Video video ) {", "video List . remove ( video ) ;", "notify Data Set Changed ( ) ; }"]}
{"ids": "73845", "code": ["public boolean can Invert ( ) {", "return true ; }"]}
{"ids": "1587", "code": ["public void add All Searchables ( Array List < ? extends Search Result > searchable ) {", "searchables . add All ( searchable ) ; }"]}
{"ids": "12404", "code": ["public static int parse Int ( String text ) {", "return parse Int ( text , NUM_ ) ; }"]}
{"ids": "13283", "code": ["@ Override public void end Document ( Augmentations augs ) throws XNI Exception {", "try {", "if ( f Document Handler != null ) {", "f Document Handler . end Document ( ) ; }", "if ( f Content Handler != null ) {", "f Content Handler . end Document ( ) ; } }", "catch ( SAX Exception e ) {", "throw new XNI Exception ( e ) ; } }"]}
{"ids": "21857", "code": ["public String exec Command ( String command ) {", "String Builder buf = new String Builder ( ) ;", "send Wait For ( command , default Timeout , prompts , buf ) ;", "log . debug ( buf . to String ( ) ) ;", "return clean Output ( buf ) ; }"]}
{"ids": "67940", "code": ["private void Client Thread Run ( ) throws IO Exception {", "Socket Channel channel = null ;", "try {", "log . debug ( STR_ , hostname , port , pending . size ( ) ) ;", "channel = Socket Channel . open ( new Inet Socket Address ( hostname , port ) ) ;", "channel . configure Blocking ( false ) ;", "Client Thread Main Loop ( channel ) ; }", "finally {", "if ( channel != null ) {", "channel . close ( ) ; }", "if ( current != null ) {", "pending . offer First ( current ) ;", "current = null ; } } }"]}
{"ids": "3700", "code": ["@ Override public Path Impl scheme Walk ( String user Path , Map < String , Object > new Attributes , String uri , int offset ) {", "int length = uri . length ( ) ;", "if ( length < NUM_ + offset || uri . char At ( offset ) != STR_ || uri . char At ( NUM_ + offset ) != STR_ ) throw new Runtime Exception ( STR_ ) ;", "Char Buffer buf = new Char Buffer ( ) ;", "int i = NUM_ + offset ;", "int ch = NUM_ ;", "boolean is Ipv 6 = false ;", "for ( ; ( i < length && ( ch = uri . char At ( i ) ) != STR_ && ch != STR_ && ! ( ch == STR_ && ! is Ipv 6 ) ) ; i ++ ) {", "if ( ch == STR_ ) is Ipv 6 = true ;", "else if ( ch == STR_ ) is Ipv 6 = false ;", "buf . append ( ( char ) ch ) ; }", "String host = buf . to String ( ) ;", "if ( host . length ( ) == NUM_ ) throw new Runtime Exception ( STR_ ) ;", "int port = NUM_ ;", "if ( ch == STR_ ) {", "for ( i ++ ; i < length && ( ch = uri . char At ( i ) ) >= STR_ && ch <= STR_ ; i ++ ) {", "port = NUM_ * port + uri . char At ( i ) - STR_ ; } }", "return create ( this , user Path , new Attributes , host , port ) ; }"]}
{"ids": "9853", "code": ["@ Request Mapping ( value = STR_ ) public void sso Default Tenant Binding Error ( Locale locale , Http Servlet Response response ) throws IO Exception {", "logger . info ( STR_ + locale . to String ( ) + STR_ ) ;", "send Error ( locale , response , STR_ ) ; }"]}
{"ids": "15593", "code": ["@ After public void tear Down ( ) {", "web Client . close All Windows ( ) ; }"]}
{"ids": "69120", "code": ["@ Override public void on Can Start Video Service Changed ( boolean can Start Video Service ) {", "Log . i ( STR_ , STR_ + String . value Of ( can Start Video Service ) ) ;", "if ( can Start Video Service == true ) {", "m Conversation Helper . start Outgoing Video ( ) ;", "m Conversation Helper . start Incoming Video ( ) ; } }"]}
{"ids": "11349", "code": ["public Manifest ( Input Stream is ) throws IO Exception {", "while ( is . available ( ) != NUM_ ) {", "Message Header m = new Message Header ( is ) ;", "entries . add Element ( m ) ; } }"]}
{"ids": "84196", "code": ["@ Override public Object read Reply ( Class expected Class ) throws Throwable {", "int tag = read ( ) ;", "if ( tag == STR_ ) return read Object ( expected Class ) ;", "else if ( tag == STR_ ) {", "Hash Map map = ( Hash Map ) read Object ( Hash Map . class ) ;", "throw prepare Fault ( map ) ; }", "else {", "String Builder sb = new String Builder ( ) ;", "sb . append ( ( char ) tag ) ;", "try {", "int ch ;", "while ( ( ch = read ( ) ) >= NUM_ ) {", "sb . append ( ( char ) ch ) ; } }", "catch ( IO Exception e ) {", "log . log ( Level . FINE , e . to String ( ) , e ) ; }", "throw error ( STR_ + code Name ( tag ) + STR_ + sb ) ; } }"]}
{"ids": "56528", "code": ["public void remove Clicking Listener ( On Wheel Clicked Listener listener ) {", "clicking Listeners . remove ( listener ) ; }"]}
{"ids": "8157", "code": ["public static String unexpand Line ( Char Sequence self , int tab Stop ) {", "String Builder builder = new String Builder ( self . to String ( ) ) ;", "int index = NUM_ ;", "while ( index + tab Stop < builder . length ( ) ) {", "String piece = builder . substring ( index , index + tab Stop ) ;", "int count = NUM_ ;", "while ( ( count < tab Stop ) && ( Character . is Whitespace ( piece . char At ( tab Stop - ( count + NUM_ ) ) ) ) ) count ++ ;", "if ( count > NUM_ ) {", "piece = piece . substring ( NUM_ , tab Stop - count ) + STR_ ;", "builder . replace ( index , index + tab Stop , piece ) ;", "index = index + tab Stop - ( count - NUM_ ) ; }", "else index = index + tab Stop ; }", "return builder . to String ( ) ; }"]}
{"ids": "10366", "code": ["private void uninstall ( String row Type ) {", "if ( extensions By Rowtype . contains Key ( row Type ) ) {", "extensions By Rowtype . remove ( row Type ) ;", "File f = get Extension File ( row Type ) ;", "if ( f . exists ( ) ) {", "File Utils . delete Quietly ( f ) ; }", "else {", "log . warn ( STR_ + row Type ) ; } }", "else {", "log . warn ( STR_ + row Type ) ; } }"]}
{"ids": "11329", "code": ["public void add Property Change Listener ( String property Name , Property Change Listener in pcl ) {", "pc Support . add Property Change Listener ( property Name , in pcl ) ; }"]}
{"ids": "47051", "code": ["static final int table Size For ( int cap ) {", "int n = cap - NUM_ ;", "n |= n > > > NUM_ ;", "n |= n > > > NUM_ ;", "n |= n > > > NUM_ ;", "n |= n > > > NUM_ ;", "n |= n > > > NUM_ ;", "return ( n < NUM_ ) ? NUM_ : ( n >= MAXIMUM CAPACITY ) ? MAXIMUM CAPACITY : n + NUM_ ; }"]}
{"ids": "38682", "code": ["@ Override public boolean connection Allowed ( String event Name ) {", "if ( ! event Name . equals ( STR_ ) && ! event Name . equals ( STR_ ) && ! event Name . equals ( STR_ ) && ! event Name . equals ( STR_ ) ) {", "return false ; }", "if ( m listenee != null ) {", "return false ; }", "return true ; }"]}
{"ids": "11314", "code": ["protected void generate OM Graphic ( OM Graphic g ) {", "if ( g != null && g . get Need To Regenerate ( ) ) {", "Projection proj = get Projection ( ) ;", "if ( proj != null ) {", "g . generate ( proj ) ; }", "else if ( DEBUG ) {", "Debug . output ( STR_ + g . get Need To Regenerate ( ) ) ; } } }"]}
{"ids": "45213", "code": ["public void insert Variable ( ) {", "Script Step variable Step = Script Step Factory . create Variable ( get Variable Key ( ) , get Variable Value ( ) ) ;", "steps . add ( get Insert Index ( ) , variable Step ) ;", "variable Key = STR_ ;", "variable Value = STR_ ;", "reindex Script Steps ( ) ; }"]}
{"ids": "37914", "code": ["protected boolean [ ] can Handle Zero Training ( boolean nominal Predictor , boolean numeric Predictor , boolean string Predictor , boolean date Predictor , boolean relational Predictor , boolean multi Instance , int class Type ) {", "print ( STR_ ) ;", "print Attribute Summary ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type ) ;", "print ( STR_ ) ;", "Array List < String > accepts = new Array List < String > ( ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "int num Train = NUM_ , num Test = get Num Instances ( ) , num Classes = NUM_ , missing Level = NUM_ ;", "boolean predictor Missing = false , class Missing = false ;", "return run Basic Test ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type , missing Level , predictor Missing , class Missing , num Train , num Test , num Classes , accepts ) ; }"]}
{"ids": "86147", "code": ["public static byte [ ] long 2 buff ( long n ) {", "byte [ ] bs ;", "bs = new byte [ NUM_ ] ;", "bs [ NUM_ ] = ( byte ) ( ( n > > NUM_ ) & NUM_ ) ;", "bs [ NUM_ ] = ( byte ) ( ( n > > NUM_ ) & NUM_ ) ;", "bs [ NUM_ ] = ( byte ) ( ( n > > NUM_ ) & NUM_ ) ;", "bs [ NUM_ ] = ( byte ) ( ( n > > NUM_ ) & NUM_ ) ;", "bs [ NUM_ ] = ( byte ) ( ( n > > NUM_ ) & NUM_ ) ;", "bs [ NUM_ ] = ( byte ) ( ( n > > NUM_ ) & NUM_ ) ;", "bs [ NUM_ ] = ( byte ) ( ( n > > NUM_ ) & NUM_ ) ;", "bs [ NUM_ ] = ( byte ) ( n & NUM_ ) ;", "return bs ; }"]}
{"ids": "57556", "code": ["final boolean try Write Lock ( ) {", "Thread current = Thread . current Thread ( ) ;", "int c = get State ( ) ;", "if ( c != NUM_ ) {", "int w = exclusive Count ( c ) ;", "if ( w == NUM_ || current != get Exclusive Owner Thread ( ) ) return false ;", "if ( w == MAX COUNT ) throw new Error ( STR_ ) ; }", "if ( ! compare And Set State ( c , c + NUM_ ) ) return false ;", "set Exclusive Owner Thread ( current ) ;", "return true ; }"]}
{"ids": "2850", "code": ["public Io Service Listener Support ( Io Service service ) {", "if ( service == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . service = service ; }"]}
{"ids": "30856", "code": ["private void cancel Event Lease Do ( long event ID , Uuid lease ID ) throws Unknown Lease Exception {", "long now = System . current Time Millis ( ) ;", "Event Reg reg = ( Event Reg ) event By ID . get ( new Long ( event ID ) ) ;", "if ( reg == null || reg . lease Expiration <= now ) throw new Unknown Lease Exception ( ) ;", "delete Event ( reg ) ;", "if ( reg . lease Expiration == min Event Expiration ) concurrent Obj . waiter Notify ( event Notifier ) ; }"]}
{"ids": "43843", "code": ["public static boolean is Valid G Day ( String value ) {", "String regex = STR_ ;", "if ( value . matches ( regex ) ) {", "return is Valid Calendar Value ( value ) ; }", "else {", "return false ; } }"]}
{"ids": "761", "code": ["protected void paint 3 D Rect Lighting ( Graphics 2 D g 2 , int x , int y , int width , int height ) {", "g 2 . set Color ( Color . white ) ;", "g 2 . draw Line ( x + NUM_ , y + NUM_ , x + NUM_ , y + height - NUM_ ) ;", "g 2 . draw Line ( x + NUM_ , y + NUM_ , x + width - NUM_ , y + NUM_ ) ;", "g 2 . set Color ( Color . gray ) ;", "g 2 . draw Line ( x + NUM_ , y + height - NUM_ , x + width - NUM_ , y + height - NUM_ ) ;", "g 2 . draw Line ( x + width - NUM_ , y + NUM_ , x + width - NUM_ , y + height - NUM_ ) ;", "g 2 . set Color ( Color . dark Gray ) ;", "g 2 . draw Line ( x , y + height , x + width , y + height ) ;", "g 2 . draw Line ( x + width , y , x + width , y + height ) ; }"]}
{"ids": "13407", "code": ["private void parse Attributes ( Typed Array a ) {", "bar Width = ( int ) a . get Dimension ( R . styleable . Progress Wheel pw Bar Width , bar Width ) ;", "rim Width = ( int ) a . get Dimension ( R . styleable . Progress Wheel pw Rim Width , rim Width ) ;", "spin Speed = ( int ) a . get Dimension ( R . styleable . Progress Wheel pw Spin Speed , spin Speed ) ;", "bar Length = ( int ) a . get Dimension ( R . styleable . Progress Wheel pw Bar Length , bar Length ) ;", "delay Millis = a . get Integer ( R . styleable . Progress Wheel pw Delay Millis , delay Millis ) ;", "if ( delay Millis < NUM_ ) {", "delay Millis = NUM_ ; }", "if ( a . has Value ( R . styleable . Progress Wheel pw Text ) ) {", "set Text ( a . get String ( R . styleable . Progress Wheel pw Text ) ) ; }", "bar Color = a . get Color ( R . styleable . Progress Wheel pw Bar Color , bar Color ) ;", "text Color = a . get Color ( R . styleable . Progress Wheel pw Text Color , text Color ) ;", "rim Color = a . get Color ( R . styleable . Progress Wheel pw Rim Color , rim Color ) ;", "circle Color = a . get Color ( R . styleable . Progress Wheel pw Circle Color , circle Color ) ;", "contour Color = a . get Color ( R . styleable . Progress Wheel pw Contour Color , contour Color ) ;", "text Size = ( int ) a . get Dimension ( R . styleable . Progress Wheel pw Text Size , text Size ) ;", "contour Size = a . get Dimension ( R . styleable . Progress Wheel pw Contour Size , contour Size ) ;", "a . recycle ( ) ; }"]}
{"ids": "16902", "code": ["@ Deprecated public Media File ( File f , Media File Type type ) {", "this ( f . to Path ( ) , type ) ; }"]}
{"ids": "33319", "code": ["public Command Line clear ( ) {", "line . clear ( ) ;", "return this ; }"]}
{"ids": "86685", "code": ["public static String grep Minus V ( String val , String pattern ) {", "return grep Inner ( val , pattern , true ) ; }"]}
{"ids": "36562", "code": ["public Drop Down Popup Button Builder add ( Action action ) {", "popup Menu . add ( action ) ;", "return this ; }"]}
{"ids": "7034", "code": ["@ Suppress Lint ( STR_ ) private void attach Image Fromm Gallery ( ) {", "Bundle con Data = new Bundle ( ) ;", "Intent intent = new Intent ( ) ;", "if ( ( m Selected Gallery Items List . size ( ) == NUM_ ) || ( Build . VERSION . SDK INT < Build . VERSION CODES . JELLY BEAN MR 2 ) ) {", "intent . set Data ( m Selected Gallery Items List . get ( NUM_ ) . m File Uri ) ; }", "else if ( m Selected Gallery Items List . size ( ) > NUM_ ) {", "Clip Data . Item first Uri = new Clip Data . Item ( null , null , null , m Selected Gallery Items List . get ( NUM_ ) . m File Uri ) ;", "String [ ] mime Type = { STR_ } ;", "Clip Data clip Data = new Clip Data ( STR_ , mime Type , first Uri ) ;", "for ( int index = NUM_ ; index < m Selected Gallery Items List . size ( ) ; index ++ ) {", "Clip Data . Item item = new Clip Data . Item ( null , null , null , m Selected Gallery Items List . get ( index ) . m File Uri ) ;", "clip Data . add Item ( item ) ; }", "intent . set Clip Data ( clip Data ) ; }", "else {", "Uri uri Saved From Life Cycle = ( Uri ) m Image Preview Image View . get Tag ( ) ;", "if ( null != uri Saved From Life Cycle ) {", "intent . set Data ( uri Saved From Life Cycle ) ; } }", "intent . put Extras ( con Data ) ;", "set Result ( RESULT OK , intent ) ;", "Vector App . set Saved Camera Image Preview ( null ) ;", "finish ( ) ; }"]}
{"ids": "79879", "code": ["public static void mkdirs ( File directory ) throws Create Directory Exception {", "if ( directory . exists ( ) ) {", "if ( directory . is Directory ( ) ) {", "return ; }", "if ( ! directory . delete ( ) ) {", "throw new Create Directory Exception ( directory . get Absolute Path ( ) , new File Delete Exception ( directory . get Absolute Path ( ) ) ) ; } }", "if ( ! directory . mkdirs ( ) && ! directory . is Directory ( ) ) {", "throw new Create Directory Exception ( directory . get Absolute Path ( ) ) ; } }"]}
{"ids": "39088", "code": ["public boolean has Dependency ( Capability c ) {", "if ( do Not Check Capabilities ( ) ) {", "return false ; }", "return m Dependencies . contains ( c ) ; }"]}
{"ids": "53457", "code": ["private static int prefix Len ( String o 1 , String o 2 ) {", "final int l 1 = o 1 . length ( ) , l 2 = o 2 . length ( ) , l = l 1 < l 2 ? l 1 : l 2 ;", "int prefix = NUM_ ;", "while ( prefix < l && ( o 1 . char At ( prefix ) == o 2 . char At ( prefix ) ) ) {", "prefix ++ ; }", "return prefix ; }"]}
{"ids": "52922", "code": ["@ Override public void write External ( Object Output out ) throws IO Exception {", "super . write External ( out ) ;", "out . write Double ( parent Distance ) ; }"]}
{"ids": "47830", "code": ["static int should Natively Focus Heavyweight ( Component heavyweight , Component descendant , boolean temporary , boolean focused Window Change Allowed , long time , Caused Focus Event . Cause cause ) {", "if ( log . is Loggable ( Platform Logger . Level . FINE ) ) {", "if ( heavyweight == null ) {", "log . fine ( STR_ ) ; }", "if ( time == NUM_ ) {", "log . fine ( STR_ ) ; } }", "if ( descendant == null ) {", "descendant = heavyweight ; }", "Keyboard Focus Manager manager = get Current Keyboard Focus Manager ( Sun Toolkit . target To App Context ( descendant ) ) ;", "Keyboard Focus Manager this Manager = get Current Keyboard Focus Manager ( ) ;", "Component current Focus Owner = this Manager . get Global Focus Owner ( ) ;", "Component native Focus Owner = this Manager . get Native Focus Owner ( ) ;", "Window native Focused Window = this Manager . get Native Focused Window ( ) ;", "if ( focus Log . is Loggable ( Platform Logger . Level . FINER ) ) {", "focus Log . finer ( STR_ , String . value Of ( descendant ) , String . value Of ( heavyweight ) ) ; }", "if ( focus Log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "focus Log . finest ( STR_ , String . value Of ( current Focus Owner ) ) ;", "focus Log . finest ( STR_ , String . value Of ( native Focus Owner ) ) ;", "focus Log . finest ( STR_ , String . value Of ( native Focused Window ) ) ; }", "synchronized ( heavyweight Requests ) {", "Heavyweight Focus Request hw Focus Request = get Last HW Request ( ) ;", "if ( focus Log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "focus Log . finest ( STR_ , String . value Of ( hw Focus Request ) ) ; }", "if ( hw Focus Request == null && heavyweight == native Focus Owner && heavyweight . get Containing Window ( ) == native Focused Window ) {", "if ( descendant == current Focus Owner ) {", "if ( focus Log . is Loggable ( Platform Logger . Level . FINEST ) ) focus Log . finest ( STR_ , String . value Of ( descendant ) ) ;", "return SNFH FAILURE ; }", "manager . enqueue Key Events ( time , descendant ) ;", "hw Focus Request = new Heavyweight Focus Request ( heavyweight , descendant , temporary , cause ) ;", "heavyweight Requests . add ( hw Focus Request ) ;", "if ( current Focus Owner != null ) {", "Focus Event current Focus Owner Event = new Caused Focus Event ( current Focus Owner , Focus Event . FOCUS LOST , temporary , descendant , cause ) ;", "Sun Toolkit . post Event ( current Focus Owner . app Context , current Focus Owner Event ) ; }", "Focus Event new Focus Owner Event = new Caused Focus Event ( descendant , Focus Event . FOCUS GAINED , temporary , current Focus Owner , cause ) ;", "Sun Toolkit . post Event ( descendant . app Context , new Focus Owner Event ) ;", "if ( focus Log . is Loggable ( Platform Logger . Level . FINEST ) ) focus Log . finest ( STR_ , String . value Of ( descendant ) ) ;", "return SNFH SUCCESS HANDLED ; }", "else if ( hw Focus Request != null && hw Focus Request . heavyweight == heavyweight ) {", "if ( hw Focus Request . add Lightweight Request ( descendant , temporary , cause ) ) {", "manager . enqueue Key Events ( time , descendant ) ; }", "if ( focus Log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "focus Log . finest ( STR_ + descendant + STR_ + heavyweight ) ; }", "return SNFH SUCCESS HANDLED ; }", "else {", "if ( ! focused Window Change Allowed ) {", "if ( hw Focus Request == Heavyweight Focus Request . CLEAR GLOBAL FOCUS OWNER ) {", "int size = heavyweight Requests . size ( ) ;", "hw Focus Request = ( Heavyweight Focus Request ) ( ( size >= NUM_ ) ? heavyweight Requests . get ( size - NUM_ ) : null ) ; }", "if ( focused Window Changed ( heavyweight , ( hw Focus Request != null ) ? hw Focus Request . heavyweight : native Focused Window ) ) {", "if ( focus Log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "focus Log . finest ( STR_ + descendant ) ; }", "return SNFH FAILURE ; } }", "manager . enqueue Key Events ( time , descendant ) ;", "heavyweight Requests . add ( new Heavyweight Focus Request ( heavyweight , descendant , temporary , cause ) ) ;", "if ( focus Log . is Loggable ( Platform Logger . Level . FINEST ) ) {", "focus Log . finest ( STR_ + descendant ) ; }", "return SNFH SUCCESS PROCEED ; } } }"]}
{"ids": "23499", "code": ["public Named Thread Factory ( final String pool ID ) {", "id = pool ID ; }"]}
{"ids": "74353", "code": ["public void move Location Up ( Route Location rl ) {", "int sequence Id = rl . get Sequence Id ( ) ;", "if ( sequence Id - NUM_ <= NUM_ ) {", "rl . set Sequence Id ( sequence Num + NUM_ ) ;", "resequence Ids ( ) ; }", "else {", "Route Location replace Rl = get Item By Sequence Id ( sequence Id - NUM_ ) ;", "if ( replace Rl != null ) {", "replace Rl . set Sequence Id ( sequence Id ) ;", "rl . set Sequence Id ( sequence Id - NUM_ ) ; }", "else {", "resequence Ids ( ) ; } }", "set Dirty And Fire Property Change ( LISTCHANGE CHANGED PROPERTY , null , Integer . to String ( sequence Id ) ) ; }"]}
{"ids": "39111", "code": ["protected Attribute generate Attribute ( int index , int att Type , String name Prefix ) throws Exception {", "Attribute result ;", "String name ;", "int val Index ;", "int nom Count ;", "String prefix ;", "result = null ;", "if ( index == CLASS IS LAST ) {", "val Index = NUM_ ;", "name = STR_ ;", "prefix = STR_ ;", "nom Count = get Num Classes ( ) ; }", "else {", "val Index = index ;", "nom Count = get Num Nominal Values ( ) ;", "prefix = STR_ + ( val Index + NUM_ ) + STR_ ;", "switch ( att Type ) {", "case Attribute . NOMINAL :", "name = STR_ + ( val Index + NUM_ ) ;", "break ;", "case Attribute . NUMERIC :", "name = STR_ + ( val Index + NUM_ ) ;", "break ;", "case Attribute . STRING :", "name = STR_ + ( val Index + NUM_ ) ;", "break ;", "case Attribute . DATE :", "name = STR_ + ( val Index + NUM_ ) ;", "break ;", "case Attribute . RELATIONAL :", "name = STR_ + ( val Index + NUM_ ) ;", "break ;", "default :", "throw new Illegal Argument Exception ( STR_ + att Type + STR_ ) ; } }", "switch ( att Type ) {", "case Attribute . NOMINAL :", "Array List < String > nom Strings = new Array List < String > ( val Index + NUM_ ) ;", "for ( int j = NUM_ ; j < nom Count ; j ++ ) {", "nom Strings . add ( prefix + ( j + NUM_ ) ) ; }", "result = new Attribute ( name Prefix + name , nom Strings ) ;", "break ;", "case Attribute . NUMERIC :", "result = new Attribute ( name Prefix + name ) ;", "break ;", "case Attribute . STRING :", "result = new Attribute ( name Prefix + name , ( Array List < String > ) null ) ;", "break ;", "case Attribute . DATE :", "result = new Attribute ( name Prefix + name , STR_ ) ;", "break ;", "case Attribute . RELATIONAL :", "Instances rel ;", "if ( index == CLASS IS LAST ) {", "rel = get Relational Class Format ( ) ; }", "else {", "rel = get Relational Format ( index ) ; }", "if ( rel == null ) {", "Test Instances dataset = new Test Instances ( ) ;", "dataset . set Num Nominal ( get Num Relational Nominal ( ) ) ;", "dataset . set Num Nominal Values ( get Num Relational Nominal Values ( ) ) ;", "dataset . set Num Numeric ( get Num Relational Numeric ( ) ) ;", "dataset . set Num String ( get Num Relational String ( ) ) ;", "dataset . set Num Date ( get Num Relational Date ( ) ) ;", "dataset . set Num Instances ( NUM_ ) ;", "dataset . set Class Type ( Attribute . NOMINAL ) ;", "rel = new Instances ( dataset . generate ( ) ) ;", "if ( ! get No Class ( ) ) {", "int cls Index = rel . class Index ( ) ;", "rel . set Class Index ( - NUM_ ) ;", "rel . delete Attribute At ( cls Index ) ; } }", "result = new Attribute ( name Prefix + name , rel ) ;", "break ;", "default :", "throw new Illegal Argument Exception ( STR_ + att Type + STR_ ) ; }", "return result ; }"]}
{"ids": "38081", "code": ["public static String print Canopy Assignments ( Instances data Points , List < long [ ] > canopy Assignments ) {", "String Builder temp = new String Builder ( ) ;", "for ( int i = NUM_ ; i < data Points . size ( ) ; i ++ ) {", "temp . append ( STR_ + i + STR_ ) ;", "temp . append ( data Points . instance ( i ) ) ;", "if ( canopy Assignments != null && canopy Assignments . size ( ) == data Points . size ( ) ) {", "long [ ] assignments = canopy Assignments . get ( i ) ;", "temp . append ( print Single Assignment ( assignments ) ) ; }", "temp . append ( STR_ ) ; }", "return temp . to String ( ) ; }"]}
{"ids": "45899", "code": ["public static void register Default Prefixes ( ) throws XML Security Exception {", "set Default Prefix ( STR_ , STR_ ) ;", "set Default Prefix ( STR_ , STR_ ) ;", "set Default Prefix ( STR_ , STR_ ) ;", "set Default Prefix ( STR_ , STR_ ) ;", "set Default Prefix ( STR_ , STR_ ) ;", "set Default Prefix ( STR_ , STR_ ) ;", "set Default Prefix ( STR_ , STR_ ) ;", "set Default Prefix ( STR_ , STR_ ) ; }"]}
{"ids": "65750", "code": ["protected void init BP Order Details ( int C B Partner ID , boolean for Invoice ) {", "log . config ( STR_ + C B Partner ID ) ;", "Key Name Pair pp = new Key Name Pair ( NUM_ , STR_ ) ;", "order Field . remove Action Listener ( this ) ;", "order Field . remove All Items ( ) ;", "order Field . add Item ( pp ) ;", "Array List < Key Name Pair > list = load Order Data ( C B Partner ID , for Invoice , false ) ;", "for ( Key Name Pair knp : list ) order Field . add Item ( knp ) ;", "order Field . set Selected Index ( NUM_ ) ;", "order Field . add Action Listener ( this ) ;", "dialog . pack ( ) ;", "init BP Details ( C B Partner ID ) ; }"]}
{"ids": "56929", "code": ["private void write Toc ( Byte Buffer data File Buffer , Toc Type toc Type , int entry Count , int first Entry Offset ) {", "data File Buffer . put Int ( toc Type . identifier ) ;", "data File Buffer . put Int ( entry Count ) ;", "data File Buffer . put Long ( first Entry Offset ) ; }"]}
{"ids": "29670", "code": ["public void start Part ( String content Type , String [ ] headers ) throws IO Exception {", "write Current Boundary ( ) ;", "if ( content Type != null ) {", "write String ( Mime Utils . HEADER CONTENT TYPE + STR_ + content Type ) ;", "out . write ( CRLF ) ; }", "for ( int i = NUM_ ; headers != null && i < headers . length ; i ++ ) {", "write String ( headers [ i ] ) ;", "out . write ( CRLF ) ; }", "out . write ( CRLF ) ; }"]}
{"ids": "59903", "code": ["public Embedded Meta Service ( ) throws IO Exception , Execution Exception {", "this ( System . getenv ( JOLIE HOME ENV ) ) ; }"]}
{"ids": "38543", "code": ["public int show Dialog ( ) {", "m Result = CANCEL OPTION ;", "int [ ] orig Selected = m List . get Selected Indices ( ) ;", "set Visible ( true ) ;", "if ( m Result == CANCEL OPTION ) {", "m List . set Selected Indices ( orig Selected ) ; }", "return m Result ; }"]}
{"ids": "68552", "code": ["public final void add Alarm Values ( final List < Alarm Value Impl > alarm Values ) {", "if ( alarm Values != null ) {", "for ( Alarm Value Impl alarm Value : alarm Values ) {", "if ( alarm Value != null ) {", "add Alarm Value ( alarm Value ) ; } } } }"]}
{"ids": "66167", "code": ["public String product ( Properties ctx , int Window No , Grid Tab m Tab , Grid Field m Field , Object value ) {", "Integer M Product ID = ( Integer ) value ;", "if ( M Product ID == null || M Product ID . int Value ( ) == NUM_ ) return STR_ ;", "if ( Env . get Context As Int ( ctx , Window No , Env . TAB INFO , STR_ ) == M Product ID . int Value ( ) && Env . get Context As Int ( ctx , Window No , Env . TAB INFO , STR_ ) != NUM_ ) m Tab . set Value ( STR_ , Env . get Context As Int ( ctx , Window No , Env . TAB INFO , STR_ ) ) ;", "else m Tab . set Value ( STR_ , null ) ;", "check Qty Available ( ctx , m Tab , Window No , M Product ID , null ) ;", "return STR_ ; }"]}
{"ids": "22759", "code": ["protected void processpacket ( Sim Event ev ) {", "Cloud Sim . cancel All ( get Id ( ) , new Predicate Type ( Cloud Sim Tags . Network Event UP ) ) ;", "schedule ( get Id ( ) , switching delay , Cloud Sim Tags . Network Event UP ) ;", "pktlist . add ( ( Network Packet ) ev . get Data ( ) ) ; }"]}
{"ids": "70865", "code": ["public void add Child ( Controller controller ) {", "if ( children == null ) children = new Array List < Controller > ( ) ;", "children . add ( controller ) ;", "controller . parent = this ; }"]}
{"ids": "74491", "code": ["protected boolean check Turnouts In Section ( Section s , int seq Num , Section next Section , Active Train at , Layout Editor le , Section prev Section ) {", "return turnout Util ( s , seq Num , next Section , at , le , false , false , prev Section ) ; }"]}
{"ids": "7668", "code": ["private Point 2 D calculate Label Anchor Point ( Item Label Anchor anchor , Rectangle 2 D bar , Plot Orientation orientation ) {", "Point 2 D result = null ;", "double offset = get Item Label Anchor Offset ( ) ;", "double x 0 = bar . get X ( ) - offset ;", "double x 1 = bar . get X ( ) ;", "double x 2 = bar . get X ( ) + offset ;", "double x 3 = bar . get Center X ( ) ;", "double x 4 = bar . get Max X ( ) - offset ;", "double x 5 = bar . get Max X ( ) ;", "double x 6 = bar . get Max X ( ) + offset ;", "double y 0 = bar . get Max Y ( ) + offset ;", "double y 1 = bar . get Max Y ( ) ;", "double y 2 = bar . get Max Y ( ) - offset ;", "double y 3 = bar . get Center Y ( ) ;", "double y 4 = bar . get Min Y ( ) + offset ;", "double y 5 = bar . get Min Y ( ) ;", "double y 6 = bar . get Min Y ( ) - offset ;", "if ( anchor == Item Label Anchor . CENTER ) {", "result = new Point 2 D . Double ( x 3 , y 3 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 1 ) {", "result = new Point 2 D . Double ( x 4 , y 4 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 2 ) {", "result = new Point 2 D . Double ( x 4 , y 4 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 3 ) {", "result = new Point 2 D . Double ( x 4 , y 3 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 4 ) {", "result = new Point 2 D . Double ( x 4 , y 2 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 5 ) {", "result = new Point 2 D . Double ( x 4 , y 2 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 6 ) {", "result = new Point 2 D . Double ( x 3 , y 2 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 7 ) {", "result = new Point 2 D . Double ( x 2 , y 2 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 8 ) {", "result = new Point 2 D . Double ( x 2 , y 2 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 9 ) {", "result = new Point 2 D . Double ( x 2 , y 3 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 10 ) {", "result = new Point 2 D . Double ( x 2 , y 4 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 11 ) {", "result = new Point 2 D . Double ( x 2 , y 4 ) ; }", "else if ( anchor == Item Label Anchor . INSIDE 12 ) {", "result = new Point 2 D . Double ( x 3 , y 4 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 1 ) {", "result = new Point 2 D . Double ( x 5 , y 6 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 2 ) {", "result = new Point 2 D . Double ( x 6 , y 5 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 3 ) {", "result = new Point 2 D . Double ( x 6 , y 3 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 4 ) {", "result = new Point 2 D . Double ( x 6 , y 1 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 5 ) {", "result = new Point 2 D . Double ( x 5 , y 0 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 6 ) {", "result = new Point 2 D . Double ( x 3 , y 0 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 7 ) {", "result = new Point 2 D . Double ( x 1 , y 0 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 8 ) {", "result = new Point 2 D . Double ( x 0 , y 1 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 9 ) {", "result = new Point 2 D . Double ( x 0 , y 3 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 10 ) {", "result = new Point 2 D . Double ( x 0 , y 5 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 11 ) {", "result = new Point 2 D . Double ( x 1 , y 6 ) ; }", "else if ( anchor == Item Label Anchor . OUTSIDE 12 ) {", "result = new Point 2 D . Double ( x 3 , y 6 ) ; }", "return result ; }"]}
{"ids": "60680", "code": ["public static String read Fully ( Reader reader ) throws IO Exception {", "try {", "String Writer writer = new String Writer ( ) ;", "char [ ] buffer = new char [ NUM_ ] ;", "int count ;", "while ( ( count = reader . read ( buffer ) ) != - NUM_ ) {", "writer . write ( buffer , NUM_ , count ) ; }", "return writer . to String ( ) ; }", "finally {", "reader . close ( ) ; } }"]}
{"ids": "39358", "code": ["protected String instance To Matlab ( Instance inst ) {", "String Buffer result ;", "int i ;", "result = new String Buffer ( ) ;", "for ( i = NUM_ ; i < inst . num Attributes ( ) ; i ++ ) {", "if ( i > NUM_ ) {", "result . append ( ( m Use Tabs ? STR_ : STR_ ) ) ; }", "result . append ( m Format . format ( inst . value ( i ) ) ) ; }", "return result . to String ( ) ; }"]}
{"ids": "43085", "code": ["private static double distance ( Problem problem , Solution a , Solution b , double power ) {", "double distance = NUM_ ;", "for ( int i = NUM_ ; i < problem . get Number Of Objectives ( ) ; i ++ ) {", "distance += Math . pow ( Math . abs ( a . get Objective ( i ) - b . get Objective ( i ) ) , power ) ; }", "return Math . pow ( distance , NUM_ / power ) ; }"]}
{"ids": "9044", "code": ["private List < Token Type > extract String Literal Delimiting Tokens ( String [ ] tokens ) {", "List < Token Type > delimiting Tokens = new Array List < Token Type > ( ) ;", "for ( String token : tokens ) {", "String clean Token = clean Token ( token ) ;", "boolean handled = false ;", "if ( alternate Quote == null ) {", "String alternate Quote From Token = extract Alternate Open Quote ( clean Token ) ;", "if ( alternate Quote From Token != null ) {", "String close Quote = compute Alternate Close Quote ( alternate Quote From Token ) ;", "if ( clean Token . length ( ) >= ( alternate Quote From Token . length ( ) + close Quote . length ( ) ) && clean Token . starts With ( alternate Quote From Token ) && clean Token . ends With ( close Quote ) ) {", "continue ; }", "alternate Quote = close Quote ;", "delimiting Tokens . add ( Token Type . ALTERNATE QUOTE ) ;", "continue ; } }", "if ( ( alternate Quote != null ) && clean Token . ends With ( alternate Quote ) ) {", "alternate Quote = null ;", "delimiting Tokens . add ( Token Type . ALTERNATE QUOTE ) ;", "continue ; }", "if ( ( clean Token . length ( ) >= NUM_ ) && clean Token . starts With ( STR_ ) && clean Token . ends With ( STR_ ) ) {", "continue ; }", "if ( ( clean Token . length ( ) >= NUM_ ) && clean Token . starts With ( STR_ ) && clean Token . ends With ( STR_ ) ) {", "continue ; }", "if ( is Single Line Comment ( clean Token ) ) {", "delimiting Tokens . add ( Token Type . SINGLE LINE COMMENT ) ;", "handled = true ; }", "if ( clean Token . starts With ( STR_ ) ) {", "delimiting Tokens . add ( Token Type . MULTI LINE COMMENT ) ;", "handled = true ; }", "else if ( clean Token . starts With ( STR_ ) ) {", "delimiting Tokens . add ( Token Type . QUOTE ) ;", "handled = true ; }", "if ( ! clean Token . starts With ( STR_ ) && clean Token . ends With ( STR_ ) ) {", "delimiting Tokens . add ( Token Type . MULTI LINE COMMENT ) ;", "handled = true ; }", "else if ( ! clean Token . starts With ( STR_ ) && clean Token . ends With ( STR_ ) ) {", "delimiting Tokens . add ( Token Type . QUOTE ) ;", "handled = true ; }", "if ( ! handled ) {", "delimiting Tokens . add ( Token Type . OTHER ) ; } }", "return delimiting Tokens ; }"]}
{"ids": "55474", "code": ["private void print Rainbow User ( User user , String user Name , boolean action , Special Color type , String id ) {", "Simple Attribute Set user Style = new Simple Attribute Set ( styles . nick ( ) ) ;", "user Style . add Attribute ( Attribute . IS USER MESSAGE , true ) ;", "user Style . add Attribute ( Attribute . USER , user ) ;", "if ( id != null ) {", "user Style . add Attribute ( Attribute . ID , id ) ; }", "int length = user Name . length ( ) ;", "if ( action ) {", "print ( STR_ , styles . nick ( ) ) ; }", "for ( int i = NUM_ ; i < length ; i ++ ) {", "Color c ;", "if ( type == Special Color . RAINBOW ) {", "c = make Rainbow Color ( i , length ) ; }", "else {", "c = make Gold Color ( i , length ) ; }", "Style Constants . set Foreground ( user Style , c ) ;", "print ( user Name . substring ( i , i + NUM_ ) , user Style ) ; } }"]}
{"ids": "74445", "code": ["public void notify Address Throttle Found ( Dcc Throttle t ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ ) ; }", "m Throttle = t ;", "set Enabled ( true ) ;", "m Throttle . add Property Change Listener ( this ) ;", "set Fn Buttons ( ) ; }"]}
{"ids": "45931", "code": ["public boolean verify ( ) throws Missing Resource Failure Exception , XML Security Exception {", "return super . verify References ( false ) ; }"]}
{"ids": "13941", "code": ["public Open Id Prompt ( String prompt ) {", "original Value = prompt ;", "if ( is Empty ( prompt ) ) {", "prompts = Collections . empty Set ( ) ; }", "else {", "prompts = string To Set ( prompt . to Lower Case ( ) ) ; } }"]}
{"ids": "16607", "code": ["private static boolean calculate Is Failure ( ) {", "int random Value = random . next Int ( NUM_ ) + NUM_ ;", "return random Value <= ERROR PCT ; }"]}
{"ids": "70751", "code": ["private int check User Link ( Spannable String Builder out , String in , int start ) {", "int pos = start + NUM_ ;", "String Builder temp = new String Builder ( ) ;", "String target String = in . substring ( pos , Math . min ( in . length ( ) , pos + NUM_ ) ) ;", "for ( int i = NUM_ ; i < target String . length ( ) ; i ++ ) {", "char c = target String . char At ( i ) ;", "if ( ( c >= STR_ && c <= STR_ ) || ( c >= STR_ && c <= STR_ ) || ( c >= STR_ && c <= STR_ ) || c == STR_ ) {", "temp . append ( c ) ; }", "else {", "break ; } }", "String username = temp . to String ( ) ;", "if ( username . length ( ) < NUM_ || username . equals Ignore Case ( STR_ ) ) {", "return - NUM_ ; }", "out . append ( username ) ;", "return pos + username . length ( ) - NUM_ ; }"]}
{"ids": "59635", "code": ["public void clear ( ) {", "m Array List . clear ( ) ; }"]}
{"ids": "29119", "code": ["public static Class Descriptor create Class Descriptor From Resource Name ( String resource Name ) {", "if ( ! is Class Resource ( resource Name ) ) {", "throw new Illegal Argument Exception ( STR_ + resource Name + STR_ ) ; }", "return create Class Descriptor ( resource Name . substring ( NUM_ , resource Name . length ( ) - NUM_ ) ) ; }"]}
{"ids": "37061", "code": ["public static void show ( final Window parent , final String content ) {", "final C Log File Dialog dialog = new C Log File Dialog ( parent , content ) ;", "Gui Helper . center Child To Parent ( parent , dialog , true ) ;", "dialog . set Visible ( true ) ; }"]}
{"ids": "18232", "code": ["protected void end Node ( Node node ) throws org . xml . sax . SAX Exception {", "switch ( node . get Node Type ( ) ) {", "case Node . DOCUMENT NODE :", "break ;", "case Node . DOCUMENT TYPE NODE :", "serialize Doc Type ( ( Document Type ) node , false ) ;", "break ;", "case Node . ELEMENT NODE :", "serialize Element ( ( Element ) node , false ) ;", "break ;", "case Node . CDATA SECTION NODE :", "break ;", "case Node . ENTITY REFERENCE NODE :", "serialize Entity Reference ( ( Entity Reference ) node , false ) ;", "break ;", "default : } }"]}
{"ids": "7241", "code": ["public Create Window Clause add View ( String namespace , String name ) {", "views . add ( View . create ( namespace , name ) ) ;", "return this ; }"]}
{"ids": "32797", "code": ["public int size ( ) {", "return set . size ( ) ; }"]}
{"ids": "51749", "code": ["public void associate Connection ( Object connection ) throws Resource Exception {", "if ( ! connection Sharing ) disassociate Connections ( ) ;", "try {", "final FB Connection abstract Connection = ( FB Connection ) connection ;", "abstract Connection . set Managed Connection ( this ) ;", "connection Handles . add ( abstract Connection ) ; }", "catch ( Class Cast Exception cce ) {", "throw new FB Resource Exception ( STR_ , cce ) ; } }"]}
{"ids": "45372", "code": ["private void save ( ) {", "try {", "File Utils . write ( new File ( jar Name + STR_ ) , text ) ; }", "catch ( IO Exception e ) {", "J Option Pane . show Message Dialog ( null , e . get Message ( ) , STR_ , J Option Pane . ERROR MESSAGE ) ; } }"]}
{"ids": "8930", "code": ["private static void assert Not Empty ( String message , String string ) {", "assert Not Null ( message , string ) ;", "assert False ( message , string . equals ( STR_ ) ) ; }"]}
{"ids": "24217", "code": ["private void generate Entity Config ( Managed Entity Config config ) throws SAX Exception {", "String host = config . get Host ( ) ;", "if ( host != null ) {", "handler . start Element ( STR_ , HOST , HOST , EMPTY ) ;", "handler . characters ( host . to Char Array ( ) , NUM_ , host . length ( ) ) ;", "handler . end Element ( STR_ , HOST , HOST ) ; }", "String remote Command = config . get Remote Command ( ) ;", "if ( remote Command != null ) {", "handler . start Element ( STR_ , REMOTE COMMAND , REMOTE COMMAND , EMPTY ) ;", "handler . characters ( remote Command . to Char Array ( ) , NUM_ , remote Command . length ( ) ) ;", "handler . end Element ( STR_ , REMOTE COMMAND , REMOTE COMMAND ) ; }", "String working Directory = config . get Working Directory ( ) ;", "if ( working Directory != null ) {", "handler . start Element ( STR_ , WORKING DIRECTORY , WORKING DIRECTORY , EMPTY ) ;", "handler . characters ( working Directory . to Char Array ( ) , NUM_ , working Directory . length ( ) ) ;", "handler . end Element ( STR_ , WORKING DIRECTORY , WORKING DIRECTORY ) ; }", "String product Directory = config . get Product Directory ( ) ;", "if ( product Directory != null ) {", "handler . start Element ( STR_ , PRODUCT DIRECTORY , PRODUCT DIRECTORY , EMPTY ) ;", "handler . characters ( product Directory . to Char Array ( ) , NUM_ , product Directory . length ( ) ) ;", "handler . end Element ( STR_ , PRODUCT DIRECTORY , PRODUCT DIRECTORY ) ; } }"]}
{"ids": "20732", "code": ["public void hilite Label ( Node v , Node Data data ) {", "Node View nv = viewer . get NV ( v ) ;", "if ( nv . get Location ( ) == null ) return ;", "Point apt = nv . get Label Position ( viewer . trans ) ;", "if ( apt == null ) return ;", "gc . set Color ( Program Properties . SELECTION COLOR ADDITIONAL TEXT ) ;", "if ( ! nv . get Label Visible ( ) && nv . get Label ( ) != null ) {", "gc . set Font ( nv . get Font ( ) ) ;", "gc . draw String ( nv . get Label ( ) , apt . x , apt . y ) ; }", "if ( data . get Summarized ( ) . length > NUM_ || ( data . get Summarized ( ) . length == NUM_ && data . get Summarized ( ) [ NUM_ ] > NUM_ ) ) {", "gc . set Font ( selection Font ) ;", "String Builder buf = new String Builder ( ) ;", "if ( data . get Count Assigned ( ) > NUM_ ) {", "buf . append ( STR_ ) ;", "for ( int value : data . get Assigned ( ) ) {", "buf . append ( String . format ( STR_ , value ) ) ; }", "gc . draw String ( buf . to String ( ) , apt . x , apt . y += NUM_ ) ; }", "buf = new String Builder ( ) ;", "buf . append ( STR_ ) ;", "for ( int value : data . get Summarized ( ) ) {", "buf . append ( String . format ( STR_ , value ) ) ; }", "gc . draw String ( buf . to String ( ) , apt . x , apt . y += NUM_ ) ; }", "if ( data . get Up P Value ( ) != - NUM_ ) {", "gc . draw String ( STR_ + ( float ) data . get Up P Value ( ) , apt . x , apt . y += NUM_ ) ; }", "if ( data . get Down P Value ( ) != - NUM_ ) {", "gc . draw String ( STR_ + ( float ) data . get Down P Value ( ) , apt . x , apt . y += NUM_ ) ; } }"]}
{"ids": "44447", "code": ["public void append Line ( Char Sequence line ) {", "lines . add ( line ) ; }"]}
{"ids": "20596", "code": ["public void flag Action Items ( ) {", "if ( ! m Is Action Items Stale ) {", "return ; }", "boolean flagged = false ;", "for ( Weak Reference < Menu Presenter > ref : m Presenters ) {", "final Menu Presenter presenter = ref . get ( ) ;", "if ( presenter == null ) {", "m Presenters . remove ( ref ) ; }", "else {", "flagged |= presenter . flag Action Items ( ) ; } }", "if ( flagged ) {", "m Action Items . clear ( ) ;", "m Non Action Items . clear ( ) ;", "Array List < Menu Item Impl > visible Items = get Visible Items ( ) ;", "final int items Size = visible Items . size ( ) ;", "for ( int i = NUM_ ; i < items Size ; i ++ ) {", "Menu Item Impl item = visible Items . get ( i ) ;", "if ( item . is Action Button ( ) ) {", "m Action Items . add ( item ) ; }", "else {", "m Non Action Items . add ( item ) ; } } }", "else {", "m Action Items . clear ( ) ;", "m Non Action Items . clear ( ) ;", "m Non Action Items . add All ( get Visible Items ( ) ) ; }", "m Is Action Items Stale = false ; }"]}
{"ids": "36068", "code": ["public static void register New Aggregation Function ( String name , Class < ? extends Aggregation Function > clazz , Aggregation Function Meta Data Provider meta Data Provider ) {", "AGGREATION FUNCTIONS . put ( name , clazz ) ;", "AGGREGATION FUNCTIONS META DATA PROVIDER . put ( name , meta Data Provider ) ; }"]}
{"ids": "11952", "code": ["private byte [ ] build File Auth Tag ( ) throws File Encryption Exception {", "Secret Key key = back Enc Random Access File . share Key ;", "if ( key == null || key . get Encoded ( ) . length == NUM_ ) {", "throw new File Encryption Exception ( STR_ ) ; }", "else {", "auth Tag H Mac . reset ( ) ;", "Key Parameter key Parameter = new Key Parameter ( key . get Encoded ( ) ) ;", "auth Tag H Mac . init ( key Parameter ) ; }", "if ( atag List . size ( ) == NUM_ ) {", "throw new File Encryption Exception ( STR_ ) ; }", "else {", "for ( int i = NUM_ ; i < atag List . size ( ) ; i ++ ) {", "byte [ ] cur Chunk Tag = atag List . get ( i ) ;", "if ( ( cur Chunk Tag == null ) || ( cur Chunk Tag . length != CHUNK AUTH TAG LENGTH ) ) {", "throw new File Encryption Exception ( STR_ + i ) ; }", "else {", "auth Tag H Mac . update ( cur Chunk Tag , NUM_ , CHUNK AUTH TAG LENGTH ) ; } }", "byte [ ] tmp = new byte [ AUTH TAG SIZE ] ;", "auth Tag H Mac . do Final ( tmp , NUM_ ) ;", "return tmp ; } }"]}
{"ids": "47295", "code": ["public int hash Code ( ) {", "return name . hash Code ( ) ; }"]}
{"ids": "69086", "code": ["public void update Data ( Map Element map Element ) {", "name Label . set Text ( map Element . get Name ( ) ) ;", "pinned Check Box . set Selected ( map Element . is Pinned ( ) ) ; }"]}
{"ids": "15996", "code": ["public int do Final ( byte [ ] out , int out Off ) throws Data Length Exception , Illegal State Exception , Invalid Cipher Text Exception {", "try {", "int result Len = NUM_ ;", "if ( out Off + buf Off > out . length ) {", "throw new Output Length Exception ( STR_ ) ; }", "if ( buf Off != NUM_ ) {", "if ( ! partial Block Okay ) {", "throw new Data Length Exception ( STR_ ) ; }", "cipher . process Block ( buf , NUM_ , buf , NUM_ ) ;", "result Len = buf Off ;", "buf Off = NUM_ ;", "System . arraycopy ( buf , NUM_ , out , out Off , result Len ) ; }", "return result Len ; }", "finally {", "reset ( ) ; } }"]}
{"ids": "82300", "code": ["public Priority Queue ( int initial Capacity , Comparator < ? super E > comparator ) {", "if ( initial Capacity < NUM_ ) {", "throw new Illegal Argument Exception ( ) ; }", "elements = new Element Array ( initial Capacity ) ;", "this . comparator = comparator ; }"]}
{"ids": "83736", "code": ["public void read Data ( Data Input input ) throws IO Exception {", "read Reference = input . read Unsigned Short ( ) ;", "read Count = input . read Unsigned Short ( ) ;", "write Reference = input . read Unsigned Short ( ) ;", "write Count = input . read Unsigned Short ( ) ;", "int byte Count = input . read Unsigned Byte ( ) ;", "if ( non Word Data Handler == null ) {", "byte buffer [ ] = new byte [ byte Count ] ;", "input . read Fully ( buffer , NUM_ , byte Count ) ;", "int offset = NUM_ ;", "registers = new Register [ write Count ] ;", "for ( int register = NUM_ ; register < write Count ; register ++ ) {", "registers [ register ] = new Simple Register ( buffer [ offset ] , buffer [ offset + NUM_ ] ) ;", "offset += NUM_ ; } }", "else {", "non Word Data Handler . read Data ( input , write Reference , write Count ) ; } }"]}
{"ids": "2093", "code": ["private boolean is Touch Inside List ( Motion Event ev ) {", "float x = ev . get X ( ) - m List View . get X ( ) ;", "float y = ev . get Y ( ) - m List View . get Y ( ) ;", "if ( x < NUM_ || x > m List View . get Width ( ) || y < NUM_ || y > m List View . get Height ( ) ) {", "return false ; }", "return true ; }"]}
{"ids": "37475", "code": ["public static final void center Child To Parent ( final Component parent , final Component child , final boolean b Stay On Screen ) {", "int x = ( parent . get X ( ) + ( parent . get Width ( ) / NUM_ ) ) - ( child . get Width ( ) / NUM_ ) ;", "int y = ( parent . get Y ( ) + ( parent . get Height ( ) / NUM_ ) ) - ( child . get Height ( ) / NUM_ ) ;", "if ( b Stay On Screen ) {", "final Toolkit tk = Toolkit . get Default Toolkit ( ) ;", "final Dimension ss = new Dimension ( tk . get Screen Size ( ) ) ;", "if ( ( x + child . get Width ( ) ) > ss . get Width ( ) ) {", "x = ( int ) ( ss . get Width ( ) - child . get Width ( ) ) ; }", "if ( ( y + child . get Height ( ) ) > ss . get Height ( ) ) {", "y = ( int ) ( ss . get Height ( ) - child . get Height ( ) ) ; }", "if ( x < NUM_ ) {", "x = NUM_ ; }", "if ( y < NUM_ ) {", "y = NUM_ ; } }", "child . set Location ( x , y ) ; }"]}
{"ids": "36652", "code": ["public boolean is Connecting ( ) {", "return start != null && preview != null && preview . is Visible ( ) ; }"]}
{"ids": "39304", "code": ["public Protected Properties ( Properties props ) {", "Enumeration < ? > prop Enum = props . property Names ( ) ;", "while ( prop Enum . has More Elements ( ) ) {", "String prop Name = ( String ) prop Enum . next Element ( ) ;", "String prop Value = props . get Property ( prop Name ) ;", "super . set Property ( prop Name , prop Value ) ; }", "closed = true ; }"]}
{"ids": "29082", "code": ["public boolean is Empty ( ) {", "return item List . is Empty ( ) ; }"]}
{"ids": "62312", "code": ["private static void fix Numeric Byte Order ( byte [ ] bytes ) {", "for ( int i = NUM_ ; i < bytes . length ; i += NUM_ ) {", "Byte Util . swap 4 Bytes ( bytes , i ) ; } }"]}
{"ids": "59883", "code": ["public synchronized boolean has Scope ( ) {", "return ! scope Stack . is Empty ( ) ; }"]}
{"ids": "21400", "code": ["private boolean check Attribute Changed ( String existing , String current ) {", "if ( existing == null && current == null ) {", "return false ; }", "if ( ( existing == null ) ^ ( current == null ) ) {", "return true ; }", "return ( ! existing . equals Ignore Case ( current ) ) ; }"]}
{"ids": "32263", "code": ["public boolean is Empty ( ) {", "return count ( ) == NUM_ ; }"]}
{"ids": "75683", "code": ["@ Override public void add Table Model Listener ( Table Model Listener l ) {", "m Listeners . add ( l ) ; }"]}
{"ids": "49026", "code": ["private static URL [ ] path To UR Ls ( String path ) throws Malformed URL Exception {", "synchronized ( path To UR Ls Cache ) {", "Object [ ] v = path To UR Ls Cache . get ( path ) ;", "if ( v != null ) {", "return ( ( URL [ ] ) v [ NUM_ ] ) ; } }", "String Tokenizer st = new String Tokenizer ( path ) ;", "URL [ ] urls = new URL [ st . count Tokens ( ) ] ;", "for ( int i = NUM_ ; st . has More Tokens ( ) ; i ++ ) {", "urls [ i ] = new URL ( st . next Token ( ) ) ; }", "synchronized ( path To UR Ls Cache ) {", "path To UR Ls Cache . put ( path , new Object [ ] { urls , new Soft Reference < String > ( path ) } ) ; }", "return urls ; }"]}
{"ids": "30874", "code": ["boolean perform Work ( Task Manager . Task who , Object param ) throws Job Exception {", "Integer tmp = null ;", "synchronized ( tasks ) {", "tmp = ( Integer ) tasks . get ( who ) ; }", "if ( tmp == null ) throw new Unknown Task Exception ( ) ;", "int rank = tmp . int Value ( ) ;", "synchronized ( attempts ) {", "attempts [ rank ] ++ ; }", "Object result = do Work ( who , param ) ;", "if ( result == null ) return false ;", "try {", "report Done ( who , result ) ; }", "catch ( Unknown Task Exception e ) { }", "catch ( Partial Result Exception e ) { }", "catch ( Job Exception e ) { }", "return true ; }"]}
{"ids": "24695", "code": ["public List < Order > load All Deep From Cursor ( Cursor cursor ) {", "int count = cursor . get Count ( ) ;", "List < Order > list = new Array List < Order > ( count ) ;", "if ( cursor . move To First ( ) ) {", "if ( identity Scope != null ) {", "identity Scope . lock ( ) ;", "identity Scope . reserve Room ( count ) ; }", "try {", "do {", "list . add ( load Current Deep ( cursor , false ) ) ; }", "while ( cursor . move To Next ( ) ) ; }", "finally {", "if ( identity Scope != null ) {", "identity Scope . unlock ( ) ; } } }", "return list ; }"]}
{"ids": "42586", "code": ["public static boolean is Valid Auth Type ( String auth Type ) {", "log . debug ( STR_ ) ;", "if ( auth Type != null ) {", "if ( ! auth Type . is Empty ( ) ) {", "if ( auth Type . equals Ignore Case ( Ldap Auth Base . LDAP AUTH TYPE SIMPLE ) ) return true ;", "if ( auth Type . equals Ignore Case ( Ldap Auth Base . LDAP AUTH TYPE NONE ) ) return true ; } }", "return false ; }"]}
{"ids": "78596", "code": ["public int size ( ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "return count ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "17528", "code": ["public Annotation Member ( String name , Object val , Class type , Method m ) {", "this ( name , val ) ;", "defining Method = m ;", "if ( type == int . class ) {", "element Type = Integer . class ; }", "else if ( type == boolean . class ) {", "element Type = Boolean . class ; }", "else if ( type == char . class ) {", "element Type = Character . class ; }", "else if ( type == float . class ) {", "element Type = Float . class ; }", "else if ( type == double . class ) {", "element Type = Double . class ; }", "else if ( type == long . class ) {", "element Type = Long . class ; }", "else if ( type == short . class ) {", "element Type = Short . class ; }", "else if ( type == byte . class ) {", "element Type = Byte . class ; }", "else {", "element Type = type ; } }"]}
{"ids": "30135", "code": ["public void unregister Preference Change Listener ( Preference Change Listener preference Change Listener ) {", "m Listeners . remove ( preference Change Listener ) ; }"]}
{"ids": "44076", "code": ["public static String join ( String separator , List < ? > elements ) {", "if ( elements == null || elements . size ( ) == NUM_ ) {", "return STR_ ; }", "String Buffer sb = new String Buffer ( elements . size ( ) * NUM_ ) ;", "int i = NUM_ ;", "for ( Object elem : elements ) {", "if ( i ++ > NUM_ ) {", "sb . append ( separator ) ; }", "sb . append ( format ( elem ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "54204", "code": ["public boolean remove Trace ( final Trace trace ) {", "boolean result = trace List . remove ( trace ) ;", "if ( result ) {", "remove ( trace ) ;", "revalidate ( ) ; }", "return result ; }"]}
{"ids": "68733", "code": ["private void update Random Values ( ) {", "for ( int i = NUM_ ; i < m Block Number ; i ++ ) {", "for ( int j = NUM_ ; j < DEFAULT NUMBER RANDOM VALUES ; j ++ ) {", "m Block Values [ i ] [ j ] = m Random . next Float ( ) ;", "if ( m Block Values [ i ] [ j ] < NUM_ ) {", "m Block Values [ i ] [ j ] = NUM_ ; } } } }"]}
{"ids": "61064", "code": ["protected ASN 1 Set ( ASN 1 Encodable obj ) {", "set . add Element ( obj ) ; }"]}
{"ids": "44922", "code": ["static private String BYTE Min Minus ( ) {", "long temp Value = Byte . MIN VALUE - NUM_ ;", "return String . value Of ( temp Value ) ; }"]}
{"ids": "47207", "code": ["public Double Accumulator ( Double Binary Operator accumulator Function , double identity ) {", "this . function = accumulator Function ;", "base = this . identity = Double . double To Raw Long Bits ( identity ) ; }"]}
{"ids": "31393", "code": ["public static void bitmap To Mat ( Bitmap bmp , Mat mat , boolean un Premultiply Alpha ) {", "if ( bmp == null ) throw new java . lang . Illegal Argument Exception ( STR_ ) ;", "if ( mat == null ) throw new java . lang . Illegal Argument Exception ( STR_ ) ;", "n Bitmap To Mat 2 ( bmp , mat . native Obj , un Premultiply Alpha ) ; }"]}
{"ids": "33711", "code": ["public static void send Mail ( Context m Context , String mail ID ) {", "Uri uri = Uri . parse ( STR_ + mail ID ) ;", "Intent intent = new Intent ( Intent . ACTION SENDTO , uri ) ;", "m Context . start Activity ( intent ) ; }"]}
{"ids": "33271", "code": ["public void push ( @ Not Null Status Notification notification ) {", "stack . push ( notification ) ; }"]}
{"ids": "51082", "code": ["public void on Paint Actions ( View Transform transform , Graphics 2 D g ) {", "if ( ! m Is Selected ) {", "return ; }", "if ( m Color Set == null ) {", "return ; }", "if ( m Widget . get Visibility ( ) == Constraint Widget . GONE ) {", "return ; }", "if ( ! m Show Resize Handles ) {", "return ; }", "if ( ! m Show Actions ) {", "return ; }", "if ( m Widget Actions . size ( ) == NUM_ ) {", "return ; }", "int l = transform . get Swing FX ( m Widget . get Draw X ( ) ) ;", "int t = transform . get Swing FY ( m Widget . get Draw Y ( ) ) ;", "int h = transform . get Swing Dimension ( m Widget . get Height ( ) ) ;", "int x = l ;", "int y = t + h + Connection Draw . CONNECTION ANCHOR SIZE + NUM_ ;", "g . set Color ( m Color Set . get Selected Frames ( ) ) ;", "for ( Widget Action action : m Widget Actions ) {", "action . update ( ) ;", "if ( ! action . is Visible ( ) ) {", "continue ; }", "action . on Paint ( transform , g , x , y ) ;", "x += ACTION SIZE + Connection Draw . CONNECTION ANCHOR SIZE ; } }"]}
{"ids": "8552", "code": ["@ Override public Lookup create Global Context ( ) {", "if ( proxy Lookup == null ) {", "logger . config ( STR_ ) ;", "project Lookup = new Abstract Lookup ( content ) ;", "proxy Lookup = new Proxy Lookup ( global Context Lookup , project Lookup ) ; }", "return proxy Lookup ; }"]}
{"ids": "41621", "code": ["public void write ( byte [ ] bytes ) throws IO Exception {", "flush Bits ( ) ;", "if ( bytes != null && bytes . length > NUM_ ) {", "out . write ( bytes ) ;", "bytes Written += bytes . length ; } }"]}
{"ids": "6162", "code": ["public static Mutable List < String > chunk ( String string , int size ) {", "if ( size <= NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + size ) ; }", "int length = string . length ( ) ;", "if ( length == NUM_ ) {", "return Fast List . new List ( ) ; }", "Mutable List < String > result = Fast List . new List ( ( length + size - NUM_ ) / size ) ;", "int start Offset = NUM_ ;", "while ( start Offset < length ) {", "result . add ( string . substring ( start Offset , Math . min ( start Offset + size , length ) ) ) ;", "start Offset += size ; }", "return result ; }"]}
{"ids": "40909", "code": ["public void remove Im ( Im Entity im ) {", "ims . remove ( im ) ; }"]}
{"ids": "39741", "code": ["public Language Setting ( Option opt ) {", "elem = null ;", "name = opt . get Language ( ) ;", "String [ ] suffix Array = opt . get Suffixes ( ) ;", "String Buffer strbuf = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < suffix Array . length ; i ++ ) {", "strbuf . append ( suffix Array [ i ] ) ;", "if ( i != suffix Array . length - NUM_ ) strbuf . append ( STR_ ) ; }", "this . suffixes = strbuf . to String ( ) ;", "min Match Len = opt . get Minimum Match Length ( ) ;", "cluster Type = opt . get Clustertype ( ) ;", "read Subdirs = opt . is Read Subdirs ( ) ;", "store Matches = opt . get Store Matches ( ) ; }"]}
{"ids": "83239", "code": ["private double calc Util 4 Performing ( final double typ Duration , final double actual Duration ) {", "return NUM_ * marginal Util Performing Sec + marginal Util Performing Sec * typ Duration * Math . log ( actual Duration / typ Duration ) ; }"]}
{"ids": "81972", "code": ["public void clear All Cache ( ) {", "clear Memory Cache ( ) ;", "clear Storage Cache ( ) ; }"]}
{"ids": "38261", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "45200", "code": ["public void add Notify ( ) {", "super . add Notify ( ) ;", "if ( text Area != null ) {", "l . install ( text Area ) ; }", "update Cell Widths ( ) ;", "update Cell Heights ( ) ; }"]}
{"ids": "63014", "code": ["@ Description ( summary = STR_ ) public void maven Install Local ( ) {", "jar MV Store ( ) ;", "String pom = new String ( read File ( new File ( STR_ ) ) ) ;", "pom = replace All ( pom , STR_ , STR_ ) ;", "write File ( new File ( STR_ ) , pom . get Bytes ( ) ) ;", "exec Script ( STR_ , args ( STR_ , STR_ , STR_ + get Jar Suffix ( ) , STR_ , STR_ , STR_ , STR_ ) ) ;", "jar ( ) ;", "pom = new String ( read File ( new File ( STR_ ) ) ) ;", "pom = replace All ( pom , STR_ , STR_ ) ;", "write File ( new File ( STR_ ) , pom . get Bytes ( ) ) ;", "exec Script ( STR_ , args ( STR_ , STR_ , STR_ + get Jar Suffix ( ) , STR_ , STR_ , STR_ , STR_ ) ) ; }"]}
{"ids": "33326", "code": ["public static boolean is Dto Getter ( Method method ) {", "if ( method . is Annotation Present ( Delegate To . class ) ) {", "return false ; }", "if ( method . get Parameter Types ( ) . length > NUM_ ) {", "return false ; }", "String method Name = method . get Name ( ) ;", "return method Name . starts With ( STR_ ) || ( method Name . starts With ( STR_ ) && ( ( method . get Return Type ( ) == Boolean . class || method . get Return Type ( ) == boolean . class ) ) ) ; }"]}
{"ids": "41746", "code": ["protected List < Video DTO > extract Videos From Cursor ( Cursor cursor , int offset , int limit ) {", "List < Video DTO > videos = new Array List < > ( ) ;", "int count = NUM_ ;", "int begin = offset > NUM_ ? offset : NUM_ ;", "if ( cursor . move To Position ( begin ) ) {", "do {", "Video DTO video = extract One Video From Cursor ( cursor ) ;", "videos . add ( video ) ;", "count ++ ;", "if ( limit > NUM_ && count > limit ) {", "break ; } }", "while ( cursor . move To Next ( ) ) ; }", "cursor . close ( ) ;", "return videos ; }"]}
{"ids": "71181", "code": ["private static void compute Next CCW Edges ( Node node , long label ) {", "Directed Edge Star de Star = node . get Out Edges ( ) ;", "Polygonize Directed Edge first Out DE = null ;", "Polygonize Directed Edge prev In DE = null ;", "List edges = de Star . get Edges ( ) ;", "for ( int i = edges . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "Polygonize Directed Edge de = ( Polygonize Directed Edge ) edges . get ( i ) ;", "Polygonize Directed Edge sym = ( Polygonize Directed Edge ) de . get Sym ( ) ;", "Polygonize Directed Edge out DE = null ;", "if ( de . get Label ( ) == label ) out DE = de ;", "Polygonize Directed Edge in DE = null ;", "if ( sym . get Label ( ) == label ) in DE = sym ;", "if ( out DE == null && in DE == null ) continue ;", "if ( in DE != null ) {", "prev In DE = in DE ; }", "if ( out DE != null ) {", "if ( prev In DE != null ) {", "prev In DE . set Next ( out DE ) ;", "prev In DE = null ; }", "if ( first Out DE == null ) first Out DE = out DE ; } }", "if ( prev In DE != null ) {", "Assert . is True ( first Out DE != null ) ;", "prev In DE . set Next ( first Out DE ) ; } }"]}
{"ids": "25804", "code": ["@ Override public boolean equals ( Object other ) {", "if ( other instanceof Int Array Wrapper ) {", "return Arrays . equals ( data , ( ( Int Array Wrapper ) other ) . data ) ; }", "return false ; }"]}
{"ids": "1429", "code": ["public static Date Time to Date Simple ( String str , Time Zone time Zone ) throws Page Exception {", "Date Time dt = to Date Simple ( str , CONVERTING TYPE OFFSET , true , time Zone , null ) ;", "if ( dt == null ) throw new Expression Exception ( STR_ + str + STR_ ) ;", "return dt ; }"]}
{"ids": "25301", "code": ["public boolean contains ( Song s ) {", "return m Songs . contains ( s ) ; }"]}
{"ids": "5390", "code": ["private float clamp Mag ( float value , float abs Min , float abs Max ) {", "final float abs Value = Math . abs ( value ) ;", "if ( abs Value < abs Min ) return NUM_ ;", "if ( abs Value > abs Max ) return value > NUM_ ? abs Max : - abs Max ;", "return value ; }"]}
{"ids": "5022", "code": ["private boolean zz Refill ( ) throws java . io . IO Exception {", "if ( zz Start Read > NUM_ ) {", "zz End Read += zz Final High Surrogate ;", "zz Final High Surrogate = NUM_ ;", "System . arraycopy ( zz Buffer , zz Start Read , zz Buffer , NUM_ , zz End Read - zz Start Read ) ;", "zz End Read -= zz Start Read ;", "zz Current Pos -= zz Start Read ;", "zz Marked Pos -= zz Start Read ;", "zz Start Read = NUM_ ; }", "if ( zz Current Pos >= zz Buffer . length - zz Final High Surrogate ) {", "char new Buffer [ ] = new char [ zz Buffer . length * NUM_ ] ;", "System . arraycopy ( zz Buffer , NUM_ , new Buffer , NUM_ , zz Buffer . length ) ;", "zz Buffer = new Buffer ;", "zz End Read += zz Final High Surrogate ;", "zz Final High Surrogate = NUM_ ; }", "int requested = zz Buffer . length - zz End Read ;", "int num Read = zz Reader . read ( zz Buffer , zz End Read , requested ) ;", "if ( num Read == NUM_ ) {", "throw new java . io . IO Exception ( STR_ ) ; }", "if ( num Read > NUM_ ) {", "zz End Read += num Read ;", "if ( num Read == requested ) {", "if ( Character . is High Surrogate ( zz Buffer [ zz End Read - NUM_ ] ) ) {", "-- zz End Read ;", "zz Final High Surrogate = NUM_ ; } }", "return false ; }", "return true ; }"]}
{"ids": "17955", "code": ["public int add Padding ( byte [ ] in , int in Off ) {", "byte code = ( byte ) ( in . length - in Off ) ;", "while ( in Off < in . length - NUM_ ) {", "if ( random == null ) {", "in [ in Off ] = NUM_ ; }", "else {", "in [ in Off ] = ( byte ) random . next Int ( ) ; }", "in Off ++ ; }", "in [ in Off ] = code ;", "return code ; }"]}
{"ids": "26973", "code": ["public static Long make Long ( String s ) {", "if ( WW Util . is Empty ( s ) ) {", "return null ; }", "try {", "return Long . value Of ( s ) ; }", "catch ( Number Format Exception e ) {", "return null ; } }"]}
{"ids": "22111", "code": ["private void verify Block Snapshot Migration ( ) throws Exception {", "log . info ( STR_ ) ;", "Iterator < Block Snapshot > block Snapshot Itr = db Client . query Iterative Objects ( Block Snapshot . class , block Snapshot UR Is ) ;", "List < Block Object > block Objects = new Array List < Block Object > ( ) ;", "while ( block Snapshot Itr . has Next ( ) ) {", "block Objects . add ( block Snapshot Itr . next ( ) ) ; }", "verify Block Objects ( block Objects ) ; }"]}
{"ids": "29019", "code": ["public static String edge Type To String ( @ Type int edge Type ) {", "switch ( edge Type ) {", "case FALL THROUGH EDGE :", "return STR_ ;", "case IFCMP EDGE :", "return STR_ ;", "case SWITCH EDGE :", "return STR_ ;", "case SWITCH DEFAULT EDGE :", "return STR_ ;", "case JSR EDGE :", "return STR_ ;", "case RET EDGE :", "return STR_ ;", "case GOTO EDGE :", "return STR_ ;", "case RETURN EDGE :", "return STR_ ;", "case UNHANDLED EXCEPTION EDGE :", "return STR_ ;", "case HANDLED EXCEPTION EDGE :", "return STR_ ;", "case START EDGE :", "return STR_ ;", "case BACKEDGE TARGET EDGE :", "return STR_ ;", "case BACKEDGE SOURCE EDGE :", "return STR_ ;", "case EXIT EDGE :", "return STR_ ; }", "throw new Illegal State Exception ( STR_ + edge Type ) ; }"]}
{"ids": "9086", "code": ["private int insert Unassigned Group ( ) throws SQL Exception {", "Prepared Statement group Statement ;", "final int ruleid = insert Unassigned Rule ( ) ;", "final int evaluation Order = get Num Of Groups ( ) + NUM_ ;", "String unassigned Group Sql Statement = STR_ + GROUPS TABLE + STR_ + STR_ + STR_ ;", "unassigned Group Sql Statement = String . format ( unassigned Group Sql Statement , UNASSIGNED GROUP , UNASSIGNED GROUP TYPE , UNASSIGNED DATA TYPE , ruleid , evaluation Order ) ;", "group Statement = prepare Statement ( unassigned Group Sql Statement , new String [ ] { STR_ } ) ;", "group Statement . execute ( ) ;", "return get Internal Id ( group Statement ) ; }"]}
{"ids": "40894", "code": ["public Builder delete Extension Field ( String urn , String field Name ) {", "delete Fields . add ( urn + STR_ + field Name ) ;", "return this ; }"]}
{"ids": "51148", "code": ["public void send Direct ( byte [ ] sql Bytes , int offset , int sql Length , byte command Type ) throws IO Exception , Query Exception {", "if ( is Closed ( ) ) throw new IO Exception ( STR_ ) ;", "int seq No = NUM_ ;", "set Compress Seq No ( NUM_ ) ;", "if ( sql Length + ( use Compression ? NUM_ : NUM_ ) > get Max Allowed Packet ( ) ) {", "throw new Query Exception ( STR_ + ( sql Length + ( use Compression ? NUM_ : NUM_ ) ) + STR_ + max Allowed Packet + STR_ , - NUM_ , INTERRUPTED EXCEPTION ) ; }", "if ( ! is Use Compression ( ) ) {", "if ( sql Length + NUM_ <= max Packet Size ) {", "byte [ ] packet Buffer = new byte [ sql Length + NUM_ ] ;", "packet Buffer [ NUM_ ] = ( byte ) ( ( sql Length + NUM_ ) & NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( ( sql Length + NUM_ ) > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( ( sql Length + NUM_ ) > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) seq No ++ ;", "packet Buffer [ NUM_ ] = command Type ;", "System . arraycopy ( sql Bytes , offset , packet Buffer , NUM_ , sql Length ) ;", "if ( logger . is Trace Enabled ( ) ) {", "logger . trace ( STR_ + seq No + STR_ + ( sql Length + NUM_ ) + STR_ + Utils . hexdump ( packet Buffer , max Query Size To Log , NUM_ , sql Length + NUM_ ) ) ; }", "output Stream . write ( packet Buffer ) ; }", "else {", "byte [ ] packet Buffer = new byte [ max Packet Size + NUM_ ] ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size & NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) seq No ++ ;", "packet Buffer [ NUM_ ] = command Type ;", "System . arraycopy ( sql Bytes , offset , packet Buffer , NUM_ , max Packet Size - NUM_ ) ;", "int length Already Send = max Packet Size - NUM_ ;", "if ( logger . is Trace Enabled ( ) ) {", "logger . trace ( STR_ + seq No + STR_ + max Packet Size + STR_ + Utils . hexdump ( packet Buffer , max Query Size To Log , NUM_ , max Packet Size ) ) ; }", "output Stream . write ( packet Buffer ) ;", "int length ;", "while ( ( length = sql Length - length Already Send ) > NUM_ ) {", "if ( length > max Packet Size ) {", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size & NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) seq No ++ ;", "System . arraycopy ( sql Bytes , offset + length Already Send , packet Buffer , NUM_ , max Packet Size ) ;", "if ( logger . is Trace Enabled ( ) ) {", "logger . trace ( STR_ + seq No + STR_ + max Packet Size + STR_ + Utils . hexdump ( packet Buffer , max Query Size To Log , NUM_ , max Packet Size ) ) ; }", "output Stream . write ( packet Buffer ) ;", "length Already Send += max Packet Size ; }", "else {", "packet Buffer [ NUM_ ] = ( byte ) ( length & NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( length > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( length > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) seq No ++ ;", "System . arraycopy ( sql Bytes , offset + length Already Send , packet Buffer , NUM_ , length ) ;", "if ( logger . is Trace Enabled ( ) ) {", "logger . trace ( STR_ + seq No + STR_ + length + STR_ + Utils . hexdump ( packet Buffer , max Query Size To Log , NUM_ , length ) ) ; }", "output Stream . write ( packet Buffer , NUM_ , length + NUM_ ) ;", "break ; } } } }", "else {", "if ( sql Length < max Packet Size ) {", "byte [ ] packet Buffer = new byte [ sql Length + NUM_ ] ;", "packet Buffer [ NUM_ ] = ( byte ) ( ( sql Length + NUM_ ) & NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( ( sql Length + NUM_ ) > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( ( sql Length + NUM_ ) > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) NUM_ ;", "packet Buffer [ NUM_ ] = command Type ;", "System . arraycopy ( sql Bytes , offset , packet Buffer , NUM_ , sql Length ) ;", "compressed And Send ( sql Length + NUM_ , packet Buffer , true ) ; }", "else {", "final int expected Packet Size = sql Length + NUM_ + NUM_ * ( ( ( sql Length + NUM_ ) / max Packet Size ) + NUM_ ) ;", "byte [ ] packet Buffer = new byte [ expected Packet Size ] ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size & NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ NUM_ ] = ( byte ) seq No ++ ;", "packet Buffer [ NUM_ ] = command Type ;", "System . arraycopy ( sql Bytes , offset , packet Buffer , NUM_ , max Packet Size - NUM_ ) ;", "int sql Bytes Position = max Packet Size - NUM_ ;", "int position Dest = max Packet Size + NUM_ ;", "int length ;", "while ( ( length = sql Length - sql Bytes Position ) > NUM_ ) {", "if ( length > max Packet Size ) {", "packet Buffer [ position Dest ++ ] = ( byte ) ( max Packet Size & NUM_ ) ;", "packet Buffer [ position Dest ++ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ position Dest ++ ] = ( byte ) ( max Packet Size > > > NUM_ ) ;", "packet Buffer [ position Dest ++ ] = ( byte ) seq No ++ ;", "System . arraycopy ( sql Bytes , offset + sql Bytes Position , packet Buffer , position Dest , max Packet Size ) ;", "sql Bytes Position += max Packet Size ;", "position Dest += max Packet Size ; }", "else {", "packet Buffer [ position Dest ++ ] = ( byte ) ( length & NUM_ ) ;", "packet Buffer [ position Dest ++ ] = ( byte ) ( length > > > NUM_ ) ;", "packet Buffer [ position Dest ++ ] = ( byte ) ( length > > > NUM_ ) ;", "packet Buffer [ position Dest ++ ] = ( byte ) seq No ++ ;", "System . arraycopy ( sql Bytes , offset + sql Bytes Position , packet Buffer , position Dest , length ) ;", "break ; } }", "compressed And Send ( expected Packet Size , packet Buffer , true ) ; } } }"]}
{"ids": "21200", "code": ["@ Suppress Warnings ( STR_ ) private List < List < Group Attribute > > search Auth Provider ( Filter query Builder , String [ ] return Attributes , final long count Limit , Attributes Mapper mapper , Validation Failure Reason [ ] failure Reason ) throws Size Limit Exceeded Exception {", "Search Controls group Search Controls = new Search Controls ( Search Controls . SUBTREE SCOPE , count Limit , search Controls . get Time Limit ( ) , return Attributes , search Controls . get Returning Obj Flag ( ) , search Controls . get Deref Link Flag ( ) ) ;", "List < List < Group Attribute > > query Group Results = null ;", "query Group Results = safe Ldap Search ( base DN , query Builder . encode ( ) , group Search Controls , mapper , failure Reason ) ;", "return query Group Results ; }"]}
{"ids": "10959", "code": ["protected void export ( OM Graphic List list , List < Object > master Record , boolean write Files ) {", "bad Graphics = NUM_ ;", "if ( list == null ) {", "return ; }", "else if ( list instanceof Esri Graphic List ) {", "export ( ( Esri Graphic List ) list ) ;", "return ; }", "int dbf Index = NUM_ ;", "for ( OM Graphic dtl Graphic : list ) {", "List < Object > record = master Record ;", "Integer rec Index = ( Integer ) dtl Graphic . get Attribute ( SHAPE INDEX ATTRIBUTE ) ;", "if ( rec Index == null ) {", "rec Index = dbf Index ; }", "if ( record == null ) {", "record = get Master DBF Record ( rec Index ) ; }", "dbf Index ++ ;", "if ( dtl Graphic instanceof OM Graphic List ) {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "export ( ( OM Graphic List ) dtl Graphic , record , false ) ;", "continue ; }", "if ( dtl Graphic . get Render Type ( ) != RENDERTYPE LATLON ) {", "bad Graphics ++ ;", "continue ; }", "if ( dtl Graphic instanceof OM Area List ) {", "if ( DEBUG ) {", "logger . fine ( STR_ ) ; }", "add Area List ( ( OM Area List ) dtl Graphic , record ) ; }", "if ( dtl Graphic instanceof OM Poly ) {", "OM Poly om Poly = ( OM Poly ) dtl Graphic ;", "if ( is Polygon ( om Poly ) ) {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "add Polygon ( dtl Graphic , record ) ; }", "else {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "add Line ( dtl Graphic , record ) ; } }", "else if ( dtl Graphic instanceof OM Rect ) {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "add Polygon ( ( OM Graphic ) Esri Polygon List . convert ( ( OM Rect ) dtl Graphic ) , record ) ; }", "else if ( dtl Graphic instanceof OM Circle ) {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "add Polygon ( ( OM Graphic ) Esri Polygon List . convert ( ( OM Circle ) dtl Graphic , projection ) , record ) ; }", "else if ( dtl Graphic instanceof OM Range Rings ) {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "export ( Esri Polygon List . convert ( ( OM Range Rings ) dtl Graphic , projection ) , record , false ) ; }", "else if ( dtl Graphic instanceof OM Line ) {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "add Line ( ( OM Graphic ) Esri Polyline List . convert ( ( OM Line ) dtl Graphic ) , record ) ; }", "else if ( dtl Graphic instanceof OM Point ) {", "if ( DEBUG ) logger . fine ( STR_ ) ;", "add Point ( dtl Graphic , record ) ; } }", "if ( bad Graphics > NUM_ ) {", "Drawing Tool Render Exception . notify User Of Non Lat Lon Graphics ( bad Graphics ) ; }", "if ( ! write Files ) {", "return ; }", "boolean need Confirmation = false ;", "if ( file Path == null ) {", "file Path = get File Path From User ( ) ;", "if ( file Path == null ) {", "return ; }", "need Confirmation = true ; }", "if ( DEBUG ) logger . fine ( STR_ ) ;", "boolean need Type Suffix = false ;", "if ( poly List != null ) {", "ese Interfaces . add ( new ESE Interface ( poly List , file Path , null ) ) ;", "need Type Suffix = true ; }", "if ( line List != null ) {", "ese Interfaces . add ( new ESE Interface ( line List , file Path , ( need Type Suffix ? Line Suffix : null ) ) ) ;", "need Type Suffix = true ; }", "if ( point List != null ) {", "ese Interfaces . add ( new ESE Interface ( point List , file Path , ( need Type Suffix ? Point Suffix : null ) ) ) ; }", "if ( need Confirmation ) {", "show GUI ( ) ; }", "else {", "write Files ( ) ; } }"]}
{"ids": "3761", "code": ["public Depend ( Path Impl source , long last Modified , long length ) {", "source = source ;", "last Modified = last Modified ;", "length = length ; }"]}
{"ids": "60313", "code": ["public boolean has Task Of Type In Progress ( @ Not Null External System Task Type type , @ Not Null Project project ) {", "String project Id = External System Task Id . get Project Id ( project ) ;", "for ( External System Task Id id : my Tasks In Progress . key Set ( ) ) {", "if ( type . equals ( id . get Type ( ) ) && project Id . equals ( id . get Ide Project Id ( ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "17055", "code": ["public final void remove Change Listener ( Change Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "78871", "code": ["public static boolean contains Ignore Case ( String str , String query ) {", "if ( str != null && query != null ) {", "int limit = str . length ( ) - query . length ( ) + NUM_ ;", "for ( int i = NUM_ ; i < limit ; i ++ ) {", "if ( matches Ignore Case ( str , query , i ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "37740", "code": ["public String to Matrix String ( ) throws Exception {", "return to Matrix String ( STR_ ) ; }"]}
{"ids": "71237", "code": ["public Quad Edge connect ( Quad Edge a , Quad Edge b ) {", "Quad Edge q = Quad Edge . connect ( a , b ) ;", "quad Edges . add ( q ) ;", "return q ; }"]}
{"ids": "32735", "code": ["public Job configure ( boolean is Secured , String meta Store Uris , String principal , String redis Host , int redis Port , String password , int redis Db , String input Database , String input Table , String input Filter , String key Name , String value Name , String key Prefix , int num Reducer , boolean replace , boolean pipeline , boolean flush , int commit Size , String [ ] anon Fields , String export Salt ) throws Exception {", "this . is Secured = is Secured ;", "this . meta Store Uris = meta Store Uris ;", "this . principal = principal ;", "this . redis Host = redis Host ;", "this . redis Port = redis Port ;", "this . password = password ;", "this . redis Db = redis Db ;", "this . input Database = input Database ;", "this . input Table = input Table ;", "this . input Filter = input Filter ;", "this . key Name = key Name ;", "this . key Prefix = key Prefix ;", "this . value Name = value Name ;", "this . num Reducer = num Reducer ;", "this . replace = replace ;", "this . pipeline = pipeline ;", "this . flush = flush ;", "this . commit Size = commit Size ;", "this . anon Fields = anon Fields . clone ( ) ;", "this . export Salt = export Salt ;", "return configure ( ) ; }"]}
{"ids": "39197", "code": ["public static double log 2 ( double a ) {", "return Math . log ( a ) / log 2 ; }"]}
{"ids": "33564", "code": ["public void add Suggestions ( final @ Non Null Suggestions Result result , final @ Non Null String bucket , final @ Non Null Token Source source ) {", "Query Token query = result . get Query Token ( ) ;", "synchronized ( m Lock ) {", "m Result Map . put ( bucket , result ) ;", "Set < String > waiting For Buckets = m Waiting For Results . get ( query ) ;", "if ( waiting For Buckets != null ) {", "waiting For Buckets . remove ( bucket ) ;", "if ( waiting For Buckets . size ( ) == NUM_ ) {", "m Waiting For Results . remove ( query ) ; } } }", "String current Token String = source . get Current Token String ( ) ;", "synchronized ( m Lock ) {", "m Suggestions . clear ( ) ;", "List < Suggestible > suggestions = m Suggestions List Builder . build Suggestions ( m Result Map , current Token String ) ;", "if ( suggestions . size ( ) > NUM_ ) {", "m Suggestions . add All ( suggestions ) ;", "m Suggestions Visibility Manager . display Suggestions ( true ) ; }", "else {", "hide Suggestions If Necessary ( result . get Query Token ( ) , source ) ; } }", "notify Data Set Changed ( ) ; }"]}
{"ids": "10511", "code": ["public static < ET extends Enum < ET > > Enum Resolver < ET > construct For ( Class < ET > enum Cls , Annotation Introspector ai ) {", "ET [ ] enum Values = enum Cls . get Enum Constants ( ) ;", "if ( enum Values == null ) {", "throw new Illegal Argument Exception ( STR_ + enum Cls . get Name ( ) ) ; }", "Hash Map < String , ET > map = new Hash Map < String , ET > ( ) ;", "for ( ET e : enum Values ) {", "map . put ( ai . find Enum Value ( e ) , e ) ; }", "return new Enum Resolver < ET > ( enum Cls , enum Values , map ) ; }"]}
{"ids": "992", "code": ["protected void encode Line Suffix ( Output Stream a Stream ) throws IO Exception {", "p Stream . println ( ) ; }"]}
{"ids": "45182", "code": ["public static boolean replace ( R Text Area text Area , String to Find , String replace With , boolean forward , boolean match Case , boolean whole Word , boolean regex ) throws Pattern Syntax Exception {", "text Area . begin Atomic Edit ( ) ;", "try {", "if ( regex ) {", "return regex Replace ( text Area , to Find , replace With , forward , match Case , whole Word ) ; }", "make Mark And Dot Equal ( text Area , forward ) ;", "if ( find ( text Area , to Find , forward , match Case , whole Word , false ) ) {", "text Area . replace Selection ( replace With ) ;", "return true ; } }", "finally {", "text Area . end Atomic Edit ( ) ; }", "return false ; }"]}
{"ids": "14216", "code": ["public void pre Single Sign On Request ( String hosted Entity ID , String idp Entity ID , String realm , Http Servlet Request request , Http Servlet Response response , Authn Request authn Request ) throws SAML 2 Exception {", "return ; }"]}
{"ids": "35461", "code": ["void submit ( Process And Display Image Task task ) {", "init Executors If Need ( ) ;", "task Executor For Cached Images . execute ( task ) ; }"]}
{"ids": "11226", "code": ["public static Image Icon create Icon ( Basic Stroke stroke , int width , int height , boolean horizontal Orientation ) {", "Buffered Image big Image = new Buffered Image ( width , height , Buffered Image . TYPE INT ARGB ) ;", "Graphics 2 D g = ( Graphics 2 D ) big Image . get Graphics ( ) ;", "g . set Background ( OM Color . clear ) ;", "g . set Paint ( OM Color . clear ) ;", "g . fill Rect ( NUM_ , NUM_ , width , height ) ;", "g . set Paint ( Color . black ) ;", "g . set Stroke ( stroke ) ;", "if ( horizontal Orientation ) {", "g . draw Line ( NUM_ , height / NUM_ , width , height / NUM_ ) ; }", "else {", "g . draw Line ( width / NUM_ , NUM_ , width / NUM_ , height ) ; }", "return new Image Icon ( big Image ) ; }"]}
{"ids": "35332", "code": ["public static final < T extends E Object > List < T > collect Nodes Within Same This Environment ( E Object root , Class < T > cls ) {", "final List < T > result = new Array List < > ( ) ;", "final Tree Iterator < E Object > iter = root . e All Contents ( ) ;", "while ( iter . has Next ( ) ) {", "final E Object obj = iter . next ( ) ;", "if ( cls . is Assignable From ( obj . get Class ( ) ) ) {", "@ Suppress Warnings ( STR_ ) final T obj Casted = ( T ) obj ;", "result . add ( obj Casted ) ; }", "if ( obj instanceof This Arg Provider ) {", "iter . prune ( ) ; } }", "return result ; }"]}
{"ids": "16679", "code": ["public String full Source ( ) {", "if ( full Source == null ) {", "full Source = add Sentence Markers ( source ( ) ) ; }", "return full Source ; }"]}
{"ids": "56081", "code": ["private void update Detail Data ( ) {", "final long start = m Left Position ;", "final long end = m Right Position ;", "final long now = m Current Time ;", "final Context context = get Context ( ) ;", "Network Stats History . Entry original Entry = m Original Network Stats History . get Values ( start , end , now , null ) ;", "final long original Total Bytes = original Entry . rx Bytes ;", "m Original Total Phrase = Formatter . format File Size ( context , original Total Bytes ) ;", "Network Stats History . Entry compressed Entry = m Received Network Stats History . get Values ( start , end , now , null ) ;", "final long compressed Total Bytes = compressed Entry . rx Bytes ;", "m Received Total Phrase = Formatter . format File Size ( context , compressed Total Bytes ) ;", "float percentage = NUM_ ;", "if ( original Total Bytes > NUM_ && original Total Bytes > compressed Total Bytes ) {", "percentage = ( original Total Bytes - compressed Total Bytes ) / ( float ) original Total Bytes ; }", "m Percent Reduction Phrase = String . format ( STR_ , NUM_ * percentage ) ;", "m Start Date Phrase = format Date ( context , start ) ;", "m End Date Phrase = format Date ( context , end ) ; }"]}
{"ids": "27174", "code": ["public Punctuation Trie < T > lookup ( Char Sequence s ) {", "Punctuation Trie < T > t = this ;", "for ( int i = NUM_ , n = s . length ( ) ; i < n ; ++ i ) {", "t = t . lookup ( s . char At ( i ) ) ;", "if ( null == t ) {", "break ; } }", "return t ; }"]}
{"ids": "31416", "code": ["private static File construct File Paths ( String file 1 , String file 2 ) {", "File new Path ;", "if ( file 2 . starts With ( file 1 ) ) {", "new Path = new File ( file 2 ) ; }", "else {", "new Path = new File ( file 1 + STR_ + file 2 ) ; }", "return new Path ; }"]}
{"ids": "24877", "code": ["public String resolve Template ( I Template Type template Type , Map < String , String > replacements ) throws IO Exception {", "Path path = get Template Path ( template Type ) ;", "String template = new String ( Files . read All Bytes ( path ) , Standard Charsets . UTF 8 ) ;", "return insert Properties ( template , replacements ) ; }"]}
{"ids": "63521", "code": ["public void execute ( ) {", "try {", "prep . execute ( ) ; }", "catch ( SQL Exception e ) {", "throw convert ( e ) ; } }"]}
{"ids": "62279", "code": ["private static byte [ ] unwrap Calculated Value ( byte [ ] data ) {", "if ( data . length < CALC DATA OFFSET ) {", "return data ; }", "Byte Buffer buffer = Page Channel . wrap ( data ) ;", "buffer . position ( CALC DATA LEN OFFSET ) ;", "int data Len = buffer . get Int ( ) ;", "byte [ ] new Data = new byte [ Math . min ( buffer . remaining ( ) , data Len ) ] ;", "buffer . get ( new Data ) ;", "return new Data ; }"]}
{"ids": "36931", "code": ["public synchronized Type Instance create Instance ( final String name , final String comment , final Base Type base Type , final Section section , final long section Offset ) throws Couldnt Save Data Exception , Couldnt Load Data Exception {", "Preconditions . check Not Null ( name , STR_ ) ;", "Preconditions . check Argument ( comment == null || ! comment . is Empty ( ) , STR_ ) ;", "Preconditions . check Not Null ( base Type , STR_ ) ;", "Preconditions . check Not Null ( section , STR_ ) ;", "Preconditions . check Argument ( section Offset >= NUM_ , STR_ ) ;", "Preconditions . check Argument ( ! instances By Address . contains Key ( new Type Instance Address ( section . get Start Address ( ) , section Offset ) ) ) ;", "final Type Instance instance = backend . create Type Instance ( name , comment , base Type , section , section Offset ) ;", "instances By Address . put ( instance . get Address ( ) , instance ) ;", "instances . add ( instance ) ;", "notify Instance Added ( instance ) ;", "return instance ; }"]}
{"ids": "79942", "code": ["void show Input Box ( String message , Consumer < String > result Callback ) {", "show Input Box ( message , null , result Callback ) ; }"]}
{"ids": "69683", "code": ["public void add ( Field field ) {", "m Fields . add ( field ) ; }"]}
{"ids": "32500", "code": ["public static long measure Time ( Callable < Object > c , int thread Cnt ) throws Exception {", "A . ensure ( thread Cnt >= NUM_ , STR_ ) ;", "long start = System . current Time Millis ( ) ;", "if ( thread Cnt == NUM_ ) c . call ( ) ;", "else Grid Test Utils . run Multi Threaded ( c , thread Cnt , STR_ ) ;", "return System . current Time Millis ( ) - start ; }"]}
{"ids": "3564", "code": ["@ Override public boolean is Closed ( ) {", "return is Closed . get ( ) ; }"]}
{"ids": "55068", "code": ["protected Statement List Node generate Destructor Body ( Context context , Statement List Node statement List ) {", "Model model = ( Model ) value ;", "Set < String > ids = new Linked Hash Set < String > ( ) ;", "if ( model . is Declared ( ) ) ids . add ( model . get Id ( ) ) ;", "collect Declarations ( model . get Sub Initializer Iterator ( ) , ids ) ;", "Node Factory node Factory = context . get Node Factory ( ) ;", "Statement List Node result = statement List ;", "Statement List Node function Statement List = null ;", "for ( String id : ids ) {", "Literal Null Node literal Null = node Factory . literal Null ( ) ;", "Identifier Node identifier = node Factory . identifier ( id ) ;", "Node expression Statement = node Factory . assignment Expression ( identifier , ASSIGN TOKEN , literal Null ) ;", "function Statement List = node Factory . statement List ( function Statement List , expression Statement ) ; }", "Function Signature Node function Signature = node Factory . function Signature ( null , null ) ;", "function Signature . void anno = true ;", "Identifier Node function Identifier = node Factory . identifier ( model . get Definition Name ( ) + STR_ ) ;", "Function Common Node function Common = node Factory . function Common ( context , function Identifier , function Signature , function Statement List ) ;", "function Common . set User Defined Body ( true ) ;", "Attribute List Node attribute List = Abstract Syntax Tree Util . generate Private Attribute ( node Factory ) ;", "Function Name Node function Name = node Factory . function Name ( Tokens . EMPTY TOKEN , function Identifier ) ;", "Function Definition Node function Definition = node Factory . function Definition ( context , attribute List , function Name , function Common ) ;", "result = node Factory . statement List ( result , function Definition ) ;", "return result ; }"]}
{"ids": "15291", "code": ["protected synchronized void expire ( ) throws Illegal Monitor State Exception {", "if ( owner == Thread . current Thread ( ) ) {", "expired = true ; }", "else {", "throw new Illegal Monitor State Exception ( STR_ ) ; } }"]}
{"ids": "19755", "code": ["private String Buffer prepare Optimized Insert Statement ( One Row Change one Row Change ) {", "String Buffer stmt ;", "stmt = new String Buffer ( ) ;", "stmt . append ( STR_ ) ;", "stmt . append ( conn . get Database Object Name ( one Row Change . get Schema Name ( ) ) + STR_ + conn . get Database Object Name ( one Row Change . get Table Name ( ) ) ) ;", "stmt . append ( STR_ ) ;", "print Column Spec ( stmt , one Row Change . get Column Spec ( ) , null , null , Print Mode . NAMES ONLY , STR_ ) ;", "stmt . append ( STR_ ) ;", "boolean first Row = true ;", "for ( Array List < Column Val > one Row Values : one Row Change . get Column Values ( ) ) {", "if ( first Row ) {", "first Row = false ; }", "else stmt . append ( STR_ ) ;", "print Column Spec ( stmt , one Row Change . get Column Spec ( ) , null , one Row Values , Print Mode . PLACE HOLDER , STR_ ) ;", "stmt . append ( STR_ ) ; }", "return stmt ; }"]}
{"ids": "19660", "code": ["private boolean extractor Queue Empty ( ) throws Interrupted Exception {", "if ( extractor . has More Events ( ) ) return false ;", "else if ( block Commit Interval Millis <= NUM_ ) return true ;", "else {", "long next Commit Millis = last Commit Millis + block Commit Interval Millis ;", "long sleep Millis = next Commit Millis - System . current Time Millis ( ) ;", "while ( sleep Millis > NUM_ ) {", "Thread . sleep ( NUM_ ) ;", "if ( extractor . has More Events ( ) ) return false ;", "sleep Millis = next Commit Millis - System . current Time Millis ( ) ; }", "return true ; } }"]}
{"ids": "35941", "code": ["public static void verify ( final Class Reader cr , final boolean dump , final Print Writer pw ) {", "verify ( cr , null , dump , pw ) ; }"]}
{"ids": "77770", "code": ["public File Async Http Response Handler ( Context context ) {", "super ( ) ;", "this . file = get Temporary File ( context ) ;", "this . append = false ;", "this . rename If Exists = false ; }"]}
{"ids": "46287", "code": ["public static boolean is Window Opaque ( Window window ) {", "if ( window == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "return window . is Opaque ( ) ; }"]}
{"ids": "17924", "code": ["public static byte [ ] encode ( byte [ ] data , int off , int length ) {", "int len = ( length + NUM_ ) / NUM_ * NUM_ ;", "Byte Array Output Stream b Out = new Byte Array Output Stream ( len ) ;", "try {", "encoder . encode ( data , off , length , b Out ) ; }", "catch ( Exception e ) {", "throw new Encoder Exception ( STR_ + e . get Message ( ) , e ) ; }", "return b Out . to Byte Array ( ) ; }"]}
{"ids": "52743", "code": ["public double entropy NMI Min ( ) {", "return ( entropy Mutual Information ( ) / Math . min ( entropy First ( ) , entropy Second ( ) ) ) ; }"]}
{"ids": "63137", "code": ["public static void unregister ( Close Watcher w ) {", "w . closeable = null ;", "refs . remove ( w ) ; }"]}
{"ids": "10634", "code": ["protected final void refresh Loading Views Size ( ) {", "final int maximum Pull Scroll = ( int ) ( get Maximum Pull Scroll ( ) * NUM_ ) ;", "int p Left = get Padding Left ( ) ;", "int p Top = get Padding Top ( ) ;", "int p Right = get Padding Right ( ) ;", "int p Bottom = get Padding Bottom ( ) ;", "switch ( get Pull To Refresh Scroll Direction ( ) ) {", "case HORIZONTAL :", "if ( m Mode . show Header Loading Layout ( ) ) {", "m Header Layout . set Width ( maximum Pull Scroll ) ;", "p Left = - maximum Pull Scroll ; }", "else {", "p Left = NUM_ ; }", "if ( m Mode . show Footer Loading Layout ( ) ) {", "m Footer Layout . set Width ( maximum Pull Scroll ) ;", "p Right = - maximum Pull Scroll ; }", "else {", "p Right = NUM_ ; }", "break ;", "case VERTICAL :", "if ( m Mode . show Header Loading Layout ( ) ) {", "m Header Layout . set Height ( maximum Pull Scroll ) ;", "p Top = - maximum Pull Scroll ; }", "else {", "p Top = NUM_ ; }", "if ( m Mode . show Footer Loading Layout ( ) ) {", "m Footer Layout . set Height ( maximum Pull Scroll ) ;", "p Bottom = - maximum Pull Scroll ; }", "else {", "p Bottom = NUM_ ; }", "break ; }", "if ( DEBUG ) {", "Log . d ( LOG TAG , String . format ( STR_ , p Left , p Top , p Right , p Bottom ) ) ; }", "set Padding ( p Left , p Top , p Right , p Bottom ) ; }"]}
{"ids": "51209", "code": ["static Label Node [ ] clone ( final List < Label Node > labels , final Map < Label Node , Label Node > map ) {", "Label Node [ ] clones = new Label Node [ labels . size ( ) ] ;", "for ( int i = NUM_ ; i < clones . length ; ++ i ) {", "clones [ i ] = map . get ( labels . get ( i ) ) ; }", "return clones ; }"]}
{"ids": "77605", "code": ["@ Override public Jetty Solr Runner create Jetty ( File solr Home , String data Dir , String shard List , String solr Config Override , String schema Override ) throws Exception {", "return create Proxied Jetty ( solr Home , data Dir , shard List , solr Config Override , schema Override ) ; }"]}
{"ids": "38733", "code": ["public synchronized void add Batch Classifier Listener ( Batch Classifier Listener cl ) {", "m batch Classifier Listeners . add Element ( cl ) ; }"]}
{"ids": "21978", "code": ["private boolean match Andwrite One Audit Log ( Buffered Writer writer , Audit Log auditlog , String keyword ) throws Marshalling Excetion {", "try {", "Audit Log Utils . reset Desc ( auditlog , resb ) ;", "if ( Audit Log Utils . is Keyword Contained ( auditlog , keyword ) ) {", "if ( count . get And Increment ( ) > NUM_ ) {", "while ( ! first Written . get ( ) ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "logger . warn ( STR_ ) ; } }", "writer . write ( STR_ + mapper . write Value As String ( auditlog ) ) ; }", "else {", "writer . write ( mapper . write Value As String ( auditlog ) ) ;", "first Written . set ( true ) ; }", "return true ; }", "logger . debug ( STR_ , auditlog . get Description ( ) , keyword ) ;", "return false ; }", "catch ( Json Generation Exception e ) {", "throw new Marshalling Excetion ( STR_ , e ) ; }", "catch ( Json Mapping Exception e ) {", "throw new Marshalling Excetion ( STR_ , e ) ; }", "catch ( IO Exception e ) {", "throw new Marshalling Excetion ( STR_ , e ) ; } }"]}
{"ids": "25523", "code": ["private void decode Tones Phase ( int ch Num , boolean band Has Tones [ ] ) {", "Waves Data dst [ ] = ctx . channels [ ch Num ] . tones Info ;", "for ( int sb = NUM_ ; sb < ctx . waves Info . num Tone Bands ; sb ++ ) {", "if ( ! band Has Tones [ sb ] ) {", "continue ; }", "int wparam = dst [ sb ] . start Index ;", "for ( int i = NUM_ ; i < dst [ sb ] . num Wavs ; i ++ ) {", "ctx . waves Info . waves [ wparam + i ] . phase Index = br . read ( NUM_ ) ; } } }"]}
{"ids": "23073", "code": ["public int encode ( byte [ ] data , int off , int length , Output Stream out ) throws IO Exception {", "for ( int i = off ; i < ( off + length ) ; i ++ ) {", "int v = data [ i ] & NUM_ ;", "out . write ( encoding Table [ ( v > > > NUM_ ) ] ) ;", "out . write ( encoding Table [ v & NUM_ ] ) ; }", "return length * NUM_ ; }"]}
{"ids": "71513", "code": ["public void clear ( ) {", "synchronized ( m Lock ) {", "m Graphics . clear ( ) ; }", "post Invalidate ( ) ; }"]}
{"ids": "40087", "code": ["public static String remove All ( String str , String [ ] patterns ) {", "for ( String pattern : patterns ) str = str . replace ( pattern , STR_ ) ;", "return str ; }"]}
{"ids": "83823", "code": ["public void add Series Renderer ( Simple Series Renderer renderer ) {", "m Renderers . add ( renderer ) ; }"]}
{"ids": "6954", "code": ["public static void cc Draw Circle ( GL 10 gl , CG Point center , float r , float a , int segments , boolean draw Line To Center ) {", "Float Buffer vertices = get Vertices ( NUM_ * ( segments + NUM_ ) ) ;", "int additional Segment = NUM_ ;", "if ( draw Line To Center ) additional Segment ++ ;", "final float coef = NUM_ * ( float ) Math . PI / segments ;", "for ( int i = NUM_ ; i <= segments ; i ++ ) {", "float rads = i * coef ;", "float j = ( float ) ( r * Math . cos ( rads + a ) + center . x ) ;", "float k = ( float ) ( r * Math . sin ( rads + a ) + center . y ) ;", "vertices . put ( j ) ;", "vertices . put ( k ) ; }", "vertices . put ( center . x ) ;", "vertices . put ( center . y ) ;", "vertices . position ( NUM_ ) ;", "gl . gl Disable ( GL TEXTURE 2 D ) ;", "gl . gl Disable Client State ( GL TEXTURE COORD ARRAY ) ;", "gl . gl Disable Client State ( GL COLOR ARRAY ) ;", "gl . gl Vertex Pointer ( NUM_ , GL FLOAT , NUM_ , vertices ) ;", "gl . gl Draw Arrays ( GL LINE STRIP , NUM_ , segments + additional Segment ) ;", "gl . gl Enable Client State ( GL COLOR ARRAY ) ;", "gl . gl Enable Client State ( GL TEXTURE COORD ARRAY ) ;", "gl . gl Enable ( GL TEXTURE 2 D ) ; }"]}
{"ids": "37983", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "36366", "code": ["@ Override public boolean is Parent ( File folder , File file ) {", "return folder . equals ( file . get Parent File ( ) ) ; }"]}
{"ids": "1373", "code": ["@ Override public void print ( char c ) throws IO Exception {", "boolean is WS = Character . is Whitespace ( c ) ;", "if ( is WS ) {", "if ( is First Char ) return ;", "if ( c == CHAR RETURN ) return ;", "if ( sb . length ( ) > NUM_ ) {", "print Buffer ( ) ;", "last Char = ( c == CHAR NL ) ? CHAR NL : c ;", "super . print ( last Char ) ;", "return ; } }", "is First Char = false ;", "if ( c == CHAR GT && sb . length ( ) > NUM_ ) print Buffer ( ) ;", "if ( is WS || ! add To Buffer ( c ) ) {", "if ( depth Sum == NUM_ ) {", "if ( is WS ) {", "if ( last Char == CHAR NL ) return ;", "if ( c != CHAR NL ) {", "if ( Character . is Whitespace ( last Char ) ) return ; } } }", "last Char = c ;", "super . print ( c ) ; } }"]}
{"ids": "13937", "code": ["public static Token Endpoint Auth Method from String ( String type ) {", "if ( type != null ) {", "for ( Token Endpoint Auth Method auth Method : Token Endpoint Auth Method . values ( ) ) {", "if ( type . equals Ignore Case ( auth Method . type ) ) {", "return auth Method ; } } }", "return null ; }"]}
{"ids": "23735", "code": ["public void put ( E e ) throws Interrupted Exception {", "if ( e == null ) throw new Null Pointer Exception ( ) ;", "int c = - NUM_ ;", "final Reentrant Lock put Lock = this . put Lock ;", "final Atomic Integer count = this . count ;", "put Lock . lock Interruptibly ( ) ;", "try {", "while ( count . get ( ) >= capacity ) {", "not Full . await ( ) ; }", "enqueue ( e ) ;", "c = count . get And Increment ( ) ;", "if ( c + NUM_ < capacity ) not Full . signal ( ) ; }", "finally {", "put Lock . unlock ( ) ; }", "if ( c == NUM_ ) signal Not Empty ( ) ; }"]}
{"ids": "55838", "code": ["private boolean compare ( List < String > remote Modules , List < String > expected Modules ) {", "Collections . sort ( remote Modules ) ;", "Collections . sort ( expected Modules ) ;", "return remote Modules . equals ( expected Modules ) ; }"]}
{"ids": "62523", "code": ["private void encode Size ( Byte Buffer header Buffer , int size ) {", "header Buffer . put ( ( byte ) ( ( size & NUM_ ) > > NUM_ ) ) ;", "header Buffer . put ( ( byte ) ( ( size & NUM_ ) > > NUM_ ) ) ;", "header Buffer . put ( ( byte ) ( size & NUM_ ) ) ;", "logger . fine ( STR_ + size + STR_ + Integer . to Binary String ( size ) + STR_ + Integer . to Hex String ( size ) ) ; }"]}
{"ids": "68863", "code": ["protected Linked List < Diff > diff bisect ( String text 1 , String text 2 , long deadline ) {", "int text 1 length = text 1 . length ( ) ;", "int text 2 length = text 2 . length ( ) ;", "int max d = ( text 1 length + text 2 length + NUM_ ) / NUM_ ;", "int v offset = max d ;", "int v length = NUM_ * max d ;", "int [ ] v 1 = new int [ v length ] ;", "int [ ] v 2 = new int [ v length ] ;", "for ( int x = NUM_ ; x < v length ; x ++ ) {", "v 1 [ x ] = - NUM_ ;", "v 2 [ x ] = - NUM_ ; }", "v 1 [ v offset + NUM_ ] = NUM_ ;", "v 2 [ v offset + NUM_ ] = NUM_ ;", "int delta = text 1 length - text 2 length ;", "boolean front = ( delta % NUM_ != NUM_ ) ;", "int k 1 start = NUM_ ;", "int k 1 end = NUM_ ;", "int k 2 start = NUM_ ;", "int k 2 end = NUM_ ;", "for ( int d = NUM_ ; d < max d ; d ++ ) {", "if ( System . current Time Millis ( ) > deadline ) {", "break ; }", "for ( int k 1 = - d + k 1 start ; k 1 <= d - k 1 end ; k 1 += NUM_ ) {", "int k 1 offset = v offset + k 1 ;", "int x 1 ;", "if ( k 1 == - d || ( k 1 != d && v 1 [ k 1 offset - NUM_ ] < v 1 [ k 1 offset + NUM_ ] ) ) {", "x 1 = v 1 [ k 1 offset + NUM_ ] ; }", "else {", "x 1 = v 1 [ k 1 offset - NUM_ ] + NUM_ ; }", "int y 1 = x 1 - k 1 ;", "while ( x 1 < text 1 length && y 1 < text 2 length && text 1 . char At ( x 1 ) == text 2 . char At ( y 1 ) ) {", "x 1 ++ ;", "y 1 ++ ; }", "v 1 [ k 1 offset ] = x 1 ;", "if ( x 1 > text 1 length ) {", "k 1 end += NUM_ ; }", "else if ( y 1 > text 2 length ) {", "k 1 start += NUM_ ; }", "else if ( front ) {", "int k 2 offset = v offset + delta - k 1 ;", "if ( k 2 offset >= NUM_ && k 2 offset < v length && v 2 [ k 2 offset ] != - NUM_ ) {", "int x 2 = text 1 length - v 2 [ k 2 offset ] ;", "if ( x 1 >= x 2 ) {", "return diff bisect Split ( text 1 , text 2 , x 1 , y 1 , deadline ) ; } } } }", "for ( int k 2 = - d + k 2 start ; k 2 <= d - k 2 end ; k 2 += NUM_ ) {", "int k 2 offset = v offset + k 2 ;", "int x 2 ;", "if ( k 2 == - d || ( k 2 != d && v 2 [ k 2 offset - NUM_ ] < v 2 [ k 2 offset + NUM_ ] ) ) {", "x 2 = v 2 [ k 2 offset + NUM_ ] ; }", "else {", "x 2 = v 2 [ k 2 offset - NUM_ ] + NUM_ ; }", "int y 2 = x 2 - k 2 ;", "while ( x 2 < text 1 length && y 2 < text 2 length && text 1 . char At ( text 1 length - x 2 - NUM_ ) == text 2 . char At ( text 2 length - y 2 - NUM_ ) ) {", "x 2 ++ ;", "y 2 ++ ; }", "v 2 [ k 2 offset ] = x 2 ;", "if ( x 2 > text 1 length ) {", "k 2 end += NUM_ ; }", "else if ( y 2 > text 2 length ) {", "k 2 start += NUM_ ; }", "else if ( ! front ) {", "int k 1 offset = v offset + delta - k 2 ;", "if ( k 1 offset >= NUM_ && k 1 offset < v length && v 1 [ k 1 offset ] != - NUM_ ) {", "int x 1 = v 1 [ k 1 offset ] ;", "int y 1 = v offset + x 1 - k 1 offset ;", "x 2 = text 1 length - x 2 ;", "if ( x 1 >= x 2 ) {", "return diff bisect Split ( text 1 , text 2 , x 1 , y 1 , deadline ) ; } } } } }", "Linked List < Diff > diffs = new Linked List < Diff > ( ) ;", "diffs . add ( new Diff ( Operation . DELETE , text 1 ) ) ;", "diffs . add ( new Diff ( Operation . INSERT , text 2 ) ) ;", "return diffs ; }"]}
{"ids": "11189", "code": ["public boolean this Is You ( Object n ) {", "return id . equals ( n ) ; }"]}
{"ids": "33468", "code": ["private int sync Contact Names ( Context context ) {", "final Content Resolver content Resolver = context . get Content Resolver ( ) ;", "final Cursor cursor = content Resolver . query ( Contact Notifications . CONTENT URI , null , null , null , null ) ;", "if ( cursor == null ) {", "return NUM_ ; }", "if ( cursor . get Count ( ) == NUM_ ) {", "return NUM_ ; }", "int count = NUM_ ;", "int updated Count = NUM_ ;", "String id ;", "String contact Name ;", "String contact Lookup ;", "String contact Id ;", "while ( cursor . move To Next ( ) ) {", "count ++ ;", "id = cursor . get String ( cursor . get Column Index Or Throw ( Contact Notifications . ID ) ) ;", "contact Name = cursor . get String ( cursor . get Column Index Or Throw ( Contact Notifications . CONTACT NAME ) ) ;", "contact Id = cursor . get String ( cursor . get Column Index Or Throw ( Contact Notifications . CONTACT ID ) ) ;", "contact Lookup = cursor . get String ( cursor . get Column Index Or Throw ( Contact Notifications . CONTACT LOOKUPKEY ) ) ;", "Contact Identification contact Info = Sms Popup Utils . get Person Name By Lookup ( context , contact Lookup , contact Id ) ;", "if ( contact Info != null ) {", "boolean run Update = false ;", "Content Values vals = new Content Values ( ) ;", "if ( contact Name == null || ! contact Name . equals ( contact Info . contact Name ) ) {", "vals . put ( Contact Notifications . CONTACT NAME , contact Info . contact Name ) ;", "run Update = true ; }", "if ( contact Id == null || ! contact Id . equals ( contact Info . contact Id ) ) {", "vals . put ( Contact Notifications . CONTACT ID , contact Info . contact Id ) ;", "run Update = true ; }", "if ( contact Lookup == null || ! contact Lookup . equals ( contact Info . contact Lookup ) ) {", "vals . put ( Contact Notifications . CONTACT LOOKUPKEY , contact Info . contact Lookup ) ;", "run Update = true ; }", "if ( run Update && NUM_ == content Resolver . update ( Contact Notifications . build Contact Uri ( id ) , vals , null , null ) ) {", "updated Count ++ ; } } }", "if ( cursor != null ) {", "cursor . close ( ) ; }", "if ( Build Config . DEBUG ) Log . v ( STR_ + updated Count + STR_ + count ) ;", "return updated Count ; }"]}
{"ids": "28837", "code": ["@ Override public synchronized void clear ( ) {", "File [ ] files = m Root Directory . list Files ( ) ;", "if ( files != null ) {", "for ( File file : files ) {", "file . delete ( ) ; } }", "m Entries . clear ( ) ;", "m Total Size = NUM_ ;", "Volley Log . d ( STR_ ) ; }"]}
{"ids": "49318", "code": ["@ Override protected void device Frame Rect ( int x , int y , int width , int height , Color color ) {", "Affine Transform device Transform = get Transform ( ) ;", "int transform Type = device Transform . get Type ( ) ;", "boolean use Path = ( ( transform Type & ( Affine Transform . TYPE GENERAL ROTATION | Affine Transform . TYPE GENERAL TRANSFORM ) ) != NUM_ ) ;", "if ( use Path ) {", "draw ( new Rectangle 2 D . Float ( x , y , width , height ) ) ;", "return ; }", "Stroke stroke = get Stroke ( ) ;", "if ( stroke instanceof Basic Stroke ) {", "Basic Stroke line Stroke = ( Basic Stroke ) stroke ;", "int end Cap = line Stroke . get End Cap ( ) ;", "int line Join = line Stroke . get Line Join ( ) ;", "if ( ( end Cap == Basic Stroke . CAP SQUARE ) && ( line Join == Basic Stroke . JOIN MITER ) && ( line Stroke . get Miter Limit ( ) == NUM_ ) ) {", "float line Width = line Stroke . get Line Width ( ) ;", "Point 2 D . Float pen Size = new Point 2 D . Float ( line Width , line Width ) ;", "device Transform . delta Transform ( pen Size , pen Size ) ;", "float device Line Width = Math . min ( Math . abs ( pen Size . x ) , Math . abs ( pen Size . y ) ) ;", "Point 2 D . Float ul pos = new Point 2 D . Float ( x , y ) ;", "device Transform . transform ( ul pos , ul pos ) ;", "Point 2 D . Float lr pos = new Point 2 D . Float ( x + width , y + height ) ;", "device Transform . transform ( lr pos , lr pos ) ;", "float w = ( float ) ( lr pos . get X ( ) - ul pos . get X ( ) ) ;", "float h = ( float ) ( lr pos . get Y ( ) - ul pos . get Y ( ) ) ;", "W Printer Job w Printer Job = ( W Printer Job ) get Printer Job ( ) ;", "if ( w Printer Job . select Style Pen ( end Cap , line Join , device Line Width , color ) == true ) {", "w Printer Job . frame Rect ( ( float ) ul pos . get X ( ) , ( float ) ul pos . get Y ( ) , w , h ) ; }", "else {", "double lower Res = Math . min ( w Printer Job . get X Res ( ) , w Printer Job . get Y Res ( ) ) ;", "if ( ( device Line Width / lower Res ) < MAX THINLINE INCHES ) {", "w Printer Job . select Pen ( device Line Width , color ) ;", "w Printer Job . frame Rect ( ( float ) ul pos . get X ( ) , ( float ) ul pos . get Y ( ) , w , h ) ; }", "else {", "draw ( new Rectangle 2 D . Float ( x , y , width , height ) ) ; } } }", "else {", "draw ( new Rectangle 2 D . Float ( x , y , width , height ) ) ; } } }"]}
{"ids": "69691", "code": ["public void reset Workspace ( ) {", "m Block Factory . clear Prior Block References ( ) ;", "m Root Blocks . clear ( ) ;", "m Stats . clear ( ) ;", "m Deleted Blocks . clear ( ) ; }"]}
{"ids": "14110", "code": ["private void parse Element ( Element element ) throws SAML 2 Exception {", "Assertion Factory assertion Factory = Assertion Factory . get Instance ( ) ;", "Protocol Factory proto Factory = Protocol Factory . get Instance ( ) ;", "request Id = element . get Attribute ( SAML 2 Constants . ID ) ;", "validate ID ( request Id ) ;", "version = element . get Attribute ( SAML 2 Constants . VERSION ) ;", "validate Version ( version ) ;", "String issue Instant Str = element . get Attribute ( SAML 2 Constants . ISSUE INSTANT ) ;", "validate Issue Instant ( issue Instant Str ) ;", "destination URI = element . get Attribute ( SAML 2 Constants . DESTINATION ) ;", "consent = element . get Attribute ( SAML 2 Constants . CONSENT ) ;", "String not On Or After Str = element . get Attribute ( SAML 2 Constants . NOTONORAFTER ) ;", "validate Not On Or After Str ( not On Or After Str ) ;", "reason = element . get Attribute ( SAML 2 Constants . REASON ) ;", "String session Index Str = null ;", "Node List n List = element . get Child Nodes ( ) ;", "if ( ( n List != null ) && ( n List . get Length ( ) > NUM_ ) ) {", "for ( int i = NUM_ ; i < n List . get Length ( ) ; i ++ ) {", "Node child Node = n List . item ( i ) ;", "String c Name = child Node . get Local Name ( ) ;", "if ( c Name != null ) {", "if ( c Name . equals ( SAML 2 Constants . ISSUER ) ) {", "name ID = assertion Factory . create Issuer ( ( Element ) child Node ) ; }", "else if ( c Name . equals ( SAML 2 Constants . SIGNATURE ) ) {", "signature String = XML Utils . print ( ( Element ) child Node ) ;", "is Signed = true ; }", "else if ( c Name . equals ( SAML 2 Constants . EXTENSIONS ) ) {", "extensions = proto Factory . create Extensions ( ( Element ) child Node ) ; }", "else if ( c Name . equals ( SAML 2 Constants . BASEID ) ) {", "base Id = assertion Factory . create Base ID ( ( Element ) child Node ) ; }", "else if ( c Name . equals ( SAML 2 Constants . NAMEID ) ) {", "name Id = assertion Factory . create Name ID ( ( Element ) child Node ) ; }", "else if ( c Name . equals ( SAML 2 Constants . ENCRYPTEDID ) ) {", "encrypted Id = assertion Factory . create Encrypted ID ( ( Element ) child Node ) ; }", "else if ( c Name . equals ( SAML 2 Constants . SESSION INDEX ) ) {", "if ( ( session Index List == null ) || ( session Index List . is Empty ( ) ) ) {", "session Index List = new Array List ( ) ; }", "session Index Str = XML Utils . get Element String ( ( Element ) child Node ) ;", "session Index List . add ( session Index Str ) ; } } }", "validate Base I Dor Name I Dor Encrypted ID ( ) ;", "if ( ( session Index List != null ) && ( ! session Index List . is Empty ( ) ) ) {", "session Index List = Collections . unmodifiable List ( session Index List ) ; } } }"]}
{"ids": "65580", "code": ["public static Big Decimal paid To Date ( int p C Invoice ID , int p C Currency ID , int p Multiplier AP , Timestamp Date Acct ) throws SQL Exception {", "if ( p C Invoice ID == NUM_ || p C Currency ID == NUM_ ) return null ;", "Big Decimal Multiplier AP = new Big Decimal ( ( double ) p Multiplier AP ) ;", "if ( p Multiplier AP == NUM_ ) Multiplier AP = Adempiere . ONE ;", "int C Conversion Type ID = NUM_ ;", "Big Decimal payment Amt = allocated Amt To Date ( p C Invoice ID , p C Currency ID , C Conversion Type ID , Multiplier AP , Date Acct ) ;", "return Currency . round ( payment Amt , p C Currency ID , null ) ; }"]}
{"ids": "48033", "code": ["private int [ ] to Int Array ( ) {", "int length = encoding . length ;", "int [ ] result = new int [ NUM_ ] ;", "int which = NUM_ ;", "int from Pos = NUM_ ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "if ( ( encoding [ i ] & NUM_ ) == NUM_ ) {", "if ( i - from Pos + NUM_ > NUM_ ) {", "Big Integer big = new Big Integer ( pack ( encoding , from Pos , i - from Pos + NUM_ , NUM_ , NUM_ ) ) ;", "if ( from Pos == NUM_ ) {", "result [ which ++ ] = NUM_ ;", "Big Integer second = big . subtract ( Big Integer . value Of ( NUM_ ) ) ;", "if ( second . compare To ( Big Integer . value Of ( Integer . MAX VALUE ) ) == NUM_ ) {", "return null ; }", "else {", "result [ which ++ ] = second . int Value ( ) ; } }", "else {", "if ( big . compare To ( Big Integer . value Of ( Integer . MAX VALUE ) ) == NUM_ ) {", "return null ; }", "else {", "result [ which ++ ] = big . int Value ( ) ; } } }", "else {", "int retval = NUM_ ;", "for ( int j = from Pos ; j <= i ; j ++ ) {", "retval <<= NUM_ ;", "byte tmp = encoding [ j ] ;", "retval |= ( tmp & NUM_ ) ; }", "if ( from Pos == NUM_ ) {", "if ( retval < NUM_ ) {", "result [ which ++ ] = retval / NUM_ ;", "result [ which ++ ] = retval % NUM_ ; }", "else {", "result [ which ++ ] = NUM_ ;", "result [ which ++ ] = retval - NUM_ ; } }", "else {", "result [ which ++ ] = retval ; } }", "from Pos = i + NUM_ ; }", "if ( which >= result . length ) {", "result = Arrays . copy Of ( result , which + NUM_ ) ; } }", "return Arrays . copy Of ( result , which ) ; }"]}
{"ids": "62577", "code": ["public static List < Window > windows ( Input Stream words , Tokenizer Factory tokenizer Factory , int window Size ) {", "Tokenizer tokenizer = tokenizer Factory . create ( words ) ;", "List < String > list = new Array List < > ( ) ;", "while ( tokenizer . has More Tokens ( ) ) list . add ( tokenizer . next Token ( ) ) ;", "if ( list . is Empty ( ) ) throw new Illegal State Exception ( STR_ ) ;", "return windows ( list , window Size ) ; }"]}
{"ids": "53845", "code": ["public static double [ ] page Rank ( Matrix Interface prepared Matrix , int max Iteration ) {", "double [ ] init = new double [ prepared Matrix . get Rows Count ( ) ] ;", "for ( int i = NUM_ ; i != init . length ; i ++ ) init [ i ] = NUM_ ;", "return page Rank ( prepared Matrix , max Iteration , DEFAULT D , init ) ; }"]}
{"ids": "43902", "code": ["public boolean has MIME Type ( String mime Type ) {", "if ( mime Type == null ) return false ;", "String type = mime Type ;", "if ( mime Type . index Of ( STR_ ) > NUM_ ) {", "type = mime Type . substring ( NUM_ , mime Type . index Of ( STR_ ) ) ; }", "for ( String mt : this . mime Types ) {", "if ( mt . equals Ignore Case ( mime Type ) ) {", "return true ; }", "if ( mime Type != type && mt . equals Ignore Case ( type ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "16329", "code": ["private int measure Short ( int measure Spec ) {", "int result ;", "int spec Mode = Measure Spec . get Mode ( measure Spec ) ;", "int spec Size = Measure Spec . get Size ( measure Spec ) ;", "if ( spec Mode == Measure Spec . EXACTLY ) {", "result = spec Size ; }", "else {", "result = ( int ) ( NUM_ * m Radius + get Padding Top ( ) + get Padding Bottom ( ) + NUM_ ) ;", "if ( spec Mode == Measure Spec . AT MOST ) {", "result = Math . min ( result , spec Size ) ; } }", "return result ; }"]}
{"ids": "46132", "code": ["private void read Object ( java . io . Object Input Stream s ) throws java . io . IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "key = key . clone ( ) ; }"]}
{"ids": "57983", "code": ["void unexecute NS Decls ( Transformer Impl transformer ) throws Transformer Exception {", "unexecute NS Decls ( transformer , null ) ; }"]}
{"ids": "34031", "code": ["public boolean add ( Protocol Message pm ) {", "return protocol Messages . add ( pm ) ; }"]}
{"ids": "37710", "code": ["public void random Init ( ) {", "do {", "m bits = new boolean [ m n Nodes * m n Nodes ] ;", "for ( int i = NUM_ ; i < m n Nodes ; i ++ ) {", "int i Pos ;", "do {", "i Pos = m random . next Int ( m n Nodes * m n Nodes ) ; }", "while ( is Square ( i Pos ) ) ;", "m bits [ i Pos ] = true ; } }", "while ( has Cycles ( ) ) ;", "calc Global Score ( ) ; }"]}
{"ids": "44093", "code": ["public static int safe Parse Int ( String s ) {", "return safe Parse Int ( s , - NUM_ ) ; }"]}
{"ids": "23649", "code": ["protected boolean has Receivers For ( Distributed Member end Point ) {", "synchronized ( this . receivers ) {", "for ( Iterator it = receivers . iterator ( ) ; it . has Next ( ) ; ) {", "Connection con = ( Connection ) it . next ( ) ;", "if ( end Point . equals ( con . get Remote Address ( ) ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "68286", "code": ["protected void decode Bitmap Data ( final Gif Frame frame , byte [ ] dst Pixels ) {", "if ( frame != null ) {", "raw Data . position ( frame . buffer Frame Start ) ; }", "final int null Code = - NUM_ ;", "final int npix = ( frame == null ) ? width * height : frame . iw * frame . ih ;", "int available , clear , code mask , code size , end of information , in code , old code , bits , code , count , i , datum , data size , first , top , bi , pi ;", "if ( dst Pixels == null || dst Pixels . length < npix ) {", "dst Pixels = new byte [ npix ] ; }", "if ( prefix == null ) {", "prefix = new short [ MAX STACK SIZE ] ; }", "if ( suffix == null ) {", "suffix = new byte [ MAX STACK SIZE ] ; }", "if ( pixel Stack == null ) {", "pixel Stack = new byte [ MAX STACK SIZE + NUM_ ] ; }", "data size = read ( ) ;", "clear = NUM_ << data size ;", "end of information = clear + NUM_ ;", "available = clear + NUM_ ;", "old code = null Code ;", "code size = data size + NUM_ ;", "code mask = ( NUM_ << code size ) - NUM_ ;", "for ( code = NUM_ ; code < clear ; code ++ ) {", "prefix [ code ] = NUM_ ;", "suffix [ code ] = ( byte ) code ; }", "datum = bits = count = first = top = pi = bi = NUM_ ;", "for ( i = NUM_ ; i < npix ; ) {", "if ( top == NUM_ ) {", "if ( bits < code size ) {", "if ( count == NUM_ ) {", "count = read Block ( ) ;", "if ( count <= NUM_ ) {", "break ; }", "bi = NUM_ ; }", "datum += ( ( block [ bi ] ) & NUM_ ) << bits ;", "bits += NUM_ ;", "bi ++ ;", "count -- ;", "continue ; }", "code = datum & code mask ;", "datum >>= code size ;", "bits -= code size ;", "if ( ( code > available ) || ( code == end of information ) ) {", "break ; }", "if ( code == clear ) {", "code size = data size + NUM_ ;", "code mask = ( NUM_ << code size ) - NUM_ ;", "available = clear + NUM_ ;", "old code = null Code ;", "continue ; }", "if ( old code == null Code ) {", "pixel Stack [ top ++ ] = suffix [ code ] ;", "old code = code ;", "first = code ;", "continue ; }", "in code = code ;", "if ( code == available ) {", "pixel Stack [ top ++ ] = ( byte ) first ;", "code = old code ; }", "while ( code > clear ) {", "pixel Stack [ top ++ ] = suffix [ code ] ;", "code = prefix [ code ] ; }", "first = ( suffix [ code ] ) & NUM_ ;", "if ( available >= MAX STACK SIZE ) {", "break ; }", "pixel Stack [ top ++ ] = ( byte ) first ;", "prefix [ available ] = ( short ) old code ;", "suffix [ available ] = ( byte ) first ;", "available ++ ;", "if ( ( ( available & code mask ) == NUM_ ) && ( available < MAX STACK SIZE ) ) {", "code size ++ ;", "code mask += available ; }", "old code = in code ; }", "top -- ;", "dst Pixels [ pi ++ ] = pixel Stack [ top ] ;", "i ++ ; }", "for ( i = pi ; i < npix ; i ++ ) {", "dst Pixels [ i ] = NUM_ ; } }"]}
{"ids": "66125", "code": ["public void add Range Restriction ( String Column Name , Object Code , Object Code to , String Info Name , String Info Display , String Info Display to ) {", "Restriction r = new Restriction ( Column Name , Code , Code to , Info Name , Info Display , Info Display to , true , NUM_ ) ;", "m list . add ( r ) ; }"]}
{"ids": "60820", "code": ["@ Suppress Warnings ( STR_ ) E transfer ( E e , boolean timed , long nanos ) {", "Q Node s = null ;", "boolean is Data = ( e != null ) ;", "for ( ; ; ) {", "Q Node t = tail ;", "Q Node h = head ;", "if ( t == null || h == null ) continue ;", "if ( h == t || t . is Data == is Data ) {", "Q Node tn = t . next ;", "if ( t != tail ) continue ;", "if ( tn != null ) {", "advance Tail ( t , tn ) ;", "continue ; }", "if ( timed && nanos <= NUM_ ) return null ;", "if ( s == null ) s = new Q Node ( e , is Data ) ;", "if ( ! t . cas Next ( null , s ) ) continue ;", "advance Tail ( t , s ) ;", "Object x = await Fulfill ( s , e , timed , nanos ) ;", "if ( x == s ) {", "clean ( t , s ) ;", "return null ; }", "if ( ! s . is Off List ( ) ) {", "advance Head ( t , s ) ;", "if ( x != null ) s . item = s ;", "s . waiter = null ; }", "return ( x != null ) ? ( E ) x : e ; }", "else {", "Q Node m = h . next ;", "if ( t != tail || m == null || h != head ) continue ;", "Object x = m . item ;", "if ( is Data == ( x != null ) || x == m || ! m . cas Item ( x , e ) ) {", "advance Head ( h , m ) ;", "continue ; }", "advance Head ( h , m ) ;", "Lock Support . unpark ( m . waiter ) ;", "return ( x != null ) ? ( E ) x : e ; } } }"]}
{"ids": "11846", "code": ["protected void index Points ( Input Stream is , long ptr , Output Stream os ) {", "boolean more Records = true ;", "byte r Hdr [ ] = new byte [ SHAPE RECORD HEADER LENGTH ] ;", "byte out Buf [ ] = new byte [ SPATIAL INDEX RECORD LENGTH ] ;", "int result ;", "int n Records = NUM_ ;", "int rec Length Words , rec Length Bytes ;", "long rec Offset ;", "int shape Type ;", "int rec Buf Size = NUM_ ;", "byte rec Buf [ ] = new byte [ rec Buf Size ] ;", "double x = NUM_ ;", "double y = NUM_ ;", "try {", "while ( more Records ) {", "result = is . read ( r Hdr , NUM_ , SHAPE RECORD HEADER LENGTH ) ;", "if ( result < NUM_ ) {", "more Records = false ;", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + n Records + STR_ ) ;", "logger . fine ( STR_ + rec Buf Size ) ; } }", "else {", "n Records ++ ;", "rec Offset = ptr ;", "read BE Int ( r Hdr , NUM_ ) ;", "rec Length Words = read BE Int ( r Hdr , NUM_ ) ;", "rec Length Bytes = rec Length Words * NUM_ ;", "if ( rec Length Bytes > rec Buf Size ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + rec Length Bytes ) ; }", "rec Buf Size = rec Length Bytes ;", "rec Buf = new byte [ rec Buf Size ] ; }", "result = is . read ( rec Buf , NUM_ , rec Length Bytes ) ;", "shape Type = read LE Int ( rec Buf , NUM_ ) ;", "if ( shape Type != SHAPE TYPE NULL ) {", "x = read LE Double ( rec Buf , NUM_ ) ;", "y = read LE Double ( rec Buf , NUM_ ) ; }", "ptr += rec Length Bytes + NUM_ ;", "write BE Int ( out Buf , NUM_ , ( int ) ( rec Offset / NUM_ ) ) ;", "write BE Int ( out Buf , NUM_ , rec Length Words ) ;", "write LE Double ( out Buf , NUM_ , x ) ;", "write LE Double ( out Buf , NUM_ , y ) ;", "write LE Double ( out Buf , NUM_ , x ) ;", "write LE Double ( out Buf , NUM_ , y ) ;", "os . write ( out Buf , NUM_ , SPATIAL INDEX RECORD LENGTH ) ; } } }", "catch ( java . io . IO Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "try {", "is . close ( ) ; }", "catch ( java . io . IO Exception e ) { } } }"]}
{"ids": "33765", "code": ["public static String unsigned To String ( final int value ) {", "if ( value >= NUM_ ) {", "return Integer . to String ( value ) ; }", "else {", "return Long . to String ( value & NUM_ ) ; } }"]}
{"ids": "23668", "code": ["public static List < File > find All ( File base File , String regex ) {", "Array List < File > found = new Array List < File > ( ) ;", "find All ( base File , regex , found ) ;", "return found ; }"]}
{"ids": "53015", "code": ["public void append CSS Definition ( String Builder buf ) {", "buf . append ( STR_ ) ;", "buf . append ( name ) ;", "buf . append ( STR_ ) ;", "for ( Pair < String , String > pair : statements ) {", "buf . append ( pair . get First ( ) ) ;", "buf . append ( STR_ ) ;", "buf . append ( pair . get Second ( ) ) ;", "buf . append ( STR_ ) ; }", "buf . append ( STR_ ) ; }"]}
{"ids": "30428", "code": ["protected Object clone Object ( Object obj ) {", "if ( obj == null ) {", "return null ; }", "if ( obj instanceof String || obj instanceof Boolean || obj instanceof Byte || obj instanceof Short || obj instanceof Character || obj instanceof Integer || obj instanceof Long || obj instanceof Float || obj instanceof Double ) {", "return obj ; }", "if ( obj instanceof byte [ ] ) {", "byte [ ] body = ( byte [ ] ) obj ;", "byte [ ] data = new byte [ body . length ] ;", "System . arraycopy ( body , NUM_ , data , NUM_ , body . length ) ;", "return data ; }", "return Serialization Helper . deep Clone ( obj ) ; }"]}
{"ids": "33787", "code": ["private void assert Write Varint ( byte [ ] data , long value ) throws Exception {", "if ( ( value > > > NUM_ ) == NUM_ ) {", "Byte Array Output Stream raw Output = new Byte Array Output Stream ( ) ;", "Coded Output Stream output = Coded Output Stream . new Instance ( raw Output ) ;", "output . write Raw Varint 32 ( ( int ) value ) ;", "output . flush ( ) ;", "assert Equal Bytes ( data , raw Output . to Byte Array ( ) ) ;", "assert Equals ( data . length , Coded Output Stream . compute Raw Varint 32 Size ( ( int ) value ) ) ; } {", "Byte Array Output Stream raw Output = new Byte Array Output Stream ( ) ;", "Coded Output Stream output = Coded Output Stream . new Instance ( raw Output ) ;", "output . write Raw Varint 64 ( value ) ;", "output . flush ( ) ;", "assert Equal Bytes ( data , raw Output . to Byte Array ( ) ) ;", "assert Equals ( data . length , Coded Output Stream . compute Raw Varint 64 Size ( value ) ) ; }", "for ( int block Size = NUM_ ; block Size <= NUM_ ; block Size *= NUM_ ) {", "if ( ( value > > > NUM_ ) == NUM_ ) {", "Byte Array Output Stream raw Output = new Byte Array Output Stream ( ) ;", "Coded Output Stream output = Coded Output Stream . new Instance ( raw Output , block Size ) ;", "output . write Raw Varint 32 ( ( int ) value ) ;", "output . flush ( ) ;", "assert Equal Bytes ( data , raw Output . to Byte Array ( ) ) ; } {", "Byte Array Output Stream raw Output = new Byte Array Output Stream ( ) ;", "Coded Output Stream output = Coded Output Stream . new Instance ( raw Output , block Size ) ;", "output . write Raw Varint 64 ( value ) ;", "output . flush ( ) ;", "assert Equal Bytes ( data , raw Output . to Byte Array ( ) ) ; } } }"]}
{"ids": "64280", "code": ["public void attach ( Action Observer observer ) {", "observer . make One Time Use ( ) ;", "lock . lock ( ) ;", "try {", "once Used Observers . add ( observer ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "85238", "code": ["private void sign Certificate Chain ( ) {", "List < Certificate > cc = new Array List < > ( ) ;", "cc . add ( sign Cert ) ;", "List < Certificate > oc = new Array List < > ( certs ) ;", "for ( int k = NUM_ ; k < oc . size ( ) ; ++ k ) {", "if ( sign Cert . equals ( oc . get ( k ) ) ) {", "oc . remove ( k ) ;", "-- k ; } }", "boolean found = true ;", "while ( found ) {", "X 509 Certificate v = ( X 509 Certificate ) cc . get ( cc . size ( ) - NUM_ ) ;", "found = false ;", "for ( int k = NUM_ ; k < oc . size ( ) ; ++ k ) {", "X 509 Certificate issuer = ( X 509 Certificate ) oc . get ( k ) ;", "try {", "v . verify ( issuer . get Public Key ( ) , provider ) ;", "found = true ;", "cc . add ( oc . get ( k ) ) ;", "oc . remove ( k ) ;", "break ; }", "catch ( Exception ignored ) { } } }", "sign Certs = cc ; }"]}
{"ids": "57239", "code": ["public static String meter To String ( OF Instruction Meter inst , Logger log ) {", "return Long . to String ( inst . get Meter Id ( ) ) ; }"]}
{"ids": "22736", "code": ["public String charset ( ) {", "return parameter ( HEADER CONTENT TYPE , PARAM CHARSET ) ; }"]}
{"ids": "46674", "code": ["public Dimension minimum Layout Size ( Container parent ) {", "Dimension rd , mbd ;", "Insets i = get Insets ( ) ;", "if ( content Pane != null ) {", "rd = content Pane . get Minimum Size ( ) ; }", "else {", "rd = parent . get Size ( ) ; }", "if ( menu Bar != null && menu Bar . is Visible ( ) ) {", "mbd = menu Bar . get Minimum Size ( ) ; }", "else {", "mbd = new Dimension ( NUM_ , NUM_ ) ; }", "return new Dimension ( Math . max ( rd . width , mbd . width ) + i . left + i . right , rd . height + mbd . height + i . top + i . bottom ) ; }"]}
{"ids": "82335", "code": ["@ Override public void add ( int location , E object ) {", "insert Element At ( object , location ) ; }"]}
{"ids": "76279", "code": ["public static boolean check If Can Use ( String class Name ) {", "if ( Mock List . should Be Mocked ( class Name ) ) {", "return false ; }", "for ( String s : class Exceptions ) {", "if ( class Name . starts With ( s ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "17503", "code": ["private static void apply Overrides ( ) {", "Input Stream stream = get Content Types Properties Stream ( ) ;", "if ( stream == null ) {", "return ; }", "try {", "try {", "Properties overrides = new Properties ( ) ;", "overrides . load ( stream ) ;", "for ( Map . Entry < Object , Object > entry : overrides . entry Set ( ) ) {", "String extension = ( String ) entry . get Key ( ) ;", "String mime Type = ( String ) entry . get Value ( ) ;", "add ( mime Type , extension ) ; } }", "finally {", "stream . close ( ) ; } }", "catch ( IO Exception ignored ) { } }"]}
{"ids": "50514", "code": ["@ Override public void run ( ) {", "am I Active = true ;", "String input Header = null ;", "String output Header = null ;", "int row , col ;", "float progress = NUM_ ;", "double max Patch Value = NUM_ ;", "int x , y ;", "boolean bln Found Neighbour ;", "boolean bln Include Diag Neighbour = false ;", "boolean bln Treat Zeros As Background = false ;", "int i ;", "if ( args . length <= NUM_ ) {", "show Feedback ( STR_ ) ;", "return ; }", "for ( i = NUM_ ; i < args . length ; i ++ ) {", "if ( i == NUM_ ) {", "input Header = args [ i ] ; }", "else if ( i == NUM_ ) {", "output Header = args [ i ] ; }", "else if ( i == NUM_ ) {", "bln Include Diag Neighbour = Boolean . parse Boolean ( args [ i ] ) ;", "if ( ! bln Include Diag Neighbour ) {", "d X = new int [ ] { NUM_ , NUM_ , NUM_ , - NUM_ } ;", "d Y = new int [ ] { - NUM_ , NUM_ , NUM_ , NUM_ } ; } }", "else if ( i == NUM_ ) {", "bln Treat Zeros As Background = Boolean . parse Boolean ( args [ i ] ) ; } }", "if ( ( input Header == null ) || ( output Header == null ) ) {", "show Feedback ( STR_ ) ;", "return ; }", "try {", "num Scan Cells = d Y . length ;", "image = new Whitebox Raster ( input Header , STR_ ) ;", "int rows = image . get Number Rows ( ) ;", "int cols = image . get Number Columns ( ) ;", "no Data = image . get No Data Value ( ) ;", "double initial Value = - NUM_ ;", "output = new Whitebox Raster ( output Header , STR_ , input Header , Whitebox Raster . Data Type . FLOAT , initial Value ) ;", "output . set Data Scale ( Whitebox Raster . Data Scale . CATEGORICAL ) ;", "output . set Preferred Palette ( STR_ ) ;", "if ( bln Treat Zeros As Background ) {", "for ( row = NUM_ ; row < rows ; row ++ ) {", "for ( col = NUM_ ; col < cols ; col ++ ) {", "if ( image . get Value ( row , col ) == NUM_ ) {", "output . set Value ( row , col , NUM_ ) ; } }", "if ( cancel Op ) {", "cancel Operation ( ) ;", "return ; }", "progress = ( float ) ( NUM_ * row / ( rows - NUM_ ) ) ;", "update Progress ( ( int ) progress ) ; }", "if ( output . get Value ( NUM_ , NUM_ ) == - NUM_ ) {", "output . set Value ( NUM_ , NUM_ , NUM_ ) ; } }", "else {", "output . set Value ( NUM_ , NUM_ , NUM_ ) ; }", "double patch Value = NUM_ ;", "double neighbour Patch Value = NUM_ ;", "double new Patch Value = NUM_ ;", "double image Value = NUM_ ;", "int loop Num = NUM_ ;", "update Progress ( STR_ + loop Num + STR_ , NUM_ ) ;", "for ( row = NUM_ ; row < rows ; row ++ ) {", "for ( col = NUM_ ; col < cols ; col ++ ) {", "image Value = image . get Value ( row , col ) ;", "if ( image Value != no Data ) {", "patch Value = output . get Value ( row , col ) ;", "if ( patch Value == initial Value ) {", "bln Found Neighbour = false ;", "for ( i = NUM_ ; i < num Scan Cells ; i ++ ) {", "x = col + d X [ i ] ;", "y = row + d Y [ i ] ;", "neighbour Patch Value = output . get Value ( y , x ) ;", "if ( neighbour Patch Value != initial Value && image . get Value ( y , x ) == image Value ) {", "output . set Value ( row , col , neighbour Patch Value ) ;", "new Patch Value = neighbour Patch Value ;", "bln Found Neighbour = true ;", "break ; } }", "if ( ! bln Found Neighbour ) {", "max Patch Value ++ ;", "new Patch Value = max Patch Value ;", "output . set Value ( row , col , new Patch Value ) ; }", "depth = NUM_ ;", "Scan Connected Cells ( row , col , image Value , initial Value , new Patch Value ) ; } }", "else {", "output . set Value ( row , col , no Data ) ; } }", "if ( cancel Op ) {", "cancel Operation ( ) ;", "return ; }", "progress = ( float ) ( NUM_ * row / ( rows - NUM_ ) ) ;", "update Progress ( ( int ) progress ) ; }", "boolean something Done ;", "double [ ] reclass = new double [ ( int ) max Patch Value + NUM_ ] ;", "do {", "loop Num ++ ;", "update Progress ( STR_ + loop Num + STR_ , NUM_ ) ;", "something Done = false ;", "for ( row = NUM_ ; row < rows ; row ++ ) {", "for ( col = NUM_ ; col < cols ; col ++ ) {", "image Value = image . get Value ( row , col ) ;", "if ( image Value != no Data ) {", "patch Value = output . get Value ( row , col ) ;", "for ( i = NUM_ ; i < num Scan Cells ; i ++ ) {", "x = col + d X [ i ] ;", "y = row + d Y [ i ] ;", "neighbour Patch Value = output . get Value ( y , x ) ;", "if ( neighbour Patch Value != patch Value && image . get Value ( y , x ) == image Value ) {", "something Done = true ;", "if ( patch Value < neighbour Patch Value ) {", "reclass [ ( int ) neighbour Patch Value ] = - NUM_ ;", "output . set Value ( y , x , patch Value ) ;", "Scan Connected Cells ( y , x , image Value , neighbour Patch Value , patch Value ) ; }", "else {", "reclass [ ( int ) patch Value ] = - NUM_ ;", "output . set Value ( row , col , neighbour Patch Value ) ;", "Scan Connected Cells ( row , col , image Value , patch Value , neighbour Patch Value ) ;", "patch Value = neighbour Patch Value ; } } } } }", "if ( cancel Op ) {", "cancel Operation ( ) ;", "return ; }", "progress = ( float ) ( NUM_ * row / ( rows - NUM_ ) ) ;", "update Progress ( ( int ) progress ) ; } }", "while ( something Done ) ;", "i = NUM_ ;", "for ( int a = NUM_ ; a < max Patch Value + NUM_ ; a ++ ) {", "if ( reclass [ a ] != - NUM_ ) {", "reclass [ a ] = i ;", "i ++ ; } }", "loop Num ++ ;", "update Progress ( STR_ + loop Num + STR_ , NUM_ ) ;", "for ( row = NUM_ ; row < rows ; row ++ ) {", "for ( col = NUM_ ; col < cols ; col ++ ) {", "patch Value = output . get Value ( row , col ) ;", "if ( patch Value != no Data ) {", "output . set Value ( row , col , reclass [ ( int ) patch Value ] ) ; } }", "if ( cancel Op ) {", "cancel Operation ( ) ;", "return ; }", "progress = ( float ) ( NUM_ * row / ( rows - NUM_ ) ) ;", "update Progress ( ( int ) progress ) ; }", "output . add Metadata Entry ( STR_ + get Descriptive Name ( ) + STR_ ) ;", "output . add Metadata Entry ( STR_ + new Date ( ) ) ;", "image . close ( ) ;", "output . close ( ) ;", "return Data ( output Header ) ; }", "catch ( Out Of Memory Error oe ) {", "my Host . show Feedback ( STR_ ) ; }", "catch ( Exception e ) {", "my Host . show Feedback ( STR_ ) ;", "my Host . log Exception ( STR_ + get Descriptive Name ( ) , e ) ; }", "finally {", "update Progress ( STR_ , NUM_ ) ;", "am I Active = false ;", "my Host . plugin Complete ( ) ; } }"]}
{"ids": "81983", "code": ["public static int read All ( Input Stream i , byte b [ ] ) throws IO Exception {", "int len = b . length ;", "int n = NUM_ ;", "while ( n < len ) {", "int count = i . read ( b , n , len - n ) ;", "if ( count < NUM_ ) {", "return n ; }", "n += count ; }", "return n ; }"]}
{"ids": "38317", "code": ["public void switch To Simple ( Experiment exp ) {", "if ( exp == null ) {", "exp = m advanced Panel . get Experiment ( ) ; }", "if ( exp != null && ! m simple Panel . set Experiment ( exp ) ) {", "m Advanced Setup R But . set Selected ( true ) ;", "switch To Advanced ( exp ) ; }", "else {", "remove ( m advanced Panel ) ;", "m advanced Panel . remove Notes Frame ( ) ;", "add ( m simple Panel , Border Layout . CENTER ) ;", "validate ( ) ;", "repaint ( ) ; } }"]}
{"ids": "29924", "code": ["public static Cache Span create Cache Entry ( File file ) {", "Matcher matcher = CACHE FILE PATTERN V 2 . matcher ( file . get Name ( ) ) ;", "if ( ! matcher . matches ( ) ) {", "return null ; }", "String key = Util . unescape File Name ( matcher . group ( NUM_ ) ) ;", "return key == null ? null : create Cache Entry ( key , Long . parse Long ( matcher . group ( NUM_ ) ) , Long . parse Long ( matcher . group ( NUM_ ) ) , file ) ; }"]}
{"ids": "46713", "code": ["public boolean is Component Part Of Current Menu ( Component c ) {", "if ( selection . size ( ) > NUM_ ) {", "Menu Element me = selection . element At ( NUM_ ) ;", "return is Component Part Of Current Menu ( me , c ) ; }", "else return false ; }"]}
{"ids": "63789", "code": ["public static int hsba ( float h , float s , float b , float a ) {", "return set Alpha ( Color . HS Bto RGB ( h , s , b ) , ( int ) ( a * NUM_ + NUM_ ) & NUM_ ) ; }"]}
{"ids": "47919", "code": ["Lambda Form Buffer replace Functions ( Named Function [ ] old Fns , Named Function [ ] new Fns , Object ... for Arguments ) {", "assert ( in Trans ( ) ) ;", "if ( old Fns . length == NUM_ ) return this ;", "for ( int i = arity ; i < length ; i ++ ) {", "Name n = names [ i ] ;", "int nfi = index Of ( n . function , old Fns ) ;", "if ( nfi >= NUM_ && Arrays . equals ( n . arguments , for Arguments ) ) {", "change Name ( i , new Name ( new Fns [ nfi ] , n . arguments ) ) ; } }", "return this ; }"]}
{"ids": "3798", "code": ["@ Override public Client Socket open If Live ( ) {", "if ( state . is Closed ( ) ) {", "return null ; }", "Client Socket stream = open Recycle ( ) ;", "if ( stream != null ) return stream ;", "long now = Current Time . current Time ( ) ;", "if ( is Failed ( now ) ) return null ;", "else if ( state == State . FAIL && starting Count . get ( ) > NUM_ ) {", "return null ; }", "return connect ( ) ; }"]}
{"ids": "40583", "code": ["public void commit ( ) {", "info ( STR_ + solr Url + STR_ ) ;", "do Get ( append Param ( solr Url . to String ( ) , STR_ ) ) ; }"]}
{"ids": "2279", "code": ["protected void wait For Thread To Enter Wait State ( Thread thread , long timeout Millis ) {", "long start Time = NUM_ ;", "for ( ; ; ) {", "Thread . State s = thread . get State ( ) ;", "if ( s == Thread . State . BLOCKED || s == Thread . State . WAITING || s == Thread . State . TIMED WAITING ) return ;", "else if ( s == Thread . State . TERMINATED ) fail ( STR_ ) ;", "else if ( start Time == NUM_ ) start Time = System . nano Time ( ) ;", "else if ( millis Elapsed Since ( start Time ) > timeout Millis ) {", "thread Assert True ( thread . is Alive ( ) ) ;", "return ; }", "Thread . yield ( ) ; } }"]}
{"ids": "77856", "code": ["public void force Rewrite Exif ( String filename , Collection < Exif Tag > tags ) throws File Not Found Exception , IO Exception {", "if ( ! rewrite Exif ( filename , tags ) ) {", "Exif Data temp Data = m Data ;", "m Data = new Exif Data ( DEFAULT BYTE ORDER ) ;", "File Input Stream is = null ;", "Byte Array Output Stream bytes = null ;", "try {", "is = new File Input Stream ( filename ) ;", "bytes = new Byte Array Output Stream ( ) ;", "do Exif Stream IO ( is , bytes ) ;", "byte [ ] image Bytes = bytes . to Byte Array ( ) ;", "read Exif ( image Bytes ) ;", "set Tags ( tags ) ;", "write Exif ( image Bytes , filename ) ; }", "catch ( IO Exception e ) {", "close Silently ( is ) ;", "throw e ; }", "finally {", "is . close ( ) ;", "m Data = temp Data ; } } }"]}
{"ids": "69941", "code": ["public static Lat Lng translate Point ( Lat Lng point , double distance , double bearing ) {", "distance = distance / NUM_ ;", "double lat = Math . to Radians ( point . latitude ) ;", "double lng = Math . to Radians ( point . longitude ) ;", "bearing = Math . to Radians ( bearing ) ;", "double Lat 2 = Math . asin ( ( Math . sin ( lat ) * Math . cos ( distance / EARTH ) ) + ( Math . cos ( lat ) * Math . sin ( distance / EARTH ) * Math . cos ( bearing ) ) ) ;", "double Long 2 = lng + Math . atan 2 ( Math . sin ( bearing ) * Math . sin ( distance / EARTH ) * Math . cos ( lat ) , Math . cos ( distance / EARTH ) - ( Math . sin ( lat ) * Math . sin ( Lat 2 ) ) ) ;", "Lat 2 = Math . to Degrees ( Lat 2 ) ;", "Long 2 = Math . to Degrees ( Long 2 ) ;", "return new Lat Lng ( Lat 2 , Long 2 ) ; }"]}
{"ids": "65649", "code": ["public boolean init ( ) {", "log . config ( STR_ ) ;", "M Client client = M Client . get ( Env . get Ctx ( ) ) ;", "String ASP Filter = STR_ ;", "if ( client . is Use ASP ( ) ) ASP Filter = STR_ + STR_ + STR_ + STR_ + STR_ + client . get AD Client ID ( ) + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + client . get AD Client ID ( ) + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + client . get AD Client ID ( ) + STR_ + STR_ + STR_ + STR_ + STR_ ;", "String sql = null ;", "if ( Env . is Base Language ( Env . get Ctx ( ) , STR_ ) ) sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + ASP Filter + STR_ ;", "else sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + Env . get AD Language ( Env . get Ctx ( ) ) + STR_ + STR_ + ASP Filter + STR_ ;", "boolean has Fields = false ;", "Rows rows = new Rows ( ) ;", "try {", "Prepared Statement pstmt = DB . prepare Statement ( sql , null ) ;", "pstmt . set Int ( NUM_ , m process Info . get AD Process ID ( ) ) ;", "Result Set rs = pstmt . execute Query ( ) ;", "int field = NUM_ ;", "Row row = null ;", "while ( rs . next ( ) ) {", "has Fields = true ;", "field ++ ;", "if ( field % NUM_ == NUM_ && mode == BROWSER MODE ) {", "row = create Field ( rs , rows , row ) ; }", "else {", "row = create Field ( rs , rows , null ) ; } }", "rs . close ( ) ;", "pstmt . close ( ) ; }", "catch ( SQL Exception e ) {", "log . log ( Level . SEVERE , sql , e ) ; }", "if ( m m Fields . size ( ) != m m Fields 2 . size ( ) || m m Fields . size ( ) != m w Editors . size ( ) || m m Fields 2 . size ( ) != m w Editors 2 . size ( ) ) log . log ( Level . SEVERE , STR_ ) ;", "if ( has Fields ) {", "center Panel . append Child ( rows ) ;", "dynamic Display ( ) ; }", "else dispose ( ) ;", "return has Fields ; }"]}
{"ids": "3074", "code": ["public static String detect Properties Path ( ) {", "String override = System . get Property ( STR_ ) ;", "if ( override != null ) {", "return override ; }", "String jar Path = detect Jar Path ( ) ;", "String prop File = Constants . PROPS FILE + STR_ ;", "return fix Whitespaces ( get Parent Directory ( jar Path ) + File . separator + prop File ) ; }"]}
{"ids": "41188", "code": ["static int format Float ( final char [ ] out , float val , int digits ) {", "boolean negative = false ;", "if ( val == NUM_ ) {", "out [ NUM_ ] = STR_ ;", "return NUM_ ; }", "if ( val < NUM_ ) {", "negative = true ;", "val = - val ; }", "if ( digits >= POW 10 . length ) {", "digits = POW 10 . length - NUM_ ; }", "val *= POW 10 [ digits ] ;", "long lval = Math . round ( val ) ;", "int index = out . length - NUM_ ;", "int char Count = NUM_ ;", "while ( lval != NUM_ || char Count < ( digits + NUM_ ) ) {", "int digit = ( int ) ( lval % NUM_ ) ;", "lval = lval / NUM_ ;", "out [ index -- ] = ( char ) ( digit + STR_ ) ;", "char Count ++ ;", "if ( char Count == digits ) {", "out [ index -- ] = STR_ ;", "char Count ++ ; } }", "if ( negative ) {", "out [ index ] = STR_ ;", "char Count ++ ; }", "return char Count ; }"]}
{"ids": "71803", "code": ["public void resume ( ) {", "m Paused = false ;", "m Last Frame Time = System . current Time Millis ( ) ;", "invalidate ( ) ; }"]}
{"ids": "61933", "code": ["public Gaussian Density Function ( Double mean , Double variance ) {", "this . mean = new double [ ] { mean } ;", "this . variance = new double [ ] { variance } ;", "std Dev = new double [ ] { Math . sqrt ( variance ) } ;", "if ( variance < NUM_ ) {", "log . warning ( STR_ + variance ) ; } }"]}
{"ids": "46136", "code": ["int encrypt Final ( byte [ ] in , int in Ofs , int len , byte [ ] out , int out Ofs ) throws Illegal Block Size Exception , Short Buffer Exception {", "if ( out . length - out Ofs < ( len + tag Len Bytes ) ) {", "throw new Short Buffer Exception ( STR_ ) ; }", "process AAD ( ) ;", "if ( len > NUM_ ) {", "do Last Block ( in , in Ofs , len , out , out Ofs , true ) ; }", "byte [ ] length Block = get Length Block ( size Of AAD * NUM_ , processed * NUM_ ) ;", "ghash All To S . update ( length Block ) ;", "byte [ ] s = ghash All To S . digest ( ) ;", "byte [ ] s Out = new byte [ s . length ] ;", "GCTR gctr For S To Tag = new GCTR ( embedded Cipher , this . pre Counter Block ) ;", "gctr For S To Tag . do Final ( s , NUM_ , s . length , s Out , NUM_ ) ;", "System . arraycopy ( s Out , NUM_ , out , ( out Ofs + len ) , tag Len Bytes ) ;", "return ( len + tag Len Bytes ) ; }"]}
{"ids": "31232", "code": ["private float interpolate ( ) {", "long curr Time = System . current Time Millis ( ) ;", "float elapsed = ( curr Time - start Time ) / ZOOM TIME ;", "elapsed = Math . min ( NUM_ , elapsed ) ;", "return interpolator . get Interpolation ( elapsed ) ; }"]}
{"ids": "72292", "code": ["public static String component To Image Col Name ( String component ) {", "if ( component . equals ( Mixn Match Columns . KEY HOMESCREEN ) ) {", "return Themes Columns . HOMESCREEN URI ; }", "else if ( component . equals ( Mixn Match Columns . KEY LOCKSCREEN ) ) {", "return Themes Columns . LOCKSCREEN URI ; }", "else if ( component . equals ( Mixn Match Columns . KEY BOOT ANIM ) ) {", "return Themes Columns . BOOT ANIM URI ; }", "else if ( component . equals ( Mixn Match Columns . KEY FONT ) ) {", "return Themes Columns . FONT URI ; }", "else if ( component . equals ( Mixn Match Columns . KEY ICONS ) ) {", "return Themes Columns . ICON URI ; }", "else if ( component . equals ( Mixn Match Columns . KEY STATUS BAR ) ) {", "return Themes Columns . STATUSBAR URI ; }", "else if ( component . equals ( Mixn Match Columns . KEY NOTIFICATIONS ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else if ( component . equals ( Mixn Match Columns . KEY RINGTONE ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else if ( component . equals ( Mixn Match Columns . KEY OVERLAYS ) ) {", "return Themes Columns . OVERLAYS URI ; }", "else if ( component . equals ( Mixn Match Columns . KEY ALARM ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else if ( component . equals ( Mixn Match Columns . KEY NAVIGATION BAR ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else if ( component . equals ( Mixn Match Columns . KEY LIVE LOCK SCREEN ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return null ; }"]}
{"ids": "4110", "code": ["public boolean is Abstract ( ) {", "return Modifier . is Abstract ( method . get Modifiers ( ) ) ; }"]}
{"ids": "13772", "code": ["public void node Clicked ( Request Invocation Event event , int node ID ) {", "boolean forward To = false ;", "String str Node Id = Integer . to String ( node ID ) ;", "if ( str Node Id . length ( ) > NUM_ ) {", "String prefix = str Node Id . substring ( NUM_ , NUM_ ) ;", "if ( prefix . equals ( AM Admin Constants . TAB AGENT PREFIX ) ) {", "set Page Session Attribute ( get Tracking Tab ID Name ( ) , Integer . to String ( node ID ) ) ;", "AM View Config amconfig = AM View Config . get Instance ( ) ;", "List list = amconfig . get Supported Agent Types ( get Model ( ) ) ;", "str Node Id = str Node Id . substring ( NUM_ ) ;", "int idx = Integer . parse Int ( str Node Id ) ;", "if ( idx < list . size ( ) ) {", "set Page Session Attribute ( PG SESSION AGENT TYPE , ( String ) list . get ( idx ) ) ;", "AM Post View Bean vb = ( AM Post View Bean ) get View Bean ( AM Post View Bean . class ) ;", "pass Pg Session Map ( vb ) ;", "vb . set Target View Bean URL ( STR_ ) ;", "vb . forward To ( get Request Context ( ) ) ;", "forward To = true ; } } }", "if ( ! forward To ) {", "try {", "AM View Bean Base vb = get Tab Node Associated View Bean ( STR_ , node ID ) ;", "String tmp = ( String ) get Page Session Attribute ( AM Admin Constants . PREVIOUS REALM ) ;", "vb . set Page Session Attribute ( AM Admin Constants . PREVIOUS REALM , tmp ) ;", "tmp = ( String ) get Page Session Attribute ( AM Admin Constants . CURRENT REALM ) ;", "vb . set Page Session Attribute ( AM Admin Constants . CURRENT REALM , tmp ) ;", "tmp = ( String ) get Page Session Attribute ( AM Admin Constants . PREVIOUS TAB ID ) ;", "vb . set Page Session Attribute ( AM Admin Constants . PREVIOUS TAB ID , tmp ) ;", "unlock Page Trail For Swapping ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "debug . error ( STR_ , e ) ;", "forward To ( ) ; } } }"]}
{"ids": "56365", "code": ["private static void parse Copy Fields ( Parse Context context , Field Mapper field Mapper , List < String > copy To Fields ) throws IO Exception {", "if ( ! context . is Within Copy To ( ) && copy To Fields . is Empty ( ) == false ) {", "context = context . create Copy To Context ( ) ;", "for ( String field : copy To Fields ) {", "Parse Context . Document target Doc = null ;", "for ( Parse Context . Document doc = context . doc ( ) ; doc != null ; doc = doc . get Parent ( ) ) {", "if ( field . starts With ( doc . get Prefix ( ) ) ) {", "target Doc = doc ;", "break ; } }", "assert target Doc != null ;", "final Parse Context copy To Context ;", "if ( target Doc == context . doc ( ) ) {", "copy To Context = context ; }", "else {", "copy To Context = context . switch Doc ( target Doc ) ; }", "parse Copy ( field , copy To Context ) ; } } }"]}
{"ids": "8923", "code": ["protected File create Obb File ( String name , int raw Res Id ) {", "File out File = null ;", "try {", "final File files Dir = m Context . get Files Dir ( ) ;", "out File = new File ( files Dir , name ) ;", "copy Raw To File ( raw Res Id , out File ) ; }", "catch ( Not Found Exception e ) {", "if ( out File != null ) {", "out File . delete ( ) ; } }", "return out File ; }"]}
{"ids": "80394", "code": ["public Play Sound Entity ( String sound , int radius , int volume ) {", "this . sounds = sound . split ( STR_ ) ;", "this . radius = radius ;", "this . volume = volume ; }"]}
{"ids": "45934", "code": ["public Repository ( String domain ) {", "this ( domain , true ) ; }"]}
{"ids": "42687", "code": ["private void update View ( int view Position ) {", "notify Item Changed ( view Position ) ; }"]}
{"ids": "40495", "code": ["public static String optimize ( String ... args ) {", "return simple Tag ( STR_ , args ) ; }"]}
{"ids": "43930", "code": ["protected boolean is Valid Server ( final String server ) {", "boolean is Valid = check Server Prefixes ( server ) ;", "if ( is Valid ) {", "if ( server . starts With ( STR_ ) ) {", "is Valid = can Connect ( server ) ; }", "else if ( server . starts With ( STR_ ) ) {", "is Valid = is Directory ( server ) ; } }", "return is Valid ; }"]}
{"ids": "17688", "code": ["public Concurrent Hash Map ( Map < ? extends K , ? extends V > m ) {", "this ( Math . max ( ( int ) ( m . size ( ) / DEFAULT LOAD FACTOR ) + NUM_ , DEFAULT INITIAL CAPACITY ) , DEFAULT LOAD FACTOR , DEFAULT CONCURRENCY LEVEL ) ;", "put All ( m ) ; }"]}
{"ids": "34870", "code": ["public Map Maker expiration ( long duration , Time Unit unit ) {", "if ( expiration Nanos != NUM_ ) {", "throw new Illegal State Exception ( STR_ + expiration Nanos + STR_ ) ; }", "if ( duration <= NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + duration ) ; }", "this . expiration Nanos = unit . to Nanos ( duration ) ;", "use Custom Map = true ;", "return this ; }"]}
{"ids": "83158", "code": ["void init From Node ( final Node from Node , final double start Time , final Pseudo Remove Priority Queue < Node > pending Nodes ) {", "Dijkstra Node Data data = get Data ( from Node ) ;", "visit Node ( from Node , data , pending Nodes , start Time , NUM_ , null ) ; }"]}
{"ids": "55763", "code": ["public Collection < HTML Token > tokenize HTML ( ) {", "List < HTML Token > tokens = new Array List < HTML Token > ( ) ;", "String nested Tags = nested Tags Regex ( NUM_ ) ;", "Pattern p = Pattern . compile ( STR_ + STR_ + STR_ + STR_ + STR_ + nested Tags + STR_ , Pattern . CASE INSENSITIVE ) ;", "Matcher m = p . matcher ( text ) ;", "int last Pos = NUM_ ;", "while ( m . find ( ) ) {", "if ( last Pos < m . start ( ) ) {", "tokens . add ( HTML Token . text ( text . substring ( last Pos , m . start ( ) ) ) ) ; }", "tokens . add ( HTML Token . tag ( text . substring ( m . start ( ) , m . end ( ) ) ) ) ;", "last Pos = m . end ( ) ; }", "if ( last Pos < text . length ( ) ) {", "tokens . add ( HTML Token . text ( text . substring ( last Pos , text . length ( ) ) ) ) ; }", "return tokens ; }"]}
{"ids": "17965", "code": ["public int decrypt Block ( byte [ ] in , int in Off , byte [ ] out , int out Off ) throws Data Length Exception , Illegal State Exception {", "if ( ( in Off + block Size ) > in . length ) {", "throw new Data Length Exception ( STR_ ) ; }", "if ( ( out Off + block Size ) > out . length ) {", "throw new Data Length Exception ( STR_ ) ; }", "cipher . process Block ( cfb V , NUM_ , cfb Out V , NUM_ ) ;", "System . arraycopy ( cfb V , block Size , cfb V , NUM_ , cfb V . length - block Size ) ;", "System . arraycopy ( in , in Off , cfb V , cfb V . length - block Size , block Size ) ;", "for ( int i = NUM_ ; i < block Size ; i ++ ) {", "out [ out Off + i ] = ( byte ) ( cfb Out V [ i ] ^ in [ in Off + i ] ) ; }", "return block Size ; }"]}
{"ids": "61800", "code": ["private String compute Md 5 Hash ( String buffer ) {", "Message Digest md ;", "try {", "md = Message Digest . get Instance ( STR_ ) ;", "return bytes To Hex ( md . digest ( buffer . get Bytes ( STR_ ) ) ) ; }", "catch ( No Such Algorithm Exception ignore ) { }", "catch ( Unsupported Encoding Exception e ) { }", "return STR_ ; }"]}
{"ids": "68628", "code": ["public static void check Argument ( boolean expression , @ Nullable Object error Message ) {", "if ( ! expression ) {", "throw new Illegal Argument Exception ( String . value Of ( error Message ) ) ; } }"]}
{"ids": "32533", "code": ["public void run ( ) throws IO Exception , Interrupted Exception {", "for ( int i = NUM_ ; i < conn Cnt ; i ++ ) exec . submit ( new Client Thread ( ) ) ;", "Thread . sleep ( NUM_ * NUM_ * NUM_ ) ;", "exec . shutdown Now ( ) ; }"]}
{"ids": "30223", "code": ["public static String pluralize ( String word ) {", "if ( word == null ) {", "throw new Illegal Argument Exception ( ) ; }", "final String lower Case Word = word . to Lower Case ( ) ;", "if ( ends With Any ( lower Case Word , STR_ , STR_ , STR_ ) ) {", "return word + STR_ ; }", "if ( lower Case Word . ends With ( STR_ ) && ! lower Case Word . ends With ( STR_ ) || ends With Any ( lower Case Word , STR_ , STR_ , STR_ ) ) {", "return word . substring ( NUM_ , word . length ( ) - NUM_ ) + STR_ ; }", "else {", "return word + STR_ ; } }"]}
{"ids": "5604", "code": ["protected void on Network Type Change ( Network Info old Network , Network Info new Network ) throws Router Exception {", "log . info ( String . format ( STR_ , old Network == null ? STR_ : old Network . get Type Name ( ) , new Network == null ? STR_ : new Network . get Type Name ( ) ) ) ;", "if ( disable ( ) ) {", "log . info ( String . format ( STR_ , old Network == null ? STR_ : old Network . get Type Name ( ) ) ) ; }", "network Info = new Network ;", "if ( enable ( ) ) {", "log . info ( String . format ( STR_ , new Network == null ? STR_ : new Network . get Type Name ( ) ) ) ; } }"]}
{"ids": "77188", "code": ["private Linked Hash Map < Term , Integer > repeating Terms ( ) {", "Linked Hash Map < Term , Integer > tord = new Linked Hash Map < > ( ) ;", "Hash Map < Term , Integer > tcnt = new Hash Map < > ( ) ;", "for ( Phrase Positions pp : phrase Positions ) {", "for ( Term t : pp . terms ) {", "Integer cnt 0 = tcnt . get ( t ) ;", "Integer cnt = cnt 0 == null ? new Integer ( NUM_ ) : new Integer ( NUM_ + cnt 0 . int Value ( ) ) ;", "tcnt . put ( t , cnt ) ;", "if ( cnt == NUM_ ) {", "tord . put ( t , tord . size ( ) ) ; } } }", "return tord ; }"]}
{"ids": "25004", "code": ["public List < Inet Address > discover Hosts ( int udp Port , int timeout Millis ) {", "List < Inet Address > hosts = new Array List < Inet Address > ( ) ;", "Datagram Socket socket = null ;", "try {", "socket = new Datagram Socket ( ) ;", "broadcast ( udp Port , socket ) ;", "socket . set So Timeout ( timeout Millis ) ;", "while ( true ) {", "Datagram Packet packet = new Datagram Packet ( new byte [ NUM_ ] , NUM_ ) ;", "try {", "socket . receive ( packet ) ; }", "catch ( Socket Timeout Exception ex ) {", "if ( INFO ) info ( STR_ , STR_ ) ;", "return hosts ; }", "if ( INFO ) info ( STR_ , STR_ + packet . get Address ( ) ) ;", "hosts . add ( packet . get Address ( ) ) ; } }", "catch ( IO Exception ex ) {", "if ( ERROR ) error ( STR_ , STR_ , ex ) ;", "return hosts ; }", "finally {", "if ( socket != null ) socket . close ( ) ; } }"]}
{"ids": "39836", "code": ["protected void reload Cluster Configuration ( ) {", "synchronized ( this . cluster ) {", "load Cluster Configuration ( ) ; } }"]}
{"ids": "43083", "code": ["public double expected Utility ( Nondominated Population population ) {", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < weights . length ; i ++ ) {", "double max = Double . NEGATIVE INFINITY ;", "for ( Solution solution : population ) {", "max = Math . max ( max , utility Function . compute Utility ( solution , weights [ i ] ) ) ; }", "sum += max ; }", "return sum / weights . length ; }"]}
{"ids": "4805", "code": ["public void count ( Hash Map < String , Tree Map < String , Integer > > table , String suffix , String tag ) {", "Tree Map < String , Integer > counts = table . get ( suffix ) ;", "if ( counts == null ) {", "counts = new Tree Map < String , Integer > ( ) ;", "table . put ( suffix , counts ) ; }", "Integer count = counts . get ( tag ) ;", "if ( count == null ) count = NUM_ ;", "counts . put ( tag , count + NUM_ ) ; }"]}
{"ids": "82100", "code": ["public void add Input Mode ( String mode , String [ ] [ ] input Chars ) {", "modes Map . put ( mode , input Chars ) ; }"]}
{"ids": "26440", "code": ["public static java . util . Date to Date ( String month Str , String day Str , String year Str , String hour Str , String minute Str , String second Str ) {", "int month , day , year , hour , minute , second ;", "try {", "month = Integer . parse Int ( month Str ) ;", "day = Integer . parse Int ( day Str ) ;", "year = Integer . parse Int ( year Str ) ;", "hour = Integer . parse Int ( hour Str ) ;", "minute = Integer . parse Int ( minute Str ) ;", "second = Integer . parse Int ( second Str ) ; }", "catch ( Exception e ) {", "return null ; }", "return to Date ( month , day , year , hour , minute , second ) ; }"]}
{"ids": "11318", "code": ["public void property Change ( Property Change Event pce ) {", "if ( pce . get Property Name ( ) == OM Drawing Tool . Loaders Property ) {", "Object obj = pce . get New Value ( ) ;", "if ( obj instanceof Vector ) {", "Vector < Edit Tool Loader > loaders = ( Vector < Edit Tool Loader > ) obj ;", "set Loaders ( loaders . iterator ( ) ) ;", "reset GUI ( ) ; } } }"]}
{"ids": "41494", "code": ["public void remove App Offer ( Offer offer ) {", "int index To Remove = get Index ( offer ) ;", "if ( index To Remove != - NUM_ ) {", "app Offers . remove ( index To Remove ) ;", "notify Data Set Changed ( ) ; } }"]}
{"ids": "45867", "code": ["public Data transform ( Data data , XML Crypto Context xc ) throws Transform Exception {", "return spi . transform ( data , xc ) ; }"]}
{"ids": "25232", "code": ["public static int compare ( Comparable c 1 , Comparable c 2 , boolean null Greater ) {", "if ( c 1 == c 2 ) {", "return NUM_ ; }", "else if ( c 1 == null ) {", "return ( null Greater ? NUM_ : - NUM_ ) ; }", "else if ( c 2 == null ) {", "return ( null Greater ? - NUM_ : NUM_ ) ; }", "return c 1 . compare To ( c 2 ) ; }"]}
{"ids": "53174", "code": ["public static double quantile ( double val , double mu , double sigma , double xi ) {", "if ( val < NUM_ || val > NUM_ ) {", "return Double . Na N ; }", "if ( xi == NUM_ ) {", "return mu - sigma * Math . log ( NUM_ - val ) ; }", "return mu - sigma / xi * ( NUM_ - Math . pow ( NUM_ - val , - xi ) ) ; }"]}
{"ids": "15127", "code": ["Oath Device Settings create Device Profile ( int min Shared Secret Length ) {", "Reject . if False ( min Shared Secret Length >= NUM_ , STR_ ) ;", "int shared Secret Byte Length = Math . max ( MIN SHARED SECRET BYTE LENGTH , ( int ) Math . ceil ( min Shared Secret Length / NUM_ ) ) ;", "byte [ ] secret Bytes = new byte [ shared Secret Byte Length ] ;", "secure Random . next Bytes ( secret Bytes ) ;", "String shared Secret = Datatype Converter . print Hex Binary ( secret Bytes ) ;", "return new Oath Device Settings ( shared Secret , DEVICE NAME , INITIAL LAST LOGIN TIME , INITIAL COUNTER VALUE ) ; }"]}
{"ids": "52260", "code": ["public final void delete Selected Objects ( ) {", "Component [ ] components = get Components ( ) ;", "List < Display Node > graph Nodes = new Array List < > ( ) ;", "List < I Display Edge > graph Edges = new Array List < > ( ) ;", "for ( Component comp : components ) {", "if ( comp instanceof Display Node ) {", "if ( ! is Delete Variables Allowed ( ) ) {", "continue ; }", "Display Node node = ( Display Node ) comp ;", "if ( node . is Selected ( ) ) {", "graph Nodes . add ( node ) ; } }", "else if ( comp instanceof I Display Edge ) {", "I Display Edge edge = ( I Display Edge ) comp ;", "if ( edge . is Selected ( ) ) {", "graph Edges . add ( edge ) ; } } }", "for ( Display Node graph Node : graph Nodes ) {", "remove Node ( graph Node ) ; }", "for ( I Display Edge display Edge : graph Edges ) {", "try {", "remove Edge ( display Edge ) ;", "reset Edge Offsets ( display Edge ) ; }", "catch ( Exception e ) {", "if ( is Node Edge Errors Reported ( ) ) {", "J Option Pane . show Message Dialog ( J Option Utils . centering Comp ( ) , e . get Message ( ) ) ; } } } }"]}
{"ids": "9071", "code": ["protected final void init Statistics ( String who , String [ ] header Lines ) throws Ade Exception {", "set Stats File Path ( ) ;", "if ( stats File Path == null ) {", "throw new Ade Internal Exception ( STR_ ) ; }", "append Stat String ( SPACER ) ;", "append Stat String ( String . format ( STR_ , current Time Stamp ( ) , who ) ) ;", "append Stat String ( SPACER ) ;", "for ( int i = NUM_ ; i < header Lines . length ; i ++ ) {", "append Stat String ( header Lines [ i ] ) ; }", "append Stat String ( SPACER ) ; }"]}
{"ids": "79283", "code": ["public static Map < String , Object > day End Capacity Available ( Generic Value tech Data Calendar Week , int day End ) {", "Map < String , Object > result = Fast Map . new Instance ( ) ;", "int move Day = NUM_ ;", "Double capacity = null ;", "Time start Time = null ;", "while ( capacity == null || capacity . double Value ( ) == NUM_ ) {", "switch ( day End ) {", "case Calendar . MONDAY :", "capacity = tech Data Calendar Week . get Double ( STR_ ) ;", "start Time = tech Data Calendar Week . get Time ( STR_ ) ;", "break ;", "case Calendar . TUESDAY :", "capacity = tech Data Calendar Week . get Double ( STR_ ) ;", "start Time = tech Data Calendar Week . get Time ( STR_ ) ;", "break ;", "case Calendar . WEDNESDAY :", "capacity = tech Data Calendar Week . get Double ( STR_ ) ;", "start Time = tech Data Calendar Week . get Time ( STR_ ) ;", "break ;", "case Calendar . THURSDAY :", "capacity = tech Data Calendar Week . get Double ( STR_ ) ;", "start Time = tech Data Calendar Week . get Time ( STR_ ) ;", "break ;", "case Calendar . FRIDAY :", "capacity = tech Data Calendar Week . get Double ( STR_ ) ;", "start Time = tech Data Calendar Week . get Time ( STR_ ) ;", "break ;", "case Calendar . SATURDAY :", "capacity = tech Data Calendar Week . get Double ( STR_ ) ;", "start Time = tech Data Calendar Week . get Time ( STR_ ) ;", "break ;", "case Calendar . SUNDAY :", "capacity = tech Data Calendar Week . get Double ( STR_ ) ;", "start Time = tech Data Calendar Week . get Time ( STR_ ) ;", "break ; }", "if ( capacity == null || capacity . double Value ( ) == NUM_ ) {", "move Day -= NUM_ ;", "day End = ( day End == NUM_ ) ? NUM_ : day End - NUM_ ; } }", "result . put ( STR_ , capacity ) ;", "result . put ( STR_ , start Time ) ;", "result . put ( STR_ , Integer . value Of ( move Day ) ) ;", "return result ; }"]}
{"ids": "31002", "code": ["protected void add Class Path ( String classpath ) {", "if ( classpath == null ) return ;", "String sep = classpath . index Of ( STR_ ) == - NUM_ ? STR_ : STR_ ;", "String [ ] parse Cp = classpath . split ( sep ) ;", "for ( String cp Entry : parse Cp ) {", "add Entry ( cp Entry ) ; } }"]}
{"ids": "19485", "code": ["@ Inject Entry Uploader Impl ( Entry Inserter entry Inserter , Entry Provider entry Provider , Entry Updater entry Updater ) {", "this . entry Inserter = check Not Null ( entry Inserter ) ;", "this . entry Provider = check Not Null ( entry Provider ) ;", "this . entry Updater = check Not Null ( entry Updater ) ; }"]}
{"ids": "50213", "code": ["protected void add ( long bytes In , long bytes Out ) {", "total Bytes In . add And Get ( bytes In ) ;", "total Bytes Out . add And Get ( bytes Out ) ; }"]}
{"ids": "40626", "code": ["public static double vector Distance ( double [ ] vec 1 , double [ ] vec 2 , double power , double one Over Power ) {", "double result = NUM_ ;", "if ( power == NUM_ ) {", "for ( int i = NUM_ ; i < vec 1 . length ; i ++ ) {", "result += vec 1 [ i ] - vec 2 [ i ] == NUM_ ? NUM_ : NUM_ ; } }", "else if ( power == NUM_ ) {", "for ( int i = NUM_ ; i < vec 1 . length ; i ++ ) {", "result += Math . abs ( vec 1 [ i ] - vec 2 [ i ] ) ; } }", "else if ( power == NUM_ ) {", "result = Math . sqrt ( dist Squared Cartesian ( vec 1 , vec 2 ) ) ; }", "else if ( power == Integer . MAX VALUE || Double . is Infinite ( power ) ) {", "for ( int i = NUM_ ; i < vec 1 . length ; i ++ ) {", "result = Math . max ( result , Math . max ( vec 1 [ i ] , vec 2 [ i ] ) ) ; } }", "else {", "for ( int i = NUM_ ; i < vec 1 . length ; i ++ ) {", "result += Math . pow ( vec 1 [ i ] - vec 2 [ i ] , power ) ; }", "result = Math . pow ( result , one Over Power ) ; }", "return result ; }"]}
{"ids": "43291", "code": ["public static float [ ] random Vector ( int a Size , long seed ) {", "Random rand = new Random ( seed ) ;", "float [ ] unk = new float [ a Size ] ;", "for ( int i = NUM_ ; i < unk . length ; i ++ ) {", "unk [ i ] = ( rand . next Float ( ) - NUM_ ) / a Size ; }", "return unk ; }"]}
{"ids": "35006", "code": ["public boolean was Raw ( ) {", "return was Raw ; }"]}
{"ids": "71584", "code": ["public Table find Table ( String catalog Name , String schema Name , String table Name , boolean case Sensitive ) {", "String cache Key = catalog Name + STR_ + schema Name + STR_ + table Name + STR_ + case Sensitive ;", "Integer table Index = table Index Cache . get ( cache Key ) ;", "if ( table Index != null ) {", "if ( table Index < get Table Count ( ) ) {", "Table table = get Table ( table Index ) ;", "if ( does Match ( table , catalog Name , schema Name , table Name , case Sensitive ) ) {", "return table ; } } }", "Table [ ] tables = get Tables ( ) ;", "for ( int i = NUM_ ; i < tables . length ; i ++ ) {", "Table table = tables [ i ] ;", "if ( does Match ( table , catalog Name , schema Name , table Name , case Sensitive ) ) {", "table Index Cache . put ( cache Key , i ) ;", "return table ; } }", "return null ; }"]}
{"ids": "50762", "code": ["public void flush ( ) {", "write Data Block ( ) ; }"]}
{"ids": "10845", "code": ["protected CRFP Coverage Box [ ] vector To CRFP Coverage Boxes ( Vector vector ) {", "int size = vector . size ( ) ;", "CRFP Coverage Box [ ] rets = new CRFP Coverage Box [ size ] ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "Rpf Coverage Box box = ( Rpf Coverage Box ) vector . element At ( i ) ;", "if ( box != null ) {", "rets [ i ] = new CRFP Coverage Box ( ( float ) box . nw lat , ( float ) box . nw lon , ( float ) box . se lat , ( float ) box . se lon , box . subframe Lat Interval , box . subframe Lon Interval , box . chart Code , ( short ) box . zone , new XY Point ( ( short ) box . start Indexes . x , ( short ) box . start Indexes . y ) , new XY Point ( ( short ) box . end Indexes . x , ( short ) box . end Indexes . y ) , ( short ) box . toc Number , ( short ) box . entry Number , box . scale , box . percent Coverage ) ; } }", "return rets ; }"]}
{"ids": "70401", "code": ["public void notify Listeners Of Initialization ( ) {", "if ( initialized ) {", "for ( Action Listener l : listeners ) {", "l . action Performed ( new Action Event ( this , Action Event . ACTION PERFORMED , STR_ ) ) ; } } }"]}
{"ids": "33310", "code": ["public void check Password ( String password ) throws Bad Request Exception {", "if ( password == null ) {", "throw new Bad Request Exception ( STR_ ) ; }", "if ( password . length ( ) < NUM_ ) {", "throw new Bad Request Exception ( STR_ ) ; }", "int num Of Letters = NUM_ ;", "int num Of Digits = NUM_ ;", "for ( char password Char : password . to Char Array ( ) ) {", "if ( Character . is Digit ( password Char ) ) {", "num Of Digits ++ ; }", "else if ( Character . is Letter ( password Char ) ) {", "num Of Letters ++ ; } }", "if ( num Of Digits == NUM_ || num Of Letters == NUM_ ) {", "throw new Bad Request Exception ( STR_ ) ; } }"]}
{"ids": "47250", "code": ["final Node < K , V > find ( int h , Object k ) {", "if ( k != null ) {", "for ( Node < K , V > e = first ; e != null ; ) {", "int s ;", "K ek ;", "if ( ( ( s = lock State ) & ( WAITER | WRITER ) ) != NUM_ ) {", "if ( e . hash == h && ( ( ek = e . key ) == k || ( ek != null && k . equals ( ek ) ) ) ) return e ;", "e = e . next ; }", "else if ( U . compare And Swap Int ( this , LOCKSTATE , s , s + READER ) ) {", "Tree Node < K , V > r , p ;", "try {", "p = ( ( r = root ) == null ? null : r . find Tree Node ( h , k , null ) ) ; }", "finally {", "Thread w ;", "if ( U . get And Add Int ( this , LOCKSTATE , - READER ) == ( READER | WAITER ) && ( w = waiter ) != null ) Lock Support . unpark ( w ) ; }", "return p ; } } }", "return null ; }"]}
{"ids": "24239", "code": ["@ Suppress Warnings ( STR_ ) private void collect All Regions Details ( System Member Cache Jmx Impl cache , Region Sub Region Snapshot region Snapshot , Map < String , Map < String , ? > > regions Info , Map < String , Object Name > existing Region Mbeans ) throws Admin Exception , Operations Exception , M Bean Exception , Reflection Exception {", "String full Path = region Snapshot . get Full Path ( ) ;", "if ( ! full Path . equals ( PLACE HOLDER ROOT REGION ) ) {", "full Path = full Path . substring ( PLACE HOLDER ROOT REGION . length ( ) - NUM_ ) ;", "String name = region Snapshot . get Name ( ) ;", "Integer entry Count = Integer . value Of ( region Snapshot . get Entry Count ( ) ) ;", "Map < String , Object > details = new Tree Map < String , Object > ( ) ;", "details . put ( REGION NAME , name ) ;", "details . put ( REGION PATH , full Path ) ;", "details . put ( REGION ENTRYCOUNT , entry Count ) ;", "Object Name region Object Name = existing Region Mbeans . get ( full Path ) ;", "if ( region Object Name == null ) {", "region Object Name = cache . manage Region ( full Path ) ; }", "Object attribute = get Attribute ( region Object Name , STR_ , NOT AVAILABLE ) ;", "attribute = attribute != null ? attribute . to String ( ) : attribute ;", "details . put ( REGION SCOPE , attribute ) ;", "attribute = get Attribute ( region Object Name , STR_ , NOT AVAILABLE ) ;", "attribute = attribute != null ? attribute . to String ( ) : attribute ;", "details . put ( REGION DATAPOLICY , attribute ) ;", "Subscription Attributes interest Policy Attr = ( Subscription Attributes ) get Attribute ( region Object Name , STR_ , null ) ;", "String interest Policy Str = NOT AVAILABLE ;", "if ( interest Policy Attr != null ) {", "Interest Policy interest Policy = interest Policy Attr . get Interest Policy ( ) ;", "if ( interest Policy != null ) {", "interest Policy Str = interest Policy . to String ( ) ; } }", "details . put ( REGION INTERESTPOLICY , interest Policy Str ) ;", "attribute = get Attribute ( region Object Name , STR_ , NOT AVAILABLE ) ;", "attribute = attribute != null ? attribute . to String ( ) : attribute ;", "details . put ( REGION DISKATTRS , attribute ) ;", "regions Info . put ( full Path , details ) ; }", "Set sub Region Snapshots = region Snapshot . get Sub Region Snapshots ( ) ;", "for ( Iterator iterator = sub Region Snapshots . iterator ( ) ; iterator . has Next ( ) ; ) {", "Region Sub Region Snapshot sub Region = ( Region Sub Region Snapshot ) iterator . next ( ) ;", "collect All Regions Details ( cache , sub Region , regions Info , existing Region Mbeans ) ; } }"]}
{"ids": "69747", "code": ["public synchronized boolean remove Suspended Response ( Worker Category category , Response response ) {", "Deque < Response > deque = workers By Category . get ( category ) ;", "if ( deque == null ) {", "return false ; }", "if ( deque . remove ( response ) ) {", "n Waiting Consumers -= NUM_ ;", "LOG . debug ( STR_ ) ;", "return true ; }", "return false ; }"]}
{"ids": "42941", "code": ["public static Number sin ( Number a ) {", "return Math . sin ( a . double Value ( ) ) ; }"]}
{"ids": "33919", "code": ["private Typed Class Operation instantiate Operation Types ( Typed Class Operation operation ) {", "List < Type Variable > type Parameters = operation . get Type Parameters ( ) ;", "if ( type Parameters . is Empty ( ) ) {", "return operation ; }", "Substitution < Reference Type > substitution = select Substitution ( type Parameters ) ;", "if ( substitution == null ) {", "return null ; }", "return operation . apply ( substitution ) ; }"]}
{"ids": "56582", "code": ["default T fold ( final T identity , final Binary Operator < T > accumulator ) {", "final Optional < T > opt = to Optional ( ) ;", "if ( opt . is Present ( ) ) return accumulator . apply ( identity , get ( ) ) ;", "return identity ; }"]}
{"ids": "43647", "code": ["protected void load ( String filename , Properties p ) throws File Not Found Exception {", "File file = new File ( filename ) ;", "if ( ! file . exists ( ) ) throw new File Not Found Exception ( filename ) ;", "classifier = new CRF Classifier < Core Label > ( p ) ;", "try {", "classifier . load Classifier ( file , p ) ; }", "catch ( Class Cast Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( Class Not Found Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "10854", "code": ["public String resolve Font ( java . awt . Font font ) {", "String ret = STR_ ;", "ret = ret . concat ( STR_ + font . get Name ( ) ) ;", "if ( font . is Bold ( ) ) ret = ret . concat ( STR_ ) ;", "else ret = ret . concat ( STR_ ) ;", "if ( font . is Italic ( ) ) ret = ret . concat ( STR_ ) ;", "else ret = ret . concat ( STR_ ) ;", "ret = ret . concat ( STR_ ) ;", "ret = ret . concat ( STR_ + font . get Size ( ) ) ;", "ret = ret . concat ( STR_ ) ;", "ret = ret . concat ( STR_ ) ;", "ret = ret . concat ( STR_ ) ;", "ret = ret . concat ( STR_ ) ;", "ret = ret . concat ( STR_ ) ;", "ret = ret . concat ( STR_ ) ;", "return ret ; }"]}
{"ids": "37490", "code": ["public void add Line Content ( final Zy Line Content line ) {", "Preconditions . check Not Null ( line , STR_ ) ;", "m content . add ( line ) ; }"]}
{"ids": "26076", "code": ["public static boolean exclude By Package ( String pkg , List < String > exclude Pkg ) {", "for ( String ep : exclude Pkg ) {", "if ( pkg . matches ( ep ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "23899", "code": ["public Region Version Holder ( long ver ) {", "this . version = ver ; }"]}
{"ids": "63232", "code": ["public static void write Fully ( File Channel file , long pos , Byte Buffer src ) {", "try {", "int off = NUM_ ;", "do {", "int len = file . write ( src , pos + off ) ;", "off += len ; }", "while ( src . remaining ( ) > NUM_ ) ; }", "catch ( IO Exception e ) {", "throw new Illegal State Exception ( ERROR WRITING FAILED , STR_ , file , src . remaining ( ) , pos , e ) ; } }"]}
{"ids": "1299", "code": ["public void update Request Timeout ( Time Span span ) throws Security Exception , Application Exception {", "check Write Access ( ) ;", "boolean has Access = Config Web Util . has Access ( config , Security Manager . TYPE SETTING ) ;", "if ( ! has Access ) throw new Security Exception ( STR_ ) ;", "Element scope = get Root Element ( STR_ ) ;", "Element application = get Root Element ( STR_ ) ;", "if ( span != null ) {", "if ( span . get Millis ( ) <= NUM_ ) throw new Application Exception ( STR_ ) ;", "application . set Attribute ( STR_ , span . get Day ( ) + STR_ + span . get Hour ( ) + STR_ + span . get Minute ( ) + STR_ + span . get Second ( ) ) ; }", "else application . remove Attribute ( STR_ ) ;", "if ( scope . has Attribute ( STR_ ) ) scope . remove Attribute ( STR_ ) ; }"]}
{"ids": "22937", "code": ["@ Override protected boolean calc Problem ( ) {", "String type = get Tag With Key ( Tags . KEY TYPE ) ;", "if ( type == null || type . equals ( STR_ ) ) {", "return true ; }", "return super . calc Problem ( ) ; }"]}
{"ids": "85146", "code": ["public int read Byte ( ) throws IO Exception {", "++ length ;", "return in . read ( ) & NUM_ ; }"]}
{"ids": "67833", "code": ["public void update Shape Shadows To Current Time ( boolean update Minutes , boolean update Hours , int current Minute , int current Hour ) {", "if ( update Minutes ) {", "int tens = ( int ) Math . floor ( current Minute / NUM_ ) ;", "int units = ( int ) Math . floor ( current Minute % NUM_ ) ;", "if ( minutes Tens . get Current Value ( ) != tens ) {", "String mt = String . format ( STR_ , tens ) ;", "mt = mt . concat ( STR_ ) ;", "Log . d ( TAG , STR_ + mt ) ;", "minutes Tens . parse JSON ( mt ) ; }", "if ( minutes Units . get Current Value ( ) != units ) {", "String mu = String . format ( STR_ , units ) ;", "mu = mu . concat ( STR_ ) ;", "Log . d ( TAG , STR_ + mu ) ;", "minutes Units . parse JSON ( mu ) ; } }", "if ( update Hours ) {", "int tens = ( int ) Math . floor ( current Hour / NUM_ ) ;", "int units = ( int ) Math . floor ( current Hour % NUM_ ) ;", "if ( hours Tens . get Current Value ( ) != tens ) {", "String ht = String . format ( STR_ , tens ) ;", "ht = ht . concat ( STR_ ) ;", "Log . d ( TAG , STR_ + ht ) ;", "hours Tens . parse JSON ( ht ) ; }", "if ( hours Units . get Current Value ( ) != units ) {", "String hu = String . format ( STR_ , units ) ;", "hu = hu . concat ( STR_ ) ;", "Log . d ( TAG , STR_ + hu ) ;", "hours Units . parse JSON ( hu ) ; } } }"]}
{"ids": "4267", "code": ["public Set < Raw Protein < Super Family Hmmer 3 Raw Match > > parse ( Input Stream is ) throws IO Exception {", "Map < String , Raw Protein < Super Family Hmmer 3 Raw Match > > data = new Hash Map < String , Raw Protein < Super Family Hmmer 3 Raw Match > > ( ) ;", "Buffered Reader reader = null ;", "try {", "reader = new Buffered Reader ( new Input Stream Reader ( is ) ) ;", "String line ;", "while ( ( line = reader . read Line ( ) ) != null ) {", "Set < Super Family Hmmer 3 Raw Match > raw Matches = parse Line ( line ) ;", "Super Family Hmmer 3 Raw Match raw Match ;", "for ( Super Family Hmmer 3 Raw Match raw Matche : raw Matches ) {", "raw Match = raw Matche ;", "String sequence Id = raw Match . get Sequence Identifier ( ) ;", "if ( data . contains Key ( sequence Id ) ) {", "Raw Protein < Super Family Hmmer 3 Raw Match > raw Protein = data . get ( sequence Id ) ;", "raw Protein . add Match ( raw Match ) ; }", "else {", "Raw Protein < Super Family Hmmer 3 Raw Match > raw Protein = new Raw Protein < Super Family Hmmer 3 Raw Match > ( sequence Id ) ;", "raw Protein . add Match ( raw Match ) ;", "data . put ( sequence Id , raw Protein ) ; } } } }", "finally {", "if ( reader != null ) {", "reader . close ( ) ; } }", "return new Hash Set < Raw Protein < Super Family Hmmer 3 Raw Match > > ( data . values ( ) ) ; }"]}
{"ids": "61332", "code": ["public Union Path Iterator ( Compiler compiler , int op Pos ) throws javax . xml . transform . Transformer Exception {", "super ( ) ;", "op Pos = Op Map . get First Child Pos ( op Pos ) ;", "load Location Paths ( compiler , op Pos , NUM_ ) ; }"]}
{"ids": "39133", "code": ["public String relation Name ( ) {", "return m Relation Name ; }"]}
{"ids": "22330", "code": ["private void write Attribute ( java . lang . String namespace , java . lang . String att Name , java . lang . String att Value , javax . xml . stream . XML Stream Writer xml Writer ) throws javax . xml . stream . XML Stream Exception {", "if ( namespace . equals ( STR_ ) ) {", "xml Writer . write Attribute ( att Name , att Value ) ; }", "else {", "register Prefix ( xml Writer , namespace ) ;", "xml Writer . write Attribute ( namespace , att Name , att Value ) ; } }"]}
{"ids": "72248", "code": ["@ Request Mapping ( value = STR_ , method = Request Method . POST , produces = Media Type . TEXT PLAIN VALUE ) @ Timed public Response Entity < ? > change Password ( @ Request Body String password ) {", "if ( ! check Password Length ( password ) ) {", "return new Response Entity < > ( STR_ , Http Status . BAD REQUEST ) ; }", "user Service . change Password ( password ) ;", "return new Response Entity < > ( Http Status . OK ) ; }"]}
{"ids": "66276", "code": ["public static int size ( String str ) {", "if ( str == null ) return NUM_ ;", "int length = str . length ( ) ;", "int size = length ;", "try {", "size = str . get Bytes ( STR_ ) . length ; }", "catch ( Unsupported Encoding Exception e ) {", "log . log ( Level . SEVERE , str , e ) ; }", "return size ; }"]}
{"ids": "48609", "code": ["protected void synch With Target ( ) throws Monitor Exception {", "long time Limit = System . current Time Millis ( ) + sync Wait Ms ;", "log ( STR_ + lvmid + STR_ ) ;", "while ( ! prologue . is Accessible ( ) ) {", "log ( STR_ ) ;", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) { }", "if ( System . current Time Millis ( ) > time Limit ) {", "logln ( STR_ + lvmid ) ;", "throw new Monitor Exception ( STR_ ) ; } }", "logln ( STR_ + lvmid ) ; }"]}
{"ids": "85296", "code": ["public static Char Sequence time ( Context context , Easy Cursor c ) {", "long now = System . current Time Millis ( ) ;", "long when = c . get Long ( Reviews . WRITTEN ON ) ;", "return now - when > MINUTE IN MILLIS ? Date Utils . get Relative Time Span String ( when , now , NUM_ , FORMAT ABBREV ALL ) : context . get String ( R . string . recent time ) ; }"]}
{"ids": "59852", "code": ["private double screen To Normalized ( float screen Coord ) {", "int width = get Width ( ) ;", "if ( width <= NUM_ * padding ) {", "return NUM_ ; }", "else {", "double result = ( screen Coord - padding ) / ( width - NUM_ * padding ) ;", "return Math . min ( NUM_ , Math . max ( NUM_ , result ) ) ; } }"]}
{"ids": "26023", "code": ["public long round Trip Time ( ) throws Interrupted Exception {", "latch . await ( ) ;", "return received - sent ; }"]}
{"ids": "44961", "code": ["static private String user Id From Range ( String [ ] values , boolean include ) {", "int min Id = Integer . parse Int ( values [ NUM_ ] ) ;", "int max Id = Integer . parse Int ( values [ NUM_ ] ) ;", "String exclusions = values . length > NUM_ ? values [ NUM_ ] : null ;", "Stack < Integer > stack = get Stack ( min Id , max Id , exclusions , include ) ;", "if ( stack . size ( ) > NUM_ ) {", "return Integer . to String ( stack . pop ( ) ) ; }", "throw new Illegal Argument Exception ( STR_ ) ; }"]}
{"ids": "10722", "code": ["public void actualiza Campo ( int tipo Ficha , Valor Campo Generico VO campo ) {", "Valor Campo Generico VO campo Anterior = retrieve ( tipo Ficha , campo . get Tipo ( ) , campo . get Id Objeto ( ) , campo . get Id Campo ( ) , campo . get Orden ( ) , campo . get Tipo Elemento ( ) ) ;", "if ( campo Anterior == null ) insert ( tipo Ficha , campo ) ;", "else update ( tipo Ficha , campo , campo Anterior . get Valor Info ( ) ) ; }"]}
{"ids": "60528", "code": ["public static int length ( Reg Exp re ) {", "Reg Exp 2 r ;", "switch ( re . type ) {", "case sym . BAR : {", "r = ( Reg Exp 2 ) re ;", "int l 1 = length ( r . r 1 ) ;", "if ( l 1 < NUM_ ) return - NUM_ ;", "int l 2 = length ( r . r 2 ) ;", "if ( l 1 == l 2 ) return l 1 ;", "else return - NUM_ ; }", "case sym . CONCAT : {", "r = ( Reg Exp 2 ) re ;", "int l 1 = length ( r . r 1 ) ;", "if ( l 1 < NUM_ ) return - NUM_ ;", "int l 2 = length ( r . r 2 ) ;", "if ( l 2 < NUM_ ) return - NUM_ ;", "return l 1 + l 2 ; }", "case sym . STAR :", "case sym . PLUS :", "case sym . QUESTION :", "return - NUM_ ;", "case sym . CCLASS :", "case sym . CCLASSNOT :", "case sym . CHAR :", "case sym . CHAR I :", "return NUM_ ;", "case sym . STRING :", "case sym . STRING I : {", "String content = ( String ) ( ( Reg Exp 1 ) re ) . content ;", "return content . length ( ) ; }", "case sym . TILDE :", "case sym . BANG :", "return - NUM_ ;", "case sym . MACROUSE :", "return length ( macros . get Definition ( ( String ) ( ( Reg Exp 1 ) re ) . content ) ) ; }", "throw new Error ( STR_ + re . type + STR_ + re ) ; }"]}
{"ids": "76947", "code": ["public static Time Zone random Time Zone ( Random random ) {", "String tz Ids [ ] = Time Zone . get Available I Ds ( ) ;", "return Time Zone . get Time Zone ( tz Ids [ random . next Int ( tz Ids . length ) ] ) ; }"]}
{"ids": "1262", "code": ["public static String array To List ( String [ ] array , String delimiter ) {", "if ( Array Util . is Empty ( array ) ) return STR_ ;", "String Builder sb = new String Builder ( array [ NUM_ ] ) ;", "if ( delimiter . length ( ) == NUM_ ) {", "char c = delimiter . char At ( NUM_ ) ;", "for ( int i = NUM_ ; i < array . length ; i ++ ) {", "sb . append ( c ) ;", "sb . append ( array [ i ] ) ; } }", "else {", "for ( int i = NUM_ ; i < array . length ; i ++ ) {", "sb . append ( delimiter ) ;", "sb . append ( array [ i ] ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "10182", "code": ["@ Override public boolean add All ( Collection < ? extends E > c ) {", "Iterator < ? extends E > i = c . iterator ( ) ;", "boolean changed = false ;", "while ( i . has Next ( ) ) {", "boolean ret = add ( i . next ( ) ) ;", "if ( ! changed ) {", "changed = ret ; } }", "return changed ; }"]}
{"ids": "35169", "code": ["public void reset ( ) {", "m Codes . clear ( ) ;", "m Is First Char Capitalized = false ;", "m Preferred Word = null ;", "m Typed Word . set Length ( NUM_ ) ;", "m Caps Count = NUM_ ; }"]}
{"ids": "68083", "code": ["private String extract Path ( final String uri ) {", "return Default Wildcard Stream Locator . strip Query Path ( uri . replace ( PREFIX , String Utils . EMPTY ) ) ; }"]}
{"ids": "1573", "code": ["public void add Classes To Check ( File basedir , String ... relative Names ) throws IO Exception {", "add Classes To Check ( basedir , Arrays . as List ( relative Names ) ) ; }"]}
{"ids": "1403", "code": ["public static Short to Short ( String str ) throws Page Exception {", "return Short . value Of ( to Short Value ( str ) ) ; }"]}
{"ids": "79221", "code": ["public boolean has Permission ( Security security , Generic Value user Login ) {", "return Order Read Helper . has Permission ( security , user Login , order Header ) ; }"]}
{"ids": "85441", "code": ["protected boolean filter Files ( List < File > files ) {", "if ( task . get No Mtime Check ( ) || is Output Repository URL ( ) ) {", "return false ; }", "Iterator < File > iter = files . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "File file = iter . next ( ) ;", "Module module = infer Module ( file ) ;", "if ( module == null ) {", "task . log ( STR_ + file , Project . MSG VERBOSE ) ;", "continue ; }", "if ( module . get Version ( ) == null ) {", "task . log ( STR_ + module . get Name ( ) , Project . MSG VERBOSE ) ;", "continue ; }", "long oldest = get Artifact File Time ( module , file ) ;", "if ( oldest == Long . MAX VALUE ) {", "File out Module Dir = get Artifact Dir ( module ) ;", "oldest = oldest Output Artifact ( Long . MAX VALUE , out Module Dir ) ;", "task . log ( STR_ + module + STR_ + new Date ( oldest ) , Project . MSG DEBUG ) ; }", "else {", "task . log ( STR_ + file + STR_ + module + STR_ + new Date ( oldest ) , Project . MSG DEBUG ) ; }", "long newest File = file . last Modified ( ) ;", "task . log ( STR_ + file + STR_ + new Date ( newest File ) , Project . MSG DEBUG ) ;", "if ( newest File != Long . MIN VALUE && oldest != Long . MAX VALUE && newest File < oldest ) {", "task . log ( STR_ + file + STR_ ) ;", "iter . remove ( ) ; } }", "return files . size ( ) == NUM_ ; }"]}
{"ids": "71554", "code": ["public void flush ( ) {", "output Stream . flush ( ) ; }"]}
{"ids": "66367", "code": ["public int create Measures ( MSLA Goal goal ) {", "String sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + M In Out . Table ID + STR_ ;", "int counter = NUM_ ;", "Prepared Statement pstmt = null ;", "Result Set rs = null ;", "try {", "pstmt = DB . prepare Statement ( sql , null ) ;", "pstmt . set Int ( NUM_ , goal . get C B Partner ID ( ) ) ;", "pstmt . set Int ( NUM_ , goal . get PA SLA Goal ID ( ) ) ;", "rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) ) {", "int M In Out ID = rs . get Int ( NUM_ ) ;", "Big Decimal Measure Actual = rs . get Big Decimal ( NUM_ ) ;", "Timestamp Movement Date = rs . get Timestamp ( NUM_ ) ;", "String Description = rs . get String ( NUM_ ) + STR_ + rs . get Timestamp ( NUM_ ) ;", "if ( goal . is Date Valid ( Movement Date ) ) {", "MSLA Measure measure = new MSLA Measure ( goal , Movement Date , Measure Actual , Description ) ;", "measure . set Link ( M In Out . Table ID , M In Out ID ) ;", "if ( measure . save ( ) ) counter ++ ; } } }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , STR_ , e ) ; }", "finally {", "DB . close ( rs , pstmt ) ;", "rs = null ;", "pstmt = null ; }", "return counter ; }"]}
{"ids": "69565", "code": ["public E remove At ( int index ) {", "final Object old = m Array [ index ] ;", "if ( m Size <= NUM_ ) {", "if ( DEBUG ) Log . d ( TAG , STR_ + m Hashes . length + STR_ ) ;", "free Arrays ( m Hashes , m Array , m Size ) ;", "m Hashes = Support Container Internals . EMPTY INTS ;", "m Array = Support Container Internals . EMPTY OBJECTS ;", "m Size = NUM_ ; }", "else {", "if ( m Hashes . length > ( BASE SIZE * NUM_ ) && m Size < m Hashes . length / NUM_ ) {", "final int n = m Size > ( BASE SIZE * NUM_ ) ? ( m Size + ( m Size > > NUM_ ) ) : ( BASE SIZE * NUM_ ) ;", "if ( DEBUG ) Log . d ( TAG , STR_ + m Hashes . length + STR_ + n ) ;", "final int [ ] ohashes = m Hashes ;", "final Object [ ] oarray = m Array ;", "alloc Arrays ( n ) ;", "m Size -- ;", "if ( index > NUM_ ) {", "if ( DEBUG ) Log . d ( TAG , STR_ + index + STR_ ) ;", "System . arraycopy ( ohashes , NUM_ , m Hashes , NUM_ , index ) ;", "System . arraycopy ( oarray , NUM_ , m Array , NUM_ , index ) ; }", "if ( index < m Size ) {", "if ( DEBUG ) Log . d ( TAG , STR_ + ( index + NUM_ ) + STR_ + m Size + STR_ + index ) ;", "System . arraycopy ( ohashes , index + NUM_ , m Hashes , index , m Size - index ) ;", "System . arraycopy ( oarray , index + NUM_ , m Array , index , m Size - index ) ; } }", "else {", "m Size -- ;", "if ( index < m Size ) {", "if ( DEBUG ) Log . d ( TAG , STR_ + ( index + NUM_ ) + STR_ + m Size + STR_ + index ) ;", "System . arraycopy ( m Hashes , index + NUM_ , m Hashes , index , m Size - index ) ;", "System . arraycopy ( m Array , index + NUM_ , m Array , index , m Size - index ) ; }", "m Array [ m Size ] = null ; } }", "return ( E ) old ; }"]}
{"ids": "69857", "code": ["@ Override public String resolve Video Url ( @ Nullable final Video video , Step step ) {", "if ( video == null ) return null ;", "String local Path = database Facade . get Path To Video If Exist ( video ) ;", "if ( local Path != null && check Existing On Disk ( local Path , step ) ) {", "return local Path ; }", "else {", "List < Video Url > url List = video . get Urls ( ) ;", "if ( url List == null || url List . size ( ) == NUM_ ) return null ;", "return resolve From Web ( url List ) ; } }"]}
{"ids": "30988", "code": ["protected Object lookup Service ( ) throws Exception {", "Object service = null ;", "Service Template templ ;", "if ( template == null ) {", "Class < ? > [ ] types = ( service Class == null ? null : new Class [ ] { service Class } ) ;", "Entry [ ] entry = ( service Name == null ? null : new Entry [ ] { new Name ( service Name ) } ) ;", "templ = new Service Template ( null , types , entry ) ; }", "else {", "templ = template ; }", "Lookup Locator [ ] lookup Locators = null ;", "if ( locators != null ) {", "lookup Locators = new Lookup Locator [ locators . length ] ;", "for ( int i = NUM_ ; i < locators . length ; i ++ ) {", "String locator = locators [ i ] ;", "if ( ! locator . starts With ( STR_ ) ) {", "locator = STR_ + locator ; }", "lookup Locators [ i ] = new Lookup Locator ( locator ) ; } }", "Service Discovery Manager service Discovery = null ;", "try {", "service Discovery = Shared Discovery Management . get Backwards Service Discovery Manager ( groups , lookup Locators , null ) ;", "Service Item return Object = service Discovery . lookup ( templ , null , timeout ) ;", "if ( return Object != null ) {", "service = return Object . service ; } }", "finally {", "if ( service Discovery != null ) {", "try {", "service Discovery . terminate ( ) ; }", "catch ( Exception e ) {", "logger . warn ( STR_ , e ) ; } } }", "return service ; }"]}
{"ids": "23961", "code": ["public static boolean equals ( final Object obj 1 , final Object obj 2 ) {", "return ( obj 1 != null && obj 1 . equals ( obj 2 ) ) ; }"]}
{"ids": "65287", "code": ["public Webapp Template Loader ( Servlet Context servlet Context , String subdir Path ) {", "if ( servlet Context == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( subdir Path == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "subdir Path = subdir Path . replace ( STR_ , STR_ ) ;", "if ( ! subdir Path . ends With ( STR_ ) ) {", "subdir Path += STR_ ; }", "if ( ! subdir Path . starts With ( STR_ ) ) {", "subdir Path = STR_ + subdir Path ; }", "this . subdir Path = subdir Path ;", "this . servlet Context = servlet Context ; }"]}
{"ids": "10130", "code": ["@ Suppress Warnings ( { STR_ } ) public static < T > T [ ] insert ( T [ ] dest , T src , int offset , Class component Type ) {", "T [ ] temp = ( T [ ] ) Array . new Instance ( component Type , dest . length + NUM_ ) ;", "System . arraycopy ( dest , NUM_ , temp , NUM_ , offset ) ;", "temp [ offset ] = src ;", "System . arraycopy ( dest , offset , temp , offset + NUM_ , dest . length - offset ) ;", "return temp ; }"]}
{"ids": "19460", "code": ["@ Override public void flush ( ) throws IO Exception {", "writer . write ( buffer , NUM_ , fill ) ;", "fill = NUM_ ; }"]}
{"ids": "52468", "code": ["public Metric Instance with Dependency Metric Names ( List < String > dependency Metric Names ) {", "return new Metric Instance ( metric Name , maker , dependency Metric Names . to Array ( new String [ dependency Metric Names . size ( ) ] ) ) ; }"]}
{"ids": "33092", "code": ["public static I Status validate Method Name ( String name ) {", "return validate Method Name ( name , Compiler Options . VERSION 1 3 , Compiler Options . VERSION 1 3 ) ; }"]}
{"ids": "51917", "code": ["public Profiler Entity start ( ) {", "start time = System . nano Time ( ) ;", "return this ; }"]}
{"ids": "51320", "code": ["public static < E extends Enum < E > > Enum Set < E > of ( E e 1 , E e 2 , E e 3 ) {", "Enum Set < E > set = of ( e 1 , e 2 ) ;", "set . add ( e 3 ) ;", "return set ; }"]}
{"ids": "53723", "code": ["public Pick Request with Camera Pics Directory ( @ Nullable final File p Dir File ) {", "this . m Custom Camera Pics Dir Path = p Dir File == null ? null : p Dir File . get Absolute Path ( ) ;", "return this ; }"]}
{"ids": "8559", "code": ["public void prepare For Next Run ( ) {", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "System . gc ( ) ;", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "39813", "code": ["public boolean write Header ( Output Stream os ) {", "try {", "write Int ( os , CACHE MAGIC ) ;", "write String ( os , key ) ;", "write String ( os , etag == null ? STR_ : etag ) ;", "write Long ( os , server Date ) ;", "write Long ( os , last Modified ) ;", "write Long ( os , ttl ) ;", "write Long ( os , soft Ttl ) ;", "write String String Map ( response Headers , os ) ;", "os . flush ( ) ;", "return true ; }", "catch ( IO Exception e ) {", "Volley Log . d ( STR_ , e . to String ( ) ) ;", "return false ; } }"]}
{"ids": "54384", "code": ["public void add ( Chip chip ) {", "if ( ! m Chip List . contains ( chip ) || m Tolerating Duplicate ) {", "m Chip List . add ( chip ) ;", "notify Update ( ) ; } }"]}
{"ids": "83275", "code": ["private boolean check Trip Zone Consistency ( ) {", "log . info ( STR_ ) ;", "Hash Set < String > missing Zones = new Hash Set < String > ( ) ;", "for ( Trip T : trips . values ( ) ) {", "Basic Location zo = zones . get Location ( Id . create ( T . zone o , Zone . class ) ) ;", "Basic Location zd = zones . get Location ( Id . create ( T . zone d , Zone . class ) ) ;", "if ( zo == null ) {", "missing Zones . add ( T . zone o ) ; }", "if ( zd == null ) {", "missing Zones . add ( T . zone d ) ; } }", "if ( missing Zones . size ( ) > NUM_ ) {", "String msg = missing Zones . size ( ) + STR_ ;", "for ( String s : missing Zones ) msg += STR_ + s . to String ( ) + STR_ ;", "log . error ( msg ) ;", "return false ; }", "else log . info ( STR_ ) ;", "return true ; }"]}
{"ids": "46448", "code": ["private int insert Index For Layer ( Component comp , int layer , int position ) {", "int i , count , cur Layer ;", "int layer Start = - NUM_ ;", "int layer End = - NUM_ ;", "int component Count = get Component Count ( ) ;", "Array List < Component > comp List = new Array List < Component > ( component Count ) ;", "for ( int index = NUM_ ; index < component Count ; index ++ ) {", "if ( get Component ( index ) != comp ) {", "comp List . add ( get Component ( index ) ) ; } }", "count = comp List . size ( ) ;", "for ( i = NUM_ ; i < count ; i ++ ) {", "cur Layer = get Layer ( comp List . get ( i ) ) ;", "if ( layer Start == - NUM_ && cur Layer == layer ) {", "layer Start = i ; }", "if ( cur Layer < layer ) {", "if ( i == NUM_ ) {", "layer Start = NUM_ ;", "layer End = NUM_ ; }", "else {", "layer End = i ; }", "break ; } }", "if ( layer Start == - NUM_ && layer End == - NUM_ ) return count ;", "if ( layer Start != - NUM_ && layer End == - NUM_ ) layer End = count ;", "if ( layer End != - NUM_ && layer Start == - NUM_ ) layer Start = layer End ;", "if ( position == - NUM_ ) return layer End ;", "if ( position > - NUM_ && layer Start + position <= layer End ) return layer Start + position ;", "return layer End ; }"]}
{"ids": "63636", "code": ["public static Wait Dialog show Dialog ( Wait Dialog . Runnable runnable , String message , Container container , int width , int height ) {", "Wait Dialog new Dialog = null ;", "if ( container instanceof J Dialog ) {", "new Dialog = new Wait Dialog ( ( J Dialog ) container ) ; }", "else if ( container instanceof J Frame ) {", "new Dialog = new Wait Dialog ( ( J Frame ) container ) ; }", "else {", "new Dialog = new Wait Dialog ( ( J Dialog ) null ) ;", "new Dialog . set Location Relative To ( container ) ; }", "new Dialog . build Dialog ( width , height ) ;", "runnable . set Dialog ( new Dialog ) ;", "new Dialog . container = container ;", "new Dialog . runnable = runnable ;", "new Dialog . set Message ( message ) ;", "Thread process Thread = new Process Thread ( new Dialog ) ;", "process Thread . start ( ) ;", "while ( ! new Dialog . is Visible ( ) ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception ie ) { } }", "return new Dialog ; }"]}
{"ids": "48985", "code": ["public synchronized void write ( byte b [ ] , int off , int len ) throws IO Exception {", "if ( len <= NUM_ ) return ;", "int free Space = buffer . length - pos ;", "if ( len <= free Space ) {", "System . arraycopy ( b , off , buffer , pos , len ) ;", "pos += len ;", "return ; }", "flush ( ) ;", "int local requested ;", "while ( true ) {", "synchronized ( lock ) {", "while ( ( local requested = requested ) < NUM_ && ! disconnected ) {", "try {", "lock . wait ( ) ; }", "catch ( Interrupted Exception e ) { } }", "if ( disconnected ) throw new IO Exception ( STR_ ) ; }", "if ( local requested < len ) {", "manager . send Transmit ( info , b , off , local requested ) ;", "off += local requested ;", "len -= local requested ;", "synchronized ( lock ) {", "requested -= local requested ; } }", "else {", "manager . send Transmit ( info , b , off , len ) ;", "synchronized ( lock ) {", "requested -= len ; }", "break ; } } }"]}
{"ids": "3960", "code": ["protected Alarm ( ) {", "this ( STR_ ) ; }"]}
{"ids": "11646", "code": ["public void remove Mouse Mode ( Map Mouse Mode med ) {", "boolean need To Adjust Active Mode = false ;", "if ( med == null ) {", "return ; }", "if ( med . equals ( active Mouse Mode ) ) {", "need To Adjust Active Mode = true ;", "set Inactive ( med ) ; }", "for ( Map Mouse Mode check MM : mouse Modes ) {", "if ( med . equals ( check MM ) ) {", "med . remove All Map Mouse Listeners ( ) ; }", "else if ( need To Adjust Active Mode ) {", "set Active ( check MM ) ;", "need To Adjust Active Mode = false ; } }", "mouse Modes . remove ( med ) ;", "fire Property Change ( Mouse Modes Property , null , mouse Modes ) ; }"]}
{"ids": "73704", "code": ["@ Override public boolean has Dispatch Function ( ) {", "return false ; }"]}
{"ids": "63084", "code": ["public void add Map ( Map < K , V > map , K min , K max ) {", "if ( min != null && max != null && key Type . compare ( min , max ) > NUM_ ) {", "Data Utils . new Illegal Argument Exception ( STR_ , min , max ) ; }", "int len = shards . length + NUM_ ;", "Shard < K , V > [ ] new Shards = Arrays . copy Of ( shards , len ) ;", "Shard < K , V > new Shard = new Shard < K , V > ( ) ;", "new Shard . map = map ;", "new Shard . min Including = min ;", "new Shard . max Excluding = max ;", "new Shards [ len - NUM_ ] = new Shard ;", "shards = new Shards ; }"]}
{"ids": "30827", "code": ["private void retry Failed Interfaces ( ) {", "for ( Iterator i = failed Interfaces . iterator ( ) ; i . has Next ( ) ; ) {", "Network Interface nic = ( Network Interface ) i . next ( ) ;", "try {", "if ( nic != null ) {", "socket . set Network Interface ( nic ) ; }", "socket . join Group ( request Addr ) ;", "i . remove ( ) ;", "Level l = multicast Interfaces Specified ? Level . INFO : Level . FINE ;", "if ( logger . is Loggable ( l ) ) {", "if ( nic != null ) {", "logger . log ( l , STR_ , new Object [ ] { nic } ) ; }", "else {", "logger . log ( l , STR_ ) ; } } }", "catch ( IO Exception e ) { } } }"]}
{"ids": "85644", "code": ["public void write Header ( ) throws IO Exception {", "FLV Header flv Header = new FLV Header ( ) ;", "flv Header . set Flag Audio ( true ) ;", "flv Header . set Flag Video ( true ) ;", "Byte Buffer header = Byte Buffer . allocate ( HEADER LENGTH + NUM_ ) ;", "flv Header . write ( header ) ;", "file . set Length ( HEADER LENGTH + NUM_ ) ;", "if ( header . has Array ( ) ) {", "log . debug ( STR_ ) ;", "file . write ( header . array ( ) ) ; }", "else {", "log . debug ( STR_ ) ;", "byte [ ] tmp = new byte [ HEADER LENGTH + NUM_ ] ;", "header . get ( tmp ) ;", "file . write ( tmp ) ; }", "bytes Written = file . length ( ) ;", "header . clear ( ) ; }"]}
{"ids": "43243", "code": ["public static Future < ? > submit ( Runnable task ) {", "return THREAD POOL . submit ( task ) ; }"]}
{"ids": "71745", "code": ["public boolean add Overlay ( Overlay overlay , Kml Document kml Doc ) {", "if ( overlay == null ) return false ;", "Kml Feature kml Item ;", "if ( overlay instanceof Ground Overlay ) {", "kml Item = new Kml Ground Overlay ( ( Ground Overlay ) overlay ) ; }", "else if ( overlay instanceof Folder Overlay ) {", "kml Item = new Kml Folder ( ( Folder Overlay ) overlay , kml Doc ) ; }", "else if ( overlay instanceof Marker Clusterer ) {", "kml Item = new Kml Folder ( ( Marker Clusterer ) overlay , kml Doc ) ; }", "else if ( overlay instanceof Marker ) {", "Marker marker = ( Marker ) overlay ;", "kml Item = new Kml Placemark ( marker ) ; }", "else if ( overlay instanceof Polygon ) {", "Polygon polygon = ( Polygon ) overlay ;", "kml Item = new Kml Placemark ( polygon , kml Doc ) ; }", "else if ( overlay instanceof Polyline ) {", "Polyline polyline = ( Polyline ) overlay ;", "kml Item = new Kml Placemark ( polyline , kml Doc ) ; }", "else {", "return false ; }", "m Items . add ( kml Item ) ;", "return true ; }"]}
{"ids": "56502", "code": ["private < T extends SB Resource > T look For Resource ( SB Resource Type type , Class < T > clazz ) {", "List < T > resources = look For Resources ( type , clazz ) ;", "return resources != null && resources . size ( ) > NUM_ ? resources . get ( NUM_ ) : null ; }"]}
{"ids": "44822", "code": ["private Object produce Event ( ) throws Invocation Target Exception {", "if ( ! valid ) {", "throw new Illegal State Exception ( to String ( ) + STR_ ) ; }", "try {", "return method . invoke ( target ) ; }", "catch ( Illegal Access Exception e ) {", "throw new Assertion Error ( e ) ; }", "catch ( Invocation Target Exception e ) {", "if ( e . get Cause ( ) instanceof Error ) {", "throw ( Error ) e . get Cause ( ) ; }", "throw e ; } }"]}
{"ids": "20259", "code": ["private List < Float > create Dash Array ( String dash String ) {", "String [ ] dashes = dash String . split ( STR_ ) ;", "List < Float > float Dash Array = new Array List < Float > ( ) ;", "for ( String dash Value : dashes ) {", "try {", "float Dash Array . add ( Float . parse Float ( dash Value ) ) ; }", "catch ( Number Format Exception e ) {", "return null ; } }", "return float Dash Array ; }"]}
{"ids": "78060", "code": ["public void clean Patch By Version ( String version Name ) {", "if ( patch Directory == null || version Name == null ) {", "return ; }", "String path = patch Directory . get Absolute Path ( ) + STR_ + version Name ;", "Share Patch File Util . delete Dir ( path ) ; }"]}
{"ids": "1603", "code": ["public static boolean is Valid Java Class Name ( String input ) {", "if ( ! String Utils . has Text ( input ) ) {", "return false ; }", "if ( ! Character . is Java Identifier Start ( input . char At ( NUM_ ) ) ) {", "return false ; }", "if ( input . length ( ) > NUM_ ) {", "for ( int i = NUM_ ; i < input . length ( ) ; i ++ ) {", "if ( ! Character . is Java Identifier Part ( input . char At ( i ) ) ) {", "return false ; } } }", "return true ; }"]}
{"ids": "17247", "code": ["public static String rename ( String desc , String oldname , String newname ) {", "if ( desc . index Of ( oldname ) < NUM_ ) return desc ;", "String Buffer newdesc = new String Buffer ( ) ;", "int head = NUM_ ;", "int i = NUM_ ;", "for ( ; ; ) {", "int j = desc . index Of ( STR_ , i ) ;", "if ( j < NUM_ ) break ;", "else if ( desc . starts With ( oldname , j + NUM_ ) && desc . char At ( j + oldname . length ( ) + NUM_ ) == STR_ ) {", "newdesc . append ( desc . substring ( head , j ) ) ;", "newdesc . append ( STR_ ) ;", "newdesc . append ( newname ) ;", "newdesc . append ( STR_ ) ;", "head = i = j + oldname . length ( ) + NUM_ ; }", "else {", "i = desc . index Of ( STR_ , j ) + NUM_ ;", "if ( i < NUM_ ) break ; } }", "if ( head == NUM_ ) return desc ;", "else {", "int len = desc . length ( ) ;", "if ( head < len ) newdesc . append ( desc . substring ( head , len ) ) ;", "return newdesc . to String ( ) ; } }"]}
{"ids": "39138", "code": ["public void sort ( int att Index ) {", "double [ ] vals = new double [ num Instances ( ) ] ;", "Instance [ ] backup = new Instance [ vals . length ] ;", "for ( int i = NUM_ ; i < vals . length ; i ++ ) {", "Instance inst = instance ( i ) ;", "backup [ i ] = inst ;", "double val = inst . value ( att Index ) ;", "if ( Utils . is Missing Value ( val ) ) {", "vals [ i ] = Double . MAX VALUE ; }", "else {", "vals [ i ] = val ; } }", "int [ ] sort Order = Utils . sort With No Missing Values ( vals ) ;", "for ( int i = NUM_ ; i < vals . length ; i ++ ) {", "m Instances . set ( i , backup [ sort Order [ i ] ] ) ; } }"]}
{"ids": "53100", "code": ["public boolean adjust Entry ( E entry ) {", "final Spatial Directory Entry se = ( Spatial Directory Entry ) entry ;", "final Modifiable Hyper Bounding Box mbr = compute MBR ( ) ;", "boolean changed = false ;", "if ( se . has MBR ( ) ) {", "final int dim = se . get Dimensionality ( ) ;", "for ( int i = NUM_ ; i < dim ; i ++ ) {", "if ( Math . abs ( se . get Min ( i ) - mbr . get Min ( i ) ) > Float . MIN NORMAL ) {", "changed = true ;", "break ; }", "if ( Math . abs ( se . get Max ( i ) - mbr . get Max ( i ) ) > Float . MIN NORMAL ) {", "changed = true ;", "break ; } } }", "else {", "changed = true ; }", "if ( changed ) {", "se . set MBR ( mbr ) ; }", "return changed ; }"]}
{"ids": "42150", "code": ["private void trace Object ( Object Reference object , boolean root ) {", "if ( VERBOSE ) {", "Trace . trace ( Item . SANITY , STR_ , Object Model . get String ( object ) ) ; }", "if ( object . is Null ( ) ) return ;", "boolean marked = black Set . contains ( object ) ;", "if ( ! marked ) {", "black Set . add ( object ) ;", "mark Stack . add ( object ) ; }", "visitor . visit Object ( object , root , marked ) ; }"]}
{"ids": "29387", "code": ["private static int compare ( int from Index , Char Sequence left , Char Sequence right ) {", "if ( left == null ) return - NUM_ ;", "if ( right == null ) return NUM_ ;", "for ( int i = from Index , n = Math Lib . min ( left . length ( ) , right . length ( ) ) ; i < n ; i ++ ) {", "char c 1 = Character . to Upper Case ( left . char At ( i ) ) ;", "char c 2 = Character . to Upper Case ( right . char At ( i ) ) ;", "if ( c 1 != c 2 ) return c 1 - c 2 ; }", "return left . length ( ) - right . length ( ) ; }"]}
{"ids": "13383", "code": ["public boolean restore Accessibility Focus ( Calendar Day day ) {", "if ( ( day . year != m Year ) || ( day . month != m Month ) || ( day . day > m Num Cells ) ) {", "return false ; }", "m Touch Helper . set Focused Virtual View ( day . day ) ;", "return true ; }"]}
{"ids": "22531", "code": ["public Driver Task create Volume Clone ( List < Volume Clone > clones ) {", "LOG . info ( STR_ ) ;", "Dell SC Driver Task task = new Dell SC Driver Task ( STR_ ) ;", "String Builder err Buffer = new String Builder ( ) ;", "int create Count = NUM_ ;", "for ( Volume Clone clone : clones ) {", "try {", "Storage Center API api = connection Manager . get Connection ( clone . get Storage System Id ( ) ) ;", "Sc Replay replay = null ;", "api . check And Init Volume ( clone . get Parent Id ( ) ) ;", "if ( clone . get Source Type ( ) == Source Type . SNAPSHOT ) {", "replay = api . get Replay ( clone . get Parent Id ( ) ) ; }", "else {", "replay = api . create Replay ( clone . get Parent Id ( ) , NUM_ ) ; }", "Sc Volume sc Vol = api . create View Volume ( clone . get Display Name ( ) , replay . instance Id ) ;", "clone . set Provisioned Capacity ( Size Util . size Str To Bytes ( sc Vol . configured Size ) ) ;", "clone . set Allocated Capacity ( NUM_ ) ;", "clone . set Wwn ( sc Vol . device Id ) ;", "clone . set Native Id ( sc Vol . instance Id ) ;", "clone . set Device Label ( sc Vol . name ) ;", "clone . set Access Status ( Access Status . READ WRITE ) ;", "clone . set Replication State ( Replication State . SYNCHRONIZED ) ;", "create Count ++ ; }", "catch ( Dell SC Driver Exception | Storage Center API Exception dex ) {", "String error = String . format ( STR_ , clone . get Parent Id ( ) , dex ) ;", "err Buffer . append ( String . format ( STR_ , error ) ) ; } }", "task . set Message ( err Buffer . to String ( ) ) ;", "if ( create Count == clones . size ( ) ) {", "task . set Status ( Task Status . READY ) ; }", "else if ( create Count == NUM_ ) {", "task . set Status ( Task Status . FAILED ) ; }", "else {", "task . set Status ( Task Status . PARTIALLY FAILED ) ; }", "return task ; }"]}
{"ids": "34911", "code": ["@ Override public int hash Code ( ) {", "if ( hash == NUM_ ) {", "int result = NUM_ ;", "result = NUM_ * result + range . hash Code ( ) ;", "long bits Weight = Double . double To Long Bits ( weight ) ;", "result = NUM_ * result + ( int ) ( bits Weight ^ ( bits Weight > > > NUM_ ) ) ;", "hash = result ; }", "return hash ; }"]}
{"ids": "41871", "code": ["@ Override public void on Click ( View v ) {", "int position = Math . min ( ( Integer ) v . get Tag ( ) , m Item List . size ( ) - NUM_ ) ;", "m Selected Tracker = m Item List . get ( position ) ;", "m Toggle Config Handler . show For Selected Toggle ( ) ;", "m Toggle Config Handler . show At Location ( v ) ;", "m Toggle Config Handler . set Arrow Position ( v ) ; }"]}
{"ids": "29894", "code": ["private int read From Data Source ( byte [ ] target , int offset , int length , int bytes Already Read , boolean allow End Of Input ) throws Interrupted Exception , IO Exception {", "if ( Thread . interrupted ( ) ) {", "throw new Interrupted Exception ( ) ; }", "int bytes Read = data Source . read ( target , offset + bytes Already Read , length - bytes Already Read ) ;", "if ( bytes Read == C . RESULT END OF INPUT ) {", "if ( bytes Already Read == NUM_ && allow End Of Input ) {", "return C . RESULT END OF INPUT ; }", "throw new EOF Exception ( ) ; }", "return bytes Already Read + bytes Read ; }"]}
{"ids": "77183", "code": ["public Explanation explain ( int doc , Explanation freq ) throws IO Exception {", "return Explanation . match ( score ( doc , freq . get Value ( ) ) , STR_ + doc + STR_ + freq . get Value ( ) + STR_ , Collections . singleton ( freq ) ) ; }"]}
{"ids": "85218", "code": ["public static Stack < String > split Parts ( String name ) {", "while ( name . starts With ( STR_ ) ) name = name . substring ( NUM_ ) ;", "Stack < String > parts = new Stack < > ( ) ;", "int last = NUM_ ;", "int pos = NUM_ ;", "String part ;", "while ( true ) {", "pos = last ;", "while ( true ) {", "pos = name . index Of ( STR_ , pos ) ;", "if ( pos < NUM_ ) break ;", "if ( name . char At ( pos - NUM_ ) == STR_ ) ++ pos ;", "else break ; }", "if ( pos < NUM_ ) break ;", "part = name . substring ( last , pos ) ;", "if ( ! part . ends With ( STR_ ) ) part += STR_ ;", "parts . add ( part ) ;", "last = pos + NUM_ ; }", "part = name . substring ( last ) ;", "if ( ! part . ends With ( STR_ ) ) part += STR_ ;", "parts . add ( part ) ;", "return parts ; }"]}
{"ids": "66827", "code": ["public Set < Soot Method > collect Source Methods ( ) {", "Set < Soot Method > result = new Hash Set < Soot Method > ( ) ;", "for ( Source Call Chain Info cci : entry points ) {", "collect Source Methods ( cci , result ) ; }", "return result ; }"]}
{"ids": "73944", "code": ["public void register ( Named Bean s ) {", "String system Name = s . get System Name ( ) ;", "tsys . put ( system Name , s ) ;", "String user Name = s . get User Name ( ) ;", "if ( user Name != null ) {", "tuser . put ( user Name , s ) ; }", "fire Property Change ( STR_ , null , Integer . value Of ( tsys . size ( ) ) ) ;", "s . add Property Change Listener ( this , STR_ , STR_ ) ; }"]}
{"ids": "4862", "code": ["protected void expand For ( int i 1 , int i 2 , double d ) {", "if ( i 1 >= sizes . size ( ) ) {", "int old Size = sizes . size ( ) , capacity = vector . length ;", "sizes . set ( i 1 , NUM_ ) ;", "if ( capacity < sizes . size ( ) ) {", "while ( capacity < sizes . size ( ) ) capacity *= NUM_ ;", "double [ ] [ ] t = new double [ capacity ] [ ] ;", "System . arraycopy ( vector , NUM_ , t , NUM_ , old Size ) ;", "vector = t ; }", "for ( int i = old Size ; i < sizes . size ( ) ; ++ i ) vector [ i ] = new double [ default Capacity 2 ] ; }", "if ( i 2 < sizes . get ( i 1 ) ) return ;", "int old Size = sizes . get ( i 1 ) , capacity = vector [ i 1 ] . length ;", "sizes . set ( i 1 , i 2 + NUM_ ) ;", "if ( capacity >= sizes . get ( i 1 ) ) return ;", "while ( capacity < sizes . get ( i 1 ) ) capacity *= NUM_ ;", "double [ ] t = new double [ capacity ] ;", "System . arraycopy ( vector [ i 1 ] , NUM_ , t , NUM_ , old Size ) ;", "if ( d != NUM_ ) Arrays . fill ( t , old Size , sizes . get ( i 1 ) , d ) ;", "vector [ i 1 ] = t ; }"]}
{"ids": "28212", "code": ["public V put ( final K k , final V v ) {", "final Weak Reference < V > ref = new Weak Ref ( k , v , reference Queue ) ;", "final Weak Reference < V > old Ref = map . put ( k , ref ) ;", "final V old Val = old Ref == null ? null : old Ref . get ( ) ;", "if ( queue . add ( v ) && DEBUG ) {", "log . debug ( STR_ + k + STR_ + v ) ; }", "did Update ( k , ref , old Ref ) ;", "return old Val ; }"]}
{"ids": "2272", "code": ["static void delay ( long millis ) throws Interrupted Exception {", "long nanos = millis * ( NUM_ * NUM_ ) ;", "final long wakeup Time = System . nano Time ( ) + nanos ;", "do {", "if ( millis > NUM_ ) Thread . sleep ( millis ) ;", "else Thread . yield ( ) ;", "nanos = wakeup Time - System . nano Time ( ) ;", "millis = nanos / ( NUM_ * NUM_ ) ; }", "while ( nanos >= NUM_ ) ; }"]}
{"ids": "53832", "code": ["public static < V > boolean add List Not Null Value ( List < V > source List , V value ) {", "return ( source List != null && value != null ) ? source List . add ( value ) : false ; }"]}
{"ids": "34138", "code": ["public void delete ( int key ) {", "int i = Container Helpers . binary Search ( m Keys , m Size , key ) ;", "if ( i >= NUM_ ) {", "System . arraycopy ( m Keys , i + NUM_ , m Keys , i , m Size - ( i + NUM_ ) ) ;", "System . arraycopy ( m Values , i + NUM_ , m Values , i , m Size - ( i + NUM_ ) ) ;", "m Size -- ; } }"]}
{"ids": "6101", "code": ["public static void keep Alive ( final boolean keep Alive ) {", "set Property ( STR_ , Boolean . to String ( keep Alive ) ) ; }"]}
{"ids": "54148", "code": ["public Page Object Context peek ( ) {", "return deque . peek ( ) ; }"]}
{"ids": "71674", "code": ["protected void write Namespace ( String prefix , String uri ) throws IO Exception {", "if ( ( prefix != null ) && ( prefix . length ( ) > NUM_ ) ) {", "writer . write ( STR_ ) ;", "writer . write ( prefix ) ;", "writer . write ( STR_ ) ; }", "else {", "writer . write ( STR_ ) ; }", "writer . write ( uri ) ;", "writer . write ( STR_ ) ; }"]}
{"ids": "68907", "code": ["public static void wait Some Time ( int seconds ) {", "try {", "Thread . sleep ( seconds * NUM_ ) ; }", "catch ( Interrupted Exception e ) { } }"]}
{"ids": "35904", "code": ["public void encode ( String value , Byte Buffer buffer ) throws Buffer Overflow Exception {", "if ( value == null ) {", "buffer . put ( ( byte ) ( NUM_ ) ) ;", "return ; }", "int char Count = value . length ( ) ;", "if ( char Count == NUM_ ) {", "buffer . put ( ( byte ) ( NUM_ | NUM_ ) ) ;", "return ; }", "int position = buffer . position ( ) ;", "boolean ascii = true ;", "if ( char Count > NUM_ ) {", "for ( int i = NUM_ ; i < char Count ; i ++ ) {", "int c = value . char At ( i ) ;", "if ( c > NUM_ ) {", "ascii = false ;", "break ; }", "buffer . put ( ( byte ) c ) ; } }", "else {", "ascii = false ; }", "if ( ascii ) {", "position = buffer . position ( ) ;", "buffer . put ( position - NUM_ , ( byte ) ( buffer . get ( position - NUM_ ) | NUM_ ) ) ; }", "else {", "buffer . position ( position ) ;", "write Length ( char Count + NUM_ , buffer ) ;", "int char Index = NUM_ ;", "for ( ; char Index < char Count ; char Index ++ ) {", "int c = value . char At ( char Index ) ;", "if ( c > NUM_ ) break ;", "buffer . put ( ( byte ) c ) ; }", "write UTF 8 String ( value , char Count , char Index , buffer ) ; } }"]}
{"ids": "3765", "code": ["public static Path Impl lookup ( String url ) {", "Path Impl pwd = get Pwd ( ) ;", "if ( ! url . starts With ( STR_ ) ) {", "return pwd . lookup ( url , null ) ; }", "else {", "return PWD . lookup ( url , null ) ; } }"]}
{"ids": "56745", "code": ["public static XML Gregorian Calendar now ( ) {", "return get XML Gregorian Calendar Value ( null ) ; }"]}
{"ids": "73146", "code": ["protected void add Scalar Dimension ( int i ) {", "for ( Dimension dimension : dimension List ) {", "if ( dimension . get Dimension ( ) == i ) {", "return ; } }", "dimension List . add ( new Dimension ( i ) ) ; }"]}
{"ids": "69078", "code": ["public void initialize ( ) {", "Texture State ts = new Texture State ( ) ;", "ts . set Enabled ( false ) ;", "set Render State ( ts ) ;", "for ( int i = NUM_ ; i < line Set List . size ( ) ; ++ i ) {", "Line Set State state = line Set List . get ( i ) ;", "add Line Set ( state , false ) ; }", "z Buffer State = new Z Buffer State ( ) ;", "z Buffer State . set Function ( Z Buffer State . Test Function . Less Than Or Equal To ) ;", "z Buffer State . set Enabled ( true ) ;", "set Render State ( z Buffer State ) ; }"]}
{"ids": "17019", "code": ["protected boolean reg Exp Region Matches ( String text , int t Start , String p , int p Start , int plen ) {", "while ( plen -- > NUM_ ) {", "char tchar = text . char At ( t Start ++ ) ;", "char pchar = p . char At ( p Start ++ ) ;", "if ( ! this . f Ignore Wild Cards ) {", "if ( pchar == f Single Wild Card ) {", "continue ; } }", "if ( pchar == tchar ) {", "continue ; }", "if ( this . f Ignore Case ) {", "if ( Character . to Upper Case ( tchar ) == Character . to Upper Case ( pchar ) ) {", "continue ; }", "if ( Character . to Lower Case ( tchar ) == Character . to Lower Case ( pchar ) ) {", "continue ; } }", "return false ; }", "return true ; }"]}
{"ids": "5762", "code": ["public static void init Keys ( Key Store keystore , Properties props ) {", "if ( props . contains Key ( Configuration . WEBCALL KAFKA AES ) ) {", "byte [ ] key = keystore . decode Key ( props . get Property ( Configuration . WEBCALL KAFKA AES ) ) ;", "Preconditions . check Argument ( ( NUM_ == key . length || NUM_ == key . length || NUM_ == key . length ) , Configuration . WEBCALL KAFKA AES + STR_ ) ;", "keystore . set Key ( Key Store . AES KAFKA WEBCALL , key ) ;", "aes Key = key ; }", "if ( props . contains Key ( Configuration . WEBCALL KAFKA MAC ) ) {", "byte [ ] key = keystore . decode Key ( props . get Property ( Configuration . WEBCALL KAFKA MAC ) ) ;", "Preconditions . check Argument ( ( NUM_ == key . length ) , Configuration . WEBCALL KAFKA MAC + STR_ ) ;", "keystore . set Key ( Key Store . SIPHASH KAFKA WEBCALL , key ) ;", "siphash Key = key ; } }"]}
{"ids": "75511", "code": ["public static boolean is Empty ( String Builder str ) {", "return is Null ( str ) || str . length ( ) <= NUM_ ; }"]}
{"ids": "33797", "code": ["public static Gas register ( Gas gas ) {", "if ( gas == null ) {", "return null ; }", "registered Gasses . add ( gas ) ;", "return get Gas ( gas . get Name ( ) ) ; }"]}
{"ids": "25928", "code": ["@ Override public boolean lock ( ) {", "try {", "lock Path = zk . create ( this . lock Type Folder + Carbon Common Constants . FILE SEPARATOR + lock Name , null , Ids . OPEN ACL UNSAFE , Create Mode . EPHEMERAL SEQUENTIAL ) ;", "List < String > nodes = zk . get Children ( this . lock Type Folder , null ) ;", "Collections . sort ( nodes ) ;", "if ( lock Path . ends With ( nodes . get ( NUM_ ) ) ) {", "return true ; }", "else {", "zk . delete ( lock Path , - NUM_ ) ;", "return false ; } }", "catch ( Keeper Exception | Interrupted Exception e ) {", "LOGGER . error ( e , e . get Message ( ) ) ;", "return false ; } }"]}
{"ids": "77984", "code": ["@ Override protected void key Typed ( char par 1 , int par 2 ) {", "token Box . textbox Key Typed ( par 1 , par 2 ) ;", "if ( par 2 == NUM_ || par 2 == NUM_ ) action Performed ( ( Gui Button ) button List . get ( NUM_ ) ) ; }"]}
{"ids": "21901", "code": ["private static Boolean is Alphanumeric ( final String label ) {", "boolean status = false ;", "if ( String Utils . is Not Empty ( label ) ) {", "Matcher matcher = pattern Alphanumeric . matcher ( label ) ;", "status = matcher . matches ( ) ; }", "return status ; }"]}
{"ids": "27244", "code": ["final static String trim URI Substring ( URL src , String sub ) {", "final String s = src . to External Form ( ) ;", "final int end Index = s . last Index Of ( sub ) ;", "final String t = s . substring ( NUM_ , end Index ) ;", "return t ; }"]}
{"ids": "37586", "code": ["@ Override public String global Info ( ) {", "return STR_ + STR_ + STR_ ; }"]}
{"ids": "5865", "code": ["public static void silent Close Input Stream ( Input Stream is ) {", "try {", "if ( is != null ) {", "is . close ( ) ; } }", "catch ( IO Exception e ) {", "Log . w ( LOG TAG , STR_ , e ) ; } }"]}
{"ids": "63696", "code": ["public boolean remove Row ( int row ) {", "if ( m rows . is Valid Row ( row ) ) {", "fire Table Event ( row , row , Table Model Event . ALL COLUMNS , Table Model Event . DELETE ) ;", "m tuples . invalidate ( row ) ;", "m rows . release Row ( row ) ;", "for ( Iterator cols = get Columns ( ) ; cols . has Next ( ) ; ) {", "Column c = ( Column ) cols . next ( ) ;", "c . revert To Default ( row ) ; }", "return true ; }", "return false ; }"]}
{"ids": "70425", "code": ["void add Fill Components ( Container panel , int [ ] cols , int [ ] rows ) {", "Dimension filler = new Dimension ( NUM_ , NUM_ ) ;", "boolean filled cell 11 = false ;", "Cell Constraints cc = new Cell Constraints ( ) ;", "if ( cols . length > NUM_ && rows . length > NUM_ ) {", "if ( cols [ NUM_ ] == NUM_ && rows [ NUM_ ] == NUM_ ) {", "panel . add ( Box . create Rigid Area ( filler ) , cc . xy ( NUM_ , NUM_ ) ) ;", "filled cell 11 = true ; } }", "for ( int index = NUM_ ; index < cols . length ; index ++ ) {", "if ( cols [ index ] == NUM_ && filled cell 11 ) {", "continue ; }", "panel . add ( Box . create Rigid Area ( filler ) , cc . xy ( cols [ index ] , NUM_ ) ) ; }", "for ( int index = NUM_ ; index < rows . length ; index ++ ) {", "if ( rows [ index ] == NUM_ && filled cell 11 ) {", "continue ; }", "panel . add ( Box . create Rigid Area ( filler ) , cc . xy ( NUM_ , rows [ index ] ) ) ; } }"]}
{"ids": "22001", "code": ["private boolean is Parsable To Double ( String i ) {", "return i . matches ( STR_ ) ; }"]}
{"ids": "10855", "code": ["protected String [ ] init Paths From Properties ( String raw Paths ) {", "String [ ] ret Paths = null ;", "if ( raw Paths != null ) {", "try {", "String Tokenizer token = new String Tokenizer ( raw Paths , File . path Separator ) ;", "int num Paths = token . count Tokens ( ) ;", "ret Paths = new String [ num Paths ] ;", "for ( int i = NUM_ ; i < num Paths ; i ++ ) {", "ret Paths [ i ] = token . next Token ( ) ; }", "return ret Paths ; }", "catch ( java . util . No Such Element Exception e ) {", "e . print Stack Trace ( ) ; } }", "return ret Paths ; }"]}
{"ids": "6222", "code": ["private float color To Angle ( int color ) {", "float [ ] colors = new float [ NUM_ ] ;", "Color . color To HSV ( color , colors ) ;", "return ( float ) Math . to Radians ( - colors [ NUM_ ] ) ; }"]}
{"ids": "15508", "code": ["private void register Default Validator Ids ( Application application , Linked Hash Set < String > default Validator Ids ) {", "if ( default Validator Ids == null ) {", "default Validator Ids = new Linked Hash Set < > ( ) ;", "if ( is Bean Validator Available ( ) ) {", "Web Configuration web Config = Web Configuration . get Instance ( ) ;", "if ( ! web Config . is Option Enabled ( Web Configuration . Boolean Web Context Init Parameter . Disable Default Bean Validator ) ) {", "default Validator Ids . add ( Bean Validator . VALIDATOR ID ) ; } } }", "for ( String validator Id : default Validator Ids ) {", "if ( LOGGER . is Loggable ( Level . FINE ) ) {", "LOGGER . log ( Level . FINE , Message Format . format ( STR_ , validator Id ) ) ; }", "application . add Default Validator Id ( validator Id ) ; } }"]}
{"ids": "65098", "code": ["protected void initialize Location ( V v , Point 2 D coord ) {", "Point point = locations . get ( v ) ;", "coord . set Location ( point . x , point . y ) ; }"]}
{"ids": "26529", "code": ["public static Date parse Date ( String date Str ) {", "String format String = STR_ ;", "if ( date Str . length ( ) == NUM_ ) date Str = date Str . substring ( NUM_ , NUM_ ) ;", "if ( date Str . length ( ) == NUM_ ) format String = STR_ ;", "if ( date Str . length ( ) == NUM_ ) format String = STR_ ;", "Simple Date Format formatter = new Simple Date Format ( format String ) ;", "Parse Position pos = new Parse Position ( NUM_ ) ;", "return formatter . parse ( date Str , pos ) ; }"]}
{"ids": "35372", "code": ["@ Suppress Warnings ( STR_ ) private void do Unload ( Marked Project marked Project , N 4 Progress State Recorder rec ) throws N 4 JS Compile Error Exception {", "if ( create Debug Output ) {", "println ( STR_ + marked Project . project ) ; }", "rec . mark Start Unloading ( marked Project ) ;", "for ( Resource res : marked Project . resources ) {", "rec . mark Unloading Of ( res ) ;", "res . unload ( ) ; }", "rec . mark Finished Unloading ( marked Project ) ; }"]}
{"ids": "26342", "code": ["public void parse Lib ( Map < String , Object > data Model , String full Text ) throws Parse Exception {", "Matcher m ;", "full Text = tmpl Helper . normalize Text ( full Text ) ;", "m = comment Pat . matcher ( full Text ) ;", "if ( ! m . find ( ) ) {", "throw new Parse Exception ( STR_ ) ; }", "String intro Text = tmpl Helper . strip Comment Leading Asterix ( tmpl Helper . clean Text Value ( m . group ( NUM_ ) ) ) ;", "data Model . put ( STR_ , intro Text ) ;", "Matcher introm = tmpl Helper . get First Line Matcher ( intro Text ) ;", "if ( introm . matches ( ) ) {", "data Model . put ( STR_ , tmpl Helper . clean Text Value ( introm . group ( NUM_ ) ) ) ;", "data Model . put ( STR_ , tmpl Helper . clean Text Value ( introm . group ( NUM_ ) ) ) ; }", "String current Section Name = STR_ ;", "Map < String , Object > section Info = make Object Map ( ) ;", "section Info . put ( STR_ , current Section Name ) ;", "section Info . put ( STR_ , null ) ;", "section Info . put ( STR_ , STR_ ) ;", "section Info . put ( STR_ , STR_ ) ;", "Map < String , Map < String , Object > > section Entry Map = make Data Map ( ) ;", "section Info . put ( STR_ , section Entry Map ) ;", "Map < String , Map < String , Object > > entry Map = make Data Map ( ) ;", "Map < String , Map < String , Object > > section Map = make Data Map ( ) ;", "section Map . put ( STR_ , section Info ) ;", "while ( m . find ( ) ) {", "String comment = tmpl Helper . clean Text Value ( m . group ( NUM_ ) ) ;", "Matcher subm ;", "subm = section Pat . matcher ( comment ) ;", "if ( subm . matches ( ) ) {", "current Section Name = tmpl Helper . clean Text Value ( subm . group ( NUM_ ) ) ;", "section Info = make Object Map ( ) ;", "section Info . put ( STR_ , current Section Name ) ;", "section Info . put ( STR_ , current Section Name ) ;", "section Info . put ( STR_ , STR_ ) ;", "section Info . put ( STR_ , tmpl Helper . clean Text Value ( tmpl Helper . strip Comment Leading Asterix ( subm . group ( NUM_ ) ) ) ) ;", "section Entry Map = make Data Map ( ) ;", "section Info . put ( STR_ , section Entry Map ) ;", "section Map . put ( current Section Name , section Info ) ; }", "else {", "subm = entry Pat . matcher ( comment ) ;", "if ( subm . matches ( ) ) {", "String entry Title = tmpl Helper . clean Text Value ( subm . group ( NUM_ ) ) ;", "String entry Body = tmpl Helper . clean Text Value ( subm . group ( NUM_ ) ) ;", "String post Entry Text = full Text . substring ( m . end ( ) ) ;", "try {", "Map < String , Object > entry Info = parse Entry ( entry Title , entry Body , post Entry Text ) ;", "entry Info . put ( STR_ , current Section Name ) ;", "String entry Name = ( String ) entry Info . get ( STR_ ) ;", "if ( entry Name == null || entry Name . is Empty ( ) ) {", "throw new Parse Exception ( STR_ ) ; }", "if ( entry Map . contains Key ( entry Name ) ) {", "throw new Parse Exception ( STR_ + entry Name ) ; }", "entry Map . put ( entry Name , entry Info ) ;", "section Entry Map . put ( entry Name , entry Info ) ; }", "catch ( Parse Exception e ) {", "throw new Parse Exception ( STR_ + entry Title + STR_ + e . get Message ( ) , e ) ; } }", "else { ; } } }", "msg Handler . log Info ( STR_ + entry Map . size ( ) + STR_ + section Map . size ( ) ) ;", "data Model . put ( STR_ , section Map ) ;", "data Model . put ( STR_ , entry Map ) ; }"]}
{"ids": "74480", "code": ["public void write File ( Array List < Dcc Loco Address > consist List , String file Name ) throws IO Exception {", "Element root = new Element ( STR_ ) ;", "Document doc = new Document ( root , dtd Location + STR_ ) ;", "Map < String , String > m = new Hash Map < String , String > ( ) ;", "m . put ( STR_ , STR_ ) ;", "m . put ( STR_ , xslt Location + STR_ ) ;", "Processing Instruction p = new Processing Instruction ( STR_ , m ) ;", "doc . add Content ( NUM_ , p ) ;", "Element roster = new Element ( STR_ ) ;", "for ( int i = NUM_ ; i < consist List . size ( ) ; i ++ ) {", "Consist new Consist = consist Man . get Consist ( consist List . get ( i ) ) ;", "roster . add Content ( consist To Xml ( new Consist ) ) ; }", "root . add Content ( roster ) ;", "try {", "if ( ! check File ( file Name ) ) {", "File file = new File ( file Name ) ;", "File parent Dir = file . get Parent File ( ) ;", "if ( ! parent Dir . exists ( ) ) {", "if ( ! parent Dir . mkdir ( ) ) {", "throw ( new IO Exception ( ) ) ; } }", "if ( ! file . create New File ( ) ) {", "throw ( new IO Exception ( ) ) ; } }", "write XML ( find File ( file Name ) , doc ) ; }", "catch ( IO Exception ioe ) {", "log . error ( STR_ + ioe ) ;", "throw ( ioe ) ; } }"]}
{"ids": "43316", "code": ["public void train ( Reader a Reader ) throws IO Exception {", "Buffered Reader in = new Buffered Reader ( a Reader ) ;", "String line = in . read Line ( ) ;", "while ( line != null ) {", "Matcher m = WORD PATTERN . matcher ( line . to Lower Case ( ) ) ;", "while ( m . find ( ) ) {", "String word = m . group ( ) ;", "Atomic Integer count = n Words . get ( word ) ;", "if ( count == null ) {", "count = new Atomic Integer ( NUM_ ) ;", "n Words . put ( word , count ) ; }", "count . increment And Get ( ) ; }", "line = in . read Line ( ) ; } }"]}
{"ids": "78609", "code": ["private void start Client ( ) {", "if ( flume Client != null && ! flume Client . is Active ( ) ) {", "flume Client . close ( ) ;", "flume Client = null ; }", "if ( flume Client == null ) {", "try {", "flume Client = Rpc Client Factory . get Default Instance ( flume Host Name , flume Port , max Span Batch Size ) ; }", "catch ( Flume Exception e ) {", "LOG . warn ( STR_ + e . get Message ( ) ) ; } } }"]}
{"ids": "67854", "code": ["public void vspan ( long start , long end , Paint color , String legend ) {", "Legend Text legend Text = new Legend Text ( color , legend ) ;", "comments . add ( legend Text ) ;", "plot Elements . add ( new V Span ( start , end , color , legend Text ) ) ; }"]}
{"ids": "59820", "code": ["public void on Draw ( Canvas canvas , int center X , int center Y ) {", "if ( ! m Visible ) {", "return ; }", "m Arc Bounds = new Rect F ( center X - m Progress Radius , center Y - m Progress Radius , center X + m Progress Radius , center Y + m Progress Radius ) ;", "canvas . draw Circle ( center X , center Y , m Progress Radius , m Progress Base Paint ) ;", "canvas . draw Arc ( m Arc Bounds , - NUM_ , m Progress Angle Degrees , false , m Progress Paint ) ;", "if ( m Progress Angle Degrees == NUM_ && System . current Time Millis ( ) > m Time To Hide ) {", "m Visible = false ;", "if ( m Visibility Listener != null ) {", "m Visibility Listener . on Hidden ( ) ; } } }"]}
{"ids": "20594", "code": ["private void remove Item At Int ( int index , boolean update Children On Menu Views ) {", "if ( ( index < NUM_ ) || ( index >= m Items . size ( ) ) ) return ;", "m Items . remove ( index ) ;", "if ( update Children On Menu Views ) on Items Changed ( true ) ; }"]}
{"ids": "62218", "code": ["public static byte [ ] decode ( String s ) {", "return decode ( s . to Char Array ( ) ) ; }"]}
{"ids": "75733", "code": ["public boolean check ( ) {", "return ( m File != null ) && ( m Handler != null ) && m File . exists ( ) ; }"]}
{"ids": "6612", "code": ["private void append ( Print Writer pw , final String k , final String v ) {", "if ( v != null ) {", "pw . println ( k + STR_ + v ) ; } }"]}
{"ids": "54010", "code": ["default B with Default ( String key , Object value ) {", "return with Default ( key , value != null ? value . to String ( ) : null ) ; }"]}
{"ids": "33771", "code": ["private void skip Whitespace ( ) {", "matcher . use Pattern ( WHITESPACE ) ;", "if ( matcher . looking At ( ) ) {", "matcher . region ( matcher . end ( ) , matcher . region End ( ) ) ; } }"]}
{"ids": "67411", "code": ["protected void create Dynamic Style For Components ( final Text Field tag Name , final Text Area tag Desc , final String taregt Tag Color ) {", "tag Name . remove Style Name ( SPUI Definitions . TAG NAME ) ;", "tag Desc . remove Style Name ( SPUI Definitions . TAG DESC ) ;", "get Target Dynamic Styles ( taregt Tag Color ) ;", "tag Name . add Style Name ( TAG NAME DYNAMIC STYLE ) ;", "tag Desc . add Style Name ( TAG DESC DYNAMIC STYLE ) ; }"]}
{"ids": "66863", "code": ["public void calculate scores ( ) {", "score = NUM_ ;", "if ( contents . length == NUM_ ) {", "API api = API . v ( ) ;", "Set < Info Kind > source = api . get Source Info Kinds ( method ) ;", "Set < Info Kind > sink = api . get Sink Info Kinds ( method ) ;", "if ( is system ( method ) ) {", "if ( api . is Safe Method ( method ) ) score = NUM_ ;", "else if ( api . is Spec Method ( method ) ) score = NUM_ ;", "else if ( api . is Banned Method ( method ) ) score = NUM_ ;", "if ( ! source . is Empty ( ) ) score += NUM_ ;", "else if ( ! sink . is Empty ( ) ) score += NUM_ ; }", "return ; }", "for ( Call Chain Info cci : contents ) {", "cci . calculate scores ( ) ;", "calls += cci . calls ;", "syscalls += cci . syscalls ;", "if ( cci . score > score ) score = cci . score ; } }"]}
{"ids": "33331", "code": ["public < T > Json Array < T > create List Dto From Json ( String json , Class < T > dto Interface ) {", "final Dto Provider < T > dto Provider = get Dto Provider ( dto Interface ) ;", "final List < Json Element > list = gson . from Json ( json , list Type Cache . get Unchecked ( Json Element . class ) ) ;", "final List < T > result = new Array List < > ( list . size ( ) ) ;", "for ( Json Element e : list ) {", "result . add ( dto Provider . from Json ( e ) ) ; }", "return new Json Array Impl < > ( result ) ; }"]}
{"ids": "78551", "code": ["public static long long For Query ( SQ Lite Database db , String query , String [ ] selection Args ) {", "SQ Lite Statement prog = db . compile Statement ( query ) ;", "try {", "return long For Query ( prog , selection Args ) ; }", "finally {", "prog . close ( ) ; } }"]}
{"ids": "67213", "code": ["@ Override public void remove ( String ... identifiers ) {", "whitelist . remove All ( Arrays . as List ( identifiers ) ) ; }"]}
{"ids": "48040", "code": ["public static byte [ ] check Tls Pre Master Secret Key ( int client Version , int server Version , Secure Random random , byte [ ] encoded , boolean is Fail Over ) {", "if ( random == null ) {", "random = JCA Util . get Secure Random ( ) ; }", "byte [ ] replacer = new byte [ NUM_ ] ;", "random . next Bytes ( replacer ) ;", "if ( ! is Fail Over && ( encoded != null ) ) {", "if ( encoded . length != NUM_ ) {", "return replacer ; }", "int encoded Version = ( ( encoded [ NUM_ ] & NUM_ ) << NUM_ ) | ( encoded [ NUM_ ] & NUM_ ) ;", "if ( client Version != encoded Version ) {", "if ( client Version > NUM_ || server Version != encoded Version ) {", "encoded = replacer ; } }", "return encoded ; }", "return replacer ; }"]}
{"ids": "37414", "code": ["public Commafier ( final String initial ) {", "m separator = DEFAULT SEPARATOR ;", "sb . append ( initial ) ; }"]}
{"ids": "12786", "code": ["public void write ( File file ) throws IO Exception {", "Print Writer pw = new Print Writer ( new Output Stream Writer ( new File Output Stream ( file ) , STR_ ) , true ) ;", "if ( from Dir != null ) {", "pw . println ( STR_ + from Dir + STR_ + from Ext ) ; }", "String str = null ;", "for ( int i = NUM_ ; i < b List . size ( ) ; i ++ ) {", "str = ( String ) ( b List . element At ( i ) ) ;", "pw . println ( str ) ; } }"]}
{"ids": "33129", "code": ["private void log ( I Status status ) {", "Resources Plugin . log ( status ) ; }"]}
{"ids": "6330", "code": ["static private String Builder replace ( String Builder input , java . util . regex . Pattern pattern , String replacement ) {", "java . util . regex . Matcher m = pattern . matcher ( input ) ;", "while ( m . find ( ) ) {", "if ( is Escaped Char ( input . to String ( ) , m . start ( ) ) ) {", "continue ; }", "input . replace ( m . start ( ) , m . end ( ) , replacement ) ;", "m . reset ( input ) ; }", "return input ; }"]}
{"ids": "10839", "code": ["public static Multisig Aggregate Modification Transaction create Multisig Modification ( ) {", "return new Multisig Aggregate Modification Transaction ( Time Instant . ZERO , Utils . generate Random Account ( ) , Collections . singleton List ( new Multisig Cosignatory Modification ( Multisig Modification Type . Add Cosignatory , Utils . generate Random Account ( ) ) ) ) ; }"]}
{"ids": "3988", "code": ["public static boolean is Jar Cache Enabled Default ( ) {", "return is Jar Cache Enabled ; }"]}
{"ids": "86910", "code": ["public static void copy ( long [ ] src , int src Offset , long [ ] dst , int dst Offset , int len ) {", "int src Limit = src Offset + len ;", "while ( src Offset < src Limit ) {", "int src Idx = src Offset & NUM_ ;", "int dst Idx = dst Offset & NUM_ ;", "int src Remainder = NUM_ - src Idx ;", "int dst Remainder = NUM_ - dst Idx ;", "int chunk Len = Math . min ( src Remainder , dst Remainder ) ;", "long mask = mask Below ( chunk Len ) << src Idx ;", "dst [ dst Offset > > NUM_ ] |= ( ( src [ src Offset > > NUM_ ] & mask ) > > > src Idx ) << dst Offset ;", "src Offset += chunk Len ;", "dst Offset += chunk Len ; } }"]}
{"ids": "11550", "code": ["protected int in Border ( int x , int y ) {", "Border b = get Border ( ) ;", "if ( b == null ) {", "return UNDEF ; }", "Insets i = b . get Border Insets ( this ) ;", "if ( x <= i . left ) {", "return DOCK WEST ; }", "if ( x >= get Width ( ) - i . right ) {", "return DOCK EAST ; }", "if ( y <= i . top ) {", "return DOCK NORTH ; }", "if ( y >= get Height ( ) - i . bottom ) {", "return DOCK SOUTH ; }", "return UNDEF ; }"]}
{"ids": "63776", "code": ["public Wall Force ( float grav Const , float x 1 , float y 1 , float x 2 , float y 2 ) {", "params = new float [ ] { grav Const } ;", "min Values = new float [ ] { DEFAULT MIN GRAV CONSTANT } ;", "max Values = new float [ ] { DEFAULT MAX GRAV CONSTANT } ;", "this . x 1 = x 1 ;", "this . y 1 = y 1 ;", "this . x 2 = x 2 ;", "this . y 2 = y 2 ;", "dx = x 2 - x 1 ;", "dy = y 2 - y 1 ;", "float r = ( float ) Math . sqrt ( dx * dx + dy * dy ) ;", "if ( dx != NUM_ ) dx /= r ;", "if ( dy != NUM_ ) dy /= r ; }"]}
{"ids": "86764", "code": ["public static void write Ln ( final Output Stream out ) throws IO Exception {", "out . write ( LS BYTES ) ; }"]}
{"ids": "13405", "code": ["public static boolean is System Application ( Context context ) {", "if ( context == null ) {", "return false ; }", "return is System Application ( context , context . get Package Name ( ) ) ; }"]}
{"ids": "36321", "code": ["private static void initialize Release Platform ( ) {", "String platform Property = read Config Property ( PLATFORM PROPERTIES , PLATFORM PROPERTY KEY ) ;", "if ( platform Property == null ) {", "log Info ( STR_ ) ; }", "else {", "current Platform = Platform . value Of ( platform Property . to Upper Case ( Locale . UK ) ) ;", "log Info ( STR_ + current Platform ) ; } }"]}
{"ids": "10035", "code": ["public static boolean is Empty ( Char Sequence str ) {", "if ( str == null || str . length ( ) == NUM_ ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "12332", "code": ["@ Override public FS Data Input Stream open ( Path path , int buffer Size ) throws IO Exception {", "String table = get Table Name ( root Path , path ) ;", "String split = get Split Name ( root Path , path ) ;", "split = split Name Without Gzip Extension ( split ) ;", "return new FS Data Input Stream ( new Emo Split Input Stream ( table , split ) ) ; }"]}
{"ids": "61632", "code": ["public void simulate Method ( Soot Method method , Reference Variable this Var , Reference Variable return Var , Reference Variable params [ ] ) {", "String sub Signature = method . get Sub Signature ( ) ;", "if ( sub Signature . equals ( STR_ ) ) {", "java lang Class Loader define Class 0 ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang Class Loader find Bootstrap Class ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang Class Loader find Loaded Class ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang Class Loader get Caller Class Loader ( method , this Var , return Var , params ) ;", "return ; }", "else {", "default Method ( method , this Var , return Var , params ) ;", "return ; } }"]}
{"ids": "73820", "code": ["public static final String extract Ipl Identity Host Frimware Rev ( Loco Net Message m ) {", "String Builder s = new String Builder ( ) ;", "s . append ( Integer . to String ( ( m . get Element ( NUM_ ) & NUM_ ) > > NUM_ ) ) ;", "s . append ( STR_ ) ;", "s . append ( Integer . to String ( ( m . get Element ( NUM_ ) & NUM_ ) ) ) ;", "return s . to String ( ) ; }"]}
{"ids": "11346", "code": ["private void grow ( ) {", "if ( keys == null || nkeys >= keys . length ) {", "String [ ] nk = new String [ nkeys + NUM_ ] ;", "String [ ] nv = new String [ nkeys + NUM_ ] ;", "if ( keys != null ) System . arraycopy ( keys , NUM_ , nk , NUM_ , nkeys ) ;", "if ( values != null ) System . arraycopy ( values , NUM_ , nv , NUM_ , nkeys ) ;", "keys = nk ;", "values = nv ; } }"]}
{"ids": "68085", "code": ["private List < T > filter ( final Collection < T > collection ) {", "final List < T > null Free List = new Array List < T > ( ) ;", "if ( collection != null ) {", "for ( final T item : collection ) {", "if ( item != null ) {", "null Free List . add ( item ) ; } } }", "return null Free List ; }"]}
{"ids": "66899", "code": ["public boolean is System Class ( Soot Class clz ) {", "return all System Classes . contains ( clz ) ; }"]}
{"ids": "43106", "code": ["private byte [ ] try Decode Host To Ip ( String host ) {", "if ( host . starts With ( STR_ ) && host . ends With ( STR_ ) ) {", "return try Decode Host To I Pv 6 ( host ) ; }", "return try Decode Host To I Pv 4 ( host ) ; }"]}
{"ids": "11873", "code": ["private void update Base Matrix ( Drawable d ) {", "Image View image View = get Image View ( ) ;", "if ( null == image View || null == d ) {", "return ; }", "final float view Width = get Image View Width ( image View ) ;", "final float view Height = get Image View Height ( image View ) ;", "final int drawable Width = d . get Intrinsic Width ( ) ;", "final int drawable Height = d . get Intrinsic Height ( ) ;", "m Base Matrix . reset ( ) ;", "final float width Scale = view Width / drawable Width ;", "final float height Scale = view Height / drawable Height ;", "if ( m Scale Type == Scale Type . CENTER ) {", "m Base Matrix . post Translate ( ( view Width - drawable Width ) / NUM_ , ( view Height - drawable Height ) / NUM_ ) ; }", "else if ( m Scale Type == Scale Type . CENTER CROP ) {", "float scale = Math . max ( width Scale , height Scale ) ;", "m Base Matrix . post Scale ( scale , scale ) ;", "m Base Matrix . post Translate ( ( view Width - drawable Width * scale ) / NUM_ , ( view Height - drawable Height * scale ) / NUM_ ) ; }", "else if ( m Scale Type == Scale Type . CENTER INSIDE ) {", "float scale = Math . min ( NUM_ , Math . min ( width Scale , height Scale ) ) ;", "m Base Matrix . post Scale ( scale , scale ) ;", "m Base Matrix . post Translate ( ( view Width - drawable Width * scale ) / NUM_ , ( view Height - drawable Height * scale ) / NUM_ ) ; }", "else {", "Rect F m Temp Src = new Rect F ( NUM_ , NUM_ , drawable Width , drawable Height ) ;", "Rect F m Temp Dst = new Rect F ( NUM_ , NUM_ , view Width , view Height ) ;", "switch ( m Scale Type ) {", "case FIT CENTER :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . CENTER ) ;", "break ;", "case FIT START :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . START ) ;", "break ;", "case FIT END :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . END ) ;", "break ;", "case FIT XY :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . FILL ) ;", "break ;", "default :", "break ; } }", "reset Matrix ( ) ; }"]}
{"ids": "42959", "code": ["public List < Node > list Available Nodes ( Class < ? > type ) {", "List < Node > result = new Array List < Node > ( ) ;", "for ( Node node : available Nodes ) {", "if ( type . is Assignable From ( node . get Return Type ( ) ) ) {", "result . add ( node ) ; } }", "return result ; }"]}
{"ids": "56494", "code": ["private < T extends Draft 3 Resource > T look For Resource ( Draft 3 Resource Type type , Class < T > clazz ) {", "List < T > resources = look For Resources ( type , clazz ) ;", "return resources != null && resources . size ( ) > NUM_ ? resources . get ( NUM_ ) : null ; }"]}
{"ids": "64437", "code": ["public static String read File To String ( File file ) throws IO Exception {", "return read File To String ( file , Charset . default Charset ( ) ) ; }"]}
{"ids": "21234", "code": ["private boolean is Locked ( Order order ) {", "lock . lock ( ) ;", "try {", "return active Orders . contains ( order . get Id ( ) ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "48067", "code": ["private static byte [ ] long To Byte Array ( long l ) {", "byte [ ] ret Val = new byte [ NUM_ ] ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "ret Val [ i ] = ( byte ) l ;", "l >>= NUM_ ; }", "return ret Val ; }"]}
{"ids": "46818", "code": ["public static boolean is File Type Supported ( int file Type ) {", "List providers = get Midi File Writers ( ) ;", "for ( int i = NUM_ ; i < providers . size ( ) ; i ++ ) {", "Midi File Writer writer = ( Midi File Writer ) providers . get ( i ) ;", "if ( writer . is File Type Supported ( file Type ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "32606", "code": ["public void add Muted Username ( final String username ) {", "add Muted Username ( username , null ) ; }"]}
{"ids": "86526", "code": ["public void override Current Time ( long time ) {", "start Time = System . current Time Millis ( ) ;", "current Time = NUM_ ;", "stored Time = time ; }"]}
{"ids": "117", "code": ["public static String sc ( Double score ) {", "String score str = String . format ( STR_ , score ) ;", "return score str ; }"]}
{"ids": "24218", "code": ["public static boolean validate Bind Address ( String bind Address ) {", "if ( bind Address == null || bind Address . length ( ) == NUM_ ) return true ;", "if ( Inet Address Util . validate Host ( bind Address ) == null ) return false ;", "return true ; }"]}
{"ids": "63575", "code": ["protected void fail ( String string ) {", "last Print = NUM_ ;", "if ( string . length ( ) > NUM_ ) {", "char [ ] data = string . to Char Array ( ) ;", "for ( int i = NUM_ ; i < data . length ; i ++ ) {", "char c = data [ i ] ;", "if ( c >= NUM_ || c < NUM_ ) {", "data [ i ] = ( char ) ( STR_ + ( c & NUM_ ) ) ;", "string = null ; } }", "if ( string == null ) {", "string = new String ( data ) ; } }", "println ( string ) ;", "throw new Assertion Error ( string ) ; }"]}
{"ids": "35046", "code": ["public Typecheck Result interpret Results ( Test Configuration config , Compilation Result compilation Result ) {", "List < Test Diagnostic > expected Diagnostics = read Diagnostics ( config , compilation Result ) ;", "return Typecheck Result . from Compilation Results ( config , compilation Result , expected Diagnostics ) ; }"]}
{"ids": "14191", "code": ["public boolean is Trusted XACML Provider ( String realm , String entity Id , String trusted Entity Id , String role ) throws SAML 2 Meta Exception {", "boolean result = false ;", "if ( role != null ) {", "if ( role . equals ( SAML 2 Constants . PDP ROLE ) ) {", "XACMLPDP Config Element pdp Config = get Policy Decision Point Config ( realm , entity Id ) ;", "if ( pdp Config != null ) {", "result = is Same Circle Of Trust ( pdp Config , realm , trusted Entity Id ) ; } }", "else if ( role . equals ( SAML 2 Constants . PEP ROLE ) ) {", "XACML Authz Decision Query Config Element pep Config = get Policy Enforcement Point Config ( realm , entity Id ) ;", "result = is Same Circle Of Trust ( pep Config , realm , trusted Entity Id ) ; } }", "return result ; }"]}
{"ids": "64358", "code": ["private Property Editor load Property Editor ( Class clz ) {", "Property Editor editor = null ;", "try {", "editor = ( Property Editor ) clz . new Instance ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "return editor ; }"]}
{"ids": "37821", "code": ["public Distribution ( Instances source , Classifier Split Model model To Use ) throws Exception {", "int index ;", "Instance instance ;", "double [ ] weights ;", "m per Class Per Bag = new double [ model To Use . num Subsets ( ) ] [ NUM_ ] ;", "m per Bag = new double [ model To Use . num Subsets ( ) ] ;", "tota L = NUM_ ;", "m per Class = new double [ source . num Classes ( ) ] ;", "for ( int i = NUM_ ; i < model To Use . num Subsets ( ) ; i ++ ) {", "m per Class Per Bag [ i ] = new double [ source . num Classes ( ) ] ; }", "Enumeration < Instance > enu = source . enumerate Instances ( ) ;", "while ( enu . has More Elements ( ) ) {", "instance = enu . next Element ( ) ;", "index = model To Use . which Subset ( instance ) ;", "if ( index != - NUM_ ) {", "add ( index , instance ) ; }", "else {", "weights = model To Use . weights ( instance ) ;", "add Weights ( instance , weights ) ; } } }"]}
{"ids": "45612", "code": ["public void writing Request Headers ( ) {", "if ( sent Request Millis != - NUM_ ) throw new Illegal State Exception ( ) ;", "sent Request Millis = System . current Time Millis ( ) ; }"]}
{"ids": "66994", "code": ["public List < Dexlib Abstract Instruction > instructions After ( Dexlib Abstract Instruction instruction ) {", "int i = instructions . index Of ( instruction ) ;", "if ( i == - NUM_ ) throw new Illegal Argument Exception ( STR_ + instruction + STR_ ) ;", "return instructions . sub List ( i + NUM_ , instructions . size ( ) ) ; }"]}
{"ids": "36506", "code": ["private Alignment fine Tune Alignment ( final Alignment first Compute , final int xframe , final int yframe , final Point frame Location , final Point component Location , final int comp Width , final int comp Height ) {", "switch ( first Compute ) {", "case TOPLEFT :", "case TOPRIGHT :", "if ( component Location . x - frame Location . x + comp Width / NUM_ > xframe / NUM_ ) {", "return Alignment . TOPRIGHT ; }", "else {", "return Alignment . TOPLEFT ; }", "case LEFTBOTTOM :", "case LEFTTOP :", "if ( component Location . y - frame Location . y + comp Height / NUM_ > yframe / NUM_ ) {", "return Alignment . LEFTBOTTOM ; }", "else {", "return Alignment . LEFTTOP ; }", "case RIGHTBOTTOM :", "case RIGHTTOP :", "if ( component Location . y - frame Location . y + comp Height / NUM_ > yframe / NUM_ ) {", "return Alignment . RIGHTBOTTOM ; }", "else {", "return Alignment . RIGHTTOP ; }", "case BOTTOMLEFT :", "case BOTTOMRIGHT :", "if ( component Location . x - frame Location . x + comp Width / NUM_ > xframe / NUM_ ) {", "return Alignment . BOTTOMRIGHT ; }", "else {", "return Alignment . BOTTOMLEFT ; }", "default :", "if ( real Alignment == Alignment . INNERLEFT || real Alignment == Alignment . INNERRIGHT ) {", "return real Alignment ; }", "if ( component Location . x - frame Location . x > xframe + frame Location . x - ( comp Width + component Location . x ) ) {", "return Alignment . INNERRIGHT ; }", "else {", "return Alignment . INNERLEFT ; } } }"]}
{"ids": "53519", "code": ["public boolean is Empty ( ) {", "return shapes == null ? true : shapes . is Empty ( ) ; }"]}
{"ids": "33708", "code": ["public static boolean is Network Available ( Context context ) {", "Connectivity Manager cm = ( Connectivity Manager ) context . get System Service ( Context . CONNECTIVITY SERVICE ) ;", "Network Info net Info = cm . get Active Network Info ( ) ;", "return net Info != null && net Info . is Connected Or Connecting ( ) ; }"]}
{"ids": "73158", "code": ["public void reset Data ( ) {", "data . clear ( ) ;", "data Names . clear ( ) ;", "data Set . reset Data ( data Names , data , bins ) ; }"]}
{"ids": "26909", "code": ["@ Override public URI upload Package ( ) {", "boolean file Exists = new File ( topology Package Location ) . is File ( ) ;", "if ( ! file Exists ) {", "LOG . info ( STR_ + topology Package Location + STR_ ) ;", "return null ; }", "Path file Path = Paths . get ( dest Topology File ) ;", "File parent Directory = file Path . get Parent ( ) . to File ( ) ;", "assert parent Directory != null ;", "if ( ! parent Directory . exists ( ) ) {", "LOG . fine ( STR_ ) ;", "if ( ! parent Directory . mkdirs ( ) ) {", "LOG . severe ( STR_ + parent Directory . get Path ( ) ) ;", "return null ; } }", "file Exists = new File ( file Path . to String ( ) ) . is File ( ) ;", "if ( file Exists ) {", "LOG . fine ( STR_ + file Path . to String ( ) + STR_ ) ; }", "LOG . fine ( STR_ + topology Package Location + STR_ + file Path . to String ( ) ) ;", "Path source = Paths . get ( topology Package Location ) ;", "try {", "Copy Option [ ] options = new Copy Option [ ] { Standard Copy Option . REPLACE EXISTING } ;", "Files . copy ( source , file Path , options ) ; }", "catch ( IO Exception ex ) {", "LOG . info ( STR_ + source . to String ( ) + STR_ + ex ) ;", "return null ; }", "return get Uri ( dest Topology File ) ; }"]}
{"ids": "51728", "code": ["public static String strip Escape ( String pattern ) {", "if ( pattern == null ) return null ;", "String Builder stripped = new String Builder ( pattern . length ( ) ) ;", "for ( int pos = NUM_ ; pos < pattern . length ( ) ; pos ++ ) {", "char ch = pattern . char At ( pos ) ;", "if ( ch != STR_ ) {", "stripped . append ( ch ) ; }", "else if ( pos < pattern . length ( ) - NUM_ && pattern . char At ( pos + NUM_ ) == STR_ ) {", "stripped . append ( STR_ ) ;", "pos += NUM_ ; } }", "return stripped . to String ( ) ; }"]}
{"ids": "28675", "code": ["public long guest time ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "10401", "code": ["public void audit Operation ( String operation , List < ? extends Tagged Log API Entity > entities , List < String > encoded Row Keys , Entity Definition entity Definition ) {", "if ( is Auditing Required ( entity Definition . get Service ( ) ) ) {", "List < Generic Audit Entity > audit Entities = build Audit Entities ( operation , entities , encoded Row Keys , entity Definition ) ;", "if ( null != audit Entities && NUM_ != audit Entities . size ( ) ) {", "audit Support . fire Audit ( entity Definition . get Service ( ) , audit Entities ) ; } } }"]}
{"ids": "75401", "code": ["public void register ( String pattern , String result ) {", "Assert . is True ( matchers . size ( ) == results . size ( ) ) ;", "pattern = pattern . trim ( ) ;", "if ( pattern . length ( ) == NUM_ ) {", "return ; }", "matchers . add ( new String Matcher ( pattern , false , false ) ) ;", "results . add ( result ) ; }"]}
{"ids": "63594", "code": ["@ Override public boolean on Item Use ( Item Stack par 1 Item Stack , Entity Player par 2 Entity Player , World par 3 World , int x , int y , int z , int par 7 , float par 8 , float par 9 , float par 10 ) {", "if ( ! par 3 World . is Remote ) {", "Tile Entity tile Entity = par 3 World . get Tile Entity ( x , y , z ) ;", "if ( tile Entity != null ) {", "if ( tile Entity instanceof Tile Launcher Prefab ) {", "Tile Launcher Prefab missile Launcher = ( Tile Launcher Prefab ) tile Entity ;", "if ( missile Launcher . get Frequency ( ) > NUM_ ) {", "set Frequency ( missile Launcher . get Frequency ( ) , par 1 Item Stack ) ;", "par 2 Entity Player . add Chat Message ( new Chat Component Text ( Reference . CHAT DESC + Enum Color . GREY + STR_ + Lang Utils . localize ( STR_ ) + STR_ + Enum Color . DARK GREY + get Frequency ( par 1 Item Stack ) ) ) ; }", "else {", "par 2 Entity Player . add Chat Message ( new Chat Component Text ( Reference . CHAT DESC + Enum Color . GREY + STR_ + Lang Utils . localize ( STR_ ) ) ) ; } } } }", "return false ; }"]}
{"ids": "23458", "code": ["public static Public Key generate Public Key ( String encoded Public Key ) {", "try {", "byte [ ] decoded Key = Base 64 . decode ( encoded Public Key ) ;", "Key Factory key Factory = Key Factory . get Instance ( KEY FACTORY ALGORITHM ) ;", "return key Factory . generate Public ( new X 509 Encoded Key Spec ( decoded Key ) ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new Runtime Exception ( e ) ; }", "catch ( Invalid Key Spec Exception e ) {", "Log . e ( TAG , STR_ ) ;", "throw new Illegal Argument Exception ( e ) ; }", "catch ( Base 64 Decoder Exception e ) {", "Log . e ( TAG , STR_ ) ;", "throw new Illegal Argument Exception ( e ) ; } }"]}
{"ids": "57372", "code": ["SSL Session to Session ( byte [ ] data , String host , int port ) {", "Byte Array Input Stream bais = new Byte Array Input Stream ( data ) ;", "Data Input Stream dais = new Data Input Stream ( bais ) ;", "try {", "int type = dais . read Int ( ) ;", "if ( type != OPEN SSL ) {", "log ( new Assertion Error ( STR_ + type ) ) ;", "return null ; }", "int length = dais . read Int ( ) ;", "byte [ ] session Data = new byte [ length ] ;", "dais . read Fully ( session Data ) ;", "int count = dais . read Int ( ) ;", "X 509 Certificate [ ] certs = new X 509 Certificate [ count ] ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "length = dais . read Int ( ) ;", "byte [ ] cert Data = new byte [ length ] ;", "dais . read Fully ( cert Data ) ;", "certs [ i ] = Open SSLX 509 Certificate . from X 509 Der ( cert Data ) ; }", "return new Open SSL Session Impl ( session Data , host , port , certs , this ) ; }", "catch ( IO Exception e ) {", "log ( e ) ;", "return null ; } }"]}
{"ids": "9923", "code": ["private static String parse DER String ( byte [ ] alter Name Value ) throws Throwable {", "try {", "ASN 1 Stream Parser p = new ASN 1 Stream Parser ( alter Name Value ) ;", "ASN 1 Encodable d = p . read Object ( ) ;", "ASN 1 Primitive der = d . to ASN 1 Primitive ( ) ;", "return get String From Object ( der ) ; }", "catch ( Throwable e ) {", "logger . error ( STR_ + e . get Message ( ) ) ;", "throw e ; } }"]}
{"ids": "69556", "code": ["public Atlas Messages Adapter add Cell Factories ( Atlas Cell Factory ... cell Factories ) {", "for ( Atlas Cell Factory Cell Factory : cell Factories ) {", "Cell Factory . set Style ( m Message Style ) ;", "m Cell Factories . add ( Cell Factory ) ;", "m View Type Count ++ ;", "Cell Type me = new Cell Type ( true , Cell Factory ) ;", "m Cell Types By View Type . put ( m View Type Count , me ) ;", "m My View Types By Cell . put ( Cell Factory , m View Type Count ) ;", "m View Type Count ++ ;", "Cell Type not Me = new Cell Type ( false , Cell Factory ) ;", "m Cell Types By View Type . put ( m View Type Count , not Me ) ;", "m Their View Types By Cell . put ( Cell Factory , m View Type Count ) ; }", "return this ; }"]}
{"ids": "13235", "code": ["protected String consume BOM ( Input Stream stream , String encoding ) throws IO Exception {", "byte [ ] b = new byte [ NUM_ ] ;", "int count = NUM_ ;", "stream . mark ( NUM_ ) ;", "if ( encoding . equals ( STR_ ) ) {", "count = stream . read ( b , NUM_ , NUM_ ) ;", "if ( count == NUM_ ) {", "final int b 0 = b [ NUM_ ] & NUM_ ;", "final int b 1 = b [ NUM_ ] & NUM_ ;", "final int b 2 = b [ NUM_ ] & NUM_ ;", "if ( b 0 != NUM_ || b 1 != NUM_ || b 2 != NUM_ ) {", "stream . reset ( ) ; } }", "else {", "stream . reset ( ) ; } }", "else if ( encoding . starts With ( STR_ ) ) {", "count = stream . read ( b , NUM_ , NUM_ ) ;", "if ( count == NUM_ ) {", "final int b 0 = b [ NUM_ ] & NUM_ ;", "final int b 1 = b [ NUM_ ] & NUM_ ;", "if ( b 0 == NUM_ && b 1 == NUM_ ) {", "return STR_ ; }", "else if ( b 0 == NUM_ && b 1 == NUM_ ) {", "return STR_ ; } }", "stream . reset ( ) ; }", "return encoding ; }"]}
{"ids": "30065", "code": ["public static int create With Id Generation ( Connection connection , String raw Sql Query , Object ... parameters ) throws SQL Exception {", "Prepared Statement stmt = null ;", "Result Set rs = null ;", "try {", "stmt = connection . prepare Statement ( raw Sql Query , Statement . RETURN GENERATED KEYS ) ;", "for ( int index = NUM_ ; index < parameters . length ; index ++ ) {", "Jdbc Utils . bind Parameter ( stmt , index + NUM_ , parameters [ index ] ) ; }", "stmt . execute Update ( ) ;", "rs = stmt . get Generated Keys ( ) ;", "rs . next ( ) ;", "return rs . get Int ( NUM_ ) ; }", "finally {", "Jdbc Utils . close Result Set ( rs ) ;", "Jdbc Utils . close Statement ( stmt ) ; } }"]}
{"ids": "77499", "code": ["public static int and Not ( int a [ ] , int lena , int b [ ] , int lenb , int [ ] target ) {", "if ( lena == NUM_ ) return NUM_ ;", "if ( lenb == NUM_ ) {", "System . arraycopy ( a , NUM_ , target , NUM_ , lena ) ;", "return lena ; }", "if ( ( lenb > > NUM_ ) >= lena ) {", "return and Not Binary Search ( a , lena , b , lenb , target ) ; }", "int count = NUM_ ;", "int i = NUM_ , j = NUM_ ;", "int doca = a [ i ] , docb = b [ j ] ;", "for ( ; ; ) {", "if ( doca > docb ) {", "if ( ++ j >= lenb ) break ;", "docb = b [ j ] ; }", "else if ( doca < docb ) {", "target [ count ++ ] = doca ;", "if ( ++ i >= lena ) break ;", "doca = a [ i ] ; }", "else {", "if ( ++ i >= lena ) break ;", "doca = a [ i ] ;", "if ( ++ j >= lenb ) break ;", "docb = b [ j ] ; } }", "int leftover = lena - i ;", "if ( leftover > NUM_ ) {", "System . arraycopy ( a , i , target , count , leftover ) ;", "count += leftover ; }", "return count ; }"]}
{"ids": "61546", "code": ["public boolean remove ( Http Connection connection ) {", "Time Values times = connection To Times . remove ( connection ) ;", "if ( times == null ) {", "log . warn ( STR_ ) ;", "return true ; }", "else {", "return System . current Time Millis ( ) <= times . time Expires ; } }"]}
{"ids": "66418", "code": ["void create Buttons ( ) {", "if ( scroll Forward Button != null ) {", "tab Pane . remove ( scroll Forward Button ) ;", "scroll Forward Button . remove Action Listener ( this ) ;", "tab Pane . remove ( scroll Backward Button ) ;", "scroll Backward Button . remove Action Listener ( this ) ; }", "int tab Placement = tab Pane . get Tab Placement ( ) ;", "int width = UI Manager . get Int ( STR_ ) ;", "if ( tab Placement == TOP || tab Placement == BOTTOM ) {", "scroll Forward Button = new Arrow Button ( EAST , width ) ;", "scroll Backward Button = new Arrow Button ( WEST , width ) ; }", "else {", "scroll Forward Button = new Arrow Button ( SOUTH , width ) ;", "scroll Backward Button = new Arrow Button ( NORTH , width ) ; }", "scroll Forward Button . add Action Listener ( this ) ;", "scroll Backward Button . add Action Listener ( this ) ;", "tab Pane . add ( scroll Forward Button ) ;", "tab Pane . add ( scroll Backward Button ) ; }"]}
{"ids": "59729", "code": ["private boolean check Touch Slop ( View child , float dx , float dy ) {", "if ( child == null ) {", "return false ; }", "final boolean check Horizontal = m Callback . get View Horizontal Drag Range ( child ) > NUM_ ;", "final boolean check Vertical = m Callback . get View Vertical Drag Range ( child ) > NUM_ ;", "if ( check Horizontal && check Vertical ) {", "return dx * dx + dy * dy > m Touch Slop * m Touch Slop ; }", "else if ( check Horizontal ) {", "return Math . abs ( dx ) > m Touch Slop ; }", "else if ( check Vertical ) {", "return Math . abs ( dy ) > m Touch Slop ; }", "return false ; }"]}
{"ids": "79898", "code": ["public static String rm Slash From Url ( final String url ) {", "return url . ends With ( STR_ ) ? url . substring ( NUM_ , url . length ( ) - NUM_ ) : url ; }"]}
{"ids": "26739", "code": ["protected void update Chart Layout ( ) {", "chart Container . remove All ( ) ;", "List < String > selected Metrics = get Selected Metrics ( ) ;", "if ( selected Metrics . size ( ) > NUM_ ) {", "if ( selected Metrics . size ( ) <= NUM_ ) {", "chart Container . set Layout ( new Grid Layout ( NUM_ , NUM_ ) ) ; }", "else if ( selected Metrics . size ( ) <= NUM_ ) {", "chart Container . set Layout ( new Grid Layout ( NUM_ , NUM_ ) ) ; }", "else if ( selected Metrics . size ( ) <= NUM_ ) {", "chart Container . set Layout ( new Grid Layout ( NUM_ , NUM_ ) ) ; }", "else if ( selected Metrics . size ( ) <= NUM_ ) {", "chart Container . set Layout ( new Grid Layout ( NUM_ , NUM_ ) ) ; }", "else {", "chart Container . set Layout ( new Grid Layout ( ( int ) Math . ceil ( selected Metrics . size ( ) / NUM_ ) , NUM_ ) ) ; }", "Grid Layout layout = ( Grid Layout ) chart Container . get Layout ( ) ;", "int spaces = layout . get Rows ( ) * layout . get Columns ( ) ;", "for ( int i = NUM_ ; i < Math . max ( spaces , selected Metrics . size ( ) ) ; i ++ ) {", "if ( i < selected Metrics . size ( ) ) {", "chart Container . add ( create Chart ( selected Metrics . get ( i ) ) ) ; }", "else {", "chart Container . add ( new Empty Plot ( this ) ) ; } } }", "chart Container . revalidate ( ) ; }"]}
{"ids": "71412", "code": ["public String host ( Properties props ) {", "return props . get Property ( HOST PROPERTY KEY , STR_ ) ; }"]}
{"ids": "70360", "code": ["void cancel ( ) {", "set Visible ( false ) ; }"]}
{"ids": "67830", "code": ["@ Override public Mem Chunk Holder < Volatile Mem Allocator > create Chunk ( long size , boolean autoreclaim ) {", "Mem Chunk Holder < Volatile Mem Allocator > ret = null ;", "Long addr = m vmasvc . allocate ( m nid , size , true ) ;", "if ( NUM_ == addr && m activegc ) {", "m chunkcollector . wait Reclaim Cool Down ( m gctimeout ) ;", "addr = m vmasvc . allocate ( m nid , size , true ) ; }", "if ( NUM_ != addr ) {", "ret = new Mem Chunk Holder < Volatile Mem Allocator > ( this , addr , size ) ;", "ret . set Collector ( m chunkcollector ) ;", "if ( autoreclaim ) {", "m chunkcollector . register ( ret ) ; } }", "return ret ; }"]}
{"ids": "7210", "code": ["public void wait For Invocation ( long msec Wait , int number Of New Events ) {", "long start Time = System . current Time Millis ( ) ;", "while ( true ) {", "if ( ( System . current Time Millis ( ) - start Time ) > msec Wait ) {", "throw new Runtime Exception ( STR_ + number Of New Events + STR_ + get New Data List Flattened ( ) . length ) ; }", "Event Bean [ ] events = get New Data List Flattened ( ) ;", "if ( events . length >= number Of New Events ) {", "return ; }", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "return ; } } }"]}
{"ids": "30889", "code": ["private String version Name ( String prefix , int ver ) {", "return f Name ( prefix ) + String . value Of ( ver ) ; }"]}
{"ids": "33048", "code": ["public Extract Method Refactoring ( I Compilation Unit unit , int selection Start , int selection Length ) {", "f C Unit = unit ;", "f Root = null ;", "f Method Name = STR_ ;", "f Selection Start = selection Start ;", "f Selection Length = selection Length ;", "f Visibility = - NUM_ ; }"]}
{"ids": "65080", "code": ["@ Override public boolean done ( ) {", "if ( stopping Increments && increments Left == NUM_ ) return true ;", "else return false ; }"]}
{"ids": "69508", "code": ["public void parse ( ) throws java . lang . Exception {", "int act ;", "symbol lhs sym ;", "short handle size , lhs sym num ;", "production tab = production table ( ) ;", "action tab = action table ( ) ;", "reduce tab = reduce table ( ) ;", "init actions ( ) ;", "user init ( ) ;", "cur token = scan ( ) ;", "stack . push ( new symbol ( NUM_ , start state ( ) ) ) ;", "tos = NUM_ ;", "for ( done parsing = false ; ! done parsing ; ) {", "act = get action ( ( ( symbol ) stack . peek ( ) ) . parse state , cur token . sym ) ;", "if ( act > NUM_ ) {", "cur token . parse state = act - NUM_ ;", "stack . push ( cur token ) ;", "tos ++ ;", "cur token = scan ( ) ; }", "else if ( act < NUM_ ) {", "lhs sym = do action ( ( - act ) - NUM_ , this , stack , tos ) ;", "lhs sym num = production tab [ ( - act ) - NUM_ ] [ NUM_ ] ;", "handle size = production tab [ ( - act ) - NUM_ ] [ NUM_ ] ;", "for ( int i = NUM_ ; i < handle size ; i ++ ) {", "stack . pop ( ) ;", "tos -- ; }", "act = get reduce ( ( ( symbol ) stack . peek ( ) ) . parse state , lhs sym num ) ;", "lhs sym . parse state = act ;", "stack . push ( lhs sym ) ;", "tos ++ ; }", "else if ( act == NUM_ ) {", "syntax error ( cur token ) ;", "if ( ! error recovery ( false ) ) {", "unrecovered syntax error ( cur token ) ;", "done parsing ( ) ; } } } }"]}
{"ids": "70012", "code": ["private static void write Set 1 ( final B Tree btree ) {", "log . info ( STR_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "btree . insert ( i , i ) ; } }"]}
{"ids": "62475", "code": ["private byte [ ] create Segment Table ( int setup Header Length , List < Ogg Page Header . Packet Start And Length > extra Packets ) {", "Byte Array Output Stream result Baos = new Byte Array Output Stream ( ) ;", "byte [ ] rest Should Be ;", "byte [ ] next Packet ;", "rest Should Be = create Segments ( setup Header Length , true ) ;", "try {", "result Baos . write ( rest Should Be ) ;", "if ( extra Packets . size ( ) > NUM_ ) {", "for ( Ogg Page Header . Packet Start And Length packet : extra Packets ) {", "next Packet = create Segments ( packet . get Length ( ) , false ) ;", "result Baos . write ( next Packet ) ; } } }", "catch ( IO Exception ioe ) {", "throw new Runtime Exception ( STR_ + ioe . get Message ( ) ) ; }", "return result Baos . to Byte Array ( ) ; }"]}
{"ids": "10227", "code": ["public static int index Of Ignore Case ( String src , String sub , int start Index , int end Index ) {", "if ( start Index < NUM_ ) {", "start Index = NUM_ ; }", "int srclen = src . length ( ) ;", "if ( end Index > srclen ) {", "end Index = srclen ; }", "int sublen = sub . length ( ) ;", "if ( sublen == NUM_ ) {", "return start Index > srclen ? srclen : start Index ; }", "sub = sub . to Lower Case ( ) ;", "int total = end Index - sublen + NUM_ ;", "char c = sub . char At ( NUM_ ) ;", "mainloop : for ( int i = start Index ; i < total ; i ++ ) {", "if ( Character . to Lower Case ( src . char At ( i ) ) != c ) {", "continue ; }", "int j = NUM_ ;", "int k = i + NUM_ ;", "while ( j < sublen ) {", "char source = Character . to Lower Case ( src . char At ( k ) ) ;", "if ( sub . char At ( j ) != source ) {", "continue mainloop ; }", "j ++ ;", "k ++ ; }", "return i ; }", "return - NUM_ ; }"]}
{"ids": "71112", "code": ["private void add Polygon Ring ( Linear Ring lr , int cw Left , int cw Right ) {", "if ( lr . is Empty ( ) ) return ;", "Coordinate [ ] coord = Coordinate Arrays . remove Repeated Points ( lr . get Coordinates ( ) ) ;", "if ( coord . length < NUM_ ) {", "has Too Few Points = true ;", "invalid Point = coord [ NUM_ ] ;", "return ; }", "int left = cw Left ;", "int right = cw Right ;", "if ( CG Algorithms . is CCW ( coord ) ) {", "left = cw Right ;", "right = cw Left ; }", "Edge e = new Edge ( coord , new Label ( arg Index , Location . BOUNDARY , left , right ) ) ;", "line Edge Map . put ( lr , e ) ;", "insert Edge ( e ) ;", "insert Point ( arg Index , coord [ NUM_ ] , Location . BOUNDARY ) ; }"]}
{"ids": "74258", "code": ["public boolean accepts Load Name ( String load ) {", "if ( load Option . equals ( ALL LOADS ) ) {", "return true ; }", "if ( load Option . equals ( INCLUDE LOADS ) ) {", "return load List . contains ( load ) ; }", "return ! load List . contains ( load ) ; }"]}
{"ids": "12647", "code": ["public static void expand Letters ( String letters , Word Relation word Relation ) {", "letters = letters . to Lower Case ( ) ;", "char c ;", "for ( int i = NUM_ ; i < letters . length ( ) ; i ++ ) {", "c = letters . char At ( i ) ;", "if ( is Digit ( c ) ) {", "word Relation . add Word ( digit 2 num [ c - STR_ ] ) ; }", "else if ( letters . equals ( STR_ ) ) {", "word Relation . add Word ( STR_ ) ; }", "else {", "word Relation . add Word ( String . value Of ( c ) ) ; } } }"]}
{"ids": "45422", "code": ["public static void write String To File ( File file , String data , Charset encoding , boolean append ) throws IO Exception {", "Output Stream out = null ;", "try {", "out = open Output Stream ( file , append ) ;", "IO Utils . write ( data , out , encoding ) ;", "out . close ( ) ; }", "finally {", "IO Utils . close Quietly ( out ) ; } }"]}
{"ids": "11973", "code": ["@ Deprecated public static void subtract ( String name , double amount ) throws User Does Not Exist Exception , No Loan Permitted Exception {", "try {", "substract ( name , Big Decimal . value Of ( amount ) ) ; }", "catch ( Arithmetic Exception e ) {", "logger . log ( Level . WARNING , STR_ + amount + STR_ + name + STR_ + e . get Message ( ) , e ) ; } }"]}
{"ids": "40167", "code": ["public Mnemonic Code ( Input Stream wordstream , String word List Digest ) throws IO Exception , Illegal Argument Exception {", "Buffered Reader br = new Buffered Reader ( new Input Stream Reader ( wordstream , STR_ ) ) ;", "word List = new Array List < String > ( NUM_ ) ;", "String word ;", "while ( ( word = br . read Line ( ) ) != null ) word List . add ( word ) ;", "br . close ( ) ;", "initialize From Words ( word List , word List Digest ) ; }"]}
{"ids": "76550", "code": ["public QK Dialog add Menu Item ( String title , long id ) {", "m Menu Items . add ( title ) ;", "m Menu Item Ids . add ( id ) ;", "return this ; }"]}
{"ids": "63617", "code": ["public Anchor Pane create Finger Print Panel ( Array List < Fp Panel > fingerprint Panel List ) {", "return create Finger Print Panel ( fingerprint Panel List , null ) ; }"]}
{"ids": "37339", "code": ["private static boolean is Memory Access ( final String value ) {", "return value . equals ( STR_ ) ; }"]}
{"ids": "54315", "code": ["public void add Attribute ( Attribute Info info ) {", "Attribute Info . remove ( attributes , info . get Name ( ) ) ;", "attributes . add ( info ) ; }"]}
{"ids": "9168", "code": ["private static boolean verify String Param ( String str , int max Length , String acceptable Characters ) {", "return ! ( str == null || str . length ( ) == NUM_ || str . length ( ) > max Length || ! Pattern . matches ( acceptable Characters , str ) ) ; }"]}
{"ids": "16983", "code": ["private int calculate Drag Sensitivity ( ) {", "int range = MAX DRAG SENSITIVITY - MIN DRAG SENSITIVITY ;", "return Math . round ( ( NUM_ - get Drag Sensitivity ( ) ) * range + MIN DRAG SENSITIVITY ) ; }"]}
{"ids": "26491", "code": ["public static String lower First Char ( String string ) {", "if ( string == null ) return null ;", "if ( string . length ( ) <= NUM_ ) return string . to Lower Case ( ) ;", "String Builder sb = new String Builder ( string ) ;", "sb . set Char At ( NUM_ , Character . to Lower Case ( sb . char At ( NUM_ ) ) ) ;", "return sb . to String ( ) ; }"]}
{"ids": "30146", "code": ["public void for Each Block Pos Mutable Top Down ( Predicate < Block Pos > func ) {", "Block Pos . Mutable Block Pos block Pos = new Block Pos . Mutable Block Pos ( ) ;", "int base X = get Min Block X ( ) ;", "int base Z = get Min Block Z ( ) ;", "int block Y Max = get Max Block Y ( ) ;", "for ( int x = NUM_ ; x < NUM_ ; x ++ ) {", "for ( int z = NUM_ ; z < NUM_ ; z ++ ) {", "block Pos . set Pos ( base X + x , block Y Max , base Z + z ) ;", "for ( int y = NUM_ ; y >= NUM_ ; y -- ) {", "boolean cont = func . test ( block Pos ) ;", "block Pos . move ( Enum Facing . DOWN ) ;", "if ( ! cont ) {", "break ; } } } } }"]}
{"ids": "85548", "code": ["public String visit ( Type t , Locale locale ) {", "return t . accept ( this , locale ) ; }"]}
{"ids": "70669", "code": ["public static final void write Map Xml ( Map val , Xml Serializer out , Write Map Callback callback ) throws Xml Pull Parser Exception , java . io . IO Exception {", "if ( val == null ) {", "return ; }", "Set s = val . entry Set ( ) ;", "Iterator i = s . iterator ( ) ;", "while ( i . has Next ( ) ) {", "Map . Entry e = ( Map . Entry ) i . next ( ) ;", "write Value Xml ( e . get Value ( ) , ( String ) e . get Key ( ) , out , callback ) ; } }"]}
{"ids": "32729", "code": ["public static void drop Table ( String table , Connection connection ) {", "table = table . replace ( STR_ , STR_ ) ;", "String Builder drop Table Query = new String Builder ( ) ;", "drop Table Query . append ( STR_ ) ;", "drop Table Query . append ( table ) ;", "LOG . info ( STR_ ) ;", "LOG . info ( drop Table Query ) ;", "execute Statement If Exists ( drop Table Query . to String ( ) , connection ) ; }"]}
{"ids": "33678", "code": ["private int free Space ( ) {", "return buffer . capacity ( ) - buffer . limit ( ) + buffer . position ( ) ; }"]}
{"ids": "41604", "code": ["@ Override public List < Node > generate ( int pop Size ) {", "List < Node > population = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < pop Size ; ) {", "Node candidate = grow ( NUM_ ) ;", "if ( candidate . is Valid ( ) ) {", "population . add ( candidate ) ;", "i ++ ; } }", "return population ; }"]}
{"ids": "69982", "code": ["public synchronized void notify Before Use ( Composite Transaction ct ) throws Invalid Session Handle State Exception {", "if ( closed ) throw new Invalid Session Handle State Exception ( STR_ ) ;", "try {", "Transaction Context suspended = null ;", "if ( ct != null ) {", "Iterator < Transaction Context > it = all Contexts . iterator ( ) ;", "while ( it . has Next ( ) && suspended == null ) {", "Transaction Context b = ( Transaction Context ) it . next ( ) ;", "if ( b . is Suspended In Transaction ( ct ) ) {", "suspended = b ; } } }", "if ( suspended != null ) {", "if ( LOGGER . is Debug Enabled ( ) ) LOGGER . log Debug ( this + STR_ + ct . get Tid ( ) ) ;", "current Context = suspended ;", "current Context . transaction Resumed ( ) ; }", "else {", "try {", "if ( LOGGER . is Trace Enabled ( ) ) LOGGER . log Trace ( this + STR_ + ct ) ;", "current Context . check Enlist Before Use ( ct ) ; }", "catch ( Unexpected Transaction Context Exception tx Boundary Passed ) {", "if ( LOGGER . is Debug Enabled ( ) ) LOGGER . log Debug ( this + STR_ + ct ) ;", "current Context . transaction Suspended ( ) ;", "current Context = new Transaction Context ( resource , xa Resource ) ;", "all Contexts . add ( current Context ) ;", "try {", "current Context . check Enlist Before Use ( ct ) ; }", "catch ( Unexpected Transaction Context Exception e ) {", "String msg = STR_ ;", "LOGGER . log Error ( msg , e ) ;", "throw new Invalid Session Handle State Exception ( msg ) ; } } } }", "catch ( Invalid Session Handle State Exception e ) {", "notify Session Error Occurred ( ) ;", "throw e ; } }"]}
{"ids": "34737", "code": ["public void on Activity Result ( int request Code , int result Code , Intent data ) {", "if ( m Initialization Complete ) {", "m Activity Delegate . on Activity Result With Native ( request Code , result Code , data ) ; }", "else {", "if ( m Pending Activity Results == null ) {", "m Pending Activity Results = new Array List < Activity Result > ( NUM_ ) ; }", "m Pending Activity Results . add ( new Activity Result ( request Code , result Code , data ) ) ; } }"]}
{"ids": "37661", "code": ["public void delete Selection ( Array List < Integer > nodes ) {", "for ( int i = NUM_ ; i < nodes . size ( ) ; i ++ ) {", "for ( int j = i + NUM_ ; j < nodes . size ( ) ; j ++ ) {", "if ( nodes . get ( i ) > nodes . get ( j ) ) {", "int h = nodes . get ( i ) ;", "nodes . set ( i , nodes . get ( j ) ) ;", "nodes . set ( j , h ) ; } } }", "if ( m b Needs Undo Action ) {", "add Undo Action ( new Delete Selection Action ( nodes ) ) ; }", "boolean b Needs Undo Action = m b Needs Undo Action ;", "m b Needs Undo Action = false ;", "try {", "for ( int i Node = nodes . size ( ) - NUM_ ; i Node >= NUM_ ; i Node -- ) {", "delete Node ( nodes . get ( i Node ) ) ; } }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "m b Needs Undo Action = b Needs Undo Action ; }"]}
{"ids": "15656", "code": ["protected void on Cached ( ) {", "if ( Log Configuration . logging Is Enabled ( ) ) {", "logger . log ( Level . INFO , STR_ ) ; }", "ui Handler . hide Message ( ) ;", "updating = false ;", "fire Application Cache Event ( Cache Event . on Cached ) ; }"]}
{"ids": "62914", "code": ["public static void show String ( String title , String content , Dimension dimension ) {", "J Text Area area = new J Text Area ( content ) ;", "area . set Editable ( false ) ;", "J Scroll Pane scroll = new J Scroll Pane ( area ) ;", "scroll . set Preferred Size ( dimension ) ;", "J Option Pane . show Message Dialog ( null , scroll , title , J Option Pane . INFORMATION MESSAGE ) ; }"]}
{"ids": "21928", "code": ["private void mark CG For Deletion ( Block Consistency Group consistency Group ) {", "if ( ! consistency Group . get Inactive ( ) ) {", "consistency Group . set Storage Controller ( null ) ;", "consistency Group . set Inactive ( true ) ;", "db Client . update Object ( consistency Group ) ; } }"]}
{"ids": "51426", "code": ["public Long Buffer put ( long [ ] src , int src Offset , int long Count ) {", "J Transc Arrays . check Offset And Count ( src . length , src Offset , long Count ) ;", "if ( long Count > remaining ( ) ) {", "throw new Buffer Overflow Exception ( ) ; }", "for ( int i = src Offset ; i < src Offset + long Count ; ++ i ) {", "put ( src [ i ] ) ; }", "return this ; }"]}
{"ids": "40386", "code": ["public void play Together ( Collection < Animator > items ) {", "if ( items != null && items . size ( ) > NUM_ ) {", "m Needs Sort = true ;", "Builder builder = null ;", "for ( Animator anim : items ) {", "if ( builder == null ) {", "builder = play ( anim ) ; }", "else {", "builder . with ( anim ) ; } } } }"]}
{"ids": "1370", "code": ["private Message Context create Message Context ( Axis Engine engine , Http Servlet Request req , Http Servlet Response res , Component component ) {", "Message Context msg Context = new Message Context ( engine ) ;", "String request Path = get Request Path ( req ) ;", "if ( is Debug ) {", "log . debug ( STR_ + msg Context ) ;", "log . debug ( STR_ + req . get Header ( HTTP Constants . HEADER CONTENT TYPE ) ) ;", "log . debug ( STR_ + req . get Header ( HTTP Constants . HEADER CONTENT LOCATION ) ) ;", "log . debug ( STR_ + String . value Of ( home Dir ) ) ;", "log . debug ( STR_ + request Path ) ;", "log . debug ( STR_ + String . value Of ( web Inf Path ) ) ;", "log . debug ( STR_ + req . get Path Info ( ) ) ;", "log . debug ( STR_ + req . get Header ( HTTP Constants . HEADER AUTHORIZATION ) ) ;", "log . debug ( STR_ + req . get Remote Addr ( ) ) ;", "log . debug ( STR_ + String . value Of ( web Inf Path ) ) ; }", "msg Context . set Transport Name ( STR_ ) ;", "msg Context . set Property ( Constants . MC HOME DIR , home Dir ) ;", "msg Context . set Property ( Constants . MC RELATIVE PATH , request Path ) ;", "msg Context . set Property ( HTTP Constants . MC HTTP SERVLET , this ) ;", "msg Context . set Property ( HTTP Constants . MC HTTP SERVLETREQUEST , req ) ;", "msg Context . set Property ( HTTP Constants . MC HTTP SERVLETRESPONSE , res ) ;", "msg Context . set Property ( HTTP Constants . MC HTTP SERVLETLOCATION , web Inf Path ) ;", "msg Context . set Property ( HTTP Constants . MC HTTP SERVLETPATHINFO , req . get Path Info ( ) ) ;", "msg Context . set Property ( HTTP Constants . HEADER AUTHORIZATION , req . get Header ( HTTP Constants . HEADER AUTHORIZATION ) ) ;", "msg Context . set Property ( lucee . runtime . net . rpc . server . Constants . COMPONENT , component ) ;", "msg Context . set Property ( Constants . MC REMOTE ADDR , req . get Remote Addr ( ) ) ;", "Servlet Endpoint Context Impl sec = new Servlet Endpoint Context Impl ( ) ;", "msg Context . set Property ( Constants . MC SERVLET ENDPOINT CONTEXT , sec ) ;", "String realpath = context . get Real Path ( request Path ) ;", "if ( realpath != null ) {", "msg Context . set Property ( Constants . MC REALPATH , realpath ) ; }", "msg Context . set Property ( Constants . MC CONFIGPATH , web Inf Path ) ;", "return msg Context ; }"]}
{"ids": "51940", "code": ["@ Override public void invoke Command ( int arg Length , String [ ] args , String command ) {", "Pattern regex = null ;", "if ( args . length == NUM_ ) {", "regex = Pattern . compile ( args [ NUM_ ] ) ; }", "else if ( args . length != NUM_ ) {", "throw new Usage Exception ( STR_ ) ; }", "for ( Abstract Command cmd : Command Bus . commands ) try Regex ( regex , cmd ) ;", "for ( Fuzzy Command cmd : Command Bus . parsers ) try Regex ( regex , cmd ) ; }"]}
{"ids": "24738", "code": ["public static Builder new Builder ( ) {", "return new Builder ( ) ; }"]}
{"ids": "8696", "code": ["protected int parse And Add Node ( Xml Resource Parser parser , Hash Map < String , Tag Parser > tag Parser Map , Array List < Long > screen Ids ) throws Xml Pull Parser Exception , IO Exception {", "if ( TAG INCLUDE . equals ( parser . get Name ( ) ) ) {", "final int res Id = get Attribute Resource Value ( parser , ATTR WORKSPACE , NUM_ ) ;", "if ( res Id != NUM_ ) {", "return parse Layout ( res Id , screen Ids ) ; }", "else {", "return NUM_ ; } }", "m Values . clear ( ) ;", "parse Container And Screen ( parser , m Temp ) ;", "final long container = m Temp [ NUM_ ] ;", "final long screen Id = m Temp [ NUM_ ] ;", "m Values . put ( Launcher Settings . Favorites . CONTAINER , container ) ;", "m Values . put ( Launcher Settings . Favorites . SCREEN , screen Id ) ;", "m Values . put ( Launcher Settings . Favorites . CELLX , convert To Distance From End ( get Attribute Value ( parser , ATTR X ) , m Column Count ) ) ;", "m Values . put ( Launcher Settings . Favorites . CELLY , convert To Distance From End ( get Attribute Value ( parser , ATTR Y ) , m Row Count ) ) ;", "Tag Parser tag Parser = tag Parser Map . get ( parser . get Name ( ) ) ;", "if ( tag Parser == null ) {", "if ( LOGD ) Log . d ( TAG , STR_ + parser . get Name ( ) ) ;", "return NUM_ ; }", "long new Element Id = tag Parser . parse And Add ( parser ) ;", "if ( new Element Id >= NUM_ ) {", "if ( ! screen Ids . contains ( screen Id ) && container == Launcher Settings . Favorites . CONTAINER DESKTOP ) {", "screen Ids . add ( screen Id ) ; }", "return NUM_ ; }", "return NUM_ ; }"]}
{"ids": "80011", "code": ["public Word Entry add New Word ( final String str ) {", "final String key = trim Word ( str ) ;", "Word Entry entry = words . get ( key ) ;", "if ( entry == null ) {", "entry = new Word Entry ( ) ;", "entry . set Type ( new Expression Type ( STR_ ) ) ;", "entry . set Normalized ( key ) ;", "words . put ( key , entry ) ; }", "else {", "logger . warn ( STR_ + str + STR_ + entry . get Normalized ( ) ) ; }", "return entry ; }"]}
{"ids": "5414", "code": ["@ Override public int insert ( String elem ) {", "int first Index = ( int ) ( elem . char At ( NUM_ ) - STR_ ) ;", "int middle Index = ( int ) ( elem . char At ( - NUM_ + elem . length ( ) / NUM_ ) - STR_ ) ;", "int last Index = ( int ) ( elem . char At ( elem . length ( ) - NUM_ ) - STR_ ) ;", "storage [ first Index * NUM_ + middle Index * NUM_ + last Index ] = elem ;", "return NUM_ ; }"]}
{"ids": "71710", "code": ["@ Override protected void on Measure ( int width Measure Spec , int height Measure Spec ) {", "m Width = Measure Spec . get Size ( width Measure Spec ) ;", "m Height = Measure Spec . get Size ( height Measure Spec ) ;", "int min Side = Math . min ( m Width , m Height ) ;", "m Width = min Side ;", "m Height = min Side ;", "m Current Progress Position = calculate Current Position From Current Seconds ( m Current Seconds ) ;", "object Animator Progress . set Float Values ( m Current Progress Position / m Width , NUM_ ) ;", "object Animator Progress . set Duration ( ( m Max Seconds - m Current Seconds ) * NUM_ ) ;", "if ( m Bitmap Cover Image != null ) scale Cover Bitmap ( m Bitmap Cover Image ) ;", "rect F Empty Progress . set ( NUM_ , m Height - m Progress Height , m Width , m Height ) ;", "m Drawable Bottom Shadow . set Bounds ( NUM_ , ( NUM_ * m Height ) / NUM_ , m Width , m Height ) ;", "if ( start Requested ) {", "start Requested = false ;", "start ( ) ; }", "super . on Measure ( width Measure Spec , height Measure Spec ) ; }"]}
{"ids": "72927", "code": ["protected List < Command > handle Commands ( Server Connector server Connector , List < Command > commands ) {", "List < Command > results = new Array List < Command > ( ) ;", "for ( Command command : commands ) {", "if ( LOG . is Loggable ( Level . FINEST ) ) {", "LOG . finest ( STR_ + command ) ; }", "results . add All ( server Connector . receive ( command ) ) ; }", "return results ; }"]}
{"ids": "26787", "code": ["public static void UF 5 ( double [ ] x , double [ ] f , int nx ) {", "int count 1 = NUM_ ;", "int count 2 = NUM_ ;", "double sum 1 = NUM_ ;", "double sum 2 = NUM_ ;", "double yj ;", "double hj ;", "double N = NUM_ ;", "double E = NUM_ ;", "for ( int j = NUM_ ; j <= nx ; j ++ ) {", "yj = x [ j - NUM_ ] - Math . sin ( NUM_ * PI * x [ NUM_ ] + j * PI / nx ) ;", "hj = NUM_ * yj * yj - Math . cos ( NUM_ * PI * yj ) + NUM_ ;", "if ( j % NUM_ == NUM_ ) {", "sum 2 += hj ;", "count 2 ++ ; }", "else {", "sum 1 += hj ;", "count 1 ++ ; } }", "hj = ( NUM_ / N + E ) * Math . abs ( Math . sin ( NUM_ * N * PI * x [ NUM_ ] ) ) ;", "f [ NUM_ ] = x [ NUM_ ] + hj + NUM_ * sum 1 / ( double ) count 1 ;", "f [ NUM_ ] = NUM_ - x [ NUM_ ] + hj + NUM_ * sum 2 / ( double ) count 2 ; }"]}
{"ids": "41822", "code": ["private View fill Up ( int pos , int next Bottom ) {", "if ( DEBUG ) Log . i ( TAG , STR_ + pos + STR_ + next Bottom + M FIRST POSITION + m First Position ) ;", "View selected View = null ;", "final int end = m List Padding . top ;", "while ( next Bottom > end && pos >= NUM_ ) {", "View temp = make Row ( pos , next Bottom , false ) ;", "if ( temp != null ) {", "selected View = temp ; }", "next Bottom = m Reference View . get Top ( ) - m Vertical Spacing ;", "m First Position = pos ;", "pos -= m Num Columns ; }", "if ( m Stack From Bottom ) {", "m First Position = Math . max ( NUM_ , pos + NUM_ ) ; }", "return selected View ; }"]}
{"ids": "6880", "code": ["private List < Validation Error > validate ( ) {", "List < Validation Error > errors = Lists . new Array List ( ) ;", "Module module = get Module ( ) ;", "errors . add All ( Blaze Android Run Configuration Validation Util . validate Module ( module ) ) ;", "Android Facet facet = null ;", "if ( module != null ) {", "facet = Android Facet . get Instance ( module ) ;", "errors . add All ( Blaze Android Run Configuration Validation Util . validate Facet ( facet , module ) ) ; }", "errors . add All ( config State . validate ( facet ) ) ;", "errors . add All ( Blaze Android Run Configuration Validation Util . validate Label ( get Label ( ) , configuration . get Project ( ) , Kind . ANDROID BINARY ) ) ;", "return errors ; }"]}
{"ids": "69397", "code": ["public void remove Child Job ( Job child Job ) {", "if ( ! child Jobs . contains ( child Job ) ) {", "throw new Runtime Exception ( STR_ + child Job + STR_ ) ; }", "boolean removed = child Jobs . remove ( child Job ) ;", "if ( ! removed ) {", "throw new Runtime Exception ( STR_ ) ; } }"]}
{"ids": "85829", "code": ["private Point F is Flinging To Delete ( Drag Source source ) {", "if ( m Fling To Delete Drop Target == null ) return null ;", "if ( ! source . supports Fling To Delete ( ) ) return null ;", "View Configuration config = View Configuration . get ( m Launcher ) ;", "m Velocity Tracker . compute Current Velocity ( NUM_ , config . get Scaled Maximum Fling Velocity ( ) ) ;", "if ( m Velocity Tracker . get Y Velocity ( ) < m Fling To Delete Threshold Velocity ) {", "Point F vel = new Point F ( m Velocity Tracker . get X Velocity ( ) , m Velocity Tracker . get Y Velocity ( ) ) ;", "Point F up Vec = new Point F ( NUM_ , - NUM_ ) ;", "float theta = ( float ) Math . acos ( ( ( vel . x * up Vec . x ) + ( vel . y * up Vec . y ) ) / ( vel . length ( ) * up Vec . length ( ) ) ) ;", "if ( theta <= Math . to Radians ( MAX FLING DEGREES ) ) {", "return vel ; } }", "return null ; }"]}
{"ids": "25040", "code": ["private int clamp Mag ( int value , int abs Min , int abs Max ) {", "final int abs Value = Math . abs ( value ) ;", "if ( abs Value < abs Min ) return NUM_ ;", "if ( abs Value > abs Max ) return value > NUM_ ? abs Max : - abs Max ;", "return value ; }"]}
{"ids": "37483", "code": ["public static void run Script ( final File file , final List < Pair < String , Object > > bindings ) throws Script Exception , IO Exception {", "final Script Engine engine = manager . get Engine By Extension ( File Utils . get File Extension ( file ) ) ;", "Preconditions . check Not Null ( engine , STR_ , file . get Absolute Path ( ) ) ;", "final String script = File Utils . read Textfile ( file ) ;", "run Script ( engine , script , bindings ) ; }"]}
{"ids": "10850", "code": ["public void add U Graphic ( U Graphic ug ) {", "graphics . add Element ( ug ) ; }"]}
{"ids": "76352", "code": ["public void apply ( ) throws Illegal State Exception {", "try {", "System . set Security Manager ( this ) ; }", "catch ( Security Exception e ) {", "logger . error ( STR_ , e ) ;", "throw new Illegal State Exception ( e ) ; } }"]}
{"ids": "14246", "code": ["public static Rule create A Get Post Rule ( String rule Name , String rule Url ) throws Policy Exception {", "Map < String , Set < String > > action Values = new Hash Map < String , Set < String > > ( ) ;", "Set < String > set = new Hash Set < String > ( ) ;", "set . add ( ALLOW DECISION ) ;", "action Values . put ( GET ACTION , set ) ;", "set = new Hash Set < String > ( ) ;", "set . add ( ALLOW DECISION ) ;", "action Values . put ( POST ACTION , set ) ;", "return new Rule ( rule Name , IPLANETAMWEBAGENTSERVICE , rule Url , action Values ) ; }"]}
{"ids": "25575", "code": ["public Fast Array List ( Collection < ? extends E > c ) {", "element Data = c . to Array ( ) ;", "size = element Data . length ;", "if ( element Data . get Class ( ) != Object [ ] . class ) element Data = Arrays . copy Of ( element Data , size , Object [ ] . class ) ; }"]}
{"ids": "40005", "code": ["void create Scene Vao ( ) {", "int vao = gl Gen Vertex Arrays ( ) ;", "int vbo = gl Gen Buffers ( ) ;", "gl Bind Vertex Array ( vao ) ;", "gl Bind Buffer ( GL ARRAY BUFFER , vbo ) ;", "long buffer Size = NUM_ * ( NUM_ + NUM_ ) * mesh . num Vertices ;", "long normals Offset = NUM_ * NUM_ * mesh . num Vertices ;", "gl Buffer Data ( GL ARRAY BUFFER , buffer Size , GL STATIC DRAW ) ;", "gl Buffer Sub Data ( GL ARRAY BUFFER , NUM_ , mesh . positions ) ;", "gl Buffer Sub Data ( GL ARRAY BUFFER , normals Offset , mesh . normals ) ;", "gl Enable Vertex Attrib Array ( NUM_ ) ;", "gl Vertex Attrib Pointer ( NUM_ , NUM_ , GL FLOAT , false , NUM_ , NUM_ ) ;", "gl Enable Vertex Attrib Array ( NUM_ ) ;", "gl Vertex Attrib Pointer ( NUM_ , NUM_ , GL FLOAT , false , NUM_ , normals Offset ) ;", "gl Bind Buffer ( GL ARRAY BUFFER , NUM_ ) ;", "gl Bind Vertex Array ( NUM_ ) ;", "this . vao Scene = vao ; }"]}
{"ids": "30180", "code": ["public List < ? > end Batch ( ) {", "List < ? > result = null ;", "if ( operations Batch . size ( ) > NUM_ ) {", "result = do Flush ( ) ; }", "use Batch = false ;", "operations Batch = null ;", "return result ; }"]}
{"ids": "65161", "code": ["private int calculate Layout Width ( int width Size , int mode ) {", "init Resources If Necessary ( ) ;", "items Layout . set Layout Params ( new Layout Params ( Layout Params . WRAP CONTENT , Layout Params . WRAP CONTENT ) ) ;", "items Layout . measure ( Measure Spec . make Measure Spec ( width Size , Measure Spec . UNSPECIFIED ) , Measure Spec . make Measure Spec ( NUM_ , Measure Spec . UNSPECIFIED ) ) ;", "int width = items Layout . get Measured Width ( ) ;", "if ( mode == Measure Spec . EXACTLY ) {", "width = width Size ; }", "else {", "width += NUM_ * PADDING ;", "width = Math . max ( width , get Suggested Minimum Width ( ) ) ;", "if ( mode == Measure Spec . AT MOST && width Size < width ) {", "width = width Size ; } }", "items Layout . measure ( Measure Spec . make Measure Spec ( width - NUM_ * PADDING , Measure Spec . EXACTLY ) , Measure Spec . make Measure Spec ( NUM_ , Measure Spec . UNSPECIFIED ) ) ;", "return width ; }"]}
{"ids": "836", "code": ["public static Collection remove Inner Class Names ( Collection col ) {", "List list = new Array List ( ) ;", "list . add All ( col ) ;", "Iterator it = list . iterator ( ) ;", "while ( it . has Next ( ) ) {", "String name = ( String ) it . next ( ) ;", "if ( name . index Of ( STR_ ) != - NUM_ ) it . remove ( ) ; }", "return list ; }"]}
{"ids": "63720", "code": ["public Trie Node find ( String word ) {", "return ( word . length ( ) < NUM_ ? null : find ( word , root , NUM_ ) ) ; }"]}
{"ids": "24684", "code": ["public String encode ( Byte Buffer a Buffer ) {", "byte [ ] buf = get Bytes ( a Buffer ) ;", "return encode ( buf ) ; }"]}
{"ids": "79225", "code": ["public static int clear List Info ( Delegator delegator , String shopping List Id ) throws Generic Entity Exception {", "delegator . remove By And ( STR_ , Util Misc . to Map ( STR_ , shopping List Id ) ) ;", "return delegator . remove By And ( STR_ , Util Misc . to Map ( STR_ , shopping List Id ) ) ; }"]}
{"ids": "86078", "code": ["private synchronized void handle Watchdog ( ) {", "final int exit Code ;", "if ( watchdog == null ) return ;", "if ( watchdog Timeout == NUM_ ) return ;", "if ( ! is Running ( ) ) {", "exit Code = On Command Result Listener . SHELL DIED ;", "Debug . log ( String . format ( STR_ , shell . to Upper Case ( Locale . ENGLISH ) ) ) ; }", "else if ( watchdog Count ++ < watchdog Timeout ) {", "return ; }", "else {", "exit Code = On Command Result Listener . WATCHDOG EXIT ;", "Debug . log ( String . format ( STR_ , shell . to Upper Case ( Locale . ENGLISH ) ) ) ; }", "if ( handler != null ) {", "post Callback ( command , exit Code , buffer ) ; }", "command = null ;", "buffer = null ;", "idle = true ;", "watchdog . shutdown ( ) ;", "watchdog = null ;", "kill ( ) ; }"]}
{"ids": "47872", "code": ["public synchronized boolean has Service ( Class service Class ) {", "if ( service Class == null ) throw new Null Pointer Exception ( STR_ ) ;", "synchronized ( Bean Context . global Hierarchy Lock ) {", "if ( services . contains Key ( service Class ) ) return true ;", "Bean Context Services bcs = null ;", "try {", "bcs = ( Bean Context Services ) get Bean Context ( ) ; }", "catch ( Class Cast Exception cce ) {", "return false ; }", "return bcs == null ? false : bcs . has Service ( service Class ) ; } }"]}
{"ids": "40643", "code": ["public boolean is Ping Disabled ( ) {", "return ( null != healthcheck && ! healthcheck . exists ( ) ) ; }"]}
{"ids": "83434", "code": ["public static String format ( Integer i ) {", "if ( i == null ) return null ;", "return i . to String ( ) ; }"]}
{"ids": "2735", "code": ["public Filename Utils ( ) {", "super ( ) ; }"]}
{"ids": "45312", "code": ["public void dump Nodes ( Path web Graph Db , Dump Type type , long top N , Path output , boolean as Eff , Name Type name Type , Aggr Type aggr Type , boolean as Sequence File ) throws Exception {", "Simple Date Format sdf = new Simple Date Format ( STR_ ) ;", "long start = System . current Time Millis ( ) ;", "LOG . info ( STR_ + sdf . format ( start ) ) ;", "Path node Db = new Path ( web Graph Db , Web Graph . NODE DIR ) ;", "Configuration conf = get Conf ( ) ;", "Job Conf dumper = new Nutch Job ( conf ) ;", "dumper . set Job Name ( STR_ + web Graph Db ) ;", "File Input Format . add Input Path ( dumper , node Db ) ;", "dumper . set Input Format ( Sequence File Input Format . class ) ;", "if ( name Type == null ) {", "dumper . set Mapper Class ( Sorter . class ) ;", "dumper . set Reducer Class ( Sorter . class ) ;", "dumper . set Map Output Key Class ( Float Writable . class ) ;", "dumper . set Map Output Value Class ( Text . class ) ; }", "else {", "dumper . set Mapper Class ( Dumper . class ) ;", "dumper . set Reducer Class ( Dumper . class ) ;", "dumper . set Map Output Key Class ( Text . class ) ;", "dumper . set Map Output Value Class ( Float Writable . class ) ; }", "dumper . set Output Key Class ( Text . class ) ;", "dumper . set Output Value Class ( Float Writable . class ) ;", "File Output Format . set Output Path ( dumper , output ) ;", "if ( as Sequence File ) {", "dumper . set Output Format ( Sequence File Output Format . class ) ; }", "else {", "dumper . set Output Format ( Text Output Format . class ) ; }", "dumper . set Num Reduce Tasks ( NUM_ ) ;", "dumper . set Boolean ( STR_ , type == Dump Type . INLINKS ) ;", "dumper . set Boolean ( STR_ , type == Dump Type . OUTLINKS ) ;", "dumper . set Boolean ( STR_ , type == Dump Type . SCORES ) ;", "dumper . set Boolean ( STR_ , name Type == Name Type . HOST ) ;", "dumper . set Boolean ( STR_ , name Type == Name Type . DOMAIN ) ;", "dumper . set Boolean ( STR_ , aggr Type == Aggr Type . SUM ) ;", "dumper . set Boolean ( STR_ , aggr Type == Aggr Type . MAX ) ;", "dumper . set Long ( STR_ , top N ) ;", "if ( as Eff ) {", "dumper . set ( STR_ , STR_ ) ; }", "try {", "LOG . info ( STR_ ) ;", "Job Client . run Job ( dumper ) ; }", "catch ( IO Exception e ) {", "LOG . error ( String Utils . stringify Exception ( e ) ) ;", "throw e ; }", "long end = System . current Time Millis ( ) ;", "LOG . info ( STR_ + sdf . format ( end ) + STR_ + Timing Util . elapsed Time ( start , end ) ) ; }"]}
{"ids": "29065", "code": ["public static String convert Method Signature ( String class Name , String method Name , String method Sig , String pkg Name ) {", "String Builder args = new String Builder ( ) ;", "Signature Converter converter = new Signature Converter ( method Sig ) ;", "converter . skip ( ) ;", "args . append ( STR_ ) ;", "while ( converter . get First ( ) != STR_ ) {", "if ( args . length ( ) > NUM_ ) {", "args . append ( STR_ ) ; }", "args . append ( shorten ( pkg Name , converter . parse Next ( ) ) ) ; }", "converter . skip ( ) ;", "args . append ( STR_ ) ;", "String Builder result = new String Builder ( ) ;", "result . append ( class Name ) ;", "result . append ( STR_ ) ;", "result . append ( method Name ) ;", "result . append ( args . to String ( ) ) ;", "return result . to String ( ) ; }"]}
{"ids": "31780", "code": ["private void new Unit Received ( Grid Uri Deployment Unit Descriptor new Desc , Collection < Class < ? > > clss ) {", "assert new Desc != null ;", "assert new Desc . get Type ( ) == Grid Uri Deployment Unit Descriptor . Type . FILE ;", "if ( clss != null && ! clss . is Empty ( ) ) {", "try {", "add Resources ( new Desc . get Class Loader ( ) , new Desc , clss . to Array ( new Class < ? > [ clss . size ( ) ] ) ) ; }", "catch ( Ignite Spi Exception e ) {", "U . warn ( log , STR_ + new Desc + STR_ + e . get Message ( ) + STR_ ) ; } }", "Collection < Class Loader > rmv Cls Ldrs = new Array List < > ( ) ;", "synchronized ( mux ) {", "if ( check Md 5 && unit Deployed ( new Desc . get Md 5 ( ) ) ) {", "if ( log . is Info Enabled ( ) ) LT . info ( log , STR_ + STR_ + U . hide Password ( new Desc . get Uri ( ) ) + STR_ + ( new Desc . get File ( ) == null ? STR_ : new Desc . get File ( ) ) + STR_ ) ;", "return ; }", "boolean is Added = false ;", "boolean ignore New Unit = false ;", "for ( List Iterator < Grid Uri Deployment Unit Descriptor > iter = unit Loaders . list Iterator ( ) ; iter . has Next ( ) ; ) {", "Grid Uri Deployment Unit Descriptor desc = iter . next ( ) ;", "assert ! new Desc . get Class Loader ( ) . equals ( desc . get Class Loader ( ) ) : STR_ + new Desc ;", "if ( desc . get Type ( ) == Grid Uri Deployment Unit Descriptor . Type . FILE && new Desc . get Uri ( ) . equals ( desc . get Uri ( ) ) && ! new Desc . get File ( ) . equals ( desc . get File ( ) ) ) {", "iter . remove ( ) ;", "rmv Cls Ldrs . add ( desc . get Class Loader ( ) ) ;", "if ( ! iter . has Next ( ) ) break ;", "continue ; }", "if ( ! is Added ) {", "if ( unit Comp . compare ( new Desc , desc ) <= NUM_ ) {", "if ( check Unit Collision ( desc , new Desc ) ) {", "iter . remove ( ) ;", "iter . add ( new Desc ) ;", "rmv Cls Ldrs . add ( desc . get Class Loader ( ) ) ; }", "else {", "iter . set ( new Desc ) ;", "iter . add ( desc ) ; }", "is Added = true ; }", "else if ( check Unit Collision ( new Desc , desc ) ) {", "ignore New Unit = true ;", "break ; } }", "else if ( check Unit Collision ( new Desc , desc ) ) {", "iter . remove ( ) ;", "rmv Cls Ldrs . add ( desc . get Class Loader ( ) ) ; } }", "if ( ! ignore New Unit ) {", "if ( ! is Added ) unit Loaders . add ( new Desc ) ;", "if ( log . is Debug Enabled ( ) ) LT . info ( log , STR_ + new Desc . get Class Loader ( ) + STR_ + new Desc . get Timestamp ( ) + STR_ + U . hide Password ( new Desc . get Uri ( ) ) + STR_ + ( new Desc . get File ( ) == null ? STR_ : new Desc . get File ( ) ) + STR_ ) ; } }", "for ( Class Loader cld Ldr : rmv Cls Ldrs ) on Unit Released ( cld Ldr ) ; }"]}
{"ids": "11347", "code": ["public static String canonical ID ( String id ) {", "if ( id == null ) return STR_ ;", "int st = NUM_ ;", "int len = id . length ( ) ;", "boolean substr = false ;", "int c ;", "while ( st < len && ( ( c = id . char At ( st ) ) == STR_ || c <= STR_ ) ) {", "st ++ ;", "substr = true ; }", "while ( st < len && ( ( c = id . char At ( len - NUM_ ) ) == STR_ || c <= STR_ ) ) {", "len -- ;", "substr = true ; }", "return substr ? id . substring ( st , len ) : id ; }"]}
{"ids": "24834", "code": ["private static void encode Binary ( byte [ ] bytes , int startpos , int count , int startmode , String Builder sb ) {", "if ( count == NUM_ && startmode == TEXT COMPACTION ) {", "sb . append ( ( char ) SHIFT TO BYTE ) ; }", "else {", "boolean sixpack = ( ( count % NUM_ ) == NUM_ ) ;", "if ( sixpack ) {", "sb . append ( ( char ) LATCH TO BYTE ) ; }", "else {", "sb . append ( ( char ) LATCH TO BYTE PADDED ) ; } }", "int idx = startpos ;", "if ( count >= NUM_ ) {", "char [ ] chars = new char [ NUM_ ] ;", "while ( ( startpos + count - idx ) >= NUM_ ) {", "long t = NUM_ ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "t <<= NUM_ ;", "t += bytes [ idx + i ] & NUM_ ; }", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "chars [ i ] = ( char ) ( t % NUM_ ) ;", "t /= NUM_ ; }", "for ( int i = chars . length - NUM_ ; i >= NUM_ ; i -- ) {", "sb . append ( chars [ i ] ) ; }", "idx += NUM_ ; } }", "for ( int i = idx ; i < startpos + count ; i ++ ) {", "int ch = bytes [ i ] & NUM_ ;", "sb . append ( ( char ) ch ) ; } }"]}
{"ids": "53650", "code": ["@ Override public void step ( Message Logger logger ) {", "try {", "add Agent ( ) ;", "env . step ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "689", "code": ["private static boolean is Non Left ( int i 0 , int i 1 , int i 2 , int i 3 , double [ ] pts ) {", "double l 1 , l 2 , l 4 , l 5 , l 6 , angle 1 , angle 2 , angle ;", "l 1 = Math . sqrt ( Math . pow ( pts [ i 2 + NUM_ ] - pts [ i 1 + NUM_ ] , NUM_ ) + Math . pow ( pts [ i 2 ] - pts [ i 1 ] , NUM_ ) ) ;", "l 2 = Math . sqrt ( Math . pow ( pts [ i 3 + NUM_ ] - pts [ i 2 + NUM_ ] , NUM_ ) + Math . pow ( pts [ i 3 ] - pts [ i 2 ] , NUM_ ) ) ;", "l 4 = Math . sqrt ( Math . pow ( pts [ i 3 + NUM_ ] - pts [ i 0 + NUM_ ] , NUM_ ) + Math . pow ( pts [ i 3 ] - pts [ i 0 ] , NUM_ ) ) ;", "l 5 = Math . sqrt ( Math . pow ( pts [ i 1 + NUM_ ] - pts [ i 0 + NUM_ ] , NUM_ ) + Math . pow ( pts [ i 1 ] - pts [ i 0 ] , NUM_ ) ) ;", "l 6 = Math . sqrt ( Math . pow ( pts [ i 2 + NUM_ ] - pts [ i 0 + NUM_ ] , NUM_ ) + Math . pow ( pts [ i 2 ] - pts [ i 0 ] , NUM_ ) ) ;", "angle 1 = Math . acos ( ( ( l 2 * l 2 ) + ( l 6 * l 6 ) - ( l 4 * l 4 ) ) / ( NUM_ * l 2 * l 6 ) ) ;", "angle 2 = Math . acos ( ( ( l 6 * l 6 ) + ( l 1 * l 1 ) - ( l 5 * l 5 ) ) / ( NUM_ * l 6 * l 1 ) ) ;", "angle = ( Math . PI - angle 1 ) - angle 2 ;", "if ( angle <= NUM_ ) {", "return ( true ) ; }", "else {", "return ( false ) ; } }"]}
{"ids": "38409", "code": ["protected void copy 2 D Array ( int from [ ] [ ] , int to [ ] [ ] ) {", "for ( int i = NUM_ ; i < from . length ; i ++ ) {", "to [ i ] = new int [ from [ i ] . length ] ;", "System . arraycopy ( from [ i ] , NUM_ , to [ i ] , NUM_ , from [ i ] . length ) ; } }"]}
{"ids": "6775", "code": ["public static < K , V > Map < K , V > of ( K k 1 , V v 1 , K k 2 , V v 2 , K k 3 , V v 3 ) {", "Map map = of ( ) ;", "map . put ( k 1 , v 1 ) ;", "map . put ( k 2 , v 2 ) ;", "map . put ( k 3 , v 3 ) ;", "return map ; }"]}
{"ids": "33118", "code": ["public boolean fill ( Reader reader , int pos ) throws IO Exception {", "int res = reader . read ( f Buf ) ;", "if ( res == - NUM_ ) {", "f Offset = pos ;", "f Length = NUM_ ;", "return true ; }", "int chars Read = res ;", "while ( chars Read < BUFFER SIZE ) {", "res = reader . read ( f Buf , chars Read , BUFFER SIZE - chars Read ) ;", "if ( res == - NUM_ ) {", "f Offset = pos ;", "f Length = chars Read ;", "return true ; }", "chars Read += res ; }", "f Offset = pos ;", "f Length = BUFFER SIZE ;", "return false ; }"]}
{"ids": "6957", "code": ["public void draw In Rect ( GL 10 gl , CG Rect rect ) {", "gl . gl Enable ( GL TEXTURE 2 D ) ;", "load Texture ( gl ) ;", "float vertices [ ] = { rect . origin . x , rect . origin . y , rect . origin . x + rect . size . width , rect . origin . y , rect . origin . x , rect . origin . y + rect . size . height , rect . origin . x + rect . size . width , rect . origin . y + rect . size . height } ;", "m Vertices . put ( vertices ) ;", "m Vertices . position ( NUM_ ) ;", "float coordinates [ ] = { NUM_ , max T , max S , max T , NUM_ , NUM_ , max S , NUM_ } ;", "m Coordinates . put ( coordinates ) ;", "m Coordinates . position ( NUM_ ) ;", "gl . gl Enable Client State ( GL VERTEX ARRAY ) ;", "gl . gl Enable Client State ( GL TEXTURE COORD ARRAY ) ;", "gl . gl Bind Texture ( GL TEXTURE 2 D , name ) ;", "gl . gl Tex Parameterx ( GL TEXTURE 2 D , GL TEXTURE WRAP S , GL REPEAT ) ;", "gl . gl Tex Parameterx ( GL TEXTURE 2 D , GL TEXTURE WRAP T , GL REPEAT ) ;", "gl . gl Vertex Pointer ( NUM_ , GL FLOAT , NUM_ , m Vertices ) ;", "gl . gl Tex Coord Pointer ( NUM_ , GL FLOAT , NUM_ , m Coordinates ) ;", "gl . gl Draw Arrays ( GL TRIANGLE STRIP , NUM_ , NUM_ ) ;", "gl . gl Disable Client State ( GL VERTEX ARRAY ) ;", "gl . gl Disable Client State ( GL TEXTURE COORD ARRAY ) ;", "gl . gl Disable ( GL TEXTURE 2 D ) ; }"]}
{"ids": "2764", "code": ["synchronized void executed ( RT Edit Text editor , Operation op ) {", "Stack < Operation > undo Stack = get Undo Stack ( editor ) ;", "Stack < Operation > redo Stack = get Redo Stack ( editor ) ;", "while ( ! undo Stack . empty ( ) && op . can Merge ( undo Stack . peek ( ) ) ) {", "Operation previous Op = undo Stack . pop ( ) ;", "op . merge ( previous Op ) ; }", "push ( op , undo Stack ) ;", "redo Stack . clear ( ) ; }"]}
{"ids": "39932", "code": ["public void remove Swipe Listener ( Swipe Listener listener ) {", "if ( m Listeners == null ) {", "return ; }", "m Listeners . remove ( listener ) ; }"]}
{"ids": "22176", "code": ["public static boolean is Oss Build ( ) {", "boolean is Oss Build = false ;", "String build Type = System . get Property ( STR_ ) ;", "if ( String Utils . is Not Blank ( build Type ) && build Type . equals Ignore Case ( STR_ ) ) {", "is Oss Build = true ; }", "return is Oss Build ; }"]}
{"ids": "26898", "code": ["public void invoke Hook Bolt Execute ( Tuple tuple , long execute Latency Ns ) {", "if ( task Hooks . size ( ) != NUM_ ) {", "Bolt Execute Info execute Info = new Bolt Execute Info ( tuple , get This Task Id ( ) , execute Latency Ns / Constants . MILLISECONDS TO NANOSECONDS ) ;", "for ( I Task Hook task Hook : task Hooks ) {", "task Hook . bolt Execute ( execute Info ) ; } } }"]}
{"ids": "56784", "code": ["private void validate Iam Roles ( List < Iam Role > iam Roles ) {", "Assert . not Null ( iam Roles , STR_ ) ;", "Assert . is True ( iam Roles . size ( ) > NUM_ , STR_ ) ;", "for ( Iam Role iam Role : iam Roles ) {", "Assert . not Null ( iam Role , STR_ ) ;", "Assert . has Text ( iam Role . get Iam Role Name ( ) , STR_ ) ; } }"]}
{"ids": "75901", "code": ["public static Intent build Start In Background Intent ( File script ) {", "final Component Name component Name = Constants . SL 4 A SERVICE LAUNCHER COMPONENT NAME ;", "Intent intent = new Intent ( ) ;", "intent . set Component ( component Name ) ;", "intent . set Action ( Constants . ACTION LAUNCH BACKGROUND SCRIPT ) ;", "intent . put Extra ( Constants . EXTRA SCRIPT PATH , script . get Absolute Path ( ) ) ;", "return intent ; }"]}
{"ids": "82564", "code": ["public static java . lang . String value Of ( java . lang . Object obj ) {", "return obj == null ? STR_ : obj . to String ( ) ; }"]}
{"ids": "77198", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) public Span Multi Term Query Wrapper ( Q query ) {", "this . query = Objects . require Non Null ( query ) ;", "this . rewrite Method = select Rewrite Method ( query ) ; }"]}
{"ids": "84173", "code": ["public void write Map End ( ) throws IO Exception {", "os . write ( STR_ ) ; }"]}
{"ids": "82740", "code": ["public Shape create Arrow Up ( final double x , final double y , final double w , final double h ) {", "path . reset ( ) ;", "path . move To ( x , y + h ) ;", "path . line To ( x + w / NUM_ , y ) ;", "path . line To ( x + w , y + h ) ;", "path . close Path ( ) ;", "return path ; }"]}
{"ids": "53420", "code": ["protected void fire Value Changed ( ) {", "Change Event evt = new Change Event ( this ) ;", "for ( Change Listener listener : listener List . get Listeners ( Change Listener . class ) ) {", "listener . state Changed ( evt ) ; } }"]}
{"ids": "79452", "code": ["public static void stream Content To Browser ( Http Servlet Response response , Input Stream in , int length , String content Type , String file Name ) throws IO Exception {", "set Response Browser Proxy No Cache ( response ) ;", "response . set Content Length ( length ) ;", "if ( content Type != null ) {", "response . set Content Type ( content Type ) ; }", "if ( file Name != null ) {", "response . set Header ( STR_ , STR_ + file Name ) ; }", "Output Stream out = response . get Output Stream ( ) ;", "try {", "stream Content ( out , in , length ) ; }", "catch ( IO Exception e ) {", "out . close ( ) ;", "throw e ; }", "out . flush ( ) ;", "out . close ( ) ; }"]}
{"ids": "62703", "code": ["public static Byte Buffer encode ( String string ) throws Character Coding Exception {", "return encode ( string , true ) ; }"]}
{"ids": "81197", "code": ["public void disable Realtime Steps Notify ( ) {", "check Connection ( ) ;", "final List < BLE Action > list = new Array List < > ( ) ;", "list . add ( new Write Action ( Profile . UUID CHAR CONTROL POINT , Protocol . DISABLE REALTIME STEPS NOTIFY ) ) ;", "queue ( list ) ; }"]}
{"ids": "81738", "code": ["private static void stable String Sort ( String [ ] arr , String [ ] src , String [ ] dst , int start , int end , int ch Id ) {", "int length = end - start ;", "if ( length < SIMPLE LENGTH ) {", "if ( src == arr ) {", "for ( int i = start + NUM_ ; i < end ; i ++ ) {", "String current = arr [ i ] ;", "String prev = arr [ i - NUM_ ] ;", "if ( current . compare To ( prev ) < NUM_ ) {", "int j = i ;", "do {", "arr [ j -- ] = prev ; }", "while ( j > start && current . compare To ( prev = arr [ j - NUM_ ] ) < NUM_ ) ;", "arr [ j ] = current ; } } }", "else {", "int actual End = end - NUM_ ;", "dst [ start ] = src [ actual End -- ] ;", "for ( int i = start + NUM_ ; i < end ; i ++ , actual End -- ) {", "String current = src [ actual End ] ;", "String prev ;", "int j = i ;", "while ( j > start && current . compare To ( prev = dst [ j - NUM_ ] ) < NUM_ ) {", "dst [ j -- ] = prev ; }", "dst [ j ] = current ; } }", "return ; }", "int s ;", "int mid = start + length / NUM_ ;", "int lo = start ;", "int hi = end - NUM_ ;", "if ( length > NUM_ ) {", "s = length / NUM_ ;", "lo = med Char ( lo , lo + s , lo + s * NUM_ , src , ch Id ) ;", "mid = med Char ( mid - s , mid , mid + s , src , ch Id ) ;", "hi = med Char ( hi , hi - s , hi - s * NUM_ , src , ch Id ) ; }", "mid = med Char ( lo , mid , hi , src , ch Id ) ;", "int mid Val = char At ( src [ mid ] , ch Id ) ;", "int a , b , c ;", "a = b = start ;", "c = end - NUM_ ;", "int cmp ;", "for ( int i = start ; i < end ; i ++ ) {", "String el = src [ i ] ;", "cmp = char At ( el , ch Id ) - mid Val ;", "if ( cmp < NUM_ ) {", "src [ a ] = el ;", "a ++ ; }", "else if ( cmp > NUM_ ) {", "dst [ c ] = el ;", "c -- ; }", "else {", "dst [ b ] = el ;", "b ++ ; } }", "s = b - start ;", "if ( s > NUM_ ) {", "if ( arr == src ) {", "System . arraycopy ( dst , start , arr , a , s ) ; }", "else {", "copy Swap ( dst , start , arr , a , s ) ; }", "if ( b >= end && mid Val == - NUM_ ) {", "return ; }", "stable String Sort ( arr , arr , arr == dst ? src : dst , a , a + s , ch Id + NUM_ ) ; }", "s = a - start ;", "if ( s > NUM_ ) {", "stable String Sort ( arr , src , dst , start , a , ch Id ) ; }", "c ++ ;", "s = end - c ;", "if ( s > NUM_ ) {", "stable String Sort ( arr , dst , src , c , end , ch Id ) ; } }"]}
{"ids": "3070", "code": ["private static Class < ? > [ ] types ( Object ... values ) {", "if ( values == null ) {", "return new Class [ NUM_ ] ; }", "Class < ? > [ ] result = new Class [ values . length ] ;", "for ( int i = NUM_ ; i < values . length ; i ++ ) {", "Object value = values [ i ] ;", "result [ i ] = value == null ? NULL . class : value . get Class ( ) ; }", "return result ; }"]}
{"ids": "10874", "code": ["public static void un Register Tile Codec ( int comp ) {", "XTIFF Tile Codec cod = get Tile Codec ( comp ) ;", "tile Codecs . remove ( cod ) ; }"]}
{"ids": "21282", "code": ["public static void escape ( Str Builder to Append , String text , boolean escape Quote , boolean escape Apos ) {", "if ( text == null ) {", "return ; }", "for ( int i = NUM_ ; i < text . length ( ) ; i ++ ) {", "char ch = text . char At ( i ) ;", "switch ( ch ) {", "case STR_ :", "to Append . append ( STR_ ) ;", "break ;", "case STR_ :", "to Append . append ( STR_ ) ;", "break ;", "case STR_ :", "to Append . append ( STR_ ) ;", "break ;", "case STR_ :", "to Append . append ( escape Quote ? STR_ : ch ) ;", "break ;", "case STR_ :", "to Append . append ( escape Apos ? STR_ : ch ) ;", "break ;", "default :", "to Append . append ( ch ) ;", "break ; } } }"]}
{"ids": "44780", "code": ["public void destroy ( ) {", "m Listeners . clear ( ) ;", "m Spring System . deregister Spring ( this ) ; }"]}
{"ids": "38711", "code": ["@ Override public synchronized void remove Instance Listener ( Instance Listener tsl ) {", "m instance Listeners . remove Element ( tsl ) ; }"]}
{"ids": "61033", "code": ["private String read Until ( char [ ] delimiter , boolean return Text ) throws IO Exception , Xml Pull Parser Exception {", "int start = position ;", "String Builder result = null ;", "if ( return Text && text != null ) {", "result = new String Builder ( ) ;", "result . append ( text ) ; }", "search : while ( true ) {", "if ( position + delimiter . length > limit ) {", "if ( start < position && return Text ) {", "if ( result == null ) {", "result = new String Builder ( ) ; }", "result . append ( buffer , start , position - start ) ; }", "if ( ! fill Buffer ( delimiter . length ) ) {", "check Relaxed ( UNEXPECTED EOF ) ;", "type = COMMENT ;", "return null ; }", "start = position ; }", "for ( int i = NUM_ ; i < delimiter . length ; i ++ ) {", "if ( buffer [ position + i ] != delimiter [ i ] ) {", "position ++ ;", "continue search ; } }", "break ; }", "int end = position ;", "position += delimiter . length ;", "if ( ! return Text ) {", "return null ; }", "else if ( result == null ) {", "return string Pool . get ( buffer , start , end - start ) ; }", "else {", "result . append ( buffer , start , end - start ) ;", "return result . to String ( ) ; } }"]}
{"ids": "55424", "code": ["private void toggle Favorite ( ) {", "for ( String game : list . get Selected Values List ( ) ) {", "if ( favorites . contains ( game ) ) {", "favorites . remove ( game ) ; }", "else {", "favorites . add ( game ) ; } }", "save Favorites ( ) ;", "update ( ) ; }"]}
{"ids": "24331", "code": ["private void create Partition Region ( List vm List , int start Index For Region , int end Index For Region , int local Max Memory , int redundancy , boolean first Creation Flag , boolean multiple VM Flag ) {", "Iterator node Iterator = vm List . iterator ( ) ;", "while ( node Iterator . has Next ( ) ) {", "VM vm = ( VM ) node Iterator . next ( ) ;", "vm . invoke ( create Multiple Partition Region ( pr Prefix , start Index For Region , end Index For Region , redundancy , local Max Memory , first Creation Flag , multiple VM Flag ) ) ; } }"]}
{"ids": "57436", "code": ["public int write ( byte [ ] dest Mac , byte [ ] packet , int offset , int byte Count ) {", "if ( dest Mac == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( packet == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "Arrays . check Offset And Count ( packet . length , offset , byte Count ) ;", "if ( dest Mac . length != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + dest Mac . length ) ; }", "return send Packet ( fd , m Interface Name , m Protocol Type , dest Mac , packet , offset , byte Count ) ; }"]}
{"ids": "79701", "code": ["public boolean has Extensions With Deps ( ) {", "return ! extensions With Deps . is Empty ( ) ; }"]}
{"ids": "52583", "code": ["public synchronized void add Series ( XY Series series ) {", "m Series . add ( series ) ; }"]}
{"ids": "77963", "code": ["private int [ ] calculate Task Count Per Container ( int task Count , int prev Container Count , int current Container Count ) {", "int [ ] new Task Count Per Container = new int [ Math . max ( current Container Count , prev Container Count ) ] ;", "Arrays . fill ( new Task Count Per Container , NUM_ ) ;", "for ( int i = NUM_ ; i < current Container Count ; i ++ ) {", "new Task Count Per Container [ i ] = task Count / current Container Count ;", "if ( task Count % current Container Count > i ) {", "new Task Count Per Container [ i ] ++ ; } }", "return new Task Count Per Container ; }"]}
{"ids": "83012", "code": ["@ Override public void action Perform ( Component component ) {", "if ( ! is Enabled ( ) ) {", "return ; }", "if ( before Action Performed Handler != null ) {", "if ( ! before Action Performed Handler . before Action Performed ( ) ) return ; }", "Set selected = target . get Selected ( ) ;", "if ( ! selected . is Empty ( ) ) {", "if ( confirm ) {", "confirm And Remove ( selected ) ; }", "else {", "remove ( selected ) ; } } }"]}
{"ids": "48066", "code": ["static public void generate Seed ( byte [ ] result ) {", "instance . get Seed Bytes ( result ) ; }"]}
{"ids": "53467", "code": ["private double hamming Distance Number Vector ( Number Vector o 1 , Number Vector o 2 ) {", "final int d 1 = o 1 . get Dimensionality ( ) , d 2 = o 2 . get Dimensionality ( ) ;", "int differences = NUM_ ;", "int d = NUM_ ;", "for ( ; d < d 1 && d < d 2 ; d ++ ) {", "double v 1 = o 1 . double Value ( d ) , v 2 = o 2 . double Value ( d ) ;", "if ( v 1 != v 1 || v 2 != v 2 ) {", "continue ; }", "if ( v 1 != v 2 ) {", "++ differences ; } }", "for ( ; d < d 1 ; d ++ ) {", "double v 1 = o 1 . double Value ( d ) ;", "if ( v 1 != NUM_ && v 1 == v 1 ) {", "++ differences ; } }", "for ( ; d < d 2 ; d ++ ) {", "double v 2 = o 2 . double Value ( d ) ;", "if ( v 2 != NUM_ && v 2 == v 2 ) {", "++ differences ; } }", "return differences ; }"]}
{"ids": "36075", "code": ["public static Kernel create Kernel ( int kernel Type ) {", "switch ( kernel Type ) {", "case KERNEL RADIAL :", "return new Kernel Radial ( ) ;", "case KERNEL POLYNOMIAL :", "return new Kernel Polynomial ( ) ;", "case KERNEL NEURAL :", "return new Kernel Neural ( ) ;", "default :", "return new Kernel Dot ( ) ; } }"]}
{"ids": "22038", "code": ["protected void check For Pending Tasks ( Collection < URI > tenants , Collection < ? extends Data Object > data Objects ) {", "for ( URI tenant : tenants ) {", "check For Pending Tasks ( tenant , data Objects ) ; } }"]}
{"ids": "26652", "code": ["@ org . junit . Test public void verify Get Float Response ( ) throws Exception {", "Map < String , String > query Params = new Hash Map < String , String > ( ) ;", "String str = client . invoke API ( STR_ , STR_ , query Params , null , new Hash Map < String , String > ( ) , null , STR_ , null , new String [ NUM_ ] ) ;", "assert Equals ( str , String . value Of ( Example Builder . SAMPLE FLOAT PROPERTY VALUE ) ) ; }"]}
{"ids": "74238", "code": ["public void write Operations Car File ( ) {", "make Backup File ( default Operations Filename ( ) ) ;", "try {", "if ( ! check File ( default Operations Filename ( ) ) ) {", "java . io . File file = new java . io . File ( default Operations Filename ( ) ) ;", "java . io . File parent Dir = file . get Parent File ( ) ;", "if ( ! parent Dir . exists ( ) ) {", "if ( ! parent Dir . mkdir ( ) ) {", "log . error ( STR_ ) ; } }", "if ( file . create New File ( ) ) {", "log . debug ( STR_ ) ; } }", "write File ( default Operations Filename ( ) ) ; }", "catch ( Exception e ) {", "log . error ( STR_ + e ) ; } }"]}
{"ids": "2375", "code": ["private synchronized void rebuild Journal ( ) throws IO Exception {", "if ( journal Writer != null ) {", "journal Writer . close ( ) ; }", "Writer writer = new Buffered Writer ( new File Writer ( journal File Tmp ) , IO BUFFER SIZE ) ;", "writer . write ( MAGIC ) ;", "writer . write ( STR_ ) ;", "writer . write ( VERSION 1 ) ;", "writer . write ( STR_ ) ;", "writer . write ( Integer . to String ( app Version ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( Integer . to String ( value Count ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( STR_ ) ;", "for ( Entry entry : lru Entries . values ( ) ) {", "if ( entry . current Editor != null ) {", "writer . write ( DIRTY + STR_ + entry . key + STR_ ) ; }", "else {", "writer . write ( CLEAN + STR_ + entry . key + entry . get Lengths ( ) + STR_ ) ; } }", "writer . close ( ) ;", "journal File Tmp . rename To ( journal File ) ;", "journal Writer = new Buffered Writer ( new File Writer ( journal File , true ) , IO BUFFER SIZE ) ; }"]}
{"ids": "72470", "code": ["public static double median ( final double [ ] values ) {", "final int len = values . length ;", "final double [ ] sorted Values = Arrays . copy Of ( values , len ) ;", "Arrays . sort ( sorted Values ) ;", "if ( len % NUM_ == NUM_ ) {", "return ( ( double ) sorted Values [ len / NUM_ ] + ( double ) sorted Values [ len / NUM_ - NUM_ ] ) / NUM_ ; }", "else {", "return ( double ) sorted Values [ len / NUM_ ] ; } }"]}
{"ids": "79075", "code": ["private List < Block Info > fill Segment Id To Table Info Map ( List < Table Block Info > table Block Infos , Absolute Table Identifier absolute Table Identifier ) {", "Map < String , List < Block Info > > map = segment Id To Block List Map . get ( absolute Table Identifier ) ;", "if ( null == map ) {", "map = new Concurrent Hash Map < String , List < Block Info > > ( ) ;", "segment Id To Block List Map . put ( absolute Table Identifier , map ) ; }", "Block Info temp = null ;", "List < Block Info > block Infos Need To Load = new Array List < > ( ) ;", "for ( Table Block Info info : table Block Infos ) {", "List < Block Info > temp Table Block Infos = map . get ( info . get Segment Id ( ) ) ;", "if ( null == temp Table Block Infos ) {", "temp Table Block Infos = new Array List < > ( ) ;", "map . put ( info . get Segment Id ( ) , temp Table Block Infos ) ; }", "temp = new Block Info ( info ) ;", "if ( ! temp Table Block Infos . contains ( temp ) ) {", "temp Table Block Infos . add ( temp ) ; }", "block Infos Need To Load . add ( temp ) ; }", "return block Infos Need To Load ; }"]}
{"ids": "60913", "code": ["public Char Buffer put ( String str , int start , int end ) {", "if ( is Read Only ( ) ) {", "throw new Read Only Buffer Exception ( ) ; }", "if ( start < NUM_ || end < start || end > str . length ( ) ) {", "throw new Index Out Of Bounds Exception ( STR_ + str . length ( ) + STR_ + start + STR_ + end ) ; }", "if ( end - start > remaining ( ) ) {", "throw new Buffer Overflow Exception ( ) ; }", "for ( int i = start ; i < end ; i ++ ) {", "put ( str . char At ( i ) ) ; }", "return this ; }"]}
{"ids": "78895", "code": ["public List < Offer Recommendation > evaluate ( List < Offer > offers ) {", "List < Offer Recommendation > recommendations = new Array List < Offer Recommendation > ( ) ;", "int offer Resource Count = NUM_ ;", "for ( Offer offer : offers ) {", "offer Resource Count += offer . get Resources Count ( ) ;", "for ( Resource to Destroy : select Unexpected Resources ( expected Persistent Volume Ids , get Persistent Volumes By Id ( offer ) ) ) {", "recommendations . add ( new Destroy Offer Recommendation ( offer , to Destroy ) ) ; } }", "int destroy Recommendation Count = recommendations . size ( ) ;", "for ( Offer offer : offers ) {", "for ( Resource to Unreserve : select Unexpected Resources ( expected Reserved Resource Ids , get Reserved Resources By Id ( offer ) ) ) {", "recommendations . add ( new Unreserve Offer Recommendation ( offer , to Unreserve ) ) ; } }", "logger . info ( STR_ , offers . size ( ) , offer Resource Count , destroy Recommendation Count , recommendations . size ( ) - destroy Recommendation Count ) ;", "return recommendations ; }"]}
{"ids": "53869", "code": ["@ Override public int update ( Byte Buffer in Buffer , Byte Buffer out Buffer ) throws Short Buffer Exception {", "return cipher . update ( in Buffer , out Buffer ) ; }"]}
{"ids": "80779", "code": ["boolean display Context Assump ( Node Representation rep , int i ) {", "return rep . is Created || ( ( ! state . split Chosen ( ) ) && show Context Value ) ; }"]}
{"ids": "44484", "code": ["private void unregister M Beans ( ) {", "List < Object Name > unregistered = new Array List < Object Name > ( ) ;", "for ( Object Name name : mbeans ) {", "try {", "mbeanserver . unregister M Bean ( name ) ;", "unregistered . add ( name ) ; }", "catch ( JM Exception e ) { } }", "mbeans . remove All ( unregistered ) ; }"]}
{"ids": "9115", "code": ["private static synchronized void end Transaction ( Connection C , boolean successful ) throws Ade Exception {", "logger . trace ( STR_ ) ;", "try {", "if ( successful ) {", "C . commit ( ) ; }", "else {", "C . rollback ( ) ; }", "C . set Auto Commit ( true ) ; }", "catch ( Throwable t ) {", "surface Throwable ( STR_ , t ) ;", "throw ade Exception Of ( t ) ; }", "logger . trace ( STR_ ) ; }"]}
{"ids": "84878", "code": ["public double [ ] estimate L 2 Distance Squared ( Datum query Datum ) {", "Real Vector vector = query Datum . metrics ( ) ;", "double [ ] estimates = new double [ NUM_ ] ;", "for ( int i = NUM_ ; i < k ; i ++ ) {", "double delta Lo = vector . get Entry ( i ) - this . boundaries [ i ] [ NUM_ ] ;", "double delta Hi = this . boundaries [ i ] [ NUM_ ] - vector . get Entry ( i ) ;", "double sq Delta Lo = delta Lo * delta Lo ;", "double sq Delta Hi = delta Hi * delta Hi ;", "if ( delta Lo < NUM_ || delta Hi < NUM_ ) {", "if ( sq Delta Hi < sq Delta Lo ) {", "estimates [ NUM_ ] += sq Delta Hi ;", "estimates [ NUM_ ] += sq Delta Lo ; }", "else {", "estimates [ NUM_ ] += sq Delta Lo ;", "estimates [ NUM_ ] += sq Delta Hi ; } }", "else {", "estimates [ NUM_ ] += Math . max ( sq Delta Hi , sq Delta Lo ) ; } }", "return estimates ; }"]}
{"ids": "52070", "code": ["private void deserialize Class ( File file ) throws Runtime Exception {", "try {", "File Input Stream in = new File Input Stream ( file ) ;", "Object Input Stream obj In = new Object Input Stream ( in ) ;", "Object o = obj In . read Object ( ) ;", "in . close ( ) ; }", "catch ( Class Not Found Exception e ) {", "throw new Runtime Exception ( STR_ + STR_ + file + STR_ + STR_ + STR_ , e ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ + STR_ + file + STR_ , e ) ; } }"]}
{"ids": "66172", "code": ["public boolean calculate Tax Total ( ) {", "log . fine ( STR_ ) ;", "DB . execute Update Ex ( STR_ + get C Invoice ID ( ) , get Trx Name ( ) ) ;", "m taxes = null ;", "Big Decimal total Lines = Env . ZERO ;", "Array List < Integer > tax List = new Array List < Integer > ( ) ;", "M Invoice Line [ ] lines = get Lines ( false ) ;", "for ( int i = NUM_ ; i < lines . length ; i ++ ) {", "M Invoice Line line = lines [ i ] ;", "if ( ! tax List . contains ( line . get C Tax ID ( ) ) ) {", "M Invoice Tax i Tax = M Invoice Tax . get ( line , get Precision ( ) , false , get Trx Name ( ) ) ;", "if ( i Tax != null ) {", "i Tax . set Is Tax Included ( is Tax Included ( ) ) ;", "if ( ! i Tax . calculate Tax From Lines ( ) ) return false ;", "i Tax . save Ex ( ) ;", "tax List . add ( line . get C Tax ID ( ) ) ; } }", "total Lines = total Lines . add ( line . get Line Net Amt ( ) ) ; }", "Big Decimal grand Total = total Lines ;", "M Invoice Tax [ ] taxes = get Taxes ( true ) ;", "for ( int i = NUM_ ; i < taxes . length ; i ++ ) {", "M Invoice Tax i Tax = taxes [ i ] ;", "M Tax tax = i Tax . get Tax ( ) ;", "if ( tax . is Summary ( ) ) {", "M Tax [ ] c Taxes = tax . get Child Taxes ( false ) ;", "for ( int j = NUM_ ; j < c Taxes . length ; j ++ ) {", "M Tax c Tax = c Taxes [ j ] ;", "Big Decimal tax Amt = c Tax . calculate Tax ( i Tax . get Tax Base Amt ( ) , is Tax Included ( ) , get Precision ( ) ) ;", "M Invoice Tax new I Tax = new M Invoice Tax ( get Ctx ( ) , NUM_ , get Trx Name ( ) ) ;", "new I Tax . set Client Org ( this ) ;", "new I Tax . set C Invoice ID ( get C Invoice ID ( ) ) ;", "new I Tax . set C Tax ID ( c Tax . get C Tax ID ( ) ) ;", "new I Tax . set Precision ( get Precision ( ) ) ;", "new I Tax . set Is Tax Included ( is Tax Included ( ) ) ;", "new I Tax . set Tax Base Amt ( i Tax . get Tax Base Amt ( ) ) ;", "new I Tax . set Tax Amt ( tax Amt ) ;", "new I Tax . save Ex ( get Trx Name ( ) ) ;", "if ( ! is Tax Included ( ) ) grand Total = grand Total . add ( tax Amt ) ; }", "i Tax . delete Ex ( true , get Trx Name ( ) ) ; }", "else {", "if ( ! is Tax Included ( ) ) grand Total = grand Total . add ( i Tax . get Tax Amt ( ) ) ; } }", "set Total Lines ( total Lines ) ;", "set Grand Total ( grand Total ) ;", "return true ; }"]}
{"ids": "37180", "code": ["private boolean can Open ( ) {", "for ( final I Navi Project project : m projects ) {", "if ( project . is Loaded ( ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "1249", "code": ["public static Array list With Quotes To Array ( String list , String delimiter , String quotes ) {", "if ( list . length ( ) == NUM_ ) return new Array Impl ( ) ;", "int len = list . length ( ) ;", "int last = NUM_ ;", "char [ ] del = delimiter . to Char Array ( ) ;", "char [ ] quo = quotes . to Char Array ( ) ;", "char c ;", "char inside = NUM_ ;", "Array Impl array = new Array Impl ( ) ;", "try {", "for ( int i = NUM_ ; i < len ; i ++ ) {", "c = list . char At ( i ) ;", "for ( int y = NUM_ ; y < quo . length ; y ++ ) {", "if ( c == quo [ y ] ) {", "if ( c == inside ) inside = NUM_ ;", "else if ( inside == NUM_ ) inside = c ;", "continue ; } }", "for ( int y = NUM_ ; y < del . length ; y ++ ) {", "if ( inside == NUM_ && c == del [ y ] ) {", "array . append ( list . substring ( last , i ) ) ;", "last = i + NUM_ ;", "break ; } } }", "if ( last <= len ) array . append ( list . substring ( last ) ) ; }", "catch ( Expression Exception e ) { }", "return array ; }"]}
{"ids": "49906", "code": ["public ML Output execute ( String dml Script File Path , Array List < String > args Name , Array List < String > args Values , String config File Path ) throws IO Exception , DML Exception , Parse Exception {", "Hash Map < String , String > new Named Args = new Hash Map < String , String > ( ) ;", "if ( args Name . size ( ) != args Values . size ( ) ) {", "throw new DML Exception ( STR_ + args Name . size ( ) + STR_ + STR_ ) ; }", "for ( int i = NUM_ ; i < args Name . size ( ) ; i ++ ) {", "String k = args Name . get ( i ) ;", "String v = args Values . get ( i ) ;", "new Named Args . put ( k , v ) ; }", "return execute ( dml Script File Path , new Named Args , config File Path ) ; }"]}
{"ids": "65033", "code": ["public boolean is In Memory Db ( ) {", "return path . equals Ignore Case ( MEMORY DB PATH ) ; }"]}
{"ids": "26368", "code": ["public Input Source resolve Entity ( String public Id , String system Id ) throws SAX Exception , IO Exception {", "has DTD = false ;", "String dtd = Util Properties . get Split Property Value ( Util URL . from Resource ( STR_ ) , public Id ) ;", "if ( Util Validate . is Not Empty ( dtd ) ) {", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + public Id + STR_ + system Id + STR_ + dtd + STR_ , module ) ;", "try {", "URL dtd URL = Util URL . from Resource ( dtd ) ;", "if ( dtd URL == null ) {", "throw new General Exception ( STR_ + dtd ) ; }", "Input Stream dtd Stream = dtd URL . open Stream ( ) ;", "Input Source input Source = new Input Source ( dtd Stream ) ;", "input Source . set Public Id ( public Id ) ;", "has DTD = true ;", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + public Id + STR_ + dtd + STR_ , module ) ;", "return input Source ; }", "catch ( Exception e ) {", "Debug . log Warning ( e , module ) ; } }", "else {", "int last Slash = system Id . last Index Of ( STR_ ) ;", "String filename = null ;", "if ( last Slash == - NUM_ ) {", "filename = system Id ; }", "else {", "filename = system Id . substring ( last Slash + NUM_ ) ; }", "URL resource Url = Util URL . from Resource ( filename ) ;", "if ( resource Url != null ) {", "Input Stream res Stream = resource Url . open Stream ( ) ;", "Input Source input Source = new Input Source ( res Stream ) ;", "if ( Util Validate . is Not Empty ( public Id ) ) {", "input Source . set Public Id ( public Id ) ; }", "has DTD = true ;", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + public Id + STR_ + filename + STR_ , module ) ;", "return input Source ; }", "else {", "Debug . log Warning ( STR_ + public Id + STR_ + filename + STR_ , module ) ;", "return null ; } }", "return default Resolver . resolve Entity ( public Id , system Id ) ; }"]}
{"ids": "44075", "code": ["private static Class Node load Class ( String name , Config config ) throws Exception {", "String file Path = config . get Class Dump Path ( ) + name . replace ( STR_ , STR_ ) + STR_ ;", "Class Reader reader = new Class Reader ( new File Input Stream ( file Path ) ) ;", "Class Node node = new Class Node ( ) ;", "reader . accept ( node , Class Reader . EXPAND FRAMES ) ;", "return node ; }"]}
{"ids": "45093", "code": ["public void write ( char [ ] cbuf , int off , int len ) throws IO Exception {", "internal Out . write ( cbuf , off , len ) ; }"]}
{"ids": "80395", "code": ["public void add ( final String clazz , final String subclazz , final boolean blocked ) {", "entries . add ( new Entry ( clazz , subclazz , blocked ) ) ; }"]}
{"ids": "25009", "code": ["private synchronized void buffer Change ( ) throws Read Failed Exception {", "Byte Buffer current = super . get Byte Buffer ( ) ;", "if ( null != current ) {", "current . clear ( ) ;", "empty Buffers . add ( current ) ; }", "int tries = NUM_ ;", "while ( true ) {", "try {", "Byte Buffer buffer = full Buffers . poll ( NUM_ , Time Unit . MILLISECONDS ) ;", "if ( null != buffer ) {", "super . set Byte Buffer ( buffer ) ;", "break ; }", "else {", "tries ++ ;", "if ( read Failed || ( tries > MAX BUFFER POOL TRIES ) ) {", "throw new Read Failed Exception ( STR_ ) ; } } }", "catch ( Interrupted Exception e ) {", "Thread . interrupted ( ) ; } } }"]}
{"ids": "17182", "code": ["protected synchronized Class load Class ( String name , boolean resolve ) throws Class Not Found Exception {", "Class c = find Loaded Class ( name ) ;", "if ( c == null ) c = find Class ( name ) ;", "if ( c == null ) throw new Class Not Found Exception ( name ) ;", "if ( resolve ) resolve Class ( c ) ;", "return c ; }"]}
{"ids": "5538", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) public static Comparable < ? > max ( Comparable < ? > [ ] ar ) {", "Comparable ret = ar [ NUM_ ] ;", "for ( int i = NUM_ ; i < ar . length ; i ++ ) {", "if ( ret . compare To ( ar [ i ] ) < NUM_ ) {", "ret = ar [ i ] ; } }", "return ret ; }"]}
{"ids": "65791", "code": ["private void init BPRMA Details ( int C B Partner ID ) {", "rma Field . remove Action Listener ( this ) ;", "rma Field . remove All Items ( ) ;", "Key Name Pair pp = new Key Name Pair ( NUM_ , STR_ ) ;", "rma Field . add Item ( pp ) ;", "Array List < Key Name Pair > list = load RMA Data ( C B Partner ID ) ;", "for ( Key Name Pair knp : list ) rma Field . add Item ( knp ) ;", "rma Field . set Selected Index ( NUM_ ) ;", "rma Field . add Action Listener ( this ) ; }"]}
{"ids": "37612", "code": ["protected void reset Options ( ) {", "m max Stale = NUM_ ;", "m search Direction = SELECTION FORWARD ;", "m starting = null ;", "m start Range = new Range ( ) ;", "m class Index = - NUM_ ;", "m total Evals = NUM_ ;", "m cache Size = NUM_ ;", "m debug = false ; }"]}
{"ids": "28688", "code": ["@ Override protected void tear Down ( ) throws Exception {", "try {", "take Screen Shot ( ) ; }", "catch ( Throwable throwable ) {", "throwable . print Stack Trace ( ) ; }", "super . tear Down ( ) ; }"]}
{"ids": "16272", "code": ["public synchronized void clear ( ) {", "m Categories . clear ( ) ;", "m Values . clear ( ) ; }"]}
{"ids": "5132", "code": ["private boolean itera connect ( Pla Point Int p from point , Pla Point Int p to point ) {", "Array List < Pla Point Int > corners = angled connection ( p from point , p to point ) ;", "boolean connection succeeded = true ;", "for ( int index = NUM_ ; index < corners . size ( ) ; ++ index ) {", "Pla Point Int from corner = corners . get ( index - NUM_ ) ;", "Pla Point Int to corner = corners . get ( index ) ;", "Time Limit time limit = new Time Limit ( s CHECK FORCED TRACE TIME MAX ) ;", "while ( ! from corner . equals ( to corner ) ) {", "Pla Point Int curr ok point = r board . insert trace ( from corner , to corner , pen half width arr [ layer active no ] , layer active no , net nos , clearance class , max shove trace recursion depth , max shove via recursion depth , max spring over recursion depth , itera settings . trace pullt min move , ! is stitch mode , time limit ) ;", "if ( curr ok point == null ) {", "r board . undo ( null ) ;", "return true ; }", "if ( curr ok point . equals ( from corner ) && itera settings . is automatic neckdown ( ) ) {", "curr ok point = try neckdown at end ( from corner , to corner ) ; }", "if ( curr ok point . equals ( from corner ) ) {", "prev corner = from corner ;", "connection succeeded = false ;", "break ; }", "from corner = curr ok point ; } }", "return connection succeeded ; }"]}
{"ids": "30704", "code": ["private Node < K , V > find Predecessor Of Last ( ) {", "for ( ; ; ) {", "Index < K , V > q = head ;", "for ( ; ; ) {", "Index < K , V > d , r ;", "if ( ( r = q . right ) != null ) {", "if ( r . indexes Deleted Node ( ) ) {", "q . unlink ( r ) ;", "break ; }", "if ( r . node . next != null ) {", "q = r ;", "continue ; } }", "if ( ( d = q . down ) != null ) q = d ;", "else return q . node ; } } }"]}
{"ids": "16710", "code": ["public boolean query ( int object To Query , long [ ] [ ] hash Functions ) {", "for ( long [ ] h : hash Functions ) {", "int i = hash ( h , ( long ) object To Query ) ;", "if ( ! bit Set . get ( i ) ) return false ; }", "return true ; }"]}
{"ids": "53501", "code": ["@ Safe Varargs public static < V > Set < V > create Set ( V ... values ) {", "Set < V > set = new Linked Hash Set < V > ( ) ;", "for ( V v : values ) {", "set . add ( v ) ; }", "return set ; }"]}
{"ids": "2614", "code": ["@ Override void do Constrained Outside Scores ( Grammar grammar , boolean viterbi , boolean log Scores ) {", "short [ ] num Sub States Array = grammar . num Sub States ;", "double init Val = ( log Scores ) ? Double . NEGATIVE INFINITY : NUM_ ;", "for ( int diff = length ; diff >= NUM_ ; diff -- ) {", "for ( int start = NUM_ ; start + diff <= length ; start ++ ) {", "int end = start + diff ;", "double [ ] [ ] scores After Unaries = new double [ num States ] [ ] ;", "boolean something Changed = false ;", "for ( int c State = NUM_ ; c State < num States ; c State ++ ) {", "if ( diff > NUM_ && ! grammar . is Grammar Tag [ c State ] ) continue ;", "if ( ! allowed States [ start ] [ end ] [ c State ] ) {", "continue ; }", "Unary Rule [ ] rules = null ;", "if ( viterbi ) rules = grammar . get Closed Viterbi Unary Rules By Child ( c State ) ;", "else rules = grammar . get Closed Sum Unary Rules By Child ( c State ) ;", "final int n Child States = num Sub States Array [ c State ] ;", "final int num Rules = rules . length ;", "for ( int r = NUM_ ; r < num Rules ; r ++ ) {", "Unary Rule ur = rules [ r ] ;", "int p State = ur . parent State ;", "if ( ( p State == c State ) ) continue ;", "if ( ! allowed States [ start ] [ end ] [ p State ] ) {", "continue ; }", "double [ ] [ ] scores = ur . get Scores 2 ( ) ;", "final int n Parent States = num Sub States Array [ p State ] ;", "for ( int cp = NUM_ ; cp < n Child States ; cp ++ ) {", "if ( scores [ cp ] == null ) continue ;", "if ( ! allowed Sub States [ start ] [ end ] [ c State ] [ cp ] ) continue ;", "for ( int np = NUM_ ; np < n Parent States ; np ++ ) {", "double p S = scores [ cp ] [ np ] ;", "if ( p S == init Val ) continue ;", "double o S = o Score [ start ] [ end ] [ p State ] [ np ] ;", "if ( o S == init Val ) continue ;", "double this Round = ( log Scores ) ? o S + p S : o S * p S ;", "if ( scores After Unaries [ c State ] == null ) {", "scores After Unaries [ c State ] = new double [ num Sub States Array [ c State ] ] ;", "if ( viterbi ) Arrays . fill ( scores After Unaries [ c State ] , init Val ) ; }", "if ( viterbi ) scores After Unaries [ c State ] [ cp ] = Math . max ( this Round , scores After Unaries [ c State ] [ cp ] ) ;", "else scores After Unaries [ c State ] [ cp ] += this Round ;", "something Changed = true ; } } } }", "if ( something Changed ) {", "for ( int c State = NUM_ ; c State < num States ; c State ++ ) {", "double [ ] this Cell = scores After Unaries [ c State ] ;", "if ( this Cell == null ) continue ;", "for ( int cp = NUM_ ; cp < num Sub States Array [ c State ] ; cp ++ ) {", "if ( this Cell [ cp ] > init Val ) {", "if ( viterbi ) o Score [ start ] [ end ] [ c State ] [ cp ] = Math . max ( o Score [ start ] [ end ] [ c State ] [ cp ] , this Cell [ cp ] ) ;", "else o Score [ start ] [ end ] [ c State ] [ cp ] += this Cell [ cp ] ; } } } }", "for ( int p State = NUM_ ; p State < num Sub States Array . length ; p State ++ ) {", "if ( ! allowed States [ start ] [ end ] [ p State ] ) {", "continue ; }", "final int n Parent Child States = num Sub States Array [ p State ] ;", "Binary Rule [ ] rules = grammar . split Rules With P ( p State ) ;", "final int num Rules = rules . length ;", "for ( int r = NUM_ ; r < num Rules ; r ++ ) {", "Binary Rule br = rules [ r ] ;", "int l State = br . left Child State ;", "int min 1 = narrow R Extent [ start ] [ l State ] ;", "if ( end < min 1 ) {", "continue ; }", "int r State = br . right Child State ;", "int max 1 = narrow L Extent [ end ] [ r State ] ;", "if ( max 1 < min 1 ) {", "continue ; }", "int min = min 1 ;", "int max = max 1 ;", "if ( max - min > NUM_ ) {", "int min 2 = wide L Extent [ end ] [ r State ] ;", "min = ( min 1 > min 2 ? min 1 : min 2 ) ;", "if ( max 1 < min ) {", "continue ; }", "int max 2 = wide R Extent [ start ] [ l State ] ;", "max = ( max 1 < max 2 ? max 1 : max 2 ) ;", "if ( max < min ) {", "continue ; } }", "double [ ] [ ] [ ] scores = br . get Scores 2 ( ) ;", "final int n Left Child States = num Sub States Array [ l State ] ;", "final int n Right Child States = num Sub States Array [ r State ] ;", "for ( int split = min ; split <= max ; split ++ ) {", "if ( ! allowed States [ start ] [ split ] [ l State ] ) continue ;", "if ( ! allowed States [ split ] [ end ] [ r State ] ) continue ;", "double [ ] right Scores = new double [ n Right Child States ] ;", "if ( viterbi ) Arrays . fill ( right Scores , init Val ) ;", "Arrays . fill ( scores To Add , init Val ) ;", "something Changed = false ;", "for ( int lp = NUM_ ; lp < n Left Child States ; lp ++ ) {", "double l S = i Score [ start ] [ split ] [ l State ] [ lp ] ;", "if ( l S == init Val ) {", "continue ; }", "for ( int rp = NUM_ ; rp < n Right Child States ; rp ++ ) {", "if ( scores [ lp ] [ rp ] == null ) continue ;", "double r S = i Score [ split ] [ end ] [ r State ] [ rp ] ;", "if ( r S == init Val ) {", "continue ; }", "for ( int np = NUM_ ; np < n Parent Child States ; np ++ ) {", "double p S = scores [ lp ] [ rp ] [ np ] ;", "if ( p S == init Val ) continue ;", "double o S = o Score [ start ] [ end ] [ p State ] [ np ] ;", "if ( o S == init Val ) continue ;", "double this Round L = ( log Scores ) ? p S + r S + o S : p S * r S * o S ;", "double this Round R = ( log Scores ) ? p S + l S + o S : p S * l S * o S ;", "if ( viterbi ) {", "scores To Add [ lp ] = Math . max ( this Round L , scores To Add [ lp ] ) ;", "right Scores [ rp ] = Math . max ( this Round R , right Scores [ rp ] ) ; }", "else {", "scores To Add [ lp ] += this Round L ;", "right Scores [ rp ] += this Round R ; }", "something Changed = true ; } } }", "if ( ! something Changed ) continue ;", "for ( int cp = NUM_ ; cp < n Left Child States ; cp ++ ) {", "if ( scores To Add [ cp ] > init Val ) {", "if ( viterbi ) o Score [ start ] [ split ] [ l State ] [ cp ] = Math . max ( o Score [ start ] [ split ] [ l State ] [ cp ] , scores To Add [ cp ] ) ;", "else o Score [ start ] [ split ] [ l State ] [ cp ] += scores To Add [ cp ] ; } }", "for ( int cp = NUM_ ; cp < n Right Child States ; cp ++ ) {", "if ( right Scores [ cp ] > init Val ) {", "if ( viterbi ) o Score [ split ] [ end ] [ r State ] [ cp ] = Math . max ( o Score [ split ] [ end ] [ r State ] [ cp ] , right Scores [ cp ] ) ;", "else o Score [ split ] [ end ] [ r State ] [ cp ] += right Scores [ cp ] ; } } } } } } } }"]}
{"ids": "81130", "code": ["public void stop ( ) {", "time Mon Index = NUM_ ;", "set Exception ( ) ;", "Iterator iter = iter ( ) ;", "while ( iter . has Next ( ) ) {", "Http Mon Item mon Item = ( Http Mon Item ) iter . next ( ) ;", "mon Item . stop ( this ) ; }", "if ( stack Trace != null ) change Details ( ) ; }"]}
{"ids": "84697", "code": ["public void calc Min Tick ( ) {", "if ( min Data == NUM_ ) min Tick = NUM_ ;", "else min Tick = Math . floor ( min Data / major Tick ) * major Tick ; }"]}
{"ids": "52557", "code": ["public static void switch Timing ( String next Phase ) {", "stop Most Recent Timer ( ) ;", "start Timing ( next Phase ) ; }"]}
{"ids": "41567", "code": ["public byte [ ] encode ( ) {", "char type = get Attribute Type ( ) ;", "if ( ! is Type Valid ( type ) ) throw new Illegal State Exception ( ( ( int ) type ) + STR_ ) ;", "byte bin Value [ ] = new byte [ HEADER LENGTH + get Data Length ( ) ] ;", "bin Value [ NUM_ ] = ( byte ) ( type > > NUM_ ) ;", "bin Value [ NUM_ ] = ( byte ) ( type & NUM_ ) ;", "bin Value [ NUM_ ] = ( byte ) ( get Data Length ( ) > > NUM_ ) ;", "bin Value [ NUM_ ] = ( byte ) ( get Data Length ( ) & NUM_ ) ;", "bin Value [ NUM_ ] = NUM_ ;", "bin Value [ NUM_ ] = get Family ( ) ;", "bin Value [ NUM_ ] = ( byte ) ( get Port ( ) > > NUM_ ) ;", "bin Value [ NUM_ ] = ( byte ) ( get Port ( ) & NUM_ ) ;", "if ( get Family ( ) == ADDRESS FAMILY IPV 6 ) {", "System . arraycopy ( get Address Bytes ( ) , NUM_ , bin Value , NUM_ , NUM_ ) ; }", "else {", "System . arraycopy ( get Address Bytes ( ) , NUM_ , bin Value , NUM_ , NUM_ ) ; }", "return bin Value ; }"]}
{"ids": "48357", "code": ["private void do Delete Entry ( String alias ) throws Exception {", "if ( key Store . contains Alias ( alias ) == false ) {", "Message Format form = new Message Format ( rb . get String ( STR_ ) ) ;", "Object [ ] source = { alias } ;", "throw new Exception ( form . format ( source ) ) ; }", "key Store . delete Entry ( alias ) ; }"]}
{"ids": "43703", "code": ["protected Integer map Throwable Flat ( Throwable throwable ) {", "Class < ? extends Throwable > throwable Class = throwable . get Class ( ) ;", "Integer res Id = throwable To Msg Id Map . get ( throwable Class ) ;", "if ( res Id == null ) {", "Class < ? extends Throwable > closest Class = null ;", "Set < Entry < Class < ? extends Throwable > , Integer > > mappings = throwable To Msg Id Map . entry Set ( ) ;", "for ( Entry < Class < ? extends Throwable > , Integer > mapping : mappings ) {", "Class < ? extends Throwable > candidate = mapping . get Key ( ) ;", "if ( candidate . is Assignable From ( throwable Class ) ) {", "if ( closest Class == null || closest Class . is Assignable From ( candidate ) ) {", "closest Class = candidate ;", "res Id = mapping . get Value ( ) ; } } } }", "return res Id ; }"]}
{"ids": "38991", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( ) ;", "new Vector . add ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "51795", "code": ["public void assert Column Type ( Result Set rs ) throws SQL Exception {", "Result Set Meta Data md = rs . get Meta Data ( ) ;", "int sql Type = md . get Column Type ( mdi . get Position ( ) ) ;", "assert True ( String . format ( STR_ , sql Type , mdi ) , is Allowed Sql Type ( sql Type ) ) ; }"]}
{"ids": "14309", "code": ["private void validate Dns Names ( Set dns Name Set ) throws Policy Exception {", "Iterator dns Names = dns Name Set . iterator ( ) ;", "while ( dns Names . has Next ( ) ) {", "String dns Name = ( String ) dns Names . next ( ) ;", "validate Dns Name ( dns Name ) ;", "dns List . add ( dns Name . to Lower Case ( ) ) ; } }"]}
{"ids": "8319", "code": ["public static boolean is Mop Method ( String method Name ) {", "return ( method Name . starts With ( STR_ ) || method Name . starts With ( STR_ ) ) && ! method Name . contains ( STR_ ) ; }"]}
{"ids": "10885", "code": ["protected void init ( ) {", "Graphics Config Template 3 D template = new Graphics Config Template 3 D ( ) ;", "Graphics Environment env = Graphics Environment . get Local Graphics Environment ( ) ;", "Graphics Device device = env . get Default Screen Device ( ) ;", "Graphics Configuration config = device . get Best Configuration ( template ) ;", "canvas = new Canvas 3 D ( config ) ;", "canvas . set Size ( new Dimension ( DEFAULT DIMENSION , DEFAULT DIMENSION ) ) ;", "obj Root BG = new Branch Group ( ) ;", "obj Root BG . set Capability ( Group . ALLOW CHILDREN EXTEND ) ;", "construct World ( obj Root BG ) ; }"]}
{"ids": "35081", "code": ["private < Delegated > Presenter Binder < ? super Delegated > find Presenter Binder For Class ( Class < Delegated > clazz ) throws Illegal Access Exception , Instantiation Exception {", "Presenter Binder < ? super Delegated > presenter Binder ;", "String cls Name = clazz . get Name ( ) ;", "String class Name = cls Name + PRESENTER BINDER SUFFIX ;", "try {", "Class < ? > presenter Binder Class = Class . for Name ( class Name ) ;", "presenter Binder = ( Presenter Binder < ? super Delegated > ) presenter Binder Class . new Instance ( ) ; }", "catch ( Class Not Found Exception e ) {", "return null ; }", "return presenter Binder ; }"]}
{"ids": "60353", "code": ["@ Override final Node < K , V > find ( int h , Object k ) {", "if ( k != null ) {", "for ( Node < K , V > e = first ; e != null ; ) {", "int s ;", "if ( ( ( s = lock State ) & ( WAITER | WRITER ) ) != NUM_ ) {", "if ( e . hash == h && is Equal ( ( K ) k , e . key , my Hashing Strategy ) ) {", "return e ; }", "e = e . next ; }", "else if ( U . compare And Swap Int ( this , LOCKSTATE , s , s + READER ) ) {", "Tree Node < K , V > r , p ;", "try {", "p = ( ( r = root ) == null ? null : r . find Tree Node ( h , k , null ) ) ; }", "finally {", "int ls ;", "do { }", "while ( ! U . compare And Swap Int ( this , LOCKSTATE , ls = lock State , ls - READER ) ) ;", "Thread w ;", "if ( ls == ( READER | WAITER ) && ( w = waiter ) != null ) {", "Lock Support . unpark ( w ) ; } }", "return p ; } } }", "return null ; }"]}
{"ids": "32924", "code": ["public void square ( double x , double y , double r ) {", "if ( r < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "double xs = scale X ( x ) ;", "double ys = scale Y ( y ) ;", "double ws = factor X ( NUM_ * r ) ;", "double hs = factor Y ( NUM_ * r ) ;", "if ( ws <= NUM_ && hs <= NUM_ ) pixel ( x , y ) ;", "else offscreen . draw ( new Rectangle 2 D . Double ( xs - ws / NUM_ , ys - hs / NUM_ , ws , hs ) ) ;", "draw ( ) ; }"]}
{"ids": "79200", "code": ["private int lower Height Map ( int x , int y , int z ) {", "for ( -- y ; y >= NUM_ ; -- y ) {", "if ( get Type ( x , z , y ) != NUM_ ) {", "break ; } }", "return y + NUM_ ; }"]}
{"ids": "33272", "code": ["public void remove ( @ Not Null Status Notification notification ) {", "stack . remove ( notification ) ;", "on Close ( notification ) ; }"]}
{"ids": "56801", "code": ["private Job Definition Entity create Or Update Job Definition Entity ( Job Definition Entity job Definition Entity , Namespace Entity namespace Entity , String job Name , String description , String activiti Id , List < Parameter > parameters , S 3 Properties Location s 3 Properties Location ) {", "Job Definition Entity job Definition Entity Local = job Definition Entity ;", "if ( job Definition Entity Local == null ) {", "job Definition Entity Local = new Job Definition Entity ( ) ; }", "job Definition Entity Local . set Name ( job Name ) ;", "job Definition Entity Local . set Namespace ( namespace Entity ) ;", "job Definition Entity Local . set Description ( description ) ;", "job Definition Entity Local . set Activiti Id ( activiti Id ) ;", "String bucket Name = null ;", "String key = null ;", "if ( s 3 Properties Location != null ) {", "bucket Name = s 3 Properties Location . get Bucket Name ( ) ;", "key = s 3 Properties Location . get Key ( ) ; }", "job Definition Entity Local . set S 3 Bucket Name ( bucket Name ) ;", "job Definition Entity Local . set S 3 Object Key ( key ) ;", "List < Job Definition Parameter Entity > parameter Entities = new Array List < > ( ) ;", "if ( ! Collection Utils . is Empty ( parameters ) ) {", "for ( Parameter parameter : parameters ) {", "Job Definition Parameter Entity parameter Entity = new Job Definition Parameter Entity ( ) ;", "parameter Entities . add ( parameter Entity ) ;", "parameter Entity . set Name ( parameter . get Name ( ) ) ;", "parameter Entity . set Value ( parameter . get Value ( ) ) ; } }", "job Definition Entity Local . set Parameters ( parameter Entities ) ;", "return job Definition Entity Local ; }"]}
{"ids": "85792", "code": ["public void find ( int index , float weight Loss , float move Cost , Array List < Db Entry > items Placed ) {", "if ( ( weight Loss >= lowest Weight Loss ) || ( ( weight Loss == lowest Weight Loss ) && ( move Cost >= lowest Move Cost ) ) ) {", "return ; }", "else if ( index >= items To Place . size ( ) ) {", "lowest Weight Loss = weight Loss ;", "lowest Move Cost = move Cost ;", "final Placed Items = deep Copy ( items Placed ) ;", "return ; }", "Db Entry me = items To Place . get ( index ) ;", "int my X = me . cell X ;", "int my Y = me . cell Y ;", "Array List < Db Entry > items Including Me = new Array List < > ( items Placed . size ( ) + NUM_ ) ;", "items Including Me . add All ( items Placed ) ;", "items Including Me . add ( me ) ;", "if ( me . span X > NUM_ || me . span Y > NUM_ ) {", "int my W = me . span X ;", "int my H = me . span Y ;", "for ( int y = NUM_ ; y < m Trg Y ; y ++ ) {", "for ( int x = NUM_ ; x < m Trg X ; x ++ ) {", "float new Move Cost = move Cost ;", "if ( x != my X ) {", "me . cell X = x ;", "new Move Cost ++ ; }", "if ( y != my Y ) {", "me . cell Y = y ;", "new Move Cost ++ ; }", "if ( ignore Move ) {", "new Move Cost = move Cost ; }", "if ( is Vacant ( occupied , x , y , my W , my H ) ) {", "mark Cells ( occupied , me , true ) ;", "find ( index + NUM_ , weight Loss , new Move Cost , items Including Me ) ;", "mark Cells ( occupied , me , false ) ; }", "if ( my W > me . min Span X && is Vacant ( occupied , x , y , my W - NUM_ , my H ) ) {", "me . span X -- ;", "mark Cells ( occupied , me , true ) ;", "find ( index + NUM_ , weight Loss , new Move Cost + NUM_ , items Including Me ) ;", "mark Cells ( occupied , me , false ) ;", "me . span X ++ ; }", "if ( my H > me . min Span Y && is Vacant ( occupied , x , y , my W , my H - NUM_ ) ) {", "me . span Y -- ;", "mark Cells ( occupied , me , true ) ;", "find ( index + NUM_ , weight Loss , new Move Cost + NUM_ , items Including Me ) ;", "mark Cells ( occupied , me , false ) ;", "me . span Y ++ ; }", "if ( my H > me . min Span Y && my W > me . min Span X && is Vacant ( occupied , x , y , my W - NUM_ , my H - NUM_ ) ) {", "me . span X -- ;", "me . span Y -- ;", "mark Cells ( occupied , me , true ) ;", "find ( index + NUM_ , weight Loss , new Move Cost + NUM_ , items Including Me ) ;", "mark Cells ( occupied , me , false ) ;", "me . span X ++ ;", "me . span Y ++ ; }", "me . cell X = my X ;", "me . cell Y = my Y ; } }", "find ( index + NUM_ , weight Loss + me . weight , move Cost , items Placed ) ; }", "else {", "int new Distance = Integer . MAX VALUE ;", "int new X = Integer . MAX VALUE , new Y = Integer . MAX VALUE ;", "for ( int y = NUM_ ; y < m Trg Y ; y ++ ) {", "for ( int x = NUM_ ; x < m Trg X ; x ++ ) {", "if ( ! occupied [ x ] [ y ] ) {", "int dist = ignore Move ? NUM_ : ( ( me . cell X - x ) * ( me . cell X - x ) + ( me . cell Y - y ) * ( me . cell Y - y ) ) ;", "if ( dist < new Distance ) {", "new X = x ;", "new Y = y ;", "new Distance = dist ; } } } }", "if ( new X < m Trg X && new Y < m Trg Y ) {", "float new Move Cost = move Cost ;", "if ( new X != my X ) {", "me . cell X = new X ;", "new Move Cost ++ ; }", "if ( new Y != my Y ) {", "me . cell Y = new Y ;", "new Move Cost ++ ; }", "if ( ignore Move ) {", "new Move Cost = move Cost ; }", "mark Cells ( occupied , me , true ) ;", "find ( index + NUM_ , weight Loss , new Move Cost , items Including Me ) ;", "mark Cells ( occupied , me , false ) ;", "me . cell X = my X ;", "me . cell Y = my Y ;", "if ( index + NUM_ < items To Place . size ( ) && items To Place . get ( index + NUM_ ) . weight >= me . weight && ! ignore Move ) {", "find ( index + NUM_ , weight Loss + me . weight , move Cost , items Placed ) ; } }", "else {", "for ( int i = index + NUM_ ; i < items To Place . size ( ) ; i ++ ) {", "weight Loss += items To Place . get ( i ) . weight ; }", "find ( items To Place . size ( ) , weight Loss + me . weight , move Cost , items Placed ) ; } } }"]}
{"ids": "45671", "code": ["@ Request Mapping ( value = { STR_ , STR_ } , method = Request Method . PUT ) @ Response Body public Rest Wrapper insert ( @ Model Attribute ( STR_ ) @ Valid Users users , Binding Result binding Result , Principal principal ) {", "Rest Wrapper rest Wrapper = null ;", "if ( binding Result . has Errors ( ) ) {", "Binding Result Error binding Result Error = new Binding Result Error ( ) ;", "return binding Result Error . error Message ( binding Result ) ; }", "try {", "String hashed Password = Digest Utils . sha 1 Hex ( users . get Password ( ) ) ;", "com . wipro . ats . bdre . md . dao . jpa . Users jpa Users = new com . wipro . ats . bdre . md . dao . jpa . Users ( ) ;", "jpa Users . set Password ( hashed Password ) ;", "jpa Users . set Username ( users . get Username ( ) ) ;", "jpa Users . set Enabled ( ( users . get Enabled ( ) == NUM_ ) ? true : false ) ;", "users DAO . insert ( jpa Users ) ;", "rest Wrapper = new Rest Wrapper ( users , Rest Wrapper . OK ) ;", "LOGGER . info ( STR_ + users . get Username ( ) + STR_ + principal . get Name ( ) + users ) ; }", "catch ( Exception e ) {", "LOGGER . error ( e ) ;", "rest Wrapper = new Rest Wrapper ( e . get Message ( ) , Rest Wrapper . ERROR ) ; }", "return rest Wrapper ; }"]}
{"ids": "86645", "code": ["public static String capped Int ( final long val ) {", "if ( val >= Integer . MAX VALUE ) {", "return OVER ; }", "else if ( val <= Integer . MIN VALUE ) {", "return UNDER ; }", "return Long . to String ( val ) ; }"]}
{"ids": "62789", "code": ["private void create From Assets ( String my DB Name , File dbfile , Input Stream asset File Input Stream ) {", "Output Stream out = null ;", "try {", "String db Path = dbfile . get Absolute Path ( ) ;", "db Path = db Path . substring ( NUM_ , db Path . last Index Of ( STR_ ) + NUM_ ) ;", "File db Path File = new File ( db Path ) ;", "if ( ! db Path File . exists ( ) ) db Path File . mkdirs ( ) ;", "File new Db File = new File ( db Path + my DB Name ) ;", "out = new File Output Stream ( new Db File ) ;", "byte [ ] buf = new byte [ NUM_ ] ;", "int len ;", "while ( ( len = asset File Input Stream . read ( buf ) ) > NUM_ ) out . write ( buf , NUM_ , len ) ;", "Log . v ( STR_ , STR_ + new Db File . get Absolute Path ( ) ) ; }", "catch ( IO Exception ex ) {", "Log . v ( STR_ , STR_ + ex . get Message ( ) ) ; }", "finally {", "if ( out != null ) {", "try {", "out . close ( ) ; }", "catch ( IO Exception ignored ) { } } } }"]}
{"ids": "29185", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return PERSON PROPERTY ;", "case NUM_ :", "return PAGE PROPERTY ;", "case NUM_ :", "return EQUIV ;", "case NUM_ :", "return PAGE VIEW ;", "default :", "return null ; } }"]}
{"ids": "33121", "code": ["protected String internal Put ( String key , String new Value ) {", "synchronized ( child And Property Lock ) {", "String old Value = properties . get ( key ) ;", "if ( old Value != null && old Value . equals ( new Value ) ) return old Value ;", "properties = properties . put ( key , new Value ) ;", "return old Value ; } }"]}
{"ids": "5085", "code": ["public Polyline ( Pla Point Int p from corner , Pla Point Int p to corner ) {", "if ( p from corner . equals ( p to corner ) ) throw new Illegal Argument Exception ( classname + STR_ ) ;", "lines list = new Array List < Pla Line Int > ( NUM_ ) ;", "Pla Direction dir = new Pla Direction ( p from corner , p to corner ) ;", "lines list . add ( new Pla Line Int ( p from corner , dir . rotate 45 deg ( NUM_ ) ) ) ;", "lines list . add ( new Pla Line Int ( p from corner , p to corner ) ) ;", "lines list . add ( new Pla Line Int ( p to corner , dir . rotate 45 deg ( NUM_ ) ) ) ;", "corners allocate ( corner count ( ) ) ;", "precalculated corners [ NUM_ ] = p from corner ;", "precalculated corners [ NUM_ ] = p to corner ; }"]}
{"ids": "5832", "code": ["protected boolean is On Same Screen As Children ( ) {", "return true ; }"]}
{"ids": "79374", "code": ["public static String format Price ( Double price ) {", "if ( price == null ) return STR_ ;", "return format Price ( price . double Value ( ) ) ; }"]}
{"ids": "77406", "code": ["static void check Log Dir ( ) {", "if ( System . get Property ( STR_ ) == null ) {", "log . error ( STR_ ) ; } }"]}
{"ids": "47942", "code": ["private static boolean is More Above ( String src , int index ) {", "int ch ;", "int cc ;", "int len = src . length ( ) ;", "for ( int i = index + Character . char Count ( src . code Point At ( index ) ) ; i < len ; i += Character . char Count ( ch ) ) {", "ch = src . code Point At ( i ) ;", "cc = Normalizer . get Combining Class ( ch ) ;", "if ( cc == COMBINING CLASS ABOVE ) {", "return true ; }", "else if ( cc == NUM_ ) {", "return false ; } }", "return false ; }"]}
{"ids": "78690", "code": ["public void restore Key ( String key ) {", "if ( ! key . equals Ignore Case ( STR_ ) ) {", "String original Key = key . substring ( key Test Mode . length ( ) ) ;", "Object value = get ( key ) ;", "put ( original Key , value ) ;", "clear ( key ) ; } }"]}
{"ids": "57841", "code": ["public boolean has Unsupported Critical Extension ( ) {", "Set extns = get Critical Extension OI Ds ( ) ;", "if ( extns == null ) {", "return false ; }", "extns . remove ( RFC 3280 Cert Path Utilities . ISSUING DISTRIBUTION POINT ) ;", "extns . remove ( RFC 3280 Cert Path Utilities . DELTA CRL INDICATOR ) ;", "return ! extns . is Empty ( ) ; }"]}
{"ids": "69935", "code": ["public static void write Int ( Data Output out , int v ) throws IO Exception {", "out . write Byte ( NUM_ & v ) ;", "out . write Byte ( NUM_ & ( v > > > NUM_ ) ) ;", "out . write Byte ( NUM_ & ( v > > > NUM_ ) ) ;", "out . write Byte ( NUM_ & ( v > > > NUM_ ) ) ; }"]}
{"ids": "81266", "code": ["public static Comparable [ ] sort Copy ( Comparable [ ] objects ) {", "int len = objects . length ;", "Comparable [ ] copy = new Comparable [ len ] ;", "System . arraycopy ( objects , NUM_ , copy , NUM_ , len ) ;", "sort ( copy ) ;", "return copy ; }"]}
{"ids": "4114", "code": ["private Utf 8 Constant parse Utf 8 Constant ( int index ) throws IO Exception {", "int length = read Short ( ) ;", "String Builder cb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "int ch = read ( ) ;", "if ( ch < NUM_ ) {", "cb . append ( ( char ) ch ) ; }", "else if ( ( ch & NUM_ ) == NUM_ ) {", "int ch 2 = read ( ) ;", "i ++ ;", "cb . append ( ( char ) ( ( ( ch & NUM_ ) << NUM_ ) + ( ch 2 & NUM_ ) ) ) ; }", "else {", "int ch 2 = read ( ) ;", "int ch 3 = read ( ) ;", "i += NUM_ ;", "cb . append ( ( char ) ( ( ( ch & NUM_ ) << NUM_ ) + ( ( ch 2 & NUM_ ) << NUM_ ) + ( ( ch 3 & NUM_ ) ) ) ) ; } }", "return new Utf 8 Constant ( class . get Constant Pool ( ) , index , cb . to String ( ) ) ; }"]}
{"ids": "86820", "code": ["@ Override public boolean mark Next Sequence ( ) throws IO Exception {", "if ( m Seq Size < m Limit && m Pointer Size + m Pointer Entry Size <= m Limit ) {", "m Pointers . write Byte ( ( int ) m Checksum Seq . get Value ( ) ) ;", "m Checksum Seq . reset ( ) ;", "if ( m Checksum Qual != null ) {", "m Pointers . write Byte ( ( int ) m Checksum Qual . get Value ( ) ) ;", "m Checksum Qual . reset ( ) ; }", "m Pointers . write Int ( ( int ) m Seq Size ) ;", "m Pointer Size += m Pointer Entry Size ;", "return true ; }", "return false ; }"]}
{"ids": "3406", "code": ["public final double sample Active Count ( ) {", "return active Count . get ( ) ; }"]}
{"ids": "83294", "code": ["private void preprocess Data ( Map < Integer , Map < Integer , List < Integer > > > knoten Von Spur Nach Spur Mapping , Map < Integer , Map < Integer , String > > knoten Spur Link Mapping ) {", "preprocess Knoten Spur Link Mapping ( knoten Spur Link Mapping ) ;", "clean Knoten Von Spur Nach Spur Mapping ( knoten Von Spur Nach Spur Mapping , knoten Spur Link Mapping ) ;", "merge Lanes On Same Link ( knoten Von Spur Nach Spur Mapping , knoten Spur Link Mapping ) ; }"]}
{"ids": "76249", "code": ["@ Override public boolean mutate ( Test Case test , Test Factory factory ) {", "if ( Randomness . next Double ( ) >= Properties . P CHANGE PARAMETER ) return false ;", "if ( ! is Static ( ) ) {", "Variable Reference source = get Source ( ) ;", "List < Variable Reference > objects = test . get Objects ( source . get Type ( ) , get Position ( ) ) ;", "objects . remove ( source ) ;", "if ( ! objects . is Empty ( ) ) {", "set Source ( Randomness . choice ( objects ) ) ;", "return true ; } }", "return false ; }"]}
{"ids": "52622", "code": ["@ Override protected void draw X Labels ( List < Double > x Labels , Double [ ] x Text Label Locations , Canvas canvas , Paint paint , int left , int top , int bottom , double x Pixels Per Unit , double min X , double max X ) {", "int length = x Labels . size ( ) ;", "if ( length > NUM_ ) {", "boolean show Labels = m Renderer . is Show Labels ( ) ;", "boolean show Grid Y = m Renderer . is Show Grid Y ( ) ;", "boolean show Tick Marks = m Renderer . is Show Tick Marks ( ) ;", "Date Format format = get Date Format ( x Labels . get ( NUM_ ) , x Labels . get ( length - NUM_ ) ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "long label = Math . round ( x Labels . get ( i ) ) ;", "float x Label = ( float ) ( left + x Pixels Per Unit * ( label - min X ) ) ;", "if ( show Labels ) {", "paint . set Color ( m Renderer . get X Labels Color ( ) ) ;", "if ( show Tick Marks ) {", "canvas . draw Line ( x Label , bottom , x Label , bottom + m Renderer . get Labels Text Size ( ) / NUM_ , paint ) ; }", "draw Text ( canvas , format . format ( new Date ( label ) ) , x Label , bottom + m Renderer . get Labels Text Size ( ) * NUM_ / NUM_ + m Renderer . get X Labels Padding ( ) , paint , m Renderer . get X Labels Angle ( ) ) ; }", "if ( show Grid Y ) {", "paint . set Color ( m Renderer . get Grid Color ( NUM_ ) ) ;", "canvas . draw Line ( x Label , bottom , x Label , top , paint ) ; } } }", "draw X Text Labels ( x Text Label Locations , canvas , paint , true , left , top , bottom , x Pixels Per Unit , min X , max X ) ; }"]}
{"ids": "61270", "code": ["public X Path ( String expr String , Source Locator locator , Prefix Resolver prefix Resolver , int type ) throws javax . xml . transform . Transformer Exception {", "this ( expr String , locator , prefix Resolver , type , null ) ; }"]}
{"ids": "65802", "code": ["private void add Menu Item ( J Popup Menu menu , String title , MWF Node node , int AD WF Node To ID ) {", "WF Popup Item item = new WF Popup Item ( title , node , AD WF Node To ID ) ;", "menu . add ( item ) ;", "item . add Action Listener ( this ) ; }"]}
{"ids": "63527", "code": ["public synchronized long allocate ( int length ) {", "int blocks = get Block Count ( length ) ;", "Block Range x = null ;", "for ( Block Range b : free Space ) {", "if ( b . blocks >= blocks ) {", "x = b ;", "break ; } }", "long pos = get Pos ( x . start ) ;", "if ( x . blocks == blocks ) {", "free Space . remove ( x ) ; }", "else {", "x . start += blocks ;", "x . blocks -= blocks ; }", "return pos ; }"]}
{"ids": "51840", "code": ["public Jenkins Http Client ( URI uri , String username , String password ) {", "this ( uri ) ;", "if ( is Not Blank ( username ) ) {", "Credentials Provider provider = client . get Credentials Provider ( ) ;", "Auth Scope scope = new Auth Scope ( uri . get Host ( ) , uri . get Port ( ) , Auth Scope . ANY REALM ) ;", "Username Password Credentials credentials = new Username Password Credentials ( username , password ) ;", "provider . set Credentials ( scope , credentials ) ;", "local Context = new Basic Http Context ( ) ;", "local Context . set Attribute ( STR_ , new Basic Scheme ( ) ) ;", "client . add Request Interceptor ( new Preemptive Auth ( ) , NUM_ ) ; } }"]}
{"ids": "14986", "code": ["public static Set combine O Cs ( Set one , Set two ) {", "if ( one == null || one . is Empty ( ) ) {", "return two ; }", "if ( two == null || two . is Empty ( ) ) {", "return one ; }", "Set result Set = new Hash Set ( ) ;", "Iterator itr 1 = one . iterator ( ) ;", "while ( itr 1 . has Next ( ) ) {", "String value 1 = ( String ) itr 1 . next ( ) ;", "result Set . add ( value 1 . to Lower Case ( ) ) ; }", "Iterator itr 2 = two . iterator ( ) ;", "while ( itr 2 . has Next ( ) ) {", "String value 2 = ( String ) itr 2 . next ( ) ;", "result Set . add ( value 2 . to Lower Case ( ) ) ; }", "return result Set ; }"]}
{"ids": "65097", "code": ["private String wrap ( String str ) {", "String Builder buf = new String Builder ( str ) ;", "int len = line Length ;", "while ( len < buf . length ( ) ) {", "int idx = buf . last Index Of ( STR_ , len ) ;", "if ( idx != - NUM_ ) {", "buf . replace ( idx , idx + NUM_ , breaker ) ;", "len = idx + breaker . length ( ) + line Length ; }", "else {", "buf . insert ( len , breaker ) ;", "len += breaker . length ( ) + line Length ; } }", "buf . insert ( NUM_ , STR_ ) ;", "return buf . to String ( ) ; }"]}
{"ids": "73357", "code": ["public Echo State Network commit Changes ( ) {", "Network net = network Panel . get Network ( ) ;", "Integer num Ins = Utils . parse Integer ( tf Input Layer Pop ) ;", "if ( num Ins == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Neuron Group input Layer = new Neuron Group ( net , num Ins ) ;", "if ( input Layer . size ( ) > input Layer . get Grid Threshold ( ) ) {", "input Layer . set Layout ( new org . simbrain . network . layouts . Grid Layout ( ) ) ; }", "input Layer . apply Layout ( ) ;", "Neuron Group reservoir Layer = reservoir Panel . create Layer From Data ( ) ;", "if ( reservoir Layer . size ( ) > reservoir Layer . get Grid Threshold ( ) ) {", "reservoir Layer . set Layout ( new org . simbrain . network . layouts . Grid Layout ( ) ) ; }", "reservoir Layer . apply Layout ( ) ;", "Synapse Group res Synapses = res To Res Panel . create Synapse Group ( reservoir Layer , reservoir Layer ) ;", "res Synapses . set Label ( STR_ ) ;", "Neuron Group output Layer = output Panel . create Layer From Data ( ) ;", "output Layer . apply Layout ( ) ;", "if ( output Layer . size ( ) > output Layer . get Grid Threshold ( ) ) {", "output Layer . set Layout ( new org . simbrain . network . layouts . Grid Layout ( ) ) ; }", "Echo State Network esn = new Echo State Network ( net , network Panel . get Last Clicked Position ( ) ) ;", "esn . set Back Weights ( allow Out To Res . is Selected ( ) ) ;", "esn . set Direct In Out Weights ( direct Input To Output . is Selected ( ) ) ;", "esn . set Recurrent Out Weights ( allow Recurrent Outputs . is Selected ( ) ) ;", "esn . set Time Type ( ( Time Type ) cb Time Type . get Selected Item ( ) ) ;", "double max Eig = Utils . double Parsable ( spectral Radius ) ;", "if ( Double . is Na N ( max Eig ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "esn . initialize Input Layer ( input Layer ) ;", "esn . initialize Reservoir ( reservoir Layer , res Synapses , max Eig ) ;", "esn . initialize Output ( output Layer ) ;", "Synapse Group itr = in To Res Panel . create Synapse Group ( input Layer , reservoir Layer ) ;", "itr . set Label ( STR_ ) ;", "esn . add Synapse Group ( itr ) ;", "Synapse Group rto = Synapse Group . create Synapse Group ( reservoir Layer , output Layer , NUM_ ) ;", "rto . set Label ( STR_ ) ;", "esn . add Synapse Group ( rto ) ;", "if ( allow Recurrent Outputs . is Selected ( ) ) {", "Synapse Group oto = Synapse Group . create Synapse Group ( output Layer , output Layer , NUM_ ) ;", "oto . set Label ( STR_ ) ;", "esn . add Synapse Group ( oto ) ; }", "if ( allow Out To Res . is Selected ( ) ) {", "Synapse Group otr = out To Res Panel . create Synapse Group ( output Layer , reservoir Layer ) ;", "otr . set Label ( STR_ ) ;", "esn . add Synapse Group ( otr ) ; }", "if ( direct Input To Output . is Selected ( ) ) {", "Synapse Group ito = Synapse Group . create Synapse Group ( input Layer , output Layer , NUM_ ) ;", "ito . set Label ( STR_ ) ;", "esn . add Synapse Group ( ito ) ; }", "esn . position Layers ( ) ;", "return esn ; }"]}
{"ids": "84787", "code": ["public static double pdf ( double x , double shape , double scale ) {", "if ( x < NUM_ ) return NUM_ ;", "if ( x == NUM_ ) {", "if ( shape == NUM_ ) return NUM_ / scale ;", "else return NUM_ ; }", "if ( shape == NUM_ ) return NUM_ / x ;", "if ( shape == - NUM_ ) {", "return Math . sqrt ( x ) ; }", "final double xs = x / scale ;", "if ( shape == NUM_ ) {", "return Math . exp ( - xs ) / scale ; }", "final double a = Math . exp ( ( shape - NUM_ ) * Math . log ( xs ) - xs - Gamma Function . ln Gamma ( shape ) ) ;", "return a / scale ; }"]}
{"ids": "27387", "code": ["public void flush ( ) {", "synchronized ( list ) {", "int n = NUM_ ;", "long m = NUM_ ;", "for ( T b : list ) {", "if ( halt ) throw new Runtime Exception ( first Cause . get ( ) ) ;", "final int size = b . size ( ) ;", "final long counter = b . flush ( ) ;", "m += counter ;", "if ( DEBUG ) log . debug ( STR_ + size + STR_ + counter ) ; }", "if ( INFO ) log . info ( STR_ + n + STR_ + m + STR_ ) ; } }"]}
{"ids": "22319", "code": ["private void write Attribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String att Name , java . lang . String att Value , javax . xml . stream . XML Stream Writer xml Writer ) throws javax . xml . stream . XML Stream Exception {", "if ( xml Writer . get Prefix ( namespace ) == null ) {", "xml Writer . write Namespace ( prefix , namespace ) ;", "xml Writer . set Prefix ( prefix , namespace ) ; }", "xml Writer . write Attribute ( namespace , att Name , att Value ) ; }"]}
{"ids": "59896", "code": ["public void log Info ( String message ) {", "logger . info ( log Prefix + message ) ; }"]}
{"ids": "71873", "code": ["private boolean match Address ( final byte [ ] remote Mask ) {", "if ( rule Type == Rule Type . ALLWILDCARD ) {", "return true ; }", "if ( prefix Mask == null ) {", "return false ; }", "if ( remote Mask . length != prefix Mask . length ) {", "return false ; }", "for ( int i = NUM_ ; i < prefix Mask . length ; i ++ ) {", "if ( ! wild Card . get ( i ) && ( rule Mask [ i ] & prefix Mask [ i ] ) != ( remote Mask [ i ] & prefix Mask [ i ] ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "9880", "code": ["public static String sign ( String signing String , Private Key private Key ) throws Invalid Key Exception , Signature Exception {", "byte [ ] bytes = signing String . get Bytes ( Standard Charsets . UTF 8 ) ;", "Signature sig ;", "try {", "sig = Signature . get Instance ( SHA 256 WITH RSA ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new Illegal Argument Exception ( STR_ , e ) ; }", "sig . init Sign ( private Key ) ;", "sig . update ( bytes ) ;", "return Hex . encode Hex String ( sig . sign ( ) ) ; }"]}
{"ids": "35774", "code": ["public Object invoke ( Method method , Object target , Extension Context extension Context , Extension Registry extension Registry ) {", "@ Suppress Warnings ( STR_ ) Optional < Object > optional Target = ( target instanceof Optional ? ( Optional < Object > ) target : Optional . of Nullable ( target ) ) ;", "return Reflection Utils . invoke Method ( method , target , resolve Parameters ( method , optional Target , extension Context , extension Registry ) ) ; }"]}
{"ids": "32951", "code": ["Registered Project put Project ( Project Config config , Folder Entry folder , boolean updated , boolean detected ) throws Server Exception , Conflict Exception , Not Found Exception {", "final Registered Project project = new Registered Project ( folder , config , updated , detected , this . project Type Registry ) ;", "projects . put ( project . get Path ( ) , project ) ;", "return project ; }"]}
{"ids": "19151", "code": ["protected void tear Down ( ) {", "try {", "ds . close ( ) ;", "sds . close ( ) ; }", "catch ( Exception e ) { } }"]}
{"ids": "37421", "code": ["@ Override public void remove Listener ( final I Zy Node Realizer Listener < ? > listener ) {", "m listeners . remove Listener ( listener ) ; }"]}
{"ids": "63584", "code": ["protected void assert Result Row Count ( int expected , Result Set rs ) throws SQL Exception {", "int i = NUM_ ;", "while ( rs . next ( ) ) {", "i ++ ; }", "assert Equals ( expected , i ) ; }"]}
{"ids": "36181", "code": ["private boolean is Model Useful ( Contingency Matrix cm ) {", "for ( int row = NUM_ ; row < cm . get Number Of Predictions ( ) ; row ++ ) {", "for ( int col = NUM_ ; col < cm . get Number Of Classes ( ) ; col ++ ) {", "if ( Math . abs ( cm . get Lift ( row , col ) - NUM_ ) > MIN ADVANTAGE ) {", "return true ; } } }", "return false ; }"]}
{"ids": "45369", "code": ["public void scan ( Class Node cn ) {", "List < Threat Result > threats = new Array List < Threat Result > ( ) ;", "for ( Class Handler class Handler : class Handlers ) {", "Threat Result result = class Handler . scan Class ( cn ) ;", "if ( result != null ) {", "threats . add ( result ) ; } }", "for ( Method Node mn : cn . methods ) {", "for ( Method Handler method Handler : method Handlers ) {", "Threat Result result = method Handler . scan Method ( mn ) ;", "if ( result != null ) {", "threats . add ( result ) ; } } }", "if ( threats . size ( ) > NUM_ ) {", "threats By Class . put ( cn . name , threats ) ; } }"]}
{"ids": "51859", "code": ["private void pull Event ( ) {", "final int new Scroll Value ;", "final int item Dimension ;", "final float initial Motion Value , last Motion Value ;", "switch ( get Pull To Refresh Scroll Direction ( ) ) {", "case HORIZONTAL :", "initial Motion Value = m Initial Motion X ;", "last Motion Value = m Last Motion X ;", "break ;", "case VERTICAL :", "default :", "initial Motion Value = m Initial Motion Y ;", "last Motion Value = m Last Motion Y ;", "break ; }", "switch ( m Current Mode ) {", "case PULL FROM END :", "new Scroll Value = Math . round ( Math . max ( initial Motion Value - last Motion Value , NUM_ ) / FRICTION ) ;", "item Dimension = get Footer Size ( ) ;", "break ;", "case PULL FROM START :", "default :", "new Scroll Value = Math . round ( Math . min ( initial Motion Value - last Motion Value , NUM_ ) / FRICTION ) ;", "item Dimension = get Header Size ( ) ;", "break ; }", "set Header Scroll ( new Scroll Value ) ;", "if ( new Scroll Value != NUM_ && ! is Refreshing ( ) ) {", "float scale = Math . abs ( new Scroll Value ) / ( float ) item Dimension ;", "switch ( m Current Mode ) {", "case PULL FROM END :", "m Footer Layout . on Pull ( scale ) ;", "break ;", "case PULL FROM START :", "default :", "m Header Layout . on Pull ( scale ) ;", "break ; }", "if ( m State != State . PULL TO REFRESH && item Dimension >= Math . abs ( new Scroll Value ) ) {", "set State ( State . PULL TO REFRESH ) ; }", "else if ( m State == State . PULL TO REFRESH && item Dimension < Math . abs ( new Scroll Value ) ) {", "set State ( State . RELEASE TO REFRESH ) ; } } }"]}
{"ids": "64795", "code": ["public void reset ( ) {", "m Channel Number = NUM_ ;", "m Active Calls . clear ( ) ;", "m ES Ns . clear ( ) ;", "m Neighbor I Ds . clear ( ) ;", "m Receive Frequencies . clear ( ) ;", "m Site I Ds . clear ( ) ;", "m Talkgroups . clear ( ) ;", "m Transmit Frequencies . clear ( ) ;", "m Unique I Ds . clear ( ) ;", "reset State ( ) ; }"]}
{"ids": "84642", "code": ["public static String newick No Lengths ( Tree tree ) {", "String Buffer buffer = new String Buffer ( ) ;", "newick ( tree , tree . get Root ( ) , true , Branch Length Type . NO BRANCH LENGTHS , null , null , null , null , buffer ) ;", "buffer . append ( STR_ ) ;", "return buffer . to String ( ) ; }"]}
{"ids": "21115", "code": ["@ POST @ Path ( STR_ ) @ Produces ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Consumes ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Check Permission ( roles = { Role . SECURITY ADMIN , Role . RESTRICTED SECURITY ADMIN } , block Proxies = true ) public String rotate I Psec Key ( ) {", "ipsec Mgr . verify I Psec Op Allowable ( ) ;", "String version = ipsec Mgr . rotate Key ( ) ;", "audit Mgr . record Audit Log ( null , null , IPSEC SERVICE TYPE , Operation Type Enum . UPDATE SYSTEM PROPERTY , System . current Time Millis ( ) , Audit Log Manager . AUDITLOG SUCCESS , null , STR_ + version ) ;", "return version ; }"]}
{"ids": "83477", "code": ["public int append ( char chunk [ ] ) throws Guacamole Exception {", "return append ( chunk , NUM_ , chunk . length ) ; }"]}
{"ids": "48412", "code": ["public byte [ ] reset ( byte [ ] data ) {", "byte [ ] bytes = null ;", "if ( ( data [ NUM_ ] & NUM_ ) < NUM_ ) {", "bytes = new byte [ data [ NUM_ ] + NUM_ ] ;", "System . arraycopy ( data , NUM_ , bytes , NUM_ , data [ NUM_ ] + NUM_ ) ; }", "else {", "if ( ( data [ NUM_ ] & NUM_ ) > NUM_ ) {", "int len = data [ NUM_ ] & ( byte ) NUM_ ;", "int result = NUM_ ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "result |= ( data [ i + NUM_ ] & NUM_ ) << ( NUM_ * ( len - i - NUM_ ) ) ; }", "bytes = new byte [ result + len + NUM_ ] ;", "System . arraycopy ( data , NUM_ , bytes , NUM_ , result + len + NUM_ ) ; } }", "return bytes ; }"]}
{"ids": "57014", "code": ["public Vector Clock ( ) {", "this ( new Array List < Clock Entry > ( NUM_ ) , System . current Time Millis ( ) ) ; }"]}
{"ids": "42999", "code": ["public Analyzer add ( String name , Nondominated Population result ) {", "List < Nondominated Population > list = data . get ( name ) ;", "if ( list == null ) {", "list = new Array List < Nondominated Population > ( ) ;", "data . put ( name , list ) ; }", "list . add ( result ) ;", "return this ; }"]}
{"ids": "72463", "code": ["public static void assert Equals ( String msg , double [ ] expected , double [ ] observed , double tolerance ) {", "String Builder out = new String Builder ( msg ) ;", "if ( expected . length != observed . length ) {", "out . append ( STR_ ) ;", "out . append ( STR_ ) ;", "out . append ( expected . length ) ;", "out . append ( STR_ ) ;", "out . append ( observed . length ) ;", "Assert . fail ( out . to String ( ) ) ; }", "boolean failure = false ;", "for ( int i = NUM_ ; i < expected . length ; i ++ ) {", "if ( ! Precision . equals Including Na N ( expected [ i ] , observed [ i ] , tolerance ) ) {", "failure = true ;", "out . append ( STR_ ) ;", "out . append ( i ) ;", "out . append ( STR_ ) ;", "out . append ( STR_ ) ;", "out . append ( expected [ i ] ) ;", "out . append ( STR_ ) ;", "out . append ( observed [ i ] ) ; } }", "if ( failure ) {", "Assert . fail ( out . to String ( ) ) ; } }"]}
{"ids": "84870", "code": ["public void initialize Atoms For Finite ( List < Datum > data , String filename , Random random ) {", "beta = new double [ K ] ;", "dof = new double [ K ] ;", "omega = new Array List < > ( K ) ;", "if ( filename != null ) {", "try {", "loc = Batch Mixture Model . initialize Clusters From File ( filename , K ) ;", "if ( loc . size ( ) < K ) {", "loc = Batch Mixture Model . gonzalez Initialize Mixture Centers ( loc , data , K , random ) ; } }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ;", "loc = Batch Mixture Model . gonzalez Initialize Mixture Centers ( data , K , random ) ; } }", "else {", "loc = Batch Mixture Model . gonzalez Initialize Mixture Centers ( data , K , random ) ; }", "log . debug ( STR_ , loc ) ;", "for ( int k = NUM_ ; k < this . K ; k ++ ) {", "beta [ k ] = base Beta ;", "dof [ k ] = base Nu ;", "omega . add ( base Omega ) ; } }"]}
{"ids": "40647", "code": ["@ Override public void on Init ( List < ? extends Index Commit > commits ) throws IO Exception {", "if ( commits . is Empty ( ) ) {", "return ; }", "log . info ( STR_ , new Commits Logging Info ( commits ) ) ;", "log . debug ( STR_ , new Commits Logging Debug ( commits ) ) ;", "update Commits ( commits ) ; }"]}
{"ids": "50246", "code": ["public boolean is Loading ( ) {", "return state . equals ( LOADING ) ; }"]}
{"ids": "3418", "code": ["@ Override public final void sample ( ) {", "synchronized ( lock ) {", "long count = count . get ( ) ;", "long last Count = last Avg Count ;", "last Avg Count = count ;", "long sum = sum . get ( ) ;", "double last Sum = last Avg Sum ;", "last Avg Sum = sum ;", "if ( count == last Count ) value = NUM_ ;", "else value = scale * ( sum - last Sum ) / ( double ) ( count - last Count ) ; } }"]}
{"ids": "46021", "code": ["public boolean login ( ) throws Login Exception {", "try {", "load Password File ( ) ; }", "catch ( IO Exception ioe ) {", "Login Exception le = new Login Exception ( STR_ + password File Display Name ) ;", "throw Env Help . init Cause ( le , ioe ) ; }", "if ( user Credentials == null ) {", "throw new Login Exception ( STR_ ) ; }", "if ( logger . debug On ( ) ) {", "logger . debug ( STR_ , STR_ + password File Display Name ) ; }", "if ( try First Pass ) {", "try {", "attempt Authentication ( true ) ;", "succeeded = true ;", "if ( logger . debug On ( ) ) {", "logger . debug ( STR_ , STR_ ) ; }", "return true ; }", "catch ( Login Exception le ) {", "clean State ( ) ;", "logger . debug ( STR_ , STR_ ) ; } }", "else if ( use First Pass ) {", "try {", "attempt Authentication ( true ) ;", "succeeded = true ;", "if ( logger . debug On ( ) ) {", "logger . debug ( STR_ , STR_ ) ; }", "return true ; }", "catch ( Login Exception le ) {", "clean State ( ) ;", "logger . debug ( STR_ , STR_ ) ;", "throw le ; } }", "if ( logger . debug On ( ) ) {", "logger . debug ( STR_ , STR_ ) ; }", "try {", "attempt Authentication ( false ) ;", "succeeded = true ;", "if ( logger . debug On ( ) ) {", "logger . debug ( STR_ , STR_ ) ; }", "return true ; }", "catch ( Login Exception le ) {", "clean State ( ) ;", "logger . debug ( STR_ , STR_ ) ;", "throw le ; } }"]}
{"ids": "40895", "code": ["public Builder update Extension ( Extension extension ) {", "extensions . add ( extension ) ;", "return this ; }"]}
{"ids": "12667", "code": ["public void process Utterance ( Utterance utterance ) throws Process Exception {", "if ( utterance . get Relation ( Relation . SEGMENT ) == null ) {", "throw new Illegal State Exception ( STR_ ) ; }", "utterance . set Object ( Sample Info . UTT NAME , diphone Database . get Sample Info ( ) ) ;", "create Unit Relation ( utterance ) ; }"]}
{"ids": "50360", "code": ["public static int copy ( Input Stream in , Output Stream out ) throws IO Exception {", "Assert . not Null ( in , STR_ ) ;", "Assert . not Null ( out , STR_ ) ;", "try {", "return Stream Utils . copy ( in , out ) ; }", "finally {", "try {", "in . close ( ) ; }", "catch ( IO Exception ex ) { }", "try {", "out . close ( ) ; }", "catch ( IO Exception ex ) { } } }"]}
{"ids": "67607", "code": ["private String convert To Attribute Name ( String local Name ) {", "return local Name . replace ( STR_ , STR_ ) ; }"]}
{"ids": "35590", "code": ["public Expanded Statement Builder reference ( String property , Object value ) {", "check Can Change ( ) ;", "extra Info . add ( new Reference Info ( property , value ) ) ;", "return this ; }"]}
{"ids": "70870", "code": ["@ Target Api ( Build . VERSION CODES . HONEYCOMB ) protected void swipe View ( View child , float delta X , float delta Y ) {", "if ( is Fixed View ( child ) ) {", "delta X = delta X / NUM_ ; }", "float delta X Abs = Math . abs ( delta X ) ;", "float fraction Covered = delta X Abs / ( float ) child . get Width ( ) ;", "child . set Translation X ( delta X ) ;", "child . set Alpha ( NUM_ - fraction Covered ) ;", "if ( delta X > NUM_ ) child . set Rotation Y ( - NUM_ * fraction Covered ) ;", "else child . set Rotation Y ( NUM_ * fraction Covered ) ; }"]}
{"ids": "57026", "code": ["private void verify Is Root ( ) {", "if ( hierarchy Elements . size ( ) != NUM_ ) {", "throw new Illegal State Exception ( STR_ + STR_ + hierarchy ) ; } }"]}
{"ids": "77739", "code": ["@ Override public int size ( ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "return count ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "48126", "code": ["private void verify With Separate Signing Key ( X 509 Certificate cert , Public Key prev Key , boolean sign Flag , Set < X 509 Certificate > stacked Certs ) throws Cert Path Validator Exception {", "String msg = STR_ ;", "if ( debug != null ) {", "debug . println ( STR_ + STR_ + msg + STR_ ) ; }", "if ( ( stacked Certs != null ) && stacked Certs . contains ( cert ) ) {", "if ( debug != null ) {", "debug . println ( STR_ + STR_ ) ; }", "throw new Cert Path Validator Exception ( STR_ , null , null , - NUM_ , Basic Reason . UNDETERMINED REVOCATION STATUS ) ; }", "if ( ! sign Flag ) {", "build To New Key ( cert , null , stacked Certs ) ; }", "else {", "build To New Key ( cert , prev Key , stacked Certs ) ; } }"]}
{"ids": "68140", "code": ["public boolean is Running ( ) {", "return this . running ; }"]}
{"ids": "58076", "code": ["private boolean map Pattern Elem Pos ( int nesting , boolean is Start , boolean is Attr Name ) {", "if ( NUM_ == nesting ) {", "if ( m pattern Map Size >= m pattern Map . length ) {", "int pattern Map [ ] = m pattern Map ;", "int len = m pattern Map . length ;", "m pattern Map = new int [ m pattern Map Size + NUM_ ] ;", "System . arraycopy ( pattern Map , NUM_ , m pattern Map , NUM_ , len ) ; }", "if ( ! is Start ) {", "m pattern Map [ m pattern Map Size - NUM_ ] -= TARGETEXTRA ; }", "m pattern Map [ m pattern Map Size ] = ( m compiler . get Token Queue Size ( ) - ( is Attr Name ? NUM_ : NUM_ ) ) + TARGETEXTRA ;", "m pattern Map Size ++ ;", "is Start = false ; }", "return is Start ; }"]}
{"ids": "55185", "code": ["public boolean add Operation At First ( Operation operation ) {", "if ( is Running ) {", "if ( operation Handler Thread Handler == null ) return false ;", "return operation Handler Thread Handler . post At Front Of Queue ( new Android Operation ( this , operation ) ) ; }", "else {", "return operation Queue . add ( new Android Operation ( this , operation , Android Operation . Type . ATFIRST , null , NUM_ ) ) ; } }"]}
{"ids": "6578", "code": ["public static String to Unitbytes ( long bytes ) {", "if ( bytes < NUM_ ) {", "return STR_ + GENERAL UNIT KILOBYTES ; }", "long unit Value ;", "String unit Name ;", "if ( bytes < NUM_ ) {", "unit Value = NUM_ ;", "unit Name = GENERAL UNIT KILOBYTES ; }", "else if ( bytes < NUM_ ) {", "unit Value = NUM_ ;", "unit Name = GENERAL UNIT MEGABYTES ; }", "else if ( bytes < NUM_ ) {", "unit Value = NUM_ ;", "unit Name = GENERAL UNIT GIGABYTES ; }", "else {", "unit Value = NUM_ ;", "unit Name = GENERAL UNIT TERABYTES ; }", "Number Format number Format ;", "if ( ( double ) bytes * NUM_ / unit Value < NUM_ ) number Format = NUMBER FORMAT 1 ;", "else number Format = NUMBER FORMAT 0 ;", "try {", "return number Format . format ( ( double ) bytes / unit Value ) + STR_ + unit Name ; }", "catch ( Arithmetic Exception ae ) {", "return STR_ + unit Name ; } }"]}
{"ids": "38219", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = new Vector < Option > ( ) ;", "result . add Element ( new Option ( STR_ + STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ + STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "63486", "code": ["public static String change Password ( Connection conn , String user Name , String password ) throws Exception {", "Prepared Statement prep = conn . prepare Statement ( STR_ ) ;", "prep . set String ( NUM_ , password ) ;", "prep . set String ( NUM_ , user Name ) ;", "prep . execute Update ( ) ;", "return password ; }"]}
{"ids": "31107", "code": ["public Object remove ( Object key ) {", "process Queue ( ) ;", "return map . remove ( Key . create ( key , null ) ) ; }"]}
{"ids": "46403", "code": ["protected Rectangle compute Popup Bounds ( int px , int py , int pw , int ph ) {", "Toolkit toolkit = Toolkit . get Default Toolkit ( ) ;", "Rectangle screen Bounds ;", "Graphics Configuration gc = combo Box . get Graphics Configuration ( ) ;", "Point p = new Point ( ) ;", "Swing Utilities . convert Point From Screen ( p , combo Box ) ;", "if ( gc != null ) {", "Insets screen Insets = toolkit . get Screen Insets ( gc ) ;", "screen Bounds = gc . get Bounds ( ) ;", "screen Bounds . width -= ( screen Insets . left + screen Insets . right ) ;", "screen Bounds . height -= ( screen Insets . top + screen Insets . bottom ) ;", "screen Bounds . x += ( p . x + screen Insets . left ) ;", "screen Bounds . y += ( p . y + screen Insets . top ) ; }", "else {", "screen Bounds = new Rectangle ( p , toolkit . get Screen Size ( ) ) ; }", "Rectangle rect = new Rectangle ( px , py , pw , ph ) ;", "if ( py + ph > screen Bounds . y + screen Bounds . height && ph < screen Bounds . height ) {", "rect . y = - rect . height ; }", "return rect ; }"]}
{"ids": "75903", "code": ["public static Intent build Background Shortcut Intent ( File script , Parcelable icon Resource ) {", "Intent intent = new Intent ( ) ;", "intent . put Extra ( Intent . EXTRA SHORTCUT INTENT , build Start In Background Intent ( script ) ) ;", "intent . put Extra ( Intent . EXTRA SHORTCUT NAME , script . get Name ( ) ) ;", "intent . put Extra ( Intent . EXTRA SHORTCUT ICON RESOURCE , icon Resource ) ;", "return intent ; }"]}
{"ids": "35260", "code": ["public static boolean is Shown ( final Actor actor ) {", "return actor != null && actor . get Stage ( ) != null ; }"]}
{"ids": "86722", "code": ["public static void add Listener ( final Diagnostic Listener listener ) {", "if ( listener != null ) {", "LISTENERS . add ( listener ) ; } }"]}
{"ids": "72966", "code": ["public void shuffle Training Set ( ) {", "utils . shuffle List ( Training Files ) ; }"]}
{"ids": "49145", "code": ["public NTLM Authentication ( boolean is Proxy , URL url , Password Authentication pw ) {", "super ( is Proxy ? PROXY AUTHENTICATION : SERVER AUTHENTICATION , Auth Scheme . NTLM , url , STR_ ) ;", "init ( pw ) ; }"]}
{"ids": "87012", "code": ["public Message Channel create Message Channel ( SIP Request request , Message Processor mp , Hop next Hop ) throws IO Exception {", "Host target Host = new Host ( ) ;", "target Host . set Hostname ( next Hop . get Host ( ) ) ;", "Host Port target Host Port = new Host Port ( ) ;", "target Host Port . set Host ( target Host ) ;", "target Host Port . set Port ( next Hop . get Port ( ) ) ;", "Message Channel return Channel = mp . create Message Channel ( target Host Port ) ;", "return return Channel ; }"]}
{"ids": "86940", "code": ["public static byte [ ] generate Mac ( byte [ ] byte Cipher Text , Secret Key integrity Key ) throws No Such Algorithm Exception , Invalid Key Exception {", "Mac sha 256 HMAC = Mac . get Instance ( HMAC ALGORITHM ) ;", "sha 256 HMAC . init ( integrity Key ) ;", "return sha 256 HMAC . do Final ( byte Cipher Text ) ; }"]}
{"ids": "26615", "code": ["public void populate Edit Text ( String query ) {", "String text = query . trim ( ) ;", "set Search String ( text , true ) ;", "dispatch State Change ( Search View State . SEARCH ) ; }"]}
{"ids": "62335", "code": ["public static byte [ ] concat ( byte [ ] b 1 , byte [ ] b 2 ) {", "byte [ ] out = new byte [ b 1 . length + b 2 . length ] ;", "System . arraycopy ( b 1 , NUM_ , out , NUM_ , b 1 . length ) ;", "System . arraycopy ( b 2 , NUM_ , out , b 1 . length , b 2 . length ) ;", "return out ; }"]}
{"ids": "20582", "code": ["private void clip View On The Right ( Rect cur View Bound , float cur View Width , int right ) {", "cur View Bound . right = ( int ) ( right - m Clip Padding ) ;", "cur View Bound . left = ( int ) ( cur View Bound . right - cur View Width ) ; }"]}
{"ids": "73498", "code": ["public static void put Float ( String property , float val ) {", "SIMBRAIN PREFERENCES . put Float ( property , val ) ; }"]}
{"ids": "85329", "code": ["public int hash Code ( ) {", "return Arrays . hash Code ( this . uid ) ; }"]}
{"ids": "57508", "code": ["private void advance Run State ( int target State ) {", "for ( ; ; ) {", "int c = ctl . get ( ) ;", "if ( run State At Least ( c , target State ) || ctl . compare And Set ( c , ctl Of ( target State , worker Count Of ( c ) ) ) ) break ; } }"]}
{"ids": "53228", "code": ["public static final double [ ] copy ( final double [ ] v ) {", "return Arrays . copy Of ( v , v . length ) ; }"]}
{"ids": "49707", "code": ["public void add Action ( String action ) {", "Object [ ] args = new String [ NUM_ ] ;", "Simple Date Format sdf = new Simple Date Format ( context . get String ( R . string . date Format ) ) ;", "args [ NUM_ ] = sdf . format ( new Date ( ) ) ;", "String timestamp = context . get String ( R . string . timestamp , args ) ;", "history . add ( action + timestamp ) ;", "notify Listeners ( new Property Change Event ( this , Activity Constants . history Property , null , null ) ) ; }"]}
{"ids": "42251", "code": ["public Char Sequence sub Sequence ( int start , int end ) {", "return substring ( start , end ) ; }"]}
{"ids": "14814", "code": ["private Creation Template to Creation Template ( Attr Set t ) {", "Attr name Attr = t . get Attribute ( TEMPLATE NAME ) ;", "String name = null ;", "if ( name Attr != null ) {", "name = name Attr . get Value ( ) ; }", "Attr naming Attr = t . get Attribute ( TEMPLATE NAMINGATTRIBUTE ) ;", "String naming Attribute = null ;", "if ( naming Attr != null ) {", "naming Attribute = naming Attr . get Value ( ) ; }", "Attr class Attr = t . get Attribute ( TEMPLATE JAVACLASS ) ;", "String [ ] class Names = null ;", "if ( class Attr != null ) {", "class Names = class Attr . get String Values ( ) ; }", "Attr Set required = decode Attr ( t . get Attribute ( TEMPLATE REQUIRED ) , STR_ ) ;", "Attr Set optional = decode Attr ( t . get Attribute ( TEMPLATE OPTIONAL ) , STR_ ) ;", "Attr Set validated = decode Attr ( t . get Attribute ( TEMPLATE VALIDATED ) , STR_ ) ;", "Creation Template template = new Creation Template ( ) ;", "Array List classes = new Array List ( ) ;", "try {", "if ( class Names != null ) {", "for ( int i = NUM_ ; i < class Names . length ; i ++ ) {", "Class cls = Class . for Name ( class Names [ i ] ) ;", "classes . add ( cls ) ; } }", "template = new Creation Template ( name , required , optional , classes ) ; }", "catch ( Class Not Found Exception e ) {", "template = new Creation Template ( name , required , optional ) ; }", "if ( validated != null ) {", "template . set Validation ( validated ) ; }", "if ( naming Attribute != null ) {", "template . set Naming Attribute ( naming Attribute ) ; }", "return template ; }"]}
{"ids": "30243", "code": ["public void place Item ( Item Stack stack , Block Pos pos , World world , boolean centre Item ) {", "double offset = ( centre Item ) ? NUM_ : NUM_ ;", "Entity Item entityitem = new Entity Item ( world , ( double ) pos . get X ( ) + offset , ( double ) pos . get Y ( ) + offset , ( double ) pos . get Z ( ) + offset , stack ) ;", "entityitem . motion X = NUM_ ;", "entityitem . motion Y = NUM_ ;", "entityitem . motion Z = NUM_ ;", "entityitem . set Default Pickup Delay ( ) ;", "world . spawn Entity In World ( entityitem ) ; }"]}
{"ids": "35453", "code": ["private E unlink First ( ) {", "Node < E > f = first ;", "if ( f == null ) return null ;", "Node < E > n = f . next ;", "E item = f . item ;", "f . item = null ;", "f . next = f ;", "first = n ;", "if ( n == null ) last = null ;", "else n . prev = null ;", "-- count ;", "not Full . signal ( ) ;", "return item ; }"]}
{"ids": "72051", "code": ["private < M extends Configuration Client , P > Managed Object < M > create New Managed Object ( Managed Object Definition < M , ? > d , Managed Object Path < M , ? > p , Property Definition < P > naming Property Definition , String name , Collection < Property Exception > exceptions ) {", "Property Set child Properties = new Property Set ( ) ;", "for ( Property Definition < ? > pd : d . get All Property Definitions ( ) ) {", "try {", "create Property ( child Properties , p , pd ) ; }", "catch ( Property Exception e ) {", "if ( exceptions != null ) {", "exceptions . add ( e ) ; } } }", "if ( naming Property Definition != null ) {", "P value = naming Property Definition . decode Value ( name ) ;", "child Properties . set Property Values ( naming Property Definition , Collections . singleton ( value ) ) ; }", "return new Instance ( d , p , child Properties , false , naming Property Definition ) ; }"]}
{"ids": "68841", "code": ["private byte [ ] decrypt ( byte [ ] d , int start , int end , int key , int skip ) {", "if ( end - start - skip < NUM_ ) {", "skip = NUM_ ; }", "byte [ ] o = new byte [ end - start - skip ] ;", "int r = key ;", "int ipos ;", "int c 1 = NUM_ ;", "int c 2 = NUM_ ;", "for ( ipos = start ; ipos < end ; ipos ++ ) {", "int c = d [ ipos ] & NUM_ ;", "int p = ( c ^ ( r > > NUM_ ) ) & NUM_ ;", "r = ( ( c + r ) * c 1 + c 2 ) & NUM_ ;", "if ( ipos - start - skip >= NUM_ ) {", "o [ ipos - start - skip ] = ( byte ) p ; } }", "return o ; }"]}
{"ids": "57237", "code": ["public static void append Instruction ( OF Flow Mod . Builder fmb , OF Instruction inst ) {", "List < OF Instruction > new Il = new Array List < OF Instruction > ( ) ;", "List < OF Instruction > old Il = fmb . get Instructions ( ) ;", "if ( old Il != null ) {", "new Il . add All ( fmb . get Instructions ( ) ) ; }", "for ( OF Instruction i : new Il ) {", "if ( i . get Type ( ) == inst . get Type ( ) ) {", "new Il . remove ( i ) ; } }", "new Il . add ( inst ) ;", "fmb . set Instructions ( new Il ) ; }"]}
{"ids": "53095", "code": ["@ Override public final void insert All ( DBI Ds ids ) {", "if ( ids . is Empty ( ) || ( ids . size ( ) == NUM_ ) ) {", "return ; }", "if ( can Bulk Load ( ) ) {", "List < Rd KNN Entry > leafs = new Array List < > ( ids . size ( ) ) ;", "for ( DBID Iter iter = ids . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) {", "leafs . add ( create New Leaf Entry ( DBID Util . deref ( iter ) ) ) ; }", "bulk Load ( leafs ) ; }", "else {", "for ( DBID Iter iter = ids . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) {", "insert ( iter ) ; } }", "do Extra Integrity Checks ( ) ; }"]}
{"ids": "57849", "code": ["public static byte [ ] as Unsigned Byte Array ( Big Integer value ) {", "byte [ ] bytes = value . to Byte Array ( ) ;", "if ( bytes [ NUM_ ] == NUM_ ) {", "byte [ ] tmp = new byte [ bytes . length - NUM_ ] ;", "System . arraycopy ( bytes , NUM_ , tmp , NUM_ , tmp . length ) ;", "return tmp ; }", "return bytes ; }"]}
{"ids": "58187", "code": ["public static boolean is Supplemental ( int c ) {", "return ( c >= NUM_ && c <= NUM_ ) ; }"]}
{"ids": "72303", "code": ["private final String decode Short Unicode Name ( int len ) throws IO Exception {", "int out Ptr = NUM_ ;", "char [ ] out Buf = text Buffer . empty And Get Current Segment ( ) ;", "int in Ptr = input Ptr ;", "input Ptr += len ;", "final int [ ] codes = Smile Constants . s Utf 8 Unit Lengths ;", "final byte [ ] in Buf = input Buffer ;", "for ( int end = in Ptr + len ; in Ptr < end ; ) {", "int i = in Buf [ in Ptr ++ ] & NUM_ ;", "int code = codes [ i ] ;", "if ( code != NUM_ ) {", "switch ( code ) {", "case NUM_ :", "i = ( ( i & NUM_ ) << NUM_ ) | ( in Buf [ in Ptr ++ ] & NUM_ ) ;", "break ;", "case NUM_ :", "i = ( ( i & NUM_ ) << NUM_ ) | ( ( in Buf [ in Ptr ++ ] & NUM_ ) << NUM_ ) | ( in Buf [ in Ptr ++ ] & NUM_ ) ;", "break ;", "case NUM_ :", "i = ( ( i & NUM_ ) << NUM_ ) | ( ( in Buf [ in Ptr ++ ] & NUM_ ) << NUM_ ) | ( ( in Buf [ in Ptr ++ ] & NUM_ ) << NUM_ ) | ( in Buf [ in Ptr ++ ] & NUM_ ) ;", "i -= NUM_ ;", "out Buf [ out Ptr ++ ] = ( char ) ( NUM_ | ( i > > NUM_ ) ) ;", "i = NUM_ | ( i & NUM_ ) ;", "break ;", "default :", "report Error ( STR_ + Integer . to Hex String ( i ) + STR_ ) ; } }", "out Buf [ out Ptr ++ ] = ( char ) i ; }", "return text Buffer . set Current And Return ( out Ptr ) ; }"]}
{"ids": "15167", "code": ["public void save Device Profile ( @ Nonnull String user , @ Nonnull String realm , @ Nonnull Push Device Settings device Settings ) throws Auth Login Exception {", "Reject . if Null ( user , realm , device Settings ) ;", "try {", "devices Dao . save Device Profiles ( user , realm , json Utils . to Json Values ( Collections . singleton List ( device Settings ) ) ) ; }", "catch ( IO Exception e ) {", "debug . error ( STR_ , user , realm , e ) ;", "throw new Auth Login Exception ( e ) ; } }"]}
{"ids": "319", "code": ["public Ranking Image List Provider in Days ( int days ) {", "m Time = Integer . to String ( days ) + STR_ ;", "return this ; }"]}
{"ids": "28766", "code": ["public void remove Update Listener ( Animator Update Listener listener ) {", "if ( m Update Listeners == null ) {", "return ; }", "m Update Listeners . remove ( listener ) ;", "if ( m Update Listeners . size ( ) == NUM_ ) {", "m Update Listeners = null ; } }"]}
{"ids": "68567", "code": ["public final void db Unavailable ( final boolean alarm Up , final String exception Msg , final String db Info ) {", "if ( alarm Up == Fallback Alarms Interface . ACTIVATED ) {", "Array List recipients = new Array List ( ) ;", "Mail Details Bean mail Details = new Mail Details Bean ( ) ;", "mail Details . set Sender ( STR_ ) ;", "recipients . add ( STR_ ) ;", "mail Details . set To Recipients ( recipients ) ;", "mail Details . set Subject ( STR_ ) ;", "mail Details . set Message ( STR_ + db Info + STR_ + exception Msg ) ;", "mail Details . set Server ( STR_ ) ;", "SMTP Mail Sender mail Sender = new SMTP Mail Sender ( ) ;", "try {", "mail Sender . send Mail ( mail Details ) ; }", "catch ( Mail Sender Exception e ) {", "LOG . debug ( e . get Message ( ) ) ; } } }"]}
{"ids": "63951", "code": ["public static String tidy String ( String string ) {", "if ( string . matches ( STR_ ) ) {", "return string ; }", "else {", "return string . replace All ( STR_ , STR_ ) ; } }"]}
{"ids": "75170", "code": ["public Select < T > sort Desc ( String ... columns ) {", "for ( String column : columns ) {", "m Sorting Order List . add ( column + STR_ ) ; }", "return this ; }"]}
{"ids": "47394", "code": ["public Log Record ( Level level , String msg ) {", "level . get Class ( ) ;", "this . level = level ;", "message = msg ;", "sequence Number = global Sequence Number . get And Increment ( ) ;", "thread ID = default Thread ID ( ) ;", "millis = System . current Time Millis ( ) ;", "need To Infer Caller = true ; }"]}
{"ids": "68715", "code": ["public Matrix correlation ( ) {", "final Matrix corr = covariance ( ) ;", "final Array v = corr . diagonal ( ) ;", "for ( int i = NUM_ ; i < dimension ; i ++ ) {", "for ( int j = NUM_ ; j < dimension ; j ++ ) {", "if ( i == j ) {", "if ( v . $ [ v . ( i ) ] == NUM_ ) {", "corr . $ [ corr . ( i , j ) ] = NUM_ ; }", "else {", "corr . $ [ corr . ( i , j ) ] *= NUM_ / Math . sqrt ( v . $ [ v . ( i ) ] * v . $ [ v . ( j ) ] ) ; } }", "else {", "if ( v . $ [ v . ( i ) ] == NUM_ && v . $ [ v . ( j ) ] == NUM_ ) {", "corr . $ [ corr . ( i , j ) ] = NUM_ ; }", "else if ( v . $ [ v . ( i ) ] == NUM_ || v . $ [ v . ( j ) ] == NUM_ ) {", "corr . $ [ corr . ( i , j ) ] = NUM_ ; }", "else {", "corr . $ [ corr . ( i , j ) ] *= NUM_ / Math . sqrt ( v . $ [ v . ( i ) ] * v . $ [ v . ( j ) ] ) ; } } } }", "return corr ; }"]}
{"ids": "76494", "code": ["@ Not Null public static Save Directory from ( File file ) throws File Not Found Exception {", "File current File = file ;", "Save Directory result = null ;", "if ( current File == null ) { }", "else {", "result = create Valid Save Directory ( current File ) ;", "current File = current File . get Parent File ( ) ;", "if ( result != null ) {", "return result ; }", "else if ( current File == null ) { }", "else {", "result = create Valid Save Directory ( current File ) ;", "current File = current File . get Parent File ( ) ;", "if ( result != null ) {", "return result ; }", "else { } } }", "throw new File Not Found Exception ( STR_ + file ) ; }"]}
{"ids": "65324", "code": ["public Serializer serializer ( ) {", "return serializer ; }"]}
{"ids": "62874", "code": ["private void add Included Resources ( Json Api Document json Api Document , Persistent Resource rec , List < String > requested Relation Paths ) {", "requested Relation Paths . for Each ( null ) ; }"]}
{"ids": "41745", "code": ["protected Video DTO extract One Video From Cursor ( Cursor cursor ) {", "if ( video Id Col == - NUM_ ) {", "video Id Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . ID ) ;", "video Title Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . TITLE ) ;", "video Display Name Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . DISPLAY NAME ) ;", "video Description Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . DESCRIPTION ) ;", "video Bucket Id Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . BUCKET ID ) ;", "video Bucket Display Name Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . BUCKET DISPLAY NAME ) ;", "video Data Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . DATA ) ;", "video Mime Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . MIME TYPE ) ;", "video Resolution Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . RESOLUTION ) ;", "video Size Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . SIZE ) ;", "video Date Added Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . DATE ADDED ) ;", "video Date Taken Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . DATE TAKEN ) ;", "video Date Modify Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . DATE MODIFIED ) ;", "video Latitude Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . LATITUDE ) ;", "video Longitude Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . LONGITUDE ) ;", "video Album Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . ALBUM ) ;", "video Artist Col = cursor . get Column Index Or Throw ( Media Store . Video . Media . ARTIST ) ; }", "Video DTO video = new Video DTO ( ) ;", "video . set Id ( cursor . get Long ( video Id Col ) ) ;", "video . set Title ( cursor . get String ( video Title Col ) ) ;", "video . set Display Name ( cursor . get String ( video Display Name Col ) ) ;", "video . set Description ( cursor . get String ( video Description Col ) ) ;", "video . set Bucket Id ( cursor . get String ( video Bucket Id Col ) ) ;", "video . set Bucket Display Name ( cursor . get String ( video Bucket Display Name Col ) ) ;", "video . set Uri ( cursor . get String ( video Data Col ) ) ;", "video . set Mime Type ( cursor . get String ( video Mime Col ) ) ;", "video . set Size ( cursor . get Long ( video Size Col ) ) ;", "video . set Added Date ( new Date ( cursor . get Long ( video Date Added Col ) ) ) ;", "video . set Taken Date ( new Date ( cursor . get Long ( video Date Taken Col ) ) ) ;", "video . set Modify Date ( new Date ( cursor . get Long ( video Date Modify Col ) ) ) ;", "video . set Latitude ( cursor . get Double ( video Latitude Col ) ) ;", "video . set Longitude ( cursor . get Double ( video Longitude Col ) ) ;", "video . set Album ( cursor . get String ( video Album Col ) ) ;", "video . set Artist ( cursor . get String ( video Artist Col ) ) ;", "String resolution = cursor . get String ( video Resolution Col ) ;", "if ( resolution != null ) {", "try {", "String [ ] res = resolution . split ( STR_ ) ;", "int width = Integer . parse Int ( res [ NUM_ ] ) ;", "int height = Integer . parse Int ( res [ NUM_ ] ) ;", "video . set Width ( width ) ;", "video . set Height ( height ) ; }", "catch ( Exception e ) {", "Log . w ( TAG , String . format ( STR_ , video . get Id ( ) , video . get Title ( ) , video . get Display Name ( ) ) , e ) ; } }", "return video ; }"]}
{"ids": "33368", "code": ["private void shift Segments ( int from Idx , int offset ) {", "for ( Element element : elements ) {", "if ( element . end . left > from Idx ) {", "shift Segment ( element . start , from Idx , offset ) ;", "shift Segment ( element . end , from Idx , offset ) ;", "if ( element . text != null ) {", "for ( Segment text Segment : element . text ) {", "shift Segment ( text Segment , from Idx , offset ) ; } } } } }"]}
{"ids": "67283", "code": ["public Ref Update . Result modify File ( Change Edit edit , String file , Raw Input content ) throws Auth Exception , Invalid Change Operation Exception , IO Exception {", "return modify ( Tree Operation . CHANGE ENTRY , edit , file , null , content ) ; }"]}
{"ids": "81496", "code": ["private void start Document ( final boolean multi Object Mode ) throws SAX Exception {", "if ( depth == NUM_ ) {", "content Handler . start Document ( ) ;", "if ( multi Object Mode ) {", "depth ++ ; } } }"]}
{"ids": "67729", "code": ["public void flush ( ) throws IO Exception {", "writer . flush ( ) ; }"]}
{"ids": "32401", "code": ["private static Array List < Grid Collision Job Context Wrapper > slice ( Collection < Collision Job Context > src , int num ) {", "Array List < Grid Collision Job Context Wrapper > slice = new Array List < > ( ) ;", "Iterator < Collision Job Context > iter = src . iterator ( ) ;", "for ( int i = NUM_ ; i < num && iter . has Next ( ) ; i ++ ) slice . add ( new Grid Collision Job Context Wrapper ( iter . next ( ) , i ) ) ;", "return slice ; }"]}
{"ids": "20536", "code": ["protected void calculate Formatter ( float min , float max ) {", "float reference = NUM_ ;", "if ( m Data == null || m Data . get X Val Count ( ) < NUM_ ) {", "reference = Math . max ( Math . abs ( min ) , Math . abs ( max ) ) ; }", "else {", "reference = Math . abs ( max - min ) ; }", "int digits = Utils . get Decimals ( reference ) ;", "m Default Formatter = new Default Value Formatter ( digits ) ; }"]}
{"ids": "83811", "code": ["public Request add ( Request request ) {", "request . set Request Queue ( this ) ;", "synchronized ( m Current Requests ) {", "m Current Requests . add ( request ) ; }", "request . set Sequence ( get Sequence Number ( ) ) ;", "request . add Marker ( STR_ ) ;", "if ( ! request . should Cache ( ) ) {", "m Network Queue . add ( request ) ;", "return request ; }", "synchronized ( m Waiting Requests ) {", "String cache Key = request . get Cache Key ( ) ;", "if ( m Waiting Requests . contains Key ( cache Key ) ) {", "Queue < Request > staged Requests = m Waiting Requests . get ( cache Key ) ;", "if ( staged Requests == null ) {", "staged Requests = new Linked List < Request > ( ) ; }", "staged Requests . add ( request ) ;", "m Waiting Requests . put ( cache Key , staged Requests ) ;", "if ( Volley Log . DEBUG ) {", "Volley Log . v ( STR_ , cache Key ) ; } }", "else {", "m Waiting Requests . put ( cache Key , null ) ;", "m Cache Queue . add ( request ) ; }", "return request ; } }"]}
{"ids": "6388", "code": ["public String lookup ( String data ) {", "Iterator < String > it = map . get Prefixed By ( data ) ;", "if ( ! it . has Next ( ) ) return null ;", "return it . next ( ) ; }"]}
{"ids": "51944", "code": ["public static Object load Module ( String homedir , Script Engine engine , String name ) throws File Not Found Exception , Script Exception {", "Hash Map < String , File > mp = ( Hash Map < String , File > ) engine . get ( STR_ ) ;", "Object ret = load ( mp . get ( name ) , engine ) ;", "return ret ; }"]}
{"ids": "61905", "code": ["@ Override public void modify Variable Id ( String node Id , String new Id ) {", "Map < Assignment , Utility Estimate > utilities 2 = new Hash Map < Assignment , Utility Estimate > ( ) ;", "for ( Assignment a : table . key Set ( ) ) {", "Assignment b = new Assignment ( ) ;", "for ( String var : a . get Variables ( ) ) {", "String new Var = ( var . equals ( node Id ) ) ? new Id : var ;", "b . add Pair ( new Var , a . get Value ( var ) ) ; }", "utilities 2 . put ( b , table . get ( a ) ) ; }", "table = utilities 2 ; }"]}
{"ids": "53288", "code": ["public static long [ ] truncate I ( long [ ] v , int len ) {", "final int zap = ( v . length * Long . SIZE ) - len ;", "final int zap Words = ( zap > > > LONG LOG 2 SIZE ) ;", "final int zapbits = zap & LONG LOG 2 MASK ;", "Arrays . fill ( v , v . length - zap Words , v . length , NUM_ ) ;", "if ( zapbits > NUM_ ) {", "v [ v . length - zap Words - NUM_ ] &= ( LONG ALL BITS > > > zapbits ) ; }", "return v ; }"]}
{"ids": "60359", "code": ["private void position At Central Directory ( ) throws IO Exception {", "boolean found = false ;", "long off = archive . length ( ) - MIN EOCD SIZE ;", "if ( off >= NUM_ ) {", "archive . seek ( off ) ;", "byte [ ] sig = JB Zip Output Stream . EOCD SIG ;", "int curr = archive . read ( ) ;", "while ( curr != - NUM_ ) {", "if ( curr == sig [ POS 0 ] ) {", "curr = archive . read ( ) ;", "if ( curr == sig [ POS 1 ] ) {", "curr = archive . read ( ) ;", "if ( curr == sig [ POS 2 ] ) {", "curr = archive . read ( ) ;", "if ( curr == sig [ POS 3 ] ) {", "found = true ;", "break ; } } } }", "archive . seek ( -- off ) ;", "curr = archive . read ( ) ; } }", "if ( ! found ) {", "throw new Zip Exception ( STR_ ) ; }", "archive . seek ( off + CFD LOCATOR OFFSET ) ;", "byte [ ] cfd Offset = new byte [ WORD ] ;", "archive . read Fully ( cfd Offset ) ;", "currentcfdfoffset = Zip Long . get Value ( cfd Offset ) ;", "archive . seek ( currentcfdfoffset ) ; }"]}
{"ids": "71105", "code": ["public List query ( double x 1 , double x 2 ) {", "return super . query ( new Interval ( Math . min ( x 1 , x 2 ) , Math . max ( x 1 , x 2 ) ) ) ; }"]}
{"ids": "3046", "code": ["public static boolean is Null ( Object object ) {", "return object != null && object == NULL CACHE . get ( object . get Class ( ) ) ; }"]}
{"ids": "85280", "code": ["public static void create Destination Folder ( String path ) {", "File fpath = new File ( path ) ;", "fpath . mkdirs ( ) ; }"]}
{"ids": "4694", "code": ["public void remove All ( ) {", "log . debug ( STR_ + connection To Added . size ( ) ) ;", "connection To Added . clear ( ) ; }"]}
{"ids": "51519", "code": ["public float read Float ( ) throws IO Exception {", "return primitive Types . read Float ( ) ; }"]}
{"ids": "35870", "code": ["public synchronized static int insert Lua State ( Lua State L ) {", "int i ;", "for ( i = NUM_ ; i < states . size ( ) ; i ++ ) {", "Lua State state = ( Lua State ) states . get ( i ) ;", "if ( state != null ) {", "if ( state . get C Ptr Peer ( ) == L . get C Ptr Peer ( ) ) return i ; } }", "i = get Next State Index ( ) ;", "states . set ( i , L ) ;", "return i ; }"]}
{"ids": "84304", "code": ["public Phone Number Validator ( @ Non Null final Char Sequence error Message ) {", "super ( error Message , REGEX ) ; }"]}
{"ids": "17400", "code": ["@ Override public int hash Code ( ) {", "return fully Qualified Name . hash Code ( ) ; }"]}
{"ids": "42632", "code": ["public static void put String 2 bytes ( byte [ ] destbytes , String src String , int dest Offset , int src Offset , int count ) {", "for ( int i = NUM_ ; i < count ; i ++ ) {", "destbytes [ count + i ] = src String . get Bytes ( ) [ i ] ; } }"]}
{"ids": "20688", "code": ["public Point 2 D convert Window To Reference ( Point 2 D apt ) {", "if ( scroll Back Reference Rect == null ) return null ;", "else return new Point 2 D . Double ( ( apt . get X ( ) - scroll Back Reference Rect . get X ( ) ) / scroll Back Reference Rect . get Width ( ) , ( apt . get Y ( ) - scroll Back Reference Rect . get Y ( ) ) / scroll Back Reference Rect . get Height ( ) ) ; }"]}
{"ids": "67926", "code": ["public void clear ( ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "for ( Tenant Queue q : qs . values ( ) ) {", "q . clear ( ) ; } }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "22659", "code": ["public void print Usage ( Print Writer pw , int width , String cmd Line Syntax ) {", "int arg Pos = cmd Line Syntax . index Of ( STR_ ) + NUM_ ;", "print Wrapped ( pw , width , default Syntax Prefix . length ( ) + arg Pos , default Syntax Prefix + cmd Line Syntax ) ; }"]}
{"ids": "87097", "code": ["public boolean has Name Value ( String name ) {", "return name Value Map . contains Key ( name . to Lower Case ( ) ) ; }"]}
{"ids": "36396", "code": ["private void add New Line ( ) {", "if ( add Line Dialog == null ) {", "add Line Dialog = new Add Parallel Line Dialog ( ) ; }", "add Line Dialog . set Chart Engine ( engine ) ;", "add Line Dialog . show Dialog ( ) ;", "if ( horizontal Line Radiobutton . is Selected ( ) ) {", "set Horizontal Line Selected ( ) ; }", "else if ( vertical Line Radiobutton . is Selected ( ) ) {", "set Vertical Line Selected ( ) ; } }"]}
{"ids": "56668", "code": ["public final static < T > Completable Future < List < T > > stream To Completable Future ( final Stream < T > stream ) {", "return Completable Future . completed Future ( stream . collect ( Cyclops Collectors . to List X ( ) ) ) ; }"]}
{"ids": "68142", "code": ["@ Suppress Warnings ( STR_ ) public static boolean is Gzip Supported ( final Http Servlet Request request ) {", "if ( request != null ) {", "final Enumeration < String > header Names = request . get Header Names ( ) ;", "if ( header Names != null ) {", "while ( header Names . has More Elements ( ) ) {", "final String header Name = header Names . next Element ( ) ;", "final Matcher m = PATTERN ACCEPT ENCODING . matcher ( header Name ) ;", "if ( m . find ( ) ) {", "final String header Value = request . get Header ( header Name ) ;", "final Matcher m Value = PATTERN GZIP . matcher ( header Value ) ;", "return m Value . find ( ) ; } } } }", "return false ; }"]}
{"ids": "83521", "code": ["private boolean is Language Allowed ( String language Key ) {", "if ( allowed Languages == null ) return true ;", "return allowed Languages . contains ( language Key ) ; }"]}
{"ids": "30273", "code": ["public List < Boundary > populate Ward ( final Long zone Id ) {", "List < Boundary > ward List = new Linked List < Boundary > ( ) ;", "try {", "ward List = boundary Service . get Child Boundaries By Boundary Id ( zone Id ) ; }", "catch ( final Exception e ) {", "LOGGER . error ( STR_ + e . get Message ( ) ) ;", "throw new Application Runtime Exception ( STR_ , e ) ; }", "return ward List ; }"]}
{"ids": "18272", "code": ["static Object new Instance ( String class Name , Class Loader cl , boolean do Fallback ) throws Configuration Error {", "try {", "Class provider Class = find Provider Class ( class Name , cl , do Fallback ) ;", "Object instance = provider Class . new Instance ( ) ;", "debug Println ( STR_ + provider Class + STR_ + cl ) ;", "return instance ; }", "catch ( Class Not Found Exception x ) {", "throw new Configuration Error ( STR_ + class Name + STR_ , x ) ; }", "catch ( Exception x ) {", "throw new Configuration Error ( STR_ + class Name + STR_ + x , x ) ; } }"]}
{"ids": "15433", "code": ["public void handle Request ( List arguments ) {", "try {", "Install Logger migrate Log = new Install Logger ( STR MIGRATE ) ;", "Multiple Migrate Driver driver = new Multiple Migrate Driver ( ) ;", "if ( arguments . is Empty ( ) ) {", "Debug . log ( STR_ ) ;", "driver . migrate ( migrate Log ) ; }", "else if ( arguments . size ( ) == NUM_ ) {", "Debug . log ( STR_ ) ;", "driver . migrate ( migrate Log ) ; } }", "catch ( Install Abort Exception ia ) {", "Debug . log ( STR_ , ia ) ;", "Console . println Raw Text ( ia . get Message ( ) ) ; }", "catch ( Install Exception ex ) {", "Debug . log ( STR_ , ex ) ;", "print Console Message ( LOC HR ERR MIGRATE , new Object [ ] { ex . get Message ( ) } ) ; } }"]}
{"ids": "74645", "code": ["public static Synchronizer Status make Running Status ( ) {", "return new Synchronizer Status ( Status . RUNNING , new Date ( ) , null ) ; }"]}
{"ids": "85375", "code": ["public static Iterable < File > apply Cwd ( File cwd , Iterable < File > files ) {", "if ( files != null ) {", "List < File > result = new Array List < File > ( ) ;", "for ( File f : files ) {", "result . add ( apply Cwd ( cwd , f ) ) ; }", "return result ; }", "else {", "return null ; } }"]}
{"ids": "31718", "code": ["private void close ( boolean force ) {", "if ( close Guard . compare And Set ( false , true ) ) hadoop . close ( force ) ; }"]}
{"ids": "47948", "code": ["Mutable Big Integer divide Knuth ( Mutable Big Integer b , Mutable Big Integer quotient , boolean need Remainder ) {", "if ( b . int Len == NUM_ ) throw new Arithmetic Exception ( STR_ ) ;", "if ( int Len == NUM_ ) {", "quotient . int Len = quotient . offset = NUM_ ;", "return need Remainder ? new Mutable Big Integer ( ) : null ; }", "int cmp = compare ( b ) ;", "if ( cmp < NUM_ ) {", "quotient . int Len = quotient . offset = NUM_ ;", "return need Remainder ? new Mutable Big Integer ( this ) : null ; }", "if ( cmp == NUM_ ) {", "quotient . value [ NUM_ ] = quotient . int Len = NUM_ ;", "quotient . offset = NUM_ ;", "return need Remainder ? new Mutable Big Integer ( ) : null ; }", "quotient . clear ( ) ;", "if ( b . int Len == NUM_ ) {", "int r = divide One Word ( b . value [ b . offset ] , quotient ) ;", "if ( need Remainder ) {", "if ( r == NUM_ ) return new Mutable Big Integer ( ) ;", "return new Mutable Big Integer ( r ) ; }", "else {", "return null ; } }", "if ( int Len >= KNUTH POW 2 THRESH LEN ) {", "int trailing Zero Bits = Math . min ( get Lowest Set Bit ( ) , b . get Lowest Set Bit ( ) ) ;", "if ( trailing Zero Bits >= KNUTH POW 2 THRESH ZEROS * NUM_ ) {", "Mutable Big Integer a = new Mutable Big Integer ( this ) ;", "b = new Mutable Big Integer ( b ) ;", "a . right Shift ( trailing Zero Bits ) ;", "b . right Shift ( trailing Zero Bits ) ;", "Mutable Big Integer r = a . divide Knuth ( b , quotient ) ;", "r . left Shift ( trailing Zero Bits ) ;", "return r ; } }", "return divide Magnitude ( b , quotient , need Remainder ) ; }"]}
{"ids": "41281", "code": ["public static Cache . Entry make Random Cache Entry ( byte [ ] data , boolean is Expired , boolean needs Refresh ) {", "Random random = new Random ( ) ;", "Cache . Entry entry = new Cache . Entry ( ) ;", "if ( data != null ) {", "entry . data = data ; }", "else {", "entry . data = new byte [ random . next Int ( NUM_ ) ] ; }", "entry . etag = String . value Of ( random . next Long ( ) ) ;", "entry . last Modified = random . next Long ( ) ;", "entry . ttl = is Expired ? NUM_ : Long . MAX VALUE ;", "entry . soft Ttl = needs Refresh ? NUM_ : Long . MAX VALUE ;", "return entry ; }"]}
{"ids": "5452", "code": ["@ Suppress Warnings ( STR_ ) public void insert ( int id , Comparable < E > priority ) {", "int i ;", "i = ++ n ;", "Element H p = new Element H ( ) ;", "while ( i > NUM_ ) {", "int p Idx = i / NUM_ ;", "Element H e Idx = ( Element H ) elements [ p Idx ] ;", "p . id = e Idx . id ;", "p . priority = e Idx . priority ;", "if ( priority . compare To ( ( E ) p . priority ) > NUM_ ) {", "break ; }", "Element H ei = ( Element H ) elements [ i ] ;", "ei . id = p . id ;", "ei . priority = p . priority ;", "pos [ p . id ] = i ;", "i = p Idx ; }", "Element H ei = ( Element H ) elements [ i ] ;", "ei . id = id ;", "ei . priority = priority ;", "pos [ id ] = i ; }"]}
{"ids": "43068", "code": ["External Problem ( Socket socket ) throws IO Exception {", "this ( socket . get Input Stream ( ) , socket . get Output Stream ( ) ) ; }"]}
{"ids": "82565", "code": ["private static void stop GC ( ) {", "gc Should Loop = false ;", "synchronized ( LOCK ) {", "LOCK . notify ( ) ; } }"]}
{"ids": "18283", "code": ["public final void insert Element At ( int value , int at ) {", "if ( ( m first Free + NUM_ ) >= m map Size ) {", "m map Size += m blocksize ;", "int new Map [ ] = new int [ m map Size ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m first Free + NUM_ ) ;", "m map = new Map ; }", "if ( at <= ( m first Free - NUM_ ) ) {", "System . arraycopy ( m map , at , m map , at + NUM_ , m first Free - at ) ; }", "m map [ at ] = value ;", "m first Free ++ ; }"]}
{"ids": "6798", "code": ["public static @ Nullable Request Body create Gzip ( final Media Type media Type , final String body ) {", "Byte Array Output Stream gzip Byte Array Output Stream = new Byte Array Output Stream ( ) ;", "try {", "Output Stream gzip Output Stream = new GZIP Output Stream ( gzip Byte Array Output Stream ) ;", "gzip Output Stream . write ( body . get Bytes ( ) ) ;", "gzip Output Stream . close ( ) ; }", "catch ( IO Exception e ) {", "return null ; }", "return Request Body . create ( media Type , gzip Byte Array Output Stream . to Byte Array ( ) ) ; }"]}
{"ids": "64779", "code": ["private void process TSBK ( TSBK Message tsbk ) {", "broadcast ( new Decoder State Event ( this , Event . CONTINUATION , State . CONTROL ) ) ;", "if ( tsbk . get Vendor ( ) == Vendor . STANDARD ) {", "switch ( tsbk . get Opcode ( ) ) {", "case ADJACENT STATUS BROADCAST :", "if ( tsbk instanceof Adjacent Status Broadcast ) {", "I Adjacent Site ias = ( I Adjacent Site ) tsbk ;", "m Neighbor Map . put ( ias . get Unique ID ( ) , ias ) ;", "update System ( ias . get System ID ( ) ) ; }", "break ;", "case ACKNOWLEDGE RESPONSE :", "process TSBK Response ( tsbk ) ;", "break ;", "case AUTHENTICATION COMMAND :", "process TSBK Command ( tsbk ) ;", "break ;", "case CALL ALERT :", "process TSBK Page ( tsbk ) ;", "break ;", "case DENY RESPONSE :", "process TSBK Response ( tsbk ) ;", "break ;", "case EXTENDED FUNCTION COMMAND :", "process TSBK Command ( tsbk ) ;", "break ;", "case GROUP AFFILIATION QUERY :", "process TSBK Query ( tsbk ) ;", "break ;", "case GROUP AFFILIATION RESPONSE :", "process TSBK Response ( tsbk ) ;", "break ;", "case GROUP DATA CHANNEL ANNOUNCEMENT :", "case GROUP DATA CHANNEL ANNOUNCEMENT EXPLICIT :", "process TSBK Data Channel Announcement ( tsbk ) ;", "break ;", "case GROUP DATA CHANNEL GRANT :", "case GROUP VOICE CHANNEL GRANT :", "case GROUP VOICE CHANNEL GRANT UPDATE :", "case GROUP VOICE CHANNEL GRANT UPDATE EXPLICIT :", "case INDIVIDUAL DATA CHANNEL GRANT :", "case TELEPHONE INTERCONNECT VOICE CHANNEL GRANT :", "case TELEPHONE INTERCONNECT VOICE CHANNEL GRANT UPDATE :", "case UNIT TO UNIT VOICE CHANNEL GRANT :", "case UNIT TO UNIT VOICE CHANNEL GRANT UPDATE :", "process TSBK Channel Grant ( tsbk ) ;", "break ;", "case IDENTIFIER UPDATE NON VUHF :", "case IDENTIFIER UPDATE VHF UHF BANDS :", "Identifier Update iu = ( Identifier Update ) tsbk ;", "if ( ! m Bands . contains Key ( iu . get Identifier ( ) ) ) {", "m Bands . put ( iu . get Identifier ( ) , iu ) ; }", "break ;", "case LOCATION REGISTRATION RESPONSE :", "case UNIT DEREGISTRATION ACKNOWLEDGE :", "process TSBK Response ( tsbk ) ;", "break ;", "case MESSAGE UPDATE :", "process TSBK Message ( tsbk ) ;", "break ;", "case NETWORK STATUS BROADCAST :", "m Network Status = ( module . decode . p 25 . message . tsbk . osp . control . Network Status Broadcast ) tsbk ;", "break ;", "case PROTECTION PARAMETER UPDATE :", "process TSBK Response ( tsbk ) ;", "break ;", "case QUEUED RESPONSE :", "process TSBK Response ( tsbk ) ;", "break ;", "case RADIO UNIT MONITOR COMMAND :", "process TSBK Command ( tsbk ) ;", "break ;", "case RFSS STATUS BROADCAST :", "process TSBKRFSS Status ( ( RFSS Status Broadcast ) tsbk ) ;", "break ;", "case ROAMING ADDRESS COMMAND :", "process TSBK Command ( tsbk ) ;", "break ;", "case SECONDARY CONTROL CHANNEL BROADCAST :", "module . decode . p 25 . message . tsbk . osp . control . Secondary Control Channel Broadcast sccb = ( module . decode . p 25 . message . tsbk . osp . control . Secondary Control Channel Broadcast ) tsbk ;", "if ( sccb . get Downlink Frequency 1 ( ) > NUM_ ) {", "m Secondary Control Channels . add ( sccb ) ; }", "break ;", "case SNDCP DATA CHANNEL ANNOUNCEMENT EXPLICIT :", "m SNDCP Data Channel = ( SNDCP Data Channel Announcement Explicit ) tsbk ;", "break ;", "case SNDCP DATA CHANNEL GRANT :", "process TSBK Channel Grant ( tsbk ) ;", "break ;", "case STATUS QUERY :", "process TSBK Query ( tsbk ) ;", "break ;", "case STATUS UPDATE :", "process TSBK Response ( tsbk ) ;", "break ;", "case TELEPHONE INTERCONNECT ANSWER REQUEST :", "case UNIT TO UNIT ANSWER REQUEST :", "process TSBK Page ( tsbk ) ;", "break ;", "case UNIT REGISTRATION COMMAND :", "process TSBK Command ( tsbk ) ;", "break ;", "case UNIT REGISTRATION RESPONSE :", "process TSBK Response ( tsbk ) ;", "break ;", "default :", "break ; } }", "else if ( tsbk . get Vendor ( ) == Vendor . MOTOROLA ) {", "process Motorola TSBK ( ( Motorola TSBK Message ) tsbk ) ; } }"]}
{"ids": "60063", "code": ["public Xintro Activity Builder remove Fragment ( int fragment Pos ) {", "intro Fragment Model List . remove ( fragment Pos ) ;", "return this ; }"]}
{"ids": "49524", "code": ["public Tree Viewer Builder ( Composite parent , int style ) {", "mappings = Collections . empty Map ( ) ;", "checkable = ( style & SWT . CHECK ) == SWT . CHECK ;", "if ( checkable ) {", "viewer = new Checkbox Tree Viewer ( parent , style ) ; }", "else {", "viewer = new Tree Viewer ( parent , style ) ; }", "Column Viewer Tool Tip Support . enable For ( viewer , Tool Tip . NO RECREATE ) ; }"]}
{"ids": "16159", "code": ["@ Override public void write ( byte [ ] buffer , int offset , int count ) throws IO Exception {", "synchronized ( int Thread ) {", "int avail = ( wrote Index - data End Index + data . length ) % data . length ;", "if ( avail == NUM_ ) avail = data . length ;", "if ( avail < count ) {", "throw new IO Exception ( STR_ + avail + STR_ + count ) ; }", "if ( count > data . length - data End Index ) {", "int first Part = data . length - data End Index ;", "int second Part = count - first Part ;", "System . arraycopy ( buffer , offset , data , data End Index , first Part ) ;", "System . arraycopy ( buffer , offset + first Part , data , NUM_ , second Part ) ;", "data End Index = second Part ; }", "else {", "System . arraycopy ( buffer , offset , data , data End Index , count ) ;", "data End Index += count ; }", "int Thread . notify ( ) ; } }"]}
{"ids": "79748", "code": ["public void pause ( ) {", "pause Lock . lock ( ) ;", "try {", "paused = true ; }", "finally {", "pause Lock . unlock ( ) ; } }"]}
{"ids": "67410", "code": ["public void add To Consolitated Msg ( final String message ) {", "if ( consolidated Message != null && consolidated Message . length ( ) > NUM_ ) {", "consolidated Message = consolidated Message + STR_ ; }", "consolidated Message = consolidated Message + message ; }"]}
{"ids": "25250", "code": ["private static byte [ ] read Class ( final Input Stream is , boolean close ) throws IO Exception {", "if ( is == null ) {", "throw new IO Exception ( STR_ ) ; }", "try {", "byte [ ] b = new byte [ is . available ( ) ] ;", "int len = NUM_ ;", "while ( true ) {", "int n = is . read ( b , len , b . length - len ) ;", "if ( n == - NUM_ ) {", "if ( len < b . length ) {", "byte [ ] c = new byte [ len ] ;", "System . arraycopy ( b , NUM_ , c , NUM_ , len ) ;", "b = c ; }", "return b ; }", "len += n ;", "if ( len == b . length ) {", "int last = is . read ( ) ;", "if ( last < NUM_ ) {", "return b ; }", "byte [ ] c = new byte [ b . length + NUM_ ] ;", "System . arraycopy ( b , NUM_ , c , NUM_ , len ) ;", "c [ len ++ ] = ( byte ) last ;", "b = c ; } } }", "finally {", "if ( close ) {", "is . close ( ) ; } } }"]}
{"ids": "54553", "code": ["public void sort ( final Comparator < ? super T > comparator ) {", "synchronized ( m Lock ) {", "Collections . sort ( m List , comparator ) ; }", "notify Data Set Changed ( ) ; }"]}
{"ids": "25025", "code": ["public String crop Keep Final Character ( String string , char final Char ) {", "String cropped = crop ( string ) ;", "if ( ( null == string ) || string . equals ( cropped ) ) {", "return string ; }", "if ( cropped . length ( ) == NUM_ ) {", "return cropped ; }", "return cropped + final Char ; }"]}
{"ids": "79997", "code": ["public static boolean is Derived Adjective ( final String word ) {", "if ( word . length ( ) > NUM_ ) {", "if ( word . ends With ( STR_ ) || word . ends With ( STR_ ) ) return true ;", "if ( word . ends With ( STR_ ) ) return true ; }", "return false ; }"]}
{"ids": "3186", "code": ["String rename File ( String input Filename ) {", "for ( Pattern search Exp : regex Mappings . key Set ( ) ) {", "Matcher matcher = search Exp . matcher ( input Filename ) ;", "if ( matcher . find ( ) ) {", "String renamed = matcher . replace First ( regex Mappings . get ( search Exp ) ) ;", "return FILE SEP CHAR MATCHER . trim Leading From ( renamed ) ; } }", "throw new Moe Problem ( STR_ + STR_ , input Filename ) ; }"]}
{"ids": "68273", "code": ["private static int validate Adb Server Port ( @ Non Null String adb Server Port ) throws Illegal Argument Exception {", "try {", "int port = Integer . decode ( adb Server Port ) ;", "if ( port <= NUM_ || port >= NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return port ; }", "catch ( Number Format Exception e ) {", "throw new Illegal Argument Exception ( STR_ ) ; } }"]}
{"ids": "66328", "code": ["public static String format Elapsed ( Timestamp start ) {", "if ( start == null ) return STR_ ;", "long start Time = start . get Time ( ) ;", "long end Time = System . current Time Millis ( ) ;", "return format Elapsed ( end Time - start Time ) ; }"]}
{"ids": "77977", "code": ["@ Override public void stop ( ) {", "for ( Thread thread : threads ) {", "thread . interrupt ( ) ; }", "try {", "for ( Thread thread : threads ) {", "thread . join ( ) ; } }", "catch ( Interrupted Exception e ) { } }"]}
{"ids": "22255", "code": ["private boolean verify Published Dual Inet Address ( String node Id ) {", "Dual Inet Address dual Address = null ;", "Configuration config = query Configuration ( Constants . NODE DUALINETADDR CONFIG , node Id ) ;", "if ( config != null ) {", "dual Address = parse Inet Address Config ( config ) ; }", "if ( ( dual Address != null ) && dual Address . equals ( inet Address Lookup Map . get Dual Inet Address ( ) ) ) {", "return true ; }", "return false ; }"]}
{"ids": "71978", "code": ["public boolean response Is String ( String oid ) {", "return string Responses . contains ( oid ) ; }"]}
{"ids": "35963", "code": ["private static int type ( final Class Writer cw , final String desc ) {", "String t ;", "int index = desc . char At ( NUM_ ) == STR_ ? desc . index Of ( STR_ ) + NUM_ : NUM_ ;", "switch ( desc . char At ( index ) ) {", "case STR_ :", "return NUM_ ;", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "return INTEGER ;", "case STR_ :", "return FLOAT ;", "case STR_ :", "return LONG ;", "case STR_ :", "return DOUBLE ;", "case STR_ :", "t = desc . substring ( index + NUM_ , desc . length ( ) - NUM_ ) ;", "return OBJECT | cw . add Type ( t ) ;", "default :", "int data ;", "int dims = index + NUM_ ;", "while ( desc . char At ( dims ) == STR_ ) {", "++ dims ; }", "switch ( desc . char At ( dims ) ) {", "case STR_ :", "data = BOOLEAN ;", "break ;", "case STR_ :", "data = CHAR ;", "break ;", "case STR_ :", "data = BYTE ;", "break ;", "case STR_ :", "data = SHORT ;", "break ;", "case STR_ :", "data = INTEGER ;", "break ;", "case STR_ :", "data = FLOAT ;", "break ;", "case STR_ :", "data = LONG ;", "break ;", "case STR_ :", "data = DOUBLE ;", "break ;", "default :", "t = desc . substring ( dims + NUM_ , desc . length ( ) - NUM_ ) ;", "data = OBJECT | cw . add Type ( t ) ; }", "return ( dims - index ) << NUM_ | data ; } }"]}
{"ids": "59897", "code": ["public void log Fine ( String message ) {", "logger . fine ( log Prefix + message ) ; }"]}
{"ids": "41241", "code": ["public static Optional < String > create Input Dialog ( final Window owner , final String title , final String label ) {", "final Text Input Dialog dialog = new Text Input Dialog ( ) ;", "dialog . set Title ( title ) ;", "dialog . set Header Text ( null ) ;", "dialog . set Content Text ( label ) ;", "dialog . init Owner ( owner ) ;", "return dialog . show And Wait ( ) ; }"]}
{"ids": "41259", "code": ["public static void close Output Stream ( Output Stream stream , String tag ) {", "if ( stream != null ) {", "try {", "stream . close ( ) ; }", "catch ( IO Exception e ) {", "Log . e ( tag , STR_ + e ) ; } } }"]}
{"ids": "71266", "code": ["private static String encode ( final String text ) throws Unsupported Encoding Exception {", "return URL Encoder . encode ( text , STR_ ) ; }"]}
{"ids": "9330", "code": ["public static String convert To RGB ( int color ) {", "String red = Integer . to Hex String ( Color . red ( color ) ) ;", "String green = Integer . to Hex String ( Color . green ( color ) ) ;", "String blue = Integer . to Hex String ( Color . blue ( color ) ) ;", "if ( red . length ( ) == NUM_ ) {", "red = STR_ + red ; }", "if ( green . length ( ) == NUM_ ) {", "green = STR_ + green ; }", "if ( blue . length ( ) == NUM_ ) {", "blue = STR_ + blue ; }", "return STR_ + red + green + blue ; }"]}
{"ids": "49401", "code": ["private static final void append Encoded Byte ( String Buffer buffer , byte value , byte [ ] state ) {", "if ( state [ NUM_ ] != NUM_ ) {", "char c = ( char ) ( ( state [ NUM_ ] << NUM_ ) | ( ( ( int ) value ) & NUM_ ) ) ;", "buffer . append ( c ) ;", "state [ NUM_ ] = NUM_ ; }", "else {", "state [ NUM_ ] = NUM_ ;", "state [ NUM_ ] = value ; } }"]}
{"ids": "76861", "code": ["public Sided Plane ( double p X , double p Y , double p Z , Vector v , double D ) {", "super ( v , D ) ;", "sig Num = Math . signum ( evaluate ( p X , p Y , p Z ) ) ;", "if ( sig Num == NUM_ ) throw new Illegal Argument Exception ( STR_ ) ; }"]}
{"ids": "78556", "code": ["public String build Union Query ( String [ ] sub Queries , String sort Order , String limit ) {", "String Builder query = new String Builder ( NUM_ ) ;", "int sub Query Count = sub Queries . length ;", "String union Operator = m Distinct ? STR_ : STR_ ;", "for ( int i = NUM_ ; i < sub Query Count ; i ++ ) {", "if ( i > NUM_ ) {", "query . append ( union Operator ) ; }", "query . append ( sub Queries [ i ] ) ; }", "append Clause ( query , STR_ , sort Order ) ;", "append Clause ( query , STR_ , limit ) ;", "return query . to String ( ) ; }"]}
{"ids": "83628", "code": ["void register Callback ( Bluetooth Callback callback ) {", "synchronized ( m Callbacks ) {", "m Callbacks . add ( callback ) ; } }"]}
{"ids": "51791", "code": ["private void validate Table Meta Data No Row ( String table Name Pattern , String [ ] types ) throws Exception {", "try ( Result Set tables = dbmd . get Tables ( null , null , table Name Pattern , types ) ) {", "assert False ( String . format ( STR_ , table Name Pattern , Arrays . to String ( types ) ) , tables . next ( ) ) ; } }"]}
{"ids": "84428", "code": ["void check Class Bounds ( Diagnostic Position pos , Type type ) {", "check Class Bounds ( pos , new Hash Map < Type Symbol , Type > ( ) , type ) ; }"]}
{"ids": "16084", "code": ["private static String parse Token ( String pattern , int [ ] index Ref ) {", "String Buffer buf = new String Buffer ( ) ;", "int i = index Ref [ NUM_ ] ;", "int length = pattern . length ( ) ;", "char c = pattern . char At ( i ) ;", "if ( c >= STR_ && c <= STR_ || c >= STR_ && c <= STR_ ) {", "buf . append ( c ) ;", "while ( i + NUM_ < length ) {", "char peek = pattern . char At ( i + NUM_ ) ;", "if ( peek == c ) {", "buf . append ( c ) ;", "i ++ ; }", "else {", "break ; } } }", "else {", "buf . append ( STR_ ) ;", "boolean in Literal = false ;", "for ( ; i < length ; i ++ ) {", "c = pattern . char At ( i ) ;", "if ( c == STR_ ) {", "if ( i + NUM_ < length && pattern . char At ( i + NUM_ ) == STR_ ) {", "i ++ ;", "buf . append ( c ) ; }", "else {", "in Literal = ! in Literal ; } }", "else if ( ! in Literal && ( c >= STR_ && c <= STR_ || c >= STR_ && c <= STR_ ) ) {", "i -- ;", "break ; }", "else {", "buf . append ( c ) ; } } }", "index Ref [ NUM_ ] = i ;", "return buf . to String ( ) ; }"]}
{"ids": "27423", "code": ["public int alloc ( final RW Store store , final int size , final I Allocation Context context ) {", "try {", "if ( size <= NUM_ ) throw new Illegal Argument Exception ( STR_ + size ) ;", "if ( size > m size ) throw new Illegal Argument Exception ( STR_ + m size + STR_ + size + STR_ ) ;", "if ( m free Bits == NUM_ ) {", "throw new Illegal State Exception ( STR_ + m size + STR_ ) ; }", "int addr = - NUM_ ;", "if ( m size <= m store . c Small Slot ) {", "return alloc From Index ( size ) ; }", "final Iterator < Alloc Block > iter = m alloc Blocks . iterator ( ) ;", "int count = - NUM_ ;", "while ( addr == - NUM_ && iter . has Next ( ) ) {", "count ++ ;", "final Alloc Block block = iter . next ( ) ;", "check Block ( block ) ;", "addr = block . alloc ( m size ) ; }", "if ( addr != - NUM_ ) {", "addr += NUM_ ;", "if ( -- m free Bits == NUM_ ) {", "if ( s islog Trace ) log . trace ( STR_ ) ;", "remove From Free List ( ) ;", "if ( m free List . size ( ) > NUM_ ) {", "if ( s islog Debug ) {", "final Fixed Allocator nxt = ( Fixed Allocator ) m free List . get ( NUM_ ) ;", "log . debug ( STR_ + nxt . get Summary Stats ( ) ) ; } } }", "addr += ( count * NUM_ * m bit Size ) ;", "final int value = - ( ( m index << RW Store . OFFSET BITS ) + addr ) ;", "if ( m stats Bucket != null ) {", "m stats Bucket . allocate ( size ) ; }", "return value ; }", "else {", "String Builder sb = new String Builder ( ) ;", "sb . append ( STR_ + m free Bits + STR_ ) ;", "for ( Alloc Block ab : m alloc Blocks ) {", "sb . append ( ab . show ( ) + STR_ ) ; }", "log . error ( sb ) ;", "return NUM_ ; } }", "finally {", "if ( s islog Debug ) check Bits ( ) ; } }"]}
{"ids": "34585", "code": ["public static Native Page create Native Page For URL ( String url , Native Page candidate Page , Tab tab , Tab Model Selector tab Model Selector , Activity activity ) {", "return create Native Page For URL ( url , candidate Page , tab , tab Model Selector , activity , tab . is Incognito ( ) ) ; }"]}
{"ids": "1674", "code": ["@ Override public void node Down ( long event UID , String node ID ) {", "try {", "lock . lock ( ) ;", "untried Connectors . put All ( tried Connectors ) ;", "tried Connectors . clear ( ) ;", "if ( untried Connectors . size ( ) > NUM_ ) {", "condition . signal ( ) ; } }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "31904", "code": ["public static synchronized Collection < String > all Local MA Cs ( ) {", "List < String > macs = new Array List < > ( NUM_ ) ;", "try {", "Enumeration < Network Interface > itfs = Network Interface . get Network Interfaces ( ) ;", "if ( itfs != null ) {", "for ( Network Interface itf : as Iterable ( itfs ) ) {", "byte [ ] hw Addr = itf . get Hardware Address ( ) ;", "if ( hw Addr != null && hw Addr . length > NUM_ ) {", "String mac = byte Array 2 Hex String ( hw Addr ) ;", "if ( ! macs . contains ( mac ) ) macs . add ( mac ) ; } } } }", "catch ( Socket Exception ignore ) {", "return Collections . empty List ( ) ; }", "Collections . sort ( macs ) ;", "return macs ; }"]}
{"ids": "47218", "code": ["private final void access Check ( T obj ) {", "if ( ! cclass . is Instance ( obj ) ) throw access Check Exception ( obj ) ; }"]}
{"ids": "46547", "code": ["protected void mark First Time ( Element elem ) {", "String elem Name = elem . get Name ( ) ;", "if ( elem Name . equals ( STR_ ) ) {", "seen Html = true ; }", "else if ( elem Name . equals ( STR_ ) ) {", "seen Head = true ; }", "else if ( elem Name . equals ( STR_ ) ) {", "if ( buf . length == NUM_ ) {", "char [ ] new Buf = new char [ NUM_ ] ;", "new Buf [ NUM_ ] = buf [ NUM_ ] ;", "buf = new Buf ; }", "seen Body = true ; } }"]}
{"ids": "9257", "code": ["public static String time To String ( long period ) {", "period /= NUM_ ;", "final long milsecs = period % NUM_ ;", "period /= NUM_ ;", "final long secs = period % NUM_ ;", "period /= NUM_ ;", "final long mins = period % NUM_ ;", "period /= NUM_ ;", "final long hours = period ;", "return String . format ( STR_ , hours , mins , secs , milsecs ) ; }"]}
{"ids": "18424", "code": ["private boolean condition M 0 ( String value , int index ) {", "if ( char At ( value , index + NUM_ ) == STR_ ) {", "return true ; }", "return contains ( value , index - NUM_ , NUM_ , STR_ ) && ( ( index + NUM_ ) == value . length ( ) - NUM_ || contains ( value , index + NUM_ , NUM_ , STR_ ) ) ; }"]}
{"ids": "52742", "code": ["@ Reference ( authors = STR_ , title = STR_ , booktitle = STR_ , url = STR_ ) public double compute Tau ( long c , long d , double m , long wd , long bd ) {", "double tie = ( wd * ( wd - NUM_ ) + bd * ( bd - NUM_ ) ) > > > NUM_ ;", "return ( c - d ) / Math . sqrt ( ( m - tie ) * m ) ; }"]}
{"ids": "30761", "code": ["private void read Object ( Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "in . default Read Object ( ) ;", "service ID = new Service ID ( in ) ; }"]}
{"ids": "32159", "code": ["private void generate Create Events ( List < Igfs Path > created Paths , boolean file ) {", "if ( evts . is Recordable ( Event Type . EVT IGFS DIR CREATED ) ) {", "for ( int i = NUM_ ; i < created Paths . size ( ) - NUM_ ; i ++ ) Igfs Utils . send Events ( igfs Ctx . kernal Context ( ) , created Paths . get ( i ) , Event Type . EVT IGFS DIR CREATED ) ; }", "Igfs Path leaf Path = created Paths . get ( created Paths . size ( ) - NUM_ ) ;", "if ( file ) {", "Igfs Utils . send Events ( igfs Ctx . kernal Context ( ) , leaf Path , Event Type . EVT IGFS FILE CREATED ) ;", "Igfs Utils . send Events ( igfs Ctx . kernal Context ( ) , leaf Path , Event Type . EVT IGFS FILE OPENED WRITE ) ; }", "else Igfs Utils . send Events ( igfs Ctx . kernal Context ( ) , leaf Path , Event Type . EVT IGFS DIR CREATED ) ; }"]}
{"ids": "65297", "code": ["public Opt In Template Class Resolver ( Set allowed Classes , List trusted Templates ) {", "this . allowed Classes = allowed Classes != null ? allowed Classes : Collections . EMPTY SET ;", "if ( trusted Templates != null ) {", "trusted Template Names = new Hash Set ( ) ;", "trusted Template Prefixes = new Array List ( ) ;", "Iterator it = trusted Templates . iterator ( ) ;", "while ( it . has Next ( ) ) {", "String li = ( String ) it . next ( ) ;", "if ( li . starts With ( STR_ ) ) li = li . substring ( NUM_ ) ;", "if ( li . ends With ( STR_ ) ) {", "trusted Template Prefixes . add ( li . substring ( NUM_ , li . length ( ) - NUM_ ) ) ; }", "else {", "trusted Template Names . add ( li ) ; } } }", "else {", "trusted Template Names = Collections . EMPTY SET ;", "trusted Template Prefixes = Collections . EMPTY LIST ; } }"]}
{"ids": "32243", "code": ["protected void async Op Release ( ) {", "if ( async Ops Sem != null ) async Ops Sem . release ( ) ; }"]}
{"ids": "73697", "code": ["public static boolean valid System Name Config ( String system Name , char type ) {", "if ( ! valid System Name Format ( system Name , type ) ) {", "return false ; }", "return true ; }"]}
{"ids": "62954", "code": ["public void remove All ( ) {", "if ( m Records . size ( ) >= NUM_ ) {", "m Records . clear ( ) ;", "m Current Position = - NUM_ ;", "notify Observers ( ) ; } }"]}
{"ids": "67322", "code": ["public synchronized boolean start Reindexer ( String name , boolean force ) throws Reindexer Already Running Exception {", "Online Reindexer < ? , ? , ? > reindexer = reindexers . get ( name ) ;", "validate Reindexer Not Running ( reindexer ) ;", "if ( force || ! is Current Index Version Latest ( name , reindexer ) ) {", "reindexer . start ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "79473", "code": ["@ Override public void print Stack Trace ( ) {", "super . print Stack Trace ( ) ;", "if ( nested != null ) nested . print Stack Trace ( ) ; }"]}
{"ids": "5215", "code": ["private static void update Last Modified ( File dest Dir , String war File Path ) {", "File war File = new File ( war File Path ) ;", "dest Dir . set Last Modified ( war File . last Modified ( ) ) ; }"]}
{"ids": "7174", "code": ["public void add Child ( Base Assembly Node child Node ) {", "child Node . parent Node = this ;", "child Nodes . add ( child Node ) ; }"]}
{"ids": "38340", "code": ["protected void notify History Changed Listeners ( ) {", "Iterator < History Changed Listener > iter ;", "History Changed Listener l ;", "iter = m History Changed Listeners . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "l = iter . next ( ) ;", "l . history Changed ( new History Changed Event ( this , HISTORY NAME , get History ( ) ) ) ; } }"]}
{"ids": "44148", "code": ["private void signal Not Full ( ) {", "final Reentrant Lock put Lock = this . put Lock ;", "put Lock . lock ( ) ;", "try {", "not Full . signal ( ) ; }", "finally {", "put Lock . unlock ( ) ; } }"]}
{"ids": "71501", "code": ["@ Requires Permission ( Manifest . permission . CAMERA ) public Camera Source start ( ) throws IO Exception {", "synchronized ( m Camera Lock ) {", "if ( m Camera != null ) {", "return this ; }", "m Camera = create Camera ( ) ;", "if ( Build . VERSION . SDK INT >= Build . VERSION CODES . HONEYCOMB ) {", "m Dummy Surface Texture = new Surface Texture ( DUMMY TEXTURE NAME ) ;", "m Camera . set Preview Texture ( m Dummy Surface Texture ) ; }", "else {", "m Dummy Surface View = new Surface View ( m Context ) ;", "m Camera . set Preview Display ( m Dummy Surface View . get Holder ( ) ) ; }", "m Camera . start Preview ( ) ;", "m Processing Thread = new Thread ( m Frame Processor ) ;", "m Frame Processor . set Active ( true ) ;", "m Processing Thread . start ( ) ; }", "return this ; }"]}
{"ids": "4470", "code": ["private Text View find Text View By Tag Id ( final String tag Id ) {", "for ( final Text View view : m Tag View Map . values ( ) ) {", "final Tag tag = ( Tag ) view . get Tag ( ) ;", "if ( tag Id . equals ( tag . id ) ) {", "return view ; } }", "return null ; }"]}
{"ids": "1955", "code": ["public Space prune ( Space prefix ) throws Scope Exception {", "Space x = this ;", "Array List < Space > stack = new Array List < > ( ) ;", "while ( x != null && ! x . equals ( prefix ) ) {", "stack . add ( NUM_ , x ) ;", "x = x . get Parent ( ) ; }", "if ( x == null ) {", "throw new Scope Exception ( STR_ ) ; }", "else {", "Space result = new Space ( universe , x . get Domain ( ) ) ;", "for ( Space space : stack ) {", "result = result . S ( space . get Relation ( ) ) ; }", "return result ; } }"]}
{"ids": "79946", "code": ["default void infof ( String format , Object ... args ) {", "info ( String . format ( format , args ) ) ; }"]}
{"ids": "70895", "code": ["public static int darker ( int color , float factor ) {", "int a = Color . alpha ( color ) ;", "int r = Color . red ( color ) ;", "int g = Color . green ( color ) ;", "int b = Color . blue ( color ) ;", "return Color . argb ( a , Math . max ( ( int ) ( r * factor ) , NUM_ ) , Math . max ( ( int ) ( g * factor ) , NUM_ ) , Math . max ( ( int ) ( b * factor ) , NUM_ ) ) ; }"]}
{"ids": "5914", "code": ["public < FV > FV extract Raw Java Field Value ( Object object ) throws SQL Exception {", "Object val ;", "if ( field Get Method == null ) {", "try {", "val = field . get ( object ) ; }", "catch ( Exception e ) {", "throw Sql Exception Util . create ( STR_ + this , e ) ; } }", "else {", "try {", "val = field Get Method . invoke ( object ) ; }", "catch ( Exception e ) {", "throw Sql Exception Util . create ( STR_ + field Get Method + STR_ + this , e ) ; } }", "@ Suppress Warnings ( STR_ ) FV converted = ( FV ) val ;", "return converted ; }"]}
{"ids": "63025", "code": ["public static void write File ( File file , byte [ ] data ) {", "try {", "Random Access File ra = new Random Access File ( file , STR_ ) ;", "ra . write ( data ) ;", "ra . set Length ( data . length ) ;", "ra . close ( ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ + file , e ) ; } }"]}
{"ids": "75801", "code": ["public static double [ ] threshold String To Array ( String top , int L ) {", "if ( top . starts With ( STR_ ) ) {", "return ML Utils . to Double Array ( top ) ; }", "else {", "double t [ ] = new double [ L ] ;", "Arrays . fill ( t , Double . parse Double ( top ) ) ;", "return t ; } }"]}
{"ids": "37590", "code": ["@ Override public String [ ] determine Column Constraints ( Result Producer rp ) throws Exception {", "return null ; }"]}
{"ids": "848", "code": ["public static int eval ( String url , String text ) throws IO Exception {", "String return Value = null ;", "if ( url . starts With ( STR_ ) ) {", "return Value = do Http ( url , text ) ; }", "else if ( url . starts With ( STR_ ) ) {", "return Value = do Bsh ( url , text ) ; }", "else throw new IO Exception ( STR_ + STR_ ) ;", "try {", "return Integer . parse Int ( return Value ) ; }", "catch ( Exception e ) {", "return NUM_ ; } }"]}
{"ids": "48075", "code": ["public DSA Private Key ( byte [ ] encoded ) throws Invalid Key Exception {", "clear Old Key ( ) ;", "decode ( encoded ) ; }"]}
{"ids": "59534", "code": ["private void send Broadcast New Operation ( Target target , Remote Operation operation ) {", "Intent intent = new Intent ( ACTION OPERATION ADDED ) ;", "if ( target . m Account != null ) {", "intent . put Extra ( EXTRA ACCOUNT , target . m Account ) ; }", "else {", "intent . put Extra ( EXTRA SERVER URL , target . m Server Url ) ; }", "send Sticky Broadcast ( intent ) ; }"]}
{"ids": "56321", "code": ["int successful ( ) {", "return success . get ( ) ; }"]}
{"ids": "31013", "code": ["public void monitor ( String key ) {", "Timer t = new Timer ( true ) ;", "t . schedule ( new Watchable Registration ( key ) , NUM_ * NUM_ , NUM_ * NUM_ ) ; }"]}
{"ids": "15161", "code": ["protected int check Risk Attribute ( ) {", "int ret Val = NUM_ ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , ADAPTIVE ) ; }", "if ( risk Attribute Name != null && risk Attribute Value != null ) {", "Set < String > risk Attribute Values = null ;", "risk Attribute Values = get Identity Attribute Set ( risk Attribute Name ) ;", "if ( risk Attribute Values != null ) {", "for ( String risk Attr : risk Attribute Values ) {", "if ( risk Attribute Value . equals Ignore Case ( risk Attr ) ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , ADAPTIVE ) ; }", "ret Val = risk Attribute Score ;", "break ; } } } }", "if ( ! risk Attribute Invert ) {", "ret Val = risk Attribute Score - ret Val ; }", "return ret Val ; }"]}
{"ids": "24398", "code": ["public static Meth Executor Result execute Instance ( String receiver , String selector , Class [ ] types , Object [ ] args ) {", "try {", "Class receiver Class = Class . for Name ( receiver ) ;", "Constructor init = receiver Class . get Declared Constructor ( new Class [ NUM_ ] ) ;", "init . set Accessible ( true ) ;", "Object target = init . new Instance ( new Object [ NUM_ ] ) ;", "Object res = null ;", "try {", "Method the Method = get Method ( receiver Class , selector , types ) ;", "res = the Method . invoke ( target , args ) ;", "return new Meth Executor Result ( res ) ; }", "catch ( Invocation Target Exception inv Targ Ex ) {", "Throwable targ Ex = inv Targ Ex . get Target Exception ( ) ;", "if ( targ Ex == null ) {", "return new Meth Executor Result ( res ) ; }", "else {", "return new Meth Executor Result ( targ Ex ) ; } } }", "catch ( Virtual Machine Error e ) {", "System Failure . initiate Failure ( e ) ;", "throw e ; }", "catch ( Throwable t ) {", "return new Meth Executor Result ( t ) ; } }"]}
{"ids": "30816", "code": ["private void write Object ( Object Output Stream stream ) throws IO Exception {", "stream . default Write Object ( ) ;", "marshal Attributes ( attrs , stream ) ; }"]}
{"ids": "48182", "code": ["@ Override synchronized public void write ( byte b [ ] , int off , int len ) throws IO Exception {", "if ( b == null ) {", "throw new Null Pointer Exception ( ) ; }", "else if ( off < NUM_ || len < NUM_ || len > b . length - off ) {", "throw new Index Out Of Bounds Exception ( ) ; }", "else if ( len == NUM_ ) {", "return ; }", "c . check Write ( ) ;", "boolean is First Record Of The Payload = true ;", "try {", "do {", "boolean hold Record = false ;", "int howmuch ;", "if ( is First Record Of The Payload && c . need To Split Payload ( ) ) {", "howmuch = Math . min ( NUM_ , r . available Data Bytes ( ) ) ;", "if ( ( len != NUM_ ) && ( howmuch == NUM_ ) ) {", "hold Record = true ; } }", "else {", "howmuch = Math . min ( len , r . available Data Bytes ( ) ) ; }", "if ( is First Record Of The Payload && howmuch != NUM_ ) {", "is First Record Of The Payload = false ; }", "if ( howmuch > NUM_ ) {", "r . write ( b , off , howmuch ) ;", "off += howmuch ;", "len -= howmuch ; }", "c . write Record ( r , hold Record ) ;", "c . check Write ( ) ; }", "while ( len > NUM_ ) ; }", "catch ( Exception e ) {", "c . handle Exception ( e ) ; } }"]}
{"ids": "77822", "code": ["public boolean on Intercept Touch Event ( Motion Event ev ) {", "@ Suppress Warnings ( STR_ ) final boolean debug = false ;", "if ( debug ) {", "Log . d ( Launcher . TAG , STR_ + ev + STR_ + m Dragging ) ; }", "acquire Velocity Tracker And Add Movement ( ev ) ;", "final int action = ev . get Action ( ) ;", "final int [ ] drag Layer Pos = get Clamped Drag Layer Pos ( ev . get X ( ) , ev . get Y ( ) ) ;", "final int drag Layer X = drag Layer Pos [ NUM_ ] ;", "final int drag Layer Y = drag Layer Pos [ NUM_ ] ;", "switch ( action ) {", "case Motion Event . ACTION MOVE :", "break ;", "case Motion Event . ACTION DOWN :", "m Motion Down X = drag Layer X ;", "m Motion Down Y = drag Layer Y ;", "m Last Drop Target = null ;", "break ;", "case Motion Event . ACTION UP :", "m Last Touch Up Time = System . current Time Millis ( ) ;", "if ( m Dragging ) {", "Point F vec = is Flinging To Delete ( m Drag Object . drag Source ) ;", "if ( ! Delete Drop Target . will Accept Drop ( m Drag Object . drag Info ) ) {", "vec = null ; }", "if ( vec != null ) {", "drop On Fling To Delete Target ( drag Layer X , drag Layer Y , vec ) ; }", "else {", "drop ( drag Layer X , drag Layer Y ) ; } }", "end Drag ( ) ;", "break ;", "case Motion Event . ACTION CANCEL :", "cancel Drag ( ) ;", "break ; }", "return m Dragging ; }"]}
{"ids": "19883", "code": ["private void reset Database ( Tungsten Properties service Props , Map < String , String > progress ) throws Interrupted Exception {", "Data Source Administrator admin = null ;", "String service Name = service Props . get String ( Replicator Conf . SERVICE NAME ) ;", "try {", "admin = new Data Source Administrator ( service Props ) ;", "admin . prepare ( ) ;", "progress . put ( STR_ , service Name ) ;", "boolean cleared = admin . reset All ( ) ;", "if ( cleared ) {", "logger . info ( STR_ ) ; }", "else {", "logger . info ( STR_ + service Name ) ; } }", "catch ( Replicator Exception e ) {", "logger . error ( String . format ( STR_ , service Name , e . get Message ( ) ) , e ) ; }", "finally {", "if ( admin != null ) {", "admin . release ( ) ; } } }"]}
{"ids": "34348", "code": ["public static final void write Value Xml ( Object v , String name , Xml Serializer out ) throws Xml Pull Parser Exception , IO Exception {", "String type Str ;", "if ( v == null ) {", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . end Tag ( null , STR_ ) ;", "return ; }", "else if ( v instanceof String ) {", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . text ( v . to String ( ) ) ;", "out . end Tag ( null , STR_ ) ;", "return ; }", "else if ( v instanceof Integer ) {", "type Str = STR_ ; }", "else if ( v instanceof Long ) {", "type Str = STR_ ; }", "else if ( v instanceof Float ) {", "type Str = STR_ ; }", "else if ( v instanceof Double ) {", "type Str = STR_ ; }", "else if ( v instanceof Boolean ) {", "type Str = STR_ ; }", "else if ( v instanceof byte [ ] ) {", "write Byte Array Xml ( ( byte [ ] ) v , name , out ) ;", "return ; }", "else if ( v instanceof int [ ] ) {", "write Int Array Xml ( ( int [ ] ) v , name , out ) ;", "return ; }", "else if ( v instanceof Map ) {", "write Map Xml ( ( Map ) v , name , out ) ;", "return ; }", "else if ( v instanceof List ) {", "write List Xml ( ( List ) v , name , out ) ;", "return ; }", "else if ( v instanceof Char Sequence ) {", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . text ( v . to String ( ) ) ;", "out . end Tag ( null , STR_ ) ;", "return ; }", "else {", "throw new Runtime Exception ( STR_ + v ) ; }", "out . start Tag ( null , type Str ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . attribute ( null , STR_ , v . to String ( ) ) ;", "out . end Tag ( null , type Str ) ; }"]}
{"ids": "43031", "code": ["private void initialize Ideal Point ( ) {", "ideal Point = new double [ problem . get Number Of Objectives ( ) ] ;", "Arrays . fill ( ideal Point , Double . POSITIVE INFINITY ) ; }"]}
{"ids": "42147", "code": ["private long start Wait ( ) {", "return System . nano Time ( ) ; }"]}
{"ids": "74718", "code": ["public static String [ ] read Font Names ( final Font Data font Data ) {", "final String [ ] font Names = new String [ NUM_ ] ;", "font Names [ NUM_ ] = null ;", "final Buffered Reader br = new Buffered Reader ( new String Reader ( new String ( font Data . get Bytes ( NUM_ , font Data . length ( ) ) ) ) ) ;", "String line = null ;", "while ( true ) {", "try {", "line = br . read Line ( ) ; }", "catch ( final IO Exception e ) {", "Log Writer . write Log ( STR_ + e . get Message ( ) ) ; }", "if ( line == null ) {", "break ; }", "if ( line . starts With ( STR_ ) ) {", "final int name Start = line . index Of ( STR_ , NUM_ ) ;", "if ( name Start != - NUM_ ) {", "final int name End = line . index Of ( STR_ , name Start ) ;", "if ( name End != - NUM_ ) {", "final String name = line . substring ( name Start + NUM_ , name End ) ;", "font Names [ NUM_ ] = name . to Lower Case ( ) ;", "break ; } } } }", "if ( br != null ) {", "try {", "br . close ( ) ; }", "catch ( final Exception e ) {", "Log Writer . write Log ( STR_ + e + STR_ ) ; } }", "if ( font Data != null ) {", "font Data . close ( ) ; }", "return font Names ; }"]}
{"ids": "67734", "code": ["private void write Units Of Indentation ( int i ) throws IO Exception {", "for ( ; i > NUM_ ; i -- ) {", "writer . write ( INDENTATION UNIT ) ; } }"]}
{"ids": "85200", "code": ["private Pattern Parser ( ) throws Hyphenation Exception {", "token = new String Builder ( ) ;", "parser = create Parser ( ) ;", "parser . set Content Handler ( this ) ;", "parser . set Error Handler ( this ) ;", "hyphen Char = STR_ ; }"]}
{"ids": "43514", "code": ["public static int cap Between ( int min , int number , int max ) {", "assert True ( min <= max ) ;", "return Math . min ( max , Math . max ( min , number ) ) ; }"]}
{"ids": "57804", "code": ["public boolean has Extensions ( ) {", "return extensions != null ; }"]}
{"ids": "35577", "code": ["public void munge ( String entity Id , Collection < Statement > statements , Collection < String > existing Values , Collection < String > existing Refs , Change source Change ) {", "if ( statements . is Empty ( ) ) {", "return ; }", "Munge Operation op = new Munge Operation ( entity Id , statements , existing Values , existing Refs ) ;", "if ( source Change != null ) {", "op . import From Change ( source Change ) ; }", "op . munge ( ) ;", "existing Values . remove All ( op . extra Valid Subjects ) ;", "existing Refs . remove All ( op . extra Valid Subjects ) ;", "return ; }"]}
{"ids": "38455", "code": ["public void show Property Dialog ( ) {", "if ( m Editor . get Value ( ) != null ) {", "if ( m PD == null ) {", "int x = get Location On Screen ( ) . x ;", "int y = get Location On Screen ( ) . y ;", "if ( Property Dialog . get Parent Dialog ( this ) != null ) m PD = new Property Dialog ( Property Dialog . get Parent Dialog ( this ) , m Editor , x , y ) ;", "else m PD = new Property Dialog ( Property Dialog . get Parent Frame ( this ) , m Editor , x , y ) ;", "m PD . set Visible ( true ) ; }", "else {", "m PD . set Visible ( true ) ; }", "m Editor . set Value ( m Editor . get Value ( ) ) ; } }"]}
{"ids": "77021", "code": ["public Lucene 60 Codec ( Mode mode ) {", "super ( STR_ ) ;", "this . stored Fields Format = new Lucene 50 Stored Fields Format ( Objects . require Non Null ( mode ) ) ; }"]}
{"ids": "65446", "code": ["public void delete ( ) throws IO Exception {", "close ( ) ;", "Util . delete Contents ( directory ) ; }"]}
{"ids": "14956", "code": ["public synchronized void remove ( String name ) {", "for ( int i = NUM_ ; i < modifications . size ( ) ; i ++ ) {", "Modification mod = modifications . get ( i ) ;", "Attribute attr = mod . get Attribute ( ) ;", "if ( name . equals Ignore Case ( attr . get Attribute Description As String ( ) ) ) {", "modifications . remove ( i ) ;", "return ; } } }"]}
{"ids": "62777", "code": ["private boolean quiet Sleep ( long ms ) {", "try {", "Thread . sleep ( ms ) ; }", "catch ( Interrupted Exception e ) {", "return true ; }", "return false ; }"]}
{"ids": "50106", "code": ["public void push Frame ( Local Variable Map vars , DML Program Counter pc ) {", "call Stack . push ( new DML Frame ( vars , pc ) ) ; }"]}
{"ids": "40547", "code": ["public boolean is Landing Page ( URL url ) {", "if ( url . get Query ( ) != null ) {", "return false ; }", "else {", "return landing Page Suffix ( url ) != STR_ ; } }"]}
{"ids": "86724", "code": ["public static synchronized void progress ( final String message ) {", "s Last Progress = message ;", "final Print Stream prog = get Progress Stream ( ) ;", "if ( prog != null ) {", "prog . println ( now ( ) + message ) ;", "prog . flush ( ) ;", "if ( prog . check Error ( ) ) {", "s Progress Stream = null ; } } }"]}
{"ids": "10274", "code": ["private static boolean match ( Char Sequence string , Char Sequence pattern , int s Ndx , int p Ndx ) {", "int p Len = pattern . length ( ) ;", "if ( p Len == NUM_ ) {", "if ( pattern . char At ( NUM_ ) == STR_ ) {", "return true ; } }", "int s Len = string . length ( ) ;", "boolean next Is Not Wildcard = false ;", "while ( true ) {", "if ( ( s Ndx >= s Len ) == true ) {", "while ( ( p Ndx < p Len ) && ( pattern . char At ( p Ndx ) == STR_ ) ) {", "p Ndx ++ ; }", "return p Ndx >= p Len ; }", "if ( p Ndx >= p Len ) {", "return false ; }", "char p = pattern . char At ( p Ndx ) ;", "if ( next Is Not Wildcard == false ) {", "if ( p == STR_ ) {", "p Ndx ++ ;", "next Is Not Wildcard = true ;", "continue ; }", "if ( p == STR_ ) {", "s Ndx ++ ;", "p Ndx ++ ;", "continue ; }", "if ( p == STR_ ) {", "char p Next = NUM_ ;", "if ( p Ndx + NUM_ < p Len ) {", "p Next = pattern . char At ( p Ndx + NUM_ ) ; }", "if ( p Next == STR_ ) {", "p Ndx ++ ;", "continue ; }", "int i ;", "p Ndx ++ ;", "for ( i = string . length ( ) ; i >= s Ndx ; i -- ) {", "if ( match ( string , pattern , i , p Ndx ) == true ) {", "return true ; } }", "return false ; } }", "else {", "next Is Not Wildcard = false ; }", "if ( p != string . char At ( s Ndx ) ) {", "return false ; }", "s Ndx ++ ;", "p Ndx ++ ; } }"]}
{"ids": "24413", "code": ["public String next CDATA ( ) throws JSON Exception {", "char c ;", "int i ;", "String Buffer sb = new String Buffer ( ) ;", "for ( ; ; ) {", "c = next ( ) ;", "if ( end ( ) ) {", "throw syntax Error ( STR_ ) ; }", "sb . append ( c ) ;", "i = sb . length ( ) - NUM_ ;", "if ( i >= NUM_ && sb . char At ( i ) == STR_ && sb . char At ( i + NUM_ ) == STR_ && sb . char At ( i + NUM_ ) == STR_ ) {", "sb . set Length ( i ) ;", "return sb . to String ( ) ; } } }"]}
{"ids": "35435", "code": ["public void add Grammar File ( String file Name ) {", "grammar Files . add ( file Name ) ; }"]}
{"ids": "21832", "code": ["private Workflow . Method rollback Delete Mirror Device Method ( URI vplex URI , URI vplex Mirror URI ) {", "return new Workflow . Method ( RB DELETE MIRROR DEVICE METHOD NAME , vplex URI , vplex Mirror URI ) ; }"]}
{"ids": "46048", "code": ["private String find Cipher And Strength ( byte [ ] supported Ciphers , String [ ] tokens ) {", "byte s ;", "for ( int i = NUM_ ; i < strength . length ; i ++ ) {", "if ( ( s = strength [ i ] ) != NUM_ ) {", "for ( int j = NUM_ ; j < supported Ciphers . length ; j ++ ) {", "if ( s == supported Ciphers [ j ] && ( specified Cipher == null || specified Cipher . equals ( tokens [ j ] ) ) ) {", "switch ( s ) {", "case HIGH STRENGTH :", "negotiated Strength = STR_ ;", "break ;", "case MEDIUM STRENGTH :", "negotiated Strength = STR_ ;", "break ;", "case LOW STRENGTH :", "negotiated Strength = STR_ ;", "break ; }", "return tokens [ j ] ; } } } }", "return null ; }"]}
{"ids": "54913", "code": ["public static String [ ] split ( String line , String delim ) {", "List list = new Array List ( ) ;", "String Tokenizer t = new String Tokenizer ( line , delim ) ;", "while ( t . has More Tokens ( ) ) {", "list . add ( t . next Token ( ) ) ; }", "return ( String [ ] ) list . to Array ( new String [ list . size ( ) ] ) ; }"]}
{"ids": "62625", "code": ["public static String slurp File ( File file ) throws IO Exception {", "Reader r = new File Reader ( file ) ;", "return slurp Reader ( r ) ; }"]}
{"ids": "76496", "code": ["@ Not Null public List < Player Nbt > create Singleplayer Player Nbts ( ) {", "Log . i ( STR_ ) ;", "return Arrays . as List ( create Level Dat Player Nbt ( ) ) ; }"]}
{"ids": "77883", "code": ["public Get Form Key Cmd ( String process Definition Id , String task Definition Key ) {", "set Process Definition Id ( process Definition Id ) ;", "if ( task Definition Key == null || task Definition Key . length ( ) < NUM_ ) {", "throw new Activiti Illegal Argument Exception ( STR_ + task Definition Key + STR_ ) ; }", "this . task Definition Key = task Definition Key ; }"]}
{"ids": "65860", "code": ["private void stat Init ( ) {", "l Document No . set Label For ( f Document No ) ;", "f Document No . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f Document No . add Action Listener ( this ) ;", "fcheck Receipt . set Selected ( true ) ;", "fcheck Receipt . set Action Command ( STR_ ) ;", "fcheck Receipt . add Action Listener ( this ) ;", "fcheck Payment . set Selected ( false ) ;", "fcheck Payment . set Action Command ( STR_ ) ;", "fcheck Payment . add Action Listener ( this ) ;", "f Bank Account ID = new V Lookup ( STR_ , false , false , true , M Lookup Factory . get ( Env . get Ctx ( ) , p Window No , NUM_ , M Column . get Column ID ( M Payment . Table Name , M Payment . COLUMNNAME C Bank Account ID ) , Display Type . Table Dir ) ) ;", "l Bank Account ID . set Label For ( f Bank Account ID ) ;", "f Bank Account ID . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f Bank Account ID . add Action Listener ( this ) ;", "f B Partner ID = new V Lookup ( STR_ , false , false , true , M Lookup Factory . get ( Env . get Ctx ( ) , p Window No , NUM_ , M Column . get Column ID ( M Payment . Table Name , M Payment . COLUMNNAME C B Partner ID ) , Display Type . Search ) ) ;", "l B Partner ID . set Label For ( f B Partner ID ) ;", "f B Partner ID . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f B Partner ID . add Action Listener ( this ) ;", "l Date From . set Label For ( f Date From ) ;", "f Date From . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f Date From . set Tool Tip Text ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ;", "f Date From . add Action Listener ( this ) ;", "l Date To . set Label For ( f Date To ) ;", "f Date To . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f Date To . set Tool Tip Text ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ;", "f Date To . add Action Listener ( this ) ;", "l Amt From . set Label For ( f Amt From ) ;", "f Amt From . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f Amt From . set Tool Tip Text ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ;", "f Amt From . set Border ( f Date From . get Border ( ) ) ;", "f Amt From . add Action Listener ( this ) ;", "l Amt To . set Label For ( f Amt To ) ;", "f Amt To . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f Amt To . set Tool Tip Text ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ;", "f Amt To . set Border ( f Date From . get Border ( ) ) ;", "f Amt To . add Action Listener ( this ) ;", "C Panel amt Panel = new C Panel ( ) ;", "C Panel date Panel = new C Panel ( ) ;", "amt Panel . set Layout ( new A Layout ( NUM_ , NUM_ , true ) ) ;", "amt Panel . add ( f Amt From , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "amt Panel . add ( l Amt To , null ) ;", "amt Panel . add ( f Amt To , null ) ;", "date Panel . set Layout ( new A Layout ( NUM_ , NUM_ , true ) ) ;", "date Panel . add ( f Date From , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "date Panel . add ( l Date To , null ) ;", "date Panel . add ( f Date To , null ) ;", "p criteria Grid . add ( l Document No , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "p criteria Grid . add ( f Document No , null ) ;", "p criteria Grid . add ( l B Partner ID , null ) ;", "p criteria Grid . add ( f B Partner ID , null ) ;", "p criteria Grid . add ( fcheck Receipt , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "p criteria Grid . add ( l Bank Account ID , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "p criteria Grid . add ( f Bank Account ID ) ;", "p criteria Grid . add ( l Date From , null ) ;", "p criteria Grid . add ( date Panel , null ) ;", "p criteria Grid . add ( fcheck Payment , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "p criteria Grid . add ( l Amt From , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "p criteria Grid . add ( amt Panel , null ) ; }"]}
{"ids": "38426", "code": ["@ Override public Graphics create ( ) {", "if ( DEBUG ) {", "m printstream . println ( STR_ ) ; }", "Postscript Graphics psg = new Postscript Graphics ( this ) ;", "return ( psg ) ; }"]}
{"ids": "31129", "code": ["private void parse Actions ( ) {", "String Tokenizer st = new String Tokenizer ( actions , STR_ , true ) ;", "boolean comma = false ;", "while ( st . has More Tokens ( ) ) {", "String act = st . next Token ( ) ;", "if ( act . equals ( STR_ ) ) {", "continue ; }", "else if ( comma ) {", "if ( ! act . equals ( STR_ ) ) {", "comma = false ;", "break ; } }", "else if ( act . equals Ignore Case ( STR_ ) ) {", "mask |= CONNECT ; }", "else if ( act . equals Ignore Case ( STR_ ) ) {", "mask |= ACCEPT ; }", "else if ( act . equals Ignore Case ( STR_ ) ) {", "mask |= DELEGATE ; }", "else if ( act . equals Ignore Case ( STR_ ) ) {", "mask |= LISTEN ; }", "else {", "break ; }", "comma = ! comma ; }", "if ( ! comma ) {", "throw new Illegal Argument Exception ( STR_ ) ; } }"]}
{"ids": "60607", "code": ["byte [ ] to Bytes ( SSL Session session ) {", "if ( ! ( session instanceof Open SSL Session Impl ) ) {", "return null ; }", "Open SSL Session Impl ssl Session = ( Open SSL Session Impl ) session ;", "try {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "Data Output Stream daos = new Data Output Stream ( baos ) ;", "daos . write Int ( OPEN SSL ) ;", "byte [ ] data = ssl Session . get Encoded ( ) ;", "daos . write Int ( data . length ) ;", "daos . write ( data ) ;", "Certificate [ ] certs = session . get Peer Certificates ( ) ;", "daos . write Int ( certs . length ) ;", "for ( Certificate cert : certs ) {", "data = cert . get Encoded ( ) ;", "daos . write Int ( data . length ) ;", "daos . write ( data ) ; }", "return baos . to Byte Array ( ) ; }", "catch ( IO Exception e ) {", "log ( e ) ;", "return null ; }", "catch ( Certificate Encoding Exception e ) {", "log ( e ) ;", "return null ; } }"]}
{"ids": "66615", "code": ["private static void decode Text Compaction ( int [ ] text Compaction Data , int [ ] byte Compaction Data , int length , String Builder result ) {", "Mode sub Mode = Mode . ALPHA ;", "Mode prior To Shift Mode = Mode . ALPHA ;", "int i = NUM_ ;", "while ( i < length ) {", "int sub Mode Ch = text Compaction Data [ i ] ;", "char ch = NUM_ ;", "switch ( sub Mode ) {", "case ALPHA :", "if ( sub Mode Ch < NUM_ ) {", "ch = ( char ) ( STR_ + sub Mode Ch ) ; }", "else {", "if ( sub Mode Ch == NUM_ ) {", "ch = STR_ ; }", "else if ( sub Mode Ch == LL ) {", "sub Mode = Mode . LOWER ; }", "else if ( sub Mode Ch == ML ) {", "sub Mode = Mode . MIXED ; }", "else if ( sub Mode Ch == PS ) {", "prior To Shift Mode = sub Mode ;", "sub Mode = Mode . PUNCT SHIFT ; }", "else if ( sub Mode Ch == MODE SHIFT TO BYTE COMPACTION MODE ) {", "result . append ( ( char ) byte Compaction Data [ i ] ) ; }", "else if ( sub Mode Ch == TEXT COMPACTION MODE LATCH ) {", "sub Mode = Mode . ALPHA ; } }", "break ;", "case LOWER :", "if ( sub Mode Ch < NUM_ ) {", "ch = ( char ) ( STR_ + sub Mode Ch ) ; }", "else {", "if ( sub Mode Ch == NUM_ ) {", "ch = STR_ ; }", "else if ( sub Mode Ch == AS ) {", "prior To Shift Mode = sub Mode ;", "sub Mode = Mode . ALPHA SHIFT ; }", "else if ( sub Mode Ch == ML ) {", "sub Mode = Mode . MIXED ; }", "else if ( sub Mode Ch == PS ) {", "prior To Shift Mode = sub Mode ;", "sub Mode = Mode . PUNCT SHIFT ; }", "else if ( sub Mode Ch == MODE SHIFT TO BYTE COMPACTION MODE ) {", "result . append ( ( char ) byte Compaction Data [ i ] ) ; }", "else if ( sub Mode Ch == TEXT COMPACTION MODE LATCH ) {", "sub Mode = Mode . ALPHA ; } }", "break ;", "case MIXED :", "if ( sub Mode Ch < PL ) {", "ch = MIXED CHARS [ sub Mode Ch ] ; }", "else {", "if ( sub Mode Ch == PL ) {", "sub Mode = Mode . PUNCT ; }", "else if ( sub Mode Ch == NUM_ ) {", "ch = STR_ ; }", "else if ( sub Mode Ch == LL ) {", "sub Mode = Mode . LOWER ; }", "else if ( sub Mode Ch == AL ) {", "sub Mode = Mode . ALPHA ; }", "else if ( sub Mode Ch == PS ) {", "prior To Shift Mode = sub Mode ;", "sub Mode = Mode . PUNCT SHIFT ; }", "else if ( sub Mode Ch == MODE SHIFT TO BYTE COMPACTION MODE ) {", "result . append ( ( char ) byte Compaction Data [ i ] ) ; }", "else if ( sub Mode Ch == TEXT COMPACTION MODE LATCH ) {", "sub Mode = Mode . ALPHA ; } }", "break ;", "case PUNCT :", "if ( sub Mode Ch < PAL ) {", "ch = PUNCT CHARS [ sub Mode Ch ] ; }", "else {", "if ( sub Mode Ch == PAL ) {", "sub Mode = Mode . ALPHA ; }", "else if ( sub Mode Ch == MODE SHIFT TO BYTE COMPACTION MODE ) {", "result . append ( ( char ) byte Compaction Data [ i ] ) ; }", "else if ( sub Mode Ch == TEXT COMPACTION MODE LATCH ) {", "sub Mode = Mode . ALPHA ; } }", "break ;", "case ALPHA SHIFT :", "sub Mode = prior To Shift Mode ;", "if ( sub Mode Ch < NUM_ ) {", "ch = ( char ) ( STR_ + sub Mode Ch ) ; }", "else {", "if ( sub Mode Ch == NUM_ ) {", "ch = STR_ ; }", "else if ( sub Mode Ch == TEXT COMPACTION MODE LATCH ) {", "sub Mode = Mode . ALPHA ; } }", "break ;", "case PUNCT SHIFT :", "sub Mode = prior To Shift Mode ;", "if ( sub Mode Ch < PAL ) {", "ch = PUNCT CHARS [ sub Mode Ch ] ; }", "else {", "if ( sub Mode Ch == PAL ) {", "sub Mode = Mode . ALPHA ; }", "else if ( sub Mode Ch == MODE SHIFT TO BYTE COMPACTION MODE ) {", "result . append ( ( char ) byte Compaction Data [ i ] ) ; }", "else if ( sub Mode Ch == TEXT COMPACTION MODE LATCH ) {", "sub Mode = Mode . ALPHA ; } }", "break ; }", "if ( ch != NUM_ ) {", "result . append ( ch ) ; }", "i ++ ; } }"]}
{"ids": "81331", "code": ["public static boolean is Valid Name ( String name ) {", "if ( name == null ) {", "return false ; }", "return name . length ( ) > NUM_ ; }"]}
{"ids": "54481", "code": ["protected void add Counters ( Basic Counters < Mutable Long > target , Basic Counters < Mutable Long > source ) {", "for ( Enum < Reader Counter Keys > key : Reader Counter Keys . values ( ) ) {", "Mutable Long tcounter = target . get Counter ( key ) ;", "if ( tcounter == null ) {", "tcounter = new Mutable Long ( ) ;", "target . set Counter ( key , tcounter ) ; }", "Mutable Long scounter = source . get Counter ( key ) ;", "if ( scounter != null ) {", "tcounter . add ( scounter . long Value ( ) ) ; } } }"]}
{"ids": "82898", "code": ["private void add Card ( Shared Preferences shared Preferences , String key ) {", "String json = shared Preferences . get String ( key , null ) ;", "if ( json != null ) {", "try {", "JSON Object json Data = new JSON Object ( json ) ;", "if ( json Data . has ( IMAGE KEY ) ) {", "String image = json Data . get String ( IMAGE KEY ) ;", "List < I Topic > cards = get Source Topic Model ( ) ;", "switch ( key ) {", "case POOL KEY :", "cards . add ( NUM_ , Cards . pool ( image , get Activity ( ) ) ) ;", "remove Duplicates ( POOL KEY , cards ) ;", "break ;", "case VIDEO KEY :", "switch ( json Data . get String ( ID KEY ) ) {", "case POOL CAMERA ID :", "m Great Shot Url = json Data . get String ( URL KEY ) ;", "m Elv . set On Group Click Listener ( great Shot Listener ) ;", "cards . add ( NUM_ , Cards . pool Video ( m Great Shot Url , get Activity ( ) ) ) ;", "remove Duplicates ( VIDEO KEY , cards ) ;", "break ; }", "break ;", "case FOOD KEY :", "cards . add ( NUM_ , Cards . food ( image , get Activity ( ) ) ) ;", "remove Duplicates ( FOOD KEY , cards ) ;", "break ;", "case PRINTER 3 D KEY :", "cards . add ( NUM_ , Cards . printer 3 d ( image , get Activity ( ) ) ) ;", "remove Duplicates ( PRINTER 3 D KEY , cards ) ;", "break ; } }", "else if ( json Data . has ( MESSAGE KEY ) ) {", "String message = json Data . get String ( MESSAGE KEY ) ;", "List < I Topic > cards = get Source Topic Model ( ) ;", "cards . add ( NUM_ , Cards . test ( message , get Activity ( ) ) ) ; }", "UI . execute ( null ) ; }", "catch ( JSON Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "42800", "code": ["public static List < Logged Mqtt Message > parse Message Log ( final List < String > messages , final Progress Updater progress , final long current , final long max ) throws Spy Exception {", "try {", "final long start Time = Time Utils . get Monotonic Time ( ) ;", "final int items = messages . size ( ) ;", "final long chunk Size = items / NUM_ ;", "final Mqtt Message Log Parser parser = new Mqtt Message Log Parser ( ) ;", "final List < Logged Mqtt Message > list = new Array List < Logged Mqtt Message > ( ) ;", "long item = NUM_ ;", "long report At = NUM_ ;", "for ( int i = NUM_ ; i < items ; i ++ ) {", "final String message = messages . get ( i ) ;", "if ( progress != null ) {", "if ( progress . is Cancelled ( ) ) {", "logger . info ( STR_ ) ;", "return null ; }", "item ++ ;", "if ( item % NUM_ == NUM_ ) {", "progress . update ( current + item , max ) ; } }", "if ( ( i > NUM_ ) && ( i == ( chunk Size * report At ) ) ) {", "final long current Time = Time Utils . get Monotonic Time ( ) ;", "final long time Taken = current Time - start Time ;", "final long total Time Expected = time Taken * items / i ;", "if ( time Taken > NUM_ ) {", "logger . info ( STR_ , report At * NUM_ , ( total Time Expected - time Taken ) / NUM_ ) ; }", "report At ++ ; }", "try {", "list . add ( parser . parse ( message ) ) ; }", "catch ( XML Exception e ) {", "logger . error ( STR_ + message , e ) ; } }", "logger . info ( STR_ , list . size ( ) ) ;", "return list ; }", "catch ( XML Exception e ) {", "throw new Spy Exception ( STR_ , e ) ; } }"]}
{"ids": "52861", "code": ["private void recompute Seperation ( double [ ] [ ] means , double [ ] sep ) {", "final int k = means . length ;", "assert ( sep . length == k ) ;", "boolean issquared = ( distance Function instanceof Squared Euclidean Distance Function ) ;", "Arrays . fill ( sep , Double . POSITIVE INFINITY ) ;", "for ( int i = NUM_ ; i < k ; i ++ ) {", "Double Vector m 1 = Double Vector . wrap ( means [ i ] ) ;", "for ( int j = NUM_ ; j < i ; j ++ ) {", "double d = distance Function . distance ( m 1 , Double Vector . wrap ( means [ j ] ) ) ;", "sep [ i ] = ( d < sep [ i ] ) ? d : sep [ i ] ;", "sep [ j ] = ( d < sep [ j ] ) ? d : sep [ j ] ; } }", "for ( int i = NUM_ ; i < k ; i ++ ) {", "sep [ i ] = issquared ? Math . sqrt ( sep [ i ] ) : sep [ i ] ;", "sep [ i ] *= NUM_ ; } }"]}
{"ids": "12650", "code": ["private int transition ( int state , int symbol ) {", "for ( int i = state ; i < transitions . length ; i ++ ) {", "if ( ( transitions [ i ] % vocabulary Size ) == symbol ) {", "return ( transitions [ i ] / vocabulary Size ) ; } }", "return - NUM_ ; }"]}
{"ids": "85386", "code": ["public synchronized Ceylon Config merge ( Ceylon Config other ) {", "for ( String key : other . get Option Names ( null ) ) {", "String [ ] values = other . get Option Values ( key ) ;", "set Option Values ( key , values ) ; }", "return this ; }"]}
{"ids": "47494", "code": ["private long month Range ( ) {", "Value Range start Range = chrono . range ( MONTH OF YEAR ) ;", "if ( start Range . is Fixed ( ) && start Range . is Int Value ( ) ) {", "return start Range . get Maximum ( ) - start Range . get Minimum ( ) + NUM_ ; }", "return - NUM_ ; }"]}
{"ids": "54737", "code": ["public void animate ( Marker With Position marker , Lat Lng from , Lat Lng to ) {", "lock . lock ( ) ;", "m Animation Tasks . add ( new Animation Task ( marker , from , to ) ) ;", "lock . unlock ( ) ; }"]}
{"ids": "12865", "code": ["@ Override public int compare To ( Component Description o ) {", "int my Pos = NUM_ ;", "int o Pos = NUM_ ;", "if ( this instanceof Language Component Description ) {", "my Pos = NUM_ ; }", "else if ( this instanceof Voice Component Description ) {", "my Pos = NUM_ ; }", "if ( o instanceof Language Component Description ) {", "o Pos = NUM_ ; }", "else if ( o instanceof Voice Component Description ) {", "o Pos = NUM_ ; }", "if ( o Pos - my Pos != NUM_ ) {", "return ( o Pos - my Pos ) ; }", "return name . compare To ( o . name ) ; }"]}
{"ids": "71361", "code": ["public static byte [ ] escape Eastern Unicode Byte Stream ( byte [ ] orig Bytes , String orig String ) {", "if ( orig Bytes == null ) {", "return null ; }", "if ( orig Bytes . length == NUM_ ) {", "return new byte [ NUM_ ] ; }", "int bytes Len = orig Bytes . length ;", "int buf Index = NUM_ ;", "int str Index = NUM_ ;", "Byte Array Output Stream bytes Out = new Byte Array Output Stream ( bytes Len ) ;", "while ( true ) {", "if ( orig String . char At ( str Index ) == STR_ ) {", "bytes Out . write ( orig Bytes [ buf Index ++ ] ) ; }", "else {", "int lo Byte = orig Bytes [ buf Index ] ;", "if ( lo Byte < NUM_ ) {", "lo Byte += NUM_ ; }", "bytes Out . write ( lo Byte ) ;", "if ( lo Byte >= NUM_ ) {", "if ( buf Index < ( bytes Len - NUM_ ) ) {", "int hi Byte = orig Bytes [ buf Index + NUM_ ] ;", "if ( hi Byte < NUM_ ) {", "hi Byte += NUM_ ; }", "bytes Out . write ( hi Byte ) ;", "buf Index ++ ;", "if ( hi Byte == NUM_ ) {", "bytes Out . write ( hi Byte ) ; } } }", "else if ( lo Byte == NUM_ ) {", "if ( buf Index < ( bytes Len - NUM_ ) ) {", "int hi Byte = orig Bytes [ buf Index + NUM_ ] ;", "if ( hi Byte < NUM_ ) {", "hi Byte += NUM_ ; }", "if ( hi Byte == NUM_ ) {", "bytes Out . write ( NUM_ ) ;", "bytes Out . write ( NUM_ ) ;", "buf Index ++ ; } } }", "buf Index ++ ; }", "if ( buf Index >= bytes Len ) {", "break ; }", "str Index ++ ; }", "return bytes Out . to Byte Array ( ) ; }"]}
{"ids": "16462", "code": ["private static String Builder dump ( String Builder lbuffer , long value ) {", "for ( int j = NUM_ ; j < NUM_ ; j ++ ) {", "lbuffer . append ( CHARS [ ( int ) ( value > > SHIFTS [ j ] ) & NUM_ ] ) ; }", "return lbuffer ; }"]}
{"ids": "70876", "code": ["@ Override protected void on Measure ( int width Measure Spec , int height Measure Spec ) {", "super . on Measure ( width Measure Spec , height Measure Spec ) ;", "int size Width = Measure Spec . get Size ( width Measure Spec ) - get Padding Left ( ) - get Padding Right ( ) ;", "int size Height = Measure Spec . get Size ( height Measure Spec ) ;", "int mode Width = Measure Spec . get Mode ( width Measure Spec ) ;", "int mode Height = Measure Spec . get Mode ( height Measure Spec ) ;", "int width = NUM_ ;", "int height = get Padding Top ( ) + get Padding Bottom ( ) ;", "int line Width = NUM_ ;", "int line Height = NUM_ ;", "int child Count = get Child Count ( ) ;", "for ( int i = NUM_ ; i < child Count ; i ++ ) {", "View child = get Child At ( i ) ;", "boolean last Child = i == child Count - NUM_ ;", "if ( child . get Visibility ( ) == View . GONE ) {", "if ( last Child ) {", "width = Math . max ( width , line Width ) ;", "height += line Height ; }", "continue ; }", "measure Child With Margins ( child , width Measure Spec , line Width , height Measure Spec , height ) ;", "Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "int child Width Mode = Measure Spec . AT MOST ;", "int child Width Size = size Width ;", "int child Height Mode = Measure Spec . AT MOST ;", "int child Height Size = size Height ;", "if ( lp . width == Layout Params . MATCH PARENT ) {", "child Width Mode = Measure Spec . EXACTLY ;", "child Width Size -= lp . left Margin + lp . right Margin ; }", "else if ( lp . width >= NUM_ ) {", "child Width Mode = Measure Spec . EXACTLY ;", "child Width Size = lp . width ; }", "if ( lp . height >= NUM_ ) {", "child Height Mode = Measure Spec . EXACTLY ;", "child Height Size = lp . height ; }", "else if ( mode Height == Measure Spec . UNSPECIFIED ) {", "child Height Mode = Measure Spec . UNSPECIFIED ;", "child Height Size = NUM_ ; }", "child . measure ( Measure Spec . make Measure Spec ( child Width Size , child Width Mode ) , Measure Spec . make Measure Spec ( child Height Size , child Height Mode ) ) ;", "int child Width = child . get Measured Width ( ) + lp . left Margin + lp . right Margin ;", "if ( line Width + child Width > size Width ) {", "width = Math . max ( width , line Width ) ;", "line Width = child Width ;", "height += line Height ;", "line Height = child . get Measured Height ( ) + lp . top Margin + lp . bottom Margin ; }", "else {", "line Width += child Width ;", "line Height = Math . max ( line Height , child . get Measured Height ( ) + lp . top Margin + lp . bottom Margin ) ; }", "if ( last Child ) {", "width = Math . max ( width , line Width ) ;", "height += line Height ; } }", "width += get Padding Left ( ) + get Padding Right ( ) ;", "set Measured Dimension ( ( mode Width == Measure Spec . EXACTLY ) ? size Width : width , ( mode Height == Measure Spec . EXACTLY ) ? size Height : height ) ; }"]}
{"ids": "35315", "code": ["public Union Member Description With Error ( IE Object Description delegate , Composed Type Ref composed Type Ref , I Scope [ ] sub Scopes , boolean write Access ) {", "super ( delegate ) ;", "this . composed Type Ref = composed Type Ref ;", "this . sub Scopes = sub Scopes ;", "max = sub Scopes . length ;", "this . write Access = write Access ; }"]}
{"ids": "16120", "code": ["private void read Object ( Object Input Stream oos ) throws IO Exception , Class Not Found Exception {", "i Instant = ( Date Midnight ) oos . read Object ( ) ;", "Date Time Field Type type = ( Date Time Field Type ) oos . read Object ( ) ;", "i Field = type . get Field ( i Instant . get Chronology ( ) ) ; }"]}
{"ids": "78363", "code": ["public void generate Loot Chest ( World world , Random random , Block Pos pos , int min , int max , I Block State state , Resource Location loot Table ) {", "world . set Block State ( pos , state , NUM_ ) ;", "Tile Entity Chest chest = ( Tile Entity Chest ) world . get Tile Entity ( pos ) ;", "if ( chest != null ) chest . set Loot Table ( loot Table , random . next Long ( ) ) ; }"]}
{"ids": "70381", "code": ["private void draw Auto Hit ( Graphics g , Coords hex ) {", "int base X = ( hex . get X ( ) * ( hex Side [ zoom ] + hex Side By Sin 30 [ zoom ] ) ) + left Margin + hex Side [ zoom ] ;", "int base Y = ( ( ( NUM_ * hex . get Y ( ) ) + NUM_ + ( hex . get X ( ) % NUM_ ) ) * hex Side By Cos 30 [ zoom ] ) + top Margin ;", "Color alt = g . get Color ( ) ;", "g . set Color ( Color . RED ) ;", "g . draw Oval ( base X - ( unit Size - NUM_ ) , base Y - ( unit Size - NUM_ ) , ( NUM_ * unit Size ) - NUM_ , ( NUM_ * unit Size ) - NUM_ ) ;", "g . draw Line ( base X - unit Size - NUM_ , base Y , ( base X - unit Size ) + NUM_ , base Y ) ;", "g . draw Line ( base X + unit Size + NUM_ , base Y , ( base X + unit Size ) - NUM_ , base Y ) ;", "g . draw Line ( base X , base Y - unit Size - NUM_ , base X , ( base Y - unit Size ) + NUM_ ) ;", "g . draw Line ( base X , base Y + unit Size + NUM_ , base X , ( base Y + unit Size ) - NUM_ ) ;", "g . set Color ( alt ) ; }"]}
{"ids": "26535", "code": ["public void remove ( ) throws Recurrence Rule Exception {", "try {", "rule . remove ( ) ; }", "catch ( Generic Entity Exception e ) {", "throw new Recurrence Rule Exception ( e . get Message ( ) , e ) ; } }"]}
{"ids": "51888", "code": ["private boolean should Be Escaped ( char c ) {", "return c < STR_ || ( c >= STR_ && c < STR_ ) || ( c >= STR_ && c < STR_ ) ; }"]}
{"ids": "37235", "code": ["public C Event Table Menu ( final J Table table , final List < I Trace Event > traces ) {", "add Open Function ( Swing Utilities . get Window Ancestor ( table ) , traces ) ;", "add ( new J Menu Item ( C Action Proxy . proxy ( new C Search Table Action ( Swing Utilities . get Window Ancestor ( table ) , table ) ) ) ) ;", "add ( new Copy Selection Action ( table ) ) ; }"]}
{"ids": "84254", "code": ["@ Override public int available ( ) throws IO Exception {", "return ( out Bytes . length + input Stream . available ( ) ) ; }"]}
{"ids": "85767", "code": ["public boolean check Error ( ) {", "return pw . check Error ( ) ; }"]}
{"ids": "28986", "code": ["public void add Bug Pattern ( Bug Pattern bug Pattern ) {", "bug Patterns . add ( bug Pattern ) ; }"]}
{"ids": "79758", "code": ["public Spider Git Parser ( Spider Param params ) {", "super ( ) ;", "this . params = params ; }"]}
{"ids": "75974", "code": ["public void on Retry ( int retry No ) {", "Log . d ( LOG TAG , String . format ( STR_ , retry No ) ) ; }"]}
{"ids": "33324", "code": ["protected void analyze Dto Setter Method ( Method method , Method Model method Model ) {", "method Model . set Setter ( true ) ;", "Type field Type = method . get Generic Parameter Types ( ) [ NUM_ ] ;", "String field Name = get Setter Field Name ( method ) ;", "field Attributes . put ( field Name , field Type ) ;", "method Model . set Field Name ( field Name ) ;", "method Model . set Field Type ( convert Type ( field Type ) ) ; }"]}
{"ids": "16926", "code": ["public static String load Last Color ( Context context ) {", "try {", "Shared Preferences shared Preferences = context . get Shared Preferences ( STR_ , Context . MODE PRIVATE ) ;", "String s = shared Preferences . get String ( SP KEY LAST COLOR , null ) ;", "Color . parse Color ( s ) ;", "return s ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "return null ; } }"]}
{"ids": "46694", "code": ["public Bevel Border ( int bevel Type , Color highlight , Color shadow ) {", "this ( bevel Type , highlight . brighter ( ) , highlight , shadow , shadow . brighter ( ) ) ; }"]}
{"ids": "54707", "code": ["protected final void refresh Session Layer ( final Location location ) {", "if ( ! m Refresh Session Pending && is Visible ( ) ) {", "Log . d ( TAG , STR_ ) ;", "m Refresh Session Pending = true ;", "trigger Session Objects Update ( null ) ;", "session Objects Refresh Time = System . current Time Millis ( ) ;", "session Objects Refreshed At = location ; }", "else if ( ! is Visible ( ) ) {", "Log . v ( TAG , STR_ ) ; }", "else {", "Log . v ( TAG , STR_ ) ; } }"]}
{"ids": "34428", "code": ["public static int m Date Gap ( String day Name ) {", "Log . d ( STR_ , day Name ) ;", "if ( day Name . equals ( STR_ ) ) {", "return NUM_ ; }", "else if ( day Name . equals ( STR_ ) ) {", "return NUM_ ; }", "else if ( day Name . equals ( STR_ ) ) {", "return NUM_ ; }", "else if ( day Name . equals ( STR_ ) ) {", "return NUM_ ; }", "else if ( day Name . equals ( STR_ ) ) {", "return NUM_ ; }", "else if ( day Name . equals ( STR_ ) ) {", "return NUM_ ; }", "else {", "return NUM_ ; } }"]}
{"ids": "79261", "code": ["public static String remove Additional Party ( Http Servlet Request request , Http Servlet Response response ) {", "Shopping Cart cart = get Cart Object ( request ) ;", "String party Id = request . get Parameter ( STR_ ) ;", "String role Type Id [ ] = request . get Parameter Values ( STR_ ) ;", "List < String > event List = new Linked List < String > ( ) ;", "Locale locale = Util Http . get Locale ( request ) ;", "int i ;", "if ( Util Validate . is Empty ( party Id ) || role Type Id . length < NUM_ ) {", "request . set Attribute ( STR_ , Util Properties . get Message ( resource error , STR_ , locale ) ) ;", "return STR_ ; }", "if ( request . get Attribute ( STR_ ) != null ) {", "List < String > msg = Util Generics . check List ( request . get Attribute ( STR_ ) ) ;", "event List . add All ( msg ) ; }", "for ( i = NUM_ ; i < role Type Id . length ; i ++ ) {", "try {", "cart . remove Additional Party Role ( party Id , role Type Id [ i ] ) ; }", "catch ( Exception e ) {", "Debug . log Info ( e . get Localized Message ( ) , module ) ;", "event List . add ( e . get Localized Message ( ) ) ; } }", "request . remove Attribute ( STR_ ) ;", "request . set Attribute ( STR_ , event List ) ;", "return STR_ ; }"]}
{"ids": "25024", "code": ["public Map < String , String [ ] > crop ( final Map < String , String [ ] > original ) {", "Map < String , String [ ] > result = new Hash Map < String , String [ ] > ( original . size ( ) ) ;", "for ( Map . Entry < String , String [ ] > entry : original . entry Set ( ) ) {", "String key = entry . get Key ( ) ;", "if ( null == key ) {", "continue ; }", "String [ ] value = entry . get Value ( ) ;", "String [ ] converted Value ;", "if ( null == value ) {", "converted Value = new String [ NUM_ ] ;", "converted Value [ NUM_ ] = STR_ ; }", "else {", "boolean cropping Was Needed = false ;", "converted Value = value ;", "for ( int i = NUM_ , l = value . length ; i < l ; i ++ ) {", "String cur Value = value [ i ] ;", "String cropping Result = crop ( cur Value ) ;", "if ( ( cur Value != cropping Result ) & ! cropping Was Needed ) {", "cropping Was Needed = true ;", "converted Value = new String [ value . length ] ;", "System . arraycopy ( value , NUM_ , converted Value , NUM_ , i ) ;", "converted Value [ i ] = cropping Result ; }", "if ( cropping Was Needed ) {", "converted Value [ i ] = cropping Result ; } } }", "result . put ( key , converted Value ) ; }", "return result ; }"]}
{"ids": "6043", "code": ["@ Override int look For Selectable Position ( int position , boolean look Down ) {", "final List Adapter adapter = m Adapter ;", "if ( adapter == null || is In Touch Mode ( ) ) {", "return INVALID POSITION ; }", "final int count = adapter . get Count ( ) ;", "if ( ! m Are All Items Selectable ) {", "if ( look Down ) {", "position = Math . max ( NUM_ , position ) ;", "while ( position < count && ! adapter . is Enabled ( position ) ) {", "position ++ ; } }", "else {", "position = Math . min ( position , count - NUM_ ) ;", "while ( position >= NUM_ && ! adapter . is Enabled ( position ) ) {", "position -- ; } }", "if ( position < NUM_ || position >= count ) {", "return INVALID POSITION ; }", "return position ; }", "else {", "if ( position < NUM_ || position >= count ) {", "return INVALID POSITION ; }", "return position ; } }"]}
{"ids": "21579", "code": ["@ Override public void delete BCV Helper Volume ( Storage System storage System , Volume volume ) throws Exception {", "log . info ( String . format ( STR_ , storage System . get Id ( ) , volume . get Id ( ) ) ) ;", "try {", "String device Name = volume . get Native Id ( ) ;", "String device Name Without Leading Zeros = device Name . replace All ( STR_ , STR_ ) ;", "String query = String . format ( STR_ , Smis Constants . CP ELEMENT NAME , Smis Constants . CP DEVICE ID , Smis Constants . CP ELEMENT NAME , device Name Without Leading Zeros ) ;", "String query Language = STR_ ;", "List < CIM Instance > bcv Volume Instance List = helper . execute Query ( storage System , query , query Language ) ;", "if ( bcv Volume Instance List == null || bcv Volume Instance List . is Empty ( ) ) {", "query = String . format ( STR_ , Smis Constants . CP ELEMENT NAME , Smis Constants . CP DEVICE ID , Smis Constants . CP ELEMENT NAME , device Name ) ;", "bcv Volume Instance List = helper . execute Query ( storage System , query , query Language ) ; }", "String element Name = null ;", "String native Id = null ;", "CIM Instance bcv Volume Instance = null ;", "if ( bcv Volume Instance List != null && ! bcv Volume Instance List . is Empty ( ) ) {", "bcv Volume Instance = bcv Volume Instance List . get ( NUM_ ) ;", "element Name = CIM Property Factory . get Property Value ( bcv Volume Instance , Smis Constants . CP ELEMENT NAME ) ;", "native Id = CIM Property Factory . get Property Value ( bcv Volume Instance , Smis Constants . CP DEVICE ID ) ;", "log . info ( String . format ( STR_ , element Name , native Id ) ) ; }", "else {", "log . warn ( String . format ( STR_ , volume . get Id ( ) , volume . get Native Id ( ) ) ) ;", "return ; }", "log . info ( String . format ( STR_ + native Id ) ) ;", "String [ ] native Ids = new String [ ] { native Id } ;", "CIM Object Path config Svc Path = cim Path . get Config Svc Path ( storage System ) ;", "CIM Argument [ ] in Args = helper . get Delete Volumes Input Arguments ( storage System , native Ids ) ;", "CIM Argument [ ] out Args = new CIM Argument [ NUM_ ] ;", "String return Elements Method ;", "if ( storage System . get Using Smis 80 ( ) ) {", "return Elements Method = Smis Constants . RETURN ELEMENTS TO STORAGE POOL ; }", "else {", "return Elements Method = Smis Constants . EMC RETURN TO STORAGE POOL ; }", "helper . invoke Method Synchronously ( storage System , config Svc Path , return Elements Method , in Args , out Args , null ) ;", "log . info ( String . format ( STR_ + native Id ) ) ; }", "catch ( Exception ex ) {", "log . error ( String . format ( STR_ , storage System . get Id ( ) , volume . get Id ( ) ) ) ; } }"]}
{"ids": "50832", "code": ["public void populate Bottom Tab Items ( @ Non Null Bottom Tabs Builder builder ) {", "if ( m Container . get Child Count ( ) >= MIN BOTTOM NAVIGATION ITEMS ) {", "check Bottom Item Guidelines ( m Container . get Child Count ( ) ) ; }", "List < Bottom Navigation Item > build = builder . build ( ) ;", "for ( int i = NUM_ ; i < build . size ( ) ; i ++ ) {", "Bottom Navigation Item item = build . get ( i ) ;", "item . set Position ( i ) ;", "add Bottom Navigation Item ( item ) ; }", "update Bottom Nav Views ( ) ;", "select Tab View ( ) ; }"]}
{"ids": "82423", "code": ["public final int skip Bytes ( int count ) throws java . io . IO Exception {", "int skipped = NUM_ ;", "long skip ;", "while ( skipped < count && ( skip = in . skip ( count - skipped ) ) != NUM_ ) {", "skipped += skip ; }", "return skipped ; }"]}
{"ids": "34944", "code": ["private final void insert ( Object text ) {", "buf . insert ( buf . length ( ) - NUM_ , STR_ ) ;", "buf . insert ( buf . length ( ) - NUM_ , text ) ; }"]}
{"ids": "78536", "code": ["public static void split Textures ( File destination , File texture Pack , double scale , boolean alphas , Progress Callback progress ) throws Exception {", "if ( destination == null ) throw new Illegal Argument Exception ( STR_ ) ;", "Log . info ( STR_ + destination + STR_ ) ;", "if ( ! destination . exists ( ) || ! destination . is Directory ( ) ) {", "if ( destination . exists ( ) ) throw new Runtime Exception ( STR_ ) ;", "if ( ! destination . mkdir ( ) ) throw new Runtime Exception ( STR_ ) ; }", "get Textures ( texture Pack , scale , progress , alphas , false , destination ) ; }"]}
{"ids": "30475", "code": ["protected synchronized String next Cnx Key ( ) {", "if ( connections Counter == Integer . MAX VALUE ) connections Counter = NUM_ ;", "connections Counter ++ ;", "int rand Long = random . next Int ( Integer . MAX VALUE ) ;", "return connections Counter + ( rand Long + STR_ + ID SUFFIX ) ; }"]}
{"ids": "16892", "code": ["public static boolean copy File Safe ( final Path src File , final Path dest File ) throws IO Exception {", "return copy File Safe ( src File , dest File , false ) ; }"]}
{"ids": "25684", "code": ["public static boolean is Header ( Header header ) {", "String xten = header . get String Value ( XTENSION ) ;", "if ( xten == null ) {", "return false ; }", "xten = xten . trim ( ) ;", "return xten . equals ( XTENSION BINTABLE ) || xten . equals ( STR_ ) ; }"]}
{"ids": "48724", "code": ["final void put Float ( int offset , float value ) {", "unsafe . put Float ( offset + address , value ) ; }"]}
{"ids": "54987", "code": ["public void doctype Decl ( String root Element , String public Id , String system Id , Augmentations augs ) throws XNI Exception {", "f In DTD = true ;", "try {", "if ( f Lexical Handler != null ) {", "f Lexical Handler . start DTD ( root Element , public Id , system Id ) ; } }", "catch ( SAX Exception e ) {", "throw new XNI Exception ( e ) ; }", "if ( f Decl Handler != null ) {", "f Declared Attrs = new Symbol Hash ( ) ; } }"]}
{"ids": "34750", "code": ["@ Visible For Testing static OMA Entry parse OMA Entry ( String entry ) {", "int index = entry . index Of ( STR_ ) ;", "long download Id = Long . parse Long ( entry . substring ( NUM_ , index ) ) ;", "return new OMA Entry ( download Id , entry . substring ( index + NUM_ ) ) ; }"]}
{"ids": "61791", "code": ["public void parse ( ) throws IO Exception {", "long length = NUM_ ;", "try {", "length = file . length ( ) ; }", "catch ( IO Exception e ) {", "throw new IO Exception ( STR_ ) ; }", "try {", "parse ( STR_ , length ) ; }", "catch ( IO Exception e ) {", "throw new IO Exception ( STR_ ) ; } }"]}
{"ids": "40392", "code": ["public Reflective Property ( Class < T > property Holder , Class < V > value Type , String name ) {", "super ( value Type , name ) ;", "char first Letter = Character . to Upper Case ( name . char At ( NUM_ ) ) ;", "String the Rest = name . substring ( NUM_ ) ;", "String capitalized Name = first Letter + the Rest ;", "String getter Name = PREFIX GET + capitalized Name ;", "try {", "m Getter = property Holder . get Method ( getter Name , ( Class < ? > [ ] ) null ) ; }", "catch ( No Such Method Exception e ) {", "try {", "m Getter = property Holder . get Declared Method ( getter Name , ( Class < ? > [ ] ) null ) ;", "m Getter . set Accessible ( true ) ; }", "catch ( No Such Method Exception e 2 ) {", "getter Name = PREFIX IS + capitalized Name ;", "try {", "m Getter = property Holder . get Method ( getter Name , ( Class < ? > [ ] ) null ) ; }", "catch ( No Such Method Exception e 3 ) {", "try {", "m Getter = property Holder . get Declared Method ( getter Name , ( Class < ? > [ ] ) null ) ;", "m Getter . set Accessible ( true ) ; }", "catch ( No Such Method Exception e 4 ) {", "try {", "m Field = property Holder . get Field ( name ) ;", "Class field Type = m Field . get Type ( ) ;", "if ( ! types Match ( value Type , field Type ) ) {", "throw new No Such Property Exception ( STR_ + field Type + STR_ + STR_ + value Type + STR_ ) ; }", "return ; }", "catch ( No Such Field Exception e 5 ) {", "throw new No Such Property Exception ( STR_ + STR_ + name ) ; } } } } }", "Class getter Type = m Getter . get Return Type ( ) ;", "if ( ! types Match ( value Type , getter Type ) ) {", "throw new No Such Property Exception ( STR_ + getter Type + STR_ + STR_ + value Type + STR_ ) ; }", "String setter Name = PREFIX SET + capitalized Name ;", "try {", "m Setter = property Holder . get Declared Method ( setter Name , getter Type ) ;", "m Setter . set Accessible ( true ) ; }", "catch ( No Such Method Exception ignored ) { } }"]}
{"ids": "37154", "code": ["public C Function Type Panel ( final Listener Provider < I Filter Dialog Listener > listeners ) {", "super ( new Border Layout ( ) ) ;", "m listeners = listeners ;", "final J Panel inner Panel = new J Panel ( new Grid Layout ( NUM_ , NUM_ ) ) ;", "inner Panel . add ( build Row ( STR_ , m normal Function Checkbox ) ) ;", "inner Panel . add ( build Row ( STR_ , m imported Function Checkbox ) ) ;", "inner Panel . add ( build Row ( STR_ , m library Function Checkbox ) ) ;", "inner Panel . add ( build Row ( STR_ , m thunk Function Checkbox ) ) ;", "inner Panel . add ( build Row ( STR_ , m adjustor Function Checkbox ) ) ;", "add ( inner Panel , Border Layout . NORTH ) ;", "set Border ( new Titled Border ( STR_ ) ) ; }"]}
{"ids": "29338", "code": ["public Drag Context ( Node draggable ) {", "this . node = draggable ;", "this . go To Foreground On Contact = true ;", "this . touch Id = NULL ID ;", "this . activated = false ;", "this . drag Limits = new Bounding Box ( NUM_ , NUM_ , Integer . MAX VALUE , Integer . MAX VALUE ) ;", "this . drag Threshold = NUM_ ;", "this . drag Started = false ;", "this . relocate Threshold = NUM_ ;", "this . drag Init Action = null ;", "this . drag Finish Action = null ;", "touch Handler = null ;", "mouse Handler = null ;", "draggable . add Event Handler ( Touch Event . ANY , touch Handler ) ;", "draggable . add Event Handler ( Mouse Event . ANY , mouse Handler ) ; }"]}
{"ids": "9811", "code": ["protected X 509 Certificate [ ] open Certificate ( File certificate File ) {", "try {", "File Input Stream is = new File Input Stream ( certificate File ) ;", "return open Certificate ( is , certificate File . get Name ( ) ) ; }", "catch ( File Not Found Exception ex ) {", "J Option Pane . show Message Dialog ( frame , Message Format . format ( res . get String ( STR_ ) , certificate File ) , res . get String ( STR_ ) , J Option Pane . WARNING MESSAGE ) ;", "return null ; } }"]}
{"ids": "5026", "code": ["public Shape Tile Simplex ( Pla Line Int Alist p line alist ) {", "lines list = new Array List < Pla Line Int > ( p line alist . size ( ) ) ;", "for ( Pla Line Int a line : p line alist ) lines list . add ( a line ) ;", "Collections . sort ( lines list ) ; }"]}
{"ids": "72432", "code": ["public Proper Fraction Format ( Number Format format ) {", "this ( format , ( Number Format ) format . clone ( ) , ( Number Format ) format . clone ( ) ) ; }"]}
{"ids": "68969", "code": ["private File create Capture File ( int encoding Type ) {", "return create Capture File ( encoding Type , STR_ ) ; }"]}
{"ids": "72528", "code": ["public double [ ] [ ] extract Main Set Jacobian ( final ODE State state ) {", "final double [ ] p = state . get Secondary State ( index ) ;", "final double [ ] [ ] d Yd Y 0 = new double [ jode . get Dimension ( ) ] [ jode . get Dimension ( ) ] ;", "int j = NUM_ ;", "for ( int i = NUM_ ; i < jode . get Dimension ( ) ; i ++ ) {", "System . arraycopy ( p , j , d Yd Y 0 [ i ] , NUM_ , jode . get Dimension ( ) ) ;", "j += jode . get Dimension ( ) ; }", "return d Yd Y 0 ; }"]}
{"ids": "78033", "code": ["public static String byte To Hex String ( byte [ ] byte Array ) {", "String Builder builder = new String Builder ( ) ;", "for ( int i = NUM_ ; i < byte Array . length ; i ++ ) {", "int byte Code = byte Array [ i ] & NUM_ ;", "if ( byte Code < NUM_ ) {", "builder . append ( NUM_ ) ; }", "builder . append ( Integer . to Hex String ( byte Code ) ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "82005", "code": ["public static void assert Not Equal ( Object expected , Object actual ) {", "if ( verbose ) {", "log ( STR_ + expected + STR_ + actual + STR_ ) ; }", "Test Utils . assert Bool ( ! expected . equals ( actual ) ) ; }"]}
{"ids": "31333", "code": ["private boolean is Empty ( String value ) {", "return value . length ( ) == NUM_ ; }"]}
{"ids": "2825", "code": ["private void dispose Codec ( Io Session session ) {", "dispose Encoder ( session ) ;", "dispose Decoder ( session ) ;", "dispose Decoder Out ( session ) ; }"]}
{"ids": "51484", "code": ["public static Object Stream Class lookup Any ( Class < ? > cl ) {", "return lookup Stream Class ( cl ) ; }"]}
{"ids": "57028", "code": ["public static void main ( String [ ] args ) {", "try {", "int server Port = Integer . parse Int ( System . get Property ( STR_ , STR_ ) ) ;", "T Transport transport ;", "transport = new T Framed Transport ( new T Socket ( STR_ , server Port ) ) ;", "transport . open ( ) ;", "T Protocol protocol = new T Binary Protocol ( transport ) ;", "Packet Streamer . Client client = new Packet Streamer . Client ( protocol ) ;", "send Packets ( client , ( short ) NUM_ , OF Message Type . PACKET IN , true ) ;", "log . debug ( STR_ ) ;", "client . terminate Session ( STR_ ) ;", "transport . close ( ) ; }", "catch ( T Exception x ) {", "x . print Stack Trace ( ) ; } }"]}
{"ids": "31074", "code": ["public Configuration Parser ( boolean verify , Class Loader loader ) throws Parser Configuration Exception {", "factory = Document Builder Factory . new Instance ( ) ;", "factory . set Validating ( verify ) ;", "factory . set Namespace Aware ( true ) ;", "factory . set Expand Entity References ( true ) ;", "factory . set Coalescing ( true ) ;", "builder = factory . new Document Builder ( ) ;", "if ( verify ) builder . set Error Handler ( new XML Error Handler ( ) ) ;", "if ( loader == null ) throw new Null Pointer Exception ( STR_ ) ; }"]}
{"ids": "17031", "code": ["public Application create Jmx Application Interactive ( String connection String , String display Name , Environment Provider provider , boolean persistent ) {", "return create Jmx Application Interactive ( connection String , display Name , provider , persistent , false ) ; }"]}
{"ids": "60640", "code": ["public static synchronized void remove Provider ( int provider Number ) {", "Provider p = providers . remove ( provider Number - NUM_ ) ;", "providers Names . remove ( p . get Name ( ) ) ;", "set Need Refresh ( ) ; }"]}
{"ids": "54979", "code": ["public Object reference Insert ( String reference , Object value ) {", "String s = null ;", "if ( value != null ) {", "s = REFERENCE VALUE ; }", "else {", "if ( reference . equals ( STR_ ) ) {", "s = NO REFERENCE VALUE ; } }", "return s ; }"]}
{"ids": "49076", "code": ["public Graphic Component ( Graphic Attribute graphic , Decoration decorator , int [ ] chars Lto V , byte [ ] levels , int start , int limit , Affine Transform base Tx ) {", "if ( limit <= start ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . graphic = graphic ;", "this . graphic Advance = graphic . get Advance ( ) ;", "this . decorator = decorator ;", "this . cm = create Core Metrics ( graphic ) ;", "this . base Tx = base Tx ;", "init Local Ordering ( chars Lto V , levels , start , limit ) ; }"]}
{"ids": "21980", "code": ["public static boolean has Valid User In Context ( Security Context security Context ) {", "if ( ( security Context != null ) && ( security Context . get User Principal ( ) instanceof Storage OS User ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "64579", "code": ["private void handle End Of Stream ( State state , Inner State inner State ) throws Stop Request {", "m Info . m Current Bytes = inner State . m Bytes So Far ;", "m DB . update Download ( m Info ) ;", "boolean length Mismatched = ( inner State . m Header Content Length != null ) && ( inner State . m Bytes So Far != Integer . parse Int ( inner State . m Header Content Length ) ) ;", "if ( length Mismatched ) {", "if ( cannot Resume ( inner State ) ) {", "throw new Stop Request ( Downloader Service . STATUS CANNOT RESUME , STR_ ) ; }", "else {", "throw new Stop Request ( get Final Status For Http Error ( state ) , STR_ ) ; } } }"]}
{"ids": "69543", "code": ["public void add ( String keyword , byte id ) {", "int key = get String Map Key ( keyword ) ;", "map [ key ] = new Keyword ( keyword . to Char Array ( ) , id , map [ key ] ) ; }"]}
{"ids": "24752", "code": ["private String seconds To Time ( int seconds ) {", "String time = STR_ ;", "String minutes Text = String . value Of ( seconds / NUM_ ) ;", "if ( minutes Text . length ( ) == NUM_ ) minutes Text = STR_ + minutes Text ;", "String seconds Text = String . value Of ( seconds % NUM_ ) ;", "if ( seconds Text . length ( ) == NUM_ ) seconds Text = STR_ + seconds Text ;", "time = minutes Text + STR_ + seconds Text ;", "return time ; }"]}
{"ids": "57043", "code": ["private void process New Port ( Datapath Id sw , OF Port p ) {", "if ( is Link Discovery Suppressed ( sw , p ) ) {", "return ; }", "IOF Switch iof Switch = switch Service . get Switch ( sw ) ;", "if ( iof Switch == null ) {", "return ; }", "Node Port Tuple npt = new Node Port Tuple ( sw , p ) ;", "discover ( sw , p ) ;", "add To Quarantine Queue ( npt ) ; }"]}
{"ids": "1757", "code": ["public Amqp Receiver ( Amqp Session session , String address , String receiver Id ) {", "if ( address != null && address . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . user Specified Source = null ;", "this . session = session ;", "this . address = address ;", "this . receiver Id = receiver Id ; }"]}
{"ids": "32834", "code": ["public static byte read Byte ( ) {", "return scanner . next Byte ( ) ; }"]}
{"ids": "41802", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return SUCCESS ;", "default :", "return null ; } }"]}
{"ids": "51862", "code": ["public static void d ( String tag , String msg , Object ... args ) {", "if ( s Level > LEVEL DEBUG ) {", "return ; }", "if ( args . length > NUM_ ) {", "msg = String . format ( msg , args ) ; }", "Log . d ( tag , msg ) ; }"]}
{"ids": "67640", "code": ["public void clear Value Local ( String column Header ) {", "values . remove ( column Header . to Lower Case ( ) ) ; }"]}
{"ids": "23744", "code": ["public List close Bucket Advisors ( ) {", "List primaries Held = Collections . EMPTY LIST ;", "if ( this . buckets != null ) {", "for ( int i = NUM_ ; i < this . buckets . length ; i ++ ) {", "Proxy Bucket Region pbr = this . buckets [ i ] ;", "if ( pbr . is Primary ( ) ) {", "if ( primaries Held == Collections . EMPTY LIST ) {", "primaries Held = new Array List ( ) ; }", "primaries Held . add ( Integer . value Of ( i ) ) ; }", "pbr . close ( ) ; } }", "return primaries Held ; }"]}
{"ids": "28164", "code": ["static public Test suite ( ) {", "return Proxy Suite Helper . suite When Standalone ( Test Sparql Update . class , STR_ , new Linked Hash Set < Buffer Mode > ( Arrays . as List ( new Buffer Mode [ ] { Buffer Mode . Transient , Buffer Mode . Disk WORM , Buffer Mode . Mem Store , Buffer Mode . Disk RW } ) ) , Test Mode . quads ) ; }"]}
{"ids": "46879", "code": ["private synchronized void cleanup Is Complex Type Attribute ( ) {", "first Attribute = null ;", "remaining Attributes . clear ( ) ;", "is Complex Type Attribute = false ; }"]}
{"ids": "34571", "code": ["public static String left Trim ( final String value ) {", "validate ( value , NULL STRING PREDICATE , NULL STRING MSG SUPPLIER ) ;", "return value . replace All ( STR_ , STR_ ) ; }"]}
{"ids": "64849", "code": ["public float polar Angle ( ) {", "return ( float ) Math . to Degrees ( angle ( ) ) ; }"]}
{"ids": "73477", "code": ["public String check Params Non Negative ( ) {", "String ret = STR_ ;", "if ( param 1 < NUM_ ) {", "ret = ret . concat ( pdf . get Param 1 Name ( ) + STR_ ) ; }", "if ( param 2 < NUM_ ) {", "ret = ret . concat ( pdf . get Param 2 Name ( ) + STR_ ) ; }", "if ( upper Bound < NUM_ ) {", "ret = ret . concat ( STR_ ) ; }", "if ( lower Bound < NUM_ ) {", "ret = ret . concat ( STR_ ) ; }", "return ret ; }"]}
{"ids": "14509", "code": ["public static boolean validate ( String str , String reg Ex , Debug tmp Debug ) {", "debug = tmp Debug ;", "if ( str == null || str . length ( ) == NUM_ ) {", "debug . message ( STR_ ) ;", "return false ; }", "char [ ] value = str . to Char Array ( ) ;", "int count = value . length ;", "Set h Set = new Hash Set ( ) ;", "String Tokenizer st = new String Tokenizer ( reg Ex , SEPERATOR ) ;", "while ( st . has More Tokens ( ) ) {", "h Set . add ( st . next Token ( ) ) ; }", "Iterator itr = h Set . iterator ( ) ;", "while ( itr . has Next ( ) ) {", "String obj = ( String ) itr . next ( ) ;", "if ( process ( value , obj , NUM_ , count ) > - NUM_ ) {", "debug . message ( STR_ ) ;", "return false ; } }", "return true ; }"]}
{"ids": "1185", "code": ["public static float turbulence 2 ( float x , float y , float octaves ) {", "float t = NUM_ ;", "for ( float f = NUM_ ; f <= octaves ; f *= NUM_ ) t += Math . abs ( noise 2 ( f * x , f * y ) ) / f ;", "return t ; }"]}
{"ids": "4359", "code": ["public void add Map Object ( Internal Map Object map Object ) {", "map Objects . add ( map Object ) ; }"]}
{"ids": "53696", "code": ["public List < Mock Response > enqueue ( String ... paths ) {", "if ( paths == null ) {", "return null ; }", "List < Mock Response > mock Response List = new Array List < > ( ) ;", "for ( String path : paths ) {", "Fixture fixture = Fixture . parse From ( path , parser ) ;", "Mock Response mock Response = new Mock Response ( ) ;", "if ( fixture . status Code != NUM_ ) {", "mock Response . set Response Code ( fixture . status Code ) ; }", "if ( fixture . body != null ) {", "mock Response . set Body ( fixture . body ) ; }", "if ( fixture . delay != NUM_ ) {", "mock Web Server . set Dispatcher ( new Delayed Dispatcher ( fixture . delay , Time Unit . MILLISECONDS ) ) ; }", "if ( fixture . headers != null ) {", "for ( String header : fixture . headers ) {", "mock Response . add Header ( header ) ; } }", "mock Web Server . enqueue ( mock Response ) ;", "mock Response List . add ( mock Response ) ; }", "return mock Response List ; }"]}
{"ids": "9232", "code": ["@ Override public void end Of Stream ( ) throws Ade Exception {", "double min Prob = NUM_ ;", "if ( m total Interval Count == NUM_ ) {", "m total Interval Count = NUM_ ; }", "for ( Entry < String , Bernoulli Score . Msg Data > entry : m msg Data . entry Set ( ) ) {", "final Full Bernoulli Msg Data data = ( Full Bernoulli Msg Data ) entry . get Value ( ) ;", "data . m prob = ( ( double ) data . m count + NUM_ ) / ( m total Interval Count + NUM_ ) ;", "if ( data . m prob < NUM_ || data . m prob >= NUM_ ) {", "logger . info ( entry . get Key ( ) + STR_ + data . m prob + STR_ + data . m count + STR_ + m total Interval Count + STR_ ) ; }", "if ( data . m prob < min Prob ) {", "min Prob = data . m prob ; }", "data . m out Of Cluster Prob = ( ( double ) data . m out Of Cluster Count + NUM_ ) / ( m total Interval Count + NUM_ ) ;", "if ( data . m out Of Cluster Count < min Prob && data . m out Of Cluster Count > NUM_ ) {", "min Prob = data . m out Of Cluster Count ; } }", "for ( Bernoulli Score . Msg Data data Super : m msg Data . values ( ) ) {", "final Full Bernoulli Msg Data data = ( Full Bernoulli Msg Data ) data Super ;", "final double probability = data . m prob ;", "data . m score = - Math . log ( probability ) ;", "if ( data . m score > NUM_ ) {", "data . m score = NUM_ ; }", "final double out Of Context Probability = data . m out Of Cluster Prob ;", "data . m out Of Context Score = - Math . log ( out Of Context Probability ) ;", "if ( data . m out Of Context Score > NUM_ ) {", "data . m out Of Context Score = NUM_ ; } }", "m trained = true ; }"]}
{"ids": "32942", "code": ["public boolean has Next Key Typed ( ) {", "synchronized ( key Lock ) {", "return ! keys Typed . is Empty ( ) ; } }"]}
{"ids": "43076", "code": ["public void add Operator ( Variation operator ) {", "operators . add ( operator ) ; }"]}
{"ids": "75604", "code": ["public R params To Multipart Entity ( boolean isrepeatable ) {", "try {", "m Http Entity = create Multipart Entity ( isrepeatable ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "return ( R ) this ; }"]}
{"ids": "28548", "code": ["private static int parse Int ( String value , int begin Index , int end Index ) throws Number Format Exception {", "if ( begin Index < NUM_ || end Index > value . length ( ) || begin Index > end Index ) {", "throw new Number Format Exception ( value ) ; }", "int i = begin Index ;", "int result = NUM_ ;", "int digit ;", "if ( i < end Index ) {", "digit = Character . digit ( value . char At ( i ++ ) , NUM_ ) ;", "if ( digit < NUM_ ) {", "throw new Number Format Exception ( STR_ + value . substring ( begin Index , end Index ) ) ; }", "result = - digit ; }", "while ( i < end Index ) {", "digit = Character . digit ( value . char At ( i ++ ) , NUM_ ) ;", "if ( digit < NUM_ ) {", "throw new Number Format Exception ( STR_ + value . substring ( begin Index , end Index ) ) ; }", "result *= NUM_ ;", "result -= digit ; }", "return - result ; }"]}
{"ids": "24224", "code": ["public boolean is Alert Definition Created ( Stat Alert Definition alert Definition ) {", "synchronized ( ALERT DEFINITIONS ) {", "return ALERT DEFINITIONS . contains Key ( Integer . value Of ( alert Definition . get Id ( ) ) ) ; } }"]}
{"ids": "53203", "code": ["public static double logpoisson PD Fm 1 ( double x plus 1 , double lambda ) {", "if ( Double . is Infinite ( lambda ) ) {", "return Double . NEGATIVE INFINITY ; }", "if ( x plus 1 > NUM_ ) {", "return raw Log Probability ( x plus 1 - NUM_ , lambda ) ; }", "if ( lambda > Math . abs ( x plus 1 - NUM_ ) * Math Util . LOG 2 * Double . MAX EXPONENT / NUM_ ) {", "return - lambda - Gamma Distribution . log Gamma ( x plus 1 ) ; }", "else {", "return raw Log Probability ( x plus 1 , lambda ) + Math . log ( x plus 1 / lambda ) ; } }"]}
{"ids": "45480", "code": ["public void check And Notify ( ) {", "for ( File Alteration Listener listener : listeners ) {", "listener . on Start ( this ) ; }", "File root File = root Entry . get File ( ) ;", "if ( root File . exists ( ) ) {", "check And Notify ( root Entry , root Entry . get Children ( ) , list Files ( root File ) ) ; }", "else if ( root Entry . is Exists ( ) ) {", "check And Notify ( root Entry , root Entry . get Children ( ) , File Utils . EMPTY FILE ARRAY ) ; }", "else { }", "for ( File Alteration Listener listener : listeners ) {", "listener . on Stop ( this ) ; } }"]}
{"ids": "35193", "code": ["private double allowable Error ( int rank ) {", "int size = samples . size ( ) ;", "final double error = calculate Error ( rank , size ) ;", "final double min Error = size + NUM_ ;", "if ( error < min Error ) {", "return error ; }", "return min Error ; }"]}
{"ids": "64401", "code": ["public Retry Policy with Max Duration ( long max Duration , Time Unit time Unit ) {", "Assert . not Null ( time Unit , STR_ ) ;", "Assert . state ( time Unit . to Nanos ( max Duration ) > delay . to Nanos ( ) , STR_ ) ;", "this . max Duration = new Duration ( max Duration , time Unit ) ;", "return this ; }"]}
{"ids": "1865", "code": ["private static final void cleanup Namespace Nodes ( Zoo Keeper zkc , String root , String self Broker Url ) throws Exception {", "for ( String node : zkc . get Children ( root , false ) ) {", "String current Path = root + STR_ + node ;", "List < String > children = zkc . get Children ( current Path , false ) ;", "if ( children . size ( ) == NUM_ ) {", "cleanup Single Namespace Node ( zkc , current Path , self Broker Url ) ; }", "else {", "cleanup Namespace Nodes ( zkc , current Path , self Broker Url ) ; } } }"]}
{"ids": "74514", "code": ["String validate Logix Reference ( String name ) {", "Logix l = null ;", "if ( name != null ) {", "if ( name . length ( ) > NUM_ ) {", "l = logix Manager . get By User Name ( name ) ;", "if ( l != null ) {", "return name ; } }", "l = logix Manager . get By System Name ( name ) ; }", "if ( l == null ) {", "message Invalid Action Item Name ( name , STR_ ) ;", "return null ; }", "return name ; }"]}
{"ids": "36557", "code": ["protected void clear Menu Selection ( ) {", "popup Menu Group . clear Selection ( ) ;", "update Selection Status ( ) ; }"]}
{"ids": "83151", "code": ["public double distance ( Lat Lng ll ) {", "double er = NUM_ ;", "double lat From = Math . to Radians ( get Lat ( ) ) ;", "double lat To = Math . to Radians ( ll . get Lat ( ) ) ;", "double lng From = Math . to Radians ( get Lng ( ) ) ;", "double lng To = Math . to Radians ( ll . get Lng ( ) ) ;", "double d = Math . acos ( Math . sin ( lat From ) * Math . sin ( lat To ) + Math . cos ( lat From ) * Math . cos ( lat To ) * Math . cos ( lng To - lng From ) ) * er ;", "return d ; }"]}
{"ids": "78437", "code": ["@ Override public Integer [ ] apply Controls To Impact ( int risk Type , Cn A Tree Element asset , Integer impact C , Integer impact I , Integer impact A ) {", "if ( risk Type == RISK PRE CONTROLS ) {", "return null ; }", "asset = Retriever . check Retrieve Links ( asset , true ) ;", "Map < Cn A Tree Element , Cn A Link > linked Elements = Cn A Link . get Linked Elements ( asset , Control . TYPE ID ) ;", "Integer impact C 0 = Integer . value Of ( impact C . int Value ( ) ) ;", "Integer impact I 0 = Integer . value Of ( impact I . int Value ( ) ) ;", "Integer impact A 0 = Integer . value Of ( impact A . int Value ( ) ) ;", "switch ( risk Type ) {", "case RISK WITH IMPLEMENTED CONTROLS :", "for ( Cn A Tree Element control : linked Elements . key Set ( ) ) {", "control = Retriever . check Retrieve Element ( control ) ;", "if ( Control . is Implemented ( control . get Entity ( ) ) ) {", "impact C 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT C ) ;", "impact I 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT I ) ;", "impact A 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT A ) ; } }", "break ;", "case RISK WITH ALL CONTROLS :", "for ( Cn A Tree Element control : linked Elements . key Set ( ) ) {", "control = Retriever . check Retrieve Element ( control ) ;", "impact C 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT C ) ;", "impact I 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT I ) ;", "impact A 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT A ) ; }", "break ;", "case RISK WITHOUT NA CONTROLS :", "for ( Cn A Tree Element control : linked Elements . key Set ( ) ) {", "control = Retriever . check Retrieve Element ( control ) ;", "if ( Control . is Planned ( control . get Entity ( ) ) ) {", "impact C 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT C ) ;", "impact I 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT I ) ;", "impact A 0 -= control . get Numeric Property ( I Risk Analysis Service . PROP CONTROL EFFECT A ) ; } }", "break ;", "default :", "break ; }", "impact C 0 = ( impact C 0 . int Value ( ) < NUM_ ) ? Integer . value Of ( NUM_ ) : impact C 0 ;", "impact I 0 = ( impact I 0 . int Value ( ) < NUM_ ) ? Integer . value Of ( NUM_ ) : impact I 0 ;", "impact A 0 = ( impact A 0 . int Value ( ) < NUM_ ) ? Integer . value Of ( NUM_ ) : impact A 0 ;", "return new Integer [ ] { impact C 0 , impact I 0 , impact A 0 } ; }"]}
{"ids": "35212", "code": ["public static String encode ( String encode ) {", "String Builder str = new String Builder ( encode ) ;", "String key ;", "int i = NUM_ ;", "while ( i < str . length ( ) ) {", "key = find Value ( str . char At ( i ) ) ;", "if ( key != null ) {", "str . replace ( i , i + NUM_ , key ) ;", "i += key . length ( ) ; }", "else {", "i ++ ; } }", "return str . to String ( ) ; }"]}
{"ids": "24373", "code": ["protected static Boolean try To Lock ( String service Name ) {", "Distributed Lock Service service = Distributed Lock Service . get Service Named ( service Name ) ;", "boolean locked = service . lock ( STR_ , NUM_ , - NUM_ ) ;", "if ( locked ) {", "service . unlock ( STR_ ) ; }", "return Boolean . value Of ( locked ) ; }"]}
{"ids": "11357", "code": ["public int hash Code ( ) {", "Lat Lon Point llp = get Location ( ) ;", "int hc 1 = Float . float To Int Bits ( llp . get Latitude ( ) ) ;", "int hc 2 = Float . float To Int Bits ( llp . get Longitude ( ) ) ;", "return hc 1 ^ ( hc 2 << NUM_ ) ^ ( hc 2 > > > NUM_ ) ; }"]}
{"ids": "57465", "code": ["private X Path Factory load From Services File ( String uri , String resource Name , Input Stream in ) {", "if ( debug ) debug Println ( STR_ + resource Name ) ;", "Buffered Reader rd ;", "try {", "rd = new Buffered Reader ( new Input Stream Reader ( in , STR_ ) , DEFAULT LINE LENGTH ) ; }", "catch ( java . io . Unsupported Encoding Exception e ) {", "rd = new Buffered Reader ( new Input Stream Reader ( in ) , DEFAULT LINE LENGTH ) ; }", "String factory Class Name ;", "X Path Factory result Factory = null ;", "while ( true ) {", "try {", "factory Class Name = rd . read Line ( ) ; }", "catch ( IO Exception x ) {", "break ; }", "if ( factory Class Name != null ) {", "int hash Index = factory Class Name . index Of ( STR_ ) ;", "if ( hash Index != - NUM_ ) {", "factory Class Name = factory Class Name . substring ( NUM_ , hash Index ) ; }", "factory Class Name = factory Class Name . trim ( ) ;", "if ( factory Class Name . length ( ) == NUM_ ) {", "continue ; }", "try {", "X Path Factory found Factory = create Instance ( factory Class Name ) ;", "if ( found Factory . is Object Model Supported ( uri ) ) {", "result Factory = found Factory ;", "break ; } }", "catch ( Exception ignored ) { } }", "else {", "break ; } }", "Io Utils . close Quietly ( rd ) ;", "return result Factory ; }"]}
{"ids": "63892", "code": ["private synchronized void stop ( ) {", "while ( m activities . size ( ) > NUM_ ) {", "Activity a = ( Activity ) m activities . get ( m activities . size ( ) - NUM_ ) ;", "a . cancel ( ) ; }", "set Running ( false ) ;", "notify ( ) ; }"]}
{"ids": "27076", "code": ["public Rhythm Group make Group ( String title ) {", "final Rhythm Group group = new Rhythm Group ( ) ;", "group . m Title = title ;", "group . m Index = m Rhythm Groups . size ( ) ;", "group . m Control = this ;", "m Rhythm Groups . add ( group ) ;", "if ( m Current Notification Group Index == NOTIFICATION NO GROUPS ) {", "m Current Notification Group Index = NUM_ ;", "request Notification Update ( ) ; }", "return group ; }"]}
{"ids": "52352", "code": ["public void write To ( final Output Stream out ) throws IO Exception {", "for ( final Block block : blocks ) {", "out . write ( block . data , NUM_ , block . limit ) ; } }"]}
{"ids": "32911", "code": ["public KMP ( String pat ) {", "this . R = NUM_ ;", "this . pat = pat ;", "int m = pat . length ( ) ;", "dfa = new int [ R ] [ m ] ;", "dfa [ pat . char At ( NUM_ ) ] [ NUM_ ] = NUM_ ;", "for ( int x = NUM_ , j = NUM_ ; j < m ; j ++ ) {", "for ( int c = NUM_ ; c < R ; c ++ ) dfa [ c ] [ j ] = dfa [ c ] [ x ] ;", "dfa [ pat . char At ( j ) ] [ j ] = j + NUM_ ;", "x = dfa [ pat . char At ( j ) ] [ x ] ; } }"]}
{"ids": "51665", "code": ["private void load Configuration ( ) {", "m Client Id = m Configuration Manager . get String ( PREF CLIENT ID , STR_ ) ;", "m Client Key = m Configuration Manager . get String ( PREF CLIENT KEY , STR_ ) ;", "Timber . i ( STR_ ) ; }"]}
{"ids": "32008", "code": ["public static void put Boolean Field ( Object obj , long field Off , boolean val ) {", "UNSAFE . put Boolean ( obj , field Off , val ) ; }"]}
{"ids": "3028", "code": ["public void sort ( Comparator < File > comparator ) {", "synchronized ( m Lock ) {", "Collections . sort ( file List , comparator ) ; }", "notify Data Set Changed ( ) ; }"]}
{"ids": "39795", "code": ["public Accept Request Interceptor ( final String accept ) {", "this . accept = accept ;", "check Argument ( ! accept . is Empty ( ) , STR_ ) ; }"]}
{"ids": "53117", "code": ["private int tailing Non Newline ( String str , int off , int len ) {", "for ( int cnt = NUM_ ; cnt < len ; cnt ++ ) {", "final int pos = off + ( len - NUM_ ) - cnt ;", "if ( str . char At ( pos ) == UNIX NEWLINE ) {", "return cnt ; }", "if ( str . char At ( pos ) == CARRIAGE RETURN ) {", "return cnt ; } }", "return len ; }"]}
{"ids": "27349", "code": ["@ Override public void reset ( ) {", "clear ( ) ;", "bnodes = null ;", "bnodes Total Count = NUM_ ;", "bnodes Resolved Count = NUM_ ;", "deferred Stmts = null ;", "reified Stmts = null ;", "if ( queue != null ) {", "final Future < Void > ft = this . ft ;", "if ( ft != null ) {", "ft . cancel ( true ) ;", "this . ft = null ; }", "queue . clear ( ) ; } }"]}
{"ids": "86748", "code": ["public static byte [ ] read Data ( final Input Stream input ) throws IO Exception {", "final byte [ ] input Buffer = new byte [ BUFFER LENGTH ] ;", "final Byte Array Output Stream byte Output = new Byte Array Output Stream ( BUFFER LENGTH ) ;", "int bytes Read ;", "while ( ( bytes Read = input . read ( input Buffer ) ) != - NUM_ ) {", "byte Output . write ( input Buffer , NUM_ , bytes Read ) ; }", "final byte [ ] r = byte Output . to Byte Array ( ) ;", "byte Output . close ( ) ;", "return r ; }"]}
{"ids": "78078", "code": ["public static String make Log Tag ( Class cls ) {", "return make Log Tag ( cls . get Simple Name ( ) ) ; }"]}
{"ids": "38907", "code": ["@ Override public synchronized void println ( ) {", "print ( STR_ ) ; }"]}
{"ids": "30002", "code": ["public Abstract Site Map parse Site Map ( String content Type , byte [ ] content , URL url ) throws Unknown Format Exception , IO Exception {", "Media Type media Type = Media Type . parse ( content Type ) ;", "while ( media Type != null && ! media Type . equals ( Media Type . OCTET STREAM ) ) {", "if ( XML MEDIA TYPES . contains ( media Type ) ) {", "return process Xml ( url , content ) ; }", "else if ( TEXT MEDIA TYPES . contains ( media Type ) ) {", "return process Text ( url . to String ( ) , content ) ; }", "else if ( GZ MEDIA TYPES . contains ( media Type ) ) {", "return process Gzip ( url , content ) ; }", "else {", "media Type = MEDIA TYPE REGISTRY . get Supertype ( media Type ) ;", "return parse Site Map ( media Type . to String ( ) , content , url ) ; } }", "throw new Unknown Format Exception ( STR_ + content Type + STR_ + url + STR_ ) ; }"]}
{"ids": "72050", "code": ["private void create Default Managed Object ( Managed Object Definition < ? , ? > d , Managed Object < ? > child , Default Managed Object < ? , ? > dmo ) {", "for ( Property Definition < ? > pd : d . get All Property Definitions ( ) ) {", "set Property Values ( child , pd , dmo ) ; }", "try {", "child . commit ( ) ; }", "catch ( Managed Object Already Exists Exception e ) {", "moaee = e ; }", "catch ( Missing Mandatory Properties Exception e ) {", "mmpe = e ; }", "catch ( Concurrent Modification Exception e ) {", "cme = e ; }", "catch ( Operation Rejected Exception e ) {", "ore = e ; }", "catch ( Ldap Exception e ) {", "ere = e ; } }"]}
{"ids": "82206", "code": ["static String omit Quotes If Exist ( String str ) {", "if ( str == null ) {", "return null ; }", "if ( ( ( str . char At ( NUM_ ) == STR_ ) || ( str . char At ( NUM_ ) == STR_ ) ) && ( str . length ( ) >= NUM_ ) ) {", "str = str . substring ( NUM_ , str . length ( ) - NUM_ ) ; }", "return str ; }"]}
{"ids": "42033", "code": ["public static byte [ ] decode ( byte [ ] input , int offset , int len , int flags ) {", "Decoder decoder = new Decoder ( flags , new byte [ len * NUM_ / NUM_ ] ) ;", "if ( ! decoder . process ( input , offset , len , true ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( decoder . op == decoder . output . length ) {", "return decoder . output ; }", "byte [ ] temp = new byte [ decoder . op ] ;", "System . arraycopy ( decoder . output , NUM_ , temp , NUM_ , decoder . op ) ;", "return temp ; }"]}
{"ids": "70131", "code": ["private static boolean can Complete Node Path ( Entity start , Entity end , Array List < Entity > network , int start Position , List < ECM Info > all ECM Info ) {", "Entity spotter = network . get ( start Position ) ;", "ECM Info spotter Start ECM = Compute ECM . get ECM Effects ( spotter , start . get Position ( ) , spotter . get Position ( ) , true , all ECM Info ) ;", "boolean is C 3 B Defeated = start . has Boosted C 3 ( ) && ( spotter Start ECM != null ) && spotter Start ECM . is Angel ECM ( ) ;", "boolean is Nova Defeated = start . has Nova CEWS ( ) && ( spotter Start ECM != null ) && spotter Start ECM . is Nova ECM ( ) ;", "boolean is C 3 Defeated = ! ( start . has Boosted C 3 ( ) || start . has Nova CEWS ( ) ) && ( spotter Start ECM != null ) && spotter Start ECM . is ECM ( ) ;", "if ( is C 3 B Defeated || is Nova Defeated || is C 3 Defeated ) {", "return false ; }", "ECM Info spotter End ECM = Compute ECM . get ECM Effects ( spotter , spotter . get Position ( ) , end . get Position ( ) , true , all ECM Info ) ;", "is C 3 B Defeated = start . has Boosted C 3 ( ) && ( spotter End ECM != null ) && spotter End ECM . is Angel ECM ( ) ;", "is Nova Defeated = start . has Nova CEWS ( ) && ( spotter End ECM != null ) && spotter End ECM . is Nova ECM ( ) ;", "is C 3 Defeated = ! ( start . has Boosted C 3 ( ) || start . has Nova CEWS ( ) ) && ( spotter End ECM != null ) && spotter End ECM . is ECM ( ) ;", "if ( ! ( is C 3 B Defeated || is Nova Defeated || is C 3 Defeated ) ) {", "return true ; }", "for ( ++ start Position ; start Position < network . size ( ) ; start Position ++ ) {", "if ( Compute . can Complete Node Path ( spotter , end , network , start Position , all ECM Info ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "47372", "code": ["static void make 72 Safe ( String Buffer line ) {", "int length = line . length ( ) ;", "if ( length > NUM_ ) {", "int index = NUM_ ;", "while ( index < length - NUM_ ) {", "line . insert ( index , STR_ ) ;", "index += NUM_ ;", "length += NUM_ ; } }", "return ; }"]}
{"ids": "48456", "code": ["@ Override public int last ( ) {", "Character Iterator t = get Text ( ) ;", "t . set Index ( t . get End Index ( ) ) ;", "return t . get Index ( ) ; }"]}
{"ids": "4679", "code": ["public static void register Protocol ( final String id , final Protocol protocol ) {", "if ( id == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( protocol == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "PROTOCOLS . put ( id , protocol ) ; }"]}
{"ids": "77695", "code": ["public static String link HTML ( String text ) {", "if ( text == null || text . length ( ) == NUM_ ) {", "return STR_ ; }", "boolean http = text . index Of ( STR_ ) != - NUM_ ;", "boolean www = text . index Of ( STR_ ) != - NUM_ ;", "boolean email = text . index Of ( STR_ ) != - NUM_ ;", "if ( ! http && ! www && ! email ) {", "return text ; }", "if ( text . index Of ( STR_ ) != - NUM_ && text . index Of ( STR_ ) != - NUM_ ) {", "return text ; }", "if ( http ) {", "Matcher matcher = http Regex . matcher ( text ) ;", "String Buffer sb = new String Buffer ( ) ;", "while ( matcher . find ( ) ) {", "String url = matcher . group ( ) ;", "if ( url . index Of ( STR_ ) != - NUM_ || url . index Of ( STR_ ) != - NUM_ || url . index Of ( STR_ ) != - NUM_ || url . index Of ( STR_ ) != - NUM_ ) {", "url = STR_ + url + STR_ + url + STR_ ; }", "else if ( url . index Of ( STR_ ) != - NUM_ || url . index Of ( STR_ ) != - NUM_ || url . index Of ( STR_ ) != - NUM_ ) {", "url = STR_ + url + STR_ + url + STR_ ; }", "else if ( url . index Of ( STR_ ) != - NUM_ || url . index Of ( STR_ ) != - NUM_ ) {", "url = STR_ + url + STR_ + url + STR_ ; }", "else {", "url = STR_ + url + STR_ + url + STR_ ; }", "matcher . append Replacement ( sb , url ) ; }", "matcher . append Tail ( sb ) ;", "text = sb . to String ( ) ; }", "else if ( www ) {", "Matcher matcher = www Regex . matcher ( text ) ;", "String Buffer sb = new String Buffer ( ) ;", "while ( matcher . find ( ) ) {", "String url = matcher . group ( ) ;", "matcher . append Replacement ( sb , STR_ + url + STR_ + url + STR_ ) ; }", "matcher . append Tail ( sb ) ;", "text = sb . to String ( ) ; }", "if ( email ) {", "Matcher matcher = email Regex . matcher ( text ) ;", "String Buffer sb = new String Buffer ( ) ;", "while ( matcher . find ( ) ) {", "String address = matcher . group ( ) ;", "matcher . append Replacement ( sb , STR_ + address + STR_ + address + STR_ ) ; }", "matcher . append Tail ( sb ) ;", "text = sb . to String ( ) ; }", "return text ; }"]}
{"ids": "70766", "code": ["public static int hash ( String key , int bit Size , String input , String hash Type ) {", "int bit Limited Hash ;", "try {", "Message Digest md = Message Digest . get Instance ( hash Type ) ;", "byte [ ] array = md . digest ( input . get Bytes ( ) ) ;", "int hash Int = from Byte Array ( array ) ;", "bit Limited Hash = hash Int ;", "if ( bit Size < NUM_ ) {", "bit Limited Hash = ( NUM_ > > > ( NUM_ - bit Size ) ) & hash Int ; }", "logger . debug ( STR_ + hash Int + STR_ + bit Limited Hash ) ; }", "catch ( No Such Algorithm Exception e ) {", "logger . info ( e . to String ( ) ) ;", "bit Limited Hash = hash ( key , bit Size , input ) ; }", "return bit Limited Hash ; }"]}
{"ids": "57259", "code": ["private OF Factory compute Initial Factory ( Set < OF Version > of Versions ) {", "if ( of Versions == null || of Versions . is Empty ( ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "OF Version highest = null ;", "for ( OF Version v : of Versions ) {", "if ( highest == null ) {", "highest = v ; }", "else if ( v . compare To ( highest ) > NUM_ ) {", "highest = v ; } }", "return OF Factories . get Factory ( highest ) ; }"]}
{"ids": "31664", "code": ["private void load Jetty Configuration ( @ Nullable URL cfg Url ) throws Ignite Checked Exception {", "if ( cfg Url == null ) {", "Http Configuration http Cfg = new Http Configuration ( ) ;", "http Cfg . set Secure Scheme ( STR_ ) ;", "http Cfg . set Secure Port ( NUM_ ) ;", "http Cfg . set Send Server Version ( true ) ;", "http Cfg . set Send Date Header ( true ) ;", "String srv Port Str = System . get Property ( IGNITE JETTY PORT , STR_ ) ;", "int srv Port ;", "try {", "srv Port = Integer . parse Int ( srv Port Str ) ; }", "catch ( Number Format Exception ignore ) {", "throw new Ignite Checked Exception ( STR_ + STR_ + srv Port Str ) ; }", "http Srv = new Server ( new Queued Thread Pool ( NUM_ , NUM_ ) ) ;", "Server Connector srv Conn = new Server Connector ( http Srv , new Http Connection Factory ( http Cfg ) ) ;", "srv Conn . set Host ( System . get Property ( IGNITE JETTY HOST , STR_ ) ) ;", "srv Conn . set Port ( srv Port ) ;", "srv Conn . set Idle Timeout ( NUM_ ) ;", "srv Conn . set Reuse Address ( true ) ;", "http Srv . add Connector ( srv Conn ) ;", "http Srv . set Stop At Shutdown ( false ) ; }", "else {", "Xml Configuration cfg ;", "try {", "cfg = new Xml Configuration ( cfg Url ) ; }", "catch ( File Not Found Exception e ) {", "throw new Ignite Spi Exception ( STR_ + cfg Url , e ) ; }", "catch ( SAX Exception e ) {", "throw new Ignite Spi Exception ( STR_ + cfg Url , e ) ; }", "catch ( IO Exception e ) {", "throw new Ignite Spi Exception ( STR_ + cfg Url , e ) ; }", "catch ( Exception e ) {", "throw new Ignite Spi Exception ( STR_ + cfg Url , e ) ; }", "try {", "http Srv = ( Server ) cfg . configure ( ) ; }", "catch ( Exception e ) {", "throw new Ignite Checked Exception ( STR_ , e ) ; } }", "assert http Srv != null ;", "http Srv . set Handler ( jetty Hnd ) ;", "override ( get Jetty Connector ( ) ) ; }"]}
{"ids": "49567", "code": ["public byte [ ] encode Frame ( ) {", "int length = this . payload . length + frame Length Overhead ;", "if ( this . payload . length > NUM_ ) {", "length += NUM_ ; }", "else if ( this . payload . length >= NUM_ ) {", "length += NUM_ ; }", "Byte Buffer buffer = Byte Buffer . allocate ( length ) ;", "append Fin And Op Code ( buffer , this . opcode , this . fin ) ;", "byte mask [ ] = generate Masking Key ( ) ;", "append Length And Mask ( buffer , this . payload . length , mask ) ;", "for ( int i = NUM_ ; i < this . payload . length ; i ++ ) {", "buffer . put ( ( byte ) ( this . payload [ i ] ^= mask [ i % NUM_ ] ) ) ; }", "buffer . flip ( ) ;", "return buffer . array ( ) ; }"]}
{"ids": "77818", "code": ["public static void preload Icon ( Context context , Component Name component Name , Bitmap icon , int dpi ) {", "try {", "Package Manager package Manager = context . get Package Manager ( ) ;", "package Manager . get Activity Icon ( component Name ) ;", "return ; }", "catch ( Package Manager . Name Not Found Exception e ) { }", "final String key = component Name . flatten To String ( ) ;", "File Output Stream resource File = null ;", "try {", "resource File = context . open File Output ( get Resource Filename ( component Name ) , Context . MODE PRIVATE ) ;", "Byte Array Output Stream os = new Byte Array Output Stream ( ) ;", "if ( icon . compress ( android . graphics . Bitmap . Compress Format . PNG , NUM_ , os ) ) {", "byte [ ] buffer = os . to Byte Array ( ) ;", "resource File . write ( buffer , NUM_ , buffer . length ) ; }", "else {", "Log . w ( TAG , STR_ + key ) ;", "return ; } }", "catch ( File Not Found Exception e ) {", "Log . w ( TAG , STR_ + key , e ) ; }", "catch ( IO Exception e ) {", "Log . w ( TAG , STR_ + key , e ) ; }", "finally {", "if ( resource File != null ) {", "try {", "resource File . close ( ) ; }", "catch ( IO Exception e ) {", "Log . d ( TAG , STR_ + key , e ) ; } } } }"]}
{"ids": "68053", "code": ["public void normalize ( ) {", "String Builder sb = new String Builder ( ) ;", "for ( String v : values ) {", "sb . append ( v ) ; }", "values . clear ( ) ;", "values . add ( sb . to String ( ) ) ;", "compacted = false ; }"]}
{"ids": "14058", "code": ["public void add Attribute ( String key , String value ) {", "extra Session Attributes . put ( key , value ) ; }"]}
{"ids": "55559", "code": ["String capitalise ( final String s ) {", "if ( s . length ( ) == NUM_ ) {", "return s ; }", "final String Buffer s 1 = new String Buffer ( s ) ;", "if ( Character . is Lower Case ( s 1 . char At ( NUM_ ) ) ) {", "s 1 . set Char At ( NUM_ , Character . to Upper Case ( s 1 . char At ( NUM_ ) ) ) ; }", "for ( int j = NUM_ ; j < s 1 . length ( ) ; j ++ ) {", "if ( Character . is Upper Case ( s 1 . char At ( j ) ) ) {", "s 1 . set Char At ( j , Character . to Lower Case ( s 1 . char At ( j ) ) ) ; } }", "return s 1 . to String ( ) ; }"]}
{"ids": "61177", "code": ["public void recompose ( Vector recomposable Elements ) throws Transformer Exception {", "int n = get Include Count Composed ( ) ;", "for ( int i = - NUM_ ; i < n ; i ++ ) {", "Stylesheet included = get Include Composed ( i ) ;", "int s = included . get Output Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Output ( j ) ) ; }", "s = included . get Attribute Set Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Attribute Set ( j ) ) ; }", "s = included . get Decimal Format Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Decimal Format ( j ) ) ; }", "s = included . get Key Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Key ( j ) ) ; }", "s = included . get Namespace Alias Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Namespace Alias ( j ) ) ; }", "s = included . get Template Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Template ( j ) ) ; }", "s = included . get Variable Or Param Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Variable Or Param ( j ) ) ; }", "s = included . get Strip Space Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Strip Space ( j ) ) ; }", "s = included . get Preserve Space Count ( ) ;", "for ( int j = NUM_ ; j < s ; j ++ ) {", "recomposable Elements . add Element ( included . get Preserve Space ( j ) ) ; } } }"]}
{"ids": "71200", "code": ["private Geometry union Actual ( Geometry g 0 , Geometry g 1 ) {", "return restrict To Polygons ( g 0 . union ( g 1 ) ) ; }"]}
{"ids": "50880", "code": ["public boolean supports ( @ Magic Constant ( flags From Class = Features . class ) int capability ) {", "I Android Target target = get Target ( ) ;", "if ( target != null ) {", "return Render Service . supports Capability ( get Module ( ) , target , capability ) ; }", "return false ; }"]}
{"ids": "69884", "code": ["@ Override public void transaction Aborted ( ) {", "if ( listeners . is Empty ( ) ) {", "records . reset ( ) ; }", "else {", "records . flush ( ) ;", "listeners . for Each ( null ) ; } }"]}
{"ids": "81680", "code": ["@ Override public boolean add ( E o ) {", "if ( null == o ) {", "throw new Null Pointer Exception ( ) ; }", "if ( offer ( o ) ) {", "return true ; }", "throw new Illegal State Exception ( ) ; }"]}
{"ids": "7567", "code": ["public Standard Crosshair Label Generator ( ) {", "this ( STR_ , Number Format . get Number Instance ( ) ) ; }"]}
{"ids": "21486", "code": ["private URI create Ethernet Storage Port ( Map < String , Object > key Map , Storage Port port , String name , String port Instance ID , List < Storage Port > new Ports , List < Storage Port > existing Ports ) throws IO Exception {", "Storage Port portin Memory = ( Storage Port ) key Map . get ( port Instance ID ) ;", "if ( null == port ) {", "portin Memory . set Port Network Id ( name ) ;", "portin Memory . set Port End Point ID ( name ) ;", "String port Native Guid = Native GUID Generator . generate Native Guid ( db Client , portin Memory ) ;", "portin Memory . set Native Guid ( port Native Guid ) ;", "portin Memory . set Label ( port Native Guid ) ;", "db Client . create Object ( portin Memory ) ;", "new Ports . add ( portin Memory ) ;", "return portin Memory . get Id ( ) ; }", "else {", "port . set Port Name ( portin Memory . get Port Name ( ) ) ;", "port . set Port Speed ( portin Memory . get Port Speed ( ) ) ;", "port . set Port End Point ID ( name ) ;", "port . set Compatibility Status ( portin Memory . get Compatibility Status ( ) ) ;", "port . set Discovery Status ( portin Memory . get Discovery Status ( ) ) ;", "port . set Operational Status ( portin Memory . get Operational Status ( ) ) ;", "port . set Port Type ( portin Memory . get Port Type ( ) ) ;", "db Client . persist Object ( port ) ;", "existing Ports . add ( port ) ;", "return port . get Id ( ) ; } }"]}
{"ids": "13517", "code": ["default int add ( Item stack ) {", "int items Left = stack . count ( ) ;", "for ( int i = NUM_ ; i < size ( ) ; i ++ ) {", "items Left = add ( i , stack . with Amount ( items Left ) ) ; }", "if ( items Left != stack . count ( ) ) {", "mark Changed ( ) ; }", "return items Left ; }"]}
{"ids": "7368", "code": ["public void mark ( long n ) {", "count . add And Get ( n ) ;", "m 1 Rate . update ( n ) ;", "m 5 Rate . update ( n ) ;", "m 15 Rate . update ( n ) ; }"]}
{"ids": "74603", "code": ["public String [ ] read All Lines ( ) {", "Array List < String > lines = new Array List < String > ( ) ;", "while ( has Next Line ( ) ) {", "lines . add ( read Line ( ) ) ; }", "return lines . to Array ( new String [ NUM_ ] ) ; }"]}
{"ids": "61419", "code": ["public static boolean is Absolute Path ( String system Id ) {", "if ( system Id == null ) return false ;", "final File file = new File ( system Id ) ;", "return file . is Absolute ( ) ; }"]}
{"ids": "4592", "code": ["protected Qualified Item [ ] parse Qualified Items ( final Version Spec default Version , final boolean allow Version Range , final int start Index ) {", "return parse Qualified Items ( get Free Arguments ( ) , default Version , allow Version Range , start Index ) ; }"]}
{"ids": "33213", "code": ["public void change Change Enabled ( Change Enabled State state ) throws Refactoring Exception {", "Refactoring Session session = get Refactoring Session ( state . get Session Id ( ) ) ;", "session . update Change Enabled ( state . get Change Id ( ) , state . is Enabled ( ) ) ; }"]}
{"ids": "35589", "code": ["public Update Builder bind Uris ( String from , Collection < String > uris ) {", "return bind Uris ( from , uris , STR_ ) ; }"]}
{"ids": "8684", "code": ["private int [ ] find Nearest Area ( int pixel X , int pixel Y , int min Span X , int min Span Y , int span X , int span Y , boolean ignore Occupied , int [ ] result , int [ ] result Span ) {", "lazy Init Temp Rect Stack ( ) ;", "pixel X -= ( m Cell Width + m Width Gap ) * ( span X - NUM_ ) / NUM_ ;", "pixel Y -= ( m Cell Height + m Height Gap ) * ( span Y - NUM_ ) / NUM_ ;", "final int [ ] best XY = result != null ? result : new int [ NUM_ ] ;", "double best Distance = Double . MAX VALUE ;", "final Rect best Rect = new Rect ( - NUM_ , - NUM_ , - NUM_ , - NUM_ ) ;", "final Stack < Rect > valid Regions = new Stack < Rect > ( ) ;", "final int count X = m Count X ;", "final int count Y = m Count Y ;", "if ( min Span X <= NUM_ || min Span Y <= NUM_ || span X <= NUM_ || span Y <= NUM_ || span X < min Span X || span Y < min Span Y ) {", "return best XY ; }", "for ( int y = NUM_ ; y < count Y - ( min Span Y - NUM_ ) ; y ++ ) {", "inner : for ( int x = NUM_ ; x < count X - ( min Span X - NUM_ ) ; x ++ ) {", "int y Size = - NUM_ ;", "int x Size = - NUM_ ;", "if ( ignore Occupied ) {", "for ( int i = NUM_ ; i < min Span X ; i ++ ) {", "for ( int j = NUM_ ; j < min Span Y ; j ++ ) {", "if ( m Occupied [ x + i ] [ y + j ] ) {", "continue inner ; } } }", "x Size = min Span X ;", "y Size = min Span Y ;", "boolean inc X = true ;", "boolean hit Max X = x Size >= span X ;", "boolean hit Max Y = y Size >= span Y ;", "while ( ! ( hit Max X && hit Max Y ) ) {", "if ( inc X && ! hit Max X ) {", "for ( int j = NUM_ ; j < y Size ; j ++ ) {", "if ( x + x Size > count X - NUM_ || m Occupied [ x + x Size ] [ y + j ] ) {", "hit Max X = true ; } }", "if ( ! hit Max X ) {", "x Size ++ ; } }", "else if ( ! hit Max Y ) {", "for ( int i = NUM_ ; i < x Size ; i ++ ) {", "if ( y + y Size > count Y - NUM_ || m Occupied [ x + i ] [ y + y Size ] ) {", "hit Max Y = true ; } }", "if ( ! hit Max Y ) {", "y Size ++ ; } }", "hit Max X |= x Size >= span X ;", "hit Max Y |= y Size >= span Y ;", "inc X = ! inc X ; }", "inc X = true ;", "hit Max X = x Size >= span X ;", "hit Max Y = y Size >= span Y ; }", "final int [ ] cell XY = m Tmp Point ;", "cell To Center Point ( x , y , cell XY ) ;", "Rect current Rect = m Temp Rect Stack . pop ( ) ;", "current Rect . set ( x , y , x + x Size , y + y Size ) ;", "boolean contained = false ;", "for ( Rect r : valid Regions ) {", "if ( r . contains ( current Rect ) ) {", "contained = true ;", "break ; } }", "valid Regions . push ( current Rect ) ;", "double distance = Math . hypot ( cell XY [ NUM_ ] - pixel X , cell XY [ NUM_ ] - pixel Y ) ;", "if ( ( distance <= best Distance && ! contained ) || current Rect . contains ( best Rect ) ) {", "best Distance = distance ;", "best XY [ NUM_ ] = x ;", "best XY [ NUM_ ] = y ;", "if ( result Span != null ) {", "result Span [ NUM_ ] = x Size ;", "result Span [ NUM_ ] = y Size ; }", "best Rect . set ( current Rect ) ; } } }", "if ( best Distance == Double . MAX VALUE ) {", "best XY [ NUM_ ] = - NUM_ ;", "best XY [ NUM_ ] = - NUM_ ; }", "recycle Temp Rects ( valid Regions ) ;", "return best XY ; }"]}
{"ids": "24958", "code": ["public void validation States Removed ( K key ) {", "hide Message ( key ) ;", "validation Error States . remove ( key ) ;", "notify Upstream ( key , Collections . < Validation State > empty Set ( ) ) ; }"]}
{"ids": "77944", "code": ["public void kill Application ( String application Id ) throws IO Exception , Yarn Exception {", "log . info ( STR_ + application Id ) ;", "yarn Client . kill Application ( get Application ID From String ( application Id ) ) ; }"]}
{"ids": "5766", "code": ["public static String convert ( String prefix ) {", "String Builder sb = new String Builder ( ) ;", "prefix = prefix . replace ( STR_ , STR_ ) ;", "String [ ] lines = prefix . split ( STR_ ) ;", "for ( String line : lines ) {", "List < String > tokens = new Array List < String > ( ) ;", "char [ ] c = Unsafe String . get Chars ( line ) ;", "int lastidx = NUM_ ;", "int idx = NUM_ ;", "while ( idx < c . length ) {", "while ( c [ idx ] != STR_ && c [ idx ] != STR_ && c [ idx ] != STR_ ) {", "idx ++ ; }", "if ( idx != lastidx ) {", "tokens . add ( new String ( c , lastidx , idx - lastidx ) ) ; }", "idx ++ ;", "lastidx = idx ; }", "Collections . reverse ( tokens ) ;", "for ( String token : tokens ) {", "sb . append ( token ) ;", "sb . append ( STR_ ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "1345", "code": ["public boolean to Boolean ( Element el , String attribute Name , boolean default Value ) {", "String value = el . get Attribute ( attribute Name ) ;", "if ( value == null ) return default Value ;", "return Caster . to Boolean Value ( value , false ) ; }"]}
{"ids": "13315", "code": ["protected void serialize Pre Root ( ) throws IO Exception {", "int i ;", "if ( pre Root != null ) {", "for ( i = NUM_ ; i < pre Root . size ( ) ; ++ i ) {", "print Text ( ( String ) pre Root . element At ( i ) , true , true ) ;", "if ( indenting ) printer . break Line ( ) ; }", "pre Root . remove All Elements ( ) ; } }"]}
{"ids": "56773", "code": ["private void create Schema Column Entities ( List < Schema Column > schema Columns , boolean is Partition List , Collection < Schema Column Entity > schema Column Entity List , Map < String , Schema Column Entity > schema Column Entity Map , Business Object Format Entity business Object Format Entity ) {", "if ( ! Collection Utils . is Empty ( schema Columns ) ) {", "int position = NUM_ ;", "for ( Schema Column schema Column : schema Columns ) {", "Schema Column Entity schema Column Entity = schema Column Entity Map . get ( schema Column . get Name ( ) ) ;", "if ( schema Column Entity == null ) {", "schema Column Entity = create Schema Column Entity ( schema Column , business Object Format Entity ) ;", "schema Column Entity List . add ( schema Column Entity ) ;", "schema Column Entity Map . put ( schema Column . get Name ( ) , schema Column Entity ) ; }", "if ( is Partition List ) {", "schema Column Entity . set Partition Level ( position ++ ) ; }", "else {", "schema Column Entity . set Position ( position ++ ) ; } } } }"]}
{"ids": "42708", "code": ["public static < T > String join And ( final String delimiter , final String last Delimiter , final Collection < T > objs ) {", "if ( objs == null || objs . is Empty ( ) ) return STR_ ;", "final Iterator < T > iter = objs . iterator ( ) ;", "final String Builder buffer = new String Builder ( ) ;", "while ( iter . has Next ( ) ) {", "final T obj = iter . next ( ) ;", "if ( not Empty ( obj ) ) {", "if ( buffer . length ( ) != NUM_ ) {", "buffer . append ( iter . has Next ( ) ? delimiter : last Delimiter ) ; }", "buffer . append ( Strings . to String ( obj ) ) ; } }", "return buffer . to String ( ) ; }"]}
{"ids": "21695", "code": ["public static String generate Native Guid ( Db Client db Client , Snapshot snapshot ) throws IO Exception {", "File Share fs = db Client . query Object ( File Share . class , snapshot . get Parent ( ) ) ;", "Storage System device = db Client . query Object ( Storage System . class , fs . get Storage Device ( ) ) ;", "return String . format ( STR_ + SNAPSHOT + STR_ , device Type Map . get ( device . get System Type ( ) ) , device . get Serial Number ( ) , snapshot . get Native Id ( ) ) ; }"]}
{"ids": "79309", "code": ["public static Map < String , Object > update File ( Dispatch Context dctx , Map < String , ? extends Object > context ) {", "Map < String , Object > result = null ;", "try {", "result = update File Method ( dctx , context ) ; }", "catch ( Generic Service Exception e ) {", "return Service Util . return Error ( e . get Message ( ) ) ; }", "return result ; }"]}
{"ids": "73169", "code": ["public Edit Sensors Dialog ( final Collection < Sensor > sensors ) {", "super ( ) ;", "if ( sensors == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . sensors = sensors ;", "set Title ( STR_ + sensors . size ( ) + STR_ ) ;", "init Components ( ) ;", "layout Components ( ) ; }"]}
{"ids": "79859", "code": ["@ Visible For Testing synchronized void trim To Size ( int target Size ) {", "int bytes To Free = Math . min ( m Used . m Num Bytes + m Free . m Num Bytes - target Size , m Free . m Num Bytes ) ;", "if ( bytes To Free <= NUM_ ) {", "return ; }", "if ( F Log . is Loggable ( F Log . VERBOSE ) ) {", "F Log . v ( TAG , STR_ , target Size , m Used . m Num Bytes + m Free . m Num Bytes , bytes To Free ) ; }", "log Stats ( ) ;", "for ( int i = NUM_ ; i < m Buckets . size ( ) ; ++ i ) {", "if ( bytes To Free <= NUM_ ) {", "break ; }", "Bucket < V > bucket = m Buckets . value At ( i ) ;", "while ( bytes To Free > NUM_ ) {", "V value = bucket . pop ( ) ;", "if ( value == null ) {", "break ; }", "free ( value ) ;", "bytes To Free -= bucket . m Item Size ;", "m Free . decrement ( bucket . m Item Size ) ; } }", "log Stats ( ) ;", "if ( F Log . is Loggable ( F Log . VERBOSE ) ) {", "F Log . v ( TAG , STR_ , target Size , m Used . m Num Bytes + m Free . m Num Bytes ) ; } }"]}
{"ids": "41158", "code": ["@ Override public void add Focusables ( Array List < View > views , int direction , int focusable Mode ) {", "final int focusable Count = views . size ( ) ;", "final int descendant Focusability = get Descendant Focusability ( ) ;", "if ( descendant Focusability != FOCUS BLOCK DESCENDANTS ) {", "for ( int i = NUM_ ; i < get Child Count ( ) ; i ++ ) {", "final View child = get Child At ( i ) ;", "if ( child . get Visibility ( ) == VISIBLE ) {", "Item Info ii = info For Child ( child ) ;", "if ( ii != null && ii . position == m Cur Item ) {", "child . add Focusables ( views , direction , focusable Mode ) ; } } } }", "if ( descendant Focusability != FOCUS AFTER DESCENDANTS || ( focusable Count == views . size ( ) ) ) {", "if ( ! is Focusable ( ) ) {", "return ; }", "if ( ( focusable Mode & FOCUSABLES TOUCH MODE ) == FOCUSABLES TOUCH MODE && is In Touch Mode ( ) && ! is Focusable In Touch Mode ( ) ) {", "return ; }", "if ( views != null ) {", "views . add ( this ) ; } } }"]}
{"ids": "11486", "code": ["public String read To Delimiter ( char delim ) throws Format Exception {", "String Buffer buildretval = new String Buffer ( ) ;", "char tmp ;", "try {", "while ( ( tmp = read Char ( ) ) != delim ) buildretval . append ( tmp ) ; }", "catch ( EOF Exception e ) { }", "catch ( Format Exception fe ) {", "if ( buildretval . length ( ) == NUM_ ) {", "throw fe ; } }", "return buildretval . to String ( ) ; }"]}
{"ids": "29836", "code": ["private void add New Line At Top ( Recycler View . Recycler recycler ) {", "int x = layout Start Point ( ) . x , bottom = get Decorated Top ( get Child At ( get Max Height Layout Position In Line ( NUM_ ) ) ) , y ;", "int height = NUM_ ;", "List < View > line Children = new Linked List < > ( ) ;", "int current Adapter Position = NUM_ ;", "int end Adapter Position = get Child Adapter Position ( NUM_ ) - NUM_ ;", "Rect rect = new Rect ( ) ;", "boolean newline ;", "boolean first Item = true ;", "Layout Context layout Context = Layout Context . from Layout Options ( flow Layout Options ) ;", "int first Item Adapter Position = get Child Adapter Position ( NUM_ ) ;", "if ( cache Helper . has Previous Line Cached ( first Item Adapter Position ) ) {", "int previous Line Index = cache Helper . item Line Index ( first Item Adapter Position ) - NUM_ ;", "Line previous Line = cache Helper . get Line ( previous Line Index ) ;", "int first New Item Adapter Position = cache Helper . first Item Index ( previous Line Index ) ;", "for ( int i = NUM_ ; i < previous Line . item Count ; i ++ ) {", "View new View = recycler . get View For Position ( first New Item Adapter Position + i ) ;", "add View ( new View , i ) ;", "line Children . add ( new View ) ; }", "height = previous Line . max Height ; }", "else {", "while ( current Adapter Position <= end Adapter Position ) {", "View new Child = recycler . get View For Position ( current Adapter Position ) ;", "newline = calc Child Layout Rect ( new Child , x , NUM_ , height , layout Context , rect ) ;", "cache Helper . set Item ( current Adapter Position , new Point ( rect . width ( ) , rect . height ( ) ) ) ;", "add View ( new Child , line Children . size ( ) ) ;", "if ( newline && ! first Item ) {", "for ( View view To Recycle : line Children ) {", "remove And Recycle View ( view To Recycle , recycler ) ; }", "line Children . clear ( ) ;", "x = advance In Same Line ( layout Start Point ( ) . x , rect , layout Context ) ;", "height = rect . height ( ) ;", "layout Context . current Line Item Count = NUM_ ; }", "else {", "x = advance In Same Line ( x , rect , layout Context ) ;", "height = Math . max ( height , rect . height ( ) ) ;", "first Item = false ;", "layout Context . current Line Item Count ++ ; }", "line Children . add ( new Child ) ;", "current Adapter Position ++ ; } }", "x = layout Start Point ( ) . x ;", "y = bottom - height ;", "first Item = true ;", "layout Context = Layout Context . from Layout Options ( flow Layout Options ) ;", "for ( int i = NUM_ ; i < line Children . size ( ) ; i ++ ) {", "View child View = line Children . get ( i ) ;", "newline = calc Child Layout Rect ( child View , x , y , height , layout Context , rect ) ;", "if ( newline && first Item ) {", "int rect Height = rect . height ( ) ;", "rect . top -= rect Height ;", "rect . bottom -= rect Height ;", "first Item = false ; }", "layout Decorated ( child View , rect . left , rect . top , rect . right , rect . bottom ) ;", "x = advance In Same Line ( x , rect , layout Context ) ; } }"]}
{"ids": "43863", "code": ["protected static final String add Escapes ( String str ) {", "String Buffer retval = new String Buffer ( ) ;", "char ch ;", "for ( int i = NUM_ ; i < str . length ( ) ; i ++ ) {", "switch ( str . char At ( i ) ) {", "case NUM_ :", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "case STR_ :", "retval . append ( STR_ ) ;", "continue ;", "default :", "if ( ( ch = str . char At ( i ) ) < NUM_ || ch > NUM_ ) {", "String s = STR_ + Integer . to String ( ch , NUM_ ) ;", "retval . append ( STR_ + s . substring ( s . length ( ) - NUM_ , s . length ( ) ) ) ; }", "else {", "retval . append ( ch ) ; }", "continue ; } }", "return retval . to String ( ) ; }"]}
{"ids": "51986", "code": ["default T call ( Source Section source , T lhs , T argument 1 , T argument 2 ) {", "return call ( source , lhs , Arrays . as List ( argument ( argument 1 ) , argument ( argument 2 ) ) ) ; }"]}
{"ids": "70207", "code": ["public boolean equal Map Gen Parameters ( Map Settings other ) {", "if ( ( board Width != other . get Board Width ( ) ) || ( board Height != other . get Board Height ( ) ) || ( map Width != other . get Map Width ( ) ) || ( map Height != other . get Map Height ( ) ) || ( invert Negative Terrain != other . get Invert Negative Terrain ( ) ) || ( hilliness != other . get Hilliness ( ) ) || ( cliffs != other . get Cliffs ( ) ) || ( range != other . get Range ( ) ) || ( min Water Spots != other . get Min Water Spots ( ) ) || ( max Water Spots != other . get Max Water Spots ( ) ) || ( min Water Size != other . get Min Water Size ( ) ) || ( max Water Size != other . get Max Water Size ( ) ) || ( prob Deep != other . get Prob Deep ( ) ) || ( min Forest Spots != other . get Min Forest Spots ( ) ) || ( max Forest Spots != other . get Max Forest Spots ( ) ) || ( min Forest Size != other . get Min Forest Size ( ) ) || ( max Forest Size != other . get Max Forest Size ( ) ) || ( prob Heavy != other . get Prob Heavy ( ) ) || ( min Rough Spots != other . get Min Rough Spots ( ) ) || ( max Rough Spots != other . get Max Rough Spots ( ) ) || ( min Rough Size != other . get Min Rough Size ( ) ) || ( max Rough Size != other . get Max Rough Size ( ) ) || ( min Sand Spots != other . get Min Sand Spots ( ) ) || ( max Sand Spots != other . get Max Sand Spots ( ) ) || ( min Sand Size != other . get Min Sand Size ( ) ) || ( max Sand Size != other . get Max Sand Size ( ) ) || ( min Planted Field Spots != other . get Min Planted Field Spots ( ) ) || ( max Planted Field Spots != other . get Max Planted Field Spots ( ) ) || ( min Planted Field Size != other . get Min Planted Field Size ( ) ) || ( max Planted Field Size != other . get Max Planted Field Size ( ) ) || ( min Swamp Spots != other . get Min Swamp Spots ( ) ) || ( max Swamp Spots != other . get Max Swamp Spots ( ) ) || ( min Swamp Size != other . get Min Swamp Size ( ) ) || ( max Swamp Size != other . get Max Swamp Size ( ) ) || ( min Pavement Spots != other . get Min Pavement Spots ( ) ) || ( max Pavement Spots != other . get Max Pavement Spots ( ) ) || ( min Pavement Size != other . get Min Pavement Size ( ) ) || ( max Pavement Size != other . get Max Pavement Size ( ) ) || ( min Rubble Spots != other . get Min Rubble Spots ( ) ) || ( max Rubble Spots != other . get Max Rubble Spots ( ) ) || ( min Rubble Size != other . get Min Rubble Size ( ) ) || ( max Rubble Size != other . get Max Rubble Size ( ) ) || ( min Fortified Spots != other . get Min Fortified Spots ( ) ) || ( max Fortified Spots != other . get Max Fortified Spots ( ) ) || ( min Fortified Size != other . get Min Fortified Size ( ) ) || ( max Fortified Size != other . get Max Fortified Size ( ) ) || ( min Ice Spots != other . get Min Ice Spots ( ) ) || ( max Ice Spots != other . get Max Ice Spots ( ) ) || ( min Ice Size != other . get Min Ice Size ( ) ) || ( max Ice Size != other . get Max Ice Size ( ) ) || ( prob Road != other . get Prob Road ( ) ) || ( prob Invert != other . get Prob Invert ( ) ) || ( prob River != other . get Prob River ( ) ) || ( prob Crater != other . get Prob Crater ( ) ) || ( min Radius != other . get Min Radius ( ) ) || ( max Radius != other . get Max Radius ( ) ) || ( min Craters != other . get Min Craters ( ) ) || ( max Craters != other . get Max Craters ( ) ) || ( ! theme . equals ( other . get Theme ( ) ) ) || ( fx Mod != other . get Fx Mod ( ) ) || ( city Blocks != other . get City Blocks ( ) ) || ( city Type != other . get City Type ( ) ) || ( city Min CF != other . get City Min CF ( ) ) || ( city Max CF != other . get City Max CF ( ) ) || ( city Min Floors != other . get City Min Floors ( ) ) || ( city Max Floors != other . get City Max Floors ( ) ) || ( city Density != other . get City Density ( ) ) || ( prob Flood != other . get Prob Flood ( ) ) || ( prob Forest Fire != other . get Prob Forest Fire ( ) ) || ( prob Freeze != other . get Prob Freeze ( ) ) || ( prob Drought != other . get Prob Drought ( ) ) || ( algorithm To Use != other . get Algorithm To Use ( ) ) || ( mountain Height Min != other . get Mountain Height Min ( ) ) || ( mountain Height Max != other . get Mountain Height Max ( ) ) || ( mountain Peaks != other . get Mountain Peaks ( ) ) || ( mountain Style != other . get Mountain Style ( ) ) || ( mountain Width Min != other . get Mountain Width Min ( ) ) || ( mountain Width Max != other . get Mountain Width Max ( ) ) || ( board Buildings != other . get Board Buildings ( ) ) ) {", "return false ; }", "return true ; }"]}
{"ids": "31604", "code": ["public synchronized void curl ( Point F curl Pos , Point F curl Dir , double radius ) {", "if ( DRAW CURL POSITION ) {", "m Buf Curl Position Lines . position ( NUM_ ) ;", "m Buf Curl Position Lines . put ( curl Pos . x ) ;", "m Buf Curl Position Lines . put ( curl Pos . y - NUM_ ) ;", "m Buf Curl Position Lines . put ( curl Pos . x ) ;", "m Buf Curl Position Lines . put ( curl Pos . y + NUM_ ) ;", "m Buf Curl Position Lines . put ( curl Pos . x - NUM_ ) ;", "m Buf Curl Position Lines . put ( curl Pos . y ) ;", "m Buf Curl Position Lines . put ( curl Pos . x + NUM_ ) ;", "m Buf Curl Position Lines . put ( curl Pos . y ) ;", "m Buf Curl Position Lines . put ( curl Pos . x ) ;", "m Buf Curl Position Lines . put ( curl Pos . y ) ;", "m Buf Curl Position Lines . put ( curl Pos . x + curl Dir . x * NUM_ ) ;", "m Buf Curl Position Lines . put ( curl Pos . y + curl Dir . y * NUM_ ) ;", "m Buf Curl Position Lines . position ( NUM_ ) ; }", "m Buf Vertices . position ( NUM_ ) ;", "m Buf Colors . position ( NUM_ ) ;", "if ( DRAW TEXTURE ) {", "m Buf Tex Coords . position ( NUM_ ) ; }", "double curl Angle = Math . acos ( curl Dir . x ) ;", "curl Angle = curl Dir . y > NUM_ ? - curl Angle : curl Angle ;", "m Arr Temp Vertices . add All ( m Arr Rotated Vertices ) ;", "m Arr Rotated Vertices . clear ( ) ;", "for ( int i = NUM_ ; i < NUM_ ; ++ i ) {", "Vertex v = m Arr Temp Vertices . remove ( NUM_ ) ;", "v . set ( m Rectangle [ i ] ) ;", "v . translate ( - curl Pos . x , - curl Pos . y ) ;", "v . rotate Z ( - curl Angle ) ;", "int j = NUM_ ;", "for ( ; j < m Arr Rotated Vertices . size ( ) ; ++ j ) {", "Vertex v 2 = m Arr Rotated Vertices . get ( j ) ;", "if ( v . m Pos X > v 2 . m Pos X ) {", "break ; }", "if ( v . m Pos X == v 2 . m Pos X && v . m Pos Y > v 2 . m Pos Y ) {", "break ; } }", "m Arr Rotated Vertices . add ( j , v ) ; }", "int lines [ ] [ ] = { { NUM_ , NUM_ } , { NUM_ , NUM_ } , { NUM_ , NUM_ } , { NUM_ , NUM_ } } ; {", "Vertex v 0 = m Arr Rotated Vertices . get ( NUM_ ) ;", "Vertex v 2 = m Arr Rotated Vertices . get ( NUM_ ) ;", "Vertex v 3 = m Arr Rotated Vertices . get ( NUM_ ) ;", "double dist 2 = Math . sqrt ( ( v 0 . m Pos X - v 2 . m Pos X ) * ( v 0 . m Pos X - v 2 . m Pos X ) + ( v 0 . m Pos Y - v 2 . m Pos Y ) * ( v 0 . m Pos Y - v 2 . m Pos Y ) ) ;", "double dist 3 = Math . sqrt ( ( v 0 . m Pos X - v 3 . m Pos X ) * ( v 0 . m Pos X - v 3 . m Pos X ) + ( v 0 . m Pos Y - v 3 . m Pos Y ) * ( v 0 . m Pos Y - v 3 . m Pos Y ) ) ;", "if ( dist 2 > dist 3 ) {", "lines [ NUM_ ] [ NUM_ ] = NUM_ ;", "lines [ NUM_ ] [ NUM_ ] = NUM_ ; } }", "m Vertices Count Front = m Vertices Count Back = NUM_ ;", "if ( DRAW SHADOW ) {", "m Arr Temp Shadow Vertices . add All ( m Arr Drop Shadow Vertices ) ;", "m Arr Temp Shadow Vertices . add All ( m Arr Self Shadow Vertices ) ;", "m Arr Drop Shadow Vertices . clear ( ) ;", "m Arr Self Shadow Vertices . clear ( ) ; }", "double curl Length = Math . PI * radius ;", "m Arr Scan Lines . clear ( ) ;", "if ( m Max Curl Splits > NUM_ ) {", "m Arr Scan Lines . add ( ( double ) NUM_ ) ; }", "for ( int i = NUM_ ; i < m Max Curl Splits ; ++ i ) {", "m Arr Scan Lines . add ( ( - curl Length * i ) / ( m Max Curl Splits - NUM_ ) ) ; }", "m Arr Scan Lines . add ( m Arr Rotated Vertices . get ( NUM_ ) . m Pos X - NUM_ ) ;", "double scan Xmax = m Arr Rotated Vertices . get ( NUM_ ) . m Pos X + NUM_ ;", "for ( int i = NUM_ ; i < m Arr Scan Lines . size ( ) ; ++ i ) {", "double scan Xmin = m Arr Scan Lines . get ( i ) ;", "for ( int j = NUM_ ; j < m Arr Rotated Vertices . size ( ) ; ++ j ) {", "Vertex v = m Arr Rotated Vertices . get ( j ) ;", "if ( v . m Pos X >= scan Xmin && v . m Pos X <= scan Xmax ) {", "Vertex n = m Arr Temp Vertices . remove ( NUM_ ) ;", "n . set ( v ) ;", "Array < Vertex > intersections = get Intersections ( m Arr Rotated Vertices , lines , n . m Pos X ) ;", "if ( intersections . size ( ) == NUM_ && intersections . get ( NUM_ ) . m Pos Y > v . m Pos Y ) {", "m Arr Output Vertices . add All ( intersections ) ;", "m Arr Output Vertices . add ( n ) ; }", "else if ( intersections . size ( ) <= NUM_ ) {", "m Arr Output Vertices . add ( n ) ;", "m Arr Output Vertices . add All ( intersections ) ; }", "else {", "m Arr Temp Vertices . add ( n ) ;", "m Arr Temp Vertices . add All ( intersections ) ; } } }", "Array < Vertex > intersections = get Intersections ( m Arr Rotated Vertices , lines , scan Xmin ) ;", "if ( intersections . size ( ) == NUM_ ) {", "Vertex v 1 = intersections . get ( NUM_ ) ;", "Vertex v 2 = intersections . get ( NUM_ ) ;", "if ( v 1 . m Pos Y < v 2 . m Pos Y ) {", "m Arr Output Vertices . add ( v 2 ) ;", "m Arr Output Vertices . add ( v 1 ) ; }", "else {", "m Arr Output Vertices . add All ( intersections ) ; } }", "else if ( intersections . size ( ) != NUM_ ) {", "m Arr Temp Vertices . add All ( intersections ) ; }", "while ( m Arr Output Vertices . size ( ) > NUM_ ) {", "Vertex v = m Arr Output Vertices . remove ( NUM_ ) ;", "m Arr Temp Vertices . add ( v ) ;", "boolean texture Front ;", "if ( i == NUM_ ) {", "texture Front = true ;", "m Vertices Count Front ++ ; }", "else if ( i == m Arr Scan Lines . size ( ) - NUM_ || curl Length == NUM_ ) {", "v . m Pos X = - ( curl Length + v . m Pos X ) ;", "v . m Pos Z = NUM_ * radius ;", "v . m Penumbra X = - v . m Penumbra X ;", "texture Front = false ;", "m Vertices Count Back ++ ; }", "else {", "double rot Y = Math . PI * ( v . m Pos X / curl Length ) ;", "v . m Pos X = radius * Math . sin ( rot Y ) ;", "v . m Pos Z = radius - ( radius * Math . cos ( rot Y ) ) ;", "v . m Penumbra X *= Math . cos ( rot Y ) ;", "v . m Color Factor = ( float ) ( NUM_ + NUM_ * Math . sqrt ( Math . sin ( rot Y ) + NUM_ ) ) ;", "if ( v . m Pos Z >= radius ) {", "texture Front = false ;", "m Vertices Count Back ++ ; }", "else {", "texture Front = true ;", "m Vertices Count Front ++ ; } }", "if ( texture Front != m Flip Texture ) {", "v . m Tex X *= m Texture Rect Front . right ;", "v . m Tex Y *= m Texture Rect Front . bottom ;", "v . m Color = m Texture Page . get Color ( Curl Page . SIDE FRONT ) ; }", "else {", "v . m Tex X *= m Texture Rect Back . right ;", "v . m Tex Y *= m Texture Rect Back . bottom ;", "v . m Color = m Texture Page . get Color ( Curl Page . SIDE BACK ) ; }", "v . rotate Z ( curl Angle ) ;", "v . translate ( curl Pos . x , curl Pos . y ) ;", "add Vertex ( v ) ;", "if ( DRAW SHADOW && v . m Pos Z > NUM_ && v . m Pos Z <= radius ) {", "Shadow Vertex sv = m Arr Temp Shadow Vertices . remove ( NUM_ ) ;", "sv . m Pos X = v . m Pos X ;", "sv . m Pos Y = v . m Pos Y ;", "sv . m Pos Z = v . m Pos Z ;", "sv . m Penumbra X = ( v . m Pos Z / NUM_ ) * - curl Dir . x ;", "sv . m Penumbra Y = ( v . m Pos Z / NUM_ ) * - curl Dir . y ;", "sv . m Penumbra Color = v . m Pos Z / radius ;", "int idx = ( m Arr Drop Shadow Vertices . size ( ) + NUM_ ) / NUM_ ;", "m Arr Drop Shadow Vertices . add ( idx , sv ) ; }", "if ( DRAW SHADOW && v . m Pos Z > radius ) {", "Shadow Vertex sv = m Arr Temp Shadow Vertices . remove ( NUM_ ) ;", "sv . m Pos X = v . m Pos X ;", "sv . m Pos Y = v . m Pos Y ;", "sv . m Pos Z = v . m Pos Z ;", "sv . m Penumbra X = ( ( v . m Pos Z - radius ) / NUM_ ) * v . m Penumbra X ;", "sv . m Penumbra Y = ( ( v . m Pos Z - radius ) / NUM_ ) * v . m Penumbra Y ;", "sv . m Penumbra Color = ( v . m Pos Z - radius ) / ( NUM_ * radius ) ;", "int idx = ( m Arr Self Shadow Vertices . size ( ) + NUM_ ) / NUM_ ;", "m Arr Self Shadow Vertices . add ( idx , sv ) ; } }", "scan Xmax = scan Xmin ; }", "m Buf Vertices . position ( NUM_ ) ;", "m Buf Colors . position ( NUM_ ) ;", "if ( DRAW TEXTURE ) {", "m Buf Tex Coords . position ( NUM_ ) ; }", "if ( DRAW SHADOW ) {", "m Buf Shadow Colors . position ( NUM_ ) ;", "m Buf Shadow Vertices . position ( NUM_ ) ;", "m Drop Shadow Count = NUM_ ;", "for ( int i = NUM_ ; i < m Arr Drop Shadow Vertices . size ( ) ; ++ i ) {", "Shadow Vertex sv = m Arr Drop Shadow Vertices . get ( i ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos X ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos Y ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos Z ) ;", "m Buf Shadow Vertices . put ( ( float ) ( sv . m Pos X + sv . m Penumbra X ) ) ;", "m Buf Shadow Vertices . put ( ( float ) ( sv . m Pos Y + sv . m Penumbra Y ) ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos Z ) ;", "for ( int j = NUM_ ; j < NUM_ ; ++ j ) {", "double color = SHADOW OUTER COLOR [ j ] + ( SHADOW INNER COLOR [ j ] - SHADOW OUTER COLOR [ j ] ) * sv . m Penumbra Color ;", "m Buf Shadow Colors . put ( ( float ) color ) ; }", "m Buf Shadow Colors . put ( SHADOW OUTER COLOR ) ;", "m Drop Shadow Count += NUM_ ; }", "m Self Shadow Count = NUM_ ;", "for ( int i = NUM_ ; i < m Arr Self Shadow Vertices . size ( ) ; ++ i ) {", "Shadow Vertex sv = m Arr Self Shadow Vertices . get ( i ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos X ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos Y ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos Z ) ;", "m Buf Shadow Vertices . put ( ( float ) ( sv . m Pos X + sv . m Penumbra X ) ) ;", "m Buf Shadow Vertices . put ( ( float ) ( sv . m Pos Y + sv . m Penumbra Y ) ) ;", "m Buf Shadow Vertices . put ( ( float ) sv . m Pos Z ) ;", "for ( int j = NUM_ ; j < NUM_ ; ++ j ) {", "double color = SHADOW OUTER COLOR [ j ] + ( SHADOW INNER COLOR [ j ] - SHADOW OUTER COLOR [ j ] ) * sv . m Penumbra Color ;", "m Buf Shadow Colors . put ( ( float ) color ) ; }", "m Buf Shadow Colors . put ( SHADOW OUTER COLOR ) ;", "m Self Shadow Count += NUM_ ; }", "m Buf Shadow Colors . position ( NUM_ ) ;", "m Buf Shadow Vertices . position ( NUM_ ) ; } }"]}
{"ids": "78706", "code": ["public void save Lock Password ( String password , int quality , boolean is Fallback ) {", "final byte [ ] hash = password To Hash ( password ) ;", "try {", "Random Access File raf = new Random Access File ( s Lock Password Filename , STR_ ) ;", "try {", "if ( password == null ) {", "raf . set Length ( NUM_ ) ; }", "else {", "raf . write ( hash , NUM_ , hash . length ) ; } }", "finally {", "if ( raf != null ) raf . close ( ) ; } }", "catch ( File Not Found Exception fnfe ) {", "Log Util . e ( TAG , STR_ + s Lock Password Filename ) ; }", "catch ( IO Exception ioe ) {", "Log Util . e ( TAG , STR_ + s Lock Password Filename ) ; } }"]}
{"ids": "50489", "code": ["public boolean check Username Exists ( String username ) throws Data Access Exception {", "return get User Info ( username ) != null ; }"]}
{"ids": "31496", "code": ["public Code 39 Reader ( ) {", "using Check Digit = false ;", "extended Mode = false ; }"]}
{"ids": "10033", "code": ["public static String encode ( final List < Position > path , int precision ) {", "long last Lat = NUM_ ;", "long last Lng = NUM_ ;", "final String Buffer result = new String Buffer ( ) ;", "double factor = Math . pow ( NUM_ , precision ) ;", "for ( final Position point : path ) {", "long lat = Math . round ( point . get Latitude ( ) * factor ) ;", "long lng = Math . round ( point . get Longitude ( ) * factor ) ;", "long d Lat = lat - last Lat ;", "long d Lng = lng - last Lng ;", "encode ( d Lat , result ) ;", "encode ( d Lng , result ) ;", "last Lat = lat ;", "last Lng = lng ; }", "return result . to String ( ) ; }"]}
{"ids": "20604", "code": ["public Activity Resolve Info ( Resolve Info resolve Info ) {", "this . resolve Info = resolve Info ; }"]}
{"ids": "4995", "code": ["@ Override public int compare To ( Lib Package p other ) {", "return pkg name . compare To Ignore Case ( p other . pkg name ) ; }"]}
{"ids": "77852", "code": ["public void write Exif ( Bitmap bmap , String exif Out File Name ) throws File Not Found Exception , IO Exception {", "if ( bmap == null || exif Out File Name == null ) {", "throw new Illegal Argument Exception ( NULL ARGUMENT STRING ) ; }", "Output Stream s = null ;", "try {", "s = get Exif Writer Stream ( exif Out File Name ) ;", "bmap . compress ( Bitmap . Compress Format . JPEG , NUM_ , s ) ;", "s . flush ( ) ; }", "catch ( IO Exception e ) {", "close Silently ( s ) ;", "throw e ; }", "s . close ( ) ; }"]}
{"ids": "52096", "code": ["public double entropy ( int [ ] x ) {", "double h = NUM_ ;", "int n = x . length ;", "double ln 2 = Math . log ( NUM_ ) ;", "int n 0 = NUM_ ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "if ( x [ i ] == NUM_ ) {", "n 0 ++ ; } }", "double p ;", "if ( n 0 == NUM_ || n 0 == n ) {", "return h ; }", "else {", "p = ( double ) n 0 / ( double ) n ;", "h = - ( p * Math . log ( p ) + ( NUM_ - p ) * Math . log ( NUM_ - p ) ) / ln 2 ; }", "return h ; }"]}
{"ids": "54697", "code": ["private String [ ] addto Selection Args ( final String arg Value , final String [ ] selection Args In ) {", "String [ ] selection Args = selection Args In ;", "List < String > selection Args List = new Array List < > ( ) ;", "selection Args List . add ( arg Value ) ;", "if ( null != selection Args In ) {", "for ( final String arg : selection Args In ) {", "selection Args List . add ( arg ) ; } }", "selection Args = selection Args List . to Array ( new String [ NUM_ ] ) ;", "selection Args List . clear ( ) ;", "selection Args List = null ;", "return selection Args ; }"]}
{"ids": "20899", "code": ["public void put ( String sample , String attribute , Object value ) {", "if ( ! sample Order . contains ( sample ) ) sample Order . add ( sample ) ;", "if ( ! attribute Order . contains ( attribute ) ) attribute Order . add ( attribute ) ;", "table . put ( sample , attribute , value ) ; }"]}
{"ids": "68054", "code": ["public boolean is Compacted ( ) {", "return compacted ; }"]}
{"ids": "80239", "code": ["protected void center ( ) {", "Container parent = get Parent ( ) ;", "final Dimension size = get Preferred Size ( ) ;", "set Bounds ( ( parent . get Width ( ) - size . width ) / NUM_ , ( parent . get Height ( ) - size . height ) / NUM_ , size . width , size . height ) ; }"]}
{"ids": "70873", "code": ["public boolean is Card Dismissible ( String tag ) {", "return m Dismissible Cards . contains ( tag ) ; }"]}
{"ids": "47681", "code": ["public void write ( char cbuf [ ] , int off , int len ) throws IO Exception {", "se . write ( cbuf , off , len ) ; }"]}
{"ids": "14837", "code": ["public boolean validate ( String telephone ) {", "char a Char ;", "String Builder buf = new String Builder ( telephone ) ;", "for ( int a Index = NUM_ ; a Index < buf . length ( ) ; a Index ++ ) {", "a Char = buf . char At ( a Index ) ;", "if ( ! Character . is Space Char ( a Char ) ) {", "if ( ! Character . is Digit ( a Char ) && ! is Valid Telephone Chars ( a Char ) ) {", "return false ; } } }", "return true ; }"]}
{"ids": "51915", "code": ["public static void unpack ( Hash Map < String , Object > object , String key , Object value ) {", "String [ ] split = key . split ( STR_ ) ;", "Hash Map lobj = object ;", "for ( int cur = NUM_ ; cur < split . length ; cur ++ ) {", "String current = split [ cur ] ;", "if ( ! ( lobj . contains Key ( current ) && lobj . get ( current ) instanceof Hash Map ) ) {", "lobj . put ( current , new Hash Map < String , Object > ( ) ) ; }", "if ( cur == split . length - NUM_ ) {", "lobj . put ( current , value ) ; }", "else lobj = ( Hash Map ) lobj . get ( current ) ; } }"]}
{"ids": "55824", "code": ["public void remove Listener ( DNS Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "41983", "code": ["static Set < String > parse Resource Path Params ( String resource Path ) {", "Matcher matcher = PARAM URL REGEX . matcher ( resource Path ) ;", "Set < String > patterns = new Linked Hash Set < > ( ) ;", "while ( matcher . find ( ) ) {", "patterns . add ( matcher . group ( NUM_ ) ) ; }", "return patterns ; }"]}
{"ids": "60601", "code": ["@ Override public void close ( ) throws IO Exception {", "if ( logger != null ) {", "logger . println ( STR_ + socket was closed ) ; }", "if ( ! socket was closed ) {", "if ( handshake started ) {", "alert Protocol . alert ( Alert Protocol . WARNING , Alert Protocol . CLOSE NOTIFY ) ;", "try {", "output . write ( alert Protocol . wrap ( ) ) ; }", "catch ( IO Exception ex ) { }", "alert Protocol . set Processed ( ) ; }", "shutdown ( ) ;", "close Transport Layer ( ) ;", "socket was closed = true ; } }"]}
{"ids": "757", "code": ["public J Range Slider ( Bounded Range Model model , int orientation , int direction ) {", "super . set Focusable ( true ) ;", "this . model = model ;", "this . orientation = orientation ;", "this . direction = direction ;", "set Foreground ( Color . LIGHT GRAY ) ;", "this . lstnr = create Listener ( ) ;", "model . add Change Listener ( lstnr ) ;", "add Mouse Listener ( this ) ;", "add Mouse Motion Listener ( this ) ;", "add Key Listener ( this ) ; }"]}
{"ids": "3690", "code": ["public boolean can Read ( String path ) {", "try {", "Zip Entry entry = get Zip Entry ( path ) ;", "return entry != null && ! entry . is Directory ( ) ; }", "catch ( IO Exception e ) {", "log . log ( Level . FINE , e . to String ( ) , e ) ;", "return false ; } }"]}
{"ids": "61411", "code": ["public boolean equals ( Object p test ) {", "if ( p test instanceof URI ) {", "URI test URI = ( URI ) p test ;", "if ( ( ( m scheme == null && test URI . m scheme == null ) || ( m scheme != null && test URI . m scheme != null && m scheme . equals ( test URI . m scheme ) ) ) && ( ( m userinfo == null && test URI . m userinfo == null ) || ( m userinfo != null && test URI . m userinfo != null && m userinfo . equals ( test URI . m userinfo ) ) ) && ( ( m host == null && test URI . m host == null ) || ( m host != null && test URI . m host != null && m host . equals ( test URI . m host ) ) ) && m port == test URI . m port && ( ( m path == null && test URI . m path == null ) || ( m path != null && test URI . m path != null && m path . equals ( test URI . m path ) ) ) && ( ( m query String == null && test URI . m query String == null ) || ( m query String != null && test URI . m query String != null && m query String . equals ( test URI . m query String ) ) ) && ( ( m fragment == null && test URI . m fragment == null ) || ( m fragment != null && test URI . m fragment != null && m fragment . equals ( test URI . m fragment ) ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "72435", "code": ["public ISAAC Random ( ) {", "set Seed ( System . current Time Millis ( ) + System . identity Hash Code ( this ) ) ; }"]}
{"ids": "37436", "code": ["public static boolean is MD 5 String ( final String string ) {", "Preconditions . check Not Null ( string , STR_ ) ;", "return ( string . length ( ) == NUM_ ) && is Hex String ( string ) ; }"]}
{"ids": "5949", "code": ["public synchronized void wait For Submitted Tasks ( ) throws Interrupted Exception {", "while ( current Task Count . get ( ) > NUM_ ) {", "wait For Single Task ( ) ; } }"]}
{"ids": "47260", "code": ["private int scan Token ( int start Pos ) {", "int position = start Pos ;", "while ( position < max Position ) {", "if ( ! has Surrogates ) {", "char c = str . char At ( position ) ;", "if ( ( c <= max Delim Code Point ) && ( delimiters . index Of ( c ) >= NUM_ ) ) break ;", "position ++ ; }", "else {", "int c = str . code Point At ( position ) ;", "if ( ( c <= max Delim Code Point ) && is Delimiter ( c ) ) break ;", "position += Character . char Count ( c ) ; } }", "if ( ret Delims && ( start Pos == position ) ) {", "if ( ! has Surrogates ) {", "char c = str . char At ( position ) ;", "if ( ( c <= max Delim Code Point ) && ( delimiters . index Of ( c ) >= NUM_ ) ) position ++ ; }", "else {", "int c = str . code Point At ( position ) ;", "if ( ( c <= max Delim Code Point ) && is Delimiter ( c ) ) position += Character . char Count ( c ) ; } }", "return position ; }"]}
{"ids": "17352", "code": ["public void zoom At ( double x , double y , double z , double zoom Value ) {", "double [ ] diff = { target Xoff - x , target Yoff - y , z - target Zoff } ;", "double length = Math . sqrt ( diff [ NUM_ ] * diff [ NUM_ ] + diff [ NUM_ ] * diff [ NUM_ ] + diff [ NUM_ ] * diff [ NUM_ ] ) ;", "if ( length == NUM_ ) {", "length = NUM_ ; }", "double [ ] normalized = { diff [ NUM_ ] / length , diff [ NUM_ ] / length , diff [ NUM_ ] / length } ;", "double percent = zoom Value / normalized [ NUM_ ] ;", "move To Position ( - ( float ) ( target Xoff + normalized [ NUM_ ] * percent ) , - ( float ) ( target Yoff + normalized [ NUM_ ] * percent ) ) ;", "zoom To Camera ( ( float ) ( target Zoff + normalized [ NUM_ ] * percent ) ) ; }"]}
{"ids": "27191", "code": ["private static int string To Hash ( String s ) {", "int len = s . length ( ) ;", "int hash 2 = NUM_ ;", "int hash = len ;", "hash <<= NUM_ ;", "hash += s . char At ( NUM_ ) - NUM_ ;", "int j = len ;", "for ( int i = NUM_ ; i < NUM_ && j > NUM_ ; i ++ ) {", "j -- ;", "hash <<= NUM_ ;", "hash += s . char At ( j ) - NUM_ ;", "hash 2 <<= NUM_ ;", "hash 2 += s . char At ( i ) - NUM_ ; }", "return hash ^ hash 2 ; }"]}
{"ids": "16714", "code": ["public void register Dense Features ( Array List < Feature Function > feature Functions ) {", "for ( Feature Function feature : feature Functions ) {", "Array List < String > names = feature . report Dense Features ( dense Features . size ( ) ) ;", "for ( String name : names ) {", "DENSE FEATURE NAMES . add ( name ) ;", "dense Features . add ( get Sparse ( name ) ) ;", "sparse Features . remove ( name ) ; } } }"]}
{"ids": "81215", "code": ["private void add Flag ( final List < String > args , final String arg Name , final boolean value ) {", "if ( value ) {", "args . add ( arg Name ) ; } }"]}
{"ids": "9594", "code": ["public static Private Key load ( Input Stream is ) throws IO Exception , Crypto Exception {", "byte [ ] pvk = Read Util . read Fully ( is ) ;", "Byte Buffer bb = Byte Buffer . wrap ( pvk ) ;", "bb . order ( Byte Order . LITTLE ENDIAN ) ;", "long key Type = read Reserved Magic Key Type ( bb ) ;", "long encrypted = Unsigned Util . get Int ( bb ) ;", "if ( encrypted != PVK UNENCRYPTED ) {", "throw new Private Key Encrypted Exception ( Message Format . format ( res . get String ( STR_ ) , Long . to Hex String ( encrypted ) , Long . to Hex String ( PVK UNENCRYPTED ) ) ) ; }", "long salt Length = Unsigned Util . get Int ( bb ) ;", "if ( salt Length != UNENCRYPTED SALT LENGTH ) {", "throw new Crypto Exception ( Message Format . format ( res . get String ( STR_ ) , Long . to Hex String ( salt Length ) , Long . to Hex String ( UNENCRYPTED SALT LENGTH ) ) ) ; }", "long key Length = Unsigned Util . get Int ( bb ) ;", "read Private Key Blob Header ( bb , key Type ) ;", "byte [ ] private Key Blob = new byte [ bb . remaining ( ) ] ;", "bb . get ( private Key Blob ) ;", "if ( key Length != ( private Key Blob . length + BLOB HEADER LENGTH ) ) {", "throw new Crypto Exception ( Message Format . format ( res . get String ( STR_ ) , Long . to Hex String ( key Length ) , Long . to Hex String ( private Key Blob . length + BLOB HEADER LENGTH ) ) ) ; }", "return blob To Private Key ( private Key Blob ) ; }"]}
{"ids": "34187", "code": ["public static byte [ ] key Gen Private ( byte [ ] random Bytes ) throws No Such Algorithm Exception , Digest Exception {", "if ( random Bytes . length < NUM_ ) {", "throw new Runtime Exception ( STR_ ) ; }", "Message Digest digest = Message Digest . get Instance ( STR_ ) ;", "digest . digest ( random Bytes , NUM_ , random Bytes . length ) ;", "byte [ ] private Key = digest . digest ( ) ;", "private Key [ NUM_ ] &= NUM_ ;", "private Key [ NUM_ ] &= NUM_ ;", "private Key [ NUM_ ] |= NUM_ ;", "return private Key ; }"]}
{"ids": "32398", "code": ["private boolean is Checkpoint Table Exists ( Connection conn ) {", "Statement st = null ;", "Result Set rs = null ;", "try {", "st = conn . create Statement ( ) ;", "rs = st . execute Query ( chk Tbl Exists Sql ) ;", "return true ; }", "catch ( SQL Exception ignored ) {", "return false ; }", "finally {", "U . close ( rs , log ) ;", "U . close ( st , log ) ; } }"]}
{"ids": "20105", "code": ["public Function Table Model ( ) {", "column List . add ( Localisation . get String ( Function Table Model . class , STR_ ) ) ;", "column List . add ( Localisation . get String ( Function Table Model . class , STR_ ) ) ;", "column List . add ( Localisation . get String ( Function Table Model . class , STR_ ) ) ;", "column List . add ( Localisation . get String ( Function Table Model . class , STR_ ) ) ; }"]}
{"ids": "21202", "code": ["private New Cookie create Ws Cookie ( String cookie Name , String token , boolean set Max Age , String user Agent ) {", "String ie Expires = STR_ ;", "int max Age = set Max Age ? token Manager . get Max Token Life Time In Secs ( ) : New Cookie . DEFAULT MAX AGE ;", "if ( set Max Age && String Utils . contains ( user Agent , STR_ ) ) {", "ie Expires = STR_ + get Expired Time GMT ( max Age ) ;", "log . debug ( STR_ + ie Expires ) ; }", "if ( token != null && ! token . is Empty ( ) ) {", "return new New Cookie ( cookie Name , token + STR_ + ie Expires , null , null , null , max Age , true ) ; }", "return null ; }"]}
{"ids": "40742", "code": ["protected void init View ( ) {", "p . set Fake Bold Text ( false ) ;", "p . set Anti Alias ( true ) ;", "p . set Text Size ( MINI DAY NUMBER TEXT SIZE ) ;", "p . set Style ( Style . FILL ) ;", "m Month Num Paint = new Paint ( ) ;", "m Month Num Paint . set Fake Bold Text ( true ) ;", "m Month Num Paint . set Anti Alias ( true ) ;", "m Month Num Paint . set Text Size ( MINI DAY NUMBER TEXT SIZE ) ;", "m Month Num Paint . set Color ( m Focus Month Color ) ;", "m Month Num Paint . set Style ( Style . FILL ) ;", "m Month Num Paint . set Text Align ( Align . CENTER ) ; }"]}
{"ids": "17595", "code": ["Scheduled Future Task ( Runnable r , V result , long ns , long period ) {", "super ( r , result ) ;", "this . time = ns ;", "this . period = period ;", "this . sequence Number = sequencer . get And Increment ( ) ; }"]}
{"ids": "61048", "code": ["public boolean verify ( X 509 Certificate cert , Provider sig Provider ) throws No Such Algorithm Exception , Certificate Expired Exception , Certificate Not Yet Valid Exception , CMS Exception {", "Time signing Time = get Signing Time ( ) ;", "if ( signing Time != null ) {", "cert . check Validity ( signing Time . get Date ( ) ) ; }", "return do Verify ( cert . get Public Key ( ) , sig Provider ) ; }"]}
{"ids": "6826", "code": ["public Geo Mark analyse ( final String text , final String [ ] tags , final int maxlength , final String salt ) {", "Geo Location loc = geocode ( text , tags , maxlength ) ;", "if ( loc != null ) return new Geo Mark ( loc , salt ) ;", "return reverse geocode ( text ) ; }"]}
{"ids": "11333", "code": ["public void find And Init ( Iterator it ) {", "while ( it . has Next ( ) ) {", "find And Init ( it . next ( ) ) ; } }"]}
{"ids": "26845", "code": ["private static String format To 2 Digits ( String str ) {", "if ( str . length ( ) < NUM_ ) {", "str = STR_ + str ; }", "return str ; }"]}
{"ids": "35534", "code": ["public void add Footer View ( View v , Object data , boolean is Selectable ) {", "Fixed View Info info = new Fixed View Info ( ) ;", "info . view = v ;", "info . data = data ;", "info . is Selectable = is Selectable ;", "m Footer View Infos . add ( info ) ;", "if ( m Adapter != null && m Observer != null ) {", "m Observer . on Changed ( ) ; } }"]}
{"ids": "16079", "code": ["public static int calculate Digit Count ( long value ) {", "if ( value < NUM_ ) {", "if ( value != Long . MIN VALUE ) {", "return calculate Digit Count ( - value ) + NUM_ ; }", "else {", "return NUM_ ; } }", "return ( value < NUM_ ? NUM_ : ( value < NUM_ ? NUM_ : ( value < NUM_ ? NUM_ : ( value < NUM_ ? NUM_ : ( ( int ) ( Math . log ( value ) / LOG 10 ) + NUM_ ) ) ) ) ) ; }"]}
{"ids": "14505", "code": ["public static Byte [ ] convert Date ( String date ) {", "String Tokenizer st = new String Tokenizer ( date ) ;", "String sdate = st . next Token ( ) ;", "String stime = st . next Token ( ) ;", "st = new String Tokenizer ( sdate , STR_ ) ;", "String year = st . next Token ( ) ;", "int iyear = NUM_ ;", "try {", "iyear = Integer . parse Int ( year ) ; }", "catch ( Number Format Exception ex ) {", "debug . error ( STR_ + year + STR_ ) ; }", "byte yrlow = ( byte ) ( iyear & NUM_ ) ;", "byte yrhigh = ( byte ) ( ( ( iyear & NUM_ ) > > NUM_ ) & NUM_ ) ;", "String month = st . next Token ( ) ;", "String day = st . next Token ( ) ;", "st = new String Tokenizer ( stime , STR_ ) ;", "String hour = st . next Token ( ) ;", "String min = st . next Token ( ) ;", "String sec = st . next Token ( ) ;", "Byte bz = Byte . value Of ( ( byte ) NUM_ ) ;", "Byte byrhi = bz ;", "Byte byrlo = bz ;", "Byte bmo = bz ;", "Byte bdy = bz ;", "Byte bhr = bz ;", "Byte bmn = bz ;", "Byte bsc = bz ;", "try {", "byrhi = new Byte ( yrhigh ) ;", "byrlo = new Byte ( yrlow ) ;", "bmo = new Byte ( month ) ;", "bdy = new Byte ( day ) ;", "bhr = new Byte ( hour ) ;", "bmn = new Byte ( min ) ;", "bsc = new Byte ( sec ) ; }", "catch ( Number Format Exception ex ) {", "debug . error ( STR_ + STR_ + sdate + STR_ + stime ) ; }", "Byte [ ] ret = new Byte [ NUM_ ] ;", "ret [ NUM_ ] = byrhi ;", "ret [ NUM_ ] = byrlo ;", "ret [ NUM_ ] = bmo ;", "ret [ NUM_ ] = bdy ;", "ret [ NUM_ ] = bhr ;", "ret [ NUM_ ] = bmn ;", "ret [ NUM_ ] = bsc ;", "ret [ NUM_ ] = bz ;", "return ret ; }"]}
{"ids": "12612", "code": ["private void parse And Add ( String line , Buffered Reader reader ) throws IO Exception {", "try {", "String Tokenizer tokenizer = new String Tokenizer ( line , STR_ ) ;", "String tag = tokenizer . next Token ( ) ;", "if ( tag . equals ( STR_ ) ) {", "continuity Weight = Integer . parse Int ( tokenizer . next Token ( ) ) ; }", "else if ( tag . equals ( STR_ ) ) {", "optimal Coupling = Integer . parse Int ( tokenizer . next Token ( ) ) ; }", "else if ( tag . equals ( STR_ ) ) {", "extend Selections = Integer . parse Int ( tokenizer . next Token ( ) ) ; }", "else if ( tag . equals ( STR_ ) ) {", "join Method = Integer . parse Int ( tokenizer . next Token ( ) ) ; }", "else if ( tag . equals ( STR_ ) ) {", "int num Weights = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "join Weights = new int [ num Weights ] ;", "for ( int i = NUM_ ; i < num Weights ; i ++ ) {", "join Weights [ i ] = Integer . parse Int ( tokenizer . next Token ( ) ) ; }", "join Weight Shift = calc Join Weight Shift ( join Weights ) ; }", "else if ( tag . equals ( STR_ ) ) {", "String name = tokenizer . next Token ( ) ;", "if ( name . equals ( STR_ ) ) {", "sts = new Sample Set ( tokenizer , reader ) ; }", "else {", "mcep = new Sample Set ( tokenizer , reader ) ; } }", "else if ( tag . equals ( STR_ ) ) {", "int type = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "int phone = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "int start = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "int end = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "int prev = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "int next = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "Database Cluster Unit unit = new Database Cluster Unit ( type , phone , start , end , prev , next ) ;", "unit List . add ( unit ) ; }", "else if ( tag . equals ( STR_ ) ) {", "String name = tokenizer . next Token ( ) ;", "int nodes = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "CART cart = new CART Impl ( reader , nodes ) ;", "cart Map . put ( name , cart ) ;", "if ( default Cart == null ) {", "default Cart = cart ; } }", "else if ( tag . equals ( STR_ ) ) {", "String name = tokenizer . next Token ( ) ;", "int start = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "int count = Integer . parse Int ( tokenizer . next Token ( ) ) ;", "Unit Type unit Type = new Unit Type ( name , start , count ) ;", "unit Types List . add ( unit Type ) ; }", "else {", "throw new Error ( STR_ + tag + STR_ + line + STR_ ) ; } }", "catch ( No Such Element Exception nse ) {", "throw new Error ( STR_ + nse . get Message ( ) ) ; }", "catch ( Number Format Exception nfe ) {", "throw new Error ( STR_ + line + STR_ + nfe . get Message ( ) ) ; } }"]}
{"ids": "87082", "code": ["public String byte String No Semicolon ( ) {", "String Builder retval = new String Builder ( ) ;", "try {", "while ( true ) {", "char next = look Ahead ( NUM_ ) ;", "if ( next == STR_ || next == STR_ || next == STR_ || next == STR_ ) {", "break ; }", "else {", "consume ( NUM_ ) ;", "retval . append ( next ) ; } } }", "catch ( Parse Exception ex ) {", "return retval . to String ( ) ; }", "return retval . to String ( ) ; }"]}
{"ids": "32844", "code": ["public static void println ( double x ) {", "out . println ( x ) ; }"]}
{"ids": "86957", "code": ["public boolean subscribe Topic ( @ Non Null Context context , @ Non Null String [ ] new Topics ) {", "if ( ! initialized ) init ( context ) ;", "if ( new Topics . length == NUM_ ) return false ;", "if ( null == topics ) {", "topics = new Array List < > ( ) ; }", "for ( String topic : new Topics ) {", "if ( topics . contains ( topic ) ) {", "return false ; }", "topics . add ( topic ) ; }", "save Subscibed Topics ( context ) ;", "Intent intent = new Intent ( context , Registration Intent Service . class ) ;", "intent . set Action ( Registration Intent Service . ACTION SUBSCRIBE ) ;", "intent . put Extra ( Registration Intent Service . EXTRA TOPIC LIST , new Topics ) ;", "context . start Service ( intent ) ;", "return true ; }"]}
{"ids": "62042", "code": ["public static String serialise ( Node node ) {", "try {", "DOM Implementation Registry registry = DOM Implementation Registry . new Instance ( ) ;", "DOM Implementation LS ls Impl = ( DOM Implementation LS ) registry . get DOM Implementation ( STR_ ) ;", "LS Serializer serializer = ls Impl . create LS Serializer ( ) ;", "return serializer . write To String ( node ) ; }", "catch ( Exception e ) {", "log . fine ( STR_ + e ) ;", "return STR_ ; } }"]}
{"ids": "10997", "code": ["public static boolean is On Segment ( Geo a , Geo b , Geo i ) {", "return ( ( a . distance ( i ) < a . distance ( b ) ) && ( b . distance ( i ) < b . distance ( a ) ) ) ; }"]}
{"ids": "69219", "code": ["public void add Extension Point ( Extension Point extension Point ) {", "f Extension Points . add ( extension Point ) ; }"]}
{"ids": "24334", "code": ["private List add Node To List ( int start Index For Node , int end Index For Node ) {", "List localvm List = new Array List ( ) ;", "for ( int i = start Index For Node ; i < end Index For Node ; i ++ ) {", "localvm List . add ( vm [ i ] ) ; }", "return localvm List ; }"]}
{"ids": "8360", "code": ["public void add Meta Method ( Meta Method method ) {", "if ( is Initialized ( ) ) {", "throw new Runtime Exception ( STR_ + method ) ; }", "final Cached Class declaring Class = method . get Declaring Class ( ) ;", "add Meta Method To Index ( method , meta Method Index . get Header ( declaring Class . get The Class ( ) ) ) ; }"]}
{"ids": "55830", "code": ["public void wait For Event ( long timeout ) {", "Thread thread = Thread . current Thread ( ) ;", "Semaphore semaphore = semaphores . get ( thread ) ;", "if ( semaphore == null ) {", "semaphore = new Semaphore ( NUM_ , true ) ;", "semaphore . drain Permits ( ) ;", "semaphores . put If Absent ( thread , semaphore ) ; }", "semaphore = semaphores . get ( thread ) ;", "try {", "semaphore . try Acquire ( timeout , Time Unit . MILLISECONDS ) ; }", "catch ( Interrupted Exception exception ) {", "logger . log ( Level . FINER , STR_ , exception ) ; } }"]}
{"ids": "84398", "code": ["public String string Value ( ) {", "Object cv = Assert . check Non Null ( const Value ( ) ) ;", "return cv . to String ( ) ; }"]}
{"ids": "53785", "code": ["public Date parse Date ( String str ) {", "try {", "return date Format . parse ( str ) ; }", "catch ( java . text . Parse Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "70015", "code": ["default int hash 32 ( String value ) {", "return hash 32 ( value . get Bytes ( ) ) ; }"]}
{"ids": "46782", "code": ["public Name add All ( Name suffix ) throws Invalid Name Exception {", "return add All ( size ( ) , suffix ) ; }"]}
{"ids": "53491", "code": ["public final Input Stream as Input Stream ( ) throws Unknown Resource Exception {", "return to Input Stream ( ) ; }"]}
{"ids": "36611", "code": ["private static double euclidean Norm ( double vector [ ] ) {", "int n = vector . length ;", "if ( n < NUM_ ) {", "return NUM_ ; }", "if ( n == NUM_ ) {", "return Math . abs ( vector [ NUM_ ] ) ; }", "double scale = NUM_ ;", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "if ( vector [ i ] != NUM_ ) {", "double abs = Math . abs ( vector [ i ] ) ;", "if ( scale < abs ) {", "double t = scale / abs ;", "sum = NUM_ + sum * ( t * t ) ;", "scale = abs ; }", "else {", "double t = abs / scale ;", "sum += t * t ; } } }", "return scale * Math . sqrt ( sum ) ; }"]}
{"ids": "48740", "code": ["public static File Descriptor create Socket ( ) throws IO Exception {", "if ( ! is Supported ) throw new Unsupported Operation Exception ( STR_ ) ;", "int fd Val = create 0 ( ) ;", "File Descriptor fd = new File Descriptor ( ) ;", "fd Access . set ( fd , fd Val ) ;", "return fd ; }"]}
{"ids": "2619", "code": ["public static Grammar do The Merges ( Grammar grammar , Lexicon lexicon , boolean [ ] [ ] [ ] merge These Pairs , double [ ] [ ] merge Weights ) {", "short [ ] num Sub States Array = grammar . num Sub States ;", "short [ ] new Num Sub States Array = grammar . num Sub States ;", "Grammar new Grammar = null ;", "while ( true ) {", "boolean something To Merge = false ;", "for ( int tag = NUM_ ; tag < num Sub States Array . length ; tag ++ ) {", "for ( int i = NUM_ ; i < new Num Sub States Array [ tag ] ; i ++ ) {", "for ( int j = NUM_ ; j < new Num Sub States Array [ tag ] ; j ++ ) {", "something To Merge = something To Merge || merge These Pairs [ tag ] [ i ] [ j ] ; } } }", "if ( ! something To Merge ) break ;", "boolean [ ] [ ] [ ] merge This Iteration = new boolean [ new Num Sub States Array . length ] [ ] [ ] ;", "for ( int tag = NUM_ ; tag < num Sub States Array . length ; tag ++ ) {", "merge This Iteration [ tag ] = new boolean [ merge These Pairs [ tag ] . length ] [ merge These Pairs [ tag ] . length ] ;", "for ( int i = NUM_ ; i < merge These Pairs [ tag ] . length ; i ++ ) {", "for ( int j = NUM_ ; j < merge These Pairs [ tag ] . length ; j ++ ) {", "merge This Iteration [ tag ] [ i ] [ j ] = merge These Pairs [ tag ] [ i ] [ j ] ; } } }", "for ( int tag = NUM_ ; tag < num Sub States Array . length ; tag ++ ) {", "boolean [ ] already Decided To Merge = new boolean [ merge These Pairs [ tag ] . length ] ;", "for ( int i = NUM_ ; i < merge These Pairs [ tag ] . length ; i ++ ) {", "for ( int j = NUM_ ; j < merge These Pairs [ tag ] . length ; j ++ ) {", "if ( already Decided To Merge [ i ] || already Decided To Merge [ j ] ) merge This Iteration [ tag ] [ i ] [ j ] = false ;", "already Decided To Merge [ i ] = already Decided To Merge [ i ] || merge These Pairs [ tag ] [ i ] [ j ] ;", "already Decided To Merge [ j ] = already Decided To Merge [ j ] || merge These Pairs [ tag ] [ i ] [ j ] ; } } }", "for ( int tag = NUM_ ; tag < num Sub States Array . length ; tag ++ ) {", "for ( int i = NUM_ ; i < merge These Pairs [ tag ] . length ; i ++ ) {", "for ( int j = NUM_ ; j < merge These Pairs [ tag ] . length ; j ++ ) {", "merge These Pairs [ tag ] [ i ] [ j ] = merge These Pairs [ tag ] [ i ] [ j ] && ! merge This Iteration [ tag ] [ i ] [ j ] ; } } }", "new Grammar = grammar . merge States ( merge This Iteration , merge Weights ) ;", "lexicon . merge States ( merge This Iteration , merge Weights ) ;", "grammar . fix Merge Weights Etc ( merge These Pairs , merge Weights , merge This Iteration ) ;", "grammar = new Grammar ;", "new Num Sub States Array = grammar . num Sub States ; }", "grammar . make CR Arrays ( ) ;", "return grammar ; }"]}
{"ids": "56918", "code": ["private static void extract File ( Zip Input Stream zip In , String file Path ) throws IO Exception {", "Buffered Output Stream bos = new Buffered Output Stream ( new File Output Stream ( file Path ) ) ;", "byte [ ] bytes In = new byte [ BUFFER SIZE ] ;", "int read = NUM_ ;", "while ( ( read = zip In . read ( bytes In ) ) != - NUM_ ) {", "bos . write ( bytes In , NUM_ , read ) ; }", "bos . close ( ) ; }"]}
{"ids": "55851", "code": ["public static final String square To String ( int square ) {", "String Builder ret = new String Builder ( ) ;", "int x = Position . get X ( square ) ;", "int y = Position . get Y ( square ) ;", "ret . append ( ( char ) ( x + STR_ ) ) ;", "ret . append ( ( char ) ( y + STR_ ) ) ;", "return ret . to String ( ) ; }"]}
{"ids": "7642", "code": ["protected void draw Vertical Item ( Graphics 2 D g 2 , Category Item Renderer State state , Rectangle 2 D data Area , Category Plot plot , Category Axis domain Axis , Value Axis range Axis , Statistical Category Dataset dataset , int visible Row , int row , int column ) {", "double rect X = calculate Bar W 0 ( plot , Plot Orientation . VERTICAL , data Area , domain Axis , state , visible Row , column ) ;", "Number mean Value = dataset . get Mean Value ( row , column ) ;", "if ( mean Value == null ) {", "return ; }", "double value = mean Value . double Value ( ) ;", "double base = NUM_ ;", "double lclip = get Lower Clip ( ) ;", "double uclip = get Upper Clip ( ) ;", "if ( uclip <= NUM_ ) {", "if ( value >= uclip ) {", "return ; }", "base = uclip ;", "if ( value <= lclip ) {", "value = lclip ; } }", "else if ( lclip <= NUM_ ) {", "if ( value >= uclip ) {", "value = uclip ; }", "else {", "if ( value <= lclip ) {", "value = lclip ; } } }", "else {", "if ( value <= lclip ) {", "return ; }", "base = get Lower Clip ( ) ;", "if ( value >= uclip ) {", "value = uclip ; } }", "Rectangle Edge y Axis Location = plot . get Range Axis Edge ( ) ;", "double trans Y 1 = range Axis . value To Java 2 D ( base , data Area , y Axis Location ) ;", "double trans Y 2 = range Axis . value To Java 2 D ( value , data Area , y Axis Location ) ;", "double rect Y = Math . min ( trans Y 2 , trans Y 1 ) ;", "double rect Width = state . get Bar Width ( ) ;", "double rect Height = Math . abs ( trans Y 2 - trans Y 1 ) ;", "Rectangle 2 D bar = new Rectangle 2 D . Double ( rect X , rect Y , rect Width , rect Height ) ;", "Paint item Paint = get Item Paint ( row , column ) ;", "Gradient Paint Transformer t = get Gradient Paint Transformer ( ) ;", "if ( t != null && item Paint instanceof Gradient Paint ) {", "item Paint = t . transform ( ( Gradient Paint ) item Paint , bar ) ; }", "g 2 . set Paint ( item Paint ) ;", "g 2 . fill ( bar ) ;", "if ( is Draw Bar Outline ( ) && state . get Bar Width ( ) > BAR OUTLINE WIDTH THRESHOLD ) {", "Stroke stroke = get Item Outline Stroke ( row , column ) ;", "Paint paint = get Item Outline Paint ( row , column ) ;", "if ( stroke != null && paint != null ) {", "g 2 . set Stroke ( stroke ) ;", "g 2 . set Paint ( paint ) ;", "g 2 . draw ( bar ) ; } }", "Number n = dataset . get Std Dev Value ( row , column ) ;", "if ( n != null ) {", "double value Delta = n . double Value ( ) ;", "double high Val = range Axis . value To Java 2 D ( mean Value . double Value ( ) + value Delta , data Area , y Axis Location ) ;", "double low Val = range Axis . value To Java 2 D ( mean Value . double Value ( ) - value Delta , data Area , y Axis Location ) ;", "if ( this . error Indicator Paint != null ) {", "g 2 . set Paint ( this . error Indicator Paint ) ; }", "else {", "g 2 . set Paint ( get Item Outline Paint ( row , column ) ) ; }", "if ( this . error Indicator Stroke != null ) {", "g 2 . set Stroke ( this . error Indicator Stroke ) ; }", "else {", "g 2 . set Stroke ( get Item Outline Stroke ( row , column ) ) ; }", "Line 2 D line ;", "line = new Line 2 D . Double ( rect X + rect Width / NUM_ , low Val , rect X + rect Width / NUM_ , high Val ) ;", "g 2 . draw ( line ) ;", "line = new Line 2 D . Double ( rect X + rect Width / NUM_ - NUM_ , high Val , rect X + rect Width / NUM_ + NUM_ , high Val ) ;", "g 2 . draw ( line ) ;", "line = new Line 2 D . Double ( rect X + rect Width / NUM_ - NUM_ , low Val , rect X + rect Width / NUM_ + NUM_ , low Val ) ;", "g 2 . draw ( line ) ; }", "Category Item Label Generator generator = get Item Label Generator ( row , column ) ;", "if ( generator != null && is Item Label Visible ( row , column ) ) {", "draw Item Label ( g 2 , dataset , row , column , plot , generator , bar , ( value < NUM_ ) ) ; }", "Entity Collection entities = state . get Entity Collection ( ) ;", "if ( entities != null ) {", "add Item Entity ( entities , dataset , row , column , bar ) ; } }"]}
{"ids": "70129", "code": ["public static boolean has Valid Cover ( I Game game , Coords pos , int elevation ) {", "if ( ( pos == null ) || ( elevation > NUM_ ) ) {", "return false ; }", "boolean has Moved Entity = false ;", "for ( Entity e : game . get Entities Vector ( pos ) ) {", "if ( e . is Done ( ) && ! ( e instanceof Infantry ) && ( e . get Elevation ( ) == elevation ) ) {", "has Moved Entity = true ;", "break ; } }", "if ( ! has Moved Entity ) {", "Enumeration < Entity > wrecks = game . get Wrecked Entities ( ) ;", "while ( wrecks . has More Elements ( ) ) {", "Entity e = wrecks . next Element ( ) ;", "if ( pos . equals ( e . get Position ( ) ) && ! ( e instanceof Infantry ) ) {", "has Moved Entity = true ; } } }", "return has Moved Entity ; }"]}
{"ids": "83242", "code": ["public static Coordinate [ ] compute Tangents Through Point ( Coordinate circle Center , double radius , Coordinate point ) {", "Coordinate [ ] ret = new Coordinate [ NUM_ ] ;", "double dx = ( point . x - circle Center . x ) / NUM_ ;", "double dy = ( point . y - circle Center . y ) / NUM_ ;", "double d = Math . sqrt ( dx * dx + dy * dy ) ;", "double a = ( radius * radius ) / ( NUM_ * d ) ;", "double x 2 = circle Center . x + ( dx * a / d ) ;", "double y 2 = circle Center . y + ( dy * a / d ) ;", "double h = Math . sqrt ( radius * radius - a * a ) ;", "double rx = - dy * ( h / d ) ;", "double ry = dx * ( h / d ) ;", "double xi = x 2 + rx ;", "double yi = y 2 + ry ;", "double xi Prime = x 2 - rx ;", "double yi Prime = y 2 - ry ;", "ret [ NUM_ ] = new Coordinate ( point ) ;", "ret [ NUM_ ] = new Coordinate ( xi , yi ) ;", "ret [ NUM_ ] = new Coordinate ( xi Prime , yi Prime ) ;", "return ret ; }"]}
{"ids": "20237", "code": ["public void add Group ( Group Config Interface sub Group ) {", "sub Group List . add ( sub Group ) ; }"]}
{"ids": "16979", "code": ["public void start Scanning ( final Beacon Service Connection service Connection ) {", "final Cursor cursor = m Database Helper . get All Regions ( ) ;", "while ( cursor . move To Next ( ) ) {", "final UUID uuid = UUID . from String ( cursor . get String ( NUM_ ) ) ;", "final int major = cursor . get Int ( NUM_ ) ;", "final int minor = cursor . get Int ( NUM_ ) ;", "final int event = cursor . get Int ( NUM_ ) ;", "service Connection . start Ranging Beacons In Region ( Beacons Fragment . BEACON COMPANY ID , uuid , major , minor , this ) ;", "if ( event == Beacon Contract . EVENT IN RANGE || event == Beacon Contract . EVENT OUT OF RANGE ) service Connection . start Monitoring For Region ( Beacons Fragment . BEACON COMPANY ID , uuid , major , minor , this ) ; } }"]}
{"ids": "25667", "code": ["public static boolean is Header ( Header hdr ) {", "return hdr . get Boolean Value ( ZIMAGE , false ) ; }"]}
{"ids": "10679", "code": ["public static Info Register create Folder ( User user , Integer book Id , List atts , List inter , Map documents , String entidad , boolean consolidacion ) throws Validation Exception , Security Exception , Book Exception , Session Exception , Tec Doc Exception , Parse Exception , Attributes Exception {", "Info Register result = new Info Register ( ) ;", "String session ID = new String ( ) ;", "try {", "session ID = Login . login ( user , entidad ) ;", "set Office User Register ( entidad , session ID , atts ) ;", "Book Session . open Book ( session ID , book Id , entidad ) ;", "Integer launch Dist Out Register = Register Services Util . get Inves Conf Actions ( entidad ) ;", "Register Services Util . can Create Folder ( session ID , book Id , documents , user , atts , entidad , consolidacion ) ;", "Ax Sf axsf Q = Book Session . get Form Format ( session ID , book Id , entidad ) ;", "Field Format field Format = Register Services Util . get Field Format ( session ID , book Id ) ;", "Map translated Ids = Register Services Util . get Fields With Sustitute ( atts , axsf Q , session ID , book Id , entidad ) ;", "Ax Sf new Ax SF = Register Services Util . init In Or Out Folder ( user , axsf Q ) ;", "new Ax SF = Register Services Util . complete Folder ( translated Ids , axsf Q , new Ax SF , user . get Locale ( ) , atts , field Format , consolidacion ) ;", "Folder Data Session data = Register . create New Folder ( session ID , book Id , new Ax SF , inter , documents , launch Dist Out Register , user . get Locale ( ) , entidad , consolidacion ) ;", "result = Consult Register . consult Register Info ( book Id , data . get Axsf New ( ) , data . get New Register ID ( ) , data . get Scrofic ( ) , data . get User Name ( ) , user . get Locale ( ) ) ; }", "finally {", "Book Session . close Book ( session ID , book Id ) ;", "Security Session . logout ( session ID , entidad ) ; }", "return result ; }"]}
{"ids": "44287", "code": ["public void close ( ) throws IO Exception {", "f Input Stream . close ( ) ; }"]}
{"ids": "17294", "code": ["private void handle Subscription Error ( Azure Allocation Context ctx , String namespace , Throwable e ) {", "if ( e instanceof Cloud Exception ) {", "Cloud Exception ce = ( Cloud Exception ) e ;", "Cloud Error body = ce . get Body ( ) ;", "if ( body != null ) {", "String code = body . get Code ( ) ;", "if ( MISSING SUBSCRIPTION CODE . equals ( code ) ) {", "register Subscription ( ctx , namespace ) ;", "return ; } } }", "handle Error ( ctx , e ) ; }"]}
{"ids": "31714", "code": ["public boolean has Shutdown Hook ( Runnable shutdown Hook ) {", "return hooks . contains ( shutdown Hook ) ; }"]}
{"ids": "54442", "code": ["@ Override public void end Process Sub Tokens ( ) {", "if ( ! skey . is Empty ( ) ) {", "map . put ( skey , sval ) ;", "skey = STR_ ;", "sval = STR_ ; } }"]}
{"ids": "53271", "code": ["private void heapify Down ( Comparable < Object > cur ) {", "final int stop = size > > > NUM_ ;", "int twopos = NUM_ ;", "while ( twopos < stop ) {", "int bestchild = ( twopos << NUM_ ) + NUM_ ;", "Comparable < Object > best = twoheap [ bestchild ] ;", "final int right = bestchild + NUM_ ;", "if ( right < size && best . compare To ( twoheap [ right ] ) > NUM_ ) {", "bestchild = right ;", "best = twoheap [ right ] ; }", "if ( cur . compare To ( best ) <= NUM_ ) {", "break ; }", "twoheap [ twopos ] = best ;", "twopos = bestchild ; }", "twoheap [ twopos ] = cur ; }"]}
{"ids": "62716", "code": ["public void add Feature ( I Feature Vector fv ) {", "idx List . add All ( Ints . as List ( fv . get Indices ( ) ) ) ;", "val List . add All ( Floats . as List ( fv . get Values ( ) ) ) ; }"]}
{"ids": "8912", "code": ["protected void wait For External Store Mount ( ) throws Exception {", "String ext Storage State = Environment . get External Storage State ( ) ;", "int current Wait Time = NUM_ ;", "while ( ! ext Storage State . equals ( Environment . MEDIA MOUNTED ) ) {", "Log . i ( LOG TAG , STR_ ) ;", "current Wait Time = timeout Wait ( current Wait Time , DEFAULT WAIT POLL TIME , DEFAULT MAX WAIT TIME , STR_ ) ;", "ext Storage State = Environment . get External Storage State ( ) ; } }"]}
{"ids": "51675", "code": ["public static Data Display Table list Glyph Dimension Bounds ( Font font ) {", "String [ ] header = { STR_ , STR_ } ;", "Align [ ] display Alignment = { Align . Left , Align . Right } ;", "Data Display Table table = new Data Display Table ( Arrays . as List ( header ) ) ;", "table . set Alignment ( Arrays . as List ( display Alignment ) ) ;", "Loca Table loca Table = Font Utils . get Loca Table ( font ) ;", "Glyph Table glyf Table = Font Utils . get Glyph Table ( font ) ;", "int x Min = Integer . MAX VALUE ;", "int y Min = Integer . MAX VALUE ;", "int x Max = Integer . MIN VALUE ;", "int y Max = Integer . MIN VALUE ;", "for ( int i = NUM_ ; i < loca Table . num Glyphs ( ) ; i ++ ) {", "Glyph glyph = glyf Table . glyph ( loca Table . glyph Offset ( i ) , loca Table . glyph Length ( i ) ) ;", "if ( glyph . x Min ( ) < x Min ) {", "x Min = glyph . x Min ( ) ; }", "if ( glyph . y Min ( ) < y Min ) {", "y Min = glyph . y Min ( ) ; }", "if ( glyph . x Max ( ) > x Max ) {", "x Max = glyph . x Max ( ) ; }", "if ( glyph . y Max ( ) > y Max ) {", "y Max = glyph . y Max ( ) ; } }", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , x Min ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , x Max ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , y Min ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , y Max ) } ) ) ;", "return table ; }"]}
{"ids": "59850", "code": ["private boolean is In Thumb Range ( float touch X , double normalized Thumb Value ) {", "return Math . abs ( touch X - normalized To Screen ( normalized Thumb Value ) ) <= thumb Half Width ; }"]}
{"ids": "85689", "code": ["public static byte [ ] str 2 Unicode Byte Array ( final JBBP Byte Order byte Order , final String str ) {", "final byte [ ] result = new byte [ str . length ( ) << NUM_ ] ;", "int index = NUM_ ;", "for ( int i = NUM_ ; i < str . length ( ) ; i ++ ) {", "final int val = str . char At ( i ) ;", "switch ( byte Order ) {", "case BIG ENDIAN : {", "result [ index ++ ] = ( byte ) ( val > > NUM_ ) ;", "result [ index ++ ] = ( byte ) val ; }", "break ;", "case LITTLE ENDIAN : {", "result [ index ++ ] = ( byte ) val ;", "result [ index ++ ] = ( byte ) ( val > > NUM_ ) ; }", "break ;", "default :", "throw new Error ( STR_ + byte Order + STR_ ) ; } }", "return result ; }"]}
{"ids": "33959", "code": ["private Method Def parse method ( Str Tok st ) {", "String method name = st . need word ( ) ;", "st . need ( STR_ ) ;", "Array List < String > args = new Array List < > ( ) ;", "String tok = st . next Token ( ) ;", "if ( tok != STR_ ) {", "st . push Back ( ) ;", "do {", "tok = st . need word ( ) ;", "args . add ( tok ) ; }", "while ( st . next Token ( ) == STR_ ) ;", "st . push Back ( ) ;", "st . need ( STR_ ) ; }", "Type [ ] targs = new Type [ args . size ( ) ] ;", "for ( int ii = NUM_ ; ii < args . size ( ) ; ii ++ ) {", "targs [ ii ] = BCEL Util . classname to type ( args . get ( ii ) ) ; }", "return new Method Def ( method name , targs ) ; }"]}
{"ids": "83236", "code": ["private void write Experieced And Causing Person Delay ( ) {", "Sorted Map < Double , Map < Id < Person > , Double > > time Bin 2 Affected Person 2 Delay = get Experienced Person Delay ( NUM_ ) ;", "Sorted Map < Double , Map < Id < Person > , Double > > time Bin 2 Causing Person 2 Delay = get Causing Person Delay ( NUM_ ) ;", "if ( time Bin 2 Affected Person 2 Delay . size ( ) != NUM_ ) throw new Runtime Exception ( STR_ ) ;", "Map < Id < Person > , Double > affectedperson 2 Delay = time Bin 2 Affected Person 2 Delay . get ( simulation End Time ) ;", "Map < Id < Person > , Double > caused Person 2 Delay = time Bin 2 Causing Person 2 Delay . get ( simulation End Time ) ;", "Buffered Writer writer = IO Utils . get Buffered Writer ( run Dir + STR_ + pricing Scenario + suffix For Soring + STR_ ) ;", "try {", "writer . write ( STR_ ) ;", "for ( Id < Person > id : caused Person 2 Delay . key Set ( ) ) {", "writer . write ( id + STR_ + pf . get Munich User Group From Person Id ( id ) + STR_ + affectedperson 2 Delay . get ( id ) / NUM_ + STR_ + caused Person 2 Delay . get ( id ) / NUM_ + STR_ ) ; }", "writer . close ( ) ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( STR_ + e ) ; } }"]}
{"ids": "86745", "code": ["static List < List < File > > partition ( final int bin Count , final File ... files ) {", "final File [ ] sort = Arrays . copy Of ( files , files . length ) ;", "return bin Them ( bin Count , sort ) ; }"]}
{"ids": "26608", "code": ["private void calc Bite Point ( int center X , int center Y , float circle Edge X , float circle Edge Y , double bite Line , boolean is First Bite , boolean is Random Bite ) {", "double bite Percent ;", "if ( is First Bite ) {", "bite X = ( int ) circle Edge X ;", "bite Y = ( int ) circle Edge Y ; }", "else {", "bite Percent = bite Radius / bite Line ;", "if ( is Random Bite ) {", "bite Percent *= bites Taken Map . get ( bite Direction ) ; }", "else {", "bite Percent *= ( num Bites For One Direction - num Bites For One Direction Left ) ; }", "bite X = Draw Utils . get Point Between Two Points ( circle Edge X , center X , bite Percent ) ;", "bite Y = Draw Utils . get Point Between Two Points ( circle Edge Y , center Y , bite Percent ) ; } }"]}
{"ids": "5123", "code": ["private boolean zz Refill ( ) throws java . io . IO Exception {", "if ( zz Start Read > NUM_ ) {", "System . arraycopy ( zz Buffer , zz Start Read , zz Buffer , NUM_ , zz End Read - zz Start Read ) ;", "zz End Read -= zz Start Read ;", "zz Current Pos -= zz Start Read ;", "zz Marked Pos -= zz Start Read ;", "zz Pushback Pos -= zz Start Read ;", "zz Start Read = NUM_ ; }", "if ( zz Current Pos >= zz Buffer . length ) {", "char new Buffer [ ] = new char [ zz Current Pos * NUM_ ] ;", "System . arraycopy ( zz Buffer , NUM_ , new Buffer , NUM_ , zz Buffer . length ) ;", "zz Buffer = new Buffer ; }", "int num Read = zz Reader . read ( zz Buffer , zz End Read , zz Buffer . length - zz End Read ) ;", "if ( num Read < NUM_ ) {", "return true ; }", "else {", "zz End Read += num Read ;", "return false ; } }"]}
{"ids": "56792", "code": ["private void update Business Object Definition Entity Descriptive Information ( Business Object Definition Entity business Object Definition Entity , Business Object Definition Descriptive Information Update Request request ) {", "business Object Definition Entity . set Description ( request . get Description ( ) ) ;", "business Object Definition Entity . set Display Name ( request . get Display Name ( ) ) ;", "business Object Definition Dao . save And Refresh ( business Object Definition Entity ) ; }"]}
{"ids": "64614", "code": ["@ Override public void on Download Progress ( Download Progress Info progress ) {", "m Average Speed . set Text ( get String ( R . string . kilobytes per second , Helpers . get Speed String ( progress . m Current Speed ) ) ) ;", "m Time Remaining . set Text ( get String ( R . string . time remaining , Helpers . get Time Remaining ( progress . m Time Remaining ) ) ) ;", "progress . m Overall Total = progress . m Overall Total ;", "m PB . set Max ( ( int ) ( progress . m Overall Total > > NUM_ ) ) ;", "m PB . set Progress ( ( int ) ( progress . m Overall Progress > > NUM_ ) ) ;", "m Progress Percent . set Text ( Long . to String ( progress . m Overall Progress * NUM_ / progress . m Overall Total ) + STR_ ) ;", "m Progress Fraction . set Text ( Helpers . get Download Progress String ( progress . m Overall Progress , progress . m Overall Total ) ) ; }"]}
{"ids": "12294", "code": ["public static void update All For Facade ( Data Store data Store , Iterable < Update > updates ) {", "update All For Facade ( data Store , updates . iterator ( ) ) ; }"]}
{"ids": "72447", "code": ["public Array Field Vector ( Field Vector < T > v 1 , Field Vector < T > v 2 ) throws Null Argument Exception {", "Math Utils . check Not Null ( v 1 ) ;", "Math Utils . check Not Null ( v 2 ) ;", "field = v 1 . get Field ( ) ;", "final T [ ] v 1 Data = ( v 1 instanceof Array Field Vector ) ? ( ( Array Field Vector < T > ) v 1 ) . data : v 1 . to Array ( ) ;", "final T [ ] v 2 Data = ( v 2 instanceof Array Field Vector ) ? ( ( Array Field Vector < T > ) v 2 ) . data : v 2 . to Array ( ) ;", "data = Math Arrays . build Array ( field , v 1 Data . length + v 2 Data . length ) ;", "System . arraycopy ( v 1 Data , NUM_ , data , NUM_ , v 1 Data . length ) ;", "System . arraycopy ( v 2 Data , NUM_ , data , v 1 Data . length , v 2 Data . length ) ; }"]}
{"ids": "14766", "code": ["public boolean equals ( Object o ) {", "if ( o instanceof Service Config Manager ) {", "Service Config Manager oscm = ( Service Config Manager ) o ;", "if ( service Name . equals ( oscm . service Name ) && version . equals ( oscm . version ) ) {", "return ( true ) ; } }", "return ( false ) ; }"]}
{"ids": "627", "code": ["public void add Item Bounds Listener ( Item Bounds Listener ibl ) {", "if ( m bounders == null ) m bounders = new Copy On Write Array List ( ) ;", "m bounders . add ( ibl ) ; }"]}
{"ids": "64703", "code": ["public static S 2 Cell Id from Face IJ ( int face , int i , int j ) {", "long n [ ] = { NUM_ , face << ( POS BITS - NUM_ ) } ;", "int bits = ( face & SWAP MASK ) ;", "for ( int k = NUM_ ; k >= NUM_ ; -- k ) {", "bits = get Bits ( n , i , j , k , bits ) ; }", "S 2 Cell Id s = new S 2 Cell Id ( ( ( ( n [ NUM_ ] << NUM_ ) + n [ NUM_ ] ) << NUM_ ) + NUM_ ) ;", "return s ; }"]}
{"ids": "54362", "code": ["public void increase Dpi ( ) {", "if ( this . current Dpi Pos < ( this . dpi Sizes . length - NUM_ ) ) {", "++ this . current Dpi Pos ; } }"]}
{"ids": "57995", "code": ["String Vector process PREFIX URLLIST ( Stylesheet Handler handler , String uri , String name , String raw Name , String value ) throws org . xml . sax . SAX Exception {", "String Tokenizer tokenizer = new String Tokenizer ( value , STR_ ) ;", "int n Strings = tokenizer . count Tokens ( ) ;", "String Vector strings = new String Vector ( n Strings ) ;", "for ( int i = NUM_ ; i < n Strings ; i ++ ) {", "String prefix = tokenizer . next Token ( ) ;", "String url = handler . get Namespace For Prefix ( prefix ) ;", "if ( url != null ) strings . add Element ( url ) ;", "else throw new org . xml . sax . SAX Exception ( XSL Messages . create Message ( XSLT Error Resources . ER CANT RESOLVE NSPREFIX , new Object [ ] { prefix } ) ) ; }", "return strings ; }"]}
{"ids": "12955", "code": ["@ Override public void write ( Data Output out ) throws IO Exception {", "out . write Long ( duration ) ;", "out . write Int ( get Length ( ) ) ;", "for ( int i = NUM_ ; i < coeffs . length ; i ++ ) {", "out . write Float ( coeffs [ i ] ) ; } }"]}
{"ids": "83510", "code": ["private void add Sharing Profiles ( Collection < Sharing Profile > sharing Profiles ) throws Guacamole Exception {", "for ( Sharing Profile sharing Profile : sharing Profiles ) {", "String primary Connection Identifier = sharing Profile . get Primary Connection Identifier ( ) ;", "API Connection primary Connection = retrieved Connections . get ( primary Connection Identifier ) ;", "if ( primary Connection != null ) {", "Collection < API Sharing Profile > children = primary Connection . get Sharing Profiles ( ) ;", "if ( children == null ) {", "children = new Array List < API Sharing Profile > ( ) ;", "primary Connection . set Sharing Profiles ( children ) ; }", "children . add ( new API Sharing Profile ( sharing Profile ) ) ; }", "else logger . debug ( STR_ + STR_ + STR_ , sharing Profile . get Identifier ( ) , primary Connection Identifier ) ; } }"]}
{"ids": "22562", "code": ["public void failover Copy ( RP Copy Request Params copy To Failover To ) throws Recover Point Exception {", "String bookmark Name = copy To Failover To . get Bookmark Name ( ) ;", "Date apit Time = copy To Failover To . get Apit Time ( ) ;", "if ( bookmark Name != null ) {", "logger . info ( STR_ + bookmark Name ) ; }", "else if ( apit Time != null ) {", "logger . info ( STR_ + apit Time . to String ( ) ) ; }", "else {", "logger . info ( STR_ ) ; }", "Recover Point Image Management Utils image Manager = new Recover Point Image Management Utils ( ) ;", "image Manager . enable Copy Image ( functional API , copy To Failover To , true ) ; }"]}
{"ids": "80326", "code": ["private static void prepare Logging System Enviroment ( ) {", "System . set Property ( STR_ , get Log Folder ( ) ) ; }"]}
{"ids": "15342", "code": ["public State Attribute ( byte [ ] octets ) {", "super ( octets ) ;", "state = new String ( octets , NUM_ , octets . length - NUM_ , Charset . for Name ( STR_ ) ) ; }"]}
{"ids": "47322", "code": ["private static long calc Size ( long size , long skip , long limit ) {", "return size >= NUM_ ? Math . max ( - NUM_ , Math . min ( size - skip , limit ) ) : - NUM_ ; }"]}
{"ids": "31962", "code": ["public static Collection < Inet Socket Address > resolve Addresses ( Address Resolver addr Rslvr , Iterable < String > addrs , int port ) throws Ignite Spi Exception {", "assert addr Rslvr != null ;", "Collection < Inet Socket Address > ext Addrs = new Hash Set < > ( ) ;", "for ( String addr : addrs ) {", "Inet Socket Address sock Addr = new Inet Socket Address ( addr , port ) ;", "if ( ! sock Addr . is Unresolved ( ) ) {", "Collection < Inet Socket Address > ext Addrs 0 = resolve Address ( addr Rslvr , sock Addr ) ;", "if ( ext Addrs 0 != null ) ext Addrs . add All ( ext Addrs 0 ) ; } }", "return ext Addrs ; }"]}
{"ids": "61937", "code": ["private double sample From Gamma ( double k , double theta ) {", "boolean accept = false ;", "if ( k < NUM_ ) {", "double c = ( NUM_ / k ) ;", "double d = ( ( NUM_ - k ) * Math . pow ( k , ( k / ( NUM_ - k ) ) ) ) ;", "double u , v , z , e , x ;", "do {", "u = rng . next Double ( ) ;", "v = rng . next Double ( ) ;", "z = - Math . log ( u ) ;", "e = - Math . log ( v ) ;", "x = Math . pow ( z , c ) ;", "if ( ( z + e ) >= ( d + x ) ) {", "accept = true ; } }", "while ( ! accept ) ;", "return ( x * theta ) ; }", "else {", "double b = ( k - Math . log ( NUM_ ) ) ;", "double c = ( k + Math . sqrt ( NUM_ * k - NUM_ ) ) ;", "double lam = Math . sqrt ( NUM_ * k - NUM_ ) ;", "double cheng = ( NUM_ + Math . log ( NUM_ ) ) ;", "double u , v , x , y , z , r ;", "do {", "u = rng . next Double ( ) ;", "v = rng . next Double ( ) ;", "y = ( ( NUM_ / lam ) * Math . log ( v / ( NUM_ - v ) ) ) ;", "x = ( k * Math . exp ( y ) ) ;", "z = ( u * v * v ) ;", "r = ( b + ( c * y ) - x ) ;", "if ( ( r >= ( ( NUM_ * z ) - cheng ) ) || ( r >= Math . log ( z ) ) ) {", "accept = true ; } }", "while ( ! accept ) ;", "return ( x * theta ) ; } }"]}
{"ids": "37703", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "69710", "code": ["public Blockly Controller build ( ) {", "if ( m View Factory == null && ( m Workspace Fragment != null || m Trash Fragment != null || m Toolbox Fragment != null || m Toolbox Drawer != null ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( m Workspace Helper == null ) {", "m Workspace Helper = new Workspace Helper ( m Context ) ; }", "Block Factory factory = new Block Factory ( m Context , null ) ;", "for ( int i = NUM_ ; i < m Block Def Resources . size ( ) ; i ++ ) {", "try {", "factory . add Blocks ( m Block Def Resources . get ( i ) ) ; }", "catch ( Throwable e ) {", "factory . clear ( ) ;", "throw e ; } }", "for ( int i = NUM_ ; i < m Block Def Assets . size ( ) ; i ++ ) {", "String asset Path = m Block Def Assets . get ( i ) ;", "try {", "factory . add Blocks ( m Asset Manager . open ( asset Path ) ) ; }", "catch ( IO Exception e ) {", "factory . clear ( ) ;", "throw new Illegal State Exception ( STR_ + asset Path , e ) ; } }", "for ( int i = NUM_ ; i < m Block Defs . size ( ) ; i ++ ) {", "factory . add Block Template ( m Block Defs . get ( i ) ) ; }", "Blockly Controller controller = new Blockly Controller ( m Context , factory , m Workspace Helper , m View Factory ) ;", "if ( m Toolbox Res Id != NUM_ ) {", "controller . load Toolbox Contents ( m Toolbox Res Id ) ; }", "else if ( m Toolbox Xml != null ) {", "controller . load Toolbox Contents ( m Toolbox Xml ) ; }", "else if ( m Toolbox Asset Id != null && m Asset Manager != null ) {", "try {", "controller . load Toolbox Contents ( m Asset Manager . open ( m Toolbox Asset Id ) ) ; }", "catch ( IO Exception e ) {", "throw new Illegal Argument Exception ( STR_ + m Toolbox Asset Id , e ) ; } }", "controller . set Workspace Fragment ( m Workspace Fragment ) ;", "controller . set Trash Fragment ( m Trash Fragment ) ;", "controller . set Toolbox Fragment ( m Toolbox Fragment ) ;", "controller . set Trash Icon ( m Trash Icon ) ;", "controller . set Variable Callback ( m Variable Callback ) ;", "return controller ; }"]}
{"ids": "30635", "code": ["@ Override public void run ( ) {", "while ( ! is Interrupted ( ) ) {", "try {", "Key Holder < K > ref = ( Key Holder < K > ) queue . remove ( ) ;", "V removed = table . remove ( ref ) ;", "if ( listener != null && removed != null ) listener . weak Entry Removed ( removed ) ; }", "catch ( Interrupted Exception e ) {", "interrupt ( ) ;", "break ; } } }"]}
{"ids": "56874", "code": ["public Job Definition Create Request create Job Definition Create Request ( String namespace Cd , String job Name , String job Description , String activiti Xml , List < Parameter > parameters ) {", "Job Definition Create Request request = new Job Definition Create Request ( ) ;", "request . set Namespace ( namespace Cd ) ;", "request . set Job Name ( job Name ) ;", "request . set Description ( job Description ) ;", "request . set Activiti Job Xml ( activiti Xml ) ;", "request . set Parameters ( parameters ) ;", "return request ; }"]}
{"ids": "34725", "code": ["public Tab State restore Tab State ( int tab Id , boolean encrypted ) {", "return Tab State . restore Tab State ( get Tab State File ( tab Id , encrypted ) , encrypted ) ; }"]}
{"ids": "86237", "code": ["public FTP Client ( ) {", "add List Parser ( new Unix List Parser ( ) ) ;", "add List Parser ( new DOS List Parser ( ) ) ;", "add List Parser ( new EPLF List Parser ( ) ) ;", "add List Parser ( new Net Ware List Parser ( ) ) ;", "add List Parser ( new MLSD List Parser ( ) ) ; }"]}
{"ids": "66546", "code": ["private Level description To Log Level ( String description ) {", "Level result = Level . OFF ;", "if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . OFF ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . SEVERE ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . WARNING ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . INFO ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . CONFIG ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . FINE ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . FINER ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . FINEST ; }", "else if ( description . equals ( s logger . localize Message ( STR_ ) ) ) {", "result = Level . ALL ; }", "return result ; }"]}
{"ids": "56723", "code": ["default boolean is Immutable ( ) {", "return false ; }"]}
{"ids": "30608", "code": ["public long renew ( String entry Uid , String class Name , int object Type , long duration , boolean from Replication , boolean origin , boolean is From Gateway ) throws Unknown Lease Exception , Internal Space Exception {", "try {", "extend Lease Period ( entry Uid , class Name , object Type , duration , from Replication , origin , false , null , is From Gateway ) ; }", "catch ( Unknown Lease Exception unknown Lease Exception ) {", "if ( cache Manager . is Cache External DB ( ) && object Type != Object Types . NOTIFY NULL TEMPLATE && object Type != Object Types . NOTIFY TEMPLATE ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . log ( Level . FINE , STR_ , unknown Lease Exception ) ; } }", "else throw unknown Lease Exception ; }", "return duration ; }"]}
{"ids": "10784", "code": ["public static void in Range ( final long value , final String name , final long min Inclusive , final long max Inclusive ) {", "if ( value < min Inclusive || value > max Inclusive ) {", "final String message = String . format ( STR_ , name , min Inclusive , max Inclusive ) ;", "throw new Illegal Argument Exception ( message ) ; } }"]}
{"ids": "30980", "code": ["public static File unzip To Temp Folder ( File zip File ) {", "String zip Filename = zip File . get Name ( ) ;", "String temp Folder Prefix = zip Filename . substring ( NUM_ , zip Filename . last Index Of ( STR_ ) ) ;", "File temp Folder = create Temp Folder ( temp Folder Prefix ) ;", "try {", "PU Zip Utils . unzip ( zip File , temp Folder ) ;", "return temp Folder ; }", "catch ( Exception e ) {", "try {", "File Utils . delete File Or Directory ( temp Folder ) ; }", "catch ( Runtime Exception ex ) {", "logger . debug ( STR_ + temp Folder , ex ) ; }", "throw new Runtime Exception ( STR_ + zip File + STR_ + temp Folder , e ) ; } }"]}
{"ids": "37115", "code": ["public void clear ( ) {", "m reduced Results . clear ( ) ;", "m current Search Index = NUM_ ; }"]}
{"ids": "67047", "code": ["public static void create Accessor Method ( Soot Method container , Stmt stmt ) {", "Body container Body = container . get Active Body ( ) ;", "soot . util . Chain container Stmts = container Body . get Units ( ) ;", "if ( ! container Stmts . contains ( stmt ) ) throw new Runtime Exception ( ) ;", "if ( stmt . contains Invoke Expr ( ) ) {", "create Invoke Accessor ( container , stmt ) ; }", "else if ( stmt instanceof Assign Stmt ) {", "Assign Stmt as = ( Assign Stmt ) stmt ;", "Field Ref ref ;", "if ( as . get Left Op ( ) instanceof Field Ref ) {", "ref = ( Field Ref ) as . get Left Op ( ) ;", "create Set Accessor ( container , as , ref ) ; }", "else if ( as . get Right Op ( ) instanceof Field Ref ) {", "ref = ( Field Ref ) as . get Right Op ( ) ;", "create Get Accessor ( container , as , ref ) ; }", "else {", "throw new Runtime Exception ( STR_ ) ; } }", "else throw new Runtime Exception ( STR_ ) ; }"]}
{"ids": "49311", "code": ["@ Override public void display Changed ( ) {", "update GC ( ) ; }"]}
{"ids": "18140", "code": ["public final void push Pair ( Node v 1 , Node v 2 ) {", "if ( null == m map ) {", "m map = new Node [ m blocksize ] ;", "m map Size = m blocksize ; }", "else {", "if ( ( m first Free + NUM_ ) >= m map Size ) {", "m map Size += m blocksize ;", "Node new Map [ ] = new Node [ m map Size ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m first Free ) ;", "m map = new Map ; } }", "m map [ m first Free ] = v 1 ;", "m map [ m first Free + NUM_ ] = v 2 ;", "m first Free += NUM_ ; }"]}
{"ids": "43572", "code": ["private static String escape JSON ( String text ) {", "String Builder builder = new String Builder ( ) ;", "builder . append ( STR_ ) ;", "for ( int index = NUM_ ; index < text . length ( ) ; index ++ ) {", "char chr = text . char At ( index ) ;", "switch ( chr ) {", "case STR_ :", "case STR_ :", "builder . append ( STR_ ) ;", "builder . append ( chr ) ;", "break ;", "case STR_ :", "builder . append ( STR_ ) ;", "break ;", "case STR_ :", "builder . append ( STR_ ) ;", "break ;", "case STR_ :", "builder . append ( STR_ ) ;", "break ;", "case STR_ :", "builder . append ( STR_ ) ;", "break ;", "default :", "if ( chr < STR_ ) {", "String t = STR_ + Integer . to Hex String ( chr ) ;", "builder . append ( STR_ + t . substring ( t . length ( ) - NUM_ ) ) ; }", "else {", "builder . append ( chr ) ; }", "break ; } }", "builder . append ( STR_ ) ;", "return builder . to String ( ) ; }"]}
{"ids": "1073", "code": ["final Segment < K , V > segment For ( int hash ) {", "return segments [ ( hash > > > segment Shift ) & segment Mask ] ; }"]}
{"ids": "74475", "code": ["@ Suppress Warnings ( STR_ ) private void start Set Time Changed ( ) {", "int hours = NUM_ ;", "int minutes = NUM_ ;", "try {", "hours = Integer . parse Int ( start Hours Field . get Text ( ) ) ; }", "catch ( Exception e ) {", "J Option Pane . show Message Dialog ( this , ( Bundle . get Message ( STR_ ) + STR_ + e ) , Bundle . get Message ( STR_ ) , J Option Pane . ERROR MESSAGE ) ;", "log . error ( STR_ + e ) ;", "return ; }", "if ( ( hours < NUM_ ) || ( hours > NUM_ ) ) {", "J Option Pane . show Message Dialog ( this , ( Bundle . get Message ( STR_ ) ) , Bundle . get Message ( STR_ ) , J Option Pane . ERROR MESSAGE ) ;", "return ; }", "try {", "minutes = Integer . parse Int ( start Minutes Field . get Text ( ) ) ; }", "catch ( Exception e ) {", "J Option Pane . show Message Dialog ( this , ( Bundle . get Message ( STR_ ) + STR_ + e ) , Bundle . get Message ( STR_ ) , J Option Pane . ERROR MESSAGE ) ;", "log . error ( STR_ + e ) ;", "return ; }", "if ( ( minutes < NUM_ ) || ( minutes > NUM_ ) ) {", "J Option Pane . show Message Dialog ( this , ( Bundle . get Message ( STR_ ) ) , Bundle . get Message ( STR_ ) , J Option Pane . ERROR MESSAGE ) ;", "return ; }", "long m Sec Per Hour = NUM_ ;", "long m Sec Per Minute = NUM_ ;", "Date tem = clock . get Time ( ) ;", "int c Hours = tem . get Hours ( ) ;", "long c Num M Sec = tem . get Time ( ) ;", "long n Num M Sec = ( ( c Num M Sec / m Sec Per Hour ) * m Sec Per Hour ) - ( c Hours * m Sec Per Hour ) + ( hours * m Sec Per Hour ) + ( minutes * m Sec Per Minute ) ;", "clock . set Start Set Time ( start Set Time Check Box . is Selected ( ) , new Date ( n Num M Sec ) ) ;", "changed = true ; }"]}
{"ids": "39370", "code": ["public static String serialize ( Object to Serialize ) throws Exception {", "Class < ? > xstream Class ;", "java . lang . reflect . Constructor < ? > constructor ;", "Object xstream ;", "Class < ? > [ ] serialize Args Classes = new Class [ NUM_ ] ;", "Object [ ] serialize Args = new Object [ NUM_ ] ;", "java . lang . reflect . Method method Serialize ;", "String result ;", "xstream Class = Class . for Name ( STR_ ) ;", "constructor = xstream Class . get Constructor ( ) ;", "xstream = constructor . new Instance ( ) ;", "serialize Args Classes [ NUM_ ] = Object . class ;", "serialize Args [ NUM_ ] = to Serialize ;", "method Serialize = xstream Class . get Method ( STR_ , serialize Args Classes ) ;", "try {", "result = ( String ) method Serialize . invoke ( xstream , serialize Args ) ; }", "catch ( Exception ex ) {", "result = null ; }", "return result ; }"]}
{"ids": "41359", "code": ["@ Override public void release ( ) {", "super . release ( ) ; }"]}
{"ids": "62244", "code": ["public static < E > List < E > of ( ) {", "return Collections . empty List ( ) ; }"]}
{"ids": "7470", "code": ["protected void draw Domain Crosshair ( Graphics 2 D g 2 , Rectangle 2 D data Area , Plot Orientation orientation , int dataset Index , Comparable row Key , Comparable column Key , Stroke stroke , Paint paint ) {", "Category Dataset dataset = get Dataset ( dataset Index ) ;", "Category Axis axis = get Domain Axis For Dataset ( dataset Index ) ;", "Category Item Renderer renderer = get Renderer ( dataset Index ) ;", "Line 2 D line ;", "if ( orientation == Plot Orientation . VERTICAL ) {", "double xx = renderer . get Item Middle ( row Key , column Key , dataset , axis , data Area , Rectangle Edge . BOTTOM ) ;", "line = new Line 2 D . Double ( xx , data Area . get Min Y ( ) , xx , data Area . get Max Y ( ) ) ; }", "else {", "double yy = renderer . get Item Middle ( row Key , column Key , dataset , axis , data Area , Rectangle Edge . LEFT ) ;", "line = new Line 2 D . Double ( data Area . get Min X ( ) , yy , data Area . get Max X ( ) , yy ) ; }", "g 2 . set Stroke ( stroke ) ;", "g 2 . set Paint ( paint ) ;", "g 2 . draw ( line ) ; }"]}
{"ids": "62599", "code": ["@ Override public Table summary ( ) {", "Table table = Table . create ( STR_ + name ( ) ) ;", "Category Column measure = Category Column . create ( STR_ ) ;", "Category Column value = Category Column . create ( STR_ ) ;", "table . add Column ( measure ) ;", "table . add Column ( value ) ;", "measure . add ( STR_ ) ;", "value . add ( String . value Of ( size ( ) ) ) ;", "measure . add ( STR_ ) ;", "value . add ( String . value Of ( count Missing ( ) ) ) ;", "measure . add ( STR_ ) ;", "value . add ( String . value Of ( min ( ) ) ) ;", "measure . add ( STR_ ) ;", "value . add ( String . value Of ( max ( ) ) ) ;", "return table ; }"]}
{"ids": "37268", "code": ["public C Visibility Criterium Panel ( final C Visibility Criterium criterium ) {", "super ( new Border Layout ( ) ) ;", "visibility Criterium = criterium ;", "visibility State Box . add Action Listener ( visibility State Box Listener ) ;", "init Panel ( ) ; }"]}
{"ids": "65912", "code": ["public boolean is Alter Add ( ) {", "return columns To Add . size ( ) > NUM_ ; }"]}
{"ids": "37138", "code": ["private boolean process Removed Node ( final I Navi View Node node ) {", "if ( node instanceof I Navi Code Node ) {", "final I Navi Code Node cnode = ( I Navi Code Node ) node ;", "try {", "final I Navi Function target Function = cnode . get Parent Function ( ) ;", "if ( m node Counter . contains Key ( target Function ) ) {", "final int new Counter = m node Counter . get ( target Function ) - NUM_ ;", "if ( new Counter == NUM_ ) {", "m node Counter . remove ( target Function ) ;", "final Set < C Cross Reference > to Delete = new Hash Set < C Cross Reference > ( ) ;", "for ( final C Cross Reference reference : m cross References ) {", "if ( reference . get Called Function ( ) == target Function ) {", "to Delete . add ( reference ) ; } }", "m cross References . remove All ( to Delete ) ;", "return true ; }", "else {", "m node Counter . put ( target Function , new Counter ) ; } } }", "catch ( final Maybe Null Exception exception ) { } }", "return false ; }"]}
{"ids": "62264", "code": ["public long transfer To ( long position , long count , Output Stream dst ) throws IO Exception {", "return transfer To ( position , count , Channels . new Channel ( dst ) ) ; }"]}
{"ids": "25798", "code": ["private void write Index File ( ) throws IO Exception , Carbon Data Writer Exception {", "Index Header index Header = Carbon Metadata Util . get Index Header ( local Cardinality , thrift Column Schema List ) ;", "List < Block Index > block Index Thrift = Carbon Metadata Util . get Block Index Info ( block Index Info List ) ;", "String file Name = store Location + File . separator + carbon Table Path . get Carbon Index File Name ( carbon Data File Attributes . get Task Id ( ) , carbon Data File Attributes . get Fact Time Stamp ( ) ) ;", "Carbon Index File Writer writer = new Carbon Index File Writer ( ) ;", "writer . open Thrift Writer ( file Name ) ;", "writer . write Thrift ( index Header ) ;", "for ( Block Index block Index : block Index Thrift ) {", "writer . write Thrift ( block Index ) ; }", "writer . close ( ) ;", "copy Carbon Data File To Carbon Store Path ( file Name ) ; }"]}
{"ids": "39655", "code": ["public void nack All ( Pubsub Reader < T > reader ) throws IO Exception {", "check State ( this . reader == null , STR_ ) ;", "List < String > batch Yet To Ack Ids = new Array List < > ( Math . min ( not Yet Read Ids . size ( ) , ACK BATCH SIZE ) ) ;", "for ( String ack Id : not Yet Read Ids ) {", "batch Yet To Ack Ids . add ( ack Id ) ;", "if ( batch Yet To Ack Ids . size ( ) >= ACK BATCH SIZE ) {", "long now Ms Since Epoch = now ( reader ) ;", "reader . nack Batch ( now Ms Since Epoch , batch Yet To Ack Ids ) ;", "batch Yet To Ack Ids . clear ( ) ; } }", "if ( ! batch Yet To Ack Ids . is Empty ( ) ) {", "long now Ms Since Epoch = now ( reader ) ;", "reader . nack Batch ( now Ms Since Epoch , batch Yet To Ack Ids ) ; } }"]}
{"ids": "19436", "code": ["static public void assert Equals ( String message , Object expected , Object actual ) {", "if ( expected == null && actual == null ) return ;", "if ( expected != null && expected . equals ( actual ) ) return ;", "fail Not Equals ( message , expected , actual ) ; }"]}
{"ids": "46195", "code": ["public static Naming Exception map Error Code ( int error Code , String error Message ) {", "if ( error Code == Ldap Client . LDAP SUCCESS ) return null ;", "Naming Exception e = null ;", "String message = Ldap Client . get Error Message ( error Code , error Message ) ;", "switch ( error Code ) {", "case Ldap Client . LDAP ALIAS DEREFERENCING PROBLEM :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP ALIAS PROBLEM :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP ATTRIBUTE OR VALUE EXISTS :", "e = new Attribute In Use Exception ( message ) ;", "break ;", "case Ldap Client . LDAP AUTH METHOD NOT SUPPORTED :", "case Ldap Client . LDAP CONFIDENTIALITY REQUIRED :", "case Ldap Client . LDAP STRONG AUTH REQUIRED :", "case Ldap Client . LDAP INAPPROPRIATE AUTHENTICATION :", "e = new Authentication Not Supported Exception ( message ) ;", "break ;", "case Ldap Client . LDAP ENTRY ALREADY EXISTS :", "e = new Name Already Bound Exception ( message ) ;", "break ;", "case Ldap Client . LDAP INVALID CREDENTIALS :", "case Ldap Client . LDAP SASL BIND IN PROGRESS :", "e = new Authentication Exception ( message ) ;", "break ;", "case Ldap Client . LDAP INAPPROPRIATE MATCHING :", "e = new Invalid Search Filter Exception ( message ) ;", "break ;", "case Ldap Client . LDAP INSUFFICIENT ACCESS RIGHTS :", "e = new No Permission Exception ( message ) ;", "break ;", "case Ldap Client . LDAP INVALID ATTRIBUTE SYNTAX :", "case Ldap Client . LDAP CONSTRAINT VIOLATION :", "e = new Invalid Attribute Value Exception ( message ) ;", "break ;", "case Ldap Client . LDAP LOOP DETECT :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP NO SUCH ATTRIBUTE :", "e = new No Such Attribute Exception ( message ) ;", "break ;", "case Ldap Client . LDAP NO SUCH OBJECT :", "e = new Name Not Found Exception ( message ) ;", "break ;", "case Ldap Client . LDAP OBJECT CLASS MODS PROHIBITED :", "case Ldap Client . LDAP OBJECT CLASS VIOLATION :", "case Ldap Client . LDAP NOT ALLOWED ON RDN :", "e = new Schema Violation Exception ( message ) ;", "break ;", "case Ldap Client . LDAP NOT ALLOWED ON NON LEAF :", "e = new Context Not Empty Exception ( message ) ;", "break ;", "case Ldap Client . LDAP OPERATIONS ERROR :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP OTHER :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP PROTOCOL ERROR :", "e = new Communication Exception ( message ) ;", "break ;", "case Ldap Client . LDAP SIZE LIMIT EXCEEDED :", "e = new Size Limit Exceeded Exception ( message ) ;", "break ;", "case Ldap Client . LDAP TIME LIMIT EXCEEDED :", "e = new Time Limit Exceeded Exception ( message ) ;", "break ;", "case Ldap Client . LDAP UNAVAILABLE CRITICAL EXTENSION :", "e = new Operation Not Supported Exception ( message ) ;", "break ;", "case Ldap Client . LDAP UNAVAILABLE :", "case Ldap Client . LDAP BUSY :", "e = new Service Unavailable Exception ( message ) ;", "break ;", "case Ldap Client . LDAP UNDEFINED ATTRIBUTE TYPE :", "e = new Invalid Attribute Identifier Exception ( message ) ;", "break ;", "case Ldap Client . LDAP UNWILLING TO PERFORM :", "e = new Operation Not Supported Exception ( message ) ;", "break ;", "case Ldap Client . LDAP COMPARE FALSE :", "case Ldap Client . LDAP COMPARE TRUE :", "case Ldap Client . LDAP IS LEAF :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP ADMIN LIMIT EXCEEDED :", "e = new Limit Exceeded Exception ( message ) ;", "break ;", "case Ldap Client . LDAP REFERRAL :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP PARTIAL RESULTS :", "e = new Naming Exception ( message ) ;", "break ;", "case Ldap Client . LDAP INVALID DN SYNTAX :", "case Ldap Client . LDAP NAMING VIOLATION :", "e = new Invalid Name Exception ( message ) ;", "break ;", "default :", "e = new Naming Exception ( message ) ;", "break ; }", "return e ; }"]}
{"ids": "6757", "code": ["public final void compute Index ( ) {", "if ( index Computed ) {", "return ; }", "List < Long > cell List = new Array List ( ) ;", "List < Integer > edge List = new Array List ( ) ;", "for ( int i = NUM_ ; i < get Num Edges ( ) ; ++ i ) {", "S 2 Point from = edge From ( i ) ;", "S 2 Point to = edge To ( i ) ;", "Array List < S 2 Cell Id > cover = new Array List ( ) ;", "int level = get Covering ( from , to , true , cover ) ;", "minimum S 2 Level Used = Math . min ( minimum S 2 Level Used , level ) ;", "for ( S 2 Cell Id cell Id : cover ) {", "cell List . add ( cell Id . id ( ) ) ;", "edge List . add ( i ) ; } }", "cells = new long [ cell List . size ( ) ] ;", "edges = new int [ edge List . size ( ) ] ;", "for ( int i = NUM_ ; i < cells . length ; i ++ ) {", "cells [ i ] = cell List . get ( i ) ;", "edges [ i ] = edge List . get ( i ) ; }", "sort Index ( ) ;", "index Computed = true ; }"]}
{"ids": "30987", "code": ["public Wait For Any Listener ( int number Of Results ) {", "this ( number Of Results , null ) ; }"]}
{"ids": "24411", "code": ["public static Object string To Value ( String string ) {", "Double d ;", "if ( string . equals ( STR_ ) ) {", "return string ; }", "if ( string . equals Ignore Case ( STR_ ) ) {", "return Boolean . TRUE ; }", "if ( string . equals Ignore Case ( STR_ ) ) {", "return Boolean . FALSE ; }", "if ( string . equals Ignore Case ( STR_ ) ) {", "return JSON Object . NULL ; }", "char b = string . char At ( NUM_ ) ;", "if ( ( b >= STR_ && b <= STR_ ) || b == STR_ || b == STR_ || b == STR_ ) {", "try {", "if ( string . index Of ( STR_ ) > - NUM_ || string . index Of ( STR_ ) > - NUM_ || string . index Of ( STR_ ) > - NUM_ ) {", "d = Double . value Of ( string ) ;", "if ( ! d . is Infinite ( ) && ! d . is Na N ( ) ) {", "return d ; } }", "else {", "Long my Long = new Long ( string ) ;", "if ( my Long . long Value ( ) == my Long . int Value ( ) ) {", "return new Integer ( my Long . int Value ( ) ) ; }", "else {", "return my Long ; } } }", "catch ( Exception ignore ) { } }", "return string ; }"]}
{"ids": "26500", "code": ["public Entity Query order By ( String ... fields ) {", "this . order By = Arrays . as List ( fields ) ;", "return this ; }"]}
{"ids": "27314", "code": ["public void remove Nodes From Partition ( List < I Group Member Node > nodes To Remove ) {", "for ( final I Group Member Node node To Remove : nodes To Remove ) {", "if ( node To Remove != null ) {", "if ( ! non Optional Non Minus Nodes . remove ( node To Remove ) ) {", "if ( node To Remove . equals ( optional Or Minus ) ) {", "optional Or Minus = null ; } } } }", "recompute Definitely Produced ( ) ; }"]}
{"ids": "49516", "code": ["public static void banner ( Logger logger , Class < ? > clazz , String method Name , String text ) {", "String string = clazz . get Simple Name ( ) + STR_ + method Name ;", "if ( text != null ) {", "string += STR_ + text ; }", "logger . info ( STR_ ) ;", "logger . info ( STR_ ) ;", "logger . info ( STR_ + string ) ;", "logger . info ( STR_ ) ; }"]}
{"ids": "60897", "code": ["private void read Object ( Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "in . default Read Object ( ) ;", "if ( resource Bundle Name != null ) {", "try {", "rb = Resource Bundle . get Bundle ( resource Bundle Name ) ; }", "catch ( Missing Resource Exception e ) {", "rb = null ; } } }"]}
{"ids": "32534", "code": ["private static void exit ( @ Nullable String err Msg , @ Nullable Options options , int exit Code ) {", "if ( err Msg != null ) echo ( STR_ + err Msg ) ;", "String runner = System . get Property ( IGNITE PROG NAME , STR_ ) ;", "int space = runner . index Of ( STR_ ) ;", "runner = runner . substring ( NUM_ , space == - NUM_ ? runner . length ( ) : space ) ;", "if ( options != null ) {", "Help Formatter formatter = new Help Formatter ( ) ;", "formatter . print Help ( runner , options ) ; }", "System . exit ( exit Code ) ; }"]}
{"ids": "62980", "code": ["private static void replace Alt Special Instructions ( ) {", "fill Instruction Map ( NUM_ , NUM_ , new Fr Instruction ( Instruction Format . D , NUM_ , NUM_ , STR_ , STR_ , STR_ , Instruction . Flow Type . NONE , false , false , andccr U 8 Simulation Code ) ) ;", "fill Instruction Map ( NUM_ , NUM_ , new Fr Instruction ( Instruction Format . D , NUM_ , NUM_ , STR_ , STR_ , STR_ , Instruction . Flow Type . NONE , false , false , stilm U 8 Simulation Code ) ) ;", "fill Instruction Map ( NUM_ , NUM_ , new Fr Instruction ( Instruction Format . D , NUM_ , NUM_ , STR_ , STR_ , STR_ , Instruction . Flow Type . NONE , false , false , orccr U 8 Simulation Code ) ) ;", "fill Instruction Map ( NUM_ , NUM_ , new Fr Instruction ( Instruction Format . D , NUM_ , NUM_ , STR_ , STR_ , STR_ , Instruction . Flow Type . NONE , false , false , addsp S 10 Simulation Code ) ) ; }"]}
{"ids": "74051", "code": ["@ Override public boolean add Sensor To Route ( String sensor Name , int mode ) {", "if ( control Sensor List . size ( ) >= MAX CONTROL SENSORS ) {", "log . warn ( STR_ , get System Name ( ) ) ; }", "Control Sensor sensor = new Control Sensor ( sensor Name ) ;", "log . debug ( STR_ , get System Name ( ) , sensor Name ) ;", "if ( ! sensor . set State ( mode ) ) {", "return false ; }", "if ( is Control Sensor Included ( sensor ) ) {", "log . debug ( STR_ , sensor Name , get System Name ( ) ) ; }", "else {", "control Sensor List . add ( sensor ) ; }", "return true ; }"]}
{"ids": "49347", "code": ["private void eliminate Backfill States ( int base State ) {", "if ( states To Backfill . contains ( new Integer ( base State ) ) ) {", "states To Backfill . remove Element ( new Integer ( base State ) ) ;", "short [ ] state = temp State Table . element At ( base State ) ;", "for ( int i = NUM_ ; i < num Categories ; i ++ ) {", "if ( state [ i ] != NUM_ ) {", "eliminate Backfill States ( state [ i ] ) ; } } } }"]}
{"ids": "6979", "code": ["static boolean separate Convex Polygons ( float [ ] verts 1 , float [ ] verts 2 , Vector 2 separation ) {", "final int length 1 = verts 1 . length ;", "final int length 2 = verts 2 . length ;", "for ( int i = NUM_ ; i < length 1 ; i += NUM_ ) {", "final int j = ( i + NUM_ ) % length 1 ;", "float proj X = verts 1 [ j + NUM_ ] - verts 1 [ i + NUM_ ] ;", "float proj Y = verts 1 [ i ] - verts 1 [ j ] ;", "final float length = ( float ) Math . sqrt ( proj X * proj X + proj Y * proj Y ) ;", "proj X /= length ;", "proj Y /= length ;", "float min 1 = Float . POSITIVE INFINITY , max 1 = Float . NEGATIVE INFINITY ;", "for ( int k = NUM_ ; k < length 1 ; k += NUM_ ) {", "final float dot = proj X * verts 1 [ k ] + proj Y * verts 1 [ k + NUM_ ] ;", "if ( dot < min 1 ) min 1 = dot ;", "if ( dot > max 1 ) max 1 = dot ; }", "float min 2 = Float . POSITIVE INFINITY , max 2 = Float . NEGATIVE INFINITY ;", "for ( int k = NUM_ ; k < length 2 ; k += NUM_ ) {", "final float dot = proj X * verts 2 [ k ] + proj Y * verts 2 [ k + NUM_ ] ;", "if ( dot < min 2 ) min 2 = dot ;", "if ( dot > max 2 ) max 2 = dot ; }", "if ( ( max 1 < min 2 ) || ( max 2 < min 1 ) ) {", "if ( null != separation ) separation . set ( proj Y , - proj X ) ;", "return true ; } }", "return false ; }"]}
{"ids": "66163", "code": ["public String payment Term ( Properties ctx , int Window No , Grid Tab m Tab , Grid Field m Field , Object value ) {", "Integer C Payment Term ID = ( Integer ) value ;", "int C Invoice ID = Env . get Context As Int ( ctx , Window No , STR_ ) ;", "if ( C Payment Term ID == null || C Payment Term ID . int Value ( ) == NUM_ || C Invoice ID == NUM_ ) return STR_ ;", "M Payment Term pt = new M Payment Term ( ctx , C Payment Term ID . int Value ( ) , null ) ;", "if ( pt . get ID ( ) == NUM_ ) return STR_ ;", "boolean valid = pt . apply ( C Invoice ID ) ;", "m Tab . set Value ( STR_ , valid ? STR_ : STR_ ) ;", "return STR_ ; }"]}
{"ids": "40410", "code": ["static void check Type Ref And Path ( int type Ref , Type Path type Path ) {", "int mask = NUM_ ;", "switch ( type Ref > > > NUM_ ) {", "case Type Reference . CLASS TYPE PARAMETER :", "case Type Reference . METHOD TYPE PARAMETER :", "case Type Reference . METHOD FORMAL PARAMETER :", "mask = NUM_ ;", "break ;", "case Type Reference . FIELD :", "case Type Reference . METHOD RETURN :", "case Type Reference . METHOD RECEIVER :", "case Type Reference . LOCAL VARIABLE :", "case Type Reference . RESOURCE VARIABLE :", "case Type Reference . INSTANCEOF :", "case Type Reference . NEW :", "case Type Reference . CONSTRUCTOR REFERENCE :", "case Type Reference . METHOD REFERENCE :", "mask = NUM_ ;", "break ;", "case Type Reference . CLASS EXTENDS :", "case Type Reference . CLASS TYPE PARAMETER BOUND :", "case Type Reference . METHOD TYPE PARAMETER BOUND :", "case Type Reference . THROWS :", "case Type Reference . EXCEPTION PARAMETER :", "mask = NUM_ ;", "break ;", "case Type Reference . CAST :", "case Type Reference . CONSTRUCTOR INVOCATION TYPE ARGUMENT :", "case Type Reference . METHOD INVOCATION TYPE ARGUMENT :", "case Type Reference . CONSTRUCTOR REFERENCE TYPE ARGUMENT :", "case Type Reference . METHOD REFERENCE TYPE ARGUMENT :", "mask = NUM_ ;", "break ;", "default :", "throw new Illegal Argument Exception ( STR_ + Integer . to Hex String ( type Ref > > > NUM_ ) ) ; }", "if ( ( type Ref & ~ mask ) != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + Integer . to Hex String ( type Ref ) ) ; }", "if ( type Path != null ) {", "for ( int i = NUM_ ; i < type Path . get Length ( ) ; ++ i ) {", "int step = type Path . get Step ( i ) ;", "if ( step != Type Path . ARRAY ELEMENT && step != Type Path . INNER TYPE && step != Type Path . TYPE ARGUMENT && step != Type Path . WILDCARD BOUND ) {", "throw new Illegal Argument Exception ( STR_ + i + STR_ + type Path ) ; }", "if ( step != Type Path . TYPE ARGUMENT && type Path . get Step Argument ( i ) != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + i + STR_ + type Path ) ; } } } }"]}
{"ids": "76677", "code": ["public static void transform Criteria ( Properties form Properties , Input Stream xsl Is , Result result ) throws SAX Exception , IO Exception , Parser Configuration Exception , Transformer Exception {", "dbf . set Namespace Aware ( true ) ;", "Document Builder builder = dbf . new Document Builder ( ) ;", "org . w 3 c . dom . Document xsl Doc = builder . parse ( xsl Is ) ;", "DOM Source ds = new DOM Source ( xsl Doc ) ;", "Transformer transformer = null ;", "synchronized ( t Factory ) {", "transformer = t Factory . new Transformer ( ds ) ; }", "transform Criteria ( form Properties , transformer , result ) ; }"]}
{"ids": "25347", "code": ["public static List < byte [ ] > split And Pad ( byte [ ] byte Array , int blocksize ) {", "List < byte [ ] > blocks = new Array List < byte [ ] > ( ) ;", "int num Blocks = ( int ) Math . ceil ( byte Array . length / ( double ) blocksize ) ;", "for ( int i = NUM_ ; i < num Blocks ; i ++ ) {", "byte [ ] block = new byte [ blocksize ] ;", "Arrays . fill ( block , ( byte ) NUM_ ) ;", "if ( i + NUM_ == num Blocks ) {", "int remaining Bytes = byte Array . length - ( i * blocksize ) ;", "System . arraycopy ( byte Array , i * blocksize , block , NUM_ , remaining Bytes ) ; }", "else {", "System . arraycopy ( byte Array , i * blocksize , block , NUM_ , blocksize ) ; }", "blocks . add ( block ) ; }", "return blocks ; }"]}
{"ids": "43921", "code": ["public void put ( E item ) throws Interrupted Exception {", "if ( ! done . get ( ) ) {", "queue . put ( item ) ; } }"]}
{"ids": "49561", "code": ["protected void notify Complete ( ) {", "final String method Name = STR_ ;", "log . fine ( CLASS NAME , method Name , STR_ , new Object [ ] { get Key ( ) , this . response , this . exception } ) ;", "synchronized ( response Lock ) {", "if ( exception == null && pending Complete ) {", "completed = true ;", "pending Complete = false ; }", "else {", "pending Complete = false ; }", "response Lock . notify All ( ) ; }", "synchronized ( sent Lock ) {", "sent = true ;", "sent Lock . notify All ( ) ; } }"]}
{"ids": "60350", "code": ["private Node < K , V > [ ] init Table ( ) {", "Node < K , V > [ ] tab ;", "int sc ;", "while ( ( tab = table ) == null || tab . length == NUM_ ) {", "if ( ( sc = size Ctl ) < NUM_ ) {", "Thread . yield ( ) ; }", "else if ( U . compare And Swap Int ( this , SIZECTL , sc , - NUM_ ) ) {", "try {", "if ( ( tab = table ) == null || tab . length == NUM_ ) {", "int n = ( sc > NUM_ ) ? sc : DEFAULT CAPACITY ;", "@ Suppress Warnings ( STR_ ) Node < K , V > [ ] nt = ( Node < K , V > [ ] ) new Node < ? , ? > [ n ] ;", "table = tab = nt ;", "sc = n - ( n > > > NUM_ ) ; } }", "finally {", "size Ctl = sc ; }", "break ; } }", "return tab ; }"]}
{"ids": "63622", "code": ["public Buffered Image draw Bar Graph With Std Dev ( String graph Title , String x Label , String y Label , Hash Map < Comparable Label , Integer [ ] > bar Data Points , String [ ] bar Labels , Long std Dev High , Long std Dev Low , Long graph Max Value ) {", "Buffered Image bi = new Buffered Image ( this . WIDTH , this . HEIGHT , Buffered Image . TYPE INT ARGB ) ;", "Graphics 2 D g 2 d = bi . create Graphics ( ) ;", "Rendering Hints render Hints = new Rendering Hints ( Rendering Hints . KEY ANTIALIASING , Rendering Hints . VALUE ANTIALIAS ON ) ;", "g 2 d . set Rendering Hints ( render Hints ) ;", "draw Chart And Graph Rectangles ( g 2 d ) ;", "draw Bar Legend ( g 2 d , STR_ , bar Labels , std Dev High , std Dev Low ) ;", "draw Title And Labels ( g 2 d , graph Title , x Label , y Label ) ;", "Collection < Integer [ ] > value Collection = bar Data Points . values ( ) ;", "Set < Comparable Label > date Key Set = bar Data Points . key Set ( ) ;", "long max Value = NUM_ ;", "for ( Integer [ ] int Array : value Collection ) {", "for ( Integer int Value : int Array ) {", "if ( max Value < int Value ) {", "max Value = int Value ; } } }", "long y Max Mark = NUM_ ;", "int y Label X Offset = NUM_ ;", "y Max Mark = determine Y Max Mark ( max Value , std Dev High , graph Max Value ) ;", "draw Y Axis Divisions ( g 2 d , y Max Mark , y Label X Offset ) ;", "Array List < Comparable Label > ordered Date Set = new Array List < Comparable Label > ( ) ;", "ordered Date Set . add All ( date Key Set ) ;", "Collections . sort ( ordered Date Set ) ;", "draw X Axis Divisions ( g 2 d , ordered Date Set ) ;", "draw Bars On Graph ( g 2 d , ordered Date Set , bar Data Points , y Max Mark ) ;", "if ( std Dev High != null ) {", "draw Std Dev Line ( g 2 d , std Dev High , y Max Mark , this . std Dev High Color ) ; }", "if ( std Dev Low != null ) {", "draw Std Dev Line ( g 2 d , std Dev Low , y Max Mark , this . std Dev Low Color ) ; }", "return bi ; }"]}
{"ids": "6845", "code": ["public synchronized boolean load Public Key ( ) {", "if ( ! has ( STR_ ) || ! has ( STR_ ) ) return false ;", "String encoded Key = get String ( STR_ ) ;", "String algorithm = get String ( STR_ ) ;", "Public Key pub = IO . decode Public Key ( encoded Key , algorithm ) ;", "if ( pub != null ) {", "public key = pub ;", "key algorithm = algorithm ;", "set Peer Hash ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "81240", "code": ["private String extract Project Name From Uri ( @ Not Null String uri ) {", "int index Finish Project Name = uri . last Index Of ( STR_ ) ;", "int index Start Project Name = uri . last Index Of ( STR_ ) != - NUM_ ? uri . last Index Of ( STR_ ) + NUM_ : ( uri . last Index Of ( STR_ ) + NUM_ ) ;", "if ( index Start Project Name != NUM_ && index Start Project Name < index Finish Project Name ) {", "return uri . substring ( index Start Project Name , index Finish Project Name ) ; }", "if ( index Start Project Name != NUM_ ) {", "return uri . substring ( index Start Project Name ) ; }", "return STR_ ; }"]}
{"ids": "12731", "code": ["private void load Text Data ( Data Input Stream dis ) throws IO Exception {", "for ( int f = NUM_ ; f < num Frames ; f ++ ) {", "times [ f ] = Float . parse Float ( General . read Word ( dis ) ) ;", "General . read Word ( dis ) ;", "for ( int c = NUM_ ; c < num Channels ; c ++ ) {", "frames [ f ] [ c ] = Float . parse Float ( General . read Word ( dis ) ) ; } } }"]}
{"ids": "41853", "code": ["public void add Swipe Listener ( Swipe Listener listener ) {", "if ( m Listeners == null ) {", "m Listeners = new Array List < Swipe Listener > ( ) ; }", "m Listeners . add ( listener ) ; }"]}
{"ids": "44581", "code": ["public static boolean is Gzip Content ( String content Encoding ) {", "return content Encoding != null && content Encoding . contains ( STR_ ) ; }"]}
{"ids": "1698", "code": ["public synchronized boolean check Size ( final int size Checked ) {", "if ( ! started ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( size Checked > buffer Size ) {", "throw new Illegal State Exception ( STR_ + buffer Size + STR_ ) ; }", "if ( buffer Limit == NUM_ || buffer . writer Index ( ) + size Checked > buffer Limit ) {", "flush ( ) ;", "delay Flush = true ;", "final int remaining In File = buffer Observer . get Remaining Bytes ( ) ;", "if ( size Checked > remaining In File ) {", "return false ; }", "else {", "buffer Limit = Math . min ( remaining In File , buffer Size ) ;", "return true ; } }", "else {", "delay Flush = true ;", "return true ; } }"]}
{"ids": "41819", "code": ["void reclaim Scrap Views ( List < View > views ) {", "if ( m View Type Count == NUM_ ) {", "views . add All ( m Current Scrap ) ; }", "else {", "final int view Type Count = m View Type Count ;", "final Array List < View > [ ] scrap Views = m Scrap Views ;", "for ( int i = NUM_ ; i < view Type Count ; ++ i ) {", "final Array List < View > scrap Pile = scrap Views [ i ] ;", "views . add All ( scrap Pile ) ; } } }"]}
{"ids": "42704", "code": ["private void format Node To ( Formatter f , int level , Radix Tree Node < T > node ) {", "for ( int i = NUM_ ; i < level ; i ++ ) {", "f . format ( STR_ ) ; }", "f . format ( STR_ ) ;", "for ( int i = NUM_ ; i < level ; i ++ ) {", "f . format ( STR_ ) ; }", "if ( node . is Real ( ) == true ) f . format ( STR_ , node . get Key ( ) , node . get Value ( ) ) ;", "else f . format ( STR_ , node . get Key ( ) ) ;", "for ( Radix Tree Node < T > child : node . get Childern ( ) ) {", "format Node To ( f , level + NUM_ , child ) ; } }"]}
{"ids": "213", "code": ["protected void start Download ( int blocks ) {", "if ( blocks > NUM_ ) log . info ( STR_ + blocks + STR_ + ( blocks > NUM_ ? STR_ : STR_ ) ) ; }"]}
{"ids": "17257", "code": ["public void add ( int start , int end , int handler , int type ) {", "if ( start < end ) entries . add ( new Exception Table Entry ( start , end , handler , type ) ) ; }"]}
{"ids": "40841", "code": ["private void free Kick ( Team offense ) {", "if ( game Time <= NUM_ ) return ;", "else {", "if ( game Time < NUM_ && ( ( game Poss && ( away Score - home Score ) <= NUM_ && ( away Score - home Score ) > NUM_ ) || ( ! game Poss && ( home Score - away Score ) <= NUM_ && ( home Score - away Score ) > NUM_ ) ) ) {", "if ( offense . get K ( NUM_ ) . rat Kick Fum * Math . random ( ) > NUM_ || Math . random ( ) < NUM_ ) {", "game Event Log += get Event Prefix ( ) + offense . abbr + STR_ + offense . get K ( NUM_ ) . name + STR_ + offense . abbr + STR_ ;", "game Yard Line = NUM_ ;", "game Down = NUM_ ;", "game Yards Need = NUM_ ; }", "else {", "game Event Log += get Event Prefix ( ) + offense . abbr + STR_ + offense . get K ( NUM_ ) . name + STR_ ;", "game Poss = ! game Poss ;", "game Yard Line = NUM_ ;", "game Down = NUM_ ;", "game Yards Need = NUM_ ; }", "game Time -= NUM_ + NUM_ * Math . random ( ) ; }", "else {", "game Yard Line = ( int ) ( NUM_ - ( offense . get K ( NUM_ ) . rat Kick Pow + NUM_ - NUM_ * Math . random ( ) ) ) ;", "if ( game Yard Line <= NUM_ ) game Yard Line = NUM_ ;", "game Down = NUM_ ;", "game Yards Need = NUM_ ;", "game Poss = ! game Poss ;", "game Time -= NUM_ * Math . random ( ) ; } } }"]}
{"ids": "57139", "code": ["private void process New Port ( long sw , short p ) {", "if ( is Link Discovery Suppressed ( sw , p ) ) {", "return ; }", "IOF Switch iof Switch = floodlight Provider . get Switch ( sw ) ;", "if ( iof Switch == null ) return ;", "if ( auto Port Fast Feature && iof Switch . is Fast Port ( p ) ) {", "return ; }", "Node Port Tuple npt = new Node Port Tuple ( sw , p ) ;", "discover ( sw , p ) ;", "if ( ! iof Switch . is Fast Port ( p ) ) {", "add To Quarantine Queue ( npt ) ; }", "else {", "add To Maintenance Queue ( npt ) ; } }"]}
{"ids": "62331", "code": ["public static void put 3 Byte Int ( Byte Buffer buffer , int val ) {", "put 3 Byte Int ( buffer , val , buffer . order ( ) ) ; }"]}
{"ids": "82011", "code": ["public static void assert No Exception ( Runnable expression , String error Message ) {", "if ( verbose ) {", "log ( STR_ + expression + STR_ + error Message + STR_ ) ; }", "try {", "expression . run ( ) ; }", "catch ( Runtime Exception failure ) {", "Test Utils . fail ( error Message ) ; } }"]}
{"ids": "81673", "code": ["@ Override public int index Of ( Object object ) {", "return index Of ( object , NUM_ ) ; }"]}
{"ids": "52523", "code": ["protected Response Format Type generate Accept Format ( String format ) throws Bad Api Request Exception {", "try {", "return format == null ? Response Format Type . JSON : Response Format Type . value Of ( format . to Upper Case ( Locale . ENGLISH ) ) ; }", "catch ( Illegal Argument Exception e ) {", "LOG . error ( ACCEPT FORMAT INVALID . log Format ( format ) , e ) ;", "throw new Bad Api Request Exception ( ACCEPT FORMAT INVALID . format ( format ) ) ; } }"]}
{"ids": "85590", "code": ["public Shared Object ( Map < String , Object > data , String name , String path , boolean persistent ) {", "super ( ) ;", "this . name = name ;", "this . path = path ;", "this . persistent SO = persistent ;", "owner Message = new Shared Object Message ( null , name , NUM_ , persistent ) ;", "creation Time = System . current Time Millis ( ) ;", "super . set Attributes ( data ) ; }"]}
{"ids": "72691", "code": ["public static String date To String ( Date date ) {", "if ( date == null ) {", "return null ; }", "else {", "Date Format df = new Simple Date Format ( date Format ) ;", "df . set Time Zone ( utc ) ;", "return df . format ( date ) ; } }"]}
{"ids": "20421", "code": ["public static String info First Last Pixels ( Image Line Int line ) {", "return line . img Info . channels == NUM_ ? String . format ( STR_ , line . scanline [ NUM_ ] , line . scanline [ line . scanline . length - NUM_ ] ) : String . format ( STR_ , line . scanline [ NUM_ ] , line . scanline [ NUM_ ] , line . scanline [ NUM_ ] , line . scanline [ line . scanline . length - line . img Info . channels ] , line . scanline [ line . scanline . length - line . img Info . channels + NUM_ ] , line . scanline [ line . scanline . length - line . img Info . channels + NUM_ ] ) ; }"]}
{"ids": "69151", "code": ["public static Iterable < Element > elements ( Node List nodes ) {", "return null ; }"]}
{"ids": "29324", "code": ["public static int min Distance ( String word 1 , String word 2 ) {", "if ( word 1 . equals ( word 2 ) ) return NUM_ ;", "int m = word 1 . length ( ) ;", "int n = word 2 . length ( ) ;", "int [ ] [ ] d = new int [ m + NUM_ ] [ n + NUM_ ] ;", "d [ NUM_ ] [ NUM_ ] = NUM_ ;", "for ( int i = NUM_ ; i < m + NUM_ ; i ++ ) d [ i ] [ NUM_ ] = i ;", "for ( int j = NUM_ ; j < n + NUM_ ; j ++ ) d [ NUM_ ] [ j ] = j ;", "for ( int i = NUM_ ; i < m + NUM_ ; i ++ ) {", "for ( int j = NUM_ ; j < n + NUM_ ; j ++ ) {", "d [ i ] [ j ] = Math . min ( Math . min ( d [ i ] [ j - NUM_ ] + NUM_ , d [ i - NUM_ ] [ j ] + NUM_ ) , word 1 . char At ( i - NUM_ ) == word 2 . char At ( j - NUM_ ) ? d [ i - NUM_ ] [ j - NUM_ ] : d [ i - NUM_ ] [ j - NUM_ ] + NUM_ ) ; } }", "return d [ m ] [ n ] ; }"]}
{"ids": "34612", "code": ["public void add Url ( String url ) {", "Set < String > urls = get Cached Urls ( ) ;", "urls . add ( url ) ;", "put Cached Urls ( urls ) ;", "update Notification ( urls ) ; }"]}
{"ids": "66541", "code": ["private void close Database Connection ( Connection connection ) {", "if ( connection == null ) return ;", "try {", "connection . close ( ) ; }", "catch ( SQL Exception e ) { }", "connection = null ;", "return ; }"]}
{"ids": "16908", "code": ["public void add Unnamed Task ( Tmm Task task ) {", "if ( unnamed Task Executor == null || unnamed Task Executor . is Shutdown ( ) ) {", "unnamed Task Executor = create Unnamed Task Executor ( ) ; }", "task . add Listener ( this ) ;", "task . set State ( Task State . QUEUED ) ;", "unnamed Task Executor . execute ( task ) ; }"]}
{"ids": "27468", "code": ["public Path ( final Vertex v 0 , final Vertex v 1 , final Edge Sample edge Sample ) {", "if ( v 0 == null ) throw new Illegal Argument Exception ( ) ;", "if ( v 1 == null ) throw new Illegal Argument Exception ( ) ;", "if ( v 0 . sample == null ) throw new Illegal Argument Exception ( ) ;", "if ( edge Sample == null ) throw new Illegal Argument Exception ( ) ;", "if ( edge Sample . get Sample ( ) == null ) throw new Illegal Argument Exception ( ) ;", "this . vertices = new Vertex [ ] { v 0 , v 1 } ;", "this . preds = get Predicates ( vertices ) ;", "this . edge Sample = edge Sample ;", "this . sum Est Read = v 0 . sample . est Card + edge Sample . est Read ;", "this . sum Est Card = edge Sample . est Card ;", "this . sum Est Cost = get Cost ( this . sum Est Read , this . sum Est Card ) ; }"]}
{"ids": "11235", "code": ["public boolean evaluate ( Map record ) {", "Object rec Val = record . get ( key Field ) ;", "return op . evaluate ( this . val , rec Val ) ; }"]}
{"ids": "71867", "code": ["public char [ ] to Char Array ( ) {", "Charset utf 8 = Charset . for Name ( STR_ ) ;", "Char Buffer char Buffer = utf 8 . decode ( Byte Buffer . wrap ( buffer , offset , length ) ) ;", "char [ ] chars = new char [ char Buffer . remaining ( ) ] ;", "char Buffer . get ( chars ) ;", "return chars ; }"]}
{"ids": "85522", "code": ["public static byte [ ] chars 2 utf ( char [ ] src , int sindex , int len ) {", "byte [ ] dst = new byte [ len * NUM_ ] ;", "int len 1 = chars 2 utf ( src , sindex , dst , NUM_ , len ) ;", "byte [ ] result = new byte [ len 1 ] ;", "System . arraycopy ( dst , NUM_ , result , NUM_ , len 1 ) ;", "return result ; }"]}
{"ids": "66528", "code": ["private void read Reference ( ) {", "String sql ;", "if ( Env . is Base Language ( Env . get Ctx ( ) , STR_ ) ) sql = STR_ + STR_ ;", "else sql = STR_ + STR_ + STR_ + STR_ + Env . get AD Language ( Env . get Ctx ( ) ) + STR_ + STR_ ;", "Array List < String > v value = new Array List < String > ( ) ;", "Array List < String > v name = new Array List < String > ( ) ;", "Array List < String > v description = new Array List < String > ( ) ;", "try {", "Prepared Statement pstmt = DB . prepare Statement ( sql , null ) ;", "Result Set rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) ) {", "String value = rs . get String ( NUM_ ) ;", "String name = rs . get String ( NUM_ ) ;", "String description = rs . get String ( NUM_ ) ;", "if ( description == null ) description = STR_ ;", "v value . add ( value ) ;", "v name . add ( name ) ;", "v description . add ( description ) ; }", "rs . close ( ) ;", "pstmt . close ( ) ; }", "catch ( SQL Exception e ) {", "log . log ( Level . SEVERE , sql , e ) ; }", "int size = v value . size ( ) ;", "s value = new String [ size ] ;", "s name = new String [ size ] ;", "s description = new String [ size ] ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "s value [ i ] = ( String ) v value . get ( i ) ;", "s name [ i ] = ( String ) v name . get ( i ) ;", "s description [ i ] = ( String ) v description . get ( i ) ; } }"]}
{"ids": "25948", "code": ["private Carbon Dictionary Sort Info create Column Sort Info ( Carbon Dictionary Sort Model [ ] dictionary Sort Models ) {", "int [ ] sort Index ;", "int [ ] sort Index Inverted ;", "Arrays . sort ( dictionary Sort Models ) ;", "sort Index = new int [ dictionary Sort Models . length ] ;", "sort Index Inverted = new int [ dictionary Sort Models . length ] ;", "for ( int i = NUM_ ; i < dictionary Sort Models . length ; i ++ ) {", "Carbon Dictionary Sort Model dictionary Sort Model = dictionary Sort Models [ i ] ;", "sort Index [ i ] = dictionary Sort Model . get Key ( ) ;", "sort Index Inverted [ dictionary Sort Model . get Key ( ) - NUM_ ] = i + NUM_ ; }", "dictionary Sort Models = null ;", "List < Integer > sort Index List = convert To List ( sort Index ) ;", "List < Integer > sort Index Inverted List = convert To List ( sort Index Inverted ) ;", "return new Carbon Dictionary Sort Info ( sort Index List , sort Index Inverted List ) ; }"]}
{"ids": "67946", "code": ["public static void agentmain ( String agent Args , Instrumentation inst ) throws Exception {", "synchronized ( JVM Agent . class ) {", "if ( instance == null ) {", "instance = new JVM Agent ( inst ) ;", "wait For Instance . count Down ( ) ; } } }"]}
{"ids": "66593", "code": ["public void close ( ) {", "Handler [ ] handler Array = m logger . get Handlers ( ) ;", "for ( int i = NUM_ ; i < handler Array . length ; i ++ ) {", "Handler h = handler Array [ i ] ;", "h . flush ( ) ;", "h . close ( ) ;", "m logger . remove Handler ( h ) ; } }"]}
{"ids": "60388", "code": ["public static List < String > split Text ( String text ) {", "int start Line = NUM_ ;", "int i = NUM_ ;", "int n = text . length ( ) ;", "Array List < String > rc = new Array List < String > ( ) ;", "while ( i < n ) {", "switch ( text . char At ( i ) ) {", "case STR_ :", "i ++ ;", "if ( i < n && text . char At ( i ) == STR_ ) {", "i ++ ; }", "rc . add ( text . substring ( start Line , i ) ) ;", "start Line = i ;", "break ;", "case STR_ :", "i ++ ;", "if ( i < n && text . char At ( i ) == STR_ ) {", "i ++ ; }", "rc . add ( text . substring ( start Line , i ) ) ;", "start Line = i ;", "break ;", "default :", "i ++ ; } }", "if ( start Line == text . length ( ) ) {", "rc . add ( STR_ ) ; }", "else {", "rc . add ( text . substring ( start Line , i ) ) ; }", "return rc ; }"]}
{"ids": "10013", "code": ["Country Code Source maybe Strip International Prefix And Normalize ( String Builder number , String possible Idd Prefix ) {", "if ( number . length ( ) == NUM_ ) {", "return Country Code Source . FROM DEFAULT COUNTRY ; }", "Matcher m = PLUS CHARS PATTERN . matcher ( number ) ;", "if ( m . looking At ( ) ) {", "number . delete ( NUM_ , m . end ( ) ) ;", "normalize ( number ) ;", "return Country Code Source . FROM NUMBER WITH PLUS SIGN ; }", "Pattern idd Pattern = regex Cache . get Pattern For Regex ( possible Idd Prefix ) ;", "normalize ( number ) ;", "return parse Prefix As Idd ( idd Pattern , number ) ? Country Code Source . FROM NUMBER WITH IDD : Country Code Source . FROM DEFAULT COUNTRY ; }"]}
{"ids": "60882", "code": ["@ Override public void write ( int value ) {", "digest . update ( ( byte ) value ) ; }"]}
{"ids": "26240", "code": ["public boolean is Manufactured ( boolean ignore Supplier Products ) {", "List < Generic Value > supplier Products = null ;", "try {", "supplier Products = product . get Related ( STR_ , Util Misc . to Map ( STR_ , STR_ ) , Util Misc . to List ( STR_ ) , false ) ; }", "catch ( Generic Entity Exception gee ) {", "Debug . log Error ( STR_ , module ) ; }", "supplier Products = Entity Util . filter By Date ( supplier Products , Util Date Time . now Timestamp ( ) , STR_ , STR_ , true ) ;", "return children Nodes . size ( ) > NUM_ && ( ignore Supplier Products || Util Validate . is Empty ( supplier Products ) ) ; }"]}
{"ids": "62901", "code": ["private void add Code From Field ( String Builder sb , Field f ) {", "try {", "sb . append ( f . get Name ( ) + STR_ + f . get Int ( Key Event . class ) ) ; }", "catch ( Illegal Argument Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( Illegal Access Exception e ) {", "e . print Stack Trace ( ) ; }", "sb . append ( STR_ ) ; }"]}
{"ids": "75946", "code": ["protected boolean scroll Up ( Text View widget , Spannable buffer , int amount ) {", "final Layout layout = widget . get Layout ( ) ;", "final int top = widget . get Scroll Y ( ) ;", "int top Line = layout . get Line For Vertical ( top ) ;", "if ( layout . get Line Top ( top Line ) == top ) {", "top Line -= NUM_ ; }", "if ( top Line >= NUM_ ) {", "top Line = Math . max ( top Line - amount + NUM_ , NUM_ ) ;", "Touch . scroll To ( widget , layout , widget . get Scroll X ( ) , layout . get Line Top ( top Line ) ) ;", "return true ; }", "return false ; }"]}
{"ids": "43622", "code": ["public void load ( String filename ) {", "++ num Mappings ;", "load Class File ( filename ) ; }"]}
{"ids": "11656", "code": ["protected void fill Face Tool Bar ( J Tool Bar face TB , Button Group bg ) {", "for ( Edit Tool Loader loader : loader List ) {", "String [ ] classnames = loader . get Editable Classes ( ) ;", "for ( int i = NUM_ ; i < classnames . length ; i ++ ) {", "Image Icon icon = loader . get Icon ( classnames [ i ] ) ;", "J Toggle Button btn = new J Toggle Button ( icon , false ) ;", "btn . set Tool Tip Text ( loader . get Pretty Name ( classnames [ i ] ) ) ;", "btn . set Focusable ( false ) ;", "btn . set Action Command ( classnames [ i ] ) ;", "btn . add Action Listener ( this ) ;", "bg . add ( btn ) ;", "face TB . add ( btn ) ; } } }"]}
{"ids": "86841", "code": ["public void write To File ( File filename ) throws IO Exception {", "File Utils . string To File ( m Text . to String ( ) , filename ) ; }"]}
{"ids": "85745", "code": ["protected void transform Rects Touch ( Array List < Rect F > rects ) {", "for ( int i = NUM_ ; i < rects . size ( ) ; i ++ ) {", "m Matrix Touch . map Rect ( rects . get ( i ) ) ; } }"]}
{"ids": "51435", "code": ["@ Override public final int array Offset ( ) {", "return protected Array Offset ( ) ; }"]}
{"ids": "18537", "code": ["public DOM Test Document Builder Factory new Instance ( Document Builder Setting [ ] new Settings ) throws DOM Test Incompatible Exception {", "if ( new Settings == null ) {", "return this ; }", "Document Builder Setting [ ] merged Settings = merge Settings ( new Settings ) ;", "return new Batik Test Document Builder Factory ( merged Settings ) ; }"]}
{"ids": "12420", "code": ["public float [ ] value Array ( float [ ] array ) {", "if ( array == null || array . length != size ( ) ) {", "array = new float [ count ] ; }", "System . arraycopy ( values , NUM_ , array , NUM_ , count ) ;", "return array ; }"]}
{"ids": "34965", "code": ["public static Set < Type Variable > method Type To Targets ( final Annotated Executable Type method Type ) {", "final List < Annotated Type Variable > annotated Type Vars = method Type . get Type Variables ( ) ;", "final Set < Type Variable > targets = new Linked Hash Set < > ( annotated Type Vars . size ( ) ) ;", "for ( final Annotated Type Variable atv : annotated Type Vars ) {", "targets . add ( atv . get Underlying Type ( ) ) ; }", "return targets ; }"]}
{"ids": "51790", "code": ["private void validate Table Meta Data Single Row ( String table Name Pattern , String [ ] types , Map < Table Meta Data , Object > validation Rules ) throws Exception {", "check Validation Rules Complete ( validation Rules ) ;", "try ( Result Set tables = dbmd . get Tables ( null , null , table Name Pattern , types ) ) {", "assert True ( STR_ , tables . next ( ) ) ;", "validate Row Values ( tables , validation Rules ) ;", "assert False ( STR_ , tables . next ( ) ) ; } }"]}
{"ids": "13331", "code": ["public void flush ( ) throws IO Exception {", "try {", "writer . write ( buffer , NUM_ , pos ) ;", "writer . flush ( ) ; }", "catch ( IO Exception except ) {", "if ( exception == null ) exception = except ;", "throw except ; }", "pos = NUM_ ; }"]}
{"ids": "36553", "code": ["private J Menu make Log Level Menu ( ) {", "return new Log Level Menu ( ) ; }"]}
{"ids": "51472", "code": ["@ Override public void close ( ) throws IO Exception {", "synchronized ( lock ) {", "buf = null ;", "in . close ( ) ; } }"]}
{"ids": "9694", "code": ["public D Get Alias ( J Frame parent , String title , String alias ) {", "super ( parent , title , Dialog . Modality Type . DOCUMENT MODAL ) ;", "init Components ( alias ) ; }"]}
{"ids": "35697", "code": ["public static void close Quietly ( Closeable closeable ) {", "if ( closeable != null ) {", "try {", "closeable . close ( ) ; }", "catch ( Runtime Exception rethrown ) {", "throw rethrown ; }", "catch ( Exception ignored ) { } } }"]}
{"ids": "49958", "code": ["public static Array List < Hop > deep Copy Hops Dag ( Array List < Hop > hops ) throws Hops Exception {", "Array List < Hop > ret = new Array List < Hop > ( ) ;", "try {", "Hash Map < Long , Hop > memo = new Hash Map < Long , Hop > ( ) ;", "for ( Hop hop Root : hops ) ret . add ( r Deep Copy Hops Dag ( hop Root , memo ) ) ; }", "catch ( Exception ex ) {", "throw new Hops Exception ( ex ) ; }", "return ret ; }"]}
{"ids": "1592", "code": ["public void add All ( T ... items ) {", "if ( m Event Delegate != null ) m Event Delegate . add Data ( items == null ? NUM_ : items . length ) ;", "if ( items != null && items . length != NUM_ ) {", "synchronized ( m Lock ) {", "Collections . add All ( m Objects , items ) ; } }", "if ( m Notify On Change ) notify Data Set Changed ( ) ; }"]}
{"ids": "84471", "code": ["private void replace Impl ( final int start Index , final int end Index , final int remove Len , final String insert Str , final int insert Len ) {", "final int new Size = size - remove Len + insert Len ;", "if ( insert Len != remove Len ) {", "ensure Capacity ( new Size ) ;", "System . arraycopy ( buffer , end Index , buffer , start Index + insert Len , size - end Index ) ;", "size = new Size ; }", "if ( insert Len > NUM_ ) {", "insert Str . get Chars ( NUM_ , insert Len , buffer , start Index ) ; } }"]}
{"ids": "59027", "code": ["public void testtest Is Last ( ) throws SQL Exception {", "assert False ( target . is Last ( ) ) ;", "target . absolute ( - NUM_ ) ;", "assert True ( target . is Last ( ) ) ;", "assert False ( empty Target . is Last ( ) ) ;", "assert False ( empty Target . next ( ) ) ;", "assert False ( empty Target . is Last ( ) ) ;", "try {", "target . close ( ) ;", "target . is Last ( ) ;", "fail ( STR_ ) ; }", "catch ( SQL Exception e ) { } }"]}
{"ids": "84289", "code": ["public final void add Helper Text ( @ Non Null final Char Sequence helper Text ) {", "ensure Not Null ( helper Text , STR_ ) ;", "ensure Not Empty ( helper Text , STR_ ) ;", "if ( ! helper Texts . contains ( helper Text ) ) {", "helper Texts . add ( helper Text ) ;", "verify Password Strength ( ) ; } }"]}
{"ids": "21693", "code": ["public static String generate Native Guid ( Db Client db Client , Volume volume ) throws IO Exception {", "Storage System device = db Client . query Object ( Storage System . class , volume . get Storage Controller ( ) ) ;", "return String . format ( STR_ + VOLUME + STR_ , device Type Map . get ( device . get System Type ( ) ) , device . get Serial Number ( ) , volume . get Native Id ( ) ) ; }"]}
{"ids": "24861", "code": ["public Agent Mappings save Agent Mappings ( Agent Mappings agent Mappings , boolean check Environments ) throws Business Exception , JAXB Exception , IO Exception {", "if ( check Environments ) {", "check Environments ( agent Mappings ) ; }", "Agent Mappings current ;", "do {", "current = agent Mappings Reference . get ( ) ;", "if ( current . get Revision ( ) != agent Mappings . get Revision ( ) ) {", "throw new Business Exception ( STR_ , Configuration Interface Error Code Enum . REVISION CHECK FAILED ) ; } }", "while ( ! agent Mappings Reference . compare And Set ( current , agent Mappings ) ) ;", "agent Mappings . set Revision ( agent Mappings . get Revision ( ) + NUM_ ) ;", "save Agent Mapping ( agent Mappings ) ;", "publish Agent Mappings Update Event ( ) ;", "return agent Mappings ; }"]}
{"ids": "51325", "code": ["public E push ( E object ) {", "add Element ( object ) ;", "return object ; }"]}
{"ids": "39578", "code": ["protected void new Cert Btn Listener ( ) {", "New Certificate Dialog Data data = new New Certificate Dialog Data ( ) ;", "New Certificate Dialog dialog = new New Certificate Dialog ( get Shell ( ) , data , STR_ ) ;", "int return Code = dialog . open ( ) ;", "if ( return Code == Window . OK ) {", "String cert Path = data . get Cer File Path ( ) ;", "cert Txt . set Text ( cert Path != null ? cert Path . replace ( STR_ , STR_ ) : cert Path ) ;", "cert Info Txt . set Text ( get Cert Info ( cert Txt . get Text ( ) ) ) ; } }"]}
{"ids": "37348", "code": ["public static void generate Mov ( final I Translation Environment environment , final long base Offset , final I Instruction instruction , final List < Reil Instruction > instructions ) throws Internal Translation Exception {", "Preconditions . check Not Null ( environment , STR_ ) ;", "Preconditions . check Not Null ( instruction , STR_ ) ;", "Preconditions . check Not Null ( instructions , STR_ ) ;", "long reil Offset = base Offset ;", "final List < ? extends I Operand Tree > operands = instruction . get Operands ( ) ;", "final Translation Result load Source = Helpers . translate Operand ( environment , reil Offset , operands . get ( NUM_ ) , true ) ;", "instructions . add All ( load Source . get Instructions ( ) ) ;", "reil Offset = base Offset + instructions . size ( ) ;", "final Translation Result load Dest = Helpers . translate Operand ( environment , reil Offset , operands . get ( NUM_ ) , false ) ;", "instructions . add All ( load Dest . get Instructions ( ) ) ;", "reil Offset = base Offset + instructions . size ( ) ;", "Helpers . write Back ( environment , reil Offset , operands . get ( NUM_ ) , load Source . get Register ( ) , load Dest . get Size ( ) , load Dest . get Address ( ) , load Dest . get Type ( ) , instructions ) ; }"]}
{"ids": "18082", "code": ["public void characters ( char ch [ ] , int start , int length ) throws org . xml . sax . SAX Exception {", "if ( ! m should Process ) return ;", "XSLT Element Processor elem Processor = get Current Processor ( ) ;", "XSLT Element Def def = elem Processor . get Elem Def ( ) ;", "if ( def . get Type ( ) != XSLT Element Def . T PCDATA ) elem Processor = def . get Processor For ( null , STR_ ) ;", "if ( null == elem Processor ) {", "if ( ! XML Character Recognizer . is White Space ( ch , start , length ) ) error ( XSL Messages . create Message ( XSLT Error Resources . ER NONWHITESPACE NOT ALLOWED IN POSITION , null ) , null ) ; }", "else elem Processor . characters ( this , ch , start , length ) ; }"]}
{"ids": "60115", "code": ["public boolean remove Entry ( int x Index , int data Set Index ) {", "if ( data Set Index >= m Data Sets . size ( ) ) return false ;", "T data Set = m Data Sets . get ( data Set Index ) ;", "Entry e = data Set . get Entry For X Index ( x Index ) ;", "return remove Entry ( e , data Set Index ) ; }"]}
{"ids": "79910", "code": ["public Vec 2 to Vector ( Point 2 D v ) {", "return new Vec 2 ( to Meters ( v . get X ( ) ) , to Meters ( - v . get Y ( ) ) ) ; }"]}
{"ids": "21591", "code": ["@ Override public void terminate Any Restore Sessions ( Storage System storage , Block Object from , URI volume , Task Completer task Completer ) throws Exception {", "Block Object block Object = Block Object . fetch ( db Client , volume ) ;", "Collection < CIM Object Path > sync Objects = null ;", "if ( storage . check If Vmax 3 ( ) ) {", "sync Objects = helper . get Settings Define State Paths ( storage , block Object , ( Block Snapshot ) from ) ; }", "else {", "sync Objects = get Restored Or Mixed State Sync Objects ( storage , block Object ) ; }", "for ( CIM Object Path sync Object : sync Objects ) {", "resume Snapshot ( storage , from , block Object , sync Object , task Completer ) ; } }"]}
{"ids": "79401", "code": ["public static < T > Set < T > to Set ( T obj 1 , T obj 2 , T obj 3 , T obj 4 , T obj 5 , T obj 6 ) {", "Set < T > the Set = new Linked Hash Set < T > ( ) ;", "the Set . add ( obj 1 ) ;", "the Set . add ( obj 2 ) ;", "the Set . add ( obj 3 ) ;", "the Set . add ( obj 4 ) ;", "the Set . add ( obj 5 ) ;", "the Set . add ( obj 6 ) ;", "return the Set ; }"]}
{"ids": "31224", "code": ["protected void write Graphic Ctrl Ext ( ) throws IO Exception {", "out . write ( NUM_ ) ;", "out . write ( NUM_ ) ;", "out . write ( NUM_ ) ;", "int transp , disp ;", "if ( transparent == - NUM_ ) {", "transp = NUM_ ;", "disp = NUM_ ; }", "else {", "transp = NUM_ ;", "disp = NUM_ ; }", "if ( dispose >= NUM_ ) {", "disp = dispose & NUM_ ; }", "disp <<= NUM_ ;", "out . write ( NUM_ | disp | NUM_ | transp ) ;", "write Short ( delay ) ;", "out . write ( trans Index ) ;", "out . write ( NUM_ ) ; }"]}
{"ids": "84594", "code": ["public final double do Operation ( ) throws Operator Failed Exception {", "int index ;", "if ( update Map == null ) {", "index = Math Utils . next Int ( parameter . get Dimension ( ) ) ; }", "else {", "index = update Map . get ( Math Utils . next Int ( update Map Size ) ) ; }", "double draw = ( NUM_ * Math Utils . next Double ( ) - NUM_ ) * window Size ;", "double new Value = parameter . get Parameter Value ( index ) + draw ;", "final Bounds < Double > bounds = parameter . get Bounds ( ) ;", "final double lower = ( lower Operator Bound == null ? bounds . get Lower Limit ( index ) : Math . max ( bounds . get Lower Limit ( index ) , lower Operator Bound ) ) ;", "final double upper = ( upper Operator Bound == null ? bounds . get Upper Limit ( index ) : Math . min ( bounds . get Upper Limit ( index ) , upper Operator Bound ) ) ;", "if ( condition == Boundary Condition . reflecting ) {", "new Value = reflect Value ( new Value , lower , upper ) ; }", "else if ( condition == Boundary Condition . absorbing && ( new Value < lower || new Value > upper ) ) {", "return NUM_ ; }", "else if ( new Value < lower || new Value > upper ) {", "throw new Operator Failed Exception ( STR_ ) ; }", "parameter . set Parameter Value ( index , new Value ) ;", "return NUM_ ; }"]}
{"ids": "32396", "code": ["public Collection < Object > injectables ( ) {", "return Collections . empty List ( ) ; }"]}
{"ids": "69317", "code": ["private void update Effective Dimensions ( ) {", "effective Width = Math . max ( NUM_ , width - left Border - right Border ) ;", "effective Height = Math . max ( NUM_ , height - top Border - bottom Border ) ; }"]}
{"ids": "54320", "code": ["public void add Attribute ( Attribute Info info ) {", "if ( attribute == null ) attribute = new Array List ( ) ;", "Attribute Info . remove ( attribute , info . get Name ( ) ) ;", "attribute . add ( info ) ; }"]}
{"ids": "80972", "code": ["public void add Line ( String text ) throws Bad Location Exception {", "if ( text == null || text . length ( ) == NUM_ || text . equals ( STR_ ) ) {", "return ; }", "document . replace ( document . get Length ( ) , NUM_ , text ) ; }"]}
{"ids": "74168", "code": ["protected void mute Button Pressed ( Action Event e ) {", "J Toggle Button b = ( J Toggle Button ) e . get Source ( ) ;", "log . debug ( STR_ + b . is Selected ( ) ) ;", "fire Property Change ( Property Change ID . MUTE , ! b . is Selected ( ) , b . is Selected ( ) ) ; }"]}
{"ids": "5546", "code": ["public Two D Point ( String s ) {", "String Tokenizer st = new String Tokenizer ( s , STR_ ) ;", "x = Double . value Of ( st . next Token ( ) ) ;", "y = Double . value Of ( st . next Token ( ) ) ; }"]}
{"ids": "13627", "code": ["private void read Object ( final Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "in . default Read Object ( ) ;", "init ( ) ; }"]}
{"ids": "33455", "code": ["public static boolean is Class Support ( String clz Name ) {", "try {", "Class . for Name ( clz Name ) ;", "return true ; }", "catch ( Class Not Found Exception e ) {", "return false ; } }"]}
{"ids": "4624", "code": ["public void add Popup Listener ( final Popup Listener listener ) {", "if ( ! popup Listeners . contains ( listener ) ) {", "popup Listeners . add ( listener ) ; } }"]}
{"ids": "15918", "code": ["public static byte [ ] decode ( byte [ ] data ) {", "int len = data . length / NUM_ * NUM_ ;", "Byte Array Output Stream b Out = new Byte Array Output Stream ( len ) ;", "try {", "encoder . decode ( data , NUM_ , data . length , b Out ) ; }", "catch ( Exception e ) {", "throw new Decoder Exception ( STR_ + e . get Message ( ) , e ) ; }", "return b Out . to Byte Array ( ) ; }"]}
{"ids": "25108", "code": ["public static String build Selector From Attribute Type And Value ( String attribute Type , String attribute Value ) {", "String Builder strb = new String Builder ( ) ;", "strb . append ( OPEN BRACKET ) ;", "strb . append ( attribute Type ) ;", "strb . append ( EQUAL ) ;", "strb . append ( attribute Value ) ;", "strb . append ( CLOSE BRACKET ) ;", "return strb . to String ( ) ; }"]}
{"ids": "34182", "code": ["public static Bitmap scale Fit ( Bitmap src , int max W , int max H ) {", "float ratio = Math . min ( max W / ( float ) src . get Width ( ) , max H / ( float ) src . get Height ( ) ) ;", "int new W = ( int ) ( src . get Width ( ) * ratio ) ;", "int new H = ( int ) ( src . get Height ( ) * ratio ) ;", "return scale ( src , new W , new H ) ; }"]}
{"ids": "60986", "code": ["public File ( String dir Path , String name ) {", "if ( name == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( dir Path == null || dir Path . is Empty ( ) ) {", "this . path = fix Slashes ( name ) ; }", "else if ( name . is Empty ( ) ) {", "this . path = fix Slashes ( dir Path ) ; }", "else {", "this . path = fix Slashes ( join ( dir Path , name ) ) ; } }"]}
{"ids": "41553", "code": ["void decode Attribute Body ( byte [ ] attribute Value , char offset , char length ) {", "username = new byte [ length ] ;", "System . arraycopy ( attribute Value , offset , username , NUM_ , length ) ; }"]}
{"ids": "17470", "code": ["protected synchronized byte [ ] engine Generate Seed ( int num Bytes ) {", "byte [ ] my Bytes ;", "if ( num Bytes < NUM_ ) {", "throw new Negative Array Size Exception ( Integer . to String ( num Bytes ) ) ; }", "if ( num Bytes == NUM_ ) {", "return Empty Array . BYTE ; }", "if ( my Random == null ) {", "my Random = new SHA 1 PRNG Secure Random Impl ( ) ;", "my Random . engine Set Seed ( get Random Bytes ( DIGEST LENGTH ) ) ; }", "my Bytes = new byte [ num Bytes ] ;", "my Random . engine Next Bytes ( my Bytes ) ;", "return my Bytes ; }"]}
{"ids": "22254", "code": ["public static String normalize Inet 4 Address ( String ip 4 String ) {", "final int [ ] octets = parse Inet 4 Address ( ip 4 String ) ;", "if ( octets == null ) {", "return null ; }", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "if ( i > NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( octets [ i ] ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "56999", "code": ["public static int [ ] shuffle ( int [ ] input ) {", "List < Integer > vals = new Array List < Integer > ( input . length ) ;", "for ( int i = NUM_ ; i < input . length ; i ++ ) vals . add ( input [ i ] ) ;", "Collections . shuffle ( vals , SEEDED RANDOM ) ;", "int [ ] copy = new int [ input . length ] ;", "for ( int i = NUM_ ; i < input . length ; i ++ ) copy [ i ] = vals . get ( i ) ;", "return copy ; }"]}
{"ids": "33676", "code": ["public boolean offer ( Pooled Connection pooled Connection ) {", "acquired Connections . remove ( pooled Connection ) ;", "boolean offer = queue . offer ( pooled Connection ) ;", "if ( ! offer ) {", "pooled Connection . dispose ( ) ; }", "if ( is Terminating . get ( ) ) {", "Pooled Connection poll = queue . poll ( ) ;", "if ( poll != null ) {", "poll . dispose ( ) ; } }", "return offer ; }"]}
{"ids": "20184", "code": ["private int parse Style In Default Workspace ( Geo Server REST Reader reader , int count , List < Style Wrapper > style List ) {", "REST Style List geo Server Style List = reader . get Styles ( ) ;", "for ( String style : geo Server Style List . get Names ( ) ) {", "Style Wrapper new Style Wrapper = new Style Wrapper ( DEFAULT WORKSPACE NAME , style ) ;", "style List . add ( new Style Wrapper ) ;", "if ( parent Obj != null ) {", "parent Obj . read Styles Progress ( connection , count , count ) ; }", "count ++ ; }", "return count ; }"]}
{"ids": "1567", "code": ["private Class Signature load Class From Jigsaw ( String classname ) throws IO Exception {", "if ( method Class get Module == null || method Module get Name == null ) {", "return null ; }", "final Class < ? > clazz ;", "final String module Name ;", "try {", "clazz = Class . for Name ( classname , false , loader ) ;", "final Object module = method Class get Module . invoke ( clazz ) ;", "module Name = ( String ) method Module get Name . invoke ( module ) ; }", "catch ( Exception e ) {", "return null ; }", "return new Class Signature ( clazz , Asm Utils . is Runtime Module ( module Name ) ) ; }"]}
{"ids": "38255", "code": ["public void clear Attribute Specs ( ) {", "if ( m attribute Specs == null ) {", "m attribute Specs = new Array List < Attribute Spec > ( ) ; }", "m attribute Specs . clear ( ) ; }"]}
{"ids": "76328", "code": ["public void load Properties ( boolean silent ) {", "load Properties File ( System . get Property ( PROPERTIES FILE , STR_ ) , silent ) ;", "initialize Properties ( ) ; }"]}
{"ids": "3903", "code": ["@ Override public void start ( ) {", "try {", "Journal Client Endpoint endpoint = connect ( ) ;", "if ( endpoint != null ) {", "Output Stream os ;", "os = os = endpoint . start Message ( ) ;", "if ( os != null ) {", "os . write ( STR_ ) ; } } }", "catch ( Exception e ) {", "log . finer ( e . to String ( ) ) ; } }"]}
{"ids": "47577", "code": ["static private int read Bytes ( int c [ ] , int len , Input Stream is ) throws IO Exception {", "byte buf [ ] = new byte [ len ] ;", "if ( is . read ( buf , NUM_ , len ) < len ) {", "return - NUM_ ; }", "for ( int i = NUM_ ; i < len ; i ++ ) {", "c [ i ] = buf [ i ] & NUM_ ; }", "return NUM_ ; }"]}
{"ids": "72623", "code": ["public static void sort ( Object [ ] array ) {", "if ( array . length > NUM_ ) {", "Arrays . sort ( array , INSTANCE ) ; } }"]}
{"ids": "53589", "code": ["public static int expected Size Of Probability Table ( Random Variable ... vars ) {", "int expected Size Of Distribution = NUM_ ;", "if ( null != vars ) {", "for ( Random Variable rv : vars ) {", "if ( ! ( rv . get Domain ( ) instanceof Finite Domain ) ) {", "throw new Illegal Argument Exception ( STR_ + rv ) ; }", "Finite Domain d = ( Finite Domain ) rv . get Domain ( ) ;", "expected Size Of Distribution *= d . size ( ) ; } }", "return expected Size Of Distribution ; }"]}
{"ids": "6196", "code": ["public static Anim Game Item process ( MD 5 Model md 5 Model , MD 5 Anim Model anim Model , Vector 3 f default Colour ) throws Exception {", "List < Matrix 4 f > inv Joint Matrices = calc In Joint Matrices ( md 5 Model ) ;", "List < Animated Frame > animated Frames = process Animation Frames ( md 5 Model , anim Model , inv Joint Matrices ) ;", "List < Mesh > list = new Array List < > ( ) ;", "for ( MD 5 Mesh md 5 Mesh : md 5 Model . get Meshes ( ) ) {", "Mesh mesh = generate Mesh ( md 5 Model , md 5 Mesh ) ;", "handle Texture ( mesh , md 5 Mesh , default Colour ) ;", "list . add ( mesh ) ; }", "Mesh [ ] meshes = new Mesh [ list . size ( ) ] ;", "meshes = list . to Array ( meshes ) ;", "Anim Game Item result = new Anim Game Item ( meshes , animated Frames , inv Joint Matrices ) ;", "return result ; }"]}
{"ids": "24832", "code": ["static String encode High Level ( String msg , Compaction compaction , Charset encoding ) throws Writer Exception {", "String Builder sb = new String Builder ( msg . length ( ) ) ;", "if ( encoding == null ) {", "encoding = DEFAULT ENCODING ; }", "else if ( ! DEFAULT ENCODING . equals ( encoding ) ) {", "Character Set ECI eci = Character Set ECI . get Character Set ECI By Name ( encoding . name ( ) ) ;", "if ( eci != null ) {", "encoding ECI ( eci . get Value ( ) , sb ) ; } }", "int len = msg . length ( ) ;", "int p = NUM_ ;", "int text Sub Mode = SUBMODE ALPHA ;", "byte [ ] bytes = null ;", "if ( compaction == Compaction . TEXT ) {", "encode Text ( msg , p , len , sb , text Sub Mode ) ; }", "else if ( compaction == Compaction . BYTE ) {", "bytes = msg . get Bytes ( encoding ) ;", "encode Binary ( bytes , p , bytes . length , BYTE COMPACTION , sb ) ; }", "else if ( compaction == Compaction . NUMERIC ) {", "sb . append ( ( char ) LATCH TO NUMERIC ) ;", "encode Numeric ( msg , p , len , sb ) ; }", "else {", "int encoding Mode = TEXT COMPACTION ;", "while ( p < len ) {", "int n = determine Consecutive Digit Count ( msg , p ) ;", "if ( n >= NUM_ ) {", "sb . append ( ( char ) LATCH TO NUMERIC ) ;", "encoding Mode = NUMERIC COMPACTION ;", "text Sub Mode = SUBMODE ALPHA ;", "encode Numeric ( msg , p , n , sb ) ;", "p += n ; }", "else {", "int t = determine Consecutive Text Count ( msg , p ) ;", "if ( t >= NUM_ || n == len ) {", "if ( encoding Mode != TEXT COMPACTION ) {", "sb . append ( ( char ) LATCH TO TEXT ) ;", "encoding Mode = TEXT COMPACTION ;", "text Sub Mode = SUBMODE ALPHA ; }", "text Sub Mode = encode Text ( msg , p , t , sb , text Sub Mode ) ;", "p += t ; }", "else {", "if ( bytes == null ) {", "bytes = msg . get Bytes ( encoding ) ; }", "int b = determine Consecutive Binary Count ( msg , bytes , p ) ;", "if ( b == NUM_ ) {", "b = NUM_ ; }", "if ( b == NUM_ && encoding Mode == TEXT COMPACTION ) {", "encode Binary ( bytes , p , NUM_ , TEXT COMPACTION , sb ) ; }", "else {", "encode Binary ( bytes , p , b , encoding Mode , sb ) ;", "encoding Mode = BYTE COMPACTION ;", "text Sub Mode = SUBMODE ALPHA ; }", "p += b ; } } } }", "return sb . to String ( ) ; }"]}
{"ids": "31202", "code": ["private int read Annotation Value ( int v , final char [ ] buf , final String name , final Annotation Visitor av ) {", "int i ;", "if ( av == null ) {", "switch ( b [ v ] & NUM_ ) {", "case STR_ :", "return v + NUM_ ;", "case STR_ :", "return read Annotation Values ( v + NUM_ , buf , true , null ) ;", "case STR_ :", "return read Annotation Values ( v + NUM_ , buf , false , null ) ;", "default :", "return v + NUM_ ; } }", "switch ( b [ v ++ ] & NUM_ ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "av . visit ( name , read Const ( read Unsigned Short ( v ) , buf ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , new Byte ( ( byte ) read Int ( items [ read Unsigned Short ( v ) ] ) ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , read Int ( items [ read Unsigned Short ( v ) ] ) == NUM_ ? Boolean . FALSE : Boolean . TRUE ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , new Short ( ( short ) read Int ( items [ read Unsigned Short ( v ) ] ) ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , new Character ( ( char ) read Int ( items [ read Unsigned Short ( v ) ] ) ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , read UTF 8 ( v , buf ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit Enum ( name , read UTF 8 ( v , buf ) , read UTF 8 ( v + NUM_ , buf ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , Type . get Type ( read UTF 8 ( v , buf ) ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "v = read Annotation Values ( v + NUM_ , buf , true , av . visit Annotation ( name , read UTF 8 ( v , buf ) ) ) ;", "break ;", "case STR_ :", "int size = read Unsigned Short ( v ) ;", "v += NUM_ ;", "if ( size == NUM_ ) {", "return read Annotation Values ( v - NUM_ , buf , false , av . visit Array ( name ) ) ; }", "switch ( this . b [ v ++ ] & NUM_ ) {", "case STR_ :", "byte [ ] bv = new byte [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "bv [ i ] = ( byte ) read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , bv ) ;", "-- v ;", "break ;", "case STR_ :", "boolean [ ] zv = new boolean [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "zv [ i ] = read Int ( items [ read Unsigned Short ( v ) ] ) != NUM_ ;", "v += NUM_ ; }", "av . visit ( name , zv ) ;", "-- v ;", "break ;", "case STR_ :", "short [ ] sv = new short [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "sv [ i ] = ( short ) read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , sv ) ;", "-- v ;", "break ;", "case STR_ :", "char [ ] cv = new char [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "cv [ i ] = ( char ) read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , cv ) ;", "-- v ;", "break ;", "case STR_ :", "int [ ] iv = new int [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "iv [ i ] = read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , iv ) ;", "-- v ;", "break ;", "case STR_ :", "long [ ] lv = new long [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "lv [ i ] = read Long ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , lv ) ;", "-- v ;", "break ;", "case STR_ :", "float [ ] fv = new float [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "fv [ i ] = Float . int Bits To Float ( read Int ( items [ read Unsigned Short ( v ) ] ) ) ;", "v += NUM_ ; }", "av . visit ( name , fv ) ;", "-- v ;", "break ;", "case STR_ :", "double [ ] dv = new double [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "dv [ i ] = Double . long Bits To Double ( read Long ( items [ read Unsigned Short ( v ) ] ) ) ;", "v += NUM_ ; }", "av . visit ( name , dv ) ;", "-- v ;", "break ;", "default :", "v = read Annotation Values ( v - NUM_ , buf , false , av . visit Array ( name ) ) ; } }", "return v ; }"]}
{"ids": "57570", "code": ["private static final boolean compare And Set Wait Status ( Node node , int expect , int update ) {", "return unsafe . compare And Swap Int ( node , wait Status Offset , expect , update ) ; }"]}
{"ids": "52701", "code": ["public Network Connectivity Listener ( ) {", "m State = State . UNKNOWN ; }"]}
{"ids": "18065", "code": ["Vector process SIMPLEPATTERNLIST ( Stylesheet Handler handler , String uri , String name , String raw Name , String value , Elem Template Element owner ) throws org . xml . sax . SAX Exception {", "try {", "String Tokenizer tokenizer = new String Tokenizer ( value , STR_ ) ;", "int n Patterns = tokenizer . count Tokens ( ) ;", "Vector patterns = new Vector ( n Patterns ) ;", "for ( int i = NUM_ ; i < n Patterns ; i ++ ) {", "X Path pattern = handler . create Match Pattern X Path ( tokenizer . next Token ( ) , owner ) ;", "patterns . add Element ( pattern ) ; }", "return patterns ; }", "catch ( Transformer Exception te ) {", "throw new org . xml . sax . SAX Exception ( te ) ; } }"]}
{"ids": "23056", "code": ["protected ASN 1 Sequence ( ASN 1 Encodable [ ] array ) {", "for ( int i = NUM_ ; i != array . length ; i ++ ) {", "seq . add Element ( array [ i ] ) ; } }"]}
{"ids": "33137", "code": ["public void add Copy ( I Resource copy , Copy Arguments arguments ) {", "if ( f Copy == null ) {", "f Copy = new Array List ( NUM_ ) ;", "f Copy Arguments = new Array List ( NUM_ ) ; }", "f Copy . add ( copy ) ;", "f Copy Arguments . add ( arguments ) ;", "add Copy Delta ( copy , arguments ) ; }"]}
{"ids": "76557", "code": ["@ Override public void write ( byte [ ] buffer , int offset , int length ) throws IO Exception {", "while ( ( m Byte To Skip > NUM_ || m Byte To Copy > NUM_ || m State != STATE JPEG DATA ) && length > NUM_ ) {", "if ( m Byte To Skip > NUM_ ) {", "int byte To Process = length > m Byte To Skip ? m Byte To Skip : length ;", "length -= byte To Process ;", "m Byte To Skip -= byte To Process ;", "offset += byte To Process ; }", "if ( m Byte To Copy > NUM_ ) {", "int byte To Process = length > m Byte To Copy ? m Byte To Copy : length ;", "out . write ( buffer , offset , byte To Process ) ;", "length -= byte To Process ;", "m Byte To Copy -= byte To Process ;", "offset += byte To Process ; }", "if ( length == NUM_ ) {", "return ; }", "switch ( m State ) {", "case STATE SOI :", "int byte Read = request Byte To Buffer ( NUM_ , buffer , offset , length ) ;", "offset += byte Read ;", "length -= byte Read ;", "if ( m Buffer . position ( ) < NUM_ ) {", "return ; }", "m Buffer . rewind ( ) ;", "if ( m Buffer . get Short ( ) != Jpeg Header . SOI ) {", "throw new IO Exception ( STR_ ) ; }", "out . write ( m Buffer . array ( ) , NUM_ , NUM_ ) ;", "m State = STATE FRAME HEADER ;", "m Buffer . rewind ( ) ;", "write Exif Data ( ) ;", "break ;", "case STATE FRAME HEADER :", "byte Read = request Byte To Buffer ( NUM_ , buffer , offset , length ) ;", "offset += byte Read ;", "length -= byte Read ;", "if ( m Buffer . position ( ) == NUM_ ) {", "short tag = m Buffer . get Short ( ) ;", "if ( tag == Jpeg Header . EOI ) {", "out . write ( m Buffer . array ( ) , NUM_ , NUM_ ) ;", "m Buffer . rewind ( ) ; } }", "if ( m Buffer . position ( ) < NUM_ ) {", "return ; }", "m Buffer . rewind ( ) ;", "short marker = m Buffer . get Short ( ) ;", "if ( marker == Jpeg Header . APP 1 ) {", "m Byte To Skip = ( m Buffer . get Short ( ) & NUM_ ) - NUM_ ;", "m State = STATE JPEG DATA ; }", "else if ( ! Jpeg Header . is Sof Marker ( marker ) ) {", "out . write ( m Buffer . array ( ) , NUM_ , NUM_ ) ;", "m Byte To Copy = ( m Buffer . get Short ( ) & NUM_ ) - NUM_ ; }", "else {", "out . write ( m Buffer . array ( ) , NUM_ , NUM_ ) ;", "m State = STATE JPEG DATA ; }", "m Buffer . rewind ( ) ; } }", "if ( length > NUM_ ) {", "out . write ( buffer , offset , length ) ; } }"]}
{"ids": "37645", "code": ["protected boolean [ ] dataset Integrity ( boolean nominal Predictor , boolean numeric Predictor , boolean string Predictor , boolean date Predictor , boolean relational Predictor , boolean multi Instance , int class Type , boolean predictor Missing , boolean class Missing ) {", "print ( STR_ ) ;", "print Attribute Summary ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type ) ;", "print ( STR_ ) ;", "int num Train = get Num Instances ( ) , num Classes = NUM_ , missing Level = NUM_ ;", "boolean [ ] result = new boolean [ NUM_ ] ;", "Instances train = null ;", "Instances train Copy = null ;", "AS Search search = null ;", "AS Evaluation evaluation = null ;", "try {", "train = make Test Dataset ( NUM_ , num Train , nominal Predictor ? get Num Nominal ( ) : NUM_ , numeric Predictor ? get Num Numeric ( ) : NUM_ , string Predictor ? get Num String ( ) : NUM_ , date Predictor ? get Num Date ( ) : NUM_ , relational Predictor ? get Num Relational ( ) : NUM_ , num Classes , class Type , multi Instance ) ;", "if ( missing Level > NUM_ ) {", "add Missing ( train , missing Level , predictor Missing , class Missing ) ; }", "search = AS Search . make Copies ( get Search ( ) , NUM_ ) [ NUM_ ] ;", "evaluation = AS Evaluation . make Copies ( get Evaluator ( ) , NUM_ ) [ NUM_ ] ;", "train Copy = new Instances ( train ) ; }", "catch ( Exception ex ) {", "throw new Error ( STR_ + ex . get Message ( ) ) ; }", "try {", "search ( search , evaluation , train Copy ) ;", "compare Datasets ( train , train Copy ) ;", "println ( STR_ ) ;", "result [ NUM_ ] = true ; }", "catch ( Exception ex ) {", "println ( STR_ ) ;", "result [ NUM_ ] = false ;", "if ( m Debug ) {", "println ( STR_ ) ;", "print ( STR_ ) ;", "println ( STR_ + ex . get Message ( ) + STR_ ) ;", "println ( STR_ ) ;", "println ( STR_ + train Copy . to String ( ) + STR_ ) ;", "println ( STR_ + train . to String ( ) + STR_ ) ; } }", "return result ; }"]}
{"ids": "4929", "code": ["public void insert trace ( Polyline p polyline , int p layer , int p half width , Net Nos List p net no arr , int p clearance class , Item Fix State p fixed state ) {", "Brd Tracep new trace = insert trace without cleaning ( p polyline , p layer , p half width , p net no arr , p clearance class , p fixed state ) ;", "if ( new trace == null ) return ;", "new trace . normalize ( changed area . get area ( p layer ) ) ; }"]}
{"ids": "48991", "code": ["void send Transmit ( Multiplex Connection Info info , byte buf [ ] , int off , int len ) throws IO Exception {", "synchronized ( data Out ) {", "if ( alive && ! info . closed ) try {", "data Out . write Byte ( TRANSMIT ) ;", "data Out . write Short ( info . id ) ;", "data Out . write Int ( len ) ;", "data Out . write ( buf , off , len ) ;", "data Out . flush ( ) ; }", "catch ( IO Exception e ) {", "multiplex Log . log ( Log . BRIEF , STR_ , e ) ;", "shut Down ( ) ;", "throw e ; } } }"]}
{"ids": "51757", "code": ["public < T extends SQL Exception > T to Flat SQL Exception ( Class < T > type ) throws Class Cast Exception {", "return type . cast ( to Flat SQL Exception ( ) ) ; }"]}
{"ids": "43926", "code": ["public void add Total Result Count Cookie ( Workbench Request req , Http Servlet Response resp , int value ) {", "add Cookie ( req , resp , STR_ , String . value Of ( value ) ) ; }"]}
{"ids": "7464", "code": ["private Rectangle integerise ( Rectangle 2 D rect ) {", "int x 0 = ( int ) Math . ceil ( rect . get Min X ( ) ) ;", "int y 0 = ( int ) Math . ceil ( rect . get Min Y ( ) ) ;", "int x 1 = ( int ) Math . floor ( rect . get Max X ( ) ) ;", "int y 1 = ( int ) Math . floor ( rect . get Max Y ( ) ) ;", "return new Rectangle ( x 0 , y 0 , ( x 1 - x 0 ) , ( y 1 - y 0 ) ) ; }"]}
{"ids": "73967", "code": ["@ Override public void mouse Moved ( Mouse Event evt ) {", "delegate . mouse Moved ( evt ) ; }"]}
{"ids": "31811", "code": ["protected void validate Config ( ) {", "A . not Null ( get Streamer ( ) , STR_ ) ;", "A . not Null ( get Ignite ( ) , STR_ ) ;", "A . not Null ( endpoint Url , STR_ ) ;", "A . ensure ( get Single Tuple Extractor ( ) != null || get Multiple Tuple Extractor ( ) != null , STR_ ) ;", "String follow Param = api Params . get ( SITE USER ID KEY ) ;", "A . ensure ( follow Param != null && follow Param . matches ( STR_ ) , STR_ ) ; }"]}
{"ids": "69241", "code": ["public long [ ] select Zero ( long rank , long [ ] dest , final int offset , final int length ) {", "if ( length == NUM_ ) return dest ;", "long s = select Zero ( rank ) ;", "dest [ offset ] = s ;", "int curr = ( int ) ( s / Long . SIZE ) ;", "long window = ~ bits [ curr ] & - NUM_ << s ;", "window &= window - NUM_ ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "while ( window == NUM_ ) window = ~ bits [ ++ curr ] ;", "dest [ offset + i ] = curr * Long . SIZE + Long . number Of Trailing Zeros ( window ) ;", "window &= window - NUM_ ; }", "return dest ; }"]}
{"ids": "41764", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return STRING FIELD ;", "case NUM_ :", "return SET FIELD ;", "case NUM_ :", "return LIST FIELD ;", "case NUM_ :", "return BINARY FIELD ;", "default :", "return null ; } }"]}
{"ids": "47874", "code": ["public int size ( ) {", "synchronized ( children ) {", "return children . size ( ) ; } }"]}
{"ids": "75443", "code": ["private String flatten Comment ( String string ) {", "String Buffer buffer = new String Buffer ( string . length ( ) + NUM_ ) ;", "boolean skip Adjacent Line Separator = true ;", "for ( int i = NUM_ ; i < string . length ( ) ; i ++ ) {", "char c = string . char At ( i ) ;", "if ( c == STR_ || c == STR_ ) {", "if ( ! skip Adjacent Line Separator ) buffer . append ( Policy . bind ( STR_ ) ) ;", "skip Adjacent Line Separator = true ; }", "else {", "buffer . append ( c ) ;", "skip Adjacent Line Separator = false ; } }", "return buffer . to String ( ) ; }"]}
{"ids": "41041", "code": ["private boolean is Accelerating ( Sensor Event event ) {", "float ax = event . values [ NUM_ ] ;", "float ay = event . values [ NUM_ ] ;", "float az = event . values [ NUM_ ] ;", "final double magnitude = Math . sqrt ( ax * ax + ay * ay + az * az ) ;", "return magnitude > ACCELERATION THRESHOLD ; }"]}
{"ids": "79047", "code": ["@ Override public byte [ ] read Byte Array ( String file Path , int length ) {", "File Channel file Channel = update Cache ( file Path ) ;", "Byte Buffer byte Bffer = read ( file Channel , length ) ;", "return byte Bffer . array ( ) ; }"]}
{"ids": "75168", "code": ["public void pop Drag Entry ( int index ) {", "if ( is Index In Bound ( index ) ) {", "m Dragged Entry = m Drag Entries . get ( index ) ;", "m Dragged Entry Index = index ;", "m Drag Entered Entry Index = index ;", "mark Drop Area ( index ) ; } }"]}
{"ids": "40899", "code": ["public void add Email ( Email Entity email ) {", "emails . add ( email ) ; }"]}
{"ids": "80649", "code": ["private static int manhattan Distance ( final int x 1 , final int y 1 , final int x 2 , final int y 2 ) {", "return Math . abs ( x 1 - x 2 ) + Math . abs ( y 1 - y 2 ) ; }"]}
{"ids": "13095", "code": ["public void put Grammar ( Schema Grammar grammar ) {", "if ( grammar . get Target Namespace ( ) == null ) f No NS Grammar = grammar ;", "else f Grammar Registry . put ( grammar . get Target Namespace ( ) , grammar ) ; }"]}
{"ids": "83416", "code": ["public JSON Array opt JSON Array ( String key ) {", "Object o = opt ( key ) ;", "return o instanceof JSON Array ? ( JSON Array ) o : null ; }"]}
{"ids": "80353", "code": ["private void status ( ) {", "ps . println ( STR_ ) ;", "ps . println ( STR_ ) ;", "ps . println ( STR_ ) ;", "ps . println ( STR_ ) ;", "write Keys With Prefix ( STR_ , STR_ ) ; }"]}
{"ids": "58026", "code": ["void push Import Source ( Source source From URI Resolver ) {", "m import Source Stack . push ( source From URI Resolver ) ; }"]}
{"ids": "16755", "code": ["public static byte [ ] build Nal Unit ( byte [ ] data , int offset , int length ) {", "byte [ ] nal Unit = new byte [ length + NAL START CODE . length ] ;", "System . arraycopy ( NAL START CODE , NUM_ , nal Unit , NUM_ , NAL START CODE . length ) ;", "System . arraycopy ( data , offset , nal Unit , NAL START CODE . length , length ) ;", "return nal Unit ; }"]}
{"ids": "9308", "code": ["protected void do Log Oob Message Outbound ( Message message ) {", "if ( rpc Logger != null ) {", "rpc Logger . log Oob Message ( client Info , server Info , message , System . current Time Millis ( ) ) ; } }"]}
{"ids": "39704", "code": ["@ Override public void stop ( ) {", "Count Down Latch latch = stopped ;", "Thread old Thread = thread . get And Update ( null ) ;", "if ( old Thread != null && latch != null ) {", "try {", "latch . await ( NUM_ , Time Unit . SECONDS ) ; }", "catch ( Interrupted Exception e ) {", "Thread . interrupted ( ) ; } } }"]}
{"ids": "7602", "code": ["@ Override public byte [ ] encode ( Buffered Image buffered Image ) throws IO Exception {", "Byte Array Output Stream output Stream = new Byte Array Output Stream ( ) ;", "encode ( buffered Image , output Stream ) ;", "return output Stream . to Byte Array ( ) ; }"]}
{"ids": "51893", "code": ["private Json Parser Exception create Helpful Exception ( char first , char [ ] expected , int failure Position ) throws Json Parser Exception {", "String Builder error Token = new String Builder ( first + ( expected == null ? STR_ : new String ( expected , NUM_ , failure Position ) ) ) ;", "while ( is Ascii Letter ( peek Char ( ) ) && error Token . length ( ) < NUM_ ) error Token . append ( ( char ) advance Char ( ) ) ;", "return create Parse Exception ( null , STR_ + error Token + STR_ + ( expected == null ? STR_ : STR_ + first + new String ( expected ) + STR_ ) , true ) ; }"]}
{"ids": "78582", "code": ["public static void i ( String tag , String s , Object ... args ) {", "if ( LOG . INFO >= LOGLEVEL ) Log . i ( tag , String . format ( s , args ) ) ; }"]}
{"ids": "36619", "code": ["public void remove Lifecycle Listener ( Lifecycle Listener lifecycle Listener ) {", "lifecycle Listeners . remove ( lifecycle Listener ) ; }"]}
{"ids": "35739", "code": ["private synchronized void init Registry ( boolean force ) throws Matlab Connection Exception {", "if ( registry == null || force ) {", "try {", "registry = Local Host RMI Helper . create Registry ( options . get Port ( ) ) ; }", "catch ( Exception e ) {", "try {", "registry = Local Host RMI Helper . get Registry ( options . get Port ( ) ) ; }", "catch ( Exception ex ) {", "throw new Matlab Connection Exception ( STR_ , ex ) ; } } } }"]}
{"ids": "70239", "code": ["public boolean phase Has Turns ( I Game . Phase this Phase ) {", "switch ( this Phase ) {", "case PHASE SET ARTYAUTOHITHEXES :", "case PHASE DEPLOY MINEFIELDS :", "case PHASE DEPLOYMENT :", "case PHASE MOVEMENT :", "case PHASE FIRING :", "case PHASE PHYSICAL :", "case PHASE TARGETING :", "case PHASE OFFBOARD :", "return true ;", "default :", "return false ; } }"]}
{"ids": "3730", "code": ["public int read ( ) throws IO Exception {", "int ch 1 = is . read ( ) ;", "int ch 2 = is . read ( ) ;", "if ( ch 2 < NUM_ ) return - NUM_ ;", "return ( ch 2 << NUM_ ) + ch 1 ; }"]}
{"ids": "72590", "code": ["public static boolean is Url ( String resource Location ) {", "if ( resource Location == null ) {", "return false ; }", "if ( resource Location . starts With ( CLASSPATH URL PREFIX ) ) {", "return true ; }", "try {", "new URL ( resource Location ) ;", "return true ; }", "catch ( Malformed URL Exception ex ) {", "return false ; } }"]}
{"ids": "3810", "code": ["public static String encode URL ( String uri ) {", "Char Buffer cb = Char Buffer . allocate ( ) ;", "for ( int i = NUM_ ; i < uri . length ( ) ; i ++ ) {", "char ch = uri . char At ( i ) ;", "switch ( ch ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "cb . append ( STR_ ) ;", "cb . append ( encode Hex ( ch > > NUM_ ) ) ;", "cb . append ( encode Hex ( ch ) ) ;", "break ;", "default :", "cb . append ( ch ) ; } }", "return cb . close ( ) ; }"]}
{"ids": "48759", "code": ["public void close ( ) throws IO Exception {", "if ( closed ) {", "return ; }", "if ( queued For Cleanup ) {", "return ; }", "try {", "if ( expected > count ) {", "long nskip = expected - count ;", "if ( nskip <= available ( ) ) {", "do { }", "while ( ( nskip = ( expected - count ) ) > NUM_ && skip ( Math . min ( nskip , available ( ) ) ) > NUM_ ) ; }", "else if ( expected <= Keep Alive Stream Cleaner . MAX DATA REMAINING && ! hurried ) {", "queue For Cleanup ( new Keep Alive Cleaner Entry ( this , hc ) ) ; }", "else {", "hc . close Server ( ) ; } }", "if ( ! closed && ! hurried && ! queued For Cleanup ) {", "hc . finished ( ) ; } }", "finally {", "if ( pi != null ) pi . finish Tracking ( ) ;", "if ( ! queued For Cleanup ) {", "in = null ;", "hc = null ;", "closed = true ; } } }"]}
{"ids": "4107", "code": ["public boolean is Public ( ) {", "return Modifier . is Public ( method . get Modifiers ( ) ) ; }"]}
{"ids": "66795", "code": ["private Object [ ] initialize Caller Hierarchy Roots ( Map < String , Map < String , Set < Json Element > > > caller Map ) {", "List < Tree Element < Source Method Node , Source Method Node > > roots = new Array List < Tree Element < Source Method Node , Source Method Node > > ( ) ;", "Caller Hierarchy caller Hierarchy = ( Caller Hierarchy ) f Input ;", "Source Method Node root Node = caller Hierarchy . get Root ( ) ;", "Set < Source Method Node > processed Nodes = new Hash Set < Source Method Node > ( ) ;", "Tree Element < Source Method Node , Source Method Node > root = initialize Caller Hierarchy ( root Node , processed Nodes , caller Map ) ;", "return new Object [ ] { root } ; }"]}
{"ids": "60102", "code": ["private List < Entry > reduce With Douglas Peuker ( List < Entry > entries , double epsilon ) {", "if ( epsilon <= NUM_ || entries . size ( ) < NUM_ ) {", "return entries ; }", "keep [ NUM_ ] = true ;", "keep [ entries . size ( ) - NUM_ ] = true ;", "algorithm Douglas Peucker ( entries , epsilon , NUM_ , entries . size ( ) - NUM_ ) ;", "List < Entry > reduced Entries = new Array List < Entry > ( ) ;", "for ( int i = NUM_ ; i < entries . size ( ) ; i ++ ) {", "if ( keep [ i ] ) {", "Entry cur Entry = entries . get ( i ) ;", "reduced Entries . add ( new Entry ( cur Entry . get Val ( ) , cur Entry . get X Index ( ) ) ) ; } }", "return reduced Entries ; }"]}
{"ids": "12830", "code": ["public static double [ ] compute Log Amplitude Spectrum ( final double [ ] signal ) {", "double [ ] spectrum = compute Amplitude Spectrum ( signal ) ;", "for ( int i = NUM_ ; i < spectrum . length ; i ++ ) {", "spectrum [ i ] = Math . log ( spectrum [ i ] ) ; }", "return spectrum ; }"]}
{"ids": "65321", "code": ["private Segment create Memory Segment ( Segment Descriptor descriptor ) {", "File segment File = Segment File . create Segment File ( name , storage . directory ( ) , descriptor . id ( ) , descriptor . version ( ) ) ;", "Buffer buffer = Heap Buffer . allocate ( Math . min ( DEFAULT BUFFER SIZE , descriptor . max Segment Size ( ) ) , Integer . MAX VALUE ) ;", "descriptor . copy To ( buffer ) ;", "Segment segment = new Segment ( new Segment File ( segment File ) , buffer . slice ( ) , descriptor , create Index ( descriptor ) , new Offset Predicate ( ) , serializer . clone ( ) , this ) ;", "LOGGER . debug ( STR_ , segment ) ;", "return segment ; }"]}
{"ids": "39852", "code": ["public static void init ( final Async Context context ) {", "final Security Context security = ( Security Context ) context . get Attribute ( Async Context . SECURITY CTX ) ;", "final boolean force Set Security = force Set Security Context ( context ) ;", "if ( force Set Security ) {", "Security Context Holder . set Context ( security ) ; }", "ctx . set ( context ) ; }"]}
{"ids": "34747", "code": ["private void cancel Previous Web Rtc Notifications ( ) {", "Set < String > notification Ids = m Shared Preferences . get String Set ( WEBRTC NOTIFICATION IDS , null ) ;", "if ( notification Ids == null ) return ;", "Iterator < String > iterator = notification Ids . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "m Notification Manager . cancel ( NOTIFICATION NAMESPACE , Integer . parse Int ( iterator . next ( ) ) ) ; }", "Shared Preferences . Editor shared Preference Editor = m Shared Preferences . edit ( ) ;", "shared Preference Editor . remove ( Media Capture Notification Service . WEBRTC NOTIFICATION IDS ) ;", "shared Preference Editor . apply ( ) ; }"]}
{"ids": "26476", "code": ["public static final String read String ( byte [ ] bytes , int offset , int length , String charset ) throws IO Exception {", "return read String ( bytes , NUM_ , bytes . length , Charset . for Name ( charset ) ) ; }"]}
{"ids": "32284", "code": ["private Topology Updater Thread ( ) {", "super ( id + STR_ ) ; }"]}
{"ids": "13395", "code": ["private void type Parameters Rest ( List < ? extends Type Parameter Tree > type Parameters , Indent plus Indent ) {", "builder . open ( plus Indent ) ;", "builder . break Op ( ) ;", "builder . open ( ZERO ) ;", "boolean first = true ;", "for ( Type Parameter Tree type Parameter : type Parameters ) {", "if ( ! first ) {", "token ( STR_ ) ;", "builder . break Op ( STR_ ) ; }", "scan ( type Parameter , null ) ;", "first = false ; }", "token ( STR_ ) ;", "builder . close ( ) ;", "builder . close ( ) ; }"]}
{"ids": "20850", "code": ["public void write String ( String str ) throws IO Exception {", "if ( str == null ) write Int ( NUM_ ) ;", "else {", "if ( use Compression && str . length ( ) >= Compressor . MIN SIZE FOR DEFLATION ) {", "byte [ ] bytes = compressor . deflate String 2 Byte Array ( str ) ;", "write Int ( - bytes . length ) ;", "outs . write ( bytes , NUM_ , bytes . length ) ;", "position += bytes . length ; }", "else {", "byte [ ] bytes = str . get Bytes ( STR_ ) ;", "write Int ( bytes . length ) ;", "outs . write ( bytes , NUM_ , bytes . length ) ;", "position += bytes . length ; } } }"]}
{"ids": "71729", "code": ["public void dequeue Sound ( Uri uri ) {", "m Audio Queue . remove ( new Audio Queue Item ( uri , null ) ) ; }"]}
{"ids": "36987", "code": ["public void remove Bookmark ( final C Bookmark bookmark ) {", "Preconditions . check Not Null ( bookmark , STR_ ) ;", "Preconditions . check Argument ( m bookmarks . remove ( bookmark ) , STR_ ) ;", "for ( final I Bookmark Manager Listener listener : m listeners ) {", "try {", "listener . removed Bookmark ( this , bookmark ) ; }", "catch ( final Exception exception ) {", "C Utility Functions . log Exception ( exception ) ; } } }"]}
{"ids": "29663", "code": ["public static Key Store load Key Store ( String type , File file , char [ ] password ) throws Exception {", "Key Store key Store = Key Store . get Instance ( type ) ;", "try ( File Input Stream fis = new File Input Stream ( file ) ) {", "key Store . load ( fis , password ) ; }", "return key Store ; }"]}
{"ids": "44779", "code": ["public void loop ( double ellapsed Millis ) {", "for ( Spring System Listener listener : m Listeners ) {", "listener . on Before Integrate ( this ) ; }", "advance ( ellapsed Millis ) ;", "if ( m Active Springs . is Empty ( ) ) {", "m Idle = true ; }", "for ( Spring System Listener listener : m Listeners ) {", "listener . on After Integrate ( this ) ; }", "if ( m Idle ) {", "m Spring Looper . stop ( ) ; } }"]}
{"ids": "69331", "code": ["private void update Recording Track ( Track track , long last Track Point Id , boolean increase Number Of Points ) {", "if ( last Track Point Id >= NUM_ ) {", "if ( track . get Start Id ( ) < NUM_ ) {", "track . set Start Id ( last Track Point Id ) ; }", "track . set Stop Id ( last Track Point Id ) ; }", "if ( increase Number Of Points ) {", "track . set Number Of Points ( track . get Number Of Points ( ) + NUM_ ) ; }", "track Trip Statistics Updater . update Time ( System . current Time Millis ( ) ) ;", "track . set Trip Statistics ( track Trip Statistics Updater . get Trip Statistics ( ) ) ;", "my Tracks Provider Utils . update Track ( track ) ; }"]}
{"ids": "3791", "code": ["@ Override public void request Startup Updates ( String from , byte [ ] table Key , int pod Index , long delta Time , Result < Boolean > cont ) {", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( STR_ + from + STR_ + pod Index + STR_ + delta Time ) ; }", "long access Time = Current Time . current Time ( ) + delta Time ;", "Table Pod table Pod = client Kraken . get Table ( table Key ) ;", "if ( table Pod == null ) {", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( L . l ( STR_ , Hex . to Short Hex ( table Key ) , Bartender System . get Current Self Server ( ) ) ) ; }", "cont . ok ( true ) ;", "return ; }", "table Pod . get Updates From Local ( pod Index , access Time , cont ) ; }"]}
{"ids": "7022", "code": ["private void refresh Mute Video Button ( ) {", "if ( ( null != m Call ) && m Call . is Video ( ) ) {", "m Mute Local Camera View . set Visibility ( View . VISIBLE ) ;", "boolean is Muted = m Call . is Video Recording Muted ( ) ;", "Log . d ( LOG TAG , STR_ + is Muted ) ;", "int icon Id = is Muted ? R . drawable . ic material videocam off pink red : R . drawable . ic material videocam off grey ;", "m Mute Local Camera View . set Image Resource ( icon Id ) ; }", "else {", "Log . d ( LOG TAG , STR_ ) ;", "m Mute Local Camera View . set Visibility ( View . INVISIBLE ) ; } }"]}
{"ids": "24920", "code": ["private void create Preference Controls ( Composite parent , Set < Preference Id > preference Set , Input Definition input Definition ) {", "for ( Preference Id preference Id Enum : preference Set ) {", "I Preference Control preference Control = Preference Control Factory . create Preference Controls ( parent , toolkit , preference Id Enum , this , input Definition ) ;", "if ( null != preference Control ) {", "preference Control List . add ( preference Control ) ; } } }"]}
{"ids": "8614", "code": ["@ Request Mapping ( value = STR_ , method = POST , produces = APPLICATION JSON VALUE ) public Response Entity < Page Response < Project DTO > > find All ( @ Request Body Page Request By Example < Project DTO > prbe ) throws URI Syntax Exception {", "Page Response < Project DTO > page Response = project DTO Service . find All ( prbe ) ;", "return new Response Entity < > ( page Response , new Http Headers ( ) , Http Status . OK ) ; }"]}
{"ids": "27997", "code": ["static private double fac 2 ( int j ) {", "long i = j ;", "if ( j < NUM_ ) i = Math . abs ( j ) ;", "double d = NUM_ ;", "while ( i > NUM_ ) d *= i -- ;", "if ( j < NUM_ ) return - d ;", "else return d ; }"]}
{"ids": "3182", "code": ["private static boolean is Input Exhausted ( Stream Tokenizer input ) throws Parse Error {", "try {", "if ( input . next Token ( ) == Stream Tokenizer . TT EOF ) {", "return true ; }", "input . push Back ( ) ;", "return false ; }", "catch ( IO Exception e ) {", "throw new Parse Error ( e . get Message ( ) ) ; } }"]}
{"ids": "51262", "code": ["public void clear ( ) {", "m . clear ( ) ; }"]}
{"ids": "51155", "code": ["public static void write Unsafe ( Packet Output Stream out , Input Stream is , long length , boolean no Backslash Escapes ) throws IO Exception {", "out . write Unsafe ( QUOTE ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "long bytes Left = length ;", "int len ;", "for ( ; ; ) {", "int bytes To Read = ( int ) Math . min ( bytes Left , buffer . length ) ;", "if ( bytes To Read == NUM_ ) {", "break ; }", "len = is . read ( buffer , NUM_ , bytes To Read ) ;", "if ( len <= NUM_ ) {", "break ; }", "write Bytes Escaped Unsafe ( out , buffer , len , no Backslash Escapes ) ;", "bytes Left -= len ; }", "out . write Unsafe ( QUOTE ) ; }"]}
{"ids": "30567", "code": ["public SQL Query ( Class < T > type , String sql Expression , Query Result Type query Result Type ) {", "this ( sql Expression , type . get Name ( ) , null , query Result Type , null ) ; }"]}
{"ids": "52451", "code": ["public Builder retry ( long duration , Time Unit time Unit ) {", "this . retry = time Unit . to Seconds ( duration ) ;", "return this ; }"]}
{"ids": "33918", "code": ["private < T > List < T > to Sorted List ( T [ ] array , Comparator < T > comparator ) {", "List < T > list = new Array List < > ( ) ;", "Collections . add All ( list , array ) ;", "Collections . sort ( list , comparator ) ;", "return list ; }"]}
{"ids": "6827", "code": ["private Geo Mark reverse geocode ( final String text ) {", "for ( String t : text . split ( STR_ ) ) {", "if ( t . length ( ) < NUM_ ) continue ;", "String [ ] c = t . split ( STR_ ) ;", "if ( c . length != NUM_ ) continue ;", "try {", "double lat = Double . parse Double ( c [ NUM_ ] ) ;", "double lon = Double . parse Double ( c [ NUM_ ] ) ;", "Geo Mark mark = city Near ( lat , lon ) ;", "if ( mark == null ) continue ;", "return mark ; }", "catch ( Number Format Exception e ) {", "continue ; } }", "return null ; }"]}
{"ids": "5057", "code": ["public Array List < Pla Touple Int > entrance points ( Polyline p polyline ) {", "Array List < Pla Touple Int > result = new Array List < Pla Touple Int > ( NUM_ * p polyline . plaline len ( ) ) ;", "int prev intersection line no = - NUM_ ;", "int prev intersection edge no = - NUM_ ;", "for ( int line no = NUM_ ; line no < p polyline . plaline len ( - NUM_ ) ; ++ line no ) {", "Pla Segment Int curr line seg = p polyline . segment get ( line no ) ;", "int [ ] curr intersections = curr line seg . border intersections ( this ) ;", "for ( int index = NUM_ ; index < curr intersections . length ; ++ index ) {", "int edge no = curr intersections [ index ] ;", "if ( line no != prev intersection line no || edge no != prev intersection edge no ) {", "result . add ( new Pla Touple Int ( line no , edge no ) ) ;", "prev intersection line no = line no ;", "prev intersection edge no = edge no ; } } }", "return result ; }"]}
{"ids": "33346", "code": ["private void emit Clear ( String field Name , String Builder builder ) {", "builder . append ( STR_ ) ;", "builder . append ( get Clear Name ( field Name ) ) ;", "builder . append ( STR_ ) ;", "builder . append ( get Ensure Name ( field Name ) ) ;", "builder . append ( STR_ ) ;", "builder . append ( field Name ) ;", "builder . append ( STR_ ) ;", "builder . append ( STR_ ) ; }"]}
{"ids": "22151", "code": ["public static byte [ ] serialize As Byte Array ( Object b ) throws IO Exception {", "Byte Array Output Stream bos = new Byte Array Output Stream ( ) ;", "Object Output Stream out = new Object Output Stream ( bos ) ;", "try {", "out . write Object ( b ) ; }", "finally {", "out . close ( ) ; }", "return bos . to Byte Array ( ) ; }"]}
{"ids": "32040", "code": ["public static void put Int LE ( long addr , int val ) {", "if ( UNALIGNED ) UNSAFE . put Int ( addr , Integer . reverse Bytes ( val ) ) ;", "else put Int By Byte ( addr , val , false ) ; }"]}
{"ids": "82235", "code": ["public Floating Action Button create Sub FAB ( char icon , String text ) {", "Floating Action Button sub = new Floating Action Button ( icon , text , NUM_ ) ;", "if ( sub Menu == null ) {", "sub Menu = new Array List < Floating Action Button > ( ) ; }", "sub Menu . add ( sub ) ;", "return sub ; }"]}
{"ids": "31308", "code": ["public String read Value ( Input Node from ) throws Exception {", "if ( ! stack . is Relevant ( from ) ) {", "return null ; }", "int length = text . length ( ) ;", "if ( length <= NUM_ ) {", "Event Node event = reader . peek ( ) ;", "if ( event . is End ( ) ) {", "if ( stack . top ( ) == from ) {", "return null ; }", "else {", "stack . pop ( ) ; }", "event = reader . next ( ) ; } }", "return read Text ( from ) ; }"]}
{"ids": "7003", "code": ["private void dispatch On Third Party Registered ( ) {", "synchronized ( this ) {", "for ( Third Party Registration Listener listener : m Third Party Registration Listeners ) {", "try {", "listener . on Third Party Registered ( ) ; }", "catch ( Exception e ) {", "Log . e ( LOG TAG , STR_ + e . get Localized Message ( ) ) ; } }", "m Third Party Registration Listeners . clear ( ) ; } }"]}
{"ids": "74068", "code": ["void update For Decoder Type ID ( List < Decoder File > p List ) {", "decoder Box . set Model ( Decoder Index File . j Combo Box Model From List ( p List ) ) ;", "decoder Box . insert Item At ( STR_ , NUM_ ) ;", "decoder Box . set Selected Index ( NUM_ ) ; }"]}
{"ids": "64828", "code": ["@ Override public void action Performed ( Action Event event ) {", "switch ( event . get Action Command ( ) ) {", "case NEW ALIAS :", "add Alias ( new Alias ( STR_ ) ) ;", "break ;", "case COPY ALIAS :", "for ( Alias alias : get Selected Aliases ( ) ) {", "add Alias ( Alias Factory . copy Of ( alias ) ) ; }", "break ;", "case DELETE ALIAS :", "List < Alias > to Delete = get Selected Aliases ( ) ;", "if ( to Delete != null && ! to Delete . is Empty ( ) ) {", "String title = to Delete . size ( ) == NUM_ ? STR_ : STR_ ;", "String prompt = to Delete . size ( ) == NUM_ ? STR_ : STR_ + to Delete . size ( ) + STR_ ;", "int choice = J Option Pane . show Confirm Dialog ( Alias Controller . this , prompt , title , J Option Pane . YES NO OPTION , J Option Pane . WARNING MESSAGE ) ;", "if ( choice == J Option Pane . YES OPTION ) {", "for ( Alias alias : to Delete ) {", "m Alias Model . remove Alias ( alias ) ; } } }", "break ;", "default :", "break ; } }"]}
{"ids": "80333", "code": ["public boolean direction Key Is Pressed ( ) {", "return pressed State Keys . contains ( Key Event . VK UP ) || pressed State Keys . contains ( Key Event . VK DOWN ) || pressed State Keys . contains ( Key Event . VK LEFT ) || pressed State Keys . contains ( Key Event . VK RIGHT ) || pressed State Keys . contains ( Key Event . VK KP LEFT ) || pressed State Keys . contains ( Key Event . VK KP RIGHT ) || pressed State Keys . contains ( Key Event . VK KP UP ) || pressed State Keys . contains ( Key Event . VK KP DOWN ) ; }"]}
{"ids": "85783", "code": ["private void calculate Calibration ( long difference , float current Measure , byte current Index ) {", "if ( difference >= Medtronic Constants . TIME 15 MIN IN MS && difference < Medtronic Constants . TIME 20 MIN IN MS ) {", "if ( is Sensor Measure In Range ( current Index , expected Sensor Sort Number For Calibration ) ) {", "is Calibrating = false ;", "calibration Status = Medtronic Constants . CALIBRATED ;", "calibration Isig Value = current Measure ;", "Shared Preferences . Editor editor = settings . edit ( ) ;", "calibration Factor = last Glucometer Value / calibration Isig Value ;", "editor . remove ( STR_ ) ;", "editor . remove ( STR_ ) ;", "editor . put Float ( STR_ , ( float ) calibration Factor ) ;", "editor . put Int ( STR_ , calibration Status ) ;", "editor . commit ( ) ; }", "else {", "if ( calibration Status != Medtronic Constants . WITHOUT ANY CALIBRATION && current Index != expected Sensor Sort Number ) {", "calibration Status = Medtronic Constants . LAST CALIBRATION FAILED USING PREVIOUS ;", "is Calibrating = false ; }", "else {", "calibration Status = Medtronic Constants . WITHOUT ANY CALIBRATION ; }", "Shared Preferences . Editor editor = settings . edit ( ) ;", "editor . remove ( STR_ ) ;", "editor . remove ( STR_ ) ;", "editor . commit ( ) ; } }", "else if ( difference >= Medtronic Constants . TIME 20 MIN IN MS ) {", "if ( is Sensor Measure In Range ( current Index , expected Sensor Sort Number For Calibration ) ) {", "calibration Status = Medtronic Constants . CALIBRATED IN 15 MIN ;", "calibration Isig Value = current Measure ;", "Shared Preferences . Editor editor = settings . edit ( ) ;", "calibration Factor = last Glucometer Value / calibration Isig Value ;", "editor . remove ( STR_ ) ;", "editor . remove ( STR_ ) ;", "editor . put Float ( STR_ , ( float ) calibration Factor ) ;", "editor . put Int ( STR_ , calibration Status ) ;", "editor . commit ( ) ; }", "else {", "if ( calibration Status != Medtronic Constants . WITHOUT ANY CALIBRATION ) calibration Status = Medtronic Constants . LAST CALIBRATION FAILED USING PREVIOUS ;", "else {", "calibration Status = Medtronic Constants . WITHOUT ANY CALIBRATION ; }", "Shared Preferences . Editor editor = settings . edit ( ) ;", "editor . remove ( STR_ ) ;", "editor . remove ( STR_ ) ;", "editor . commit ( ) ; }", "is Calibrating = false ; }", "else {", "if ( is Calibrating ) {", "if ( difference < Medtronic Constants . TIME 5 MIN IN MS ) {", "calibration Status = Medtronic Constants . CALIBRATING ; }", "else if ( difference >= Medtronic Constants . TIME 5 MIN IN MS && difference <= Medtronic Constants . TIME 15 MIN IN MS ) calibration Status = Medtronic Constants . CALIBRATING 2 ;", "else calibration Status = Medtronic Constants . CALIBRATING ; }", "else {", "if ( calibration Status != Medtronic Constants . WITHOUT ANY CALIBRATION ) calibration Status = Medtronic Constants . LAST CALIBRATION FAILED USING PREVIOUS ;", "else {", "calibration Status = Medtronic Constants . WITHOUT ANY CALIBRATION ; }", "Shared Preferences . Editor editor = settings . edit ( ) ;", "editor . remove ( STR_ ) ;", "editor . remove ( STR_ ) ;", "editor . put Int ( STR_ , calibration Status ) ;", "editor . commit ( ) ; } } }"]}
{"ids": "16247", "code": ["public void add Position ( int offset , int length , String ... ids ) {", "Text Attribute highlighting = ids . length == NUM_ ? attribute Provider . get Attribute ( ids [ NUM_ ] ) : attribute Provider . get Merged Attributes ( ids ) ;", "boolean is Existing = false ;", "for ( int i = NUM_ , n = removed Positions . size ( ) ; i < n ; i ++ ) {", "Attributed Position position = removed Positions . get ( i ) ;", "if ( position == null ) continue ;", "if ( position . is Equal ( offset , length , highlighting ) ) {", "is Existing = true ;", "removed Positions . set ( i , null ) ;", "removed Position Count -- ;", "break ; } }", "if ( ! is Existing ) {", "Attributed Position position = presenter . create Highlighted Position ( offset , length , highlighting ) ;", "added Positions . add ( position ) ; } }"]}
{"ids": "21724", "code": ["static void export Mask Update ( Export Mask export Mask , Map < URI , Integer > volume Map , List < Initiator > initiators , List < URI > targets ) {", "if ( volume Map != null ) {", "for ( URI volume : volume Map . key Set ( ) ) {", "export Mask . add Volume ( volume , volume Map . get ( volume ) ) ; } }", "if ( initiators != null ) {", "for ( Initiator initiator : initiators ) {", "export Mask . add Initiator ( initiator ) ; } }", "if ( targets != null ) {", "for ( URI target : targets ) {", "export Mask . add Target ( target ) ; } } }"]}
{"ids": "1675", "code": ["private void internal Add Head ( final Message Reference ref ) {", "queue Memory Size . add And Get ( ref . get Message Memory Estimate ( ) ) ;", "ref Added ( ref ) ;", "int priority = get Priority ( ref ) ;", "message References . add Head ( ref , priority ) ; }"]}
{"ids": "66375", "code": ["private boolean create New ( M Product product , M Acct Schema as ) {", "M Cost dimension = M Cost . get Or Create ( product , NUM_ , as , NUM_ , NUM_ , as . get M Cost Type ID ( ) , m ce . get M Cost Element ID ( ) ) ;", "if ( dimension . is new ( ) ) return dimension . save ( ) ;", "return false ; }"]}
{"ids": "30818", "code": ["@ Override protected void step ( ) {", "while ( iter . has Next ( ) ) {", "reg = ( Svc Reg ) iter . next ( ) ;", "if ( reg . lease Expiration > now ) return ; }", "reg = null ; }"]}
{"ids": "39320", "code": ["public Enumeration < String > packages ( ) {", "return m Cache . keys ( ) ; }"]}
{"ids": "44086", "code": ["protected int size ( ) {", "return document . length ( ) ; }"]}
{"ids": "27640", "code": ["public TPS current Row ( ) {", "return current Row ( null ) ; }"]}
{"ids": "53475", "code": ["public final void delete All Entries ( ) {", "if ( num Entries > NUM_ ) {", "Arrays . fill ( entries , null ) ;", "this . num Entries = NUM_ ; } }"]}
{"ids": "6831", "code": ["public List < Map < String , Object > > query ( final String index Name , final String q , final Operator operator , final int offset , final int count ) {", "assert count > NUM_ ;", "Search Request Builder request = elasticsearch Client . prepare Search ( index Name ) . set Query ( Query Builders . multi Match Query ( q , STR_ ) . operator ( operator ) . zero Terms Query ( Zero Terms Query . ALL ) ) . set From ( offset ) . set Size ( count ) ;", "Search Response response = request . execute ( ) . action Get ( ) ;", "Search Hit [ ] hits = response . get Hits ( ) . get Hits ( ) ;", "Array List < Map < String , Object > > result = new Array List < Map < String , Object > > ( ) ;", "for ( Search Hit hit : hits ) {", "Map < String , Object > map = hit . get Source ( ) ;", "result . add ( map ) ; }", "return result ; }"]}
{"ids": "67330", "code": ["public Sorted Set < String > plugins ( ) {", "Sorted Set < String > r = new Tree Set < > ( ) ;", "for ( Name Pair p : items . key Set ( ) ) {", "r . add ( p . plugin Name ) ; }", "return Collections . unmodifiable Sorted Set ( r ) ; }"]}
{"ids": "65846", "code": ["public static void error ( int Window No , Container c , String AD Message ) {", "error ( Window No , c , AD Message , null ) ; }"]}
{"ids": "37401", "code": ["public Reil Function translate ( final I Translation Environment environment , final I Block Container < Instruction Type > function ) throws Internal Translation Exception {", "return translate ( environment , function , new Array List < I Translation Extension < Instruction Type > > ( ) ) ; }"]}
{"ids": "46179", "code": ["public Name parse ( String name ) throws Naming Exception {", "Vector < String > comps = ins String To Stringified Comps ( name ) ;", "return new CN Compound Name ( comps . elements ( ) ) ; }"]}
{"ids": "36005", "code": ["public CSV Data Source Factory ( ) {", "super ( STR_ , CSV MIME TYPES , CSV FILE ENDINGS , CSV Format Specification Wizard Step . CSV FORMAT SPECIFICATION STEP ID ) ; }"]}
{"ids": "83500", "code": ["private void send Ack ( String index , String message , Guacamole Status status ) {", "if ( status != Guacamole Status . SUCCESS ) close Intercepted Stream ( index ) ;", "send Instruction ( new Guacamole Instruction ( STR_ , index , message , Integer . to String ( status . get Guacamole Status Code ( ) ) ) ) ; }"]}
{"ids": "763", "code": ["public static boolean is Windows Platform ( ) {", "String os = System . get Property ( STR_ ) ;", "return ( os != null && os . starts With ( WIN ID ) ) ; }"]}
{"ids": "41598", "code": ["static public int count Ranges That Collide Zone ( List < Bounds > ranges , List < Bounds > zone Ranges ) {", "int overall EOAA = NUM_ ;", "Collections . sort ( zone Ranges ) ;", "for ( Bounds extracted Bounds : ranges ) {", "for ( Bounds expected Bounds : zone Ranges ) {", "if ( expected Bounds . start >= extracted Bounds . end ) {", "break ; }", "if ( extracted Bounds . overlaps ( expected Bounds ) ) {", "overall EOAA ++ ;", "break ; } } }", "return overall EOAA ; }"]}
{"ids": "81323", "code": ["public static boolean time Stamp Changed ( String location ) {", "synchronized ( install Lock ) {", "if ( fg Has Changed . contains ( location ) ) {", "return true ; }", "File file = new File ( location ) ;", "if ( file . exists ( ) ) {", "if ( fg Install Time Map == null ) {", "read Install Info ( ) ; }", "Long stamp = fg Install Time Map . get ( location ) ;", "long fstamp = file . last Modified ( ) ;", "if ( stamp != null ) {", "if ( stamp . long Value ( ) == fstamp ) {", "return false ; } }", "stamp = new Long ( fstamp ) ;", "fg Install Time Map . put ( location , stamp ) ;", "write Install Info ( ) ;", "fg Has Changed . add ( location ) ;", "return true ; } }", "return false ; }"]}
{"ids": "10156", "code": ["public static Boolean [ ] values Of ( boolean [ ] array ) {", "Boolean [ ] dest = new Boolean [ array . length ] ;", "for ( int i = NUM_ ; i < array . length ; i ++ ) {", "dest [ i ] = Boolean . value Of ( array [ i ] ) ; }", "return dest ; }"]}
{"ids": "35537", "code": ["private void correct Too High ( int child Count ) {", "int last Position = m First Position + child Count - NUM_ ;", "if ( last Position == m Item Count - NUM_ && child Count > NUM_ ) {", "final int last Bottom = get Lowest Child Bottom ( ) ;", "final int end = ( get Bottom ( ) - get Top ( ) ) - get List Padding Bottom ( ) ;", "int bottom Offset = end - last Bottom ;", "final int first Top = get Highest Child Top ( ) ;", "if ( bottom Offset > NUM_ && ( m First Position > NUM_ || first Top < get List Padding Top ( ) ) ) {", "if ( m First Position == NUM_ ) {", "bottom Offset = Math . min ( bottom Offset , get List Padding Top ( ) - first Top ) ; }", "offset Children Top And Bottom ( bottom Offset ) ;", "if ( m First Position > NUM_ ) {", "int previous Position = m First Position - NUM_ ;", "fill Up ( previous Position , get Next Child Ups Bottom ( previous Position ) ) ;", "adjust Views Up Or Down ( ) ; } } } }"]}
{"ids": "72280", "code": ["public static boolean write Line ( String file Name , String value ) {", "Buffered Writer writer = null ;", "try {", "writer = new Buffered Writer ( new File Writer ( file Name ) ) ;", "writer . write ( value ) ; }", "catch ( File Not Found Exception e ) {", "Log . w ( TAG , STR_ + file Name + STR_ , e ) ;", "return false ; }", "catch ( IO Exception e ) {", "Log . e ( TAG , STR_ + file Name , e ) ;", "return false ; }", "finally {", "try {", "if ( writer != null ) {", "writer . close ( ) ; } }", "catch ( IO Exception e ) { } }", "return true ; }"]}
{"ids": "40539", "code": ["public void did Rollback ( ) {", "synchronized ( this ) {", "if ( pending != null ) {", "pending . cancel ( false ) ;", "pending = null ; }", "docs Since Commit . set ( NUM_ ) ; } }"]}
{"ids": "54616", "code": ["@ Override protected void calculate Thumb Location ( ) {", "super . calculate Thumb Location ( ) ;", "if ( slider . get Snap To Ticks ( ) ) {", "int upper Value = slider . get Value ( ) + slider . get Extent ( ) ;", "int snapped Value = upper Value ;", "int major Tick Spacing = slider . get Major Tick Spacing ( ) ;", "int minor Tick Spacing = slider . get Minor Tick Spacing ( ) ;", "int tick Spacing = NUM_ ;", "if ( minor Tick Spacing > NUM_ ) {", "tick Spacing = minor Tick Spacing ; }", "else if ( major Tick Spacing > NUM_ ) {", "tick Spacing = major Tick Spacing ; }", "if ( tick Spacing != NUM_ ) {", "if ( ( upper Value - slider . get Minimum ( ) ) % tick Spacing != NUM_ ) {", "float temp = ( float ) ( upper Value - slider . get Minimum ( ) ) / ( float ) tick Spacing ;", "int which Tick = Math . round ( temp ) ;", "snapped Value = slider . get Minimum ( ) + ( which Tick * tick Spacing ) ; }", "if ( snapped Value != upper Value ) {", "slider . set Extent ( snapped Value - slider . get Value ( ) ) ; } } }", "if ( slider . get Orientation ( ) == J Slider . HORIZONTAL ) {", "int upper Position = x Position For Value ( slider . get Value ( ) + slider . get Extent ( ) ) ;", "upper Thumb Rect . x = upper Position - ( upper Thumb Rect . width / NUM_ ) ;", "upper Thumb Rect . y = track Rect . y ; }", "else {", "int upper Position = y Position For Value ( slider . get Value ( ) + slider . get Extent ( ) ) ;", "upper Thumb Rect . x = track Rect . x ;", "upper Thumb Rect . y = upper Position - ( upper Thumb Rect . height / NUM_ ) ; } }"]}
{"ids": "8107", "code": ["public void compile ( int through Phase ) throws Compilation Failed Exception {", "goto Phase ( Phases . INITIALIZATION ) ;", "through Phase = Math . min ( through Phase , Phases . ALL ) ;", "while ( through Phase >= phase && phase <= Phases . ALL ) {", "if ( phase == Phases . SEMANTIC ANALYSIS ) {", "do Phase Operation ( resolve ) ;", "if ( dequeued ( ) ) continue ; }", "process Phase Operations ( phase ) ;", "process New Phase Operations ( phase ) ;", "if ( progress Callback != null ) progress Callback . call ( this , phase ) ;", "complete Phase ( ) ;", "apply To Source Units ( mark ) ;", "if ( dequeued ( ) ) continue ;", "goto Phase ( phase + NUM_ ) ;", "if ( phase == Phases . CLASS GENERATION ) {", "sort Classes ( ) ; } }", "error Collector . fail If Errors ( ) ; }"]}
{"ids": "72882", "code": ["public String generate Bearer Token ( String email , String username , Map < String , String > payload ) {", "String token = token Generator . generate ( ) ;", "Map < String , String > payload Copy = payload == null ? new Hash Map ( ) : new Hash Map ( payload ) ;", "payload Copy . put ( STR_ , email ) ;", "payload Copy . put ( STR_ , username ) ;", "payload Copy . put ( STR_ , Long . to String ( System . current Time Millis ( ) ) ) ;", "token Map . put ( token , payload Copy ) ;", "return token ; }"]}
{"ids": "54993", "code": ["public void end Document ( Augmentations augs ) throws XNI Exception {", "try {", "if ( f Document Handler != null ) {", "f Document Handler . end Document ( ) ; }", "if ( f Content Handler != null ) {", "f Content Handler . end Document ( ) ; } }", "catch ( SAX Exception e ) {", "throw new XNI Exception ( e ) ; } }"]}
{"ids": "8605", "code": ["public final Connection State new Input ( ) throws IO Exception {", "if ( in . has Remaining ( ) ) {", "throw new Runtime Exception ( STR_ ) ; }", "in . clear ( ) ;", "int r = ch . read ( in ) ;", "if ( r == - NUM_ ) throw new IO Exception ( STR_ ) ;", "if ( r == NUM_ ) return Connection State . SELECTOR WAIT FOR NEW INPUT ;", "in . flip ( ) ;", "return new Request Chunk ( ) ; }"]}
{"ids": "4659", "code": ["public boolean can Move Forward ( ) {", "return current Index >= NUM_ && current Index < ( history . size ( ) - NUM_ ) ; }"]}
{"ids": "54542", "code": ["public void clear Cache ( ) {", "Disk Lru Cache . clear Cache ( m Cache Dir ) ; }"]}
{"ids": "63442", "code": ["public void add Natural Join Column ( Column c ) {", "if ( natural Join Columns == null ) {", "natural Join Columns = New . array List ( ) ; }", "natural Join Columns . add ( c ) ; }"]}
{"ids": "33046", "code": ["private Refactoring Status check Can Create Intermediary Method ( ) throws Java Model Exception {", "List < I Type Binding > parameter Bindings = new Array List < I Type Binding > ( ) ;", "if ( ! is Static Target ( ) ) parameter Bindings . add ( f Intermediary First Parameter Type ) ;", "parameter Bindings . add All ( Arrays . as List ( f Target Method Binding . get Parameter Types ( ) ) ) ;", "return Checks . check Method In Type ( f Intermediary Type Binding , f Intermediary Method Name , parameter Bindings . to Array ( new I Type Binding [ parameter Bindings . size ( ) ] ) ) ; }"]}
{"ids": "7577", "code": ["@ Override public String generate Tool Tip ( XY Dataset data , int series , int item ) {", "return get Tool Tip Text ( series , item ) ; }"]}
{"ids": "19433", "code": ["private Class < ? > find Class Non Dalvik ( String name ) throws Class Not Found Exception {", "String path Name = CLASS PATH + name + STR_ ;", "File path = new File ( path Name ) ;", "Random Access File raf ;", "try {", "raf = new Random Access File ( path , STR_ ) ; }", "catch ( File Not Found Exception fnfe ) {", "throw new Class Not Found Exception ( STR_ + path Name ) ; }", "byte [ ] file Data ;", "try {", "file Data = new byte [ ( int ) raf . length ( ) ] ;", "raf . read Fully ( file Data ) ; }", "catch ( IO Exception ioe ) {", "throw new Class Not Found Exception ( STR_ + path Name ) ; }", "finally {", "try {", "raf . close ( ) ; }", "catch ( IO Exception ioe ) { } }", "try {", "return define Class ( name , file Data , NUM_ , file Data . length ) ; }", "catch ( Throwable th ) {", "throw new Class Not Found Exception ( STR_ , th ) ; } }"]}
{"ids": "53350", "code": ["public static void load ( Class < ? > parent ) {", "load ( parent , Class Loader . get System Class Loader ( ) ) ; }"]}
{"ids": "63872", "code": ["public void remove Change Listener ( Change Listener cl ) {", "listeners . remove ( cl ) ; }"]}
{"ids": "53729", "code": ["@ Guarded By ( STR_ ) void apply Read ( Node < K , V > node ) {", "if ( eviction Deque . contains ( node ) ) {", "eviction Deque . move To Back ( node ) ; } }"]}
{"ids": "12049", "code": ["private void flush Write Chunk ( ) {", "if ( write Chunk == null ) return ;", "if ( write Chunk . position ( ) == NUM_ ) return ;", "if ( ! write Chunk . has Remaining ( ) ) {", "bytes Written += write Chunk . position ( ) ;", "write Chunk . flip ( ) ;", "list . add Last ( write Chunk ) ;", "write Chunk = null ;", "return ; }", "bytes Written += write Chunk . position ( ) ;", "Byte Buffer flush Chunk = write Chunk ;", "write Chunk = write Chunk . slice ( ) ;", "write Chunk . order ( order ) ;", "flush Chunk . flip ( ) ;", "list . add Last ( flush Chunk ) ;", "return ; }"]}
{"ids": "74694", "code": ["public final double sin ( ) {", "return Math . sin ( this . radians ) ; }"]}
{"ids": "787", "code": ["public Axis Label Layout ( String group , int axis , Valued Range Model values ) {", "this ( group , axis , values , null ) ; }"]}
{"ids": "72772", "code": ["public double angle ( I Moving Agent agent ) {", "return Geometric . angle ( this . location , agent . get Location ( ) ) ; }"]}
{"ids": "7479", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( obj == this ) {", "return true ; }", "if ( ! ( obj instanceof Default Drawing Supplier ) ) {", "return false ; }", "Default Drawing Supplier that = ( Default Drawing Supplier ) obj ;", "if ( ! Arrays . equals ( this . paint Sequence , that . paint Sequence ) ) {", "return false ; }", "if ( this . paint Index != that . paint Index ) {", "return false ; }", "if ( ! Arrays . equals ( this . outline Paint Sequence , that . outline Paint Sequence ) ) {", "return false ; }", "if ( this . outline Paint Index != that . outline Paint Index ) {", "return false ; }", "if ( ! Arrays . equals ( this . stroke Sequence , that . stroke Sequence ) ) {", "return false ; }", "if ( this . stroke Index != that . stroke Index ) {", "return false ; }", "if ( ! Arrays . equals ( this . outline Stroke Sequence , that . outline Stroke Sequence ) ) {", "return false ; }", "if ( this . outline Stroke Index != that . outline Stroke Index ) {", "return false ; }", "if ( ! equal Shapes ( this . shape Sequence , that . shape Sequence ) ) {", "return false ; }", "if ( this . shape Index != that . shape Index ) {", "return false ; }", "return true ; }"]}
{"ids": "63793", "code": ["public static int brighter ( int c ) {", "int r = red ( c ) , g = green ( c ) , b = blue ( c ) ;", "int i = ( int ) ( NUM_ / ( NUM_ - scale ) ) ;", "if ( r == NUM_ && g == NUM_ && b == NUM_ ) {", "return rgba ( i , i , i , alpha ( c ) ) ; }", "if ( r > NUM_ && r < i ) r = i ;", "if ( g > NUM_ && g < i ) g = i ;", "if ( b > NUM_ && b < i ) b = i ;", "return rgba ( Math . min ( NUM_ , ( int ) ( r / scale ) ) , Math . min ( NUM_ , ( int ) ( g / scale ) ) , Math . min ( NUM_ , ( int ) ( b / scale ) ) , alpha ( c ) ) ; }"]}
{"ids": "51994", "code": ["@ Override protected void paint Component ( Graphics g ) {", "super . paint Component ( g ) ;", "Graphics 2 D g 2 = ( Graphics 2 D ) g ;", "if ( should Draw ) {", "draw Display List On ( g 2 ) ; } }"]}
{"ids": "33176", "code": ["public void load ( Input Stream in ) throws IO Exception {", "properties . load ( in ) ;", "dirty = false ; }"]}
{"ids": "67150", "code": ["@ Override public void on Bind View Holder ( VH holder , int position ) {", "if ( list . get ( position ) . type == TYPE ITEM ) {", "on Bind Item View Holder ( holder , position ) ; }", "else if ( list . get ( position ) . type == TYPE HEADER ) {", "on Bind Header View Holder ( holder , position ) ; } }"]}
{"ids": "82121", "code": ["public static Map < Component Wrapper , CC > parse Component Constraints ( Map < Component Wrapper , String > constr Map ) {", "Hash Map < Component Wrapper , CC > flow Constr Map = new Hash Map < Component Wrapper , CC > ( ) ;", "for ( Component Wrapper c : constr Map . key Set ( ) ) {", "flow Constr Map . put ( c , parse Component Constraint ( constr Map . get ( c ) ) ) ; }", "return flow Constr Map ; }"]}
{"ids": "59939", "code": ["private void send Stage Progress Patch ( Task State state ) {", "Service Utils . log Info ( this , STR_ , state . stage , state . sub Stage ) ;", "Task Utils . send Self Patch ( this , build Patch ( state . stage , state . sub Stage , null ) ) ; }"]}
{"ids": "4657", "code": ["public String move Back ( ) {", "Check . is True ( current Index > NUM_ , STR_ ) ;", "current Index -- ;", "return history . get ( current Index ) ; }"]}
{"ids": "70437", "code": ["public static long hash 64 ( final String text ) {", "final byte [ ] bytes = text . get Bytes ( ) ;", "return hash 64 ( bytes , bytes . length ) ; }"]}
{"ids": "40497", "code": ["public static void delete Core ( ) {", "log . info ( STR_ ) ;", "if ( h != null ) {", "h . close ( ) ; }", "if ( factory Prop == null ) {", "System . clear Property ( STR_ ) ; }", "solr Config = null ;", "h = null ;", "lrf = null ;", "config String = schema String = null ; }"]}
{"ids": "11542", "code": ["public static boolean can Tab ( List constraints ) {", "for ( Iterator iter = constraints . iterator ( ) ; iter . has Next ( ) ; ) {", "Dock Constraint dc = ( Dock Constraint ) iter . next ( ) ;", "if ( ! dc . can Tab ( ) ) return false ; }", "return true ; }"]}
{"ids": "23303", "code": ["public Imdn Parser parse ( ) throws Parser Configuration Exception , SAX Exception , Parse Failure Exception {", "try {", "SAX Parser Factory factory = SAX Parser Factory . new Instance ( ) ;", "SAX Parser parser = factory . new SAX Parser ( ) ;", "parser . parse ( m Input Source , this ) ;", "return this ; }", "catch ( IO Exception e ) {", "throw new Parse Failure Exception ( STR_ , e ) ; } }"]}
{"ids": "23747", "code": ["static boolean chunk Set ( Internal Distributed Member recipient , Set set , int CHUNK SIZE IN BYTES , boolean include Values , Object Int Procedure proc ) throws IO Exception {", "Iterator it = set . iterator ( ) ;", "boolean keep Going = true ;", "boolean sent Last Chunk = false ;", "final Heap Data Output Stream mos = new Heap Data Output Stream ( Initial Image Operation . CHUNK SIZE IN BYTES + NUM_ , recipient . get Version Object ( ) ) ;", "do {", "mos . reset ( ) ;", "int avg Item Size = NUM_ ;", "int item Count = NUM_ ;", "while ( ( mos . size ( ) + avg Item Size ) < Initial Image Operation . CHUNK SIZE IN BYTES && it . has Next ( ) ) {", "Object key = it . next ( ) ;", "Data Serializer . write Object ( key , mos ) ;", "item Count ++ ;", "avg Item Size = mos . size ( ) / item Count ; }", "Data Serializer . write Object ( ( Object ) null , mos ) ;", "int last Msg = it . has Next ( ) ? NUM_ : NUM_ ;", "keep Going = proc . execute With ( mos , last Msg ) ;", "sent Last Chunk = last Msg == NUM_ && keep Going ; }", "while ( keep Going && it . has Next ( ) ) ;", "return sent Last Chunk ; }"]}
{"ids": "10806", "code": ["public static Big Integer to Big Integer ( final Ed 25519 Encoded Field Element encoded ) {", "return to Big Integer ( encoded . get Raw ( ) ) ; }"]}
{"ids": "83446", "code": ["public String escape LDAP Search Filter ( String filter ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < filter . length ( ) ; i ++ ) {", "char cur Char = filter . char At ( i ) ;", "switch ( cur Char ) {", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "default :", "sb . append ( cur Char ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "75655", "code": ["protected synchronized void save ( ) {", "int ret Val ;", "File file ;", "String text ;", "File Writer fwriter ;", "Buffered Writer bwriter ;", "ret Val = m File Chooser . show Open Dialog ( this ) ;", "if ( ret Val != Meka File Chooser . APPROVE OPTION ) return ;", "file = m File Chooser . get Selected File ( ) ;", "text = m Text Area . get Text ( ) ;", "fwriter = null ;", "bwriter = null ;", "try {", "fwriter = new File Writer ( file ) ;", "bwriter = new Buffered Writer ( fwriter ) ;", "bwriter . write ( text ) ;", "bwriter . new Line ( ) ;", "bwriter . flush ( ) ;", "log ( STR_ + file ) ; }", "catch ( Exception e ) {", "handle Exception ( STR_ + file , e ) ; }", "finally {", "File Utils . close Quietly ( bwriter ) ;", "File Utils . close Quietly ( fwriter ) ; } }"]}
{"ids": "53235", "code": ["public Eigenvalue Decomposition ( double [ ] [ ] A ) {", "n = A . length ;", "V = new double [ n ] [ n ] ;", "d = new double [ n ] ;", "e = new double [ n ] ;", "issymmetric = true ;", "for ( int j = NUM_ ; ( j < n ) && issymmetric ; j ++ ) {", "for ( int i = NUM_ ; ( i < n ) && issymmetric ; i ++ ) {", "issymmetric = ( A [ i ] [ j ] == A [ j ] [ i ] ) ;", "if ( Double . is Na N ( A [ i ] [ j ] ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( Double . is Infinite ( A [ i ] [ j ] ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; } } }", "if ( issymmetric ) {", "for ( int i = NUM_ ; i < n ; i ++ ) {", "System . arraycopy ( A [ i ] , NUM_ , V [ i ] , NUM_ , n ) ; }", "tred 2 ( ) ;", "tql 2 ( ) ; }", "else {", "H = new double [ n ] [ n ] ;", "ort = new double [ n ] ;", "for ( int j = NUM_ ; j < n ; j ++ ) {", "for ( int i = NUM_ ; i < n ; i ++ ) {", "H [ i ] [ j ] = A [ i ] [ j ] ; } }", "orthes ( ) ;", "hqr 2 ( ) ; } }"]}
{"ids": "56481", "code": ["public Search Source Builder fields ( String ... fields ) {", "if ( field Names == null ) {", "field Names = new Array List < > ( ) ; }", "Collections . add All ( field Names , fields ) ;", "return this ; }"]}
{"ids": "53364", "code": ["public static String Builder format To ( String Builder buf , boolean [ ] d , String sep ) {", "if ( d == null ) {", "return buf . append ( STR_ ) ; }", "if ( d . length == NUM_ ) {", "return buf ; }", "buf . append ( d [ NUM_ ] ) ;", "for ( int i = NUM_ ; i < d . length ; i ++ ) {", "buf . append ( sep ) ;", "buf . append ( format ( d [ i ] ) ) ; }", "return buf ; }"]}
{"ids": "66813", "code": ["public String to Complete String ( ) {", "String ret = STR_ ;", "if ( ! lines . is Empty ( ) && ! Config . v ( ) . no Source Info ) {", "for ( Source Location Tag line : lines ) {", "ret += STR_ + line + STR_ ; } }", "ret += to Signature String ( ) ;", "return ret ; }"]}
{"ids": "30398", "code": ["@ Override public void update Receipt Details ( final Set < Bill Receipt Info > bill Receipts ) {", "LOGGER . debug ( STR_ + bill Receipts ) ;", "final Boolean status = false ;", "if ( bill Receipts != null ) super . update Receipt Details ( bill Receipts ) ;", "LOGGER . debug ( STR_ + status ) ; }"]}
{"ids": "13802", "code": ["public static void remove Map Entries ( Map map , Set set ) {", "if ( ( set != null ) && ! set . is Empty ( ) ) {", "for ( Iterator iter = set . iterator ( ) ; iter . has Next ( ) ; ) {", "map . remove ( iter . next ( ) ) ; } } }"]}
{"ids": "50164", "code": ["public static void put File ( Service Client h , final Operation put , File f ) throws IO Exception {", "final Asynchronous File Channel ch = Asynchronous File Channel . open ( f . to Path ( ) , Standard Open Option . READ ) ;", "Atomic Integer completion Count = new Atomic Integer ( NUM_ ) ;", "String content Type = File Utils . get Content Type ( f . to URI ( ) ) ;", "final boolean [ ] file Is Done = { false } ;", "put Chunks ( h , put , ch , content Type , f . length ( ) , NUM_ , completion Count , file Is Done ) ; }"]}
{"ids": "83583", "code": ["protected String Builder process Line ( String next Element ) {", "String Builder sb = new String Builder ( INITIAL STRING SIZE ) ;", "for ( int j = NUM_ ; j < next Element . length ( ) ; j ++ ) {", "char next Char = next Element . char At ( j ) ;", "process Character ( sb , next Char ) ; }", "return sb ; }"]}
{"ids": "33095", "code": ["public Java Refactoring Descriptor ( final String id , final String project , final String description , final String comment , final Map arguments , final int flags ) {", "super ( id , project , description , comment , flags ) ;", "f Arguments = arguments ;", "f Arguments . put ( ATTRIBUTE VERSION , VALUE VERSION 1 0 ) ; }"]}
{"ids": "25374", "code": ["private static Supported Group negotiate Named Curve ( Client Hello client Hello ) {", "Supported Group result = null ;", "List < Supported Group > preferred Groups = Supported Group . get Preferred Groups ( ) ;", "Supported Elliptic Curves Extension extension = client Hello . get Supported Elliptic Curves Extension ( ) ;", "if ( extension == null ) {", "if ( ! preferred Groups . is Empty ( ) ) {", "result = preferred Groups . get ( NUM_ ) ; } }", "else {", "for ( Integer preferred Group Id : extension . get Supported Group Ids ( ) ) {", "Supported Group group = Supported Group . from Id ( preferred Group Id ) ;", "if ( group != null && group . is Usable ( ) && preferred Groups . contains ( group ) ) {", "result = group ;", "break ; } } }", "return result ; }"]}
{"ids": "65628", "code": ["public void zoom ( ) {", "if ( get Selected Row Key ( ) != null && get Selected Row Key ( ) > NUM_ ) {", "M Query zoom Query = new M Query ( ) ;", "String column = get Key Column ( ) ;", "if ( column . index Of ( STR_ ) > NUM_ ) column = column . substring ( column . index Of ( STR_ ) + NUM_ ) ;", "zoom Query . add Restriction ( column , M Query . EQUAL , get Selected Row Key ( ) ) ;", "zoom Query . set Record Count ( NUM_ ) ;", "zoom Query . set Table Name ( column . substring ( NUM_ , column . length ( ) - NUM_ ) ) ;", "A Env . zoom ( NUM_ , zoom Query ) ; } }"]}
{"ids": "75380", "code": ["public long avg Rate ( ) {", "long sum = NUM_ ;", "for ( Sample s : samples ) {", "sum += s . rate ( ) ; }", "return ( long ) ( sum / ( long ) samples . size ( ) ) ; }"]}
{"ids": "62214", "code": ["@ Override public synchronized void close ( ) throws IO Exception {", "try {", "if ( sync Task != null ) {", "sync Task . cancel ( ) ; }", "sync ( ) ;", "unmap File ( ) ; }", "finally {", "super . close ( ) ; } }"]}
{"ids": "11664", "code": ["public boolean mouse Moved ( Mouse Event e ) {", "OM Graphic new Selected Graphic ;", "if ( show plot && graph != null ) {", "new Selected Graphic = graph . select Point ( e . get X ( ) , e . get Y ( ) , NUM_ ) ;", "if ( new Selected Graphic != null ) {", "String infostring = ( String ) ( new Selected Graphic . get Attribute ( OM Graphic . APP OBJECT ) ) ;", "if ( infostring != null ) {", "fire Request Info Line ( infostring ) ; } }", "else {", "fire Request Info Line ( STR_ ) ; }", "return true ; }", "else {", "OM Graphic List list = get List ( ) ;", "if ( list != null ) {", "new Selected Graphic = list . select Closest ( e . get X ( ) , e . get Y ( ) , NUM_ ) ;", "if ( new Selected Graphic != null && ( selected Graphic == null || new Selected Graphic != selected Graphic ) ) {", "Debug . message ( STR_ , STR_ ) ;", "selected Graphic = new Selected Graphic ;", "selected Graphic . regenerate ( get Projection ( ) ) ;", "GLOBE Site site = ( GLOBE Site ) ( new Selected Graphic . get Attribute ( OM Graphic . APP OBJECT ) ) ;", "if ( site != null ) {", "fire Request Info Line ( site . get Info ( ) ) ; }", "repaint ( ) ; }", "else if ( selected Graphic != null && new Selected Graphic == null ) {", "Debug . message ( STR_ , STR_ ) ;", "selected Graphic . regenerate ( get Projection ( ) ) ;", "fire Request Info Line ( STR_ ) ;", "selected Graphic = null ;", "repaint ( ) ; }", "return true ; } }", "return false ; }"]}
{"ids": "6503", "code": ["public void hide Popup ( ) {", "show Pending = false ;", "if ( popup != null ) {", "popup . hide ( ) ;", "popup = null ; } }"]}
{"ids": "8353", "code": ["public final Runtime Exception process Do Method Invoke Exception ( Exception e , Object object , Object [ ] argument Array ) {", "if ( e instanceof Runtime Exception ) return ( Runtime Exception ) e ;", "return Meta Class Helper . create Exception Text ( STR_ , this , object , argument Array , e , true ) ; }"]}
{"ids": "10947", "code": ["protected boolean build Subfield Defns ( String psz Sublist ) {", "if ( psz Sublist . char At ( NUM_ ) == STR_ ) {", "b Repeating Subfields = true ;", "psz Sublist = psz Sublist . substring ( NUM_ ) ; }", "Vector papsz Subfield Names = Prop Utils . parse Markers ( psz Sublist , STR_ ) ;", "pao Subfield Defns = new Vector ( ) ;", "for ( Iterator it = papsz Subfield Names . iterator ( ) ; it . has Next ( ) ; ) {", "DDF Subfield Definition ddfsd = new DDF Subfield Definition ( ) ;", "ddfsd . set Name ( ( String ) it . next ( ) ) ;", "pao Subfield Defns . add ( ddfsd ) ; }", "return true ; }"]}
{"ids": "64902", "code": ["public boolean is Running ( ) {", "return m Running . get ( ) ; }"]}
{"ids": "2791", "code": ["private static Map < String , Boolean > object Methods To Generate ( List < Executable Element > methods ) {", "Map < String , Boolean > vars = new Tree Map < String , Boolean > ( ) ;", "vars . put ( STR_ , false ) ;", "vars . put ( STR_ , false ) ;", "vars . put ( STR_ , false ) ;", "for ( Executable Element method : methods ) {", "if ( is To String Or Equals Or Hash Code ( method ) ) {", "boolean can Generate = method . get Modifiers ( ) . contains ( Modifier . ABSTRACT ) || is Java Lang Object ( ( Type Element ) method . get Enclosing Element ( ) ) ;", "vars . put ( method . get Simple Name ( ) . to String ( ) , can Generate ) ; } }", "assert vars . size ( ) == NUM_ ;", "return vars ; }"]}
{"ids": "22795", "code": ["public void add Entry Time ( double time ) {", "if ( entry Times == null ) {", "return ; }", "if ( time < NUM_ ) {", "time = NUM_ ; }", "entry Times . add ( Double . value Of ( time ) ) ; }"]}
{"ids": "68689", "code": ["public final double NPV ( ) {", "calculate ( ) ;", "QL . require ( ! Double . is Na N ( this . NPV ) , STR_ ) ;", "return NPV ; }"]}
{"ids": "72440", "code": ["public Array Real Vector ( Array Real Vector v 1 , Real Vector v 2 ) {", "final int l 1 = v 1 . data . length ;", "final int l 2 = v 2 . get Dimension ( ) ;", "data = new double [ l 1 + l 2 ] ;", "System . arraycopy ( v 1 . data , NUM_ , data , NUM_ , l 1 ) ;", "for ( int i = NUM_ ; i < l 2 ; ++ i ) {", "data [ l 1 + i ] = v 2 . get Entry ( i ) ; } }"]}
{"ids": "79320", "code": ["public static Map < String , Object > deactivate Content Assoc ( Dispatch Context dctx , Map < String , ? extends Object > rcontext ) {", "Map < String , Object > context = Util Misc . make Map Writable ( rcontext ) ;", "context . put ( STR_ , STR_ ) ;", "List < String > target Operation List = Content Worker . prep Target Operation List ( context , STR_ ) ;", "List < String > content Purpose List = Content Worker . prep Content Purpose List ( context ) ;", "context . put ( STR_ , target Operation List ) ;", "context . put ( STR_ , content Purpose List ) ;", "context . put ( STR_ , null ) ;", "Map < String , Object > result = deactivate Content Assoc Method ( dctx , context ) ;", "return result ; }"]}
{"ids": "12342", "code": ["public Byte Buffer flush And Release Buffer ( ) throws IO Exception {", "lock . lock ( ) ;", "try {", "flush Pending = true ;", "while ( buffer Use Count != NUM_ ) {", "flush Ready . await ( ) ; }", "buffer . flip ( ) ;", "if ( buffer . limit ( ) != NUM_ && modified ) {", "if ( backing File == null ) {", "backing File = Files . create Temp File ( STR_ , STR_ ) ; }", "log . debug ( STR_ , start Index , backing File , buffer . limit ( ) , block Size ) ;", "try ( Byte Channel out = Files . new Byte Channel ( backing File , WRITE ) ) {", "out . write ( buffer ) ; } }", "else {", "log . debug ( STR_ , start Index ) ; }", "Byte Buffer old Buffer = buffer ;", "buffer = null ;", "loaded = false ;", "return old Buffer ; }", "catch ( Interrupted Exception e ) {", "throw Throwables . propagate ( e ) ; }", "finally {", "flush Pending = false ;", "flush Complete . signal All ( ) ;", "lock . unlock ( ) ; } }"]}
{"ids": "33800", "code": ["public static boolean is Directly Getting Powered ( World world , Coord 4 D coord ) {", "for ( Forge Direction side : Forge Direction . VALID DIRECTIONS ) {", "Coord 4 D side Coord = coord . get From Side ( side ) ;", "if ( side Coord . exists ( world ) ) {", "if ( world . is Block Providing Power To ( coord . x Coord , coord . y Coord , coord . z Coord , side . ordinal ( ) ) > NUM_ ) {", "return true ; } } }", "return false ; }"]}
{"ids": "9980", "code": ["public < T extends Property Container > List < Search Match < T > > search ( String query , Class < T > clazz ) {", "Search Result result = do Query ( query , clazz ) ;", "List < Search Match < T > > matches = build Search Matches ( result ) ;", "@ Suppress Warnings ( STR_ ) Function < Search Match , T > resolver = ( Function < Search Match , T > ) ( clazz . equals ( Node . class ) ? get Node Resolver ( ) : get Relationship Resolver ( ) ) ;", "return resolve Match Items ( matches , resolver ) ; }"]}
{"ids": "47401", "code": ["private synchronized void enumerate ( Hashtable < String , Object > h ) {", "if ( defaults != null ) {", "defaults . enumerate ( h ) ; }", "for ( Enumeration < ? > e = keys ( ) ; e . has More Elements ( ) ; ) {", "String key = ( String ) e . next Element ( ) ;", "h . put ( key , get ( key ) ) ; } }"]}
{"ids": "65564", "code": ["public void update Quantity Csv ( Item Bean original , Item Bean item To Add , boolean add ) {", "Big Decimal original Quantity = original . get Qty Csv ( ) ;", "Big Decimal quantity To Add = item To Add . get Qty Csv ( ) ;", "Big Decimal final Quantity = null ;", "if ( ! add ) final Quantity = original Quantity . subtract ( quantity To Add ) ;", "else final Quantity = original Quantity . add ( quantity To Add ) ;", "original . set Qty Csv ( final Quantity ) ; }"]}
{"ids": "42940", "code": ["public static Number abs ( Number a ) {", "if ( is Floating Point ( a ) ) {", "return Math . abs ( a . double Value ( ) ) ; }", "else {", "return Math . abs ( a . long Value ( ) ) ; } }"]}
{"ids": "5612", "code": ["private void send Response ( String status , String mime , Properties header , Input Stream data ) {", "try {", "if ( status == null ) throw new Error ( STR_ ) ;", "Output Stream out = my Socket . get Output Stream ( ) ;", "Print Writer pw = new Print Writer ( out ) ;", "pw . print ( STR_ + status + STR_ ) ;", "if ( mime != null ) pw . print ( STR_ + mime + STR_ ) ;", "if ( header == null || header . get Property ( STR_ ) == null ) pw . print ( STR_ + gmt Frmt . format ( new Date ( ) ) + STR_ ) ;", "if ( header != null ) {", "Enumeration e = header . keys ( ) ;", "while ( e . has More Elements ( ) ) {", "String key = ( String ) e . next Element ( ) ;", "String value = header . get Property ( key ) ;", "pw . print ( key + STR_ + value + STR_ ) ; } }", "pw . print ( STR_ ) ;", "pw . flush ( ) ;", "if ( data != null ) {", "int pending = data . available ( ) ;", "byte [ ] buff = new byte [ NUM_ ] ;", "while ( pending > NUM_ ) {", "int read = data . read ( buff , NUM_ , ( ( pending > NUM_ ) ? NUM_ : pending ) ) ;", "if ( read <= NUM_ ) break ;", "out . write ( buff , NUM_ , read ) ;", "pending -= read ; } }", "out . flush ( ) ;", "out . close ( ) ;", "if ( data != null ) data . close ( ) ; }", "catch ( IO Exception ioe ) {", "try {", "my Socket . close ( ) ; }", "catch ( Throwable t ) { } } }"]}
{"ids": "6278", "code": ["public static Input Stream to Input Stream ( Char Sequence input , Charset encoding ) {", "return to Input Stream ( input . to String ( ) , encoding ) ; }"]}
{"ids": "19479", "code": ["public User ( String id , String name , String email ) {", "this . id = id ;", "this . email = email ;", "this . name = name ; }"]}
{"ids": "6297", "code": ["public static void force Delete On Exit ( File file ) throws IO Exception {", "if ( file . is Directory ( ) ) {", "delete Directory On Exit ( file ) ; }", "else {", "file . delete On Exit ( ) ; } }"]}
{"ids": "73122", "code": ["@ Suppress Warnings ( STR_ ) public Object [ ] to Array ( ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "Object [ ] a = new Object [ count ] ;", "int k = NUM_ ;", "for ( Node < E > p = first ; p != null ; p = p . next ) a [ k ++ ] = p . item ;", "return a ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "61692", "code": ["public static Asset create Asset From Bitmap ( Bitmap bitmap ) {", "if ( bitmap != null ) {", "final Byte Array Output Stream byte Stream = new Byte Array Output Stream ( ) ;", "bitmap . compress ( Bitmap . Compress Format . PNG , NUM_ , byte Stream ) ;", "return Asset . create From Bytes ( byte Stream . to Byte Array ( ) ) ; }", "return null ; }"]}
{"ids": "14806", "code": ["public boolean is IP Valid ( Session sess , String client IP ) throws SSO Exception {", "boolean check = false ;", "try {", "Inet Address sess IP Address = Inet Address . get By Name ( sess . get Property ( STR_ ) ) ;", "Inet Address client IP Address = Inet Address . get By Name ( client IP ) ;", "if ( sess IP Address . equals ( client IP Address ) ) {", "check = true ; } }", "catch ( Exception e ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , e ) ; } }", "return check ; }"]}
{"ids": "76274", "code": ["@ Suppress Warnings ( STR_ ) private static void handle Method Node ( Get Static Graph static Usage Tree , Class Node cn , Method Node mn , int depth ) {", "Insn List instructions = mn . instructions ;", "Iterator < Abstract Insn Node > iterator = instructions . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "Abstract Insn Node insn = iterator . next ( ) ;", "if ( insn instanceof Method Insn Node ) {", "handle Method Insn Node ( static Usage Tree , cn , mn , ( Method Insn Node ) insn , depth + NUM_ ) ; }", "else if ( insn instanceof Field Insn Node ) {", "handle Field Insn Node ( static Usage Tree , cn , mn , ( Field Insn Node ) insn , depth + NUM_ ) ; } } }"]}
{"ids": "16313", "code": ["public boolean handle Touch ( Motion Event event ) {", "int action = event . get Action ( ) ;", "if ( m Renderer != null && action == Motion Event . ACTION MOVE ) {", "if ( old X >= NUM_ || old Y >= NUM_ ) {", "float new X = event . get X ( NUM_ ) ;", "float new Y = event . get Y ( NUM_ ) ;", "if ( event . get Pointer Count ( ) > NUM_ && ( old X 2 >= NUM_ || old Y 2 >= NUM_ ) && m Renderer . is Zoom Enabled ( ) ) {", "float new X 2 = event . get X ( NUM_ ) ;", "float new Y 2 = event . get Y ( NUM_ ) ;", "float new Delta X = Math . abs ( new X - new X 2 ) ;", "float new Delta Y = Math . abs ( new Y - new Y 2 ) ;", "float old Delta X = Math . abs ( old X - old X 2 ) ;", "float old Delta Y = Math . abs ( old Y - old Y 2 ) ;", "float zoom Rate = NUM_ ;", "float tan 1 = Math . abs ( new Y - old Y ) / Math . abs ( new X - old X ) ;", "float tan 2 = Math . abs ( new Y 2 - old Y 2 ) / Math . abs ( new X 2 - old X 2 ) ;", "if ( tan 1 <= NUM_ && tan 2 <= NUM_ ) {", "zoom Rate = new Delta X / old Delta X ;", "apply Zoom ( zoom Rate , Zoom . ZOOM AXIS X ) ; }", "else if ( tan 1 >= NUM_ && tan 2 >= NUM_ ) {", "zoom Rate = new Delta Y / old Delta Y ;", "apply Zoom ( zoom Rate , Zoom . ZOOM AXIS Y ) ; }", "else {", "if ( Math . abs ( new X - old X ) >= Math . abs ( new Y - old Y ) ) {", "zoom Rate = new Delta X / old Delta X ; }", "else {", "zoom Rate = new Delta Y / old Delta Y ; }", "apply Zoom ( zoom Rate , Zoom . ZOOM AXIS XY ) ; }", "old X 2 = new X 2 ;", "old Y 2 = new Y 2 ; }", "else if ( m Renderer . is Pan Enabled ( ) ) {", "m Pan . apply ( old X , old Y , new X , new Y ) ;", "old X 2 = NUM_ ;", "old Y 2 = NUM_ ; }", "old X = new X ;", "old Y = new Y ;", "graphical View . repaint ( ) ;", "return true ; } }", "else if ( action == Motion Event . ACTION DOWN ) {", "old X = event . get X ( NUM_ ) ;", "old Y = event . get Y ( NUM_ ) ;", "if ( m Renderer != null && m Renderer . is Zoom Enabled ( ) && zoom R . contains ( old X , old Y ) ) {", "if ( old X < zoom R . left + zoom R . width ( ) / NUM_ ) {", "graphical View . zoom In ( ) ; }", "else if ( old X < zoom R . left + zoom R . width ( ) * NUM_ / NUM_ ) {", "graphical View . zoom Out ( ) ; }", "else {", "graphical View . zoom Reset ( ) ; }", "return true ; } }", "else if ( action == Motion Event . ACTION UP || action == Motion Event . ACTION POINTER UP ) {", "old X = NUM_ ;", "old Y = NUM_ ;", "old X 2 = NUM_ ;", "old Y 2 = NUM_ ;", "if ( action == Motion Event . ACTION POINTER UP ) {", "old X = - NUM_ ;", "old Y = - NUM_ ; } }", "return ! m Renderer . is Click Enabled ( ) ; }"]}
{"ids": "79800", "code": ["public void add Parameter ( Name Value Pair param ) throws Illegal Argument Exception {", "log . trace ( STR_ ) ;", "if ( param == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "add Parameter ( param . get Name ( ) , param . get Value ( ) ) ; }"]}
{"ids": "749", "code": ["public static String read As String ( Input Stream is ) throws IO Exception {", "String Buffer buf = new String Buffer ( ) ;", "byte [ ] b = new byte [ NUM_ ] ;", "int nread = - NUM_ ;", "while ( ( nread = is . read ( b ) ) >= NUM_ ) {", "String s = new String ( b , NUM_ , nread ) ;", "buf . append ( s ) ; }", "return buf . to String ( ) ; }"]}
{"ids": "69824", "code": ["private void read Policies ( Xml Pull Parser parser ) throws IO Exception , Xml Pull Parser Exception {", "while ( parser . next ( ) != Xml Pull Parser . END TAG ) {", "if ( parser . get Event Type ( ) != Xml Pull Parser . START TAG ) {", "continue ; }", "String name = parser . get Name ( ) ;", "if ( TAG USER RESTRICTION . equals ( name ) ) {", "String user Restriction = parser . get Attribute Value ( null , ATTRIBUTE NAME ) ;", "if ( user Restriction != null ) {", "m User Restrictions . add ( user Restriction ) ; } }", "else if ( TAG GLOBAL SETTING . equals ( name ) ) {", "String setting = parser . get Attribute Value ( null , ATTRIBUTE NAME ) ;", "String value = parser . get Attribute Value ( null , ATTRIBUTE VALUE ) ;", "if ( setting != null && value != null ) {", "m Global Settings . add ( new Global Setting ( setting , value ) ) ; } }", "else if ( TAG DISABLE STATUS BAR . equals ( name ) ) {", "m Disable Status Bar = Boolean . parse Boolean ( parser . get Attribute Value ( null , ATTRIBUTE VALUE ) ) ; }", "else if ( TAG DISABLE KEYGUARD . equals ( name ) ) {", "m Disable Keyguard = Boolean . parse Boolean ( parser . get Attribute Value ( null , ATTRIBUTE VALUE ) ) ; }", "else if ( TAG DISABLE CAMERA . equals ( name ) ) {", "m Disable Camera = Boolean . parse Boolean ( parser . get Attribute Value ( null , ATTRIBUTE VALUE ) ) ; }", "else if ( TAG DISABLE SCREEN CAPTURE . equals ( name ) ) {", "m Disable Screen Capture = Boolean . parse Boolean ( parser . get Attribute Value ( null , ATTRIBUTE VALUE ) ) ; }", "skip Current Tag ( parser ) ; } }"]}
{"ids": "62444", "code": ["public boolean read Header ( Random Access File raf ) throws IO Exception {", "String Buffer id = new String Buffer ( NUM_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "int ch = raf . read ( ) ;", "if ( ch < NUM_ ) {", "String hx = Integer . to Hex String ( ch ) ;", "if ( hx . length ( ) < NUM_ ) {", "hx = STR_ + hx ; }", "return false ; }", "id . append ( ( char ) ch ) ; }", "chunk ID = id . to String ( ) ;", "size = Aiff Util . read UINT 32 ( raf ) ;", "return true ; }"]}
{"ids": "24905", "code": ["private XY Plot initialize Plot ( ) {", "jmx Chart = new Y Interval Series Improved ( STR_ ) ;", "Y Interval Series Collection yintervalseriescollection = new Y Interval Series Collection ( ) ;", "yintervalseriescollection . add Series ( jmx Chart ) ;", "Deviation Renderer renderer = new Deviation Renderer ( true , false ) ;", "renderer . set Base Shapes Visible ( true ) ;", "renderer . set Series Stroke ( NUM_ , new Basic Stroke ( NUM_ , Basic Stroke . CAP ROUND , Basic Stroke . JOIN ROUND ) ) ;", "renderer . set Series Fill Paint ( NUM_ , new Color ( NUM_ , NUM_ , NUM_ ) ) ;", "renderer . set Series Outline Stroke ( NUM_ , new Basic Stroke ( NUM_ ) ) ;", "renderer . set Series Shape ( NUM_ , new Ellipse 2 D . Double ( - NUM_ , - NUM_ , NUM_ , NUM_ ) ) ;", "renderer . set Base Tool Tip Generator ( new Standard XY Tool Tip Generator ( Standard XY Tool Tip Generator . DEFAULT TOOL TIP FORMAT , Date Format . get Date Time Instance ( ) , Number Format . get Number Instance ( ) ) ) ;", "Number Axis range Axis = plot Data Solver . get Axis ( ) ;", "subplot = new XY Plot ( yintervalseriescollection , null , range Axis , renderer ) ;", "subplot . set Axis Offset ( new Rectangle Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "subplot . set Range Axis Location ( Axis Location . TOP OR LEFT ) ;", "subplot . set Range Crosshair Visible ( true ) ;", "return subplot ; }"]}
{"ids": "51718", "code": ["private boolean is Fatal State ( String sql State ) {", "if ( sql State == null || sql State . length ( ) < NUM_ ) {", "return true ; }", "for ( String FATAL SQL STATE CLASS : FATAL SQL STATE CLASSES ) {", "if ( sql State . starts With ( FATAL SQL STATE CLASS ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "8578", "code": ["private void analyze File ( File input File , Optional < Common Token Stream > opt Token Stream , Optional < Top Level Context > opt Tree , Formatter formatter , Severity max Severity , Construct Lengths construct Lengths , Set < Rules > enabled Rules ) throws CLI Argument Parser Exception {", "try {", "Printer printer = new Printer ( input File , max Severity , formatter ) ;", "if ( opt Token Stream . is Present ( ) && opt Tree . is Present ( ) ) {", "Common Token Stream token Stream = opt Token Stream . get ( ) ;", "Top Level Context tree = opt Tree . get ( ) ;", "Comment Extractor comment Extractor = new Comment Extractor ( token Stream ) ;", "Violation Suppressor disable Analysis = new Violation Suppressor ( printer , comment Extractor . get Single Line Comments ( ) , comment Extractor . get Multiline Comments ( ) ) ;", "disable Analysis . analyze ( ) ;", "List < Swift Base Listener > listeners = create Listeners ( enabled Rules , printer , token Stream , construct Lengths , comment Extractor ) ;", "walk Parse Tree ( listeners , tree ) ;", "try ( File Listener file Listener = new File Listener ( printer , input File , construct Lengths , enabled Rules ) ) {", "file Listener . verify ( ) ; }", "num Errors . add And Get ( printer . get Num Error Messages ( ) ) ;", "num Warnings . add And Get ( printer . get Num Warning Messages ( ) ) ; }", "else {", "printer . set Should Print Parse Error Message ( true ) ; }", "printers For All Files . add ( printer ) ; }", "catch ( IO Exception e ) {", "handle IO Exception ( e ) ; }", "catch ( CLI Argument Parser Exception e ) {", "handle CLI Exception ( e ) ; } }"]}
{"ids": "67814", "code": ["@ Suppress Warnings ( STR_ ) public static < Value T > Value T to Object ( Byte Buffer bf ) throws IO Exception , Class Not Found Exception {", "Object obj = null ;", "Input Stream is = null ;", "Object Input Stream ois = null ;", "try {", "is = new Byte Buffer Backed Input Stream ( bf ) ;", "ois = new Object Input Stream ( is ) ;", "obj = ois . read Object ( ) ; }", "finally {", "if ( is != null ) {", "is . close ( ) ; }", "if ( ois != null ) {", "ois . close ( ) ; } }", "return ( Value T ) obj ; }"]}
{"ids": "27507", "code": ["static private void scan Deadline Queue ( final long now Nanos , final Priority Blocking Queue < Query Deadline > deadline Queue ) {", "final List < Query Deadline > c = new Array List < Query Deadline > ( DEADLINE QUEUE SCAN SIZE ) ;", "deadline Queue . drain To ( c , DEADLINE QUEUE SCAN SIZE ) ;", "int ndropped = NUM_ , nrunning = NUM_ ;", "for ( Query Deadline x : c ) {", "if ( x . check Deadline ( now Nanos ) != null ) {", "deadline Queue . add ( x ) ;", "nrunning ++ ; }", "else {", "ndropped ++ ; } }", "if ( log . is Info Enabled ( ) ) log . info ( STR_ + DEADLINE QUEUE SCAN SIZE + STR_ + ndropped + STR_ + nrunning + STR_ + deadline Queue . size ( ) ) ; }"]}
{"ids": "64166", "code": ["public int compare ( File file 1 , File file 2 ) {", "return case Sensitivity . check Compare To ( file 1 . get Name ( ) , file 2 . get Name ( ) ) ; }"]}
{"ids": "53758", "code": ["@ Override public String last String ( ) {", "return Integer . to String ( lastint ) ; }"]}
{"ids": "4372", "code": ["public boolean remove Item Content ( String uid ) {", "if ( ! users . is Empty ( ) ) {", "return remove Content ( uid , users ) ; }", "else if ( ! reports . is Empty ( ) ) {", "return remove Content ( uid , reports ) ; }", "else {", "return remove Content ( uid , resources ) ; } }"]}
{"ids": "6452", "code": ["public void close ( ) {", "if ( dialog != null ) {", "dialog . set Visible ( false ) ;", "dialog . dispose ( ) ;", "dialog = null ;", "pane = null ;", "my Bar = null ; } }"]}
{"ids": "12643", "code": ["public static void expand Ordinal ( String raw Number String , Word Relation word Relation ) {", "String number String = Utilities . delete Char ( raw Number String , STR_ ) ;", "expand Number ( number String , word Relation ) ;", "Item last Item = word Relation . get Tail ( ) ;", "if ( last Item != null ) {", "Feature Set feature Set = last Item . get Features ( ) ;", "String last Number = feature Set . get String ( STR_ ) ;", "String ordinal = find Match In Array ( last Number , digit 2 num , ord 2 num ) ;", "if ( ordinal == null ) {", "ordinal = find Match In Array ( last Number , digit 2 teen , ord 2 teen ) ; }", "if ( ordinal == null ) {", "ordinal = find Match In Array ( last Number , digit 2 enty , ord 2 enty ) ; }", "if ( last Number . equals ( STR_ ) ) {", "ordinal = STR_ ; }", "else if ( last Number . equals ( STR_ ) ) {", "ordinal = STR_ ; }", "else if ( last Number . equals ( STR_ ) ) {", "ordinal = STR_ ; }", "if ( ordinal != null ) {", "word Relation . set Last Word ( ordinal ) ; } } }"]}
{"ids": "19267", "code": ["private void check Bounded Type Parameter ( Method method ) {", "Type Variable < Method > type Parameter = get Type Parameter ( method ) ;", "assert Equals ( STR_ , type Parameter . get Name ( ) ) ;", "assert Equals ( method , type Parameter . get Generic Declaration ( ) ) ;", "Type [ ] bounds = type Parameter . get Bounds ( ) ;", "assert Lenght One ( bounds ) ;", "Type bound = bounds [ NUM_ ] ;", "assert Equals ( Bounded Wildcards Generic Methods . class , bound ) ; }"]}
{"ids": "73716", "code": ["public void register Sensor ( Sensor s , int i ) {", "if ( ( i < NUM_ ) || ( i > ( input Bits [ node Type ] - NUM_ ) ) || ( i > MAXSENSORS ) ) {", "log . error ( STR_ + Integer . to String ( i + NUM_ ) ) ;", "return ; }", "has Active Sensors = true ;", "if ( sensor Array [ i ] == null ) {", "sensor Array [ i ] = s ;", "if ( last Used Sensor < i ) {", "last Used Sensor = i ; } }", "else {", "log . warn ( STR_ + Integer . to String ( ( get Node Address ( ) * Serial Sensor Manager . SENSORSPERNODE ) + i + NUM_ ) ) ; } }"]}
{"ids": "4350", "code": ["public boolean has Organisation Units ( ) {", "List < Dimensional Item Object > dim Opts = get Dimension Options ( ORGUNIT DIM ID ) ;", "List < Dimensional Item Object > filter Opts = get Filter Options ( ORGUNIT DIM ID ) ;", "return ! dim Opts . is Empty ( ) || ! filter Opts . is Empty ( ) ; }"]}
{"ids": "37775", "code": ["protected double negative Log Likelihood ( double [ ] [ ] data Ys , double [ ] [ ] probs ) {", "double log Likelihood = NUM_ ;", "for ( int i = NUM_ ; i < data Ys . length ; i ++ ) {", "for ( int j = NUM_ ; j < m num Classes ; j ++ ) {", "if ( data Ys [ i ] [ j ] == NUM_ ) {", "log Likelihood -= Math . log ( probs [ i ] [ j ] ) ; } } }", "return log Likelihood ; }"]}
{"ids": "73660", "code": ["public static boolean valid System Name Config ( String system Name , char type , Acela System Connection Memo memo ) {", "if ( ! valid System Name Format ( system Name , type , memo . get System Prefix ( ) ) ) {", "return false ; }", "Acela Node node = get Node From System Name ( system Name , memo ) ;", "if ( node == null ) {", "return false ; }", "int bit = get Bit From System Name ( system Name ) ;", "if ( ( type == STR_ ) || ( type == STR_ ) ) {", "if ( ( bit < MINOUTPUTADDRESS ) || ( bit > MAXOUTPUTADDRESS ) ) {", "return false ; } }", "else if ( type == STR_ ) {", "if ( ( bit < MINSENSORADDRESS ) || ( bit > MAXSENSORADDRESS ) ) {", "return false ; } }", "else {", "log . error ( STR_ ) ;", "return false ; }", "return true ; }"]}
{"ids": "74830", "code": ["public void read Encryption Object ( final Pdf Object encyption Obj , final Pdf File Reader pdf File Reader ) throws Pdf Security Exception {", "strings Encoded = false ;", "is Meta Data Encypted = true ;", "Stm F Obj = null ;", "Str F Obj = null ;", "is AES = false ;", "if ( ! is Initialised ) {", "is Initialised = true ;", "Set Security . init ( ) ; }", "if ( Set Security . use Bouncy Castle ) {", "decryption Methods = new Bouncy Castle Decryption ( ) ; }", "else {", "decryption Methods = new JCA Decryption ( ) ; }", "final int v = encyption Obj . get Int ( Pdf Dictionary . V ) ;", "final Pdf Array Iterator filters = encyption Obj . get Mixed Array ( Pdf Dictionary . Filter ) ;", "int first Value = Pdf Dictionary . Standard ;", "if ( filters != null && filters . has More Tokens ( ) ) {", "first Value = filters . get Next Value As Constant ( false ) ; }", "if ( v == NUM_ ) {", "throw new Pdf Security Exception ( STR_ ) ; }", "else if ( ( v > NUM_ ) && ( first Value != Pdf Dictionary . Standard ) ) {", "throw new Pdf Security Exception ( STR_ ) ; }", "final int new Length = encyption Obj . get Int ( Pdf Dictionary . Length ) > > NUM_ ;", "if ( new Length != - NUM_ ) {", "this . key Length = new Length ; }", "rev = encyption Obj . get Int ( Pdf Dictionary . R ) ;", "P = encyption Obj . get Int ( Pdf Dictionary . P ) ;", "O = encyption Obj . get Text Stream Value As Byte ( Pdf Dictionary . O ) ;", "U = encyption Obj . get Text Stream Value As Byte ( Pdf Dictionary . U ) ;", "OE = encyption Obj . get Text Stream Value As Byte ( Pdf Dictionary . OE ) ;", "UE = encyption Obj . get Text Stream Value As Byte ( Pdf Dictionary . UE ) ;", "Perms = encyption Obj . get Text Stream Value As Byte ( Pdf Dictionary . Perms ) ;", "if ( v >= NUM_ ) {", "is AES = true ;", "String C Fkey ;", "final Pdf Object CF = encyption Obj . get Dictionary ( Pdf Dictionary . CF ) ;", "if ( v == NUM_ ) {", "is Meta Data Encypted = encyption Obj . get Boolean ( Pdf Dictionary . Encrypt Metadata ) ; }", "is AES Identity = false ;", "String key = encyption Obj . get Name ( Pdf Dictionary . Str F ) ;", "if ( key != null ) {", "is AES Identity = key . equals ( STR_ ) ;", "strings Encoded = true ;", "final Pdf Key Pairs Iterator key Pairs = CF . get Key Pairs Iterator ( ) ;", "while ( key Pairs . has More Pairs ( ) ) {", "C Fkey = key Pairs . get Next Key As String ( ) ;", "if ( C Fkey . equals ( key ) ) {", "Str F Obj = Pdf Object Factory . get PDF Object Object From Ref Or Direct ( new Encryption Object ( encyption Obj . get Object Ref As String ( ) ) , pdf File Reader , key Pairs . get Next Value As Bytes ( ) , Pdf Dictionary . CF ) ; }", "key Pairs . next Pair ( ) ; } }", "key = encyption Obj . get Name ( Pdf Dictionary . Stm F ) ;", "if ( key != null ) {", "is AES Identity = key . equals ( STR_ ) ;", "final Pdf Key Pairs Iterator key Pairs = CF . get Key Pairs Iterator ( ) ;", "while ( key Pairs . has More Pairs ( ) ) {", "C Fkey = key Pairs . get Next Key As String ( ) ;", "if ( C Fkey . equals ( key ) ) {", "Stm F Obj = Pdf Object Factory . get PDF Object Object From Ref Or Direct ( new Encryption Object ( encyption Obj . get Object Ref As String ( ) ) , pdf File Reader , key Pairs . get Next Value As Bytes ( ) , Pdf Dictionary . CF ) ; }", "key Pairs . next Pair ( ) ; } } }", "is Encrypted = true ;", "is File Viewable = false ;", "Log Writer . write Log ( STR_ ) ;", "if ( first Value == Pdf Dictionary . Standard ) {", "try {", "verify Access ( ) ; }", "catch ( final Pdf Security Exception e ) {", "Log Writer . write Log ( STR_ + e ) ; } }", "else if ( certificate != null ) {", "is File Viewable = true ;", "is Password Supplied = true ;", "extraction Is Allowed = true ;", "password Status = PD Fflags . VALID OWNER PASSWORD ; }", "if ( rev == NUM_ ) {", "Perms = v 5 Decrypt ( Perms , encryption Key ) ;", "is Meta Data Encypted = Perms [ NUM_ ] == STR_ ;", "P = ( Perms [ NUM_ ] & NUM_ ) | ( ( Perms [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( Perms [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( Perms [ NUM_ ] & NUM_ ) << NUM_ ) ; } }"]}
{"ids": "80606", "code": ["public void add Member ( String player Name ) {", "open Invites . remove ( player Name ) ;", "members And Last Seen . put ( player Name , Long . value Of ( System . current Time Millis ( ) ) ) ;", "if ( leader == null ) {", "leader = player Name ; }", "send Group Change Event ( ) ; }"]}
{"ids": "7568", "code": ["public Bubble XY Item Label Generator ( ) {", "this ( DEFAULT FORMAT STRING , Number Format . get Number Instance ( ) , Number Format . get Number Instance ( ) , Number Format . get Number Instance ( ) ) ; }"]}
{"ids": "22912", "code": ["void add Nodes ( List < Node > new Nodes , boolean at Beginning ) {", "if ( at Beginning ) {", "if ( ( nodes . size ( ) > NUM_ ) && nodes . get ( NUM_ ) == new Nodes . get ( new Nodes . size ( ) - NUM_ ) ) {", "Log . i ( DEBUG TAG , STR_ ) ;", "if ( new Nodes . size ( ) > NUM_ ) {", "Log . i ( DEBUG TAG , STR_ ) ;", "new Nodes . remove ( new Nodes . size ( ) - NUM_ ) ;", "add Nodes ( new Nodes , at Beginning ) ; }", "return ; }", "nodes . add All ( NUM_ , new Nodes ) ; }", "else {", "if ( ( nodes . size ( ) > NUM_ ) && new Nodes . get ( NUM_ ) == nodes . get ( nodes . size ( ) - NUM_ ) ) {", "Log . i ( DEBUG TAG , STR_ ) ;", "if ( new Nodes . size ( ) > NUM_ ) {", "Log . i ( DEBUG TAG , STR_ ) ;", "new Nodes . remove ( NUM_ ) ;", "add Nodes ( new Nodes , at Beginning ) ; }", "return ; }", "nodes . add All ( new Nodes ) ; } }"]}
{"ids": "42595", "code": ["public synchronized Boolean update AV Client By Stream Id ( String stream Id , Room Client rcm ) {", "try {", "Room Client rcl Usual = get Client By Public SID ( rcm . get Public SID ( ) , false ) ;", "if ( rcl Usual != null ) {", "rcl Usual . set Broad Cast ID ( rcm . get Broad Cast ID ( ) ) ;", "rcl Usual . set Avsettings ( rcm . get Avsettings ( ) ) ;", "rcl Usual . set V Height ( rcm . get V Height ( ) ) ;", "rcl Usual . set V Width ( rcm . get V Width ( ) ) ;", "rcl Usual . set VX ( rcm . get VX ( ) ) ;", "rcl Usual . set VY ( rcm . get VY ( ) ) ;", "if ( client List . contains Key ( rcl Usual . get Streamid ( ) ) ) {", "client List . put ( rcl Usual . get Streamid ( ) , rcl Usual ) ; }", "else {", "log . debug ( STR_ + rcl Usual . get Streamid ( ) ) ; } }", "update Client By Stream Id ( stream Id , rcm ) ; }", "catch ( Exception err ) {", "log . error ( STR_ , err ) ; }", "return null ; }"]}
{"ids": "20515", "code": ["public void add Color ( int color ) {", "if ( m Colors == null ) m Colors = new Array List < Integer > ( ) ;", "m Colors . add ( color ) ; }"]}
{"ids": "6054", "code": ["private void clamp Starting Position ( ) {", "final float c X = m Bounds . exact Center X ( ) ;", "final float c Y = m Bounds . exact Center Y ( ) ;", "final float d X = m Starting X - c X ;", "final float d Y = m Starting Y - c Y ;", "final float r = m Target Radius ;", "if ( d X * d X + d Y * d Y > r * r ) {", "final double angle = Math . atan 2 ( d Y , d X ) ;", "m Clamped Starting X = c X + ( float ) ( Math . cos ( angle ) * r ) ;", "m Clamped Starting Y = c Y + ( float ) ( Math . sin ( angle ) * r ) ; }", "else {", "m Clamped Starting X = m Starting X ;", "m Clamped Starting Y = m Starting Y ; } }"]}
{"ids": "7338", "code": ["public boolean is Empty ( ) {", "if ( last Batch != null ) {", "if ( ! last Batch . is Empty ( ) ) {", "return false ; } }", "return current Batch . is Empty ( ) ; }"]}
{"ids": "28351", "code": ["@ Suppress Warnings ( STR_ ) public Dummy Data ( int cols , int rows , Comparable < ? > value ) {", "value . get Class ( ) ;", "this . cols = cols ;", "this . rows = rows ;", "this . value = value ;", "Class < ? extends Comparable < ? > > [ ] types = new Class [ cols ] ;", "Arrays . fill ( types , value . get Class ( ) ) ;", "set Column Types ( types ) ; }"]}
{"ids": "18315", "code": ["public Object clone ( ) throws Clone Not Supported Exception {", "Node Vector clone = ( Node Vector ) super . clone ( ) ;", "if ( ( null != this . m map ) && ( this . m map == clone . m map ) ) {", "clone . m map = new int [ this . m map . length ] ;", "System . arraycopy ( this . m map , NUM_ , clone . m map , NUM_ , this . m map . length ) ; }", "return clone ; }"]}
{"ids": "33616", "code": ["public boolean match With Pattern ( String pattern ) {", "if ( Text Utils . is Empty ( pattern ) ) {", "m Current Pattern = STR_ ;", "m Upper Case Pattern = STR_ ;", "m Lower Case Pattern = STR_ ; }", "if ( Text Utils . is Empty ( m Display Name ) ) {", "return false ; }", "if ( Text Utils . is Empty ( m Upper Case Display Name ) ) {", "m Upper Case Display Name = m Display Name . to Lower Case ( ) ;", "m Lower Case Display Name = m Display Name . to Upper Case ( ) ; }", "if ( ! pattern . equals ( m Current Pattern ) ) {", "m Current Pattern = pattern ;", "m Upper Case Pattern = pattern . to Upper Case ( ) ;", "m Lower Case Pattern = pattern . to Lower Case ( ) ; }", "return ( m Upper Case Display Name . index Of ( m Upper Case Pattern ) >= NUM_ ) || ( m Lower Case Display Name . index Of ( m Upper Case Pattern ) >= NUM_ ) ; }"]}
{"ids": "17529", "code": ["public boolean equals ( Object obj ) {", "if ( obj == this ) {", "return true ; }", "if ( obj instanceof Annotation Member ) {", "Annotation Member that = ( Annotation Member ) obj ;", "if ( name . equals ( that . name ) && tag == that . tag ) {", "if ( tag == ARRAY ) {", "return equal Array Value ( that . value ) ; }", "else if ( tag == ERROR ) {", "return false ; }", "else {", "return value . equals ( that . value ) ; } } }", "return false ; }"]}
{"ids": "25479", "code": ["public int hle Jpeg Decode Y Cb Cr ( Buffered Image buffered Image , T Pointer y Cb Cr Buffer , int y Cb Cr Buffer Size , int dht Mode ) {", "int width = buffered Image . get Width ( ) ;", "int height = buffered Image . get Height ( ) ;", "int size Y = width * height ;", "int size Cb = size Y > > NUM_ ;", "int address Y = y Cb Cr Buffer . get Address ( ) ;", "int address Cb = address Y + size Y ;", "int address Cr = address Cb + size Cb ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( String . format ( STR_ , address Y , address Cb , address Cr ) ) ; }", "int [ ] buffer Cb = new int [ size Cb ] ;", "int [ ] buffer Cr = new int [ size Cb ] ;", "I Memory Writer image Writer Y = Memory Writer . get Memory Writer ( address Y , size Y , NUM_ ) ;", "for ( int y = NUM_ ; y < height ; y ++ ) {", "int index Cb = ( y > > NUM_ ) * ( width > > NUM_ ) ;", "for ( int x = NUM_ ; x < width ; x += NUM_ , index Cb ++ ) {", "int argb 0 = buffered Image . get RGB ( x , y ) ;", "int y Cb Cr 0 = color ARGB To Y Cb Cr ( argb 0 ) ;", "int argb 1 = buffered Image . get RGB ( x + NUM_ , y ) ;", "int y Cb Cr 1 = color ARGB To Y Cb Cr ( argb 1 ) ;", "image Writer Y . write Next ( get Y ( y Cb Cr 0 ) ) ;", "image Writer Y . write Next ( get Y ( y Cb Cr 1 ) ) ;", "buffer Cb [ index Cb ] += get Cb ( y Cb Cr 0 ) ;", "buffer Cb [ index Cb ] += get Cb ( y Cb Cr 1 ) ;", "buffer Cr [ index Cb ] += get Cr ( y Cb Cr 0 ) ;", "buffer Cr [ index Cb ] += get Cr ( y Cb Cr 1 ) ; } }", "image Writer Y . flush ( ) ;", "I Memory Writer image Writer Cb = Memory Writer . get Memory Writer ( address Cb , size Cb , NUM_ ) ;", "I Memory Writer image Writer Cr = Memory Writer . get Memory Writer ( address Cr , size Cb , NUM_ ) ;", "for ( int i = NUM_ ; i < size Cb ; i ++ ) {", "image Writer Cb . write Next ( buffer Cb [ i ] > > NUM_ ) ;", "image Writer Cr . write Next ( buffer Cr [ i ] > > NUM_ ) ; }", "image Writer Cb . flush ( ) ;", "image Writer Cr . flush ( ) ;", "return get Width Height ( width , height ) ; }"]}
{"ids": "7941", "code": ["public static Range iterate Z Bounds ( XYZ Dataset dataset , boolean include Interval ) {", "double minimum = Double . POSITIVE INFINITY ;", "double maximum = Double . NEGATIVE INFINITY ;", "int series Count = dataset . get Series Count ( ) ;", "for ( int series = NUM_ ; series < series Count ; series ++ ) {", "int item Count = dataset . get Item Count ( series ) ;", "for ( int item = NUM_ ; item < item Count ; item ++ ) {", "double value = dataset . get Z Value ( series , item ) ;", "if ( ! Double . is Na N ( value ) ) {", "minimum = Math . min ( minimum , value ) ;", "maximum = Math . max ( maximum , value ) ; } } }", "if ( minimum == Double . POSITIVE INFINITY ) {", "return null ; }", "else {", "return new Range ( minimum , maximum ) ; } }"]}
{"ids": "41952", "code": ["public void remove View From Fade List ( View view ) {", "if ( m Fade View List != null && view != null ) {", "m Fade View List . remove ( view ) ; } }"]}
{"ids": "43005", "code": ["void add Indifferent Algorithm ( String algorithm ) {", "indifferent Algorithms . add ( algorithm ) ; }"]}
{"ids": "43871", "code": ["public Union Iterator ( Iterable < ? extends E > ... args ) {", "this ( Arrays . as List ( args ) ) ; }"]}
{"ids": "61683", "code": ["public static String mangle Native Method ( String owner , String name , String desc ) {", "String Builder sb = new String Builder ( ) ;", "sb . append ( STR_ ) ;", "sb . append ( mangle Native String ( owner ) ) ;", "sb . append ( STR_ ) ;", "sb . append ( mangle Native String ( name ) ) ;", "if ( desc != null ) {", "sb . append ( STR_ ) ;", "sb . append ( mangle Native String ( desc . substring ( NUM_ , desc . last Index Of ( STR_ ) ) ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "48776", "code": ["public String read Line ( ) throws IO Exception {", "boolean got CR = false , got LF = false ;", "pos = NUM_ ;", "line Buf = new String Buffer ( ) ;", "while ( ! got LF ) {", "int c = is . read ( ) ;", "if ( c == - NUM_ ) {", "return null ; }", "if ( got CR ) {", "if ( c == LF ) {", "got LF = true ; }", "else {", "got CR = false ;", "consume ( CR ) ;", "consume ( c ) ; } }", "else {", "if ( c == CR ) {", "got CR = true ; }", "else {", "consume ( c ) ; } } }", "line Buf . append ( buf , NUM_ , pos ) ;", "return new String ( line Buf ) ; }"]}
{"ids": "32600", "code": ["public Lobby Client login ( ) {", "if ( ! m server Properties . is Server Available ( ) ) {", "J Option Pane . show Message Dialog ( m parent , m server Properties . server Error Message , STR_ , J Option Pane . ERROR MESSAGE ) ;", "return null ; }", "if ( m server Properties . port == - NUM_ ) {", "if ( Client File System Helper . are We Old Extra Jar ( ) ) {", "J Option Pane . show Message Dialog ( m parent , STR_ + Url Constants . LATEST GAME DOWNLOAD WEBSITE + STR_ + STR_ , STR_ , J Option Pane . ERROR MESSAGE ) ; }", "else {", "J Option Pane . show Message Dialog ( m parent , STR_ + Url Constants . LATEST GAME DOWNLOAD WEBSITE + STR_ , STR_ , J Option Pane . ERROR MESSAGE ) ; }", "return null ; }", "return login To Server ( ) ; }"]}
{"ids": "62", "code": ["protected Node pop Node ( Stack < Node > stack , Class < ? extends Node > cls , String uri ) {", "Node top = stack . is Empty ( ) ? null : stack . peek ( ) ;", "if ( top != null ) {", "if ( node Matches ( top , cls , uri ) ) {", "Node node = stack . pop ( ) ;", "popped Nodes . push ( node ) ;", "return node ; }", "else {", "for ( int i = stack . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "if ( node Matches ( stack . get ( i ) , cls , uri ) ) {", "Node node = stack . remove ( i ) ;", "popped Nodes . push ( node ) ;", "return node ; } } } }", "return null ; }"]}
{"ids": "60949", "code": ["static String path To Cookie Path ( String path ) {", "if ( path == null ) {", "return STR_ ; }", "int last Slash = path . last Index Of ( STR_ ) ;", "return path . substring ( NUM_ , last Slash + NUM_ ) ; }"]}
{"ids": "53468", "code": ["public static double [ ] [ ] compute Weight Matrix ( int bpp ) {", "final int dim = bpp * bpp * bpp ;", "final double [ ] [ ] m = new double [ dim ] [ dim ] ;", "final double max = NUM_ * ( bpp - NUM_ ) ;", "for ( int x = NUM_ ; x < dim ; x ++ ) {", "final int rx = ( x / bpp ) / bpp ;", "final int gx = ( x / bpp ) % bpp ;", "final int bx = x % bpp ;", "for ( int y = x ; y < dim ; y ++ ) {", "final int ry = ( y / bpp ) / bpp ;", "final int gy = ( y / bpp ) % bpp ;", "final int by = y % bpp ;", "final double dr = Math . abs ( rx - ry ) ;", "final double dg = Math . abs ( gx - gy ) ;", "final double db = Math . abs ( bx - by ) ;", "final double val = NUM_ - ( dr + dg + db ) / max ;", "m [ x ] [ y ] = m [ y ] [ x ] = val ; } }", "return m ; }"]}
{"ids": "42863", "code": ["private static boolean is Gnome ( ) {", "return System . getenv ( STR_ ) != null ; }"]}
{"ids": "46542", "code": ["protected Size Requirements calculate Major Axis Requirements ( int axis , Size Requirements r ) {", "Size Requirements req = super . calculate Major Axis Requirements ( axis , r ) ;", "req . maximum = Integer . MAX VALUE ;", "return req ; }"]}
{"ids": "38259", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "58048", "code": ["public void add Nodes In Doc Order ( DTM Iterator iterator , X Path Context support ) {", "if ( ! m mutable ) throw new Runtime Exception ( XSL Messages . create XPATH Message ( XPATH Error Resources . ER NODESETDTM NOT MUTABLE , null ) ) ;", "int node ;", "while ( DTM . NULL != ( node = iterator . next Node ( ) ) ) {", "add Node In Doc Order ( node , support ) ; } }"]}
{"ids": "17514", "code": ["public static byte [ ] read Fully ( Input Stream in ) throws IO Exception {", "try {", "return read Fully No Close ( in ) ; }", "finally {", "in . close ( ) ; } }"]}
{"ids": "54166", "code": ["public void end Subreport ( String subreport ) {", "if ( subreport . is Empty ( ) ) {", "LOG . error ( String . format ( STR_ , subreport ) ) ;", "return ; }", "String top Subreport = subreports . peek ( ) ;", "if ( top Subreport . equals ( subreport ) ) {", "subreports . pop ( ) ;", "add Log Entry ( new Subreport End Entry ( subreport ) ) ;", "return ; }", "LOG . error ( String . format ( STR_ , subreport ) ) ; }"]}
{"ids": "39224", "code": ["public static double dnorm Log ( double x , double mean , double sd ) {", "if ( sd <= NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "return - Math . log ( sd ) + dnorm Log ( ( x - mean ) / sd ) ; }"]}
{"ids": "85371", "code": ["public static void delete ( File f ) {", "delete ( f , false ) ; }"]}
{"ids": "58288", "code": ["public Buffered Header ( final Char Array Buffer buffer ) throws Parse Exception {", "super ( ) ;", "if ( buffer == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "int colon = buffer . index Of ( STR_ ) ;", "if ( colon == - NUM_ ) {", "throw new Parse Exception ( STR_ + buffer . to String ( ) ) ; }", "String s = buffer . substring Trimmed ( NUM_ , colon ) ;", "if ( s . length ( ) == NUM_ ) {", "throw new Parse Exception ( STR_ + buffer . to String ( ) ) ; }", "this . buffer = buffer ;", "this . name = s ;", "this . value Pos = colon + NUM_ ; }"]}
{"ids": "59717", "code": ["public boolean extends Entity ( Class < ? > entity Definition ) {", "return entity Definition . get Annotation ( Extends Entity . class ) != null ; }"]}
{"ids": "17494", "code": ["public void parse ( Input Source input ) throws IO Exception , SAX Exception {", "if ( parsing ) {", "throw new SAX Exception ( STR_ ) ; }", "setup Parser ( ) ;", "parsing = true ;", "try {", "parser . parse ( input ) ; }", "finally {", "parsing = false ; }", "parsing = false ; }"]}
{"ids": "31885", "code": ["private void release 0 ( long ptr , long size , Atomic Long cnt ) {", "if ( ptr != NUM_ ) {", "if ( SAFE RELEASE ) fill ( ptr , size , ( byte ) NUM_ ) ;", "Grid Unsafe . free Memory ( ptr ) ;", "cnt . add And Get ( - size ) ;", "if ( lsnr != null ) lsnr . on Event ( RELEASE ) ; } }"]}
{"ids": "21331", "code": ["public void add Services ( List < Service Definition > services ) throws Exception {", "ensure Path Exists ( ) ;", "Set < String > remaining Descriptors = new Hash Set < > ( data Manager . get Children ( ZK SERVICE DEFINITION PATH ) ) ;", "for ( Service Definition service : services ) {", "LOG . debug ( String . format ( STR_ , service . service Id ) ) ;", "String path = get Service Definition Path ( service . service Id ) ;", "try {", "Stat before = data Manager . check Exists ( path ) ;", "data Manager . put Data ( path , service ) ;", "Stat after = data Manager . check Exists ( path ) ;", "node Updated ( path , before , after ) ;", "remaining Descriptors . remove ( service . service Id ) ; }", "catch ( Exception e ) {", "LOG . error ( String . format ( STR_ , service . service Id , path ) , e ) ;", "throw e ; } }", "for ( String descriptor Name : remaining Descriptors ) {", "LOG . info ( String . format ( STR_ , descriptor Name ) ) ;", "data Manager . remove Node ( ZK SERVICE DEFINITION PATH + STR_ + descriptor Name ) ; } }"]}
{"ids": "75736", "code": ["protected void read Props ( ) {", "int count ;", "Properties props ;", "int i ;", "String item Str ;", "T item ;", "m Ignore Changes = true ;", "props = load Props ( ) ;", "count = Integer . parse Int ( props . get Property ( expand ( get Count Key ( ) ) , STR_ ) ) ;", "m Recent Items . clear ( ) ;", "for ( i = count - NUM_ ; i >= NUM_ ; i -- ) {", "item Str = props . get Property ( get Item Prefix ( ) + i , STR_ ) ;", "if ( item Str . length ( ) > NUM_ ) {", "item = from String ( item Str ) ;", "if ( check ( item ) ) add Recent Item ( item ) ; } }", "m Ignore Changes = false ; }"]}
{"ids": "49605", "code": ["public Form Index step Index Out ( Form Index index ) {", "if ( index . is Terminal ( ) ) {", "return null ; }", "else {", "return new Form Index ( step Index Out ( index . get Next Level ( ) ) , index ) ; } }"]}
{"ids": "37976", "code": ["protected double kernel Helper LP ( int n , char [ ] s , int end Index S , char [ ] t , int end Index T , int remaining Match Length ) {", "if ( n == NUM_ ) {", "return get Return Value ( n ) ; }", "if ( Math . min ( end Index S + NUM_ , end Index T + NUM_ ) < n ) { ;", "return get Return Value ( n ) ; }", "if ( remaining Match Length < NUM_ * n ) {", "return get Return Value ( n ) ; }", "int adr = NUM_ ;", "if ( m use Recursion Cache ) {", "adr = m mult X * n + m mult Y * end Index S + m mult Z * end Index T + m mult ZZ * remaining Match Length ;", "if ( cachekh 2 K [ adr % max Cache ] == adr + NUM_ ) {", "return cachekh 2 [ adr % max Cache ] ; } }", "int rml = NUM_ ;", "double result = NUM_ ;", "for ( int i S = ( end Index S - remaining Match Length ) ; i S <= end Index S ; i S ++ ) {", "result *= m lambda ;", "result += kernel Helper 2 LP ( n , s , i S , t , end Index T , rml ++ ) ; }", "if ( m use Recursion Cache && end Index S >= NUM_ && end Index T >= NUM_ && n >= NUM_ ) {", "cachekh K [ adr % max Cache ] = adr + NUM_ ;", "cachekh [ adr % max Cache ] = result ; }", "return result ; }"]}
{"ids": "50501", "code": ["@ Override protected synchronized void on Measure ( int width Measure Spec , int height Measure Spec ) {", "int width = NUM_ ;", "if ( Measure Spec . UNSPECIFIED != Measure Spec . get Mode ( width Measure Spec ) ) {", "width = Measure Spec . get Size ( width Measure Spec ) ; }", "int height = thumb Image . get Height ( ) ;", "if ( Measure Spec . UNSPECIFIED != Measure Spec . get Mode ( height Measure Spec ) ) {", "height = Math . min ( height , Measure Spec . get Size ( height Measure Spec ) ) ; }", "set Measured Dimension ( width , height ) ; }"]}
{"ids": "9687", "code": ["public void start ( ) {", "calculate Position Array ( ) ;", "set Preferred Size ( calculate Preferred Size ( ) ) ;", "offset = get Width ( ) ;", "timer = new Timer ( interval , this ) ;", "timer . start ( ) ; }"]}
{"ids": "22183", "code": ["public static void write Plain File ( String file Path , byte [ ] content ) throws IO Exception {", "File Output Stream file Ouput Stream = new File Output Stream ( file Path ) ;", "file Ouput Stream . write ( content ) ;", "file Ouput Stream . close ( ) ; }"]}
{"ids": "719", "code": ["public void transform ( Affine Transform at ) {", "clip [ NUM_ ] = clip [ NUM_ ] ;", "clip [ NUM_ ] = clip [ NUM_ ] ;", "clip [ NUM_ ] = clip [ NUM_ ] ;", "clip [ NUM_ ] = clip [ NUM_ ] ;", "at . transform ( clip , NUM_ , clip , NUM_ , NUM_ ) ;", "double xmin = clip [ NUM_ ] , ymin = clip [ NUM_ ] ;", "double xmax = clip [ NUM_ ] , ymax = clip [ NUM_ ] ;", "for ( int i = NUM_ ; i < NUM_ ; i += NUM_ ) {", "if ( clip [ i ] < xmin ) xmin = clip [ i ] ;", "if ( clip [ i ] > xmax ) xmax = clip [ i ] ;", "if ( clip [ i + NUM_ ] < ymin ) ymin = clip [ i + NUM_ ] ;", "if ( clip [ i + NUM_ ] > ymax ) ymax = clip [ i + NUM_ ] ; }", "clip [ NUM_ ] = xmin ;", "clip [ NUM_ ] = ymin ;", "clip [ NUM_ ] = xmax ;", "clip [ NUM_ ] = ymax ; }"]}
{"ids": "73958", "code": ["@ Suppress Warnings ( STR_ ) public boolean is Portable Filename ( String filename ) {", "return ( filename . starts With ( PROGRAM ) || filename . starts With ( HOME ) || filename . starts With ( PREFERENCES ) || filename . starts With ( SCRIPTS ) || filename . starts With ( PROFILE ) || filename . starts With ( SETTINGS ) || filename . starts With ( FILE ) || filename . starts With ( RESOURCE ) ) ; }"]}
{"ids": "43478", "code": ["void configure Basic Auth ( Http Server Request server Request , Http Client Request http Client Request ) {", "final String authorization = server Request . get Param ( STR_ ) ;", "if ( authorization != null ) {", "http Client Request . put Header ( Http Headers . AUTHORIZATION , authorization ) ; } }"]}
{"ids": "17592", "code": ["public void rejected Execution ( Runnable r , Thread Pool Executor e ) {", "if ( ! e . is Shutdown ( ) ) {", "r . run ( ) ; } }"]}
{"ids": "74210", "code": ["public boolean node Change ( Catalog Tree Node node , String name ) {", "Catalog Tree Node c Node = get Corresponding Node ( node ) ;", "c Node . set Leaves ( node . get Leaves ( ) ) ;", "Abstract Catalog Tree tree = ( Abstract Catalog Tree ) get Coresponding Model ( node ) ;", "c Node . set User Object ( name ) ;", "node . set User Object ( name ) ;", "tree . node Changed ( c Node ) ;", "model . node Changed ( node ) ;", "update Panel ( ) ;", "Image Index Editor . index Changed ( true ) ;", "update Panel ( ) ;", "return true ; }"]}
{"ids": "69497", "code": ["public static Enumeration all ( ) {", "return all . elements ( ) ; }"]}
{"ids": "67938", "code": ["public boolean wait Until Empty ( long timeout ) throws Interrupted Exception {", "if ( ! notify Lock . try Lock ( timeout , Time Unit . MILLISECONDS ) ) {", "return false ; }", "try {", "return pending . is Empty ( ) || notify Condition . await ( timeout , Time Unit . MILLISECONDS ) ; }", "finally {", "notify Lock . unlock ( ) ; } }"]}
{"ids": "29060", "code": ["public static Set < Java Class And Method > resolve Method Call Targets ( Reference Type receiver Type , Invoke Instruction invoke Instruction , Constant Pool Gen cpg ) throws Class Not Found Exception {", "return resolve Method Call Targets ( receiver Type , invoke Instruction , cpg , false ) ; }"]}
{"ids": "68839", "code": ["private String safe ( String src ) {", "String Buffer sb = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < src . length ( ) ; i ++ ) {", "char c = src . char At ( i ) ;", "if ( c >= NUM_ && c < NUM_ ) {", "sb . append ( c ) ; }", "else {", "sb . append ( STR_ + ( int ) c + STR_ ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "45917", "code": ["public Algorithm ( Element el ) {", "required Key = el . get Attribute ( STR_ ) ;", "jce Name = el . get Attribute ( STR_ ) ;", "algorithm Class = el . get Attribute ( STR_ ) ;", "if ( el . has Attribute ( STR_ ) ) {", "key Length = Integer . parse Int ( el . get Attribute ( STR_ ) ) ; }", "else {", "key Length = NUM_ ; } }"]}
{"ids": "33007", "code": ["private Run consume Run ( int offset ) {", "char ch = f Text . char At ( offset ) ;", "int length = f Text . length ( ) ;", "Run run = get Run ( ch ) ;", "while ( run . consume ( ch ) && offset < length - NUM_ ) {", "offset ++ ;", "ch = f Text . char At ( offset ) ; }", "return run ; }"]}
{"ids": "37702", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "81560", "code": ["public static String format For UI ( Calendar today , Calendar date ) {", "if ( today . get ( Calendar . YEAR ) == date . get ( Calendar . YEAR ) ) {", "if ( today . get ( Calendar . DAY OF YEAR ) == date . get ( Calendar . DAY OF YEAR ) ) {", "return STR_ ; }", "return current Year Date Format ( date . get Time In Millis ( ) ) ; }", "else {", "return format ( date . get Time In Millis ( ) ) ; } }"]}
{"ids": "47678", "code": ["public Output Stream Writer ( Output Stream out , Charset Encoder enc ) {", "super ( out ) ;", "if ( enc == null ) throw new Null Pointer Exception ( STR_ ) ;", "se = Stream Encoder . for Output Stream Writer ( out , this , enc ) ; }"]}
{"ids": "63529", "code": ["public synchronized void free ( long pos , int length ) {", "int start = get Block ( pos ) ;", "int blocks = get Block Count ( length ) ;", "Block Range x = new Block Range ( start , blocks ) ;", "Block Range next = free Space . ceiling ( x ) ;", "if ( next == null ) {", "throw Data Utils . new Illegal State Exception ( Data Utils . ERROR INTERNAL , STR_ ) ; }", "Block Range prev = free Space . lower ( x ) ;", "if ( prev != null ) {", "if ( prev . start + prev . blocks == start ) {", "prev . blocks += blocks ;", "if ( prev . start + prev . blocks == next . start ) {", "prev . blocks += next . blocks ;", "free Space . remove ( next ) ; }", "return ; } }", "if ( start + blocks == next . start ) {", "next . start -= blocks ;", "next . blocks += blocks ;", "return ; }", "free Space . add ( x ) ; }"]}
{"ids": "35563", "code": ["public URI csrf Token ( ) {", "URI Builder builder = api Builder ( ) ;", "builder . set Parameter ( STR_ , STR_ ) ;", "builder . set Parameter ( STR_ , STR_ ) ;", "builder . set Parameter ( STR_ , STR_ ) ;", "return build ( builder ) ; }"]}
{"ids": "45126", "code": ["private static char [ ] zz Unpack C Map ( String packed ) {", "char [ ] map = new char [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < NUM_ ) {", "int count = packed . char At ( i ++ ) ;", "char value = packed . char At ( i ++ ) ;", "do map [ j ++ ] = value ;", "while ( -- count > NUM_ ) ; }", "return map ; }"]}
{"ids": "44815", "code": ["public Distributed Log Multi Stream Writer build ( ) {", "Preconditions . check Argument ( ( null != streams && ! streams . is Empty ( ) ) , STR_ ) ;", "Preconditions . check Not Null ( client , STR_ ) ;", "Preconditions . check Not Null ( codec , STR_ ) ;", "Preconditions . check Argument ( first Speculative Timeout Ms > NUM_ && first Speculative Timeout Ms <= max Speculative Timeout Ms && speculative Backoff Multiplier > NUM_ && max Speculative Timeout Ms < request Timeout Ms , STR_ ) ;", "return new Distributed Log Multi Stream Writer ( streams , client , Math . min ( buffer Size , MAX LOGRECORDSET SIZE ) , flush Interval Ms , request Timeout Ms , first Speculative Timeout Ms , max Speculative Timeout Ms , speculative Backoff Multiplier , codec , ticker , executor Service ) ; }"]}
{"ids": "85102", "code": ["private void write Chars ( int number , char c ) throws IO Exception {", "for ( ; number > NUM_ ; number -- ) {", "writer . write ( c ) ; } }"]}
{"ids": "12374", "code": ["@ Override public void error ( String msg , Throwable t ) {", "if ( logger . is Loggable ( Level . SEVERE ) ) {", "log ( SELF , Level . SEVERE , msg , t ) ; } }"]}
{"ids": "28671", "code": ["public int exit signal ( ) {", "return Integer . parse Int ( fields [ NUM_ ] ) ; }"]}
{"ids": "64508", "code": ["public Command ( ) {", "msg Queue = new Linked List < Message > ( ) ;", "msg Queue . clear ( ) ; }"]}
{"ids": "44195", "code": ["public synchronized int index Of ( V item ) {", "return items . index Of ( item ) ; }"]}
{"ids": "10617", "code": ["protected void create Node ( Default Mutable Tree Node top , String title , String info , String content , int line Count ) {", "Default Mutable Tree Node thread Info = null ;", "thread Info = new Default Mutable Tree Node ( new Thread Info ( title , info , content , line Count , get Thread Tokens ( title ) ) ) ;", "top . add ( thread Info ) ; }"]}
{"ids": "2368", "code": ["public Peer clone ( ) {", "Peer clone = new Peer ( network . clone ( ) , address ) ;", "return clone ; }"]}
{"ids": "21697", "code": ["public static String generate Native Guid ( String device Type , String serial Number , String file Share Native Id ) {", "return String . format ( STR_ + FILESYSTEM + STR_ , device Type Map . get ( device Type ) , serial Number , file Share Native Id ) ; }"]}
{"ids": "84458", "code": ["public Str Builder ensure Capacity ( final int capacity ) {", "if ( capacity > buffer . length ) {", "final char [ ] old = buffer ;", "buffer = new char [ capacity * NUM_ ] ;", "System . arraycopy ( old , NUM_ , buffer , NUM_ , size ) ; }", "return this ; }"]}
{"ids": "29218", "code": ["private void on Start Tracking Touch ( ) {", "m Is Dragging = true ; }"]}
{"ids": "8100", "code": ["private static void create Super Forwarder ( Class Node target Node , Method Node forwarder , final Map < String , Class Node > generics Spec ) {", "List < Class Node > interfaces = new Array List < Class Node > ( Traits . collect All Interfaces Reverse Order ( target Node , new Linked Hash Set < Class Node > ( ) ) ) ;", "String name = forwarder . get Name ( ) ;", "Parameter [ ] forwarder Parameters = forwarder . get Parameters ( ) ;", "Linked Hash Set < Class Node > traits = new Linked Hash Set < Class Node > ( ) ;", "List < Method Node > super Forwarders = new Linked List < Method Node > ( ) ;", "for ( Class Node node : interfaces ) {", "if ( Traits . is Trait ( node ) ) {", "Method Node method = node . get Declared Method ( name , forwarder Parameters ) ;", "if ( method != null ) {", "traits . add ( node ) ;", "super Forwarders . add ( method ) ; } } }", "for ( Method Node super Forwarder : super Forwarders ) {", "do Create Super Forwarder ( target Node , super Forwarder , traits . to Array ( new Class Node [ traits . size ( ) ] ) , generics Spec ) ; } }"]}
{"ids": "22055", "code": ["public boolean is Virtual Pool Accessible ( Virtual Pool resource ) {", "return permissions Helper . tenant Has Usage ACL ( URI . create ( user . get Tenant Id ( ) ) , resource ) ; }"]}
{"ids": "32721", "code": ["private static boolean intersects One Of ( final Rectangle 2 D r , final Collection < ? extends Shape > shapes ) {", "if ( shapes . is Empty ( ) ) {", "return false ; }", "for ( final Shape item : shapes ) {", "if ( item . intersects ( r ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "44288", "code": ["private void expected Byte ( int position , int count ) throws UTF Data Format Exception {", "throw new UTF Data Format Exception ( Localizer . get Message ( STR_ , Integer . to String ( position ) , Integer . to String ( count ) ) ) ; }"]}
{"ids": "22089", "code": ["private List < String > check Config List ( Configuration config , String name ) {", "String peer I Ps = config . get Config ( name ) ;", "Array List < String > peers = new Array List < String > ( ) ;", "if ( peer I Ps != null ) {", "for ( String ip : String Utils . split ( peer I Ps , STR_ ) ) {", "peers . add ( ip ) ; } }", "return peers ; }"]}
{"ids": "17753", "code": ["public final Byte Buffer encode ( Char Buffer in ) throws Character Coding Exception {", "int length = ( int ) ( in . remaining ( ) * average Bytes Per Char ) ;", "Byte Buffer out = Byte Buffer . allocate ( length ) ;", "reset ( ) ;", "while ( state != FLUSHED ) {", "Coder Result result = encode ( in , out , true ) ;", "if ( result == Coder Result . OVERFLOW ) {", "out = allocate More ( out ) ;", "continue ; }", "else {", "check Coder Result ( result ) ; }", "result = flush ( out ) ;", "if ( result == Coder Result . OVERFLOW ) {", "out = allocate More ( out ) ; }", "else {", "check Coder Result ( result ) ; } }", "out . flip ( ) ;", "return out ; }"]}
{"ids": "15751", "code": ["private void load External ( ) {", "Properties properties = new Properties ( ) ;", "try {", "properties . load From XML ( new File Input Stream ( PROPERTIES PATH ) ) ;", "for ( String key : properties . string Property Names ( ) ) {", "external Support . put ( key , properties . get Property ( key ) ) ; } }", "catch ( IO Exception ignore ) { } }"]}
{"ids": "76334", "code": ["public static URI parse URI ( String nuri , URI baseuri ) throws URI Syntax Exception {", "int colon Location = nuri . index Of ( STR_ ) ;", "int fragment Location = get Fragment Location ( nuri ) ;", "if ( colon Location == - NUM_ || colon Location > fragment Location ) {", "if ( baseuri == null ) throw new URI Syntax Exception ( STR_ + nuri + STR_ + STR_ , nuri ) ; }", "String protocol = nuri . substring ( NUM_ , colon Location ) ;", "if ( protocol . equals ( STR_ ) ) {", "return parse URN ( nuri , colon Location , fragment Location ) ; }", "else if ( protocol . equals ( STR_ ) ) {", "return new URI ( nuri ) ; }", "else if ( protocol . equals ( STR_ ) ) {", "return new URI ( nuri ) ; }", "else if ( protocol . equals ( STR_ ) ) {", "return new URI ( nuri ) ; }", "else {", "return parse General URI ( nuri , colon Location , fragment Location ) ; } }"]}
{"ids": "38541", "code": ["protected void update Us ( ) {", "try {", "set Text ( m Editor . get As Text ( ) ) ; }", "catch ( Illegal Argument Exception ex ) { } }"]}
{"ids": "71287", "code": ["public File make Dirty ( ) throws IO Exception {", "File f = File . create Temp File ( STR_ , STR_ , repository Location . get Parent File ( ) ) ;", "File Writer fw = new File Writer ( f ) ;", "fw . write ( STR_ + System . current Time Millis ( ) ) ;", "fw . flush ( ) ;", "fw . close ( ) ;", "return f ; }"]}
{"ids": "48729", "code": ["private static boolean is ASCII Superset ( String encoding ) throws Exception {", "String chk S = STR_ + STR_ ;", "byte [ ] chk B = {} ;", "byte [ ] b = chk S . get Bytes ( encoding ) ;", "return Arrays . equals ( b , chk B ) ; }"]}
{"ids": "65587", "code": ["public static Big Decimal allocated ( int p C Payment ID , int p C Currency ID ) throws SQL Exception {", "Big Decimal Pay Amt = null ;", "int C Charge ID = NUM_ ;", "String sql = STR_ + STR_ + STR_ ;", "Prepared Statement pstmt = Adempiere . prepare Statement ( sql ) ;", "pstmt . set Int ( NUM_ , p C Payment ID ) ;", "Result Set rs = pstmt . execute Query ( ) ;", "if ( rs . next ( ) ) {", "Pay Amt = rs . get Big Decimal ( NUM_ ) ;", "C Charge ID = rs . get Int ( NUM_ ) ; }", "rs . close ( ) ;", "pstmt . close ( ) ;", "if ( C Charge ID > NUM_ ) return Pay Amt ;", "int C Conversion Type ID = NUM_ ;", "Big Decimal allocated Amt = get Allocated Amt ( p C Payment ID , p C Currency ID , C Conversion Type ID ) ;", "return Currency . round ( allocated Amt , p C Currency ID , null ) ; }"]}
{"ids": "72814", "code": ["public static Byte Buffer process Outbound Package ( Byte Buffer ro Data , int exchange Id , boolean connection Ok ) {", "ro Data . rewind ( ) ;", "if ( Build Config . DEBUG ) {", "Xposed Bridge . log ( STR_ + Integer . to String ( ro Data . remaining ( ) ) ) ; }", "try {", "synchronized ( sync ) { } }", "catch ( Throwable e ) {", "Xposed Bridge . log ( e ) ; }", "return null ; }"]}
{"ids": "60546", "code": ["@ Not Null private static Text Range process Spaces ( @ Not Null Helper helper , @ Not Null Text Range range , int tab Width ) {", "Char Sequence indent = helper . get Current Line Indent ( ) ;", "int start = Math . max ( NUM_ , range . get Start Offset ( ) - helper . get Current Line Start Offset ( ) ) ;", "int end = Math . min ( indent . length ( ) , range . get End Offset ( ) - helper . get Current Line Start Offset ( ) ) ;", "int tabs Number = NUM_ ;", "int indent Offset = end ;", "for ( int i = start ; i < end ; i ++ ) {", "char c = indent . char At ( i ) ;", "if ( c == STR_ ) {", "tabs Number ++ ; }", "else if ( c != STR_ ) {", "indent Offset = i ;", "break ; } }", "if ( tabs Number > NUM_ ) {", "helper . replace ( start , indent Offset , String Util . repeat ( STR_ , indent Offset - start - tabs Number + tabs Number * tab Width ) ) ;", "return Text Range . create ( range . get Start Offset ( ) , range . get End Offset ( ) - tabs Number + tabs Number * tab Width ) ; }", "else {", "return range ; } }"]}
{"ids": "29981", "code": ["public void remove Alarm ( final Alarm ALARM ) {", "if ( alarms . contains ( ALARM ) ) alarms . remove ( ALARM ) ; }"]}
{"ids": "82440", "code": ["public int read ( ) throws java . io . IO Exception {", "synchronized ( lock ) {", "char char Array [ ] = new char [ NUM_ ] ;", "if ( read ( char Array , NUM_ , NUM_ ) != - NUM_ ) {", "return char Array [ NUM_ ] ; }", "return - NUM_ ; } }"]}
{"ids": "63333", "code": ["protected void check Parameters ( ) {", "if ( parameters != null ) {", "for ( int i = NUM_ , size = parameters . size ( ) ; i < size ; i ++ ) {", "Parameter param = parameters . get ( i ) ;", "param . check Set ( ) ; } } }"]}
{"ids": "24315", "code": ["private static Properties create Properties 1 ( String conflation ) {", "Properties props = new Properties ( ) ;", "props . set Property ( DELTA PROPAGATION , STR_ ) ;", "props . set Property ( MCAST PORT , STR_ ) ;", "props . set Property ( LOCATORS , STR_ ) ;", "props . set Property ( CONFLATE EVENTS , conflation ) ;", "return props ; }"]}
{"ids": "26795", "code": ["public static void CF 3 ( double [ ] x , double [ ] f , double [ ] c , int nx ) {", "int count 1 = NUM_ ;", "int count 2 = NUM_ ;", "double sum 1 = NUM_ ;", "double sum 2 = NUM_ ;", "double prod 1 = NUM_ ;", "double prod 2 = NUM_ ;", "double yj ;", "double pj ;", "double N = NUM_ ;", "double a = NUM_ ;", "for ( int j = NUM_ ; j <= nx ; j ++ ) {", "yj = x [ j - NUM_ ] - Math . sin ( NUM_ * PI * x [ NUM_ ] + j * PI / nx ) ;", "pj = Math . cos ( NUM_ * yj * PI / Math . sqrt ( j + NUM_ ) ) ;", "if ( j % NUM_ == NUM_ ) {", "sum 2 += yj * yj ;", "prod 2 *= pj ;", "count 2 ++ ; }", "else {", "sum 1 += yj * yj ;", "prod 1 *= pj ;", "count 1 ++ ; } }", "f [ NUM_ ] = x [ NUM_ ] + NUM_ * ( NUM_ * sum 1 - NUM_ * prod 1 + NUM_ ) / ( double ) count 1 ;", "f [ NUM_ ] = NUM_ - x [ NUM_ ] * x [ NUM_ ] + NUM_ * ( NUM_ * sum 2 - NUM_ * prod 2 + NUM_ ) / ( double ) count 2 ;", "c [ NUM_ ] = f [ NUM_ ] + f [ NUM_ ] * f [ NUM_ ] - a * Math . sin ( N * PI * ( f [ NUM_ ] * f [ NUM_ ] - f [ NUM_ ] + NUM_ ) ) - NUM_ ; }"]}
{"ids": "63200", "code": ["public static void close Silently ( Result Set rs ) {", "if ( rs != null ) {", "try {", "rs . close ( ) ; }", "catch ( SQL Exception e ) { } } }"]}
{"ids": "23996", "code": ["public static void execute ( Pool Impl pool , Function function , Object args , Member Mapped Argument member Mapped Arg , boolean all Servers , byte has Result , boolean is Fn Serialization Reqd , String [ ] groups ) {", "List servers = null ;", "Abstract Op op = new Execute Function No Ack Op Impl ( function , args , member Mapped Arg , has Result , is Fn Serialization Reqd , groups , all Servers ) ;", "try {", "if ( all Servers && groups . length == NUM_ ) {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ + op . get Message ( ) + STR_ + pool ) ; }", "servers = pool . get Current Servers ( ) ;", "Iterator i = servers . iterator ( ) ;", "while ( i . has Next ( ) ) {", "pool . execute On ( ( Server Location ) i . next ( ) , op ) ; } }", "else {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ + op . get Message ( ) + STR_ + pool + STR_ + Arrays . to String ( groups ) + STR_ + all Servers ) ; }", "pool . execute ( op , NUM_ ) ; } }", "catch ( Exception ex ) {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ + op . get Message ( ) + STR_ + pool , ex ) ; }", "if ( ex . get Message ( ) != null ) throw new Function Exception ( ex . get Message ( ) , ex ) ;", "else throw new Function Exception ( STR_ , ex ) ; } }"]}
{"ids": "40183", "code": ["public static Script create Multi Sig Input Script ( Transaction Signature ... signatures ) {", "return create Multi Sig Input Script ( Arrays . as List ( signatures ) ) ; }"]}
{"ids": "71387", "code": ["Object proxy If Return Type Is Jdbc Interface ( Class < ? > return Type , Object to Proxy ) {", "if ( to Proxy != null ) {", "if ( Util . is Jdbc Interface ( return Type ) ) {", "Class < ? > to Proxy Class = to Proxy . get Class ( ) ;", "return Proxy . new Proxy Instance ( to Proxy Class . get Class Loader ( ) , Util . get Implemented Interfaces ( to Proxy Class ) , get New Jdbc Interface Proxy ( to Proxy ) ) ; } }", "return to Proxy ; }"]}
{"ids": "68573", "code": ["public final void empty ( ) {", "synchronized ( buffer ) {", "buffer . clear ( ) ;", "buffer Map . clear ( ) ; } }"]}
{"ids": "47559", "code": ["private Value Range range By Week ( Temporal Accessor temporal , Temporal Field field ) {", "int dow = localized Day Of Week ( temporal ) ;", "int offset = start Of Week Offset ( temporal . get ( field ) , dow ) ;", "Value Range field Range = temporal . range ( field ) ;", "return Value Range . of ( compute Week ( offset , ( int ) field Range . get Minimum ( ) ) , compute Week ( offset , ( int ) field Range . get Maximum ( ) ) ) ; }"]}
{"ids": "2606", "code": ["public Object apply ( Object in ) {", "if ( in instanceof Has Word ) {", "Has Word w = ( Has Word ) in ;", "String str = w . word ( ) ;", "String out Str = americanize ( str , capitalize Timex ) ;", "if ( ! out Str . equals ( str ) ) {", "w . set Word ( out Str ) ; }", "return w ; }", "else {", "String str = ( String ) in ;", "return americanize ( str , capitalize Timex ) ; } }"]}
{"ids": "53597", "code": ["public void add Way Ref ( Map Way way , int node Idx ) {", "if ( ways == null ) ways = new Array List < Way Ref > ( NUM_ ) ;", "if ( ways . is Empty ( ) || ways . get ( NUM_ ) != way ) ways . add ( new Default Way Ref ( way , ( short ) node Idx ) ) ; }"]}
{"ids": "524", "code": ["public Entire Text Builder add Background ( @ Color Int int bg Color , int start , int end ) {", "Background Holder background Holder = new Background Holder ( bg Color , start , end ) ;", "m Backgrounds . add ( background Holder ) ;", "return this ; }"]}
{"ids": "6230", "code": ["public void remove Changing Listener ( On Wheel Changed Listener listener ) {", "changing Listeners . remove ( listener ) ; }"]}
{"ids": "6685", "code": ["public boolean matches ( String filename ) {", "if ( exts == null ) return true ;", "int j = filename . last Index Of ( STR_ ) ;", "if ( j == - NUM_ || j == filename . length ( ) ) return false ;", "String suffix = filename . substring ( j + NUM_ ) ;", "return exts . contains ( suffix ) ; }"]}
{"ids": "51037", "code": ["public Rectangle [ ] compute Gaps ( ) {", "Array List < Rectangle > ret = new Array List < > ( ) ;", "Rectangle gap = new Rectangle ( ) ;", "for ( int i = NUM_ ; i < m Rect List . length ; i ++ ) {", "Rectangle rectangle A = m Rect List [ i ] ;", "for ( int j = i + NUM_ ; j < m Rect List . length ; j ++ ) {", "Rectangle rectangle B = m Rect List [ j ] ;", "boolean viable = calculate Gap ( rectangle A , rectangle B , gap ) ;", "if ( viable ) {", "for ( int k = NUM_ ; k < m Rect List . length ; k ++ ) {", "if ( k != j && k != i ) {", "if ( gap . intersects ( m Rect List [ k ] ) ) {", "viable = false ;", "break ; } } } }", "if ( viable ) {", "ret . add ( new Rectangle ( gap ) ) ; } } }", "return ret . to Array ( new Rectangle [ ret . size ( ) ] ) ; }"]}
{"ids": "42533", "code": ["public synchronized Method Count Set collect Hot Methods ( int opt Level , double threshold ) {", "if ( DEBUG ) validity Check ( ) ;", "Array List < Hot Method Recompilation Event > collect = new Array List < Hot Method Recompilation Event > ( ) ;", "collect Hot Opt Methods Internal ( NUM_ , collect , hotness To Counts ( threshold ) , opt Level ) ;", "int num Hot Methods = collect . size ( ) ;", "double [ ] num Counts = new double [ num Hot Methods ] ;", "Compiled Method [ ] hot Methods = new Compiled Method [ num Hot Methods ] ;", "for ( int i = NUM_ ; i < num Hot Methods ; i ++ ) {", "Hot Method Event event = collect . get ( i ) ;", "hot Methods [ i ] = event . get Compiled Method ( ) ;", "num Counts [ i ] = event . get Num Samples ( ) ; }", "return new Method Count Set ( hot Methods , num Counts ) ; }"]}
{"ids": "55221", "code": ["public synchronized void add Ban ( long duration , String reason , String id ) {", "add Line ( new Ban Message ( System . current Time Millis ( ) , duration , reason , id ) ) ; }"]}
{"ids": "78203", "code": ["private void write Header ( ) throws Open Stego Exception {", "DCT Data Header header = null ;", "try {", "header = new DCT Data Header ( this . data Length , this . file Name , this . config ) ;", "if ( ( ( header . get Header Size ( ) + this . data Length ) * NUM_ ) > ( this . img Width * this . img Height / ( DCT . NJPEG * DCT . NJPEG ) ) ) {", "throw new Open Stego Exception ( null , Dct LSB Plugin . NAMESPACE , Dct LSB Errors . IMAGE SIZE INSUFFICIENT ) ; }", "this . coord = new Coordinates ( ( header . get Header Size ( ) + this . data Length ) * NUM_ ) ;", "write ( header . get Header Data ( ) ) ; }", "catch ( IO Exception io Ex ) {", "throw new Open Stego Exception ( io Ex ) ; } }"]}
{"ids": "75572", "code": ["public int decrement Subscriber Count ( ) {", "if ( is Available ( ) ) {", "return jmdns Subscriber Count . decrement And Get ( ) ; }", "return NUM_ ; }"]}
{"ids": "25089", "code": ["public static boolean add Shapeless Enchanting Recipe ( Item Stack a Result , Enchantment [ ] a Enchantments Added , int [ ] a Enchantment Levels Added , Object [ ] a Recipe ) {", "return add Shapeless Crafting Recipe ( a Result , a Enchantments Added , a Enchantment Levels Added , true , false , false , false , a Recipe ) ; }"]}
{"ids": "74647", "code": ["public void start ( ) throws Tomcat Exception {", "if ( cat == null ) init ( ) ;", "cat . start ( ) ; }"]}
{"ids": "41316", "code": ["@ Override public synchronized void initialize ( ) {", "if ( ! m Root Directory . exists ( ) ) {", "if ( ! m Root Directory . mkdirs ( ) ) {", "Volley Log . e ( STR_ , m Root Directory . get Absolute Path ( ) ) ; }", "return ; }", "File [ ] files = m Root Directory . list Files ( ) ;", "if ( files == null ) {", "return ; }", "for ( File file : files ) {", "Buffered Input Stream fis = null ;", "try {", "fis = new Buffered Input Stream ( new File Input Stream ( file ) ) ;", "Cache Header entry = Cache Header . read Header ( fis ) ;", "entry . size = file . length ( ) ;", "put Entry ( entry . key , entry ) ; }", "catch ( IO Exception e ) {", "if ( file != null ) {", "file . delete ( ) ; } }", "finally {", "try {", "if ( fis != null ) {", "fis . close ( ) ; } }", "catch ( IO Exception ignored ) { } } } }"]}
{"ids": "37682", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "20274", "code": ["private boolean image Outline ( Default Mutable Tree Node node ) {", "boolean is Outline = false ;", "if ( node != null ) {", "Default Mutable Tree Node parent Node = ( Default Mutable Tree Node ) node . get Parent ( ) ;", "if ( parent Node != null ) {", "if ( parent Node . get User Object ( ) instanceof Raster Symbolizer ) {", "is Outline = true ; } } }", "return is Outline ; }"]}
{"ids": "48580", "code": ["private short add Entry ( Entry entry ) {", "pool . add ( entry ) ;", "if ( pool . size ( ) >= NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return ( short ) pool . size ( ) ; }"]}
{"ids": "74667", "code": ["private boolean load Next Page ( ) {", "result = pageable . get Page ( query , skip , page Size ) ;", "index = NUM_ ;", "if ( result == null || result . is Empty ( ) ) {", "return false ; }", "return true ; }"]}
{"ids": "61308", "code": ["public boolean contains ( Node s ) {", "run To ( - NUM_ ) ;", "if ( null == m map ) return false ;", "for ( int i = NUM_ ; i < m first Free ; i ++ ) {", "Node node = m map [ i ] ;", "if ( ( null != node ) && node . equals ( s ) ) return true ; }", "return false ; }"]}
{"ids": "34900", "code": ["public void close ( ) throws IO Exception {", "if ( ! closed ) {", "if ( uses Default Inflater ) inf . end ( ) ;", "in . close ( ) ;", "closed = true ; } }"]}
{"ids": "77302", "code": ["public Field Analysis Request add Field Type ( String field Type Name ) {", "if ( field Types == null ) {", "field Types = new Linked List < > ( ) ; }", "field Types . add ( field Type Name ) ;", "return this ; }"]}
{"ids": "80670", "code": ["public static Big Fraction parse Edit Rate ( String edit Rate ) {", "edit Rate = edit Rate . contains ( STR_ ) ? r Frame Rate To Edit Rate ( edit Rate ) : edit Rate ;", "String [ ] parts = edit Rate . split ( STR_ ) ;", "try {", "if ( parts . length == NUM_ ) {", "return new Big Fraction ( Long . parse Long ( parts [ NUM_ ] ) , Long . parse Long ( parts [ NUM_ ] ) ) ; }", "else if ( parts . length == NUM_ ) {", "return new Big Fraction ( Long . parse Long ( parts [ NUM_ ] ) ) ; } }", "catch ( Number Format Exception e ) {", "throw new Conversion Helper Exception ( STR_ , e ) ; }", "throw new Conversion Helper Exception ( STR_ ) ; }"]}
{"ids": "77037", "code": ["public FST < T > finish ( ) throws IO Exception {", "final Un Compiled Node < T > root = frontier [ NUM_ ] ;", "freeze Tail ( NUM_ ) ;", "if ( root . input Count < min Suffix Count 1 || root . input Count < min Suffix Count 2 || root . num Arcs == NUM_ ) {", "if ( fst . empty Output == null ) {", "return null ; }", "else if ( min Suffix Count 1 > NUM_ || min Suffix Count 2 > NUM_ ) {", "return null ; } }", "else {", "if ( min Suffix Count 2 != NUM_ ) {", "compile All Targets ( root , last Input . length ( ) ) ; } }", "fst . finish ( compile Node ( root , last Input . length ( ) ) . node ) ;", "if ( do Pack FST ) {", "return fst . pack ( this , NUM_ , Math . max ( NUM_ , ( int ) ( get Node Count ( ) / NUM_ ) ) , acceptable Overhead Ratio ) ; }", "else {", "return fst ; } }"]}
{"ids": "62840", "code": ["public void on Configuration ( Contacts Ops . View view , boolean first Time In ) {", "m Contacts View = new Weak Reference < > ( view ) ;", "if ( first Time In ) {", "initialize Account ( ) ;", "m Cursor Adapter = new Simple Cursor Adapter ( view . get Application Context ( ) , R . layout . list layout , null , s Columns To Display , s Column Res Ids , NUM_ ) ; } }"]}
{"ids": "77603", "code": ["public static final int random Unset Bit ( Random r , Bit Set bits , final int max ) {", "if ( bits . cardinality ( ) == max + NUM_ ) {", "return - NUM_ ; }", "final int candidate = Test Util . next Int ( r , NUM_ , max ) ;", "if ( bits . get ( candidate ) ) {", "final int lo = bits . previous Clear Bit ( candidate ) ;", "final int hi = bits . next Clear Bit ( candidate ) ;", "if ( lo < NUM_ && max < hi ) {", "fail ( STR_ + bits . cardinality ( ) + STR_ + bits . size ( ) ) ; }", "else if ( lo < NUM_ ) {", "return hi ; }", "else if ( max < hi ) {", "return lo ; }", "return ( ( candidate - lo ) < ( hi - candidate ) ) ? lo : hi ; }", "return candidate ; }"]}
{"ids": "51459", "code": ["@ Override public void flush ( ) throws IO Exception {", "synchronized ( lock ) {", "out . flush ( ) ; } }"]}
{"ids": "4867", "code": ["public double std ( ) {", "if ( min == max || num == NUM_ ) {", "return NUM_ ; }", "double m = mean ( ) ;", "return Math . sqrt ( sigmax 2 / num - m * m ) ; }"]}
{"ids": "29036", "code": ["public boolean contains Instruction ( Instruction Handle handle ) {", "Iterator < Instruction Handle > i = instruction Iterator ( ) ;", "while ( i . has Next ( ) ) {", "if ( i . next ( ) == handle ) {", "return true ; } }", "return false ; }"]}
{"ids": "79302", "code": ["public static String send Fedex Request ( String xml String , Delegator delegator , String shipment Gateway Config Id , String resource , Locale locale ) throws Fedex Connect Exception {", "String url = get Shipment Gateway Config Value ( delegator , shipment Gateway Config Id , STR_ , resource , STR_ ) ;", "if ( Util Validate . is Empty ( url ) ) {", "throw new Fedex Connect Exception ( Util Properties . get Message ( resource Error , STR_ , locale ) ) ; }", "if ( ! xml String . matches ( STR_ ) ) {", "throw new Fedex Connect Exception ( Util Properties . get Message ( resource Error , STR_ , locale ) ) ; }", "url = url . trim ( ) ;", "String time Out Str = get Shipment Gateway Config Value ( delegator , shipment Gateway Config Id , STR_ , resource , STR_ , STR_ ) ;", "int timeout = NUM_ ;", "try {", "timeout = Integer . parse Int ( time Out Str ) ; }", "catch ( Number Format Exception e ) {", "Debug . log Error ( e , STR_ + time Out Str + STR_ + timeout ) ; }", "if ( Debug . verbose On ( ) ) {", "Debug . log Verbose ( STR_ + url , module ) ;", "Debug . log Verbose ( STR_ + xml String , module ) ; }", "Http Client http = new Http Client ( url ) ;", "http . set Timeout ( timeout * NUM_ ) ;", "String response = null ;", "try {", "response = http . post ( xml String ) ; }", "catch ( Http Client Exception e ) {", "Debug . log Error ( e , STR_ , module ) ;", "throw new Fedex Connect Exception ( Util Properties . get Message ( resource Error , STR_ , Util Misc . to Map ( STR_ , e . to String ( ) ) , locale ) ) ; }", "if ( response == null ) {", "throw new Fedex Connect Exception ( Util Properties . get Message ( resource Error , STR_ , locale ) ) ; }", "if ( Debug . verbose On ( ) ) {", "Debug . log Verbose ( STR_ + response , module ) ; }", "return response ; }"]}
{"ids": "59485", "code": ["public String trim To Size ( String str , int max String Length ) {", "if ( str == null ) return null ;", "if ( str . length ( ) > max String Length ) {", "String Builder sb = new String Builder ( str ) ;", "sb . set Length ( max String Length ) ;", "str = sb . to String ( ) ; }", "return str ; }"]}
{"ids": "23545", "code": ["public Subject login ( String username , String password ) {", "if ( String Utils . is Blank ( username ) || String Utils . is Blank ( password ) ) return null ;", "Properties credentials = new Properties ( ) ;", "credentials . set Property ( Resource Constants . USER NAME , username ) ;", "credentials . set Property ( Resource Constants . PASSWORD , password ) ;", "return login ( credentials ) ; }"]}
{"ids": "39791", "code": ["@ Timed @ Exception Metered @ Path ( STR_ ) @ GET @ Produces ( APPLICATION JSON ) public Iterable < Sanitized Secret > secret Listing V 2 ( @ Auth Automation Client automation Client , @ Query Param ( STR_ ) Integer idx , @ Query Param ( STR_ ) Integer num , @ Default Value ( STR_ ) @ Query Param ( STR_ ) boolean newest First ) {", "if ( idx != null && num != null ) {", "if ( idx < NUM_ || num < NUM_ ) {", "throw new Bad Request Exception ( STR_ ) ; }", "return secret Controller . get Secrets Batched ( idx , num , newest First ) ; }", "return secret Controller . get Sanitized Secrets ( null , null ) ; }"]}
{"ids": "52320", "code": ["public void deselect ( Iterable < Integer > positions ) {", "Iterator < Integer > entries = positions . iterator ( ) ;", "while ( entries . has Next ( ) ) {", "deselect ( entries . next ( ) , entries ) ; } }"]}
{"ids": "57407", "code": ["public static String map 2 OID ( String alg Name ) {", "check Cache Version ( ) ;", "String result = alg 2 Oid Map . get ( alg Name . to Upper Case ( Locale . US ) ) ;", "if ( result != null ) {", "return result ; }", "Alg Name Mapper Source s = source ;", "if ( s != null ) {", "return s . map Name To Oid ( alg Name ) ; }", "return null ; }"]}
{"ids": "49736", "code": ["private void end List ( boolean ordered List ) {", "if ( ! m Paragraph Styles . is Empty ( ) ) {", "Accumulated Paragraph Style style = m Paragraph Styles . peek ( ) ;", "Paragraph Type type = style . get Type ( ) ;", "if ( ( ordered List && ( type . is Numbering ( ) || type == Paragraph Type . INDENTATION OL ) ) || ( ! ordered List && ( type . is Bullet ( ) || type == Paragraph Type . INDENTATION UL ) ) ) {", "int indent = style . get Relative Indent ( ) ;", "if ( indent > NUM_ ) {", "style . set Relative Indent ( indent - NUM_ ) ;", "style . set Absolute Indent ( style . get Absolute Indent ( ) - NUM_ ) ; }", "else {", "m Paragraph Styles . pop ( ) ; } }", "else {", "m Paragraph Styles . pop ( ) ;", "end List ( ordered List ) ; } } }"]}
{"ids": "78495", "code": ["private boolean process Key Up ( int key Code ) {", "if ( key Code == Key Event . KEYCODE ESCAPE || key Code == Key Event . KEYCODE BACK ) {", "dismiss ( ) ;", "return true ; }", "else if ( key Code == Key Event . KEYCODE TAB ) {", "if ( m In Kb Mode ) {", "if ( is Typed Time Fully Legal ( ) ) {", "finish Kb Mode ( true ) ; }", "return true ; } }", "else if ( key Code == Key Event . KEYCODE ENTER ) {", "if ( m In Kb Mode ) {", "if ( ! is Typed Time Fully Legal ( ) ) {", "return true ; }", "finish Kb Mode ( false ) ; }", "if ( m Callback != null ) {", "m Callback . on Time Set ( m Time Picker , m Time Picker . get Hours ( ) , m Time Picker . get Minutes ( ) ) ; }", "dismiss ( ) ;", "return true ; }", "else if ( key Code == Key Event . KEYCODE DEL ) {", "if ( m In Kb Mode ) {", "if ( ! m Typed Times . is Empty ( ) ) {", "int deleted = delete Last Typed Key ( ) ;", "String deleted Key Str ;", "if ( deleted == get Am Or Pm Key Code ( AM ) ) {", "deleted Key Str = m Am Text ; }", "else if ( deleted == get Am Or Pm Key Code ( PM ) ) {", "deleted Key Str = m Pm Text ; }", "else {", "deleted Key Str = String . format ( STR_ , get Val From Key Code ( deleted ) ) ; }", "Utils . try Accessibility Announce ( m Time Picker , String . format ( m Deleted Key Format , deleted Key Str ) ) ;", "update Display ( true ) ; } } }", "else if ( key Code == Key Event . KEYCODE 0 || key Code == Key Event . KEYCODE 1 || key Code == Key Event . KEYCODE 2 || key Code == Key Event . KEYCODE 3 || key Code == Key Event . KEYCODE 4 || key Code == Key Event . KEYCODE 5 || key Code == Key Event . KEYCODE 6 || key Code == Key Event . KEYCODE 7 || key Code == Key Event . KEYCODE 8 || key Code == Key Event . KEYCODE 9 || ( ! m Is 24 Hour Mode && ( key Code == get Am Or Pm Key Code ( AM ) || key Code == get Am Or Pm Key Code ( PM ) ) ) ) {", "if ( ! m In Kb Mode ) {", "if ( m Time Picker == null ) {", "Log . e ( TAG , STR_ ) ;", "return true ; }", "m Typed Times . clear ( ) ;", "try Starting Kb Mode ( key Code ) ;", "return true ; }", "if ( add Key If Legal ( key Code ) ) {", "update Display ( false ) ; }", "return true ; }", "return false ; }"]}
{"ids": "63443", "code": ["public boolean is Natural Join Column ( Column c ) {", "return natural Join Columns != null && natural Join Columns . contains ( c ) ; }"]}
{"ids": "47313", "code": ["public int read ( byte [ ] b , int off , int len ) throws IO Exception {", "ensure Open ( ) ;", "if ( b == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "else if ( off < NUM_ || len < NUM_ || len > b . length - off ) {", "throw new Index Out Of Bounds Exception ( ) ; }", "else if ( len == NUM_ ) {", "return NUM_ ; }", "int cnt = NUM_ ;", "while ( len > NUM_ && ! def . finished ( ) ) {", "int n ;", "if ( def . needs Input ( ) ) {", "n = in . read ( buf , NUM_ , buf . length ) ;", "if ( n < NUM_ ) {", "def . finish ( ) ; }", "else if ( n > NUM_ ) {", "def . set Input ( buf , NUM_ , n ) ; } }", "n = def . deflate ( b , off , len ) ;", "cnt += n ;", "off += n ;", "len -= n ; }", "if ( cnt == NUM_ && def . finished ( ) ) {", "reach EOF = true ;", "cnt = - NUM_ ; }", "return cnt ; }"]}
{"ids": "33625", "code": ["@ Override public void passivate ( ) {", "cleanup User Transaction ( ) ;", "super . passivate ( ) ; }"]}
{"ids": "52450", "code": ["public Builder delay ( long duration , Time Unit time Unit ) {", "this . delay = time Unit . to Seconds ( duration ) ;", "return this ; }"]}
{"ids": "32365", "code": ["private boolean contains ( int part ) {", "return parts . contains ( part ) ; }"]}
{"ids": "65253", "code": ["int key Count ( Class clazz ) {", "Map map = get ( clazz ) ;", "int count = map . size ( ) ;", "if ( map . contains Key ( CONSTRUCTORS KEY ) ) count -- ;", "if ( map . contains Key ( GENERIC GET KEY ) ) count -- ;", "if ( map . contains Key ( ARGTYPES KEY ) ) count -- ;", "return count ; }"]}
{"ids": "62427", "code": ["public Mp 4 Stco Box ( Mp 4 Box Header header , Byte Buffer original Data Buffer , int adjustment ) {", "this . header = header ;", "this . data Buffer = original Data Buffer . slice ( ) ;", "data Buffer . position ( data Buffer . position ( ) + VERSION FLAG LENGTH + OTHER FLAG LENGTH ) ;", "this . no Of Off Sets = Utils . get Int BE ( data Buffer , data Buffer . position ( ) , ( data Buffer . position ( ) + NO OF OFFSETS LENGTH - NUM_ ) ) ;", "data Buffer . position ( data Buffer . position ( ) + NO OF OFFSETS LENGTH ) ;", "for ( int i = NUM_ ; i < no Of Off Sets ; i ++ ) {", "int offset = Utils . get Int BE ( data Buffer , data Buffer . position ( ) , ( data Buffer . position ( ) + NO OF OFFSETS LENGTH - NUM_ ) ) ;", "offset = offset + adjustment ;", "data Buffer . put ( Utils . get Size BE Int 32 ( offset ) ) ; } }"]}
{"ids": "83393", "code": ["public static void create OPUS Directories ( Config config ) {", "log . info ( STR_ ) ;", "Urban Sim Parameter Config Module V 3 module = M 4 U Config Utils . get Urban Sim Parameter Config And Possibly Convert ( config ) ;", "File temp File = new File ( module . get Opus Home ( ) ) ;", "temp File . mkdirs ( ) ;", "temp File = new File ( module . get MAT Sim 4 Opus ( ) ) ;", "temp File . mkdirs ( ) ;", "temp File = new File ( module . get MAT Sim 4 Opus Output ( ) ) ;", "temp File . mkdirs ( ) ;", "temp File = new File ( module . get MAT Sim 4 Opus Temp ( ) ) ;", "temp File . mkdirs ( ) ;", "temp File = new File ( module . get MAT Sim 4 Opus Config ( ) ) ;", "temp File . mkdirs ( ) ;", "log . info ( STR_ ) ; }"]}
{"ids": "41378", "code": ["public static String lcfirst ( String input ) {", "return with First ( input , null ) ; }"]}
{"ids": "63288", "code": ["void compress ( int page , byte [ ] old ) {", "byte [ ] [ ] array = data ;", "if ( page >= array . length ) {", "return ; }", "byte [ ] d = array [ page ] ;", "if ( d != old ) {", "return ; }", "synchronized ( LZF ) {", "int len = LZF . compress ( d , BLOCK SIZE , BUFFER , NUM_ ) ;", "if ( len <= BLOCK SIZE ) {", "d = new byte [ len ] ;", "System . arraycopy ( BUFFER , NUM_ , d , NUM_ , len ) ;", "byte [ ] o = array [ page ] ;", "if ( o != old ) {", "return ; }", "array [ page ] = d ; } } }"]}
{"ids": "31702", "code": ["public Hadoop Process Descriptor local Process Descriptor ( ) {", "return loc Proc Desc ; }"]}
{"ids": "80615", "code": ["private Pair < String , Boolean > describe Rain ( Calendar calendar , int temperature Mod ) {", "int month = calendar . get ( Calendar . MONTH ) ;", "month = NUM_ * Math . abs ( month - NUM_ ) ;", "int hour = calendar . get ( Calendar . HOUR OF DAY ) ;", "hour = Math . abs ( ( hour + NUM_ ) % NUM_ - NUM_ ) / NUM_ ;", "int temp = temperature . get Value ( ) - hour - month + ( temperature Mod * NUM_ ) ;", "LOGGER . debug ( STR_ + temp + STR_ + temperature Mod ) ;", "if ( temp <= - NUM_ ) {", "return new Pair < String , Boolean > ( STR_ , Boolean . FALSE ) ; }", "return new Pair < String , Boolean > ( STR_ , temp >= - NUM_ && thunder . get Description ( NUM_ ) != null ) ; }"]}
{"ids": "56078", "code": ["@ Visible For Testing @ Called By Native Unchecked ( STR_ ) public void add Child ( Bookmark Node child ) {", "m Children . add ( child ) ; }"]}
{"ids": "69159", "code": ["@ Override public String read ( String pattern ) {", "return read ( Pattern . compile ( pattern , Pattern . DOTALL | Pattern . MULTILINE ) ) ; }"]}
{"ids": "54484", "code": ["protected void add Sub Keys And Aggregator ( Set < String > values , Set < String > keys Of Composite Aggregator , Set < String > sub Keys , String aggregator Name , Map < Set < String > , Integer > keys To Combination Id ) {", "if ( keys Of Composite Aggregator == null || sub Keys == null || keys Of Composite Aggregator . is Empty ( ) || sub Keys . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Set < String > all Keys = Sets . new Hash Set ( ) ;", "all Keys . add All ( keys Of Composite Aggregator ) ;", "all Keys . add All ( sub Keys ) ;", "if ( all Keys . size ( ) != keys Of Composite Aggregator . size ( ) + sub Keys . size ( ) ) {", "throw new Illegal Argument Exception ( STR_ + keys Of Composite Aggregator . to String ( ) + STR_ + sub Keys ) ; }", "Integer combination Id = keys To Combination Id . get ( all Keys ) ;", "if ( combination Id == null ) {", "if ( dimensions Descriptor ID To Keys . add ( new Fields ( all Keys ) ) ) {", "combination Id = dimensions Descriptor ID To Keys . size ( ) - NUM_ ; }", "else {", "throw new Runtime Exception ( STR_ + all Keys + STR_ ) ; }", "keys To Combination Id . put ( all Keys , combination Id ) ;", "add Value To Aggregator To Combination ( values , all Keys , aggregator Name ) ; }", "else {", "Set < String > incremental Aggregator Names ;", "boolean is OTF Aggregator = false ;", "if ( ! is Incremental Aggregator ( aggregator Name ) ) {", "incremental Aggregator Names = get OTF Depended Incremental Aggregator Names ( aggregator Name ) ;", "is OTF Aggregator = true ; }", "else {", "incremental Aggregator Names = Sets . new Hash Set ( ) ;", "incremental Aggregator Names . add ( aggregator Name ) ; }", "Map < String , Set < String > > new Value To Incremental Aggregators = Maps . new Hash Map ( ) ;", "Map < String , Set < String > > new Value To OTF Aggregators = Maps . new Hash Map ( ) ;", "for ( String value : values ) {", "new Value To Incremental Aggregators . put ( value , incremental Aggregator Names ) ;", "if ( is OTF Aggregator ) {", "new Value To OTF Aggregators . put ( value , Sets . new Hash Set ( aggregator Name ) ) ; } }", "int ddid = combination Id * custom Time Buckets Combination . size ( ) ;", "for ( int index = NUM_ ; index < custom Time Buckets Combination . size ( ) ; ++ index , ++ ddid ) {", "merge Maps ( dimensions Descriptor ID To Value To Aggregator . get ( ddid ) , new Value To Incremental Aggregators ) ;", "merge Maps ( dimensions Descriptor ID To Value To OTF Aggregator . get ( ddid ) , new Value To OTF Aggregators ) ; } } }"]}
{"ids": "70730", "code": ["protected boolean find Canonical Labelling ( boolean tmp Previously Equal To Min ) {", "boolean found New Minimum = false ;", "Int Array List underlying Vertex Pos That Extend Tmp = get Underlying Vertex Pos That Extend Tmp ( ) ;", "Int Cursor underlying Vertex Pos That Extend Tmp Cursor = underlying Vertex Pos That Extend Tmp . cursor ( ) ;", "while ( underlying Vertex Pos That Extend Tmp Cursor . move Next ( ) ) {", "int underlying Vertex Pos To Add = underlying Vertex Pos That Extend Tmp Cursor . elem ( ) ;", "int new Tmp Vertex Pos = add Tmp Vertex ( underlying Vertex Pos To Add ) ;", "int new Tmp Vertex Label = underlying Pos To Label . get Unchecked ( underlying Vertex Pos To Add ) ;", "Int Set neighbour Underlying Positions = underlying Adjacency List . get ( underlying Vertex Pos To Add ) ;", "Int Cursor neighbour Underlying Positions Cursor = neighbour Underlying Positions . cursor ( ) ;", "Pattern Edge Array List edges To Add = create Pattern Edge Array List ( ) ;", "while ( neighbour Underlying Positions Cursor . move Next ( ) ) {", "int neighbour Underlying Pos = neighbour Underlying Positions Cursor . elem ( ) ;", "int neighbour Tmp Pos = tmp Labelling . get ( neighbour Underlying Pos ) ;", "if ( neighbour Tmp Pos == - NUM_ ) {", "continue ; }", "add Candidate Pattern Edges ( edges To Add , neighbour Underlying Pos , neighbour Tmp Pos , underlying Vertex Pos To Add , new Tmp Vertex Pos ) ; }", "if ( edges To Add . size ( ) > NUM_ || new Tmp Vertex Pos == NUM_ ) {", "edges To Add . sort ( ) ;", "boolean promising Tmp Pattern = true ;", "boolean equal To Min Tmp Pattern = tmp Previously Equal To Min ;", "if ( found Minimum ) {", "int comparison Result ;", "if ( new Tmp Vertex Pos > NUM_ ) {", "Pattern Edge Array List min Equivalent Edges = min Edges . get ( new Tmp Vertex Pos ) ;", "comparison Result = edges To Add . compare To ( min Equivalent Edges ) ; }", "else {", "int min First Underlying Vertex Pos = min Inverse Labelling . get ( new Tmp Vertex Pos ) ;", "int min First Underyling Vertex Label = underlying Pos To Label . get Unchecked ( min First Underlying Vertex Pos ) ;", "comparison Result = Integer . compare ( new Tmp Vertex Label , min First Underyling Vertex Label ) ; }", "equal To Min Tmp Pattern = equal To Min Tmp Pattern && comparison Result == NUM_ ;", "if ( tmp Previously Equal To Min && ! equal To Min Tmp Pattern ) {", "if ( comparison Result > NUM_ ) {", "promising Tmp Pattern = false ; } } }", "if ( promising Tmp Pattern ) {", "add Tmp Edges ( edges To Add ) ;", "if ( tmp Labelling . size ( ) == get Number Of Vertices ( ) ) {", "if ( ! equal To Min Tmp Pattern || ! found Minimum ) {", "copy Tmp To Min ( ) ;", "found New Minimum = true ;", "vertex Position Equivalences . clear ( ) ; }", "Int Int Cursor tmp Labelling Cursor = tmp Labelling . cursor ( ) ;", "while ( tmp Labelling Cursor . move Next ( ) ) {", "int underlying Pos = tmp Labelling Cursor . key ( ) ;", "int tmp Equivalent Pos = tmp Labelling Cursor . value ( ) ;", "int underlying Pos According To Min = min Inverse Labelling . get ( tmp Equivalent Pos ) ;", "vertex Position Equivalences . add Equivalence ( underlying Pos , underlying Pos According To Min ) ; } }", "else {", "boolean found New Minimum In Child = find Canonical Labelling ( equal To Min Tmp Pattern ) ;", "if ( found New Minimum In Child ) {", "tmp Previously Equal To Min = true ;", "found New Minimum = true ; } }", "remove Last Tmp Edges ( ) ; }", "else {", "edges To Add . reclaim ( ) ; } }", "remove Last Tmp Vertex ( ) ; }", "underlying Vertex Pos That Extend Tmp . reclaim ( ) ;", "return found New Minimum ; }"]}
{"ids": "22507", "code": ["private String construct ISCSI Names Query ( String system Id , List < Host Storage Domain > hsd List , String model ) {", "Map < String , Object > attribute Map = new Hash Map < String , Object > ( ) ;", "Storage Array array = new Storage Array ( system Id ) ;", "Add add Op = new Add ( HDS Constants . ISCSI NAME FOR HSD TARGET ) ;", "attribute Map . put ( HDS Constants . STORAGEARRAY , array ) ;", "attribute Map . put ( HDS Constants . ADD , add Op ) ;", "attribute Map . put ( HDS Constants . MODEL , model ) ;", "attribute Map . put ( HDS Constants . HOSTGROUP LIST , hsd List ) ;", "String add WWN Query = Input XML Generation Client . get Input XML String ( HDS Constants . BATCH ADD WWN TO HSD OP , attribute Map , HDS Constants . HITACHI INPUT XML CONTEXT FILE , HDS Constants . HITACHI SMOOKS CONFIG FILE ) ;", "return add WWN Query ; }"]}
{"ids": "70951", "code": ["public static void try Claim ( Publication publication , Buffer Filler fill Buffer , int length , int timeout , Time Unit time Unit ) {", "if ( publication . is Closed ( ) ) {", "throw new Not Connected Exception ( ) ; }", "final Buffer Claim buffer Claim = buffer Claims . get ( ) ;", "final long start = System . nano Time ( ) ;", "do {", "final long current = System . nano Time ( ) ;", "if ( ( current - start ) > time Unit . to Nanos ( timeout ) ) {", "throw new Timed Out Exception ( ) ; }", "final long offer = publication . try Claim ( length , buffer Claim ) ;", "if ( offer >= NUM_ ) {", "try {", "final Mutable Direct Buffer buffer = buffer Claim . buffer ( ) ;", "final int offset = buffer Claim . offset ( ) ;", "fill Buffer . fill ( offset , buffer ) ;", "break ; }", "finally {", "buffer Claim . commit ( ) ; } }", "else if ( Publication . NOT CONNECTED == offer ) {", "throw new Not Connected Exception ( ) ; } }", "while ( true ) ; }"]}
{"ids": "34503", "code": ["Builder add Lenient ( String line ) {", "int index = line . index Of ( STR_ , NUM_ ) ;", "if ( index != - NUM_ ) {", "return add Lenient ( line . substring ( NUM_ , index ) , line . substring ( index + NUM_ ) ) ; }", "else if ( line . starts With ( STR_ ) ) {", "return add Lenient ( STR_ , line . substring ( NUM_ ) ) ; }", "else {", "return add Lenient ( STR_ , line ) ; } }"]}
{"ids": "19895", "code": ["protected boolean table Exists ( Table t ) throws SQL Exception {", "String sql = STR_ + ( t . is Temporary ( ) ? STR_ : ( STR_ + t . get Schema ( ) + STR_ ) ) + STR_ + ( t . is Temporary ( ) ? ( t . get Schema ( ) + STR_ ) : STR_ ) + t . get Name ( ) + STR_ ;", "Statement stmt = db Conn . create Statement ( ) ;", "try {", "Result Set rs = stmt . execute Query ( sql ) ;", "return rs . next ( ) ; }", "finally {", "if ( stmt != null ) {", "try {", "stmt . close ( ) ; }", "catch ( SQL Exception e ) { } } } }"]}
{"ids": "27372", "code": ["private void read Unlocked Thread ( ) {", "final long this Thread Id = Thread . current Thread ( ) . get Id ( ) ;", "final Integer entry = thread Lock Map . get ( this Thread Id ) ;", "assert entry != null ;", "if ( entry . int Value ( ) == NUM_ ) {", "thread Lock Map . remove ( this Thread Id ) ; }", "else {", "thread Lock Map . put ( this Thread Id , entry . int Value ( ) - NUM_ ) ; } }"]}
{"ids": "49372", "code": ["boolean is Single Window Standard Offset ( ) {", "return window End . equals ( Local Date Time . MAX ) && time Definition == Time Definition . WALL && fixed Saving Amount Secs == null && last Rule List . is Empty ( ) && rule List . is Empty ( ) ; }"]}
{"ids": "51565", "code": ["public void add ( Character ok ) {", "add ( ok . char Value ( ) ) ; }"]}
{"ids": "21628", "code": ["private Workflow . Method delete Volumes Method ( URI system URI , List < URI > volume UR Is ) {", "return new Workflow . Method ( STR_ , system URI , volume UR Is ) ; }"]}
{"ids": "46743", "code": ["public boolean remove ( Accessible State state ) {", "if ( states == null ) {", "return false ; }", "else {", "return states . remove Element ( state ) ; } }"]}
{"ids": "84764", "code": ["public void output Example XML ( Print Writer writer , Attribute Rule rule ) {", "writer . print ( STR_ + rule . get Name ( ) + STR_ ) ;", "if ( rule . has Example ( ) ) {", "writer . print ( rule . get Example ( ) ) ; }", "else {", "output Attribute Value ( writer , rule . get Attribute Class ( ) ) ; }", "writer . print ( STR_ ) ; }"]}
{"ids": "75199", "code": ["private void before Value ( ) throws JSON Exception {", "if ( stack . is Empty ( ) ) {", "return ; }", "Scope context = peek ( ) ;", "if ( context == Scope . EMPTY ARRAY ) {", "replace Top ( Scope . NONEMPTY ARRAY ) ;", "newline ( ) ; }", "else if ( context == Scope . NONEMPTY ARRAY ) {", "out . append ( STR_ ) ;", "newline ( ) ; }", "else if ( context == Scope . DANGLING KEY ) {", "out . append ( indent == null ? STR_ : STR_ ) ;", "replace Top ( Scope . NONEMPTY OBJECT ) ; }", "else if ( context != Scope . NULL ) {", "throw new JSON Exception ( STR_ ) ; } }"]}
{"ids": "11765", "code": ["public static double calculate Julian Date ( Gregorian Calendar cal ) {", "int year = cal . get ( Calendar . YEAR ) ;", "int month = cal . get ( Calendar . MONTH ) ;", "int day = cal . get ( Calendar . DAY OF MONTH ) ;", "month ++ ;", "if ( ( month == NUM_ ) || ( month == NUM_ ) ) {", "year -= NUM_ ;", "month += NUM_ ; }", "int A = year / NUM_ ;", "int B = ( int ) ( NUM_ - A + ( A / NUM_ ) ) ;", "int C = ( int ) ( NUM_ * ( float ) year ) ;", "int D = ( int ) ( NUM_ * ( float ) ( month + NUM_ ) ) ;", "double julian Date = ( double ) ( B + C + D + day ) + NUM_ ;", "return julian Date ; }"]}
{"ids": "59522", "code": ["public boolean is Upload In Progress ( ) {", "return m Upload Started . get ( ) ; }"]}
{"ids": "34726", "code": ["private int index Of ( int tab Id ) {", "return m Tab Id List . index Of ( tab Id ) ; }"]}
{"ids": "41465", "code": ["public Ndef Message ( Ndef Record record , Ndef Record ... records ) {", "if ( record == null ) throw new Null Pointer Exception ( STR_ ) ;", "for ( Ndef Record r : records ) {", "if ( r == null ) {", "throw new Null Pointer Exception ( STR_ ) ; } }", "m Records = new Ndef Record [ NUM_ + records . length ] ;", "m Records [ NUM_ ] = record ;", "System . arraycopy ( records , NUM_ , m Records , NUM_ , records . length ) ; }"]}
{"ids": "78655", "code": ["private int find Checkpoint Position ( int [ ] cids ) {", "if ( checkpoint Period < NUM_ ) {", "return - NUM_ ; }", "if ( cids . length == NUM_ ) {", "throw new Illegal Argument Exception ( ) ; }", "int first CID = cids [ NUM_ ] ;", "if ( ( first CID + NUM_ ) % checkpoint Period == NUM_ ) {", "return cid Position ( cids , first CID ) ; }", "else {", "int next Ckp Index = ( ( ( first CID / checkpoint Period ) + NUM_ ) * checkpoint Period ) - NUM_ ;", "if ( next Ckp Index <= cids [ cids . length - NUM_ ] ) {", "return cid Position ( cids , next Ckp Index ) ; } }", "return - NUM_ ; }"]}
{"ids": "44522", "code": ["private boolean read Next Line ( ) throws IO Exception {", "if ( header Lines . has More Elements ( ) ) {", "try {", "pos = NUM_ ;", "String line = ( header Lines . next Element ( ) + LINE SEPERATOR ) ;", "if ( ! header Lines . has More Elements ( ) ) {", "line += LINE SEPERATOR ; }", "curr Line = line . get Bytes ( STR_ ) ;", "return true ; }", "catch ( Unsupported Encoding Exception e ) {", "throw new IO Exception ( STR_ ) ; } }", "else {", "return false ; } }"]}
{"ids": "32224", "code": ["private boolean pause ( ) {", "try {", "U . await ( pause Latch , REMAP PAUSE , MILLISECONDS ) ;", "return true ; }", "catch ( Ignite Interrupted Checked Exception e ) {", "on Done ( e ) ;", "return false ; } }"]}
{"ids": "25220", "code": ["public static Input Stream to Input Stream ( final Char Sequence input ) {", "return IO Utils . to Input Stream ( input , Charset . default Charset ( ) ) ; }"]}
{"ids": "22003", "code": ["private static ITL Rest Rep create Initiator Target Ref Rep ( Export Group export Group , Block Object block Object , String hlu , Initiator initiator , Storage Port port , FC Zone Reference fc Zone Reference ) {", "ITL Rest Rep rep = new ITL Rest Rep ( ) ;", "rep . set Hlu ( Integer . parse Int ( hlu ) ) ;", "ITL Rest Rep . ITL Block Object Rest Rep block Object Rest Rep = new ITL Rest Rep . ITL Block Object Rest Rep ( ) ;", "block Object Rest Rep . set Id ( block Object . get Id ( ) ) ;", "block Object Rest Rep . set Link ( new Rest Link Rep ( STR_ , Rest Link Factory . new Link ( block Object ) ) ) ;", "block Object Rest Rep . set Wwn ( get Block Object Formatted WWN ( block Object ) ) ;", "rep . set Block Object ( block Object Rest Rep ) ;", "ITL Rest Rep . ITL Initiator Rest Rep initiator Rest Rep = new ITL Rest Rep . ITL Initiator Rest Rep ( ) ;", "initiator Rest Rep . set Id ( initiator . get Id ( ) ) ;", "initiator Rest Rep . set Link ( new Rest Link Rep ( STR_ , Rest Link Factory . new Link ( initiator ) ) ) ;", "initiator Rest Rep . set Port ( initiator . get Initiator Port ( ) ) ;", "rep . set Initiator ( initiator Rest Rep ) ;", "ITL Rest Rep . ITL Storage Port Rest Rep storage Port Rest Rep = new ITL Rest Rep . ITL Storage Port Rest Rep ( ) ;", "if ( port != null ) {", "storage Port Rest Rep . set Id ( port . get Id ( ) ) ;", "storage Port Rest Rep . set Link ( new Rest Link Rep ( STR_ , Rest Link Factory . new Link ( port ) ) ) ;", "storage Port Rest Rep . set Port ( port . get Port Network Id ( ) ) ;", "if ( port . get Ip Address ( ) != null ) {", "storage Port Rest Rep . set Ip Address ( port . get Ip Address ( ) ) ;", "storage Port Rest Rep . set Tcp Port ( String . value Of ( port . get Tcp Port Number ( ) ) ) ; } }", "rep . set Storage Port ( storage Port Rest Rep ) ;", "rep . set Export ( to Named Related Resource ( export Group , export Group . get Label ( ) ) ) ;", "if ( fc Zone Reference != null ) {", "rep . set San Zone Name ( fc Zone Reference . get Zone Name ( ) ) ; }", "return rep ; }"]}
{"ids": "18200", "code": ["public void write ( final int c ) throws IO Exception {", "if ( m writer != null ) m writer . write ( c ) ;", "if ( count >= buf length ) flush Buffer ( ) ;", "if ( c < NUM_ ) {", "buf [ count ++ ] = ( byte ) ( c ) ; }", "else if ( c < NUM_ ) {", "buf [ count ++ ] = ( byte ) ( NUM_ + ( c > > NUM_ ) ) ;", "buf [ count ++ ] = ( byte ) ( NUM_ + ( c & NUM_ ) ) ; }", "else {", "buf [ count ++ ] = ( byte ) ( NUM_ + ( c > > NUM_ ) ) ;", "buf [ count ++ ] = ( byte ) ( NUM_ + ( ( c > > NUM_ ) & NUM_ ) ) ;", "buf [ count ++ ] = ( byte ) ( NUM_ + ( c & NUM_ ) ) ; } }"]}
{"ids": "36889", "code": ["private static List < C Operand Tree > convert ( final I Navi Module module , final List < Operand > operands ) {", "final List < C Operand Tree > converted Operands = new Array List < C Operand Tree > ( ) ;", "for ( final Operand operand : operands ) {", "converted Operands . add ( module . create Operand ( convert ( module , operand . get Root Node ( ) , null ) ) ) ; }", "return converted Operands ; }"]}
{"ids": "67702", "code": ["public static String xml Escape ( String s ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < s . length ( ) ; i ++ ) {", "char ch = s . char At ( i ) ;", "switch ( ch ) {", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "break ;", "default :", "sb . append ( ch ) ;", "break ; } }", "return sb . to String ( ) ; }"]}
{"ids": "59393", "code": ["public boolean write Header ( Output Stream os ) {", "try {", "write Int ( os , CACHE MAGIC ) ;", "write String ( os , key ) ;", "write String ( os , etag == null ? STR_ : etag ) ;", "write Long ( os , server Date ) ;", "write Long ( os , ttl ) ;", "write Long ( os , soft Ttl ) ;", "write String String Map ( response Headers , os ) ;", "os . flush ( ) ;", "return true ; }", "catch ( IO Exception e ) {", "Volley Log . d ( STR_ , e . to String ( ) ) ;", "return false ; } }"]}
{"ids": "34640", "code": ["@ Visible For Testing public Bitmap ensure Normalized Icon ( Bitmap icon , String origin ) {", "if ( icon == null || icon . get Width ( ) == NUM_ ) {", "if ( m Icon Generator == null ) {", "int corner Radius Px = Math . min ( m Large Icon Width Px , m Large Icon Height Px ) / NUM_ ;", "m Icon Generator = new Rounded Icon Generator ( m Large Icon Width Px , m Large Icon Height Px , corner Radius Px , NOTIFICATION ICON BG COLOR , NOTIFICATION TEXT SIZE DP * m Density ) ; }", "return m Icon Generator . generate Icon For Url ( origin , true ) ; }", "if ( icon . get Width ( ) > m Large Icon Width Px || icon . get Height ( ) > m Large Icon Height Px ) {", "return icon . create Scaled Bitmap ( icon , m Large Icon Width Px , m Large Icon Height Px , false ) ; }", "return icon ; }"]}
{"ids": "38138", "code": ["protected boolean [ ] can Handle Zero Training ( boolean nominal Predictor , boolean numeric Predictor , boolean string Predictor , boolean date Predictor , boolean relational Predictor , boolean multi Instance , int class Type ) {", "print ( STR_ ) ;", "print Attribute Summary ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type ) ;", "print ( STR_ ) ;", "Array List < String > accepts = new Array List < String > ( ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "int num Train = NUM_ , num Classes = NUM_ , missing Level = NUM_ ;", "boolean predictor Missing = false , class Missing = false ;", "return run Basic Test ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type , missing Level , predictor Missing , class Missing , num Train , num Classes , accepts ) ; }"]}
{"ids": "30565", "code": ["public SQL Query ( String type Name , String sql Expression ) {", "this ( sql Expression , type Name , null , DEFAULT QUERY RESULT TYPE , null ) ; }"]}
{"ids": "55159", "code": ["private static void check Offset ( String value , int offset , char expected ) throws Index Out Of Bounds Exception {", "char found = value . char At ( offset ) ;", "if ( found != expected ) {", "throw new Index Out Of Bounds Exception ( STR_ + expected + STR_ + found + STR_ ) ; } }"]}
{"ids": "42869", "code": ["public boolean is In Net ( String host , String pattern , String mask ) {", "host = dns Resolve ( host ) ;", "if ( host == null || host . length ( ) == NUM_ ) {", "return false ; }", "long lhost = parse Ip Address To Long ( host ) ;", "long lpattern = parse Ip Address To Long ( pattern ) ;", "long lmask = parse Ip Address To Long ( mask ) ;", "return ( lhost & lmask ) == lpattern ; }"]}
{"ids": "17848", "code": ["public int enumerate ( Thread [ ] threads ) {", "return enumerate ( threads , true ) ; }"]}
{"ids": "21132", "code": ["public void start ( ) {", "log . info ( STR_ , this . name , this . frequency In Secs ) ;", "stopped = false ;", "Thread dr Health Monitor Thread = new Thread ( this ) ;", "dr Health Monitor Thread . set Name ( this . name ) ;", "dr Health Monitor Thread . start ( ) ; }"]}
{"ids": "65219", "code": ["public void connect ( String event Source Url ) throws IO Exception {", "LOG . entering ( CLASS NAME , STR_ , event Source Url ) ;", "if ( stream != null ) {", "LOG . warning ( STR_ ) ;", "throw new Illegal Argument Exception ( STR_ ) ; }", "stream = new Sse Event Stream ( event Source Url ) ;", "stream . set Listener ( event Stream Listener ) ;", "stream . connect ( ) ; }"]}
{"ids": "60274", "code": ["private static String method Name ( @ Non Nls final String method ) {", "return Git SSH Handler . HANDLER NAME + STR_ + method ; }"]}
{"ids": "36248", "code": ["public Data Row remove Data Row ( int index ) {", "return data List . remove ( index ) ; }"]}
{"ids": "13058", "code": ["public void put ( Object key , Object value ) {", "int bucket = ( key . hash Code ( ) & NUM_ ) % f Table Size ;", "Entry entry = search ( key , bucket ) ;", "if ( entry != null ) {", "entry . value = value ; }", "else {", "entry = new Entry ( key , value , f Buckets [ bucket ] ) ;", "f Buckets [ bucket ] = entry ;", "f Num ++ ; } }"]}
{"ids": "74392", "code": ["public void value Changed ( List Selection Event e ) {", "if ( table == null ) {", "return ; }", "int row = table . get Selected Row ( ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + row ) ; }", "if ( row >= NUM_ ) {", "add Button . set Enabled ( true ) ;", "add Button . set Tool Tip Text ( null ) ;", "if ( type != null && type . equals ( STR_ ) ) {", "make Icon Map ( pick List Model . get Bean At ( row ) ) ;", "clear Icon Panel ( ) ;", "do Icon Panel ( ) ; } }", "else {", "add Button . set Enabled ( false ) ;", "add Button . set Tool Tip Text ( Bundle . get Message ( STR_ ) ) ; }", "validate ( ) ; }"]}
{"ids": "57690", "code": ["private int process Poll Fds ( ) throws IO Exception {", "if ( poll Fds . get ( NUM_ ) . revents == POLLIN ) {", "byte [ ] buffer = new byte [ NUM_ ] ;", "while ( Io Bridge . read ( wakeup In , buffer , NUM_ , NUM_ ) > NUM_ ) { } }", "int ready Key Count = NUM_ ;", "for ( int i = NUM_ ; i < poll Fds . size ( ) ; ++ i ) {", "Struct Pollfd poll Fd = poll Fds . get ( i ) ;", "if ( poll Fd . revents == NUM_ ) {", "continue ; }", "if ( poll Fd . fd == null ) {", "break ; }", "Selection Key Impl key = ( Selection Key Impl ) poll Fd . user Data ;", "poll Fd . fd = null ;", "poll Fd . user Data = null ;", "int ops = key . interest Ops No Check ( ) ;", "int selected Ops = NUM_ ;", "if ( ( poll Fd . revents & POLLHUP ) != NUM_ ) {", "selected Ops |= ops ; }", "if ( ( poll Fd . revents & POLLIN ) != NUM_ ) {", "selected Ops |= ops & ( OP ACCEPT | OP READ ) ; }", "if ( ( poll Fd . revents & POLLOUT ) != NUM_ ) {", "if ( key . is Connected ( ) ) {", "selected Ops |= ops & OP WRITE ; }", "else {", "selected Ops |= ops & OP CONNECT ; } }", "if ( selected Ops != NUM_ ) {", "boolean was Selected = mutable Selected Keys . contains ( key ) ;", "if ( was Selected && key . ready Ops ( ) != selected Ops ) {", "key . set Ready Ops ( key . ready Ops ( ) | selected Ops ) ;", "++ ready Key Count ; }", "else if ( ! was Selected ) {", "key . set Ready Ops ( selected Ops ) ;", "mutable Selected Keys . add ( key ) ;", "++ ready Key Count ; } } }", "return ready Key Count ; }"]}
{"ids": "59644", "code": ["public static boolean is Intermediate Table ( String table Name , SQ Lite Database db ) {", "if ( ! Text Utils . is Empty ( table Name ) ) {", "if ( table Name . matches ( STR_ ) ) {", "Cursor cursor = null ;", "try {", "cursor = db . query ( Const . Table Schema . TABLE NAME , null , null , null , null , null , null ) ;", "if ( cursor . move To First ( ) ) {", "do {", "String table Name DB = cursor . get String ( cursor . get Column Index Or Throw ( Const . Table Schema . COLUMN NAME ) ) ;", "if ( table Name . equals Ignore Case ( table Name DB ) ) {", "int table Type = cursor . get Int ( cursor . get Column Index Or Throw ( Const . Table Schema . COLUMN TYPE ) ) ;", "if ( table Type == Const . Table Schema . INTERMEDIATE JOIN TABLE ) {", "return true ; }", "break ; } }", "while ( cursor . move To Next ( ) ) ; } }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "if ( cursor != null ) {", "cursor . close ( ) ; } } } }", "return false ; }"]}
{"ids": "26695", "code": ["public Real Matrix create ( ) {", "Real Matrix rotation = new Identity Matrix ( ) ;", "for ( Plane plane : planes ) {", "double theta = plane . get Theta ( ) ;", "if ( Double . is Na N ( theta ) ) {", "continue ; }", "rotation = rotation . multiply ( new Rotation Matrix ( plane . get First Axis ( ) , plane . get Second Axis ( ) , theta ) ) ; }", "return rotation ; }"]}
{"ids": "87043", "code": ["public static String to Upper Case ( String str ) {", "return str . to Upper Case ( Locale . ENGLISH ) ; }"]}
{"ids": "56956", "code": ["protected static void init ( ) {", "String notificationfactory Class Name = null ;", "try {", "notificationfactory Class Name = System . get Property ( NOTIFICATION FACTORY NAME ) ; }", "catch ( Security Exception e ) {", "throw new Runtime Exception ( e ) ; }", "if ( notificationfactory Class Name != null ) {", "Class < ? > nfc ;", "try {", "nfc = Class . for Name ( notificationfactory Class Name ) ;", "factory = ( I Notification Manager Factory ) nfc . new Instance ( ) ; }", "catch ( Class Not Found Exception | Instantiation Exception | Illegal Access Exception e ) {", "throw new Runtime Exception ( e ) ; } }", "else {", "factory = new Syslog Notification Factory ( ) ; } }"]}
{"ids": "13137", "code": ["public boolean is Declared Entity ( String entity Name ) {", "Entity entity = ( Entity ) f Entities . get ( entity Name ) ;", "return entity != null ; }"]}
{"ids": "55447", "code": ["private void open Context Menu ( Mouse Event e ) {", "if ( e . is Popup Trigger ( ) ) {", "select Clicked ( e , false ) ;", "List < Removed List Item > selected Items = list . get Selected Values List ( ) ;", "List < Stream Info > selected = new Array List < > ( ) ;", "for ( Removed List Item item : selected Items ) {", "selected . add ( item . get Stream Info ( ) ) ; }", "Stream Infos Context Menu m = new Stream Infos Context Menu ( selected , false ) ;", "for ( Context Menu Listener cml : context Menu Listeners ) {", "m . add Context Menu Listener ( cml ) ; }", "m . show ( list , e . get X ( ) , e . get Y ( ) ) ; } }"]}
{"ids": "29259", "code": ["private boolean put ( boolean is Root , Vector names , int len , Object value ) {", "if ( len == NUM_ ) {", "if ( is Root ) {", "if ( root Value != null ) return false ;", "root Value = value ; }", "else {", "if ( other Value != null ) return false ;", "other Value = value ; }", "return true ; }", "else {", "Object name = names . element At ( len - NUM_ ) ;", "Context Map nested Map = ( Context Map ) name Table . get ( name ) ;", "if ( nested Map == null ) {", "nested Map = new Context Map ( ) ;", "name Table . put ( name , nested Map ) ; }", "return nested Map . put ( is Root , names , len - NUM_ , value ) ; } }"]}
{"ids": "31499", "code": ["static String encode High Level ( String msg , Compaction compaction ) throws Writer Exception {", "byte [ ] bytes = null ;", "String Builder sb = new String Builder ( msg . length ( ) ) ;", "int len = msg . length ( ) ;", "int p = NUM_ ;", "int text Sub Mode = SUBMODE ALPHA ;", "if ( compaction == Compaction . TEXT ) {", "encode Text ( msg , p , len , sb , text Sub Mode ) ; }", "else if ( compaction == Compaction . BYTE ) {", "bytes = get Bytes For Message ( msg ) ;", "encode Binary ( bytes , p , bytes . length , BYTE COMPACTION , sb ) ; }", "else if ( compaction == Compaction . NUMERIC ) {", "sb . append ( ( char ) LATCH TO NUMERIC ) ;", "encode Numeric ( msg , p , len , sb ) ; }", "else {", "int encoding Mode = TEXT COMPACTION ;", "while ( p < len ) {", "int n = determine Consecutive Digit Count ( msg , p ) ;", "if ( n >= NUM_ ) {", "sb . append ( ( char ) LATCH TO NUMERIC ) ;", "encoding Mode = NUMERIC COMPACTION ;", "text Sub Mode = SUBMODE ALPHA ;", "encode Numeric ( msg , p , n , sb ) ;", "p += n ; }", "else {", "int t = determine Consecutive Text Count ( msg , p ) ;", "if ( t >= NUM_ || n == len ) {", "if ( encoding Mode != TEXT COMPACTION ) {", "sb . append ( ( char ) LATCH TO TEXT ) ;", "encoding Mode = TEXT COMPACTION ;", "text Sub Mode = SUBMODE ALPHA ; }", "text Sub Mode = encode Text ( msg , p , t , sb , text Sub Mode ) ;", "p += t ; }", "else {", "if ( bytes == null ) {", "bytes = get Bytes For Message ( msg ) ; }", "int b = determine Consecutive Binary Count ( msg , bytes , p ) ;", "if ( b == NUM_ ) {", "b = NUM_ ; }", "if ( b == NUM_ && encoding Mode == TEXT COMPACTION ) {", "encode Binary ( bytes , p , NUM_ , TEXT COMPACTION , sb ) ; }", "else {", "encode Binary ( bytes , p , b , encoding Mode , sb ) ;", "encoding Mode = BYTE COMPACTION ;", "text Sub Mode = SUBMODE ALPHA ; }", "p += b ; } } } }", "return sb . to String ( ) ; }"]}
{"ids": "72736", "code": ["protected void queue ( final Path file ) throws Interrupted Exception {", "if ( null != base && file . starts With ( base ) ) {", "queue . put ( file . subpath ( base . get Name Count ( ) , file . get Name Count ( ) ) ) ; }", "else {", "queue . put ( file ) ; } }"]}
{"ids": "39789", "code": ["public Input Stream open Path ( ) throws IO Exception {", "Path file Path = Paths . get ( path ( ) ) ;", "if ( Files . exists ( file Path ) ) {", "logger . info ( STR_ , file Path ) ;", "return Files . new Input Stream ( file Path ) ; }", "URL resource Url = Resources . get Resource ( path ( ) ) ;", "logger . info ( STR_ , resource Url ) ;", "return resource Url . open Stream ( ) ; }"]}
{"ids": "42774", "code": ["public static String replace Characters ( final Conversion Method conversion Method , final String input , final int from Character , final int to Character , final String wrap ) {", "String converted Text = input ;", "for ( int i = from Character ; i <= to Character ; i ++ ) {", "final String character To Replace = new String ( Character . to Chars ( i ) ) ;", "if ( wrap != null ) {", "converted Text = converted Text . replace ( character To Replace , wrap + convert Text ( conversion Method , character To Replace ) + wrap ) ; }", "else {", "converted Text = converted Text . replace ( character To Replace , convert Text ( conversion Method , character To Replace ) ) ; } }", "return converted Text ; }"]}
{"ids": "42746", "code": ["public static byte [ ] hmac sha 1 ( byte [ ] key Bytes , byte [ ] text ) throws No Such Algorithm Exception , Invalid Key Exception {", "Mac hmac Sha 1 ;", "try {", "hmac Sha 1 = Mac . get Instance ( STR_ ) ; }", "catch ( final No Such Algorithm Exception nsae ) {", "hmac Sha 1 = Mac . get Instance ( STR_ ) ; }", "final Secret Key Spec mac Key = new Secret Key Spec ( key Bytes , STR_ ) ;", "hmac Sha 1 . init ( mac Key ) ;", "return hmac Sha 1 . do Final ( text ) ; }"]}
{"ids": "63189", "code": ["public static byte [ ] read Bytes And Close ( Input Stream in , int length ) throws IO Exception {", "try {", "if ( length <= NUM_ ) {", "length = Integer . MAX VALUE ; }", "int block = Math . min ( Constants . IO BUFFER SIZE , length ) ;", "Byte Array Output Stream out = new Byte Array Output Stream ( block ) ;", "copy ( in , out , length ) ;", "return out . to Byte Array ( ) ; }", "catch ( Exception e ) {", "throw Db Exception . convert To IO Exception ( e ) ; }", "finally {", "in . close ( ) ; } }"]}
{"ids": "46189", "code": ["public javax . naming . Binding next ( ) throws Naming Exception {", "if ( more && counter >= binding List . value . length ) {", "get More ( ) ; }", "if ( more && counter < binding List . value . length ) {", "org . omg . Cos Naming . Binding bndg = binding List . value [ counter ] ;", "counter ++ ;", "return map Binding ( bndg ) ; }", "else {", "throw new No Such Element Exception ( ) ; } }"]}
{"ids": "33040", "code": ["protected < T extends AST Node > T move Node ( T old Node , AST Rewrite rewrite ) {", "T moved Node ;", "if ( AST Nodes . is Existing Node ( old Node ) ) moved Node = AST Nodes . create Move Target ( rewrite , old Node ) ;", "else moved Node = AST Nodes . copy Subtree ( rewrite . get AST ( ) , old Node ) ;", "return moved Node ; }"]}
{"ids": "68081", "code": ["@ Ignore @ Test public void should Be Faster When Running Processing In Parallel ( ) throws Exception {", "test Mojo With Configurable Wro Manager Factory With Valid Config File Set ( ) ;", "final long begin = System . current Time Millis ( ) ;", "victim . set Parallel Processing ( false ) ;", "test Mojo With Configurable Wro Manager Factory With Valid Config File Set ( ) ;", "final long end Serial = System . current Time Millis ( ) ;", "victim . set Parallel Processing ( true ) ;", "test Mojo With Configurable Wro Manager Factory With Valid Config File Set ( ) ;", "final long end Parallel = System . current Time Millis ( ) ;", "final long serial = end Serial - begin ;", "final long parallel = end Parallel - end Serial ;", "LOG . info ( STR_ , serial ) ;", "LOG . info ( STR_ , parallel ) ;", "assert True ( String . format ( STR_ , serial , parallel ) , serial > parallel ) ; }"]}
{"ids": "52132", "code": ["public static Tetrad Matrix incomplete Cholesky Gram Matrix ( List < Kernel > kernels , Data Set dataset , List < Node > nodes , double precision ) {", "if ( precision <= NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "int m = dataset . get Num Rows ( ) ;", "Tetrad Matrix G = new Tetrad Matrix ( m , m ) ;", "double [ ] Dadv = new double [ m ] ;", "int [ ] p = new int [ m ] ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "Dadv [ i ] = evaluate ( kernels , dataset , nodes , i , i ) ;", "p [ i ] = i ; }", "int cols = m ;", "for ( int k = NUM_ ; k < m ; k ++ ) {", "double best = Dadv [ k ] ;", "int best Ind = k ;", "for ( int j = ( k + NUM_ ) ; j < m ; j ++ ) {", "if ( Dadv [ j ] > best / NUM_ ) {", "best = Dadv [ j ] ;", "best Ind = j ; } }", "if ( best < precision ) {", "cols = k - NUM_ ;", "break ; }", "int pk = p [ k ] ;", "p [ k ] = p [ best Ind ] ;", "p [ best Ind ] = pk ;", "double dk = Dadv [ k ] ;", "Dadv [ k ] = Dadv [ best Ind ] ;", "Dadv [ best Ind ] = dk ;", "for ( int j = NUM_ ; j < k ; j ++ ) {", "double gk = G . get ( k , j ) ;", "G . set ( k , j , G . get ( best Ind , j ) ) ;", "G . set ( best Ind , j , gk ) ; }", "double diag = Math . sqrt ( Dadv [ k ] ) ;", "G . set ( k , k , diag ) ;", "for ( int j = ( k + NUM_ ) ; j < m ; j ++ ) {", "double s = NUM_ ;", "for ( int i = NUM_ ; i < k ; i ++ ) {", "s += G . get ( j , i ) * G . get ( k , i ) ; }", "G . set ( j , k , ( evaluate ( kernels , dataset , nodes , p [ j ] , p [ k ] ) - s ) / diag ) ; }", "for ( int j = ( k + NUM_ ) ; j < m ; j ++ ) {", "Dadv [ j ] -= Math . pow ( G . get ( j , k ) , NUM_ ) ; }", "Dadv [ k ] = NUM_ ; }", "Tetrad Matrix Gm = new Tetrad Matrix ( m , cols ) ;", "for ( int i = NUM_ ; i < m ; i ++ ) {", "for ( int j = NUM_ ; j < cols ; j ++ ) {", "Gm . set ( i , j , G . get ( i , j ) ) ; } }", "return Gm ; }"]}
{"ids": "51287", "code": ["Format Specifier Parser ( String format ) {", "this . format = format ;", "this . length = format . length ( ) ; }"]}
{"ids": "73574", "code": ["public void add Consumer Type ( Attribute Type type ) {", "if ( ! consumer Types . contains ( type ) ) {", "consumer Types . add ( type ) ; } }"]}
{"ids": "72104", "code": ["public final void print Verbose Message ( final Localizable Message msg ) {", "if ( is Verbose ( ) ) {", "out . println ( wrap ( msg ) ) ; } }"]}
{"ids": "33011", "code": ["private static void order Matches ( List < Variable > type Matches , String param Name ) {", "if ( type Matches != null ) Collections . sort ( type Matches , new Match Comparator ( param Name ) ) ; }"]}
{"ids": "83064", "code": ["Sorted Set < String > types To Import ( ) {", "Sorted Set < String > types To Import = new Tree Set < String > ( ) ;", "for ( Map . Entry < String , Spelling > entry : imports . entry Set ( ) ) {", "if ( entry . get Value ( ) . import It ) {", "types To Import . add ( entry . get Key ( ) ) ; } }", "return types To Import ; }"]}
{"ids": "16843", "code": ["@ Override public boolean is Scraped ( ) {", "if ( ! scraped ) {", "if ( ! plot . is Empty ( ) && ! ( year . is Empty ( ) || year . equals ( STR_ ) ) && ! ( genres == null || genres . size ( ) == NUM_ ) && ! ( actors == null || actors . size ( ) == NUM_ ) ) {", "return true ; } }", "return scraped ; }"]}
{"ids": "53841", "code": ["public Noise Tag Lda Model ( Input Stream in ) throws IO Exception {", "GZIP Input Stream zipin = new GZIP Input Stream ( in ) ;", "Buffered Input Stream bin = new Buffered Input Stream ( zipin ) ;", "Data Input Stream datain = new Data Input Stream ( bin ) ;", "num Topics = datain . read Int ( ) ;", "int num Words = datain . read Int ( ) ;", "alpha = datain . read Double ( ) ;", "beta = datain . read Double ( ) ;", "locked = datain . read Boolean ( ) ;", "wnz = new int [ num Topics ] ;", "Arrays . fill ( wnz , NUM_ ) ;", "for ( int i = NUM_ ; i < num Words ; i ++ ) {", "String word = datain . read UTF ( ) ;", "int [ ] count = new int [ num Topics ] ;", "for ( int j = NUM_ ; j < num Topics ; j ++ ) {", "count [ j ] = datain . read Int ( ) ;", "wnz [ j ] += count [ j ] ;", "nw += count [ j ] ; }", "nwz . put ( word , count ) ; }", "tnz = new int [ num Topics + NUM_ ] ;", "Arrays . fill ( tnz , NUM_ ) ;", "int num Tags = datain . read Int ( ) ;", "eta = datain . read Double ( ) ;", "for ( int i = NUM_ ; i < num Tags ; i ++ ) {", "String word = datain . read UTF ( ) ;", "int [ ] count = new int [ num Topics + NUM_ ] ;", "for ( int j = NUM_ ; j < num Topics + NUM_ ; j ++ ) {", "count [ j ] = datain . read Int ( ) ;", "tnz [ j ] += count [ j ] ;", "nt += count [ j ] ; }", "ntz . put ( word , count ) ; }", "noise = num Topics ; }"]}
{"ids": "35960", "code": ["public void check ( final int api ) {", "if ( api == Opcodes . ASM 4 ) {", "if ( visible Type Annotations != null && visible Type Annotations . size ( ) > NUM_ ) {", "throw new Runtime Exception ( ) ; }", "if ( invisible Type Annotations != null && invisible Type Annotations . size ( ) > NUM_ ) {", "throw new Runtime Exception ( ) ; }", "for ( Field Node f : fields ) {", "f . check ( api ) ; }", "for ( Method Node m : methods ) {", "m . check ( api ) ; } } }"]}
{"ids": "65266", "code": ["public static String RTF Enc ( String s ) {", "int ln = s . length ( ) ;", "int first Esc Idx = - NUM_ ;", "int last Esc Idx = NUM_ ;", "int plus Out Ln = NUM_ ;", "for ( int i = NUM_ ; i < ln ; i ++ ) {", "char c = s . char At ( i ) ;", "if ( c == STR_ || c == STR_ || c == STR_ ) {", "if ( first Esc Idx == - NUM_ ) {", "first Esc Idx = i ; }", "last Esc Idx = i ;", "plus Out Ln ++ ; } }", "if ( first Esc Idx == - NUM_ ) {", "return s ; }", "else {", "char [ ] esced = new char [ ln + plus Out Ln ] ;", "if ( first Esc Idx != NUM_ ) {", "s . get Chars ( NUM_ , first Esc Idx , esced , NUM_ ) ; }", "int dst = first Esc Idx ;", "for ( int i = first Esc Idx ; i <= last Esc Idx ; i ++ ) {", "char c = s . char At ( i ) ;", "if ( c == STR_ || c == STR_ || c == STR_ ) {", "esced [ dst ++ ] = STR_ ; }", "esced [ dst ++ ] = c ; }", "if ( last Esc Idx != ln - NUM_ ) {", "s . get Chars ( last Esc Idx + NUM_ , ln , esced , dst ) ; }", "return String . value Of ( esced ) ; } }"]}
{"ids": "3826", "code": ["public Inet Network ( Inet Address inet Address , int subnet Bits ) {", "inet Address = inet Address ;", "address = inet Address . get Address ( ) ;", "if ( subnet Bits < NUM_ ) subnet Bits = NUM_ * address . length ;", "subnet Bits = subnet Bits ;", "subnet Byte = subnet Bits / NUM_ ;", "subnet Mask = ~ ( ( NUM_ << ( NUM_ - subnet Bits % NUM_ ) ) - NUM_ ) & NUM_ ; }"]}
{"ids": "60694", "code": ["public boolean equal Array Value ( Object other Value ) {", "if ( value instanceof Object [ ] && other Value instanceof Object [ ] ) {", "return Arrays . equals ( ( Object [ ] ) value , ( Object [ ] ) other Value ) ; }", "Class type = value . get Class ( ) ;", "if ( type != other Value . get Class ( ) ) {", "return false ; }", "if ( type == int [ ] . class ) {", "return Arrays . equals ( ( int [ ] ) value , ( int [ ] ) other Value ) ; }", "else if ( type == byte [ ] . class ) {", "return Arrays . equals ( ( byte [ ] ) value , ( byte [ ] ) other Value ) ; }", "else if ( type == short [ ] . class ) {", "return Arrays . equals ( ( short [ ] ) value , ( short [ ] ) other Value ) ; }", "else if ( type == long [ ] . class ) {", "return Arrays . equals ( ( long [ ] ) value , ( long [ ] ) other Value ) ; }", "else if ( type == char [ ] . class ) {", "return Arrays . equals ( ( char [ ] ) value , ( char [ ] ) other Value ) ; }", "else if ( type == boolean [ ] . class ) {", "return Arrays . equals ( ( boolean [ ] ) value , ( boolean [ ] ) other Value ) ; }", "else if ( type == float [ ] . class ) {", "return Arrays . equals ( ( float [ ] ) value , ( float [ ] ) other Value ) ; }", "else if ( type == double [ ] . class ) {", "return Arrays . equals ( ( double [ ] ) value , ( double [ ] ) other Value ) ; }", "return false ; }"]}
{"ids": "86458", "code": ["@ Override public Hierarchy Wrapper Operation create Sub Operation ( ) {", "return new To String Operation ( builder , base Indent ) ; }"]}
{"ids": "9145", "code": ["protected final boolean execute ( ) throws Ade Exception {", "logger . info ( STR_ + m request Type . name ( ) ) ;", "final long start = System . current Time Millis ( ) ;", "final boolean success = do Control Logic ( ) ;", "final long total = System . current Time Millis ( ) - start ;", "logger . info ( m request Type . name ( ) + ( success ? STR_ : STR_ ) + STR_ + milliseconds To Human Time ( total ) ) ;", "return success ; }"]}
{"ids": "73681", "code": ["private boolean valid Consist ( ) {", "int c N = valid Consist ( consist Text Field . get Text ( ) ) ;", "if ( c N == - NUM_ ) {", "consist Status . set Text ( rb . get String ( STR_ ) ) ;", "J Option Pane . show Message Dialog ( this , rb . get String ( STR_ ) , rb . get String ( STR_ ) , J Option Pane . ERROR MESSAGE ) ;", "return false ; }", "return true ; }"]}
{"ids": "55379", "code": ["private void activity ( ) {", "connection Checked Count = NUM_ ; }"]}
{"ids": "7332", "code": ["public static Schedule Spec compute Values ( Object [ ] args ) throws Schedule Parameter Exception {", "if ( args . length <= NUM_ || args . length >= NUM_ ) {", "throw new Schedule Parameter Exception ( STR_ + args . length ) ; }", "Enum Map < Schedule Unit , Sorted Set < Integer > > unit Map = new Enum Map < Schedule Unit , Sorted Set < Integer > > ( Schedule Unit . class ) ;", "Object minutes = args [ NUM_ ] ;", "Object hours = args [ NUM_ ] ;", "Object days Of Month = args [ NUM_ ] ;", "Object months = args [ NUM_ ] ;", "Object days Of Week = args [ NUM_ ] ;", "unit Map . put ( Schedule Unit . MINUTES , compute Values ( minutes , Schedule Unit . MINUTES ) ) ;", "unit Map . put ( Schedule Unit . HOURS , compute Values ( hours , Schedule Unit . HOURS ) ) ;", "Sorted Set < Integer > result Months = compute Values ( months , Schedule Unit . MONTHS ) ;", "if ( days Of Week instanceof Cron Parameter && days Of Month instanceof Cron Parameter ) {", "throw new Schedule Parameter Exception ( STR_ ) ; }", "if ( result Months != null && result Months . size ( ) == NUM_ && ( result Months . first ( ) instanceof Integer ) ) {", "Cron Parameter parameter = null ;", "if ( days Of Month instanceof Cron Parameter ) {", "parameter = ( ( Cron Parameter ) days Of Month ) ; }", "else if ( days Of Week instanceof Cron Parameter ) {", "parameter = ( ( Cron Parameter ) days Of Week ) ; }", "if ( parameter != null ) {", "parameter . set Month ( result Months . first ( ) ) ; } }", "Sorted Set < Integer > result Days Of Week = compute Values ( days Of Week , Schedule Unit . DAYS OF WEEK ) ;", "Sorted Set < Integer > result Days Of Month = compute Values ( days Of Month , Schedule Unit . DAYS OF MONTH ) ;", "if ( result Days Of Week != null && result Days Of Week . size ( ) == NUM_ && ( result Days Of Week . first ( ) instanceof Integer ) ) {", "if ( result Days Of Week . first ( ) > NUM_ ) {", "if ( result Days Of Month != null ) {", "throw new Schedule Parameter Exception ( STR_ ) ; }", "result Days Of Month = result Days Of Week ;", "result Days Of Week = null ; } }", "if ( result Days Of Month != null && result Days Of Month . size ( ) == NUM_ && ( result Days Of Month . first ( ) instanceof Integer ) ) {", "if ( result Days Of Week != null ) {", "throw new Schedule Parameter Exception ( STR_ ) ; } }", "unit Map . put ( Schedule Unit . DAYS OF WEEK , result Days Of Week ) ;", "unit Map . put ( Schedule Unit . DAYS OF MONTH , result Days Of Month ) ;", "unit Map . put ( Schedule Unit . MONTHS , result Months ) ;", "if ( args . length > NUM_ ) {", "unit Map . put ( Schedule Unit . SECONDS , compute Values ( args [ NUM_ ] , Schedule Unit . SECONDS ) ) ; }", "String timezone = null ;", "if ( args . length > NUM_ ) {", "if ( ! ( args [ NUM_ ] instanceof Wildcard Parameter ) ) {", "if ( ! ( args [ NUM_ ] instanceof String ) ) {", "throw new Schedule Parameter Exception ( STR_ + args [ NUM_ ] + STR_ ) ; }", "timezone = ( String ) args [ NUM_ ] ; } }", "Cron Parameter optional Day Of Month Op = get Optional Special Op ( days Of Month ) ;", "Cron Parameter optional Day Of Week Op = get Optional Special Op ( days Of Week ) ;", "return new Schedule Spec ( unit Map , timezone , optional Day Of Month Op , optional Day Of Week Op ) ; }"]}
{"ids": "5801", "code": ["public void remove ( int position ) {", "m Data . remove ( position ) ;", "notify Item Removed ( position + get Header Layout Count ( ) ) ; }"]}
{"ids": "84005", "code": ["public Async Buffered Output Stream ( Output Stream out , int buf Size , int max Buffers ) {", "super ( out ) ;", "buffers = new Concurrent Linked Deque < > ( ) ;", "buf = new byte [ buf Size ] ;", "flusher Thread . start ( ) ; }"]}
{"ids": "50294", "code": ["public boolean startlist Contains ( String x ) {", "if ( startwords == null ) return true ;", "return startwords . contains ( x ) ; }"]}
{"ids": "16905", "code": ["private void close Media Info ( ) {", "if ( media Info != null ) {", "media Info . close ( ) ;", "media Info = null ; }", "mi Snapshot = null ; }"]}
{"ids": "4687", "code": ["public void add Header ( final Header header ) {", "headers . add ( header ) ; }"]}
{"ids": "31347", "code": ["private void read Version ( Input Node node , Object source , Label label ) throws Exception {", "Object value = read Instance ( node , source , label ) ;", "Class expect = type . get Type ( ) ;", "if ( value != null ) {", "Version version = context . get Version ( expect ) ;", "Double actual = version . revision ( ) ;", "if ( ! value . equals ( revision ) ) {", "revision . compare ( actual , value ) ; } } }"]}
{"ids": "31750", "code": ["protected Ignite start Grid With Igfs ( String grid Name , String igfs Name , Igfs Mode mode , @ Nullable Igfs Secondary File System secondary Fs , @ Nullable Igfs Ipc Endpoint Configuration rest Cfg ) throws Exception {", "File System Configuration igfs Cfg = new File System Configuration ( ) ;", "igfs Cfg . set Data Cache Name ( STR_ ) ;", "igfs Cfg . set Meta Cache Name ( STR_ ) ;", "igfs Cfg . set Name ( igfs Name ) ;", "igfs Cfg . set Block Size ( IGFS BLOCK SIZE ) ;", "igfs Cfg . set Default Mode ( mode ) ;", "igfs Cfg . set Ipc Endpoint Configuration ( rest Cfg ) ;", "igfs Cfg . set Secondary File System ( secondary Fs ) ;", "igfs Cfg . set Prefetch Blocks ( PREFETCH BLOCKS ) ;", "igfs Cfg . set Sequential Reads Before Prefetch ( SEQ READS BEFORE PREFETCH ) ;", "Cache Configuration data Cache Cfg = default Cache Configuration ( ) ;", "data Cache Cfg . set Name ( STR_ ) ;", "data Cache Cfg . set Cache Mode ( PARTITIONED ) ;", "data Cache Cfg . set Near Configuration ( null ) ;", "data Cache Cfg . set Write Synchronization Mode ( Cache Write Synchronization Mode . FULL SYNC ) ;", "data Cache Cfg . set Affinity Mapper ( new Igfs Group Data Blocks Key Mapper ( NUM_ ) ) ;", "data Cache Cfg . set Backups ( NUM_ ) ;", "data Cache Cfg . set Atomicity Mode ( TRANSACTIONAL ) ;", "data Cache Cfg . set Off Heap Max Memory ( NUM_ ) ;", "Cache Configuration meta Cache Cfg = default Cache Configuration ( ) ;", "meta Cache Cfg . set Name ( STR_ ) ;", "meta Cache Cfg . set Cache Mode ( REPLICATED ) ;", "meta Cache Cfg . set Write Synchronization Mode ( Cache Write Synchronization Mode . FULL SYNC ) ;", "meta Cache Cfg . set Atomicity Mode ( TRANSACTIONAL ) ;", "Ignite Configuration cfg = new Ignite Configuration ( ) ;", "cfg . set Grid Name ( grid Name ) ;", "Tcp Discovery Spi disco Spi = new Tcp Discovery Spi ( ) ;", "disco Spi . set Ip Finder ( new Tcp Discovery Vm Ip Finder ( true ) ) ;", "cfg . set Discovery Spi ( disco Spi ) ;", "cfg . set Cache Configuration ( data Cache Cfg , meta Cache Cfg ) ;", "cfg . set File System Configuration ( igfs Cfg ) ;", "cfg . set Local Host ( STR_ ) ;", "cfg . set Connector Configuration ( null ) ;", "return G . start ( cfg ) ; }"]}
{"ids": "83063", "code": ["Type Simplifier ( Types type Utils , String package Name , Set < Type Mirror > types , Type Mirror base ) {", "this . type Utils = type Utils ;", "Set < Type Mirror > types Plus Base = new Type Mirror Set ( types ) ;", "if ( base != null ) {", "types Plus Base . add ( base ) ; }", "Set < Type Mirror > referenced = referenced Class Types ( type Utils , types Plus Base ) ;", "Set < Type Mirror > defined = non Private Declared Types ( type Utils , base ) ;", "this . imports = find Imports ( type Utils , package Name , referenced , defined ) ; }"]}
{"ids": "20487", "code": ["private List < Statistics > remove Failed ( List < Statistics > statistics ) {", "List < Statistics > result = new Array List < > ( ) ;", "for ( Statistics statistic : statistics ) {", "if ( statistic . get Succeeded ( ) ) result . add ( statistic ) ; }", "return result ; }"]}
{"ids": "78473", "code": ["public void add Associated Gefahr ( Gefaehrdungs Umsetzung gefaehrdung ) {", "if ( ! associated Gefaehrdungen . contains ( gefaehrdung ) ) {", "associated Gefaehrdungen . add ( gefaehrdung ) ; } }"]}
{"ids": "79087", "code": ["public static byte [ ] pack Byte Buffer Into Single Byte Array ( Byte Buffer [ ] byte Buffer Arr ) {", "if ( null == byte Buffer Arr || byte Buffer Arr . length == NUM_ ) {", "return null ; }", "int no Of Col = byte Buffer Arr . length ;", "short to Determine Length Of Byte Arr = NUM_ ;", "short offset Len = ( short ) ( no Of Col * NUM_ + to Determine Length Of Byte Arr ) ;", "int total Bytes = calculate Total Bytes ( byte Buffer Arr ) + offset Len ;", "Byte Buffer buffer = Byte Buffer . allocate ( total Bytes ) ;", "buffer . put Short ( ( short ) ( total Bytes - to Determine Length Of Byte Arr ) ) ;", "buffer . put Short ( offset Len ) ;", "for ( int index = NUM_ ; index < byte Buffer Arr . length - NUM_ ; index ++ ) {", "Byte Buffer individual Col = byte Buffer Arr [ index ] ;", "int no Of Bytes = individual Col . capacity ( ) ;", "buffer . put Short ( ( short ) ( offset Len + no Of Bytes ) ) ;", "offset Len += no Of Bytes ;", "individual Col . rewind ( ) ; }", "for ( int index = NUM_ ; index < byte Buffer Arr . length ; index ++ ) {", "Byte Buffer individual Col = byte Buffer Arr [ index ] ;", "buffer . put ( individual Col . array ( ) ) ; }", "buffer . rewind ( ) ;", "return buffer . array ( ) ; }"]}
{"ids": "34917", "code": ["public void connect ( Socket Address endpoint , int timeout ) throws IO Exception {", "if ( endpoint == null ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( timeout < NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( is Closed ( ) ) throw new Socket Exception ( STR_ ) ;", "if ( ! old Impl && is Connected ( ) ) throw new Socket Exception ( STR_ ) ;", "if ( ! ( endpoint instanceof Inet Socket Address ) ) throw new Illegal Argument Exception ( STR_ ) ;", "Inet Socket Address epoint = ( Inet Socket Address ) endpoint ;", "Inet Address addr = epoint . get Address ( ) ;", "int port = epoint . get Port ( ) ;", "check Address ( addr , STR_ ) ;", "Security Manager security = System . get Security Manager ( ) ;", "if ( security != null ) {", "if ( epoint . is Unresolved ( ) ) security . check Connect ( epoint . get Host Name ( ) , port ) ;", "else security . check Connect ( addr . get Host Address ( ) , port ) ; }", "if ( ! created ) create Impl ( true ) ;", "if ( ! old Impl ) impl . connect ( epoint , timeout ) ;", "else if ( timeout == NUM_ ) {", "if ( epoint . is Unresolved ( ) ) impl . connect ( addr . get Host Name ( ) , port ) ;", "else impl . connect ( addr , port ) ; }", "else throw new Unsupported Operation Exception ( STR_ ) ;", "connected = true ;", "bound = true ; }"]}
{"ids": "29631", "code": ["private Pair < Hash Step Type , Hash Chain Type > fetch Hash Step ( String uri , Hash Chain Type current Chain ) throws Exception {", "int hash Index = uri . index Of ( STR_ ) ;", "if ( hash Index < NUM_ ) {", "throw new Coded Exception ( X MALFORMED HASH CHAIN , STR_ , uri ) ; }", "String base Uri = uri . substring ( NUM_ , hash Index ) ;", "String fragment = uri . substring ( hash Index + NUM_ ) ;", "if ( fragment . is Empty ( ) ) {", "throw new Coded Exception ( X MALFORMED HASH CHAIN , STR_ , uri ) ; }", "Hash Chain Type hash Chain ;", "if ( base Uri . is Empty ( ) ) {", "hash Chain = current Chain ; }", "else {", "hash Chain = get Hash Chain ( base Uri ) ; }", "for ( Hash Step Type step : hash Chain . get Hash Step ( ) ) {", "if ( fragment . equals ( step . get Id ( ) ) ) {", "return new Immutable Pair < > ( step , hash Chain ) ; } }", "throw new Coded Exception ( X MALFORMED HASH CHAIN , STR_ , uri ) ; }"]}
{"ids": "32167", "code": ["@ Suppress Warnings ( STR_ ) public static boolean load By Current Classloader ( String cls Name ) {", "if ( cls Name . starts With ( STR_ ) ) return true ;", "if ( cls Name . starts With ( STR_ ) ) {", "if ( cls Name . contains ( STR_ ) || cls Name . contains ( STR_ ) || cls Name . contains ( STR_ ) ) return true ; }", "return false ; }"]}
{"ids": "67426", "code": ["public void decrement Targets Count All ( ) {", "final long decrement And Get = targets Count All . decrement And Get ( ) ;", "if ( decrement And Get < NUM_ ) {", "targets Count All . set ( NUM_ ) ; } }"]}
{"ids": "56762", "code": ["private void add Not Available Business Object Data Statuses ( List < Business Object Data Status > not Available Statuses , List < Storage Unit Entity > storage Unit Entities , Set < Business Object Data Entity > archived Business Object Data Entities ) {", "for ( Storage Unit Entity storage Unit Entity : storage Unit Entities ) {", "not Available Statuses . add ( create Not Available Business Object Data Status ( storage Unit Entity , archived Business Object Data Entities ) ) ; } }"]}
{"ids": "56857", "code": ["private List < Jdbc Statement > create Default Query Jdbc Statements ( ) {", "List < Jdbc Statement > jdbc Statements = new Array List < > ( ) ; {", "Jdbc Statement jdbc Statement = new Jdbc Statement ( ) ;", "jdbc Statement . set Type ( Jdbc Statement Type . QUERY ) ;", "jdbc Statement . set Sql ( Mock Jdbc Operations . CASE 1 SQL ) ;", "jdbc Statements . add ( jdbc Statement ) ; }", "return jdbc Statements ; }"]}
{"ids": "41323", "code": ["public static boolean is Valid ( Date expiration Date ) {", "Date current Date = new Date ( ) ;", "String formatted Date = date Format . format ( current Date ) ;", "current Date = convert Date ( formatted Date ) ;", "boolean is Expired = current Date . after ( expiration Date ) ;", "boolean is Equal = current Date . equals ( expiration Date ) ;", "if ( is Expired == true || is Equal == true ) {", "return true ; }", "return false ; }"]}
{"ids": "25262", "code": ["public long content Length ( ) {", "long size ;", "try {", "size = Long . parse Long ( request . get Header ( File Upload . CONTENT LENGTH ) ) ; }", "catch ( Number Format Exception e ) {", "size = request . get Content Length ( ) ; }", "return size ; }"]}
{"ids": "44180", "code": ["public Check Box add Listener ( Listener listener ) {", "if ( listener != null && ! listeners . contains ( listener ) ) {", "listeners . add ( listener ) ; }", "return this ; }"]}
{"ids": "64460", "code": ["private void take Picture ( ) {", "Log . d ( TAG , STR_ ) ;", "lock Focus ( ) ; }"]}
{"ids": "46305", "code": ["private static int [ ] [ ] parse ( String members ) {", "Vector the Ranges = new Vector ( ) ;", "int n = ( members == null ? NUM_ : members . length ( ) ) ;", "int i = NUM_ ;", "int state = NUM_ ;", "int lb = NUM_ ;", "int ub = NUM_ ;", "char c ;", "int digit ;", "while ( i < n ) {", "c = members . char At ( i ++ ) ;", "switch ( state ) {", "case NUM_ :", "if ( Character . is Whitespace ( c ) ) {", "state = NUM_ ; }", "else if ( ( digit = Character . digit ( c , NUM_ ) ) != - NUM_ ) {", "lb = digit ;", "state = NUM_ ; }", "else {", "throw new Illegal Argument Exception ( ) ; }", "break ;", "case NUM_ :", "if ( Character . is Whitespace ( c ) ) {", "state = NUM_ ; }", "else if ( ( digit = Character . digit ( c , NUM_ ) ) != - NUM_ ) {", "lb = NUM_ * lb + digit ;", "state = NUM_ ; }", "else if ( c == STR_ || c == STR_ ) {", "state = NUM_ ; }", "else if ( c == STR_ ) {", "accumulate ( the Ranges , lb , lb ) ;", "state = NUM_ ; }", "else {", "throw new Illegal Argument Exception ( ) ; }", "break ;", "case NUM_ :", "if ( Character . is Whitespace ( c ) ) {", "state = NUM_ ; }", "else if ( c == STR_ || c == STR_ ) {", "state = NUM_ ; }", "else if ( c == STR_ ) {", "accumulate ( the Ranges , lb , lb ) ;", "state = NUM_ ; }", "else {", "throw new Illegal Argument Exception ( ) ; }", "break ;", "case NUM_ :", "if ( Character . is Whitespace ( c ) ) {", "state = NUM_ ; }", "else if ( ( digit = Character . digit ( c , NUM_ ) ) != - NUM_ ) {", "ub = digit ;", "state = NUM_ ; }", "else {", "throw new Illegal Argument Exception ( ) ; }", "break ;", "case NUM_ :", "if ( Character . is Whitespace ( c ) ) {", "state = NUM_ ; }", "else if ( ( digit = Character . digit ( c , NUM_ ) ) != - NUM_ ) {", "ub = NUM_ * ub + digit ;", "state = NUM_ ; }", "else if ( c == STR_ ) {", "accumulate ( the Ranges , lb , ub ) ;", "state = NUM_ ; }", "else {", "throw new Illegal Argument Exception ( ) ; }", "break ;", "case NUM_ :", "if ( Character . is Whitespace ( c ) ) {", "state = NUM_ ; }", "else if ( c == STR_ ) {", "accumulate ( the Ranges , lb , ub ) ;", "state = NUM_ ; }", "else {", "throw new Illegal Argument Exception ( ) ; }", "break ;", "case NUM_ :", "if ( Character . is Whitespace ( c ) ) {", "state = NUM_ ; }", "else if ( ( digit = Character . digit ( c , NUM_ ) ) != - NUM_ ) {", "lb = digit ;", "state = NUM_ ; }", "else {", "throw new Illegal Argument Exception ( ) ; }", "break ; } }", "switch ( state ) {", "case NUM_ :", "break ;", "case NUM_ :", "case NUM_ :", "accumulate ( the Ranges , lb , lb ) ;", "break ;", "case NUM_ :", "case NUM_ :", "accumulate ( the Ranges , lb , ub ) ;", "break ;", "case NUM_ :", "case NUM_ :", "throw new Illegal Argument Exception ( ) ; }", "return canonical Array Form ( the Ranges ) ; }"]}
{"ids": "32698", "code": ["public static String show Dialog ( final Component component , final String title , final Object message , final String ... buttons ) {", "return show Dialog ( J Option Pane . get Frame For Component ( component ) , title , message , J Option Pane . PLAIN MESSAGE , buttons ) ; }"]}
{"ids": "85593", "code": ["protected void send Message ( String handler , List < ? > arguments ) {", "owner Message . add Event ( Type . CLIENT SEND MESSAGE , handler , arguments ) ;", "sync Events . add ( new Shared Object Event ( Type . CLIENT SEND MESSAGE , handler , arguments ) ) ;", "send Stats . increment And Get ( ) ; }"]}
{"ids": "83995", "code": ["public void task Now ( final Runnable r , boolean async ) {", "if ( async ) {", "async ( r ) ; }", "else if ( r != null ) {", "r . run ( ) ; } }"]}
{"ids": "68801", "code": ["public void reset ( ) {", "cur . reset ( ) ;", "line . reset ( ) ;", "inuse = true ;", "word . set Length ( NUM_ ) ; }"]}
{"ids": "46125", "code": ["protected void engine Set Mode ( String mode ) throws No Such Algorithm Exception {", "if ( ( mode != null ) && ( ! mode . equals Ignore Case ( STR_ ) ) ) {", "throw new No Such Algorithm Exception ( STR_ + mode ) ; } }"]}
{"ids": "2319", "code": ["private void move Pos ( float delta Y ) {", "if ( ( delta Y < NUM_ && m Ptr Indicator . is In Start Position ( ) ) ) {", "if ( DEBUG ) {", "Ptr C Log . e ( LOG TAG , String . format ( STR_ ) ) ; }", "return ; }", "int to = m Ptr Indicator . get Current Pos Y ( ) + ( int ) delta Y ;", "if ( m Ptr Indicator . will Over Top ( to ) ) {", "if ( DEBUG ) {", "Ptr C Log . e ( LOG TAG , String . format ( STR_ ) ) ; }", "to = Ptr Indicator . POS START ; }", "m Ptr Indicator . set Current Pos ( to ) ;", "int change = to - m Ptr Indicator . get Last Pos Y ( ) ;", "update Pos ( change ) ; }"]}
{"ids": "79365", "code": ["public static List < ? extends Element > child Element List ( Document Fragment fragment ) {", "if ( fragment == null ) return null ;", "List < Element > elements = new Linked List < Element > ( ) ;", "Node node = fragment . get First Child ( ) ;", "if ( node != null ) {", "do {", "if ( node . get Node Type ( ) == Node . ELEMENT NODE ) {", "Element child Element = ( Element ) node ;", "elements . add ( child Element ) ; } }", "while ( ( node = node . get Next Sibling ( ) ) != null ) ; }", "return elements ; }"]}
{"ids": "61635", "code": ["public void simulate Method ( Soot Method method , Reference Variable this Var , Reference Variable return Var , Reference Variable params [ ] ) {", "String sub Signature = method . get Sub Signature ( ) ;", "if ( sub Signature . equals ( STR_ ) ) {", "java lang reflect Field set ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang reflect Field get ( method , this Var , return Var , params ) ;", "return ; }", "else {", "default Method ( method , this Var , return Var , params ) ;", "return ; } }"]}
{"ids": "56220", "code": ["public Float Array resize ( Float Array array , long size ) {", "if ( array instanceof Big Float Array ) {", "return resize In Place ( ( Big Float Array ) array , size ) ; }", "else {", "Abstract Array arr = ( Abstract Array ) array ;", "final Float Array new Array = new Float Array ( size , arr . clear On Resize ) ;", "for ( long i = NUM_ , end = Math . min ( size , array . size ( ) ) ; i < end ; ++ i ) {", "new Array . set ( i , array . get ( i ) ) ; }", "arr . close ( ) ;", "return new Array ; } }"]}
{"ids": "4717", "code": ["@ Override public boolean domain Match ( final String host , String domain ) {", "if ( host . equals ( domain ) ) {", "return true ; }", "if ( ! domain . starts With ( STR_ ) ) {", "domain = STR_ + domain ; }", "return host . ends With ( domain ) || host . equals ( domain . substring ( NUM_ ) ) ; }"]}
{"ids": "62145", "code": ["public boolean is Dirty ( String key ) {", "return dirty Keys . contains ( key ) ; }"]}
{"ids": "3660", "code": ["final public void println ( float v ) {", "Writer out = this . out ;", "if ( out == null ) return ;", "String s = String . value Of ( v ) ;", "try {", "out . write ( s , NUM_ , s . length ( ) ) ;", "out . write ( newline , NUM_ , newline . length ) ; }", "catch ( IO Exception e ) {", "log . log ( Level . FINE , e . to String ( ) , e ) ; } }"]}
{"ids": "64444", "code": ["public static Big Integer size Of Directory As Big Integer ( File directory ) {", "check Directory ( directory ) ;", "final File [ ] files = directory . list Files ( ) ;", "if ( files == null ) {", "return Big Integer . ZERO ; }", "Big Integer size = Big Integer . ZERO ;", "for ( final File file : files ) {", "try {", "if ( ! is Symlink ( file ) ) {", "size = size . add ( Big Integer . value Of ( size Of ( file ) ) ) ; } }", "catch ( IO Exception ioe ) { } }", "return size ; }"]}
{"ids": "38046", "code": ["public double log Density For Instance ( Instance instance ) throws Exception {", "double [ ] a = log Joint Densities For Instance ( instance ) ;", "double max = a [ Utils . max Index ( a ) ] ;", "double sum = NUM_ ;", "for ( int i = NUM_ ; i < a . length ; i ++ ) {", "sum += Math . exp ( a [ i ] - max ) ; }", "return max + Math . log ( sum ) ; }"]}
{"ids": "74683", "code": ["public static Angle great Circle Distance ( Lat Lon p 1 , Lat Lon p 2 ) {", "if ( ( p 1 == null ) || ( p 2 == null ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "double lat 1 = p 1 . get Latitude ( ) . radians ;", "double lon 1 = p 1 . get Longitude ( ) . radians ;", "double lat 2 = p 2 . get Latitude ( ) . radians ;", "double lon 2 = p 2 . get Longitude ( ) . radians ;", "if ( lat 1 == lat 2 && lon 1 == lon 2 ) return Angle . ZERO ;", "double a = Math . sin ( ( lat 2 - lat 1 ) / NUM_ ) ;", "double b = Math . sin ( ( lon 2 - lon 1 ) / NUM_ ) ;", "double c = a * a + + Math . cos ( lat 1 ) * Math . cos ( lat 2 ) * b * b ;", "double distance Radians = NUM_ * Math . asin ( Math . sqrt ( c ) ) ;", "return Double . is Na N ( distance Radians ) ? Angle . ZERO : Angle . from Radians ( distance Radians ) ; }"]}
{"ids": "82551", "code": ["public int index Of ( java . lang . String sub String , int start ) {", "if ( start < NUM_ ) {", "start = NUM_ ; }", "int sub Count = sub String . count ;", "int count = count ;", "if ( sub Count > NUM_ ) {", "if ( sub Count + start > count ) {", "return - NUM_ ; }", "char [ ] target = sub String . value ;", "int sub Offset = sub String . offset ;", "char first Char = target [ sub Offset ] ;", "int end = sub Offset + sub Count ;", "while ( true ) {", "int i = index Of ( first Char , start ) ;", "if ( i == - NUM_ || sub Count + i > count ) {", "return - NUM_ ; }", "int o 1 = offset + i , o 2 = sub Offset ;", "char [ ] value = value ;", "while ( ++ o 2 < end && value [ ++ o 1 ] == target [ o 2 ] ) { }", "if ( o 2 == end ) {", "return i ; }", "start = i + NUM_ ; } }", "return start < count ? start : count ; }"]}
{"ids": "77197", "code": ["@ Override public Query rewrite ( Index Reader reader ) throws IO Exception {", "if ( disjuncts . length == NUM_ ) {", "return disjuncts [ NUM_ ] ; }", "boolean actually Rewritten = false ;", "List < Query > rewritten Disjuncts = new Array List < > ( ) ;", "for ( Query sub : disjuncts ) {", "Query rewritten Sub = sub . rewrite ( reader ) ;", "actually Rewritten |= rewritten Sub != sub ;", "rewritten Disjuncts . add ( rewritten Sub ) ; }", "if ( actually Rewritten ) {", "return new Disjunction Max Query ( rewritten Disjuncts , tie Breaker Multiplier ) ; }", "return super . rewrite ( reader ) ; }"]}
{"ids": "42248", "code": ["public static String value Of ( long value ) {", "return Long . to String ( value ) ; }"]}
{"ids": "66737", "code": ["public static < T > boolean are Sets Identical ( final Set < T > set 1 , final Set < T > set 2 ) {", "if ( set 1 == set 2 ) return true ;", "if ( Collection Util . size ( set 1 ) != Collection Util . size ( set 2 ) ) return false ;", "if ( Collection Util . is Empty ( set 1 ) ) return true ;", "for ( final T t : set 1 ) if ( ! set 2 . contains ( t ) ) return false ;", "return true ; }"]}
{"ids": "61945", "code": ["@ Override public int compare To ( Value o ) {", "return hash Code ( ) - o . hash Code ( ) ; }"]}
{"ids": "34971", "code": ["private static void add Options ( final List < String > cmd , Map < Checker Prop , Object > props ) {", "for ( Checker Prop cp : Checker Prop . values ( ) ) {", "cmd . add All ( cp . get Cmd Line ( props ) ) ; } }"]}
{"ids": "31845", "code": ["public boolean obsolete ( ) {", "int [ ] stamp = new int [ NUM_ ] ;", "boolean undeployed = usage . get ( stamp ) ;", "return undeployed && stamp [ NUM_ ] == NUM_ ; }"]}
{"ids": "18223", "code": ["boolean pop Namespace ( String prefix ) {", "if ( prefix . starts With ( XML PREFIX ) ) {", "return false ; }", "Stack stack ;", "if ( ( stack = get Prefix Stack ( prefix ) ) != null ) {", "stack . pop ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "45076", "code": ["public void redo Last Action ( ) {", "try {", "if ( undo Manager . can Redo ( ) ) undo Manager . redo ( ) ; }", "catch ( Cannot Redo Exception cre ) {", "cre . print Stack Trace ( ) ; } }"]}
{"ids": "74095", "code": ["protected void continue Write ( ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ ) ; }", "Iterator < Variable Value > i = variables . iterator ( ) ;", "while ( i . has Next ( ) ) {", "Variable Value v = i . next ( ) ;", "if ( v . is To Write ( ) && ( ! writing Changes || v . is Changed ( ) ) ) {", "am Writing = true ;", "set Busy ( true ) ;", "log . debug ( STR_ + v . label ( ) + STR_ + writing Changes ) ;", "if ( writing Changes ) {", "v . write Changes ( ) ; }", "else {", "v . write All ( ) ; }", "log . debug ( STR_ ) ;", "return ; } }", "am Writing = false ;", "super . set State ( STORED ) ;", "set Busy ( false ) ;", "log . debug ( STR_ ) ; }"]}
{"ids": "67334", "code": ["private void start Game ( Game Launch Message game Launch Message , Faction faction , Rating Mode rating Mode , Integer local Relay Port ) {", "if ( is Running ( ) ) {", "logger . warn ( STR_ ) ;", "return ; }", "stop Search Ranked 1 v 1 ( ) ;", "List < String > args = fix Malformed Args ( game Launch Message . get Args ( ) ) ;", "try {", "local Relay Server . get Port ( ) ;", "process = forged Alliance Service . start Game ( game Launch Message . get Uid ( ) , game Launch Message . get Mod ( ) , faction , args , rating Mode , local Relay Port , rehost Requested ) ;", "set Game Running ( true ) ;", "this . rating Mode = rating Mode ;", "spawn Termination Listener ( process ) ; }", "catch ( IO Exception e ) {", "logger . warn ( STR_ , e ) ;", "notification Service . add Notification ( new Immediate Notification ( i 18 n . get ( STR_ ) , i 18 n . get ( STR_ ) , Severity . ERROR , e , Arrays . as List ( new Report Action ( i 18 n , reporting Service , e ) , new Dismiss Action ( i 18 n ) ) ) ) ; } }"]}
{"ids": "31432", "code": ["public void add Line ( String line ) {", "int index = line . index Of ( STR_ , NUM_ ) ;", "if ( index != - NUM_ ) {", "add Lenient ( line . substring ( NUM_ , index ) , line . substring ( index + NUM_ ) ) ; }", "else if ( line . starts With ( STR_ ) ) {", "add Lenient ( STR_ , line . substring ( NUM_ ) ) ; }", "else {", "add Lenient ( STR_ , line ) ; } }"]}
{"ids": "54940", "code": ["private synchronized void add Entries ( Hashtable entries ) {", "entry Directory . put All ( entries ) ; }"]}
{"ids": "45677", "code": ["@ Request Mapping ( value = { STR_ , STR_ } , method = Request Method . POST ) @ Response Body public Rest Wrapper update One Record ( @ Model Attribute ( STR_ ) @ Valid General Config general Config , Binding Result binding Result , Principal principal ) {", "Rest Wrapper rest Wrapper = null ;", "if ( binding Result . has Errors ( ) ) {", "Binding Result Error binding Result Error = new Binding Result Error ( ) ;", "return binding Result Error . error Message ( binding Result ) ; }", "try {", "if ( general Config . get Required ( ) <= NUM_ ) {", "com . wipro . ats . bdre . md . dao . jpa . General Config jpa General Config Update = new com . wipro . ats . bdre . md . dao . jpa . General Config ( ) ;", "General Config Id jpa General Config Id = new General Config Id ( ) ;", "jpa General Config Id . set Config Group ( general Config . get Config Group ( ) ) ;", "jpa General Config Id . set Gc Key ( general Config . get Key ( ) ) ;", "jpa General Config Update . set Id ( jpa General Config Id ) ;", "jpa General Config Update . set Default Val ( general Config . get Default Val ( ) ) ;", "jpa General Config Update . set Description ( general Config . get Description ( ) ) ;", "jpa General Config Update . set Enabled ( general Config . is Enabled ( ) ) ;", "jpa General Config Update . set Gc Value ( general Config . get Value ( ) ) ;", "if ( general Config . get Required ( ) == NUM_ ) jpa General Config Update . set Required ( true ) ;", "else jpa General Config Update . set Required ( false ) ;", "jpa General Config Update . set Type ( general Config . get Type ( ) ) ;", "LOGGER . info ( general Config ) ;", "general Config DAO . update ( jpa General Config Update ) ;", "rest Wrapper = new Rest Wrapper ( general Config , Rest Wrapper . OK ) ;", "LOGGER . info ( STR_ + jpa General Config Id . get Gc Key ( ) + STR_ + jpa General Config Id . get Config Group ( ) + STR_ + principal . get Name ( ) ) ; }", "else {", "LOGGER . error ( STR_ ) ;", "rest Wrapper = new Rest Wrapper ( STR_ , Rest Wrapper . ERROR ) ; } }", "catch ( Metadata Exception e ) {", "LOGGER . error ( e ) ;", "rest Wrapper = new Rest Wrapper ( e . get Message ( ) , Rest Wrapper . ERROR ) ; }", "return rest Wrapper ; }"]}
{"ids": "37050", "code": ["public static void load Project ( final J Tree tree , final I Navi Project project ) {", "Preconditions . check Not Null ( tree , STR_ ) ;", "Preconditions . check Not Null ( project , STR_ ) ;", "load Project Threaded ( Swing Utilities . get Window Ancestor ( tree ) , project , tree ) ; }"]}
{"ids": "75649", "code": ["public Enumeration list Options ( ) {", "Vector new Vector = new Vector ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "24002", "code": ["public static Data Policy from Ordinal ( byte ordinal ) {", "return VALUES [ ordinal ] ; }"]}
{"ids": "56101", "code": ["public static boolean is Installed ( Package Manager package Manager , String package Name ) {", "List < Package Info > packs = package Manager . get Installed Packages ( NUM_ ) ;", "for ( int i = NUM_ ; i < packs . size ( ) ; i ++ ) {", "if ( Text Utils . equals ( packs . get ( i ) . package Name , package Name ) ) return true ; }", "return false ; }"]}
{"ids": "42097", "code": ["public void add Set Attribute ( final Set Attribute set Attribute ) {", "set Attributes . add ( set Attribute ) ; }"]}
{"ids": "72168", "code": ["static String apply Template ( final String template , final Map < String , Object > map ) {", "configuration = get Configuration ( ) ;", "try ( Byte Array Output Stream output Stream = new Byte Array Output Stream ( ) ; Writer writer = new Output Stream Writer ( output Stream ) ) {", "Template configuration Template = configuration . get Template ( template ) ;", "configuration Template . process ( map , writer ) ;", "return output Stream . to String ( ) ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( e . get Message ( ) , e ) ; } }"]}
{"ids": "48720", "code": ["final void put Short ( int offset , short value ) {", "unsafe . put Short ( offset + address , value ) ; }"]}
{"ids": "1247", "code": ["public static Clob to Clob ( Object value ) throws Page Exception {", "if ( value instanceof Clob ) return ( Clob ) value ;", "else if ( value instanceof char [ ] ) return to Clob ( new String ( ( char [ ] ) value ) ) ;", "else if ( value instanceof Reader ) {", "String Writer sw = new String Writer ( ) ;", "try {", "IO Util . copy ( ( Reader ) value , sw , false , true ) ; }", "catch ( IO Exception e ) {", "throw Expression Exception . new Instance ( e ) ; }", "return to Clob ( sw . to String ( ) ) ; }", "return to Clob ( Caster . to String ( value ) ) ; }"]}
{"ids": "36487", "code": ["private J Free Chart create Histogram Chart ( Example Set example Set ) {", "J Free Chart chart = Chart Factory . create Histogram ( null , null , null , create Histogram Dataset ( example Set ) , Plot Orientation . VERTICAL , false , false , false ) ;", "Abstract Attribute Statistics Model . set Default Chart Fonts ( chart ) ;", "chart . set Background Paint ( null ) ;", "chart . set Background Image Alpha ( NUM_ ) ;", "XY Plot plot = ( XY Plot ) chart . get Plot ( ) ;", "plot . set Range Gridlines Visible ( false ) ;", "plot . set Domain Gridlines Visible ( false ) ;", "plot . set Outline Visible ( false ) ;", "plot . set Range Zero Baseline Visible ( false ) ;", "plot . set Domain Zero Baseline Visible ( false ) ;", "plot . set Background Paint ( COLOR INVISIBLE ) ;", "plot . set Background Image Alpha ( NUM_ ) ;", "XY Bar Renderer renderer = ( XY Bar Renderer ) plot . get Renderer ( ) ;", "renderer . set Series Paint ( NUM_ , Attribute Gui Tools . get Color For Value Type ( Ontology . NUMERICAL ) ) ;", "renderer . set Bar Painter ( new Standard XY Bar Painter ( ) ) ;", "renderer . set Draw Bar Outline ( true ) ;", "renderer . set Shadow Visible ( false ) ;", "return chart ; }"]}
{"ids": "84423", "code": ["List < Type > save ( ) {", "List Buffer < Type > buf = new List Buffer < > ( ) ;", "for ( Type t : undetvars ) {", "Undet Var uv = ( Undet Var ) t ;", "Undet Var uv 2 = new Undet Var ( ( Type Var ) uv . qtype , types ) ;", "for ( Inference Bound ib : Inference Bound . values ( ) ) {", "for ( Type b : uv . get Bounds ( ib ) ) {", "uv 2 . add Bound ( ib , b , types ) ; } }", "uv 2 . inst = uv . inst ;", "buf . add ( uv 2 ) ; }", "return buf . to List ( ) ; }"]}
{"ids": "69162", "code": ["public int execute Process ( ) {", "final List < String > process Strings = tokenize String ( exec Command ) ;", "process Strings . add All ( tokenize String ( script ) ) ;", "logger . info ( Message Format . format ( STR_ , process Strings ) ) ;", "final Process Builder process Builder = new Process Builder ( process Strings ) ;", "if ( working Directory != null ) {", "final Path dir = Paths . get ( working Directory ) ;", "if ( Files . not Exists ( dir ) ) {", "try {", "Files . create Directories ( dir ) ; }", "catch ( IO Exception e ) {", "logger . warning ( STR_ + working Directory ) ;", "return - NUM_ ; } }", "else if ( ! Files . is Directory ( dir ) ) {", "logger . warning ( working Directory + STR_ ) ;", "return - NUM_ ; }", "final File directory = dir . to File ( ) ;", "process Builder . directory ( directory ) ; }", "process Builder . redirect Error Stream ( true ) ;", "Integer exit Value ;", "try {", "logger . info ( STR_ ) ;", "final Process process = process Builder . start ( ) ;", "send Input String To Process ( process ) ;", "handle Process Output ( process ) ;", "try {", "exit Value = process . wait For ( ) ; }", "catch ( Interrupted Exception e ) {", "logger . warning ( STR_ ) ;", "process . destroy ( ) ;", "exit Value = - NUM_ ; }", "logger . info ( STR_ + exit Value + STR_ ) ; }", "catch ( IO Exception e ) {", "logger . log ( SEVERE , STR_ , e . get Cause ( ) ) ;", "exit Value = - NUM_ ; }", "return exit Value ; }"]}
{"ids": "54236", "code": ["static void check Method Desc ( final String desc ) {", "if ( desc == null || desc . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( desc . char At ( NUM_ ) != STR_ || desc . length ( ) < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + desc ) ; }", "int start = NUM_ ;", "if ( desc . char At ( start ) != STR_ ) {", "do {", "if ( desc . char At ( start ) == STR_ ) {", "throw new Illegal Argument Exception ( STR_ + desc ) ; }", "start = check Desc ( desc , start , false ) ; }", "while ( start < desc . length ( ) && desc . char At ( start ) != STR_ ) ; }", "start = check Desc ( desc , start + NUM_ , true ) ;", "if ( start != desc . length ( ) ) {", "throw new Illegal Argument Exception ( STR_ + desc ) ; } }"]}
{"ids": "85212", "code": ["protected Rectangle apply Margins ( Rectangle rect , float [ ] margins , boolean reverse ) {", "if ( is Positioned ( ) ) return rect ;", "return rect . < Rectangle > apply Margins ( margins [ NUM_ ] , margins [ NUM_ ] , margins [ NUM_ ] , margins [ NUM_ ] , reverse ) ; }"]}
{"ids": "32684", "code": ["private void reset Attempts ( ) {", "for ( final Political Action Attachment paa : Political Action Attachment . get Political Action Attachments ( m player ) ) {", "paa . reset Attempts ( get Bridge ( ) ) ; } }"]}
{"ids": "8210", "code": ["public static Number minus ( Character left , Character right ) {", "return minus ( Integer . value Of ( left ) , right ) ; }"]}
{"ids": "11558", "code": ["public void find And Init ( Object some Obj ) {", "if ( some Obj instanceof Mouse Delegator ) {", "Debug . message ( STR_ , STR_ ) ;", "set Mouse Delegator ( ( Mouse Delegator ) some Obj ) ; } }"]}
{"ids": "4768", "code": ["public static int to Int ( final String value ) {", "return Integer . parse Int ( value ) ; }"]}
{"ids": "81789", "code": ["protected Object evaluate Left Less Right ( List elements , String lvalue , String rvalue ) {", "List array ;", "if ( elements instanceof java . util . Vector ) {", "array = new java . util . Vector ( ) ; }", "else {", "array = new Array List ( ) ; }", "for ( Iterator e = elements . iterator ( ) ; e . has Next ( ) ; ) {", "Object o = e . next ( ) ;", "if ( o instanceof Structured Content ) {", "if ( ( o = evaluate Left Less Right ( ( Structured Content ) o , lvalue , rvalue ) ) != null ) {", "array . add ( o ) ; } } }", "if ( array . size ( ) == NUM_ ) {", "return ( Structured Content ) array . get ( NUM_ ) ; }", "return array ; }"]}
{"ids": "6726", "code": ["public void remove Catchable ( Catchable Pokemon pokemon ) {", "if ( cached Catchable . size ( ) > NUM_ ) {", "cached Catchable . remove ( pokemon ) ; } }"]}
{"ids": "35312", "code": ["@ Suppress Warnings ( STR_ ) @ Override protected void fill Buffer ( ) {", "int old P = p ;", "int index = tokens . size ( ) ;", "Token t = token Source . next Token ( ) ;", "while ( t != null && t . get Type ( ) != Char Stream . EOF ) {", "int type = t . get Type ( ) ;", "if ( type == Internal N 4 JS Lexer . Solidus || type == Internal N 4 JS Lexer . Solidus Equals Sign || type == Internal N 4 JS Lexer . Right Curly Bracket ) {", "t . set Token Index ( index ) ;", "tokens . add ( t ) ;", "index ++ ;", "break ; }", "boolean discard = false ;", "if ( channel Override Map != null ) {", "Integer channel I = ( Integer ) channel Override Map . get ( Integer . value Of ( type ) ) ;", "if ( channel I != null ) {", "t . set Channel ( channel I . int Value ( ) ) ; } }", "if ( discard Set != null && discard Set . contains ( Integer . value Of ( type ) ) ) {", "discard = true ; }", "else if ( discard Off Channel Tokens && t . get Channel ( ) != this . channel ) {", "discard = true ; }", "if ( ! discard ) {", "t . set Token Index ( index ) ;", "tokens . add ( t ) ;", "index ++ ; }", "t = token Source . next Token ( ) ; }", "p = old P == - NUM_ ? NUM_ : old P ;", "p = skip Off Token Channels ( p ) ; }"]}
{"ids": "83261", "code": ["public void write Counts Comparison List ( final String filename , final String format ) {", "if ( format . compare To Ignore Case ( STR_ ) == NUM_ ) {", "Count Sim Comparison KML Writer kml Writer = new Count Sim Comparison KML Writer ( counts Comparison List , this . network , Transformation Factory . get Coordinate Transformation ( this . coordinate System , Transformation Factory . WGS 84 ) ) ;", "kml Writer . write File ( filename ) ; }", "else if ( format . compare To Ignore Case ( STR_ ) == NUM_ ) {", "Count Sim Comparison Table Writer writer = new Count Sim Comparison Table Writer ( counts Comparison List , Locale . US ) ;", "writer . write File ( filename ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Comparison Error Stats Calculator error Stats = new Comparison Error Stats Calculator ( counts Comparison List ) ;", "double [ ] hours = new double [ NUM_ ] ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "hours [ i - NUM_ ] = i ; }", "Double Array Table Writer table Writer = new Double Array Table Writer ( ) ;", "table Writer . add Column ( hours ) ;", "table Writer . add Column ( error Stats . get Mean Rel Error ( ) ) ;", "table Writer . write File ( filename + STR_ ) ; }"]}
{"ids": "13218", "code": ["public void put Grammar ( DTD Grammar grammar ) {", "XMLDTD Description desc = ( XMLDTD Description ) grammar . get Grammar Description ( ) ;", "f Grammars . put ( desc , grammar ) ; }"]}
{"ids": "7091", "code": ["public Service Call < Translation Result > translate ( final String text , final Language source , final Language target ) {", "return translate ( Collections . singleton List ( text ) , source , target ) ; }"]}
{"ids": "74892", "code": ["@ Override public int execute ( final Form Object form , final int type , final String code , final int event Type , final char key Pressed ) {", "int message Code ;", "final String js = code ;", "final String [ ] args = JS Function . convert To Array ( js ) ;", "final String command = args [ NUM_ ] ;", "if ( command . starts With ( STR_ ) ) {", "message Code = handle AF Commands ( form , command , js , args , event Type , key Pressed ) ; }", "else {", "execute Functions ( js , form , acro ) ;", "message Code = Action Handler . VALUESCHANGED ; }", "if ( type == Pdf Dictionary . F ) {", "calcualte Event ( ) ;", "message Code = Action Handler . VALUESCHANGED ; }", "return message Code ; }"]}
{"ids": "57660", "code": ["private Object read Resolve ( ) {", "synchronized ( levels ) {", "for ( Level level : levels ) {", "if ( value != level . value ) {", "continue ; }", "if ( ! name . equals ( level . name ) ) {", "continue ; }", "if ( Objects . equal ( resource Bundle Name , level . resource Bundle Name ) ) {", "return level ; } }", "levels . add ( this ) ;", "return this ; } }"]}
{"ids": "27134", "code": ["private static void repeat ( String pattern , int count , Appendable out ) throws IO Exception {", "while ( count >= pattern . length ( ) ) {", "out . append ( pattern ) ;", "count -= pattern . length ( ) ; }", "if ( count > NUM_ ) {", "out . append ( pattern , NUM_ , count ) ; } }"]}
{"ids": "34881", "code": ["private void clean Up ( Reference < ? > reference ) throws Shut Down {", "Method finalize Referent Method = get Finalize Referent Method ( ) ;", "do {", "reference . clear ( ) ;", "if ( reference == frq Reference ) {", "throw new Shut Down ( ) ; }", "try {", "finalize Referent Method . invoke ( reference ) ; }", "catch ( Throwable t ) {", "logger . log ( Level . SEVERE , STR_ , t ) ; } }", "while ( ( reference = queue . poll ( ) ) != null ) ; }"]}
{"ids": "83983", "code": ["private boolean is Mineshafter Present ( ) {", "try {", "Class . for Name ( STR_ ) ;", "return true ; }", "catch ( Exception e ) {", "return false ; } }"]}
{"ids": "26631", "code": ["public @ Check For Null Queue . Item run 2 ( @ Nonnull String replacement Main Script , @ Nonnull Map < String , String > replacement Loaded Scripts ) {", "List < Action > actions = new Array List < Action > ( ) ;", "Cps Flow Execution execution = get Execution ( ) ;", "if ( execution == null ) {", "return null ; }", "actions . add ( new Replay Flow Factory Action ( replacement Main Script , replacement Loaded Scripts , execution . is Sandbox ( ) ) ) ;", "actions . add ( new Cause Action ( new Cause . User Id Cause ( ) , new Replay Cause ( run ) ) ) ;", "for ( Class < ? extends Action > c : COPIED ACTIONS ) {", "actions . add All ( run . get Actions ( c ) ) ; }", "return Parameterized Job Mix In . schedule Build 2 ( run . get Parent ( ) , NUM_ , actions . to Array ( new Action [ actions . size ( ) ] ) ) ; }"]}
{"ids": "40940", "code": ["public static Secret Keys keys ( String keys Str ) throws Invalid Key Exception {", "String [ ] keys Arr = keys Str . split ( STR_ ) ;", "if ( keys Arr . length != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else {", "byte [ ] confidentiality Key = Base 64 . decode ( keys Arr [ NUM_ ] , BASE 64 FLAGS ) ;", "if ( confidentiality Key . length != AES KEY LENGTH BITS / NUM_ ) {", "throw new Invalid Key Exception ( STR_ + AES KEY LENGTH BITS + STR_ ) ; }", "byte [ ] integrity Key = Base 64 . decode ( keys Arr [ NUM_ ] , BASE 64 FLAGS ) ;", "if ( integrity Key . length != HMAC KEY LENGTH BITS / NUM_ ) {", "throw new Invalid Key Exception ( STR_ + HMAC KEY LENGTH BITS + STR_ ) ; }", "Secret Keys secret Keys = new Secret Keys ( ) ;", "Secret Key Spec secret Key Spec = new Secret Key Spec ( ) ;", "secret Key Spec . generate ( confidentiality Key , NUM_ , confidentiality Key . length , CIPHER ) ;", "Secret Key Spec secret Key Spec 1 = new Secret Key Spec ( ) ;", "secret Key Spec 1 . generate ( integrity Key , HMAC ALGORITHM ) ;", "secret Keys . set Confidentiality Key ( secret Key Spec ) ;", "secret Keys . set Integrity Key ( secret Key Spec 1 ) ;", "return secret Keys ; } }"]}
{"ids": "27469", "code": ["public Path [ ] choose Starting Paths ( final int nedges , final Path [ ] paths ) {", "final List < Path > tmp = new Linked List < Path > ( ) ;", "Arrays . sort ( paths , NUM_ , paths . length , Estimated Cardinality Comparator . INSTANCE ) ;", "for ( int i = NUM_ ; i < paths . length && i < nedges ; i ++ ) {", "tmp . add ( paths [ i ] ) ; }", "return tmp . to Array ( new Path [ tmp . size ( ) ] ) ; }"]}
{"ids": "29168", "code": ["private void safe Bottom View ( ) {", "Status status = get Open Status ( ) ;", "View Group bottom = get Bottom View ( ) ;", "if ( status == Status . Close ) {", "if ( bottom . get Visibility ( ) != INVISIBLE ) bottom . set Visibility ( INVISIBLE ) ; }", "else {", "if ( bottom . get Visibility ( ) != VISIBLE ) bottom . set Visibility ( VISIBLE ) ; } }"]}
{"ids": "74607", "code": ["public static int uniform ( int n ) {", "if ( n <= NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "return random . next Int ( n ) ; }"]}
{"ids": "13485", "code": ["private void view Delta ( final Item item ) {", "final Delta Fragment fragment = Delta Fragment . new Instance ( item ) ;", "navigate To Fragment ( fragment ) ; }"]}
{"ids": "64382", "code": ["public Message ( String type , double value ) {", "if ( ! VALID TYPES . contains ( type ) ) {", "throw new Illegal Argument Exception ( type + STR_ + STR_ ) ; }", "this . type = type ;", "this . value = value ; }"]}
{"ids": "32674", "code": ["public void add All ( final Casualty List casualty List ) {", "m damaged . add All ( casualty List . get Damaged ( ) ) ;", "m killed . add All ( casualty List . get Killed ( ) ) ; }"]}
{"ids": "62261", "code": ["public static String import Result Set ( Result Set source , Database db , String name , Import Filter filter , boolean use Existing Table ) throws SQL Exception , IO Exception {", "Result Set Meta Data md = source . get Meta Data ( ) ;", "name = Table Builder . escape Identifier ( name ) ;", "Table table = null ;", "if ( ! use Existing Table || ( ( table = db . get Table ( name ) ) == null ) ) {", "List < Column Builder > columns = to Columns ( md ) ;", "table = create Unique Table ( db , name , columns , md , filter ) ; }", "List < Object [ ] > rows = new Array List < Object [ ] > ( COPY TABLE BATCH SIZE ) ;", "int num Columns = md . get Column Count ( ) ;", "while ( source . next ( ) ) {", "Object [ ] row = new Object [ num Columns ] ;", "for ( int i = NUM_ ; i < row . length ; i ++ ) {", "row [ i ] = source . get Object ( i + NUM_ ) ; }", "row = filter . filter Row ( row ) ;", "if ( row == null ) {", "continue ; }", "rows . add ( row ) ;", "if ( rows . size ( ) == COPY TABLE BATCH SIZE ) {", "table . add Rows ( rows ) ;", "rows . clear ( ) ; } }", "if ( rows . size ( ) > NUM_ ) {", "table . add Rows ( rows ) ; }", "return table . get Name ( ) ; }"]}
{"ids": "78133", "code": ["public static long [ ] hash To Longs ( double datum , long seed ) {", "double d = ( datum == NUM_ ) ? NUM_ : datum ;", "long [ ] data = { Double . double To Long Bits ( d ) } ;", "return hash ( data , seed ) ; }"]}
{"ids": "56083", "code": ["private boolean allow Upload Crash Dump ( ) {", "if ( is Cellular Experiment Enabled ( ) ) return is Usage And Crash Reporting Enabled ( ) ;", "if ( is Mobile Network Capable ( ) ) {", "String option = m Shared Preferences . get String ( PREF CRASH DUMP UPLOAD , m Crash Dump Never Upload ) ;", "return option . equals ( m Crash Dump Always Upload ) || ( option . equals ( m Crash Dump Wifi Only Upload ) && is Wi Fi Or Ethernet Network ( ) ) ; }", "return m Shared Preferences . get Boolean ( PREF CRASH DUMP UPLOAD NO CELLULAR , false ) ; }"]}
{"ids": "7953", "code": ["private int [ ] join Map ( int [ ] a , int [ ] b ) {", "if ( a == null ) {", "return b ; }", "if ( b == null ) {", "return a ; }", "int [ ] result = new int [ a . length + b . length ] ;", "System . arraycopy ( a , NUM_ , result , NUM_ , a . length ) ;", "System . arraycopy ( b , NUM_ , result , a . length , b . length ) ;", "return result ; }"]}
{"ids": "31872", "code": ["private void read Object ( Object Input Stream in ) throws Class Not Found Exception , IO Exception {", "in . default Read Object ( ) ;", "iter = col . iterator ( ) ; }"]}
{"ids": "75799", "code": ["public Label Set ( int indices [ ] , boolean sort ) {", "this . indices = indices ;", "if ( sort == true ) Arrays . sort ( this . indices ) ; }"]}
{"ids": "12503", "code": ["public void diff Equals ( ) {", "double [ ] col = null ;", "for ( int i = NUM_ ; i < A . length ; i ++ ) {", "col = new double [ A [ i ] . length - NUM_ ] ;", "for ( int j = NUM_ ; j < A [ i ] . length ; j ++ ) col [ j - NUM_ ] = Math . abs ( A [ i ] [ j ] - A [ i ] [ j - NUM_ ] ) ;", "A [ i ] = col ; }", "n -- ; }"]}
{"ids": "3872", "code": ["private static void print Stack Trace Element ( Stack Trace Element trace , Print Writer out , Class Loader loader ) {", "try {", "Line Map map = get Script Line Map ( trace . get Class Name ( ) , loader ) ;", "if ( map != null ) {", "Line Map . Line line = map . get Line ( trace . get Line Number ( ) ) ;", "if ( line != null ) {", "out . print ( trace . get Class Name ( ) + STR_ + trace . get Method Name ( ) ) ;", "out . print ( STR_ + line . get Source Filename ( ) + STR_ ) ;", "out . println ( line . get Source Line ( trace . get Line Number ( ) ) + STR_ ) ;", "return ; } } }", "catch ( Throwable e ) { }", "out . println ( trace ) ; }"]}
{"ids": "74878", "code": ["public void read Information Object ( final Pdf Object info Obj , final Object Decoder object Decoder ) {", "try {", "object Decoder . check Resolved ( info Obj ) ; }", "catch ( final Exception e ) {", "Log Writer . write Log ( STR_ + e . get Message ( ) ) ; }", "String new Value ;", "int id ;", "byte [ ] data ;", "final int count = Pdf File Information . information field I Ds . length ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "id = Pdf File Information . information field I Ds [ i ] ;", "if ( id == Pdf Dictionary . Trapped ) {", "new Value = info Obj . get Name ( id ) ;", "if ( new Value == null ) {", "new Value = STR_ ; } }", "else {", "data = info Obj . get Text Stream Value As Byte ( id ) ;", "if ( data == null ) {", "new Value = STR_ ; }", "else {", "new Value = String Utils . get Text String ( data , false ) ; } }", "set Field Value ( i , new Value ) ; } }"]}
{"ids": "65722", "code": ["private void cmd calculate Difference ( ) {", "Big Decimal previous Value , actual Value ;", "Timestamp today = Time Util . get Day ( System . current Time Millis ( ) ) ;", "M Cash cash = M Cash . get ( p pos . get Ctx ( ) , p pos . get C Cash Book ID ( ) , today , null ) ;", "v previous Balance . set Value ( cash . get Ending Balance ( ) ) ;", "previous Value = cash . get Ending Balance ( ) ;", "actual Value = ( Big Decimal ) v Actual Balance . get Value ( ) ;", "v difference . set Value ( actual Value . subtract ( previous Value ) ) ; }"]}
{"ids": "59518", "code": ["private void request For Upload ( OC File file ) {", "File Uploader . Upload Requester requester = new File Uploader . Upload Requester ( ) ;", "requester . upload Update ( m Context , m Account , file , File Uploader . LOCAL BEHAVIOUR MOVE , true ) ;", "m Transfer Was Requested = true ; }"]}
{"ids": "33553", "code": ["protected void decode Image Data ( ) {", "int Null Code = - NUM_ ;", "int npix = iw * ih ;", "int available , clear , code mask , code size , end of information , in code , old code , bits , code , count , i , datum , data size , first , top , bi , pi ;", "if ( ( pixels == null ) || ( pixels . length < npix ) ) {", "pixels = new byte [ npix ] ; }", "if ( prefix == null ) prefix = new short [ Max Stack Size ] ;", "if ( suffix == null ) suffix = new byte [ Max Stack Size ] ;", "if ( pixel Stack == null ) pixel Stack = new byte [ Max Stack Size + NUM_ ] ;", "data size = read ( ) ;", "clear = NUM_ << data size ;", "end of information = clear + NUM_ ;", "available = clear + NUM_ ;", "old code = Null Code ;", "code size = data size + NUM_ ;", "code mask = ( NUM_ << code size ) - NUM_ ;", "for ( code = NUM_ ; code < clear ; code ++ ) {", "prefix [ code ] = NUM_ ;", "suffix [ code ] = ( byte ) code ; }", "datum = bits = count = first = top = pi = bi = NUM_ ;", "for ( i = NUM_ ; i < npix ; ) {", "if ( top == NUM_ ) {", "if ( bits < code size ) {", "if ( count == NUM_ ) {", "count = read Block ( ) ;", "if ( count <= NUM_ ) break ;", "bi = NUM_ ; }", "datum += ( ( ( int ) block [ bi ] ) & NUM_ ) << bits ;", "bits += NUM_ ;", "bi ++ ;", "count -- ;", "continue ; }", "code = datum & code mask ;", "datum >>= code size ;", "bits -= code size ;", "if ( ( code > available ) || ( code == end of information ) ) break ;", "if ( code == clear ) {", "code size = data size + NUM_ ;", "code mask = ( NUM_ << code size ) - NUM_ ;", "available = clear + NUM_ ;", "old code = Null Code ;", "continue ; }", "if ( old code == Null Code ) {", "pixel Stack [ top ++ ] = suffix [ code ] ;", "old code = code ;", "first = code ;", "continue ; }", "in code = code ;", "if ( code == available ) {", "pixel Stack [ top ++ ] = ( byte ) first ;", "code = old code ; }", "while ( code > clear ) {", "pixel Stack [ top ++ ] = suffix [ code ] ;", "code = prefix [ code ] ; }", "first = ( ( int ) suffix [ code ] ) & NUM_ ;", "if ( available >= Max Stack Size ) break ;", "pixel Stack [ top ++ ] = ( byte ) first ;", "prefix [ available ] = ( short ) old code ;", "suffix [ available ] = ( byte ) first ;", "available ++ ;", "if ( ( ( available & code mask ) == NUM_ ) && ( available < Max Stack Size ) ) {", "code size ++ ;", "code mask += available ; }", "old code = in code ; }", "top -- ;", "pixels [ pi ++ ] = pixel Stack [ top ] ;", "i ++ ; }", "for ( i = pi ; i < npix ; i ++ ) {", "pixels [ i ] = NUM_ ; } }"]}
{"ids": "86370", "code": ["void refresh Custom Master List ( ) {", "if ( custom Master Countries == null || custom Master Countries . length ( ) == NUM_ ) {", "custom Master Countries List = null ; }", "else {", "List < Country > local Country List = new Array List < > ( ) ;", "for ( String name Code : custom Master Countries . split ( STR_ ) ) {", "Country country = Country . get Country For Name Code From Library Master List ( custom Language , name Code ) ;", "if ( country != null ) {", "if ( ! is Already In List ( country , local Country List ) ) {", "local Country List . add ( country ) ; } } }", "if ( local Country List . size ( ) == NUM_ ) {", "custom Master Countries List = null ; }", "else {", "custom Master Countries List = local Country List ; } }", "if ( custom Master Countries List != null ) {", "for ( Country country : custom Master Countries List ) {", "country . log ( ) ; } }", "else { } }"]}
{"ids": "33341", "code": ["protected boolean is Dto Getter ( Method method ) {", "if ( method . is Annotation Present ( Delegate To . class ) ) {", "return false ; }", "String method Name = method . get Name ( ) ;", "if ( ( method Name . starts With ( STR_ ) || method Name . starts With ( STR_ ) ) && method . get Parameter Types ( ) . length == NUM_ ) {", "if ( method Name . length ( ) > NUM_ && method Name . starts With ( STR_ ) ) {", "return method . get Return Type ( ) == Boolean . class || method . get Return Type ( ) == boolean . class ; }", "return method Name . length ( ) > NUM_ ; }", "return false ; }"]}
{"ids": "2595", "code": ["private static char [ ] yy unpack cmap ( String packed ) {", "char [ ] map = new char [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < NUM_ ) {", "int count = packed . char At ( i ++ ) ;", "char value = packed . char At ( i ++ ) ;", "do map [ j ++ ] = value ;", "while ( -- count > NUM_ ) ; }", "return map ; }"]}
{"ids": "10608", "code": ["public Status Bar ( boolean show Memory ) {", "super ( new Border Layout ( ) ) ;", "add ( create Info Panel ( ) , Border Layout . WEST ) ;", "if ( show Memory ) {", "add ( create Memory Status ( ) , Border Layout . CENTER ) ;", "J Panel icon Panel = new J Panel ( new Border Layout ( ) ) ;", "icon Panel . add ( new J Label ( new Angled Lines Windows Corner Icon ( ) ) , Border Layout . SOUTH ) ;", "add ( icon Panel , Border Layout . EAST ) ; }", "else {", "set Background ( Color . WHITE ) ; } }"]}
{"ids": "72744", "code": ["public void execute ( final Runnable task ) {", "String name = metadata . get ( Metadata . RESOURCE NAME KEY ) ;", "if ( name != null ) {", "name = STR_ + name ; }", "else {", "name = STR_ ; }", "final Thread thread = new Thread ( task , name ) ;", "thread . set Daemon ( true ) ;", "thread . start ( ) ; }"]}
{"ids": "81444", "code": ["static int string Size ( String string ) {", "int size = NUM_ ;", "if ( string != null ) {", "size += HEADERS + NUM_ * NUM_ ;", "size += HEADERS + NUM_ * string . length ( ) ; }", "return size ; }"]}
{"ids": "87124", "code": ["public static Graph Request new Post Open Graph Object Request ( Access Token access Token , JSON Object open Graph Object , Callback callback ) {", "if ( open Graph Object == null ) {", "throw new Facebook Exception ( STR_ ) ; }", "if ( Utility . is Null Or Empty ( open Graph Object . opt String ( STR_ ) ) ) {", "throw new Facebook Exception ( STR_ ) ; }", "if ( Utility . is Null Or Empty ( open Graph Object . opt String ( STR_ ) ) ) {", "throw new Facebook Exception ( STR_ ) ; }", "String path = String . format ( MY OBJECTS FORMAT , open Graph Object . opt String ( STR_ ) ) ;", "Bundle bundle = new Bundle ( ) ;", "bundle . put String ( OBJECT PARAM , open Graph Object . to String ( ) ) ;", "return new Graph Request ( access Token , path , bundle , Http Method . POST , callback ) ; }"]}
{"ids": "52127", "code": ["public void add Graph ( Graph g ) {", "graphs . add ( g ) ; }"]}
{"ids": "57227", "code": ["protected void add To Quarantine Queue ( Node Port Tuple npt ) {", "if ( quarantine Queue . contains ( npt ) == false ) {", "quarantine Queue . add ( npt ) ; } }"]}
{"ids": "73706", "code": ["private Mrc Message load Chars ( ) throws java . io . IO Exception {", "int nchars ;", "byte [ ] rcv Buffer = new byte [ NUM_ ] ;", "nchars = inpipe . read ( rcv Buffer , NUM_ , NUM_ ) ;", "Mrc Message msg = new Mrc Message ( nchars ) ;", "for ( int i = NUM_ ; i < nchars ; i ++ ) {", "msg . set Element ( i , rcv Buffer [ i ] & NUM_ ) ; }", "return msg ; }"]}
{"ids": "35888", "code": ["@ Suppress Warnings ( STR_ ) @ Override protected Money handle Transaction That Is A Late Repayment Of Installment ( final Loan Repayment Schedule Installment current Installment , final List < Loan Repayment Schedule Installment > installments , final Loan Transaction loan Transaction , final Money transaction Amount Unprocessed , List < Loan Transaction To Repayment Schedule Mapping > transaction Mappings ) {", "return handle Transaction That Is On Time Payment Of Installment ( current Installment , loan Transaction , transaction Amount Unprocessed , transaction Mappings ) ; }"]}
{"ids": "63647", "code": ["protected void fire Tuple Event ( Table t , int start , int end , int type ) {", "if ( m tuple Listeners != null && m tuple Listeners . size ( ) > NUM_ ) {", "Object [ ] lstnrs = m tuple Listeners . get Array ( ) ;", "Tuple [ ] tuples = new Tuple [ end - start + NUM_ ] ;", "for ( int i = NUM_ , r = start ; r <= end ; ++ r , ++ i ) {", "tuples [ i ] = t . get Tuple ( r ) ; }", "for ( int i = NUM_ ; i < lstnrs . length ; ++ i ) {", "Tuple Set Listener tsl = ( Tuple Set Listener ) lstnrs [ i ] ;", "if ( type == Event Constants . INSERT ) {", "tsl . tuple Set Changed ( this , tuples , EMPTY ARRAY ) ; }", "else {", "tsl . tuple Set Changed ( this , EMPTY ARRAY , tuples ) ; } } } }"]}
{"ids": "64994", "code": ["public String build Query ( String [ ] projection In , String selection , String group By , String having , String sort Order , String limit ) {", "String [ ] projection = compute Projection ( projection In ) ;", "String Builder where = new String Builder ( ) ;", "boolean has Base Where Clause = m Where Clause != null && m Where Clause . length ( ) > NUM_ ;", "if ( has Base Where Clause ) {", "where . append ( m Where Clause . to String ( ) ) ;", "where . append ( STR_ ) ; }", "if ( selection != null && selection . length ( ) > NUM_ ) {", "if ( has Base Where Clause ) {", "where . append ( STR_ ) ; }", "where . append ( STR_ ) ;", "where . append ( selection ) ;", "where . append ( STR_ ) ; }", "return build Query String ( m Distinct , m Tables , projection , where . to String ( ) , group By , having , sort Order , limit ) ; }"]}
{"ids": "21326", "code": ["public static boolean is Exception Time ( Calendar schedule Time , Schedule Info schedule Info ) throws Exception {", "if ( schedule Info . get Date Exceptions ( ) != null ) {", "for ( String date Exception : schedule Info . get Date Exceptions ( ) ) {", "Date Format formatter = new Simple Date Format ( Schedule Info . FULL DAYTIME FORMAT ) ;", "Date date = formatter . parse ( schedule Info . get Start Date ( ) ) ;", "Calendar exception Time = Calendar . get Instance ( Time Zone . get Time Zone ( STR_ ) ) ;", "exception Time . set Time ( date ) ;", "if ( exception Time . equals ( schedule Time ) ) {", "log . info ( STR_ , schedule Time . to String ( ) ) ;", "return true ; } } }", "return false ; }"]}
{"ids": "44385", "code": ["protected void init Port ( ) {", "String port Param = get Init Parameter ( STR_ ) ;", "set Port ( ( port Param == null ) ? DEFAULT PORT : Integer . parse Int ( port Param ) ) ;", "if ( is Debug ( ) ) {", "log ( STR_ + get Port ( ) ) ; } }"]}
{"ids": "46723", "code": ["public JPEGQ Table ( int [ ] table ) {", "if ( table == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( table . length != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "q Table = Arrays . copy Of ( table , table . length ) ; }"]}
{"ids": "22586", "code": ["public VN Xe Nfs Share find Snap Nfs Share ( String snap Id , String share Name , String software Version ) {", "String Builder query Filter = new String Builder ( VN Xe Constants . NAME FILTER ) ;", "if ( ! VN Xe Utils . is Higher Version ( software Version , VN Xe Constants . VNXE BASE SOFT VER ) ) {", "query Filter . append ( share Name ) ;", "query Filter . append ( VN Xe Constants . AND ) ;", "query Filter . append ( VN Xe Constants . SNAP FILTER ) ;", "query Filter . append ( snap Id ) ; }", "else {", "query Filter . append ( STR_ + share Name + STR_ ) ;", "query Filter . append ( VN Xe Constants . AND ) ;", "query Filter . append ( VN Xe Constants . SNAP FILTER V 31 ) ;", "query Filter . append ( STR_ + snap Id + STR_ ) ; }", "set Filter ( query Filter . to String ( ) ) ;", "VN Xe Nfs Share result = null ;", "List < VN Xe Nfs Share > share List = get Data For Objects ( VN Xe Nfs Share . class ) ;", "if ( share List != null && ! share List . is Empty ( ) ) {", "result = share List . get ( NUM_ ) ;", "logger . info ( STR_ , snap Id , share Name ) ; }", "else {", "logger . info ( STR_ , snap Id , share Name ) ; }", "return result ; }"]}
{"ids": "23657", "code": ["@ Override public final int read ( ) throws IO Exception {", "Byte Buffer bb = wait For Available Data ( ) ;", "return ( bb . get ( ) & NUM_ ) ; }"]}
{"ids": "35393", "code": ["protected Token Position ( Token Position other ) {", "Objects . require Non Null ( other ) ;", "this . line = other . line ;", "this . column = other . column ;", "this . offset = other . offset ; }"]}
{"ids": "36543", "code": ["private J Component create Detail Panel ( Throwable error ) {", "Stack Trace List stl = new Stack Trace List ( error ) ;", "J Scroll Pane detail Pane = new Extended J Scroll Pane ( stl ) ;", "detail Pane . set Preferred Size ( new Dimension ( get Width ( ) , NUM_ ) ) ;", "detail Pane . set Border ( null ) ;", "return detail Pane ; }"]}
{"ids": "22208", "code": ["private JMX Connector connect ( String host , int port ) {", "try {", "if ( ! is Node Available ( host ) ) {", "log . info ( STR_ , host ) ;", "throw new Illegal State Exception ( STR_ ) ; }", "log . debug ( STR_ , host , port ) ;", "String connector Address = String . format ( service Url , host , port ) ;", "JMX Service URL jmx Url = new JMX Service URL ( connector Address ) ;", "return JMX Connector Factory . connect ( jmx Url ) ; }", "catch ( Malformed URL Exception e ) {", "log . error ( String . format ( STR_ , host , port ) , e ) ;", "throw new Illegal State Exception ( STR_ ) ; }", "catch ( IO Exception e ) {", "log . error ( String . format ( STR_ , host , port ) , e ) ;", "throw new Illegal State Exception ( STR_ + host ) ; } }"]}
{"ids": "10717", "code": ["public Tag Handler process Object Value ( Object value ) throws Jsp Exception {", "if ( value instanceof Attribute Definition ) {", "return process Typed Attribute ( ( Attribute Definition ) value ) ; }", "else if ( value instanceof Component Definition ) {", "return process Definition ( ( Component Definition ) value ) ; }", "return process As Definition Or URL ( value . to String ( ) ) ; }"]}
{"ids": "26906", "code": ["public List < Integer > emit ( String stream Id , Tuple anchor , List < Object > tuple ) {", "return emit ( stream Id , Arrays . as List ( anchor ) , tuple ) ; }"]}
{"ids": "24553", "code": ["private synchronized void write To Output Stream ( int one Byte ) {", "if ( m Closed ) {", "return ; }", "try {", "m Output Stream . write ( one Byte ) ;", "report Decoded Size If Applicable ( ) ; }", "catch ( IO Exception e ) {", "handle IO Exception Writing To Stream ( e ) ; } }"]}
{"ids": "61590", "code": ["public int difference ( String s 1 , String s 2 ) throws Encoder Exception {", "return Soundex Utils . difference ( this , s 1 , s 2 ) ; }"]}
{"ids": "79518", "code": ["protected List < Model Entity > make Entity Model To Use List ( ) throws Generic Entity Exception {", "List < Generic Value > entity Sync Includes = entity Sync . get Related ( STR_ , null , null , false ) ;", "List < Generic Value > entity Sync Group Includes = entity Sync . get Related ( STR_ , null , null , false ) ;", "entity Sync Includes . add All ( entity Sync Group Includes ) ;", "List < Model Entity > entity Model To Use List = Entity Group Util . get Model Entities From Records ( entity Sync Includes , delegator , true ) ;", "if ( Debug . info On ( ) ) Debug . log Info ( STR_ + entity Sync . get ( STR_ ) + STR_ + entity Model To Use List . size ( ) + STR_ , module ) ;", "return entity Model To Use List ; }"]}
{"ids": "16847", "code": ["private static String lz ( int num ) {", "return String . format ( STR_ , num ) ; }"]}
{"ids": "22090", "code": ["private Startup Mode check Startup Mode ( Configuration config ) throws IO Exception {", "Startup Mode boot Mode = check Startup Mode On Disk ( config ) ;", "if ( boot Mode != null ) {", "return boot Mode ; }", "if ( check Config Bool ( config , Constants . STARTUPMODE RESTORE REINIT ) ) {", "log . info ( STR_ , Constants . STARTUPMODE RESTORE REINIT ) ;", "Geodb Restore Mode mode = new Geodb Restore Mode ( config ) ;", "mode . set Coordinator ( coordinator ) ;", "mode . set Schema Util ( schema Util ) ;", "mode . set Db Dir ( db Dir ) ;", "return mode ; }", "if ( check Config Bool ( config , Constants . REINIT DB ) ) {", "log . info ( STR_ , Constants . REINIT DB ) ;", "Db Reinit Mode mode = new Db Reinit Mode ( config ) ;", "mode . set Coordinator ( coordinator ) ;", "mode . set Schema Util ( schema Util ) ;", "mode . set Db Dir ( db Dir ) ;", "return mode ; }", "List < String > obsolete Peers = check Config List ( config , Constants . OBSOLETE CASSANDRA PEERS ) ;", "if ( ! obsolete Peers . is Empty ( ) ) {", "Obsolete Peers Cleanup Mode mode = new Obsolete Peers Cleanup Mode ( config ) ;", "mode . set Coordinator ( coordinator ) ;", "mode . set Schema Util ( schema Util ) ;", "mode . set Obsolete Peers ( obsolete Peers ) ;", "return mode ; }", "else {", "Normal Mode mode = new Normal Mode ( config ) ;", "mode . set Coordinator ( coordinator ) ;", "mode . set Schema Util ( schema Util ) ;", "return mode ; } }"]}
{"ids": "17672", "code": ["private void write Object ( java . io . Object Output Stream s ) throws java . io . IO Exception {", "lock . lock ( ) ;", "try {", "q = new Priority Queue < E > ( Math . max ( size , NUM_ ) , comparator ) ;", "q . add All ( this ) ;", "s . default Write Object ( ) ; }", "finally {", "q = null ;", "lock . unlock ( ) ; } }"]}
{"ids": "21218", "code": ["private void run ( ) {", "try {", "Thread current = Thread . current Thread ( ) ;", "byte [ ] buf = new byte [ NUM_ ] ;", "for ( int len = in . read ( buf ) ; len != - NUM_ ; len = in . read ( buf ) ) {", "buffer . write ( buf , NUM_ , len ) ;", "if ( current != thread ) {", "break ; } }", "buffer . flush ( ) ;", "buffer . close ( ) ; }", "catch ( IO Exception e ) {", "log . error ( e . get Message ( ) , e ) ; } }"]}
{"ids": "56402", "code": ["protected boolean shard Available ( @ Nullable Index Shard shard ) {", "return shard != null && shard . can Index ( ) && CAN UPDATE INDEX BUFFER STATES . contains ( shard . state ( ) ) ; }"]}
{"ids": "14537", "code": ["synchronized void update Auth Config Globals ( Service Schema Manager scm ) throws SMS Exception {", "Service Schema schema = scm . get Organization Schema ( ) ;", "schema = schema . get Sub Schema ( STR_ ) ;", "schema = schema . get Sub Schema ( STR_ ) ;", "Map attrs = schema . get Attribute Defaults ( ) ;", "if ( attrs != null ) {", "default Service Success URL Set = ( Set ) attrs . get ( IS Auth Constants . LOGIN SUCCESS URL ) ;", "default Service Failure URL Set = ( Set ) attrs . get ( IS Auth Constants . LOGIN FAILURE URL ) ; }", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + default Service Success URL Set ) ;", "debug . message ( STR_ + default Service Failure URL Set ) ; } }"]}
{"ids": "14311", "code": ["public void increment ( ) {", "count . increment And Get ( ) ;", "rate Window . increment For Timestamp ( timer Getter . now ( ) ) ; }"]}
{"ids": "48460", "code": ["@ Override public int preceding ( int offset ) {", "Character Iterator text = get Text ( ) ;", "check Offset ( offset , text ) ;", "text . set Index ( offset ) ;", "return previous ( ) ; }"]}
{"ids": "52077", "code": ["public void log ( String event , String message ) {", "boolean event Active = is Event Active ( event ) ;", "if ( ( this . logging && event Active && ! writers . is Empty ( ) ) ) {", "try {", "for ( Writer writer : writers . values ( ) ) {", "writer . write ( message ) ;", "writer . write ( STR_ ) ;", "writer . flush ( ) ; } }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "52403", "code": ["public int write ( final Byte Buffer byte Buffer ) throws IO Exception {", "ensure Open ( ) ;", "final int remaining = byte Buffer . remaining ( ) ;", "if ( inspectable < buffer . length ) {", "final int to Buffer = Math . min ( buffer . length - inspectable , remaining ) ;", "byte Buffer . get ( buffer , inspectable , to Buffer ) ;", "inspectable += to Buffer ; }", "if ( byte Buffer . has Remaining ( ) ) {", "file Channel . position ( write Position ) ;", "write Position += file Channel . write ( byte Buffer ) ; }", "return remaining ; }"]}
{"ids": "31542", "code": ["public void copy Into ( int str Offset , byte [ ] bytes , int array Offset , int len ) {", "System . arraycopy ( m bytes , m offset + str Offset , bytes , array Offset , len ) ; }"]}
{"ids": "8113", "code": ["public static String repeat String ( String pattern , int repeats ) {", "String Builder buffer = new String Builder ( pattern . length ( ) * repeats ) ;", "for ( int i = NUM_ ; i < repeats ; i ++ ) {", "buffer . append ( pattern ) ; }", "return new String ( buffer ) ; }"]}
{"ids": "9311", "code": ["private boolean is Music Player ( ) {", "return player Setting != null && player Setting . equals Ignore Case ( STR_ ) ; }"]}
{"ids": "18372", "code": ["public final static Version Info [ ] load Version Info ( String [ ] pckgs , Class Loader clsldr ) {", "if ( pckgs == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Array List vil = new Array List ( pckgs . length ) ;", "for ( int i = NUM_ ; i < pckgs . length ; i ++ ) {", "Version Info vi = load Version Info ( pckgs [ i ] , clsldr ) ;", "if ( vi != null ) vil . add ( vi ) ; }", "return ( Version Info [ ] ) vil . to Array ( new Version Info [ vil . size ( ) ] ) ; }"]}
{"ids": "77310", "code": ["public static Collection < Content Stream > to Content Streams ( final String str , final String content Type ) {", "if ( str == null ) return null ;", "Array List < Content Stream > streams = new Array List < > ( NUM_ ) ;", "Content Stream Base ccc = new Content Stream Base . String Stream ( str ) ;", "ccc . set Content Type ( content Type ) ;", "streams . add ( ccc ) ;", "return streams ; }"]}
{"ids": "71247", "code": ["void write Repeated Sqrt ( DD xdd ) {", "int count = NUM_ ;", "while ( xdd . double Value ( ) > NUM_ ) {", "count ++ ;", "double x = xdd . double Value ( ) ;", "DD x Sqrt = xdd . sqrt ( ) ;", "String s = x Sqrt . to String ( ) ;", "DD x Sqrt 2 = DD . parse ( s ) ;", "DD xx = x Sqrt 2 . multiply ( x Sqrt 2 ) ;", "double err = Math . abs ( xx . double Value ( ) - x ) ;", "xdd = x Sqrt ;", "DD dist From 1 DD = x Sqrt . subtract ( DD . value Of ( NUM_ ) ) ;", "double dist From 1 = dist From 1 DD . double Value ( ) ;", "if ( Math . abs ( dist From 1 ) < NUM_ ) break ; } }"]}
{"ids": "47525", "code": ["@ Override public String format ( Date Time Formatter formatter ) {", "Objects . require Non Null ( formatter , STR_ ) ;", "return formatter . format ( this ) ; }"]}
{"ids": "57009", "code": ["void verify Unique Xids ( List < OF Message > msgs ) {", "if ( seen Xids == null ) seen Xids = new Hash Set < Long > ( ) ;", "for ( OF Message m : msgs ) {", "long xid = m . get Xid ( ) ;", "assert True ( STR_ , xid != NUM_ ) ;", "assert False ( STR_ + xid + STR_ , seen Xids . contains ( xid ) ) ;", "seen Xids . add ( xid ) ; } }"]}
{"ids": "17506", "code": ["public static boolean has Extension ( String extension ) {", "if ( extension == null || extension . is Empty ( ) ) {", "return false ; }", "return extension To Mime Type Map . contains Key ( extension ) ; }"]}
{"ids": "71495", "code": ["private float apply Friction ( float velocity , float simulation Rate ) {", "if ( is Zero ( velocity ) ) {", "velocity = NUM_ ; }", "else if ( velocity > NUM_ ) {", "velocity = Math . max ( NUM_ , velocity - ( FRICTION * simulation Rate ) ) ; }", "else {", "velocity = Math . min ( NUM_ , velocity + ( FRICTION * simulation Rate ) ) ; }", "return velocity ; }"]}
{"ids": "8308", "code": ["static Boolean real Is J Unit 4 Test ( Class script Class , Groovy Class Loader loader ) {", "boolean is Test = false ;", "try {", "try {", "Class run With Annotation Class = loader . load Class ( STR_ ) ;", "Annotation annotation = script Class . get Annotation ( run With Annotation Class ) ;", "if ( annotation != null ) {", "is Test = true ; }", "else {", "Class test Annotation Class = loader . load Class ( STR_ ) ;", "Method [ ] methods = script Class . get Methods ( ) ;", "for ( int i = NUM_ ; i < methods . length ; i ++ ) {", "Method method = methods [ i ] ;", "annotation = method . get Annotation ( test Annotation Class ) ;", "if ( annotation != null ) {", "is Test = true ;", "break ; } } } }", "catch ( Class Not Found Exception e ) { } }", "catch ( Throwable e ) { }", "return is Test ? Boolean . TRUE : Boolean . FALSE ; }"]}
{"ids": "16833", "code": ["private Dimension layout Size ( Container target , boolean preferred ) {", "synchronized ( target . get Tree Lock ( ) ) {", "int target Width = target . get Size ( ) . width ;", "if ( target Width == NUM_ ) {", "target Width = Integer . MAX VALUE ; }", "int hgap = get Hgap ( ) ;", "int vgap = get Vgap ( ) ;", "Insets insets = target . get Insets ( ) ;", "int horizontal Insets And Gap = insets . left + insets . right + ( hgap * NUM_ ) ;", "int max Width = target Width - horizontal Insets And Gap ;", "Dimension dim = new Dimension ( NUM_ , NUM_ ) ;", "int row Width = NUM_ ;", "int row Height = NUM_ ;", "int nmembers = target . get Component Count ( ) ;", "for ( int i = NUM_ ; i < nmembers ; i ++ ) {", "Component m = target . get Component ( i ) ;", "if ( m . is Visible ( ) ) {", "Dimension d = preferred ? m . get Preferred Size ( ) : m . get Minimum Size ( ) ;", "if ( row Width + d . width > max Width ) {", "add Row ( dim , row Width , row Height ) ;", "row Width = NUM_ ;", "row Height = NUM_ ; }", "if ( row Width != NUM_ ) {", "row Width += hgap ; }", "row Width += d . width ;", "row Height = Math . max ( row Height , d . height ) ; } }", "add Row ( dim , row Width , row Height ) ;", "dim . width += horizontal Insets And Gap ;", "dim . height += insets . top + insets . bottom + vgap * NUM_ ;", "Container scroll Pane = Swing Utilities . get Ancestor Of Class ( J Scroll Pane . class , target ) ;", "if ( scroll Pane != null ) {", "dim . width -= ( hgap + NUM_ ) ; }", "return dim ; } }"]}
{"ids": "64419", "code": ["private static String do Get Path ( String filename , int separator Add ) {", "if ( filename == null ) {", "return null ; }", "int prefix = get Prefix Length ( filename ) ;", "if ( prefix < NUM_ ) {", "return null ; }", "int index = index Of Last Separator ( filename ) ;", "int end Index = index + separator Add ;", "if ( prefix >= filename . length ( ) || index < NUM_ || prefix >= end Index ) {", "return STR_ ; }", "return filename . substring ( prefix , end Index ) ; }"]}
{"ids": "81298", "code": ["protected void reduce Parse Tree ( Compilation Unit Declaration unit ) {", "Type Declaration [ ] types = unit . types ;", "for ( int i = NUM_ , l = types . length ; i < l ; i ++ ) purge Method Statements ( types [ i ] , true ) ; }"]}
{"ids": "2756", "code": ["public synchronized void write To ( Output Stream out ) throws IO Exception {", "int remaining = count ;", "for ( byte [ ] buf : buffers ) {", "int c = Math . min ( buf . length , remaining ) ;", "out . write ( buf , NUM_ , c ) ;", "remaining -= c ;", "if ( remaining == NUM_ ) {", "break ; } } }"]}
{"ids": "32958", "code": ["public static long find Revision ( final List < String > output , final Pattern pattern ) {", "long revision = - NUM_ ;", "for ( final String line : output ) {", "final Matcher matcher = pattern . matcher ( line ) ;", "if ( matcher . find ( ) ) {", "revision = Long . parse Long ( matcher . group ( NUM_ ) ) ;", "break ; } }", "return revision ; }"]}
{"ids": "63775", "code": ["protected int choose High Water Mark ( int capacity , double max Load ) {", "return Math . min ( capacity - NUM_ , ( int ) ( capacity * max Load ) ) ; }"]}
{"ids": "33725", "code": ["private Access Grant create Access Grant ( Map < String , String > params ) {", "Access Grant access Grant = new Access Grant ( ) ;", "if ( params . get ( STR_ ) != null ) {", "String access Token = params . get ( STR_ ) ;", "Integer expires = null ;", "if ( params . get ( STR_ ) != null ) {", "expires = Integer . value Of ( params . get ( STR_ ) ) ; }", "access Grant . set Key ( access Token ) ;", "access Grant . set Attribute ( STR_ , expires ) ; }", "access Grant . set Provider Id ( m Provider Name . to String ( ) ) ;", "return access Grant ; }"]}
{"ids": "10537", "code": ["protected final boolean load To Have At Least ( int min Available ) throws IO Exception {", "if ( input Stream == null ) {", "return false ; }", "int amount = input End - input Ptr ;", "if ( amount > NUM_ && input Ptr > NUM_ ) {", "curr Input Processed += input Ptr ;", "curr Input Row Start -= input Ptr ;", "System . arraycopy ( input Buffer , input Ptr , input Buffer , NUM_ , amount ) ;", "input End = amount ; }", "else {", "input End = NUM_ ; }", "input Ptr = NUM_ ;", "while ( input End < min Available ) {", "int count = input Stream . read ( input Buffer , input End , input Buffer . length - input End ) ;", "if ( count < NUM_ ) {", "close Input ( ) ;", "if ( count == NUM_ ) {", "throw new IO Exception ( STR_ + amount + STR_ ) ; }", "return false ; }", "input End += count ; }", "return true ; }"]}
{"ids": "84783", "code": ["public double log Pdf ( double x ) {", "return Math . log ( pdf ( x ) ) ; }"]}
{"ids": "55876", "code": ["private void select File ( int title Msg , int button Msg , String settings Name , String default Dir , int dialog , int result ) {", "set Auto Mode ( Auto Mode . OFF ) ;", "String action = STR_ ;", "Intent i = new Intent ( action ) ;", "String current File = settings . get String ( settings Name , STR_ ) ;", "String sep = File . separator ;", "if ( ! current File . contains ( sep ) ) current File = Environment . get External Storage Directory ( ) + sep + default Dir + sep + current File ;", "i . set Data ( Uri . from File ( new File ( current File ) ) ) ;", "i . put Extra ( STR_ , get String ( title Msg ) ) ;", "i . put Extra ( STR_ , get String ( button Msg ) ) ;", "try {", "start Activity For Result ( i , result ) ; }", "catch ( Activity Not Found Exception e ) {", "remove Dialog ( dialog ) ;", "show Dialog ( dialog ) ; } }"]}
{"ids": "26452", "code": ["public String timer String ( int level , String message ) {", "String Builder ret String Buf = new String Builder ( ) ;", "for ( int i = NUM_ ; i < level ; i ++ ) {", "ret String Buf . append ( STR_ ) ; }", "ret String Buf . append ( STR_ ) ;", "String time Since Start Str = String . value Of ( time Since Start ( ) ) ;", "ret String Buf . append ( time Since Start Str + STR_ ) ;", "String time Since Last Str = String . value Of ( time Since Last ( ) ) ;", "ret String Buf . append ( time Since Last Str ) ;", "ret String Buf . append ( STR_ ) ;", "int spacecount = NUM_ + ( NUM_ * level ) - ret String Buf . length ( ) ;", "for ( int i = NUM_ ; i < spacecount ; i ++ ) {", "ret String Buf . append ( STR_ ) ; }", "ret String Buf . append ( message ) ;", "last Message Time = System . current Time Millis ( ) ;", "String ret String = ret String Buf . to String ( ) ;", "if ( log && Debug . timing On ( ) ) Debug . log Timing ( ret String , module ) ;", "return ret String ; }"]}
{"ids": "42285", "code": ["public static int recompile With Opt ( Normal Method method ) {", "if ( VM . Build For Opt Compiler ) {", "Compilation Plan plan = new Compilation Plan ( method , ( Optimization Plan Element [ ] ) optimization Plan , null , ( Opt Options ) options ) ;", "return recompile With Opt ( plan ) ; }", "else {", "if ( VM . Verify Assertions ) VM . assert ( VM . NOT REACHED ) ;", "return - NUM_ ; } }"]}
{"ids": "21213", "code": ["public String find Match ( Pattern pattern , String text ) {", "return find Match ( pattern , text , NUM_ ) ; }"]}
{"ids": "53386", "code": ["private void add Hit ( String cname , Class < ? > c ) {", "if ( len == names . length ) {", "final int nl = ( len << NUM_ ) + NUM_ ;", "names = Arrays . copy Of ( names , nl ) ;", "clazzes = Arrays . copy Of ( clazzes , nl ) ; }", "names [ len ] = cname ;", "clazzes [ len ] = c ;", "++ len ; }"]}
{"ids": "4628", "code": ["private Object query Command Value ( final String command Identifier ) {", "Check . not Null ( command Identifier , STR_ ) ;", "final String Buffer cmd = new String Buffer ( ) ;", "cmd . append ( STR_ ) ;", "cmd . append ( command Identifier ) ;", "cmd . append ( STR_ ) ;", "return browser . evaluate ( cmd . to String ( ) ) ; }"]}
{"ids": "41683", "code": ["public void line ( double x , double y ) {", "Line line = new Line ( x , y ) ;", "if ( x < min X ) {", "min X = x ; }", "if ( y < min Y ) {", "min Y = y ; }", "if ( x > max X ) {", "max X = x ; }", "if ( y > max Y ) {", "max Y = y ; }", "elements . add ( line ) ; }"]}
{"ids": "72566", "code": ["@ Override public List < Cluster < T > > cluster ( final Collection < T > points ) throws Null Argument Exception {", "Math Utils . check Not Null ( points ) ;", "final List < Cluster < T > > clusters = new Array List < Cluster < T > > ( ) ;", "final Map < Clusterable , Point Status > visited = new Hash Map < Clusterable , Point Status > ( ) ;", "for ( final T point : points ) {", "if ( visited . get ( point ) != null ) {", "continue ; }", "final List < T > neighbors = get Neighbors ( point , points ) ;", "if ( neighbors . size ( ) >= min Pts ) {", "final Cluster < T > cluster = new Cluster < T > ( ) ;", "clusters . add ( expand Cluster ( cluster , point , neighbors , points , visited ) ) ; }", "else {", "visited . put ( point , Point Status . NOISE ) ; } }", "return clusters ; }"]}
{"ids": "53855", "code": ["private static void mat 4 util inplace rotate ( float [ ] in Out Matrix , float euler Radians X , float euler Radians Y , float euler Radians Z ) {", "float cos rx = ( float ) Math . cos ( euler Radians X ) ;", "float cos ry = ( float ) Math . cos ( euler Radians Y ) ;", "float cos rz = ( float ) Math . cos ( euler Radians Z ) ;", "float sin rx = ( float ) Math . sin ( euler Radians X ) ;", "float sin ry = ( float ) Math . sin ( euler Radians Y ) ;", "float sin rz = ( float ) Math . sin ( euler Radians Z ) ;", "float b 00 = cos rz * cos ry ;", "float b 10 = sin rz * cos ry ;", "float b 20 = - sin ry ;", "float b 30 = NUM_ ;", "float b 01 = - sin rz * cos rx + cos rz * sin ry * sin rx ;", "float b 11 = cos rz * cos rx + sin rz * sin ry * sin rx ;", "float b 21 = cos ry * sin rx ;", "float b 31 = NUM_ ;", "float b 02 = sin rz * sin rx + cos rz * sin ry * cos rx ;", "float b 12 = - cos rz * sin rx + sin rz * sin ry * cos rx ;", "float b 22 = cos ry * cos rx ;", "float b 32 = NUM_ ;", "float b 03 = NUM_ ;", "float b 13 = NUM_ ;", "float b 23 = NUM_ ;", "float b 33 = NUM_ ;", "float a 00 = in Out Matrix [ NUM_ ] ;", "float a 10 = in Out Matrix [ NUM_ ] ;", "float a 20 = in Out Matrix [ NUM_ ] ;", "float a 30 = in Out Matrix [ NUM_ ] ;", "float a 01 = in Out Matrix [ NUM_ ] ;", "float a 11 = in Out Matrix [ NUM_ ] ;", "float a 21 = in Out Matrix [ NUM_ ] ;", "float a 31 = in Out Matrix [ NUM_ ] ;", "float a 02 = in Out Matrix [ NUM_ ] ;", "float a 12 = in Out Matrix [ NUM_ ] ;", "float a 22 = in Out Matrix [ NUM_ ] ;", "float a 32 = in Out Matrix [ NUM_ ] ;", "float a 03 = in Out Matrix [ NUM_ ] ;", "float a 13 = in Out Matrix [ NUM_ ] ;", "float a 23 = in Out Matrix [ NUM_ ] ;", "float a 33 = in Out Matrix [ NUM_ ] ;", "in Out Matrix [ NUM_ ] = a 00 * b 00 + a 01 * b 10 + a 02 * b 20 + a 03 * b 30 ;", "in Out Matrix [ NUM_ ] = a 10 * b 00 + a 11 * b 10 + a 12 * b 20 + a 13 * b 30 ;", "in Out Matrix [ NUM_ ] = a 20 * b 00 + a 21 * b 10 + a 22 * b 20 + a 23 * b 30 ;", "in Out Matrix [ NUM_ ] = a 30 * b 00 + a 31 * b 10 + a 32 * b 20 + a 33 * b 30 ;", "in Out Matrix [ NUM_ ] = a 00 * b 01 + a 01 * b 11 + a 02 * b 21 + a 03 * b 31 ;", "in Out Matrix [ NUM_ ] = a 10 * b 01 + a 11 * b 11 + a 12 * b 21 + a 13 * b 31 ;", "in Out Matrix [ NUM_ ] = a 20 * b 01 + a 21 * b 11 + a 22 * b 21 + a 23 * b 31 ;", "in Out Matrix [ NUM_ ] = a 30 * b 01 + a 31 * b 11 + a 32 * b 21 + a 33 * b 31 ;", "in Out Matrix [ NUM_ ] = a 00 * b 02 + a 01 * b 12 + a 02 * b 22 + a 03 * b 32 ;", "in Out Matrix [ NUM_ ] = a 10 * b 02 + a 11 * b 12 + a 12 * b 22 + a 13 * b 32 ;", "in Out Matrix [ NUM_ ] = a 20 * b 02 + a 21 * b 12 + a 22 * b 22 + a 23 * b 32 ;", "in Out Matrix [ NUM_ ] = a 30 * b 02 + a 31 * b 12 + a 32 * b 22 + a 33 * b 32 ;", "in Out Matrix [ NUM_ ] = a 00 * b 03 + a 01 * b 13 + a 02 * b 23 + a 03 * b 33 ;", "in Out Matrix [ NUM_ ] = a 10 * b 03 + a 11 * b 13 + a 12 * b 23 + a 13 * b 33 ;", "in Out Matrix [ NUM_ ] = a 20 * b 03 + a 21 * b 13 + a 22 * b 23 + a 23 * b 33 ;", "in Out Matrix [ NUM_ ] = a 30 * b 03 + a 31 * b 13 + a 32 * b 23 + a 33 * b 33 ; }"]}
{"ids": "73966", "code": ["@ Override public void mouse Pressed ( Mouse Event evt ) {", "int pos = ( slider . get Orientation ( ) == J Slider . HORIZONTAL ) ? evt . get X ( ) : evt . get Y ( ) ;", "int loc = get Location For Value ( get Snapped Value ( evt ) ) ;", "this . offset = ( loc < NUM_ ) ? NUM_ : pos - loc ; }"]}
{"ids": "74864", "code": ["private String print D Format ( final long x ) {", "return print D Format ( Long . to String ( x ) ) ; }"]}
{"ids": "84209", "code": ["public void write ( int ch ) throws IO Exception {", "Output Stream os = get Output Stream ( ) ;", "os . write ( STR_ ) ;", "os . write ( NUM_ ) ;", "os . write ( NUM_ ) ;", "os . write ( ch ) ; }"]}
{"ids": "17734", "code": ["public static < S > Service Loader < S > load Installed ( Class < S > service ) {", "Class Loader cl = Class Loader . get System Class Loader ( ) ;", "if ( cl != null ) {", "while ( cl . get Parent ( ) != null ) {", "cl = cl . get Parent ( ) ; } }", "return Service Loader . load ( service , cl ) ; }"]}
{"ids": "1577", "code": ["public static Pattern glob 2 Pattern ( String ... globs ) {", "final String Builder regex = new String Builder ( ) ;", "boolean need Or = false ;", "for ( String glob : globs ) {", "if ( need Or ) {", "regex . append ( STR_ ) ; }", "int i = NUM_ , len = glob . length ( ) ;", "while ( i < len ) {", "char c = glob . char At ( i ++ ) ;", "switch ( c ) {", "case STR_ :", "if ( i < len && glob . char At ( i ) == STR_ ) {", "regex . append ( STR_ ) ;", "i ++ ; }", "else {", "regex . append ( STR_ ) ; }", "break ;", "case STR_ :", "regex . append ( STR_ ) ;", "break ;", "default :", "if ( is Regex Meta ( c ) ) {", "regex . append ( STR_ ) ; }", "regex . append ( c ) ; } }", "need Or = true ; }", "return Pattern . compile ( regex . to String ( ) , NUM_ ) ; }"]}
{"ids": "80986", "code": ["public static boolean contains Trace Explorer Module Conflict ( String root Module Name ) {", "String root Module File Name = root Module Name ;", "if ( ! root Module Name . ends With ( Resource Helper . TLA EXTENSION ) ) {", "root Module File Name = Resource Helper . get Module File Name ( root Module Name ) ; }", "List < String > extended Module Names = Toolbox Handle . get Extended Modules ( root Module File Name ) ;", "Iterator < String > it = extended Module Names . iterator ( ) ;", "while ( it . has Next ( ) ) {", "String module Name = it . next ( ) ;", "if ( module Name . equals ( TE FILE TLA ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "5919", "code": ["private String build Full Message ( String msg , Object arg 0 , Object arg 1 , Object arg 2 , Object [ ] arg Array ) {", "String Builder sb = null ;", "int last Index = NUM_ ;", "int arg C = NUM_ ;", "while ( true ) {", "int arg Index = msg . index Of ( ARG STRING , last Index ) ;", "if ( arg Index == - NUM_ ) {", "break ; }", "if ( sb == null ) {", "sb = new String Builder ( NUM_ ) ; }", "sb . append ( msg , last Index , arg Index ) ;", "last Index = arg Index + ARG STRING LENGTH ;", "if ( arg Array == null ) {", "if ( arg C == NUM_ ) {", "append Arg ( sb , arg 0 ) ; }", "else if ( arg C == NUM_ ) {", "append Arg ( sb , arg 1 ) ; }", "else if ( arg C == NUM_ ) {", "append Arg ( sb , arg 2 ) ; }", "else { } }", "else if ( arg C < arg Array . length ) {", "append Arg ( sb , arg Array [ arg C ] ) ; }", "else { }", "arg C ++ ; }", "if ( sb == null ) {", "return msg ; }", "else {", "sb . append ( msg , last Index , msg . length ( ) ) ;", "return sb . to String ( ) ; } }"]}
{"ids": "81273", "code": ["protected void remove From Parent Info ( Openable child ) {", "Openable parent = ( Openable ) child . get Parent ( ) ;", "if ( parent != null && parent . is Open ( ) ) {", "try {", "Openable Element Info info = ( Openable Element Info ) parent . get Element Info ( ) ;", "info . remove Child ( child ) ; }", "catch ( Java Model Exception e ) { } } }"]}
{"ids": "28765", "code": ["public void remove All Update Listeners ( ) {", "if ( m Update Listeners == null ) {", "return ; }", "m Update Listeners . clear ( ) ;", "m Update Listeners = null ; }"]}
{"ids": "21881", "code": ["public void execute Plan ( Task Completer completer , String success Message , Workflow Callback Handler callback Handler , Object [ ] callback Handler Args , Workflow Rollback Handler rollback Handler , Object [ ] rollback Handler Args ) throws Workflow Exception {", "this . callback Handler = callback Handler ;", "if ( callback Handler Args != null ) {", "this . callback Handler Args = callback Handler Args . clone ( ) ; }", "this . rollback Handler = rollback Handler ;", "if ( rollback Handler Args != null ) {", "this . rollback Handler Args = rollback Handler Args . clone ( ) ; }", "this . task Completer = completer ;", "this . success Message = success Message ;", "service . execute Plan ( this ) ; }"]}
{"ids": "14003", "code": ["public boolean is Mutable ( ) {", "return mutable ; }"]}
{"ids": "15447", "code": ["public void handle Request ( Request Context rc ) throws CLI Exception {", "super . handle Request ( rc ) ;", "ldap Login ( ) ;", "String service Name = get String Option Value ( I Argument . SERVICE NAME ) ;", "String sub Config Name = get String Option Value ( I Argument . SUB CONFIGURATION NAME ) ;", "String realm Name = get String Option Value ( I Argument . REALM NAME ) ;", "if ( ( realm Name == null ) || ( realm Name . length ( ) == NUM_ ) ) {", "delete Sub Config To Root ( service Name , sub Config Name ) ; }", "else {", "delete Sub Config From Realm ( realm Name , service Name , sub Config Name ) ; } }"]}
{"ids": "43828", "code": ["public void enforce Context ( Resource ... contexts ) {", "Open RDF Util . verify Context Not Null ( contexts ) ;", "this . contexts = Arrays . copy Of ( contexts , contexts . length ) ; }"]}
{"ids": "56732", "code": ["protected void run Upload ( Integer num Of Threads , Hash Map < String , String > attributes , Boolean create New Version , Boolean force ) throws Exception {", "run Upload ( num Of Threads , attributes , create New Version , force , null , null ) ; }"]}
{"ids": "13519", "code": ["public final Collection < Component > components ( ) {", "return new Hash Set < > ( components . values ( ) ) ; }"]}
{"ids": "37959", "code": ["protected boolean [ ] can Predict ( boolean nominal Predictor , boolean numeric Predictor , boolean string Predictor , boolean date Predictor , boolean relational Predictor , boolean multi Instance , int class Type ) {", "print ( STR_ ) ;", "print Attribute Summary ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type ) ;", "print ( STR_ ) ;", "Array List < String > accepts = new Array List < String > ( ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "int num Train = get Num Instances ( ) , num Classes = NUM_ , missing Level = NUM_ ;", "boolean predictor Missing = false , class Missing = false ;", "return run Basic Test ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type , missing Level , predictor Missing , class Missing , num Train , num Classes , accepts ) ; }"]}
{"ids": "52322", "code": ["public void collapse ( ) {", "collapse ( true ) ; }"]}
{"ids": "39130", "code": ["public int num Instances ( ) {", "return m Instances . size ( ) ; }"]}
{"ids": "13276", "code": ["@ Override public void start Document ( XML Locator locator , String encoding , Namespace Context namespace Context , Augmentations augs ) throws XNI Exception {", "f Namespace Context = namespace Context ;", "try {", "if ( f Document Handler != null ) {", "if ( locator != null ) {", "f Document Handler . set Document Locator ( new Locator Proxy ( locator ) ) ; }", "if ( f Document Handler != null ) {", "f Document Handler . start Document ( ) ; } }", "if ( f Content Handler != null ) {", "if ( locator != null ) {", "f Content Handler . set Document Locator ( new Locator Proxy ( locator ) ) ; }", "if ( f Content Handler != null ) {", "f Content Handler . start Document ( ) ; } } }", "catch ( SAX Exception e ) {", "throw new XNI Exception ( e ) ; } }"]}
{"ids": "54826", "code": ["public static double parse Number Percent With Separate Range ( FXG Node node , String value , String name , double min Number , double max Number , double min Percent , double max Percent , double default Value ) {", "if ( value . length ( ) != NUM_ && value . char At ( value . length ( ) - NUM_ ) == STR_ ) {", "String double Value = value . substring ( NUM_ , value . length ( ) - NUM_ ) ;", "try {", "return parse Double ( node , double Value , name , min Percent , max Percent , default Value ) ; }", "catch ( FXG Exception e ) {", "throw new FXG Exception ( node . get Start Line ( ) , node . get Start Column ( ) , STR_ , name , value ) ; } }", "else {", "return parse Double ( node , value , name , min Number , max Number , default Value ) ; } }"]}
{"ids": "35186", "code": ["private void check Download Can Proceed ( ) throws Stop Request Exception {", "if ( clock . interval Less Than ( Clock . Interval . ONE SECOND ) ) {", "return ; }", "clock . start Interval ( ) ;", "check Is Paused Or Canceled ( ) ;", "check Client Rules ( ) ; }"]}
{"ids": "12348", "code": ["private void calculate Color ( int coord ) {", "coord = coord - m Bar Pointer Halo Radius ;", "if ( coord < NUM_ ) {", "coord = NUM_ ; }", "else if ( coord > m Bar Length ) {", "coord = m Bar Length ; }", "m Color = Color . HSV To Color ( Math . round ( m Pos To Opac Factor * coord ) , m HSV Color ) ;", "if ( Color . alpha ( m Color ) > NUM_ ) {", "m Color = Color . HSV To Color ( m HSV Color ) ; }", "else if ( Color . alpha ( m Color ) < NUM_ ) {", "m Color = Color . TRANSPARENT ; } }"]}
{"ids": "30791", "code": ["private void delete Event ( Event Reg Key Expiration reg Expiration , Event Reg reg ) {", "listeners . dec ( ) ;", "synchronized ( reg ) {", "Entry Rep [ ] tmpls = reg . tmpl . attribute Set Templates ;", "if ( tmpls != null ) {", "for ( int i = tmpls . length ; -- i >= NUM_ ; ) {", "Entry Class eclass = tmpls [ i ] . eclass ;", "eclass . set Num Templates ( eclass . get Num Templates ( ) - NUM_ ) ; } }", "Long id = reg . event ID ;", "event By ID . remove ( id ) ;", "if ( reg Expiration != null ) {", "event By Time . remove ( reg Expiration ) ; }", "else {", "event By Time . remove ( new Event Reg Key Expiration ( reg , reg . lease Expiration ) ) ; }", "if ( reg . tmpl . service ID != null ) {", "Object val = sub Event By Service . get ( reg . tmpl . service ID ) ;", "if ( val == reg ) {", "sub Event By Service . remove ( reg . tmpl . service ID ) ; }", "else {", "Object [ ] array = ( Event Reg [ ] ) val ;", "array = array Del ( array , index Of ( array , reg ) ) ;", "if ( array . length == NUM_ ) val = array [ NUM_ ] ;", "else val = array ;", "sub Event By Service . put ( reg . tmpl . service ID , val ) ; } }", "else {", "sub Event By ID . remove ( id ) ; }", "compute Max Leases ( ) ; } }"]}
{"ids": "54111", "code": ["public String gtid Set ( ) {", "return this . gtid Set != null ? this . gtid Set : null ; }"]}
{"ids": "28865", "code": ["public static Peer create Map Peer ( Map map ) throws Message Exception {", "if ( ! map . contains Key ( PORT ) || ! map . contains Key ( ADDRESS ) ) throw new Message Exception ( STR_ ) ;", "int port = ( int ) ( long ) map . get ( PORT ) ;", "String address = ( String ) map . get ( ADDRESS ) ;", "String peer Id = null ;", "if ( map . contains Key ( PEER ID ) ) peer Id = ( String ) map . get ( PEER ID ) ;", "return new Peer ( peer Id , new Inet Socket Address ( address , port ) ) ; }"]}
{"ids": "32015", "code": ["public static void put Double Field ( Object obj , long field Off , double val ) {", "UNSAFE . put Double ( obj , field Off , val ) ; }"]}
{"ids": "60642", "code": ["public String to OID String ( ) {", "if ( s OID == null ) {", "s OID = STR_ + to String ( ) ; }", "return s OID ; }"]}
{"ids": "26884", "code": ["public void emit Direct ( int task Id , String stream Id , Tuple anchor , List < Object > tuple ) {", "emit Direct ( task Id , stream Id , Arrays . as List ( anchor ) , tuple ) ; }"]}
{"ids": "6417", "code": ["protected void load Value ( String s Value ) {", "s Value = s Value . trim ( ) ;", "try {", "int r = Integer . parse Int ( s Value . substring ( NUM_ , NUM_ ) , NUM_ ) ;", "int g = Integer . parse Int ( s Value . substring ( NUM_ , NUM_ ) , NUM_ ) ;", "int b = Integer . parse Int ( s Value . substring ( NUM_ , NUM_ ) , NUM_ ) ;", "value = new Color ( r , g , b ) ; }", "catch ( Number Format Exception nfe ) {", "revert To Default ( ) ; }", "catch ( String Index Out Of Bounds Exception sioobe ) {", "revert To Default ( ) ; } }"]}
{"ids": "13851", "code": ["public void schema Changed ( String service Name , String version ) {", "update Status ( ) ; }"]}
{"ids": "29810", "code": ["private static int byte Compaction ( int mode , int [ ] codewords , int code Index , String Builder result ) {", "if ( mode == BYTE COMPACTION MODE LATCH ) {", "int count = NUM_ ;", "long value = NUM_ ;", "char [ ] decoded Data = new char [ NUM_ ] ;", "int [ ] byte Compacted Codewords = new int [ NUM_ ] ;", "boolean end = false ;", "int next Code = codewords [ code Index ++ ] ;", "while ( ( code Index < codewords [ NUM_ ] ) && ! end ) {", "byte Compacted Codewords [ count ++ ] = next Code ;", "value = NUM_ * value + next Code ;", "next Code = codewords [ code Index ++ ] ;", "if ( next Code == TEXT COMPACTION MODE LATCH || next Code == BYTE COMPACTION MODE LATCH || next Code == NUMERIC COMPACTION MODE LATCH || next Code == BYTE COMPACTION MODE LATCH 6 || next Code == BEGIN MACRO PDF 417 CONTROL BLOCK || next Code == BEGIN MACRO PDF 417 OPTIONAL FIELD || next Code == MACRO PDF 417 TERMINATOR ) {", "code Index -- ;", "end = true ; }", "else {", "if ( ( count % NUM_ == NUM_ ) && ( count > NUM_ ) ) {", "for ( int j = NUM_ ; j < NUM_ ; ++ j ) {", "decoded Data [ NUM_ - j ] = ( char ) ( value % NUM_ ) ;", "value >>= NUM_ ; }", "result . append ( decoded Data ) ;", "count = NUM_ ; } } }", "if ( code Index == codewords [ NUM_ ] && next Code < TEXT COMPACTION MODE LATCH ) {", "byte Compacted Codewords [ count ++ ] = next Code ; }", "for ( int i = NUM_ ; i < count ; i ++ ) {", "result . append ( ( char ) byte Compacted Codewords [ i ] ) ; } }", "else if ( mode == BYTE COMPACTION MODE LATCH 6 ) {", "int count = NUM_ ;", "long value = NUM_ ;", "boolean end = false ;", "while ( code Index < codewords [ NUM_ ] && ! end ) {", "int code = codewords [ code Index ++ ] ;", "if ( code < TEXT COMPACTION MODE LATCH ) {", "count ++ ;", "value = NUM_ * value + code ; }", "else {", "if ( code == TEXT COMPACTION MODE LATCH || code == BYTE COMPACTION MODE LATCH || code == NUMERIC COMPACTION MODE LATCH || code == BYTE COMPACTION MODE LATCH 6 || code == BEGIN MACRO PDF 417 CONTROL BLOCK || code == BEGIN MACRO PDF 417 OPTIONAL FIELD || code == MACRO PDF 417 TERMINATOR ) {", "code Index -- ;", "end = true ; } }", "if ( ( count % NUM_ == NUM_ ) && ( count > NUM_ ) ) {", "char [ ] decoded Data = new char [ NUM_ ] ;", "for ( int j = NUM_ ; j < NUM_ ; ++ j ) {", "decoded Data [ NUM_ - j ] = ( char ) ( value & NUM_ ) ;", "value >>= NUM_ ; }", "result . append ( decoded Data ) ;", "count = NUM_ ; } } }", "return code Index ; }"]}
{"ids": "57586", "code": ["public int add And Get ( T obj , int delta ) {", "for ( ; ; ) {", "int current = get ( obj ) ;", "int next = current + delta ;", "if ( compare And Set ( obj , current , next ) ) return next ; } }"]}
{"ids": "29549", "code": ["public KC Response serve ( String uri , String method , Properties header , Properties parms , Properties files ) {", "return serve File ( uri , header , my Root Dir , true ) ; }"]}
{"ids": "25668", "code": ["protected void fill Mem Data ( Object data , int [ ] posits , int length , Object output , int output Offset , int dim ) {", "if ( data instanceof Object [ ] ) {", "Object [ ] xo = ( Object [ ] ) data ;", "fill Mem Data ( xo [ posits [ dim ] ] , posits , length , output , output Offset , dim + NUM_ ) ; }", "else {", "int start From = posits [ dim ] ;", "int start To = output Offset ;", "int copy Length = length ;", "if ( posits [ dim ] < NUM_ ) {", "start From -= posits [ dim ] ;", "start To -= posits [ dim ] ;", "copy Length += posits [ dim ] ; }", "if ( posits [ dim ] + length > this . dims [ dim ] ) {", "copy Length -= posits [ dim ] + length - this . dims [ dim ] ; }", "System . arraycopy ( data , start From , output , start To , copy Length ) ; } }"]}
{"ids": "8531", "code": ["public Optional < String > start Async Job ( String job Type ) {", "try {", "final Job Runnable job Runnable = find Job Runnable ( job Type ) ;", "Job Info job Info = create Job Info ( job Type ) ;", "repository . mark Job As Running If Possible ( job Info , mutex Job Types For ( job Type ) ) ;", "repository . create Or Update ( job Info ) ;", "return Optional . of ( start Async ( metered ( job Runnable ) , job Info . get Job Id ( ) ) ) ; }", "catch ( Job Blocked Exception e ) {", "LOG . info ( e . get Message ( ) ) ;", "return Optional . empty ( ) ; } }"]}
{"ids": "17754", "code": ["public boolean is Legal Replacement ( byte [ ] replacement ) {", "if ( decoder == null ) {", "decoder = charset . new Decoder ( ) ;", "decoder . on Malformed Input ( Coding Error Action . REPORT ) ;", "decoder . on Unmappable Character ( Coding Error Action . REPORT ) ; }", "Byte Buffer in = Byte Buffer . wrap ( replacement ) ;", "Char Buffer out = Char Buffer . allocate ( ( int ) ( replacement . length * decoder . max Chars Per Byte ( ) ) ) ;", "Coder Result result = decoder . decode ( in , out , true ) ;", "return ! result . is Error ( ) ; }"]}
{"ids": "51058", "code": ["public static void adapt Table ( Constraint Table Layout table ) {", "int width = table . get Width ( ) ;", "int height = table . get Height ( ) ;", "Constraint Widget . Dimension Behaviour horizontal Behaviour = table . get Horizontal Dimension Behaviour ( ) ;", "Constraint Widget . Dimension Behaviour vertical Behaviour = table . get Vertical Dimension Behaviour ( ) ;", "table . set Horizontal Dimension Behaviour ( Constraint Widget . Dimension Behaviour . WRAP CONTENT ) ;", "table . set Vertical Dimension Behaviour ( Constraint Widget . Dimension Behaviour . WRAP CONTENT ) ;", "table . layout ( ) ;", "table . layout ( ) ;", "table . set Min Width ( table . get Width ( ) ) ;", "table . set Min Height ( table . get Height ( ) ) ;", "table . compute Guidelines Percent Positions ( ) ;", "table . set Horizontal Dimension Behaviour ( horizontal Behaviour ) ;", "table . set Vertical Dimension Behaviour ( vertical Behaviour ) ;", "table . set Width ( width < table . get Min Width ( ) ? table . get Min Width ( ) : width ) ;", "table . set Height ( height < table . get Min Height ( ) ? table . get Min Height ( ) : height ) ;", "table . layout ( ) ; }"]}
{"ids": "31946", "code": ["public static < V , C extends Collection < ? super V > > C add All ( C c , V ... vals ) {", "Collections . add All ( c , vals ) ;", "return c ; }"]}
{"ids": "63868", "code": ["public static void add Strut ( J Component b , int layout , int size ) {", "if ( size < NUM_ ) return ;", "b . add ( get Axis ( b , layout ) == Box Layout . X AXIS ? Box . create Horizontal Strut ( size ) : Box . create Vertical Strut ( size ) ) ; }"]}
{"ids": "35486", "code": ["public void element Type ( String name , int model , int member Of , int flags ) {", "Element Type e = new Element Type ( name , model , member Of , flags , this ) ;", "the Element Types . put ( name . to Lower Case ( ) , e ) ;", "if ( member Of == M ROOT ) the Root = e ; }"]}
{"ids": "61032", "code": ["public int array Index Scale ( Class clazz ) {", "if ( ! clazz . is Array ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return array Index Scale 0 ( clazz ) ; }"]}
{"ids": "35235", "code": ["public static String Pool read String Pool ( Byte Buffer buffer , String Pool Header string Pool Header ) {", "long begin Pos = buffer . position ( ) ;", "long [ ] offsets = new long [ ( int ) string Pool Header . get String Count ( ) ] ;", "if ( string Pool Header . get String Count ( ) > NUM_ ) {", "for ( int idx = NUM_ ; idx < string Pool Header . get String Count ( ) ; idx ++ ) {", "offsets [ idx ] = Buffers . read U Int ( buffer ) ; } }", "boolean utf 8 = ( string Pool Header . get Flags ( ) & String Pool Header . UTF 8 FLAG ) != NUM_ ;", "long string Pos = begin Pos + string Pool Header . get Strings Start ( ) - string Pool Header . get Header Size ( ) ;", "buffer . position ( ( int ) string Pos ) ;", "String Pool Entry [ ] entries = new String Pool Entry [ offsets . length ] ;", "for ( int i = NUM_ ; i < offsets . length ; i ++ ) {", "entries [ i ] = new String Pool Entry ( i , string Pos + offsets [ i ] ) ; }", "String last Str = null ;", "long last Offset = - NUM_ ;", "String Pool string Pool = new String Pool ( ( int ) string Pool Header . get String Count ( ) ) ;", "for ( String Pool Entry entry : entries ) {", "if ( entry . offset == last Offset ) {", "string Pool . set ( entry . index , last Str ) ;", "continue ; }", "buffer . position ( ( int ) entry . offset ) ;", "last Offset = entry . offset ;", "String str = Parse Utils . read String ( buffer , utf 8 ) ;", "last Str = str ;", "string Pool . set ( entry . index , str ) ; }", "buffer . position ( ( int ) ( begin Pos + string Pool Header . get Body Size ( ) ) ) ;", "return string Pool ; }"]}
{"ids": "40834", "code": ["public String str Rep ( ) {", "return STR_ + rank Team Poll Score + STR_ + abbr + STR_ + wins + STR_ + losses + STR_ ; }"]}
{"ids": "9338", "code": ["public static < V > int add Distinct List ( List < V > source List , List < V > entry List ) {", "if ( source List == null || is Empty ( entry List ) ) {", "return NUM_ ; }", "int source Count = source List . size ( ) ;", "for ( V entry : entry List ) {", "if ( ! source List . contains ( entry ) ) {", "source List . add ( entry ) ; } }", "return source List . size ( ) - source Count ; }"]}
{"ids": "21616", "code": ["private void record RP Operation ( Db Client db Client , Operation Type Enum op Type , Operation . Status status , Object ... ext Param ) {", "try {", "boolean op Status = ( Operation . Status . ready == status ) ? true : false ;", "String ev Type ;", "ev Type = op Type . get Ev Type ( op Status ) ;", "String ev Desc = op Type . get Description ( ) ;", "String op Stage = Audit Log Manager . AUDITOP END ;", "log . info ( STR_ , op Type . to String ( ) , ev Type . to String ( ) + STR_ + ev Desc ) ;", "record Bourne RP Event ( db Client , get Id ( ) , ev Type , status , ev Desc ) ;", "switch ( op Type ) {", "case START RP LINK :", "case STOP RP LINK :", "case PAUSE RP LINK :", "case RESUME RP LINK :", "case FAILOVER RP LINK :", "case FAILOVER CANCEL RP LINK :", "case CHANGE RP IMAGE ACCESS MODE :", "case SWAP RP VOLUME :", "Audit Block Util . audit Block ( db Client , op Type , op Status , op Stage , ext Param ) ;", "break ;", "default :", "log . error ( STR_ ) ; } }", "catch ( Exception e ) {", "log . error ( STR_ , op Type . to String ( ) , e ) ; } }"]}
{"ids": "46227", "code": ["void auto Closing Clip Opened ( Auto Closing Clip clip ) {", "if ( Printer . debug ) Printer . debug ( STR_ ) ;", "int index = NUM_ ;", "synchronized ( auto Closing Clips ) {", "index = get Auto Closing Clip Index ( clip ) ;", "if ( index == - NUM_ ) {", "if ( Printer . debug ) Printer . debug ( STR_ + clip ) ;", "auto Closing Clips . add ( new Clip Info ( clip ) ) ; } }", "if ( index == - NUM_ ) {", "synchronized ( this ) {", "notify All ( ) ; } }", "if ( Printer . debug ) Printer . debug ( STR_ + auto Closing Clips . size ( ) + STR_ ) ; }"]}
{"ids": "46289", "code": ["public boolean implies ( Permission permission ) {", "if ( ! ( permission instanceof Exec Option Permission ) ) return false ;", "Exec Option Permission p = ( Exec Option Permission ) permission ;", "if ( all allowed ) return true ;", "String pname = p . get Name ( ) ;", "Permission x = permissions . get ( pname ) ;", "if ( x != null ) return x . implies ( permission ) ;", "int last , offset ;", "offset = pname . length ( ) - NUM_ ;", "while ( ( last = pname . last Index Of ( STR_ , offset ) ) != - NUM_ ) {", "pname = pname . substring ( NUM_ , last + NUM_ ) + STR_ ;", "x = permissions . get ( pname ) ;", "if ( x != null ) {", "return x . implies ( permission ) ; }", "offset = last - NUM_ ; }", "pname = p . get Name ( ) ;", "offset = pname . length ( ) - NUM_ ;", "while ( ( last = pname . last Index Of ( STR_ , offset ) ) != - NUM_ ) {", "pname = pname . substring ( NUM_ , last + NUM_ ) + STR_ ;", "x = permissions . get ( pname ) ;", "if ( x != null ) {", "return x . implies ( permission ) ; }", "offset = last - NUM_ ; }", "return false ; }"]}
{"ids": "3857", "code": ["public void add Tail Arg ( String arg ) {", "tail Args . add ( arg ) ; }"]}
{"ids": "34180", "code": ["private static byte [ ] save ( Bitmap src , Bitmap . Compress Format format , int quality ) {", "Byte Array Output Stream output Stream = null ;", "try {", "output Stream = new Byte Array Output Stream ( ) ;", "src . compress ( format , quality , output Stream ) ;", "return output Stream . to Byte Array ( ) ; }", "finally {", "if ( output Stream != null ) {", "try {", "output Stream . close ( ) ; }", "catch ( IO Exception e 1 ) {", "e 1 . print Stack Trace ( ) ; } } } }"]}
{"ids": "35375", "code": ["public boolean is External ( Resource input ) {", "return external Resources . contains ( input ) ; }"]}
{"ids": "64259", "code": ["protected final void write D ( Byte Buffer buf , int value ) {", "buf . put Int ( value ) ; }"]}
{"ids": "79006", "code": ["@ Override public Abstract Scanned Result scan Blocklet ( Blocks Chunk Holder blocks Chunk Holder ) throws Query Execution Exception {", "try {", "fill Scanned Result ( blocks Chunk Holder ) ; }", "catch ( Filter Unsupported Exception e ) {", "throw new Query Execution Exception ( e . get Message ( ) ) ; }", "return scanned Result ; }"]}
{"ids": "79245", "code": ["public List < Shopping Cart Item > items ( ) {", "List < Shopping Cart Item > result = Fast List . new Instance ( ) ;", "result . add All ( cart Lines ) ;", "return result ; }"]}
{"ids": "47943", "code": ["Mutable Big Integer ( Big Integer b ) {", "int Len = b . mag . length ;", "value = Arrays . copy Of ( b . mag , int Len ) ; }"]}
{"ids": "79794", "code": ["public boolean is Http 11 ( ) {", "if ( m Version . equals Ignore Case ( HTTP 11 ) ) {", "return true ; }", "return false ; }"]}
{"ids": "68836", "code": ["private int read Next ( boolean charstring ) {", "num = ( int ) ( data [ pos ++ ] ) & NUM_ ;", "if ( num == NUM_ && ! charstring ) {", "read F Num ( ) ;", "return type = FLT ; }", "else if ( num == NUM_ ) {", "num = ( ( ( int ) data [ pos ] ) << NUM_ ) + ( ( ( int ) data [ pos + NUM_ ] ) & NUM_ ) ;", "pos += NUM_ ;", "return type = NUM ; }", "else if ( num == NUM_ && ! charstring ) {", "num = ( ( ( int ) data [ pos ] & NUM_ ) << NUM_ ) | ( ( ( int ) data [ pos + NUM_ ] & NUM_ ) << NUM_ ) | ( ( ( int ) data [ pos + NUM_ ] & NUM_ ) << NUM_ ) | ( ( ( int ) data [ pos + NUM_ ] & NUM_ ) ) ;", "pos += NUM_ ;", "return type = NUM ; }", "else if ( num == NUM_ ) {", "num = NUM_ + ( ( int ) ( data [ pos ++ ] ) & NUM_ ) ;", "return type = CMD ; }", "else if ( num < NUM_ ) {", "return type = CMD ; }", "else if ( num < NUM_ ) {", "num -= NUM_ ;", "return type = NUM ; }", "else if ( num < NUM_ ) {", "num = ( num - NUM_ ) * NUM_ + ( ( ( int ) data [ pos ++ ] ) & NUM_ ) + NUM_ ;", "return type = NUM ; }", "else if ( num < NUM_ ) {", "num = - ( num - NUM_ ) * NUM_ - ( ( ( int ) data [ pos ++ ] ) & NUM_ ) - NUM_ ;", "return type = NUM ; }", "else if ( ! charstring ) {", "print Data ( ) ;", "throw new Runtime Exception ( STR_ ) ; }", "else {", "fnum = ( ( ( ( int ) data [ pos ] & NUM_ ) << NUM_ ) | ( ( ( int ) data [ pos + NUM_ ] & NUM_ ) << NUM_ ) | ( ( ( int ) data [ pos + NUM_ ] & NUM_ ) << NUM_ ) | ( ( ( int ) data [ pos + NUM_ ] & NUM_ ) ) ) / NUM_ ;", "pos += NUM_ ;", "return type = FLT ; } }"]}
{"ids": "74371", "code": ["protected void delete Icon ( ) {", "if ( selected Icon == null ) {", "return ; }", "if ( icon Map . remove ( selected Icon . get Name ( ) ) != null ) {", "remove Icon Families Panel ( ) ;", "add Icons To Panel ( icon Map ) ;", "delete Icon Button . set Enabled ( false ) ;", "validate ( ) ; } }"]}
{"ids": "47414", "code": ["public boolean equals ( Object obj ) {", "if ( obj == null ) return false ;", "if ( this == obj ) return true ;", "if ( get Class ( ) != obj . get Class ( ) ) return false ;", "Choice Format other = ( Choice Format ) obj ;", "return ( Arrays . equals ( choice Limits , other . choice Limits ) && Arrays . equals ( choice Formats , other . choice Formats ) ) ; }"]}
{"ids": "78601", "code": ["private static File create Reserve Disk Cache Dir ( Context context ) {", "File cache Dir = Storage Utils . get Cache Directory ( context , false ) ;", "File individual Dir = new File ( cache Dir , STR_ ) ;", "if ( individual Dir . exists ( ) || individual Dir . mkdir ( ) ) {", "cache Dir = individual Dir ; }", "return cache Dir ; }"]}
{"ids": "8271", "code": ["public static Date updated ( Date self , Map < Object , Integer > updates ) {", "Calendar cal = Calendar . get Instance ( ) ;", "cal . set Time ( self ) ;", "set ( cal , updates ) ;", "return cal . get Time ( ) ; }"]}
{"ids": "20038", "code": ["public boolean display Topic ( String name ) {", "String topic = null ;", "if ( name == null ) topic = DEFAULT + FILE TYPE ;", "else topic = name . to Lower Case ( ) + FILE TYPE ;", "File help File = new File ( help Dir , topic ) ;", "return display ( help File ) ; }"]}
{"ids": "12661", "code": ["private void dash To Words ( String token Val ) {", "int index = token Val . index Of ( STR_ ) ;", "String aaa = token Val . substring ( NUM_ , index ) ;", "String bbb = token Val . substring ( index + NUM_ , token Val . length ( ) ) ;", "if ( matches ( digits Pattern , aaa ) && matches ( digits Pattern , bbb ) ) {", "Feature Set feature Set = token Item . get Features ( ) ;", "feature Set . set String ( STR_ , aaa ) ;", "token To Words ( aaa ) ;", "word Relation . add Word ( STR_ ) ;", "feature Set . set String ( STR_ , bbb ) ;", "token To Words ( bbb ) ;", "feature Set . set String ( STR_ , STR_ ) ; }", "else {", "token To Words ( aaa ) ;", "token To Words ( bbb ) ; } }"]}
{"ids": "53289", "code": ["public static int number Of Trailing Zeros Signed ( long [ ] v ) {", "for ( int p = NUM_ ; ; p ++ ) {", "if ( p == v . length ) {", "return - NUM_ ; }", "if ( v [ p ] != NUM_ ) {", "return Long . number Of Trailing Zeros ( v [ p ] ) + p * Long . SIZE ; } } }"]}
{"ids": "66594", "code": ["public static void apply WM Rule ( Collection < MWM In Out Bound > lines , String bound Type ) {", "for ( MWM In Out Bound line : lines ) {", "for ( MWM Definition definition : MWM Definition . get All ( line . get Ctx ( ) , line . get Trx Name ( ) ) ) {", "WM Rule Engine . validate Definition ( line , definition , bound Type ) ; } } }"]}
{"ids": "4486", "code": ["public static float read Float ( final JSON Array json Array , final int index , final boolean required , final boolean not Null ) throws JSON Exception {", "if ( required ) {", "return ( float ) json Array . get Double ( index ) ; }", "if ( not Null && json Array . is Null ( index ) ) {", "throw new JSON Exception ( String . format ( Locale . US , NULL VALUE FORMAT ARRAY , index ) ) ; }", "float value = NUM_ ;", "if ( ! json Array . is Null ( index ) ) {", "value = ( float ) json Array . get Double ( index ) ; }", "return value ; }"]}
{"ids": "86542", "code": ["public final Flux < T > on Error Resume With ( Predicate < ? super Throwable > predicate , Function < ? super Throwable , ? extends Publisher < ? extends T > > fallback ) {", "Objects . require Non Null ( predicate , STR_ ) ;", "return on Error Resume With ( null ) ; }"]}
{"ids": "38078", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = new Vector < Option > ( ) ;", "result . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "9037", "code": ["private Set < String > find Resource Names ( String path , String prefix , String suffix ) throws IO Exception {", "Set < String > resource Names = find Resource Names From File System ( path , new File ( path ) ) ;", "return filter Resource Names ( resource Names , prefix , suffix ) ; }"]}
{"ids": "22874", "code": ["public boolean add ( K key , V item ) {", "Set < V > values = map . get ( key ) ;", "if ( values == null ) {", "values = ( sorted ? new Tree Set < V > ( ) : new Hash Set < V > ( ) ) ;", "map . put ( key , values ) ; }", "if ( item == null ) return false ;", "return values . add ( item ) ; }"]}
{"ids": "70299", "code": ["public void add ECM ( ECM Info info ) {", "ecm Effects . add ( info ) ; }"]}
{"ids": "11759", "code": ["protected void load Image ( String file Path , OM Graphic List ret ) {", "File file = new File ( file Path ) ;", "if ( file . exists ( ) && file . is Directory ( ) ) {", "String [ ] files = file . list ( ) ;", "for ( int i = NUM_ ; i < files . length ; i ++ ) {", "load Image ( file Path + STR_ + files [ i ] , ret ) ; } }", "else {", "fire Status Update ( Layer Status Event . START WORKING ) ;", "try {", "URL file URL = Prop Utils . get Resource Or File Or URL ( file Path ) ;", "if ( file URL != null ) {", "if ( image Reader Loaders != null ) {", "Image Tile image Tile = null ;", "for ( Image Reader Loader idl : image Reader Loaders ) {", "if ( idl . is Loadable ( file Path ) ) {", "Image Reader id = idl . get Image Reader ( file URL ) ;", "Image Tile tmp Image Tile = id . get Image Tile ( image Cache ) ;", "if ( image Tile == null ) {", "image Tile = tmp Image Tile ; }", "else if ( tmp Image Tile != null && image Tile instanceof Err Image Tile ) {", "image Tile = tmp Image Tile ; }", "if ( image Tile != null && ! ( image Tile instanceof Err Image Tile ) ) {", "break ; } } }", "if ( image Tile != null ) {", "add Image To Lists ( image Tile , ret , file URL ) ; } }", "else {", "logger . warning ( STR_ + get Name ( ) + STR_ ) ; } }", "else {", "logger . warning ( STR_ + file Path ) ; } }", "catch ( Malformed URL Exception murle ) { } } }"]}
{"ids": "21722", "code": ["public static Export Mask create Export Mask ( Db Client db Client , Export Group export Group , URI sd Uri , String mask Name ) throws Database Exception {", "Export Mask export Mask = new Export Mask ( ) ;", "export Mask . set Id ( URI Util . create Id ( Export Mask . class ) ) ;", "export Mask . set Mask Name ( mask Name ) ;", "export Mask . set Storage Device ( sd Uri ) ;", "db Client . create Object ( export Mask ) ;", "export Group . add Export Mask ( export Mask . get Id ( ) ) ;", "db Client . update Object ( export Group ) ;", "return export Mask ; }"]}
{"ids": "23920", "code": ["public Log Entry ( String timestamp , String contents ) {", "this . timestamp = timestamp ;", "this . contents = contents ; }"]}
{"ids": "2379", "code": ["public static boolean cancel Potential Work ( Object data , Image View image View ) {", "final Bitmap Worker Task bitmap Worker Task = get Bitmap Worker Task ( image View ) ;", "if ( bitmap Worker Task != null ) {", "final Object bitmap Data = bitmap Worker Task . m Data ;", "if ( bitmap Data == null || ! bitmap Data . equals ( data ) ) {", "bitmap Worker Task . cancel ( true ) ;", "if ( Build Config . DEBUG ) {", "Log . d ( TAG , STR_ + data ) ; } }", "else {", "return false ; } }", "return true ; }"]}
{"ids": "14634", "code": ["void replace Policy In Resource Tree ( Policy old Policy , Policy new Policy ) throws Policy Exception , SSO Exception {", "remove Policy From Resource Tree ( old Policy ) ;", "add Policy To Resource Tree ( new Policy ) ; }"]}
{"ids": "7658", "code": ["private Shape [ ] create Horizontal Block ( double x 0 , double width , double y 0 , double y 1 , boolean inverted ) {", "Shape [ ] result = new Shape [ NUM_ ] ;", "Point 2 D p 00 = new Point 2 D . Double ( y 0 , x 0 ) ;", "Point 2 D p 01 = new Point 2 D . Double ( y 0 , x 0 + width ) ;", "Point 2 D p 02 = new Point 2 D . Double ( p 01 . get X ( ) + get X Offset ( ) , p 01 . get Y ( ) - get Y Offset ( ) ) ;", "Point 2 D p 03 = new Point 2 D . Double ( p 00 . get X ( ) + get X Offset ( ) , p 00 . get Y ( ) - get Y Offset ( ) ) ;", "Point 2 D p 0 = new Point 2 D . Double ( y 1 , x 0 ) ;", "Point 2 D p 1 = new Point 2 D . Double ( y 1 , x 0 + width ) ;", "Point 2 D p 2 = new Point 2 D . Double ( p 1 . get X ( ) + get X Offset ( ) , p 1 . get Y ( ) - get Y Offset ( ) ) ;", "Point 2 D p 3 = new Point 2 D . Double ( p 0 . get X ( ) + get X Offset ( ) , p 0 . get Y ( ) - get Y Offset ( ) ) ;", "General Path bottom = new General Path ( ) ;", "bottom . move To ( ( float ) p 1 . get X ( ) , ( float ) p 1 . get Y ( ) ) ;", "bottom . line To ( ( float ) p 01 . get X ( ) , ( float ) p 01 . get Y ( ) ) ;", "bottom . line To ( ( float ) p 02 . get X ( ) , ( float ) p 02 . get Y ( ) ) ;", "bottom . line To ( ( float ) p 2 . get X ( ) , ( float ) p 2 . get Y ( ) ) ;", "bottom . close Path ( ) ;", "General Path top = new General Path ( ) ;", "top . move To ( ( float ) p 0 . get X ( ) , ( float ) p 0 . get Y ( ) ) ;", "top . line To ( ( float ) p 00 . get X ( ) , ( float ) p 00 . get Y ( ) ) ;", "top . line To ( ( float ) p 03 . get X ( ) , ( float ) p 03 . get Y ( ) ) ;", "top . line To ( ( float ) p 3 . get X ( ) , ( float ) p 3 . get Y ( ) ) ;", "top . close Path ( ) ;", "General Path back = new General Path ( ) ;", "back . move To ( ( float ) p 2 . get X ( ) , ( float ) p 2 . get Y ( ) ) ;", "back . line To ( ( float ) p 02 . get X ( ) , ( float ) p 02 . get Y ( ) ) ;", "back . line To ( ( float ) p 03 . get X ( ) , ( float ) p 03 . get Y ( ) ) ;", "back . line To ( ( float ) p 3 . get X ( ) , ( float ) p 3 . get Y ( ) ) ;", "back . close Path ( ) ;", "General Path front = new General Path ( ) ;", "front . move To ( ( float ) p 0 . get X ( ) , ( float ) p 0 . get Y ( ) ) ;", "front . line To ( ( float ) p 1 . get X ( ) , ( float ) p 1 . get Y ( ) ) ;", "front . line To ( ( float ) p 01 . get X ( ) , ( float ) p 01 . get Y ( ) ) ;", "front . line To ( ( float ) p 00 . get X ( ) , ( float ) p 00 . get Y ( ) ) ;", "front . close Path ( ) ;", "General Path left = new General Path ( ) ;", "left . move To ( ( float ) p 0 . get X ( ) , ( float ) p 0 . get Y ( ) ) ;", "left . line To ( ( float ) p 1 . get X ( ) , ( float ) p 1 . get Y ( ) ) ;", "left . line To ( ( float ) p 2 . get X ( ) , ( float ) p 2 . get Y ( ) ) ;", "left . line To ( ( float ) p 3 . get X ( ) , ( float ) p 3 . get Y ( ) ) ;", "left . close Path ( ) ;", "General Path right = new General Path ( ) ;", "right . move To ( ( float ) p 00 . get X ( ) , ( float ) p 00 . get Y ( ) ) ;", "right . line To ( ( float ) p 01 . get X ( ) , ( float ) p 01 . get Y ( ) ) ;", "right . line To ( ( float ) p 02 . get X ( ) , ( float ) p 02 . get Y ( ) ) ;", "right . line To ( ( float ) p 03 . get X ( ) , ( float ) p 03 . get Y ( ) ) ;", "right . close Path ( ) ;", "result [ NUM_ ] = bottom ;", "result [ NUM_ ] = back ;", "if ( inverted ) {", "result [ NUM_ ] = right ;", "result [ NUM_ ] = left ; }", "else {", "result [ NUM_ ] = left ;", "result [ NUM_ ] = right ; }", "result [ NUM_ ] = top ;", "result [ NUM_ ] = front ;", "return result ; }"]}
{"ids": "9949", "code": ["public OIDC Tokens acquire Tokens By Secur ID ( String username , String passcode , Secur ID Retriever secur Id Retriever , Token Spec token Spec ) throws OIDC Client Exception , OIDC Server Exception , Token Validation Exception , SSL Connection Exception {", "Validate . not Empty ( username , STR_ ) ;", "Validate . not Empty ( passcode , STR_ ) ;", "Validate . not Null ( secur Id Retriever , STR_ ) ;", "Validate . not Null ( token Spec , STR_ ) ;", "Http Response http Response = OIDC Client Utils . handle Secur ID Multi Legged Grant ( username , passcode , secur Id Retriever , token Spec , get Token Endpoint URI ( ) , this . client Id , this . holder Of Key Config , this . key Store ) ;", "return OIDC Client Utils . parse Token Response ( http Response , this . provider Public Key , this . issuer , this . client Id , this . clock Tolerance In Seconds ) ; }"]}
{"ids": "48689", "code": ["public void load Nested ( Environment env ) {", "load Nested ( env , NUM_ ) ; }"]}
{"ids": "31400", "code": ["private JSON Array request All File Systems ( ) throws IO Exception , JSON Exception {", "JSON Array ret = new JSON Array ( ) ;", "for ( Filesystem fs : filesystems ) {", "ret . put ( fs . get Root Entry ( ) ) ; }", "return ret ; }"]}
{"ids": "15363", "code": ["private Promise < Action Response , Resource Exception > internal Handle Action ( String token Id , Context context , Action Request request ) {", "final String action = request . get Action ( ) ;", "final Action Handler action Handler = action Handlers . get ( action ) ;", "if ( action Handler != null ) {", "return action Handler . handle ( token Id , context , request ) ; }", "else {", "String message = String . format ( STR_ , action ) ;", "Not Supported Exception e = new Not Supported Exception ( message ) ;", "if ( LOGGER . message Enabled ( ) ) {", "LOGGER . message ( STR_ + message , e ) ; }", "return e . as Promise ( ) ; } }"]}
{"ids": "44994", "code": ["public int compare To ( Object obj ) {", "int diff = - NUM_ ;", "if ( obj instanceof Parser Notice ) {", "Parser Notice p 2 = ( Parser Notice ) obj ;", "diff = level - p 2 . get Level ( ) ;", "if ( diff == NUM_ ) {", "diff = line - p 2 . get Line ( ) ;", "if ( diff == NUM_ ) {", "diff = message . compare To ( p 2 . get Message ( ) ) ; } } }", "return diff ; }"]}
{"ids": "40617", "code": ["@ Override @ Suppress Warnings ( STR_ ) public Named List < Object > do Highlighting ( Doc List docs , Query query , Solr Query Request req , String [ ] default Fields ) throws IO Exception {", "Solr Params params = req . get Params ( ) ;", "if ( ! is Highlighting Enabled ( params ) ) return null ;", "Solr Index Searcher searcher = req . get Searcher ( ) ;", "Index Schema schema = searcher . get Schema ( ) ;", "Named List fragments = new Simple Ordered Map ( ) ;", "String [ ] field Names = get Highlight Fields ( query , req , default Fields ) ;", "Set < String > fset = new Hash Set < > ( ) ; {", "for ( String f : field Names ) {", "fset . add ( f ) ; }", "Schema Field key Field = schema . get Unique Key Field ( ) ;", "if ( null != key Field ) fset . add ( key Field . get Name ( ) ) ; }", "Fast Vector Highlighter fvh = new Fast Vector Highlighter ( params . get Bool ( Highlight Params . USE PHRASE HIGHLIGHTER , true ) , params . get Bool ( Highlight Params . FIELD MATCH , false ) ) ;", "fvh . set Phrase Limit ( params . get Int ( Highlight Params . PHRASE LIMIT , Solr Highlighter . DEFAULT PHRASE LIMIT ) ) ;", "Field Query field Query = fvh . get Field Query ( query , searcher . get Index Reader ( ) ) ;", "Doc Iterator iterator = docs . iterator ( ) ;", "for ( int i = NUM_ ; i < docs . size ( ) ; i ++ ) {", "int doc Id = iterator . next Doc ( ) ;", "Document doc = searcher . doc ( doc Id , fset ) ;", "Named List doc Summaries = new Simple Ordered Map ( ) ;", "for ( String field Name : field Names ) {", "field Name = field Name . trim ( ) ;", "if ( use Fast Vector Highlighter ( params , schema , field Name ) ) do Highlighting By Fast Vector Highlighter ( fvh , field Query , req , doc Summaries , doc Id , doc , field Name ) ;", "else do Highlighting By Highlighter ( query , req , doc Summaries , doc Id , doc , field Name ) ; }", "String print Id = schema . printable Unique Key ( doc ) ;", "fragments . add ( print Id == null ? null : print Id , doc Summaries ) ; }", "return fragments ; }"]}
{"ids": "27494", "code": ["private I Binding Set aggregate ( final Iterable < I Binding Set > solutions ) {", "final I Binding Set aggregates = new Context Binding Set ( context , new List Binding Set ( ) ) ;", "if ( group By != null ) {", "final I Binding Set a Solution = solutions . iterator ( ) . next ( ) ;", "for ( I Value Expression < ? > expr : group By ) {", "if ( expr instanceof I Variable < ? > ) {", "final I Variable < ? > var = ( I Variable < ? > ) expr ;", "final Object var Value = var . get ( a Solution ) ;", "final Constant < ? > val ;", "if ( var Value == null ) {", "val = Constant . error Value ( ) ; }", "else {", "val = new Constant ( var Value . get Class ( ) . cast ( var Value ) ) ; } ;", "aggregates . set ( var , val ) ; }", "else if ( expr instanceof I Bind < ? > ) {", "final I Bind < ? > bind Expr = ( I Bind < ? > ) expr ;", "final Constant < ? > val ;", "final Object expr Value = bind Expr . get ( a Solution ) ;", "if ( expr Value == null ) {", "val = Constant . error Value ( ) ; }", "else {", "val = new Constant ( expr Value . get Class ( ) . cast ( expr Value ) ) ; }", "final I Variable < ? > ovar = ( ( I Bind < ? > ) expr ) . get Var ( ) ;", "aggregates . set ( ovar , val ) ; } } } {", "final boolean nested Aggregates = group By State . is Nested Aggregates ( ) ;", "final Iterator < Map . Entry < I Aggregate < ? > , I Variable < ? > > > itr = rewrite . get Agg Expr ( ) . entry Set ( ) . iterator ( ) ;", "while ( itr . has Next ( ) ) {", "final Map . Entry < I Aggregate < ? > , I Variable < ? > > e = itr . next ( ) ;", "do Aggregate ( e . get Key ( ) , e . get Value ( ) , nested Aggregates , aggregates , solutions , stats ) ; }", "if ( log . is Trace Enabled ( ) ) log . trace ( STR_ + aggregates ) ; }", "for ( I Value Expression < ? > expr : rewrite . get Select 2 ( ) ) {", "try {", "expr . get ( aggregates ) ; }", "catch ( Sparql Type Error Exception ex ) {", "Type Error Log . handle Type Error ( ex , expr , stats ) ;", "continue ; }", "catch ( Illegal Argument Exception ex ) {", "Type Error Log . handle Type Error ( ex , expr , stats ) ;", "continue ; } } {", "final boolean drop ;", "final I Constraint [ ] having 2 = rewrite . get Having 2 ( ) ;", "if ( having 2 != null && ! B Op Utility . is Consistent ( having 2 , aggregates ) ) {", "drop = true ; }", "else {", "drop = false ; }", "if ( log . is Info Enabled ( ) ) log . info ( ( drop ? STR_ : STR_ ) + STR_ + aggregates ) ;", "if ( drop ) {", "return null ; } }", "final I Binding Set out ;", "if ( group By == null ) {", "assert ! aggregates . contains Error Values ( ) ;", "out = aggregates . copy ( group By State . get Select Vars ( ) . to Array ( new I Variable [ NUM_ ] ) ) ; }", "else {", "out = aggregates . copy Minus Errors ( group By State . get Select Vars ( ) . to Array ( new I Variable [ NUM_ ] ) ) ; }", "return out ; }"]}
{"ids": "35145", "code": ["public static void delete Collection ( String host , String collection ) throws Exception {", "String delete Collection Template = STR_ ;", "String delete Collection Command = String . format ( delete Collection Template , host , DEFAULT SOLR PORT , collection ) ;", "execute Solr Command ( delete Collection Command ) ; }"]}
{"ids": "60559", "code": ["@ Nullable public static H Key psi Key ( @ Not Null Psi Method psi Method , @ Not Null Direction direction , @ Not Null Message Digest md ) {", "final Psi Class psi Class = Psi Tree Util . get Parent Of Type ( psi Method , Psi Class . class , false ) ;", "if ( psi Class == null ) {", "return null ; }", "byte [ ] class Digest = psi Class Digest ( psi Class , md ) ;", "if ( class Digest == null ) {", "return null ; }", "byte [ ] sig Digest = method Digest ( psi Method , md ) ;", "if ( sig Digest == null ) {", "return null ; }", "byte [ ] digest = new byte [ HASH SIZE ] ;", "System . arraycopy ( class Digest , NUM_ , digest , NUM_ , CLASS HASH SIZE ) ;", "System . arraycopy ( sig Digest , NUM_ , digest , CLASS HASH SIZE , SIGNATURE HASH SIZE ) ;", "return new H Key ( digest , mk Direction Key ( direction ) , true ) ; }"]}
{"ids": "34120", "code": ["public static boolean is Sd Card Mounted ( ) {", "String status = Environment . get External Storage State ( ) ;", "if ( status . equals ( Environment . MEDIA MOUNTED ) ) return true ;", "return false ; }"]}
{"ids": "68130", "code": ["private void parse Resource ( final Element resource Element , final Collection < Resource > resources ) {", "final String tag Name = resource Element . get Tag Name ( ) ;", "final String uri = resource Element . get Text Content ( ) ;", "if ( TAG GROUP REF . equals ( tag Name ) ) {", "resources . add All ( get Resources For Group ( uri ) ) ; }", "if ( get Resource Type ( resource Element ) != null ) {", "final Resource resource = create Resource ( resource Element ) ;", "LOG . debug ( STR_ , resource ) ;", "resources . add ( resource ) ; } }"]}
{"ids": "34424", "code": ["@ Override public void licence File ( String text To Show , File licence File ) throws Cancel Exception {", "try {", "final File Input Stream content = new File Input Stream ( licence File ) ;", "final String Writer writer = new String Writer ( ) ;", "IO Utils . copy ( content , writer , STR_ ) ;", "content . close ( ) ;", "licence ( text To Show , writer . to String ( ) ) ; }", "catch ( IO Exception e ) {", "throw new Script Failure Exception ( STR_ , e ) ; } }"]}
{"ids": "1167", "code": ["public static void convolve And Transpose ( Kernel kernel , int [ ] in Pixels , int [ ] out Pixels , int width , int height , boolean alpha , boolean premultiply , boolean unpremultiply , int edge Action ) {", "float [ ] matrix = kernel . get Kernel Data ( null ) ;", "int cols = kernel . get Width ( ) ;", "int cols 2 = cols / NUM_ ;", "for ( int y = NUM_ ; y < height ; y ++ ) {", "int index = y ;", "int ioffset = y * width ;", "for ( int x = NUM_ ; x < width ; x ++ ) {", "float r = NUM_ , g = NUM_ , b = NUM_ , a = NUM_ ;", "int moffset = cols 2 ;", "for ( int col = - cols 2 ; col <= cols 2 ; col ++ ) {", "float f = matrix [ moffset + col ] ;", "if ( f != NUM_ ) {", "int ix = x + col ;", "if ( ix < NUM_ ) {", "if ( edge Action == CLAMP EDGES ) ix = NUM_ ;", "else if ( edge Action == WRAP EDGES ) ix = ( x + width ) % width ; }", "else if ( ix >= width ) {", "if ( edge Action == CLAMP EDGES ) ix = width - NUM_ ;", "else if ( edge Action == WRAP EDGES ) ix = ( x + width ) % width ; }", "int rgb = in Pixels [ ioffset + ix ] ;", "int pa = ( rgb > > NUM_ ) & NUM_ ;", "int pr = ( rgb > > NUM_ ) & NUM_ ;", "int pg = ( rgb > > NUM_ ) & NUM_ ;", "int pb = rgb & NUM_ ;", "if ( premultiply ) {", "float a 255 = pa * ( NUM_ / NUM_ ) ;", "pr *= a 255 ;", "pg *= a 255 ;", "pb *= a 255 ; }", "a += f * pa ;", "r += f * pr ;", "g += f * pg ;", "b += f * pb ; } }", "if ( unpremultiply && a != NUM_ && a != NUM_ ) {", "float f = NUM_ / a ;", "r *= f ;", "g *= f ;", "b *= f ; }", "int ia = alpha ? Pixel Utils . clamp ( ( int ) ( a + NUM_ ) ) : NUM_ ;", "int ir = Pixel Utils . clamp ( ( int ) ( r + NUM_ ) ) ;", "int ig = Pixel Utils . clamp ( ( int ) ( g + NUM_ ) ) ;", "int ib = Pixel Utils . clamp ( ( int ) ( b + NUM_ ) ) ;", "out Pixels [ index ] = ( ia << NUM_ ) | ( ir << NUM_ ) | ( ig << NUM_ ) | ib ;", "index += height ; } } }"]}
{"ids": "28431", "code": ["public void animate Progress Fill ( int animate To ) {", "m Animation Handler . remove Messages ( NUM_ ) ;", "if ( animate To > m Max || animate To < NUM_ ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , animate To , m Max ) ) ; }", "m Animation Handler . set Animate To ( animate To ) ;", "m Animation Handler . send Empty Message ( NUM_ ) ;", "invalidate ( ) ; }"]}
{"ids": "71489", "code": ["static boolean is Registered ( Object Name object Name ) {", "Set < Object Name > registered Object Names = m Bean Server . query Names ( object Name , null ) ;", "return ! registered Object Names . is Empty ( ) ; }"]}
{"ids": "56634", "code": ["public < T > Pushable Lazy Future Stream < T > future Stream ( final Lazy React s ) {", "final Queue < T > q = create Queue ( ) ;", "return new Pushable Lazy Future Stream < T > ( q , s . from Stream ( q . stream ( ) ) ) ; }"]}
{"ids": "1836", "code": ["public byte [ ] convert Hex String To Binary ( String hex String ) throws Illegal Argument Exception {", "int length = hex String . length ( ) ;", "if ( length % NUM_ != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + length + STR_ + hex String ) ; }", "byte [ ] binary = new byte [ length / NUM_ ] ;", "for ( int i = NUM_ ; i < length ; i += NUM_ ) {", "char high Bits Char = hex String . char At ( i ) ;", "char low Bits Char = hex String . char At ( i + NUM_ ) ;", "int high Bits = hex Char To Int ( high Bits Char , hex String ) << NUM_ ;", "int low Bits = hex Char To Int ( low Bits Char , hex String ) ;", "binary [ i / NUM_ ] = ( byte ) ( high Bits + low Bits ) ; }", "return binary ; }"]}
{"ids": "32591", "code": ["public void write Field ( final String name , final short value ) throws java . io . IO Exception {", "write Field ( name , Short . to String ( value ) ) ; }"]}
{"ids": "63498", "code": ["public static Result Set select ( Connection conn , String sql ) throws SQL Exception {", "Statement stat = conn . create Statement ( Result Set . TYPE SCROLL INSENSITIVE , Result Set . CONCUR READ ONLY ) ;", "return stat . execute Query ( sql ) ; }"]}
{"ids": "23590", "code": ["public static void write Set Of Longs ( Set set , boolean has Long I Ds , Data Output out ) throws IO Exception {", "if ( set == null ) {", "out . write Int ( - NUM_ ) ; }", "else {", "out . write Int ( set . size ( ) ) ;", "out . write Boolean ( has Long I Ds ) ;", "for ( Iterator it = set . iterator ( ) ; it . has Next ( ) ; ) {", "Long l = ( Long ) it . next ( ) ;", "if ( has Long I Ds ) {", "out . write Long ( l . long Value ( ) ) ; }", "else {", "out . write Int ( ( int ) l . long Value ( ) ) ; } } } }"]}
{"ids": "75332", "code": ["private void restore Widget ( Key key , byte [ ] buffer , int data Size ) throws IO Exception {", "if ( VERBOSE ) Log . v ( TAG , STR_ + key . id ) ;", "if ( DEBUG ) Log . d ( TAG , STR_ + buffer . length + STR_ + Base 64 . encode To String ( buffer , NUM_ , data Size , Base 64 . NO WRAP ) ) ;", "Widget widget = unpack Proto ( new Widget ( ) , buffer , data Size ) ;", "if ( DEBUG ) Log . d ( TAG , STR_ + widget . provider ) ;", "if ( widget . icon . data != null ) {", "Bitmap icon = Bitmap Factory . decode Byte Array ( widget . icon . data , NUM_ , widget . icon . data . length ) ;", "if ( icon == null ) {", "Log . w ( TAG , STR_ + key . name ) ; }", "else {", "m Icon Cache . preload Icon ( Component Name . unflatten From String ( widget . provider ) , icon , widget . icon . dpi , widget . label , m User Serial , m Idp ) ; } }", "widget Sizes . add ( widget . provider + STR_ + NUM_ + STR_ + NUM_ ) ; }"]}
{"ids": "79600", "code": ["private static boolean has Response Body ( int request Method , int response Code ) {", "return request Method != Request . Method . HEAD && ! ( Http Status . SC CONTINUE <= response Code && response Code < Http Status . SC OK ) && response Code != Http Status . SC NO CONTENT && response Code != Http Status . SC NOT MODIFIED ; }"]}
{"ids": "10994", "code": ["public void consider Region X Region ( Geo Region r , Geo Region region ) {", "Geo Array r Boundary = r . get Points ( ) ;", "Geo r Point = r Boundary . get ( NUM_ , new Geo ( ) ) ;", "Geo Array region Boundary = region . get Points ( ) ;", "Geo region Point = region Boundary . get ( NUM_ , new Geo ( ) ) ;", "if ( Intersection . is Point In Polygon ( r Point , region Boundary ) || Intersection . is Point In Polygon ( region Point , r Boundary ) ) {", "collector . collect ( r , region ) ; }", "else {", "for ( Geo Path . Segment Iterator pit = r . segment Iterator ( ) ; pit . has Next ( ) ; ) {", "Geo Segment seg = pit . next Segment ( ) ;", "if ( filter . pre Consider ( seg , region ) && consider Segment X Region ( seg , region ) ) {", "collector . collect ( seg , region ) ;", "return ; } } } }"]}
{"ids": "82556", "code": ["private char fold Case ( char ch ) {", "if ( ch < NUM_ ) {", "if ( STR_ <= ch && ch <= STR_ ) {", "return ( char ) ( ch + ( STR_ - STR_ ) ) ; }", "return ch ; }", "return Character . to Lower Case ( Character . to Upper Case ( ch ) ) ; }"]}
{"ids": "48824", "code": ["public Writable Raster create Compatible Writable Raster ( int w , int h ) {", "if ( w <= NUM_ || h <= NUM_ ) {", "throw new Raster Format Exception ( STR_ + ( ( w <= NUM_ ) ? STR_ : STR_ ) ) ; }", "Sample Model sm = sample Model . create Compatible Sample Model ( w , h ) ;", "return new Byte Banded Raster ( sm , new Point ( NUM_ , NUM_ ) ) ; }"]}
{"ids": "25769", "code": ["@ Target Api ( VERSION CODES . LOLLIPOP ) public static void reveal ( final View view , int cx , int cy ) {", "if ( ! has Lollipop ( ) ) {", "view . set Visibility ( View . VISIBLE ) ;", "return ; }", "int final Radius = Math . max ( view . get Width ( ) , view . get Height ( ) ) ;", "Animator animator = View Animation Utils . create Circular Reveal ( view , cx , cy , NUM_ , final Radius ) ;", "view . set Visibility ( View . VISIBLE ) ;", "animator . start ( ) ; }"]}
{"ids": "52514", "code": ["public Top N Metric ( Top N Metric Type type , String previous Stop , Sort Direction order ) {", "this ( type , previous Stop ) ;", "if ( order == Sort Direction . ASC ) {", "this . type = Top N Metric Type . INVERTED ;", "this . nested = Optional . of ( new Top N Metric ( type , previous Stop ) ) ;", "this . previous Stop = Optional . empty ( ) ; } }"]}
{"ids": "84341", "code": ["public void remove Supported Options ( Set < String > unmatched Processor Options ) {", "unmatched Processor Options . remove All ( supported Option Names ) ; }"]}
{"ids": "49508", "code": ["protected void subscribe ( ) {", "if ( sample Client Sub == null ) {", "try {", "sample Client Sub = new Sample Async Callback ( url , client Id Sub , clean Session , quiet Mode , user Name , password ) ; }", "catch ( Mqtt Exception e ) {", "e . print Stack Trace ( ) ; } }", "if ( sample Client Sub != null ) {", "String topic = STR_ ;", "int qos = NUM_ ;", "try {", "sample Client Sub . subscribe ( topic , qos ) ; }", "catch ( Throwable e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "70841", "code": ["private boolean should Crop ( int width , int height ) {", "int pixel Error = NUM_ ;", "pixel Error += Math . round ( Math . max ( width , height ) / NUM_ ) ;", "return ( m Max Result Image Size X > NUM_ && m Max Result Image Size Y > NUM_ ) || Math . abs ( m Crop Rect . left - m Current Image Rect . left ) > pixel Error || Math . abs ( m Crop Rect . top - m Current Image Rect . top ) > pixel Error || Math . abs ( m Crop Rect . bottom - m Current Image Rect . bottom ) > pixel Error || Math . abs ( m Crop Rect . right - m Current Image Rect . right ) > pixel Error ; }"]}
{"ids": "60987", "code": ["public boolean exists ( ) {", "return do Access ( F OK ) ; }"]}
{"ids": "16317", "code": ["@ Deprecated public boolean is Fill Below Line ( ) {", "return m Fill Below Line . size ( ) > NUM_ ; }"]}
{"ids": "5050", "code": ["public Shape Tile Box bounding box ( ) {", "if ( bounding box != null ) return bounding box ;", "Pla Point Float start corner = start point approx ( ) ;", "Pla Point Float end corner = end point approx ( ) ;", "double llx = Math . min ( start corner . v x , end corner . v x ) ;", "double lly = Math . min ( start corner . v y , end corner . v y ) ;", "double urx = Math . max ( start corner . v x , end corner . v x ) ;", "double ury = Math . max ( start corner . v y , end corner . v y ) ;", "Pla Point Int lower left = new Pla Point Int ( Math . floor ( llx ) , Math . floor ( lly ) ) ;", "Pla Point Int upper right = new Pla Point Int ( Math . ceil ( urx ) , Math . ceil ( ury ) ) ;", "bounding box = new Shape Tile Box ( lower left , upper right ) ;", "return bounding box ; }"]}
{"ids": "56952", "code": ["public boolean is Valid Attachment Point ( Datapath Id switch DPID , OF Port switch Port ) {", "if ( topology . is Attachment Point Port ( switch DPID , switch Port ) == false ) return false ;", "if ( suppress A Ps . contains ( new Switch Port ( switch DPID , switch Port ) ) ) return false ;", "return true ; }"]}
{"ids": "52943", "code": ["@ Override public P read Page ( int page ID ) {", "try {", "count Read ( ) ;", "long offset = ( ( long ) ( header . get Reserved Pages ( ) + page ID ) ) * ( long ) page Size ;", "byte [ ] buffer = new byte [ page Size ] ;", "file . seek ( offset ) ;", "file . read ( buffer ) ;", "return byte Array To Page ( buffer ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( STR_ + page ID + STR_ , e ) ; } }"]}
{"ids": "11517", "code": ["public void add Action Listener ( Action Listener listener ) {", "forward Projection Button . add Action Listener ( listener ) ;", "back Projection Button . add Action Listener ( listener ) ; }"]}
{"ids": "8868", "code": ["void write Data To File Locked ( Random Access File file , boolean add Mayo , boolean add Tomato , int which Filling ) throws IO Exception {", "file . set Length ( NUM_ ) ;", "file . write Int ( which Filling ) ;", "file . write Boolean ( add Mayo ) ;", "file . write Boolean ( add Tomato ) ;", "Log . v ( TAG , STR_ + add Mayo + STR_ + add Tomato + STR_ + which Filling ) ; }"]}
{"ids": "75464", "code": ["static Type [ ] map Key And Value Types ( Type context , Class < ? > context Raw Type ) {", "if ( context == Properties . class ) return new Type [ ] { String . class , String . class } ;", "Type map Type = get Supertype ( context , context Raw Type , Map . class ) ;", "if ( map Type instanceof Parameterized Type ) {", "Parameterized Type map Parameterized Type = ( Parameterized Type ) map Type ;", "return map Parameterized Type . get Actual Type Arguments ( ) ; }", "return new Type [ ] { Object . class , Object . class } ; }"]}
{"ids": "29722", "code": ["static Aggregated Http Message of ( Http Headers headers , Http Data content , Http Headers trailing Headers ) {", "return of ( Collections . empty List ( ) , headers , content , trailing Headers ) ; }"]}
{"ids": "79417", "code": ["public static boolean is Letter ( char c ) {", "return Character . is Letter ( c ) ; }"]}
{"ids": "71646", "code": ["protected List < Tree Node > create Child List ( ) {", "Branch branch = get Xml Branch ( ) ;", "int size = branch . node Count ( ) ;", "List < Tree Node > child List = new Array List < Tree Node > ( size ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "Node node = branch . node ( i ) ;", "if ( node instanceof Character Data ) {", "String text = node . get Text ( ) ;", "if ( text == null ) {", "continue ; }", "text = text . trim ( ) ;", "if ( text . length ( ) <= NUM_ ) {", "continue ; } }", "child List . add ( create Child Tree Node ( node ) ) ; }", "return child List ; }"]}
{"ids": "66983", "code": ["public Set < Value > may Aliases ( Value v , Unit u ) {", "Set < Value > res = new Hash Set < Value > ( ) ;", "Set < Set < Value > > flow = get Flow Before ( u ) ;", "for ( Set < Value > set : flow ) {", "if ( set . contains ( v ) ) res . add All ( set ) ; }", "return res ; }"]}
{"ids": "68267", "code": ["@ Nullable private static String read ( @ Non Null Socket Channel socket , @ Non Null byte [ ] buffer ) throws IO Exception {", "Byte Buffer buf = Byte Buffer . wrap ( buffer , NUM_ , buffer . length ) ;", "while ( buf . position ( ) != buf . limit ( ) ) {", "int count ;", "count = socket . read ( buf ) ;", "if ( count < NUM_ ) {", "throw new IO Exception ( STR_ ) ; } }", "try {", "return new String ( buffer , NUM_ , buf . position ( ) , Adb Helper . DEFAULT ENCODING ) ; }", "catch ( Unsupported Encoding Exception e ) {", "return null ; } }"]}
{"ids": "4388", "code": ["public static Date Time Unit create Local Date Unit Instance ( Date date , org . hisp . dhis . calendar . Calendar calendar ) {", "return calendar . from Iso ( Date Time Unit . from Jdk Date ( date ) ) ; }"]}
{"ids": "59735", "code": ["public static boolean equal ( double a , double b ) {", "return ( Math . abs ( a - b ) < EPSILON ) ; }"]}
{"ids": "3548", "code": ["@ Override public void add Class Annotation ( char [ ] buffer , int offset , int length ) {", "String ann Type = new String ( buffer , offset , length ) ;", "if ( ann Types . contains ( ann Type ) ) {", "add Class ( class Name ) ; } }"]}
{"ids": "61002", "code": ["public Process exec ( String [ ] tainted Command , String [ ] tainted Environment , File working Directory , boolean redirect Error Stream ) throws IO Exception {", "if ( tainted Command == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( tainted Command . length == NUM_ ) {", "throw new Index Out Of Bounds Exception ( STR_ ) ; }", "String [ ] command = tainted Command . clone ( ) ;", "String [ ] environment = tainted Environment != null ? tainted Environment . clone ( ) : null ;", "for ( int i = NUM_ ; i < command . length ; i ++ ) {", "if ( command [ i ] == null ) {", "throw new Null Pointer Exception ( STR_ + i + STR_ ) ; } }", "if ( environment != null ) {", "for ( int i = NUM_ ; i < environment . length ; i ++ ) {", "if ( environment [ i ] == null ) {", "throw new Null Pointer Exception ( STR_ + i + STR_ ) ; } } }", "File Descriptor in = new File Descriptor ( ) ;", "File Descriptor out = new File Descriptor ( ) ;", "File Descriptor err = new File Descriptor ( ) ;", "String working Path = ( working Directory == null ) ? null : working Directory . get Path ( ) ;", "synchronized ( process References ) {", "int pid ;", "try {", "pid = exec ( command , environment , working Path , in , out , err , redirect Error Stream ) ; }", "catch ( IO Exception e ) {", "IO Exception wrapper = new IO Exception ( STR_ + STR_ + Arrays . to String ( command ) + STR_ + working Directory + STR_ + Arrays . to String ( environment ) ) ;", "wrapper . init Cause ( e ) ;", "throw wrapper ; }", "Process Impl process = new Process Impl ( pid , in , out , err ) ;", "Process Reference process Reference = new Process Reference ( process , reference Queue ) ;", "process References . put ( pid , process Reference ) ;", "process References . notify All ( ) ;", "return process ; } }"]}
{"ids": "62776", "code": ["static Path Part make Absolute ( Path Part old Part ) {", "@ Suppress Warnings ( STR_ ) boolean encoded Cached = old Part . encoded != NOT CACHED ;", "String old Path = encoded Cached ? old Part . encoded : old Part . decoded ;", "if ( old Path == null || old Path . length ( ) == NUM_ || old Path . starts With ( STR_ ) ) {", "return old Part ; }", "String new Encoded = encoded Cached ? STR_ + old Part . encoded : NOT CACHED ;", "@ Suppress Warnings ( STR_ ) boolean decoded Cached = old Part . decoded != NOT CACHED ;", "String new Decoded = decoded Cached ? STR_ + old Part . decoded : NOT CACHED ;", "return new Path Part ( new Encoded , new Decoded ) ; }"]}
{"ids": "86790", "code": ["public static int [ ] split Gt ( String gt ) {", "final int gtlen = gt . length ( ) ;", "if ( gtlen == NUM_ ) {", "return new int [ ] { allele Id ( gt . char At ( NUM_ ) ) } ; }", "else {", "int [ ] result = new int [ NUM_ ] ;", "int ploid = NUM_ ;", "int allelestart = NUM_ ;", "for ( int i = NUM_ ; i < gtlen ; i ++ ) {", "final char c = gt . char At ( i ) ;", "if ( c == PHASED SEPARATOR || c == UNPHASED SEPARATOR ) {", "if ( ploid == result . length ) {", "result = Arrays . copy Of ( result , result . length + NUM_ ) ; }", "result [ ploid ++ ] = allele Id ( gt , allelestart , i - allelestart ) ;", "allelestart = i + NUM_ ; } }", "if ( allelestart < gtlen ) {", "if ( ploid == result . length ) {", "result = Arrays . copy Of ( result , result . length + NUM_ ) ; }", "result [ ploid ++ ] = allele Id ( gt , allelestart , gtlen - allelestart ) ; }", "if ( ploid < result . length ) {", "result = Arrays . copy Of ( result , ploid ) ; }", "if ( ploid == NUM_ ) {", "throw new Number Format Exception ( STR_ + gt + STR_ ) ; }", "return result ; } }"]}
{"ids": "74241", "code": ["public void delete Kernel ( String name ) {", "Kernel kernel = get Kernel By Name ( name ) ;", "if ( kernel != null ) {", "kernel . dispose ( ) ;", "Integer old Size = Integer . value Of ( kernel Hash Table . size ( ) ) ;", "kernel Hash Table . remove ( name ) ;", "set Dirty And Fire Property Change ( KERNEL LISTLENGTH CHANGED PROPERTY , old Size , Integer . value Of ( kernel Hash Table . size ( ) ) ) ; } }"]}
{"ids": "81966", "code": ["protected boolean should Stop ( ) {", "return is Paused ( ) || is Killed ( ) ; }"]}
{"ids": "76776", "code": ["public Builder add Token Filter ( String name , Map < String , String > params ) throws IO Exception {", "Objects . require Non Null ( name , STR_ ) ;", "token Filters . add ( apply Resource Loader ( Token Filter Factory . for Name ( name , apply Default Params ( params ) ) ) ) ;", "components Added = true ;", "return this ; }"]}
{"ids": "80248", "code": ["public Styled Tool Tip UI ( Style style ) {", "this . style = style ;", "border = Border Factory . create Line Border ( style . get Shadow Color ( ) ) ; }"]}
{"ids": "18302", "code": ["public final void add Elements ( Object value , int number Of Elements ) {", "if ( ( m first Free + number Of Elements ) >= m map Size ) {", "m map Size += ( m blocksize + number Of Elements ) ;", "Object new Map [ ] = new Object [ m map Size ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m first Free + NUM_ ) ;", "m map = new Map ; }", "for ( int i = NUM_ ; i < number Of Elements ; i ++ ) {", "m map [ m first Free ] = value ;", "m first Free ++ ; } }"]}
{"ids": "11682", "code": ["public void action Performed ( Action Event e ) {", "super . action Performed ( e ) ;", "String cmd = e . get Action Command ( ) ;", "if ( cmd == show Maps Command ) {", "J Check Box map Check = ( J Check Box ) e . get Source ( ) ;", "view Attributes . show Maps = map Check . is Selected ( ) ;", "repaint ( ) ; }", "else if ( cmd == show Info Command ) {", "J Check Box info Check = ( J Check Box ) e . get Source ( ) ;", "boolean show Info = info Check . is Selected ( ) ;", "view Attributes . show Info = show Info ;", "show Subframes ( show Info ) ;", "do Prepare ( ) ; }", "else if ( cmd == lock Series Command ) {", "J Check Box lock Check = ( J Check Box ) e . get Source ( ) ;", "boolean locked = lock Check . is Selected ( ) ;", "if ( locked ) {", "List < Rpf Coverage Box > coverage Boxes = get Coverage Boxes ( ) ;", "String series Name ;", "if ( coverage Boxes == null || coverage Boxes . is Empty ( ) ) {", "series Name = Rpf View Attributes . ANY ; }", "else {", "series Name = coverage Boxes . get ( NUM_ ) . chart Code ; }", "if ( series Name == null ) {", "series Name = Rpf View Attributes . ANY ;", "fire Request Message ( STR_ + get Name ( ) + STR_ ) ; }", "lock Check . set Text ( locked Button Title + STR_ + series Name ) ;", "view Attributes . chart Series = series Name ; }", "else {", "lock Check . set Text ( unlocked Button Title ) ;", "view Attributes . chart Series = Rpf View Attributes . ANY ; } }", "else if ( cmd == show Coverage Command ) {", "if ( coverage != null ) {", "J Check Box coverage Check = ( J Check Box ) e . get Source ( ) ;", "coverage . set In Use ( coverage Check . is Selected ( ) ) ;", "do Prepare ( ) ; } }", "else {", "do Prepare ( ) ; } }"]}
{"ids": "69787", "code": ["@ Override public void run ( ) {", "if ( m Delay > NUM_ ) {", "try {", "Thread . sleep ( m Delay ) ; }", "catch ( Interrupted Exception e ) {", "Log Impl . w ( TAG , get Name ( ) + STR_ + e . get Message ( ) ) ; } }", "if ( m Parent Task != null ) {", "synchronized ( this ) {", "try {", "wait ( ) ; }", "catch ( Interrupted Exception e ) {", "Log Impl . w ( TAG , get Name ( ) + STR_ + e . get Message ( ) ) ; } } }", "m Status = Status . STATUS EXECUTING ;", "long start Time = System . current Time Millis ( ) ;", "start ( ) ;", "long end Time = System . current Time Millis ( ) ;", "Log Impl . i ( TAG , get Name ( ) + STR_ + ( end Time - start Time ) ) ;", "if ( m Done Signal != null ) {", "m Done Signal . count Down ( ) ; }", "if ( m Child Task != null ) {", "synchronized ( m Child Task ) {", "m Child Task . notify ( ) ; } }", "m Status = Status . STATUS DONE ; }"]}
{"ids": "80458", "code": ["public boolean has ( final String name ) {", "return contents . contains Key ( name . to Lower Case ( ) ) ; }"]}
{"ids": "54406", "code": ["public void stop ( ) {", "is Alive . set ( false ) ;", "for ( Kafka Consumer < byte [ ] , byte [ ] > c : consumers . values ( ) ) {", "c . wakeup ( ) ; }", "kafka Consumer Executor . shutdown Now ( ) ;", "holding Buffer . clear ( ) ;", "IO Utils . close Quietly ( this ) ; }"]}
{"ids": "24633", "code": ["public String consume Element Selector ( ) {", "int start = pos ;", "while ( ! is Empty ( ) && ( matches Word ( ) || matches Any ( STR_ , STR_ , STR_ ) ) ) pos ++ ;", "return queue . substring ( start , pos ) ; }"]}
{"ids": "61608", "code": ["@ Suppress Warnings ( STR_ ) public Long Map ( int initial Capacity , float load Factor ) {", "if ( initial Capacity < NUM_ ) throw new Illegal Argument Exception ( STR_ + initial Capacity ) ;", "if ( initial Capacity > NUM_ << NUM_ ) throw new Illegal Argument Exception ( STR_ + initial Capacity ) ;", "capacity = next Power Of Two ( initial Capacity ) ;", "if ( load Factor <= NUM_ ) throw new Illegal Argument Exception ( STR_ + load Factor ) ;", "this . load Factor = load Factor ;", "threshold = ( int ) ( capacity * load Factor ) ;", "mask = capacity - NUM_ ;", "hash Shift = NUM_ - Long . number Of Trailing Zeros ( capacity ) ;", "stash Capacity = Math . max ( NUM_ , ( int ) Math . ceil ( Math . log ( capacity ) ) * NUM_ ) ;", "push Iterations = Math . max ( Math . min ( capacity , NUM_ ) , ( int ) Math . sqrt ( capacity ) / NUM_ ) ;", "key Table = new long [ capacity + stash Capacity ] ;", "value Table = ( V [ ] ) new Object [ key Table . length ] ; }"]}
{"ids": "15088", "code": ["public void end Attributes ( ) throws SAX Exception {", "String uri = get Current Element Uri ( ) ;", "String local = get Current Element Local ( ) ;", "String prefix = ns Context . get Prefix ( uri ) ;", "assert ( prefix != null ) ;", "String qname ;", "if ( prefix . length ( ) != NUM_ ) qname = prefix + STR_ + local ;", "else qname = local ;", "ns Context . iterate Declared Prefixes ( start Prefix Callback ) ;", "writer . start Element ( uri , local , qname , attributes ) ;", "attributes . clear ( ) ;", "text Buf . set Length ( NUM_ ) ; }"]}
{"ids": "9048", "code": ["private String abbreviate Script ( String script ) {", "if ( script == null ) {", "return null ; }", "if ( script . length ( ) <= NUM_ ) {", "return script ; }", "return STR_ + script . substring ( NUM_ , NUM_ ) ; }"]}
{"ids": "12972", "code": ["public static void expand ID ( String number String , Word Relation word Relation , Item token Item ) {", "int number Digits = number String . length ( ) ;", "if ( ( number Digits == NUM_ ) && ( number String . char At ( NUM_ ) == STR_ ) && ( number String . char At ( NUM_ ) == STR_ ) ) {", "if ( number String . char At ( NUM_ ) == STR_ ) {", "expand Number ( number String , word Relation , token Item ) ; }", "else {", "expand Number ( number String . substring ( NUM_ , NUM_ ) , word Relation , token Item ) ;", "word Relation . add Word ( token Item , STR_ ) ; } }", "else if ( ( number Digits == NUM_ ) && ( number String . char At ( NUM_ ) == STR_ ) ) {", "word Relation . add Word ( token Item , STR_ ) ;", "expand Digits ( number String . substring ( NUM_ , NUM_ ) , word Relation , token Item ) ; }", "else if ( ( number Digits == NUM_ && number String . char At ( NUM_ ) == STR_ ) || number Digits < NUM_ ) {", "expand Number ( number String , word Relation , token Item ) ; }", "else if ( number Digits % NUM_ == NUM_ ) {", "String first Digit = digit 2 num [ number String . char At ( NUM_ ) - STR_ ] ;", "word Relation . add Word ( token Item , first Digit ) ;", "expand ID ( number String . substring ( NUM_ , number Digits ) , word Relation , token Item ) ; }", "else {", "expand Number ( number String . substring ( NUM_ , NUM_ ) , word Relation , token Item ) ;", "expand ID ( number String . substring ( NUM_ , number Digits ) , word Relation , token Item ) ; } }"]}
{"ids": "81114", "code": ["private static void unregister Mbeans From Props File ( M Bean Server m Bean Server ) throws Exception {", "Jamon Properties Loader loader = new Jamon Properties Loader ( ) ;", "List < String > jamon Jmx Bean Properties = loader . get Mx Beans ( ) ;", "Iterator < String > iter = jamon Jmx Bean Properties . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String bean Info = iter . next ( ) ;", "Monitor MX Bean m Xbean = Monitor MX Bean Factory . create ( bean Info ) ;", "m Bean Server . unregister M Bean ( Monitor MX Bean Factory . get Object Name ( m Xbean ) ) ;", "Monitor MX Bean m Xbean Delta = Monitor MX Bean Factory . create Delta ( bean Info ) ;", "m Bean Server . unregister M Bean ( Monitor MX Bean Factory . get Delta Object Name ( m Xbean Delta ) ) ; } }"]}
{"ids": "58028", "code": ["Source pop Import Source ( ) {", "return ( Source ) m import Source Stack . pop ( ) ; }"]}
{"ids": "7047", "code": ["public static Date zero Time Date ( Date date ) {", "final Gregorian Calendar gregorian Calendar = new Gregorian Calendar ( ) ;", "gregorian Calendar . set Time ( date ) ;", "gregorian Calendar . set ( Calendar . HOUR OF DAY , NUM_ ) ;", "gregorian Calendar . set ( Calendar . MINUTE , NUM_ ) ;", "gregorian Calendar . set ( Calendar . SECOND , NUM_ ) ;", "gregorian Calendar . set ( Calendar . MILLISECOND , NUM_ ) ;", "return gregorian Calendar . get Time ( ) ; }"]}
{"ids": "35476", "code": ["public static final void write Map Xml ( Map val , String name , Xml Serializer out ) throws Xml Pull Parser Exception , IO Exception {", "if ( val == null ) {", "out . start Tag ( null , STR_ ) ;", "out . end Tag ( null , STR_ ) ;", "return ; }", "Set s = val . entry Set ( ) ;", "Iterator i = s . iterator ( ) ;", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "while ( i . has Next ( ) ) {", "Map . Entry e = ( Map . Entry ) i . next ( ) ;", "write Value Xml ( e . get Value ( ) , ( String ) e . get Key ( ) , out ) ; }", "out . end Tag ( null , STR_ ) ; }"]}
{"ids": "75661", "code": ["protected void export ( ) {", "int ret Val ;", "File file ;", "Abstract File Saver saver ;", "if ( m File Chooser == null ) m File Chooser = GUI Helper . new Converter File Chooser ( ) ;", "ret Val = m File Chooser . show Save Dialog ( this ) ;", "if ( ret Val != Converter File Chooser . APPROVE OPTION ) return ;", "file = m File Chooser . get Selected File ( ) ;", "saver = m File Chooser . get Saver ( ) ;", "try {", "saver . set Instances ( m Data Panel . get Instances ( ) ) ;", "saver . write Batch ( ) ; }", "catch ( Exception e ) {", "J Option Pane . show Message Dialog ( this , STR_ + file + STR_ + Utils . throwable To String ( e ) , STR_ , J Option Pane . ERROR MESSAGE ) ; } }"]}
{"ids": "4861", "code": ["public void sort ( int i ) {", "Arrays . sort ( vector [ i ] , NUM_ , sizes . get ( i ) ) ; }"]}
{"ids": "79356", "code": ["private void create Map When Needed ( ) {", "if ( is Map Initialized ) {", "return ; }", "if ( resource Bundle != null ) {", "Set < String > set = resource Bundle . key Set ( ) ;", "top Level Map = new Hash Map < String , Object > ( set . size ( ) ) ;", "for ( String key : set ) {", "Object value = resource Bundle . get Object ( key ) ;", "top Level Map . put ( key , value ) ; } }", "else {", "top Level Map = new Hash Map < String , Object > ( NUM_ ) ; }", "top Level Map . put ( STR_ , resource Bundle ) ;", "is Map Initialized = true ; }"]}
{"ids": "57081", "code": ["public static Vector Clock increment ( Vector Clock clock , int ... nodes ) {", "for ( int n : nodes ) clock = clock . incremented ( ( short ) n , System . current Time Millis ( ) ) ;", "return clock ; }"]}
{"ids": "42356", "code": ["void create Heap Phi Instruction ( Basic Block bb , Heap Variable < Object > H ) {", "Instruction s = make Phi Instruction ( H , bb ) ;", "Array List < Instruction > heap Phis = heap Phi . get ( bb ) ;", "if ( heap Phis == null ) {", "heap Phis = new Array List < Instruction > ( NUM_ ) ;", "heap Phi . put ( bb , heap Phis ) ; }", "heap Phis . add ( s ) ;", "register Instruction ( s , bb ) ; }"]}
{"ids": "63576", "code": ["protected void print Time ( String s ) {", "Simple Date Format date Format = new Simple Date Format ( STR_ ) ;", "println ( date Format . format ( new java . util . Date ( ) ) + STR_ + s ) ; }"]}
{"ids": "82649", "code": ["public static int determine Sample Size ( Image Request image Request , Encoded Image encoded Image ) {", "if ( ! Encoded Image . is Meta Data Available ( encoded Image ) ) {", "return DEFAULT SAMPLE SIZE ; }", "float ratio = determine Downsample Ratio ( image Request , encoded Image ) ;", "int sample Size ;", "if ( encoded Image . get Image Format ( ) == Image Format . JPEG ) {", "sample Size = ratio To Sample Size JPEG ( ratio ) ; }", "else {", "sample Size = ratio To Sample Size ( ratio ) ; }", "int max Dimension = Math . max ( encoded Image . get Height ( ) , encoded Image . get Width ( ) ) ;", "while ( max Dimension / sample Size > MAX BITMAP SIZE ) {", "if ( encoded Image . get Image Format ( ) == Image Format . JPEG ) {", "sample Size *= NUM_ ; }", "else {", "sample Size ++ ; } }", "return sample Size ; }"]}
{"ids": "55689", "code": ["public Skeleton ( Print Writer out ) {", "this . out = out ; }"]}
{"ids": "19697", "code": ["public void disconnect ( ) {", "if ( conn != null ) {", "try {", "conn . close ( ) ; }", "catch ( SQL Exception e ) {", "logger . warn ( STR_ , e ) ; } }", "try {", "close Binlog ( ) ; }", "catch ( IO Exception e ) {", "logger . warn ( STR_ , e ) ; } }"]}
{"ids": "3051", "code": ["@ Override public int read ( byte [ ] b , int off , int len ) throws IO Exception {", "int n = in . read ( b , off , len ) ;", "if ( n == - NUM_ ) {", "throw If False EOF ( ) ; }", "else {", "bytes Read += n ; }", "return n ; }"]}
{"ids": "5458", "code": ["@ Override public Generator < I Line Segment > construct ( String [ ] args ) {", "return new Integer Generator ( Integer . value Of ( args [ NUM_ ] ) , Integer . value Of ( args [ NUM_ ] ) ) ; }"]}
{"ids": "76712", "code": ["public Spatial Strategy ( Spatial Context ctx , String field Name ) {", "if ( ctx == null ) throw new Illegal Argument Exception ( STR_ ) ;", "this . ctx = ctx ;", "if ( field Name == null || field Name . length ( ) == NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "this . field Name = field Name ; }"]}
{"ids": "65729", "code": ["public void dispose ( ) {", "if ( keys != null ) {", "keys . clear ( ) ;", "keys = null ; }", "super . dispose ( ) ; }"]}
{"ids": "35753", "code": ["public boolean is Fixed Disk ( String letter ) {", "if ( letter . length ( ) != NUM_ ) throw new Illegal Argument Exception ( STR_ + letter ) ;", "char drive = Character . to Upper Case ( letter . char At ( NUM_ ) ) ;", "if ( drive < STR_ || drive > STR_ ) throw new Illegal Argument Exception ( STR_ + drive ) ;", "return get Drive Type ( drive + STR_ ) == NUM_ ; }"]}
{"ids": "12606", "code": ["private Object [ ] compile ( String path ) {", "List list = new Array List ( ) ;", "if ( path == null ) {", "return list . to Array ( ) ; }", "String Tokenizer tok = new String Tokenizer ( path , STR_ ) ;", "while ( tok . has More Tokens ( ) ) {", "String token = tok . next Token ( ) ;", "Op Enum op = Op Enum . get Instance ( token ) ;", "if ( op == null ) {", "throw new Error ( STR_ + path ) ; }", "list . add ( op ) ;", "if ( op == Op Enum . RELATION ) {", "list . add ( tok . next Token ( ) ) ; } }", "return list . to Array ( ) ; }"]}
{"ids": "37442", "code": ["private void split Chunk ( final Memory Chunk chunk , final long address ) {", "final byte [ ] old Data = chunk . get Bytes ( ) ;", "final byte [ ] new Data 1 = new byte [ ( int ) ( address - chunk . get Address ( ) ) ] ;", "final byte [ ] new Data 2 = new byte [ ( chunk . get Length ( ) - new Data 1 . length ) ] ;", "System . arraycopy ( old Data , NUM_ , new Data 1 , NUM_ , new Data 1 . length ) ;", "System . arraycopy ( old Data , old Data . length - new Data 2 . length , new Data 2 , NUM_ , new Data 2 . length ) ;", "final Memory Chunk new Chunk 1 = new Memory Chunk ( chunk . get Address ( ) , new Data 1 ) ;", "final Memory Chunk new Chunk 2 = new Memory Chunk ( ( chunk . get Address ( ) + chunk . get Length ( ) ) - new Data 2 . length , new Data 2 ) ;", "remove Chunk ( chunk ) ;", "insert Chunk ( new Chunk 1 ) ;", "insert Chunk ( new Chunk 2 ) ; }"]}
{"ids": "74558", "code": ["public boolean is Dirty ( ) {", "return dirty ; }"]}
{"ids": "82159", "code": ["private Vector show Text Fixed Width ( String text , int align ) {", "Vector comps = new Vector ( ) ;", "if ( ( text == null ) || ( text . equals ( STR_ ) ) ) {", "return comps ; }", "int space W = width - x ;", "Vector words = get Words ( text , align , false ) ;", "if ( words . size ( ) > NUM_ ) {", "int w = NUM_ ;", "String word Str = STR_ ;", "if ( ( CSS Parser . is White Space ( text . char At ( NUM_ ) ) ) && ( cur Line . get Component Count ( ) != NUM_ ) ) {", "word Str = STR_ ; }", "while ( w < words . size ( ) ) {", "String next Word = ( String ) words . element At ( w ) ;", "String space = STR_ ;", "if ( ( ! word Str . equals ( STR_ ) ) && ( ! word Str . equals ( STR_ ) ) ) {", "space = STR_ ; }", "if ( font . string Width ( word Str + space + next Word ) > space W - NUM_ ) {", "comps . add Element ( add String ( word Str , align ) ) ;", "new Line If Not Empty ( align ) ;", "space W = width - x ;", "word Str = next Word ; }", "else {", "word Str += space + next Word ; }", "w ++ ; }", "if ( CSS Parser . is White Space ( text . char At ( text . length ( ) - NUM_ ) ) ) {", "word Str += STR_ ; }", "comps . add Element ( add String ( word Str , align ) ) ; }", "return comps ; }"]}
{"ids": "5544", "code": ["private void calculate Slot Usage ( ) {", "num Entries = NUM_ ;", "for ( int i = NUM_ ; i < table . table . length ; i ++ ) {", "Linked List < V > list = ( Linked List < V > ) table . table [ i ] ;", "if ( list != null ) {", "num Entries += list . size ( ) ;", "int Hash Table [ i ] += list . size ( ) ; } } }"]}
{"ids": "65021", "code": ["public Insert default Values ( ) {", "default Values = true ;", "columns . clear ( ) ;", "values To Insert . clear ( ) ;", "query = null ;", "invalidate Compile Cache ( ) ;", "return this ; }"]}
{"ids": "37479", "code": ["public C Filename Formatter ( final File directory ) {", "Preconditions . check Argument ( directory . exists ( ) , STR_ ) ;", "m directory = directory ; }"]}
{"ids": "54216", "code": ["public T pop ( ) {", "return list . remove Last ( ) ; }"]}
{"ids": "79285", "code": ["public Timestamp recalculate Estimated Completion Date ( Long priority , Timestamp start Date ) {", "if ( exist ( ) ) {", "get Production Run Routing Tasks ( ) ;", "if ( quantity == null ) get Quantity ( ) ;", "Timestamp end Date = null ;", "for ( Iterator < Generic Value > iter = production Run Routing Tasks . iterator ( ) ; iter . has Next ( ) ; ) {", "Generic Value routing Task = iter . next ( ) ;", "if ( priority . compare To ( routing Task . get Long ( STR_ ) ) <= NUM_ ) {", "long total Time = Production Run . get Estimated Task Time ( routing Task , quantity , dispatcher ) ;", "end Date = Tech Data Services . add Forward ( Tech Data Services . get Tech Data Calendar ( routing Task ) , start Date , total Time ) ;", "routing Task . set ( STR_ , start Date ) ;", "routing Task . set ( STR_ , end Date ) ;", "start Date = end Date ; } }", "return end Date ; }", "else {", "return null ; } }"]}
{"ids": "29516", "code": ["public static String node List To String ( List < ? extends Node > list ) {", "String Buffer buf = new String Buffer ( ) ;", "buf . append ( STR_ ) ;", "if ( list . size ( ) > NUM_ ) {", "buf . append ( STR_ + dom To String ( list . get ( NUM_ ) ) + STR_ ) ;", "for ( int i = NUM_ ; i < list . size ( ) ; ++ i ) {", "buf . append ( STR_ + i + STR_ + dom To String ( list . get ( NUM_ ) ) + STR_ ) ; }", "buf . append ( STR_ ) ; }", "buf . append ( STR_ ) ;", "return buf . to String ( ) ; }"]}
{"ids": "67626", "code": ["protected Element adapt ( Element source , Element Metadata < ? , ? > source Meta , String kind ) {", "Element Key < ? , ? > adaptor Key = source Meta . adapt ( kind ) ;", "if ( adaptor Key != null ) {", "try {", "return adapt ( adaptor Key , source ) ; }", "catch ( Content Creation Exception e ) {", "LOGGER . log ( Level . SEVERE , STR_ + source . get Class ( ) + STR_ + adaptor Key . get Element Type ( ) , e ) ; } }", "return source ; }"]}
{"ids": "70725", "code": ["public String convert Alias To Number ( String alias Name ) {", "if ( ! alias Name . contains ( STR_ ) && Alias Database . contains Alias ( alias Name ) ) {", "String [ ] res = Alias Database . get Alias ( alias Name ) ;", "return res [ NUM_ ] ; }", "return alias Name ; }"]}
{"ids": "78739", "code": ["public Attr ( String name , @ Nullable Format format ) {", "this . name = name ;", "if ( format != null ) {", "formats = Collections . singleton List ( format ) ; } }"]}
{"ids": "40345", "code": ["static Stream Tokenizer make Tokenizer ( String tag Value ) {", "Stream Tokenizer tokenizer = new Stream Tokenizer ( new String Reader ( tag Value ) ) ;", "tokenizer . reset Syntax ( ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . word Chars ( STR_ , STR_ ) ;", "tokenizer . quote Char ( STR_ ) ;", "tokenizer . quote Char ( STR_ ) ;", "tokenizer . whitespace Chars ( STR_ , STR_ ) ;", "tokenizer . whitespace Chars ( STR_ , STR_ ) ;", "tokenizer . whitespace Chars ( STR_ , STR_ ) ;", "tokenizer . whitespace Chars ( STR_ , STR_ ) ;", "tokenizer . eol Is Significant ( false ) ;", "return tokenizer ; }"]}
{"ids": "73723", "code": ["private void send Request ( ) {", "int i = tab Pane . get Selected Index ( ) ;", "String prompt = rb . get String ( STR_ + i + STR_ ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + prompt + STR_ + i ) ; }", "if ( source == null ) {", "log . error ( STR_ ) ;", "timer . stop ( ) ;", "return ; }", "source . send Bytes ( prompt . get Bytes ( ) ) ; }"]}
{"ids": "63702", "code": ["public void remove ( Predicate filter ) {", "for ( Int Iterator ii = rows ( filter ) ; ii . has Next ( ) ; ) remove Row ( ii . next Int ( ) ) ; }"]}
{"ids": "5162", "code": ["private void calculate Trim Area ( Rect bounds ) {", "float size = Math . min ( bounds . height ( ) , bounds . width ( ) ) ;", "float y Offset = ( bounds . height ( ) - size ) / NUM_ ;", "float x Offset = ( bounds . width ( ) - size ) / NUM_ ;", "float padding = m Padding + ( bounds . height ( ) - NUM_ * m Padding ) * NUM_ / NUM_ ;", "m Internal Bounds . set ( bounds . left + padding + x Offset , bounds . top + padding + y Offset , bounds . right - padding - x Offset , bounds . bottom - padding - y Offset ) ;", "m Center = m Internal Bounds . center X ( ) ;", "m Size = m Internal Bounds . width ( ) ;", "m Play Tip Offset = NUM_ / NUM_ * m Size ;", "m Play Base Offset = NUM_ * m Size ;", "set Transition State ( NUM_ , NUM_ ) ; }"]}
{"ids": "43194", "code": ["protected void init Instances ( Operation post , Service Document ... states ) {", "init Instances ( post , true , true , states ) ; }"]}
{"ids": "38233", "code": ["protected Instance merge Instances ( Instance source , Instance dest ) {", "Instances output Format = output Format Peek ( ) ;", "double [ ] vals = new double [ output Format . num Attributes ( ) ] ;", "for ( int i = NUM_ ; i < vals . length ; i ++ ) {", "if ( ( i != output Format . class Index ( ) ) && ( m Selected Cols . is In Range ( i ) ) ) {", "if ( ( source != null ) && ! source . is Missing ( i ) && ! dest . is Missing ( i ) ) {", "vals [ i ] = dest . value ( i ) - source . value ( i ) ; }", "else {", "vals [ i ] = Utils . missing Value ( ) ; } }", "else {", "vals [ i ] = dest . value ( i ) ; } }", "Instance inst = null ;", "if ( dest instanceof Sparse Instance ) {", "inst = new Sparse Instance ( dest . weight ( ) , vals ) ; }", "else {", "inst = new Dense Instance ( dest . weight ( ) , vals ) ; }", "inst . set Dataset ( dest . dataset ( ) ) ;", "return inst ; }"]}
{"ids": "66868", "code": ["public Source Call Chain Builder ( int timeout , boolean process callbacks ) {", "this . timeout = timeout ;", "this . process callbacks = process callbacks ; }"]}
{"ids": "56400", "code": ["public synchronized float recovered Bytes Percent ( ) {", "long total = NUM_ ;", "long recovered = NUM_ ;", "for ( File file : file Details . values ( ) ) {", "if ( file . reused ( ) == false ) {", "total += file . length ( ) ;", "recovered += file . recovered ( ) ; } }", "if ( total == NUM_ && file Details . size ( ) == NUM_ ) {", "return NUM_ ; }", "if ( total == recovered ) {", "return NUM_ ; }", "else {", "return NUM_ * recovered / total ; } }"]}
{"ids": "13522", "code": ["public < E extends T > Event Binder < E > on ( ) {", "return new Event Binder < > ( Optional . empty ( ) ) ; }"]}
{"ids": "12528", "code": ["private boolean is Value Supported ( Object value ) {", "for ( int i = NUM_ ; i < values . length ; i ++ ) {", "if ( value . equals ( values [ i ] ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "52295", "code": ["public static Bit Set from Byte Array ( byte [ ] bytes ) {", "Bit Set bits = new Bit Set ( ) ;", "for ( int i = NUM_ ; i < bytes . length * NUM_ ; i ++ ) {", "if ( ( bytes [ bytes . length - i / NUM_ - NUM_ ] & ( NUM_ << ( i % NUM_ ) ) ) > NUM_ ) {", "bits . set ( i ) ; } }", "return bits ; }"]}
{"ids": "86971", "code": ["public Repeat Time create Repeat Time ( int repeat Interval , int active Duration , int [ ] offsets ) {", "Repeat Field repeat Time Field = new Repeat Field ( ) ;", "try {", "repeat Time Field . set Repeat Interval ( repeat Interval ) ;", "repeat Time Field . set Active Duration ( active Duration ) ;", "repeat Time Field . set Offset Array ( offsets ) ; }", "catch ( Sdp Exception s ) {", "s . print Stack Trace ( ) ; }", "return repeat Time Field ; }"]}
{"ids": "69642", "code": ["public void remove ( int i ) {", "if ( ( i >= array . length ) || ( i < NUM_ ) ) throw new Array Index Out Of Bounds Exception ( STR_ + i + STR_ + array . length ) ;", "NS Object [ ] new Array = new NS Object [ array . length - NUM_ ] ;", "System . arraycopy ( array , NUM_ , new Array , NUM_ , i ) ;", "System . arraycopy ( array , i + NUM_ , new Array , i , array . length - i - NUM_ ) ;", "array = new Array ; }"]}
{"ids": "83467", "code": ["private Time parse Time ( String time String ) throws Parse Exception {", "java . util . Date parsed Date = Time Field . parse ( time String ) ;", "if ( parsed Date == null ) return null ;", "return new Time ( parsed Date . get Time ( ) ) ; }"]}
{"ids": "81646", "code": ["public synchronized void delete Observers ( ) {", "observers . clear ( ) ; }"]}
{"ids": "77385", "code": ["private void decrement Copy Field Target Count ( Schema Field dest ) {", "Integer count = copy Field Target Counts . get ( dest ) ;", "assert count != null ;", "if ( count <= NUM_ ) {", "copy Field Target Counts . remove ( dest ) ; }", "else {", "copy Field Target Counts . put ( dest , count - NUM_ ) ; } }"]}
{"ids": "64538", "code": ["public synchronized int update Purchase ( String order Id , String product Id , Purchase State purchase State , long purchase Time , String developer Payload ) {", "insert Order ( order Id , product Id , purchase State , purchase Time , developer Payload ) ;", "Cursor cursor = m Db . query ( PURCHASE HISTORY TABLE NAME , HISTORY COLUMNS , HISTORY PRODUCT ID COL + STR_ , new String [ ] { product Id } , null , null , null , null ) ;", "if ( cursor == null ) {", "return NUM_ ; }", "int quantity = NUM_ ;", "try {", "while ( cursor . move To Next ( ) ) {", "int state Index = cursor . get Int ( NUM_ ) ;", "Purchase State state = Purchase State . value Of ( state Index ) ;", "if ( state == Purchase State . PURCHASED || state == Purchase State . REFUNDED ) {", "quantity += NUM_ ; } }", "update Purchased Item ( product Id , quantity ) ; }", "finally {", "if ( cursor != null ) {", "cursor . close ( ) ; } }", "return quantity ; }"]}
{"ids": "15223", "code": ["public static Calendar from Unix Time ( long unix Time , Time Unit time Unit ) {", "Calendar calendar = get Calendar Instance ( ) ;", "calendar . set Time Zone ( Time Zone . get Default ( ) ) ;", "long millis = time Unit . to Millis ( unix Time ) ;", "calendar . set Time In Millis ( millis ) ;", "return calendar ; }"]}
{"ids": "5015", "code": ["private void open board design action ( ) {", "Design File design file = open dialog ( stat , main options . design dir name ) ;", "if ( design file == null ) {", "stat . user Println ( resources . get String ( STR_ ) ) ;", "return ; }", "String message = resources . get String ( STR_ ) + STR_ + design file . get name ( ) ;", "stat . user Println ( message ) ;", "Board Frame board frame = new Board Frame ( design file , stat ) ;", "Import Design d import = new Import Design ( board frame ) ;", "d import . execute ( ) ; }"]}
{"ids": "48452", "code": ["public static String retrieve Display Name ( String id , boolean daylight , int style , Locale locale ) {", "String [ ] names = retrieve Display Names Impl ( id , locale ) ;", "if ( Objects . non Null ( names ) ) {", "return names [ ( daylight ? NUM_ : NUM_ ) - style ] ; }", "else {", "return null ; } }"]}
{"ids": "76670", "code": ["protected Query new Fuzzy Query ( Term term , float minimum Similarity , int prefix Length ) {", "String text = term . text ( ) ;", "int num Edits = Fuzzy Query . float To Edits ( minimum Similarity , text . code Point Count ( NUM_ , text . length ( ) ) ) ;", "return new Fuzzy Query ( term , num Edits , prefix Length ) ; }"]}
{"ids": "2022", "code": ["@ Override public void play Video ( Uri uri , String title ) {", "Camera Activity activity = m Activity . get ( ) ;", "if ( activity != null ) {", "Camera Util . play Video ( activity , uri , title ) ; } }"]}
{"ids": "29028", "code": ["public void copy From ( Path other ) {", "grow ( other . length - NUM_ ) ;", "System . arraycopy ( other . block Id List , NUM_ , this . block Id List , NUM_ , other . length ) ;", "this . length = other . length ;", "this . cached Hash Code = other . cached Hash Code ; }"]}
{"ids": "30436", "code": ["void recover Messages ( ) throws Rollback Failed Exception {", "if ( m is Queue ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . log ( Level . FINE , STR_ ) ; }", "unacked Messages . clear ( ) ;", "if ( ! is Auto Ack ( ) ) {", "rollback Local Transaction ( ) ; } }", "else {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . log ( Level . FINE , STR_ ) ; }", "unacked Messages . add All ( recover Messages ) ;", "Linked List < Message Queue Element > temp = unacked Messages ;", "recover Messages . clear ( ) ;", "unacked Messages = recover Messages ;", "recover Messages = temp ; } }"]}
{"ids": "16740", "code": ["private void maybe Sample Sync Params ( ) {", "long playback Position Us = audio Track Util . get Playback Head Position Us ( ) ;", "if ( playback Position Us == NUM_ ) {", "return ; }", "long system Clock Us = System . nano Time ( ) / NUM_ ;", "if ( system Clock Us - last Playhead Sample Time Us >= MIN PLAYHEAD OFFSET SAMPLE INTERVAL US ) {", "playhead Offsets [ next Playhead Offset Index ] = playback Position Us - system Clock Us ;", "next Playhead Offset Index = ( next Playhead Offset Index + NUM_ ) % MAX PLAYHEAD OFFSET COUNT ;", "if ( playhead Offset Count < MAX PLAYHEAD OFFSET COUNT ) {", "playhead Offset Count ++ ; }", "last Playhead Sample Time Us = system Clock Us ;", "smoothed Playhead Offset Us = NUM_ ;", "for ( int i = NUM_ ; i < playhead Offset Count ; i ++ ) {", "smoothed Playhead Offset Us += playhead Offsets [ i ] / playhead Offset Count ; } }", "if ( ! is Passthrough ( ) && system Clock Us - last Timestamp Sample Time Us >= MIN TIMESTAMP SAMPLE INTERVAL US ) {", "audio Timestamp Set = audio Track Util . update Timestamp ( ) ;", "if ( audio Timestamp Set ) {", "long audio Timestamp Us = audio Track Util . get Timestamp Nano Time ( ) / NUM_ ;", "long audio Timestamp Frame Position = audio Track Util . get Timestamp Frame Position ( ) ;", "if ( audio Timestamp Us < resume System Time Us ) {", "audio Timestamp Set = false ; }", "else if ( Math . abs ( audio Timestamp Us - system Clock Us ) > MAX AUDIO TIMESTAMP OFFSET US ) {", "String message = STR_ + audio Timestamp Frame Position + STR_ + audio Timestamp Us + STR_ + system Clock Us + STR_ + playback Position Us ;", "if ( fail On Spurious Audio Timestamp ) {", "throw new Invalid Audio Track Timestamp Exception ( message ) ; }", "Log . w ( TAG , message ) ;", "audio Timestamp Set = false ; }", "else if ( Math . abs ( frames To Duration Us ( audio Timestamp Frame Position ) - playback Position Us ) > MAX AUDIO TIMESTAMP OFFSET US ) {", "String message = STR_ + audio Timestamp Frame Position + STR_ + audio Timestamp Us + STR_ + system Clock Us + STR_ + playback Position Us ;", "if ( fail On Spurious Audio Timestamp ) {", "throw new Invalid Audio Track Timestamp Exception ( message ) ; }", "Log . w ( TAG , message ) ;", "audio Timestamp Set = false ; } }", "if ( get Latency Method != null ) {", "try {", "latency Us = ( Integer ) get Latency Method . invoke ( audio Track , ( Object [ ] ) null ) * NUM_ - frames To Duration Us ( bytes To Frames ( buffer Size ) ) ;", "latency Us = Math . max ( latency Us , NUM_ ) ;", "if ( latency Us > MAX LATENCY US ) {", "Log . w ( TAG , STR_ + latency Us ) ;", "latency Us = NUM_ ; } }", "catch ( Exception e ) {", "get Latency Method = null ; } }", "last Timestamp Sample Time Us = system Clock Us ; } }"]}
{"ids": "1225", "code": ["private Map < Key , Array > store ( Class clazz ) {", "Method [ ] methods = clazz . get Methods ( ) ;", "Map < Key , Array > methods Map = new Concurrent Hash Map < Key , Array > ( ) ;", "for ( int i = NUM_ ; i < methods . length ; i ++ ) {", "store Method ( methods [ i ] , methods Map ) ; }", "map . put ( clazz , methods Map ) ;", "return methods Map ; }"]}
{"ids": "17701", "code": ["private void read Central Dir ( ) throws IO Exception {", "long scan Offset = raf . length ( ) - ENDHDR ;", "if ( scan Offset < NUM_ ) {", "throw new Zip Exception ( STR_ + raf . length ( ) ) ; }", "raf . seek ( NUM_ ) ;", "final int header Magic = Integer . reverse Bytes ( raf . read Int ( ) ) ;", "if ( header Magic != LOCSIG ) {", "throw new Zip Exception ( STR_ ) ; }", "long stop Offset = scan Offset - NUM_ ;", "if ( stop Offset < NUM_ ) {", "stop Offset = NUM_ ; }", "while ( true ) {", "raf . seek ( scan Offset ) ;", "if ( Integer . reverse Bytes ( raf . read Int ( ) ) == ENDSIG ) {", "break ; }", "scan Offset -- ;", "if ( scan Offset < stop Offset ) {", "throw new Zip Exception ( STR_ ) ; } }", "byte [ ] eocd = new byte [ ENDHDR - NUM_ ] ;", "raf . read Fully ( eocd ) ;", "Buffer Iterator it = Heap Buffer Iterator . iterator ( eocd , NUM_ , eocd . length , Byte Order . LITTLE ENDIAN ) ;", "int disk Number = it . read Short ( ) & NUM_ ;", "int disk With Central Dir = it . read Short ( ) & NUM_ ;", "int num Entries = it . read Short ( ) & NUM_ ;", "int total Num Entries = it . read Short ( ) & NUM_ ;", "it . skip ( NUM_ ) ;", "long central Dir Offset = ( ( long ) it . read Int ( ) ) & NUM_ ;", "int comment Length = it . read Short ( ) & NUM_ ;", "if ( num Entries != total Num Entries || disk Number != NUM_ || disk With Central Dir != NUM_ ) {", "throw new Zip Exception ( STR_ ) ; }", "if ( comment Length > NUM_ ) {", "byte [ ] comment Bytes = new byte [ comment Length ] ;", "raf . read Fully ( comment Bytes ) ;", "comment = new String ( comment Bytes , NUM_ , comment Bytes . length , Standard Charsets . UTF 8 ) ; }", "RAF Stream raf Stream = new RAF Stream ( raf , central Dir Offset ) ;", "Buffered Input Stream buffered Stream = new Buffered Input Stream ( raf Stream , NUM_ ) ;", "byte [ ] hdr Buf = new byte [ CENHDR ] ;", "for ( int i = NUM_ ; i < num Entries ; ++ i ) {", "Zip Entry new Entry = new Zip Entry ( hdr Buf , buffered Stream ) ;", "if ( new Entry . local Header Rel Offset >= central Dir Offset ) {", "throw new Zip Exception ( STR_ ) ; }", "String entry Name = new Entry . get Name ( ) ;", "if ( entries . put ( entry Name , new Entry ) != null ) {", "throw new Zip Exception ( STR_ + entry Name ) ; } } }"]}
{"ids": "996", "code": ["protected int read Fully ( Input Stream in , byte buffer [ ] , int offset , int len ) throws IO Exception {", "for ( int i = NUM_ ; i < len ; i ++ ) {", "int q = in . read ( ) ;", "if ( q == - NUM_ ) return ( ( i == NUM_ ) ? - NUM_ : i ) ;", "buffer [ i + offset ] = ( byte ) q ; }", "return len ; }"]}
{"ids": "30855", "code": ["private long renew Service Lease Do ( Service ID service ID , Uuid lease ID , long renew Duration ) throws Unknown Lease Exception {", "long now = System . current Time Millis ( ) ;", "long renew Expiration = renew Service Lease Int ( service ID , lease ID , renew Duration , now ) ;", "add Log Record ( new Service Lease Renewed Log Obj ( service ID , lease ID , renew Expiration ) ) ;", "return renew Expiration - now ; }"]}
{"ids": "23393", "code": ["public Block Swapper ( World world , Entity Player player , Item Stack truncator , Block Pos orig Coords , int range , boolean leaves ) {", "this . world = world ;", "this . player = player ;", "this . truncator = truncator ;", "this . origin = orig Coords ;", "this . range = range ;", "this . treat Leaves Special = leaves ;", "this . candidate Queue = new Priority Queue < > ( ) ;", "this . completed Coords = new Hash Set < > ( ) ;", "candidate Queue . offer ( new Swap Candidate ( this . origin , this . range ) ) ; }"]}
{"ids": "50384", "code": ["public static String [ ] to String Array ( Enumeration < String > enumeration ) {", "if ( enumeration == null ) {", "return null ; }", "List < String > list = Collections . list ( enumeration ) ;", "return list . to Array ( new String [ list . size ( ) ] ) ; }"]}
{"ids": "1969", "code": ["public boolean overlap Save ( Sphere Cluster other ) {", "double min Dist = Math . sqrt ( NUM_ ) * ( get Radius ( ) + other . get Radius ( ) ) ;", "double diff = get Center Distance ( other ) - min Dist ;", "return diff > NUM_ ; }"]}
{"ids": "21905", "code": ["@ PUT @ Consumes ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Path ( STR_ ) @ Produces ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Check Permission ( roles = { Role . SYSTEM ADMIN , Role . RESTRICTED SYSTEM ADMIN } ) public File Virtual Pool Rest Rep update File Virtual Pool With Assigned Pools ( @ Path Param ( STR_ ) URI id , Virtual Pool Pool Update Param param ) {", "Virtual Pool v Pool = update Virtual Pool With Assigned Storage Pools ( id , param ) ;", "return to File Virtual Pool ( v Pool , Virtual Pool . get File Remote Protection Settings ( v Pool , db Client ) ) ; }"]}
{"ids": "79428", "code": ["public static java . sql . Date to Sql Date ( int month , int day , int year ) {", "java . util . Date new Date = to Date ( month , day , year , NUM_ , NUM_ , NUM_ ) ;", "if ( new Date != null ) {", "return new java . sql . Date ( new Date . get Time ( ) ) ; }", "else {", "return null ; } }"]}
{"ids": "39384", "code": ["public Object read Default List Model ( Element node ) throws Exception {", "Default List Model model ;", "Vector < Element > children ;", "Element child ;", "int i ;", "int index ;", "int curr Index ;", "if ( DEBUG ) {", "trace ( new Throwable ( ) , node . get Attribute ( ATT NAME ) ) ; }", "m Current Node = node ;", "children = XML Document . get Child Tags ( node ) ;", "model = new Default List Model ( ) ;", "index = children . size ( ) - NUM_ ;", "for ( i = NUM_ ; i < children . size ( ) ; i ++ ) {", "child = children . get ( i ) ;", "curr Index = Integer . parse Int ( child . get Attribute ( ATT NAME ) ) ;", "if ( curr Index > index ) {", "index = curr Index ; } }", "model . set Size ( index + NUM_ ) ;", "for ( i = NUM_ ; i < children . size ( ) ; i ++ ) {", "child = children . get ( i ) ;", "model . set ( Integer . parse Int ( child . get Attribute ( ATT NAME ) ) , invoke Read From XML ( child ) ) ; }", "return model ; }"]}
{"ids": "34052", "code": ["private boolean results Identical ( String named Curve , Big Integer bad X , Big Integer bad Y , Big Integer secret , int iter ) throws Invalid Algorithm Parameter Exception , No Such Algorithm Exception , Invalid Key Spec Exception , Invalid Key Exception {", "for ( int i = NUM_ ; i < iter ; i ++ ) {", "secret = secret . add ( Big Integer . ONE ) ;", "Big Integer result Custom = compute Secret With Custom Algorithm ( named Curve , bad X , bad Y , secret ) ;", "Big Integer result Sun = compute Secret With Sun Algorithm ( named Curve , bad X , bad Y , secret ) ;", "if ( result Sun != null && ! result Sun . equals ( result Custom ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "69102", "code": ["public void enable Layers ( boolean enable ) {", "Texture State texture State = ( Texture State ) get Local Render State ( Render State . State Type . Texture ) ;", "texture State . set Enabled ( enable ) ;", "mark Dirty ( Dirty Type . Render State ) ; }"]}
{"ids": "76234", "code": ["protected void starve Randomly ( int limit ) {", "while ( population . size ( ) > limit ) {", "int remove Pos = Randomness . next Int ( ) % population . size ( ) ;", "population . remove ( remove Pos ) ; } }"]}
{"ids": "79815", "code": ["public void save Param ( ) throws Exception {", "Enumeration < Abstract Param Panel > en = table Panel . elements ( ) ;", "Abstract Param Panel panel = null ;", "while ( en . has More Elements ( ) ) {", "panel = en . next Element ( ) ;", "panel . save Param ( param Object ) ; } }"]}
{"ids": "82610", "code": ["@ Suppress Warnings ( STR_ ) public static Local Streaming Container wait For Activation ( Stram Local Cluster local Cluster , PT Operator operator ) throws Interrupted Exception {", "Local Streaming Container container ;", "long start Millis = System . current Time Millis ( ) ;", "while ( System . current Time Millis ( ) < ( start Millis + DEFAULT TIMEOUT MILLIS ) ) {", "if ( operator . get State ( ) == PT Operator . State . ACTIVE ) {", "if ( ( container = local Cluster . get Container ( operator ) ) != null ) {", "return container ; } }", "LOG . debug ( STR_ , new Object [ ] { operator , operator . get State ( ) , operator . get Container ( ) } ) ;", "Thread . sleep ( NUM_ ) ; }", "Assert . fail ( STR_ + operator ) ;", "return null ; }"]}
{"ids": "51457", "code": ["protected String to External Form ( URL url ) {", "return to External Form ( url , false ) ; }"]}
{"ids": "83174", "code": ["public Result Set execute Query ( String query ) throws SQL Exception , No Connection Exception {", "if ( connection != null ) {", "Statement st = connection . create Statement ( ) ;", "return st . execute Query ( query ) ; }", "throw new No Connection Exception ( ) ; }"]}
{"ids": "15338", "code": ["private void reject Access And Terminate Process ( Radius Response response , Context Holder holder ) {", "response . set Response Packet ( new Access Reject ( ) ) ;", "response . set Universal Id ( holder . get Universal Id ( ) ) ;", "terminate Authn Process ( holder ) ; }"]}
{"ids": "22549", "code": ["public Sc Volume create View Volume ( String name , String instance Id ) throws Storage Center API Exception {", "LOG . debug ( STR_ , instance Id ) ;", "String error Message = STR_ ;", "Parameters params = new Parameters ( ) ;", "params . add ( STR_ , name ) ;", "params . add ( STR_ , NOTES STRING ) ;", "try {", "Rest Result result = rest Client . post ( String . format ( STR_ , instance Id ) , params . to Json ( ) ) ;", "if ( check Results ( result ) ) {", "return gson . from Json ( result . get Result ( ) , Sc Volume . class ) ; } }", "catch ( Exception e ) {", "error Message = String . format ( STR_ , e ) ;", "LOG . warn ( error Message ) ; }", "if ( error Message . length ( ) == NUM_ ) {", "error Message = String . format ( STR_ , name , instance Id ) ; }", "throw new Storage Center API Exception ( error Message ) ; }"]}
{"ids": "51348", "code": ["@ Override public boolean contains ( Object object ) {", "return index Of ( object , NUM_ ) != - NUM_ ; }"]}
{"ids": "22265", "code": ["public void sync ( ) throws Storage Fault {", "final String method Name = STR_ ;", "log . debug ( method Name + STR_ ) ;", "try {", "log . trace ( method Name + STR_ ) ;", "sync Manager . sync All ( ) ; }", "catch ( SOS Failure e ) {", "log . error ( method Name + STR_ , e ) ;", "throw Fault Util . Storage Fault ( e ) ; }", "log . debug ( method Name + STR_ ) ; }"]}
{"ids": "65803", "code": ["private void add Menu Item ( J Popup Menu menu , String title , MWF Node Next line ) {", "WF Popup Item item = new WF Popup Item ( title , line ) ;", "menu . add ( item ) ;", "item . add Action Listener ( this ) ; }"]}
{"ids": "35598", "code": ["public static Matcher < Binding Set > binds ( String name , Class < ? > value ) {", "return new Binds Matcher < Object > ( name , instance Of ( value ) ) ; }"]}
{"ids": "21866", "code": ["public void cancel Task No Exception ( Task task ) {", "try {", "cancel Task ( task ) ; }", "catch ( Exception e ) {", "log . error ( STR_ ) ; } }"]}
{"ids": "30894", "code": ["public int read ( byte b [ ] , int off , int len ) throws IO Exception , Log Exception {", "if ( length < len ) bad Read ( len ) ;", "len = in . read ( b , off , len ) ;", "length -= len ;", "return len ; }"]}
{"ids": "40086", "code": ["public static void migrate From 6 To 7 ( SQ Lite Database db ) {", "String select Query = STR_ + Database Helper . TABLE GRIDITEMRELATIONS ;", "Cursor c = db . raw Query ( select Query , null ) ;", "if ( c . move To First ( ) ) {", "do {", "try {", "int grid Itemid = c . get Int ( c . get Column Index ( Database Helper . KEY ID ) ) ;", "int plugin Id = c . get Int ( c . get Column Index ( Database Helper . KEY GRIDITEMRELATIONS PLUGIN ) ) ;", "String pluginpage Url Query = STR_ + Database Helper . KEY MUNINPLUGINS PLUGINPAGEURL + STR_ + Database Helper . TABLE MUNINPLUGINS + STR_ + Database Helper . KEY ID + STR_ + plugin Id ;", "Cursor c 2 = db . raw Query ( pluginpage Url Query , null ) ;", "if ( c 2 . move To First ( ) ) {", "String pluginpage Url = c 2 . get String ( c 2 . get Column Index ( Database Helper . KEY MUNINPLUGINS PLUGINPAGEURL ) ) ;", "Content Values values = new Content Values ( ) ;", "values . put ( Database Helper . KEY GRIDITEMRELATIONS PLUGINPAGEURL , pluginpage Url ) ;", "db . update ( Database Helper . TABLE GRIDITEMRELATIONS , values , Database Helper . KEY ID + STR_ , new String [ ] { String . value Of ( grid Itemid ) } ) ; }", "c 2 . close ( ) ; }", "catch ( Exception ex ) {", "ex . print Stack Trace ( ) ; } }", "while ( c . move To Next ( ) ) ; }", "c . close ( ) ; }"]}
{"ids": "72279", "code": ["public static Input Stream crop Image ( Input Stream input Stream , int image Width , int image Height , int out Width , int out Height ) throws Illegal Argument Exception {", "if ( input Stream == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( image Width <= NUM_ || image Height <= NUM_ ) {", "throw new Illegal Argument Exception ( String . format ( STR_ + STR_ , image Width , image Height ) ) ; }", "if ( out Width <= NUM_ || out Height <= NUM_ ) {", "throw new Illegal Argument Exception ( String . format ( STR_ + STR_ , image Width , out Height ) ) ; }", "int scale Down Sample Size = Math . min ( image Width / out Width , image Height / out Height ) ;", "if ( scale Down Sample Size > NUM_ ) {", "image Width /= scale Down Sample Size ;", "image Height /= scale Down Sample Size ; }", "else {", "float ratio = ( float ) out Width / out Height ;", "if ( image Width < image Height * ratio ) {", "out Width = image Width ;", "out Height = ( int ) ( out Width / ratio ) ; }", "else {", "out Height = image Height ;", "out Width = ( int ) ( out Height * ratio ) ; } }", "int left = ( image Width - out Width ) / NUM_ ;", "int top = ( image Height - out Height ) / NUM_ ;", "Input Stream compressed = null ;", "try {", "Bitmap Factory . Options options = new Bitmap Factory . Options ( ) ;", "if ( scale Down Sample Size > NUM_ ) {", "options . in Sample Size = scale Down Sample Size ; }", "Bitmap bitmap = Bitmap Factory . decode Stream ( input Stream , null , options ) ;", "if ( bitmap == null ) {", "return null ; }", "Bitmap cropped = Bitmap . create Bitmap ( bitmap , left , top , out Width , out Height ) ;", "Byte Array Output Stream tmp Out = new Byte Array Output Stream ( NUM_ ) ;", "if ( cropped . compress ( Bitmap . Compress Format . PNG , DEFAULT IMG QUALITY , tmp Out ) ) {", "byte [ ] out Byte Array = tmp Out . to Byte Array ( ) ;", "compressed = new Byte Array Input Stream ( out Byte Array ) ; } }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ + e ) ; }", "return compressed ; }"]}
{"ids": "7963", "code": ["@ Override public void dataset Changed ( Dataset Change Event event ) {", "fire Dataset Changed ( ) ; }"]}
{"ids": "11101", "code": ["public void drawing Complete ( OM Graphic omg , OM Action action ) {", "if ( timer Button . is Selected ( ) ) {", "timer . restart ( ) ; }", "if ( omg instanceof OM Point ) {", "OM Point p = ( OM Point ) omg ;", "GL Point mp = new GL Point ( p . get Lat ( ) , p . get Lon ( ) , p . get Radius ( ) , true ) ;", "mp . set Name ( STR_ + ( point Count ++ ) ) ;", "mp . set Stationary ( true ) ;", "mp . show Palette ( ) ;", "points . put ( mp . get Name ( ) , mp ) ;", "manage Graphics ( ) ; }", "else if ( omg instanceof OM Poly ) {", "OM Poly poly = ( OM Poly ) omg ;", "Path GL Point pmp = new Path GL Point ( poly , NUM_ , true ) ;", "pmp . set Name ( STR_ + ( point Count ++ ) ) ;", "pmp . show Palette ( ) ;", "points . put ( pmp . get Name ( ) , pmp ) ;", "manage Graphics ( ) ; }", "add Node Button . set Enabled ( true ) ;", "add Path Button . set Enabled ( true ) ; }"]}
{"ids": "30012", "code": ["public static String hash Key For Disk ( String key ) {", "String cache Key ;", "try {", "final Message Digest m Digest = Message Digest . get Instance ( STR_ ) ;", "m Digest . update ( key . get Bytes ( ) ) ;", "cache Key = bytes To Hex String ( m Digest . digest ( ) ) ; }", "catch ( No Such Algorithm Exception e ) {", "cache Key = String . value Of ( key . hash Code ( ) ) ; }", "return cache Key ; }"]}
{"ids": "81765", "code": ["static int first Illegal Character ( String source ) {", "for ( int i = NUM_ ; i < source . length ( ) ; i ++ ) {", "if ( is Legal ( source . char At ( i ) ) == false ) {", "return i ; } }", "return - NUM_ ; }"]}
{"ids": "29181", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return COOKIE ;", "case NUM_ :", "return USER ID ;", "default :", "return null ; } }"]}
{"ids": "31463", "code": ["public Charset charset ( ) {", "return charset != null ? Charset . for Name ( charset ) : null ; }"]}
{"ids": "22532", "code": ["public Driver Task delete Volume Mirror ( Volume Mirror mirror ) {", "LOG . info ( STR_ , mirror ) ;", "Dell SC Driver Task task = new Dell SC Driver Task ( STR_ ) ;", "try {", "Storage Center API api = connection Manager . get Connection ( mirror . get Storage System Id ( ) ) ;", "Sc Copy Mirror Migrate cmm = api . get Mirror ( mirror . get Native Id ( ) ) ;", "api . delete Mirror ( cmm . instance Id ) ;", "api . delete Volume ( cmm . destination Volume . instance Id ) ;", "task . set Status ( Task Status . READY ) ; }", "catch ( Storage Center API Exception | Dell SC Driver Exception dex ) {", "String error = String . format ( STR_ , mirror . get Native Id ( ) , dex ) ;", "LOG . error ( error ) ;", "task . set Failed ( error ) ; }", "return task ; }"]}
{"ids": "85334", "code": ["public Byte Array Data Provider ( byte [ ] bytes ) {", "this . bytes = Arrays . copy Of ( bytes , bytes . length ) ; }"]}
{"ids": "21700", "code": ["public static String generate Native Guid For Physical NAS ( String system Native Guid , String p Nas Name ) {", "return String . format ( STR_ + PHYSICAL NAS + STR_ , system Native Guid , p Nas Name ) ; }"]}
{"ids": "66255", "code": ["private void expire ( ) {", "if ( m expire != NUM_ && m time Exp < System . current Time Millis ( ) ) {", "reset ( ) ; } }"]}
{"ids": "76023", "code": ["private static int determine Consecutive Binary Count ( String msg , int startpos , Charset encoding ) throws Writer Exception {", "final Charset Encoder encoder = encoding . new Encoder ( ) ;", "int len = msg . length ( ) ;", "int idx = startpos ;", "while ( idx < len ) {", "char ch = msg . char At ( idx ) ;", "int numeric Count = NUM_ ;", "while ( numeric Count < NUM_ && is Digit ( ch ) ) {", "numeric Count ++ ;", "int i = idx + numeric Count ;", "if ( i >= len ) {", "break ; }", "ch = msg . char At ( i ) ; }", "if ( numeric Count >= NUM_ ) {", "return idx - startpos ; }", "ch = msg . char At ( idx ) ;", "if ( ! encoder . can Encode ( ch ) ) {", "throw new Writer Exception ( STR_ + ch + STR_ + ( int ) ch + STR_ ) ; }", "idx ++ ; }", "return idx - startpos ; }"]}
{"ids": "32266", "code": ["private boolean apply ( Grid Client Predicate < N > [ ] p , N n ) {", "if ( p != null ) {", "for ( Grid Client Predicate < ? super N > r : p ) {", "if ( r != null && ! r . apply ( n ) ) return false ; } }", "return true ; }"]}
{"ids": "71851", "code": ["public boolean has Name ( final String name ) {", "for ( final String n : names ) {", "if ( n . equals Ignore Case ( name ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "47892", "code": ["static Method Handle make Spread Arguments ( Method Handle target , Class < ? > spread Arg Type , int spread Arg Pos , int spread Arg Count ) {", "Method Type target Type = target . type ( ) ;", "for ( int i = NUM_ ; i < spread Arg Count ; i ++ ) {", "Class < ? > arg = Verify Type . spread Arg Element Type ( spread Arg Type , i ) ;", "if ( arg == null ) arg = Object . class ;", "target Type = target Type . change Parameter Type ( spread Arg Pos + i , arg ) ; }", "target = target . as Type ( target Type ) ;", "Method Type src Type = target Type . replace Parameter Types ( spread Arg Pos , spread Arg Pos + spread Arg Count , spread Arg Type ) ;", "Method Type lambda Type = src Type . invoker Type ( ) ;", "Name [ ] names = arguments ( spread Arg Count + NUM_ , lambda Type ) ;", "int name Cursor = lambda Type . parameter Count ( ) ;", "int [ ] indexes = new int [ target Type . parameter Count ( ) ] ;", "for ( int i = NUM_ , arg Index = NUM_ ; i < target Type . parameter Count ( ) + NUM_ ; i ++ , arg Index ++ ) {", "Class < ? > src = lambda Type . parameter Type ( i ) ;", "if ( i == spread Arg Pos ) {", "Method Handle aload = Method Handles . array Element Getter ( spread Arg Type ) ;", "Name array = names [ arg Index ] ;", "names [ name Cursor ++ ] = new Name ( Lazy . NF check Spread Argument , array , spread Arg Count ) ;", "for ( int j = NUM_ ; j < spread Arg Count ; i ++ , j ++ ) {", "indexes [ i ] = name Cursor ;", "names [ name Cursor ++ ] = new Name ( aload , array , j ) ; } }", "else if ( i < indexes . length ) {", "indexes [ i ] = arg Index ; } }", "assert ( name Cursor == names . length - NUM_ ) ;", "Name [ ] target Args = new Name [ target Type . parameter Count ( ) ] ;", "for ( int i = NUM_ ; i < target Type . parameter Count ( ) ; i ++ ) {", "int idx = indexes [ i ] ;", "target Args [ i ] = names [ idx ] ; }", "names [ names . length - NUM_ ] = new Name ( target , ( Object [ ] ) target Args ) ;", "Lambda Form form = new Lambda Form ( STR_ , lambda Type . parameter Count ( ) , names ) ;", "return Simple Method Handle . make ( src Type , form ) ; }"]}
{"ids": "46934", "code": ["public void dup 2 X 2 ( ) {", "mv . visit Insn ( Opcodes . DUP 2 X 2 ) ; }"]}
{"ids": "3812", "code": ["@ Override public boolean contains ( Object key ) {", "if ( key == null ) return map . null Value != null ;", "K 1 [ ] keys = map . keys ;", "for ( int i = keys . length - NUM_ ; i >= NUM_ ; i -- ) {", "K 1 test Key = keys [ i ] ;", "if ( key . equals ( test Key ) ) return true ; }", "return false ; }"]}
{"ids": "61312", "code": ["public Expression compile ( int op Pos ) throws Transformer Exception {", "int op = get Op ( op Pos ) ;", "Expression expr = null ;", "switch ( op ) {", "case Op Codes . OP XPATH :", "expr = compile ( op Pos + NUM_ ) ;", "break ;", "case Op Codes . OP OR :", "expr = or ( op Pos ) ;", "break ;", "case Op Codes . OP AND :", "expr = and ( op Pos ) ;", "break ;", "case Op Codes . OP NOTEQUALS :", "expr = notequals ( op Pos ) ;", "break ;", "case Op Codes . OP EQUALS :", "expr = equals ( op Pos ) ;", "break ;", "case Op Codes . OP LTE :", "expr = lte ( op Pos ) ;", "break ;", "case Op Codes . OP LT :", "expr = lt ( op Pos ) ;", "break ;", "case Op Codes . OP GTE :", "expr = gte ( op Pos ) ;", "break ;", "case Op Codes . OP GT :", "expr = gt ( op Pos ) ;", "break ;", "case Op Codes . OP PLUS :", "expr = plus ( op Pos ) ;", "break ;", "case Op Codes . OP MINUS :", "expr = minus ( op Pos ) ;", "break ;", "case Op Codes . OP MULT :", "expr = mult ( op Pos ) ;", "break ;", "case Op Codes . OP DIV :", "expr = div ( op Pos ) ;", "break ;", "case Op Codes . OP MOD :", "expr = mod ( op Pos ) ;", "break ;", "case Op Codes . OP NEG :", "expr = neg ( op Pos ) ;", "break ;", "case Op Codes . OP STRING :", "expr = string ( op Pos ) ;", "break ;", "case Op Codes . OP BOOL :", "expr = bool ( op Pos ) ;", "break ;", "case Op Codes . OP NUMBER :", "expr = number ( op Pos ) ;", "break ;", "case Op Codes . OP UNION :", "expr = union ( op Pos ) ;", "break ;", "case Op Codes . OP LITERAL :", "expr = literal ( op Pos ) ;", "break ;", "case Op Codes . OP VARIABLE :", "expr = variable ( op Pos ) ;", "break ;", "case Op Codes . OP GROUP :", "expr = group ( op Pos ) ;", "break ;", "case Op Codes . OP NUMBERLIT :", "expr = numberlit ( op Pos ) ;", "break ;", "case Op Codes . OP ARGUMENT :", "expr = arg ( op Pos ) ;", "break ;", "case Op Codes . OP EXTFUNCTION :", "expr = compile Extension ( op Pos ) ;", "break ;", "case Op Codes . OP FUNCTION :", "expr = compile Function ( op Pos ) ;", "break ;", "case Op Codes . OP LOCATIONPATH :", "expr = location Path ( op Pos ) ;", "break ;", "case Op Codes . OP PREDICATE :", "expr = null ;", "break ;", "case Op Codes . OP MATCHPATTERN :", "expr = match Pattern ( op Pos + NUM_ ) ;", "break ;", "case Op Codes . OP LOCATIONPATHPATTERN :", "expr = location Path Pattern ( op Pos ) ;", "break ;", "case Op Codes . OP QUO :", "error ( XPATH Error Resources . ER UNKNOWN OPCODE , new Object [ ] { STR_ } ) ;", "break ;", "default :", "error ( XPATH Error Resources . ER UNKNOWN OPCODE , new Object [ ] { Integer . to String ( get Op ( op Pos ) ) } ) ; }", "return expr ; }"]}
{"ids": "36216", "code": ["public static void replace Value ( Example Set example Set , Attribute attribute , String old Value , String new Value ) {", "if ( ! attribute . is Nominal ( ) ) {", "throw new Runtime Exception ( STR_ ) ; }", "Nominal Mapping mapping = attribute . get Mapping ( ) ;", "if ( old Value . equals ( STR_ ) ) {", "for ( Example example : example Set ) {", "if ( Double . is Na N ( example . get Value ( attribute ) ) ) {", "example . set Value ( attribute , mapping . map String ( new Value ) ) ; } } }", "else {", "int old Index = mapping . get Index ( old Value ) ;", "if ( old Index < NUM_ ) {", "throw new Runtime Exception ( STR_ ) ; }", "if ( new Value . equals ( STR_ ) ) {", "for ( Example example : example Set ) {", "int index = mapping . get Index ( example . get Value As String ( attribute ) ) ;", "if ( index == old Index ) {", "example . set Value ( attribute , Double . Na N ) ; } }", "return ; }", "int new Index = mapping . get Index ( new Value ) ;", "if ( new Index >= NUM_ ) {", "for ( Example example : example Set ) {", "int index = mapping . get Index ( example . get Value As String ( attribute ) ) ;", "if ( index == old Index ) {", "example . set Value ( attribute , new Index ) ; } } }", "else {", "mapping . set Mapping ( new Value , old Index ) ; } } }"]}
{"ids": "77011", "code": ["protected void encode ( Byte Sequences Writer writer , Byte Array Data Output output , byte [ ] buffer , Bytes Ref spare , Bytes Ref payload , Set < Bytes Ref > contexts , long weight ) throws IO Exception {", "int required Length = spare . length + NUM_ + ( ( has Payloads ) ? NUM_ + payload . length : NUM_ ) ;", "if ( has Contexts ) {", "for ( Bytes Ref ctx : contexts ) {", "required Length += NUM_ + ctx . length ; }", "required Length += NUM_ ; }", "if ( required Length >= buffer . length ) {", "buffer = Array Util . grow ( buffer , required Length ) ; }", "output . reset ( buffer ) ;", "output . write Bytes ( spare . bytes , spare . offset , spare . length ) ;", "if ( has Contexts ) {", "for ( Bytes Ref ctx : contexts ) {", "output . write Bytes ( ctx . bytes , ctx . offset , ctx . length ) ;", "output . write Short ( ( short ) ctx . length ) ; }", "output . write Short ( ( short ) contexts . size ( ) ) ; }", "if ( has Payloads ) {", "output . write Bytes ( payload . bytes , payload . offset , payload . length ) ;", "output . write Short ( ( short ) payload . length ) ; }", "output . write Long ( weight ) ;", "writer . write ( buffer , NUM_ , output . get Position ( ) ) ; }"]}
{"ids": "74202", "code": ["public void print Entry Details ( Writer w ) {", "int linesadded = - NUM_ ;", "String title ;", "try {", "Hardcopy Writer ww = ( Hardcopy Writer ) w ;", "int text Space = ww . get Characters Per Line ( ) - indent Width - NUM_ ;", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , id , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , id , title , text Space ) + linesadded ; }", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , file Name != null ? file Name : STR_ , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , file Name != null ? file Name : STR_ , title , text Space ) + linesadded ; }", "if ( ! ( road Name . is Empty ( ) ) ) {", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , road Name , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , road Name , title , text Space ) + linesadded ; } }", "if ( ! ( road Number . is Empty ( ) ) ) {", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , road Number , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , road Number , title , text Space ) + linesadded ; } }", "if ( ! ( mfg . is Empty ( ) ) ) {", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , mfg , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , mfg , title , text Space ) + linesadded ; } }", "if ( ! ( owner . is Empty ( ) ) ) {", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , owner , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , owner , title , text Space ) + linesadded ; } }", "if ( ! ( model . is Empty ( ) ) ) {", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , model , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , model , title , text Space ) + linesadded ; } }", "if ( ! ( dcc Address . is Empty ( ) ) ) {", "w . write ( new Line , NUM_ , NUM_ ) ;", "String s = STR_ + dcc Address ;", "w . write ( s , NUM_ , s . length ( ) ) ;", "linesadded ++ ; }", "if ( ! ( comment . is Empty ( ) ) ) {", "for ( int i = NUM_ ; i < ( blanks - linesadded ) ; i ++ ) {", "w . write ( new Line , NUM_ , NUM_ ) ; }", "if ( blanks != NUM_ ) {", "blanks = NUM_ ; }", "title = STR_ ;", "linesadded = write Wrapped Comment ( w , comment , title , text Space ) + linesadded ; }", "if ( ! ( decoder Model . is Empty ( ) ) ) {", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , decoder Model , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , decoder Model , title , text Space ) + linesadded ; } }", "if ( ! ( decoder Family . is Empty ( ) ) ) {", "title = STR_ ;", "if ( ( text Space With Icon != NUM_ ) && ( linesadded < blanks ) ) {", "linesadded = write Wrapped Comment ( w , decoder Family , title , text Space With Icon ) + linesadded ; }", "else {", "linesadded = write Wrapped Comment ( w , decoder Family , title , text Space ) + linesadded ; } }", "if ( ! ( decoder Comment . is Empty ( ) ) ) {", "for ( int i = NUM_ ; i < ( blanks - linesadded ) ; i ++ ) {", "w . write ( new Line , NUM_ , NUM_ ) ; }", "if ( blanks != NUM_ ) {", "blanks = NUM_ ; }", "title = STR_ ;", "linesadded = write Wrapped Comment ( w , decoder Comment , title , text Space ) + linesadded ; }", "w . write ( new Line , NUM_ , NUM_ ) ;", "for ( int i = - NUM_ ; i < ( blanks - linesadded ) ; i ++ ) {", "w . write ( new Line , NUM_ , NUM_ ) ; } }", "catch ( IO Exception e ) {", "log . error ( STR_ + e ) ; } }"]}
{"ids": "49631", "code": ["private int skip Quoted String ( String str , int pos ) {", "int n = str . length ( ) ;", "pos += NUM_ ;", "while ( pos < n ) {", "if ( str . char At ( pos ) == STR_ ) {", "if ( pos + NUM_ < n && str . char At ( pos + NUM_ ) == STR_ ) {", "pos += NUM_ ;", "continue ; }", "return pos + NUM_ ; }", "pos += NUM_ ; }", "return n ; }"]}
{"ids": "40748", "code": ["private static void add New Segment ( Linked List < DNA Segment > segments , Event event , Hash Map < Integer , DNA Strand > strands , int first Julian Day , int min Start , int min Minutes ) {", "if ( event . start Day > event . end Day ) {", "Log . wtf ( TAG , STR_ + event . to String ( ) ) ; }", "if ( event . start Day != event . end Day ) {", "Event lhs = new Event ( ) ;", "lhs . color = event . color ;", "lhs . start Day = event . start Day ;", "lhs . start Time = event . start Time ;", "lhs . end Day = lhs . start Day ;", "lhs . end Time = DAY IN MINUTES - NUM_ ;", "while ( lhs . start Day != event . end Day ) {", "add New Segment ( segments , lhs , strands , first Julian Day , min Start , min Minutes ) ;", "lhs . start Day ++ ;", "lhs . end Day = lhs . start Day ;", "lhs . start Time = NUM_ ;", "min Start = NUM_ ; }", "lhs . end Time = event . end Time ;", "event = lhs ; }", "DNA Segment segment = new DNA Segment ( ) ;", "int day Offset = ( event . start Day - first Julian Day ) * DAY IN MINUTES ;", "int end Of Day = day Offset + DAY IN MINUTES - NUM_ ;", "segment . start Minute = Math . max ( day Offset + event . start Time , min Start ) ;", "int min End = Math . min ( segment . start Minute + min Minutes , end Of Day ) ;", "segment . end Minute = Math . max ( day Offset + event . end Time , min End ) ;", "if ( segment . end Minute > end Of Day ) {", "segment . end Minute = end Of Day ; }", "segment . color = event . color ;", "segment . day = event . start Day ;", "segments . add ( segment ) ;", "DNA Strand strand = get Or Create Strand ( strands , segment . color ) ;", "strand . count ++ ; }"]}
{"ids": "30940", "code": ["private Datagram Packet [ ] encode Multicast Request ( final Multicast Request req ) throws IO Exception {", "final Discovery disco = get Discovery ( multicast Request Constraints . choose Protocol Version ( ) ) ;", "final List packets = new Array List ( ) ;", "Encode Iterator ei = disco . encode Multicast Request ( req , multicast Request Constraints . get Multicast Max Packet Size ( DEFAULT MAX PACKET SIZE ) , multicast Request Constraints . get Unfulfilled Constraints ( ) ) ;", "while ( ei . has Next ( ) ) {", "try {", "packets . add All ( Arrays . as List ( ei . next ( ) ) ) ; }", "catch ( Exception e ) {", "logger . log ( ( e instanceof Unsupported Constraint Exception ) ? Levels . HANDLED : Level . INFO , STR_ , e ) ; } }", "if ( packets . is Empty ( ) ) {", "throw new Discovery Protocol Exception ( STR_ ) ; }", "return ( Datagram Packet [ ] ) packets . to Array ( new Datagram Packet [ packets . size ( ) ] ) ; }"]}
{"ids": "20223", "code": ["public Feature Type Constraint Model ( Feature Type Constraint Model Update Interface parent ) {", "this . parent Obj = parent ;", "column List . add ( Localisation . get String ( Field Config Base . class , STR_ ) ) ;", "column List . add ( Localisation . get String ( Field Config Base . class , STR_ ) ) ; }"]}
{"ids": "63577", "code": ["protected void delete Db ( String name ) {", "delete Db ( get Base Dir ( ) , name ) ; }"]}
{"ids": "20414", "code": ["public void remove At Range ( int index , int size ) {", "final int end = Math . min ( m Size , index + size ) ;", "for ( int i = index ; i < end ; i ++ ) {", "remove At ( i ) ; } }"]}
{"ids": "53694", "code": ["private void pull Event ( ) {", "final int new Scroll Value ;", "final int item Dimension ;", "final float initial Motion Value , last Motion Value ;", "switch ( get Filtered Pull To Refresh Scroll Direction ( ) ) {", "case HORIZONTAL :", "initial Motion Value = m Initial Motion X ;", "last Motion Value = m Last Motion X ;", "break ;", "case VERTICAL :", "default :", "initial Motion Value = m Initial Motion Y ;", "last Motion Value = m Last Motion Y ;", "break ; }", "switch ( m Current Mode ) {", "case PULL FROM END :", "new Scroll Value = Math . round ( Math . max ( initial Motion Value - last Motion Value , NUM_ ) / m Friction ) ;", "item Dimension = get Footer Size ( ) ;", "break ;", "case GOOGLE STYLE :", "new Scroll Value = Math . round ( Math . min ( initial Motion Value - last Motion Value , NUM_ ) / m Friction ) ;", "item Dimension = get Google Style View Size ( ) ;", "break ;", "case PULL FROM START :", "default :", "new Scroll Value = Math . round ( Math . min ( initial Motion Value - last Motion Value , NUM_ ) / m Friction ) ;", "item Dimension = get Header Size ( ) ;", "break ; }", "set Header Scroll ( new Scroll Value ) ;", "if ( new Scroll Value != NUM_ && ! is Refreshing ( ) ) {", "float scale = Math . abs ( new Scroll Value ) / ( float ) item Dimension ;", "switch ( m Current Mode ) {", "case PULL FROM END :", "m Footer Layout . on Pull ( scale ) ;", "break ;", "case GOOGLE STYLE :", "m Google Style View Layout . on Pull ( scale ) ;", "m Google Style Progress Layout . on Pull ( scale ) ;", "break ;", "case PULL FROM START :", "default :", "m Header Layout . on Pull ( scale ) ;", "break ; }", "if ( m State != State . PULL TO REFRESH && item Dimension >= Math . abs ( new Scroll Value ) ) {", "set State ( State . PULL TO REFRESH ) ; }", "else if ( m State == State . PULL TO REFRESH && item Dimension < Math . abs ( new Scroll Value ) ) {", "set State ( State . RELEASE TO REFRESH ) ; } } }"]}
{"ids": "72369", "code": ["public void add Elements ( final double [ ] values ) {", "final double [ ] temp Array = new double [ num Elements + values . length + NUM_ ] ;", "System . arraycopy ( internal Array , start Index , temp Array , NUM_ , num Elements ) ;", "System . arraycopy ( values , NUM_ , temp Array , num Elements , values . length ) ;", "internal Array = temp Array ;", "start Index = NUM_ ;", "num Elements += values . length ; }"]}
{"ids": "57908", "code": ["public void register Unregistered Namespaces ( ) {", "for ( int i = NUM_ ; i < m unregistered Extensions . size ( ) ; i ++ ) {", "String ns = ( String ) m unregistered Extensions . get ( i ) ;", "Extension Namespace Support ext Ns Spt = define Java Namespace ( ns ) ;", "if ( ext Ns Spt != null ) m extensions . add ( ext Ns Spt ) ; } }"]}
{"ids": "38271", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = new Vector < Option > ( ) ;", "result . add Element ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "21258", "code": ["public Map < URI , List < URI > > add Source Volume Snapshots ( ) {", "List < URI > block Snapshots = Lists . new Array List ( ) ;", "Map < URI , List < URI > > snapshots Map = new Hash Map < > ( ) ;", "for ( URI volume Id : uris ( volume Ids ) ) {", "List < URI > snapshots = get Snapshots ( volume Id ) ;", "block Snapshots . add All ( snapshots ) ;", "snapshots Map . put ( volume Id , snapshots ) ; }", "if ( ! block Snapshots . is Empty ( ) ) {", "Block Storage Utils . add Volumes To Consistency Group ( consistency Group , block Snapshots ) ; }", "return snapshots Map ; }"]}
{"ids": "21786", "code": ["public static void log Initiator ( Initiator initiator , Network Lite network ) {", "String network Name = ( network != null ? network . get Label ( ) : STR_ ) ;", "log . info ( String . format ( STR_ , initiator . get Initiator Port ( ) , initiator . get Host Name ( ) , network Name ) ) ; }"]}
{"ids": "44416", "code": ["public static final Criterion and ( Criterion one , Criterion two ) {", "final List < Criterion > criteria = new Array List < Criterion > ( ) ;", "criteria . add ( one ) ;", "criteria . add ( two ) ;", "return new Conjunction Criterion ( Conjunction . AND , criteria ) ; }"]}
{"ids": "6943", "code": ["public CC Menu Item ( Object rec , String cb ) {", "target Callback = rec ;", "selector = cb ;", "set Anchor Point ( CG Point . make ( NUM_ , NUM_ ) ) ;", "invocation = null ;", "if ( rec != null && cb != null ) {", "Class < ? > cls = rec . get Class ( ) ;", "try {", "invocation = cls . get Method ( cb , Object . class ) ; }", "catch ( Security Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( No Such Method Exception e ) {", "e . print Stack Trace ( ) ; } }", "is Enabled = true ;", "is Selected = false ; }"]}
{"ids": "15421", "code": ["public void add Child Element ( XML Element child , boolean add After New Line ) throws Exception {", "add Child Element At ( child , - NUM_ , add After New Line ) ; }"]}
{"ids": "63743", "code": ["public void edit Text ( Visual Item item , String attribute , Rectangle r ) {", "if ( m editing ) {", "stop Editing ( ) ; }", "String txt = item . get String ( attribute ) ;", "m edit Item = item ;", "m edit Attribute = attribute ;", "Color tc = Color Lib . get Color ( item . get Text Color ( ) ) ;", "Color fc = Color Lib . get Color ( item . get Fill Color ( ) ) ;", "m editor . set Foreground ( tc ) ;", "m editor . set Background ( fc ) ;", "edit Text ( txt , r ) ; }"]}
{"ids": "72128", "code": ["public static Column column ( final String id , final String title , final int width , final int double Precision ) {", "return new Column ( id , title , Math . max ( width , title . length ( ) ) , double Precision ) ; }"]}
{"ids": "84410", "code": ["public void print Count ( String kind , int count ) {", "if ( count != NUM_ ) {", "String key ;", "if ( count == NUM_ ) key = STR_ + kind ;", "else key = STR_ + kind + STR_ ;", "log . print Lines ( Writer Kind . ERROR , key , String . value Of ( count ) ) ;", "log . flush ( Log . Writer Kind . ERROR ) ; } }"]}
{"ids": "52285", "code": ["public static byte [ ] decode ( String str , int flags ) {", "return decode ( str . get Bytes ( ) , flags ) ; }"]}
{"ids": "34657", "code": ["public static float screen To Scroll ( float x , float warp Size ) {", "if ( x <= NUM_ ) return NUM_ ;", "if ( x >= warp Size ) return x + warp Size ;", "return ( float ) Math . sqrt ( x * warp Size ) * NUM_ ; }"]}
{"ids": "79086", "code": ["public synchronized void record Statistics ( Query Statistic statistic ) {", "query Statistics . add ( statistic ) ; }"]}
{"ids": "76720", "code": ["protected double [ ] random Sub Range ( double bound Start , double bound Len ) {", "if ( bound Len >= NUM_ && usually ( ) ) {", "int int Bound Start = ( int ) Math . ceil ( bound Start ) ;", "int int Bound End = ( int ) ( bound Start + bound Len ) ;", "int int Bound Len = int Bound End - int Bound Start ;", "int new Len = ( int ) random Gaussian Mean Max ( int Bound Len / NUM_ , int Bound Len ) ;", "int new Start = int Bound Start + random Int ( int Bound Len - new Len ) ;", "return new double [ ] { new Start , new Len } ; }", "else {", "double new Len = random Gaussian Mean Max ( bound Len / NUM_ , bound Len ) ;", "double new Start = bound Start + ( bound Len - new Len == NUM_ ? NUM_ : ( random Double ( ) % ( bound Len - new Len ) ) ) ;", "return new double [ ] { new Start , new Len } ; } }"]}
{"ids": "52537", "code": ["private Date Time Zone generate Time Zone ( String time Zone Id , Date Time Zone system Time Zone ) {", "if ( time Zone Id == null ) {", "return system Time Zone ; }", "try {", "return Date Time Zone . for ID ( time Zone Id ) ; }", "catch ( Illegal Argument Exception ignored ) {", "LOG . debug ( INVALID TIME ZONE . log Format ( time Zone Id ) ) ;", "throw new Bad Api Request Exception ( INVALID TIME ZONE . format ( time Zone Id ) ) ; } }"]}
{"ids": "11795", "code": ["public void check Warehouse ( boolean sbf ) {", "if ( warehouse == null ) {", "logger . fine ( STR_ ) ;", "warehouse = new VPF Auto Feature Graphic Warehouse ( ) ; } }"]}
{"ids": "53460", "code": ["public double max Dist ( Spatial Comparable mbr 1 , Spatial Comparable mbr 2 ) {", "final int dim 1 = mbr 1 . get Dimensionality ( ) , dim 2 = mbr 2 . get Dimensionality ( ) ;", "final int mindim = ( dim 1 < dim 2 ) ? dim 1 : dim 2 ;", "double agg = NUM_ ;", "for ( int d = NUM_ ; d < mindim ; d ++ ) {", "double d 1 = mbr 1 . get Max ( d ) - mbr 2 . get Min ( d ) ;", "double d 2 = mbr 2 . get Max ( d ) - mbr 1 . get Min ( d ) ;", "double delta = d 1 > d 2 ? d 1 : d 2 ;", "agg += delta * delta ; }", "for ( int d = mindim ; d < dim 1 ; d ++ ) {", "double d 1 = Math . abs ( mbr 1 . get Min ( d ) ) , d 2 = Math . abs ( mbr 1 . get Max ( d ) ) ;", "double delta = d 1 > d 2 ? d 1 : d 2 ;", "agg += delta * delta ; }", "for ( int d = mindim ; d < dim 2 ; d ++ ) {", "double d 1 = Math . abs ( mbr 2 . get Min ( d ) ) , d 2 = Math . abs ( mbr 2 . get Max ( d ) ) ;", "double delta = d 1 > d 2 ? d 1 : d 2 ;", "agg += delta * delta ; }", "return Math . sqrt ( agg ) ; }"]}
{"ids": "60190", "code": ["public static void create Lesson ( @ Not Null final Lesson lesson , @ Not Null final Virtual File course Dir , @ Not Null final File resource Root , @ Not Null final Project project ) throws IO Exception {", "String lesson Dir Name = Edu Names . LESSON + Integer . to String ( lesson . get Index ( ) ) ;", "Virtual File lesson Dir = course Dir . create Child Directory ( project , lesson Dir Name ) ;", "final List < Task > task List = lesson . get Task List ( ) ;", "for ( int i = NUM_ ; i <= task List . size ( ) ; i ++ ) {", "Task task = task List . get ( i - NUM_ ) ;", "task . set Index ( i ) ;", "create Task ( task , lesson Dir , new File ( resource Root , lesson Dir . get Name ( ) ) , project ) ; } }"]}
{"ids": "48556", "code": ["protected void rehash ( ) {", "int old Capacity = table . length ;", "Cache Entry old Table [ ] = table ;", "int new Capacity = old Capacity * NUM_ + NUM_ ;", "Cache Entry new Table [ ] = new Cache Entry [ new Capacity ] ;", "threshold = ( int ) ( new Capacity * load Factor ) ;", "table = new Table ;", "for ( int i = old Capacity ; i -- > NUM_ ; ) {", "for ( Cache Entry old = old Table [ i ] ; old != null ; ) {", "Cache Entry e = old ;", "old = old . next ;", "if ( e . check ( ) != null ) {", "int index = ( e . hash & NUM_ ) % new Capacity ;", "e . next = new Table [ index ] ;", "new Table [ index ] = e ; }", "else count -- ; } } }"]}
{"ids": "62700", "code": ["public void append ( byte [ ] utf 8 , int start , int len ) {", "set Capacity ( length + len , true ) ;", "System . arraycopy ( utf 8 , start , bytes , length , len ) ;", "length += len ; }"]}
{"ids": "17297", "code": ["private void handle Error ( GCP Stats Data Holder stats Data , Throwable e ) {", "log Severe ( e ) ;", "stats Data . error = e ;", "stats Data . stage = Stats Collection Stage . ERROR ;", "handle Stats Request ( stats Data ) ; }"]}
{"ids": "82472", "code": ["public java . lang . String Builder insert ( int offset , double d ) {", "return insert ( offset , Double . to String ( d ) ) ; }"]}
{"ids": "18158", "code": ["public Object cast To Type ( int t , X Path Context support ) throws javax . xml . transform . Transformer Exception {", "Object result ;", "switch ( t ) {", "case CLASS STRING :", "result = str ( ) ;", "break ;", "case CLASS NUMBER :", "result = new Double ( num ( ) ) ;", "break ;", "case CLASS NODESET :", "result = iter ( ) ;", "break ;", "case CLASS BOOLEAN :", "result = new Boolean ( bool ( ) ) ;", "break ;", "case CLASS UNKNOWN :", "result = m obj ;", "break ;", "default :", "error ( XPATH Error Resources . ER CANT CONVERT TO TYPE , new Object [ ] { get Type String ( ) , Integer . to String ( t ) } ) ;", "result = null ; }", "return result ; }"]}
{"ids": "29863", "code": ["public boolean is Passthrough Supported ( String mime Type ) {", "return audio Capabilities != null && audio Capabilities . supports Encoding ( get Encoding For Mime Type ( mime Type ) ) ; }"]}
{"ids": "74859", "code": ["String internalsprintf ( final Object s ) {", "final String s 2 ;", "if ( conversion Character == STR_ || conversion Character == STR_ ) {", "s 2 = print S Format ( s . to String ( ) ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ + STR_ + conversion Character + STR_ ) ; }", "return s 2 ; }"]}
{"ids": "20639", "code": ["public T first Item ( ) {", "if ( m Data List == null || m Data List . size ( ) == NUM_ ) {", "return null ; }", "return m Data List . get ( NUM_ ) ; }"]}
{"ids": "51454", "code": ["public void add Request Property ( String field , String new Value ) {", "check Not Connected ( ) ;", "if ( field == null ) {", "throw new Null Pointer Exception ( STR_ ) ; } }"]}
{"ids": "84592", "code": ["public double do Operation ( ) throws Operator Failed Exception {", "double [ ] mean = sccs . get Mode ( ) ;", "double [ ] current Value = parameter . get Parameter Values ( ) ;", "double [ ] new Value = new double [ dim ] ;", "Set < Integer > update Set = new Hash Set < Integer > ( ) ;", "if ( set Size Mean != - NUM_ ) {", "final int list Length = Poisson . next Poisson ( set Size Mean ) ;", "while ( update Set . size ( ) < list Length ) {", "int new Int = Math Utils . next Int ( parameter . get Dimension ( ) ) ;", "if ( ! update Set . contains ( new Int ) ) {", "update Set . add ( new Int ) ; } } }", "else {", "for ( int i = NUM_ ; i < dim ; ++ i ) {", "update Set . add ( i ) ; } }", "double logq = NUM_ ;", "for ( Integer i : update Set ) {", "new Value [ i ] = mean [ i ] + scale Factor * Math Utils . next Gaussian ( ) ;", "if ( UPDATE ALL ) {", "parameter . set Parameter Value Quietly ( i , new Value [ i ] ) ; }", "else {", "parameter . set Parameter Value ( i , new Value [ i ] ) ; }", "logq += ( Normal Distribution . log Pdf ( current Value [ i ] , mean [ i ] , scale Factor ) - Normal Distribution . log Pdf ( new Value [ i ] , mean [ i ] , scale Factor ) ) ; }", "if ( UPDATE ALL ) {", "parameter . set Parameter Value Notify Changed All ( NUM_ , parameter . get Parameter Value ( NUM_ ) ) ; }", "return logq ; }"]}
{"ids": "17389", "code": ["public Object load ( URI uri ) throws IO Exception {", "Input Stream Reader src = null ;", "try {", "src = new File Reader ( new File ( uri ) ) ;", "return xstream . from XML ( src ) ; }", "finally {", "if ( null != src ) {", "src . close ( ) ; } } }"]}
{"ids": "86218", "code": ["private synchronized void send Pending State ( ) {", "if ( ! m Pending Clients . is Empty ( ) ) {", "final Message [ ] messages = new Message [ ] { Santa Service Messages . get Begin Full State Message ( ) , Santa Service Messages . get Switch Off Message ( m Preferences . get Switch Off ( ) ) , get Time Update Message ( ) , Santa Service Messages . get Cast Disabled Message ( m Preferences . get Cast Disabled ( ) ) , Santa Service Messages . get Games Message ( m Preferences . get Gumball Disabled ( ) , m Preferences . get Jetpack Disabled ( ) , m Preferences . get Memory Disabled ( ) , m Preferences . get Rocket Disabled ( ) , m Preferences . get Dancer Disabled ( ) , m Preferences . get Snowdown Disabled ( ) ) , Santa Service Messages . get Destination Photo Message ( m Preferences . get Destination Photo Disabled ( ) ) , Santa Service Messages . get State Message ( m State ) , Santa Service Messages . get Videos Message ( m Preferences . get Videos ( ) ) } ;", "for ( int i = NUM_ ; i < m Pending Clients . size ( ) ; i ++ ) {", "final Messenger messenger = m Pending Clients . get ( i ) ;", "try {", "for ( Message msg : messages ) {", "messenger . send ( msg ) ; }", "m Clients . add ( messenger ) ; }", "catch ( Remote Exception e ) { }", "m Pending Clients . remove ( i ) ; } } }"]}
{"ids": "21296", "code": ["private void fetch Chunk ( Bulk Id Param input , List < T > results ) {", "List < T > items = get Bulk Resources ( input ) ;", "for ( T item : items ) {", "results . add ( item ) ; } }"]}
{"ids": "6303", "code": ["public static void move Directory To Directory ( File src , File dest Dir , boolean create Dest Dir ) throws IO Exception {", "if ( src == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( dest Dir == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( ! dest Dir . exists ( ) && create Dest Dir ) {", "dest Dir . mkdirs ( ) ; }", "if ( ! dest Dir . exists ( ) ) {", "throw new File Not Found Exception ( STR_ + dest Dir + STR_ + create Dest Dir + STR_ ) ; }", "if ( ! dest Dir . is Directory ( ) ) {", "throw new IO Exception ( STR_ + dest Dir + STR_ ) ; }", "move Directory ( src , new File ( dest Dir , src . get Name ( ) ) ) ; }"]}
{"ids": "82737", "code": ["public Shape create Check Mark ( final int x , final int y , final int w , final int h ) {", "double xf = w / NUM_ ;", "double hf = h / NUM_ ;", "path . reset ( ) ;", "path . move To ( x , y + NUM_ * hf ) ;", "path . line To ( x + NUM_ * xf , y + NUM_ * hf ) ;", "path . line To ( x + NUM_ * xf , y + NUM_ * hf ) ;", "path . line To ( x + NUM_ * xf , y ) ;", "path . line To ( x + NUM_ * xf , y ) ;", "path . line To ( x + NUM_ * xf , y + NUM_ * hf ) ;", "path . close Path ( ) ;", "return path ; }"]}
{"ids": "64623", "code": ["public static Response Data parse ( String response Data ) {", "int index = response Data . index Of ( STR_ ) ;", "String main Data , extra Data ;", "if ( - NUM_ == index ) {", "main Data = response Data ;", "extra Data = STR_ ; }", "else {", "main Data = response Data . substring ( NUM_ , index ) ;", "extra Data = index >= response Data . length ( ) ? STR_ : response Data . substring ( index + NUM_ ) ; }", "String [ ] fields = Text Utils . split ( main Data , Pattern . quote ( STR_ ) ) ;", "if ( fields . length < NUM_ ) {", "throw new Illegal Argument Exception ( ) ; }", "Response Data data = new Response Data ( ) ;", "data . extra = extra Data ;", "data . response Code = Integer . parse Int ( fields [ NUM_ ] ) ;", "data . nonce = Integer . parse Int ( fields [ NUM_ ] ) ;", "data . package Name = fields [ NUM_ ] ;", "data . version Code = fields [ NUM_ ] ;", "data . user Id = fields [ NUM_ ] ;", "data . timestamp = Long . parse Long ( fields [ NUM_ ] ) ;", "return data ; }"]}
{"ids": "65810", "code": ["public int no Of Tabs ( ) {", "return m cur Win Tab . get Tab Count ( ) ; }"]}
{"ids": "25028", "code": ["private static void close ( Closeable closeable ) {", "if ( closeable != null ) {", "try {", "closeable . close ( ) ; }", "catch ( IO Exception e ) { } } }"]}
{"ids": "2349", "code": ["public static String convert Timestamp To Date String Compact ( boolean use UTC , long milli ) {", "Date date = new Date ( milli ) ;", "Simple Date Format source Format = new Simple Date Format ( STR_ ) ;", "source Format . set Time Zone ( use UTC ? Time Zone . get Time Zone ( STR_ ) : Time Zone . get Default ( ) ) ;", "return source Format . format ( date ) ; }"]}
{"ids": "50282", "code": ["protected synchronized void superpose Bit Set ( Fixed Bit Set incoming Bit Set , double weight ) {", "weight = ( int ) Math . round ( weight * Math . pow ( NUM_ , BINARY VECTOR DECIMAL PLACES ) ) ;", "if ( weight == NUM_ ) return ;", "total Number Of Votes . set ( total Number Of Votes . get ( ) + ( int ) weight ) ;", "int log Floor Of Weight = ( int ) ( Math . floor ( Math . log ( weight ) / Math . log ( NUM_ ) ) ) ;", "if ( log Floor Of Weight < voting Record . size ( ) - NUM_ ) {", "while ( log Floor Of Weight > NUM_ ) {", "superpose Bit Set From Row Floor ( incoming Bit Set , log Floor Of Weight ) ;", "weight = weight - ( int ) Math . pow ( NUM_ , log Floor Of Weight ) ;", "log Floor Of Weight = ( int ) ( Math . floor ( Math . log ( weight ) / Math . log ( NUM_ ) ) ) ; } }", "for ( int x = NUM_ ; x < weight ; x ++ ) superpose Bit Set From Row Floor ( incoming Bit Set , NUM_ ) ; }"]}
{"ids": "27014", "code": ["public final double tan Half Angle ( ) {", "return Math . tan ( NUM_ * this . radians ) ; }"]}
{"ids": "1569", "code": ["public void parse Signatures File ( URL url ) throws IO Exception , Parse Exception {", "parse Signatures File ( url . open Stream ( ) , url . to String ( ) ) ; }"]}
{"ids": "70265", "code": ["public void add Flare ( Flare flare ) {", "flares . add Element ( flare ) ;", "process Game Event ( new Game Board Change Event ( this ) ) ; }"]}
{"ids": "23631", "code": ["public static void object String Non Recursive ( @ Unretained Object obj , String Builder sb ) {", "if ( obj instanceof Object [ ] ) {", "sb . append ( STR_ ) ;", "boolean first = true ;", "for ( Object o : ( Object [ ] ) obj ) {", "if ( ! first ) {", "sb . append ( STR_ ) ;", "sb . append ( o ) ; }", "else {", "first = false ;", "object String With Bytes ( o , sb ) ; } }", "sb . append ( STR_ ) ; }", "else {", "object String With Bytes ( obj , sb ) ; } }"]}
{"ids": "69768", "code": ["public void read OSM ( File file ) {", "if ( file . exists ( ) ) {", "street Layer . open OSM ( file ) ; }", "else {", "LOG . info ( STR_ ) ; } }"]}
{"ids": "61267", "code": ["public void start Element ( Stylesheet Handler handler , String uri , String local Name , String raw Name , Attributes attributes ) throws SAX Exception {", "String msg = STR_ ;", "if ( ! ( handler . get Elem Template Element ( ) instanceof Stylesheet ) ) {", "msg = STR_ ;", "handler . error ( msg , new SAX Exception ( msg ) ) ; }", "super . start Element ( handler , uri , local Name , raw Name , attributes ) ;", "String val = attributes . get Value ( STR_ ) ;", "int index Of Colon = val . index Of ( STR_ ) ;", "if ( index Of Colon > NUM_ ) { }", "else {", "msg = STR_ ;", "handler . error ( msg , new SAX Exception ( msg ) ) ; } }"]}
{"ids": "3671", "code": ["public void write ( byte [ ] buffer , int offset , int length ) throws IO Exception {", "file . write ( buffer , offset , length ) ; }"]}
{"ids": "7085", "code": ["public static boolean can Interact ( Role issuer , Role target ) {", "if ( issuer . get Guild ( ) != target . get Guild ( ) ) throw new Illegal Argument Exception ( STR_ ) ;", "return target . get Position ( ) < issuer . get Position ( ) ; }"]}
{"ids": "31045", "code": ["public Webster ( ) throws Bind Exception {", "this . port = Integer . get Integer ( WEBSTER PORT , NUM_ ) ;", "initialize ( ) ; }"]}
{"ids": "15303", "code": ["public boolean will Throw Exception If Key Was Not Found ( ) {", "return throwex ; }"]}
{"ids": "87008", "code": ["public Response create Response ( String response String ) throws java . text . Parse Exception {", "if ( response String == null ) return new SIP Response ( ) ;", "String Msg Parser smp = new String Msg Parser ( ) ;", "SIP Message sip Message = smp . parse SIP Message ( response String . get Bytes ( ) , true , false , null ) ;", "if ( ! ( sip Message instanceof SIP Response ) ) throw new Parse Exception ( response String , NUM_ ) ;", "return ( SIP Response ) sip Message ; }"]}
{"ids": "72533", "code": ["private ODE State And Derivative state ( double t ) {", "return new ODE State And Derivative ( t , new double [ NUM_ ] , new double [ NUM_ ] ) ; }"]}
{"ids": "25596", "code": ["public static Class < ? > find Common Element Type ( Collection collection ) {", "if ( is Empty ( collection ) ) {", "return null ; }", "Class < ? > candidate = null ;", "for ( Object val : collection ) {", "if ( val != null ) {", "if ( candidate == null ) {", "candidate = val . get Class ( ) ; }", "else if ( candidate != val . get Class ( ) ) {", "return null ; } } }", "return candidate ; }"]}
{"ids": "44387", "code": ["protected void init Ping Interval Milli ( ) {", "String ping Interval Milli Param = get Init Parameter ( STR_ ) ;", "set Ping Interval Milli ( ( ping Interval Milli Param == null ) ? DEFAULT PING INTERVAL MILLI : Integer . parse Int ( ping Interval Milli Param ) ) ;", "if ( is Debug ( ) ) {", "log ( STR_ + get Ping Interval Milli ( ) ) ; } }"]}
{"ids": "28149", "code": ["public boolean ask ( final String query Str , String external Query Id ) throws Exception {", "final Repository Connection cxn = cxn ( ) ;", "UUID query Id = null ;", "try {", "final Boolean Query query = ( Boolean Query ) cxn . prepare Boolean Query ( Query Language . SPARQL , query Str ) ;", "set Max Query Time ( query ) ;", "if ( query instanceof Bigdata Sail Boolean Query && cxn instanceof Bigdata Sail Repository Connection ) {", "final Bigdata Sail Boolean Query bdtq = ( Bigdata Sail Boolean Query ) query ;", "query Id = setup Query ( ( Bigdata Sail Repository Connection ) cxn , bdtq . get AST Container ( ) , Query Type . ASK , external Query Id ) ; }", "final boolean result = query . evaluate ( ) ;", "return result ; }", "finally {", "if ( query Id != null ) {", "finalize Query ( query Id ) ; } } }"]}
{"ids": "81737", "code": ["@ Suppress Warnings ( STR_ ) private static int find ( Object [ ] arr , net . sourceforge . retroweaver . harmony . runtime . java . lang . Comparable val , int bnd , int l , int r ) {", "int m = l ;", "int d = NUM_ ;", "while ( m <= r ) {", "if ( val . compare To ( arr [ m ] ) > bnd ) {", "l = m + NUM_ ; }", "else {", "r = m - NUM_ ;", "break ; }", "m += d ;", "d <<= NUM_ ; }", "while ( l <= r ) {", "m = ( l + r ) > > > NUM_ ;", "if ( val . compare To ( arr [ m ] ) > bnd ) {", "l = m + NUM_ ; }", "else {", "r = m - NUM_ ; } }", "return l - NUM_ ; }"]}
{"ids": "2914", "code": ["public static String as Hex ( byte [ ] bytes , String separator ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < bytes . length ; i ++ ) {", "String code = Integer . to Hex String ( bytes [ i ] & NUM_ ) ;", "if ( ( bytes [ i ] & NUM_ ) < NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( code ) ;", "if ( separator != null && i < bytes . length - NUM_ ) {", "sb . append ( separator ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "66300", "code": ["public static Connection create Connection ( boolean auto Commit , int trx Level ) {", "Connection conn = s cc . get Connection ( auto Commit , trx Level ) ;", "if ( C Log Mgt . is Level Finest ( ) ) { }", "try {", "if ( conn != null && conn . get Auto Commit ( ) != auto Commit ) {", "throw new Illegal State Exception ( STR_ + auto Commit + STR_ ) ; } }", "catch ( SQL Exception e ) { }", "return conn ; }"]}
{"ids": "19785", "code": ["private boolean update Statement Data ( Statement Data sdata , Matcher matcher , String to Regex ) {", "if ( transform Tables ) return true ;", "if ( matcher == null ) return true ;", "String schema = sdata . get Default Schema ( ) ;", "if ( schema == null ) return true ;", "matcher . reset ( schema ) ;", "if ( matcher . matches ( ) ) {", "String old Schema = schema ;", "sdata . set Default Schema ( matcher . replace All ( to Regex ) ) ;", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ + old Schema + STR_ + sdata . get Default Schema ( ) ) ;", "return true ; }", "return false ; }"]}
{"ids": "63358", "code": ["public void stop If Required ( ) {", "if ( System . current Time Millis ( ) > stop At ) {", "throw new Illegal State Exception ( ) ; } }"]}
{"ids": "15145", "code": ["private void link Account ( final String principal Id , final Name ID name Id ) throws SAML 2 Meta Exception , Authentication Exception {", "final String sp Entity Id = meta Manager . get Entity By Meta Alias ( meta Alias ) ;", "try {", "Name ID Info info = new Name ID Info ( sp Entity Id , entity Name , name Id , SAML 2 Constants . SP ROLE , false ) ;", "DEBUG . message ( STR_ , principal Id , name Id . get Value ( ) ) ;", "if ( should Persist Name ID ( sp Entity Id ) ) {", "Account Utils . set Account Federation ( info , principal Id ) ; }", "principal = new SAML 2 Principal ( principal Id ) ; }", "catch ( SAML 2 Exception e ) {", "throw new Authentication Exception ( BUNDLE NAME , STR_ , new Object [ NUM_ ] ) ; } }"]}
{"ids": "82715", "code": ["private void enable Actions ( ) {", "restore Action . set Enabled ( frame . is Maximum ( ) || frame . is Icon ( ) ) ;", "maximize Action . set Enabled ( ( frame . is Maximizable ( ) && ! frame . is Maximum ( ) && ! frame . is Icon ( ) ) || ( frame . is Maximizable ( ) && frame . is Icon ( ) ) ) ;", "iconify Action . set Enabled ( frame . is Iconifiable ( ) && ! frame . is Icon ( ) ) ;", "close Action . set Enabled ( frame . is Closable ( ) ) ;", "size Action . set Enabled ( false ) ;", "move Action . set Enabled ( false ) ; }"]}
{"ids": "67390", "code": ["private List < String > add Rules ( int filter Id , List < String > rules , boolean use Cosmetics ) {", "Input Stream input Stream = null ;", "Input Stream Reader input Stream Reader = null ;", "Buffered Reader reader = null ;", "try {", "String file Name = get Or Create Filter File ( filter Id ) ;", "input Stream = context . open File Input ( file Name ) ;", "input Stream Reader = new Input Stream Reader ( input Stream ) ;", "reader = new Buffered Reader ( input Stream Reader ) ;", "String line = reader . read Line ( ) ;", "while ( line != null ) {", "if ( use Cosmetics || ! Filter Rule . is Cosmetic Rule ( line ) ) {", "rules . add ( line ) ; }", "line = reader . read Line ( ) ; }", "return rules ; }", "catch ( Exception ex ) {", "log . error ( STR_ , filter Id , ex ) ;", "throw new Runtime Exception ( STR_ + filter Id , ex ) ; }", "finally {", "IO Utils . close Quietly ( input Stream ) ;", "IO Utils . close Quietly ( input Stream Reader ) ;", "IO Utils . close Quietly ( reader ) ; } }"]}
{"ids": "66319", "code": ["public static String convert To Hex String ( byte [ ] bytes ) {", "int size = bytes . length ;", "String Buffer buffer = new String Buffer ( size * NUM_ ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int x = bytes [ i ] ;", "if ( x < NUM_ ) x += NUM_ ;", "String tmp = Integer . to Hex String ( x ) ;", "if ( tmp . length ( ) == NUM_ ) buffer . append ( STR_ ) ;", "buffer . append ( tmp ) ; }", "return buffer . to String ( ) ; }"]}
{"ids": "75069", "code": ["public Ordered Task ( String identifier , Step ... steps ) {", "this ( identifier , Arrays . as List ( steps ) ) ; }"]}
{"ids": "73504", "code": ["public void randomize ( List < Cell Index > cell Indices ) {", "Random rand = new Random ( ) ;", "int range = get Upper Bound ( ) - get Lower Bound ( ) ;", "for ( Cell Index cell Index : cell Indices ) {", "int row = cell Index . row ;", "int col = cell Index . col ;", "double value = ( rand . next Double ( ) * range ) + get Lower Bound ( ) ;", "set Logical Value ( row , col , value , false ) ; }", "fire Table Data Changed ( ) ; }"]}
{"ids": "64582", "code": ["private void read Response Headers ( State state , Inner State inner State , Http Response response ) throws Stop Request {", "Header header = response . get First Header ( STR_ ) ;", "if ( header != null ) {", "inner State . m Header Content Disposition = header . get Value ( ) ; }", "header = response . get First Header ( STR_ ) ;", "if ( header != null ) {", "inner State . m Header Content Location = header . get Value ( ) ; }", "header = response . get First Header ( STR_ ) ;", "if ( header != null ) {", "inner State . m Header E Tag = header . get Value ( ) ; }", "String header Transfer Encoding = null ;", "header = response . get First Header ( STR_ ) ;", "if ( header != null ) {", "header Transfer Encoding = header . get Value ( ) ; }", "String header Content Type = null ;", "header = response . get First Header ( STR_ ) ;", "if ( header != null ) {", "header Content Type = header . get Value ( ) ;", "if ( ! header Content Type . equals ( STR_ ) ) {", "throw new Stop Request ( Downloader Service . STATUS FILE DELIVERED INCORRECTLY , STR_ ) ; } }", "if ( header Transfer Encoding == null ) {", "header = response . get First Header ( STR_ ) ;", "if ( header != null ) {", "inner State . m Header Content Length = header . get Value ( ) ;", "long content Length = Long . parse Long ( inner State . m Header Content Length ) ;", "if ( content Length != - NUM_ && content Length != m Info . m Total Bytes ) {", "Log . e ( Constants . TAG , STR_ ) ; } } }", "else {", "if ( Constants . LOGVV ) {", "Log . v ( Constants . TAG , STR_ ) ; } }", "if ( Constants . LOGVV ) {", "Log . v ( Constants . TAG , STR_ + inner State . m Header Content Disposition ) ;", "Log . v ( Constants . TAG , STR_ + inner State . m Header Content Length ) ;", "Log . v ( Constants . TAG , STR_ + inner State . m Header Content Location ) ;", "Log . v ( Constants . TAG , STR_ + inner State . m Header E Tag ) ;", "Log . v ( Constants . TAG , STR_ + header Transfer Encoding ) ; }", "boolean no Size Info = inner State . m Header Content Length == null && ( header Transfer Encoding == null || ! header Transfer Encoding . equals Ignore Case ( STR_ ) ) ;", "if ( no Size Info ) {", "throw new Stop Request ( Downloader Service . STATUS HTTP DATA ERROR , STR_ ) ; } }"]}
{"ids": "86384", "code": ["public void add Auditory ( int id ) {", "m Auditory Feedback . add ( id ) ; }"]}
{"ids": "75997", "code": ["public String wrap ( String path ) {", "return uri Prefix + path ; }"]}
{"ids": "79328", "code": ["public static void constant Attributes ( Simple Method method , Element element , String ... attribute Names ) throws Validation Exception {", "for ( String name : attribute Names ) {", "String attribute Value = element . get Attribute ( name ) ;", "if ( ! Mini Lang Util . is Constant Attribute ( attribute Value ) ) {", "handle Error ( STR_ + name + STR_ , method , element ) ; } } }"]}
{"ids": "51644", "code": ["private void bind View Type ( WX Component component ) {", "int id = generate View Type ( component ) ;", "if ( m View Types == null ) {", "m View Types = new Sparse Array < > ( ) ; }", "Array List < WX Component > m Types = m View Types . get ( id ) ;", "if ( m Types == null ) {", "m Types = new Array List < > ( ) ;", "m View Types . put ( id , m Types ) ; }", "m Types . add ( component ) ; }"]}
{"ids": "39849", "code": ["protected boolean is Empty Value ( Object raw Value ) {", "return raw Value == null || String Utils . is Blank ( String . value Of ( raw Value ) ) ; }"]}
{"ids": "86941", "code": ["public Cipher Text Iv Mac ( byte [ ] c , byte [ ] i , byte [ ] h ) {", "cipher Text = new byte [ c . length ] ;", "System . arraycopy ( c , NUM_ , cipher Text , NUM_ , c . length ) ;", "iv = new byte [ i . length ] ;", "System . arraycopy ( i , NUM_ , iv , NUM_ , i . length ) ;", "mac = new byte [ h . length ] ;", "System . arraycopy ( h , NUM_ , mac , NUM_ , h . length ) ; }"]}
{"ids": "83765", "code": ["public static Master Private Key create From Encrypted Seed ( String passphrase , byte [ ] encrypted Seed ) throws Hyper Ledger Exception {", "try {", "byte [ ] key = S Crypt . generate ( passphrase . get Bytes ( STR_ ) , BITCOIN SEED , NUM_ , NUM_ , NUM_ , NUM_ ) ;", "Secret Key Spec keyspec = new Secret Key Spec ( key , STR_ ) ;", "if ( encrypted Seed . length != NUM_ ) {", "throw new Hyper Ledger Exception ( STR_ ) ; }", "Cipher cipher = Cipher . get Instance ( STR_ , STR_ ) ;", "cipher . init ( Cipher . DECRYPT MODE , keyspec ) ;", "return create ( cipher . do Final ( encrypted Seed ) ) ; }", "catch ( Unsupported Encoding Exception | No Such Padding Exception | No Such Provider Exception | No Such Algorithm Exception | Invalid Key Exception | Bad Padding Exception | Illegal Block Size Exception e ) {", "throw new Hyper Ledger Exception ( e ) ; } }"]}
{"ids": "71985", "code": ["public static List < Json Pointer > filter ( final String ... fields ) {", "final List < Json Pointer > result = new Array List < > ( fields . length ) ;", "for ( final String field : fields ) {", "result . add ( new Json Pointer ( field ) ) ; }", "return result ; }"]}
{"ids": "40255", "code": ["public boolean apply Ft Proxy ( ) {", "return method . is Annotation Present ( Astrix Fault Tolerance Proxy . class ) ; }"]}
{"ids": "81167", "code": ["private void notify Change ( int previous , int current ) {", "m Sound Player . play ( m Sound Id , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ ) ;", "if ( m On Value Change Listener != null ) {", "m On Value Change Listener . on Value Change ( this , previous , m Value ) ; } }"]}
{"ids": "72390", "code": ["public static double atan 2 ( double y , double x ) {", "if ( Double . is Na N ( x ) || Double . is Na N ( y ) ) {", "return Double . Na N ; }", "if ( y == NUM_ ) {", "final double result = x * y ;", "final double invx = NUM_ / x ;", "final double invy = NUM_ / y ;", "if ( invx == NUM_ ) {", "if ( x > NUM_ ) {", "return y ; }", "else {", "return copy Sign ( Math . PI , y ) ; } }", "if ( x < NUM_ || invx < NUM_ ) {", "if ( y < NUM_ || invy < NUM_ ) {", "return - Math . PI ; }", "else {", "return Math . PI ; } }", "else {", "return result ; } }", "if ( y == Double . POSITIVE INFINITY ) {", "if ( x == Double . POSITIVE INFINITY ) {", "return Math . PI * F 1 4 ; }", "if ( x == Double . NEGATIVE INFINITY ) {", "return Math . PI * F 3 4 ; }", "return Math . PI * F 1 2 ; }", "if ( y == Double . NEGATIVE INFINITY ) {", "if ( x == Double . POSITIVE INFINITY ) {", "return - Math . PI * F 1 4 ; }", "if ( x == Double . NEGATIVE INFINITY ) {", "return - Math . PI * F 3 4 ; }", "return - Math . PI * F 1 2 ; }", "if ( x == Double . POSITIVE INFINITY ) {", "if ( y > NUM_ || NUM_ / y > NUM_ ) {", "return NUM_ ; }", "if ( y < NUM_ || NUM_ / y < NUM_ ) {", "return - NUM_ ; } }", "if ( x == Double . NEGATIVE INFINITY ) {", "if ( y > NUM_ || NUM_ / y > NUM_ ) {", "return Math . PI ; }", "if ( y < NUM_ || NUM_ / y < NUM_ ) {", "return - Math . PI ; } }", "if ( x == NUM_ ) {", "if ( y > NUM_ || NUM_ / y > NUM_ ) {", "return Math . PI * F 1 2 ; }", "if ( y < NUM_ || NUM_ / y < NUM_ ) {", "return - Math . PI * F 1 2 ; } }", "final double r = y / x ;", "if ( Double . is Infinite ( r ) ) {", "return atan ( r , NUM_ , x < NUM_ ) ; }", "double ra = double High Part ( r ) ;", "double rb = r - ra ;", "final double xa = double High Part ( x ) ;", "final double xb = x - xa ;", "rb += ( y - ra * xa - ra * xb - rb * xa - rb * xb ) / x ;", "final double temp = ra + rb ;", "rb = - ( temp - ra - rb ) ;", "ra = temp ;", "if ( ra == NUM_ ) {", "ra = copy Sign ( NUM_ , y ) ; }", "final double result = atan ( ra , rb , x < NUM_ ) ;", "return result ; }"]}
{"ids": "22964", "code": ["public int count ( ) {", "return comments == null ? NUM_ : comments . size ( ) ; }"]}
{"ids": "65471", "code": ["private boolean is Any Package From List Installed ( List < String > packages ) {", "boolean result = false ;", "Package Manager pm = m Context . get Package Manager ( ) ;", "for ( String package Name : packages ) {", "try {", "pm . get Package Info ( package Name , NUM_ ) ;", "Q Log . e ( package Name + STR_ ) ;", "result = true ; }", "catch ( Package Manager . Name Not Found Exception e ) {", "continue ; } }", "return result ; }"]}
{"ids": "73735", "code": ["public static String make System Name ( String type , int bit Num ) {", "String n Name = STR_ ;", "if ( ( ! type . equals ( STR_ ) ) && ( ! type . equals ( STR_ ) ) && ( ! type . equals ( STR_ ) ) ) {", "log . error ( STR_ + type ) ;", "return ( n Name ) ; }", "if ( ( bit Num < NUM_ ) || ( ( type . equals ( STR_ ) ) && ( bit Num > NUM_ ) ) || ( bit Num > NUM_ ) ) {", "log . error ( STR_ + bit Num ) ;", "return ( n Name ) ; }", "n Name = STR_ + type + Integer . to String ( bit Num ) ;", "return ( n Name ) ; }"]}
{"ids": "136", "code": ["public static void remove ( ) {", "AUTH TOKEN . remove ( ) ; }"]}
{"ids": "31030", "code": ["public void fill ( int from Index , int to Index , short val ) {", "if ( to Index > pos ) {", "ensure Capacity ( to Index ) ;", "pos = to Index ; }", "Arrays . fill ( data , from Index , to Index , val ) ; }"]}
{"ids": "64591", "code": ["private void run Pending Requests ( ) {", "int max Start Id = - NUM_ ;", "Billing Request request ;", "while ( ( request = m Pending Requests . peek ( ) ) != null ) {", "if ( request . run If Connected ( ) ) {", "m Pending Requests . remove ( ) ;", "if ( max Start Id < request . get Start Id ( ) ) {", "max Start Id = request . get Start Id ( ) ; } }", "else {", "bind To Market Billing Service ( ) ;", "return ; } }", "if ( max Start Id >= NUM_ ) {", "if ( Consts . DEBUG ) {", "Log . i ( TAG , STR_ + max Start Id ) ; }", "stop Self ( max Start Id ) ; } }"]}
{"ids": "14275", "code": ["public static void remove Attribute Default Values ( String service Name , String schema Type , String attr Name , Set default Values , boolean is Org Attr Schema ) throws Upgrade Exception {", "String class Method = STR_ ;", "Service Schema ss = null ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( class Method + STR_ + service Name ) ;", "debug . message ( class Method + STR_ + schema Type ) ;", "debug . message ( class Method + STR_ + attr Name ) ;", "debug . message ( class Method + STR_ + default Values ) ;", "debug . message ( class Method + STR_ + is Org Attr Schema ) ; }", "try {", "if ( is Org Attr Schema ) {", "Service Schema Manager sm = get Service Schema Manager ( service Name ) ;", "ss = sm . get Organization Creation Schema ( ) ; }", "else {", "ss = get Service Schema ( service Name , null , schema Type ) ; }", "if ( ss != null ) {", "Attribute Schema attr Schema = ss . get Attribute Schema ( attr Name ) ;", "for ( Iterator i = default Values . iterator ( ) ; i . has Next ( ) ; ) {", "String default Value = ( String ) i . next ( ) ;", "attr Schema . remove Default Value ( default Value ) ; } } }", "catch ( SMS Exception sme ) {", "debug . error ( class Method + STR_ , sme ) ; }", "catch ( SSO Exception ssoe ) {", "debug . error ( class Method + STR_ , ssoe ) ; } }"]}
{"ids": "27397", "code": ["public void unlock ( final T tx ) {", "if ( DEBUG ) log . debug ( STR_ ) ;", "lock . lock ( ) ;", "if ( DEBUG ) log . debug ( STR_ ) ;", "try {", "assert Not Dead ( ) ;", "assert Owns Lock ( tx ) ;", "if ( queue . remove ( ) != tx ) {", "throw new Assertion Error ( ) ; }", "if ( waits For != null ) {", "final Iterator < T > itr = queue . iterator ( ) ;", "synchronized ( waits For ) {", "while ( itr . has Next ( ) ) {", "final T pending Tx = itr . next ( ) ;", "try {", "waits For . remove Edge ( pending Tx , tx ) ; }", "catch ( Throwable t ) {", "log . warn ( t . get Message ( ) , t ) ; } } } }", "if ( queue . is Empty ( ) ) {", "if ( INFO ) log . info ( STR_ ) ;", "return ; }", "if ( INFO ) log . info ( STR_ ) ;", "available . signal All ( ) ; }", "finally {", "lock . unlock ( ) ;", "if ( DEBUG ) log . debug ( STR_ ) ; } }"]}
{"ids": "12864", "code": ["public boolean is Update Available ( ) {", "return available Update != null ; }"]}
{"ids": "37544", "code": ["@ Override public String to String Summary ( ) {", "String result ;", "String titles ;", "int resultset Length ;", "int i ;", "int j ;", "if ( m Non Sig Wins == null ) {", "return STR_ ; }", "result = STR_ ;", "titles = STR_ ;", "resultset Length = NUM_ + Math . max ( ( int ) ( Math . log ( get Col Count ( ) ) / Math . log ( NUM_ ) ) , ( int ) ( Math . log ( get Row Count ( ) ) / Math . log ( NUM_ ) ) ) ;", "for ( i = NUM_ ; i < get Col Count ( ) ; i ++ ) {", "if ( get Col Hidden ( i ) ) {", "continue ; }", "titles += STR_ + Utils . pad Left ( STR_ + get Summary Title ( i ) , resultset Length * NUM_ + NUM_ ) ; }", "result += titles + STR_ ;", "for ( i = NUM_ ; i < get Col Count ( ) ; i ++ ) {", "if ( get Col Hidden ( i ) ) {", "continue ; }", "for ( j = NUM_ ; j < get Col Count ( ) ; j ++ ) {", "if ( get Col Hidden ( j ) ) {", "continue ; }", "result += STR_ ;", "if ( j == i ) {", "result += Utils . pad Left ( STR_ , resultset Length * NUM_ + NUM_ ) ; }", "else {", "result += Utils . pad Left ( STR_ + m Non Sig Wins [ i ] [ j ] + STR_ + m Wins [ i ] [ j ] + STR_ , resultset Length * NUM_ + NUM_ ) ; } }", "result += STR_ + get Summary Title ( i ) + STR_ + get Col Name ( i ) + STR_ ; }", "return result ; }"]}
{"ids": "33551", "code": ["public int read ( Buffered Input Stream is ) {", "init ( ) ;", "if ( is != null ) {", "in = is ;", "read Header ( ) ;", "if ( ! err ( ) ) {", "read Contents ( ) ;", "if ( frame Count < NUM_ ) {", "status = STATUS FORMAT ERROR ; } } }", "else {", "status = STATUS OPEN ERROR ; }", "try {", "is . close ( ) ; }", "catch ( IO Exception e ) { }", "return status ; }"]}
{"ids": "35801", "code": ["private static int determine Type ( byte [ ] bytes ) {", "int offset = NUM_ ;", "if ( bytes . length >= NUM_ && ( bytes [ NUM_ ] & NUM_ ) == NUM_ && ( bytes [ NUM_ ] & NUM_ ) == NUM_ && ( bytes [ NUM_ ] & NUM_ ) == NUM_ ) {", "offset += NUM_ ; }", "while ( offset < bytes . length && bytes [ offset ] == STR_ || bytes [ offset ] == STR_ || bytes [ offset ] == STR_ || bytes [ offset ] == STR_ || bytes [ offset ] == STR_ ) {", "offset ++ ; }", "return determine Type ( new String ( bytes , offset , Math . min ( NUM_ , bytes . length - offset ) ) ) ; }"]}
{"ids": "5857", "code": ["public void fix Https URL Connection ( ) {", "Https URL Connection . set Default SSL Socket Factory ( ssl Context . get Socket Factory ( ) ) ; }"]}
{"ids": "36043", "code": ["@ Override public Data Table sample ( int new Size ) {", "int row Count = get Row Number ( ) ;", "if ( row Count <= new Size ) {", "return this ; }", "int [ ] sampled Selected Indices = new int [ row Count ] ;", "for ( int i = NUM_ ; i < row Count ; ++ i ) {", "sampled Selected Indices [ i ] = i ; }", "Random rng = new Random ( NUM_ ) ;", "int swap Idx ;", "int tmp Value ;", "for ( int i = NUM_ ; i < row Count ; ++ i ) {", "swap Idx = rng . next Int ( row Count ) ;", "tmp Value = sampled Selected Indices [ swap Idx ] ;", "sampled Selected Indices [ swap Idx ] = sampled Selected Indices [ i ] ;", "sampled Selected Indices [ i ] = tmp Value ; }", "Data Table View sampled Data Table = new Data Table View ( this ) ;", "Vector < Integer > sampled Selected Indices Vector = new Vector < Integer > ( new Size ) ;", "for ( int i = NUM_ ; i < new Size ; ++ i ) {", "sampled Selected Indices Vector . add ( sampled Selected Indices [ i ] ) ; }", "sampled Data Table . set Selected Indices ( sampled Selected Indices Vector ) ;", "return sampled Data Table ; }"]}
{"ids": "38714", "code": ["private synchronized void block ( boolean tf ) {", "if ( tf ) {", "try {", "if ( m filter Thread . is Alive ( ) && m state != IDLE ) {", "wait ( ) ; } }", "catch ( Interrupted Exception ex ) { } }", "else {", "notify All ( ) ; } }"]}
{"ids": "59521", "code": ["public void cancel ( ) {", "if ( m Upload Operation == null ) {", "if ( m Upload Started . get ( ) ) {", "Log OC . d ( TAG , STR_ ) ;", "m Cancellation Requested . set ( true ) ; }", "else {", "Log OC . e ( TAG , STR_ ) ; } }", "else {", "Log OC . d ( TAG , STR_ ) ;", "m Upload Operation . cancel ( ) ; } }"]}
{"ids": "78791", "code": ["public static void merge Files ( final File file 1 , final File file 2 , final File output File ) {", "if ( ! is Readable ( file 1 ) || ! is Readable ( file 2 ) || ! output File . exists ( ) && ! make Dirs For File ( output File ) ) {", "return ; }", "try {", "File Input Stream fis 1 = new File Input Stream ( file 1 ) ;", "File Input Stream fis 2 = new File Input Stream ( file 2 ) ;", "Sequence Input Stream sis = new Sequence Input Stream ( fis 1 , fis 2 ) ;", "File Output Stream fos = new File Output Stream ( output File ) ;", "int count ;", "byte [ ] temp = new byte [ NUM_ ] ;", "while ( ( count = sis . read ( temp ) ) != - NUM_ ) {", "fos . write ( temp , NUM_ , count ) ; }", "File Utils . sync ( fos ) ;", "fos . close ( ) ;", "sis . close ( ) ;", "fis 1 . close ( ) ;", "fis 2 . close ( ) ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "67502", "code": ["public static Snippet Set parse ( final File file ) throws Parse Exception {", "return parse ( file Input Supplier ( file . get Parent File ( ) ) , file . get Name ( ) ) ; }"]}
{"ids": "67308", "code": ["public static String read File ( Class < ? > context , String name ) throws IO Exception {", "try ( Input Stream in = context . get Resource As Stream ( name ) ) {", "if ( in == null ) {", "return null ; }", "return new String ( Byte Streams . to Byte Array ( in ) , ENC ) ; }", "catch ( IO Exception e ) {", "throw new IO Exception ( STR_ + name , e ) ; } }"]}
{"ids": "70532", "code": ["long pts To Time Us ( long pts ) {", "if ( last Pts != Long . MIN VALUE ) {", "long closest Wrap Count = ( last Pts + ( MAX PTS / NUM_ ) ) / MAX PTS ;", "long pts Wrap Below = pts + ( MAX PTS * ( closest Wrap Count - NUM_ ) ) ;", "long pts Wrap Above = pts + ( MAX PTS * closest Wrap Count ) ;", "pts = Math . abs ( pts Wrap Below - last Pts ) < Math . abs ( pts Wrap Above - last Pts ) ? pts Wrap Below : pts Wrap Above ; }", "long time Us = ( pts * C . MICROS PER SECOND ) / NUM_ ;", "if ( last Pts == Long . MIN VALUE ) {", "timestamp Offset Us = first Sample Timestamp - time Us ; }", "last Pts = pts ;", "return time Us + timestamp Offset Us ; }"]}
{"ids": "24023", "code": ["public int remove ( Object key ) {", "Entry e = remove Entry For Key ( key ) ;", "return ( e == null ? NUM_ : e . value ) ; }"]}
{"ids": "79199", "code": ["public boolean verify Challenge Token ( Inet Socket Address address , int token ) {", "return Objects . equals ( challenge Tokens . get ( address ) , token ) ; }"]}
{"ids": "73600", "code": ["@ Override public void handle Key ( int virtual Key Code , int transition State , char key Char ) {", "switch Control Keys ( virtual Key Code , transition State ) ;", "input Buffer . add ( new Global Key Event ( this , virtual Key Code , transition State , key Char , menu Pressed , shift Pressed , control Pressed , extended Key ) ) ; }"]}
{"ids": "36714", "code": ["protected void draw Triangle ( int x , int y , int w , int h , Color fill Color , Paint fill Paint , Color pen Color , boolean shadow , String direction ) {", "Polygon triangle = new Polygon ( ) ;", "if ( direction . equals ( mx Constants . DIRECTION NORTH ) ) {", "triangle . add Point ( x , y + h ) ;", "triangle . add Point ( x + w / NUM_ , y ) ;", "triangle . add Point ( x + w , y + h ) ; }", "else if ( direction . equals ( mx Constants . DIRECTION SOUTH ) ) {", "triangle . add Point ( x , y ) ;", "triangle . add Point ( x + w / NUM_ , y + h ) ;", "triangle . add Point ( x + w , y ) ; }", "else if ( direction . equals ( mx Constants . DIRECTION WEST ) ) {", "triangle . add Point ( x + w , y ) ;", "triangle . add Point ( x , y + h / NUM_ ) ;", "triangle . add Point ( x + w , y + h ) ; }", "else {", "triangle . add Point ( x , y ) ;", "triangle . add Point ( x + w , y + h / NUM_ ) ;", "triangle . add Point ( x , y + h ) ; }", "draw Polygon ( triangle , fill Color , fill Paint , pen Color , shadow ) ; }"]}
{"ids": "75245", "code": ["private static Map < String , String > resource Bundle Map ( Resource Bundle bundle ) {", "final Hash Map < String , String > map = new Hash Map < String , String > ( ) ;", "final Enumeration < String > e = bundle . get Keys ( ) ;", "while ( e . has More Elements ( ) ) {", "final String key = e . next Element ( ) ;", "map . put ( key , ( String ) bundle . get Object ( key ) ) ; }", "return Collections . unmodifiable Map ( map ) ; }"]}
{"ids": "51427", "code": ["public int compare To ( Int Buffer other Buffer ) {", "int compare Remaining = ( remaining ( ) < other Buffer . remaining ( ) ) ? remaining ( ) : other Buffer . remaining ( ) ;", "int this Pos = position ;", "int other Pos = other Buffer . position ;", "int this Int , other Int ;", "while ( compare Remaining > NUM_ ) {", "this Int = get ( this Pos ) ;", "other Int = other Buffer . get ( other Pos ) ;", "if ( this Int != other Int ) {", "return this Int < other Int ? - NUM_ : NUM_ ; }", "this Pos ++ ;", "other Pos ++ ;", "compare Remaining -- ; }", "return remaining ( ) - other Buffer . remaining ( ) ; }"]}
{"ids": "71528", "code": ["private static Size Pair select Size Pair ( Camera camera , int desired Width , int desired Height ) {", "List < Size Pair > valid Preview Sizes = generate Valid Preview Size List ( camera ) ;", "Size Pair selected Pair = null ;", "int min Diff = Integer . MAX VALUE ;", "for ( Size Pair size Pair : valid Preview Sizes ) {", "Size size = size Pair . preview Size ( ) ;", "int diff = Math . abs ( size . get Width ( ) - desired Width ) + Math . abs ( size . get Height ( ) - desired Height ) ;", "if ( diff < min Diff ) {", "selected Pair = size Pair ;", "min Diff = diff ; } }", "return selected Pair ; }"]}
{"ids": "32715", "code": ["private boolean is Black ( final int x , final int y ) {", "if ( ! in Bounds ( x , y ) ) {", "return false ; }", "return ( m buffered Image . get RGB ( x , y ) & NUM_ ) == NUM_ ; }"]}
{"ids": "20538", "code": ["public void add Job ( Runnable job ) {", "m Jobs . add ( job ) ; }"]}
{"ids": "61111", "code": ["public PKCS 10 Certification Request ( String signature Algorithm , X 509 Name subject , Public Key key , ASN 1 Set attributes , Private Key signing Key , String provider ) throws No Such Algorithm Exception , No Such Provider Exception , Invalid Key Exception , Signature Exception {", "String algorithm Name = Strings . to Upper Case ( signature Algorithm ) ;", "DER Object Identifier sig OID = ( DER Object Identifier ) algorithms . get ( algorithm Name ) ;", "if ( sig OID == null ) {", "try {", "sig OID = new DER Object Identifier ( algorithm Name ) ; }", "catch ( Exception e ) {", "throw new Illegal Argument Exception ( STR_ ) ; } }", "if ( subject == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( key == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( no Params . contains ( sig OID ) ) {", "this . sig Alg Id = new Algorithm Identifier ( sig OID ) ; }", "else if ( params . contains Key ( algorithm Name ) ) {", "this . sig Alg Id = new Algorithm Identifier ( sig OID , ( ASN 1 Encodable ) params . get ( algorithm Name ) ) ; }", "else {", "this . sig Alg Id = new Algorithm Identifier ( sig OID , DER Null . INSTANCE ) ; }", "try {", "ASN 1 Sequence seq = ( ASN 1 Sequence ) ASN 1 Primitive . from Byte Array ( key . get Encoded ( ) ) ;", "this . req Info = new Certification Request Info ( subject , new Subject Public Key Info ( seq ) , attributes ) ; }", "catch ( IO Exception e ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Signature sig ;", "if ( provider == null ) {", "sig = Signature . get Instance ( signature Algorithm ) ; }", "else {", "sig = Signature . get Instance ( signature Algorithm , provider ) ; }", "sig . init Sign ( signing Key ) ;", "try {", "sig . update ( req Info . get Encoded ( ASN 1 Encoding . DER ) ) ; }", "catch ( Exception e ) {", "throw new Illegal Argument Exception ( STR_ + e ) ; }", "this . sig Bits = new DER Bit String ( sig . sign ( ) ) ; }"]}
{"ids": "82425", "code": ["@ Override public void close ( ) throws IO Exception {", "if ( in != null ) {", "in . close ( ) ;", "in = null ;", "buf = null ; } }"]}
{"ids": "72556", "code": ["public static Collection < Vector 2 D > reduce Points ( final Collection < Vector 2 D > points ) {", "int size = NUM_ ;", "Vector 2 D min X = null ;", "Vector 2 D max X = null ;", "Vector 2 D min Y = null ;", "Vector 2 D max Y = null ;", "for ( Vector 2 D p : points ) {", "if ( min X == null || p . get X ( ) < min X . get X ( ) ) {", "min X = p ; }", "if ( max X == null || p . get X ( ) > max X . get X ( ) ) {", "max X = p ; }", "if ( min Y == null || p . get Y ( ) < min Y . get Y ( ) ) {", "min Y = p ; }", "if ( max Y == null || p . get Y ( ) > max Y . get Y ( ) ) {", "max Y = p ; }", "size ++ ; }", "if ( size < NUM_ ) {", "return points ; }", "final List < Vector 2 D > quadrilateral = build Quadrilateral ( min Y , max X , max Y , min X ) ;", "if ( quadrilateral . size ( ) < NUM_ ) {", "return points ; }", "final List < Vector 2 D > reduced Points = new Array List < Vector 2 D > ( quadrilateral ) ;", "for ( final Vector 2 D p : points ) {", "if ( ! inside Quadrilateral ( p , quadrilateral ) ) {", "reduced Points . add ( p ) ; } }", "return reduced Points ; }"]}
{"ids": "73016", "code": ["int update Bookmarks In Transaction ( Content Values values , String selection , String [ ] selection Args , boolean caller Is Sync Adapter ) {", "int count = NUM_ ;", "final SQ Lite Database db = m Open Helper . get Writable Database ( ) ;", "final String [ ] bookmarks Projection = new String [ ] { Bookmarks . ID , Bookmarks . VERSION , Bookmarks . URL , Bookmarks . TITLE , Bookmarks . IS FOLDER , Bookmarks . ACCOUNT NAME , Bookmarks . ACCOUNT TYPE } ;", "Cursor cursor = db . query ( TABLE BOOKMARKS , bookmarks Projection , selection , selection Args , null , null , null ) ;", "boolean updating Parent = values . contains Key ( Bookmarks . PARENT ) ;", "String parent Account Name = null ;", "String parent Account Type = null ;", "if ( updating Parent ) {", "long parent = values . get As Long ( Bookmarks . PARENT ) ;", "Cursor c = db . query ( TABLE BOOKMARKS , new String [ ] { Bookmarks . ACCOUNT NAME , Bookmarks . ACCOUNT TYPE } , STR_ , new String [ ] { Long . to String ( parent ) } , null , null , null ) ;", "if ( c . move To First ( ) ) {", "parent Account Name = c . get String ( NUM_ ) ;", "parent Account Type = c . get String ( NUM_ ) ; }", "c . close ( ) ; }", "else if ( values . contains Key ( Bookmarks . ACCOUNT NAME ) || values . contains Key ( Bookmarks . ACCOUNT TYPE ) ) { }", "try {", "String [ ] args = new String [ NUM_ ] ;", "if ( ! caller Is Sync Adapter ) {", "values . put ( Bookmarks . DATE MODIFIED , System . current Time Millis ( ) ) ;", "values . put ( Bookmarks . DIRTY , NUM_ ) ; }", "boolean updating Url = values . contains Key ( Bookmarks . URL ) ;", "String url = null ;", "if ( updating Url ) {", "url = values . get As String ( Bookmarks . URL ) ; }", "Content Values image Values = extract Image Values ( values , url ) ;", "while ( cursor . move To Next ( ) ) {", "long id = cursor . get Long ( NUM_ ) ;", "args [ NUM_ ] = Long . to String ( id ) ;", "String account Name = cursor . get String ( NUM_ ) ;", "String account Type = cursor . get String ( NUM_ ) ;", "if ( updating Parent && ( ! Text Utils . equals ( account Name , parent Account Name ) || ! Text Utils . equals ( account Type , parent Account Type ) ) ) {", "Content Values new Values = values From Cursor ( cursor ) ;", "new Values . put All ( values ) ;", "new Values . remove ( Bookmarks . ID ) ;", "new Values . remove ( Bookmarks . VERSION ) ;", "new Values . put ( Bookmarks . ACCOUNT NAME , parent Account Name ) ;", "new Values . put ( Bookmarks . ACCOUNT TYPE , parent Account Type ) ;", "Uri insert Uri = insert In Transaction ( Bookmarks . CONTENT URI , new Values , caller Is Sync Adapter ) ;", "long new Id = Content Uris . parse Id ( insert Uri ) ;", "if ( cursor . get Int ( NUM_ ) != NUM_ ) {", "Content Values update Children = new Content Values ( NUM_ ) ;", "update Children . put ( Bookmarks . PARENT , new Id ) ;", "count += update Bookmarks In Transaction ( update Children , Bookmarks . PARENT + STR_ , new String [ ] { Long . to String ( id ) } , caller Is Sync Adapter ) ; }", "Uri uri = Content Uris . with Appended Id ( Bookmarks . CONTENT URI , id ) ;", "delete In Transaction ( uri , null , null , caller Is Sync Adapter ) ;", "count += NUM_ ; }", "else {", "if ( ! caller Is Sync Adapter ) {", "values . put ( Bookmarks . VERSION , cursor . get Long ( NUM_ ) + NUM_ ) ; }", "count += db . update ( TABLE BOOKMARKS , values , STR_ , args ) ; }", "if ( image Values != null ) {", "if ( ! updating Url ) {", "url = cursor . get String ( NUM_ ) ;", "image Values . put ( Images . URL , url ) ; }", "if ( ! Text Utils . is Empty ( url ) ) {", "args [ NUM_ ] = url ;", "if ( db . update ( TABLE IMAGES , image Values , Images . URL + STR_ , args ) == NUM_ ) {", "db . insert ( TABLE IMAGES , Images . FAVICON , image Values ) ; } } } } }", "finally {", "if ( cursor != null ) cursor . close ( ) ; }", "return count ; }"]}
{"ids": "31725", "code": ["private Ignite Bi Tuple < String , Integer > host Port ( String conn Str , String host Port Str ) throws Ignite Checked Exception {", "String [ ] tokens = host Port Str . split ( STR_ , - NUM_ ) ;", "String host = tokens [ NUM_ ] ;", "if ( F . is Empty ( host ) ) host = LOCALHOST ;", "int port ;", "if ( tokens . length == NUM_ ) port = Igfs Ipc Endpoint Configuration . DFLT PORT ;", "else if ( tokens . length == NUM_ ) {", "String port Str = tokens [ NUM_ ] ;", "try {", "port = Integer . value Of ( port Str ) ;", "if ( port < NUM_ || port > NUM_ ) throw new Ignite Checked Exception ( STR_ + conn Str ) ; }", "catch ( Number Format Exception e ) {", "throw new Ignite Checked Exception ( STR_ + conn Str ) ; } }", "else throw new Ignite Checked Exception ( STR_ + conn Str ) ;", "return F . t ( host , port ) ; }"]}
{"ids": "63593", "code": ["public boolean is Missile Going To Hit ( Entity Missile missile ) {", "if ( missile == null || missile . target Vector == null ) {", "return false ; }", "return ( Vector 2 . distance ( new Vector 2 ( new Pos 3 D ( missile ) ) , new Vector 2 ( x Coord , z Coord ) ) < alarm Range && Vector 2 . distance ( new Vector 2 ( missile . target Vector ) , new Vector 2 ( x Coord , z Coord ) ) < safety Range ) ; }"]}
{"ids": "55304", "code": ["public static Usericon parse Mod Icon ( String json ) {", "try {", "JSON Parser parser = new JSON Parser ( ) ;", "JSON Object o = ( JSON Object ) parser . parse ( json ) ;", "JSON Object room = ( JSON Object ) o . get ( STR_ ) ;", "String room Id = ( String ) room . get ( STR_ ) ;", "String mod Badge Url = ( String ) room . get ( STR_ ) ;", "if ( mod Badge Url == null ) {", "return null ; }", "return Usericon Factory . create Twitch Like Icon ( Usericon . Type . MOD , room Id , mod Badge Url , Usericon . SOURCE FFZ , STR_ ) ; }", "catch ( Parse Exception | Class Cast Exception | Null Pointer Exception ex ) { }", "return null ; }"]}
{"ids": "1093", "code": ["public static long length ( URL url ) throws IO Exception {", "HTTP Response http = HTTP Engine . head ( url , null , null , - NUM_ , true , null , Constants . NAME , null , null ) ;", "return http . get Content Length ( ) ; }"]}
{"ids": "72834", "code": ["@ Override public Request < List < Workspace > > all ( ) {", "List < Workspace > workspaces To Return = new Array List < > ( ) ;", "for ( Workspace dummy Workspace : workspaces . values ( ) ) {", "workspaces To Return . add ( dummy Workspace ) ; }", "return new Dummy Request < > ( workspaces To Return ) ; }"]}
{"ids": "12097", "code": ["public void subscribe ( Event Subscriber < ? > subscriber ) {", "final Class < ? > event Type = get Event Type ( subscriber ) ;", "do Subscribe ( subscriber , event Type ) ; }"]}
{"ids": "86757", "code": ["public static String reader To String ( final Reader file Reader ) throws IO Exception {", "final String Builder sb = new String Builder ( ) ;", "try ( Buffered Reader br = new Buffered Reader ( file Reader ) ) {", "final char [ ] buffer = File Utils . make Buffer ( ) ;", "final int eof = - NUM_ ;", "for ( int len = br . read ( buffer ) ; len > eof ; len = br . read ( buffer ) ) {", "for ( int i = NUM_ ; i < len ; i ++ ) {", "sb . append ( buffer [ i ] ) ; } } }", "return sb . to String ( ) ; }"]}
{"ids": "77997", "code": ["public static String bytes To Hex ( byte [ ] bytes , boolean with Spaces ) {", "String Builder sb = new String Builder ( ) ;", "for ( byte hash Byte : bytes ) {", "int int Val = NUM_ & hash Byte ;", "if ( int Val < NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( Integer . to Hex String ( int Val ) ) ;", "if ( with Spaces ) {", "sb . append ( STR_ ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "41117", "code": ["public static byte [ ] string To Utf 8 Bytes ( String string ) {", "int len = string . length ( ) ;", "byte [ ] bytes = new byte [ len * NUM_ ] ;", "int out At = NUM_ ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "char c = string . char At ( i ) ;", "if ( ( c != NUM_ ) && ( c < NUM_ ) ) {", "bytes [ out At ] = ( byte ) c ;", "out At ++ ; }", "else if ( c < NUM_ ) {", "bytes [ out At ] = ( byte ) ( ( ( c > > NUM_ ) & NUM_ ) | NUM_ ) ;", "bytes [ out At + NUM_ ] = ( byte ) ( ( c & NUM_ ) | NUM_ ) ;", "out At += NUM_ ; }", "else {", "bytes [ out At ] = ( byte ) ( ( ( c > > NUM_ ) & NUM_ ) | NUM_ ) ;", "bytes [ out At + NUM_ ] = ( byte ) ( ( ( c > > NUM_ ) & NUM_ ) | NUM_ ) ;", "bytes [ out At + NUM_ ] = ( byte ) ( ( c & NUM_ ) | NUM_ ) ;", "out At += NUM_ ; } }", "byte [ ] result = new byte [ out At ] ;", "System . arraycopy ( bytes , NUM_ , result , NUM_ , out At ) ;", "return result ; }"]}
{"ids": "48841", "code": ["private boolean is Interleaved ( Component Sample Model sm ) {", "int num Bands = sample Model . get Num Bands ( ) ;", "if ( num Bands == NUM_ ) {", "return true ; }", "int [ ] bank Indices = sm . get Bank Indices ( ) ;", "for ( int i = NUM_ ; i < num Bands ; i ++ ) {", "if ( bank Indices [ i ] != NUM_ ) {", "return false ; } }", "int [ ] band Offsets = sm . get Band Offsets ( ) ;", "int min Offset = band Offsets [ NUM_ ] ;", "int max Offset = min Offset ;", "for ( int i = NUM_ ; i < num Bands ; i ++ ) {", "int offset = band Offsets [ i ] ;", "if ( offset < min Offset ) {", "min Offset = offset ; }", "if ( offset > max Offset ) {", "max Offset = offset ; } }", "if ( max Offset - min Offset >= sm . get Pixel Stride ( ) ) {", "return false ; }", "return true ; }"]}
{"ids": "62522", "code": ["private int decode Size ( byte [ ] buffer ) {", "Big Integer bi = new Big Integer ( buffer ) ;", "int tmp Size = bi . int Value ( ) ;", "if ( tmp Size < NUM_ ) {", "logger . warning ( STR_ + tmp Size + STR_ + Integer . to Binary String ( tmp Size ) + STR_ + Integer . to Hex String ( tmp Size ) ) ; }", "return tmp Size ; }"]}
{"ids": "48238", "code": ["public Certificate Issuer Extension ( Boolean critical , Object value ) throws IO Exception {", "this . extension Id = PKIX Extensions . Certificate Issuer Id ;", "this . critical = critical . boolean Value ( ) ;", "this . extension Value = ( byte [ ] ) value ;", "Der Value val = new Der Value ( this . extension Value ) ;", "this . names = new General Names ( val ) ; }"]}
{"ids": "68582", "code": ["public String to XML ( ) {", "String Buffer str = new String Buffer ( ) ;", "str . append ( STR_ ) ;", "str . append ( XML ROOT ELEMENT ) ;", "str . append ( STR_ ) ;", "str . append ( STR_ ) ;", "str . append ( XML ELEMENT QUALITY CODE ) ;", "str . append ( STR_ ) ;", "str . append ( quality Code ) ;", "str . append ( STR_ ) ;", "str . append ( XML ELEMENT QUALITY CODE ) ;", "str . append ( STR_ ) ;", "if ( description != null ) {", "str . append ( STR_ ) ;", "str . append ( XML ELEMENT QUALITY DESC ) ;", "str . append ( STR_ ) ;", "str . append ( description ) ;", "str . append ( STR_ ) ;", "str . append ( XML ELEMENT QUALITY DESC ) ;", "str . append ( STR_ ) ; }", "str . append ( STR_ ) ;", "str . append ( XML ROOT ELEMENT ) ;", "str . append ( STR_ ) ;", "return str . to String ( ) ; }"]}
{"ids": "15552", "code": ["public byte [ ] decrypt ( Faces Context context , byte [ ] securedata ) {", "try {", "byte [ ] mac Bytes = new byte [ mac Length ] ;", "System . arraycopy ( securedata , NUM_ , mac Bytes , NUM_ , mac Bytes . length ) ;", "byte [ ] iv = new byte [ iv Length ] ;", "System . arraycopy ( securedata , mac Bytes . length , iv , NUM_ , iv . length ) ;", "byte [ ] encdata = new byte [ securedata . length - mac Bytes . length - iv . length ] ;", "System . arraycopy ( securedata , mac Bytes . length + iv . length , encdata , NUM_ , encdata . length ) ;", "byte [ ] raw Key = convert Password To Key ( get Password To Secure State ( context ) ) ;", "Mac mac = get Mac ( raw Key ) ;", "mac . update ( iv ) ;", "mac . update ( encdata ) ;", "byte [ ] mac Bytes Calculated = mac . do Final ( ) ;", "if ( Arrays . equals ( mac Bytes , mac Bytes Calculated ) ) {", "Cipher cipher = get Block Cipher For Decryption ( raw Key , iv ) ;", "byte [ ] plaindata = cipher . do Final ( encdata ) ;", "return plaindata ; }", "else {", "if ( logger . is Loggable ( Level . WARNING ) ) {", "logger . warning ( STR_ ) ; }", "return null ; } }", "catch ( Exception e ) {", "if ( logger . is Loggable ( Level . SEVERE ) ) {", "logger . log ( Level . SEVERE , e . get Message ( ) , e . get Cause ( ) ) ; }", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "56260", "code": ["public static Set < String > comma Delimited List To Set ( String str ) {", "Set < String > set = new Tree Set < > ( ) ;", "String [ ] tokens = comma Delimited List To String Array ( str ) ;", "set . add All ( Arrays . as List ( tokens ) ) ;", "return set ; }"]}
{"ids": "46330", "code": ["public int hash Code ( ) {", "return Objects . hash ( file , princ , bound ) ; }"]}
{"ids": "37943", "code": ["public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "63851", "code": ["protected void tag ( String tag , String name , String value , boolean close ) {", "spacing ( ) ;", "m out . print ( STR_ ) ;", "m out . print ( tag ) ;", "m out . print ( STR_ ) ;", "m out . print ( name ) ;", "m out . print ( STR_ ) ;", "m out . print ( STR_ ) ;", "escape String ( value ) ;", "m out . print ( STR_ ) ;", "if ( close ) m out . print ( STR_ ) ;", "m out . print ( STR_ ) ;", "println ( ) ;", "if ( ! close ) {", "m tag Stack . add ( tag ) ; } }"]}
{"ids": "60854", "code": ["public V remove ( Object key ) {", "int hash = hash ( key . hash Code ( ) ) ;", "Segment < K , V > s = segment For Hash ( hash ) ;", "return s == null ? null : s . remove ( key , hash , null ) ; }"]}
{"ids": "75625", "code": ["public static Result evaluate Model ( Multi Label Classifier h , Instances D ) throws Exception {", "return evaluate Model Prequential Basic ( h , D , NUM_ , NUM_ , STR_ , STR_ ) ; }"]}
{"ids": "36653", "code": ["protected boolean is Valid State ( mx Cell State state ) {", "return true ; }"]}
{"ids": "72344", "code": ["public static boolean delete Dir ( File dir ) {", "if ( dir == null ) {", "return false ; }", "if ( dir . is Directory ( ) ) {", "String [ ] children = dir . list ( ) ;", "for ( String child : children ) {", "boolean success = delete Dir ( new File ( dir , child ) ) ;", "if ( ! success ) {", "return false ; } } }", "return dir . delete ( ) ; }"]}
{"ids": "22489", "code": ["private CIM Object Path create Filter ( Cim Managed Filter Info filter Info ) throws WBEM Exception {", "String Builder filter Name Builder = new String Builder ( ) ;", "filter Name Builder . append ( subscriptions Identifier ) ;", "filter Name Builder . append ( Cim Constants . PATH NAME DELIMITER ) ;", "filter Name Builder . append ( filter Info . get Name ( ) ) ;", "String filter Name = filter Name Builder . to String ( ) ;", "String impl NS = connection . get Impl Namespace ( ) ;", "CIM Property < ? > name Property = new CIM Property < String > ( Cim Constants . NAME KEY , CIM Data Type . STRING T , filter Name ) ;", "CIM Property < ? > src Namespace Prop = new CIM Property < String > ( Cim Constants . FILTER PROP SRC NAMESPACE , CIM Data Type . STRING T , impl NS ) ;", "CIM Property < ? > src Namespaces Prop = new CIM Property < String [ ] > ( Cim Constants . FILTER PROP SRC NAMESPACES , CIM Data Type . STRING ARRAY T , new String [ ] { impl NS } ) ;", "CIM Property < ? > query Lang Prop = new CIM Property < String > ( Cim Constants . FILTER PROP QUERY LANGUAGE , CIM Data Type . STRING T , filter Info . get Query Language ( ) ) ;", "CIM Property < ? > query Prop = new CIM Property < String > ( Cim Constants . FILTER PROP QUERY , CIM Data Type . STRING T , filter Info . get Query ( ) ) ;", "CIM Property < ? > [ ] filter Properties = new CIM Property [ ] { name Property , src Namespace Prop , src Namespaces Prop , query Lang Prop , query Prop } ;", "CIM Object Path filter Path = create Instance ( Cim Constants . CIM FILTER NAME , filter Name , filter Properties ) ;", "filter Paths . add ( filter Path ) ;", "return filter Path ; }"]}
{"ids": "49014", "code": ["public Activation Group Impl ( Activation Group ID id , Marshalled Object < ? > data ) throws Remote Exception {", "super ( id ) ;", "group ID = id ;", "unexport Object ( this , true ) ;", "RMI Server Socket Factory ssf = new Server Socket Factory Impl ( ) ;", "Unicast Remote Object . export Object ( this , NUM_ , null , ssf ) ;", "if ( System . get Security Manager ( ) == null ) {", "try {", "System . set Security Manager ( new Security Manager ( ) ) ; }", "catch ( Exception e ) {", "throw new Remote Exception ( STR_ , e ) ; } } }"]}
{"ids": "15970", "code": ["static byte [ ] hash df ( Digest digest , byte [ ] seed Material , int seed Length ) {", "byte [ ] temp = new byte [ ( seed Length + NUM_ ) / NUM_ ] ;", "int len = temp . length / digest . get Digest Size ( ) ;", "int counter = NUM_ ;", "byte [ ] dig = new byte [ digest . get Digest Size ( ) ] ;", "for ( int i = NUM_ ; i <= len ; i ++ ) {", "digest . update ( ( byte ) counter ) ;", "digest . update ( ( byte ) ( seed Length > > NUM_ ) ) ;", "digest . update ( ( byte ) ( seed Length > > NUM_ ) ) ;", "digest . update ( ( byte ) ( seed Length > > NUM_ ) ) ;", "digest . update ( ( byte ) seed Length ) ;", "digest . update ( seed Material , NUM_ , seed Material . length ) ;", "digest . do Final ( dig , NUM_ ) ;", "int bytes To Copy = ( ( temp . length - i * dig . length ) > dig . length ) ? dig . length : ( temp . length - i * dig . length ) ;", "System . arraycopy ( dig , NUM_ , temp , i * dig . length , bytes To Copy ) ;", "counter ++ ; }", "if ( seed Length % NUM_ != NUM_ ) {", "int shift = NUM_ - ( seed Length % NUM_ ) ;", "int carry = NUM_ ;", "for ( int i = NUM_ ; i != temp . length ; i ++ ) {", "int b = temp [ i ] & NUM_ ;", "temp [ i ] = ( byte ) ( ( b > > > shift ) | ( carry << ( NUM_ - shift ) ) ) ;", "carry = b ; } }", "return temp ; }"]}
{"ids": "85616", "code": ["protected boolean drop Message ( RTMP rtmp , int channel Id , IRTMP Event message ) {", "boolean drop = false ;", "if ( rtmp . get Mode ( ) == RTMP . MODE SERVER ) {", "boolean is Video = false ;", "if ( message instanceof Ping ) {", "final Ping ping Message = ( Ping ) message ;", "if ( ping Message . get Event Type ( ) == Ping . STREAM PLAYBUFFER CLEAR ) {", "final int channel = ( NUM_ + ( ( ping Message . get Value 2 ( ) - NUM_ ) * NUM_ ) ) ;", "rtmp . set Last Timestamp Mapping ( channel , null ) ;", "rtmp . set Last Timestamp Mapping ( channel + NUM_ , null ) ;", "rtmp . set Last Timestamp Mapping ( channel + NUM_ , null ) ; }", "return false ; }", "if ( ( is Video = message instanceof Video Data ) || message instanceof Audio Data ) {", "if ( message . get Timestamp ( ) == NUM_ ) {", "return false ; }", "boolean is Live = message . get Source Type ( ) == Constants . SOURCE TYPE LIVE ;", "long timestamp = ( message . get Timestamp ( ) & NUM_ ) ;", "Live Timestamp Mapping mapping = rtmp . get Last Timestamp Mapping ( channel Id ) ;", "long now = System . current Time Millis ( ) ;", "if ( mapping == null || timestamp < mapping . get Last Stream Time ( ) ) {", "log . debug ( STR_ , now , timestamp ) ;", "mapping = new Live Timestamp Mapping ( now , timestamp ) ;", "rtmp . set Last Timestamp Mapping ( channel Id , mapping ) ; }", "mapping . set Last Stream Time ( timestamp ) ;", "long clock Time Of Message = mapping . get Clock Start Time ( ) + timestamp - mapping . get Stream Start Time ( ) ;", "long tardiness = clock Time Of Message - now ;", "if ( is Live && drop Live Future ) {", "tardiness = Math . abs ( tardiness ) ; }", "I Connection conn = Red 5 . get Connection Local ( ) ;", "if ( conn != null ) {", "tardiness -= conn . get Last Ping Time ( ) ; }", "else {", "log . debug ( STR_ ) ; }", "if ( tardiness < base Tolerance ) { }", "else if ( tardiness > highest Tolerance ) {", "log . debug ( STR_ , message ) ;", "if ( is Video ) {", "mapping . set Key Frame Needed ( true ) ; }", "drop = true ; }", "else {", "if ( is Video ) {", "Video Data video = ( Video Data ) message ;", "if ( video . get Frame Type ( ) == Frame Type . KEYFRAME ) {", "mapping . set Key Frame Needed ( false ) ; }", "else if ( tardiness >= base Tolerance && tardiness < mid Tolerance ) {", "if ( video . get Frame Type ( ) == Frame Type . DISPOSABLE INTERFRAME ) {", "log . debug ( STR_ , message ) ;", "drop = true ; } }", "else if ( tardiness >= mid Tolerance && tardiness <= highest Tolerance ) {", "log . debug ( STR_ , message ) ;", "drop = true ; } } } }", "log . debug ( STR_ , drop ) ; }", "return drop ; }"]}
{"ids": "62650", "code": ["public static double vector Length ( double [ ] vector ) {", "double ret = NUM_ ;", "if ( vector == null ) return ret ;", "else {", "for ( double a Vector : vector ) {", "ret += Math . pow ( a Vector , NUM_ ) ; } }", "return ret ; }"]}
{"ids": "2675", "code": ["public static String encode Query ( String url ) {", "Uri uri = Uri . parse ( url ) ;", "try {", "String query = uri . get Query ( ) ;", "String encoded Query = query != null ? URL Encoder . encode ( query , STR_ ) : null ;", "URI tmp = new URI ( uri . get Scheme ( ) , uri . get Authority ( ) , uri . get Path ( ) , null , uri . get Fragment ( ) ) ;", "return tmp + ( encoded Query != null && encoded Query . length ( ) > NUM_ ? STR_ + encoded Query : STR_ ) ; }", "catch ( Unsupported Encoding Exception ignore ) { }", "catch ( URI Syntax Exception ignore ) { }", "return uri . to String ( ) ; }"]}
{"ids": "2066", "code": ["private static long write File ( String path , byte [ ] data ) {", "File Output Stream out = null ;", "try {", "out = new File Output Stream ( path ) ;", "out . write ( data ) ;", "return data . length ; }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ , e ) ; }", "finally {", "try {", "out . close ( ) ; }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ , e ) ; } }", "return - NUM_ ; }"]}
{"ids": "11273", "code": ["public void fire Palette Event ( Component Event event ) {", "if ( local Hack List == null ) {", "return ; }", "palette = ( Container ) event . get Source ( ) ;", "int event Type = event . get ID ( ) ;", "for ( Component Listener listener : local Hack List ) {", "if ( event Type == Component Event . COMPONENT HIDDEN ) {", "listener . component Hidden ( event ) ; }", "else if ( event Type == Component Event . COMPONENT SHOWN ) {", "listener . component Shown ( event ) ; } }", "if ( event Type == Component Event . COMPONENT HIDDEN ) {", "palette = null ; } }"]}
{"ids": "74195", "code": ["public void remove Entry ( Roster Entry e ) {", "log . debug ( STR_ , e ) ;", "list . remove ( e ) ;", "e . remove Property Change Listener ( this ) ;", "set Dirty ( true ) ;", "fire Property Change ( REMOVE , e , null ) ; }"]}
{"ids": "58360", "code": ["protected void log Diagnostic ( String msg ) {", "if ( is Diagnostics Enabled ( ) ) {", "log Raw Diagnostic ( diagnostic Prefix + msg ) ; } }"]}
{"ids": "4656", "code": ["public void add URL ( final String url ) {", "while ( current Index < history . size ( ) - NUM_ ) {", "history . remove ( current Index + NUM_ ) ; }", "history . add ( url ) ;", "current Index = history . size ( ) - NUM_ ; }"]}
{"ids": "63145", "code": ["public static Value Timestamp convert Timestamp ( Timestamp x , Calendar calendar ) {", "if ( calendar == null ) {", "throw Db Exception . get Invalid Value Exception ( STR_ , null ) ; }", "Calendar cal = ( Calendar ) calendar . clone ( ) ;", "cal . set Time In Millis ( x . get Time ( ) ) ;", "long date Value = date Value From Calendar ( cal ) ;", "long nanos = nanos From Calendar ( cal ) ;", "nanos += x . get Nanos ( ) % NUM_ ;", "return Value Timestamp . from Date Value And Nanos ( date Value , nanos ) ; }"]}
{"ids": "74930", "code": ["private void process ( ) {", "Array List < Point 2 D > p List = new Array List < Point 2 D > ( ) ;", "Array List < Color > c List = new Array List < Color > ( ) ;", "while ( reader . get Pointer ( ) < reader . get Total Bit Len ( ) ) {", "Point 2 D p = get Point Coords ( ) ;", "p List . add ( p ) ;", "float [ ] cc = { NUM_ , NUM_ , NUM_ , NUM_ } ;", "for ( int z = NUM_ ; z < col Comp Count ; z ++ ) {", "cc [ z ] = reader . get Float ( bits Per Component ) ; }", "Color c = new Color ( cc [ NUM_ ] , cc [ NUM_ ] , cc [ NUM_ ] , cc [ NUM_ ] ) ;", "c List . add ( c ) ; }", "int total Rows = p List . size ( ) / vertices Per Row ;", "for ( int mm = NUM_ ; mm < ( total Rows - NUM_ ) ; mm ++ ) {", "int m Rows = mm * total Rows ;", "for ( int nn = NUM_ ; nn < ( vertices Per Row - NUM_ ) ; nn ++ ) {", "int nm = nn + m Rows ;", "int [ ] t = new int [ NUM_ ] ;", "t [ NUM_ ] = nm ;", "t [ NUM_ ] = t [ NUM_ ] = nm + NUM_ ;", "t [ NUM_ ] = t [ NUM_ ] = nm + vertices Per Row ;", "t [ NUM_ ] = nm + vertices Per Row + NUM_ ;", "for ( int z = NUM_ ; z < t . length ; z ++ ) {", "triangles . add ( p List . get ( t [ z ] ) ) ;", "tri Colors . add ( c List . get ( t [ z ] ) ) ; } } } }"]}
{"ids": "31345", "code": ["private void element ( String segment ) {", "int index = segment . index Of ( STR_ ) ;", "String prefix = null ;", "if ( index > NUM_ ) {", "prefix = segment . substring ( NUM_ , index ) ;", "segment = segment . substring ( index + NUM_ ) ; }", "String element = style . get Element ( segment ) ;", "prefixes . add ( prefix ) ;", "names . add ( element ) ; }"]}
{"ids": "29269", "code": ["private void cleanup Handler ( Content Handler vh ) throws SAX Exception {", "for ( Prefix Mapping pm = prefix Mapping ; pm != null ; pm = pm . parent ) vh . end Prefix Mapping ( pm . prefix ) ;", "vh . end Document ( ) ; }"]}
{"ids": "54265", "code": ["public Input Stream open Classfile ( String classname ) {", "try {", "URL Connection con = open Classfile 0 ( classname ) ;", "if ( con != null ) return con . get Input Stream ( ) ; }", "catch ( IO Exception e ) { }", "return null ; }"]}
{"ids": "83848", "code": ["public void remove Ignored View ( View v ) {", "m Ignored Views . remove ( v ) ; }"]}
{"ids": "26780", "code": ["private double fitness ( Solution solution , double [ ] weights ) {", "double max = Double . NEGATIVE INFINITY ;", "for ( int i = NUM_ ; i < solution . get Number Of Objectives ( ) ; i ++ ) {", "max = Math . max ( max , Math . max ( weights [ i ] , NUM_ ) * Math . abs ( solution . get Objective ( i ) - ideal Point [ i ] ) ) ; }", "if ( solution . violates Constraints ( ) ) {", "max += NUM_ ; }", "return max ; }"]}
{"ids": "78451", "code": ["private boolean select Item By Name ( C Combo combo , String name , String [ ] c String ) {", "for ( int i = NUM_ ; i < c String . length ; i ++ ) {", "String prop Name = c String [ i ] ;", "if ( name . equals Ignore Case ( prop Name ) ) {", "combo . select ( i ) ;", "return true ; } }", "return false ; }"]}
{"ids": "34447", "code": ["public void add File ( String path ) throws IO Exception {", "File new File = new File ( path ) ;", "if ( ! new File . exists ( ) ) {", "throw new IO Exception ( STR_ + new File . get Absolute Path ( ) ) ; }", "if ( Delphi Utils . accept File ( new File . get Absolute Path ( ) ) ) {", "files . add ( new File ) ; } }"]}
{"ids": "55814", "code": ["public void remove Limit Line ( Limit Line l ) {", "m Limit Lines . remove ( l ) ; }"]}
{"ids": "42818", "code": ["public boolean is Content ( ) {", "return state . equals ( CONTENT ) ; }"]}
{"ids": "71624", "code": ["protected boolean columns Differ ( Column current Column , Column desired Column ) {", "String desired Default = desired Column . get Default Value ( ) ;", "String current Default = current Column . get Default Value ( ) ;", "boolean defaults Equal = ( desired Default == null ) || desired Default . equals ( current Default ) ;", "boolean size Matters = database Info . has Size ( current Column . get Mapped Type Code ( ) ) && ( desired Column . get Size ( ) != null ) ;", "if ( ( database Info . get Target Jdbc Type ( desired Column . get Mapped Type Code ( ) ) != current Column . get Mapped Type Code ( ) ) || ( desired Column . is Required ( ) != current Column . is Required ( ) ) || ( size Matters && ! String Utils . equals ( desired Column . get Size ( ) , current Column . get Size ( ) ) ) || ! defaults Equal ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "62461", "code": ["public static int read UINT 16 ( Input Stream stream ) throws IO Exception {", "int result = stream . read ( ) ;", "result |= stream . read ( ) << NUM_ ;", "return result ; }"]}
{"ids": "19703", "code": ["private void prepare Metadata Connection ( ) throws SQL Exception , Replicator Exception {", "if ( metadata Connection == null ) metadata Connection = data Source Impl . get Connection ( ) ;", "long current Time = System . current Time Millis ( ) ;", "if ( last Connection Time == NUM_ ) {", "last Connection Time = current Time ; }", "else if ( reconnect Timeout In Seconds > NUM_ && current Time - last Connection Time > reconnect Timeout In Seconds * NUM_ ) {", "data Source Impl . release Connection ( metadata Connection ) ;", "metadata Connection = data Source Impl . get Connection ( ) ; } }"]}
{"ids": "34425", "code": ["public static String identify Line Delimiter ( String file Content ) {", "if ( file Content . matches ( STR_ ) ) {", "return STR_ ; }", "else if ( file Content . matches ( STR_ ) ) {", "return STR_ ; }", "else if ( file Content . matches ( STR_ ) ) {", "return STR_ ; }", "else {", "return STR_ ; } }"]}
{"ids": "668", "code": ["public void add Item ( Force Item item ) {", "items . add ( item ) ; }"]}
{"ids": "57036", "code": ["public boolean delete Attachment Point ( Datapath Id sw , OF Port port ) {", "Attachment Point ap = new Attachment Point ( sw , port , new Date ( NUM_ ) ) ;", "if ( this . old A Ps != null ) {", "Array List < Attachment Point > ap List = new Array List < Attachment Point > ( ) ;", "ap List . add All ( this . old A Ps ) ;", "int index = ap List . index Of ( ap ) ;", "if ( index > NUM_ ) {", "ap List . remove ( index ) ;", "this . old A Ps = ap List ; } }", "if ( this . attachment Points != null ) {", "Array List < Attachment Point > ap List = new Array List < Attachment Point > ( ) ;", "ap List . add All ( this . attachment Points ) ;", "int index = ap List . index Of ( ap ) ;", "if ( index > NUM_ ) {", "ap List . remove ( index ) ;", "this . attachment Points = ap List ;", "return true ; } }", "return false ; }"]}
{"ids": "85817", "code": ["protected void parse Container And Screen ( Xml Resource Parser parser , long [ ] out ) {", "if ( HOTSEAT CONTAINER NAME . equals ( get Attribute Value ( parser , ATTR CONTAINER ) ) ) {", "out [ NUM_ ] = Launcher Settings . Favorites . CONTAINER HOTSEAT ;", "long rank = Long . parse Long ( get Attribute Value ( parser , ATTR RANK ) ) ;", "out [ NUM_ ] = ( rank < m Hotseat All Apps Rank ) ? rank : ( rank + NUM_ ) ; }", "else {", "out [ NUM_ ] = Launcher Settings . Favorites . CONTAINER DESKTOP ;", "out [ NUM_ ] = Long . parse Long ( get Attribute Value ( parser , ATTR SCREEN ) ) ; } }"]}
{"ids": "84617", "code": ["public Default Tree Colouring sample Tree Colouring ( Tree tree , Colour Change Matrix colour Change Matrix , Meta Population mp ) {", "Default Tree Colouring colouring = new Default Tree Colouring ( NUM_ , tree ) ;", "double [ ] N = mp . get Population Sizes ( NUM_ ) ;", "double [ ] root Partials = prune ( tree , tree . get Root ( ) , colour Change Matrix , N ) ;", "double normalization = NUM_ ;", "for ( int i = NUM_ ; i < root Partials . length ; i ++ ) {", "normalization += colour Change Matrix . get Equilibrium ( i ) * root Partials [ i ] ; }", "sample Internal Nodes ( tree , tree . get Root ( ) , colour Change Matrix ) ;", "sample Branch Colourings ( colouring , tree , tree . get Root ( ) , colour Change Matrix ) ;", "double log P = calculate Log Probability Density ( colouring , tree , tree . get Root ( ) , colour Change Matrix , N ) - Math . log ( normalization ) ;", "colouring . set Log Probability Density ( log P ) ;", "return colouring ; }"]}
{"ids": "30513", "code": ["public Stored List Iterator < T > establish List Scan ( boolean random scan ) {", "if ( is Empty ( ) ) return null ;", "Stored List Iterator < T > slh = SL Holder Pool . get ( ) ;", "Stored List Iterator < T > res = establish Pos ( random scan , slh ) ;", "if ( res == null ) slh . release ( ) ;", "return res ; }"]}
{"ids": "56011", "code": ["public void drag ( long time , float x , float y , float delta X , float delta Y , float total X , float total Y ) {", "reset Resize Timeout ( false ) ;", "delta X = Math Utils . flip Sign If ( delta X , Localization Utils . is Layout Rtl ( ) ) ;", "m New Tab Button . drag ( x , y ) ;", "if ( m Last Pressed Close Button != null ) {", "if ( ! m Last Pressed Close Button . drag ( x , y ) ) m Last Pressed Close Button = null ; }", "if ( m In Reorder Mode ) {", "float accumulated Delta X = x - m Last Reorder X ;", "if ( Math . abs ( accumulated Delta X ) >= NUM_ ) {", "if ( ! Localization Utils . is Layout Rtl ( ) ) {", "if ( delta X >= NUM_ ) {", "m Reorder State |= REORDER SCROLL RIGHT ; }", "else if ( delta X <= - NUM_ ) {", "m Reorder State |= REORDER SCROLL LEFT ; } }", "else {", "if ( delta X >= NUM_ ) {", "m Reorder State |= REORDER SCROLL LEFT ; }", "else if ( delta X <= - NUM_ ) {", "m Reorder State |= REORDER SCROLL RIGHT ; } }", "m Last Reorder X = x ;", "update Reorder Position ( accumulated Delta X ) ; } }", "else if ( ! m Scroller . is Finished ( ) ) {", "m Scroller . set Final X ( ( int ) ( m Scroller . get Final X ( ) + delta X ) ) ; }", "else {", "float fast Expand Delta = calculate Offset To Make Tab Visible ( m Interacting Tab , true , true , true ) ;", "if ( m Interacting Tab != null && fast Expand Delta != NUM_ ) {", "if ( ( fast Expand Delta > NUM_ && delta X > NUM_ ) || ( fast Expand Delta < NUM_ && delta X < NUM_ ) ) {", "m Scroller . start Scroll ( m Scroll Offset , NUM_ , ( int ) fast Expand Delta , NUM_ , time , EXPAND DURATION MS ) ; } }", "else {", "update Scroll Offset Position ( ( int ) ( m Scroll Offset + delta X ) ) ; } }", "if ( ! m In Reorder Mode ) {", "final float abs Total X = Math . abs ( total X ) ;", "final float abs Total Y = Math . abs ( total Y ) ;", "if ( total Y > m Reorder Move Start Threshold && abs Total X < m Reorder Move Start Threshold * NUM_ && ( abs Total X > EPSILON && ( abs Total Y / abs Total X ) > TAN OF REORDER ANGLE START THRESHOLD ) ) {", "start Reorder Mode ( time , x , x - total X ) ; } }", "if ( ! m In Reorder Mode ) m Interacting Tab = null ;", "m Update Host . request Update ( ) ; }"]}
{"ids": "83551", "code": ["public static String decode ( final String str , final String charset Name ) throws Unsupported Encoding Exception {", "return decode ( new String ( str . get Bytes ( charset Name ) , STR_ ) ) ; }"]}
{"ids": "65343", "code": ["public Server Commit acquire ( Operation Entry entry , Server Session Context session , long timestamp ) {", "Server Commit commit = pool . poll ( ) ;", "if ( commit == null ) {", "commit = new Server Commit ( this , log ) ; }", "commit . reset ( entry , session , timestamp ) ;", "return commit ; }"]}
{"ids": "2354", "code": ["public static synchronized double make Noise ( double mean , double standard Diviation ) {", "return random . next Gaussian ( ) * Math . sqrt ( standard Diviation ) + mean ; }"]}
{"ids": "31976", "code": ["void shutdown ( ) {", "try {", "ssl Engine . close Inbound ( ) ; }", "catch ( SSL Exception e ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + e . get Message ( ) + STR_ + ses + STR_ ) ; } }"]}
{"ids": "38631", "code": ["@ Override public synchronized void remove Instance Listener ( Instance Listener tsl ) {", "m instance Listeners . remove ( tsl ) ; }"]}
{"ids": "30256", "code": ["public Map < String , Map < String , Flt > > retrieve Terms ( int doc Num ) throws IO Exception {", "return retrieve Terms ( doc Num , null ) ; }"]}
{"ids": "77564", "code": ["boolean alias ( String src , String target ) {", "if ( src == null ) return false ;", "Plugin Holder < T > a = registry . get ( src ) ;", "if ( a == null ) return false ;", "Plugin Holder < T > b = registry . get ( target ) ;", "if ( b != null ) return false ;", "registry . put ( target , a ) ;", "return true ; }"]}
{"ids": "8131", "code": ["public static < T extends Char Sequence > T each Match ( T self , Pattern pattern , @ Closure Params ( value = From String . class , options = { STR_ , STR_ } ) Closure closure ) {", "each Match ( self . to String ( ) , pattern , closure ) ;", "return self ; }"]}
{"ids": "65743", "code": ["public void switch Single Row ( ) {", "if ( m only Multi Row ) return ;", "card Layout . first ( card Panel ) ;", "m single Row = true ;", "dynamic Display ( NUM_ ) ; }"]}
{"ids": "81368", "code": ["private boolean is String Continuation ( int offset ) {", "int next Non WS Char Position = f Scanner . find Non Whitespace Backward In Any Partition ( offset - NUM_ , Java Heuristic Scanner . UNBOUND ) ;", "try {", "if ( next Non WS Char Position != Java Heuristic Scanner . NOT FOUND && f Document . get Char ( next Non WS Char Position ) == STR_ ) return true ;", "else return false ; }", "catch ( Bad Location Exception e ) {", "Log . error ( Java Indenter . class , e ) ;", "return false ; } }"]}
{"ids": "51223", "code": ["final void push ( final Object object ) {", "stack . add ( object ) ; }"]}
{"ids": "14178", "code": ["public void make Immutable ( ) {", "mutable = false ; }"]}
{"ids": "50154", "code": ["public static < K , V > V atomic Get Or Create ( Concurrent Map < K , V > map , K key , Callable < V > ctor ) {", "V value = map . get ( key ) ;", "if ( value == null ) {", "try {", "value = ctor . call ( ) ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( STR_ , e ) ; }", "V existing = map . put If Absent ( key , value ) ;", "if ( existing != null ) {", "return existing ; } }", "return value ; }"]}
{"ids": "28329", "code": ["private void create Metric Chart Panel ( int metric , Dataset Generator dataset Generator , List < GC Stats Chart Panel > list ) {", "Changing Category Dataset With TTG dataset = dataset Generator . new Category Dataset With TTG ( metric , false ) ;", "GC Stats Chart Panel panel = new Metric Chart Panel ( CHART PREFIX + Dataset Generator . get Metric Name ( metric ) , Dataset Generator . get Unit Name ( metric ) , dataset , locker ) ;", "list . add ( panel ) ; }"]}
{"ids": "34314", "code": ["public Default Client Web Request Builder cookie ( String name , String value ) {", "return cookie ( new Http Cookie ( name , value ) ) ; }"]}
{"ids": "80348", "code": ["private void add New Tilesets ( Map map ) throws IO Exception {", "for ( Tile Set set : map . get Tile Sets ( ) ) {", "set By Name . put ( set . get Tilebmp File ( ) , set ) ; }", "for ( String name : mapping . get New Sets ( ) ) {", "if ( name . equals ( STR_ ) ) {", "continue ; }", "if ( ! set By Name . contains Key ( name ) ) {", "Tile Set set = new Tile Set ( ) ;", "set . set Name ( construct Tileset Name ( name ) ) ;", "Basic Tile Cutter cutter = new Basic Tile Cutter ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "set . import Tile Bitmap ( name , cutter ) ;", "set By Name . put ( name , set ) ;", "map . add Tileset ( set ) ; } } }"]}
{"ids": "75835", "code": ["public static List < Css Meta Data < ? extends Styleable , ? > > create Css Meta Data List ( List < Css Meta Data < ? extends Styleable , ? > > base List , Css Meta Data < ? extends Styleable , ? > ... meta Data ) {", "List < Css Meta Data < ? extends Styleable , ? > > styleables = new Array List < > ( base List ) ;", "styleables . add All ( Arrays . as List ( meta Data ) ) ;", "return Collections . unmodifiable List ( styleables ) ; }"]}
{"ids": "15846", "code": ["public void add Extension ( ASN 1 Object Identifier oid , boolean critical , byte [ ] value ) {", "if ( extensions . contains Key ( oid ) ) {", "throw new Illegal Argument Exception ( STR_ + oid + STR_ ) ; }", "ext Ordering . add Element ( oid ) ;", "extensions . put ( oid , new Extension ( oid , critical , new DER Octet String ( value ) ) ) ; }"]}
{"ids": "1305", "code": ["public void update Client Cookies ( Boolean client Cookies ) throws Security Exception {", "check Write Access ( ) ;", "boolean has Access = Config Web Util . has Access ( config , Security Manager . TYPE SETTING ) ;", "if ( ! has Access ) throw new Security Exception ( STR_ ) ;", "Element scope = get Root Element ( STR_ ) ;", "scope . set Attribute ( STR_ , Caster . to String ( client Cookies , STR_ ) ) ; }"]}
{"ids": "29475", "code": ["public double [ ] subseries By Copy ( double [ ] series , int start , int end ) throws Index Out Of Bounds Exception {", "if ( ( start > end ) || ( start < NUM_ ) || ( end > series . length ) ) {", "throw new Index Out Of Bounds Exception ( STR_ + series . length + STR_ + start + STR_ + String . value Of ( end - start ) ) ; }", "return Arrays . copy Of Range ( series , start , end ) ; }"]}
{"ids": "71971", "code": ["public static String create Temp File ( final String ... lines ) throws Exception {", "final File f = File . create Temp File ( STR_ , STR_ ) ;", "f . delete On Exit ( ) ;", "try ( final File Writer w = new File Writer ( f ) ) {", "for ( final String s : lines ) {", "w . write ( s + System . get Property ( STR_ ) ) ; } }", "return f . get Absolute Path ( ) ; }"]}
{"ids": "60519", "code": ["public static void read Skel ( Buffered Reader reader ) throws IO Exception {", "Vector lines = new Vector ( ) ;", "String Buffer section = new String Buffer ( ) ;", "String ln ;", "while ( ( ln = reader . read Line ( ) ) != null ) {", "if ( ln . starts With ( STR_ ) ) {", "lines . add Element ( section . to String ( ) ) ;", "section . set Length ( NUM_ ) ; }", "else {", "section . append ( ln ) ;", "section . append ( NL ) ; } }", "if ( section . length ( ) > NUM_ ) lines . add Element ( section . to String ( ) ) ;", "if ( lines . size ( ) != size ) {", "Out . error ( Error Messages . WRONG SKELETON ) ;", "throw new Generator Exception ( ) ; }", "line = new String [ size ] ;", "for ( int i = NUM_ ; i < size ; i ++ ) line [ i ] = ( String ) lines . element At ( i ) ; }"]}
{"ids": "79043", "code": ["@ Override public long read Double ( String file Path , long offset ) {", "File Channel file Channel = update Cache ( file Path ) ;", "Byte Buffer byte Bffer = read ( file Channel , Carbon Common Constants . LONG SIZE IN BYTE , offset ) ;", "return byte Bffer . get Long ( ) ; }"]}
{"ids": "53815", "code": ["public Lua Compiler ( Compiler Settings settings ) {", "this . settings = Objects . require Non Null ( settings ) ; }"]}
{"ids": "33694", "code": ["public static void show Address On Map ( Context m Context , String address ) {", "address = address . replace ( STR_ , STR_ ) ;", "Intent geo Intent = new Intent ( Intent . ACTION VIEW , Uri . parse ( STR_ + address ) ) ;", "m Context . start Activity ( geo Intent ) ; }"]}
{"ids": "30319", "code": ["private void find Bounced Instrument ( ) {", "for ( final Receipt Instrument Info instrument Info : instrument Details ) if ( instrument Info . is Bounced ( ) ) bounced Instruments . add ( instrument Info ) ; }"]}
{"ids": "30649", "code": ["public static Set < String > convert Array To Set ( String [ ] array ) {", "Set < String > result Set = new Hash Set < String > ( array . length ) ;", "Collections . add All ( result Set , array ) ;", "return result Set ; }"]}
{"ids": "25994", "code": ["public Parse File ( byte [ ] data ) {", "this ( null , data , null ) ; }"]}
{"ids": "56796", "code": ["private Storage Policy Entity create Storage Policy Entity ( Namespace Entity namespace Entity , String storage Policy Name , Storage Entity storage Entity , Storage Entity destination Storage Entity , Storage Policy Rule Type Entity storage Policy Rule Type Entity , Integer storage Policy Rule Value , Business Object Definition Entity business Object Definition Entity , String business Object Format Usage , File Type Entity file Type Entity , Storage Policy Status Entity storage Policy Status Entity , Integer storage Policy Version , Boolean storage Policy Latest Version ) {", "Storage Policy Entity storage Policy Entity = new Storage Policy Entity ( ) ;", "storage Policy Entity . set Namespace ( namespace Entity ) ;", "storage Policy Entity . set Name ( storage Policy Name ) ;", "storage Policy Entity . set Storage ( storage Entity ) ;", "storage Policy Entity . set Destination Storage ( destination Storage Entity ) ;", "storage Policy Entity . set Storage Policy Rule Type ( storage Policy Rule Type Entity ) ;", "storage Policy Entity . set Storage Policy Rule Value ( storage Policy Rule Value ) ;", "storage Policy Entity . set Business Object Definition ( business Object Definition Entity ) ;", "if ( String Utils . is Not Blank ( business Object Format Usage ) ) {", "storage Policy Entity . set Usage ( business Object Format Usage ) ; }", "storage Policy Entity . set File Type ( file Type Entity ) ;", "storage Policy Entity . set Status ( storage Policy Status Entity ) ;", "storage Policy Entity . set Version ( storage Policy Version ) ;", "storage Policy Entity . set Latest Version ( storage Policy Latest Version ) ;", "return storage Policy Dao . save And Refresh ( storage Policy Entity ) ; }"]}
{"ids": "63626", "code": ["public void draw Std Dev Line ( Graphics 2 D g 2 d , Long std Dev Val , long y Max Mark , Color color ) {", "float std Dev Perc = std Dev Val / ( float ) y Max Mark ;", "g 2 d . set Color ( color ) ;", "int y Pos Of Line = this . graph Bottom - Math . round ( this . graph Height * std Dev Perc ) ;", "g 2 d . draw Line ( this . graph Left , y Pos Of Line , this . graph Right , y Pos Of Line ) ; }"]}
{"ids": "52169", "code": ["public Sample Vcpc ( Independence Test independence Test ) {", "if ( independence Test == null ) {", "throw new Null Pointer Exception ( ) ; }", "if ( ! ( independence Test instanceof Ind Test Fisher Z ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . independence Test = independence Test ;", "this . data Set = ( Data Set ) independence Test . get Data ( ) ;", "this . variables = data Set . get Variables ( ) ;", "this . cov Matrix = new Covariance Matrix ( data Set ) ;", "List < Node > nodes = cov Matrix . get Variables ( ) ;", "this . index Map = index Map ( variables ) ;", "this . name Map = map Names ( variables ) ;", "this . nodes To Variables = new Hash Map < > ( ) ;", "this . variables To Nodes = new Hash Map < > ( ) ; }"]}
{"ids": "32491", "code": ["private int next Available Idx ( Collection < Integer > started Grids , int max Top Size , Random rnd ) {", "while ( true ) {", "int idx = rnd . next Int ( max Top Size ) ;", "if ( ! started Grids . contains ( idx ) ) return idx ; } }"]}
{"ids": "80039", "code": ["public boolean has Color ( ) {", "return type String . contains ( COLOR ) ; }"]}
{"ids": "4983", "code": ["public Clearance Matrix ( int p class count , Brd Layer Structure p layer structure , String [ ] p name arr ) {", "class count = Math . max ( p class count , NUM_ ) ;", "layer structure = p layer structure ;", "clearance rows = new Clearance Matrix Row [ class count ] ;", "for ( int index = NUM_ ; index < class count ; ++ index ) {", "clearance rows [ index ] = new Clearance Matrix Row ( this , p name arr [ index ] ) ; }", "max value on layer = new int [ layer structure . size ( ) ] ; }"]}
{"ids": "43506", "code": ["public static char [ ] concat ( char [ ] base , char [ ] other , int append Count ) {", "final int length = base . length ;", "char [ ] new Array = copy From ( base , base . length + append Count ) ;", "System . arraycopy ( other , NUM_ , new Array , length , append Count ) ;", "return new Array ; }"]}
{"ids": "72439", "code": ["public Array Real Vector ( Array Real Vector v 1 , Array Real Vector v 2 ) {", "data = new double [ v 1 . data . length + v 2 . data . length ] ;", "System . arraycopy ( v 1 . data , NUM_ , data , NUM_ , v 1 . data . length ) ;", "System . arraycopy ( v 2 . data , NUM_ , data , v 1 . data . length , v 2 . data . length ) ; }"]}
{"ids": "33947", "code": ["void add Class List ( String class List Filename ) {", "if ( class List Filename . length ( ) > NUM_ ) {", "set Option ( STR_ , class List Filename ) ;", "load Class Names ( class List Filename ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ ) ; } }"]}
{"ids": "31300", "code": ["private Start build ( Start event ) {", "Named Node Map list = event . get Attributes ( ) ;", "int length = list . get Length ( ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "Node node = list . item ( i ) ;", "Attribute value = attribute ( node ) ;", "if ( ! value . is Reserved ( ) ) {", "event . add ( value ) ; } }", "return event ; }"]}
{"ids": "10528", "code": ["public Bytes To Name Canonicalizer make Child ( boolean canonicalize , boolean intern ) {", "return new Bytes To Name Canonicalizer ( this , intern , hash Seed , table Info . get ( ) ) ; }"]}
{"ids": "37568", "code": ["public Instances retrieve Instances ( ) throws Exception {", "return retrieve Instances ( m Query ) ; }"]}
{"ids": "48656", "code": ["void extract ( Input Stream in , String files [ ] ) throws IO Exception {", "Zip Input Stream zis = new Zip Input Stream ( in ) ;", "Zip Entry e ;", "Set < Zip Entry > dirs = new Dir Set ( ) ;", "while ( ( e = zis . get Next Entry ( ) ) != null ) {", "if ( files == null ) {", "dirs . add ( extract File ( zis , e ) ) ; }", "else {", "String name = e . get Name ( ) ;", "for ( String file : files ) {", "if ( name . starts With ( file ) ) {", "dirs . add ( extract File ( zis , e ) ) ;", "break ; } } } }", "update Last Modified Time ( dirs ) ; }"]}
{"ids": "46399", "code": ["private static void draw Chunk ( Image image , Graphics g , boolean stretch , int dx 1 , int dy 1 , int dx 2 , int dy 2 , int sx 1 , int sy 1 , int sx 2 , int sy 2 , boolean x Direction ) {", "if ( dx 2 - dx 1 <= NUM_ || dy 2 - dy 1 <= NUM_ || sx 2 - sx 1 <= NUM_ || sy 2 - sy 1 <= NUM_ ) {", "return ; }", "if ( stretch ) {", "g . draw Image ( image , dx 1 , dy 1 , dx 2 , dy 2 , sx 1 , sy 1 , sx 2 , sy 2 , null ) ; }", "else {", "int x Size = sx 2 - sx 1 ;", "int y Size = sy 2 - sy 1 ;", "int delta X ;", "int delta Y ;", "if ( x Direction ) {", "delta X = x Size ;", "delta Y = NUM_ ; }", "else {", "delta X = NUM_ ;", "delta Y = y Size ; }", "while ( dx 1 < dx 2 && dy 1 < dy 2 ) {", "int new DX 2 = Math . min ( dx 2 , dx 1 + x Size ) ;", "int new DY 2 = Math . min ( dy 2 , dy 1 + y Size ) ;", "g . draw Image ( image , dx 1 , dy 1 , new DX 2 , new DY 2 , sx 1 , sy 1 , sx 1 + new DX 2 - dx 1 , sy 1 + new DY 2 - dy 1 , null ) ;", "dx 1 += delta X ;", "dy 1 += delta Y ; } } }"]}
{"ids": "15866", "code": ["private void init Sign ( ) {", "mess Digest Trees . reset ( ) ;", "GMSS Private Key Parameters gmss Private Key = ( GMSS Private Key Parameters ) key ;", "if ( gmss Private Key . is Used ( ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( gmss Private Key . get Index ( NUM_ ) >= gmss Private Key . get Num Leafs ( NUM_ ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "this . gmss PS = gmss Private Key . get Parameters ( ) ;", "this . num Layer = gmss PS . get Num Of Layers ( ) ;", "byte [ ] seed = gmss Private Key . get Current Seeds ( ) [ num Layer - NUM_ ] ;", "byte [ ] OTS Seed = new byte [ md Length ] ;", "byte [ ] dummy = new byte [ md Length ] ;", "System . arraycopy ( seed , NUM_ , dummy , NUM_ , md Length ) ;", "OTS Seed = gmss Random . next Seed ( dummy ) ;", "this . ots = new Winternitz OT Signature ( OTS Seed , digest Provider . get ( ) , gmss PS . get Winternitz Parameter ( ) [ num Layer - NUM_ ] ) ;", "byte [ ] [ ] [ ] help Current Auth Paths = gmss Private Key . get Current Auth Paths ( ) ;", "current Auth Paths = new byte [ num Layer ] [ ] [ ] ;", "for ( int j = NUM_ ; j < num Layer ; j ++ ) {", "current Auth Paths [ j ] = new byte [ help Current Auth Paths [ j ] . length ] [ md Length ] ;", "for ( int i = NUM_ ; i < help Current Auth Paths [ j ] . length ; i ++ ) {", "System . arraycopy ( help Current Auth Paths [ j ] [ i ] , NUM_ , current Auth Paths [ j ] [ i ] , NUM_ , md Length ) ; } }", "index = new int [ num Layer ] ;", "System . arraycopy ( gmss Private Key . get Index ( ) , NUM_ , index , NUM_ , num Layer ) ;", "byte [ ] help Subtree Root Sig ;", "subtree Root Sig = new byte [ num Layer - NUM_ ] [ ] ;", "for ( int i = NUM_ ; i < num Layer - NUM_ ; i ++ ) {", "help Subtree Root Sig = gmss Private Key . get Subtree Root Sig ( i ) ;", "subtree Root Sig [ i ] = new byte [ help Subtree Root Sig . length ] ;", "System . arraycopy ( help Subtree Root Sig , NUM_ , subtree Root Sig [ i ] , NUM_ , help Subtree Root Sig . length ) ; }", "gmss Private Key . mark Used ( ) ; }"]}
{"ids": "14427", "code": ["public void write ( byte [ ] b , int offset , int length ) throws IO Exception {", "out . write ( b , offset , length ) ; }"]}
{"ids": "12561", "code": ["public Sample Set ( Data Input Stream is ) throws IO Exception {", "int num Samples ;", "sample Info = new Sample Info ( is ) ;", "num Samples = is . read Int ( ) ;", "this . samples = new Sample [ num Samples ] ;", "for ( int i = NUM_ ; i < num Samples ; i ++ ) {", "samples [ i ] = Sample . load Binary ( is ) ; } }"]}
{"ids": "49542", "code": ["public void close ( ) {", "running = false ;", "synchronized ( hist Data ) {", "hist Data . notify ( ) ; } }"]}
{"ids": "78558", "code": ["public SQ Lite Database Configuration ( String path , @ SQ Lite Database . Open Flags int open Flags ) {", "if ( path == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . path = path ;", "label = strip Path For Logs ( path ) ;", "this . open Flags = open Flags ;", "max Sql Cache Size = NUM_ ;", "locale = Locale . get Default ( ) ; }"]}
{"ids": "42994", "code": ["private void print Properties ( Properties properties ) throws IO Exception {", "String Writer string Buffer = new String Writer ( ) ;", "Buffered Reader reader = null ;", "properties . store ( string Buffer , null ) ;", "try {", "reader = new Buffered Reader ( new String Reader ( string Buffer . to String ( ) ) ) ;", "reader . read Line ( ) ;", "String line = null ;", "while ( ( line = reader . read Line ( ) ) != null ) {", "writer . print ( STR_ ) ;", "writer . println ( line ) ; } }", "finally {", "if ( reader != null ) {", "reader . close ( ) ; } } }"]}
{"ids": "69617", "code": ["public static < T > Range < T > value Of ( String s , Class < T > clazz ) {", "char lbm = s . char At ( NUM_ ) ;", "if ( lbm != STR_ && lbm != STR_ ) throw new Illegal Argument Exception ( s ) ;", "char ubm = s . char At ( s . length ( ) - NUM_ ) ;", "if ( ubm != STR_ && ubm != STR_ ) throw new Illegal Argument Exception ( s ) ;", "Bound Type lbt = lbm == STR_ ? Bound Type . CLOSED : Bound Type . OPEN ;", "Bound Type ubt = ubm == STR_ ? Bound Type . CLOSED : Bound Type . OPEN ;", "s = s . substring ( NUM_ , s . length ( ) - NUM_ ) ;", "String [ ] parts = s . split ( STR_ ) ;", "String lbs = parts [ NUM_ ] ;", "String ubs = parts [ NUM_ ] ;", "T lower Bound = lbs . equals ( STR_ ) ? null : bound Value ( lbs , clazz ) ;", "T upper Bound = ubs . equals ( STR_ ) ? null : bound Value ( ubs , clazz ) ;", "return range ( lower Bound , lbt , upper Bound , ubt ) ; }"]}
{"ids": "39231", "code": ["public static Double Vector dchisq ( double x , Double Vector ncp ) {", "int n = ncp . size ( ) ;", "Double Vector d = new Double Vector ( n ) ;", "double xh = Math . sqrt ( x ) ;", "double mean ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "mean = Math . sqrt ( ncp . get ( i ) ) ;", "if ( ncp . get ( i ) == NUM_ ) d . set ( i , dchisq ( x ) ) ;", "else d . set ( i , ( dnorm ( xh - mean ) + dnorm ( - xh - mean ) ) / ( NUM_ * xh ) ) ; }", "return d ; }"]}
{"ids": "74545", "code": ["@ Override public void add Property Change Listener ( Property Change Listener listener ) {", "property Change Support . add Property Change Listener ( listener ) ; }"]}
{"ids": "76655", "code": ["public void remove All Baud Rate Query Callbacks ( ) {", "baud Rate Query Callbacks . clear ( ) ; }"]}
{"ids": "29526", "code": ["public void add ( Abstract Option option ) {", "add ( options . size ( ) , option ) ; }"]}
{"ids": "78420", "code": ["private void load Vertices And Relatives ( ) {", "List < Cn A Tree Element > element List = new Linked List < Cn A Tree Element > ( ) ;", "for ( I Graph Element Loader loader : get Loader List ( ) ) {", "loader . set Cna Tree Element Dao ( get Cna Tree Element Dao ( ) ) ;", "element List . add All ( loader . load Elements ( ) ) ; }", "for ( Cn A Tree Element element : element List ) {", "graph . add Vertex ( element ) ;", "if ( LOG . is Debug Enabled ( ) ) {", "LOG . debug ( STR_ + element . get Title ( ) ) ; }", "uuid Map . put ( element . get Uuid ( ) , element ) ; }", "for ( Cn A Tree Element parent : element List ) {", "Set < Cn A Tree Element > children = parent . get Children ( ) ;", "for ( Cn A Tree Element child : children ) {", "create Parent Child Edge ( parent , child ) ; } } }"]}
{"ids": "76440", "code": ["private boolean has Non Special Attribute ( Collection < String > keys ) {", "for ( String attr : keys ) {", "if ( ! attr . starts With ( STR_ ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "635", "code": ["public static final void shuffle ( double [ ] a , int start , int len , Random r ) {", "for ( int i = start + len ; i > NUM_ ; -- i ) {", "double t = a [ i ] ;", "int j = r . next Int ( i ) ;", "a [ i ] = a [ j ] ;", "a [ j ] = t ; } }"]}
{"ids": "13681", "code": ["public boolean is Parity Correct ( byte [ ] [ ] shards , int first Byte , int byte Count , byte [ ] temp Buffer ) {", "check Buffers And Sizes ( shards , first Byte , byte Count ) ;", "if ( temp Buffer . length < first Byte + byte Count ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "byte [ ] [ ] to Check = new byte [ parity Shard Count ] [ ] ;", "System . arraycopy ( shards , data Shard Count , to Check , NUM_ , parity Shard Count ) ;", "return coding Loop . check Some Shards ( parity Rows , shards , data Shard Count , to Check , parity Shard Count , first Byte , byte Count , temp Buffer ) ; }"]}
{"ids": "43888", "code": ["public static void write Stream ( Input Stream in , File file ) throws IO Exception {", "File Output Stream out = new File Output Stream ( file ) ;", "try {", "transfer ( in , out ) ; }", "finally {", "try {", "out . flush ( ) ; }", "finally {", "out . close ( ) ; } } }"]}
{"ids": "47729", "code": ["public void fire Property Change ( String property Name , byte old Value , byte new Value ) {", "if ( change Support == null || old Value == new Value ) {", "return ; }", "fire Property Change ( property Name , Byte . value Of ( old Value ) , Byte . value Of ( new Value ) ) ; }"]}
{"ids": "54801", "code": ["private int adjust Offset For Unit Tests ( int offset ) {", "if ( System . get Property ( STR_ ) == null ) return offset ;", "else return NUM_ ; }"]}
{"ids": "11193", "code": ["public boolean supports SQL ( ) {", "return false ; }"]}
{"ids": "21900", "code": ["private static Boolean is Valid IPV 4 ( final String ip Address ) {", "boolean status = false ;", "if ( String Utils . is Not Empty ( ip Address ) ) {", "status = Inet Address Utils . is I Pv 4 Address ( ip Address ) ; }", "return status ; }"]}
{"ids": "15957", "code": ["private int decrypt Block With IV ( byte [ ] in , int in Off , byte [ ] out , int out Off ) throws Data Length Exception , Illegal State Exception {", "if ( ( in Off + block Size ) > in . length ) {", "throw new Data Length Exception ( STR_ ) ; }", "if ( ( out Off + block Size ) > out . length ) {", "throw new Data Length Exception ( STR_ ) ; }", "if ( count == NUM_ ) {", "for ( int n = NUM_ ; n < block Size ; n ++ ) {", "FR [ n ] = in [ in Off + n ] ; }", "cipher . process Block ( FR , NUM_ , FRE , NUM_ ) ;", "count += block Size ;", "return NUM_ ; }", "else if ( count == block Size ) {", "System . arraycopy ( in , in Off , tmp , NUM_ , block Size ) ;", "System . arraycopy ( FR , NUM_ , FR , NUM_ , block Size - NUM_ ) ;", "FR [ block Size - NUM_ ] = tmp [ NUM_ ] ;", "FR [ block Size - NUM_ ] = tmp [ NUM_ ] ;", "cipher . process Block ( FR , NUM_ , FRE , NUM_ ) ;", "for ( int n = NUM_ ; n < block Size - NUM_ ; n ++ ) {", "out [ out Off + n ] = encrypt Byte ( tmp [ n + NUM_ ] , n ) ; }", "System . arraycopy ( tmp , NUM_ , FR , NUM_ , block Size - NUM_ ) ;", "count += NUM_ ;", "return block Size - NUM_ ; }", "else if ( count >= block Size + NUM_ ) {", "System . arraycopy ( in , in Off , tmp , NUM_ , block Size ) ;", "out [ out Off + NUM_ ] = encrypt Byte ( tmp [ NUM_ ] , block Size - NUM_ ) ;", "out [ out Off + NUM_ ] = encrypt Byte ( tmp [ NUM_ ] , block Size - NUM_ ) ;", "System . arraycopy ( tmp , NUM_ , FR , block Size - NUM_ , NUM_ ) ;", "cipher . process Block ( FR , NUM_ , FRE , NUM_ ) ;", "for ( int n = NUM_ ; n < block Size - NUM_ ; n ++ ) {", "out [ out Off + n + NUM_ ] = encrypt Byte ( tmp [ n + NUM_ ] , n ) ; }", "System . arraycopy ( tmp , NUM_ , FR , NUM_ , block Size - NUM_ ) ; }", "return block Size ; }"]}
{"ids": "66873", "code": ["public static PTA Bridge v ( ) {", "return v ; }"]}
{"ids": "68167", "code": ["public void register Cache Update Period Change Listener ( final Property Change Listener listener ) {", "cache Update Period Listeners . add ( listener ) ; }"]}
{"ids": "17241", "code": ["public String encode ( ) {", "String Buffer sb = new String Buffer ( ) ;", "encode ( sb ) ;", "return sb . to String ( ) ; }"]}
{"ids": "12089", "code": ["public static Document read Document ( String file Name ) throws SAX Exception , IO Exception {", "Document Builder doc Builder ;", "Document result = null ;", "Document Builder Factory doc Builder Factory = Document Builder Factory . new Instance ( ) ;", "doc Builder Factory . set Ignoring Element Content Whitespace ( true ) ;", "try {", "doc Builder = doc Builder Factory . new Document Builder ( ) ; }", "catch ( Parser Configuration Exception e ) {", "throw new Error ( e ) ; }", "File source File = new File ( file Name ) ;", "result = doc Builder . parse ( source File ) ;", "return result ; }"]}
{"ids": "12918", "code": ["@ Override public double [ ] analyse ( double [ ] a Frame ) {", "if ( a Frame . length != frame Length ) throw new Illegal Argument Exception ( STR_ + frame Length + STR_ + a Frame . length ) ;", "double [ ] real = new double [ fft Size ] ;", "double [ ] imag = new double [ fft Size ] ;", "System . arraycopy ( a Frame , NUM_ , real , NUM_ , a Frame . length ) ;", "FFT . transform ( real , imag , false ) ;", "Math Utils . to Polar Coordinates ( real , imag ) ;", "real = Math Utils . log ( real ) ;", "Arrays . fill ( imag , NUM_ ) ;", "double b = NUM_ ;", "int b Index = ( int ) ( b / frequency Resolution ) ;", "double [ ] inv Real ;", "double [ ] inv Imag ;", "if ( inv Fft Size == fft Size ) {", "inv Real = real ;", "inv Imag = imag ; }", "else {", "inv Real = new double [ inv Fft Size ] ;", "System . arraycopy ( real , NUM_ , inv Real , NUM_ , b Index + NUM_ ) ;", "inv Imag = new double [ inv Fft Size ] ; }", "for ( int i = b Index + NUM_ ; i < inv Fft Size / NUM_ ; i ++ ) {", "inv Real [ i ] = inv Real [ b Index ] ; }", "for ( int i = NUM_ ; i < inv Fft Size / NUM_ ; i ++ ) {", "inv Real [ inv Fft Size - i - NUM_ ] = inv Real [ i ] ; }", "FFT . transform ( inv Real , inv Imag , true ) ;", "return inv Real ; }"]}
{"ids": "56484", "code": ["public Search Source Builder script Field ( String name , Script script ) {", "if ( script Fields == null ) {", "script Fields = new Array List < > ( ) ; }", "script Fields . add ( new Script Field ( name , script ) ) ;", "return this ; }"]}
{"ids": "59815", "code": ["public void fixed Aspect Resize Inner ( Rect F new Inner ) {", "Matrix m = get Rot Matrix ( ) ;", "Matrix m 0 = get Inverse Rot Matrix ( ) ;", "float aspect W = inner . width ( ) ;", "float aspect H = inner . height ( ) ;", "float asp Ratio = aspect W / aspect H ;", "float [ ] corners = Crop Math . get Corners From Rect ( outer ) ;", "m . map Points ( corners ) ;", "float [ ] old Inner Corners = Crop Math . get Corners From Rect ( inner ) ;", "float [ ] new Inner Corners = Crop Math . get Corners From Rect ( new Inner ) ;", "int fixed = - NUM_ ;", "if ( inner . top == new Inner . top ) {", "if ( inner . left == new Inner . left ) fixed = NUM_ ;", "else if ( inner . right == new Inner . right ) fixed = NUM_ ; }", "else if ( inner . bottom == new Inner . bottom ) {", "if ( inner . right == new Inner . right ) fixed = NUM_ ;", "else if ( inner . left == new Inner . left ) fixed = NUM_ ; }", "if ( fixed == - NUM_ ) return ;", "float width So Far = new Inner . width ( ) ;", "int moved = - NUM_ ;", "for ( int i = NUM_ ; i < new Inner Corners . length ; i += NUM_ ) {", "float [ ] c = { new Inner Corners [ i ] , new Inner Corners [ i + NUM_ ] } ;", "float [ ] c 0 = Arrays . copy Of ( c , NUM_ ) ;", "m 0 . map Points ( c 0 ) ;", "if ( ! Crop Math . inclusive Contains ( outer , c 0 [ NUM_ ] , c 0 [ NUM_ ] ) ) {", "moved = i ;", "if ( moved == fixed ) continue ;", "float [ ] l 2 = Crop Math . closest Side ( c , corners ) ;", "float [ ] l 1 = { new Inner Corners [ i ] , new Inner Corners [ i + NUM_ ] , old Inner Corners [ i ] , old Inner Corners [ i + NUM_ ] } ;", "float [ ] p = Geometry Math Utils . line Intersect ( l 1 , l 2 ) ;", "if ( p == null ) {", "p = new float [ NUM_ ] ;", "p [ NUM_ ] = old Inner Corners [ i ] ;", "p [ NUM_ ] = old Inner Corners [ i + NUM_ ] ; }", "float fixed x = old Inner Corners [ fixed ] ;", "float fixed y = old Inner Corners [ fixed + NUM_ ] ;", "float new Width = Math . abs ( fixed x - p [ NUM_ ] ) ;", "float new Height = Math . abs ( fixed y - p [ NUM_ ] ) ;", "new Width = Math . max ( new Width , asp Ratio * new Height ) ;", "if ( new Width < width So Far ) width So Far = new Width ; } }", "float height So Far = width So Far / asp Ratio ;", "Rect F ret = new Rect F ( inner ) ;", "if ( fixed == NUM_ ) {", "ret . right = ret . left + width So Far ;", "ret . bottom = ret . top + height So Far ; }", "else if ( fixed == NUM_ ) {", "ret . left = ret . right - width So Far ;", "ret . bottom = ret . top + height So Far ; }", "else if ( fixed == NUM_ ) {", "ret . left = ret . right - width So Far ;", "ret . top = ret . bottom - height So Far ; }", "else if ( fixed == NUM_ ) {", "ret . right = ret . left + width So Far ;", "ret . top = ret . bottom - height So Far ; }", "float [ ] ret Corners = Crop Math . get Corners From Rect ( ret ) ;", "m 0 . map Points ( ret Corners ) ;", "inner Rotated = ret Corners ;", "reconstrain ( ) ; }"]}
{"ids": "8265", "code": ["public static < T > T with Object Streams ( Socket socket , @ Closure Params ( value = Simple Type . class , options = { STR_ , STR_ } ) Closure < T > closure ) throws IO Exception {", "Input Stream input = socket . get Input Stream ( ) ;", "Output Stream output = socket . get Output Stream ( ) ;", "Object Output Stream oos = new Object Output Stream ( output ) ;", "Object Input Stream ois = new Object Input Stream ( input ) ;", "try {", "T result = closure . call ( new Object [ ] { ois , oos } ) ;", "Input Stream temp 1 = ois ;", "ois = null ;", "temp 1 . close ( ) ;", "temp 1 = input ;", "input = null ;", "temp 1 . close ( ) ;", "Output Stream temp 2 = oos ;", "oos = null ;", "temp 2 . close ( ) ;", "temp 2 = output ;", "output = null ;", "temp 2 . close ( ) ;", "return result ; }", "finally {", "close With Warning ( ois ) ;", "close With Warning ( input ) ;", "close With Warning ( oos ) ;", "close With Warning ( output ) ; } }"]}
{"ids": "75013", "code": ["public J File Data Store Chooser ( Shell parent , int style , final String [ ] extensions ) {", "this ( parent , style , associations ( Arrays . as List ( extensions ) ) ) ; }"]}
{"ids": "82162", "code": ["private void adjust Alignment ( int align , int cur Align ) {", "if ( ( ! FIXED WIDTH ) && ( align != cur Align ) ) {", "if ( cur Line . get Component Count ( ) == NUM_ ) {", "cur Line . set Layout ( new Flow Layout ( cur Align ) ) ; } } }"]}
{"ids": "3109", "code": ["public void remove Listener ( Tracking Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "34915", "code": ["void create Impl ( boolean stream ) throws Socket Exception {", "if ( impl == null ) set Impl ( ) ;", "try {", "impl . create ( stream ) ;", "created = true ; }", "catch ( IO Exception e ) {", "throw new Socket Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "25639", "code": ["public synchronized byte [ ] to Byte Array ( ) {", "int remaining = count ;", "if ( remaining == NUM_ ) {", "return EMPTY BYTE ARRAY ; }", "byte newbuf [ ] = new byte [ remaining ] ;", "int pos = NUM_ ;", "for ( byte [ ] buf : buffers ) {", "int c = Math . min ( buf . length , remaining ) ;", "System . arraycopy ( buf , NUM_ , newbuf , pos , c ) ;", "pos += c ;", "remaining -= c ;", "if ( remaining == NUM_ ) {", "break ; } }", "return newbuf ; }"]}
{"ids": "42873", "code": ["public boolean sh Exp Match ( String str , String shexp ) {", "String Tokenizer tokenizer = new String Tokenizer ( shexp , STR_ ) ;", "int start Pos = NUM_ ;", "while ( tokenizer . has More Tokens ( ) ) {", "String token = tokenizer . next Token ( ) ;", "int temp = str . index Of ( token , start Pos ) ;", "if ( start Pos == NUM_ && ! shexp . starts With ( STR_ ) && temp != NUM_ ) {", "return false ; }", "if ( ! tokenizer . has More Tokens ( ) && ! shexp . ends With ( STR_ ) && ! str . ends With ( token ) ) {", "return false ; }", "if ( temp == - NUM_ ) {", "return false ; }", "else {", "start Pos = temp + token . length ( ) ; } }", "return true ; }"]}
{"ids": "24617", "code": ["public char peek ( ) {", "return is Empty ( ) ? NUM_ : queue . char At ( pos ) ; }"]}
{"ids": "65490", "code": ["private String [ ] parent Key ( String name , int idx ) {", "String [ ] parts = name . split ( STR_ ) ;", "if ( idx > parts . length ) return null ;", "String parent = STR_ ;", "String key = null ;", "if ( idx < parts . length ) key = parts [ idx ] ;", "for ( int i = NUM_ ; i < idx ; i ++ ) {", "parent = parent . length ( ) > NUM_ ? parent + STR_ + parts [ i ] : parts [ i ] ; }", "return new String [ ] { parent , key } ; }"]}
{"ids": "12668", "code": ["public Diphone Unit Database ( URL url , boolean is Binary ) throws IO Exception {", "if ( ! use Indexing || use Cache ) {", "diphone Map = new Linked Hash Map ( ) ; }", "Input Stream is = Utilities . get Input Stream ( url ) ;", "index Name = get Index Name ( url . to String ( ) ) ;", "if ( is Binary ) {", "load Binary ( is ) ; }", "else {", "load Text ( is ) ; }", "is . close ( ) ;", "sample Info = new Sample Info ( sample Rate , num Channels , residual Fold , lpc Min , lpc Range , NUM_ ) ; }"]}
{"ids": "82913", "code": ["public static List < Notification Dto > transform To Dto ( List < Notification > notifications ) {", "if ( notifications == null ) {", "throw new Web Application Exception ( STR_ , Status . INTERNAL SERVER ERROR ) ; }", "List < Notification Dto > result = new Array List < Notification Dto > ( ) ;", "for ( Notification notification : notifications ) {", "result . add ( transform To Dto ( notification ) ) ; }", "return result ; }"]}
{"ids": "51161", "code": ["public void write To ( final Packet Output Stream os ) {", "os . write ( Parameter Writer . QUOTE ) ;", "os . write ( date To Byte ( ) ) ;", "Parameter Writer . format Microseconds ( os , ts . get Nanos ( ) / NUM_ , fractional Seconds ) ;", "os . write ( Parameter Writer . QUOTE ) ; }"]}
{"ids": "30895", "code": ["public long skip ( long n ) throws IO Exception , Log Exception {", "if ( length < n ) bad Read ( ( int ) n ) ;", "n = in . skip ( n ) ;", "length -= ( int ) n ;", "return n ; }"]}
{"ids": "22523", "code": ["public Driver Task discover Storage Provider ( Storage Provider storage Provider , List < Storage System > storage Systems ) {", "Dell SC Driver Task task = new Dell SC Driver Task ( STR_ ) ;", "try {", "LOG . info ( STR_ , storage Provider . get Provider Host ( ) , storage Provider . get Port Number ( ) , storage Provider . get Username ( ) ) ;", "Storage Center API api = connection Manager . get Connection ( storage Provider . get Provider Host ( ) , storage Provider . get Port Number ( ) , storage Provider . get Username ( ) , storage Provider . get Password ( ) , true ) ;", "LOG . info ( STR_ , storage Provider . get Provider Host ( ) , storage Provider . get Username ( ) ) ;", "storage Provider . set Access Status ( Access Status . READ WRITE ) ;", "storage Provider . set Manufacturer ( STR_ ) ;", "storage Provider . set Provider Version ( driver Version ) ;", "storage Provider . set Is Supported Version ( true ) ;", "Em Data Collector em = api . get DSM Info ( ) ;", "if ( em != null ) {", "LOG . info ( STR_ , em . type , em . version , em . java Version ) ;", "storage Provider . set Provider Version ( em . version ) ; }", "Storage Center [ ] scs = api . get Storage Center Info ( ) ;", "for ( Storage Center sc : scs ) {", "Storage System storage System = util . get Storage System From Storage Center ( api , sc , null ) ;", "storage System . set System Type ( driver Name ) ;", "storage Systems . add ( storage System ) ; }", "task . set Status ( Driver Task . Task Status . READY ) ; }", "catch ( Exception e ) {", "String msg = String . format ( STR_ , e ) ;", "LOG . error ( msg ) ;", "task . set Failed ( msg ) ; }", "return task ; }"]}
{"ids": "36628", "code": ["public void zoom In ( ) {", "zoom In ( null ) ; }"]}
{"ids": "81842", "code": ["public void remove Response Code Listener ( Action Listener a ) {", "response Code Listeners . remove Element ( a ) ; }"]}
{"ids": "6607", "code": ["public Input Field Dialog ( final String CAPTION KEY , final String LABEL KEY ) {", "String caption = I 18 n . tr ( CAPTION KEY ) ;", "Frame frame = GUI Mediator . get App Frame ( ) ;", "dialog = new J Dialog ( frame , caption , true ) ;", "dialog . set Size ( NUM_ , NUM_ ) ;", "Labeled Component component = new Labeled Component ( LABEL KEY , TEXT FIELD , Labeled Component . LEFT GLUE ) ;", "String [ ] button Label Keys = { I 18 n . tr ( STR_ ) , I 18 n . tr ( STR_ ) } ;", "String [ ] button Label Tips = { I 18 n . tr ( STR_ ) , I 18 n . tr ( STR_ ) } ;", "Action Listener [ ] button Listeners = { new OK Listener ( ) , new Cancel Listener ( ) } ;", "Button Row buttons = new Button Row ( button Label Keys , button Label Tips , button Listeners , Button Row . X AXIS , Button Row . LEFT GLUE ) ;", "Container content Pane = dialog . get Content Pane ( ) ;", "Box Panel component Panel = new Box Panel ( Box Panel . Y AXIS ) ;", "component Panel . add ( Box . create Vertical Glue ( ) ) ;", "component Panel . add ( component . get Component ( ) ) ;", "component Panel . add ( Box . create Vertical Glue ( ) ) ;", "MAIN PANEL . add ( component Panel ) ;", "MAIN PANEL . add ( Box . create Vertical Glue ( ) ) ;", "MAIN PANEL . add ( buttons ) ;", "content Pane . add ( MAIN PANEL ) ; }"]}
{"ids": "83027", "code": ["public Entity Load Info create ( Entity entity ) {", "return create ( entity , null ) ; }"]}
{"ids": "11456", "code": ["public Float ( Point 2 D pt 2 D ) {", "set Lat Lon ( pt 2 D . get Y ( ) , pt 2 D . get X ( ) , false ) ; }"]}
{"ids": "81466", "code": ["public final static boolean is Potential Zip Archive ( String name ) {", "int last Dot = name . last Index Of ( STR_ ) ;", "if ( last Dot == - NUM_ ) return false ;", "if ( name . last Index Of ( File . separator Char ) > last Dot ) return false ;", "int length = name . length ( ) ;", "int extension Length = length - last Dot - NUM_ ;", "if ( extension Length == EXTENSION java . length ( ) ) {", "for ( int i = extension Length - NUM_ ; i >= NUM_ ; i -- ) {", "if ( Character . to Lower Case ( name . char At ( length - extension Length + i ) ) != EXTENSION java . char At ( i ) ) {", "break ; }", "if ( i == NUM_ ) {", "return false ; } } }", "if ( extension Length == EXTENSION class . length ( ) ) {", "for ( int i = extension Length - NUM_ ; i >= NUM_ ; i -- ) {", "if ( Character . to Lower Case ( name . char At ( length - extension Length + i ) ) != EXTENSION class . char At ( i ) ) {", "return true ; } }", "return false ; }", "return true ; }"]}
{"ids": "23197", "code": ["public void open ( ) throws IO Exception {", "connection = new Datagram Socket ( ) ;", "connection . set So Timeout ( timeout ) ; }"]}
{"ids": "75980", "code": ["@ Override protected int size Of ( String key , Bitmap Drawable value ) {", "final int bitmap Size = get Bitmap Size ( value ) / NUM_ ;", "return bitmap Size == NUM_ ? NUM_ : bitmap Size ; }"]}
{"ids": "47255", "code": ["default void for Each Remaining ( Int Consumer action ) {", "Objects . require Non Null ( action ) ;", "while ( has Next ( ) ) action . accept ( next Int ( ) ) ; }"]}
{"ids": "27205", "code": ["private boolean is CI ( ) {", "return Objects . equals ( System . getenv ( STR_ ) , STR_ ) ; }"]}
{"ids": "30016", "code": ["public Dock Node ( Node contents , String title ) {", "this ( contents , title , null ) ; }"]}
{"ids": "7974", "code": ["public void test 2033092 ( ) {", "Relative Date Format rdf = new Relative Date Format ( ) ;", "rdf . set Show Zero Days ( false ) ;", "rdf . set Show Zero Hours ( false ) ;", "rdf . set Minute Suffix ( STR_ ) ;", "rdf . set Hour Suffix ( STR_ ) ;", "rdf . set Second Suffix ( STR_ ) ;", "Decimal Format hours Formatter = new Decimal Format ( ) ;", "hours Formatter . set Maximum Fraction Digits ( NUM_ ) ;", "hours Formatter . set Maximum Integer Digits ( NUM_ ) ;", "hours Formatter . set Minimum Integer Digits ( NUM_ ) ;", "rdf . set Hour Formatter ( hours Formatter ) ;", "Decimal Format mins Formatter = new Decimal Format ( ) ;", "mins Formatter . set Maximum Fraction Digits ( NUM_ ) ;", "mins Formatter . set Maximum Integer Digits ( NUM_ ) ;", "mins Formatter . set Minimum Integer Digits ( NUM_ ) ;", "rdf . set Minute Formatter ( mins Formatter ) ;", "Decimal Format seconds Formatter = new Decimal Format ( ) ;", "seconds Formatter . set Maximum Fraction Digits ( NUM_ ) ;", "seconds Formatter . set Maximum Integer Digits ( NUM_ ) ;", "seconds Formatter . set Minimum Integer Digits ( NUM_ ) ;", "rdf . set Second Formatter ( seconds Formatter ) ;", "String s = rdf . format ( new Date ( NUM_ * NUM_ * NUM_ * NUM_ + NUM_ ) ) ;", "assert Equals ( STR_ , s ) ; }"]}
{"ids": "6128", "code": ["public static int read Single Byte ( Input Stream in ) throws IO Exception {", "byte [ ] buffer = new byte [ NUM_ ] ;", "int result = in . read ( buffer , NUM_ , NUM_ ) ;", "return ( result != - NUM_ ) ? buffer [ NUM_ ] & NUM_ : - NUM_ ; }"]}
{"ids": "131", "code": ["public static long parse Id ( Uri content Uri ) {", "String last = content Uri . get Last Path Segment ( ) ;", "return last == null ? - NUM_ : Long . parse Long ( last ) ; }"]}
{"ids": "57295", "code": ["public void disable VM ( String hostname , long duration Millis ) throws Illegal State Exception {", "logger . info ( STR_ + hostname + STR_ + duration Millis + STR_ ) ;", "assignable V Ms . disable Until ( hostname , System . current Time Millis ( ) + duration Millis ) ; }"]}
{"ids": "6110", "code": ["protected final void end Of Input ( ) throws IO Exception {", "if ( cache Request != null ) {", "cache Body . close ( ) ; }", "http Engine . release ( false ) ; }"]}
{"ids": "45788", "code": ["public int left ( ) {", "return data . length ( ) - pos ; }"]}
{"ids": "35199", "code": ["public Feature Set combine ( final Feature Set other ) {", "final Set < Feature > enabled = new Hash Set < > ( this . enabled ) ;", "enabled . add All ( other . enabled ) ;", "final Set < Feature > disabled = new Hash Set < > ( this . disabled ) ;", "disabled . add All ( other . disabled ) ;", "return new Feature Set ( enabled , disabled ) ; }"]}
{"ids": "13603", "code": ["public void remove Interval ( final Batch Writer writer , final Temporal Interval interval , final Statement statement ) throws Mutations Rejected Exception {", "final Text cf = new Text ( Statement Serializer . write Context ( statement ) ) ;", "final Text cq Begin = new Text ( Key Parts . CQ BEGIN ) ;", "final Text cq End = new Text ( Key Parts . CQ END ) ;", "Text key Text = new Text ( interval . get As Key Beginning ( ) ) ;", "Key Parts . append Uniqueness ( statement , key Text ) ;", "Mutation m = new Mutation ( key Text ) ;", "m . put Delete ( cf , cq Begin ) ;", "writer . add Mutation ( m ) ;", "key Text = new Text ( interval . get As Key End ( ) ) ;", "Key Parts . append Uniqueness ( statement , key Text ) ;", "m = new Mutation ( key Text ) ;", "m . put Delete ( cf , cq End ) ;", "writer . add Mutation ( m ) ; }"]}
{"ids": "59530", "code": ["public static final String remove Data Folder Path ( String full Path ) {", "File sd Card = Environment . get External Storage Directory ( ) ;", "String data Folder Path = sd Card . get Absolute Path ( ) + STR_ + Main App . get Data Folder ( ) + STR_ ;", "if ( full Path . index Of ( data Folder Path ) == NUM_ ) {", "return full Path . substring ( data Folder Path . length ( ) ) ; }", "return full Path ; }"]}
{"ids": "61401", "code": ["protected Character is WFXML Char ( String chardata ) {", "Character ref Invalid Char ;", "if ( chardata == null || ( chardata . length ( ) == NUM_ ) ) {", "return null ; }", "char [ ] dataarray = chardata . to Char Array ( ) ;", "int datalength = dataarray . length ;", "if ( f Is XML Version 11 ) {", "int i = NUM_ ;", "while ( i < datalength ) {", "if ( XML 11 Char . is XML 11 Invalid ( dataarray [ i ++ ] ) ) {", "char ch = dataarray [ i - NUM_ ] ;", "if ( XML Char . is High Surrogate ( ch ) && i < datalength ) {", "char ch 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( ch 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( ch , ch 2 ) ) ) {", "continue ; } }", "ref Invalid Char = new Character ( ch ) ;", "return ref Invalid Char ; } } }", "else {", "int i = NUM_ ;", "while ( i < datalength ) {", "if ( XML Char . is Invalid ( dataarray [ i ++ ] ) ) {", "char ch = dataarray [ i - NUM_ ] ;", "if ( XML Char . is High Surrogate ( ch ) && i < datalength ) {", "char ch 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( ch 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( ch , ch 2 ) ) ) {", "continue ; } }", "ref Invalid Char = new Character ( ch ) ;", "return ref Invalid Char ; } } }", "return null ; }"]}
{"ids": "56581", "code": ["default Completable Future < Optional < R > > match Async ( final Executor executor , final T value ) {", "return Completable Future . supply Async ( null , executor ) ; }"]}
{"ids": "11805", "code": ["public static void main ( String [ ] args ) throws Format Exception {", "Debug . init ( ) ;", "if ( args . length == NUM_ ) {", "Debug . output ( STR_ ) ;", "System . exit ( NUM_ ) ; }", "for ( int argsi = NUM_ ; argsi < args . length ; argsi ++ ) {", "rootpath = args [ argsi ] ;", "Library Selection Table lst = new Library Selection Table ( rootpath ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + rootpath ) ;", "Debug . output ( STR_ + lst . get Database Name ( ) ) ; }", "println ( STR_ ) ;", "println ( STR_ + rootpath ) ;", "println ( STR_ + lst . get Database Description ( ) ) ;", "List < String > libraries = lst . get Library Names ( ) ;", "if ( Debug . debugging ( STR_ ) ) {", "print ( STR_ ) ;", "for ( String library Name : libraries ) {", "print ( library Name , STR_ ) ; }", "println ( ) ;", "println ( ) ; }", "for ( String library Name : libraries ) {", "String prefix = lst . get Database Name ( ) + STR_ + library Name ;", "println ( STR_ + prefix ) ;", "print Library ( prefix , lst . get CAT ( library Name ) ) ;", "println ( ) ; } } }"]}
{"ids": "67388", "code": ["private static String wildcard To Regex ( String pattern ) {", "return STR_ + String Utils . replace Each ( escape Regexp ( pattern ) , new String [ ] { STR_ , STR_ } , new String [ ] { STR_ , STR_ } ) + STR_ ; }"]}
{"ids": "50035", "code": ["protected void clear Cache ( ) {", "if ( cache != null ) {", "cache . clear ( ) ;", "cache = null ; } }"]}
{"ids": "66559", "code": ["public String sql AD get Custom Entity Types ( String vendor Name , String catalog Name , String schema Name ) {", "String table Name = STR_ ;", "Array List < String > column Names = new Array List < String > ( ) ;", "column Names . add ( STR_ ) ;", "Array List < String > alias Names = new Array List < String > ( ) ;", "alias Names . add ( STR_ ) ;", "Array List < String > conditions = new Array List < String > ( ) ;", "conditions . add ( STR_ ) ;", "Array List < String > sort Columns = new Array List < String > ( ) ;", "sort Columns . add ( STR_ ) ;", "return sql select ( vendor Name , catalog Name , schema Name , table Name , null , column Names , alias Names , conditions , sort Columns , false ) ; }"]}
{"ids": "71786", "code": ["public void paint Component ( Graphics g ) {", "int x = PADDING ;", "int y = PADDING ;", "g . draw Image ( picture , x , y , scale W , scale H , null ) ;", "x += scale W + PADDING ;", "g . draw Image ( picture , x , y , x + scale W , y + scale H , NUM_ , NUM_ , picture . get Width ( ) , picture . get Height ( ) , null ) ;", "x += scale W + PADDING ;", "Graphics 2 D g 2 d = ( Graphics 2 D ) g . create ( ) ;", "g 2 d . translate ( x , y ) ;", "g 2 d . scale ( SCALE FACTOR , SCALE FACTOR ) ;", "g 2 d . draw Image ( picture , NUM_ , NUM_ , null ) ;", "g 2 d . dispose ( ) ;", "x += scale W + PADDING ;", "g 2 d = ( Graphics 2 D ) g . create ( ) ;", "Affine Transform at = new Affine Transform ( ) ;", "at . translate ( x , y ) ;", "at . scale ( SCALE FACTOR , SCALE FACTOR ) ;", "g 2 d . draw Image ( picture , at , null ) ;", "g 2 d . dispose ( ) ;", "x += scale W + PADDING ;", "Image scaled Img = picture . get Scaled Instance ( scale W , scale H , Image . SCALE DEFAULT ) ;", "g . draw Image ( scaled Img , x , y , null ) ; }"]}
{"ids": "14600", "code": ["public int hash Code ( ) {", "return id Type . hash Code ( ) ; }"]}
{"ids": "7007", "code": ["private static void backup Audio Config ( ) {", "if ( null != m Restore Audio Config Timer ) {", "m Restore Audio Config Timer . cancel ( ) ;", "m Restore Audio Config Timer = null ;", "m Restore Audio Config Timer Mask = null ; }", "else if ( null == m Audio Mode ) {", "Audio Manager audio Manager = get Audio Manager ( ) ;", "m Audio Mode = audio Manager . get Mode ( ) ;", "m Is Speaker On = audio Manager . is Speakerphone On ( ) ; } }"]}
{"ids": "23308", "code": ["public static String build Imdn Delivery Report ( String msg Id , Imdn Document . Delivery Status status , long timestamp ) {", "String method ;", "switch ( status ) {", "case DISPLAYED :", "method = STR_ ;", "break ;", "case DELIVERED :", "method = STR_ ;", "break ;", "default :", "method = STR_ ;", "break ; }", "return STR_ + UTF 8 STR + STR_ + CRLF + STR_ + CRLF + STR_ + msg Id + STR_ + CRLF + STR_ + Date Utils . encode Date ( timestamp ) + STR_ + CRLF + STR_ + method + STR_ + status + STR_ + method + STR_ + CRLF + STR_ ; }"]}
{"ids": "55318", "code": ["private Speedruns Live Request ( ) {", "super ( URL ) ; }"]}
{"ids": "59813", "code": ["public static Bitmap decode Resource With Backouts ( Resources res , Bitmap Factory . Options options , int id ) {", "boolean no Bitmap = true ;", "int num tries = NUM_ ;", "if ( options . in Sample Size < NUM_ ) {", "options . in Sample Size = NUM_ ; }", "Bitmap bmap = null ;", "while ( no Bitmap ) {", "try {", "bmap = Bitmap Factory . decode Resource ( res , id , options ) ;", "no Bitmap = false ; }", "catch ( java . lang . Out Of Memory Error e ) {", "if ( ++ num tries >= BITMAP LOAD BACKOUT ATTEMPTS ) {", "throw e ; }", "bmap = null ;", "System . gc ( ) ;", "options . in Sample Size *= NUM_ ; } }", "return bmap ; }"]}
{"ids": "26519", "code": ["public void read Data File ( String content ) throws Data File Exception {", "if ( content == null || content . length ( ) <= NUM_ ) throw new Illegal State Exception ( STR_ ) ;", "Byte Array Input Stream bis = new Byte Array Input Stream ( content . get Bytes ( ) ) ;", "read Data File ( bis , null ) ; }"]}
{"ids": "49147", "code": ["protected Object lazily Load Desktop Property ( String name ) {", "if ( name . starts With ( STR_ ) ) {", "return lazily Load GTK Icon ( name ) ; }", "return super . lazily Load Desktop Property ( name ) ; }"]}
{"ids": "67778", "code": ["public O Auth Rsa Sha 1 Signer ( String private Key String ) throws O Auth Exception {", "if ( private Key String == null ) {", "throw new O Auth Exception ( STR_ ) ; }", "else if ( private Key String . length ( ) == NUM_ ) {", "throw new O Auth Exception ( STR_ ) ; }", "try {", "set Private Key ( Rsa Sha 1 Private Key Helper . get Private Key ( private Key String ) ) ; }", "catch ( Base 64 Decoder Exception e ) {", "throw new O Auth Exception ( STR_ , e ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new O Auth Exception ( STR_ , e ) ; }", "catch ( Invalid Key Spec Exception e ) {", "throw new O Auth Exception ( STR_ , e ) ; } }"]}
{"ids": "21964", "code": ["private Map < String , Volume > group Volumes By Replication Group ( List < Volume > volume List ) {", "Map < String , Volume > rep Group To Volume Map = new Hash Map < String , Volume > ( ) ;", "for ( Volume volume : volume List ) {", "String rep Group Name = volume . get Replication Group Instance ( ) ;", "if ( volume . is V Plex Volume ( db Client ) ) {", "Volume backed Vol = V Plex Util . get VPLEX Backend Volume ( volume , true , db Client ) ;", "if ( backed Vol != null ) {", "rep Group Name = backed Vol . get Replication Group Instance ( ) ; } }", "rep Group To Volume Map . put ( rep Group Name , volume ) ; }", "return rep Group To Volume Map ; }"]}
{"ids": "66653", "code": ["public Default File Filter ( String extension , String description ) {", "ext = extension . to Lower Case ( ) ;", "desc = description ; }"]}
{"ids": "72136", "code": ["public void append Cell ( boolean value ) {", "append Cell ( String . value Of ( value ) ) ; }"]}
{"ids": "7365", "code": ["public String name ( ) {", "return System . get Property ( STR_ ) ; }"]}
{"ids": "17786", "code": ["protected void add URL ( URL url ) {", "try {", "original Urls . add ( url ) ;", "search List . add ( create Search URL ( url ) ) ; }", "catch ( Malformed URL Exception e ) { } }"]}
{"ids": "37655", "code": ["public void init Structure ( ) throws Exception {", "int n Attribute = NUM_ ;", "for ( int i Order = NUM_ ; i Order < m Instances . num Attributes ( ) ; i Order ++ ) {", "if ( n Attribute == m Instances . class Index ( ) ) {", "n Attribute ++ ; } }", "m Parent Sets = new Parent Set [ m Instances . num Attributes ( ) ] ;", "for ( int i Attribute = NUM_ ; i Attribute < m Instances . num Attributes ( ) ; i Attribute ++ ) {", "m Parent Sets [ i Attribute ] = new Parent Set ( m Instances . num Attributes ( ) ) ; } }"]}
{"ids": "1861", "code": ["@ Override public synchronized Completable Future < Void > disconnect ( ) {", "close Future = new Completable Future < > ( ) ;", "if ( ! consumers . is Empty ( ) ) {", "consumers . for Each ( null ) ;", "if ( have Pending Read && cursor . cancel Pending Read Request ( ) ) {", "have Pending Read = false ; } }", "else {", "close Future . complete ( null ) ; }", "return close Future ; }"]}
{"ids": "51963", "code": ["public static String read Ascii Line ( Input Stream in ) throws IO Exception {", "String Builder result = new String Builder ( NUM_ ) ;", "while ( true ) {", "int c = in . read ( ) ;", "if ( c == - NUM_ ) {", "throw new EOF Exception ( ) ; }", "else if ( c == STR_ ) {", "break ; }", "result . append ( ( char ) c ) ; }", "int length = result . length ( ) ;", "if ( length > NUM_ && result . char At ( length - NUM_ ) == STR_ ) {", "result . set Length ( length - NUM_ ) ; }", "return result . to String ( ) ; }"]}
{"ids": "57125", "code": ["protected boolean IP Is Broadcast ( int IP Address ) {", "int inv subnet mask = ~ this . subnet mask ;", "return ( ( IP Address & inv subnet mask ) == inv subnet mask ) ; }"]}
{"ids": "42313", "code": ["public void add Cell Appearances To Work List ( DF Lattice Cell cell ) {", "for ( Enumeration < DF Equation > e = get Equations ( ) ; e . has More Elements ( ) ; ) {", "DF Equation eq = e . next Element ( ) ;", "if ( eq . has Cell ( cell ) ) {", "add To Work List ( eq ) ; } } }"]}
{"ids": "51068", "code": ["public void remove ( Constraint Widget widget ) {", "Element to Unselect = null ;", "for ( Element selection : m Selected Widgets ) {", "if ( selection . widget == widget ) {", "to Unselect = selection ;", "break ; } }", "if ( to Unselect != null ) {", "m Selected Widgets . remove ( to Unselect ) ; }", "selection Has Changed ( ) ; }"]}
{"ids": "37434", "code": ["public static long hex String To Long ( final String hex String ) {", "Preconditions . check Not Null ( hex String , STR_ ) ;", "Preconditions . check Argument ( is Hex String ( hex String ) , String . format ( STR_ , hex String ) ) ;", "if ( ( hex String . length ( ) == NUM_ ) && ( hex String . char At ( NUM_ ) >= NUM_ ) ) {", "final String str Addr 1 = hex String . substring ( NUM_ , hex String . length ( ) - NUM_ ) ;", "final String str Addr 2 = hex String . substring ( hex String . length ( ) - NUM_ ) ;", "return ( Long . parse Long ( str Addr 1 , NUM_ ) << NUM_ ) + Long . parse Long ( str Addr 2 , NUM_ ) ; }", "return Long . parse Long ( hex String , NUM_ ) ; }"]}
{"ids": "50847", "code": ["public static boolean contains File ( @ Not Null Source Provider provider , @ Not Null File file ) {", "Collection < File > src Directories = get All Source Folders ( provider ) ;", "if ( files Equal ( provider . get Manifest File ( ) , file ) ) {", "return true ; }", "for ( File container : src Directories ) {", "File parent = container . get Parent File ( ) ;", "if ( parent != null && parent . is Directory ( ) && files Equal ( parent , file ) ) {", "return true ; }", "if ( ! container . exists ( ) ) {", "continue ; }", "if ( is Ancestor ( container , file , false ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "16760", "code": ["public static String check Not Empty ( String string , Object error Message ) {", "if ( Exo Player Library Info . ASSERTIONS ENABLED && Text Utils . is Empty ( string ) ) {", "throw new Illegal Argument Exception ( String . value Of ( error Message ) ) ; }", "return string ; }"]}
{"ids": "2877", "code": ["private SSL Engine Result unwrap ( ) throws SSL Exception {", "if ( app Buffer == null ) {", "app Buffer = Io Buffer . allocate ( in Net Buffer . remaining ( ) ) ; }", "else {", "app Buffer . expand ( in Net Buffer . remaining ( ) ) ; }", "SSL Engine Result res ;", "Status status = null ;", "Handshake Status handshake Status = null ;", "do {", "res = ssl Engine . unwrap ( in Net Buffer . buf ( ) , app Buffer . buf ( ) ) ;", "status = res . get Status ( ) ;", "handshake Status = res . get Handshake Status ( ) ;", "if ( status == SSL Engine Result . Status . BUFFER OVERFLOW ) {", "app Buffer . capacity ( app Buffer . capacity ( ) << NUM_ ) ;", "app Buffer . limit ( app Buffer . capacity ( ) ) ;", "continue ; } }", "while ( ( ( status == SSL Engine Result . Status . OK ) || ( status == SSL Engine Result . Status . BUFFER OVERFLOW ) ) && ( ( handshake Status == SSL Engine Result . Handshake Status . NOT HANDSHAKING ) || ( handshake Status == SSL Engine Result . Handshake Status . NEED UNWRAP ) ) ) ;", "return res ; }"]}
{"ids": "28849", "code": ["public Certificate request Certificate ( byte [ ] csr ) throws Acme Exception {", "return request Certificate ( csr , null , null ) ; }"]}
{"ids": "78764", "code": ["public void clear ( ) {", "m Strings . clear ( ) ;", "notify Data Set Changed ( ) ; }"]}
{"ids": "31786", "code": ["@ Suppress Warnings ( { STR_ } ) private static Grid Uri Deployment File Processor Result process With Descriptor File ( Grid Uri Deployment Spring Document doc , File file , String uri , Ignite Logger log ) throws Ignite Spi Exception {", "Class Loader cls Ldr = Grid Uri Deployment Class Loader Factory . create ( U . grid Class Loader ( ) , file , log ) ;", "List < Class < ? extends Compute Task < ? , ? > > > tasks = doc . get Tasks ( cls Ldr ) ;", "List < Class < ? extends Compute Task < ? , ? > > > valid Tasks = null ;", "if ( ! F . is Empty ( tasks ) ) {", "valid Tasks = new Array List < > ( ) ;", "for ( Class < ? extends Compute Task < ? , ? > > task : tasks ) {", "if ( ! is Allowed Task Class ( task ) ) {", "U . warn ( log , STR_ + STR_ + task + STR_ ) ; }", "else {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + task . get Name ( ) ) ;", "valid Tasks . add ( task ) ; } } }", "Grid Uri Deployment File Processor Result res = new Grid Uri Deployment File Processor Result ( ) ;", "res . set File ( file ) ;", "res . set Class Loader ( cls Ldr ) ;", "if ( ! F . is Empty ( valid Tasks ) ) res . set Task Classes ( valid Tasks ) ;", "else if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + file . get Absolute Path ( ) + STR_ + U . hide Password ( uri ) + STR_ ) ;", "return res ; }"]}
{"ids": "43028", "code": ["public void truncate ( ) {", "calculate Ideal Point ( ) ;", "translate By Ideal Point ( ) ;", "List < List < Solution > > members = associate To Reference Point ( this ) ;", "clear ( ) ;", "for ( int i = NUM_ ; i < members . size ( ) ; i ++ ) {", "List < Solution > associations = members . get ( i ) ;", "if ( associations . size ( ) > NUM_ ) {", "add ( select ( associations , i ) ) ; } } }"]}
{"ids": "15658", "code": ["protected void on Downloading ( ) {", "if ( Log Configuration . logging Is Enabled ( ) ) {", "logger . log ( Level . INFO , messages . downloading Resources ( ) ) ; }", "updating = true ;", "fire Application Cache Event ( Cache Event . on Downloading ) ; }"]}
{"ids": "69957", "code": ["protected synchronized void add Transition Listener ( Hashtable < Tx State , Hashtable < Tx State , Set < Event Listener > > > listeners , Event Listener lstnr , Tx State from , Tx State to ) {", "Hashtable < Tx State , Set < Event Listener > > lstnrs = listeners . get ( from ) ;", "if ( lstnrs == null ) lstnrs = new Hashtable < Tx State , Set < Event Listener > > ( ) ;", "Set < Event Listener > tolstnrs = lstnrs . get ( to ) ;", "if ( tolstnrs == null ) tolstnrs = new Hash Set < Event Listener > ( ) ;", "if ( ! tolstnrs . contains ( lstnr ) ) tolstnrs . add ( lstnr ) ;", "lstnrs . put ( to , tolstnrs ) ;", "listeners . put ( from , lstnrs ) ; }"]}
{"ids": "45347", "code": ["public boolean has Exclusion ( ) {", "return ! m Excluded Classes . is Empty ( ) || ! m Excluded Tests . is Empty ( ) ; }"]}
{"ids": "76506", "code": ["private int ensure Baseline On Grid ( ) {", "float baseline = get Baseline ( ) ;", "float grid Align = baseline % FOUR DIP ;", "if ( grid Align != NUM_ ) {", "extra Top Padding = ( int ) ( FOUR DIP - Math . ceil ( grid Align ) ) ; }", "return extra Top Padding ; }"]}
{"ids": "47340", "code": ["@ Override public void compute ( ) {", "Spliterator < P IN > rs = spliterator , ls ;", "long size Estimate = rs . estimate Size ( ) ;", "long size Threshold = get Target Size ( size Estimate ) ;", "boolean fork Right = false ;", "@ Suppress Warnings ( STR_ ) K task = ( K ) this ;", "Atomic Reference < R > sr = shared Result ;", "R result ;", "while ( ( result = sr . get ( ) ) == null ) {", "if ( task . task Canceled ( ) ) {", "result = task . get Empty Result ( ) ;", "break ; }", "if ( size Estimate <= size Threshold || ( ls = rs . try Split ( ) ) == null ) {", "result = task . do Leaf ( ) ;", "break ; }", "K left Child , right Child , task To Fork ;", "task . left Child = left Child = task . make Child ( ls ) ;", "task . right Child = right Child = task . make Child ( rs ) ;", "task . set Pending Count ( NUM_ ) ;", "if ( fork Right ) {", "fork Right = false ;", "rs = ls ;", "task = left Child ;", "task To Fork = right Child ; }", "else {", "fork Right = true ;", "task = right Child ;", "task To Fork = left Child ; }", "task To Fork . fork ( ) ;", "size Estimate = rs . estimate Size ( ) ; }", "task . set Local Result ( result ) ;", "task . try Complete ( ) ; }"]}
{"ids": "79317", "code": ["public static Map < String , Object > create Content Assoc ( Dispatch Context dctx , Map < String , ? extends Object > rcontext ) {", "Map < String , Object > context = Util Misc . make Map Writable ( rcontext ) ;", "context . put ( STR_ , STR_ ) ;", "List < String > target Operation List = Content Worker . prep Target Operation List ( context , STR_ ) ;", "List < String > content Purpose List = Content Worker . prep Content Purpose List ( context ) ;", "context . put ( STR_ , target Operation List ) ;", "context . put ( STR_ , content Purpose List ) ;", "context . put ( STR_ , null ) ;", "Map < String , Object > result = null ;", "try {", "result = create Content Assoc Method ( dctx , context ) ; }", "catch ( Generic Service Exception e ) {", "return Service Util . return Error ( e . get Message ( ) ) ; }", "catch ( Generic Entity Exception e 2 ) {", "return Service Util . return Error ( e 2 . get Message ( ) ) ; }", "catch ( Exception e 3 ) {", "return Service Util . return Error ( e 3 . get Message ( ) ) ; }", "return result ; }"]}
{"ids": "53490", "code": ["public String format With Locale ( Locale locale , String ... args ) {", "return String . format ( locale , this . content , ( Object [ ] ) args ) ; }"]}
{"ids": "24524", "code": ["private static < T extends Abstract Block Base < T > > T add Path To Linear Scan Order ( T block , List < T > order , Priority Queue < T > worklist , Bit Set visited Blocks ) {", "block . set Linear Scan Number ( order . size ( ) ) ;", "order . add ( block ) ;", "T most Likely Successor = find And Mark Most Likely Successor ( block , visited Blocks ) ;", "enqueue Successors ( block , worklist , visited Blocks ) ;", "if ( most Likely Successor != null ) {", "if ( ! most Likely Successor . is Loop Header ( ) && most Likely Successor . get Predecessor Count ( ) > NUM_ ) {", "double unscheduled Sum = NUM_ ;", "for ( T pred : most Likely Successor . get Predecessors ( ) ) {", "if ( pred . get Linear Scan Number ( ) == - NUM_ ) {", "unscheduled Sum += pred . probability ( ) ; } }", "if ( unscheduled Sum > block . probability ( ) / PENALTY VERSUS UNSCHEDULED ) {", "visited Blocks . clear ( most Likely Successor . get Id ( ) ) ;", "return null ; } }", "return most Likely Successor ; }", "return null ; }"]}
{"ids": "79112", "code": ["private static Dimension create Thumb Dimension ( final Buffered Image image , final int max Width , final int max Height ) {", "Dimension dimension = new Dimension ( ) ;", "if ( image . get Width ( ) >= image . get Height ( ) ) {", "if ( image . get Width ( ) >= max Width ) {", "dimension . width = max Width ;", "dimension . height = Math . round ( ( ( float ) max Width / image . get Width ( ) ) * image . get Height ( ) ) ; }", "else {", "dimension . height = image . get Height ( ) ;", "dimension . width = image . get Width ( ) ; } }", "else {", "if ( image . get Height ( ) >= max Height ) {", "dimension . height = max Height ;", "dimension . width = Math . round ( ( ( ( float ) max Height / image . get Height ( ) ) * image . get Width ( ) ) ) ; }", "else {", "dimension . height = image . get Height ( ) ;", "dimension . width = image . get Width ( ) ; } }", "return dimension ; }"]}
{"ids": "59557", "code": ["private boolean has Current Account Changed ( ) {", "Account account = Account Utils . get Current Own Cloud Account ( this ) ;", "if ( account == null ) {", "return true ; }", "else {", "return ! m Original Current Account . equals ( account . name ) ; } }"]}
{"ids": "77451", "code": ["public int next Clear Bit ( int index ) {", "int i = index > > NUM_ ;", "if ( i >= wlen ) return - NUM_ ;", "int sub Index = index & NUM_ ;", "long word = ~ bits . get ( i ) > > sub Index ;", "if ( word != NUM_ ) {", "return ( i << NUM_ ) + sub Index + Long . number Of Trailing Zeros ( word ) ; }", "while ( ++ i < wlen ) {", "word = ~ bits . get ( i ) ;", "if ( word != NUM_ ) {", "return ( i << NUM_ ) + Long . number Of Trailing Zeros ( word ) ; } }", "return - NUM_ ; }"]}
{"ids": "13646", "code": ["private static synchronized void append Message ( Context c , final String msg ) {", "if ( msg . length ( ) == NUM_ ) return ;", "String out = msg ;", "boolean timestamp = Pref Store . is Timestamp ( c ) ;", "int max Lines = Pref Store . get Max Lines ( c ) ;", "int protocol Size = protocol . size ( ) ;", "if ( protocol Size > NUM_ && last Char != STR_ ) {", "protocol . remove ( protocol Size - NUM_ ) ;", "out = last Line + out ; }", "last Char = out . char At ( out . length ( ) - NUM_ ) ;", "String [ ] lines = out . split ( STR_ ) ;", "for ( int i = NUM_ , l = lines . length ; i < l ; i ++ ) {", "last Line = lines [ i ] ;", "if ( timestamp ) protocol . add ( get Time Stamp ( ) + last Line ) ;", "else protocol . add ( last Line ) ;", "if ( protocol Size + i >= max Lines ) {", "protocol . remove ( NUM_ ) ; } }", "show ( ) ;", "if ( Pref Store . is Logger ( c ) ) write ( c , msg ) ; }"]}
{"ids": "66651", "code": ["public Object [ ] import Cells ( Object [ ] cells , double dx , double dy , Object target , Point location ) {", "if ( target == null && cells . length == NUM_ && location != null ) {", "target = get Cell At ( location . x , location . y ) ;", "if ( target instanceof mx I Cell && cells [ NUM_ ] instanceof mx I Cell ) {", "mx I Cell target Cell = ( mx I Cell ) target ;", "mx I Cell drop Cell = ( mx I Cell ) cells [ NUM_ ] ;", "if ( target Cell . is Vertex ( ) == drop Cell . is Vertex ( ) || target Cell . is Edge ( ) == drop Cell . is Edge ( ) ) {", "mx I Graph Model model = graph . get Model ( ) ;", "model . set Style ( target , model . get Style ( cells [ NUM_ ] ) ) ;", "graph . set Selection Cell ( target ) ;", "return null ; } } }", "return super . import Cells ( cells , dx , dy , target , location ) ; }"]}
{"ids": "55491", "code": ["private void cancel Search ( ) {", "entrant To Search = null ; }"]}
{"ids": "49444", "code": ["public void on Prepared ( Media Player player ) {", "m State = State . PLAYING ;", "update Notification ( String . format ( get String ( R . string . media state playing ) , m File . get File Name ( ) ) ) ;", "if ( m Media Controller != null ) {", "m Media Controller . set Enabled ( true ) ; }", "player . seek To ( m Start Position ) ;", "config And Start Media Player ( ) ;", "if ( ! m Play On Prepared ) {", "process Pause Request ( ) ; }", "if ( m Media Controller != null ) {", "m Media Controller . update Pause Play ( ) ; } }"]}
{"ids": "63477", "code": ["public static Result Set polar 2 Cartesian ( Double r , Double alpha ) {", "Simple Result Set rs = new Simple Result Set ( ) ;", "rs . add Column ( STR_ , Types . DOUBLE , NUM_ , NUM_ ) ;", "rs . add Column ( STR_ , Types . DOUBLE , NUM_ , NUM_ ) ;", "if ( r != null && alpha != null ) {", "double x = r . double Value ( ) * Math . cos ( alpha . double Value ( ) ) ;", "double y = r . double Value ( ) * Math . sin ( alpha . double Value ( ) ) ;", "rs . add Row ( x , y ) ; }", "return rs ; }"]}
{"ids": "2271", "code": ["public void thread Fail ( String reason ) {", "try {", "fail ( reason ) ; }", "catch ( Assertion Failed Error t ) {", "thread Record Failure ( t ) ;", "throw t ; } }"]}
{"ids": "35509", "code": ["@ Override public void connection Lost ( Throwable cause ) {", "on Disconnect ( false ) ; }"]}
{"ids": "16929", "code": ["private boolean is Typed Time Fully Legal ( ) {", "if ( m Is 24 Hour Mode ) {", "int [ ] values = get Entered Time ( null ) ;", "return ( values [ NUM_ ] >= NUM_ && values [ NUM_ ] >= NUM_ && values [ NUM_ ] < NUM_ && values [ NUM_ ] >= NUM_ && values [ NUM_ ] < NUM_ ) ; }", "else {", "return ( m Typed Times . contains ( get Am Or Pm Key Code ( AM ) ) || m Typed Times . contains ( get Am Or Pm Key Code ( PM ) ) ) ; } }"]}
{"ids": "70482", "code": ["public synchronized void clear Annotations ( ) {", "m Annotations . clear ( ) ;", "m String XY . clear ( ) ; }"]}
{"ids": "34107", "code": ["public Table sample ( double proportion ) {", "int table Count = ( int ) Math . round ( row Count ( ) * proportion ) ;", "Selection table 1 Selection = new Bitmap Backed Selection ( ) ;", "int [ ] selected Records = generate Uniform Bitmap ( table Count , row Count ( ) ) ;", "for ( int selected Record : selected Records ) {", "table 1 Selection . add ( selected Record ) ; }", "return select Where ( table 1 Selection ) ; }"]}
{"ids": "40224", "code": ["public static Message Digest new Digest ( ) {", "try {", "return Message Digest . get Instance ( STR_ ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "64068", "code": ["public Container add Child At ( int location , @ Non Null Display Object Display Object ) {", "if ( m Fps != DEFAULT FPS ) {", "Display Object . set Up ( m Fps ) ; }", "m Display List . add ( location , Display Object ) ;", "return this ; }"]}
{"ids": "1962", "code": ["private void add ( Dimension Index index ) {", "flatten . add ( index ) ;", "lookup . put ( index . get Axis ( ) , index ) ; }"]}
{"ids": "23379", "code": ["public static Recipe Petals register Petal Recipe ( Item Stack output , Object ... inputs ) {", "Preconditions . check Argument ( inputs . length <= NUM_ ) ;", "Recipe Petals recipe = new Recipe Petals ( output , inputs ) ;", "petal Recipes . add ( recipe ) ;", "return recipe ; }"]}
{"ids": "9533", "code": ["private void build First Line ( Line Path path , Rect r ) {", "int [ ] range = new int [ ] { - r . left , - r . top , r . right , r . bottom } ;", "int max = - NUM_ ;", "int max Id = NUM_ ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "if ( range [ i ] > max ) {", "max = range [ i ] ;", "max Id = i ; } }", "switch ( max Id ) {", "case NUM_ :", "path . set End Point ( r . left , Utils . next Int ( r . height ( ) ) + r . top ) ;", "break ;", "case NUM_ :", "path . set End Point ( Utils . next Int ( r . width ( ) ) + r . left , r . top ) ;", "break ;", "case NUM_ :", "path . set End Point ( r . right , Utils . next Int ( r . height ( ) ) + r . top ) ;", "break ;", "case NUM_ :", "path . set End Point ( Utils . next Int ( r . width ( ) ) + r . left , r . bottom ) ;", "break ; }", "path . line To End ( ) ; }"]}
{"ids": "6272", "code": ["public static boolean is Extension ( String filename , String extension ) {", "if ( filename == null ) {", "return false ; }", "if ( extension == null || extension . length ( ) == NUM_ ) {", "return index Of Extension ( filename ) == - NUM_ ; }", "String file Ext = get Extension ( filename ) ;", "return file Ext . equals ( extension ) ; }"]}
{"ids": "25838", "code": ["private String [ ] combine Results From Multiple Reads ( String [ ] buffer , String [ ] last Read ) {", "String [ ] t = new String [ buffer . length + last Read . length ] ;", "System . arraycopy ( buffer , NUM_ , t , NUM_ , buffer . length ) ;", "System . arraycopy ( last Read , NUM_ , t , buffer . length , last Read . length ) ;", "return t ; }"]}
{"ids": "83082", "code": ["public double calc Distance ( final double x , final double y ) {", "double distance X ;", "double distance Y ;", "if ( this . min X <= x && x <= this . max X ) {", "distance X = NUM_ ; }", "else {", "distance X = Math . min ( Math . abs ( this . min X - x ) , Math . abs ( this . max X - x ) ) ; }", "if ( this . min Y <= y && y <= this . max Y ) {", "distance Y = NUM_ ; }", "else {", "distance Y = Math . min ( Math . abs ( this . min Y - y ) , Math . abs ( this . max Y - y ) ) ; }", "return Math . sqrt ( distance X * distance X + distance Y * distance Y ) ; }"]}
{"ids": "4202", "code": ["@ Override public Matches Type marshal ( Set < Match > matches ) {", "Set < RPS Blast Match > rps Blast Matches = new Linked Hash Set < RPS Blast Match > ( ) ;", "Set < Hmmer 2 Match > hmmer 2 Matches = new Linked Hash Set < Hmmer 2 Match > ( ) ;", "Set < Hmmer 3 Match > hmmer 3 Matches = new Linked Hash Set < Hmmer 3 Match > ( ) ;", "Set < Super Family Hmmer 3 Match > super Family Hmmer 3 Matches = new Linked Hash Set < Super Family Hmmer 3 Match > ( ) ;", "Set < Finger Prints Match > finger Prints Matches = new Linked Hash Set < Finger Prints Match > ( ) ;", "Set < Blast Pro Dom Match > pro Dom Matches = new Linked Hash Set < Blast Pro Dom Match > ( ) ;", "Set < Pattern Scan Match > pattern Scan Matches = new Linked Hash Set < Pattern Scan Match > ( ) ;", "Set < Profile Scan Match > profile Scan Matches = new Linked Hash Set < Profile Scan Match > ( ) ;", "Set < Phobius Match > phobius Matches = new Linked Hash Set < Phobius Match > ( ) ;", "Set < Coils Match > coils Matches = new Linked Hash Set < Coils Match > ( ) ;", "Set < Panther Match > panther Matches = new Linked Hash Set < Panther Match > ( ) ;", "Set < Signal P Match > signal P Matches = new Linked Hash Set < Signal P Match > ( ) ;", "Set < TMHMM Match > tmhmm P Matches = new Linked Hash Set < TMHMM Match > ( ) ;", "for ( Match m : matches ) {", "if ( m instanceof RPS Blast Match ) {", "rps Blast Matches . add ( ( RPS Blast Match ) m ) ; }", "else if ( m instanceof Hmmer 2 Match ) {", "hmmer 2 Matches . add ( ( Hmmer 2 Match ) m ) ; }", "else if ( m instanceof Hmmer 3 Match ) {", "hmmer 3 Matches . add ( ( Hmmer 3 Match ) m ) ; }", "else if ( m instanceof Super Family Hmmer 3 Match ) {", "super Family Hmmer 3 Matches . add ( ( Super Family Hmmer 3 Match ) m ) ; }", "else if ( m instanceof Finger Prints Match ) {", "finger Prints Matches . add ( ( Finger Prints Match ) m ) ; }", "else if ( m instanceof Blast Pro Dom Match ) {", "pro Dom Matches . add ( ( Blast Pro Dom Match ) m ) ; }", "else if ( m instanceof Pattern Scan Match ) {", "pattern Scan Matches . add ( ( Pattern Scan Match ) m ) ; }", "else if ( m instanceof Profile Scan Match ) {", "profile Scan Matches . add ( ( Profile Scan Match ) m ) ; }", "else if ( m instanceof Phobius Match ) {", "phobius Matches . add ( ( Phobius Match ) m ) ; }", "else if ( m instanceof Coils Match ) {", "coils Matches . add ( ( Coils Match ) m ) ; }", "else if ( m instanceof Panther Match ) {", "panther Matches . add ( ( Panther Match ) m ) ; }", "else if ( m instanceof Signal P Match ) {", "signal P Matches . add ( ( Signal P Match ) m ) ; }", "else if ( m instanceof TMHMM Match ) {", "tmhmm P Matches . add ( ( TMHMM Match ) m ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ + m ) ; } }", "return new Matches Type ( rps Blast Matches , hmmer 2 Matches , hmmer 3 Matches , super Family Hmmer 3 Matches , finger Prints Matches , pro Dom Matches , pattern Scan Matches , profile Scan Matches , phobius Matches , coils Matches , panther Matches , signal P Matches , tmhmm P Matches ) ; }"]}
{"ids": "81671", "code": ["public synchronized void ensure Capacity ( int minimum Capacity ) {", "if ( element Data . length < minimum Capacity ) {", "int next = ( capacity Increment <= NUM_ ? element Data . length : capacity Increment ) + element Data . length ;", "grow ( minimum Capacity > next ? minimum Capacity : next ) ; } }"]}
{"ids": "77449", "code": ["public static void reverse ( final char [ ] buffer , final int start , final int len ) {", "if ( len < NUM_ ) return ;", "int end = ( start + len ) - NUM_ ;", "char front High = buffer [ start ] ;", "char end Low = buffer [ end ] ;", "boolean allow Front Sur = true , allow End Sur = true ;", "final int mid = start + ( len > > NUM_ ) ;", "for ( int i = start ; i < mid ; ++ i , -- end ) {", "final char front Low = buffer [ i + NUM_ ] ;", "final char end High = buffer [ end - NUM_ ] ;", "final boolean sur At Front = allow Front Sur && Character . is Surrogate Pair ( front High , front Low ) ;", "if ( sur At Front && ( len < NUM_ ) ) {", "return ; }", "final boolean sur At End = allow End Sur && Character . is Surrogate Pair ( end High , end Low ) ;", "allow Front Sur = allow End Sur = true ;", "if ( sur At Front == sur At End ) {", "if ( sur At Front ) {", "buffer [ end ] = front Low ;", "buffer [ -- end ] = front High ;", "buffer [ i ] = end High ;", "buffer [ ++ i ] = end Low ;", "front High = buffer [ i + NUM_ ] ;", "end Low = buffer [ end - NUM_ ] ; }", "else {", "buffer [ end ] = front High ;", "buffer [ i ] = end Low ;", "front High = front Low ;", "end Low = end High ; } }", "else {", "if ( sur At Front ) {", "buffer [ end ] = front Low ;", "buffer [ i ] = end Low ;", "end Low = end High ;", "allow Front Sur = false ; }", "else {", "buffer [ end ] = front High ;", "buffer [ i ] = end High ;", "front High = front Low ;", "allow End Sur = false ; } } }", "if ( ( len & NUM_ ) == NUM_ && ! ( allow Front Sur && allow End Sur ) ) {", "buffer [ end ] = allow Front Sur ? end Low : front High ; } }"]}
{"ids": "15299", "code": ["public void trigger ( Date time ) {", "task List . remove ( time ) ; }"]}
{"ids": "46747", "code": ["Cipher ( Cipher Spi cipher Spi , String transformation ) {", "this . spi = cipher Spi ;", "this . transformation = transformation ;", "this . crypto Perm = Crypto All Permission . INSTANCE ;", "this . lock = null ; }"]}
{"ids": "179", "code": ["private void write Object ( Object Output Stream a Output Stream ) throws IO Exception {", "a Output Stream . default Write Object ( ) ; }"]}
{"ids": "20234", "code": ["@ Override public boolean is Panel Enabled ( ) {", "return multi Option Group Enabled ; }"]}
{"ids": "79593", "code": ["public synchronized void add ( String name , long thread Id ) {", "if ( m Finished ) {", "throw new Illegal State Exception ( STR_ ) ; }", "m Markers . add ( new Marker ( name , thread Id , System Clock . elapsed Realtime ( ) ) ) ; }"]}
{"ids": "341", "code": ["public static String to Unix Newline ( String input ) {", "return input . replace ( STR_ , STR_ ) ; }"]}
{"ids": "80721", "code": ["private void output Indentation ( ) {", "for ( int i = NUM_ ; i < m indent ; i ++ ) {", "m out . print ( m basic Indent ) ; } }"]}
{"ids": "54458", "code": ["protected Bucket < T > create Bucket ( long bucket Key ) {", "return new Bucket < T > ( bucket Key ) ; }"]}
{"ids": "30001", "code": ["public Abstract Site Map parse Site Map ( byte [ ] content , URL url ) throws Unknown Format Exception , IO Exception {", "if ( url == null ) {", "return null ; }", "String filename = Filename Utils . get Name ( url . get Path ( ) ) ;", "String content Type = TIKA . detect ( content , filename ) ;", "return parse Site Map ( content Type , content , url ) ; }"]}
{"ids": "10773", "code": ["public Application Meta Data ( final Deserializer deserializer ) {", "this . app Name = deserializer . read String ( STR_ ) ;", "this . version = deserializer . read String ( STR_ ) ;", "this . certificate Signer = deserializer . read Optional String ( STR_ ) ;", "this . start Time = Time Instant . read From ( deserializer , STR_ ) ;", "this . current Time = Time Instant . read From ( deserializer , STR_ ) ;", "this . time Provider = null ; }"]}
{"ids": "34205", "code": ["public static Constraints Parameters load Policy Data ( Input Stream policy Data Stream ) {", "if ( policy Data Stream != null ) {", "return load ( policy Data Stream ) ; }", "if ( ( default Policy Constraints Location != null ) && ! default Policy Constraints Location . is Empty ( ) ) {", "return load ( default Policy Constraints Location ) ; }", "return null ; }"]}
{"ids": "10676", "code": ["public static void close ( Output Stream out ) {", "try {", "if ( out != null ) {", "out . close ( ) ; } }", "catch ( IO Exception io E ) { } }"]}
{"ids": "20151", "code": ["@ Override public boolean is Cell Editable ( int row , int col ) {", "if ( is Connected To Data Source ) {", "if ( col != FIELD COLUMN ID ) {", "return true ; }", "else {", "return false ; } }", "else {", "return true ; } }"]}
{"ids": "86463", "code": ["private void save Sorted Pom File ( final String sorted Xml ) {", "file Util . save Pom File ( sorted Xml ) ;", "log . info ( STR_ + pom File . get Absolute Path ( ) ) ; }"]}
{"ids": "1902", "code": ["private void append Statements ( Policy Type policy , String prefix ) {", "List < Statement > append Statements = new Statements ( policy , prefix ) ;", "for ( Statement statement : append Statements ) {", "append Statement ( statement ) ; } }"]}
{"ids": "15171", "code": ["private void validate TOTP Parameters ( ) throws Auth Login Exception {", "String Builder error Messages = new String Builder ( ) ;", "if ( String Utils . is Empty ( login Time Attr Name ) ) {", "error Messages . append ( STR_ ) ; }", "if ( clock Drift Check Enabled && String Utils . is Empty ( observed Clock Drift Attr Name ) ) {", "error Messages . append ( STR_ ) ; }", "if ( totp Time Step <= NUM_ ) {", "error Messages . append ( STR_ + totp Time Step + STR_ ) ; }", "if ( totp Steps In Window < NUM_ ) {", "error Messages . append ( STR_ + totp Steps In Window ) ; }", "if ( error Messages . length ( ) > NUM_ ) {", "debug . error ( STR_ + error Messages . to String ( ) ) ;", "throw new Auth Login Exception ( am Auth OATH , STR_ , null ) ; } }"]}
{"ids": "34128", "code": ["public static String remove Uri Fragment ( String url ) {", "if ( url == null || url . length ( ) == NUM_ ) {", "return null ; }", "String [ ] arr = url . split ( STR_ ) ;", "if ( arr . length == NUM_ ) {", "return arr [ NUM_ ] ; }", "else {", "return url ; } }"]}
{"ids": "49831", "code": ["public static void write Receipts To Files ( List < byte [ ] > printed Receipts , String prefix , File base Dir ) {", "try {", "int index = NUM_ ;", "for ( byte [ ] printed Receipt : printed Receipts ) {", "Byte Array Input Stream b In = new Byte Array Input Stream ( printed Receipt ) ;", "File receipt File = new File ( base Dir , prefix + STR_ + index + STR_ ) ;", "Buffered Output Stream buffered Output Stream = new Buffered Output Stream ( new File Output Stream ( receipt File ) ) ;", "IO Utils . copy ( b In , buffered Output Stream ) ;", "buffered Output Stream . close ( ) ;", "index ++ ; } }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "11757", "code": ["public synchronized void render Data For Projection ( Projection proj , java . awt . Graphics g ) {", "fire Status Update ( Layer Status Event . FINISH WORKING ) ;", "if ( proj == null ) {", "logger . info ( STR_ ) ;", "return ; }", "else {", "set Target Index ( proj . get Scale ( ) ) ;", "Layer layer = get Appropriate Layer ( ) ;", "layer . render Data For Projection ( proj , g ) ; } }"]}
{"ids": "8650", "code": ["public void write Exif ( Input Stream jpeg Stream , Output Stream exif Out Stream ) throws IO Exception {", "if ( jpeg Stream == null || exif Out Stream == null ) {", "throw new Illegal Argument Exception ( NULL ARGUMENT STRING ) ; }", "Output Stream s = get Exif Writer Stream ( exif Out Stream ) ;", "do Exif Stream IO ( jpeg Stream , s ) ;", "s . flush ( ) ; }"]}
{"ids": "80311", "code": ["private Container Panel create Container Panel ( ) {", "Container Panel container Panel = new Container Panel ( ) ;", "container Panel . set Animated ( false ) ;", "container Panel . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "character = new Character ( ) ;", "container Panel . add Repaintable ( character ) ;", "inventory = new Slot Window ( STR_ , NUM_ , NUM_ ) ;", "inventory . set Accepted Types ( Entity Map . get Class ( STR_ , null , null ) ) ;", "inventory . set Closeable ( false ) ;", "container Panel . add Repaintable ( inventory ) ;", "keyring = new Key Ring ( ) ;", "keyring . set Accepted Types ( Entity Map . get Class ( STR_ , null , null ) ) ;", "container Panel . add Repaintable ( keyring ) ;", "user Context . add Feature Change Listener ( keyring ) ;", "spells = new Spells ( ) ;", "spells . set Accepted Types ( Entity Map . get Class ( STR_ , null , null ) ) ;", "container Panel . add Repaintable ( spells ) ;", "user Context . add Feature Change Listener ( spells ) ;", "return container Panel ; }"]}
{"ids": "1533", "code": ["public void copy From Geometry 3 D ( Geometry 3 D geom ) {", "this . m Num Indices = geom . get Num Indices ( ) ;", "this . m Num Vertices = geom . get Num Vertices ( ) ;", "this . m Vertex Buffer Info = geom . get Vertex Buffer Info ( ) ;", "this . m Index Buffer Info = geom . get Index Buffer Info ( ) ;", "this . m Tex Coord Buffer Info = geom . get Tex Coord Buffer Info ( ) ;", "this . m Only Short Buffer Supported = geom . are Only Short Buffers Supported ( ) ;", "if ( m Colors == null ) this . m Color Buffer Info = geom . get Color Buffer Info ( ) ;", "this . m Normal Buffer Info = geom . get Normal Buffer Info ( ) ;", "this . m Original Geometry = geom ;", "this . m Has Normals = geom . has Normals ( ) ;", "this . m Has Texture Coordinates = geom . has Texture Coordinates ( ) ; }"]}
{"ids": "38749", "code": ["@ Override public void add Property Change Listener ( Property Change Listener pcl ) {", "m pc Support . add Property Change Listener ( pcl ) ; }"]}
{"ids": "61710", "code": ["public static Intent implicit 2 Explicit Intent ( Context context , Intent implicit Intent ) {", "Package Manager pm = context . get Package Manager ( ) ;", "List < Resolve Info > resolve Info = pm . query Intent Services ( implicit Intent , NUM_ ) ;", "if ( resolve Info == null || resolve Info . size ( ) != NUM_ ) {", "return null ; }", "Resolve Info service Info = resolve Info . get ( NUM_ ) ;", "String package Name = service Info . service Info . package Name ;", "String class Name = service Info . service Info . name ;", "Component Name component = new Component Name ( package Name , class Name ) ;", "Intent explicit Intent = new Intent ( implicit Intent ) ;", "explicit Intent . set Component ( component ) ;", "return explicit Intent ; }"]}
{"ids": "2361", "code": ["private synchronized void garbage Collect Peer ( Peer peer ) {", "log . debug ( STR_ + peer ) ;", "m Current Peers . remove ( peer ) ; }"]}
{"ids": "78571", "code": ["public void reset ( ) {", "synchronized ( this ) {", "queue . clear ( ) ;", "set Bridge Mode ( - NUM_ ) ; } }"]}
{"ids": "35023", "code": ["private void indent ( ) {", "out . print ( current Indention ) ; }"]}
{"ids": "42382", "code": ["private void compute Implicit Forward Dependences Use ( Register r , Dep Graph Node dest Node ) {", "Dep Graph Node source Node = get Dep Graph Node ( r ) ;", "if ( source Node != null ) {", "for ( Enumeration < Register > e = Generic Physical Def Use . enumerate ( Generic Physical Def Use . get Mask TSP Defs ( ) , ir ) ; e . has More Elements ( ) ; ) {", "Register r 2 = e . next Element ( ) ;", "if ( r == r 2 ) {", "source Node . insert Out Edge ( dest Node , REG MAY DEF ) ;", "return ; } }", "source Node . insert Out Edge ( dest Node , REG TRUE ) ; } }"]}
{"ids": "49231", "code": ["public String description ( ) {", "synchronized ( this ) {", "if ( messages == null ) {", "messages = Resource Bundle . get Bundle ( STR_ ) ; } }", "return messages . get String ( STR_ ) ; }"]}
{"ids": "15019", "code": ["Set find Removable Aci List ( Set aci List ) throws AM Exception , SSO Exception {", "Set result Set = new Hash Set ( ) ;", "if ( aci List == null ) {", "return result Set ; }", "Iterator iter = aci List . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String aci = ( String ) iter . next ( ) ;", "Set objs = ds Services . search ( token , AM Store Connection . get AM Sdk Base DN ( ) , STR_ + AM Search Filter Manager . get Global Search Filter ( AM Object . GROUP ) + STR_ + aci + STR_ , AM Constants . SCOPE SUB ) ;", "if ( objs . size ( ) < NUM_ ) {", "result Set . add ( aci ) ; } }", "return result Set ; }"]}
{"ids": "17047", "code": ["protected final void unregister Data Source ( Data Source removed ) {", "unregister Data Sources ( Collections . singleton ( removed ) ) ; }"]}
{"ids": "9550", "code": ["public String dump ( byte [ ] der ) throws Asn 1 Exception , IO Exception {", "try {", "ASN 1 Primitive der Object = ASN 1 Primitive . from Byte Array ( der ) ;", "if ( der Object . get Encoded ( ) . length < der . length ) {", "throw new Asn 1 Exception ( res . get String ( STR_ ) ) ; }", "return dump ( der Object ) ; }", "catch ( IO Exception ex ) {", "throw new Asn 1 Exception ( res . get String ( STR_ ) , ex ) ; } }"]}
{"ids": "57287", "code": ["private static void assert Change Events ( Collection < Port Change Event > early Events , Collection < Port Change Event > late Events , Collection < Port Change Event > anytime Events , Collection < Port Change Event > actual Events ) {", "String input Desc = String . format ( STR_ + STR_ , early Events . to String ( ) , late Events . to String ( ) , anytime Events . to String ( ) , actual Events . to String ( ) ) ;", "Collection < Port Change Event > early = new Array List < Port Change Event > ( early Events ) ;", "Collection < Port Change Event > late = new Array List < Port Change Event > ( late Events ) ;", "Collection < Port Change Event > any = new Array List < Port Change Event > ( anytime Events ) ;", "for ( Port Change Event ev : early ) {", "assert False ( STR_ , late . contains ( ev ) ) ;", "assert False ( STR_ , any . contains ( ev ) ) ; }", "for ( Port Change Event ev : late ) {", "assert False ( STR_ , early . contains ( ev ) ) ;", "assert False ( STR_ , any . contains ( ev ) ) ; }", "for ( Port Change Event ev : any ) {", "assert False ( STR_ , early . contains ( ev ) ) ;", "assert False ( STR_ , late . contains ( ev ) ) ; }", "for ( Port Change Event a : actual Events ) {", "if ( early . remove ( a ) ) {", "continue ; }", "if ( any . remove ( a ) ) {", "continue ; }", "if ( late . remove ( a ) ) {", "if ( ! early . is Empty ( ) ) {", "fail ( a + STR_ + STR_ + input Desc ) ; }", "else {", "continue ; } }", "fail ( a + STR_ + input Desc ) ; }", "if ( ! early . is Empty ( ) ) fail ( STR_ + early + STR_ + input Desc ) ;", "if ( ! late . is Empty ( ) ) fail ( STR_ + late + STR_ + input Desc ) ;", "if ( ! any . is Empty ( ) ) fail ( STR_ + any + STR_ + input Desc ) ; }"]}
{"ids": "12943", "code": ["public static Class need Class ( String property ) throws No Such Property Exception {", "String value = need Property ( property ) ;", "Class c = null ;", "try {", "c = Class . for Name ( value ) ; }", "catch ( Class Not Found Exception e ) {", "throw new No Such Property Exception ( STR_ + value + STR_ + property + STR_ ) ; }", "return c ; }"]}
{"ids": "85581", "code": ["Dependency Spec create Module Dependency ( Artifact Result i , boolean force Export ) {", "if ( JDK MODULE NAMES . contains ( i . name ( ) ) ) return JDK DEPENDENCY ;", "final Module Identifier mi = create Module Identifier ( i ) ;", "final boolean export = force Export || ( i . import Type ( ) == Import Type . EXPORT ) ;", "return Dependency Spec . create Module Dependency Spec ( Path Filters . get Meta Inf Subdirectories Without Meta Inf Filter ( ) , ( export ? Path Filters . accept All ( ) : Path Filters . reject All ( ) ) , this , mi , i . import Type ( ) == Import Type . OPTIONAL ) ; }"]}
{"ids": "58070", "code": ["public void append Nodes ( Node Set nodes ) {", "int n Nodes = nodes . size ( ) ;", "if ( null == m map ) {", "m map Size = n Nodes + m blocksize ;", "m map = new Node [ m map Size ] ; }", "else if ( ( m first Free + n Nodes ) >= m map Size ) {", "m map Size += ( n Nodes + m blocksize ) ;", "Node new Map [ ] = new Node [ m map Size ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m first Free + n Nodes ) ;", "m map = new Map ; }", "System . arraycopy ( nodes . m map , NUM_ , m map , m first Free , n Nodes ) ;", "m first Free += n Nodes ; }"]}
{"ids": "14122", "code": ["public void make Immutable ( ) {", "if ( is Mutable ) {", "is Mutable = false ; } }"]}
{"ids": "22205", "code": ["private int read Epoch ( File epoch File ) {", "int epoch = - NUM_ ;", "if ( ! epoch File . exists ( ) ) {", "return epoch ; }", "try {", "Scanner scanner = new Scanner ( epoch File ) ;", "epoch = scanner . next Int ( ) ;", "log . debug ( STR_ , epoch , epoch File . get Name ( ) ) ; }", "catch ( IO Exception e ) {", "log . error ( STR_ , epoch File . get Name ( ) , e ) ; }", "return epoch ; }"]}
{"ids": "6644", "code": ["private int fast Match ( String sha 1 ) {", "Integer idx = indexes . get ( sha 1 ) ;", "if ( idx == null ) return - NUM_ ;", "else return idx . int Value ( ) ; }"]}
{"ids": "22784", "code": ["public static void format ( String format , Object ... args ) {", "if ( ! is Disabled ( ) ) {", "print ( String . format ( format , args ) ) ; } }"]}
{"ids": "87068", "code": ["public void concatenate ( SIP Object List other List ) {", "super . concatenate ( other List ) ; }"]}
{"ids": "4227", "code": ["@ Override @ Transactional protected void persist ( Collection < Raw Protein < Prints Raw Match > > filtered Proteins , Map < String , Signature > model Id To Signature Map , Map < String , Protein > protein Id To Protein Map ) {", "for ( Raw Protein < Prints Raw Match > raw Protein : filtered Proteins ) {", "Protein protein = protein Id To Protein Map . get ( raw Protein . get Protein Identifier ( ) ) ;", "if ( protein == null ) {", "throw new Illegal State Exception ( STR_ + STR_ + raw Protein . get Protein Identifier ( ) + STR_ ) ; }", "Set < Finger Prints Match . Finger Prints Location > locations = null ;", "String current Signature Ac = null ;", "Signature current Signature = null ;", "Prints Raw Match last Raw Match = null ;", "final Tree Set < Prints Raw Match > sorted Matches = new Tree Set < Prints Raw Match > ( PRINTS RAW MATCH COMPARATOR ) ;", "sorted Matches . add All ( raw Protein . get Matches ( ) ) ;", "Finger Prints Match match = null ;", "for ( Prints Raw Match raw Match : sorted Matches ) {", "if ( raw Match == null ) {", "continue ; }", "if ( current Signature Ac == null || ! current Signature Ac . equals ( raw Match . get Model Id ( ) ) ) {", "if ( current Signature Ac != null ) {", "if ( match != null ) {", "entity Manager . persist ( match ) ; }", "match = new Finger Prints Match ( current Signature , last Raw Match . get Evalue ( ) , last Raw Match . get Graphscan ( ) , locations ) ;", "protein . add Match ( match ) ; }", "locations = new Hash Set < Finger Prints Match . Finger Prints Location > ( ) ;", "current Signature Ac = raw Match . get Model Id ( ) ;", "current Signature = model Id To Signature Map . get ( current Signature Ac ) ;", "if ( current Signature == null ) {", "throw new Illegal State Exception ( STR_ + current Signature Ac + STR_ ) ; } }", "locations . add ( new Finger Prints Match . Finger Prints Location ( raw Match . get Location Start ( ) , bounded Location End ( protein , raw Match ) , raw Match . get Pvalue ( ) , raw Match . get Score ( ) , raw Match . get Motif Number ( ) ) ) ;", "last Raw Match = raw Match ; }", "if ( last Raw Match != null ) {", "match = new Finger Prints Match ( current Signature , last Raw Match . get Evalue ( ) , last Raw Match . get Graphscan ( ) , locations ) ;", "protein . add Match ( match ) ;", "entity Manager . persist ( match ) ; } } }"]}
{"ids": "70046", "code": ["public Builder with Key Store Password ( String trust Store Password ) {", "properties . set Property ( Netty Options . SSL KEY STORE PASSWORD , Assert . not Null ( trust Store Password , STR_ ) ) ;", "return this ; }"]}
{"ids": "10257", "code": ["public static String suffix ( String string , String suffix ) {", "if ( string . ends With ( suffix ) == false ) {", "string += suffix ; }", "return string ; }"]}
{"ids": "32901", "code": ["public Point 2 D ( double x , double y ) {", "if ( Double . is Infinite ( x ) || Double . is Infinite ( y ) ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( Double . is Na N ( x ) || Double . is Na N ( y ) ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( x == NUM_ ) this . x = NUM_ ;", "else this . x = x ;", "if ( y == NUM_ ) this . y = NUM_ ;", "else this . y = y ; }"]}
{"ids": "14586", "code": ["public static void server Failed ( String service Name ) {", "if ( service Name . starts With ( valid Remote URL ) ) {", "server Failed = true ; }", "else {", "remote Stubs . remove ( service Name ) ; } }"]}
{"ids": "6767", "code": ["public Request Handler ( Pokemon Go api , Ok Http Client client ) {", "this . api = api ;", "this . client = client ;", "api Endpoint = Api Settings . API ENDPOINT ;", "async Http Thread = new Thread ( this , STR_ ) ;", "async Http Thread . set Daemon ( true ) ;", "async Http Thread . start ( ) ; }"]}
{"ids": "22577", "code": ["public VN Xe Command Result remove Luns From Consistency Group ( String cg Id , List < String > luns ) {", "Lun Group Modify Param param = new Lun Group Modify Param ( ) ;", "List < Lun Add Param > lun Removes = new Array List < Lun Add Param > ( ) ;", "for ( String lun Id : luns ) {", "VN Xe Base lun = new VN Xe Base ( lun Id ) ;", "Lun Add Param lun Add = new Lun Add Param ( ) ;", "lun Add . set Lun ( lun ) ;", "lun Removes . add ( lun Add ) ; }", "param . set Lun Remove ( lun Removes ) ;", "Consistency Group Requests req = new Consistency Group Requests ( kh Client ) ;", "return req . modify Consistency Group Sync ( cg Id , param ) ; }"]}
{"ids": "74931", "code": ["private static boolean not Instance Available ( ) {", "if ( s Instance == null ) {", "if ( ! s Training Task Future . is Done ( ) ) {", "try {", "s Instance = s Training Task Future . get ( ) ;", "return false ; }", "catch ( Interrupted Exception | Execution Exception e ) {", "e . print Stack Trace ( ) ;", "return true ; } }", "else {", "return true ; } }", "return false ; }"]}
{"ids": "83729", "code": ["public void read Data ( Data Input din ) throws IO Exception {", "status = din . read Unsigned Short ( ) ;", "events = din . read Unsigned Short ( ) ; }"]}
{"ids": "83456", "code": ["public void remove ( String identifier , Active Connection Record record ) {", "synchronized ( records ) {", "Set < Active Connection Record > connections = records . get ( identifier ) ;", "assert ( connections != null ) ;", "connections . remove ( record ) ;", "if ( connections . is Empty ( ) ) records . remove ( identifier ) ; } }"]}
{"ids": "22062", "code": ["private String build Metro Proint Placement Status String ( ) {", "String Buffer placement Status Buf = new String Buffer ( ) ;", "if ( placement Status != null ) {", "placement Status Buf . append ( String . format ( STR_ ) ) ;", "placement Status Buf . append ( placement Status . to String ( db Client ) ) ; }", "if ( secondary Placement Status != null ) {", "placement Status Buf . append ( String . format ( STR_ ) ) ;", "placement Status Buf . append ( secondary Placement Status . to String ( db Client ) ) ; }", "return placement Status Buf . to String ( ) ; }"]}
{"ids": "71203", "code": ["private boolean has Sequence ( Subgraph graph ) {", "int odd Degree Count = NUM_ ;", "for ( Iterator i = graph . node Iterator ( ) ; i . has Next ( ) ; ) {", "Node node = ( Node ) i . next ( ) ;", "if ( node . get Degree ( ) % NUM_ == NUM_ ) odd Degree Count ++ ; }", "return odd Degree Count <= NUM_ ; }"]}
{"ids": "71805", "code": ["public void ensure Additional Capacity ( final int size ) {", "final int new Count = visible . position ( ) + size ;", "if ( new Count > visible . capacity ( ) ) {", "final Byte Buffer new Byte Buffer = Byte Buffer . allocate ( Math . max ( visible . capacity ( ) << NUM_ , new Count ) ) ;", "visible . flip ( ) ;", "visible = new Byte Buffer . put ( visible ) ; } }"]}
{"ids": "66790", "code": ["public void force Reload ( File file ) {", "f Files To Reoad . add ( file ) ; }"]}
{"ids": "47961", "code": ["private static long long Multiply Power Ten ( long val , int n ) {", "if ( val == NUM_ || n <= NUM_ ) return val ;", "long [ ] tab = LONG TEN POWERS TABLE ;", "long [ ] bounds = THRESHOLDS TABLE ;", "if ( n < tab . length && n < bounds . length ) {", "long tenpower = tab [ n ] ;", "if ( val == NUM_ ) return tenpower ;", "if ( Math . abs ( val ) <= bounds [ n ] ) return val * tenpower ; }", "return INFLATED ; }"]}
{"ids": "71371", "code": ["public static int wild Compare ( String search In , String search For Wildcard ) {", "if ( ( search In == null ) || ( search For Wildcard == null ) ) {", "return WILD COMPARE NO MATCH ; }", "if ( search For Wildcard . equals ( STR_ ) ) {", "return WILD COMPARE MATCH WITH WILD ; }", "int result = WILD COMPARE NO MATCH ;", "char wildcard Many = STR_ ;", "char wildcard One = STR_ ;", "char wildcard Escape = STR_ ;", "int search For Pos = NUM_ ;", "int search For End = search For Wildcard . length ( ) ;", "int search In Pos = NUM_ ;", "int search In End = search In . length ( ) ;", "while ( search For Pos != search For End ) {", "char wildstr Char = search For Wildcard . char At ( search For Pos ) ;", "while ( ( search For Wildcard . char At ( search For Pos ) != wildcard Many ) && ( wildstr Char != wildcard One ) ) {", "if ( ( search For Wildcard . char At ( search For Pos ) == wildcard Escape ) && ( ( search For Pos + NUM_ ) != search For End ) ) {", "search For Pos ++ ; }", "if ( ( search In Pos == search In End ) || ( Character . to Upper Case ( search For Wildcard . char At ( search For Pos ++ ) ) != Character . to Upper Case ( search In . char At ( search In Pos ++ ) ) ) ) {", "return WILD COMPARE MATCH WITH WILD ; }", "if ( search For Pos == search For End ) {", "return ( ( search In Pos != search In End ) ? WILD COMPARE MATCH WITH WILD : WILD COMPARE MATCH NO WILD ) ; }", "result = WILD COMPARE MATCH WITH WILD ; }", "if ( search For Wildcard . char At ( search For Pos ) == wildcard One ) {", "do {", "if ( search In Pos == search In End ) {", "return ( result ) ; }", "search In Pos ++ ; }", "while ( ( ++ search For Pos < search For End ) && ( search For Wildcard . char At ( search For Pos ) == wildcard One ) ) ;", "if ( search For Pos == search For End ) {", "break ; } }", "if ( search For Wildcard . char At ( search For Pos ) == wildcard Many ) {", "char cmp ;", "search For Pos ++ ;", "for ( ; search For Pos != search For End ; search For Pos ++ ) {", "if ( search For Wildcard . char At ( search For Pos ) == wildcard Many ) {", "continue ; }", "if ( search For Wildcard . char At ( search For Pos ) == wildcard One ) {", "if ( search In Pos == search In End ) {", "return ( WILD COMPARE NO MATCH ) ; }", "search In Pos ++ ;", "continue ; }", "break ; }", "if ( search For Pos == search For End ) {", "return WILD COMPARE MATCH NO WILD ; }", "if ( search In Pos == search In End ) {", "return WILD COMPARE NO MATCH ; }", "if ( ( ( cmp = search For Wildcard . char At ( search For Pos ) ) == wildcard Escape ) && ( ( search For Pos + NUM_ ) != search For End ) ) {", "cmp = search For Wildcard . char At ( ++ search For Pos ) ; }", "search For Pos ++ ;", "do {", "while ( ( search In Pos != search In End ) && ( Character . to Upper Case ( search In . char At ( search In Pos ) ) != Character . to Upper Case ( cmp ) ) ) {", "search In Pos ++ ; }", "if ( search In Pos ++ == search In End ) {", "return WILD COMPARE NO MATCH ; } {", "int tmp = wild Compare ( search In , search For Wildcard ) ;", "if ( tmp <= NUM_ ) {", "return ( tmp ) ; } } }", "while ( ( search In Pos != search In End ) && ( search For Wildcard . char At ( NUM_ ) != wildcard Many ) ) ;", "return WILD COMPARE NO MATCH ; } }", "return ( ( search In Pos != search In End ) ? WILD COMPARE MATCH WITH WILD : WILD COMPARE MATCH NO WILD ) ; }"]}
{"ids": "34918", "code": ["boolean compare Methods ( @ Nullable Method a , @ Nullable Method b ) {", "if ( ( a == null ) != ( b == null ) ) {", "return false ; }", "if ( a != null && b != null ) {", "if ( ! a . equals ( b ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "11017", "code": ["public Object remove ( String markername ) {", "return prefix Librarian . remove ( markername ) ; }"]}
{"ids": "63041", "code": ["String format Last Modified ( String file Name ) {", "synchronized ( date Format ) {", "return date Format . format ( new Date ( File Utils . last Modified ( file Name ) ) ) ; } }"]}
{"ids": "49084", "code": ["public True Type Font ( String platname , Object native Names , int f Index , boolean java Rasterizer , boolean use File Pool ) throws Font Format Exception {", "super ( platname , native Names ) ;", "use Java Rasterizer = java Rasterizer ;", "font Rank = Font 2 D . TTF RANK ;", "try {", "verify ( use File Pool ) ;", "init ( f Index ) ;", "if ( ! use File Pool ) {", "close ( ) ; } }", "catch ( Throwable t ) {", "close ( ) ;", "if ( t instanceof Font Format Exception ) {", "throw ( Font Format Exception ) t ; }", "else {", "throw new Font Format Exception ( STR_ ) ; } }", "Disposer . add Object Record ( this , disposer Record ) ; }"]}
{"ids": "55775", "code": ["public void calc Min Max ( ) {", "if ( m Data Sets == null ) return ;", "m Y Max = - Float . MAX VALUE ;", "m Y Min = Float . MAX VALUE ;", "m X Max = - Float . MAX VALUE ;", "m X Min = Float . MAX VALUE ;", "for ( int i = NUM_ , size = m Data Sets . size ( ) ; i < size ; i ++ ) {", "T set = m Data Sets . get ( i ) ;", "calc Min Max ( set ) ; }", "m Left Axis Max = - Float . MAX VALUE ;", "m Left Axis Min = Float . MAX VALUE ;", "m Right Axis Max = - Float . MAX VALUE ;", "m Right Axis Min = Float . MAX VALUE ;", "T first Left = get First Left ( m Data Sets ) ;", "if ( first Left != null ) {", "m Left Axis Max = first Left . get Y Max ( ) ;", "m Left Axis Min = first Left . get Y Min ( ) ;", "for ( int i = NUM_ ; i < m Data Sets . size ( ) ; i ++ ) {", "T data Set = m Data Sets . get ( i ) ;", "if ( data Set . get Axis Dependency ( ) == Axis Dependency . LEFT ) {", "if ( data Set . get Y Min ( ) < m Left Axis Min ) m Left Axis Min = data Set . get Y Min ( ) ;", "if ( data Set . get Y Max ( ) > m Left Axis Max ) m Left Axis Max = data Set . get Y Max ( ) ; } } }", "T first Right = get First Right ( m Data Sets ) ;", "if ( first Right != null ) {", "m Right Axis Max = first Right . get Y Max ( ) ;", "m Right Axis Min = first Right . get Y Min ( ) ;", "for ( int i = NUM_ ; i < m Data Sets . size ( ) ; i ++ ) {", "T data Set = m Data Sets . get ( i ) ;", "if ( data Set . get Axis Dependency ( ) == Axis Dependency . RIGHT ) {", "if ( data Set . get Y Min ( ) < m Right Axis Min ) m Right Axis Min = data Set . get Y Min ( ) ;", "if ( data Set . get Y Max ( ) > m Right Axis Max ) m Right Axis Max = data Set . get Y Max ( ) ; } } } }"]}
{"ids": "7802", "code": ["public Logarithmic Axis ( String label ) {", "super ( label ) ;", "setup Number Fmt Obj ( ) ; }"]}
{"ids": "4951", "code": ["protected final boolean has cycle recu ( Set < Brd Item > p visited items , Brd Item p search item , Brd Item p come from item , boolean p ignore areas ) {", "if ( p ignore areas && ( this instanceof Brd Area Conduction ) ) return false ;", "Collection < Brd Item > contact list = get normal contacts ( ) ;", "if ( contact list == null ) return false ;", "for ( Brd Item curr contact : contact list ) {", "if ( curr contact == p come from item ) continue ;", "if ( curr contact == p search item ) return true ;", "if ( ! p visited items . add ( curr contact ) ) continue ;", "if ( curr contact . has cycle recu ( p visited items , p search item , this , p ignore areas ) ) return true ; }", "return false ; }"]}
{"ids": "8101", "code": ["public static boolean is Calling Class Reflection Available ( ) {", "return true ; }"]}
{"ids": "77000", "code": ["private static String [ ] form Grams ( String text , int ng ) {", "int len = text . length ( ) ;", "String [ ] res = new String [ len - ng + NUM_ ] ;", "for ( int i = NUM_ ; i < len - ng + NUM_ ; i ++ ) {", "res [ i ] = text . substring ( i , i + ng ) ; }", "return res ; }"]}
{"ids": "55325", "code": ["public void load Settings From Json ( ) {", "synchronized ( LOCK ) {", "load Settings From Json ( default File ) ;", "for ( String file Name : files ) {", "load Settings From Json ( file Name ) ; } } }"]}
{"ids": "74294", "code": ["public void load Train Icons ( ) {", "for ( Train train : get Trains By Id List ( ) ) {", "train . load Train Icon ( ) ; } }"]}
{"ids": "49737", "code": ["public final String translate ( final Char Sequence input ) {", "if ( input == null ) {", "return null ; }", "try {", "final String Writer writer = new String Writer ( input . length ( ) * NUM_ ) ;", "translate ( input , writer ) ;", "return writer . to String ( ) ; }", "catch ( final IO Exception ioe ) {", "throw new Runtime Exception ( ioe ) ; } }"]}
{"ids": "39025", "code": ["public void insert Reverse Sorted ( final int idx , final double distance ) {", "int i = NUM_ ;", "for ( List Node temp : m List ) {", "if ( temp . distance < distance ) {", "break ; }", "i ++ ; }", "m List . add ( i , new List Node ( idx , distance ) ) ; }"]}
{"ids": "76890", "code": ["public double normal Distance ( final double x , final double y , final double z , final Membership ... bounds ) {", "final double dist = evaluate ( x , y , z ) ;", "final double perp X = x - dist * this . x ;", "final double perp Y = y - dist * this . y ;", "final double perp Z = z - dist * this . z ;", "if ( ! meets All Bounds ( perp X , perp Y , perp Z , bounds ) ) {", "return Double . POSITIVE INFINITY ; }", "return Math . abs ( dist ) ; }"]}
{"ids": "33489", "code": ["private void generate Vector Drawable Result ( Vector Drawable vector , String next Vector Name , boolean is Last , boolean is First ) throws IO Exception {", "Custom Logger . log Error ( STR_ + vector . get File Name ( ) + STR_ + is Last ) ;", "if ( ! vector Already Defined . contains ( vector . get File Name ( ) ) ) {", "current Vector File Name = vector . get File Name ( ) ;", "Custom Logger . log Error ( STR_ + current Vector File Name ) ;", "File vector File = new File ( drawable Folder , current Vector File Name + STR_ ) ;", "Buffered Writer vector BW = create It ( vector File ) ;", "Custom Logger . log ( STR_ + vector File . get Absolute Path ( ) ) ;", "generate Vector Drawable ( vector , vector BW , is Last ) ;", "vector Already Defined . add ( vector . get File Name ( ) ) ;", "vector BW . flush ( ) ;", "vector BW . close ( ) ; }", "if ( ! is Last ) {", "File animated Vector File = new File ( drawable Folder , animated Vector . replace ( STR_ , current Vector File Name ) ) ;", "Buffered Writer animated Vector BW = create It ( animated Vector File ) ;", "Custom Logger . log ( STR_ + animated Vector File . get Absolute Path ( ) ) ;", "Custom Logger . log Error ( STR_ + animated Vector File . get Absolute Path ( ) + STR_ + next Vector Name ) ;", "generate Animated Vector ( vector , animated Vector BW , next Vector Name , false ) ;", "generate Animator Set ( vector , false ) ;", "animated Vector BW . flush ( ) ;", "animated Vector BW . close ( ) ; }", "if ( ! is Last ) {", "File animated Vector File = new File ( drawable Folder , animated Vector . replace ( STR_ , current Vector File Name + reverse ) ) ;", "Buffered Writer animated Vector BW = create It ( animated Vector File ) ;", "Custom Logger . log ( STR_ + animated Vector File . get Absolute Path ( ) ) ;", "Custom Logger . log Error ( STR_ + animated Vector File . get Absolute Path ( ) + STR_ + next Vector Name ) ;", "generate Animated Vector ( vector , animated Vector BW , next Vector Name , true ) ;", "generate Animator Set ( vector , true ) ;", "animated Vector BW . flush ( ) ;", "animated Vector BW . close ( ) ; } }"]}
{"ids": "83479", "code": ["public void access ( ) {", "last Accessed Time = System . current Time Millis ( ) ; }"]}
{"ids": "82266", "code": ["public void write To Object ( Object object ) {", "try {", "Method method = Bean Utils . get Write Method ( object . get Class ( ) , get Name ( ) , get Type ( ) ) ;", "if ( method != null ) {", "method . invoke ( object , new Object [ ] { get Value ( ) } ) ; } }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "24707", "code": ["private Http URL Connection do HTTP Post Request ( String location , String client Session Id , Map < String , String > metadata , String post Body ) throws Communication Exception {", "Output Stream Writer writer = null ;", "try {", "URL url = new URL ( location ) ;", "Http URL Connection connection = ( Http URL Connection ) url . open Connection ( ) ;", "connection . set Request Method ( STR_ ) ;", "connection . add Request Property ( STR_ , STR_ ) ;", "if ( client Session Id != null ) {", "connection . add Request Property ( HTTP HEADER SESSION ID , STR_ + client Session Id ) ; }", "if ( metadata != null ) {", "connection . add Request Property ( HTTP HEADER METADATA , Gc Util . get Base 64 Encoded Metadata ( metadata ) ) ; }", "if ( Constants . ENABLE REQUEST LOGGING ) {", "log Request ( connection , post Body ) ; }", "connection . set Do Output ( true ) ;", "writer = new Output Stream Writer ( connection . get Output Stream ( ) , STR_ ) ;", "writer . write ( post Body ) ;", "writer . flush ( ) ;", "if ( connection . get Response Code ( ) != NUM_ ) {", "throw new Communication Exception ( STR_ + connection . get Response Code ( ) ) ; }", "return connection ; }", "catch ( Malformed URL Exception e ) {", "Log . e ( TAG , STR_ + location ) ;", "throw new Communication Exception ( STR_ + location ) ; }", "catch ( IO Exception e ) {", "Log . e ( TAG , STR_ + e . get Message ( ) ) ;", "throw new Communication Exception ( STR_ + e . get Message ( ) , e ) ; }", "finally {", "if ( writer != null ) {", "try {", "writer . close ( ) ; }", "catch ( IO Exception e ) {", "Log . i ( TAG , STR_ + e . get Message ( ) ) ; } } } }"]}
{"ids": "85551", "code": ["void io Message ( Throwable ex ) {", "log . print Lines ( Prefix Kind . JAVAC , STR_ ) ;", "ex . print Stack Trace ( log . get Writer ( Writer Kind . NOTICE ) ) ; }"]}
{"ids": "32089", "code": ["public static Collection < UUID > node Ids ( @ Nullable Collection < ? extends Cluster Node > nodes ) {", "if ( nodes == null || nodes . is Empty ( ) ) return Collections . empty List ( ) ;", "return F . view Read Only ( nodes , node 2 id ( ) ) ; }"]}
{"ids": "25221", "code": ["public static Input Stream to Input Stream ( final Char Sequence input , final Charset encoding ) {", "return IO Utils . to Input Stream ( input . to String ( ) , encoding ) ; }"]}
{"ids": "29230", "code": ["public static boolean matches XML String ( char [ ] buf , int off , int end , String str ) {", "int len = str . length ( ) ;", "if ( len != end - off ) return false ;", "for ( int i = NUM_ ; i < len ; off += NUM_ , i ++ ) {", "if ( buf [ off ] != str . char At ( i ) ) return false ; }", "return true ; }"]}
{"ids": "40379", "code": ["public double r ( ) {", "return Math . sqrt ( x * x + y * y ) ; }"]}
{"ids": "28846", "code": ["public void sign ( Key Pair keypair ) throws IO Exception {", "if ( namelist . is Empty ( ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( keypair == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "try {", "General Name [ ] gns = new General Name [ namelist . size ( ) ] ;", "for ( int ix = NUM_ ; ix < namelist . size ( ) ; ix ++ ) {", "gns [ ix ] = new General Name ( General Name . d NS Name , namelist . get ( ix ) ) ; }", "General Names subject Alt Name = new General Names ( gns ) ;", "PKCS 10 Certification Request Builder p 10 Builder = new Jca PKCS 10 Certification Request Builder ( namebuilder . build ( ) , keypair . get Public ( ) ) ;", "Extensions Generator extensions Generator = new Extensions Generator ( ) ;", "extensions Generator . add Extension ( Extension . subject Alternative Name , false , subject Alt Name ) ;", "p 10 Builder . add Attribute ( PKCS Object Identifiers . pkcs 9 at extension Request , extensions Generator . generate ( ) ) ;", "Private Key pk = keypair . get Private ( ) ;", "Jca Content Signer Builder cs Builder = new Jca Content Signer Builder ( pk instanceof EC Key ? EC SIGNATURE ALG : SIGNATURE ALG ) ;", "Content Signer signer = cs Builder . build ( pk ) ;", "csr = p 10 Builder . build ( signer ) ; }", "catch ( Operator Creation Exception ex ) {", "throw new IO Exception ( STR_ , ex ) ; } }"]}
{"ids": "30286", "code": ["void remove Empty Rows ( final List list ) {", "for ( final Iterator < Receipt Detail Info > detail = list . iterator ( ) ; detail . has Next ( ) ; ) if ( detail . next ( ) == null ) detail . remove ( ) ; }"]}
{"ids": "68425", "code": ["private void add ( String text , Text text Node ) {", "int start Index = builder . length ( ) ;", "builder . append ( text ) ;", "int end Index = builder . length ( ) ;", "text Runs . add ( new Text Run ( text Node , start Index , end Index ) ) ; }"]}
{"ids": "9739", "code": ["public D Netscape Base Url ( J Dialog parent ) {", "super ( parent ) ;", "set Title ( res . get String ( STR_ ) ) ;", "init Components ( ) ; }"]}
{"ids": "46998", "code": ["private void read Object ( Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "init ( get Name ( ) ) ; }"]}
{"ids": "16552", "code": ["public void append Row ( Row Spec row Spec ) {", "check Not Null ( row Spec , STR_ ) ;", "row Specs . add ( row Spec ) ; }"]}
{"ids": "56663", "code": ["public static < T > Reactive Seq < T > from Publisher ( final Publisher < ? extends T > publisher ) {", "Objects . require Non Null ( publisher ) ;", "final Seq Subscriber < T > sub = Seq Subscriber . subscriber ( ) ;", "publisher . subscribe ( sub ) ;", "return sub . stream ( ) ; }"]}
{"ids": "32577", "code": ["public void multiply All Values By ( final double multiply By , final int Round Type ) {", "for ( final T t : key Set ( ) ) {", "double val = m values . get ( t ) ;", "switch ( Round Type ) {", "case NUM_ :", "val = Math . floor ( val * multiply By ) ;", "break ;", "case NUM_ :", "val = Math . round ( val * multiply By ) ;", "break ;", "case NUM_ :", "val = Math . ceil ( val * multiply By ) ;", "break ;", "default :", "val = val * multiply By ;", "break ; }", "put ( t , ( int ) val ) ; } }"]}
{"ids": "66233", "code": ["protected void paint Content Border Bottom Edge ( Graphics g , int tab Placement , int selected Index , int x , int y , int w , int h ) {", "boolean left To Right = Compiere Utils . is Left To Right ( tab Pane ) ;", "int bottom = y + h - NUM_ ;", "int right = x + w - NUM_ ;", "Rectangle sel Rect = selected Index < NUM_ ? null : get Tab Bounds ( selected Index , calc Rect ) ;", "g . set Color ( shadow ) ;", "if ( tab Placement != BOTTOM || selected Index < NUM_ || ( sel Rect . x < x || sel Rect . x > x + w ) ) {", "g . set Color ( dark Shadow ) ;", "g . draw Line ( x , y + h - NUM_ , x + w - NUM_ , y + h - NUM_ ) ; }", "else {", "boolean last In Run = is Last In Run ( selected Index ) ;", "g . set Color ( dark Shadow ) ;", "if ( left To Right || last In Run ) g . draw Line ( x , bottom , sel Rect . x , bottom ) ;", "else g . draw Line ( x , bottom , sel Rect . x - NUM_ , bottom ) ;", "if ( sel Rect . x + sel Rect . width < x + w - NUM_ ) {", "if ( left To Right && ! last In Run ) g . draw Line ( sel Rect . x + sel Rect . width , bottom , right , bottom ) ;", "else g . draw Line ( sel Rect . x + sel Rect . width - NUM_ , bottom , right , bottom ) ; } } }"]}
{"ids": "8226", "code": ["public static void upto ( double self , Number to , @ Closure Params ( First Param . class ) Closure closure ) {", "double to 1 = to . double Value ( ) ;", "if ( self <= to 1 ) {", "for ( double i = self ; i <= to 1 ; i ++ ) {", "closure . call ( i ) ; } }", "else throw new Groovy Runtime Exception ( STR_ + to + STR_ + self + STR_ ) ; }"]}
{"ids": "24651", "code": ["public void save ( String type , List < Elastic Search Doc > docs ) {", "if ( docs != null && ! docs . is Empty ( ) ) {", "List < List < Elastic Search Doc > > partitioned Docs = Lists . partition ( docs , NUM_ ) ;", "partitioned Docs . for Each ( null ) ; } }"]}
{"ids": "57933", "code": ["public void error ( Source Locator src Lctr , String msg ) throws Transformer Exception {", "error ( src Lctr , null , null , msg , null ) ; }"]}
{"ids": "14788", "code": ["void remove Listener ( String listener ID ) {", "if ( listener Objects != null ) {", "synchronized ( listener Objects ) {", "listener Objects . remove ( listener ID ) ;", "if ( listener Objects . is Empty ( ) ) {", "deregister Listener ( ) ; } }", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + service Name + STR_ + listener ID ) ; } } }"]}
{"ids": "36405", "code": ["@ Deprecated public void register Credentials ( User Credential authentication ) {", "wallet . put ( authentication . get URL ( ) , authentication ) ; }"]}
{"ids": "64801", "code": ["public boolean is AGC Enabled ( ) {", "return m AGC Enabled . get ( ) ; }"]}
{"ids": "12902", "code": ["protected Linked List < String > split Into Allophones ( String phone String ) {", "Linked List < String > phone List = new Linked List < String > ( ) ;", "for ( int i = NUM_ ; i < phone String . length ( ) ; i ++ ) {", "String name = null ;", "for ( int j = NUM_ ; j >= NUM_ ; j -- ) {", "if ( i + j <= phone String . length ( ) ) {", "String candidate = phone String . substring ( i , i + j ) ;", "if ( get Allophone ( candidate ) != null ) {", "name = candidate ;", "i += j - NUM_ ;", "break ; } } }", "if ( name != null ) {", "phone List . add ( name ) ; } }", "return phone List ; }"]}
{"ids": "57229", "code": ["protected void add To Maintenance Queue ( Node Port Tuple npt ) {", "if ( maintenance Queue . contains ( npt ) == false ) {", "maintenance Queue . add ( npt ) ; } }"]}
{"ids": "6122", "code": ["private boolean execute ( boolean read Response ) throws IO Exception {", "try {", "http Engine . send Request ( ) ;", "if ( read Response ) {", "http Engine . read Response ( ) ; }", "return true ; }", "catch ( IO Exception e ) {", "if ( handle Failure ( e ) ) {", "return false ; }", "else {", "throw e ; } } }"]}
{"ids": "27254", "code": ["public Bigdata Sail ( final Properties properties ) {", "this ( properties . get Property ( Options . NAMESPACE , Options . DEFAULT NAMESPACE ) , new Journal ( properties ) ) ;", "close On Shutdown = true ;", "if ( ! exists ( ) ) {", "try {", "create ( properties ) ; }", "catch ( Interrupted Exception | Execution Exception e ) {", "throw new Runtime Exception ( e ) ; } } }"]}
{"ids": "61665", "code": ["public float convert ( ) {", "return Float . int Bits To Float ( ( int ) bytes ) ; }"]}
{"ids": "18353", "code": ["protected int add Node ( Node node , int parent Index , int previous Sibling , int force Node Type ) {", "int node Index = m nodes . size ( ) ;", "if ( m dtm Ident . size ( ) == ( node Index > > > DTM Manager . IDENT DTM NODE BITS ) ) {", "try {", "if ( m mgr == null ) throw new Class Cast Exception ( ) ;", "DTM Manager Default mgr D = ( DTM Manager Default ) m mgr ;", "int id = mgr D . get First Free DTMID ( ) ;", "mgr D . add DTM ( this , id , node Index ) ;", "m dtm Ident . add Element ( id << DTM Manager . IDENT DTM NODE BITS ) ; }", "catch ( Class Cast Exception e ) {", "error ( XML Messages . create XML Message ( XML Error Resources . ER NO DTMIDS AVAIL , null ) ) ; } }", "m size ++ ;", "int type ;", "if ( NULL == force Node Type ) type = node . get Node Type ( ) ;", "else type = force Node Type ;", "if ( Node . ATTRIBUTE NODE == type ) {", "String name = node . get Node Name ( ) ;", "if ( name . starts With ( STR_ ) || name . equals ( STR_ ) ) {", "type = DTM . NAMESPACE NODE ; } }", "m nodes . add Element ( node ) ;", "m firstch . set Element At ( NOTPROCESSED , node Index ) ;", "m nextsib . set Element At ( NOTPROCESSED , node Index ) ;", "m prevsib . set Element At ( previous Sibling , node Index ) ;", "m parent . set Element At ( parent Index , node Index ) ;", "if ( DTM . NULL != parent Index && type != DTM . ATTRIBUTE NODE && type != DTM . NAMESPACE NODE ) {", "if ( NOTPROCESSED == m firstch . element At ( parent Index ) ) m firstch . set Element At ( node Index , parent Index ) ; }", "String ns URI = node . get Namespace URI ( ) ;", "String local Name = ( type == Node . PROCESSING INSTRUCTION NODE ) ? node . get Node Name ( ) : node . get Local Name ( ) ;", "if ( ( ( type == Node . ELEMENT NODE ) || ( type == Node . ATTRIBUTE NODE ) ) && null == local Name ) local Name = node . get Node Name ( ) ;", "Expanded Name Table exnt = m expanded Name Table ;", "if ( node . get Local Name ( ) == null && ( type == Node . ELEMENT NODE || type == Node . ATTRIBUTE NODE ) ) { }", "int expanded Name ID = ( null != local Name ) ? exnt . get Expanded Type ID ( ns URI , local Name , type ) : exnt . get Expanded Type ID ( type ) ;", "m exptype . set Element At ( expanded Name ID , node Index ) ;", "index Node ( expanded Name ID , node Index ) ;", "if ( DTM . NULL != previous Sibling ) m nextsib . set Element At ( node Index , previous Sibling ) ;", "if ( type == DTM . NAMESPACE NODE ) declare Namespace In Context ( parent Index , node Index ) ;", "return node Index ; }"]}
{"ids": "23948", "code": ["public File Process Controller ( final File Controller Parameters arguments , final int pid ) {", "this ( arguments , pid , Long . get Long ( STATUS TIMEOUT PROPERTY , NUM_ * NUM_ ) , Time Unit . MILLISECONDS ) ; }"]}
{"ids": "15499", "code": ["protected Set < Future < Void > > send ( String channel Id , Object message ) {", "Collection < Session > sessions = ( channel Id != null ) ? socket Sessions . get ( channel Id ) : null ;", "if ( sessions != null && ! sessions . is Empty ( ) ) {", "Set < Future < Void > > results = new Hash Set < > ( sessions . size ( ) ) ;", "String json = Json . encode ( message ) ;", "for ( Session session : sessions ) {", "if ( session . is Open ( ) ) {", "send ( session , json , results ) ; } }", "return results ; }", "return empty Set ( ) ; }"]}
{"ids": "8337", "code": ["public Object attribute ( Object key ) {", "return ( attributes != null ) ? attributes . get ( key ) : null ; }"]}
{"ids": "67225", "code": ["public Response do Put ( String url ) {", "return do Put ( url , null ) ; }"]}
{"ids": "78728", "code": ["public void unregister Drop Controllers ( ) {", "drop Controller List . clear ( ) ; }"]}
{"ids": "33099", "code": ["public static String create Link ( String uri , String label ) {", "return STR_ + uri + STR_ + label + STR_ ; }"]}
{"ids": "43601", "code": ["public int size ( ) {", "return segments . size ( ) ; }"]}
{"ids": "84914", "code": ["public void add Operand ( int start Tick , int end Tick , String text , Lifeline constraint Lifeline ) throws Sequence Diagram Checked Exception {", "if ( operands . size ( ) == NUM_ && this . start Tick != start Tick ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "operands . add ( new Operand ( start Tick , end Tick , text , constraint Lifeline ) ) ; }"]}
{"ids": "26711", "code": ["public static Number asin ( Number a ) {", "return Math . asin ( a . double Value ( ) ) ; }"]}
{"ids": "49279", "code": ["private void create And Attach Event ( long ov ) throws Windows Exception {", "long h Event = Create Event ( false , false ) ;", "UNSAFE . put Address ( ov + OFFSETOF HEVENT , h Event ) ; }"]}
{"ids": "39059", "code": ["@ Override public int compare To ( String o ) {", "int result ;", "int major ;", "int minor ;", "int revision ;", "int pnt ;", "int [ ] maj = new int [ NUM_ ] ;", "int [ ] min = new int [ NUM_ ] ;", "int [ ] rev = new int [ NUM_ ] ;", "int [ ] point = new int [ NUM_ ] ;", "parse Version ( o , maj , min , rev , point ) ;", "major = maj [ NUM_ ] ;", "minor = min [ NUM_ ] ;", "revision = rev [ NUM_ ] ;", "pnt = point [ NUM_ ] ;", "if ( MAJOR < major ) {", "result = - NUM_ ; }", "else if ( MAJOR == major ) {", "if ( MINOR < minor ) {", "result = - NUM_ ; }", "else if ( MINOR == minor ) {", "if ( REVISION < revision ) {", "result = - NUM_ ; }", "else if ( REVISION == revision ) {", "if ( POINT < pnt ) {", "result = - NUM_ ; }", "else if ( POINT == pnt ) {", "result = NUM_ ; }", "else {", "result = NUM_ ; } }", "else {", "result = NUM_ ; } }", "else {", "result = NUM_ ; } }", "else {", "result = NUM_ ; }", "return result ; }"]}
{"ids": "46042", "code": ["private void generate Integrity Key Pair ( boolean client Mode ) throws Unsupported Encoding Exception , IO Exception , No Such Algorithm Exception {", "byte [ ] cimagic = CLIENT INT MAGIC . get Bytes ( encoding ) ;", "byte [ ] simagic = SVR INT MAGIC . get Bytes ( encoding ) ;", "Message Digest md 5 = Message Digest . get Instance ( STR_ ) ;", "byte [ ] key Buffer = new byte [ H A 1 . length + cimagic . length ] ;", "System . arraycopy ( H A 1 , NUM_ , key Buffer , NUM_ , H A 1 . length ) ;", "System . arraycopy ( cimagic , NUM_ , key Buffer , H A 1 . length , cimagic . length ) ;", "md 5 . update ( key Buffer ) ;", "byte [ ] Kic = md 5 . digest ( ) ;", "System . arraycopy ( simagic , NUM_ , key Buffer , H A 1 . length , simagic . length ) ;", "md 5 . update ( key Buffer ) ;", "byte [ ] Kis = md 5 . digest ( ) ;", "if ( logger . is Loggable ( Level . FINER ) ) {", "trace Output ( DI CLASS NAME , STR_ , STR_ , Kic ) ;", "trace Output ( DI CLASS NAME , STR_ , STR_ , Kis ) ; }", "if ( client Mode ) {", "my Ki = Kic ;", "peer Ki = Kis ; }", "else {", "my Ki = Kis ;", "peer Ki = Kic ; } }"]}
{"ids": "52304", "code": ["public static boolean is Local File Uri ( Uri uri ) {", "final String scheme = get Scheme Or Null ( uri ) ;", "return LOCAL FILE SCHEME . equals ( scheme ) ; }"]}
{"ids": "6178", "code": ["public static < V > boolean add Distinct Entry ( List < V > source List , V entry ) {", "return ( source List != null && ! source List . contains ( entry ) ) ? source List . add ( entry ) : false ; }"]}
{"ids": "73734", "code": ["public static boolean valid System Name Config ( String system Name , char type ) {", "if ( ! valid System Name Format ( system Name , type ) ) {", "return false ; }", "int bit = get Bit From System Name ( system Name ) ;", "if ( ( type == STR_ ) || ( type == STR_ ) ) {", "if ( ( bit <= NUM_ ) || ( bit > Output Bits . get Num Output Bits ( ) ) ) {", "return false ; } }", "else if ( type == STR_ ) {", "if ( ( bit <= NUM_ ) || ( bit > Input Bits . get Num Input Bits ( ) ) ) {", "return false ; } }", "else {", "log . error ( STR_ ) ;", "return false ; }", "return true ; }"]}
{"ids": "11125", "code": ["public boolean mouse Moved ( Mouse Event e ) {", "Esri Graphic List list = get Esri Graphic List ( ) ;", "boolean ret = false ;", "if ( list != null ) {", "OM Graphic omg = list . find Closest ( e . get X ( ) , e . get Y ( ) , NUM_ ) ;", "if ( omg != null ) {", "int index ;", "Integer I = ( ( Integer ) omg . get Attribute ( SHAPE INDEX ATTRIBUTE ) ) ;", "if ( I != null ) {", "index = I . int Value ( ) ; }", "else {", "index = list . index Of ( omg ) ; }", "if ( parent Layer == null ) {", "Component comp = get Component ( ) ;", "if ( comp instanceof Layer ) {", "parent Layer = ( Layer ) comp ; } }", "if ( parent Layer != null ) {", "parent Layer . fire Request Tool Tip ( get Description ( index ) ) ; }", "ret = true ; }", "else if ( parent Layer != null ) {", "parent Layer . fire Hide Tool Tip ( ) ; } }", "return ret ; }"]}
{"ids": "24596", "code": ["private void push ( final int type ) {", "if ( output Stack == null ) {", "output Stack = new int [ NUM_ ] ; }", "int n = output Stack . length ;", "if ( output Stack Top >= n ) {", "int [ ] t = new int [ Math . max ( output Stack Top + NUM_ , NUM_ * n ) ] ;", "System . arraycopy ( output Stack , NUM_ , t , NUM_ , n ) ;", "output Stack = t ; }", "output Stack [ output Stack Top ++ ] = type ;", "int top = owner . input Stack Top + output Stack Top ;", "if ( top > owner . output Stack Max ) {", "owner . output Stack Max = top ; } }"]}
{"ids": "56836", "code": ["public void create Database Entities For Business Object Data Notification Registration Testing ( String namespace , List < String > notification Event Types , String business Object Definition Namespace , String business Object Definition Name , List < String > file Types , List < String > storage Names , List < String > business Object Data Statuses , List < Job Action > job Actions ) {", "Namespace Entity namespace Entity = namespace Dao . get Namespace By Cd ( namespace ) ;", "if ( namespace Entity == null ) {", "namespace Dao Test Helper . create Namespace Entity ( namespace ) ; }", "if ( ! Collection Utils . is Empty ( notification Event Types ) ) {", "for ( String notification Event Type : notification Event Types ) {", "Notification Event Type Entity notification Event Type Entity = notification Event Type Dao . get Notification Event Type By Code ( notification Event Type ) ;", "if ( notification Event Type Entity == null ) {", "notification Registration Dao Test Helper . create Notification Event Type Entity ( notification Event Type ) ; } } }", "Business Object Definition Entity business Object Definition Entity = business Object Definition Dao . get Business Object Definition By Key ( new Business Object Definition Key ( business Object Definition Namespace , business Object Definition Name ) ) ;", "if ( business Object Definition Entity == null ) {", "business Object Definition Dao Test Helper . create Business Object Definition Entity ( business Object Definition Namespace , business Object Definition Name , Abstract Service Test . DATA PROVIDER NAME , Abstract Service Test . BDEF DESCRIPTION ) ; }", "if ( ! Collection Utils . is Empty ( file Types ) ) {", "for ( String business Object Format File Type : file Types ) {", "file Type Dao Test Helper . create File Type Entity ( business Object Format File Type ) ; } }", "if ( ! Collection Utils . is Empty ( storage Names ) ) {", "for ( String storage Name : storage Names ) {", "storage Dao Test Helper . create Storage Entity ( storage Name , Storage Platform Entity . S 3 ) ; } }", "if ( ! Collection Utils . is Empty ( business Object Data Statuses ) ) {", "for ( String business Object Data Status : business Object Data Statuses ) {", "Business Object Data Status Entity business Object Data Status Entity = business Object Data Status Dao . get Business Object Data Status By Code ( business Object Data Status ) ;", "if ( business Object Data Status Entity == null ) {", "business Object Data Status Dao Test Helper . create Business Object Data Status Entity ( business Object Data Status ) ; } } }", "if ( ! Collection Utils . is Empty ( job Actions ) ) {", "for ( Job Action job Action : job Actions ) {", "job Definition Dao Test Helper . create Job Definition Entity ( job Action . get Namespace ( ) , job Action . get Job Name ( ) , String . format ( STR_ , job Action . get Namespace ( ) , job Action . get Job Name ( ) ) , String . format ( STR_ , job Action . get Namespace ( ) , job Action . get Job Name ( ) , Abstract Service Test . ACTIVITI ID ) ) ; } } }"]}
{"ids": "77439", "code": ["public boolean post Data ( Input Stream data , Long length , Output Stream output , String type , URL url ) {", "if ( mock Mode ) return true ;", "boolean success = true ;", "if ( type == null ) type = DEFAULT CONTENT TYPE ;", "Http URL Connection urlc = null ;", "try {", "try {", "urlc = ( Http URL Connection ) url . open Connection ( ) ;", "try {", "urlc . set Request Method ( STR_ ) ; }", "catch ( Protocol Exception e ) {", "fatal ( STR_ + e ) ; }", "urlc . set Do Output ( true ) ;", "urlc . set Do Input ( true ) ;", "urlc . set Use Caches ( false ) ;", "urlc . set Allow User Interaction ( false ) ;", "urlc . set Request Property ( STR_ , type ) ;", "basic Auth ( urlc ) ;", "if ( null != length ) {", "urlc . set Fixed Length Streaming Mode ( length ) ; }", "else {", "urlc . set Chunked Streaming Mode ( - NUM_ ) ; }", "urlc . connect ( ) ; }", "catch ( IO Exception e ) {", "fatal ( STR_ + solr Url + STR_ + e ) ;", "success = false ; }", "catch ( Exception e ) {", "fatal ( STR_ + e . get Message ( ) ) ; }", "try ( final Output Stream out = urlc . get Output Stream ( ) ) {", "pipe ( data , out ) ; }", "catch ( IO Exception e ) {", "fatal ( STR_ + e ) ; }", "try {", "success &= check Response Code ( urlc ) ;", "try ( final Input Stream in = urlc . get Input Stream ( ) ) {", "pipe ( in , output ) ; } }", "catch ( IO Exception e ) {", "warn ( STR_ + e ) ;", "success = false ; }", "catch ( General Security Exception e ) {", "fatal ( STR_ ) ; } }", "finally {", "if ( urlc != null ) urlc . disconnect ( ) ; }", "return success ; }"]}
{"ids": "11484", "code": ["public Format Exception ( String s , Throwable root Cause ) {", "super ( s + STR_ + root Cause . get Localized Message ( ) ) ;", "this . root Cause = root Cause ; }"]}
{"ids": "39838", "code": ["private Pair < Big Decimal , Big Decimal > fill Payment ( final Customer Order order , final Customer Order Delivery delivery , final Payment payment , final boolean single Pay , final Big Decimal running Total , final Big Decimal running Total Tax , final boolean last Delivery ) {", "if ( payment . get Transaction Reference Id ( ) == null ) {", "payment . set Transaction Reference Id ( delivery . get Delivery Num ( ) ) ; }", "payment . set Order Shipment ( single Pay ? order . get Ordernum ( ) : delivery . get Delivery Num ( ) ) ;", "fill Payment Items ( delivery , payment ) ;", "fill Payment Shipment ( order , delivery , payment ) ;", "return fill Payment Amount ( order , delivery , payment , single Pay , running Total , running Total Tax , last Delivery ) ; }"]}
{"ids": "53442", "code": ["public static double angle ( Number Vector v 1 , Number Vector v 2 , Number Vector o ) {", "final int dim 1 = v 1 . get Dimensionality ( ) , dim 2 = v 2 . get Dimensionality ( ) , dimo = o . get Dimensionality ( ) ;", "final int mindim = ( dim 1 <= dim 2 ) ? dim 1 : dim 2 ;", "double cross = NUM_ , l 1 = NUM_ , l 2 = NUM_ ;", "for ( int k = NUM_ ; k < mindim ; k ++ ) {", "final double ok = k < dimo ? o . double Value ( k ) : NUM_ ;", "final double r 1 = v 1 . double Value ( k ) - ok ;", "final double r 2 = v 2 . double Value ( k ) - ok ;", "cross += r 1 * r 2 ;", "l 1 += r 1 * r 1 ;", "l 2 += r 2 * r 2 ; }", "for ( int k = mindim ; k < dim 1 ; k ++ ) {", "final double ok = k < dimo ? o . double Value ( k ) : NUM_ ;", "final double r 1 = v 1 . double Value ( k ) - ok ;", "l 1 += r 1 * r 1 ; }", "for ( int k = mindim ; k < dim 2 ; k ++ ) {", "final double ok = k < dimo ? o . double Value ( k ) : NUM_ ;", "final double r 2 = v 2 . double Value ( k ) - ok ;", "l 2 += r 2 * r 2 ; }", "final double a = ( cross == NUM_ ) ? NUM_ : ( l 1 == NUM_ || l 2 == NUM_ ) ? NUM_ : Math . sqrt ( ( cross / l 1 ) * ( cross / l 2 ) ) ;", "return ( a < NUM_ ) ? a : NUM_ ; }"]}
{"ids": "52957", "code": ["void materialize ( ) {", "if ( cachefill < NUM_ ) {", "return ; }", "double min = Double . MAX VALUE , max = Double . MIN VALUE ;", "for ( int i = NUM_ ; i < cachefill ; i ++ ) {", "min = Math . min ( min , cachec [ i ] ) ;", "max = Math . max ( max , cachec [ i ] ) ; }", "Linear Scale scale = new Linear Scale ( min , max ) ;", "min = scale . get Min ( ) ;", "max = scale . get Max ( ) ;", "this . base = min ;", "this . max = max ;", "this . binsize = ( max - min ) / this . destsize ;", "this . data = new float [ this . destsize << NUM_ ] ;", "size = destsize ;", "final int end = cachefill ;", "cachefill = - NUM_ ;", "for ( int i = NUM_ ; i < end ; i ++ ) {", "increment ( cachec [ i ] , cachev [ i ] ) ; }", "cachec = null ;", "cachev = null ; }"]}
{"ids": "26334", "code": ["public boolean build Host Part ( Appendable buffer , String url , Boolean use SSL ) throws Web App Configuration Exception , IO Exception {", "return build Host Part ( buffer , url , use SSL , true ) ; }"]}
{"ids": "32571", "code": ["public static < T > List < T > shift Elements To End ( final List < T > source , final int count ) {", "final Array List < T > r Val = new Array List < > ( source . size ( ) ) ;", "for ( int i = count ; i < source . size ( ) ; i ++ ) {", "r Val . add ( source . get ( i ) ) ; }", "for ( int i = NUM_ ; i < count ; i ++ ) {", "r Val . add ( source . get ( i ) ) ; }", "if ( source . size ( ) != r Val . size ( ) ) {", "throw new Illegal State Exception ( STR_ + count + STR_ + source + STR_ + r Val ) ; }", "return r Val ; }"]}
{"ids": "62294", "code": ["private boolean is Leaf Page ( Byte Buffer buffer ) throws IO Exception {", "byte page Type = buffer . get ( NUM_ ) ;", "if ( page Type == Page Types . INDEX LEAF ) {", "return true ; }", "else if ( page Type == Page Types . INDEX NODE ) {", "return false ; }", "throw new IO Exception ( with Error Context ( STR_ + page Type ) ) ; }"]}
{"ids": "33403", "code": ["public void add Js Lib Files ( File ... files ) {", "js Lib Files . add All ( Arrays . as List ( files ) ) ; }"]}
{"ids": "46689", "code": ["private void init Properties If Necessary ( ) {", "if ( timer == null ) {", "Toolkit t = Toolkit . get Default Toolkit ( ) ;", "Integer prop ;", "prop = ( Integer ) t . get Desktop Property ( STR_ ) ;", "timer = new Timer ( prop == null ? NUM_ : prop . int Value ( ) , this ) ;", "prop = ( Integer ) t . get Desktop Property ( STR_ ) ;", "timer . set Initial Delay ( prop == null ? NUM_ : prop . int Value ( ) ) ;", "prop = ( Integer ) t . get Desktop Property ( STR_ ) ;", "if ( prop != null ) {", "hysteresis = prop . int Value ( ) ; } } }"]}
{"ids": "51578", "code": ["public E Object load Model ( String filename , String cwd ) {", "URI file URI = normalize URI ( URI . create URI ( filename ) ) ;", "URI cwd URI = normalize URI ( URI . create URI ( cwd ) ) ;", "return load Model ( file URI , cwd URI ) ; }"]}
{"ids": "24256", "code": ["static boolean path Is Windows ( String path ) {", "if ( path != null && path . length ( ) > NUM_ ) {", "return ( Character . is Letter ( path . char At ( NUM_ ) ) && path . char At ( NUM_ ) == STR_ ) || ( path . starts With ( STR_ ) || path . starts With ( STR_ ) ) ; }", "return false ; }"]}
{"ids": "30663", "code": ["public void notify Returned ( Notify Context notify Context , I Template Holder template ) {", "if ( notify Context == null ) return ;", "if ( filter Manager . is Filter [ Filter Operation Codes . AFTER NOTIFY TRIGGER ] ) {", "Object [ ] entries = new Object [ NUM_ ] ;", "entries [ NUM_ ] = notify Context . get Entry ( ) ;", "entries [ NUM_ ] = template ;", "try {", "filter Manager . invoke Filters ( Filter Operation Codes . AFTER NOTIFY TRIGGER , null , entries ) ; }", "catch ( Exception e ) {", "if ( logger . is Loggable ( Level . FINE ) ) logger . log ( Level . FINE , STR_ , e ) ; } }", "decrease Counter ( notify Context ) ; }"]}
{"ids": "2541", "code": ["public static String normalize Slashes ( String path ) {", "return path . replace All ( STR_ , STR_ ) ; }"]}
{"ids": "63914", "code": ["protected Point 2 D correct ( Point 2 D anchor , Rectangle 2 D bounds ) {", "if ( anchor == null ) return anchor ;", "double x = anchor . get X ( ) , y = anchor . get Y ( ) ;", "double x 1 = bounds . get Min X ( ) , y 1 = bounds . get Min Y ( ) ;", "double x 2 = bounds . get Max X ( ) , y 2 = bounds . get Max Y ( ) ;", "x = ( x < x 1 ? x 1 : ( x > x 2 ? x 2 : x ) ) ;", "y = ( y < y 1 ? y 1 : ( y > y 2 ? y 2 : y ) ) ;", "m tmp . set Location ( x , y ) ;", "return m tmp ; }"]}
{"ids": "14099", "code": ["private String save Parameters ( Set user Session , String user ID , boolean is SOAP Initiated , boolean is IDP Initiated , String protocol , String realm , String idp Entity ID , String sp Entity ID , String relay State , String single Logout Request XML , String single Logout Response XML , int current Status ) {", "String tmp Relay State = SAML 2 Utils . generate ID With Server ID ( ) ;", "relay State Map . put ( tmp Relay State , relay State ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + user ID + STR_ + user Session + STR_ + relay State + STR_ + tmp Relay State + STR_ + is SOAP Initiated + STR_ + is IDP Initiated + STR_ + protocol + STR_ + realm + STR_ + idp Entity ID + STR_ + sp Entity ID + STR_ + current Status + STR_ + single Logout Request XML + STR_ + single Logout Response XML ) ; }", "if ( user Session != null ) {", "user Session Map . put ( tmp Relay State , user Session ) ; }", "if ( user ID != null ) {", "user ID Map . put ( tmp Relay State , user ID ) ; }", "if ( is SOAP Initiated ) {", "is SOAP Initiated Map . put ( tmp Relay State , Boolean . TRUE ) ; }", "else {", "is SOAP Initiated Map . put ( tmp Relay State , Boolean . FALSE ) ; }", "if ( is IDP Initiated ) {", "is IDP Initiated Map . put ( tmp Relay State , Boolean . TRUE ) ; }", "else {", "is IDP Initiated Map . put ( tmp Relay State , Boolean . FALSE ) ; }", "if ( protocol != null ) {", "orig Protocol Map . put ( tmp Relay State , protocol ) ;", "int list Size = protocol List . size ( ) ;", "List list = new Array List ( list Size - NUM_ ) ;", "for ( int i = NUM_ ; i < list Size ; i ++ ) {", "String proto = ( String ) protocol List . get ( i ) ;", "if ( ! proto . equals ( protocol ) ) {", "list . add ( proto ) ; } }", "protocol List Map . put ( tmp Relay State , list ) ; }", "if ( realm != null ) {", "realm Map . put ( tmp Relay State , realm ) ; }", "if ( idp Entity ID != null ) {", "idp Entity ID Map . put ( tmp Relay State , idp Entity ID ) ; }", "if ( sp Entity ID != null ) {", "sp Entity ID Map . put ( tmp Relay State , sp Entity ID ) ; }", "if ( single Logout Request XML != null ) {", "slo Request XML Map . put ( tmp Relay State , single Logout Request XML ) ; }", "if ( single Logout Response XML != null ) {", "slo Response XML Map . put ( tmp Relay State , single Logout Response XML ) ; }", "current Status Map . put ( tmp Relay State , new Integer ( current Status ) ) ;", "return tmp Relay State ; }"]}
{"ids": "51137", "code": ["private void next Packet ( ) throws IO Exception {", "int off = NUM_ ;", "int remaining = NUM_ ;", "do {", "int count = base Stream . read ( header , off , remaining ) ;", "if ( count <= NUM_ ) {", "throw new EOF Exception ( STR_ + ( NUM_ - remaining ) + STR_ + NUM_ ) ; }", "remaining -= count ;", "off += count ; }", "while ( remaining > NUM_ ) ;", "int compressed Length = ( header [ NUM_ ] & NUM_ ) + ( ( header [ NUM_ ] & NUM_ ) << NUM_ ) + ( ( header [ NUM_ ] & NUM_ ) << NUM_ ) ;", "last Packet Seq = header [ NUM_ ] & NUM_ ;", "int decompressed Length = ( header [ NUM_ ] & NUM_ ) + ( ( header [ NUM_ ] & NUM_ ) << NUM_ ) + ( ( header [ NUM_ ] & NUM_ ) << NUM_ ) ;", "if ( decompressed Length != NUM_ ) {", "do Decompress = true ;", "remaining Bytes += decompressed Length ;", "byte [ ] compressed Buffer = new byte [ compressed Length ] ;", "byte [ ] decompressed Buffer = new byte [ decompressed Length ] ;", "off = NUM_ ;", "remaining = compressed Buffer . length ;", "do {", "int count = base Stream . read ( compressed Buffer , off , remaining ) ;", "if ( count <= NUM_ ) {", "throw new EOF Exception ( STR_ + ( NUM_ - remaining ) + STR_ + NUM_ ) ; }", "remaining -= count ;", "off += count ; }", "while ( remaining > NUM_ ) ;", "Inflater inflater = new Inflater ( ) ;", "inflater . set Input ( compressed Buffer ) ;", "try {", "int actual Uncompress Bytes = inflater . inflate ( decompressed Buffer ) ;", "if ( actual Uncompress Bytes != decompressed Length ) {", "throw new IO Exception ( STR_ + actual Uncompress Bytes + STR_ + decompressed Length ) ; } }", "catch ( Data Format Exception dfe ) {", "throw new IO Exception ( dfe ) ; }", "inflater . end ( ) ;", "decompressed Byte Stream = new Byte Array Input Stream ( decompressed Buffer ) ; }", "else {", "do Decompress = false ;", "remaining Bytes += compressed Length ;", "decompressed Byte Stream = null ; }", "logger . trace ( STR_ + last Packet Seq + STR_ + remaining Bytes ) ; }"]}
{"ids": "10914", "code": ["protected boolean load Field ( DDF Record record , String tag Name , int field Index ) {", "if ( fields . get ( tag Name ) == null ) {", "DDF Field ddf = record . find Field ( tag Name , field Index ) ;", "if ( ddf != null ) {", "fields . put ( tag Name , ddf ) ;", "ddf . to String ( ) ;", "return true ; } }", "return false ; }"]}
{"ids": "22731", "code": ["public Http Request ( final Char Sequence url , final String method ) throws Http Request Exception {", "try {", "this . url = new URL ( url . to String ( ) ) ; }", "catch ( Malformed URL Exception e ) {", "throw new Http Request Exception ( e ) ; }", "this . request Method = method ; }"]}
{"ids": "33061", "code": ["private boolean is Error ( I Problem problem , Type type ) {", "return true ; }"]}
{"ids": "65914", "code": ["private static void add Process Parameters ( int AD P Instance ID , Map < String , Object > params , String trx Name ) {", "final String sql = STR_ + STR_ + X AD P Instance Para . COLUMNNAME Parameter Name + STR_ + X AD P Instance Para . COLUMNNAME P String + STR_ + X AD P Instance Para . COLUMNNAME P String To + STR_ + X AD P Instance Para . COLUMNNAME P Number + STR_ + X AD P Instance Para . COLUMNNAME P Number To + STR_ + X AD P Instance Para . COLUMNNAME P Date + STR_ + X AD P Instance Para . COLUMNNAME P Date To + STR_ + X AD P Instance Para . COLUMNNAME Info + STR_ + X AD P Instance Para . COLUMNNAME Info To + STR_ + X AD P Instance Para . Table Name + STR_ + X AD P Instance Para . COLUMNNAME AD P Instance ID + STR_ ;", "Prepared Statement pstmt = null ;", "Result Set rs = null ;", "try {", "pstmt = DB . prepare Statement ( sql , Result Set . TYPE FORWARD ONLY , Result Set . CONCUR READ ONLY , trx Name ) ;", "pstmt . set Int ( NUM_ , AD P Instance ID ) ;", "rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) ) {", "String name = rs . get String ( NUM_ ) ;", "String p Str = rs . get String ( NUM_ ) ;", "String p Str To = rs . get String ( NUM_ ) ;", "Big Decimal p Num = rs . get Big Decimal ( NUM_ ) ;", "Big Decimal p Num To = rs . get Big Decimal ( NUM_ ) ;", "Timestamp p Date = rs . get Timestamp ( NUM_ ) ;", "Timestamp p Date To = rs . get Timestamp ( NUM_ ) ;", "if ( p Str != null ) {", "if ( p Str To != null ) {", "params . put ( name + STR_ , p Str ) ;", "params . put ( name + STR_ , p Str To ) ; }", "else {", "params . put ( name , p Str ) ; } }", "else if ( p Date != null ) {", "if ( p Date To != null ) {", "params . put ( name + STR_ , p Date ) ;", "params . put ( name + STR_ , p Date To ) ; }", "else {", "params . put ( name , p Date ) ; } }", "else if ( p Num != null ) {", "if ( p Num To != null ) {", "params . put ( name + STR_ , p Num ) ;", "params . put ( name + STR_ , p Num To ) ; }", "else {", "params . put ( name , p Num ) ; } }", "String info = rs . get String ( NUM_ ) ;", "String info To = rs . get String ( NUM_ ) ;", "params . put ( name + STR_ , ( info != null ? info : STR_ ) ) ;", "params . put ( name + STR_ , ( info To != null ? info To : STR_ ) ) ; } }", "catch ( SQL Exception e ) {", "throw new DB Exception ( e , sql ) ; }", "finally {", "DB . close ( rs , pstmt ) ;", "rs = null ;", "pstmt = null ; } }"]}
{"ids": "85670", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) public Record Set Page ( Input input ) {", "Deserializer deserizalizer = new Deserializer ( ) ;", "Map map Result = deserizalizer . deserialize ( input , Map . class ) ;", "cursor = ( Integer ) map Result . get ( STR_ ) ;", "data = ( List < List < Object > > ) map Result . get ( STR_ ) ; }"]}
{"ids": "83429", "code": ["public Optional < String > endpoint ( ) {", "return Optional . of Nullable ( endpoint Arg ) ; }"]}
{"ids": "57006", "code": ["void send Message To Handler With Controller Reset ( List < OF Message > messages ) throws Exception {", "send Message To Handler No Controller Reset ( messages ) ; }"]}
{"ids": "22181", "code": ["public boolean is Redeploy Mode ( ) {", "return scenario . equals ( Property Constants . REDEPLOY MODE ) ? true : false ; }"]}
{"ids": "12067", "code": ["public static RSA Private Key load From Key Store ( URL keystore Url , String password ) throws IO Exception , No Such Algorithm Exception , Certificate Exception , Key Store Exception , Unrecoverable Key Exception {", "logger . debug ( STR_ , keystore Url ) ;", "URL Connection connection = keystore Url . open Connection ( ) ;", "Input Stream is = connection . get Input Stream ( ) ;", "try {", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ , Arrays . to String ( Security . get Providers ( ) ) ) ;", "Key Store key Store ;", "try {", "try {", "key Store = Key Store . get Instance ( STR_ , STR_ ) ; }", "catch ( No Such Provider Exception e ) {", "key Store = Key Store . get Instance ( STR_ , Crypto Util . get Security Provider Name ( Key Store . class ) ) ; } }", "catch ( No Such Provider Exception e ) {", "key Store = Key Store . get Instance ( STR_ ) ; }", "logger . debug ( STR_ , key Store . get Provider ( ) ) ;", "key Store . load ( is , password == null ? null : password . to Char Array ( ) ) ;", "Enumeration < String > aliases = key Store . aliases ( ) ;", "Key key = null ;", "while ( aliases . has More Elements ( ) ) {", "String a = ( String ) aliases . next Element ( ) ;", "key = key Store . get Key ( a , password == null ? null : password . to Char Array ( ) ) ; }", "return ( RSA Private Key ) key ; }", "finally {", "is . close ( ) ; } }"]}
{"ids": "36143", "code": ["@ Override public double conf Small M ( double total Example Weight , double delta ) {", "double term = Math . log ( NUM_ / delta ) / ( NUM_ * total Example Weight ) ;", "return Math . sqrt ( term ) + Math . pow ( term , NUM_ ) + Math . pow ( term , NUM_ ) ; }"]}
{"ids": "30639", "code": ["public static < T > boolean contains ( Iterator < T > iterator , T element ) {", "if ( iterator != null ) {", "while ( iterator . has Next ( ) ) {", "T candidate = iterator . next ( ) ;", "if ( Object Utils . null Safe Equals ( candidate , element ) ) return true ; } }", "return false ; }"]}
{"ids": "7622", "code": ["@ Override public void draw Domain Gridline ( Graphics 2 D g 2 , Category Plot plot , Rectangle 2 D data Area , double value ) {", "Line 2 D line = null ;", "Plot Orientation orientation = plot . get Orientation ( ) ;", "if ( orientation == Plot Orientation . HORIZONTAL ) {", "line = new Line 2 D . Double ( data Area . get Min X ( ) , value , data Area . get Max X ( ) , value ) ; }", "else if ( orientation == Plot Orientation . VERTICAL ) {", "line = new Line 2 D . Double ( value , data Area . get Min Y ( ) , value , data Area . get Max Y ( ) ) ; }", "Paint paint = plot . get Domain Gridline Paint ( ) ;", "if ( paint == null ) {", "paint = Category Plot . DEFAULT GRIDLINE PAINT ; }", "g 2 . set Paint ( paint ) ;", "Stroke stroke = plot . get Domain Gridline Stroke ( ) ;", "if ( stroke == null ) {", "stroke = Category Plot . DEFAULT GRIDLINE STROKE ; }", "g 2 . set Stroke ( stroke ) ;", "g 2 . draw ( line ) ; }"]}
{"ids": "38018", "code": ["public void add Pre Built Classifier ( Classifier c ) {", "m pre Built Classifiers . add ( c ) ; }"]}
{"ids": "34335", "code": ["@ Override public Insn List generate ( ) {", "return merge ( generated Instructions . to Array ( ) ) ; }"]}
{"ids": "41205", "code": ["public static void put Java Variables Into Engine ( final Script Engine engine , final Map < String , Object > variables ) {", "final Bindings bindings = new Simple Bindings ( ) ;", "for ( String key : variables . key Set ( ) ) {", "bindings . put ( key , variables . get ( key ) ) ; }", "engine . set Bindings ( bindings , Script Context . ENGINE SCOPE ) ; }"]}
{"ids": "7581", "code": ["private Point 2 D calculate Label Point ( Line 2 D line , Rectangle Anchor anchor , double delta X , double delta Y ) {", "double x , y ;", "boolean left = ( anchor == Rectangle Anchor . BOTTOM LEFT || anchor == Rectangle Anchor . LEFT || anchor == Rectangle Anchor . TOP LEFT ) ;", "boolean right = ( anchor == Rectangle Anchor . BOTTOM RIGHT || anchor == Rectangle Anchor . RIGHT || anchor == Rectangle Anchor . TOP RIGHT ) ;", "boolean top = ( anchor == Rectangle Anchor . TOP LEFT || anchor == Rectangle Anchor . TOP || anchor == Rectangle Anchor . TOP RIGHT ) ;", "boolean bottom = ( anchor == Rectangle Anchor . BOTTOM LEFT || anchor == Rectangle Anchor . BOTTOM || anchor == Rectangle Anchor . BOTTOM RIGHT ) ;", "Rectangle rect = line . get Bounds ( ) ;", "if ( line . get X 1 ( ) == line . get X 2 ( ) ) {", "x = line . get X 1 ( ) ;", "y = ( line . get Y 1 ( ) + line . get Y 2 ( ) ) / NUM_ ;", "if ( left ) {", "x = x - delta X ; }", "if ( right ) {", "x = x + delta X ; }", "if ( top ) {", "y = Math . min ( line . get Y 1 ( ) , line . get Y 2 ( ) ) + delta Y ; }", "if ( bottom ) {", "y = Math . max ( line . get Y 1 ( ) , line . get Y 2 ( ) ) - delta Y ; } }", "else {", "x = ( line . get X 1 ( ) + line . get X 2 ( ) ) / NUM_ ;", "y = line . get Y 1 ( ) ;", "if ( left ) {", "x = Math . min ( line . get X 1 ( ) , line . get X 2 ( ) ) + delta X ; }", "if ( right ) {", "x = Math . max ( line . get X 1 ( ) , line . get X 2 ( ) ) - delta X ; }", "if ( top ) {", "y = y - delta Y ; }", "if ( bottom ) {", "y = y + delta Y ; } }", "return new Point 2 D . Double ( x , y ) ; }"]}
{"ids": "85796", "code": ["public void fling ( int start X , int start Y , int velocity X , int velocity Y , int min X , int max X , int min Y , int max Y ) {", "if ( m Flywheel && ! m Finished ) {", "float old Vel = get Curr Velocity ( ) ;", "float dx = ( float ) ( m Final X - m Start X ) ;", "float dy = ( float ) ( m Final Y - m Start Y ) ;", "float hyp = ( float ) Math . hypot ( dx , dy ) ;", "float ndx = dx / hyp ;", "float ndy = dy / hyp ;", "float old Velocity X = ndx * old Vel ;", "float old Velocity Y = ndy * old Vel ;", "if ( Math . signum ( velocity X ) == Math . signum ( old Velocity X ) && Math . signum ( velocity Y ) == Math . signum ( old Velocity Y ) ) {", "velocity X += old Velocity X ;", "velocity Y += old Velocity Y ; } }", "m Mode = FLING MODE ;", "m Finished = false ;", "float velocity = ( float ) Math . hypot ( velocity X , velocity Y ) ;", "m Velocity = velocity ;", "m Duration = get Spline Fling Duration ( velocity ) ;", "m Start Time = Animation Utils . current Animation Time Millis ( ) ;", "m Start X = start X ;", "m Start Y = start Y ;", "float coeff X = velocity == NUM_ ? NUM_ : velocity X / velocity ;", "float coeff Y = velocity == NUM_ ? NUM_ : velocity Y / velocity ;", "double total Distance = get Spline Fling Distance ( velocity ) ;", "m Distance = ( int ) ( total Distance * Math . signum ( velocity ) ) ;", "m Min X = min X ;", "m Max X = max X ;", "m Min Y = min Y ;", "m Max Y = max Y ;", "m Final X = start X + ( int ) Math . round ( total Distance * coeff X ) ;", "m Final X = Math . min ( m Final X , m Max X ) ;", "m Final X = Math . max ( m Final X , m Min X ) ;", "m Final Y = start Y + ( int ) Math . round ( total Distance * coeff Y ) ;", "m Final Y = Math . min ( m Final Y , m Max Y ) ;", "m Final Y = Math . max ( m Final Y , m Min Y ) ; }"]}
{"ids": "39124", "code": ["public void delete With Missing ( Attribute att ) {", "delete With Missing ( att . index ( ) ) ; }"]}
{"ids": "23164", "code": ["protected void sprint ( String a ) {", "if ( a == null ) {", "string Representation += get Indentation ( ) ;", "string Representation += STR_ ;", "return ; }", "if ( a . compare To ( STR_ ) == NUM_ || a . compare To ( STR_ ) == NUM_ ) {", "indentation -- ; }", "string Representation += get Indentation ( ) ;", "string Representation += a ;", "string Representation += STR_ ;", "if ( a . compare To ( STR_ ) == NUM_ || a . compare To ( STR_ ) == NUM_ ) {", "indentation ++ ; } }"]}
{"ids": "52233", "code": ["private void read Object ( Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "if ( sem Ims == null ) {", "throw new Null Pointer Exception ( ) ; } }"]}
{"ids": "86815", "code": ["private static Pair < Long , Long > load ( Byte Array a , Input Stream stream , long memory Offset , long count , Common Index positions , CRC 32 checksum , Byte Array checksums , Preread Hash Function hf , boolean checksums Loaded , long current Seq ) throws IO Exception {", "long tmp Current Seq = current Seq ;", "final byte [ ] buffer = new byte [ NUM_ * NUM_ ] ;", "long total Read = NUM_ ;", "int bytes Read ;", "long pos = memory Offset ;", "while ( total Read < count && ( bytes Read = stream . read ( buffer , NUM_ , ( int ) Math . min ( count - total Read , buffer . length ) ) ) != - NUM_ ) {", "a . set ( pos , buffer , bytes Read ) ;", "pos += bytes Read ;", "int j = NUM_ ;", "while ( j < bytes Read ) {", "if ( positions . get ( tmp Current Seq + NUM_ ) == positions . get ( tmp Current Seq ) ) {", "hf . irvine Hash ( NUM_ ) ;", "tmp Current Seq ++ ;", "continue ; }", "final int len = ( int ) ( positions . get ( tmp Current Seq + NUM_ ) - ( memory Offset + total Read + j ) ) ;", "if ( j + len <= bytes Read ) {", "checksum . update ( buffer , j , len ) ;", "hf . irvine Hash ( buffer , j , len ) ;", "hf . irvine Hash ( positions . get ( tmp Current Seq + NUM_ ) - positions . get ( tmp Current Seq ) ) ;", "if ( checksums Loaded ) {", "if ( ( byte ) checksum . get Value ( ) != checksums . get ( tmp Current Seq ) ) {", "throw new Corrupt Sdf Exception ( STR_ + tmp Current Seq + STR_ ) ; } }", "else {", "checksums . set ( tmp Current Seq , ( byte ) checksum . get Value ( ) ) ; }", "tmp Current Seq ++ ;", "checksum . reset ( ) ; }", "else {", "hf . irvine Hash ( buffer , j , bytes Read - j ) ;", "checksum . update ( buffer , j , bytes Read - j ) ; }", "j += len ; }", "total Read += bytes Read ; }", "return new Pair < > ( total Read , tmp Current Seq ) ; }"]}
{"ids": "79427", "code": ["public static java . sql . Date to Sql Date ( String month Str , String day Str , String year Str ) {", "java . util . Date new Date = to Date ( month Str , day Str , year Str , STR_ , STR_ , STR_ ) ;", "if ( new Date != null ) {", "return new java . sql . Date ( new Date . get Time ( ) ) ; }", "else {", "return null ; } }"]}
{"ids": "80365", "code": ["protected void save PNG Image ( String filename , Buffered Image image ) throws IO Exception {", "File file = new File ( filename ) ;", "Image IO . write ( image , STR_ , file ) ; }"]}
{"ids": "9292", "code": ["public void unset Permission ( String name ) {", "permissions . remove ( name . to Lower Case ( java . util . Locale . ENGLISH ) ) ;", "permissible . recalculate Permissions ( ) ; }"]}
{"ids": "28013", "code": ["public void before Insert ( int index , byte element ) {", "if ( index > size || index < NUM_ ) throw new Index Out Of Bounds Exception ( STR_ + index + STR_ + size ) ;", "ensure Capacity ( size + NUM_ ) ;", "System . arraycopy ( elements , index , elements , index + NUM_ , size - index ) ;", "elements [ index ] = element ;", "size ++ ; }"]}
{"ids": "11832", "code": ["public OM Graphic List read Cached Graphics ( URL url ) throws java . io . IO Exception {", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ ) ; }", "OM Graphic List omgraphics = new OM Graphic List ( ) ;", "if ( url != null ) {", "omgraphics . read Graphics ( url ) ; }", "return omgraphics ; }"]}
{"ids": "68933", "code": ["int size ( ) {", "return nox Items . size ( ) ; }"]}
{"ids": "25748", "code": ["public < V > Future < V > invoke ( String method , String path , Map < String , ? > arguments , Result Handler < V > result Handler ) {", "if ( method == null ) {", "throw new Illegal Argument Exception ( ) ; }", "if ( path == null ) {", "throw new Illegal Argument Exception ( ) ; }", "if ( arguments == null ) {", "throw new Illegal Argument Exception ( ) ; }", "return executor Service . submit ( new Invocation Callback < > ( method , path , arguments , result Handler ) ) ; }"]}
{"ids": "4265", "code": ["@ Override public String replace Path ( String input URI ) {", "if ( input URI . contains ( Temporary Directory Manager . DIRECTORY TEMPLATE ) ) {", "return input URI . replace ( Temporary Directory Manager . DIRECTORY TEMPLATE , TEMPLATE DIRECTORY NAME ) ; }", "return input URI ; }"]}
{"ids": "27637", "code": ["@ Override public void create ( ) {", "assert Writable ( ) ;", "final String name = get Namespace ( ) + STR_ + NAME SEARCH ;", "final I Index Manager index Manager = get Index Manager ( ) ;", "final Properties p = get Properties ( ) ;", "final Index Metadata index Metadata = new Index Metadata ( index Manager , p , name , UUID . random UUID ( ) , Index Type Enum . B Tree ) ;", "final I Key Builder Factory key Builder Factory ; {", "final Properties tmp = new Properties ( p ) ;", "tmp . set Property ( Key Builder . Options . STRENGTH , p . get Property ( Options . INDEXER COLLATOR STRENGTH , Options . DEFAULT INDEXER COLLATOR STRENGTH ) ) ;", "key Builder Factory = new Default Key Builder Factory ( tmp ) ; }", "final boolean fields Enabled = Boolean . parse Boolean ( p . get Property ( Options . FIELDS ENABLED , Options . DEFAULT FIELDS ENABLED ) ) ;", "if ( log . is Info Enabled ( ) ) log . info ( Options . FIELDS ENABLED + STR_ + fields Enabled ) ;", "index Metadata . set Tuple Serializer ( new Full Text Index Tuple Serializer < V > ( key Builder Factory , Default Tuple Serializer . get Default Leaf Keys Coder ( ) , Empty Raba Value Coder . INSTANCE , fields Enabled ) ) ;", "index Manager . register Index ( index Metadata ) ;", "if ( log . is Info Enabled ( ) ) log . info ( STR_ + name ) ; }"]}
{"ids": "10625", "code": ["public static PGP Public Key merge Signatures ( PGP Public Key target Key , PGP Public Key source Key ) throws PGP Exception {", "if ( ! Objects . deep Equals ( target Key . get Fingerprint ( ) , source Key . get Fingerprint ( ) ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return copy Signatures ( target Key , source Key ) ; }"]}
{"ids": "11427", "code": ["public void draw Background ( Graphics g ) {", "g . fill Rect ( NUM_ , NUM_ , get Width ( ) , get Height ( ) ) ; }"]}
{"ids": "1990", "code": ["public static double info ( int counts [ ] ) {", "int total = NUM_ ;", "double x = NUM_ ;", "for ( int j = NUM_ ; j < counts . length ; j ++ ) {", "x -= xlogx ( counts [ j ] ) ;", "total += counts [ j ] ; }", "return x + xlogx ( total ) ; }"]}
{"ids": "32355", "code": ["public Compute Job Failover Exception ( Throwable cause ) {", "this ( cause . get Message ( ) , cause ) ; }"]}
{"ids": "43136", "code": ["public boolean has Newer Version ( ) {", "return latest Stable . compare To ( current Version ) > NUM_ ; }"]}
{"ids": "42843", "code": ["@ Override public void read NBT ( NBT Tag Compound compound ) {", "super . read NBT ( compound ) ;", "if ( compound . has Key ( STR_ ) ) {", "this . exhaustion Timer = compound . get Integer ( STR_ ) ; }", "if ( ! compound . has Key ( STR_ ) ) {", "set Food Level ( get Food Level ( ) * NUM_ ) ;", "set Saturation ( NUM_ ) ; }", "if ( get Food Level ( ) > NUM_ ) set Food Level ( NUM_ ) ;", "if ( get Saturation Level ( ) > NUM_ ) set Saturation ( NUM_ ) ; }"]}
{"ids": "66971", "code": ["private static boolean verify XML ( String file Name ) {", "Schema Factory sf = Schema Factory . new Instance ( W 3 C XML SCHEMA ) ;", "Source xsd File = new Stream Source ( new File ( XSD FILE PATH ) ) ;", "Source xml File = new Stream Source ( new File ( file Name ) ) ;", "boolean valid XML = false ;", "try {", "Schema schema = sf . new Schema ( xsd File ) ;", "Validator validator = schema . new Validator ( ) ;", "try {", "validator . validate ( xml File ) ;", "valid XML = true ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "if ( ! valid XML ) {", "new IO Exception ( STR_ ) ; } }", "catch ( SAX Exception e ) {", "e . print Stack Trace ( ) ; }", "return valid XML ; }"]}
{"ids": "64205", "code": ["private void need New Buffer ( int newcount ) {", "if ( current Buffer Index < buffers . size ( ) - NUM_ ) {", "filled Buffer Sum += current Buffer . length ;", "current Buffer Index ++ ;", "current Buffer = buffers . get ( current Buffer Index ) ; }", "else {", "int new Buffer Size ;", "if ( current Buffer == null ) {", "new Buffer Size = newcount ;", "filled Buffer Sum = NUM_ ; }", "else {", "new Buffer Size = Math . max ( current Buffer . length << NUM_ , newcount - filled Buffer Sum ) ;", "filled Buffer Sum += current Buffer . length ; }", "current Buffer Index ++ ;", "current Buffer = new byte [ new Buffer Size ] ;", "buffers . add ( current Buffer ) ; } }"]}
{"ids": "51407", "code": ["private static void dual Pivot Quicksort ( byte [ ] a , int left , int right ) {", "int sixth = ( right - left + NUM_ ) / NUM_ ;", "int e 1 = left + sixth ;", "int e 5 = right - sixth ;", "int e 3 = ( left + right ) > > > NUM_ ;", "int e 4 = e 3 + sixth ;", "int e 2 = e 3 - sixth ;", "byte ae 1 = a [ e 1 ] , ae 2 = a [ e 2 ] , ae 3 = a [ e 3 ] , ae 4 = a [ e 4 ] , ae 5 = a [ e 5 ] ;", "if ( ae 1 > ae 2 ) {", "byte t = ae 1 ;", "ae 1 = ae 2 ;", "ae 2 = t ; }", "if ( ae 4 > ae 5 ) {", "byte t = ae 4 ;", "ae 4 = ae 5 ;", "ae 5 = t ; }", "if ( ae 1 > ae 3 ) {", "byte t = ae 1 ;", "ae 1 = ae 3 ;", "ae 3 = t ; }", "if ( ae 2 > ae 3 ) {", "byte t = ae 2 ;", "ae 2 = ae 3 ;", "ae 3 = t ; }", "if ( ae 1 > ae 4 ) {", "byte t = ae 1 ;", "ae 1 = ae 4 ;", "ae 4 = t ; }", "if ( ae 3 > ae 4 ) {", "byte t = ae 3 ;", "ae 3 = ae 4 ;", "ae 4 = t ; }", "if ( ae 2 > ae 5 ) {", "byte t = ae 2 ;", "ae 2 = ae 5 ;", "ae 5 = t ; }", "if ( ae 2 > ae 3 ) {", "byte t = ae 2 ;", "ae 2 = ae 3 ;", "ae 3 = t ; }", "if ( ae 4 > ae 5 ) {", "byte t = ae 4 ;", "ae 4 = ae 5 ;", "ae 5 = t ; }", "a [ e 1 ] = ae 1 ;", "a [ e 3 ] = ae 3 ;", "a [ e 5 ] = ae 5 ;", "byte pivot 1 = ae 2 ;", "a [ e 2 ] = a [ left ] ;", "byte pivot 2 = ae 4 ;", "a [ e 4 ] = a [ right ] ;", "int less = left + NUM_ ;", "int great = right - NUM_ ;", "boolean pivots Differ = ( pivot 1 != pivot 2 ) ;", "if ( pivots Differ ) {", "outer : for ( int k = less ; k <= great ; k ++ ) {", "byte ak = a [ k ] ;", "if ( ak < pivot 1 ) {", "if ( k != less ) {", "a [ k ] = a [ less ] ;", "a [ less ] = ak ; }", "less ++ ; }", "else if ( ak > pivot 2 ) {", "while ( a [ great ] > pivot 2 ) {", "if ( great -- == k ) {", "break outer ; } }", "if ( a [ great ] < pivot 1 ) {", "a [ k ] = a [ less ] ;", "a [ less ++ ] = a [ great ] ;", "a [ great -- ] = ak ; }", "else {", "a [ k ] = a [ great ] ;", "a [ great -- ] = ak ; } } } }", "else {", "for ( int k = less ; k <= great ; k ++ ) {", "byte ak = a [ k ] ;", "if ( ak == pivot 1 ) {", "continue ; }", "if ( ak < pivot 1 ) {", "if ( k != less ) {", "a [ k ] = a [ less ] ;", "a [ less ] = ak ; }", "less ++ ; }", "else {", "while ( a [ great ] > pivot 1 ) {", "great -- ; }", "if ( a [ great ] < pivot 1 ) {", "a [ k ] = a [ less ] ;", "a [ less ++ ] = a [ great ] ;", "a [ great -- ] = ak ; }", "else {", "a [ k ] = pivot 1 ;", "a [ great -- ] = ak ; } } } }", "a [ left ] = a [ less - NUM_ ] ;", "a [ less - NUM_ ] = pivot 1 ;", "a [ right ] = a [ great + NUM_ ] ;", "a [ great + NUM_ ] = pivot 2 ;", "do Sort ( a , left , less - NUM_ ) ;", "do Sort ( a , great + NUM_ , right ) ;", "if ( ! pivots Differ ) {", "return ; }", "if ( less < e 1 && great > e 5 ) {", "while ( a [ less ] == pivot 1 ) {", "less ++ ; }", "while ( a [ great ] == pivot 2 ) {", "great -- ; }", "outer : for ( int k = less ; k <= great ; k ++ ) {", "byte ak = a [ k ] ;", "if ( ak == pivot 2 ) {", "while ( a [ great ] == pivot 2 ) {", "if ( great -- == k ) {", "break outer ; } }", "if ( a [ great ] == pivot 1 ) {", "a [ k ] = a [ less ] ;", "a [ less ++ ] = pivot 1 ; }", "else {", "a [ k ] = a [ great ] ; }", "a [ great -- ] = pivot 2 ; }", "else if ( ak == pivot 1 ) {", "a [ k ] = a [ less ] ;", "a [ less ++ ] = pivot 1 ; } } }", "do Sort ( a , less , great ) ; }"]}
{"ids": "32000", "code": ["@ Nullable public N node ( @ Nullable Object key , @ Nullable Collection < N > inc ) {", "return node ( key , inc , null ) ; }"]}
{"ids": "75563", "code": ["public void increment ( ) {", "counter . get And Increment ( ) ; }"]}
{"ids": "77878", "code": ["public Default Deployment Cache ( ) {", "this . cache = Collections . synchronized Map ( new Hash Map < String , T > ( ) ) ; }"]}
{"ids": "6465", "code": ["private int find Insertion Point ( Sorted List Entry entry ) {", "int insertion Point = sorted Model . size ( ) ;", "if ( sort Order != Sort Order . UNORDERED ) {", "insertion Point = Collections . binary Search ( ( List ) sorted Model , entry ) ;", "if ( insertion Point < NUM_ ) {", "insertion Point = - ( insertion Point + NUM_ ) ; } }", "return insertion Point ; }"]}
{"ids": "6450", "code": ["private boolean have Shown Message Before ( Update Message msg ) {", "if ( ! msg . is Shown Once ( ) ) return false ;", "load Seen Messages ( ) ;", "if ( seen Messages == null || seen Messages . size ( ) == NUM_ || ! seen Messages . contains ( msg ) ) {", "if ( seen Messages == null ) seen Messages = new Hash Set < > ( ) ;", "seen Messages . add ( msg ) ;", "save Seen Messages ( ) ;", "return false ; }", "return true ; }"]}
{"ids": "73140", "code": ["public void data Source Added ( int index ) {", "update ( ) ;", "update Coordinate Projection Combo Boxes ( ) ; }"]}
{"ids": "65188", "code": ["public boolean field Is Static ( ) {", "return Modifier . is Static ( field . get Modifiers ( ) ) ; }"]}
{"ids": "42311", "code": ["void new Equation ( DF Lattice Cell lhs , DF Operator operator , DF Lattice Cell op 1 , DF Lattice Cell op 2 , DF Lattice Cell op 3 ) {", "DF Equation eq = new DF Equation ( lhs , operator , op 1 , op 2 , op 3 ) ;", "equations . add Graph Node ( eq ) ;", "equations . add Graph Node ( lhs ) ;", "equations . add Graph Node ( op 1 ) ;", "equations . add Graph Node ( op 2 ) ;", "equations . add Graph Node ( op 3 ) ;", "new Equations . add ( eq ) ;", "op 1 . add Use ( eq ) ;", "op 2 . add Use ( eq ) ;", "op 3 . add Use ( eq ) ;", "lhs . add Def ( eq ) ;", "if ( EAGER && eq . evaluate ( ) ) changed Cell ( lhs ) ; }"]}
{"ids": "32194", "code": ["@ Override public void stop ( ) {", "if ( stopping . compare And Set ( false , true ) ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + cache Name + STR_ ) ;", "wake Up ( ) ;", "boolean graceful = true ;", "for ( Grid Worker worker : flush Threads ) graceful &= U . join ( worker , log ) ;", "if ( ! graceful ) log . warning ( STR_ ) ; } }"]}
{"ids": "21775", "code": ["private Set < Storage Port > and Storage Port Sets ( Set < Storage Port > a , Set < Storage Port > b ) {", "Set < Storage Port > result = new Hash Set < Storage Port > ( ) ;", "for ( Storage Port port : a ) {", "if ( b . contains ( port ) ) {", "result . add ( port ) ; } }", "return result ; }"]}
{"ids": "14264", "code": ["public static void add Attribute To Schema ( String service Name , String sub Schema Name , String schema Type , Node attribute Schema Node , SSO Token admin Token ) throws Upgrade Exception {", "Service Schema ss = get Service Schema ( service Name , sub Schema Name , schema Type , admin Token ) ;", "add Attribute To Schema ( ss , attribute Schema Node ) ; }"]}
{"ids": "29544", "code": ["public int next ( int current ) {", "for ( int i = current + NUM_ ; i < ( arguments != null ? arguments . size ( ) : NUM_ ) ; i ++ ) {", "if ( get Argument ( i ) instanceof Math Container ) {", "return i ; } }", "throw new Array Index Out Of Bounds Exception ( STR_ ) ; }"]}
{"ids": "14248", "code": ["@ Override public boolean supports Authentication ( ) {", "if ( DEBUG . message Enabled ( ) ) {", "DEBUG . message ( STR_ ) ; }", "return true ; }"]}
{"ids": "5357", "code": ["protected void reorder App Deployments After Configuration Version ( Element domain ) {", "List < Element > app Deployments = xml Tool . select Elements Matching X Path ( STR_ , domain ) ;", "for ( Element app Deployment : app Deployments ) {", "domain . remove Child ( app Deployment ) ; }", "Element configuration Version = xml Tool . select Element Matching X Path ( STR_ , domain ) ;", "Node before = null ;", "Node List children = domain . get Child Nodes ( ) ;", "for ( int i = NUM_ ; i < children . get Length ( ) ; i ++ ) {", "if ( configuration Version . equals ( children . item ( i ) ) && i < children . get Length ( ) - NUM_ ) {", "before = children . item ( i + NUM_ ) ; } }", "if ( before != null ) {", "for ( Element app Deployment : app Deployments ) {", "domain . insert Before ( app Deployment , before ) ; } }", "else {", "for ( Element app Deployment : app Deployments ) {", "domain . append Child ( app Deployment ) ; } } }"]}
{"ids": "60933", "code": ["public URI ( String scheme , String scheme Specific Part , String fragment ) throws URI Syntax Exception {", "String Builder uri = new String Builder ( ) ;", "if ( scheme != null ) {", "uri . append ( scheme ) ;", "uri . append ( STR_ ) ; }", "if ( scheme Specific Part != null ) {", "ALL LEGAL ENCODER . append Encoded ( uri , scheme Specific Part ) ; }", "if ( fragment != null ) {", "uri . append ( STR_ ) ;", "ALL LEGAL ENCODER . append Encoded ( uri , fragment ) ; }", "parse URI ( uri . to String ( ) , false ) ; }"]}
{"ids": "77410", "code": ["static Facet Method select Facet Method ( Schema Field field , Facet Method method , Integer mincount ) {", "Field Type type = field . get Type ( ) ;", "if ( method == null ) {", "if ( type instanceof Bool Field && ( field . indexed ( ) == true || field . has Doc Values ( ) == false ) ) {", "method = Facet Method . ENUM ; }", "else if ( type . get Numeric Type ( ) != null && ! field . multi Valued ( ) ) {", "method = Facet Method . FCS ; }", "else {", "method = Facet Method . FC ; } }", "if ( method == Facet Method . FC && type . get Numeric Type ( ) != null && ! field . multi Valued ( ) ) {", "method = Facet Method . FCS ; }", "if ( method == Facet Method . UIF && ! field . has Doc Values ( ) && mincount == NUM_ ) {", "method = field . multi Valued ( ) ? Facet Method . FC : Facet Method . FCS ; }", "if ( method == Facet Method . ENUM && Trie Field . get Main Value Prefix ( type ) != null ) {", "method = field . multi Valued ( ) ? Facet Method . FC : Facet Method . FCS ; }", "final boolean multi Token = field . multi Valued ( ) || type . multi Valued Field Cache ( ) ;", "if ( method == Facet Method . FCS && multi Token ) {", "method = Facet Method . FC ; }", "return method ; }"]}
{"ids": "42592", "code": ["public List < Hash Map < String , Object > > clear Overall Chat ( ) {", "try {", "List < Hash Map < String , Object > > my Chat List = my Chats . get ( overall Chat Room Name ) ;", "my Chat List = new Linked List < Hash Map < String , Object > > ( ) ;", "my Chats . put ( overall Chat Room Name , my Chat List ) ;", "Map < Integer , String > new Message = new Hash Map < Integer , String > ( ) ;", "new Message . put ( NUM_ , STR_ ) ;", "scope Application Adapter . send Message To Members ( new Message ) ;", "return my Chat List ; }", "catch ( Exception err ) {", "log . error ( STR_ , err ) ;", "return null ; } }"]}
{"ids": "8846", "code": ["void animate Challenge To ( int y , int velocity ) {", "if ( m Challenge View == null ) {", "return ; }", "cancel Transitions In Progress ( ) ;", "m Challenge Interactive Internal = false ;", "m Challenge View . set Layer Type ( LAYER TYPE HARDWARE , null ) ;", "final int sy = m Challenge View . get Bottom ( ) ;", "final int dy = y - sy ;", "if ( dy == NUM_ ) {", "complete Challenge Scroll ( ) ;", "return ; }", "set Scroll State ( SCROLL STATE SETTLING ) ;", "final int child Height = m Challenge View . get Height ( ) ;", "final int half Height = child Height / NUM_ ;", "final float distance Ratio = Math . min ( NUM_ , NUM_ * Math . abs ( dy ) / child Height ) ;", "final float distance = half Height + half Height * distance Influence For Snap Duration ( distance Ratio ) ;", "int duration = NUM_ ;", "velocity = Math . abs ( velocity ) ;", "if ( velocity > NUM_ ) {", "duration = NUM_ * Math . round ( NUM_ * Math . abs ( distance / velocity ) ) ; }", "else {", "final float child Delta = ( float ) Math . abs ( dy ) / child Height ;", "duration = ( int ) ( ( child Delta + NUM_ ) * NUM_ ) ; }", "duration = Math . min ( duration , MAX SETTLE DURATION ) ;", "m Scroller . start Scroll ( NUM_ , sy , NUM_ , dy , duration ) ;", "post Invalidate On Animation ( ) ; }"]}
{"ids": "23079", "code": ["public Jca X 509 v 3 Certificate Builder ( X 500 Principal issuer , Big Integer serial , Date not Before , Date not After , X 500 Principal subject , Public Key public Key ) {", "super ( X 500 Name . get Instance ( issuer . get Encoded ( ) ) , serial , not Before , not After , X 500 Name . get Instance ( subject . get Encoded ( ) ) , Subject Public Key Info . get Instance ( public Key . get Encoded ( ) ) ) ; }"]}
{"ids": "62308", "code": ["private void write GUID Value ( Byte Buffer buffer , Object value ) throws IO Exception {", "Matcher m = GUID PATTERN . matcher ( to Char Sequence ( value ) ) ;", "if ( ! m . matches ( ) ) {", "throw new IO Exception ( with Error Context ( STR_ + value ) ) ; }", "Byte Buffer orig Buffer = null ;", "byte [ ] tmp Buf = null ;", "if ( buffer . order ( ) != Byte Order . BIG ENDIAN ) {", "orig Buffer = buffer ;", "tmp Buf = new byte [ NUM_ ] ;", "buffer = Byte Buffer . wrap ( tmp Buf ) ; }", "Byte Util . write Hex String ( buffer , m . group ( NUM_ ) ) ;", "Byte Util . write Hex String ( buffer , m . group ( NUM_ ) ) ;", "Byte Util . write Hex String ( buffer , m . group ( NUM_ ) ) ;", "Byte Util . write Hex String ( buffer , m . group ( NUM_ ) ) ;", "Byte Util . write Hex String ( buffer , m . group ( NUM_ ) ) ;", "if ( tmp Buf != null ) {", "Byte Util . swap 4 Bytes ( tmp Buf , NUM_ ) ;", "Byte Util . swap 2 Bytes ( tmp Buf , NUM_ ) ;", "Byte Util . swap 2 Bytes ( tmp Buf , NUM_ ) ;", "orig Buffer . put ( tmp Buf ) ; } }"]}
{"ids": "73276", "code": ["public Neuron Group ( final Network net , final List < Neuron > neurons ) {", "super ( net ) ;", "neuron List = new Array List < Neuron > ( neurons . size ( ) ) ;", "for ( Neuron neuron : neurons ) {", "add Neuron ( neuron ) ; }", "neuron List = new Copy On Write Array List < Neuron > ( neuron List ) ;", "update Rule = get Neuron Type ( ) ;", "reset Subsampling Indices ( ) ; }"]}
{"ids": "56964", "code": ["@ Log Message Doc ( level = STR_ , message = STR_ , explanation = STR_ , recommendation = Log Message Doc . REPORT CONTROLLER BUG ) public List < LD Update > apply Updates ( ) {", "List < LD Update > applied Updates = new Array List < LD Update > ( ) ;", "LD Update update = null ;", "while ( ld Updates . peek ( ) != null ) {", "try {", "update = ld Updates . take ( ) ; }", "catch ( Exception e ) {", "log . error ( STR_ , e ) ; }", "if ( log . is Trace Enabled ( ) ) {", "log . trace ( STR_ , update ) ; }", "switch ( update . get Operation ( ) ) {", "case LINK UPDATED :", "add Or Update Link ( update . get Src ( ) , update . get Src Port ( ) , update . get Dst ( ) , update . get Dst Port ( ) , update . get Type ( ) ) ;", "break ;", "case LINK REMOVED :", "remove Link ( update . get Src ( ) , update . get Src Port ( ) , update . get Dst ( ) , update . get Dst Port ( ) ) ;", "break ;", "case SWITCH UPDATED :", "add Or Update Switch ( update . get Src ( ) ) ;", "break ;", "case SWITCH REMOVED :", "remove Switch ( update . get Src ( ) ) ;", "break ;", "case TUNNEL PORT ADDED :", "add Tunnel Port ( update . get Src ( ) , update . get Src Port ( ) ) ;", "break ;", "case TUNNEL PORT REMOVED :", "remove Tunnel Port ( update . get Src ( ) , update . get Src Port ( ) ) ;", "break ;", "case PORT UP :", "case PORT DOWN :", "break ; }", "applied Updates . add ( update ) ; }", "return ( Collections . unmodifiable List ( applied Updates ) ) ; }"]}
{"ids": "56132", "code": ["boolean is Empty ( ) {", "return m Description . is Empty ( ) && m Types . is Empty ( ) ; }"]}
{"ids": "17350", "code": ["public Star ( int points , float rotation , float insideness ) {", "float x = NUM_ ;", "float y = NUM_ ;", "float radius = NUM_ ;", "points = points < NUM_ ? NUM_ : points ;", "rotation = rotation + ( float ) ( Math . PI / NUM_ ) ;", "boolean flat = insideness >= NUM_ ;", "set Control Point Size ( flat ? points : NUM_ * points ) ;", "final float pi 2 = NUM_ * ( float ) Math . PI ;", "float inside Radius = radius * insideness ;", "Point 2 D . Float pt ;", "for ( int p = NUM_ ; p < points ; ++ p ) {", "double vertex = p ;", "double angle = vertex * pi 2 / points + rotation ;", "pt = new Point 2 D . Float ( ( float ) ( x + Math . cos ( angle ) * radius ) , ( float ) ( y + Math . sin ( angle ) * radius ) ) ;", "push Point ( pt ) ;", "if ( ! flat ) {", "double angle 2 = ( vertex + NUM_ ) * pi 2 / points + rotation ;", "pt = new Point 2 D . Float ( ( float ) ( x + Math . cos ( angle 2 ) * inside Radius ) , ( float ) ( y + Math . sin ( angle 2 ) * inside Radius ) ) ;", "push Point ( pt ) ; } } }"]}
{"ids": "8307", "code": ["private static boolean is Static ( Method m ) {", "int mods = m . get Modifiers ( ) ;", "return ( mods & Modifier . STATIC ) != NUM_ ; }"]}
{"ids": "63314", "code": ["public synchronized boolean try Lock ( ) {", "try {", "lock = file . try Lock ( ) ;", "return lock != null ; }", "catch ( Exception e ) {", "return false ; } }"]}
{"ids": "1677", "code": ["@ Override public void node Down ( Topology topology , long event UID , String node ID ) {", "if ( target Server ID . equals ( node ID ) ) {", "decide On Action ( topology ) ; } }"]}
{"ids": "46830", "code": ["public boolean is Valid ( ) {", "return true ; }"]}
{"ids": "3437", "code": ["private void rollover Log Task ( ) {", "try {", "if ( is Init ) {", "flush ( ) ; } }", "catch ( Exception e ) {", "log . log ( Level . WARNING , e . to String ( ) , e ) ; }", "is Rolling Over = true ;", "try {", "if ( ! is Init ) return ;", "Path saved Path = null ;", "long now = Current Time . current Time ( ) ;", "long last Period End = next Period End ;", "next Period End = next Rollover Time ( now ) ;", "Path path = get Path ( ) ;", "synchronized ( log Lock ) {", "flush Temp Stream ( ) ;", "long length = Files . size ( path ) ;", "if ( last Period End <= now && last Period End > NUM_ ) {", "close Log Stream ( ) ;", "saved Path = get Saved Path ( last Period End - NUM_ ) ; }", "else if ( path != null && get Rollover Size ( ) <= length ) {", "close Log Stream ( ) ;", "saved Path = get Saved Path ( now ) ; } }", "if ( saved Path != null ) {", "move Path To Archive ( saved Path ) ; } }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "synchronized ( log Lock ) {", "is Rolling Over = false ;", "flush Temp Stream ( ) ; }", "rollover Listener . requeue ( rollover Alarm ) ; } }"]}
{"ids": "75311", "code": ["@ Override public void on Update Scrollbar ( int dy ) {", "List < Alphabetical Apps List . Adapter Item > items = m Apps . get Adapter Items ( ) ;", "if ( items . is Empty ( ) || m Num Apps Per Row == NUM_ ) {", "m Scrollbar . set Thumb Offset ( - NUM_ , - NUM_ ) ;", "return ; }", "int row Count = m Apps . get Num App Rows ( ) ;", "get Cur Scroll State ( m Scroll Pos State , - NUM_ ) ;", "if ( m Scroll Pos State . row Index < NUM_ ) {", "m Scrollbar . set Thumb Offset ( - NUM_ , - NUM_ ) ;", "return ; }", "int available Scroll Bar Height = get Available Scroll Bar Height ( ) ;", "int available Scroll Height = get Available Scroll Height ( m Apps . get Num App Rows ( ) ) ;", "if ( available Scroll Height <= NUM_ ) {", "m Scrollbar . set Thumb Offset ( - NUM_ , - NUM_ ) ;", "return ; }", "int scroll Y = get Scroll Top ( m Scroll Pos State ) ;", "int scroll Bar Y = m Background Padding . top + ( int ) ( ( ( float ) scroll Y / available Scroll Height ) * available Scroll Bar Height ) ;", "if ( m Scrollbar . is Thumb Detached ( ) ) {", "int scroll Bar X ;", "if ( Utilities . is Rtl ( get Resources ( ) ) ) {", "scroll Bar X = m Background Padding . left ; }", "else {", "scroll Bar X = get Width ( ) - m Background Padding . right - m Scrollbar . get Thumb Width ( ) ; }", "if ( m Scrollbar . is Dragging Thumb ( ) ) {", "m Scrollbar . set Thumb Offset ( scroll Bar X , ( int ) m Scrollbar . get Last Touch Y ( ) ) ; }", "else {", "int thumb Scroll Y = m Scrollbar . get Thumb Offset ( ) . y ;", "int diff Scroll Y = scroll Bar Y - thumb Scroll Y ;", "if ( diff Scroll Y * dy > NUM_ ) {", "if ( dy < NUM_ ) {", "int offset = ( int ) ( ( dy * thumb Scroll Y ) / ( float ) scroll Bar Y ) ;", "thumb Scroll Y += Math . max ( offset , diff Scroll Y ) ; }", "else {", "int offset = ( int ) ( ( dy * ( available Scroll Bar Height - thumb Scroll Y ) ) / ( float ) ( available Scroll Bar Height - scroll Bar Y ) ) ;", "thumb Scroll Y += Math . min ( offset , diff Scroll Y ) ; }", "thumb Scroll Y = Math . max ( NUM_ , Math . min ( available Scroll Bar Height , thumb Scroll Y ) ) ;", "m Scrollbar . set Thumb Offset ( scroll Bar X , thumb Scroll Y ) ;", "if ( scroll Bar Y == thumb Scroll Y ) {", "m Scrollbar . reattach Thumb To Scroll ( ) ; } }", "else {", "m Scrollbar . set Thumb Offset ( scroll Bar X , thumb Scroll Y ) ; } } }", "else {", "synchronize Scroll Bar Thumb Offset To View Scroll ( m Scroll Pos State , row Count ) ; } }"]}
{"ids": "12121", "code": ["private void emit List Add ( Method method , String field Name , String Builder builder ) {", "builder . append ( STR_ ) ;", "builder . append ( get List Adder Name ( field Name ) ) ;", "builder . append ( STR_ ) ;", "builder . append ( get Type Argument Impl Name ( ( Parameterized Type ) method . get Generic Return Type ( ) , NUM_ ) ) ;", "builder . append ( STR_ ) ;", "builder . append ( get Ensure Name ( field Name ) ) ;", "builder . append ( STR_ ) ;", "builder . append ( field Name ) ;", "builder . append ( STR_ ) ;", "builder . append ( STR_ ) ; }"]}
{"ids": "3265", "code": ["public boolean on Scroll Changed ( int scroll Y ) {", "boolean is Pulling Down Now = scroll Y < last Scroll Y ;", "latest Pulling Down . offer ( is Pulling Down Now ) ;", "if ( latest Pulling Down . size ( ) > PULLING DOWN TIME MAX ) {", "latest Pulling Down . poll ( ) ; }", "last Scroll Y = scroll Y ;", "return get Pulling Down Time ( ) >= PULLING DOWN TIME THRESHOLD ; }"]}
{"ids": "1040", "code": ["@ Exception Handler ( Constraint Violation Exception . class ) @ Response Status ( value = Http Status . BAD REQUEST ) public Map < String , Object > handle Constraint Violation Exception ( Constraint Violation Exception ex ) {", "Collection < Field Error > errors = Field Error . get Errors ( ex . get Constraint Violations ( ) ) ;", "log . warn ( STR_ + errors . to String ( ) ) ;", "return Lemon Util . map Of ( STR_ , STR_ , STR_ , errors ) ; }"]}
{"ids": "52893", "code": ["@ Override public void read External ( Object Input in ) throws IO Exception {", "b = new double [ in . read Int ( ) ] ;", "for ( int p = NUM_ ; p < b . length ; p ++ ) {", "b [ p ] = in . read Double ( ) ; } }"]}
{"ids": "64112", "code": ["private synchronized void add Tracker ( String path , Object marker , File Delete Strategy delete Strategy ) {", "if ( exit When Finished ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( reaper == null ) {", "reaper = new Reaper ( ) ;", "reaper . start ( ) ; }", "trackers . add ( new Tracker ( path , delete Strategy , marker , q ) ) ; }"]}
{"ids": "67504", "code": ["List < Issue > errors ( ) {", "return errors ; }"]}
{"ids": "33501", "code": ["public Audio Wife add On Completion Listener ( On Completion Listener listener ) {", "m Completion Listeners . add ( NUM_ , listener ) ;", "return this ; }"]}
{"ids": "22545", "code": ["public void add Volume To Consistency Group ( String instance Id , String cg ID ) throws Storage Center API Exception {", "Rest Result rr = rest Client . get ( String . format ( STR_ , instance Id ) ) ;", "if ( ! check Results ( rr ) ) {", "throw new Storage Center API Exception ( String . format ( STR_ , rr . get Error Msg ( ) ) ) ; }", "Sc Volume Configuration vol Config = gson . from Json ( rr . get Result ( ) , Sc Volume Configuration . class ) ;", "List < String > profiles = new Array List < > ( ) ;", "for ( Sc Object profile : vol Config . replay Profile List ) {", "if ( ! cg ID . equals ( profile . instance Id ) ) {", "profiles . add ( profile . instance Id ) ; } }", "profiles . add ( cg ID ) ;", "Parameters params = new Parameters ( ) ;", "params . add ( STR_ , profiles . to Array ( new String [ NUM_ ] ) ) ;", "rr = rest Client . put ( String . format ( STR_ , instance Id ) , params . to Json ( ) ) ;", "if ( ! check Results ( rr ) ) {", "throw new Storage Center API Exception ( String . format ( STR_ , rr . get Error Msg ( ) ) ) ; } }"]}
{"ids": "7191", "code": ["public static boolean is Implements Interface ( Class clazz , Class interface Class ) {", "if ( ! ( interface Class . is Interface ( ) ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "boolean result This Class = recursive Is Implements Interface ( clazz , interface Class ) ;", "if ( result This Class ) {", "return true ; }", "return recursive Superclass Implements Interface ( clazz , interface Class ) ; }"]}
{"ids": "58186", "code": ["private static String replace Chars ( String str ) {", "String Buffer buf = new String Buffer ( str ) ;", "int length = buf . length ( ) ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "char current Char = buf . char At ( i ) ;", "if ( current Char == STR_ ) {", "buf . set Char At ( i , STR_ ) ;", "buf . insert ( i + NUM_ , STR_ ) ;", "length = length + NUM_ ;", "i = i + NUM_ ; }", "else if ( current Char == STR_ ) {", "buf . set Char At ( i , STR_ ) ; } }", "return buf . to String ( ) ; }"]}
{"ids": "37282", "code": ["private void add Binding ( final String key , final Object value ) {", "m bindings . put ( key , value ) ; }"]}
{"ids": "52505", "code": ["public static < T extends Enum < T > > T for Key ( String key , Map < String , T > mapping , Class < T > enumeration ) {", "T t = mapping . get ( key ) ;", "if ( t != null ) {", "return t ; }", "throw new Illegal Argument Exception ( STR_ + enumeration . to String ( ) + STR_ + key ) ; }"]}
{"ids": "68669", "code": ["private Exchange Rate direct Lookup ( final Currency source , final Currency target , final Date date ) {", "if ( System . get Property ( STR_ ) == null ) throw new Unsupported Operation Exception ( STR_ ) ;", "Exchange Rate rate = null ;", "QL . require ( ( ( rate = fetch ( source , target , date ) ) != null ) , STR_ ) ;", "return rate ; }"]}
{"ids": "55191", "code": ["protected static int find Next New Line Char ( Char Sequence s , int start ) {", "for ( int i = start ; i < s . length ( ) ; i ++ ) {", "if ( s . char At ( i ) == STR_ ) {", "return i ; } }", "return - NUM_ ; }"]}
{"ids": "5674", "code": ["public Skype Builder with Chat ( String id ) {", "if ( ! id . starts With ( STR_ ) ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( password != null ) throw new Illegal Argument Exception ( STR_ ) ;", "this . chat Id = id ;", "return this ; }"]}
{"ids": "8280", "code": ["public static int compare To ( Object left , Object right ) {", "return compare To With Equality Check ( left , right , false ) ; }"]}
{"ids": "48302", "code": ["public static X 509 CRL Impl to Impl ( X 509 CRL crl ) throws CRL Exception {", "if ( crl instanceof X 509 CRL Impl ) {", "return ( X 509 CRL Impl ) crl ; }", "else {", "return X 509 Factory . intern ( crl ) ; } }"]}
{"ids": "78212", "code": ["public final synchronized void close All ( ) {", "if ( on Close All ( ) ) {", "Log . w ( TAG , STR_ ) ;", "return ; }", "Linked List < Integer > ids = new Linked List < Integer > ( ) ;", "for ( int id : get Existing Ids ( ) ) {", "ids . add ( id ) ; }", "for ( int id : ids ) {", "close ( id ) ; } }"]}
{"ids": "4833", "code": ["private static Pair < Character , Integer > normalize Codepoint ( String orig String , Charset encoding , int offset ) {", "char normalized Char = STR_ ;", "boolean is Ok = false ;", "final int codepoint = orig String . code Point At ( offset ) ;", "if ( encoding . equals ( Charset . for Name ( STR_ ) ) ) {", "if ( codepoint < NUM_ ) is Ok = true ; }", "else if ( encoding . equals ( Charset . for Name ( STR_ ) ) ) {", "if ( codepoint < NUM_ ) is Ok = true ; }", "else if ( encoding . equals ( Charset . for Name ( STR_ ) ) ) {", "if ( codepoint < NUM_ ) is Ok = true ; }", "if ( is Ok ) {", "normalized Char = ( char ) codepoint ; }", "else {", "is Ok = true ;", "final int type = Character . get Type ( codepoint ) ;", "if ( type == Character . CURRENCY SYMBOL ) normalized Char = STR_ ;", "else if ( type == Character . DASH PUNCTUATION ) normalized Char = STR_ ;", "else if ( type == Character . FINAL QUOTE PUNCTUATION ) {", "normalized Char = STR_ ; }", "else if ( type == Character . INITIAL QUOTE PUNCTUATION ) {", "normalized Char = STR_ ; }", "else if ( type == Character . END PUNCTUATION ) normalized Char = STR_ ;", "else if ( type == Character . DASH PUNCTUATION ) normalized Char = STR_ ;", "else if ( type == Character . OTHER LETTER ) normalized Char = STR_ ;", "else if ( type == Character . OTHER NUMBER ) normalized Char = STR_ ;", "else if ( type == Character . OTHER PUNCTUATION ) normalized Char = STR_ ;", "else if ( type == Character . OTHER SYMBOL ) normalized Char = STR_ ;", "else is Ok = false ; }", "Character new Char = null ;", "if ( is Ok ) new Char = normalized Char ;", "return new Pair < > ( new Char , codepoint ) ; }"]}
{"ids": "86207", "code": ["private boolean start Random Game ( ) {", "Abstract Launch [ ] pins = m Card Adapter . get Launchers ( ) ;", "List < Abstract Launch > games = new Array List < Abstract Launch > ( pins . length ) ;", "for ( Abstract Launch pin : pins ) {", "if ( pin . is Game ( ) ) {", "if ( pin . m State == Abstract Launch . STATE READY ) {", "games . add ( pin ) ; } } }", "if ( games . size ( ) > NUM_ ) {", "Random r = new Random ( ) ;", "int index = r . next Int ( games . size ( ) ) ;", "Abstract Launch game = games . get ( index ) ;", "Log . d ( TAG , String . format ( STR_ , game . m Content Description ) ) ;", "game . on Click ( game . get Click Target ( ) ) ;", "Measurement Manager . record Custom Event ( m Measurement , get String ( R . string . analytics event category launch ) , get String ( R . string . analytics launch action voice ) , game . m Content Description ) ;", "Analytics Manager . send Event ( R . string . analytics event category launch , R . string . analytics launch action voice , game . m Content Description ) ;", "return true ; }", "else {", "return false ; } }"]}
{"ids": "2381", "code": ["public void init Disk Cache ( ) {", "synchronized ( m Disk Cache Lock ) {", "if ( m Disk Lru Cache == null || m Disk Lru Cache . is Closed ( ) ) {", "File disk Cache Dir = m Cache Params . disk Cache Dir ;", "if ( m Cache Params . disk Cache Enabled && disk Cache Dir != null ) {", "if ( ! disk Cache Dir . exists ( ) ) {", "disk Cache Dir . mkdirs ( ) ; }", "if ( get Usable Space ( disk Cache Dir ) > m Cache Params . disk Cache Size ) {", "try {", "m Disk Lru Cache = Disk Lru Cache . open ( disk Cache Dir , NUM_ , NUM_ , m Cache Params . disk Cache Size ) ;", "if ( Build Config . DEBUG ) {", "Log . d ( TAG , STR_ ) ; } }", "catch ( final IO Exception e ) {", "m Cache Params . disk Cache Dir = null ;", "Log . e ( TAG , STR_ + e ) ; } } } }", "m Disk Cache Starting = false ;", "m Disk Cache Lock . notify All ( ) ; } }"]}
{"ids": "1746", "code": ["public static int compare ( String id 1 , String id 2 ) {", "int result = - NUM_ ;", "String seed 1 = Id Generator . get Seed From Id ( id 1 ) ;", "String seed 2 = Id Generator . get Seed From Id ( id 2 ) ;", "if ( seed 1 != null && seed 2 != null ) {", "result = seed 1 . compare To ( seed 2 ) ;", "if ( result == NUM_ ) {", "long count 1 = Id Generator . get Sequence From Id ( id 1 ) ;", "long count 2 = Id Generator . get Sequence From Id ( id 2 ) ;", "result = ( int ) ( count 1 - count 2 ) ; } }", "return result ; }"]}
{"ids": "79359", "code": ["public static Element add Child Element NS Element ( Element element , String child Element Name , Document document , String name Space Url ) {", "Element new Element = document . create Element NS ( name Space Url , child Element Name ) ;", "element . append Child ( new Element ) ;", "return element ; }"]}
{"ids": "22593", "code": ["public VN Xe Command Result modify Consistency Group Sync ( String id , Lun Group Modify Param param ) {", "String Builder url Bld = new String Builder ( URL MODIFY 1 ) ;", "url Bld . append ( id ) ;", "url Bld . append ( URL MODIFY 2 ) ;", "url = url Bld . to String ( ) ;", "return post Request Sync ( param ) ; }"]}
{"ids": "77003", "code": ["protected Query finish Query ( Boolean Query . Builder in , boolean all Terms Required ) {", "return in . build ( ) ; }"]}
{"ids": "78732", "code": ["public long sum ( ) {", "long sum = NUM_ ;", "for ( Atomic Long value : map . values ( ) ) {", "sum = sum + value . get ( ) ; }", "return sum ; }"]}
{"ids": "35986", "code": ["public static String extract Full Stack Trace ( Throwable e ) {", "String Writer string Writer = new String Writer ( ) ;", "Print Writer print Writer = new Print Writer ( string Writer ) ;", "e . print Stack Trace ( print Writer ) ;", "return string Writer . to String ( ) ; }"]}
{"ids": "64751", "code": ["public Empty Tile Factory ( Tile Factory Info info ) {", "super ( info ) ;", "int tile Size = info . get Tile Size ( info . get Minimum Zoom Level ( ) ) ;", "empty Tile = new Buffered Image ( tile Size , tile Size , Buffered Image . TYPE INT ARGB ) ;", "Graphics 2 D g = empty Tile . create Graphics ( ) ;", "g . set Rendering Hint ( Rendering Hints . KEY ANTIALIASING , Rendering Hints . VALUE ANTIALIAS ON ) ;", "g . set Color ( Color . GRAY ) ;", "g . fill Rect ( NUM_ , NUM_ , tile Size , tile Size ) ;", "g . set Color ( Color . WHITE ) ;", "g . draw Oval ( NUM_ , NUM_ , tile Size - NUM_ , tile Size - NUM_ ) ;", "g . fill Oval ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "g . fill Oval ( tile Size - NUM_ , NUM_ , NUM_ , NUM_ ) ;", "g . fill Oval ( tile Size / NUM_ - NUM_ , tile Size / NUM_ - NUM_ , NUM_ , NUM_ ) ;", "g . dispose ( ) ; }"]}
{"ids": "51863", "code": ["public static void i ( String tag , String msg , Object ... args ) {", "if ( s Level > LEVEL INFO ) {", "return ; }", "if ( args . length > NUM_ ) {", "msg = String . format ( msg , args ) ; }", "Log . i ( tag , msg ) ; }"]}
{"ids": "17700", "code": ["public void close ( ) throws IO Exception {", "guard . close ( ) ;", "Random Access File local Raf = raf ;", "if ( local Raf != null ) {", "synchronized ( local Raf ) {", "raf = null ;", "local Raf . close ( ) ; }", "if ( file To Delete On Close != null ) {", "file To Delete On Close . delete ( ) ;", "file To Delete On Close = null ; } } }"]}
{"ids": "7038", "code": ["public boolean match With Reg Ex ( String a Reg Ex ) {", "if ( Text Utils . is Empty ( a Reg Ex ) ) {", "return false ; }", "boolean matched = false ;", "if ( ! Text Utils . is Empty ( m Display Name ) ) {", "matched = m Display Name . matches ( a Reg Ex ) ; }", "if ( ! matched ) {", "for ( String email : m Emails ) {", "matched |= email . matches ( a Reg Ex ) ; } }", "return matched ; }"]}
{"ids": "39314", "code": ["public String stem String ( String str ) {", "String Buffer result = new String Buffer ( ) ;", "int start = - NUM_ ;", "for ( int j = NUM_ ; j < str . length ( ) ; j ++ ) {", "char c = str . char At ( j ) ;", "if ( Character . is Letter Or Digit ( c ) ) {", "if ( start == - NUM_ ) {", "start = j ; } }", "else if ( c == STR_ ) {", "if ( start == - NUM_ ) {", "result . append ( c ) ; } }", "else {", "if ( start != - NUM_ ) {", "result . append ( stem ( str . substring ( start , j ) ) ) ;", "start = - NUM_ ; }", "result . append ( c ) ; } }", "if ( start != - NUM_ ) {", "result . append ( stem ( str . substring ( start , str . length ( ) ) ) ) ; }", "return result . to String ( ) ; }"]}
{"ids": "63956", "code": ["public static List < Integer > parse Numeric List ( String string ) {", "Array List < Integer > list = new Array List < > ( ) ;", "Pattern ranges = Pattern . compile ( STR_ ) ;", "Matcher m = ranges . matcher ( string ) ;", "while ( m . find ( ) ) {", "String range = m . group ( STR_ ) ;", "string = string . replace ( range , STR_ ) ;", "parse Numeric Range ( range , list ) ; }", "String [ ] numbers = string . split ( STR_ ) ;", "for ( int i = NUM_ ; i < numbers . length ; ++ i ) {", "String number = numbers [ i ] ;", "if ( ! number . is Empty ( ) ) {", "list . add ( Integer . value Of ( number ) ) ; } }", "Collections . sort ( list ) ;", "return list ; }"]}
{"ids": "49453", "code": ["protected void save Pass Code And Exit ( ) {", "Intent result Intent = new Intent ( ) ;", "result Intent . put Extra ( KEY PASSCODE , m Pass Code Digits [ NUM_ ] + m Pass Code Digits [ NUM_ ] + m Pass Code Digits [ NUM_ ] + m Pass Code Digits [ NUM_ ] ) ;", "set Result ( RESULT OK , result Intent ) ;", "finish ( ) ; }"]}
{"ids": "63231", "code": ["public static void read Fully ( File Channel file , long pos , Byte Buffer dst ) {", "try {", "do {", "int len = file . read ( dst , pos ) ;", "if ( len < NUM_ ) {", "throw new EOF Exception ( ) ; }", "pos += len ; }", "while ( dst . remaining ( ) > NUM_ ) ;", "dst . rewind ( ) ; }", "catch ( IO Exception e ) {", "long size ;", "try {", "size = file . size ( ) ; }", "catch ( IO Exception e 2 ) {", "size = - NUM_ ; }", "throw new Illegal State Exception ( ERROR READING FAILED , STR_ + STR_ , file , size , dst . remaining ( ) , pos , e ) ; } }"]}
{"ids": "42138", "code": ["public void trigger Cycle ( ) {", "lock . lock ( ) ;", "trigger Count ++ ;", "contexts Parked = NUM_ ;", "lock . broadcast ( ) ;", "lock . unlock ( ) ; }"]}
{"ids": "53267", "code": ["protected boolean heapify Down Comparator ( final int ipos , Object cur ) {", "int pos = ipos ;", "final int half = size > > > NUM_ ;", "while ( pos < half ) {", "int min = pos ;", "Object best = cur ;", "final int lchild = ( pos << NUM_ ) + NUM_ ;", "Object left = queue [ lchild ] ;", "if ( comparator . compare ( best , left ) > NUM_ ) {", "min = lchild ;", "best = left ; }", "final int rchild = lchild + NUM_ ;", "if ( rchild < size ) {", "Object right = queue [ rchild ] ;", "if ( comparator . compare ( best , right ) > NUM_ ) {", "min = rchild ;", "best = right ; } }", "if ( min == pos ) {", "break ; }", "queue [ pos ] = best ;", "pos = min ; }", "queue [ pos ] = cur ;", "return ( pos != ipos ) ; }"]}
{"ids": "27125", "code": ["public static boolean is String ( String str ) {", "return ( ( str . starts With ( STR_ ) && str . ends With ( STR_ ) ) || ( str . starts With ( STR_ ) && str . ends With ( STR_ ) ) ) && str . length ( ) > NUM_ ; }"]}
{"ids": "10460", "code": ["static public boolean has Photo ( Tweet tweet ) {", "return get Photo Entity ( tweet ) != null ; }"]}
{"ids": "53361", "code": ["public static String Builder format To ( String Builder buf , long [ ] d , String sep ) {", "if ( d == null ) {", "return buf . append ( STR_ ) ; }", "if ( d . length == NUM_ ) {", "return buf ; }", "buf . append ( d [ NUM_ ] ) ;", "for ( int i = NUM_ ; i < d . length ; i ++ ) {", "buf . append ( sep ) ;", "buf . append ( d [ i ] ) ; }", "return buf ; }"]}
{"ids": "68674", "code": ["public static < T > int upper Bound ( final List < T > value List , int from Idx , int to Idx , final Comparable < T > value ) {", "int len = to Idx - from Idx + ( to Idx > from Idx ? NUM_ : NUM_ ) ;", "int from = from Idx ;", "int half ;", "int middle ;", "while ( len > NUM_ ) {", "half = len > > NUM_ ;", "middle = from ;", "middle = middle + half ;", "if ( value . compare To ( value List . get ( middle ) ) == - NUM_ ) {", "len = half ; }", "else {", "from = middle ;", "from ++ ;", "len = len - half - NUM_ ; } }", "return from ; }"]}
{"ids": "42925", "code": ["public int size ( ) {", "return data . size ( ) ; }"]}
{"ids": "85197", "code": ["public static synchronized void register Additional Hyphenation File Directory ( String directory ) {", "if ( additional Hyphenation File Directories == null ) {", "additional Hyphenation File Directories = new Array List < > ( ) ; }", "additional Hyphenation File Directories . add ( directory ) ; }"]}
{"ids": "69351", "code": ["private void insert New Drive Files ( ) throws IO Exception {", "Cursor cursor = null ;", "try {", "cursor = my Tracks Provider Utils . get Track Cursor ( Sync Utils . NO DRIVE ID TRACKS QUERY , null , null ) ;", "long recording Track Id = Preferences Utils . get Long ( context , R . string . recording track id key ) ;", "if ( cursor != null && cursor . move To First ( ) ) {", "do {", "Track track = my Tracks Provider Utils . create Track ( cursor ) ;", "if ( track . get Id ( ) == recording Track Id ) {", "continue ; }", "Sync Utils . insert Drive File ( drive , folder Id , context , my Tracks Provider Utils , track , true , true ) ; }", "while ( cursor . move To Next ( ) ) ; } }", "finally {", "if ( cursor != null ) {", "cursor . close ( ) ; } } }"]}
{"ids": "553", "code": ["private static String unescape ( String s ) {", "int len = s . length ( ) , base = NUM_ , idx ;", "String escapes = STR_ ;", "String chars = STR_ ;", "String Buffer sbuf = null ;", "while ( ( idx = s . index Of ( STR_ , base ) ) != - NUM_ ) {", "if ( sbuf != null ) sbuf . append ( s . substring ( base , idx ) ) ;", "if ( idx + NUM_ == len ) break ;", "char c = s . char At ( idx + NUM_ ) ;", "int cidx = escapes . index Of ( c ) ;", "if ( cidx == - NUM_ ) {", "sbuf . append ( STR_ ) ;", "sbuf . append ( c ) ; }", "else {", "if ( sbuf == null ) sbuf = new String Buffer ( s . substring ( base , idx ) ) ;", "sbuf . append ( chars . char At ( cidx ) ) ; }", "base = idx + NUM_ ; }", "if ( sbuf != null && base < len ) sbuf . append ( s . substring ( base ) ) ;", "return ( sbuf == null ? s : sbuf . to String ( ) ) ; }"]}
{"ids": "11029", "code": ["public static void put ( String dbg Token ) {", "dbg Table . put ( dbg Token , Boolean . TRUE ) ; }"]}
{"ids": "20528", "code": ["public boolean remove Data Set ( T d ) {", "if ( d == null ) return false ;", "boolean removed = m Data Sets . remove ( d ) ;", "if ( removed ) {", "m Y Val Count -= d . get Entry Count ( ) ;", "m Y Value Sum -= d . get Y Value Sum ( ) ;", "calc Min Max ( m Data Sets ) ; }", "return removed ; }"]}
{"ids": "63364", "code": ["public Transfer write String ( String s ) throws IO Exception {", "if ( s == null ) {", "out . write Int ( - NUM_ ) ; }", "else {", "int len = s . length ( ) ;", "out . write Int ( len ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "out . write Char ( s . char At ( i ) ) ; } }", "return this ; }"]}
{"ids": "71780", "code": ["private void fill Inside Draw ( Graphics g , int x , int y , int w , int h ) {", "g . set Color ( Color . BLACK ) ;", "g . draw Rect ( x , y , w , h ) ;", "g . set Color ( Color . LIGHT GRAY ) ;", "g . fill Rect ( x + NUM_ , y + NUM_ , w - NUM_ , h - NUM_ ) ; }"]}
{"ids": "2131", "code": ["public Drawer Builder add Sticky Drawer Items ( @ Non Null I Drawer Item ... sticky Drawer Items ) {", "if ( this . m Sticky Drawer Items == null ) {", "this . m Sticky Drawer Items = new Array List < > ( ) ; }", "Collections . add All ( this . m Sticky Drawer Items , sticky Drawer Items ) ;", "return this ; }"]}
{"ids": "53394", "code": ["public void append To Buffer ( String Builder buf ) {", "Iterator < Polygon > iter = polygons . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Polygon poly = iter . next ( ) ;", "poly . append To Buffer ( buf ) ;", "if ( iter . has Next ( ) ) {", "buf . append ( STR_ ) ; } } }"]}
{"ids": "34464", "code": ["public void add Function ( Function Interface active Function ) {", "functions . add ( active Function ) ; }"]}
{"ids": "64122", "code": ["public static Charset to Charset ( Charset charset ) {", "return charset == null ? Charset . default Charset ( ) : charset ; }"]}
{"ids": "21089", "code": ["public < T extends Data Object > Joiner join ( Class < T > clazz , String alias ) {", "if ( ! j Classes . is Empty ( ) ) {", "throw new Joiner Exception ( STR_ ) ; }", "J Class jc = new J Class ( clazz , alias , j Classes . size ( ) ) ;", "j Classes . add ( jc ) ;", "last J Class = jc ;", "alias Map . put ( alias , jc ) ;", "return this ; }"]}
{"ids": "17165", "code": ["public Byte Vector put Byte Array ( final byte [ ] b , final int off , final int len ) {", "if ( length + len > data . length ) {", "enlarge ( len ) ; }", "if ( b != null ) {", "System . arraycopy ( b , off , data , length , len ) ; }", "length += len ;", "return this ; }"]}
{"ids": "72919", "code": ["public static void show Progress Bar ( int status , int i ) {", "if ( m Root View != null ) {", "Progress Bar pb = ( Progress Bar ) m Root View . find View By Id ( R . id . progress slice ) ;", "Text View tv = ( Text View ) m Root View . find View By Id ( R . id . viewer text progress slice ) ;", "Text View tve = ( Text View ) m Root View . find View By Id ( R . id . viewer text estimated time ) ;", "Text View tve title = ( Text View ) m Root View . find View By Id ( R . id . viewer estimated time textview ) ;", "if ( m Slicing Handler . get Last Reference ( ) != null ) {", "tve title . set Visibility ( View . VISIBLE ) ;", "pb . set Visibility ( View . VISIBLE ) ;", "switch ( status ) {", "case State Utils . SLICER HIDE :", "if ( i < NUM_ ) {", "tv . set Text ( R . string . error ) ; }", "else {", "tv . set Text ( R . string . viewer text downloaded ) ; }", "pb . set Visibility ( View . INVISIBLE ) ;", "break ;", "case State Utils . SLICER UPLOAD :", "String upload Text = m Context . get String ( R . string . viewer text uploading ) ;", "if ( i == NUM_ ) pb . set Indeterminate ( true ) ;", "else {", "pb . set Progress ( i ) ;", "pb . set Indeterminate ( false ) ;", "upload Text += STR_ + i + STR_ ; }", "tv . set Text ( upload Text ) ;", "tve . set Text ( null ) ;", "break ;", "case State Utils . SLICER SLICE :", "String slicing Text = m Context . get String ( R . string . viewer text slicing ) ;", "if ( i == NUM_ ) {", "pb . set Indeterminate ( true ) ; }", "else if ( i == NUM_ ) {", "pb . set Indeterminate ( false ) ;", "pb . set Progress ( NUM_ ) ;", "slicing Text += STR_ + m Context . get String ( R . string . viewer text done ) ; }", "else {", "pb . set Progress ( i ) ;", "pb . set Indeterminate ( false ) ;", "slicing Text += STR_ + i + STR_ ; }", "tv . set Text ( slicing Text ) ;", "tve . set Text ( null ) ;", "m Root View . invalidate ( ) ;", "break ;", "case State Utils . SLICER DOWNLOAD :", "if ( i > NUM_ ) {", "tve . set Text ( Octoprint Connection . Convert Second To HHMM String ( String . value Of ( i ) ) ) ; }", "tv . set Text ( R . string . viewer text downloading ) ;", "pb . set Indeterminate ( true ) ;", "break ;", "default :", "break ; } }", "else {", "pb . set Visibility ( View . INVISIBLE ) ;", "tve title . set Visibility ( View . INVISIBLE ) ;", "tv . set Text ( null ) ;", "tve . set Text ( null ) ;", "m Root View . invalidate ( ) ; } } }"]}
{"ids": "33447", "code": ["public Launch Option ( Version version , Authenticator authenticator , Minecraft Directory minecraft Dir ) {", "Objects . require Non Null ( version ) ;", "Objects . require Non Null ( authenticator ) ;", "Objects . require Non Null ( minecraft Dir ) ;", "this . version = version ;", "this . authenticator = authenticator ;", "this . minecraft Directory = minecraft Dir ;", "this . runtime Directory = minecraft Dir ;", "this . java Environment = Java Environment . current ( ) ; }"]}
{"ids": "24126", "code": ["protected boolean is Stoppable ( ) {", "return ( is Running ( ) && get Locator ( ) != null ) ; }"]}
{"ids": "38888", "code": ["public void load ( String file Name ) throws Exception {", "if ( ! file Name . ends With ( STR_ ) && ! file Name . ends With ( STR_ ) ) {", "throw new Exception ( STR_ + STR_ ) ; }", "if ( file Name . ends With ( STR_ ) ) {", "load Binary ( file Name ) ; }", "else if ( file Name . ends With ( STR_ ) ) {", "load XML ( file Name ) ; } }"]}
{"ids": "70429", "code": ["public Bindings add Opt Component ( String property , Class clazz , J Toggle Button c , boolean enabled By Default ) {", "Binding b = new Opt Component Binding ( this , property , clazz , c , enabled By Default ) ;", "if ( opt Components . contains Key ( property ) ) {", "throw new Binding Exception ( Messages . get String ( STR_ ) ) ; }", "opt Components . put ( property , b ) ;", "return this ; }"]}
{"ids": "17040", "code": ["public static boolean copy File ( File file , File copy ) {", "if ( file == null || copy == null ) throw new Null Pointer Exception ( STR_ ) ;", "if ( ! file . is File ( ) || copy . is Directory ( ) ) throw new Illegal Argument Exception ( STR_ ) ;", "File Input Stream fis = null ;", "File Output Stream fos = null ;", "try {", "fis = new File Input Stream ( file ) ;", "fos = new File Output Stream ( copy ) ;", "int bytes ;", "byte [ ] packet = new byte [ COPY PACKET SIZE ] ;", "while ( ( bytes = fis . read ( packet , NUM_ , COPY PACKET SIZE ) ) != - NUM_ ) fos . write ( packet , NUM_ , bytes ) ;", "return true ; }", "catch ( Exception e ) {", "LOGGER . log ( Level . SEVERE , STR_ , e ) ;", "return false ; }", "finally {", "try {", "if ( fos != null ) fos . close ( ) ; }", "catch ( Exception e ) {", "LOGGER . log ( Level . SEVERE , STR_ , e ) ; }", "try {", "if ( fis != null ) fis . close ( ) ; }", "catch ( Exception e ) {", "LOGGER . log ( Level . SEVERE , STR_ , e ) ; } } }"]}
{"ids": "19978", "code": ["public static byte [ ] encrypt My SQL Password ( String password , byte [ ] seed ) {", "if ( password == null || password . equals ( STR_ ) ) {", "return new byte [ NUM_ ] ; }", "Message Digest digest = null ;", "try {", "digest = Message Digest . get Instance ( STR_ ) ; }", "catch ( No Such Algorithm Exception e ) {", "logger . error ( STR_ , e ) ;", "return new byte [ NUM_ ] ; }", "byte [ ] stage 1 hash = digest . digest ( password . get Bytes ( ) ) ;", "digest . reset ( ) ;", "byte [ ] sha 1 stage 1 = digest . digest ( stage 1 hash ) ;", "digest . reset ( ) ;", "digest . update ( seed ) ;", "digest . update ( sha 1 stage 1 ) ;", "byte [ ] final Sha 1 = digest . digest ( ) ;", "byte [ ] token = new byte [ final Sha 1 . length ] ;", "for ( int i = NUM_ ; i < final Sha 1 . length ; i ++ ) {", "token [ i ] = ( byte ) ( stage 1 hash [ i ] ^ final Sha 1 [ i ] ) ; }", "return token ; }"]}
{"ids": "85229", "code": ["protected void add Url ( URL url ) {", "if ( urls . contains ( url ) ) {", "LOGGER . info ( STR_ + url ) ;", "return ; }", "urls . add ( url ) ;", "LOGGER . info ( STR_ + url ) ; }"]}
{"ids": "38947", "code": ["private int [ ] define Numeric ( Random random ) {", "int [ ] num = new int [ get Num Attributes ( ) ] ;", "for ( int i = NUM_ ; i < num . length ; i ++ ) {", "num [ i ] = Attribute . NOMINAL ; }", "int num Num = NUM_ ;", "for ( int i = NUM_ ; ( num Num < get Num Numeric ( ) ) && ( i < get Num Attributes ( ) * NUM_ ) ; i ++ ) {", "int maybe Next = ( int ) ( random . next Double ( ) * num . length ) ;", "if ( num [ maybe Next ] != Attribute . NUMERIC ) {", "num [ maybe Next ] = Attribute . NUMERIC ;", "num Num ++ ; } }", "return num ; }"]}
{"ids": "41000", "code": ["public static boolean is Favorite Station ( Context context , int i Station ) {", "return is Station Exist ( context , i Station , STATION TYPE FAVORITE ) ; }"]}
{"ids": "49170", "code": ["protected void paint Caption ( Graphics g , Rectangle rect ) {", "String s = get Target Label ( ) ;", "if ( s . equals ( STR_ ) ) {", "return ; }", "g . set Font ( get Target Font ( ) ) ;", "Font Metrics fm = g . get Font Metrics ( ) ;", "String str = get Target Label ( ) ;", "int width = fm . string Width ( str ) ;", "int textx = rect . x + ( rect . width - width ) / NUM_ ;", "int texty = rect . y + CAPTION MARGIN TOP + fm . get Ascent ( ) ;", "int sepy = rect . y + rect . height - CAPTION SEPARATOR HEIGHT / NUM_ ;", "g . set Color ( is Target Enabled ( ) ? get Foreground Color ( ) : get Disabled Color ( ) ) ;", "g . draw String ( s , textx , texty ) ;", "draw 3 D Rect ( g , rect . x , sepy , rect . width , NUM_ , false ) ; }"]}
{"ids": "446", "code": ["public void put Float ( float x ) {", "bb . put Float ( space -= NUM_ , x ) ; }"]}
{"ids": "48722", "code": ["final void put Int ( int offset , int value ) {", "unsafe . put Int ( offset + address , value ) ; }"]}
{"ids": "18251", "code": ["private static boolean is Unreserved Character ( char p char ) {", "return ( is Alphanum ( p char ) || MARK CHARACTERS . index Of ( p char ) != - NUM_ ) ; }"]}
{"ids": "44817", "code": ["public static Inet Socket Address parse Socket Address ( String addr ) {", "String [ ] parts = addr . split ( COLON ) ;", "Preconditions . check Argument ( parts . length == NUM_ ) ;", "String hostname = parts [ NUM_ ] ;", "int port = Integer . parse Int ( parts [ NUM_ ] ) ;", "return new Inet Socket Address ( hostname , port ) ; }"]}
{"ids": "52897", "code": ["@ Override public void write External ( Object Output out ) throws IO Exception {", "super . write External ( out ) ;", "out . write Object ( approximation ) ; }"]}
{"ids": "60772", "code": ["public Object [ ] to Array ( ) {", "final Object [ ] items = this . items ;", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "final int count = this . count ;", "Object [ ] a = new Object [ count ] ;", "int n = items . length - take Index ;", "if ( count <= n ) {", "System . arraycopy ( items , take Index , a , NUM_ , count ) ; }", "else {", "System . arraycopy ( items , take Index , a , NUM_ , n ) ;", "System . arraycopy ( items , NUM_ , a , n , count - n ) ; }", "return a ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "49576", "code": ["public void message Arrived ( Mqtt Publish send Message ) {", "final String method Name = STR_ ;", "if ( mqtt Callback != null || callbacks . size ( ) > NUM_ ) {", "synchronized ( space Available ) {", "while ( running && ! quiescing && message Queue . size ( ) >= INBOUND QUEUE SIZE ) {", "try {", "log . fine ( CLASS NAME , method Name , STR_ ) ;", "space Available . wait ( NUM_ ) ; }", "catch ( Interrupted Exception ex ) { } } }", "if ( ! quiescing ) {", "message Queue . add Element ( send Message ) ;", "synchronized ( work Available ) {", "log . fine ( CLASS NAME , method Name , STR_ ) ;", "work Available . notify All ( ) ; } } } }"]}
{"ids": "20008", "code": ["private void find Home ( ) {", "String home = System . get Property ( STR_ ) ;", "if ( home == null ) home = System . get Property ( STR_ ) ;", "if ( home == null ) home = System . get Property ( STR_ ) ;", "if ( home == null ) home = System . get Property ( STR_ ) ;", "if ( home != null ) manifest Path = home + File . separator + STR_ + File . separator + manifest File Name ;", "else manifest Path = manifest File Name ; }"]}
{"ids": "59623", "code": ["private List < String > check All Columns In Cube ( Cube Instance cube , Table Desc table , Map < String , Hive Table Meta . Hive Table Column Meta > fields Map ) {", "Set < Column Desc > used Columns = Sets . new Hash Set ( ) ;", "for ( Tbl Col Ref col : cube . get All Columns ( ) ) {", "used Columns . add ( col . get Column Desc ( ) ) ; }", "List < String > violate Columns = Lists . new Array List ( ) ;", "for ( Column Desc column : table . get Columns ( ) ) {", "if ( used Columns . contains ( column ) ) {", "Hive Table Meta . Hive Table Column Meta field = fields Map . get ( column . get Name ( ) ) ;", "if ( field == null || ! is Column Compatible ( column , field ) ) {", "violate Columns . add ( column . get Name ( ) ) ; } } }", "return violate Columns ; }"]}
{"ids": "81050", "code": ["public static String make Unified Line Feeds ( String query ) {", "if ( query . index Of ( STR_ ) == - NUM_ ) {", "return query ; }", "String Builder result = new String Builder ( query . length ( ) ) ;", "for ( int i = NUM_ ; i < query . length ( ) ; i ++ ) {", "char c = query . char At ( i ) ;", "if ( c == STR_ ) {", "continue ; }", "result . append ( c ) ; }", "return result . to String ( ) ; }"]}
{"ids": "31372", "code": ["private void reflect Member Variables In Left Button ( ) {", "final boolean last Page Reached = ( view Pager . get Current Item ( ) + NUM_ ) == pages . size ( ) ;", "final boolean button Should Be Invisible = ( last Page Reached && disable Left Button On Last Page ) || left Button Disabled ;", "final boolean button Is Currently Invisible = left Button . get Visibility ( ) == View . INVISIBLE ;", "final boolean should Update Button = button Should Be Invisible != button Is Currently Invisible ;", "if ( should Update Button ) {", "final Animator button Animator = button Should Be Invisible ? button Animator Factory . new Left Button Disappear Animator ( left Button ) : button Animator Factory . new Left Button Appear Animator ( left Button ) ;", "if ( button Should Be Invisible ) {", "disable Button ( button Animator , left Button ) ; }", "else {", "enable Button ( button Animator , left Button ) ; } } }"]}
{"ids": "23376", "code": ["public static void register Semi Disposable Block ( String ore Dict Name ) {", "semi Disposable Blocks . add ( ore Dict Name ) ; }"]}
{"ids": "74300", "code": ["public boolean accepts Type Name ( String type ) {", "return type List . contains ( type ) ; }"]}
{"ids": "59911", "code": ["public void delete Async ( final String id , final Future Callback < Task > response Callback ) throws IO Exception {", "delete Object Async ( id , response Callback ) ; }"]}
{"ids": "48974", "code": ["private boolean continue After Accept Failure ( Throwable t ) {", "RMI Failure Handler fh = RMI Socket Factory . get Failure Handler ( ) ;", "if ( fh != null ) {", "return fh . failure ( t instanceof Exception ? ( Exception ) t : new Invocation Target Exception ( t ) ) ; }", "else {", "throttle Loop On Exception ( ) ;", "return true ; } }"]}
{"ids": "66742", "code": ["private static void process Package ( String tb Name , Packages pkg ) {", "String class Name Prefix = String Util . parse Hump Name ( tb Name , true , is Hump Model Class ) ;", "pkg . set Dao ( package Prefix + ( String Util . is Empty ( package Prefix ) || String Util . is Empty ( package Dao ) ? STR_ : STR_ ) + package Dao ) ;", "pkg . set Dao Name ( class Name Prefix + dao Suffix ) ;", "pkg . set Model ( package Prefix + ( String Util . is Empty ( package Prefix ) || String Util . is Empty ( package Model ) ? STR_ : STR_ ) + package Model ) ;", "pkg . set Model Name ( class Name Prefix + model Suffix ) ;", "pkg . set Mapper Xml ( package Prefix + ( String Util . is Empty ( package Prefix ) || String Util . is Empty ( package Mapper Xml ) ? STR_ : STR_ ) + package Mapper Xml ) ;", "pkg . set Mapper Xml Name ( class Name Prefix + mapper Xml Suffix ) ;", "pkg . set Model Name Lower First ( String Util . lower First ( pkg . get Model Name ( ) ) ) ; }"]}
{"ids": "76275", "code": ["public boolean add Call ( String source Class , String source Method , String target Class , String target Method ) {", "Call Graph Entry from = new Call Graph Entry ( target Class , target Method ) ;", "Call Graph Entry to = new Call Graph Entry ( source Class , source Method ) ;", "if ( source Class . equals ( class Name ) ) cut Nodes . add ( to ) ;", "if ( ! graph . contains Edge ( from , to ) ) {", "graph . add Edge ( from , to ) ;", "call Graph Classes . add ( target Class . replace All ( STR_ , STR_ ) ) ;", "return true ; }", "return false ; }"]}
{"ids": "27243", "code": ["private static void do Thread Dump ( final Http Servlet Request req , final Http Servlet Response resp ) throws IO Exception {", "resp . set Status ( HTTP OK ) ;", "resp . add Header ( STR_ , STR_ ) ;", "resp . set Content Type ( MIME TEXT PLAIN ) ;", "final Print Writer w = resp . get Writer ( ) ;", "try {", "Bigdata Statics . thread Dump ( w ) ;", "w . flush ( ) ; }", "catch ( Throwable t ) {", "launder Throwable ( t , resp , STR_ ) ; }", "finally {", "w . close ( ) ; } }"]}
{"ids": "13076", "code": ["public static boolean is Valid Nmtoken ( String nmtoken ) {", "final int length = nmtoken . length ( ) ;", "if ( length == NUM_ ) {", "return false ; }", "for ( int i = NUM_ ; i < length ; ++ i ) {", "char ch = nmtoken . char At ( i ) ;", "if ( ! is Name ( ch ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "70234", "code": ["public MM Roll ( MM Random rng ) {", "super ( NUM_ , NUM_ ) ;", "this . total = rng . random Int ( this . faces ) + this . min ;", "all . add Element ( this . total ) ; }"]}
{"ids": "13892", "code": ["public void handle Button 3 Request ( Request Invocation Event event ) throws Model Control Exception {", "return To Home Page ( ) ; }"]}
{"ids": "27085", "code": ["static < T > Unix Stream < T > unixify ( final Stream < T > stream ) {", "Objects . require Non Null ( stream , STR_ ) ;", "return new Unix Stream Impl < > ( stream ) ; }"]}
{"ids": "16901", "code": ["@ Deprecated public Media File ( File f ) {", "this ( f . to Path ( ) , null ) ; }"]}
{"ids": "9600", "code": ["public static Key Store load ( File key Store File , Password password , Key Store Type key Store Type ) throws Crypto Exception , File Not Found Exception {", "if ( ! key Store Type . is File Based ( ) ) {", "throw new Crypto Exception ( Message Format . format ( res . get String ( STR_ ) , key Store Type . jce ( ) ) ) ; }", "File Input Stream fis = new File Input Stream ( key Store File ) ;", "Key Store key Store = get Key Store Instance ( key Store Type ) ;", "try {", "key Store . load ( fis , password . to Char Array ( ) ) ; }", "catch ( Certificate Exception ex ) {", "throw new Key Store Load Exception ( Message Format . format ( res . get String ( STR_ ) , key Store Type ) , ex , key Store Type ) ; }", "catch ( No Such Algorithm Exception ex ) {", "throw new Key Store Load Exception ( Message Format . format ( res . get String ( STR_ ) , key Store Type ) , ex , key Store Type ) ; }", "catch ( File Not Found Exception ex ) {", "throw ex ; }", "catch ( IO Exception ex ) {", "throw new Key Store Load Exception ( Message Format . format ( res . get String ( STR_ ) , key Store Type ) , ex , key Store Type ) ; }", "finally {", "IO Utils . close Quietly ( fis ) ; }", "return key Store ; }"]}
{"ids": "79254", "code": ["public static String add To Cart Bulk ( Http Servlet Request request , Http Servlet Response response ) {", "String category Id = request . get Parameter ( STR_ ) ;", "Shopping Cart cart = get Cart Object ( request ) ;", "Delegator delegator = ( Delegator ) request . get Attribute ( STR_ ) ;", "Local Dispatcher dispatcher = ( Local Dispatcher ) request . get Attribute ( STR_ ) ;", "Shopping Cart Helper cart Helper = new Shopping Cart Helper ( delegator , dispatcher , cart ) ;", "String control Directive ;", "Map < String , Object > result ;", "Map < String , Object > param Map = Util Http . get Parameter Map ( request ) ;", "String catalog Id = Catalog Worker . get Current Catalog Id ( request ) ;", "result = cart Helper . add To Cart Bulk ( catalog Id , category Id , param Map ) ;", "control Directive = process Result ( result , request ) ;", "if ( control Directive . equals ( ERROR ) ) {", "return STR_ ; }", "else {", "return STR_ ; } }"]}
{"ids": "56519", "code": ["public void dump Log ( String container Id , File log File ) throws Docker Exception , Interrupted Exception {", "Log Stream error Stream = null ;", "File Channel file Channel = null ;", "File Output Stream file Output Stream = null ;", "try {", "if ( log File . exists ( ) ) {", "log File . delete ( ) ; }", "log File . create New File ( ) ;", "file Output Stream = new File Output Stream ( log File ) ;", "file Channel = file Output Stream . get Channel ( ) ;", "error Stream = docker Client . logs ( container Id , Logs Param . stderr ( ) ) ;", "while ( error Stream . has Next ( ) ) {", "Log Message message = error Stream . next ( ) ;", "Byte Buffer buffer = message . content ( ) ;", "file Channel . write ( buffer ) ; } }", "catch ( File Not Found Exception e ) {", "throw new Docker Exception ( STR_ + log File + STR_ ) ; }", "catch ( IO Exception e ) {", "throw new Docker Exception ( e ) ; }", "finally {", "if ( error Stream != null ) {", "error Stream . close ( ) ; }", "if ( file Channel != null ) {", "try {", "file Channel . close ( ) ; }", "catch ( IO Exception e ) {", "logger . error ( STR_ , e ) ; } }", "if ( file Output Stream != null ) {", "try {", "file Output Stream . close ( ) ; }", "catch ( IO Exception e ) {", "logger . error ( STR_ , e ) ; } } } }"]}
{"ids": "53122", "code": ["public static final void warning ( String message , Throwable e ) {", "if ( message == null && e != null ) {", "message = e . get Message ( ) ; }", "log Expensive ( Level . WARNING , message , e ) ; }"]}
{"ids": "82228", "code": ["public static Indexed Image pack ( int [ ] rgb , int width , int height ) {", "int array Length = width * height ;", "int [ ] temp Palette = new int [ NUM_ ] ;", "int palette Location = NUM_ ;", "for ( int iter = NUM_ ; iter < array Length ; iter ++ ) {", "int current = rgb [ iter ] ;", "if ( ! contains ( temp Palette , palette Location , current ) ) {", "if ( palette Location > NUM_ ) {", "return null ; }", "temp Palette [ palette Location ] = current ;", "palette Location ++ ; } }", "if ( palette Location != temp Palette . length ) {", "int [ ] new Array = new int [ palette Location ] ;", "System . arraycopy ( temp Palette , NUM_ , new Array , NUM_ , palette Location ) ;", "temp Palette = new Array ; }", "Indexed Image i = new Indexed Image ( width , height , temp Palette , rgb ) ;", "return i ; }"]}
{"ids": "82081", "code": ["public void add Hint ( Component hint Component , Component destination Component , String position ) {", "hint Component . put Client Property ( POS , position ) ;", "hint Component . put Client Property ( DEST , destination Component ) ;", "vec . add Element ( hint Component ) ; }"]}
{"ids": "48506", "code": ["public static int convert SRG Bto Linear RGB ( int color ) {", "float input , output ;", "input = color / NUM_ ;", "if ( input <= NUM_ ) {", "output = input / NUM_ ; }", "else {", "output = ( float ) Math . pow ( ( input + NUM_ ) / NUM_ , NUM_ ) ; }", "return Math . round ( output * NUM_ ) ; }"]}
{"ids": "15774", "code": ["public void finish ( ) throws SQL Exception {", "Statement statement = connection . create Statement ( ) ;", "statement . execute ( STR_ ) ;", "statement . close ( ) ;", "statement = connection . create Statement ( ) ;", "statement . execute ( STR_ ) ;", "statement . close ( ) ;", "statement = connection . create Statement ( ) ;", "statement . execute ( STR_ ) ;", "statement . close ( ) ;", "statement = connection . create Statement ( ) ;", "statement . execute ( STR_ ) ;", "statement . close ( ) ; }"]}
{"ids": "13927", "code": ["public Authorization Code ( String code , String resource Owner Id , String client Id , String redirect Uri , Set < String > scope , String claims , long expiry Time , String nonce , String realm , String auth Modules , String acr , String sso Token Id , String code Challenge , String code Challenge Method , String auth Grant Id , String audit Id ) {", "super ( new Hash Map < String , Object > ( ) ) ;", "set String Property ( ID , code ) ;", "set String Property ( USERNAME , resource Owner Id ) ;", "set String Property ( CLIENT ID , client Id ) ;", "set String Property ( REDIRECT URI , redirect Uri ) ;", "set String Property ( EXPIRE TIME , String . value Of ( expiry Time ) ) ;", "put ( SCOPE , new List ( scope ) ) ;", "set String Property ( TOKEN TYPE , STR_ ) ;", "set String Property ( TOKEN NAME , OAUTH CODE TYPE ) ;", "set String Property ( NONCE , nonce ) ;", "set String Property ( AUTH MODULES , auth Modules ) ;", "set String Property ( ACR , acr ) ;", "set String Property ( CODE CHALLENGE , code Challenge ) ;", "set String Property ( CODE CHALLENGE METHOD , code Challenge Method ) ;", "set String Property ( AUTH GRANT ID , auth Grant Id ) ;", "set String Property ( REALM , realm == null || realm . is Empty ( ) ? STR_ : realm ) ;", "set String Property ( SSO TOKEN ID , sso Token Id ) ;", "put ( CLAIMS , Collection Utils . as List ( claims ) ) ;", "set String Property ( AUDIT TRACKING ID , audit Id ) ; }"]}
{"ids": "7414", "code": ["@ Override public Object draw ( Graphics 2 D g 2 , Rectangle 2 D area , Object params ) {", "draw ( g 2 , area ) ;", "return null ; }"]}
{"ids": "6572", "code": ["public boolean is Row Visible ( int row ) {", "if ( row != - NUM_ ) {", "Rectangle cell Rect = get Cell Rect ( row , NUM_ , false ) ;", "Rectangle visible Rect = get Visible Rect ( ) ;", "return visible Rect . intersects ( cell Rect ) ; }", "else return false ; }"]}
{"ids": "28540", "code": ["public void signal Event ( ) {", "Collection < Semaphore > semaphores = semaphores . values ( ) ;", "for ( Semaphore semaphore : semaphores ) {", "semaphore . release ( ) ;", "semaphores . remove ( semaphore ) ; } }"]}
{"ids": "21149", "code": ["public static int file In Time Range ( File f , Date start , Date end ) {", "long time = get File Time ( f ) ;", "if ( start != null && time < start . get Time ( ) ) {", "return - NUM_ ; }", "if ( end != null && time > end . get Time ( ) ) {", "return NUM_ ; }", "return NUM_ ; }"]}
{"ids": "17984", "code": ["public Object ext Function ( String ns , String func Name , Vector arg Vec , Object method Key , Expression Context expr Context ) throws javax . xml . transform . Transformer Exception {", "Object result = null ;", "if ( null != ns ) {", "Extension Handler ext NS = ( Extension Handler ) m extension Function Namespaces . get ( ns ) ;", "if ( null != ext NS ) {", "try {", "result = ext NS . call Function ( func Name , arg Vec , method Key , expr Context ) ; }", "catch ( javax . xml . transform . Transformer Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "throw new javax . xml . transform . Transformer Exception ( e ) ; } }", "else {", "throw new X Path Processor Exception ( XSL Messages . create Message ( XSLT Error Resources . ER EXTENSION FUNC UNKNOWN , new Object [ ] { ns , func Name } ) ) ; } }", "return result ; }"]}
{"ids": "38794", "code": ["private synchronized void block ( boolean tf ) {", "if ( tf ) {", "try {", "if ( m build Thread . is Alive ( ) && m state != IDLE ) {", "wait ( ) ; } }", "catch ( Interrupted Exception ex ) { } }", "else {", "notify All ( ) ; } }"]}
{"ids": "13583", "code": ["public Set < Resource > on Class ( ) {", "Set < Resource > targets = new Hash Set < > ( ) ;", "for ( Owl Class c : qc Classes ) {", "targets . add ( c . get URI ( ) ) ; }", "return targets ; }"]}
{"ids": "67681", "code": ["public static int index Of Chars ( String str , String chars , int from Index ) {", "final int len = str . length ( ) ;", "for ( int pos = from Index ; pos < len ; pos ++ ) {", "if ( chars . index Of ( str . char At ( pos ) ) >= NUM_ ) {", "return pos ; } }", "return - NUM_ ; }"]}
{"ids": "16315", "code": ["private synchronized void notify Zoom Listeners ( Zoom Event e ) {", "for ( Zoom Listener listener : m Zoom Listeners ) {", "listener . zoom Applied ( e ) ; } }"]}
{"ids": "16195", "code": ["public static String build String From Lines ( String ... lines ) {", "int num Chars = lines . length ;", "for ( String line : lines ) {", "num Chars += line . length ( ) ; }", "String Builder builder = new String Builder ( num Chars ) ;", "for ( String line : lines ) {", "builder . append ( line ) ;", "builder . append ( STR_ ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "41391", "code": ["public void init ( ) {", "if ( m Context == null ) {", "return ; }", "if ( m Name . is Empty ( ) ) {", "m Name = m Context . get Package Name ( ) ; }", "if ( m Mode == INVALID VALUE || ( m Mode != MODE PRIVATE && m Mode != MODE WORLD READABLE && m Mode != MODE WORLD WRITEABLE ) ) {", "m Mode = MODE PRIVATE ; }", "m Shared Preferences = m Context . get Shared Preferences ( m Name , m Mode ) ; }"]}
{"ids": "49990", "code": ["@ Override public void merge And Output Transformation Metadata ( Iterator < Distinct Value > values , String output Dir , int col ID , File System fs , Tf Utils agents ) throws IO Exception {", "double min = Double . MAX VALUE ;", "double max = - Double . MAX VALUE ;", "int nbins = NUM_ ;", "Distinct Value val = new Distinct Value ( ) ;", "String w = null ;", "double d ;", "while ( values . has Next ( ) ) {", "val . reset ( ) ;", "val = values . next ( ) ;", "w = val . get Word ( ) ;", "if ( w . starts With ( MIN PREFIX ) ) {", "d = Util Functions . parse To Double ( w . substring ( MIN PREFIX . length ( ) ) ) ;", "if ( d < min ) min = d ; }", "else if ( w . starts With ( MAX PREFIX ) ) {", "d = Util Functions . parse To Double ( w . substring ( MAX PREFIX . length ( ) ) ) ;", "if ( d > max ) max = d ; }", "else if ( w . starts With ( NBINS PREFIX ) ) {", "nbins = ( int ) Util Functions . parse To Long ( w . substring ( NBINS PREFIX . length ( ) ) ) ; }", "else throw new Runtime Exception ( STR_ + w ) ; }", "double binwidth = ( max - min ) / nbins ;", "write Tf Mtd ( col ID , Double . to String ( min ) , Double . to String ( max ) , Double . to String ( binwidth ) , Integer . to String ( nbins ) , output Dir , fs , agents ) ; }"]}
{"ids": "71416", "code": ["static SQL Warning convert Show Warnings To SQL Warnings ( Connection connection ) throws SQL Exception {", "return convert Show Warnings To SQL Warnings ( connection , NUM_ , false ) ; }"]}
{"ids": "38828", "code": ["public boolean has Empty Row ( ) {", "if ( m data Vector . size ( ) == NUM_ ) {", "return false ; }", "List < String > data Row = m data Vector . get ( m data Vector . size ( ) - NUM_ ) ;", "for ( String s : data Row ) {", "if ( s . length ( ) != NUM_ ) {", "return false ; } }", "return true ; }"]}
{"ids": "58044", "code": ["public Node select Single Node ( Node context Node , String str , Node namespace Node ) throws Transformer Exception {", "Node Iterator nl = select Node Iterator ( context Node , str , namespace Node ) ;", "return nl . next Node ( ) ; }"]}
{"ids": "67695", "code": ["private static String java Script Escape Helper ( String s , boolean escape To Ascii ) {", "String Builder sb = new String Builder ( s . length ( ) * NUM_ / NUM_ ) ;", "for ( int i = NUM_ ; i < s . length ( ) ; i ++ ) {", "char c = s . char At ( i ) ;", "switch ( c ) {", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "append Hex Java Script Representation ( sb , c ) ;", "break ;", "case STR_ :", "case STR_ :", "boolean is Unsafe = false ;", "for ( String tag : UNSAFE TAGS ) {", "if ( s . region Matches ( true , i + NUM_ , tag , NUM_ , tag . length ( ) ) ) {", "is Unsafe = true ;", "break ; } }", "if ( is Unsafe ) {", "append Hex Java Script Representation ( sb , c ) ; }", "else {", "sb . append ( c ) ; }", "break ;", "case STR_ :", "if ( sb . length ( ) > NUM_ && sb . char At ( sb . length ( ) - NUM_ ) == STR_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( c ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "default :", "if ( c >= NUM_ && escape To Ascii ) {", "append Hex Java Script Representation ( sb , c ) ; }", "else {", "sb . append ( c ) ; } } }", "return sb . to String ( ) ; }"]}
{"ids": "70459", "code": ["public synchronized void add ( String category , double value ) {", "m Categories . add ( category ) ;", "m Values . add ( value ) ; }"]}
{"ids": "80834", "code": ["public final void walk Graph ( Hashtable sem Nodes Table ) {", "Integer uid = new Integer ( my UID ) ;", "if ( sem Nodes Table . get ( uid ) != null ) return ;", "sem Nodes Table . put ( uid , this ) ;", "if ( assume Expr != null ) {", "assume Expr . walk Graph ( sem Nodes Table ) ; } ; }"]}
{"ids": "20213", "code": ["private List < Value Combo Box Data Group > populate Symbol List ( Class < ? > panel Details ) {", "List < Value Combo Box Data Group > combined Symbol List = new Array List < Value Combo Box Data Group > ( ) ;", "for ( Field State panel : symbol Type Field List ) {", "panel . populate Symbol List ( panel Details , combined Symbol List ) ; }", "return combined Symbol List ; }"]}
{"ids": "6736", "code": ["@ Override public int hash Code ( ) {", "long value = NUM_ ;", "value += NUM_ * value + Double . double To Long Bits ( Math . abs ( x ) ) ;", "value += NUM_ * value + Double . double To Long Bits ( Math . abs ( y ) ) ;", "return ( int ) ( value ^ ( value > > > NUM_ ) ) ; }"]}
{"ids": "35510", "code": ["public void disconnect ( ) {", "socket . disconnect ( ) ; }"]}
{"ids": "66226", "code": ["protected void init Component Defaults ( UI Defaults table ) {", "super . init Component Defaults ( table ) ;", "Color c = table . get Color ( STR_ ) ;", "table . put ( STR_ , c ) ;", "table . put ( STR_ , c ) ; }"]}
{"ids": "69812", "code": ["public int index Of Column Name ( String column Name ) {", "return column Name List . index Of ( column Name . to Lower Case ( ) ) ; }"]}
{"ids": "23638", "code": ["public boolean clear ( T expect , boolean allow Reset ) {", "sync . lock ( ) ;", "try {", "if ( expect != value ) {", "return false ; }", "Value State prev = state ;", "clear ( allow Reset ) ;", "return prev == Value State . SET ; }", "finally {", "sync . unlock ( ) ; } }"]}
{"ids": "27517", "code": ["public void copy Stream ( Input Stream is ) throws IO Exception {", "super . set Content Encoding ( null ) ;", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "while ( true ) {", "int b = is . read ( ) ;", "if ( b == - NUM_ ) {", "content = baos . to Byte Array ( ) ;", "is . close ( ) ;", "return ; } } }"]}
{"ids": "10609", "code": ["public void interrupt ( ) {", "Thread t = thread Var . get ( ) ;", "if ( t != null ) {", "t . interrupt ( ) ; }", "thread Var . clear ( ) ; }"]}
{"ids": "61560", "code": ["public final boolean is Secure ( Socket sock ) throws Illegal Argument Exception {", "if ( sock == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( sock . get Class ( ) != Socket . class ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( sock . is Closed ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return false ; }"]}
{"ids": "12898", "code": ["protected boolean check List ( String current Val , String token Value ) {", "if ( current Val == null || token Value == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( ! current Val . starts With ( STR_ ) && ! current Val . starts With ( STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "boolean negation = current Val . starts With ( STR_ ) ;", "String list Name = current Val . substring ( current Val . index Of ( STR_ ) + NUM_ ) ;", "Object list Obj = list Map . get ( list Name ) ;", "if ( list Obj == null ) return false ;", "boolean contains ;", "if ( list Obj instanceof Set ) {", "Set < String > set = ( Set ) list Obj ;", "contains = set . contains ( token Value ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ + list Obj ) ; }", "return ! ( contains && negation || ! contains && ! negation ) ; }"]}
{"ids": "81150", "code": ["public static synchronized void add Native Library Dependencies ( String name , String ... dependency Names ) {", "List < String > list = library Dependencies . get ( name ) ;", "if ( list == null ) {", "library Dependencies . put ( name , list = new Array List < String > ( ) ) ; }", "for ( String dependency Name : dependency Names ) {", "if ( ! list . contains ( dependency Name ) ) {", "list . add ( dependency Name ) ; } } }"]}
{"ids": "53090", "code": ["@ Override protected boolean has Overflow ( Flat R Star Tree Node node ) {", "if ( node . is Leaf ( ) ) {", "return node . get Num Entries ( ) == leaf Capacity ; }", "else if ( node . get Num Entries ( ) == node . get Capacity ( ) ) {", "node . increase Entries ( ) ; }", "return false ; }"]}
{"ids": "21560", "code": ["public void process Volume Expansion ( Storage System storage System , URI storage Pool URI , URI volume Id , CIM Argument [ ] out Args ) throws Exception {", "String Builder log Msg Builder = new String Builder ( String . format ( STR_ ) ) ;", "Cim Connection connection = cim Connection . get Connection ( storage System ) ;", "WBEM Client client = connection . get Cim Client ( ) ;", "Storage Pool storage Pool = db Client . query Object ( Storage Pool . class , storage Pool URI ) ;", "String Map reservation Map = storage Pool . get Reserved Capacity Map ( ) ;", "reservation Map . remove ( volume Id . to String ( ) ) ;", "update Storage Pool Capacity ( client , storage Pool ) ;", "db Client . persist Object ( storage Pool ) ;", "Volume volume = db Client . query Object ( Volume . class , volume Id ) ;", "CIM Object Path volume Path = ( CIM Object Path ) cim Path . get From Output Args ( out Args , IBM Smis Constants . CP THE ELEMENT ) ;", "boolean is Success = false ;", "if ( volume Path != null ) {", "CIM Instance volume Instance = client . get Instance ( volume Path , true , false , null ) ;", "if ( volume Instance != null ) {", "is Success = true ;", "volume . set Provisioned Capacity ( get Provisioned Capacity Information ( volume Instance ) ) ;", "volume . set Allocated Capacity ( get Allocated Capacity Information ( client , volume Instance ) ) ;", "db Client . persist Object ( volume ) ;", "log Msg Builder . append ( String . format ( STR_ , volume . get Capacity ( ) , volume . get Provisioned Capacity ( ) , volume . get Allocated Capacity ( ) ) ) ; } }", "if ( ! is Success ) {", "Unsigned Integer 32 return Coede = ( Unsigned Integer 32 ) cim Path . get From Output Args ( out Args , IBM Smis Constants . CP RETURN CODE ) ;", "log Msg Builder . append ( STR_ ) ;", "log Msg Builder . append ( String . format ( STR_ , volume . get Id ( ) , return Coede . to String ( ) ) ) ; }", "log . info ( log Msg Builder . to String ( ) ) ; }"]}
{"ids": "46056", "code": ["void update From Native Node ( Node node , boolean from Scratch ) throws IIO Invalid Tree Exception {", "Named Node Map attrs = node . get Attributes ( ) ;", "if ( attrs . get Length ( ) > NUM_ ) {", "int value = get Attribute Value ( node , attrs , STR_ , NUM_ , NUM_ , false ) ;", "major Version = ( value != - NUM_ ) ? value : major Version ;", "value = get Attribute Value ( node , attrs , STR_ , NUM_ , NUM_ , false ) ;", "minor Version = ( value != - NUM_ ) ? value : minor Version ;", "value = get Attribute Value ( node , attrs , STR_ , NUM_ , NUM_ , false ) ;", "res Units = ( value != - NUM_ ) ? value : res Units ;", "value = get Attribute Value ( node , attrs , STR_ , NUM_ , NUM_ , false ) ;", "Xdensity = ( value != - NUM_ ) ? value : Xdensity ;", "value = get Attribute Value ( node , attrs , STR_ , NUM_ , NUM_ , false ) ;", "Ydensity = ( value != - NUM_ ) ? value : Ydensity ;", "value = get Attribute Value ( node , attrs , STR_ , NUM_ , NUM_ , false ) ;", "thumb Width = ( value != - NUM_ ) ? value : thumb Width ;", "value = get Attribute Value ( node , attrs , STR_ , NUM_ , NUM_ , false ) ;", "thumb Height = ( value != - NUM_ ) ? value : thumb Height ; }", "if ( node . has Child Nodes ( ) ) {", "Node List children = node . get Child Nodes ( ) ;", "int count = children . get Length ( ) ;", "if ( count > NUM_ ) {", "throw new IIO Invalid Tree Exception ( STR_ , node ) ; }", "for ( int i = NUM_ ; i < count ; i ++ ) {", "Node child = children . item ( i ) ;", "String name = child . get Node Name ( ) ;", "if ( name . equals ( STR_ ) ) {", "if ( ( ! ext Segments . is Empty ( ) ) && from Scratch ) {", "throw new IIO Invalid Tree Exception ( STR_ , node ) ; }", "Node List exts = child . get Child Nodes ( ) ;", "int ext Count = exts . get Length ( ) ;", "for ( int j = NUM_ ; j < ext Count ; j ++ ) {", "Node ext = exts . item ( j ) ;", "ext Segments . add ( new JFIF Extension Marker Segment ( ext ) ) ; } }", "if ( name . equals ( STR_ ) ) {", "if ( ( icc Segment != null ) && from Scratch ) {", "throw new IIO Invalid Tree Exception ( STR_ , node ) ; }", "icc Segment = new ICC Marker Segment ( child ) ; } } } }"]}
{"ids": "1704", "code": ["@ Override public void create Connection Factory ( String name , boolean ha , boolean use Discovery , int cf Type , String connectors , String bindings ) throws Exception {", "create Connection Factory ( name , ha , use Discovery , cf Type , to Array ( connectors ) , to Array ( bindings ) ) ; }"]}
{"ids": "81788", "code": ["protected Object evaluate Single ( List elements , String expr ) {", "List array ;", "if ( elements instanceof java . util . Vector ) {", "array = new java . util . Vector ( ) ; }", "else {", "array = new Array List ( ) ; }", "for ( Iterator e = elements . iterator ( ) ; e . has Next ( ) ; ) {", "Object o = e . next ( ) ;", "if ( o instanceof Structured Content ) {", "if ( ( o = evaluate Single ( ( Structured Content ) o , expr ) ) != null ) {", "array . add ( o ) ; } } }", "if ( array . size ( ) == NUM_ ) {", "return ( Structured Content ) array . get ( NUM_ ) ; }", "return array ; }"]}
{"ids": "38423", "code": ["private int do Scale ( int number , double factor ) {", "return ( int ) Strict Math . round ( number * factor ) ; }"]}
{"ids": "84244", "code": ["private int parse Message Id ( final byte [ ] b , final int off ) throws Parse Exception {", "final int message Id Len = Constants . MESSAGE ID LEN ;", "final int len = b . length - off ;", "if ( len >= message Id Len ) {", "message Id = Arrays . copy Of Range ( b , off , off + message Id Len ) ;", "return message Id Len ; }", "else {", "throw new Parse Exception ( STR_ ) ; } }"]}
{"ids": "49395", "code": ["static void generate Character Class ( String the Template File Name , String the Output File Name ) throws File Not Found Exception , IO Exception {", "Buffered Reader in = new Buffered Reader ( new File Reader ( the Template File Name ) ) ;", "Print Writer out = new Print Writer ( new Buffered Writer ( new File Writer ( the Output File Name ) ) ) ;", "out . println ( comment Start + STR_ + new java . util . Date ( ) + comment End ) ;", "int marklen = command Marker . length ( ) ;", "LOOP : while ( true ) {", "try {", "String line = in . read Line ( ) ;", "if ( line == null ) break LOOP ;", "int pos = NUM_ ;", "int depth = NUM_ ;", "while ( ( pos = line . index Of ( command Marker , pos ) ) >= NUM_ ) {", "int newpos = pos + marklen ;", "char ch = STR_ ;", "SCAN : while ( newpos < line . length ( ) && ( Character . is Java Identifier Start ( ch = line . char At ( newpos ) ) || ch == STR_ || ( ch == STR_ && depth > NUM_ ) ) ) {", "++ newpos ;", "if ( ch == STR_ ) {", "++ depth ; }", "else if ( ch == STR_ ) {", "-- depth ;", "if ( depth == NUM_ ) break SCAN ; } }", "String replacement = replace Command ( line . substring ( pos + marklen , newpos ) ) ;", "line = line . substring ( NUM_ , pos ) + replacement + line . substring ( newpos ) ;", "pos += replacement . length ( ) ; }", "out . println ( line ) ; }", "catch ( IO Exception e ) {", "break LOOP ; } }", "in . close ( ) ;", "out . close ( ) ; }"]}
{"ids": "4636", "code": ["public static String combine Extensions ( final String [ ] extensions ) {", "Check . not Null ( extensions , STR_ ) ;", "final String Buffer ret = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < extensions . length ; i ++ ) {", "if ( i > NUM_ ) {", "ret . append ( STR_ ) ; }", "ret . append ( extensions [ i ] ) ; }", "return ret . to String ( ) ; }"]}
{"ids": "14973", "code": ["public static void initialize Properties ( String file ) throws Missing Resource Exception {", "Properties props = new Properties ( ) ;", "Resource Bundle bundle = Resource Bundle . get Bundle ( file ) ;", "for ( String key : bundle . key Set ( ) ) {", "props . put ( key , bundle . get String ( key ) ) ; }", "initialize Properties ( props , false , false ) ; }"]}
{"ids": "73200", "code": ["public void add Listener ( final Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "75174", "code": ["public List < T > query As List ( ) {", "Quantum Flux Cursor < T > cursor = query As Cursor ( ) ;", "try {", "List < T > result List = new Array List < > ( cursor . get Count ( ) ) ;", "while ( cursor . move To Next ( ) ) {", "result List . add ( cursor . inflate ( ) ) ; }", "return result List ; }", "finally {", "if ( cursor != null ) cursor . close ( ) ; } }"]}
{"ids": "62558", "code": ["@ Override public void profile ( ) {", "record Stats ( ) ; }"]}
{"ids": "28460", "code": ["public static void touch ( File file ) throws IO Exception {", "if ( ! file . exists ( ) ) {", "Output Stream out = open Output Stream ( file ) ;", "IO Utils . close Quietly ( out ) ; }", "boolean success = file . set Last Modified ( System . current Time Millis ( ) ) ;", "if ( ! success ) {", "throw new IO Exception ( STR_ + file ) ; } }"]}
{"ids": "61059", "code": ["public boolean is Empty ( ) {", "return ext Ordering . is Empty ( ) ; }"]}
{"ids": "42717", "code": ["public static byte [ ] iv Cipher Concat ( byte [ ] iv , byte [ ] cipher Text ) {", "byte [ ] combined = new byte [ iv . length + cipher Text . length ] ;", "System . arraycopy ( iv , NUM_ , combined , NUM_ , iv . length ) ;", "System . arraycopy ( cipher Text , NUM_ , combined , iv . length , cipher Text . length ) ;", "return combined ; }"]}
{"ids": "29677", "code": ["public static final void save Instance Identifier ( String conf Path , String instance Identifier ) throws Exception {", "Path file = Paths . get ( conf Path , INSTANCE IDENTIFIER FILE ) ;", "log . trace ( STR_ , file ) ;", "Atomic Save . execute ( file . to String ( ) , STR_ , instance Identifier . get Bytes ( Standard Charsets . UTF 8 ) ) ; }"]}
{"ids": "79686", "code": ["Part ( String contents , String property ) throws Exception {", "this . contents = STR_ + contents ;", "this . property = property ;", "simplify ( ) ; }"]}
{"ids": "44907", "code": ["public static boolean is Same ( Object s 1 , Object s 2 ) {", "if ( s 1 == s 2 ) return true ;", "if ( X . is Empty ( s 1 ) && X . is Empty ( s 2 ) ) return true ;", "if ( s 1 != null ) {", "return s 1 . equals ( s 2 ) ; }", "return false ; }"]}
{"ids": "27951", "code": ["public static double standard Deviation ( double variance ) {", "return Math . sqrt ( variance ) ; }"]}
{"ids": "50497", "code": ["public static int frequency To MIDI Note ( double a Frequency ) {", "double r = NUM_ ;", "double ref = NUM_ ;", "int supinf = NUM_ ;", "int i = NUM_ ;", "double hautnb = NUM_ ;", "double ref 1 = NUM_ ;", "double ref 2 = NUM_ ;", "double flag = NUM_ ;", "int nmidi = NUM_ ;", "while ( a Frequency < ref ) {", "ref = Math . floor ( NUM_ * ref / r ) / NUM_ ;", "i = i + NUM_ ;", "supinf = - NUM_ ;", "flag = NUM_ ;", "ref 1 = ref ; }", "while ( a Frequency > ref ) {", "ref = Math . floor ( NUM_ * ref * r ) / NUM_ ;", "i = i - NUM_ ;", "supinf = NUM_ ;", "ref 2 = ref ; }", "if ( Math . abs ( a Frequency - ref 1 ) < Math . abs ( a Frequency - ref 2 ) ) {", "supinf = - NUM_ ;", "i = i + NUM_ ; }", "else {", "if ( flag == NUM_ ) supinf = - NUM_ ; }", "if ( ref 1 == NUM_ ) {", "ref 1 = Math . floor ( NUM_ * ref / r ) / NUM_ ;", "if ( Math . abs ( a Frequency - ref 1 ) < Math . abs ( a Frequency - ref 2 ) ) {", "i = i + NUM_ ;", "supinf = NUM_ ; } }", "i = Math . abs ( i ) ;", "while ( i -- != NUM_ ) {", "if ( ( hautnb == NUM_ && supinf == - NUM_ ) || ( hautnb == NUM_ && supinf == NUM_ ) ) {", "if ( supinf == NUM_ ) hautnb = NUM_ ;", "if ( supinf == - NUM_ ) hautnb = NUM_ ; }", "hautnb = hautnb + supinf ;", "nmidi = nmidi + supinf ; }", "return nmidi ; }"]}
{"ids": "23906", "code": ["public void record GC Versions ( Region Version Vector < T > other ) {", "assert other . member To GC Version != null : STR_ ;", "record GC Version ( other . my Id , other . local GC Version . get ( ) ) ;", "for ( Map . Entry < T , Long > entry : other . member To GC Version . entry Set ( ) ) {", "record GC Version ( entry . get Key ( ) , entry . get Value ( ) . long Value ( ) ) ; } }"]}
{"ids": "24676", "code": ["boolean wait For State ( Processor p , int state ) {", "synchronized ( wait Sync ) {", "try {", "while ( p . get State ( ) < state && state Transition OK ) wait Sync . wait ( ) ; }", "catch ( Exception e ) { } }", "return state Transition OK ; }"]}
{"ids": "13642", "code": ["private static boolean extract File ( Context c , String root Asset , String path ) {", "Asset Manager asset Manager = c . get Assets ( ) ;", "Input Stream in = null ;", "Output Stream out = null ;", "try {", "in = asset Manager . open ( root Asset + path ) ;", "String full Path = Pref Store . get Env Dir ( c ) + path ;", "out = new File Output Stream ( full Path ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "int read ;", "while ( ( read = in . read ( buffer ) ) != - NUM_ ) {", "out . write ( buffer , NUM_ , read ) ; }", "out . flush ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "return false ; }", "finally {", "close ( in ) ;", "close ( out ) ; }", "return true ; }"]}
{"ids": "67325", "code": ["protected int never ( ) {", "synchronized ( sleep Lock ) {", "while ( running ) {", "try {", "sleep Lock . wait ( NUM_ * NUM_ * NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "continue ; } }", "return NUM_ ; } }"]}
{"ids": "78268", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return MESSAGE TYPE ;", "case NUM_ :", "return REQUEST INFO ;", "case NUM_ :", "return RESPONSE INFO ;", "case NUM_ :", "return TRACE INFO ;", "case NUM_ :", "return GLOBAL CONTEXT ;", "case NUM_ :", "return LOCAL CONTEXT ;", "case NUM_ :", "return HEARTBEAT INFO ;", "default :", "return null ; } }"]}
{"ids": "38347", "code": ["protected void load History ( boolean set ) {", "Buffered Input Stream str ;", "File file ;", "int width ;", "int height ;", "try {", "file = new File ( get History Filename ( ) ) ;", "if ( file . exists ( ) ) {", "str = new Buffered Input Stream ( new File Input Stream ( get History Filename ( ) ) ) ;", "m History . load ( str ) ; } }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "if ( set ) {", "m Connection Panel . set History ( string To Model ( m History . get Property ( Connection Panel . HISTORY NAME , STR_ ) ) ) ;", "m Query Panel . set History ( string To Model ( m History . get Property ( Query Panel . HISTORY NAME , STR_ ) ) ) ;", "m Query Panel . set Max Rows ( Integer . parse Int ( m History . get Property ( Query Panel . MAX ROWS , STR_ ) ) ) ;", "width = Integer . parse Int ( m History . get Property ( WIDTH , STR_ ) ) ;", "height = Integer . parse Int ( m History . get Property ( HEIGHT , STR_ ) ) ;", "if ( ( width != NUM_ ) && ( height != NUM_ ) ) {", "set Preferred Size ( new Dimension ( width , height ) ) ; } } }"]}
{"ids": "56048", "code": ["private void update Panel For Expansion ( float percentage ) {", "update Promo Visibility ( NUM_ ) ;", "float base Base Y = Math Utils . interpolate ( NUM_ , get Base Page Target Y ( ) , percentage ) ;", "m Base Page Y = base Base Y ;", "float brightness = Math Utils . interpolate ( BASE PAGE BRIGHTNESS STATE PEEKED , BASE PAGE BRIGHTNESS STATE EXPANDED , percentage ) ;", "m Base Page Brightness = brightness ;", "float search Bar Height = Math . round ( Math Utils . interpolate ( m Search Bar Height Peeking , get Search Bar Height Expanded ( ) , percentage ) ) ;", "m Search Bar Height = search Bar Height ;", "m Search Bar Text Opacity = NUM_ ;", "m Is Search Bar Border Visible = true ;", "m Search Bar Border Y = search Bar Height - SEARCH BAR BORDER HEIGHT DP + NUM_ ;", "m Search Icon Opacity = SEARCH ICON OPACITY STATE EXPANDED ;", "m Arrow Icon Opacity = ARROW ICON OPACITY STATE EXPANDED ;", "m Arrow Icon Rotation = Math . round ( Math Utils . interpolate ( ARROW ICON ROTATION STATE PEEKED , ARROW ICON ROTATION STATE EXPANDED , percentage ) ) ;", "m Close Icon Opacity = CLOSE ICON OPACITY STATE EXPANDED ;", "float peeked Height = get Panel Height From State ( Panel State . PEEKED ) ;", "float threshold = PROGRESS BAR VISIBILITY THRESHOLD DP / m Px To Dp ;", "float diff = Math . min ( m Height - peeked Height , threshold ) ;", "float progress Bar Opacity = Math Utils . interpolate ( NUM_ , NUM_ , diff / threshold ) ;", "m Progress Bar Opacity = progress Bar Opacity ;", "m Progress Bar Y = search Bar Height - PROGRESS BAR HEIGHT DP + NUM_ ;", "update Search Bar Shadow ( ) ; }"]}
{"ids": "38054", "code": ["protected boolean [ ] updateable Clusterer ( ) {", "boolean [ ] result = new boolean [ NUM_ ] ;", "print ( STR_ ) ;", "if ( m Clusterer instanceof Updateable Clusterer ) {", "println ( STR_ ) ;", "result [ NUM_ ] = true ; }", "else {", "println ( STR_ ) ;", "result [ NUM_ ] = false ; }", "return result ; }"]}
{"ids": "45582", "code": ["public void add Field ( Mapped Member mm ) {", "fields . add ( mm ) ; }"]}
{"ids": "41232", "code": ["public static List < Base Mqtt Message > read And Convert Message Log ( final File selected File ) throws Spy Exception {", "final List < String > lines = File Utils . read File As Lines ( selected File ) ;", "logger . info ( STR_ , lines . size ( ) , selected File . get Absolute File ( ) ) ;", "return process Message Log ( parse Message Log ( lines , null , NUM_ , NUM_ ) , null , NUM_ , NUM_ ) ; }"]}
{"ids": "70696", "code": ["void read Stream ( Input Stream is ) throws Exception {", "String line ;", "Date start = new Date ( ) ;", "Buffered Reader reader = new Buffered Reader ( new Input Stream Reader ( is ) ) ;", "while ( ( line = reader . read Line ( ) ) != null && ! m Stop ) {", "m Results . append ( line ) ;", "m Results . append ( Tools . Line Sep ) ;", "Date end = new Date ( ) ;", "if ( ( end . get Time ( ) - start . get Time ( ) ) / NUM_ > NUM_ || m Results . length ( ) > NUM_ ) {", "start = end ;", "int last = m Results . last Index Of ( STR_ ) ;", "if ( last != - NUM_ ) {", "Xmpp Msg msg = new Xmpp Msg ( font ) ;", "msg . append ( m Results . substring ( NUM_ , last + NUM_ ) ) ;", "m Cmd Base . send ( m Shell Id , msg ) ;", "m Results . set Length ( NUM_ ) ; } } } }"]}
{"ids": "22923", "code": ["public void remove Parent Relation ( long osm Id ) {", "if ( parent Relations != null ) {", "Array List < Relation > temp Rel List = new Array List < Relation > ( parent Relations ) ;", "for ( Relation r : temp Rel List ) {", "if ( osm Id == r . get Osm Id ( ) ) parent Relations . remove ( r ) ; } } }"]}
{"ids": "54511", "code": ["void insert ( V val , K key ) {", "Array List < K > list = map . get ( val ) ;", "if ( list == null ) {", "list = new Array List < K > ( NUM_ ) ;", "map . put ( clone Value ( val ) , list ) ; }", "list . add ( key ) ; }"]}
{"ids": "23910", "code": ["public Server Socket create Server Socket ( int nport , int backlog ) throws IO Exception {", "return create Server Socket ( nport , backlog , null ) ; }"]}
{"ids": "72340", "code": ["public static Array List < Integer > convert String Array To Integer Array ( List < String > array List ) {", "Array List < Integer > integers = new Array List < > ( ) ;", "for ( String str : array List ) {", "integers . add ( Integer . value Of ( str ) ) ; }", "return integers ; }"]}
{"ids": "17431", "code": ["@ Override public void unwrap SS Lv 2 ( byte [ ] bytes ) {", "unexpected Message ( ) ; }"]}
{"ids": "25106", "code": ["public static String build Selector From Class ( String class Value ) {", "String Builder strb = new String Builder ( ) ;", "strb . append ( CLASS SELECTOR PREFIX ) ;", "strb . append ( class Value ) ;", "return strb . to String ( ) ; }"]}
{"ids": "82469", "code": ["public void ensure Capacity ( int minimum Capacity ) {", "if ( minimum Capacity > value . length ) {", "int our Min = value . length * NUM_ + NUM_ ;", "enlarge Buffer ( Math . max ( our Min , minimum Capacity ) ) ; } }"]}
{"ids": "33399", "code": ["public String pool Footer Statements ( ) {", "String Builder sb = new String Builder ( ) ;", "for ( String footer Statement : footer Statements ) {", "sb . append ( STR_ ) ;", "sb . append ( footer Statement ) ;", "sb . append ( STR_ ) ; }", "footer Statements . clear ( ) ;", "return sb . to String ( ) ; }"]}
{"ids": "86505", "code": ["private void handle Node Queue ( Serial Message incoming Message ) {", "if ( current Stage == Z Wave Node Init Stage . DONE ) {", "return ; }", "logger . debug ( STR_ , node . get Node Id ( ) , msg Queue . size ( ) ) ;", "if ( msg Queue . contains ( incoming Message ) ) {", "msg Queue . remove ( incoming Message ) ;", "logger . debug ( STR_ , node . get Node Id ( ) , msg Queue . size ( ) ) ;", "free To Send = true ;", "advance Node Stage ( incoming Message . get Message Class ( ) ) ; }", "else if ( msg Queue . is Empty ( ) && current Stage == Z Wave Node Init Stage . SECURITY REPORT ) {", "logger . debug ( STR_ , node . get Node Id ( ) ) ;", "advance Node Stage ( incoming Message . get Message Class ( ) ) ; } }"]}
{"ids": "27090", "code": ["public static Predicate < String > matches ( final String regexp ) {", "Objects . require Non Null ( regexp , STR_ ) ;", "return null ; }"]}
{"ids": "542", "code": ["public boolean has Set ( String name ) {", "return m map . contains Key ( name ) ; }"]}
{"ids": "45054", "code": ["public void clear Parsers ( ) {", "timer . stop ( ) ;", "clear Parser Notice Highlights ( ) ;", "parsers . clear ( ) ;", "text Area . fire Parser Notices Change ( ) ; }"]}
{"ids": "72031", "code": ["protected Property Definition ( Abstract Managed Object Definition < ? , ? > d , Class < T > the Class , String property Name , Enum Set < Property Option > options , Administrator Action admin Action , Default Behavior Provider < T > default Behavior ) {", "Reject . if Null ( d , the Class , property Name , options , admin Action , default Behavior ) ;", "this . definition = d ;", "this . the Class = the Class ;", "this . property Name = property Name ;", "this . options = Enum Set . copy Of ( options ) ;", "this . admin Action = admin Action ;", "this . default Behavior = default Behavior ; }"]}
{"ids": "47535", "code": ["public Date Time Parse Exception ( String message , Char Sequence parsed Data , int error Index , Throwable cause ) {", "super ( message , cause ) ;", "this . parsed String = parsed Data . to String ( ) ;", "this . error Index = error Index ; }"]}
{"ids": "29488", "code": ["public Configure Xml Attribute Count Dialog NB ( Xml Attribute Count xml Attribute Count ) {", "this . xml Attribute Count = xml Attribute Count ;", "init Components ( ) ;", "final Iterate Model number Of Tags Iterator = xml Attribute Count . get Number Of Attributes Iterator ( ) ;", "configure Iterate Model NB 2 . set Start At ( String . value Of ( number Of Tags Iterator . get Start At ( ) ) ) ;", "configure Iterate Model NB 2 . set Stop At ( String . value Of ( number Of Tags Iterator . get Stop At ( ) ) ) ;", "configure Iterate Model NB 2 . set Increment ( String . value Of ( number Of Tags Iterator . get Increment ( ) ) ) ;", "configure Iterate Model NB 2 . set Iterate Strategie ( number Of Tags Iterator . get Iterate Strategie ( ) ) ;", "List < String > names = Arrays . as List ( xml Attribute Count . get Names ( ) ) ;", "configure String List NB 1 . set String List ( names ) ; }"]}
{"ids": "34738", "code": ["public void on Menu Dismissed ( ) {", "m Reload Menu Item = null ; }"]}
{"ids": "8297", "code": ["public static Thread consume Process Output Stream ( Process self , Output Stream output ) {", "Thread thread = new Thread ( new Byte Dumper ( self . get Input Stream ( ) , output ) ) ;", "thread . start ( ) ;", "return thread ; }"]}
{"ids": "74684", "code": ["public static Angle great Circle Azimuth ( Lat Lon p 1 , Lat Lon p 2 ) {", "if ( ( p 1 == null ) || ( p 2 == null ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "double lat 1 = p 1 . get Latitude ( ) . radians ;", "double lon 1 = p 1 . get Longitude ( ) . radians ;", "double lat 2 = p 2 . get Latitude ( ) . radians ;", "double lon 2 = p 2 . get Longitude ( ) . radians ;", "if ( lat 1 == lat 2 && lon 1 == lon 2 ) return Angle . ZERO ;", "if ( lon 1 == lon 2 ) return lat 1 > lat 2 ? Angle . POS 180 : Angle . ZERO ;", "double y = Math . cos ( lat 2 ) * Math . sin ( lon 2 - lon 1 ) ;", "double x = Math . cos ( lat 1 ) * Math . sin ( lat 2 ) - Math . sin ( lat 1 ) * Math . cos ( lat 2 ) * Math . cos ( lon 2 - lon 1 ) ;", "double azimuth Radians = Math . atan 2 ( y , x ) ;", "return Double . is Na N ( azimuth Radians ) ? Angle . ZERO : Angle . from Radians ( azimuth Radians ) ; }"]}
{"ids": "67002", "code": ["public void add All Tags Of ( Host h ) {", "List < Tag > tags = h . get Tags ( ) ;", "if ( tags . is Empty ( ) ) return ;", "if ( m Tag List == null ) {", "m Tag List = new Array List < Tag > ( tags . size ( ) ) ; }", "m Tag List . add All ( tags ) ; }"]}
{"ids": "43610", "code": ["public static boolean is Numbers With Punctuation ( String token ) {", "boolean has Digit = false ;", "int len = token . length ( ) ;", "for ( int i = NUM_ ; i < len ; ++ i ) {", "char c = token . char At ( i ) ;", "has Digit = has Digit || Character . is Digit ( c ) ;", "if ( ! ( Character . is Digit ( c ) || Characters . is Punctuation ( c ) ) ) {", "return false ; } }", "return has Digit ; }"]}
{"ids": "82732", "code": ["private boolean is Paint Line Seperators ( J Component c ) {", "boolean paint Lines = c instanceof J Text Area ;", "String global Override = System . get Property ( STR_ ) ;", "if ( global Override != null && global Override . length ( ) > NUM_ ) {", "paint Lines = Boolean . value Of ( global Override ) ; }", "Boolean override Property = ( Boolean ) c . get Client Property ( STR_ ) ;", "if ( override Property != null ) {", "paint Lines = override Property ; }", "return paint Lines ; }"]}
{"ids": "63089", "code": ["public static Db open ( Data Source ds ) {", "try {", "return new Db ( ds . get Connection ( ) ) ; }", "catch ( SQL Exception e ) {", "throw convert ( e ) ; } }"]}
{"ids": "23861", "code": ["@ Override public void basic Put Part 3 ( Entry Event Impl event , Region Entry entry , boolean is Initialized , long last Modified , boolean invoke Callbacks , boolean if New , boolean if Old , Object expected Old Value , boolean require Old Value ) {", "distribute Update ( event , last Modified , false , false , null , false ) ;", "super . basic Put Part 3 ( event , entry , is Initialized , last Modified , invoke Callbacks , if New , if Old , expected Old Value , require Old Value ) ; }"]}
{"ids": "27639", "code": ["public Language Range ( String range ) {", "this . range = range . split ( STR_ ) ;", "full = range ; }"]}
{"ids": "43217", "code": ["protected void remove Container ( ) throws Throwable {", "if ( container Id == null ) {", "return ; }", "send Delete Container Request ( ) ;", "wait For Property Value ( provisioning Task Link , Mock Task State . class , STR_ , Task State . Task Stage . FINISHED ) ;", "if ( ! is Mock Target ( ) ) {", "Thread . sleep ( NUM_ ) ; }", "verify Container Does Not Exist ( container Id ) ; }"]}
{"ids": "15241", "code": ["public int size ( ) {", "return list . size ( ) ; }"]}
{"ids": "18073", "code": ["public Transformer Handler new Transformer Handler ( Templates templates ) throws Transformer Configuration Exception {", "try {", "Transformer Impl transformer = ( Transformer Impl ) templates . new Transformer ( ) ;", "transformer . set URI Resolver ( m uri Resolver ) ;", "Transformer Handler th = ( Transformer Handler ) transformer . get Input Content Handler ( true ) ;", "return th ; }", "catch ( Transformer Configuration Exception ex ) {", "if ( m error Listener != null ) {", "try {", "m error Listener . fatal Error ( ex ) ;", "return null ; }", "catch ( Transformer Configuration Exception ex 1 ) {", "throw ex 1 ; }", "catch ( Transformer Exception ex 1 ) {", "throw new Transformer Configuration Exception ( ex 1 ) ; } }", "throw ex ; } }"]}
{"ids": "19515", "code": ["public void add Field ( Field Ref fref ) {", "m Field Refs . add ( fref ) ; }"]}
{"ids": "43943", "code": ["public String render ( Value Expr the Expr ) throws Exception {", "reset ( ) ;", "the Expr . visit ( this ) ;", "return m Buffer . to String ( ) ; }"]}
{"ids": "72552", "code": ["public void add ( final Vector 2 D [ ] b Loop ) throws Math Illegal Argument Exception {", "add ( new Nested Loops ( b Loop , tolerance ) ) ; }"]}
{"ids": "60166", "code": ["@ Not Null public static < T > List < T > as List ( @ Nullable final Collection < ? > expression , @ Not Null final Class < T > element Class ) {", "if ( ( expression == null ) || expression . is Empty ( ) ) {", "return Collections . empty List ( ) ; }", "final List < T > result = new Array List < T > ( ) ;", "for ( final Object element : expression ) {", "final T to Add = as ( element , element Class ) ;", "if ( to Add != null ) {", "result . add ( to Add ) ; } }", "return result ; }"]}
{"ids": "72686", "code": ["private void start New Transition ( ) {", "if ( ! has Bounds ( ) ) {", "return ; }", "m Current Trans = m Trans Gen . generate Next Transition ( m Drawable Rect , m Viewport Rect ) ;", "m Elapsed Time = NUM_ ;", "m Last Frame Time = System . current Time Millis ( ) ;", "fire Transition Start ( m Current Trans ) ; }"]}
{"ids": "60596", "code": ["@ Override protected void make Finished ( ) {", "byte [ ] verify data ;", "if ( server Hello . server version [ NUM_ ] == NUM_ ) {", "verify data = new byte [ NUM_ ] ;", "computer Verify Data TLS ( STR_ , verify data ) ; }", "else {", "verify data = new byte [ NUM_ ] ;", "computer Verify Data SS Lv 3 ( SS Lv 3 Constants . client , verify data ) ; }", "client Finished = new Finished ( verify data ) ;", "send ( client Finished ) ;", "if ( is Resuming ) {", "session . last Accessed Time = System . current Time Millis ( ) ;", "status = FINISHED ; }", "else {", "if ( server Hello . server version [ NUM_ ] == NUM_ ) {", "computer Reference Verify Data TLS ( STR_ ) ; }", "else {", "computer Reference Verify Data SS Lv 3 ( SS Lv 3 Constants . server ) ; }", "status = NEED UNWRAP ; } }"]}
{"ids": "62905", "code": ["public static File remove Extension ( File file ) {", "String absolute Path = file . get Absolute Path ( ) ;", "if ( absolute Path . contains ( STR_ ) ) {", "return new File ( absolute Path . substring ( NUM_ , absolute Path . last Index Of ( STR_ ) ) ) ; }", "else {", "return file ; } }"]}
{"ids": "70328", "code": ["public void update ( ) {", "if ( bg Is Opaque ) {", "int w = Math . max ( get Size ( ) . width , min Width ) ;", "int h = Math . max ( get Size ( ) . height , min Height ) ;", "off Scr = create Image ( w , h ) ;", "if ( off Scr == null ) return ;", "Graphics g = off Scr . get Graphics ( ) ;", "draw Into ( g ) ;", "repaint ( ) ;", "g . dispose ( ) ; }", "else {", "repaint ( ) ; } }"]}
{"ids": "48143", "code": ["public static final int read Int ( Input Stream is ) throws IO Exception {", "return ( ( ( NUM_ & is . read ( ) ) << NUM_ ) | ( NUM_ & is . read ( ) ) ) ; }"]}
{"ids": "15522", "code": ["private void save Dynamic Actions ( Faces Context context , State Context state Context , Map < String , Object > state Map ) {", "if ( LOGGER . is Loggable ( Level . FINEST ) ) {", "LOGGER . finest ( STR_ ) ; }", "List < Component Struct > actions = state Context . get Dynamic Actions ( ) ;", "Hash Map < String , UI Component > component Map = state Context . get Dynamic Components ( ) ;", "if ( actions != null ) {", "List < Object > saved Actions = new Array List < > ( actions . size ( ) ) ;", "for ( Component Struct action : actions ) {", "UI Component component = component Map . get ( action . client Id ) ;", "if ( component == null && context . is Project Stage ( Project Stage . Development ) ) {", "LOGGER . log ( Level . WARNING , STR_ , action . client Id ) ; }", "if ( component != null ) {", "saved Actions . add ( action . save State ( context ) ) ; } }", "state Map . put ( DYNAMIC ACTIONS , saved Actions ) ; } }"]}
{"ids": "38959", "code": ["private Instance generate Example ( Instances format , Random random G , Subspace Cluster Definition cl , String c Name ) {", "boolean make Integer = cl . is Integer ( ) ;", "int num = - NUM_ ;", "Instance example = null ;", "int num Atts = m Num Attributes ;", "if ( get Class Flag ( ) ) {", "num Atts ++ ; }", "example = new Dense Instance ( num Atts ) ;", "example . set Dataset ( format ) ;", "boolean [ ] attributes = cl . get Attributes ( ) ;", "double [ ] min Value = cl . get Min Value ( ) ;", "double [ ] max Value = cl . get Max Value ( ) ;", "double value ;", "int cluster I = - NUM_ ;", "for ( int i = NUM_ ; i < m Num Attributes ; i ++ ) {", "if ( attributes [ i ] ) {", "cluster I ++ ;", "num ++ ;", "if ( is Boolean ( i ) || is Nominal ( i ) ) {", "if ( min Value [ cluster I ] == max Value [ cluster I ] ) {", "value = min Value [ cluster I ] ; }", "else {", "int num Values = ( int ) ( max Value [ cluster I ] - min Value [ cluster I ] + NUM_ ) ;", "value = random G . next Int ( num Values ) ;", "value += min Value [ cluster I ] ; } }", "else {", "value = random G . next Double ( ) * ( max Value [ num ] - min Value [ num ] ) + min Value [ num ] ;", "if ( make Integer ) {", "value = Math . round ( value ) ; } }", "example . set Value ( i , value ) ; }", "else {", "example . set Missing ( i ) ; } }", "if ( get Class Flag ( ) ) {", "example . set Class Value ( c Name ) ; }", "return example ; }"]}
{"ids": "64178", "code": ["@ Override public long skip ( long n ) {", "if ( n < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + n ) ; }", "if ( idx >= char Sequence . length ( ) ) {", "return - NUM_ ; }", "int dest = ( int ) Math . min ( char Sequence . length ( ) , idx + n ) ;", "int count = dest - idx ;", "idx = dest ;", "return count ; }"]}
{"ids": "51293", "code": ["@ Override public void clear ( ) {", "if ( element Count > NUM_ ) {", "element Count = NUM_ ;", "Arrays . fill ( element Data , null ) ;", "mod Count ++ ;", "while ( reference Queue . poll ( ) != null ) { } } }"]}
{"ids": "20135", "code": ["public Default Console Panel ( ) {", "set Layout ( new Border Layout ( NUM_ , NUM_ ) ) ;", "text Pane = new J Text Area ( ) ;", "text Pane . set Rows ( NUM_ ) ;", "text Pane . set Editable ( false ) ;", "J Scroll Pane jp = new J Scroll Pane ( text Pane ) ;", "add ( jp , Border Layout . CENTER ) ; }"]}
{"ids": "45929", "code": ["public void push ( ) {", "level . add ( null ) ;", "cloned = false ; }"]}
{"ids": "51773", "code": ["private static void load Plugins From Class Loader ( Class Loader class Loader ) {", "Service Loader < GDS Factory Plugin > plugin Loader = Service Loader . load ( GDS Factory Plugin . class , class Loader ) ;", "for ( GDS Factory Plugin plugin : plugin Loader ) {", "register Plugin ( plugin ) ; } }"]}
{"ids": "37677", "code": ["public String redo ( ) {", "if ( ! can Redo ( ) ) {", "return STR_ ; }", "m n Current Edit Action ++ ;", "Undo Action undo Action = m undo Stack . get ( m n Current Edit Action ) ;", "m b Needs Undo Action = false ;", "undo Action . redo ( ) ;", "m b Needs Undo Action = true ;", "return undo Action . get Redo Msg ( ) ; }"]}
{"ids": "2692", "code": ["@ Override public Writer append ( Char Sequence value ) {", "builder . append ( value ) ;", "return this ; }"]}
{"ids": "3617", "code": ["@ Override public Inet Socket Address ip Local ( ) {", "Socket Channel s = channel ;", "if ( s != null ) {", "try {", "return ( Inet Socket Address ) s . get Local Address ( ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }", "else {", "return null ; } }"]}
{"ids": "59771", "code": ["@ Nonnull private static Node Disk find Node Disk ( String disk Id , List < Node Disk > node Disks , String node Name ) throws IO Exception {", "Node Disk selected = null ;", "for ( Node Disk node Disk : node Disks ) {", "if ( disk Id . equals ( node Disk . get Disk Ref Id ( ) ) ) {", "selected = node Disk ;", "break ; } }", "if ( selected == null ) {", "String message = format ( STR_ , node Name , disk Id ) ;", "throw new Abort Exception ( message ) ; }", "if ( selected . get Node Mount Point ( ) == null ) {", "String message = format ( STR_ , node Name , disk Id ) ;", "throw new Abort Exception ( message ) ; }", "return selected ; }"]}
{"ids": "5609", "code": ["private int strip Multipart Headers ( byte [ ] b , int offset ) {", "int i = NUM_ ;", "for ( i = offset ; i < b . length ; i ++ ) {", "if ( b [ i ] == STR_ && b [ ++ i ] == STR_ && b [ ++ i ] == STR_ && b [ ++ i ] == STR_ ) break ; }", "return i + NUM_ ; }"]}
{"ids": "19520", "code": ["void seek ( int position ) throws IO Exception {", "m Dex File . seek ( position ) ; }"]}
{"ids": "62606", "code": ["@ Override public List < Column > columns ( ) {", "return column List ; }"]}
{"ids": "12765", "code": ["public static void write Float ( Data Output Stream dos , boolean is Big Endian , float val ) throws IO Exception {", "if ( ! is Big Endian ) {", "write Little Endian Float ( dos , val ) ; }", "else {", "dos . write Float ( val ) ; } }"]}
{"ids": "22836", "code": ["public static void main ( String [ ] args ) {", "Log . print Line ( STR_ ) ;", "try {", "int num user = NUM_ ;", "Calendar calendar = Calendar . get Instance ( ) ;", "boolean trace flag = false ;", "Cloud Sim . init ( num user , calendar , trace flag ) ;", "@ Suppress Warnings ( STR_ ) Datacenter datacenter 0 = create Datacenter ( STR_ ) ;", "Datacenter Broker broker = create Broker ( ) ;", "int broker Id = broker . get Id ( ) ;", "vmlist = new Array List < Vm > ( ) ;", "int vmid = NUM_ ;", "int mips = NUM_ ;", "long size = NUM_ ;", "int ram = NUM_ ;", "long bw = NUM_ ;", "int pes Number = NUM_ ;", "String vmm = STR_ ;", "Vm vm 1 = new Vm ( vmid , broker Id , mips , pes Number , ram , bw , size , vmm , new Cloudlet Scheduler Time Shared ( ) ) ;", "vmid ++ ;", "Vm vm 2 = new Vm ( vmid , broker Id , mips * NUM_ , pes Number , ram , bw , size , vmm , new Cloudlet Scheduler Time Shared ( ) ) ;", "vmlist . add ( vm 1 ) ;", "vmlist . add ( vm 2 ) ;", "broker . submit Vm List ( vmlist ) ;", "cloudlet List = new Array List < Cloudlet > ( ) ;", "int id = NUM_ ;", "long length = NUM_ ;", "long file Size = NUM_ ;", "long output Size = NUM_ ;", "Utilization Model utilization Model = new Utilization Model Full ( ) ;", "Cloudlet cloudlet 1 = new Cloudlet ( id , length , pes Number , file Size , output Size , utilization Model , utilization Model , utilization Model ) ;", "cloudlet 1 . set User Id ( broker Id ) ;", "id ++ ;", "Cloudlet cloudlet 2 = new Cloudlet ( id , length , pes Number , file Size , output Size , utilization Model , utilization Model , utilization Model ) ;", "cloudlet 2 . set User Id ( broker Id ) ;", "cloudlet List . add ( cloudlet 1 ) ;", "cloudlet List . add ( cloudlet 2 ) ;", "broker . submit Cloudlet List ( cloudlet List ) ;", "broker . bind Cloudlet To Vm ( cloudlet 1 . get Cloudlet Id ( ) , vm 1 . get Id ( ) ) ;", "broker . bind Cloudlet To Vm ( cloudlet 2 . get Cloudlet Id ( ) , vm 2 . get Id ( ) ) ;", "Cloud Sim . start Simulation ( ) ;", "List < Cloudlet > new List = broker . get Cloudlet Received List ( ) ;", "Cloud Sim . stop Simulation ( ) ;", "print Cloudlet List ( new List ) ;", "Log . print Line ( STR_ ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "Log . print Line ( STR_ ) ; } }"]}
{"ids": "42291", "code": ["public static Instruction osr Helper ( Instruction barrier , Generation Context gc ) {", "Instruction inst = Osr Point . create ( YIELDPOINT OSR , null , NUM_ ) ;", "gc . save OSR Barrier For Inst ( barrier , inst ) ;", "return inst ; }"]}
{"ids": "59984", "code": ["protected void initialize State ( S current ) {", "Initialization Utils . initialize ( current ) ;", "if ( current . document Expiration Time Micros <= NUM_ ) {", "current . document Expiration Time Micros = Service Utils . compute Expiration Time ( Service Utils . DEFAULT DOC EXPIRATION TIME MICROS ) ; } }"]}
{"ids": "22608", "code": ["@ Suppress Warnings ( STR_ ) public Input Stream fetch Volume Stats ( final Argument argument , final Map < String , Object > key Map , int index ) throws VNX File Plugin Exception {", "logger . info ( STR_ ) ;", "Input Stream i Stream = null ;", "List < Query Stats > stat List = new Array List < Query Stats > ( ) ;", "try {", "Set < String > movers = ( Set < String > ) key Map . get ( VNX File Constants . MOVERLIST ) ;", "if ( null != movers && ! movers . is Empty ( ) ) {", "for ( String mover ID : movers ) {", "Query Stats query Stats = new Query Stats ( ) ;", "Volume Stats Set Query Params params = new Volume Stats Set Query Params ( ) ;", "params . set Stats Set ( Volume Stats Set Type . ALL ) ;", "params . set Mover ( mover ID ) ;", "query Stats . set Volume Stats ( params ) ;", "stat List . add ( query Stats ) ; }", "i Stream = vnx File Input Request Builder . get Multi Request Query Stats Packet ( stat List ) ; }", "else {", "logger . error ( STR_ ) ; } }", "catch ( JAXB Exception jaxb Exception ) {", "throw new VNX File Plugin Exception ( STR_ , jaxb Exception . get Cause ( ) ) ; }", "return i Stream ; }"]}
{"ids": "60952", "code": ["private static boolean is Directory ( URL url ) {", "String file = url . get File ( ) ;", "return ( file . length ( ) > NUM_ && file . char At ( file . length ( ) - NUM_ ) == STR_ ) ; }"]}
{"ids": "77668", "code": ["@ Override public final String read UTF ( ) throws IO Exception {", "return dis . read UTF ( ) ; }"]}
{"ids": "210", "code": ["@ Nullable public static Network Parameters from ID ( String id ) {", "if ( id . equals ( ID MAINNET ) ) {", "return Main Net Params . get ( ) ; }", "else if ( id . equals ( ID TESTNET ) ) {", "return Test Net 3 Params . get ( ) ; }", "else if ( id . equals ( ID UNITTESTNET ) ) {", "return Unit Test Params . get ( ) ; }", "else {", "return null ; } }"]}
{"ids": "25350", "code": ["final synchronized void release Socket ( ) {", "running = false ;", "sender . interrupt ( ) ;", "outbound Messages . clear ( ) ;", "if ( socket != null ) {", "socket . close ( ) ;", "socket = null ; }", "maximum Transmission Unit = NUM_ ; }"]}
{"ids": "76578", "code": ["public boolean add Part ( Pdu Part part ) {", "if ( null == part ) {", "throw new Null Pointer Exception ( ) ; }", "put Part To Maps ( part ) ;", "return m Parts . add ( part ) ; }"]}
{"ids": "43439", "code": ["public String code Owner ( List < Code Owner > code Owners ) {", "long current Unix = System . current Time Millis ( ) / NUM_ ;", "double best = NUM_ ;", "String owner = STR_ ;", "for ( Code Owner code Owner : code Owners ) {", "double age = ( current Unix - code Owner . get Most Recent Unix Commit Timestamp ( ) ) / NUM_ / NUM_ ;", "double calc = code Owner . get No Lines ( ) / Math . pow ( ( age ) , NUM_ ) ;", "if ( calc > best ) {", "best = calc ;", "owner = code Owner . get Name ( ) ; } }", "return owner ; }"]}
{"ids": "54722", "code": ["private Array List < Cell Record > process Neighbors ( final Cell Record serving , final Position Record cell Pos ) {", "final Array List < Cell Record > neighbors = new Array List < > ( ) ;", "final Array List < Neighboring Cell Info > neighboring Cell Infos = ( Array List < Neighboring Cell Info > ) m Telephony Manager . get Neighboring Cell Info ( ) ;", "if ( serving == null ) {", "Log . e ( TAG , STR_ ) ;", "return neighbors ; }", "if ( neighboring Cell Infos == null ) {", "Log . i ( TAG , STR_ ) ;", "return neighbors ; }", "for ( final Neighboring Cell Info ci : neighboring Cell Infos ) {", "final boolean skip = ! is Valid Neigbor ( ci ) ;", "if ( ! skip ) {", "final Cell Record neighbor = new Cell Record ( m Session Id ) ;", "neighbor . set Open Bmap Timestamp ( cell Pos . get Open Bmap Timestamp ( ) ) ;", "neighbor . set Begin Position ( cell Pos ) ;", "neighbor . set End Position ( cell Pos ) ;", "neighbor . set Is Serving ( false ) ;", "neighbor . set Is Neighbor ( true ) ;", "neighbor . set Mnc ( serving . get Mnc ( ) ) ;", "neighbor . set Mcc ( serving . get Mcc ( ) ) ;", "neighbor . set Operator ( serving . get Operator ( ) ) ;", "neighbor . set Operator Name ( serving . get Operator Name ( ) ) ;", "final int network Type = ci . get Network Type ( ) ;", "neighbor . set Network Type ( network Type ) ;", "if ( network Type == Telephony Manager . NETWORK TYPE GPRS || network Type == Telephony Manager . NETWORK TYPE EDGE ) {", "neighbor . set Is Cdma ( false ) ;", "neighbor . set Logical Cell Id ( ci . get Cid ( ) ) ;", "neighbor . set Area ( ci . get Lac ( ) ) ;", "neighbor . set Strengthd Bm ( - NUM_ + NUM_ * ci . get Rssi ( ) ) ;", "neighbor . set Strength Asu ( ci . get Rssi ( ) ) ; }", "else if ( network Type == Telephony Manager . NETWORK TYPE UMTS || network Type == Telephony Manager . NETWORK TYPE HSDPA || network Type == Telephony Manager . NETWORK TYPE HSUPA || network Type == Telephony Manager . NETWORK TYPE HSPA ) {", "neighbor . set Is Cdma ( false ) ;", "neighbor . set Psc ( ci . get Psc ( ) ) ;", "neighbor . set Strengthd Bm ( ci . get Rssi ( ) ) ;", "final int asu = ( int ) Math . round ( ( ci . get Rssi ( ) + NUM_ ) / NUM_ ) ;", "neighbor . set Strength Asu ( asu ) ; }", "else if ( network Type == Telephony Manager . NETWORK TYPE CDMA ) {", "neighbor . set Is Cdma ( true ) ; }", "neighbors . add ( neighbor ) ; } }", "return neighbors ; }"]}
{"ids": "14748", "code": ["public Map read ( SSO Token token , String obj Name ) throws SMS Exception , SSO Exception {", "if ( obj Name == null || obj Name . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "String obj Key = obj Name . to Lower Case ( ) ;", "Map attr Map = null ;", "m RW Lock . read Request ( ) ;", "try {", "String filepath = m Name Map . get Property ( obj Key ) ;", "if ( filepath == null ) {", "if ( m Debug . message Enabled ( ) ) {", "m Debug . message ( STR_ + obj Name + STR_ ) ; } }", "else {", "File filehandle = new File ( filepath ) ;", "Properties props = null ;", "try {", "props = load Properties ( filehandle , obj Name ) ; }", "catch ( Service Not Found Exception e ) { }", "if ( props != null ) {", "attr Map = new Case Insensitive Hash Map ( ) ;", "Enumeration keys = props . property Names ( ) ;", "while ( keys . has More Elements ( ) ) {", "String key = ( String ) keys . next Element ( ) ;", "String vals = props . get Property ( key ) ;", "if ( ( vals != null ) && ( vals . length ( ) > NUM_ ) ) {", "attr Map . put ( key , to Val Set ( key , vals ) ) ; } } } } }", "finally {", "m RW Lock . read Done ( ) ; }", "return attr Map ; }"]}
{"ids": "82479", "code": ["public static double parse Double ( String s ) {", "s = s . trim ( ) ;", "int length = s . length ( ) ;", "if ( length == NUM_ ) {", "throw invalid Real ( s , true ) ; }", "char last = s . char At ( length - NUM_ ) ;", "if ( last == STR_ || last == STR_ ) {", "return parse Name ( s , true ) ; }", "String Exponent Pair info = initial Parse ( s , length , true ) ;", "if ( info . infinity || info . zero ) {", "return info . special Value ( ) ; }", "double result = parse Dbl Impl ( info . s , ( int ) info . e ) ;", "if ( Double . double To Long Bits ( result ) == NUM_ ) {", "throw invalid Real ( s , true ) ; }", "return info . negative ? - result : result ; }"]}
{"ids": "20073", "code": ["public byte read Byte ( ) throws IO Exception {", "byte v = data Input . read Byte ( ) ;", "offset += NUM_ ;", "available -= NUM_ ;", "return v ; }"]}
{"ids": "5576", "code": ["public static I Multi Point [ ] random Points ( int n , int d ) {", "I Multi Point points [ ] = new I Multi Point [ n ] ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "String Builder sb = new String Builder ( ) ;", "for ( int j = NUM_ ; j < d ; j ++ ) {", "sb . append ( r Gen . next Double ( ) ) ;", "if ( j < d - NUM_ ) {", "sb . append ( STR_ ) ; } }", "points [ i ] = new Hyperpoint ( sb . to String ( ) ) ; }", "return points ; }"]}
{"ids": "4367", "code": ["private String verify Restore Code ( String restore Code , String code ) {", "if ( code == null ) {", "return STR_ ; }", "if ( restore Code == null ) {", "return STR_ ; }", "boolean valid Code = password Manager . matches ( code , restore Code ) ;", "return valid Code ? null : STR_ + code + STR_ + restore Code + STR_ ; }"]}
{"ids": "16072", "code": ["public static void append Padded Integer ( String Buffer buf , long value , int size ) {", "int int Value = ( int ) value ;", "if ( int Value == value ) {", "append Padded Integer ( buf , int Value , size ) ; }", "else if ( size <= NUM_ ) {", "buf . append ( Long . to String ( value ) ) ; }", "else {", "if ( value < NUM_ ) {", "buf . append ( STR_ ) ;", "if ( value != Long . MIN VALUE ) {", "value = - value ; }", "else {", "for ( ; size > NUM_ ; size -- ) {", "buf . append ( STR_ ) ; }", "buf . append ( STR_ ) ;", "return ; } }", "int digits = ( int ) ( Math . log ( value ) / LOG 10 ) + NUM_ ;", "for ( ; size > digits ; size -- ) {", "buf . append ( STR_ ) ; }", "buf . append ( Long . to String ( value ) ) ; } }"]}
{"ids": "38586", "code": ["@ Override public void add Undo Point ( ) {", "File temp File ;", "Object Output Stream oos ;", "if ( ! is Undo Enabled ( ) ) {", "return ; }", "if ( get Instances ( ) != null ) {", "try {", "temp File = File . create Temp File ( STR_ , null ) ;", "temp File . delete On Exit ( ) ;", "oos = new Object Output Stream ( new Buffered Output Stream ( new File Output Stream ( temp File ) ) ) ;", "oos . write Object ( get Instances ( ) ) ;", "oos . flush ( ) ;", "oos . close ( ) ;", "m Undo List . add ( temp File ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "7186", "code": ["public final void add Child Node ( Row Regex Expr Node child Node ) {", "child Nodes . add ( child Node ) ; }"]}
{"ids": "33279", "code": ["private List < String > make List ( final String ... strings ) {", "final List < String > result = new Array List < > ( ) ;", "for ( String string : strings ) {", "result . add ( string ) ; }", "return result ; }"]}
{"ids": "56433", "code": ["public int number Of Shards With State ( Shard Routing State ... states ) {", "int count = NUM_ ;", "for ( Shard Routing shard Entry : this ) {", "for ( Shard Routing State state : states ) {", "if ( shard Entry . state ( ) == state ) {", "count ++ ; } } }", "return count ; }"]}
{"ids": "27601", "code": ["@ Override public void notify Commit ( final long commit Time ) {", "lock . lock ( ) ;", "try {", "update Release Time For Bare Commit ( commit Time ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "37471", "code": ["public static int show Yes No Cancel Question ( final Component parent , final String msg ) {", "return J Option Pane . show Confirm Dialog ( is Iconified ( parent ) ? null : parent , msg , System . get Property ( DEFAULT WINDOW TITLE PROPERTY ) , J Option Pane . YES NO CANCEL OPTION , J Option Pane . QUESTION MESSAGE ) ; }"]}
{"ids": "79985", "code": ["public static String quantityplnoun Creature ( final int quantity , final String noun ) {", "if ( noun . equals ( STR_ ) ) {", "final String end = plnoun Creature ( quantity , noun ) ;", "return Integer . to String ( quantity ) + STR_ + end ; }", "return quantityplnoun ( quantity , noun ) ; }"]}
{"ids": "6805", "code": ["static int copy Bytes ( Output Stream os , Input Stream is , byte [ ] io Buffer , int max Size ) throws IO Exception {", "int total Size = NUM_ ;", "while ( total Size < max Size ) {", "int rc = is . read ( io Buffer , NUM_ , Math . min ( max Size - total Size , io Buffer . length ) ) ;", "if ( rc == - NUM_ ) {", "break ; }", "os . write ( io Buffer , NUM_ , rc ) ;", "total Size += rc ; }", "return total Size ; }"]}
{"ids": "39870", "code": ["void compose Message ( final Mail mail , final String text Content , final String html Content , final Map < String , byte [ ] > attachments , final List < String > mail Template Chain , final String shop Code , final String locale , final String template Name ) throws Messaging Exception , Class Not Found Exception , IO Exception {", "if ( text Content == null || html Content == null ) {", "if ( text Content != null ) {", "mail . set Text Version ( text Content ) ; }", "if ( html Content != null ) {", "mail . set Html Version ( html Content ) ;", "inline Resources ( mail , html Content , mail Template Chain , shop Code , locale , template Name ) ;", "add Attachments ( mail , attachments ) ; } }", "else {", "mail . set Text Version ( text Content ) ;", "mail . set Html Version ( html Content ) ;", "inline Resources ( mail , html Content , mail Template Chain , shop Code , locale , template Name ) ;", "add Attachments ( mail , attachments ) ; } }"]}
{"ids": "26839", "code": ["private void handle Launch Message Event ( Message Event message Event ) {", "Data Map data Map = Data Map . from Byte Array ( message Event . get Data ( ) ) ;", "boolean relaunch If Running = data Map . get Boolean ( KEY START ACTIVITY RELAUNCH , false ) ;", "Data Map bundle Data = data Map . get Data Map ( KEY START ACTIVITY BUNDLE ) ;", "String activity Name = data Map . get String ( KEY START ACTIVITY NAME ) ;", "Bundle bundle = null ;", "if ( bundle Data != null ) {", "bundle = bundle Data . to Bundle ( ) ; }", "if ( activity Name == null ) {", "for ( Wear Consumer consumer : m Wear Consumers ) {", "consumer . on Wearable Application Launch Request Received ( bundle , relaunch If Running ) ; } }", "else {", "try {", "if ( ! Text Utils . is Empty ( activity Name ) ) {", "Class < ? > target Activity = Class . for Name ( activity Name ) ;", "Intent intent = new Intent ( m Context , target Activity ) ;", "intent . set Flags ( Intent . FLAG ACTIVITY NEW TASK ) ;", "if ( bundle != null ) {", "intent . put Extras ( bundle ) ; }", "if ( ! m App Foreground || relaunch If Running ) {", "m Context . start Activity ( intent ) ; } }", "else {", "Log . e ( TAG , STR_ ) ; } }", "catch ( Class Not Found Exception e ) {", "Log . e ( TAG , STR_ , e ) ; } } }"]}
{"ids": "51312", "code": ["@ Override public void close ( ) throws IO Exception {", "closed = true ;", "def . end ( ) ;", "in . close ( ) ; }"]}
{"ids": "14504", "code": ["public static String escape Colon In String ( String str ) {", "if ( str != null ) {", "if ( str . index Of ( STR_ ) >= NUM_ ) {", "str = str . replace All ( STR_ , STR_ ) ; } }", "return str ; }"]}
{"ids": "67768", "code": ["private static SAX Parser Factory create SAX Parser Factory ( ) {", "try {", "SAX Parser Factory factory = SAX Parser Factory . new Instance ( ) ;", "try {", "SAX Parser Factory secure Factory = Secure Generic XML Factory . get SAX Parser Factory ( factory ) ;", "secure Factory . new SAX Parser ( ) ;", "factory = secure Factory ; }", "catch ( Parser Configuration Exception e ) { }", "factory . set Namespace Aware ( true ) ;", "return factory ; }", "catch ( SAX Exception e ) {", "throw new Illegal State Exception ( STR_ , e ) ; } }"]}
{"ids": "22630", "code": ["private static void attempt Retry On Exception ( String log Prefix , Request < ? > request , Volley Error exception ) throws Volley Error {", "Retry Policy retry Policy = request . get Retry Policy ( ) ;", "int old Timeout = request . get Timeout Ms ( ) ;", "try {", "retry Policy . retry ( exception ) ; }", "catch ( Volley Error e ) {", "request . add Marker ( String . format ( STR_ , log Prefix , old Timeout ) ) ;", "throw e ; }", "request . add Marker ( String . format ( STR_ , log Prefix , old Timeout ) ) ; }"]}
{"ids": "69662", "code": ["public static void save As XML ( NS Object root , File out ) throws IO Exception {", "File parent = out . get Parent File ( ) ;", "if ( ! parent . exists ( ) && ! parent . mkdirs ( ) ) {", "throw new IO Exception ( STR_ ) ; }", "File Output Stream fous = new File Output Stream ( out ) ;", "save As XML ( root , fous ) ;", "fous . close ( ) ; }"]}
{"ids": "77292", "code": ["public static boolean contains Chroot ( String zk Host ) {", "return zk Host . contains ( STR_ ) ; }"]}
{"ids": "17663", "code": ["public final void lazy Set ( int new Value ) {", "unsafe . put Ordered Int ( this , value Offset , new Value ) ; }"]}
{"ids": "41419", "code": ["public Feature ( String line , Map cp Str 2 Int , Map lb Str 2 Int , Map fmap ) {", "String Tokenizer str Tok = new String Tokenizer ( line , STR_ ) ;", "int len = str Tok . count Tokens ( ) ;", "String str Id Str = str Tok . next Token ( ) ;", "int idx = Integer . parse Int ( str Tok . next Token ( ) ) ;", "float val = NUM_ ;", "double wgt = Double . parse Double ( str Tok . next Token ( ) ) ;", "String Tokenizer str Id Tok = new String Tokenizer ( str Id Str , STR_ ) ;", "String prefix = str Id Tok . next Token ( ) ;", "if ( prefix . compare To Ignore Case ( STR_ ) == NUM_ ) {", "Integer y Int = ( Integer ) lb Str 2 Int . get ( str Id Tok . next Token ( ) ) ;", "Integer yp Int = ( Integer ) lb Str 2 Int . get ( str Id Tok . next Token ( ) ) ;", "if ( y Int != null && yp Int != null ) {", "e Feature 1 Init ( y Int . int Value ( ) , yp Int . int Value ( ) ) ; } }", "else if ( prefix . compare To Ignore Case ( STR_ ) == NUM_ ) {", "Integer y Int = ( Integer ) lb Str 2 Int . get ( str Id Tok . next Token ( ) ) ;", "Integer cp Int = ( Integer ) cp Str 2 Int . get ( str Id Tok . next Token ( ) ) ;", "if ( y Int != null && cp Int != null ) {", "s Feature 1 Init ( y Int . int Value ( ) , cp Int . int Value ( ) ) ; } }", "this . idx = idx ;", "this . val = val ;", "this . wgt = wgt ;", "str Id 2 Idx Add ( fmap ) ; }"]}
{"ids": "78039", "code": ["public static int patch Fast ( Input Stream old Input Stream , Input Stream diff Input Stream , File new File ) throws IO Exception {", "if ( old Input Stream == null ) {", "return RETURN OLD FILE ERR ; }", "if ( new File == null ) {", "return RETURN NEW FILE ERR ; }", "if ( diff Input Stream == null ) {", "return RETURN DIFF FILE ERR ; }", "byte [ ] old Bytes = BS Util . input Stream To Byte ( old Input Stream ) ;", "byte [ ] diff Bytes = BS Util . input Stream To Byte ( diff Input Stream ) ;", "byte [ ] new Bytes = patch Fast ( old Bytes , old Bytes . length , diff Bytes , diff Bytes . length , NUM_ ) ;", "Output Stream new Output Stream = new File Output Stream ( new File ) ;", "try {", "new Output Stream . write ( new Bytes ) ; }", "finally {", "new Output Stream . close ( ) ; }", "return RETURN SUCCESS ; }"]}
{"ids": "60679", "code": ["public static byte [ ] read Fully No Close ( Input Stream in ) throws IO Exception {", "Byte Array Output Stream bytes = new Byte Array Output Stream ( ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "int count ;", "while ( ( count = in . read ( buffer ) ) != - NUM_ ) {", "bytes . write ( buffer , NUM_ , count ) ; }", "return bytes . to Byte Array ( ) ; }"]}
{"ids": "85345", "code": ["public Content Storage ( Content Storage BO content Storage BO , List < Generic Package > generic Package List , List < Essence Container Data > essence Container Data List ) {", "this . content Storage BO = content Storage BO ;", "this . generic Package List = Collections . unmodifiable List ( generic Package List ) ;", "this . essence Container Data List = Collections . unmodifiable List ( essence Container Data List ) ; }"]}
{"ids": "62702", "code": ["public static String decode ( byte [ ] utf 8 ) throws Character Coding Exception {", "return decode ( Byte Buffer . wrap ( utf 8 ) , true ) ; }"]}
{"ids": "22483", "code": ["public Scale IO Volume query Volume ( String vol Id ) throws Exception {", "Client Response response = get ( URI . create ( Scale IO Constants . get Volume URI ( vol Id ) ) ) ;", "return get Response Object ( Scale IO Volume . class , response ) ; }"]}
{"ids": "23123", "code": ["public void remove Event Listener ( SIP Dialog Event Listener old Listener ) {", "event Listeners . remove ( old Listener ) ; }"]}
{"ids": "8201", "code": ["protected static Object primitive Array Put ( Object self , int idx , Object new Value ) {", "Array . set ( self , normalise Index ( idx , Array . get Length ( self ) ) , new Value ) ;", "return new Value ; }"]}
{"ids": "86112", "code": ["public void to Axis Angle ( Vector 4 f output ) {", "if ( get W ( ) > NUM_ ) {", "normalise ( ) ; }", "float angle = NUM_ * ( float ) Math . to Degrees ( Math . acos ( get W ( ) ) ) ;", "float x ;", "float y ;", "float z ;", "float s = ( float ) Math . sqrt ( NUM_ - get W ( ) * get W ( ) ) ;", "if ( s < NUM_ ) {", "x = points [ NUM_ ] ;", "y = points [ NUM_ ] ;", "z = points [ NUM_ ] ; }", "else {", "x = points [ NUM_ ] / s ;", "y = points [ NUM_ ] / s ;", "z = points [ NUM_ ] / s ; }", "output . points [ NUM_ ] = x ;", "output . points [ NUM_ ] = y ;", "output . points [ NUM_ ] = z ;", "output . points [ NUM_ ] = angle ; }"]}
{"ids": "6088", "code": ["@ Override public synchronized void initialize ( ) {", "if ( ! m Root Directory . exists ( ) ) {", "if ( ! m Root Directory . mkdirs ( ) ) {", "Volley Log . e ( STR_ , m Root Directory . get Absolute Path ( ) ) ; }", "return ; }", "File [ ] files = m Root Directory . list Files ( ) ;", "if ( files == null ) {", "return ; }", "for ( File file : files ) {", "File Input Stream fis = null ;", "try {", "fis = new File Input Stream ( file ) ;", "Cache Header entry = Cache Header . read Header ( fis ) ;", "entry . size = file . length ( ) ;", "put Entry ( entry . key , entry ) ; }", "catch ( IO Exception e ) {", "if ( file != null ) {", "file . delete ( ) ; } }", "finally {", "try {", "if ( fis != null ) {", "fis . close ( ) ; } }", "catch ( IO Exception ignored ) { } } } }"]}
{"ids": "55076", "code": ["private Q Name Map < Binding Expression > process Binding Attributes ( Node node ) {", "Q Name Map < Binding Expression > attribute Bindings = null ;", "for ( Iterator < Q Name > i = node . get Attribute Names ( ) ; i != null && i . has Next ( ) ; ) {", "Q Name qname = i . next ( ) ;", "String value = ( String ) node . get Attribute Value ( qname ) ;", "Binding Expression be = text Parser . parse Binding Expression ( value , node . begin Line ) ;", "if ( be != null ) {", "if ( attribute Bindings == null ) {", "attribute Bindings = new Q Name Map < Binding Expression > ( ) ; }", "attribute Bindings . put ( qname , be ) ;", "i . remove ( ) ; } }", "return attribute Bindings ; }"]}
{"ids": "12787", "code": ["public void load ( String file Name ) throws IO Exception {", "Buffered Reader bfr = new Buffered Reader ( new Input Stream Reader ( new File Input Stream ( file Name ) , STR_ ) ) ;", "if ( b List == null ) b List = new Vector ( DEFAULT INCREMENT , DEFAULT INCREMENT ) ;", "String line = bfr . read Line ( ) ;", "if ( line . index Of ( STR_ ) != - NUM_ ) {", "line = line . substring ( NUM_ ) ;", "String [ ] parts = new String [ NUM_ ] ;", "parts = line . split ( STR_ , NUM_ ) ;", "from Dir = parts [ NUM_ ] ;", "from Ext = parts [ NUM_ ] ; }", "else if ( ! ( line . matches ( STR_ ) ) ) add ( line ) ;", "while ( ( line = bfr . read Line ( ) ) != null ) {", "if ( ! ( line . matches ( STR_ ) ) ) add ( line ) ; } }"]}
{"ids": "42395", "code": ["private void verify Register Defs ( String where ) {", "Def Use . compute DU ( this ) ;", "for ( Register r = regpool . get First Symbolic Register ( ) ; r != null ; r = r . get Next ( ) ) {", "if ( r . is Physical ( ) ) continue ;", "if ( r . use List != null ) {", "if ( r . def List == null ) {", "print Instructions ( ) ;", "verror ( where , STR_ + r + STR_ ) ; } } } }"]}
{"ids": "15606", "code": ["@ Suppress Warnings ( STR_ ) public static Part Listing parse List Parts ( Input Stream response Body ) throws Response Parse Exception {", "try {", "Element root = get Xml Root Element ( response Body ) ;", "Part Listing part Listing = new Part Listing ( ) ;", "part Listing . set Bucket Name ( root . get Child Text ( STR_ ) ) ;", "part Listing . set Key ( root . get Child Text ( STR_ ) ) ;", "part Listing . set Upload Id ( root . get Child Text ( STR_ ) ) ;", "part Listing . set Storage Class ( root . get Child Text ( STR_ ) ) ;", "part Listing . set Max Parts ( Integer . value Of ( root . get Child Text ( STR_ ) ) ) ;", "part Listing . set Truncated ( Boolean . value Of ( root . get Child Text ( STR_ ) ) ) ;", "if ( root . get Child ( STR_ ) != null ) {", "String part Number Marker = root . get Child Text ( STR_ ) ;", "if ( ! is Null Or Empty ( part Number Marker ) ) {", "part Listing . set Part Number Marker ( Integer . value Of ( part Number Marker ) ) ; } }", "if ( root . get Child ( STR_ ) != null ) {", "String next Part Number Marker = root . get Child Text ( STR_ ) ;", "if ( ! is Null Or Empty ( next Part Number Marker ) ) {", "part Listing . set Next Part Number Marker ( Integer . value Of ( next Part Number Marker ) ) ; } }", "List < Element > part Elems = root . get Children ( STR_ ) ;", "for ( Element elem : part Elems ) {", "Part Summary ps = new Part Summary ( ) ;", "ps . set Part Number ( Integer . value Of ( elem . get Child Text ( STR_ ) ) ) ;", "ps . set Last Modified ( Date Util . parse Iso 8601 Date ( elem . get Child Text ( STR_ ) ) ) ;", "ps . set E Tag ( trim Quotes ( elem . get Child Text ( STR_ ) ) ) ;", "ps . set Size ( Integer . value Of ( elem . get Child Text ( STR_ ) ) ) ;", "part Listing . add Part ( ps ) ; }", "return part Listing ; }", "catch ( Exception e ) {", "throw new Response Parse Exception ( e . get Message ( ) , e ) ; } }"]}
{"ids": "51015", "code": ["private static void find Snap ( Collection < Constraint Widget > widgets , Constraint Widget widget , Snap Candidate candidate , boolean check Horizontal ) {", "Array List < Constraint Anchor > anchors Source = widget . get Anchors ( ) ;", "for ( Constraint Widget w : widgets ) {", "if ( w == widget ) {", "continue ; }", "Array List < Constraint Anchor > anchors Target = w . get Anchors ( ) ;", "for ( Constraint Anchor as : anchors Source ) {", "if ( check Horizontal && as . is Vertical Anchor ( ) ) {", "continue ; }", "else if ( ! check Horizontal && ! as . is Vertical Anchor ( ) ) {", "continue ; }", "for ( Constraint Anchor at : anchors Target ) {", "snap Check ( as , at , candidate , CONNECTION SLOPE ) ; } } } }"]}
{"ids": "37582", "code": ["protected String pad String ( String s , int length , boolean left ) {", "String result ;", "int i ;", "result = s ;", "for ( i = s . length ( ) ; i < length ; i ++ ) {", "if ( left ) {", "result = STR_ + result ; }", "else {", "result = result + STR_ ; } }", "if ( ( length > NUM_ ) && ( result . length ( ) > length ) ) {", "result = result . substring ( NUM_ , length ) ; }", "return result ; }"]}
{"ids": "59607", "code": ["public static < C extends Comparable < ? > > List < Range < C > > remove ( Range < C > self , Range < C > other ) {", "if ( other == null || ! self . is Connected ( other ) ) {", "return Collections . singleton List ( self ) ; }", "Range < C > share = self . intersection ( other ) ;", "if ( share . is Empty ( ) ) {", "return Collections . singleton List ( self ) ; }", "List < Range < C > > ret = Lists . new Array List ( ) ;", "if ( ! self . has Lower Bound ( ) ) {", "if ( share . has Lower Bound ( ) ) {", "if ( share . lower Bound Type ( ) == Bound Type . CLOSED ) {", "ret . add ( Range . less Than ( share . lower Endpoint ( ) ) ) ; }", "else {", "ret . add ( Range . at Most ( share . lower Endpoint ( ) ) ) ; } } }", "else {", "if ( self . lower Endpoint ( ) != share . lower Endpoint ( ) ) {", "if ( self . lower Bound Type ( ) == Bound Type . CLOSED ) {", "if ( share . lower Bound Type ( ) == Bound Type . CLOSED ) {", "ret . add ( Range . closed Open ( self . lower Endpoint ( ) , share . lower Endpoint ( ) ) ) ; }", "else {", "ret . add ( Range . closed ( self . lower Endpoint ( ) , share . lower Endpoint ( ) ) ) ; } }", "else {", "if ( share . lower Bound Type ( ) == Bound Type . CLOSED ) {", "ret . add ( Range . open ( self . lower Endpoint ( ) , share . lower Endpoint ( ) ) ) ; }", "else {", "ret . add ( Range . open Closed ( self . lower Endpoint ( ) , share . lower Endpoint ( ) ) ) ; } } }", "else {", "if ( self . lower Bound Type ( ) == Bound Type . CLOSED && share . lower Bound Type ( ) == Bound Type . OPEN ) {", "ret . add ( Range . closed ( self . lower Endpoint ( ) , share . lower Endpoint ( ) ) ) ; } } }", "if ( ! self . has Upper Bound ( ) ) {", "if ( share . has Upper Bound ( ) ) {", "if ( share . upper Bound Type ( ) == Bound Type . CLOSED ) {", "ret . add ( Range . greater Than ( share . upper Endpoint ( ) ) ) ; }", "else {", "ret . add ( Range . at Least ( share . upper Endpoint ( ) ) ) ; } } }", "else {", "if ( self . upper Endpoint ( ) != share . upper Endpoint ( ) ) {", "if ( self . upper Bound Type ( ) == Bound Type . CLOSED ) {", "if ( share . upper Bound Type ( ) == Bound Type . CLOSED ) {", "ret . add ( Range . open Closed ( share . upper Endpoint ( ) , self . upper Endpoint ( ) ) ) ; }", "else {", "ret . add ( Range . closed ( share . upper Endpoint ( ) , self . upper Endpoint ( ) ) ) ; } }", "else {", "if ( share . upper Bound Type ( ) == Bound Type . CLOSED ) {", "ret . add ( Range . open ( share . upper Endpoint ( ) , self . upper Endpoint ( ) ) ) ; }", "else {", "ret . add ( Range . closed Open ( share . upper Endpoint ( ) , self . upper Endpoint ( ) ) ) ; } } }", "else {", "if ( self . upper Bound Type ( ) == Bound Type . CLOSED && share . upper Bound Type ( ) == Bound Type . OPEN ) {", "ret . add ( Range . closed ( self . upper Endpoint ( ) , share . upper Endpoint ( ) ) ) ; } } }", "return ret ; }"]}
{"ids": "18029", "code": ["void recompose Keys ( Key Declaration key Decl ) {", "m key Decls . add Element ( key Decl ) ; }"]}
{"ids": "12117", "code": ["public < T > Json Array < T > create List Dto From Json ( Reader json , Class < T > dto Interface ) throws IO Exception {", "final Dto Provider < T > dto Provider = get Dto Provider ( dto Interface ) ;", "final List < Json Element > list ;", "try {", "list = gson . from Json ( json , list Type Cache . get ( Json Element . class ) ) ; }", "catch ( Json Syntax Exception e ) {", "final Throwable cause = e . get Cause ( ) ;", "if ( cause instanceof IO Exception ) {", "throw ( IO Exception ) cause ; }", "throw e ; }", "final List < T > result = new Array List < > ( list . size ( ) ) ;", "for ( Json Element e : list ) {", "result . add ( dto Provider . from Json ( e ) ) ; }", "return new Json Array Impl < > ( result ) ; }"]}
{"ids": "20962", "code": ["private View fill From Top ( int next Top ) {", "m First Position = Math . min ( m First Position , - NUM_ ) ;", "m First Position = Math . min ( m First Position , m Item Count - NUM_ ) ;", "if ( m First Position < NUM_ ) {", "m First Position = NUM_ ; }", "return fill Down ( m First Position , next Top ) ; }"]}
{"ids": "40146", "code": ["public void connection Open ( ) {", "lock . lock ( ) ;", "try {", "log . info ( STR_ ) ;", "connection Open = true ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "43477", "code": ["public static float rotate Y ( float p X , float p Y , float c X , float c Y , float angle In Degrees ) {", "double angle = Math . to Radians ( angle In Degrees ) ;", "return ( float ) ( Math . sin ( angle ) * ( p X - c X ) + Math . cos ( angle ) * ( p Y - c Y ) + c Y ) ; }"]}
{"ids": "33174", "code": ["public void list ( Print Stream out ) {", "properties . list ( out ) ; }"]}
{"ids": "11525", "code": ["protected Layer Pane find Selected Pane ( ) {", "for ( Layer Pane pane : get Panes ( ) ) {", "if ( pane . is Selected ( ) ) {", "return pane ; } }", "return null ; }"]}
{"ids": "19590", "code": ["private final void scale Noise Array ( final int sea Level ) {", "for ( int x = NUM_ ; x < X SECTIONS ; x ++ ) {", "for ( int z = NUM_ ; z < Z SECTIONS ; z ++ ) {", "for ( int y = NUM_ ; y < Y SECTIONS ; y ++ ) {", "this . raw Density [ x ] [ y ] [ z ] *= MAX ELEV ;", "this . raw Density [ x ] [ y ] [ z ] += sea Level ; } } } }"]}
{"ids": "51241", "code": ["public Object [ ] to Array ( ) {", "Array List < E > al = new Array List < E > ( ) ;", "for ( Node < E > p = first ( ) ; p != null ; p = succ ( p ) ) {", "E item = p . item ;", "if ( item != null ) al . add ( item ) ; }", "return al . to Array ( ) ; }"]}
{"ids": "85884", "code": ["public Microservices Runner ( int ... ports ) {", "configure Transport ( ports ) ; }"]}
{"ids": "79878", "code": ["public static boolean delete Contents ( File directory ) {", "File [ ] files = directory . list Files ( ) ;", "boolean success = true ;", "if ( files != null ) {", "for ( File file : files ) {", "success &= delete Recursively ( file ) ; } }", "return success ; }"]}
{"ids": "51666", "code": ["private void handle Response ( Avs Response response ) {", "m Event Manager . post ( new Command Event ( Command Event . TYPE COMMAND SEARCHING , KEYWORD ALEXA ) ) ;", "if ( response != null ) {", "for ( int i = response . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "if ( response . get ( i ) instanceof Avs Replace All Item || response . get ( i ) instanceof Avs Replace Enqueued Item ) {", "m Avs Queue . clear ( ) ;", "response . remove ( i ) ; } }", "Timber . i ( STR_ , response . size ( ) ) ;", "m Avs Queue . add All ( response ) ; }", "check Queue ( ) ; }"]}
{"ids": "57931", "code": ["void mergesort ( Vector a , Vector b , int l , int r , X Path Context support ) throws Transformer Exception {", "if ( ( r - l ) > NUM_ ) {", "int m = ( r + l ) / NUM_ ;", "mergesort ( a , b , l , m , support ) ;", "mergesort ( a , b , m + NUM_ , r , support ) ;", "int i , j , k ;", "for ( i = m ; i >= l ; i -- ) {", "if ( i >= b . size ( ) ) b . insert Element At ( a . element At ( i ) , i ) ;", "else b . set Element At ( a . element At ( i ) , i ) ; }", "i = l ;", "for ( j = ( m + NUM_ ) ; j <= r ; j ++ ) {", "if ( r + m + NUM_ - j >= b . size ( ) ) b . insert Element At ( a . element At ( j ) , r + m + NUM_ - j ) ;", "else b . set Element At ( a . element At ( j ) , r + m + NUM_ - j ) ; }", "j = r ;", "int comp Val ;", "for ( k = l ; k <= r ; k ++ ) {", "if ( i == j ) comp Val = - NUM_ ;", "else comp Val = compare ( ( Node Compare Elem ) b . element At ( i ) , ( Node Compare Elem ) b . element At ( j ) , NUM_ , support ) ;", "if ( comp Val < NUM_ ) {", "a . set Element At ( b . element At ( i ) , k ) ;", "i ++ ; }", "else if ( comp Val > NUM_ ) {", "a . set Element At ( b . element At ( j ) , k ) ;", "j -- ; } } } }"]}
{"ids": "8155", "code": ["public static List < String > to List ( Char Sequence self ) {", "String s = self . to String ( ) ;", "int size = s . length ( ) ;", "List < String > answer = new Array List < String > ( size ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "answer . add ( s . substring ( i , i + NUM_ ) ) ; }", "return answer ; }"]}
{"ids": "61027", "code": ["void append Array Generic Type ( String Builder sb , Type [ ] types ) {", "if ( types . length > NUM_ ) {", "append Generic Type ( sb , types [ NUM_ ] ) ;", "for ( int i = NUM_ ; i < types . length ; i ++ ) {", "sb . append ( STR_ ) ;", "append Generic Type ( sb , types [ i ] ) ; } } }"]}
{"ids": "25450", "code": ["public static int decode residual ( H 264 Context h , Get Bit Context gb , short [ ] block base , int block offset , int n , int [ ] scantable base , int scantable offset , long [ ] qmul base , int qmul offset , int max coeff ) {", "final int [ ] coeff token table index = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ;", "int [ ] level = new int [ NUM_ ] ;", "int zeros left , coeff token , total coeff , i , trailing ones , run before ;", "if ( n >= H 264 Context . CHROMA DC BLOCK INDEX ) {", "coeff token = gb . get vlc 2 ( chroma dc coeff token vlc . table base , chroma dc coeff token vlc . table offset , H 264 Context . CHROMA DC COEFF TOKEN VLC BITS , NUM_ , STR_ ) ;", "total coeff = coeff token > > NUM_ ; }", "else {", "if ( n == H 264 Context . LUMA DC BLOCK INDEX ) {", "total coeff = pred non zero count ( h , NUM_ ) ;", "coeff token = gb . get vlc 2 ( coeff token vlc [ coeff token table index [ total coeff ] ] . table base , coeff token vlc [ coeff token table index [ total coeff ] ] . table offset , H 264 Context . COEFF TOKEN VLC BITS , NUM_ , STR_ ) ;", "total coeff = coeff token > > NUM_ ; }", "else {", "total coeff = pred non zero count ( h , n ) ;", "coeff token = gb . get vlc 2 ( coeff token vlc [ coeff token table index [ total coeff ] ] . table base , coeff token vlc [ coeff token table index [ total coeff ] ] . table offset , H 264 Context . COEFF TOKEN VLC BITS , NUM_ , STR_ ) ;", "total coeff = coeff token > > NUM_ ; } }", "h . non zero count cache [ H 264 Context . scan 8 [ n ] ] = total coeff ;", "if ( total coeff == NUM_ ) return NUM_ ;", "if ( total coeff > max coeff ) {", "return - NUM_ ; }", "trailing ones = coeff token & NUM_ ;", "i = ( int ) gb . show bits ( NUM_ ) ;", "gb . skip bits ( trailing ones ) ;", "level [ NUM_ ] = NUM_ - ( ( i & NUM_ ) > > NUM_ ) ;", "level [ NUM_ ] = NUM_ - ( ( i & NUM_ ) ) ;", "level [ NUM_ ] = NUM_ - ( ( i & NUM_ ) << NUM_ ) ;", "if ( trailing ones < total coeff ) {", "int mask , prefix ;", "int suffix length = ( ( total coeff > NUM_ ) ? NUM_ : NUM_ ) & ( ( trailing ones < NUM_ ) ? NUM_ : NUM_ ) ;", "int bitsi = ( int ) gb . show bits ( LEVEL TAB BITS ) ;", "int level code = cavlc level tab [ suffix length ] [ bitsi ] [ NUM_ ] ;", "gb . skip bits ( cavlc level tab [ suffix length ] [ bitsi ] [ NUM_ ] ) ;", "if ( level code >= NUM_ ) {", "prefix = level code - NUM_ ;", "if ( prefix == LEVEL TAB BITS ) prefix += get level prefix ( gb ) ;", "if ( prefix < NUM_ ) {", "if ( suffix length != NUM_ ) level code = ( int ) ( ( prefix << NUM_ ) + gb . get bits 1 ( STR_ ) ) ;", "else level code = prefix ; }", "else if ( prefix == NUM_ ) {", "if ( suffix length != NUM_ ) level code = ( int ) ( ( prefix << NUM_ ) + gb . get bits 1 ( STR_ ) ) ;", "else level code = ( int ) ( prefix + gb . get bits ( NUM_ , STR_ ) ) ; }", "else {", "level code = NUM_ + ( int ) ( gb . get bits ( prefix - NUM_ , STR_ ) ) ;", "if ( prefix >= NUM_ ) {", "if ( prefix > NUM_ + NUM_ ) {", "return - NUM_ ; }", "level code += ( NUM_ << ( prefix - NUM_ ) ) - NUM_ ; } }", "if ( trailing ones < NUM_ ) level code += NUM_ ;", "suffix length = NUM_ ;", "mask = - ( level code & NUM_ ) ;", "level [ trailing ones ] = ( ( ( NUM_ + level code ) > > NUM_ ) ^ mask ) - mask ; }", "else {", "level code += ( ( level code > > NUM_ ) | NUM_ ) & - ( ( trailing ones < NUM_ ) ? NUM_ : NUM_ ) ;", "suffix length = NUM_ + ( ( ( NUM_ & ( level code + NUM_ ) ) > NUM_ ) ? NUM_ : NUM_ ) ;", "level [ trailing ones ] = level code ; }", "for ( i = trailing ones + NUM_ ; i < total coeff ; i ++ ) {", "final int [ ] suffix limit = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , Integer . MAX VALUE } ;", "bitsi = ( int ) gb . show bits ( LEVEL TAB BITS ) ;", "level code = cavlc level tab [ suffix length ] [ bitsi ] [ NUM_ ] ;", "gb . skip bits ( cavlc level tab [ suffix length ] [ bitsi ] [ NUM_ ] ) ;", "if ( level code >= NUM_ ) {", "prefix = level code - NUM_ ;", "if ( prefix == LEVEL TAB BITS ) {", "prefix += get level prefix ( gb ) ; }", "if ( prefix < NUM_ ) {", "level code = ( int ) ( ( prefix << suffix length ) + gb . get bits ( suffix length , STR_ ) ) ; }", "else {", "level code = ( int ) ( ( NUM_ << suffix length ) + gb . get bits ( prefix - NUM_ , STR_ ) ) ;", "if ( prefix >= NUM_ ) level code += ( NUM_ << ( prefix - NUM_ ) ) - NUM_ ; }", "mask = - ( level code & NUM_ ) ;", "level code = ( ( ( NUM_ + level code ) > > NUM_ ) ^ mask ) - mask ; }", "level [ i ] = level code ;", "suffix length += ( ( ( NUM_ & ( suffix limit [ suffix length ] + level code ) ) > ( NUM_ * suffix limit [ suffix length ] ) ) ? NUM_ : NUM_ ) ; } }", "if ( total coeff == max coeff ) zeros left = NUM_ ;", "else {", "if ( n >= H 264 Context . CHROMA DC BLOCK INDEX ) {", "zeros left = gb . get vlc 2 ( chroma dc total zeros vlc [ total coeff - NUM_ ] . table base , chroma dc total zeros vlc [ total coeff - NUM_ ] . table offset , H 264 Context . CHROMA DC TOTAL ZEROS VLC BITS , NUM_ , STR_ ) ; }", "else {", "zeros left = gb . get vlc 2 ( total zeros vlc [ total coeff - NUM_ ] . table base , total zeros vlc [ total coeff - NUM_ ] . table offset , H 264 Context . TOTAL ZEROS VLC BITS , NUM_ , STR_ ) ; } }", "scantable offset += zeros left + total coeff - NUM_ ;", "if ( scantable offset < NUM_ ) {", "int [ ] new scantable base = new int [ scantable base . length + ( - scantable offset ) ] ;", "System . arraycopy ( scantable base , NUM_ , new scantable base , - scantable offset , scantable base . length ) ;", "scantable base = new scantable base ;", "scantable offset = NUM_ ; }", "if ( n >= H 264 Context . LUMA DC BLOCK INDEX ) {", "block base [ block offset + scantable base [ scantable offset ] ] = ( short ) level [ NUM_ ] ;", "for ( i = NUM_ ; i < total coeff && zeros left > NUM_ ; i ++ ) {", "if ( zeros left < NUM_ ) {", "run before = gb . get vlc 2 ( run vlc [ zeros left - NUM_ ] . table base , run vlc [ zeros left - NUM_ ] . table offset , H 264 Context . RUN VLC BITS , NUM_ , STR_ ) ; }", "else {", "run before = gb . get vlc 2 ( run 7 vlc . table base , run 7 vlc . table offset , H 264 Context . RUN 7 VLC BITS , NUM_ , STR_ ) ; }", "zeros left -= run before ;", "scantable offset -= NUM_ + run before ;", "block base [ block offset + scantable base [ scantable offset ] ] = ( short ) level [ i ] ; }", "for ( ; i < total coeff ; i ++ ) {", "scantable offset -- ;", "block base [ block offset + scantable base [ scantable offset ] ] = ( short ) level [ i ] ; } }", "else {", "block base [ block offset + scantable base [ scantable offset ] ] = ( short ) ( ( level [ NUM_ ] * qmul base [ qmul offset + scantable base [ scantable offset ] ] + NUM_ ) > > NUM_ ) ;", "for ( i = NUM_ ; i < total coeff && zeros left > NUM_ ; i ++ ) {", "if ( zeros left < NUM_ ) {", "run before = gb . get vlc 2 ( run vlc [ zeros left - NUM_ ] . table base , run vlc [ zeros left - NUM_ ] . table offset , H 264 Context . RUN VLC BITS , NUM_ , STR_ ) ; }", "else {", "run before = gb . get vlc 2 ( run 7 vlc . table base , run 7 vlc . table offset , H 264 Context . RUN 7 VLC BITS , NUM_ , STR_ ) ; }", "zeros left -= run before ;", "scantable offset -= ( NUM_ + run before ) ;", "block base [ block offset + scantable base [ scantable offset ] ] = ( short ) ( ( level [ i ] * qmul base [ qmul offset + scantable base [ scantable offset ] ] + NUM_ ) > > NUM_ ) ; }", "for ( ; i < total coeff ; i ++ ) {", "scantable offset -- ;", "block base [ block offset + scantable base [ scantable offset ] ] = ( short ) ( ( level [ i ] * qmul base [ qmul offset + scantable base [ scantable offset ] ] + NUM_ ) > > NUM_ ) ; } }", "if ( zeros left < NUM_ ) {", "return - NUM_ ; }", "return NUM_ ; }"]}
{"ids": "22203", "code": ["public void check Reinit File ( final boolean need Reinit ) throws IO Exception {", "File boot Mode File = new File ( root Dir , Constants . STARTUPMODE ) ;", "if ( ! need Reinit ) {", "log . info ( STR_ ) ;", "if ( boot Mode File . exists ( ) ) {", "boot Mode File . delete ( ) ; }", "return ; }", "if ( ! boot Mode File . exists ( ) ) {", "set Db Startup Mode As Restore Reinit ( root Dir ) ; }", "chown ( boot Mode File , Backup Constants . STORAGEOS USER , Backup Constants . STORAGEOS GROUP ) ;", "log . info ( STR_ , boot Mode File . get Absolute Path ( ) ) ; }"]}
{"ids": "38397", "code": ["public void read DOT ( Reader input ) {", "Dot Parser dp = new Dot Parser ( input , m nodes , m edges ) ;", "graph ID = dp . parse ( ) ;", "set Appropriate Node Size ( ) ;", "if ( m le != null ) {", "m le . set Node Size ( padded Node Width , node Height ) ;", "j Bt Layout . set Enabled ( false ) ;", "layout Graph ( ) ; } }"]}
{"ids": "22823", "code": ["private void notify All Entity ( ) {", "Log . print Concat Line ( super . get Name ( ) , STR_ ) ;", "signal Shutdown ( res List ) ;", "signal Shutdown ( gis List ) ;", "res List . clear ( ) ;", "gis List . clear ( ) ; }"]}
{"ids": "44456", "code": ["protected Response calc Default SMTP Response ( Hook Result result ) {", "if ( result != null ) {", "int r Code = result . get Result ( ) ;", "String smtp Ret Code = result . get Smtp Ret Code ( ) ;", "String smtp Desc = result . get Smtp Description ( ) ;", "if ( ( r Code & Hook Return Code . DENY ) == Hook Return Code . DENY ) {", "if ( smtp Ret Code == null ) smtp Ret Code = SMTP Ret Code . AUTH FAILED ;", "if ( smtp Desc == null ) smtp Desc = STR_ ;", "SMTP Response response = new SMTP Response ( smtp Ret Code , smtp Desc ) ;", "if ( ( r Code & Hook Return Code . DISCONNECT ) == Hook Return Code . DISCONNECT ) {", "response . set End Session ( true ) ; }", "return response ; }", "else if ( ( r Code & Hook Return Code . DENYSOFT ) == Hook Return Code . DENYSOFT ) {", "if ( smtp Ret Code == null ) smtp Ret Code = SMTP Ret Code . LOCAL ERROR ;", "if ( smtp Desc == null ) smtp Desc = STR_ ;", "SMTP Response response = new SMTP Response ( smtp Ret Code , smtp Desc ) ;", "if ( ( r Code & Hook Return Code . DISCONNECT ) == Hook Return Code . DISCONNECT ) {", "response . set End Session ( true ) ; }", "return response ; }", "else if ( ( r Code & Hook Return Code . OK ) == Hook Return Code . OK ) {", "if ( smtp Ret Code == null ) smtp Ret Code = SMTP Ret Code . AUTH OK ;", "if ( smtp Desc == null ) smtp Desc = STR_ ;", "SMTP Response response = new SMTP Response ( smtp Ret Code , smtp Desc ) ;", "if ( ( r Code & Hook Return Code . DISCONNECT ) == Hook Return Code . DISCONNECT ) {", "response . set End Session ( true ) ; }", "return response ; }", "else if ( ( r Code & Hook Return Code . DISCONNECT ) == Hook Return Code . DISCONNECT ) {", "SMTP Response response = new SMTP Response ( STR_ ) ;", "response . set End Session ( true ) ;", "return response ; }", "else {", "return null ; } }", "else {", "return null ; } }"]}
{"ids": "79783", "code": ["public synchronized boolean has Alerts ( ) {", "if ( alerts == null ) {", "return false ; }", "return ! alerts . is Empty ( ) ; }"]}
{"ids": "35007", "code": ["protected Collection < ? extends Annotation Mirror > replace Poly All ( Collection < ? extends Annotation Mirror > annos ) {", "Set < Annotation Mirror > return Annos = Annotation Utils . create Annotation Set ( ) ;", "for ( Annotation Mirror top : get Top Annotations ( ) ) {", "Annotation Mirror annotation In Hierarchy = find Annotation In Hierarchy ( annos , top ) ;", "if ( annotation In Hierarchy != null ) {", "return Annos . add ( annotation In Hierarchy ) ; } }", "return return Annos ; }"]}
{"ids": "76707", "code": ["public synchronized void reset Inputs ( ) throws IO Exception {", "source . print Statistics ( STR_ ) ;", "set Config ( config , source ) ;", "source . reset Inputs ( ) ;", "num Docs Created . set ( NUM_ ) ;", "reset Leftovers ( ) ; }"]}
{"ids": "73534", "code": ["public void remove Matching Coupling ( Coupling < ? > to Remove ) {", "for ( Coupling < ? > coupling : get Couplings ( ) ) {", "boolean consumers Match = attributes Match ( coupling . get Consumer ( ) , to Remove . get Consumer ( ) ) ;", "boolean producers Match = attributes Match ( coupling . get Producer ( ) , to Remove . get Producer ( ) ) ;", "if ( consumers Match && producers Match ) {", "remove Coupling ( coupling ) ; } } }"]}
{"ids": "29681", "code": ["public String to Short String ( ) {", "String Builder sb = new String Builder ( ) ;", "if ( x Road Instance != null ) {", "sb . append ( x Road Instance ) ; }", "for ( String part : get Fields For String Format ( ) ) {", "if ( part != null ) {", "if ( sb . length ( ) > NUM_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( part ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "35614", "code": ["private boolean check Pattern ( ) {", "if ( pattern == null ) {", "return false ; }", "char left Separator = get Left Separator ( ) ;", "char right Separator = get Right Separator ( ) ;", "Stack < Character > separator Stack = new Stack < Character > ( ) ;", "for ( int i = NUM_ ; i < pattern . length ( ) ; i ++ ) {", "char cur = pattern . char At ( i ) ;", "if ( cur == left Separator ) {", "separator Stack . push ( cur ) ; }", "else if ( cur == right Separator ) {", "if ( ! separator Stack . is Empty ( ) && ( separator Stack . pop ( ) == left Separator ) ) {", "continue ; }", "else {", "return false ; } } }", "return separator Stack . is Empty ( ) ; }"]}
{"ids": "65001", "code": ["public static SQ Lite Database open Or Create Database ( File file , Cursor Factory factory ) {", "return open Or Create Database ( file . get Path ( ) , factory ) ; }"]}
{"ids": "67387", "code": ["public Wildcard ( String pattern , int regexp Options ) {", "this . regexp Options = regexp Options ;", "regexp = Pattern . compile ( wildcard To Regex ( pattern ) , regexp Options ) ;", "shortcut = extract Shortcut ( pattern ) ; }"]}
{"ids": "60782", "code": ["private boolean link Last ( Node < E > node ) {", "if ( count >= capacity ) return false ;", "Node < E > l = last ;", "node . prev = l ;", "last = node ;", "if ( first == null ) first = node ;", "else l . next = node ;", "++ count ;", "not Empty . signal ( ) ;", "return true ; }"]}
{"ids": "23087", "code": ["private String local number ( ) throws Parse Exception {", "String Buffer s = new String Buffer ( ) ;", "if ( debug ) dbg enter ( STR_ ) ;", "try {", "int lc = NUM_ ;", "while ( lexer . has More Chars ( ) ) {", "char la = lexer . look Ahead ( NUM_ ) ;", "if ( la == STR_ || la == STR_ || la == STR_ || la == STR_ || la == STR_ || la == STR_ || Lexer . is Hex Digit ( la ) ) {", "lexer . consume ( NUM_ ) ;", "s . append ( la ) ;", "lc ++ ; }", "else if ( lc > NUM_ ) break ;", "else throw create Parse Exception ( STR_ + la ) ; }", "return s . to String ( ) ; }", "finally {", "if ( debug ) dbg leave ( STR_ ) ; } }"]}
{"ids": "62393", "code": ["private static void append Default Value ( String Builder sb , Field Type field Type , Object default Value ) {", "if ( field Type . is Escaped Default Value ( ) ) {", "append Escaped Word ( sb , default Value . to String ( ) ) ; }", "else {", "sb . append ( default Value ) ; } }"]}
{"ids": "62433", "code": ["public Metadata Block Data Picture ( Byte Buffer rawdata ) throws IO Exception , Invalid Frame Exception {", "init From Byte Buffer ( rawdata ) ; }"]}
{"ids": "37119", "code": ["public void previous ( ) {", "if ( current ( ) == null ) {", "return ; }", "m current Search Index -- ;", "m is Before First = false ;", "m is After Last = false ;", "if ( m current Search Index < NUM_ ) {", "m current Search Index = m reduced Results . size ( ) - NUM_ ;", "m is Before First = true ; } }"]}
{"ids": "83035", "code": ["@ Nullable public static Method find Method ( Class c , String name , Object ... params ) {", "Class [ ] param Types = get Param Types ( params ) ;", "Method method = null ;", "try {", "method = c . get Declared Method ( name , param Types ) ; }", "catch ( No Such Method Exception e ) {", "try {", "method = c . get Method ( name , param Types ) ; }", "catch ( No Such Method Exception e 1 ) { } }", "if ( method != null ) method . set Accessible ( true ) ;", "return method ; }"]}
{"ids": "52269", "code": ["public boolean close All Sessions ( ) {", "while ( exists Session ( ) ) {", "Session Editor session Editor = get Frontmost Session Editor ( ) ;", "Session Editor Workbench workbench = session Editor . get Session Workbench ( ) ;", "Session Wrapper wrapper = workbench . get Session Wrapper ( ) ;", "if ( ! wrapper . is Session Changed ( ) ) {", "close Frontmost Session ( ) ;", "continue ; }", "String name = session Editor . get Name ( ) ;", "int ret = J Option Pane . show Confirm Dialog ( J Option Utils . centering Comp ( ) , STR_ + name + STR_ , STR_ , J Option Pane . YES NO CANCEL OPTION ) ;", "if ( ret == J Option Pane . NO OPTION ) {", "close Frontmost Session ( ) ;", "continue ; }", "else if ( ret == J Option Pane . CANCEL OPTION ) {", "return false ; }", "Save Session As Action action = new Save Session As Action ( ) ;", "action . action Performed ( new Action Event ( this , Action Event . ACTION PERFORMED , STR_ ) ) ;", "if ( ! action . is Saved ( ) ) {", "int ret 2 = J Option Pane . show Confirm Dialog ( J Option Utils . centering Comp ( ) , STR_ , STR_ , J Option Pane . OK CANCEL OPTION ) ;", "if ( ret 2 == J Option Pane . CANCEL OPTION ) {", "return false ; } }", "close Frontmost Session ( ) ; }", "return true ; }"]}
{"ids": "2388", "code": ["private void remove Non Visible Views ( final int offset ) {", "int child Count = get Child Count ( ) ;", "if ( m Last Item Position != m Adapter . get Count ( ) - NUM_ && child Count > NUM_ ) {", "View first Child = get Child At ( NUM_ ) ;", "while ( first Child != null && get Child Bottom ( first Child ) + offset < NUM_ ) {", "remove View In Layout ( first Child ) ;", "child Count -- ;", "m Cached Item Views . add Last ( first Child ) ;", "m First Item Position ++ ;", "m List Top Offset += get Child Height ( first Child ) ;", "if ( child Count > NUM_ ) {", "first Child = get Child At ( NUM_ ) ; }", "else {", "first Child = null ; } } }", "if ( m First Item Position != NUM_ && child Count > NUM_ ) {", "View last Child = get Child At ( child Count - NUM_ ) ;", "while ( last Child != null && get Child Top ( last Child ) + offset > get Height ( ) ) {", "remove View In Layout ( last Child ) ;", "child Count -- ;", "m Cached Item Views . add Last ( last Child ) ;", "m Last Item Position -- ;", "if ( child Count > NUM_ ) {", "last Child = get Child At ( child Count - NUM_ ) ; }", "else {", "last Child = null ; } } } }"]}
{"ids": "16357", "code": ["public Repeated Field Builder < M Type , B Type , I Type > add Message ( int index , M Type message ) {", "if ( message == null ) {", "throw new Null Pointer Exception ( ) ; }", "ensure Mutable Message List ( ) ;", "messages . add ( index , message ) ;", "if ( builders != null ) {", "builders . add ( index , null ) ; }", "on Changed ( ) ;", "increment Mod Counts ( ) ;", "return this ; }"]}
{"ids": "63467", "code": ["void unlock ( Table t ) {", "locks . remove ( t ) ; }"]}
{"ids": "73028", "code": ["public void on Exceeded Database Quota ( String url , String database Identifier , long current Quota , long estimated Size , long total Used Quota , Web Storage . Quota Updater quota Updater ) {", "if ( LOGV ENABLED ) {", "Log . v ( LOGTAG , STR_ + url + STR_ + database Identifier + STR_ + current Quota + STR_ + total Used Quota + STR_ ) ; }", "long total Unused Quota = m Global Limit - total Used Quota - m App Cache Max Size ;", "if ( total Unused Quota <= NUM_ ) {", "if ( total Used Quota > NUM_ ) {", "schedule Out Of Space Notification ( ) ; }", "quota Updater . update Quota ( current Quota ) ;", "if ( LOGV ENABLED ) {", "Log . v ( LOGTAG , STR_ ) ; }", "return ; }", "long new Origin Quota = current Quota ;", "if ( new Origin Quota == NUM_ ) {", "if ( total Unused Quota >= estimated Size ) {", "new Origin Quota = estimated Size ; }", "else {", "if ( LOGV ENABLED ) {", "Log . v ( LOGTAG , STR_ + STR_ + STR_ + estimated Size + STR_ + total Unused Quota ) ; }", "new Origin Quota = NUM_ ; } }", "else {", "long quota Increase = estimated Size == NUM_ ? Math . min ( QUOTA INCREASE STEP , total Unused Quota ) : estimated Size ;", "new Origin Quota += quota Increase ;", "if ( quota Increase > total Unused Quota ) {", "new Origin Quota = current Quota ; } }", "quota Updater . update Quota ( new Origin Quota ) ;", "if ( LOGV ENABLED ) {", "Log . v ( LOGTAG , STR_ + new Origin Quota ) ; } }"]}
{"ids": "14738", "code": ["protected String to Val String ( Set vals ) {", "String Builder sb = new String Builder ( ) ;", "boolean first = true ;", "for ( Iterator i = vals . iterator ( ) ; i . has Next ( ) ; ) {", "String val = ( String ) i . next ( ) ;", "val = encode Val ( val ) ;", "if ( first ) {", "first = false ; }", "else {", "sb . append ( STR_ ) ; }", "sb . append ( val ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "12751", "code": ["private String print O Format ( short x ) {", "String sx = null ;", "if ( x == Short . MIN VALUE ) sx = STR_ ;", "else if ( x < NUM_ ) {", "String t = Integer . to String ( ( ~ ( - x - NUM_ ) ) ^ Short . MIN VALUE , NUM_ ) ;", "switch ( t . length ( ) ) {", "case NUM_ :", "sx = STR_ + t ;", "break ;", "case NUM_ :", "sx = STR_ + t ;", "break ;", "case NUM_ :", "sx = STR_ + t ;", "break ;", "case NUM_ :", "sx = STR_ + t ;", "break ;", "case NUM_ :", "sx = STR_ + t ;", "break ; } }", "else sx = Integer . to String ( x , NUM_ ) ;", "return print O Format ( sx ) ; }"]}
{"ids": "4481", "code": ["public static JSON Array read JSON Array ( final JSON Array json Array , final int index , final boolean required , final boolean not Null ) throws JSON Exception {", "if ( required ) {", "return json Array . get JSON Array ( index ) ; }", "if ( not Null && json Array . is Null ( index ) ) {", "throw new JSON Exception ( String . format ( Locale . US , NULL VALUE FORMAT ARRAY , index ) ) ; }", "JSON Array value = null ;", "if ( ! json Array . is Null ( index ) ) {", "value = json Array . get JSON Array ( index ) ; }", "return value ; }"]}
{"ids": "45742", "code": ["private static Bitmap resize Photo ( Bitmap real Image , float max Image Size , boolean filter ) {", "float ratio = Math . min ( ( float ) max Image Size / real Image . get Width ( ) , ( float ) max Image Size / real Image . get Height ( ) ) ;", "int width = Math . round ( ( float ) ratio * real Image . get Width ( ) ) ;", "int height = Math . round ( ( float ) ratio * real Image . get Height ( ) ) ;", "Bitmap new Bitmap = Bitmap . create Scaled Bitmap ( real Image , width , height , filter ) ;", "return new Bitmap ; }"]}
{"ids": "9916", "code": ["private Element create Key Value ( ) throws Exception {", "Element key Value Ele = null ;", "Private Key key = idm Client . get Tenant Private Key ( tenant Name ) ;", "if ( key != null ) {", "RSA Private Key rsa Key = ( RSA Private Key ) key ;", "Element rsa Key Ele = create RSA Key Value ( rsa Key ) ;", "if ( rsa Key Ele != null ) {", "key Value Ele = doc . create Element ( SAML Names . DS KEYVALUE ) ;", "key Value Ele . append Child ( rsa Key Ele ) ; } }", "return key Value Ele ; }"]}
{"ids": "74075", "code": ["static protected void expand Element ( Element el , List < Element > list ) {", "list . add All ( el . get Children ( STR_ ) ) ;", "List < Element > children = el . get Children ( ) ;", "for ( int i = NUM_ ; i < children . size ( ) ; i ++ ) {", "expand Element ( children . get ( i ) , list ) ; } }"]}
{"ids": "39841", "code": ["public static String dump ( Map < ? , ? > map ) {", "String Builder string Builder = new String Builder ( ) ;", "for ( Map . Entry < ? , ? > entry : map . entry Set ( ) ) {", "string Builder . append ( entry . get Key ( ) ) ;", "string Builder . append ( STR_ ) ;", "string Builder . append ( entry . get Value ( ) ) ; }", "return string Builder . to String ( ) ; }"]}
{"ids": "8987", "code": ["private void merge Collapse ( ) {", "while ( stack Size > NUM_ ) {", "int n = stack Size - NUM_ ;", "if ( n > NUM_ && run Len [ n - NUM_ ] <= run Len [ n ] + run Len [ n + NUM_ ] ) {", "if ( run Len [ n - NUM_ ] < run Len [ n + NUM_ ] ) n -- ;", "merge At ( n ) ; }", "else if ( run Len [ n ] <= run Len [ n + NUM_ ] ) {", "merge At ( n ) ; }", "else {", "break ; } } }"]}
{"ids": "19189", "code": ["private File find File ( File directory , String name ) throws File Not Found Exception {", "File file = new File ( directory , name ) ;", "if ( file . exists ( ) ) {", "return file ; }", "for ( String child : directory . list ( ) ) {", "if ( child . equals Ignore Case ( name ) ) {", "return new File ( directory , child ) ; } }", "throw new File Not Found Exception ( STR_ + file ) ; }"]}
{"ids": "14933", "code": ["protected void remove From Maps ( String client Type ) {", "Client client = ( Client ) client Type Map . get ( client Type ) ;", "external Client Data . remove ( client Type ) ;", "Map map = ( Map ) internal Client Data . get ( client Type ) ;", "if ( map == null ) {", "remove From Client Map ( client Type , client ) ; }", "else {", "handle Parent Change ( client Type , map ) ; }", "unload Client ( client Type ) ; }"]}
{"ids": "1235", "code": ["public String serialize ( Object object ) throws Converter Exception {", "deep = NUM_ ;", "String Builder sb = new String Builder ( ) ;", "serialize ( object , sb , new Hash Set < Object > ( ) ) ;", "return sb . to String ( ) ; }"]}
{"ids": "72057", "code": ["private void display Verbose ( Console Application app , String category Name , String type Name , Tag tag , Set < String > property Names ) {", "Localizable Message c 1 = build Line ( STR_ , MAX LINE WIDTH ) ;", "Localizable Message c 2 = build Line ( STR_ , MAX LINE WIDTH ) ;", "boolean is First Managed Object = true ;", "for ( String category : category Map . key Set ( ) ) {", "if ( category Name != null && ! category Name . equals ( category ) ) {", "continue ; }", "Map < String , Abstract Managed Object Definition < ? , ? > > sub Types = category Map . get ( category ) ;", "for ( String type : sub Types . key Set ( ) ) {", "if ( type Name != null && ! type Name . equals ( type ) ) {", "continue ; }", "Abstract Managed Object Definition < ? , ? > mod = sub Types . get ( type ) ;", "if ( cannot Display ( app , mod , tag ) ) {", "continue ; }", "boolean is First Property = true ;", "Set < Property Definition < ? > > pds = get Property Definitions ( mod ) ;", "for ( Property Definition < ? > pd : pds ) {", "if ( cannot Display ( app , pd , property Names ) ) {", "continue ; }", "if ( is First Property ) {", "if ( ! is First Managed Object ) {", "app . println ( ) ;", "app . println ( c 1 ) ;", "app . println ( ) ; }", "else {", "is First Managed Object = false ; }", "app . println ( INFO DSCFG HELP HEADING COMPONENT . get ( mod . get User Friendly Name ( ) ) ) ;", "app . println ( ) ;", "app . println ( mod . get Synopsis ( ) ) ;", "if ( mod . get Description ( ) != null ) {", "app . println ( ) ;", "app . println ( mod . get Description ( ) ) ; } }", "app . println ( ) ;", "app . println ( c 2 ) ;", "app . println ( ) ;", "display Verbose Single Property ( app , mod , pd . get Name ( ) ) ;", "is First Property = false ; } } } }"]}
{"ids": "29571", "code": ["private static String form Head ( String hair , String face , String neck ) {", "return String . join ( STR_ , hair , face , neck ) ; }"]}
{"ids": "30942", "code": ["public void terminate ( ) {", "listeners . clear ( ) ;", "lookup Disc . terminate ( ) ;", "locator Disc . terminate ( ) ;", "if ( dynamic Locator Disc != null ) dynamic Locator Disc . terminate ( ) ; }"]}
{"ids": "71568", "code": ["public void start ( ) {", "start = System . current Time Millis ( ) ; }"]}
{"ids": "60411", "code": ["@ Nullable public static String extract Protocol ( @ Not Null String url ) {", "int index = url . index Of ( URL Util . SCHEME SEPARATOR ) ;", "if ( index < NUM_ ) return null ;", "return url . substring ( NUM_ , index ) ; }"]}
{"ids": "11691", "code": ["protected void load Buffer ( ) {", "int res Idx = minute Spacing / NUM_ ;", "if ( res Idx < NUM_ ) res Idx = NUM_ ;", "else if ( res Idx > NUM_ ) res Idx = NUM_ ;", "String file Name = path + etopo File Names [ res Idx ] ;", "data Buffer = null ;", "try {", "Binary Buffered File bin File = new Binary Buffered File ( file Name ) ;", "bin File . byte Order ( true ) ;", "buffer Width = etopo Widths [ res Idx ] ;", "buffer Height = etopo Heights [ res Idx ] ;", "int spacer = NUM_ ;", "switch ( minute Spacing ) {", "case ( NUM_ ) :", "spacer = NUM_ + this . spacer ;", "break ;", "case ( NUM_ ) :", "spacer = NUM_ + this . spacer ;", "break ;", "default :", "spacer = NUM_ + this . spacer ; }", "data Buffer = new short [ ( buffer Width + spacer ) * buffer Height ] ;", "for ( int i = NUM_ ; i < buffer Width * buffer Height ; i ++ ) data Buffer [ i ] = bin File . read Short ( ) ;", "bin File . close ( ) ;", "buffer Width += spacer ; }", "catch ( File Not Found Exception e ) {", "Debug . error ( STR_ + file Name + STR_ ) ; }", "catch ( IO Exception e ) {", "Debug . error ( STR_ + e . to String ( ) ) ; }", "catch ( Format Exception e ) {", "Debug . error ( STR_ + e . to String ( ) ) ; } }"]}
{"ids": "23870", "code": ["protected Version Tag fetch Remote Version Tag ( Object key ) {", "Version Tag tag = null ;", "assert this . data Policy != Data Policy . REPLICATE ;", "Transaction Id tx Id = cache . get Cache Transaction Manager ( ) . suspend ( ) ;", "try {", "boolean retry = true ;", "Internal Distributed Member member = get Random Replicate ( ) ;", "while ( retry ) {", "try {", "if ( member == null ) {", "break ; }", "Fetch Version Response response = Remote Fetch Version Message . send ( member , this , key ) ;", "tag = response . wait For Response ( ) ;", "retry = false ; }", "catch ( Remote Operation Exception e ) {", "member = get Random Replicate ( ) ;", "if ( member != null ) {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ , member ) ; } } } } }", "finally {", "if ( tx Id != null ) {", "cache . get Cache Transaction Manager ( ) . resume ( tx Id ) ; } }", "return tag ; }"]}
{"ids": "18052", "code": ["public Node replace Child ( Node new Child , Node old Child ) throws DOM Exception {", "if ( old Child == null || old Child . get Parent Node ( ) != this ) return null ;", "Elem Template Element new Child Elem = ( ( Elem Template Element ) new Child ) ;", "Elem Template Element old Child Elem = ( ( Elem Template Element ) old Child ) ;", "Elem Template Element prev = ( Elem Template Element ) old Child Elem . get Previous Sibling ( ) ;", "if ( null != prev ) prev . m next Sibling = new Child Elem ;", "if ( m first Child == old Child Elem ) m first Child = new Child Elem ;", "new Child Elem . m parent Node = this ;", "old Child Elem . m parent Node = null ;", "new Child Elem . m next Sibling = old Child Elem . m next Sibling ;", "old Child Elem . m next Sibling = null ;", "return new Child Elem ; }"]}
{"ids": "81846", "code": ["public void paint Dirty ( ) {", "int size = NUM_ ;", "synchronized ( display Lock ) {", "size = paint Queue Fill ;", "Animation [ ] array = paint Queue ;", "paint Queue = paint Queue Temp ;", "paint Queue Temp = array ;", "paint Queue Fill = NUM_ ; }", "if ( size > NUM_ ) {", "Graphics wrapper = get Codename One Graphics ( ) ;", "int dwidth = get Display Width ( ) ;", "int dheight = get Display Height ( ) ;", "int top X = dwidth ;", "int top Y = dheight ;", "int bottom X = NUM_ ;", "int bottom Y = NUM_ ;", "for ( int iter = NUM_ ; iter < size ; iter ++ ) {", "Animation ani = paint Queue Temp [ iter ] ;", "if ( ani == null ) {", "continue ; }", "paint Queue Temp [ iter ] = null ;", "wrapper . translate ( - wrapper . get Translate X ( ) , - wrapper . get Translate Y ( ) ) ;", "wrapper . set Clip ( NUM_ , NUM_ , dwidth , dheight ) ;", "if ( ani instanceof Component ) {", "Component cmp = ( Component ) ani ;", "Rectangle dirty = cmp . get Dirty Region ( ) ;", "if ( dirty != null ) {", "Dimension d = dirty . get Size ( ) ;", "wrapper . set Clip ( dirty . get X ( ) , dirty . get Y ( ) , d . get Width ( ) , d . get Height ( ) ) ;", "cmp . set Dirty Region ( null ) ; }", "cmp . paint Component ( wrapper ) ;", "get Paintable Bounds ( cmp , paint Dirty Tmp Rect ) ;", "int cmp Abs X = paint Dirty Tmp Rect . get X ( ) ;", "top X = Math . min ( cmp Abs X , top X ) ;", "bottom X = Math . max ( cmp Abs X + paint Dirty Tmp Rect . get Width ( ) , bottom X ) ;", "int cmp Abs Y = paint Dirty Tmp Rect . get Y ( ) ;", "top Y = Math . min ( cmp Abs Y , top Y ) ;", "bottom Y = Math . max ( cmp Abs Y + paint Dirty Tmp Rect . get Height ( ) , bottom Y ) ; }", "else {", "bottom X = dwidth ;", "bottom Y = dheight ;", "top X = NUM_ ;", "top Y = NUM_ ;", "ani . paint ( wrapper ) ; } }", "paint Overlay ( wrapper ) ;", "flush Graphics ( top X , top Y , bottom X - top X , bottom Y - top Y ) ; } }"]}
{"ids": "927", "code": ["public static F Size calc Text Size ( Paint paint , String demo Text ) {", "Rect r = new Rect ( ) ;", "paint . get Text Bounds ( demo Text , NUM_ , demo Text . length ( ) , r ) ;", "return new F Size ( r . width ( ) , r . height ( ) ) ; }"]}
{"ids": "59703", "code": ["private boolean parse Delimiters ( Delimiter Processor delimiter Processor , char delimiter Char ) {", "Delimiter Data res = scan Delimiters ( delimiter Processor , delimiter Char ) ;", "if ( res == null ) {", "return false ; }", "int num Delims = res . count ;", "int start Index = index ;", "index += num Delims ;", "Text node = append Text ( input , start Index , index ) ;", "last Delimiter = new Delimiter ( node , delimiter Char , res . can Open , res . can Close , last Delimiter ) ;", "last Delimiter . num Delims = num Delims ;", "if ( last Delimiter . previous != null ) {", "last Delimiter . previous . next = last Delimiter ; }", "return true ; }"]}
{"ids": "80164", "code": ["private void clear Money ( ) {", "money . clear ( ) ;", "update Money ( ) ; }"]}
{"ids": "86223", "code": ["private void multi Touch Controller ( ) {", "if ( DEBUG ) Log . i ( STR_ , STR_ + m Mode + STR_ + m Curr Pt . get Num Touch Points ( ) + STR_ + m Curr Pt . is Down ( ) + m Curr Pt . is Multi Touch ( ) ) ;", "switch ( m Mode ) {", "case MODE NOTHING :", "if ( DEBUG ) Log . i ( STR_ , STR_ ) ;", "if ( m Curr Pt . is Down ( ) ) {", "selected Object = object Canvas . get Draggable Object At Point ( m Curr Pt ) ;", "if ( selected Object != null ) {", "m Mode = MODE DRAG ;", "object Canvas . select Object ( selected Object , m Curr Pt ) ;", "anchor At This Position And Scale ( ) ;", "m Settle Start Time = m Settle End Time = m Curr Pt . get Event Time ( ) ; } }", "break ;", "case MODE DRAG :", "if ( DEBUG ) Log . i ( STR_ , STR_ ) ;", "if ( ! m Curr Pt . is Down ( ) ) {", "m Mode = MODE NOTHING ;", "object Canvas . select Object ( ( selected Object = null ) , m Curr Pt ) ; }", "else if ( m Curr Pt . is Multi Touch ( ) ) {", "m Mode = MODE PINCH ;", "anchor At This Position And Scale ( ) ;", "m Settle Start Time = m Curr Pt . get Event Time ( ) ;", "m Settle End Time = m Settle Start Time + EVENT SETTLE TIME INTERVAL ; }", "else {", "if ( m Curr Pt . get Event Time ( ) < m Settle End Time ) {", "anchor At This Position And Scale ( ) ; }", "else {", "perform Drag Or Pinch ( ) ; } }", "break ;", "case MODE PINCH :", "if ( DEBUG ) Log . i ( STR_ , STR_ ) ;", "if ( ! m Curr Pt . is Multi Touch ( ) || ! m Curr Pt . is Down ( ) ) {", "if ( ! m Curr Pt . is Down ( ) ) {", "m Mode = MODE NOTHING ;", "object Canvas . select Object ( ( selected Object = null ) , m Curr Pt ) ; }", "else {", "m Mode = MODE DRAG ;", "anchor At This Position And Scale ( ) ;", "m Settle Start Time = m Curr Pt . get Event Time ( ) ;", "m Settle End Time = m Settle Start Time + EVENT SETTLE TIME INTERVAL ; } }", "else {", "if ( Math . abs ( m Curr Pt . get X ( ) - m Prev Pt . get X ( ) ) > MAX MULTITOUCH POS JUMP SIZE || Math . abs ( m Curr Pt . get Y ( ) - m Prev Pt . get Y ( ) ) > MAX MULTITOUCH POS JUMP SIZE || Math . abs ( m Curr Pt . get Multi Touch Width ( ) - m Prev Pt . get Multi Touch Width ( ) ) * NUM_ > MAX MULTITOUCH DIM JUMP SIZE || Math . abs ( m Curr Pt . get Multi Touch Height ( ) - m Prev Pt . get Multi Touch Height ( ) ) * NUM_ > MAX MULTITOUCH DIM JUMP SIZE ) {", "anchor At This Position And Scale ( ) ;", "m Settle Start Time = m Curr Pt . get Event Time ( ) ;", "m Settle End Time = m Settle Start Time + EVENT SETTLE TIME INTERVAL ; }", "else if ( m Curr Pt . event Time < m Settle End Time ) {", "anchor At This Position And Scale ( ) ; }", "else {", "perform Drag Or Pinch ( ) ; } }", "break ; }", "if ( DEBUG ) Log . i ( STR_ , STR_ + m Mode + STR_ + m Curr Pt . get Num Touch Points ( ) + STR_ + m Curr Pt . is Down ( ) + m Curr Pt . is Multi Touch ( ) ) ; }"]}
{"ids": "27116", "code": ["public void exec ( String [ ] args ) throws Throwable {", "URL Class Loader url Class Loader = new URL Class Loader ( class Path . to Array ( new URL [ class Path . size ( ) ] ) ) ;", "Class < ? > cls = url Class Loader . load Class ( main Class ) ;", "Method method = cls . get Declared Method ( STR_ , String [ ] . class ) ;", "method . set Accessible ( true ) ;", "try {", "method . invoke ( null , new Object [ ] { args } ) ; }", "catch ( Invocation Target Exception e ) {", "throw e . get Target Exception ( ) ; } }"]}
{"ids": "30439", "code": ["void rollback Local Transaction ( ) throws Rollback Failed Exception {", "if ( tx == null ) {", "return ; }", "try {", "if ( logger . is Loggable ( Level . FINEST ) ) {", "logger . log ( Level . FINEST , STR_ + tx ) ; }", "tx . abort ( ) ; }", "catch ( Exception e ) {", "if ( logger . is Loggable ( Level . SEVERE ) ) {", "logger . log ( Level . SEVERE , STR_ + tx , e ) ; }", "throw new Rollback Failed Exception ( e ) ; } }"]}
{"ids": "47653", "code": ["public void write ( char c [ ] , int off , int len ) {", "if ( ( off < NUM_ ) || ( off > c . length ) || ( len < NUM_ ) || ( ( off + len ) > c . length ) || ( ( off + len ) < NUM_ ) ) {", "throw new Index Out Of Bounds Exception ( ) ; }", "else if ( len == NUM_ ) {", "return ; }", "synchronized ( lock ) {", "int newcount = count + len ;", "if ( newcount > buf . length ) {", "buf = Arrays . copy Of ( buf , Math . max ( buf . length << NUM_ , newcount ) ) ; }", "System . arraycopy ( c , off , buf , count , len ) ;", "count = newcount ; } }"]}
{"ids": "5377", "code": ["private void write Jar Post Resource ( String Builder sb , String path ) {", "sb . append ( STR_ + JAR RESOURCE SET + STR_ ) ;", "sb . append ( path . replace ( STR_ , STR_ ) ) ; }"]}
{"ids": "49743", "code": ["public static String normalize ( String value ) {", "if ( value == null ) return value ;", "value = value . trim ( ) ;", "if ( value . index Of ( STR_ ) == - NUM_ ) return value ;", "boolean space = false ;", "int len = value . length ( ) ;", "String Buffer b = new String Buffer ( len ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "char v = value . char At ( i ) ;", "if ( v == STR_ ) {", "if ( ! space ) b . append ( v ) ;", "space = true ; }", "else {", "b . append ( v ) ;", "space = false ; } }", "return b . to String ( ) ; }"]}
{"ids": "74937", "code": ["protected static void append Decorations ( int base Pos , String source Code , Create Simple Lexer lang Handler , List < Object > out ) {", "if ( source Code == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "Job job = new Job ( ) ;", "job . set Source Code ( source Code ) ;", "job . set Base Pos ( base Pos ) ;", "lang Handler . decorate ( job ) ;", "out . add All ( job . get Decorations ( ) ) ; }"]}
{"ids": "79060", "code": ["protected Carbon Dictionary Column Meta Chunk read Last Chunk From Dictionary Metadata File ( Dictionary Column Unique Identifier dictionary Column Unique Identifier ) throws IO Exception {", "Dictionary Service dict Service = Carbon Common Factory . get Dictionary Service ( ) ;", "Carbon Dictionary Metadata Reader column Metadata Reader Impl = dict Service . get Dictionary Metadata Reader ( dictionary Column Unique Identifier . get Carbon Table Identifier ( ) , dictionary Column Unique Identifier . get Column Identifier ( ) , carbon Store Path ) ;", "Carbon Dictionary Column Meta Chunk carbon Dictionary Column Meta Chunk = null ;", "try {", "carbon Dictionary Column Meta Chunk = column Metadata Reader Impl . read Last Entry Of Dictionary Meta Chunk ( ) ; }", "finally {", "column Metadata Reader Impl . close ( ) ; }", "return carbon Dictionary Column Meta Chunk ; }"]}
{"ids": "56052", "code": ["public static External App Id determine External Intent Source ( String package Name , Intent intent ) {", "String app Id = Intent Utils . safe Get String Extra ( intent , Browser . EXTRA APPLICATION ID ) ;", "External App Id external Id = External App Id . OTHER ;", "if ( app Id == null ) {", "String url = get Url From Intent ( intent ) ;", "if ( url != null && url . starts With ( TWITTER LINK PREFIX ) ) {", "external Id = External App Id . TWITTER ; }", "else if ( url != null && url . starts With ( FACEBOOK LINK PREFIX ) ) {", "external Id = External App Id . FACEBOOK ; }", "else if ( url != null && url . starts With ( NEWS LINK PREFIX ) ) {", "external Id = External App Id . NEWS ; } }", "else {", "if ( app Id . equals ( PACKAGE PLUS ) ) {", "external Id = External App Id . PLUS ; }", "else if ( app Id . equals ( PACKAGE GMAIL ) ) {", "external Id = External App Id . GMAIL ; }", "else if ( app Id . equals ( PACKAGE HANGOUTS ) ) {", "external Id = External App Id . HANGOUTS ; }", "else if ( app Id . equals ( PACKAGE MESSENGER ) ) {", "external Id = External App Id . MESSENGER ; }", "else if ( app Id . equals ( PACKAGE LINE ) ) {", "external Id = External App Id . LINE ; }", "else if ( app Id . equals ( PACKAGE WHATSAPP ) ) {", "external Id = External App Id . WHATSAPP ; }", "else if ( app Id . equals ( PACKAGE GSA ) ) {", "external Id = External App Id . GSA ; }", "else if ( app Id . equals ( package Name ) ) {", "external Id = External App Id . CHROME ; } }", "return external Id ; }"]}
{"ids": "25706", "code": ["protected Table HDU ( Header hdr , T td ) {", "super ( hdr , td ) ; }"]}
{"ids": "58017", "code": ["public void push Stylesheet ( Stylesheet s ) {", "if ( m stylesheets . size ( ) == NUM_ ) m stylesheet Root = ( Stylesheet Root ) s ;", "m stylesheets . push ( s ) ; }"]}
{"ids": "59484", "code": ["public boolean is Blank ( final Char Sequence cs ) {", "int str Len ;", "if ( cs == null || ( str Len = cs . length ( ) ) == NUM_ ) {", "return true ; }", "for ( int i = NUM_ ; i < str Len ; i ++ ) {", "if ( ! Character . is Whitespace ( cs . char At ( i ) ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "51590", "code": ["public void stop ( ) throws IO Exception , Interrupted Exception {", "thread . interrupt ( ) ;", "selector . wakeup ( ) ; }"]}
{"ids": "34387", "code": ["private Document parse ( final String data , Document Builder doc Builder ) {", "if ( doc Builder == null || data == null ) {", "return null ; }", "Document document = null ;", "try {", "String Builder buf = new String Builder ( NUM_ ) ;", "if ( ! data . starts With ( STR_ ) ) {", "buf . append ( BEGIN PART ) ; }", "buf . append ( data ) ;", "if ( ! data . ends With ( END PART ) ) {", "buf . append ( END PART ) ; }", "Input Source input Source = new Input Source ( new String Reader ( buf . to String ( ) ) ) ;", "document = doc Builder . parse ( input Source ) ; }", "catch ( Exception e ) {", "LOGGER . warn ( STR_ + e . get Message ( ) ) ; }", "return document ; }"]}
{"ids": "73859", "code": ["private X Net Reply load Chars ( java . io . Buffered Reader istream ) throws java . io . IO Exception {", "String s = STR_ ;", "s = istream . read Line ( ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + s ) ; }", "if ( s == null ) {", "return null ; }", "else {", "return new X Net Reply ( s ) ; } }"]}
{"ids": "4704", "code": ["public synchronized void remove Connection Manager ( final Http Connection Manager connection Manager ) {", "if ( shutdown ) {", "throw new Illegal State Exception ( STR_ ) ; }", "connection Managers . remove ( connection Manager ) ; }"]}
{"ids": "84580", "code": ["private boolean add State ( long state Number ) {", "if ( first State < NUM_ ) {", "first State = state Number ; }", "else if ( step Size < NUM_ ) {", "step Size = ( int ) ( state Number - first State ) ; }", "else {", "int step = ( int ) ( state Number - last State ) ;", "if ( step != step Size ) {", "return false ; } }", "last State = state Number ;", "return true ; }"]}
{"ids": "47309", "code": ["public void reset ( ) {", "adler = NUM_ ; }"]}
{"ids": "50844", "code": ["public static boolean is Library Resource Root ( @ Nullable Virtual File res ) {", "if ( res != null ) {", "Virtual File aar = res . get Parent ( ) ;", "if ( aar != null ) {", "Virtual File exploded = aar . get Parent ( ) ;", "if ( exploded != null ) {", "String name = exploded . get Name ( ) ;", "if ( name . equals ( EXPLODED BUNDLES ) || name . equals ( EXPLODED AAR ) ) {", "return true ; } } } }", "return false ; }"]}
{"ids": "56368", "code": ["public void fail Engine ( String reason , @ Nullable Throwable failure ) {", "if ( fail Engine Lock . try Lock ( ) ) {", "store . inc Ref ( ) ;", "try {", "try {", "close No Lock ( STR_ + reason + STR_ ) ; }", "finally {", "if ( failed Engine != null ) {", "logger . debug ( STR_ , reason , failure ) ;", "return ; }", "logger . warn ( STR_ , failure , reason ) ;", "failed Engine = ( failure != null ) ? failure : new Illegal State Exception ( reason ) ;", "if ( Lucene . is Corruption Exception ( failure ) ) {", "try {", "store . mark Store Corrupted ( new IO Exception ( STR_ + reason + STR_ , Exceptions Helper . unwrap Corruption ( failure ) ) ) ; }", "catch ( IO Exception e ) {", "logger . warn ( STR_ , e ) ; } }", "failed Engine Listener . on Failed Engine ( shard Id , reason , failure ) ; } }", "catch ( Throwable t ) {", "logger . warn ( STR_ , t ) ; }", "finally {", "store . dec Ref ( ) ; } }", "else {", "logger . debug ( STR_ , reason , failure ) ; } }"]}
{"ids": "7316", "code": ["public void clear ( ) {", "values . clear ( ) ; }"]}
{"ids": "56601", "code": ["@ Override default Completable Future < Optional Int > max Int ( final To Int Function < ? super T > fn ) {", "return Completable Future . supply Async ( null , get Exec ( ) ) ; }"]}
{"ids": "21459", "code": ["private void add VNX File Storage System Into Cache ( String storage System URI , Distributed Queue Item Processed Callback call Back ) {", "if ( String Utils . is Not Empty ( storage System URI ) ) {", "VNXFILE CACHE . put ( storage System URI , call Back ) ; } }"]}
{"ids": "46441", "code": ["void reset To Preferred Sizes ( int available Size ) {", "int [ ] test Sizes = get Preferred Sizes ( ) ;", "int total Size = NUM_ ;", "for ( int counter = NUM_ ; counter < NUM_ ; counter ++ ) {", "if ( test Sizes [ counter ] != - NUM_ ) {", "total Size += test Sizes [ counter ] ; } }", "if ( total Size > available Size ) {", "test Sizes = get Minimum Sizes ( ) ;", "total Size = NUM_ ;", "for ( int counter = NUM_ ; counter < NUM_ ; counter ++ ) {", "if ( test Sizes [ counter ] != - NUM_ ) {", "total Size += test Sizes [ counter ] ; } } }", "set Sizes ( test Sizes ) ;", "distribute Space ( available Size - total Size , false ) ; }"]}
{"ids": "74843", "code": ["@ Override public byte [ ] decode ( byte [ ] data ) throws Exception {", "if ( data [ NUM_ ] == NUM_ && data [ NUM_ ] == NUM_ && data [ NUM_ ] == NUM_ ) {", "return data ; }", "int buf Size = NUM_ ;", "Fast Byte Array Output Stream bos = null ;", "boolean failed = true ;", "final int org Size = data . length ;", "if ( data != null ) {", "while ( failed ) {", "final Inflater inf = new Inflater ( ) ;", "inf . set Input ( data ) ;", "final int size = data . length ;", "bos = new Fast Byte Array Output Stream ( size ) ;", "if ( size < buf Size ) {", "buf Size = size ; }", "final byte [ ] buf = new byte [ buf Size ] ;", "int count ;", "try {", "while ( ! inf . finished ( ) ) {", "count = inf . inflate ( buf ) ;", "bos . write ( buf , NUM_ , count ) ;", "if ( inf . get Remaining ( ) == NUM_ ) {", "break ; } }", "failed = false ; }", "catch ( final Exception ee ) {", "Log Writer . write Log ( STR_ + ee ) ;", "failed = true ;", "has Error = true ;", "if ( data . length == org Size && data . length > NUM_ ) {", "failed = false ; }", "else if ( data . length > NUM_ ) {", "final byte [ ] new Data = new byte [ data . length - NUM_ ] ;", "System . arraycopy ( data , NUM_ , new Data , NUM_ , data . length - NUM_ ) ;", "data = new Data ; }", "else {", "failed = false ; } } }", "data = bos . to Byte Array ( ) ;", "return apply Predictor ( predictor , data , colors , bits Per Component , columns ) ; }", "return data ; }"]}
{"ids": "64797", "code": ["public boolean is Processing ( ) {", "return m Running . get ( ) ; }"]}
{"ids": "15790", "code": ["private static Input Stream Reader decompress With 7 Zip ( final String archive Path ) throws Configuration Exception {", "PATH PROGRAM 7 ZIP = ( String ) config . get Config Parameter ( Configuration Keys . PATH PROGRAM 7 ZIP ) ;", "if ( PATH PROGRAM 7 ZIP == null ) {", "throw Error Factory . create Configuration Exception ( Error Keys . CONFIGURATION PARAMETER UNDEFINED ) ; }", "try {", "Runtime runtime = Runtime . get Runtime ( ) ;", "Process p = runtime . exec ( PATH PROGRAM 7 ZIP + STR_ + archive Path + STR_ ) ;", "return new Input Stream Reader ( p . get Input Stream ( ) , WIKIPEDIA ENCODING ) ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "17676", "code": ["private final Object arena Exchange ( Object item , boolean timed , long ns ) {", "Node [ ] a = arena ;", "Node p = participant . get ( ) ;", "for ( int i = p . index ; ; ) {", "int b , m , c ;", "long j ;", "Node q = ( Node ) U . get Object Volatile ( a , j = ( i << ASHIFT ) + ABASE ) ;", "if ( q != null && U . compare And Swap Object ( a , j , q , null ) ) {", "Object v = q . item ;", "q . match = item ;", "Thread w = q . parked ;", "if ( w != null ) U . unpark ( w ) ;", "return v ; }", "else if ( i <= ( m = ( b = bound ) & MMASK ) && q == null ) {", "p . item = item ;", "if ( U . compare And Swap Object ( a , j , null , p ) ) {", "long end = ( timed && m == NUM_ ) ? System . nano Time ( ) + ns : NUM_ ;", "Thread t = Thread . current Thread ( ) ;", "for ( int h = p . hash , spins = SPINS ; ; ) {", "Object v = p . match ;", "if ( v != null ) {", "U . put Ordered Object ( p , MATCH , null ) ;", "p . item = null ;", "p . hash = h ;", "return v ; }", "else if ( spins > NUM_ ) {", "h ^= h << NUM_ ;", "h ^= h > > > NUM_ ;", "h ^= h << NUM_ ;", "if ( h == NUM_ ) h = SPINS | ( int ) t . get Id ( ) ;", "else if ( h < NUM_ && ( -- spins & ( ( SPINS > > > NUM_ ) - NUM_ ) ) == NUM_ ) Thread . yield ( ) ; }", "else if ( U . get Object Volatile ( a , j ) != p ) spins = SPINS ;", "else if ( ! t . is Interrupted ( ) && m == NUM_ && ( ! timed || ( ns = end - System . nano Time ( ) ) > NUM_ ) ) {", "U . put Object ( t , BLOCKER , this ) ;", "p . parked = t ;", "if ( U . get Object Volatile ( a , j ) == p ) U . park ( false , ns ) ;", "p . parked = null ;", "U . put Object ( t , BLOCKER , null ) ; }", "else if ( U . get Object Volatile ( a , j ) == p && U . compare And Swap Object ( a , j , p , null ) ) {", "if ( m != NUM_ ) U . compare And Swap Int ( this , BOUND , b , b + SEQ - NUM_ ) ;", "p . item = null ;", "p . hash = h ;", "i = p . index >>>= NUM_ ;", "if ( Thread . interrupted ( ) ) return null ;", "if ( timed && m == NUM_ && ns <= NUM_ ) return TIMED OUT ;", "break ; } } }", "else p . item = null ; }", "else {", "if ( p . bound != b ) {", "p . bound = b ;", "p . collides = NUM_ ;", "i = ( i != m || m == NUM_ ) ? m : m - NUM_ ; }", "else if ( ( c = p . collides ) < m || m == FULL || ! U . compare And Swap Int ( this , BOUND , b , b + SEQ + NUM_ ) ) {", "p . collides = c + NUM_ ;", "i = ( i == NUM_ ) ? m : i - NUM_ ; }", "else i = m + NUM_ ;", "p . index = i ; } } }"]}
{"ids": "53899", "code": ["public void send ( String data ) throws IO Exception {", "Datagram Packet dp = new Datagram Packet ( data . get Bytes ( ) , data . length ( ) , multicast Group ) ;", "datagram Socket . send ( dp ) ; }"]}
{"ids": "13012", "code": ["private void remove Stale Range References ( ) {", "remove Stale References ( range Reference Queue , ranges ) ; }"]}
{"ids": "21260", "code": ["private boolean is Exported ( URI id , List < URI > exported Volumes ) {", "return exported Volumes . contains ( id ) ; }"]}
{"ids": "10616", "code": ["private String fix Monitor Links ( String fix String , String dump Name ) {", "if ( fix String . index Of ( STR_ ) > NUM_ ) {", "fix String = fix String . replace All ( STR_ , STR_ + dump Name + STR_ ) ; }", "return ( fix String ) ; }"]}
{"ids": "29843", "code": ["public synchronized void cache Reposts ( List < Long > new Repost Ids ) {", "Tree Set < Long > reposts = new Tree Set < > ( ) ;", "reposts . add All ( Longs . as List ( repost Cache . get ( ) ) ) ;", "reposts . add All ( new Repost Ids ) ;", "repost Cache . set ( Longs . to Array ( reposts ) ) ; }"]}
{"ids": "42255", "code": ["protected final Class < ? > define Class ( String class Name , byte [ ] class Rep , int offset , int length ) throws Class Format Error {", "return define Class ( class Name , class Rep , offset , length , null ) ; }"]}
{"ids": "76567", "code": ["public boolean rewrite Exif ( Byte Buffer buf , Collection < Exif Tag > tags ) throws IO Exception {", "Exif Modifier mod = null ;", "try {", "mod = new Exif Modifier ( buf , this ) ;", "for ( Exif Tag t : tags ) {", "mod . modify Tag ( t ) ; }", "return mod . commit ( ) ; }", "catch ( Exif Invalid Format Exception e ) {", "throw new IO Exception ( STR_ + e ) ; } }"]}
{"ids": "52727", "code": ["private void write Newline On Debug ( XML Stream Writer out ) throws XML Stream Exception {", "if ( LOG . is Debugging ( ) ) {", "out . write Characters ( STR_ ) ; } }"]}
{"ids": "20358", "code": ["public Request Handle put ( String url , Response Handler Interface response Handler ) {", "return put ( null , url , null , response Handler ) ; }"]}
{"ids": "39176", "code": ["public Discretize ( Element discretize , Field Meta Info . Optype op Type , Array List < Attribute > field Defs ) throws Exception {", "super ( op Type , field Defs ) ;", "m field Name = discretize . get Attribute ( STR_ ) ;", "m map Missing To = discretize . get Attribute ( STR_ ) ;", "if ( m map Missing To != null && m map Missing To . length ( ) > NUM_ ) {", "m map Missing Defined = true ; }", "m default Value = discretize . get Attribute ( STR_ ) ;", "if ( m default Value != null && m default Value . length ( ) > NUM_ ) {", "m default Value Defined = true ; }", "Node List db L = discretize . get Elements By Tag Name ( STR_ ) ;", "for ( int i = NUM_ ; i < db L . get Length ( ) ; i ++ ) {", "Node db N = db L . item ( i ) ;", "if ( db N . get Node Type ( ) == Node . ELEMENT NODE ) {", "Element db E = ( Element ) db N ;", "Discretize Bin db = new Discretize Bin ( db E , m op Type ) ;", "m bins . add ( db ) ; } }", "if ( field Defs != null ) {", "set Up Field ( ) ; } }"]}
{"ids": "22946", "code": ["private static String quad Tree ( final Map Tile a Tile ) {", "String Builder quad Key = new String Builder ( ) ;", "for ( int i = a Tile . zoom Level ; i > NUM_ ; i -- ) {", "int digit = NUM_ ;", "int mask = NUM_ << ( i - NUM_ ) ;", "if ( ( a Tile . x & mask ) != NUM_ ) digit += NUM_ ;", "if ( ( a Tile . y & mask ) != NUM_ ) digit += NUM_ ;", "quad Key . append ( digit ) ; }", "return quad Key . to String ( ) ; }"]}
{"ids": "79635", "code": ["public static int [ ] concat All Int ( int [ ] ... arrays ) {", "int total Length = NUM_ ;", "final int sub Array Count = arrays . length ;", "for ( int i = NUM_ ; i < sub Array Count ; ++ i ) {", "total Length += arrays [ i ] . length ; }", "int [ ] result = Arrays . copy Of ( arrays [ NUM_ ] , total Length ) ;", "int offset = arrays [ NUM_ ] . length ;", "for ( int i = NUM_ ; i < sub Array Count ; ++ i ) {", "System . arraycopy ( arrays [ i ] , NUM_ , result , offset , arrays [ i ] . length ) ;", "offset += arrays [ i ] . length ; }", "return result ; }"]}
{"ids": "9443", "code": ["public static double log 1 p ( double value ) {", "if ( USE JDK MATH ) {", "return STRICT MATH ? Strict Math . log 1 p ( value ) : Math . log 1 p ( value ) ; }", "if ( false ) {", "if ( value == Double . POSITIVE INFINITY ) {", "return Double . POSITIVE INFINITY ; }", "double value Plus One = NUM_ + value ;", "if ( value Plus One == NUM_ ) {", "return value ; }", "else {", "return Fast Math . log ( value Plus One ) * ( value / ( value Plus One - NUM_ ) ) ; } }", "if ( value > - NUM_ ) {", "if ( value == Double . POSITIVE INFINITY ) {", "return Double . POSITIVE INFINITY ; }", "double value Plus One = NUM_ + value ;", "if ( value Plus One == NUM_ ) {", "return value ; }", "else if ( Math . abs ( value ) < NUM_ ) {", "double z = value / ( value + NUM_ ) ;", "double z 2 = z * z ;", "return z * ( NUM_ + z 2 * ( ( NUM_ / NUM_ ) + z 2 * ( ( NUM_ / NUM_ ) + z 2 * ( ( NUM_ / NUM_ ) + z 2 * ( ( NUM_ / NUM_ ) + z 2 * ( ( NUM_ / NUM_ ) ) ) ) ) ) ) ; }", "int value Plus One Bits Hi = ( int ) ( Double . double To Raw Long Bits ( value Plus One ) > > NUM_ ) & NUM_ ;", "int value Plus One Exp = ( value Plus One Bits Hi > > NUM_ ) - MAX DOUBLE EXPONENT ;", "int x Index = ( ( value Plus One Bits Hi << NUM_ ) > > > ( NUM_ - LOG BITS ) ) ;", "double z = ( value Plus One * two Pow Tab [ - value Plus One Exp - MIN DOUBLE EXPONENT ] ) * log X Inv Tab [ x Index ] - NUM_ ;", "z *= ( NUM_ - z * ( ( NUM_ / NUM_ ) - z * ( NUM_ / NUM_ ) ) ) ;", "return value Plus One Exp * LOG 2 + log X Log Tab [ x Index ] + ( z + ( value - ( value Plus One - NUM_ ) ) / value Plus One ) ; }", "else if ( value == - NUM_ ) {", "return Double . NEGATIVE INFINITY ; }", "else {", "return Double . Na N ; } }"]}
{"ids": "53276", "code": ["public static long [ ] ones ( int bits ) {", "long [ ] v = new long [ ( ( bits - NUM_ ) > > > LONG LOG 2 SIZE ) + NUM_ ] ;", "final int fill Words = bits > > > LONG LOG 2 SIZE ;", "final int fill Bits = bits & LONG LOG 2 MASK ;", "Arrays . fill ( v , NUM_ , fill Words , LONG ALL BITS ) ;", "if ( fill Words < v . length ) {", "v [ v . length - NUM_ ] = ( NUM_ << fill Bits ) - NUM_ ; }", "return v ; }"]}
{"ids": "22138", "code": ["private boolean check Current Key Age ( ) throws Number Format Exception {", "long current Token Key TS = Long . parse Long ( cached Token Keys Bundle . get Current Key Entry ( ) ) ;", "long now = System . current Time Millis ( ) ;", "long diff = now - current Token Key TS ;", "if ( diff >= key Rotation Interval In Msecs ) {", "return false ; }", "return true ; }"]}
{"ids": "58050", "code": ["public final void push Context Node List ( DTM Iterator nl ) {", "m context Node Lists . push ( nl ) ; }"]}
{"ids": "67822", "code": ["public void note ( Element e , String msg ) {", "messager . print Message ( Diagnostic . Kind . NOTE , msg , e ) ; }"]}
{"ids": "25046", "code": ["public static Public Key generate Public Key ( String encoded Public Key ) {", "try {", "byte [ ] decoded Key = Base 64 . decode ( encoded Public Key , Base 64 . DEFAULT ) ;", "Key Factory key Factory = Key Factory . get Instance ( KEY FACTORY ALGORITHM ) ;", "return key Factory . generate Public ( new X 509 Encoded Key Spec ( decoded Key ) ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new Runtime Exception ( e ) ; }", "catch ( Invalid Key Spec Exception e ) {", "Log . e ( TAG , STR_ ) ;", "throw new Illegal Argument Exception ( e ) ; } }"]}
{"ids": "39286", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = new Vector < Option > ( ) ;", "result . add All ( Collections . list ( super . list Options ( ) ) ) ;", "result . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "43559", "code": ["public Trust Source add ( File trusted CA Pem File ) {", "if ( trusted CA Pem File == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "String pem File Contents ;", "try {", "pem File Contents = Files . to String ( trusted CA Pem File , Charset . for Name ( STR_ ) ) ; }", "catch ( IO Exception e ) {", "throw new Unchecked IO Exception ( STR_ + trusted CA Pem File . get Absolute Path ( ) , e ) ; }", "return add ( pem File Contents ) ; }"]}
{"ids": "18066", "code": ["String Vector process STRINGLIST ( Stylesheet Handler handler , String uri , String name , String raw Name , String value ) {", "String Tokenizer tokenizer = new String Tokenizer ( value , STR_ ) ;", "int n Strings = tokenizer . count Tokens ( ) ;", "String Vector strings = new String Vector ( n Strings ) ;", "for ( int i = NUM_ ; i < n Strings ; i ++ ) {", "strings . add Element ( tokenizer . next Token ( ) ) ; }", "return strings ; }"]}
{"ids": "42599", "code": ["private String checkfor Regex ( String a Regex Fragment ) {", "final String Builder result = new String Builder ( ) ;", "final String Character Iterator iterator = new String Character Iterator ( a Regex Fragment ) ;", "char character = iterator . current ( ) ;", "while ( character != Character Iterator . DONE ) {", "if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else if ( character == STR_ ) {", "result . append ( STR_ ) ; }", "else {", "result . append ( character ) ; }", "character = iterator . next ( ) ; }", "return result . to String ( ) ; }"]}
{"ids": "28399", "code": ["protected void draw Value Label ( Drawing Context context , Slice slice , double radius , Row row , int row Index ) {", "Comparable < ? > value = slice . end - slice . start ;", "Format format = get Value Format ( ) ;", "if ( ( format == null ) && ( value instanceof Number ) ) {", "format = Number Format . get Instance ( ) ; }", "String text = ( format != null ) ? format . format ( value ) : value . to String ( ) ;", "Color Mapper colors = get Value Color ( ) ;", "Paint paint = colors . get ( row Index ) ;", "Font font = get Value Font ( ) ;", "double font Size = font . get Size 2 D ( ) ;", "Location location = get Value Location ( ) ;", "double align X = get Value Alignment X ( ) ;", "double align Y = get Value Alignment Y ( ) ;", "double rotation = get Value Rotation ( ) ;", "double distance = get Value Distance ( ) ;", "if ( Math Utils . is Calculatable ( distance ) ) {", "distance *= font Size ; }", "else {", "distance = NUM_ ; }", "double radius Rel Outer = get Outer Radius ( ) ;", "double radius Rel Inner = get Inner Radius ( ) ;", "double radius Outer = radius * radius Rel Outer ;", "double radius Inner = radius * radius Rel Inner ;", "double distance V = distance ;", "double label Pos V ;", "if ( location == Location . NORTH ) {", "label Pos V = radius Outer + distance V ; }", "else if ( location == Location . SOUTH ) {", "label Pos V = Math . max ( radius Inner - distance V , NUM_ ) ; }", "else {", "double slice Height = radius Outer - radius Inner ;", "if ( NUM_ * distance >= slice Height ) {", "align Y = NUM_ ;", "distance V = NUM_ ; }", "label Pos V = radius Inner + distance V + align Y * ( slice Height - NUM_ * distance V ) ; }", "double sum = plot . get Sum ( row . get Source ( ) ) ;", "if ( sum == NUM_ ) {", "return ; }", "double slice Start Rel = slice . start / sum ;", "double slice End Rel = slice . end / sum ;", "double circumference = NUM_ * label Pos V * Math . PI ;", "double distance Rel H = distance / circumference ;", "double slice Width Rel = slice End Rel - slice Start Rel ;", "if ( NUM_ * distance Rel H >= slice Width Rel ) {", "align X = NUM_ ;", "distance Rel H = NUM_ ; }", "double label Pos Rel H = slice Start Rel + distance Rel H + align X * ( slice Width Rel - NUM_ * distance Rel H ) ;", "double start = plot . get Start ( ) ;", "double angle Start = Math . to Radians ( - start ) ;", "double direction = NUM_ ;", "if ( ! plot . is Clockwise ( ) ) {", "direction = - NUM_ ; }", "double angle = angle Start + direction * label Pos Rel H * NUM_ * Math . PI ;", "double dir X = Math . cos ( angle ) ;", "double dir Y = Math . sin ( angle ) ;", "Label label = new Label ( text ) ;", "label . set Alignment X ( NUM_ - NUM_ * dir X - NUM_ ) ;", "label . set Alignment Y ( NUM_ * dir Y + NUM_ ) ;", "label . set Rotation ( rotation ) ;", "label . set Color ( paint ) ;", "label . set Font ( font ) ;", "Dimension 2 D size Label = label . get Preferred Size ( ) ;", "double anchor X = NUM_ ;", "double anchor Y = NUM_ ;", "if ( location == Location . NORTH || location == Location . SOUTH ) {", "anchor X = dir X * size Label . get Width ( ) / NUM_ ;", "anchor Y = dir Y * size Label . get Height ( ) / NUM_ ;", "if ( location == Location . SOUTH ) {", "anchor X = - anchor X ;", "anchor Y = - anchor Y ; } }", "double x = label Pos V * dir X + anchor X - size Label . get Width ( ) / NUM_ ;", "double y = label Pos V * dir Y + anchor Y - size Label . get Height ( ) / NUM_ ;", "double w = size Label . get Width ( ) ;", "double h = size Label . get Height ( ) ;", "label . set Bounds ( x , y , w , h ) ;", "label . draw ( context ) ; }"]}
{"ids": "8232", "code": ["public static void downto ( Float self , Number to , @ Closure Params ( First Param . class ) Closure closure ) {", "float to 1 = to . float Value ( ) ;", "if ( self >= to 1 ) {", "for ( float i = self ; i >= to 1 ; i -- ) {", "closure . call ( i ) ; } }", "else throw new Groovy Runtime Exception ( STR_ + to + STR_ + self + STR_ ) ; }"]}
{"ids": "71880", "code": ["public static Attribute Description object Class ( ) {", "return OBJECT CLASS ; }"]}
{"ids": "74228", "code": ["public void add Key Value Comment ( String key Name , String value ) {", "int key Index ;", "if ( ( key Index = find Key Comment Index ( key Name ) ) < NUM_ ) {", "key Val Comments . add ( STR_ + key Name + STR_ + value + STR_ ) ;", "return ; }", "log . warn ( STR_ + key Name + STR_ ) ;", "key Val Comments . set ( key Index , STR_ + key Name + STR_ + value + STR_ ) ; }"]}
{"ids": "2990", "code": ["private String is Input Checked ( String data Set , String value ) {", "if ( data Set != null && data Set . equals ( value ) ) {", "return STR_ ; }", "return STR_ ; }"]}
{"ids": "58052", "code": ["public final void pop Sub Context List ( ) {", "m axes Iterator Stack . pop ( ) ; }"]}
{"ids": "22515", "code": ["private Driver Task create Driver Task ( String task Type ) {", "String task ID = String . format ( STR_ , HP 3 PAR Constants . DRIVER NAME , task Type , UUID . random UUID ( ) ) ;", "Driver Task task = new HP 3 PAR Driver Task ( task ID ) ;", "return task ; }"]}
{"ids": "6295", "code": ["public static void write ( File file , Char Sequence data , Charset encoding , boolean append ) throws IO Exception {", "String str = data == null ? null : data . to String ( ) ;", "write String To File ( file , str , encoding , append ) ; }"]}
{"ids": "74216", "code": ["public void store ( Element cat , List < String > trees ) {", "Catalog Tree Manager manager = Instance Manager . get Default ( jmri . Catalog Tree Manager . class ) ;", "cat . set Attribute ( STR_ , STR_ ) ;", "Iterator < String > iter = trees . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String sname = iter . next ( ) ;", "if ( sname == null ) {", "log . error ( STR_ ) ;", "continue ; }", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + sname ) ; }", "if ( sname . char At ( NUM_ ) != Catalog Tree . XML ) {", "continue ; }", "Catalog Tree ct = manager . get By System Name ( sname ) ;", "Element elem = new Element ( STR_ ) ;", "elem . set Attribute ( STR_ , sname ) ;", "String uname = ct . get User Name ( ) ;", "if ( uname != null ) {", "elem . set Attribute ( STR_ , uname ) ; }", "store Node ( elem , ct . get Root ( ) ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + sname ) ; }", "cat . add Content ( elem ) ; } }"]}
{"ids": "40694", "code": ["public boolean is Enabled ( ) {", "return enabled ; }"]}
{"ids": "62779", "code": ["public static boolean load Texture ( int gl Id , int file ) {", "Input Stream is = Resource . get Res Input Stream ( file ) ;", "Bitmap bitmap = null ;", "try {", "Bitmap Factory . Options opts = new Bitmap Factory . Options ( ) ;", "opts . in Scaled = false ;", "bitmap = Bitmap Factory . decode Stream ( is , null , opts ) ; }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ + file , e ) ;", "return false ; }", "finally {", "try {", "is . close ( ) ; }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ , e ) ; } }", "return load Texture ( gl Id , bitmap ) ; }"]}
{"ids": "80074", "code": ["public static int roll 1 D 100 ( ) {", "return rand . next Int ( NUM_ ) + NUM_ ; }"]}
{"ids": "61759", "code": ["public Zipfian Generator ( long min , long max , double zipfianconstant , double zetan ) {", "items = max - min + NUM_ ;", "base = min ;", "zipfianconstant = zipfianconstant ;", "theta = zipfianconstant ;", "zeta 2 theta = zeta ( NUM_ , theta ) ;", "alpha = NUM_ / ( NUM_ - theta ) ;", "zetan = zetan ;", "countforzeta = items ;", "eta = ( NUM_ - Math . pow ( NUM_ / items , NUM_ - theta ) ) / ( NUM_ - zeta 2 theta / zetan ) ;", "next Int ( ) ; }"]}
{"ids": "40921", "code": ["public void remove Role ( Role Entity role ) {", "roles . remove ( role ) ; }"]}
{"ids": "17637", "code": ["final boolean transfer After Cancelled Wait ( Node node ) {", "if ( compare And Set Wait Status ( node , Node . CONDITION , NUM_ ) ) {", "enq ( node ) ;", "return true ; }", "while ( ! is On Sync Queue ( node ) ) Thread . yield ( ) ;", "return false ; }"]}
{"ids": "34390", "code": ["private Map process Event ( Match Result result ) {", "Map map = new Hash Map ( ) ;", "for ( int i = NUM_ ; i < result . group Count ( ) + NUM_ ; i ++ ) {", "Object key = matching Keywords . get ( i - NUM_ ) ;", "Object value = result . group ( i ) ;", "map . put ( key , value ) ; }", "return map ; }"]}
{"ids": "732", "code": ["public void add Extension ( String ext ) {", "exts . add ( ext . to Lower Case ( ) ) ; }"]}
{"ids": "42996", "code": ["private void display Simple ( Print Stream output ) {", "output . println ( STR_ ) ;", "for ( int j = NUM_ ; j < P ; j ++ ) {", "double [ ] a 0 = new double [ N ] ;", "double [ ] a 1 = new double [ N ] ;", "double [ ] a 2 = new double [ N ] ;", "for ( int i = NUM_ ; i < N ; i ++ ) {", "a 0 [ i ] = A [ i ] ;", "a 1 [ i ] = C A [ i ] [ j ] ;", "a 2 [ i ] = B [ i ] ; }", "double value = compute First Order ( a 0 , a 1 , a 2 , N ) ;", "output . print ( value < NUM_ ? NUM_ : value ) ;", "if ( j < P - NUM_ ) {", "output . print ( STR_ ) ; } }", "output . println ( ) ;", "output . println ( STR_ ) ;", "for ( int j = NUM_ ; j < P ; j ++ ) {", "double [ ] a 0 = new double [ N ] ;", "double [ ] a 1 = new double [ N ] ;", "double [ ] a 2 = new double [ N ] ;", "for ( int i = NUM_ ; i < N ; i ++ ) {", "a 0 [ i ] = A [ i ] ;", "a 1 [ i ] = C A [ i ] [ j ] ;", "a 2 [ i ] = B [ i ] ; }", "double value = compute Total Order ( a 0 , a 1 , a 2 , N ) ;", "output . print ( value < NUM_ ? NUM_ : value ) ;", "if ( j < P - NUM_ ) {", "output . print ( STR_ ) ; } }", "output . println ( ) ; }"]}
{"ids": "46867", "code": ["public boolean equals ( Object o ) {", "if ( o == this ) return true ;", "if ( ! ( o instanceof M Bean Attribute Info ) ) return false ;", "M Bean Attribute Info p = ( M Bean Attribute Info ) o ;", "return ( Objects . equals ( p . get Name ( ) , get Name ( ) ) && Objects . equals ( p . get Type ( ) , get Type ( ) ) && Objects . equals ( p . get Description ( ) , get Description ( ) ) && Objects . equals ( p . get Descriptor ( ) , get Descriptor ( ) ) && p . is Readable ( ) == is Readable ( ) && p . is Writable ( ) == is Writable ( ) && p . is Is ( ) == is Is ( ) ) ; }"]}
{"ids": "11039", "code": ["protected boolean handle Directory ( File directory , String [ ] content Names ) throws Security Exception {", "boolean continue Wandering = true ;", "for ( String child : content Names ) {", "boolean keep Going = handle Entry ( new File ( directory . get Absolute Path ( ) + File . separator , child ) ) ;", "if ( ! keep Going ) {", "continue Wandering = exhaustive Search ;", "if ( ! continue Wandering ) {", "break ; } } }", "return continue Wandering ; }"]}
{"ids": "31458", "code": ["int size ( ) {", "return Integer . bit Count ( set ) ; }"]}
{"ids": "2828", "code": ["public boolean has Next ( ) {", "return iterator . has Next ( ) ; }"]}
{"ids": "41206", "code": ["public static String format Number ( final long number ) {", "long divided = number ;", "final String Buffer sb = new String Buffer ( ) ;", "while ( divided > NUM_ ) {", "long rest = divided % NUM_ ;", "sb . insert ( NUM_ , STR_ + String . format ( STR_ , rest ) ) ;", "divided = divided / NUM_ ; }", "long rest = divided % NUM_ ;", "sb . insert ( NUM_ , rest ) ;", "return sb . to String ( ) ; }"]}
{"ids": "67541", "code": ["private boolean is Subsumed ( String selector , Iterable < String > others ) {", "for ( String other : others ) {", "if ( subsumes ( other , selector ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "55718", "code": ["private void display Values ( ) {", "log ( STR_ , Project . MSG INFO ) ;", "log ( STR_ + this . spec ) ;", "log ( STR_ + get Spec Absolute Path ( ) ) ;", "log ( STR_ + get Serialized Spec Absolute Path ( ) ) ;", "log ( STR_ + this . specdir ) ;", "log ( STR_ + this . cup 2 srcdir ) ;", "log ( STR_ + this . classpath ) ;", "log ( STR_ + this . algorithm ) ;", "log ( STR_ + this . verbose ) ;", "log ( STR_ + this . parsetable ) ;", "log ( STR_ ) ; }"]}
{"ids": "55567", "code": ["private boolean check Touching Min Target ( int index , Motion Event event ) {", "if ( is Touching Min Target ( index , event ) ) {", "last Touched Min = true ;", "is Touching Min Target . add ( event . get Pointer Id ( index ) ) ;", "if ( ! min Animator . is Running ( ) ) {", "min Animator = get Min Target Animator ( true ) ;", "min Animator . start ( ) ; }", "return true ; }", "return false ; }"]}
{"ids": "6453", "code": ["public boolean is Canceled ( ) {", "if ( pane == null ) return false ;", "Object v = pane . get Value ( ) ;", "return ( ( v != null ) && ( cancel Option . length == NUM_ ) && ( v . equals ( cancel Option [ NUM_ ] ) ) ) ; }"]}
{"ids": "42227", "code": ["public int available Processors ( ) {", "return RVM Thread . available Processors ; }"]}
{"ids": "1309", "code": ["public void update Debug ( Boolean debug , Boolean database , Boolean exception , Boolean tracing , Boolean dump , Boolean timer , Boolean implicit Access , Boolean query Usage ) throws Security Exception {", "check Write Access ( ) ;", "boolean has Access = Config Web Util . has Access ( config , Security Manager . TYPE DEBUGGING ) ;", "if ( ! has Access ) throw new Security Exception ( STR_ ) ;", "Element debugging = get Root Element ( STR_ ) ;", "if ( debug != null ) debugging . set Attribute ( STR_ , Caster . to String ( debug . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ;", "if ( database != null ) debugging . set Attribute ( STR_ , Caster . to String ( database . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ;", "if ( exception != null ) debugging . set Attribute ( STR_ , Caster . to String ( exception . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ;", "if ( tracing != null ) debugging . set Attribute ( STR_ , Caster . to String ( tracing . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ;", "if ( dump != null ) debugging . set Attribute ( STR_ , Caster . to String ( dump . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ;", "if ( timer != null ) debugging . set Attribute ( STR_ , Caster . to String ( timer . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ;", "if ( implicit Access != null ) debugging . set Attribute ( STR_ , Caster . to String ( implicit Access . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ;", "if ( query Usage != null ) debugging . set Attribute ( STR_ , Caster . to String ( query Usage . boolean Value ( ) ) ) ;", "else debugging . remove Attribute ( STR_ ) ; }"]}
{"ids": "866", "code": ["public final static void debug ( String s ) {", "if ( DEBUG ) debug . println ( STR_ + s ) ; }"]}
{"ids": "54660", "code": ["public static final void write Long Array Xml ( long [ ] val , String name , Xml Serializer out ) throws Xml Pull Parser Exception , IO Exception {", "if ( val == null ) {", "out . start Tag ( null , STR_ ) ;", "out . end Tag ( null , STR_ ) ;", "return ; }", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "final int N = val . length ;", "out . attribute ( null , STR_ , Integer . to String ( N ) ) ;", "for ( int i = NUM_ ; i < N ; i ++ ) {", "out . start Tag ( null , STR_ ) ;", "out . attribute ( null , STR_ , Long . to String ( val [ i ] ) ) ;", "out . end Tag ( null , STR_ ) ; }", "out . end Tag ( null , STR_ ) ; }"]}
{"ids": "79500", "code": ["public static < T extends Generic Entity > List < T > filter By Or ( List < T > values , List < ? extends Entity Condition > exprs ) {", "if ( values == null ) return null ;", "if ( Util Validate . is Empty ( exprs ) ) {", "return values ; }", "List < T > result = new Linked List < T > ( ) ;", "for ( T value : values ) {", "boolean include = false ;", "for ( Entity Condition condition : exprs ) {", "include = condition . entity Matches ( value ) ;", "if ( include ) break ; }", "if ( include ) {", "result . add ( value ) ; } }", "return result ; }"]}
{"ids": "68984", "code": ["@ Override public RES next ( REQ req ) {", "write Trace Log ( req , middleware Name ) ;", "if ( predicate . test ( req ) ) {", "RES res = middleware . handle ( req , next ) ;", "write Trace Log ( res , middleware Name ) ;", "return res ; }", "else if ( next != null ) {", "RES res = ( RES ) next . next ( req ) ;", "write Trace Log ( res , middleware Name ) ;", "return res ; }", "else {", "return null ; } }"]}
{"ids": "67876", "code": ["protected void read ( long offset , byte [ ] b ) throws IO Exception {", "rafile . seek ( offset ) ;", "if ( rafile . read ( b ) != b . length ) {", "throw new IO Exception ( STR_ + get Path ( ) ) ; } }"]}
{"ids": "48845", "code": ["public void run ( ) {", "final Fetcher Info info = Fetcher Info . get Fetcher Info ( ) ;", "try {", "fetchloop ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "synchronized ( info . wait List ) {", "Thread me = Thread . current Thread ( ) ;", "for ( int i = NUM_ ; i < info . fetchers . length ; i ++ ) {", "if ( info . fetchers [ i ] == me ) {", "info . fetchers [ i ] = null ;", "info . num Fetchers -- ; } } } } }"]}
{"ids": "54293", "code": ["public Ct Class make Annotation ( String name ) throws Runtime Exception {", "try {", "Ct Class cc = make Interface ( name , get ( STR_ ) ) ;", "cc . set Modifiers ( cc . get Modifiers ( ) | Modifier . ANNOTATION ) ;", "return cc ; }", "catch ( Not Found Exception e ) {", "throw new Runtime Exception ( e . get Message ( ) , e ) ; } }"]}
{"ids": "42956", "code": ["public void add ( Node node ) {", "available Nodes . add ( node ) ; }"]}
{"ids": "48579", "code": ["public void write ( Output Stream out ) throws IO Exception {", "Data Output Stream data Out = new Data Output Stream ( out ) ;", "data Out . write Short ( pool . size ( ) + NUM_ ) ;", "for ( Entry e : pool ) {", "e . write ( data Out ) ; } }"]}
{"ids": "3149", "code": ["protected Foreign Key Constraint build Foreign Key Constraint ( List < String > fk Field Names , List < String > pk Field Names , Table Definition target Table , Database Platform platform ) {", "assert fk Field Names . size ( ) > NUM_ && fk Field Names . size ( ) == pk Field Names . size ( ) ;", "Foreign Key Constraint fk Constraint = new Foreign Key Constraint ( ) ;", "for ( int i = NUM_ ; i < fk Field Names . size ( ) ; i ++ ) {", "fk Constraint . get Source Fields ( ) . add ( fk Field Names . get ( i ) ) ;", "fk Constraint . get Target Fields ( ) . add ( pk Field Names . get ( i ) ) ; }", "fk Constraint . set Target Table ( target Table . get Full Name ( ) ) ;", "String fk Field Name = fk Field Names . get ( NUM_ ) ;", "String name = build Foreign Key Constraint Name ( this . get Name ( ) , fk Field Name , platform . get Max Foreign Key Name Size ( ) , platform ) ;", "fk Constraint . set Name ( name ) ;", "return fk Constraint ; }"]}
{"ids": "51128", "code": ["public static boolean is Rewritable Batch ( String query String , boolean no Backslash Escapes ) {", "Lex State state = Lex State . Normal ;", "char last Char = STR_ ;", "boolean single Quotes = false ;", "boolean ending Semicolon = false ;", "char [ ] query = query String . to Char Array ( ) ;", "int query Length = query . length ;", "for ( int i = NUM_ ; i < query Length ; i ++ ) {", "if ( state == Lex State . Escape ) state = Lex State . String ;", "char car = query [ i ] ;", "switch ( car ) {", "case STR_ :", "if ( state == Lex State . Normal && last Char == STR_ ) state = Lex State . Slash Star Comment ;", "break ;", "case STR_ :", "if ( state == Lex State . Slash Star Comment && last Char == STR_ ) {", "state = Lex State . Normal ; }", "else if ( state == Lex State . Normal && last Char == STR_ ) {", "state = Lex State . EOL Comment ; }", "break ;", "case STR_ :", "if ( state == Lex State . Normal ) state = Lex State . EOL Comment ;", "break ;", "case STR_ :", "if ( state == Lex State . Normal && last Char == STR_ ) {", "state = Lex State . EOL Comment ; }", "break ;", "case STR_ :", "if ( state == Lex State . Normal ) {", "ending Semicolon = true ; }", "break ;", "case STR_ :", "if ( state == Lex State . EOL Comment ) {", "state = Lex State . Normal ; }", "break ;", "case STR_ :", "if ( state == Lex State . Normal ) {", "state = Lex State . String ;", "single Quotes = false ; }", "else if ( state == Lex State . String && ! single Quotes ) {", "state = Lex State . Normal ; }", "break ;", "case STR_ :", "if ( state == Lex State . Normal ) {", "state = Lex State . String ;", "single Quotes = true ; }", "else if ( state == Lex State . String && single Quotes ) {", "state = Lex State . Normal ; }", "break ;", "case STR_ :", "if ( no Backslash Escapes ) {", "break ; }", "if ( state == Lex State . String ) state = Lex State . Escape ;", "break ;", "case STR_ :", "if ( state == Lex State . Backtick ) {", "state = Lex State . Normal ; }", "else if ( state == Lex State . Normal ) {", "state = Lex State . Backtick ; }", "break ;", "default :", "if ( state == Lex State . Normal && ending Semicolon && ( ( byte ) car >= NUM_ ) ) {", "ending Semicolon = false ; }", "break ; }", "last Char = car ; }", "return state != Lex State . EOL Comment && ! ending Semicolon ; }"]}
{"ids": "3589", "code": ["public Server Builder ( Config config ) {", "Objects . require Non Null ( config ) ;", "config = config ; }"]}
{"ids": "71981", "code": ["private static LDAP Filter create Substring Filter ( Substring Filter sf ) throws LDAP Exception , IO Exception {", "List < Object > anyo = sf . get Any ( ) ;", "Array List < Byte String > sub Any Elements = new Array List < > ( anyo . size ( ) ) ;", "for ( Object o : anyo ) {", "sub Any Elements . add ( Byte String Utility . convert Value ( o ) ) ; }", "if ( sf . get Initial ( ) == null && sub Any Elements . is Empty ( ) && sf . get Final ( ) == null ) {", "Localizable Message message = ERR LDAP FILTER DECODE NULL . get ( ) ;", "throw new LDAP Exception ( LDAP Result Code . PROTOCOL ERROR , message ) ; }", "return LDAP Filter . create Substring Filter ( sf . get Name ( ) , sf . get Initial ( ) == null ? null : Byte String Utility . convert Value ( sf . get Initial ( ) ) , sub Any Elements , sf . get Final ( ) == null ? null : Byte String Utility . convert Value ( sf . get Final ( ) ) ) ; }"]}
{"ids": "23408", "code": ["@ Override protected void on Size Changed ( int w , int h , int oldw , int oldh ) {", "if ( ready Sent ) {", "set Scale And Center ( get Scale ( ) , get Center ( ) ) ; } }"]}
{"ids": "25074", "code": ["protected void disown ( Abstract Node child ) throws Illegal State Exception {", "ensure Parentage ( child ) ;", "child . parent = null ; }"]}
{"ids": "55049", "code": ["public String q Name 2 String ( Q Name q Name , boolean write NS ) {", "String prefix = null ;", "String namespace URI = q Name . get Namespace ( ) ;", "String local Part = q Name . get Local Part ( ) ;", "if ( local Part != null && local Part . length ( ) > NUM_ ) {", "int index = local Part . index Of ( STR_ ) ;", "if ( index != - NUM_ ) {", "prefix = local Part . substring ( NUM_ , index ) ;", "if ( prefix . length ( ) > NUM_ && ! prefix . equals ( STR_ ) ) {", "register Prefix For URI ( prefix , namespace URI ) ;", "local Part = local Part . substring ( index + NUM_ ) ; }", "else {", "prefix = null ; } }", "local Part = get Last Local Part ( local Part ) ; }", "if ( namespace URI . length ( ) == NUM_ ) {", "if ( write NS ) {", "String default NS = ns Stack . get Namespace URI ( STR_ ) ;", "if ( default NS != null && default NS . length ( ) > NUM_ ) {", "register Prefix For URI ( STR_ , STR_ ) ; } } }", "else {", "prefix = get Prefix For URI ( namespace URI , q Name . get Preferred Prefix ( ) ) ; }", "if ( ( prefix == null ) || ( prefix . length ( ) == NUM_ ) ) return local Part ;", "return prefix + STR_ + local Part ; }"]}
{"ids": "12265", "code": ["public JSON Exception ( Throwable cause ) {", "super ( cause . get Message ( ) ) ;", "this . cause = cause ; }"]}
{"ids": "68037", "code": ["@ Override public void close ( ) throws XML Stream Exception {", "log . log ( Level . FINE , STR_ ) ;", "stream . close ( ) ; }"]}
{"ids": "74838", "code": ["@ Override public String read Line ( ) throws IO Exception {", "if ( this . pointer >= this . data . length - NUM_ ) {", "return null ; }", "else {", "final String Builder buf = new String Builder ( ) ;", "int c ;", "while ( ( c = read ( ) ) >= NUM_ ) {", "if ( ( c == NUM_ ) || ( c == NUM_ ) ) {", "if ( ( ( peek ( ) == NUM_ ) || ( peek ( ) == NUM_ ) ) && ( peek ( ) != c ) ) {", "read ( ) ; }", "break ; }", "buf . append ( ( char ) c ) ; }", "return buf . to String ( ) ; } }"]}
{"ids": "15048", "code": ["protected static Map attr Set To Map ( Attr Set attr Set , boolean fetch Byte Values ) {", "Map attributes Map = new AM Hash Map ( fetch Byte Values ) ;", "if ( attr Set == null ) {", "return attributes Map ; }", "int attr Set Size = attr Set . size ( ) ;", "if ( ! fetch Byte Values ) {", "for ( int i = NUM_ ; i < attr Set Size ; i ++ ) {", "Attr attr = attr Set . element At ( i ) ;", "String values [ ] = attr . get String Values ( ) ;", "attributes Map . put ( attr . get Name ( ) , string Array To Set ( values ) ) ; } }", "else {", "for ( int i = NUM_ ; i < attr Set Size ; i ++ ) {", "Attr attr = attr Set . element At ( i ) ;", "attributes Map . put ( attr . get Name ( ) , attr . get Byte Values ( ) ) ; } }", "return attributes Map ; }"]}
{"ids": "67796", "code": ["public < E > E parse Response Data ( G Data Request req , Class < E > result Type ) throws IO Exception , Service Exception {", "Input Properties input Properties = new Client Input Properties ( req , result Type ) ;", "return parse Response Data ( req . get Parse Source ( ) , input Properties , result Type ) ; }"]}
{"ids": "23249", "code": ["public void add Rtp Stream Listener ( Rtp Stream Listener rtp Stream Listener ) {", "m Rtp Stream Listener = rtp Stream Listener ; }"]}
{"ids": "2697", "code": ["public synchronized byte [ ] to Byte Array ( ) {", "int remaining = count ;", "if ( remaining == NUM_ ) {", "return EMPTY BYTE ARRAY ; }", "byte [ ] newbuf = new byte [ remaining ] ;", "int pos = NUM_ ;", "for ( byte [ ] buf : buffers ) {", "int c = Math . min ( buf . length , remaining ) ;", "System . arraycopy ( buf , NUM_ , newbuf , pos , c ) ;", "pos += c ;", "remaining -= c ;", "if ( remaining == NUM_ ) {", "break ; } }", "return newbuf ; }"]}
{"ids": "22452", "code": ["public void add Volumes To Consistency Group ( String cg Name , List < String > virtual Volume Names ) throws V Plex Api Exception {", "s logger . info ( STR_ , base URI ) ;", "cg Mgr . add Volumes To Consistency Group ( cg Name , virtual Volume Names ) ; }"]}
{"ids": "65012", "code": ["public static void dump Cursor ( I Cursor cursor , int max Column Width ) {", "String Builder builder = new String Builder ( STR_ ) ;", "dump Cursor ( cursor , max Column Width , builder ) ;", "Logger . d ( Logger . LOG TAG , builder . to String ( ) ) ; }"]}
{"ids": "78139", "code": ["static int compute Valid Levels ( long bit Pattern ) {", "return Long . bit Count ( bit Pattern ) ; }"]}
{"ids": "43518", "code": ["public static void run Under Lock ( Reentrant Lock lock , Runnable runnable ) {", "lock . lock ( ) ;", "try {", "runnable . run ( ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "16095", "code": ["private static boolean date By Month ( Date Time Formatter Builder bld , Collection < Date Time Field Type > fields , boolean extended , boolean strict ISO ) {", "boolean reduced Prec = false ;", "if ( fields . remove ( Date Time Field Type . year ( ) ) ) {", "bld . append ( year Element ( ) ) ;", "if ( fields . remove ( Date Time Field Type . month Of Year ( ) ) ) {", "if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "append Separator ( bld , extended ) ;", "bld . append Month Of Year ( NUM_ ) ;", "append Separator ( bld , extended ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "else {", "bld . append Literal ( STR_ ) ;", "bld . append Month Of Year ( NUM_ ) ;", "reduced Prec = true ; } }", "else {", "if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "check Not Strict ISO ( fields , strict ISO ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "else {", "reduced Prec = true ; } } }", "else if ( fields . remove ( Date Time Field Type . month Of Year ( ) ) ) {", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Month Of Year ( NUM_ ) ;", "if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "append Separator ( bld , extended ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "else {", "reduced Prec = true ; } }", "else if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "return reduced Prec ; }"]}
{"ids": "5413", "code": ["@ Override public int insert ( String elem ) {", "int first Index = ( int ) ( elem . char At ( NUM_ ) - STR_ ) ;", "int last Index = ( int ) ( elem . char At ( elem . length ( ) - NUM_ ) - STR_ ) ;", "storage [ first Index * NUM_ + last Index ] = elem ;", "return NUM_ ; }"]}
{"ids": "70312", "code": ["public void clear Movement Data ( ) {", "path Sprites = new Array List < Step Sprite > ( ) ;", "movement Target = null ;", "check Fo V Hex Image Cache Clear ( ) ;", "repaint ( ) ;", "refresh Move Vectors ( ) ; }"]}
{"ids": "27806", "code": ["public void thread Record Failure ( Throwable t ) {", "thread Failure . compare And Set ( null , t ) ; }"]}
{"ids": "69969", "code": ["protected Boolean replay Completion ( Participant participant ) throws Illegal State Exception {", "if ( ! replay Stack . contains ( participant ) ) {", "replay Stack . push ( participant ) ; }", "return committed ; }"]}
{"ids": "27509", "code": ["public void shutdown Now ( ) {", "shutdown = true ;", "final Future < ? > f = engine Future . get ( ) ;", "if ( f != null ) {", "if ( log . is Info Enabled ( ) ) log . info ( STR_ + this ) ;", "f . cancel ( true ) ; }", "final Executor Service s = engine Service . get ( ) ;", "if ( s != null ) {", "if ( log . is Info Enabled ( ) ) log . info ( STR_ + this ) ;", "s . shutdown Now ( ) ; }", "final Http Client cm = client Connection Manager Ref . get ( ) ;", "if ( cm != null ) {", "if ( log . is Info Enabled ( ) ) log . info ( STR_ + this ) ;", "try {", "cm . stop ( ) ; }", "catch ( Exception e ) {", "log . error ( STR_ , e ) ; } }", "for ( Abstract Running Query q : running Queries . values ( ) ) {", "q . cancel ( true ) ; }", "priority Queue . clear ( ) ;", "deadline Queue . clear ( ) ;", "engine Future . set ( null ) ;", "engine Service . set ( null ) ;", "client Connection Manager Ref . set ( null ) ; }"]}
{"ids": "19923", "code": ["static public void add Notification Listener ( JMX Connector jmx Connector , Class < ? > mbean Class , Notification Listener notification Listener ) throws Instance Not Found Exception , Exception {", "M Bean Server Connection mbsc = jmx Connector . get M Bean Server Connection ( ) ;", "Object Name object Name = generate M Bean Object Name ( mbean Class ) ;", "mbsc . add Notification Listener ( object Name , notification Listener , null , null ) ; }"]}
{"ids": "39114", "code": ["protected String to HTML ( String s ) {", "String result ;", "result = s ;", "result = result . replace All ( STR_ , STR_ ) ;", "result = result . replace All ( STR_ , STR_ ) ;", "result = result . replace All ( STR_ , STR_ ) ;", "result = result . replace All ( STR_ , STR_ ) ;", "result = result . replace All ( STR_ , STR_ ) ;", "return result ; }"]}
{"ids": "65089", "code": ["protected void normalize Scores ( ) {", "double hub ssum = NUM_ ;", "double auth ssum = NUM_ ;", "for ( V v : graph . get Vertices ( ) ) {", "double hub val = get Output Value ( v ) . hub ;", "double auth val = get Output Value ( v ) . authority ;", "hub ssum += ( hub val * hub val ) ;", "auth ssum += ( auth val * auth val ) ; }", "hub ssum = Math . sqrt ( hub ssum ) ;", "auth ssum = Math . sqrt ( auth ssum ) ;", "for ( V v : graph . get Vertices ( ) ) {", "HITS . Scores values = get Output Value ( v ) ;", "set Output Value ( v , new HITS . Scores ( values . hub / hub ssum , values . authority / auth ssum ) ) ; } }"]}
{"ids": "44652", "code": ["public static int absolute Max ( int [ ] int Array ) {", "int max = Integer . MIN VALUE ;", "for ( int i = NUM_ ; i < int Array . length ; i ++ ) {", "if ( Math . abs ( int Array [ i ] ) > max && int Array [ i ] != NUM_ ) {", "max = int Array [ i ] ; } }", "return max == Integer . MIN VALUE ? NUM_ : max ; }"]}
{"ids": "17645", "code": ["private boolean do Acquire Nanos ( long arg , long nanos Timeout ) throws Interrupted Exception {", "if ( nanos Timeout <= NUM_ ) return false ;", "final long deadline = System . nano Time ( ) + nanos Timeout ;", "final Node node = add Waiter ( Node . EXCLUSIVE ) ;", "boolean failed = true ;", "try {", "for ( ; ; ) {", "final Node p = node . predecessor ( ) ;", "if ( p == head && try Acquire ( arg ) ) {", "set Head ( node ) ;", "p . next = null ;", "failed = false ;", "return true ; }", "nanos Timeout = deadline - System . nano Time ( ) ;", "if ( nanos Timeout <= NUM_ ) return false ;", "if ( should Park After Failed Acquire ( p , node ) && nanos Timeout > spin For Timeout Threshold ) Lock Support . park Nanos ( this , nanos Timeout ) ;", "if ( Thread . interrupted ( ) ) throw new Interrupted Exception ( ) ; } }", "finally {", "if ( failed ) cancel Acquire ( node ) ; } }"]}
{"ids": "43590", "code": ["boolean has Min Feature Count ( String feature ) {", "if ( min Feature Count == NUM_ ) return true ;", "Set < Integer > ids = clipped Feature Index . get ( feature ) ;", "if ( ids == null ) return false ;", "return ids . size ( ) >= min Feature Count ; }"]}
{"ids": "37700", "code": ["void mutate ( ) {", "do {", "int i Bit ;", "do {", "i Bit = m random . next Int ( m n Nodes * m n Nodes ) ; }", "while ( is Square ( i Bit ) ) ;", "m bits [ i Bit ] = ! m bits [ i Bit ] ; }", "while ( has Cycles ( ) ) ;", "calc Score ( ) ; }"]}
{"ids": "47128", "code": ["public void put ( E e ) throws Interrupted Exception {", "check Not Null ( e ) ;", "final Reentrant Lock lock = this . lock ;", "lock . lock Interruptibly ( ) ;", "try {", "while ( count == items . length ) not Full . await ( ) ;", "enqueue ( e ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "15733", "code": ["private void delete Comments ( Span Manager sm ) {", "int start = NUM_ ;", "while ( ( start = sm . index Of ( STR_ , start ) ) != - NUM_ ) {", "int end = sm . index Of ( STR_ , start + NUM_ ) + NUM_ ;", "if ( end == - NUM_ + NUM_ ) {", "end = sm . length ( ) ; }", "try {", "if ( line Separator . equals ( sm . substring ( start - line Separator . length ( ) , start ) ) && line Separator . equals ( sm . substring ( end , end + line Separator . length ( ) ) ) ) {", "end += line Separator . length ( ) ; } }", "catch ( Index Out Of Bounds Exception e ) { }", "sm . delete ( start , end ) ; } }"]}
{"ids": "47538", "code": ["Date Time Parse Context ( Date Time Formatter formatter ) {", "super ( ) ;", "this . formatter = formatter ;", "parsed . add ( new Parsed ( ) ) ; }"]}
{"ids": "72337", "code": ["public static boolean is Network Type Cellular ( String network Type ) {", "return network Type . equals ( STR_ ) ; }"]}
{"ids": "82809", "code": ["private void define Internal Frame Close Buttons ( UI Defaults d ) {", "String p = STR_ ;", "String c = PAINTER PREFIX + STR_ ;", "d . put ( p + STR_ , STR_ ) ;", "d . put ( p + STR_ , new Title Pane Close Button Window Not Focused State ( ) ) ;", "d . put ( p + STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Close Button Painter . Which . BACKGROUND DISABLED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Close Button Painter . Which . BACKGROUND ENABLED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Close Button Painter . Which . BACKGROUND MOUSEOVER ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Close Button Painter . Which . BACKGROUND PRESSED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Close Button Painter . Which . BACKGROUND ENABLED WINDOWNOTFOCUSED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Close Button Painter . Which . BACKGROUND MOUSEOVER ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Title Pane Close Button Painter . Which . BACKGROUND PRESSED WINDOWNOTFOCUSED ) ) ;", "d . put ( p + STR_ , new Sea Glass Icon ( p , STR_ , NUM_ , NUM_ ) ) ; }"]}
{"ids": "21731", "code": ["private void modify ( Storage Port port , String port Network Id ) {", "port . set Port Network Id ( port Network Id ) ;", "db Client . persist Object ( port ) ;", "modified Storage Ports List . add ( port ) ; }"]}
{"ids": "39264", "code": ["public boolean is ( String word ) {", "return m Words . contains ( word . to Lower Case ( ) ) ; }"]}
{"ids": "74791", "code": ["public static final String remove Multiple Spaces And Returns ( final String data ) {", "final String Builder all data = new String Builder ( data ) ;", "int i = NUM_ ;", "while ( i < all data . length ( ) ) {", "if ( ( ( all data . char At ( i ) == STR_ ) && ( all data . char At ( i - NUM_ ) == STR_ ) ) || ( ( all data . char At ( i ) == Character . LINE SEPARATOR ) && ( all data . char At ( i - NUM_ ) == Character . LINE SEPARATOR ) ) ) {", "all data . delete Char At ( i ) ; }", "else {", "i ++ ; } }", "return all data . to String ( ) ; }"]}
{"ids": "17132", "code": ["public void remove Listener ( Connectable Device Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "61655", "code": ["protected boolean read Attributes ( Data Input Stream d , int attributes count , attribute info [ ] ai ) throws IO Exception {", "attribute info a = null ;", "int i ;", "int j ;", "long len ;", "String s ;", "for ( i = NUM_ ; i < attributes count ; i ++ ) {", "j = d . read Unsigned Short ( ) ;", "len = d . read Int ( ) & NUM_ ;", "s = ( ( CONSTANT Utf 8 info ) ( constant pool [ j ] ) ) . convert ( ) ;", "if ( s . compare To ( attribute info . Source File ) == NUM_ ) {", "Source File attribute sa = new Source File attribute ( ) ;", "sa . sourcefile index = d . read Unsigned Short ( ) ;", "a = ( attribute info ) sa ; }", "else if ( s . compare To ( attribute info . Constant Value ) == NUM_ ) {", "Constant Value attribute ca = new Constant Value attribute ( ) ;", "ca . constantvalue index = d . read Unsigned Short ( ) ;", "a = ( attribute info ) ca ; }", "else if ( s . compare To ( attribute info . Code ) == NUM_ ) {", "Code attribute ca = new Code attribute ( ) ;", "ca . max stack = d . read Unsigned Short ( ) ;", "ca . max locals = d . read Unsigned Short ( ) ;", "ca . code length = d . read Int ( ) & NUM_ ;", "ca . code = new byte [ ( int ) ca . code length ] ;", "d . read ( ca . code ) ;", "ca . exception table length = d . read Unsigned Short ( ) ;", "ca . exception table = new exception table entry [ ca . exception table length ] ;", "int k ;", "exception table entry e ;", "for ( k = NUM_ ; k < ca . exception table length ; k ++ ) {", "e = new exception table entry ( ) ;", "e . start pc = d . read Unsigned Short ( ) ;", "e . end pc = d . read Unsigned Short ( ) ;", "e . handler pc = d . read Unsigned Short ( ) ;", "e . catch type = d . read Unsigned Short ( ) ;", "ca . exception table [ k ] = e ; }", "ca . attributes count = d . read Unsigned Short ( ) ;", "ca . attributes = new attribute info [ ca . attributes count ] ;", "read Attributes ( d , ca . attributes count , ca . attributes ) ;", "a = ( attribute info ) ca ; }", "else if ( s . compare To ( attribute info . Exceptions ) == NUM_ ) {", "Exception attribute ea = new Exception attribute ( ) ;", "ea . number of exceptions = d . read Unsigned Short ( ) ;", "if ( ea . number of exceptions > NUM_ ) {", "int k ;", "ea . exception index table = new int [ ea . number of exceptions ] ;", "for ( k = NUM_ ; k < ea . number of exceptions ; k ++ ) ea . exception index table [ k ] = d . read Unsigned Short ( ) ; }", "a = ( attribute info ) ea ; }", "else if ( s . compare To ( attribute info . Line Number Table ) == NUM_ ) {", "Line Number Table attribute la = new Line Number Table attribute ( ) ;", "la . line number table length = d . read Unsigned Short ( ) ;", "int k ;", "line number table entry e ;", "la . line number table = new line number table entry [ la . line number table length ] ;", "for ( k = NUM_ ; k < la . line number table length ; k ++ ) {", "e = new line number table entry ( ) ;", "e . start pc = d . read Unsigned Short ( ) ;", "e . line number = d . read Unsigned Short ( ) ;", "la . line number table [ k ] = e ; }", "a = ( attribute info ) la ; }", "else if ( s . compare To ( attribute info . Local Variable Table ) == NUM_ ) {", "Local Variable Table attribute la = new Local Variable Table attribute ( ) ;", "la . local variable table length = d . read Unsigned Short ( ) ;", "int k ;", "local variable table entry e ;", "la . local variable table = new local variable table entry [ la . local variable table length ] ;", "for ( k = NUM_ ; k < la . local variable table length ; k ++ ) {", "e = new local variable table entry ( ) ;", "e . start pc = d . read Unsigned Short ( ) ;", "e . length = d . read Unsigned Short ( ) ;", "e . name index = d . read Unsigned Short ( ) ;", "e . descriptor index = d . read Unsigned Short ( ) ;", "e . index = d . read Unsigned Short ( ) ;", "la . local variable table [ k ] = e ; }", "a = ( attribute info ) la ; }", "else if ( s . compare To ( attribute info . Local Variable Type Table ) == NUM_ ) {", "Local Variable Type Table attribute la = new Local Variable Type Table attribute ( ) ;", "la . local variable type table length = d . read Unsigned Short ( ) ;", "int k ;", "local variable type table entry e ;", "la . local variable type table = new local variable type table entry [ la . local variable type table length ] ;", "for ( k = NUM_ ; k < la . local variable type table length ; k ++ ) {", "e = new local variable type table entry ( ) ;", "e . start pc = d . read Unsigned Short ( ) ;", "e . length = d . read Unsigned Short ( ) ;", "e . name index = d . read Unsigned Short ( ) ;", "e . signature index = d . read Unsigned Short ( ) ;", "e . index = d . read Unsigned Short ( ) ;", "la . local variable type table [ k ] = e ; }", "a = ( attribute info ) la ; }", "else if ( s . compare To ( attribute info . Synthetic ) == NUM_ ) {", "Synthetic attribute ia = new Synthetic attribute ( ) ;", "a = ( attribute info ) ia ; }", "else if ( s . compare To ( attribute info . Signature ) == NUM_ ) {", "Signature attribute ia = new Signature attribute ( ) ;", "ia . signature index = d . read Unsigned Short ( ) ;", "a = ( attribute info ) ia ; }", "else if ( s . compare To ( attribute info . Deprecated ) == NUM_ ) {", "Deprecated attribute da = new Deprecated attribute ( ) ;", "a = ( attribute info ) da ; }", "else if ( s . compare To ( attribute info . Enclosing Method ) == NUM_ ) {", "Enclosing Method attribute ea = new Enclosing Method attribute ( ) ;", "ea . class index = d . read Unsigned Short ( ) ;", "ea . method index = d . read Unsigned Short ( ) ;", "a = ( attribute info ) ea ; }", "else if ( s . compare To ( attribute info . Inner Classes ) == NUM_ ) {", "Inner Classes attribute ia = new Inner Classes attribute ( ) ;", "ia . inner classes length = d . read Unsigned Short ( ) ;", "ia . inner classes = new inner class entry [ ia . inner classes length ] ;", "for ( int k = NUM_ ; k < ia . inner classes length ; k ++ ) {", "inner class entry e = new inner class entry ( ) ;", "e . inner class index = d . read Unsigned Short ( ) ;", "e . outer class index = d . read Unsigned Short ( ) ;", "e . name index = d . read Unsigned Short ( ) ;", "e . access flags = d . read Unsigned Short ( ) ;", "ia . inner classes [ k ] = e ; }", "a = ( attribute info ) ia ; }", "else if ( s . compare To ( attribute info . Runtime Visible Annotations ) == NUM_ ) {", "Runtime Visible Annotations attribute ra = new Runtime Visible Annotations attribute ( ) ;", "ra . number of annotations = d . read Unsigned Short ( ) ;", "ra . annotations = new annotation [ ra . number of annotations ] ;", "for ( int k = NUM_ ; k < ra . number of annotations ; k ++ ) {", "annotation annot = new annotation ( ) ;", "annot . type index = d . read Unsigned Short ( ) ;", "annot . num element value pairs = d . read Unsigned Short ( ) ;", "annot . element value pairs = read Element Values ( annot . num element value pairs , d , true , NUM_ ) ;", "ra . annotations [ k ] = annot ; }", "a = ( attribute info ) ra ; }", "else if ( s . compare To ( attribute info . Runtime Invisible Annotations ) == NUM_ ) {", "Runtime Invisible Annotations attribute ra = new Runtime Invisible Annotations attribute ( ) ;", "ra . number of annotations = d . read Unsigned Short ( ) ;", "ra . annotations = new annotation [ ra . number of annotations ] ;", "for ( int k = NUM_ ; k < ra . number of annotations ; k ++ ) {", "annotation annot = new annotation ( ) ;", "annot . type index = d . read Unsigned Short ( ) ;", "annot . num element value pairs = d . read Unsigned Short ( ) ;", "annot . element value pairs = read Element Values ( annot . num element value pairs , d , true , NUM_ ) ;", "ra . annotations [ k ] = annot ; }", "a = ( attribute info ) ra ; }", "else if ( s . compare To ( attribute info . Runtime Visible Parameter Annotations ) == NUM_ ) {", "Runtime Visible Parameter Annotations attribute ra = new Runtime Visible Parameter Annotations attribute ( ) ;", "ra . num parameters = d . read Unsigned Byte ( ) ;", "ra . parameter annotations = new parameter annotation [ ra . num parameters ] ;", "for ( int x = NUM_ ; x < ra . num parameters ; x ++ ) {", "parameter annotation p Annot = new parameter annotation ( ) ;", "p Annot . num annotations = d . read Unsigned Short ( ) ;", "p Annot . annotations = new annotation [ p Annot . num annotations ] ;", "for ( int k = NUM_ ; k < p Annot . num annotations ; k ++ ) {", "annotation annot = new annotation ( ) ;", "annot . type index = d . read Unsigned Short ( ) ;", "annot . num element value pairs = d . read Unsigned Short ( ) ;", "annot . element value pairs = read Element Values ( annot . num element value pairs , d , true , NUM_ ) ;", "p Annot . annotations [ k ] = annot ; }", "ra . parameter annotations [ x ] = p Annot ; }", "a = ( attribute info ) ra ; }", "else if ( s . compare To ( attribute info . Runtime Invisible Parameter Annotations ) == NUM_ ) {", "Runtime Invisible Parameter Annotations attribute ra = new Runtime Invisible Parameter Annotations attribute ( ) ;", "ra . num parameters = d . read Unsigned Byte ( ) ;", "ra . parameter annotations = new parameter annotation [ ra . num parameters ] ;", "for ( int x = NUM_ ; x < ra . num parameters ; x ++ ) {", "parameter annotation p Annot = new parameter annotation ( ) ;", "p Annot . num annotations = d . read Unsigned Short ( ) ;", "p Annot . annotations = new annotation [ p Annot . num annotations ] ;", "for ( int k = NUM_ ; k < p Annot . num annotations ; k ++ ) {", "annotation annot = new annotation ( ) ;", "annot . type index = d . read Unsigned Short ( ) ;", "annot . num element value pairs = d . read Unsigned Short ( ) ;", "annot . element value pairs = read Element Values ( annot . num element value pairs , d , true , NUM_ ) ;", "p Annot . annotations [ k ] = annot ; }", "ra . parameter annotations [ x ] = p Annot ; }", "a = ( attribute info ) ra ; }", "else if ( s . compare To ( attribute info . Annotation Default ) == NUM_ ) {", "Annotation Default attribute da = new Annotation Default attribute ( ) ;", "element value [ ] result = read Element Values ( NUM_ , d , false , NUM_ ) ;", "da . default value = result [ NUM_ ] ;", "a = ( attribute info ) da ; }", "else if ( s . equals ( attribute info . Bootstrap Methods ) ) {", "Bootstrap Methods attribute bsma = new Bootstrap Methods attribute ( ) ;", "int count = d . read Unsigned Short ( ) ;", "bsma . method handles = new short [ count ] ;", "bsma . arg indices = new short [ count ] [ ] ;", "for ( int num = NUM_ ; num < count ; num ++ ) {", "short index = ( short ) d . read Unsigned Short ( ) ;", "bsma . method handles [ num ] = index ;", "int arg Count = d . read Unsigned Short ( ) ;", "bsma . arg indices [ num ] = new short [ arg Count ] ;", "for ( int num Arg = NUM_ ; num Arg < arg Count ; num Arg ++ ) {", "short index Arg = ( short ) d . read Unsigned Short ( ) ;", "bsma . arg indices [ num ] [ num Arg ] = index Arg ; } }", "assert bootstrap methods attribute == null : STR_ ;", "a = bootstrap methods attribute = bsma ; }", "else {", "Generic attribute ga = new Generic attribute ( ) ;", "if ( len > NUM_ ) {", "ga . info = new byte [ ( int ) len ] ;", "d . read ( ga . info ) ; }", "a = ( attribute info ) ga ; }", "a . attribute name = j ;", "a . attribute length = len ;", "ai [ i ] = a ; }", "return true ; }"]}
{"ids": "8935", "code": ["private void notifiy Download State ( ) {", "synchronized ( m Download Monitor ) {", "Log . v ( LOG TAG , STR_ ) ;", "m Download Monitor . notify ( ) ; } }"]}
{"ids": "9922", "code": ["private PKIX Builder Parameters Create PKIX Builder Parameters ( X 509 Certificate end Cert ) throws Certificate Path Building Exception {", "X 509 Cert Selector target Constraints = new X 509 Cert Selector ( ) ;", "target Constraints . set Certificate ( end Cert ) ;", "PKIX Builder Parameters params ;", "try {", "params = new PKIX Builder Parameters ( trust Store , target Constraints ) ;", "params . set Revocation Enabled ( false ) ; }", "catch ( Key Store Exception e ) {", "throw new Certificate Path Building Exception ( STR_ + e . get Message ( ) , e ) ; }", "catch ( Invalid Algorithm Parameter Exception e ) {", "throw new Certificate Path Building Exception ( STR_ + e . get Message ( ) , e ) ; }", "catch ( Throwable e ) {", "throw new Certificate Path Building Exception ( STR_ + e . get Message ( ) , e ) ; }", "Collection < Object > cert Collection = new Array List < Object > ( ) ;", "add Certificate Candidates ( end Cert , cert Collection ) ;", "if ( ! cert Collection . is Empty ( ) ) {", "try {", "Cert Store cert Store = Cert Store . get Instance ( STR_ , new Collection Cert Store Parameters ( cert Collection ) ) ;", "params . add Cert Store ( cert Store ) ; }", "catch ( Invalid Algorithm Parameter Exception e ) {", "throw new Certificate Path Building Exception ( STR_ + e . get Message ( ) , e ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new Certificate Path Building Exception ( STR_ + e . get Message ( ) , e ) ; } }", "else {", "logger . debug ( STR_ ) ; }", "return params ; }"]}
{"ids": "38983", "code": ["public void print Stack Trace ( ) {", "Throwable t ;", "String Writer writer ;", "writer = new String Writer ( ) ;", "t = new Throwable ( ) ;", "t . fill In Stack Trace ( ) ;", "t . print Stack Trace ( new Print Writer ( writer ) ) ;", "println ( writer . to String ( ) ) ; }"]}
{"ids": "53455", "code": ["protected int effective Band Size ( final int dim 1 , final int dim 2 ) {", "if ( band Size == Double . POSITIVE INFINITY ) {", "return ( dim 1 > dim 2 ) ? dim 1 : dim 2 ; }", "if ( band Size >= NUM_ ) {", "return ( int ) band Size ; }", "return ( int ) Math . ceil ( ( dim 1 >= dim 2 ? dim 1 : dim 2 ) * band Size ) ; }"]}
{"ids": "77031", "code": ["public static int encode Longitude Ceil ( double longitude ) {", "Geo Utils . check Longitude ( longitude ) ;", "if ( longitude == NUM_ ) {", "longitude = Math . next Down ( longitude ) ; }", "return ( int ) Math . ceil ( longitude / LON DECODE ) ; }"]}
{"ids": "83556", "code": ["private Linked List < Diff > diff line Mode ( String text 1 , String text 2 , long deadline ) {", "Lines To Chars Result b = diff lines To Chars ( text 1 , text 2 ) ;", "text 1 = b . chars 1 ;", "text 2 = b . chars 2 ;", "List < String > linearray = b . line Array ;", "Linked List < Diff > diffs = diff main ( text 1 , text 2 , false , deadline ) ;", "diff chars To Lines ( diffs , linearray ) ;", "diff cleanup Semantic ( diffs ) ;", "diffs . add ( new Diff ( Operation . EQUAL , STR_ ) ) ;", "int count delete = NUM_ ;", "int count insert = NUM_ ;", "String text delete = STR_ ;", "String text insert = STR_ ;", "List Iterator < Diff > pointer = diffs . list Iterator ( ) ;", "Diff this Diff = pointer . next ( ) ;", "while ( this Diff != null ) {", "switch ( this Diff . operation ) {", "case INSERT :", "count insert ++ ;", "text insert += this Diff . text ;", "break ;", "case DELETE :", "count delete ++ ;", "text delete += this Diff . text ;", "break ;", "case EQUAL :", "if ( count delete >= NUM_ && count insert >= NUM_ ) {", "pointer . previous ( ) ;", "for ( int j = NUM_ ; j < count delete + count insert ; j ++ ) {", "pointer . previous ( ) ;", "pointer . remove ( ) ; }", "for ( Diff new Diff : diff main ( text delete , text insert , false , deadline ) ) {", "pointer . add ( new Diff ) ; } }", "count insert = NUM_ ;", "count delete = NUM_ ;", "text delete = STR_ ;", "text insert = STR_ ;", "break ; }", "this Diff = pointer . has Next ( ) ? pointer . next ( ) : null ; }", "diffs . remove Last ( ) ;", "return diffs ; }"]}
{"ids": "69379", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return ID ;", "case NUM_ :", "return CREATE TIME ;", "case NUM_ :", "return UPDATE TIME ;", "case NUM_ :", "return OPERATION ;", "case NUM_ :", "return STATUS ;", "case NUM_ :", "return SRC PATH ;", "case NUM_ :", "return SRC CLUSTER ;", "case NUM_ :", "return SRC DB ;", "case NUM_ :", "return SRC TABLE ;", "case NUM_ :", "return SRC PARTITIONS ;", "case NUM_ :", "return SRC MODIFIED TIME ;", "case NUM_ :", "return RENAME TO DB ;", "case NUM_ :", "return RENAME TO TABLE ;", "case NUM_ :", "return RENAME TO PATH ;", "case NUM_ :", "return EXTRAS ;", "case NUM_ :", "return WAITING ON JOBS ;", "default :", "return null ; } }"]}
{"ids": "52974", "code": ["public JSON Buffer append Key Hash ( Object key ) {", "if ( stack . empty ( ) || stack . peek ( ) != Operand . HASH ) {", "throw new JSON Exception ( STR_ ) ; }", "add Quoted String ( key ) ;", "buffer . append ( STR_ ) ;", "buffer . append ( STR_ ) ;", "stack . push ( Operand . HASH ) ;", "return this ; }"]}
{"ids": "8007", "code": ["static Replay Promise < Void > any Replay ( final Duration timeout , final Promise < ? > ... promises ) {", "return any Replay ( timeout , System . current Time Millis ( ) , promises ) ; }"]}
{"ids": "14672", "code": ["public static Policy Service send PLL Request ( URL policy Service Url , Policy Request preq ) throws Send Request Exception , Policy Exception {", "String lbcookie = null ;", "try {", "lbcookie = get LB Cookie ( preq ) ; }", "catch ( Exception e ) {", "throw new Send Request Exception ( e ) ; }", "Policy Service policy Service = new Policy Service ( ) ;", "policy Service . set Method ID ( Policy Service . POLICY REQUEST ID ) ;", "policy Service . set Policy Request ( preq ) ;", "String xml String = policy Service . to XML String ( ) ;", "Request request = new Request ( xml String ) ;", "Request Set request Set = new Request Set ( Policy Service . POLICY SERVICE ) ;", "request Set . add Request ( request ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + policy Service Url + STR_ + xml String ) ; }", "Vector responses = PLL Client . send ( policy Service Url , lbcookie , request Set ) ;", "Response response = ( Response ) responses . element At ( NUM_ ) ;", "Policy Service ps = Policy Service . parse XML ( response . get Content ( ) ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + ps . to XML String ( ) ) ; }", "return ps ; }"]}
{"ids": "21066", "code": ["public static URI create Id ( Class < ? extends Data Object > clazz ) {", "return new Id ( clazz , get Location ( clazz ) ) ; }"]}
{"ids": "53244", "code": ["public static double log 2 ( double x ) {", "return Math . log ( x ) * ONE BY LOG 2 ; }"]}
{"ids": "58069", "code": ["public void insert Element At ( Node value , int at ) {", "if ( ! m mutable ) throw new Runtime Exception ( XSL Messages . create XPATH Message ( XPATH Error Resources . ER NODESET NOT MUTABLE , null ) ) ;", "if ( null == m map ) {", "m map = new Node [ m blocksize ] ;", "m map Size = m blocksize ; }", "else if ( ( m first Free + NUM_ ) >= m map Size ) {", "m map Size += m blocksize ;", "Node new Map [ ] = new Node [ m map Size ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m first Free + NUM_ ) ;", "m map = new Map ; }", "if ( at <= ( m first Free - NUM_ ) ) {", "System . arraycopy ( m map , at , m map , at + NUM_ , m first Free - at ) ; }", "m map [ at ] = value ;", "m first Free ++ ; }"]}
{"ids": "52182", "code": ["public Result regress ( Discrete Variable x , List < Node > regressors ) {", "if ( ! binary ( x ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "for ( Node node : regressors ) {", "if ( ! ( node instanceof Continuous Variable || binary ( node ) ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; } }", "double [ ] [ ] regressors = new double [ regressors . size ( ) ] [ get Rows ( ) . length ] ;", "for ( int j = NUM_ ; j < regressors . size ( ) ; j ++ ) {", "int col = data Set . get Column ( regressors . get ( j ) ) ;", "double [ ] data Col = data Cols [ col ] ;", "for ( int i = NUM_ ; i < get Rows ( ) . length ; i ++ ) {", "regressors [ j ] [ i ] = data Col [ get Rows ( ) [ i ] ] ; } }", "int [ ] target = new int [ get Rows ( ) . length ] ;", "int col = data Set . get Column ( data Set . get Variable ( x . get Name ( ) ) ) ;", "for ( int i = NUM_ ; i < get Rows ( ) . length ; i ++ ) {", "target [ i ] = data Set . get Int ( get Rows ( ) [ i ] , col ) ; }", "List < String > regressor Names = new Array List < > ( ) ;", "for ( Node node : regressors ) {", "regressor Names . add ( node . get Name ( ) ) ; }", "return regress ( target , x . get Name ( ) , regressors , regressor Names ) ; }"]}
{"ids": "43599", "code": ["static public List < Sequence < I String > > tokenize File ( String filename , boolean do NIST ) {", "List < Sequence < I String > > sequences = new Array List < > ( ) ;", "Line Number Reader reader = IO Tools . get Reader From File ( filename ) ;", "try {", "for ( String line ; ( line = reader . read Line ( ) ) != null ; ) {", "if ( do NIST ) line = NIST Tokenizer . tokenize ( line ) ;", "sequences . add ( I Strings . tokenize ( line ) ) ; }", "reader . close ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "return sequences ; }"]}
{"ids": "7068", "code": ["public Statement like ( String expr ) {", "statement . append ( STR_ ) ;", "append Escaped SQL String ( statement , expr ) ;", "return this ; }"]}
{"ids": "79961", "code": ["public static Kdbx Header read Kdbx Header ( Kdbx Header kdbx Header , Input Stream input Stream ) throws IO Exception {", "Message Digest digest = Encryption . get Message Digest Instance ( ) ;", "Digest Input Stream digest Input Stream = new Digest Input Stream ( input Stream , digest ) ;", "Little Endian Data Input Stream ledis = new Little Endian Data Input Stream ( digest Input Stream ) ;", "if ( ! verify Magic Number ( ledis ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( ! verify File Version ( ledis ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "byte header Type ;", "while ( ( header Type = ledis . read Byte ( ) ) != Header Type . END ) {", "switch ( header Type ) {", "case Header Type . COMMENT :", "get Byte Array ( ledis ) ;", "break ;", "case Header Type . CIPHER ID :", "kdbx Header . set Cipher Uuid ( get Byte Array ( ledis ) ) ;", "break ;", "case Header Type . COMPRESSION FLAGS :", "kdbx Header . set Compression Flags ( get Int ( ledis ) ) ;", "break ;", "case Header Type . MASTER SEED :", "kdbx Header . set Master Seed ( get Byte Array ( ledis ) ) ;", "break ;", "case Header Type . TRANSFORM SEED :", "kdbx Header . set Transform Seed ( get Byte Array ( ledis ) ) ;", "break ;", "case Header Type . TRANSFORM ROUNDS :", "kdbx Header . set Transform Rounds ( get Long ( ledis ) ) ;", "break ;", "case Header Type . ENCRYPTION IV :", "kdbx Header . set Encryption Iv ( get Byte Array ( ledis ) ) ;", "break ;", "case Header Type . PROTECTED STREAM KEY :", "kdbx Header . set Protected Stream Key ( get Byte Array ( ledis ) ) ;", "break ;", "case Header Type . STREAM START BYTES :", "kdbx Header . set Stream Start Bytes ( get Byte Array ( ledis ) ) ;", "break ;", "case Header Type . INNER RANDOM STREAM ID :", "kdbx Header . set Inner Random Stream Id ( get Int ( ledis ) ) ;", "break ;", "default :", "throw new Illegal State Exception ( STR_ ) ; } }", "get Byte Array ( ledis ) ;", "kdbx Header . set Header Hash ( digest . digest ( ) ) ;", "return kdbx Header ; }"]}
{"ids": "72606", "code": ["public static byte [ ] copy To Byte Array ( Input Stream in ) throws IO Exception {", "Byte Array Output Stream out = new Byte Array Output Stream ( BUFFER SIZE ) ;", "copy ( in , out ) ;", "return out . to Byte Array ( ) ; }"]}
{"ids": "17865", "code": ["public boolean is Enum Constant ( ) {", "return ( get Modifiers ( ) & Modifier . ENUM ) != NUM_ ; }"]}
{"ids": "84634", "code": ["public boolean contains Any ( Collection < Taxon > taxa ) {", "for ( Taxon taxon : taxa ) {", "if ( taxa . contains ( taxon ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "50013", "code": ["@ Suppress Warnings ( STR_ ) public synchronized T dequeue Task ( ) throws Interrupted Exception {", "while ( data . is Empty ( ) ) {", "if ( ! closed Input ) wait ( ) ;", "else return ( T ) NO MORE TASKS ; }", "T t = data . remove First ( ) ;", "notify ( ) ;", "return t ; }"]}
{"ids": "15535", "code": ["@ Override public void read External ( Object Input in ) throws IO Exception , Class Not Found Exception {", "super . read External ( in ) ;", "this . facet Name = in . read UTF ( ) ; }"]}
{"ids": "66550", "code": ["private boolean string To Boolean ( String condition ) {", "boolean result = false ;", "if ( condition != null && condition . length ( ) > NUM_ ) {", "String s = condition . substring ( NUM_ , NUM_ ) ;", "if ( s . equals Ignore Case ( STR_ ) || s . equals ( STR_ ) || s . equals Ignore Case ( STR_ ) ) result = true ; }", "return result ; }"]}
{"ids": "62465", "code": ["public static void write UINT 32 ( long number , Output Stream out ) throws IO Exception {", "if ( number < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "byte [ ] to Write = new byte [ NUM_ ] ;", "for ( int i = NUM_ ; i <= NUM_ ; i += NUM_ ) {", "to Write [ i / NUM_ ] = ( byte ) ( ( number > > i ) & NUM_ ) ; }", "out . write ( to Write ) ; }"]}
{"ids": "68330", "code": ["public Remote Meta Data Impl ( Schema schema ) throws Remote Exception {", "this . schema = schema ;", "fields . add All ( schema . fields ( ) ) ; }"]}
{"ids": "34702", "code": ["private void check Server Response Code ( Http URL Connection url Connection ) throws Request Failure Exception {", "try {", "if ( url Connection . get Response Code ( ) != NUM_ ) {", "throw new Request Failure Exception ( STR_ + url Connection . get Response Code ( ) + STR_ ) ; } }", "catch ( IO Exception e ) {", "throw new Request Failure Exception ( STR_ , e ) ; } }"]}
{"ids": "29101", "code": ["public void add Switch With Optional Extra Part ( String option , String option Extra Part Synopsis , String description ) {", "option List . add ( option ) ;", "option Extra Part Synopsis Map . put ( option , option Extra Part Synopsis ) ;", "option Description Map . put ( option , description ) ;", "int length = option . length ( ) + option Extra Part Synopsis . length ( ) + NUM_ ;", "if ( length > max Width ) {", "max Width = length ; } }"]}
{"ids": "86198", "code": ["public static Object detect Linux Default File Browser ( Map < String , Object > file Browsers ) {", "Array List < String > command = new Array List < String > ( ) ;", "command . add ( STR_ ) ;", "command . add ( STR_ ) ;", "command . add ( STR_ ) ;", "command . add ( STR_ ) ;", "if ( file Browsers == null ) {", "file Browsers = new Hash Map < String , Object > ( ) ;", "file Browsers . put ( STR_ , STR_ ) ; }", "return Utils . is Expected Command Output ( command , file Browsers ) ; }"]}
{"ids": "55505", "code": ["public void updated ( ) {", "current Color = Html Colors . decode ( get Setting Value ( ) ) ;", "secondary Color = Html Colors . decode ( base Color ) ;", "Color foreground Color ;", "Color background Color ;", "if ( type == FOREGROUND ) {", "foreground Color = current Color ;", "background Color = secondary Color ; }", "else {", "foreground Color = secondary Color ;", "background Color = current Color ; }", "preview . set Foreground ( foreground Color ) ;", "preview . set Background ( background Color ) ; }"]}
{"ids": "24886", "code": ["public Collection < ? extends Immutable Class Type > remove Instrumentation Points ( final Collection < ? extends Immutable Type > types ) {", "return remove Instrumentation Points ( types , Collections . < I Instrumentation Applier > singleton ( Remove All Instrumentation Applier . get Instance ( ) ) ) ; }"]}
{"ids": "15371", "code": ["private Record create Record ( Record Properties record Properties ) throws Record Exception {", "String debug Directory ;", "if ( is Recording ( ) ) {", "debug Directory = previous Debug Directory ; }", "else {", "debug Directory = System Properties Manager . get ( Debug Constants . CONFIG DEBUG DIRECTORY ) ; }", "String record Directory = debug Directory + File . separator + Record Constants . RECORD FOLDER NAME + File . separator + record Properties . get Issue ID ( ) + File . separator + record Properties . get Reference ID ( ) ;", "Record record = new Record ( record Properties , record Directory ) ;", "try {", "create Folder ( record . get Folder Path ( ) ) ;", "Print Writer print Writer Info = get Print Writer For File ( record , Record Constants . INFO FILE NAME ) ;", "Json Value info = record Report . info Report ( record ) ;", "try {", "JSON Object json = new JSON Object ( info . to String ( ) ) ;", "print Writer Info . println ( json . to String ( NUM_ ) ) ; }", "catch ( JSON Exception e ) {", "debug . warning ( STR_ , info , e ) ;", "print Writer Info . println ( info ) ; }", "print Writer Info . flush ( ) ;", "return record ; }", "catch ( IO Exception e ) {", "debug . error ( STR_ , record Properties , e ) ;", "throw new Record Exception ( STR_ + record Properties . get Issue ID ( ) + STR_ , e ) ; } }"]}
{"ids": "52109", "code": ["public static Lagged Edge serializable Instance ( ) {", "return new Lagged Edge ( STR_ , Lagged Factor . serializable Instance ( ) ) ; }"]}
{"ids": "18337", "code": ["public final void dispatch Characters Events ( int node Handle , Content Handler ch , boolean normalize ) throws SAX Exception {", "int identity = make Node Identity ( node Handle ) ;", "if ( identity == DTM . NULL ) return ;", "int type = type 2 ( identity ) ;", "if ( type == DTM . ELEMENT NODE || type == DTM . DOCUMENT NODE ) {", "int start Node = identity ;", "identity = firstch 2 ( identity ) ;", "if ( DTM . NULL != identity ) {", "int offset = - NUM_ ;", "int length = NUM_ ;", "do {", "type = exptype 2 ( identity ) ;", "if ( type == DTM . TEXT NODE || type == DTM . CDATA SECTION NODE ) {", "int data Index = m data Or Q Name . element At ( identity ) ;", "if ( data Index >= NUM_ ) {", "if ( - NUM_ == offset ) {", "offset = data Index > > > TEXT LENGTH BITS ; }", "length += data Index & TEXT LENGTH MAX ; }", "else {", "if ( - NUM_ == offset ) {", "offset = m data . element At ( - data Index ) ; }", "length += m data . element At ( - data Index + NUM_ ) ; } }", "identity ++ ; }", "while ( parent 2 ( identity ) >= start Node ) ;", "if ( length > NUM_ ) {", "if ( normalize ) m chars . send Normalized SA Xcharacters ( ch , offset , length ) ;", "else m chars . send SA Xcharacters ( ch , offset , length ) ; } } }", "else if ( DTM . TEXT NODE == type || DTM . CDATA SECTION NODE == type ) {", "int data Index = m data Or Q Name . element At ( identity ) ;", "if ( data Index >= NUM_ ) {", "if ( normalize ) m chars . send Normalized SA Xcharacters ( ch , data Index > > > TEXT LENGTH BITS , data Index & TEXT LENGTH MAX ) ;", "else m chars . send SA Xcharacters ( ch , data Index > > > TEXT LENGTH BITS , data Index & TEXT LENGTH MAX ) ; }", "else {", "if ( normalize ) m chars . send Normalized SA Xcharacters ( ch , m data . element At ( - data Index ) , m data . element At ( - data Index + NUM_ ) ) ;", "else m chars . send SA Xcharacters ( ch , m data . element At ( - data Index ) , m data . element At ( - data Index + NUM_ ) ) ; } }", "else {", "int data Index = m data Or Q Name . element At ( identity ) ;", "if ( data Index < NUM_ ) {", "data Index = - data Index ;", "data Index = m data . element At ( data Index + NUM_ ) ; }", "String str = ( String ) m values . element At ( data Index ) ;", "if ( normalize ) Fast String Buffer . send Normalized SA Xcharacters ( str . to Char Array ( ) , NUM_ , str . length ( ) , ch ) ;", "else ch . characters ( str . to Char Array ( ) , NUM_ , str . length ( ) ) ; } }"]}
{"ids": "58132", "code": ["private static int length Of Mime Names ( String val ) {", "int len = val . index Of ( STR_ ) ;", "if ( len < NUM_ ) len = val . length ( ) ;", "return len ; }"]}
{"ids": "75188", "code": ["private char read Escape Character ( ) throws JSON Exception {", "char escaped = in . char At ( pos ++ ) ;", "switch ( escaped ) {", "case STR_ :", "if ( pos + NUM_ > in . length ( ) ) {", "throw syntax Error ( STR_ ) ; }", "String hex = in . substring ( pos , pos + NUM_ ) ;", "pos += NUM_ ;", "return ( char ) Integer . parse Int ( hex , NUM_ ) ;", "case STR_ :", "return STR_ ;", "case STR_ :", "return STR_ ;", "case STR_ :", "return STR_ ;", "case STR_ :", "return STR_ ;", "case STR_ :", "return STR_ ;", "case STR_ :", "case STR_ :", "case STR_ :", "default :", "return escaped ; } }"]}
{"ids": "37437", "code": ["public static boolean is Sha 1 String ( final String string ) {", "Preconditions . check Not Null ( string , STR_ ) ;", "return ( string . length ( ) == NUM_ ) && is Hex String ( string ) ; }"]}
{"ids": "16844", "code": ["public boolean is Watched ( ) {", "return watched ; }"]}
{"ids": "16512", "code": ["public void add Date Change Listener ( Date Change Listener listener ) {", "date Change Listeners . add ( listener ) ; }"]}
{"ids": "31467", "code": ["public static String strip File Protocol ( String uri String ) {", "if ( uri String . starts With ( STR_ ) ) {", "uri String = uri String . substring ( NUM_ ) ; }", "return uri String ; }"]}
{"ids": "18051", "code": ["public void replace Template ( Elem Template v , int i ) throws Transformer Exception {", "if ( null == m templates ) throw new Array Index Out Of Bounds Exception ( ) ;", "replace Child ( v , ( Elem Template Element ) m templates . element At ( i ) ) ;", "m templates . set Element At ( v , i ) ;", "v . set Stylesheet ( this ) ; }"]}
{"ids": "26812", "code": ["public Rotated Problem ( Problem problem , Real Matrix rotation ) {", "super ( ) ;", "this . problem = problem ;", "this . rotation = rotation ;", "Solution solution = problem . new Solution ( ) ;", "center = new double [ get Number Of Variables ( ) ] ;", "lower Bounds = new double [ get Number Of Variables ( ) ] ;", "upper Bounds = new double [ get Number Of Variables ( ) ] ;", "for ( int i = NUM_ ; i < get Number Of Variables ( ) ; i ++ ) {", "Real Variable variable = ( Real Variable ) solution . get Variable ( i ) ;", "center [ i ] = ( variable . get Lower Bound ( ) + variable . get Upper Bound ( ) ) / NUM_ ;", "lower Bounds [ i ] = Math . sqrt ( NUM_ ) * ( variable . get Lower Bound ( ) - center [ i ] ) ;", "upper Bounds [ i ] = Math . sqrt ( NUM_ ) * ( variable . get Upper Bound ( ) - center [ i ] ) ; } }"]}
{"ids": "40113", "code": ["public static byte [ ] decode ( String data ) {", "int len = data . length ( ) / NUM_ * NUM_ ;", "Byte Array Output Stream b Out = new Byte Array Output Stream ( len ) ;", "try {", "encoder . decode ( data , b Out ) ; }", "catch ( Exception e ) {", "throw new Decoder Exception ( STR_ + e . get Message ( ) , e ) ; }", "return b Out . to Byte Array ( ) ; }"]}
{"ids": "65736", "code": ["public void characters ( char ch [ ] , int start , int length ) throws SAX Exception {", "m cur Value . append ( ch , start , length ) ; }"]}
{"ids": "11201", "code": ["public boolean regenerate ( Projection proj ) {", "boolean ret = super . regenerate ( proj ) ;", "if ( proj != null && ! ret ) {", "ret = generate ( proj ) ; }", "return ret ; }"]}
{"ids": "71899", "code": ["@ Override public byte [ ] unwrap ( final byte [ ] incoming , final int offset , final int len ) throws Ldap Exception {", "final byte [ ] copy = new byte [ len ] ;", "System . arraycopy ( incoming , offset , copy , NUM_ , len ) ;", "return copy ; }"]}
{"ids": "12710", "code": ["private int sequential Forward Selection ( String data File , String [ ] features , int ind Var Col Number , int X [ ] , int Y [ ] , double J [ ] , int row Ini , int row End ) {", "double sig [ ] = new double [ Y . length ] ;", "int sig Index [ ] = new int [ Y . length ] ;", "double cor Xplusy [ ] = new double [ Y . length ] ;", "double cor X ;", "if ( X . length > NUM_ ) {", "Regression reg = new Regression ( ) ;", "reg . multiple Linear Regression ( data File , ind Var Col Number , X , features , intercept Term , row Ini , row End ) ;", "cor X = reg . get Correlation ( ) ; }", "else cor X = NUM_ ;", "for ( int i = NUM_ ; i < Y . length ; i ++ ) {", "cor Xplusy [ i ] = correlation Of New Feature ( data File , features , ind Var Col Number , X , Y [ i ] , row Ini , row End ) ;", "sig [ i ] = cor Xplusy [ i ] - cor X ;", "sig Index [ i ] = Y [ i ] ; }", "int min Sig = Math Utils . get Min Index ( sig ) ;", "J [ NUM_ ] = cor Xplusy [ min Sig ] ;", "J [ NUM_ ] = cor X ;", "int max Sig = Math Utils . get Max Index ( sig ) ;", "J [ NUM_ ] = cor Xplusy [ max Sig ] ;", "return sig Index [ max Sig ] ; }"]}
{"ids": "62328", "code": ["private static byte [ ] codes To Bytes ( String codes , boolean required ) {", "if ( codes . length ( ) == NUM_ ) {", "if ( required ) {", "throw new Illegal State Exception ( STR_ ) ; }", "return null ; }", "if ( ( codes . length ( ) % NUM_ ) != NUM_ ) {", "codes = STR_ + codes ; }", "byte [ ] bytes = new byte [ codes . length ( ) / NUM_ ] ;", "for ( int i = NUM_ ; i < bytes . length ; ++ i ) {", "int char Idx = i * NUM_ ;", "bytes [ i ] = ( byte ) ( Integer . parse Int ( codes . substring ( char Idx , char Idx + NUM_ ) , NUM_ ) ) ; }", "return bytes ; }"]}
{"ids": "9657", "code": ["public Drag Entry drag Selected Entry ( ) {", "try {", "Key Store History history = get Active Key Store History ( ) ;", "if ( history == null ) {", "return null ; }", "Key Store State current State = history . get Current State ( ) ;", "Key Store key Store = current State . get Key Store ( ) ;", "String alias = get Selected Entry Alias ( ) ;", "if ( alias == null ) {", "return null ; }", "if ( Key Store Util . is Key Entry ( alias , key Store ) ) {", "J Option Pane . show Message Dialog ( frame , res . get String ( STR_ ) , KSE . get Application Name ( ) , J Option Pane . WARNING MESSAGE ) ;", "return null ; }", "if ( Key Store Util . is Key Pair Entry ( alias , key Store ) ) {", "Password password = current State . get Entry Password ( alias ) ;", "Key Store Type type = Key Store Type . resolve Jce ( key Store . get Type ( ) ) ;", "if ( password == null && type . has Entry Passwords ( ) ) {", "J Option Pane . show Message Dialog ( frame , res . get String ( STR_ ) , KSE . get Application Name ( ) , J Option Pane . WARNING MESSAGE ) ;", "return null ; }", "Private Key private Key = ( Private Key ) key Store . get Key ( alias , password . to Char Array ( ) ) ;", "Certificate [ ] certificate Chain = key Store . get Certificate Chain ( alias ) ;", "return new Drag Key Pair Entry ( alias , private Key , password , certificate Chain ) ; }", "else {", "Certificate trusted Certificate = key Store . get Certificate ( alias ) ;", "return new Drag Trusted Certificate Entry ( alias , trusted Certificate ) ; } }", "catch ( Exception ex ) {", "D Error . display Error ( frame , ex ) ;", "return null ; } }"]}
{"ids": "44764", "code": ["public void insert ( T object , int index ) {", "synchronized ( m Lock ) {", "if ( m Original Values != null ) {", "m Original Values . add ( index , object ) ; }", "else {", "m Objects . add ( index , object ) ; } }", "if ( m Notify On Change ) notify Data Set Changed ( ) ; }"]}
{"ids": "18288", "code": ["public static Document create Document ( boolean is Secure Processing ) {", "try {", "Document Builder Factory dfactory = Document Builder Factory . new Instance ( ) ;", "dfactory . set Namespace Aware ( true ) ;", "Document Builder doc Builder = dfactory . new Document Builder ( ) ;", "Document out Node = doc Builder . new Document ( ) ;", "return out Node ; }", "catch ( Parser Configuration Exception pce ) {", "throw new Runtime Exception ( XML Messages . create XML Message ( XML Error Resources . ER CREATEDOCUMENT NOT SUPPORTED , null ) ) ; } }"]}
{"ids": "62615", "code": ["public double reduce ( String numeric Column Name , Numeric Reduce Function function ) {", "Column column = column ( numeric Column Name ) ;", "return function . reduce ( column . to Double Array ( ) ) ; }"]}
{"ids": "68050", "code": ["static public String format U Int 8 Char ( byte b ) {", "String ch = new String ( new byte [ ] { b } ) ;", "ch = ch . replace All ( STR_ , STR_ ) ;", "return format U Int 8 ( b ) + STR_ + ch ; }"]}
{"ids": "55857", "code": ["public static final Array List < Move > remove Illegal ( Position pos , Array List < Move > move List ) {", "Array List < Move > ret = new Array List < Move > ( ) ;", "Undo Info ui = new Undo Info ( ) ;", "int ml Size = move List . size ( ) ;", "for ( int mi = NUM_ ; mi < ml Size ; mi ++ ) {", "Move m = move List . get ( mi ) ;", "pos . make Move ( m , ui ) ;", "pos . set White Move ( ! pos . white Move ) ;", "if ( ! in Check ( pos ) ) ret . add ( m ) ;", "pos . set White Move ( ! pos . white Move ) ;", "pos . un Make Move ( m , ui ) ; }", "return ret ; }"]}
{"ids": "85292", "code": ["public static int apply Mask Penalty Rule 4 ( Byte Matrix matrix ) {", "int num Dark Cells = NUM_ ;", "byte [ ] [ ] array = matrix . get Array ( ) ;", "int width = matrix . get Width ( ) ;", "int height = matrix . get Height ( ) ;", "for ( int y = NUM_ ; y < height ; ++ y ) {", "for ( int x = NUM_ ; x < width ; ++ x ) {", "if ( array [ y ] [ x ] == NUM_ ) {", "num Dark Cells += NUM_ ; } } }", "int num Total Cells = matrix . get Height ( ) * matrix . get Width ( ) ;", "double dark Ratio = ( double ) num Dark Cells / num Total Cells ;", "return Math . abs ( ( int ) ( dark Ratio * NUM_ - NUM_ ) ) / NUM_ * NUM_ ; }"]}
{"ids": "84909", "code": ["private void check State ( ) {", "if ( diagram Retrieved ) {", "throw new Illegal State Exception ( STR_ ) ; } }"]}
{"ids": "14969", "code": ["static Hashtable convert To Hash ( Map m ) {", "Hashtable ret Hash = new Hashtable ( ) ;", "Set s = m . key Set ( ) ;", "Iterator iter = s . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String key = ( String ) iter . next ( ) ;", "Set val = ( Set ) m . get ( key ) ;", "ret Hash . put ( key , set To String ( val ) ) ; }", "return ret Hash ; }"]}
{"ids": "5090", "code": ["public boolean equal at start ( Pla Point Int p point ) {", "if ( p point == null ) return false ;", "Pla Point first = corner first ( ) ;", "return first . equals ( p point ) ; }"]}
{"ids": "41100", "code": ["public void for Each Block Depth First ( boolean reverse , Ssa Basic Block . Visitor v ) {", "Bit Set visited = new Bit Set ( blocks . size ( ) ) ;", "Stack < Ssa Basic Block > stack = new Stack < Ssa Basic Block > ( ) ;", "Ssa Basic Block root Block = reverse ? get Exit Block ( ) : get Entry Block ( ) ;", "if ( root Block == null ) {", "return ; }", "stack . add ( null ) ;", "stack . add ( root Block ) ;", "while ( stack . size ( ) > NUM_ ) {", "Ssa Basic Block cur = stack . pop ( ) ;", "Ssa Basic Block parent = stack . pop ( ) ;", "if ( ! visited . get ( cur . get Index ( ) ) ) {", "Bit Set children = reverse ? cur . get Predecessors ( ) : cur . get Successors ( ) ;", "for ( int i = children . next Set Bit ( NUM_ ) ; i >= NUM_ ; i = children . next Set Bit ( i + NUM_ ) ) {", "stack . add ( cur ) ;", "stack . add ( blocks . get ( i ) ) ; }", "visited . set ( cur . get Index ( ) ) ;", "v . visit Block ( cur , parent ) ; } } }"]}
{"ids": "47978", "code": ["protected void fill Path ( ) {", "m PS Stream . println ( m Fill Op Str ) ; }"]}
{"ids": "82616", "code": ["public static byte [ ] decode ( String encoded ) {", "if ( encoded == null ) {", "return null ; }", "char [ ] base 64 Data = encoded . to Char Array ( ) ;", "int len = remove White Space ( base 64 Data ) ;", "if ( len % FOURBYTE != NUM_ ) {", "return null ; }", "int number Quadruple = ( len / FOURBYTE ) ;", "if ( number Quadruple == NUM_ ) {", "return new byte [ NUM_ ] ; }", "byte decoded Data [ ] = null ;", "byte b 1 = NUM_ , b 2 = NUM_ , b 3 = NUM_ , b 4 = NUM_ ;", "char d 1 = NUM_ , d 2 = NUM_ , d 3 = NUM_ , d 4 = NUM_ ;", "int i = NUM_ ;", "int encoded Index = NUM_ ;", "int data Index = NUM_ ;", "decoded Data = new byte [ ( number Quadruple ) * NUM_ ] ;", "for ( ; i < number Quadruple - NUM_ ; i ++ ) {", "if ( ! is Data ( ( d 1 = base 64 Data [ data Index ++ ] ) ) || ! is Data ( ( d 2 = base 64 Data [ data Index ++ ] ) ) || ! is Data ( ( d 3 = base 64 Data [ data Index ++ ] ) ) || ! is Data ( ( d 4 = base 64 Data [ data Index ++ ] ) ) ) {", "return null ; }", "b 1 = base 64 Alphabet [ d 1 ] ;", "b 2 = base 64 Alphabet [ d 2 ] ;", "b 3 = base 64 Alphabet [ d 3 ] ;", "b 4 = base 64 Alphabet [ d 4 ] ;", "decoded Data [ encoded Index ++ ] = ( byte ) ( b 1 << NUM_ | b 2 > > NUM_ ) ;", "decoded Data [ encoded Index ++ ] = ( byte ) ( ( ( b 2 & NUM_ ) << NUM_ ) | ( ( b 3 > > NUM_ ) & NUM_ ) ) ;", "decoded Data [ encoded Index ++ ] = ( byte ) ( b 3 << NUM_ | b 4 ) ; }", "if ( ! is Data ( ( d 1 = base 64 Data [ data Index ++ ] ) ) || ! is Data ( ( d 2 = base 64 Data [ data Index ++ ] ) ) ) {", "return null ; }", "b 1 = base 64 Alphabet [ d 1 ] ;", "b 2 = base 64 Alphabet [ d 2 ] ;", "d 3 = base 64 Data [ data Index ++ ] ;", "d 4 = base 64 Data [ data Index ++ ] ;", "if ( ! is Data ( ( d 3 ) ) || ! is Data ( ( d 4 ) ) ) {", "if ( is Pad ( d 3 ) && is Pad ( d 4 ) ) {", "if ( ( b 2 & NUM_ ) != NUM_ ) {", "return null ; }", "byte [ ] tmp = new byte [ i * NUM_ + NUM_ ] ;", "System . arraycopy ( decoded Data , NUM_ , tmp , NUM_ , i * NUM_ ) ;", "tmp [ encoded Index ] = ( byte ) ( b 1 << NUM_ | b 2 > > NUM_ ) ;", "return tmp ; }", "else if ( ! is Pad ( d 3 ) && is Pad ( d 4 ) ) {", "b 3 = base 64 Alphabet [ d 3 ] ;", "if ( ( b 3 & NUM_ ) != NUM_ ) {", "return null ; }", "byte [ ] tmp = new byte [ i * NUM_ + NUM_ ] ;", "System . arraycopy ( decoded Data , NUM_ , tmp , NUM_ , i * NUM_ ) ;", "tmp [ encoded Index ++ ] = ( byte ) ( b 1 << NUM_ | b 2 > > NUM_ ) ;", "tmp [ encoded Index ] = ( byte ) ( ( ( b 2 & NUM_ ) << NUM_ ) | ( ( b 3 > > NUM_ ) & NUM_ ) ) ;", "return tmp ; }", "else {", "return null ; } }", "else {", "b 3 = base 64 Alphabet [ d 3 ] ;", "b 4 = base 64 Alphabet [ d 4 ] ;", "decoded Data [ encoded Index ++ ] = ( byte ) ( b 1 << NUM_ | b 2 > > NUM_ ) ;", "decoded Data [ encoded Index ++ ] = ( byte ) ( ( ( b 2 & NUM_ ) << NUM_ ) | ( ( b 3 > > NUM_ ) & NUM_ ) ) ;", "decoded Data [ encoded Index ++ ] = ( byte ) ( b 3 << NUM_ | b 4 ) ; }", "return decoded Data ; }"]}
{"ids": "86439", "code": ["public boolean is Last Window ( Accessibility Window Info base Window , int window Type ) {", "int index = get Window Index ( base Window ) ;", "if ( index == WRONG INDEX ) {", "return true ; }", "int count = m Windows . size ( ) ;", "for ( int i = index + NUM_ ; i < count ; i ++ ) {", "Accessibility Window Info window = m Windows . get ( i ) ;", "if ( window != null && window . get Type ( ) == window Type ) {", "return false ; } }", "return true ; }"]}
{"ids": "13825", "code": ["public void pass Pg Session Map Ex ( View Bean other ) {", "Map attributes = get Page Session Attributes ( ) ;", "for ( Iterator i = retain Page Sessions Btw Tabs . iterator ( ) ; i . has Next ( ) ; ) {", "String key = ( String ) i . next ( ) ;", "other . set Page Session Attribute ( key , ( Serializable ) attributes . get ( key ) ) ; }", "other . set Page Session Attribute ( get Tracking Tab ID Name ( ) , ( Serializable ) attributes . get ( get Tracking Tab ID Name ( ) ) ) ; }"]}
{"ids": "65355", "code": ["public long time ( ) {", "return heartbeat Time ; }"]}
{"ids": "47989", "code": ["public boolean hit Clip ( int x , int y , int width , int height ) {", "return g . hit Clip ( x , y , width , height ) ; }"]}
{"ids": "63135", "code": ["public static Close Watcher poll Unclosed ( ) {", "Reference Queue < Object > q = queue ;", "if ( q == null ) {", "return null ; }", "while ( true ) {", "Close Watcher cw = ( Close Watcher ) q . poll ( ) ;", "if ( cw == null ) {", "return null ; }", "if ( refs != null ) {", "refs . remove ( cw ) ; }", "if ( cw . closeable != null ) {", "return cw ; } } }"]}
{"ids": "72813", "code": ["private static boolean append Odexes To Class Path ( Context cxt , File dex Dir , String [ ] names ) {", "String str Dex Dir = dex Dir . get Absolute Path ( ) ;", "Array List < String > jar Paths = new Array List < String > ( ) ;", "for ( int i = NUM_ ; i < names . length ; i ++ ) {", "String jar Path = str Dex Dir + STR_ + names [ i ] ;", "File f = new File ( jar Path ) ;", "if ( f . is File ( ) ) {", "jar Paths . add ( jar Path ) ; } }", "String [ ] jars Of Dex = new String [ jar Paths . size ( ) ] ;", "jar Paths . to Array ( jars Of Dex ) ;", "Path Class Loader pcl = ( Path Class Loader ) cxt . get Class Loader ( ) ;", "try {", "if ( Build . VERSION . SDK INT < SDK INT ICS ) {", "Framework Hack . append Dex List Impl Under ICS ( jars Of Dex , pcl , dex Dir ) ; }", "else {", "boolean kitkat Plus = Build . VERSION . SDK INT >= SDK INT KITKAT ;", "boolean marshmallow Plus = Build . VERSION . SDK INT >= SDK INT MARSHMALLOW ;", "Array List < File > jar Files = Dex Dex . strings 2 Files ( jars Of Dex ) ;", "Framework Hack . append Dex List Impl ICS ( jar Files , pcl , dex Dir , kitkat Plus , marshmallow Plus ) ; }", "for ( String jar Name : names ) {", "the Appended . add ( jar Name ) ; }", "if ( debug ) {", "Log . d ( TAG , STR_ + pcl ) ;", "Log . d ( TAG , STR_ + the Appended ) ; } }", "catch ( Exception ex ) {", "throw new Runtime Exception ( ex ) ; }", "return true ; }"]}
{"ids": "13560", "code": ["private void assert Serialize And Des Date Time ( String date Time String ) throws Rya Type Resolver Exception {", "assert Serialize And Des Date Time ( date Time String , date Time String ) ; }"]}
{"ids": "40814", "code": ["public boolean is Hard Mode ( ) {", "return is Hard Mode ; }"]}
{"ids": "66407", "code": ["protected String do It ( ) throws Exception {", "setup ( ) ;", "for ( M Warehouse warehouse : warehouses ) for ( M Cost Type cost Type : cost Types ) for ( M Cost Element cost Element : cost Elements ) for ( int product Id : products ) generate Inventory Value ( product Id , cost Type . get M Cost Type ID ( ) , cost Element . get M Cost Element ID ( ) , warehouse . get M Warehouse ID ( ) ) ;", "pstmt . execute Batch ( ) ;", "commit Ex ( ) ;", "DB . close ( pstmt ) ;", "DB . execute Update ( STR_ + DB . TO DATE ( p Date Value ) + STR_ , get AD P Instance ID ( ) , get Trx Name ( ) ) ;", "return STR_ + count ; }"]}
{"ids": "77972", "code": ["public void run ( ) {", "setup ( ) ;", "log . info ( STR_ ) ;", "for ( Task Storage Manager task Storage Manager : task Storage Managers ) {", "task Storage Manager . init ( ) ;", "task Storage Manager . stop Stores ( ) ;", "log . debug ( STR_ + task Storage Manager . to String ( ) ) ; }", "log . info ( STR_ + store Base Dir . to String ( ) ) ; }"]}
{"ids": "74106", "code": ["public void read ( int i ) {", "Variable Value v = row Vector . element At ( i ) ;", "v . read All ( ) ; }"]}
{"ids": "8070", "code": ["protected List < Expression > transform Expressions ( List < ? extends Expression > expressions , Expression Transformer transformer ) {", "List < Expression > list = new Array List < Expression > ( expressions . size ( ) ) ;", "for ( Expression expr : expressions ) {", "list . add ( transformer . transform ( expr ) ) ; }", "return list ; }"]}
{"ids": "65436", "code": ["public String prefix Forward ( int length ) {", "final String prefix = prefix ( length ) ;", "this . pointer += length ;", "this . index += length ;", "this . column += length ;", "return prefix ; }"]}
{"ids": "72983", "code": ["private boolean can Add Task ( ) {", "return t Cur == null ; }"]}
{"ids": "12284", "code": ["public void flush ( ) throws IO Exception {", "if ( print Writer != null ) {", "print Writer . flush ( ) ; }", "if ( gzip Output Stream != null ) {", "gzip Output Stream . flush ( ) ; } }"]}
{"ids": "9492", "code": ["public int start ( ) {", "started . compare And Set ( false , true ) ;", "server . start ( ) ;", "return server . get Server Port ( ) ; }"]}
{"ids": "72776", "code": ["public static double angle ( Tuple 3 d a , Tuple 3 d b ) {", "double dx = b . x - a . x ;", "double dy = b . y - a . y ;", "double angle = NUM_ ;", "if ( dx == NUM_ ) {", "if ( dy == NUM_ ) angle = NUM_ ;", "else if ( dy > NUM_ ) angle = Math . PI / NUM_ ;", "else angle = ( Math . PI * NUM_ ) / NUM_ ; }", "else if ( dy == NUM_ ) {", "if ( dx > NUM_ ) angle = NUM_ ;", "else angle = Math . PI ; }", "else {", "if ( dx < NUM_ ) angle = Math . atan ( dy / dx ) + Math . PI ;", "else if ( dy < NUM_ ) angle = Math . atan ( dy / dx ) + ( NUM_ * Math . PI ) ;", "else angle = Math . atan ( dy / dx ) ; }", "return angle ; }"]}
{"ids": "85257", "code": ["public void add String To Table ( byte [ ] old String , byte new String ) {", "int length = old String . length ;", "byte [ ] str = new byte [ length + NUM_ ] ;", "System . arraycopy ( old String , NUM_ , str , NUM_ , length ) ;", "str [ length ] = new String ;", "string Table [ table Index ++ ] = str ;", "if ( table Index == NUM_ ) {", "bits To Get = NUM_ ; }", "else if ( table Index == NUM_ ) {", "bits To Get = NUM_ ; }", "else if ( table Index == NUM_ ) {", "bits To Get = NUM_ ; } }"]}
{"ids": "21072", "code": ["public static boolean identical ( URI first , URI second ) {", "if ( ( first != null ) && ( second != null ) ) {", "return first . equals ( second ) ; }", "return false ; }"]}
{"ids": "56583", "code": ["default < ST > Xor < ST , T > to Xor ( final ST secondary ) {", "final Optional < T > o = to Optional ( ) ;", "return o . is Present ( ) ? Xor . primary ( o . get ( ) ) : Xor . secondary ( secondary ) ; }"]}
{"ids": "87111", "code": ["public void process Invite ( Request Event request Event , Server Transaction server Transaction ) {", "Sip Provider sip Provider = ( Sip Provider ) request Event . get Source ( ) ;", "Request request = request Event . get Request ( ) ;", "logger . info ( STR_ + request ) ;", "timer . schedule ( new Delayed Invite Responses Task ( request Event , sip Provider ) , NUM_ ) ; }"]}
{"ids": "39383", "code": ["protected Instances data From XML ( Instances header ) throws Exception {", "Instances result ;", "Element node ;", "Vector < Element > list ;", "list = get Child Tags ( m Document . get Document Element ( ) , TAG BODY ) ;", "node = list . get ( NUM_ ) ;", "list = get Child Tags ( node , TAG INSTANCES ) ;", "node = list . get ( NUM_ ) ;", "result = create Instances ( header , node ) ;", "return result ; }"]}
{"ids": "84507", "code": ["private static String prepend If Missing ( final String str , final Char Sequence prefix , final boolean ignore Case , final Char Sequence ... prefixes ) {", "if ( str == null || is Empty ( prefix ) || starts With ( str , prefix , ignore Case ) ) {", "return str ; }", "if ( prefixes != null && prefixes . length > NUM_ ) {", "for ( final Char Sequence p : prefixes ) {", "if ( starts With ( str , p , ignore Case ) ) {", "return str ; } } }", "return prefix . to String ( ) + str ; }"]}
{"ids": "23860", "code": ["protected Cache Distribution Advisor create Distribution Advisor ( Internal Region Arguments internal Region Args ) {", "return Cache Distribution Advisor . create Cache Distribution Advisor ( this ) ; }"]}
{"ids": "73597", "code": ["public void add Mouse Listener ( Global Mouse Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "72551", "code": ["private Vector 1 D finite Or Null Point ( final double x ) {", "return Double . is Infinite ( x ) ? null : new Vector 1 D ( x ) ; }"]}
{"ids": "74776", "code": ["public void load PDF ( final File input ) {", "if ( input == null ) {", "return ; }", "scale = NUM_ ;", "PD Ffile = input . get Absolute Path ( ) ;", "file Loc . set Text ( PD Ffile ) ;", "open File ( input , null , false ) ; }"]}
{"ids": "3476", "code": ["public Char Buffer append ( Object obj ) {", "return append ( String . value Of ( obj ) ) ; }"]}
{"ids": "47687", "code": ["private static void check File Validation ( File file ) {", "if ( file == null ) throw new Null Pointer Exception ( STR_ ) ;", "if ( ! file . exists ( ) ) {", "throw new Illegal Argument Exception ( STR_ + file . get Path ( ) + STR_ ) ; }", "file . can Read ( ) ; }"]}
{"ids": "66739", "code": ["public < Result T > Set < Result T > to Set ( Converter < Result T > converter ) {", "try {", "if ( is Empty ( cursor ) ) {", "return Collections . empty Set ( ) ; }", "return populate ( converter , new Hash Set < Result T > ( cursor . get Count ( ) ) ) ; }", "finally {", "close ( ) ; } }"]}
{"ids": "42440", "code": ["public static void stash Disable Assertion Arg ( String arg ) {", "if ( arg == null || arg . equals ( STR_ ) ) {", "assertions Enabled = false ; }", "else {", "disabled Assertion Strings = arg . split ( STR_ ) ; } }"]}
{"ids": "28944", "code": ["public Iterator < Stream > member Iterator ( ) {", "return member Set . iterator ( ) ; }"]}
{"ids": "5393", "code": ["private void clean Mapping ( ) {", "Array List < Integer > to Remove = new Array List < Integer > ( ) ;", "int size = m List Mapping . size ( ) ;", "for ( int i = NUM_ ; i < size ; ++ i ) {", "if ( m List Mapping . key At ( i ) == m List Mapping . value At ( i ) ) {", "to Remove . add ( m List Mapping . key At ( i ) ) ; } }", "size = to Remove . size ( ) ;", "for ( int i = NUM_ ; i < size ; ++ i ) {", "m List Mapping . delete ( to Remove . get ( i ) ) ; } }"]}
{"ids": "80380", "code": ["public static String time Until ( final int seconds , final boolean force Seconds ) {", "final String Builder sbuf = new String Builder ( ) ;", "time Until ( sbuf , seconds , force Seconds ) ;", "return sbuf . to String ( ) ; }"]}
{"ids": "42980", "code": ["public void remove ( T item ) {", "if ( set . remove ( item ) ) {", "fire Contents Changed ( this , NUM_ , get Size ( ) - NUM_ ) ; } }"]}
{"ids": "8160", "code": ["public static void append ( File file , Reader reader , String charset ) throws IO Exception {", "append ( file , reader , charset , false ) ; }"]}
{"ids": "49359", "code": ["void parse Ignored Section ( ) throws IO Exception {", "int depth = NUM_ ;", "in . replace ++ ;", "while ( true ) {", "switch ( ch ) {", "case STR_ :", "if ( ( ch = in . read ( ) ) == STR_ ) {", "if ( ( ch = in . read ( ) ) == STR_ ) {", "ch = in . read ( ) ;", "depth ++ ; } }", "break ;", "case STR_ :", "if ( ( ch = in . read ( ) ) == STR_ ) {", "if ( ( ch = in . read ( ) ) == STR_ ) {", "ch = in . read ( ) ;", "if ( -- depth == NUM_ ) {", "in . replace -- ;", "return ; } } }", "break ;", "case - NUM_ :", "error ( STR_ ) ;", "in . replace -- ;", "return ;", "default :", "ch = in . read ( ) ;", "break ; } } }"]}
{"ids": "72704", "code": ["private synchronized int read Record Length ( ) throws IO Exception {", "if ( in . get Pos ( ) >= end ) {", "return - NUM_ ; }", "int length = in . read Int ( ) ;", "if ( sync != null && length == SYNC ESCAPE ) {", "in . read Fully ( sync Check ) ;", "if ( ! Arrays . equals ( sync , sync Check ) ) {", "throw new IO Exception ( STR_ ) ; }", "sync Seen = true ;", "if ( in . get Pos ( ) >= end ) {", "return - NUM_ ; }", "length = in . read Int ( ) ; }", "else {", "sync Seen = false ; }", "return length ; }"]}
{"ids": "71487", "code": ["public void add Slide ( @ Non Null Fragment fragment ) {", "fragments . add ( fragment ) ;", "if ( is Wizard Mode ) {", "set Off Screen Page Limit ( fragments . size ( ) ) ; }", "m Pager Adapter . notify Data Set Changed ( ) ; }"]}
{"ids": "7850", "code": ["public Default Interval Category Dataset ( Comparable [ ] series Keys , Comparable [ ] category Keys , Number [ ] [ ] starts , Number [ ] [ ] ends ) {", "this . start Data = starts ;", "this . end Data = ends ;", "if ( starts != null && ends != null ) {", "String base Name = STR_ ;", "Resource Bundle resources = Resource Bundle Wrapper . get Bundle ( base Name ) ;", "int series Count = starts . length ;", "if ( series Count != ends . length ) {", "String err Msg = STR_ + STR_ + STR_ + STR_ ;", "throw new Illegal Argument Exception ( err Msg ) ; }", "if ( series Count > NUM_ ) {", "if ( series Keys != null ) {", "if ( series Keys . length != series Count ) {", "throw new Illegal Argument Exception ( STR_ + STR_ ) ; }", "this . series Keys = series Keys ; }", "else {", "String prefix = resources . get String ( STR_ ) + STR_ ;", "this . series Keys = generate Keys ( series Count , prefix ) ; }", "int category Count = starts [ NUM_ ] . length ;", "if ( category Count != ends [ NUM_ ] . length ) {", "String err Msg = STR_ + STR_ + STR_ + STR_ ;", "throw new Illegal Argument Exception ( err Msg ) ; }", "if ( category Keys != null ) {", "if ( category Keys . length != category Count ) {", "throw new Illegal Argument Exception ( STR_ + STR_ ) ; }", "this . category Keys = category Keys ; }", "else {", "String prefix = resources . get String ( STR_ ) + STR_ ;", "this . category Keys = generate Keys ( category Count , prefix ) ; } }", "else {", "this . series Keys = new Comparable [ NUM_ ] ;", "this . category Keys = new Comparable [ NUM_ ] ; } } }"]}
{"ids": "36627", "code": ["public void translate ( double dx , double dy ) {", "if ( ! is Relative ( ) ) {", "x += dx ;", "y += dy ; }", "if ( source Point != null ) {", "source Point . set X ( source Point . get X ( ) + dx ) ;", "source Point . set Y ( source Point . get Y ( ) + dy ) ; }", "if ( target Point != null ) {", "target Point . set X ( target Point . get X ( ) + dx ) ;", "target Point . set Y ( target Point . get Y ( ) + dy ) ; }", "if ( TRANSLATE CONTROL POINTS && points != null ) {", "int count = points . size ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "mx Point pt = ( mx Point ) points . get ( i ) ;", "pt . set X ( pt . get X ( ) + dx ) ;", "pt . set Y ( pt . get Y ( ) + dy ) ; } } }"]}
{"ids": "5945", "code": ["private String anonymize Password ( String password ) {", "if ( password == null ) {", "return STR_ ; }", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < password . length ( ) ; i ++ ) {", "sb . append ( STR_ ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "64494", "code": ["public final void write ( final byte [ ] data ) {", "byte Buffer . put ( data ) ; }"]}
{"ids": "67870", "code": ["public RR Database ( File file ) throws IO Exception {", "name = file . get Name ( ) ;", "rrd File = new RRD File ( file ) ;", "header = new Header ( rrd File ) ;", "nameindex = new Hash Map < String , Integer > ( header . ds Count ) ;", "data Sources = new Array List < Data Source > ( header . ds Count ) ;", "for ( int i = NUM_ ; i < header . ds Count ; i ++ ) {", "Data Source ds = new Data Source ( rrd File ) ;", "nameindex . put ( ds . get Name ( ) , i ) ;", "data Sources . add ( ds ) ; }", "archives = new Array List < Archive > ( header . rra Count ) ;", "for ( int i = NUM_ ; i < header . rra Count ; i ++ ) {", "Archive archive = new Archive ( this ) ;", "archives . add ( archive ) ; }", "long last up = ( long ) rrd File . read Long ( ) * NUM_ ;", "if ( header . get Version As Int ( ) >= Constants . VERSION WITH LAST UPDATE SEC ) {", "long last up usec = rrd File . read Long ( ) ;", "last up += last up usec / NUM_ ; }", "last Update = new Date ( last up ) ;", "for ( int i = NUM_ ; i < header . ds Count ; i ++ ) {", "Data Source ds = data Sources . get ( i ) ;", "ds . load PDP Status Block ( rrd File ) ; }", "for ( int i = NUM_ ; i < header . rra Count ; i ++ ) {", "Archive archive = archives . get ( i ) ;", "archive . load CDP Status Blocks ( rrd File , header . ds Count ) ; }", "for ( int i = NUM_ ; i < header . rra Count ; i ++ ) {", "Archive archive = archives . get ( i ) ;", "archive . load Current Row ( rrd File ) ; }", "for ( int i = NUM_ ; i < header . rra Count ; i ++ ) {", "Archive archive = archives . get ( i ) ;", "archive . load Data ( rrd File , header . ds Count ) ; } }"]}
{"ids": "3061", "code": ["public void close ( ) throws IO Exception {", "input Stream . close ( ) ; }"]}
{"ids": "24586", "code": ["public Address malloc ( int size , int howmany ) {", "int result = next Reservable Address ;", "next Reservable Address += size * howmany ;", "if ( next Reservable Address > ( MEMSIZE + mem Address Start ) ) {", "address Out Of Range = true ;", "return null ; }", "return new Address ( Op . MEM , size , result ) ; }"]}
{"ids": "67690", "code": ["public static String mask Left ( String s , int len , char mask ch ) {", "if ( len <= NUM_ ) {", "return s ; }", "len = Math . min ( len , s . length ( ) ) ;", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "sb . append ( mask ch ) ; }", "sb . append ( s . substring ( len ) ) ;", "return sb . to String ( ) ; }"]}
{"ids": "53189", "code": ["public static double pdf ( double x , double mu , double sigma , double skew ) {", "x = ( x - mu ) / sigma ;", "if ( Math . abs ( skew ) > NUM_ ) {", "x = - Math . log ( NUM_ - skew * x ) / skew ; }", "return Math Util . SQRTHALF * Math . exp ( - NUM_ * x * x ) / sigma / ( NUM_ - skew * x ) ; }"]}
{"ids": "64058", "code": ["public Composer to ( long anim Duration , float x , float y , int alpha , float scale X , float scale Y , float rotation , Ease ease ) {", "m Tween Parameter List . add ( new Tween Parameter ( x , y , alpha , scale X , scale Y , rotation , anim Duration , ease ) ) ;", "return this ; }"]}
{"ids": "33817", "code": ["@ Override public Mem Chunk Holder < Big Data Mem Allocator > create Chunk ( long size , boolean autoreclaim ) {", "Mem Chunk Holder < Big Data Mem Allocator > ret = null ;", "Long addr = m vmasvc . allocate ( m nid , size , true ) ;", "if ( NUM_ == addr && m activegc ) {", "force GC ( ) ;", "addr = m vmasvc . allocate ( m nid , size , true ) ; }", "if ( NUM_ != addr ) {", "ret = new Mem Chunk Holder < Big Data Mem Allocator > ( this , addr , size ) ;", "ret . set Collector ( m chunkcollector ) ;", "if ( autoreclaim ) {", "m chunkcollector . register ( ret ) ; } }", "return ret ; }"]}
{"ids": "70491", "code": ["protected void draw Label ( Canvas canvas , String label Text , Default Renderer renderer , List < Rect F > prev Labels Bounds , int center X , int center Y , float short Radius , float long Radius , float current Angle , float angle , int left , int right , int color , Paint paint , boolean line , boolean display ) {", "if ( renderer . is Show Labels ( ) || display ) {", "paint . set Color ( color ) ;", "double r Angle = Math . to Radians ( NUM_ - ( current Angle + angle / NUM_ ) ) ;", "double sin Value = Math . sin ( r Angle ) ;", "double cos Value = Math . cos ( r Angle ) ;", "int x 1 = Math . round ( center X + ( float ) ( short Radius * sin Value ) ) ;", "int y 1 = Math . round ( center Y + ( float ) ( short Radius * cos Value ) ) ;", "int x 2 = Math . round ( center X + ( float ) ( long Radius * sin Value ) ) ;", "int y 2 = Math . round ( center Y + ( float ) ( long Radius * cos Value ) ) ;", "float size = renderer . get Labels Text Size ( ) ;", "float extra = Math . max ( size / NUM_ , NUM_ ) ;", "paint . set Text Align ( Align . LEFT ) ;", "if ( x 1 > x 2 ) {", "extra = - extra ;", "paint . set Text Align ( Align . RIGHT ) ; }", "float x Label = x 2 + extra ;", "float y Label = y 2 ;", "float width = right - x Label ;", "if ( x 1 > x 2 ) {", "width = x Label - left ; }", "label Text = get Fit Text ( label Text , width , paint ) ;", "float width Label = paint . measure Text ( label Text ) ;", "boolean ok Bounds = false ;", "while ( ! ok Bounds && line ) {", "boolean intersects = false ;", "int length = prev Labels Bounds . size ( ) ;", "for ( int j = NUM_ ; j < length && ! intersects ; j ++ ) {", "Rect F prev Label Bounds = prev Labels Bounds . get ( j ) ;", "if ( prev Label Bounds . intersects ( x Label , y Label , x Label + width Label , y Label + size ) ) {", "intersects = true ;", "y Label = Math . max ( y Label , prev Label Bounds . bottom ) ; } }", "ok Bounds = ! intersects ; }", "if ( line ) {", "y 2 = ( int ) ( y Label - size / NUM_ ) ;", "canvas . draw Line ( x 1 , y 1 , x 2 , y 2 , paint ) ;", "canvas . draw Line ( x 2 , y 2 , x 2 + extra , y 2 , paint ) ; }", "else {", "paint . set Text Align ( Align . CENTER ) ; }", "canvas . draw Text ( label Text , x Label , y Label , paint ) ;", "if ( line ) {", "prev Labels Bounds . add ( new Rect F ( x Label , y Label , x Label + width Label , y Label + size ) ) ; } } }"]}
{"ids": "69806", "code": ["protected void on Page Scrolled ( int position , float offset , int offset Pixels ) {", "if ( m Decor Child Count > NUM_ ) {", "final int scroll X = get Scroll X ( ) ;", "int padding Left = get Padding Left ( ) ;", "int padding Right = get Padding Right ( ) ;", "final int width = get Width ( ) ;", "final int child Count = get Child Count ( ) ;", "for ( int i = NUM_ ; i < child Count ; i ++ ) {", "final View child = get Child At ( i ) ;", "final Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "if ( ! lp . is Decor ) continue ;", "final int hgrav = lp . gravity & Gravity . HORIZONTAL GRAVITY MASK ;", "int child Left = NUM_ ;", "switch ( hgrav ) {", "default :", "child Left = padding Left ;", "break ;", "case Gravity . LEFT :", "child Left = padding Left ;", "padding Left += child . get Width ( ) ;", "break ;", "case Gravity . CENTER HORIZONTAL :", "child Left = Math . max ( ( width - child . get Measured Width ( ) ) / NUM_ , padding Left ) ;", "break ;", "case Gravity . RIGHT :", "child Left = width - padding Right - child . get Measured Width ( ) ;", "padding Right += child . get Measured Width ( ) ;", "break ; }", "child Left += scroll X ;", "final int child Offset = child Left - child . get Left ( ) ;", "if ( child Offset != NUM_ ) {", "child . offset Left And Right ( child Offset ) ; } } }", "if ( m On Page Change Listener != null ) {", "m On Page Change Listener . on Page Scrolled ( position , offset , offset Pixels ) ; }", "if ( m Internal Page Change Listener != null ) {", "m Internal Page Change Listener . on Page Scrolled ( position , offset , offset Pixels ) ; }", "if ( m Page Transformer != null ) {", "final int scroll X = get Scroll X ( ) ;", "final int child Count = get Child Count ( ) ;", "for ( int i = NUM_ ; i < child Count ; i ++ ) {", "final View child = get Child At ( i ) ;", "final Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "if ( lp . is Decor ) continue ;", "final float transform Pos = ( float ) ( child . get Left ( ) - scroll X ) / get Client Width ( ) ;", "m Page Transformer . transform Page ( child , transform Pos ) ; } }", "m Called Super = true ; }"]}
{"ids": "50747", "code": ["public void Draw Semivariogram Surface ( double Radius , boolean An Isotropic ) {", "double [ ] [ ] data = new double [ NUM_ ] [ Bin Surface . length * Bin Surface [ NUM_ ] . length ] ;", "int n = NUM_ ;", "double max = Double . MIN VALUE ;", "for ( int i = NUM_ ; i < Bin Surface . length ; i ++ ) {", "for ( int j = NUM_ ; j < Bin Surface [ i ] . length ; j ++ ) {", "data [ NUM_ ] [ n ] = Bin Surface [ i ] [ j ] . Grid Hor Distance ;", "data [ NUM_ ] [ n ] = Bin Surface [ i ] [ j ] . Grid Ver Distance ;", "if ( ( Math . pow ( data [ NUM_ ] [ n ] , NUM_ ) + Math . pow ( data [ NUM_ ] [ n ] , NUM_ ) ) <= Radius * Radius && ! Double . is Na N ( Bin Surface [ i ] [ j ] . Value ) ) {", "data [ NUM_ ] [ n ] = Bin Surface [ i ] [ j ] . Value ;", "if ( max < data [ NUM_ ] [ n ] ) {", "max = data [ NUM_ ] [ n ] ; } }", "else {", "data [ NUM_ ] [ n ] = - NUM_ ; }", "n ++ ; } }", "Default XYZ Dataset dataset = new Default XYZ Dataset ( ) ;", "dataset . add Series ( STR_ , data ) ;", "Number Axis x Axis = new Number Axis ( ) ;", "x Axis . set Standard Tick Units ( Number Axis . create Integer Tick Units ( ) ) ;", "x Axis . set Lower Margin ( NUM_ ) ;", "x Axis . set Upper Margin ( NUM_ ) ;", "Number Axis y Axis = new Number Axis ( ) ;", "y Axis . set Standard Tick Units ( Number Axis . create Integer Tick Units ( ) ) ;", "y Axis . set Lower Margin ( NUM_ ) ;", "y Axis . set Upper Margin ( NUM_ ) ;", "XY Block Renderer renderer = new XY Block Renderer ( ) ;", "renderer . set Block Width ( Lag Size ) ;", "renderer . set Block Height ( Lag Size ) ;", "renderer . set Block Anchor ( Rectangle Anchor . CENTER ) ;", "Lookup Paint Scale paint Scale = new Lookup Paint Scale ( NUM_ , max , Color . white ) ;", "double color Range = max / NUM_ ;", "paint Scale . add ( NUM_ , Color . blue ) ;", "paint Scale . add ( NUM_ * color Range , Color . green ) ;", "paint Scale . add ( NUM_ * color Range , Color . cyan ) ;", "paint Scale . add ( NUM_ * color Range , Color . yellow ) ;", "paint Scale . add ( NUM_ * color Range , Color . ORANGE ) ;", "paint Scale . add ( NUM_ * color Range , Color . red ) ;", "renderer . set Paint Scale ( paint Scale ) ;", "XY Plot plot = new XY Plot ( dataset , x Axis , y Axis , renderer ) ;", "plot . set Background Paint ( Color . light Gray ) ;", "plot . set Domain Gridlines Visible ( false ) ;", "plot . set Range Gridline Paint ( Color . white ) ;", "if ( An Isotropic ) {", "Combined Range XY Plot combinedrangexyplot = new Combined Range XY Plot ( ) ;", "XY Series series T 1 = new XY Series ( STR_ ) ;", "XY Series Collection Angle Collct = new XY Series Collection ( ) ;", "double bw = Band Width ;", "double r = bw / Math . sin ( Tolerance ) ;", "if ( r > Radius ) {", "bw = Radius * Math . sin ( Tolerance ) ;", "r = Radius ; }", "series T 1 . add ( r * Math . cos ( Angle + Tolerance ) , r * Math . sin ( Angle + Tolerance ) ) ;", "if ( ( double ) Math . round ( Math . sin ( Angle ) * NUM_ ) / NUM_ != NUM_ ) {", "if ( ( double ) Math . round ( Math . cos ( Angle ) * NUM_ ) / NUM_ != NUM_ ) {", "double a = ( NUM_ + Math . pow ( Math . tan ( Angle ) , NUM_ ) ) ;", "double b = NUM_ * bw / Math . sin ( Angle ) * Math . pow ( Math . tan ( Angle ) , NUM_ ) ;", "double c = Math . pow ( Math . tan ( Angle ) , NUM_ ) * Math . pow ( bw / Math . sin ( Angle ) , NUM_ ) - Math . pow ( Radius , NUM_ ) ;", "double x 1 = ( - b + Math . sqrt ( Math . pow ( b , NUM_ ) - NUM_ * a * c ) ) / ( NUM_ * a ) ;", "double y 1 = Math . tan ( Angle ) * ( x 1 + bw / Math . sin ( Angle ) ) ;", "double x 2 = ( - b - Math . sqrt ( Math . pow ( b , NUM_ ) - NUM_ * a * c ) ) / ( NUM_ * a ) ;", "double y 2 = Math . tan ( Angle ) * ( x 2 + bw / Math . sin ( Angle ) ) ;", "double d 1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "double d 2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 2 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 2 ) , NUM_ ) ) ) ;", "if ( d 1 < d 2 ) {", "series T 1 . add ( x 1 , y 1 ) ; }", "else {", "series T 1 . add ( x 2 , y 2 ) ; } }", "else {", "double x 1 = - bw * Math . sin ( Angle ) ;", "double y 1 = Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( x 1 , NUM_ ) ) ;", "double y 2 = - Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( x 1 , NUM_ ) ) ;", "double d 1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "double d 2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 2 ) , NUM_ ) ) ) ;", "if ( d 1 < d 2 ) {", "series T 1 . add ( x 1 , y 1 ) ; }", "else {", "series T 1 . add ( x 1 , y 2 ) ; } } }", "else {", "double y 1 = bw * Math . cos ( Angle ) ;", "double x 1 = Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( y 1 , NUM_ ) ) ;", "double x 2 = - Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( y 1 , NUM_ ) ) ;", "double d 1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "double d 2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 2 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "if ( d 1 < d 2 ) {", "series T 1 . add ( x 1 , y 1 ) ; }", "else {", "series T 1 . add ( x 2 , y 1 ) ; } }", "Angle Collct . add Series ( series T 1 ) ;", "XY Series series T 2 = new XY Series ( STR_ ) ;", "series T 2 . add ( r * Math . cos ( Angle + Tolerance ) , r * Math . sin ( Angle + Tolerance ) ) ;", "series T 2 . add ( NUM_ , NUM_ ) ;", "Angle Collct . add Series ( series T 2 ) ;", "XY Series series T 3 = new XY Series ( STR_ ) ;", "series T 3 . add ( Radius * Math . cos ( Angle ) , Radius * Math . sin ( Angle ) ) ;", "series T 3 . add ( NUM_ , NUM_ ) ;", "Angle Collct . add Series ( series T 3 ) ;", "XY Series series T 4 = new XY Series ( STR_ ) ;", "series T 4 . add ( r * Math . cos ( Angle - Tolerance ) , r * Math . sin ( Angle - Tolerance ) ) ;", "series T 4 . add ( NUM_ , NUM_ ) ;", "Angle Collct . add Series ( series T 4 ) ;", "XY Series series T 5 = new XY Series ( STR_ ) ;", "series T 5 . add ( r * Math . cos ( Angle - Tolerance ) , r * Math . sin ( Angle - Tolerance ) ) ;", "if ( ( double ) Math . round ( Math . sin ( Angle ) * NUM_ ) / NUM_ != NUM_ ) {", "if ( ( double ) Math . round ( Math . cos ( Angle ) * NUM_ ) / NUM_ != NUM_ ) {", "double a = ( NUM_ + Math . pow ( Math . tan ( Angle ) , NUM_ ) ) ;", "double b = - NUM_ * bw / Math . sin ( Angle ) * Math . pow ( Math . tan ( Angle ) , NUM_ ) ;", "double c = Math . pow ( Math . tan ( Angle ) , NUM_ ) * Math . pow ( bw / Math . sin ( Angle ) , NUM_ ) - Math . pow ( Radius , NUM_ ) ;", "double x 1 = ( - b + Math . sqrt ( Math . pow ( b , NUM_ ) - NUM_ * a * c ) ) / ( NUM_ * a ) ;", "double y 1 = Math . tan ( Angle ) * ( x 1 - bw / Math . sin ( Angle ) ) ;", "double x 2 = ( - b - Math . sqrt ( Math . pow ( b , NUM_ ) - NUM_ * a * c ) ) / ( NUM_ * a ) ;", "double y 2 = Math . tan ( Angle ) * ( x 2 - bw / Math . sin ( Angle ) ) ;", "double d 1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "double d 2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 2 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 2 ) , NUM_ ) ) ) ;", "if ( d 1 < d 2 ) {", "series T 5 . add ( x 1 , y 1 ) ; }", "else {", "series T 5 . add ( x 2 , y 2 ) ; } }", "else {", "double x 1 = bw * Math . sin ( Angle ) ;", "double y 1 = Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( x 1 , NUM_ ) ) ;", "double y 2 = - Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( x 1 , NUM_ ) ) ;", "double d 1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "double d 2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 2 ) , NUM_ ) ) ) ;", "if ( d 1 < d 2 ) {", "series T 5 . add ( x 1 , y 1 ) ; }", "else {", "series T 5 . add ( x 1 , y 2 ) ; } } }", "else {", "double y 1 = - bw * Math . cos ( Angle ) ;", "double x 1 = Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( y 1 , NUM_ ) ) ;", "double x 2 = - Math . sqrt ( Math . pow ( Radius , NUM_ ) - Math . pow ( y 1 , NUM_ ) ) ;", "double d 1 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 1 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "double d 2 = Math . sqrt ( ( Math . pow ( ( Radius * Math . cos ( Angle ) - x 2 ) , NUM_ ) ) + ( Math . pow ( ( Radius * Math . sin ( Angle ) - y 1 ) , NUM_ ) ) ) ;", "if ( d 1 < d 2 ) {", "series T 5 . add ( x 1 , y 1 ) ; }", "else {", "series T 5 . add ( x 2 , y 1 ) ; } }", "Angle Collct . add Series ( series T 5 ) ;", "plot . set Dataset ( NUM_ , Angle Collct ) ;", "XY Line And Shape Renderer lineshap Rend = new XY Line And Shape Renderer ( true , false ) ;", "for ( int i = NUM_ ; i < Angle Collct . get Series Count ( ) ; i ++ ) {", "lineshap Rend . set Series Paint ( i , Color . BLACK ) ; }", "plot . set Renderer ( NUM_ , lineshap Rend ) ;", "combinedrangexyplot . add ( plot ) ; }", "plot . set Dataset Rendering Order ( Dataset Rendering Order . FORWARD ) ;", "J Free Chart chart = new J Free Chart ( STR_ , plot ) ;", "chart . remove Legend ( ) ;", "chart . set Background Paint ( Color . white ) ;", "Chart Frame frame = new Chart Frame ( STR_ , chart ) ;", "frame . pack ( ) ;", "frame . set Visible ( true ) ; }"]}
{"ids": "75578", "code": ["public static void over Scroll By ( final Pull To Refresh Base < ? > view , final int delta X , final int scroll X , final int delta Y , final int scroll Y , final int scroll Range , final int fuzzy Threshold , final float scale Factor , final boolean is Touch Event ) {", "final int delta Value , current Scroll Value , scroll Value ;", "switch ( view . get Pull To Refresh Scroll Direction ( ) ) {", "case HORIZONTAL :", "delta Value = delta X ;", "scroll Value = scroll X ;", "current Scroll Value = view . get Scroll X ( ) ;", "break ;", "case VERTICAL :", "default :", "delta Value = delta Y ;", "scroll Value = scroll Y ;", "current Scroll Value = view . get Scroll Y ( ) ;", "break ; }", "if ( view . is Pull To Refresh Over Scroll Enabled ( ) && ! view . is Refreshing ( ) ) {", "final Mode mode = view . get Mode ( ) ;", "if ( mode . permits Pull To Refresh ( ) && ! is Touch Event && delta Value != NUM_ ) {", "final int new Scroll Value = ( delta Value + scroll Value ) ;", "if ( Pull To Refresh Base . DEBUG ) {", "Log . d ( LOG TAG , STR_ + delta X + STR_ + scroll X + STR_ + delta Y + STR_ + scroll Y + STR_ + new Scroll Value + STR_ + scroll Range + STR_ + current Scroll Value ) ; }", "if ( new Scroll Value < ( NUM_ - fuzzy Threshold ) ) {", "if ( mode . show Header Loading Layout ( ) ) {", "if ( current Scroll Value == NUM_ ) {", "view . set State ( State . OVERSCROLLING ) ; }", "view . set Header Scroll ( ( int ) ( scale Factor * ( current Scroll Value + new Scroll Value ) ) ) ; } }", "else if ( new Scroll Value > ( scroll Range + fuzzy Threshold ) ) {", "if ( mode . show Footer Loading Layout ( ) ) {", "if ( current Scroll Value == NUM_ ) {", "view . set State ( State . OVERSCROLLING ) ; }", "view . set Header Scroll ( ( int ) ( scale Factor * ( current Scroll Value + new Scroll Value - scroll Range ) ) ) ; } }", "else if ( Math . abs ( new Scroll Value ) <= fuzzy Threshold || Math . abs ( new Scroll Value - scroll Range ) <= fuzzy Threshold ) {", "view . set State ( State . RESET ) ; } }", "else if ( is Touch Event && State . OVERSCROLLING == view . get State ( ) ) {", "view . set State ( State . RESET ) ; } } }"]}
{"ids": "68983", "code": ["public Single < T Access Token > grant New Access Token ( O Auth 2 Grant < T Access Token > grant ) {", "return grant New Access Token ( grant , Calendar . get Instance ( ) ) ; }"]}
{"ids": "26704", "code": ["public static Number floor ( Number a ) {", "if ( is Floating Point ( a ) ) {", "return Math . floor ( a . double Value ( ) ) ; }", "else {", "return a . long Value ( ) ; } }"]}
{"ids": "39538", "code": ["private void read Defs Element ( IXML Element elem ) throws IO Exception {", "for ( IXML Element child : elem . get Children ( ) ) {", "Figure child Figure = read Element ( child ) ; } }"]}
{"ids": "50956", "code": ["@ Nullable private static Activity Wrapper find Launcher Activity For Device ( @ Not Null List < Activity Wrapper > launchable Activities , @ Not Null I Device device ) {", "if ( device . supports Feature ( I Device . Hardware Feature . TV ) ) {", "return find Leanback Launcher ( launchable Activities ) ; }", "return null ; }"]}
{"ids": "25287", "code": ["public boolean is Query Running ( final Bound Entity song ) {", "synchronized ( m Running Queries ) {", "return m Running Queries . contains ( song ) ; } }"]}
{"ids": "69584", "code": ["public synchronized void flush ( ) throws IO Exception {", "check Not Closed ( ) ;", "trim To Size ( ) ;", "trim To File Count ( ) ;", "journal Writer . flush ( ) ; }"]}
{"ids": "81547", "code": ["private Response < Bitmap > do Parse ( Network Response response ) {", "byte [ ] data = response . data ;", "Bitmap Factory . Options decode Options = new Bitmap Factory . Options ( ) ;", "Bitmap bitmap = null ;", "if ( m Max Width == NUM_ && m Max Height == NUM_ ) {", "decode Options . in Preferred Config = m Decode Config ;", "bitmap = Bitmap Factory . decode Byte Array ( data , NUM_ , data . length , decode Options ) ; }", "else {", "decode Options . in Just Decode Bounds = true ;", "Bitmap Factory . decode Byte Array ( data , NUM_ , data . length , decode Options ) ;", "int actual Width = decode Options . out Width ;", "int actual Height = decode Options . out Height ;", "int desired Width = get Resized Dimension ( m Max Width , m Max Height , actual Width , actual Height ) ;", "int desired Height = get Resized Dimension ( m Max Height , m Max Width , actual Height , actual Width ) ;", "decode Options . in Just Decode Bounds = false ;", "decode Options . in Sample Size = find Best Sample Size ( actual Width , actual Height , desired Width , desired Height ) ;", "Bitmap temp Bitmap = Bitmap Factory . decode Byte Array ( data , NUM_ , data . length , decode Options ) ;", "if ( temp Bitmap != null && ( temp Bitmap . get Width ( ) > desired Width || temp Bitmap . get Height ( ) > desired Height ) ) {", "bitmap = Bitmap . create Scaled Bitmap ( temp Bitmap , desired Width , desired Height , true ) ;", "temp Bitmap . recycle ( ) ; }", "else {", "bitmap = temp Bitmap ; } }", "if ( bitmap == null ) {", "return Response . error ( new Parse Error ( response ) ) ; }", "else {", "return Response . success ( bitmap , Http Header Parser . parse Cache Headers ( response ) ) ; } }"]}
{"ids": "73452", "code": ["private Map < String , Extension File Filter > add Extensions ( J File Chooser chooser ) {", "Map < String , Extension File Filter > filters = new Hash Map < String , Extension File Filter > ( ) ;", "for ( Map . Entry < String , String > entry : exts . entry Set ( ) ) {", "Extension File Filter filter = new Extension File Filter ( entry . get Key ( ) , entry . get Value ( ) ) ;", "filters . put ( entry . get Key ( ) , filter ) ;", "chooser . add Choosable File Filter ( filter ) ; }", "return filters ; }"]}
{"ids": "75555", "code": ["public static String with Node Info ( Accessibility Node Info node Info ) {", "if ( node Info == null ) {", "return null ; }", "return String . format ( STR_ , node Info . get Text ( ) , node Info . get Content Description ( ) ) ; }"]}
{"ids": "8092", "code": ["static int all Parameters And Arguments Match With Default Params ( Parameter [ ] params , Class Node [ ] args ) {", "int dist = NUM_ ;", "Class Node ptype = null ;", "for ( int i = NUM_ , j = NUM_ ; i < params . length ; i ++ ) {", "Parameter param = params [ i ] ;", "Class Node param Type = param . get Type ( ) ;", "Class Node arg = j >= args . length ? null : args [ j ] ;", "if ( arg == null || ! is Assignable To ( arg , param Type ) ) {", "if ( ! param . has Initial Expression ( ) && ( ptype == null || ! ptype . equals ( param Type ) ) ) {", "return - NUM_ ; }", "ptype = null ; }", "else {", "j ++ ;", "if ( ! param Type . equals ( arg ) ) dist += get Distance ( arg , param Type ) ;", "if ( param . has Initial Expression ( ) ) {", "ptype = arg ; }", "else {", "ptype = null ; } } }", "return dist ; }"]}
{"ids": "69647", "code": ["private void expect ( char expected Symbol ) throws Parse Exception {", "if ( ! accept ( expected Symbol ) ) throw new Parse Exception ( STR_ + expected Symbol + STR_ + ( char ) data [ index ] + STR_ , index ) ; }"]}
{"ids": "8962", "code": ["public Contentlet execute Safe First ( ) {", "List < Contentlet > result = execute Safe ( ) ;", "if ( result . size ( ) > NUM_ ) {", "return result . get ( NUM_ ) ; }", "return null ; }"]}
{"ids": "73123", "code": ["public void clear ( ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "for ( Node < E > f = first ; f != null ; ) {", "f . item = null ;", "Node < E > n = f . next ;", "f . prev = null ;", "f . next = null ;", "f = n ; }", "first = last = null ;", "count = NUM_ ;", "not Full . signal All ( ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "76021", "code": ["private static int determine Consecutive Digit Count ( Char Sequence msg , int startpos ) {", "int count = NUM_ ;", "int len = msg . length ( ) ;", "int idx = startpos ;", "if ( idx < len ) {", "char ch = msg . char At ( idx ) ;", "while ( is Digit ( ch ) && idx < len ) {", "count ++ ;", "idx ++ ;", "if ( idx < len ) {", "ch = msg . char At ( idx ) ; } } }", "return count ; }"]}
{"ids": "25918", "code": ["public static boolean is File Exist ( String file Path , File Type file Type , boolean perform File Check ) throws IO Exception {", "file Path = file Path . replace ( STR_ , STR_ ) ;", "switch ( file Type ) {", "case HDFS :", "case VIEWFS :", "Path path = new Path ( file Path ) ;", "File System fs = path . get File System ( configuration ) ;", "if ( perform File Check ) {", "return fs . exists ( path ) && fs . is File ( path ) ; }", "else {", "return fs . exists ( path ) ; }", "case LOCAL :", "default :", "File default File = new File ( file Path ) ;", "if ( perform File Check ) {", "return default File . exists ( ) && default File . is File ( ) ; }", "else {", "return default File . exists ( ) ; } } }"]}
{"ids": "61900", "code": ["private Double Factor pointwise Product ( List < Double Factor > factors ) {", "if ( factors . is Empty ( ) ) {", "Double Factor factor = new Double Factor ( ) ;", "factor . add Entry ( new Assignment ( ) , NUM_ , NUM_ ) ;", "return factor ; }", "else if ( factors . size ( ) == NUM_ ) {", "return factors . get ( NUM_ ) ; }", "Double Factor factor = factors . get ( NUM_ ) ;", "factors . remove ( NUM_ ) ;", "for ( Double Factor f : factors ) {", "Double Factor temp Factor = new Double Factor ( ) ;", "Set < String > shared Vars = new Hash Set < String > ( f . get Variables ( ) ) ;", "shared Vars . retain All ( factor . get Variables ( ) ) ;", "for ( Assignment a : f . get Values ( ) ) {", "double [ ] entry = f . get Entry ( a ) ;", "double prob = entry [ NUM_ ] ;", "double util = entry [ NUM_ ] ;", "for ( Assignment b : factor . get Values ( ) ) {", "if ( b . consistent With ( a , shared Vars ) ) {", "double [ ] entry 2 = factor . get Entry ( b ) ;", "double prob 2 = entry 2 [ NUM_ ] ;", "double util 2 = entry 2 [ NUM_ ] ;", "double product = prob * prob 2 ;", "double sum = util + util 2 ;", "temp Factor . add Entry ( new Assignment ( a , b ) , product , sum ) ; } } }", "factor = temp Factor ; }", "return factor ; }"]}
{"ids": "48691", "code": ["public Class Path ( ) {", "String syscp = System . get Property ( STR_ ) ;", "String envcp = System . get Property ( STR_ ) ;", "if ( envcp == null ) envcp = STR_ ;", "String cp = syscp + File . path Separator + envcp ;", "init ( cp ) ; }"]}
{"ids": "79703", "code": ["protected static boolean uninstall Add On Extension ( Add On add On , Extension extension , Add On Uninstallation Progress Callback callback ) {", "boolean uninstalled Without Errors = true ;", "if ( extension . is Enabled ( ) ) {", "String ext Ui Name = extension . get UI Name ( ) ;", "if ( extension . can Unload ( ) ) {", "logger . debug ( STR_ + extension . get Name ( ) ) ;", "try {", "extension . unload ( ) ;", "Extension Factory . unload Add On Extension ( extension ) ; }", "catch ( Exception e ) {", "logger . error ( STR_ + extension . get Name ( ) + STR_ + add On . get Id ( ) + STR_ , e ) ;", "uninstalled Without Errors = false ; } }", "else {", "logger . debug ( STR_ + extension . get Name ( ) ) ;", "uninstalled Without Errors = false ; }", "callback . extension Removed ( ext Ui Name ) ; }", "add On . remove Loaded Extension ( extension ) ;", "return uninstalled Without Errors ; }"]}
{"ids": "77600", "code": ["private static String pick Random Stats Fields ( String [ ] field Names ) {", "String field Name ;", "do {", "field Name = field Names [ Test Util . next Int ( random ( ) , NUM_ , field Names . length - NUM_ ) ] ; }", "while ( field Name . ends With ( STR_ ) || field Name . ends With ( STR_ ) ) ;", "return field Name ; }"]}
{"ids": "77456", "code": ["@ Override public synchronized void do Delete Child ( Base Solr Resource endpoint , String child Id ) {", "String key = get Ignore Case ( ) ? child Id . to Lower Case ( Locale . ROOT ) : child Id ;", "if ( ! managed Words . contains ( key ) ) throw new Solr Exception ( Error Code . NOT FOUND , String . format ( Locale . ROOT , STR_ , child Id , get Resource Id ( ) ) ) ;", "managed Words . remove ( key ) ;", "store Managed Data ( managed Words ) ;", "log . info ( STR_ , key ) ; }"]}
{"ids": "83167", "code": ["public static final String write Time ( double seconds , final String timeformat , final char separator ) {", "if ( seconds < NUM_ ) {", "if ( seconds == UNDEFINED TIME ) return STR_ ;", "return STR_ + write Time ( Math . abs ( seconds ) , timeformat , separator ) ; }", "int day = ( int ) ( seconds / MIDNIGHT ) ;", "seconds %= MIDNIGHT ;", "if ( TIMEFORMAT EEESSSS . equals ( timeformat ) ) return Week . get Day Name ( day ) + STR_ + Long . to String ( ( long ) ( seconds ) ) ;", "double s = seconds ;", "long h = ( long ) ( s / NUM_ ) ;", "s = s % NUM_ ;", "int m = ( int ) ( s / NUM_ ) ;", "s = s % NUM_ ;", "String Builder str = new String Builder ( NUM_ ) ;", "if ( h < time Elements . length ) {", "str . append ( time Elements [ ( int ) h ] ) ; }", "else {", "str . append ( Long . to String ( h ) ) ; }", "str . append ( separator ) ;", "str . append ( time Elements [ m ] ) ;", "if ( TIMEFORMAT EEEHHMM . equals ( timeformat ) ) {", "return Week . get Day Name ( day ) + STR_ + str . to String ( ) ; }", "if ( TIMEFORMAT EEEHHMMSS . equals ( timeformat ) ) {", "str . append ( separator ) ;", "str . append ( time Elements [ ( int ) s ] ) ;", "return Week . get Day Name ( day ) + STR_ + str . to String ( ) ; }", "if ( TIMEFORMAT HHMMSSDOTSS . equals ( timeformat ) ) {", "str . append ( separator ) ;", "if ( s < NUM_ ) {", "str . append ( STR_ ) ; }", "str . append ( s ) ;", "return Week . get Day Name ( day ) + STR_ + str . to String ( ) ; }", "throw new Illegal Argument Exception ( STR_ + timeformat + STR_ ) ; }"]}
{"ids": "9790", "code": ["public D Export Private Key Type ( J Frame parent ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "set Title ( res . get String ( STR_ ) ) ;", "init Components ( ) ; }"]}
{"ids": "5573", "code": ["public static I Point [ ] copy Of ( I Point [ ] original , int new Length ) {", "I Point [ ] copy = new I Point [ new Length ] ;", "System . arraycopy ( original , NUM_ , copy , NUM_ , Math . min ( original . length , new Length ) ) ;", "return copy ; }"]}
{"ids": "80345", "code": ["public void write Footer ( ) {", "ps . println ( STR_ ) ;", "ps . println ( STR_ ) ;", "ps . println ( STR_ ) ; }"]}
{"ids": "38384", "code": ["protected void save Object ( Object object ) {", "if ( m File Chooser == null ) {", "create File Chooser ( ) ; }", "int return Val = m File Chooser . show Save Dialog ( this ) ;", "if ( return Val == J File Chooser . APPROVE OPTION ) {", "File s File = m File Chooser . get Selected File ( ) ;", "try {", "Object Output Stream oo = new Object Output Stream ( new Buffered Output Stream ( new File Output Stream ( s File ) ) ) ;", "oo . write Object ( object ) ;", "oo . close ( ) ; }", "catch ( Exception ex ) {", "J Option Pane . show Message Dialog ( this , STR_ + s File . get Name ( ) + STR_ + ex . get Message ( ) , STR_ , J Option Pane . ERROR MESSAGE ) ; } } }"]}
{"ids": "78813", "code": ["@ Override public void write ( Data Output out ) throws IO Exception {", "if ( USE HADOOP TEXT ) Text . write String ( out , term ) ;", "else out . write UTF ( term ) ;", "Writable Utils . write V Int ( out , splitno ) ;", "Writable Utils . write V Int ( out , flushno ) ; }"]}
{"ids": "67680", "code": ["public static String strip Non Digits ( String str ) {", "String Buffer result = new String Buffer ( str . length ( ) ) ;", "for ( char candidate : str . to Char Array ( ) ) {", "if ( Character . is Digit ( candidate ) ) {", "result . append ( candidate ) ; } }", "return result . to String ( ) ; }"]}
{"ids": "93", "code": ["protected Collection < Communication Summary Statistics > do Get Communication Summary Statistics ( String tenant Id , Criteria criteria ) {", "String index = client . get Index ( tenant Id ) ;", "Map < String , Communication Summary Statistics > stats = new Hash Map < > ( ) ;", "if ( ! criteria . transaction Wide ( ) ) {", "Criteria txn Wide Criteria = criteria . derive Transaction Wide ( ) ;", "build Communication Summary Statistics ( stats , index , txn Wide Criteria , false ) ; }", "build Communication Summary Statistics ( stats , index , criteria , true ) ;", "return stats . values ( ) ; }"]}
{"ids": "61884", "code": ["public void remove Content ( String variable Id ) {", "if ( ! paused ) {", "cur State . remove From State ( variable Id ) ;", "update ( ) ; }", "else {", "log . info ( STR_ + variable Id ) ; } }"]}
{"ids": "82090", "code": ["public void add Command Listener ( Action Listener l ) {", "if ( global Command Listeners == null ) {", "global Command Listeners = new Event Dispatcher ( ) ; }", "global Command Listeners . add Listener ( l ) ; }"]}
{"ids": "70570", "code": ["public static void complete Background Tasks ( long timeout Millis ) {", "boolean fifo Empty = false ;", "boolean async Threads Completed = false ;", "long abs Timeout = System . current Time Millis ( ) + timeout Millis ;", "while ( System . current Time Millis ( ) < abs Timeout ) {", "synchronized ( fifo ) {", "fifo Empty = fifo . size ( ) == NUM_ ; }", "synchronized ( J Google Analytics Tracker . class ) {", "async Threads Completed = async Threads Running == NUM_ ; }", "if ( fifo Empty && async Threads Completed ) break ;", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "break ; } } }"]}
{"ids": "47272", "code": ["private synchronized void write Object ( java . io . Object Output Stream s ) throws IO Exception {", "if ( actions == null ) get Actions ( ) ;", "s . default Write Object ( ) ; }"]}
{"ids": "45894", "code": ["public static final byte [ ] decode ( Buffered Reader reader ) throws IO Exception , Base 64 Decoding Exception {", "byte [ ] ret Bytes = null ;", "Unsync Byte Array Output Stream baos = null ;", "try {", "baos = new Unsync Byte Array Output Stream ( ) ;", "String line ;", "while ( null != ( line = reader . read Line ( ) ) ) {", "byte [ ] bytes = decode ( line ) ;", "baos . write ( bytes ) ; }", "ret Bytes = baos . to Byte Array ( ) ; }", "finally {", "baos . close ( ) ; }", "return ret Bytes ; }"]}
{"ids": "23488", "code": ["public boolean is Defined In Env ( ) {", "if ( env Vars == null || param Names . length == NUM_ ) {", "return false ; }", "for ( String var : env Vars ) {", "if ( System . getenv ( var ) == null ) {", "return false ; } }", "return true ; }"]}
{"ids": "26589", "code": ["public void apply ( Animator animator , float curr Value , float end Value , float velocity ) {", "apply ( animator , curr Value , end Value , velocity , Math . abs ( end Value - curr Value ) ) ; }"]}
{"ids": "45109", "code": ["public void add Notice ( Parser Notice notice ) {", "notices . add ( notice ) ; }"]}
{"ids": "13524", "code": ["public Event Binder < E > after ( String name ) {", "after . add ( name ) ;", "return this ; }"]}
{"ids": "11402", "code": ["public Point 2 D forward ( Point 2 D llp , Point 2 D pt ) {", "return forward ( llp . get Y ( ) , llp . get X ( ) , pt , false ) ; }"]}
{"ids": "56838", "code": ["public Job Create Request create Job Create Request ( String namespace Cd , String job Name ) {", "List < Parameter > parameters = new Array List < > ( ) ;", "Parameter parameter = new Parameter ( Abstract Service Test . ATTRIBUTE NAME 2 MIXED CASE , Abstract Service Test . ATTRIBUTE VALUE 2 ) ;", "parameters . add ( parameter ) ;", "parameter = new Parameter ( STR_ , null ) ;", "parameters . add ( parameter ) ;", "return create Job Create Request ( namespace Cd , job Name , parameters ) ; }"]}
{"ids": "13556", "code": ["private void load ( ) throws Repository Exception , RDF Parse Exception , IO Exception {", "final Repository Connection conn = repository . get Connection ( ) ;", "String ttl String = MODEL TTL ;", "Input Stream string Input = new Byte Array Input Stream ( ttl String . get Bytes ( ) ) ;", "conn . add ( string Input , STR_ , RDF Format . TURTLE , new Resource [ ] { } ) ;", "ttl String = BUCKET TTL ;", "string Input = new Byte Array Input Stream ( ttl String . get Bytes ( ) ) ;", "conn . add ( string Input , STR_ , RDF Format . TURTLE , new Resource [ ] { } ) ;", "conn . commit ( ) ;", "conn . close ( ) ; }"]}
{"ids": "22150", "code": ["protected Web Resource create Request ( String uri Path ) {", "ensure Initialization ( ) ;", "return client Request Helper . create Request ( client , service URI , URI . create ( uri Path ) ) ; }"]}
{"ids": "53958", "code": ["public static void init ( Context context ) {", "if ( camera Manager == null ) {", "camera Manager = new Camera Manager ( context ) ; } }"]}
{"ids": "70650", "code": ["public void next Table ( ) throws SQL Exception {", "if ( tables . has Next ( ) ) {", "current Table = tables . next ( ) ;", "open Rows ( ) ; } }"]}
{"ids": "9674", "code": ["public D Distinguished Name Chooser ( J Frame parent , String title , X 500 Name distinguished Name , boolean editable ) {", "super ( parent , title , Dialog . Modality Type . DOCUMENT MODAL ) ;", "this . distinguished Name = distinguished Name ;", "this . editable = editable ;", "init Components ( ) ; }"]}
{"ids": "52652", "code": ["public static boolean delete File ( String file Path And Name ) {", "if ( ( file Path And Name == null ) || file Path And Name . is Empty ( ) ) {", "return false ; }", "boolean is Successful Delete = false ;", "try {", "File file To Delete = new File ( file Path And Name ) ;", "is Successful Delete = file To Delete . delete ( ) ; }", "catch ( Exception e ) {", "logger . debug ( e . to String ( ) + System . line Separator ( ) + Stack Trace . get String From Stack Trace ( e ) ) ;", "is Successful Delete = false ; }", "return is Successful Delete ; }"]}
{"ids": "20011", "code": ["public Tungsten Properties IO ( File path ) {", "this ( new Java File IO ( ) , new File Path ( path . get Absolute Path ( ) ) ) ; }"]}
{"ids": "34663", "code": ["private void compute Tab Offset Helper ( Rect F stack Rect ) {", "final boolean portrait = m Current Mode == Orientation . PORTRAIT ;", "final float parent Width = stack Rect . width ( ) ;", "final float parent Height = stack Rect . height ( ) ;", "final float overscroll Percent = compute Overscroll Percent ( ) ;", "final float scroll Offset = Math Utils . clamp ( m Scroll Offset , get Min Scroll ( false ) , get Max Scroll ( false ) ) ;", "final float stack Scale = get Stack Scale ( stack Rect ) ;", "int stacked Count = NUM_ ;", "float min Stacked Position = NUM_ ;", "for ( int i = NUM_ ; i < m Stack Tabs . length ; ++ i ) {", "assert m Stack Tabs [ i ] != null ;", "Stack Tab stack Tab = m Stack Tabs [ i ] ;", "Layout Tab layout Tab = stack Tab . get Layout Tab ( ) ;", "final float stack Scroll Offset = stack Tab . is Dying ( ) ? m Scroll Offset For Dying Tabs : scroll Offset ;", "float screen Scroll Offset = approx Screen ( stack Tab , stack Scroll Offset ) ;", "screen Scroll Offset = Math . max ( min Stacked Position , screen Scroll Offset ) ;", "if ( stacked Count < MAX NUMBER OF STACKED TABS TOP ) {", "final float tilt Xcos = ( float ) Math . cos ( Math . to Radians ( layout Tab . get Tilt X ( ) ) ) ;", "final float tilt Ycos = ( float ) Math . cos ( Math . to Radians ( layout Tab . get Tilt Y ( ) ) ) ;", "float collapse = Math . min ( Math . abs ( tilt Xcos ) , Math . abs ( tilt Ycos ) ) ;", "collapse *= layout Tab . get Alpha ( ) ;", "min Stacked Position += Stack Tab . s Stacked Tab Visible Size * collapse ; }", "stacked Count += stack Tab . is Dying ( ) ? NUM_ : NUM_ ;", "if ( overscroll Percent < NUM_ ) {", "screen Scroll Offset += ( overscroll Percent / OVERSCROLL TOP SLIDE PCTG ) * screen Scroll Offset ;", "screen Scroll Offset = Math . max ( NUM_ , screen Scroll Offset ) ; }", "float x In = ( parent Width - layout Tab . get Scaled Content Width ( ) ) / NUM_ ;", "float y In = ( parent Height - layout Tab . get Scaled Content Height ( ) ) / NUM_ ;", "final float horizontal Padding = ( parent Width - layout Tab . get Original Content Width ( ) * Stack Animation . SCALE AMOUNT * stack Scale ) / NUM_ ;", "final float vertical Padding = ( parent Height - layout Tab . get Original Content Height ( ) * Stack Animation . SCALE AMOUNT * stack Scale ) / NUM_ ;", "if ( portrait ) {", "y In += STACK PORTRAIT Y OFFSET PROPORTION * vertical Padding ;", "y In += screen Scroll Offset ; }", "else {", "if ( Localization Utils . is Layout Rtl ( ) ) {", "x In -= STACK LANDSCAPE START OFFSET PROPORTION * horizontal Padding ;", "x In -= screen Scroll Offset ; }", "else {", "x In += STACK LANDSCAPE START OFFSET PROPORTION * horizontal Padding ;", "x In += screen Scroll Offset ; }", "y In += STACK LANDSCAPE Y OFFSET PROPORTION * vertical Padding ; }", "layout Tab . set X ( x In ) ;", "layout Tab . set Y ( y In ) ; }", "stacked Count = NUM_ ;", "float max Stacked Position = portrait ? m Layout . get Height Minus Top Controls ( ) : m Layout . get Width ( ) ;", "for ( int i = m Stack Tabs . length - NUM_ ; i >= NUM_ ; i -- ) {", "assert m Stack Tabs [ i ] != null ;", "Stack Tab stack Tab = m Stack Tabs [ i ] ;", "Layout Tab layout Tab = stack Tab . get Layout Tab ( ) ;", "if ( stack Tab . is Dying ( ) ) continue ;", "float pos ;", "if ( portrait ) {", "pos = layout Tab . get Y ( ) ;", "layout Tab . set Y ( Math . min ( pos , max Stacked Position ) ) ; }", "else if ( Localization Utils . is Layout Rtl ( ) ) {", "float pos Offset = m Layout . get Width ( ) - layout Tab . get Original Content Width ( ) * Stack Animation . SCALE AMOUNT * stack Scale ;", "pos = - layout Tab . get X ( ) + pos Offset ;", "layout Tab . set X ( - Math . min ( pos , max Stacked Position ) + pos Offset ) ; }", "else {", "pos = layout Tab . get X ( ) ;", "layout Tab . set X ( Math . min ( pos , max Stacked Position ) ) ; }", "if ( pos >= max Stacked Position && stacked Count < MAX NUMBER OF STACKED TABS BOTTOM ) {", "max Stacked Position -= Stack Tab . s Stacked Tab Visible Size ;", "stacked Count ++ ; } }", "final float discard Range = get Discard Range ( ) ;", "for ( int i = NUM_ ; i < m Stack Tabs . length ; ++ i ) {", "assert m Stack Tabs [ i ] != null ;", "Stack Tab stack Tab = m Stack Tabs [ i ] ;", "Layout Tab layout Tab = stack Tab . get Layout Tab ( ) ;", "final float x In = layout Tab . get X ( ) + stack Tab . get X In Stack Offset ( ) ;", "final float y In = layout Tab . get Y ( ) + stack Tab . get Y In Stack Offset ( ) ;", "final float x Out = stack Tab . get X Out Of Stack ( ) ;", "final float y Out = stack Tab . get Y Out Of Stack ( ) ;", "float x = Math Utils . interpolate ( x Out , x In , stack Tab . get X In Stack Influence ( ) ) ;", "float y = Math Utils . interpolate ( y Out , y In , stack Tab . get Y In Stack Influence ( ) ) ;", "if ( stack Tab . get Discard Amount ( ) != NUM_ ) {", "float discard = stack Tab . get Discard Amount ( ) ;", "boolean from Click = stack Tab . get Discard From Click ( ) ;", "float scale = compute Discard Scale ( discard , discard Range , from Click ) ;", "float delta X = stack Tab . get Discard Origin X ( ) - stack Tab . get Layout Tab ( ) . get Original Content Width ( ) / NUM_ ;", "float delta Y = stack Tab . get Discard Origin Y ( ) - stack Tab . get Layout Tab ( ) . get Original Content Height ( ) / NUM_ ;", "float discard Offset = from Click ? NUM_ : discard ;", "if ( portrait ) {", "x += discard Offset + delta X * ( NUM_ - scale ) ;", "y += delta Y * ( NUM_ - scale ) ; }", "else {", "x += delta X * ( NUM_ - scale ) ;", "y += discard Offset + delta Y * ( NUM_ - scale ) ; } }", "layout Tab . set X ( stack Rect . left + x ) ;", "layout Tab . set Y ( stack Rect . top + y ) ; } }"]}
{"ids": "10798", "code": ["@ Override public int compare To ( final Time Instant rhs ) {", "return Integer . compare ( this . time , rhs . time ) ; }"]}
{"ids": "62858", "code": ["private boolean write To Characteristic ( Bluetooth Gatt Characteristic charc , byte [ ] data ) {", "charc . set Value ( data ) ;", "boolean result = m Gatt Client . write Characteristic ( charc ) ;", "if ( result ) {", "Log . d ( TAG , STR_ + charc . get Uuid ( ) + STR_ + Arrays . to String ( data ) ) ; }", "else {", "Log . e ( TAG , STR_ + charc . get Uuid ( ) + STR_ + Arrays . to String ( data ) ) ; }", "return result ; }"]}
{"ids": "1174", "code": ["public static void compose Through Mask ( Raster src , Writable Raster dst , Raster sel ) {", "int x = src . get Min X ( ) ;", "int y = src . get Min Y ( ) ;", "int w = src . get Width ( ) ;", "int h = src . get Height ( ) ;", "int src RGB [ ] = null ;", "int sel RGB [ ] = null ;", "int dst RGB [ ] = null ;", "for ( int i = NUM_ ; i < h ; i ++ ) {", "src RGB = src . get Pixels ( x , y , w , NUM_ , src RGB ) ;", "sel RGB = sel . get Pixels ( x , y , w , NUM_ , sel RGB ) ;", "dst RGB = dst . get Pixels ( x , y , w , NUM_ , dst RGB ) ;", "int k = x ;", "for ( int j = NUM_ ; j < w ; j ++ ) {", "int sr = src RGB [ k ] ;", "int dir = dst RGB [ k ] ;", "int sg = src RGB [ k + NUM_ ] ;", "int dig = dst RGB [ k + NUM_ ] ;", "int sb = src RGB [ k + NUM_ ] ;", "int dib = dst RGB [ k + NUM_ ] ;", "int sa = src RGB [ k + NUM_ ] ;", "int dia = dst RGB [ k + NUM_ ] ;", "float a = sel RGB [ k + NUM_ ] / NUM_ ;", "float ac = NUM_ - a ;", "dst RGB [ k ] = ( int ) ( a * sr + ac * dir ) ;", "dst RGB [ k + NUM_ ] = ( int ) ( a * sg + ac * dig ) ;", "dst RGB [ k + NUM_ ] = ( int ) ( a * sb + ac * dib ) ;", "dst RGB [ k + NUM_ ] = ( int ) ( a * sa + ac * dia ) ;", "k += NUM_ ; }", "dst . set Pixels ( x , y , w , NUM_ , dst RGB ) ;", "y ++ ; } }"]}
{"ids": "83656", "code": ["public char skip To ( char to ) {", "char c ;", "int index = this . my Index ;", "do {", "c = next ( ) ;", "if ( c == NUM_ ) {", "this . my Index = index ;", "return c ; } }", "while ( c != to ) ;", "back ( ) ;", "return c ; }"]}
{"ids": "21163", "code": ["public int check Version Size ( final Software Version version ) {", "URL image Url = get Image URL ( version ) ;", "Http URL Connection url Connection = invoke Request ( image Url ) ;", "return url Connection . get Content Length ( ) ; }"]}
{"ids": "16087", "code": ["private static Date Time Formatter create Formatter For Style ( String style ) {", "if ( style == null || style . length ( ) != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + style ) ; }", "int date Style = select Style ( style . char At ( NUM_ ) ) ;", "int time Style = select Style ( style . char At ( NUM_ ) ) ;", "if ( date Style == NONE && time Style == NONE ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return create Formatter For Style Index ( date Style , time Style ) ; }"]}
{"ids": "56451", "code": ["private Top Docs combine ( Top Docs in , Top Docs resorted , Query Rescore Context ctx ) {", "System . arraycopy ( resorted . score Docs , NUM_ , in . score Docs , NUM_ , resorted . score Docs . length ) ;", "if ( in . score Docs . length > resorted . score Docs . length ) {", "for ( int i = resorted . score Docs . length ; i < in . score Docs . length ; i ++ ) {", "in . score Docs [ i ] . score *= ctx . query Weight ( ) ; }", "Arrays . sort ( in . score Docs , SCORE DOC COMPARATOR ) ; }", "return in ; }"]}
{"ids": "79599", "code": ["private Response < Bitmap > do Parse ( Network Response response ) {", "byte [ ] data = response . data ;", "Bitmap Factory . Options decode Options = new Bitmap Factory . Options ( ) ;", "Bitmap bitmap = null ;", "if ( m Max Width == NUM_ && m Max Height == NUM_ ) {", "decode Options . in Preferred Config = m Decode Config ;", "bitmap = Bitmap Factory . decode Byte Array ( data , NUM_ , data . length , decode Options ) ; }", "else {", "decode Options . in Just Decode Bounds = true ;", "Bitmap Factory . decode Byte Array ( data , NUM_ , data . length , decode Options ) ;", "int actual Width = decode Options . out Width ;", "int actual Height = decode Options . out Height ;", "int desired Width = get Resized Dimension ( m Max Width , m Max Height , actual Width , actual Height , m Scale Type ) ;", "int desired Height = get Resized Dimension ( m Max Height , m Max Width , actual Height , actual Width , m Scale Type ) ;", "decode Options . in Just Decode Bounds = false ;", "decode Options . in Sample Size = find Best Sample Size ( actual Width , actual Height , desired Width , desired Height ) ;", "Bitmap temp Bitmap = Bitmap Factory . decode Byte Array ( data , NUM_ , data . length , decode Options ) ;", "if ( temp Bitmap != null && ( temp Bitmap . get Width ( ) > desired Width || temp Bitmap . get Height ( ) > desired Height ) ) {", "bitmap = Bitmap . create Scaled Bitmap ( temp Bitmap , desired Width , desired Height , true ) ;", "temp Bitmap . recycle ( ) ; }", "else {", "bitmap = temp Bitmap ; } }", "if ( bitmap == null ) {", "return Response . error ( new Parse Error ( response ) ) ; }", "else {", "return Response . success ( bitmap , Http Header Parser . parse Cache Headers ( response ) ) ; } }"]}
{"ids": "61986", "code": ["@ Override public void pause ( boolean to Pause ) {", "is Paused = to Pause ; }"]}
{"ids": "71024", "code": ["public static String replace All ( String original , String old Substring , String new Substring ) {", "return replace ( original , old Substring , new Substring , true ) ; }"]}
{"ids": "28192", "code": ["public long add ( final Add Op add ) throws Exception {", "return add ( add , UUID . random UUID ( ) ) ; }"]}
{"ids": "27005", "code": ["protected boolean is Small ( ) {", "return this . scale * this . text Size In Meters < this . pixel Size In Meters ; }"]}
{"ids": "27835", "code": ["public byte [ ] decompress ( Data Input is ) {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "try {", "while ( true ) {", "byte b = is . read Byte ( ) ;", "if ( b == - NUM_ ) break ;", "baos . write ( b ) ; } }", "catch ( EOF Exception ex ) { }", "catch ( IO Exception ex ) {", "throw new Runtime Exception ( ex ) ; }", "return decompress ( baos . to Byte Array ( ) ) ; }"]}
{"ids": "41098", "code": ["public int borrow Spare Register ( int category ) {", "int result = spare Register Base + borrowed Spare Registers ;", "borrowed Spare Registers += category ;", "register Count = Math . max ( register Count , result + category ) ;", "return result ; }"]}
{"ids": "83575", "code": ["public void True ( boolean expression , Object error Message ) {", "if ( ! expression ) {", "throw new Illegal Argument Exception ( String . value Of ( error Message ) ) ; } }"]}
{"ids": "35245", "code": ["private void process Fields ( final Object component , final Context context , final Context Destroyer context Destroyer ) {", "Class < ? > component Class = component . get Class ( ) ;", "while ( component Class != null && ! component Class . equals ( Object . class ) ) {", "final Field [ ] fields = Class Reflection . get Declared Fields ( component Class ) ;", "if ( fields != null && fields . length > NUM_ ) {", "process Fields ( component , fields , context , context Destroyer ) ; }", "component Class = component Class . get Superclass ( ) ; } }"]}
{"ids": "54893", "code": ["public static String replace All ( String input , String regular Expression , String replacement ) {", "return input . replace All ( regular Expression , replacement ) ; }"]}
{"ids": "80371", "code": ["public static int count Lower Case ( final String text ) {", "int count = NUM_ ;", "for ( final char chr : text . to Char Array ( ) ) {", "if ( Character . is Lower Case ( chr ) ) {", "count ++ ; } }", "return count ; }"]}
{"ids": "14596", "code": ["public void assign Service ( String service Name , Map attributes ) throws Id Repo Exception , SSO Exception {", "Id Services id Services = Id Services Factory . get Data Store Services ( ) ;", "Set O Cs = get Service O Cs ( token , service Name ) ;", "Schema Type stype ;", "Map t Map = new Hash Map ( ) ;", "t Map . put ( service Name , O Cs ) ;", "Set assigned Services = id Services . get Assigned Services ( token , type , name , t Map , org Name , univ DN ) ;", "if ( assigned Services . contains ( service Name ) ) {", "Object args [ ] = { service Name , type . get Name ( ) } ;", "throw new Id Repo Exception ( Id Repo Bundle . BUNDLE NAME , Id Repo Error Code . SERVICE ALREADY ASSIGNED , args ) ; }", "try {", "Service Schema Manager ssm = new Service Schema Manager ( service Name , token ) ;", "Service Schema ss = ssm . get Schema ( type . get Name ( ) ) ;", "if ( ss != null ) {", "Set cos Priority = ( attributes != null ) ? ( Set ) attributes . remove ( COS PRIORITY ) : null ;", "attributes = ss . validate And Inherit Defaults ( attributes , org Name , true ) ;", "if ( cos Priority != null ) {", "attributes . put ( COS PRIORITY , cos Priority ) ; }", "attributes = AM Common Utils . remove Empty Values ( attributes ) ;", "stype = ss . get Service Type ( ) ; }", "else {", "ss = ssm . get Schema ( Schema Type . DYNAMIC ) ;", "if ( ss == null ) {", "Object args [ ] = { service Name } ;", "throw new Id Repo Exception ( Id Repo Bundle . BUNDLE NAME , Id Repo Error Code . UNABLE GET SERVICE SCHEMA , args ) ; }", "if ( attributes == null ) {", "try {", "attributes = get Service Config ( token , service Name , Schema Type . DYNAMIC ) ; }", "catch ( SMS Exception smsex ) {", "Object args [ ] = { service Name , type . get Name ( ) } ;", "throw new Id Repo Exception ( Id Repo Bundle . BUNDLE NAME , STR_ , args ) ; } }", "else {", "attributes = ss . validate And Inherit Defaults ( attributes , org Name , true ) ; }", "attributes = AM Common Utils . remove Empty Values ( attributes ) ;", "stype = Schema Type . DYNAMIC ; }", "attributes = AM Crypt . encrypt Passwords ( attributes , ss ) ; }", "catch ( SMS Exception smse ) {", "Object [ ] args = { service Name } ;", "throw new Id Repo Exception ( Id Repo Bundle . BUNDLE NAME , Id Repo Error Code . SERVICE NOT ASSIGNED , args ) ; }", "attributes . put ( STR_ , O Cs ) ;", "id Services . assign Service ( token , type , name , service Name , stype , attributes , org Name , univ DN ) ; }"]}
{"ids": "4641", "code": ["@ Override protected void create Buttons For Button Bar ( final Composite parent ) {", "for ( final Iterator it = button Descriptions . iterator ( ) ; it . has Next ( ) ; ) {", "final Button Description button Description = ( Button Description ) it . next ( ) ;", "create Button ( parent , button Description . button Id , button Description . button Label , button Description . is Default ) ; }", "if ( include Default Buttons ) {", "super . create Buttons For Button Bar ( parent ) ; }", "hook After Buttons Created ( ) ; }"]}
{"ids": "64253", "code": ["private boolean check File Modifications ( ) throws Exception {", "long dest File Time = dest File . last Modified ( ) ;", "if ( source File . last Modified ( ) > dest File Time ) {", "logger . debug ( STR_ ) ;", "return true ; }", "Properties metadata = restore File Modifications ( meta Data File ) ;", "if ( metadata == null ) {", "return true ; }", "SAX Parser Factory parser Factory = SAX Parser Factory . new Instance ( ) ;", "SAX Parser parser = parser Factory . new SAX Parser ( ) ;", "Time Checker Handler handler = new Time Checker Handler ( base Dir , metadata ) ;", "parser . parse ( source File , handler ) ;", "return handler . is Modified ( ) ; }"]}
{"ids": "42936", "code": ["public static Number mul ( Number a , Number b ) {", "if ( is Floating Point ( a ) || is Floating Point ( b ) ) {", "return a . double Value ( ) * b . double Value ( ) ; }", "else {", "return a . long Value ( ) * b . long Value ( ) ; } }"]}
{"ids": "50768", "code": ["private final int find Widest Axis ( ) {", "int widest = NUM_ ;", "double width = ( max Limit [ NUM_ ] - min Limit [ NUM_ ] ) * get Axis Weight Hint ( NUM_ ) ;", "if ( Double . is Na N ( width ) ) {", "width = NUM_ ; }", "for ( int i = NUM_ ; i < dimensions ; i ++ ) {", "double nwidth = ( max Limit [ i ] - min Limit [ i ] ) * get Axis Weight Hint ( i ) ;", "if ( Double . is Na N ( nwidth ) ) {", "nwidth = NUM_ ; }", "if ( nwidth > width ) {", "widest = i ;", "width = nwidth ; } }", "return widest ; }"]}
{"ids": "72135", "code": ["public void add Sort Key ( int column , Comparator < String > comparator ) {", "sort Keys . add ( column ) ;", "sort Comparators . add ( comparator ) ; }"]}
{"ids": "15208", "code": ["public static String tag Swap ( String content , Map < String , String > tag Swap Map ) {", "for ( Map . Entry < String , String > entry : tag Swap Map . entry Set ( ) ) {", "content = content . replace ( entry . get Key ( ) , entry . get Value ( ) ) ; }", "return content ; }"]}
{"ids": "64636", "code": ["public static Run Stats delegate Get Bucket For Integers ( int buckets ) throws Exception {", "Long start Time = System . current Time Millis ( ) ;", "Primary Index Bucket Generator Impl ibg = new Primary Index Bucket Generator Impl ( Field Data Type . INTEGER , buckets ) ;", "Primary Index Bucket Locator Impl locator = new Primary Index Bucket Locator Impl ( null , null , null , ibg . generate Buckets ( ) , null , null , null , null , null ) ;", "logger . debug ( STR_ ) ;", "Hash Map < Long , List < Object > > hm = new Hash Map < > ( ) ;", "Summary Statistics stats = new Summary Statistics ( ) ;", "for ( int input Int = - NUM_ ; input Int < NUM_ ; input Int ++ ) {", "Long bucket Id = locator . get Bucket ( input Int , Field Data Type . INTEGER ) ;", "calculate ( hm , stats , bucket Id , input Int ) ; }", "Long run Time = System . current Time Millis ( ) - start Time ;", "Run Stats run Stats = new Run Stats ( STR_ , Field Data Type . INTEGER , run Time , stats , hm ) ;", "logger . debug ( run Stats . to String ( ) ) ;", "return run Stats ; }"]}
{"ids": "34556", "code": ["public static long count Substr ( final String value , final String sub Str , final boolean case Sensitive , boolean allow Overlapping ) {", "validate ( value , NULL STRING PREDICATE , NULL STRING MSG SUPPLIER ) ;", "return count Substr ( case Sensitive ? value : value . to Lower Case ( ) , case Sensitive ? sub Str : sub Str . to Lower Case ( ) , allow Overlapping , NUM_ ) ; }"]}
{"ids": "52388", "code": ["private void drop Index ( String index Name ) throws Oracle Exception {", "Prepared Statement stmt = null ;", "if ( index Name == null ) throw SODA Utils . make Exception ( SODA Message . EX ARG CANNOT BE NULL , STR_ ) ;", "index Name = Collection Descriptor . string To Identifier ( index Name ) ;", "String sqltext = drop Index DDL ( index Name ) ;", "try {", "metrics . start Timing ( ) ;", "stmt = conn . prepare Statement ( sqltext ) ;", "stmt . execute ( ) ;", "if ( Oracle Log . is Logging Enabled ( ) ) log . info ( STR_ + index Name ) ;", "stmt . close ( ) ;", "stmt = null ;", "metrics . record DDL ( ) ; }", "catch ( SQL Exception e ) {", "int errcode = e . get Error Code ( ) ;", "if ( ( errcode == ORA SQL OBJECT NOT EXISTS ) || ( errcode == ORA SQL INDEX NOT EXISTS ) ) {", "if ( Oracle Log . is Logging Enabled ( ) ) log . warning ( e . to String ( ) ) ; }", "else {", "if ( Oracle Log . is Logging Enabled ( ) ) log . warning ( e . to String ( ) ) ;", "throw SODA Utils . make Exception With SQL Text ( e , sqltext ) ; } }", "finally {", "for ( String message : SODA Utils . close Cursor ( stmt , null ) ) {", "if ( Oracle Log . is Logging Enabled ( ) ) log . severe ( message ) ; } } }"]}
{"ids": "70373", "code": ["void unlaunch ( ) {", "if ( server != null ) {", "server . die ( ) ;", "server = null ; }", "frame . set Visible ( true ) ;", "client = null ;", "System . gc ( ) ;", "System . run Finalization ( ) ; }"]}
{"ids": "69178", "code": ["private boolean is Outside Doc Elem ( ) {", "return ( null == m doc Frag ) && m elem Stack . size ( ) == NUM_ && ( null == m current Node || m current Node . get Node Type ( ) == Node . DOCUMENT NODE ) ; }"]}
{"ids": "77429", "code": ["public int post Files ( File [ ] files , int start Index In Args , Output Stream out , String type ) {", "reset ( ) ;", "int files Posted = NUM_ ;", "for ( File src File : files ) {", "if ( src File . is Directory ( ) && src File . can Read ( ) ) {", "files Posted += post Directory ( src File , out , type ) ; }", "else if ( src File . is File ( ) && src File . can Read ( ) ) {", "files Posted += post Files ( new File [ ] { src File } , out , type ) ; }", "else {", "File parent = src File . get Parent File ( ) ;", "if ( parent == null ) parent = new File ( STR_ ) ;", "String file Glob = src File . get Name ( ) ;", "Glob File Filter ff = new Glob File Filter ( file Glob , false ) ;", "File [ ] file List = parent . list Files ( ff ) ;", "if ( file List == null || file List . length == NUM_ ) {", "warn ( STR_ + src File ) ;", "continue ; }", "files Posted += post Files ( file List , out , type ) ; } }", "return files Posted ; }"]}
{"ids": "6842", "code": ["private static String unicode 2 html ( final String text , final boolean amp , final boolean html ) {", "if ( text == null ) return null ;", "final String Builder sb = new String Builder ( text . length ( ) * NUM_ / NUM_ ) ;", "int textpos = NUM_ ;", "String r ;", "char c ;", "while ( textpos < text . length ( ) ) {", "c = text . char At ( textpos ) ;", "if ( amp && c == AMP UNICODE ) {", "sb . append ( AMP HTML ) ;", "textpos ++ ;", "continue ; }", "if ( ( r = UNICODE 2 HTML 4 XML . get ( c ) ) != null ) {", "sb . append ( r ) ;", "textpos ++ ;", "continue ; }", "if ( html && ( r = UNICODE 2 HTML 4 HTML . get ( c ) ) != null ) {", "sb . append ( r ) ;", "textpos ++ ;", "continue ; }", "sb . append ( c ) ;", "textpos ++ ; }", "return sb . to String ( ) ; }"]}
{"ids": "25330", "code": ["public String add Playlist ( String playlist Name ) {", "Content Values m Inserts = new Content Values ( ) ;", "m Inserts . put ( Media Store . Audio . Playlists . NAME , playlist Name ) ;", "m Inserts . put ( Media Store . Audio . Playlists . DATE ADDED , System . current Time Millis ( ) ) ;", "m Inserts . put ( Media Store . Audio . Playlists . DATE MODIFIED , System . current Time Millis ( ) ) ;", "Uri uri = m Content Resolver . insert ( Media Store . Audio . Playlists . EXTERNAL CONTENT URI , m Inserts ) ;", "if ( uri == null ) {", "return null ; }", "else {", "String ref = PREFIX PLAYLIST + get Playlist Unique Name ( Long . to String ( Content Uris . parse Id ( uri ) ) ) ;", "Playlist pl = new Playlist ( ref ) ;", "pl . set Name ( playlist Name ) ;", "pl . set Is Loaded ( true ) ;", "m Playlists . put ( ref , pl ) ;", "m Callback . playlist Updated ( pl ) ;", "return ref ; } }"]}
{"ids": "4479", "code": ["public static JSON Array read JSON Array ( final JSON Object json Object , final String key , final boolean required , final boolean not Null ) throws JSON Exception {", "if ( required ) {", "return json Object . get JSON Array ( key ) ; }", "if ( not Null && json Object . is Null ( key ) ) {", "throw new JSON Exception ( String . format ( Locale . US , NULL VALUE FORMAT OBJECT , key ) ) ; }", "JSON Array value = null ;", "if ( ! json Object . is Null ( key ) ) {", "value = json Object . get JSON Array ( key ) ; }", "return value ; }"]}
{"ids": "72700", "code": ["default int copy To ( @ Not Null byte [ ] bytes ) throws Buffer Underflow Exception {", "int len = ( int ) Math . min ( bytes . length , read Remaining ( ) ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) bytes [ i ] = read Byte ( start ( ) + i ) ;", "return len ; }"]}
{"ids": "68980", "code": ["private static float [ ] random Points ( Random random , int waves Count , float width , float shift Coef ) {", "float shift ;", "float [ ] points = new float [ waves Count + NUM_ ] ;", "for ( int i = NUM_ ; i < points . length ; i ++ ) {", "if ( i == NUM_ ) {", "points [ i ] = - NUM_ ; }", "else if ( i == points . length - NUM_ ) {", "points [ i ] = NUM_ ; }", "else {", "shift = random . next Float ( ) * shift Coef * width ;", "shift *= random . next Boolean ( ) ? NUM_ : - NUM_ ;", "points [ i ] = - NUM_ + i * width + shift ; } }", "return points ; }"]}
{"ids": "80196", "code": ["private void add Characters ( final Map < String , RP Object > characters ) {", "for ( Entry < String , RP Object > character : characters . entry Set ( ) ) {", "J Button button = create Character Button ( character . get Key ( ) , character . get Value ( ) ) ;", "character Panel . add ( button ) ; } }"]}
{"ids": "20127", "code": ["public static boolean is Present ( Rule rule ) {", "if ( rule == null ) {", "return false ; }", "return ( ! is Not Set ( rule . get Min Scale Denominator ( ) ) || ! is Not Set ( rule . get Max Scale Denominator ( ) ) ) ; }"]}
{"ids": "28659", "code": ["public long startcode ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "8291", "code": ["public static void consume Process Output ( Process self ) {", "consume Process Output ( self , ( Output Stream ) null , ( Output Stream ) null ) ; }"]}
{"ids": "45887", "code": ["public static void register Default Resolvers ( ) {", "List < Key Resolver > key Resolver List = new Array List < Key Resolver > ( ) ;", "key Resolver List . add ( new Key Resolver ( new RSA Key Value Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new DSA Key Value Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new X 509 Certificate Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new X 509 SKI Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new Retrieval Method Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new X 509 Subject Name Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new X 509 Issuer Serial Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new DER Encoded Key Value Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new Key Info Reference Resolver ( ) ) ) ;", "key Resolver List . add ( new Key Resolver ( new X 509 Digest Resolver ( ) ) ) ;", "resolver Vector . add All ( key Resolver List ) ; }"]}
{"ids": "29676", "code": ["public static final void delete ( String file Name ) {", "File file = new File ( file Name ) ;", "if ( ! file . delete ( ) ) {", "log . error ( STR_ , file ) ; }", "File metadata File = new File ( file Name + METADATA SUFFIX ) ;", "if ( ! metadata File . delete ( ) ) {", "log . error ( STR_ , metadata File ) ; }", "File directory = file . get Parent File ( ) ;", "if ( directory . is Directory ( ) ) {", "directory . delete ( ) ; } }"]}
{"ids": "7906", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( obj == this ) {", "return true ; }", "if ( ! ( obj instanceof Time Period Values Collection ) ) {", "return false ; }", "Time Period Values Collection that = ( Time Period Values Collection ) obj ;", "if ( this . domain Is Points In Time != that . domain Is Points In Time ) {", "return false ; }", "if ( this . x Position != that . x Position ) {", "return false ; }", "if ( ! Object Utilities . equal ( this . data , that . data ) ) {", "return false ; }", "return true ; }"]}
{"ids": "38485", "code": ["public void print ( J Text Pane pane ) {", "set Document ( pane ) ;", "print Dialog ( ) ; }"]}
{"ids": "41965", "code": ["private boolean ensure Scroll Wheel Adjusted ( ) {", "int delta Y = m Initial Scroll Offset - m Current Scroll Offset ;", "if ( delta Y != NUM_ ) {", "m Previous Scroller Y = NUM_ ;", "if ( Math . abs ( delta Y ) > m Selector Element Height / NUM_ ) {", "delta Y += ( delta Y > NUM_ ) ? - m Selector Element Height : m Selector Element Height ; }", "m Adjust Scroller . start Scroll ( NUM_ , NUM_ , NUM_ , delta Y , SELECTOR ADJUSTMENT DURATION MILLIS ) ;", "invalidate ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "86462", "code": ["private String sort Xml ( final String original Xml ) {", "String error Msg = STR_ ;", "xml Processing Instruction Parser . scan For Ignored Sections ( original Xml ) ;", "String xml = xml Processing Instruction Parser . replace Ignored Sections ( ) ;", "insert Xml In Xml Processor ( xml , error Msg ) ;", "xml Processor . sort Xml ( ) ;", "try ( Byte Array Output Stream sorted Xml Output Stream = xml Processor . get Sorted Xml ( ) ) {", "String sorted Xml = sorted Xml Output Stream . to String ( encoding ) ;", "if ( xml Processing Instruction Parser . exists Ignored Sections ( ) ) {", "sorted Xml = xml Processing Instruction Parser . revert Ignored Sections ( sorted Xml ) ; }", "return sorted Xml ; }", "catch ( IO Exception e ) {", "throw new Failure Exception ( error Msg + xml , e ) ; } }"]}
{"ids": "35161", "code": ["void wait For Dictionary Loading ( ) {", "while ( m Updating Dictionary ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) { } } }"]}
{"ids": "35919", "code": ["private void publish Data ( String path , byte [ ] data ) {", "try {", "if ( data != null && data . length > NUM_ ) {", "Byte Array Input Stream bii = new Byte Array Input Stream ( data ) ;", "Object Input Stream ois = new Object Input Stream ( bii ) ;", "Object data Obj = ois . read Object ( ) ;", "Zoo Keeper Data Wrapper wrapper = ( Zoo Keeper Data Wrapper ) ( data Obj ) ;", "Jetstream Message tm = ( Jetstream Message ) wrapper . get Orginal Data ( ) ;", "String tracker Key = create Key ( path , wrapper ) ;", "m change Tracker . put ( tracker Key , wrapper . get Timestamp ( ) ) ;", "try {", "LOGGER . warn ( STR_ + path + STR_ + tracker Key + STR_ + wrapper . get Timestamp ( ) ) ;", "m transport Listener . post Message ( tm , m queue Stats ) ; }", "catch ( Throwable mse ) {", "String Buffer buf = new String Buffer ( ) ;", "buf . append ( STR_ ) ;", "buf . append ( mse . get Localized Message ( ) ) ;", "LOGGER . error ( STR_ + path + buf . to String ( ) , mse ) ; }", "m total Msgs Rcvd . increment ( ) ;", "m msgs Rcvd Per Sec . increment ( ) ; } }", "catch ( Class Not Found Exception e ) {", "LOGGER . error ( STR_ + path , e ) ; }", "catch ( IO Exception e ) {", "LOGGER . error ( STR_ + path , e ) ; } }"]}
{"ids": "27791", "code": ["static public long next Addr ( Random r , Worm Address Manager am ) {", "if ( r . next Int ( NUM_ ) < NUM_ ) return NUM_ ;", "return next Non Zero Addr ( r , am ) ; }"]}
{"ids": "60985", "code": ["public File ( File dir , String name ) {", "this ( dir == null ? null : dir . get Path ( ) , name ) ; }"]}
{"ids": "85831", "code": ["public void remove Drag Listener ( Drag Listener l ) {", "m Listeners . remove ( l ) ; }"]}
{"ids": "50466", "code": ["private High Tide Values find High Tide ( JSON Object response Object ) throws JSON Exception , Parse Exception {", "JSON Array predictions = ( JSON Array ) response Object . get ( STR_ ) ;", "JSON Object last Prediction = null , first High Tide = null , second High Tide = null , low Tide = null ;", "boolean first Tide Done = false ;", "for ( int i = NUM_ ; i < predictions . length ( ) ; i ++ ) {", "JSON Object prediction = ( JSON Object ) predictions . get ( i ) ;", "if ( last Prediction == null ) {", "last Prediction = prediction ;", "continue ; }", "if ( is Tide Increasing ( last Prediction , prediction ) ) {", "if ( ! first Tide Done ) {", "first High Tide = prediction ; }", "else {", "second High Tide = prediction ; } }", "else {", "if ( ! first Tide Done && first High Tide != null ) {", "first Tide Done = true ; }", "else if ( second High Tide != null ) {", "break ; }", "if ( first Tide Done ) {", "low Tide = prediction ; } }", "last Prediction = prediction ; }", "Date Format date Format = new Simple Date Format ( STR_ ) ;", "return new High Tide Values ( Alexa Date Util . get Formatted Time ( date Format . parse ( first High Tide . get String ( STR_ ) ) ) , get Formatted Height ( first High Tide . get String ( STR_ ) ) , Alexa Date Util . get Formatted Time ( date Format . parse ( low Tide . get String ( STR_ ) ) ) , get Formatted Height ( low Tide . get String ( STR_ ) ) , Alexa Date Util . get Formatted Time ( date Format . parse ( second High Tide . get String ( STR_ ) ) ) , get Formatted Height ( second High Tide . get String ( STR_ ) ) ) ; }"]}
{"ids": "9144", "code": ["public static boolean is Ip Address ( String ip Address ) {", "Matcher m 1 = valid IPV 4 Pattern . matcher ( ip Address ) ;", "if ( m 1 . matches ( ) ) {", "return true ; }", "Matcher m 2 = valid IPV 6 Pattern . matcher ( ip Address ) ;", "return m 2 . matches ( ) ; }"]}
{"ids": "38782", "code": ["@ Override public synchronized void remove Training Set Listener ( Training Set Listener tsl ) {", "m training Listeners . remove Element ( tsl ) ; }"]}
{"ids": "39136", "code": ["public void rename Attribute Value ( Attribute att , String val , String name ) {", "int v = att . index Of Value ( val ) ;", "if ( v == - NUM_ ) {", "throw new Illegal Argument Exception ( val + STR_ ) ; }", "rename Attribute Value ( att . index ( ) , v , name ) ; }"]}
{"ids": "65970", "code": ["public boolean is Pdf Attachment ( ) {", "if ( get PO ( ) == null ) return false ;", "return m po . is Pdf Attachment ( ) ; }"]}
{"ids": "51170", "code": ["private int name To Index ( String parameter Name ) throws SQL Exception {", "parameter Metadata . read Metadata From Db If Required ( ) ;", "for ( int i = NUM_ ; i <= parameter Metadata . get Parameter Count ( ) ; i ++ ) {", "String name = parameter Metadata . get Name ( i ) ;", "if ( name != null && name . equals Ignore Case ( parameter Name ) ) {", "return i ; } }", "throw new SQL Exception ( STR_ + parameter Name ) ; }"]}
{"ids": "34461", "code": ["public void sort ( Comparator < ? super Sub Range > comparator ) {", "Collections . sort ( data , comparator ) ; }"]}
{"ids": "79816", "code": ["private void add ( Tree Map < String , Object > map , String key , Object value ) {", "Vector < Object > v = get List ( map , key ) ;", "if ( v == null ) {", "v = new Vector < > ( ) ;", "synchronized ( map ) {", "map . put ( key , v ) ; } }", "if ( ! v . contains ( value ) ) {", "v . add ( value ) ; } }"]}
{"ids": "12500", "code": ["private void blackman Harris 3 s ( int size ) {", "int start = ( window Function . length - size ) / NUM_ ;", "int stop = ( window Function . length + size ) / NUM_ ;", "double scale = NUM_ / ( double ) size / NUM_ ;", "for ( int i = NUM_ ; start < stop ; start ++ , i ++ ) window Function [ i ] = scale * ( NUM_ - NUM_ * Math . cos ( two PI * i / size ) + NUM_ * Math . cos ( NUM_ * two PI * i / size ) ) ; }"]}
{"ids": "47556", "code": ["private Week Fields ( Day Of Week first Day Of Week , int minimal Days In First Week ) {", "Objects . require Non Null ( first Day Of Week , STR_ ) ;", "if ( minimal Days In First Week < NUM_ || minimal Days In First Week > NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . first Day Of Week = first Day Of Week ;", "this . minimal Days = minimal Days In First Week ; }"]}
{"ids": "66596", "code": ["private Result Points And Transitions transitions Between ( Result Point from , Result Point to ) {", "int from X = ( int ) from . get X ( ) ;", "int from Y = ( int ) from . get Y ( ) ;", "int to X = ( int ) to . get X ( ) ;", "int to Y = ( int ) to . get Y ( ) ;", "boolean steep = Math . abs ( to Y - from Y ) > Math . abs ( to X - from X ) ;", "if ( steep ) {", "int temp = from X ;", "from X = from Y ;", "from Y = temp ;", "temp = to X ;", "to X = to Y ;", "to Y = temp ; }", "int dx = Math . abs ( to X - from X ) ;", "int dy = Math . abs ( to Y - from Y ) ;", "int error = - dx > > NUM_ ;", "int ystep = from Y < to Y ? NUM_ : - NUM_ ;", "int xstep = from X < to X ? NUM_ : - NUM_ ;", "int transitions = NUM_ ;", "boolean in Black = image . get ( steep ? from Y : from X , steep ? from X : from Y ) ;", "for ( int x = from X , y = from Y ; x != to X ; x += xstep ) {", "boolean is Black = image . get ( steep ? y : x , steep ? x : y ) ;", "if ( is Black != in Black ) {", "transitions ++ ;", "in Black = is Black ; }", "error += dy ;", "if ( error > NUM_ ) {", "if ( y == to Y ) {", "break ; }", "y += ystep ;", "error -= dx ; } }", "return new Result Points And Transitions ( from , to , transitions ) ; }"]}
{"ids": "55982", "code": ["private void place Groups ( ) {", "start Row ( ) ;", "place Child ( m Close Button , Gravity . END ) ;", "place Group ( m Main Group ) ;", "int custom Group Width = NUM_ ;", "if ( m Custom Group != null ) {", "update Custom Group For Row ( ROW MAIN ) ;", "custom Group Width = get Width With Margins ( m Custom Group ) ; }", "int button Group Width = NUM_ ;", "if ( m Button Group != null ) {", "update Button Group For Row ( ROW MAIN ) ;", "button Group Width = get Width With Margins ( m Button Group ) ; }", "boolean custom Group On Main Row = custom Group Width <= available Width ( ) ;", "boolean button Group On Main Row = custom Group Width + button Group Width <= available Width ( ) ;", "if ( m Custom Group != null ) {", "if ( custom Group On Main Row ) {", "m Custom Group . gravity = ( m Button Group != null && button Group On Main Row ) ? Gravity . START : Gravity . END ; }", "else {", "start Row ( ) ;", "update Custom Group For Row ( ROW OTHER ) ; }", "place Group ( m Custom Group ) ; }", "if ( m Button Group != null ) {", "if ( ! button Group On Main Row ) {", "start Row ( ) ;", "update Button Group For Row ( ROW OTHER ) ;", "if ( m Custom Group == null && m Message Text View != null ) {", "Layout Params lp = ( Layout Params ) m Message Text View . get Layout Params ( ) ;", "int message Bottom = lp . top + m Message Text View . get Measured Height ( ) ;", "m Top = Math . max ( m Top , message Bottom + NUM_ * m Margin ) ; } }", "place Group ( m Button Group ) ;", "if ( m Custom Button != null && ! button Group On Main Row ) {", "Layout Params primary Button LP = ( Layout Params ) m Primary Button . get Layout Params ( ) ;", "Layout Params custom Button LP = ( Layout Params ) m Custom Button . get Layout Params ( ) ;", "Layout Params message LP = ( Layout Params ) m Message View . get Layout Params ( ) ;", "if ( custom Button LP . start >= message LP . start ) {", "custom Button LP . start = message LP . start ; }", "else {", "custom Button LP . start = m Margin ; }", "if ( ! m Button Group . is Stacked ) {", "custom Button LP . top = primary Button LP . top + ( m Primary Button . get Measured Height ( ) - m Custom Button . get Measured Height ( ) ) / NUM_ ; } } }", "start Row ( ) ;", "if ( button Group On Main Row ) {", "int layout Height = m Bottom ;", "for ( int i = NUM_ ; i < get Child Count ( ) ; i ++ ) {", "View child = get Child At ( i ) ;", "int extra Space = layout Height - child . get Measured Height ( ) ;", "Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "lp . top = extra Space / NUM_ ; } } }"]}
{"ids": "78147", "code": ["static Heap Doubles Sketch copy ( Doubles Sketch sketch ) {", "Heap Doubles Sketch qs Copy ;", "qs Copy = Heap Doubles Sketch . new Instance ( sketch . get K ( ) ) ;", "qs Copy . n = sketch . get N ( ) ;", "qs Copy . min Value = sketch . get Min Value ( ) ;", "qs Copy . max Value = sketch . get Max Value ( ) ;", "qs Copy . combined Buffer Item Capacity = sketch . get Combined Buffer Item Capacity ( ) ;", "qs Copy . base Buffer Count = sketch . get Base Buffer Count ( ) ;", "qs Copy . bit Pattern = sketch . get Bit Pattern ( ) ;", "double [ ] comb Buf = sketch . get Combined Buffer ( ) ;", "qs Copy . combined Buffer = Arrays . copy Of ( comb Buf , comb Buf . length ) ;", "return qs Copy ; }"]}
{"ids": "85241", "code": ["public List < Verification OK > verify ( List < Verification OK > result ) throws IO Exception , General Security Exception {", "if ( result == null ) result = new Array List < > ( ) ;", "while ( pkcs 7 != null ) {", "result . add All ( verify Signature ( ) ) ; }", "return result ; }"]}
{"ids": "77374", "code": ["public Schema Field ( String name , Field Type type ) {", "this ( name , type , type . properties , null ) ; }"]}
{"ids": "66092", "code": ["private void create Day Slot ( Array List < M Assignment Slot > list , M Assignment Slot ma ) {", "Timestamp start = ma . get Start Time ( ) ;", "Gregorian Calendar cal Start = new Gregorian Calendar ( ) ;", "cal Start . set Time ( start ) ;", "cal Start . set ( Calendar . HOUR OF DAY , NUM_ ) ;", "cal Start . set ( Calendar . MINUTE , NUM_ ) ;", "cal Start . set ( Calendar . SECOND , NUM_ ) ;", "cal Start . set ( Calendar . MILLISECOND , NUM_ ) ;", "Timestamp end = ma . get End Time ( ) ;", "Gregorian Calendar cal End = new Gregorian Calendar ( ) ;", "cal End . set Time ( end ) ;", "cal End . set ( Calendar . HOUR OF DAY , NUM_ ) ;", "cal End . set ( Calendar . MINUTE , NUM_ ) ;", "cal End . set ( Calendar . SECOND , NUM_ ) ;", "cal End . set ( Calendar . MILLISECOND , NUM_ ) ;", "while ( cal Start . before ( cal End ) ) {", "Timestamp x Start = new Timestamp ( cal Start . get Time In Millis ( ) ) ;", "cal Start . add ( Calendar . DAY OF YEAR , NUM_ ) ;", "Timestamp x End = new Timestamp ( cal Start . get Time In Millis ( ) ) ;", "M Assignment Slot my Ma = new M Assignment Slot ( x Start , x End , ma . get Name ( ) , ma . get Description ( ) , ma . get Status ( ) ) ;", "list . add ( my Ma ) ; } }"]}
{"ids": "29608", "code": ["public boolean is Attachment ( String file Name ) {", "return file Name . starts With ( ENTRY ATTACHMENT ) ; }"]}
{"ids": "35530", "code": ["void subtract Flakes ( int quantity ) {", "for ( int i = NUM_ ; i < quantity ; ++ i ) {", "int index = num Flakes - i - NUM_ ;", "flakes . remove ( index ) ; }", "set Num Flakes ( num Flakes - quantity ) ; }"]}
{"ids": "5455", "code": ["public Optimized ( int n , int s , int t , Iterator < Edge Info > edges ) {", "super ( n , s , t ) ;", "queue = new int [ n ] ;", "QUEUE SIZE = n ;", "capacity = new int [ n ] [ n ] ;", "flow = new int [ n ] [ n ] ;", "previous = new int [ n ] ;", "visited = new int [ n ] ;", "while ( edges . has Next ( ) ) {", "Edge Info ei = edges . next ( ) ;", "capacity [ ei . start ] [ ei . end ] = ei . capacity ; } }"]}
{"ids": "23012", "code": ["public void put ( Buffer buffer ) {", "if ( buffer . get Length ( ) <= NUM_ ) {", "return ; }", "byte [ ] current Rtp Packet Data = ( ( byte [ ] ) buffer . get Data ( ) ) ;", "H 264 Rtp Headers h 264 Rtp Headers = new H 264 Rtp Headers ( current Rtp Packet Data ) ;", "if ( h 264 Rtp Headers . get FUI F ( ) ) {", "return ; }", "if ( reassembled Data == null ) {", "time Stamp = buffer . get Time Stamp ( ) ;", "format = buffer . get Format ( ) ;", "seq Number = buffer . get Sequence Number ( ) ;", "reassembled Data NAL Header = h 264 Rtp Headers . get NAL Header ( ) ;", "reassembled Data = new byte [ Java Packetizer . H 264 MAX RTP PKTS ] [ H 264 FRAME PACKET SIZE ] ;", "reassembled Data Size = new int [ Java Packetizer . H 264 MAX RTP PKTS ] ;", "reassembled Data Has Start = false ;", "reassembled Data Has End = false ; }", "int pos Seq = ( int ) ( buffer . get Sequence Number ( ) & VIDEO DECODER MAX PAYLOADS CHUNKS MASK ) ;", "int payload Start Position = h 264 Rtp Headers . get Header Size ( ) ;", "int payload Length = buffer . get Length ( ) - h 264 Rtp Headers . get Header Size ( ) ;", "if ( h 264 Rtp Headers . get FUI TYPE ( ) == H 264 Rtp Headers . AVC NALTYPE FUA ) {", "reassembled Data Has Start |= ( h 264 Rtp Headers . get FUH S ( ) ) ;", "reassembled Data Has End |= ( h 264 Rtp Headers . get FUH E ( ) ) ;", "reassembled Data Pos Seq Start = ( ( h 264 Rtp Headers . get FUH S ( ) ) ? pos Seq : reassembled Data Pos Seq Start ) ;", "reassembled Data Pos Seq End = ( ( h 264 Rtp Headers . get FUH E ( ) ) ? pos Seq : reassembled Data Pos Seq End ) ; }", "reassembled Data Size [ pos Seq ] = payload Length ;", "reassembled Data Full Size += payload Length ;", "System . arraycopy ( current Rtp Packet Data , payload Start Position , reassembled Data [ pos Seq ] , NUM_ , payload Length ) ;", "video Orientation = buffer . get Video Orientation ( ) ; }"]}
{"ids": "26233", "code": ["public static Map < String , Object > bad Expire Even Processor ( Dispatch Context dctx , Map < String , ? extends Object > context ) {", "Generic Value credit Card = ( Generic Value ) context . get ( STR_ ) ;", "String expire Date = credit Card . get String ( STR_ ) ;", "String last Number Str = expire Date . substring ( expire Date . length ( ) - NUM_ ) ;", "int last Number = Integer . parse Int ( last Number Str ) ;", "if ( last Number % NUM_ == NUM_ ) {", "return always Bad Expire Processor ( dctx , context ) ; }", "else {", "return always Approve Processor ( dctx , context ) ; } }"]}
{"ids": "80045", "code": ["public Expression Type negate ( ) {", "if ( is Negated ( ) ) {", "return new Expression Type ( type String . replace ( SUFFIX NEGATED , STR_ ) ) ; }", "else {", "return new Expression Type ( type String + SUFFIX NEGATED ) ; } }"]}
{"ids": "65690", "code": ["protected void update Path Greyness ( Tree Path ancestor ) {", "boolean value = is Path Check Box ( ancestor ) ;", "Object ancestor Node = ancestor . get Last Path Component ( ) ;", "if ( ! is Path Check Box ( ancestor ) ) {", "add To Check Box Paths Set ( ancestor ) ;", "return ; } }"]}
{"ids": "39452", "code": ["protected Array List < String > use Tokenizer ( String s ) throws Exception {", "String [ ] tokens ;", "Array List < String > result ;", "int i ;", "tokens = Tokenizer . tokenize ( m Tokenizer , new String [ ] { s } ) ;", "result = new Array List < String > ( ) ;", "for ( i = NUM_ ; i < tokens . length ; i ++ ) {", "result . add ( tokens [ i ] ) ; }", "return result ; }"]}
{"ids": "39474", "code": ["public DOM Storable Input Output Format ( DOM Factory factory , String description , String file Extension , String mime Type ) {", "this . factory = factory ;", "this . description = description ;", "this . file Extension = file Extension ;", "this . mime Type = mime Type ;", "try {", "this . data Flavor = new Data Flavor ( mime Type ) ; }", "catch ( Class Not Found Exception ex ) {", "Internal Error error = new Internal Error ( STR_ + mime Type ) ;", "error . init Cause ( ex ) ;", "throw error ; } }"]}
{"ids": "50313", "code": ["default Type Parameter Declaration as Type Parameter ( ) {", "throw new Unsupported Operation Exception ( String . format ( STR_ , this ) ) ; }"]}
{"ids": "65737", "code": ["public void add Column ( String header ) {", "if ( get Model ( ) instanceof Default Table Model ) {", "Default Table Model model = ( Default Table Model ) get Model ( ) ;", "model . add Column ( Util . clean Amp ( header ) ) ; }", "else throw new Illegal Argument Exception ( STR_ ) ; }"]}
{"ids": "74314", "code": ["public void add Move Script ( String pathname ) {", "move Scripts . add ( pathname ) ;", "set Dirty And Fire Property Change ( STR_ , pathname , null ) ; }"]}
{"ids": "6627", "code": ["private void check And Add Resize Handler ( ) {", "Component parent = get Parent ( ) ;", "if ( parent != null && resizable && resize Handler == null ) {", "resize Handler = new Resize Handler ( ) ;", "parent . add Component Listener ( resize Handler ) ; } }"]}
{"ids": "56435", "code": ["public int number Of Owning Shards ( ) {", "int count = NUM_ ;", "for ( Shard Routing shard Entry : this ) {", "if ( shard Entry . state ( ) != Shard Routing State . RELOCATING ) {", "count ++ ; } }", "return count ; }"]}
{"ids": "1837", "code": ["public String convert Binary To Hex String ( byte [ ] bytes ) {", "String Builder builder = new String Builder ( bytes . length * NUM_ ) ;", "for ( byte b : bytes ) {", "int high Bits Int = ( b > > NUM_ ) & NUM_ ;", "int low Bits Int = b & NUM_ ;", "builder . append ( HEX CHARS [ high Bits Int ] ) ;", "builder . append ( HEX CHARS [ low Bits Int ] ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "32983", "code": ["protected static void write Header ( XML Writer writer ) {", "Xml Writer Util . write Comment Line Break ( writer ) ;", "Xml Writer Util . write Comment ( writer , STR_ ) ;", "Date Format date Format = new Simple Date Format ( STR_ ) ;", "Xml Writer Util . write Comment ( writer , STR_ + date Format . format ( new Date ( System . current Time Millis ( ) ) ) ) ;", "Xml Writer Util . write Comment ( writer , STR_ ) ;", "Xml Writer Util . write Comment ( writer , STR_ ) ;", "Xml Writer Util . write Comment Line Break ( writer ) ;", "Xml Writer Util . write Line Break ( writer ) ; }"]}
{"ids": "12871", "code": ["protected void close ( ) {", "try {", "if ( to != null ) to . close ( ) ;", "if ( from != null ) from . close ( ) ; }", "catch ( IO Exception e ) { }", "if ( process != null ) process . destroy ( ) ;", "process = null ;", "to = null ;", "from = null ;", "error Logger = null ; }"]}
{"ids": "49932", "code": ["public void clear Parse Issues ( ) {", "parse Issues . clear ( ) ; }"]}
{"ids": "48826", "code": ["public int validate ( Graphics Configuration gc ) {", "int return Code = Volatile Image . IMAGE OK ;", "boolean lost Surface Tmp = lost Surface ;", "lost Surface = false ;", "if ( is Acceleration Enabled ( ) ) {", "if ( ! is Config Valid ( gc ) ) {", "return Code = Volatile Image . IMAGE INCOMPATIBLE ; }", "else if ( sd Accel == null ) {", "sd Accel = init Accelerated Surface ( ) ;", "if ( sd Accel != null ) {", "sd Current = sd Accel ;", "sd Backup = null ;", "return Code = Volatile Image . IMAGE RESTORED ; }", "else {", "sd Current = get Backup Surface ( ) ; } }", "else if ( sd Accel . is Surface Lost ( ) ) {", "try {", "restore Accelerated Surface ( ) ;", "sd Current = sd Accel ;", "sd Accel . set Surface Lost ( false ) ;", "sd Backup = null ;", "return Code = Volatile Image . IMAGE RESTORED ; }", "catch ( sun . java 2 d . Invalid Pipe Exception e ) {", "sd Current = get Backup Surface ( ) ; } }", "else if ( lost Surface Tmp ) {", "return Code = Volatile Image . IMAGE RESTORED ; } }", "else if ( sd Accel != null ) {", "sd Current = get Backup Surface ( ) ;", "sd Accel = null ;", "return Code = Volatile Image . IMAGE RESTORED ; }", "if ( ( return Code != Volatile Image . IMAGE INCOMPATIBLE ) && ( sd Current != sd Previous ) ) {", "sd Previous = sd Current ;", "return Code = Volatile Image . IMAGE RESTORED ; }", "if ( return Code == Volatile Image . IMAGE RESTORED ) {", "init Contents ( ) ; }", "return return Code ; }"]}
{"ids": "16364", "code": ["private static String unsigned To String ( final int value ) {", "if ( value >= NUM_ ) {", "return Integer . to String ( value ) ; }", "else {", "return Long . to String ( ( ( long ) value ) & NUM_ ) ; } }"]}
{"ids": "22494", "code": ["public Connection Manager ( Connection Manager Configuration configuration ) throws Exception {", "configuration = configuration ;", "if ( configuration == null ) {", "throw new Connection Manager Exception ( STR_ ) ; } }"]}
{"ids": "75103", "code": ["@ Suppress Warnings ( STR_ ) public Pids ( ) {", "Arrays . sort ( PI Ds , pid Comparator ) ; }"]}
{"ids": "6569", "code": ["public void handle Header Column Released ( Point p ) {", "TABLE . set Pressed Column Index ( - NUM_ ) ;", "J Table Header th = TABLE . get Table Header ( ) ;", "int col = th . column At Point ( p ) ;", "if ( col != - NUM_ ) th . repaint ( th . get Header Rect ( col ) ) ; }"]}
{"ids": "50885", "code": ["public void create Devices ( @ Not Null List < Device > devices ) {", "if ( ! init If Necessary ( ) ) {", "return ; }", "for ( Device device : devices ) {", "String device Id Base = device . get Id ( ) ;", "String device Name Base = device . get Display Name ( ) ;", "int i = NUM_ ;", "while ( is User Device ( device ) ) {", "String id = String . format ( Locale . get Default ( ) , STR_ , device Id Base , i ) ;", "String name = String . format ( Locale . get Default ( ) , STR_ , device Name Base , i ) ;", "device = clone Device With New Id And Name ( device , id , name ) ; }", "our Device Manager . add User Device ( device ) ; }", "our Device Manager . save User Devices ( ) ; }"]}
{"ids": "48816", "code": ["public Writable Raster create Compatible Writable Raster ( int w , int h ) {", "if ( w <= NUM_ || h <= NUM_ ) {", "throw new Raster Format Exception ( STR_ + ( ( w <= NUM_ ) ? STR_ : STR_ ) ) ; }", "Sample Model sm = sample Model . create Compatible Sample Model ( w , h ) ;", "return new Short Banded Raster ( sm , new Point ( NUM_ , NUM_ ) ) ; }"]}
{"ids": "12427", "code": ["public void write ( Print Writer writer ) {", "for ( int i = NUM_ ; i < count ; i ++ ) {", "writer . println ( keys [ i ] + STR_ + values [ i ] ) ; }", "writer . flush ( ) ; }"]}
{"ids": "16994", "code": ["@ Worker Thread public synchronized int stop Record ( ) {", "if ( m Recorder == null ) {", "m State = STATE IDLE ;", "return - NUM_ ; }", "int length = - NUM_ ;", "switch ( m State ) {", "case STATE RECORDING :", "try {", "Thread . sleep ( STOP AUDIO RECORD DELAY MILLIS ) ;", "m Recorder . stop ( ) ;", "length = ( int ) ( ( System . current Time Millis ( ) - m Sample Start ) / NUM_ ) ; }", "catch ( Runtime Exception e ) {", "Log . w ( TAG , STR_ + e . get Message ( ) ) ; }", "catch ( Interrupted Exception e ) {", "Log . w ( TAG , STR_ + e . get Message ( ) ) ; }", "case STATE PREPARED :", "case STATE IDLE :", "default :", "try {", "m Recorder . reset ( ) ; }", "catch ( Runtime Exception e ) {", "Log . w ( TAG , STR_ + e . get Message ( ) ) ; }", "m Recorder . release ( ) ;", "m Recorder = null ;", "m State = STATE IDLE ;", "break ; }", "return length ; }"]}
{"ids": "41220", "code": ["public XML Parser ( final Class class To Be Bound , final String [ ] schemas ) throws XML Exception {", "try {", "JAXB Context jc = JAXB Context . new Instance ( class To Be Bound ) ;", "marshaller = jc . create Marshaller ( ) ;", "marshaller . set Schema ( XML Schema Utils . create Schema ( schemas ) ) ;", "unmarshaller = jc . create Unmarshaller ( ) ;", "unmarshaller . set Schema ( XML Schema Utils . create Schema ( schemas ) ) ; }", "catch ( JAXB Exception e ) {", "throw new XML Exception ( STR_ + class To Be Bound , e ) ; } }"]}
{"ids": "77957", "code": ["private void abort ( Throwable t ) {", "throwable = t ; }"]}
{"ids": "19450", "code": ["public static User Impl signup ( Map < String , String [ ] > parameters , String ip , List < Signup Error > errors ) {", "log . entering ( STR_ , STR_ ) ;", "String email = get First ( parameters , STR_ ) ;", "String display Name = get First ( parameters , STR_ ) ;", "String photo Url = get First ( parameters , STR_ ) ;", "String password = get First ( parameters , STR_ ) ;", "String confirm = get First ( parameters , STR_ ) ;", "if ( Strings . is Null Or Empty ( email ) || ! Email Validator . is Valid ( email ) ) {", "errors . add ( Signup Error . INVALID EMAIL ) ; }", "if ( Strings . is Null Or Empty ( display Name ) ) {", "errors . add ( Signup Error . EMPTY DISPLAY NAME ) ; }", "if ( Strings . is Null Or Empty ( password ) ) {", "errors . add ( Signup Error . INVALID PASSWORD ) ; }", "else if ( ! password . equals ( confirm ) ) {", "errors . add ( Signup Error . CONFIRM MISMATCH ) ; }", "else if ( password . length ( ) < NUM_ ) {", "errors . add ( Signup Error . INVALID PASSWORD ) ; }", "Persistence Manager pm = pmf . get Persistence Manager ( ) ;", "try {", "User Record record = find User By Email ( pm , email ) ;", "if ( record != null ) {", "errors . add ( Signup Error . EMAIL REGISTERED ) ; }", "else if ( errors . is Empty ( ) ) {", "log . fine ( STR_ + email ) ;", "record = new User Record ( ) ;", "record . set Email ( email ) ;", "record . set Display Name ( display Name ) ;", "record . set Photo Url ( photo Url ) ;", "record . set Password ( password ) ;", "record . set Tos Accepted ( true ) ;", "record . set Last Big Change Time ( System . current Time Millis ( ) ) ;", "pm . make Persistent ( record ) ;", "User Impl user = create User By Record ( record ) ;", "return user ; } }", "finally {", "pm . close ( ) ; }", "log . exiting ( STR_ , STR_ ) ;", "return null ; }"]}
{"ids": "44663", "code": ["@ Override public final String read Null Terminated Ascii String ( ) {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "byte b ;", "while ( true ) {", "b = read Byte ( ) ;", "if ( b == NUM_ ) {", "break ; }", "baos . write ( b ) ; }", "byte [ ] buf = baos . to Byte Array ( ) ;", "char [ ] chr Buf = new char [ buf . length ] ;", "for ( int x = NUM_ ; x < buf . length ; x ++ ) {", "chr Buf [ x ] = ( char ) buf [ x ] ; }", "return String . value Of ( chr Buf ) ; }"]}
{"ids": "1166", "code": ["private void threshold Blur ( Kernel kernel , int [ ] in Pixels , int [ ] out Pixels , int width , int height , boolean alpha ) {", "float [ ] matrix = kernel . get Kernel Data ( null ) ;", "int cols = kernel . get Width ( ) ;", "int cols 2 = cols / NUM_ ;", "for ( int y = NUM_ ; y < height ; y ++ ) {", "int ioffset = y * width ;", "int out Index = y ;", "for ( int x = NUM_ ; x < width ; x ++ ) {", "float r = NUM_ , g = NUM_ , b = NUM_ , a = NUM_ ;", "int moffset = cols 2 ;", "int rgb 1 = in Pixels [ ioffset + x ] ;", "int a 1 = ( rgb 1 > > NUM_ ) & NUM_ ;", "int r 1 = ( rgb 1 > > NUM_ ) & NUM_ ;", "int g 1 = ( rgb 1 > > NUM_ ) & NUM_ ;", "int b 1 = rgb 1 & NUM_ ;", "float af = NUM_ , rf = NUM_ , gf = NUM_ , bf = NUM_ ;", "for ( int col = - cols 2 ; col <= cols 2 ; col ++ ) {", "float f = matrix [ moffset + col ] ;", "if ( f != NUM_ ) {", "int ix = x + col ;", "if ( ! ( NUM_ <= ix && ix < width ) ) ix = x ;", "int rgb 2 = in Pixels [ ioffset + ix ] ;", "int a 2 = ( rgb 2 > > NUM_ ) & NUM_ ;", "int r 2 = ( rgb 2 > > NUM_ ) & NUM_ ;", "int g 2 = ( rgb 2 > > NUM_ ) & NUM_ ;", "int b 2 = rgb 2 & NUM_ ;", "int d ;", "d = a 1 - a 2 ;", "if ( d >= - threshold && d <= threshold ) {", "a += f * a 2 ;", "af += f ; }", "d = r 1 - r 2 ;", "if ( d >= - threshold && d <= threshold ) {", "r += f * r 2 ;", "rf += f ; }", "d = g 1 - g 2 ;", "if ( d >= - threshold && d <= threshold ) {", "g += f * g 2 ;", "gf += f ; }", "d = b 1 - b 2 ;", "if ( d >= - threshold && d <= threshold ) {", "b += f * b 2 ;", "bf += f ; } } }", "a = af == NUM_ ? a 1 : a / af ;", "r = rf == NUM_ ? r 1 : r / rf ;", "g = gf == NUM_ ? g 1 : g / gf ;", "b = bf == NUM_ ? b 1 : b / bf ;", "int ia = alpha ? Pixel Utils . clamp ( ( int ) ( a + NUM_ ) ) : NUM_ ;", "int ir = Pixel Utils . clamp ( ( int ) ( r + NUM_ ) ) ;", "int ig = Pixel Utils . clamp ( ( int ) ( g + NUM_ ) ) ;", "int ib = Pixel Utils . clamp ( ( int ) ( b + NUM_ ) ) ;", "out Pixels [ out Index ] = ( ia << NUM_ ) | ( ir << NUM_ ) | ( ig << NUM_ ) | ib ;", "out Index += height ; } } }"]}
{"ids": "63490", "code": ["void close Silently ( Server Socket socket ) {", "try {", "socket . close ( ) ; }", "catch ( Exception e ) { } }"]}
{"ids": "36284", "code": ["public Expression Parser Builder with Process ( Process process ) {", "this . process = process ;", "return this ; }"]}
{"ids": "82149", "code": ["void add Associated Component At ( int index , Component cmp ) {", "if ( comps == null ) {", "comps = new Vector ( ) ; }", "comps . insert Element At ( cmp , index ) ; }"]}
{"ids": "31366", "code": ["private static byte [ ] read Class ( final Input Stream is ) throws IO Exception {", "if ( is == null ) {", "throw new IO Exception ( STR_ ) ; }", "byte [ ] b = new byte [ is . available ( ) ] ;", "int len = NUM_ ;", "while ( true ) {", "int n = is . read ( b , len , b . length - len ) ;", "if ( n == - NUM_ ) {", "if ( len < b . length ) {", "byte [ ] c = new byte [ len ] ;", "System . arraycopy ( b , NUM_ , c , NUM_ , len ) ;", "b = c ; }", "return b ; }", "len += n ;", "if ( len == b . length ) {", "int last = is . read ( ) ;", "if ( last < NUM_ ) {", "return b ; }", "byte [ ] c = new byte [ b . length + NUM_ ] ;", "System . arraycopy ( b , NUM_ , c , NUM_ , len ) ;", "c [ len ++ ] = ( byte ) last ;", "b = c ; } } }"]}
{"ids": "19145", "code": ["static String string From Packet ( Datagram Packet packet ) {", "return new String ( packet . get Data ( ) , NUM_ , packet . get Length ( ) ) ; }"]}
{"ids": "17793", "code": ["private String read Attribute Name ( boolean return Lower Case ) {", "skip Whitespace ( ) ;", "int c = find ( ATTRIBUTE NAME TERMINATORS ) ;", "String for Substring = return Lower Case ? input Lower Case : input ;", "String result = pos < c ? for Substring . substring ( pos , c ) : null ;", "pos = c ;", "return result ; }"]}
{"ids": "80367", "code": ["public boolean contains ( final Entity entity ) {", "if ( entity == null ) {", "return false ; }", "final IRP Zone entity Zone = entity . get Zone ( ) ;", "return zone . equals ( entity Zone ) && zone . has ( entity . get ID ( ) ) && shape . contains ( entity . get X ( ) , entity . get Y ( ) ) ; }"]}
{"ids": "65146", "code": ["protected void check Offscreen Image ( Dimension d ) {", "if ( double Buffered ) {", "if ( offscreen == null || offscreen . get Width ( ) != d . width || offscreen . get Height ( ) != d . height ) {", "offscreen = new Buffered Image ( d . width , d . height , Buffered Image . TYPE INT ARGB ) ;", "offscreen G 2 d = offscreen . create Graphics ( ) ; } } }"]}
{"ids": "61248", "code": ["public void warning ( org . xml . sax . SAX Parse Exception e ) throws org . xml . sax . SAX Exception {", "String formatted Msg = e . get Message ( ) ;", "SAX Source Locator locator = get Locator ( ) ;", "Error Listener handler = m stylesheet Processor . get Error Listener ( ) ;", "try {", "handler . warning ( new Transformer Exception ( formatted Msg , locator ) ) ; }", "catch ( Transformer Exception te ) {", "throw new org . xml . sax . SAX Exception ( te ) ; } }"]}
{"ids": "40609", "code": ["public static boolean check Chroot Path ( String zk Host , boolean create ) throws Keeper Exception , Interrupted Exception {", "if ( ! contains Chroot ( zk Host ) ) {", "return true ; }", "log . info ( STR_ ) ;", "String chroot Path = zk Host . substring ( zk Host . index Of ( STR_ ) , zk Host . length ( ) ) ;", "Solr Zk Client tmp Client = new Solr Zk Client ( zk Host . substring ( NUM_ , zk Host . index Of ( STR_ ) ) , NUM_ * NUM_ ) ;", "boolean exists = tmp Client . exists ( chroot Path , true ) ;", "if ( ! exists && create ) {", "tmp Client . make Path ( chroot Path , false , true ) ;", "exists = true ; }", "tmp Client . close ( ) ;", "return exists ; }"]}
{"ids": "60109", "code": ["public void add X Value ( String x Val ) {", "m X Val Average Length = ( m X Val Average Length + x Val . length ( ) ) / NUM_ ;", "m X Vals . add ( x Val ) ; }"]}
{"ids": "79446", "code": ["public long time Since Start ( ) {", "long current Time = System . current Time Millis ( ) ;", "return current Time - start Time ; }"]}
{"ids": "81854", "code": ["public void fill Rect Radial Gradient ( Object graphics , int start Color , int end Color , int x , int y , int width , int height , float relative X , float relative Y , float relative Size ) {", "int center X = ( int ) ( width * ( NUM_ - relative X ) ) ;", "int center Y = ( int ) ( height * ( NUM_ - relative Y ) ) ;", "int size = ( int ) ( Math . min ( width , height ) * relative Size ) ;", "int x 2 = ( int ) ( width / NUM_ - ( size * relative X ) ) ;", "int y 2 = ( int ) ( height / NUM_ - ( size * relative Y ) ) ;", "boolean aa = is Anti Aliased ( graphics ) ;", "set Anti Aliased ( graphics , false ) ;", "if ( cache Radial Gradients ( ) ) {", "Object r = find Cached Gradient ( radial Gradient Cache , start Color , end Color , x , y , width , height , true , center X , center Y , size ) ;", "if ( r != null ) {", "draw Image ( graphics , r , x , y ) ; }", "else {", "r = create Mutable Image ( width , height , NUM_ ) ;", "Object image Graphics = get Native Graphics ( r ) ;", "set Color ( image Graphics , end Color ) ;", "fill Rect ( image Graphics , NUM_ , NUM_ , width , height ) ;", "fill Radial Gradient Impl ( image Graphics , start Color , end Color , x 2 , y 2 , size , size , NUM_ , NUM_ ) ;", "draw Image ( graphics , r , x , y ) ;", "if ( radial Gradient Cache == null ) {", "radial Gradient Cache = new Hashtable ( ) ; }", "store Cached Gradient ( r , radial Gradient Cache , start Color , end Color , x , y , true , center X , center Y , size ) ; } }", "else {", "set Color ( graphics , end Color ) ;", "fill Rect ( graphics , x , y , width , height ) ;", "fill Radial Gradient Impl ( graphics , start Color , end Color , x + x 2 , y + y 2 , size , size , NUM_ , NUM_ ) ; }", "if ( aa ) {", "set Anti Aliased ( graphics , true ) ; } }"]}
{"ids": "47040", "code": ["public Formatter format ( Locale l , String format , Object ... args ) {", "ensure Open ( ) ;", "int last = - NUM_ ;", "int lasto = - NUM_ ;", "Format String [ ] fsa = parse ( format ) ;", "for ( int i = NUM_ ; i < fsa . length ; i ++ ) {", "Format String fs = fsa [ i ] ;", "int index = fs . index ( ) ;", "try {", "switch ( index ) {", "case - NUM_ :", "fs . print ( null , l ) ;", "break ;", "case - NUM_ :", "if ( last < NUM_ || ( args != null && last > args . length - NUM_ ) ) throw new Missing Format Argument Exception ( fs . to String ( ) ) ;", "fs . print ( ( args == null ? null : args [ last ] ) , l ) ;", "break ;", "case NUM_ :", "lasto ++ ;", "last = lasto ;", "if ( args != null && lasto > args . length - NUM_ ) throw new Missing Format Argument Exception ( fs . to String ( ) ) ;", "fs . print ( ( args == null ? null : args [ lasto ] ) , l ) ;", "break ;", "default :", "last = index - NUM_ ;", "if ( args != null && last > args . length - NUM_ ) throw new Missing Format Argument Exception ( fs . to String ( ) ) ;", "fs . print ( ( args == null ? null : args [ last ] ) , l ) ;", "break ; } }", "catch ( IO Exception x ) {", "last Exception = x ; } }", "return this ; }"]}
{"ids": "61402", "code": ["DOM String List Impl ( String [ ] params ) {", "f Strings = new Vector ( ) ;", "if ( params != null ) {", "for ( int i = NUM_ ; i < params . length ; i ++ ) {", "f Strings . add ( params [ i ] ) ; } } }"]}
{"ids": "39596", "code": ["public Instant watermark Hold ( ) {", "long min = Long . MAX VALUE ;", "for ( Instant hold : watermark Holds . values ( ) ) {", "min = Math . min ( min , hold . get Millis ( ) ) ; }", "return new Instant ( min ) ; }"]}
{"ids": "49268", "code": ["@ Override public final boolean is Cap Present ( int cap ) {", "return ( ( ogl Caps . get Caps ( ) & cap ) != NUM_ ) ; }"]}
{"ids": "72146", "code": ["public static < T > Menu Result < T > again ( ) {", "return new Menu Result < > ( Type . AGAIN , Collections . < T > empty List ( ) ) ; }"]}
{"ids": "85718", "code": ["@ Suppress Warnings ( STR_ ) public V put ( K key , V value ) {", "final int hash = key . hash Code ( ) ;", "int index = index Of ( key , hash ) ;", "if ( index >= NUM_ ) {", "index = ( index << NUM_ ) + NUM_ ;", "final V old = ( V ) m Array [ index ] ;", "m Array [ index ] = value ;", "return old ; }", "index = ~ index ;", "if ( m Size >= m Hashes . length ) {", "final int n = m Size >= ( BASE SIZE * NUM_ ) ? ( m Size + ( m Size > > NUM_ ) ) : ( m Size >= BASE SIZE ? ( BASE SIZE * NUM_ ) : BASE SIZE ) ;", "final int [ ] ohashes = m Hashes ;", "final Object [ ] oarray = m Array ;", "alloc Arrays ( n ) ;", "if ( m Hashes . length > NUM_ ) {", "System . arraycopy ( ohashes , NUM_ , m Hashes , NUM_ , ohashes . length ) ;", "System . arraycopy ( oarray , NUM_ , m Array , NUM_ , oarray . length ) ; }", "free Arrays ( ohashes , oarray , m Size ) ; }", "if ( index < m Size ) {", "System . arraycopy ( m Hashes , index , m Hashes , index + NUM_ , m Size - index ) ;", "System . arraycopy ( m Array , index << NUM_ , m Array , ( index + NUM_ ) << NUM_ , ( m Size - index ) << NUM_ ) ; }", "m Hashes [ index ] = hash ;", "m Array [ index << NUM_ ] = key ;", "m Array [ ( index << NUM_ ) + NUM_ ] = value ;", "m Size ++ ;", "return null ; }"]}
{"ids": "42601", "code": ["public Long add New User ( String SID , String username , String userpass , String lastname , String firstname , String email , String additionalname , String street , String zip , String fax , long states id , String town , long language id , String base URL ) throws Axis Fault {", "try {", "Long users id = session Management . check Session ( SID ) ;", "Long user level = user Management . get User Level By ID ( users id ) ;", "if ( auth Level Management . check Web Service Level ( user level ) ) {", "Configuration conf = cfg Management . get Conf Key ( NUM_ , STR_ ) ;", "String j Name time Zone = STR_ ;", "if ( conf != null ) {", "j Name time Zone = conf . get Conf value ( ) ; }", "Long user id = user Management . register User ( username , userpass , lastname , firstname , email , new Date ( ) , street , additionalname , fax , zip , states id , town , language id , STR_ , base URL , true , j Name time Zone ) ;", "if ( user id == null || user id < NUM_ ) {", "return user id ; }", "Users user = user Management . get User By Id ( user id ) ;", "user . set Status ( NUM_ ) ;", "user . set Updatetime ( new Date ( ) ) ;", "user Management . update User ( user ) ;", "return user id ; }", "else {", "return new Long ( - NUM_ ) ; } }", "catch ( Exception err ) {", "log . error ( STR_ , err ) ;", "throw new Axis Fault ( err . get Message ( ) ) ; } }"]}
{"ids": "73094", "code": ["public static void interpreter Only ( Runnable runnable ) {", "runnable . run ( ) ; }"]}
{"ids": "9711", "code": ["public D Add Extension Type ( J Dialog parent , X 509 Extension extensions ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "set Title ( res . get String ( STR_ ) ) ;", "this . extensions = extensions ;", "init Components ( ) ; }"]}
{"ids": "46401", "code": ["private int hash ( Graphics Configuration config , int w , int h , Object ... args ) {", "int hash ;", "hash = ( config != null ? config . hash Code ( ) : NUM_ ) ;", "hash = NUM_ * hash + w ;", "hash = NUM_ * hash + h ;", "hash = NUM_ * hash + Arrays . deep Hash Code ( args ) ;", "return hash ; }"]}
{"ids": "46413", "code": ["protected void paint Text ( Graphics g , Abstract Button b , Rectangle text Rect , String text ) {", "paint Text ( g , ( J Component ) b , text Rect , text ) ; }"]}
{"ids": "37412", "code": ["public static boolean uses Second Operand ( final Integer mnemonic ) {", "return ! mnemonic . equals ( Reil Helpers . OPCODE NOP ) && ! mnemonic . equals ( Reil Helpers . OPCODE BISZ ) && ! mnemonic . equals ( Reil Helpers . OPCODE STR ) && ! mnemonic . equals ( Reil Helpers . OPCODE STM ) && ! mnemonic . equals ( Reil Helpers . OPCODE LDM ) && ! mnemonic . equals ( Reil Helpers . OPCODE JCC ) ; }"]}
{"ids": "27078", "code": ["public Rhythm Group add Overlay ( Rhythm Overlay overlay ) {", "m Overlays . add ( overlay ) ;", "if ( m Current Overlay Index == NO OVERLAY ) {", "select Overlay ( NUM_ ) ; }", "return this ; }"]}
{"ids": "82559", "code": ["public char [ ] to Char Array ( ) {", "char [ ] buffer = new char [ count ] ;", "System . arraycopy ( value , offset , buffer , NUM_ , count ) ;", "return buffer ; }"]}
{"ids": "39829", "code": ["private File [ ] filter Files ( final File [ ] to Filter , final String file Name ) {", "if ( file Name != null && to Filter != null ) {", "final File file As Filter = new File ( file Name ) ;", "for ( File file : to Filter ) {", "if ( file . compare To ( file As Filter ) == NUM_ ) {", "return new File [ ] { file As Filter } ; } }", "return new File [ NUM_ ] ; }", "return to Filter ; }"]}
{"ids": "23083", "code": ["public Fp ( EC Curve curve , EC Field Element x , EC Field Element y ) {", "this ( curve , x , y , false ) ; }"]}
{"ids": "35470", "code": ["private void pull Event ( ) {", "final int new Scroll Value ;", "final int item Dimension ;", "final float initial Motion Value , last Motion Value ;", "switch ( get Pull To Refresh Scroll Direction ( ) ) {", "case HORIZONTAL :", "initial Motion Value = m Initial Motion X ;", "last Motion Value = m Last Motion X ;", "break ;", "case VERTICAL :", "default :", "initial Motion Value = m Initial Motion Y ;", "last Motion Value = m Last Motion Y ;", "break ; }", "switch ( m Current Mode ) {", "case PULL FROM END :", "new Scroll Value = Math . round ( Math . max ( initial Motion Value - last Motion Value , NUM_ ) / FRICTION ) ;", "item Dimension = get Footer Size ( ) ;", "break ;", "case PULL FROM START :", "default :", "new Scroll Value = Math . round ( Math . min ( initial Motion Value - last Motion Value , NUM_ ) / FRICTION ) ;", "item Dimension = get Header Size ( ) ;", "break ; }", "set Header Scroll ( new Scroll Value ) ;", "if ( new Scroll Value != NUM_ && ! is Refreshing ( ) ) {", "float scale = Math . abs ( new Scroll Value ) / ( float ) item Dimension ;", "switch ( m Current Mode ) {", "case PULL FROM END :", "m Footer Layout . on Pull ( scale ) ;", "break ;", "case PULL FROM START :", "default :", "m Header Layout . on Pull ( scale ) ;", "break ; }", "if ( m State != State . PULL TO REFRESH && item Dimension >= Math . abs ( new Scroll Value ) ) {", "set State ( State . PULL TO REFRESH ) ; }", "else if ( ( m State == State . PULL TO REFRESH && item Dimension < Math . abs ( new Scroll Value ) ) || ( m State == State . RESET && item Dimension < Math . abs ( new Scroll Value ) ) ) {", "set State ( State . RELEASE TO REFRESH ) ; } } }"]}
{"ids": "12196", "code": ["private File write Private Key File ( ) throws Git Exception {", "final File key Directory = new File ( root Folder , host ) ;", "if ( ! key Directory . exists ( ) ) {", "key Directory . mkdirs ( ) ; }", "final File key File = new File ( key Directory , DEFAULT KEY NAME ) ;", "try ( File Output Stream fos = new File Output Stream ( key File ) ) {", "fos . write ( ssh Key ) ; }", "catch ( IO Exception e ) {", "LOG . error ( STR_ , e ) ;", "throw new Git Exception ( STR_ ) ; }", "protect Private Key File ( key File ) ;", "return key File ; }"]}
{"ids": "46249", "code": ["protected boolean draw Left Border ( Component c , Graphics g , int x , int y , int width , int height ) {", "if ( super . draw Left Border ( c , g , x , y , width , height ) && frame . is Resizable ( ) ) {", "g . set Color ( get Frame Highlight ( ) ) ;", "int top Y = y + CORNER SIZE ;", "g . draw Line ( x , top Y , x + NUM_ , top Y ) ;", "int bottom Y = height - CORNER SIZE ;", "g . draw Line ( x + NUM_ , bottom Y , x + NUM_ , bottom Y ) ;", "g . set Color ( get Frame Shadow ( ) ) ;", "g . draw Line ( x + NUM_ , top Y - NUM_ , x + NUM_ , top Y - NUM_ ) ;", "g . draw Line ( x + NUM_ , bottom Y - NUM_ , x + NUM_ , bottom Y - NUM_ ) ;", "return true ; }", "return false ; }"]}
{"ids": "72281", "code": ["public static boolean is File Readable ( String file Name ) {", "final File file = new File ( file Name ) ;", "return file . exists ( ) && file . can Read ( ) ; }"]}
{"ids": "51676", "code": ["public static String hinting Size ( Font font ) {", "int instr Size = NUM_ ;", "Loca Table loca Table = Font Utils . get Loca Table ( font ) ;", "Glyph Table glyf Table = Font Utils . get Glyph Table ( font ) ;", "for ( int i = NUM_ ; i < loca Table . num Glyphs ( ) ; i ++ ) {", "Glyph glyph = glyf Table . glyph ( loca Table . glyph Offset ( i ) , loca Table . glyph Length ( i ) ) ;", "instr Size += glyph . instruction Size ( ) ; }", "double percentage = instr Size * NUM_ / glyf Table . header Length ( ) ;", "return String . format ( STR_ , instr Size , two Decimal Places . format ( percentage ) ) ; }"]}
{"ids": "25027", "code": ["public static void premain ( String agent Args , Instrumentation inst ) {", "instrumentation = inst ;", "LOGGER . info ( STR_ ) ;", "check For Correct Setup ( ) ;", "try {", "@ Suppress Warnings ( STR_ ) Inspect It Class Loader class Loader = new Inspect It Class Loader ( new URL [ NUM_ ] ) ;", "Class < ? > agent Clazz = class Loader . load Class ( INSPECTIT AGENT ) ;", "Constructor < ? > constructor = agent Clazz . get Constructor ( File . class ) ;", "Object real Agent = constructor . new Instance ( get Inspect It Agent Jar File Location ( ) ) ;", "Agent . agent = ( I Agent ) real Agent ;", "preload Classes ( ) ;", "LOGGER . info ( STR_ ) ;", "analyze Already Loaded Classes ( ) ;", "inst . add Transformer ( new Java Agent ( ) ) ; }", "catch ( Exception e ) {", "LOGGER . severe ( STR_ ) ;", "e . print Stack Trace ( ) ; } }"]}
{"ids": "2266", "code": ["private static float system Property Value ( String name ) {", "String float String = System . get Property ( name ) ;", "if ( float String == null ) return Float . Na N ;", "try {", "return Float . parse Float ( float String ) ; }", "catch ( Number Format Exception ex ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , name , float String ) ) ; } }"]}
{"ids": "79799", "code": ["@ Zap Api Ignore public boolean is Confirm Remove Proxy Excluded Domain ( ) {", "return this . confirm Remove Proxy Exclude Domain ; }"]}
{"ids": "63684", "code": ["public Float Column ( int nrows , int capacity , float default Value ) {", "super ( float . class , new Float ( default Value ) ) ;", "if ( capacity < nrows ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "m values = new float [ capacity ] ;", "Arrays . fill ( m values , default Value ) ;", "m size = nrows ; }"]}
{"ids": "32221", "code": ["private boolean add Local Key ( Key Cache Object key , Affinity Topology Version top Ver , Collection < Key Cache Object > distributed Keys ) throws Ignite Checked Exception {", "Grid Distributed Cache Entry entry = cctx . colocated ( ) . entry Exx ( key , top Ver , false ) ;", "assert ! entry . detached ( ) ;", "if ( ! cctx . is All ( entry , filter ) ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + entry ) ;", "on Complete ( false , false ) ;", "return false ; }", "Grid Cache Mvcc Candidate cand = add Entry ( entry ) ;", "if ( cand != null && ! cand . reentry ( ) ) distributed Keys . add ( key ) ;", "return in Tx ( ) && cand == null ; }"]}
{"ids": "11837", "code": ["public Spatial Index ( String shp Filename ) throws IO Exception {", "this . shp File Name = shp Filename ;", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + shp Filename + STR_ ) ; } }"]}
{"ids": "34991", "code": ["public int invoke Compiler ( ) {", "List < String > args = get Exec Arguments ( ) ;", "for ( int i = NUM_ ; i < args . size ( ) ; i ++ ) {", "String arg = args . get ( i ) ;", "if ( arg . starts With ( STR_ ) ) {", "String file Name = arg . substring ( NUM_ ) ;", "args . remove ( i ) ;", "output Arguments To File ( file Name , args ) ;", "break ; } }", "return Exec Util . execute ( args . to Array ( new String [ args . size ( ) ] ) , System . out , System . err ) ; }"]}
{"ids": "83374", "code": ["static double four Neighbors IDW ( Spatial Grid sg , double x Coord , double y Coord , double exp ) {", "double x Dif = ( x Coord - sg . get Xmin ( ) ) % sg . get Resolution ( ) ;", "double y Dif = ( y Coord - sg . get Ymin ( ) ) % sg . get Resolution ( ) ;", "if ( x Dif == NUM_ && y Dif == NUM_ ) {", "return sg . get Value ( x Coord , y Coord ) ; }", "double x 1 = x Coord - x Dif ;", "double x 2 = x 1 + sg . get Resolution ( ) ;", "double y 1 = y Coord - y Dif ;", "double y 2 = y 1 + sg . get Resolution ( ) ;", "double d 11 = Math . pow ( distance ( x 1 , y 1 , x Coord , y Coord ) , exp ) ;", "double d 12 = Math . pow ( distance ( x 1 , y 2 , x Coord , y Coord ) , exp ) ;", "double d 21 = Math . pow ( distance ( x 2 , y 1 , x Coord , y Coord ) , exp ) ;", "double d 22 = Math . pow ( distance ( x 2 , y 2 , x Coord , y Coord ) , exp ) ;", "if ( x Coord == sg . get Xmax ( ) ) {", "return ( sg . get Value ( x 1 , y 1 ) / d 11 + sg . get Value ( x 1 , y 2 ) / d 12 ) / ( NUM_ / d 11 + NUM_ / d 12 ) ; }", "if ( y Coord == sg . get Ymax ( ) ) {", "return ( sg . get Value ( x 1 , y 1 ) / d 11 + sg . get Value ( x 2 , y 1 ) / d 21 ) / ( NUM_ / d 11 + NUM_ / d 21 ) ; }", "return ( sg . get Value ( x 1 , y 1 ) / d 11 + sg . get Value ( x 1 , y 2 ) / d 12 + sg . get Value ( x 2 , y 1 ) / d 21 + sg . get Value ( x 2 , y 2 ) / d 22 ) / ( NUM_ / d 11 + NUM_ / d 12 + NUM_ / d 21 + NUM_ / d 22 ) ; }"]}
{"ids": "31804", "code": ["public Pojo Value Field ( Property Descriptor desc ) {", "super ( desc ) ; }"]}
{"ids": "67351", "code": ["public Url Filter Rule ( String rule Text ) {", "super ( rule Text ) ;", "String url Rule Text = rule Text ;", "if ( String Utils . starts With ( url Rule Text , MASK WHITE LIST ) ) {", "url Rule Text = url Rule Text . substring ( MASK WHITE LIST . length ( ) ) ;", "white List Rule = true ; }", "int options Index = String Utils . last Index Of ( url Rule Text , OPTIONS DELIMITER ) ;", "if ( options Index > - NUM_ ) {", "url Rule Text = url Rule Text . substring ( NUM_ , options Index ) ; }", "url Rule Text = to Punycode ( url Rule Text ) ;", "boolean regex Rule = url Rule Text . starts With ( MASK REGEX RULE ) && url Rule Text . ends With ( MASK REGEX RULE ) ;", "if ( ! regex Rule ) {", "shortcut = find Shortcut ( url Rule Text ) ; } }"]}
{"ids": "35184", "code": ["public static boolean is Drm Convert Needed ( String mimetype ) {", "return MIMETYPE DRM MESSAGE . equals ( mimetype ) ; }"]}
{"ids": "53996", "code": ["public static String pad ( String original , int length , char pad Char ) {", "if ( original . length ( ) >= length ) return original ;", "String Builder sb = new String Builder ( original ) ;", "while ( sb . length ( ) < length ) {", "sb . append ( pad Char ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "11508", "code": ["public void property Change ( Property Change Event evt ) {", "String prop Name = evt . get Property Name ( ) ;", "if ( prop Name == Map Bean . Cursor Property ) {", "fallback Map Bean Cursor = ( ( Cursor ) evt . get New Value ( ) ) ; }", "else {", "if ( prop Name == Mouse Delegator . Active Mode Property ) {", "Map Mouse Mode mmm = ( Map Mouse Mode ) evt . get New Value ( ) ;", "set Reset Cursor ( mmm . get Mode Cursor ( ) ) ; }", "else if ( prop Name == Map Bean . Layers Property ) {", "reset For Layers ( ( Layer [ ] ) evt . get New Value ( ) , ( Layer [ ] ) evt . get Old Value ( ) ) ; }", "else if ( prop Name != Map Bean . Projection Property ) {", "return ; }", "set All Labels ( fudge String ) ; }", "init Tool Tip ( ) ; }"]}
{"ids": "29983", "code": ["private void check For Night ( final Zoned Date Time TIME ) {", "int hour = TIME . get Hour ( ) ;", "int minute = TIME . get Minute ( ) ;", "if ( NUM_ <= hour && minute >= NUM_ && hour <= NUM_ && minute <= NUM_ || NUM_ <= hour && minute <= NUM_ && hour <= NUM_ && minute <= NUM_ ) {", "if ( is Night Mode ( ) ) return ;", "set Night Mode ( true ) ; }", "else {", "if ( ! is Night Mode ( ) ) return ;", "set Night Mode ( false ) ; } }"]}
{"ids": "7512", "code": ["@ Override public int calculate Offset Y ( ) {", "return - ( int ) ( Math . sin ( this . angle ) * this . distance ) - this . shadow Size ; }"]}
{"ids": "72493", "code": ["private double [ ] concatenate Samples ( final double [ ] x , final double [ ] y ) {", "final double [ ] z = new double [ x . length + y . length ] ;", "System . arraycopy ( x , NUM_ , z , NUM_ , x . length ) ;", "System . arraycopy ( y , NUM_ , z , x . length , y . length ) ;", "return z ; }"]}
{"ids": "81879", "code": ["@ Override public void draw Series ( Canvas canvas , Paint paint , List < Float > points , XY Series Renderer renderer , float y Axis Value , int series Index , int start Index ) {", "paint . set Color ( renderer . get Color ( ) ) ;", "final float stroke = paint . get Stroke Width ( ) ;", "if ( renderer . is Fill Points ( ) ) {", "paint . set Style ( Style . FILL ) ; }", "else {", "paint . set Stroke Width ( renderer . get Point Stroke Width ( ) ) ;", "paint . set Style ( Style . STROKE ) ; }", "int length = points . size ( ) ;", "Point Style ps = renderer . get Point Style ( ) ;", "if ( ps == Point Style . X ) {", "paint . set Stroke Width ( renderer . get Point Stroke Width ( ) ) ;", "for ( int i = NUM_ ; i < length ; i += NUM_ ) {", "draw X ( canvas , paint , points . get ( i ) , points . get ( i + NUM_ ) ) ; } }", "else {", "if ( ps == Point Style . CIRCLE ) {", "for ( int i = NUM_ ; i < length ; i += NUM_ ) {", "draw Circle ( canvas , paint , points . get ( i ) , points . get ( i + NUM_ ) ) ; } }", "else {", "if ( ps == Point Style . TRIANGLE ) {", "float [ ] path = new float [ NUM_ ] ;", "for ( int i = NUM_ ; i < length ; i += NUM_ ) {", "draw Triangle ( canvas , paint , path , points . get ( i ) , points . get ( i + NUM_ ) ) ; } }", "else {", "if ( ps == Point Style . SQUARE ) {", "for ( int i = NUM_ ; i < length ; i += NUM_ ) {", "draw Square ( canvas , paint , points . get ( i ) , points . get ( i + NUM_ ) ) ; } }", "else {", "if ( ps == Point Style . DIAMOND ) {", "float [ ] path = new float [ NUM_ ] ;", "for ( int i = NUM_ ; i < length ; i += NUM_ ) {", "draw Diamond ( canvas , paint , path , points . get ( i ) , points . get ( i + NUM_ ) ) ; } }", "else {", "if ( ps == Point Style . POINT ) {", "for ( int i = NUM_ ; i < length ; i += NUM_ ) {", "canvas . draw Point ( points . get ( i ) , points . get ( i + NUM_ ) , paint ) ; } } } } } } }", "paint . set Stroke Width ( stroke ) ; }"]}
{"ids": "18123", "code": ["public final void push Sub Context List ( Sub Context List iter ) {", "m axes Iterator Stack . push ( iter ) ; }"]}
{"ids": "43294", "code": ["public String handle Word ( String a Word ) {", "Matcher m = condition Pattern . matcher ( a Word ) ;", "if ( m != null && m . matches ( ) ) {", "if ( type . equals ( Affix Type . PREFIX ) ) {", "return handle Prefix ( a Word ) ; }", "else if ( type . equals ( Affix Type . SUFFIX ) ) {", "return handle Suffix ( a Word ) ; } }", "return null ; }"]}
{"ids": "40572", "code": ["public static void round ( Calendar c , String unit ) {", "Integer uu = CALENDAR UNITS . get ( unit ) ;", "if ( null == uu ) {", "throw new Illegal Argument Exception ( STR_ + unit ) ; }", "int u = uu . int Value ( ) ;", "switch ( u ) {", "case Calendar . YEAR :", "c . clear ( Calendar . MONTH ) ;", "case Calendar . MONTH :", "c . clear ( Calendar . DAY OF MONTH ) ;", "c . clear ( Calendar . DAY OF WEEK ) ;", "c . clear ( Calendar . DAY OF WEEK IN MONTH ) ;", "c . clear ( Calendar . DAY OF YEAR ) ;", "c . clear ( Calendar . WEEK OF MONTH ) ;", "c . clear ( Calendar . WEEK OF YEAR ) ;", "case Calendar . DATE :", "c . clear ( Calendar . HOUR OF DAY ) ;", "c . clear ( Calendar . HOUR ) ;", "c . clear ( Calendar . AM PM ) ;", "case Calendar . HOUR OF DAY :", "c . clear ( Calendar . MINUTE ) ;", "case Calendar . MINUTE :", "c . clear ( Calendar . SECOND ) ;", "case Calendar . SECOND :", "c . clear ( Calendar . MILLISECOND ) ;", "break ;", "default :", "throw new Illegal State Exception ( STR_ + u + STR_ + unit ) ; } }"]}
{"ids": "65442", "code": ["private static final char [ ] grow Buffer ( char [ ] dest , int index , int size ) {", "char [ ] copy = new char [ size ] ;", "if ( index > NUM_ ) {", "System . arraycopy ( dest , NUM_ , copy , NUM_ , index ) ; }", "return copy ; }"]}
{"ids": "40540", "code": ["public boolean sync ( ) {", "if ( ulog == null ) {", "return false ; }", "log . info ( msg ( ) + STR_ + replicas + STR_ + n Updates ) ;", "if ( ! ( ulog . get State ( ) == Update Log . State . ACTIVE || ulog . get State ( ) == Update Log . State . REPLAYING ) ) {", "log . error ( msg ( ) + STR_ + ulog ) ; }", "if ( debug ) {", "if ( starting Versions != null ) {", "log . debug ( msg ( ) + STR_ + starting Versions . size ( ) + STR_ + starting Versions ) ; } }", "for ( String replica : replicas ) {", "request Versions ( replica ) ; }", "recent Updates = ulog . get Recent Updates ( ) ;", "try {", "our Updates = recent Updates . get Versions ( n Updates ) ; }", "finally {", "recent Updates . close ( ) ; }", "Collections . sort ( our Updates , abs Comparator ) ;", "if ( starting Versions != null ) {", "if ( starting Versions . size ( ) == NUM_ ) {", "log . warn ( STR_ ) ;", "return false ; }", "Collections . sort ( starting Versions , abs Comparator ) ;", "our Low Threshold = percentile ( starting Versions , NUM_ ) ;", "our High Threshold = percentile ( starting Versions , NUM_ ) ;", "long smallest New Update = Math . abs ( our Updates . get ( our Updates . size ( ) - NUM_ ) ) ;", "if ( Math . abs ( starting Versions . get ( NUM_ ) ) < smallest New Update ) {", "log . warn ( msg ( ) + STR_ ) ;", "return false ; }", "List < Long > new List = new Array List < > ( our Updates ) ;", "for ( Long ver : starting Versions ) {", "if ( Math . abs ( ver ) < smallest New Update ) {", "new List . add ( ver ) ; } }", "our Updates = new List ; }", "else {", "if ( our Updates . size ( ) > NUM_ ) {", "our Low Threshold = percentile ( our Updates , NUM_ ) ;", "our High Threshold = percentile ( our Updates , NUM_ ) ; }", "else {", "log . info ( msg ( ) + STR_ ) ;", "return false ; } }", "our Update Set = new Hash Set < > ( our Updates ) ;", "requested Update Set = new Hash Set < > ( our Updates ) ;", "for ( ; ; ) {", "Shard Response srsp = shard Handler . take Completed Or Error ( ) ;", "if ( srsp == null ) break ;", "boolean success = handle Response ( srsp ) ;", "if ( ! success ) {", "log . info ( msg ( ) + STR_ ) ;", "shard Handler . cancel All ( ) ;", "return false ; } }", "log . info ( msg ( ) + STR_ ) ;", "return true ; }"]}
{"ids": "13216", "code": ["private void content Spec Tree ( int content Spec Index , XML Content Spec content Spec , Children List children ) {", "get Content Spec ( content Spec Index , content Spec ) ;", "if ( content Spec . type == XML Content Spec . CONTENTSPECNODE LEAF || ( content Spec . type & NUM_ ) == XML Content Spec . CONTENTSPECNODE ANY || ( content Spec . type & NUM_ ) == XML Content Spec . CONTENTSPECNODE ANY LOCAL || ( content Spec . type & NUM_ ) == XML Content Spec . CONTENTSPECNODE ANY OTHER ) {", "if ( children . length == children . qname . length ) {", "Q Name [ ] new Q Name = new Q Name [ children . length * NUM_ ] ;", "System . arraycopy ( children . qname , NUM_ , new Q Name , NUM_ , children . length ) ;", "children . qname = new Q Name ;", "int [ ] new Type = new int [ children . length * NUM_ ] ;", "System . arraycopy ( children . type , NUM_ , new Type , NUM_ , children . length ) ;", "children . type = new Type ; }", "children . qname [ children . length ] = new Q Name ( null , ( String ) content Spec . value , ( String ) content Spec . value , ( String ) content Spec . other Value ) ;", "children . type [ children . length ] = content Spec . type ;", "children . length ++ ;", "return ; }", "final int left Node = content Spec . value != null ? ( ( int [ ] ) ( content Spec . value ) ) [ NUM_ ] : - NUM_ ;", "int right Node = - NUM_ ;", "if ( content Spec . other Value != null ) right Node = ( ( int [ ] ) ( content Spec . other Value ) ) [ NUM_ ] ;", "else return ;", "if ( content Spec . type == XML Content Spec . CONTENTSPECNODE CHOICE || content Spec . type == XML Content Spec . CONTENTSPECNODE SEQ ) {", "content Spec Tree ( left Node , content Spec , children ) ;", "content Spec Tree ( right Node , content Spec , children ) ;", "return ; }", "if ( content Spec . type == XML Content Spec . CONTENTSPECNODE ZERO OR ONE || content Spec . type == XML Content Spec . CONTENTSPECNODE ZERO OR MORE || content Spec . type == XML Content Spec . CONTENTSPECNODE ONE OR MORE ) {", "content Spec Tree ( left Node , content Spec , children ) ;", "return ; }", "throw new Runtime Exception ( STR_ + content Spec . type ) ; }"]}
{"ids": "46405", "code": ["protected J Text Field create Editor Component ( ) {", "J Text Field editor = new Borderless Text Field ( STR_ , NUM_ ) ;", "editor . set Border ( null ) ;", "return editor ; }"]}
{"ids": "81967", "code": ["private void add Arg ( String key , Object value ) {", "if ( request Arguments == null ) {", "request Arguments = new Hashtable ( ) ; }", "if ( value == null || key == null ) {", "return ; }", "if ( post ) {", "set Write Request ( true ) ; }", "request Arguments . put ( key , value ) ; }"]}
{"ids": "29471", "code": ["public static double [ ] read File Column ( String filename , int column Idx , int size Limit ) throws IO Exception , SAX Exception {", "Path path = Paths . get ( filename ) ;", "if ( ! ( Files . exists ( path ) ) ) {", "throw new SAX Exception ( STR_ ) ; }", "Buffered Reader br = new Buffered Reader ( new Input Stream Reader ( new File Input Stream ( filename ) , STR_ ) ) ;", "return read TS ( br , column Idx , size Limit ) ; }"]}
{"ids": "23660", "code": ["private void start Reader ( Connection Table conn Table ) {", "Assert . assert True ( ! this . is Running ) ;", "stopped = false ;", "this . is Running = true ;", "conn Table . execute Command ( this ) ; }"]}
{"ids": "79002", "code": ["public static boolean is Compaction Required For Table ( String meta Folder Path ) {", "String minor Compaction Status File = meta Folder Path + Carbon Common Constants . FILE SEPARATOR + Carbon Common Constants . minor Compaction Required File ;", "String major Compaction Status File = meta Folder Path + Carbon Common Constants . FILE SEPARATOR + Carbon Common Constants . major Compaction Required File ;", "try {", "if ( File Factory . is File Exist ( minor Compaction Status File , File Factory . get File Type ( minor Compaction Status File ) ) || File Factory . is File Exist ( major Compaction Status File , File Factory . get File Type ( major Compaction Status File ) ) ) {", "return true ; } }", "catch ( IO Exception e ) {", "LOGGER . error ( STR_ + e . get Message ( ) ) ; }", "return false ; }"]}
{"ids": "57772", "code": ["Big Integer copy ( ) {", "prepare Java Representation ( ) ;", "int [ ] copy Digits = new int [ number Length ] ;", "System . arraycopy ( digits , NUM_ , copy Digits , NUM_ , number Length ) ;", "return new Big Integer ( sign , number Length , copy Digits ) ; }"]}
{"ids": "45345", "code": ["public void add Excluded Class ( String class Name ) {", "m Excluded Classes . add ( class Name ) ; }"]}
{"ids": "9936", "code": ["public Bundle Message Source ( Locale locale ) {", "messages = Resource Bundle . get Bundle ( BASE NAME , locale ) ; }"]}
{"ids": "20112", "code": ["private void create Edit Panel ( ) {", "edit Panel = new J Panel ( ) ;", "add ( edit Panel , Border Layout . CENTER ) ;", "Card Layout cardlayout = new Card Layout ( ) ;", "edit Panel . set Layout ( cardlayout ) ;", "if ( colour Ramp Map != null ) {", "for ( Colour Ramp Panel Interface data : colour Ramp Map . key Set ( ) ) {", "data . set Parent ( this ) ;", "String key = data . get Title ( ) ;", "edit Panel . add ( data . get Panel ( ) , key ) ; } } }"]}
{"ids": "28069", "code": ["public static long atol ( String s ) {", "int i = NUM_ ;", "while ( i < s . length ( ) && Character . is Whitespace ( s . char At ( i ) ) ) i ++ ;", "if ( i < s . length ( ) && s . char At ( i ) == STR_ ) {", "if ( i + NUM_ < s . length ( ) && ( s . char At ( i + NUM_ ) == STR_ || s . char At ( i + NUM_ ) == STR_ ) ) return parse Long ( s . substring ( i + NUM_ ) , NUM_ ) ;", "else return parse Long ( s , NUM_ ) ; }", "else return parse Long ( s , NUM_ ) ; }"]}
{"ids": "74040", "code": ["public Object eval ( Reader reader , Script Engine engine ) throws Script Exception {", "return engine . eval ( reader ) ; }"]}
{"ids": "61618", "code": ["public void class For Name ( Soot Method container , Stmt for Name Invoke Stmt ) {", "Set < String > class Names = reflection Info . class For Name Class Names ( container ) ;", "if ( class Names == null || class Names . is Empty ( ) ) {", "register Guard ( container , for Name Invoke Stmt , STR_ ) ; }", "else {", "for ( String cls Name : class Names ) {", "constant For Name ( cls Name , container , for Name Invoke Stmt ) ; } } }"]}
{"ids": "66414", "code": ["private Abstract Renderer create Renderer ( J Tabbed Pane tabbed Pane ) {", "return has Embedded Tabs ( ) ? Abstract Renderer . create Embedded Renderer ( tabbed Pane ) : Abstract Renderer . create Renderer ( tab Pane ) ; }"]}
{"ids": "53621", "code": ["public void read Map ( Input Stream input Stream , Map Builder builder ) {", "try {", "parse Map ( input Stream , builder ) ;", "if ( builder . node Refs Without Defs Added ( ) ) LOG . warning ( STR_ ) ; }", "catch ( SAX Parse Exception e ) {", "throw new Osm Runtime Exception ( STR_ + STR_ + e . get Public Id ( ) + STR_ + e . get System Id ( ) + STR_ + e . get Line Number ( ) + STR_ + e . get Column Number ( ) + STR_ , e ) ; }", "catch ( SAX Exception e ) {", "throw new Osm Runtime Exception ( STR_ , e ) ; }", "catch ( IO Exception e ) {", "throw new Osm Runtime Exception ( STR_ , e ) ; }", "finally {", "if ( input Stream != null ) {", "try {", "input Stream . close ( ) ; }", "catch ( IO Exception e ) {", "LOG . log ( Level . SEVERE , STR_ , e ) ; } } } }"]}
{"ids": "35248", "code": ["private void process Comment ( ) {", "template Reader . next Character ( ) ;", "if ( template Reader . starts With ( syntax . get Document Type Opening ( ) ) ) {", "process Schema Comment ( ) ;", "return ; }", "else if ( nested Comments ) {", "process Nested Comment ( ) ;", "return ; }", "while ( template Reader . has Next Character ( ) ) {", "final char comment Character = template Reader . next Character ( ) ;", "if ( is Comment Closing Marker ( comment Character ) && template Reader . has Next Character ( ) && template Reader . peek Character ( ) == syntax . get Tag Closing ( ) ) {", "template Reader . next Character ( ) ;", "break ; } } }"]}
{"ids": "15686", "code": ["private void emit Permutations App Cache ( Tree Logger logger , Linker Context context , Artifact Set artifacts , String start Screen Id , Offline Screen offline Screen ) throws Unable To Complete Exception {", "for ( Emitted Artifact emitted : artifacts . find ( Emitted Artifact . class ) ) {", "if ( emitted . get Visibility ( ) == Visibility . Private ) {", "continue ; }", "String path Name = emitted . get Partial Path ( ) ;", "if ( accept Cached Resource ( path Name ) ) {", "if ( ! all Artifacts . contains ( path Name ) ) {", "cached Artifacts . add ( path Name ) ; } } }", "Set < Artifacts Group > key Set = artifacts By Group . key Set ( ) ;", "for ( Artifacts Group group : key Set ) {", "Set < String > set = artifacts By Group . get ( group ) ;", "set . add All ( cached Artifacts ) ;", "artifacts . add ( create Cache Manifest ( context , logger , set , group . get Group Id ( ) , start Screen Id , offline Screen ) ) ;", "artifacts . add ( create Cache Manifest Loader ( context , logger , group . get Group Id ( ) , start Screen Id ) ) ; } }"]}
{"ids": "57680", "code": ["public final boolean is Registered ( ) {", "return ! canonical Name . starts With ( STR_ ) && ! canonical Name . starts With ( STR_ ) ; }"]}
{"ids": "15434", "code": ["public License ( final String filename , final String text ) {", "if ( filename == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( filename . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . filename = filename ;", "if ( text == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( text . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . text = text ; }"]}
{"ids": "39096", "code": ["protected static void process Explorer Props ( File props File ) {", "try {", "Properties exp Props = new Properties ( ) ;", "Buffered Input Stream bi = new Buffered Input Stream ( new File Input Stream ( props File ) ) ;", "exp Props . load ( bi ) ;", "bi . close ( ) ;", "bi = null ;", "Set < Object > keys = exp Props . key Set ( ) ;", "Iterator < Object > keys I = keys . iterator ( ) ;", "while ( keys I . has Next ( ) ) {", "String key = ( String ) keys I . next ( ) ;", "if ( ! key . ends With ( STR_ ) ) {", "String existing Val = Explorer Defaults . get ( key , STR_ ) ;", "if ( existing Val . length ( ) > NUM_ ) {", "String replace Policy = exp Props . get Property ( key + STR_ ) ;", "if ( replace Policy != null && replace Policy . length ( ) > NUM_ ) {", "if ( replace Policy . equals Ignore Case ( STR_ ) ) {", "String new Val = exp Props . get Property ( key ) ;", "Explorer Defaults . set ( key , new Val ) ; }", "else {", "String new Val = exp Props . get Property ( key ) ;", "if ( existing Val . index Of ( new Val ) < NUM_ ) {", "new Val = existing Val + STR_ + new Val ;", "Explorer Defaults . set ( key , new Val ) ; } } }", "else {", "String new Val = exp Props . get Property ( key ) ;", "if ( existing Val . index Of ( new Val ) < NUM_ ) {", "new Val = existing Val + STR_ + new Val ;", "Explorer Defaults . set ( key , new Val ) ; } } }", "else {", "String new Val = exp Props . get Property ( key ) ;", "Explorer Defaults . set ( key , new Val ) ; } } } }", "catch ( Exception ex ) { } }"]}
{"ids": "80935", "code": ["long calculate Mid Entry ( long lo Val , long hi Val , final double dfp , long lo Entry , long hi Entry ) {", "final double dhi = ( double ) hi Entry ;", "final double dlo = ( double ) lo Entry ;", "final double dhi Val = ( double ) hi Val ;", "final double dlo Val = ( double ) lo Val ;", "long mid Entry = lo Entry + ( long ) ( ( dhi - dlo ) * ( dfp - dlo Val ) / ( dhi Val - dlo Val ) ) ;", "if ( mid Entry == hi Entry ) {", "mid Entry -- ; }", "return mid Entry ; }"]}
{"ids": "3214", "code": ["@ Suppress Warnings ( STR_ ) protected int hash Fields ( int hash , Map < Field Descriptor , Object > map ) {", "for ( Map . Entry < Field Descriptor , Object > entry : map . entry Set ( ) ) {", "Field Descriptor field = entry . get Key ( ) ;", "Object value = entry . get Value ( ) ;", "hash = ( NUM_ * hash ) + field . get Number ( ) ;", "if ( field . get Type ( ) != Field Descriptor . Type . ENUM ) {", "hash = ( NUM_ * hash ) + value . hash Code ( ) ; }", "else if ( field . is Repeated ( ) ) {", "List < ? extends Enum Lite > list = ( List < ? extends Enum Lite > ) value ;", "hash = ( NUM_ * hash ) + hash Enum List ( list ) ; }", "else {", "hash = ( NUM_ * hash ) + hash Enum ( ( Enum Lite ) value ) ; } }", "return hash ; }"]}
{"ids": "14259", "code": ["public Dashboard Service Helper ( ) {", "attributes Require Update . add ( DASHBOARD CLASS NAME ) ;", "attributes Require Update . add ( DASHBOARD NAME ) ;", "attributes Require Update . add ( DASHBOARD DISPLAY NAME ) ;", "attributes Require Update . add ( DASHBOARD ICON ) ;", "attributes Require Update . add ( DASHBOARD LOGIN ) ;", "attributes Require Update . add ( ICF IDENTIFIER ) ;", "attributes . add All ( attributes Require Update ) ; }"]}
{"ids": "67703", "code": ["public static String java Util Regex Escape ( String s ) {", "if ( s . index Of ( STR_ ) == - NUM_ ) {", "return STR_ + s + STR_ ; }", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < s . length ( ) ; i ++ ) {", "sb . append ( STR_ ) ;", "sb . append ( s . char At ( i ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "8058", "code": ["public void forget Ffmpeg Path ( ) {", "settings . put ( SETTINGS FFMPEG PATH , FFMPEG PATH UNSET ) ; }"]}
{"ids": "4651", "code": ["@ Override public void print Warning ( final String message ) {", "print Warning ( message , preference Store . get Boolean ( UI Preference Constants . CONSOLE SHOW ON NEW WARNING ) ) ; }"]}
{"ids": "1988", "code": ["public static String revert New Lines ( String string ) {", "int index ;", "String Buffer new String Buffer = new String Buffer ( ) ;", "while ( ( index = string . index Of ( STR_ ) ) != - NUM_ ) {", "if ( index > NUM_ ) {", "new String Buffer . append ( string . substring ( NUM_ , index ) ) ; }", "new String Buffer . append ( STR_ ) ;", "if ( ( index + NUM_ ) < string . length ( ) ) {", "string = string . substring ( index + NUM_ ) ; }", "else {", "string = STR_ ; } }", "new String Buffer . append ( string ) ;", "string = new String Buffer . to String ( ) ;", "new String Buffer = new String Buffer ( ) ;", "while ( ( index = string . index Of ( STR_ ) ) != - NUM_ ) {", "if ( index > NUM_ ) {", "new String Buffer . append ( string . substring ( NUM_ , index ) ) ; }", "new String Buffer . append ( STR_ ) ;", "if ( ( index + NUM_ ) < string . length ( ) ) {", "string = string . substring ( index + NUM_ ) ; }", "else {", "string = STR_ ; } }", "new String Buffer . append ( string ) ;", "return new String Buffer . to String ( ) ; }"]}
{"ids": "924", "code": ["public void path Values To Pixel ( List < Path > paths ) {", "for ( int i = NUM_ ; i < paths . size ( ) ; i ++ ) {", "path Value To Pixel ( paths . get ( i ) ) ; } }"]}
{"ids": "4504", "code": ["@ Override public void on Insert Complete ( int task Id , Object cookie , long insert Row Id ) {", "if ( task Id == App Constants . Query Tokens . INSERT WALLPOST && insert Row Id != - NUM_ ) {", "Logger . i ( TAG , STR_ + insert Row Id ) ; } }"]}
{"ids": "69183", "code": ["protected void parse List ( Array List < String > list , String text ) {", "list . clear ( ) ;", "String Tokenizer st = new String Tokenizer ( text , STR_ ) ;", "while ( st . has More Elements ( ) ) {", "String line = ( String ) st . next Element ( ) ;", "list . add ( line . trim ( ) ) ; } }"]}
{"ids": "34955", "code": ["protected List < Node > split Assignments ( Node node ) {", "if ( node instanceof Assignment Node ) {", "List < Node > result = new Array List < > ( ) ;", "Assignment Node a = ( Assignment Node ) node ;", "result . add ( a . get Target ( ) ) ;", "result . add All ( split Assignments ( a . get Expression ( ) ) ) ;", "return result ; }", "else {", "return Collections . singleton List ( node ) ; } }"]}
{"ids": "2630", "code": ["public Tree < String > extract Best Max Rule Parse ( int start , int end , List < String > sentence ) {", "return extract Best Max Rule Parse 1 ( start , end , NUM_ , sentence ) ; }"]}
{"ids": "62646", "code": ["public static double normalize ( double val , double min , double max ) {", "if ( max < min ) throw new Illegal Argument Exception ( STR_ ) ;", "return ( val - min ) / ( max - min ) ; }"]}
{"ids": "55179", "code": ["private static boolean contains Only Transient And Static Fields ( List < Field > fields ) {", "boolean contains Normal Field = false ;", "for ( Field field : fields ) {", "if ( ! Modifier . is Transient ( field . get Modifiers ( ) ) && ! Modifier . is Static ( field . get Modifiers ( ) ) ) {", "contains Normal Field = true ; } }", "return ! contains Normal Field ; }"]}
{"ids": "35338", "code": ["@ Override public void append Index Map To ( Appendable out , String name , List < Source Map Section > sections ) throws IO Exception {", "out . append ( STR_ ) ;", "append First Field ( out , STR_ , STR_ ) ;", "append Field ( out , STR_ , escape String ( name ) ) ;", "append Field Start ( out , STR_ ) ;", "out . append ( STR_ ) ;", "boolean first = true ;", "for ( Source Map Section section : sections ) {", "if ( first ) {", "first = false ; }", "else {", "out . append ( STR_ ) ; }", "out . append ( STR_ ) ;", "append First Field ( out , STR_ , offset Value ( section . get Line ( ) , section . get Column ( ) ) ) ;", "if ( section . get Section Type ( ) == Source Map Section . Section Type . URL ) {", "append Field ( out , STR_ , escape String ( section . get Section Value ( ) ) ) ; }", "else if ( section . get Section Type ( ) == Source Map Section . Section Type . MAP ) {", "append Field ( out , STR_ , section . get Section Value ( ) ) ; }", "else {", "throw new IO Exception ( STR_ ) ; }", "out . append ( STR_ ) ; }", "out . append ( STR_ ) ;", "append Field End ( out ) ;", "out . append ( STR_ ) ; }"]}
{"ids": "34527", "code": ["public Builder add Part ( Part part ) {", "if ( part == null ) throw new Null Pointer Exception ( STR_ ) ;", "parts . add ( part ) ;", "return this ; }"]}
{"ids": "27830", "code": ["protected void notify Gone ( L locator ) {", "synchronized ( this ) {", "if ( ! stale Locators . add ( locator . get Partition Id ( ) ) ) {", "fail ( STR_ + locator ) ; } } }"]}
{"ids": "38617", "code": ["@ Override public void add Vetoable Change Listener ( String name , Vetoable Change Listener vcl ) {", "m bc Support . add Vetoable Change Listener ( name , vcl ) ; }"]}
{"ids": "71994", "code": ["public String build User ( ) {", "return properties . get Property ( STR_ ) ; }"]}
{"ids": "4021", "code": ["private void update Idle Expire Time ( long now ) {", "thread Idle Expire Time . set ( now + idle Timeout ) ; }"]}
{"ids": "54292", "code": ["protected Ct Class create Ct Class ( String classname , boolean use Cache ) {", "if ( classname . char At ( NUM_ ) == STR_ ) classname = Descriptor . to Class Name ( classname ) ;", "if ( classname . ends With ( STR_ ) ) {", "String base = classname . substring ( NUM_ , classname . index Of ( STR_ ) ) ;", "if ( ( ! use Cache || get Cached ( base ) == null ) && find ( base ) == null ) return null ;", "else return new Ct Array ( classname , this ) ; }", "else if ( find ( classname ) == null ) return null ;", "else return new Ct Class Type ( classname , this ) ; }"]}
{"ids": "30297", "code": ["@ Transactional public long create Voucher From Bill ( final int bill Id ) throws Application Runtime Exception {", "try {", "String voucher Status = null ;", "final List v Status List = app Config Values Service . get Config Values By Module And Key ( STR_ , STR_ ) ;", "if ( ! v Status List . is Empty ( ) && v Status List . size ( ) == NUM_ ) {", "final App Config Values app Val = ( App Config Values ) v Status List . get ( NUM_ ) ;", "voucher Status = app Val . get Value ( ) ; }", "else throw new Application Runtime Exception ( STR_ + MISSINGMSG ) ;", "final long vh = create Voucher . create Voucher From Bill ( bill Id , voucher Status , null , null ) ;", "return vh ; }", "catch ( final Exception e ) {", "LOGGER . error ( e . get Message ( ) ) ;", "throw new Application Runtime Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "51857", "code": ["public static float compare Equivalance ( Bitmap bitmap 1 , Bitmap bitmap 2 ) {", "if ( bitmap 1 == null || bitmap 2 == null || bitmap 1 . get Width ( ) != bitmap 2 . get Width ( ) || bitmap 1 . get Height ( ) != bitmap 2 . get Height ( ) ) {", "return NUM_ ; }", "Byte Buffer buffer 1 = Byte Buffer . allocate ( bitmap 1 . get Height ( ) * bitmap 1 . get Row Bytes ( ) ) ;", "bitmap 1 . copy Pixels To Buffer ( buffer 1 ) ;", "Byte Buffer buffer 2 = Byte Buffer . allocate ( bitmap 2 . get Height ( ) * bitmap 2 . get Row Bytes ( ) ) ;", "bitmap 2 . copy Pixels To Buffer ( buffer 2 ) ;", "byte [ ] array 1 = buffer 1 . array ( ) ;", "byte [ ] array 2 = buffer 2 . array ( ) ;", "int len = array 1 . length ;", "int count = NUM_ ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "if ( array 1 [ i ] == array 2 [ i ] ) {", "count ++ ; } }", "return ( ( float ) ( count ) ) / len ; }"]}
{"ids": "13868", "code": ["public void handle Tbl Charset Alias Href Action Request ( Request Invocation Event event ) throws Model Control Exception {", "try {", "Map values = get Values ( ) ;", "on Before Save Profile ( values ) ;", "set Page Session Attribute ( PROPERTY ATTRIBUTE , ( Hash Map ) values ) ;", "G 11 N Charset Alias Edit View Bean vb = ( G 11 N Charset Alias Edit View Bean ) get View Bean ( G 11 N Charset Alias Edit View Bean . class ) ;", "unlock Page Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . populate Values ( ( String ) get Display Field Value ( STR_ ) ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ; } }"]}
{"ids": "52112", "code": ["public Boolean Glass Gene Im ( Boolean Glass Gene Pm gene Pm , Parameters parameters ) {", "try {", "this . gene Pm = gene Pm ;", "this . glass Function = new Boolean Glass Function ( gene Pm . get Lag Graph ( ) ) ;", "this . initializer = new Basal Initializer ( glass Function , NUM_ , NUM_ ) ;", "this . history = new Gene History ( initializer , glass Function ) ;", "this . simulator = new Measurement Simulator Params ( parameters ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "34500", "code": ["protected List < ITEM TYPE > select Fold Train Items ( List < ITEM TYPE > items , int n Folds , int fold ) {", "List < ITEM TYPE > train Items = new Array List < ITEM TYPE > ( ) ;", "for ( int i = NUM_ ; i < items . size ( ) ; ++ i ) {", "if ( i % n Folds != fold ) {", "train Items . add ( items . get ( i ) ) ; } }", "return train Items ; }"]}
{"ids": "5871", "code": ["private boolean journal Rebuild Required ( ) {", "final int redundant Op Compact Threshold = NUM_ ;", "return redundant Op Count >= redundant Op Compact Threshold && redundant Op Count >= lru Entries . size ( ) ; }"]}
{"ids": "31032", "code": ["protected void rehash ( int new Capacity ) {", "int old Capacity = set . length ;", "K old Keys [ ] = ( K [ ] ) set ;", "short old Vals [ ] = values ;", "set = new Object [ new Capacity ] ;", "Arrays . fill ( set , FREE ) ;", "values = new short [ new Capacity ] ;", "for ( int i = old Capacity ; i -- > NUM_ ; ) {", "if ( old Keys [ i ] != FREE && old Keys [ i ] != REMOVED ) {", "K o = old Keys [ i ] ;", "int index = insertion Index ( o ) ;", "if ( index < NUM_ ) {", "throw Object Contract Violation ( set [ ( - index - NUM_ ) ] , o ) ; }", "set [ index ] = o ;", "values [ index ] = old Vals [ i ] ; } } }"]}
{"ids": "71684", "code": ["protected void add Attributes ( Element element , Attributes attributes ) {", "boolean no Namespace Attributes = false ;", "if ( element instanceof Abstract Element ) {", "Abstract Element base Element = ( Abstract Element ) element ;", "base Element . set Attributes ( attributes , namespace Stack , no Namespace Attributes ) ; }", "else {", "int size = attributes . get Length ( ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "String attribute Q Name = attributes . get Q Name ( i ) ;", "if ( no Namespace Attributes || ! attribute Q Name . starts With ( STR_ ) ) {", "String attribute URI = attributes . get URI ( i ) ;", "String attribute Local Name = attributes . get Local Name ( i ) ;", "String attribute Value = attributes . get Value ( i ) ;", "Q Name q Name = namespace Stack . get Attribute Q Name ( attribute URI , attribute Local Name , attribute Q Name ) ;", "element . add Attribute ( q Name , attribute Value ) ; } } } }"]}
{"ids": "67365", "code": ["public static < T > boolean remove ( Collection < T > collection , T element ) {", "if ( element == null ) {", "return false ; }", "if ( Collection Utils . is Empty ( collection ) ) {", "return false ; }", "return collection . remove ( element ) ; }"]}
{"ids": "21703", "code": ["private static void persist Updated Vpool List ( List < Virtual Pool > updated Vpool List , Db Client db Client ) {", "if ( ! updated Vpool List . is Empty ( ) ) {", "db Client . update And Reindex Object ( updated Vpool List ) ; } }"]}
{"ids": "18027", "code": ["void compose Templates ( Elem Template Element templ ) throws Transformer Exception {", "templ . compose ( this ) ;", "for ( Elem Template Element child = templ . get First Child Elem ( ) ; child != null ; child = child . get Next Sibling Elem ( ) ) {", "compose Templates ( child ) ; }", "templ . end Compose ( this ) ; }"]}
{"ids": "86281", "code": ["public static boolean class Exists ( String class Name ) {", "try {", "return Class . for Name ( class Name ) != null ; }", "catch ( Class Not Found Exception e ) {", "return false ; } }"]}
{"ids": "55137", "code": ["public static void create Top Level Classes XML ( String output Dir , String templates Path , boolean lenient ) throws Compiler Exception {", "try {", "As Doc Helper as Doc Help = new As Doc Helper ( output Dir + STR_ , output Dir + STR_ , output Dir , output Dir + STR_ + File . separator + STR_ ) ;", "as Doc Help . create Top Level Classes ( lenient ) ; }", "catch ( Throwable t ) {", "t . print Stack Trace ( ) ;", "Compiler Message c = new Could Not Create ( STR_ , t . get Message ( ) ) ;", "Thread Local Toolkit . log ( c ) ;", "throw c ; } }"]}
{"ids": "46524", "code": ["void draw Shape ( Graphics g , CSS . Value type , int ax , int ay , int aw , int ah , float align ) {", "int gap = is Left To Right ? - ( bulletgap + NUM_ ) : ( aw + bulletgap ) ;", "int x = ax + gap ;", "int y = Math . max ( ay , ay + ( int ) ( align * ah ) - NUM_ ) ;", "if ( type == CSS . Value . SQUARE ) {", "g . draw Rect ( x , y , NUM_ , NUM_ ) ; }", "else if ( type == CSS . Value . CIRCLE ) {", "g . draw Oval ( x , y , NUM_ , NUM_ ) ; }", "else {", "g . fill Oval ( x , y , NUM_ , NUM_ ) ; } }"]}
{"ids": "83645", "code": ["public static void restore ( final Context context ) {", "Shared Preferences prefs = Preference Manager . get Default Shared Preferences ( context ) ;", "if ( Long Term Orbits . is Supported ( ) && prefs . get Boolean ( KEY LOCATION TOGGLE , false ) ) {", "save Download Data Wifi Only Pref ( context ) ;", "Alarm Manager am = ( Alarm Manager ) context . get System Service ( Context . ALARM SERVICE ) ;", "Intent intent = new Intent ( context , Lto Service . class ) ;", "Pending Intent pi = Pending Intent . get Service ( context , NUM_ , intent , Pending Intent . FLAG UPDATE CURRENT | Pending Intent . FLAG ONE SHOT ) ;", "long next Lto Download = System . current Time Millis ( ) + ( NUM_ * NUM_ * NUM_ ) ;", "am . set ( Alarm Manager . RTC , next Lto Download , pi ) ; } }"]}
{"ids": "32463", "code": ["private void generate File ( int word Cnt ) throws Exception {", "Random rnd = new Random ( System . current Time Millis ( ) ) ;", "try ( Output Stream Writer writer = new Output Stream Writer ( igfs . create ( FILE , true ) ) ) {", "int cnt = NUM_ ;", "while ( cnt < word Cnt ) {", "String word = DICTIONARY [ rnd . next Int ( DICTIONARY . length ) ] ;", "writer . write ( word + STR_ ) ;", "cnt ++ ; } } }"]}
{"ids": "32928", "code": ["public void polygon ( double [ ] x , double [ ] y ) {", "int n = x . length ;", "General Path path = new General Path ( ) ;", "path . move To ( ( float ) scale X ( x [ NUM_ ] ) , ( float ) scale Y ( y [ NUM_ ] ) ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) path . line To ( ( float ) scale X ( x [ i ] ) , ( float ) scale Y ( y [ i ] ) ) ;", "path . close Path ( ) ;", "offscreen . draw ( path ) ;", "draw ( ) ; }"]}
{"ids": "70011", "code": ["public void append ( int key , E value ) {", "if ( m Size != NUM_ && key <= m Keys [ m Size - NUM_ ] ) {", "put ( key , value ) ;", "return ; }", "if ( m Garbage && m Size >= m Keys . length ) {", "gc ( ) ; }", "int pos = m Size ;", "if ( pos >= m Keys . length ) {", "int n = Container Helpers . ideal Int Array Size ( pos + NUM_ ) ;", "int [ ] nkeys = new int [ n ] ;", "Object [ ] nvalues = new Object [ n ] ;", "System . arraycopy ( m Keys , NUM_ , nkeys , NUM_ , m Keys . length ) ;", "System . arraycopy ( m Values , NUM_ , nvalues , NUM_ , m Values . length ) ;", "m Keys = nkeys ;", "m Values = nvalues ; }", "m Keys [ pos ] = key ;", "m Values [ pos ] = value ;", "m Size = pos + NUM_ ; }"]}
{"ids": "1022", "code": ["public List < Search Result > search By Object Name ( String name ) {", "List < Search Result > all = new Array List < > ( ) ;", "for ( Layer layer : layers ) {", "if ( is Layer Visible ( layer ) ) {", "all . add All ( layer . search By Object Name ( name ) ) ; } }", "Log . d ( TAG , STR_ + all . size ( ) + STR_ + name ) ;", "return all ; }"]}
{"ids": "57121", "code": ["private void clear Messages ( ) {", "messages . clear ( ) ; }"]}
{"ids": "28240", "code": ["public Searcher ( ) throws IO Exception {", "searcher = new Index Searcher ( Directory Reader . open ( FS Directory . open ( Paths . get ( INDEX DIR ) ) ) ) ;", "parser = new Query Parser ( CONTENT FIELD , new Standard Analyzer ( ) ) ; }"]}
{"ids": "81410", "code": ["public void clear Text Edits ( ) {", "f Edits . clear ( ) ; }"]}
{"ids": "70417", "code": ["public static void main ( String [ ] args ) {", "Frame frame = new Packet Tool ( ) ;", "frame . pack ( ) ;", "frame . set Location Relative To ( null ) ;", "frame . set Visible ( true ) ; }"]}
{"ids": "10583", "code": ["private void create Tool Bar ( ) {", "tool Bar = new J Tool Bar ( STR_ ) ;", "if ( listener . running As J Console Plugin || listener . running As Visual VM Plugin ) {", "tool Bar . add ( create Tool Bar Button ( STR_ , STR_ ) ) ;", "tool Bar . set Floatable ( false ) ; }", "else {", "tool Bar . add ( create Tool Bar Button ( STR_ , STR_ ) ) ;", "close Tool Bar Button = create Tool Bar Button ( STR_ , STR_ ) ;", "close Tool Bar Button . set Enabled ( false ) ;", "tool Bar . add ( close Tool Bar Button ) ; }", "tool Bar . add Separator ( ) ;", "tool Bar . add ( create Tool Bar Button ( STR_ , STR_ ) ) ;", "tool Bar . add Separator ( ) ;", "expand Button = create Tool Bar Button ( STR_ , STR_ ) ;", "expand Button . set Enabled ( false ) ;", "tool Bar . add ( expand Button ) ;", "collapse Button = create Tool Bar Button ( STR_ , STR_ ) ;", "collapse Button . set Enabled ( false ) ;", "tool Bar . add ( collapse Button ) ;", "tool Bar . add Separator ( ) ;", "find LR Threads Button = create Tool Bar Button ( STR_ , STR_ ) ;", "find LR Threads Button . set Enabled ( false ) ;", "tool Bar . add ( find LR Threads Button ) ;", "tool Bar . add ( create Tool Bar Button ( STR_ , STR_ ) ) ;", "tool Bar . add ( create Tool Bar Button ( STR_ , STR_ ) ) ;", "tool Bar . add Separator ( ) ; }"]}
{"ids": "15005", "code": ["public static Map attr Set To Map ( Attr Set attr Set , boolean fetch Byte Values ) {", "Map attributes Map = new AM Hash Map ( fetch Byte Values ) ;", "if ( attr Set == null ) {", "return attributes Map ; }", "int attr Set Size = attr Set . size ( ) ;", "if ( ! fetch Byte Values ) {", "for ( int i = NUM_ ; i < attr Set Size ; i ++ ) {", "Attr attr = attr Set . element At ( i ) ;", "String values [ ] = attr . get String Values ( ) ;", "attributes Map . put ( attr . get Name ( ) , string Array To Set ( values ) ) ; } }", "else {", "for ( int i = NUM_ ; i < attr Set Size ; i ++ ) {", "Attr attr = attr Set . element At ( i ) ;", "attributes Map . put ( attr . get Name ( ) , attr . get Byte Values ( ) ) ; } }", "return attributes Map ; }"]}
{"ids": "72221", "code": ["public final Iterator < String > schemes Iterator ( ) {", "return m Data Schemes != null ? m Data Schemes . iterator ( ) : null ; }"]}
{"ids": "45502", "code": ["@ Override public void close ( ) throws IO Exception {", "try {", "out . close ( ) ; }", "finally {", "lock File . delete ( ) ; } }"]}
{"ids": "49955", "code": ["public static void reinit Recompiler ( ) {", "rewriter . set ( new Program Rewriter ( false , true ) ) ; }"]}
{"ids": "54057", "code": ["default Value remove ( Optional < ? extends Char Sequence > name ) {", "return name . is Present ( ) ? remove ( name . get ( ) ) : null ; }"]}
{"ids": "75189", "code": ["private String next To Internal ( String excluded ) {", "int start = pos ;", "for ( ; pos < in . length ( ) ; pos ++ ) {", "char c = in . char At ( pos ) ;", "if ( c == STR_ || c == STR_ || excluded . index Of ( c ) != - NUM_ ) {", "return in . substring ( start , pos ) ; } }", "return in . substring ( start ) ; }"]}
{"ids": "3470", "code": ["Accept Tcp ( Port Tcp port , Server Socket Bar server Socket ) {", "Objects . require Non Null ( port ) ;", "Objects . require Non Null ( server Socket ) ;", "port = port ;", "server Socket = server Socket ; }"]}
{"ids": "49180", "code": ["private static void update Grabbed Cursor ( Cursor cur ) {", "X Base Window target = X Awt State . get Grab Window ( ) ;", "if ( target instanceof X Window Peer ) {", "X Window Peer grabber = ( X Window Peer ) target ;", "grabber . p Set Cursor ( cur ) ; } }"]}
{"ids": "81711", "code": ["protected void parse URI ( String uri String ) throws URI Syntax Exception {", "String s = uri String ;", "int index = s . index Of ( FRAGMENT SEPARATOR ) ;", "if ( index != - NUM_ ) {", "set Fragment ( s . substring ( index + NUM_ ) , false ) ;", "s = s . substring ( NUM_ , index ) ; }", "index = s . index Of ( SCHEME SEPARATOR ) ;", "if ( index != - NUM_ ) {", "String scheme = s . substring ( NUM_ , index ) ;", "if ( is Valid Scheme ( scheme ) ) {", "set Scheme ( scheme ) ;", "s = s . substring ( index + NUM_ ) ; } }", "parse Scheme Specific Part ( s , false ) ; }"]}
{"ids": "48758", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( ( obj instanceof Keep Alive Key ) == false ) return false ;", "Keep Alive Key kae = ( Keep Alive Key ) obj ;", "return host . equals ( kae . host ) && ( port == kae . port ) && protocol . equals ( kae . protocol ) && this . obj == kae . obj ; }"]}
{"ids": "62396", "code": ["protected static void append Long String Type ( String Builder sb ) {", "sb . append ( STR_ ) ; }"]}
{"ids": "49998", "code": ["public static boolean is NA ( String [ ] N Astrings , String w ) {", "if ( N Astrings == null ) return false ;", "for ( String na : N Astrings ) {", "if ( w . equals ( na ) ) return true ; }", "return false ; }"]}
{"ids": "37930", "code": ["private double [ ] evaluate Probability ( double [ ] data ) {", "double [ ] prob = new double [ m Num Classes ] , v = new double [ m Num Classes ] ;", "for ( int j = NUM_ ; j < m Num Classes - NUM_ ; j ++ ) {", "for ( int k = NUM_ ; k <= m Num Predictors ; k ++ ) {", "v [ j ] += m Par [ k ] [ j ] * data [ k ] ; } }", "v [ m Num Classes - NUM_ ] = NUM_ ;", "for ( int m = NUM_ ; m < m Num Classes ; m ++ ) {", "double sum = NUM_ ;", "for ( int n = NUM_ ; n < m Num Classes - NUM_ ; n ++ ) {", "sum += Math . exp ( v [ n ] - v [ m ] ) ; }", "prob [ m ] = NUM_ / ( sum + Math . exp ( - v [ m ] ) ) ; }", "return prob ; }"]}
{"ids": "34349", "code": ["public static final Hash Map read Map Xml ( Input Stream in ) throws Xml Pull Parser Exception , IO Exception {", "Xml Pull Parser parser = Xml . new Pull Parser ( ) ;", "parser . set Input ( in , null ) ;", "return ( Hash Map ) read Value Xml ( parser , new String [ NUM_ ] ) ; }"]}
{"ids": "38575", "code": ["int next Node ( String s Str , int i ) {", "int n Braces = NUM_ ;", "char c = s Str . char At ( i ) ;", "do {", "i ++ ;", "if ( i < s Str . length ( ) ) {", "c = s Str . char At ( i ) ;", "if ( c == STR_ ) {", "while ( i < s Str . length ( ) && s Str . char At ( i ) != STR_ ) {", "i ++ ; }", "i ++ ;", "if ( i < s Str . length ( ) ) {", "c = s Str . char At ( i ) ; } }", "switch ( c ) {", "case STR_ :", "n Braces ++ ;", "break ;", "case STR_ :", "n Braces -- ;", "break ;", "default :", "break ; } } }", "while ( i < s Str . length ( ) && ( n Braces > NUM_ || ( c != STR_ && c != STR_ && c != STR_ ) ) ) ;", "if ( i >= s Str . length ( ) || n Braces < NUM_ ) {", "return - NUM_ ; }", "else if ( s Str . char At ( i ) == STR_ ) {", "i ++ ;", "if ( s Str . char At ( i ) == STR_ ) {", "while ( i < s Str . length ( ) && s Str . char At ( i ) != STR_ ) {", "i ++ ; }", "i ++ ;", "if ( i >= s Str . length ( ) ) {", "return - NUM_ ; } }", "if ( s Str . char At ( i ) == STR_ ) {", "i ++ ;", "c = s Str . char At ( i ) ;", "while ( i < s Str . length ( ) && ( c == STR_ || Character . is Digit ( c ) ) ) {", "i ++ ;", "if ( i < s Str . length ( ) ) {", "c = s Str . char At ( i ) ; } } } }", "return i ; }"]}
{"ids": "12175", "code": ["public boolean select Node ( D node Data , Signal Event event ) {", "if ( selected Nodes . is Empty ( ) ) {", "insert And Select Node ( node Data , NUM_ , true ) ;", "return true ; }", "if ( ! has Same Parent ( selected Nodes . get ( NUM_ ) , node Data ) ) {", "if ( ! this . multilevel Selection || event . get Shift Key ( ) ) {", "return select Single Node ( node Data ) ; } }", "if ( event == null || event . get Command Key ( ) ) {", "ctrl Select ( node Data ) ;", "return true ; }", "else {", "if ( event . get Shift Key ( ) ) {", "return shift Select ( node Data ) ; } }", "return select Single Node ( node Data ) ; }"]}
{"ids": "86812", "code": ["@ Override public int [ ] sequence Lengths ( final long start , final long end ) throws IO Exception {", "final int entry Size = m Index . get Version ( ) >= Index File . PER SEQUENCE CHECKSUM VERSION ? ( m Index . has Quality ( ) ? NUM_ : NUM_ ) : NUM_ ;", "final long internal Start = start + m Start ;", "final long internal End = end + m Start ;", "final int [ ] ret = new int [ ( int ) ( internal End - internal Start ) ] ;", "if ( ret . length == NUM_ ) {", "return ret ; }", "if ( m Index . get Max Length ( ) == m Index . get Min Length ( ) ) {", "Arrays . fill ( ret , ( int ) m Index . get Max Length ( ) ) ;", "return ret ; }", "final byte [ ] buffer = new byte [ entry Size * NUM_ ] ;", "final Data File Index data Index = m Sequence Manager . sequence Index ( ) ;", "final long [ ] num Sequences = new long [ data Index . number Entries ( ) ] ;", "int start File No = - NUM_ ;", "int end File No = - NUM_ ;", "for ( int i = NUM_ ; i < num Sequences . length ; i ++ ) {", "if ( i > NUM_ ) {", "num Sequences [ i ] = num Sequences [ i - NUM_ ] + data Index . number Sequences ( i ) ; }", "else {", "num Sequences [ NUM_ ] = data Index . number Sequences ( NUM_ ) ; }", "if ( internal Start < num Sequences [ i ] ) {", "if ( start File No == - NUM_ ) {", "start File No = i ; }", "if ( internal End < num Sequences [ i ] ) {", "end File No = i ;", "break ; } } }", "final long start Lower = start File No == NUM_ ? NUM_ : num Sequences [ start File No - NUM_ ] ;", "final long end Lower = end File No < NUM_ ? NUM_ : num Sequences [ end File No - NUM_ ] ;", "int seq No = NUM_ ;", "for ( int i = start File No ; ( end File No == - NUM_ || i <= end File No ) && i < num Sequences . length ; i ++ ) {", "try ( Random Access File raf = new Random Access File ( Sdf File Utils . sequence Pointer File ( m Directory , i ) , STR_ ) ) {", "final long pos ;", "if ( i == start File No ) {", "pos = ( internal Start - start Lower ) * entry Size ;", "raf . seek ( pos ) ; }", "else {", "pos = NUM_ ; }", "final long end Pos = end File No == i ? ( internal End - end Lower ) * entry Size : raf . length ( ) ;", "seq No = sequence Lengths Helper ( raf , buffer , ret , seq No , pos , end Pos , entry Size ) ;", "if ( end File No != i && seq No > NUM_ ) {", "final long file Length = data Index . data Size ( i ) ;", "ret [ seq No - NUM_ ] = ret [ seq No - NUM_ ] - ( int ) file Length ; }", "else {", "if ( seq No != ret . length ) {", "throw new Corrupt Sdf Exception ( STR_ + ret . length + STR_ + seq No ) ; }", "raf . read ( ) ;", "ret [ seq No - NUM_ ] -= raf . read Int ( ) ; } } }", "ret [ ret . length - NUM_ ] = NUM_ - ret [ ret . length - NUM_ ] ;", "return ret ; }"]}
{"ids": "28315", "code": ["public Observable < Drive Id > create File ( Drive Folder folder , File file , String title ) {", "return create File ( folder , file , title , Mime Type Map . get File Extension From Url ( file . get Path ( ) ) ) ; }"]}
{"ids": "68891", "code": ["public static String extract Collection From Path ( String path ) {", "String extracted Collection Name = null ;", "String path Modified = remove From End Of String ( path , SLASH ) ;", "String [ ] path Segments = path Modified . split ( STR_ ) ;", "if ( path Segments . length > NUM_ ) {", "extracted Collection Name = path Segments [ path Segments . length - NUM_ ] ; }", "return extracted Collection Name ; }"]}
{"ids": "37723", "code": ["public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "4126", "code": ["public boolean is Private ( ) {", "return Modifier . is Private ( field . get Modifiers ( ) ) ; }"]}
{"ids": "56173", "code": ["public static final long long Encode ( final String hash ) {", "int level = hash . length ( ) - NUM_ ;", "long b ;", "long l = NUM_ ;", "for ( char c : hash . to Char Array ( ) ) {", "b = ( long ) ( BASE 32 STRING . index Of ( c ) ) ;", "l |= ( b << ( level -- * NUM_ ) ) ; }", "return ( l << NUM_ ) | hash . length ( ) ; }"]}
{"ids": "9517", "code": ["@ Override public void on Success ( T result ) {", "try {", "LOGGER . debug ( STR_ , result ) ;", "queue . put ( result ) ; }", "catch ( Interrupted Exception e ) {", "LOGGER . warn ( STR_ , e ) ; } }"]}
{"ids": "13886", "code": ["public void handle Tbl Provider Resource Id Mapper Button Add Request ( Request Invocation Event event ) throws Model Control Exception {", "try {", "Map values = get Values ( ) ;", "on Before Save Profile ( values ) ;", "set Page Session Attribute ( PROPERTY ATTRIBUTE , ( Hash Map ) values ) ;", "SM Discovery Provider Resource Id Mapper Add View Bean vb = ( SM Discovery Provider Resource Id Mapper Add View Bean ) get View Bean ( SM Discovery Provider Resource Id Mapper Add View Bean . class ) ;", "remove Page Session Attribute ( SM Discovery Provider Resource Id Mapper Add View Bean . PROPERTY ATTRIBUTE ) ;", "unlock Page Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ; } }"]}
{"ids": "36977", "code": ["public C Open Original Function ( final C Graph Window parent , final I View Container container , final I Navi Function function ) {", "super ( String . format ( STR_ , function . get Name ( ) ) ) ;", "m parent = parent ;", "m container = container ;", "m function = function ; }"]}
{"ids": "3669", "code": ["public int read ( char [ ] buffer , int offset , int length ) throws IO Exception {", "byte [ ] bytes = new byte [ length ] ;", "int count = file . read ( bytes , NUM_ , length ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "buffer [ offset + i ] = ( char ) bytes [ i ] ; }", "return count ; }"]}
{"ids": "35304", "code": ["@ Override protected E Class find Instantiable Compatible ( E Class e Type ) {", "if ( ! is Instantiatable Sub Type ( e Type , e Type ) ) {", "throw new Illegal State Exception ( String . value Of ( e Type ) ) ; }", "return e Type ; }"]}
{"ids": "4436", "code": ["private int measure Width ( int measure Spec ) {", "int result = NUM_ ;", "int spec Mode = Measure Spec . get Mode ( measure Spec ) ;", "int spec Size = Measure Spec . get Size ( measure Spec ) ;", "if ( spec Mode == Measure Spec . EXACTLY ) {", "result = spec Size ; }", "else {", "result = IMAGE WIDTH + MAX TEXT WIDTH + TOAST HEIGHT ;", "if ( spec Mode == Measure Spec . AT MOST ) {", "result = Math . min ( result , spec Size ) ; } }", "return result ; }"]}
{"ids": "32407", "code": ["public void restore Topology ( Iterable < Tcp Discovery Node > nodes , long top Ver ) {", "assert ! F . is Empty ( nodes ) ;", "assert top Ver > NUM_ ;", "rw Lock . write Lock ( ) . lock ( ) ;", "try {", "loc Node . internal Order ( top Ver ) ;", "clear ( ) ;", "boolean first Add = true ;", "for ( Tcp Discovery Node node : nodes ) {", "if ( nodes Map . contains Key ( node . id ( ) ) ) continue ;", "nodes Map . put ( node . id ( ) , node ) ;", "if ( first Add ) {", "this . nodes = new Tree Set < > ( this . nodes ) ;", "first Add = false ; }", "node . last Update Time ( U . current Time Millis ( ) ) ;", "this . nodes . add ( node ) ; }", "node Order = top Ver ;", "initialize Minimum Version ( ) ; }", "finally {", "rw Lock . write Lock ( ) . unlock ( ) ; } }"]}
{"ids": "27500", "code": ["final protected void start Op ( final I Start Op Message msg ) {", "if ( ! controller ) throw new Unsupported Operation Exception ( ERR NOT CONTROLLER ) ;", "if ( msg == null ) throw new Illegal Argument Exception ( ) ;", "if ( ! query Id . equals ( msg . get Query Id ( ) ) ) throw new Illegal Argument Exception ( ) ;", "lock . lock ( ) ;", "try {", "if ( log . is Trace Enabled ( ) ) log . trace ( msg . to String ( ) ) ;", "if ( future . is Done ( ) ) throw new Runtime Exception ( STR_ ) ;", "run State . start Op ( msg ) ; }", "catch ( Timeout Exception ex ) {", "halt ( ex ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "86538", "code": ["public Flux < IN > drain ( ) {", "return Flux . empty ( ) ; }"]}
{"ids": "33201", "code": ["int traverse Consistency Check ( Text Edit Processor processor , Document document , List < List < Text Edit > > source Edits ) {", "int result = NUM_ ;", "if ( f Children != null ) {", "for ( int i = f Children . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "Text Edit child = ( Text Edit ) f Children . get ( i ) ;", "result = Math . max ( result , child . traverse Consistency Check ( processor , document , source Edits ) ) ; } }", "if ( processor . consider Edit ( this ) ) {", "perform Consistency Check ( processor , document ) ; }", "return result ; }"]}
{"ids": "7879", "code": ["public Minute ( Date time , Time Zone zone ) {", "this ( time , zone , Locale . get Default ( ) ) ; }"]}
{"ids": "83133", "code": ["private Plan build Plan 1 ( ) {", "Plan plan = Population Utils . create Plan ( ) ;", "Activity a = Population Utils . create Activity From Coord ( STR_ , Coord Utils . create Coord ( NUM_ , NUM_ ) ) ;", "a . set End Time ( Time . parse Time ( STR_ ) ) ;", "plan . add Activity ( a ) ;", "plan . add Leg ( Population Utils . create Leg ( STR_ ) ) ;", "double travel Time = Time . parse Time ( STR_ ) ;", "double distance = Math . round ( ( travel Time * Chain Chopper . AVERAGE SPEED ) / Chain Chopper . CROWFLY FACTOR ) ;", "Activity b = Population Utils . create Activity From Coord ( STR_ , Coord Utils . create Coord ( distance , NUM_ ) ) ;", "plan . add Activity ( b ) ;", "return plan ; }"]}
{"ids": "48554", "code": ["protected void encode Atom ( Output Stream out Stream , byte data [ ] , int offset , int len ) throws IO Exception {", "byte a , b = NUM_ , c = NUM_ ;", "int c 1 , c 2 , c 3 , c 4 ;", "a = data [ offset ] ;", "if ( len > NUM_ ) {", "b = data [ offset + NUM_ ] ; }", "if ( len > NUM_ ) {", "c = data [ offset + NUM_ ] ; }", "c 1 = ( a > > > NUM_ ) & NUM_ ;", "c 2 = ( ( a << NUM_ ) & NUM_ ) | ( ( b > > > NUM_ ) & NUM_ ) ;", "c 3 = ( ( b << NUM_ ) & NUM_ ) | ( ( c > > > NUM_ ) & NUM_ ) ;", "c 4 = c & NUM_ ;", "out Stream . write ( c 1 + STR_ ) ;", "out Stream . write ( c 2 + STR_ ) ;", "out Stream . write ( c 3 + STR_ ) ;", "out Stream . write ( c 4 + STR_ ) ;", "return ; }"]}
{"ids": "35078", "code": ["private int adjust Alpha ( int color , float factor ) {", "int alpha = Math . round ( Color . alpha ( color ) * factor ) ;", "int red = Color . red ( color ) ;", "int green = Color . green ( color ) ;", "int blue = Color . blue ( color ) ;", "return Color . argb ( alpha , red , green , blue ) ; }"]}
{"ids": "73338", "code": ["private void initialize Ratio Slider ( ) {", "ratio Slider . set Major Tick Spacing ( NUM_ ) ;", "ratio Slider . set Minor Tick Spacing ( NUM_ ) ;", "ratio Slider . set Paint Ticks ( true ) ;", "Hashtable < Integer , J Label > label Table = new Hashtable < Integer , J Label > ( ) ;", "label Table . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "label Table . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "label Table . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "label Table . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "label Table . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "ratio Slider . set Label Table ( label Table ) ;", "ratio Slider . set Paint Labels ( true ) ; }"]}
{"ids": "56405", "code": ["private static void initialize Settings ( Settings . Builder output , Settings input , boolean load Defaults ) {", "output . put ( input ) ;", "if ( use System Properties ( input ) ) {", "if ( load Defaults ) {", "for ( String prefix : PROPERTY DEFAULTS PREFIXES ) {", "output . put Properties ( prefix , System . get Properties ( ) ) ; } }", "for ( String prefix : PROPERTY PREFIXES ) {", "output . put Properties ( prefix , System . get Properties ( ) , PROPERTY DEFAULTS PREFIXES ) ; } }", "output . replace Property Placeholders ( ) ; }"]}
{"ids": "38429", "code": ["@ Override public void draw Oval ( int x , int y , int width , int height ) {", "set State To Local ( ) ;", "m printstream . println ( x Transform ( x Scale ( x ) ) + STR_ + y Transform ( y Scale ( y ) ) + STR_ + x Scale ( width ) + STR_ + y Scale ( height ) + STR_ ) ; }"]}
{"ids": "15817", "code": ["private void validate SQL Fields ( ) {", "boolean flag = controller . is Enable SQL Database Output ( ) ;", "enable SQL Database Connection . set Selected ( flag ) ;", "sql Host Label . set Enabled ( flag ) ;", "sql Host Field . set Enabled ( flag ) ;", "sql Database Label . set Enabled ( flag ) ;", "sql Database Field . set Enabled ( flag ) ;", "sql User Label . set Enabled ( flag ) ;", "sql User Field . set Enabled ( flag ) ;", "sql Password Label . set Enabled ( flag ) ;", "sql Password Field . set Enabled ( flag ) ;", "enable Zip Encoding Check Box . set Enabled ( flag ) ; }"]}
{"ids": "82265", "code": ["public void read From Object ( Object object ) {", "try {", "Method method = Bean Utils . get Read Method ( object . get Class ( ) , get Name ( ) ) ;", "if ( method != null ) {", "Object value = method . invoke ( object , null ) ;", "initialize Value ( value ) ;", "if ( value != null ) {", "for ( Iterator iter = sub Properties . iterator ( ) ; iter . has Next ( ) ; ) {", "Property sub Property = ( Property ) iter . next ( ) ;", "sub Property . read From Object ( value ) ; } } } }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "79666", "code": ["private boolean internal Offer Task ( A Frame Task task ) {", "synchronized ( m Frame Task Queue ) {", "return m Frame Task Queue . offer ( task ) ; } }"]}
{"ids": "48428", "code": ["public static boolean valid Image ( Image image ) {", "return ( image != null && image . get Width ( null ) > NUM_ && image . get Height ( null ) > NUM_ ) ; }"]}
{"ids": "44389", "code": ["protected void ping ( Inet Address address ) throws Exception {", "Socket socket = null ;", "int ping = NUM_ ;", "for ( ; ; ) {", "if ( is Debug ( ) ) {", "log ( STR_ + ping + STR_ + get Max Pings ( ) + STR_ + address + STR_ + get Port ( ) ) ; }", "try {", "socket = new Socket ( address , get Port ( ) ) ;", "break ; }", "catch ( Connect Exception ce ) {", "log ( STR_ + ping + STR_ + get Max Pings ( ) + STR_ + ce . to String ( ) + STR_ + address + STR_ + get Port ( ) ) ;", "ping ++ ;", "if ( ping <= get Max Pings ( ) ) {", "log ( STR_ + get Ping Interval Milli ( ) + STR_ ) ;", "Thread . sleep ( get Ping Interval Milli ( ) ) ; }", "else {", "break ; } } }", "if ( socket == null ) {", "throw new Connect Exception ( STR_ + get Max Pings ( ) + STR_ ) ; }", "try {", "Buffered Reader reader = new Buffered Reader ( new Input Stream Reader ( socket . get Input Stream ( ) , STR_ ) ) ;", "Print Writer writer = new Print Writer ( new Buffered Writer ( new Output Stream Writer ( socket . get Output Stream ( ) ) ) , true ) ;", "log ( STR_ + address + STR_ ) ;", "writer . println ( STR_ ) ;", "writer . flush ( ) ;", "boolean pong Received = false ;", "for ( ; ; ) {", "String answer = reader . read Line ( ) ;", "if ( answer != null ) {", "answer = answer . trim ( ) ;", "log ( STR_ + answer + STR_ ) ;", "answer = answer . trim ( ) ;", "if ( answer . equals ( STR_ ) ) {", "pong Received = true ; } }", "else {", "break ; } }", "reader . close ( ) ;", "writer . close ( ) ;", "if ( ! pong Received ) {", "throw new Connect Exception ( STR_ ) ; } }", "finally {", "socket . close ( ) ; } }"]}
{"ids": "7013", "code": ["private Image Size compute Size To Fit ( float max Side ) {", "if ( NUM_ == max Side ) {", "return new Image Size ( NUM_ , NUM_ ) ; }", "Image Size resized = new Image Size ( this ) ;", "if ( ( this . m Width > max Side ) || ( this . m Height > max Side ) ) {", "double ratio X = max Side / this . m Width ;", "double ratio Y = max Side / this . m Height ;", "double scale = Math . min ( ratio X , ratio Y ) ;", "scale = NUM_ / Integer . highest One Bit ( ( int ) Math . floor ( NUM_ / scale ) ) ;", "resized . m Width = ( int ) ( Math . floor ( resized . m Width * scale / NUM_ ) * NUM_ ) ;", "resized . m Height = ( int ) ( Math . floor ( resized . m Height * scale / NUM_ ) * NUM_ ) ; }", "return resized ; }"]}
{"ids": "70792", "code": ["public static List < Big Integer > embedded Selector To Partitions ( String selector , String type , Data Partitioner partitioner ) throws PIR Exception {", "List < Big Integer > parts ;", "int partition Bits = partitioner . get Bits ( type ) ;", "if ( partition Bits > NUM_ ) {", "int hashed Selector = Keyed Hash . hash ( STR_ , NUM_ , selector , STR_ ) ;", "parts = partitioner . to Partitions ( hashed Selector , Primitive Type Partitioner . INT ) ; }", "else {", "parts = partitioner . to Partitions ( selector , type ) ; }", "return parts ; }"]}
{"ids": "32882", "code": ["public static double stddevp ( double [ ] a , int lo , int hi ) {", "return Math . sqrt ( varp ( a , lo , hi ) ) ; }"]}
{"ids": "33375", "code": ["public Java 2 Type Script Translator ( Transpilation Handler log Handler , J Sweet Context context , JC Compilation Unit compilation Unit , boolean preserve Source Line Numbers ) {", "super ( log Handler , context , compilation Unit , new Java 2 Type Script Adapter ( context ) , preserve Source Line Numbers ) ; }"]}
{"ids": "75375", "code": ["@ Override protected void on Measure ( int width Measure Spec , int height Measure Spec ) {", "int count = get Child Count ( ) ;", "m Left Width = NUM_ ;", "m Right Width = NUM_ ;", "int max Height = NUM_ ;", "int max Width = NUM_ ;", "int child State = NUM_ ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "final View child = get Child At ( i ) ;", "if ( child . get Visibility ( ) != GONE ) {", "measure Child With Margins ( child , width Measure Spec , NUM_ , height Measure Spec , NUM_ ) ;", "final Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "if ( lp . position == Layout Params . POSITION LEFT ) {", "m Left Width += Math . max ( max Width , child . get Measured Width ( ) + lp . left Margin + lp . right Margin ) ; }", "else if ( lp . position == Layout Params . POSITION RIGHT ) {", "m Right Width += Math . max ( max Width , child . get Measured Width ( ) + lp . left Margin + lp . right Margin ) ; }", "else {", "max Width = Math . max ( max Width , child . get Measured Width ( ) + lp . left Margin + lp . right Margin ) ; }", "max Height = Math . max ( max Height , child . get Measured Height ( ) + lp . top Margin + lp . bottom Margin ) ;", "child State = combine Measured States ( child State , child . get Measured State ( ) ) ; } }", "max Width += m Left Width + m Right Width ;", "max Height = Math . max ( max Height , get Suggested Minimum Height ( ) ) ;", "max Width = Math . max ( max Width , get Suggested Minimum Width ( ) ) ;", "set Measured Dimension ( resolve Size And State ( max Width , width Measure Spec , child State ) , resolve Size And State ( max Height , height Measure Spec , child State << MEASURED HEIGHT STATE SHIFT ) ) ; }"]}
{"ids": "63021", "code": ["protected int exec ( String command , String List args ) {", "try {", "print ( command ) ;", "String List cmd = new String List ( ) ;", "cmd = cmd . plus ( command ) ;", "if ( args != null ) {", "for ( String a : args ) {", "print ( STR_ + a ) ; }", "cmd . add All ( args ) ; }", "println ( STR_ ) ;", "Process Builder pb = new Process Builder ( ) ;", "pb . command ( cmd . array ( ) ) ;", "pb . redirect Error Stream ( true ) ;", "Process p = pb . start ( ) ;", "copy In Thread ( p . get Input Stream ( ) , quiet ? null : sys Out ) ;", "p . wait For ( ) ;", "return p . exit Value ( ) ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "56753", "code": ["protected Application User build User ( Map < String , String > header Map , boolean include Roles ) {", "LOGGER . debug ( STR_ ) ;", "Map < String , String > header Names = get Header Names ( ) ;", "Application User application User = create New Application User ( ) ;", "build User Id ( application User , header Map , header Names . get ( HTTP HEADER USER ID ) ) ;", "build First Name ( application User , header Map , header Names . get ( HTTP HEADER FIRST NAME ) ) ;", "build Last Name ( application User , header Map , header Names . get ( HTTP HEADER LAST NAME ) ) ;", "build Email ( application User , header Map , header Names . get ( HTTP HEADER EMAIL ) ) ;", "build Session Id ( application User , header Map , HTTP HEADER SESSION ID ) ;", "build Session Init Time ( application User , header Map , header Names . get ( HTTP HEADER SESSION INIT TIME ) ) ;", "user Namespace Authorization Helper . build Namespace Authorizations ( application User ) ;", "if ( include Roles ) {", "build Roles ( application User , header Map , header Names . get ( HTTP HEADER ROLES ) ) ; }", "LOGGER . debug ( STR_ + application User ) ;", "return application User ; }"]}
{"ids": "42140", "code": ["@ Interruptible public static void harness End ( ) {", "Stats . stop All ( ) ;", "inside Harness = false ; }"]}
{"ids": "52829", "code": ["private Cluster < Subspace Model > run Fast DOC ( Database database , Relation < V > relation , Array Modifiable DBI Ds S , int d , int n , int m , int r ) {", "long [ ] D = null ;", "DBID Var d V = DBID Util . new Var ( ) ;", "Finite Progress iprogress = LOG . is Verbose ( ) ? new Finite Progress ( STR_ , m * n , LOG ) : null ;", "Random random = rnd . get Single Threaded Random ( ) ;", "DBID Array Iter iter = S . iter ( ) ;", "outer : for ( int i = NUM_ ; i < n ; ++ i ) {", "iter . seek ( random . next Int ( S . size ( ) ) ) ;", "for ( int j = NUM_ ; j < m ; ++ j ) {", "DBI Ds random Set = DBID Util . random Sample ( S , r , random ) ;", "long [ ] n D = Bits Util . zero ( d ) ;", "for ( int k = NUM_ ; k < d ; ++ k ) {", "if ( dimension Is Relevant ( k , relation , random Set ) ) {", "Bits Util . set I ( n D , k ) ; } }", "if ( D == null || Bits Util . cardinality ( n D ) > Bits Util . cardinality ( D ) ) {", "D = n D ;", "d V . set ( iter ) ;", "if ( Bits Util . cardinality ( D ) >= d zero ) {", "if ( iprogress != null ) {", "iprogress . set Processed ( iprogress . get Total ( ) , LOG ) ; }", "break outer ; } }", "LOG . increment Processed ( iprogress ) ; } }", "LOG . ensure Completed ( iprogress ) ;", "if ( D == null || Bits Util . cardinality ( D ) == NUM_ ) {", "return null ; }", "Subspace Maximum Distance Function df = new Subspace Maximum Distance Function ( D ) ;", "Distance Query < V > dq = database . get Distance Query ( relation , df ) ;", "Range Query < V > rq = database . get Range Query ( dq , Database Query . HINT SINGLE ) ;", "DBI Ds C = DBID Util . intersection ( S , rq . get Range For DBID ( d V , w ) ) ;", "return ( C . size ( ) > NUM_ ) ? make Cluster ( relation , C , D ) : null ; }"]}
{"ids": "71769", "code": ["public Race GUI ( String app Name ) {", "UI Manager . put ( STR_ , Boolean . FALSE ) ;", "J Frame f = new J Frame ( app Name ) ;", "f . set Default Close Operation ( J Frame . EXIT ON CLOSE ) ;", "f . set Layout ( new Border Layout ( ) ) ;", "track = new Track View ( ) ;", "f . add ( track , Border Layout . CENTER ) ;", "control Panel = new Race Control Panel ( ) ;", "f . add ( control Panel , Border Layout . SOUTH ) ;", "f . pack ( ) ;", "f . set Visible ( true ) ; }"]}
{"ids": "57111", "code": ["public static Iterable < String > to Hex Strings ( Iterable < Byte Array > arrays ) {", "Array List < String > ret = new Array List < String > ( ) ;", "for ( Byte Array array : arrays ) ret . add ( Hex String . to Hex String ( array . get ( ) ) ) ;", "return ret ; }"]}
{"ids": "5740", "code": ["public static List < Geo Time Serie > partition And Apply ( Object function , Warp Script Stack stack , Macro validator , Collection < String > bylabels , List < Geo Time Serie > ... series ) throws Warp Script Exception {", "Map < Map < String , String > , List < Geo Time Serie > > unflattened = partition And Apply Unflattened ( function , stack , validator , bylabels , series ) ;", "List < Geo Time Serie > results = new Array List < Geo Time Serie > ( ) ;", "for ( List < Geo Time Serie > l : unflattened . values ( ) ) {", "results . add All ( l ) ; }", "return results ; }"]}
{"ids": "57497", "code": ["final Work Queue register Worker ( Fork Join Worker Thread wt ) {", "Thread . Uncaught Exception Handler handler ;", "Work Queue [ ] ws ;", "int s , ps ;", "wt . set Daemon ( true ) ;", "if ( ( handler = ueh ) != null ) wt . set Uncaught Exception Handler ( handler ) ;", "do { }", "while ( ! U . compare And Swap Int ( this , INDEXSEED , s = index Seed , s += SEED INCREMENT ) || s == NUM_ ) ;", "Work Queue w = new Work Queue ( this , wt , config > > > NUM_ , s ) ;", "if ( ( ( ps = plock ) & PL LOCK ) != NUM_ || ! U . compare And Swap Int ( this , PLOCK , ps , ps += PL LOCK ) ) ps = acquire Plock ( ) ;", "int nps = ( ps & SHUTDOWN ) | ( ( ps + PL LOCK ) & ~ SHUTDOWN ) ;", "try {", "if ( ( ws = work Queues ) != null ) {", "int n = ws . length , m = n - NUM_ ;", "int r = ( s << NUM_ ) | NUM_ ;", "if ( ws [ r &= m ] != null ) {", "int probes = NUM_ ;", "int step = ( n <= NUM_ ) ? NUM_ : ( ( n > > > NUM_ ) & EVENMASK ) + NUM_ ;", "while ( ws [ r = ( r + step ) & m ] != null ) {", "if ( ++ probes >= n ) {", "work Queues = ws = Arrays . copy Of ( ws , n <<= NUM_ ) ;", "m = n - NUM_ ;", "probes = NUM_ ; } } }", "w . event Count = w . pool Index = r ;", "ws [ r ] = w ; } }", "finally {", "if ( ! U . compare And Swap Int ( this , PLOCK , ps , nps ) ) release Plock ( nps ) ; }", "wt . set Name ( worker Name Prefix . concat ( Integer . to String ( w . pool Index ) ) ) ;", "return w ; }"]}
{"ids": "16954", "code": ["public void clear ( ) {", "documents . clear ( ) ;", "fire MRU List Changed ( ) ; }"]}
{"ids": "76229", "code": ["public boolean is Directly Control Dependent On ( Basic Block ins Block , Branch b ) {", "Set < Control Flow Edge > incomming = incoming Edges Of ( ins Block ) ;", "if ( incomming . size ( ) == NUM_ ) {", "for ( Control Flow Edge e : incomming ) {", "if ( ! e . has Control Dependency ( ) && ! e . is Exception Edge ( ) ) {", "return is Directly Control Dependent On ( get Edge Source ( e ) , b ) ; } } }", "boolean is Root Dependent = is Root Dependent ( ins Block ) ;", "if ( b == null ) return is Root Dependent ;", "if ( is Root Dependent && b != null ) return false ;", "for ( Control Flow Edge e : incomming ) {", "Branch current = e . get Branch Instruction ( ) ;", "if ( e . is Exception Edge ( ) ) {", "if ( current != null ) throw new Illegal State Exception ( STR_ ) ;", "else continue ; }", "if ( current == null ) continue ;", "if ( current . equals ( b ) ) return true ; }", "return false ; }"]}
{"ids": "57557", "code": ["final boolean try Read Lock ( ) {", "Thread current = Thread . current Thread ( ) ;", "for ( ; ; ) {", "int c = get State ( ) ;", "if ( exclusive Count ( c ) != NUM_ && get Exclusive Owner Thread ( ) != current ) return false ;", "int r = shared Count ( c ) ;", "if ( r == MAX COUNT ) throw new Error ( STR_ ) ;", "if ( compare And Set State ( c , c + SHARED UNIT ) ) {", "if ( r == NUM_ ) {", "first Reader = current ;", "first Reader Hold Count = NUM_ ; }", "else if ( first Reader == current ) {", "first Reader Hold Count ++ ; }", "else {", "Hold Counter rh = cached Hold Counter ;", "if ( rh == null || rh . tid != current . get Id ( ) ) cached Hold Counter = rh = read Holds . get ( ) ;", "else if ( rh . count == NUM_ ) read Holds . set ( rh ) ;", "rh . count ++ ; }", "return true ; } } }"]}
{"ids": "65270", "code": ["public static String replace ( String text , String oldsub , String newsub , boolean case Insensitive , boolean first Only ) {", "String Builder buf ;", "int tln ;", "int oln = oldsub . length ( ) ;", "if ( oln == NUM_ ) {", "int nln = newsub . length ( ) ;", "if ( nln == NUM_ ) {", "return text ; }", "else {", "if ( first Only ) {", "return newsub + text ; }", "else {", "tln = text . length ( ) ;", "buf = new String Builder ( tln + ( tln + NUM_ ) * nln ) ;", "buf . append ( newsub ) ;", "for ( int i = NUM_ ; i < tln ; i ++ ) {", "buf . append ( text . char At ( i ) ) ;", "buf . append ( newsub ) ; }", "return buf . to String ( ) ; } } }", "else {", "oldsub = case Insensitive ? oldsub . to Lower Case ( ) : oldsub ;", "String input = case Insensitive ? text . to Lower Case ( ) : text ;", "int e = input . index Of ( oldsub ) ;", "if ( e == - NUM_ ) {", "return text ; }", "int b = NUM_ ;", "tln = text . length ( ) ;", "buf = new String Builder ( tln + Math . max ( newsub . length ( ) - oln , NUM_ ) * NUM_ ) ;", "do {", "buf . append ( text . substring ( b , e ) ) ;", "buf . append ( newsub ) ;", "b = e + oln ;", "e = input . index Of ( oldsub , b ) ; }", "while ( e != - NUM_ && ! first Only ) ;", "buf . append ( text . substring ( b ) ) ;", "return buf . to String ( ) ; } }"]}
{"ids": "83619", "code": ["public void serialize Form Def ( Form Def fd , String filepath ) {", "String hash = File Utils . get Md 5 Hash ( new File ( filepath ) ) ;", "File form Def = new File ( Collect . CACHE PATH + File . separator + hash + STR_ ) ;", "if ( ! form Def . exists ( ) ) {", "File Output Stream fos ;", "try {", "fos = new File Output Stream ( form Def ) ;", "Data Output Stream dos = new Data Output Stream ( fos ) ;", "fd . write External ( dos ) ;", "dos . flush ( ) ;", "dos . close ( ) ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "64933", "code": ["private void paint Route ( Graphics 2 D graphics , JX Map Viewer viewer , Plottable Entity entity ) {", "Set < Plottable > plottables = entity . get Plottables ( ) ;", "if ( plottables . size ( ) > NUM_ ) {", "graphics . set Color ( Color . BLACK ) ;", "graphics . set Stroke ( new Basic Stroke ( NUM_ ) ) ;", "draw Route ( plottables , graphics , viewer ) ;", "graphics . set Color ( entity . get Color ( ) ) ;", "graphics . set Stroke ( new Basic Stroke ( NUM_ ) ) ;", "draw Route ( plottables , graphics , viewer ) ; } }"]}
{"ids": "48362", "code": ["private boolean install Reply ( String alias , Input Stream in ) throws Exception {", "if ( alias == null ) {", "alias = key Alias ; }", "Pair < Key , char [ ] > objs = recover Key ( alias , store Pass , key Pass ) ;", "Private Key priv Key = ( Private Key ) objs . fst ;", "if ( key Pass == null ) {", "key Pass = objs . snd ; }", "Certificate user Cert = key Store . get Certificate ( alias ) ;", "if ( user Cert == null ) {", "Message Format form = new Message Format ( rb . get String ( STR_ ) ) ;", "Object [ ] source = { alias } ;", "throw new Exception ( form . format ( source ) ) ; }", "Collection < ? extends Certificate > c = cf . generate Certificates ( in ) ;", "if ( c . is Empty ( ) ) {", "throw new Exception ( rb . get String ( STR_ ) ) ; }", "Certificate [ ] reply Certs = c . to Array ( new Certificate [ c . size ( ) ] ) ;", "Certificate [ ] new Chain ;", "if ( reply Certs . length == NUM_ ) {", "new Chain = establish Cert Chain ( user Cert , reply Certs [ NUM_ ] ) ; }", "else {", "new Chain = validate Reply ( alias , user Cert , reply Certs ) ; }", "if ( new Chain != null ) {", "key Store . set Key Entry ( alias , priv Key , ( key Pass != null ) ? key Pass : store Pass , new Chain ) ;", "return true ; }", "else {", "return false ; } }"]}
{"ids": "47757", "code": ["public synchronized void mouse Wheel ( int wheel Amt ) {", "peer . mouse Wheel ( wheel Amt ) ;", "after Event ( ) ; }"]}
{"ids": "62071", "code": ["@ Override public int length ( ) {", "return data . length / ( format . get Frame Size ( ) * NUM_ ) ; }"]}
{"ids": "14390", "code": ["public void validate ( Set set Data ) throws Validation Exception {", "for ( Iterator iter = set Data . iterator ( ) ; iter . has Next ( ) ; ) {", "perform Validation ( ( String ) iter . next ( ) ) ; } }"]}
{"ids": "83097", "code": ["public static void delete Directory ( final File dir , boolean check For Links ) {", "if ( dir . is File ( ) ) {", "throw new Illegal Argument Exception ( STR_ + dir . get Name ( ) + STR_ ) ; }", "else if ( check For Links && is Link ( dir ) ) {", "throw new Illegal Argument Exception ( STR_ + dir . get Name ( ) + STR_ ) ; }", "if ( dir . exists ( ) ) {", "IO Utils . delete Dir ( dir , check For Links ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ + dir . get Name ( ) + STR_ ) ; } }"]}
{"ids": "80679", "code": ["private static Marshaller create Marshaller ( JAXB Context jaxb Context , String schema Path ) throws SAX Exception , JAXB Exception {", "Schema schema = Xml Parser . get Schema ( new String [ ] { schema Path } ) ;", "Marshaller jaxb Marshaller = jaxb Context . create Marshaller ( ) ;", "jaxb Marshaller . set Schema ( schema ) ;", "jaxb Marshaller . set Property ( Marshaller . JAXB FORMATTED OUTPUT , true ) ;", "jaxb Marshaller . set Property ( Marshaller . JAXB ENCODING , STR_ ) ;", "return jaxb Marshaller ; }"]}
{"ids": "63804", "code": ["public static General Path cardinal Spline ( float pts [ ] , float slack , boolean closed ) {", "General Path path = new General Path ( ) ;", "path . move To ( pts [ NUM_ ] , pts [ NUM_ ] ) ;", "return cardinal Spline ( path , pts , slack , closed , NUM_ , NUM_ ) ; }"]}
{"ids": "74799", "code": ["public static String make Method Safe ( final String S ) {", "String name = make HTML Name Safe ( S ) ;", "name = name . replace ( STR_ , STR_ ) ;", "return name ; }"]}
{"ids": "78695", "code": ["public Builder add Listen Url ( String url ) {", "if ( Url Util . is Url ( url ) ) {", "if ( m Listen Urls == null ) {", "m Listen Urls = new Hash Set < String > ( ) ; }", "m Listen Urls . add ( url ) ; }", "return this ; }"]}
{"ids": "41273", "code": ["private void expand ( int i ) {", "if ( count + i <= buf . length ) {", "return ; }", "byte [ ] newbuf = m Pool . get Buf ( ( count + i ) * NUM_ ) ;", "System . arraycopy ( buf , NUM_ , newbuf , NUM_ , count ) ;", "m Pool . return Buf ( buf ) ;", "buf = newbuf ; }"]}
{"ids": "42913", "code": ["public void remove ( Production production ) {", "productions . remove ( production ) ; }"]}
{"ids": "8906", "code": ["private void write Delay ( ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "fail ( STR_ ) ; } }"]}
{"ids": "10964", "code": ["public static void main ( String [ ] argv ) {", "Arg Parser ap = new Arg Parser ( STR_ ) ;", "ap . add ( STR_ , STR_ , NUM_ ) ;", "if ( argv . length < NUM_ ) {", "ap . bail ( STR_ , true ) ; }", "ap . parse ( argv ) ;", "String [ ] files = ap . get Arg Values ( STR_ ) ;", "if ( files != null && files [ NUM_ ] != null ) {", "String shp = files [ NUM_ ] ;", "String dbf = null ;", "try {", "dbf = shp . substring ( NUM_ , shp . last Index Of ( STR_ ) + NUM_ ) + PARAM DBF ;", "Dbf Table Model model = Dbf Table Model . get Dbf Table Model ( Prop Utils . get Resource Or File Or URL ( dbf ) ) ;", "Esri Graphic List list = Esri Graphic List . get Esri Graphic List ( Prop Utils . get Resource Or File Or URL ( shp ) , null , null ) ;", "logger . info ( list . get Description ( ) ) ;", "Esri Shape Export ese = new Esri Shape Export ( list , model , null ) ;", "ese . export ( ) ; }", "catch ( Malformed URL Exception murle ) {", "logger . warning ( STR_ + murle . get Message ( ) ) ; }", "catch ( Null Pointer Exception npe ) {", "logger . warning ( STR_ ) ; }", "catch ( Exception exception ) {", "logger . warning ( STR_ + exception . get Message ( ) ) ;", "exception . print Stack Trace ( ) ; } }", "else {", "ap . bail ( STR_ , true ) ; }", "System . exit ( NUM_ ) ; }"]}
{"ids": "5493", "code": ["public Partial Hull ( I Point first , I Point second ) {", "points . add ( first ) ;", "points . add ( second ) ; }"]}
{"ids": "52492", "code": ["public static Sorted Set < Interval > find Full Availability Gaps ( Set < Interval > available Intervals , Set < Interval > needed Intervals ) {", "Comparator < Interval > interval Start Comparator = new Interval Start Comparator ( ) ;", "Sorted Set < Interval > sorted Available Intervals = new Tree Set < > ( interval Start Comparator ) ;", "sorted Available Intervals . add All ( available Intervals ) ;", "Sorted Set < Interval > sorted Needed Intervals = new Tree Set < > ( interval Start Comparator ) ;", "sorted Needed Intervals . add All ( needed Intervals ) ;", "Iterator < Interval > available Intervals Iterator = sorted Available Intervals . iterator ( ) ;", "if ( ! available Intervals Iterator . has Next ( ) ) {", "return sorted Needed Intervals ; }", "Interval available = available Intervals Iterator . next ( ) ;", "Sorted Set < Interval > missing Intervals = new Tree Set < > ( interval Start Comparator ) ;", "for ( Interval needed : sorted Needed Intervals ) {", "while ( ! can Determine Availability ( available , needed ) && available Intervals Iterator . has Next ( ) ) {", "available = available Intervals Iterator . next ( ) ; }", "if ( available . contains ( needed ) ) {", "continue ; }", "missing Intervals . add ( needed ) ; }", "return missing Intervals ; }"]}
{"ids": "79459", "code": ["public static List < String > split ( String str , String delim ) {", "List < String > split List = null ;", "String Tokenizer st = null ;", "if ( str == null ) return split List ;", "if ( delim != null ) st = new String Tokenizer ( str , delim ) ;", "else st = new String Tokenizer ( str ) ;", "if ( st != null && st . has More Tokens ( ) ) {", "split List = new Linked List < String > ( ) ;", "while ( st . has More Tokens ( ) ) split List . add ( st . next Token ( ) ) ; }", "return split List ; }"]}
{"ids": "2119", "code": ["public void write Exif ( String jpeg File Name , String exif Out File Name ) throws File Not Found Exception , IO Exception {", "if ( jpeg File Name == null || exif Out File Name == null ) {", "throw new Illegal Argument Exception ( NULL ARGUMENT STRING ) ; }", "Input Stream is = null ;", "is = new File Input Stream ( jpeg File Name ) ;", "write Exif ( is , exif Out File Name ) ;", "is . close ( ) ; }"]}
{"ids": "66917", "code": ["public boolean is Gen Class ( Soot Class clz ) {", "return gen Classes . contains ( clz . get Name ( ) ) ; }"]}
{"ids": "20431", "code": ["public boolean has Extra Still Image ( ) {", "return is Apng ( ) && ! firs Idat Apng Frame ; }"]}
{"ids": "86327", "code": ["public void remove Change Listener ( final PT Property Change Listener listener ) {", "change Listeners . remove ( listener ) ; }"]}
{"ids": "63525", "code": ["public static Result Set optimize In Join Select ( ) {", "Simple Result Set rs = new Simple Result Set ( ) ;", "rs . add Column ( STR_ , Types . INTEGER , NUM_ , NUM_ ) ;", "rs . add Row ( NUM_ ) ;", "return rs ; }"]}
{"ids": "84673", "code": ["public Partition Substitution Model parse PAUP Block ( Beauti Options options , List < Char Set > char Sets ) throws Import Exception , IO Exception {", "Partition Substitution Model model = new Partition Substitution Model ( options , STR_ ) ;", "read Top Level Block ( options , model , char Sets ) ;", "return model ; }"]}
{"ids": "16505", "code": ["private void z Event Toggle Time Menu Button Mouse Pressed ( Mouse Event e ) {", "toggle Popup ( ) ; }"]}
{"ids": "65778", "code": ["private void add Line ( Grid Field field , V Editor editor , boolean mandatory ) {", "log . fine ( STR_ + field ) ;", "J Label label = V Editor Factory . get Label ( field ) ;", "label . set Label For ( ( Component ) editor ) ;", "editor . set Read Write ( true ) ;", "editor . set Mandatory ( mandatory ) ;", "field . add Property Change Listener ( editor ) ;", "if ( m new Row ) {", "m gbc . gridy = m line ++ ;", "m gbc . gridx = NUM_ ; }", "else m gbc . gridx = NUM_ ;", "m gbc . insets = m label Insets ;", "m gbc . fill = Grid Bag Constraints . HORIZONTAL ;", "m gbc . weightx = NUM_ ;", "parameter Panel . add ( label , m gbc ) ;", "if ( m new Row ) m gbc . gridx = NUM_ ;", "else m gbc . gridx = NUM_ ;", "m gbc . insets = m field Insets ;", "m gbc . fill = Grid Bag Constraints . HORIZONTAL ;", "m gbc . weightx = NUM_ ;", "parameter Panel . add ( ( Component ) editor , m gbc ) ;", "m new Row = ! m new Row ; }"]}
{"ids": "47701", "code": ["protected Object lazily Load Desktop Property ( String name ) {", "return null ; }"]}
{"ids": "23904", "code": ["@ edu . umd . cs . findbugs . annotations . Suppress Warnings ( value = STR_ , justification = STR_ ) public void init Recovered Version ( T member , Region Version Holder < T > v , boolean latest Oplog ) {", "Region Version Holder < T > recovered = v . clone ( ) ;", "if ( member == null || member . equals ( my Id ) ) {", "synchronized ( local Exceptions ) {", "if ( latest Oplog || local Version . get ( ) == NUM_ ) {", "local Exceptions = recovered ;", "if ( logger . is Trace Enabled ( Log Marker . RVV ) ) {", "logger . trace ( Log Marker . RVV , STR_ , recovered . version ) ; }", "local Version . set ( recovered . version ) ; } } }", "else {", "Long gc Version = member To GC Version . get ( member ) ;", "synchronized ( member To Version ) {", "Region Version Holder < T > old Version = member To Version . get ( member ) ;", "if ( latest Oplog || old Version == null || old Version . version == NUM_ ) {", "if ( gc Version != null ) {", "recovered . remove Exceptions Older Than ( gc Version ) ; }", "member To Version . put ( member , recovered ) ; } } } }"]}
{"ids": "56529", "code": ["protected void notify Click Listeners About Click ( int item ) {", "if ( clicking Listeners . size ( ) > NUM_ ) {", "for ( On Wheel Clicked Listener listener : clicking Listeners ) {", "listener . on Item Clicked ( this , item ) ; } }", "else {", "set Current Item ( item , true , NUM_ ) ; } }"]}
{"ids": "38743", "code": ["@ Override public synchronized void disconnection Notification ( String event Name , Object source ) {", "List < Object > listenees = m listenees . get ( event Name ) ;", "if ( listenees != null ) {", "listenees . remove ( source ) ;", "if ( listenees . size ( ) == NUM_ ) {", "m listenees . remove ( event Name ) ; } }", "if ( event Name . compare To ( STR_ ) == NUM_ ) {", "stop ( ) ; } }"]}
{"ids": "14862", "code": ["private String replace Illegal Char ( String data , char ch , String replacement ) {", "int idx = NUM_ ;", "String Builder buffer = new String Builder ( data . length ( ) * NUM_ ) ;", "while ( ( data != null ) && ( idx = data . index Of ( ch ) ) != - NUM_ ) {", "buffer . append ( data . substring ( NUM_ , idx ) ) ;", "buffer . append ( replacement ) ;", "data = data . substring ( idx + NUM_ ) ; }", "if ( ( data != null ) && ( data . length ( ) > NUM_ ) ) {", "buffer . append ( data ) ; }", "return buffer . to String ( ) ; }"]}
{"ids": "71665", "code": ["public org . dom 4 j . Attribute create Attribute ( Element elem , Attribute attr ) {", "return factory . create Attribute ( elem , create Q Name ( attr . get Name ( ) ) , attr . get Value ( ) ) ; }"]}
{"ids": "54159", "code": ["public Log Entry ( ) {", "index = ENTRY INDEX . get And Increment ( ) ;", "time = System . current Time Millis ( ) ; }"]}
{"ids": "242", "code": ["public boolean is Signature Valid ( ) {", "return EC Key . verify ( Utils . double Digest ( content ) , signature , params . get Alert Signing Key ( ) ) ; }"]}
{"ids": "62420", "code": ["private void validate Create Information ( Date start Time , String task Name ) {", "Assert . not Null ( start Time , STR_ ) ;", "if ( task Name != null && task Name . length ( ) > this . max Task Name Size ) {", "throw new Illegal Argument Exception ( STR_ + this . max Task Name Size + STR_ ) ; } }"]}
{"ids": "76485", "code": ["private static Object increment ( final Object object , final Number amount , final Json Pointer field ) throws Bad Request Exception {", "if ( object instanceof Long ) {", "return ( ( Long ) object ) + amount . long Value ( ) ; }", "else if ( object instanceof Integer ) {", "return ( ( Integer ) object ) + amount . int Value ( ) ; }", "else if ( object instanceof Float ) {", "return ( ( Float ) object ) + amount . float Value ( ) ; }", "else if ( object instanceof Double ) {", "return ( ( Double ) object ) + amount . double Value ( ) ; }", "else {", "throw new Bad Request Exception ( STR_ + field + STR_ ) ; } }"]}
{"ids": "59714", "code": ["public static Linked Hash Set < Entity > find Entites ( Linked Hash Set < Entity > matches , Hash Set < Entity > checked , Entity entity , Predicate predicate ) {", "if ( ! checked . add ( entity ) ) {", "return matches ; }", "if ( predicate . matches ( entity ) ) {", "matches . add ( entity ) ; }", "for ( Ref Node ref Node : entity . get Children ( Ref Node . class ) ) {", "Entity e = ref Node . get Reference ( ) ;", "if ( e != null ) {", "find Entites ( matches , checked , e , predicate ) ; } }", "for ( To Many Node to Many Node : entity . get Children ( To Many Node . class ) ) {", "for ( Entity e : to Many Node . get List ( ) ) {", "if ( e != null ) {", "find Entites ( matches , checked , e , predicate ) ; } } }", "return matches ; }"]}
{"ids": "11127", "code": ["protected OM Geometry create MGRS Rectangle ( MGRS Point mgrs Base Point , double voffset , double hoffset , double interval , Ellipsoid ellipsoid ) {", "double [ ] llpoints = new double [ NUM_ ] ;", "double easting = mgrs Base Point . easting + hoffset ;", "double northing = mgrs Base Point . northing + voffset ;", "int zone number = mgrs Base Point . zone number ;", "char zone letter = mgrs Base Point . zone letter ;", "Lat Lon Point llp 1 = new Lat Lon Point . Double ( ) ;", "llp 1 = MGRS Point . MGR Sto LL ( ellipsoid , northing , easting , zone number , zone letter , llp 1 ) ;", "llpoints [ NUM_ ] = llp 1 . get Y ( ) ;", "llpoints [ NUM_ ] = llp 1 . get X ( ) ;", "llpoints [ NUM_ ] = llp 1 . get Y ( ) ;", "llpoints [ NUM_ ] = llp 1 . get X ( ) ;", "MGRS Point . MGR Sto LL ( ellipsoid , northing , easting + interval , zone number , zone letter , llp 1 ) ;", "llpoints [ NUM_ ] = llp 1 . get Y ( ) ;", "llpoints [ NUM_ ] = llp 1 . get X ( ) ;", "MGRS Point . MGR Sto LL ( ellipsoid , northing + interval , easting + interval , zone number , zone letter , llp 1 ) ;", "llpoints [ NUM_ ] = llp 1 . get Y ( ) ;", "llpoints [ NUM_ ] = llp 1 . get X ( ) ;", "MGRS Point . MGR Sto LL ( ellipsoid , northing + interval , easting , zone number , zone letter , llp 1 ) ;", "llpoints [ NUM_ ] = llp 1 . get Y ( ) ;", "llpoints [ NUM_ ] = llp 1 . get X ( ) ;", "MGRS Point mgrs = new MGRS Point ( northing , easting , zone number , zone letter ) ;", "mgrs . resolve ( mgrs Base Point . get Accuracy ( ) ) ;", "String mgrs String = mgrs . get MGRS ( ) ;", "if ( Debug . debugging ( STR_ ) ) Debug . output ( STR_ + mgrs String + STR_ + mgrs . get Accuracy ( ) ) ;", "Polygon Geometry poly = new Polygon Geometry . LL ( llpoints , OM Graphic . DECIMAL DEGREES , ( interval <= NUM_ ? OM Graphic . LINETYPE STRAIGHT : OM Graphic . LINETYPE GREATCIRCLE ) ) ;", "poly . put Attribute ( OM Graphic . APP OBJECT , mgrs String ) ;", "return poly ; }"]}
{"ids": "13994", "code": ["public String to XML String ( ) throws XACML Exception {", "return to XML String ( true , false ) ; }"]}
{"ids": "6794", "code": ["public void add Memory Pressure Listener ( Memory Pressure Listener listener ) {", "m Listeners . add ( listener ) ; }"]}
{"ids": "40837", "code": ["private void reset For OT ( ) {", "if ( bottom OT && home Score == away Score ) {", "game Yard Line = NUM_ ;", "game Yards Need = NUM_ ;", "game Down = NUM_ ;", "num OT ++ ;", "if ( ( num OT % NUM_ ) == NUM_ ) game Poss = true ;", "else game Poss = false ;", "game Time = - NUM_ ;", "bottom OT = false ; }", "else if ( ! bottom OT ) {", "game Poss = ! game Poss ;", "game Yard Line = NUM_ ;", "game Yards Need = NUM_ ;", "game Down = NUM_ ;", "game Time = - NUM_ ;", "bottom OT = true ; }", "else {", "playing OT = false ; } }"]}
{"ids": "36829", "code": ["public synchronized void start Polling ( ) {", "m scheduler . schedule At Fixed Rate ( m notification Poller , NUM_ , NUM_ , Time Unit . MILLISECONDS ) ; }"]}
{"ids": "30917", "code": ["private void drop Proxy ( Proxy Reg reg ) {", "synchronized ( caches ) {", "Iterator iter = caches . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Lookup Cache Impl cache = ( Lookup Cache Impl ) iter . next ( ) ;", "cache . remove Proxy Reg ( reg ) ; } } }"]}
{"ids": "36883", "code": ["public long to Long ( ) {", "return m value . long Value ( ) ; }"]}
{"ids": "45439", "code": ["public static void move To Directory ( File src , File dest Dir , boolean create Dest Dir ) throws IO Exception {", "if ( src == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( dest Dir == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( ! src . exists ( ) ) {", "throw new File Not Found Exception ( STR_ + src + STR_ ) ; }", "if ( src . is Directory ( ) ) {", "move Directory To Directory ( src , dest Dir , create Dest Dir ) ; }", "else {", "move File To Directory ( src , dest Dir , create Dest Dir ) ; } }"]}
{"ids": "82586", "code": ["public static int copy And Close Both ( Reader input , Writer output ) throws IO Exception {", "try {", "return copy And Close Output ( input , output ) ; }", "finally {", "input . close ( ) ; } }"]}
{"ids": "11858", "code": ["protected void write Header ( ) throws IO Exception {", "header = new byte [ SHAPE FILE HEADER LENGTH ] ;", "write BE Int ( header , NUM_ , SHAPE FILE CODE ) ;", "write BE Int ( header , NUM_ , NUM_ ) ;", "write LE Int ( header , NUM_ , SHAPE FILE VERSION ) ;", "write LE Int ( header , NUM_ , SHAPE TYPE NULL ) ;", "write LE Double ( header , NUM_ , NUM_ ) ;", "write LE Double ( header , NUM_ , NUM_ ) ;", "write LE Double ( header , NUM_ , NUM_ ) ;", "write LE Double ( header , NUM_ , NUM_ ) ;", "raf . seek ( NUM_ ) ;", "raf . write ( header , NUM_ , SHAPE FILE HEADER LENGTH ) ; }"]}
{"ids": "67966", "code": ["public String hash Key For Disk ( String key ) {", "String cache Key ;", "try {", "final Message Digest m Digest = Message Digest . get Instance ( STR_ ) ;", "m Digest . update ( key . get Bytes ( ) ) ;", "cache Key = bytes To Hex String ( m Digest . digest ( ) ) ; }", "catch ( No Such Algorithm Exception e ) {", "cache Key = String . value Of ( key . hash Code ( ) ) ; }", "return cache Key ; }"]}
{"ids": "77835", "code": ["private Favorite pack Favorite ( Cursor c ) {", "Favorite favorite = new Favorite ( ) ;", "favorite . id = c . get Long ( ID INDEX ) ;", "favorite . screen = c . get Int ( SCREEN INDEX ) ;", "favorite . container = c . get Int ( CONTAINER INDEX ) ;", "favorite . cell X = c . get Int ( CELLX INDEX ) ;", "favorite . cell Y = c . get Int ( CELLY INDEX ) ;", "favorite . span X = c . get Int ( SPANX INDEX ) ;", "favorite . span Y = c . get Int ( SPANY INDEX ) ;", "favorite . icon Type = c . get Int ( ICON TYPE INDEX ) ;", "if ( favorite . icon Type == Favorites . ICON TYPE RESOURCE ) {", "String icon Package = c . get String ( ICON PACKAGE INDEX ) ;", "if ( ! Text Utils . is Empty ( icon Package ) ) {", "favorite . icon Package = icon Package ; }", "String icon Resource = c . get String ( ICON RESOURCE INDEX ) ;", "if ( ! Text Utils . is Empty ( icon Resource ) ) {", "favorite . icon Resource = icon Resource ; } }", "if ( favorite . icon Type == Favorites . ICON TYPE BITMAP ) {", "byte [ ] blob = c . get Blob ( ICON INDEX ) ;", "if ( blob != null && blob . length > NUM_ ) {", "favorite . icon = blob ; } }", "String title = c . get String ( TITLE INDEX ) ;", "if ( ! Text Utils . is Empty ( title ) ) {", "favorite . title = title ; }", "String intent Description = c . get String ( INTENT INDEX ) ;", "if ( ! Text Utils . is Empty ( intent Description ) ) {", "try {", "Intent intent = Intent . parse Uri ( intent Description , NUM_ ) ;", "intent . remove Extra ( Item Info . EXTRA PROFILE ) ;", "favorite . intent = intent . to Uri ( NUM_ ) ; }", "catch ( URI Syntax Exception e ) {", "Log . e ( TAG , STR_ , e ) ; } }", "favorite . item Type = c . get Int ( ITEM TYPE INDEX ) ;", "if ( favorite . item Type == Favorites . ITEM TYPE APPWIDGET ) {", "favorite . app Widget Id = c . get Int ( APPWIDGET ID INDEX ) ;", "String app Widget Provider = c . get String ( APPWIDGET PROVIDER INDEX ) ;", "if ( ! Text Utils . is Empty ( app Widget Provider ) ) {", "favorite . app Widget Provider = app Widget Provider ; } }", "return favorite ; }"]}
{"ids": "44552", "code": ["public static void unregister ( SPIN Thread Functions old ) {", "if ( old != null ) {", "local Functions . set ( old ) ; }", "else {", "local Functions . remove ( ) ; } }"]}
{"ids": "11050", "code": ["public static boolean load Properties ( Properties properties , Input Stream props In ) {", "try {", "properties . load ( props In ) ;", "return true ; }", "catch ( java . io . IO Exception e ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . warning ( STR_ ) ; }", "return false ; } }"]}
{"ids": "32894", "code": ["public Complex sin ( ) {", "return new Complex ( Math . sin ( re ) * Math . cosh ( im ) , Math . cos ( re ) * Math . sinh ( im ) ) ; }"]}
{"ids": "41502", "code": ["@ On Click ( R . id . dismiss button ) public void on Dismiss Click ( View view ) {", "if ( System Clock . elapsed Realtime ( ) - m Last Click Time < NUM_ ) {", "return ; }", "m Last Click Time = System Clock . elapsed Realtime ( ) ;", "dismiss Offer ( get Adapter Position ( ) ) ;", "if ( snackbar != null ) {", "snackbar . dismiss ( ) ; } }"]}
{"ids": "71583", "code": ["public Table find Table ( String name ) {", "return find Table ( name , false ) ; }"]}
{"ids": "40411", "code": ["public static void append String ( final String Buffer buf , final String s ) {", "buf . append ( STR_ ) ;", "for ( int i = NUM_ ; i < s . length ( ) ; ++ i ) {", "char c = s . char At ( i ) ;", "if ( c == STR_ ) {", "buf . append ( STR_ ) ; }", "else if ( c == STR_ ) {", "buf . append ( STR_ ) ; }", "else if ( c == STR_ ) {", "buf . append ( STR_ ) ; }", "else if ( c == STR_ ) {", "buf . append ( STR_ ) ; }", "else if ( c < NUM_ || c > NUM_ ) {", "buf . append ( STR_ ) ;", "if ( c < NUM_ ) {", "buf . append ( STR_ ) ; }", "else if ( c < NUM_ ) {", "buf . append ( STR_ ) ; }", "else if ( c < NUM_ ) {", "buf . append ( STR_ ) ; }", "buf . append ( Integer . to String ( c , NUM_ ) ) ; }", "else {", "buf . append ( c ) ; } }", "buf . append ( STR_ ) ; }"]}
{"ids": "6638", "code": ["public void draw ( final Graphics g , final int height , final int width ) {", "int constant Dim ;", "int changing Dim ;", "if ( orientation == X AXIS ) {", "changing Dim = width ;", "constant Dim = height ; }", "else {", "changing Dim = height ;", "constant Dim = width ; }", "int dim Step ;", "if ( fixed Steps ) {", "dim Step = changing Dim / STEPS ; }", "else {", "dim Step = NUM_ ;", "STEPS = changing Dim / dim Step ; }", "float red = red T ;", "float green = green T ;", "float blue = blue T ;", "int offset = NUM_ ;", "for ( int i = NUM_ ; i < STEPS ; i ++ ) {", "Color c = new Color ( round ( red ) , round ( green ) , round ( blue ) ) ;", "g . set Color ( c ) ;", "draw Rect ( g , offset , constant Dim , dim Step ) ;", "offset += dim Step ;", "float value = shader . get Value ( ( float ) i / ( float ) STEPS ) ;", "red = red T + ( red B - red T ) * value ;", "green = green T + ( green B - green T ) * value ;", "blue = blue T + ( blue B - blue T ) * value ; }", "Color c = new Color ( round ( red ) , round ( green ) , round ( blue ) ) ;", "g . set Color ( c ) ;", "draw Rect ( g , offset , constant Dim , changing Dim - offset ) ; }"]}
{"ids": "63801", "code": ["public static double [ ] convex Hull ( double [ ] pts , int len , float [ ] angles , int [ ] idx , int [ ] stack ) {", "int plen = len / NUM_ - NUM_ ;", "if ( len < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( angles . length < plen || idx . length < plen || stack . length < len / NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "int i 0 = NUM_ ;", "for ( int i = NUM_ ; i < len ; i += NUM_ ) {", "if ( pts [ i + NUM_ ] < pts [ i 0 + NUM_ ] ) {", "i 0 = i ; }", "else if ( pts [ i + NUM_ ] == pts [ i 0 + NUM_ ] ) {", "i 0 = ( pts [ i ] < pts [ i 0 ] ? i : i 0 ) ; } }", "for ( int i = NUM_ , j = NUM_ ; i < len ; i += NUM_ ) {", "if ( i == i 0 ) continue ;", "angles [ j ] = ( float ) Math . atan 2 ( pts [ i + NUM_ ] - pts [ i 0 + NUM_ ] , pts [ i ] - pts [ i 0 ] ) ;", "idx [ j ++ ] = i ; }", "Array Lib . sort ( angles , idx , plen ) ;", "float angle = angles [ NUM_ ] ;", "int ti = NUM_ , tj = idx [ NUM_ ] ;", "for ( int i = NUM_ ; i < plen ; i ++ ) {", "int j = idx [ i ] ;", "if ( angle == angles [ i ] ) {", "double x 1 = pts [ tj ] - pts [ i 0 ] ;", "double y 1 = pts [ tj + NUM_ ] - pts [ i 0 + NUM_ ] ;", "double x 2 = pts [ j ] - pts [ i 0 ] ;", "double y 2 = pts [ j + NUM_ ] - pts [ i 0 + NUM_ ] ;", "double d 1 = x 1 * x 1 + y 1 * y 1 ;", "double d 2 = x 2 * x 2 + y 2 * y 2 ;", "if ( d 1 >= d 2 ) {", "idx [ i ] = - NUM_ ; }", "else {", "idx [ ti ] = - NUM_ ;", "angle = angles [ i ] ;", "ti = i ;", "tj = j ; } }", "else {", "angle = angles [ i ] ;", "ti = i ;", "tj = j ; } }", "int sp = NUM_ ;", "stack [ sp ++ ] = i 0 ;", "int j = NUM_ ;", "for ( int k = NUM_ ; k < NUM_ ; j ++ ) {", "if ( idx [ j ] != - NUM_ ) {", "stack [ sp ++ ] = idx [ j ] ;", "k ++ ; } }", "for ( ; j < plen ; j ++ ) {", "if ( idx [ j ] == - NUM_ ) continue ;", "while ( is Non Left ( i 0 , stack [ sp - NUM_ ] , stack [ sp - NUM_ ] , idx [ j ] , pts ) ) {", "sp -- ; }", "stack [ sp ++ ] = idx [ j ] ; }", "double [ ] hull = new double [ NUM_ * sp ] ;", "for ( int i = NUM_ ; i < sp ; i ++ ) {", "hull [ NUM_ * i ] = pts [ stack [ i ] ] ;", "hull [ NUM_ * i + NUM_ ] = pts [ stack [ i ] + NUM_ ] ; }", "return hull ; }"]}
{"ids": "2326", "code": ["private void send Messages ( ) {", "List < Murmur Message > messages = get Messages ( NUM_ ) ;", "Murmur Message exchange Info Message = new Murmur Message ( STR_ , Integer . to String ( messages . size ( ) ) , NUM_ ) ;", "if ( length Value Write ( out , exchange Info Message . to JSON ( Murmur Application . get Context ( ) , NUM_ , NUM_ ) ) ) {", "for ( Murmur Message message : messages ) {", "List < Murmur Message > packet = new Array List < > ( ) ;", "packet . add ( message ) ;", "Cleartext Messages messages Message = new Cleartext Messages ( ( Array List < Murmur Message > ) packet ) ;", "length Value Write ( out , messages Message . to Json ( Murmur Application . get Context ( ) ) ) ; } } }"]}
{"ids": "1141", "code": ["protected void init ( String str ) {", "int len = str . length ( ) ;", "text = new char [ len ] ;", "lc Text = new char [ len ] ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "char c = str . char At ( i ) ;", "text [ i ] = c ;", "if ( c == STR_ || c == STR_ || c == STR_ ) {", "lc Text [ i ] = STR_ ; }", "else lc Text [ i ] = ( ( c >= STR_ && c <= STR_ ) || ( c >= STR_ && c <= STR_ ) ) ? c : Character . to Lower Case ( c ) ; } }"]}
{"ids": "30847", "code": ["private void update Attrs ( Svc Reg reg , Entry Rep entry , Object [ ] values ) {", "Entry Class eclass = entry . eclass ;", "for ( int fldidx = values . length ; -- fldidx >= NUM_ ; ) {", "Object oval = entry . fields [ fldidx ] ;", "Object nval = values [ fldidx ] ;", "if ( nval != null && ! nval . equals ( oval ) ) {", "eclass = get Defining Class ( eclass , fldidx ) ;", "Hash Map map = add Attr ( reg , eclass , fldidx , nval ) ;", "entry . fields [ fldidx ] = nval ;", "if ( has Attr ( reg , eclass , fldidx , oval ) ) continue ;", "Array List regs = ( Array List ) map . get ( oval ) ;", "regs . remove ( regs . index Of ( reg ) ) ;", "if ( regs . is Empty ( ) ) map . remove ( oval ) ; } } }"]}
{"ids": "83200", "code": ["public void finalize Network Construction ( ) {", "Set < Motif Link > key Set = node Sets Departing From Link . key Set ( ) ;", "nodes With Link = new Hash Map < Motif Link , Array List < Node > > ( key Set . size ( ) ) ;", "for ( Motif Link motif Link : key Set ) {", "Set < Node > nodes = node Sets Departing From Link . get ( motif Link ) ;", "Array List < Node > n = new Array List < Node > ( nodes ) ;", "Collections . sort ( n ) ;", "nodes With Link . put ( motif Link , n ) ; }", "node Sets Departing From Link = null ; }"]}
{"ids": "1647", "code": ["public Collection < AIS Validation Failure > failures ( ) {", "return Collections . unmodifiable Collection ( failure List ) ; }"]}
{"ids": "59975", "code": ["public static Get Inactive Images Response check Get Inactive Images Response ( Get Inactive Images Response response ) throws Rpc Exception {", "logger . info ( STR_ , response ) ;", "switch ( response . get Result ( ) ) {", "case OK :", "break ;", "case SYSTEM ERROR :", "throw new System Error Exception ( response . get Error ( ) ) ;", "case DATASTORE NOT FOUND :", "throw new Datastore Not Found Exception ( response . get Error ( ) ) ;", "case OPERATION IN PROGRESS :", "throw new Operation In Progress Exception ( response . get Error ( ) ) ;", "default :", "throw new Rpc Exception ( String . format ( STR_ , response . get Result ( ) ) ) ; }", "return response ; }"]}
{"ids": "68720", "code": ["public double semi Deviation ( ) {", "return Math . sqrt ( semi Variance ( ) ) ; }"]}
{"ids": "34278", "code": ["private void check Posts Display On Recycler View ( List < Post > posts To Check , int position ) {", "int column Count = NUM_ ;", "int size = posts To Check . size ( ) + position ;", "int pos = NUM_ ;", "for ( int i = position ; i < size ; i ++ ) {", "check Item At Position ( i , posts To Check . get ( pos ) ) ;", "if ( ( ( i + NUM_ ) % column Count ) == NUM_ ) {", "int next Row Start = i + column Count ;", "int next Row End = next Row Start - column Count + NUM_ ;", "for ( int n = next Row Start ; n >= next Row End ; n -- ) {", "check Item At Position ( n , posts To Check . get ( n - position ) ) ; }", "i = i + column Count ; }", "pos ++ ; } }"]}
{"ids": "42375", "code": ["private void add Dependent Classes To Worklist ( GV Congruence Class c ) {", "for ( Value Graph Vertex v : c ) {", "for ( Enumeration < Graph Node > e = v . in Nodes ( ) ; e . has More Elements ( ) ; ) {", "Value Graph Vertex in = ( Value Graph Vertex ) e . next Element ( ) ;", "int vn = in . get Value Number ( ) ;", "GV Congruence Class x = B . get ( vn ) ;", "work List . push ( x ) ; } } }"]}
{"ids": "6844", "code": ["public synchronized JSON Object to JSON Object ( ) {", "JSON Object res = new JSON Object ( ) ;", "res . put All ( this ) ;", "return res ; }"]}
{"ids": "6491", "code": ["private Shape create Ellipse Internal ( int x , int y , int w , int h ) {", "ellipse . set Frame ( x , y , w , h ) ;", "return ellipse ; }"]}
{"ids": "75514", "code": ["public static String write ( String Builder sb , String ... strings ) {", "for ( String string : strings ) sb . append ( string ) ;", "return sb . to String ( ) ; }"]}
{"ids": "4584", "code": ["public Import Folder Validation validate ( final String path ) {", "Check . not Null ( path , STR_ ) ;", "if ( validation Cache == null ) {", "validation Cache = new Hash Map ( ) ; }", "else {", "if ( validation Cache . contains Key ( path ) ) {", "return ( Import Folder Validation ) validation Cache . get ( path ) ; } }", "final Import Folder Validation validation = compute Validation ( path ) ;", "validation Cache . put ( path , validation ) ;", "return validation ; }"]}
{"ids": "15168", "code": ["private static byte [ ] hmac sha ( String crypto , byte [ ] key Bytes , byte [ ] text ) {", "try {", "Mac hmac ;", "hmac = Mac . get Instance ( crypto ) ;", "Secret Key Spec mac Key = new Secret Key Spec ( key Bytes , STR_ ) ;", "hmac . init ( mac Key ) ;", "return hmac . do Final ( text ) ; }", "catch ( General Security Exception gse ) {", "throw new Undeclared Throwable Exception ( gse ) ; } }"]}
{"ids": "21019", "code": ["public static String fetch Cg Name ( String cluster Cg Name ) {", "String cg Name = null ;", "if ( cluster Cg Name != null && ! cluster Cg Name . is Empty ( ) ) {", "String [ ] tmp = cluster Cg Name . split ( SPLITTER ) ;", "cg Name = tmp [ NUM_ ] ; }", "return cg Name ; }"]}
{"ids": "59715", "code": ["public void add ( int index , Entity entity ) {", "if ( entities . contains ( entity ) ) {", "throw new Illegal State Exception ( STR_ + entity + STR_ ) ; }", "if ( entity . get Entity Type ( ) != entity Type ) {", "throw new Illegal State Exception ( STR_ + entity . get Entity Type ( ) + STR_ + get Parent ( ) + STR_ + get Name ( ) ) ; }", "if ( entity . is Clearly Not In Database ( ) ) {", "new Entities . add ( entity ) ; }", "entities . add ( index , entity ) ; }"]}
{"ids": "44810", "code": ["public Distributed Log Configuration ( ) {", "super ( ) ;", "add Configuration ( new System Configuration ( ) ) ; }"]}
{"ids": "27950", "code": ["public static double sample Standard Deviation ( int size , double sample Variance ) {", "double s , Cn ;", "int n = size ;", "s = Math . sqrt ( sample Variance ) ;", "if ( n > NUM_ ) {", "Cn = NUM_ + NUM_ / ( NUM_ * ( n - NUM_ ) ) ; }", "else {", "Cn = Math . sqrt ( ( n - NUM_ ) * NUM_ ) * Gamma . gamma ( ( n - NUM_ ) * NUM_ ) / Gamma . gamma ( n * NUM_ ) ; }", "return Cn * s ; }"]}
{"ids": "27165", "code": ["void normalize ( ) throws IO Exception {", "int end = chars . length ( ) ;", "if ( end == NUM_ ) {", "return ; }", "int pos = NUM_ ;", "int codepoint = Character . code Point At ( chars , NUM_ ) ;", "boolean escaped = false ;", "for ( int i = NUM_ ; i < end ; ) {", "int char Count = Character . char Count ( codepoint ) ;", "int i 2 = i + char Count ;", "int next Codepoint = i 2 < end ? Character . code Point At ( chars , i 2 ) : - NUM_ ;", "if ( escaped ) {", "escaped = false ;", "if ( escape One Codepoint ( pos , i - NUM_ , codepoint , next Codepoint ) ) {", "pos = i 2 ; } }", "else if ( codepoint == STR_ ) {", "escaped = true ; }", "else if ( escape One Codepoint ( pos , i , codepoint , next Codepoint ) ) {", "pos = i 2 ; }", "i = i 2 ;", "codepoint = next Codepoint ; }", "out . append ( chars , pos , end ) ; }"]}
{"ids": "11763", "code": ["protected void rebuild List Model ( ) {", "Default List Model dlm = ( Default List Model ) get List Model ( ) ;", "OM Graphic List list = get List ( ) ;", "int [ ] selected Indicies = null ;", "if ( list != null ) {", "if ( selected Tiles != null && selected Tiles . length > NUM_ ) {", "selected Indicies = new int [ selected Tiles . length ] ; }", "int tile Count = NUM_ ;", "int selected Index = NUM_ ;", "if ( selected Indicies != null ) {", "for ( OM Graphic omg : list ) {", "Image Tile image Tile = ( Image Tile ) omg ;", "if ( image Tile . is Selected ( ) && selected Index < selected Indicies . length ) {", "selected Indicies [ selected Index ++ ] = tile Count ; }", "tile Count ++ ; } }", "dlm . clear ( ) ;", "for ( OM Graphic omg : list ) {", "tile Count ++ ;", "dlm . add Element ( omg ) ; } }", "if ( results List != null ) {", "if ( selected Indicies != null ) {", "results List . set Selected Indices ( selected Indicies ) ; }", "results List . repaint ( ) ; } }"]}
{"ids": "84908", "code": ["public void tick ( ) {", "tick ( NUM_ ) ; }"]}
{"ids": "68850", "code": ["public Result send ( Email email , boolean ... sync ) {", "return service . send ( email , bool To Int ( true , sync ) ) ; }"]}
{"ids": "20111", "code": ["private boolean is Populating ( ) {", "return is Populating ; }"]}
{"ids": "18185", "code": ["public void process Attributes ( java . io . Writer writer , int n Attrs ) throws IO Exception , SAX Exception {", "String encoding = get Encoding ( ) ;", "for ( int i = NUM_ ; i < n Attrs ; i ++ ) {", "final String name = m attributes . get Q Name ( i ) ;", "final String value = m attributes . get Value ( i ) ;", "writer . write ( STR_ ) ;", "writer . write ( name ) ;", "writer . write ( STR_ ) ;", "write Attr String ( writer , value , encoding ) ;", "writer . write ( STR_ ) ; } }"]}
{"ids": "28672", "code": ["public int processor ( ) {", "return Integer . parse Int ( fields [ NUM_ ] ) ; }"]}
{"ids": "6786", "code": ["public void add Native Child At ( React Shadow Node child , int native Index ) {", "Assertions . assert Condition ( ! m Is Layout Only ) ;", "Assertions . assert Condition ( ! child . m Is Layout Only ) ;", "if ( m Native Children == null ) {", "m Native Children = new Array List < > ( NUM_ ) ; }", "m Native Children . add ( native Index , child ) ;", "child . m Native Parent = this ; }"]}
{"ids": "78344", "code": ["public boolean contains Key ( final Object e Key ) {", "return element Order . contains ( e Key ) ; }"]}
{"ids": "48782", "code": ["private void handle Exit Message ( final Component component , final long native Ctxt ) {", "post Drop Target Event ( component , NUM_ , NUM_ , Dn D Constants . ACTION NONE , Dn D Constants . ACTION NONE , null , native Ctxt , Sun Drop Target Event . MOUSE EXITED , Sun Drop Target Context Peer . DISPATCH SYNC ) ; }"]}
{"ids": "41124", "code": ["public void add Parameter Annotations ( Cst Method Ref method , Annotations List list ) {", "if ( parameter Annotations == null ) {", "parameter Annotations = new Array List < Parameter Annotation Struct > ( ) ; }", "parameter Annotations . add ( new Parameter Annotation Struct ( method , list ) ) ; }"]}
{"ids": "6345", "code": ["public static String unhtml Single Quotes ( final String str ) {", "return str . replace All ( STR_ , STR_ ) ; }"]}
{"ids": "66197", "code": ["public void add Input Method Listener ( Input Method Listener l ) {", "m text Area . add Input Method Listener ( l ) ; }"]}
{"ids": "6747", "code": ["public void init Raw Swap ( Array List < S 2 Cell Id > cell Ids ) {", "this . cell Ids = new Array List < S 2 Cell Id > ( cell Ids ) ;", "cell Ids . clear ( ) ; }"]}
{"ids": "53884", "code": ["protected void encrypt Final ( ) throws IO Exception {", "in Buffer . flip ( ) ;", "out Buffer . clear ( ) ;", "try {", "cipher . do Final ( in Buffer , out Buffer ) ; }", "catch ( Short Buffer Exception e ) {", "throw new IO Exception ( e ) ; }", "catch ( Illegal Block Size Exception e ) {", "throw new IO Exception ( e ) ; }", "catch ( Bad Padding Exception e ) {", "throw new IO Exception ( e ) ; }", "in Buffer . clear ( ) ;", "out Buffer . flip ( ) ;", "while ( out Buffer . has Remaining ( ) ) {", "output . write ( out Buffer ) ; } }"]}
{"ids": "40753", "code": ["private static boolean span Will Overlap ( Spannable span Text , URL Span [ ] span List , int start , int end ) {", "if ( start == end ) {", "return false ; }", "for ( URL Span span : span List ) {", "int existing Start = span Text . get Span Start ( span ) ;", "int existing End = span Text . get Span End ( span ) ;", "if ( ( start >= existing Start && start < existing End ) || end > existing Start && end <= existing End ) {", "if ( Log . is Loggable ( TAG , Log . VERBOSE ) ) {", "Char Sequence seq = span Text . sub Sequence ( start , end ) ;", "Log . v ( TAG , STR_ + seq + STR_ ) ; }", "return true ; } }", "return false ; }"]}
{"ids": "16725", "code": ["private Hash Map < Integer , Trie > build Lookup Table ( final Map < Integer , List < Trie > > child Tries ) {", "Hash Map < Integer , Trie > lookup = new Hash Map < > ( child Tries . size ( ) ) ;", "for ( int id : child Tries . key Set ( ) ) {", "final List < Trie > tries = child Tries . get ( id ) ;", "if ( tries . size ( ) == NUM_ ) {", "lookup . put ( id , tries . get ( NUM_ ) ) ; }", "else {", "lookup . put ( id , new Slice Aggregating Trie ( tries ) ) ; } }", "return lookup ; }"]}
{"ids": "78540", "code": ["public void add Marker ( int x , int z , Color color ) {", "Map Marker marker = new Map Marker ( ) ;", "marker . x = x ;", "marker . z = z ;", "marker . color = color ;", "markers . add ( marker ) ; }"]}
{"ids": "56030", "code": ["private void commit Discard ( long time , boolean allow Discard ) {", "if ( m Discarding Tab == null ) return ;", "assert m Stack Tabs != null ;", "Stack Tab discarded = m Discarding Tab ;", "if ( Math . abs ( discarded . get Discard Amount ( ) ) / get Discard Range ( ) > DISCARD COMMIT THRESHOLD && allow Discard ) {", "m Layout . ui Requesting Close Tab ( time , discarded . get Id ( ) ) ;", "Record User Action . record ( STR_ ) ;", "Record User Action . record ( STR_ ) ; }", "else {", "start Animation ( time , Overview Animation Type . UNDISCARD ) ; }", "m Discarding Tab = null ;", "request Update ( ) ; }"]}
{"ids": "21328", "code": ["public List < Object > build Java Method Parameters ( Asset Options Context context , Map < String , String > available Assets , Asset Options Method Info asset Method ) {", "final List < Object > java Method Parameters = Lists . new Array List ( ) ;", "java Method Parameters . add ( context ) ;", "for ( String parent Asset Name : asset Method . asset Dependencies ) {", "String parent Asset Value = available Assets . get ( parent Asset Name ) ;", "int index = java Method Parameters . size ( ) ;", "Object value = asset Method . convert Parameter ( index , parent Asset Value ) ;", "java Method Parameters . add ( value ) ; }", "return java Method Parameters ; }"]}
{"ids": "966", "code": ["private static Image View pick Graphic ( Restartable Service start Stoppable ) {", "final boolean running = start Stoppable . is Running ( ) ;", "final Image View icon = running ? new Image View ( stop Image ) : new Image View ( start Image ) ;", "if ( ! running ) {", "final Fade Transition ft = new Fade Transition ( Duration . millis ( NUM_ ) , icon ) ;", "ft . set To Value ( NUM_ ) ;", "ft . set Cycle Count ( Transition . INDEFINITE ) ;", "ft . set Auto Reverse ( true ) ;", "ft . play ( ) ; }", "icon . set Fit Height ( DPI Utility . MINI ICON SIZE ) ;", "icon . set Fit Width ( DPI Utility . MINI ICON SIZE ) ;", "return icon ; }"]}
{"ids": "35883", "code": ["public void create Cash Based Journal Entries And Reversals For Savings Charges ( final Office office , final String currency Code , final CASH ACCOUNTS FOR SAVINGS account Type To Be Debited , final CASH ACCOUNTS FOR SAVINGS account Type To Be Credited , final Long savings Product Id , final Long payment Type Id , final Long loan Id , final String transaction Id , final Date transaction Date , final Big Decimal total Amount , final Boolean is Reversal , final List < Charge Payment DTO > charge Payment DT Os ) {", "if ( charge Payment DT Os . size ( ) != NUM_ ) {", "throw new Platform Data Integrity Exception ( STR_ , STR_ ) ; }", "Charge Payment DTO charge Payment DTO = charge Payment DT Os . get ( NUM_ ) ;", "final GL Account charge Specific Account = get Linked GL Account For Savings Charges ( savings Product Id , account Type To Be Credited . get Value ( ) , charge Payment DTO . get Charge Id ( ) ) ;", "final GL Account savings Control Account = get Linked GL Account For Savings Product ( savings Product Id , account Type To Be Debited . get Value ( ) , payment Type Id ) ;", "if ( is Reversal ) {", "create Debit Journal Entry For Savings ( office , currency Code , charge Specific Account , loan Id , transaction Id , transaction Date , total Amount ) ;", "create Credit Journal Entry For Savings ( office , currency Code , savings Control Account , loan Id , transaction Id , transaction Date , total Amount ) ; }", "else {", "create Debit Journal Entry For Savings ( office , currency Code , savings Control Account , loan Id , transaction Id , transaction Date , total Amount ) ;", "create Credit Journal Entry For Savings ( office , currency Code , charge Specific Account , loan Id , transaction Id , transaction Date , total Amount ) ; } }"]}
{"ids": "28558", "code": ["public void add All ( Json Array array ) {", "elements . add All ( array . elements ) ; }"]}
{"ids": "27972", "code": ["public double next Double ( double k ) {", "double u , v , w , c , z ;", "if ( k <= NUM_ ) throw new Illegal Argument Exception ( ) ;", "if ( k set != k ) {", "tau = NUM_ + Math . sqrt ( NUM_ + NUM_ * k * k ) ;", "rho = ( tau - Math . sqrt ( NUM_ * tau ) ) / ( NUM_ * k ) ;", "r = ( NUM_ + rho * rho ) / ( NUM_ * rho ) ;", "k set = k ; }", "do {", "u = random Generator . raw ( ) ;", "v = random Generator . raw ( ) ;", "z = Math . cos ( Math . PI * u ) ;", "w = ( NUM_ + r * z ) / ( r + z ) ;", "c = k * ( r - w ) ; }", "while ( ( c * ( NUM_ - c ) < v ) && ( Math . log ( c / v ) + NUM_ < c ) ) ;", "return ( random Generator . raw ( ) > NUM_ ) ? Math . acos ( w ) : - Math . acos ( w ) ; }"]}
{"ids": "16492", "code": ["@ Override final public void mouse Released ( Mouse Event e ) {", "if ( is Component Pressed Down ) {", "mouse Liberal Click ( e ) ;", "long now = System . current Time Millis ( ) ;", "long time Between Unused Clicks = now - last Unused Liberal Single Click Time Stamp ;", "if ( time Between Unused Clicks <= slowest Double Click Milliseconds ) {", "mouse Liberal Double Click ( e ) ;", "last Unused Liberal Single Click Time Stamp = NUM_ ; }", "else {", "last Unused Liberal Single Click Time Stamp = System . current Time Millis ( ) ; } }", "is Component Pressed Down = false ;", "mouse Release ( e ) ; }"]}
{"ids": "71881", "code": ["public static Modification Type value Of ( final int int Value ) {", "Modification Type result = null ;", "if ( NUM_ <= int Value && int Value < ELEMENTS . length ) {", "result = ELEMENTS [ int Value ] ; }", "if ( result == null ) {", "result = new Modification Type ( int Value , STR_ + int Value + STR_ , Enum . UNKNOWN ) ; }", "return result ; }"]}
{"ids": "25701", "code": ["@ Override public void fill Header ( Header hdr ) {", "try {", "Standard . context ( Ascii Table . class ) ;", "hdr . set Xtension ( STR_ ) ;", "hdr . set Bitpix ( Basic HDU . BITPIX BYTE ) ;", "hdr . set Naxes ( NUM_ ) ;", "hdr . set Naxis ( NUM_ , this . row Len ) ;", "hdr . set Naxis ( NUM_ , this . n Rows ) ;", "Cursor < String , Header Card > iter = hdr . iterator ( ) ;", "iter . set Key ( NAXIS 2 . key ( ) ) ;", "iter . next ( ) ;", "iter . add ( new Header Card ( PCOUNT . key ( ) , NUM_ , PCOUNT . comment ( ) ) ) ;", "iter . add ( new Header Card ( GCOUNT . key ( ) , NUM_ , GCOUNT . comment ( ) ) ) ;", "iter . add ( new Header Card ( TFIELDS . key ( ) , this . n Fields , TFIELDS . comment ( ) ) ) ;", "for ( int i = NUM_ ; i < this . n Fields ; i += NUM_ ) {", "add Col Info ( i , iter ) ; } }", "catch ( Header Card Exception e ) {", "LOG . log ( Level . SEVERE , STR_ + e . get Message ( ) , e ) ; }", "finally {", "Standard . context ( null ) ; } }"]}
{"ids": "80018", "code": ["private boolean search End Match ( final String item Name ) {", "for ( Map . Entry < String , Sentence > e : parsed Names . entry Set ( ) ) {", "Sentence parsed = e . get Value ( ) ;", "if ( item Name . ends With ( parsed . get Original Text ( ) ) || item Name . ends With ( parsed . get Normalized ( ) ) ) {", "name = e . get Key ( ) ;", "return true ; } }", "return false ; }"]}
{"ids": "40667", "code": ["private static byte expected Norm ( final Default Similarity sim , final int length , final float boost ) {", "return ( byte ) sim . encode Norm Value ( boost / ( ( float ) Math . sqrt ( length ) ) ) ; }"]}
{"ids": "5029", "code": ["@ Override public Shape Tile Simplex enlarge ( double p offset ) {", "if ( p offset == NUM_ ) return this ;", "Shape Tile Simplex offset simplex = offset ( p offset ) ;", "Shape Tile Octagon bounding oct = bounding octagon ( ) ;", "if ( bounding oct . is Na N ( ) ) return Shape Tile Simplex . EMPTY ;", "Shape Tile Octagon offset oct = bounding oct . offset ( p offset ) ;", "return offset simplex . intersection ( offset oct . to Simplex ( ) ) ; }"]}
{"ids": "2150", "code": ["V remove ( Object key , int hash , Object value ) {", "lock ( ) ;", "try {", "int c = cnt - NUM_ ;", "HE < K , V > [ ] tab = table ;", "int index = hash & ( tab . length - NUM_ ) ;", "HE < K , V > first = tab [ index ] ;", "HE < K , V > e = first ;", "while ( e != null && ( e . hash != hash || ! key . equals ( e . k ) ) ) e = e . next ;", "V old Value = null ;", "if ( e != null ) {", "V v = e . v ;", "if ( value == null || value . equals ( v ) ) {", "old Value = v ;", "++ mod Cnt ;", "HE < K , V > new First = e . next ;", "for ( HE < K , V > p = first ; p != e ; p = p . next ) new First = new HE < K , V > ( p . k , p . hash , new First , p . v ) ;", "tab [ index ] = new First ;", "cnt = c ; } }", "return old Value ; }", "finally {", "unlock ( ) ; } }"]}
{"ids": "34805", "code": ["public static Tree Path path Till Of Kind ( final Tree Path path , final Tree . Kind kind ) {", "return path Till Of Kind ( path , Enum Set . of ( kind ) ) ; }"]}
{"ids": "51685", "code": ["public Big Decimal read F 2 Dot 14 ( int index ) {", "throw new Unsupported Operation Exception ( ) ; }"]}
{"ids": "48008", "code": ["public void add Rendering Hints ( Map < ? , ? > hints ) {", "m Graphics . add Rendering Hints ( hints ) ; }"]}
{"ids": "78461", "code": ["private void create New Fields Array ( ) {", "for ( int i = NUM_ ; i < person Fields Old . length ; i ++ ) {", "person Fields New [ i ] = person Fields Old [ i ] + STR_ ; } }"]}
{"ids": "61968", "code": ["public void remove All Relations ( ) {", "for ( B Node input Node : new Linked List < B Node > ( input Nodes . values ( ) ) ) {", "remove Input Node ( input Node . get Id ( ) ) ; }", "for ( B Node output Node : new Linked List < B Node > ( output Nodes . values ( ) ) ) {", "remove Output Node ( output Node . get Id ( ) ) ; } }"]}
{"ids": "39650", "code": ["private void add Exposed Types ( Class < ? > clazz , Class < ? > cause ) {", "if ( pruned ( clazz ) ) {", "return ; }", "boolean already Done = done ( clazz ) ;", "visit ( clazz ) ;", "record Exposure ( clazz , cause ) ;", "if ( already Done || pruned ( clazz ) ) {", "return ; }", "Type Token < ? > token = Type Token . of ( clazz ) ;", "for ( Type Token < ? > super Type : token . get Types ( ) ) {", "if ( ! super Type . equals ( token ) ) {", "logger . debug ( STR_ , super Type , clazz ) ;", "add Exposed Types ( super Type , clazz ) ; } }", "for ( Class inner Class : clazz . get Declared Classes ( ) ) {", "if ( exposed ( inner Class . get Modifiers ( ) ) ) {", "logger . debug ( STR_ , inner Class , clazz ) ;", "add Exposed Types ( inner Class , clazz ) ; } }", "for ( Field field : clazz . get Declared Fields ( ) ) {", "if ( exposed ( field . get Modifiers ( ) ) ) {", "logger . debug ( STR_ , field , clazz ) ;", "add Exposed Types ( field , clazz ) ; } }", "for ( Invokable invokable : get Exposed Invokables ( token ) ) {", "logger . debug ( STR_ , invokable , clazz ) ;", "add Exposed Types ( invokable , clazz ) ; } }"]}
{"ids": "72789", "code": ["public void store Logs ( File folder ) {", "String path = folder . get Absolute Path ( ) ;", "m Logger Folder = new Log This ( path ) ; }"]}
{"ids": "13141", "code": ["@ Override public Object clone ( ) {", "return new Location Path ( this ) ; }"]}
{"ids": "53567", "code": ["private Assignment recursive Back Tracking Search ( CSP csp , Assignment assignment ) {", "Assignment result = null ;", "if ( assignment . is Complete ( csp . get Variables ( ) ) ) {", "result = assignment ; }", "else {", "Variable var = select Unassigned Variable ( assignment , csp ) ;", "for ( Object value : order Domain Values ( var , assignment , csp ) ) {", "assignment . set Assignment ( var , value ) ;", "fire State Changed ( assignment , csp ) ;", "if ( assignment . is Consistent ( csp . get Constraints ( var ) ) ) {", "Domain Restore Info info = inference ( var , assignment , csp ) ;", "if ( ! info . is Empty ( ) ) fire State Changed ( csp ) ;", "if ( ! info . is Empty Domain Found ( ) ) {", "result = recursive Back Tracking Search ( csp , assignment ) ;", "if ( result != null ) break ; }", "info . restore Domains ( csp ) ; }", "assignment . remove Assignment ( var ) ; } }", "return result ; }"]}
{"ids": "31402", "code": ["private static JSON Object create File Transfer Error ( int error Code , String source , String target , String body , Integer http Status ) {", "JSON Object error = null ;", "try {", "error = new JSON Object ( ) ;", "error . put ( STR_ , error Code ) ;", "error . put ( STR_ , source ) ;", "error . put ( STR_ , target ) ;", "if ( body != null ) {", "error . put ( STR_ , body ) ; }", "if ( http Status != null ) {", "error . put ( STR_ , http Status ) ; } }", "catch ( JSON Exception e ) {", "Log . e ( LOG TAG , e . get Message ( ) , e ) ; }", "return error ; }"]}
{"ids": "63216", "code": ["public Array List < Value > keys ( ) {", "Array List < Value > list = New . array List ( size ) ;", "for ( Value k : keys ) {", "if ( k != null && k != Value Null . DELETED ) {", "list . add ( k ) ; } }", "return list ; }"]}
{"ids": "80341", "code": ["private void close ( ) {", "if ( closed ) {", "return ; }", "closed = true ;", "try {", "result Set . close ( ) ; }", "catch ( final SQL Exception e ) {", "logger . error ( e , e ) ; }", "try {", "if ( statement != null ) {", "statement . close ( ) ; } }", "catch ( final SQL Exception e ) {", "logger . error ( e , e ) ; } }"]}
{"ids": "78663", "code": ["public Delivery Thread ( TOM Layer tom Layer , Service Replica receiver , Recoverable recoverer , Server View Controller controller ) {", "super ( STR_ ) ;", "this . decided = new Linked Blocking Queue < > ( ) ;", "this . tom Layer = tom Layer ;", "this . receiver = receiver ;", "this . recoverer = recoverer ;", "this . controller = controller ; }"]}
{"ids": "39576", "code": ["protected void add Button Listener ( ) {", "Application Insights Add Dialog dialog = new Application Insights Add Dialog ( get Shell ( ) ) ;", "dialog . open ( ) ;", "table Viewer . refresh ( ) ; }"]}
{"ids": "10184", "code": ["public int [ ] to Array ( ) {", "int [ ] result = new int [ size ] ;", "System . arraycopy ( array , NUM_ , result , NUM_ , size ) ;", "return result ; }"]}
{"ids": "69678", "code": ["public Block obtain Block ( String prototype Name , @ Nullable String uuid ) {", "Block block ;", "if ( uuid != null ) {", "Weak Reference < Block > ref = m Block Refs . get ( uuid ) ;", "if ( ref != null ) {", "block = ref . get ( ) ;", "if ( block != null ) {", "throw new Illegal Argument Exception ( STR_ + uuid + STR_ ) ; } } }", "if ( ! m Block Templates . contains Key ( prototype Name ) ) {", "Log . w ( TAG , STR_ + prototype Name + STR_ ) ;", "return null ; }", "Block . Builder builder = new Block . Builder ( m Block Templates . get ( prototype Name ) ) ;", "if ( uuid != null ) {", "builder . set Uuid ( uuid ) ; }", "block = builder . build ( ) ;", "m Block Refs . put ( block . get Id ( ) , new Weak Reference < Block > ( block ) ) ;", "return block ; }"]}
{"ids": "15389", "code": ["public Sms Console Service Config ( ) {", "Document doc = parse Document ( CONFIG FILENAME ) ;", "config Services ( doc ) ;", "hidden Services = Collections . unmodifiable Set ( services . get ( HIDDEN SERVICES ) ) ; }"]}
{"ids": "86590", "code": ["@ Override protected void on Size Changed ( int w , int h , int oldw , int oldh ) {", "super . on Size Changed ( w , h , oldw , oldh ) ;", "setup Bounds ( w , h ) ;", "setup Paints ( ) ;", "invalidate ( ) ; }"]}
{"ids": "86087", "code": ["private static String convert To Quoted String ( String s ) {", "if ( s == null || s . is Empty ( ) ) {", "return null ; }", "if ( s . char At ( NUM_ ) == STR_ && s . char At ( s . length ( ) - NUM_ ) == STR_ ) {", "return s ; }", "return STR_ + s + STR_ ; }"]}
{"ids": "7227", "code": ["public Pattern Observer Expr ( String namespace , String name , Expression [ ] parameters ) {", "super ( namespace , name , Arrays . as List ( parameters ) ) ; }"]}
{"ids": "45747", "code": ["public static String convert String To Hex String ( String data ) {", "return convent Bytes To Hex String ( data . get Bytes ( ) ) ; }"]}
{"ids": "4102", "code": ["public boolean is Transient ( ) {", "return Modifier . is Transient ( get Access Flags ( ) ) ; }"]}
{"ids": "14561", "code": ["public boolean is For HTTP Basic ( ) {", "return ( nego Value != null ) ? nego Value . equals Ignore Case ( HTTP HTTPBASIC ) : false ; }"]}
{"ids": "28203", "code": ["private String indent ( int level ) {", "final String s = STR_ ;", "if ( level == NUM_ ) return STR_ ;", "String Builder sb = new String Builder ( level * s . length ( ) ) ;", "for ( int i = NUM_ ; i < level ; i ++ ) {", "sb . append ( s ) ; }", "return s . to String ( ) ; }"]}
{"ids": "73516", "code": ["public void add Listener ( Update Manager Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "78608", "code": ["@ Override public void run ( ) {", "List < Span > dequeued Spans = new Array List < Span > ( max Span Batch Size ) ;", "long error Count = NUM_ ;", "while ( running . get ( ) || queue . size ( ) > NUM_ ) {", "Span first Span = null ;", "try {", "first Span = queue . poll ( NUM_ , Time Unit . SECONDS ) ;", "if ( first Span != null ) {", "dequeued Spans . add ( first Span ) ;", "queue . drain To ( dequeued Spans , max Span Batch Size - NUM_ ) ; } }", "catch ( Interrupted Exception ie ) { }", "start Client ( ) ;", "if ( dequeued Spans . is Empty ( ) ) {", "continue ; }", "try {", "List < Event > events = new Array List < Event > ( dequeued Spans . size ( ) ) ;", "for ( Span span : dequeued Spans ) {", "Map < String , String > headers = new Hash Map < String , String > ( ) ;", "headers . put ( STR_ , span . to String ( ) ) ;", "headers . put ( STR_ , span . get Tracer Id ( ) ) ;", "headers . put ( STR_ , span . get Description ( ) ) ;", "String body = span . to Json ( ) ;", "Event evt = Event Builder . with Body ( body , Charset . for Name ( STR_ ) , headers ) ;", "events . add ( evt ) ; }", "flume Client . append Batch ( events ) ;", "dequeued Spans . clear ( ) ;", "error Count = NUM_ ; }", "catch ( Exception e ) {", "error Count += NUM_ ;", "if ( error Count < MAX ERRORS ) {", "try {", "queue . add All ( dequeued Spans ) ; }", "catch ( Illegal State Exception ex ) {", "LOG . error ( STR_ + dequeued Spans . size ( ) + STR_ ) ; } }", "close Client ( ) ;", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e 1 ) { } } }", "close Client ( ) ; }"]}
{"ids": "54623", "code": ["public void cancel Authentication ( ) {", "synchronized ( sync Lock ) {", "authenticating = false ;", "timer . cancel ( ) ;", "timer . purge ( ) ; } }"]}
{"ids": "39604", "code": ["private void check Valid Interval ( Duration polling Interval , int retries , long time Slept Millis ) {", "long high Sum = NUM_ ;", "long low Sum = NUM_ ;", "for ( int i = NUM_ ; i < retries ; i ++ ) {", "double current Interval = polling Interval . get Millis ( ) * Math . pow ( Dataflow Pipeline Job . DEFAULT BACKOFF EXPONENT , i ) ;", "double random Offset = NUM_ * current Interval ;", "high Sum += Math . round ( current Interval + random Offset ) ;", "low Sum += Math . round ( current Interval - random Offset ) ; }", "assert That ( time Slept Millis , all Of ( greater Than Or Equal To ( low Sum ) , less Than Or Equal To ( high Sum ) ) ) ; }"]}
{"ids": "29433", "code": ["public void write ( String str , int off , int len ) throws IO Exception {", "if ( output Stream == null ) throw new IO Exception ( STR_ ) ;", "final int off plus len = off + len ;", "for ( int i = off ; i < off plus len ; ) {", "char c = str . char At ( i ++ ) ;", "if ( c < NUM_ ) {", "bytes [ index ] = ( byte ) c ;", "if ( ++ index >= bytes . length ) {", "flush Buffer ( ) ; } }", "else {", "write ( c ) ; } } }"]}
{"ids": "27538", "code": ["public Commit Record Index ( I Raw Store store , Checkpoint checkpoint , Index Metadata metadata , boolean read Only ) {", "super ( store , checkpoint , metadata , read Only ) ;", "this . ser = new Entry . Entry Serializer ( ) ; }"]}
{"ids": "23143", "code": ["protected String encode Body ( ) {", "return Long . to String ( this . sequence Number ) ; }"]}
{"ids": "70597", "code": ["public void add Container ( Image Container container ) {", "m Containers . add ( container ) ; }"]}
{"ids": "74808", "code": ["private void check Size ( final int i ) {", "if ( i >= max size ) {", "final int old size = max size ;", "max size += increment size ;", "if ( max size <= i ) {", "max size = i + increment size + NUM_ ; }", "final Rectangle [ ] temp = items ;", "items = new Rectangle [ max size ] ;", "System . arraycopy ( temp , NUM_ , items , NUM_ , old size ) ;", "increment size = increment Size ( increment size ) ; } }"]}
{"ids": "12849", "code": ["public static double [ ] gen Pulse From Fourier Mag ( double [ ] mag , double f 0 ) {", "int num Harm = mag . length ;", "int current F 0 = ( int ) Math . round ( f 0 ) ;", "int T ;", "if ( current F 0 < NUM_ ) T = NUM_ ;", "else T = NUM_ ;", "int T 2 = NUM_ * T ;", "double [ ] pulse = new double [ T ] ;", "double [ ] real = new double [ T 2 ] ;", "double [ ] imag = new double [ T 2 ] ;", "real [ NUM_ ] = real [ T ] = NUM_ ;", "for ( int i = NUM_ ; i <= num Harm ; i ++ ) {", "real [ i ] = real [ T - i ] = real [ T + i ] = real [ T 2 - i ] = mag [ i - NUM_ ] ;", "imag [ i ] = imag [ T - i ] = imag [ T + i ] = imag [ T 2 - i ] = NUM_ ; }", "for ( int i = ( num Harm + NUM_ ) ; i < ( T - num Harm ) ; i ++ ) {", "real [ i ] = real [ T - i ] = real [ T + i ] = real [ T 2 - i ] = NUM_ ;", "imag [ i ] = imag [ T - i ] = imag [ T + i ] = imag [ T 2 - i ] = NUM_ ; }", "FFT . transform ( real , imag , true ) ;", "double sqrt f 0 = Math . sqrt ( current F 0 ) ;", "for ( int i = NUM_ ; i < T ; i ++ ) pulse [ i ] = real [ ( i - num Harm ) % T ] * sqrt f 0 ;", "return pulse ; }"]}
{"ids": "5425", "code": ["public double volume ( ) {", "if ( cached Volume < NUM_ ) {", "cached Volume = NUM_ ;", "I Hypercube cube = this . region ;", "int nd = cube . dimensionality ( ) ;", "for ( int d = NUM_ ; d <= nd ; d ++ ) {", "double right = cube . get Right ( d ) ;", "double left = cube . get Left ( d ) ;", "if ( Double . is Infinite ( right ) ) {", "right = + NUM_ ; }", "if ( Double . is Infinite ( left ) ) {", "left = - NUM_ ; }", "if ( left == - NUM_ && right == + NUM_ ) { }", "else {", "cached Volume *= ( right - left ) ; } } }", "return cached Volume ; }"]}
{"ids": "51639", "code": ["static String target So File ( String lib Name , int version ) {", "Context context = m Context ;", "if ( null == context ) {", "return STR_ ; }", "String path = STR_ + context . get Package Name ( ) + STR_ ;", "File f = context . get Files Dir ( ) ;", "if ( f != null ) {", "path = f . get Path ( ) ; }", "return path + STR_ + lib Name + STR_ + version + STR_ ; }"]}
{"ids": "23820", "code": ["@ Override public void stop Monitoring ( ) {", "stop Monitoring ( false ) ; }"]}
{"ids": "54513", "code": ["@ Override public Object compute ( Array List < Map < String , Object > > rows ) throws Exception {", "if ( column . equals ( STR_ ) ) {", "return rows . size ( ) ; }", "long count = NUM_ ;", "for ( Map < String , Object > row : rows ) {", "if ( row . contains Key ( column ) && ( row . get ( column ) != null ) ) {", "count ++ ; } }", "return count ; }"]}
{"ids": "68127", "code": ["private Property [ ] parse Properties ( final String contents ) {", "final String [ ] parts = contents . split ( STR_ ) ;", "final List < Property > results As List = new Array List < Property > ( ) ;", "for ( String part : parts ) {", "try {", "if ( ! String Utils . is Empty ( part . trim ( ) ) ) {", "results As List . add ( new Property ( part ) ) ; } }", "catch ( final Exception e ) {", "LOG . warn ( e . get Message ( ) , e ) ; } }", "return results As List . to Array ( new Property [ results As List . size ( ) ] ) ; }"]}
{"ids": "71962", "code": ["public void request Seconds Until Account Expiration ( ) {", "operations . add ( Password Policy State Operation Type . GET SECONDS UNTIL ACCOUNT EXPIRATION ) ; }"]}
{"ids": "3491", "code": ["public final boolean equals Ignore Case ( String a ) {", "int len = a . length ( ) ;", "if ( length != len ) return false ;", "int offset = offset ;", "char [ ] buffer = buffer ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "char ca = buffer [ offset + i ] ;", "char cb = a . char At ( i ) ;", "if ( ca == cb ) { }", "else if ( Character . to Lower Case ( ca ) != Character . to Lower Case ( cb ) ) return false ; }", "return true ; }"]}
{"ids": "85252", "code": ["public static int [ ] check Object Start ( Pdf Tokenizer line Tokenizer ) {", "try {", "line Tokenizer . seek ( NUM_ ) ;", "if ( ! line Tokenizer . next Token ( ) || line Tokenizer . get Token Type ( ) != Token Type . Number ) return null ;", "int num = line Tokenizer . get Int Value ( ) ;", "if ( ! line Tokenizer . next Token ( ) || line Tokenizer . get Token Type ( ) != Token Type . Number ) return null ;", "int gen = line Tokenizer . get Int Value ( ) ;", "if ( ! line Tokenizer . next Token ( ) ) return null ;", "if ( ! Arrays . equals ( Obj , line Tokenizer . get Byte Content ( ) ) ) return null ;", "return new int [ ] { num , gen } ; }", "catch ( Exception ioe ) { }", "return null ; }"]}
{"ids": "25702", "code": ["private Object single Element ( int row , int col ) {", "Object res = null ;", "if ( this . is Null == null || ! this . is Null [ row * this . n Fields + col ] ) {", "res = Array Funcs . new Instance ( this . types [ col ] , NUM_ ) ;", "System . arraycopy ( this . data [ col ] , row , res , NUM_ , NUM_ ) ; }", "return res ; }"]}
{"ids": "58045", "code": ["public Node Set DTM ( Node Iterator iterator , X Path Context xctxt ) {", "super ( ) ;", "Node node ;", "m manager = xctxt . get DTM Manager ( ) ;", "while ( null != ( node = iterator . next Node ( ) ) ) {", "int handle = xctxt . get DTM Handle From Node ( node ) ;", "add Node In Doc Order ( handle , xctxt ) ; } }"]}
{"ids": "9384", "code": ["public static Vec mean Vector ( Data Set data Set ) {", "Dense Vector dv = new Dense Vector ( data Set . get Num Numerical Vars ( ) ) ;", "mean Vector ( dv , data Set ) ;", "return dv ; }"]}
{"ids": "64255", "code": ["private void make Cache Directory ( ) {", "File cache Dir = new File ( CACHE DIRECTORY ) ;", "if ( ! cache Dir . exists ( ) ) {", "cache Dir . mkdir ( ) ; } }"]}
{"ids": "34333", "code": ["public void input Keyevent ( int value ) {", "execute Command Quietly ( adb Command ( STR_ , STR_ , STR_ , STR_ + value ) ) ;", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "log . warn ( STR_ , e ) ; } }"]}
{"ids": "40219", "code": ["public static void pass Mock Sleep ( ) {", "mock Sleep Queue . offer ( false ) ; }"]}
{"ids": "60583", "code": ["JSON Stringer close ( Scope empty , Scope nonempty , String close Bracket ) throws JSON Exception {", "Scope context = peek ( ) ;", "if ( context != nonempty && context != empty ) {", "throw new JSON Exception ( STR_ ) ; }", "stack . remove ( stack . size ( ) - NUM_ ) ;", "if ( context == nonempty ) {", "newline ( ) ; }", "out . append ( close Bracket ) ;", "return this ; }"]}
{"ids": "75175", "code": ["private Query Builder build Sort ( ) {", "Query Builder builder = new Query Builder ( ) ;", "Iterator < String > sort Iterator = m Sorting Order List . iterator ( ) ;", "while ( sort Iterator . has Next ( ) ) {", "builder . append ( sort Iterator . next ( ) ) ;", "if ( sort Iterator . has Next ( ) ) builder . append ( STR_ ) ; }", "return builder ; }"]}
{"ids": "53870", "code": ["public void init ( int mode , byte [ ] key , byte [ ] iv ) {", "context = Open Ssl Native . init ( context , mode , algorithm , padding , key , iv ) ; }"]}
{"ids": "59784", "code": ["private String diff words To Chars Munge ( String text , List < String > line Array , Map < String , Integer > line Hash ) {", "int line Start = NUM_ ;", "int line End = - NUM_ ;", "String line ;", "String Builder chars = new String Builder ( ) ;", "while ( line End < text . length ( ) - NUM_ ) {", "String pattern Str = STR_ ;", "Pattern pattern = Pattern . compile ( pattern Str ) ;", "Matcher matcher = pattern . matcher ( text ) ;", "matcher . region ( line Start , text . length ( ) ) ;", "if ( matcher . find ( ) ) {", "line End = matcher . start ( ) ; }", "else line End = - NUM_ ;", "if ( line End == - NUM_ ) {", "line End = text . length ( ) - NUM_ ; }", "line = text . substring ( line Start , line End + NUM_ ) ;", "line Start = line End + NUM_ ;", "if ( line Hash . contains Key ( line ) ) {", "chars . append ( String . value Of ( ( char ) ( int ) line Hash . get ( line ) ) ) ; }", "else {", "line Array . add ( line ) ;", "line Hash . put ( line , line Array . size ( ) - NUM_ ) ;", "chars . append ( String . value Of ( ( char ) ( line Array . size ( ) - NUM_ ) ) ) ; } }", "return chars . to String ( ) ; }"]}
{"ids": "17421", "code": ["private void replace Top ( Scope top Of Stack ) {", "stack . set ( stack . size ( ) - NUM_ , top Of Stack ) ; }"]}
{"ids": "17254", "code": ["public boolean has Next ( ) {", "return index < desc . length ( ) ; }"]}
{"ids": "54566", "code": ["public void register Session Thread ( Session Thread new Session ) {", "synchronized ( this ) {", "List < Session Thread > to Be Removed = new Array List < Session Thread > ( ) ;", "for ( Session Thread session Thread : session Threads ) {", "if ( ! session Thread . is Alive ( ) ) {", "Log . d ( TAG , STR_ ) ;", "try {", "session Thread . join ( ) ;", "Log . d ( TAG , STR_ ) ;", "to Be Removed . add ( session Thread ) ;", "session Thread . close Socket ( ) ; }", "catch ( Interrupted Exception e ) {", "Log . d ( TAG , STR_ ) ; } } }", "for ( Session Thread remove Thread : to Be Removed ) {", "session Threads . remove ( remove Thread ) ; }", "session Threads . add ( new Session ) ; }", "Log . d ( TAG , STR_ ) ; }"]}
{"ids": "30514", "code": ["protected I Object Info < T > store impl ( Segment < T > segment , Object Info < T > oi ) {", "if ( invalid ) return null ;", "size . increment And Get ( ) ;", "segment . increment Size ( ) ;", "Object Info < T > tail = segment . get Tail ( ) ;", "tail . set Forward Ref ( oi ) ;", "oi . set Backward Ref ( tail ) ;", "segment . set Tail ( oi ) ;", "return oi ; }"]}
{"ids": "30194", "code": ["public Te X Formula ( ) {", "parser = new Te X Parser ( STR_ , this , false ) ; }"]}
{"ids": "43080", "code": ["public static void gray To Binary ( Binary Variable variable ) {", "int n = variable . get Number Of Bits ( ) ;", "Bit Set gray = variable . get Bit Set ( ) ;", "variable . set ( n - NUM_ , gray . get ( n - NUM_ ) ) ;", "for ( int i = n - NUM_ ; i >= NUM_ ; i -- ) {", "variable . set ( i , variable . get ( i + NUM_ ) ^ gray . get ( i ) ) ; } }"]}
{"ids": "16856", "code": ["private void update Tags ( Movie movie ) {", "List < String > available Tags = new Array List < > ( tags Observable ) ;", "for ( String tag In Movie : new Array List < > ( movie . get Tags ( ) ) ) {", "boolean tag Found = false ;", "for ( String tag : available Tags ) {", "if ( tag In Movie . equals ( tag ) ) {", "tag Found = true ;", "break ; } }", "if ( ! tag Found ) {", "add Tag ( tag In Movie ) ; } } }"]}
{"ids": "34037", "code": ["protected void remove Next Protocol Messages ( List < Protocol Message > protocol Messages , int from Index ) {", "for ( int i = protocol Messages . size ( ) - NUM_ ; i >= from Index ; i -- ) {", "protocol Messages . remove ( i ) ; } }"]}
{"ids": "40340", "code": ["public UCI Best Move stop ( ) {", "if ( ! is Connected ( ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "if ( LOG . is Debug Enabled ( ) ) {", "LOG . debug ( STR_ ) ; }", "UCI Best Move result = null ;", "synchronized ( stop Synch ) {", "if ( ! is Processing Go ( ) ) {", "result = last Best Move ;", "last Best Move = null ; }", "else {", "long total Sleep Time = NUM_ ;", "send ( STR_ ) ;", "while ( go Runnable != null && total Sleep Time < NUM_ ) {", "try {", "Thread . sleep ( NUM_ ) ;", "total Sleep Time += NUM_ ; }", "catch ( Interrupted Exception ie ) { } }", "result = last Best Move ;", "last Best Move = null ; } }", "return result ; }"]}
{"ids": "63407", "code": ["@ Override public boolean supports Data Definition And Data Manipulation Transactions ( ) {", "debug Code Call ( STR_ ) ;", "return false ; }"]}
{"ids": "31957", "code": ["public static void remove Java No Op Logger ( Collection < Handler > rmv Hnds ) {", "Logger log = Logger . get Logger ( STR_ ) ;", "for ( Handler h : log . get Handlers ( ) ) log . remove Handler ( h ) ;", "if ( ! F . is Empty ( rmv Hnds ) ) {", "for ( Handler h : rmv Hnds ) log . add Handler ( h ) ; } }"]}
{"ids": "53926", "code": ["private int binary Search ( final int start , final int end , final Size Tester size Tester , final Rect F available Space ) {", "int last Best = start ;", "int low = start ;", "int high = end - NUM_ ;", "int middle ;", "while ( low <= high ) {", "middle = low + high > > > NUM_ ;", "final int mid Val Cmp = size Tester . on Test Size ( middle , available Space ) ;", "if ( mid Val Cmp < NUM_ ) {", "last Best = low ;", "low = middle + NUM_ ; }", "else if ( mid Val Cmp > NUM_ ) {", "high = middle - NUM_ ;", "last Best = high ; }", "else return middle ; }", "return last Best ; }"]}
{"ids": "2758", "code": ["protected boolean is Valid Domain ( String domain ) {", "Matcher ip Domain Matcher = IP DOMAIN PATTERN . matcher ( domain ) ;", "if ( ip Domain Matcher . matches ( ) ) {", "Inet Address Validator inet Address Validator = Inet Address Validator . get Instance ( ) ;", "return inet Address Validator . is Valid ( ip Domain Matcher . group ( NUM_ ) ) ; }", "Domain Validator domain Validator = Domain Validator . get Instance ( allow Local ) ;", "return domain Validator . is Valid ( domain ) || domain Validator . is Valid Tld ( domain ) ; }"]}
{"ids": "46952", "code": ["public void table Switch ( final int [ ] keys , final Table Switch Generator generator , final boolean use Table ) {", "for ( int i = NUM_ ; i < keys . length ; ++ i ) {", "if ( keys [ i ] < keys [ i - NUM_ ] ) {", "throw new Illegal Argument Exception ( STR_ ) ; } }", "Label def = new Label ( ) ;", "Label end = new Label ( ) ;", "if ( keys . length > NUM_ ) {", "int len = keys . length ;", "int min = keys [ NUM_ ] ;", "int max = keys [ len - NUM_ ] ;", "int range = max - min + NUM_ ;", "if ( use Table ) {", "Label [ ] labels = new Label [ range ] ;", "Arrays . fill ( labels , def ) ;", "for ( int i = NUM_ ; i < len ; ++ i ) {", "labels [ keys [ i ] - min ] = new Label ( ) ; }", "mv . visit Table Switch Insn ( min , max , def , labels ) ;", "for ( int i = NUM_ ; i < range ; ++ i ) {", "Label label = labels [ i ] ;", "if ( label != def ) {", "mark ( label ) ;", "generator . generate Case ( i + min , end ) ; } } }", "else {", "Label [ ] labels = new Label [ len ] ;", "for ( int i = NUM_ ; i < len ; ++ i ) {", "labels [ i ] = new Label ( ) ; }", "mv . visit Lookup Switch Insn ( def , keys , labels ) ;", "for ( int i = NUM_ ; i < len ; ++ i ) {", "mark ( labels [ i ] ) ;", "generator . generate Case ( keys [ i ] , end ) ; } } }", "mark ( def ) ;", "generator . generate Default ( ) ;", "mark ( end ) ; }"]}
{"ids": "45344", "code": ["private void parse ( File dir ) {", "File [ ] xml Files = dir . list Files ( new Xml Filter ( ) ) ;", "for ( File xml File : xml Files ) {", "parse Test From Xml ( xml File ) ; } }"]}
{"ids": "36224", "code": ["public boolean has Next ( int index ) {", "for ( int p = NUM_ ; p < mask . length ; p ++ ) {", "if ( mask [ p ] ) {", "if ( index <= last Element Index [ p ] ) {", "return true ; } } }", "return false ; }"]}
{"ids": "50455", "code": ["public static boolean is External Storage Available ( ) {", "String state = Environment . get External Storage State ( ) ;", "if ( state . equals ( Environment . MEDIA MOUNTED ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "60364", "code": ["public Tar Entry ( byte [ ] header Buf ) {", "this ( ) ;", "parse Tar Header ( header Buf ) ; }"]}
{"ids": "81113", "code": ["public static void unregister Mbeans ( M Bean Server m Bean Server ) {", "try {", "m Bean Server . unregister M Bean ( Log 4 j MX Bean Imp . get Object Name ( ) ) ;", "m Bean Server . unregister M Bean ( Exception MX Bean Imp . get Object Name ( ) ) ;", "m Bean Server . unregister M Bean ( Exception Delta MX Bean Imp . get Object Name ( ) ) ;", "m Bean Server . unregister M Bean ( Log 4 j Delta MX Bean Imp . get Object Name ( ) ) ;", "m Bean Server . unregister M Bean ( Jamon MX Bean Imp . get Object Name ( ) ) ;", "m Bean Server . unregister M Bean ( Http Status MX Bean Imp . get Object Name ( ) ) ;", "m Bean Server . unregister M Bean ( Http Status Delta MX Bean Imp . get Object Name ( ) ) ;", "unregister Gc MX Bean ( m Bean Server ) ;", "unregister Mbeans From Props File ( m Bean Server ) ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "195", "code": ["public static Deterministic Key create Master Private Key ( byte [ ] seed ) throws HD Derivation Exception {", "check Argument ( seed . length > NUM_ , STR_ ) ;", "byte [ ] i = HD Utils . hmac Sha 512 ( MASTER HMAC SHA 512 , seed ) ;", "check State ( i . length == NUM_ , i . length ) ;", "byte [ ] il = Arrays . copy Of Range ( i , NUM_ , NUM_ ) ;", "byte [ ] ir = Arrays . copy Of Range ( i , NUM_ , NUM_ ) ;", "Arrays . fill ( i , ( byte ) NUM_ ) ;", "Deterministic Key master Priv Key = create Master Priv Key From Bytes ( il , ir ) ;", "Arrays . fill ( il , ( byte ) NUM_ ) ;", "Arrays . fill ( ir , ( byte ) NUM_ ) ;", "return master Priv Key ; }"]}
{"ids": "10010", "code": ["public boolean is NANPA Country ( String region Code ) {", "return nanpa Regions . contains ( region Code ) ; }"]}
{"ids": "29453", "code": ["public void parse ( Input Stream in ) throws IO Exception , SAX Exception {", "try {", "xml Reader . set Input ( in ) ;", "parse All ( ) ; }", "catch ( XML Stream Exception e ) {", "if ( e . get Nested Exception ( ) instanceof IO Exception ) throw ( IO Exception ) e . get Nested Exception ( ) ;", "throw new SAX Exception ( e . get Message ( ) ) ; }", "finally {", "xml Reader . reset ( ) ; } }"]}
{"ids": "79474", "code": ["@ Override public void print Stack Trace ( Print Stream ps ) {", "super . print Stack Trace ( ps ) ;", "if ( nested != null ) nested . print Stack Trace ( ps ) ; }"]}
{"ids": "15237", "code": ["public AM Password ( char [ ] pw ) {", "int i ;", "int length = pw . length ;", "cleared = false ;", "password = new char [ length ] ;", "System . arraycopy ( pw , NUM_ , password , NUM_ , length ) ; }"]}
{"ids": "15963", "code": ["public void reset ( ) {", "first Step = true ;", "N 3 = NUM_ ;", "N 4 = NUM_ ;", "System . arraycopy ( IV , NUM_ , ofb V , NUM_ , IV . length ) ;", "byte Count = NUM_ ;", "cipher . reset ( ) ; }"]}
{"ids": "66494", "code": ["private static img create Control Button Image ( String name , String js command , boolean enabled ) {", "String Buffer img Name = new String Buffer ( STR_ + name ) ;", "if ( ! enabled ) img Name . append ( STR_ ) ;", "img Name . append ( STR_ ) ;", "img img = new img ( Mobile Env . get Image Directory ( img Name . to String ( ) ) , name ) ;", "if ( enabled ) img . set Alt ( Msg . get Msg ( AD Language , name ) ) ;", "img . set ID ( STR_ ) ;", "if ( js command != null && js command . length ( ) > NUM_ && enabled ) {", "img . set On Click ( STR_ + FORM NAME + STR_ + M Command + STR_ + name + STR_ + js command ) ; }", "return img ; }"]}
{"ids": "39376", "code": ["public String [ ] to Array ( ) throws Exception {", "return Utils . split Options ( to Command Line ( ) ) ; }"]}
{"ids": "7152", "code": ["public static Set < Eval Factory Node > recursive Get Child Nodes ( Eval Factory Node current Node , Eval Node Util Factory Filter filter ) {", "Set < Eval Factory Node > result = new Linked Hash Set < Eval Factory Node > ( ) ;", "if ( filter . consider ( current Node ) ) {", "result . add ( current Node ) ; }", "recursive Get Child Nodes ( result , current Node , filter ) ;", "return result ; }"]}
{"ids": "74396", "code": ["void dispose ( ) {", "if ( popup != null ) {", "popup . remove All ( ) ; }", "popup = null ; }"]}
{"ids": "46894", "code": ["void check Frame Value ( final Object value ) {", "if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED THIS ) {", "return ; }", "if ( value instanceof String ) {", "check Internal Name ( ( String ) value , STR_ ) ;", "return ; }", "if ( ! ( value instanceof Label ) ) {", "throw new Illegal Argument Exception ( STR_ + value ) ; }", "else {", "used Labels . add ( ( Label ) value ) ; } }"]}
{"ids": "4713", "code": ["@ Override public void parse ( final Cookie cookie , final String value ) throws Malformed Cookie Exception {", "if ( cookie == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( value == null ) {", "throw new Malformed Cookie Exception ( STR_ ) ; }", "int age = - NUM_ ;", "try {", "age = Integer . parse Int ( value ) ; }", "catch ( final Number Format Exception e ) {", "age = - NUM_ ; }", "if ( age < NUM_ ) {", "throw new Malformed Cookie Exception ( STR_ ) ; }", "cookie . set Expiry Date ( new Date ( System . current Time Millis ( ) + age * NUM_ ) ) ; }"]}
{"ids": "86284", "code": ["public Variable Config Resource ( String configuration , Text Resource base Resource ) {", "this ( base Resource ) ;", "for ( String configuration Line : configuration . split ( STR_ ) ) {", "String [ ] config Split = configuration Line . split ( STR_ ) ;", "add Config ( config Split [ NUM_ ] , config Split [ NUM_ ] ) ; } }"]}
{"ids": "14270", "code": ["private static String read File ( String file Name ) {", "String class Method = STR_ ;", "String Builder file Data = new String Builder ( ) ;", "String file String = STR_ ;", "try {", "Buffered Reader reader = new Buffered Reader ( new File Reader ( file Name ) ) ;", "char [ ] buf = new char [ NUM_ ] ;", "int num Read = NUM_ ;", "while ( ( num Read = reader . read ( buf ) ) != - NUM_ ) {", "String read Data = String . value Of ( buf , NUM_ , num Read ) ;", "file Data . append ( read Data ) ;", "buf = new char [ NUM_ ] ; }", "reader . close ( ) ;", "file String = file Data . to String ( ) ; }", "catch ( Exception e ) {", "debug . error ( class Method + STR_ + file Name ) ; }", "return file String ; }"]}
{"ids": "22477", "code": ["public Scale IO Snapshot Volume Response snapshot Multi Volume ( Map < String , String > id 2 snapshot , String system Id ) throws Exception {", "String uri = Scale IO Constants . get Snapshot Volumes URI ( system Id ) ;", "Scale IO Snapshot Volumes sp Vol = new Scale IO Snapshot Volumes ( ) ;", "for ( Map . Entry < String , String > entry : id 2 snapshot . entry Set ( ) ) {", "sp Vol . add Snapshot ( entry . get Key ( ) , entry . get Value ( ) ) ; }", "Client Response response = post ( URI . create ( uri ) , get Json For Entity ( sp Vol ) ) ;", "return get Response Object ( Scale IO Snapshot Volume Response . class , response ) ; }"]}
{"ids": "70911", "code": ["public synchronized void return Buf ( byte [ ] buf ) {", "if ( buf == null || buf . length > m Size Limit ) {", "return ; }", "m Buffers By Last Use . add ( buf ) ;", "int pos = Collections . binary Search ( m Buffers By Size , buf , BUF COMPARATOR ) ;", "if ( pos < NUM_ ) {", "pos = - pos - NUM_ ; }", "m Buffers By Size . add ( pos , buf ) ;", "m Current Size += buf . length ;", "trim ( ) ; }"]}
{"ids": "67647", "code": ["public boolean is Draft ( ) {", "return draft != null && draft . boolean Value ( ) ; }"]}
{"ids": "80613", "code": ["private Weather Updater ( ) {", "on Turn Reached ( NUM_ ) ; }"]}
{"ids": "78956", "code": ["protected void write Data To File ( Node Holder node Holder ) throws Carbon Data Writer Exception {", "long offset = write Data To File ( node Holder , file Channel ) ;", "Blocklet Info Columnar blocklet Info = get Blocklet Info ( node Holder , offset ) ;", "blocklet Info List . add ( blocklet Info ) ; }"]}
{"ids": "82225", "code": ["protected Container create Side Navigation Component ( Vector commands ) {", "return create Side Navigation Component ( commands , null ) ; }"]}
{"ids": "32876", "code": ["public static double min ( double [ ] a ) {", "double min = Double . POSITIVE INFINITY ;", "for ( int i = NUM_ ; i < a . length ; i ++ ) {", "if ( Double . is Na N ( a [ i ] ) ) return Double . Na N ;", "if ( a [ i ] < min ) min = a [ i ] ; }", "return min ; }"]}
{"ids": "41014", "code": ["@ Override public void on Update Selection ( int old Sel Start , int old Sel End , int new Sel Start , int new Sel End , int candidates Start , int candidates End ) {", "super . on Update Selection ( old Sel Start , old Sel End , new Sel Start , new Sel End , candidates Start , candidates End ) ;", "if ( m Composing . length ( ) > NUM_ && ( new Sel Start != candidates End || new Sel End != candidates End ) ) {", "m Composing . set Length ( NUM_ ) ;", "update Candidates ( ) ;", "Input Connection ic = get Current Input Connection ( ) ;", "if ( ic != null ) {", "ic . finish Composing Text ( ) ; } } }"]}
{"ids": "85681", "code": ["public < T > T map To ( final Class < T > mapping Class ) {", "return map To ( mapping Class , null ) ; }"]}
{"ids": "34611", "code": ["private Array List < Spinner Language Element > create Spinner Languages ( int avoid Language ) {", "Array List < Spinner Language Element > result = new Array List < Spinner Language Element > ( ) ;", "List < String > languages = m Session Options . all Languages ( ) ;", "for ( int i = NUM_ ; i < languages . size ( ) ; ++ i ) {", "if ( i != avoid Language ) {", "result . add ( new Spinner Language Element ( languages . get ( i ) , i ) ) ; } }", "return result ; }"]}
{"ids": "3246", "code": ["private String user Agent ( ) {", "return m User Agent ; }"]}
{"ids": "10579", "code": ["protected void collect Properties ( Class < ? > type , Type < ? > reference Type , Map < String , Property > properties ) {", "try {", "Bean Info bean Info = Introspector . get Bean Info ( type ) ;", "Property Descriptor [ ] descriptors = bean Info . get Property Descriptors ( ) ;", "for ( final Property Descriptor pd : descriptors ) {", "try {", "Method read Method = get Read Method ( pd , type ) ;", "Method write Method = get Write Method ( pd , type , null ) ;", "Property property = process Property ( pd . get Name ( ) , pd . get Property Type ( ) , read Method , write Method , type , reference Type , properties ) ;", "post Process Property ( property , pd , read Method , write Method , type , reference Type , properties ) ; }", "catch ( final Exception e ) {", "throw new Runtime Exception ( STR_ + reference Type . get Canonical Name ( ) + STR_ + pd . get Name ( ) + STR_ , e ) ; } } }", "catch ( Introspection Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "34154", "code": ["private void before Key ( ) throws JSON Exception {", "Scope context = peek ( ) ;", "if ( context == Scope . NONEMPTY OBJECT ) {", "out . append ( STR_ ) ; }", "else if ( context != Scope . EMPTY OBJECT ) {", "throw new JSON Exception ( STR_ ) ; }", "newline ( ) ;", "replace Top ( Scope . DANGLING KEY ) ; }"]}
{"ids": "64008", "code": ["public void add Header View ( View v , Object data , boolean is Selectable ) {", "if ( m Adapter != null && ! ( m Adapter instanceof Header View List Adapter ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "Fixed View Info info = new Fixed View Info ( ) ;", "info . view = v ;", "info . data = data ;", "info . is Selectable = is Selectable ;", "m Header View Infos . add ( info ) ;", "if ( m Adapter != null && m Observer != null ) {", "m Observer . on Changed ( ) ; } }"]}
{"ids": "36410", "code": ["private void render Operator Background ( final Operator operator , final Graphics 2 D g 2 ) {", "Rectangle 2 D frame = model . get Operator Rect ( operator ) ;", "if ( frame == null ) {", "return ; }", "Round Rectangle 2 D background = new Round Rectangle 2 D . Double ( frame . get X ( ) - NUM_ , frame . get Y ( ) - NUM_ , frame . get Width ( ) + NUM_ , frame . get Height ( ) + NUM_ , OPERATOR BG CORNER , OPERATOR BG CORNER ) ;", "g 2 . set Color ( Color . WHITE ) ;", "g 2 . fill ( background ) ;", "Rectangle 2 D name Bounds = OPERATOR FONT . get String Bounds ( operator . get Name ( ) , g 2 . get Font Render Context ( ) ) ;", "if ( name Bounds . get Width ( ) > frame . get Width ( ) ) {", "double relevant Width = Math . min ( name Bounds . get Width ( ) , frame . get Width ( ) * MAX HEADER RATIO ) ;", "double offset = ( frame . get Width ( ) - relevant Width ) / NUM_ ;", "int x = ( int ) ( frame . get X ( ) + offset ) ;", "int padding = NUM_ ;", "Round Rectangle 2 D name Background = new Round Rectangle 2 D . Double ( ( int ) Math . min ( frame . get X ( ) - padding , x - padding ) , frame . get Y ( ) - NUM_ , relevant Width + NUM_ * padding , Process Renderer Model . HEADER HEIGHT + NUM_ , OPERATOR BG CORNER , OPERATOR BG CORNER ) ;", "g 2 . fill ( name Background ) ; }", "render Ports Background ( operator . get Input Ports ( ) , g 2 ) ;", "render Ports Background ( operator . get Output Ports ( ) , g 2 ) ; }"]}
{"ids": "74441", "code": ["protected void option Window ( Action Event e ) {", "if ( options Frame == null ) {", "options Frame = new Jmri J Frame ( Bundle . get Message ( STR_ ) , false , true ) ;", "options Pane = options Frame . get Content Pane ( ) ;", "options Pane . set Layout ( new Box Layout ( options Frame . get Content Pane ( ) , Box Layout . Y AXIS ) ) ;", "clear Entry . set Selected Index ( nx Pairs . get Clear Down Option ( ) ) ;", "J Panel p 1 = new J Panel ( ) ;", "clear Entry . set Tool Tip Text ( STR_ ) ;", "p 1 . add ( new J Label ( Bundle . get Message ( STR_ ) ) ) ;", "p 1 . add ( clear Entry ) ;", "options Pane . add ( p 1 ) ;", "J Panel p 2 = new J Panel ( ) ;", "initialize Color Combo ( setting Track Color Box ) ;", "set Color Combo ( setting Track Color Box , nx Pairs . get Setting Route Color ( ) ) ;", "Action Listener setting Track Color Listener = null ;", "setting Track Color Box . add Action Listener ( setting Track Color Listener ) ;", "p 2 . add ( new J Label ( Bundle . get Message ( STR_ ) ) ) ;", "p 2 . add ( setting Track Color Box ) ;", "options Pane . add ( p 2 ) ;", "duration Setting . set Text ( STR_ + nx Pairs . get Setting Timer ( ) ) ;", "if ( nx Pairs . use Different Color When Setting ( ) ) {", "duration Setting . set Enabled ( true ) ; }", "else {", "duration Setting . set Enabled ( false ) ; }", "J Panel p 3 = new J Panel ( ) ;", "p 3 . add ( new J Label ( Bundle . get Message ( STR_ ) ) ) ;", "p 3 . add ( duration Setting ) ;", "options Pane . add ( p 3 ) ;", "J Panel p 4 = new J Panel ( ) ;", "p 4 . add ( dispatcher Use ) ;", "dispatcher Use . set Selected ( nx Pairs . get Dispatcher Integration ( ) ) ;", "options Pane . add ( p 4 ) ;", "J Button ok = new J Button ( Bundle . get Message ( STR_ ) ) ;", "options Pane . add ( ok ) ;", "ok . add Action Listener ( null ) ; }", "options Frame . pack ( ) ;", "options Frame . set Visible ( true ) ; }"]}
{"ids": "30400", "code": ["public void make Existing Demand Bill Inactive ( String assessment No ) {", "Demand Bill Service demand Bill Service = ( Demand Bill Service ) bean Provider . get Bean ( STR_ ) ;", "demand Bill Service . make Demand Bill Inactive ( assessment No ) ; }"]}
{"ids": "62701", "code": ["public void write ( Data Output out ) throws IO Exception {", "Writable Utils . write V Int ( out , length ) ;", "out . write ( bytes , NUM_ , length ) ; }"]}
{"ids": "81818", "code": ["int character Class ( ) throws RE Syntax Exception {", "if ( pattern . char At ( idx ) != STR_ ) {", "internal Error ( ) ; }", "if ( ( idx + NUM_ ) >= len || pattern . char At ( ++ idx ) == STR_ ) {", "syntax Error ( STR_ ) ; }", "if ( idx < len && pattern . char At ( idx ) == STR_ ) {", "idx ++ ;", "int idx Start = idx ;", "while ( idx < len && pattern . char At ( idx ) >= STR_ && pattern . char At ( idx ) <= STR_ ) {", "idx ++ ; }", "if ( ( idx + NUM_ ) < len && pattern . char At ( idx ) == STR_ && pattern . char At ( idx + NUM_ ) == STR_ ) {", "String char Class = pattern . substring ( idx Start , idx ) ;", "Character i = ( Character ) hash POSIX . get ( char Class ) ;", "if ( i != null ) {", "idx += NUM_ ;", "return node ( RE . OP POSIXCLASS , i . char Value ( ) ) ; }", "syntax Error ( STR_ + char Class + STR_ ) ; }", "syntax Error ( STR_ ) ; }", "int ret = node ( RE . OP ANYOF , NUM_ ) ;", "char CHAR INVALID = Character . MAX VALUE ;", "char last = CHAR INVALID ;", "char simple Char ;", "boolean include = true ;", "boolean defining Range = false ;", "int idx First = idx ;", "char range Start = Character . MIN VALUE ;", "char range End ;", "RE Range range = new RE Range ( ) ;", "while ( idx < len && pattern . char At ( idx ) != STR_ ) {", "switch On Character : switch ( pattern . char At ( idx ) ) {", "case STR_ :", "include = ! include ;", "if ( idx == idx First ) {", "range . include ( Character . MIN VALUE , Character . MAX VALUE , true ) ; }", "idx ++ ;", "continue ;", "case STR_ : {", "int c ;", "switch ( c = escape ( ) ) {", "case ESC COMPLEX :", "case ESC BACKREF :", "syntax Error ( STR_ ) ;", "case ESC CLASS :", "if ( defining Range ) {", "syntax Error ( STR_ ) ; }", "switch ( pattern . char At ( idx - NUM_ ) ) {", "case RE . E NSPACE :", "range . include ( Character . MIN VALUE , NUM_ , include ) ;", "range . include ( ( char ) NUM_ , include ) ;", "range . include ( NUM_ , NUM_ , include ) ;", "range . include ( NUM_ , Character . MAX VALUE , include ) ;", "break ;", "case RE . E NALNUM :", "range . include ( Character . MIN VALUE , STR_ , include ) ;", "range . include ( STR_ , STR_ , include ) ;", "range . include ( STR_ , STR_ , include ) ;", "range . include ( STR_ , include ) ;", "range . include ( STR_ , Character . MAX VALUE , include ) ;", "break ;", "case RE . E NDIGIT :", "range . include ( Character . MIN VALUE , STR_ , include ) ;", "range . include ( STR_ , Character . MAX VALUE , include ) ;", "break ;", "case RE . E SPACE :", "range . include ( STR_ , include ) ;", "range . include ( STR_ , include ) ;", "range . include ( STR_ , include ) ;", "range . include ( STR_ , include ) ;", "range . include ( STR_ , include ) ;", "range . include ( STR_ , include ) ;", "break ;", "case RE . E ALNUM :", "range . include ( STR_ , STR_ , include ) ;", "range . include ( STR_ , STR_ , include ) ;", "range . include ( STR_ , include ) ;", "case RE . E DIGIT :", "range . include ( STR_ , STR_ , include ) ;", "break ; }", "last = CHAR INVALID ;", "break ;", "default :", "simple Char = ( char ) c ;", "break switch On Character ; } }", "continue ;", "case STR_ :", "if ( defining Range ) {", "syntax Error ( STR_ ) ; }", "defining Range = true ;", "range Start = ( last == CHAR INVALID ? NUM_ : last ) ;", "if ( ( idx + NUM_ ) < len && pattern . char At ( ++ idx ) == STR_ ) {", "simple Char = Character . MAX VALUE ;", "break ; }", "continue ;", "default :", "simple Char = pattern . char At ( idx ++ ) ;", "break ; }", "if ( defining Range ) {", "range End = simple Char ;", "if ( range Start >= range End ) {", "syntax Error ( STR_ ) ; }", "range . include ( range Start , range End , include ) ;", "last = CHAR INVALID ;", "defining Range = false ; }", "else {", "if ( idx >= len || pattern . char At ( idx ) != STR_ ) {", "range . include ( simple Char , include ) ; }", "last = simple Char ; } }", "if ( idx == len ) {", "syntax Error ( STR_ ) ; }", "idx ++ ;", "instruction [ ret + RE . offset Opdata ] = ( char ) range . num ;", "for ( int i = NUM_ ; i < range . num ; i ++ ) {", "emit ( ( char ) range . min Range [ i ] ) ;", "emit ( ( char ) range . max Range [ i ] ) ; }", "return ret ; }"]}
{"ids": "84231", "code": ["@ Override public int do Final ( final byte [ ] out , final int out Off ) throws Bad Ciphertext Exception {", "complete = true ;", "int written = content Crypto Handler . do Final ( out , out Off ) ;", "update Trailing Signature ( out , out Off , written ) ;", "if ( crypto Algo . get Trailing Signature Length ( ) > NUM_ ) {", "try {", "Ciphertext Footers footer = new Ciphertext Footers ( trailing Sig . sign ( ) ) ;", "byte [ ] f Bytes = footer . to Byte Array ( ) ;", "System . arraycopy ( f Bytes , NUM_ , out , out Off + written , f Bytes . length ) ;", "return written + f Bytes . length ; }", "catch ( final Signature Exception ex ) {", "throw new Aws Crypto Exception ( ex ) ; } }", "else {", "return written ; } }"]}
{"ids": "39923", "code": ["public void hide All Budges ( ) {", "for ( Relative Layout badge : badge List ) {", "if ( badge . get Visibility ( ) == VISIBLE ) Badge Helper . hide Badge ( badge ) ; }", "badge Save Instance Hash Map . clear ( ) ; }"]}
{"ids": "53043", "code": ["public Element render ( SVG Plot svgp ) {", "Element tag = svgp . svg Element ( SVG Constants . SVG G TAG ) ;", "Element button = svgp . svg Rect ( x , y , w , h ) ;", "if ( ! Double . is Na N ( r ) ) {", "SVG Util . set Att ( button , SVG Constants . SVG RX ATTRIBUTE , r ) ;", "SVG Util . set Att ( button , SVG Constants . SVG RY ATTRIBUTE , r ) ; }", "SVG Util . set Att ( button , SVG Constants . SVG STYLE ATTRIBUTE , butcss . inline CSS ( ) ) ;", "tag . append Child ( button ) ;", "if ( svgp . get Id Element ( SVG Effects . LIGHT GRADIENT ID ) != null ) {", "Element light = svgp . svg Rect ( x , y , w , h ) ;", "if ( ! Double . is Na N ( r ) ) {", "SVG Util . set Att ( light , SVG Constants . SVG RX ATTRIBUTE , r ) ;", "SVG Util . set Att ( light , SVG Constants . SVG RY ATTRIBUTE , r ) ; }", "SVG Util . set Att ( light , SVG Constants . SVG STYLE ATTRIBUTE , STR_ + SVG Effects . LIGHT GRADIENT ID + STR_ ) ;", "tag . append Child ( light ) ; }", "if ( svgp . get Id Element ( SVG Effects . SHADOW ID ) != null ) {", "button . set Attribute ( SVG Constants . SVG FILTER ATTRIBUTE , STR_ + SVG Effects . SHADOW ID + STR_ ) ; }", "if ( title != null ) {", "Element label = svgp . svg Text ( x + w * NUM_ , y + h * NUM_ , title ) ;", "label . set Attribute ( SVG Constants . SVG STYLE ATTRIBUTE , titlecss . inline CSS ( ) ) ;", "tag . append Child ( label ) ; }", "return tag ; }"]}
{"ids": "28726", "code": ["public void add ( String gram ) {", "if ( name == null || gram == null ) return ;", "int len = gram . length ( ) ;", "if ( len < NUM_ || len > N Gram . N GRAM ) return ;", "++ n words [ len - NUM_ ] ;", "if ( freq . contains Key ( gram ) ) {", "freq . put ( gram , freq . get ( gram ) + NUM_ ) ; }", "else {", "freq . put ( gram , NUM_ ) ; } }"]}
{"ids": "24230", "code": ["public void handle Client Membership ( String client Id , int event Type ) {", "String notif Type = null ;", "List < Managed Resource > cleaned Up = null ;", "if ( event Type == Client Membership Message . LEFT ) {", "notif Type = NOTIF CLIENT LEFT ;", "cleaned Up = cleanup Bridge Client Resources ( client Id ) ; }", "else if ( event Type == Client Membership Message . CRASHED ) {", "notif Type = NOTIF CLIENT CRASHED ;", "cleaned Up = cleanup Bridge Client Resources ( client Id ) ; }", "else if ( event Type == Client Membership Message . JOINED ) {", "notif Type = NOTIF CLIENT JOINED ; }", "if ( cleaned Up != null ) {", "for ( Managed Resource resource : cleaned Up ) {", "M Bean Util . unregister M Bean ( resource ) ; } }", "Helper . send Notification ( this , new Notification ( notif Type , this . model M Bean , Helper . get Next Notification Sequence Number ( ) , client Id ) ) ; }"]}
{"ids": "43340", "code": ["public < V extends Comparable < ? super V > > Optional Double max By ( Double Function < V > key Extractor ) {", "Obj Double Box < V > result = collect ( null , null , null ) ;", "return result . a == null ? Optional Double . empty ( ) : Optional Double . of ( result . b ) ; }"]}
{"ids": "44846", "code": ["private J Label add Keybind Label ( J Panel panel , String label Text ) {", "Grid Bag Constraints gbc = new Grid Bag Constraints ( ) ;", "gbc . anchor = Grid Bag Constraints . WEST ;", "gbc . insets = new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "gbc . gridx = NUM_ ;", "gbc . gridy = keybind Label Grid Y Counter ++ ;", "gbc . weightx = NUM_ ;", "J Label jlbl = new J Label ( label Text ) ;", "panel . add ( jlbl , gbc ) ;", "return jlbl ; }"]}
{"ids": "43966", "code": ["public static boolean is Letter Or Number ( int c ) {", "return is Letter ( c ) || is Number ( c ) ; }"]}
{"ids": "40820", "code": ["public String season Summary Str ( ) {", "set Team Ranks ( ) ;", "String Builder sb = new String Builder ( ) ;", "sb . append ( ncg Summary Str ( ) ) ;", "sb . append ( STR_ + user Team . season Summary Str ( ) ) ;", "sb . append ( STR_ + league Records . broken Records Str ( get Year ( ) , user Team . abbr ) ) ;", "return sb . to String ( ) ; }"]}
{"ids": "74399", "code": ["public void add End Bumper ( ) {", "num End Bumpers ++ ;", "String name = STR_ ;", "boolean duplicate = true ;", "while ( duplicate ) {", "name = STR_ + num End Bumpers ;", "if ( finder . find Positionable Point By Name ( name ) == null ) {", "duplicate = false ; }", "if ( duplicate ) {", "num End Bumpers ++ ; } }", "Positionable Point o = new Positionable Point ( name , Positionable Point . END BUMPER , current Point , this ) ;", "point List . add ( o ) ;", "set Dirty ( true ) ; }"]}
{"ids": "48522", "code": ["public int pixel For ( Color c ) {", "return pixel For ( c . get RGB ( ) ) ; }"]}
{"ids": "2644", "code": ["void strip Non Compiled Nodes ( Node n , Set < String > files To Compile ) {", "for ( Node child : n . children ( ) ) {", "if ( ! files To Compile . contains ( child . get Source File Name ( ) ) ) {", "child . detach From Parent ( ) ; } } }"]}
{"ids": "13245", "code": ["protected void restore Base URI ( ) {", "f Base URI . pop ( ) ;", "f Literal System ID . pop ( ) ;", "f Expanded System ID . pop ( ) ;", "f Base URI Scope . pop ( ) ;", "f Current Base URI . set Base System Id ( ( String ) f Base URI . peek ( ) ) ;", "f Current Base URI . set Literal System Id ( ( String ) f Literal System ID . peek ( ) ) ;", "f Current Base URI . set Expanded System Id ( ( String ) f Expanded System ID . peek ( ) ) ; }"]}
{"ids": "8124", "code": ["public static boolean as Boolean ( Char Sequence string ) {", "return string . length ( ) > NUM_ ; }"]}
{"ids": "69075", "code": ["public void initialize ( ) {", "Texture State ts = new Texture State ( ) ;", "ts . set Enabled ( false ) ;", "set Render State ( ts ) ;", "for ( int i = NUM_ ; i < landmark List . size ( ) ; ++ i ) {", "Landmark State state = landmark List . get ( i ) ;", "add Landmark ( state , false ) ; }", "z Buffer State = new Z Buffer State ( ) ;", "z Buffer State . set Function ( Z Buffer State . Test Function . Less Than Or Equal To ) ;", "z Buffer State . set Enabled ( true ) ;", "set Render State ( z Buffer State ) ; }"]}
{"ids": "40862", "code": ["public List < JC Compilation Unit > enter Trees ( List < JC Compilation Unit > roots ) {", "if ( ! task Listener . is Empty ( ) ) {", "for ( JC Compilation Unit unit : roots ) {", "Task Event e = new Task Event ( Task Event . Kind . ENTER , unit ) ;", "task Listener . started ( e ) ; } }", "enter . main ( roots ) ;", "if ( ! task Listener . is Empty ( ) ) {", "for ( JC Compilation Unit unit : roots ) {", "Task Event e = new Task Event ( Task Event . Kind . ENTER , unit ) ;", "task Listener . finished ( e ) ; } }", "if ( need Root Classes || source Output || stub Output ) {", "List Buffer < JC Class Decl > cdefs = new List Buffer < > ( ) ;", "for ( JC Compilation Unit unit : roots ) {", "for ( List < JC Tree > defs = unit . defs ; defs . non Empty ( ) ; defs = defs . tail ) {", "if ( defs . head instanceof JC Class Decl ) cdefs . append ( ( JC Class Decl ) defs . head ) ; } }", "root Classes = cdefs . to List ( ) ; }", "for ( JC Compilation Unit unit : roots ) {", "input Files . add ( unit . sourcefile ) ; }", "return roots ; }"]}
{"ids": "60333", "code": ["final V replace Node ( long key , V value , Object cv ) {", "int hash = spread ( key ) ;", "for ( Node < V > [ ] tab = table ; ; ) {", "Node < V > f ;", "int n , i , fh ;", "if ( tab == null || ( n = tab . length ) == NUM_ || ( f = tab At ( tab , i = ( n - NUM_ ) & hash ) ) == null ) {", "break ; }", "else if ( ( fh = f . hash ) == MOVED ) {", "tab = help Transfer ( tab , f ) ; }", "else {", "V old Val = null ;", "boolean validated = false ;", "synchronized ( f ) {", "if ( tab At ( tab , i ) == f ) {", "if ( fh >= NUM_ ) {", "validated = true ;", "for ( Node < V > e = f , pred = null ; ; ) {", "if ( ( e . key == key ) ) {", "V ev = e . val ;", "if ( cv == null || cv == ev || ( ev != null && cv . equals ( ev ) ) ) {", "old Val = ev ;", "if ( value != null ) {", "e . val = value ; }", "else if ( pred != null ) {", "pred . next = e . next ; }", "else {", "set Tab At ( tab , i , e . next ) ; } }", "break ; }", "pred = e ;", "if ( ( e = e . next ) == null ) {", "break ; } } }", "else if ( f instanceof Tree Bin ) {", "validated = true ;", "Tree Bin < V > t = ( Tree Bin < V > ) f ;", "Tree Node < V > r , p ;", "if ( ( r = t . root ) != null && ( p = r . find Tree Node ( hash , key ) ) != null ) {", "V pv = p . val ;", "if ( cv == null || cv == pv || ( pv != null && cv . equals ( pv ) ) ) {", "old Val = pv ;", "if ( value != null ) {", "p . val = value ; }", "else if ( t . remove Tree Node ( p ) ) {", "set Tab At ( tab , i , untreeify ( t . first ) ) ; } } } } } }", "if ( validated ) {", "if ( old Val != null ) {", "if ( value == null ) {", "add Count ( - NUM_ , - NUM_ ) ; }", "return old Val ; }", "break ; } } }", "return null ; }"]}
{"ids": "54502", "code": ["public static Line By Line File Input Operator checkpoint ( Line By Line File Input Operator oper , Byte Array Output Stream bos ) throws Exception {", "Kryo kryo = new Kryo ( ) ;", "Output loutput = new Output ( bos ) ;", "kryo . write Object ( loutput , oper ) ;", "loutput . close ( ) ;", "Input l Input = new Input ( bos . to Byte Array ( ) ) ;", "@ Suppress Warnings ( STR_ ) Line By Line File Input Operator check Pointed Oper = kryo . read Object ( l Input , oper . get Class ( ) ) ;", "l Input . close ( ) ;", "return check Pointed Oper ; }"]}
{"ids": "6379", "code": ["public static String explode ( Collection < String > collection , String delimiter ) {", "String Builder sb = new String Builder ( ) ;", "if ( ! collection . is Empty ( ) ) {", "Iterator < String > i = collection . iterator ( ) ;", "sb . append ( i . next ( ) ) ;", "while ( i . has Next ( ) ) {", "sb . append ( delimiter ) ;", "sb . append ( i . next ( ) ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "37838", "code": ["@ Override public Enumeration < String > enumerate Measures ( ) {", "Vector < String > new Vector = new Vector < String > ( NUM_ ) ;", "new Vector . add Element ( STR_ ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "83318", "code": ["public static void write Statistics ( T Double Object Hash Map < Descriptive Statistics > stats Map , String key Label , String file ) throws IO Exception {", "double [ ] keys = stats Map . keys ( ) ;", "Arrays . sort ( keys ) ;", "Buffered Writer writer = new Buffered Writer ( new File Writer ( file ) ) ;", "writer . write ( key Label ) ;", "writer . write ( TAB ) ;", "writer . write ( STR_ ) ;", "writer . write ( TAB ) ;", "writer . write ( STR_ ) ;", "writer . write ( TAB ) ;", "writer . write ( STR_ ) ;", "writer . write ( TAB ) ;", "writer . write ( STR_ ) ;", "writer . write ( TAB ) ;", "writer . write ( STR_ ) ;", "writer . new Line ( ) ;", "for ( double key : keys ) {", "Descriptive Statistics stats = stats Map . get ( key ) ;", "writer . write ( String . value Of ( key ) ) ;", "writer . write ( TAB ) ;", "writer . write ( String . value Of ( stats . get Mean ( ) ) ) ;", "writer . write ( TAB ) ;", "writer . write ( String . value Of ( stats . get Percentile ( NUM_ ) ) ) ;", "writer . write ( TAB ) ;", "writer . write ( String . value Of ( stats . get Min ( ) ) ) ;", "writer . write ( TAB ) ;", "writer . write ( String . value Of ( stats . get Max ( ) ) ) ;", "writer . write ( TAB ) ;", "writer . write ( String . value Of ( stats . get N ( ) ) ) ;", "writer . new Line ( ) ; }", "writer . close ( ) ; }"]}
{"ids": "38490", "code": ["public void action Performed ( Action Event e ) {", "if ( ! check Modified ( ) ) return ;", "if ( m Script . get Filename ( ) == null ) return ;", "try {", "m Script . start ( m Args ) ; }", "catch ( Exception ex ) {", "ex . print Stack Trace ( ) ;", "J Option Pane . show Message Dialog ( File Scripting Panel . this , STR_ + ex , STR_ , J Option Pane . ERROR MESSAGE ) ; } }"]}
{"ids": "46865", "code": ["static String encode Stub ( RMI Server rmi Server , Map < String , ? > env ) throws IO Exception {", "if ( IIOP Helper . is Stub ( rmi Server ) ) return STR_ + encode IIOP Stub ( rmi Server , env ) ;", "else return STR_ + encode JRMP Stub ( rmi Server , env ) ; }"]}
{"ids": "36527", "code": ["public int line To Y ( int line ) {", "Font Metrics fm = painter . get Font Metrics ( ) ;", "return ( line - first Line ) * fm . get Height ( ) - ( fm . get Leading ( ) + fm . get Max Descent ( ) ) ; }"]}
{"ids": "75424", "code": ["private void handle Double Click ( Double Click Event e ) {", "I Selection selection = e . get Selection ( ) ;", "if ( selection instanceof I Structured Selection ) {", "I Structured Selection structured = ( I Structured Selection ) selection ;", "if ( structured . size ( ) == NUM_ ) {", "Object first = structured . get First Element ( ) ;", "if ( first instanceof ISVN Remote File ) {", "open Action . selection Changed ( null , selection ) ;", "open Action . run ( null ) ; }", "else {", "tree Viewer . set Expanded State ( first , ! tree Viewer . get Expanded State ( first ) ) ; } } } }"]}
{"ids": "43602", "code": ["public static long start Time ( ) {", "return System . nano Time ( ) ; }"]}
{"ids": "4239", "code": ["@ Transactional public int delete All ( ) {", "List < T > all Entities = retrieve All ( ) ;", "for ( T entity : all Entities ) {", "delete ( entity ) ; }", "return all Entities . size ( ) ; }"]}
{"ids": "30472", "code": ["private GS Message Impl receive From Queue ( long timeout ) throws Receive From Queue Exception {", "Transaction txn = m session . get Transaction ( ) ;", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . log ( Level . FINE , STR_ + txn ) ; }", "try {", "return ( GS Message Impl ) m space . take ( m jms Message Template , txn , timeout ) ; }", "catch ( Exception e ) {", "throw new Receive From Queue Exception ( e ) ; } }"]}
{"ids": "45428", "code": ["public static void write Byte Array To File ( File file , byte [ ] data , boolean append ) throws IO Exception {", "Output Stream out = null ;", "try {", "out = open Output Stream ( file , append ) ;", "out . write ( data ) ;", "out . close ( ) ; }", "finally {", "IO Utils . close Quietly ( out ) ; } }"]}
{"ids": "78857", "code": ["public String find Next ( boolean previous Flipped ) {", "boolean reset Is Flipped = true ;", "if ( previous Flipped && count > NUM_ ) {", "if ( ! value Iterator . has Next ( ) ) {", "value Iterator = values . iterator ( ) ;", "index = NUM_ ;", "is Flipped = true ;", "reset Is Flipped = false ; }", "else {", "index ++ ; }", "current Value = value Iterator . next ( ) ; }", "count ++ ;", "if ( reset Is Flipped ) {", "is Flipped = false ; }", "return current Value ; }"]}
{"ids": "84275", "code": ["public static boolean is Not Empty ( List < Object > list ) {", "return ! list . is Empty ( ) ; }"]}
{"ids": "15125", "code": ["private Registration Result check Password ( String password , String confirm Password ) {", "if ( ( password == null ) || password . length ( ) == NUM_ ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ ) ; }", "return Registration Result . NO PASSWORD ERROR ; }", "else {", "if ( password . length ( ) < required Password Length ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ ) ; }", "return Registration Result . PASSWORD TOO SHORT ; }", "if ( ( confirm Password == null ) || confirm Password . length ( ) == NUM_ ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ ) ; }", "return Registration Result . NO CONFIRMATION ERROR ; }", "else {", "if ( ! password . equals ( confirm Password ) ) {", "return Registration Result . PASSWORD MISMATCH ERROR ; } } }", "return Registration Result . NO ERROR ; }"]}
{"ids": "71979", "code": ["private static LDAP Filter create AND Filter ( Filter Set filter Set ) throws LDAP Exception , IO Exception {", "List < JAXB Element < ? > > list = filter Set . get Filter Group ( ) ;", "Array List < Raw Filter > filters = new Array List < > ( list . size ( ) ) ;", "for ( JAXB Element < ? > filter : list ) {", "filters . add ( create Filter ( filter ) ) ; }", "return LDAP Filter . create AND Filter ( filters ) ; }"]}
{"ids": "70275", "code": ["void calculate Utility ( Firing Plan firing Plan , int overheat Tolerance , boolean shooter Is Aero ) {", "int overheat = NUM_ ;", "if ( firing Plan . get Heat ( ) > overheat Tolerance ) {", "overheat = firing Plan . get Heat ( ) - overheat Tolerance ; }", "double modifier = NUM_ ;", "modifier += calc Command Utility ( firing Plan . get Target ( ) ) ;", "modifier += calc Strategic Building Target Utility ( firing Plan . get Target ( ) ) ;", "modifier += calc Priority Unit Target Utility ( firing Plan . get Target ( ) ) ;", "double utility = NUM_ ;", "utility += DAMAGE UTILITY * firing Plan . get Expected Damage ( ) ;", "utility += CRITICAL UTILITY * firing Plan . get Expected Criticals ( ) ;", "utility += KILL UTILITY * firing Plan . get Kill Probability ( ) ;", "utility *= calc Target Potential Damage Multiplier ( firing Plan . get Target ( ) ) ;", "utility += TARGET HP FRACTION DEALT UTILITY * calc Damage Allocation Utility ( firing Plan . get Target ( ) , firing Plan . get Expected Damage ( ) ) ;", "utility -= calc Civilian Target Disutility ( firing Plan . get Target ( ) ) ;", "utility *= modifier ;", "utility -= ( shooter Is Aero ? OVERHEAT DISUTILITY AERO : OVERHEAT DISUTILITY ) * overheat ;", "utility -= ( firing Plan . get Target ( ) instanceof Mech Warrior ) ? EJECTED PILOT DISUTILITY : NUM_ ;", "firing Plan . set Utility ( utility ) ; }"]}
{"ids": "67661", "code": ["public void put ( String key , double value ) {", "if ( value == Double . POSITIVE INFINITY ) {", "put ( key , STR_ ) ; }", "else if ( value == Double . NEGATIVE INFINITY ) {", "put ( key , STR_ ) ; }", "else {", "put ( key , Double . to String ( value ) ) ; } }"]}
{"ids": "29987", "code": ["public static long persian To Julian ( long year , int month , int day ) {", "return NUM_ * ( ( ceil ( year - NUM_ , NUM_ ) + NUM_ ) - NUM_ ) + ( ( long ) Math . floor ( ( NUM_ * ( ceil ( year - NUM_ , NUM_ ) + NUM_ ) - NUM_ ) / NUM_ ) ) + ( Persian Calendar Constants . PERSIAN EPOCH - NUM_ ) + NUM_ * ( ( long ) Math . floor ( ( year - NUM_ ) / NUM_ ) ) + ( month < NUM_ ? NUM_ * month : NUM_ * month + NUM_ ) + day ; }"]}
{"ids": "73965", "code": ["@ Override public void mouse Dragged ( Mouse Event evt ) {", "int x Trans = NUM_ ;", "int y Trans = NUM_ ;", "if ( slider . get Snap To Ticks ( ) ) {", "int pos = get Location For Value ( get Snapped Value ( evt ) ) ;", "if ( pos > - NUM_ ) {", "if ( slider . get Orientation ( ) == J Slider . HORIZONTAL ) {", "x Trans = pos - evt . get X ( ) + offset ;", "evt . translate Point ( x Trans , NUM_ ) ; }", "else {", "y Trans = pos - evt . get Y ( ) + offset ;", "evt . translate Point ( NUM_ , y Trans ) ; } } }", "delegate . mouse Dragged ( evt ) ;", "evt . translate Point ( x Trans , y Trans ) ; }"]}
{"ids": "53739", "code": ["@ Override final Node < K , V > find ( int h , Object k ) {", "if ( k != null ) {", "for ( Node < K , V > e = first ; e != null ; e = e . next ) {", "int s ;", "K ek ;", "if ( ( ( s = lock State ) & ( WAITER | WRITER ) ) != NUM_ ) {", "if ( e . hash == h && ( ( ek = e . key ) == k || ( ek != null && k . equals ( ek ) ) ) ) return e ; }", "else if ( U . compare And Swap Int ( this , LOCKSTATE , s , s + READER ) ) {", "Tree Node < K , V > r , p ;", "try {", "p = ( ( r = root ) == null ? null : r . find Tree Node ( h , k , null ) ) ; }", "finally {", "Thread w ;", "int ls ;", "do { }", "while ( ! U . compare And Swap Int ( this , LOCKSTATE , ls = lock State , ls - READER ) ) ;", "if ( ls == ( READER | WAITER ) && ( w = waiter ) != null ) Lock Support . unpark ( w ) ; }", "return p ; } } }", "return null ; }"]}
{"ids": "17277", "code": ["public void stop Enumeration ( Enumeration Deletion Context aws ) {", "aws . compute Enumeration Request . enumeration Action = Enumeration Action . STOP ;", "handle Enumeration Request For Deletion ( aws ) ; }"]}
{"ids": "8514", "code": ["public static void do Restart ( Context c ) {", "try {", "if ( c != null ) {", "Package Manager pm = c . get Package Manager ( ) ;", "if ( pm != null ) {", "Intent m Start Activity = pm . get Launch Intent For Package ( c . get Package Name ( ) ) ;", "if ( m Start Activity != null ) {", "m Start Activity . add Flags ( Intent . FLAG ACTIVITY CLEAR TOP ) ;", "int m Pending Intent Id = NUM_ ;", "Pending Intent m Pending Intent = Pending Intent . get Activity ( c , m Pending Intent Id , m Start Activity , Pending Intent . FLAG CANCEL CURRENT ) ;", "Alarm Manager mgr = ( Alarm Manager ) c . get System Service ( Context . ALARM SERVICE ) ;", "mgr . set ( Alarm Manager . RTC , System . current Time Millis ( ) + NUM_ , m Pending Intent ) ;", "System . exit ( NUM_ ) ; }", "else {", "Log . e ( STR_ , STR_ ) ; } }", "else {", "Log . e ( STR_ , STR_ ) ; } }", "else {", "Log . e ( STR_ , STR_ ) ; } }", "catch ( Exception ex ) {", "Log . e ( STR_ , STR_ ) ; } }"]}
{"ids": "25231", "code": ["public Collection < Object > values ( ) {", "Array List < Object > answer = new Array List < Object > ( read Methods . size ( ) ) ;", "for ( Iterator < Object > iter = value Iterator ( ) ; iter . has Next ( ) ; ) {", "answer . add ( iter . next ( ) ) ; }", "return Collections . unmodifiable List ( answer ) ; }"]}
{"ids": "13189", "code": ["protected Date Time Data parse ( String str ) throws Schema Date Time Exception {", "Date Time Data date = new Date Time Data ( str , this ) ;", "int len = str . length ( ) ;", "int end = get Year Month ( str , NUM_ , len , date ) ;", "date . day = DAY ;", "parse Time Zone ( str , end , len , date ) ;", "validate Date Time ( date ) ;", "save Unnormalized ( date ) ;", "if ( date . utc != NUM_ && date . utc != STR_ ) {", "normalize ( date ) ; }", "date . position = NUM_ ;", "return date ; }"]}
{"ids": "61954", "code": ["public Array Val ( double [ ] values ) {", "this . array = new double [ values . length ] ;", "for ( int i = NUM_ ; i < array . length ; i ++ ) {", "array [ i ] = values [ i ] ; }", "hashcode = Arrays . hash Code ( array ) ; }"]}
{"ids": "22219", "code": ["public void add Child ( String child ) {", "if ( child == null ) {", "return ; }", "String child Path = path . ends With ( STR_ ) ? path + child : path + STR_ + child ;", "children . add ( new Zk Node ( child Path ) ) ; }"]}
{"ids": "26931", "code": ["@ Visible For Testing public static boolean send To T Master ( String command , String topology Name , Scheduler State Manager Adaptor state Manager , Network Utils . Tunnel Config tunnel Config ) {", "LOG . fine ( STR_ + topology Name ) ;", "Topology Master . T Master Location location = state Manager . get T Master Location ( topology Name ) ;", "if ( location == null ) {", "LOG . severe ( STR_ + topology Name ) ;", "return false ; }", "LOG . fine ( STR_ + topology Name ) ;", "String url = String . format ( STR_ , location . get Host ( ) , location . get Controller Port ( ) , command , location . get Topology Id ( ) ) ;", "try {", "URL endpoint = new URL ( url ) ;", "LOG . fine ( STR_ + endpoint ) ;", "return send Get Request ( endpoint , command , tunnel Config ) ; }", "catch ( Malformed URL Exception e ) {", "throw new Runtime Exception ( STR_ + url , e ) ; } }"]}
{"ids": "17953", "code": ["public int add Padding ( byte [ ] in , int in Off ) {", "byte code = ( byte ) ( in . length - in Off ) ;", "while ( in Off < ( in . length - NUM_ ) ) {", "in [ in Off ] = ( byte ) random . next Int ( ) ;", "in Off ++ ; }", "in [ in Off ] = code ;", "return code ; }"]}
{"ids": "77417", "code": ["public void update ( long duration , Time Unit unit ) {", "update ( unit . to Nanos ( duration ) ) ; }"]}
{"ids": "39953", "code": ["public static String from Doc 2 String ( Document doc ) throws Exception {", "K Xml Serializer serializer = new K Xml Serializer ( ) ;", "Byte Array Output Stream bos = new Byte Array Output Stream ( ) ;", "Data Output Stream dos = new Data Output Stream ( bos ) ;", "try {", "serializer . set Feature ( STR_ , true ) ;", "serializer . set Output ( dos , Xform Constants . DEFAULT CHARACTER ENCODING ) ;", "doc . write ( serializer ) ;", "serializer . flush ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "return null ; }", "return new String ( bos . to Byte Array ( ) , Xform Constants . DEFAULT CHARACTER ENCODING ) ; }"]}
{"ids": "26209", "code": ["public int add Order Term ( Generic Value order Term ) {", "order Terms . add ( order Term ) ;", "return order Terms . index Of ( order Term ) ; }"]}
{"ids": "56977", "code": ["public static int check Actions ( Map < String , Object > entry ) {", "boolean ip 6 = false ;", "boolean ip 4 = false ;", "String actions = null ;", "if ( entry . contains Key ( Static Flow Entry Pusher . COLUMN ACTIONS ) || entry . contains Key ( Static Flow Entry Pusher . COLUMN INSTR APPLY ACTIONS ) || entry . contains Key ( Static Flow Entry Pusher . COLUMN INSTR WRITE ACTIONS ) ) {", "if ( entry . contains Key ( Static Flow Entry Pusher . COLUMN ACTIONS ) ) {", "actions = ( String ) entry . get ( Static Flow Entry Pusher . COLUMN ACTIONS ) ; }", "else if ( entry . contains Key ( Static Flow Entry Pusher . COLUMN INSTR APPLY ACTIONS ) ) {", "actions = ( String ) entry . get ( Static Flow Entry Pusher . COLUMN INSTR APPLY ACTIONS ) ; }", "else if ( entry . contains Key ( Static Flow Entry Pusher . COLUMN INSTR WRITE ACTIONS ) ) {", "actions = ( String ) entry . get ( Static Flow Entry Pusher . COLUMN INSTR WRITE ACTIONS ) ; }", "if ( actions . contains ( Match Utils . STR ICMPV 6 CODE ) || actions . contains ( Match Utils . STR ICMPV 6 TYPE ) || actions . contains ( Match Utils . STR IPV 6 DST ) || actions . contains ( Match Utils . STR IPV 6 SRC ) || actions . contains ( Match Utils . STR IPV 6 FLOW LABEL ) || actions . contains ( Match Utils . STR IPV 6 ND SSL ) || actions . contains ( Match Utils . STR IPV 6 ND TARGET ) || actions . contains ( Match Utils . STR IPV 6 ND TTL ) ) {", "ip 6 = true ; }", "if ( actions . contains ( Match Utils . STR NW SRC ) || actions . contains ( Match Utils . STR NW DST ) || actions . contains ( Match Utils . STR ARP OPCODE ) || actions . contains ( Match Utils . STR ARP SHA ) || actions . contains ( Match Utils . STR ARP DHA ) || actions . contains ( Match Utils . STR ARP SPA ) || actions . contains ( Match Utils . STR ARP DPA ) || actions . contains ( Match Utils . STR ICMP CODE ) || actions . contains ( Match Utils . STR ICMP TYPE ) ) {", "ip 4 = true ; } }", "if ( ip 6 == false && ip 4 == false ) {", "return NUM_ ; }", "else if ( ip 6 == false && ip 4 == true ) {", "return NUM_ ; }", "else if ( ip 6 == true && ip 4 == false ) {", "return NUM_ ; }", "else {", "return - NUM_ ; } }"]}
{"ids": "68989", "code": ["public static Observable String Value decision ( Observable Boolean Value condition , Observable String Value if True , Observable String Value if False ) {", "String Property ret = new Simple String Property ( ) ;", "condition . add Listener ( null ) ;", "if True . add Listener ( null ) ;", "if False . add Listener ( null ) ;", "ret . set ( condition . get ( ) ? if True . get ( ) : if False . get ( ) ) ;", "return ret ; }"]}
{"ids": "78035", "code": ["public static final boolean read From Stream ( Input Stream in , byte [ ] buf , int offset , int len ) throws IO Exception {", "int total Bytes Read = NUM_ ;", "while ( total Bytes Read < len ) {", "int bytes Read = in . read ( buf , offset + total Bytes Read , len - total Bytes Read ) ;", "if ( bytes Read < NUM_ ) {", "return false ; }", "total Bytes Read += bytes Read ; }", "return true ; }"]}
{"ids": "46294", "code": ["public static Field find Static Field ( Class < ? > type , String name ) throws No Such Field Exception {", "Field field = find Field ( type , name ) ;", "if ( ! Modifier . is Static ( field . get Modifiers ( ) ) ) {", "throw new No Such Field Exception ( STR_ + name + STR_ ) ; }", "return field ; }"]}
{"ids": "63392", "code": ["@ Override public Xid [ ] recover ( int flag ) throws XA Exception {", "debug Code Call ( STR_ , quote Flags ( flag ) ) ;", "check Open ( ) ;", "try ( Statement stat = physical Conn . create Statement ( ) ) {", "Result Set rs = stat . execute Query ( STR_ + STR_ ) ;", "Array List < Xid > list = New . array List ( ) ;", "while ( rs . next ( ) ) {", "String tid = rs . get String ( STR_ ) ;", "int id = get Next Id ( XID ) ;", "Xid xid = new Jdbc Xid ( factory , id , tid ) ;", "list . add ( xid ) ; }", "rs . close ( ) ;", "Xid [ ] result = new Xid [ list . size ( ) ] ;", "list . to Array ( result ) ;", "if ( list . size ( ) > NUM_ ) {", "prepared = true ; }", "return result ; }", "catch ( SQL Exception e ) {", "XA Exception xa = new XA Exception ( XA Exception . XAER RMERR ) ;", "xa . init Cause ( e ) ;", "throw xa ; } }"]}
{"ids": "13530", "code": ["public void bind ( Texture texture ) {", "faces . for Each ( null ) ; }"]}
{"ids": "57462", "code": ["public final void clear Password ( ) {", "Arrays . fill ( password , STR_ ) ;", "password = null ; }"]}
{"ids": "40042", "code": ["private void init Quad Program ( ) {", "gl Use Program ( quad Program ) ;", "int tex Uniform = gl Get Uniform Location ( quad Program , STR_ ) ;", "gl Uniform 1 i ( tex Uniform , NUM_ ) ;", "gl Use Program ( NUM_ ) ; }"]}
{"ids": "47238", "code": ["public void put ( E e ) throws Interrupted Exception {", "if ( e == null ) throw new Null Pointer Exception ( ) ;", "int c = - NUM_ ;", "Node < E > node = new Node < E > ( e ) ;", "final Reentrant Lock put Lock = this . put Lock ;", "final Atomic Integer count = this . count ;", "put Lock . lock Interruptibly ( ) ;", "try {", "while ( count . get ( ) == capacity ) {", "not Full . await ( ) ; }", "enqueue ( node ) ;", "c = count . get And Increment ( ) ;", "if ( c + NUM_ < capacity ) not Full . signal ( ) ; }", "finally {", "put Lock . unlock ( ) ; }", "if ( c == NUM_ ) signal Not Empty ( ) ; }"]}
{"ids": "21151", "code": ["public static boolean log File Zipped ( String file ) {", "return file . ends With ( STR_ ) || file . ends With ( STR_ ) || file . ends With ( STR_ ) ; }"]}
{"ids": "76382", "code": ["private void validate Has Checksum File ( File archive File ) throws Invalid Archive Update Exception {", "try {", "resolve Checksum File ( extract File To Directory ( archive File , CHECKSUMS FILE IN OPENIDM ) ) ; }", "catch ( Exception e ) {", "throw new Invalid Archive Update Exception ( archive File . get Name ( ) , STR_ + archive File . get Name ( ) + STR_ , e ) ; } }"]}
{"ids": "80529", "code": ["protected String rats Problem ( ) {", "final String text = STR_ + STR_ ;", "return ( text ) ; }"]}
{"ids": "62881", "code": ["public Class < ? > lookup Entity Class ( Class < ? > obj Class ) {", "for ( Class < ? > cls = obj Class ; cls != null ; cls = cls . get Superclass ( ) ) {", "if ( entity Bindings . contains Key ( cls ) || cls . is Annotation Present ( Entity . class ) ) {", "return cls ; } }", "throw new Illegal Argument Exception ( STR_ + obj Class ) ; }"]}
{"ids": "10093", "code": ["private boolean is Whitespace ( int position ) {", "if ( len >= NUM_ && position >= len ) {", "return false ; }", "return Character . is Whitespace ( working [ position ] ) ; }"]}
{"ids": "15572", "code": ["private void collect Wrapper Classes ( Class Loader cl , String pkg , File file ) throws Exception {", "for ( File f : file . list Files ( ) ) {", "if ( f . is Directory ( ) ) {", "collect Wrapper Classes ( cl , pkg + f . get Name ( ) + STR_ , f ) ; }", "else {", "add Wrapper Class To Wrapper Classes List ( cl , pkg , f ) ; } } }"]}
{"ids": "78539", "code": ["public void clear Images ( ) {", "chunks . clear ( ) ;", "markers . clear ( ) ;", "redraw ( true ) ;", "shift x = NUM_ ;", "shift y = NUM_ ;", "zoom level pos = NUM_ ;", "zoom level = NUM_ ; }"]}
{"ids": "37036", "code": ["private static void add Component ( final J Panel panel , final Component component , final String description , final String hint ) {", "final J Panel setting Panel = new J Panel ( new Border Layout ( ) ) ;", "setting Panel . set Border ( STANDARD EMPTY BORDER ) ;", "setting Panel . add ( new J Label ( description ) , Border Layout . CENTER ) ;", "final J Panel inner Panel = new J Panel ( new Border Layout ( ) ) ;", "inner Panel . add ( component , Border Layout . CENTER ) ;", "final J Hint Icon hint Popup = new J Hint Icon ( hint ) ;", "hint Popup . set Border ( new Empty Border ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "inner Panel . add ( hint Popup , Border Layout . EAST ) ;", "setting Panel . add ( inner Panel , Border Layout . EAST ) ;", "panel . add ( setting Panel ) ; }"]}
{"ids": "64170", "code": ["public Reversed Lines File Reader ( final File file , final int block Size , final String encoding ) throws IO Exception {", "this ( file , block Size , Charsets . to Charset ( encoding ) ) ; }"]}
{"ids": "35501", "code": ["private void on Connect ( ) {", "connection State = Connection State . Connected ;", "check For Updated Flight = true ;", "subscribe ( String . format ( traffic Alert Channel , flight Id ) ) ;", "subscribe ( String . format ( situational Awareness Channel , flight Id ) ) ; }"]}
{"ids": "53198", "code": ["public static double cdf ( double x , double sigma ) {", "if ( x <= NUM_ ) {", "return NUM_ ; }", "final double xs = x / sigma ;", "return NUM_ - Math . exp ( - NUM_ * xs * xs ) ; }"]}
{"ids": "68719", "code": ["public double gaussian Shortfall ( double target ) {", "final Cumulative Normal Distribution g Integral = new Cumulative Normal Distribution ( mean ( ) , standard Deviation ( ) ) ;", "return g Integral . op ( target ) ; }"]}
{"ids": "13159", "code": ["@ Override public int read ( char ch [ ] , int offset , int length ) throws IO Exception {", "int byte Length = length << NUM_ ;", "if ( byte Length > f Buffer . length ) {", "byte Length = f Buffer . length ; }", "int byte Count = f Input Stream . read ( f Buffer , NUM_ , byte Length ) ;", "if ( byte Count == - NUM_ ) {", "return - NUM_ ; }", "if ( ( byte Count & NUM_ ) != NUM_ ) {", "int b = f Input Stream . read ( ) ;", "if ( b == - NUM_ ) {", "expected Two Bytes ( ) ; }", "f Buffer [ byte Count ++ ] = ( byte ) b ; }", "final int char Count = byte Count > > NUM_ ;", "if ( f Is Big Endian ) {", "process BE ( ch , offset , char Count ) ; }", "else {", "process LE ( ch , offset , char Count ) ; }", "return char Count ; }"]}
{"ids": "85419", "code": ["public static void end Wrapper ( Writer writer ) throws IO Exception {", "writer . write ( STR_ ) ;", "writer . write ( STR_ ) ;", "writer . write ( STR_ ) ;", "writer . write ( STR_ ) ;", "writer . write ( STR_ ) ; }"]}
{"ids": "26996", "code": ["protected Document create Configuration Document ( AV List params ) {", "Document doc = super . create Configuration Document ( params ) ;", "if ( doc == null || doc . get Document Element ( ) == null ) return doc ;", "Data Configuration Utils . create WMS Layer Config Elements ( params , doc . get Document Element ( ) ) ;", "return doc ; }"]}
{"ids": "79722", "code": ["public void register Callback ( String challenge , Challenge Callback Plugin plugin , Http Message attack ) {", "clean Expired Callbacks ( ) ;", "reg Callbacks . put ( challenge , new Registered Callback ( plugin , attack ) ) ; }"]}
{"ids": "1272", "code": ["public static double min ( Array array ) throws Page Exception {", "if ( array . get Dimension ( ) > NUM_ ) throw new Expression Exception ( STR_ ) ;", "if ( array . size ( ) == NUM_ ) return NUM_ ;", "double rtn = to Double Value ( array , NUM_ ) ;", "int len = array . size ( ) ;", "try {", "for ( int i = NUM_ ; i <= len ; i ++ ) {", "double v = to Double Value ( array , i ) ;", "if ( rtn > v ) rtn = v ; } }", "catch ( Page Exception e ) {", "throw new Expression Exception ( STR_ + e . get Message ( ) ) ; }", "return rtn ; }"]}
{"ids": "35787", "code": ["public static byte [ ] write To Array ( NS Object root ) throws IO Exception {", "Byte Array Output Stream bout = new Byte Array Output Stream ( ) ;", "write ( bout , root ) ;", "return bout . to Byte Array ( ) ; }"]}
{"ids": "71696", "code": ["private static void load Library Resource ( String resource Subdirectory Name , String library Name , String temp Subdirectory Name , String ... dependent Library Names ) throws Throwable {", "for ( String dependent Library Name : dependent Library Names ) {", "logger . log ( level , STR_ + library Name + STR_ + dependent Library Name ) ;", "String dependent Resource Subdirectory Name = resource Subdirectory Name + STR_ + os String ( ) + STR_ + arch String ( ) ;", "String dependent Library Temp Sub Directory Name = library Name + STR_ + File . separator + os String ( ) + File . separator + arch String ( ) + File . separator ;", "load Library Resource ( dependent Resource Subdirectory Name , dependent Library Name , dependent Library Temp Sub Directory Name ) ; }", "String library File Name = create Library File Name ( library Name ) ;", "File library Temp File = create Temp File ( temp Subdirectory Name , library File Name ) ;", "if ( ! library Temp File . exists ( ) ) {", "String library Resource Name = resource Subdirectory Name + STR_ + library File Name ;", "logger . log ( level , STR_ + library Resource Name ) ;", "logger . log ( level , STR_ + library Temp File ) ;", "write Resource To File ( library Resource Name , library Temp File ) ; }", "logger . log ( level , STR_ + library Temp File ) ;", "System . load ( library Temp File . to String ( ) ) ;", "logger . log ( level , STR_ + library Temp File + STR_ ) ; }"]}
{"ids": "56858", "code": ["private Job Definition create Job Definition ( ) throws Exception {", "namespace Dao Test Helper . create Namespace Entity ( TEST ACTIVITI NAMESPACE CD ) ;", "Job Definition Create Request request = job Definition Service Test Helper . create Job Definition Create Request ( ) ;", "Job Definition job Definition = job Definition Service . create Job Definition ( request , false ) ;", "validate Job Definition ( job Definition ) ;", "return job Definition ; }"]}
{"ids": "12255", "code": ["private Web Socket Input Stream open Input Stream ( Socket socket ) throws Web Socket Exception {", "try {", "return new Web Socket Input Stream ( new Buffered Input Stream ( socket . get Input Stream ( ) ) ) ; }", "catch ( IO Exception e ) {", "throw new Web Socket Exception ( Web Socket Error . SOCKET INPUT STREAM FAILURE , STR_ + e . get Message ( ) , e ) ; } }"]}
{"ids": "7720", "code": ["@ Override protected void draw First Pass Shape ( Graphics 2 D g 2 , int pass , int series , int item , Shape shape ) {", "if ( is Shadow Pass ( pass ) ) {", "if ( get Wall Paint ( ) != null ) {", "g 2 . set Stroke ( get Item Stroke ( series , item ) ) ;", "g 2 . set Paint ( get Wall Paint ( ) ) ;", "g 2 . translate ( get X Offset ( ) , get Y Offset ( ) ) ;", "g 2 . draw ( shape ) ;", "g 2 . translate ( - get X Offset ( ) , - get Y Offset ( ) ) ; } }", "else {", "super . draw First Pass Shape ( g 2 , pass , series , item , shape ) ; } }"]}
{"ids": "86188", "code": ["public static double as Double ( String str , double def ) {", "try {", "return Double . parse Double ( str ) ; }", "catch ( Number Format Exception e ) {", "return def ; } }"]}
{"ids": "73265", "code": ["public J Menu create Help Menu ( ) {", "Show Help Action help Action = new Show Help Action ( STR_ ) ;", "J Menu help Menu = new J Menu ( STR_ ) ;", "help Menu . add ( help Action ) ;", "return help Menu ; }"]}
{"ids": "12969", "code": ["public static void expand Digits ( String number String , Word Relation word Relation , Item token Item ) {", "int number Digits = number String . length ( ) ;", "for ( int i = NUM_ ; i < number Digits ; i ++ ) {", "char digit = number String . char At ( i ) ;", "if ( is Digit ( digit ) ) {", "word Relation . add Word ( token Item , digit 2 num [ number String . char At ( i ) - STR_ ] ) ; }", "else {", "word Relation . add Word ( token Item , STR_ ) ; } } }"]}
{"ids": "69212", "code": ["public String longest Match ( String input ) {", "Trie Node node = root ;", "String result = null ;", "for ( int i = input . length ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "node = node . get Child ( input . char At ( i ) ) ;", "if ( node == null ) break ;", "if ( node . is Terminal ( ) ) result = input . substring ( i ) ; }", "return result ; }"]}
{"ids": "38648", "code": ["@ Override public void remove Property Change Listener ( Property Change Listener pcl ) {", "m pcs . remove Property Change Listener ( pcl ) ; }"]}
{"ids": "68174", "code": ["public void add On Tag Click Listener ( Tags Click Listener listener ) {", "if ( click Listeners == null ) {", "click Listeners = new Array List < > ( ) ; }", "click Listeners . add ( listener ) ; }"]}
{"ids": "45198", "code": ["public void remove All Tracking Icons ( ) {", "if ( tracking Icons != null && tracking Icons . size ( ) > NUM_ ) {", "tracking Icons . clear ( ) ;", "repaint ( ) ; } }"]}
{"ids": "65774", "code": ["private void read Reference ( ) {", "Array List < String > v value = new Array List < String > ( ) ;", "Array List < String > v name = new Array List < String > ( ) ;", "Array List < String > v description = new Array List < String > ( ) ;", "Document Engine . read Reference List ( v value , v name , v description ) ;", "int size = v value . size ( ) ;", "s value = new String [ size ] ;", "s name = new String [ size ] ;", "s description = new String [ size ] ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "s value [ i ] = ( String ) v value . get ( i ) ;", "s name [ i ] = ( String ) v name . get ( i ) ;", "s description [ i ] = ( String ) v description . get ( i ) ; } }"]}
{"ids": "27863", "code": ["protected void assert Round Trip ( TPS expected ) throws IO Exception , Class Not Found Exception {", "final byte [ ] serialized ; {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "Object Output Stream oos = new Object Output Stream ( baos ) ;", "expected . write External ( oos ) ;", "oos . flush ( ) ;", "serialized = baos . to Byte Array ( ) ; }", "final TPS actual ; {", "actual = new TPS ( ) ;", "Byte Array Input Stream bais = new Byte Array Input Stream ( serialized ) ;", "Object Input Stream ois = new Object Input Stream ( bais ) ;", "actual . read External ( ois ) ; }", "assert Equals ( expected , actual ) ; }"]}
{"ids": "65482", "code": ["public static double calculate Contrast Ratio ( double lum 1 , double lum 2 ) {", "if ( ( lum 1 < NUM_ ) || ( lum 2 < NUM_ ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return ( Math . max ( lum 1 , lum 2 ) + NUM_ ) / ( Math . min ( lum 1 , lum 2 ) + NUM_ ) ; }"]}
{"ids": "13289", "code": ["protected void reset ( ) throws XNI Exception {", "int count = f Components . size ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "XML Component c = ( XML Component ) f Components . get ( i ) ;", "c . reset ( this ) ; } }"]}
{"ids": "43398", "code": ["public synchronized void unregister ( String name ) {", "Stream Scope < ? > stream Scope = by Name Map . remove ( name ) ;", "if ( stream Scope == null ) return ;", "List < String > names = by Stream Scope Map . get ( stream Scope ) ;", "names . remove ( name ) ;", "if ( names . is Empty ( ) ) by Stream Scope Map . remove ( stream Scope ) ; }"]}
{"ids": "47449", "code": ["private String expand Affix ( String pattern , String Buffer buffer ) {", "buffer . set Length ( NUM_ ) ;", "for ( int i = NUM_ ; i < pattern . length ( ) ; ) {", "char c = pattern . char At ( i ++ ) ;", "if ( c == QUOTE ) {", "c = pattern . char At ( i ++ ) ;", "switch ( c ) {", "case CURRENCY SIGN :", "if ( i < pattern . length ( ) && pattern . char At ( i ) == CURRENCY SIGN ) {", "++ i ;", "buffer . append ( symbols . get International Currency Symbol ( ) ) ; }", "else {", "buffer . append ( symbols . get Currency Symbol ( ) ) ; }", "continue ;", "case PATTERN PERCENT :", "c = symbols . get Percent ( ) ;", "break ;", "case PATTERN PER MILLE :", "c = symbols . get Per Mill ( ) ;", "break ;", "case PATTERN MINUS :", "c = symbols . get Minus Sign ( ) ;", "break ; } }", "buffer . append ( c ) ; }", "return buffer . to String ( ) ; }"]}
{"ids": "9523", "code": ["public static Query Functions extract Functions ( String [ ] filter Queries ) {", "final Query Functions result = new Query Functions ( ) ;", "if ( is Empty ( filter Queries ) ) {", "return result ; }", "String [ ] arguments = new String [ NUM_ ] ;", "for ( String unmodified Analysis : filter Queries ) {", "String function = extract Function ( unmodified Analysis ) ;", "String [ ] functions ;", "if ( function . contains ( FUNCTION ARGUMENT SPLITTER ) ) {", "functions = function . split ( FUNCTION ARGUMENT SPLITTER ) ; }", "else {", "functions = new String [ ] { function } ; }", "for ( String sub Function : functions ) {", "if ( sub Function . contains ( AGGREGATION ARGUMENT DELIMITER ) ) {", "arguments = extract Aggregation Parameter ( sub Function ) ;", "sub Function = sub Function . substring ( NUM_ , sub Function . index Of ( AGGREGATION ARGUMENT DELIMITER ) ) ; }", "Function Type type = Function Type . value Of ( sub Function . to Upper Case ( ) ) ;", "add Function ( result , type , arguments ) ; } }", "return result ; }"]}
{"ids": "16535", "code": ["protected final void fire Vetoable Change ( String property Name , int old Value , int new Value ) throws Property Veto Exception {", "Vetoable Change Support a Veto Support = this . veto Support ;", "if ( a Veto Support == null ) {", "return ; }", "a Veto Support . fire Vetoable Change ( property Name , Integer . value Of ( old Value ) , Integer . value Of ( new Value ) ) ; }"]}
{"ids": "38539", "code": ["protected boolean is Valid Classname ( String classname ) {", "return ( classname . index Of ( STR_ ) == - NUM_ ) ; }"]}
{"ids": "69487", "code": ["public static int number ( ) {", "return all . size ( ) ; }"]}
{"ids": "24760", "code": ["public String generate Inverted String ( ) {", "return String . format ( STR_ , NUM_ & generate Inverted ( ) ) ; }"]}
{"ids": "60409", "code": ["@ Not Null public String extract Presentable Url ( @ Not Null String path ) {", "return path . replace ( STR_ , File . separator Char ) ; }"]}
{"ids": "39991", "code": ["private void init Program ( ) {", "gl Use Program ( this . program ) ;", "view Proj Matrix Uniform = gl Get Uniform Location ( this . program , STR_ ) ;", "gl Use Program ( NUM_ ) ; }"]}
{"ids": "13566", "code": ["private boolean is Negative ( final String input ) {", "require Non Null ( input ) ;", "for ( final String negative String : negative Strings ) {", "if ( input . equals Ignore Case ( negative String ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "4730", "code": ["@ Override protected void send Disposition Header ( final Output Stream out ) throws IO Exception {", "LOG . trace ( STR_ ) ;", "super . send Disposition Header ( out ) ;", "final String filename = source . get File Name ( ) ;", "if ( filename != null ) {", "out . write ( FILE NAME BYTES ) ;", "out . write ( QUOTE BYTES ) ;", "out . write ( Encoding Util . get Ascii Bytes ( filename ) ) ;", "out . write ( QUOTE BYTES ) ; } }"]}
{"ids": "69318", "code": ["private List < Map < String , Object > > prepare Resultsfor Display ( Collection < Scored Result > scored Results ) {", "Array List < Map < String , Object > > output = new Array List < Map < String , Object > > ( scored Results . size ( ) ) ;", "for ( Scored Result result : scored Results ) {", "Map < String , Object > result Map = new Hash Map < String , Object > ( ) ;", "if ( result . track != null ) {", "prepare Track For Display ( result . track , result Map ) ; }", "else {", "prepare Marker For Display ( result . waypoint , result Map ) ; }", "output . add ( result Map ) ; }", "return output ; }"]}
{"ids": "82659", "code": ["public long copy ( final Input Stream from , final Output Stream to ) throws IO Exception {", "long count = NUM_ ;", "byte [ ] tmp = m Byte Array Pool . get ( m Temp Buf Size ) ;", "try {", "while ( true ) {", "int read = from . read ( tmp , NUM_ , m Temp Buf Size ) ;", "if ( read == - NUM_ ) {", "return count ; }", "to . write ( tmp , NUM_ , read ) ;", "count += read ; } }", "finally {", "m Byte Array Pool . release ( tmp ) ; } }"]}
{"ids": "81324", "code": ["private static Element info As Element ( Document doc , Library Info info ) {", "Element library Element = doc . create Element ( STR_ ) ;", "library Element . set Attribute ( STR_ , info . get Version ( ) ) ;", "append Path Elements ( doc , STR_ , library Element , info . get Bootpath ( ) ) ;", "append Path Elements ( doc , STR_ , library Element , info . get Extension Dirs ( ) ) ;", "append Path Elements ( doc , STR_ , library Element , info . get Endorsed Dirs ( ) ) ;", "return library Element ; }"]}
{"ids": "14712", "code": ["public void add Choice Value ( String value , String i 18 n Key ) throws SMS Exception , SSO Exception {", "Map choice Values = as . get Choice Values Map ( ) ;", "choice Values . put ( value , i 18 n Key ) ;", "update Choice Values ( choice Values ) ; }"]}
{"ids": "41964", "code": ["private void notify Change ( int previous , int current ) {", "if ( m On Value Change Listener != null ) {", "m On Value Change Listener . on Value Change ( this , previous , m Value ) ; } }"]}
{"ids": "42222", "code": ["public void load Library ( String lib Name ) {", "load Library 0 ( lib Name , RVM Class . get Class Loader From Stack Frame ( NUM_ ) , true ) ; }"]}
{"ids": "13836", "code": ["public void handle Tbl Data Action Href Request ( Request Invocation Event event ) {", "String id Repo Name = hex To String ( ( String ) get Display Field Value ( TBL DATA ACTION HREF ) ) ;", "String cur Realm = ( String ) get Page Session Attribute ( AM Admin Constants . CURRENT REALM ) ;", "try {", "ID Repo Model model = ( ID Repo Model ) get Model ( ) ;", "set Page Session Attribute ( ID Repo Op View Bean Base . IDREPO NAME , id Repo Name ) ;", "set Page Session Attribute ( ID Repo Op View Bean Base . IDREPO TYPE , model . get ID Repo Type ( cur Realm , id Repo Name ) ) ;", "ID Repo Edit View Bean vb = ( ID Repo Edit View Bean ) get View Bean ( ID Repo Edit View Bean . class ) ;", "unlock Page Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ;", "forward To ( ) ; } }"]}
{"ids": "10946", "code": ["public boolean initialize ( DDF Module po Module In , String psz Tag In , byte [ ] pach Field Area ) {", "int i FD Offset = po Module In . field Control Length ;", "po Module = po Module In ;", "psz Tag = psz Tag In ;", "data struct code = Data Struct Code . get ( ( char ) pach Field Area [ NUM_ ] ) ;", "data type code = Data Type Code . get ( ( char ) pach Field Area [ NUM_ ] ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + psz Tag In + STR_ + data struct code + STR_ + data type code + STR_ + i FD Offset ) ; }", "byte [ ] temp Data = new byte [ pach Field Area . length - i FD Offset ] ;", "System . arraycopy ( pach Field Area , i FD Offset , temp Data , NUM_ , pach Field Area . length - i FD Offset ) ;", "Mutable Int n Chars Consumed = new Mutable Int ( ) ;", "field Name = DDF Utils . fetch Variable ( temp Data , temp Data . length , DDF UNIT TERMINATOR , DDF FIELD TERMINATOR , n Chars Consumed ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + psz Tag In + STR_ + field Name ) ; }", "i FD Offset += n Chars Consumed . value ;", "temp Data = new byte [ pach Field Area . length - i FD Offset ] ;", "System . arraycopy ( pach Field Area , i FD Offset , temp Data , NUM_ , pach Field Area . length - i FD Offset ) ;", "array Descr = DDF Utils . fetch Variable ( temp Data , temp Data . length , DDF UNIT TERMINATOR , DDF FIELD TERMINATOR , n Chars Consumed ) ;", "i FD Offset += n Chars Consumed . value ;", "temp Data = new byte [ pach Field Area . length - i FD Offset ] ;", "System . arraycopy ( pach Field Area , i FD Offset , temp Data , NUM_ , pach Field Area . length - i FD Offset ) ;", "format Controls = DDF Utils . fetch Variable ( temp Data , temp Data . length , DDF UNIT TERMINATOR , DDF FIELD TERMINATOR , n Chars Consumed ) ;", "if ( data struct code != Data Struct Code . ELEMENTARY ) {", "if ( ! build Subfield Defns ( array Descr ) ) {", "return false ; }", "if ( ! apply Formats ( format Controls ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "69037", "code": ["@ Override public void load Height Map ( Raster raster ) throws IO Exception {", "int strip Height = Math . min ( STRIP ROWS , raster Length ) ;", "int strip Width = raster Width * samples Per Pixel ;", "int strip Size = strip Width * strip Height * bytes Per Sample ;", "int num Strips = ( int ) Math . ceil ( ( double ) raster Length / strip Height ) ;", "if ( strip Size > Integer . MAX VALUE ) {", "throw new Illegal Argument Exception ( STR_ + Integer . MAX VALUE + STR_ ) ; }", "if ( ( minimum == null ) || ( maximum == null ) ) {", "compute Min Max From Strip ( data Type , num Strips , strip Size , strip Width , strip Height ) ; }", "load From Strip ( data Type , num Strips , strip Size , strip Width , strip Height , raster , false ) ; }"]}
{"ids": "55197", "code": ["public void add Footer ( @ Non Null View view ) {", "if ( view == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "m Footers . add ( view ) ; }"]}
{"ids": "4810", "code": ["public static Pair < int [ ] , double [ ] > convert ( Set < Feature > features , Lexicon lexicon , boolean training Mode ) {", "T Int Double Hash Map f Map = new T Int Double Hash Map ( features . size ( ) ) ;", "for ( Feature feature : features ) {", "final int feature Id = Feature Utilities . get Feature Id ( lexicon , training Mode , feature ) ;", "if ( feature Id < NUM_ ) continue ;", "double value = feature . get Value ( ) + f Map . get ( feature Id ) ;", "f Map . put ( feature Id , value ) ; }", "int [ ] ids Original = f Map . keys ( ) ;", "int [ ] ids = new int [ ids Original . length ] ;", "System . arraycopy ( ids Original , NUM_ , ids , NUM_ , ids . length ) ;", "Arrays . sort ( ids ) ;", "double [ ] vals = new double [ f Map . size ( ) ] ;", "int count = NUM_ ;", "for ( int key : ids ) {", "vals [ count ++ ] = f Map . get ( key ) ; }", "return new Pair < > ( ids , vals ) ; }"]}
{"ids": "12933", "code": ["public String to Feature String ( Feature Vector fv ) {", "if ( num Byte Features != fv . get Number Of Byte Features ( ) || num Short Features != fv . get Number Of Short Features ( ) || num Continuous Features != fv . get Number Of Continuous Features ( ) ) throw new Illegal Argument Exception ( STR_ + fv + STR_ ) ;", "String Builder buf = new String Builder ( ) ;", "for ( int i = NUM_ ; i < num Byte Features ; i ++ ) {", "if ( buf . length ( ) > NUM_ ) buf . append ( STR_ ) ;", "buf . append ( get Feature Value As String ( i , fv . get Byte Feature ( i ) ) ) ; }", "for ( int i = num Byte Features ; i < num Byte Features + num Short Features ; i ++ ) {", "if ( buf . length ( ) > NUM_ ) buf . append ( STR_ ) ;", "buf . append ( get Feature Value As String ( i , fv . get Short Feature ( i ) ) ) ; }", "for ( int i = num Byte Features + num Short Features ; i < num Byte Features + num Short Features + num Continuous Features ; i ++ ) {", "if ( buf . length ( ) > NUM_ ) buf . append ( STR_ ) ;", "buf . append ( fv . get Continuous Feature ( i ) ) ; }", "return buf . to String ( ) ; }"]}
{"ids": "76241", "code": ["protected void sort Population ( ) {", "if ( Properties . SHUFFLE GOALS ) Randomness . shuffle ( population ) ;", "if ( is Maximization Function ( ) ) {", "Collections . sort ( population , Collections . reverse Order ( ) ) ; }", "else {", "Collections . sort ( population ) ; } }"]}
{"ids": "15759", "code": ["public void clean ( ) {", "Chrono Full Revision cfr = first CFR ;", "total Size = size ;", "while ( cfr != null ) {", "total Size += cfr . size ( ) ;", "cfr = cfr . get Next ( ) ; }", "if ( total Size < MAX STORAGE SIZE ) {", "return ; }", "cfr = first CFR ;", "while ( cfr != null ) {", "total Size += cfr . clean ( revision Index , NUM_ ) ;", "cfr = cfr . get Next ( ) ; }", "Chrono Storage Block block ;", "while ( last != null && total Size >= MAX STORAGE SIZE ) {", "block = last . get Index Prev ( ) ;", "if ( storage . remove ( last . get Revision Index ( ) ) == null ) {", "throw new Runtime Exception ( STR_ ) ; }", "total Size -= last . length ( ) ;", "size += last . length ( ) ;", "if ( block != null ) {", "block . set Index Next ( null ) ; }", "last . set Index Prev ( null ) ;", "cfr = last . get Chrono Full Revision ( ) ;", "total Size += cfr . size ( ) - cfr . clean ( revision Index , last . get Revision Index ( ) ) ;", "if ( last == first ) {", "first = null ; }", "last = block ; }", "System . gc ( ) ; }"]}
{"ids": "8204", "code": ["public static Number plus ( Character left , Character right ) {", "return plus ( Integer . value Of ( left ) , right ) ; }"]}
{"ids": "14100", "code": ["boolean contain Relay State ( String relay State ) {", "return relay State Map . contains Key ( relay State ) ; }"]}
{"ids": "76244", "code": ["public void local Search Started ( ) {", "start Time = System . current Time Millis ( ) ;", "end Time = start Time + Properties . LOCAL SEARCH BUDGET * NUM_ ;", "tests = NUM_ ;", "suites = NUM_ ;", "fitness Evaluations = NUM_ ;", "executed Start = Max Statements Stopping Condition . get Num Executed Statements ( ) ; }"]}
{"ids": "70817", "code": ["public synchronized int write ( Input Stream in ) throws IO Exception {", "int read Count = NUM_ ;", "int in Buffer Pos = count - filled Buffer Sum ;", "int n = in . read ( current Buffer , in Buffer Pos , current Buffer . length - in Buffer Pos ) ;", "while ( n != - NUM_ ) {", "read Count += n ;", "in Buffer Pos += n ;", "count += n ;", "if ( in Buffer Pos == current Buffer . length ) {", "need New Buffer ( current Buffer . length ) ;", "in Buffer Pos = NUM_ ; }", "n = in . read ( current Buffer , in Buffer Pos , current Buffer . length - in Buffer Pos ) ; }", "return read Count ; }"]}
{"ids": "34790", "code": ["public static double normalize Radians ( double r ) {", "if ( r < NUM_ && r >= - TWO PI ) return r + TWO PI ;", "if ( r >= TWO PI && r < FOUR PI ) return r - TWO PI ;", "if ( r >= NUM_ && r < TWO PI ) return r ;", "r -= TWO PI * Math . floor ( r * TWO PI INVERSE ) ;", "if ( r < NUM_ ) r += TWO PI ;", "return r ; }"]}
{"ids": "52082", "code": ["public static Tetrad Matrix convert Cov To Corr ( Tetrad Matrix m ) {", "for ( int i = NUM_ ; i < m . rows ( ) ; i ++ ) {", "for ( int j = NUM_ ; j < m . columns ( ) ; j ++ ) {", "if ( Double . is Na N ( m . get ( i , j ) ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; } } }", "return correlation ( m ) ; }"]}
{"ids": "30416", "code": ["private byte [ ] ungzip ( byte [ ] body ) {", "Byte Array Input Stream bytein = new Byte Array Input Stream ( body ) ;", "try ( GZIP Input Stream gzin = new GZIP Input Stream ( bytein ) ; Byte Array Output Stream byteout = new Byte Array Output Stream ( ) ) {", "int res = NUM_ ;", "byte buf [ ] = new byte [ NUM_ ] ;", "while ( res >= NUM_ ) {", "res = gzin . read ( buf , NUM_ , buf . length ) ;", "if ( res > NUM_ ) {", "byteout . write ( buf , NUM_ , res ) ; } }", "byte uncompressed [ ] = byteout . to Byte Array ( ) ;", "return uncompressed ; }", "catch ( IO Exception e ) { }", "return null ; }"]}
{"ids": "65756", "code": ["private boolean select ID ( int node ID , boolean show ) {", "if ( m root == null ) return false ;", "log . config ( STR_ + node ID + STR_ + show + STR_ + m root ) ;", "M Tree Node node = m root . find Node ( node ID ) ;", "if ( node != null ) {", "Tree Path tree Path = new Tree Path ( node . get Path ( ) ) ;", "log . config ( STR_ + node + STR_ + tree Path . to String ( ) ) ;", "tree . set Selection Path ( tree Path ) ;", "if ( show ) {", "tree . make Visible ( tree Path ) ;", "tree . scroll Path To Visible ( tree Path ) ; }", "return true ; }", "log . info ( STR_ + node ID ) ;", "return false ; }"]}
{"ids": "69042", "code": ["@ Override public void load RGBA ( Raster raster ) throws IO Exception {", "if ( band Storage Type == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( samples Per Pixel < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( i Stream != null ) {", "i Stream . close ( ) ; }", "i Stream = new File Image Input Stream ( new File ( data File Path ) ) ;", "i Stream . seek ( image Start ) ;", "int strip Height = Math . min ( STRIP ROWS , raster Length ) ;", "int strip Width = raster Width * samples Per Pixel ;", "int num Strips = ( int ) Math . ceil ( ( double ) raster Length / strip Height ) ;", "if ( band Storage Type . equals ( STR_ ) ) {", "int strip Size = strip Width * strip Height * bytes Per Sample ;", "if ( strip Size > Integer . MAX VALUE ) {", "throw new Illegal Argument Exception ( STR_ + Integer . MAX VALUE + STR_ ) ; }", "byte [ ] bb Array = new byte [ strip Size ] ;", "Byte Buffer bbuf = Byte Buffer . allocate ( NUM_ * raster Width * strip Height ) ;", "i Stream . seek ( image Start ) ;", "int r = NUM_ ;", "for ( int i = NUM_ ; i < num Strips ; ++ i ) {", "int h = Math . min ( raster Length - strip Height * i , strip Height ) ;", "int len = h * strip Width ;", "len = i Stream . read ( bb Array , NUM_ , len ) ;", "for ( int j = NUM_ ; j < h ; ++ j ) {", "for ( int k = NUM_ ; k < strip Width ; k += samples Per Pixel ) {", "for ( int l = NUM_ ; l < samples Per Pixel ; ++ l ) {", "bbuf . put ( bb Array [ k + l ] ) ; }", "if ( samples Per Pixel == NUM_ ) {", "bbuf . put ( ( byte ) NUM_ ) ; } }", "r ++ ; }", "bbuf . rewind ( ) ;", "raster . set ( r , h , bb Array ) ; } }", "else if ( band Storage Type . equals ( STR_ ) ) {", "int strip Size = raster Width * strip Height ;", "if ( strip Size > Integer . MAX VALUE ) {", "throw new Illegal Argument Exception ( STR_ + Integer . MAX VALUE + STR_ ) ; }", "raster . set ( NUM_ ) ;", "byte [ ] b Array = new byte [ NUM_ * raster Width * strip Height ] ;", "byte [ ] bb Array = new byte [ strip Size ] ;", "i Stream . seek ( image Start ) ;", "for ( int k = NUM_ ; k < samples Per Pixel ; ++ k ) {", "int r = NUM_ ;", "for ( int i = NUM_ ; i < num Strips ; ++ i ) {", "int h = Math . min ( raster Length - strip Height * i , strip Height ) ;", "int len = h * raster Width ;", "len = i Stream . read ( bb Array , NUM_ , len ) ;", "for ( int j = NUM_ ; j < h ; ++ j ) {", "raster . get ( r , b Array ) ;", "for ( int c = NUM_ ; c < raster Width ; ++ c ) {", "b Array [ c * NUM_ + k ] = bb Array [ c ] ; }", "raster . set ( r , NUM_ , b Array ) ;", "r ++ ; } } } }", "if ( minimum == null ) {", "minimum = new double [ ] { NUM_ , NUM_ , NUM_ , NUM_ } ; }", "if ( maximum == null ) {", "maximum = new double [ ] { NUM_ , NUM_ , NUM_ , NUM_ } ; } }"]}
{"ids": "15097", "code": ["protected final boolean is List State ( ) {", "return state Text Types . char At ( state ) == STR_ ; }"]}
{"ids": "41654", "code": ["public void load Glyphs ( String chars ) throws No Glyph Exception {", "char [ ] chs = chars . to Char Array ( ) ;", "for ( int i = NUM_ ; i < chs . length ; i ++ ) {", "get Glyph ( chs [ i ] , null ) ; } }"]}
{"ids": "80597", "code": ["private void init Quest And Add To World ( final I Quest quest ) {", "logger . info ( STR_ + quest . get Name ( ) ) ;", "quest . add To World ( ) ;", "quests . add ( quest ) ; }"]}
{"ids": "70298", "code": ["public static Move Command [ ] values ( int f , Game Options opts , boolean forward Ini ) {", "boolean manual Shutdown = false , self Destruct = false ;", "if ( opts != null ) {", "manual Shutdown = opts . boolean Option ( STR_ ) ;", "self Destruct = opts . boolean Option ( STR_ ) ; }", "Array List < Move Command > flagged Cmds = new Array List < Move Command > ( ) ;", "for ( Move Command cmd : Move Command . values ( ) ) {", "if ( ( cmd == MOVE SHUTDOWN || cmd == MOVE STARTUP ) && ! manual Shutdown ) {", "continue ; }", "if ( cmd == MOVE SELF DESTRUCT && ! self Destruct ) {", "continue ; }", "if ( cmd == MOVE FORWARD INI && ! forward Ini ) {", "continue ; }", "if ( ( cmd . flag & f ) == f ) {", "flagged Cmds . add ( cmd ) ; } }", "return flagged Cmds . to Array ( new Move Command [ NUM_ ] ) ; }"]}
{"ids": "48981", "code": ["public void shed Cache ( ) {", "Connection [ ] conn ;", "synchronized ( free List ) {", "conn = free List . to Array ( new Connection [ free List . size ( ) ] ) ;", "free List . clear ( ) ; }", "for ( int i = conn . length ; -- i >= NUM_ ; ) {", "Connection c = conn [ i ] ;", "conn [ i ] = null ;", "try {", "c . close ( ) ; }", "catch ( java . io . IO Exception e ) { } } }"]}
{"ids": "77996", "code": ["public static byte [ ] hash ( Input Stream in ) throws IO Exception {", "if ( HASH DIGEST == null ) {", "throw new Evernote Util Exception ( EDAM HASH ALGORITHM + STR_ , new No Such Algorithm Exception ( EDAM HASH ALGORITHM ) ) ; }", "byte [ ] buf = new byte [ NUM_ ] ;", "int n ;", "while ( ( n = in . read ( buf ) ) != - NUM_ ) {", "HASH DIGEST . update ( buf , NUM_ , n ) ; }", "return HASH DIGEST . digest ( ) ; }"]}
{"ids": "1499", "code": ["public byte [ ] read Raw Bytes ( final int size ) throws IO Exception {", "if ( size < NUM_ ) {", "throw Invalid Protocol Buffer Nano Exception . negative Size ( ) ; }", "if ( buffer Pos + size > current Limit ) {", "skip Raw Bytes ( current Limit - buffer Pos ) ;", "throw Invalid Protocol Buffer Nano Exception . truncated Message ( ) ; }", "if ( size <= buffer Size - buffer Pos ) {", "final byte [ ] bytes = new byte [ size ] ;", "System . arraycopy ( buffer , buffer Pos , bytes , NUM_ , size ) ;", "buffer Pos += size ;", "return bytes ; }", "else {", "throw Invalid Protocol Buffer Nano Exception . truncated Message ( ) ; } }"]}
{"ids": "26101", "code": ["@ Suppress Warnings ( STR_ ) public static < T extends Feature Structure > List < T > to List ( FS Array array ) {", "if ( array == null ) {", "return new Array List < T > ( ) ; }", "else {", "return ( List < T > ) Arrays . as List ( array . to Array ( ) ) ; } }"]}
{"ids": "73665", "code": ["private void reset Notes 2 ( ) {", "if ( error In Status 2 ) {", "if ( edit Mode ) {", "status Text 1 . set Text ( edit Status 2 ) ; }", "else {", "status Text 2 . set Text ( std Status 2 ) ; }", "error In Status 2 = false ; } }"]}
{"ids": "67489", "code": ["protected static int to Digit ( final char ch , final int index ) throws Illegal Argument Exception {", "final int digit = Character . digit ( ch , NUM_ ) ;", "if ( digit == - NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + ch + STR_ + index ) ; }", "return digit ; }"]}
{"ids": "71888", "code": ["public static Server Side Sort Request Control new Control ( final boolean is Critical , final Collection < Sort Key > keys ) {", "Reject . if Null ( keys ) ;", "Reject . if False ( ! keys . is Empty ( ) , STR_ ) ;", "return new Server Side Sort Request Control ( is Critical , Collections . unmodifiable List ( new Array List < Sort Key > ( keys ) ) ) ; }"]}
{"ids": "86182", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) static < E extends Comparable < E > > Auto Sorted Collection < E > create Auto Sorted Collection ( Supplier < List < Sorted List Element < E > > > list Sup , Collection < ? extends E > values ) {", "List list = list Sup . get ( ) ;", "if ( ! list . is Empty ( ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "Auto Sorted Collection < E > sorted Collection = new Auto List Sorted Collection < > ( list , null ) ;", "sorted Collection . add All ( values ) ;", "return sorted Collection ; }"]}
{"ids": "25078", "code": ["private void int Stream ( ) {", "int [ ] ints = new int [ ] { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ;", "Int Stream int Stream = Int Stream . of ( ints ) ;", "int Stream . for Each ( null ) ;", "Int Stream int Stream 2 = Int Stream . of ( NUM_ , NUM_ , NUM_ , NUM_ , NUM_ ) ;", "int Stream 2 . for Each ( null ) ; }"]}
{"ids": "66566", "code": ["@ Suppress Warnings ( STR_ ) public boolean is Customized ( ) {", "if ( m customization Level == null ) {", "get Element ID ( ) ;", "m customization Level = new Integer ( s parameters . CUSTOMNONE ) ;", "if ( m parent . is Custom Prefix ( m name ) ) {", "m customization Level = new Integer ( s parameters . CUSTOMPREFIXED ) ; }", "else {", "if ( m parent . is Object Exists ( STR_ , m parent . get Tables ( ) ) && m parent . is Object Exists ( STR_ , m parent . get Tables ( ) ) ) {", "String sql = s db Engine . sql AD get Table Column Entity Type ( m parent . get Vendor ( ) , m parent . get Catalog ( ) , m parent . get Schema ( ) , m table , m name ) ;", "Statement stmt = m parent . set Statement ( ) ;", "Result Set rs = m parent . execute Query ( stmt , sql ) ;", "if ( m parent . get Result Set Next ( rs ) ) {", "String s = m parent . get Result Set String ( rs , STR_ ) ;", "if ( m parent . is Custom Entity Type ( s ) ) m customization Level = new Integer ( s parameters . CUSTOMMARKED ) ; }", "m parent . release Result Set ( rs ) ;", "m parent . release Statement ( stmt ) ; } } }", "if ( m customization Level . int Value ( ) > s parameters . CUSTOMNONE ) return true ;", "else return false ; }"]}
{"ids": "6698", "code": ["private void reload Queue ( ) {", "String q = null ;", "int id = m Card Id ;", "if ( m Preferences . contains ( STR_ ) ) {", "id = m Preferences . get Int ( STR_ , ~ m Card Id ) ; }", "if ( id == m Card Id ) {", "q = m Preferences . get String ( STR_ , STR_ ) ; }", "int qlen = q != null ? q . length ( ) : NUM_ ;", "if ( qlen > NUM_ ) {", "int plen = NUM_ ;", "int n = NUM_ ;", "int shift = NUM_ ;", "for ( int i = NUM_ ; i < qlen ; i ++ ) {", "final char c = q . char At ( i ) ;", "if ( c == STR_ ) {", "ensure Play List Capacity ( plen + NUM_ ) ;", "m Play List [ plen ] = n ;", "plen ++ ;", "n = NUM_ ;", "shift = NUM_ ; }", "else {", "if ( c >= STR_ && c <= STR_ ) {", "n += c - STR_ << shift ; }", "else if ( c >= STR_ && c <= STR_ ) {", "n += NUM_ + c - STR_ << shift ; }", "else {", "plen = NUM_ ;", "break ; }", "shift += NUM_ ; } }", "m Play List Len = plen ;", "final int pos = m Preferences . get Int ( STR_ , NUM_ ) ;", "if ( pos < NUM_ || pos >= m Play List Len ) {", "m Play List Len = NUM_ ;", "return ; }", "m Play Pos = pos ;", "update Cursor ( m Play List [ m Play Pos ] ) ;", "if ( m Cursor == null ) {", "System Clock . sleep ( NUM_ ) ;", "update Cursor ( m Play List [ m Play Pos ] ) ; }", "synchronized ( this ) {", "close Cursor ( ) ;", "m Open Failed Counter = NUM_ ;", "open Current And Next ( ) ; }", "if ( m Player == null || ! m Player . is Initialized ( ) ) {", "m Play List Len = NUM_ ;", "return ; }", "final long seekpos = m Preferences . get Long ( STR_ , NUM_ ) ;", "seek ( seekpos >= NUM_ && seekpos < duration ( ) ? seekpos : NUM_ ) ;", "if ( D ) {", "LOG . info ( STR_ + position ( ) + STR_ + duration ( ) + STR_ + seekpos + STR_ ) ; }", "int repmode = m Preferences . get Int ( STR_ , REPEAT NONE ) ;", "if ( repmode != REPEAT ALL && repmode != REPEAT CURRENT ) {", "repmode = REPEAT NONE ; }", "m Repeat Mode = repmode ;", "int shufmode = m Preferences . get Int ( STR_ , SHUFFLE NONE ) ;", "if ( shufmode != SHUFFLE AUTO && shufmode != SHUFFLE NORMAL ) {", "shufmode = SHUFFLE NONE ; }", "if ( shufmode != SHUFFLE NONE ) {", "q = m Preferences . get String ( STR_ , STR_ ) ;", "qlen = q != null ? q . length ( ) : NUM_ ;", "if ( qlen > NUM_ ) {", "n = NUM_ ;", "shift = NUM_ ;", "m History . clear ( ) ;", "for ( int i = NUM_ ; i < qlen ; i ++ ) {", "final char c = q . char At ( i ) ;", "if ( c == STR_ ) {", "if ( n >= m Play List Len ) {", "m History . clear ( ) ;", "break ; }", "m History . add ( n ) ;", "n = NUM_ ;", "shift = NUM_ ; }", "else {", "if ( c >= STR_ && c <= STR_ ) {", "n += c - STR_ << shift ; }", "else if ( c >= STR_ && c <= STR_ ) {", "n += NUM_ + c - STR_ << shift ; }", "else {", "m History . clear ( ) ;", "break ; }", "shift += NUM_ ; } } } }", "if ( shufmode == SHUFFLE AUTO ) {", "if ( ! make Auto Shuffle List ( ) ) {", "shufmode = SHUFFLE NONE ; } }", "m Shuffle Mode = shufmode ; } }"]}
{"ids": "2924", "code": ["public final void scheduled For Flush ( ) {", "scheduled For Flush . set ( true ) ; }"]}
{"ids": "32973", "code": ["public Image Info inspect Image ( String image ) throws IO Exception {", "return inspect Image ( Inspect Image Params . create ( image ) ) ; }"]}
{"ids": "30364", "code": ["@ Override public double prev Cumulative Quantity ( final Long wo Activity Id , Long mb Header Id ) {", "if ( mb Header Id == null ) mb Header Id = - NUM_ ;", "final Object [ ] params = new Object [ ] { mb Header Id , mb Header Id , Works Constants . CANCELLED STATUS , wo Activity Id } ;", "final Double p Quant = ( Double ) generic Service . find By Named Query ( STR_ , params ) ;", "if ( p Quant == null ) return NUM_ ;", "else return p Quant . double Value ( ) ; }"]}
{"ids": "48972", "code": ["void receive ( int length , Data Input Stream in ) throws IO Exception {", "synchronized ( lock ) {", "if ( ( pos > NUM_ ) && ( ( buffer . length - present ) < length ) ) {", "System . arraycopy ( buffer , pos , buffer , NUM_ , present - pos ) ;", "present -= pos ;", "pos = NUM_ ; }", "if ( ( buffer . length - present ) < length ) throw new IO Exception ( STR_ ) ;", "in . read Fully ( buffer , present , length ) ;", "present += length ;", "requested -= length ;", "lock . notify All ( ) ; } }"]}
{"ids": "7088", "code": ["public JDA Builder remove Listener ( Object listener ) {", "listeners . remove ( listener ) ;", "return this ; }"]}
{"ids": "75523", "code": ["private static List < String > read File ( File file ) throws IO Exception {", "File Reader fr = new File Reader ( file ) ;", "Buffered Reader br = new Buffered Reader ( fr ) ;", "List < String > lines = new Array List < String > ( ) ;", "String line ;", "while ( ( line = br . read Line ( ) ) != null ) lines . add ( line ) ;", "fr . close ( ) ;", "br . close ( ) ;", "return lines ; }"]}
{"ids": "84659", "code": ["Flexible Node read External Node ( Hash Map < String , Taxon > translation List ) throws Import Exception , IO Exception {", "Flexible Node node = new Flexible Node ( ) ;", "String label = read Token ( STR_ ) ;", "Taxon taxon ;", "if ( translation List . size ( ) > NUM_ ) {", "taxon = translation List . get ( label ) ;", "if ( taxon == null ) {", "throw new Unknown Taxon Exception ( STR_ + label + STR_ ) ; } }", "else {", "taxon = new Taxon ( label ) ; }", "if ( get Last Meta Comment ( ) != null ) {", "parse Migration String ( get Last Meta Comment ( ) , node ) ;", "clear Last Meta Comment ( ) ; }", "node . set Taxon ( taxon ) ;", "int pop = Integer . parse Int ( label . split ( STR_ ) [ NUM_ ] ) ;", "node . set Attribute ( POP , ( pop - NUM_ ) ) ;", "return node ; }"]}
{"ids": "49045", "code": ["static void plug Together Pair ( Input Stream in , Output Stream out , Input Stream in 1 , Output Stream out 1 ) {", "Thread in Thread = null ;", "Thread out Thread = null ;", "int n Execs = get Num Exec ( ) ;", "in Thread = Access Controller . do Privileged ( new New Thread Action ( new Pipe Writer ( in , out , STR_ , n Execs ) , STR_ , true ) ) ;", "out Thread = Access Controller . do Privileged ( new New Thread Action ( new Pipe Writer ( in 1 , out 1 , STR_ , n Execs ) , STR_ , true ) ) ;", "in Thread . start ( ) ;", "out Thread . start ( ) ; }"]}
{"ids": "51952", "code": ["@ Non Null public static Storable Fence and ( @ Non Null Storable Fence ... fences ) {", "return Storable Fence . and ( Arrays . as List ( fences ) ) ; }"]}
{"ids": "85328", "code": ["public MXFUID ( byte [ ] uid ) {", "this . uid = Arrays . copy Of ( uid , uid . length ) ; }"]}
{"ids": "51810", "code": ["private int shrink Flex Items ( Flex Line flex Line , @ Flex Direction int flex Direction , int max Main Size , int padding Along Main Axis , int start Index ) {", "int child Index = start Index ;", "int size Before Shrink = flex Line . m Main Size ;", "if ( flex Line . m Total Flex Shrink <= NUM_ || max Main Size > flex Line . m Main Size ) {", "child Index += flex Line . m Item Count ;", "return child Index ; }", "boolean needs Reshrink = false ;", "float unit Shrink = ( flex Line . m Main Size - max Main Size ) / flex Line . m Total Flex Shrink ;", "float accumulated Round Error = NUM_ ;", "flex Line . m Main Size = padding Along Main Axis + flex Line . m Divider Length In Main Size ;", "for ( int i = NUM_ ; i < flex Line . m Item Count ; i ++ ) {", "View child = get Reordered Child At ( child Index ) ;", "if ( child == null ) {", "continue ; }", "else if ( child . get Visibility ( ) == View . GONE ) {", "child Index ++ ;", "continue ; }", "Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "if ( is Main Axis Direction Horizontal ( flex Direction ) ) {", "if ( ! m Children Frozen [ child Index ] ) {", "float raw Calculated Width = child . get Measured Width ( ) - unit Shrink * lp . flex Shrink ;", "if ( i == flex Line . m Item Count - NUM_ ) {", "raw Calculated Width += accumulated Round Error ;", "accumulated Round Error = NUM_ ; }", "int new Width = Math . round ( raw Calculated Width ) ;", "if ( new Width < lp . min Width ) {", "needs Reshrink = true ;", "new Width = lp . min Width ;", "m Children Frozen [ child Index ] = true ;", "flex Line . m Total Flex Shrink -= lp . flex Shrink ; }", "else {", "accumulated Round Error += ( raw Calculated Width - new Width ) ;", "if ( accumulated Round Error > NUM_ ) {", "new Width += NUM_ ;", "accumulated Round Error -= NUM_ ; }", "else if ( accumulated Round Error < - NUM_ ) {", "new Width -= NUM_ ;", "accumulated Round Error += NUM_ ; } }", "child . measure ( Measure Spec . make Measure Spec ( new Width , Measure Spec . EXACTLY ) , Measure Spec . make Measure Spec ( child . get Measured Height ( ) , Measure Spec . EXACTLY ) ) ; }", "flex Line . m Main Size += child . get Measured Width ( ) + lp . left Margin + lp . right Margin ; }", "else {", "if ( ! m Children Frozen [ child Index ] ) {", "float raw Calculated Height = child . get Measured Height ( ) - unit Shrink * lp . flex Shrink ;", "if ( i == flex Line . m Item Count - NUM_ ) {", "raw Calculated Height += accumulated Round Error ;", "accumulated Round Error = NUM_ ; }", "int new Height = Math . round ( raw Calculated Height ) ;", "if ( new Height < lp . min Height ) {", "needs Reshrink = true ;", "new Height = lp . min Height ;", "m Children Frozen [ child Index ] = true ;", "flex Line . m Total Flex Shrink -= lp . flex Shrink ; }", "else {", "accumulated Round Error += ( raw Calculated Height - new Height ) ;", "if ( accumulated Round Error > NUM_ ) {", "new Height += NUM_ ;", "accumulated Round Error -= NUM_ ; }", "else if ( accumulated Round Error < - NUM_ ) {", "new Height -= NUM_ ;", "accumulated Round Error += NUM_ ; } }", "child . measure ( Measure Spec . make Measure Spec ( child . get Measured Width ( ) , Measure Spec . EXACTLY ) , Measure Spec . make Measure Spec ( new Height , Measure Spec . EXACTLY ) ) ; }", "flex Line . m Main Size += child . get Measured Height ( ) + lp . top Margin + lp . bottom Margin ; }", "child Index ++ ; }", "if ( needs Reshrink && size Before Shrink != flex Line . m Main Size ) {", "shrink Flex Items ( flex Line , flex Direction , max Main Size , padding Along Main Axis , start Index ) ; }", "return child Index ; }"]}
{"ids": "52041", "code": ["public static Data Model List serializable Instance ( ) {", "return new Data Model List ( ) ; }"]}
{"ids": "30372", "code": ["@ Override public MB Header find Last MB Page No For Line Item ( final Work Order Activity work Order Activity , final Long mb Header Id ) {", "logger . info ( STR_ ) ;", "String query = STR_ ;", "Object [ ] params ;", "final List < Object > param List = new Array List < Object > ( ) ;", "query = query + STR_ + STR_ + STR_ + STR_ ;", "param List . add ( work Order Activity . get Id ( ) ) ;", "param List . add ( mb Header Id ) ;", "param List . add ( Works Constants . APPROVED ) ;", "param List . add ( mb Header Id ) ;", "params = new Object [ param List . size ( ) ] ;", "params = param List . to Array ( params ) ;", "final List < MB Header > mb Header List = generic Service . find All By ( query , params ) ;", "MB Header result = null ;", "if ( mb Header List != null && ! mb Header List . is Empty ( ) ) result = mb Header List . get ( NUM_ ) ;", "return result ; }"]}
{"ids": "27504", "code": ["synchronized private void output Buffered Chunk ( ) {", "if ( small Chunks == null || chunk Size == NUM_ ) {", "return ; }", "if ( small Chunks . size ( ) == NUM_ ) {", "output Chunk ( small Chunks . get ( NUM_ ) ) ;", "chunk Size = NUM_ ;", "small Chunks = null ;", "return ; }", "final I Binding Set [ ] chunk = new I Binding Set [ chunk Size ] ;", "int dest Pos = NUM_ ;", "for ( I Binding Set [ ] e : small Chunks ) {", "System . arraycopy ( e , NUM_ , chunk , dest Pos , e . length ) ;", "dest Pos += e . length ; }", "output Chunk ( chunk ) ;", "chunk Size = NUM_ ;", "small Chunks = null ; }"]}
{"ids": "66000", "code": ["private void wait Load Compete ( ) {", "if ( m load Complete ) return ;", "m loader . set Priority ( Thread . NORM PRIORITY ) ;", "log . config ( STR_ ) ;", "while ( m loader . is Alive ( ) ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , STR_ , e ) ; } }", "log . config ( STR_ ) ; }"]}
{"ids": "46972", "code": ["@ Suppress Warnings ( STR_ ) private void dtdatt ( Pair elm ) throws Exception {", "char attqn [ ] = null ;", "Pair att = null ;", "char ch ;", "for ( short st = NUM_ ; st >= NUM_ ; ) {", "ch = getch ( ) ;", "switch ( st ) {", "case NUM_ :", "switch ( chtyp ( ch ) ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "bkch ( ) ;", "attqn = qname ( m Is NS Aware ) ;", "att = find ( elm . list , attqn ) ;", "if ( att == null ) {", "att = pair ( elm . list ) ;", "att . chars = attqn ;", "elm . list = att ; }", "else {", "att = pair ( null ) ;", "att . chars = attqn ;", "att . id = STR_ ; }", "wsskip ( ) ;", "st = NUM_ ;", "break ;", "case STR_ :", "pent ( STR_ ) ;", "break ;", "case STR_ :", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "break ;", "case NUM_ :", "switch ( chtyp ( ch ) ) {", "case STR_ :", "att . id = STR_ ;", "st = NUM_ ;", "break ;", "case STR_ :", "pent ( STR_ ) ;", "break ;", "case STR_ :", "break ;", "default :", "bkch ( ) ;", "bntok ( ) ;", "att . id = bkeyword ( ) ;", "switch ( att . id ) {", "case STR_ :", "if ( wsskip ( ) != STR_ ) {", "panic ( FAULT ) ; }", "ch = getch ( ) ;", "st = NUM_ ;", "break ;", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "wsskip ( ) ;", "st = NUM_ ;", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "break ; }", "break ;", "case NUM_ :", "switch ( chtyp ( ch ) ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "bkch ( ) ;", "switch ( att . id ) {", "case STR_ :", "bntok ( ) ;", "break ;", "case STR_ :", "m Buff Idx = - NUM_ ;", "bname ( false ) ;", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "wsskip ( ) ;", "st = NUM_ ;", "break ;", "case STR_ :", "pent ( STR_ ) ;", "break ;", "case STR_ :", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "break ;", "case NUM_ :", "switch ( ch ) {", "case STR_ :", "wsskip ( ) ;", "st = NUM_ ;", "break ;", "case STR_ :", "wsskip ( ) ;", "switch ( att . id ) {", "case STR_ :", "bntok ( ) ;", "break ;", "case STR_ :", "m Buff Idx = - NUM_ ;", "bname ( false ) ;", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "wsskip ( ) ;", "break ;", "case STR_ :", "pent ( STR_ ) ;", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "break ;", "case NUM_ :", "switch ( ch ) {", "case STR_ :", "bntok ( ) ;", "switch ( bkeyword ( ) ) {", "case STR_ :", "switch ( wsskip ( ) ) {", "case STR_ :", "case STR_ :", "st = NUM_ ;", "break ;", "case EOS :", "panic ( FAULT ) ;", "default :", "st = - NUM_ ;", "break ; }", "break ;", "case STR_ :", "case STR_ :", "st = - NUM_ ;", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "break ;", "case STR_ :", "case STR_ :", "bkch ( ) ;", "st = NUM_ ;", "break ;", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "break ;", "case STR_ :", "pent ( STR_ ) ;", "break ;", "default :", "bkch ( ) ;", "st = - NUM_ ;", "break ; }", "break ;", "case NUM_ :", "switch ( ch ) {", "case STR_ :", "case STR_ :", "bkch ( ) ;", "bqstr ( STR_ ) ;", "att . list = pair ( null ) ;", "att . list . chars = new char [ att . chars . length + m Buff Idx + NUM_ ] ;", "System . arraycopy ( att . chars , NUM_ , att . list . chars , NUM_ , att . chars . length - NUM_ ) ;", "att . list . chars [ att . chars . length - NUM_ ] = STR_ ;", "att . list . chars [ att . chars . length ] = ch ;", "System . arraycopy ( m Buff , NUM_ , att . list . chars , att . chars . length + NUM_ , m Buff Idx ) ;", "att . list . chars [ att . chars . length + m Buff Idx + NUM_ ] = ch ;", "att . list . chars [ att . chars . length + m Buff Idx + NUM_ ] = STR_ ;", "st = - NUM_ ;", "break ;", "default :", "panic ( FAULT ) ;", "break ; }", "break ;", "default :", "panic ( FAULT ) ;", "break ; } } }"]}
{"ids": "7285", "code": ["public void add Classes ( List < String > class Names ) {", "if ( handler Factories == null ) {", "handler Factories = new Array List < String > ( ) ; }", "handler Factories . add All ( class Names ) ; }"]}
{"ids": "82981", "code": ["public static boolean is Constant Name ( String name ) {", "return Pattern . matches ( STR_ , name ) ; }"]}
{"ids": "80528", "code": ["private void notify Dead ( final RP Entity dead ) {", "if ( ! rats . remove ( dead ) ) {", "logger . warn ( STR_ + dead . to String ( ) + STR_ ) ; }", "if ( rats . size ( ) == NUM_ ) {", "phase To Default Phase ( new Linked List < String > ( Arrays . as List ( STR_ ) ) ) ; } }"]}
{"ids": "11746", "code": ["public static OM Grid read ( Data Input Stream dis ) throws IO Exception {", "return read ( dis , null ) ; }"]}
{"ids": "68297", "code": ["public Varchar Constant ( String s ) {", "type = new Varchar Type ( s . length ( ) ) ;", "val = s ; }"]}
{"ids": "43469", "code": ["public boolean add Child Planet ( Dimension Properties child ) {", "if ( child == this ) return false ;", "child Planets . add ( child . get Id ( ) ) ;", "child . set Parent Planet ( this ) ;", "return true ; }"]}
{"ids": "37808", "code": ["@ Override public Enumeration < String > enumerate Measures ( ) {", "Vector < String > new Vector = new Vector < String > ( NUM_ ) ;", "new Vector . add ( STR_ ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "80343", "code": ["int [ ] calculate Relative ( int [ ] absolute ) {", "int [ ] res = new int [ absolute . length ] ;", "res [ NUM_ ] = absolute [ NUM_ ] ;", "for ( int i = NUM_ ; i < res . length ; i ++ ) {", "res [ i ] = absolute [ i ] - absolute [ i - NUM_ ] ; }", "return res ; }"]}
{"ids": "21184", "code": ["@ After Class public static void delete Log Dir ( ) {", "if ( log Dir != null ) {", "File Utils . delete Quietly ( log Dir ) ; } }"]}
{"ids": "21448", "code": ["public static String [ ] split String Into Array ( String value ) {", "String [ ] values = new String [ NUM_ ] ;", "if ( value != null && value . length ( ) > NUM_ ) {", "if ( value . index Of ( CIM Constants . COMMA SEPERATOR ) != - NUM_ ) {", "values = value . split ( STR_ ) ; }", "else {", "values = new String [ NUM_ ] ;", "values [ NUM_ ] = value ; } }", "return values ; }"]}
{"ids": "66853", "code": ["public static String from Attr Modeling Model Class ( String va Model Class ) {", "return va Model Class . split ( Value Analysis . MODEL PACKAGE PREFIX ) [ NUM_ ] ; }"]}
{"ids": "73683", "code": ["public synchronized void add ( Dcc Loco Address loco Address , boolean direction Normal ) {", "if ( ! contains ( loco Address ) ) {", "if ( Consist List . size ( ) == NUM_ ) {", "byte command = Nce Binary Command . LOCO CMD FWD CONSIST LEAD ;", "if ( ! direction Normal ) {", "command = Nce Binary Command . LOCO CMD REV CONSIST LEAD ; }", "add Loco To Consist ( loco Address . get Number ( ) , loco Address . is Long Address ( ) , command ) ;", "Consist Position . put ( loco Address , Dcc Consist . POSITION LEAD ) ; }", "else if ( Consist List . size ( ) == NUM_ ) {", "byte command = Nce Binary Command . LOCO CMD FWD CONSIST REAR ;", "if ( ! direction Normal ) {", "command = Nce Binary Command . LOCO CMD REV CONSIST REAR ; }", "add Loco To Consist ( loco Address . get Number ( ) , loco Address . is Long Address ( ) , command ) ;", "Consist Position . put ( loco Address , Dcc Consist . POSITION TRAIL ) ; }", "else {", "byte command = Nce Binary Command . LOCO CMD FWD CONSIST MID ;", "if ( ! direction Normal ) {", "command = Nce Binary Command . LOCO CMD REV CONSIST MID ; }", "add Loco To Consist ( loco Address . get Number ( ) , loco Address . is Long Address ( ) , command ) ;", "Consist Position . put ( loco Address , Consist Position . size ( ) ) ; }", "Consist List . add ( loco Address ) ;", "Consist Dir . put ( loco Address , Boolean . value Of ( direction Normal ) ) ; }", "else {", "log . error ( STR_ + loco Address + STR_ + get Consist Address ( ) ) ; } }"]}
{"ids": "31676", "code": ["private Grid Client Configuration client Configuration ( ) {", "Grid Client Configuration cfg = new Grid Client Configuration ( ) ;", "cfg . set Topology Refresh Frequency ( topology Refresh Frequency ( ) ) ;", "cfg . set Max Connection Idle Time ( max Connection Idle Time ( ) ) ;", "cfg . set Protocol ( protocol ( ) ) ;", "cfg . set Servers ( Arrays . as List ( server Address ( ) ) ) ;", "cfg . set Balancer ( new Grid Client Round Robin Balancer ( ) ) ;", "if ( use Ssl ( ) ) cfg . set Ssl Context Factory ( ssl Context Factory ( ) ) ;", "Grid Client Data Configuration loc = new Grid Client Data Configuration ( ) ;", "Grid Client Data Configuration partitioned = new Grid Client Data Configuration ( ) ;", "partitioned . set Name ( PARTITIONED CACHE NAME ) ;", "partitioned . set Affinity ( new Grid Client Partition Affinity ( ) ) ;", "Grid Client Data Configuration partitioned Async Backup = new Grid Client Data Configuration ( ) ;", "partitioned Async Backup . set Name ( PARTITIONED ASYNC BACKUP CACHE NAME ) ;", "partitioned Async Backup . set Affinity ( new Grid Client Partition Affinity ( ) ) ;", "Grid Client Data Configuration replicated = new Grid Client Data Configuration ( ) ;", "replicated . set Name ( REPLICATED CACHE NAME ) ;", "Grid Client Data Configuration replicated Async = new Grid Client Data Configuration ( ) ;", "replicated Async . set Name ( REPLICATED ASYNC CACHE NAME ) ;", "cfg . set Data Configurations ( Arrays . as List ( loc , partitioned , replicated , replicated Async , partitioned Async Backup ) ) ;", "return cfg ; }"]}
{"ids": "2634", "code": ["public Builder ( ) {", "set Version Code ( Math . min ( Fresh Air . get Current Application Version ( ) , NUM_ ) ) ;", "set Features ( new Linked List < Feature Info > ( ) ) ; }"]}
{"ids": "60414", "code": ["protected String convert Date Format ( String pattern ) {", "boolean inside = false ;", "boolean mark = false ;", "boolean modified Command = false ;", "String Builder buf = new String Builder ( ) ;", "for ( int i = NUM_ ; i < pattern . length ( ) ; i ++ ) {", "char c = pattern . char At ( i ) ;", "if ( c == STR_ && ! mark ) {", "mark = true ; }", "else {", "if ( mark ) {", "if ( modified Command ) {", "modified Command = false ;", "mark = false ; }", "else {", "inside = translate Command ( buf , pattern , i , inside ) ;", "if ( c == STR_ || c == STR_ ) {", "modified Command = true ; }", "else {", "mark = false ; } } }", "else {", "if ( ! inside && c != STR_ ) {", "buf . append ( STR_ ) ;", "inside = true ; }", "buf . append ( c ) ; } } }", "if ( buf . length ( ) > NUM_ ) {", "char last Char = buf . char At ( buf . length ( ) - NUM_ ) ;", "if ( last Char != STR_ && inside ) {", "buf . append ( STR_ ) ; } }", "return buf . to String ( ) ; }"]}
{"ids": "7154", "code": ["public void add Child Node ( Eval Factory Node child Node ) {", "child Nodes . add ( child Node ) ; }"]}
{"ids": "72773", "code": ["public final void head To ( Tuple 3 d p ) {", "double angle = Geometric . angle ( this . location , p ) ;", "turn To ( Math . to Degrees ( angle ) ) ; }"]}
{"ids": "57385", "code": ["public void compact Buffer ( ) {", "if ( offset != buffer . length ) {", "byte [ ] new Buffer = new byte [ offset ] ;", "System . arraycopy ( buffer , NUM_ , new Buffer , NUM_ , offset ) ;", "buffer = new Buffer ; } }"]}
{"ids": "59590", "code": ["public static int put Byte Buffer ( byte [ ] bytes , int offset , Byte Buffer buf ) {", "int len = buf . remaining ( ) ;", "buf . get ( bytes , offset , len ) ;", "return offset + len ; }"]}
{"ids": "51250", "code": ["private void clear Index To First ( ) {", "for ( ; ; ) {", "Index < K , V > q = head ;", "for ( ; ; ) {", "Index < K , V > r = q . right ;", "if ( r != null && r . indexes Deleted Node ( ) && ! q . unlink ( r ) ) break ;", "if ( ( q = q . down ) == null ) {", "if ( head . right == null ) try Reduce Level ( ) ;", "return ; } } } }"]}
{"ids": "17581", "code": ["final void try Terminate ( ) {", "for ( ; ; ) {", "int c = ctl . get ( ) ;", "if ( is Running ( c ) || run State At Least ( c , TIDYING ) || ( run State Of ( c ) == SHUTDOWN && ! work Queue . is Empty ( ) ) ) return ;", "if ( worker Count Of ( c ) != NUM_ ) {", "interrupt Idle Workers ( ONLY ONE ) ;", "return ; }", "final Reentrant Lock main Lock = this . main Lock ;", "main Lock . lock ( ) ;", "try {", "if ( ctl . compare And Set ( c , ctl Of ( TIDYING , NUM_ ) ) ) {", "try {", "terminated ( ) ; }", "finally {", "ctl . set ( ctl Of ( TERMINATED , NUM_ ) ) ;", "termination . signal All ( ) ; }", "return ; } }", "finally {", "main Lock . unlock ( ) ; } } }"]}
{"ids": "31062", "code": ["public void join Resource ( ) throws Interrupted Exception {", "if ( run Obj != null ) {", "synchronized ( complete ) {", "if ( run Obj != null ) complete . wait ( ) ; } } }"]}
{"ids": "41028", "code": ["public static String to JSON String ( List list ) {", "if ( list == null ) return STR_ ;", "boolean first = true ;", "String Buffer sb = new String Buffer ( ) ;", "Iterator iter = list . iterator ( ) ;", "sb . append ( STR_ ) ;", "while ( iter . has Next ( ) ) {", "if ( first ) first = false ;", "else sb . append ( STR_ ) ;", "Object value = iter . next ( ) ;", "if ( value == null ) {", "sb . append ( STR_ ) ;", "continue ; }", "sb . append ( JSON Value . to JSON String ( value ) ) ; }", "sb . append ( STR_ ) ;", "return sb . to String ( ) ; }"]}
{"ids": "67428", "code": ["@ Override public int hash Code ( ) {", "final int prime = NUM_ ;", "int result = super . hash Code ( ) ;", "result = prime * result + ( tenant == null ? NUM_ : tenant . hash Code ( ) ) ;", "return result ; }"]}
{"ids": "75540", "code": ["public void load Accessors ( Mapped Field configured Field , Mapped Field target Field ) {", "load Accessors ( target Class , configured Field , target Field ) ; }"]}
{"ids": "50080", "code": ["public static Matrix Block reshape ( Matrix Block in , Matrix Block out , int rows , int cols , boolean rowwise ) throws DML Runtime Exception {", "int rlen = in . rlen ;", "int clen = in . clen ;", "if ( ( ( long ) rlen ) * clen != ( ( long ) rows ) * cols ) throw new DML Runtime Exception ( STR_ + rlen + STR_ + clen + STR_ + rows + STR_ + cols + STR_ ) ;", "if ( rlen == rows && clen == cols ) {", "out . copy ( in ) ;", "return out ; }", "out . sparse = Matrix Block . eval Sparse Format In Memory ( rows , cols , in . non Zeros ) ;", "out . rlen = rows ;", "out . clen = cols ;", "out . non Zeros = in . non Zeros ;", "if ( ! in . sparse && ! out . sparse ) reshape Dense ( in , out , rows , cols , rowwise ) ;", "else if ( in . sparse && out . sparse ) reshape Sparse ( in , out , rows , cols , rowwise ) ;", "else if ( in . sparse ) reshape Sparse To Dense ( in , out , rows , cols , rowwise ) ;", "else reshape Dense To Sparse ( in , out , rows , cols , rowwise ) ;", "return out ; }"]}
{"ids": "16434", "code": ["public static Class < ? > [ ] to Classes From Objects ( final Object [ ] params ) {", "final Class < ? > [ ] classes = new Class < ? > [ params . length ] ;", "int i = NUM_ ;", "for ( final Object object : params ) {", "if ( object != null ) {", "classes [ i ++ ] = object . get Class ( ) ; }", "else {", "classes [ i ++ ] = Object . class ; } }", "return classes ; }"]}
{"ids": "23977", "code": ["public Admin Region ( String local Name , Remote Gem Fire VM vm , String user Attribute Desc ) {", "String gn = local Name ;", "int idx = local Name . last Index Of ( name Sep ) ;", "if ( idx != - NUM_ ) {", "local Name = local Name . substring ( idx + NUM_ ) ; }", "else {", "gn = name Sep + gn ; }", "this . global Name = gn ;", "this . local Name = local Name ;", "this . user Attribute Desc = user Attribute Desc ;", "this . vm = vm ; }"]}
{"ids": "13984", "code": ["public Element sign With WSSX 509 Token Profile ( Document doc , java . security . cert . Certificate cert , String algorithm , List ids ) throws XML Signature Exception {", "return sign With WSSX 509 Token Profile ( doc , cert , algorithm , ids , SOAP Binding Constants . WSF 10 VERSION ) ; }"]}
{"ids": "63971", "code": ["public void add User Message Listener ( User Message Listener user Message Listener ) {", "user Message Listeners . add ( user Message Listener ) ; }"]}
{"ids": "30983", "code": ["public Iterator Builder add Template ( I Space Query query ) {", "templates . add ( query ) ;", "return this ; }"]}
{"ids": "24270", "code": ["public String add To Class Path ( final String path ) {", "this . class Path += ( System . get Property ( STR_ ) + path ) ;", "return this . class Path ; }"]}
{"ids": "78097", "code": ["public static boolean ignoring Battery Optimizations ( ) {", "return Ngn Application . ignoring Battery Optimizations ( null ) ; }"]}
{"ids": "42865", "code": ["private boolean retry Delay Has Passed By ( Long last Fail Time ) {", "return last Fail Time == null || last Fail Time + this . retry After Ms < System . current Time Millis ( ) ; }"]}
{"ids": "82563", "code": ["public static java . lang . String value Of ( long l ) {", "return Long . to String ( l ) ; }"]}
{"ids": "86224", "code": ["private boolean use Metric ( Metric Rule rule , Metric metric ) {", "if ( rule . aws Dimension Select == null && rule . aws Dimension Select Regex == null ) {", "return true ; }", "if ( rule . aws Dimension Select != null && metrics Is In Aws Dimension Select ( rule , metric ) ) {", "return true ; }", "if ( rule . aws Dimension Select Regex != null && metric Is In Aws Dimension Select Regex ( rule , metric ) ) {", "return true ; }", "return false ; }"]}
{"ids": "80270", "code": ["final void add Icon Manager ( Abstract Status Icon Manager manager ) {", "icon Managers . add ( manager ) ; }"]}
{"ids": "56419", "code": ["public Index Meta Data upgrade Index Meta Data ( Index Meta Data index Meta Data ) {", "if ( is Upgraded ( index Meta Data ) ) {", "return index Meta Data ; }", "check Supported Version ( index Meta Data ) ;", "Index Meta Data new Meta Data = upgrade Legacy Routing Settings ( index Meta Data ) ;", "new Meta Data = add Default Units If Needed ( new Meta Data ) ;", "check Mappings Compatibility ( new Meta Data ) ;", "new Meta Data = upgrade Settings ( new Meta Data ) ;", "new Meta Data = mark As Upgraded ( new Meta Data ) ;", "return new Meta Data ; }"]}
{"ids": "52287", "code": ["static final void encode ( byte [ ] src , int src Off , int len , byte [ ] dst , int dst Off ) {", "dst [ dst Off ] = ( byte ) ENCODE TABLE . char At ( ( src [ src Off ] > > NUM_ ) & NUM_ ) ;", "if ( len == NUM_ ) {", "dst [ dst Off + NUM_ ] = ( byte ) ENCODE TABLE . char At ( ( ( src [ src Off ] << NUM_ ) & NUM_ ) | ( ( src [ src Off + NUM_ ] > > NUM_ ) & NUM_ ) ) ;", "dst [ dst Off + NUM_ ] = ( byte ) ENCODE TABLE . char At ( ( ( src [ src Off + NUM_ ] << NUM_ ) & NUM_ ) | ( ( src [ src Off + NUM_ ] > > NUM_ ) & NUM_ ) ) ;", "dst [ dst Off + NUM_ ] = ( byte ) ENCODE TABLE . char At ( src [ src Off + NUM_ ] & NUM_ ) ; }", "else if ( len == NUM_ ) {", "dst [ dst Off + NUM_ ] = ( byte ) ENCODE TABLE . char At ( ( ( src [ src Off ] << NUM_ ) & NUM_ ) | ( ( src [ src Off + NUM_ ] > > NUM_ ) & NUM_ ) ) ;", "dst [ dst Off + NUM_ ] = ( byte ) ENCODE TABLE . char At ( ( src [ src Off + NUM_ ] << NUM_ ) & NUM_ ) ; }", "else {", "dst [ dst Off + NUM_ ] = ( byte ) ENCODE TABLE . char At ( ( src [ src Off ] << NUM_ ) & NUM_ ) ; } }"]}
{"ids": "1173", "code": ["public static void convolve V ( Kernel kernel , int [ ] in Pixels , int [ ] out Pixels , int width , int height , boolean alpha , int edge Action ) {", "int index = NUM_ ;", "float [ ] matrix = kernel . get Kernel Data ( null ) ;", "int rows = kernel . get Height ( ) ;", "int rows 2 = rows / NUM_ ;", "for ( int y = NUM_ ; y < height ; y ++ ) {", "for ( int x = NUM_ ; x < width ; x ++ ) {", "float r = NUM_ , g = NUM_ , b = NUM_ , a = NUM_ ;", "for ( int row = - rows 2 ; row <= rows 2 ; row ++ ) {", "int iy = y + row ;", "int ioffset ;", "if ( iy < NUM_ ) {", "if ( edge Action == CLAMP EDGES ) ioffset = NUM_ ;", "else if ( edge Action == WRAP EDGES ) ioffset = ( ( y + height ) % height ) * width ;", "else ioffset = iy * width ; }", "else if ( iy >= height ) {", "if ( edge Action == CLAMP EDGES ) ioffset = ( height - NUM_ ) * width ;", "else if ( edge Action == WRAP EDGES ) ioffset = ( ( y + height ) % height ) * width ;", "else ioffset = iy * width ; }", "else ioffset = iy * width ;", "float f = matrix [ row + rows 2 ] ;", "if ( f != NUM_ ) {", "int rgb = in Pixels [ ioffset + x ] ;", "a += f * ( ( rgb > > NUM_ ) & NUM_ ) ;", "r += f * ( ( rgb > > NUM_ ) & NUM_ ) ;", "g += f * ( ( rgb > > NUM_ ) & NUM_ ) ;", "b += f * ( rgb & NUM_ ) ; } }", "int ia = alpha ? Pixel Utils . clamp ( ( int ) ( a + NUM_ ) ) : NUM_ ;", "int ir = Pixel Utils . clamp ( ( int ) ( r + NUM_ ) ) ;", "int ig = Pixel Utils . clamp ( ( int ) ( g + NUM_ ) ) ;", "int ib = Pixel Utils . clamp ( ( int ) ( b + NUM_ ) ) ;", "out Pixels [ index ++ ] = ( ia << NUM_ ) | ( ir << NUM_ ) | ( ig << NUM_ ) | ib ; } } }"]}
{"ids": "68480", "code": ["@ Suppress Warnings ( STR_ ) public final void store Data ( final List data ) throws IDB Persistence Exception {", "Sql Session session = null ;", "int size = data . size ( ) ;", "int commited = NUM_ ;", "T dt Short Term Log ;", "try {", "session = sql Session Factory . open Session ( Executor Type . BATCH , false ) ;", "if ( LOGGER . is Debug Enabled ( ) ) {", "LOGGER . debug ( STR_ + session . to String ( ) + STR_ ) ; }", "Logger Mapper < T > persistence Mapper = session . get Mapper ( mapper Interface ) ;", "for ( int i = NUM_ ; i != size ; i ++ ) {", "if ( ( NUM_ == i % RECORDS PER BATCH ) && i > NUM_ ) {", "if ( LOGGER . is Debug Enabled ( ) ) {", "LOGGER . debug ( STR_ + i ) ; }", "session . commit ( ) ;", "commited = i ; }", "if ( data . get ( i ) != null ) {", "dt Short Term Log = ( T ) data . get ( i ) ;", "if ( LOGGER . is Debug Enabled ( ) ) {", "LOGGER . debug ( STR_ + dt Short Term Log . get Id ( ) ) ; }", "persistence Mapper . insert Log ( dt Short Term Log ) ; } }", "session . commit ( ) ;", "commited = size ; }", "catch ( Persistence Exception e ) {", "LOGGER . error ( STR_ + data . size ( ) + STR_ , e ) ;", "try {", "if ( session != null ) {", "session . rollback ( ) ; } }", "catch ( Exception sql ) {", "LOGGER . error ( STR_ , sql ) ; }", "throw new IDB Persistence Exception ( e . get Message ( ) , commited ) ; }", "finally {", "try {", "if ( session != null ) {", "session . close ( ) ; } }", "catch ( Exception e ) {", "LOGGER . error ( STR_ , e ) ; } } }"]}
{"ids": "35767", "code": ["@ Suppress Warnings ( STR_ ) public static Map < String , Configuration Key < ? > > registered Keys ( ) {", "synchronized ( registered Keys ) {", "if ( copy == null ) copy = Collections . unmodifiable Map ( ( Map < String , Configuration Key < ? > > ) registered Keys . clone ( ) ) ;", "return copy ; } }"]}
{"ids": "41813", "code": ["public static String md 5 ( String string To Hash ) {", "if ( string To Hash != null ) {", "try {", "Message Digest md = Message Digest . get Instance ( STR_ ) ;", "byte [ ] bytes = md . digest ( string To Hash . get Bytes ( ) ) ;", "String Builder sb = new String Builder ( NUM_ * bytes . length ) ;", "for ( int i = NUM_ ; i < bytes . length ; i ++ ) {", "int low = ( bytes [ i ] & NUM_ ) ;", "int high = ( ( bytes [ i ] & NUM_ ) > > NUM_ ) ;", "sb . append ( Constants . HEXADECIMAL [ high ] ) ;", "sb . append ( Constants . HEXADECIMAL [ low ] ) ; }", "return sb . to String ( ) ; }", "catch ( No Such Algorithm Exception e ) {", "return STR_ ; } }", "else {", "return STR_ ; } }"]}
{"ids": "80908", "code": ["public String most Of String ( ) {", "String type Name = STR_ ;", "switch ( type ) {", "case BUILTIN :", "type Name = STR_ ;", "break ;", "case NUMBER :", "type Name = STR_ ;", "break ;", "case STRING :", "type Name = STR_ ;", "break ;", "case PF STEP :", "type Name = STR_ ;", "break ;", "case IDENT :", "type Name = STR_ ;", "break ;", "case COMMENT :", "type Name = STR_ ;", "break ;", "case DASHES :", "type Name = STR_ ;", "break ;", "case END MODULE :", "type Name = STR_ ;", "break ;", "case PROLOG :", "type Name = STR_ ;", "break ;", "case EPILOG :", "type Name = STR_ ;", "break ;", "case PCAL LABEL :", "type Name = STR_ ;", "break ; } ;", "String str = STR_ + string + STR_ ;", "if ( string == null ) {", "str = STR_ ; } ;", "String result = STR_ + str + STR_ + type Name + STR_ + column + STR_ + get Width ( ) ;", "if ( above Align . line != - NUM_ ) {", "result = result + STR_ + above Align . to String ( ) ; } ;", "if ( below Align . line != - NUM_ ) {", "result = result + STR_ + below Align . to String ( ) ; } ;", "if ( pre Space != NUM_ ) {", "result = result + STR_ + pre Space ; } ;", "if ( is Alignment Point ) {", "result = result + STR_ ; } ;", "if ( dist From Margin != NUM_ ) {", "result = result + STR_ + dist From Margin ; } ;", "if ( subscript ) {", "result = result + STR_ ; } ;", "return result ; }"]}
{"ids": "56335", "code": ["public Create Index Request mapping ( String type , X Content Builder source ) {", "if ( mappings . contains Key ( type ) ) {", "throw new Illegal State Exception ( STR_ + type + STR_ ) ; }", "try {", "mappings . put ( type , source . string ( ) ) ; }", "catch ( IO Exception e ) {", "throw new Illegal Argument Exception ( STR_ , e ) ; }", "return this ; }"]}
{"ids": "24615", "code": ["public static Pretty Print indent With Spaces ( int number ) {", "if ( number < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "char [ ] chars = new char [ number ] ;", "Arrays . fill ( chars , STR_ ) ;", "return new Pretty Print ( chars ) ; }"]}
{"ids": "77614", "code": ["private static void copy File ( File src , File dst , Integer port , boolean internal Compression ) throws IO Exception {", "Buffered Reader in = new Buffered Reader ( new Input Stream Reader ( new File Input Stream ( src ) , Standard Charsets . UTF 8 ) ) ;", "Writer out = new Output Stream Writer ( new File Output Stream ( dst ) , Standard Charsets . UTF 8 ) ;", "for ( String line = in . read Line ( ) ; null != line ; line = in . read Line ( ) ) {", "if ( null != port ) line = line . replace ( STR_ , port . to String ( ) ) ;", "line = line . replace ( STR_ , internal Compression ? STR_ : STR_ ) ;", "out . write ( line ) ; }", "in . close ( ) ;", "out . close ( ) ; }"]}
{"ids": "49610", "code": ["public void assert Event Log Contains ( Object event ) {", "if ( ! m Event Log . contains ( event ) ) {", "fail ( STR_ + m Event Log ) ; } }"]}
{"ids": "80902", "code": ["private static boolean is All Underscores ( ) {", "int i = NUM_ ;", "boolean result = true ;", "while ( result && ( i < token . length ( ) ) ) {", "if ( token . char At ( i ) != STR_ ) {", "result = false ; } ;", "i = i + NUM_ ; } ;", "return result ; }"]}
{"ids": "11164", "code": ["public Image Warp ( Buffered Image bi , Geo Coord Transformation transform , Data Bounds image Bounds ) {", "if ( bi != null ) {", "iwidth = bi . get Width ( ) ;", "iheight = bi . get Height ( ) ;", "set Geo Trans ( transform ) ;", "set Image Bounds ( image Bounds ) ;", "pixels = get Pixels ( bi , NUM_ , NUM_ , iwidth , iheight ) ;", "bi = null ; } }"]}
{"ids": "68618", "code": ["public static Equipment Logger Factory create Factory ( final Equipment Configuration econf , final Process Configuration pconf , boolean use Equipment Loggers , boolean use Equipment Appenders Only ) {", "return new Equipment Logger Factory ( econf . get Handler Class Name ( ) , Long . value Of ( econf . get Id ( ) ) , econf . get Name ( ) , pconf . get Process Name ( ) , use Equipment Loggers , use Equipment Appenders Only ) ; }"]}
{"ids": "63590", "code": ["protected void assert Equals ( Integer expected , Integer actual ) {", "if ( expected == null || actual == null ) {", "if ( expected != actual ) {", "assert Equals ( STR_ + expected , STR_ + actual ) ; } }", "else {", "assert Equals ( expected . int Value ( ) , actual . int Value ( ) ) ; } }"]}
{"ids": "21009", "code": ["public static boolean v Pool Specifies Snapshots ( final Virtual Pool virtual Pool ) {", "if ( virtual Pool . get Max Native Snapshots ( ) == null ) {", "return false ; }", "return virtual Pool . get Max Native Snapshots ( ) != MAX DISABLED ; }"]}
{"ids": "7434", "code": ["public void map Dataset To Axis ( int index , int axis Index ) {", "List axis Indices = new java . util . Array List ( NUM_ ) ;", "axis Indices . add ( new Integer ( axis Index ) ) ;", "map Dataset To Axes ( index , axis Indices ) ; }"]}
{"ids": "15130", "code": ["public Authenticator App Registration URI Builder ( AM Identity id , String secret Hex , int code Length , String issuer ) {", "Reject . if Null ( id , STR_ ) ;", "Reject . if Null ( secret Hex , STR_ ) ;", "Reject . if True ( String Utils . is Blank ( issuer ) , STR_ ) ;", "Reject . if True ( ( code Length < MIN CODE LENGTH ) , STR_ + MIN CODE LENGTH + STR_ ) ;", "if ( secret Hex . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . issuer = issuer ;", "this . id = id ;", "this . secret Hex = secret Hex ;", "this . code Length = code Length ; }"]}
{"ids": "39494", "code": ["protected void update Application Enabled ( ) {", "fire Property Change ( STR_ , Boolean . value Of ( ! is Enabled ( ) ) , Boolean . value Of ( is Enabled ( ) ) ) ; }"]}
{"ids": "7102", "code": ["public Personality Insights ( final String version Date , String username , String password ) {", "this ( version Date ) ;", "set Username And Password ( username , password ) ; }"]}
{"ids": "9956", "code": ["public String sign Message ( String message ) throws Illegal State Exception {", "Validate . not Null ( get Sign Algorithm ( ) , STR_ ) ;", "Validate . not Null ( get Private Key ( ) , STR_ ) ;", "Validate . not Empty ( message , STR_ ) ;", "log . debug ( STR_ + message + STR_ + get Sign Algorithm ( ) ) ;", "try {", "Signature Algorithm algo = Signature Algorithm . get Signature Algorithm For URI ( get Sign Algorithm ( ) ) ;", "Signature sig = Signature . get Instance ( algo . get Algorithm Name ( ) ) ;", "sig . init Sign ( this . private Key ) ;", "byte [ ] message Bytes = message . get Bytes ( STR_ ) ;", "sig . update ( message Bytes ) ;", "byte [ ] sig Bytes = sig . sign ( ) ;", "String signature = Shared Utils . encode Bytes ( sig Bytes ) ;", "log . debug ( STR_ + signature ) ;", "return signature ; }", "catch ( Exception e ) {", "log . error ( STR_ , e ) ;", "throw new Illegal State Exception ( e ) ; } }"]}
{"ids": "66515", "code": ["private void output Price Lists ( Properties ctx , Print Writer out , boolean include Any ) {", "out . println ( STR_ ) ;", "if ( include Any ) out . println ( STR_ ) ;", "out . println ( STR_ ) ;", "out . println ( STR_ ) ;", "out . println ( STR_ ) ; }"]}
{"ids": "65007", "code": ["public void clear Bindings ( ) {", "if ( m Bind Args != null ) {", "Arrays . fill ( m Bind Args , null ) ; } }"]}
{"ids": "951", "code": ["public boolean assign If Best Match ( Method Declaration declaration ) {", "assert ! finalized : STR_ ;", "if ( ! is Match ( declaration . get Parameters ( ) ) ) {", "return false ; }", "if ( this . best Match Method . is Present ( ) ) {", "if ( this . best Match Method . get ( ) . get Parameters ( ) . size ( ) > declaration . get Parameters ( ) . size ( ) ) {", "return false ; } }", "this . best Match Method = Optional . of ( declaration ) ;", "return true ; }"]}
{"ids": "85299", "code": ["public static List < User > from ( Cursor c ) {", "List < User > users = null ;", "int count = c . get Count ( ) ;", "if ( count > NUM_ ) {", "users = new Array List < > ( count ) ;", "while ( c . move To Next ( ) ) {", "User user = new User ( ) ;", "Syncing . from ( c , user ) ;", "int col = c . get Column Index ( EMAIL HASH ) ;", "if ( col >= NUM_ ) {", "user . email Hash = c . get String ( col ) ; }", "col = c . get Column Index ( FOLLOWING ) ;", "if ( col >= NUM_ ) {", "user . is Following = c . get Int ( col ) == NUM_ ; }", "users . add ( user ) ; } }", "c . close ( ) ;", "return users ; }"]}
{"ids": "82446", "code": ["@ Override public void flush ( ) throws IO Exception {", "out . flush ( ) ; }"]}
{"ids": "70635", "code": ["private void start Checking Status ( ) {", "future = executor . submit ( null ) ; }"]}
{"ids": "13338", "code": ["private static Object new Instance No Service Loader ( Class < ? > provider Class ) {", "if ( System . get Security Manager ( ) == null ) {", "return null ; }", "try {", "Method creation Method = provider Class . get Declared Method ( STR_ ) ;", "return creation Method . invoke ( null , ( Object [ ] ) null ) ; }", "catch ( No Such Method Exception exc ) {", "return null ; }", "catch ( Exception exc ) {", "return null ; } }"]}
{"ids": "34243", "code": ["private void add Signature Profile ( Signature Wrapper signature , Xml Signature xml Signature ) {", "Signature Type signature Type = Signature Type . NA ;", "String certificate Id = signature . get Signing Certificate Id ( ) ;", "if ( certificate Id != null ) {", "signature Type = get Signature Type ( certificate Id ) ; }", "xml Signature . set Signature Level ( signature Type . name ( ) ) ; }"]}
{"ids": "55867", "code": ["private static final int parse Time String ( String str ) {", "str = str . trim ( ) ;", "int ret = NUM_ ;", "boolean neg = false ;", "int i = NUM_ ;", "if ( str . char At ( NUM_ ) == STR_ ) {", "neg = true ;", "i ++ ; }", "int num = NUM_ ;", "final int len = str . length ( ) ;", "for ( ; i < len ; i ++ ) {", "char c = str . char At ( i ) ;", "if ( ( c >= STR_ ) && ( c <= STR_ ) ) {", "num = num * NUM_ + c - STR_ ; }", "else if ( c == STR_ ) {", "ret += num ;", "num = NUM_ ;", "ret *= NUM_ ; } }", "ret += num ;", "ret *= NUM_ ;", "if ( neg ) ret = - ret ;", "return ret ; }"]}
{"ids": "38620", "code": ["public synchronized void remove Image Listener ( Image Listener cl ) {", "m image Listeners . remove ( cl ) ; }"]}
{"ids": "51035", "code": ["public Array List < Constraint Widget > build List ( Scout Widget [ ] list ) {", "Array List < Constraint Widget > ret = new Array List < > ( ) ;", "for ( int i = m Contain Set . next Set Bit ( NUM_ ) ; i >= NUM_ ; i = m Contain Set . next Set Bit ( i + NUM_ ) ) {", "ret . add ( list [ i ] . m Constraint Widget ) ; }", "return ret ; }"]}
{"ids": "47270", "code": ["private boolean node Exists ( String Tokenizer path ) throws Backing Store Exception {", "String token = path . next Token ( ) ;", "if ( token . equals ( STR_ ) ) throw new Illegal Argument Exception ( STR_ ) ;", "synchronized ( lock ) {", "Abstract Preferences child = kid Cache . get ( token ) ;", "if ( child == null ) child = get Child ( token ) ;", "if ( child == null ) return false ;", "if ( ! path . has More Tokens ( ) ) return true ;", "path . next Token ( ) ;", "if ( ! path . has More Tokens ( ) ) throw new Illegal Argument Exception ( STR_ ) ;", "return child . node Exists ( path ) ; } }"]}
{"ids": "46699", "code": ["public int size ( ) {", "return delegate . size ( ) ; }"]}
{"ids": "5598", "code": ["public Network Address Factory Impl ( ) throws Initialization Exception {", "this ( DEFAULT TCP HTTP LISTEN PORT ) ; }"]}
{"ids": "36561", "code": ["public Transparent Glass Pane Panel ( Image Icon icon , String text , Color background Color , float transparency ) {", "set Layout ( new Grid Bag Layout ( ) ) ;", "Grid Bag Constraints gbc = new Grid Bag Constraints ( ) ;", "gbc . gridy = NUM_ ;", "gbc . gridx = NUM_ ;", "J Label icon Label = new J Label ( icon ) ;", "add ( icon Label , gbc ) ;", "gbc . gridy += NUM_ ;", "label = new J Label ( text ) ;", "add ( label , gbc ) ;", "if ( transparency > NUM_ ) {", "transparency = NUM_ ; }", "else if ( transparency < NUM_ ) {", "transparency = NUM_ ; }", "Color transparent Color = new Color ( background Color . get Red ( ) , background Color . get Green ( ) , background Color . get Blue ( ) , ( int ) ( transparency * NUM_ ) ) ;", "set Background ( transparent Color ) ;", "set Opaque ( false ) ; }"]}
{"ids": "25728", "code": ["@ Override protected void fill Header ( Header head ) {", "try {", "Standard . context ( Undefined Data . class ) ;", "head . set Xtension ( STR_ ) ;", "head . set Bitpix ( Basic HDU . BITPIX BYTE ) ;", "head . set Naxes ( NUM_ ) ;", "head . add Value ( NAXI Sn . n ( NUM_ ) , this . data . length ) ;", "head . add Value ( PCOUNT , NUM_ ) ;", "head . add Value ( GCOUNT , NUM_ ) ;", "head . add Value ( EXTEND , true ) ; }", "catch ( Header Card Exception e ) {", "LOG . log ( Level . SEVERE , STR_ , e ) ; }", "finally {", "Standard . context ( null ) ; } }"]}
{"ids": "83138", "code": ["protected void clean Stations And Network ( ) {", "log . info ( STR_ ) ;", "clean Schedule ( ) ;", "remove Non Used Stop Facilities ( ) ;", "clean Modes ( ) ;", "remove Non Used Links ( ) ;", "log . info ( STR_ ) ; }"]}
{"ids": "8901", "code": ["private static String strip Apple Span From Markup ( String markup ) {", "String Builder stripped = new String Builder ( markup ) ;", "int prefix Beg Idx = stripped . index Of ( APPLE SPAN PREFIX ) ;", "while ( prefix Beg Idx >= NUM_ ) {", "int prefix End Idx = stripped . index Of ( STR_ , prefix Beg Idx ) + NUM_ ;", "stripped . replace ( prefix Beg Idx , prefix End Idx , STR_ ) ;", "int suffix Beg Idx = stripped . last Index Of ( APPLE SPAN SUFFIX ) ;", "int suffix End Idx = suffix Beg Idx + APPLE SPAN SUFFIX . length ( ) ;", "stripped . replace ( suffix Beg Idx , suffix End Idx , STR_ ) ;", "prefix Beg Idx = stripped . index Of ( APPLE SPAN PREFIX ) ; }", "return stripped . to String ( ) ; }"]}
{"ids": "30943", "code": ["private Invocation Constraints create Invocation Constraints ( ) {", "if ( MIN RETRY >= sleep Time [ try Indx ] ) {", "return new Invocation Constraints ( new Connection Absolute Time ( System . current Time Millis ( ) + sleep Time [ try Indx ] ) , null ) ; }", "else {", "return Invocation Constraints . EMPTY ; } }"]}
{"ids": "14782", "code": ["public void create ( SSO Token token , String dn , Map attrs ) throws SMS Exception , SSO Exception {", "create ( token . get Principal ( ) , dn , attrs ) ;", "object Changed ( dn , ADD ) ; }"]}
{"ids": "4756", "code": ["@ Override public void close ( ) throws IO Exception {", "if ( ! closed ) {", "try {", "if ( ! eof ) {", "exhaust Input Stream ( this ) ; } }", "finally {", "eof = true ;", "closed = true ; } } }"]}
{"ids": "70524", "code": ["private void discard Downstream Media Chunk ( ) {", "Media Chunk removed = media Chunks . remove First ( ) ;", "long total Bytes = removed . bytes Loaded ( ) ;", "removed . release ( ) ;", "notify Downstream Discarded ( removed . start Time Us , removed . end Time Us , total Bytes ) ; }"]}
{"ids": "30345", "code": ["public Object execute Script ( final Script script , final Script Context context ) {", "final Script Engine engine = script Engine Provider . get Script Engine ( script . get Type ( ) ) ;", "return execute Script ( script , engine , context ) ; }"]}
{"ids": "77648", "code": ["public static Placeholder Fragment new Instance ( ) {", "Placeholder Fragment fragment = new Placeholder Fragment ( ) ;", "Bundle args = new Bundle ( ) ;", "fragment . set Arguments ( args ) ;", "return fragment ; }"]}
{"ids": "47223", "code": ["void remove EQ ( Object o ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "Object [ ] array = queue ;", "for ( int i = NUM_ , n = size ; i < n ; i ++ ) {", "if ( o == array [ i ] ) {", "remove At ( i ) ;", "break ; } } }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "44688", "code": ["public T eval ( ) {", "return eval ( bindings ( ) ) ; }"]}
{"ids": "85094", "code": ["public void add ( XMP Path Segment segment ) {", "segments . add ( segment ) ; }"]}
{"ids": "54644", "code": ["private void next Sync ( ) {", "if ( sync Item Iterator . has Next ( ) ) {", "partial Start Time = System . current Time Millis ( ) ;", "current Sync Item = sync Item Iterator . next ( ) ;", "current Sync Item . sync ( this , host Connection , callback Handler , content Resolver ) ; }", "else {", "Log Utils . LOGD ( TAG , STR_ + ( System . current Time Millis ( ) - start Time ) ) ;", "if ( listener != null ) {", "listener . on Sync Finished ( this ) ; }", "sync Service . stop Self ( service Start Id ) ; } }"]}
{"ids": "68931", "code": ["public String decode ( String encoded ) {", "Json Object object = new Json Object ( encoded ) ;", "Json Array headers = object . get Json Array ( STR_ ) ;", "for ( Object header Obj : headers ) {", "Json Array header = ( Json Array ) header Obj ;", "String key = header . get String ( NUM_ ) ;", "String value = header . get String ( NUM_ ) ;", "if ( key . equals Ignore Case ( CONTENT TYPE ) && ( value . contains ( STR_ ) || value . contains ( APPLICATION JSON ) ) ) {", "try {", "object . put ( STR_ , new Json Object ( new String ( object . get Binary ( PAYLOAD ) , Charset . for Name ( UTF 8 ) ) ) ) ; }", "catch ( Decode Exception e ) {", "object . put ( STR_ , new String ( object . get Binary ( PAYLOAD ) , Charset . for Name ( UTF 8 ) ) ) ; }", "object . remove ( PAYLOAD ) ;", "break ; } }", "return object . to String ( ) ; }"]}
{"ids": "60041", "code": ["public boolean matches Word ( ) {", "return ! is Empty ( ) && Character . is Letter Or Digit ( queue . char At ( pos ) ) ; }"]}
{"ids": "84503", "code": ["public static boolean contains Whitespace ( final Char Sequence seq ) {", "if ( is Empty ( seq ) ) {", "return false ; }", "final int str Len = seq . length ( ) ;", "for ( int i = NUM_ ; i < str Len ; i ++ ) {", "if ( Character . is Whitespace ( seq . char At ( i ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "75008", "code": ["public boolean is Wheel Event ( ) {", "return is Wheel Event ; }"]}
{"ids": "69865", "code": ["public Connection ( String client Handle , String client Id , String host , int port , Context context , Mqtt Android Client client , boolean ssl Connection ) {", "this . client Handle = client Handle ;", "this . client Id = client Id ;", "this . host = host ;", "this . port = port ;", "this . context = context ;", "this . client = client ;", "this . ssl Connection = ssl Connection ;", "history = new Array List < String > ( ) ;", "String Buffer sb = new String Buffer ( ) ;", "sb . append ( STR_ ) ;", "sb . append ( client Id ) ;", "sb . append ( STR_ ) ;", "add Action ( sb . to String ( ) ) ; }"]}
{"ids": "62091", "code": ["public void record State ( Dialogue State state , String name ) {", "if ( frame != null ) {", "state Monitor Tab . record State ( state , name ) ; } }"]}
{"ids": "61374", "code": ["public void characters ( org . w 3 c . dom . Node node ) throws org . xml . sax . SAX Exception {", "flush Pending ( ) ;", "String data = node . get Node Value ( ) ;", "if ( data != null ) {", "final int length = data . length ( ) ;", "if ( length > m chars Buff . length ) {", "m chars Buff = new char [ length * NUM_ + NUM_ ] ; }", "data . get Chars ( NUM_ , length , m chars Buff , NUM_ ) ;", "characters ( m chars Buff , NUM_ , length ) ; } }"]}
{"ids": "66793", "code": ["private void compute Filters From Default ( Indicator View State old State ) {", "filters = new Array List < Filter > ( ) ;", "Set < String > default Filter Names = new Hash Set < String > ( ) ;", "for ( Filter default Filter : default Filters ) {", "filters . add ( default Filter ) ;", "if ( default Filter . name != null ) default Filter Names . add ( default Filter . name ) ; }", "if ( old State != null ) {", "for ( Filter old Filter : old State . filters ) {", "if ( old Filter . name == null || ! default Filter Names . contains ( old Filter . name ) ) filters . add ( old Filter ) ; } } }"]}
{"ids": "31131", "code": ["private static Data parse Name ( Set me , Set peer ) {", "if ( me == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "else if ( me . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Data data = new Data ( ) ;", "String Buffer b = new String Buffer ( ) ;", "data . me = cons ( me , b ) ;", "if ( peer != null && ! peer . is Empty ( ) ) {", "b . append ( STR_ ) ;", "data . peer = cons ( peer , b ) ; }", "data . name = b . to String ( ) ;", "return data ; }"]}
{"ids": "7124", "code": ["public static boolean stream Content Equals ( Input Stream s 1 , Input Stream s 2 ) throws IO Exception {", "try {", "int b 1 , b 2 ;", "do {", "b 1 = s 1 . read ( ) ;", "b 2 = s 2 . read ( ) ; }", "while ( ( b 1 == b 2 ) && ( b 1 != - NUM_ ) ) ;", "return b 1 == b 2 ; }", "finally {", "try {", "s 1 . close ( ) ;", "s 2 . close ( ) ; }", "catch ( Exception e ) { } } }"]}
{"ids": "35424", "code": ["public Content Node parse ( JS Doc Char Scanner scanner , Tag Dictionary < Abstract Inline Tag Definition > inline Tags Dictinary ) {", "Composed Content description = Dom Factory . e INSTANCE . create Composed Content ( ) ;", "if ( ! scanner . has Next ( ) ) {", "return null ; }", "if ( next Is Tag Title ( scanner ) ) {", "return null ; }", "int start = scanner . next Offset ( ) ;", "int end = start ;", "String Builder strb = new String Builder ( ) ;", "while ( scanner . has Next ( ) ) {", "char c = scanner . peek ( ) ;", "if ( region Start ( c ) ) {", "Scanner State st = scanner . save State ( ) ;", "Inline Tag tag = ( Inline Tag ) parse Region ( scanner , inline Tags Dictinary ) ;", "if ( tag != null ) {", "save Text Tokens ( description , start , end , strb ) ;", "strb = new String Builder ( ) ;", "start = end ;", "description . get Contents ( ) . add ( tag ) ;", "continue ; }", "else {", "scanner . restore State ( st ) ;", "if ( start == end ) {", "assert false ; } } }", "scanner . next ( ) ;", "if ( JS Doc Char Scanner . is NL ( c ) ) {", "if ( scanner . has Next ( ) && ! next Is Tag Title ( scanner ) ) {", "end = scanner . offset ( ) ; }", "else {", "break ; } }", "strb . append ( c ) ;", "end = scanner . offset ( ) ; }", "String pending Data = strb . to String ( ) ;", "if ( pending Data . is Empty ( ) == false ) {", "save Text Tokens ( description , start , end , strb ) ; }", "switch ( description . get Contents ( ) . size ( ) ) {", "case NUM_ :", "return null ;", "case NUM_ :", "return description . get Contents ( ) . get ( NUM_ ) ;", "default :", "return description ; } }"]}
{"ids": "2954", "code": ["static public void add ( Errors errors , String text ) {", "if ( errors == null ) {", "return ; }", "errors . add ( text ) ; }"]}
{"ids": "8694", "code": ["public synchronized void remove Icons For Pkg ( String package Name , User Handle Compat user ) {", "remove From Mem Cache Locked ( package Name , user ) ;", "long user Serial = m User Manager . get Serial Number For User ( user ) ;", "m Icon Db . delete ( Icon DB . COLUMN COMPONENT + STR_ + Icon DB . COLUMN USER + STR_ , new String [ ] { package Name + STR_ , Long . to String ( user Serial ) } ) ; }"]}
{"ids": "72977", "code": ["public boolean contains ( String s Category ) {", "return Category Estimations . contains Key ( s Category ) ; }"]}
{"ids": "25927", "code": ["private void create Recursivly ( String path ) throws Keeper Exception , Interrupted Exception {", "try {", "if ( zk . exists ( path , true ) == null && path . length ( ) > NUM_ ) {", "String temp = path . substring ( NUM_ , path . last Index Of ( File . separator ) ) ;", "create Recursivly ( temp ) ;", "zk . create ( path , null , Ids . OPEN ACL UNSAFE , Create Mode . PERSISTENT ) ; }", "else {", "return ; } }", "catch ( Keeper Exception e ) {", "throw e ; }", "catch ( Interrupted Exception e ) {", "throw e ; } }"]}
{"ids": "50769", "code": ["public void zoom ( double x , double y , double factor ) {", "double range X = Math . abs ( current Extent . get Max X ( ) - current Extent . get Min X ( ) ) ;", "double range Y = Math . abs ( current Extent . get Max Y ( ) - current Extent . get Min Y ( ) ) ;", "current Extent . set Min X ( x - ( range X * factor ) / NUM_ ) ;", "current Extent . set Min Y ( y - ( range Y * factor ) / NUM_ ) ;", "current Extent . set Max X ( x + ( range X * factor ) / NUM_ ) ;", "current Extent . set Max Y ( y + ( range Y * factor ) / NUM_ ) ;", "add To Extent History ( current Extent ) ; }"]}
{"ids": "26576", "code": ["protected boolean is Output Line Expected ( final String line , final String [ ] expected Prefixes , final boolean file Paths Are Expected ) {", "final String trimmed = line != null ? line . trim ( ) : null ;", "if ( String Utils . is Not Empty ( trimmed ) ) {", "if ( file Paths Are Expected && is File Path ( line ) ) {", "return true ; }", "if ( expected Prefixes != null ) {", "for ( final String prefix : expected Prefixes ) {", "if ( String Utils . starts With Ignore Case ( line , prefix ) ) {", "return true ; } } }", "return false ; }", "return true ; }"]}
{"ids": "56968", "code": ["public static String meter To String ( OF Instruction Meter inst , Logger log ) {", "return STR SUB GOTO METER METER ID + STR_ + Long . to String ( inst . get Meter Id ( ) ) ; }"]}
{"ids": "82690", "code": ["public boolean is Image Cachable ( int w , int h ) {", "return ( w * h ) < max Single Image Pixel Size ; }"]}
{"ids": "61553", "code": ["public void free Entry ( Basic Pool Entry entry ) {", "if ( num Entries < NUM_ ) {", "throw new Illegal State Exception ( STR_ + route ) ; }", "if ( num Entries <= free Entries . size ( ) ) {", "throw new Illegal State Exception ( STR_ + route ) ; }", "free Entries . add ( entry ) ; }"]}
{"ids": "70195", "code": ["public boolean is In ( Coords coords ) {", "return coordinates . contains ( coords ) ; }"]}
{"ids": "16539", "code": ["private Dialog Base Units compute Dialog Base Units ( Font Metrics metrics ) {", "double average Char Width = compute Average Char Width ( metrics , average Char Width Test String ) ;", "int ascent = metrics . get Ascent ( ) ;", "double height = ascent > NUM_ ? ascent : ascent + ( NUM_ - ascent ) / NUM_ ;", "Dialog Base Units dialog Base Units = new Dialog Base Units ( average Char Width , height ) ;", "if ( LOGGER . is Loggable ( Level . CONFIG ) ) {", "LOGGER . config ( STR_ + dialog Base Units + STR_ + metrics . get Font ( ) ) ; }", "return dialog Base Units ; }"]}
{"ids": "15767", "code": ["public synchronized void close ( ) {", "try {", "writer . close ( ) ; }", "catch ( IO Exception ioe ) {", "ioe . print Stack Trace ( ) ; } }"]}
{"ids": "68162", "code": ["public static boolean is Proxy Uri ( final String url ) {", "not Null ( url ) ;", "return url . contains ( get Request Handler Path ( ) ) ; }"]}
{"ids": "43125", "code": ["public void add Action ( Action act ) {", "if ( act . entry != null && act . entry != this ) {", "Log . e ( TAG , STR_ + act . entry . ID + STR_ + ID ) ;", "return ; }", "if ( m Actions == null ) {", "m Actions = new Array List < Action > ( ) ; }", "if ( m Actions . size ( ) == NUM_ ) {", "Log . w ( TAG , STR_ ) ;", "return ; }", "act . entry = this ;", "m Actions . add ( act ) ; }"]}
{"ids": "31350", "code": ["private void name ( String Builder builder ) {", "String name = type . get Name ( ) ;", "if ( name != null ) {", "builder . append ( STR_ ) ;", "builder . append ( name ) ;", "builder . append ( STR_ ) ; } }"]}
{"ids": "36452", "code": ["boolean ensure Process Size Fits ( final Execution Unit process , final Rectangle 2 D rect ) {", "Dimension process Size = model . get Process Size ( process ) ;", "if ( process Size == null ) {", "return false ; }", "if ( rect == null ) {", "return false ; }", "boolean needs Resize = false ;", "double process Width = process Size . get Width ( ) * ( NUM_ / model . get Zoom Factor ( ) ) ;", "double process Height = process Size . get Height ( ) * ( NUM_ / model . get Zoom Factor ( ) ) ;", "double width = process Width ;", "double height = process Height ;", "if ( process Size != null ) {", "if ( process Width < rect . get Max X ( ) + Process Drawer . GRID X OFFSET ) {", "double diff = rect . get Max X ( ) + Process Drawer . GRID X OFFSET - process Width ;", "if ( diff > Process Drawer . GRID X OFFSET ) {", "width += diff ; }", "else {", "width += Process Drawer . GRID X OFFSET ; }", "needs Resize = true ; }", "if ( process Height < rect . get Max Y ( ) + Process Drawer . GRID Y OFFSET ) {", "double diff = rect . get Max Y ( ) + Process Drawer . GRID Y OFFSET - process Height ;", "if ( diff > Process Drawer . GRID Y OFFSET ) {", "height += diff ; }", "else {", "height += Process Drawer . GRID Y OFFSET ; }", "needs Resize = true ; }", "if ( needs Resize ) {", "model . set Process Width ( process , width ) ;", "model . set Process Height ( process , height ) ;", "balance ( ) ;", "model . fire Process Size Changed ( ) ;", "return true ; } }", "return false ; }"]}
{"ids": "13845", "code": ["public void handle Tbl Handlers Button Add Request ( Request Invocation Event event ) throws Model Control Exception {", "try {", "Map values = get Values ( ) ;", "on Before Save Profile ( values ) ;", "set Page Session Attribute ( PROPERTY ATTRIBUTE , ( Hash Map ) values ) ;", "WS Auth N Services Handlers Add View Bean vb = ( WS Auth N Services Handlers Add View Bean ) get View Bean ( WS Auth N Services Handlers Add View Bean . class ) ;", "unlock Page Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ; } }"]}
{"ids": "37848", "code": ["public void reduce DL ( double exp FP Rate , boolean check Err ) {", "boolean need Update = false ;", "double [ ] ruleset Stat = new double [ NUM_ ] ;", "for ( int j = NUM_ ; j < m Simple Stats . size ( ) ; j ++ ) {", "ruleset Stat [ NUM_ ] += m Simple Stats . get ( j ) [ NUM_ ] ;", "ruleset Stat [ NUM_ ] += m Simple Stats . get ( j ) [ NUM_ ] ;", "ruleset Stat [ NUM_ ] += m Simple Stats . get ( j ) [ NUM_ ] ;", "if ( j == m Simple Stats . size ( ) - NUM_ ) {", "ruleset Stat [ NUM_ ] = m Simple Stats . get ( j ) [ NUM_ ] ;", "ruleset Stat [ NUM_ ] = m Simple Stats . get ( j ) [ NUM_ ] ;", "ruleset Stat [ NUM_ ] = m Simple Stats . get ( j ) [ NUM_ ] ; } }", "for ( int k = m Simple Stats . size ( ) - NUM_ ; k >= NUM_ ; k -- ) {", "double [ ] rule Stat = m Simple Stats . get ( k ) ;", "double if Deleted = potential ( k , exp FP Rate , ruleset Stat , rule Stat , check Err ) ;", "if ( ! Double . is Na N ( if Deleted ) ) {", "if ( k == ( m Simple Stats . size ( ) - NUM_ ) ) {", "remove Last ( ) ; }", "else {", "m Ruleset . remove ( k ) ;", "need Update = true ; } } }", "if ( need Update ) {", "m Filtered = null ;", "m Simple Stats = null ;", "count Data ( ) ; } }"]}
{"ids": "40056", "code": ["@ Override public void on Draw Frame ( GL 10 gl 10 ) {", "GLES 20 . gl Clear Color ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "GLES 20 . gl Clear ( GLES 20 . GL COLOR BUFFER BIT | GLES 20 . GL DEPTH BUFFER BIT ) ;", "GLES 20 . gl Enable ( GLES 20 . GL DEPTH TEST ) ;", "GLES 20 . gl Enable ( GLES 20 . GL CULL FACE ) ;", "GLES 20 . gl Enable ( GLES 20 . GL BLEND ) ;", "GLES 20 . gl Blend Func ( GLES 20 . GL SRC ALPHA , GLES 20 . GL ONE MINUS SRC ALPHA ) ;", "long current Time Millis = System . current Time Millis ( ) ;", "update With Delta ( current Time Millis - last Time Millis ) ;", "last Time Millis = current Time Millis ; }"]}
{"ids": "45087", "code": ["public void remove Line Highlight ( Object tag ) {", "if ( tag instanceof Line Highlight Info ) {", "line Highlights . remove ( tag ) ;", "repaint Line ( ( Line Highlight Info ) tag ) ; } }"]}
{"ids": "9913", "code": ["private Element create Single Log Out For Castle As IDP ( String binding ) throws Exception {", "String entity ID = idm Client . get Entity ID ( tenant Name ) ;", "String sso Loc = convert To IPV 6 Short Form ( entity ID ) ;", "if ( sso Loc == null ) {", "sso Loc = tenant Name ; }", "String slo Loc = sso Loc . replace All ( STR_ , STR_ ) ;", "Element slos Ele = create End Point ( SAML Names . SLOS , binding , slo Loc , null ) ;", "return slos Ele ; }"]}
{"ids": "30497", "code": ["public static void unregister Transport M Bean ( String container Name ) throws Exception {", "M Bean Server m Bean Server = get M Bean Server ( container Name ) ;", "if ( m Bean Server == null ) return ;", "Object Name transport M Bean Object Name = Transport Constants . create Transport M Bean Object Name ( container Name ) ;", "if ( m Bean Server . is Registered ( transport M Bean Object Name ) ) {", "m Bean Server . unregister M Bean ( transport M Bean Object Name ) ;", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ ) ; } } }"]}
{"ids": "18135", "code": ["public void add Nodes In Doc Order ( Node Iterator iterator , X Path Context support ) {", "if ( ! m mutable ) throw new Runtime Exception ( XSL Messages . create XPATH Message ( XPATH Error Resources . ER NODESET NOT MUTABLE , null ) ) ;", "Node node ;", "while ( null != ( node = iterator . next Node ( ) ) ) {", "add Node In Doc Order ( node , support ) ; } }"]}
{"ids": "82843", "code": ["protected void uninstall Defaults ( ) {", "Sea Glass Context context = get Context ( split Pane , ENABLED ) ;", "style . uninstall Defaults ( context ) ;", "context . dispose ( ) ;", "style = null ;", "context = get Context ( split Pane , Region . SPLIT PANE DIVIDER , ENABLED ) ;", "divider Style . uninstall Defaults ( context ) ;", "context . dispose ( ) ;", "divider Style = null ;", "super . uninstall Defaults ( ) ; }"]}
{"ids": "80539", "code": ["public void subtract Amount ( final String amount ) {", "subtract Amount ( Integer . parse Int ( amount ) ) ; }"]}
{"ids": "55762", "code": ["public void append ( Char Sequence s ) {", "text . append ( s ) ; }"]}
{"ids": "539", "code": ["public void invalidate All ( ) {", "if ( m tuples == null ) return ;", "for ( int i = NUM_ ; i < m tuples . length ; ++ i ) invalidate ( i ) ; }"]}
{"ids": "28078", "code": ["public void add ( final long addr ) {", "addrs . add ( addr ) ; }"]}
{"ids": "2088", "code": ["public static boolean is Black Listed ( @ Nonnull Size size , @ Nonnull String blacklist String ) {", "String [ ] blacklist String Array = blacklist String . split ( STR_ ) ;", "if ( blacklist String Array . length == NUM_ ) {", "return false ; }", "Set < String > blacklisted Sizes = new Hash Set ( Lists . new Array List ( blacklist String Array ) ) ;", "return is Black Listed ( size , blacklisted Sizes ) ; }"]}
{"ids": "15559", "code": ["static private void write Dec Ref ( Writer out , char ch ) throws IO Exception {", "if ( ch == STR_ ) {", "out . write ( STR_ ) ;", "return ; }", "out . write ( STR_ ) ;", "int i = ( int ) ch ;", "if ( i > NUM_ ) {", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + i ) ; }", "else if ( i > NUM_ ) {", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + i ) ; }", "else {", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + ( i / NUM_ ) ) ;", "i = i % NUM_ ;", "out . write ( STR_ + i ) ; }", "out . write ( STR_ ) ; }"]}
{"ids": "40581", "code": ["protected byte [ ] input Stream To Byte Array ( Input Stream is ) throws IO Exception {", "Byte Array Output Stream bos = new Byte Array Output Stream ( ) ;", "int next = is . read ( ) ;", "while ( next > - NUM_ ) {", "bos . write ( next ) ;", "next = is . read ( ) ; }", "bos . flush ( ) ;", "is . close ( ) ;", "return bos . to Byte Array ( ) ; }"]}
{"ids": "41452", "code": ["private boolean is A Reference Tag ( String str ) {", "if ( str == null ) {", "return false ; }", "return str . index Of ( STR_ ) == NUM_ && str . last Index Of ( STR_ ) == ( str . length ( ) - NUM_ ) ; }"]}
{"ids": "43118", "code": ["protected static String encode ( String url ) {", "String Builder encoder = new String Builder ( ) ;", "for ( char chr : url . to Char Array ( ) ) {", "byte chr Byte = ( byte ) chr ;", "if ( ( chr Byte <= NUM_ || chr Byte >= NUM_ || chr == STR_ || chr == STR_ ) ) {", "encoder . append ( String . format ( STR_ , chr Byte ) ) ; }", "else {", "encoder . append ( chr ) ; } }", "return encoder . to String ( ) ; }"]}
{"ids": "5631", "code": ["public static long now ( ) {", "return System . current Time Millis ( ) ; }"]}
{"ids": "40952", "code": ["private Binlog Position find Heartbeat ( Maxwell Replicator r ) throws Exception {", "r . start Replicator ( ) ;", "for ( Row Map row = r . get Row ( ) ; row != null ; row = r . get Row ( ) ) {", "if ( Objects . equals ( r . get Last Heartbeat Read ( ) , recovery Info . heartbeat ) ) return row . get Position ( ) ; }", "return null ; }"]}
{"ids": "54260", "code": ["private Configure ( ) {", "Properties p = new Properties ( ) ;", "Map args = new Hash Map ( ) ;", "args . put All ( System . getenv ( ) ) ;", "args . put All ( System . get Properties ( ) ) ;", "p . put All ( args ) ;", "this . property = p ;", "reload ( false ) ; }"]}
{"ids": "51765", "code": ["private void handle Truncated Info ( final Statement Info info ) throws SQL Exception {", "final byte [ ] original Info = statement . get Statement Info Request Items ( ) ;", "final byte [ ] new Info Items = new byte [ original Info . length + NUM_ * NUM_ ] ;", "int new Index = NUM_ ;", "for ( final byte info Item : original Info ) {", "assert new Index < new Info Items . length : STR_ ;", "switch ( info Item ) {", "case ISC Constants . isc info sql select :", "case ISC Constants . isc info sql bind :", "final Row Descriptor Builder current Builder = info Item == ISC Constants . isc info sql select ? info . field Builder : info . parameter Builder ;", "final int descriptor Index = current Builder != null ? current Builder . get First Unprocessed Index ( ) + NUM_ : NUM_ ;", "new Info Items [ new Index ++ ] = ISC Constants . isc info sql sqlda start ;", "new Info Items [ new Index ++ ] = NUM_ ;", "new Info Items [ new Index ++ ] = ( byte ) ( descriptor Index & NUM_ ) ;", "new Info Items [ new Index ++ ] = ( byte ) ( descriptor Index > > NUM_ ) ;", "new Info Items [ new Index ++ ] = info Item ;", "break ;", "default :", "new Info Items [ new Index ++ ] = info Item ;", "break ; } }", "assert new Index == new Info Items . length : STR_ ;", "info . request Buffer Size = Math . min ( NUM_ * info . request Buffer Size , statement . get Max Sql Info Size ( ) ) ;", "info . buffer = statement . get Sql Info ( new Info Items , info . request Buffer Size ) ;", "info . current Index = NUM_ ; }"]}
{"ids": "4882", "code": ["public static String strip File Extension ( String name ) {", "int pos = name . last Index Of ( STR_ ) ;", "if ( pos > NUM_ & pos < name . length ( ) - NUM_ ) return name . substring ( NUM_ , pos ) ;", "return name ; }"]}
{"ids": "26509", "code": ["private static void push Transaction Start Stamp ( Transaction t ) {", "Map < Transaction , Timestamp > map = suspended Tx Start Stamps . get ( ) ;", "Timestamp stamp = transaction Start Stamp . get ( ) ;", "if ( stamp != null ) {", "map . put ( t , stamp ) ; }", "else {", "Debug . log Error ( STR_ , module ) ; } }"]}
{"ids": "64718", "code": ["private int indexed Binary Search ( List < S 2 Cell Id > l , S 2 Cell Id key , int low ) {", "int high = l . size ( ) - NUM_ ;", "while ( low <= high ) {", "int mid = ( low + high ) > > NUM_ ;", "S 2 Cell Id mid Val = l . get ( mid ) ;", "int cmp = mid Val . compare To ( key ) ;", "if ( cmp < NUM_ ) {", "low = mid + NUM_ ; }", "else if ( cmp > NUM_ ) {", "high = mid - NUM_ ; }", "else {", "return mid ; } }", "return low ; }"]}
{"ids": "81431", "code": ["public Variable [ ] find Local Arrays ( ) {", "List < Variable > arrays = new Array List < Variable > ( ) ;", "for ( List Iterator < Variable > iterator = f Local Variables . list Iterator ( f Local Variables . size ( ) ) ; iterator . has Previous ( ) ; ) {", "Variable local Variable = iterator . previous ( ) ;", "if ( local Variable . is Array ( ) ) arrays . add ( local Variable ) ; }", "return arrays . to Array ( new Variable [ arrays . size ( ) ] ) ; }"]}
{"ids": "33072", "code": ["public static int index Of Java Like Extension ( String file Name ) {", "int file Name Length = file Name . length ( ) ;", "char [ ] [ ] java Like Extensions = get Java Like Extensions ( ) ;", "extensions : for ( int i = NUM_ , length = java Like Extensions . length ; i < length ; i ++ ) {", "char [ ] extension = java Like Extensions [ i ] ;", "int extension Length = extension . length ;", "int extension Start = file Name Length - extension Length ;", "int dot Index = extension Start - NUM_ ;", "if ( dot Index < NUM_ ) continue ;", "if ( file Name . char At ( dot Index ) != STR_ ) continue ;", "for ( int j = NUM_ ; j < extension Length ; j ++ ) {", "if ( file Name . char At ( extension Start + j ) != extension [ j ] ) continue extensions ; }", "return dot Index ; }", "return - NUM_ ; }"]}
{"ids": "5031", "code": ["public Shape Tile Simplex remove border line ( int p no ) {", "if ( p no < NUM_ || p no >= lines size ( ) ) {", "return this ; }", "Array List < Pla Line Int > new arr = new Array List < Pla Line Int > ( lines size ( ) ) ;", "new arr . add All ( lines list ) ;", "new arr . remove ( p no ) ;", "return new Shape Tile Simplex ( new arr ) ; }"]}
{"ids": "5596", "code": ["protected boolean wait Before Execution ( ) throws Interrupted Exception {", "return true ; }"]}
{"ids": "7087", "code": ["static boolean is Valid Streaming Url ( String url ) {", "return url != null && url . matches ( STR_ ) ; }"]}
{"ids": "25747", "code": ["public Web Service Proxy ( URL server URL , Executor Service executor Service ) {", "this ( server URL , executor Service , NUM_ , NUM_ ) ; }"]}
{"ids": "51362", "code": ["private static byte [ ] expose Byte Array Input Stream Bytes ( Byte Array Input Stream bais ) {", "byte [ ] buffer ;", "synchronized ( bais ) {", "byte [ ] buf ;", "int pos ;", "try {", "buf = ( byte [ ] ) BAIS BUF . get ( bais ) ;", "pos = BAIS POS . get Int ( bais ) ; }", "catch ( Illegal Access Exception iae ) {", "throw new Assertion Error ( iae ) ; }", "int available = bais . available ( ) ;", "if ( pos == NUM_ && buf . length == available ) {", "buffer = buf ; }", "else {", "buffer = new byte [ available ] ;", "System . arraycopy ( buf , pos , buffer , NUM_ , available ) ; }", "bais . skip ( available ) ; }", "return buffer ; }"]}
{"ids": "78691", "code": ["private void restore Data ( ) {", "Map < String , ? > map = preference Utils . get All ( ) ;", "Set < String > strings = map . key Set ( ) ;", "for ( String string : strings ) {", "if ( string . starts With ( Shared Preference Utils . key Test Mode ) ) {", "preference Utils . restore Key ( string ) ; } }", "refresh Key Values ( ) ; }"]}
{"ids": "78229", "code": ["public String put Image ( String the Folder , String the Image Name , Bitmap the Bitmap ) {", "if ( the Folder == null || the Image Name == null || the Bitmap == null ) return null ;", "this . DEFAULT APP IMAGEDATA DIRECTORY = the Folder ;", "String m Full Path = setup Full Path ( the Image Name ) ;", "if ( ! m Full Path . equals ( STR_ ) ) {", "last Image Path = m Full Path ;", "save Bitmap ( m Full Path , the Bitmap ) ; }", "return m Full Path ; }"]}
{"ids": "26612", "code": ["public Class < ? > type ( ) {", "if ( is Class ) {", "return ( Class < ? > ) object ; }", "else {", "return object . get Class ( ) ; } }"]}
{"ids": "82155", "code": ["void add To External CSS ( CSS Element css Element ) {", "if ( external CSS == null ) {", "external CSS = new Vector ( ) ; }", "external CSS . add Element ( css Element ) ; }"]}
{"ids": "72245", "code": ["private void remove ( String world , Permission Holder holder , String permission ) {", "try {", "if ( world != null && ! world . equals ( STR_ ) ) {", "holder . unset Permission ( permission , server , world ) ; }", "else {", "holder . unset Permission ( permission , server ) ; } }", "catch ( Object Lacks Exception ignored ) { }", "save ( holder ) ; }"]}
{"ids": "51259", "code": ["private Concurrent Skip List Map . Node < K , V > hi Node ( ) {", "if ( hi == null ) return m . find Last ( ) ;", "else if ( hi Inclusive ) return m . find Near ( hi , LT | EQ ) ;", "else return m . find Near ( hi , LT ) ; }"]}
{"ids": "13635", "code": ["public static final Image Point convert Point ( Map Point map Point , Map Envelope map Env , int img Height , int img Width ) {", "long image Y = Math . round ( convert Y ( map Point , map Env , img Height ) ) ;", "long image X = Math . round ( convert X ( map Point , map Env , img Width ) ) ;", "return new Image Point ( image X , image Y ) ; }"]}
{"ids": "73405", "code": ["private void check Using Adaptation ( ) {", "if ( ts Use Adaptation . is Selected ( ) ) {", "tf Adaptation Time . set Enabled ( true ) ;", "tf Adaptation Param . set Enabled ( true ) ; }", "else {", "tf Adaptation Time . set Enabled ( false ) ;", "tf Adaptation Param . set Enabled ( false ) ; } }"]}
{"ids": "7869", "code": ["public Quarter ( int quarter , Year year ) {", "if ( ( quarter < FIRST QUARTER ) || ( quarter > LAST QUARTER ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . year = ( short ) year . get Year ( ) ;", "this . quarter = ( byte ) quarter ;", "peg ( Calendar . get Instance ( ) ) ; }"]}
{"ids": "28610", "code": ["public void send Request Vote Request ( boolean is Prevote ) throws Gondola Exception {", "if ( ! enabled || master Id >= NUM_ ) {", "return ; }", "if ( ! is Prevote ) {", "current Term ++ ;", "voted For = - NUM_ ;", "save ( current Term , member Id ) ;", "voted For = member Id ; }", "prevotes Only = is Prevote ;", "Message message = pool . checkout ( ) ;", "try {", "save Queue . get Latest ( saved Rid ) ;", "message . request Vote Request ( member Id , current Term , is Prevote , saved Rid ) ;", "peers . for Each ( null ) ; }", "finally {", "message . release ( ) ; }", "prevote Ts = clock . now ( ) + ( long ) ( ( Math . random ( ) * prevote Period ) ) ;", "if ( ! is Prevote ) {", "prevote Ts += election Timeout ; } }"]}
{"ids": "21735", "code": ["private List < String > filter Targets From Response ( Set < String > varray Tagged Port WW Ns , Map < String , List < String > > initiator Target Map , String initiator Key ) {", "log . debug ( STR_ ) ;", "List < String > filtered Target List = new Array List < String > ( ) ;", "List < String > target Port List From Response = initiator Target Map . get ( initiator Key ) ;", "for ( String port WWN : target Port List From Response ) {", "if ( varray Tagged Port WW Ns . contains ( port WWN ) || varray Tagged Port WW Ns . contains ( port WWN . to Upper Case ( ) ) ) {", "filtered Target List . add ( port WWN . to Upper Case ( ) ) ; } }", "log . debug ( STR_ ) ;", "return filtered Target List ; }"]}
{"ids": "70122", "code": ["public Piloting Roll Data check Maneuver ( Move Step step , Entity Movement Type overall Move Type ) {", "Piloting Roll Data roll = get Base Piloting Roll ( overall Move Type ) ;", "if ( ( step == null ) || ( step . get Type ( ) != Move Step Type . MANEUVER ) ) {", "roll . add Modifier ( Target Roll . CHECK FALSE , STR_ ) ;", "return roll ; }", "boolean side Slip Mod = ( this instanceof Conv Fighter ) && is VSTOL ( ) ;", "roll . append ( new Piloting Roll Data ( get Id ( ) , Maneuver Type . get Mod ( step . get Maneuver Type ( ) , side Slip Mod ) , Maneuver Type . get Type Name ( step . get Maneuver Type ( ) ) + STR_ ) ) ;", "return roll ; }"]}
{"ids": "84989", "code": ["public static List < String > parse Program Args ( I Launch Configuration launch Config ) throws Core Exception {", "return parse Args ( launch Config . get Attribute ( I Java Launch Configuration Constants . ATTR PROGRAM ARGUMENTS , STR_ ) ) ; }"]}
{"ids": "45940", "code": ["@ Override public synchronized MX Bean Mapping mapping For Type ( Type obj Type , MX Bean Mapping Factory factory ) throws Open Data Exception {", "if ( in Progress . contains Key ( obj Type ) ) {", "throw new Open Data Exception ( STR_ + type Name ( obj Type ) ) ; }", "MX Bean Mapping mapping ;", "mapping = get Mapping ( obj Type ) ;", "if ( mapping != null ) return mapping ;", "in Progress . put ( obj Type , obj Type ) ;", "try {", "mapping = make Mapping ( obj Type , factory ) ; }", "catch ( Open Data Exception e ) {", "throw open Data Exception ( STR_ + type Name ( obj Type ) , e ) ; }", "finally {", "in Progress . remove ( obj Type ) ; }", "put Mapping ( obj Type , mapping ) ;", "return mapping ; }"]}
{"ids": "45901", "code": ["public static Element create Element In Signature 11 Space ( Document doc , String element Name ) {", "if ( doc == null ) {", "throw new Runtime Exception ( STR_ ) ; }", "if ( ( ds 11 Prefix == null ) || ( ds 11 Prefix . length ( ) == NUM_ ) ) {", "return doc . create Element NS ( Constants . Signature Spec 11 NS , element Name ) ; }", "return doc . create Element NS ( Constants . Signature Spec 11 NS , ds 11 Prefix + STR_ + element Name ) ; }"]}
{"ids": "75030", "code": ["public void remove Element At ( final int index ) {", "entries . remove ( index ) ; }"]}
{"ids": "12844", "code": ["public static void c 2 ir ( double c [ ] , int nc , double hh [ ] , int leng ) {", "hh [ NUM_ ] = Math . exp ( c [ NUM_ ] ) ;", "for ( int n = NUM_ ; n < leng ; n ++ ) {", "double d = NUM_ ;", "int upl = ( n >= nc ) ? nc - NUM_ : n ;", "for ( int k = NUM_ ; k <= upl ; k ++ ) d += k * c [ k ] * hh [ n - k ] ;", "hh [ n ] = d / n ; } }"]}
{"ids": "42294", "code": ["public void close ( ) {", "nc Guards = null ; }"]}
{"ids": "21450", "code": ["public void process Indication ( Hashtable < String , String > cim Notification ) {", "String cim Indication Type = get Cim Indication Type ( cim Notification ) ;", "if ( monitoring Properties Loader . is To Log Indications ( ) ) {", "logger . debug ( STR_ + get Indication Data ( cim Notification ) ) ; }", "if ( cim Indication Type != null && cim Indication Type . equals ( Cim Constants . CIM ALERT INDICATION TYPE ) ) {", "if ( monitoring Properties Loader . is To Log Indications ( ) ) {", "logger . debug ( STR_ ) ; }", "alert Processor . process Indication ( cim Notification ) ; }", "else if ( cim Indication Type != null && cim Indication Type . equals ( Cim Constants . CIM INST INDICATION TYPE ) ) {", "if ( monitoring Properties Loader . is To Log Indications ( ) ) {", "logger . debug ( STR_ ) ; }", "event Processor . process Indication ( cim Notification ) ; }", "else {", "if ( monitoring Properties Loader . is To Log Indications ( ) ) {", "logger . debug ( STR_ , cim Indication Type ) ; } } }"]}
{"ids": "69408", "code": ["public Replication Job create Job For Copy Table ( long audit Log Id , long audit Log Entry Create Time , Table table ) throws State Update Exception {", "Replication Operation replication Operation = Hive Utils . is Partitioned ( table ) ? Replication Operation . COPY PARTITIONED TABLE : Replication Operation . COPY UNPARTITIONED TABLE ;", "Map < String , String > extras = new Hash Map < > ( ) ;", "extras . put ( Persisted Job Info . AUDIT LOG ID EXTRAS KEY , Long . to String ( audit Log Id ) ) ;", "extras . put ( Persisted Job Info . AUDIT LOG ENTRY CREATE TIME KEY , Long . to String ( audit Log Entry Create Time ) ) ;", "Persisted Job Info persisted Job Info = job Info Store . resilient Create ( replication Operation , Replication Status . PENDING , Replication Utils . get Location ( table ) , src Cluster . get Name ( ) , new Hive Object Spec ( table ) , Collections . empty List ( ) , Replication Utils . get Tldt ( table ) , Optional . empty ( ) , Optional . empty ( ) , extras ) ;", "Hive Object Spec spec = new Hive Object Spec ( table ) ;", "Optional < Path > table Location = Replication Utils . get Location ( table ) ;", "switch ( replication Operation ) {", "case COPY UNPARTITIONED TABLE :", "return new Replication Job ( conf , new Copy Unpartitioned Table Task ( conf , destination Object Factory , object Conflict Handler , src Cluster , dest Cluster , spec , table Location , directory Copier , true ) , on State Change Handler , persisted Job Info ) ;", "case COPY PARTITIONED TABLE :", "return new Replication Job ( conf , new Copy Partitioned Table Task ( conf , destination Object Factory , object Conflict Handler , src Cluster , dest Cluster , spec , table Location ) , on State Change Handler , persisted Job Info ) ;", "default :", "throw new Runtime Exception ( STR_ + replication Operation ) ; } }"]}
{"ids": "58279", "code": ["synchronized public void release XML Reader ( XML Reader reader ) {", "if ( m reader Manager != null ) {", "m reader Manager . release XML Reader ( reader ) ; } }"]}
{"ids": "44588", "code": ["public int un Finish Size ( ) {", "return m Un Finish Queue . size ( ) ; }"]}
{"ids": "70533", "code": ["public void add Sample ( int weight , float value ) {", "ensure Sorted By Index ( ) ;", "Sample new Sample = recycled Sample Count > NUM_ ? recycled Samples [ -- recycled Sample Count ] : new Sample ( ) ;", "new Sample . index = next Sample Index ++ ;", "new Sample . weight = weight ;", "new Sample . value = value ;", "samples . add ( new Sample ) ;", "total Weight += weight ;", "while ( total Weight > max Weight ) {", "int excess Weight = total Weight - max Weight ;", "Sample oldest Sample = samples . get ( NUM_ ) ;", "if ( oldest Sample . weight <= excess Weight ) {", "total Weight -= oldest Sample . weight ;", "samples . remove ( NUM_ ) ;", "if ( recycled Sample Count < MAX RECYCLED SAMPLES ) {", "recycled Samples [ recycled Sample Count ++ ] = oldest Sample ; } }", "else {", "oldest Sample . weight -= excess Weight ;", "total Weight -= excess Weight ; } } }"]}
{"ids": "25080", "code": ["private void specialised Predicates ( ) {", "Double Predicate double Predicate = null ;", "Long Predicate long Predicate = null ; }"]}
{"ids": "2163", "code": ["private static final synchronized int next Pool Id ( ) {", "return ++ pool Number Sequence ; }"]}
{"ids": "40127", "code": ["public static boolean sec Key Verify ( byte [ ] seckey ) {", "Preconditions . check Argument ( seckey . length == NUM_ ) ;", "Byte Buffer byte Buff = native ECDSA Buffer . get ( ) ;", "if ( byte Buff == null || byte Buff . capacity ( ) < seckey . length ) {", "byte Buff = Byte Buffer . allocate Direct ( seckey . length ) ;", "byte Buff . order ( Byte Order . native Order ( ) ) ;", "native ECDSA Buffer . set ( byte Buff ) ; }", "byte Buff . rewind ( ) ;", "byte Buff . put ( seckey ) ;", "r . lock ( ) ;", "try {", "return secp 256 k 1 ec seckey verify ( byte Buff , Secp 256 k 1 Context . get Context ( ) ) == NUM_ ; }", "finally {", "r . unlock ( ) ; } }"]}
{"ids": "564", "code": ["public Tree Node Iterator ( Node root , boolean preorder ) {", "m preorder = preorder ;", "m root = root ;", "m stack = new Array List ( ) ;", "m stack . add ( root ) ;", "if ( ! preorder ) {", "for ( Node n = root . get Child ( NUM_ ) ; n != null ; n = n . get Child ( NUM_ ) ) m stack . add ( n ) ; } }"]}
{"ids": "6811", "code": ["public static Writable Native Array make Native Array ( List objects ) {", "Writable Native Array native Array = new Writable Native Array ( ) ;", "if ( objects == null ) {", "return native Array ; }", "for ( Object elem : objects ) {", "elem = make Native Object ( elem ) ;", "if ( elem == null ) {", "native Array . push Null ( ) ; }", "else if ( elem instanceof Boolean ) {", "native Array . push Boolean ( ( Boolean ) elem ) ; }", "else if ( elem instanceof Integer ) {", "native Array . push Int ( ( Integer ) elem ) ; }", "else if ( elem instanceof Double ) {", "native Array . push Double ( ( Double ) elem ) ; }", "else if ( elem instanceof String ) {", "native Array . push String ( ( String ) elem ) ; }", "else if ( elem instanceof Writable Native Array ) {", "native Array . push Array ( ( Writable Native Array ) elem ) ; }", "else if ( elem instanceof Writable Native Map ) {", "native Array . push Map ( ( Writable Native Map ) elem ) ; }", "else {", "throw new Illegal Argument Exception ( STR_ + elem . get Class ( ) ) ; } }", "return native Array ; }"]}
{"ids": "21140", "code": ["@ Override public void node Changed ( ) {", "log . info ( STR_ ) ;", "wakeup ( ) ; }"]}
{"ids": "36965", "code": ["private static Node Pair split Block ( final View view , final Function function , final Code Node node , final Instruction instruction ) {", "boolean before = true ;", "final List < Instruction > before Instructions = new Array List < Instruction > ( ) ;", "final List < Instruction > after Instructions = new Array List < Instruction > ( ) ;", "for ( final Instruction node Instruction : node . get Instructions ( ) ) {", "if ( before ) {", "before Instructions . add ( node Instruction ) ; }", "else {", "after Instructions . add ( node Instruction ) ; }", "if ( node Instruction == instruction ) {", "before = false ; } }", "if ( after Instructions . is Empty ( ) ) {", "return new Node Pair ( node , null ) ; }", "else {", "final Code Node first Node = view . create Code Node ( function , before Instructions ) ;", "final Code Node second Node = view . create Code Node ( function , after Instructions ) ;", "first Node . set Color ( node . get Color ( ) ) ;", "second Node . set Color ( DEFAULT BLOCK COLOR ) ;", "for ( final View Edge edge : node . get Incoming Edges ( ) ) {", "final View Edge new Edge = view . create Edge ( edge . get Source ( ) , first Node , edge . get Type ( ) ) ;", "new Edge . set Color ( edge . get Color ( ) ) ; }", "for ( final View Edge edge : node . get Outgoing Edges ( ) ) {", "final View Edge new Edge = view . create Edge ( second Node , edge . get Target ( ) , edge . get Type ( ) ) ;", "new Edge . set Color ( edge . get Color ( ) ) ; }", "view . delete Node ( node ) ;", "return new Node Pair ( first Node , second Node ) ; } }"]}
{"ids": "39848", "code": ["public Pair < String , String > object To String ( final long shop Id , final String currency , final Big Decimal regular Price ) {", "return new Pair < String , String > ( STR_ + shop Id + STR_ + currency , money Bridge . object To String ( regular Price ) ) ; }"]}
{"ids": "45237", "code": ["public String read Line ( ) throws IO Exception {", "String Builder line = new String Builder ( ) ;", "int i ;", "char c ;", "i = read ( ) ;", "if ( i == - NUM_ ) return null ;", "while ( i > - NUM_ && i != STR_ && i != STR_ ) {", "c = ( char ) ( i & NUM_ ) ;", "line = line . append ( c ) ;", "i = read ( ) ; }", "if ( i == STR_ ) {", "if ( ( i = read ( ) ) != STR_ ) throw new IO Exception ( STR_ + Integer . to Hex String ( i ) + STR_ + line ) ; }", "return line . to String ( ) ; }"]}
{"ids": "74112", "code": ["static public void force Creation Of New Index ( ) {", "force Creation Of New Index ( false ) ; }"]}
{"ids": "50076", "code": ["public Frame Block zero Out Operations ( Frame Block result , Index Range range , boolean complementary , int i Row Start Src , int i Row Start Dest , int brlen , int i Max Rows To Copy ) throws DML Runtime Exception {", "int clen = get Num Columns ( ) ;", "if ( result == null ) result = new Frame Block ( get Schema ( ) ) ;", "else {", "result . reset ( NUM_ , true ) ;", "result . set Schema ( get Schema ( ) ) ; }", "result . ensure Allocated Columns ( brlen ) ;", "if ( complementary ) {", "for ( int r = ( int ) range . row Start ; r <= range . row End && r + i Row Start Dest < brlen ; r ++ ) {", "for ( int c = ( int ) range . col Start ; c <= range . col End ; c ++ ) result . set ( r + i Row Start Dest , c , get ( r + i Row Start Src , c ) ) ; } }", "else {", "int r = i Row Start Dest ;", "for ( ; r < ( int ) range . row Start && r - i Row Start Dest < i Max Rows To Copy ; r ++ ) for ( int c = NUM_ ; c < clen ; c ++ ) result . set ( r , c , get ( r + i Row Start Src - i Row Start Dest , c ) ) ;", "for ( ; r <= ( int ) range . row End && r - i Row Start Dest < i Max Rows To Copy ; r ++ ) {", "for ( int c = NUM_ ; c < ( int ) range . col Start ; c ++ ) result . set ( r , c , get ( r + i Row Start Src - i Row Start Dest , c ) ) ;", "for ( int c = ( int ) range . col End + NUM_ ; c < clen ; c ++ ) result . set ( r , c , get ( r + i Row Start Src - i Row Start Dest , c ) ) ; }", "for ( ; r - i Row Start Dest < i Max Rows To Copy ; r ++ ) for ( int c = NUM_ ; c < clen ; c ++ ) result . set ( r , c , get ( r + i Row Start Src - i Row Start Dest , c ) ) ; }", "return result ; }"]}
{"ids": "79135", "code": ["public Signal Barrier ( ) {", "owner = null ; }"]}
{"ids": "64811", "code": ["private static float [ ] normalize ( float [ ] coefficients ) {", "float accumulator = NUM_ ;", "for ( int x = NUM_ ; x < coefficients . length ; x ++ ) {", "accumulator += Math . abs ( coefficients [ x ] ) ; }", "for ( int x = NUM_ ; x < coefficients . length ; x ++ ) {", "coefficients [ x ] = coefficients [ x ] / accumulator ; }", "return coefficients ; }"]}
{"ids": "53616", "code": ["protected void print Track ( Track track ) {", "Default Entity View Info v Info = ( Default Entity View Info ) track . get View Info ( ) ;", "tmp Node Buffer . clear ( ) ;", "tmp Node Buffer . add All ( track . get Nodes ( ) ) ;", "if ( ! tmp Node Buffer . is Empty ( ) ) {", "print Line ( image Bdr , tmp Node Buffer , v Info , false , false , null ) ;", "print Point ( image Bdr , tmp Node Buffer . get ( tmp Node Buffer . size ( ) - NUM_ ) , v Info , null ) ; } }"]}
{"ids": "16070", "code": ["private Period Formatter Builder append Suffix ( Period Field Affix suffix ) {", "final Object original Printer ;", "final Object original Parser ;", "if ( i Element Pairs . size ( ) > NUM_ ) {", "original Printer = i Element Pairs . get ( i Element Pairs . size ( ) - NUM_ ) ;", "original Parser = i Element Pairs . get ( i Element Pairs . size ( ) - NUM_ ) ; }", "else {", "original Printer = null ;", "original Parser = null ; }", "if ( original Printer == null || original Parser == null || original Printer != original Parser || ! ( original Printer instanceof Field Formatter ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "clear Prefix ( ) ;", "Field Formatter new Field = new Field Formatter ( ( Field Formatter ) original Printer , suffix ) ;", "i Element Pairs . set ( i Element Pairs . size ( ) - NUM_ , new Field ) ;", "i Element Pairs . set ( i Element Pairs . size ( ) - NUM_ , new Field ) ;", "i Field Formatters [ new Field . get Field Type ( ) ] = new Field ;", "return this ; }"]}
{"ids": "30140", "code": ["public Collection < Cube > all ( ) {", "return Collections . unmodifiable Collection ( cubes ) ; }"]}
{"ids": "35229", "code": ["public static short read U Byte ( Byte Buffer buffer ) {", "byte b = buffer . get ( ) ;", "return ( short ) ( b & NUM_ ) ; }"]}
{"ids": "130", "code": ["public static double most Toxic Row ( Gate g ) {", "return Collections . min ( g . get toxicity ( ) ) ; }"]}
{"ids": "79938", "code": ["public Multi Server ( ) {", "this ( Network Config . DEFAULT TCP PORT , Network Config . DEFAULT UDP PORT ) ; }"]}
{"ids": "23088", "code": ["protected String url String ( ) throws Parse Exception {", "String Buffer retval = new String Buffer ( ) ;", "lexer . select Lexer ( STR_ ) ;", "while ( lexer . has More Chars ( ) ) {", "char la = lexer . look Ahead ( NUM_ ) ;", "if ( la == STR_ || la == STR_ || la == STR_ || la == STR_ || la == STR_ ) break ;", "lexer . consume ( NUM_ ) ;", "retval . append ( la ) ; }", "return retval . to String ( ) ; }"]}
{"ids": "12076", "code": ["public Xml Element ( byte [ ] encoded Document ) {", "if ( encoded Document == null ) throw new Illegal Argument Exception ( STR_ ) ;", "this . encoded = encoded Document . clone ( ) ; }"]}
{"ids": "23462", "code": ["public void add ( int position , int height ) {", "int curr Height = m Map . get ( position , - NUM_ ) ;", "if ( curr Height != height ) {", "if ( curr Height == - NUM_ ) {", "if ( m Map . size ( ) == m Max Size ) {", "m Map . delete ( m Order . remove ( NUM_ ) ) ; } }", "else {", "m Order . remove ( ( Integer ) position ) ; }", "m Map . put ( position , height ) ;", "m Order . add ( position ) ; } }"]}
{"ids": "22039", "code": ["@ GET @ Path ( STR_ ) @ Produces ( { Media Type . APPLICATION XML , Media Type . APPLICATION JSON } ) @ Check Permission ( roles = { Role . SECURITY ADMIN } ) public OS Tenant List Rest Rep list Coprhd Os Tenants ( ) {", "log . debug ( STR_ ) ;", "List < OS Tenant > tenants = get Os Tenants From Coprhd Db ( ) ;", "return map ( tenants ) ; }"]}
{"ids": "17003", "code": ["public int read ( final byte [ ] data ) {", "init ( ) ;", "if ( data != null ) {", "raw Data = Byte Buffer . wrap ( data ) ;", "raw Data . rewind ( ) ;", "raw Data . order ( Byte Order . LITTLE ENDIAN ) ;", "read Header ( ) ;", "if ( ! err ( ) ) {", "read Contents ( ) ;", "if ( frame Count < NUM_ ) {", "status = STATUS FORMAT ERROR ; } } }", "else {", "status = STATUS OPEN ERROR ; }", "return status ; }"]}
{"ids": "78945", "code": ["private void calculate Unique Value ( Object [ ] min Value , Object [ ] unique Value ) {", "for ( int i = NUM_ ; i < measure Count ; i ++ ) {", "if ( type [ i ] == Carbon Common Constants . BIG INT MEASURE ) {", "unique Value [ i ] = ( long ) min Value [ i ] - NUM_ ; }", "else if ( type [ i ] == Carbon Common Constants . BIG DECIMAL MEASURE ) {", "Big Decimal val = ( Big Decimal ) min Value [ i ] ;", "unique Value [ i ] = ( val . subtract ( new Big Decimal ( NUM_ ) ) ) ; }", "else {", "unique Value [ i ] = ( double ) min Value [ i ] - NUM_ ; } } }"]}
{"ids": "9852", "code": ["@ Request Mapping ( value = STR_ ) public void sso Binding Error ( Locale locale , @ Path Variable ( value = STR_ ) String tenant , Http Servlet Response response ) throws IO Exception {", "logger . info ( STR_ + locale . to String ( ) + STR_ + tenant ) ;", "sso Default Tenant Binding Error ( locale , response ) ; }"]}
{"ids": "28683", "code": ["public long env end ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "41769", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return STRINGS ;", "case NUM_ :", "return HELLO ;", "default :", "return null ; } }"]}
{"ids": "9940", "code": ["public X 509 Trust Chain Key Selector ( X 509 Certificate ... trusted Roots ) {", "log = Logger Factory . get Logger ( X 509 Trust Chain Key Selector . class ) ;", "check Ctor Args Not Null ( trusted Roots ) ;", "trust Anchors = new Hash Set < Trust Anchor > ( ) ;", "for ( X 509 Certificate cert : trusted Roots ) {", "trust Anchors . add ( new Trust Anchor ( cert , null ) ) ; } }"]}
{"ids": "13033", "code": ["@ Override public void remove Attribute NS ( String namespace URI , String local Name ) {", "if ( owner Document . error Checking && is Read Only ( ) ) {", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . DOM DOMAIN , STR_ , null ) ;", "throw new DOM Exception ( DOM Exception . NO MODIFICATION ALLOWED ERR , msg ) ; }", "if ( needs Sync Data ( ) ) {", "synchronize Data ( ) ; }", "if ( attributes == null ) {", "return ; }", "attributes . safe Remove Named Item NS ( namespace URI , local Name ) ; }"]}
{"ids": "47968", "code": ["public boolean draw Image ( Image img , Affine Transform xform , Image Observer obs ) {", "if ( img == null ) {", "return true ; }", "boolean result ;", "int src Width = img . get Width ( null ) ;", "int src Height = img . get Height ( null ) ;", "if ( src Width < NUM_ || src Height < NUM_ ) {", "result = false ; }", "else {", "result = draw Image To Platform ( img , xform , null , NUM_ , NUM_ , src Width , src Height , false ) ; }", "return result ; }"]}
{"ids": "13904", "code": ["public void handle Button 1 Request ( Request Invocation Event event ) throws Model Control Exception {", "Server Site Model model = ( Server Site Model ) get Model ( ) ;", "AM Property Sheet ps = ( AM Property Sheet ) get Child ( PROPERTY ATTRIBUTE ) ;", "String server Name = ( String ) get Page Session Attribute ( PG ATTR SERVER NAME ) ;", "String name = ( String ) get Display Field Value ( TF NAME ) ;", "name = name . trim ( ) ;", "if ( name . length ( ) > NUM_ ) {", "try {", "model . clone Server ( server Name , name ) ;", "back Trail ( ) ;", "Server Site View Bean vb = ( Server Site View Bean ) get View Bean ( Server Site View Bean . class ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ;", "forward To ( ) ; } }", "else {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , STR_ ) ;", "forward To ( ) ; } }"]}
{"ids": "43604", "code": ["public static < TK , FV > Feature Value Collection < FV > combine ( Derivation < TK , FV > hyp ) {", "Counter < FV > counter = new Classic Counter < FV > ( ) ;", "for ( ; hyp != null ; hyp = hyp . parent ) {", "if ( hyp . features != null ) {", "for ( Feature Value < FV > feature : hyp . features ) {", "counter . increment Count ( feature . name , feature . value ) ; } } }", "Set < FV > feature Names = new Tree Set < FV > ( counter . key Set ( ) ) ;", "Feature Value Collection < FV > combined List = new Feature Value List < FV > ( feature Names . size ( ) ) ;", "for ( FV feature : feature Names ) {", "combined List . add ( new Feature Value < FV > ( feature , counter . get Count ( feature ) ) ) ; }", "return combined List ; }"]}
{"ids": "74482", "code": ["public void send Titles ( ) {", "if ( listeners == null ) {", "return ; }", "String Builder labels = new String Builder ( STR_ ) ;", "labels . append ( STR_ + Bundle . get Message ( STR_ ) + STR_ ) ;", "labels . append ( STR_ + manager . get Closed Text ( ) + STR_ ) ;", "labels . append ( STR_ + manager . get Thrown Text ( ) + STR_ ) ;", "String message = labels . to String ( ) ;", "for ( Controller Interface listener : listeners ) {", "listener . send Packet To Device ( message ) ; } }"]}
{"ids": "33572", "code": ["public static void close Session ( ) throws Hibernate Exception {", "Session session = ( Session ) thread Local . get ( ) ;", "thread Local . set ( null ) ;", "if ( session != null ) {", "session . close ( ) ; } }"]}
{"ids": "82357", "code": ["protected Calendar ( ) {", "zone = Time Zone . get Default ( ) ;", "fields = new int [ FIELD COUNT ] ;", "is Set = new boolean [ FIELD COUNT ] ;", "are Fields Set = is Time Set = false ;", "set Time In Millis ( System . current Time Millis ( ) ) ; }"]}
{"ids": "52274", "code": ["private Point Pair calculate Edge ( Component comp 1 , Component comp 2 ) {", "Rectangle r 1 = comp 1 . get Bounds ( ) ;", "Rectangle r 2 = comp 2 . get Bounds ( ) ;", "Point c 1 = new Point ( ( int ) ( r 1 . x + r 1 . width / NUM_ ) , ( int ) ( r 1 . y + r 1 . height / NUM_ ) ) ;", "Point c 2 = new Point ( ( int ) ( r 2 . x + r 2 . width / NUM_ ) , ( int ) ( r 2 . y + r 2 . height / NUM_ ) ) ;", "double angle = Math . atan 2 ( c 1 . y - c 2 . y , c 1 . x - c 2 . x ) ;", "angle += Math . PI / NUM_ ;", "Point d = new Point ( ( int ) ( offset * Math . cos ( angle ) ) , ( int ) ( offset * Math . sin ( angle ) ) ) ;", "c 1 . translate ( d . x , d . y ) ;", "c 2 . translate ( d . x , d . y ) ;", "Point p 1 = get Boundary Intersection ( comp 1 , c 1 , c 2 ) ;", "Point p 2 = get Boundary Intersection ( comp 2 , c 2 , c 1 ) ;", "if ( ( p 1 == null ) || ( p 2 == null ) ) {", "c 1 = new Point ( ( int ) ( r 1 . x + r 1 . width / NUM_ ) , ( int ) ( r 1 . y + r 1 . height / NUM_ ) ) ;", "c 2 = new Point ( ( int ) ( r 2 . x + r 2 . width / NUM_ ) , ( int ) ( r 2 . y + r 2 . height / NUM_ ) ) ;", "p 1 = get Boundary Intersection ( comp 1 , c 1 , c 2 ) ;", "p 2 = get Boundary Intersection ( comp 2 , c 2 , c 1 ) ; }", "if ( ( p 1 == null ) || ( p 2 == null ) ) {", "return null ; }", "return new Point Pair ( p 1 , p 2 ) ; }"]}
{"ids": "58180", "code": ["public static boolean is XML 11 Space ( int c ) {", "return ( c < NUM_ && ( XML 11 CHARS [ c ] & MASK XML 11 SPACE ) != NUM_ ) ; }"]}
{"ids": "332", "code": ["public void unregister Player Listener ( Cheerleader Player Listener listener ) {", "check State ( ) ;", "m Cheerleader Player Listeners . remove ( listener ) ; }"]}
{"ids": "68956", "code": ["public Output Stream open Output Stream ( Uri uri , boolean append ) throws IO Exception {", "assert Background Thread ( ) ;", "switch ( get Uri Type ( uri ) ) {", "case URI TYPE FILE : {", "File local File = new File ( uri . get Path ( ) ) ;", "File parent = local File . get Parent File ( ) ;", "if ( parent != null ) {", "parent . mkdirs ( ) ; }", "return new File Output Stream ( local File , append ) ; }", "case URI TYPE CONTENT :", "case URI TYPE RESOURCE : {", "Asset File Descriptor asset Fd = content Resolver . open Asset File Descriptor ( uri , append ? STR_ : STR_ ) ;", "return asset Fd . create Output Stream ( ) ; } }", "throw new File Not Found Exception ( STR_ + uri ) ; }"]}
{"ids": "56734", "code": ["protected Integer adjust Integer Value ( Integer orig Value , Integer min Value , Integer max Value ) {", "Integer result Value = orig Value ;", "if ( result Value . compare To ( min Value ) < NUM_ ) {", "result Value = min Value ; }", "if ( result Value . compare To ( max Value ) > NUM_ ) {", "result Value = max Value ; }", "return result Value ; }"]}
{"ids": "5159", "code": ["private void init Paints ( Resources res ) {", "final String month Typeface = res . get String ( R . string . date picker month typeface ) ;", "final String day Of Week Typeface = res . get String ( R . string . date picker day of week typeface ) ;", "final String day Typeface = res . get String ( R . string . date picker day typeface ) ;", "final int month Text Size = res . get Dimension Pixel Size ( R . dimen . date picker month text size ) ;", "final int day Of Week Text Size = res . get Dimension Pixel Size ( R . dimen . date picker day of week text size ) ;", "final int day Text Size = res . get Dimension Pixel Size ( R . dimen . date picker day text size ) ;", "m Month Paint . set Anti Alias ( true ) ;", "m Month Paint . set Text Size ( month Text Size ) ;", "m Month Paint . set Typeface ( Typeface . create ( month Typeface , NUM_ ) ) ;", "m Month Paint . set Text Align ( Align . CENTER ) ;", "m Month Paint . set Style ( Style . FILL ) ;", "m Day Of Week Paint . set Anti Alias ( true ) ;", "m Day Of Week Paint . set Text Size ( day Of Week Text Size ) ;", "m Day Of Week Paint . set Typeface ( Typeface . create ( day Of Week Typeface , NUM_ ) ) ;", "m Day Of Week Paint . set Text Align ( Align . CENTER ) ;", "m Day Of Week Paint . set Style ( Style . FILL ) ;", "m Day Selector Paint . set Anti Alias ( true ) ;", "m Day Selector Paint . set Style ( Style . FILL ) ;", "m Day Highlight Paint . set Anti Alias ( true ) ;", "m Day Highlight Paint . set Style ( Style . FILL ) ;", "m Day Paint . set Anti Alias ( true ) ;", "m Day Paint . set Text Size ( day Text Size ) ;", "m Day Paint . set Typeface ( Typeface . create ( day Typeface , NUM_ ) ) ;", "m Day Paint . set Text Align ( Align . CENTER ) ;", "m Day Paint . set Style ( Style . FILL ) ; }"]}
{"ids": "26685", "code": ["public int size ( ) {", "return rules . size ( ) ; }"]}
{"ids": "26947", "code": ["private void copy Arrays ( ) {", "String [ ] old Syms = symbols ;", "int size = old Syms . length ;", "symbols = new String [ size ] ;", "System . arraycopy ( old Syms , NUM_ , symbols , NUM_ , size ) ;", "Bucket [ ] old Buckets = buckets ;", "size = old Buckets . length ;", "buckets = new Bucket [ size ] ;", "System . arraycopy ( old Buckets , NUM_ , buckets , NUM_ , size ) ; }"]}
{"ids": "62965", "code": ["@ Procedure @ Performs Writes @ Description ( STR_ ) public Stream < Relationship Refactor Result > from ( @ Name ( STR_ ) Relationship rel , @ Name ( STR_ ) Node new Node ) {", "Relationship Refactor Result result = new Relationship Refactor Result ( rel . get Id ( ) ) ;", "try {", "Relationship new Rel = new Node . create Relationship To ( rel . get End Node ( ) , rel . get Type ( ) ) ;", "copy Properties ( rel , new Rel ) ;", "rel . delete ( ) ;", "return Stream . of ( result . with Other ( new Rel ) ) ; }", "catch ( Exception e ) {", "return Stream . of ( result . with Error ( e ) ) ; } }"]}
{"ids": "51560", "code": ["public static long max Fill ( final long n , final float f ) {", "return Math . min ( ( long ) Math . ceil ( n * f ) , n - NUM_ ) ; }"]}
{"ids": "32851", "code": ["public static void print ( char x ) {", "out . print ( x ) ;", "out . flush ( ) ; }"]}
{"ids": "73312", "code": ["public void clear Source Elements ( ) {", "for ( P Node node : source Elements ) {", "Source Handle . remove Source Handle From ( node ) ; }", "source Elements . clear ( ) ;", "selection Model . fire Selection Changed ( ) ; }"]}
{"ids": "83368", "code": ["public static double [ ] [ ] read Matrix ( int number Of Rows , int number Of Columns , boolean ignore First Line , String file Name ) {", "double [ ] [ ] matrix = new double [ number Of Rows ] [ number Of Columns ] ;", "try {", "File Reader fr = new File Reader ( file Name ) ;", "Buffered Reader br = new Buffered Reader ( fr ) ;", "String line ;", "String Tokenizer tokenizer ;", "String token ;", "if ( ignore First Line ) {", "br . read Line ( ) ; }", "line = br . read Line ( ) ;", "int row Id = NUM_ ;", "while ( line != null ) {", "tokenizer = new String Tokenizer ( line ) ;", "for ( int i = NUM_ ; i < number Of Columns ; i ++ ) {", "token = tokenizer . next Token ( ) ;", "double parsed Number = Double . parse Double ( token ) ;", "matrix [ row Id ] [ i ] = parsed Number ; }", "if ( tokenizer . has More Tokens ( ) ) {", "throw new Runtime Exception ( STR_ ) ; }", "line = br . read Line ( ) ;", "row Id ++ ; }", "if ( row Id != number Of Rows ) {", "throw new Runtime Exception ( STR_ ) ; } }", "catch ( Runtime Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Runtime Exception ( STR_ ) ; }", "return matrix ; }"]}
{"ids": "12727", "code": ["@ Override protected boolean read Into Buffer ( int min Length ) {", "if ( buffer Space Left ( ) < min Length ) {", "increase Buffer Size ( min Length + currently In Buffer ( ) ) ; }", "else if ( buf . length - write Pos < min Length ) {", "compact ( ) ; }", "int read Sum = NUM_ ;", "while ( read Sum < min Length && ! datagrams . is Empty ( ) ) {", "Datagram next = datagrams . remove First ( ) ;", "int length = ( int ) next . get Duration ( ) ;", "if ( buf . length < write Pos + length ) {", "increase Buffer Size ( write Pos + length ) ; }", "int read = read Datagram ( next , buf , write Pos ) ;", "write Pos += read ;", "read Sum += read ; }", "if ( data Processor != null ) {", "data Processor . apply Inline ( buf , write Pos - read Sum , read Sum ) ; }", "return read Sum >= min Length ; }"]}
{"ids": "15864", "code": ["private int height Of Phi ( int Phi ) {", "if ( Phi == NUM_ ) {", "return - NUM_ ; }", "int Tau = NUM_ ;", "int modul = NUM_ ;", "while ( Phi % modul == NUM_ ) {", "modul *= NUM_ ;", "Tau += NUM_ ; }", "return Tau - NUM_ ; }"]}
{"ids": "303", "code": ["@ Not Null public Clarifai Client build Sync ( ) {", "return new Clarifai Client Impl ( this ) ; }"]}
{"ids": "65119", "code": ["public void mouse Released ( Mouse Event e ) {", "Visualization Viewer < ? , ? > vv = ( Visualization Viewer < ? , ? > ) e . get Source ( ) ;", "down = null ;", "vv . set Cursor ( Cursor . get Predefined Cursor ( Cursor . DEFAULT CURSOR ) ) ; }"]}
{"ids": "31898", "code": ["@ Nullable public static Class < ? > class For Name ( @ Nullable String cls , @ Nullable Class < ? > dflt , boolean include Primitive Types ) {", "Class < ? > clazz ;", "if ( cls == null ) clazz = dflt ;", "else if ( ! include Primitive Types || cls . length ( ) > NUM_ || ( clazz = primitive Map . get ( cls ) ) == null ) {", "try {", "clazz = Class . for Name ( cls ) ; }", "catch ( Class Not Found Exception ignore ) {", "clazz = dflt ; } }", "return clazz ; }"]}
{"ids": "12241", "code": ["public String check Write Protected ( int res Id Action , final File ... files To Be Modified ) {", "if ( files To Be Modified != null ) {", "for ( File file : files To Be Modified ) {", "if ( ( file != null ) && ( file . exists ( ) ) && ( ! file . can Write ( ) ) ) {", "String action = ( res Id Action == NUM_ ) ? STR_ : m Context . get String ( res Id Action ) ;", "return m Context . get String ( R . string . file err writeprotected , file . get Absolute Path ( ) , action ) ; } } }", "return null ; }"]}
{"ids": "60378", "code": ["@ Not Null @ Contract ( pure = true ) public static String strip ( @ Not Null final String s , @ Not Null final Char Filter filter ) {", "final String Builder result = new String Builder ( s . length ( ) ) ;", "for ( int i = NUM_ ; i < s . length ( ) ; i ++ ) {", "char ch = s . char At ( i ) ;", "if ( filter . accept ( ch ) ) {", "result . append ( ch ) ; } }", "return result . to String ( ) ; }"]}
{"ids": "13292", "code": ["protected void add Component ( XML Component component ) {", "if ( f Components . contains ( component ) ) {", "return ; }", "f Components . add ( component ) ;", "add Recognized Params And Set Defaults ( component ) ; }"]}
{"ids": "54602", "code": ["public void clear ( I Validatable bean ) {", "for ( Binding b : opt Components . values ( ) ) {", "b . clear ( bean ) ; }", "for ( Binding b : bindings . values ( ) ) {", "b . clear ( bean ) ; }", "modified = false ; }"]}
{"ids": "14061", "code": ["public boolean has Credentials ( ) {", "return has Credentials ; }"]}
{"ids": "61162", "code": ["public boolean is Recursive Attr Set ( Elem Attribute Set attr Set ) {", "if ( null == m attr Set Stack ) {", "m attr Set Stack = new Stack ( ) ; }", "if ( ! m attr Set Stack . empty ( ) ) {", "int loc = m attr Set Stack . search ( attr Set ) ;", "if ( loc > - NUM_ ) {", "return true ; } }", "return false ; }"]}
{"ids": "25954", "code": ["public void clear ( Absolute Table Identifier absolute Table Identifier ) {", "table Lock Map . remove ( absolute Table Identifier ) ;", "table Segment Map . remove ( absolute Table Identifier ) ; }"]}
{"ids": "2539", "code": ["public static Input Stream to Input Stream ( Char Sequence input ) {", "return to Input Stream ( input . to String ( ) ) ; }"]}
{"ids": "54521", "code": ["@ Override public void process ( Number tuple ) {", "values . add ( tuple . double Value ( ) ) ; }"]}
{"ids": "14821", "code": ["public void grant Write Permission ( Collection attribute Names ) {", "Iterator it = attribute Names . iterator ( ) ;", "if ( it != null ) {", "while ( it . has Next ( ) ) {", "String temp = ( String ) it . next ( ) ;", "writables . add ( temp . to Lower Case ( ) ) ; } } }"]}
{"ids": "26737", "code": ["public void save Data ( File file ) throws IO Exception {", "synchronized ( accumulators ) {", "Object Output Stream oos = null ;", "try {", "oos = new Object Output Stream ( new File Output Stream ( file ) ) ;", "oos . write Object ( accumulators ) ; }", "finally {", "if ( oos != null ) {", "oos . close ( ) ; } } } }"]}
{"ids": "64454", "code": ["public static Ingredient from Cursor ( Cursor cursor ) {", "Ingredient ingredient = new Ingredient ( ) ;", "for ( int c = NUM_ ; c < cursor . get Column Count ( ) ; c ++ ) {", "String column Name = cursor . get Column Name ( c ) ;", "if ( column Name . equals ( Recipe Ingredient Table . AMOUNT COLUMN ) ) {", "ingredient . set Amount ( cursor . get String ( c ) ) ; }", "else if ( column Name . equals ( Recipe Ingredient Table . DESCRIPTION COLUMN ) ) {", "ingredient . set Description ( cursor . get String ( c ) ) ; } }", "return ingredient ; }"]}
{"ids": "1138", "code": ["public void append ( char c [ ] , int off , int len ) {", "int rest Length = buffer . length - pos ;", "if ( len < rest Length ) {", "System . arraycopy ( c , off , buffer , pos , len ) ;", "pos += len ; }", "else {", "System . arraycopy ( c , off , buffer , pos , rest Length ) ;", "curr . next = new Entity ( buffer ) ;", "curr = curr . next ;", "length += buffer . length ;", "buffer = new char [ ( buffer . length > len - rest Length ) ? buffer . length : len - rest Length ] ;", "System . arraycopy ( c , off + rest Length , buffer , NUM_ , len - rest Length ) ;", "pos = len - rest Length ; } }"]}
{"ids": "12608", "code": ["public boolean contains ( String voice Name ) {", "return ( get Voice ( voice Name ) != null ) ; }"]}
{"ids": "71377", "code": ["public static boolean is Enterprise Edition ( String server Version ) {", "return server Version . contains ( STR_ ) || server Version . contains ( STR_ ) || server Version . contains ( STR_ ) ; }"]}
{"ids": "7614", "code": ["@ Override public Category Item Renderer State initialise ( Graphics 2 D g 2 , Rectangle 2 D data Area , Category Plot plot , int renderer Index , Plot Rendering Info info ) {", "Category Item Renderer State state = super . initialise ( g 2 , data Area , plot , renderer Index , info ) ;", "Category Axis domain Axis = get Domain Axis ( plot , renderer Index ) ;", "Category Dataset dataset = plot . get Dataset ( renderer Index ) ;", "if ( dataset != null ) {", "int columns = dataset . get Column Count ( ) ;", "int rows = dataset . get Row Count ( ) ;", "double space = NUM_ ;", "Plot Orientation orientation = plot . get Orientation ( ) ;", "if ( orientation == Plot Orientation . HORIZONTAL ) {", "space = data Area . get Height ( ) ; }", "else if ( orientation == Plot Orientation . VERTICAL ) {", "space = data Area . get Width ( ) ; }", "double max Width = space * get Maximum Bar Width ( ) ;", "double category Margin = NUM_ ;", "double current Item Margin = NUM_ ;", "if ( columns > NUM_ ) {", "category Margin = domain Axis . get Category Margin ( ) ; }", "if ( rows > NUM_ ) {", "current Item Margin = get Item Margin ( ) ; }", "double used = space * ( NUM_ - domain Axis . get Lower Margin ( ) - domain Axis . get Upper Margin ( ) - category Margin - current Item Margin ) ;", "if ( ( rows * columns ) > NUM_ ) {", "state . set Bar Width ( Math . min ( used / ( dataset . get Column Count ( ) * dataset . get Row Count ( ) ) , max Width ) ) ; }", "else {", "state . set Bar Width ( Math . min ( used , max Width ) ) ; } }", "return state ; }"]}
{"ids": "33713", "code": ["public static boolean create Folder ( @ Suppress Warnings ( STR_ ) Context m Context , String path , String folder Name ) {", "File SD Card Root = new File ( path , folder Name ) ;", "if ( ! SD Card Root . exists ( ) ) {", "return SD Card Root . mkdir ( ) ; }", "return false ; }"]}
{"ids": "35819", "code": ["private static NS Object parse Object ( Node n ) throws Parse Exception , IO Exception {", "String type = n . get Node Name ( ) ;", "if ( type . equals ( STR_ ) ) {", "NS Dictionary dict = new NS Dictionary ( ) ;", "List < Node > children = filter Element Nodes ( n . get Child Nodes ( ) ) ;", "for ( int i = NUM_ ; i < children . size ( ) ; i += NUM_ ) {", "Node key = children . get ( i ) ;", "Node val = children . get ( i + NUM_ ) ;", "String key String = get Node Text Contents ( key ) ;", "dict . put ( key String , parse Object ( val ) ) ; }", "return dict ; }", "else if ( type . equals ( STR_ ) ) {", "List < Node > children = filter Element Nodes ( n . get Child Nodes ( ) ) ;", "NS Array array = new NS Array ( children . size ( ) ) ;", "for ( int i = NUM_ ; i < children . size ( ) ; i ++ ) {", "array . set Value ( i , parse Object ( children . get ( i ) ) ) ; }", "return array ; }", "else if ( type . equals ( STR_ ) ) {", "return new NS Number ( true ) ; }", "else if ( type . equals ( STR_ ) ) {", "return new NS Number ( false ) ; }", "else if ( type . equals ( STR_ ) ) {", "return new NS Number ( get Node Text Contents ( n ) ) ; }", "else if ( type . equals ( STR_ ) ) {", "return new NS Number ( get Node Text Contents ( n ) ) ; }", "else if ( type . equals ( STR_ ) ) {", "return new NS String ( get Node Text Contents ( n ) ) ; }", "else if ( type . equals ( STR_ ) ) {", "return new NS Data ( get Node Text Contents ( n ) ) ; }", "else if ( type . equals ( STR_ ) ) {", "return new NS Date ( get Node Text Contents ( n ) ) ; }", "return null ; }"]}
{"ids": "31545", "code": ["Lua String load String ( ) throws IO Exception {", "int size = this . luac Sizeof Size T == NUM_ ? ( int ) load Int 64 ( ) : load Int ( ) ;", "if ( size == NUM_ ) return null ;", "byte [ ] bytes = new byte [ size ] ;", "is . read Fully ( bytes , NUM_ , size ) ;", "return Lua String . value Of ( bytes , NUM_ , bytes . length - NUM_ ) ; }"]}
{"ids": "47268", "code": ["protected Abstract Preferences ( Abstract Preferences parent , String name ) {", "if ( parent == null ) {", "if ( ! name . equals ( STR_ ) ) throw new Illegal Argument Exception ( STR_ + name + STR_ ) ;", "this . absolute Path = STR_ ;", "root = this ; }", "else {", "if ( name . index Of ( STR_ ) != - NUM_ ) throw new Illegal Argument Exception ( STR_ + name + STR_ ) ;", "if ( name . equals ( STR_ ) ) throw new Illegal Argument Exception ( STR_ ) ;", "root = parent . root ;", "absolute Path = ( parent == root ? STR_ + name : parent . absolute Path ( ) + STR_ + name ) ; }", "this . name = name ;", "this . parent = parent ; }"]}
{"ids": "47889", "code": ["static Class < ? > canonicalize ( Class < ? > t , int how ) {", "Class < ? > ct ;", "if ( t == Object . class ) { }", "else if ( ! t . is Primitive ( ) ) {", "switch ( how ) {", "case UNWRAP :", "ct = Wrapper . as Primitive Type ( t ) ;", "if ( ct != t ) return ct ;", "break ;", "case RAW RETURN :", "case ERASE :", "return Object . class ; } }", "else if ( t == void . class ) {", "switch ( how ) {", "case RAW RETURN :", "return int . class ;", "case WRAP :", "return Void . class ; } }", "else {", "switch ( how ) {", "case WRAP :", "return Wrapper . as Wrapper Type ( t ) ;", "case INTS :", "if ( t == int . class || t == long . class ) return null ;", "if ( t == double . class ) return long . class ;", "return int . class ;", "case LONGS :", "if ( t == long . class ) return null ;", "return long . class ;", "case RAW RETURN :", "if ( t == int . class || t == long . class || t == float . class || t == double . class ) return null ;", "return int . class ; } }", "return null ; }"]}
{"ids": "10948", "code": ["protected String extract Substring ( String psz Src ) {", "int n Bracket = NUM_ ;", "int i ;", "String psz Return ;", "for ( i = NUM_ ; i < psz Src . length ( ) && ( n Bracket > NUM_ || psz Src . char At ( i ) != STR_ ) ; i ++ ) {", "if ( psz Src . char At ( i ) == STR_ ) {", "n Bracket ++ ; }", "else if ( psz Src . char At ( i ) == STR_ ) {", "n Bracket -- ; } }", "if ( psz Src . char At ( NUM_ ) == STR_ ) {", "psz Return = psz Src . substring ( NUM_ , i - NUM_ ) ; }", "else {", "psz Return = psz Src . substring ( NUM_ , i ) ; }", "return psz Return ; }"]}
{"ids": "29423", "code": ["public void read ( Appendable dest ) throws IO Exception {", "if ( input Stream == null ) throw new IO Exception ( STR_ ) ;", "while ( true ) {", "if ( start >= end ) {", "start = NUM_ ;", "end = input Stream . read ( bytes , NUM_ , bytes . length ) ;", "if ( end <= NUM_ ) {", "break ; } }", "byte b = bytes [ start ] ;", "if ( b >= NUM_ ) {", "dest . append ( ( char ) b ) ;", "start ++ ; }", "else {", "int code = read 2 ( ) ;", "if ( code < NUM_ ) {", "dest . append ( ( char ) code ) ; }", "else if ( code <= NUM_ ) {", "dest . append ( ( char ) ( ( ( code - NUM_ ) > > NUM_ ) + NUM_ ) ) ;", "dest . append ( ( char ) ( ( ( code - NUM_ ) & NUM_ ) + NUM_ ) ) ; }", "else {", "throw new Char Conversion Exception ( STR_ + Integer . to Hex String ( code ) + STR_ ) ; } } } }"]}
{"ids": "38560", "code": ["public boolean is Monitoring ( ) {", "return m Monitor . is Monitoring ( ) ; }"]}
{"ids": "46586", "code": ["static final Color hex To Color ( String value ) {", "String digits ;", "int n = value . length ( ) ;", "if ( value . starts With ( STR_ ) ) {", "digits = value . substring ( NUM_ , Math . min ( value . length ( ) , NUM_ ) ) ; }", "else {", "digits = value ; }", "String hstr = STR_ + digits ;", "Color c ;", "try {", "c = Color . decode ( hstr ) ; }", "catch ( Number Format Exception nfe ) {", "c = null ; }", "return c ; }"]}
{"ids": "29414", "code": ["public final boolean content Equals ( java . lang . Char Sequence csq ) {", "if ( csq . length ( ) != length ) return false ;", "for ( int i = NUM_ ; i < length ; ) {", "char c = high [ i > > B 1 ] [ i & M 1 ] ;", "if ( csq . char At ( i ++ ) != c ) return false ; }", "return true ; }"]}
{"ids": "20085", "code": ["private void populate Available Data Stores ( ) {", "Data Access Factory fac ;", "logger . debug ( STR_ ) ;", "Iterator < Data Store Factory Spi > iterator = Data Store Finder . get Available Data Stores ( ) ;", "while ( iterator . has Next ( ) ) {", "fac = ( Data Access Factory ) iterator . next ( ) ;", "logger . debug ( STR_ + fac . get Display Name ( ) ) ;", "available Data Store List . add ( fac . get Display Name ( ) ) ; } }"]}
{"ids": "26689", "code": ["protected void add ( double value , int group ) {", "if ( ( group < NUM_ ) || ( group >= number Of Groups ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "data . add ( new Observation ( value , group ) ) ; }"]}
{"ids": "38516", "code": ["protected static String make Option String ( Script script ) {", "String Buffer result ;", "Enumeration < Option > enm ;", "Option option ;", "result = new String Buffer ( STR_ ) ;", "result . append ( STR_ ) ;", "result . append ( STR_ ) ;", "result . append ( STR_ ) ;", "result . append ( STR_ ) ;", "result . append ( STR_ ) ;", "enm = script . list Options ( ) ;", "while ( enm . has More Elements ( ) ) {", "option = enm . next Element ( ) ;", "result . append ( option . synopsis ( ) + STR_ ) ;", "result . append ( option . description ( ) + STR_ ) ; }", "result . append ( STR_ ) ;", "result . append ( STR_ ) ;", "result . append ( STR_ ) ;", "result . append ( STR_ ) ;", "return result . to String ( ) ; }"]}
{"ids": "28847", "code": ["public Registration Builder add Contact ( URI contact ) {", "contacts . add ( contact ) ;", "return this ; }"]}
{"ids": "60683", "code": ["public static void close Quietly ( Auto Closeable closeable ) {", "if ( closeable != null ) {", "try {", "closeable . close ( ) ; }", "catch ( Runtime Exception rethrown ) {", "throw rethrown ; }", "catch ( Exception ignored ) { } } }"]}
{"ids": "74535", "code": ["String format Time ( int hour , int minute ) {", "String s = STR_ ;", "String t = Integer . to String ( hour ) ;", "if ( t . length ( ) == NUM_ ) {", "s = t + STR_ ; }", "else if ( t . length ( ) == NUM_ ) {", "s = STR_ + t + STR_ ; }", "t = Integer . to String ( minute ) ;", "if ( t . length ( ) == NUM_ ) {", "s = s + t ; }", "else if ( t . length ( ) == NUM_ ) {", "s = s + STR_ + t ; }", "if ( s . length ( ) != NUM_ ) {", "s = STR_ ; }", "return s ; }"]}
{"ids": "80054", "code": ["public boolean is Empty ( ) {", "return ( sentence Type == Sentence Type . UNDEFINED ) && expressions . is Empty ( ) ; }"]}
{"ids": "11946", "code": ["@ Override public void init ( Abstract Addressbook Manager a Boo Mgr ) {", "set Address Book Manager ( a Boo Mgr ) ;", "reload Settings ( ) ;", "try {", "connection = Driver Manager . get Connection ( IDENTITYDB CONNECT STRING ) ; }", "catch ( SQL Exception e ) {", "logger . error ( STR_ + IDENTITYDB CONNECT STRING , e ) ; }", "Statement statement ;", "try {", "statement = connection . create Statement ( ) ;", "statement . set Query Timeout ( NUM_ ) ;", "statement . execute Update ( STR_ + TABLE IDENTITY + STR_ ) ;", "statement . execute Update ( STR_ + TABLE CLOUDPROVIDER + STR_ ) ;", "statement . execute Update ( STR_ + TABLE CLOUDPROVIDER MAP + STR_ ) ;", "a Boo Mgr . init ( ) ; }", "catch ( SQL Exception e ) {", "logger . error ( STR_ , e ) ; }", "finally {", "if ( connection != null ) {", "try {", "connection . close ( ) ; }", "catch ( SQL Exception e ) {", "logger . error ( STR_ , e ) ; } } } }"]}
{"ids": "71402", "code": ["private Buffer check Error Packet ( int command ) throws SQL Exception {", "Buffer result Packet = null ;", "this . server Status = NUM_ ;", "try {", "result Packet = reuse And Read Packet ( this . reusable Packet ) ; }", "catch ( SQL Exception sql Ex ) {", "throw sql Ex ; }", "catch ( Exception fall Thru ) {", "throw SQL Error . create Communications Exception ( this . connection , this . last Packet Sent Time Ms , this . last Packet Received Time Ms , fall Thru , get Exception Interceptor ( ) ) ; }", "check Error Packet ( result Packet ) ;", "return result Packet ; }"]}
{"ids": "6632", "code": ["public void apply Settings ( boolean load Core Components ) throws Apply Settings Exception {", "List < String > errors = new Array List < String > ( NUM_ ) ;", "apply Torrent Data Save Folder Settings ( errors ) ;", "apply Torrent Seeding Settings ( errors ) ;", "if ( ! errors . is Empty ( ) ) {", "throw new Apply Settings Exception ( String Utils . explode ( errors , STR_ ) ) ; } }"]}
{"ids": "65869", "code": ["public boolean should Select Cell ( Event Object e ) {", "return true ; }"]}
{"ids": "61659", "code": ["method info find Method ( String s ) {", "method info m ;", "int i ;", "for ( i = NUM_ ; i < methods count ; i ++ ) {", "m = methods [ i ] ;", "if ( s . equals ( m . to Name ( constant pool ) ) ) {", "return m ; } }", "return null ; }"]}
{"ids": "49632", "code": ["private boolean matches ( @ Nullable Object obj , String operator , String operand Str ) {", "Obs Value value ;", "if ( obj == null ) {", "switch ( operator ) {", "case STR_ :", "case STR_ :", "case STR_ :", "return operand Str . is Empty ( ) ;", "default :", "return false ; } }", "else if ( obj instanceof Obs Point ) {", "value = ( ( Obs Point ) obj ) . value ; }", "else if ( obj instanceof Obs Value ) {", "value = ( Obs Value ) obj ; }", "else return false ;", "Obs Value operand = null ;", "if ( value . uuid != null ) {", "operand = Obs Value . new Coded ( Utils . expand Uuid ( operand Str ) ) ; }", "else if ( value . number != null ) {", "try {", "operand = Obs Value . new Number ( Double . value Of ( operand Str ) ) ; }", "catch ( Number Format Exception e ) {", "operand = Obs Value . ZERO ; } }", "else if ( value . text != null ) {", "operand = Obs Value . new Text ( operand Str ) ; }", "else if ( value . date != null ) {", "try {", "operand = Obs Value . new Date ( Local Date . parse ( operand Str ) ) ; }", "catch ( Illegal Argument Exception e ) {", "operand = Obs Value . MIN DATE ; } }", "else if ( value . instant != null ) {", "try {", "operand = Obs Value . new Time ( Long . value Of ( operand Str ) ) ; }", "catch ( Illegal Argument Exception e ) {", "operand = Obs Value . MIN TIME ; } }", "switch ( operator ) {", "case STR_ :", "case STR_ :", "case STR_ :", "return Objects . equal ( value . uuid , operand . uuid ) ;", "case STR_ :", "return value . compare To ( operand ) < NUM_ ;", "case STR_ :", "return value . compare To ( operand ) <= NUM_ ;", "case STR_ :", "return value . compare To ( operand ) > NUM_ ;", "case STR_ :", "return value . compare To ( operand ) >= NUM_ ; }", "return false ; }"]}
{"ids": "34510", "code": ["private void wait Until Readable ( ) throws IO Exception {", "read Timeout . enter ( ) ;", "try {", "while ( read Buffer . size ( ) == NUM_ && ! finished && ! closed && error Code == null ) {", "wait For Io ( ) ; } }", "finally {", "read Timeout . exit And Throw If Timed Out ( ) ; } }"]}
{"ids": "81700", "code": ["@ Suppress Warnings ( STR_ ) @ Override public boolean contains ( final Object obj ) {", "if ( null != obj ) {", "Iterator < E > it = new Array Deque Iterator < E > ( ) ;", "while ( it . has Next ( ) ) {", "if ( obj . equals ( ( E ) it . next ( ) ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "84067", "code": ["private void write Object ( Object Output Stream out ) throws IO Exception {", "out . default Write Object ( ) ;", "do Write Object ( out ) ; }"]}
{"ids": "8364", "code": ["private static boolean is Property Name ( String name ) {", "return ( ( name . length ( ) > NUM_ ) && Character . is Upper Case ( name . char At ( NUM_ ) ) ) || ( ( name . length ( ) > NUM_ ) && Character . is Upper Case ( name . char At ( NUM_ ) ) ) ; }"]}
{"ids": "1949", "code": ["public Collection < Expression Object < ? > > analyze Expression ( Generic PK id , Expression formula , Expression AST expression ) throws Scope Exception {", "Extract References visitor = new Extract References ( ) ;", "List < Expression Ref > references = visitor . apply ( expression ) ;", "String internal = rewrite Expression Value ( formula . get Value ( ) , expression , references ) ;", "if ( ! internal . equals ( formula . get Value ( ) ) ) {", "formula . set Internal ( internal ) ; }", "else {", "formula . set Internal ( null ) ; }", "int level = compute Reference Tree ( expression , references ) ;", "formula . set Level ( level ) ;", "Collection < Expression Object < ? > > objects = new Hash Set < > ( ) ;", "for ( Expression Ref expr : references ) {", "Object ref = expr . get Reference ( ) ;", "if ( ref != null && ref instanceof Property ) {", "Property property = ( Property ) ref ;", "Expression Object < ? > object = property . get Expression Object ( ) ;", "if ( object != null ) {", "objects . add ( object ) ; } } }", "if ( ! objects . is Empty ( ) ) {", "Collection < Expression Object < ? > > closure = null ;", "Collection < Expression Object < ? > > transitive Closure = objects ;", "do {", "closure = transitive Closure ;", "transitive Closure = transitive Closure ( id , closure ) ; }", "while ( closure . size ( ) < transitive Closure . size ( ) ) ;", "Collection < Reference PK < ? > > I Ds = new Hash Set < > ( ) ;", "for ( Expression Object < ? > object : transitive Closure ) {", "Reference PK < ? > ref Pk = reference ( object ) ;", "if ( ref Pk != null ) {", "I Ds . add ( ref Pk ) ; } }", "formula . set References ( I Ds ) ;", "return transitive Closure ; }", "else {", "return objects ; } }"]}
{"ids": "23258", "code": ["public void remove Rtcp Listener ( Rtcp Event Listener listener ) {", "if ( s Logger . is Activated ( ) ) {", "s Logger . debug ( STR_ ) ; }", "m Listeners . remove Element ( listener ) ; }"]}
{"ids": "84732", "code": ["private static void collect All Times ( Tree tree , Node Ref node , Node Ref [ ] exclude Below , Array List times , Array List < Integer > childs ) {", "times . add ( new Comparable Double ( tree . get Node Height ( node ) ) ) ;", "childs . add ( tree . get Child Count ( node ) ) ;", "for ( int i = NUM_ ; i < tree . get Child Count ( node ) ; i ++ ) {", "Node Ref child = tree . get Child ( node , i ) ;", "if ( exclude Below == null ) {", "collect All Times ( tree , child , exclude Below , times , childs ) ; }", "else {", "boolean include = true ;", "for ( Node Ref an Exclude Below : exclude Below ) {", "if ( an Exclude Below . get Number ( ) == child . get Number ( ) ) {", "include = false ;", "break ; } }", "if ( include ) collect All Times ( tree , child , exclude Below , times , childs ) ; } } }"]}
{"ids": "45771", "code": ["protected void paint Text ( final Graphics g , final J Component c , final Rectangle local Text Rect , final String text ) {", "final Graphics 2 D g 2 d = g instanceof Graphics 2 D ? ( Graphics 2 D ) g : null ;", "final Abstract Button b = ( Abstract Button ) c ;", "final Button Model model = b . get Model ( ) ;", "final Font Metrics fm = g . get Font Metrics ( ) ;", "final int mnemonic Index = Aqua Mnemonic Handler . is Mnemonic Hidden ( ) ? - NUM_ : b . get Displayed Mnemonic Index ( ) ;", "if ( model . is Enabled ( ) ) {", "g . set Color ( b . get Foreground ( ) ) ; }", "else {", "g . set Color ( default Disabled Text Color ) ; }", "Swing Utilities 2 . draw String Underline Char At ( c , g , text , mnemonic Index , local Text Rect . x , local Text Rect . y + fm . get Ascent ( ) ) ; }"]}
{"ids": "51041", "code": ["public static Constraint Widget [ ] infer Table List ( Widgets Scene list ) {", "for ( Constraint Widget widget : list . get Widgets ( ) ) {", "widget . reset Anchors ( ) ; }", "return infer Table List ( list . get Root ( ) ) ; }"]}
{"ids": "14048", "code": ["public String to XML String ( boolean include NS , boolean declare NS ) throws FS Msg Exception {", "return to XML String ( include NS , declare NS , false ) ; }"]}
{"ids": "47374", "code": ["public void if Present ( Long Consumer consumer ) {", "if ( is Present ) consumer . accept ( value ) ; }"]}
{"ids": "72755", "code": ["public void update ( String [ ] columns , Object [ ] column Values , String [ ] conditions , Object [ ] condition Values ) throws Data Access Exception {", "if ( columns . length != column Values . length || conditions . length != condition Values . length ) {", "logger . error ( STR_ ) ;", "return ; }", "Object [ ] values = Arrays . copy Of ( column Values , column Values . length + condition Values . length ) ;", "System . arraycopy ( condition Values , NUM_ , values , column Values . length , condition Values . length ) ;", "final String sql = Prepared Statement Util . prepare Update Template With Column ( table Name , columns , conditions ) ;", "execute ( sql , values ) ; }"]}
{"ids": "53973", "code": ["public static String replica Set Used In ( String addresses ) {", "if ( addresses . starts With ( STR_ ) ) {", "return null ; }", "int index = addresses . index Of ( STR_ ) ;", "if ( index < NUM_ ) return null ;", "return addresses . substring ( NUM_ , index ) ; }"]}
{"ids": "5858", "code": ["public void on Progress ( long bytes Written , long total Size ) {", "Log . v ( LOG TAG , String . format ( STR_ , bytes Written , total Size , ( total Size > NUM_ ) ? ( bytes Written * NUM_ / total Size ) * NUM_ : - NUM_ ) ) ; }"]}
{"ids": "85401", "code": ["public String self ( Type Declaration decl ) {", "if ( decl instanceof Constructor ) {", "decl = ( Type Declaration ) decl . get Container ( ) ; }", "String name = Js Utils . escape String Literal ( decl . get Name ( ) ) ;", "if ( decl . is Shared ( ) || decl . is Toplevel ( ) ) {", "name += nesting Suffix ( decl , true ) ; }", "else {", "name = STR_ + Long . to String ( get UID ( decl ) , NUM_ ) ; }", "return String . format ( STR_ , Character . to Lower Case ( name . char At ( NUM_ ) ) , name . substring ( NUM_ ) ) ; }"]}
{"ids": "32740", "code": ["public double elapsed Time ( ) {", "long now = thread Timer . get Current Thread Cpu Time ( ) ;", "return ( now - start ) / NANOSECONDS PER SECOND ; }"]}
{"ids": "16898", "code": ["public static void sort List ( List list ) {", "if ( System Utils . IS JAVA 1 7 && list instanceof Copy On Write Array List ) {", "List temp List = new Array List ( list ) ;", "Collections . sort ( temp List ) ;", "list . clear ( ) ;", "list . add All ( temp List ) ; }", "else {", "Collections . sort ( list ) ; } }"]}
{"ids": "17830", "code": ["public void fire Indexed Property Change ( String property Name , int index , boolean old Value , boolean new Value ) {", "if ( old Value != new Value ) {", "fire Indexed Property Change ( property Name , index , Boolean . value Of ( old Value ) , Boolean . value Of ( new Value ) ) ; } }"]}
{"ids": "25133", "code": ["public static < T > T [ ] concat ( T [ ] first , T [ ] second , Class < T > type ) {", "T [ ] result = new Array ( type , first . length + second . length ) ;", "System . arraycopy ( first , NUM_ , result , NUM_ , first . length ) ;", "System . arraycopy ( second , NUM_ , result , first . length , second . length ) ;", "return result ; }"]}
{"ids": "76369", "code": ["public synchronized void write To Remote ( byte b ) {", "remote Buffer . add ( b ) ; }"]}
{"ids": "16302", "code": ["@ Override public void draw Series ( Canvas canvas , Paint paint , List < Float > points , List < Double > values , XY Series Renderer series Renderer , Support Series Render support Series Render , float y Axis Value , int series Index , int start Index ) {", "int series Nr = m Dataset . get Series Count ( ) ;", "int length = points . size ( ) ;", "paint . set Color ( series Renderer . get Color ( ) ) ;", "paint . set Style ( Style . FILL ) ;", "float half Diff X = get Half Diff X ( points , length , series Nr ) ;", "int start = NUM_ ;", "if ( start Index > NUM_ ) {", "start = NUM_ ; }", "for ( int i = start ; i < length ; i += NUM_ ) {", "if ( points . size ( ) > i + NUM_ ) {", "float x Min = points . get ( i ) ;", "float y Min = points . get ( i + NUM_ ) ;", "float x Max = points . get ( i + NUM_ ) ;", "float y Max = points . get ( i + NUM_ ) ;", "draw Bar ( canvas , x Min , y Min , x Max , y Max , half Diff X , series Nr , series Index , paint ) ; } }", "paint . set Color ( series Renderer . get Color ( ) ) ; }"]}
{"ids": "56100", "code": ["private void begin Gesture ( int scroll Offset Y , int scroll Extent Y ) {", "m Initial Translation Y = get Translation Y ( ) ;", "boolean is Initially Visible = m Initial Translation Y < m Total Height ;", "int starting Y = is Initially Visible ? scroll Offset Y : Math . min ( scroll Offset Y , m Total Height ) ;", "m Initial Offset Y = starting Y + scroll Extent Y ; }"]}
{"ids": "67212", "code": ["@ Override public void add ( String ... identifiers ) {", "whitelist . add All ( Arrays . as List ( identifiers ) ) ; }"]}
{"ids": "39844", "code": ["public static void clear ( ) {", "shop Id . set ( NUM_ ) ;", "shop Code . set ( STR_ ) ; }"]}
{"ids": "28896", "code": ["@ Override public boolean communication Initiated ( ) {", "return bugs Populated . get Count ( ) == NUM_ && communication Initiated && network Client . ready ( ) ; }"]}
{"ids": "7395", "code": ["@ Override public void dump ( String prefix , File Descriptor fd , Print Writer writer , String [ ] args ) {", "super . dump ( prefix , fd , writer , args ) ;", "writer . print ( prefix ) ;", "writer . print ( STR_ ) ;", "writer . println ( raw Query ) ;", "writer . print ( prefix ) ;", "writer . print ( STR_ ) ;", "writer . println ( Arrays . to String ( args ) ) ; }"]}
{"ids": "86799", "code": ["public void add Contig Field ( Contig Field field ) {", "add Id Field ( m Contig Lines , field ) ; }"]}
{"ids": "14682", "code": ["boolean remove Index Entry ( String resource Name , String policy Name ) {", "Iterator iter = top Level Entries . iterator ( ) ;", "boolean processed = false ;", "while ( ! processed && ( iter . has Next ( ) ) ) {", "Resource Index Entry resource Index Entry = ( Resource Index Entry ) iter . next ( ) ;", "if ( resource Index Entry . remove Index Entry ( resource Type , resource Name , policy Name ) ) {", "processed = true ; } }", "return processed ; }"]}
{"ids": "53154", "code": ["public static double pdf ( double x , double mu , double shape ) {", "if ( ! ( x > NUM_ ) || x == Double . POSITIVE INFINITY ) {", "return NUM_ ; }", "final double v = ( x - mu ) / mu ;", "double t 1 = Math . sqrt ( shape / ( Math Util . TWOPI * x * x * x ) ) ;", "return t 1 > NUM_ ? t 1 * Math . exp ( - shape * v * v * NUM_ / x ) : NUM_ ; }"]}
{"ids": "41872", "code": ["@ Override public void on Stop Tracking Touch ( Seek Bar seek Bar ) {", "final int pos = m Item List . index Of ( m Selected Tracker ) ;", "final int delta = NUM_ / m Item List . size ( ) ;", "cp mover . set Progress ( pos * delta + delta / NUM_ ) ; }"]}
{"ids": "29281", "code": ["public static int max Profit ( int [ ] prices ) {", "if ( prices == null || prices . length < NUM_ ) {", "return NUM_ ; }", "int max = NUM_ ;", "int min = prices [ NUM_ ] ;", "for ( int i = NUM_ ; i < prices . length ; i ++ ) {", "min = Math . min ( min , prices [ i ] ) ;", "if ( prices [ i ] > prices [ i - NUM_ ] ) {", "max = Math . max ( max , prices [ i ] - min ) ; } }", "return max ; }"]}
{"ids": "28556", "code": ["public void add ( String string ) {", "elements . add ( string == null ? Json Null . INSTANCE : new Json Primitive ( string ) ) ; }"]}
{"ids": "11476", "code": ["public void component Added ( Container Event e ) {", "Layer child Layer = ( Layer ) e . get Child ( ) ;", "add Projection Listener ( child Layer ) ;", "if ( ! removed Layers . remove Element ( child Layer ) ) {", "added Layers . add Element ( child Layer ) ; }", "change Layers ( e ) ; }"]}
{"ids": "61499", "code": ["public void processing Instruction ( String target , String data ) throws SAX Exception {", "characters Flush ( ) ;", "int data Index = m data . size ( ) ;", "m previous = add Node ( DTM . PROCESSING INSTRUCTION NODE , DTM . PROCESSING INSTRUCTION NODE , m parents . peek ( ) , m previous , - data Index , false ) ;", "m data . add Element ( m values Or Prefixes . string To Index ( target ) ) ;", "m values . add Element ( data ) ;", "m data . add Element ( m value Index ++ ) ; }"]}
{"ids": "46992", "code": ["protected void panic ( String msg ) throws SAX Exception {", "SAX Parse Exception spe = new SAX Parse Exception ( msg , this ) ;", "m Hand Err . fatal Error ( spe ) ;", "throw spe ; }"]}
{"ids": "56799", "code": ["private void update Namespace Permissions ( User Namespace Authorization Entity user Namespace Authorization Entity , List < Namespace Permission Enum > namespace Permissions ) {", "user Namespace Authorization Entity . set Read Permission ( namespace Permissions . contains ( Namespace Permission Enum . READ ) ) ;", "user Namespace Authorization Entity . set Write Permission ( namespace Permissions . contains ( Namespace Permission Enum . WRITE ) ) ;", "user Namespace Authorization Entity . set Execute Permission ( namespace Permissions . contains ( Namespace Permission Enum . EXECUTE ) ) ;", "user Namespace Authorization Entity . set Grant Permission ( namespace Permissions . contains ( Namespace Permission Enum . GRANT ) ) ; }"]}
{"ids": "42530", "code": ["public static void report ( ) {", "if ( ! booted ) return ;", "Controller Thread . report ( ) ;", "Runtime Measurements . report ( ) ;", "for ( Enumeration < Organizer > e = organizers . elements ( ) ; e . has More Elements ( ) ; ) {", "Organizer organizer = e . next Element ( ) ;", "organizer . report ( ) ; }", "if ( options . FINAL REPORT LEVEL >= NUM_ ) {", "Edge Counts . dump Counts ( ) ;", "dcg . dump Graph ( ) ; }", "if ( options . REPORT INTERRUPT STATS ) {", "VM . sys Writeln ( STR_ ) ;", "VM . sys Writeln ( STR_ , RVM Thread . timer Ticks ) ;", "VM . sys Writeln ( STR_ , controller Clock ) ;", "VM . sys Writeln ( STR_ , ( int ) method Samples . get Total Number Of Samples ( ) ) ; } }"]}
{"ids": "85624", "code": ["public static Set < ? > convert Array To Set ( Object [ ] source ) {", "Set < Object > set = new Hash Set < Object > ( ) ;", "for ( Object element : source ) {", "set . add ( element ) ; }", "return set ; }"]}
{"ids": "63800", "code": ["public static int intersect Line Rectangle ( Line 2 D l , Rectangle 2 D r , Point 2 D [ ] pts ) {", "double a 1 x = l . get X 1 ( ) , a 1 y = l . get Y 1 ( ) ;", "double a 2 x = l . get X 2 ( ) , a 2 y = l . get Y 2 ( ) ;", "double mxx = r . get Max X ( ) , mxy = r . get Max Y ( ) ;", "double mnx = r . get Min X ( ) , mny = r . get Min Y ( ) ;", "if ( pts [ NUM_ ] == null ) pts [ NUM_ ] = new Point 2 D . Double ( ) ;", "if ( pts [ NUM_ ] == null ) pts [ NUM_ ] = new Point 2 D . Double ( ) ;", "int i = NUM_ ;", "if ( intersect Line Line ( mnx , mny , mxx , mny , a 1 x , a 1 y , a 2 x , a 2 y , pts [ i ] ) > NUM_ ) i ++ ;", "if ( intersect Line Line ( mxx , mny , mxx , mxy , a 1 x , a 1 y , a 2 x , a 2 y , pts [ i ] ) > NUM_ ) i ++ ;", "if ( i == NUM_ ) return i ;", "if ( intersect Line Line ( mxx , mxy , mnx , mxy , a 1 x , a 1 y , a 2 x , a 2 y , pts [ i ] ) > NUM_ ) i ++ ;", "if ( i == NUM_ ) return i ;", "if ( intersect Line Line ( mnx , mxy , mnx , mny , a 1 x , a 1 y , a 2 x , a 2 y , pts [ i ] ) > NUM_ ) i ++ ;", "return i ; }"]}
{"ids": "19987", "code": ["public static String cidr Mask To Net Mask ( String cidr Mask ) {", "if ( cidr Mask == null ) {", "return null ; }", "int cidr Mask Value = NUM_ ;", "try {", "cidr Mask Value = Integer . parse Int ( cidr Mask ) ; }", "catch ( Number Format Exception e ) {", "return null ; }", "int cidr Mask Full = NUM_ << ( NUM_ - cidr Mask Value ) ;", "int cidr Mask Bits 1 = cidr Mask Full > > NUM_ & NUM_ ;", "int cidr Mask Bits 2 = cidr Mask Full > > NUM_ & NUM_ ;", "int cidr Mask Bits 3 = cidr Mask Full > > NUM_ & NUM_ ;", "int cidr Mask Bits 4 = cidr Mask Full > > NUM_ & NUM_ ;", "String Buffer net Mask Buf = new String Buffer ( ) ;", "net Mask Buf . append ( cidr Mask Bits 1 ) ;", "net Mask Buf . append ( STR_ ) ;", "net Mask Buf . append ( cidr Mask Bits 2 ) ;", "net Mask Buf . append ( STR_ ) ;", "net Mask Buf . append ( cidr Mask Bits 3 ) ;", "net Mask Buf . append ( STR_ ) ;", "net Mask Buf . append ( cidr Mask Bits 4 ) ;", "return net Mask Buf . to String ( ) ; }"]}
{"ids": "51935", "code": ["public boolean in Bounds ( Mouse Event e ) {", "return e . get X ( ) > x && e . get X ( ) < x + width && e . get Y ( ) > y && e . get Y ( ) < y + height ; }"]}
{"ids": "35864", "code": ["public Class Path ( @ Nonnull Iterable < Dex File > class Path , boolean check Package Private Access ) {", "Iterable < Dex File > dex Files = Iterables . concat ( class Path , Lists . new Array List ( get Basic Classes ( ) ) ) ;", "unknown Class = new Unknown Class Proto ( this ) ;", "loaded Classes . put ( unknown Class . get Type ( ) , unknown Class ) ;", "this . check Package Private Access = check Package Private Access ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "load Primitive Type ( STR_ ) ;", "for ( Dex File dex File : dex Files ) {", "for ( Class Def class Def : dex File . get Classes ( ) ) {", "Class Def prev = available Classes . get ( class Def . get Type ( ) ) ;", "if ( prev == null ) {", "available Classes . put ( class Def . get Type ( ) , class Def ) ; } } } }"]}
{"ids": "29151", "code": ["private boolean ask To Save ( ) {", "if ( main Frame . is Project Changed ( ) ) {", "int response = J Option Pane . show Confirm Dialog ( main Frame , L 10 N . get Local String ( STR_ , STR_ ) , L 10 N . get Local String ( STR_ , STR_ ) , J Option Pane . YES NO CANCEL OPTION , J Option Pane . WARNING MESSAGE ) ;", "if ( response == J Option Pane . YES OPTION ) {", "if ( main Frame . get Save File ( ) != null ) {", "save ( ) ; }", "else {", "save As ( ) ; } }", "else if ( response == J Option Pane . CANCEL OPTION ) {", "return true ; } }", "return false ; }"]}
{"ids": "9297", "code": ["public Map Cursor add Cursor ( Map Cursor cursor ) {", "cursors . add ( cursor ) ;", "return cursor ; }"]}
{"ids": "16736", "code": ["private boolean discard Upstream Media Chunks ( int queue Length ) {", "if ( media Chunks . size ( ) <= queue Length ) {", "return false ; }", "long start Time Us = NUM_ ;", "long end Time Us = media Chunks . get Last ( ) . end Time Us ;", "Base Media Chunk removed = null ;", "while ( media Chunks . size ( ) > queue Length ) {", "removed = media Chunks . remove Last ( ) ;", "start Time Us = removed . start Time Us ; }", "sample Queue . discard Upstream Samples ( removed . get First Sample Index ( ) ) ;", "notify Upstream Discarded ( start Time Us , end Time Us ) ;", "return true ; }"]}
{"ids": "74625", "code": ["public Metalink File Builder add File ( String name ) {", "Metalink File Builder new File = new Metalink File Builder ( name ) ;", "files . add ( new File ) ;", "return new File ; }"]}
{"ids": "50152", "code": ["private void send After Connect ( Channel ch , Netty Channel Context context Final , Operation request , Netty Channel Group group ) {", "if ( request . get Status Code ( ) < Operation . STATUS CODE FAILURE THRESHOLD ) {", "request . complete ( ) ; }", "else {", "request . fail ( request . get Status Code ( ) ) ; } }"]}
{"ids": "32680", "code": ["protected String check Production ( final Territory to , final Collection < Unit > units , final Player ID player ) {", "final List < Territory > producers = get All Producers ( to , player , units ) ;", "if ( producers . is Empty ( ) ) {", "return STR_ + to . get Name ( ) ; }", "Collections . sort ( producers , get Best Producer Comparator ( to , units , player ) ) ;", "if ( ! get Can All Units With Requires Units Be Placed Correctly ( units , to ) ) {", "return STR_ ; }", "final int max Units To Be Placed = get Max Units To Be Placed ( units , to , player , true ) ;", "if ( ( max Units To Be Placed != - NUM_ ) && ( max Units To Be Placed < units . size ( ) ) ) {", "return STR_ + units . size ( ) + STR_ + to . get Name ( ) ; }", "return null ; }"]}
{"ids": "3607", "code": ["@ Override public void close Write ( ) throws IO Exception {", "if ( is Write Closed ) {", "return ; }", "is Write Closed = true ;", "Socket Stream stream = stream Impl ;", "if ( stream != null ) {", "stream . close Write ( ) ; }", "else if ( s != null ) {", "try {", "s . shutdown Output ( ) ; }", "catch ( Unsupported Operation Exception e ) {", "log . log ( Level . FINEST , e . to String ( ) , e ) ; }", "catch ( Exception e ) {", "log . finer ( e . to String ( ) ) ;", "log . log ( Level . FINEST , e . to String ( ) , e ) ; } } }"]}
{"ids": "49338", "code": ["public boolean equals ( Object that ) {", "return ( that instanceof Char Set ) && Arrays . equals ( chars , ( ( Char Set ) that ) . chars ) ; }"]}
{"ids": "85727", "code": ["public static Void process Records ( List < Kinesis Event Record > input Records , Kinesis User Record Processor processor ) {", "List < Record > raw Records = new Linked List < > ( ) ;", "for ( Kinesis Event Record rec : input Records ) {", "raw Records . add ( rec . get Kinesis ( ) ) ; }", "return processor . process ( User Record . deaggregate ( raw Records ) ) ; }"]}
{"ids": "68382", "code": ["protected Font resolve Font ( Shared Context ctx , String font , float size , Ident Value weight , Ident Value style , Ident Value variant ) {", "if ( font . starts With ( STR_ ) ) {", "font = font . substring ( NUM_ ) ; }", "if ( font . ends With ( STR_ ) ) {", "font = font . substring ( NUM_ , font . length ( ) - NUM_ ) ; }", "if ( font . equals Ignore Case ( STR_ ) ) {", "font = STR_ ; }", "if ( font . equals Ignore Case ( STR_ ) ) {", "font = STR_ ; }", "if ( font . equals Ignore Case ( STR_ ) ) {", "font = STR_ ; }", "if ( font . equals ( STR_ ) && style == Ident Value . OBLIQUE ) {", "font = STR_ ; }", "if ( font . equals ( STR_ ) && style == Ident Value . ITALIC ) {", "font = STR_ ; }", "String font Instance Name = get Font Instance Hash Name ( ctx , font , size , weight , style , variant ) ;", "if ( instance Hash . contains Key ( font Instance Name ) ) {", "return instance Hash . get ( font Instance Name ) ; }", "if ( available Fonts Hash . contains Key ( font ) ) {", "Font possibly Null Font = available Fonts Hash . get ( font ) ;", "Font root Font = null ;", "if ( possibly Null Font != null ) {", "root Font = possibly Null Font ; }", "else {", "root Font = new Font ( font , Font . PLAIN , NUM_ ) ;", "available Fonts Hash . put ( font , root Font ) ; }", "Font fnt = create Font ( ctx , root Font , size , weight , style , variant ) ;", "instance Hash . put ( font Instance Name , fnt ) ;", "return fnt ; }", "return null ; }"]}
{"ids": "72438", "code": ["public Array Real Vector ( double [ ] d , int pos , int size ) throws Math Illegal Argument Exception , Null Argument Exception {", "if ( d == null ) {", "throw new Null Argument Exception ( ) ; }", "if ( d . length < pos + size ) {", "throw new Math Illegal Argument Exception ( Localized Core Formats . NUMBER TOO LARGE , pos + size , d . length ) ; }", "data = new double [ size ] ;", "System . arraycopy ( d , pos , data , NUM_ , size ) ; }"]}
{"ids": "79248", "code": ["public void clear Payment Methods By Id ( List < String > payment Method Ids To Remove ) {", "if ( Util Validate . is Empty ( payment Method Ids To Remove ) ) return ;", "for ( Iterator < Cart Payment Info > iter = payment Info . iterator ( ) ; iter . has Next ( ) ; ) {", "Cart Payment Info info = iter . next ( ) ;", "if ( payment Method Ids To Remove . contains ( info . payment Method Id ) ) {", "iter . remove ( ) ; } } }"]}
{"ids": "29502", "code": ["@ Override public void clean ( ) {", "set Current Points ( NUM_ ) ;", "check State ( ) ; }"]}
{"ids": "13761", "code": ["public void handle Button 2 Request ( Request Invocation Event event ) {", "set Page Session Attribute ( get Tracking Tab ID Name ( ) , AM Admin Constants . FED TAB ID ) ;", "set Page Session Attribute ( AM Admin Constants . PREVIOUS TAB ID , get Tracking Tab ID Name ( ) ) ;", "Federation View Bean vb = ( Federation View Bean ) get View Bean ( Federation View Bean . class ) ;", "back Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }"]}
{"ids": "38717", "code": ["@ Override public void perform Request ( String request ) {", "if ( request . compare To ( STR_ ) == NUM_ ) {", "stop ( ) ; }", "else {", "throw new Illegal Argument Exception ( request + STR_ ) ; } }"]}
{"ids": "45754", "code": ["public byte [ ] to Bytes ( ) {", "byte [ ] return Bytes = new byte [ bytes Length ] ;", "System . arraycopy ( bytes , NUM_ , return Bytes , NUM_ , bytes Length ) ;", "return return Bytes ; }"]}
{"ids": "9777", "code": ["public void start Check ( ) {", "checker = new Thread ( new Check For Update ( ) ) ;", "checker . set Priority ( Thread . MIN PRIORITY ) ;", "checker . start ( ) ; }"]}
{"ids": "23124", "code": ["public boolean is Ack Seen ( ) {", "return this . ack Seen ; }"]}
{"ids": "82844", "code": ["protected void uninstall Listeners ( ) {", "super . uninstall Listeners ( ) ;", "split Pane . remove Property Change Listener ( this ) ; }"]}
{"ids": "52510", "code": ["private static Collector < Segment Info , ? , Map < String , Segment Info > > partitions To Map Collector ( ) {", "return Collector . of ( null , null , null ) ; }"]}
{"ids": "64379", "code": ["public boolean is Crc ( ) {", "return is Flags ( FLAG CACHED VALUES CHECKED & FLAG CRC CALCED ) ; }"]}
{"ids": "27383", "code": ["public int size ( ) {", "return queue . size ( ) ; }"]}
{"ids": "47443", "code": ["@ Override public String Buffer format ( double number , String Buffer result , Field Position field Position ) {", "boolean try Fast Path = false ;", "if ( field Position == Dont Care Field Position . INSTANCE ) try Fast Path = true ;", "else {", "field Position . set Begin Index ( NUM_ ) ;", "field Position . set End Index ( NUM_ ) ; }", "if ( try Fast Path ) {", "String temp Result = fast Format ( number ) ;", "if ( temp Result != null ) {", "result . append ( temp Result ) ;", "return result ; } }", "return format ( number , result , field Position . get Field Delegate ( ) ) ; }"]}
{"ids": "62841", "code": ["private void build Cursor Conditionally ( Matrix Cursor cursor , Character Record cr , String selection , String [ ] selection Args ) {", "if ( selection Args == null ) cursor . add Row ( new Object [ ] { cr . get Id ( ) , cr . get Name ( ) , cr . get Race ( ) } ) ;", "else for ( String item : selection Args ) if ( ( selection . equals ( Character Contract . Character Entry . COLUMN NAME ) && item . equals ( cr . get Name ( ) ) ) || ( selection . equals ( Character Contract . Character Entry . COLUMN RACE ) && item . equals ( cr . get Race ( ) ) ) ) {", "cursor . add Row ( new Object [ ] { cr . get Id ( ) , cr . get Name ( ) , cr . get Race ( ) } ) ; } }"]}
{"ids": "64384", "code": ["public Modpack File Selection Panel ( Wizard Controller controller , Map wizard Data , File game Dir , Bi Function < String , Boolean , Integer > black List ) {", "init Components ( ) ;", "this . controller = controller ;", "this . wizard Data = wizard Data ;", "this . black List = black List ;", "Check Box Tree Node root = create ( game Dir , STR_ ) ;", "j Tree 1 . set Model ( new Default Tree Model ( root ) ) ;", "j Tree 1 . set Cell Renderer ( new Check Box Tree Cell Renderer ( ) ) ;", "j Tree 1 . add Mouse Listener ( new Check Box Tree Node Selection Listener ( ) ) ;", "wizard Data . put ( STR_ , root ) ; }"]}
{"ids": "45195", "code": ["public Shape paint Layer ( Graphics g , int offs 0 , int offs 1 , Shape bounds , J Text Component c , View view ) {", "Graphics 2 D g 2 d = ( Graphics 2 D ) g ;", "Composite original Composite = null ;", "if ( get Alpha ( ) < NUM_ ) {", "original Composite = g 2 d . get Composite ( ) ;", "g 2 d . set Composite ( get Alpha Composite ( ) ) ; }", "Paint paint = get Paint ( ) ;", "if ( paint == null ) g 2 d . set Color ( c . get Selection Color ( ) ) ;", "else g 2 d . set Paint ( paint ) ;", "if ( offs 0 == view . get Start Offset ( ) && offs 1 == view . get End Offset ( ) ) {", "Rectangle alloc ;", "if ( bounds instanceof Rectangle ) alloc = ( Rectangle ) bounds ;", "else alloc = bounds . get Bounds ( ) ;", "g 2 d . fill Rect ( alloc . x , alloc . y , alloc . width , alloc . height ) ;", "if ( get Alpha ( ) < NUM_ ) g 2 d . set Composite ( original Composite ) ;", "return alloc ; }", "else {", "try {", "Shape shape = view . model To View ( offs 0 , Position . Bias . Forward , offs 1 , Position . Bias . Backward , bounds ) ;", "Rectangle r = ( shape instanceof Rectangle ) ? ( Rectangle ) shape : shape . get Bounds ( ) ;", "if ( rounded Edges ) {", "g 2 d . fill Round Rect ( r . x , r . y , r . width , r . height , ARCWIDTH , ARCHEIGHT ) ; }", "else {", "g 2 d . fill Rect ( r . x , r . y , r . width , r . height ) ; }", "if ( get Alpha ( ) < NUM_ ) g 2 d . set Composite ( original Composite ) ;", "return r ; }", "catch ( Bad Location Exception ble ) {", "ble . print Stack Trace ( ) ; }", "finally {", "if ( get Alpha ( ) < NUM_ ) g 2 d . set Composite ( original Composite ) ; } }", "return null ; }"]}
{"ids": "24984", "code": ["private void create Container If Necessary ( ) {", "if ( container . is Full ( ) ) {", "container = new Timer Raw Container ( ) ;", "data . add ( container ) ; } }"]}
{"ids": "54441", "code": ["private void process Update Counts ( int [ ] update Counts , int commands In Batch ) {", "if ( update Counts . length < commands In Batch ) {", "error . emit ( tuples . get ( update Counts . length + batch Start Idx ) ) ;", "error Tuples ++ ;", "tuples Written Successfully += update Counts . length ;", "batch Start Idx += update Counts . length + NUM_ ;", "if ( ( tuples . size ( ) - batch Start Idx ) > NUM_ ) {", "process Batch ( ) ; } }", "else {", "tuples Written Successfully = commands In Batch ;", "for ( int i = NUM_ ; i < commands In Batch ; i ++ ) {", "if ( update Counts [ i ] == Statement . EXECUTE FAILED ) {", "error . emit ( tuples . get ( i + batch Start Idx ) ) ;", "error Tuples ++ ;", "tuples Written Successfully -- ; } } } }"]}
{"ids": "31102", "code": ["public int choose Protocol Version ( ) {", "return preferred Protocol Version ; }"]}
{"ids": "73669", "code": ["public Sensor create New Sensor ( String system Name , String user Name ) {", "Sensor s ;", "String s Name = Acela Address . normalize System Name ( system Name ) ;", "if ( s Name . equals ( STR_ ) ) {", "log . error ( STR_ + system Name ) ;", "return null ; }", "s = get By System Name ( s Name ) ;", "if ( s != null ) {", "log . error ( STR_ + system Name ) ;", "return null ; }", "String alt Name = Acela Address . convert System Name To Alternate ( s Name ) ;", "s = get By System Name ( alt Name ) ;", "if ( s != null ) {", "log . error ( STR_ + system Name + STR_ + alt Name + STR_ ) ;", "return null ; }", "int bit = Acela Address . get Bit From System Name ( s Name ) ;", "if ( ( bit < NUM_ ) || ( bit >= NUM_ ) ) {", "log . error ( STR_ + Integer . to String ( bit ) + STR_ ) ;", "return null ; }", "if ( user Name == null ) {", "s = new Acela Sensor ( s Name ) ; }", "else {", "s = new Acela Sensor ( s Name , user Name ) ; }", "Acela Node node = Acela Address . get Node From System Name ( s Name , memo ) ;", "if ( node == null ) {", "log . warn ( STR_ + s Name + STR_ ) ;", "return s ; }", "if ( ! node . has Active Sensors ) {", "int newnodeaddress ;", "newnodeaddress = node . get Node Address ( ) ;", "log . warn ( STR_ + newnodeaddress ) ;", "return s ; }", "node . register Sensor ( s , bit ) ;", "return s ; }"]}
{"ids": "12942", "code": ["public static Input Stream need Stream ( String property Name ) throws No Such Property Exception , File Not Found Exception , Mary Configuration Exception {", "Mary Properties . need Property ( property Name ) ;", "return get Stream ( property Name ) ; }"]}
{"ids": "17500", "code": ["public static boolean equal ( Object a , Object b ) {", "return a == b || ( a != null && a . equals ( b ) ) ; }"]}
{"ids": "76598", "code": ["public static String network Name To String ( byte [ ] data , int offset , int length ) {", "String ret ;", "if ( ( data [ offset ] & NUM_ ) != NUM_ || length < NUM_ ) {", "return STR_ ; }", "switch ( ( data [ offset ] > > > NUM_ ) & NUM_ ) {", "case NUM_ :", "int count Septets ;", "int unused Bits = data [ offset ] & NUM_ ;", "count Septets = ( ( ( length - NUM_ ) * NUM_ ) - unused Bits ) / NUM_ ;", "ret = Gsm Alphabet . gsm 7 Bit Packed To String ( data , offset + NUM_ , count Septets ) ;", "break ;", "case NUM_ :", "try {", "ret = new String ( data , offset + NUM_ , length - NUM_ , STR_ ) ; }", "catch ( Unsupported Encoding Exception ex ) {", "ret = STR_ ;", "Log . e ( LOG TAG , STR_ , ex ) ; }", "break ;", "default :", "ret = STR_ ;", "break ; }", "if ( ( data [ offset ] & NUM_ ) != NUM_ ) { }", "return ret ; }"]}
{"ids": "71754", "code": ["public void add ( Marker marker ) {", "m Items . add ( marker ) ; }"]}
{"ids": "83891", "code": ["private static Map . Entry < Date Time , Time Series Value > find Name ( List < Time Series Collection > c , Group Name name ) {", "List Iterator < Time Series Collection > iter = c . list Iterator ( ) ;", "while ( iter . has Next ( ) ) {", "final int idx = iter . next Index ( ) ;", "final Time Series Collection tsdata = iter . next ( ) ;", "final Optional < Time Series Value > found = tsdata . get ( name ) ;", "if ( found . is Present ( ) ) return Simple Map Entry . create ( tsdata . get Timestamp ( ) , found . get ( ) ) ; }", "throw new Illegal State Exception ( STR_ ) ; }"]}
{"ids": "26185", "code": ["public Map < String , Object > finalize Order Entry Payment ( String check Out Payment Id , Big Decimal amount , boolean single Use , boolean append ) {", "Map < String , Object > result = Service Util . return Success ( ) ;", "if ( Util Validate . is Not Empty ( check Out Payment Id ) ) {", "if ( ! append ) {", "cart . clear Payments ( ) ; }", "cart . add Payment Amount ( check Out Payment Id , amount , single Use ) ; }", "return result ; }"]}
{"ids": "44713", "code": ["public void deploy ( String route Id , String route Name , Json Value route Config ) throws Router Handler Exception {", "Reject . if Null ( route Name ) ;", "write . lock ( ) ;", "try {", "load ( route Id , route Name , route Config . copy ( ) ) ;", "directory Monitor . store ( route Id , route Config ) ;", "logger . info ( STR_ , route Id , route Name ) ; }", "catch ( IO Exception e ) {", "throw new Router Handler Exception ( format ( STR_ , route Id ) , e ) ; }", "finally {", "write . unlock ( ) ; } }"]}
{"ids": "69847", "code": ["private static char [ ] subscript For Digit ( int digit ) {", "return Character . to Chars ( NUM_ + digit ) ; }"]}
{"ids": "31734", "code": ["private Fs Permission permission ( Igfs File file ) {", "String perm = file . property ( Igfs Utils . PROP PERMISSION , null ) ;", "if ( perm == null ) return Fs Permission . get Default ( ) ;", "try {", "return new Fs Permission ( ( short ) Integer . parse Int ( perm , NUM_ ) ) ; }", "catch ( Number Format Exception ignore ) {", "return Fs Permission . get Default ( ) ; } }"]}
{"ids": "44412", "code": ["public Simple Mailbox ACL ( ) {", "this . entries = Collections . empty Map ( ) ; }"]}
{"ids": "3924", "code": ["private void read Stream Result ( In H 3 h In , Headers Amp headers ) throws IO Exception {", "Service Ref Amp service Ref = read To Address ( h In ) ;", "long id = h In . read Long ( ) ;", "Query Ref Amp query Ref = service Ref . get Query Ref ( id ) ;", "if ( query Ref != null ) {", "Class Loader loader = query Ref . get Class Loader ( ) ;", "Thread thread = Thread . current Thread ( ) ;", "thread . set Context Class Loader ( loader ) ; }", "int sequence = h In . read Int ( ) ;", "List < Object > values = ( List ) h In . read Object ( ) ;", "Throwable exn = ( Throwable ) h In . read Object ( Throwable . class ) ;", "boolean is Complete = h In . read Boolean ( ) ;", "if ( log . is Loggable ( log Level ) ) {", "log . log ( log Level , STR_ + values + STR_ + is Complete + STR_ + this + STR_ + STR_ + id + STR_ + service Ref + STR_ + headers + STR_ ) ; }", "if ( query Ref != null ) {", "if ( query Ref . accept ( headers , values , sequence , is Complete ) ) {", "service Ref . remove Query Ref ( id ) ; }", "if ( exn != null ) {", "service Ref . remove Query Ref ( id ) ;", "query Ref . fail ( headers , exn ) ; } }", "else if ( log . is Loggable ( Level . WARNING ) ) {", "log . warning ( STR_ + id + STR_ + service Ref + STR_ + headers ) ; } }"]}
{"ids": "48869", "code": ["public static int rect Crossings For Path ( Path Iterator pi , double rxmin , double rymin , double rxmax , double rymax ) {", "if ( rxmax <= rxmin || rymax <= rymin ) {", "return NUM_ ; }", "if ( pi . is Done ( ) ) {", "return NUM_ ; }", "double coords [ ] = new double [ NUM_ ] ;", "if ( pi . current Segment ( coords ) != Path Iterator . SEG MOVETO ) {", "throw new Illegal Path State Exception ( STR_ + STR_ ) ; }", "pi . next ( ) ;", "double curx , cury , movx , movy , endx , endy ;", "curx = movx = coords [ NUM_ ] ;", "cury = movy = coords [ NUM_ ] ;", "int crossings = NUM_ ;", "while ( crossings != RECT INTERSECTS && ! pi . is Done ( ) ) {", "switch ( pi . current Segment ( coords ) ) {", "case Path Iterator . SEG MOVETO :", "if ( curx != movx || cury != movy ) {", "crossings = rect Crossings For Line ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; }", "movx = curx = coords [ NUM_ ] ;", "movy = cury = coords [ NUM_ ] ;", "break ;", "case Path Iterator . SEG LINETO :", "endx = coords [ NUM_ ] ;", "endy = coords [ NUM_ ] ;", "crossings = rect Crossings For Line ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , endx , endy ) ;", "curx = endx ;", "cury = endy ;", "break ;", "case Path Iterator . SEG QUADTO :", "endx = coords [ NUM_ ] ;", "endy = coords [ NUM_ ] ;", "crossings = rect Crossings For Quad ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , coords [ NUM_ ] , coords [ NUM_ ] , endx , endy , NUM_ ) ;", "curx = endx ;", "cury = endy ;", "break ;", "case Path Iterator . SEG CUBICTO :", "endx = coords [ NUM_ ] ;", "endy = coords [ NUM_ ] ;", "crossings = rect Crossings For Cubic ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , coords [ NUM_ ] , coords [ NUM_ ] , coords [ NUM_ ] , coords [ NUM_ ] , endx , endy , NUM_ ) ;", "curx = endx ;", "cury = endy ;", "break ;", "case Path Iterator . SEG CLOSE :", "if ( curx != movx || cury != movy ) {", "crossings = rect Crossings For Line ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; }", "curx = movx ;", "cury = movy ;", "break ; }", "pi . next ( ) ; }", "if ( crossings != RECT INTERSECTS && ( curx != movx || cury != movy ) ) {", "crossings = rect Crossings For Line ( crossings , rxmin , rymin , rxmax , rymax , curx , cury , movx , movy ) ; }", "return crossings ; }"]}
{"ids": "73399", "code": ["public void update Field Visibility ( Neuron Update Rule rule ) {", "boolean bounded = rule instanceof Bounded Update Rule ;", "boolean clip = false ;", "set Bounds Panel Visible ( bounded ) ;", "if ( bounded ) {", "clip = rule instanceof Clippable Update Rule ;", "clipping Drop Down . set Selected ( clip ) ; }", "set Clipping Panel Visible ( clip ) ;", "set Bounds Enabled ( bounded ) ; }"]}
{"ids": "67611", "code": ["@ Override public int hash Code ( ) {", "int hash = NUM_ ;", "if ( alt Format != null ) {", "hash += alt Format . hash Code ( ) ; }", "if ( projection != null ) {", "hash = hash * NUM_ ;", "hash += projection . hash Code ( ) ; }", "if ( version != null ) {", "hash = hash * NUM_ ;", "hash += version . hash Code ( ) ; }", "return hash ; }"]}
{"ids": "38388", "code": ["public void remove Ok Listener ( Action Listener a ) {", "m ok But . remove Action Listener ( a ) ; }"]}
{"ids": "4923", "code": ["void change item shape ( Brd Item p item , int p shape no , Shape Tile p new shape ) {", "Awtree Node Leaf [ ] old entries = p item . get search tree entries ( this ) ;", "Awtree Node Leaf [ ] new leaf arr = new Awtree Node Leaf [ old entries . length ] ;", "Shape Tile [ ] new precalculated tree shapes = new Shape Tile [ old entries . length ] ;", "remove leaf ( old entries [ p shape no ] ) ;", "for ( int i = NUM_ ; i < new precalculated tree shapes . length ; ++ i ) {", "if ( i == p shape no ) {", "new precalculated tree shapes [ i ] = p new shape ; }", "else {", "new precalculated tree shapes [ i ] = p item . get tree shape ( this , i ) ;", "new leaf arr [ i ] = old entries [ i ] ; } }", "p item . set precalculated tree shapes ( new precalculated tree shapes , this ) ;", "new leaf arr [ p shape no ] = insert ( p item , p shape no ) ;", "p item . set search tree entries ( this , new leaf arr ) ; }"]}
{"ids": "9655", "code": ["public J Quick Start Pane ( Kse Frame kse Frame ) {", "super ( GRADIENT COLOR 1 , GRADIENT COLOR 2 ) ;", "this . kse Frame = kse Frame ;", "new Drop Target ( this , this ) ;", "init Components ( ) ; }"]}
{"ids": "362", "code": ["protected String decode ( String url String ) {", "try {", "Class clazz = URL Decoder . class ;", "Method method = clazz . get Declared Method ( STR_ , new Class [ ] { String . class , String . class } ) ;", "if ( url String . index Of ( STR_ ) >= NUM_ ) {", "int len = url String . length ( ) ;", "String Buffer buf = new String Buffer ( len ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "char c = url String . char At ( i ) ;", "if ( c == STR_ ) buf . append ( STR_ ) ;", "else buf . append ( c ) ; }", "url String = buf . to String ( ) ; }", "Object result = method . invoke ( null , new Object [ ] { url String , STR_ } ) ;", "if ( result != null ) return ( String ) result ; }", "catch ( Exception e ) { }", "boolean replaced = false ;", "byte [ ] encoded Bytes = url String . get Bytes ( ) ;", "int encoded Length = encoded Bytes . length ;", "byte [ ] decoded Bytes = new byte [ encoded Length ] ;", "int decoded Length = NUM_ ;", "for ( int i = NUM_ ; i < encoded Length ; i ++ ) {", "byte b = encoded Bytes [ i ] ;", "if ( b == STR_ ) {", "if ( i + NUM_ >= encoded Length ) throw new Illegal Argument Exception ( STR_ + url String + STR_ ) ;", "byte enc 1 = encoded Bytes [ ++ i ] ;", "byte enc 2 = encoded Bytes [ ++ i ] ;", "b = ( byte ) ( ( hex To Byte ( enc 1 ) << NUM_ ) + hex To Byte ( enc 2 ) ) ;", "replaced = true ; }", "decoded Bytes [ decoded Length ++ ] = b ; }", "if ( ! replaced ) return url String ;", "try {", "return new String ( decoded Bytes , NUM_ , decoded Length , STR_ ) ; }", "catch ( Unsupported Encoding Exception e ) {", "return new String ( decoded Bytes , NUM_ , decoded Length ) ; } }"]}
{"ids": "27476", "code": ["public static String indent ( final int depth ) {", "if ( depth < NUM_ ) {", "return STR_ ; }", "return ws . substring ( NUM_ , Math . min ( ws . length ( ) , depth * NUM_ ) ) ; }"]}
{"ids": "4858", "code": ["public Exceptionless Output Stream ( Output Stream out ) {", "super ( new Data Output Stream ( out ) ) ;", "dos = ( Data Output Stream ) this . out ; }"]}
{"ids": "69749", "code": ["public T advance To Element ( Predicate < T > predicate ) {", "Node < T > start = head ;", "if ( head == null ) return null ;", "do {", "T curr Element = advance ( ) ;", "if ( predicate . test ( curr Element ) ) {", "return curr Element ; } }", "while ( head != start ) ;", "return null ; }"]}
{"ids": "54203", "code": ["public void add Trace ( final Trace trace ) {", "trace List . add ( trace ) ;", "add ( trace ) ;", "revalidate ( ) ; }"]}
{"ids": "26640", "code": ["public static void ping All Devices ( String message ) throws IO Exception {", "Sender sender = new Sender ( Ids . API KEY ) ;", "for ( Device Info device Info : endpoint . list Device Info ( ) ) {", "do Send Via Gcm ( message , sender , device Info ) ; } }"]}
{"ids": "40722", "code": ["public static void w ( String tag , String msg , Object ... args ) {", "if ( s Level > LEVEL WARNING ) {", "return ; }", "if ( args . length > NUM_ ) {", "msg = String . format ( msg , args ) ; }", "Log . w ( tag , msg ) ; }"]}
{"ids": "10025", "code": ["private void find Matches In Contexts ( List < Number Context > contexts , boolean is Valid , boolean is Possible , String region , String number ) {", "if ( is Valid ) {", "do Test In Context ( number , region , contexts , Leniency . VALID ) ; }", "else {", "for ( Number Context context : contexts ) {", "String text = context . leading Text + number + context . trailing Text ;", "assert True ( STR_ + text , has No Matches ( phone Util . find Numbers ( text , region ) ) ) ; } }", "if ( is Possible ) {", "do Test In Context ( number , region , contexts , Leniency . POSSIBLE ) ; }", "else {", "for ( Number Context context : contexts ) {", "String text = context . leading Text + number + context . trailing Text ;", "assert True ( STR_ + text , has No Matches ( phone Util . find Numbers ( text , region , Leniency . POSSIBLE , Long . MAX VALUE ) ) ) ; } } }"]}
{"ids": "14479", "code": ["@ Override public int hash Code ( ) {", "int code = NUM_ ;", "if ( e Subjects != null ) {", "for ( Entitlement Subject e Subject : e Subjects ) {", "code += e Subject . hash Code ( ) ; } }", "if ( p Subject Name != null ) {", "code += p Subject Name . hash Code ( ) ; }", "return code ; }"]}
{"ids": "15893", "code": ["private void assign Random Lower Triangular Matrix ( int n , Secure Random sr ) {", "num Rows = n ;", "num Columns = n ;", "length = ( n + NUM_ ) > > > NUM_ ;", "matrix = new int [ num Rows ] [ length ] ;", "for ( int i = NUM_ ; i < num Rows ; i ++ ) {", "int q = i > > > NUM_ ;", "int r = i & NUM_ ;", "int s = NUM_ - r ;", "r = NUM_ << r ;", "for ( int j = NUM_ ; j < q ; j ++ ) {", "matrix [ i ] [ j ] = sr . next Int ( ) ; }", "matrix [ i ] [ q ] = ( sr . next Int ( ) > > > s ) | r ;", "for ( int j = q + NUM_ ; j < length ; j ++ ) {", "matrix [ i ] [ j ] = NUM_ ; } } }"]}
{"ids": "25029", "code": ["private boolean load With Inspect It Class Loader ( String class Name ) {", "return class Name . starts With ( CLASS NAME PREFIX ) ; }"]}
{"ids": "55524", "code": ["public static void add Custom Commands ( String commands , Context Menu m ) {", "Matcher matcher = CUSTOM COMMANDS PATTERN . matcher ( commands ) ;", "boolean sep = false ;", "while ( matcher . find ( ) ) {", "String match = matcher . group ( ) ;", "if ( match . equals ( STR_ ) ) {", "sep = true ; }", "else {", "String command = matcher . group ( NUM_ ) ;", "String submenu = null ;", "if ( match . starts With ( STR_ ) ) {", "submenu = CUSTOM COMMANDS SUBMENU ; }", "if ( sep ) {", "m . add Separator ( submenu ) ; }", "m . add Sub Item ( STR_ + command , Helper . replace Underscore With Space ( command ) , submenu ) ;", "sep = false ; } } }"]}
{"ids": "46692", "code": ["public void paint Border ( Component c , Graphics g , int x , int y , int width , int height ) {", "Border border = get Border ( ) ;", "String title = get Title ( ) ;", "if ( ( title != null ) && ! title . is Empty ( ) ) {", "int edge = ( border instanceof Titled Border ) ? NUM_ : EDGE SPACING ;", "J Label label = get Label ( c ) ;", "Dimension size = label . get Preferred Size ( ) ;", "Insets insets = get Border Insets ( border , c , new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "int border X = x + edge ;", "int border Y = y + edge ;", "int border W = width - edge - edge ;", "int border H = height - edge - edge ;", "int label Y = y ;", "int label H = size . height ;", "int position = get Position ( ) ;", "switch ( position ) {", "case ABOVE TOP :", "insets . left = NUM_ ;", "insets . right = NUM_ ;", "border Y += label H - edge ;", "border H -= label H - edge ;", "break ;", "case TOP :", "insets . top = edge + insets . top / NUM_ - label H / NUM_ ;", "if ( insets . top < edge ) {", "border Y -= insets . top ;", "border H += insets . top ; }", "else {", "label Y += insets . top ; }", "break ;", "case BELOW TOP :", "label Y += insets . top + edge ;", "break ;", "case ABOVE BOTTOM :", "label Y += height - label H - insets . bottom - edge ;", "break ;", "case BOTTOM :", "label Y += height - label H ;", "insets . bottom = edge + ( insets . bottom - label H ) / NUM_ ;", "if ( insets . bottom < edge ) {", "border H += insets . bottom ; }", "else {", "label Y -= insets . bottom ; }", "break ;", "case BELOW BOTTOM :", "insets . left = NUM_ ;", "insets . right = NUM_ ;", "label Y += height - label H ;", "border H -= label H - edge ;", "break ; }", "insets . left += edge + TEXT INSET H ;", "insets . right += edge + TEXT INSET H ;", "int label X = x ;", "int label W = width - insets . left - insets . right ;", "if ( label W > size . width ) {", "label W = size . width ; }", "switch ( get Justification ( c ) ) {", "case LEFT :", "label X += insets . left ;", "break ;", "case RIGHT :", "label X += width - insets . right - label W ;", "break ;", "case CENTER :", "label X += ( width - label W ) / NUM_ ;", "break ; }", "if ( border != null ) {", "if ( ( position != TOP ) && ( position != BOTTOM ) ) {", "border . paint Border ( c , g , border X , border Y , border W , border H ) ; }", "else {", "Graphics g 2 = g . create ( ) ;", "if ( g 2 instanceof Graphics 2 D ) {", "Graphics 2 D g 2 d = ( Graphics 2 D ) g 2 ;", "Path 2 D path = new Path 2 D . Float ( ) ;", "path . append ( new Rectangle ( border X , border Y , border W , label Y - border Y ) , false ) ;", "path . append ( new Rectangle ( border X , label Y , label X - border X - TEXT SPACING , label H ) , false ) ;", "path . append ( new Rectangle ( label X + label W + TEXT SPACING , label Y , border X - label X + border W - label W - TEXT SPACING , label H ) , false ) ;", "path . append ( new Rectangle ( border X , label Y + label H , border W , border Y - label Y + border H - label H ) , false ) ;", "g 2 d . clip ( path ) ; }", "border . paint Border ( c , g 2 , border X , border Y , border W , border H ) ;", "g 2 . dispose ( ) ; } }", "g . translate ( label X , label Y ) ;", "label . set Size ( label W , label H ) ;", "label . paint ( g ) ;", "g . translate ( - label X , - label Y ) ; }", "else if ( border != null ) {", "border . paint Border ( c , g , x , y , width , height ) ; } }"]}
{"ids": "63138", "code": ["public int next Clear Bit ( int from Index ) {", "int i = from Index > > ADDRESS BITS ;", "int max = data . length ;", "for ( ; i < max ; i ++ ) {", "if ( data [ i ] == - NUM_ ) {", "continue ; }", "int j = Math . max ( from Index , i << ADDRESS BITS ) ;", "for ( int end = j + NUM_ ; j < end ; j ++ ) {", "if ( ! get ( j ) ) {", "return j ; } } }", "return max << ADDRESS BITS ; }"]}
{"ids": "73789", "code": ["private final void next Request ( ) {", "pacing Timer . stop ( ) ;", "pacing Timer . restart ( ) ;", "reply Try Count = NUM_ ; }"]}
{"ids": "7134", "code": ["@ Override public boolean equals ( Object o ) {", "if ( this == o ) {", "return true ; }", "if ( o == null || get Class ( ) != o . get Class ( ) ) {", "return false ; }", "Account account = ( Account ) o ;", "if ( username != null ? ! username . equals ( account . username ) : account . username != null ) {", "return false ; }", "return true ; }"]}
{"ids": "23953", "code": ["public static int identify Pid ( final String name ) throws Pid Unavailable Exception {", "try {", "final int index = name . index Of ( STR_ ) ;", "if ( index < NUM_ ) {", "throw new Pid Unavailable Exception ( STR_ + name ) ; }", "return Integer . value Of ( name . substring ( NUM_ , index ) ) ; }", "catch ( Number Format Exception e ) {", "throw new Pid Unavailable Exception ( STR_ + name , e ) ; } }"]}
{"ids": "11094", "code": ["protected Object next ( ) {", "int i = NUM_ ;", "char [ ] c ;", "try {", "i = st . next Token ( ) ; }", "catch ( IO Exception e ) {", "Debug . error ( STR_ + e . to String ( ) + STR_ ) ; }", "if ( ( i == Stream Tokenizer . TT EOF ) || ( i == NUM_ ) ) return EOF ;", "if ( i == Stream Tokenizer . TT WORD ) return new Symbol ( st . sval , NUM_ ) ;", "if ( ( i == STR_ ) || ( i == STR_ ) ) return st . sval ;", "if ( i == Stream Tokenizer . TT NUMBER ) return new Double ( st . nval ) ;", "if ( ( i == STR_ ) || ( i == STR_ ) || ( i == STR_ ) ) return LP ;", "if ( ( i == STR_ ) || ( i == STR_ ) || ( i == STR_ ) ) return RP ;", "c = new char [ NUM_ ] ;", "c [ NUM_ ] = ( char ) i ;", "return new Symbol ( new String ( c ) , NUM_ ) ; }"]}
{"ids": "23666", "code": ["public static void copy ( File source , File dest ) throws IO Exception {", "if ( source . is Directory ( ) ) {", "dest . mkdir ( ) ;", "for ( File child : list Files ( source ) ) {", "copy ( child , new File ( dest , child . get Name ( ) ) ) ; } }", "else {", "if ( source . exists ( ) ) {", "long lm = source . last Modified ( ) ;", "if ( dest . is Directory ( ) ) {", "dest = new File ( dest , source . get Name ( ) ) ; }", "File Output Stream fos = new File Output Stream ( dest ) ;", "try {", "File Input Stream fis = new File Input Stream ( source ) ;", "try {", "if ( USE NIO ) {", "nio Copy ( fos , fis ) ; }", "else {", "oio Copy ( source , fos , fis ) ; } }", "finally {", "fis . close ( ) ; } }", "finally {", "fos . close ( ) ; }", "dest . set Executable ( source . can Execute ( ) , true ) ;", "dest . set Last Modified ( lm ) ; } } }"]}
{"ids": "24097", "code": ["private void notify Resource Event Listeners ( Resource Event event , Object resource ) {", "for ( Iterator < Resource Events Listener > iter = resource Listeners . iterator ( ) ; iter . has Next ( ) ; ) {", "try {", "Resource Events Listener listener = ( Resource Events Listener ) iter . next ( ) ;", "listener . handle Event ( event , resource ) ; }", "catch ( Cancel Exception e ) { }", "catch ( Gem Fire Security Exception | Management Exception ex ) {", "if ( event == Resource Event . CACHE CREATE ) {", "throw ex ; }", "else {", "logger . warn ( ex . get Message ( ) , ex ) ; } }", "catch ( Exception err ) {", "logger . warn ( err . get Message ( ) , err ) ; }", "catch ( Virtual Machine Error e ) {", "System Failure . initiate Failure ( e ) ;", "throw e ; }", "catch ( Throwable t ) {", "System Failure . check Failure ( ) ;", "logger . warn ( t . get Message ( ) , t ) ; } } }"]}
{"ids": "56293", "code": ["private void infer Caller ( ) {", "need To Infer Caller = false ;", "Throwable throwable = new Throwable ( ) ;", "boolean looking For Logger = true ;", "for ( final Stack Trace Element frame : throwable . get Stack Trace ( ) ) {", "String cname = frame . get Class Name ( ) ;", "boolean is Logger Impl = is Logger Impl Frame ( cname ) ;", "if ( looking For Logger ) {", "if ( is Logger Impl ) {", "looking For Logger = false ; } }", "else {", "if ( ! is Logger Impl ) {", "if ( ! cname . starts With ( STR_ ) && ! cname . starts With ( STR_ ) ) {", "set Source Class Name ( cname ) ;", "set Source Method Name ( frame . get Method Name ( ) ) ;", "return ; } } } } }"]}
{"ids": "2164", "code": ["final int record Exceptional Completion ( Throwable ex ) {", "int s ;", "if ( ( s = status ) >= NUM_ ) {", "int h = System . identity Hash Code ( this ) ;", "final Reentrant Lock lock = exception Table Lock ;", "lock . lock ( ) ;", "try {", "expunge Stale Exceptions ( ) ;", "Exception Node [ ] t = exception Table ;", "int i = h & ( t . length - NUM_ ) ;", "for ( Exception Node e = t [ i ] ; ; e = e . next ) {", "if ( e == null ) {", "t [ i ] = new Exception Node ( this , ex , t [ i ] , exception Table Ref Queue ) ;", "break ; }", "if ( e . get ( ) == this ) break ; } }", "finally {", "lock . unlock ( ) ; }", "s = set Completion ( EXCEPTIONAL ) ; }", "return s ; }"]}
{"ids": "34056", "code": ["private void analyze Resulting Tls Context And Write File ( Tls Context tls Context , String folder , String field Name , String workflow Name , long phase ) throws JAXB Exception , IO Exception {", "if ( Tls Context Analyzer . contains Full Workflow With Missing Message ( tls Context ) || Tls Context Analyzer . contains Server Finished With Modified Handshake ( tls Context ) || Tls Context Analyzer . contains Full Workflow With Modified Message ( tls Context ) ) {", "String file Name Basic = create File Name ( folder , phase , tls Context , field Name ) ;", "File Output Stream fos = new File Output Stream ( file Name Basic + workflow Name + STR_ ) ;", "Workflow Trace Serializer . write ( fos , tls Context . get Workflow Trace ( ) ) ; } }"]}
{"ids": "1062", "code": ["private static String to Variable Name ( String str ) {", "String Buffer rtn = new String Buffer ( ) ;", "char [ ] chars = str . to Char Array ( ) ;", "long changes = NUM_ ;", "boolean do Correct = true ;", "for ( int i = NUM_ ; i < chars . length ; i ++ ) {", "char c = chars [ i ] ;", "if ( i == NUM_ && ( c >= STR_ && c <= STR_ ) ) rtn . append ( STR_ + c ) ;", "else if ( ( c >= STR_ && c <= STR_ ) || ( c >= STR_ && c <= STR_ ) || ( c >= STR_ && c <= STR_ ) || c == STR_ || c == STR_ ) rtn . append ( c ) ;", "else {", "do Correct = false ;", "rtn . append ( STR_ ) ;", "changes += ( c * ( i + NUM_ ) ) ; } }", "if ( changes > NUM_ ) rtn . append ( changes ) ;", "if ( do Correct ) return correct Reserved Word ( rtn . to String ( ) ) ;", "return rtn . to String ( ) ; }"]}
{"ids": "7889", "code": ["public Year ( int year ) {", "if ( ( year < Year . MINIMUM YEAR ) || ( year > Year . MAXIMUM YEAR ) ) {", "throw new Illegal Argument Exception ( STR_ + year + STR_ ) ; }", "this . year = ( short ) year ;", "peg ( Calendar . get Instance ( ) ) ; }"]}
{"ids": "21948", "code": ["@ Suppress Warnings ( STR_ ) public List < String > host Vcenter Change Details ( URI host Id , URI cluster Id , URI datacenter Id , boolean is Vcenter ) {", "List < String > result = Lists . new Array List ( ) ;", "Host host = db Client . query Object ( Host . class , host Id ) ;", "Vcenter Data Center datacenter = db Client . query Object ( Vcenter Data Center . class , datacenter Id ) ;", "if ( host != null && datacenter != null ) {", "result . add ( Compute System Dialog Properties . get Message ( STR_ , host . get Label ( ) , datacenter . get Label ( ) ) ) ;", "result . add All ( host Cluster Change Details ( host Id , cluster Id , datacenter Id , is Vcenter ) ) ; }", "return result ; }"]}
{"ids": "76271", "code": ["public boolean delete Statement ( Test Case test , int position ) throws Construction Failed Exception {", "if ( ! Constraint Verifier . can Delete ( test , position ) ) {", "return false ; }", "logger . debug ( STR_ , position ) ;", "Set < Integer > to Delete = new Linked Hash Set < > ( ) ;", "recursive Delete Inclusion ( test , to Delete , position ) ;", "List < Integer > pos = new Array List < > ( to Delete ) ;", "Collections . sort ( pos , Collections . reverse Order ( ) ) ;", "for ( Integer i : pos ) {", "logger . debug ( STR_ , i ) ;", "test . remove ( i ) ; }", "return true ; }"]}
{"ids": "43313", "code": ["public boolean is Compound ( ) {", "return splits . size ( ) != NUM_ ; }"]}
{"ids": "28138", "code": ["@ Override public Set < Statement > sum ( final IGAS State < Set < Statement > , Set < Statement > , Set < Statement > > state , final Set < Statement > left , final Set < Statement > right ) {", "final Set < Statement > tmp = new Linked Hash Set < Statement > ( left ) ;", "tmp . add All ( right ) ;", "return tmp ; }"]}
{"ids": "30137", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return HOST ;", "case NUM_ :", "return PORT ;", "case NUM_ :", "return ID ;", "case NUM_ :", "return V NODES ;", "case NUM_ :", "return PING FREQUENCY ;", "case NUM_ :", "return SERVICE NAME ;", "case NUM_ :", "return STATE ;", "case NUM_ :", "return TIMESTAMP ;", "default :", "return null ; } }"]}
{"ids": "19544", "code": ["private static int categorize By Year 2014 Method ( Context c ) {", "Array List < Integer > component Years = new Array List < Integer > ( ) ;", "conditionally Add ( component Years , get Num Cores Year ( ) ) ;", "conditionally Add ( component Years , get Clock Speed Year ( ) ) ;", "conditionally Add ( component Years , get Ram Year ( c ) ) ;", "if ( component Years . is Empty ( ) ) return CLASS UNKNOWN ;", "Collections . sort ( component Years ) ;", "if ( ( component Years . size ( ) & NUM_ ) == NUM_ ) {", "return component Years . get ( component Years . size ( ) / NUM_ ) ; }", "else {", "int base Index = component Years . size ( ) / NUM_ - NUM_ ;", "return component Years . get ( base Index ) + ( component Years . get ( base Index + NUM_ ) - component Years . get ( base Index ) ) / NUM_ ; } }"]}
{"ids": "15843", "code": ["public Time ( Date time ) {", "Simple Time Zone tz = new Simple Time Zone ( NUM_ , STR_ ) ;", "Simple Date Format date F = new Simple Date Format ( STR_ ) ;", "date F . set Time Zone ( tz ) ;", "String d = date F . format ( time ) + STR_ ;", "int year = Integer . parse Int ( d . substring ( NUM_ , NUM_ ) ) ;", "if ( year < NUM_ || year > NUM_ ) {", "this . time = new DER Generalized Time ( d ) ; }", "else {", "this . time = new DERUTC Time ( d . substring ( NUM_ ) ) ; } }"]}
{"ids": "16922", "code": ["public Action Request Helper then ( Action Request Helper next Action ) {", "m Next . add ( next Action ) ;", "return this ; }"]}
{"ids": "68289", "code": ["protected int [ ] read Color Table ( final int ncolors ) {", "final int nbytes = NUM_ * ncolors ;", "int [ ] tab = null ;", "final byte [ ] c = new byte [ nbytes ] ;", "try {", "raw Data . get ( c ) ;", "tab = new int [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < ncolors ) {", "final int r = ( c [ j ++ ] ) & NUM_ ;", "final int g = ( c [ j ++ ] ) & NUM_ ;", "final int b = ( c [ j ++ ] ) & NUM_ ;", "tab [ i ++ ] = NUM_ | ( r << NUM_ ) | ( g << NUM_ ) | b ; } }", "catch ( final Buffer Underflow Exception e ) {", "Log . w ( TAG , STR_ , e ) ;", "status = STATUS FORMAT ERROR ; }", "return tab ; }"]}
{"ids": "1435", "code": ["public boolean is Current ( String str ) {", "if ( pos + str . length ( ) > lc Text . length ) return false ;", "for ( int i = str . length ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "if ( str . char At ( i ) != lc Text [ pos + i ] ) return false ; }", "return true ; }"]}
{"ids": "44047", "code": ["private static String matchable Path ( String path ) {", "if ( path == null ) {", "return STR_ ; }", "else if ( path . ends With ( STR_ ) ) {", "return path ; }", "else {", "return path + STR_ ; } }"]}
{"ids": "82595", "code": ["public void assert Usable ( ) throws IO Exception {", "if ( throwable . get ( ) == null ) {", "if ( connection == null ) {", "throw new IO Exception ( STR_ ) ; }", "return ; }", "Throwable t = throwable . get ( ) ;", "if ( t instanceof IO Exception ) {", "throw ( IO Exception ) t ; }", "else {", "throw Throwables . propagate ( t ) ; } }"]}
{"ids": "52755", "code": ["protected static double compute H ( final int i , double [ ] dist i , double [ ] pij i , double mbeta ) {", "double sum P = NUM_ ;", "for ( int j = NUM_ ; j < i ; j ++ ) {", "sum P += ( pij i [ j ] = Math . exp ( dist i [ j ] * mbeta ) ) ; }", "for ( int j = i + NUM_ ; j < dist i . length ; j ++ ) {", "sum P += ( pij i [ j ] = Math . exp ( dist i [ j ] * mbeta ) ) ; }", "if ( ! ( sum P > NUM_ ) ) {", "return Double . NEGATIVE INFINITY ; }", "final double s = NUM_ / sum P ;", "double sum = NUM_ ;", "for ( int j = NUM_ ; j < dist i . length ; j ++ ) {", "sum += dist i [ j ] * ( pij i [ j ] *= s ) ; }", "return Math . log ( sum P ) - mbeta * sum ; }"]}
{"ids": "77390", "code": ["private Collection < Insanity > check Subreaders ( Map Of Sets < Integer , Cache Entry > val Id To Items , Map Of Sets < Reader Field , Integer > reader Field To Val Ids ) {", "final List < Insanity > insanity = new Array List < > ( NUM_ ) ;", "Map < Reader Field , Set < Reader Field > > bad Children = new Hash Map < > ( NUM_ ) ;", "Map Of Sets < Reader Field , Reader Field > bad Kids = new Map Of Sets < > ( bad Children ) ;", "Map < Integer , Set < Cache Entry > > vi To Item Sets = val Id To Items . get Map ( ) ;", "Map < Reader Field , Set < Integer > > rf To Val Id Sets = reader Field To Val Ids . get Map ( ) ;", "Set < Reader Field > seen = new Hash Set < > ( NUM_ ) ;", "Set < Reader Field > reader Fields = rf To Val Id Sets . key Set ( ) ;", "for ( final Reader Field rf : reader Fields ) {", "if ( seen . contains ( rf ) ) continue ;", "List < Object > kids = get All Descendant Reader Keys ( rf . reader Key ) ;", "for ( Object kid Key : kids ) {", "Reader Field kid = new Reader Field ( kid Key , rf . field Name ) ;", "if ( bad Children . contains Key ( kid ) ) {", "bad Kids . put ( rf , kid ) ;", "bad Kids . put All ( rf , bad Children . get ( kid ) ) ;", "bad Children . remove ( kid ) ; }", "else if ( rf To Val Id Sets . contains Key ( kid ) ) {", "bad Kids . put ( rf , kid ) ; }", "seen . add ( kid ) ; }", "seen . add ( rf ) ; }", "for ( final Reader Field parent : bad Children . key Set ( ) ) {", "Set < Reader Field > kids = bad Children . get ( parent ) ;", "List < Cache Entry > bad Entries = new Array List < > ( kids . size ( ) * NUM_ ) ; {", "for ( final Integer value : rf To Val Id Sets . get ( parent ) ) {", "bad Entries . add All ( vi To Item Sets . get ( value ) ) ; } }", "for ( final Reader Field kid : kids ) {", "for ( final Integer value : rf To Val Id Sets . get ( kid ) ) {", "bad Entries . add All ( vi To Item Sets . get ( value ) ) ; } }", "Cache Entry [ ] badness = new Cache Entry [ bad Entries . size ( ) ] ;", "badness = bad Entries . to Array ( badness ) ;", "insanity . add ( new Insanity ( Insanity Type . SUBREADER , STR_ + parent . to String ( ) , badness ) ) ; }", "return insanity ; }"]}
{"ids": "25119", "code": ["public static String add Protocol To Url ( String url ) {", "if ( ! url . starts With ( HTTP PROTOCOL PREFIX ) && ! url . starts With ( HTTPS PROTOCOL PREFIX ) && ! url . starts With ( FILE PROTOCOL PREFIX ) ) {", "if ( url . starts With ( FILE PREFIX ) ) {", "url = FILE PROTOCOL PREFIX + url ; }", "else {", "url = HTTP PROTOCOL PREFIX + url ; } }", "return url ; }"]}
{"ids": "81057", "code": ["public static String method Name To Property Name ( String method Name ) {", "if ( method Name . starts With ( STR_ ) ) method Name = method Name . substring ( NUM_ ) ;", "else if ( method Name . starts With ( STR_ ) ) method Name = method Name . substring ( NUM_ ) ;", "else if ( method Name . starts With ( STR_ ) ) method Name = method Name . substring ( NUM_ ) ;", "if ( method Name . length ( ) == NUM_ ) return null ;", "char ch = method Name . char At ( NUM_ ) ;", "if ( Character . is Upper Case ( ch ) && ( method Name . length ( ) == NUM_ || ! Character . is Upper Case ( method Name . char At ( NUM_ ) ) ) ) {", "method Name = Character . to Lower Case ( ch ) + method Name . substring ( NUM_ ) ; }", "return method Name ; }"]}
{"ids": "80999", "code": ["private String Builder create Indent ( int indent ) {", "String Builder one Indent = create Indent ( ) ;", "String Builder ret = new String Builder ( ) ;", "while ( indent -- > NUM_ ) {", "ret . append ( one Indent ) ; }", "return ret ; }"]}
{"ids": "42252", "code": ["protected Class Loader ( ) {", "this ( get System Class Loader ( ) ) ; }"]}
{"ids": "21706", "code": ["public static void matchv Pool With Storage Pools ( Virtual Pool vpool , List < Storage Pool > pools , Db Client db Client , Coordinator Client coordinator , String matcher Group Name , String Buffer error Message ) {", "List < Storage Pool > filter Pools = get Matched Pool With Storage Pools ( vpool , pools , Virtual Pool . get Protection Settings ( vpool , db Client ) , Virtual Pool . get Remote Protection Settings ( vpool , db Client ) , Virtual Pool . get File Remote Protection Settings ( vpool , db Client ) , db Client , coordinator , matcher Group Name , error Message ) ;", "update Invalid And Matched Pools For Vpool ( vpool , filter Pools , pools , db Client ) ; }"]}
{"ids": "66618", "code": ["private static int [ ] trim Array ( int [ ] array , int size ) {", "if ( size < NUM_ ) {", "throw new Illegal Argument Exception ( ) ; }", "if ( size == NUM_ ) {", "return NO ERRORS ; }", "int [ ] a = new int [ size ] ;", "System . arraycopy ( array , NUM_ , a , NUM_ , size ) ;", "return a ; }"]}
{"ids": "34865", "code": ["static < T > boolean remove If ( Iterable < T > remove From , Predicate < ? super T > predicate ) {", "if ( remove From instanceof Random Access && remove From instanceof List ) {", "return remove If From Random Access List ( ( List < T > ) remove From , check Not Null ( predicate ) ) ; }", "return Iterators . remove If ( remove From . iterator ( ) , predicate ) ; }"]}
{"ids": "22503", "code": ["@ Before Class public static void create Ecom Connection ( ) {", "boolean was Exception = false ;", "try {", "connection = new Ecom Connection ( create Connection Info ( ) , create Listener ( ) , new Cim Filter Map ( ) ) ; }", "catch ( Exception e ) {", "was Exception = true ; }", "Assert . assert False ( was Exception ) ; }"]}
{"ids": "36744", "code": ["public mx Rectangle graph Model Changed ( mx I Graph Model sender , List < mx Undoable Change > changes , Boolean rv ) {", "int thresh = get Changes Repaint Threshold ( ) ;", "boolean ignore Dirty = thresh > NUM_ && changes . size ( ) > thresh ;", "if ( ! ignore Dirty ) {", "Iterator < mx Undoable Change > it = changes . iterator ( ) ;", "while ( it . has Next ( ) ) {", "if ( it . next ( ) instanceof mx Root Change ) {", "ignore Dirty = true ;", "break ; } } }", "Array List < Object > changed Cells = new Array List < Object > ( ) ;", "mx Rectangle dirty = process Changes ( changes , true , ignore Dirty , changed Cells ) ;", "if ( ! rv ) {", "if ( changed Cells != null ) {", "for ( Object changed Cell : changed Cells ) {", "mx Cell State parent State = view . get State ( model . get Parent ( changed Cell ) , true ) ;", "view . validate ( parent State , changed Cell , false ) ; } } }", "else view . validate ( ) ;", "if ( ! ignore Dirty ) {", "mx Rectangle tmp = process Changes ( changes , false , ignore Dirty ) ;", "if ( tmp != null ) {", "if ( dirty == null ) {", "dirty = tmp ; }", "else {", "dirty . add ( tmp ) ; } } }", "remove Selection Cells ( get Removed Cells For Changes ( changes ) ) ;", "return dirty ; }"]}
{"ids": "27456", "code": ["public void guard ( final Guard r ) throws Interrupted Exception {", "inc Thread ( ) ;", "try {", "r . run ( ) ; }", "catch ( Interrupted Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( e ) ; }", "finally {", "dec Thread ( ) ; } }"]}
{"ids": "39965", "code": ["public void log ( Date time , String message ) {", "try {", "Print Writer w = new Print Writer ( new File Writer ( filename , true ) ) ;", "w . println ( STR_ + format . format ( time ) + STR_ + message ) ;", "w . close ( ) ; }", "catch ( IO Exception e ) { } }"]}
{"ids": "33122", "code": ["protected Resource Info new Element ( int type ) {", "Resource Info result = null ;", "switch ( type ) {", "case I Resource . FILE :", "case I Resource . FOLDER :", "result = new Resource Info ( type ) ;", "break ;", "case I Resource . PROJECT :", "result = new Resource Info ( type ) ;", "break ;", "case I Resource . ROOT :", "result = new Resource Info ( type ) ;", "break ; }", "return result ; }"]}
{"ids": "36186", "code": ["private boolean is Model Useful ( Contingency Matrix cm ) {", "return true ; }"]}
{"ids": "54651", "code": ["public void register Player Observer ( Player Events Observer observer , boolean reply Immediately ) {", "if ( this . connection == null ) return ;", "player Events Observers . add ( observer ) ;", "if ( reply Immediately ) reply With Last Result ( observer ) ;", "if ( player Events Observers . size ( ) == NUM_ ) {", "if ( connection . get Protocol ( ) == Host Connection . PROTOCOL TCP ) {", "connection . register Player Notifications Observer ( this , checker Handler ) ;", "connection . register System Notifications Observer ( this , checker Handler ) ;", "connection . register Input Notifications Observer ( this , checker Handler ) ;", "checker Handler . post ( tcp Checker Runnable ) ; }", "else {", "checker Handler . post ( http Checker Runnable ) ; } } }"]}
{"ids": "37786", "code": ["@ Override public int num Elements ( ) throws Exception {", "if ( m zero R != null ) {", "return NUM_ ; }", "return m Tree . num Nodes ( ) ; }"]}
{"ids": "11658", "code": ["public boolean is Highlightable ( OM Graphic omg ) {", "return true ; }"]}
{"ids": "9306", "code": ["public Rpc Client peer With ( Peer Info server Info , Bootstrap bootstrap , Map < String , Object > attributes ) throws IO Exception {", "Inet Socket Address remote Address = new Inet Socket Address ( server Info . get Host Name ( ) , server Info . get Port ( ) ) ;", "return peer With ( remote Address , bootstrap , attributes ) ; }"]}
{"ids": "32078", "code": ["public Grid Reversed Lines File Reader ( final File file , final int block Size , final String encoding ) throws IO Exception {", "this ( file , block Size , Charset . for Name ( encoding ) ) ; }"]}
{"ids": "28568", "code": ["private void before Name ( ) throws IO Exception {", "int context = peek ( ) ;", "if ( context == NONEMPTY OBJECT ) {", "out . write ( STR_ ) ; }", "else if ( context != EMPTY OBJECT ) {", "throw new Illegal State Exception ( STR_ ) ; }", "newline ( ) ;", "replace Top ( DANGLING NAME ) ; }"]}
{"ids": "60497", "code": ["protected String const Name ( ) {", "return STR_ + name . to Upper Case ( ) ; }"]}
{"ids": "76484", "code": ["public boolean is Timestamp Within Interval ( Date Time timestamp , String interval String ) throws Illegal Argument Exception {", "Interval interval = Interval . parse ( interval String ) ;", "return interval . contains ( timestamp ) ; }"]}
{"ids": "2503", "code": ["private void process Ansi Os Command ( ) {", "if ( ansi Os Command . char At ( NUM_ ) != STR_ || ansi Os Command . char At ( NUM_ ) != STR_ ) {", "Logger . log ( STR_ + ansi Os Command + STR_ ) ;", "return ; } }"]}
{"ids": "80773", "code": ["private void add To Renaming ( Renaming renaming , Hash Set < String > prev Declared , Expr Node expr ) {", "if ( ! ( expr instanceof Op Appl Node ) ) {", "return ; }", "Hash Set < String > new Declared = ( Hash Set < String > ) prev Declared . clone ( ) ;", "Op Appl Node node = ( Op Appl Node ) expr ;", "if ( node . get Unbded Quant Symbols ( ) != null ) {", "for ( int i = NUM_ ; i < node . get Unbded Quant Symbols ( ) . length ; i ++ ) {", "Formal Param Node id = node . get Unbded Quant Symbols ( ) [ i ] ;", "if ( new Declared . contains ( get Current Name ( id , renaming ) ) ) {", "String newname = get New Name ( id , new Declared , renaming ) ;", "new Declared . add ( newname ) ;", "add Current Name ( id , newname , renaming ) ; } } }", "if ( node . get Bded Quant Symbol Lists ( ) != null ) {", "for ( int i = NUM_ ; i < node . get Bded Quant Symbol Lists ( ) . length ; i ++ ) {", "add To Renaming ( renaming , prev Declared , node . get Bded Quant Bounds ( ) [ i ] ) ;", "Formal Param Node [ ] node List = node . get Bded Quant Symbol Lists ( ) [ i ] ;", "for ( int j = NUM_ ; j < node List . length ; j ++ ) {", "Formal Param Node id = node List [ j ] ;", "if ( new Declared . contains ( get Current Name ( id , renaming ) ) ) {", "String newname = get New Name ( id , new Declared , renaming ) ;", "new Declared . add ( newname ) ;", "add Current Name ( id , newname , renaming ) ; } } } }", "for ( int i = NUM_ ; i < node . get Args ( ) . length ; i ++ ) {", "if ( node . get Args ( ) [ i ] instanceof Expr Node ) {", "add To Renaming ( renaming , new Declared , ( Expr Node ) node . get Args ( ) [ i ] ) ; } } }"]}
{"ids": "33648", "code": ["public boolean remove Trigger Group To Never Delete ( String group ) {", "if ( group != null ) return trigger Groups To Never Delete . remove ( group ) ;", "return false ; }"]}
{"ids": "42916", "code": ["public void remove ( Rule rule ) {", "rules . remove ( rule ) ; }"]}
{"ids": "69359", "code": ["private boolean upload All Track Points ( Fusiontables fusiontables , String table Id , Track track ) throws IO Exception {", "int number Of Points = track . get Number Of Points ( ) ;", "List < Location > locations = new Array List < Location > ( MAX POINTS PER UPLOAD ) ;", "Location last Valid Location = null ;", "boolean sent Start Marker = false ;", "int read Count = NUM_ ;", "Location Iterator location Iterator = null ;", "try {", "location Iterator = my Tracks Provider Utils . get Track Point Location Iterator ( track Id , - NUM_ , false , My Tracks Provider Utils . DEFAULT LOCATION FACTORY ) ;", "while ( location Iterator . has Next ( ) ) {", "Location location = location Iterator . next ( ) ;", "locations . add ( location ) ;", "if ( Location Utils . is Valid Location ( location ) ) {", "last Valid Location = location ; }", "if ( ! sent Start Marker && last Valid Location != null ) {", "String name = context . get String ( R . string . marker label start , track . get Name ( ) ) ;", "create New Point ( fusiontables , table Id , name , STR_ , last Valid Location , MARKER TYPE START ) ;", "sent Start Marker = true ; }", "read Count ++ ;", "if ( read Count % MAX POINTS PER UPLOAD == NUM_ ) {", "if ( ! prepare And Upload Points ( fusiontables , table Id , track , locations , false ) ) {", "Log . d ( TAG , STR_ ) ;", "return false ; }", "update Progress ( read Count , number Of Points ) ;", "locations . clear ( ) ; } }", "if ( ! prepare And Upload Points ( fusiontables , table Id , track , locations , true ) ) {", "Log . d ( TAG , STR_ ) ;", "return false ; }", "if ( last Valid Location != null ) {", "String name = context . get String ( R . string . marker label end , track . get Name ( ) ) ;", "Description Generator description Generator = new Description Generator Impl ( context ) ;", "String description = description Generator . generate Track Description ( track , null , null , true ) ;", "create New Point ( fusiontables , table Id , name , description , last Valid Location , MARKER TYPE END ) ; }", "return true ; }", "finally {", "if ( location Iterator != null ) {", "location Iterator . close ( ) ; } } }"]}
{"ids": "74004", "code": ["@ Check Return Value @ Deprecated @ Nonnull public static String join ( @ Nonnull String [ ] s , @ Nonnull String delimiter ) {", "String Builder buffer = new String Builder ( ) ;", "for ( int i = NUM_ ; i < s . length ; i ++ ) {", "buffer . append ( s [ i ] ) ;", "if ( i < s . length - NUM_ ) {", "buffer . append ( delimiter ) ; } }", "return buffer . to String ( ) ; }"]}
{"ids": "64967", "code": ["private void init Select Position ( int position ) {", "if ( m Select Mode == I Selectable . SELECT MODE SINGLE ) {", "if ( m Selected Position == I Selectable . INVALID POSITION ) {", "m Selected Position = position ; } }", "else if ( m Select Mode == I Selectable . SELECT MODE MULTI ) {", "if ( ! m Selected Positions . contains ( position ) ) m Selected Positions . add ( position ) ; }", "else {", "throw new Runtime Exception ( ) ; } }"]}
{"ids": "3737", "code": ["@ Override public Path Impl scheme Walk ( String user Path , Map < String , Object > attributes , String file Path , int offset ) {", "if ( ! is Windows ( ) ) {", "return super . scheme Walk ( user Path , attributes , file Path , offset ) ; }", "String canonical Path ;", "if ( file Path . length ( ) < offset + NUM_ ) {", "return super . scheme Walk ( user Path , attributes , file Path , offset ) ; }", "char ch 1 = file Path . char At ( offset + NUM_ ) ;", "char ch 2 = file Path . char At ( offset ) ;", "if ( ( ch 2 == STR_ || ch 2 == separator Char ) && ( ch 1 == STR_ || ch 1 == separator Char ) ) return super . scheme Walk ( user Path , attributes , convert From Windows Path ( file Path . substring ( offset ) ) , NUM_ ) ;", "else return super . scheme Walk ( user Path , attributes , file Path , offset ) ; }"]}
{"ids": "57659", "code": ["void init Properties ( String default Level , String default Filter , String default Formatter , String default Encoding ) {", "Log Manager manager = Log Manager . get Log Manager ( ) ;", "final String filter Name = manager . get Property ( prefix + STR_ ) ;", "if ( filter Name != null ) {", "try {", "filter = ( Filter ) get Customize Instance ( filter Name ) ; }", "catch ( Exception e 1 ) {", "print Invalid Prop Message ( STR_ , filter Name , e 1 ) ;", "filter = ( Filter ) get Default Instance ( default Filter ) ; } }", "else {", "filter = ( Filter ) get Default Instance ( default Filter ) ; }", "String level Name = manager . get Property ( prefix + STR_ ) ;", "if ( level Name != null ) {", "try {", "level = Level . parse ( level Name ) ; }", "catch ( Exception e ) {", "print Invalid Prop Message ( STR_ , level Name , e ) ;", "level = Level . parse ( default Level ) ; } }", "else {", "level = Level . parse ( default Level ) ; }", "final String formatter Name = manager . get Property ( prefix + STR_ ) ;", "if ( formatter Name != null ) {", "try {", "formatter = ( Formatter ) get Customize Instance ( formatter Name ) ; }", "catch ( Exception e ) {", "print Invalid Prop Message ( STR_ , formatter Name , e ) ;", "formatter = ( Formatter ) get Default Instance ( default Formatter ) ; } }", "else {", "formatter = ( Formatter ) get Default Instance ( default Formatter ) ; }", "final String encoding Name = manager . get Property ( prefix + STR_ ) ;", "try {", "internal Set Encoding ( encoding Name ) ; }", "catch ( Unsupported Encoding Exception e ) {", "print Invalid Prop Message ( STR_ , encoding Name , e ) ; } }"]}
{"ids": "23597", "code": ["public static void write Unsigned VL ( long data , Data Output out ) throws IO Exception {", "while ( true ) {", "if ( ( data & ~ NUM_ ) == NUM_ ) {", "out . write Byte ( ( int ) data ) ;", "return ; }", "else {", "out . write Byte ( ( ( int ) data & NUM_ ) | NUM_ ) ;", "data >>>= NUM_ ; } } }"]}
{"ids": "83415", "code": ["public JSON Array names ( ) {", "JSON Array ja = new JSON Array ( ) ;", "Iterator keys = keys ( ) ;", "while ( keys . has Next ( ) ) {", "ja . put ( keys . next ( ) ) ; }", "return ja . length ( ) == NUM_ ? null : ja ; }"]}
{"ids": "30530", "code": ["public void add Table With Alias ( String table , String alias ) {", "Query Table Data table Data = new Query Table Data ( ) ;", "table Data . set Table Name ( table ) ;", "table Data . set Table Alias ( alias ) ;", "table Data . set Table Index ( tables Data . size ( ) ) ;", "tables Data . add ( table Data ) ;", "if ( alias == null ) tables . put ( table , table Data ) ;", "else {", "tables . put ( alias , table Data ) ;", "tables . put ( table , table Data ) ; } }"]}
{"ids": "17962", "code": ["private int encrypt Block ( byte [ ] in , int in Off , byte [ ] out , int out Off ) throws Data Length Exception , Illegal State Exception {", "if ( ( in Off + block Size ) > in . length ) {", "throw new Data Length Exception ( STR_ ) ; }", "for ( int i = NUM_ ; i < block Size ; i ++ ) {", "cbc V [ i ] ^= in [ in Off + i ] ; }", "int length = cipher . process Block ( cbc V , NUM_ , out , out Off ) ;", "System . arraycopy ( out , out Off , cbc V , NUM_ , cbc V . length ) ;", "return length ; }"]}
{"ids": "6208", "code": ["private void render Axes ( Camera camera ) {", "gl Push Matrix ( ) ;", "gl Load Identity ( ) ;", "float rot X = camera . get Rotation ( ) . x ;", "float rot Y = camera . get Rotation ( ) . y ;", "float rot Z = NUM_ ;", "gl Rotatef ( rot X , NUM_ , NUM_ , NUM_ ) ;", "gl Rotatef ( rot Y , NUM_ , NUM_ , NUM_ ) ;", "gl Rotatef ( rot Z , NUM_ , NUM_ , NUM_ ) ;", "gl Line Width ( NUM_ ) ;", "gl Begin ( GL LINES ) ;", "gl Color 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Vertex 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Vertex 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Color 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Vertex 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Vertex 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Color 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Vertex 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl Vertex 3 f ( NUM_ , NUM_ , NUM_ ) ;", "gl End ( ) ;", "gl Pop Matrix ( ) ; }"]}
{"ids": "7736", "code": ["@ Override public Object clone ( ) throws Clone Not Supported Exception {", "Period Axis Label Info clone = ( Period Axis Label Info ) super . clone ( ) ;", "return clone ; }"]}
{"ids": "47302", "code": ["public long skip ( long n ) throws IO Exception {", "if ( n < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "ensure Open ( ) ;", "int max = ( int ) Math . min ( n , Integer . MAX VALUE ) ;", "int total = NUM_ ;", "while ( total < max ) {", "int len = max - total ;", "if ( len > tmpbuf . length ) {", "len = tmpbuf . length ; }", "len = read ( tmpbuf , NUM_ , len ) ;", "if ( len == - NUM_ ) {", "entry EOF = true ;", "break ; }", "total += len ; }", "return total ; }"]}
{"ids": "31749", "code": ["private Path convert Path ( Path path ) throws Exception {", "if ( mode != PROXY ) return path ;", "else {", "URI secondary Uri = new URI ( SECONDARY URI ) ;", "URI path Uri = path . to Uri ( ) ;", "return new Path ( new URI ( path Uri . get Scheme ( ) != null ? secondary Uri . get Scheme ( ) : null , path Uri . get Authority ( ) != null ? secondary Uri . get Authority ( ) : null , path Uri . get Path ( ) , null , null ) ) ; } }"]}
{"ids": "86278", "code": ["private static String join Array ( String [ ] array , String delimiter ) {", "String Buffer buffer = new String Buffer ( ) ;", "for ( int index = NUM_ ; index < array . length ; index ++ ) {", "buffer . append ( array [ index ] ) ;", "if ( index < array . length - NUM_ ) {", "buffer . append ( delimiter ) ; } }", "return buffer . to String ( ) ; }"]}
{"ids": "66513", "code": ["private void output Partners ( Properties ctx , Print Writer out , int partner ID , boolean include Any ) {", "out . println ( STR_ ) ;", "if ( include Any ) {", "out . println ( STR_ ) ;", "if ( partner ID == NUM_ ) out . println ( STR_ ) ;", "out . println ( STR_ ) ; }", "for ( MB Partner partner : get All Partners ( ctx ) ) {", "out . print ( STR_ + partner . get ID ( ) + STR_ ) ;", "if ( partner ID == partner . get ID ( ) ) out . print ( STR_ ) ;", "out . println ( STR_ + Util . mask HTML ( partner . get Name ( ) ) + STR_ ) ; }", "out . println ( STR_ ) ; }"]}
{"ids": "64901", "code": ["public void stop ( ) {", "m Cancel = true ;", "if ( m Running . compare And Set ( true , false ) ) {", "if ( m Sample Dispatcher Task != null ) {", "m Sample Dispatcher Task . cancel ( true ) ;", "m Filled Buffers . clear ( ) ; } } }"]}
{"ids": "40277", "code": ["public Chess Square ( Composite parent , Chess Board chess Board , int id , boolean is Light ) {", "super ( parent , SWT . DOUBLE BUFFERED | SWT . NO BACKGROUND ) ;", "board = chess Board ;", "this . id = id ;", "this . is Light = is Light ;", "add Paint Listener ( paint Listener ) ;", "add Control Listener ( control Listener ) ;", "add Mouse Listener ( mouse Listener ) ;", "add Listener ( SWT . Mouse Wheel , mouse Wheel Listener ) ;", "add Listener ( SWT . Mouse Down , dnd Listener ) ;", "add Listener ( SWT . Mouse Up , dnd Listener ) ; }"]}
{"ids": "21227", "code": ["@ Override protected void stop Service ( ) {", "Thread t = keep Alive Thread ;", "keep Alive Thread = null ;", "if ( t != null ) {", "t . interrupt ( ) ; } }"]}
{"ids": "84521", "code": ["public static int truncated Compare To ( final Calendar cal 1 , final Calendar cal 2 , final int field ) {", "final Calendar truncated Cal 1 = truncate ( cal 1 , field ) ;", "final Calendar truncated Cal 2 = truncate ( cal 2 , field ) ;", "return truncated Cal 1 . compare To ( truncated Cal 2 ) ; }"]}
{"ids": "21541", "code": ["public boolean is Port Usable ( Storage Port storage Port ) {", "return is Port Usable ( storage Port , true ) ; }"]}
{"ids": "28828", "code": ["public boolean is Expired ( ) {", "return this . ttl < System . current Time Millis ( ) ; }"]}
{"ids": "7396", "code": ["@ Override public void action Performed ( Action Event event ) {", "String command = event . get Action Command ( ) ;", "if ( command . equals ( STR_ ) ) {", "attempt Font Selection ( ) ; }", "else if ( command . equals ( STR_ ) ) {", "attempt Paint Selection ( ) ; }", "else if ( command . equals ( STR_ ) ) {", "attempt Modify Show Title ( ) ; } }"]}
{"ids": "14799", "code": ["void remove Attribute Values ( String attr Name , Set values ) throws SMS Exception {", "if ( attr Name != null ) {", "Map attrs = get Attributes ( ) ;", "Set orig Values = ( Set ) attrs . get ( attr Name ) ;", "if ( orig Values != null && ! orig Values . is Empty ( ) ) {", "Set new Values = new Hash Set ( orig Values ) ;", "new Values . remove All ( values ) ;", "if ( new Values . is Empty ( ) ) {", "remove Attribute ( attr Name ) ; }", "else {", "Map new Attrs = new Hash Map ( ) ;", "new Attrs . put ( attr Name , new Values ) ;", "set Attributes ( new Attrs ) ; } } } }"]}
{"ids": "74012", "code": ["private static boolean check Content Characters ( String chars ) throws Char Conversion Exception {", "boolean escape = false ;", "for ( int i = NUM_ ; i < chars . length ( ) ; i ++ ) {", "char ch = chars . char At ( i ) ;", "if ( ch <= NUM_ ) {", "switch ( ch ) {", "case NUM_ :", "case NUM_ :", "case NUM_ :", "continue ;", "case STR_ :", "if ( escape ) {", "continue ; }", "escape = ( i > NUM_ ) && ( chars . char At ( i - NUM_ ) == STR_ ) ;", "continue ;", "case STR_ :", "case STR_ :", "escape = true ;", "continue ;", "default :", "if ( ch < NUM_ ) {", "throw new Char Conversion Exception ( STR_ + ( ( int ) ch ) + STR_ ) ; } } } }", "return escape == false ; }"]}
{"ids": "80283", "code": ["@ Override public void draw Top ( final Graphics 2 D g 2 d ) {", "final Rectangle r = get Area ( ) ;", "if ( is Contained ( ) ) {", "r . set Location ( NUM_ , NUM_ ) ; }", "else {", "if ( ! is On Screen ( g 2 d , r ) ) {", "return ; } }", "final Composite old Composite = g 2 d . get Composite ( ) ;", "try {", "g 2 d . set Composite ( entity Composite ) ;", "draw Top ( g 2 d , r . x , r . y , r . width , r . height ) ; }", "finally {", "g 2 d . set Composite ( old Composite ) ; } }"]}
{"ids": "44380", "code": ["protected void init Debug ( ) {", "set Debug ( ( get Init Parameter ( STR_ ) == null ) ? false : Boolean . value Of ( get Init Parameter ( STR_ ) ) ) ; }"]}
{"ids": "11851", "code": ["protected void index Nulls ( Input Stream is , long ptr , List < Entry > entries ) {", "boolean more Records = true ;", "byte r Hdr [ ] = new byte [ SHAPE RECORD HEADER LENGTH ] ;", "int result ;", "int n Records = NUM_ ;", "int rec Length Words , rec Length Bytes ;", "long rec Offset ;", "int rec Buf Size = NUM_ ;", "byte rec Buf [ ] = new byte [ rec Buf Size ] ;", "double x ;", "double y ;", "try {", "while ( more Records ) {", "result = is . read ( r Hdr , NUM_ , SHAPE RECORD HEADER LENGTH ) ;", "if ( result < NUM_ ) {", "more Records = false ;", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + n Records + STR_ ) ;", "logger . fine ( STR_ + rec Buf Size ) ; } }", "else {", "n Records ++ ;", "rec Offset = ptr ;", "read BE Int ( r Hdr , NUM_ ) ;", "rec Length Words = read BE Int ( r Hdr , NUM_ ) ;", "rec Length Bytes = rec Length Words * NUM_ ;", "if ( rec Length Bytes > rec Buf Size ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + rec Length Bytes ) ; }", "rec Buf Size = rec Length Bytes ;", "rec Buf = new byte [ rec Buf Size ] ; }", "result = is . read ( rec Buf , NUM_ , rec Length Bytes ) ;", "x = NUM_ ;", "y = NUM_ ;", "ptr += rec Length Bytes + NUM_ ;", "Entry entry = new Entry ( x , y , x , y , ( int ) rec Offset ) ;", "entries . add ( entry ) ; } } }", "catch ( java . io . IO Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "try {", "is . close ( ) ; }", "catch ( java . io . IO Exception e ) { } } }"]}
{"ids": "84957", "code": ["protected static Rpc Pair resolve Rpc Pair ( AST Node node , Peer Type Resolver peer Resolver ) {", "Method Declaration method Decl = AST Resolving . find Parent Method Declaration ( node ) ;", "Type Declaration type Decl = ( Type Declaration ) AST Resolving . find Ancestor ( node , AST Node . TYPE DECLARATION ) ;", "assert ( type Decl != null ) ;", "I Type dst Type = peer Resolver . get Peer Type ( type Decl ) ;", "if ( dst Type == null ) {", "return null ; }", "Compilation Unit ast Root = AST Resolving . create Quick Fix AST ( dst Type . get Compilation Unit ( ) , null ) ;", "Type Declaration dst Type Decl = Java AST Utils . find Type Declaration ( ast Root , dst Type . get Fully Qualified Name ( STR_ ) ) ;", "if ( dst Type Decl == null ) {", "return null ; }", "return new Rpc Pair ( type Decl , method Decl , dst Type Decl ) ; }"]}
{"ids": "72462", "code": ["public static void assert Equals ( Field Matrix < ? extends Field Element < ? > > expected , Field Matrix < ? extends Field Element < ? > > observed ) {", "Assert . assert Not Null ( STR_ , observed ) ;", "if ( expected . get Column Dimension ( ) != observed . get Column Dimension ( ) || expected . get Row Dimension ( ) != observed . get Row Dimension ( ) ) {", "String Builder message Buffer = new String Builder ( ) ;", "message Buffer . append ( STR_ ) ;", "message Buffer . append ( STR_ + observed . get Row Dimension ( ) + STR_ + observed . get Column Dimension ( ) ) ;", "message Buffer . append ( STR_ + expected . get Row Dimension ( ) + STR_ + expected . get Column Dimension ( ) ) ;", "Assert . fail ( message Buffer . to String ( ) ) ; }", "for ( int i = NUM_ ; i < expected . get Row Dimension ( ) ; ++ i ) {", "for ( int j = NUM_ ; j < expected . get Column Dimension ( ) ; ++ j ) {", "Field Element < ? > eij = expected . get Entry ( i , j ) ;", "Field Element < ? > oij = observed . get Entry ( i , j ) ;", "Assert . assert Equals ( eij , oij ) ; } } }"]}
{"ids": "83160", "code": ["public void add Addition ( String addition ) {", "additions . add ( addition ) ; }"]}
{"ids": "71802", "code": ["private void start New Transition ( ) {", "if ( ! has Bounds ( ) ) {", "throw new Unsupported Operation Exception ( STR_ + STR_ ) ; }", "m Current Trans = m Trans Gen . generate Next Transition ( m Drawable Rect , m Viewport Rect ) ;", "m Elapsed Time = NUM_ ;", "m Last Frame Time = System . current Time Millis ( ) ;", "fire Transition Start ( m Current Trans ) ; }"]}
{"ids": "74366", "code": ["protected void rotate Orthogonal ( ) {", "active . set Rotation ( active . get Rotation ( ) + NUM_ , this ) ;", "error . set Rotation ( error . get Rotation ( ) + NUM_ , this ) ;", "display State ( ) ;", "repaint ( ) ; }"]}
{"ids": "67606", "code": ["private String convert To Element Name ( String attribute Name ) {", "return attribute Name . replace ( STR_ , STR_ ) ; }"]}
{"ids": "49940", "code": ["private boolean has Other Map And Reduce Parent Node ( Lop tmp Node , Array List < Lop > node List , Lop node ) {", "if ( tmp Node . get Exec Location ( ) == Exec Location . Map And Reduce ) return true ;", "for ( Lop n : tmp Node . get Outputs ( ) ) {", "if ( node List . contains ( n ) && is Child ( n , node , ID Map ) ) {", "if ( ! n . equals ( node ) && n . get Exec Location ( ) == Exec Location . Map And Reduce ) return true ;", "else return has Other Map And Reduce Parent Node ( n , node List , node ) ; } }", "return false ; }"]}
{"ids": "70458", "code": ["public synchronized void add ( double value ) {", "add ( m Categories . size ( ) + STR_ , value ) ; }"]}
{"ids": "2645", "code": ["@ Nullable String find Longest Name Prefix ( Node name , Set < String > namespaces ) {", "if ( namespaces . contains ( name . get Qualified Name ( ) ) ) {", "return name . get Qualified Name ( ) ; }", "else if ( name . is Get Prop ( ) ) {", "return find Longest Name Prefix ( name . get First Child ( ) , namespaces ) ; }", "return null ; }"]}
{"ids": "24386", "code": ["public static Log Writer create Log Writer ( final Properties properties ) {", "Properties non Default = properties ;", "if ( non Default == null ) {", "non Default = new Properties ( ) ; }", "Distributed Test Utils . add Hydra Properties ( non Default ) ;", "Distribution Config dc = new Distribution Config Impl ( non Default ) ;", "Log Writer logger = Log Writer Factory . create Log Writer Logger ( false , false , dc , false ) ;", "non Default . put ( Distribution Config . LOG WRITER NAME , logger ) ;", "return logger ; }"]}
{"ids": "24774", "code": ["public int session ( ) {", "return Integer . parse Int ( fields [ NUM_ ] ) ; }"]}
{"ids": "69345", "code": ["private void write Photo Overlay ( String name , String category , String description , String style Name , Location location , String photo Url , float heading ) {", "if ( location != null ) {", "print Writer . println ( STR_ ) ;", "print Writer . println ( STR_ + String Utils . format C Data ( name ) + STR_ ) ;", "print Writer . println ( STR_ + String Utils . format C Data ( description ) + STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . print ( STR_ + location . get Longitude ( ) + STR_ ) ;", "print Writer . print ( STR_ + location . get Latitude ( ) + STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . print ( STR_ + heading + STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . println ( STR_ ) ;", "print Writer . println ( STR_ + String Utils . format Date Time Iso 8601 ( location . get Time ( ) ) + STR_ ) ;", "print Writer . println ( STR_ + style Name + STR_ ) ;", "write Category ( category ) ;", "if ( play Track ) {", "print Writer . println ( STR_ + Uri . decode ( photo Url ) + STR_ ) ; }", "else {", "Uri uri = Uri . parse ( photo Url ) ;", "print Writer . println ( STR_ + Kmz Track Exporter . KMZ IMAGES DIR + File . separator Char + uri . get Last Path Segment ( ) + STR_ ) ; }", "print Writer . print ( STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . print ( STR_ ) ;", "print Writer . println ( STR_ ) ;", "print Writer . println ( STR_ ) ;", "print Writer . println ( STR_ + get Coordinates ( location , STR_ ) + STR_ ) ;", "print Writer . println ( STR_ ) ;", "print Writer . println ( STR_ ) ; } }"]}
{"ids": "56056", "code": ["public boolean on Back Pressed ( ) {", "if ( does Drawer Exist ( ) ) {", "if ( m Drawer . is Drawer Visible ( Gravity . START ) ) {", "m Drawer . close Drawer ( Gravity . START ) ;", "return true ; } }", "if ( m Content View . on Back Pressed ( ) ) return true ;", "if ( ! m State Stack . empty ( ) ) {", "m State Stack . pop ( ) ;", "if ( ! m State Stack . empty ( ) ) {", "set State ( m State Stack . pop ( ) ) ;", "return true ; } }", "return false ; }"]}
{"ids": "67070", "code": ["public void simulate Method ( Soot Method method , Reference Variable this Var , Reference Variable return Var , Reference Variable params [ ] ) {", "String sub Signature = method . get Sub Signature ( ) ;", "if ( sub Signature . equals ( STR_ ) ) {", "java io Object Input Stream latest User Defined Loader ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java io Object Input Stream allocate New Object ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java io Object Input Stream allocate New Array ( method , this Var , return Var , params ) ;", "return ; }", "else {", "default Method ( method , this Var , return Var , params ) ;", "return ; } }"]}
{"ids": "56432", "code": ["public Shard Iterator only Node Selector Active Initializing Shards It ( String node Attribute , Discovery Nodes discovery Nodes ) {", "Array List < Shard Routing > ordered = new Array List < > ( active Shards . size ( ) + all Initializing Shards . size ( ) ) ;", "Set < String > selected Nodes = Sets . new Hash Set ( discovery Nodes . resolve Nodes Ids ( node Attribute ) ) ;", "for ( Shard Routing shard Routing : active Shards ) {", "if ( selected Nodes . contains ( shard Routing . current Node Id ( ) ) ) {", "ordered . add ( shard Routing ) ; } }", "for ( Shard Routing shard Routing : all Initializing Shards ) {", "if ( selected Nodes . contains ( shard Routing . current Node Id ( ) ) ) {", "ordered . add ( shard Routing ) ; } }", "if ( ordered . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ + node Attribute + STR_ ) ; }", "return new Plain Shard Iterator ( shard Id , ordered ) ; }"]}
{"ids": "16807", "code": ["private void check Changes ( ) {", "settings . clear Movie Nfo Filenames ( ) ;", "if ( cb Movie Nfo Filename 1 . is Selected ( ) ) {", "settings . add Movie Nfo Filename ( Movie Nfo Naming . FILENAME NFO ) ; }", "if ( cb Movie Nfo Filename 2 . is Selected ( ) ) {", "settings . add Movie Nfo Filename ( Movie Nfo Naming . MOVIE NFO ) ; }", "if ( cb Movie Nfo Filename 3 . is Selected ( ) ) {", "settings . add Movie Nfo Filename ( Movie Nfo Naming . DISC NFO ) ; }", "Certification Style Wrapper wrapper = ( Certification Style Wrapper ) cb Certification Style . get Selected Item ( ) ;", "if ( wrapper != null && settings . get Movie Certification Style ( ) != wrapper . style ) {", "settings . set Movie Certification Style ( wrapper . style ) ; } }"]}
{"ids": "49206", "code": ["X Menu Item Peer [ ] copy Items ( ) {", "synchronized ( get Menu Tree Lock ( ) ) {", "return ( X Menu Item Peer [ ] ) items . to Array ( new X Menu Item Peer [ ] { } ) ; } }"]}
{"ids": "29644", "code": ["public static void connection Closed ( ) {", "num Connections . get And Decrement ( ) ; }"]}
{"ids": "23246", "code": ["public static String build Chat SDP ( String ip Address , int local Port , String protocol , String accept Types , String wrapper Types , String setup , String path , String direction ) {", "return build SDP ( ip Address , local Port , protocol , accept Types , wrapper Types , null , null , null , setup , path , direction , null , NUM_ ) ; }"]}
{"ids": "28265", "code": ["int [ ] determine Dimensions ( int source Code Words , int error Correction Code Words ) throws Writer Exception {", "float ratio = NUM_ ;", "int [ ] dimension = null ;", "for ( int cols = min Cols ; cols <= max Cols ; cols ++ ) {", "int rows = calculate Number Of Rows ( source Code Words , error Correction Code Words , cols ) ;", "if ( rows < min Rows ) {", "break ; }", "if ( rows > max Rows ) {", "continue ; }", "float new Ratio = ( ( NUM_ * cols + NUM_ ) * DEFAULT MODULE WIDTH ) / ( rows * HEIGHT ) ;", "if ( dimension != null && Math . abs ( new Ratio - PREFERRED RATIO ) > Math . abs ( ratio - PREFERRED RATIO ) ) {", "continue ; }", "ratio = new Ratio ;", "dimension = new int [ ] { cols , rows } ; }", "if ( dimension == null ) {", "int rows = calculate Number Of Rows ( source Code Words , error Correction Code Words , min Cols ) ;", "if ( rows < min Rows ) {", "dimension = new int [ ] { min Cols , min Rows } ; } }", "if ( dimension == null ) {", "throw new Writer Exception ( STR_ ) ; }", "return dimension ; }"]}
{"ids": "51668", "code": ["public static Data Display Table list Font Metrics ( Font font ) {", "String [ ] header = { STR_ , STR_ } ;", "Align [ ] display Alignment = { Align . Left , Align . Left } ;", "Data Display Table table = new Data Display Table ( Arrays . as List ( header ) ) ;", "table . set Alignment ( Arrays . as List ( display Alignment ) ) ;", "Font Header Table head Table = ( Font Header Table ) Font Utils . get Table ( font , Tag . head ) ;", "Horizontal Header Table hhea Table = ( Horizontal Header Table ) Font Utils . get Table ( font , Tag . hhea ) ;", "OS 2 Table os 2 Table = ( OS 2 Table ) Font Utils . get Table ( font , Tag . OS 2 ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , head Table . units Per Em ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , head Table . x Min ( ) , head Table . x Max ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , head Table . y Min ( ) , head Table . y Max ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , head Table . lowest Rec PPEM ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , hhea Table . ascender ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , hhea Table . descender ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , hhea Table . line Gap ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , os 2 Table . us Win Ascent ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , os 2 Table . us Win Descent ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , os 2 Table . s Typo Ascender ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , os 2 Table . s Typo Descender ( ) ) } ) ) ;", "table . add ( Arrays . as List ( new String [ ] { STR_ , String . format ( STR_ , os 2 Table . s Typo Line Gap ( ) ) } ) ) ;", "return table ; }"]}
{"ids": "38045", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "79233", "code": ["public static Shopping Cart Item make Item ( Integer cart Location , String item Type , String item Description , String product Category Id , Big Decimal base Price , Big Decimal selected Amount , Big Decimal quantity , Map < String , Object > attributes , String prod Catalog Id , Shopping Cart . Shopping Cart Item Group item Group , Local Dispatcher dispatcher , Shopping Cart cart , Boolean trigger External Ops Bool ) throws Cart Item Modify Exception {", "Delegator delegator = cart . get Delegator ( ) ;", "Shopping Cart Item new Item = new Shopping Cart Item ( delegator , item Type , item Description , product Category Id , base Price , attributes , prod Catalog Id , cart . get Locale ( ) , item Group ) ;", "if ( cart Location == null ) {", "cart . add Item To End ( new Item ) ; }", "else {", "cart . add Item ( cart Location . int Value ( ) , new Item ) ; }", "boolean trigger External Ops = trigger External Ops Bool == null ? true : trigger External Ops Bool . boolean Value ( ) ;", "try {", "new Item . set Quantity ( quantity , dispatcher , cart , trigger External Ops ) ; }", "catch ( Cart Item Modify Exception e ) {", "cart . remove Empty Cart Items ( ) ;", "throw e ; }", "if ( selected Amount != null ) {", "new Item . set Selected Amount ( selected Amount ) ; }", "return new Item ; }"]}
{"ids": "6367", "code": ["final void run Worker ( Worker w ) {", "Runnable task = w . first Task ;", "w . first Task = null ;", "boolean completed Abruptly = true ;", "try {", "while ( task != null || ( task = get Task ( ) ) != null ) {", "w . lock ( ) ;", "clear Interrupts For Task Run ( ) ;", "try {", "before Execute ( w . thread , task ) ;", "Throwable thrown = null ;", "try {", "task . run ( ) ; }", "catch ( Runtime Exception x ) {", "thrown = x ;", "throw x ; }", "catch ( Error x ) {", "thrown = x ;", "throw x ; }", "catch ( Throwable x ) {", "thrown = x ;", "throw new Error ( x ) ; }", "finally {", "after Execute ( task , thrown ) ; } }", "finally {", "task = null ;", "w . completed Tasks ++ ;", "w . unlock ( ) ; } }", "completed Abruptly = false ; }", "finally {", "process Worker Exit ( w , completed Abruptly ) ; } }"]}
{"ids": "31772", "code": ["private static Cluster Properties from Properties ( Properties props ) {", "Cluster Properties prop = new Cluster Properties ( ) ;", "prop . cluster Name = get String Property ( IGNITE CLUSTER NAME , props , DEFAULT CLUSTER NAME ) ;", "prop . cpu Per Node = get Double Property ( IGNITE RUN CPU PER NODE , props , DEFAULT CPU PER NODE ) ;", "prop . mem Per Node = get Double Property ( IGNITE MEMORY PER NODE , props , DEFAULT MEM PER NODE ) ;", "prop . mem Over Head Per Node = get Double Property ( IGNITE MEMORY OVERHEAD PER NODE , props , Math . max ( NUM_ * prop . mem Per Node , DEFAULT MINIMUM MEM OVERHEAD PER NODE ) ) ;", "prop . node Cnt = get Double Property ( IGNITE NODE COUNT , props , DEFAULT IGNITE NODE COUNT ) ;", "prop . ignite Url = get String Property ( IGNITE URL , props , null ) ;", "prop . ignite Path = get String Property ( IGNITE PATH , props , null ) ;", "prop . licence Path = get String Property ( LICENCE PATH , props , null ) ;", "prop . jvm Opts = get String Property ( IGNITE JVM OPTS , props , null ) ;", "prop . ignite Work Dir = get String Property ( IGNITE WORKING DIR , props , DEFAULT IGNITE WORK DIR ) ;", "prop . ignite Local Work Dir = get String Property ( IGNITE LOCAL WORK DIR , props , DEFAULT IGNITE LOCAL WORK DIR ) ;", "prop . ignite Releases Dir = get String Property ( IGNITE RELEASES DIR , props , DEFAULT IGNITE RELEASES DIR ) ;", "prop . ignite Cfg = get String Property ( IGNITE CONFIG XML , props , null ) ;", "prop . user Libs = get String Property ( IGNITE USERS LIBS , props , null ) ;", "String pattern = get String Property ( IGNITE HOSTNAME CONSTRAINT , props , null ) ;", "if ( pattern != null ) {", "try {", "prop . hostname Constraint = Pattern . compile ( pattern ) ; }", "catch ( Pattern Syntax Exception e ) {", "log . log ( Level . WARNING , STR_ , e ) ; } }", "return prop ; }"]}
{"ids": "21682", "code": ["public static String generate Native Guid ( Storage System device ) {", "return String . format ( STR_ , device Type Map . get ( device . get System Type ( ) ) , device . get Serial Number ( ) ) ; }"]}
{"ids": "32210", "code": ["public Cache Metrics Snapshot ( Cache Metrics loc , Collection < Cache Metrics > metrics ) {", "cache Name = loc . name ( ) ;", "is Empty = loc . is Empty ( ) ;", "is Write Behind Enabled = loc . is Write Behind Enabled ( ) ;", "write Behind Flush Size = loc . get Write Behind Flush Size ( ) ;", "write Behind Flush Thread Cnt = loc . get Write Behind Flush Thread Count ( ) ;", "write Behind Flush Freq = loc . get Write Behind Flush Frequency ( ) ;", "write Behind Store Batch Size = loc . get Write Behind Store Batch Size ( ) ;", "write Behind Buf Size = loc . get Write Behind Buffer Size ( ) ;", "size = loc . get Size ( ) ;", "key Size = loc . get Key Size ( ) ;", "key Type = loc . get Key Type ( ) ;", "val Type = loc . get Value Type ( ) ;", "is Store By Val = loc . is Store By Value ( ) ;", "is Statistics Enabled = loc . is Statistics Enabled ( ) ;", "is Management Enabled = loc . is Management Enabled ( ) ;", "is Read Through = loc . is Read Through ( ) ;", "is Write Through = loc . is Write Through ( ) ;", "off Heap Max Size = loc . get Off Heap Max Size ( ) ;", "for ( Cache Metrics e : metrics ) {", "reads += e . get Cache Gets ( ) ;", "puts += e . get Cache Puts ( ) ;", "hits += e . get Cache Hits ( ) ;", "misses += e . get Cache Misses ( ) ;", "tx Commits += e . get Cache Tx Commits ( ) ;", "tx Rollbacks += e . get Cache Tx Rollbacks ( ) ;", "evicts += e . get Cache Evictions ( ) ;", "removes += e . get Cache Removals ( ) ;", "put Avg Time Nanos += e . get Average Put Time ( ) ;", "get Avg Time Nanos += e . get Average Get Time ( ) ;", "rmv Avg Time Nanos += e . get Average Remove Time ( ) ;", "commit Avg Time Nanos += e . get Average Tx Commit Time ( ) ;", "rollback Avg Time Nanos += e . get Average Tx Rollback Time ( ) ;", "if ( e . get Overflow Size ( ) > - NUM_ ) overflow Size += e . get Overflow Size ( ) ;", "else overflow Size = - NUM_ ;", "off Heap Gets += e . get Off Heap Gets ( ) ;", "off Heap Puts += e . get Off Heap Puts ( ) ;", "off Heap Removes += e . get Off Heap Removals ( ) ;", "off Heap Evicts += e . get Off Heap Evictions ( ) ;", "off Heap Hits += e . get Off Heap Hits ( ) ;", "off Heap Misses += e . get Off Heap Misses ( ) ;", "off Heap Entries Cnt += e . get Off Heap Entries Count ( ) ;", "off Heap Primary Entries Cnt += e . get Off Heap Primary Entries Count ( ) ;", "off Heap Backup Entries Cnt += e . get Off Heap Backup Entries Count ( ) ;", "off Heap Allocated Size += e . get Off Heap Allocated Size ( ) ;", "swap Gets += e . get Swap Gets ( ) ;", "swap Puts += e . get Swap Puts ( ) ;", "swap Removes += e . get Swap Removals ( ) ;", "swap Hits += e . get Swap Hits ( ) ;", "swap Misses += e . get Swap Misses ( ) ;", "swap Entries Cnt += e . get Swap Entries Count ( ) ;", "swap Size += e . get Swap Size ( ) ;", "if ( e . get Dht Evict Queue Current Size ( ) > - NUM_ ) dht Evict Queue Curr Size += e . get Dht Evict Queue Current Size ( ) ;", "else dht Evict Queue Curr Size = - NUM_ ;", "tx Thread Map Size += e . get Tx Thread Map Size ( ) ;", "tx Xid Map Size += e . get Tx Xid Map Size ( ) ;", "tx Commit Queue Size += e . get Tx Commit Queue Size ( ) ;", "tx Prepare Queue Size += e . get Tx Prepare Queue Size ( ) ;", "tx Start Ver Counts Size += e . get Tx Start Version Counts Size ( ) ;", "tx Committed Versions Size += e . get Tx Committed Versions Size ( ) ;", "tx Rolledback Versions Size += e . get Tx Rolledback Versions Size ( ) ;", "if ( e . get Tx Dht Thread Map Size ( ) > - NUM_ ) tx Dht Thread Map Size += e . get Tx Dht Thread Map Size ( ) ;", "else tx Dht Thread Map Size = - NUM_ ;", "if ( e . get Tx Dht Xid Map Size ( ) > - NUM_ ) tx Dht Xid Map Size += e . get Tx Dht Xid Map Size ( ) ;", "else tx Dht Xid Map Size = - NUM_ ;", "if ( e . get Tx Dht Commit Queue Size ( ) > - NUM_ ) tx Dht Commit Queue Size += e . get Tx Dht Commit Queue Size ( ) ;", "else tx Dht Commit Queue Size = - NUM_ ;", "if ( e . get Tx Dht Prepare Queue Size ( ) > - NUM_ ) tx Dht Prepare Queue Size += e . get Tx Dht Prepare Queue Size ( ) ;", "else tx Dht Prepare Queue Size = - NUM_ ;", "if ( e . get Tx Dht Start Version Counts Size ( ) > - NUM_ ) tx Dht Start Ver Counts Size += e . get Tx Dht Start Version Counts Size ( ) ;", "else tx Dht Start Ver Counts Size = - NUM_ ;", "if ( e . get Tx Dht Committed Versions Size ( ) > - NUM_ ) tx Dht Committed Versions Size += e . get Tx Dht Committed Versions Size ( ) ;", "else tx Dht Committed Versions Size = - NUM_ ;", "if ( e . get Tx Dht Rolledback Versions Size ( ) > - NUM_ ) tx Dht Rolledback Versions Size += e . get Tx Dht Rolledback Versions Size ( ) ;", "else tx Dht Rolledback Versions Size = - NUM_ ;", "if ( e . get Write Behind Total Critical Overflow Count ( ) > - NUM_ ) write Behind Total Critical Overflow Cnt += e . get Write Behind Total Critical Overflow Count ( ) ;", "else write Behind Total Critical Overflow Cnt = - NUM_ ;", "if ( e . get Write Behind Critical Overflow Count ( ) > - NUM_ ) write Behind Critical Overflow Cnt += e . get Write Behind Critical Overflow Count ( ) ;", "else write Behind Critical Overflow Cnt = - NUM_ ;", "if ( e . get Write Behind Error Retry Count ( ) > - NUM_ ) write Behind Error Retry Cnt += e . get Write Behind Error Retry Count ( ) ;", "else write Behind Error Retry Cnt = - NUM_ ; }", "int size = metrics . size ( ) ;", "if ( size > NUM_ ) {", "put Avg Time Nanos /= size ;", "get Avg Time Nanos /= size ;", "rmv Avg Time Nanos /= size ;", "commit Avg Time Nanos /= size ;", "rollback Avg Time Nanos /= size ; } }"]}
{"ids": "25252", "code": ["private void add Reference ( final int source Position , final int reference Position ) {", "if ( src And Ref Positions == null ) {", "src And Ref Positions = new int [ NUM_ ] ; }", "if ( reference Count >= src And Ref Positions . length ) {", "int [ ] a = new int [ src And Ref Positions . length + NUM_ ] ;", "System . arraycopy ( src And Ref Positions , NUM_ , a , NUM_ , src And Ref Positions . length ) ;", "src And Ref Positions = a ; }", "src And Ref Positions [ reference Count ++ ] = source Position ;", "src And Ref Positions [ reference Count ++ ] = reference Position ; }"]}
{"ids": "2430", "code": ["public Vector 2 floor ( ) {", "x = ( float ) Math . floor ( x ) ;", "z = ( float ) Math . floor ( z ) ;", "return this ; }"]}
{"ids": "25171", "code": ["public static Location create Location ( final String raw JSON ) throws Twitter Exception {", "try {", "final JSON Object json = new JSON Object ( raw JSON ) ;", "return location Constructor . new Instance ( json ) ; }", "catch ( final Instantiation Exception e ) {", "throw new Twitter Exception ( e ) ; }", "catch ( final Illegal Access Exception e ) {", "throw new Assertion Error ( e ) ; }", "catch ( final Invocation Target Exception e ) {", "throw new Twitter Exception ( e ) ; }", "catch ( final JSON Exception e ) {", "throw new Twitter Exception ( e ) ; } }"]}
{"ids": "70151", "code": ["@ Override protected int calc Attack Value ( ) {", "int av = NUM_ ;", "if ( b Direct ) {", "av = Math . min ( av + ( to Hit . get Mo S ( ) / NUM_ ) , av * NUM_ ) ; }", "if ( b Glancing ) {", "av = ( int ) Math . floor ( av / NUM_ ) ; }", "av = ( int ) Math . floor ( get Bracketing Multiplier ( ) * av ) ;", "return av ; }"]}
{"ids": "54534", "code": ["@ Override public String query To Retrieve Data ( ) {", "String parameterized Query ;", "if ( query . contains ( STR_ ) ) {", "parameterized Query = query . replace ( STR_ , start Row + STR_ ) ; }", "else {", "parameterized Query = query ; }", "return parameterized Query ; }"]}
{"ids": "20199", "code": ["private static void initialise ( ) {", "Hints hints = new Hints ( Hints . CRS , Default Geographic CRS . WGS 84 ) ;", "Position Factory position Factory = Geometry Factory Finder . get Position Factory ( hints ) ;", "Geometry Factory geometry Factory = Geometry Factory Finder . get Geometry Factory ( hints ) ;", "Primitive Factory primitive Factory = Geometry Factory Finder . get Primitive Factory ( hints ) ;", "Aggregate Factory aggregate Factory = Geometry Factory Finder . get Aggregate Factory ( hints ) ;", "wkt Parser = new WKT Parser ( geometry Factory , primitive Factory , position Factory , aggregate Factory ) ;", "wkt Type List . add ( new WKT Type ( WKT POINT , false , NUM_ , STR_ , false ) ) ;", "wkt Type List . add ( new WKT Type ( WKT MULTIPOINT , true , NUM_ , STR_ , false ) ) ;", "wkt Type List . add ( new WKT Type ( WKT LINESTRING , false , NUM_ , STR_ , false ) ) ;", "wkt Type List . add ( new WKT Type ( STR_ , false , NUM_ , STR_ , false ) ) ;", "wkt Type List . add ( new WKT Type ( WKT MULTILINESTRING , true , NUM_ , STR_ , false ) ) ;", "wkt Type List . add ( new WKT Type ( WKT POLYGON , false , - NUM_ , STR_ , true ) ) ;", "wkt Type List . add ( new WKT Type ( WKT MULTIPOLYGON , true , - NUM_ , STR_ , true , true ) ) ;", "for ( WKT Type wky Type : wkt Type List ) {", "wkt Type Map . put ( wky Type . get Name ( ) , wky Type ) ; } }"]}
{"ids": "37909", "code": ["public Instances prune To K ( Instances neighbours , double [ ] distances , int k ) {", "if ( neighbours == null || distances == null || neighbours . num Instances ( ) == NUM_ ) {", "return null ; }", "if ( k < NUM_ ) {", "k = NUM_ ; }", "int current K = NUM_ ;", "double current Dist ;", "for ( int i = NUM_ ; i < neighbours . num Instances ( ) ; i ++ ) {", "current K ++ ;", "current Dist = distances [ i ] ;", "if ( current K > k && current Dist != distances [ i - NUM_ ] ) {", "current K -- ;", "neighbours = new Instances ( neighbours , NUM_ , current K ) ;", "break ; } }", "return neighbours ; }"]}
{"ids": "41172", "code": ["@ Override protected String do In Background ( String ... f url ) {", "int count ;", "Input Stream input = null ;", "Output Stream output = null ;", "try {", "URL url = new URL ( f url [ NUM_ ] ) ;", "URL Connection connection = url . open Connection ( ) ;", "connection . connect ( ) ;", "int length Of File = connection . get Content Length ( ) ;", "input = new Buffered Input Stream ( url . open Stream ( ) , NUM_ ) ;", "output = new File Output Stream ( f url [ NUM_ ] ) ;", "byte data [ ] = new byte [ NUM_ ] ;", "long total = NUM_ ;", "while ( ( count = input . read ( data ) ) != - NUM_ ) {", "total += count ;", "publish Progress ( Integer . to String ( ( int ) ( ( total * NUM_ ) / length Of File ) ) ) ;", "output . write ( data , NUM_ , count ) ; }", "output . flush ( ) ; }", "catch ( Exception e ) {", "Log . e ( STR_ , e . get Message ( ) ) ; }", "finally {", "try {", "if ( output != null ) output . close ( ) ; }", "catch ( Exception e ) {", "Log . e ( STR_ , e . get Message ( ) ) ; }", "try {", "if ( input != null ) input . close ( ) ; }", "catch ( Exception e ) {", "Log . e ( STR_ , e . get Message ( ) ) ; } }", "return null ; }"]}
{"ids": "27129", "code": ["public void error ( String msg ) {", "print ( STR_ + msg , out . err ) ; }"]}
{"ids": "78062", "code": ["public static void load Arm V 7 a Library ( Application Like application Like , String lib Name ) {", "if ( lib Name == null || lib Name . is Empty ( ) || application Like == null ) {", "throw new Tinker Runtime Exception ( STR_ ) ; }", "if ( Tinker Application Helper . is Tinker Enable For Native Lib ( application Like ) ) {", "if ( Tinker Application Helper . load Library From Tinker ( application Like , STR_ , lib Name ) ) {", "return ; } }", "System . load Library ( lib Name ) ; }"]}
{"ids": "86565", "code": ["Atomic Sequence ( final long initial Value ) {", "UPDATER . lazy Set ( this , initial Value ) ; }"]}
{"ids": "64655", "code": ["protected static Long convert String To Buckecting Long ( String string To Be Converted ) {", "if ( string To Be Converted == null || string To Be Converted . equals ( STR_ ) ) {", "return null ; }", "byte [ ] byte String = string To Be Converted . get Bytes ( ) ;", "if ( byte String . length < NUM_ ) {", "byte [ ] new Byte String = new byte [ NUM_ ] ;", "for ( int i = NUM_ ; i < new Byte String . length ; i ++ ) {", "if ( i < byte String . length ) {", "new Byte String [ i ] = byte String [ i ] ; }", "else {", "new Byte String [ i ] = NUM_ ; } }", "byte String = new Byte String ; }", "Byte Buffer bb = Byte Buffer . wrap ( byte String ) ;", "long byte Method = bb . get Long ( ) ;", "byte Method = Math . abs ( byte Method ) ;", "return byte Method ; }"]}
{"ids": "30859", "code": ["private void pending Event ( Event Reg reg , Service ID sid , Item item , int transition , boolean copy Item ) {", "if ( item != null && copy Item ) item = copy Item ( item ) ;", "new Notifies . add ( new Event Task ( reg , sid , item , transition ) ) ; }"]}
{"ids": "5689", "code": ["public static void writeln ( String file Name , Object [ ] objects ) {", "if ( writer == null ) {", "create Writer ( file Name ) ;", "for ( Object obj : objects ) {", "writeln ( obj . to String ( ) ) ; }", "close Writer ( ) ; } }"]}
{"ids": "37942", "code": ["protected double regression Prediction ( Instance transformed Instance , boolean [ ] selected Attributes , double [ ] coefficients ) throws Exception {", "double result = NUM_ ;", "int column = NUM_ ;", "for ( int j = NUM_ ; j < transformed Instance . num Attributes ( ) ; j ++ ) {", "if ( ( m Class Index != j ) && ( selected Attributes [ j ] ) ) {", "result += coefficients [ column ] * transformed Instance . value ( j ) ;", "column ++ ; } }", "result += coefficients [ column ] ;", "return result ; }"]}
{"ids": "78809", "code": ["public QLF Document ( List < F > list , String docno , Map < String , String > extra Props ) {", "feature List = new Memory Local Feature List < F > ( list ) ;", "iterator = list . iterator ( ) ;", "if ( extra Props != null ) props . put All ( extra Props ) ;", "props . put ( STR_ , docno ) ; }"]}
{"ids": "65254", "code": ["@ Override protected Template Model invoke Generic Get ( Map key Map , Class clazz , String key ) throws Template Model Exception {", "Map map = ( Map ) object ;", "Object val = map . get ( key ) ;", "if ( val == null ) {", "if ( key . length ( ) == NUM_ ) {", "Character char Key = Character . value Of ( key . char At ( NUM_ ) ) ;", "val = map . get ( char Key ) ;", "if ( val == null && ! ( map . contains Key ( key ) || map . contains Key ( char Key ) ) ) {", "return UNKNOWN ; } }", "else if ( ! map . contains Key ( key ) ) {", "return UNKNOWN ; } }", "return wrap ( val ) ; }"]}
{"ids": "27271", "code": ["public byte [ ] to Z Order Byte Array ( final Big Integer big Int ) {", "final int num Dimensions = datatype Config . get Num Dimensions ( ) ;", "final byte [ ] big Int As Byte Arr = big Int . to Byte Array ( ) ;", "final int padded Array Size = num Dimensions * BASE SIZE + NUM_ ;", "final byte [ ] big Int As Byte Arr Pad = new byte [ padded Array Size ] ;", "int idx = NUM_ ;", "for ( int i = NUM_ ; i < padded Array Size - big Int As Byte Arr . length ; i ++ ) {", "big Int As Byte Arr Pad [ idx ++ ] = NUM_ ; }", "for ( int i = NUM_ ; i < big Int As Byte Arr . length ; i ++ ) {", "big Int As Byte Arr Pad [ idx ++ ] = big Int As Byte Arr [ i ] ; }", "final byte [ ] big Int As Byte Arr Unsigned = unpad Leading Zero ( big Int As Byte Arr Pad ) ;", "return big Int As Byte Arr Unsigned ; }"]}
{"ids": "50876", "code": ["public void clear Logcat ( @ Not Null I Device device , @ Not Null Project project ) {", "synchronized ( my Lock ) {", "Executor Service executor = my Executors . get ( device ) ;", "if ( executor != null ) {", "stop Receiving ( device ) ;", "executor . submit ( null ) ;", "start Receiving ( device ) ; } } }"]}
{"ids": "6754", "code": ["public void expand ( int level ) {", "Array List < S 2 Cell Id > output = new Array List < S 2 Cell Id > ( ) ;", "long level Lsb = S 2 Cell Id . lowest On Bit For Level ( level ) ;", "int i = size ( ) - NUM_ ;", "do {", "S 2 Cell Id id = cell Id ( i ) ;", "if ( id . lowest On Bit ( ) < level Lsb ) {", "id = id . parent ( level ) ;", "while ( i > NUM_ && id . contains ( cell Id ( i - NUM_ ) ) ) {", "-- i ; } }", "output . add ( id ) ;", "id . get All Neighbors ( level , output ) ; }", "while ( -- i >= NUM_ ) ;", "init Swap ( output ) ; }"]}
{"ids": "21672", "code": ["private String Set discover Volume Snaps ( Storage System system , List < Snap > snaps , String parent GUID , String Set parent Matched V Pools , VN Xe Api Client api Client , Db Client db Client , Map < String , List < Un Managed Volume > > host Volumes Map , VN Xe Lun lun , boolean is Snap In CG , String cg Name ) throws Exception {", "String Set snapsets = new String Set ( ) ;", "for ( Snap snap Detail : snaps ) {", "Un Managed Volume un Managed Volume = null ;", "String managed Snap Native Guid = Native GUID Generator . generate Native Guid For Volume Or Block Snap Shot ( system . get Native Guid ( ) , snap Detail . get Id ( ) ) ;", "Block Snapshot vipr Snap = Discovery Utils . check Block Snapshot Exists In DB ( db Client , managed Snap Native Guid ) ;", "if ( null != vipr Snap ) {", "log . info ( STR_ , managed Snap Native Guid ) ;", "snapsets . add ( managed Snap Native Guid ) ;", "continue ; }", "String un Managed Volume Natvie Guid = Native GUID Generator . generate Native Guid For Pre Existing Volume ( system . get Native Guid ( ) , snap Detail . get Id ( ) ) ;", "un Managed Volume = Discovery Utils . check Un Managed Volume Exists In DB ( db Client , un Managed Volume Natvie Guid ) ;", "un Managed Volume = create Un Managed Volume For Snap ( un Managed Volume , un Managed Volume Natvie Guid , lun , system , db Client , host Volumes Map , snap Detail ) ;", "populate Snap Info ( un Managed Volume , snap Detail , parent GUID , parent Matched V Pools ) ;", "snapsets . add ( un Managed Volume Natvie Guid ) ;", "un Managed Volumes Returned From Provider . add ( un Managed Volume . get Id ( ) ) ;", "if ( is Snap In CG ) {", "add Object To Un Managed Consistency Group ( api Client , un Managed Volume , cg Name , system , db Client ) ; } }", "return snapsets ; }"]}
{"ids": "64774", "code": ["public void receive ( final Call Event event ) {", "if ( event . is Valid ( ) ) {", "if ( ! m Events . contains ( event ) ) {", "m Events . add ( NUM_ , event ) ;", "fire Table Rows Inserted ( NUM_ , NUM_ ) ;", "prune ( ) ; }", "else {", "int row = m Events . index Of ( event ) ;", "fire Table Rows Updated ( row , row ) ; } }", "else {", "if ( m Events . contains ( event ) ) {", "int row = m Events . index Of ( event ) ;", "m Events . remove ( event ) ;", "fire Table Rows Deleted ( row , row ) ; } } }"]}
{"ids": "72249", "code": ["public Pet find One ( String id ) {", "log . debug ( STR_ , id ) ;", "Pet pet = pet Repository . find One ( UUID . from String ( id ) ) ;", "return pet ; }"]}
{"ids": "49617", "code": ["public final void clear ( ) {", "m Active Issues . clear ( ) ; }"]}
{"ids": "52687", "code": ["public static void await Data Ready ( ) {", "synchronized ( m Db Helper Lock ) {", "if ( m Db Helper == null ) {", "try {", "m Db Helper Lock . wait ( ) ; }", "catch ( Interrupted Exception e ) {", "e . print Stack Trace ( ) ; } } } }"]}
{"ids": "47343", "code": ["private String process Float Token ( String token ) {", "String result = token . replace All ( group Separator , STR_ ) ;", "if ( ! decimal Separator . equals ( STR_ ) ) result = result . replace All ( decimal Separator , STR_ ) ;", "boolean is Negative = false ;", "int pre Len = negative Prefix . length ( ) ;", "if ( ( pre Len > NUM_ ) && result . starts With ( negative Prefix ) ) {", "is Negative = true ;", "result = result . substring ( pre Len ) ; }", "int suf Len = negative Suffix . length ( ) ;", "if ( ( suf Len > NUM_ ) && result . ends With ( negative Suffix ) ) {", "is Negative = true ;", "result = result . substring ( result . length ( ) - suf Len , result . length ( ) ) ; }", "if ( result . equals ( nan String ) ) result = STR_ ;", "if ( result . equals ( infinity String ) ) result = STR_ ;", "if ( is Negative ) result = STR_ + result ;", "Matcher m = NON ASCII DIGIT . matcher ( result ) ;", "if ( m . find ( ) ) {", "String Builder in ASCII = new String Builder ( ) ;", "for ( int i = NUM_ ; i < result . length ( ) ; i ++ ) {", "char next Char = result . char At ( i ) ;", "if ( Character . is Digit ( next Char ) ) {", "int d = Character . digit ( next Char , NUM_ ) ;", "if ( d != - NUM_ ) in ASCII . append ( d ) ;", "else in ASCII . append ( next Char ) ; }", "else {", "in ASCII . append ( next Char ) ; } }", "result = in ASCII . to String ( ) ; }", "return result ; }"]}
{"ids": "80179", "code": ["Internal Window ( String title ) {", "set Layout ( new Border Layout ( ) ) ;", "title Bar = new Title Bar ( ) ;", "add ( title Bar , Border Layout . NORTH ) ;", "title Bar . set Layout ( new S Box Layout ( S Box Layout . HORIZONTAL , TITLEBAR PADDING ) ) ;", "title Label = new J Label ( ) ;", "set Title ( title ) ;", "title Label . set Minimum Size ( new Dimension ( NUM_ , NUM_ ) ) ;", "title Bar . add ( title Label ) ;", "S Box Layout . add Spring ( title Bar ) ;", "minimize Button = new J Button ( minimize Icon ) ;", "minimize Button . set Margin ( new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "minimize Button . set Border ( Border Factory . create Empty Border ( ) ) ;", "minimize Button . set Focusable ( false ) ;", "minimize Button . add Action Listener ( new Minimize Listener ( ) ) ;", "title Bar . add ( minimize Button ) ;", "close Button = new J Button ( close Icon ) ;", "close Button . set Margin ( new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "close Button . set Border ( Border Factory . create Empty Border ( ) ) ;", "close Button . set Focusable ( false ) ;", "close Button . add Action Listener ( new Close Action Listener ( ) ) ;", "title Bar . add ( close Button ) ;", "cache = new Component Paint Cache ( this ) ; }"]}
{"ids": "26903", "code": ["@ Suppress Warnings ( STR_ ) public static Map < String , Object > load Stream ( Input Stream input Stream ) {", "LOG . fine ( STR_ ) ;", "Yaml yaml = new Yaml ( ) ;", "Map < Object , Object > props Yaml = ( Map < Object , Object > ) yaml . load ( input Stream ) ;", "LOG . fine ( STR_ ) ;", "Map < String , Object > typed Map = new Hash Map < > ( ) ;", "for ( Object key : props Yaml . key Set ( ) ) {", "typed Map . put ( key . to String ( ) , props Yaml . get ( key ) ) ; }", "return typed Map ; }"]}
{"ids": "39831", "code": ["String [ ] split ( final String string To Split ) {", "if ( String Utils . is Not Blank ( string To Split ) ) {", "int str Lenght = string To Split . length ( ) ;", "int split Num = str Lenght / chunk Size ;", "if ( str Lenght % chunk Size > NUM_ ) {", "split Num += NUM_ ; }", "String [ ] result = new String [ split Num ] ;", "for ( int i = NUM_ ; i < split Num ; i ++ ) {", "int start Pos = i * chunk Size ;", "int end Pos = start Pos + chunk Size ;", "if ( end Pos > str Lenght ) {", "end Pos = str Lenght ; }", "result [ i ] = string To Split . substring ( start Pos , end Pos ) ; }", "return result ; }", "return null ; }"]}
{"ids": "40916", "code": ["public void remove All Addresses ( ) {", "addresses . clear ( ) ; }"]}
{"ids": "82103", "code": ["public static boolean is Show Tooltips ( ) {", "return show Tooltips ; }"]}
{"ids": "42017", "code": ["public void dispose ( ) {", "log Debug ( STR_ ) ;", "m Setup Done = false ;", "if ( m Service Conn != null ) {", "log Debug ( STR_ ) ;", "if ( m Context != null ) m Context . unbind Service ( m Service Conn ) ; }", "m Disposed = true ;", "m Context = null ;", "m Service Conn = null ;", "m Service = null ;", "m Purchase Listener = null ; }"]}
{"ids": "82484", "code": ["public static java . lang . String to Binary String ( int i ) {", "return int To Binary String ( i ) ; }"]}
{"ids": "43820", "code": ["public static boolean is Property Field ( String field Name ) {", "return ! ID FIELD NAME . equals ( field Name ) && ! URI FIELD NAME . equals ( field Name ) && ! TEXT FIELD NAME . equals ( field Name ) && ! CONTEXT FIELD NAME . equals ( field Name ) && field Name . char At ( NUM_ ) != STR_ ; }"]}
{"ids": "48439", "code": ["public static void check Access ( int modifiers ) {", "if ( System . get Security Manager ( ) != null && ! Modifier . is Public ( modifiers ) ) {", "throw new Security Exception ( STR_ ) ; } }"]}
{"ids": "71633", "code": ["protected void print Indent ( String Builder ddl ) {", "ddl . append ( get Indent ( ) ) ; }"]}
{"ids": "45795", "code": ["public N Type merge ( N Type a , N Type b ) throws Merge Failed {", "if ( a != null && b == null ) return a ;", "if ( a == null && b != null ) return b ;", "if ( a == null && b == null ) return null ;", "if ( a . equals ( b ) ) return a ;", "try {", "return Dispatcher . dispatch ( get Class ( ) , this , STR_ , a , b ) ; }", "catch ( No Such Method Exception e ) {", "throw new Merge Failed ( STR_ , a , b ) ; } }"]}
{"ids": "76709", "code": ["public static String format ( String s , String col ) {", "String s 1 = ( s + padd ) ;", "return s 1 . substring ( NUM_ , Math . min ( col . length ( ) , s 1 . length ( ) ) ) ; }"]}
{"ids": "66091", "code": ["protected static void load End ( M Lookup Info info , Hash Map lookup ) {", "if ( info . Is Validated && lookup . size ( ) > NUM_ ) s loaded Lookups . put ( get Key ( info ) , lookup ) ; }"]}
{"ids": "67464", "code": ["public static void info ( final String message ) {", "info Logger . accept ( message ) ; }"]}
{"ids": "57654", "code": ["private void rotate Right ( Node < K , V > root ) {", "Node < K , V > pivot = root . left ;", "Node < K , V > right = root . right ;", "Node < K , V > pivot Left = pivot . left ;", "Node < K , V > pivot Right = pivot . right ;", "root . left = pivot Right ;", "if ( pivot Right != null ) {", "pivot Right . parent = root ; }", "replace In Parent ( root , pivot ) ;", "pivot . right = root ;", "root . parent = pivot ;", "root . height = Math . max ( right != null ? right . height : NUM_ , pivot Right != null ? pivot Right . height : NUM_ ) + NUM_ ;", "pivot . height = Math . max ( root . height , pivot Left != null ? pivot Left . height : NUM_ ) + NUM_ ; }"]}
{"ids": "6863", "code": ["private void check No Characters Missing ( int total Length , List < Token > tokens ) {", "if ( ! tokens . is Empty ( ) && tokens . get ( tokens . size ( ) - NUM_ ) . right != total Length ) {", "String error = String . format ( STR_ , tokens . get ( tokens . size ( ) - NUM_ ) . right , total Length ) ;", "throw new Runtime Exception ( error ) ; }", "int start = NUM_ ;", "for ( int i = NUM_ ; i < tokens . size ( ) ; i ++ ) {", "Token token = tokens . get ( i ) ;", "if ( token . left != start ) {", "throw new Runtime Exception ( STR_ + start ) ; }", "start = token . right ; } }"]}
{"ids": "14770", "code": ["public boolean validate Service Attributes ( String token , String validator Class , Set values ) throws SMS Exception , SSO Exception , Remote Exception {", "initialize ( ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + validator Class + STR_ + values ) ; }", "try {", "Class clazz = Class . for Name ( validator Class ) ;", "Service Attribute Validator v = ( Service Attribute Validator ) clazz . new Instance ( ) ;", "return v . validate ( values ) ; }", "catch ( Instantiation Exception ex ) {", "throw new SMS Exception ( STR_ ) ; }", "catch ( Illegal Access Exception ex ) {", "throw new SMS Exception ( STR_ ) ; }", "catch ( Class Not Found Exception ex ) {", "throw new SMS Exception ( STR_ ) ; } }"]}
{"ids": "623", "code": ["public synchronized void animate Pan To ( Point 2 D p , long duration ) {", "Point 2 D pp = new Point 2 D . Double ( ) ;", "m itransform . transform ( p , pp ) ;", "animate Pan To Abs ( pp , duration ) ; }"]}
{"ids": "60401", "code": ["protected void assert Exception ( final Abstract Exception Case exception Case ) throws Throwable {", "assert Exception ( exception Case , null ) ; }"]}
{"ids": "50195", "code": ["@ Override public Service Host start ( ) throws Throwable {", "super . start ( ) ;", "start Default Core Services Synchronously ( ) ;", "super . start Service ( new Root Namespace Service ( ) ) ;", "super . start Service ( new Sample Service With Shared Custom Ui ( ) ) ;", "super . start Service ( new Sample Factory Service With Custom Ui ( ) ) ;", "super . start Factory ( new Sample Simple Echo Service ( ) ) ;", "super . start Factory ( new Sample Previous Echo Service ( ) ) ;", "super . start Factory ( new Example Service ( ) ) ;", "super . start Factory ( new Example Task Service ( ) ) ;", "super . start Service ( new Ui Service ( ) ) ;", "start Swagger Descriptor Service ( ) ;", "return this ; }"]}
{"ids": "9241", "code": ["@ Override public void end Of Stream ( ) throws Ade Exception {", "for ( Msg Data data : m msg Data . values ( ) ) {", "if ( data . m total Log Counts > NUM_ ) {", "data . m lambda = data . m total Log Counts / data . m interval Count ;", "m min Lambda = Math . min ( data . m lambda , m min Lambda ) ;", "if ( locate Mismatching Distributions ( data ) ) {", "data . m bad Fit = true ; } } }", "m trained = true ; }"]}
{"ids": "5582", "code": ["static Binary Tree < Integer > build Complete ( int n ) {", "Binary Tree < Integer > bt = new Binary Tree < Integer > ( ) ;", "int b = ( int ) Math . pow ( NUM_ , n - NUM_ ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "bt . insert ( b ) ;", "for ( int j = NUM_ ; j <= Math . pow ( NUM_ , i ) - NUM_ ; j ++ ) {", "bt . insert ( b + NUM_ * b * j ) ; }", "b = b / NUM_ ; }", "return bt ; }"]}
{"ids": "20860", "code": ["public void erase ( ) {", "byte [ ] bytes = null ;", "for ( Byte Buffer buffer : buffers ) {", "if ( bytes == null || bytes . length < buffer . limit ( ) ) bytes = new byte [ buffer . limit ( ) ] ;", "buffer . position ( NUM_ ) ;", "buffer . put ( bytes , NUM_ , buffer . limit ( ) ) ;", "buffer . position ( NUM_ ) ; } }"]}
{"ids": "41820", "code": ["@ Override boolean resurrect Selection ( ) {", "final int child Count = get Child Count ( ) ;", "if ( child Count <= NUM_ ) {", "return false ; }", "int selected Top = NUM_ ;", "int selected Pos ;", "int children Top = m List Padding . top ;", "int children Bottom = get Bottom ( ) - get Top ( ) - m List Padding . bottom ;", "final int first Position = m First Position ;", "final int to Position = m Resurrect To Position ;", "boolean down = true ;", "if ( to Position >= first Position && to Position < first Position + child Count ) {", "selected Pos = to Position ;", "final View selected = get Child At ( selected Pos - m First Position ) ;", "selected Top = selected . get Top ( ) ;", "int selected Bottom = selected . get Bottom ( ) ;", "if ( selected Top < children Top ) {", "selected Top = children Top + get Vertical Fading Edge Length ( ) ; }", "else if ( selected Bottom > children Bottom ) {", "selected Top = children Bottom - selected . get Measured Height ( ) - get Vertical Fading Edge Length ( ) ; } }", "else {", "if ( to Position < first Position ) {", "selected Pos = first Position ;", "for ( int i = NUM_ ; i < child Count ; i ++ ) {", "final View v = get Child At ( i ) ;", "final int top = v . get Top ( ) ;", "if ( i == NUM_ ) {", "selected Top = top ;", "if ( first Position > NUM_ || top < children Top ) {", "children Top += get Vertical Fading Edge Length ( ) ; } }", "if ( top >= children Top ) {", "selected Pos = first Position + i ;", "selected Top = top ;", "break ; } } }", "else {", "final int item Count = m Item Count ;", "down = false ;", "selected Pos = first Position + child Count - NUM_ ;", "for ( int i = child Count - NUM_ ; i >= NUM_ ; i -- ) {", "final View v = get Child At ( i ) ;", "final int top = v . get Top ( ) ;", "final int bottom = v . get Bottom ( ) ;", "if ( i == child Count - NUM_ ) {", "selected Top = top ;", "if ( first Position + child Count < item Count || bottom > children Bottom ) {", "children Bottom -= get Vertical Fading Edge Length ( ) ; } }", "if ( bottom <= children Bottom ) {", "selected Pos = first Position + i ;", "selected Top = top ;", "break ; } } } }", "m Resurrect To Position = INVALID POSITION ;", "remove Callbacks ( m Fling Runnable ) ;", "m Touch Mode = TOUCH MODE REST ;", "clear Scrolling Cache ( ) ;", "m Specific Top = selected Top ;", "selected Pos = look For Selectable Position ( selected Pos , down ) ;", "if ( selected Pos >= first Position && selected Pos <= get Last Visible Position ( ) ) {", "m Layout Mode = LAYOUT SPECIFIC ;", "set Selection Int ( selected Pos ) ;", "invoke On Item Scroll Listener ( ) ; }", "else {", "selected Pos = INVALID POSITION ; }", "report Scroll State Change ( On Scroll Listener . SCROLL STATE IDLE ) ;", "return selected Pos >= NUM_ ; }"]}
{"ids": "23353", "code": ["public void log Purchase ( Big Decimal purchase Amount , Currency currency , Bundle parameters ) {", "if ( purchase Amount == null ) {", "notify Developer Error ( STR_ ) ;", "return ; }", "else if ( currency == null ) {", "notify Developer Error ( STR_ ) ;", "return ; }", "if ( parameters == null ) {", "parameters = new Bundle ( ) ; }", "parameters . put String ( App Events Constants . EVENT PARAM CURRENCY , currency . get Currency Code ( ) ) ;", "log Event ( App Events Constants . EVENT NAME PURCHASED , purchase Amount . double Value ( ) , parameters ) ;", "eager Flush ( ) ; }"]}
{"ids": "86682", "code": ["public static String pad Between ( final String first , final int length , final String last ) {", "final int padlen = length - ( first . length ( ) + last . length ( ) ) ;", "return first + ( padlen > NUM_ ? get Space String ( padlen ) : STR_ ) + last ; }"]}
{"ids": "75286", "code": ["public void apply From Resolve Info ( Package Manager pm , Resolve Info info , Widget Preview Loader loader ) {", "m Info = info ;", "Char Sequence label = info . load Label ( pm ) ;", "m Widget Name . set Text ( label ) ;", "m Widget Dims . set Text ( String . format ( m Dimensions Format String , NUM_ , NUM_ ) ) ;", "m Widget Preview Loader = loader ; }"]}
{"ids": "23997", "code": ["private Queue Connection Impl create New Primary ( Set excluded Servers ) {", "Queue Connection Impl primary = null ;", "while ( primary == null && pool . get Pool Or Cache Cancel In Progress ( ) == null ) {", "List servers = find Queue Servers ( excluded Servers , NUM_ , false , print Primary Not Found Error , Localized Strings . Queue Manager Impl COULD NOT FIND SERVER TO CREATE PRIMARY CLIENT QUEUE ) ;", "print Primary Not Found Error = false ;", "if ( servers == null || servers . is Empty ( ) ) {", "break ; }", "Connection connection = null ;", "try {", "connection = factory . create Client To Server Connection ( ( Server Location ) servers . get ( NUM_ ) , true ) ; }", "catch ( Gem Fire Security Exception e ) {", "throw e ; }", "catch ( Exception e ) {", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ , servers . get ( NUM_ ) ) ; } }", "if ( connection != null ) {", "primary = initialize Queue Connection ( connection , true , queue Connections . get Failed Updater ( ) ) ; }", "excluded Servers . add All ( servers ) ; }", "if ( primary != null && sent Client Ready && primary . send Client Ready ( ) ) {", "ready For Events After Failover ( primary ) ; }", "return primary ; }"]}
{"ids": "32829", "code": ["public static int read Int ( ) {", "return scanner . next Int ( ) ; }"]}
{"ids": "40518", "code": ["public CSV Config guess ( ) {", "try {", "Buffered Reader b In = new Buffered Reader ( new Input Stream Reader ( get Input Stream ( ) , Standard Charsets . UTF 8 ) ) ;", "String [ ] lines = new String [ NUM_ ] ;", "String line = null ;", "int counter = NUM_ ;", "while ( ( line = b In . read Line ( ) ) != null && counter <= NUM_ ) {", "lines [ counter ] = line ;", "counter ++ ; }", "if ( counter < NUM_ ) {", "String [ ] new Lines = new String [ counter ] ;", "System . arraycopy ( lines , NUM_ , new Lines , NUM_ , counter ) ;", "lines = new Lines ; }", "analyse Lines ( lines ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "if ( in != null ) {", "try {", "in . close ( ) ; }", "catch ( Exception e ) { } } }", "CSV Config conf = config ;", "config = null ;", "return conf ; }"]}
{"ids": "78406", "code": ["private void update Design ( Data Set Design data Set Design , I Connection conn , String query Text ) throws Oda Exception {", "I Query query = conn . new Query ( null ) ;", "query . prepare ( query Text ) ;", "query . set Property ( Query . PROP SETUP QUERY TEXT , get Setup Query Text ( ) ) ;", "try {", "I Result Set Meta Data md = query . get Meta Data ( ) ;", "update Result Set Design ( md , data Set Design ) ; }", "catch ( Oda Exception e ) {", "data Set Design . set Result Sets ( null ) ;", "e . print Stack Trace ( ) ; }", "try {", "I Parameter Meta Data param Md = query . get Parameter Meta Data ( ) ;", "update Parameter Design ( param Md , data Set Design ) ; }", "catch ( Oda Exception ex ) {", "data Set Design . set Parameters ( null ) ;", "ex . print Stack Trace ( ) ; } }"]}
{"ids": "52784", "code": ["@ Override public Outlier Result run ( Database db , Relation < V > relation ) {", "DBI Ds ids = relation . get DBI Ds ( ) ;", "Similarity Query < V > sq = db . get Similarity Query ( relation , kernel Function ) ;", "Kernel Matrix kernel Matrix = new Kernel Matrix ( sq , relation , ids ) ;", "Writable Double Data Store abodvalues = Data Store Util . make Double Storage ( ids , Data Store Factory . HINT STATIC ) ;", "Double Min Max minmaxabod = new Double Min Max ( ) ;", "Mean Variance s = new Mean Variance ( ) ;", "KNN Heap nn = DBID Util . new Heap ( k ) ;", "for ( DBID Iter p A = ids . iter ( ) ; p A . valid ( ) ; p A . advance ( ) ) {", "final double sim AA = kernel Matrix . get Similarity ( p A , p A ) ;", "nn . clear ( ) ;", "for ( DBID Iter n B = relation . iter DBI Ds ( ) ; n B . valid ( ) ; n B . advance ( ) ) {", "if ( DBID Util . equal ( n B , p A ) ) {", "continue ; }", "double sim BB = kernel Matrix . get Similarity ( n B , n B ) ;", "double sim AB = kernel Matrix . get Similarity ( p A , n B ) ;", "double sqd AB = sim AA + sim BB - sim AB - sim AB ;", "if ( ! ( sqd AB > NUM_ ) ) {", "continue ; }", "nn . insert ( sqd AB , n B ) ; }", "KNN List nl = nn . to KNN List ( ) ;", "s . reset ( ) ;", "Double DBID List Iter i B = nl . iter ( ) , i C = nl . iter ( ) ;", "for ( ; i B . valid ( ) ; i B . advance ( ) ) {", "double sqd AB = i B . double Value ( ) ;", "double sim AB = kernel Matrix . get Similarity ( p A , i B ) ;", "if ( ! ( sqd AB > NUM_ ) ) {", "continue ; }", "for ( i C . seek ( i B . get Offset ( ) + NUM_ ) ; i C . valid ( ) ; i C . advance ( ) ) {", "double sqd AC = i C . double Value ( ) ;", "double sim AC = kernel Matrix . get Similarity ( p A , i C ) ;", "if ( ! ( sqd AC > NUM_ ) ) {", "continue ; }", "double sim BC = kernel Matrix . get Similarity ( i B , i C ) ;", "double numerator = sim BC - sim AB - sim AC + sim AA ;", "double div = NUM_ / ( sqd AB * sqd AC ) ;", "s . put ( numerator * div , Math . sqrt ( div ) ) ; } }", "final double abof = s . get Naive Variance ( ) ;", "minmaxabod . put ( abof ) ;", "abodvalues . put Double ( p A , abof ) ; }", "Double Relation score Result = new Materialized Double Relation ( STR_ , STR_ , abodvalues , relation . get DBI Ds ( ) ) ;", "Outlier Score Meta score Meta = new Inverted Outlier Score Meta ( minmaxabod . get Min ( ) , minmaxabod . get Max ( ) , NUM_ , Double . POSITIVE INFINITY ) ;", "return new Outlier Result ( score Meta , score Result ) ; }"]}
{"ids": "47479", "code": ["@ Override public boolean equals ( Object other Rule ) {", "if ( other Rule == this ) {", "return true ; }", "if ( other Rule instanceof Zone Offset Transition Rule ) {", "Zone Offset Transition Rule other = ( Zone Offset Transition Rule ) other Rule ;", "return month == other . month && dom == other . dom && dow == other . dow && time Definition == other . time Definition && time . equals ( other . time ) && time End Of Day == other . time End Of Day && standard Offset . equals ( other . standard Offset ) && offset Before . equals ( other . offset Before ) && offset After . equals ( other . offset After ) ; }", "return false ; }"]}
{"ids": "72564", "code": ["private void initialize Membership Matrix ( ) {", "for ( int i = NUM_ ; i < points . size ( ) ; i ++ ) {", "for ( int j = NUM_ ; j < k ; j ++ ) {", "membership Matrix [ i ] [ j ] = random . next Double ( ) ; }", "membership Matrix [ i ] = Math Arrays . normalize Array ( membership Matrix [ i ] , NUM_ ) ; } }"]}
{"ids": "39075", "code": ["public static void write All ( Output Stream stream , Object [ ] o ) throws Exception {", "Object Output Stream oos ;", "int i ;", "if ( ! ( stream instanceof Buffered Output Stream ) ) {", "stream = new Buffered Output Stream ( stream ) ; }", "oos = new Object Output Stream ( stream ) ;", "for ( i = NUM_ ; i < o . length ; i ++ ) {", "oos . write Object ( o [ i ] ) ; }", "oos . flush ( ) ;", "oos . close ( ) ; }"]}
{"ids": "31606", "code": ["public synchronized void reset ( ) {", "m Buf Vertices . position ( NUM_ ) ;", "m Buf Colors . position ( NUM_ ) ;", "if ( DRAW TEXTURE ) {", "m Buf Tex Coords . position ( NUM_ ) ; }", "for ( int i = NUM_ ; i < NUM_ ; ++ i ) {", "Vertex tmp = m Arr Temp Vertices . get ( NUM_ ) ;", "tmp . set ( m Rectangle [ i ] ) ;", "if ( m Flip Texture ) {", "tmp . m Tex X *= m Texture Rect Back . right ;", "tmp . m Tex Y *= m Texture Rect Back . bottom ;", "tmp . m Color = m Texture Page . get Color ( Curl Page . SIDE BACK ) ; }", "else {", "tmp . m Tex X *= m Texture Rect Front . right ;", "tmp . m Tex Y *= m Texture Rect Front . bottom ;", "tmp . m Color = m Texture Page . get Color ( Curl Page . SIDE FRONT ) ; }", "add Vertex ( tmp ) ; }", "m Vertices Count Front = NUM_ ;", "m Vertices Count Back = NUM_ ;", "m Buf Vertices . position ( NUM_ ) ;", "m Buf Colors . position ( NUM_ ) ;", "if ( DRAW TEXTURE ) {", "m Buf Tex Coords . position ( NUM_ ) ; }", "m Drop Shadow Count = m Self Shadow Count = NUM_ ; }"]}
{"ids": "69146", "code": ["public B css ( @ Non Nls String classes ) {", "return css ( classes , null ) ; }"]}
{"ids": "72066", "code": ["public static Argument Exception adapt Property Exception ( Property Exception e , Abstract Managed Object Definition < ? , ? > d ) {", "return new Argument Exception ( e . get Message Object ( ) ) ; }"]}
{"ids": "50192", "code": ["private Consumer < Operation > create Notification Target ( ) {", "return null ; }"]}
{"ids": "20066", "code": ["public void write ( byte [ ] bytes ) throws IO Exception {", "data Output . write ( bytes ) ;", "offset += bytes . length ; }"]}
{"ids": "49153", "code": ["static synchronized boolean is Shaping Supported ( ) {", "if ( is Shaping Supported == null ) {", "X Toolkit . awt Lock ( ) ;", "try {", "is Shaping Supported = Xlib Wrapper . X Shape Query Extension ( X Toolkit . get Display ( ) , Xlib Wrapper . larg 1 , Xlib Wrapper . larg 2 ) ; }", "finally {", "X Toolkit . awt Unlock ( ) ; } }", "return is Shaping Supported . boolean Value ( ) ; }"]}
{"ids": "40319", "code": ["protected String handle Timeseal ( String text ) throws IO Exception {", "String result = text ;", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ + result ) ;", "while ( result . contains ( STR_ ) ) {", "send Ack ( ) ;", "result = result . replace First ( STR_ , STR_ ) ;", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ + result ) ; }", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ + result ) ;", "return result ; }"]}
{"ids": "60618", "code": ["public Ber Input Stream ( Input Stream in , int initial Size ) throws IO Exception {", "this . in = in ;", "buffer = new byte [ initial Size ] ;", "next ( ) ;", "if ( length != INDEFINIT LENGTH ) {", "if ( buffer . length < ( length + offset ) ) {", "byte [ ] new Buffer = new byte [ length + offset ] ;", "System . arraycopy ( buffer , NUM_ , new Buffer , NUM_ , offset ) ;", "buffer = new Buffer ; } }", "else {", "is Indefined Length = true ;", "throw new ASN 1 Exception ( STR_ ) ; } }"]}
{"ids": "84336", "code": ["protected Location Handler ( Location location , Option ... options ) {", "this . location = location ;", "this . options = options . length == NUM_ ? Enum Set . none Of ( Option . class ) : Enum Set . copy Of ( Arrays . as List ( options ) ) ; }"]}
{"ids": "21454", "code": ["private void init ( ) {", "logger . debug ( STR_ ) ;", "list = new Concurrent Linked Queue < Arrived Indication > ( ) ;", "Intermediate Processor intermediate Processor = new Intermediate Processor ( list , processor ) ;", "indication Process Timer = Executors . new Single Thread Scheduled Executor ( ) ;", "indication Process Timer . schedule With Fixed Delay ( intermediate Processor , CIM Constants . INDICATION PROCESS INTERVAL , PERIODIC DELAY , Time Unit . SECONDS ) ; }"]}
{"ids": "51095", "code": ["public static final String long To Hex String ( long a ) {", "String Buffer sb = new String Buffer ( NUM_ ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) sb . append ( NIBBLE [ ( int ) ( a > > > ( NUM_ - NUM_ * i ) ) & NUM_ ] ) ;", "return sb . to String ( ) ; }"]}
{"ids": "40689", "code": ["private Date watch Core Start At ( Solr Server client , final long timeout , final Date min ) throws Interrupted Exception , IO Exception , Solr Server Exception {", "final long sleep Interval = NUM_ ;", "long time Slept = NUM_ ;", "Solr Params p = params ( STR_ , STR_ , STR_ , STR_ ) ;", "while ( time Slept < timeout ) {", "Query Request req = new Query Request ( p ) ;", "req . set Path ( STR_ ) ;", "try {", "Named List data = client . request ( req ) ;", "for ( String k : new String [ ] { STR_ , STR_ } ) {", "Object o = data . get ( k ) ;", "assert Not Null ( STR_ + k , o ) ;", "data = ( Named List ) o ; }", "Date start Time = ( Date ) data . get ( STR_ ) ;", "assert Not Null ( STR_ , start Time ) ;", "if ( null == min || start Time . after ( min ) ) {", "return start Time ; } }", "catch ( Solr Exception e ) {", "if ( NUM_ != e . code ( ) ) {", "throw e ; } }", "time Slept += sleep Interval ;", "Thread . sleep ( sleep Interval ) ; }", "fail ( STR_ + min ) ;", "return min ; }"]}
{"ids": "34304", "code": ["@ Override public Params Request Condition combine ( Params Request Condition other ) {", "Set < Param Expression > set = new Linked Hash Set < > ( this . expressions ) ;", "set . add All ( other . expressions ) ;", "return new Params Request Condition ( set ) ; }"]}
{"ids": "7916", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( obj == this ) {", "return true ; }", "if ( ! ( obj instanceof Time Series Collection ) ) {", "return false ; }", "Time Series Collection that = ( Time Series Collection ) obj ;", "if ( this . x Position != that . x Position ) {", "return false ; }", "if ( this . domain Is Points In Time != that . domain Is Points In Time ) {", "return false ; }", "if ( ! Object Utilities . equal ( this . data , that . data ) ) {", "return false ; }", "return true ; }"]}
{"ids": "29238", "code": ["private void parse Rules ( Attributes attributes ) {", "start Mode = get Mode Attribute ( attributes , STR_ ) ;", "if ( start Mode == null ) {", "start Mode = lookup Create Mode ( IMPLICIT MODE NAME ) ;", "md . current Mode = start Mode ;", "start Mode . note Defined ( null ) ; }", "start Mode . note Used ( locator ) ;", "if ( attributes Schema ) {", "Mode wrapper = lookup Create Mode ( WRAPPER MODE NAME ) ;", "Action Set actions = new Action Set ( ) ;", "actions . add No Result Action ( new Allow Action ( new Mode Usage ( start Mode , start Mode ) ) ) ;", "wrapper . bind Element ( Namespace Specification . ANY NAMESPACE , Namespace Specification . DEFAULT WILDCARD , actions ) ;", "wrapper . note Defined ( null ) ;", "start Mode = wrapper ; }", "default Schema Type = get Schema Type ( attributes ) ; }"]}
{"ids": "79167", "code": ["public void fill ( byte value ) {", "value &= NUM_ ;", "Arrays . fill ( data , ( byte ) ( value << NUM_ | value ) ) ; }"]}
{"ids": "19180", "code": ["private static void parse ( Input Stream in , Encoding encoding , Content Handler content Handler ) throws IO Exception , SAX Exception {", "try {", "XML Reader reader = new Expat Reader ( ) ;", "reader . set Content Handler ( content Handler ) ;", "Input Source source = new Input Source ( in ) ;", "source . set Encoding ( encoding . expat Name ) ;", "reader . parse ( source ) ; }", "catch ( IO Exception e ) {", "throw new Assertion Error ( e ) ; } }"]}
{"ids": "9954", "code": ["public void add To Associated ( Message as Message ) {", "associated Messages . add ( as Message ) ; }"]}
{"ids": "61006", "code": ["private static void parse Property Assignments ( Properties p , String [ ] assignments ) {", "for ( String assignment : assignments ) {", "int split = assignment . index Of ( STR_ ) ;", "String key = assignment . substring ( NUM_ , split ) ;", "String value = assignment . substring ( split + NUM_ ) ;", "p . put ( key , value ) ; } }"]}
{"ids": "2133", "code": ["protected boolean switch Profiles ( I Profile new Selection ) {", "if ( new Selection == null ) {", "return false ; }", "if ( m Current Profile == new Selection ) {", "return true ; }", "if ( m Alternative Profile Header Switching ) {", "int prev Selection = - NUM_ ;", "if ( m Profile First == new Selection ) {", "prev Selection = NUM_ ; }", "else if ( m Profile Second == new Selection ) {", "prev Selection = NUM_ ; }", "else if ( m Profile Third == new Selection ) {", "prev Selection = NUM_ ; }", "I Profile tmp = m Current Profile ;", "m Current Profile = new Selection ;", "if ( prev Selection == NUM_ ) {", "m Profile First = tmp ; }", "else if ( prev Selection == NUM_ ) {", "m Profile Second = tmp ; }", "else if ( prev Selection == NUM_ ) {", "m Profile Third = tmp ; } }", "else {", "if ( m Profiles != null ) {", "Array List < I Profile > previous Active Profiles = new Array List < > ( Arrays . as List ( m Current Profile , m Profile First , m Profile Second , m Profile Third ) ) ;", "if ( previous Active Profiles . contains ( new Selection ) ) {", "int position = - NUM_ ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "if ( previous Active Profiles . get ( i ) == new Selection ) {", "position = i ;", "break ; } }", "if ( position != - NUM_ ) {", "previous Active Profiles . remove ( position ) ;", "previous Active Profiles . add ( NUM_ , new Selection ) ;", "m Current Profile = previous Active Profiles . get ( NUM_ ) ;", "m Profile First = previous Active Profiles . get ( NUM_ ) ;", "m Profile Second = previous Active Profiles . get ( NUM_ ) ;", "m Profile Third = previous Active Profiles . get ( NUM_ ) ; } }", "else {", "m Profile Third = m Profile Second ;", "m Profile Second = m Profile First ;", "m Profile First = m Current Profile ;", "m Current Profile = new Selection ; } } }", "if ( m Only Small Profile Images Visible ) {", "m Profile Third = m Profile Second ;", "m Profile Second = m Profile First ;", "m Profile First = m Current Profile ; }", "build Profiles ( ) ;", "return false ; }"]}
{"ids": "71898", "code": ["public static Search Scope value Of ( final int int Value ) {", "Search Scope result = null ;", "if ( NUM_ <= int Value && int Value < ELEMENTS . length ) {", "result = ELEMENTS [ int Value ] ; }", "if ( result == null ) {", "result = new Search Scope ( int Value , STR_ + int Value + STR_ , Enum . UNKNOWN ) ; }", "return result ; }"]}
{"ids": "28902", "code": ["public static I Package Fragment Root add Class Folder ( I Java Project jproject , String container Name , I Path source Attach Path , I Path source Attach Root ) throws Core Exception {", "I Project project = jproject . get Project ( ) ;", "I Container container = null ;", "if ( container Name == null || container Name . length ( ) == NUM_ ) {", "container = project ; }", "else {", "I Folder folder = project . get Folder ( container Name ) ;", "if ( ! folder . exists ( ) ) {", "Core Utility . create Folder ( folder , false , true , null ) ; }", "container = folder ; }", "I Classpath Entry cpe = Java Core . new Library Entry ( container . get Full Path ( ) , source Attach Path , source Attach Root ) ;", "add To Classpath ( jproject , cpe ) ;", "return jproject . get Package Fragment Root ( container ) ; }"]}
{"ids": "21043", "code": ["private void previous Window ( Calendar start Time ) {", "if ( is Daily ( ) ) {", "start Time . add ( Calendar . DAY OF MONTH , - NUM_ ) ; }", "else if ( is Weekly ( ) ) {", "start Time . add ( Calendar . WEEK OF MONTH , - NUM_ ) ; }", "else if ( is Monthly ( ) ) {", "int month = start Time . get ( Calendar . MONTH ) ;", "adjust Day Of Month ( start Time , month + - NUM_ ) ; } }"]}
{"ids": "19594", "code": ["private < T > T [ ] copy Elements ( T [ ] a ) {", "if ( head < tail ) {", "System . arraycopy ( elements , head , a , NUM_ , size ( ) ) ; }", "else if ( head > tail ) {", "int head Portion Len = elements . length - head ;", "System . arraycopy ( elements , head , a , NUM_ , head Portion Len ) ;", "System . arraycopy ( elements , NUM_ , a , head Portion Len , tail ) ; }", "return a ; }"]}
{"ids": "39019", "code": ["public Instance calc Pivot ( My Idx List list 1 , My Idx List list 2 , Instances insts ) {", "int class Idx = m Instances . class Index ( ) ;", "double [ ] attr Vals = new double [ insts . num Attributes ( ) ] ;", "Instance temp ;", "for ( int i = NUM_ ; i < list 1 . length ( ) ; i ++ ) {", "temp = insts . instance ( list 1 . get ( i ) . idx ) ;", "for ( int k = NUM_ ; k < temp . num Values ( ) ; k ++ ) {", "if ( temp . index ( k ) == class Idx ) {", "continue ; }", "attr Vals [ k ] += temp . value Sparse ( k ) ; } }", "for ( int j = NUM_ ; j < list 2 . length ( ) ; j ++ ) {", "temp = insts . instance ( list 2 . get ( j ) . idx ) ;", "for ( int k = NUM_ ; k < temp . num Values ( ) ; k ++ ) {", "if ( temp . index ( k ) == class Idx ) {", "continue ; }", "attr Vals [ k ] += temp . value Sparse ( k ) ; } }", "for ( int j = NUM_ , num Insts = list 1 . length ( ) + list 2 . length ( ) ; j < attr Vals . length ; j ++ ) {", "attr Vals [ j ] /= num Insts ; }", "temp = new Dense Instance ( NUM_ , attr Vals ) ;", "return temp ; }"]}
{"ids": "68210", "code": ["default Optional < List < T > > parse Optional ( byte [ ] parse Message ) {", "return Optional . of Nullable ( parse ( parse Message ) ) ; }"]}
{"ids": "14573", "code": ["public static void initialize For Client Use ( ) {", "Embedded Utils . initialize For Client Use ( ) ; }"]}
{"ids": "15037", "code": ["private void create User ( SSO Token token , Persistent Object parent Obj , Map attributes , String profile Name ) throws UMS Exception , AM Entry Exists Exception , AM Exception {", "String org DN = get Organization DN ( internal Token , parent Obj . get DN ( ) ) ;", "String entry DN = get Naming Attribute ( AM Object . USER ) + STR_ + profile Name + STR_ + parent Obj . get DN ( ) ;", "attributes = call Back Helper . pre Process ( token , entry DN , org DN , null , attributes , Call Back Helper . CREATE , AM Object . USER , false ) ;", "Attr Set attr Set = Common Utils . map To Attr Set ( attributes ) ;", "make Naming First ( attr Set , get Naming Attribute ( AM Object . USER ) , profile Name ) ;", "User Password Validation Helper plugin Impl = new User Password Validation Helper ( token , org DN ) ;", "try {", "plugin Impl . validate ( Common Utils . attr Set To Map ( attr Set ) ) ; }", "catch ( AM Exception ame ) {", "debug . error ( STR_ + STR_ , ame ) ;", "throw ame ; }", "Template Manager temp Mgr = Template Manager . get Template Manager ( ) ;", "Creation Template creation Temp = temp Mgr . get Creation Template ( STR_ , new Guid ( org DN ) , Template Manager . SCOPE ANCESTORS ) ;", "attr Set = combine O Cs ( creation Temp , attr Set ) ;", "Persistent Object user = new Persistent Object ( creation Temp , attr Set ) ;", "try {", "parent Obj . add Child ( user ) ; }", "catch ( Access Rights Exception e ) {", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( STR_ + STR_ , e ) ; }", "throw new AM Exception ( token , STR_ ) ; }", "catch ( Entry Already Exists Exception ee ) {", "if ( Compliance Services Impl . is Compliance User Deletion Enabled ( ) ) {", "compliance Impl . check If Deleted User ( token , user . get DN ( ) ) ; }", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( STR_ + STR_ , ee ) ; }", "throw new AM Entry Exists Exception ( token , STR_ , ee ) ; }", "catch ( UMS Exception ue ) {", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( STR_ + STR_ , ue ) ; }", "process Internal Exception ( token , ue , STR_ ) ; }", "call Back Helper . post Process ( token , user . get DN ( ) , org DN , null , attributes , Call Back Helper . CREATE , AM Object . USER , false ) ;", "AM User Entry Processed post Plugin = get User Post Plugin ( ) ;", "if ( post Plugin != null ) {", "Map attr Map = Common Utils . attr Set To Map ( attr Set ) ;", "post Plugin . process User Add ( token , user . get DN ( ) , attr Map ) ; }", "Email Notification Helper mailer Obj = new Email Notification Helper ( user . get DN ( ) ) ;", "mailer Obj . set User Create Notification List ( ) ;", "mailer Obj . send User Create Notification ( attributes ) ; }"]}
{"ids": "37993", "code": ["public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "78822", "code": ["public void add All ( @ Non Null List < T > item List ) {", "synchronized ( lock ) {", "if ( items == null ) {", "items = new Array List < > ( ) ; }", "items . add All ( item List ) ; }", "if ( notify On Change ) {", "if ( items . size ( ) - item List . size ( ) != NUM_ ) {", "notify Item Range Changed ( items . size ( ) - item List . size ( ) , item List . size ( ) ) ; }", "else {", "notify Data Set Changed ( ) ; } } }"]}
{"ids": "20853", "code": ["public void write ( int a ) throws IO Exception {", "outs . write ( a ) ;", "position ++ ; }"]}
{"ids": "82211", "code": ["public boolean is Starts With Mode ( ) {", "return starts With Mode ; }"]}
{"ids": "70032", "code": ["public Builder with Threads ( int threads ) {", "properties . set Property ( Netty Options . THREADS , String . value Of ( Assert . arg Not ( threads , threads <= NUM_ , STR_ ) ) ) ;", "return this ; }"]}
{"ids": "82700", "code": ["public void paint Tabbed Pane Tab Area Background ( Synth Context context , Graphics g , int x , int y , int w , int h , int orientation ) {", "if ( orientation == J Tabbed Pane . LEFT ) {", "Affine Transform transform = new Affine Transform ( ) ;", "transform . scale ( - NUM_ , NUM_ ) ;", "transform . rotate ( Math . to Radians ( NUM_ ) ) ;", "paint Background ( context , g , y , x , h , w , transform ) ; }", "else if ( orientation == J Tabbed Pane . RIGHT ) {", "Affine Transform transform = new Affine Transform ( ) ;", "transform . rotate ( Math . to Radians ( NUM_ ) ) ;", "transform . translate ( NUM_ , - ( x + w ) ) ;", "paint Background ( context , g , y , NUM_ , h , w , transform ) ; }", "else if ( orientation == J Tabbed Pane . BOTTOM ) {", "Affine Transform transform = new Affine Transform ( ) ;", "transform . translate ( x , y ) ;", "paint Background ( context , g , NUM_ , NUM_ , w , h , transform ) ; }", "else {", "paint Background ( context , g , x , y , w , h , null ) ; } }"]}
{"ids": "13282", "code": ["@ Override public void end CDATA ( Augmentations augs ) throws XNI Exception {", "try {", "if ( f Lexical Handler != null ) {", "f Lexical Handler . end CDATA ( ) ; } }", "catch ( SAX Exception e ) {", "throw new XNI Exception ( e ) ; } }"]}
{"ids": "24672", "code": ["public static Media Locator create Media Locator ( String url ) {", "Media Locator ml ;", "if ( url . index Of ( STR_ ) > NUM_ && ( ml = new Media Locator ( url ) ) != null ) return ml ;", "if ( url . starts With ( File . separator ) ) {", "if ( ( ml = new Media Locator ( STR_ + url ) ) != null ) return ml ; }", "else {", "String file = STR_ + System . get Property ( STR_ ) + File . separator + url ;", "if ( ( ml = new Media Locator ( file ) ) != null ) return ml ; }", "return null ; }"]}
{"ids": "24338", "code": ["private static void invoke Remote Clear And Wait ( VM remote VM , VM this VM ) {", "remote VM . invoke ( null ) ;", "try {", "clear Latch . await ( ) ; }", "catch ( Interrupted Exception e ) {", "fail ( STR_ ) ; } }"]}
{"ids": "58368", "code": ["public void key ( String skey ) throws SQ Lite . Exception {", "synchronized ( this ) {", "byte ekey [ ] = null ;", "if ( skey != null && skey . length ( ) > NUM_ ) {", "ekey = new byte [ skey . length ( ) ] ;", "for ( int i = NUM_ ; i < skey . length ( ) ; i ++ ) {", "char c = skey . char At ( i ) ;", "ekey [ i ] = ( byte ) ( ( c & NUM_ ) ^ ( c > > NUM_ ) ) ; } }", "key ( ekey ) ; } }"]}
{"ids": "6076", "code": ["public static Cache . Entry make Random Cache Entry ( byte [ ] data , boolean is Expired , boolean needs Refresh ) {", "Random random = new Random ( ) ;", "Cache . Entry entry = new Cache . Entry ( ) ;", "if ( data != null ) {", "entry . data = data ; }", "else {", "entry . data = new byte [ random . next Int ( NUM_ ) ] ; }", "entry . etag = String . value Of ( random . next Long ( ) ) ;", "entry . server Date = random . next Long ( ) ;", "entry . ttl = is Expired ? NUM_ : Long . MAX VALUE ;", "entry . soft Ttl = needs Refresh ? NUM_ : Long . MAX VALUE ;", "return entry ; }"]}
{"ids": "13020", "code": ["public static final void is C Data WF ( DOM Error Handler error Handler , DOM Error Impl error , DOM Locator Impl locator , String datavalue , boolean is XML 11 Version ) {", "if ( datavalue == null || ( datavalue . length ( ) == NUM_ ) ) {", "return ; }", "char [ ] dataarray = datavalue . to Char Array ( ) ;", "int datalength = dataarray . length ;", "if ( is XML 11 Version ) {", "int i = NUM_ ;", "while ( i < datalength ) {", "char c = dataarray [ i ++ ] ;", "if ( XML 11 Char . is XML 11 Invalid ( c ) ) {", "if ( XML Char . is High Surrogate ( c ) && i < datalength ) {", "char c 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( c 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( c , c 2 ) ) ) {", "continue ; } }", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , new Object [ ] { Integer . to String ( c , NUM_ ) } ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; }", "else if ( c == STR_ ) {", "int count = i ;", "if ( count < datalength && dataarray [ count ] == STR_ ) {", "while ( ++ count < datalength && dataarray [ count ] == STR_ ) { }", "if ( count < datalength && dataarray [ count ] == STR_ ) {", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , null ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; } } } } }", "else {", "int i = NUM_ ;", "while ( i < datalength ) {", "char c = dataarray [ i ++ ] ;", "if ( XML Char . is Invalid ( c ) ) {", "if ( XML Char . is High Surrogate ( c ) && i < datalength ) {", "char c 2 = dataarray [ i ++ ] ;", "if ( XML Char . is Low Surrogate ( c 2 ) && XML Char . is Supplemental ( XML Char . supplemental ( c , c 2 ) ) ) {", "continue ; } }", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , new Object [ ] { Integer . to String ( c , NUM_ ) } ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; }", "else if ( c == STR_ ) {", "int count = i ;", "if ( count < datalength && dataarray [ count ] == STR_ ) {", "while ( ++ count < datalength && dataarray [ count ] == STR_ ) { }", "if ( count < datalength && dataarray [ count ] == STR_ ) {", "String msg = DOM Message Formatter . format Message ( DOM Message Formatter . XML DOMAIN , STR_ , null ) ;", "report DOM Error ( error Handler , error , locator , msg , DOM Error . SEVERITY ERROR , STR_ ) ; } } } } } }"]}
{"ids": "69224", "code": ["public void characters ( char ch [ ] , int start , int length ) {", "if ( title Pending ) {", "title . append ( ch , start , length ) ; }", "else if ( desc Pending ) {", "desc . append ( ch , start , length ) ; } }"]}
{"ids": "38104", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "56345", "code": ["private void close Injector Resource ( Shard Id shard Id , Injector shard Injector , Class < ? extends Closeable > ... to Close ) {", "for ( Class < ? extends Closeable > closeable : to Close ) {", "if ( close Injector Optional Resource ( shard Id , shard Injector , closeable ) == false ) {", "logger . warn ( STR_ , shard Id , closeable . get Simple Name ( ) ) ; } } }"]}
{"ids": "34637", "code": ["public final void increment Id Counter To ( int id ) {", "int diff = id - m Id Counter . get ( ) ;", "if ( diff < NUM_ ) return ;", "m Id Counter . add And Get ( diff ) ;", "update Shared Preference ( ) ; }"]}
{"ids": "52700", "code": ["private static int clear Branding Resource Map Cache ( Content Resolver cr , long provider Id ) {", "String Builder where = new String Builder ( ) ;", "where . append ( Imps . Branding Resource Map Cache . PROVIDER ID ) ;", "where . append ( STR_ ) ;", "where . append ( provider Id ) ;", "return cr . delete ( Imps . Branding Resource Map Cache . CONTENT URI , where . to String ( ) , null ) ; }"]}
{"ids": "15160", "code": ["protected int check Last Login ( ) {", "Date Format formatter = new Simple Date Format ( STR_ ) ;", "Date now = new Date ( ) ;", "Date login Time = null ;", "String last Login Enc = null ;", "String last Login = null ;", "String saved User Name = null ;", "int ret Val = NUM_ ;", "if ( time Since Last Login Attribute != null ) {", "Http Servlet Request req = get Http Servlet Request ( ) ;", "if ( req != null ) {", "Cookie cookie = Cookie Utils . get Cookie From Req ( req , time Since Last Login Attribute ) ;", "if ( cookie != null ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , ADAPTIVE , time Since Last Login Attribute ) ; }", "last Login Enc = Cookie Utils . get Cookie Value ( cookie ) ;", "last Login = Access Controller . do Privileged ( new Decode Action ( last Login Enc ) ) ; }", "if ( last Login != null ) {", "String [ ] tokens = last Login . split ( STR_ ) ;", "if ( tokens . length == NUM_ ) {", "last Login = tokens [ NUM_ ] ;", "saved User Name = tokens [ NUM_ ] ; }", "if ( ! user Name . equals Ignore Case ( saved User Name ) ) {", "last Login = null ; }", "if ( last Login != null ) {", "try {", "login Time = formatter . parse ( last Login ) ;", "if ( ( now . get Time ( ) - login Time . get Time ( ) ) < time Since Last Login Value * NUM_ * NUM_ * NUM_ * NUM_ ) {", "ret Val = time Since Last Login Score ; } }", "catch ( Parse Exception pe ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , ADAPTIVE , last Login , pe ) ; } } } } }", "if ( time Since Last Login Save ) {", "post Auth N Map . put ( STR_ , time Since Last Login Attribute ) ;", "last Login = formatter . format ( now ) ;", "last Login = UUID . random UUID ( ) + STR_ + last Login + STR_ + user Name ;", "last Login Enc = Access Controller . do Privileged ( new Encode Action ( last Login ) ) ;", "post Auth N Map . put ( STR_ , last Login Enc ) ; } }", "if ( ! time Since Last Login Invert ) {", "ret Val = time Since Last Login Score - ret Val ; }", "return ret Val ; }"]}
{"ids": "84241", "code": ["public byte [ ] to Byte Array ( ) {", "final int out Len = nonce . length + ( Long . SIZE / Byte . SIZE ) ;", "final Byte Buffer out = Byte Buffer . allocate ( out Len ) ;", "out . put ( nonce ) ;", "out . put Long ( content Length ) ;", "return out . array ( ) ; }"]}
{"ids": "69468", "code": ["public void add Interface ( CP ifc ) {", "add CP Item ( ifc ) ;", "interfaces . add Element ( ifc ) ; }"]}
{"ids": "2793", "code": ["public Builder add Constraint ( @ Job Constraint int constraint ) {", "int [ ] new Constraints = new int [ m Constraints == null ? NUM_ : m Constraints . length + NUM_ ] ;", "if ( m Constraints != null && m Constraints . length != NUM_ ) {", "System . arraycopy ( m Constraints , NUM_ , new Constraints , NUM_ , m Constraints . length ) ; }", "new Constraints [ new Constraints . length - NUM_ ] = constraint ;", "m Constraints = new Constraints ;", "return this ; }"]}
{"ids": "14101", "code": ["void cleanup Parameters ( String relay State ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + relay State ) ; }", "relay State Map . remove ( relay State ) ;", "user Session Map . remove ( relay State ) ;", "user ID Map . remove ( relay State ) ;", "is SOAP Initiated Map . remove ( relay State ) ;", "is SOAP Initiated Map . remove ( relay State ) ;", "is IDP Initiated Map . remove ( relay State ) ;", "orig Protocol Map . remove ( relay State ) ;", "protocol List Map . remove ( relay State ) ;", "realm Map . remove ( relay State ) ;", "idp Entity ID Map . remove ( relay State ) ;", "sp Entity ID Map . remove ( relay State ) ;", "slo Request XML Map . remove ( relay State ) ;", "slo Response XML Map . remove ( relay State ) ;", "current Status Map . remove ( relay State ) ; }"]}
{"ids": "61358", "code": ["private boolean extra Entity ( String output String , int char To Map ) {", "boolean extra = false ;", "if ( char To Map < ASCII MAX ) {", "switch ( char To Map ) {", "case STR_ :", "if ( ! output String . equals ( STR_ ) ) extra = true ;", "break ;", "case STR_ :", "if ( ! output String . equals ( STR_ ) ) extra = true ;", "break ;", "case STR_ :", "if ( ! output String . equals ( STR_ ) ) extra = true ;", "break ;", "case STR_ :", "if ( ! output String . equals ( STR_ ) ) extra = true ;", "break ;", "default :", "extra = true ; } }", "return extra ; }"]}
{"ids": "36569", "code": ["protected void draw Point ( Graphics 2 D g , Point Style point Style , double x , double y , Color color , Color border Color ) {", "Shape point Shape = point Style . create Shape ( x , y ) ;", "g . set Color ( color ) ;", "g . fill ( point Shape ) ;", "g . set Color ( border Color ) ;", "g . draw ( point Shape ) ; }"]}
{"ids": "26864", "code": ["int retry Time ( ) {", "return retry Time . decrement And Get ( ) ; }"]}
{"ids": "4626", "code": ["public Datepicker Combo ( final Composite parent , final int style ) {", "this ( parent , style , Date Format . get Date Time Instance ( ) ) ; }"]}
{"ids": "84706", "code": ["protected void draw Mark Hilighted ( Graphics 2 D g 2 , float x , float y ) {", "Rectangle 2 D bounds = mark . get Bounds 2 D ( ) ;", "float w = ( float ) bounds . get Width ( ) ;", "float h = ( float ) bounds . get Height ( ) ;", "x = x - ( w / NUM_ ) ;", "y = y - ( h / NUM_ ) ;", "g 2 . translate ( x , y ) ;", "if ( hilighted Mark Fill Paint != null ) {", "g 2 . set Paint ( hilighted Mark Fill Paint ) ;", "g 2 . fill ( mark ) ; }", "g 2 . set Paint ( hilighted Mark Paint ) ;", "g 2 . set Stroke ( hilighted Mark Stroke ) ;", "g 2 . draw ( mark ) ;", "g 2 . translate ( - x , - y ) ;", "Rectangle 2 D rect = new Rectangle 2 D . Float ( x , y , w , h ) ;", "mark Bounds . add ( rect ) ; }"]}
{"ids": "50368", "code": ["public static String trim Trailing Whitespace ( String str ) {", "if ( ! has Length ( str ) ) {", "return str ; }", "String Builder sb = new String Builder ( str ) ;", "while ( sb . length ( ) > NUM_ && Character . is Whitespace ( sb . char At ( sb . length ( ) - NUM_ ) ) ) {", "sb . delete Char At ( sb . length ( ) - NUM_ ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "59970", "code": ["private static Mks Ticket Response check Get Mks Ticket Response ( Mks Ticket Response mks Ticket Response ) throws Rpc Exception {", "logger . info ( STR_ , mks Ticket Response ) ;", "switch ( mks Ticket Response . get Result ( ) ) {", "case OK :", "break ;", "case SYSTEM ERROR :", "throw new System Error Exception ( mks Ticket Response . get Error ( ) ) ;", "case VM NOT FOUND :", "throw new Vm Not Found Exception ( mks Ticket Response . get Error ( ) ) ;", "case INVALID VM POWER STATE :", "throw new Invalid Vm Power State Exception ( mks Ticket Response . get Error ( ) ) ;", "default :", "throw new Rpc Exception ( String . format ( STR_ , mks Ticket Response . get Result ( ) ) ) ; }", "return mks Ticket Response ; }"]}
{"ids": "72695", "code": ["@ Not Null default B append ( double d , int decimal Places ) throws Buffer Overflow Exception {", "if ( decimal Places < NUM_ ) {", "double d 2 = d * Maths . tens ( decimal Places ) ;", "if ( d 2 <= Long . MAX VALUE && d 2 >= Long . MIN VALUE ) {", "return append Decimal ( Math . round ( d 2 ) , decimal Places ) ; } }", "return append ( d ) ; }"]}
{"ids": "2138", "code": ["public Completable Future < T > complete Async ( Supplier < ? extends T > supplier , Executor executor ) {", "if ( supplier == null || executor == null ) throw new Null Pointer Exception ( ) ;", "executor . execute ( new Async Supply < T > ( this , supplier ) ) ;", "return this ; }"]}
{"ids": "16805", "code": ["private Movie Subtitle Chooser Model ( ) {", "name = BUNDLE . get String ( STR_ ) ; }"]}
{"ids": "61510", "code": ["protected Suballocated Int Vector find Namespace Context ( int element Node Index ) {", "if ( null != m namespace Decl Set Elements ) {", "int would Be At = find In Sorted Suballocated Int Vector ( m namespace Decl Set Elements , element Node Index ) ;", "if ( would Be At >= NUM_ ) return ( Suballocated Int Vector ) m namespace Decl Sets . element At ( would Be At ) ;", "if ( would Be At == - NUM_ ) return null ;", "would Be At = - NUM_ - would Be At ;", "int candidate = m namespace Decl Set Elements . element At ( -- would Be At ) ;", "int ancestor = parent ( element Node Index ) ;", "if ( would Be At == NUM_ && candidate < ancestor ) {", "int root Handle = get Document Root ( make Node Handle ( element Node Index ) ) ;", "int root ID = make Node Identity ( root Handle ) ;", "int uppermost NS Candidate ID ;", "if ( get Node Type ( root Handle ) == DTM . DOCUMENT NODE ) {", "int ch = firstch ( root ID ) ;", "uppermost NS Candidate ID = ( ch != DTM . NULL ) ? ch : root ID ; }", "else {", "uppermost NS Candidate ID = root ID ; }", "if ( candidate == uppermost NS Candidate ID ) {", "return ( Suballocated Int Vector ) m namespace Decl Sets . element At ( would Be At ) ; } }", "while ( would Be At >= NUM_ && ancestor > NUM_ ) {", "if ( candidate == ancestor ) {", "return ( Suballocated Int Vector ) m namespace Decl Sets . element At ( would Be At ) ; }", "else if ( candidate < ancestor ) {", "do {", "ancestor = parent ( ancestor ) ; }", "while ( candidate < ancestor ) ; }", "else if ( would Be At > NUM_ ) {", "candidate = m namespace Decl Set Elements . element At ( -- would Be At ) ; }", "else break ; } }", "return null ; }"]}
{"ids": "26426", "code": ["public static java . sql . Timestamp now Timestamp ( ) {", "return get Timestamp ( System . current Time Millis ( ) ) ; }"]}
{"ids": "59786", "code": ["public int diff common Suffix ( String text 1 , String text 2 ) {", "int text 1 length = text 1 . length ( ) ;", "int text 2 length = text 2 . length ( ) ;", "int n = Math . min ( text 1 length , text 2 length ) ;", "for ( int i = NUM_ ; i <= n ; i ++ ) {", "if ( text 1 . char At ( text 1 length - i ) != text 2 . char At ( text 2 length - i ) ) {", "return i - NUM_ ; } }", "return n ; }"]}
{"ids": "52334", "code": ["private void translate Matrix After Rotate ( int axis , float trans , float prev Image Size , float image Size , int prev View Size , int view Size , int drawable Size ) {", "if ( image Size < view Size ) {", "m [ axis ] = ( view Size - ( drawable Size * m [ Matrix . MSCALE X ] ) ) * NUM_ ; }", "else if ( trans > NUM_ ) {", "m [ axis ] = - ( ( image Size - view Size ) * NUM_ ) ; }", "else {", "float percentage = ( Math . abs ( trans ) + ( NUM_ * prev View Size ) ) / prev Image Size ;", "m [ axis ] = - ( ( percentage * image Size ) - ( view Size * NUM_ ) ) ; } }"]}
{"ids": "41295", "code": ["private void revoke Encrypt Policy ( org . wso 2 . emm . agent . beans . Operation operation ) {", "boolean encrypt Status = ( device Policy Manager . get Storage Encryption Status ( ) != device Policy Manager . ENCRYPTION STATUS UNSUPPORTED && ( device Policy Manager . get Storage Encryption Status ( ) == device Policy Manager . ENCRYPTION STATUS ACTIVE || device Policy Manager . get Storage Encryption Status ( ) == device Policy Manager . ENCRYPTION STATUS ACTIVATING ) ) ;", "if ( operation . is Enabled ( ) && encrypt Status ) {", "device Policy Manager . set Storage Encryption ( device Admin , false ) ; } }"]}
{"ids": "52979", "code": ["public JSON Buffer close Hash ( ) {", "if ( stack . empty ( ) || stack . peek ( ) != Operand . HASH ) {", "throw new JSON Exception ( STR_ ) ; }", "remove Separator ( ) ;", "buffer . append ( STR_ ) ;", "stack . pop ( ) ;", "add Separator ( ) ;", "return this ; }"]}
{"ids": "40122", "code": ["private static byte [ ] generate Seed ( ) {", "try {", "Byte Array Output Stream seed Buffer = new Byte Array Output Stream ( ) ;", "Data Output Stream seed Buffer Out = new Data Output Stream ( seed Buffer ) ;", "seed Buffer Out . write Long ( System . current Time Millis ( ) ) ;", "seed Buffer Out . write Long ( System . nano Time ( ) ) ;", "seed Buffer Out . write ( BUILD FINGERPRINT AND DEVICE SERIAL ) ;", "seed Buffer Out . close ( ) ;", "return seed Buffer . to Byte Array ( ) ; }", "catch ( IO Exception e ) {", "throw new Security Exception ( STR_ , e ) ; } }"]}
{"ids": "14314", "code": ["private void init ( Snmp Mib my Mib ) {", "if ( debug == null ) {", "final Key < Debug > key = Key . get ( Debug . class , Names . named ( Core Token Constants . CTS MONITOR DEBUG ) ) ;", "debug = Injector Holder . get Instance ( key ) ; }", "final List < Operation Entry > operation Entries = new Array List < Operation Entry > ( ) ;", "final List < Token Entry > token Entries = new Array List < Token Entry > ( ) ;", "for ( Enum e : crud Items ) {", "final Operation Entry entry = new Operation Entry ( my Mib ) ;", "entry . Operation Type = e . name ( ) ;", "entry . Operation Table Index = ( long ) e . ordinal ( ) + NUM_ ;", "operation Entries . add ( entry ) ; }", "for ( Enum e : token Items ) {", "final Token Entry entry = new Token Entry ( my Mib ) ;", "entry . Token Type = e . name ( ) ;", "entry . Token Table Index = ( long ) e . ordinal ( ) + NUM_ ;", "token Entries . add ( entry ) ; }", "try {", "for ( Operation Entry ce : operation Entries ) {", "Operation Table . add Entry ( ce ) ; }", "for ( Token Entry te : token Entries ) {", "Token Table . add Entry ( te ) ; }", "create CRUD Operations Per Token Type Table ( my Mib , Cts CRUD Operations Per Token Type Table , operation Entries , token Entries ) ;", "create CRUD Operations Table ( my Mib , Cts CRUD Operations Table , operation Entries ) ;", "create Token Operations Table ( my Mib , Cts Token Operations Table , token Entries ) ; }", "catch ( Snmp Status Exception e ) {", "if ( debug . message Enabled ( ) ) {", "debug . error ( STR_ , e ) ; } } }"]}
{"ids": "38701", "code": ["@ Override public void disconnection Notification ( String event Name , Object source ) {", "m listenees . remove ( source ) ;", "if ( m listenees . size ( ) == NUM_ ) {", "m listenee Types . clear ( ) ; } }"]}
{"ids": "50216", "code": ["@ Override public To Double Function < Stream < Tuple 2 < F , Double > > > dist ( Stream < Tuple 2 < F , Double > > features 1 ) {", "Object 2 Double Map < F > aux Map = new Object 2 Double Open Hash Map < > ( ) ;", "aux Map . default Return Value ( NUM_ ) ;", "Double Adder norm 1 = new Double Adder ( ) ;", "features 1 . for Each ( null ) ;", "if ( norm 1 . double Value ( ) == NUM_ ) {", "return null ; }", "return null ; }"]}
{"ids": "78983", "code": ["public Load Metadata Details [ ] read Load Metadata ( String table Folder Path ) {", "Gson gson Object To Read = new Gson ( ) ;", "Data Input Stream data Input Stream = null ;", "Buffered Reader buff Reader = null ;", "Input Stream Reader in Stream = null ;", "String metadata File Name = table Folder Path + Carbon Common Constants . FILE SEPARATOR + Carbon Common Constants . LOADMETADATA FILENAME ;", "Load Metadata Details [ ] list Of Load Folder Details Array ;", "Atomic File Operations file Operation = new Atomic File Operations Impl ( metadata File Name , File Factory . get File Type ( metadata File Name ) ) ;", "try {", "if ( ! File Factory . is File Exist ( metadata File Name , File Factory . get File Type ( metadata File Name ) ) ) {", "return new Load Metadata Details [ NUM_ ] ; }", "data Input Stream = file Operation . open For Read ( ) ;", "in Stream = new Input Stream Reader ( data Input Stream , Charset . for Name ( Carbon Common Constants . DEFAULT CHARSET ) ) ;", "buff Reader = new Buffered Reader ( in Stream ) ;", "list Of Load Folder Details Array = gson Object To Read . from Json ( buff Reader , Load Metadata Details [ ] . class ) ; }", "catch ( IO Exception e ) {", "return new Load Metadata Details [ NUM_ ] ; }", "finally {", "close Streams ( buff Reader , in Stream , data Input Stream ) ; }", "return list Of Load Folder Details Array ; }"]}
{"ids": "10116", "code": ["public String to Inner Html ( Node node , Appendable appendable ) {", "Node Visitor renderer = create Renderer ( appendable ) ;", "node . visit Children ( renderer ) ;", "return appendable . to String ( ) ; }"]}
{"ids": "22459", "code": ["private void update Storage View Info ( V Plex Storage View Info storage View Info ) {", "V Plex Api Discovery Manager discovery Mgr = vplex Api Client . get Discovery Manager ( ) ;", "discovery Mgr . update Storage View Info ( storage View Info ) ; }"]}
{"ids": "12308", "code": ["static List < String > decode All ( Collection < String > event Keys ) {", "List < String > event Ids = Lists . new Array List ( ) ;", "for ( String event Key : event Keys ) {", "decode To ( event Key , event Ids ) ; }", "return event Ids ; }"]}
{"ids": "5879", "code": ["public Object [ ] to Array ( ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "Object [ ] a = new Object [ count ] ;", "int k = NUM_ ;", "for ( Node < E > p = first ; p != null ; p = p . next ) a [ k ++ ] = p . item ;", "return a ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "61584", "code": ["public byte [ ] to Byte Array ( String ascii ) {", "if ( ascii == null ) {", "return EMPTY BYTE ARRAY ; }", "return from Ascii ( ascii . to Char Array ( ) ) ; }"]}
{"ids": "82374", "code": ["public static boolean [ ] copy Of Range ( boolean [ ] original , int start , int end ) {", "if ( start <= end ) {", "if ( original . length >= start && NUM_ <= start ) {", "int length = end - start ;", "int copy Length = Math . min ( length , original . length - start ) ;", "boolean [ ] copy = new boolean [ length ] ;", "System . arraycopy ( original , start , copy , NUM_ , copy Length ) ;", "return copy ; }", "throw new Array Index Out Of Bounds Exception ( ) ; }", "throw new Illegal Argument Exception ( ) ; }"]}
{"ids": "64007", "code": ["private void on Column Sync ( ) {", "int sync Position = Math . min ( m Sync Position , get Count ( ) - NUM_ ) ;", "Sparse Array < Double > position Height Ratios = new Sparse Array < Double > ( sync Position ) ;", "for ( int pos = NUM_ ; pos < sync Position ; pos ++ ) {", "final Grid Item Record rec = m Position Data . get ( pos ) ;", "if ( rec == null ) break ;", "Log . d ( TAG , STR_ + pos + STR_ + rec . height Ratio ) ;", "position Height Ratios . append ( pos , rec . height Ratio ) ; }", "m Position Data . clear ( ) ;", "if ( DBG ) Log . d ( TAG , STR_ + m Column Width ) ;", "for ( int pos = NUM_ ; pos < sync Position ; pos ++ ) {", "final Grid Item Record rec = get Or Create Record ( pos ) ;", "final double height Ratio = position Height Ratios . get ( pos ) ;", "final int height = ( int ) ( m Column Width * height Ratio ) ;", "rec . height Ratio = height Ratio ;", "int top ;", "int bottom ;", "if ( is Header Or Footer ( pos ) ) {", "top = get Lowest Positioned Bottom ( ) ;", "bottom = top + height ;", "for ( int i = NUM_ ; i < m Column Count ; i ++ ) {", "m Column Tops [ i ] = top ;", "m Column Bottoms [ i ] = bottom ; } }", "else {", "final int column = get Highest Positioned Bottom Column ( ) ;", "top = m Column Bottoms [ column ] ;", "bottom = top + height + get Child Top Margin ( pos ) + get Child Bottom Margin ( ) ;", "m Column Tops [ column ] = top ;", "m Column Bottoms [ column ] = bottom ;", "rec . column = column ; }", "if ( DBG ) Log . d ( TAG , STR_ + pos + STR_ + top + STR_ + bottom + STR_ + height + STR_ + height Ratio ) ; }", "final int sync Column = get Highest Positioned Bottom Column ( ) ;", "set Position Column ( sync Position , sync Column ) ;", "int sync To Bottom = m Column Bottoms [ sync Column ] ;", "int offset = - sync To Bottom + m Specific Top ;", "offset All Columns Top And Bottom ( offset ) ;", "m Distance To Top = - sync To Bottom ;", "System . arraycopy ( m Column Bottoms , NUM_ , m Column Tops , NUM_ , m Column Count ) ; }"]}
{"ids": "80260", "code": ["private static Map < Direction , Sprite [ ] > split Tiles ( Sprite Store st , Sprite orig ) {", "int twidth = NUM ATTACK FRAMES * TILE SIZE ;", "int theight = NUM_ * TILE SIZE ;", "Map < Direction , Sprite [ ] > map = new Enum Map < Direction , Sprite [ ] > ( Direction . class ) ;", "int y = NUM_ ;", "map . put ( Direction . UP , st . get Tiles ( orig , NUM_ , y , NUM ATTACK FRAMES , twidth , theight ) ) ;", "y += theight ;", "map . put ( Direction . RIGHT , st . get Tiles ( orig , NUM_ , y , NUM ATTACK FRAMES , twidth , theight ) ) ;", "y += theight ;", "map . put ( Direction . DOWN , st . get Tiles ( orig , NUM_ , y , NUM ATTACK FRAMES , twidth , theight ) ) ;", "y += theight ;", "map . put ( Direction . LEFT , st . get Tiles ( orig , NUM_ , y , NUM ATTACK FRAMES , twidth , theight ) ) ;", "return map ; }"]}
{"ids": "19779", "code": ["void increment Schema ( String schema Name ) {", "if ( schema Name != null ) {", "Integer count = db Map . get ( schema Name ) ;", "if ( count == null ) db Map . put ( schema Name , NUM_ ) ;", "else db Map . put ( schema Name , count . int Value ( ) + NUM_ ) ; }", "last Db = schema Name ; }"]}
{"ids": "21103", "code": ["private String build Event Data ( ) throws JAXB Exception {", "if ( event Parameters != null ) {", "try {", "JAXB Context jaxb Context = JAXB Context . new Instance ( Event Parameters . class ) ;", "Marshaller marshaller = jaxb Context . create Marshaller ( ) ;", "marshaller . set Property ( Marshaller . JAXB FORMATTED OUTPUT , true ) ;", "Writer out Writer = new String Writer ( ) ;", "Stream Result result = new Stream Result ( out Writer ) ;", "marshaller . marshal ( event Parameters , result ) ;", "return out Writer . to String ( ) ; }", "catch ( JAXB Exception e ) {", "log . error ( STR_ + e . get Message ( ) ) ;", "throw e ; } }", "else {", "return null ; } }"]}
{"ids": "55749", "code": ["public boolean is Projected ( ) {", "return projected ; }"]}
{"ids": "13209", "code": ["private boolean normalize Attr Value ( XML Attributes attributes , int index ) {", "boolean leading Space = true ;", "boolean space Start = false ;", "boolean reading Non Space = false ;", "int count = NUM_ ;", "int eaten = NUM_ ;", "String attr Value = attributes . get Value ( index ) ;", "char [ ] att Value = new char [ attr Value . length ( ) ] ;", "f Buffer . set Length ( NUM_ ) ;", "attr Value . get Chars ( NUM_ , attr Value . length ( ) , att Value , NUM_ ) ;", "for ( int i = NUM_ ; i < att Value . length ; i ++ ) {", "if ( att Value [ i ] == STR_ ) {", "if ( reading Non Space ) {", "space Start = true ;", "reading Non Space = false ; }", "if ( space Start && ! leading Space ) {", "space Start = false ;", "f Buffer . append ( att Value [ i ] ) ;", "count ++ ; }", "else {", "if ( leading Space || ! space Start ) {", "eaten ++ ; } } }", "else {", "reading Non Space = true ;", "space Start = false ;", "leading Space = false ;", "f Buffer . append ( att Value [ i ] ) ;", "count ++ ; } }", "if ( count > NUM_ && f Buffer . char At ( count - NUM_ ) == STR_ ) {", "f Buffer . set Length ( count - NUM_ ) ; }", "String new Value = f Buffer . to String ( ) ;", "attributes . set Value ( index , new Value ) ;", "return ! attr Value . equals ( new Value ) ; }"]}
{"ids": "82759", "code": ["private Shape decode Mark Interior ( int width , int height ) {", "double left = width / NUM_ - NUM_ ;", "double top = height / NUM_ - NUM_ ;", "path . reset ( ) ;", "path . move To ( left + NUM_ , top + NUM_ ) ;", "path . line To ( left + NUM_ , top + NUM_ ) ;", "path . line To ( left + NUM_ , top + NUM_ ) ;", "path . close Path ( ) ;", "return path ; }"]}
{"ids": "36896", "code": ["public Monotone Solver ( final I Lattice Graph < Graph Node > graph , final Lattice lattice , final I State Vector < Graph Node , Lattice Element > start Vector , final I Transformation Provider < Graph Node , Lattice Element > transformation Provider , final I Graph Walker < Graph Node , Object Type > walker ) {", "if ( graph == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( lattice == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( start Vector == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( transformation Provider == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "final List < Graph Node > nodes = graph . get Nodes ( ) ;", "if ( nodes . size ( ) != start Vector . size ( ) ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , start Vector . size ( ) , nodes . size ( ) ) ) ; }", "for ( final Graph Node node : nodes ) {", "if ( ! start Vector . has State ( node ) ) {", "throw new Illegal Argument Exception ( STR_ + node + STR_ ) ; } }", "this . graph = graph ;", "this . lattice = lattice ;", "this . state = start Vector ;", "this . transformation List = transformation Provider ;", "this . walker = walker ; }"]}
{"ids": "21533", "code": ["private Stat prepare Port Stat Info ( String native Id , URI resource Id , long iops , long time Sample ) {", "Stat ip Port Stat = new Stat ( ) ;", "ip Port Stat . set Service Type ( Constants . File ) ;", "ip Port Stat . set Time Collected ( time Sample ) ;", "ip Port Stat . set Resource Id ( resource Id ) ;", "ip Port Stat . set Native Guid ( native Id ) ;", "ip Port Stat . set Total I Os ( iops ) ;", "return ip Port Stat ; }"]}
{"ids": "43952", "code": ["public int compare To ( App Version other ) {", "int result = major - other . major ;", "if ( result == NUM_ ) {", "result = minor - other . minor ; }", "if ( result == NUM_ ) {", "result = patch - other . patch ; }", "if ( result == NUM_ && ( milestone > - NUM_ || other . milestone > - NUM_ ) ) {", "if ( milestone > - NUM_ ) {", "if ( other . milestone == - NUM_ ) {", "result = - NUM_ ; }", "else {", "result = milestone - other . milestone ; } }", "else {", "if ( other . milestone > - NUM_ ) {", "result = NUM_ ; } } }", "if ( result == NUM_ && ! Object Util . null Equals ( modifier , other . modifier ) ) {", "if ( modifier == null ) {", "result = NUM_ ; }", "else if ( other . modifier == null ) {", "result = - NUM_ ; }", "else {", "result = modifier . compare To Ignore Case ( other . modifier ) ; } }", "return result ; }"]}
{"ids": "21323", "code": ["public Stream Consumer ( Input Stream stream , String charset ) {", "in = new Buffered Input Stream ( stream ) ;", "this . charset = charset ;", "thread . start ( ) ; }"]}
{"ids": "46316", "code": ["public Media Size ( int x , int y , int units ) {", "super ( x , y , units ) ;", "if ( x > y ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "size Vector . add ( this ) ; }"]}
{"ids": "10624", "code": ["private Peer construct Peer Pojo ( final Peer Data peer Data ) throws Peer Exception {", "Preconditions . check Not Null ( peer Data , STR_ ) ;", "try {", "Peer Info peer Info = from Json ( peer Data . get Info ( ) , Peer Info . class ) ;", "if ( local Peer Id . equals ( peer Data . get Id ( ) ) ) {", "local Peer . set Peer Info ( peer Info ) ;", "return local Peer ; }", "Remote Peer Impl remote Peer = new Remote Peer Impl ( local Peer Id , security Manager , peer Info , messenger , command Response Listener , message Response Listener , provider , this ) ;", "Relation Info Meta relation Info Meta = new Relation Info Meta ( ) ;", "Map < String , String > traits = relation Info Meta . get Relation Traits ( ) ;", "traits . put ( STR_ , STR_ ) ;", "traits . put ( STR_ , STR_ ) ;", "traits . put ( STR_ , STR_ ) ;", "User peer Owner = identity Manager . get User By Key Id ( identity Manager . get Peer Owner Id ( ) ) ;", "Relation Meta relation Meta = new Relation Meta ( peer Owner , local Peer , remote Peer , local Peer . get Key Id ( ) ) ;", "Relation relation = relation Manager . build Relation ( relation Info Meta , relation Meta ) ;", "relation . set Relation Status ( Relation Status . VERIFIED ) ;", "relation Manager . save Relation ( relation ) ;", "return remote Peer ; }", "catch ( Exception e ) {", "throw new Peer Exception ( STR_ , e ) ; } }"]}
{"ids": "69690", "code": ["public void load Workspace Contents ( String xml ) throws Blockly Parser Exception {", "load Workspace Contents ( new Byte Array Input Stream ( xml . get Bytes ( ) ) ) ; }"]}
{"ids": "47081", "code": ["private boolean compare And Decrement Worker Count ( int expect ) {", "return ctl . compare And Set ( expect , expect - NUM_ ) ; }"]}
{"ids": "29768", "code": ["public boolean load ( String file Location , int type ) {", "if ( m Has Loaded ) {", "return false ; }", "String shader Code ;", "try {", "shader Code = Shader Utils . get String From File In Assets ( m Context , file Location , true ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "m Is Compiled = false ;", "return false ; }", "m Has Loaded = true ;", "m Shader Id = GLES 20 . gl Create Shader ( type ) ;", "if ( m Shader Id == NUM_ ) {", "String msg = ( type == GLES 20 . GL VERTEX SHADER ? STR_ : STR_ ) ;", "Log . e ( TAG , STR_ + msg ) ;", "return false ; }", "GLES 20 . gl Shader Source ( m Shader Id , shader Code ) ;", "GLES 20 . gl Compile Shader ( m Shader Id ) ;", "int [ ] compile Status = new int [ NUM_ ] ;", "GLES 20 . gl Get Shaderiv ( m Shader Id , GLES 20 . GL COMPILE STATUS , compile Status , NUM_ ) ;", "m Is Compiled = ( compile Status [ NUM_ ] == GLES 20 . GL TRUE ) ;", "if ( ! m Is Compiled ) {", "String compile Error = GLES 20 . gl Get Shader Info Log ( m Shader Id ) ;", "Log . e ( TAG , compile Error ) ;", "GLES 20 . gl Delete Shader ( m Shader Id ) ; }", "return m Is Compiled && m Has Loaded ; }"]}
{"ids": "85166", "code": ["public void add Child ( Pdf Layer child Layer ) {", "if ( child Layer . parent != null ) throw new Illegal Argument Exception ( STR_ ) ;", "child Layer . parent = this ;", "if ( children == null ) children = new Array List < > ( ) ;", "children . add ( child Layer ) ; }"]}
{"ids": "11714", "code": ["protected void move Randomly ( OM Point point , double factor , Projection proj ) {", "double hor = Math . random ( ) - NUM_ ;", "double vert = Math . random ( ) - NUM_ ;", "Point 2 D map Point = proj . forward ( point . get Lat ( ) , point . get Lon ( ) ) ;", "map Point . set Location ( map Point . get X ( ) + ( hor * factor ) , map Point . get Y ( ) + ( vert * factor ) ) ;", "Point 2 D llp = proj . inverse ( map Point ) ;", "point . set Lat ( llp . get Y ( ) ) ;", "point . set Lon ( llp . get X ( ) ) ; }"]}
{"ids": "25113", "code": ["private void initialize Context ( ) throws IO Exception {", "String working Dir = System . get Property ( STR_ ) ;", "File dataset = File Utils . get File ( working Dir + STR_ ) ;", "File log 4 j File = File Utils . get File ( working Dir + STR_ ) ;", "File dataset Folder = new File ( destination Folder + STR_ ) ;", "File log 4 j Folder = new File ( destination Folder + STR_ ) ;", "dataset . mkdirs ( ) ;", "log 4 j File . mkdirs ( ) ;", "File Utils . copy File To Directory ( dataset , dataset Folder ) ;", "File Utils . copy File To Directory ( log 4 j File , log 4 j Folder ) ; }"]}
{"ids": "58298", "code": ["protected boolean is Token Char ( char ch ) {", "if ( Character . is Letter Or Digit ( ch ) ) return true ;", "if ( Character . is ISO Control ( ch ) ) return false ;", "if ( is Http Separator ( ch ) ) return false ;", "return true ; }"]}
{"ids": "54827", "code": ["public static int parse Int ( FXG Node node , String value , String name ) {", "try {", "return Integer . parse Int ( value ) ; }", "catch ( Number Format Exception e ) {", "throw new FXG Exception ( node . get Start Line ( ) , node . get Start Column ( ) , STR_ , name , value ) ; } }"]}
{"ids": "74976", "code": ["public static double inv Sqrt Quick ( final double value ) {", "if ( USE JDK MATH ) {", "return NUM_ / Math . sqrt ( value ) ; }", "return Double . long Bits To Double ( NUM_ - ( Double . double To Raw Long Bits ( value ) > > NUM_ ) ) ; }"]}
{"ids": "15775", "code": ["public void close ( ) throws IO Exception {", "article Idx Writer . close ( ) ;", "chrono Idx Writer . close ( ) ;", "revision Idx Writer . close ( ) ; }"]}
{"ids": "66678", "code": ["private final byte [ ] zero Extend ( byte [ ] data To Pad ) {", "assert null != data To Pad ;", "final int target Length = NUM_ ;", "if ( target Length <= data To Pad . length ) return data To Pad ;", "byte padded [ ] = new byte [ target Length ] ;", "for ( int i = NUM_ ; i < data To Pad . length ; i ++ ) padded [ i ] = data To Pad [ i ] ;", "for ( int i = data To Pad . length ; i < padded . length ; i ++ ) padded [ i ] = ( byte ) NUM_ ;", "return padded ; }"]}
{"ids": "23243", "code": ["private static boolean is Certificate Entry ( String alias ) throws Key Store Exception {", "return s Key Store . is Certificate Entry ( alias ) ; }"]}
{"ids": "62582", "code": ["public static Window window For Word In Position ( int window Size , int word Pos , List < String > sentence ) {", "List < String > window = new Array List < > ( ) ;", "List < String > only Tokens = new Array List < > ( ) ;", "int context Size = ( int ) Math . floor ( ( window Size - NUM_ ) / NUM_ ) ;", "for ( int i = word Pos - context Size ; i <= word Pos + context Size ; i ++ ) {", "if ( i < NUM_ ) window . add ( STR_ ) ;", "else if ( i >= sentence . size ( ) ) window . add ( STR_ ) ;", "else {", "only Tokens . add ( sentence . get ( i ) ) ;", "window . add ( sentence . get ( i ) ) ; } }", "String whole Sentence = String Utils . join ( sentence ) ;", "String window 2 = String Utils . join ( only Tokens ) ;", "int begin = whole Sentence . index Of ( window 2 ) ;", "int end = begin + window 2 . length ( ) ;", "return new Window ( window , begin , end ) ; }"]}
{"ids": "85474", "code": ["private void fill In ( Class Symbol c ) {", "if ( completion Failure Name == c . fullname ) {", "throw new Completion Failure ( c , STR_ ) ; }", "current Owner = c ;", "warned Attrs . clear ( ) ;", "Java File Object classfile = c . classfile ;", "if ( classfile != null ) {", "Java File Object previous Class File = current Class File ;", "try {", "if ( filling ) {", "Assert . error ( STR_ + classfile . to Uri ( ) + STR_ + previous Class File ) ; }", "current Class File = classfile ;", "if ( verbose ) {", "log . print Verbose ( STR_ , current Class File . to String ( ) ) ; }", "if ( classfile . get Kind ( ) == Java File Object . Kind . CLASS ) {", "filling = true ;", "try {", "bp = NUM_ ;", "buf = read Input Stream ( buf , classfile . open Input Stream ( ) ) ;", "read Class File ( c ) ;", "if ( ! missing Type Variables . is Empty ( ) && ! found Type Variables . is Empty ( ) ) {", "List < Type > missing = missing Type Variables ;", "List < Type > found = found Type Variables ;", "missing Type Variables = List . nil ( ) ;", "found Type Variables = List . nil ( ) ;", "filling = false ;", "Class Type ct = ( Class Type ) current Owner . type ;", "ct . supertype field = types . subst ( ct . supertype field , missing , found ) ;", "ct . interfaces field = types . subst ( ct . interfaces field , missing , found ) ; }", "else if ( missing Type Variables . is Empty ( ) != found Type Variables . is Empty ( ) ) {", "Name name = missing Type Variables . head . tsym . name ;", "throw bad Class File ( STR_ , name ) ; } }", "finally {", "missing Type Variables = List . nil ( ) ;", "found Type Variables = List . nil ( ) ;", "filling = false ; } }", "else {", "if ( source Completer != null ) {", "source Completer . complete ( c ) ; }", "else {", "throw new Illegal State Exception ( STR_ + classfile . to Uri ( ) ) ; } }", "return ; }", "catch ( IO Exception ex ) {", "throw bad Class File ( STR_ , ex . get Message ( ) ) ; }", "finally {", "current Class File = previous Class File ; } }", "else {", "JC Diagnostic diag = diag Factory . fragment ( STR_ , c . flatname ) ;", "throw new Completion Failure ( c , diag ) ; } }"]}
{"ids": "36041", "code": ["public void enable ( ) {", "List < Entry > entries = remove Intersected Entries ( tree . get Selected Entries ( ) ) ;", "boolean enable = true ;", "for ( Entry entry : entries ) {", "if ( entry == null ) {", "enable = false ;", "break ; }", "if ( ! required Selection Type . is Instance ( entry ) ) {", "enable = false ;", "break ; }", "if ( needs Write Access && entry . is Read Only ( ) ) {", "enable = false ;", "break ; } }", "if ( entries . is Empty ( ) ) {", "enable = false ; }", "set Enabled ( enable ) ; }"]}
{"ids": "8108", "code": ["protected void mark ( ) throws Compilation Failed Exception {", "apply To Source Units ( mark ) ; }"]}
{"ids": "20795", "code": ["private boolean label To Keep Rec ( Node v , Set < Integer > ids , Node Set keep ) {", "boolean has Below = false ;", "int id = ( Integer ) v . get Info ( ) ;", "if ( ids . size ( ) == NUM_ || ids . contains ( id ) ) has Below = true ;", "for ( Edge e = v . get First Out Edge ( ) ; e != null ; e = v . get Next Out Edge ( e ) ) {", "Node w = e . get Target ( ) ;", "if ( label To Keep Rec ( w , ids , keep ) ) has Below = true ; }", "if ( has Below ) keep . add ( v ) ;", "return has Below ; }"]}
{"ids": "14878", "code": ["public void put External Property ( SSO Token client Token , String key , String value ) throws Session Exception {", "try {", "session Utils Wrapper . check Permission To Set Property ( client Token , key , value ) ; }", "catch ( Session Exception se ) {", "fire Session Event ( Session Event Type . PROTECTED PROPERTY ) ;", "session Logging . log Event ( to Session Info ( ) , Session Event Type . PROTECTED PROPERTY ) ;", "throw se ; }", "internal Put Property ( key , value ) ;", "debug . message ( STR_ ) ; }"]}
{"ids": "28940", "code": ["void add Edge ( Method Parameter in , Method Parameter out ) {", "Set < Method Parameter > outs = graph . get ( in ) ;", "if ( outs == null ) {", "outs = new Hash Set < > ( ) ;", "graph . put ( in , outs ) ; }", "outs . add ( out ) ; }"]}
{"ids": "5566", "code": ["public static int [ ] random Number ( int n ) {", "int [ ] num = new int [ n ] ;", "for ( int i = NUM_ ; i < num . length ; i ++ ) {", "num [ i ] = ( int ) ( r Gen . next Double ( ) * NUM_ ) ; }", "return num ; }"]}
{"ids": "41517", "code": ["public boolean is Device TV ( Context context ) {", "if ( Build . VERSION . SDK INT >= Build . VERSION CODES . LOLLIPOP ) {", "Ui Mode Manager ui Manager = ( Ui Mode Manager ) context . get System Service ( Context . UI MODE SERVICE ) ;", "return ui Manager != null && ui Manager . get Current Mode Type ( ) == Configuration . UI MODE TYPE TELEVISION ; }", "return false ; }"]}
{"ids": "67262", "code": ["protected void rcpt To Authors ( final Recipient Type rt ) {", "for ( final Account . Id id : authors ) {", "add ( rt , id ) ; } }"]}
{"ids": "73100", "code": ["public Object create Shape Data ( Shape shape ) {", "return null ; }"]}
{"ids": "21937", "code": ["private Protection Set create Protection Set ( Recover Point Volume Ingestion Context volume Context ) {", "Un Managed Protection Set umpset = volume Context . get Un Managed Protection Set ( ) ;", "Protection Set pset = Volume Ingestion Util . find Or Create Protection Set ( volume Context , volume Context . get Unmanaged Volume ( ) , umpset , db Client ) ;", "volume Context . set Managed Protection Set ( pset ) ;", "return pset ; }"]}
{"ids": "63386", "code": ["public synchronized void dispose ( ) {", "if ( is Disposed ) {", "return ; }", "is Disposed = true ;", "Array List < Pooled Connection > list = recycled Connections ;", "for ( int i = NUM_ , size = list . size ( ) ; i < size ; i ++ ) {", "close Connection ( list . get ( i ) ) ; } }"]}
{"ids": "54349", "code": ["public static String append Parameter ( Ct Class type , String descriptor ) {", "int i = descriptor . index Of ( STR_ ) ;", "if ( i < NUM_ ) return descriptor ;", "else {", "String Buffer newdesc = new String Buffer ( ) ;", "newdesc . append ( descriptor . substring ( NUM_ , i ) ) ;", "to Descriptor ( newdesc , type ) ;", "newdesc . append ( descriptor . substring ( i ) ) ;", "return newdesc . to String ( ) ; } }"]}
{"ids": "77117", "code": ["public void write To ( byte [ ] bytes , int offset ) throws IO Exception {", "flush ( ) ;", "final long end = file . length ;", "long pos = NUM_ ;", "int buffer = NUM_ ;", "int bytes Upto = offset ;", "while ( pos < end ) {", "int length = BUFFER SIZE ;", "long next Pos = pos + length ;", "if ( next Pos > end ) {", "length = ( int ) ( end - pos ) ; }", "System . arraycopy ( file . get Buffer ( buffer ++ ) , NUM_ , bytes , bytes Upto , length ) ;", "bytes Upto += length ;", "pos = next Pos ; } }"]}
{"ids": "70155", "code": ["protected int calcn Cluster ( ) {", "return NUM_ ; }"]}
{"ids": "29638", "code": ["public static void validate Service Name ( String service Code , String service Name ) {", "if ( ! service Name . starts With ( service Code ) ) {", "throw new Coded Exception ( X INCONSISTENT HEADERS , STR_ + STR_ ) ; } }"]}
{"ids": "74782", "code": ["protected static void init CMYK Colorspace ( ) {", "if ( ICC Profile For RGB == null ) {", "rgb Model = new Component Color Model ( rgb CS , new int [ ] { NUM_ , NUM_ , NUM_ } , false , false , Color Model . OPAQUE , Data Buffer . TYPE BYTE ) ; }", "else {", "final int comp Count = rgb CS . get Num Components ( ) ;", "final int [ ] values = new int [ comp Count ] ;", "for ( int i = NUM_ ; i < comp Count ; i ++ ) {", "values [ i ] = NUM_ ; }", "rgb Model = new Component Color Model ( rgb CS , values , false , false , Color Model . OPAQUE , Data Buffer . TYPE BYTE ) ; }", "final Fast Color Space CMYK cmyk CS = new Fast Color Space CMYK ( ) ;", "CS To RGB = new Color Convert Op ( cmyk CS , rgb CS , Color Spaces . hints ) ; }"]}
{"ids": "44850", "code": ["private void add Notification Category Separator ( J Panel panel ) {", "J Separator jsep = new J Separator ( Swing Constants . HORIZONTAL ) ;", "jsep . set Maximum Size ( new Dimension ( Short . MAX VALUE , NUM_ ) ) ;", "panel . add ( jsep ) ; }"]}
{"ids": "36417", "code": ["public void clear Dragged Operators ( ) {", "this . dragged Operators = Collections . unmodifiable List ( Collections . < Operator > empty List ( ) ) ; }"]}
{"ids": "19473", "code": ["public Fake Clock reset Time ( ) {", "fake Now Ms . set ( base Time Ms ) ;", "return this ; }"]}
{"ids": "71883", "code": ["public GSER Parser ( Char Sequence value ) {", "Reject . check Not Null ( value ) ;", "this . gser Value = value . to String ( ) ;", "this . pos = NUM_ ;", "this . length = value . length ( ) ; }"]}
{"ids": "28398", "code": ["public Slice ( double start , double end , boolean visible ) {", "this . start = start ;", "this . end = end ;", "this . visible = visible ; }"]}
{"ids": "67398", "code": ["public static void inject To Target ( Object target , Bundle data ) {", "if ( target == null || data == null ) return ;", "Parcel Injector injector ;", "try {", "injector = get Injector By Class ( target . get Class ( ) ) ;", "injector . inject Data To Target ( target , data ) ; }", "catch ( Exception e ) {", "throw new Runtime Exception ( String . format ( STR_ , e . get Message ( ) ) , e ) ; } }"]}
{"ids": "21729", "code": ["public static boolean are Backend Initiators ( List < Initiator > initiators ) {", "boolean backend = true ;", "for ( Initiator initiator : initiators ) {", "if ( ! Null Column Value Getter . is Null URI ( initiator . get Host ( ) ) && URI Util . is Type ( initiator . get Host ( ) , Host . class ) ) {", "backend = false ;", "break ; } }", "return backend ; }"]}
{"ids": "31358", "code": ["public boolean contains Value ( Object value ) {", "return map . contains Value ( value ) ; }"]}
{"ids": "81562", "code": ["public boolean has Skins ( ) {", "return System . get Property ( STR_ ) != null || System . get Property ( STR_ ) != null ; }"]}
{"ids": "3198", "code": ["public void make Immutable ( ) {", "if ( ! is Immutable ) {", "overflow Entries = overflow Entries . is Empty ( ) ? Collections . < K , V > empty Map ( ) : Collections . unmodifiable Map ( overflow Entries ) ;", "is Immutable = true ; } }"]}
{"ids": "35250", "code": ["protected void parse Names ( ) {", "while ( reader . has Next Character ( ) ) {", "final char character = next ( ) ;", "if ( Strings . is Whitespace ( character ) ) {", "add Name ( ) ;", "continue ; }", "else if ( character == block Opening ) {", "add Name ( ) ;", "break ; }", "else {", "builder . append ( character ) ; } }", "if ( Gdx Arrays . is Empty ( tags ) ) {", "throw Exception ( STR_ ) ; } }"]}
{"ids": "44594", "code": ["protected void write Zip 64 Central Directory ( ) throws IO Exception {", "if ( zip 64 Mode == Zip 64 Mode . Never ) {", "return ; }", "if ( ! has Used Zip 64 && ( cd Offset >= ZIP 64 MAGIC || cd Length >= ZIP 64 MAGIC || entries . size ( ) >= ZIP 64 MAGIC SHORT ) ) {", "has Used Zip 64 = true ; }", "if ( ! has Used Zip 64 ) {", "return ; }", "long offset = written ;", "write Out ( ZIP 64 EOCD SIG ) ;", "write Out ( Zip Eight Byte Integer . get Bytes ( SHORT + SHORT + WORD + WORD + DWORD + DWORD + DWORD + DWORD ) ) ;", "write Out ( Zip Short . get Bytes ( ZIP 64 MIN VERSION ) ) ;", "write Out ( Zip Short . get Bytes ( ZIP 64 MIN VERSION ) ) ;", "write Out ( LZERO ) ;", "write Out ( LZERO ) ;", "byte [ ] num = Zip Eight Byte Integer . get Bytes ( entries . size ( ) ) ;", "write Out ( num ) ;", "write Out ( num ) ;", "write Out ( Zip Eight Byte Integer . get Bytes ( cd Length ) ) ;", "write Out ( Zip Eight Byte Integer . get Bytes ( cd Offset ) ) ;", "write Out ( ZIP 64 EOCD LOC SIG ) ;", "write Out ( LZERO ) ;", "write Out ( Zip Eight Byte Integer . get Bytes ( offset ) ) ;", "write Out ( ONE ) ; }"]}
{"ids": "574", "code": ["public boolean is Cache Valid ( int row ) {", "return m valid . get ( row ) ; }"]}
{"ids": "51303", "code": ["public void finish ( ) throws IO Exception {", "check Closed ( ) ;", "write ( ) ; }"]}
{"ids": "82415", "code": ["public final void read Fully ( byte [ ] b , int off , int len ) throws java . io . IO Exception {", "if ( len < NUM_ ) {", "throw new Index Out Of Bounds Exception ( ) ; }", "int n = NUM_ ;", "while ( n < len ) {", "int count = read ( b , off + n , len - n ) ;", "if ( count < NUM_ ) {", "throw new EOF Exception ( ) ; }", "n += count ; } }"]}
{"ids": "11869", "code": ["public SVG Rasterizer ( Input Stream istream ) {", "this . input = new Transcoder Input ( istream ) ; }"]}
{"ids": "28248", "code": ["private static Future < ? > direct Execute ( Runnable runnable , int delay ) {", "Future < ? > future = null ;", "if ( delay > NUM_ ) {", "if ( ! ( executor instanceof Scheduled Executor Service ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Scheduled Executor Service scheduled Executor Service = ( Scheduled Executor Service ) executor ;", "future = scheduled Executor Service . schedule ( runnable , delay , Time Unit . MILLISECONDS ) ; }", "else {", "if ( executor instanceof Executor Service ) {", "Executor Service executor Service = ( Executor Service ) executor ;", "future = executor Service . submit ( runnable ) ; }", "else {", "executor . execute ( runnable ) ; } }", "return future ; }"]}
{"ids": "78059", "code": ["@ Override public void on Patch Version Check Fail ( File patch File , Share Patch Info old Patch Info , String patch File Version , boolean is Upgrade Patch ) {", "Tinker Log . i ( TAG , STR_ , patch File . get Absolute Path ( ) , patch File Version , is Upgrade Patch ) ; }"]}
{"ids": "16003", "code": ["public void init ( boolean for Encryption , Cipher Parameters params ) throws Illegal Argument Exception {", "if ( ! ( params instanceof Parameters With IV ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Parameters With IV iv Params = ( Parameters With IV ) params ;", "byte [ ] iv = iv Params . get IV ( ) ;", "if ( iv == null || iv . length != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( ! ( iv Params . get Parameters ( ) instanceof Key Parameter ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Key Parameter key = ( Key Parameter ) iv Params . get Parameters ( ) ;", "working IV = new byte [ key . get Key ( ) . length ] ;", "working Key = new byte [ key . get Key ( ) . length ] ;", "lfsr = new int [ STATE SIZE ] ;", "nfsr = new int [ STATE SIZE ] ;", "out = new byte [ NUM_ ] ;", "System . arraycopy ( iv , NUM_ , working IV , NUM_ , iv . length ) ;", "System . arraycopy ( key . get Key ( ) , NUM_ , working Key , NUM_ , key . get Key ( ) . length ) ;", "reset ( ) ; }"]}
{"ids": "79719", "code": ["public Extension Forced User ( ) {", "super ( ) ;", "initialize ( ) ; }"]}
{"ids": "9532", "code": ["private String replace Placeholders ( String query , Map < String , String > replacements ) {", "String result Query = query ;", "for ( Map . Entry < String , String > entry : replacements . entry Set ( ) ) {", "result Query = result Query . replace ( entry . get Key ( ) , entry . get Value ( ) ) ; }", "return result Query ; }"]}
{"ids": "24681", "code": ["protected int read Fully ( Input Stream in , byte buffer [ ] ) throws java . io . IO Exception {", "for ( int i = NUM_ ; i < buffer . length ; i ++ ) {", "int q = in . read ( ) ;", "if ( q == - NUM_ ) return i ;", "buffer [ i ] = ( byte ) q ; }", "return buffer . length ; }"]}
{"ids": "25285", "code": ["public void destroy Bucket ( Auto Mix Bucket bucket ) {", "Shared Preferences prefs = get Prefs ( ) ;", "Shared Preferences . Editor editor = prefs . edit ( ) ;", "Set < String > set = new Tree Set < > ( prefs . get String Set ( PREF BUCKETS IDS , new Tree Set < String > ( ) ) ) ;", "set . remove ( bucket . get Session Id ( ) ) ;", "editor . put String Set ( PREF BUCKETS IDS , set ) ;", "editor . apply ( ) ;", "m Buckets . remove ( bucket ) ; }"]}
{"ids": "79391", "code": ["public void clear Changed ( ) {", "changed . set ( false ) ; }"]}
{"ids": "85623", "code": ["public static Object [ ] convert Params ( Object [ ] source , Class < ? > [ ] target ) {", "Object [ ] converted = new Object [ target . length ] ;", "for ( int i = NUM_ ; i < target . length ; i ++ ) {", "converted [ i ] = convert ( source [ i ] , target [ i ] ) ; }", "return converted ; }"]}
{"ids": "80427", "code": ["List < String > as List ( ) {", "if ( more ) {", "list . set ( list . size ( ) - NUM_ , STR_ ) ; }", "return Collections . unmodifiable List ( list ) ; }"]}
{"ids": "25378", "code": ["public Cache Stat Resource ( String resource Identifier , Cache Resource cache Resource ) {", "super ( resource Identifier ) ;", "this . cache Resource = cache Resource ;", "relative Cache Stats = cache Resource . get Cache Stats ( ) ; }"]}
{"ids": "21257", "code": ["public Map < URI , List < URI > > add Target Volume Full Copies ( ) {", "List < URI > full Copies = Lists . new Array List ( ) ;", "Map < URI , List < URI > > full Copies Map = new Hash Map < > ( ) ;", "URI target CG = null ;", "for ( URI volume Id : uris ( volume Ids ) ) {", "List < URI > targets = get Targets ( volume Id ) ;", "for ( URI target : targets ) {", "if ( target CG == null ) {", "target CG = get Consistency Group ( target ) ; }", "List < URI > volume Full Copies = get Full Copies ( target ) ;", "full Copies . add All ( volume Full Copies ) ;", "full Copies Map . put ( target , volume Full Copies ) ; } }", "if ( ! full Copies . is Empty ( ) && target CG != null ) {", "Block Storage Utils . add Volumes To Consistency Group ( target CG , full Copies ) ; }", "return full Copies Map ; }"]}
{"ids": "80617", "code": ["Weather Attribute ( int max , String ... desc ) {", "max Value = max ;", "value = Rand . rand ( max + NUM_ ) ;", "this . desc = desc ; }"]}
{"ids": "42253", "code": ["protected Class Loader ( Class Loader parent Loader ) {", "Security Manager sc = System . get Security Manager ( ) ;", "if ( sc != null ) {", "sc . check Create Class Loader ( ) ; }", "parent Class Loader = parent Loader ;", "defined Packages = new Hash Map < String , Package > ( ) ;", "loaded Classes = new Hash Map < String , Class < ? > > ( ) ;", "package Certificates = new Hashtable < String , Certificate [ ] > ( ) ; }"]}
{"ids": "84696", "code": ["static public double log 10 ( double in Value ) {", "return Math . log ( in Value ) / Math . log ( NUM_ ) ; }"]}
{"ids": "43591", "code": ["void update Feature Counts ( int [ ] translation Ids , List < List < Rich Translation < I String , String > > > nbest Lists ) {", "for ( int i = NUM_ ; i < translation Ids . length ; i ++ ) {", "Set < String > features = new Hash Set < String > ( ) ;", "for ( Rich Translation < I String , String > trans : nbest Lists . get ( i ) ) {", "for ( Feature Value < String > f : trans . features ) {", "features . add ( f . name ) ; } }", "synchronized ( clipped Feature Index ) {", "for ( String f Name : features ) {", "Set < Integer > ids = clipped Feature Index . get ( f Name ) ;", "if ( ids == null ) {", "ids = new Tree Set < Integer > ( ) ;", "clipped Feature Index . put ( f Name , ids ) ; }", "if ( ids . size ( ) < min Feature Count ) {", "ids . add ( translation Ids [ i ] ) ; } } } } }"]}
{"ids": "29821", "code": ["private void add Native Express Ads ( ) {", "for ( int i = NUM_ ; i <= m Recycler View Items . size ( ) ; i += ITEMS PER AD ) {", "final Native Express Ad View ad View = new Native Express Ad View ( Main Activity . this ) ;", "m Recycler View Items . add ( i , ad View ) ; } }"]}
{"ids": "27234", "code": ["protected boolean accept ( final I Change Record record ) {", "return true ; }"]}
{"ids": "3958", "code": ["public final T allocate ( ) {", "Atomic Integer top Ref = top ;", "while ( true ) {", "final int top = top Ref . get ( ) ;", "if ( top <= NUM_ ) {", "return null ; }", "else if ( top Ref . compare And Set ( top , top - NUM_ ) ) {", "T value = free Stack . get And Set ( top - NUM_ , null ) ;", "if ( value != null ) {", "return value ; } } } }"]}
{"ids": "65404", "code": ["public void put Response Get All Resources ( List < String > resources ) {", "logger . debug ( STR_ ) ;", "Resource Set resource Set = new Resource Set ( ) ;", "for ( String res : resources ) {", "Remote Resource resource = gson . from Json ( res , Remote Resource . class ) ;", "resource . set Resource Pool Connector ( this ) ;", "resource Set . add ( resource ) ; }", "synchronized ( get All Resource Response ) {", "get All Resource Response . add ( resource Set ) ;", "get All Resource Response . notify ( ) ; } }"]}
{"ids": "15203", "code": ["public static Map < String , Set < String > > to Av Pair Map ( final Set < String > names , final String value ) {", "if ( value == null ) {", "return Collections . EMPTY MAP ; }", "if ( names == null || names . is Empty ( ) ) {", "return new Hash Map ( ) ; }", "final Map < String , Set < String > > map = new Hash Map < String , Set < String > > ( names . size ( ) ) ;", "final Set < String > set = new Hash Set < String > ( NUM_ ) ;", "set . add ( value ) ;", "for ( final String name : names ) {", "map . put ( name , set ) ; }", "return map ; }"]}
{"ids": "43633", "code": ["public Prefix Tagger ( Maxent Tagger maxent Tagger ) {", "super ( maxent Tagger ) ;", "this . left Window = left Window ( ) ;", "this . right Window = right Window ( ) ;", "this . offset = left Window ( ) ; }"]}
{"ids": "38796", "code": ["@ Override public void perform Request ( String request ) {", "if ( request . compare To ( STR_ ) == NUM_ ) {", "stop ( ) ; }", "else {", "throw new Illegal Argument Exception ( request + STR_ ) ; } }"]}
{"ids": "37694", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "49728", "code": ["public synchronized void kill ( ) {", "running = false ;", "closed = true ;", "try {", "STDIN . close ( ) ; }", "catch ( IO Exception e ) { }", "try {", "process . destroy ( ) ; }", "catch ( Exception e ) { } }"]}
{"ids": "32528", "code": ["private Iterable < int [ ] > split Array ( int [ ] arr ) {", "int len 1 = arr . length / NUM_ ;", "int len 2 = len 1 + arr . length % NUM_ ;", "int [ ] a 1 = new int [ len 1 ] ;", "int [ ] a 2 = new int [ len 2 ] ;", "System . arraycopy ( arr , NUM_ , a 1 , NUM_ , len 1 ) ;", "System . arraycopy ( arr , len 1 , a 2 , NUM_ , len 2 ) ;", "return Arrays . as List ( a 1 , a 2 ) ; }"]}
{"ids": "54119", "code": ["@ Ignore @ Test public void should Capture Query Event Data ( ) throws Exception {", "start Client ( null ) ;", "counters . consume All ( NUM_ , Time Unit . SECONDS ) ;", "List < Query Event Data > all Query Events = recorded Event Data ( Query Event Data . class , - NUM_ ) ;", "all Query Events . for Each ( null ) ; }"]}
{"ids": "30362", "code": ["private List < Validation Error > check For No Rates Present ( ) {", "if ( overhead Rates != null && overhead Rates . is Empty ( ) ) return Arrays . as List ( new Validation Error ( STR_ , STR_ ) ) ;", "else return null ; }"]}
{"ids": "22431", "code": ["public void modify Export ( String id , String zone Name , Isilon Export exp ) throws Isilon Exception {", "String uri With Zone Name = get URI With Zone Name ( id , zone Name ) ;", "modify ( base Url . resolve ( URI NFS EXPORTS ) , uri With Zone Name , STR_ , exp ) ; }"]}
{"ids": "38007", "code": ["public double measure Num Iterations ( ) {", "return m Classifiers . size ( ) ; }"]}
{"ids": "81359", "code": ["public void mark Potentially Unknown Bit ( Local Variable Binding local ) {", "if ( this != DEAD END ) {", "this . tag Bits |= NULL FLAG MASK ;", "int position ;", "long mask ;", "if ( ( position = local . id + this . max Field Count ) < Bit Cache Size ) {", "mask = NUM_ << position ;", "is True ( ( this . null Bit 1 & mask ) == NUM_ , STR_ ) ;", "this . null Bit 4 |= mask ;", "if ( COVERAGE TEST FLAG ) {", "if ( Coverage Test Id == NUM_ ) {", "this . null Bit 4 = ~ NUM_ ; } } }", "else {", "int vector Index = ( position / Bit Cache Size ) - NUM_ ;", "if ( this . extra == null ) {", "int length = vector Index + NUM_ ;", "this . extra = new long [ extra Length ] [ ] ;", "for ( int j = NUM_ ; j < extra Length ; j ++ ) {", "this . extra [ j ] = new long [ length ] ; } }", "else {", "int old Length ;", "if ( vector Index >= ( old Length = this . extra [ NUM_ ] . length ) ) {", "for ( int j = NUM_ ; j < extra Length ; j ++ ) {", "System . arraycopy ( this . extra [ j ] , NUM_ , ( this . extra [ j ] = new long [ vector Index + NUM_ ] ) , NUM_ , old Length ) ; } } }", "mask = NUM_ << ( position % Bit Cache Size ) ;", "is True ( ( this . extra [ NUM_ ] [ vector Index ] & mask ) == NUM_ , STR_ ) ;", "this . extra [ NUM_ ] [ vector Index ] |= mask ;", "if ( COVERAGE TEST FLAG ) {", "if ( Coverage Test Id == NUM_ ) {", "this . extra [ NUM_ ] [ vector Index ] = ~ NUM_ ; } } } } }"]}
{"ids": "69631", "code": ["public int count ( ) {", "return dict . size ( ) ; }"]}
{"ids": "24527", "code": ["public static boolean above Or Equal ( int a , int b ) {", "return Integer . compare Unsigned ( a , b ) >= NUM_ ; }"]}
{"ids": "66954", "code": ["protected void await Completion Compute Values And Shutdown ( ) { {", "run Executor And Await Completion ( ) ; }", "if ( logger . is Debug Enabled ( ) ) print Stats ( ) ;", "executor . shutdown ( ) ;", "while ( ! executor . is Terminated ( ) ) {", "try {", "Thread . sleep ( NUM_ ) ; }", "catch ( Interrupted Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "44467", "code": ["public Flags flag List ( ) throws Decoding Exception {", "Flags flags = new Flags ( ) ;", "next Word Char ( ) ;", "consume Char ( STR_ ) ;", "Character Validator validator = new Noop Char Validator ( ) ;", "String next Word = consume Word ( validator ) ;", "while ( ! next Word . ends With ( STR_ ) ) {", "Decoder Utils . set Flag ( next Word , flags ) ;", "next Word = consume Word ( validator ) ; }", "if ( next Word . length ( ) > NUM_ ) {", "int paren Index = next Word . index Of ( STR_ ) ;", "if ( paren Index > NUM_ ) {", "final String next Flag = next Word . substring ( NUM_ , paren Index ) ;", "Decoder Utils . set Flag ( next Flag , flags ) ; } }", "return flags ; }"]}
{"ids": "22556", "code": ["protected Rest Client Itf create New Rest Client ( URI endpoint , String username , String password , String version , Client client ) {", "Xtrem IO Client xio Client = null ;", "if ( version != null && ! version . is Empty ( ) && Integer . value Of ( version . split ( DOT OPERATOR ) [ NUM_ ] ) >= XIO MIN 4 X VERSION ) {", "xio Client = new Xtrem IOV 2 Client ( endpoint , username , password , client ) ; }", "else {", "xio Client = new Xtrem IOV 1 Client ( endpoint , username , password , client ) ; }", "return xio Client ; }"]}
{"ids": "83566", "code": ["public String diff text 2 ( Linked List < Diff > diffs ) {", "String Builder text = new String Builder ( ) ;", "for ( Diff a Diff : diffs ) {", "if ( a Diff . operation != Operation . DELETE ) {", "text . append ( a Diff . text ) ; } }", "return text . to String ( ) ; }"]}
{"ids": "78725", "code": ["static private < E > List < E > to Java List ( List < E > values , int rows , int columns ) {", "List < E > result = new Array List < > ( values . size ( ) ) ;", "for ( int i = NUM_ ; i < values . size ( ) ; i ++ ) {", "int row = i / columns ;", "int column = i % columns ;", "E value = values . get ( ( column * rows ) + row ) ;", "result . add ( value ) ; }", "return result ; }"]}
{"ids": "6836", "code": ["public void line Arrow ( final int x 0 , final int y 0 , final int x 1 , final int y 1 , final int sidelength , final int padding , final long line Color , final long arrow Color ) {", "final double dx = x 1 - x 0 ;", "final double dy = y 1 - y 0 ;", "final double angle = Math . atan 2 ( dy , dx ) ;", "final double d = Math . sqrt ( ( dx * dx + dy * dy ) ) ;", "final double arrowtip = d - padding ;", "final double arrowlength = TL * sidelength ;", "final double arrowbase = arrowtip - arrowlength ;", "final double xn = Math . cos ( angle ) ;", "final double yn = Math . sin ( angle ) ;", "final int xt = x 0 + ( ( int ) ( arrowtip * xn ) ) ;", "final int yt = y 0 + ( ( int ) ( arrowtip * yn ) ) ;", "final double xb = x 0 + arrowbase * xn ;", "final double yb = y 0 + arrowbase * yn ;", "final double sl 2 = sidelength / NUM_ ;", "final double xk = sl 2 * Math . cos ( angle + PI 2 ) ;", "final double yk = sl 2 * Math . sin ( angle + PI 2 ) ;", "final int x 2 = ( int ) ( xb + xk ) ;", "final int y 2 = ( int ) ( yb + yk ) ;", "final int x 3 = ( int ) ( xb - xk ) ;", "final int y 3 = ( int ) ( yb - yk ) ;", "set Color ( line Color ) ;", "line ( x 0 , y 0 , ( int ) xb , ( int ) yb , NUM_ ) ;", "set Color ( arrow Color ) ;", "line ( x 2 , y 2 , x 3 , y 3 , NUM_ ) ;", "line ( x 2 , y 2 , xt , yt , NUM_ ) ;", "line ( x 3 , y 3 , xt , yt , NUM_ ) ; }"]}
{"ids": "10115", "code": ["public String to Html ( Node node , Appendable appendable ) {", "Node Visitor renderer = create Renderer ( appendable ) ;", "node . visit ( renderer ) ;", "return appendable . to String ( ) ; }"]}
{"ids": "39543", "code": ["public static String [ ] to Comma Separated Array ( String str ) throws IO Exception {", "return str . split ( STR_ ) ; }"]}
{"ids": "44891", "code": ["@ Override public final Object put ( String key , Object value ) {", "return set ( key , value ) ; }"]}
{"ids": "5903", "code": ["private void append Float Type ( String Builder sb , Field Type field Type , int field Width ) {", "sb . append ( STR_ ) ; }"]}
{"ids": "6902", "code": ["private Http Entity params To Entity ( Request Params params , Response Handler Interface response Handler ) {", "Http Entity entity = null ;", "try {", "if ( params != null ) {", "entity = params . get Entity ( response Handler ) ; } }", "catch ( Throwable t ) {", "if ( response Handler != null ) response Handler . send Failure Message ( NUM_ , null , null , t ) ;", "else t . print Stack Trace ( ) ; }", "return entity ; }"]}
{"ids": "51699", "code": ["public static boolean is Installable Editing ( Enum Set < Embedding Flags > flag Set ) {", "return flag Set . is Empty ( ) ; }"]}
{"ids": "29091", "code": ["public Iterator < Resource > resource Iterator ( ) {", "return resource List . iterator ( ) ; }"]}
{"ids": "72436", "code": ["public double next Uniform ( double lower , double upper ) {", "if ( upper <= lower ) {", "throw new Math Illegal Argument Exception ( Localized Core Formats . LOWER BOUND NOT BELOW UPPER BOUND , lower , upper ) ; }", "if ( Double . is Infinite ( lower ) || Double . is Infinite ( upper ) ) {", "throw new Math Illegal Argument Exception ( Localized Core Formats . INFINITE BOUND ) ; }", "if ( Double . is Na N ( lower ) || Double . is Na N ( upper ) ) {", "throw new Math Illegal Argument Exception ( Localized Core Formats . NAN NOT ALLOWED ) ; }", "final double u = random Generator . next Double ( ) ;", "return u * upper + ( NUM_ - u ) * lower ; }"]}
{"ids": "5041", "code": ["public Shape Tile Box bounding box ( ) {", "Pla Point Int lower left = new Pla Point Int ( Math . floor ( v x ) , Math . floor ( v y ) ) ;", "Pla Point Int upper right = new Pla Point Int ( Math . ceil ( v x ) , Math . ceil ( v y ) ) ;", "return new Shape Tile Box ( lower left , upper right ) ; }"]}
{"ids": "54310", "code": ["public void add Interface ( String name ) {", "cached Interfaces = null ;", "int info = const Pool . add Class Info ( name ) ;", "if ( interfaces == null ) {", "interfaces = new int [ NUM_ ] ;", "interfaces [ NUM_ ] = info ; }", "else {", "int n = interfaces . length ;", "int [ ] newarray = new int [ n + NUM_ ] ;", "System . arraycopy ( interfaces , NUM_ , newarray , NUM_ , n ) ;", "newarray [ n ] = info ;", "interfaces = newarray ; } }"]}
{"ids": "30149", "code": ["private void biome Factor ( final int x , final int z , final double add Height ) {", "float smooth Volatility = NUM_ ;", "float smooth Height = NUM_ ;", "float biome Weight Sum = NUM_ ;", "final Biome center Biome Config = get Center Biome ( x , z ) ;", "final int look Radius = this . max Smooth Radius ;", "for ( int next X = - look Radius ; next X <= look Radius ; next X ++ ) {", "for ( int next Z = - look Radius ; next Z <= look Radius ; next Z ++ ) {", "final Biome biome = get Offset Biome ( x , z , next X , next Z ) ;", "final float biome Height = biome . get Base Height ( ) ;", "final float biome Volatility = biome . get Height Variation ( ) ;", "double biome Weight = calc Biome Weight ( next X , next Z , biome Height ) ;", "biome Weight = Math . abs ( biome Weight ) ;", "if ( biome Height > center Biome Config . get Base Height ( ) ) {", "biome Weight /= NUM_ ; }", "smooth Volatility += biome Volatility * biome Weight ;", "smooth Height += biome Height * biome Weight ;", "biome Weight Sum += biome Weight ; } }", "smooth Volatility /= biome Weight Sum ;", "smooth Height /= biome Weight Sum ;", "this . biome Volatility = smooth Volatility * NUM_ + NUM_ ;", "this . biome Volatility *= NUM_ / NUM_ ;", "this . biome Height = NUM_ / NUM_ ;", "this . biome Height += smooth Height * NUM_ / NUM_ ;", "this . biome Height += NUM_ * add Height * NUM_ / NUM_ ; }"]}
{"ids": "66134", "code": ["@ Suppress Warnings ( STR_ ) public static M Issue create ( Properties ctx , String hex Input ) {", "Hash Map hm In = null ;", "try {", "byte [ ] byte Array = Secure . convert Hex String ( hex Input ) ;", "Byte Array Input Stream b In = new Byte Array Input Stream ( byte Array ) ;", "Object Input Stream o In = new Object Input Stream ( b In ) ;", "hm In = ( Hash Map ) o In . read Object ( ) ; }", "catch ( Exception e ) {", "s log . log ( Level . SEVERE , STR_ , e ) ;", "return null ; }", "M Issue issue = new M Issue ( ctx , ( Hash Map < String , String > ) hm In ) ;", "return issue ; }"]}
{"ids": "47679", "code": ["void flush Buffer ( ) throws IO Exception {", "se . flush Buffer ( ) ; }"]}
{"ids": "23483", "code": ["public static void show Unknown Error ( Context context , Throwable t , Dialog Interface . On Cancel Listener listener ) {", "show Error ( context , String . format ( context . get String ( R . string . afc pmsg unknown error ) , t ) , listener ) ; }"]}
{"ids": "73490", "code": ["public void add Button ( final J Button the Button ) {", "custom Button Panel . add ( the Button ) ; }"]}
{"ids": "69371", "code": ["void swap Cursor ( long month Millis , @ Nullable Event Cursor cursor , Content Observer content Observer ) {", "for ( int i = NUM_ ; i < m Months . size ( ) ; i ++ ) {", "if ( Calendar Utils . same Month ( month Millis , m Months . get ( i ) ) ) {", "swap Cursor ( i , cursor , content Observer ) ;", "break ; } } }"]}
{"ids": "9535", "code": ["final boolean close ( ) {", "return ! closed . get And Set ( true ) ; }"]}
{"ids": "48398", "code": ["public byte [ ] encrypt Raw ( byte [ ] base Key , int usage , byte [ ] ivec , byte [ ] plaintext , int start , int len ) throws General Security Exception , Krb Crypto Exception {", "if ( ! Key Usage . is Valid ( usage ) ) {", "throw new General Security Exception ( STR_ + usage ) ; }", "byte [ ] output = encrypt CTS ( base Key , usage , ivec , null , plaintext , start , len , false ) ;", "return output ; }"]}
{"ids": "44094", "code": ["private void fixbug ( Document doc ) {", "Element element = doc . get Document Element ( ) ;", "if ( element != null ) {", "fixbug ( element ) ; } }"]}
{"ids": "48365", "code": ["private String to Hex String ( byte [ ] block ) {", "String Buffer buf = new String Buffer ( ) ;", "int len = block . length ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "byte 2 hex ( block [ i ] , buf ) ;", "if ( i < len - NUM_ ) {", "buf . append ( STR_ ) ; } }", "return buf . to String ( ) ; }"]}
{"ids": "14158", "code": ["public static String remove Deploy Uri ( String uri ) {", "if ( ( uri == null ) || ( uri . length ( ) == NUM_ ) ) {", "return uri ; }", "int loc = uri . index Of ( STR_ , NUM_ ) ;", "if ( loc == - NUM_ ) {", "return null ; }", "else {", "return uri . substring ( loc ) ; } }"]}
{"ids": "9418", "code": ["public static double loss ( double pred , double y ) {", "return Math . abs ( y - pred ) ; }"]}
{"ids": "48024", "code": ["public boolean need Signature File Bytes ( ) {", "return sf Bytes == null ; }"]}
{"ids": "63984", "code": ["public void insert ( T object , int index ) {", "synchronized ( m Lock ) {", "m Objects . add ( index , object ) ; }", "if ( m Notify On Change ) notify Item Inserted ( index ) ; }"]}
{"ids": "36961", "code": ["private void load Target Modules ( ) {", "for ( final Module module : target . get Modules ( ) ) {", "module . add Listener ( module Keeper Listener ) ;", "modules . add ( module ) ;", "if ( ! module . is Loaded ( ) ) {", "try {", "module . load ( ) ; }", "catch ( final Couldnt Load Data Exception e ) {", "error Loading Module ( module , e ) ;", "return ; } } }", "step ++ ; }"]}
{"ids": "6676", "code": ["public Bloom Filter ( double false Positive Probability , int expected Number Of Elements ) {", "this ( Math . ceil ( - ( Math . log ( false Positive Probability ) / Math . log ( NUM_ ) ) ) / Math . log ( NUM_ ) , expected Number Of Elements , ( int ) Math . ceil ( - ( Math . log ( false Positive Probability ) / Math . log ( NUM_ ) ) ) ) ; }"]}
{"ids": "81198", "code": ["public synchronized void notify Band ( final int times , final int on Time , final int off Time , final int flash Colour ) {", "final List < BLE Action > list = new Array List < > ( ) ;", "byte [ ] colors = convert Rgb ( flash Colour ) ;", "list . add ( new Wait Action ( NUM_ ) ) ;", "list . add ( new Write Action ( Profile . UUID CHAR CONTROL POINT , Protocol . VIBRATION WITHOUT LED ) ) ;", "list . add ( new Wait Action ( NUM_ ) ) ;", "list . add ( new Write Action ( Profile . UUID CHAR CONTROL POINT , colors ) ) ;", "queue ( list ) ; }"]}
{"ids": "76541", "code": ["private static int build Request Code ( long thread Id , int action ) {", "action ++ ;", "return ( int ) ( action * NUM_ + thread Id ) ; }"]}
{"ids": "7230", "code": ["public Outer Join Qualifier add ( String property Left , String property Right ) {", "additional Properties . add ( new Property Value Expression Pair ( new Property Value Expression ( property Left ) , new Property Value Expression ( property Right ) ) ) ;", "return this ; }"]}
{"ids": "61482", "code": ["public void insert Element At ( int value , int at ) {", "if ( null == m map ) {", "m map = new int [ m blocksize ] ;", "m map Size = m blocksize ; }", "else if ( ( m first Free + NUM_ ) >= m map Size ) {", "m map Size += m blocksize ;", "int new Map [ ] = new int [ m map Size ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m first Free + NUM_ ) ;", "m map = new Map ; }", "if ( at <= ( m first Free - NUM_ ) ) {", "System . arraycopy ( m map , at , m map , at + NUM_ , m first Free - at ) ; }", "m map [ at ] = value ;", "m first Free ++ ; }"]}
{"ids": "72358", "code": ["protected static Dfp atan Internal ( final Dfp a ) {", "Dfp y = new Dfp ( a ) ;", "Dfp x = new Dfp ( y ) ;", "Dfp py = new Dfp ( y ) ;", "for ( int i = NUM_ ; i < NUM_ ; i += NUM_ ) {", "x = x . multiply ( a ) ;", "x = x . multiply ( a ) ;", "x = x . negate ( ) ;", "y = y . add ( x . divide ( i ) ) ;", "if ( y . equals ( py ) ) {", "break ; }", "py = new Dfp ( y ) ; }", "return y ; }"]}
{"ids": "77150", "code": ["public static String parse Segment Name ( String filename ) {", "int idx = index Of Segment Name ( filename ) ;", "if ( idx != - NUM_ ) {", "filename = filename . substring ( NUM_ , idx ) ; }", "return filename ; }"]}
{"ids": "43630", "code": ["private static Tree generate Sub Tree ( Hash Map < Integer , Pair < Indexed Word , List < Integer > > > dependencies , int root ) {", "List < Integer > children = dependencies . get ( root ) . second ;", "Indexed Word tw = dependencies . get ( root ) . first ;", "Tree tree = new Labeled Scored Tree Node ( tw ) ;", "boolean added Head = children . is Empty ( ) ;", "List < Integer > sorted Children = Collection Utils . sorted ( children ) ;", "for ( Integer c : sorted Children ) {", "if ( c > root && ! added Head ) {", "Tree child = new Labeled Scored Tree Node ( tw ) ;", "tree . add Child ( child ) ;", "added Head = true ; }", "Tree child = generate Sub Tree ( dependencies , c ) ;", "tree . add Child ( child ) ; }", "if ( ! added Head ) {", "Tree child = new Labeled Scored Tree Node ( tw ) ;", "tree . add Child ( child ) ; }", "return tree ; }"]}
{"ids": "25483", "code": ["@ HLE Function ( nid = NUM_ , version = NUM_ , check Inside Interrupt = true ) public int sce Sas Rev Param ( int sas Core , int delay , int feedback ) {", "check Sas Handle Good ( sas Core ) ;", "waveform Effect Delay = delay ;", "waveform Effect Feedback = feedback ;", "return NUM_ ; }"]}
{"ids": "13187", "code": ["static boolean is Possible FP ( String val ) {", "final int length = val . length ( ) ;", "for ( int i = NUM_ ; i < length ; ++ i ) {", "char c = val . char At ( i ) ;", "if ( ! ( c >= STR_ && c <= STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "12533", "code": ["public boolean delete Track ( Track track ) {", "synchronized ( tracks ) {", "return tracks . remove Element ( track ) ; } }"]}
{"ids": "71736", "code": ["protected static Array List < Geo Point > parse Kml Coordinates ( String input ) {", "Linked List < Geo Point > tmp Coords = new Linked List < Geo Point > ( ) ;", "int i = NUM_ ;", "int tuple Start = NUM_ ;", "int length = input . length ( ) ;", "boolean start Reading Tuple = false ;", "while ( i < length ) {", "char c = input . char At ( i ) ;", "if ( c == STR_ || c == STR_ || c == STR_ ) {", "if ( start Reading Tuple ) {", "String tuple = input . substring ( tuple Start , i ) ;", "Geo Point p = parse Kml Coord ( tuple ) ;", "if ( p != null ) tmp Coords . add ( p ) ;", "start Reading Tuple = false ; } }", "else {", "if ( ! start Reading Tuple ) {", "start Reading Tuple = true ;", "tuple Start = i ; }", "if ( i == length - NUM_ ) {", "String tuple = input . substring ( tuple Start , i + NUM_ ) ;", "Geo Point p = parse Kml Coord ( tuple ) ;", "if ( p != null ) tmp Coords . add ( p ) ; } }", "i ++ ; }", "Array List < Geo Point > coordinates = new Array List < Geo Point > ( tmp Coords . size ( ) ) ;", "coordinates . add All ( tmp Coords ) ;", "return coordinates ; }"]}
{"ids": "65341", "code": ["Server Session Context register Request ( long sequence , Runnable runnable ) {", "commands . put ( sequence , runnable ) ;", "return this ; }"]}
{"ids": "73150", "code": ["public void add Preferences Button ( ) {", "J Button prefs Button = new J Button ( STR_ ) ;", "prefs Button . set Hide Action Text ( true ) ;", "prefs Button . set Action ( Time Series Plot Actions . get Properties Dialog Action ( this ) ) ;", "button Panel . add ( prefs Button ) ; }"]}
{"ids": "81296", "code": ["public static void find Index Matches ( Search Pattern pattern , Index index , Index Query Requestor requestor , Search Participant participant , I Java Search Scope scope , I Progress Monitor monitor ) throws IO Exception {", "pattern . find Index Matches ( index , requestor , participant , scope , monitor ) ; }"]}
{"ids": "85028", "code": ["public static void log Info ( String message , Object ... args ) {", "message = Message Format . format ( message , args ) ;", "log ( I Status . INFO , I Status . OK , message , null ) ; }"]}
{"ids": "40084", "code": ["public static boolean occupy ( int wait Ms ) {", "if ( occupied Until != null && occupied Until . after ( new Date ( ) ) ) {", "return false ; }", "occupied Until = Date Utils . add Milliseconds ( new Date ( ) , wait Ms ) ;", "return true ; }"]}
{"ids": "37679", "code": ["public boolean [ ] [ ] moralize ( Bayes Net bayes Net ) {", "int n Nodes = bayes Net . get Nr Of Nodes ( ) ;", "boolean [ ] [ ] b Adjacency Matrix = new boolean [ n Nodes ] [ n Nodes ] ;", "for ( int i Node = NUM_ ; i Node < n Nodes ; i Node ++ ) {", "Parent Set parents = bayes Net . get Parent Sets ( ) [ i Node ] ;", "moralize Node ( parents , i Node , b Adjacency Matrix ) ; }", "return b Adjacency Matrix ; }"]}
{"ids": "83609", "code": ["public void add Divider ( Image View v ) {", "Relative Layout . Layout Params divider Params = new Relative Layout . Layout Params ( Layout Params . FILL PARENT , Layout Params . WRAP CONTENT ) ;", "if ( m Image View != null ) {", "divider Params . add Rule ( Relative Layout . BELOW , m Image View . get Id ( ) ) ; }", "else if ( m Missing Image != null ) {", "divider Params . add Rule ( Relative Layout . BELOW , m Missing Image . get Id ( ) ) ; }", "else if ( m Video Button != null ) {", "divider Params . add Rule ( Relative Layout . BELOW , m Video Button . get Id ( ) ) ; }", "else if ( m Audio Button != null ) {", "divider Params . add Rule ( Relative Layout . BELOW , m Audio Button . get Id ( ) ) ; }", "else if ( m View Text != null ) {", "divider Params . add Rule ( Relative Layout . BELOW , m View Text . get Id ( ) ) ; }", "else {", "Log . e ( t , STR_ ) ;", "return ; }", "add View ( v , divider Params ) ; }"]}
{"ids": "63618", "code": ["private double find Length ( Point origin Point , Point target Point ) {", "int x 1 = origin Point . x ;", "int y 1 = origin Point . y ;", "int x 2 = target Point . x ;", "int y 2 = target Point . y ;", "double side A = x 2 - x 1 ;", "double side B = ( y 1 > y 2 ? ( y 1 - y 2 ) : ( y 2 - y 1 ) ) ;", "if ( side B == NUM_ ) {", "return side A ; }", "return Math . sqrt ( Math . pow ( side A , NUM_ ) + Math . pow ( side B , NUM_ ) ) ; }"]}
{"ids": "76933", "code": ["public static Automaton determinize Simple ( Automaton a , Set < Integer > initialset ) {", "if ( a . get Num States ( ) == NUM_ ) {", "return a ; }", "int [ ] points = a . get Start Points ( ) ;", "Map < Set < Integer > , Set < Integer > > sets = new Hash Map < > ( ) ;", "Linked List < Set < Integer > > worklist = new Linked List < > ( ) ;", "Map < Set < Integer > , Integer > newstate = new Hash Map < > ( ) ;", "sets . put ( initialset , initialset ) ;", "worklist . add ( initialset ) ;", "Automaton . Builder result = new Automaton . Builder ( ) ;", "result . create State ( ) ;", "newstate . put ( initialset , NUM_ ) ;", "Transition t = new Transition ( ) ;", "while ( worklist . size ( ) > NUM_ ) {", "Set < Integer > s = worklist . remove First ( ) ;", "int r = newstate . get ( s ) ;", "for ( int q : s ) {", "if ( a . is Accept ( q ) ) {", "result . set Accept ( r , true ) ;", "break ; } }", "for ( int n = NUM_ ; n < points . length ; n ++ ) {", "Set < Integer > p = new Hash Set < > ( ) ;", "for ( int q : s ) {", "int count = a . init Transition ( q , t ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "a . get Next Transition ( t ) ;", "if ( t . min <= points [ n ] && points [ n ] <= t . max ) {", "p . add ( t . dest ) ; } } }", "if ( ! sets . contains Key ( p ) ) {", "sets . put ( p , p ) ;", "worklist . add ( p ) ;", "newstate . put ( p , result . create State ( ) ) ; }", "int q = newstate . get ( p ) ;", "int min = points [ n ] ;", "int max ;", "if ( n + NUM_ < points . length ) {", "max = points [ n + NUM_ ] - NUM_ ; }", "else {", "max = Character . MAX CODE POINT ; }", "result . add Transition ( r , q , min , max ) ; } }", "return Operations . remove Dead States ( result . finish ( ) ) ; }"]}
{"ids": "15637", "code": ["public static void write ( Input Stream in , Output Stream out , boolean close Both ) throws IO Exception {", "byte [ ] buff = new byte [ NUM_ ] ;", "int read = NUM_ ;", "while ( ( read = in . read ( buff ) ) > NUM_ ) {", "out . write ( buff , NUM_ , read ) ; }", "out . flush ( ) ;", "if ( close Both ) {", "safe Close Streams ( in , out ) ; } }"]}
{"ids": "27267", "code": ["public static double distance ( Coordinate DD p 1 , Coordinate DD p 2 , UNITS units ) {", "final double lat P 1 = p 1 . north South ;", "final double lat P 2 = p 2 . north South ;", "final double lon P 1 = p 1 . east West ;", "final double lon P 2 = p 2 . east West ;", "if ( lat P 1 == lat P 2 && lon P 1 == lon P 2 ) return NUM_ ;", "double dist Rad = Math . acos ( Math . sin ( to Radians ( lat P 1 ) ) * Math . sin ( to Radians ( lat P 2 ) ) + Math . cos ( to Radians ( lat P 1 ) ) * Math . cos ( to Radians ( lat P 2 ) ) * Math . cos ( to Radians ( lon P 1 - lon P 2 ) ) ) ;", "final double dist As Degree = to Degrees ( dist Rad ) ;", "return meters To Units ( dist As Degree * NUM_ * NUM_ * NUM_ , units ) ; }"]}
{"ids": "43468", "code": ["public static Liquid Network init Network ( ) {", "Random random = new Random ( System . current Time Millis ( ) ) ;", "int id = random . next Int ( ) ;", "while ( used Ids . contains ( id ) ) {", "id = random . next Int ( ) ; } ;", "Liquid Network net = new Liquid Network ( ) ;", "used Ids . add ( id ) ;", "net . network ID = id ;", "return net ; }"]}
{"ids": "67882", "code": ["public String export Xml ( ) throws IO Exception {", "Byte Array Output Stream output Stream = new Byte Array Output Stream ( ) ;", "export Xml ( output Stream ) ;", "return output Stream . to String ( ) ; }"]}
{"ids": "76730", "code": ["public Pattern Replace Filter ( Token Stream in , Pattern p , String replacement , boolean all ) {", "super ( in ) ;", "this . replacement = ( null == replacement ) ? STR_ : replacement ;", "this . all = all ;", "this . m = p . matcher ( term Att ) ; }"]}
{"ids": "1999", "code": ["public static int [ ] stable Sort ( double [ ] array ) {", "int [ ] index = new int [ array . length ] ;", "int [ ] new Index = new int [ array . length ] ;", "int [ ] help Index ;", "int num Equal ;", "array = ( double [ ] ) array . clone ( ) ;", "for ( int i = NUM_ ; i < index . length ; i ++ ) {", "index [ i ] = i ;", "if ( Double . is Na N ( array [ i ] ) ) {", "array [ i ] = Double . MAX VALUE ; } }", "quick Sort ( array , index , NUM_ , array . length - NUM_ ) ;", "int i = NUM_ ;", "while ( i < index . length ) {", "num Equal = NUM_ ;", "for ( int j = i + NUM_ ; ( ( j < index . length ) && Utils . eq ( array [ index [ i ] ] , array [ index [ j ] ] ) ) ; j ++ ) num Equal ++ ;", "if ( num Equal > NUM_ ) {", "help Index = new int [ num Equal ] ;", "for ( int j = NUM_ ; j < num Equal ; j ++ ) help Index [ j ] = i + j ;", "quick Sort ( index , help Index , NUM_ , num Equal - NUM_ ) ;", "for ( int j = NUM_ ; j < num Equal ; j ++ ) new Index [ i + j ] = index [ help Index [ j ] ] ;", "i += num Equal ; }", "else {", "new Index [ i ] = index [ i ] ;", "i ++ ; } }", "return new Index ; }"]}
{"ids": "65035", "code": ["public void reopen Read Write ( ) {", "synchronized ( m Lock ) {", "throw If Not Open Locked ( ) ;", "if ( ! is Read Only Locked ( ) ) {", "return ; }", "final int old Open Flags = m Configuration Locked . open Flags ;", "m Configuration Locked . open Flags = ( m Configuration Locked . open Flags & ~ OPEN READ MASK ) | OPEN READWRITE ;", "try {", "m Connection Pool Locked . reconfigure ( m Configuration Locked ) ; }", "catch ( Runtime Exception ex ) {", "m Configuration Locked . open Flags = old Open Flags ;", "throw ex ; } } }"]}
{"ids": "43882", "code": ["public static int read Chars ( Reader r , char [ ] char Array ) throws IO Exception {", "int total Chars Read = NUM_ ;", "int chars Read = r . read ( char Array ) ;", "while ( chars Read >= NUM_ ) {", "total Chars Read += chars Read ;", "if ( total Chars Read == char Array . length ) {", "break ; }", "chars Read = r . read ( char Array , total Chars Read , char Array . length - total Chars Read ) ; }", "return total Chars Read ; }"]}
{"ids": "80329", "code": ["public void remove Direction ( final Direction dir , final boolean face ) {", "RP Action action ;", "int size ;", "action = new RP Action ( ) ;", "action . put ( STR_ , STR_ ) ;", "action . put ( STR_ , - dir . get ( ) ) ;", "send ( action ) ;", "directions . remove ( dir ) ;", "size = directions . size ( ) ;", "if ( size == NUM_ ) {", "action = new RP Action ( ) ;", "action . put ( STR_ , STR_ ) ; }", "else {", "if ( face ) {", "action = new Face RP Action ( directions . get ( size - NUM_ ) ) ; }", "else {", "action = new Move RP Action ( directions . get ( size - NUM_ ) ) ; } }", "send ( action ) ; }"]}
{"ids": "12474", "code": ["public static double [ ] ndary ( int n ) {", "double d [ ] = new double [ n ] ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "d [ i ] = R . next Gaussian ( ) ; }", "return d ; }"]}
{"ids": "71497", "code": ["private float apply Bounce ( float velocity , float dist Out Of Bounds , float simulation Rate ) {", "if ( is Zero ( dist Out Of Bounds ) ) {", "return velocity ; }", "velocity *= - NUM_ ;", "float bounce = BOUNCE MULTIPLIER * Math . abs ( dist Out Of Bounds / m Iris Radius ) ;", "if ( velocity > NUM_ ) {", "velocity += bounce * simulation Rate ; }", "else {", "velocity -= bounce * simulation Rate ; }", "return velocity ; }"]}
{"ids": "9399", "code": ["private double dot ( final int k 0 , final int k 1 , final int [ ] assignment 0 , final int [ ] assignment 1 ) {", "double dot = NUM_ ;", "final int N = X . size ( ) ;", "int a = NUM_ , b = NUM_ ;", "for ( int i = NUM_ ; i < N ; i ++ ) {", "if ( assignment 0 [ i ] != k 0 ) continue ;", "a ++ ;", "for ( int j = NUM_ ; j < N ; j ++ ) {", "if ( assignment 1 [ j ] != k 1 ) continue ;", "dot += kernel . eval ( i , j , X , accel ) ; } }", "for ( int j = NUM_ ; j < N ; j ++ ) if ( assignment 1 [ j ] == k 1 ) b ++ ;", "return dot / ( a * b ) ; }"]}
{"ids": "6918", "code": ["public void remove All Textures ( ) {", "for ( Weak Reference < CC Texture 2 D > tex SR : textures . values ( ) ) {", "CC Texture 2 D tex = tex SR . get ( ) ;", "if ( tex != null ) tex . release Texture ( CC Director . gl ) ; }", "textures . clear ( ) ; }"]}
{"ids": "68378", "code": ["public synchronized void add To Queue ( final Image Resource Loader image Resource Loader , final String uri , final Mutable FS Image mfsi , final int width , final int height ) {", "XR Log . general ( Level . FINE , STR_ + uri ) ;", "load Queue . add Last ( new Image Load Item ( image Resource Loader , uri , mfsi , width , height ) ) ;", "notify All ( ) ; }"]}
{"ids": "84318", "code": ["private JNI Writer ( Context context ) {", "context . put ( jni Writer Key , this ) ;", "file Manager = context . get ( Java File Manager . class ) ;", "log = Log . instance ( context ) ;", "Options options = Options . instance ( context ) ;", "verbose = options . is Set ( VERBOSE ) ;", "check All = options . is Set ( STR_ ) ;", "this . context = context ;", "syms = Symtab . instance ( context ) ;", "line Sep = System . get Property ( STR_ ) ; }"]}
{"ids": "83290", "code": ["public JOSM Tolerant Fast XML Parser ( Sink sink , XML Stream Reader reader , boolean enable Date Parsing ) {", "this . sink = sink ;", "this . enable Date Parsing = enable Date Parsing ;", "this . reader = reader ;", "if ( enable Date Parsing ) {", "timestamp Format = new Xml Timestamp Format ( ) ; }", "else {", "Calendar calendar ;", "calendar = Calendar . get Instance ( ) ;", "calendar . set ( Calendar . MILLISECOND , NUM_ ) ;", "dummy Timestamp Container = new Simple Timestamp Container ( calendar . get Time ( ) ) ; }", "member Type Parser = new Member Type Parser ( ) ; }"]}
{"ids": "33858", "code": ["public Hashtable ( int initial Capacity , float load Factor ) {", "if ( initial Capacity < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + initial Capacity ) ; }", "if ( load Factor <= NUM_ || Float . is Na N ( load Factor ) ) {", "throw new Illegal Argument Exception ( STR_ + load Factor ) ; }", "if ( initial Capacity == NUM_ ) initial Capacity = NUM_ ;", "this . load Factor = load Factor ;", "table = new Entry [ initial Capacity ] ;", "threshold = ( int ) ( initial Capacity * load Factor ) ; }"]}
{"ids": "49871", "code": ["public static String extract Reminder ( String public URL , String access URL ) {", "return public URL . substring ( access URL . length ( ) ) ; }"]}
{"ids": "75580", "code": ["public void create Underlying ( ) {", "if ( options != null ) {", "options . create Underlying ( ) ;", "if ( Platform . is Fx Application Thread ( ) ) {", "line = new com . lynden . gmapsfx . shapes . Polyline ( options . convert ( ) ) ; } } }"]}
{"ids": "40020", "code": ["private void init Raster Program ( ) {", "Int Buffer props = Buffer Utils . create Int Buffer ( NUM_ ) ;", "Int Buffer params = Buffer Utils . create Int Buffer ( NUM_ ) ;", "int uniforms Resource Index = gl Get Program Resource Index ( raster Program , GL UNIFORM BLOCK , STR_ ) ;", "compute Ubo Binding = params . get ( NUM_ ) ;", "props . put ( NUM_ , GL BUFFER BINDING ) ;", "gl Get Program Resourceiv ( raster Program , GL UNIFORM BLOCK , uniforms Resource Index , props , null , params ) ;", "raster Ubo Binding = params . get ( NUM_ ) ; }"]}
{"ids": "83646", "code": ["private void install Voice Data ( ) {", "if ( Text Utils . is Empty ( get Engine Name ( ) ) ) return ;", "Intent intent = new Intent ( Text To Speech . Engine . ACTION INSTALL TTS DATA ) ;", "intent . add Flags ( Intent . FLAG ACTIVITY NEW TASK ) ;", "intent . set Package ( get Engine Name ( ) ) ;", "try {", "Log . v ( TAG , STR_ + intent . to Uri ( NUM_ ) ) ;", "start Activity ( intent ) ; }", "catch ( Activity Not Found Exception ex ) {", "Log . e ( TAG , STR_ + intent + STR_ ) ; } }"]}
{"ids": "85575", "code": ["@ Suppress Warnings ( STR_ ) Symbol select Best ( Env < Attr Context > env , Type site , List < Type > argtypes , List < Type > typeargtypes , Symbol sym , Symbol best So Far , boolean allow Boxing , boolean use Varargs , boolean operator ) {", "if ( sym . kind == ERR || ! sym . is Inherited In ( site . tsym , types ) ) {", "return best So Far ; }", "else if ( use Varargs && ( sym . flags ( ) & VARARGS ) == NUM_ ) {", "return best So Far . kind >= ERRONEOUS ? new Bad Varargs Method ( ( Resolve Error ) best So Far . base Symbol ( ) ) : best So Far ; }", "Assert . check ( sym . kind < AMBIGUOUS ) ;", "try {", "Type mt = raw Instantiate ( env , site , sym , null , argtypes , typeargtypes , allow Boxing , use Varargs , types . no Warnings ) ;", "if ( ! operator || verbose Resolution Mode . contains ( Verbose Resolution Mode . PREDEF ) ) current Resolution Context . add Applicable Candidate ( sym , mt ) ; }", "catch ( Inapplicable Method Exception ex ) {", "if ( ! operator ) current Resolution Context . add Inapplicable Candidate ( sym , ex . get Diagnostic ( ) ) ;", "switch ( best So Far . kind ) {", "case ABSENT MTH :", "return new Inapplicable Symbol Error ( current Resolution Context ) ;", "case WRONG MTH :", "if ( operator ) return best So Far ;", "best So Far = new Inapplicable Symbols Error ( current Resolution Context ) ;", "default :", "return best So Far ; } }", "if ( ! is Accessible ( env , site , sym ) ) {", "return ( best So Far . kind == ABSENT MTH ) ? new Access Error ( env , site , sym ) : best So Far ; }", "return ( best So Far . kind > AMBIGUOUS ) ? sym : most Specific ( argtypes , sym , best So Far , env , site , allow Boxing && operator , use Varargs ) ; }"]}
{"ids": "42752", "code": ["public Bitmap load Bitmap ( String uri , int req Width , int req Height ) {", "Bitmap bitmap = load Bitmap From Mem Cache ( uri ) ;", "if ( bitmap != null ) {", "Log . d ( TAG , STR_ + uri ) ;", "return bitmap ; }", "try {", "bitmap = load Bitmap From Disk Cache ( uri , req Width , req Height ) ;", "if ( bitmap != null ) {", "Log . d ( TAG , STR_ + uri ) ;", "return bitmap ; }", "bitmap = load Bitmap From Http ( uri , req Width , req Height ) ;", "Log . d ( TAG , STR_ + uri ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "if ( bitmap == null && ! m Is Disk Lru Cache Created ) {", "Log . w ( TAG , STR_ ) ;", "bitmap = download Bitmap From Url ( uri ) ; }", "return bitmap ; }"]}
{"ids": "76350", "code": ["public boolean is Safe To Execute SUT Code ( ) {", "Thread current = Thread . current Thread ( ) ;", "if ( ! privileged Threads . contains ( current ) ) {", "return true ; }", "else {", "return privileged Thread To Ignore == current ; } }"]}
{"ids": "57333", "code": ["public String [ ] read Directory ( String dir ) {", "if ( dir == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "String Array Out list Out = new String Array Out ( ) ;", "try {", "check Result ( Lib I Mobile Device . afc read directory ( get Ref ( ) , dir , list Out ) ) ;", "String Array list = list Out . get Value ( ) ;", "Array List < String > result = new Array List < String > ( ) ;", "if ( list != null ) {", "for ( int i = NUM_ ; ; i ++ ) {", "String s = list . get ( i ) ;", "if ( s == null ) {", "break ; }", "result . add ( s ) ; } }", "return result . to Array ( new String [ result . size ( ) ] ) ; }", "finally {", "Lib I Mobile Device . delete String Array values z ( list Out . get Value ( ) ) ;", "list Out . delete ( ) ; } }"]}
{"ids": "84988", "code": ["public static String create Args String ( List < String > args ) {", "if ( args == null ) {", "return STR_ ; }", "String Builder args Sb = new String Builder ( ) ;", "for ( String arg : args ) {", "if ( ( arg . contains ( STR_ ) || arg . contains ( STR_ ) ) && ! String Utilities . is Quoted ( arg ) ) {", "args Sb . append ( String Utilities . quote ( arg ) ) ; }", "else {", "args Sb . append ( arg ) ; }", "args Sb . append ( STR_ ) ; }", "if ( args Sb . length ( ) > NUM_ ) {", "args Sb . set Length ( args Sb . length ( ) - NUM_ ) ; }", "return args Sb . to String ( ) ; }"]}
{"ids": "61437", "code": ["public void add Element ( int value ) {", "int index Relative To Cache = m first Free - m build Cache Start Index ;", "if ( index Relative To Cache >= NUM_ && index Relative To Cache < m blocksize ) {", "m build Cache [ index Relative To Cache ] = value ;", "++ m first Free ; }", "else {", "int index = m first Free > > > m SHIFT ;", "int offset = m first Free & m MASK ;", "if ( index >= m map . length ) {", "int newsize = index + m numblocks ;", "int [ ] [ ] new Map = new int [ newsize ] [ ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m map . length ) ;", "m map = new Map ; }", "int [ ] block = m map [ index ] ;", "if ( null == block ) block = m map [ index ] = new int [ m blocksize ] ;", "block [ offset ] = value ;", "m build Cache = block ;", "m build Cache Start Index = m first Free - offset ;", "++ m first Free ; } }"]}
{"ids": "73578", "code": ["public static < T > List < List < T > > overlap ( List < List < T > > lists , int before , int after ) {", "if ( before < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( after < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "List Iterator < List < T > > iter = lists . list Iterator ( ) ;", "List < List < T > > result = new Array List < List < T > > ( ) ;", "for ( ; iter . has Next ( ) ; ) {", "List < T > current = new Array List < T > ( iter . next ( ) ) ;", "List < T > prev = before > NUM_ ? find Previous ( iter ) : null ;", "List < T > next = after > NUM_ ? find Next ( iter ) : null ;", "if ( prev != null ) {", "List < T > overlap = prev . sub List ( prev . size ( ) - before , prev . size ( ) ) ;", "current . add All ( NUM_ , overlap ) ; }", "if ( next != null ) {", "List < T > overlap = next . sub List ( NUM_ , after ) ;", "current . add All ( overlap ) ; }", "result . add ( current ) ; }", "return result ; }"]}
{"ids": "72487", "code": ["public double [ ] [ ] extract Main Set Jacobian ( final ODE State state ) {", "final double [ ] p = state . get Secondary State ( index ) ;", "final double [ ] [ ] d Yd Y 0 = new double [ state Dim ] [ state Dim ] ;", "int j = NUM_ ;", "for ( int i = NUM_ ; i < state Dim ; i ++ ) {", "System . arraycopy ( p , j , d Yd Y 0 [ i ] , NUM_ , state Dim ) ;", "j += state Dim ; }", "return d Yd Y 0 ; }"]}
{"ids": "60026", "code": ["private void handle Get Candidate Result ( Placement Task current State , Operation post Operation , Map < String , Server Address > candidates , Stopwatch placement Watch ) {", "Service Utils . log Info ( this , STR_ , placement Watch . elapsed ( Time Unit . MILLISECONDS ) ) ;", "if ( candidates . is Empty ( ) ) {", "String msg = String . format ( STR_ , current State . resource ) ;", "Placement Task patch State = build Patch ( Task State . Task Stage . FAILED , current State . task State . is Direct , null ) ;", "patch State . result Code = Place Result Code . NO SUCH RESOURCE ;", "patch State . error = msg ;", "fail Task ( patch State , new Throwable ( msg ) , post Operation ) ;", "return ; }", "Service Utils . log Info ( this , STR_ , candidates , current State . timeout Ms ) ;", "Stopwatch score Candidates Stopwatch = Stopwatch . create Started ( ) ;", "query Hosts For Scores ( current State . resource , candidates , null ) ; }"]}
{"ids": "28561", "code": ["public boolean contains ( Json Element element ) {", "return elements . contains ( element ) ; }"]}
{"ids": "60564", "code": ["private void append Path ( Path cp , final Path p ) {", "if ( p != null && p . size ( ) > NUM_ ) {", "cp . append ( p ) ; } }"]}
{"ids": "2516", "code": ["public static void do Default Layout ( Composite parent , Dialog Field [ ] editors , boolean label On Top ) {", "do Default Layout ( parent , editors , label On Top , NUM_ , NUM_ ) ; }"]}
{"ids": "36820", "code": ["protected static final List < C View > process Query Results ( final Result Set result Set , final I Navi Project project , final Map < Integer , Set < C Tag > > tags , final I Tag Manager node Tag Manager , final SQL Provider provider , final List < C View > views , final View Type view Type , final Graph Type graph Type ) throws SQL Exception {", "final Map < Integer , Set < C Tag > > node Tag Map = get Node Tags ( provider . get Connection ( ) , project , node Tag Manager ) ;", "try {", "while ( result Set . next ( ) ) {", "final int view Id = result Set . get Int ( STR_ ) ;", "final String name = Postgre SQL Helpers . read String ( result Set , STR_ ) ;", "final String description = Postgre SQL Helpers . read String ( result Set , STR_ ) ;", "final Timestamp creation Date = result Set . get Timestamp ( STR_ ) ;", "final Timestamp modification Date = result Set . get Timestamp ( STR_ ) ;", "final boolean star State = result Set . get Boolean ( STR_ ) ;", "final int node Count = result Set . get Int ( STR_ ) ;", "final int edge Count = result Set . get Int ( STR_ ) ;", "final Set < C Tag > view Tags = tags . contains Key ( view Id ) ? tags . get ( view Id ) : new Hash Set < C Tag > ( ) ;", "final Set < C Tag > node Tags = node Tag Map . contains Key ( view Id ) ? node Tag Map . get ( view Id ) : new Hash Set < C Tag > ( ) ;", "final C Project View Generator generator = new C Project View Generator ( provider , project ) ;", "views . add ( generator . generate ( view Id , name , description , view Type , graph Type , creation Date , modification Date , node Count , edge Count , view Tags , node Tags , star State ) ) ; }", "return views ; }", "finally {", "result Set . close ( ) ; } }"]}
{"ids": "81588", "code": ["private void draw String ( Object native Font , String str , int x , int y , int text Decoration , int font Height ) {", "if ( str . length ( ) == NUM_ ) {", "return ; }", "if ( text Decoration != NUM_ ) {", "boolean raised = ( text Decoration & Style . TEXT DECORATION 3 D ) != NUM_ ;", "boolean lowerd = ( text Decoration & Style . TEXT DECORATION 3 D LOWERED ) != NUM_ ;", "boolean north = ( text Decoration & Style . TEXT DECORATION 3 D SHADOW NORTH ) != NUM_ ;", "if ( raised || lowerd || north ) {", "text Decoration = text Decoration & ( ~ Style . TEXT DECORATION 3 D ) & ( ~ Style . TEXT DECORATION 3 D LOWERED ) & ( ~ Style . TEXT DECORATION 3 D SHADOW NORTH ) ;", "int c = get Color ( ) ;", "int a = get Alpha ( ) ;", "int new Color = NUM_ ;", "int offset = - NUM_ ;", "if ( lowerd ) {", "offset = NUM_ ;", "new Color = NUM_ ; }", "else if ( north ) {", "offset = NUM_ ; }", "set Color ( new Color ) ;", "if ( a == NUM_ ) {", "set Alpha ( NUM_ ) ; }", "draw String ( native Font , str , x , y + offset , text Decoration , font Height ) ;", "set Alpha ( a ) ;", "set Color ( c ) ;", "draw String ( native Font , str , x , y , text Decoration , font Height ) ;", "return ; }", "canvas . draw Text ( str , x , y - font . get Font Ascent ( ) , font ) ;", "if ( ( text Decoration & Style . TEXT DECORATION UNDERLINE ) != NUM_ ) {", "paint . set Style ( Paint . Style . FILL ) ;", "canvas . draw Line ( x , y + font Height - NUM_ , x + impl . string Width ( native Font , str ) , y + font Height - NUM_ , paint ) ; }", "if ( ( text Decoration & Style . TEXT DECORATION STRIKETHRU ) != NUM_ ) {", "paint . set Style ( Paint . Style . FILL ) ;", "canvas . draw Line ( x , y + font Height / NUM_ , x + impl . string Width ( native Font , str ) , y + font Height / NUM_ , paint ) ; }", "if ( ( text Decoration & Style . TEXT DECORATION OVERLINE ) != NUM_ ) {", "paint . set Style ( Paint . Style . FILL ) ;", "canvas . draw Line ( x , y , x + impl . string Width ( native Font , str ) , y , paint ) ; } }", "else {", "canvas . draw Text ( str , x , y - font . get Font Ascent ( ) , font ) ; } }"]}
{"ids": "29339", "code": ["public void remove Drag Event Handlers ( ) {", "node . remove Event Handler ( Touch Event . ANY , touch Handler ) ;", "node . remove Event Handler ( Mouse Event . ANY , mouse Handler ) ; }"]}
{"ids": "82834", "code": ["protected void install Listeners ( ) {", "super . install Listeners ( ) ;", "table . add Property Change Listener ( this ) ; }"]}
{"ids": "22501", "code": ["public void shutdown ( ) throws Connection Manager Exception {", "s logger . info ( STR_ ) ;", "connection Lock . lock ( ) ;", "try {", "close All Connections ( ) ;", "if ( listener != null ) {", "listener . stop ( ) ;", "listener = null ; }", "executor Service . shutdown ( ) ; }", "catch ( Exception e ) {", "throw new Connection Manager Exception ( STR_ , e ) ; }", "finally {", "connection Lock . unlock ( ) ; } }"]}
{"ids": "25788", "code": ["private void close Writer Execution Service ( Executor Service service ) throws Carbon Data Writer Exception {", "try {", "service . shutdown ( ) ;", "service . await Termination ( NUM_ , Time Unit . DAYS ) ; }", "catch ( Interrupted Exception e ) {", "LOGGER . error ( e , e . get Message ( ) ) ;", "throw new Carbon Data Writer Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "76406", "code": ["public void remove Job ( String job Id ) {", "if ( jobs . contains ( job Id ) ) {", "jobs . remove ( job Id ) ; } }"]}
{"ids": "23588", "code": ["public String format Time Millis ( long ts ) {", "synchronized ( time Formatter ) {", "return time Formatter . format ( new Date ( ts ) ) ; } }"]}
{"ids": "25501", "code": ["protected static final int position Coordinate 2 D ( float value ) {", "return ( int ) ( value + NUM_ ) ; }"]}
{"ids": "60720", "code": ["@ Override public Object clone ( ) {", "try {", "Identity Hash Map < K , V > clone Hash Map = ( Identity Hash Map < K , V > ) super . clone ( ) ;", "clone Hash Map . element Data = new Element Array ( element Data . length ) ;", "System . arraycopy ( element Data , NUM_ , clone Hash Map . element Data , NUM_ , element Data . length ) ;", "return clone Hash Map ; }", "catch ( Clone Not Supported Exception e ) {", "throw new Assertion Error ( e ) ; } }"]}
{"ids": "29323", "code": ["public int trap ( int [ ] A ) {", "if ( A == null || A . length == NUM_ ) return NUM_ ;", "int l = NUM_ ;", "int r = A . length - NUM_ ;", "int level = NUM_ ;", "int all = NUM_ ;", "int block = NUM_ ;", "while ( l <= r ) {", "int cur Level = Math . min ( A [ l ] , A [ r ] ) ;", "if ( cur Level > level ) {", "all += ( cur Level - level ) * ( r - l + NUM_ ) ;", "level = cur Level ; }", "if ( A [ l ] < A [ r ] ) block += A [ l ++ ] ;", "else block += A [ r -- ] ; }", "return all - block ; }"]}
{"ids": "75719", "code": ["public void search ( ) {", "perform Search ( ) ; }"]}
{"ids": "14316", "code": ["public Remote Session ( Http Session session ) {", "super ( ) ;", "debug = Debug . get Instance ( STR_ ) ;", "this . session = ( Http Session ) session ;", "creation Time = session . get Creation Time ( ) ;", "id = session . get Id ( ) ;", "last Accessed Time = session . get Last Accessed Time ( ) ;", "max Inactive Interval = session . get Max Inactive Interval ( ) ;", "is New = session . is New ( ) ;", "internal Attributes = new Hash Map ( ) ;", "Enumeration a Names = get Attribute Names ( ) ;", "while ( a Names . has More Elements ( ) ) {", "String attribute Name = ( String ) a Names . next Element ( ) ;", "if ( is Serializable ( get Attribute ( attribute Name ) ) && ! attribute Name . equals ( STR_ ) && ! attribute Name . equals ( STR_ ) ) {", "internal Attributes . put ( attribute Name , get Attribute ( attribute Name ) ) ;", "internal Attribute Names . add ( attribute Name ) ;", "debug . message ( STR_ + attribute Name + STR_ + get Attribute ( attribute Name ) ) ; } } }"]}
{"ids": "45989", "code": ["@ Override public Snmp Mib Handler add Mib ( Snmp Mib Agent mib ) throws Illegal Argument Exception {", "if ( mib == null ) {", "throw new Illegal Argument Exception ( ) ; }", "if ( ! mibs . contains ( mib ) ) mibs . add Element ( mib ) ;", "root . register ( mib ) ;", "return this ; }"]}
{"ids": "26243", "code": ["public boolean exist ( ) {", "return production Run != null ; }"]}
{"ids": "34149", "code": ["public static String number To String ( Number number ) throws JSON Exception {", "if ( number == null ) {", "throw new JSON Exception ( STR_ ) ; }", "double double Value = number . double Value ( ) ;", "JSON . check Double ( double Value ) ;", "if ( number . equals ( NEGATIVE ZERO ) ) {", "return STR_ ; }", "long long Value = number . long Value ( ) ;", "if ( double Value == ( double ) long Value ) {", "return Long . to String ( long Value ) ; }", "return number . to String ( ) ; }"]}
{"ids": "77325", "code": ["public static Sort Clause create ( String item , String order ) {", "return new Sort Clause ( item , ORDER . value Of ( order ) ) ; }"]}
{"ids": "33", "code": ["public long end Time ( ) {", "return get Timestamp ( ) + calculate Duration ( ) ; }"]}
{"ids": "39018", "code": ["protected void build Leaves Middle Out ( Ball Node node ) throws Exception {", "if ( node . m Left != null && node . m Right != null ) {", "build Leaves Middle Out ( node . m Left ) ;", "build Leaves Middle Out ( node . m Right ) ; }", "else if ( node . m Left != null || node . m Right != null ) {", "throw new Exception ( STR_ ) ; }", "else {", "Ball Node n 2 = build Tree Middle Out ( node . m Start , node . m End ) ;", "if ( n 2 . m Left != null && n 2 . m Right != null ) {", "node . m Left = n 2 . m Left ;", "node . m Right = n 2 . m Right ;", "build Leaves Middle Out ( node ) ; }", "else if ( n 2 . m Left != null || n 2 . m Right != null ) {", "throw new Exception ( STR_ ) ; } } }"]}
{"ids": "62726", "code": ["public Weight Vector ( Weight Vector wv ) {", "float in [ ] = wv . get Internal Array ( ) ;", "u = new float [ in . length ] ;", "System . arraycopy ( in , NUM_ , u , NUM_ , in . length ) ;", "size = in . length ; }"]}
{"ids": "69392", "code": ["public void wait Until Done ( ) {", "count Lock . lock ( ) ;", "try {", "equal Count Cv . await ( ) ; }", "catch ( Interrupted Exception e ) {", "throw new Runtime Exception ( STR_ ) ; }", "finally {", "count Lock . unlock ( ) ; } }"]}
{"ids": "82475", "code": ["public java . lang . String Builder insert ( int offset , long l ) {", "return insert ( offset , Long . to String ( l ) ) ; }"]}
{"ids": "73141", "code": ["public Projection Preferences Dialog ( Projector projector ) {", "this . projector = projector ;", "String tolerance Tool Tip = STR_ + STR_ ;", "J Label tolerance Label = new J Label ( STR_ ) ;", "tolerance . set Tool Tip Text ( tolerance Tool Tip ) ;", "tolerance Label . set Tool Tip Text ( tolerance Tool Tip ) ;", "main Panel . add Item Label ( tolerance Label , tolerance ) ;", "if ( projector . get Projection Method ( ) instanceof Project Coordinate ) {", "main Panel . add Item ( STR_ , auto Find ) ; }", "fill Field Values ( ) ;", "set Content Pane ( main Panel ) ; }"]}
{"ids": "84688", "code": ["private Element generate Branch ( Tree Type tree Type , Rooted Tree tree , Node node , String node Name , double start Latitude , double finish Latitude , double start Longitude , double finish Longitude , double start Altitude , double finish Altitude , double peak Position , double peak Altitude , double start Date , double finish Date , double age Cut Off , Line Style start Style , Line Style finish Style , int division Count , List < Element > styles ) {", "Element element ;", "Double rate = ( Double ) node . get Attribute ( STR_ ) ;", "Double support = ( Double ) node . get Attribute ( STR_ ) ;", "double height = tree . get Height ( node ) ;", "boolean has Division Styles = start Style != null && finish Style != null ;", "if ( division Count > NUM_ ) {", "double lat Diff = finish Latitude - start Latitude ;", "double lat Delta = lat Diff / division Count ;", "double long Diff = finish Longitude - start Longitude ;", "double long Delta = long Diff / division Count ;", "double alt Diff = finish Altitude - start Altitude ;", "double alt Delta = alt Diff / division Count ;", "double date Diff = finish Date - start Date ;", "double date Delta = date Diff / division Count ;", "double last Latitude = start Latitude ;", "double latitude = start Latitude + lat Delta ;", "double last Longitude = start Longitude ;", "double longitude = start Longitude + long Delta ;", "double x = - peak Position ;", "double x Delta = NUM_ / division Count ;", "double a = peak Altitude - finish Altitude ;", "if ( peak Position == NUM_ ) {", "a *= NUM_ ; }", "double altitude = peak Altitude - ( a * ( x * x ) ) ;", "double last Altitude = altitude ;", "x += x Delta ;", "double date = start Date ;", "String style Name = null ;", "if ( ! has Division Styles && start Style != null ) {", "style Name = node Name + STR_ ;", "styles . add ( generate Line Style ( style Name , start Style . get Width ( ) , start Style . get Color ( ) ) ) ; }", "element = generate Container ( STR_ , node Name , null , ( style Name != null ? STR_ + style Name : null ) ) ;", "for ( int division = NUM_ ; division < division Count ; division ++ ) {", "if ( age Cut Off == NUM_ || date > age Cut Off ) {", "String part Name = node Name + STR_ + ( division + NUM_ ) ;", "style Name = null ;", "if ( has Division Styles ) {", "style Name = part Name + STR_ ; }", "Element place Mark = generate Container ( STR_ , part Name , null , ( style Name != null ? STR_ + style Name : null ) ) ;", "annotate Branch ( place Mark , height , start Date , finish Date , rate , support ) ;", "if ( has Division Styles ) {", "double width = start Style . get Width ( ) ;", "Color color = get Blended Color ( ( ( float ) division ) / ( division Count - NUM_ ) , start Style . get Color ( ) , finish Style . get Color ( ) ) ;", "styles . add ( generate Line Style ( style Name , width , color ) ) ; }", "if ( date Diff > NUM_ ) {", "Element time Span = new Element ( STR_ ) ;", "time Span . add Content ( generate Element ( STR_ , get KML Date ( date ) ) ) ;", "place Mark . add Content ( time Span ) ; }", "Element line String = new Element ( STR_ ) ;", "Element coordinates = new Element ( STR_ ) ;", "if ( alt Diff > NUM_ || peak Altitude > NUM_ ) {", "line String . add Content ( generate Element ( STR_ , altitude Mode ) ) ;", "altitude = peak Altitude - ( a * ( x * x ) ) ;", "coordinates . add Content ( STR_ + last Longitude + STR_ + last Latitude + STR_ + last Altitude + STR_ ) ;", "coordinates . add Content ( STR_ + longitude + STR_ + latitude + STR_ + altitude + STR_ ) ; }", "else {", "line String . add Content ( generate Element ( STR_ , STR_ ) ) ;", "line String . add Content ( generate Element ( STR_ , true ) ) ;", "coordinates . add Content ( STR_ + last Longitude + STR_ + last Latitude + STR_ ) ;", "coordinates . add Content ( STR_ + longitude + STR_ + latitude + STR_ ) ; }", "last Latitude = latitude ;", "latitude += lat Delta ;", "last Longitude = longitude ;", "longitude += long Delta ;", "last Altitude = altitude ;", "x += x Delta ;", "date += date Delta ;", "line String . add Content ( coordinates ) ;", "place Mark . add Content ( line String ) ;", "element . add Content ( place Mark ) ; } } }", "else {", "String style Name = null ;", "if ( start Style != null ) {", "style Name = node Name + STR_ ;", "double width = start Style . get Width ( ) ;", "styles . add ( generate Line Style ( style Name , width , start Style . get Color ( ) ) ) ; }", "element = generate Container ( STR_ , node Name , null , ( style Name != null ? STR_ + style Name : null ) ) ;", "annotate Branch ( element , height , start Date , finish Date , rate , support ) ;", "Element line String = new Element ( STR_ ) ;", "line String . add Content ( generate Element ( STR_ , altitude Mode ) ) ;", "Element coordinates = new Element ( STR_ ) ;", "if ( tree Type == Tree Type . RECTANGLE TREE ) {", "coordinates . add Content ( STR_ + finish Longitude + STR_ + finish Latitude + STR_ + finish Altitude + STR_ ) ;", "coordinates . add Content ( STR_ + finish Longitude + STR_ + finish Latitude + STR_ + start Altitude + STR_ ) ;", "coordinates . add Content ( STR_ + start Longitude + STR_ + start Latitude + STR_ + start Altitude + STR_ ) ; }", "else {", "coordinates . add Content ( STR_ + finish Longitude + STR_ + finish Latitude + STR_ + finish Altitude + STR_ ) ;", "coordinates . add Content ( STR_ + start Longitude + STR_ + start Latitude + STR_ + start Altitude + STR_ ) ; }", "line String . add Content ( coordinates ) ;", "element . add Content ( line String ) ; }", "return element ; }"]}
{"ids": "65595", "code": ["public void add Table Value Change Listener ( Table Value Change Listener listener ) {", "if ( listener == null ) {", "return ; }", "m listeners . add ( listener ) ; }"]}
{"ids": "37716", "code": ["@ Override public int print ( Graphics g , Page Format page Format , int page Index ) {", "if ( page Index > NUM_ ) {", "return ( NO SUCH PAGE ) ; }", "else {", "Graphics 2 D g 2 d = ( Graphics 2 D ) g ;", "g 2 d . translate ( page Format . get Imageable X ( ) , page Format . get Imageable Y ( ) ) ;", "double f Height = page Format . get Imageable Height ( ) ;", "double f Width = page Format . get Imageable Width ( ) ;", "int x Max = NUM_ ;", "int y Max = NUM_ ;", "for ( int i Node = NUM_ ; i Node < m Bayes Net . get Nr Of Nodes ( ) ; i Node ++ ) {", "if ( x Max < m Bayes Net . get Position X ( i Node ) ) {", "x Max = m Bayes Net . get Position X ( i Node ) ; }", "if ( y Max < m Bayes Net . get Position Y ( i Node ) ) {", "y Max = m Bayes Net . get Position Y ( i Node ) ; } }", "double f Current Scale = m f Scale ;", "x Max += m n Padded Node Width + NUM_ ;", "if ( f Width / x Max < f Height / y Max ) {", "m f Scale = f Width / x Max ; }", "else {", "m f Scale = f Height / y Max ; }", "paint ( g 2 d ) ;", "m f Scale = f Current Scale ;", "return ( PAGE EXISTS ) ; } }"]}
{"ids": "43144", "code": ["public Linked Hash Map < Pokemon , Nickname Pokemon Response . Result > bulk Rename With Pattern ( final String pattern , final Bi Consumer < Nickname Pokemon Response . Result , Pokemon > per Poke Callback ) {", "final Linked Hash Map < Pokemon , Nickname Pokemon Response . Result > results = new Linked Hash Map < > ( ) ;", "mons . for Each ( null ) ;", "return results ; }"]}
{"ids": "46040", "code": ["protected static byte [ ] [ ] parse Directives ( byte [ ] buf , String [ ] key Table , List < byte [ ] > realm Choices , int realm Index ) throws Sasl Exception {", "byte [ ] [ ] value Table = new byte [ key Table . length ] [ ] ;", "Byte Array Output Stream key = new Byte Array Output Stream ( NUM_ ) ;", "Byte Array Output Stream value = new Byte Array Output Stream ( NUM_ ) ;", "boolean getting Key = true ;", "boolean getting Quoted Value = false ;", "boolean expect Separator = false ;", "byte bch ;", "int i = skip Lws ( buf , NUM_ ) ;", "while ( i < buf . length ) {", "bch = buf [ i ] ;", "if ( getting Key ) {", "if ( bch == STR_ ) {", "if ( key . size ( ) != NUM_ ) {", "throw new Sasl Exception ( STR_ + key ) ; }", "i = skip Lws ( buf , i + NUM_ ) ; }", "else if ( bch == STR_ ) {", "if ( key . size ( ) == NUM_ ) {", "throw new Sasl Exception ( STR_ ) ; }", "getting Key = false ;", "i = skip Lws ( buf , i + NUM_ ) ;", "if ( i < buf . length ) {", "if ( buf [ i ] == STR_ ) {", "getting Quoted Value = true ;", "++ i ; } }", "else {", "throw new Sasl Exception ( STR_ + key . to String ( ) ) ; } }", "else if ( is Lws ( bch ) ) {", "i = skip Lws ( buf , i + NUM_ ) ;", "if ( i < buf . length ) {", "if ( buf [ i ] != STR_ ) {", "throw new Sasl Exception ( STR_ + key . to String ( ) ) ; } }", "else {", "throw new Sasl Exception ( STR_ + key . to String ( ) ) ; } }", "else {", "key . write ( bch ) ;", "++ i ; } }", "else if ( getting Quoted Value ) {", "if ( bch == STR_ ) {", "++ i ;", "if ( i < buf . length ) {", "value . write ( buf [ i ] ) ;", "++ i ; }", "else {", "throw new Sasl Exception ( STR_ + key . to String ( ) + STR_ + value . to String ( ) ) ; } }", "else if ( bch == STR_ ) {", "++ i ;", "getting Quoted Value = false ;", "expect Separator = true ; }", "else {", "value . write ( bch ) ;", "++ i ; } }", "else if ( is Lws ( bch ) || bch == STR_ ) {", "extract Directive ( key . to String ( ) , value . to Byte Array ( ) , key Table , value Table , realm Choices , realm Index ) ;", "key . reset ( ) ;", "value . reset ( ) ;", "getting Key = true ;", "getting Quoted Value = expect Separator = false ;", "i = skip Lws ( buf , i + NUM_ ) ; }", "else if ( expect Separator ) {", "throw new Sasl Exception ( STR_ + value . to String ( ) + STR_ ) ; }", "else {", "value . write ( bch ) ;", "++ i ; } }", "if ( getting Quoted Value ) {", "throw new Sasl Exception ( STR_ + key . to String ( ) + STR_ + value . to String ( ) ) ; }", "if ( key . size ( ) > NUM_ ) {", "extract Directive ( key . to String ( ) , value . to Byte Array ( ) , key Table , value Table , realm Choices , realm Index ) ; }", "return value Table ; }"]}
{"ids": "62059", "code": ["public static Assignment create Default ( String ... variables ) {", "return create Default ( Arrays . as List ( variables ) ) ; }"]}
{"ids": "80150", "code": ["private void on Stop Attack ( ) {", "attacking = null ; }"]}
{"ids": "77888", "code": ["public JSON Tokener ( Reader reader ) {", "this . reader = reader . mark Supported ( ) ? reader : new Buffered Reader ( reader ) ;", "this . eof = false ;", "this . use Previous = false ;", "this . previous = NUM_ ;", "this . index = NUM_ ;", "this . character = NUM_ ;", "this . line = NUM_ ; }"]}
{"ids": "74505", "code": ["void calculate Pressed ( Action Event e ) {", "if ( check Edit Conditional ( ) ) {", "return ; }", "if ( num Conditionals > NUM_ ) {", "String c Name = STR_ ;", "Conditional c = null ;", "for ( int i = NUM_ ; i < num Conditionals ; i ++ ) {", "c Name = cur Logix . get Conditional By Number Order ( i ) ;", "if ( c Name != null ) {", "c = conditional Manager . get By System Name ( c Name ) ;", "if ( c == null ) {", "log . error ( STR_ + c Name ) ; }", "else {", "c . calculate ( false , null ) ; } }", "else {", "log . error ( STR_ ) ; } }", "conditional Table Model . fire Table Data Changed ( ) ; } }"]}
{"ids": "63474", "code": ["public static Function Alias new Instance ( Schema schema , int id , String name , String java Class Method , boolean force , boolean buffer Result Set To Local Temp ) {", "Function Alias alias = new Function Alias ( schema , id , name ) ;", "int paren = java Class Method . index Of ( STR_ ) ;", "int last Dot = java Class Method . last Index Of ( STR_ , paren < NUM_ ? java Class Method . length ( ) : paren ) ;", "if ( last Dot < NUM_ ) {", "throw Db Exception . get ( Error Code . SYNTAX ERROR 1 , java Class Method ) ; }", "alias . class Name = java Class Method . substring ( NUM_ , last Dot ) ;", "alias . method Name = java Class Method . substring ( last Dot + NUM_ ) ;", "alias . buffer Result Set To Local Temp = buffer Result Set To Local Temp ;", "alias . init ( force ) ;", "return alias ; }"]}
{"ids": "75656", "code": ["protected void update Menu ( ) {", "boolean present ;", "boolean initializing ;", "boolean running ;", "boolean stopping ;", "boolean active ;", "if ( m Menu Bar == null ) return ;", "present = ( m Experiment != null ) ;", "initializing = present && m Experiment . is Initializing ( ) ;", "running = present && m Experiment . is Running ( ) ;", "stopping = present && m Experiment . is Stopping ( ) ;", "active = initializing || running || stopping ;", "m Menu Item File New . set Enabled ( ! active ) ;", "m Menu Item File Open . set Enabled ( ! active ) ;", "m Menu Item File Save . set Enabled ( present && ( get Current File ( ) != null ) ) ;", "m Menu Item File Save As . set Enabled ( present ) ;", "m Menu Item File Close . set Enabled ( ! active ) ;", "m Menu Item Execution Start . set Enabled ( present && ! active ) ;", "m Menu Item Execution Stop . set Enabled ( present && running ) ;", "for ( Abstract Experimenter Menu Item item : m Additional Menu Items . key Set ( ) ) item . update ( this , m Additional Menu Items . get ( item ) ) ; }"]}
{"ids": "34168", "code": ["@ Not Null @ Objective C Name ( STR_ ) public Configuration Builder add Auto Join Group ( String group Token Or Short Name ) {", "auto Join Groups . add ( group Token Or Short Name ) ;", "return this ; }"]}
{"ids": "66811", "code": ["public boolean has Value Info ( ) {", "return ! receiver Value . equals ( STR_ ) || method Argument Values != null ; }"]}
{"ids": "57971", "code": ["public boolean next Is Sep ( ) {", "if ( Character . is Letter Or Digit ( str . char At ( current Position ) ) ) return false ;", "else return true ; }"]}
{"ids": "74320", "code": ["protected void drop Car ( Print Writer file , Car car , boolean is Manifest ) {", "if ( is Manifest ) {", "String Buffer buf = new String Buffer ( pad And Truncate String ( Setup . get Drop Car Prefix ( ) , Setup . get Manifest Prefix Length ( ) ) ) ;", "String [ ] format = Setup . get Drop Manifest Message Format ( ) ;", "boolean is Local = is Local Move ( car ) ;", "if ( is Local ) {", "buf = new String Buffer ( pad And Truncate String ( Setup . get Local Prefix ( ) , Setup . get Manifest Prefix Length ( ) ) ) ;", "format = Setup . get Local Manifest Message Format ( ) ; }", "drop Car ( file , car , buf , format , is Local , is Manifest ) ; }", "else {", "String Buffer buf = new String Buffer ( pad And Truncate String ( Setup . get Switch List Drop Car Prefix ( ) , Setup . get Switch List Prefix Length ( ) ) ) ;", "String [ ] format = Setup . get Drop Switch List Message Format ( ) ;", "boolean is Local = is Local Move ( car ) ;", "if ( is Local ) {", "buf = new String Buffer ( pad And Truncate String ( Setup . get Switch List Local Prefix ( ) , Setup . get Switch List Prefix Length ( ) ) ) ;", "format = Setup . get Local Switch List Message Format ( ) ; }", "drop Car ( file , car , buf , format , is Local , is Manifest ) ; } }"]}
{"ids": "24899", "code": ["@ After Method public void delete Storage ( ) throws Business Exception , IO Exception , Serialization Exception {", "if ( null != storage Data ) {", "if ( storage Manager . get Recording State ( ) == Recording State . ON ) {", "storage Manager . stop Recording ( ) ; }", "if ( ! storage Manager . is Storage Closed ( storage Data ) ) {", "storage Manager . close Storage ( storage Data ) ; }", "storage Manager . delete Storage ( storage Data ) ;", "storage Data = null ; }", "assert That ( storage Manager . get Existing Storages ( ) , is ( empty ( ) ) ) ; }"]}
{"ids": "18285", "code": ["public final void remove Element At ( int i ) {", "if ( i > m first Free ) System . arraycopy ( m map , i + NUM_ , m map , i , m first Free ) ;", "else m map [ i ] = java . lang . Integer . MIN VALUE ;", "m first Free -- ; }"]}
{"ids": "11562", "code": ["protected int key On List ( String key , List < String > list ) {", "int ret = - NUM_ ;", "int index = NUM_ ;", "if ( list != null ) {", "for ( String list Key : list ) {", "if ( list Key . equals Ignore Case ( key ) ) {", "ret = index ;", "break ; }", "index ++ ; } }", "return ret ; }"]}
{"ids": "76739", "code": ["private boolean increment Sentence ( ) throws IO Exception {", "if ( length == NUM_ ) return false ;", "while ( true ) {", "int start = iterator . current ( ) ;", "if ( start == Break Iterator . DONE ) return false ;", "int end = iterator . next ( ) ;", "if ( end == Break Iterator . DONE ) return false ;", "set Next Sentence ( start , end ) ;", "if ( increment Word ( ) ) {", "return true ; } } }"]}
{"ids": "46754", "code": ["Enumeration < Crypto Permission Entry > permission Elements ( ) {", "return permission Entries . elements ( ) ; }"]}
{"ids": "45148", "code": ["private static char [ ] zz Unpack C Map ( String packed ) {", "char [ ] map = new char [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < NUM_ ) {", "int count = packed . char At ( i ++ ) ;", "char value = packed . char At ( i ++ ) ;", "do map [ j ++ ] = value ;", "while ( -- count > NUM_ ) ; }", "return map ; }"]}
{"ids": "43238", "code": ["private static void populate Access Request ( Access Request access Request ) {", "access Request . set Access License Number ( props . get Property ( LICENSE NUMBER ) ) ;", "access Request . set User Id ( props . get Property ( USER NAME ) ) ;", "access Request . set Password ( props . get Property ( PASSWORD ) ) ; }"]}
{"ids": "25692", "code": ["public Binary Table ( Header my Header ) throws Fits Exception {", "long heap Size L = my Header . get Long Value ( PCOUNT ) ;", "long heap Offset L = my Header . get Long Value ( THEAP ) ;", "if ( heap Offset L > MAX INTEGER VALUE ) {", "throw new Fits Exception ( STR_ ) ; }", "if ( heap Size L > MAX INTEGER VALUE ) {", "throw new Fits Exception ( STR_ ) ; }", "if ( heap Size L - heap Offset L > MAX INTEGER VALUE ) {", "throw new Fits Exception ( STR_ ) ; }", "this . heap Offset = ( int ) heap Offset L ;", "int heap Size = ( int ) heap Size L ;", "int rwsz = my Header . get Int Value ( NAXIS 1 ) ;", "this . n Row = my Header . get Int Value ( NAXIS 2 ) ;", "if ( this . heap Offset > NUM_ ) {", "this . heap Offset -= this . n Row * rwsz ; }", "if ( this . heap Offset < NUM_ || this . heap Offset > heap Size ) {", "throw new Fits Exception ( STR_ ) ; }", "this . heap = new Fits Heap ( heap Size - this . heap Offset ) ;", "int n Col = my Header . get Int Value ( TFIELDS ) ;", "this . row Len = NUM_ ;", "for ( int col = NUM_ ; col < n Col ; col ++ ) {", "this . row Len += process Col ( my Header , col ) ; }", "Header Card card = my Header . find Card ( NAXIS 1 ) ;", "card . set Value ( String . value Of ( this . row Len ) ) ;", "my Header . update Line ( NAXIS 1 , card ) ; }"]}
{"ids": "42000", "code": ["public static Task Context current ( ) {", "final Deque < Task Context > stack = context Stacks . get ( ) ;", "if ( stack == null ) {", "return null ; }", "return stack . peek Last ( ) ; }"]}
{"ids": "10778", "code": ["public static byte [ ] concat ( final byte [ ] ... arrays ) {", "int total Size = NUM_ ;", "for ( final byte [ ] array : arrays ) {", "total Size += array . length ; }", "int start Index = NUM_ ;", "final byte [ ] result = new byte [ total Size ] ;", "for ( final byte [ ] array : arrays ) {", "System . arraycopy ( array , NUM_ , result , start Index , array . length ) ;", "start Index += array . length ; }", "return result ; }"]}
{"ids": "42902", "code": ["public JK Namespace ( final String url , final String prefix ) {", "logger . info ( String . format ( STR_ , url , prefix ) ) ;", "this . url = url ;", "this . prefix = prefix ; }"]}
{"ids": "31693", "code": ["public static void main ( String [ ] args ) throws Exception {", "final String cfg = STR_ ;", "final Class < ? extends Benchmark Driver > benchmark = Ignite Sql Query Benchmark . class ;", "final int threads = NUM_ ;", "final boolean client Driver Node = true ;", "final int extra Nodes = NUM_ ;", "final int warm Up = NUM_ ;", "final int duration = NUM_ ;", "final int range = NUM_ ;", "final boolean throughput Latency Probe = false ;", "for ( int i = NUM_ ; i < extra Nodes ; i ++ ) {", "Ignite Configuration node Cfg = Ignition . load Spring Bean ( cfg , STR_ ) ;", "node Cfg . set Grid Name ( STR_ + i ) ;", "node Cfg . set Metrics Log Frequency ( NUM_ ) ;", "Ignition . start ( node Cfg ) ; }", "Array List < String > args 0 = new Array List < > ( ) ;", "add Arg ( args 0 , STR_ , threads ) ;", "add Arg ( args 0 , STR_ , warm Up ) ;", "add Arg ( args 0 , STR_ , duration ) ;", "add Arg ( args 0 , STR_ , range ) ;", "add Arg ( args 0 , STR_ , benchmark . get Simple Name ( ) ) ;", "add Arg ( args 0 , STR_ , STR_ ) ;", "add Arg ( args 0 , STR_ , cfg ) ;", "if ( throughput Latency Probe ) add Arg ( args 0 , STR_ , STR_ ) ;", "if ( client Driver Node ) args 0 . add ( STR_ ) ;", "Benchmark Driver Start Up . main ( args 0 . to Array ( new String [ args 0 . size ( ) ] ) ) ; }"]}
{"ids": "75537", "code": ["public static boolean safe Navigation Operator Defined ( String nested Field Name ) {", "if ( nested Field Name . contains ( SAFE NAVIGATION OPERATOR ) ) if ( ! nested Field Name . starts With ( SAFE NAVIGATION OPERATOR ) ) throw new Mapping Exception ( STR_ ) ;", "else return true ;", "return false ; }"]}
{"ids": "55976", "code": ["public static boolean is Enabled ( ) {", "if ( s Enabled == null ) {", "s Enabled = detect Enabled ( ) ; }", "return s Enabled . boolean Value ( ) ; }"]}
{"ids": "64752", "code": ["public boolean intersects ( Geo Bounds other ) {", "boolean rv = false ;", "for ( Rectangle 2 D r 1 : rects ) {", "for ( Rectangle 2 D r 2 : other . rects ) {", "rv = r 1 . intersects ( r 2 ) ;", "if ( rv ) {", "break ; } }", "if ( rv ) {", "break ; } }", "return rv ; }"]}
{"ids": "64837", "code": ["public void dispose ( ) {", "m Listeners . clear ( ) ; }"]}
{"ids": "81867", "code": ["public void open Image Gallery ( final Action Listener response ) {", "open Gallery ( response , Display . GALLERY IMAGE ) ; }"]}
{"ids": "34397", "code": ["private void read Object ( final java . io . Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "inequality Symbol = ( String ) in . read Object ( ) ;", "time Stamp = in . read Long ( ) ; }"]}
{"ids": "18096", "code": ["String pop Base Indentifier ( ) {", "return ( String ) m base Identifiers . pop ( ) ; }"]}
{"ids": "50861", "code": ["@ Nullable public static File resolve Drawable ( @ Not Null Render Resources resources , @ Nullable Resource Value drawable , @ Not Null Project project ) {", "if ( drawable != null ) {", "drawable = resources . resolve Res Value ( drawable ) ; }", "if ( drawable == null ) {", "return null ; }", "String result = drawable . get Value ( ) ;", "State List state List = resolve State List ( resources , drawable , project ) ;", "if ( state List != null ) {", "List < State List State > states = state List . get States ( ) ;", "if ( ! states . is Empty ( ) ) {", "State List State state = states . get ( states . size ( ) - NUM_ ) ;", "result = state . get Value ( ) ; } }", "if ( result == null ) {", "return null ; }", "final File file = new File ( result ) ;", "return file . is File ( ) ? file : null ; }"]}
{"ids": "7083", "code": ["public static void delete ( String code , JDA jda ) {", "Invite invite = resolve ( code ) ;", "if ( invite == null ) throw new Illegal Argument Exception ( STR_ + STR_ + code ) ;", "delete ( invite , jda ) ; }"]}
{"ids": "5152", "code": ["private void update Header Separator ( ) {", "final String best Date Time Pattern = Date Format Utils . get Best Date Time Pattern ( m Current Locale , ( m Is 24 Hour View ) ? STR_ : STR_ ) ;", "final String separator Text ;", "final char [ ] hour Formats = { STR_ , STR_ , STR_ , STR_ } ;", "int h Index = last Index Of Any ( best Date Time Pattern , hour Formats ) ;", "if ( h Index == - NUM_ ) {", "separator Text = STR_ ; }", "else {", "separator Text = Character . to String ( best Date Time Pattern . char At ( h Index + NUM_ ) ) ; }", "m Separator View . set Text ( separator Text ) ; }"]}
{"ids": "1762", "code": ["protected void connection Failed ( Channel failed Channel , IO Exception cause ) {", "failure Cause = IO Exception Support . create ( cause ) ;", "channel = failed Channel ;", "connected . set ( false ) ;", "connect Latch . count Down ( ) ; }"]}
{"ids": "6061", "code": ["public Drawable create From Path ( String path Name ) {", "return Drawable . create From Path ( path Name ) ; }"]}
{"ids": "43971", "code": ["@ Override public void parse ( Reader reader , String base URI ) throws IO Exception , RDF Parse Exception , RDF Handler Exception {", "if ( reader == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( base URI == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Input Source input Source = new Input Source ( reader ) ;", "input Source . set System Id ( base URI ) ;", "parse ( input Source ) ; }"]}
{"ids": "3776", "code": ["final public void print ( double v ) {", "try {", "out . print ( v ) ; }", "catch ( IO Exception e ) {", "log . log ( Level . FINE , e . to String ( ) , e ) ; } }"]}
{"ids": "24250", "code": ["public static boolean is Empty ( String string ) {", "return string == null || string . length ( ) == NUM_ ; }"]}
{"ids": "18253", "code": ["public static boolean is XML 11 Valid Name ( String name ) {", "int length = name . length ( ) ;", "if ( length == NUM_ ) return false ;", "int i = NUM_ ;", "char ch = name . char At ( NUM_ ) ;", "if ( ! is XML 11 Name Start ( ch ) ) {", "if ( length > NUM_ && is XML 11 Name High Surrogate ( ch ) ) {", "char ch 2 = name . char At ( NUM_ ) ;", "if ( ! XML Char . is Low Surrogate ( ch 2 ) || ! is XML 11 Name Start ( XML Char . supplemental ( ch , ch 2 ) ) ) {", "return false ; }", "i = NUM_ ; }", "else {", "return false ; } }", "while ( i < length ) {", "ch = name . char At ( i ) ;", "if ( ! is XML 11 Name ( ch ) ) {", "if ( ++ i < length && is XML 11 Name High Surrogate ( ch ) ) {", "char ch 2 = name . char At ( i ) ;", "if ( ! XML Char . is Low Surrogate ( ch 2 ) || ! is XML 11 Name ( XML Char . supplemental ( ch , ch 2 ) ) ) {", "return false ; } }", "else {", "return false ; } }", "++ i ; }", "return true ; }"]}
{"ids": "8819", "code": ["public void reset ( ) {", "m Expected Events . clear ( ) ;", "m Expected Interrupt = false ;", "m Replaying = false ; }"]}
{"ids": "45364", "code": ["String generate Digest ( File file Dir , String file Name ) {", "final String algorithm = STR_ ;", "Input Stream file Stream = null ;", "Digest Input Stream d = null ;", "try {", "file Stream = get File Stream ( file Dir , file Name ) ;", "Message Digest md = Message Digest . get Instance ( algorithm ) ;", "d = new Digest Input Stream ( file Stream , md ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "while ( d . read ( buffer ) != - NUM_ ) { }", "return to Hex String ( md . digest ( ) ) ; }", "catch ( No Such Algorithm Exception e ) {", "return algorithm + STR_ ; }", "catch ( IO Exception e ) {", "C Log . e ( e ) ; }", "finally {", "Stream Util . close Stream ( d ) ;", "Stream Util . close Stream ( file Stream ) ; }", "return STR_ ; }"]}
{"ids": "24889", "code": ["public Agent Config environment To Configuration ( Environment environment , long platform Id ) {", "Agent Config agent Configuration = new Agent Config ( ) ;", "agent Configuration . set Platform Id ( platform Id ) ;", "if ( Collection Utils . is Not Empty ( environment . get Platform Sensor Configs ( ) ) ) {", "Collection < Platform Sensor Type Config > platform Sensor Type Configs = new Array List < > ( ) ;", "for ( I Platform Sensor Config platform Sensor Config : environment . get Platform Sensor Configs ( ) ) {", "if ( platform Sensor Config . is Active ( ) ) {", "platform Sensor Type Configs . add ( get Platform Sensor Type Config ( platform Id , platform Sensor Config ) ) ; } }", "agent Configuration . set Platform Sensor Type Configs ( platform Sensor Type Configs ) ; }", "else {", "agent Configuration . set Platform Sensor Type Configs ( Collections . < Platform Sensor Type Config > empty List ( ) ) ; }", "if ( Collection Utils . is Not Empty ( environment . get Method Sensor Configs ( ) ) ) {", "Collection < Method Sensor Type Config > method Sensor Type Configs = new Array List < > ( ) ;", "for ( I Method Sensor Config method Sensor Config : environment . get Method Sensor Configs ( ) ) {", "method Sensor Type Configs . add ( get Method Sensor Type Config ( platform Id , method Sensor Config ) ) ; }", "agent Configuration . set Method Sensor Type Configs ( method Sensor Type Configs ) ; }", "else {", "agent Configuration . set Method Sensor Type Configs ( Collections . < Method Sensor Type Config > empty List ( ) ) ; }", "I Exception Sensor Config exception Sensor Config = environment . get Exception Sensor Config ( ) ;", "if ( null != exception Sensor Config ) {", "agent Configuration . set Exception Sensor Type Config ( get Exception Sensor Type Config ( platform Id , exception Sensor Config ) ) ; }", "Jmx Sensor Config jmx Sensor Config = environment . get Jmx Sensor Config ( ) ;", "if ( null != jmx Sensor Config ) {", "agent Configuration . set Jmx Sensor Type Config ( get Jmx Sensor Type Config ( platform Id , jmx Sensor Config ) ) ; }", "I Strategy Config buffer Strategy Config = environment . get Buffer Strategy Config ( ) ;", "agent Configuration . set Buffer Strategy Config ( new Strategy Config ( buffer Strategy Config . get Class Name ( ) , buffer Strategy Config . get Settings ( ) ) ) ;", "I Strategy Config sending Strategy Config = environment . get Sending Strategy Config ( ) ;", "agent Configuration . set Sending Strategy Config ( new Strategy Config ( sending Strategy Config . get Class Name ( ) , sending Strategy Config . get Settings ( ) ) ) ;", "Collection < Exclude Rule > exclude Rules = configuration Resolver . get All Exclude Rules ( environment ) ;", "if ( Collection Utils . is Not Empty ( exclude Rules ) ) {", "Collection < I Match Pattern > exclude Classes Patterns = new Array List < > ( ) ;", "for ( Exclude Rule exclude Rule : exclude Rules ) {", "exclude Classes Patterns . add ( Pattern Factory . get Pattern ( exclude Rule . get Class Name ( ) ) ) ; }", "agent Configuration . set Exclude Classes Patterns ( exclude Classes Patterns ) ; }", "else {", "agent Configuration . set Exclude Classes Patterns ( Collections . < I Match Pattern > empty List ( ) ) ; }", "agent Configuration . set Configuration Info ( configuration Resolver . get Configuration Info ( environment ) ) ;", "return agent Configuration ; }"]}
{"ids": "82573", "code": ["public static java . lang . Double value Of ( java . lang . String s ) throws java . lang . Number Format Exception {", "return new Double ( parse Double ( s ) ) ; }"]}
{"ids": "69593", "code": ["private void write Object ( java . io . Object Output Stream s ) throws java . io . IO Exception {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "s . default Write Object ( ) ;", "for ( Node < E > p = first ; p != null ; p = p . next ) s . write Object ( p . item ) ;", "s . write Object ( null ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "79768", "code": ["public boolean is Parse Robots Txt ( ) {", "return parse Robots Txt ; }"]}
{"ids": "44938", "code": ["public String byte Array To Base 64 ( byte [ ] bytes ) {", "return Base 64 . encode Base 64 String ( bytes ) ; }"]}
{"ids": "24362", "code": ["private void validate Index Storage ( ) {", "Closeable Iterator < Index Store Entry > iterator = null ;", "try {", "Array List structure List = new Array List ( ) ;", "iterator = index Data Structure . iterator ( null ) ;", "while ( iterator . has Next ( ) ) {", "Index Store Entry ie = iterator . next ( ) ;", "if ( entries Contains ( ie ) ) {", "structure List . add ( ie ) ; }", "else {", "fail ( STR_ + ie ) ; } }", "assert Equals ( STR_ , entries . size ( ) , structure List . size ( ) ) ; }", "finally {", "if ( iterator != null ) {", "iterator . close ( ) ; } } }"]}
{"ids": "68092", "code": ["protected void on Exception ( final Wro Runtime Exception e ) {", "throw e ; }"]}
{"ids": "16703", "code": ["private int quantize ( long x ) {", "return NUM_ + ( int ) Math . floor ( Math . log ( x ) / Math . log ( quantization Base ) ) ; }"]}
{"ids": "86806", "code": ["public static boolean validate Output Directory ( File directory ) {", "if ( directory . exists ( ) ) {", "Diagnostic . error ( Error Type . DIRECTORY EXISTS , directory . get Path ( ) ) ;", "return false ; }", "return true ; }"]}
{"ids": "38123", "code": ["@ Override public double log Density ( double value ) {", "update Boundaries And Or Weights ( ) ;", "if ( m Boundaries == null ) {", "return Math . log ( Double . MIN VALUE ) ; }", "int index = Arrays . binary Search ( m Boundaries , value ) ;", "if ( ( index == - NUM_ ) || ( index == - m Boundaries . length - NUM_ ) ) {", "double val = NUM_ ;", "if ( index == - NUM_ ) {", "val = m TM . first Key ( ) - value ; }", "else {", "val = value - m TM . last Key ( ) ; }", "return ( CONST - Math . log ( m Width ) - NUM_ * ( val * val / ( m Width * m Width ) ) ) - Math . log ( m Sum Of Weights + NUM_ ) ; }", "if ( index == m Boundaries . length - NUM_ ) {", "index -- ; }", "else {", "if ( index < NUM_ ) {", "index = - index - NUM_ ; } }", "double width = m Boundaries [ index + NUM_ ] - m Boundaries [ index ] ;", "double dens Smeared Out = NUM_ / ( ( m Sum Of Weights + NUM_ ) * ( m Boundaries [ m Boundaries . length - NUM_ ] - m Boundaries [ NUM_ ] ) ) ;", "if ( m Weights [ index ] <= NUM_ ) {", "return Math . log ( dens Smeared Out ) ; }", "else {", "return Math . log ( dens Smeared Out + m Weights [ index ] / ( ( m Sum Of Weights + NUM_ ) * width ) ) ; } }"]}
{"ids": "5445", "code": ["public void draw Point ( Graphics sc , I Point p ) {", "double x 1 = p . get X ( ) ;", "double y 1 = p . get Y ( ) ;", "sc . draw Oval ( ( int ) x 1 - NUM_ , ( int ) y 1 - NUM_ , NUM_ , NUM_ ) ; }"]}
{"ids": "72376", "code": ["private static int compute Capacity ( final int expected Size ) {", "if ( expected Size == NUM_ ) {", "return NUM_ ; }", "final int capacity = ( int ) Fast Math . ceil ( expected Size / LOAD FACTOR ) ;", "final int power Of Two = Integer . highest One Bit ( capacity ) ;", "if ( power Of Two == capacity ) {", "return capacity ; }", "return next Power Of Two ( capacity ) ; }"]}
{"ids": "46174", "code": ["protected void a process Junction nns ( String name , Continuation cont ) throws Naming Exception {", "if ( name . equals ( STR_ ) ) {", "Name Not Found Exception e = new Name Not Found Exception ( ) ;", "cont . set Error NNS ( this , name ) ;", "throw cont . fill In Exception ( e ) ; }", "try {", "Object target = a lookup ( name , cont ) ;", "if ( cont . is Continue ( ) ) cont . append Remaining Component ( STR_ ) ;", "else {", "cont . set Continue NNS ( target , name , this ) ; } }", "catch ( Naming Exception e ) {", "e . append Remaining Component ( STR_ ) ;", "throw e ; } }"]}
{"ids": "57323", "code": ["public void add Callback ( Callback callback ) {", "if ( ! m Callbacks . contains ( callback ) ) {", "m Callbacks . add ( callback ) ; } }"]}
{"ids": "18458", "code": ["public J Tidy Document Builder Factory ( Document Builder Setting [ ] settings ) throws DOM Test Incompatible Exception {", "super ( settings ) ;", "try {", "Class Loader class Loader = Class Loader . get System Class Loader ( ) ;", "Class tidy Class = class Loader . load Class ( STR_ ) ;", "tidy Constructor = tidy Class . get Constructor ( NO CLASSES ) ;", "parse DOM Method = tidy Class . get Method ( STR_ , new Class [ ] { java . io . Input Stream . class , java . io . Output Stream . class } ) ;", "dom Impl = new J Tidy DOM Implementation ( ) ; }", "catch ( Exception ex ) {", "throw new DOM Test Incompatible Exception ( ex , null ) ; }", "if ( settings != null ) {", "for ( int i = NUM_ ; i < settings . length ; i ++ ) { } } }"]}
{"ids": "11786", "code": ["public void enqueue ( Terminating Runnable r ) {", "synchronized ( queue ) {", "queue . add ( r ) ;", "queue . notify All ( ) ; } }"]}
{"ids": "57805", "code": ["public void add Certificates And CR Ls ( Cert Store cert Store ) throws Cert Store Exception , CMS Exception {", "certs . add All ( CMS Utils . get Certificates From Store ( cert Store ) ) ;", "crls . add All ( CMS Utils . get CR Ls From Store ( cert Store ) ) ; }"]}
{"ids": "48987", "code": ["void disconnect ( ) {", "synchronized ( lock ) {", "disconnected = true ;", "lock . notify All ( ) ; } }"]}
{"ids": "77112", "code": ["public Simple Rate Limiter ( double mb Per Sec ) {", "set MB Per Sec ( mb Per Sec ) ;", "last NS = System . nano Time ( ) ; }"]}
{"ids": "86090", "code": ["private long wc ( String text ) {", "long wc = NUM_ ;", "String [ ] lines = text . split ( STR_ ) ;", "for ( String line : lines ) {", "wc += line . split ( STR_ ) . length ; }", "return wc ; }"]}
{"ids": "54771", "code": ["public boolean unbind ( ) {", "boolean worked = true ;", "if ( m rx Thread == null ) worked = false ;", "else m stop Rx = true ;", "return worked ; }"]}
{"ids": "74278", "code": ["public void register ( Schedule schedule ) {", "Integer old Size = Integer . value Of ( schedule Hash Table . size ( ) ) ;", "schedule Hash Table . put ( schedule . get Id ( ) , schedule ) ;", "int id = Integer . parse Int ( schedule . get Id ( ) ) ;", "if ( id > id ) {", "id = id ; }", "set Dirty And Fire Property Change ( LISTLENGTH CHANGED PROPERTY , old Size , Integer . value Of ( schedule Hash Table . size ( ) ) ) ; }"]}
{"ids": "44659", "code": ["public final void write Maple Ascii String ( final String s ) {", "write Short ( ( short ) s . length ( ) ) ;", "write Ascii String ( s ) ; }"]}
{"ids": "39071", "code": ["public static boolean has UID ( String classname ) {", "boolean result ;", "try {", "result = has UID ( Class . for Name ( classname ) ) ; }", "catch ( Exception e ) {", "result = false ; }", "return result ; }"]}
{"ids": "12142", "code": ["public static boolean remove Directory ( String path To Dir ) {", "return delete Recursive ( new File ( path To Dir ) ) ; }"]}
{"ids": "73813", "code": ["public static final boolean validate Group Name ( String s Group Name ) {", "if ( s Group Name . length ( ) == NUM_ ) {", "return false ; }", "return s Group Name . matches ( STR_ ) ; }"]}
{"ids": "44857", "code": ["private void init ( Configuration conf ) {", "try {", "if ( this . id > NUM_ ) {", "Default Listener d = new Default Listener ( ) ;", "d . upgrade ( conf , this ) ; }", "if ( ! X . is Empty ( listener ) ) {", "String name = listener ;", "if ( name != null ) {", "try {", "Class < ? > c = Class . for Name ( name , true , class Loader ) ;", "Object o = c . new Instance ( ) ;", "if ( o instanceof I Listener ) {", "log . info ( STR_ + name ) ;", "I Listener l = ( I Listener ) o ;", "l . upgrade ( conf , this ) ;", "l . on Start ( conf , this ) ; } }", "catch ( Throwable e ) {", "log . error ( this . name + STR_ + name , e ) ; } } } }", "catch ( Throwable e ) {", "log . error ( e . get Message ( ) , e ) ; } }"]}
{"ids": "4001", "code": ["private boolean is Scan Root Available ( URL url ) {", "for ( Scan Root scan Root : pending Scan Roots ) {", "if ( url . equals ( scan Root . get Url ( ) ) ) return false ; }", "return true ; }"]}
{"ids": "10428", "code": ["public Sequential Listener Manager add Listener Executor ( int index , Listener listener , Listener Executor executor ) {", "if ( listeners . contains ( listener ) ) throw new Illegal Argument Exception ( STR_ + listener ) ;", "listeners . add ( index , listener ) ;", "listener Executors . add ( index , executor ) ;", "return this ; }"]}
{"ids": "35310", "code": ["private boolean has As Parent ( I Node child , I Composite Node direct Parent ) {", "I Node parent = child ;", "while ( parent != null ) {", "if ( parent == direct Parent ) return true ;", "parent = parent . get Parent ( ) ; }", "return false ; }"]}
{"ids": "79900", "code": ["public void clear Markers ( ) {", "m Google Map . clear ( ) ;", "markers . clear ( ) ; }"]}
{"ids": "22787", "code": ["@ Override public double cloudlet Submit ( Cloudlet cl ) {", "return cloudlet Submit ( cl , NUM_ ) ; }"]}
{"ids": "55449", "code": ["public void verifying Token ( ) {", "set Token Info ( STR_ ) ;", "verify Token . set Enabled ( false ) ; }"]}
{"ids": "22258", "code": ["public Certificate build Certificate ( String cert String ) throws Invalid Certificate {", "try {", "String base 64 Cert = format Certificate ( cert String ) ;", "Input Stream in Bytes = new Byte Array Input Stream ( base 64 Cert . get Bytes ( ) ) ;", "Certificate Factory cf = Certificate Factory . get Instance ( STR_ ) ;", "assert in Bytes . available ( ) > NUM_ ;", "Certificate certificate = cf . generate Certificate ( in Bytes ) ;", "in Bytes . close ( ) ;", "return certificate ; }", "catch ( Exception e ) {", "log . debug ( STR_ + e + STR_ ) ;", "throw Fault Util . Invalid Certificate ( STR_ ) ; } }"]}
{"ids": "3363", "code": ["private Page Leaf Impl compact ( Table Kelp table ) {", "long now = Current Time . current Time ( ) / NUM_ ;", "Set < Page Leaf Entry > entries = fill Entries ( table ) ;", "Array List < Block Leaf > blocks = new Array List < > ( ) ;", "Block Leaf block = new Block Leaf ( get Id ( ) ) ;", "blocks . add ( block ) ;", "Row row = table . row ( ) ;", "for ( Page Leaf Entry entry : entries ) {", "if ( entry . get Code ( ) != INSERT && entry . get Expires ( ) <= now ) {", "continue ; }", "while ( ! block . add Entry ( row , entry ) ) {", "block = new Block Leaf ( get Id ( ) ) ;", "blocks . add ( block ) ; } }", "Page Leaf Impl new Page = new Page Leaf Impl ( get Id ( ) , get Next Id ( ) , get Sequence ( ) , table , get Min Key ( ) , get Max Key ( ) , blocks ) ;", "new Page . validate ( table ) ;", "new Page . to Sorted ( table ) ;", "if ( is Dirty ( ) ) {", "new Page . set Dirty ( ) ; }", "if ( stub != null ) {", "stub . copy To Compact ( new Page ) ; }", "return new Page ; }"]}
{"ids": "62139", "code": ["public Sabres Query ( Class < T > clazz ) {", "this . clazz = clazz ;", "name = clazz . get Simple Name ( ) ;", "inner Queries = null ; }"]}
{"ids": "57583", "code": ["S Node await Fulfill ( S Node s , boolean timed , long nanos ) {", "final long deadline = timed ? System . nano Time ( ) + nanos : NUM_ ;", "Thread w = Thread . current Thread ( ) ;", "int spins = ( should Spin ( s ) ? ( timed ? max Timed Spins : max Untimed Spins ) : NUM_ ) ;", "for ( ; ; ) {", "if ( w . is Interrupted ( ) ) s . try Cancel ( ) ;", "S Node m = s . match ;", "if ( m != null ) return m ;", "if ( timed ) {", "nanos = deadline - System . nano Time ( ) ;", "if ( nanos <= NUM_ ) {", "s . try Cancel ( ) ;", "continue ; } }", "if ( spins > NUM_ ) spins = should Spin ( s ) ? ( spins - NUM_ ) : NUM_ ;", "else if ( s . waiter == null ) s . waiter = w ;", "else if ( ! timed ) Lock Support . park ( this ) ;", "else if ( nanos > spin For Timeout Threshold ) Lock Support . park Nanos ( this , nanos ) ; } }"]}
{"ids": "39987", "code": ["public String backup Now ( String backup File Prefix ) throws Mc Exception , IO Exception {", "logger . debug ( STR_ ) ;", "return Backup . backup ( backup File Prefix ) ; }"]}
{"ids": "43057", "code": ["public static void CF 7 ( double [ ] x , double [ ] f , double [ ] c , int nx ) {", "double sum 1 = NUM_ ;", "double sum 2 = NUM_ ;", "double yj ;", "for ( int j = NUM_ ; j <= nx ; j ++ ) {", "if ( j % NUM_ == NUM_ ) {", "yj = x [ j - NUM_ ] - Math . cos ( NUM_ * PI * x [ NUM_ ] + j * PI / nx ) ;", "sum 1 += NUM_ * yj * yj - Math . cos ( NUM_ * PI * yj ) + NUM_ ; }", "else {", "yj = x [ j - NUM_ ] - Math . sin ( NUM_ * PI * x [ NUM_ ] + j * PI / nx ) ;", "if ( j == NUM_ || j == NUM_ ) {", "sum 2 += yj * yj ; }", "else {", "sum 2 += NUM_ * yj * yj - Math . cos ( NUM_ * PI * yj ) + NUM_ ; } } }", "f [ NUM_ ] = x [ NUM_ ] + sum 1 ;", "f [ NUM_ ] = ( NUM_ - x [ NUM_ ] ) * ( NUM_ - x [ NUM_ ] ) + sum 2 ;", "c [ NUM_ ] = x [ NUM_ ] - Math . sin ( NUM_ * x [ NUM_ ] * PI + NUM_ * PI / nx ) - MYSIGN ( ( x [ NUM_ ] - NUM_ ) * ( NUM_ - x [ NUM_ ] ) ) * Math . sqrt ( Math . abs ( ( x [ NUM_ ] - NUM_ ) * ( NUM_ - x [ NUM_ ] ) ) ) ;", "c [ NUM_ ] = x [ NUM_ ] - Math . sin ( NUM_ * x [ NUM_ ] * PI + NUM_ * PI / nx ) - MYSIGN ( NUM_ * Math . sqrt ( NUM_ - x [ NUM_ ] ) - NUM_ * ( NUM_ - x [ NUM_ ] ) ) * Math . sqrt ( Math . abs ( NUM_ * Math . sqrt ( NUM_ - x [ NUM_ ] ) - NUM_ * ( NUM_ - x [ NUM_ ] ) ) ) ; }"]}
{"ids": "72661", "code": ["void fully Unlock ( ) {", "take Lock . unlock ( ) ;", "put Lock . unlock ( ) ; }"]}
{"ids": "21549", "code": ["public boolean is Clustered Host ( Storage System storage , List < Initiator > initiators ) {", "return is Clustered Host ( storage , initiators , null ) ; }"]}
{"ids": "38755", "code": ["public static List < Substring Replacer Match Rule > match Rules From Internal ( String match Replace Details , Instances input Structure , String status Message Prefix , Logger log , Environment env ) {", "List < Substring Replacer Match Rule > match Rules = new Array List < Substring Replacer Match Rule > ( ) ;", "String [ ] mr Parts = match Replace Details . split ( STR_ ) ;", "for ( String p : mr Parts ) {", "Substring Replacer Match Rule mr = new Substring Replacer Match Rule ( p . trim ( ) ) ;", "mr . m status Message Prefix = status Message Prefix ;", "mr . m logger = log ;", "mr . init ( env , input Structure ) ;", "match Rules . add ( mr ) ; }", "return match Rules ; }"]}
{"ids": "56169", "code": ["private static void time ( Date Time Formatter Builder bld , Collection < Date Time Field Type > fields , boolean extended , boolean strict ISO , boolean reduced Prec , boolean date Present ) {", "boolean hour = fields . remove ( Date Time Field Type . hour Of Day ( ) ) ;", "boolean minute = fields . remove ( Date Time Field Type . minute Of Hour ( ) ) ;", "boolean second = fields . remove ( Date Time Field Type . second Of Minute ( ) ) ;", "boolean milli = fields . remove ( Date Time Field Type . millis Of Second ( ) ) ;", "if ( ! hour && ! minute && ! second && ! milli ) {", "return ; }", "if ( hour || minute || second || milli ) {", "if ( strict ISO && reduced Prec ) {", "throw new Illegal Argument Exception ( STR_ + fields ) ; }", "if ( date Present ) {", "bld . append Literal ( STR_ ) ; } }", "if ( hour && minute && second || ( hour && ! second && ! milli ) ) { }", "else {", "if ( strict ISO && date Present ) {", "throw new Illegal Argument Exception ( STR_ + fields ) ; }", "if ( ! hour && ( minute && second || ( minute && ! milli ) || second ) ) { }", "else {", "if ( strict ISO ) {", "throw new Illegal Argument Exception ( STR_ + fields ) ; } } }", "if ( hour ) {", "bld . append Hour Of Day ( NUM_ ) ; }", "else if ( minute || second || milli ) {", "bld . append Literal ( STR_ ) ; }", "if ( extended && hour && minute ) {", "bld . append Literal ( STR_ ) ; }", "if ( minute ) {", "bld . append Minute Of Hour ( NUM_ ) ; }", "else if ( second || milli ) {", "bld . append Literal ( STR_ ) ; }", "if ( extended && minute && second ) {", "bld . append Literal ( STR_ ) ; }", "if ( second ) {", "bld . append Second Of Minute ( NUM_ ) ; }", "else if ( milli ) {", "bld . append Literal ( STR_ ) ; }", "if ( milli ) {", "bld . append Literal ( STR_ ) ;", "bld . append Millis Of Second ( NUM_ ) ; } }"]}
{"ids": "26067", "code": ["public static Object [ ] merge And Extract Params ( Map < String , ? extends Object > global Config , Map < String , ? extends Object > local Params , Collection < String > ignore Params , Map < String , External Resource Description > resources ) {", "Set < String > unique Params = new Hash Set < > ( ) ;", "unique Params . add All ( local Params . key Set ( ) ) ;", "unique Params . add All ( global Config . key Set ( ) ) ;", "if ( ignore Params != null ) {", "unique Params . remove All ( ignore Params ) ; }", "Object [ ] params = new Object [ resources . size ( ) * NUM_ + unique Params . size ( ) * NUM_ ] ;", "int i = NUM_ ;", "for ( Entry < String , External Resource Description > entry : resources . entry Set ( ) ) {", "params [ i ++ ] = entry . get Key ( ) ;", "params [ i ++ ] = entry . get Value ( ) ; }", "for ( String key : unique Params ) {", "params [ i ++ ] = key ;", "if ( local Params . contains Key ( key ) ) {", "params [ i ++ ] = Cpe Builder Utils . convert To Parameter Value ( local Params . get ( key ) ) ; }", "else {", "params [ i ++ ] = Cpe Builder Utils . convert To Parameter Value ( global Config . get ( key ) ) ; } }", "return params ; }"]}
{"ids": "72878", "code": ["public void store Properties ( String artifact , String version , Properties props ) throws IO Exception {", "Path properties File = get Properties File ( artifact , version ) ;", "Path dir = properties File . get Parent ( ) ;", "if ( ! Files . exists ( dir ) ) {", "Files . create Directories ( dir ) ; }", "try ( Output Stream out = new Buffered Output Stream ( new Output Stream ( properties File ) ) ) {", "props . store ( out , null ) ; } }"]}
{"ids": "54269", "code": ["public static String make Descriptor ( Class [ ] params , Class ret Type ) {", "String Buffer sbuf = new String Buffer ( ) ;", "sbuf . append ( STR_ ) ;", "for ( int i = NUM_ ; i < params . length ; i ++ ) make Desc ( sbuf , params [ i ] ) ;", "sbuf . append ( STR_ ) ;", "if ( ret Type != null ) make Desc ( sbuf , ret Type ) ;", "return sbuf . to String ( ) ; }"]}
{"ids": "53106", "code": ["public boolean is Loggable ( Level lev ) {", "return logger . is Loggable ( lev ) ; }"]}
{"ids": "81749", "code": ["int parse Hour ( String source , char pattern Char , int offset ) throws Parse Exception {", "int min = ( pattern Char == HOUR 1 LETTER || pattern Char == HOUR 12 1 LETTER ) ? NUM_ : NUM_ ;", "int max = ( ( pattern Char == HOUR LETTER || pattern Char == HOUR 1 LETTER ) ? NUM_ : NUM_ ) + min ;", "return parse Number ( source , offset , STR_ , min , max ) - min ; }"]}
{"ids": "52238", "code": ["@ Override public boolean supports Knowledge ( ) {", "return false ; }"]}
{"ids": "67235", "code": ["@ Data Provider public Object [ ] [ ] invalid Id Provider ( ) {", "return new Object [ ] [ ] { new Object [ ] { STR_ , STR_ , Http Status . SC NOT FOUND } , new Object [ ] { STR_ , STR_ , Http Status . SC NOT FOUND } , new Object [ ] { STR_ , STR_ , Http Status . SC INTERNAL SERVER ERROR } , new Object [ ] { STR_ , STR_ , Http Status . SC INTERNAL SERVER ERROR } , new Object [ ] { STR_ , STR_ , Http Status . SC INTERNAL SERVER ERROR } } ; }"]}
{"ids": "18366", "code": ["public final static Header Element parse Header Element ( final String value , Header Value Parser parser ) throws Parse Exception {", "if ( value == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( parser == null ) parser = Basic Header Value Parser . DEFAULT ;", "Char Array Buffer buffer = new Char Array Buffer ( value . length ( ) ) ;", "buffer . append ( value ) ;", "Parser Cursor cursor = new Parser Cursor ( NUM_ , value . length ( ) ) ;", "return parser . parse Header Element ( buffer , cursor ) ; }"]}
{"ids": "77956", "code": ["private void clear State ( ) {", "allocated Resources . clear ( ) ;", "requests To Count Map . clear ( ) ;", "requests Queue . clear ( ) ; }"]}
{"ids": "77377", "code": ["public static double [ ] vector Box Corner ( double [ ] center , double [ ] result , double distance , boolean upper Right ) {", "if ( result == null || result . length != center . length ) {", "result = new double [ center . length ] ; }", "if ( upper Right == false ) {", "distance = - distance ; }", "distance = SIN PI DIV 4 * distance ;", "for ( int i = NUM_ ; i < center . length ; i ++ ) {", "result [ i ] = center [ i ] + distance ; }", "return result ; }"]}
{"ids": "63197", "code": ["public void to Array ( int [ ] array ) {", "System . arraycopy ( data , NUM_ , array , NUM_ , size ) ; }"]}
{"ids": "15940", "code": ["public Fixed Secure Random ( boolean int Pad , byte [ ] [ ] values ) {", "Byte Array Output Stream b Out = new Byte Array Output Stream ( ) ;", "for ( int i = NUM_ ; i != values . length ; i ++ ) {", "try {", "b Out . write ( values [ i ] ) ; }", "catch ( IO Exception e ) {", "throw new Illegal Argument Exception ( STR_ ) ; } }", "data = b Out . to Byte Array ( ) ;", "if ( int Pad ) {", "int Pad = data . length % NUM_ ; } }"]}
{"ids": "36238", "code": ["@ Override protected void ensure Number Of Columns ( int number Of Columns ) {", "if ( data . length >= number Of Columns ) {", "return ; }", "long [ ] new Data = new long [ number Of Columns ] ;", "System . arraycopy ( data , NUM_ , new Data , NUM_ , data . length ) ;", "data = new Data ; }"]}
{"ids": "26896", "code": ["public void invoke Hook Spout Ack ( Object message Id , long complete Latency Ns ) {", "if ( task Hooks . size ( ) != NUM_ ) {", "Spout Ack Info ack Info = new Spout Ack Info ( message Id , get This Task Id ( ) , complete Latency Ns / Constants . MILLISECONDS TO NANOSECONDS ) ;", "for ( I Task Hook task Hook : task Hooks ) {", "task Hook . spout Ack ( ack Info ) ; } } }"]}
{"ids": "25498", "code": ["public static float wrap ( float value ) {", "if ( value >= NUM_ ) {", "return value - ( int ) value ; }", "float wrapped Value = value - ( float ) Math . floor ( value ) ;", "if ( wrapped Value >= NUM_ ) {", "wrapped Value -= NUM_ ; }", "return wrapped Value ; }"]}
{"ids": "48950", "code": ["Stub Skeleton Writer ( Batch Environment env , Remote Class remote Class , Stub Version version ) {", "this . env = env ;", "this . remote Class = remote Class ;", "this . version = version ;", "stub Class Name = Util . binary Name Of ( remote Class . class Doc ( ) ) + STR_ ;", "skeleton Class Name = Util . binary Name Of ( remote Class . class Doc ( ) ) + STR_ ;", "int i = stub Class Name . last Index Of ( STR_ ) ;", "package Name = ( i != - NUM_ ? stub Class Name . substring ( NUM_ , i ) : STR_ ) ;", "stub Class Simple Name = stub Class Name . substring ( i + NUM_ ) ;", "skeleton Class Simple Name = skeleton Class Name . substring ( i + NUM_ ) ;", "remote Methods = remote Class . remote Methods ( ) ;", "method Field Names = name Method Fields ( remote Methods ) ; }"]}
{"ids": "65016", "code": ["public void put ( String key , Object value , boolean error On Fail ) {", "if ( value == null ) {", "put Null ( key ) ; }", "else if ( value instanceof Boolean ) {", "put ( key , ( Boolean ) value ) ; }", "else if ( value instanceof Byte ) {", "put ( key , ( Byte ) value ) ; }", "else if ( value instanceof Double ) {", "put ( key , ( Double ) value ) ; }", "else if ( value instanceof Float ) {", "put ( key , ( Float ) value ) ; }", "else if ( value instanceof Integer ) {", "put ( key , ( Integer ) value ) ; }", "else if ( value instanceof Long ) {", "put ( key , ( Long ) value ) ; }", "else if ( value instanceof Short ) {", "put ( key , ( Short ) value ) ; }", "else if ( value instanceof String ) {", "put ( key , ( String ) value ) ; }", "else if ( value instanceof byte [ ] ) {", "put ( key , ( byte [ ] ) value ) ; }", "else if ( error On Fail ) {", "throw new Unsupported Operation Exception ( STR_ + value . get Class ( ) ) ; } }"]}
{"ids": "86895", "code": ["private void step ( ) {", "casings . for Each ( null ) ;", "casings . for Each ( null ) ;", "casings . for Each ( null ) ;", "step Pipes ( ) ;", "step Forwarders ( ) ; }"]}
{"ids": "30138", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return HOST ;", "case NUM_ :", "return PORT ;", "case NUM_ :", "return ID ;", "case NUM_ :", "return STATE ;", "case NUM_ :", "return TIMESTAMP ;", "case NUM_ :", "return VERSION ;", "default :", "return null ; } }"]}
{"ids": "28042", "code": ["private static Double Matrix 2 D xdistance Old ( Double Matrix 2 D matrix , int norm ) {", "return null ; }"]}
{"ids": "20021", "code": ["public Map < String , String > map ( ) {", "return hash Map ( ) ; }"]}
{"ids": "45158", "code": ["private String discover Tag Name ( R Syntax Document doc , int dot ) {", "Stack stack = new Stack ( ) ;", "Element root = doc . get Default Root Element ( ) ;", "int cur Line = root . get Element Index ( dot ) ;", "for ( int i = NUM_ ; i <= cur Line ; i ++ ) {", "Token t = doc . get Token List For Line ( i ) ;", "while ( t != null && t . is Paintable ( ) ) {", "if ( t . type == Token . MARKUP TAG DELIMITER ) {", "if ( t . is Single Char ( STR_ ) || t . is Single Char ( STR_ ) ) {", "t = t . get Next Token ( ) ;", "while ( t != null && t . is Paintable ( ) ) {", "if ( t . type == Token . MARKUP TAG NAME || t . type == Token . MARKUP TAG ATTRIBUTE ) {", "stack . push ( t . get Lexeme ( ) ) ;", "break ; }", "t = t . get Next Token ( ) ; } }", "else if ( t . text Count == NUM_ && t . text [ t . text Offset ] == STR_ && ( t . text [ t . text Offset + NUM_ ] == STR_ || t . text [ t . text Offset + NUM_ ] == STR_ ) ) {", "if ( ! stack . is Empty ( ) ) {", "stack . pop ( ) ; } }", "else if ( t . text Count == NUM_ && ( t . text [ t . text Offset ] == STR_ || t . text [ t . text Offset ] == STR_ ) && t . text [ t . text Offset + NUM_ ] == STR_ ) {", "String tag Name = null ;", "if ( ! stack . is Empty ( ) ) {", "tag Name = ( String ) stack . pop ( ) ; }", "if ( t . offset + t . text Count >= dot ) {", "return tag Name ; } } }", "t = t . get Next Token ( ) ; } }", "return null ; }"]}
{"ids": "31637", "code": ["private static void add Query Fields ( Document doc , Node parent , Collection < Pojo Field > fields ) {", "if ( ! fields . is Empty ( ) ) {", "Element prop = add Property ( doc , parent , STR_ , null ) ;", "Element map = add Element ( doc , prop , STR_ , STR_ , STR_ ) ;", "for ( Pojo Field field : fields ) add Element ( doc , map , STR_ , STR_ , field . java Name ( ) , STR_ , Generator Utils . box Primitive Type ( field . java Type Name ( ) ) ) ; } }"]}
{"ids": "4041", "code": ["protected boolean do Start ( ) {", "if ( ! lifecycle . is Active ( ) ) {", "return false ; }", "if ( ! is Enable ( ) ) {", "return false ; }", "int starting Count = starting Count . get And Increment ( ) ;", "int thread Count = thread Count . get ( ) + starting Count ;", "if ( thread Max < thread Count ) {", "starting Count . decrement And Get ( ) ;", "on Thread Max ( ) ;", "return false ; }", "else if ( is Idle Too Low ( starting Count ) ) {", "return true ; }", "else {", "starting Count . decrement And Get ( ) ;", "return false ; } }"]}
{"ids": "38899", "code": ["@ Override public String global Info ( ) {", "return STR_ + STR_ ; }"]}
{"ids": "86760", "code": ["public static long stream Skip ( Input Stream stream , long count ) throws IO Exception {", "long skipped = stream . skip ( count ) ;", "if ( skipped < NUM_ ) {", "final byte [ ] temp = new byte [ NUM_ ] ;", "skipped = stream . read ( temp , NUM_ , Math . min ( ( int ) count , NUM_ ) ) ; }", "return skipped ; }"]}
{"ids": "72084", "code": ["public boolean managed Object Exists ( Managed Object Path < ? , ? > path ) {", "DN target DN = DN Builder . create ( path ) ;", "try {", "return config Repository . get Entry ( target DN ) != null ; }", "catch ( Config Exception e ) {", "return false ; } }"]}
{"ids": "42118", "code": ["public Vector 2 rotate ( double theta ) {", "double cos = Math . cos ( theta ) ;", "double sin = Math . sin ( theta ) ;", "double x = this . x ;", "double y = this . y ;", "this . x = x * cos - y * sin ;", "this . y = x * sin + y * cos ;", "return this ; }"]}
{"ids": "46278", "code": ["private static int [ ] [ ] regroup Histogram ( int [ ] [ ] matrix , int [ ] groups ) {", "long old Entries = NUM_ ;", "for ( int i = NUM_ ; i < matrix . length ; i ++ ) {", "old Entries += matrix [ i ] . length - NUM_ ; }", "long new Entries = NUM_ ;", "for ( int ni = NUM_ ; ni < groups . length ; ni ++ ) {", "new Entries += groups [ ni ] ; }", "if ( new Entries > old Entries ) {", "int newlen = groups . length ;", "long ok = old Entries ;", "for ( int ni = NUM_ ; ni < groups . length ; ni ++ ) {", "if ( ok < groups [ ni ] ) {", "int [ ] new Groups = new int [ ni + NUM_ ] ;", "System . arraycopy ( groups , NUM_ , new Groups , NUM_ , ni + NUM_ ) ;", "groups = new Groups ;", "groups [ ni ] = ( int ) ok ;", "ok = NUM_ ;", "break ; }", "ok -= groups [ ni ] ; } }", "else {", "long excess = old Entries - new Entries ;", "int [ ] new Groups = new int [ groups . length + NUM_ ] ;", "System . arraycopy ( groups , NUM_ , new Groups , NUM_ , groups . length ) ;", "new Groups [ groups . length ] = ( int ) excess ;", "groups = new Groups ; }", "int [ ] [ ] new Matrix = new int [ groups . length ] [ ] ;", "int i = NUM_ ;", "int j Min = NUM_ ;", "int j Max = matrix [ i ] . length ;", "for ( int ni = NUM_ ; ni < groups . length ; ni ++ ) {", "int group Length = groups [ ni ] ;", "int [ ] group = new int [ NUM_ + group Length ] ;", "long group Weight = NUM_ ;", "new Matrix [ ni ] = group ;", "int nj Fill = NUM_ ;", "while ( nj Fill < group . length ) {", "int len = group . length - nj Fill ;", "while ( j Min == j Max ) {", "j Min = NUM_ ;", "j Max = matrix [ ++ i ] . length ; }", "if ( len > j Max - j Min ) len = j Max - j Min ;", "group Weight += ( long ) matrix [ i ] [ NUM_ ] * len ;", "System . arraycopy ( matrix [ i ] , j Max - len , group , nj Fill , len ) ;", "j Max -= len ;", "nj Fill += len ; }", "Arrays . sort ( group , NUM_ , group . length ) ;", "group [ NUM_ ] = ( int ) ( ( group Weight + group Length / NUM_ ) / group Length ) ; }", "assert ( j Min == j Max ) ;", "assert ( i == matrix . length - NUM_ ) ;", "return new Matrix ; }"]}
{"ids": "83517", "code": ["public void remove Permission ( Permission Type permission ) {", "removed Permissions . add ( permission ) ; }"]}
{"ids": "17695", "code": ["static void export Prefs ( Preferences prefs , Output Stream stream , boolean with Sub Tree ) throws IO Exception , Backing Store Exception {", "indent = - NUM_ ;", "Buffered Writer out = new Buffered Writer ( new Output Stream Writer ( stream , STR_ ) ) ;", "out . write ( HEADER ) ;", "out . new Line ( ) ;", "out . new Line ( ) ;", "out . write ( DOCTYPE ) ;", "out . write ( STR_ ) ;", "out . write ( PREFS DTD NAME ) ;", "out . write ( STR_ ) ;", "out . new Line ( ) ;", "out . new Line ( ) ;", "flush Start Tag ( STR_ , new String [ ] { STR_ } , new String [ ] { String . value Of ( XML VERSION ) } , out ) ;", "flush Start Tag ( STR_ , new String [ ] { STR_ } , new String [ ] { prefs . is User Node ( ) ? STR_ : STR_ } , out ) ;", "flush Empty Element ( STR_ , out ) ;", "String Tokenizer ancestors = new String Tokenizer ( prefs . absolute Path ( ) , STR_ ) ;", "export Node ( ancestors , prefs , with Sub Tree , out ) ;", "flush End Tag ( STR_ , out ) ;", "flush End Tag ( STR_ , out ) ;", "out . flush ( ) ;", "out = null ; }"]}
{"ids": "14923", "code": ["protected void store In Profiles Map ( Client client ) {", "Set parent Set = client . get Properties ( PARENT ID ) ;", "String client Type = client . get Client Type ( ) ;", "Map m = get Styles Profile Map ( client Type , parent Set ) ;", "if ( m != null ) {", "m . put ( client Type , client ) ; }", "return ; }"]}
{"ids": "49330", "code": ["public static int option Length ( String option ) {", "if ( option . equals ( STR_ ) ) return NUM_ ;", "if ( option . equals ( STR_ ) ) return NUM_ ;", "if ( option . equals ( STR_ ) ) return NUM_ ;", "return NUM_ ; }"]}
{"ids": "27013", "code": ["public final double cos ( ) {", "return Math . cos ( this . radians ) ; }"]}
{"ids": "35111", "code": ["public static Float Buffer create Float Buffer ( float [ ] coords ) {", "Byte Buffer bb = Byte Buffer . allocate Direct ( coords . length * SIZEOF FLOAT ) ;", "bb . order ( Byte Order . native Order ( ) ) ;", "Float Buffer fb = bb . as Float Buffer ( ) ;", "fb . put ( coords ) ;", "fb . position ( NUM_ ) ;", "return fb ; }"]}
{"ids": "43344", "code": ["public Int Stream Ex remove ( Int Predicate predicate ) {", "return filter ( predicate . negate ( ) ) ; }"]}
{"ids": "59416", "code": ["static void send Raw Line ( Pirc Bot bot , Buffered Writer bwriter , String line ) {", "if ( line . length ( ) > bot . get Max Line Length ( ) - NUM_ ) {", "line = line . substring ( NUM_ , bot . get Max Line Length ( ) - NUM_ ) ; }", "synchronized ( bwriter ) {", "try {", "bwriter . write ( line + STR_ ) ;", "bwriter . flush ( ) ; }", "catch ( Exception e ) { } } }"]}
{"ids": "70660", "code": ["Entry kill ( ) {", "Entry entry ;", "for ( int i = entries . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "entry = entries . get ( i ) ;", "if ( ! entry . dead ) {", "entry . dead = true ;", "return entry ; } }", "throw new Illegal State Exception ( STR_ ) ; }"]}
{"ids": "73829", "code": ["public void slot From Loco Address ( int i , Slot Listener l ) {", "m Loco Addr Hash . put ( Integer . value Of ( i ) , l ) ;", "Loco Net Message m = new Loco Net Message ( NUM_ ) ;", "m . set Op Code ( Ln Constants . OPC LOCO ADR ) ;", "m . set Element ( NUM_ , ( i / NUM_ ) & NUM_ ) ;", "m . set Element ( NUM_ , i & NUM_ ) ;", "tc . send Loco Net Message ( m ) ; }"]}
{"ids": "66413", "code": ["protected void uninstall Components ( ) {", "if ( scrollable Tab Layout Enabled ( ) ) {", "tab Pane . remove ( tab Scroller . viewport ) ;", "tab Pane . remove ( tab Scroller . scroll Forward Button ) ;", "tab Pane . remove ( tab Scroller . scroll Backward Button ) ;", "tab Scroller = null ; } }"]}
{"ids": "68367", "code": ["public void reset ( ) {", "forms = null ; }"]}
{"ids": "30229", "code": ["public static Map < String , String > populate Request Properties ( Map < String , String > request Properties , int body Length , Media Type content Type , Media Type accept Type ) {", "Map < String , String > properties ;", "if ( request Properties == null || request Properties . is Empty ( ) ) {", "properties = new Hash Map < > ( ) ; }", "else {", "properties = new Hash Map < > ( request Properties ) ; }", "if ( accept Type != null ) {", "properties . put ( Header Names . ACCEPT , accept Type . to String ( ) ) ; }", "if ( content Type != null ) {", "properties . put ( Header Names . CONTENT TYPE , content Type . to String ( ) ) ; }", "if ( body Length > - NUM_ ) {", "properties . put ( Header Names . CONTENT LENGTH , String . value Of ( body Length ) ) ; }", "return properties ; }"]}
{"ids": "21619", "code": ["public static Block Snapshot Delete Completer create Completer ( Db Client db Client , Block Snapshot snapshot , String task ) {", "Block Snapshot Delete Completer completer = new Block Snapshot Delete Completer ( snapshot , task ) ;", "if ( snapshot . get Consistency Group ( ) != null ) {", "List < URI > snap Ids = new Array List < URI > ( ) ;", "List < Block Snapshot > snaps = Controller Utils . get Snapshots Part Of Replication Group ( snapshot , db Client ) ;", "for ( Block Snapshot snap : snaps ) {", "snap Ids . add ( snap . get Id ( ) ) ; }", "completer . add Ids ( snap Ids ) ; }", "return completer ; }"]}
{"ids": "21504", "code": ["private void check Protocol Already Exists ( Set < String > protocols , String protocol Type ) {", "if ( ! protocols . contains ( protocol Type ) ) {", "protocols . add ( protocol Type ) ; } }"]}
{"ids": "85353", "code": ["public static boolean is Composition Playlist ( Resource Byte Range Provider resource Byte Range Provider ) throws IO Exception {", "return IMF Composition Playlist Type . is Composition Playlist ( resource Byte Range Provider ) ; }"]}
{"ids": "83767", "code": ["public static Master Private Key decrypt ( String passphrase , byte [ ] encrypted ) throws Hyper Ledger Exception {", "try {", "byte [ ] key = S Crypt . generate ( passphrase . get Bytes ( STR_ ) , BITCOIN SEED , NUM_ , NUM_ , NUM_ , NUM_ ) ;", "Secret Key Spec keyspec = new Secret Key Spec ( key , STR_ ) ;", "Cipher cipher = Cipher . get Instance ( STR_ , STR_ ) ;", "byte [ ] iv = Arrays . copy Of Range ( encrypted , NUM_ , NUM_ ) ;", "byte [ ] data = Arrays . copy Of Range ( encrypted , NUM_ , encrypted . length ) ;", "cipher . init ( Cipher . DECRYPT MODE , keyspec , new Iv Parameter Spec ( iv ) ) ;", "return Master Private Key . parse ( new String ( cipher . do Final ( data ) ) ) ; }", "catch ( Unsupported Encoding Exception | Invalid Algorithm Parameter Exception | No Such Padding Exception | No Such Provider Exception | No Such Algorithm Exception | Invalid Key Exception | Bad Padding Exception | Illegal Block Size Exception e ) {", "throw new Hyper Ledger Exception ( e ) ; } }"]}
{"ids": "56295", "code": ["protected boolean before Release ( ) {", "return deque . size ( ) < max Size ; }"]}
{"ids": "16028", "code": ["public void reset ( ) {", "System . arraycopy ( initial State , NUM_ , chain , NUM_ , chain . length ) ;", "ubi Init ( PARAM TYPE MESSAGE ) ; }"]}
{"ids": "78565", "code": ["public int update With On Conflict ( String table , Content Values values , String where Clause , String [ ] where Args , @ Conflict Algorithm int conflict Algorithm ) {", "if ( values == null || values . size ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "acquire Reference ( ) ;", "try {", "String Builder sql = new String Builder ( NUM_ ) ;", "sql . append ( STR_ ) ;", "sql . append ( CONFLICT VALUES [ conflict Algorithm ] ) ;", "sql . append ( table ) ;", "sql . append ( STR_ ) ;", "int set Values Size = values . size ( ) ;", "int bind Args Size = ( where Args == null ) ? set Values Size : ( set Values Size + where Args . length ) ;", "Object [ ] bind Args = new Object [ bind Args Size ] ;", "int i = NUM_ ;", "for ( Map . Entry < String , Object > entry : values . value Set ( ) ) {", "sql . append ( ( i > NUM_ ) ? STR_ : STR_ ) ;", "sql . append ( entry . get Key ( ) ) ;", "bind Args [ i ++ ] = entry . get Value ( ) ;", "sql . append ( STR_ ) ; }", "if ( where Args != null ) {", "for ( i = set Values Size ; i < bind Args Size ; i ++ ) {", "bind Args [ i ] = where Args [ i - set Values Size ] ; } }", "if ( ! Text Utils . is Empty ( where Clause ) ) {", "sql . append ( STR_ ) ;", "sql . append ( where Clause ) ; }", "SQ Lite Statement statement = new SQ Lite Statement ( this , sql . to String ( ) , bind Args ) ;", "try {", "return statement . execute Update Delete ( ) ; }", "finally {", "statement . close ( ) ; } }", "finally {", "release Reference ( ) ; } }"]}
{"ids": "31042", "code": ["public synchronized void add UR Ls ( List < URL > urls ) {", "for ( URL url : urls ) super . add URL ( url ) ;", "Array List search List = new Array List ( ) ;", "search List . add All ( search Path ) ;", "search List . add All ( urls ) ;", "search Path = Collections . unmodifiable List ( search Path ) ; }"]}
{"ids": "34237", "code": ["protected byte [ ] http Get ( final String url ) {", "Http Get http Request = null ;", "Http Response http Response = null ;", "Closeable Http Client client = null ;", "try {", "final URI uri = new URI ( url . trim ( ) ) ;", "http Request = new Http Get ( uri ) ;", "if ( content Type != null ) {", "http Request . set Header ( CONTENT TYPE , content Type ) ; }", "client = get Http Client ( url ) ;", "http Response = get Http Response ( client , http Request , url ) ;", "final byte [ ] returned Bytes = read Http Response ( url , http Response ) ;", "return returned Bytes ; }", "catch ( URI Syntax Exception e ) {", "throw new DSS Exception ( e ) ; }", "finally {", "try {", "if ( http Request != null ) {", "http Request . release Connection ( ) ; }", "if ( http Response != null ) {", "Entity Utils . consume Quietly ( http Response . get Entity ( ) ) ; } }", "finally {", "close Client ( client ) ; } } }"]}
{"ids": "3676", "code": ["public final int read Char ( ) throws IO Exception {", "if ( read Encoding != null ) {", "int ch = read Encoding . read ( ) ;", "return ch ; }", "if ( read Length <= read Offset ) {", "if ( ! read Buffer ( ) ) return - NUM_ ; }", "return read Buffer [ read Offset ++ ] & NUM_ ; }"]}
{"ids": "59837", "code": ["public void write Exif ( String jpeg File Name , String exif Out File Name ) throws File Not Found Exception , IO Exception {", "if ( jpeg File Name == null || exif Out File Name == null ) {", "throw new Illegal Argument Exception ( NULL ARGUMENT STRING ) ; }", "Input Stream is = null ;", "try {", "is = new File Input Stream ( jpeg File Name ) ;", "write Exif ( is , exif Out File Name ) ; }", "catch ( IO Exception e ) {", "close Silently ( is ) ;", "throw e ; }", "is . close ( ) ; }"]}
{"ids": "9685", "code": ["public D General Subtree Chooser ( J Frame parent , String title , General Subtree general Subtree ) {", "super ( parent , title , Modality Type . DOCUMENT MODAL ) ;", "init Components ( general Subtree ) ; }"]}
{"ids": "4973", "code": ["public void insert ( Undo Object Storable p object ) {", "if ( p object == null ) throw new Illegal Argument Exception ( classname + STR_ ) ;", "disable redo ( ) ;", "Undo Object Node undoable object = new Undo Object Node ( p object , stack level ) ;", "objects map . put ( p object , undoable object ) ; }"]}
{"ids": "38923", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = enum To Vector ( super . list Options ( ) ) ;", "result . add ( new Option ( STR_ + default Noise Percent ( ) + STR_ , STR_ , NUM_ , STR_ ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "73775", "code": ["@ Suppress Warnings ( STR_ ) protected void notify Property Change Listener ( String property , Object old Value , Object new Value ) {", "if ( ( old Value != null && old Value . equals ( new Value ) ) || old Value == new Value ) {", "log . error ( STR_ ) ; }", "Vector < Property Change Listener > v ;", "synchronized ( this ) {", "v = ( Vector < Property Change Listener > ) listeners . clone ( ) ; }", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + v . size ( ) + STR_ + property ) ; }", "int cnt = v . size ( ) ;", "for ( int i = NUM_ ; i < cnt ; i ++ ) {", "Property Change Listener client = v . element At ( i ) ;", "client . property Change ( new Property Change Event ( this , property , old Value , new Value ) ) ; } }"]}
{"ids": "38897", "code": ["public Element write Bean Visual ( Element parent , Object o , String name ) throws Exception {", "Element node ;", "Bean Visual visual ;", "if ( DEBUG ) {", "trace ( new Throwable ( ) , name ) ; }", "m Current Node = parent ;", "visual = ( Bean Visual ) o ;", "node = write To XML ( parent , o , name ) ;", "invoke Write To XML ( node , visual . get Icon Path ( ) , VAL ICONPATH ) ;", "invoke Write To XML ( node , visual . get Animated Icon Path ( ) , VAL ANIMATEDICONPATH ) ;", "return node ; }"]}
{"ids": "4602", "code": ["private String display Nameto Back Compat Name ( String query Name ) {", "final int last Back Slash = query Name . last Index Of ( STR_ ) ;", "if ( last Back Slash > NUM_ && last Back Slash < query Name . length ( ) - NUM_ ) {", "query Name = ( char ) NUM_ + query Name ;", "query Name = query Name . substring ( NUM_ , last Back Slash + NUM_ ) + ( char ) NUM_ + STR_ + query Name . substring ( last Back Slash + NUM_ ) ;", "query Name = query Name . replace ( STR_ , ( char ) NUM_ ) ; }", "return query Name ; }"]}
{"ids": "64997", "code": ["public SQ Lite Database Configuration ( String path , int open Flags ) {", "if ( path == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . path = path ;", "label = strip Path For Logs ( path ) ;", "this . open Flags = open Flags ;", "max Sql Cache Size = NUM_ ;", "locale = Locale . get Default ( ) ; }"]}
{"ids": "7649", "code": ["@ Override public void draw Range Gridline ( Graphics 2 D g 2 , Category Plot plot , Value Axis axis , Rectangle 2 D data Area , double value ) {", "Range range = axis . get Range ( ) ;", "if ( ! range . contains ( value ) ) {", "return ; }", "Rectangle 2 D adjusted = new Rectangle 2 D . Double ( data Area . get X ( ) , data Area . get Y ( ) + get Y Offset ( ) , data Area . get Width ( ) - get X Offset ( ) , data Area . get Height ( ) - get Y Offset ( ) ) ;", "Line 2 D line 1 = null ;", "Line 2 D line 2 = null ;", "Plot Orientation orientation = plot . get Orientation ( ) ;", "if ( orientation == Plot Orientation . HORIZONTAL ) {", "double x 0 = axis . value To Java 2 D ( value , adjusted , plot . get Range Axis Edge ( ) ) ;", "double x 1 = x 0 + get X Offset ( ) ;", "double y 0 = data Area . get Max Y ( ) ;", "double y 1 = y 0 - get Y Offset ( ) ;", "double y 2 = data Area . get Min Y ( ) ;", "line 1 = new Line 2 D . Double ( x 0 , y 0 , x 1 , y 1 ) ;", "line 2 = new Line 2 D . Double ( x 1 , y 1 , x 1 , y 2 ) ; }", "else if ( orientation == Plot Orientation . VERTICAL ) {", "double y 0 = axis . value To Java 2 D ( value , adjusted , plot . get Range Axis Edge ( ) ) ;", "double y 1 = y 0 - get Y Offset ( ) ;", "double x 0 = data Area . get Min X ( ) ;", "double x 1 = x 0 + get X Offset ( ) ;", "double x 2 = data Area . get Max X ( ) ;", "line 1 = new Line 2 D . Double ( x 0 , y 0 , x 1 , y 1 ) ;", "line 2 = new Line 2 D . Double ( x 1 , y 1 , x 2 , y 1 ) ; }", "Paint paint = plot . get Range Gridline Paint ( ) ;", "Stroke stroke = plot . get Range Gridline Stroke ( ) ;", "g 2 . set Paint ( paint != null ? paint : Plot . DEFAULT OUTLINE PAINT ) ;", "g 2 . set Stroke ( stroke != null ? stroke : Plot . DEFAULT OUTLINE STROKE ) ;", "g 2 . draw ( line 1 ) ;", "g 2 . draw ( line 2 ) ; }"]}
{"ids": "84445", "code": ["public static String dump ( final Endpoint Descriptor descriptor ) {", "return String . format ( STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ , descriptor . b Length ( ) , descriptor . b Descriptor Type ( ) , String . format ( STR_ , descriptor . b Endpoint Address ( ) & NUM_ ) , descriptor . b Endpoint Address ( ) & NUM_ , get Direction Name ( descriptor . b Endpoint Address ( ) ) , descriptor . bm Attributes ( ) & NUM_ , get Transfer Type Name ( descriptor . bm Attributes ( ) ) , get Synch Type Name ( descriptor . bm Attributes ( ) ) , get Usage Type Name ( descriptor . bm Attributes ( ) ) , descriptor . w Max Packet Size ( ) & NUM_ , descriptor . b Interval ( ) & NUM_ ) ; }"]}
{"ids": "37725", "code": ["public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "9219", "code": ["public static void print Padding ( Print Writer out , int padding ) {", "for ( int i = NUM_ ; i < padding ; ++ i ) {", "out . print ( STR_ ) ; } }"]}
{"ids": "35308", "code": ["protected void sneaky Clear ( ) {", "List < E Object > collection = new Unmodifiable E List < > ( size , data ) ;", "sneaky Do Clear ( ) ;", "for ( Iterator < E Object > i = collection . iterator ( ) ; i . has Next ( ) ; ) {", "inverse Remove ( i . next ( ) , null ) ; } }"]}
{"ids": "34728", "code": ["@ Called By Native public static Bitmap create Home Screen Icon From Web Icon ( Context context , Bitmap web Icon ) {", "Activity Manager am = ( Activity Manager ) context . get System Service ( Context . ACTIVITY SERVICE ) ;", "int max Inner Size = Math . round ( am . get Launcher Large Icon Size ( ) * MAX INNER SIZE RATIO ) ;", "int inner Size = Math . min ( max Inner Size , Math . max ( web Icon . get Width ( ) , web Icon . get Height ( ) ) ) ;", "int padding = Math . round ( ICON PADDING RATIO * inner Size ) ;", "int outer Size = inner Size + NUM_ * padding ;", "Bitmap bitmap = null ;", "try {", "bitmap = Bitmap . create Bitmap ( outer Size , outer Size , Bitmap . Config . ARGB 8888 ) ; }", "catch ( Out Of Memory Error e ) {", "Log . w ( TAG , STR_ ) ;", "return web Icon ; }", "Canvas canvas = new Canvas ( bitmap ) ;", "Rect inner Bounds = new Rect ( padding , padding , outer Size - padding , outer Size - padding ) ;", "Paint paint = new Paint ( Paint . ANTI ALIAS FLAG ) ;", "paint . set Filter Bitmap ( true ) ;", "canvas . draw Bitmap ( web Icon , null , inner Bounds , paint ) ;", "int corner Radius = Math . round ( ICON CORNER RADIUS RATIO * outer Size ) ;", "Path path = new Path ( ) ;", "path . set Fill Type ( Path . Fill Type . INVERSE WINDING ) ;", "Rect F inner Bounds F = new Rect F ( inner Bounds ) ;", "path . add Round Rect ( inner Bounds F , corner Radius , corner Radius , Path . Direction . CW ) ;", "paint . set Xfermode ( new Porter Duff Xfermode ( Porter Duff . Mode . CLEAR ) ) ;", "canvas . draw Path ( path , paint ) ;", "return bitmap ; }"]}
{"ids": "29199", "code": ["private static boolean is In Overflow ( Menu Item item ) {", "return ! is Action Button ( item ) ; }"]}
{"ids": "29807", "code": ["private static int determine Consecutive Binary Count ( Char Sequence msg , byte [ ] bytes , int startpos ) throws Writer Exception {", "int len = msg . length ( ) ;", "int idx = startpos ;", "while ( idx < len ) {", "char ch = msg . char At ( idx ) ;", "int numeric Count = NUM_ ;", "while ( numeric Count < NUM_ && is Digit ( ch ) ) {", "numeric Count ++ ;", "int i = idx + numeric Count ;", "if ( i >= len ) {", "break ; }", "ch = msg . char At ( i ) ; }", "if ( numeric Count >= NUM_ ) {", "return idx - startpos ; }", "int text Count = NUM_ ;", "while ( text Count < NUM_ && is Text ( ch ) ) {", "text Count ++ ;", "int i = idx + text Count ;", "if ( i >= len ) {", "break ; }", "ch = msg . char At ( i ) ; }", "if ( text Count >= NUM_ ) {", "return idx - startpos ; }", "ch = msg . char At ( idx ) ;", "if ( bytes [ idx ] == NUM_ && ch != STR_ ) {", "throw new Writer Exception ( STR_ + ch + STR_ + ( int ) ch + STR_ ) ; }", "idx ++ ; }", "return idx - startpos ; }"]}
{"ids": "85553", "code": ["void plugin Message ( Throwable ex ) {", "log . print Lines ( Prefix Kind . JAVAC , STR_ ) ;", "ex . print Stack Trace ( log . get Writer ( Writer Kind . NOTICE ) ) ; }"]}
{"ids": "54071", "code": ["public Builder map ( String fully Qualified Column Names , Column Mapper mapper ) {", "Predicate < Column Id > column Matcher = Predicates . includes ( fully Qualified Column Names , null ) ;", "rules . add ( new Mapper Rule ( column Matcher , mapper ) ) ;", "return this ; }"]}
{"ids": "40380", "code": ["public double theta ( ) {", "return Math . atan 2 ( y , x ) ; }"]}
{"ids": "62948", "code": ["public static int hash 32 ( final String text , int from , int length ) {", "return hash 32 ( text . substring ( from , from + length ) ) ; }"]}
{"ids": "79936", "code": ["protected void send Closing Message ( ) {", "try {", "send ( Connection Message . CLOSING , Network Protocol . TCP ) ; }", "catch ( Exception e ) {", "log . warning ( STR_ + e . get Message ( ) ) ; }", "try {", "send ( Connection Message . CLOSING , Network Protocol . UDP ) ; }", "catch ( Exception e ) {", "log . warning ( STR_ + e . get Message ( ) ) ; } }"]}
{"ids": "25092", "code": ["public static String parse Number To String ( int a Number ) {", "boolean temp = true , negative = false ;", "if ( a Number < NUM_ ) {", "a Number *= - NUM_ ;", "negative = true ; }", "String Builder t String B = new String Builder ( ) ;", "for ( int i = NUM_ ; i > NUM_ ; i /= NUM_ ) {", "int t Digit = ( a Number / i ) % NUM_ ;", "if ( temp && t Digit != NUM_ ) temp = false ;", "if ( ! temp ) {", "t String B . append ( t Digit ) ;", "if ( i != NUM_ ) for ( int j = i ; j > NUM_ ; j /= NUM_ ) if ( j == NUM_ ) t String B . append ( STR_ ) ; } }", "String t String = t String B . to String ( ) ;", "if ( t String . equals ( E ) ) t String = STR_ ;", "return negative ? STR_ + t String : t String ; }"]}
{"ids": "26630", "code": ["public void remove ( T graphic ) {", "synchronized ( m Lock ) {", "m Graphics . remove ( graphic ) ;", "if ( m First Graphic != null && m First Graphic . equals ( graphic ) ) {", "m First Graphic = null ; } }", "post Invalidate ( ) ; }"]}
{"ids": "73844", "code": ["public boolean valid System Name Config ( String system Name ) {", "return ( true ) ; }"]}
{"ids": "54447", "code": ["public int read ( ) throws IO Exception {", "ensure Open ( ) ;", "if ( next >= length ) {", "return - NUM_ ; }", "return str . char At ( next ++ ) ; }"]}
{"ids": "80216", "code": ["void add Hidden Channel Listener ( Hidden Channel Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "80480", "code": ["public boolean next To ( final Entity entity , final double step ) {", "final Rectangle 2 D this Area = new Rectangle 2 D . Double ( x - step , y - step , area . get Width ( ) + NUM_ * step , area . get Height ( ) + NUM_ * step ) ;", "return this Area . intersects ( entity . get Area ( ) ) ; }"]}
{"ids": "31875", "code": ["private long rebalance nl ( final long n Parent , final long n , Long Array unlinked ) {", "final long n L = unshared Left ( n , unlinked ) ;", "final long n R = unshared Right ( n , unlinked ) ;", "if ( ( n L == NUM_ || n R == NUM_ ) && v Opt Is Null ( n ) ) {", "if ( attempt Unlink nl ( n Parent , n , unlinked ) ) {", "return fix Height nl ( n Parent ) ; }", "else {", "return n ; } }", "final int h N = height ( n ) ;", "final int h L 0 = height ( n L ) ;", "final int h R 0 = height ( n R ) ;", "final int h N Repl = NUM_ + Math . max ( h L 0 , h R 0 ) ;", "final int bal = h L 0 - h R 0 ;", "if ( bal > NUM_ ) {", "return rebalance To Right nl ( n Parent , n , n L , h R 0 , unlinked ) ; }", "else if ( bal < - NUM_ ) {", "return rebalance To Left nl ( n Parent , n , n R , h L 0 , unlinked ) ; }", "else if ( h N Repl != h N ) {", "height ( n , h N Repl ) ;", "return fix Height nl ( n Parent ) ; }", "else {", "return NUM_ ; } }"]}
{"ids": "80531", "code": ["private void add Conversations ( ) {", "TPP Phase myphase = AWAITING ;", "main NPC . add ( Conversation States . ATTENDING , Arrays . as List ( STR_ , STR_ ) , new TPP Quest In Phase Condition ( myphase ) , Conversation States . ATTENDING , STR_ + STR_ + STR_ , null ) ;", "main NPC . add ( Conversation States . ATTENDING , STR_ , new TPP Quest In Phase Condition ( myphase ) , Conversation States . ATTENDING , null , new Details Killings Action ( ) ) ;", "main NPC . add ( Conversation States . ATTENDING , STR_ , new TPP Quest In Phase Condition ( myphase ) , Conversation States . ATTENDING , null , new Reward Player Action ( ) ) ; }"]}
{"ids": "31423", "code": ["public static void w ( String tag , String s , Object ... args ) {", "if ( LOG . WARN >= LOGLEVEL ) Log . w ( tag , String . format ( s , args ) ) ; }"]}
{"ids": "24232", "code": ["@ edu . umd . cs . findbugs . annotations . Suppress Warnings ( value = STR_ , justification = STR_ ) public void handle Notification ( Notification notification , Object handback ) {", "if ( handback instanceof Agent Impl ) {", "Agent Impl agent = ( Agent Impl ) handback ;", "JMX Connection Notification jmx Notifn = ( JMX Connection Notification ) notification ;", "if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ , jmx Notifn . get Connection Id ( ) ) ; }", "agent . update Rmi Clients Count ( ) ; } }"]}
{"ids": "41409", "code": ["public static boolean is Blank ( String s ) {", "if ( s == null ) {", "return true ; }", "int s Len = s . length ( ) ;", "for ( int i = NUM_ ; i < s Len ; i ++ ) {", "if ( ! Character . is Whitespace ( s . char At ( i ) ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "77001", "code": ["public Plain Text Dictionary ( Path path ) throws IO Exception {", "in = Files . new Buffered Reader ( path , Standard Charsets . UTF 8 ) ; }"]}
{"ids": "70723", "code": ["public boolean add Alias By Number ( String alias Name , String number ) {", "if ( alias Name . contains ( STR_ ) ) return false ;", "String contact Name = Contacts Manager . get Contact Name Or Null ( ctx , number ) ;", "add Or Update ( alias Name , number , contact Name ) ;", "return true ; }"]}
{"ids": "34167", "code": ["@ Not Null @ Objective C Name ( STR_ ) public Configuration Builder add Trusted Key ( String trusted Key ) {", "trusted Keys . add ( new Trusted Key ( trusted Key ) ) ;", "return this ; }"]}
{"ids": "6", "code": ["private void check Is Correct Class ( ) {", "if ( check Is Sub Class ( ACT NAME ) ) {", "type = Element Type . ACTTIVITY ; }", "else if ( check Is Sub Class ( FRAG NAME ) || check Is Sub Class ( V 4 FRAG NAME ) ) {", "type = Element Type . FRAGMENT ; }", "else {", "throw new Illegal Argument Exception ( String . format ( STR_ , element . get Qualified Name ( ) , ACT NAME , FRAG NAME , V 4 FRAG NAME ) ) ; } }"]}
{"ids": "39869", "code": ["String transform Resource Id To File Name ( final String resource Name ) {", "return resource Name . replace ( STR_ , STR_ ) ; }"]}
{"ids": "84381", "code": ["public void disable ( Rich Formatter Feature feature ) {", "features . remove ( feature ) ; }"]}
{"ids": "65386", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return SUCCESS ;", "case NUM_ :", "return MSG ;", "default :", "return null ; } }"]}
{"ids": "79688", "code": ["private void fill Nodes In Context ( Site Node root Node , List < Site Node > nodes List ) {", "@ Suppress Warnings ( STR_ ) Enumeration < Site Node > en = root Node . children ( ) ;", "while ( en . has More Elements ( ) ) {", "Site Node sn = en . next Element ( ) ;", "if ( is In Context ( sn ) ) {", "nodes List . add ( sn ) ; }", "fill Nodes In Context ( sn , nodes List ) ; } }"]}
{"ids": "10412", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) public boolean matches ( Inventory Crafting p 77569 1 , World p 77569 2 ) {", "Array List arraylist = new Array List ( this . recipe Items ) ;", "for ( int i = NUM_ ; i < NUM_ ; ++ i ) {", "for ( int j = NUM_ ; j < NUM_ ; ++ j ) {", "Item Stack itemstack = p 77569 1 . get Stack In Row And Column ( j , i ) ;", "if ( itemstack != null ) {", "boolean flag = false ;", "Iterator iterator = arraylist . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "Item Stack itemstack 1 = ( Item Stack ) iterator . next ( ) ;", "if ( itemstack . get Item ( ) == itemstack 1 . get Item ( ) && ( itemstack 1 . get Item Damage ( ) == NUM_ || itemstack . get Item Damage ( ) == itemstack 1 . get Item Damage ( ) ) ) {", "flag = true ;", "arraylist . remove ( itemstack 1 ) ;", "break ; } }", "if ( ! flag ) {", "return false ; } } } }", "return arraylist . is Empty ( ) ; }"]}
{"ids": "27341", "code": ["public String Builder dump Statements ( final I Access Path < ISPO > access Path ) {", "final String Builder sb = new String Builder ( ) ;", "final Bigdata Statement Iterator itr = as Statement Iterator ( access Path . iterator ( ) ) ;", "try {", "while ( itr . has Next ( ) ) {", "sb . append ( STR_ + itr . next ( ) ) ; }", "return sb ; }", "finally {", "itr . close ( ) ; } }"]}
{"ids": "53028", "code": ["public static Element svg Wait Icon ( Document document , double x , double y , double w , double h ) {", "Element g = SVG Util . svg Element ( document , SVG Constants . SVG G TAG ) ;", "set Att ( g , SVG Constants . SVG TRANSFORM ATTRIBUTE , STR_ + x + STR_ + y + STR_ + w + STR_ + h + STR_ ) ;", "Element thro = SVG Util . svg Element ( document , SVG Constants . SVG PATH TAG ) ;", "set Att ( thro , SVG Constants . SVG D ATTRIBUTE , THROBBER PATH ) ;", "set Style ( thro , THROBBER STYLE ) ;", "Element anim = SVG Util . svg Element ( document , SVG Constants . SVG ANIMATE TRANSFORM TAG ) ;", "set Att ( anim , SVG Constants . SVG ATTRIBUTE NAME ATTRIBUTE , SVG Constants . SVG TRANSFORM ATTRIBUTE ) ;", "set Att ( anim , SVG Constants . SVG ATTRIBUTE TYPE ATTRIBUTE , STR_ ) ;", "set Att ( anim , SVG Constants . SVG TYPE ATTRIBUTE , SVG Constants . SVG ROTATE ATTRIBUTE ) ;", "set Att ( anim , SVG Constants . SVG FROM ATTRIBUTE , STR_ ) ;", "set Att ( anim , SVG Constants . SVG TO ATTRIBUTE , STR_ ) ;", "set Att ( anim , SVG Constants . SVG BEGIN ATTRIBUTE , fmt ( Math . random ( ) * NUM_ ) + STR_ ) ;", "set Att ( anim , SVG Constants . SVG DUR ATTRIBUTE , STR_ ) ;", "set Att ( anim , SVG Constants . SVG REPEAT COUNT ATTRIBUTE , STR_ ) ;", "set Att ( anim , SVG Constants . SVG FILL ATTRIBUTE , STR_ ) ;", "thro . append Child ( anim ) ;", "g . append Child ( thro ) ;", "return g ; }"]}
{"ids": "63959", "code": ["protected void on End ( Pcap pcap ) {", "this . end = true ; }"]}
{"ids": "21847", "code": ["public void cd ( String dir ) {", "String Builder buf = new String Builder ( ) ;", "String command = String . format ( Image Server Dialog Properties . get String ( STR_ ) , dir ) ;", "send Wait For ( command , default Timeout , prompts , buf ) ;", "log . debug ( buf . to String ( ) ) ; }"]}
{"ids": "48757", "code": ["public void add Request Property ( String key , String value ) {", "jar File URL Connection . add Request Property ( key , value ) ; }"]}
{"ids": "28634", "code": ["public static String number To String ( Number number ) throws JSON Exception {", "if ( number == null ) {", "throw new JSON Exception ( STR_ ) ; }", "test Validity ( number ) ;", "String string = number . to String ( ) ;", "if ( string . index Of ( STR_ ) > NUM_ && string . index Of ( STR_ ) < NUM_ && string . index Of ( STR_ ) < NUM_ ) {", "while ( string . ends With ( STR_ ) ) {", "string = string . substring ( NUM_ , string . length ( ) - NUM_ ) ; }", "if ( string . ends With ( STR_ ) ) {", "string = string . substring ( NUM_ , string . length ( ) - NUM_ ) ; } }", "return string ; }"]}
{"ids": "66809", "code": ["public static void write Spec Info To Files ( Security Spec Model security Spec Model , String app ROOT DIR ) {", "write Info Flow Summary To File ( security Spec Model , Config . v ( ) . APP ROOT DIR ) ;", "write Info Flow Details To File ( security Spec Model , Config . v ( ) . APP ROOT DIR ) ;", "write Value Info To File ( security Spec Model , Config . v ( ) . APP ROOT DIR ) ;", "write Points To Info To File ( security Spec Model , Config . v ( ) . APP ROOT DIR ) ; }"]}
{"ids": "55313", "code": ["private void handle Command ( int id , String command , String params ) {", "String origin Command = command Id . get ( id ) ;", "if ( origin Command == null ) {", "origin Command = STR_ ; }", "handler . handle Command ( id , command , params , origin Command ) ;", "if ( command . equals ( STR_ ) ) {", "LOGGER . warning ( STR_ + params ) ; } }"]}
{"ids": "10595", "code": ["private void close All Dumps ( ) {", "Object [ ] options = { STR_ , STR_ } ;", "int select Value = J Option Pane . show Option Dialog ( null , STR_ , STR_ , J Option Pane . DEFAULT OPTION , J Option Pane . QUESTION MESSAGE , null , options , options [ NUM_ ] ) ;", "if ( select Value == NUM_ ) {", "top Nodes = new Vector ( ) ;", "reset Main Panel ( ) ; } }"]}
{"ids": "68556", "code": ["private void close Counter Data Input Stream ( ) throws Data Fallback Exception {", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ + counter File . get Name ( ) ) ;", "if ( d Input != null ) {", "try {", "d Input . close ( ) ; }", "catch ( IO Exception e ) {", "throw new Data Fallback Exception ( e . get Message ( ) ) ; }", "finally {", "d Input = null ; } } }"]}
{"ids": "33058", "code": ["private static String remove File Name Extension ( String file Name ) {", "if ( file Name . last Index Of ( STR_ ) == - NUM_ ) return file Name ;", "return file Name . substring ( NUM_ , file Name . last Index Of ( STR_ ) ) ; }"]}
{"ids": "24564", "code": ["public void clear ( ) {", "read = write = count = NUM_ ;", "Arrays . fill ( buffer , null ) ; }"]}
{"ids": "908", "code": ["private List < Entry > reduce With Douglas Peuker ( List < Entry > entries , double epsilon ) {", "if ( epsilon <= NUM_ || entries . size ( ) < NUM_ ) {", "return entries ; }", "keep [ NUM_ ] = true ;", "keep [ entries . size ( ) - NUM_ ] = true ;", "algorithm Douglas Peucker ( entries , epsilon , NUM_ , entries . size ( ) - NUM_ ) ;", "List < Entry > reduced Entries = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < entries . size ( ) ; i ++ ) {", "if ( keep [ i ] ) {", "Entry cur Entry = entries . get ( i ) ;", "reduced Entries . add ( new Entry ( cur Entry . get Val ( ) , cur Entry . get X Index ( ) ) ) ; } }", "return reduced Entries ; }"]}
{"ids": "78141", "code": ["static int hi Bit Pos ( long num ) {", "return NUM_ - Long . number Of Leading Zeros ( num ) ; }"]}
{"ids": "26824", "code": ["public Adaptive Grid Archive ( int capacity , Problem problem , int number Of Divisions ) {", "this . capacity = capacity ;", "this . problem = problem ;", "this . number Of Divisions = number Of Divisions ;", "minimum = new double [ problem . get Number Of Objectives ( ) ] ;", "maximum = new double [ problem . get Number Of Objectives ( ) ] ;", "density = new int [ ( int ) Math . pow ( number Of Divisions , problem . get Number Of Objectives ( ) ) ] ;", "adapt Grid ( ) ; }"]}
{"ids": "46604", "code": ["Begin Line Action ( String nm , boolean select ) {", "super ( nm ) ;", "this . select = select ; }"]}
{"ids": "6667", "code": ["private void adjust Window Size ( Container Wrapper parent ) {", "Bound Size w Bounds = lc . get Pack Width ( ) ;", "Bound Size h Bounds = lc . get Pack Height ( ) ;", "if ( w Bounds == null && h Bounds == null ) return ;", "Window win = ( ( Window ) Swing Utilities . get Ancestor Of Class ( Window . class , ( Component ) parent . get Component ( ) ) ) ;", "if ( win == null ) return ;", "Dimension pref Size = win . get Preferred Size ( ) ;", "int targ W = constrain ( check Parent ( win ) , win . get Width ( ) , pref Size . width , w Bounds ) ;", "int targ H = constrain ( check Parent ( win ) , win . get Height ( ) , pref Size . height , h Bounds ) ;", "int x = Math . round ( win . get X ( ) - ( ( targ W - win . get Width ( ) ) * ( NUM_ - lc . get Pack Width Align ( ) ) ) ) ;", "int y = Math . round ( win . get Y ( ) - ( ( targ H - win . get Height ( ) ) * ( NUM_ - lc . get Pack Height Align ( ) ) ) ) ;", "win . set Bounds ( x , y , targ W , targ H ) ; }"]}
{"ids": "79065", "code": ["@ Override public void write ( List < byte [ ] > value List ) throws IO Exception {", "if ( is First Time ) {", "init ( ) ;", "is First Time = false ; }", "for ( byte [ ] value : value List ) {", "one Dictionary Chunk List . add ( Byte Buffer . wrap ( value ) ) ;", "total Record Count ++ ; } }"]}
{"ids": "75568", "code": ["public void proceed ( ) {", "idle . set ( true ) ;", "subject . on Next ( null ) ; }"]}
{"ids": "13099", "code": ["private static boolean ns Equals ( String ns URI 1 , String ns URI 2 ) {", "if ( ns URI 1 == null ) {", "return ( ns URI 2 == null ) ; }", "else {", "return ns URI 1 . equals ( ns URI 2 ) ; } }"]}
{"ids": "69586", "code": ["private boolean link First ( Node < E > node ) {", "if ( count >= capacity ) return false ;", "Node < E > f = first ;", "node . next = f ;", "first = node ;", "if ( last == null ) last = node ;", "else f . prev = node ;", "++ count ;", "not Empty . signal ( ) ;", "return true ; }"]}
{"ids": "259", "code": ["public static void sleep ( long millis ) {", "if ( mock Sleep Queue == null ) {", "sleep Uninterruptibly ( millis , Time Unit . MILLISECONDS ) ; }", "else {", "try {", "boolean is Multi Pass = mock Sleep Queue . take ( ) ;", "roll Mock Clock Millis ( millis ) ;", "if ( is Multi Pass ) mock Sleep Queue . offer ( true ) ; }", "catch ( Interrupted Exception e ) { } } }"]}
{"ids": "69869", "code": ["public boolean is Handle ( String handle ) {", "return client Handle . equals ( handle ) ; }"]}
{"ids": "1630", "code": ["public static void is GTE ( String arg Name , long i , long min ) {", "if ( i < min ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , arg Name , min , i ) ) ; } }"]}
{"ids": "82850", "code": ["int adjust Text Offset ( int offset ) {", "max Text Offset = Math . max ( max Text Offset , offset ) ;", "return max Text Offset ; }"]}
{"ids": "68396", "code": ["public static Object value From Class Constant ( String key , Object default Value ) {", "Configuration conf = instance ( ) ;", "String val = value For ( key ) ;", "if ( val == null ) {", "return default Value ; }", "int idx = val . last Index Of ( STR_ ) ;", "String klassname ;", "String cnst ;", "try {", "klassname = val . substring ( NUM_ , idx ) ;", "cnst = val . substring ( idx + NUM_ ) ; }", "catch ( Index Out Of Bounds Exception e ) {", "conf . warning ( STR_ + key + STR_ + STR_ + val ) ;", "return default Value ; }", "Class klass ;", "try {", "klass = Class . for Name ( klassname ) ; }", "catch ( Class Not Found Exception e ) {", "conf . warning ( STR_ + key + STR_ + klassname ) ;", "return default Value ; }", "Object cnst Val ;", "try {", "Field fld = klass . get Declared Field ( cnst ) ;", "try {", "cnst Val = fld . get ( klass ) ; }", "catch ( Illegal Access Exception e ) {", "conf . warning ( STR_ + key + STR_ + klassname + STR_ + cnst ) ;", "return default Value ; } }", "catch ( No Such Field Exception e ) {", "conf . warning ( STR_ + key + STR_ + klassname ) ;", "return default Value ; }", "return cnst Val ; }"]}
{"ids": "49410", "code": ["public static boolean is Wifi Connected ( Context context ) {", "Connectivity Manager connectivity Manager = ( Connectivity Manager ) context . get System Service ( Context . CONNECTIVITY SERVICE ) ;", "Network Info network Info = connectivity Manager . get Active Network Info ( ) ;", "return network Info != null && network Info . get Type ( ) == Connectivity Manager . TYPE WIFI ; }"]}
{"ids": "84467", "code": ["public Str Builder insert ( final int index , final char value ) {", "validate Index ( index ) ;", "ensure Capacity ( size + NUM_ ) ;", "System . arraycopy ( buffer , index , buffer , index + NUM_ , size - index ) ;", "buffer [ index ] = value ;", "size ++ ;", "return this ; }"]}
{"ids": "7136", "code": ["public List < byte [ ] > try Decode ( final String target Token ) {", "final Byte Buffer payload Buf = extract Valid Payload Fields ( target Token ) ;", "if ( payload Buf == null ) {", "return null ; }", "final List < byte [ ] > fields = new Array List < > ( ) ;", "try {", "byte [ ] field = null ;", "while ( ( field = try Read Payload Next Field ( payload Buf ) ) . length > NUM_ ) {", "fields . add ( field ) ;", "if ( fields . size ( ) > MAX FIELD SIZE ) {", "return null ; } }", "return fields ; }", "catch ( final Buffer Underflow Exception e ) {", "return null ; } }"]}
{"ids": "56790", "code": ["@ Namespace Permission ( fields = STR_ , permissions = Namespace Permission Enum . WRITE ) @ Override public Business Object Definition create Business Object Definition ( Business Object Definition Create Request request ) {", "validate Business Object Definition Create Request ( request ) ;", "Namespace Entity namespace Entity = namespace Dao Helper . get Namespace Entity ( request . get Namespace ( ) ) ;", "Data Provider Entity data Provider Entity = data Provider Dao Helper . get Data Provider Entity ( request . get Data Provider Name ( ) ) ;", "Business Object Definition Key business Object Definition Key = new Business Object Definition Key ( request . get Namespace ( ) , request . get Business Object Definition Name ( ) ) ;", "Business Object Definition Entity business Object Definition Entity = business Object Definition Dao . get Business Object Definition By Key ( business Object Definition Key ) ;", "if ( business Object Definition Entity != null ) {", "throw new Already Exists Exception ( String . format ( STR_ , business Object Definition Key . get Business Object Definition Name ( ) , business Object Definition Key . get Namespace ( ) ) ) ; }", "business Object Definition Entity = create Business Object Definition Entity ( request , namespace Entity , data Provider Entity ) ;", "return create Business Object Definition From Entity ( business Object Definition Entity ) ; }"]}
{"ids": "21086", "code": ["private void migrate Block Volumes ( ) {", "log . info ( STR_ ) ;", "Db Client db Client = get Db Client ( ) ;", "List < URI > volume UR Is = db Client . query By Type ( Volume . class , false ) ;", "Iterator < Volume > volumes = db Client . query Iterative Objects ( Volume . class , volume UR Is , true ) ;", "List < Block Object > block Objects = new Array List < Block Object > ( ) ;", "while ( volumes . has Next ( ) ) {", "block Objects . add ( volumes . next ( ) ) ; }", "migrate Block Objects ( block Objects ) ; }"]}
{"ids": "81980", "code": ["public static String decode ( String s , String enc , boolean plus To Space ) {", "boolean modified = false ;", "if ( enc == null || enc . length ( ) == NUM_ ) {", "enc = STR_ ; }", "int num Chars = s . length ( ) ;", "String Builder sb = new String Builder ( num Chars > NUM_ ? num Chars / NUM_ : num Chars ) ;", "int i = NUM_ ;", "char c ;", "byte [ ] bytes = null ;", "while ( i < num Chars ) {", "c = s . char At ( i ) ;", "switch ( c ) {", "case STR_ :", "if ( plus To Space ) {", "sb . append ( STR_ ) ; }", "else {", "sb . append ( STR_ ) ; }", "i ++ ;", "modified = true ;", "break ;", "case STR_ :", "try {", "if ( bytes == null ) {", "bytes = new byte [ ( num Chars - i ) / NUM_ ] ; }", "int pos = NUM_ ;", "while ( ( ( i + NUM_ ) < num Chars ) && ( c == STR_ ) ) {", "bytes [ pos ++ ] = ( byte ) Integer . parse Int ( s . substring ( i + NUM_ , i + NUM_ ) , NUM_ ) ;", "i += NUM_ ;", "if ( i < num Chars ) {", "c = s . char At ( i ) ; } }", "if ( ( i < num Chars ) && ( c == STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ + s ) ; }", "try {", "sb . append ( new String ( bytes , NUM_ , pos , enc ) ) ; }", "catch ( Unsupported Encoding Exception e ) {", "throw new Runtime Exception ( e . to String ( ) ) ; } }", "catch ( Number Format Exception e ) {", "throw new Illegal Argument Exception ( STR_ + s ) ; }", "modified = true ;", "break ;", "default :", "sb . append ( c ) ;", "i ++ ;", "break ; } }", "if ( modified ) {", "return sb . to String ( ) ; }", "return s ; }"]}
{"ids": "16566", "code": ["@ Override public String encode ( ) {", "return value == int Value ( ) ? Integer . to String ( int Value ( ) ) + unit . encode ( ) : Double . to String ( value ) + unit . encode ( ) ; }"]}
{"ids": "23174", "code": ["public Host Name Parser ( Lexer Core lexer ) {", "this . lexer = lexer ;", "lexer . select Lexer ( STR_ ) ;", "strip Address Scope Zones = Boolean . get Boolean ( STR_ ) ; }"]}
{"ids": "12669", "code": ["private void load Text ( Input Stream is ) {", "Buffered Reader reader ;", "String line ;", "if ( is == null ) {", "throw new Error ( STR_ ) ; }", "reader = new Buffered Reader ( new Input Stream Reader ( is ) ) ;", "try {", "line = reader . read Line ( ) ;", "line Count ++ ;", "while ( line != null ) {", "if ( ! line . starts With ( STR_ ) ) {", "parse And Add ( line , reader ) ; }", "line = reader . read Line ( ) ; }", "reader . close ( ) ; }", "catch ( IO Exception e ) {", "throw new Error ( e . get Message ( ) + STR_ + line Count ) ; }", "finally { } }"]}
{"ids": "7035", "code": ["public void add Email Adress ( String an Email Address ) {", "if ( m Emails . index Of ( an Email Address ) < NUM_ ) {", "m Emails . add ( an Email Address ) ; } }"]}
{"ids": "75624", "code": ["public static Instances load Dataset ( String options [ ] , char T ) throws Exception {", "Instances D = null ;", "String filename = Utils . get Option ( T , options ) ;", "if ( filename == null || filename . is Empty ( ) ) throw new Exception ( STR_ ) ;", "File file = new File ( filename ) ;", "if ( ! file . exists ( ) ) throw new Exception ( STR_ + filename ) ;", "if ( file . is Directory ( ) ) throw new Exception ( STR_ + filename + STR_ ) ;", "try {", "Data Source source = new Data Source ( filename ) ;", "D = source . get Data Set ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Exception ( STR_ + filename + STR_ ) ; }", "return D ; }"]}
{"ids": "41844", "code": ["private boolean is Typed Time Fully Legal ( ) {", "if ( m Is 24 Hour Mode ) {", "int [ ] values = get Entered Time ( null ) ;", "return ( values [ NUM_ ] >= NUM_ && values [ NUM_ ] >= NUM_ && values [ NUM_ ] < NUM_ ) ; }", "else {", "return ( m Typed Times . contains ( get Am Or Pm Key Code ( AM ) ) || m Typed Times . contains ( get Am Or Pm Key Code ( PM ) ) ) ; } }"]}
{"ids": "36098", "code": ["@ Override public void operate ( Population pop ) throws Exception {", "List < Individual > new Individuals = new Linked List < Individual > ( ) ;", "for ( int i = NUM_ ; i < pop . get Number Of Individuals ( ) ; i ++ ) {", "List < Individual > individuals = operate ( pop . get ( i ) ) ;", "new Individuals . add All ( individuals ) ; }", "pop . clear ( ) ;", "pop . add All Individuals ( new Individuals ) ; }"]}
{"ids": "26049", "code": ["public int size ( ) {", "return encoded Names . size ( ) ; }"]}
{"ids": "199", "code": ["public static byte [ ] to Seed ( List < String > words , String passphrase ) {", "return to Seed ( words , passphrase , Version . V 0 6 ) ; }"]}
{"ids": "42327", "code": ["private Array List < Interval > find Or Create Interval Set ( Register r ) {", "Array List < Interval > v = map . get ( r ) ;", "if ( v == null ) {", "v = new Array List < Interval > ( ) ;", "map . put ( r , v ) ; }", "return v ; }"]}
{"ids": "59677", "code": ["protected void remove Columns ( Collection < String > remove Column Names , String table Name ) {", "if ( remove Column Names != null && ! remove Column Names . is Empty ( ) ) {", "execute ( get Remove Column SQ Ls ( remove Column Names , table Name ) , m Db ) ; } }"]}
{"ids": "38121", "code": ["@ Override public double [ ] [ ] predict Intervals ( double conf ) {", "update Boundaries And Or Weights ( ) ;", "double val = Statistics . normal Inverse ( NUM_ - ( NUM_ - conf ) / NUM_ ) ;", "double min = m TM . first Key ( ) - val * m Width ;", "double max = m TM . last Key ( ) + val * m Width ;", "double delta = ( max - min ) / m Num Intervals ;", "double [ ] probabilities = new double [ m Num Intervals ] ;", "double left Val = Math . exp ( log Density ( min ) ) ;", "for ( int i = NUM_ ; i < m Num Intervals ; i ++ ) {", "double right Val = Math . exp ( log Density ( min + ( i + NUM_ ) * delta ) ) ;", "probabilities [ i ] = NUM_ * ( left Val + right Val ) * delta ;", "left Val = right Val ; }", "int [ ] sorted Indices = Utils . sort ( probabilities ) ;", "double sum = NUM_ ;", "boolean [ ] to Use = new boolean [ probabilities . length ] ;", "int k = NUM_ ;", "while ( ( sum < conf ) && ( k < to Use . length ) ) {", "to Use [ sorted Indices [ to Use . length - ( k + NUM_ ) ] ] = true ;", "sum += probabilities [ sorted Indices [ to Use . length - ( k + NUM_ ) ] ] ;", "k ++ ; }", "probabilities = null ;", "Array List < double [ ] > intervals = new Array List < double [ ] > ( ) ;", "double [ ] interval = null ;", "boolean have Started Interval = false ;", "for ( int i = NUM_ ; i < m Num Intervals ; i ++ ) {", "if ( to Use [ i ] ) {", "if ( have Started Interval == false ) {", "have Started Interval = true ;", "interval = new double [ NUM_ ] ;", "interval [ NUM_ ] = min + i * delta ; }", "interval [ NUM_ ] = min + ( i + NUM_ ) * delta ; }", "else {", "if ( have Started Interval ) {", "have Started Interval = false ;", "intervals . add ( interval ) ; } } }", "if ( have Started Interval ) {", "intervals . add ( interval ) ; }", "return intervals . to Array ( new double [ NUM_ ] [ NUM_ ] ) ; }"]}
{"ids": "43452", "code": ["public void register Atmosphere ( I Atmosphere atmosphere ) {", "atmosphere Registration . put ( atmosphere . get Unlocalized Name ( ) , atmosphere ) ;", "atmosphere List . add ( atmosphere ) ; }"]}
{"ids": "6510", "code": ["public JX Search Field ( ) {", "this ( STR_ ) ; }"]}
{"ids": "66505", "code": ["private static void reply Login 2 Role ( body body , Mobile Session Ctx wsc , String role Id ) {", "String form = null ;", "Login login = new Login ( wsc . ctx ) ;", "Key Name Pair [ ] clients = login . get Clients ( new Key Name Pair ( Integer . parse Int ( role Id ) , role Id ) ) ;", "String Buffer script = new String Buffer ( STR_ ) ;", "for ( int i = NUM_ ; i < clients . length ; i ++ ) {", "if ( i > NUM_ ) script . append ( STR_ ) ;", "Key Name Pair p = clients [ i ] ;", "script . append ( STR_ ) ;", "script . append ( p . get Name ( ) ) ;", "script . append ( STR_ ) ;", "script . append ( p . get Key ( ) ) ;", "script . append ( STR_ ) ; }", "script . append ( STR_ ) ; }"]}
{"ids": "66368", "code": ["public final void run ( ) {", "if ( m start == NUM_ ) m start = System . current Time Millis ( ) ;", "m can Continue = true ;", "while ( m can Continue ) {", "if ( is Interrupted ( ) ) return ;", "m last Start = System . current Time Millis ( ) ;", "m working = true ;", "try {", "m poll Count ++ ;", "if ( can Do Work ( ) ) {", "m can Continue = do Work ( ) ;", "m count ++ ; } }", "catch ( Exception e ) {", "log . log ( Level . SEVERE , STR_ , e ) ; }", "m working = false ;", "long end = System . current Time Millis ( ) ;", "m time += ( end - m last Start ) ;", "if ( is Interrupted ( ) ) return ;", "try {", "log . fine ( STR_ + m sleep Seconds ) ;", "sleep ( m sleep Seconds * NUM_ ) ; }", "catch ( Interrupted Exception e 1 ) {", "log . warning ( STR_ + e 1 . get Localized Message ( ) ) ;", "return ; } } }"]}
{"ids": "77597", "code": ["public static Solr Document assert Search One Doc ( Solr Params p ) throws Exception {", "Solr Document List docs = assert Search ( p ) ;", "assert Equals ( STR_ + p . to String ( ) + STR_ + docs . to String ( ) , NUM_ , docs . get Num Found ( ) ) ;", "assert Equals ( STR_ + p . to String ( ) + STR_ + docs . to String ( ) , NUM_ , docs . size ( ) ) ;", "return docs . get ( NUM_ ) ; }"]}
{"ids": "77626", "code": ["private static Value Source build Source Tree ( Index Schema schema , String expression , int source Type ) {", "int expression Type = get Source Type ( expression ) ;", "if ( source Type != FIELD TYPE && expression Type != FIELD TYPE && expression Type != FILTER TYPE && expression Type != source Type ) {", "return null ; }", "switch ( expression Type ) {", "case NUMBER TYPE :", "return build Numeric Source ( schema , expression ) ;", "case DATE TYPE :", "return build Date Source ( schema , expression ) ;", "case STRING TYPE :", "return build String Source ( schema , expression ) ;", "case FIELD TYPE :", "return build Field Source ( schema , expression , source Type ) ;", "case FILTER TYPE :", "return build Filter Source ( schema , expression . substring ( expression . index Of ( STR_ ) + NUM_ , expression . last Index Of ( STR_ ) ) , source Type ) ;", "default :", "throw new Solr Exception ( Error Code . BAD REQUEST , expression + STR_ ) ; } }"]}
{"ids": "28133", "code": ["public Value predecessor ( ) {", "return predecessor . get ( ) ; }"]}
{"ids": "84779", "code": ["public static double log Pdf ( double x , double m , double sd ) {", "double a = NUM_ / ( Math . sqrt ( NUM_ * Math . PI ) * sd ) ;", "double b = - ( x - m ) * ( x - m ) / ( NUM_ * sd * sd ) ;", "return Math . log ( a ) + b ; }"]}
{"ids": "39166", "code": ["public int value Sparse Int ( int index Of Index ) throws Exception {", "return Integer . parse Int ( actual Value ( index Of Index ) ) ; }"]}
{"ids": "24540", "code": ["public static int scan ( long v ) {", "return NUM_ - Long . number Of Leading Zeros ( v ) ; }"]}
{"ids": "1155", "code": ["public static boolean is All Upper Case ( String str ) {", "if ( str == null ) return false ;", "boolean has Letters = false ;", "char c ;", "for ( int i = str . length ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "c = str . char At ( i ) ;", "if ( Character . is Letter ( c ) ) {", "if ( ! Character . is Upper Case ( c ) ) return false ;", "has Letters = true ; } }", "return has Letters ; }"]}
{"ids": "48961", "code": ["public static Class Path create Class Path ( String class Path String , String sys Class Path String , String ext Dirs String ) {", "Path path = new Path ( ) ;", "if ( sys Class Path String == null ) {", "sys Class Path String = System . get Property ( STR_ ) ; }", "if ( sys Class Path String != null ) {", "path . add Files ( sys Class Path String ) ; }", "path . expand Jar Class Paths ( true ) ;", "if ( ext Dirs String == null ) {", "ext Dirs String = System . get Property ( STR_ ) ; }", "if ( ext Dirs String != null ) {", "path . add Directories ( ext Dirs String ) ; }", "path . empty Path Default ( STR_ ) ;", "if ( class Path String == null ) {", "class Path String = System . get Property ( STR_ ) ;", "if ( class Path String == null ) {", "class Path String = STR_ ; } }", "path . add Files ( class Path String ) ;", "return new Class Path ( path . to Array ( new String [ path . size ( ) ] ) ) ; }"]}
{"ids": "2177", "code": ["protected Abstract Spined Buffer ( int initial Capacity ) {", "if ( initial Capacity < NUM_ ) throw new Illegal Argument Exception ( STR_ + initial Capacity ) ;", "this . initial Chunk Power = Math . max ( MIN CHUNK POWER , Integer . SIZE - Integer . number Of Leading Zeros ( initial Capacity - NUM_ ) ) ; }"]}
{"ids": "26791", "code": ["public static void UF 9 ( double [ ] x , double [ ] f , int nx ) {", "int count 1 = NUM_ ;", "int count 2 = NUM_ ;", "int count 3 = NUM_ ;", "double sum 1 = NUM_ ;", "double sum 2 = NUM_ ;", "double sum 3 = NUM_ ;", "double yj ;", "double E = NUM_ ;", "for ( int j = NUM_ ; j <= nx ; j ++ ) {", "yj = x [ j - NUM_ ] - NUM_ * x [ NUM_ ] * Math . sin ( NUM_ * PI * x [ NUM_ ] + j * PI / nx ) ;", "if ( j % NUM_ == NUM_ ) {", "sum 1 += yj * yj ;", "count 1 ++ ; }", "else if ( j % NUM_ == NUM_ ) {", "sum 2 += yj * yj ;", "count 2 ++ ; }", "else {", "sum 3 += yj * yj ;", "count 3 ++ ; } }", "yj = ( NUM_ + E ) * ( NUM_ - NUM_ * ( NUM_ * x [ NUM_ ] - NUM_ ) * ( NUM_ * x [ NUM_ ] - NUM_ ) ) ;", "if ( yj < NUM_ ) {", "yj = NUM_ ; }", "f [ NUM_ ] = NUM_ * ( yj + NUM_ * x [ NUM_ ] ) * x [ NUM_ ] + NUM_ * sum 1 / ( double ) count 1 ;", "f [ NUM_ ] = NUM_ * ( yj - NUM_ * x [ NUM_ ] + NUM_ ) * x [ NUM_ ] + NUM_ * sum 2 / ( double ) count 2 ;", "f [ NUM_ ] = NUM_ - x [ NUM_ ] + NUM_ * sum 3 / ( double ) count 3 ; }"]}
{"ids": "28729", "code": ["private void cleaning Text ( ) {", "int latin Count = NUM_ , non Latin Count = NUM_ ;", "for ( int i = NUM_ ; i < text . length ( ) ; ++ i ) {", "char c = text . char At ( i ) ;", "if ( c <= STR_ && c >= STR_ ) {", "++ latin Count ; }", "else if ( c >= STR_ && Unicode Block . of ( c ) != Unicode Block . LATIN EXTENDED ADDITIONAL ) {", "++ non Latin Count ; } }", "if ( latin Count * NUM_ < non Latin Count ) {", "String Buffer text Without Latin = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < text . length ( ) ; ++ i ) {", "char c = text . char At ( i ) ;", "if ( c > STR_ || c < STR_ ) text Without Latin . append ( c ) ; }", "text = text Without Latin ; } }"]}
{"ids": "19671", "code": ["public void begin Apply Interval ( ) {", "interval Start Millis = System . current Time Millis ( ) ;", "end Millis = interval Start Millis ;", "state = Task State . apply ; }"]}
{"ids": "31977", "code": ["void handshake ( ) throws Ignite Checked Exception , SSL Exception {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + handshake Status + STR_ + ses + STR_ ) ;", "lock ( ) ;", "try {", "boolean loop = true ;", "while ( loop ) {", "switch ( handshake Status ) {", "case NOT HANDSHAKING :", "case FINISHED : {", "SSL Session ssl Ses = ssl Engine . get Session ( ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + ssl Ses . get Protocol ( ) + STR_ + ssl Ses . get Cipher Suite ( ) + STR_ + ses + STR_ ) ;", "handshake Finished = true ;", "if ( ! init Handshake Complete ) {", "init Handshake Complete = true ;", "Grid Nio Future Impl < ? > fut = ses . remove Meta ( HANDSHAKE FUT META KEY ) ;", "if ( fut != null ) fut . on Done ( ) ;", "parent . proceed Session Opened ( ses ) ; }", "loop = false ;", "break ; }", "case NEED TASK : {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + ses ) ;", "handshake Status = run Tasks ( ) ;", "break ; }", "case NEED UNWRAP : {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + ses ) ;", "Status status = unwrap Handshake ( ) ;", "if ( status == BUFFER UNDERFLOW && handshake Status != FINISHED || ssl Engine . is Inbound Done ( ) ) loop = false ;", "break ; }", "case NEED WRAP : {", "if ( out Net Buf . has Remaining ( ) ) U . warn ( log , STR_ + ses ) ;", "out Net Buf . clear ( ) ;", "SSL Engine Result res = ssl Engine . wrap ( handshake Buf , out Net Buf ) ;", "out Net Buf . flip ( ) ;", "handshake Status = res . get Handshake Status ( ) ;", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + res . get Status ( ) + STR_ + handshake Status + STR_ + ses + STR_ ) ;", "write Net Buffer ( ) ;", "break ; }", "default : {", "throw new Illegal State Exception ( STR_ + handshake Status + STR_ + ses + STR_ ) ; } } } }", "finally {", "unlock ( ) ; }", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + handshake Status + STR_ + ses + STR_ ) ; }"]}
{"ids": "31691", "code": ["public void send Messages ( List < Producer Record < String , String > > records ) {", "Producer < String , String > producer = new Kafka Producer < > ( get Producer Config ( ) ) ;", "for ( Producer Record < String , String > rec : records ) producer . send ( rec ) ;", "producer . flush ( ) ;", "producer . close ( ) ; }"]}
{"ids": "7981", "code": ["private static J Free Chart create Chart ( ) {", "XY Series series 1 = new XY Series ( STR_ ) ;", "series 1 . add ( NUM_ , NUM_ ) ;", "series 1 . add ( NUM_ , NUM_ ) ;", "series 1 . add ( NUM_ , NUM_ ) ;", "XY Dataset dataset = new XY Series Collection ( series 1 ) ;", "return Chart Factory . create XY Step Chart ( STR_ , STR_ , STR_ , dataset , Plot Orientation . VERTICAL , true , true , true ) ; }"]}
{"ids": "70529", "code": ["public void append To Nal Unit ( byte [ ] data , int offset , int limit ) {", "if ( ! is Filling ) {", "return ; }", "int read Length = limit - offset ;", "if ( nal Data . length < nal Length + read Length ) {", "nal Data = Arrays . copy Of ( nal Data , ( nal Length + read Length ) * NUM_ ) ; }", "System . arraycopy ( data , offset , nal Data , nal Length , read Length ) ;", "nal Length += read Length ; }"]}
{"ids": "10004", "code": ["public boolean is Number Geographical ( Phone Number phone Number ) {", "return is Number Geographical ( get Number Type ( phone Number ) , phone Number . get Country Code ( ) ) ; }"]}
{"ids": "38251", "code": ["protected int weighted Distribution ( int [ ] weights ) {", "int sum = NUM_ ;", "for ( int weight : weights ) {", "sum += weight ; }", "int val = ( int ) Math . floor ( m random . next Double ( ) * sum ) ;", "for ( int i = NUM_ ; i < weights . length ; i ++ ) {", "val -= weights [ i ] ;", "if ( val < NUM_ ) {", "return i ; } }", "return - NUM_ ; }"]}
{"ids": "30656", "code": ["public static boolean is Assignable ( Class target Type , Class value Type ) {", "Assert . not Null ( target Type , STR_ ) ;", "Assert . not Null ( value Type , STR_ ) ;", "return ( target Type . is Assignable From ( value Type ) || target Type . equals ( primitive Wrapper Type Map . get ( value Type ) ) ) ; }"]}
{"ids": "50776", "code": ["public Dialog Check Box add Dialog Check Box ( String description , String label Text , boolean initial State ) {", "String [ ] args = new String [ NUM_ ] ;", "args [ NUM_ ] = STR_ ;", "args [ NUM_ ] = description ;", "args [ NUM_ ] = label Text ;", "args [ NUM_ ] = Boolean . to String ( initial State ) ;", "Dialog Check Box dcb = new Dialog Check Box ( ) ;", "dcb . set Args ( args ) ;", "components . add ( dcb ) ;", "main Panel . add ( dcb ) ;", "return dcb ; }"]}
{"ids": "24319", "code": ["private void perform Restore ( File member Dir , File backup Dir ) throws Exception {", "List < File > if Files = File Util . find All ( member Dir , STR_ ) ;", "for ( File file : if Files ) {", "file . delete ( ) ; }", "List < File > oplogs = File Util . find All ( member Dir , OPLOG REGEX ) ;", "for ( File file : oplogs ) {", "file . delete ( ) ; }", "File restore Script = new File ( backup Dir , STR_ ) ;", "if ( ! restore Script . exists ( ) ) {", "restore Script = new File ( backup Dir , STR_ ) ; }", "assert True ( restore Script . exists ( ) ) ;", "assert Equals ( NUM_ , execute ( restore Script . get Absolute Path ( ) ) ) ; }"]}
{"ids": "64038", "code": ["public static boolean download Url To Stream ( String url String , Output Stream output Stream ) {", "disable Connection Reuse If Necessary ( ) ;", "Http URL Connection url Connection = null ;", "Buffered Output Stream out = null ;", "Buffered Input Stream in = null ;", "try {", "final URL url = new URL ( url String ) ;", "url Connection = ( Http URL Connection ) url . open Connection ( ) ;", "in = new Buffered Input Stream ( url Connection . get Input Stream ( ) , IO BUFFER SIZE ) ;", "out = new Buffered Output Stream ( output Stream , IO BUFFER SIZE ) ;", "int b ;", "while ( ( b = in . read ( ) ) != - NUM_ ) {", "out . write ( b ) ; }", "return true ; }", "catch ( final IO Exception e ) {", "Log . e ( TAG , STR_ + e ) ; }", "finally {", "if ( url Connection != null ) {", "url Connection . disconnect ( ) ; }", "try {", "if ( out != null ) {", "out . close ( ) ; }", "if ( in != null ) {", "in . close ( ) ; } }", "catch ( final IO Exception e ) { } }", "return false ; }"]}
{"ids": "69883", "code": ["@ Override public void transaction Commited ( final long commit Time ) {", "if ( listeners . is Empty ( ) ) {", "records . reset ( ) ; }", "else {", "records . flush ( ) ;", "listeners . for Each ( null ) ; } }"]}
{"ids": "66052", "code": ["public static M Warehouse Price [ ] find ( MB Partner b Partner , boolean Is SO Trx , Timestamp valid , int M Warehouse ID , String Value , String Name , String UPC , String SKU , String trx Name ) {", "int M Price List ID = Is SO Trx ? b Partner . get M Price List ID ( ) : b Partner . get PO Price List ID ( ) ;", "M Price List pl = null ;", "if ( M Price List ID == NUM_ ) pl = M Price List . get Default ( b Partner . get Ctx ( ) , Is SO Trx ) ;", "else pl = M Price List . get ( b Partner . get Ctx ( ) , M Price List ID , trx Name ) ;", "if ( pl == null ) {", "s log . severe ( STR_ ) ;", "return null ; }", "M Price List Version plv = pl . get Price List Version ( valid ) ;", "if ( plv == null ) {", "s log . severe ( STR_ + pl . get M Price List ID ( ) ) ;", "return null ; }", "return find ( b Partner . get Ctx ( ) , plv . get M Price List Version ID ( ) , M Warehouse ID , Value , Name , UPC , SKU , trx Name ) ; }"]}
{"ids": "83662", "code": ["private void read Object ( Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "COUNTER = new Atomic Integer ( ) ;", "serializers = new Hash Map < Class , Serializer Wrapper > ( ) ;", "serializers Array = new Serializer [ NUM_ ] ;", "deserialize ( in , this ) ; }"]}
{"ids": "33657", "code": ["public static Date translate Time ( Date date , Time Zone src , Time Zone dest ) {", "Date new Date = new Date ( ) ;", "int offset = ( dest . get Offset ( date . get Time ( ) ) - src . get Offset ( date . get Time ( ) ) ) ;", "new Date . set Time ( date . get Time ( ) - offset ) ;", "return new Date ; }"]}
{"ids": "37239", "code": ["private void show Popup Menu ( final Mouse Event event ) {", "final C Traces Table Filter Menu menu = new C Traces Table Filter Menu ( get Filter Field ( ) ) ;", "menu . show ( event . get Component ( ) , event . get X ( ) , event . get Y ( ) ) ; }"]}
{"ids": "21930", "code": ["private Task Resource Rep finish Deactivate Task ( Block Consistency Group consistency Group , String task ) {", "URI id = consistency Group . get Id ( ) ;", "Operation op = new Operation ( ) ;", "op . ready ( ) ;", "op . set Progress ( NUM_ ) ;", "op . set Resource Type ( Resource Operation Type Enum . DELETE CONSISTENCY GROUP ) ;", "Operation status = db Client . create Task Op Status ( Block Consistency Group . class , id , task , op ) ;", "return to Task ( consistency Group , task , status ) ; }"]}
{"ids": "8579", "code": ["public static Severity parse Severity ( String str ) throws Illegal Severity Exception {", "if ( str . equals Ignore Case ( Messages . ERROR ) ) {", "return ERROR ; }", "else if ( str . equals Ignore Case ( Messages . WARNING ) ) {", "return WARNING ; }", "else {", "throw new Illegal Severity Exception ( ) ; } }"]}
{"ids": "42790", "code": ["private void restore From Keypress ( final Key Event key Event , final int key Number ) {", "if ( key Event . is Alt Down ( ) ) {", "final int array Index = ( key Number > NUM_ ? key Number : MAX RECENT MESSAGES ) - NUM_ ;", "if ( array Index < recent Messages . size ( ) ) {", "display Message ( recent Messages . get ( array Index ) ) ; }", "key Event . consume ( ) ; } }"]}
{"ids": "41972", "code": ["public void remove Scrolling Listener ( On Wheel Scroll Listener listener ) {", "scrolling Listeners . remove ( listener ) ; }"]}
{"ids": "63106", "code": ["public void fire ( Session session , int type , boolean before Action ) {", "if ( row Based || before != before Action || ( type Mask & type ) == NUM_ ) {", "return ; }", "load ( ) ;", "Connection c 2 = session . create Connection ( false ) ;", "boolean old = false ;", "if ( type != Trigger . SELECT ) {", "old = session . set Commit Or Rollback Disabled ( true ) ; }", "Value identity = session . get Last Scope Identity ( ) ;", "try {", "trigger Callback . fire ( c 2 , null , null ) ; }", "catch ( Throwable e ) {", "throw Db Exception . get ( Error Code . ERROR EXECUTING TRIGGER 3 , e , get Name ( ) , trigger Class Name != null ? trigger Class Name : STR_ , e . to String ( ) ) ; }", "finally {", "if ( session . get Last Trigger Identity ( ) != null ) {", "session . set Last Scope Identity ( session . get Last Trigger Identity ( ) ) ;", "session . set Last Trigger Identity ( null ) ; }", "else {", "session . set Last Scope Identity ( identity ) ; }", "if ( type != Trigger . SELECT ) {", "session . set Commit Or Rollback Disabled ( old ) ; } } }"]}
{"ids": "43413", "code": ["public Mqtt Device mqtt Device ( ) {", "return mqtt Device ; }"]}
{"ids": "74298", "code": ["public boolean skips Location ( String location Id ) {", "return skip Locations List . contains ( location Id ) ; }"]}
{"ids": "55317", "code": ["private List < Race > parse Races ( String json ) {", "List < Race > result = new Array List < > ( ) ;", "if ( json == null ) {", "return null ; }", "JSON Parser parser = new JSON Parser ( ) ;", "try {", "JSON Object root = ( JSON Object ) parser . parse ( json . trim ( ) ) ;", "JSON Array races = ( JSON Array ) root . get ( STR_ ) ;", "for ( Object o : races ) {", "if ( o instanceof JSON Object ) {", "Race race = parse Race ( ( JSON Object ) o ) ;", "if ( race != null ) {", "result . add ( race ) ; } } } }", "catch ( Parse Exception | Class Cast Exception | Null Pointer Exception ex ) {", "LOGGER . warning ( STR_ + ex ) ;", "return null ; }", "return result ; }"]}
{"ids": "56943", "code": ["public boolean is Connected ( short node Id ) {", "Node Connection nc = connections . get ( node Id ) ;", "return ( nc != null && nc . state == Node Connection State . CONNECTED ) ; }"]}
{"ids": "24222", "code": ["public Object Name manage System Member ( Distributed Member distributed Member ) throws Admin Exception , Malformed Object Name Exception {", "try {", "System Member member = lookup System Member ( distributed Member ) ;", "if ( member == null ) return null ;", "System Member Jmx Impl jmx = ( System Member Jmx Impl ) member ;", "Object Name oname = new Object Name ( jmx . get M Bean Name ( ) ) ;", "return oname ; }", "catch ( Admin Exception e ) {", "logger . warn ( e . get Message ( ) , e ) ;", "throw e ; }", "catch ( Runtime Exception e ) {", "logger . warn ( e . get Message ( ) , e ) ;", "throw e ; }", "catch ( Virtual Machine Error err ) {", "System Failure . initiate Failure ( err ) ;", "throw err ; }", "catch ( Error e ) {", "System Failure . check Failure ( ) ;", "logger . error ( e . get Message ( ) , e ) ;", "throw e ; } }"]}
{"ids": "44521", "code": ["private void connect ( ) throws IO Exception {", "JMX Service URL jmx Url = new JMX Service URL ( String . format ( fmt Url , host , port ) ) ;", "jmxc = JMX Connector Factory . connect ( jmx Url , null ) ;", "M Bean Server Connection mbean Server Conn = jmxc . get M Bean Server Connection ( ) ;", "try {", "Object Name name = new Object Name ( DOMAINLIST OBJECT NAME ) ;", "domain List Proxy = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Domain List Management M Bean . class , true ) ;", "name = new Object Name ( VIRTUALUSERTABLE OBJECT NAME ) ;", "virtual User Table Proxy = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Recipient Rewrite Table Management M Bean . class , true ) ;", "name = new Object Name ( USERSREPOSITORY OBJECT NAME ) ;", "users Repository Proxy = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Users Repository Management M Bean . class , true ) ;", "name = new Object Name ( MAILBOXCOPIER OBJECT NAME ) ;", "mailbox Copier Management = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Mailbox Copier Management M Bean . class , true ) ;", "name = new Object Name ( MAILBOXMANAGER OBJECT NAME ) ;", "mailbox Manager Management = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Mailbox Manager Management M Bean . class , true ) ;", "name = new Object Name ( QUOTAMANAGER OBJECT NAME ) ;", "quota Management = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Quota Management M Bean . class , true ) ;", "name = new Object Name ( REINDEXER OBJECT NAME ) ;", "re Indexer Management = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Re Indexer Management M Bean . class , true ) ;", "name = new Object Name ( SIEVEMANAGER OBJECT NAME ) ;", "sieve Repository Management = M Bean Server Invocation Handler . new Proxy Instance ( mbean Server Conn , name , Sieve Repository Management M Bean . class , true ) ; }", "catch ( Malformed Object Name Exception e ) {", "throw new Runtime Exception ( STR_ , e ) ; } }"]}
{"ids": "60187", "code": ["public static void show ( @ Not Null final J Component data Component , @ Nullable final J Component action Listener Component , @ Not Null final String title , @ Not Null final Project project , @ Nullable final Collection < Runnable > close Listeners , @ Not Null final An Action ... custom Actions ) {", "final Tool Window Api api = new Tool Window Api ( project , title ) ;", "final Collection < Runnable > close Listeners To Add = new Array List < Runnable > ( Collections . singleton ( new My Tool Window Closer ( api ) ) ) ;", "if ( close Listeners != null ) {", "close Listeners To Add . add All ( close Listeners ) ; }", "api . add ( Panel With Actions . wrap ( data Component , close Listeners To Add , action Listener Component , custom Actions ) ) ; }"]}
{"ids": "81612", "code": ["public Intent Builder add Email Cc ( String address ) {", "if ( m Cc Addresses == null ) {", "m Cc Addresses = new Array List < String > ( ) ; }", "m Cc Addresses . add ( address ) ;", "return this ; }"]}
{"ids": "28732", "code": ["private Array List < String > extract N Grams ( ) {", "Array List < String > list = new Array List < String > ( ) ;", "N Gram ngram = new N Gram ( ) ;", "for ( int i = NUM_ ; i < text . length ( ) ; ++ i ) {", "ngram . add Char ( text . char At ( i ) ) ;", "for ( int n = NUM_ ; n <= N Gram . N GRAM ; ++ n ) {", "String w = ngram . get ( n ) ;", "if ( w != null && word Lang Prob Map . contains Key ( w ) ) list . add ( w ) ; } }", "return list ; }"]}
{"ids": "8742", "code": ["protected void update Keys ( ) {", "Button Info [ ] buttons = Navigation Buttons . load Button Map ( m Context ) ;", "int visible Count = NUM_ ;", "for ( int i = NUM_ ; i < buttons . length ; i ++ ) {", "int id = BUTTON IDS [ i ] ;", "Button Info info = buttons [ m Vertical ? buttons . length - i - NUM_ : i ] ;", "Key Button View button = ( Key Button View ) m Parent . find View By Id ( id ) ;", "boolean is Small Button = Navigation Buttons . IS SLOT SMALL [ i ] ;", "button . set Info ( info , m Vertical , is Small Button ) ;", "if ( ! info . equals ( Navigation Buttons . EMPTY ) && ! is Small Button ) {", "visible Count ++ ; }", "button . set Translation X ( NUM_ ) ;", "m Button Views . set ( i , button ) ; }", "if ( is Device Phone ( m Context ) ) {", "adjust Padding ( visible Count ) ; }", "update Low Lights ( visible Count ) ; }"]}
{"ids": "26475", "code": ["public static final String read String ( byte [ ] bytes , String charset ) throws IO Exception {", "return read String ( bytes , NUM_ , bytes . length , Charset . for Name ( charset ) ) ; }"]}
{"ids": "25339", "code": ["private void update Command Cache ( String group , String command , boolean need Notify ) {", "String old Command = command Cache . get ( group ) ;", "if ( ! command . equals ( old Command ) ) {", "command Cache . put ( group , command ) ;", "if ( need Notify ) {", "notify Executor . execute ( new Notify Command ( group , command ) ) ;", "Logger Util . info ( String . format ( STR_ , group , command ) ) ; } }", "else {", "Logger Util . info ( String . format ( STR_ , group , command ) ) ; } }"]}
{"ids": "6466", "code": ["public void update Language ( ) {", "create Legend Panel ( legend Panel ) ;", "directory Tree Model . change Root Text ( I 18 n . tr ( STR_ ) ) ; }"]}
{"ids": "65443", "code": ["private synchronized void rebuild Journal ( ) throws IO Exception {", "if ( journal Writer != null ) {", "journal Writer . close ( ) ; }", "Writer writer = new Buffered Writer ( new Output Stream Writer ( new File Output Stream ( journal File Tmp ) , Util . US ASCII ) ) ;", "try {", "writer . write ( MAGIC ) ;", "writer . write ( STR_ ) ;", "writer . write ( VERSION 1 ) ;", "writer . write ( STR_ ) ;", "writer . write ( Integer . to String ( app Version ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( Integer . to String ( value Count ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( STR_ ) ;", "for ( Entry entry : lru Entries . values ( ) ) {", "if ( entry . current Editor != null ) {", "writer . write ( DIRTY + STR_ + entry . key + STR_ ) ; }", "else {", "writer . write ( CLEAN + STR_ + entry . key + entry . get Lengths ( ) + STR_ ) ; } } }", "finally {", "writer . close ( ) ; }", "if ( journal File . exists ( ) ) {", "rename To ( journal File , journal File Backup , true ) ; }", "rename To ( journal File Tmp , journal File , false ) ;", "journal File Backup . delete ( ) ;", "journal Writer = new Buffered Writer ( new Output Stream Writer ( new File Output Stream ( journal File , true ) , Util . US ASCII ) ) ; }"]}
{"ids": "77754", "code": ["public static byte [ ] decompress For Zlib ( byte [ ] bytes To Decompress ) {", "byte [ ] return Values = null ;", "Inflater inflater = new Inflater ( ) ;", "int number Of Bytes To Decompress = bytes To Decompress . length ;", "inflater . set Input ( bytes To Decompress , NUM_ , number Of Bytes To Decompress ) ;", "int buffer Size In Bytes = number Of Bytes To Decompress ;", "int number Of Bytes Decompressed So Far = NUM_ ;", "List < Byte > bytes Decompressed So Far = new Array List < Byte > ( ) ;", "try {", "while ( inflater . needs Input ( ) == false ) {", "byte [ ] bytes Decompressed Buffer = new byte [ buffer Size In Bytes ] ;", "int number Of Bytes Decompressed This Time = inflater . inflate ( bytes Decompressed Buffer ) ;", "number Of Bytes Decompressed So Far += number Of Bytes Decompressed This Time ;", "for ( int b = NUM_ ; b < number Of Bytes Decompressed This Time ; b ++ ) {", "bytes Decompressed So Far . add ( bytes Decompressed Buffer [ b ] ) ; } }", "return Values = new byte [ bytes Decompressed So Far . size ( ) ] ;", "for ( int b = NUM_ ; b < return Values . length ; b ++ ) {", "return Values [ b ] = ( byte ) ( bytes Decompressed So Far . get ( b ) ) ; } }", "catch ( Data Format Exception dfe ) {", "dfe . print Stack Trace ( ) ; }", "inflater . end ( ) ;", "return return Values ; }"]}
{"ids": "27508", "code": ["protected boolean accept Chunk ( final I Chunk Message < I Binding Set > msg ) {", "if ( msg == null ) throw new Illegal Argument Exception ( ) ;", "if ( ! msg . is Materialized ( ) ) throw new Illegal State Exception ( ) ;", "final Abstract Running Query q = get Running Query ( msg . get Query Id ( ) ) ;", "if ( q == null ) {", "throw new Illegal State Exception ( ) ; }", "if ( ! q . accept Chunk ( msg ) ) {", "msg . release ( ) ;", "return false ; }", "if ( ! is Running ( ) ) {", "msg . release ( ) ;", "return false ; }", "priority Queue . add ( q ) ;", "return true ; }"]}
{"ids": "82383", "code": ["public String format ( Object obj , String Buffer to Append To ) throws Illegal Argument Exception {", "return format ( ( Date ) obj , to Append To ) ; }"]}
{"ids": "36938", "code": ["void add Member ( final Type Member member ) {", "Preconditions . check Not Null ( member , STR_ ) ;", "Preconditions . check Argument ( member . get Parent Type ( ) == this , STR_ ) ;", "members . add ( member ) ; }"]}
{"ids": "38740", "code": ["public synchronized void remove Incremental Classifier Listener ( Incremental Classifier Listener cl ) {", "m incremental Classifier Listeners . remove ( cl ) ; }"]}
{"ids": "42950", "code": ["public static Number asinh ( Number a ) {", "return Fast Math . asinh ( a . double Value ( ) ) ; }"]}
{"ids": "24147", "code": ["private String format Names ( String [ ] names , int start Index ) {", "String Builder sb = new String Builder ( ) ;", "if ( names != null ) {", "for ( String name : names ) {", "sb . append ( name . substring ( start Index ) ) ;", "sb . append ( STR_ ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "61385", "code": ["public String lookup Prefix ( String uri ) {", "String found Prefix = null ;", "Enumeration prefixes = m namespaces . keys ( ) ;", "while ( prefixes . has More Elements ( ) ) {", "String prefix = ( String ) prefixes . next Element ( ) ;", "String uri 2 = lookup Namespace ( prefix ) ;", "if ( uri 2 != null && uri 2 . equals ( uri ) ) {", "found Prefix = prefix ;", "break ; } }", "return found Prefix ; }"]}
{"ids": "16860", "code": ["public void remove All Trailers ( ) {", "trailer . clear ( ) ;", "fire Property Change ( TRAILER , null , trailer ) ; }"]}
{"ids": "34909", "code": ["public Builder clear ( ) {", "locale Builder . clear ( ) ;", "return this ; }"]}
{"ids": "48424", "code": ["private static boolean version Matches ( Integer v 1 , Integer v 2 ) {", "if ( v 1 == null || v 1 == NUM_ || v 2 == null || v 2 == NUM_ ) {", "return true ; }", "return v 1 . equals ( v 2 ) ; }"]}
{"ids": "41384", "code": ["public static Optional < String > package Name ( String long Name ) {", "if ( long Name . contains ( DOT ) ) {", "return Optional . of ( long Name . substring ( NUM_ , long Name . last Index Of ( DOT ) ) ) ; }", "else {", "return Optional . empty ( ) ; } }"]}
{"ids": "43653", "code": ["public int [ ] [ ] e 2 f ( ) {", "int e Dim = tgt End Exclusive - tgt Start Inclusive ;", "int [ ] [ ] e 2 f = new int [ e Dim ] [ ] ;", "for ( int i = tgt Start Inclusive ; i < tgt End Exclusive ; ++ i ) {", "int local Idx = i - tgt Start Inclusive ;", "int [ ] e 2 f I = sentence Pair . e 2 f ( i ) ;", "int src Align Dim = e 2 f I . length ;", "e 2 f [ local Idx ] = new int [ src Align Dim ] ;", "if ( src Align Dim > NUM_ ) {", "System . arraycopy ( e 2 f I , NUM_ , e 2 f [ local Idx ] , NUM_ , src Align Dim ) ;", "for ( int j = NUM_ ; j < src Align Dim ; ++ j ) {", "e 2 f [ local Idx ] [ j ] -= src Start Inclusive ; } } }", "return e 2 f ; }"]}
{"ids": "85852", "code": ["public void read Exif ( String in File Name ) throws File Not Found Exception , IO Exception {", "if ( in File Name == null ) {", "throw new Illegal Argument Exception ( NULL ARGUMENT STRING ) ; }", "Input Stream is = null ;", "try {", "is = ( Input Stream ) new Buffered Input Stream ( new File Input Stream ( in File Name ) ) ;", "read Exif ( is ) ; }", "catch ( IO Exception e ) {", "close Silently ( is ) ;", "throw e ; }", "is . close ( ) ; }"]}
{"ids": "18547", "code": ["private void assert Write Result ( int size ) throws IO Exception {", "Byte Buffer buf = Byte Buffer . allocate ( size + NUM_ ) ;", "int count = NUM_ ;", "int total = NUM_ ;", "long begin Time = System . current Time Millis ( ) ;", "while ( ( count = client Channel . read ( buf ) ) != - NUM_ ) {", "total = total + count ;", "if ( System . current Time Millis ( ) - begin Time > NUM_ ) {", "break ; } }", "assert Equals ( total , size ) ;", "buf . flip ( ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "assert Equals ( ( byte ) i , buf . get ( i ) ) ; } }"]}
{"ids": "44913", "code": ["public static boolean is File Upload Available ( final boolean needs Correct Mime Type ) {", "if ( Build . VERSION . SDK INT == NUM_ ) {", "final String platform Version = ( Build . VERSION . RELEASE == null ) ? STR_ : Build . VERSION . RELEASE ;", "return ! needs Correct Mime Type && ( platform Version . starts With ( STR_ ) || platform Version . starts With ( STR_ ) ) ; }", "else {", "return true ; } }"]}
{"ids": "73032", "code": ["private boolean menu Item Action ( int screen X , int screen Y , int action ) {", "List View list View = m App Menu . get Popup ( ) . get List View ( ) ;", "Array List < View > item Views = new Array List < View > ( ) ;", "for ( int i = NUM_ ; i < list View . get Child Count ( ) ; ++ i ) {", "boolean has Image Buttons = false ;", "if ( list View . get Child At ( i ) instanceof Linear Layout ) {", "Linear Layout layout = ( Linear Layout ) list View . get Child At ( i ) ;", "for ( int j = NUM_ ; j < layout . get Child Count ( ) ; ++ j ) {", "item Views . add ( layout . get Child At ( j ) ) ;", "if ( layout . get Child At ( j ) instanceof Image Button ) has Image Buttons = true ; } }", "if ( ! has Image Buttons ) item Views . add ( list View . get Child At ( i ) ) ; }", "boolean did Perform Click = false ;", "for ( int i = NUM_ ; i < item Views . size ( ) ; ++ i ) {", "View item View = item Views . get ( i ) ;", "boolean should Perform = item View . is Enabled ( ) && item View . is Shown ( ) && get Screen Visible Rect ( item View ) . contains ( screen X , screen Y ) ;", "switch ( action ) {", "case ITEM ACTION HIGHLIGHT :", "item View . set Pressed ( should Perform ) ;", "break ;", "case ITEM ACTION PERFORM :", "if ( should Perform ) {", "item View . perform Click ( ) ;", "did Perform Click = true ; }", "break ;", "case ITEM ACTION CLEAR HIGHLIGHT ALL :", "item View . set Pressed ( false ) ;", "break ;", "default :", "assert false ;", "break ; } }", "return did Perform Click ; }"]}
{"ids": "8602", "code": ["public void toggle ( JFX Drawer drawer ) {", "if ( ! drawers . contains ( drawer ) ) add Drawer ( drawer ) ;", "if ( drawer . is Shown ( ) || drawer . is Showing ( ) ) drawer . close ( ) ;", "else {", "update Drawer Position ( drawer ) ;", "drawer . open ( ) ; } }"]}
{"ids": "22175", "code": ["public static boolean is V Mware Vapp ( ) {", "if ( is V Mware Vapp != null ) {", "log . info ( STR_ , is V Mware Vapp . boolean Value ( ) ) ;", "return is V Mware Vapp . boolean Value ( ) ; }", "final String [ ] cmd = { GET OVF PROPERTY CMD , IS VAPP } ;", "Exec . Result result = Exec . sudo ( CMD TIMEOUT , cmd ) ;", "if ( ! result . exited Normally ( ) ) {", "log . error ( STR_ , result . get Std Error ( ) ) ;", "throw new Illegal State Exception ( STR_ ) ; }", "if ( result . get Exit Value ( ) == NUM_ ) {", "log . info ( STR_ ) ;", "is V Mware Vapp = Boolean . TRUE ;", "return is V Mware Vapp . boolean Value ( ) ; }", "log . info ( STR_ , result . get Exit Value ( ) ) ;", "is V Mware Vapp = Boolean . FALSE ;", "return is V Mware Vapp . boolean Value ( ) ; }"]}
{"ids": "59487", "code": ["protected String to Base 64 ( byte [ ] data ) {", "return Base 64 . encode To String ( data , Base 64 . DEFAULT ) ; }"]}
{"ids": "19618", "code": ["@ Override public String to Verbose String ( ) {", "final String Builder sb = new String Builder ( ) ;", "print ( sb , NUM_ , Verbosity . LOG WITH STACKTRACE ) ;", "return sb . to String ( ) ; }"]}
{"ids": "57086", "code": ["public static long quantile ( long [ ] values , double quantile ) {", "if ( values == null ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( quantile < NUM_ || quantile > NUM_ ) throw new Illegal Argument Exception ( STR_ ) ;", "long [ ] copy = new long [ values . length ] ;", "System . arraycopy ( values , NUM_ , copy , NUM_ , copy . length ) ;", "Arrays . sort ( copy ) ;", "int index = ( int ) ( copy . length * quantile ) ;", "return copy [ index ] ; }"]}
{"ids": "20255", "code": ["public void add Tree Update ( SLD Tree Updated Interface sld Tree ) {", "tree Update List . add ( sld Tree ) ; }"]}
{"ids": "715", "code": ["public static double distance ( Visual Item vi 1 , Visual Item vi 2 ) {", "double dx = vi 1 . get X ( ) - vi 2 . get X ( ) ;", "double dy = vi 1 . get Y ( ) - vi 2 . get Y ( ) ;", "return Math . sqrt ( dx * dx + dy * dy ) ; }"]}
{"ids": "10407", "code": ["@ Override public void validate Request ( Generic Attribute Resolve Request request ) throws Bad Attribute Resolve Request Exception {", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ ) ;", "String site Id = request . get Site ( ) ;", "if ( null == site Id ) throw new Bad Attribute Resolve Request Exception ( HDFS Resource Constants . HDFS RESOURCE RESOLVE FORMAT HINT ) ;", "String file Path = request . get Query ( ) ;", "if ( null == file Path || ! file Path . starts With ( STR_ ) ) throw new Bad Attribute Resolve Request Exception ( HDFS Resource Constants . HDFS RESOURCE RESOLVE FORMAT HINT ) ;", "if ( LOG . is Debug Enabled ( ) ) LOG . debug ( STR_ ) ; }"]}
{"ids": "65023", "code": ["public Trigger when ( Criterion criterion ) {", "if ( criterion != null ) {", "criterions . add ( criterion ) ; }", "return this ; }"]}
{"ids": "39392", "code": ["public void clear ( ) {", "m Read Methods . clear ( ) ;", "m Write Methods . clear ( ) ;", "try {", "add Methods ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "35079", "code": ["public static String join ( Char Sequence delimiter , Object [ ] tokens ) {", "String Builder sb = new String Builder ( ) ;", "boolean first Time = true ;", "for ( Object token : tokens ) {", "if ( first Time ) {", "first Time = false ; }", "else {", "sb . append ( delimiter ) ; }", "sb . append ( token ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "15348", "code": ["public static Packet to Packet ( Byte Buffer data ) {", "final byte code = data . get ( ) ;", "final short id = ( short ) ( ( data . get ( ) ) & NUM_ ) ;", "final short datalen = data . get Short ( ) ;", "final byte [ ] auth Data = new byte [ NUM_ ] ;", "data . get ( auth Data ) ;", "final Packet Type type = Packet Type . get Packet Type ( code ) ;", "Packet pkt = null ;", "switch ( type ) {", "case ACCESS ACCEPT :", "pkt = new Access Accept ( ) ;", "pkt . set Authenticator ( new Response Authenticator ( auth Data ) ) ;", "break ;", "case ACCESS CHALLENGE :", "pkt = new Access Challenge ( ) ;", "pkt . set Authenticator ( new Response Authenticator ( auth Data ) ) ;", "break ;", "case ACCESS REJECT :", "pkt = new Access Reject ( ) ;", "pkt . set Authenticator ( new Response Authenticator ( auth Data ) ) ;", "break ;", "case ACCESS REQUEST :", "pkt = new Access Request ( ) ;", "pkt . set Authenticator ( new Request Authenticator ( auth Data ) ) ;", "break ;", "case UNKNOWN :", "default :", "LOG . log ( Level . WARNING , STR_ + code + STR_ ) ;", "return null ; }", "pkt . set Identifier ( id ) ;", "Attribute a = null ;", "while ( ( a = Packet Factory . next Attribute ( data ) ) != null ) {", "pkt . add Attribute ( a ) ; }", "return pkt ; }"]}
{"ids": "63466", "code": ["public void unlock Read Locks ( ) {", "if ( database . is Multi Version ( ) ) {", "return ; }", "for ( int i = NUM_ ; i < locks . size ( ) ; i ++ ) {", "Table t = locks . get ( i ) ;", "if ( ! t . is Locked Exclusively ( ) ) {", "synchronized ( database ) {", "t . unlock ( this ) ;", "locks . remove ( i ) ; }", "i -- ; } } }"]}
{"ids": "35253", "code": ["protected void process Attributes ( ) {", "for ( final String tag : tags ) {", "for ( final String inherit : inherits ) {", "style Sheet . add Styles ( tag , style Sheet . get Styles ( inherit ) ) ; }", "style Sheet . add Styles ( tag , attributes ) ; } }"]}
{"ids": "19505", "code": ["private boolean is Image ( String url ) {", "return url . matches ( Regex . IMAGE PATTERN ) ; }"]}
{"ids": "17741", "code": ["public void add Attribute ( Attributed Character Iterator . Attribute attribute , Object value , int start , int end ) {", "if ( attribute == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( start < NUM_ || end > text . length ( ) || start >= end ) {", "throw new Illegal Argument Exception ( ) ; }", "if ( value == null ) {", "return ; }", "List < Range > ranges = attribute Map . get ( attribute ) ;", "if ( ranges == null ) {", "ranges = new Array List < Range > ( NUM_ ) ;", "ranges . add ( new Range ( start , end , value ) ) ;", "attribute Map . put ( attribute , ranges ) ;", "return ; }", "List Iterator < Range > it = ranges . list Iterator ( ) ;", "while ( it . has Next ( ) ) {", "Range range = it . next ( ) ;", "if ( end <= range . start ) {", "it . previous ( ) ;", "break ; }", "else if ( start < range . end || ( start == range . end && value . equals ( range . value ) ) ) {", "Range r 1 = null , r 3 ;", "it . remove ( ) ;", "r 1 = new Range ( range . start , start , range . value ) ;", "r 3 = new Range ( end , range . end , range . value ) ;", "while ( end > range . end && it . has Next ( ) ) {", "range = it . next ( ) ;", "if ( end <= range . end ) {", "if ( end > range . start || ( end == range . start && value . equals ( range . value ) ) ) {", "it . remove ( ) ;", "r 3 = new Range ( end , range . end , range . value ) ;", "break ; } }", "else {", "it . remove ( ) ; } }", "if ( value . equals ( r 1 . value ) ) {", "if ( value . equals ( r 3 . value ) ) {", "it . add ( new Range ( r 1 . start < start ? r 1 . start : start , r 3 . end > end ? r 3 . end : end , r 1 . value ) ) ; }", "else {", "it . add ( new Range ( r 1 . start < start ? r 1 . start : start , end , r 1 . value ) ) ;", "if ( r 3 . start < r 3 . end ) {", "it . add ( r 3 ) ; } } }", "else {", "if ( value . equals ( r 3 . value ) ) {", "if ( r 1 . start < r 1 . end ) {", "it . add ( r 1 ) ; }", "it . add ( new Range ( start , r 3 . end > end ? r 3 . end : end , r 3 . value ) ) ; }", "else {", "if ( r 1 . start < r 1 . end ) {", "it . add ( r 1 ) ; }", "it . add ( new Range ( start , end , value ) ) ;", "if ( r 3 . start < r 3 . end ) {", "it . add ( r 3 ) ; } } }", "return ; } }", "it . add ( new Range ( start , end , value ) ) ; }"]}
{"ids": "59818", "code": ["public static boolean point In Rotated Rect ( float [ ] point , Rect F bound , float rot ) {", "Matrix m = new Matrix ( ) ;", "float [ ] p = Arrays . copy Of ( point , NUM_ ) ;", "m . set Rotate ( rot , bound . center X ( ) , bound . center Y ( ) ) ;", "Matrix m 0 = new Matrix ( ) ;", "if ( ! m . invert ( m 0 ) ) return false ;", "m 0 . map Points ( p ) ;", "return inclusive Contains ( bound , p [ NUM_ ] , p [ NUM_ ] ) ; }"]}
{"ids": "13062", "code": ["@ Override public void warning ( String domain , String key , XML Parse Exception exception ) throws XNI Exception {", "if ( f Error Handler != null ) {", "SAX Parse Exception sax Exception = create SAX Parse Exception ( exception ) ;", "try {", "f Error Handler . warning ( sax Exception ) ; }", "catch ( SAX Parse Exception e ) {", "throw create XML Parse Exception ( e ) ; }", "catch ( SAX Exception e ) {", "throw create XNI Exception ( e ) ; } } }"]}
{"ids": "67947", "code": ["public void modify All ( Map < String , Collection < Dynamic Modification > > modifications , Collection < Throwable > problems ) throws Cannot Compile Exception {", "for ( String class Name : modifications . key Set ( ) ) {", "try {", "modify ( class Name , modifications . get ( class Name ) ) ; }", "catch ( Not Found Exception e ) {", "log . warn ( STR_ + class Name , e ) ;", "problems . add ( e ) ; }", "catch ( Class Not Found Exception e ) {", "log . warn ( STR_ + class Name , e ) ;", "problems . add ( e ) ; }", "catch ( IO Exception e ) {", "log . warn ( STR_ + class Name , e ) ;", "problems . add ( e ) ; } } }"]}
{"ids": "41718", "code": ["public Mutable Location to Mutable Location ( World w ) {", "return new Mutable Location ( x , y , z , w ) ; }"]}
{"ids": "48337", "code": ["public boolean verify ( General Name Interface name ) throws IO Exception {", "if ( name == null ) {", "throw new IO Exception ( STR_ ) ; }", "if ( excluded != null && excluded . size ( ) > NUM_ ) {", "for ( int i = NUM_ ; i < excluded . size ( ) ; i ++ ) {", "General Subtree gs = excluded . get ( i ) ;", "if ( gs == null ) continue ;", "General Name gn = gs . get Name ( ) ;", "if ( gn == null ) continue ;", "General Name Interface ex Name = gn . get Name ( ) ;", "if ( ex Name == null ) continue ;", "switch ( ex Name . constrains ( name ) ) {", "case General Name Interface . NAME DIFF TYPE :", "case General Name Interface . NAME WIDENS :", "case General Name Interface . NAME SAME TYPE :", "break ;", "case General Name Interface . NAME MATCH :", "case General Name Interface . NAME NARROWS :", "return false ; } } }", "if ( permitted != null && permitted . size ( ) > NUM_ ) {", "boolean same Type = false ;", "for ( int i = NUM_ ; i < permitted . size ( ) ; i ++ ) {", "General Subtree gs = permitted . get ( i ) ;", "if ( gs == null ) continue ;", "General Name gn = gs . get Name ( ) ;", "if ( gn == null ) continue ;", "General Name Interface per Name = gn . get Name ( ) ;", "if ( per Name == null ) continue ;", "switch ( per Name . constrains ( name ) ) {", "case General Name Interface . NAME DIFF TYPE :", "continue ;", "case General Name Interface . NAME WIDENS :", "case General Name Interface . NAME SAME TYPE :", "same Type = true ;", "continue ;", "case General Name Interface . NAME MATCH :", "case General Name Interface . NAME NARROWS :", "return true ; } }", "if ( same Type ) {", "return false ; } }", "return true ; }"]}
{"ids": "11137", "code": ["public void read Graphics ( Object Input Stream objstream ) throws IO Exception {", "Debug . message ( STR_ , STR_ ) ;", "try {", "while ( true ) {", "try {", "OM Graphic omg = ( OM Graphic ) objstream . read Object ( ) ;", "graphics . add ( omg ) ; }", "catch ( Class Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( Optional Data Exception ode ) {", "ode . print Stack Trace ( ) ; } } }", "catch ( EOF Exception e ) { } }"]}
{"ids": "54097", "code": ["public void create Topics ( int num Partitions , int replication Factor , Set < String > topics ) {", "create Topics ( num Partitions , replication Factor , topics . to Array ( new String [ topics . size ( ) ] ) ) ; }"]}
{"ids": "17115", "code": ["public synchronized void remove Listener ( Listener l ) {", "listeners . remove ( l ) ; }"]}
{"ids": "33257", "code": ["public Command Line add ( String ... args ) {", "if ( args != null && args . length > NUM_ ) {", "Collections . add All ( arguments , args ) ; }", "return this ; }"]}
{"ids": "85839", "code": ["private void restore Icon ( Backup Protos . Key key , byte [ ] buffer , int data Size ) throws IO Exception {", "if ( VERBOSE ) Log . v ( TAG , STR_ + key . id ) ;", "if ( DEBUG ) Log . d ( TAG , STR_ + buffer . length + STR_ + Base 64 . encode To String ( buffer , NUM_ , data Size , Base 64 . NO WRAP ) ) ;", "Backup Protos . Resource res = unpack Proto ( new Backup Protos . Resource ( ) , buffer , data Size ) ;", "if ( DEBUG ) {", "Log . d ( TAG , STR_ + res . dpi + STR_ ) ; }", "Bitmap icon = Bitmap Factory . decode Byte Array ( res . data , NUM_ , res . data . length ) ;", "if ( icon == null ) {", "Log . w ( TAG , STR_ + key . name ) ; }", "else {", "if ( VERBOSE ) Log . v ( TAG , STR_ + key . name ) ;", "m Icon Cache . preload Icon ( Component Name . unflatten From String ( key . name ) , icon , res . dpi , STR_ , m User Serial , m Idp ) ; } }"]}
{"ids": "29791", "code": ["public static int determine Consecutive Digit Count ( Char Sequence msg , int startpos ) {", "int count = NUM_ ;", "int len = msg . length ( ) ;", "int idx = startpos ;", "if ( idx < len ) {", "char ch = msg . char At ( idx ) ;", "while ( is Digit ( ch ) && idx < len ) {", "count ++ ;", "idx ++ ;", "if ( idx < len ) {", "ch = msg . char At ( idx ) ; } } }", "return count ; }"]}
{"ids": "24743", "code": ["public Event Store Builder use Ssl Connection ( String certificate Common Name ) {", "settings Builder . ssl Settings ( Ssl Settings . trust Certificate CN ( certificate Common Name ) ) ;", "return this ; }"]}
{"ids": "82719", "code": ["Action Map create Action Map ( ) {", "Action Map map = new Action Map UI Resource ( ) ;", "map . put ( STR_ , new Show System Menu Action ( true ) ) ;", "map . put ( STR_ , new Show System Menu Action ( false ) ) ;", "return map ; }"]}
{"ids": "66422", "code": ["protected void paint Content Border Left Edge ( Graphics g , int x , int y , int w , int h , boolean draw Broken , Rectangle sel Rect , boolean is Content Border Painted ) {", "if ( is Content Border Painted ) {", "g . set Color ( select Highlight ) ;", "g . fill Rect ( x , y , NUM_ , h - NUM_ ) ; } }"]}
{"ids": "50439", "code": ["private String field Param Comment ( Field field , String param Comment ) {", "String comment Type = field Type Cardinality Comment ( field ) ;", "String comment = String . format ( STR_ , wrap If Keyword Or Built In ( field . get Simple Name ( ) ) , comment Type ) ;", "if ( param Comment == null ) {", "param Comment = Documentation Util . get Scoped Description ( field ) ; }", "if ( ! Strings . is Null Or Empty ( param Comment ) ) {", "param Comment = R Doc Comment Fixer . rdocify ( param Comment ) ;", "comment += STR_ + param Comment . replace All ( STR_ , STR_ ) ; }", "return comment + STR_ ; }"]}
{"ids": "3498", "code": ["public static long period End ( long now , long period ) {", "Local Date Time time = Local Date Time . of Epoch Second ( now / NUM_ , NUM_ , Zone Offset . UTC ) ;", "long end Time = period End ( now , period , time ) ;", "return end Time ; }"]}
{"ids": "4493", "code": ["public static String generate Chat Id ( final String receiver Id , final String sender Id ) {", "String combined = null ;", "if ( receiver Id . compare To ( sender Id ) < NUM_ ) {", "combined = String . format ( Locale . US , App Constants . CHAT ID FORMAT , receiver Id , sender Id ) ; }", "else {", "combined = String . format ( Locale . US , App Constants . CHAT ID FORMAT , sender Id , receiver Id ) ; }", "String hashed = null ;", "try {", "hashed = Utils . sha 1 ( combined ) ; }", "catch ( final No Such Algorithm Exception e ) {", "hashed = combined ; }", "return hashed ; }"]}
{"ids": "48657", "code": ["void extract ( String fname , String files [ ] ) throws IO Exception {", "Zip File zf = new Zip File ( fname ) ;", "Set < Zip Entry > dirs = new Dir Set ( ) ;", "Enumeration < ? extends Zip Entry > zes = zf . entries ( ) ;", "while ( zes . has More Elements ( ) ) {", "Zip Entry e = zes . next Element ( ) ;", "if ( files == null ) {", "dirs . add ( extract File ( zf . get Input Stream ( e ) , e ) ) ; }", "else {", "String name = e . get Name ( ) ;", "for ( String file : files ) {", "if ( name . starts With ( file ) ) {", "dirs . add ( extract File ( zf . get Input Stream ( e ) , e ) ) ;", "break ; } } } }", "zf . close ( ) ;", "update Last Modified Time ( dirs ) ; }"]}
{"ids": "47818", "code": ["public void remove ( Menu Component m ) {", "synchronized ( get Tree Lock ( ) ) {", "int index = menus . index Of ( m ) ;", "if ( index >= NUM_ ) {", "remove ( index ) ; } } }"]}
{"ids": "36367", "code": ["public XML Importer ( Progress Listener listener ) {", "progress Listener = listener ; }"]}
{"ids": "77800", "code": ["private static Tree Map < Integer , Long > load Workspace Screens Db ( Context context ) {", "final Content Resolver content Resolver = context . get Content Resolver ( ) ;", "final Uri screens Uri = Launcher Settings . Workspace Screens . CONTENT URI ;", "final Cursor sc = content Resolver . query ( screens Uri , null , null , null , null ) ;", "Tree Map < Integer , Long > ordered Screens = new Tree Map < Integer , Long > ( ) ;", "try {", "final int id Index = sc . get Column Index Or Throw ( Launcher Settings . Workspace Screens . ID ) ;", "final int rank Index = sc . get Column Index Or Throw ( Launcher Settings . Workspace Screens . SCREEN RANK ) ;", "while ( sc . move To Next ( ) ) {", "try {", "long screen Id = sc . get Long ( id Index ) ;", "int rank = sc . get Int ( rank Index ) ;", "ordered Screens . put ( rank , screen Id ) ; }", "catch ( Exception e ) {", "Launcher . add Dump Log ( TAG , STR_ + e , true ) ; } } }", "finally {", "sc . close ( ) ; }", "Launcher . add Dump Log ( TAG , STR_ , true ) ;", "Array List < String > ordered Screens Pairs = new Array List < String > ( ) ;", "for ( Integer i : ordered Screens . key Set ( ) ) {", "ordered Screens Pairs . add ( STR_ + i + STR_ + ordered Screens . get ( i ) + STR_ ) ; }", "Launcher . add Dump Log ( TAG , STR_ + Text Utils . join ( STR_ , ordered Screens Pairs ) , true ) ;", "return ordered Screens ; }"]}
{"ids": "28314", "code": ["public Observable < Drive Id > create File ( Drive Folder folder , final File file ) {", "return create File ( folder , file , file . get Name ( ) ) ; }"]}
{"ids": "48507", "code": ["public static void validate Context ( Accel Surface src Data , Accel Surface dst Data , Region clip , Composite comp , Affine Transform xform , Paint paint , Sun Graphics 2 D sg 2 d , int flags ) {", "Buffered Context context = dst Data . get Context ( ) ;", "context . validate ( src Data , dst Data , clip , comp , xform , paint , sg 2 d , flags ) ; }"]}
{"ids": "74244", "code": ["public void change Default Names ( String type ) {", "String [ ] convert = CONVERT TYPES . split ( STR_ ) ;", "String [ ] types = TYPES . split ( STR_ ) ;", "if ( convert . length != types . length ) {", "log . error ( STR_ , types . length , convert . length ) ;", "return ; }", "if ( type . equals ( Setup . DESCRIPTIVE ) ) {", "for ( int i = NUM_ ; i < convert . length ; i ++ ) {", "replace Name ( convert [ i ] , types [ i ] ) ; }", "String [ ] aar Types = ARR TYPES . split ( STR_ ) ;", "for ( int i = NUM_ ; i < aar Types . length ; i ++ ) {", "list . remove ( aar Types [ i ] ) ; }", "for ( int i = NUM_ ; i < types . length ; i ++ ) {", "if ( ! list . contains ( types [ i ] ) ) {", "list . add ( types [ i ] ) ; } } }", "else {", "for ( int i = NUM_ ; i < convert . length ; i ++ ) {", "replace Name ( types [ i ] , convert [ i ] ) ; }", "for ( int i = NUM_ ; i < types . length ; i ++ ) {", "list . remove ( types [ i ] ) ; }", "types = ARR TYPES . split ( STR_ ) ;", "for ( int i = NUM_ ; i < types . length ; i ++ ) {", "if ( ! list . contains ( types [ i ] ) ) {", "list . add ( types [ i ] ) ; } } } }"]}
{"ids": "41360", "code": ["public Label Value Comparator ( final Locale locale ) {", "c = Collator . get Instance ( locale ) ; }"]}
{"ids": "17356", "code": ["public Refresher ( GL Scene scene ) {", "Preconditions . check Not Null ( scene ) ;", "this . scene = scene ; }"]}
{"ids": "75318", "code": ["public Rect update Fast Scroller Bounds ( int last Touch Y ) {", "m Invalidate Rect . set ( m Bg Bounds ) ;", "if ( is Visible ( ) ) {", "int edge Padding = m Rv . get Max Scrollbar Width ( ) ;", "int bg Padding = ( m Bg Original Size - m Text Bounds . height ( ) ) / NUM_ ;", "int bg Height = m Bg Original Size ;", "int bg Width = Math . max ( m Bg Original Size , m Text Bounds . width ( ) + ( NUM_ * bg Padding ) ) ;", "if ( Utilities . is Rtl ( m Res ) ) {", "m Bg Bounds . left = m Rv . get Background Padding ( ) . left + ( NUM_ * m Rv . get Max Scrollbar Width ( ) ) ;", "m Bg Bounds . right = m Bg Bounds . left + bg Width ; }", "else {", "m Bg Bounds . right = m Rv . get Width ( ) - m Rv . get Background Padding ( ) . right - ( NUM_ * m Rv . get Max Scrollbar Width ( ) ) ;", "m Bg Bounds . left = m Bg Bounds . right - bg Width ; }", "m Bg Bounds . top = last Touch Y - ( int ) ( FAST SCROLL OVERLAY Y OFFSET FACTOR * bg Height ) ;", "m Bg Bounds . top = Math . max ( edge Padding , Math . min ( m Bg Bounds . top , m Rv . get Height ( ) - edge Padding - bg Height ) ) ;", "m Bg Bounds . bottom = m Bg Bounds . top + bg Height ; }", "else {", "m Bg Bounds . set Empty ( ) ; }", "m Invalidate Rect . union ( m Bg Bounds ) ;", "return m Invalidate Rect ; }"]}
{"ids": "22445", "code": ["public void build Unique Id ( ) throws V Plex Api Exception {", "String name = get Name ( ) ;", "if ( ! name . contains ( VPLEX NAME DELIM ) ) {", "s logger . warn ( STR_ + name ) ;", "unique Id = name ;", "return ; }", "int last Delim Index = name . last Index Of ( VPLEX NAME DELIM ) ;", "String suffix = name . substring ( last Delim Index + NUM_ ) ;", "s logger . info ( STR_ , name , suffix ) ;", "unique Id = suffix ; }"]}
{"ids": "33699", "code": ["public static String create Base 64 ( Bitmap m Bitmap ) {", "Byte Array Output Stream baos 1 = new Byte Array Output Stream ( ) ;", "m Bitmap . compress ( Bitmap . Compress Format . JPEG , NUM_ , baos 1 ) ;", "byte [ ] b 1 = baos 1 . to Byte Array ( ) ;", "return Base 64 . encode To String ( b 1 , Base 64 . DEFAULT ) ; }"]}
{"ids": "32636", "code": ["public Dice Server Editor ( final I Remote Dice Server dice Server ) {", "m bean = dice Server ;", "final int bottom Space = NUM_ ;", "final int label Space = NUM_ ;", "int row = NUM_ ;", "if ( m bean . sends Email ( ) ) {", "add ( m to Label , new Grid Bag Constraints ( NUM_ , row , NUM_ , NUM_ , NUM_ , NUM_ , Grid Bag Constraints . WEST , Grid Bag Constraints . NONE , new Insets ( NUM_ , NUM_ , bottom Space , label Space ) , NUM_ , NUM_ ) ) ;", "add ( m to Address , new Grid Bag Constraints ( NUM_ , row , NUM_ , NUM_ , NUM_ , NUM_ , Grid Bag Constraints . EAST , Grid Bag Constraints . HORIZONTAL , new Insets ( NUM_ , NUM_ , bottom Space , NUM_ ) , NUM_ , NUM_ ) ) ;", "m to Address . set Text ( m bean . get To Address ( ) ) ;", "row ++ ;", "add ( m cc Label , new Grid Bag Constraints ( NUM_ , row , NUM_ , NUM_ , NUM_ , NUM_ , Grid Bag Constraints . WEST , Grid Bag Constraints . NONE , new Insets ( NUM_ , NUM_ , bottom Space , label Space ) , NUM_ , NUM_ ) ) ;", "add ( m cc Address , new Grid Bag Constraints ( NUM_ , row , NUM_ , NUM_ , NUM_ , NUM_ , Grid Bag Constraints . EAST , Grid Bag Constraints . HORIZONTAL , new Insets ( NUM_ , NUM_ , bottom Space , NUM_ ) , NUM_ , NUM_ ) ) ;", "m cc Address . set Text ( m bean . get Cc Address ( ) ) ;", "row ++ ; }", "if ( m bean . supports Game Id ( ) ) {", "final J Label m game Id Label = new J Label ( STR_ ) ;", "add ( m game Id Label , new Grid Bag Constraints ( NUM_ , row , NUM_ , NUM_ , NUM_ , NUM_ , Grid Bag Constraints . WEST , Grid Bag Constraints . NONE , new Insets ( NUM_ , NUM_ , bottom Space , label Space ) , NUM_ , NUM_ ) ) ;", "add ( m game Id , new Grid Bag Constraints ( NUM_ , row , NUM_ , NUM_ , NUM_ , NUM_ , Grid Bag Constraints . EAST , Grid Bag Constraints . HORIZONTAL , new Insets ( NUM_ , NUM_ , bottom Space , NUM_ ) , NUM_ , NUM_ ) ) ;", "m game Id . set Text ( m bean . get Game Id ( ) ) ;", "row ++ ; }", "add ( m test Dicey Button , new Grid Bag Constraints ( NUM_ , row , NUM_ , NUM_ , NUM_ , NUM_ , Grid Bag Constraints . EAST , Grid Bag Constraints . NONE , new Insets ( NUM_ , NUM_ , bottom Space , NUM_ ) , NUM_ , NUM_ ) ) ;", "setup Listeners ( ) ; }"]}
{"ids": "7699", "code": ["@ Override public boolean equals ( Object obj ) {", "if ( obj == this ) {", "return true ; }", "if ( ! ( obj instanceof Candlestick Renderer ) ) {", "return false ; }", "Candlestick Renderer that = ( Candlestick Renderer ) obj ;", "if ( this . candle Width != that . candle Width ) {", "return false ; }", "if ( ! Paint Utilities . equal ( this . up Paint , that . up Paint ) ) {", "return false ; }", "if ( ! Paint Utilities . equal ( this . down Paint , that . down Paint ) ) {", "return false ; }", "if ( this . draw Volume != that . draw Volume ) {", "return false ; }", "if ( this . max Candle Width In Milliseconds != that . max Candle Width In Milliseconds ) {", "return false ; }", "if ( this . auto Width Method != that . auto Width Method ) {", "return false ; }", "if ( this . auto Width Factor != that . auto Width Factor ) {", "return false ; }", "if ( this . auto Width Gap != that . auto Width Gap ) {", "return false ; }", "if ( this . use Outline Paint != that . use Outline Paint ) {", "return false ; }", "if ( ! Paint Utilities . equal ( this . volume Paint , that . volume Paint ) ) {", "return false ; }", "return super . equals ( obj ) ; }"]}
{"ids": "61527", "code": ["public Header Iterator iterator ( ) {", "return new Basic List Header Iterator ( this . headers , null ) ; }"]}
{"ids": "23410", "code": ["@ Suppress Warnings ( STR_ ) @ Suppress Lint ( STR_ ) @ Override public boolean on Touch Event ( Motion Event event ) {", "Point F v Center End ;", "float v Dist End ;", "if ( anim != null && ! anim . interruptible ) {", "return true ; }", "else {", "anim = null ; }", "if ( v Translate == null ) {", "return true ; }", "if ( detector == null || detector . on Touch Event ( event ) ) {", "return true ; }", "int touch Count = event . get Pointer Count ( ) ;", "switch ( event . get Action ( ) ) {", "case Motion Event . ACTION DOWN :", "case Motion Event . ACTION POINTER 1 DOWN :", "case Motion Event . ACTION POINTER 2 DOWN :", "anim = null ;", "max Touch Count = Math . max ( max Touch Count , touch Count ) ;", "if ( touch Count >= NUM_ ) {", "if ( zoom Enabled ) {", "float distance = distance ( event . get X ( NUM_ ) , event . get X ( NUM_ ) , event . get Y ( NUM_ ) , event . get Y ( NUM_ ) ) ;", "scale Start = scale ;", "v Dist Start = distance ;", "v Translate Start = new Point F ( v Translate . x , v Translate . y ) ;", "v Center Start = new Point F ( ( event . get X ( NUM_ ) + event . get X ( NUM_ ) ) / NUM_ , ( event . get Y ( NUM_ ) + event . get Y ( NUM_ ) ) / NUM_ ) ; }", "else {", "max Touch Count = NUM_ ; }", "handler . remove Messages ( MESSAGE LONG CLICK ) ; }", "else {", "v Translate Start = new Point F ( v Translate . x , v Translate . y ) ;", "v Center Start = new Point F ( event . get X ( ) , event . get Y ( ) ) ;", "handler . send Empty Message Delayed ( MESSAGE LONG CLICK , NUM_ ) ; }", "return true ;", "case Motion Event . ACTION MOVE :", "boolean consumed = false ;", "if ( max Touch Count > NUM_ ) {", "if ( touch Count >= NUM_ ) {", "v Dist End = distance ( event . get X ( NUM_ ) , event . get X ( NUM_ ) , event . get Y ( NUM_ ) , event . get Y ( NUM_ ) ) ;", "v Center End = new Point F ( ( event . get X ( NUM_ ) + event . get X ( NUM_ ) ) / NUM_ , ( event . get Y ( NUM_ ) + event . get Y ( NUM_ ) ) / NUM_ ) ;", "if ( zoom Enabled && ( distance ( v Center Start . x , v Center End . x , v Center Start . y , v Center End . y ) > NUM_ || Math . abs ( v Dist End - v Dist Start ) > NUM_ || is Panning ) ) {", "is Zooming = true ;", "is Panning = true ;", "consumed = true ;", "scale = Math . min ( max Scale , ( v Dist End / v Dist Start ) * scale Start ) ;", "if ( scale <= min Scale ( ) ) {", "v Dist Start = v Dist End ;", "scale Start = min Scale ( ) ;", "v Center Start = v Center End ;", "v Translate Start = v Translate ; }", "else if ( pan Enabled ) {", "float v Left Start = v Center Start . x - v Translate Start . x ;", "float v Top Start = v Center Start . y - v Translate Start . y ;", "float v Left Now = v Left Start * ( scale / scale Start ) ;", "float v Top Now = v Top Start * ( scale / scale Start ) ;", "v Translate . x = v Center End . x - v Left Now ;", "v Translate . y = v Center End . y - v Top Now ; }", "else if ( s Requested Center != null ) {", "v Translate . x = ( get Width ( ) / NUM_ ) - ( scale * s Requested Center . x ) ;", "v Translate . y = ( get Height ( ) / NUM_ ) - ( scale * s Requested Center . y ) ; }", "else {", "v Translate . x = ( get Width ( ) / NUM_ ) - ( scale * ( s Width ( ) / NUM_ ) ) ;", "v Translate . y = ( get Height ( ) / NUM_ ) - ( scale * ( s Height ( ) / NUM_ ) ) ; }", "fit To Bounds ( true ) ;", "refresh Required Tiles ( false ) ; } }", "else if ( ! is Zooming ) {", "float dx = Math . abs ( event . get X ( ) - v Center Start . x ) ;", "float dy = Math . abs ( event . get Y ( ) - v Center Start . y ) ;", "if ( dx > NUM_ || dy > NUM_ || is Panning ) {", "consumed = true ;", "v Translate . x = v Translate Start . x + ( event . get X ( ) - v Center Start . x ) ;", "v Translate . y = v Translate Start . y + ( event . get Y ( ) - v Center Start . y ) ;", "float last X = v Translate . x ;", "float last Y = v Translate . y ;", "fit To Bounds ( true ) ;", "if ( last X == v Translate . x || ( last Y == v Translate . y && dy > NUM_ ) || is Panning ) {", "is Panning = true ; }", "else if ( dx > NUM_ ) {", "max Touch Count = NUM_ ;", "handler . remove Messages ( MESSAGE LONG CLICK ) ; }", "if ( ! pan Enabled ) {", "v Translate . x = v Translate Start . x ;", "v Translate . y = v Translate Start . y ; }", "refresh Required Tiles ( false ) ; } } }", "if ( consumed ) {", "handler . remove Messages ( MESSAGE LONG CLICK ) ;", "invalidate ( ) ;", "return true ; }", "break ;", "case Motion Event . ACTION UP :", "case Motion Event . ACTION POINTER UP :", "case Motion Event . ACTION POINTER 2 UP :", "handler . remove Messages ( MESSAGE LONG CLICK ) ;", "if ( max Touch Count > NUM_ && ( is Zooming || is Panning ) ) {", "if ( is Zooming && touch Count == NUM_ ) {", "is Panning = true ;", "v Translate Start = new Point F ( v Translate . x , v Translate . y ) ;", "if ( event . get Action Index ( ) == NUM_ ) {", "v Center Start = new Point F ( event . get X ( NUM_ ) , event . get Y ( NUM_ ) ) ; }", "else {", "v Center Start = new Point F ( event . get X ( NUM_ ) , event . get Y ( NUM_ ) ) ; } }", "if ( touch Count < NUM_ ) {", "is Zooming = false ; }", "if ( touch Count < NUM_ ) {", "is Panning = false ;", "max Touch Count = NUM_ ; }", "refresh Required Tiles ( true ) ;", "return true ; }", "if ( touch Count == NUM_ ) {", "is Zooming = false ;", "is Panning = false ;", "max Touch Count = NUM_ ; }", "return true ; }", "return super . on Touch Event ( event ) ; }"]}
{"ids": "23634", "code": ["public static < T 1 , T 2 > void transform ( Collection < T 1 > from , Collection < T 2 > to , Transformer < T 1 , T 2 > transformer ) {", "for ( T 1 instance : from ) {", "to . add ( transformer . transform ( instance ) ) ; } }"]}
{"ids": "4399", "code": ["public static String generate Code ( ) {", "return generate Code ( CODESIZE ) ; }"]}
{"ids": "31515", "code": ["public static boolean is Book Search Url ( String url ) {", "return url . starts With ( STR_ ) || url . starts With ( STR_ ) ; }"]}
{"ids": "58197", "code": ["public void flush ( ) throws java . io . IO Exception {", "m os . flush ( ) ; }"]}
{"ids": "63382", "code": ["private void combine Entries ( Array List < long [ ] > list , int total ) {", "Collections . sort ( list , this ) ;", "for ( int min Gap = NUM_ ; min Gap < total ; min Gap += min Gap / NUM_ ) {", "for ( int i = NUM_ ; i < list . size ( ) - NUM_ ; i ++ ) {", "long [ ] current = list . get ( i ) ;", "long [ ] next = list . get ( i + NUM_ ) ;", "if ( current [ NUM_ ] + min Gap >= next [ NUM_ ] ) {", "current [ NUM_ ] = next [ NUM_ ] ;", "list . remove ( i + NUM_ ) ;", "i -- ; } }", "int searched = NUM_ ;", "for ( long [ ] range : list ) {", "searched += range [ NUM_ ] - range [ NUM_ ] + NUM_ ; }", "if ( searched > NUM_ * total || list . size ( ) < NUM_ ) {", "break ; } } }"]}
{"ids": "20857", "code": ["@ Override public void write String ( byte [ ] str , int offset , int length ) throws IO Exception {", "if ( str == null ) write Int ( NUM_ ) ;", "else {", "if ( use Compression && length >= Compressor . MIN SIZE FOR DEFLATION ) {", "if ( byte Buffer . length < length ) byte Buffer = new byte [ NUM_ * length ] ;", "int number Of Bytes = compressor . deflate String 2 Byte Array ( str , offset , length , byte Buffer ) ;", "write Int ( number Of Bytes ) ;", "io . write ( byte Buffer , NUM_ , Math . abs ( number Of Bytes ) ) ; }", "else {", "write Int ( length ) ;", "io . write ( str , offset , length ) ; } } }"]}
{"ids": "71623", "code": ["protected void write Column Not Nullable Stmt ( String Builder ddl ) {", "ddl . append ( STR_ ) ; }"]}
{"ids": "71273", "code": ["private static Output Stream wrap Output Stream ( final Output Stream stream ) {", "String os = System . get Property ( STR_ ) ;", "if ( os . starts With ( STR_ ) ) {", "try {", "return new Windows Ansi Output Stream ( stream ) ; }", "catch ( Throwable ignore ) { }", "return new Ansi Output Stream ( stream ) ; }", "return stream ; }"]}
{"ids": "4200", "code": ["@ Override public Set < Location > unmarshal ( Locations Type locations Type ) {", "Set < Location > locations = new Linked Hash Set < Location > ( ) ;", "locations . add All ( locations Type . get Rps Blast Locations ( ) ) ;", "locations . add All ( locations Type . get Hmmer 2 Locations ( ) ) ;", "locations . add All ( locations Type . get Hmmer 3 Locations ( ) ) ;", "locations . add All ( locations Type . get Super Family Hmmer 3 Locations ( ) ) ;", "locations . add All ( locations Type . get Finger Prints Locations ( ) ) ;", "locations . add All ( locations Type . get Blast Pro Dom Locations ( ) ) ;", "locations . add All ( locations Type . get Pattern Scan Locations ( ) ) ;", "locations . add All ( locations Type . get Profile Scan Locations ( ) ) ;", "locations . add All ( locations Type . get Phobius Locations ( ) ) ;", "locations . add All ( locations Type . get Coils Locations ( ) ) ;", "locations . add All ( locations Type . get Panther Locations ( ) ) ;", "locations . add All ( locations Type . get Signal P Locations ( ) ) ;", "locations . add All ( locations Type . get TMHMM Locations ( ) ) ;", "return locations ; }"]}
{"ids": "54430", "code": ["public int write Key ( Output Stream out ) throws IO Exception {", "out . write ( block Buffer , key Offset , klen ) ;", "return klen ; }"]}
{"ids": "67112", "code": ["boolean descends From ( Class File cf ) {", "return descends From ( cf . to String ( ) ) ; }"]}
{"ids": "39399", "code": ["protected Object write Pre Process ( Object o ) throws Exception {", "return o ; }"]}
{"ids": "38003", "code": ["public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "36286", "code": ["public Expression Parser Builder with Dynamics ( Resolver resolver ) {", "dynamics Resolvers . add ( resolver ) ;", "return this ; }"]}
{"ids": "74076", "code": ["void warn Missing Names ( File file ) {", "String result = check Missing Names ( file ) ;", "if ( result . equals ( STR_ ) ) {", "J Option Pane . show Message Dialog ( who , STR_ ) ; }", "else {", "J Option Pane . show Message Dialog ( who , result ) ; } }"]}
{"ids": "50231", "code": ["public void add ( int position , Wishlist Item wishlist Item ) {", "notify Item Inserted ( position ) ;", "wishlist Items . add ( position , wishlist Item ) ; }"]}
{"ids": "47976", "code": ["protected void print Band ( byte [ ] bgr Data , int x , int y , int width , int height ) throws Printer Exception {", "m PS Stream . println ( IMAGE SAVE ) ;", "int ps Bytes Per Row = NUM_ * width ;", "while ( ps Bytes Per Row > MAX PSSTR ) {", "ps Bytes Per Row /= NUM_ ; }", "m PS Stream . println ( ps Bytes Per Row + IMAGE STR ) ;", "m PS Stream . println ( STR_ + width + STR_ + STR_ + height + STR_ + x + STR_ + y + STR_ ) ;", "m PS Stream . println ( width + STR_ + height + STR_ + NUM_ + STR_ + width + STR_ + STR_ + - height + STR_ + height + STR_ + STR_ ) ;", "int index = NUM_ ;", "byte [ ] rgb Data = new byte [ width * NUM_ ] ;", "try {", "for ( int i = NUM_ ; i < height ; i ++ ) {", "index = swap BG Rto RGB ( bgr Data , index , rgb Data ) ;", "byte [ ] encoded Data = rl Encode ( rgb Data ) ;", "byte [ ] ascii Data = ascii 85 Encode ( encoded Data ) ;", "m PS Stream . write ( ascii Data ) ;", "m PS Stream . println ( STR_ ) ; } }", "catch ( IO Exception e ) {", "throw new Printer IO Exception ( e ) ; }", "m PS Stream . println ( IMAGE RESTORE ) ; }"]}
{"ids": "37257", "code": ["private void init Panel ( final I Tree Node < C Tag > root Tag ) {", "final J Panel main Panel = new J Panel ( new Border Layout ( ) ) ;", "main Panel . set Border ( new Titled Border ( STR_ ) ) ;", "create Tree ( root Tag ) ;", "final J Scroll Pane pane = new J Scroll Pane ( m tag Tree ) ;", "pane . set Vertical Scroll Bar Policy ( Scroll Pane Constants . VERTICAL SCROLLBAR AS NEEDED ) ;", "pane . set Horizontal Scroll Bar Policy ( Scroll Pane Constants . HORIZONTAL SCROLLBAR AS NEEDED ) ;", "final J Panel any Tag Panel = new J Panel ( ) ;", "any Tag Panel . add ( m any Tag Box ) ;", "main Panel . add ( pane , Border Layout . CENTER ) ;", "main Panel . add ( m any Tag Box , Border Layout . SOUTH ) ;", "add ( main Panel , Border Layout . CENTER ) ; }"]}
{"ids": "61460", "code": ["public final void append ( String value ) {", "if ( value == null ) return ;", "int strlen = value . length ( ) ;", "if ( NUM_ == strlen ) return ;", "int copyfrom = NUM_ ;", "char [ ] chunk = m array [ m last Chunk ] ;", "int available = m chunk Size - m first Free ;", "while ( strlen > NUM_ ) {", "if ( available > strlen ) available = strlen ;", "value . get Chars ( copyfrom , copyfrom + available , m array [ m last Chunk ] , m first Free ) ;", "strlen -= available ;", "copyfrom += available ;", "if ( strlen > NUM_ ) {", "int i = m array . length ;", "if ( m last Chunk + NUM_ == i ) {", "char [ ] [ ] newarray = new char [ i + NUM_ ] [ ] ;", "System . arraycopy ( m array , NUM_ , newarray , NUM_ , i ) ;", "m array = newarray ; }", "chunk = m array [ ++ m last Chunk ] ;", "if ( chunk == null ) {", "if ( m last Chunk == NUM_ << m rebundle Bits && m chunk Bits < m max Chunk Bits ) {", "m inner FSB = new Fast String Buffer ( this ) ; }", "chunk = m array [ m last Chunk ] = new char [ m chunk Size ] ; }", "available = m chunk Size ;", "m first Free = NUM_ ; } }", "m first Free += available ; }"]}
{"ids": "77006", "code": ["protected void add Prefix Match ( String Builder sb , String surface , String analyzed , String prefix Token ) {", "if ( prefix Token . length ( ) >= surface . length ( ) ) {", "add Whole Match ( sb , surface , analyzed ) ;", "return ; }", "sb . append ( STR_ ) ;", "sb . append ( surface . substring ( NUM_ , prefix Token . length ( ) ) ) ;", "sb . append ( STR_ ) ;", "sb . append ( surface . substring ( prefix Token . length ( ) ) ) ; }"]}
{"ids": "277", "code": ["public Wallet Data add Wallet ( final Bitcoin Controller bitcoin Controller , Wallet wallet , String wallet Filename ) {", "if ( wallet Filename == null ) {", "return null ; }", "for ( Wallet Data loop Model Data : per Wallet Model Data List ) {", "if ( wallet Filename . equals ( loop Model Data . get Wallet Filename ( ) ) ) {", "return loop Model Data ; } }", "Wallet Data new Per Wallet Model Data = new Wallet Data ( ) ;", "new Per Wallet Model Data . set Wallet ( wallet ) ;", "new Per Wallet Model Data . set Wallet Filename ( wallet Filename ) ;", "new Per Wallet Model Data . set Wallet Table Data List ( new Array List < Wallet Table Data > ( ) ) ;", "if ( there Is No Active Wallet ( ) ) {", "per Wallet Model Data List . remove ( active Wallet Model Data ) ;", "active Wallet Model Data = new Per Wallet Model Data ; }", "per Wallet Model Data List . add ( new Per Wallet Model Data ) ;", "if ( wallet != null ) {", "wallet . add Event Listener ( bitcoin Controller ) ; }", "create Wallet Table Data ( bitcoin Controller , wallet Filename ) ;", "create Address Book Receiving Addresses ( wallet Filename ) ;", "return new Per Wallet Model Data ; }"]}
{"ids": "22702", "code": ["public void add ( T object ) {", "synchronized ( m Lock ) {", "if ( m Original Values != null ) {", "m Original Values . add ( object ) ; }", "else {", "m Objects . add ( object ) ; } }", "if ( m Notify On Change ) notify Data Set Changed ( ) ; }"]}
{"ids": "12151", "code": ["public static String to Human Size ( long bytes Value ) {", "if ( NUM_ == bytes Value ) {", "return STR_ ; }", "boolean power Of Two = false ;", "if ( ( bytes Value & ( bytes Value - NUM_ ) ) == NUM_ ) {", "power Of Two = true ; }", "long multiple = ( long ) ( bytes Value / NUM_ ) ;", "if ( ( multiple & ( multiple - NUM_ ) ) == NUM_ ) {", "power Of Two = true ; }", "Unit unit = Unit . B ;", "if ( power Of Two ) {", "if ( bytes Value >= Unit . Ei B . value ) {", "unit = Unit . Ei B ; }", "else if ( bytes Value >= Unit . Pi B . value ) {", "unit = Unit . Pi B ; }", "else if ( bytes Value >= Unit . Ti B . value ) {", "unit = Unit . Ti B ; }", "else if ( bytes Value >= Unit . Gi B . value ) {", "unit = Unit . Gi B ; }", "else if ( bytes Value >= Unit . Mi B . value ) {", "unit = Unit . Mi B ; }", "else if ( bytes Value >= Unit . Ki B . value ) {", "unit = Unit . Ki B ; } }", "else {", "if ( bytes Value >= Unit . EB . value ) {", "unit = Unit . EB ; }", "else if ( bytes Value >= Unit . PB . value ) {", "unit = Unit . PB ; }", "else if ( bytes Value >= Unit . TB . value ) {", "unit = Unit . TB ; }", "else if ( bytes Value >= Unit . GB . value ) {", "unit = Unit . GB ; }", "else if ( bytes Value >= Unit . MB . value ) {", "unit = Unit . MB ; }", "else if ( bytes Value >= Unit . KB . value ) {", "unit = Unit . KB ; } }", "double val = ( bytes Value / unit . get Value ( ) ) ;", "double rounded Value = Math . round ( val * NUM_ ) / NUM_ ;", "Big Decimal my Decimal = Big Decimal . value Of ( rounded Value ) ;", "Big Decimal updated = my Decimal . strip Trailing Zeros ( ) ;", "return updated . to Plain String ( ) + unit . name ( ) ; }"]}
{"ids": "48015", "code": ["public boolean equals ( Object another ) {", "if ( another instanceof Permission ) {", "Permission p = ( Permission ) another ;", "return permission . equals ( p . to String ( ) ) ; }", "else {", "return false ; } }"]}
{"ids": "75902", "code": ["public static Intent build Start In Terminal Intent ( File script ) {", "final Component Name component Name = Constants . SL 4 A SERVICE LAUNCHER COMPONENT NAME ;", "Intent intent = new Intent ( ) ;", "intent . set Component ( component Name ) ;", "intent . set Action ( Constants . ACTION LAUNCH FOREGROUND SCRIPT ) ;", "intent . put Extra ( Constants . EXTRA SCRIPT PATH , script . get Absolute Path ( ) ) ;", "return intent ; }"]}
{"ids": "1339", "code": ["public Document load Document ( Resource file ) throws SAX Exception , IO Exception {", "DOM Parser parser = new DOM Parser ( ) ;", "Input Stream in = null ;", "try {", "in = file . get Input Stream ( ) ;", "Input Source source = new Input Source ( in ) ;", "parser . parse ( source ) ; }", "finally {", "IO Util . close EL ( in ) ; }", "return parser . get Document ( ) ; }"]}
{"ids": "11586", "code": ["public void reset Filters ( Boolean enabled ) {", "if ( logger . is Loggable ( Level . FINE ) ) {", "logger . fine ( STR_ + enabled ) ; }", "Set keys = filters . key Set ( ) ;", "for ( Iterator it = keys . iterator ( ) ; it . has Next ( ) ; ) {", "String title = ( String ) it . next ( ) ;", "set Filter Value ( title , enabled ) ; }", "update Interface ( ) ; }"]}
{"ids": "23774", "code": ["@ Override public boolean generate Event ID ( ) {", "return true ; }"]}
{"ids": "26781", "code": ["private void update Utility ( ) {", "for ( Individual individual : population ) {", "double old Fitness = individual . get Fitness ( ) ;", "double new Fitness = fitness ( individual . get Solution ( ) , ideal Point ) ;", "double relative Decrease = old Fitness - new Fitness ;", "if ( relative Decrease > NUM_ ) {", "individual . set Utility ( NUM_ ) ; }", "else {", "double utility = Math . min ( NUM_ , NUM_ * ( NUM_ + delta / NUM_ ) * individual . get Utility ( ) ) ;", "individual . set Utility ( utility ) ; }", "individual . set Fitness ( new Fitness ) ; } }"]}
{"ids": "80351", "code": ["private void write Keys With Prefix ( String prefix ) {", "for ( String key : keys ) {", "if ( key . starts With ( prefix ) ) {", "ps . println ( key + STR_ + prop . get Property ( key ) ) ; } }", "ps . println ( ) ; }"]}
{"ids": "50185", "code": ["public List < Operation > send And Wait ( List < Operation > ops ) {", "return send And Wait ( ops , true ) ; }"]}
{"ids": "50361", "code": ["public static void copy ( byte [ ] in , Output Stream out ) throws IO Exception {", "Assert . not Null ( in , STR_ ) ;", "Assert . not Null ( out , STR_ ) ;", "try {", "out . write ( in ) ; }", "finally {", "try {", "out . close ( ) ; }", "catch ( IO Exception ex ) { } } }"]}
{"ids": "14222", "code": ["public Action map To XACML Action ( String native Action Name , String service Name ) throws XACML Exception {", "return null ; }"]}
{"ids": "46376", "code": ["private int next Int ( String Tokenizer tok , String error Msg ) throws SAX Exception {", "if ( ! tok . has More Tokens ( ) ) {", "throw new SAX Exception ( error Msg ) ; }", "try {", "return Integer . parse Int ( tok . next Token ( ) ) ; }", "catch ( Number Format Exception nfe ) {", "throw new SAX Exception ( error Msg ) ; } }"]}
{"ids": "30488", "code": ["public Calculable ( String id , double value ) {", "set Id ( id ) ;", "set Value ( value ) ;", "set When ( System . current Time Millis ( ) ) ; }"]}
{"ids": "34596", "code": ["public static boolean bookmark Node Exists ( Context context , long node Id ) {", "Boolean result = chrome Browser Provider Call ( Boolean . class , Chrome Browser Provider . CLIENT API BOOKMARK NODE EXISTS , context , args To Bundle ( node Id ) ) ;", "return result != null ? result . boolean Value ( ) : false ; }"]}
{"ids": "72822", "code": ["private void execute Tasks Simultaneously With Barrier ( Runnable ... tasks ) throws Interrupted Exception {", "Count Down Latch latch = new Count Down Latch ( tasks . length ) ;", "for ( Runnable task : tasks ) {", "executor . execute ( null ) ; }", "latch . await ( ) ; }"]}
{"ids": "39050", "code": ["private boolean is Operator ( char tok ) {", "if ( OPERATORS . index Of ( tok ) == - NUM_ ) {", "return false ; }", "return true ; }"]}
{"ids": "85501", "code": ["protected String format Iterable ( JC Diagnostic d , Iterable < ? > it , Locale l ) {", "String Builder sbuf = new String Builder ( ) ;", "String sep = STR_ ;", "for ( Object o : it ) {", "sbuf . append ( sep ) ;", "sbuf . append ( format Argument ( d , o , l ) ) ;", "sep = STR_ ; }", "return sbuf . to String ( ) ; }"]}
{"ids": "29930", "code": ["public void end Representation ( ) {", "if ( ! representation Protections Set ) {", "if ( current Representation Protections != null ) {", "Collections . sort ( current Representation Protections , this ) ; }", "representation Protections = current Representation Protections ;", "representation Protections Set = true ; }", "else {", "if ( current Representation Protections == null ) {", "Assertions . check State ( representation Protections == null ) ; }", "else {", "Collections . sort ( current Representation Protections , this ) ;", "Assertions . check State ( current Representation Protections . equals ( representation Protections ) ) ; } }", "current Representation Protections = null ; }"]}
{"ids": "5021", "code": ["private static char [ ] zz Unpack C Map ( String packed ) {", "char [ ] map = new char [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < NUM_ ) {", "int count = packed . char At ( i ++ ) ;", "char value = packed . char At ( i ++ ) ;", "do map [ j ++ ] = value ;", "while ( -- count > NUM_ ) ; }", "return map ; }"]}
{"ids": "85578", "code": ["public static Module Version value Of ( String string ) {", "return parse Version ( string ) ; }"]}
{"ids": "374", "code": ["@ Override public boolean equals ( Object other Obj ) {", "if ( other Obj instanceof P 2 Model ) {", "return content . equals ( ( ( P 2 Model ) other Obj ) . content ) ; }", "else {", "return false ; } }"]}
{"ids": "59419", "code": ["public boolean show Icons ( ) {", "return preferences . get Boolean ( resources . get String ( R . string . key show icons ) , Boolean . parse Boolean ( resources . get String ( R . string . default show icons ) ) ) ; }"]}
{"ids": "39342", "code": ["private boolean check For Key ( ) throws Exception {", "String query = m query ;", "query = query . replace All ( STR_ , STR_ ) ;", "if ( ! query . starts With ( STR_ ) ) {", "return false ; }", "m order By . clear ( ) ;", "if ( ! m Data Base Connection . is Connected ( ) ) {", "m Data Base Connection . connect To Database ( ) ; }", "Database Meta Data dmd = m Data Base Connection . get Meta Data ( ) ;", "String table = end Of Query ( true ) ;", "Result Set rs = dmd . get Primary Keys ( null , null , table ) ;", "while ( rs . next ( ) ) {", "m order By . add ( rs . get String ( NUM_ ) ) ; }", "rs . close ( ) ;", "if ( m order By . size ( ) != NUM_ ) {", "return true ; }", "rs = dmd . get Best Row Identifier ( null , null , table , Database Meta Data . best Row Session , false ) ;", "Result Set Meta Data rmd = rs . get Meta Data ( ) ;", "int help = NUM_ ;", "while ( rs . next ( ) ) {", "m order By . add ( rs . get String ( NUM_ ) ) ;", "help ++ ; }", "rs . close ( ) ;", "if ( help == rmd . get Column Count ( ) ) {", "m order By . clear ( ) ; }", "if ( m order By . size ( ) != NUM_ ) {", "return true ; }", "return false ; }"]}
{"ids": "32394", "code": ["public Ignite Striped Thread Pool Executor ( int concurrent Lvl , String grid Name , String thread Name Prefix ) {", "execs = new Executor Service [ concurrent Lvl ] ;", "Thread Factory factory = new Ignite Thread Factory ( grid Name , thread Name Prefix ) ;", "for ( int i = NUM_ ; i < concurrent Lvl ; i ++ ) execs [ i ] = Executors . new Single Thread Executor ( factory ) ; }"]}
{"ids": "4316", "code": ["public static boolean is Zip ( Buffered Input Stream in ) {", "in . mark ( NUM_ ) ;", "byte [ ] b = new byte [ NUM_ ] ;", "byte [ ] zip Sig = new byte [ NUM_ ] ;", "zip Sig [ NUM_ ] = NUM_ ;", "zip Sig [ NUM_ ] = NUM_ ;", "zip Sig [ NUM_ ] = NUM_ ;", "zip Sig [ NUM_ ] = NUM_ ;", "try {", "in . read ( b , NUM_ , NUM_ ) ; }", "catch ( Exception ex ) {", "throw new Runtime Exception ( STR_ , ex ) ; }", "try {", "in . reset ( ) ; }", "catch ( Exception ex ) {", "throw new Runtime Exception ( STR_ , ex ) ; }", "return Arrays . equals ( b , zip Sig ) ; }"]}
{"ids": "5708", "code": ["public List < String > extract ( Configuration config ) {", "List < String > features = new Array List < String > ( ) ;", "for ( Extractor fe : extractors ) {", "features . add ( fe . extract ( config ) ) ; }", "return features ; }"]}
{"ids": "13773", "code": ["public void handle Tbl Data Action Href Request ( Request Invocation Event event ) {", "Agents Model model = ( Agents Model ) get Model ( ) ;", "String agent Type = get Display ID Type ( ) ;", "String universal Id = hex To String ( ( String ) get Display Field Value ( TBL DATA ACTION HREF ) ) ;", "set Page Session Attribute ( Agent Profile View Bean . UNIVERSAL ID , universal Id ) ;", "SSO Token sso Token = model . get User SSO Token ( ) ;", "String realm = ( String ) get Page Session Attribute ( AM Admin Constants . CURRENT REALM ) ;", "String Tokenizer st = new String Tokenizer ( universal Id , STR_ ) ;", "st . next Token ( ) ;", "String agent Name = st . next Token ( ) ;", "try {", "AM Identity amid = new AM Identity ( sso Token , agent Name , Id Type . AGENTONLY , realm , null ) ;", "if ( agent Type . equals ( Agents View Bean . AGENT WEB ) || ( agent Type . equals ( Agents View Bean . DEFAULT ID TYPE ) ) ) {", "if ( is Properties Locally Stored ( amid ) ) {", "set Page Session Attribute ( LOCAL OR NOT , PROP LOCAL ) ; }", "else {", "set Page Session Attribute ( LOCAL OR NOT , PROP CENTRAL ) ; } }", "Class clazz = get Agent Customized View Bean ( model . get Agent Type ( amid ) ) ;", "AM View Bean Base vb = ( AM View Bean Base ) get View Bean ( clazz ) ;", "set Page Session Attribute ( PG SESSION SUPERCEDE AGENT TYPE , model . get Agent Type ( amid ) ) ;", "remove Page Session Attribute ( Generic Agent Profile View Bean . PS TABNAME ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( Id Repo Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , model . get Error String ( e ) ) ;", "forward To ( ) ; }", "catch ( SSO Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , model . get Error String ( e ) ) ;", "forward To ( ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , model . get Error String ( e ) ) ;", "forward To ( ) ; }", "catch ( Class Not Found Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , model . get Error String ( e ) ) ;", "forward To ( ) ; } }"]}
{"ids": "75746", "code": ["@ Override protected boolean check ( File item ) {", "return item . exists ( ) ; }"]}
{"ids": "72059", "code": ["public Property Value Editor ( Console Application app , Management Context context ) {", "this . app = app ;", "this . context = context ; }"]}
{"ids": "23505", "code": ["@ Override public void to Data ( Data Output out ) throws IO Exception {", "out . write Int ( max Inactive Interval ) ;", "out . write Long ( last Accessed Time ) ;", "synchronized ( attributes ) {", "out . write Int ( attributes . size ( ) ) ;", "for ( Map . Entry < String , Object > entry : attributes . entry Set ( ) ) {", "Delta Event delta = new Delta Event ( true , entry . get Key ( ) , entry . get Value ( ) ) ;", "Data Serializer . write Object ( delta , out ) ; } }", "out . write UTF ( jvm Owner Id ) ; }"]}
{"ids": "70268", "code": ["public void create Victory Conditions ( ) {", "victory = vf . create Victory ( STR_ ) ; }"]}
{"ids": "84963", "code": ["public static I Status validate Qualified Module Name ( String qualified Name ) {", "String pckg = Signature . get Qualifier ( qualified Name ) ;", "if ( ! Util . is Valid Package Name ( pckg ) ) {", "return Util . new Error Status ( STR_ ) ; }", "return validate Simple Module Name ( Signature . get Simple Name ( qualified Name ) ) ; }"]}
{"ids": "55726", "code": ["public static < T 1 , T 2 > Map < T 1 , T 2 > synchronized Map ( ) {", "return Collections . synchronized Map ( new Hash Map < T 1 , T 2 > ( ) ) ; }"]}
{"ids": "33820", "code": ["private final int filter Status Bytes ( byte [ ] src , byte [ ] dest , int total Bytes Read , int max Packet Size ) {", "final int packets Count = total Bytes Read / max Packet Size + ( total Bytes Read % max Packet Size == NUM_ ? NUM_ : NUM_ ) ;", "for ( int packet Idx = NUM_ ; packet Idx < packets Count ; ++ packet Idx ) {", "final int count = ( packet Idx == ( packets Count - NUM_ ) ) ? ( total Bytes Read % max Packet Size ) - MODEM STATUS HEADER LENGTH : max Packet Size - MODEM STATUS HEADER LENGTH ;", "if ( count > NUM_ ) {", "System . arraycopy ( src , packet Idx * max Packet Size + MODEM STATUS HEADER LENGTH , dest , packet Idx * ( max Packet Size - MODEM STATUS HEADER LENGTH ) , count ) ; } }", "return total Bytes Read - ( packets Count * NUM_ ) ; }"]}
{"ids": "37517", "code": ["public boolean contains ( String key ) {", "return m Shared Preferences . contains ( key ) ; }"]}
{"ids": "22721", "code": ["int register Miss ( ) {", "return misses . increment And Get ( ) ; }"]}
{"ids": "82612", "code": ["private void update Base Matrix ( Drawable d ) {", "Image View image View = get Image View ( ) ;", "if ( null == image View || null == d ) {", "return ; }", "final float view Width = image View . get Width ( ) ;", "final float view Height = image View . get Height ( ) ;", "final int drawable Width = d . get Intrinsic Width ( ) ;", "final int drawable Height = d . get Intrinsic Height ( ) ;", "m Base Matrix . reset ( ) ;", "final float width Scale = view Width / drawable Width ;", "final float height Scale = view Height / drawable Height ;", "if ( m Scale Type == Scale Type . CENTER ) {", "m Base Matrix . post Translate ( ( view Width - drawable Width ) / NUM_ , ( view Height - drawable Height ) / NUM_ ) ; }", "else if ( m Scale Type == Scale Type . CENTER CROP ) {", "float scale = Math . max ( width Scale , height Scale ) ;", "m Base Matrix . post Scale ( scale , scale ) ;", "m Base Matrix . post Translate ( ( view Width - drawable Width * scale ) / NUM_ , ( view Height - drawable Height * scale ) / NUM_ ) ; }", "else if ( m Scale Type == Scale Type . CENTER INSIDE ) {", "float scale = Math . min ( NUM_ , Math . min ( width Scale , height Scale ) ) ;", "m Base Matrix . post Scale ( scale , scale ) ;", "m Base Matrix . post Translate ( ( view Width - drawable Width * scale ) / NUM_ , ( view Height - drawable Height * scale ) / NUM_ ) ; }", "else {", "Rect F m Temp Src = new Rect F ( NUM_ , NUM_ , drawable Width , drawable Height ) ;", "Rect F m Temp Dst = new Rect F ( NUM_ , NUM_ , view Width , view Height ) ;", "switch ( m Scale Type ) {", "case FIT CENTER :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . CENTER ) ;", "break ;", "case FIT START :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . START ) ;", "break ;", "case FIT END :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . END ) ;", "break ;", "case FIT XY :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . FILL ) ;", "break ;", "default :", "break ; } }", "reset Matrix ( ) ; }"]}
{"ids": "40592", "code": ["public static Char Sequence partial Escape ( Char Sequence s ) {", "String Builder sb = new String Builder ( ) ;", "for ( int i = NUM_ ; i < s . length ( ) ; i ++ ) {", "char c = s . char At ( i ) ;", "if ( c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ || c == STR_ ) {", "sb . append ( STR_ ) ; }", "sb . append ( c ) ; }", "return sb ; }"]}
{"ids": "67912", "code": ["public void finished ( long work , long latency ) {", "finished Updater . get And Increment ( this ) ;", "total Work Updater . get And Add ( this , work ) ;", "total Work Squared Updater . get And Add ( this , work * work ) ;", "total Latency Updater . get And Add ( this , latency ) ;", "total Latency Squared Updater . get And Add ( this , latency * latency ) ; }"]}
{"ids": "64871", "code": ["public void close ( ) throws IO Exception {", "if ( m Input Stream != null ) {", "m Input Stream . close ( ) ; }", "else {", "throw new IO Exception ( STR_ ) ; }", "m Input Stream = null ; }"]}
{"ids": "49276", "code": ["private Windows Security Descriptor ( ) {", "this . sid List = null ;", "this . acl Buffer = null ;", "this . sd Buffer = null ; }"]}
{"ids": "29106", "code": ["public void print Usage ( Output Stream os ) {", "int count = NUM_ ;", "Print Stream out = UTF 8 . print Stream ( os ) ;", "for ( String option : option List ) {", "if ( option Groups . contains Key ( count ) ) {", "out . println ( STR_ + option Groups . get ( count ) ) ; }", "count ++ ;", "if ( unlisted Options . contains ( option ) ) {", "continue ; }", "out . print ( STR_ ) ;", "String Builder buf = new String Builder ( ) ;", "buf . append ( option ) ;", "if ( option Extra Part Synopsis Map . get ( option ) != null ) {", "String option Extra Part Synopsis = option Extra Part Synopsis Map . get ( option ) ;", "buf . append ( STR_ ) ;", "buf . append ( option Extra Part Synopsis ) ;", "buf . append ( STR_ ) ; }", "if ( requires Argument Set . contains ( option ) ) {", "buf . append ( STR_ ) ;", "buf . append ( argument Description Map . get ( option ) ) ;", "buf . append ( STR_ ) ; }", "print Field ( out , buf . to String ( ) , max Width + NUM_ ) ;", "out . println ( option Description Map . get ( option ) ) ; }", "out . flush ( ) ; }"]}
{"ids": "65279", "code": ["public void clear Shared Variables ( ) {", "shared Variables . clear ( ) ;", "load Built In Shared Variables ( ) ; }"]}
{"ids": "64275", "code": ["public final void send Packet ( Ls Server Packet bp ) {", "synchronized ( guard ) {", "if ( is Write Disabled ( ) ) {", "return ; }", "log . debug ( STR_ + bp ) ;", "send Msg Queue . add Last ( bp ) ;", "enable Write Interest ( ) ; } }"]}
{"ids": "31888", "code": ["private static Map < String , Object > process Section ( String section , Collection < Map < String , Object > > hosts , Map < String , Object > dflts , Map < String , Object > props ) throws Ignite Checked Exception {", "if ( section == null || props == null ) return null ;", "if ( DFLT SECTION . equals Ignore Case ( section ) ) {", "if ( dflts != null ) throw new Ignite Checked Exception ( STR_ + DFLT SECTION + STR_ ) ;", "return props ; }", "else {", "hosts . add ( props ) ;", "return null ; } }"]}
{"ids": "39819", "code": ["public boolean is Set ( final OPTION option ) {", "return options == null ? false : options . contains ( option ) ; }"]}
{"ids": "13724", "code": ["public void handle Button 1 Request ( Request Invocation Event event ) throws Model Control Exception {", "List option Data = restore Options Data ( ) ;", "CC Check Box cb Force Reset Pwd = ( CC Check Box ) get Child ( CB FORCE RESET PWD ) ;", "boolean force Reset Pwd = cb Force Reset Pwd . is Checked ( ) ;", "UM User Password Reset Options Model model = ( UM User Password Reset Options Model ) get Model ( ) ;", "String user Id = ( String ) get Page Session Attribute ( Entity Edit View Bean . UNIVERSAL ID ) ;", "try {", "model . modify User Option ( option Data , user Id , force Reset Pwd ) ;", "set Inline Alert Message ( CC Alert . TYPE INFO , STR_ , model . get Localized String ( STR_ ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ; }", "forward To ( ) ; }"]}
{"ids": "13626", "code": ["Number Strategy ( final int field ) {", "this . field = field ; }"]}
{"ids": "37709", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "50179", "code": ["@ Override public boolean queue Request ( Operation op ) {", "Authorization Context ctx = op . get Authorization Context ( ) ;", "if ( ctx == null ) {", "op . fail ( new Illegal Argument Exception ( STR_ ) ) ;", "return true ; }", "Claims claims = ctx . get Claims ( ) ;", "if ( claims == null ) {", "op . fail ( new Illegal Argument Exception ( STR_ ) ) ;", "return true ; }", "String subject = claims . get Subject ( ) ;", "if ( subject == null ) {", "op . fail ( new Illegal Argument Exception ( STR_ ) ) ;", "return true ; }", "if ( op . has Pragma Directive ( Operation . PRAGMA DIRECTIVE CLEAR AUTH CACHE ) ) {", "return handle Cache Clear Request ( op , subject ) ; }", "if ( subject . equals ( System User Service . SELF LINK ) ) {", "op . complete ( ) ;", "return true ; }", "if ( ctx . get Resource Query Filter ( op . get Action ( ) ) != null ) {", "op . complete ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "75940", "code": ["public Spannable String Builder ( Char Sequence text ) {", "this ( text , NUM_ , text . length ( ) ) ; }"]}
{"ids": "23986", "code": ["public boolean has Extra Fields ( Pdx Type other ) {", "for ( Pdx Field ft : this . fields ) {", "if ( ! ft . is Deleted ( ) && other . get Pdx Field ( ft . get Field Name ( ) ) == null ) {", "return true ; } }", "return false ; }"]}
{"ids": "49365", "code": ["public void put ( String id , String str ) {", "tab . put ( id , str ) ;", "if ( str . ends With ( STR_ ) ) {", "int i = str . last Index Of ( File . separator ) ;", "if ( i >= NUM_ ) {", "tab . put ( str . substring ( i + NUM_ , str . length ( ) - NUM_ ) , str ) ; } } }"]}
{"ids": "33784", "code": ["private void assert Read Varint ( byte [ ] data , long value ) throws Exception {", "Coded Input Stream input = Coded Input Stream . new Instance ( data ) ;", "assert Equals ( ( int ) value , input . read Raw Varint 32 ( ) ) ;", "assert Data Consumed ( data , input ) ;", "input = Coded Input Stream . new Instance ( data ) ;", "assert Equals ( value , input . read Raw Varint 64 ( ) ) ;", "assert Data Consumed ( data , input ) ;", "input = Coded Input Stream . new Instance ( data ) ;", "assert Equals ( value , input . read Raw Varint 64 Slow Path ( ) ) ;", "assert Data Consumed ( data , input ) ;", "input = Coded Input Stream . new Instance ( data ) ;", "assert True ( input . skip Field ( Wire Format . WIRETYPE VARINT ) ) ;", "assert Data Consumed ( data , input ) ;", "for ( int block Size = NUM_ ; block Size <= NUM_ ; block Size *= NUM_ ) {", "input = Coded Input Stream . new Instance ( new Small Block Input Stream ( data , block Size ) ) ;", "assert Equals ( ( int ) value , input . read Raw Varint 32 ( ) ) ;", "assert Data Consumed ( data , input ) ;", "input = Coded Input Stream . new Instance ( new Small Block Input Stream ( data , block Size ) ) ;", "assert Equals ( value , input . read Raw Varint 64 ( ) ) ;", "assert Data Consumed ( data , input ) ;", "input = Coded Input Stream . new Instance ( new Small Block Input Stream ( data , block Size ) ) ;", "assert Equals ( value , input . read Raw Varint 64 Slow Path ( ) ) ;", "assert Data Consumed ( data , input ) ;", "input = Coded Input Stream . new Instance ( new Small Block Input Stream ( data , block Size ) ) ;", "assert True ( input . skip Field ( Wire Format . WIRETYPE VARINT ) ) ;", "assert Data Consumed ( data , input ) ; }", "byte [ ] longer Data = new byte [ data . length + NUM_ ] ;", "System . arraycopy ( data , NUM_ , longer Data , NUM_ , data . length ) ;", "Input Stream raw Input = new Byte Array Input Stream ( longer Data ) ;", "assert Equals ( ( int ) value , Coded Input Stream . read Raw Varint 32 ( raw Input ) ) ;", "assert Equals ( NUM_ , raw Input . available ( ) ) ; }"]}
{"ids": "83207", "code": ["public void report Occurences ( List < Map < Id < Vehicle > , Integer > > maps ) {", "for ( int m = NUM_ ; m < maps . size ( ) ; m ++ ) {", "Map < Id < Vehicle > , Integer > the Map = maps . get ( m ) ;", "log . info ( STR_ + ( m + NUM_ ) + STR_ + the Map . size ( ) + STR_ ) ;", "Integer min = Integer . MAX VALUE ;", "Integer max = Integer . MIN VALUE ;", "for ( Id < Vehicle > id : the Map . key Set ( ) ) {", "min = Math . min ( min , the Map . get ( id ) ) ;", "max = Math . max ( max , the Map . get ( id ) ) ; }", "log . info ( STR_ + min + STR_ + max ) ;", "List < Id < Link > > hist List = new Array List < > ( ) ;", "Map < Id < Link > , Integer > hist Map = new Hash Map < Id < Link > , Integer > ( ) ;", "for ( long h = min ; h <= max ; h ++ ) {", "Id < Link > id = Id . create ( h , Link . class ) ;", "hist List . add ( id ) ;", "hist Map . put ( id , new Integer ( NUM_ ) ) ; }", "for ( Id < Vehicle > id : the Map . key Set ( ) ) {", "int value = the Map . get ( id ) ;", "hist Map . put ( Id . create ( value , Link . class ) , new Integer ( hist Map . get ( Id . create ( value , Link . class ) ) + NUM_ ) ) ; }", "String s = STR_ ;", "for ( Id < Link > id : hist List ) {", "s += id . to String ( ) + STR_ + hist Map . get ( id ) + STR_ ; }", "log . info ( STR_ ) ;", "log . info ( STR_ + s ) ; } }"]}
{"ids": "21300", "code": ["public static List < URI > ref Ids ( Collection < ? extends Related Resource Rep > refs ) {", "List < URI > ids = new Array List < URI > ( ) ;", "if ( refs != null ) {", "for ( Related Resource Rep ref : refs ) {", "ids . add ( ref . get Id ( ) ) ; } }", "return ids ; }"]}
{"ids": "68221", "code": ["public static void cache Imgs ( String skin Img Dir , Iterable < String > base Image UR Ls ) {", "String skin Dir = get Skin Dir ( ) ;", "for ( String img : base Image UR Ls ) {", "img = img . replace ( STR_ , skin Dir + STR_ ) ;", "img = img . replace ( STR_ , skin Dir + skin Img Dir ) ;", "Image . prefetch ( img ) ; } }"]}
{"ids": "69440", "code": ["public static String separators To Unix ( String path ) {", "if ( path == null || path . index Of ( WINDOWS SEPARATOR ) == - NUM_ ) {", "return path ; }", "return path . replace ( WINDOWS SEPARATOR , UNIX SEPARATOR ) ; }"]}
{"ids": "59445", "code": ["public void clear Buffer ( ) {", "buffer . clear ( ) ; }"]}
{"ids": "42337", "code": ["@ Override public final void perform ( IR ir ) {", "java . util . Hash Map < Register , Register > new Map = new java . util . Hash Map < Register , Register > ( NUM_ ) ;", "for ( Enumeration < Basic Block > be = ir . get Basic Blocks ( ) ; be . has More Elements ( ) ; ) {", "Basic Block bb = be . next Element ( ) ;", "for ( Enumeration < Instruction > ie = bb . forward Instr Enumerator ( ) ; ie . has More Elements ( ) ; ) {", "Instruction s = ie . next Element ( ) ; ;", "new Map . clear ( ) ;", "if ( s . is PEI ( ) && s . operator ( ) != IR PROLOGUE ) {", "if ( bb . has Applicable Exceptional Out ( s ) || ! Register Restrictions . SCRATCH IN PEI ) {", "split All Live Ranges ( s , new Map , ir , false ) ; } }", "switch ( s . get Opcode ( ) ) {", "case MIR LOWTABLESWITCH opcode : {", "Register Operand r Op = MIR Low Table Switch . get Index ( s ) ;", "Register Operand temp = find Or Create Temp ( r Op , new Map , ir ) ;", "insert Move Before ( temp , r Op . copy RO ( ) , s ) ;", "r Op . set Register ( temp . get Register ( ) ) ; }", "break ; } } } }"]}
{"ids": "80219", "code": ["protected void append String ( final String text ) {", "final HTML Document doc = ( HTML Document ) text Pane . get Document ( ) ;", "try {", "final Element root = doc . get Paragraph Element ( NUM_ ) ;", "doc . insert Before End ( root , text ) ; }", "catch ( final Bad Location Exception e ) {", "logger . error ( e , e ) ; }", "catch ( final IO Exception e ) {", "logger . error ( e , e ) ; } }"]}
{"ids": "67027", "code": ["public void scale To Samples ( int usr Samples ) {", "double ratio ;", "ratio = ( double ) usr Samples / count ;", "count = NUM_ ;", "for ( int i = NUM_ ; i <= limits . length ; ++ i ) {", "results [ i ] = ( int ) Math . round ( results [ i ] * ratio ) ;", "count += results [ i ] ; } }"]}
{"ids": "67154", "code": ["private void refresh Selected ( int offset X ) {", "int offset = ( int ) ( offset X + m Max Over Scroll Distance ) ;", "int temp Index = Math . round ( offset / m Interval Dis ) ;", "temp Index = clamp Selected Index ( temp Index ) ;", "if ( m Selected Index == temp Index ) {", "return ; }", "m Selected Index = temp Index ;", "if ( null != on Value Change Listener ) {", "on Value Change Listener . on Change ( this , m Selected Index , Float . parse Float ( format ( m Selected Index * m Interval Value + m Min Value ) ) ) ; } }"]}
{"ids": "74116", "code": ["@ Override @ Suppress Warnings ( STR_ ) public void reset Frame ( ) {", "synchronized ( lock ) {", "sys Name . set Text ( STR_ + counter ++ ) ; }", "user Name . set Text ( null ) ;", "url . set Text ( null ) ;", "stream . set Selected ( false ) ;", "stream . set Enabled ( false ) ;", "loop Start . set Value ( Long . value Of ( NUM_ ) ) ;", "loop End . set Value ( Long . value Of ( NUM_ ) ) ;", "this . new Buffer = true ; }"]}
{"ids": "72932", "code": ["public Expected Records < T > repeat All ( int times ) {", "List < T > to Append = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < times ; i ++ ) {", "to Append . add All ( expected Records ) ; }", "expected Records . add All ( to Append ) ;", "return this ; }"]}
{"ids": "71735", "code": ["protected static Geo Point parse Kml Coord ( String input ) {", "int end 1 = input . index Of ( STR_ ) ;", "int end 2 = input . index Of ( STR_ , end 1 + NUM_ ) ;", "try {", "if ( end 2 == - NUM_ ) {", "double lon = Double . parse Double ( input . substring ( NUM_ , end 1 ) ) ;", "double lat = Double . parse Double ( input . substring ( end 1 + NUM_ , input . length ( ) ) ) ;", "return new Geo Point ( lat , lon ) ; }", "else {", "double lon = Double . parse Double ( input . substring ( NUM_ , end 1 ) ) ;", "double lat = Double . parse Double ( input . substring ( end 1 + NUM_ , end 2 ) ) ;", "double alt = Double . parse Double ( input . substring ( end 2 + NUM_ , input . length ( ) ) ) ;", "return new Geo Point ( lat , lon , alt ) ; } }", "catch ( Number Format Exception e ) {", "return null ; }", "catch ( Index Out Of Bounds Exception e ) {", "return null ; } }"]}
{"ids": "84017", "code": ["@ Nullable public Calendar detect Date ( String input ) {", "check Not Null ( input ) ;", "Time . set Time Zone ( get Time Zone ( ) ) ;", "Options opt = new com . sk 89 q . jchronic . Options ( ) ;", "opt . set Now ( Calendar . get Instance ( get Time Zone ( ) ) ) ;", "Span date = Chronic . parse ( input , opt ) ;", "if ( date == null ) {", "return null ; }", "else {", "return date . get Begin Calendar ( ) ; } }"]}
{"ids": "77536", "code": ["public synchronized void save Commit Point ( Long index Commit Gen ) {", "Atomic Integer reserve Count = saved Commits . get ( index Commit Gen ) ;", "if ( reserve Count == null ) reserve Count = new Atomic Integer ( ) ;", "reserve Count . increment And Get ( ) ;", "saved Commits . put ( index Commit Gen , reserve Count ) ; }"]}
{"ids": "1588", "code": ["public void remove Searchable ( Search Result searchable ) {", "if ( searchables . contains ( searchable ) ) searchables . remove ( search ) ; }"]}
{"ids": "35414", "code": ["public static boolean is 64 bit ( ) {", "boolean is 64 bit = false ;", "if ( is Windows ( ) ) {", "is 64 bit = ( System . getenv ( STR_ ) != null ) ; }", "else {", "is 64 bit = ( OS ARCH . contains ( STR_ ) ) ; }", "return is 64 bit ; }"]}
{"ids": "81166", "code": ["private int resolve Size And State Respecting Min Size ( int min Size , int measured Size , int measure Spec ) {", "if ( min Size != SIZE UNSPECIFIED ) {", "final int desired Width = Math . max ( min Size , measured Size ) ;", "return resolve Size And State ( desired Width , measure Spec , NUM_ ) ; }", "else {", "return measured Size ; } }"]}
{"ids": "52656", "code": ["public static boolean delete Directory And Contents ( File root Directory ) {", "if ( ( root Directory == null ) || ! root Directory . is Directory ( ) ) {", "return false ; }", "try {", "String [ ] directory Contents = root Directory . list ( ) ;", "for ( int i = NUM_ ; i < directory Contents . length ; i ++ ) {", "boolean success = delete Directory And Contents ( new File ( root Directory , directory Contents [ i ] ) ) ;", "if ( ! success ) {", "return false ; } }", "return root Directory . delete ( ) ; }", "catch ( Exception e ) {", "logger . debug ( e . to String ( ) + System . line Separator ( ) + Stack Trace . get String From Stack Trace ( e ) ) ;", "return false ; } }"]}
{"ids": "23933", "code": ["public static void nanosleep ( long nanos ) throws Interrupted Exception {", "if ( Thread . interrupted ( ) ) throw new Interrupted Exception ( ) ;", "if ( nanos <= NUM_ ) {", "return ; }", "if ( nanos >= NUM_ ) {", "Thread . sleep ( nanos / NUM_ , ( int ) ( nanos % NUM_ ) ) ; }", "else {", "if ( pure Mode ) {", "Thread . yield ( ) ; }", "else {", "nanosleep ( ( int ) nanos ) ; } } }"]}
{"ids": "33192", "code": ["int pure Length ( ) {", "return length - delimiter . length ( ) ; }"]}
{"ids": "38398", "code": ["protected void draw Arrow ( Graphics g , int x 1 , int y 1 , int x 2 , int y 2 ) {", "if ( x 1 == x 2 ) {", "if ( y 1 < y 2 ) {", "g . draw Line ( x 2 , y 2 , x 2 + NUM_ , y 2 - NUM_ ) ;", "g . draw Line ( x 2 , y 2 , x 2 - NUM_ , y 2 - NUM_ ) ; }", "else {", "g . draw Line ( x 2 , y 2 , x 2 + NUM_ , y 2 + NUM_ ) ;", "g . draw Line ( x 2 , y 2 , x 2 - NUM_ , y 2 + NUM_ ) ; } }", "else {", "double hyp = NUM_ , base = NUM_ , perp = NUM_ , theta , beta ;", "int x 3 = NUM_ , y 3 = NUM_ ;", "if ( x 2 < x 1 ) {", "base = x 1 - x 2 ;", "hyp = Math . sqrt ( ( x 2 - x 1 ) * ( x 2 - x 1 ) + ( y 2 - y 1 ) * ( y 2 - y 1 ) ) ;", "theta = Math . acos ( base / hyp ) ; }", "else {", "base = x 1 - x 2 ;", "hyp = Math . sqrt ( ( x 2 - x 1 ) * ( x 2 - x 1 ) + ( y 2 - y 1 ) * ( y 2 - y 1 ) ) ;", "theta = Math . acos ( base / hyp ) ; }", "beta = NUM_ * Math . PI / NUM_ ;", "hyp = NUM_ ;", "base = Math . cos ( theta - beta ) * hyp ;", "perp = Math . sin ( theta - beta ) * hyp ;", "x 3 = ( int ) ( x 2 + base ) ;", "if ( y 1 < y 2 ) {", "y 3 = ( int ) ( y 2 - perp ) ; }", "else {", "y 3 = ( int ) ( y 2 + perp ) ; }", "g . draw Line ( x 2 , y 2 , x 3 , y 3 ) ;", "base = Math . cos ( theta + beta ) * hyp ;", "perp = Math . sin ( theta + beta ) * hyp ;", "x 3 = ( int ) ( x 2 + base ) ;", "if ( y 1 < y 2 ) {", "y 3 = ( int ) ( y 2 - perp ) ; }", "else {", "y 3 = ( int ) ( y 2 + perp ) ; }", "g . draw Line ( x 2 , y 2 , x 3 , y 3 ) ; } }"]}
{"ids": "58203", "code": ["private void add Elements ( int value , int number Of Elements ) {", "if ( m first Free + number Of Elements < m blocksize ) for ( int i = NUM_ ; i < number Of Elements ; i ++ ) {", "m map 0 [ m first Free ++ ] = value ; }", "else {", "int index = m first Free > > > m SHIFT ;", "int offset = m first Free & m MASK ;", "m first Free += number Of Elements ;", "while ( number Of Elements > NUM_ ) {", "if ( index >= m map . length ) {", "int newsize = index + m numblocks ;", "int [ ] [ ] new Map = new int [ newsize ] [ ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , m map . length ) ;", "m map = new Map ; }", "int [ ] block = m map [ index ] ;", "if ( null == block ) block = m map [ index ] = new int [ m blocksize ] ;", "int copied = ( m blocksize - offset < number Of Elements ) ? m blocksize - offset : number Of Elements ;", "number Of Elements -= copied ;", "while ( copied -- > NUM_ ) block [ offset ++ ] = value ;", "++ index ;", "offset = NUM_ ; } } }"]}
{"ids": "53356", "code": ["public static String Builder format To ( String Builder buf , double [ ] d , String sep ) {", "if ( d == null ) {", "return buf . append ( STR_ ) ; }", "if ( d . length == NUM_ ) {", "return buf ; }", "buf . append ( d [ NUM_ ] ) ;", "for ( int i = NUM_ ; i < d . length ; i ++ ) {", "buf . append ( sep ) ;", "buf . append ( d [ i ] ) ; }", "return buf ; }"]}
{"ids": "81736", "code": ["@ Suppress Warnings ( STR_ ) private static void merge Sort ( Object [ ] in , Object [ ] out , int start , int end , Comparator c ) {", "int len = end - start ;", "if ( len <= SIMPLE LENGTH ) {", "for ( int i = start + NUM_ ; i < end ; i ++ ) {", "Object current = out [ i ] ;", "Object prev = out [ i - NUM_ ] ;", "if ( c . compare ( prev , current ) > NUM_ ) {", "int j = i ;", "do {", "out [ j -- ] = prev ; }", "while ( j > start && ( c . compare ( prev = out [ j - NUM_ ] , current ) > NUM_ ) ) ;", "out [ j ] = current ; } }", "return ; }", "int med = ( end + start ) > > > NUM_ ;", "merge Sort ( out , in , start , med , c ) ;", "merge Sort ( out , in , med , end , c ) ;", "if ( c . compare ( in [ med - NUM_ ] , in [ med ] ) <= NUM_ ) {", "System . arraycopy ( in , start , out , start , len ) ;", "return ; }", "int r = med , i = start ;", "do {", "Object from Val = in [ start ] ;", "Object r Val = in [ r ] ;", "if ( c . compare ( from Val , r Val ) <= NUM_ ) {", "int l 1 = find ( in , r Val , - NUM_ , start + NUM_ , med - NUM_ , c ) ;", "int to Copy = l 1 - start + NUM_ ;", "System . arraycopy ( in , start , out , i , to Copy ) ;", "i += to Copy ;", "out [ i ++ ] = r Val ;", "r ++ ;", "start = l 1 + NUM_ ; }", "else {", "int r 1 = find ( in , from Val , NUM_ , r + NUM_ , end - NUM_ , c ) ;", "int to Copy = r 1 - r + NUM_ ;", "System . arraycopy ( in , r , out , i , to Copy ) ;", "i += to Copy ;", "out [ i ++ ] = from Val ;", "start ++ ;", "r = r 1 + NUM_ ; } }", "while ( ( end - r ) > NUM_ && ( med - start ) > NUM_ ) ;", "if ( ( end - r ) <= NUM_ ) {", "System . arraycopy ( in , start , out , i , med - start ) ; }", "else {", "System . arraycopy ( in , r , out , i , end - r ) ; } }"]}
{"ids": "72895", "code": ["private View fill From Left ( int next Left ) {", "m First Position = Math . min ( m First Position , m Selected Position ) ;", "m First Position = Math . min ( m First Position , m Item Count - NUM_ ) ;", "if ( m First Position < NUM_ ) {", "m First Position = NUM_ ; }", "return fill Right ( m First Position , next Left ) ; }"]}
{"ids": "61848", "code": ["public Tomcat Slf 4 j Logback Factory Accessor ( Class Loader cl ) throws Class Not Found Exception , Illegal Access Exception , Illegal Argument Exception , Invocation Target Exception {", "Class clazz = cl . load Class ( STR_ ) ;", "Method get Singleton = Method Utils . get Accessible Method ( clazz , STR_ , new Class [ NUM_ ] ) ;", "Object singleton = get Singleton . invoke ( null ) ;", "Method get Logger Factory = Method Utils . get Accessible Method ( clazz , STR_ , new Class [ NUM_ ] ) ;", "Object logger Factory = get Logger Factory . invoke ( singleton ) ;", "Class logger Factory Class = cl . load Class ( STR_ ) ;", "if ( ! logger Factory Class . is Instance ( logger Factory ) ) {", "throw new Runtime Exception ( STR_ ) ; }", "set Target ( logger Factory ) ; }"]}
{"ids": "7738", "code": ["public Quarter Date Format ( Time Zone zone , String [ ] quarter Symbols , boolean quarter First ) {", "Param Checks . null Not Permitted ( zone , STR_ ) ;", "this . calendar = new Gregorian Calendar ( zone ) ;", "this . quarters = quarter Symbols ;", "this . quarter First = quarter First ;", "this . number Format = Number Format . get Number Instance ( ) ; }"]}
{"ids": "31381", "code": ["public long restart ( ) {", "long start = start Time Nanos ;", "start Time Nanos = System . nano Time ( ) ;", "return start Time Nanos - start ; }"]}
{"ids": "49244", "code": ["private static byte [ ] string To Byte Array ( String str ) {", "byte [ ] result = new byte [ str . length ( ) + NUM_ ] ;", "for ( int i = NUM_ ; i < str . length ( ) ; i ++ ) {", "result [ i ] = ( byte ) str . char At ( i ) ; }", "result [ str . length ( ) ] = NUM_ ;", "return result ; }"]}
{"ids": "38593", "code": ["@ Override public void action Performed ( Action Event e ) {", "Object o ;", "o = e . get Source ( ) ;", "if ( o == menu File Open ) {", "load File ( ) ; }", "else if ( o == menu File Save ) {", "save File ( ) ; }", "else if ( o == menu File Save As ) {", "save File As ( ) ; }", "else if ( o == menu File Close ) {", "close File ( ) ; }", "else if ( o == menu File Close All ) {", "close All Files ( ) ; }", "else if ( o == menu File Properties ) {", "show Properties ( ) ; }", "else if ( o == menu File Exit ) {", "close ( ) ; }", "else if ( o == menu Edit Undo ) {", "undo ( ) ; }", "else if ( o == menu Edit Copy ) {", "copy Content ( ) ; }", "else if ( o == menu Edit Search ) {", "search ( ) ; }", "else if ( o == menu Edit Clear Search ) {", "clear Search ( ) ; }", "else if ( o == menu Edit Delete Attribute ) {", "delete Attribute ( false ) ; }", "else if ( o == menu Edit Delete Attributes ) {", "delete Attribute ( true ) ; }", "else if ( o == menu Edit Rename Attribute ) {", "rename Attribute ( ) ; }", "else if ( o == menu Edit Attribute As Class ) {", "attribute As Class ( ) ; }", "else if ( o == menu Edit Delete Instance ) {", "delete Instance ( false ) ; }", "else if ( o == menu Edit Delete Instances ) {", "delete Instance ( true ) ; }", "else if ( o == menu Edit Sort Instances ) {", "sort Instances ( ) ; }", "else if ( o == menu View Attributes ) {", "show Attributes ( ) ; }", "else if ( o == menu View Values ) {", "show Values ( ) ; }", "else if ( o == menu View Optimal Col Widths ) {", "set Optimal Col Widths ( ) ; }", "update Menu ( ) ; }"]}
{"ids": "19573", "code": ["public static boolean has Joda ( ) {", "try {", "Class . for Name ( STR_ ) ;", "return true ; }", "catch ( Class Not Found Exception e ) {", "return false ; } }"]}
{"ids": "12106", "code": ["public Remote Service Descriptor ( String base Url , Http Json Request Factory request Factory ) throws Illegal Argument Exception {", "this . base Url = base Url ;", "try {", "base Url URL = new URL ( base Url ) ;", "final String protocol = base Url URL . get Protocol ( ) ;", "if ( ! ( protocol . equals ( STR_ ) || protocol . equals ( STR_ ) ) ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , base Url ) ) ; } }", "catch ( Malformed URL Exception e ) {", "throw new Illegal Argument Exception ( String . format ( STR_ , base Url ) ) ; }", "this . request Factory = request Factory ; }"]}
{"ids": "34590", "code": ["private int find Activity Element ( int activity Index ) {", "for ( int element Index = NUM_ ; element Index < m Activity List . size ( ) ; element Index ++ ) {", "if ( m Activity List . get ( element Index ) . m Activity Index == activity Index ) {", "return element Index ; } }", "return - NUM_ ; }"]}
{"ids": "22478", "code": ["public void map Volume To SDC ( String volume Id , String sdc Id ) throws Exception {", "log . info ( STR_ ) ;", "String uri = Scale IO Constants . get Map Volume To SDCURI ( volume Id ) ;", "Scale IO Map Volume To SDC map Parm = new Scale IO Map Volume To SDC ( ) ;", "map Parm . set Sdc Id ( sdc Id ) ;", "map Parm . set Allow Multiple Mappings ( STR_ ) ;", "post ( URI . create ( uri ) , get Json For Entity ( map Parm ) ) ; }"]}
{"ids": "60217", "code": ["private static void replace Collapsed By Eclipse Source Roots ( Element lib Element , Library . Modifiable Model modifiable Model ) {", "String [ ] src Urls From Classpath = modifiable Model . get Urls ( Order Root Type . SOURCES ) ;", "LOG . assert True ( src Urls From Classpath . length <= NUM_ ) ;", "final String eclipse Url = src Urls From Classpath . length > NUM_ ? src Urls From Classpath [ NUM_ ] : null ;", "for ( Element r : lib Element . get Children ( SRCROOT ATTR ) ) {", "final String url = r . get Attribute Value ( STR_ ) ;", "final String bind Attr = r . get Attribute Value ( SRCROOT BIND ATTR ) ;", "boolean not Bind = bind Attr != null && ! Boolean . parse Boolean ( bind Attr ) ;", "if ( not Bind ) {", "modifiable Model . add Root ( url , Order Root Type . SOURCES ) ; }", "else if ( eclipse Url != null && are Urls Point The Same ( url , eclipse Url ) && ! Comparing . str Equal ( url , eclipse Url ) ) {", "modifiable Model . add Root ( url , Order Root Type . SOURCES ) ;", "if ( src Urls From Classpath != null && src Urls From Classpath . length == NUM_ ) {", "modifiable Model . remove Root ( eclipse Url , Order Root Type . SOURCES ) ;", "src Urls From Classpath = null ; } } } }"]}
{"ids": "77998", "code": ["public static byte [ ] hex To Bytes ( String hex String ) {", "byte [ ] result = new byte [ hex String . length ( ) / NUM_ ] ;", "for ( int i = NUM_ ; i < result . length ; ++ i ) {", "int offset = i * NUM_ ;", "result [ i ] = ( byte ) Integer . parse Int ( hex String . substring ( offset , offset + NUM_ ) , NUM_ ) ; }", "return result ; }"]}
{"ids": "1060", "code": ["private static String replace Last ( String str , char from , char to ) {", "int index = str . last Index Of ( from ) ;", "if ( index == - NUM_ ) return str ;", "return str . substring ( NUM_ , index ) + to + str . substring ( index + NUM_ ) ; }"]}
{"ids": "21356", "code": ["private static void clean Stale Initiator References ( Export Group export Group , Db Client db Client ) {", "String Set export Group Initiators = export Group . get Initiators ( ) ;", "if ( ! Collection Utils . is Empty ( export Group Initiators ) && ! Collection Utils . is Empty ( export Group . get Export Masks ( ) ) ) {", "Set < String > all Mask Initiators = new Hash Set < > ( ) ;", "for ( String mask : export Group . get Export Masks ( ) ) {", "Export Mask mask Obj = db Client . query Object ( Export Mask . class , URI . create ( mask ) ) ;", "if ( mask Obj != null && ! Collection Utils . is Empty ( mask Obj . get Initiators ( ) ) ) {", "all Mask Initiators . add All ( mask Obj . get Initiators ( ) ) ; } }", "Set < String > stale Initiators = Sets . difference ( export Group Initiators , all Mask Initiators ) ;", "if ( ! Collection Utils . is Empty ( stale Initiators ) ) {", "Collection < URI > stale Initiator URIS = Collections 2 . transform ( stale Initiators , Common Transformer Functions . FCTN STRING TO URI ) ;", "export Group . remove Initiators ( new Array List < > ( stale Initiator URIS ) ) ;", "log . info ( STR_ , stale Initiator URIS , export Group . get Id ( ) ) ; } } }"]}
{"ids": "10479", "code": ["public static < T > T find Resource By Name ( Iterable < Has Metadata > entities , Class < T > clazz , String name ) {", "if ( entities != null ) {", "for ( Has Metadata entity : entities ) {", "if ( clazz . is Instance ( entity ) && Objects . equals ( name , get Name ( entity ) ) ) {", "return clazz . cast ( entity ) ; } } }", "return null ; }"]}
{"ids": "706", "code": ["public static Map ordinal Map ( Iterator tuples , String field , Comparator cmp ) {", "Object [ ] o = ordinal Array ( tuples , field , cmp ) ;", "Hash Map map = new Hash Map ( ) ;", "for ( int i = NUM_ ; i < o . length ; ++ i ) map . put ( o [ i ] , new Integer ( i ) ) ;", "return map ; }"]}
{"ids": "46228", "code": ["void add Line Monitor ( Line Monitor lm ) {", "if ( Printer . trace ) Printer . trace ( STR_ + lm + STR_ ) ;", "synchronized ( line Monitors ) {", "if ( line Monitors . index Of ( lm ) >= NUM_ ) {", "if ( Printer . trace ) Printer . trace ( STR_ ) ;", "return ; }", "if ( Printer . debug ) Printer . debug ( STR_ + lm ) ;", "line Monitors . add ( lm ) ; }", "synchronized ( this ) {", "notify All ( ) ; }", "if ( Printer . debug ) Printer . debug ( STR_ + line Monitors . size ( ) + STR_ ) ; }"]}
{"ids": "49875", "code": ["public static String to Char ( byte b ) {", "if ( b >= NUM_ ) {", "return Character . to String ( ( char ) b ) ; }", "else {", "return String . format ( STR_ , b ) ; } }"]}
{"ids": "61296", "code": ["public void add Nodes ( Node Iterator iterator ) {", "if ( ! m mutable ) throw new Runtime Exception ( XSL Messages . create XPATH Message ( XPATH Error Resources . ER NODESET NOT MUTABLE , null ) ) ;", "if ( null != iterator ) {", "Node obj ;", "while ( null != ( obj = iterator . next Node ( ) ) ) {", "add Element ( obj ) ; } } }"]}
{"ids": "47806", "code": ["public static double pt Seg Dist ( double x 1 , double y 1 , double x 2 , double y 2 , double px , double py ) {", "return Math . sqrt ( pt Seg Dist Sq ( x 1 , y 1 , x 2 , y 2 , px , py ) ) ; }"]}
{"ids": "47922", "code": ["Method Type as Spreader Type ( Class < ? > array Type , int array Length ) {", "assert ( parameter Count ( ) >= array Length ) ;", "int spread Pos = ptypes . length - array Length ;", "if ( array Length == NUM_ ) return this ;", "if ( array Type == Object [ ] . class ) {", "if ( is Generic ( ) ) return this ;", "if ( spread Pos == NUM_ ) {", "Method Type res = generic Method Type ( array Length ) ;", "if ( rtype != Object . class ) {", "res = res . change Return Type ( rtype ) ; }", "return res ; } }", "Class < ? > elem Type = array Type . get Component Type ( ) ;", "assert ( elem Type != null ) ;", "for ( int i = spread Pos ; i < ptypes . length ; i ++ ) {", "if ( ptypes [ i ] != elem Type ) {", "Class < ? > [ ] fixed Ptypes = ptypes . clone ( ) ;", "Arrays . fill ( fixed Ptypes , i , ptypes . length , elem Type ) ;", "return method Type ( rtype , fixed Ptypes ) ; } }", "return this ; }"]}
{"ids": "36626", "code": ["public static mx I Cell resolve ( mx I Cell root , String path ) {", "mx I Cell parent = root ;", "String [ ] tokens = path . split ( Pattern . quote ( PATH SEPARATOR ) ) ;", "for ( int i = NUM_ ; i < tokens . length ; i ++ ) {", "parent = parent . get Child At ( Integer . parse Int ( tokens [ i ] ) ) ; }", "return parent ; }"]}
{"ids": "19982", "code": ["private static int next Non Quote Index ( String trimmed , int i , boolean forward ) {", "while ( trimmed . char At ( i ) == STR_ || trimmed . char At ( i ) == STR_ || trimmed . char At ( i ) == STR_ || trimmed . char At ( i ) == STR_ || trimmed . char At ( i ) == STR_ || trimmed . char At ( i ) == STR_ || trimmed . char At ( i ) == STR_ || trimmed . char At ( i ) == STR_ ) {", "if ( forward ) i ++ ;", "else i -- ; }", "return i ; }"]}
{"ids": "80", "code": ["public static void reset ( ) {", "trace State . remove ( ) ;", "suspended State . clear ( ) ; }"]}
{"ids": "42729", "code": ["private String inclusive Slice ( ) {", "if ( mark >= pos ) {", "return STR_ ; }", "return sign . substring ( mark , pos + NUM_ ) ; }"]}
{"ids": "17206", "code": ["public byte [ ] to Bytecode ( ) throws IO Exception , Cannot Compile Exception {", "Byte Array Output Stream barray = new Byte Array Output Stream ( ) ;", "Data Output Stream out = new Data Output Stream ( barray ) ;", "try {", "to Bytecode ( out ) ; }", "finally {", "out . close ( ) ; }", "return barray . to Byte Array ( ) ; }"]}
{"ids": "74854", "code": ["public static void serialize Path ( final Object Output os , final Path Iterator pi ) throws IO Exception {", "os . write Object ( pi . get Winding Rule ( ) ) ;", "final List < java . io . Serializable > list = new Array List < java . io . Serializable > ( ) ;", "while ( ! pi . is Done ( ) ) {", "final float [ ] array = new float [ NUM_ ] ;", "final int type = pi . current Segment ( array ) ;", "list . add ( type ) ;", "list . add ( array ) ;", "pi . next ( ) ; }", "os . write Object ( list ) ; }"]}
{"ids": "16628", "code": ["public double calculate Local Swap Total Capacity ( int hostcount , int hostlocalswapsize ) {", "double d = ( double ) ( hostcount * hostlocalswapsize ) / NUM_ ;", "d *= - NUM_ ;", "d = ( double ) Math . round ( d * NUM_ ) / NUM_ ;", "return d ; }"]}
{"ids": "27437", "code": ["boolean find Marker ( ) throws IO Exception {", "if ( marker Index == marker . length ) {", "return true ; }", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + Bytes Util . to Hex String ( marker ) + STR_ + nreads ) ;", "while ( marker Index < marker . length ) {", "final int remtok = marker . length - marker Index ;", "marker BB . limit ( remtok ) ;", "marker BB . position ( NUM_ ) ;", "final int rd Len = client . read ( marker BB ) ;", "if ( rd Len == - NUM_ ) {", "throw new IO Exception ( STR_ + nreads + STR_ + bytes Read ) ; }", "nreads ++ ;", "bytes Read += rd Len ;", "for ( int i = NUM_ ; i < rd Len ; i ++ ) {", "if ( marker Buffer [ i ] != marker [ marker Index ] ) {", "if ( found Marker In Initial Position ) {", "found Marker In Initial Position = false ;", "log . error ( STR_ ) ; }", "marker Index = NUM_ ;", "if ( marker Buffer [ i ] == marker [ marker Index ] ) {", "marker Index ++ ; } }", "else {", "marker Index ++ ;", "nmarkerbytematches ++ ; } }", "if ( nreads % NUM_ == NUM_ ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + nreads + STR_ + bytes Read ) ; } }", "if ( marker Index != marker . length ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ ) ;", "return false ; }", "else {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + nreads + STR_ + nmarkerbytematches + STR_ ) ;", "return true ; } }"]}
{"ids": "10621", "code": ["public void parse Loggc File ( Input Stream loggc File Stream , Default Mutable Tree Node root ) {", "Buffered Reader bis = new Buffered Reader ( new Input Stream Reader ( loggc File Stream ) ) ;", "Vector histograms = new Vector ( ) ;", "try {", "while ( bis . ready ( ) ) {", "bis . mark ( get Mark Size ( ) ) ;", "String next Line = bis . read Line ( ) ;", "if ( next Line . starts With ( STR_ ) ) {", "bis . reset ( ) ;", "histograms . add ( parse Next Class Histogram ( bis ) ) ; } }", "for ( int i = histograms . size ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "Default Mutable Tree Node dump = get Next Dump For Histogram ( root ) ;", "if ( dump != null ) {", "add Histogram To Dump ( dump , ( Histogram Table Model ) histograms . get ( i ) ) ; } } }", "catch ( IO Exception ex ) {", "ex . print Stack Trace ( ) ; } }"]}
{"ids": "36268", "code": ["private void resolve Time Macro ( String Buffer result ) {", "Calendar calendar = new Gregorian Calendar ( ) ;", "result . append ( calendar . get ( Calendar . YEAR ) + STR_ ) ;", "String month = calendar . get ( Calendar . MONTH ) + NUM_ + STR_ ;", "if ( month . length ( ) < NUM_ ) {", "month = STR_ + month ; }", "result . append ( month + STR_ ) ;", "String day = calendar . get ( Calendar . DAY OF MONTH ) + STR_ ;", "if ( day . length ( ) < NUM_ ) {", "day = STR_ + day ; }", "result . append ( day + STR_ ) ;", "int am Pm = calendar . get ( Calendar . AM PM ) ;", "String am Pm String = am Pm == Calendar . AM ? STR_ : STR_ ;", "result . append ( am Pm String + STR_ ) ;", "String hour = calendar . get ( Calendar . HOUR ) + STR_ ;", "if ( hour . length ( ) < NUM_ ) {", "hour = STR_ + hour ; }", "result . append ( hour + STR_ ) ;", "String minute = calendar . get ( Calendar . MINUTE ) + STR_ ;", "if ( minute . length ( ) < NUM_ ) {", "minute = STR_ + minute ; }", "result . append ( minute + STR_ ) ;", "String second = calendar . get ( Calendar . SECOND ) + STR_ ;", "if ( second . length ( ) < NUM_ ) {", "second = STR_ + second ; }", "result . append ( second ) ; }"]}
{"ids": "36423", "code": ["public boolean is Empty ( ) {", "synchronized ( lock ) {", "return annotations Draw Order . is Empty ( ) ; } }"]}
{"ids": "72697", "code": ["default B append 8 bit ( @ Not Null Char Sequence cs , int start , int end ) throws Illegal Argument Exception , Buffer Overflow Exception , Buffer Underflow Exception , Index Out Of Bounds Exception {", "if ( cs instanceof Bytes Store ) {", "return write ( ( Bytes Store ) cs , ( long ) start , end ) ; }", "for ( int i = start ; i < end ; i ++ ) {", "char c = cs . char At ( i ) ;", "if ( c > NUM_ ) c = STR_ ;", "write Byte ( ( byte ) c ) ; }", "return ( B ) this ; }"]}
{"ids": "51048", "code": ["static void zero ( float [ ] [ ] array ) {", "for ( float [ ] a Float : array ) {", "Arrays . fill ( a Float , - NUM_ ) ; } }"]}
{"ids": "39459", "code": ["@ Override public boolean contains ( Point 2 D . Double p ) {", "Round Rectangle 2 D . Double r = ( Round Rectangle 2 D . Double ) roundrect . clone ( ) ;", "double grow = Attribute Keys . get Perpendicular Hit Growth ( this ) ;", "r . x -= grow ;", "r . y -= grow ;", "r . width += grow * NUM_ ;", "r . height += grow * NUM_ ;", "r . arcwidth += grow * NUM_ ;", "r . archeight += grow * NUM_ ;", "return r . contains ( p ) ; }"]}
{"ids": "80100", "code": ["private void download Update Prop ( final boolean initial Download ) {", "if ( boot Prop != null ) {", "server Folder = boot Prop . get Property ( STR_ , Client Game Configuration . get ( STR_ ) ) + STR_ ;", "String update Properties File = boot Prop . get Property ( STR_ , server Folder + STR_ ) ;", "final Http Client http Client = new Http Client ( update Properties File , initial Download ) ;", "update Prop = http Client . fetch Properties ( ) ;", "if ( update Prop != null && update Prop . contains Key ( STR_ ) ) {", "return ; } }", "String update Properties File = Client Game Configuration . get ( STR_ ) + STR_ ;", "Http Client http Client = new Http Client ( update Properties File , initial Download ) ;", "update Prop = http Client . fetch Properties ( ) ;", "if ( update Prop != null && update Prop . contains Key ( STR_ ) ) {", "return ; }", "update Properties File = Client Game Configuration . get ( STR_ ) + STR_ ;", "http Client = new Http Client ( update Properties File , initial Download ) ;", "update Prop = http Client . fetch Properties ( ) ; }"]}
{"ids": "67461", "code": ["private void merge Method Handle Store ( final int index , final Method Handle method Handle ) {", "local Variables . merge ( index , new Method Handle ( method Handle ) , null ) ; }"]}
{"ids": "77015", "code": ["public Context Suggest Field ( String name , String value , int weight , Char Sequence ... contexts ) {", "super ( name , value , weight ) ;", "validate ( value ) ;", "this . contexts = new Hash Set < > ( ( contexts != null ) ? contexts . length : NUM_ ) ;", "if ( contexts != null ) {", "Collections . add All ( this . contexts , contexts ) ; } }"]}
{"ids": "60592", "code": ["@ Override protected byte [ ] decrypt ( byte type , byte [ ] fragment , int offset , int len ) {", "byte [ ] data = dec Cipher . update ( fragment , offset , len ) ;", "byte [ ] content ;", "if ( block size != NUM_ ) {", "int padding length = data [ data . length - NUM_ ] & NUM_ ;", "for ( int i = NUM_ ; i < padding length ; i ++ ) {", "if ( ( data [ data . length - NUM_ - i ] & NUM_ ) != padding length ) {", "throw new Alert Exception ( Alert Protocol . DECRYPTION FAILED , new SSL Protocol Exception ( STR_ ) ) ; } }", "content = new byte [ data . length - hash size - padding length - NUM_ ] ; }", "else {", "content = new byte [ data . length - hash size ] ; }", "byte [ ] mac value ;", "mac material part [ NUM_ ] = type ;", "mac material part [ NUM_ ] = ( byte ) ( ( NUM_ & content . length ) > > NUM_ ) ;", "mac material part [ NUM_ ] = ( byte ) ( NUM_ & content . length ) ;", "message Digest . update ( mac read secret ) ;", "message Digest . update ( pad 1 ) ;", "message Digest . update ( read seq num ) ;", "message Digest . update ( mac material part ) ;", "message Digest . update ( data , NUM_ , content . length ) ;", "mac value = message Digest . digest ( ) ;", "message Digest . update ( mac read secret ) ;", "message Digest . update ( pad 2 ) ;", "message Digest . update ( mac value ) ;", "mac value = message Digest . digest ( ) ;", "if ( logger != null ) {", "logger . println ( STR_ ) ;", "logger . print ( data ) ;", "logger . println ( STR_ ) ;", "logger . print ( mac value ) ; }", "for ( int i = NUM_ ; i < hash size ; i ++ ) {", "if ( mac value [ i ] != data [ i + content . length ] ) {", "throw new Alert Exception ( Alert Protocol . BAD RECORD MAC , new SSL Protocol Exception ( STR_ ) ) ; } }", "System . arraycopy ( data , NUM_ , content , NUM_ , content . length ) ;", "inc Sequence Number ( read seq num ) ;", "return content ; }"]}
{"ids": "776", "code": ["public Activity put ( String key , Activity activity ) {", "return ( Activity ) m map . put ( key , activity ) ; }"]}
{"ids": "4065", "code": ["public boolean is Abstract ( ) {", "return Modifier . is Abstract ( get Access Flags ( ) ) ; }"]}
{"ids": "78657", "code": ["public void clear Current Request Timed Out ( ) {", "if ( current Request Timed Out != null ) current Request Timed Out . clear ( ) ;", "current Request Timed Out = null ; }"]}
{"ids": "66800", "code": ["protected void show Page ( int page ) {", "boolean is Empty = page == PAGE EMPTY ;", "Control control = is Empty ? ( Control ) f Empty Page Label : get Control ( ) ;", "if ( is Empty ) {", "set Content Description ( STR_ ) ;", "clear Viewer ( ) ; }", "f Pagebook . show Page ( control ) ; }"]}
{"ids": "8586", "code": ["@ Override public boolean equals ( Object o ) {", "if ( this == o ) return true ;", "if ( o == null || get Class ( ) != o . get Class ( ) ) return false ;", "Insets insets = ( Insets ) o ;", "if ( bottom != insets . bottom ) return false ;", "if ( left != insets . left ) return false ;", "if ( right != insets . right ) return false ;", "if ( top != insets . top ) return false ;", "return true ; }"]}
{"ids": "45223", "code": ["public void remove Documents ( List < Query > queries ) {", "Index Writer writer = get Writer ( ) ;", "for ( Query query : queries ) {", "try {", "writer . delete Documents ( query ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "close Writer ( writer ) ;", "throw new Runtime Exception ( e ) ; } }", "close Writer ( writer ) ; }"]}
{"ids": "9625", "code": ["public static Secret Key generate Secret Key ( Secret Key Type secret Key Type , int key Size ) throws Crypto Exception {", "try {", "Key Generator key Generator = Key Generator . get Instance ( secret Key Type . jce ( ) , BOUNCY CASTLE . jce ( ) ) ;", "key Generator . init ( key Size , Secure Random . get Instance ( STR_ ) ) ;", "return key Generator . generate Key ( ) ; }", "catch ( General Security Exception ex ) {", "throw new Crypto Exception ( Message Format . format ( res . get String ( STR_ ) , secret Key Type ) , ex ) ; } }"]}
{"ids": "10657", "code": ["public CML delete CML ( I Sicres Abstract Document VO document ) {", "String id = document . get Id ( ) ;", "Reference reference = new Reference ( STORE , id , null ) ;", "Predicate predicate = new Predicate ( new Reference [ ] { reference } , null , null ) ;", "CML Delete delete = new CML Delete ( predicate ) ;", "CML cml = new CML ( ) ;", "cml . set Delete ( new CML Delete [ ] { delete } ) ;", "return cml ; }"]}
{"ids": "9288", "code": ["private synchronized void eval ( ) throws Metadata Evaluation Exception {", "if ( cache Strategy == Cache Strategy . NEVER CACHE || internal Value . get ( ) == null ) {", "try {", "Object value = lazy Value . call ( ) ;", "if ( value == null ) {", "value = ACTUALLY NULL ; }", "internal Value = new Soft Reference < Object > ( value ) ; }", "catch ( Exception e ) {", "throw new Metadata Evaluation Exception ( e ) ; } } }"]}
{"ids": "6756", "code": ["public void add Edge To Bounds ( S 2 Point from , S 2 Point to ) {", "if ( ! bound Set ) {", "bound Set = true ;", "xmin = xmax = from . x ;", "ymin = ymax = from . y ;", "zmin = zmax = from . z ; }", "xmin = Math . min ( xmin , Math . min ( to . x , from . x ) ) ;", "ymin = Math . min ( ymin , Math . min ( to . y , from . y ) ) ;", "zmin = Math . min ( zmin , Math . min ( to . z , from . z ) ) ;", "xmax = Math . max ( xmax , Math . max ( to . x , from . x ) ) ;", "ymax = Math . max ( ymax , Math . max ( to . y , from . y ) ) ;", "zmax = Math . max ( zmax , Math . max ( to . z , from . z ) ) ;", "double approx Arc Len = Math . abs ( from . x - to . x ) + Math . abs ( from . y - to . y ) + Math . abs ( from . z - to . z ) ;", "if ( approx Arc Len < NUM_ ) {", "max Deformation = Math . max ( max Deformation , approx Arc Len * NUM_ ) ; }", "else if ( approx Arc Len < NUM_ ) {", "max Deformation = Math . max ( max Deformation , approx Arc Len * NUM_ ) ; }", "else {", "max Deformation = approx Arc Len * NUM_ ; } }"]}
{"ids": "15252", "code": ["public static String hash ( String string ) {", "try {", "Message Digest sha 1 = Message Digest . get Instance ( STR_ ) ;", "sha 1 . update ( string . get Bytes ( STR_ ) ) ;", "return Base 64 . encode ( sha 1 . digest ( ) ) ; }", "catch ( Exception ex ) {", "Debug debug = Debug . get Instance ( STR_ ) ;", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( STR_ , ex ) ; }", "return null ; } }"]}
{"ids": "71844", "code": ["static List < String > read Extensions ( final Substring Reader reader ) throws Decode Exception {", "int length = NUM_ ;", "List < String > values ;", "reader . skip Whitespaces ( ) ;", "reader . mark ( ) ;", "try {", "char c = reader . read ( ) ;", "if ( c == STR_ ) {", "reader . mark ( ) ;", "while ( reader . read ( ) != STR_ ) {", "length ++ ; }", "reader . reset ( ) ;", "values = Collections . singleton List ( reader . read ( length ) ) ;", "reader . read ( ) ; }", "else if ( c == STR_ ) {", "reader . skip Whitespaces ( ) ;", "reader . mark ( ) ;", "c = reader . read ( ) ;", "if ( c == STR_ ) {", "values = Collections . empty List ( ) ; }", "else {", "values = new Array List < > ( ) ;", "do {", "reader . reset ( ) ;", "values . add ( read Quoted String ( reader ) ) ;", "reader . skip Whitespaces ( ) ;", "reader . mark ( ) ; }", "while ( reader . read ( ) != STR_ ) ;", "values = Collections . unmodifiable List ( values ) ; } }", "else {", "do {", "length ++ ; }", "while ( reader . read ( ) != STR_ ) ;", "reader . reset ( ) ;", "values = Collections . singleton List ( reader . read ( length ) ) ; }", "return values ; }", "catch ( final String Index Out Of Bounds Exception e ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX TRUNCATED VALUE 1 . get ( ) ) ; } }"]}
{"ids": "69921", "code": ["public int read ( Byte Buffer dst ) throws IO Exception {", "if ( ! dst . has Remaining ( ) ) return NUM_ ;", "if ( ! is Hand Shake Complete ( ) ) {", "if ( is Blocking ( ) ) {", "while ( ! is Hand Shake Complete ( ) ) {", "process Handshake ( ) ; } }", "else {", "process Handshake ( ) ;", "if ( ! is Hand Shake Complete ( ) ) {", "return NUM_ ; } } }", "int purged = read Remaining ( dst ) ;", "if ( purged != NUM_ ) return purged ;", "assert ( in Data . position ( ) == NUM_ ) ;", "in Data . clear ( ) ;", "if ( ! in Crypt . has Remaining ( ) ) in Crypt . clear ( ) ;", "else in Crypt . compact ( ) ;", "if ( is Blocking ( ) || read Engine Result . get Status ( ) == Status . BUFFER UNDERFLOW ) if ( socket Channel . read ( in Crypt ) == - NUM_ ) {", "return - NUM_ ; }", "in Crypt . flip ( ) ;", "unwrap ( ) ;", "int transfered = transfere To ( in Data , dst ) ;", "if ( transfered == NUM_ && is Blocking ( ) ) {", "return read ( dst ) ; }", "return transfered ; }"]}
{"ids": "76977", "code": ["private List < Facet Result > search ( ) throws IO Exception {", "Directory Reader index Reader = Directory Reader . open ( index Dir ) ;", "Index Searcher searcher = new Index Searcher ( index Reader ) ;", "Sorted Set Doc Values Reader State state = new Default Sorted Set Doc Values Reader State ( index Reader ) ;", "Facets Collector fc = new Facets Collector ( ) ;", "Facets Collector . search ( searcher , new Match All Docs Query ( ) , NUM_ , fc ) ;", "Facets facets = new Sorted Set Doc Values Facet Counts ( state , fc ) ;", "List < Facet Result > results = new Array List < > ( ) ;", "results . add ( facets . get Top Children ( NUM_ , STR_ ) ) ;", "results . add ( facets . get Top Children ( NUM_ , STR_ ) ) ;", "index Reader . close ( ) ;", "return results ; }"]}
{"ids": "26162", "code": ["public Resource map Relations ( Resource object , JSON Object json Object , List < Resource > included ) throws Exception {", "Hash Map < String , String > relationship Names = get Relationship Names ( object . get Class ( ) ) ;", "for ( String relationship : relationship Names . key Set ( ) ) {", "JSON Object relation Json Object = null ;", "try {", "relation Json Object = json Object . get JSON Object ( relationship ) ; }", "catch ( JSON Exception e ) {", "Logger . debug ( STR_ + relationship + STR_ ) ;", "continue ; }", "JSON Object relation Data Object = null ;", "try {", "relation Data Object = relation Json Object . get JSON Object ( STR_ ) ;", "Resource relation Object = Factory . new Object From JSON Object ( relation Data Object , null ) ;", "relation Object = match Included To Relation ( relation Object , included ) ;", "m Deserializer . set Field ( object , relationship Names . get ( relationship ) , relation Object ) ; }", "catch ( JSON Exception e ) {", "Logger . debug ( STR_ ) ; }", "JSON Array relation Data Array = null ;", "try {", "relation Data Array = relation Json Object . get JSON Array ( STR_ ) ;", "List < Resource > relation Array = Factory . new Object From JSON Array ( relation Data Array , null ) ;", "relation Array = match Included To Relation ( relation Array , included ) ;", "m Deserializer . set Field ( object , relationship Names . get ( relationship ) , relation Array ) ; }", "catch ( JSON Exception e ) {", "Logger . debug ( STR_ ) ; } }", "return object ; }"]}
{"ids": "46780", "code": ["public int size ( ) {", "return rdns . size ( ) ; }"]}
{"ids": "26104", "code": ["@ Override public void do Initialize ( Uima Context a Context ) throws Resource Initialization Exception {", "DB db = mongo Resource . get DB ( ) ;", "collection = db . get Collection ( collection Name ) ;", "collection . create Index ( new Basic DB Object ( FIELD UNIQUE ID , NUM_ ) ) ;", "collection . create Index ( new Basic DB Object ( FIELD PUBLISHEDIDS , NUM_ ) ) ;", "stop Features = new Hash Set < String > ( ) ;", "stop Features . add ( STR_ ) ;", "stop Features . add ( STR_ ) ;", "max Content Length = Config Utils . string To Integer ( max Content Length String , NUM_ ) ; }"]}
{"ids": "7717", "code": ["protected void draw High Far Out ( double a Radius , Graphics 2 D g 2 , double xx , double m ) {", "double side = a Radius * NUM_ ;", "g 2 . draw ( new Line 2 D . Double ( xx - side , m + side , xx + side , m + side ) ) ;", "g 2 . draw ( new Line 2 D . Double ( xx - side , m + side , xx , m ) ) ;", "g 2 . draw ( new Line 2 D . Double ( xx + side , m + side , xx , m ) ) ; }"]}
{"ids": "38130", "code": ["private void find Large Item Sets ( ) throws Exception {", "Array List < Object > k Minus One Sets , k Sets ;", "Hashtable < Item Set , Integer > hashtable ;", "int nec Support , i = NUM_ ;", "nec Support = ( int ) ( m min Support * m instances . num Instances ( ) + NUM_ ) ;", "k Sets = Apriori Item Set . singletons ( m instances , m treat Zero As Missing ) ;", "if ( m treat Zero As Missing ) {", "Apriori Item Set . up Date Counters Treat Zero As Missing ( k Sets , m instances ) ; }", "else {", "Apriori Item Set . up Date Counters ( k Sets , m instances ) ; }", "k Sets = Apriori Item Set . delete Item Sets ( k Sets , nec Support , m instances . num Instances ( ) ) ;", "if ( k Sets . size ( ) == NUM_ ) {", "return ; }", "do {", "m Ls . add ( k Sets ) ;", "k Minus One Sets = k Sets ;", "k Sets = Apriori Item Set . merge All Item Sets ( k Minus One Sets , i , m instances . num Instances ( ) ) ;", "hashtable = Apriori Item Set . get Hashtable ( k Minus One Sets , k Minus One Sets . size ( ) ) ;", "m hashtables . add ( hashtable ) ;", "k Sets = Apriori Item Set . prune Item Sets ( k Sets , hashtable ) ;", "if ( m treat Zero As Missing ) {", "Apriori Item Set . up Date Counters Treat Zero As Missing ( k Sets , m instances ) ; }", "else {", "Apriori Item Set . up Date Counters ( k Sets , m instances ) ; }", "k Sets = Apriori Item Set . delete Item Sets ( k Sets , nec Support , m instances . num Instances ( ) ) ;", "i ++ ; }", "while ( k Sets . size ( ) > NUM_ ) ; }"]}
{"ids": "80590", "code": ["public boolean is In Allowed ( int x , int y ) {", "for ( Shape r : arriving Barriers ) {", "if ( r . contains ( x , y ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "14780", "code": ["public void remove Plugin Interface ( String interfacename ) throws SMS Exception , SSO Exception {", "SMS Entry . validate Token ( token ) ;", "validate Service Schema Manager Impl ( ) ;", "Document schema Doc = ssm . get Document Copy ( ) ;", "Node schema Node = XML Utils . get Root Node ( schema Doc , SMS Utils . SCHEMA ) ;", "Node plugin Node = XML Utils . get Named Child Node ( schema Node , SMS Utils . PLUGIN INTERFACE , SMS Utils . NAME , interfacename ) ;", "if ( plugin Node != null ) {", "schema Node . remove Child ( plugin Node ) ;", "replace Schema ( schema Doc ) ; } }"]}
{"ids": "48279", "code": ["public IP Address Name ( String name ) throws IO Exception {", "if ( name == null || name . length ( ) == NUM_ ) {", "throw new IO Exception ( STR_ ) ; }", "if ( name . char At ( name . length ( ) - NUM_ ) == STR_ ) {", "throw new IO Exception ( STR_ + name ) ; }", "if ( name . index Of ( STR_ ) >= NUM_ ) {", "parse I Pv 6 ( name ) ;", "is I Pv 4 = false ; }", "else if ( name . index Of ( STR_ ) >= NUM_ ) {", "parse I Pv 4 ( name ) ;", "is I Pv 4 = true ; }", "else {", "throw new IO Exception ( STR_ + name ) ; } }"]}
{"ids": "56280", "code": ["private boolean is Same File ( Path first , Path second ) throws IO Exception {", "boolean same File Size = Files . size ( first ) == Files . size ( second ) ;", "if ( ! same File Size ) {", "return false ; }", "byte [ ] first Bytes = Files . read All Bytes ( first ) ;", "byte [ ] second Bytes = Files . read All Bytes ( second ) ;", "return Arrays . equals ( first Bytes , second Bytes ) ; }"]}
{"ids": "12068", "code": ["public static org . opcfoundation . ua . transport . security . Key Pair load Key Pair From Protected Store ( String store Location , String alias , String store PW , String private PW ) throws Key Store Exception , IO Exception , No Such Algorithm Exception , Certificate Exception , Unrecoverable Key Exception {", "Key Store store = null ;", "store = Key Store . get Instance ( STR_ ) ;", "File keystore File = new File ( store Location ) ;", "File Input Stream in = new File Input Stream ( keystore File ) ;", "store . load ( in , store PW . to Char Array ( ) ) ;", "in . close ( ) ;", "X 509 Certificate cert = ( X 509 Certificate ) store . get Certificate ( alias ) ;", "RSA Private Key key = ( RSA Private Key ) store . get Key ( alias , private PW . to Char Array ( ) ) ;", "return new org . opcfoundation . ua . transport . security . Key Pair ( new Cert ( cert ) , new Priv Key ( key ) ) ; }"]}
{"ids": "28143", "code": ["@ Override public Graph Query has Not ( final String key , final Object value ) {", "criteria . add ( new Has Not ( key , value ) ) ;", "return this ; }"]}
{"ids": "40021", "code": ["private void init Compute Program ( ) {", "Int Buffer work Group Size = Buffer Utils . create Int Buffer ( NUM_ ) ;", "gl Get Programiv ( compute Program , GL COMPUTE WORK GROUP SIZE , work Group Size ) ;", "work Group Size X = work Group Size . get ( NUM_ ) ;", "work Group Size Y = work Group Size . get ( NUM_ ) ;", "int boxes Resource Index = gl Get Program Resource Index ( compute Program , GL SHADER STORAGE BLOCK , STR_ ) ;", "Int Buffer props = Buffer Utils . create Int Buffer ( NUM_ ) ;", "Int Buffer params = Buffer Utils . create Int Buffer ( NUM_ ) ;", "props . put ( NUM_ , GL BUFFER BINDING ) ;", "gl Get Program Resourceiv ( compute Program , GL SHADER STORAGE BLOCK , boxes Resource Index , props , null , params ) ;", "boxes Ssbo Binding = params . get ( NUM_ ) ;", "int uniforms Resource Index = gl Get Program Resource Index ( compute Program , GL UNIFORM BLOCK , STR_ ) ;", "gl Get Program Resourceiv ( compute Program , GL UNIFORM BLOCK , uniforms Resource Index , props , null , params ) ;", "compute Ubo Binding = params . get ( NUM_ ) ;", "int loc = gl Get Uniform Location ( compute Program , STR_ ) ;", "gl Get Uniformiv ( compute Program , loc , params ) ;", "framebuffer Image Binding = params . get ( NUM_ ) ;", "loc = gl Get Uniform Location ( compute Program , STR_ ) ;", "gl Get Uniformiv ( compute Program , loc , params ) ;", "world Position Image Binding = params . get ( NUM_ ) ;", "loc = gl Get Uniform Location ( compute Program , STR_ ) ;", "gl Get Uniformiv ( compute Program , loc , params ) ;", "world Normal Image Binding = params . get ( NUM_ ) ; }"]}
{"ids": "48139", "code": ["TS Response ( byte [ ] ts Reply ) throws IO Exception {", "parse ( ts Reply ) ; }"]}
{"ids": "70787", "code": ["public static void execute Command ( Process Builder p ) throws IO Exception {", "Process proc = p . start ( ) ;", "try ( Buffered Reader std Input = new Buffered Reader ( new Input Stream Reader ( proc . get Input Stream ( ) ) ) ; Buffered Reader std Error = new Buffered Reader ( new Input Stream Reader ( proc . get Error Stream ( ) ) ) ) {", "logger . info ( STR_ ) ;", "String s ;", "while ( ( s = std Input . read Line ( ) ) != null ) {", "logger . info ( s ) ; }", "logger . info ( STR_ ) ;", "while ( ( s = std Error . read Line ( ) ) != null ) {", "logger . info ( s ) ; } } }"]}
{"ids": "65955", "code": ["public boolean page Setup Dialog ( Printer Job job ) {", "Print Request Attribute Set prats = get Print Request Attribute Set ( ) ;", "Page Format pf = job . page Dialog ( prats ) ;", "set Print Request Attribute Set ( prats ) ;", "return true ; }"]}
{"ids": "28413", "code": ["public static void assert Not Equals ( Buffered Image image 1 , Buffered Image image 2 ) {", "assert Not Equals ( STR_ , image 1 , image 2 ) ; }"]}
{"ids": "3762", "code": ["public Depend ( Path Impl source , long digest , boolean require Source ) {", "this ( source ) ;", "long new Digest = source . get Crc 64 ( ) ;", "require Source = require Source ;", "if ( new Digest == digest ) { }", "else if ( ! require Source && new Digest == NUM_ ) { }", "else if ( new Digest == NUM_ ) {", "if ( log . is Loggable ( Level . FINE ) ) log . fine ( source . get Native Path ( ) + STR_ ) ;", "is Digest Modified = true ; }", "else {", "is Digest Modified = true ; } }"]}
{"ids": "78779", "code": ["public static boolean string To File ( final String data , final File target File , final boolean do Append ) {", "if ( target File == null || ! is Writable ( target File , true ) ) {", "Log . e ( File Utils . class , STR_ ) ;", "return false ; }", "boolean is Succeed = true ;", "try {", "final File Writer out = new File Writer ( target File , do Append ) ;", "out . write ( data ) ;", "out . flush ( ) ;", "out . close ( ) ; }", "catch ( IO Exception e ) {", "is Succeed = false ; }", "return is Succeed ; }"]}
{"ids": "14659", "code": ["public void initialize ( Map config Params ) throws Policy Exception {", "if ( config Params == null ) {", "throw ( new Policy Exception ( Res Bundle Utils . rb Name , STR_ , null , null ) ) ; }", "String configured Ldap Server = ( String ) config Params . get ( Policy Config . LDAP SERVER ) ;", "if ( configured Ldap Server == null ) {", "debug . error ( STR_ + STR_ + STR_ + STR_ + STR_ ) ;", "throw ( new Policy Exception ( Res Bundle Utils . rb Name , STR_ , null , null ) ) ; }", "ldap Server = configured Ldap Server . to Lower Case ( ) ;", "local DS = Policy Utils . is Local DS ( ldap Server ) ;", "alias Enabled = Boolean . value Of ( ( String ) config Params . get ( Policy Config . USER ALIAS ENABLED ) ) ;", "String authid = ( String ) config Params . get ( Policy Config . LDAP BIND DN ) ;", "String authpw = ( String ) config Params . get ( Policy Config . LDAP BIND PASSWORD ) ;", "if ( authpw != null ) {", "authpw = Policy Utils . decrypt ( authpw ) ; }", "base DN = ( String ) config Params . get ( Policy Config . LDAP USERS BASE DN ) ;", "user Search Filter = ( String ) config Params . get ( Policy Config . LDAP USERS SEARCH FILTER ) ;", "String scope = ( String ) config Params . get ( Policy Config . LDAP USERS SEARCH SCOPE ) ;", "if ( scope . equals Ignore Case ( LDAP SCOPE BASE ) ) {", "user Search Scope = Search Scope . BASE OBJECT ; }", "else if ( scope . equals Ignore Case ( LDAP SCOPE ONE ) ) {", "user Search Scope = Search Scope . SINGLE LEVEL ; }", "else {", "user Search Scope = Search Scope . WHOLE SUBTREE ; }", "user RDN Attr Name = ( String ) config Params . get ( Policy Config . LDAP USER SEARCH ATTRIBUTE ) ;", "int min Pool Size ;", "int max Pool Size ;", "try {", "time Limit = Integer . parse Int ( ( String ) config Params . get ( Policy Config . LDAP SEARCH TIME OUT ) ) ;", "max Results = Integer . parse Int ( ( String ) config Params . get ( Policy Config . LDAP SEARCH LIMIT ) ) ;", "min Pool Size = Integer . parse Int ( ( String ) config Params . get ( Policy Config . LDAP CONNECTION POOL MIN SIZE ) ) ;", "max Pool Size = Integer . parse Int ( ( String ) config Params . get ( Policy Config . LDAP CONNECTION POOL MAX SIZE ) ) ; }", "catch ( Number Format Exception nfe ) {", "throw ( new Policy Exception ( nfe ) ) ; }", "boolean ssl Enabled = Boolean . value Of ( ( String ) config Params . get ( Policy Config . LDAP SSL ENABLED ) ) ;", "Set org Name Set = ( Set ) config Params . get ( Policy Manager . ORGANIZATION NAME ) ;", "if ( ( org Name Set != null ) && ( ! org Name Set . is Empty ( ) ) ) {", "Iterator items = org Name Set . iterator ( ) ;", "org Name = ( String ) items . next ( ) ; }", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + ldap Server + STR_ + authid + STR_ + base DN + STR_ + user Search Filter + STR_ + user RDN Attr Name + STR_ + time Limit + STR_ + max Results + STR_ + min Pool Size + STR_ + max Pool Size + STR_ + ssl Enabled + STR_ + org Name ) ; }", "LDAP Connection Pools . init Connection Pool ( ldap Server , authid , authpw , ssl Enabled , min Pool Size , max Pool Size ) ;", "conn Pool = LDAP Connection Pools . get Connection Pool ( ldap Server ) ;", "initialized = true ; }"]}
{"ids": "42520", "code": ["private static void read DNA ( String filename ) {", "try {", "Line Number Reader in = new Line Number Reader ( new File Reader ( filename ) ) ;", "process One Line ( in , STR_ , compilation Rates ) ;", "process One Line ( in , STR_ , speedup Rates ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "VM . sys Fail ( STR_ ) ; } }"]}
{"ids": "8734", "code": ["Builder ( URL swagger Url ) {", "try {", "this . swagger Location = swagger Url . to URI ( ) ; }", "catch ( URI Syntax Exception e ) {", "throw new Illegal Argument Exception ( STR_ , e ) ; }", "this . swagger = read Swagger ( swagger Url . to String ( ) ) ; }"]}
{"ids": "23467", "code": ["@ Override public void on Save Instance State ( @ Non Null Bundle saved Instance State ) {", "saved Instance State . put Parcelable ( LOCATION KEY , current Location ) ;", "if ( last Location Update Time != null ) {", "saved Instance State . put Long ( LAST LOCATION UPDATE TIME STRING KEY , last Location Update Time . get Time ( ) ) ; }", "if ( last Wifi Scan Time != null ) {", "saved Instance State . put Long ( LAST WIFI SCAN TIME STRING KEY , last Wifi Scan Time . get Time ( ) ) ; }", "saved Instance State . put Boolean ( LOGGING ENABLED KEY , logging Enabled ) ;", "super . on Save Instance State ( saved Instance State ) ; }"]}
{"ids": "42059", "code": ["public static String remove Empty Lines ( String text ) {", "text = text . replace All ( STR_ + Chinese Language Constants . SPACE [ NUM_ ] + STR_ , STR_ ) ;", "text = text . replace All ( STR_ + Chinese Language Constants . SPACE [ NUM_ ] + STR_ , STR_ ) ;", "return text ; }"]}
{"ids": "67022", "code": ["public void keep Only ( Set < I Var Abstraction > useful Pointers ) {", "Set < I Var Abstraction > reps = new Hash Set < I Var Abstraction > ( ) ;", "for ( I Var Abstraction pn : useful Pointers ) {", "reps . add ( pn . get Representative ( ) ) ; }", "useful Pointers . add All ( reps ) ;", "reps = null ;", "for ( I Var Abstraction pn : pointers ) {", "if ( ! useful Pointers . contains ( pn ) ) pn . delete All ( ) ; }", "System . gc ( ) ; }"]}
{"ids": "49824", "code": ["public static String encrypt CFB ( final byte [ ] concatenated Hash Value , final Long turnover Counter , final Secret Key symmetric Key , int turn Over Counter Length In Bytes ) throws No Such Algorithm Exception , No Such Provider Exception , No Such Padding Exception , Invalid Key Exception , Invalid Algorithm Parameter Exception , Illegal Block Size Exception , Bad Padding Exception {", "final Byte Buffer byte Buffer IV = Byte Buffer . allocate ( NUM_ ) ;", "byte Buffer IV . put ( concatenated Hash Value ) ;", "final byte [ ] IV = byte Buffer IV . array ( ) ;", "final Byte Buffer byte Buffer Data = Byte Buffer . allocate ( NUM_ ) ;", "byte Buffer Data . put Long ( turnover Counter ) ;", "final byte [ ] data = byte Buffer Data . array ( ) ;", "byte [ ] turn Over Counter Byte Rep = get 2 Complement Rep For Long ( turnover Counter , turn Over Counter Length In Bytes ) ;", "System . arraycopy ( turn Over Counter Byte Rep , NUM_ , data , NUM_ , turn Over Counter Byte Rep . length ) ;", "final Iv Parameter Spec iv Spec = new Iv Parameter Spec ( IV ) ;", "final Cipher cipher = Cipher . get Instance ( STR_ , STR_ ) ;", "cipher . init ( Cipher . ENCRYPT MODE , symmetric Key , iv Spec ) ;", "final byte [ ] encrypted Turn Over Value Complete = cipher . do Final ( data ) ;", "final byte [ ] encrypted Turn Over Value = new byte [ turn Over Counter Length In Bytes ] ;", "System . arraycopy ( encrypted Turn Over Value Complete , NUM_ , encrypted Turn Over Value , NUM_ , turn Over Counter Length In Bytes ) ;", "final String base 64 Encrypted Turn Over Value = Cash Box Utils . base 64 Encode ( encrypted Turn Over Value , false ) ;", "return base 64 Encrypted Turn Over Value ; }"]}
{"ids": "14412", "code": ["public void reset Lockout Attempts ( String user DN , AM Identity am Identity , Account Lockout Info ac Info , boolean reset Duration ) {", "debug . message ( STR_ ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + reset Duration ) ; }", "int fail count = NUM_ ;", "long last Fail Time = NUM_ ;", "long locked out at = NUM_ ;", "long actual Lockout Duration = failure Lockout Duration ;", "long current Lockout Duration = ac Info . get Actual Lockout Duration ( ) ;", "if ( ac Info != null ) {", "fail count = ac Info . get Fail Count ( ) ;", "last Fail Time = ac Info . get Last Fail Time ( ) ;", "locked out at = ac Info . get Lockout At ( ) ;", "long now = current Time Millis ( ) ;", "if ( ! reset Duration ) {", "actual Lockout Duration = current Lockout Duration ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ + locked out at ) ; }", "if ( locked out at > NUM_ ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + STR_ ) ; }", "actual Lockout Duration = failure Lockout Multiplier * ( current Lockout Duration ) ; } } }", "if ( store Invalid Attempts In DS ) {", "try {", "if ( ( fail count != NUM_ ) || ( last Fail Time != NUM_ ) || ( locked out at != NUM_ ) || ( actual Lockout Duration != current Lockout Duration ) ) {", "Map attr Map = new Hash Map ( ) ;", "Set invalid Attempts = new Hash Set ( ) ;", "String invalid XML = create Invalid Attempts XML ( NUM_ , NUM_ , NUM_ , actual Lockout Duration ) ;", "invalid Attempts . add ( invalid XML ) ;", "attr Map . put ( invalid Attempts Data Attr Name , invalid Attempts ) ;", "set Lockout Object Class ( am Identity ) ;", "am Identity . set Attributes ( attr Map ) ;", "debug . message ( STR_ + invalid XML ) ;", "am Identity . store ( ) ; }", "debug . message ( STR_ ) ; }", "catch ( Exception exp ) {", "debug . message ( STR_ ) ; } }", "ac Info . set Fail Count ( NUM_ ) ;", "ac Info . set Last Fail Time ( NUM_ ) ;", "ac Info . set Lockout At ( NUM_ ) ;", "ac Info . set Lockout ( false ) ;", "ac Info . set Actual Lockout Duration ( actual Lockout Duration ) ; }"]}
{"ids": "8830", "code": ["String public Name From Disk Name ( String disk Name ) {", "if ( ! should Disk Name Be Visible ( disk Name ) ) {", "throw new Illegal Argument Exception ( STR_ + disk Name ) ; }", "return disk Name . substring ( m File Prefix . length ( ) , disk Name . length ( ) ) ; }"]}
{"ids": "78715", "code": ["public double [ ] predict ( F Vec feat ) {", "return predict ( feat , false ) ; }"]}
{"ids": "86694", "code": ["public static < A > A [ ] append ( final A [ ] a , final A [ ] b ) {", "final int alen = a . length ;", "final int blen = b . length ;", "final A [ ] res = Arrays . copy Of ( a , alen + blen ) ;", "System . arraycopy ( b , NUM_ , res , alen , blen ) ;", "return res ; }"]}
{"ids": "60475", "code": ["public boolean add Listener ( @ Not Null Soft Wrap Aware Document Parsing Listener listener ) {", "return my Listeners . add ( listener ) ; }"]}
{"ids": "25736", "code": ["private void assert Array Equals ( double [ ] expected , double [ ] actual , double delta , boolean check Na N ) {", "Assert . assert Equals ( expected . length , actual . length ) ;", "for ( int index = NUM_ ; index < actual . length ; index ++ ) {", "double d 1 = expected [ index ] ;", "double d 2 = actual [ index ] ;", "if ( Double . is Na N ( d 1 ) || Double . is Na N ( d 2 ) ) {", "if ( check Na N ) {", "Assert . assert True ( Double . is Na N ( d 1 ) == Double . is Na N ( d 2 ) ) ; }", "Assert . assert True ( true ) ; }", "else {", "Assert . assert Equals ( d 1 , d 2 , delta ) ; } } }"]}
{"ids": "26765", "code": ["protected void add To Population ( Solution new Solution ) {", "List < Integer > dominates = new Array List < Integer > ( ) ;", "boolean dominated = false ;", "for ( int i = NUM_ ; i < population . size ( ) ; i ++ ) {", "int flag = dominance Comparator . compare ( new Solution , population . get ( i ) ) ;", "if ( flag < NUM_ ) {", "dominates . add ( i ) ; }", "else if ( flag > NUM_ ) {", "dominated = true ; } }", "if ( ! dominates . is Empty ( ) ) {", "population . remove ( dominates . get ( PRNG . next Int ( dominates . size ( ) ) ) ) ;", "population . add ( new Solution ) ; }", "else if ( ! dominated ) {", "population . remove ( PRNG . next Int ( population . size ( ) ) ) ;", "population . add ( new Solution ) ; } }"]}
{"ids": "55997", "code": ["public void update Max Text Widths ( float required Width , float match Contents Width ) {", "m Max Required Width = Math . max ( m Max Required Width , required Width ) ;", "m Max Match Contents Width = Math . max ( m Max Match Contents Width , match Contents Width ) ; }"]}
{"ids": "55028", "code": ["private String generate Blend Mode Import ( Blend Mode blend Mode ) {", "if ( blend Mode == Blend Mode . COLOR ) return STR_ ;", "else if ( blend Mode == Blend Mode . COLORBURN ) return STR_ ;", "else if ( blend Mode == Blend Mode . COLORDODGE ) return STR_ ;", "else if ( blend Mode == Blend Mode . EXCLUSION ) return STR_ ;", "else if ( blend Mode == Blend Mode . HUE ) return STR_ ;", "else if ( blend Mode == Blend Mode . LUMINOSITY ) return STR_ ;", "else if ( blend Mode == Blend Mode . SATURATION ) return STR_ ;", "else if ( blend Mode == Blend Mode . SOFTLIGHT ) return STR_ ;", "else return null ; }"]}
{"ids": "14220", "code": ["public Sm Auth Status query ( String parameter , String secret , Sm Auth Query Code request , Sm Auth Query Response response ) {", "if ( null == response ) {", "return Sm Auth Status . SMAUTH FAILURE ; }", "if ( Sm Auth Query Code . SMAUTH QUERY DESCRIPTION == request ) {", "response . set Response Buffer ( SCHEME DESCRIPTION ) ;", "response . set Response Code ( SCHEME VERSION ) ; }", "else if ( Sm Auth Query Code . SMAUTH QUERY CREDENTIALS REQ == request ) {", "response . set Response Code ( Sm Auth Query Response . SMAUTH CRED BASIC ) ; }", "else {", "return Sm Auth Status . SMAUTH FAILURE ; }", "return Sm Auth Status . SMAUTH SUCCESS ; }"]}
{"ids": "5177", "code": ["protected void add All Transitive Jars ( War Archive Merger wam ) throws Mojo Execution Exception {", "Dependency Calculator dc = new Dependency Calculator ( artifact Factory , resolver , local Repository , remote Repositories , maven Project , maven Project Builder , installer , container ) ;", "try {", "for ( File f : dc . execute ( ) ) {", "wam . add Merge Item ( f ) ; } }", "catch ( Exception ex ) {", "throw new Mojo Execution Exception ( STR_ , ex ) ; } }"]}
{"ids": "16959", "code": ["private void add ( int col , Graphical Node graphical Node ) {", "my Graphical Nodes . remove ( graphical Node ) ;", "if ( nb Cols - NUM_ < col ) {", "nb Cols = col + NUM_ ; }", "int row = NUM_ ;", "while ( is Occupied ( row , col ) ) {", "row ++ ; }", "graphical Node . row = row ;", "graphical Node . col = col ;", "my Graphical Nodes . add ( graphical Node ) ; }"]}
{"ids": "25547", "code": ["private int add Tonal Components ( float [ ] spectrum , int num Components , Tonal Component [ ] components ) {", "int last Pos = - NUM_ ;", "for ( int i = NUM_ ; i < num Components ; i ++ ) {", "last Pos = Math . max ( components [ i ] . pos + components [ i ] . num Coefs , last Pos ) ;", "for ( int j = NUM_ ; j < components [ i ] . num Coefs ; j ++ ) {", "spectrum [ components [ i ] . pos + j ] += components [ i ] . coef [ j ] ; } }", "return last Pos ; }"]}
{"ids": "20246", "code": ["public static List < User Layer > extract User Layers ( Styled Layer Descriptor sld ) {", "List < User Layer > user Layer List = new Array List < User Layer > ( ) ;", "if ( sld != null ) {", "for ( Styled Layer layer : sld . layers ( ) ) {", "if ( layer instanceof User Layer ) {", "User Layer user Layer = ( User Layer ) layer ;", "user Layer List . add ( user Layer ) ; } } }", "return user Layer List ; }"]}
{"ids": "31923", "code": ["public static void close Quiet ( @ Nullable Selector rsrc ) {", "if ( rsrc != null ) try {", "if ( rsrc . is Open ( ) ) rsrc . close ( ) ; }", "catch ( IO Exception ignored ) { } }"]}
{"ids": "83554", "code": ["private Linked List < Diff > diff main ( String text 1 , String text 2 , boolean checklines , long deadline ) {", "if ( text 1 == null || text 2 == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Linked List < Diff > diffs ;", "if ( text 1 . equals ( text 2 ) ) {", "diffs = new Linked List < Diff > ( ) ;", "if ( text 1 . length ( ) != NUM_ ) {", "diffs . add ( new Diff ( Operation . EQUAL , text 1 ) ) ; }", "return diffs ; }", "int commonlength = diff common Prefix ( text 1 , text 2 ) ;", "String commonprefix = text 1 . substring ( NUM_ , commonlength ) ;", "text 1 = text 1 . substring ( commonlength ) ;", "text 2 = text 2 . substring ( commonlength ) ;", "commonlength = diff common Suffix ( text 1 , text 2 ) ;", "String commonsuffix = text 1 . substring ( text 1 . length ( ) - commonlength ) ;", "text 1 = text 1 . substring ( NUM_ , text 1 . length ( ) - commonlength ) ;", "text 2 = text 2 . substring ( NUM_ , text 2 . length ( ) - commonlength ) ;", "diffs = diff compute ( text 1 , text 2 , checklines , deadline ) ;", "if ( commonprefix . length ( ) != NUM_ ) {", "diffs . add First ( new Diff ( Operation . EQUAL , commonprefix ) ) ; }", "if ( commonsuffix . length ( ) != NUM_ ) {", "diffs . add Last ( new Diff ( Operation . EQUAL , commonsuffix ) ) ; }", "diff cleanup Merge ( diffs ) ;", "return diffs ; }"]}
{"ids": "79004", "code": ["public static boolean create Compaction Required File ( String meta Folder Path , Compaction Type compaction Type ) {", "String status File ;", "if ( compaction Type . equals ( Compaction Type . MINOR COMPACTION ) ) {", "status File = meta Folder Path + Carbon Common Constants . FILE SEPARATOR + Carbon Common Constants . minor Compaction Required File ; }", "else {", "status File = meta Folder Path + Carbon Common Constants . FILE SEPARATOR + Carbon Common Constants . major Compaction Required File ; }", "try {", "if ( ! File Factory . is File Exist ( status File , File Factory . get File Type ( status File ) ) ) {", "if ( File Factory . create New File ( status File , File Factory . get File Type ( status File ) ) ) {", "LOGGER . info ( STR_ + status File ) ;", "return true ; }", "else {", "LOGGER . error ( STR_ + status File ) ;", "return false ; } }", "else {", "LOGGER . info ( STR_ + status File + STR_ ) ; } }", "catch ( IO Exception e ) {", "LOGGER . error ( STR_ + e . get Message ( ) ) ; }", "return false ; }"]}
{"ids": "46020", "code": ["private boolean allow Notification Emission ( Object Name name , Targeted Notification tn ) {", "try {", "if ( check Notification Emission ) {", "check M Bean Permission ( name , STR_ ) ; }", "if ( notification Access Controller != null ) {", "notification Access Controller . fetch Notification ( connection Id , name , tn . get Notification ( ) , get Subject ( ) ) ; }", "return true ; }", "catch ( Security Exception e ) {", "if ( logger . debug On ( ) ) {", "logger . debug ( STR_ , STR_ + tn . get Notification ( ) + STR_ + STR_ ) ; }", "return false ; }", "catch ( Exception e ) {", "if ( logger . debug On ( ) ) {", "logger . debug ( STR_ , STR_ + tn . get Notification ( ) + STR_ + STR_ + e ) ; }", "return false ; } }"]}
{"ids": "2847", "code": ["public void update Throughput ( long current Time ) {", "throughput Calculation Lock . lock ( ) ;", "try {", "int interval = ( int ) ( current Time - last Throughput Calculation Time ) ;", "long min Interval = get Throughput Calculation Interval In Millis ( ) ;", "if ( ( min Interval == NUM_ ) || ( interval < min Interval ) ) {", "return ; }", "long read Bytes = this . read Bytes ;", "long written Bytes = this . written Bytes ;", "long read Messages = this . read Messages ;", "long written Messages = this . written Messages ;", "read Bytes Throughput = ( read Bytes - last Read Bytes ) * NUM_ / interval ;", "written Bytes Throughput = ( written Bytes - last Written Bytes ) * NUM_ / interval ;", "read Messages Throughput = ( read Messages - last Read Messages ) * NUM_ / interval ;", "written Messages Throughput = ( written Messages - last Written Messages ) * NUM_ / interval ;", "if ( read Bytes Throughput > largest Read Bytes Throughput ) {", "largest Read Bytes Throughput = read Bytes Throughput ; }", "if ( written Bytes Throughput > largest Written Bytes Throughput ) {", "largest Written Bytes Throughput = written Bytes Throughput ; }", "if ( read Messages Throughput > largest Read Messages Throughput ) {", "largest Read Messages Throughput = read Messages Throughput ; }", "if ( written Messages Throughput > largest Written Messages Throughput ) {", "largest Written Messages Throughput = written Messages Throughput ; }", "last Read Bytes = read Bytes ;", "last Written Bytes = written Bytes ;", "last Read Messages = read Messages ;", "last Written Messages = written Messages ;", "last Throughput Calculation Time = current Time ; }", "finally {", "throughput Calculation Lock . unlock ( ) ; } }"]}
{"ids": "85242", "code": ["public List < Verification OK > verify ( X 509 Certificate sign Cert , X 509 Certificate issuer Cert , Date sign Date ) throws General Security Exception , IO Exception {", "Root Store Verifier root Store Verifier = new Root Store Verifier ( verifier ) ;", "root Store Verifier . set Root Store ( root Store ) ;", "CRL Verifier crl Verifier = new CRL Verifier ( root Store Verifier , get CR Ls From DSS ( ) ) ;", "crl Verifier . set Root Store ( root Store ) ;", "crl Verifier . set Online Checking Allowed ( latest Revision || online Checking Allowed ) ;", "OCSP Verifier ocsp Verifier = new OCSP Verifier ( crl Verifier , get OCSP Responses From DSS ( ) ) ;", "ocsp Verifier . set Root Store ( root Store ) ;", "ocsp Verifier . set Online Checking Allowed ( latest Revision || online Checking Allowed ) ;", "return ocsp Verifier . verify ( sign Cert , issuer Cert , sign Date ) ; }"]}
{"ids": "8331", "code": ["public void println ( ) {", "if ( add Newlines ) {", "try {", "out . write ( STR_ ) ; }", "catch ( IO Exception ioe ) {", "throw new Groovy Runtime Exception ( ioe ) ; } } }"]}
{"ids": "42812", "code": ["public void delivery Complete ( final I Mqtt Delivery Token token ) {", "logger . trace ( STR_ , token . get Message Id ( ) ) ; }"]}
{"ids": "9803", "code": ["public D Export Public Key Open Ssl ( J Frame parent , String entry Alias ) {", "super ( parent , Dialog . Modality Type . DOCUMENT MODAL ) ;", "this . entry Alias = entry Alias ;", "init Components ( ) ; }"]}
{"ids": "84378", "code": ["public static String escape Unicode ( String s ) {", "int len = s . length ( ) ;", "int i = NUM_ ;", "while ( i < len ) {", "char ch = s . char At ( i ) ;", "if ( ch > NUM_ ) {", "String Builder buf = new String Builder ( ) ;", "buf . append ( s . substring ( NUM_ , i ) ) ;", "while ( i < len ) {", "ch = s . char At ( i ) ;", "if ( ch > NUM_ ) {", "buf . append ( STR_ ) ;", "buf . append ( Character . for Digit ( ( ch > > NUM_ ) % NUM_ , NUM_ ) ) ;", "buf . append ( Character . for Digit ( ( ch > > NUM_ ) % NUM_ , NUM_ ) ) ;", "buf . append ( Character . for Digit ( ( ch > > NUM_ ) % NUM_ , NUM_ ) ) ;", "buf . append ( Character . for Digit ( ( ch ) % NUM_ , NUM_ ) ) ; }", "else {", "buf . append ( ch ) ; }", "i ++ ; }", "s = buf . to String ( ) ; }", "else {", "i ++ ; } }", "return s ; }"]}
{"ids": "82064", "code": ["public void key Pressed ( final int key Code ) {", "if ( impl . get Current Form ( ) == null ) {", "return ; }", "add Single Argument Event ( KEY PRESSED , key Code ) ;", "last Interaction Was Keypad = last Interaction Was Keypad || ( key Code != Menu Bar . left SK && key Code != Menu Bar . clear SK && key Code != Menu Bar . back SK ) ;", "key Repeat Charged = ( key Code >= NUM_ || get Game Action ( key Code ) > NUM_ ) || key Code == impl . get Clear Key Code ( ) ;", "long Press Charged = key Repeat Charged ;", "long Key Press Time = System . current Time Millis ( ) ;", "key Repeat Value = key Code ;", "next Key Repeat Event = System . current Time Millis ( ) + key Repeat Initial Interval Time ;", "previous Key Pressed = last Key Pressed ;", "last Key Pressed = key Code ; }"]}
{"ids": "77934", "code": ["public boolean is Empty ( ) {", "return filter . is Empty ( ) && query . is Empty ( ) && sort . is Empty ( ) ; }"]}
{"ids": "49904", "code": ["public void register Input ( String var Name , Java RDD < String > rdd In , String format , long rlen , long clen , File Format Properties props , List < Value Type > schema ) throws DML Runtime Exception {", "if ( ! ( DML Script . rtplatform == RUNTIME PLATFORM . SPARK || DML Script . rtplatform == RUNTIME PLATFORM . HYBRID SPARK ) ) {", "throw new DML Runtime Exception ( STR_ ) ; }", "long nnz = - NUM_ ;", "if ( variables == null ) variables = new Local Variable Map ( ) ;", "if ( in Varnames == null ) in Varnames = new Array List < String > ( ) ;", "Java Pair RDD < Long Writable , Text > rdd Text = rdd In . map To Pair ( new Convert String To Long Text Pair ( ) ) ;", "int blksz = Configuration Manager . get Blocksize ( ) ;", "Matrix Characteristics mc = new Matrix Characteristics ( rlen , clen , blksz , blksz , nnz ) ;", "Frame Object fo = null ;", "if ( format . equals ( STR_ ) ) {", "CSV File Format Properties csvprops = ( props != null ) ? ( CSV File Format Properties ) props : new CSV File Format Properties ( ) ;", "fo = new Frame Object ( Optimizer Utils . get Unique Temp File Name ( ) , new Matrix Format Meta Data ( mc , Output Info . CSV Output Info , Input Info . CSV Input Info ) ) ;", "fo . set File Format Properties ( csvprops ) ; }", "else if ( format . equals ( STR_ ) ) {", "if ( rlen == - NUM_ || clen == - NUM_ ) {", "throw new DML Runtime Exception ( STR_ + format ) ; }", "fo = new Frame Object ( null , new Matrix Format Meta Data ( mc , Output Info . Text Cell Output Info , Input Info . Text Cell Input Info ) ) ; }", "else {", "throw new DML Runtime Exception ( STR_ + format ) ; }", "if ( props != null ) fo . set File Format Properties ( props ) ;", "fo . set RDD Handle ( new RDD Object ( rdd Text , var Name ) ) ;", "fo . set Schema ( STR_ ) ;", "variables . put ( var Name , fo ) ;", "in Varnames . add ( var Name ) ;", "check If Registering Input Allowed ( ) ; }"]}
{"ids": "18163", "code": ["public void check Number Args ( int arg Num ) throws Wrong Number Args Exception {", "if ( arg Num < NUM_ ) report Wrong Number Args ( ) ; }"]}
{"ids": "81051", "code": ["public static String fix Line Feeds ( String sql ) {", "if ( sql . index Of ( STR_ ) == - NUM_ ) {", "return sql ; }", "boolean has Fixes = false ;", "char [ ] fixed = sql . to Char Array ( ) ;", "for ( int i = NUM_ ; i < fixed . length ; i ++ ) {", "if ( fixed [ i ] == STR_ && ( i == fixed . length - NUM_ || fixed [ i + NUM_ ] != STR_ ) ) {", "fixed [ i ] = STR_ ;", "has Fixes = true ; } }", "return has Fixes ? String . value Of ( fixed ) : sql ; }"]}
{"ids": "1323", "code": ["public static String merge Path ( String current , String real Path ) throws Malformed URL Exception {", "String curr Dir ;", "if ( current == null || current . index Of ( STR_ ) == - NUM_ ) curr Dir = STR_ ;", "else if ( current . ends With ( STR_ ) ) curr Dir = current ;", "else curr Dir = current . substring ( NUM_ , current . last Index Of ( STR_ ) + NUM_ ) ;", "String path ;", "if ( real Path . starts With ( STR_ ) ) path = curr Dir + real Path . substring ( NUM_ ) ;", "else if ( real Path . starts With ( STR_ ) ) path = real Path ;", "else if ( ! real Path . starts With ( STR_ ) ) path = curr Dir + real Path ;", "else {", "while ( real Path . starts With ( STR_ ) || curr Dir . length ( ) == NUM_ ) {", "real Path = real Path . substring ( NUM_ ) ;", "curr Dir = curr Dir . substring ( NUM_ , curr Dir . length ( ) - NUM_ ) ;", "int index = curr Dir . last Index Of ( STR_ ) ;", "if ( index == - NUM_ ) throw new Malformed URL Exception ( STR_ ) ;", "curr Dir = curr Dir . substring ( NUM_ , index + NUM_ ) ; }", "path = curr Dir + real Path ; }", "return path ; }"]}
{"ids": "8487", "code": ["public void rollback ( ) throws SQL Exception {", "if ( use Connection == null ) {", "LOG . info ( STR_ ) ;", "return ; }", "try {", "use Connection . rollback ( ) ; }", "catch ( SQL Exception e ) {", "LOG . warning ( STR_ + e . get Message ( ) ) ;", "throw e ; } }"]}
{"ids": "84249", "code": ["public byte [ ] to Byte Array ( ) {", "if ( header Nonce == null || header Tag == null ) {", "throw new Aws Crypto Exception ( STR_ ) ; }", "final byte [ ] serialized Fields = serialize Authenticated Fields ( ) ;", "final int out Len = serialized Fields . length + header Nonce . length + header Tag . length ;", "final Byte Buffer serialized Bytes = Byte Buffer . allocate ( out Len ) ;", "serialized Bytes . put ( serialized Fields ) ;", "serialized Bytes . put ( header Nonce ) ;", "serialized Bytes . put ( header Tag ) ;", "return serialized Bytes . array ( ) ; }"]}
{"ids": "869", "code": ["public boolean contains Key ( Object key ) {", "return context . get Attribute ( ( String ) key ) != null ; }"]}
{"ids": "41493", "code": ["private void update Limit ( int limit ) {", "current Cycle . set Limit ( limit ) ;", "update Plan Cycles ( ) ;", "confirm Update . set Text Color ( resources . get Color ( R . color . light gray ) ) ; }"]}
{"ids": "13506", "code": ["@ Suppress Warnings ( STR_ ) public Set < S > descendants ( ) {", "Set < S > perms = new Hash Set < > ( ) ;", "for ( S child : children ) {", "perms . add ( child ) ;", "perms . add All ( child . descendants ( ) ) ; }", "return perms ; }"]}
{"ids": "82896", "code": ["private String extract Url ( String shared Url ) {", "String final Url ;", "final Url = shared Url . trim ( ) ;", "String [ ] possible urls = final Url . split ( STR_ ) ;", "for ( String url : possible urls ) {", "if ( Network Manager . is Url ( url ) ) {", "final Url = url ;", "break ; } }", "final Url = final Url . substring ( final Url . last Index Of ( STR_ ) + NUM_ ) ;", "final Url = final Url . substring ( final Url . last Index Of ( STR_ ) + NUM_ ) ;", "if ( Network Manager . is Url ( STR_ + final Url ) && ! Network Manager . is Url ( final Url ) ) {", "final Url = STR_ + final Url ; }", "if ( final Url . contains ( STR_ ) ) {", "final Url = final Url . substring ( NUM_ , final Url . index Of ( STR_ ) ) ; }", "if ( final Url . contains ( STR_ ) ) {", "final Url = final Url . substring ( NUM_ , final Url . index Of ( STR_ ) ) ; }", "if ( final Url . contains ( STR_ ) ) {", "final Url = final Url . substring ( NUM_ , final Url . index Of ( STR_ ) ) ; }", "return final Url ; }"]}
{"ids": "15285", "code": ["public Set entry Set ( ) {", "return map . entry Set ( ) ; }"]}
{"ids": "39845", "code": ["public static String encode ( String input ) {", "return Base 64 . encode Base 64 String ( input . get Bytes ( Standard Charsets . UTF 8 ) ) ; }"]}
{"ids": "77724", "code": ["public void add Split ( String split Label ) {", "if ( m Disabled ) return ;", "long now = System Clock . elapsed Realtime ( ) ;", "m Splits . add ( now ) ;", "m Split Labels . add ( split Label ) ; }"]}
{"ids": "39834", "code": ["protected String encode ( final String value ) {", "try {", "return URL Encoder . encode ( value , STR_ ) ; }", "catch ( Exception exp ) {", "return value ; } }"]}
{"ids": "48979", "code": ["private void check Connect Permission ( ) throws Security Exception {", "Security Manager security = System . get Security Manager ( ) ;", "if ( security == null ) return ;", "if ( security != cache Security Manager ) {", "ok Context = null ;", "authcache = new Weak Hash Map < Access Control Context , Reference < Access Control Context > > ( ) ;", "cache Security Manager = security ; }", "Access Control Context ctx = Access Controller . get Context ( ) ;", "if ( ok Context == null || ! ( ok Context . equals ( ctx ) || authcache . contains Key ( ctx ) ) ) {", "security . check Connect ( ep . get Host ( ) , ep . get Port ( ) ) ;", "authcache . put ( ctx , new Soft Reference < Access Control Context > ( ctx ) ) ; }", "ok Context = ctx ; }"]}
{"ids": "61586", "code": ["private boolean condition L 0 ( String value , int index ) {", "if ( index == value . length ( ) - NUM_ && contains ( value , index - NUM_ , NUM_ , STR_ , STR_ , STR_ ) ) {", "return true ; }", "else if ( ( contains ( value , index - NUM_ , NUM_ , STR_ , STR_ ) || contains ( value , value . length ( ) - NUM_ , NUM_ , STR_ , STR_ ) ) && contains ( value , index - NUM_ , NUM_ , STR_ ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "75837", "code": ["public static Pagination Context from Context ( Routing Context context ) {", "Http Server Request request = context . request ( ) ;", "String page Str = request . get Param ( Pagination Context . CURRENT PAGE QUERY PARAM ) ;", "String per Page Str = request . get Param ( Pagination Context . PER PAGE QUERY PARAM ) ;", "Integer page = null ;", "Integer per Page = null ;", "try {", "if ( page Str != null ) {", "page = Integer . parse Int ( page Str ) ; }", "if ( per Page Str != null ) {", "per Page = Integer . parse Int ( per Page Str ) ; } }", "catch ( Number Format Exception e ) {", "Default Error Handler . bad Request ( context , STR_ ) ; }", "if ( per Page != null && per Page > Pagination Context . MAX PER PAGE ) {", "Default Error Handler . bad Request ( context , STR_ + Pagination Context . PER PAGE QUERY PARAM + STR_ + Pagination Context . MAX PER PAGE ) ; }", "return new Pagination Context ( page , per Page ) ; }"]}
{"ids": "34628", "code": ["private void update Data Type State ( ) {", "boolean is Sync Enabled = m Sync Switch Preference . is Checked ( ) ;", "boolean sync Everything = m Sync Everything . is Checked ( ) ;", "boolean password Sync Configurable = m Profile Sync Service . is Backend Initialized ( ) && m Profile Sync Service . is Cryptographer Ready ( ) ;", "for ( Check Box Preference pref : m All Types ) {", "boolean can Sync Type = pref != m Sync Passwords || password Sync Configurable ;", "if ( ! is Sync Enabled ) {", "pref . set Checked ( true ) ; }", "else if ( sync Everything ) {", "pref . set Checked ( can Sync Type ) ; }", "pref . set Enabled ( is Sync Enabled && ! sync Everything && can Sync Type ) ; }", "if ( is Sync Enabled && ! sync Everything ) {", "Set < Integer > sync Types = m Profile Sync Service . get Preferred Data Types ( ) ;", "m Sync Autofill . set Checked ( sync Types . contains ( Model Type . AUTOFILL ) ) ;", "m Sync Bookmarks . set Checked ( sync Types . contains ( Model Type . BOOKMARKS ) ) ;", "m Sync Omnibox . set Checked ( sync Types . contains ( Model Type . TYPED URLS ) ) ;", "m Sync Passwords . set Checked ( password Sync Configurable && sync Types . contains ( Model Type . PASSWORDS ) ) ;", "m Sync Recent Tabs . set Checked ( sync Types . contains ( Model Type . PROXY TABS ) ) ;", "m Sync Settings . set Checked ( sync Types . contains ( Model Type . PRIORITY PREFERENCES ) ) ; } }"]}
{"ids": "4277", "code": ["public static void write Protein Best Matches To File ( String file Path , Map < String , PIRSF Hmmer 2 Raw Match > protein Id Best Match Map ) throws IO Exception {", "Buffered Writer writer = null ;", "try {", "File file = create Tmp File ( file Path ) ;", "if ( ! file . exists ( ) ) {", "throw new Illegal State Exception ( STR_ + file Path ) ; }", "writer = new Buffered Writer ( new File Writer ( file ) ) ;", "for ( String protein Id : protein Id Best Match Map . key Set ( ) ) {", "PIRSF Hmmer 2 Raw Match best Match = protein Id Best Match Map . get ( protein Id ) ;", "if ( best Match != null ) {", "writer . write ( protein Id ) ;", "writer . write ( STR_ ) ;", "writer . write ( best Match . get Model Id ( ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( best Match . get Signature Library Release ( ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Location Start ( ) ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Location End ( ) ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Evalue ( ) ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Score ( ) ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Hmm Start ( ) ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Hmm End ( ) ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( best Match . get Hmm Bounds ( ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Location Evalue ( ) ) ) ;", "writer . write ( STR_ ) ;", "writer . write ( String . value Of ( best Match . get Location Score ( ) ) ) ;", "writer . write ( STR_ ) ; } } }", "finally {", "if ( writer != null ) {", "writer . close ( ) ; } } }"]}
{"ids": "37762", "code": ["public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "80707", "code": ["void refresh UI ( String xml , DOM Tree m tree ) {", "if ( ( xml == null ) || xml . equals ( STR_ ) ) {", "set Error Message ( STR_ , STR_ ) ;", "return ; }", "final Document new Root = get Root ( xml ) ;", "if ( new Root == null ) {", "set Error Message ( STR_ , STR_ ) ;", "return ; }", "m tree . set Document ( new Root ) ; }"]}
{"ids": "21362", "code": ["private void cleanup Protection Set Volumes ( Protection Set protection Set , List < String > volume I Ds , boolean mark Protection Set For Deletion ) {", "if ( protection Set != null ) {", "log . info ( STR_ , protection Set . get Label ( ) , volume I Ds . to String ( ) ) ;", "String Set pset Volumes = protection Set . get Volumes ( ) ;", "pset Volumes . remove All ( volume I Ds ) ;", "protection Set . set Volumes ( pset Volumes ) ;", "if ( mark Protection Set For Deletion ) {", "protection Set . set Inactive ( true ) ; }", "db Client . update Object ( protection Set ) ; } }"]}
{"ids": "37878", "code": ["private static Normalization determine Normalization ( Element model ) {", "Normalization norm Method = Normalization . NONE ;", "String norm Name = model . get Attribute ( STR_ ) ;", "if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . SIMPLEMAX ; }", "else if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . SOFTMAX ; }", "else if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . LOGIT ; }", "else if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . PROBIT ; }", "else if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . CLOGLOG ; }", "else if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . EXP ; }", "else if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . LOGLOG ; }", "else if ( norm Name . equals ( STR_ ) ) {", "norm Method = Normalization . CAUCHIT ; }", "return norm Method ; }"]}
{"ids": "42347", "code": ["Operand pop ( Register s ) {", "Stack < Operand > stack = get ( s ) ;", "if ( stack == null ) {", "throw new Optimizing Compiler Exception ( STR_ ) ; }", "else {", "return stack . pop ( ) ; } }"]}
{"ids": "30187", "code": ["public static void back And Forth ( HG Search Result < ? > rs , int window Size , int iteration ) {", "boolean advance = true ;", "for ( int i = NUM_ ; i < iteration ; i ++ ) {", "Object x = rs . current ( ) ;", "int steps = random ( window Size ) ;", "steps = forward ( rs , steps ) ;", "if ( back ( rs , steps ) != steps ) throw new Runtime Exception ( STR_ + steps + STR_ ) ;", "if ( ! x . equals ( rs . current ( ) ) ) throw new Runtime Exception ( STR_ + steps + STR_ + x ) ;", "if ( advance ) {", "forward ( rs , random ( window Size ) ) ;", "if ( ! rs . has Next ( ) ) {", "back ( rs , random ( window Size ) ) ;", "advance = false ; } }", "else {", "back ( rs , random ( window Size ) ) ;", "if ( ! rs . has Prev ( ) ) {", "forward ( rs , random ( window Size ) ) ;", "advance = true ; } } } }"]}
{"ids": "57732", "code": ["@ Override public void close ( ) throws IO Exception {", "synchronized ( lock ) {", "if ( decoder != null ) {", "decoder . reset ( ) ; }", "decoder = null ;", "if ( in != null ) {", "in . close ( ) ;", "in = null ; } } }"]}
{"ids": "75564", "code": ["public List < String > provide White List ( ) {", "Linked List < String > white List = new Linked List < > ( ) ;", "white List . add ( STR_ ) ;", "return white List ; }"]}
{"ids": "78736", "code": ["@ Override public Double zincrby ( final String key , final double score , final String member ) {", "check Is In Multi Or Pipeline ( ) ;", "client . zincrby ( key , score , member ) ;", "String newscore = client . get Bulk Reply ( ) ;", "return Double . value Of ( newscore ) ; }"]}
{"ids": "48470", "code": ["private String Buffer to Pattern ( String Buffer result , boolean escape Unprintable ) {", "if ( pat != null ) {", "int i ;", "int backslash Count = NUM_ ;", "for ( i = NUM_ ; i < pat . length ( ) ; ) {", "int c = UTF 16 . char At ( pat , i ) ;", "i += UTF 16 . get Char Count ( c ) ;", "if ( escape Unprintable && Utility . is Unprintable ( c ) ) {", "if ( ( backslash Count % NUM_ ) == NUM_ ) {", "result . set Length ( result . length ( ) - NUM_ ) ; }", "Utility . escape Unprintable ( result , c ) ;", "backslash Count = NUM_ ; }", "else {", "UTF 16 . append ( result , c ) ;", "if ( c == STR_ ) {", "++ backslash Count ; }", "else {", "backslash Count = NUM_ ; } } }", "return result ; }", "return generate Pattern ( result , escape Unprintable , true ) ; }"]}
{"ids": "35386", "code": ["private static Version read Workspace Version ( final URL workspace ) {", "final File version File = get Version File ( workspace , false ) ;", "if ( version File == null || ! version File . exists ( ) ) {", "return null ; }", "try {", "final Properties props = new Properties ( ) ;", "final File Input Stream is = new File Input Stream ( version File ) ;", "try {", "props . load ( is ) ; }", "finally {", "is . close ( ) ; }", "String version String = props . get Property ( WORKSPACE CHECK REFERENCE BUNDLE NAME ) ;", "if ( version String != null ) {", "return Version . parse Version ( version String ) ; }", "version String = props . get Property ( WORKSPACE CHECK REFERENCE BUNDLE NAME LEGACY ) ;", "if ( version String != null ) {", "return Version . parse Version ( version String ) ; }", "return null ; }", "catch ( final IO Exception e ) {", "IDE Workbench Plugin . log ( STR_ + version File , new Status ( I Status . ERROR , IDE Workbench Plugin . IDE WORKBENCH , I Status . ERROR , e . get Message ( ) == null ? STR_ : e . get Message ( ) , e ) ) ;", "return null ; }", "catch ( final Illegal Argument Exception e ) {", "IDE Workbench Plugin . log ( STR_ + version File , new Status ( I Status . ERROR , IDE Workbench Plugin . IDE WORKBENCH , I Status . ERROR , e . get Message ( ) == null ? STR_ : e . get Message ( ) , e ) ) ;", "return null ; } }"]}
{"ids": "52928", "code": ["public Vector Approximation calculate Approximation ( DBID id , V dv ) {", "int [ ] approximation = new int [ dv . get Dimensionality ( ) ] ;", "for ( int d = NUM_ ; d < split Positions . length ; d ++ ) {", "final double val = dv . double Value ( d ) ;", "final int last Border Index = split Positions [ d ] . length - NUM_ ;", "if ( val < split Positions [ d ] [ NUM_ ] ) {", "approximation [ d ] = NUM_ ;", "if ( id != null ) {", "LOG . warning ( STR_ ) ; } }", "else if ( val > split Positions [ d ] [ last Border Index ] ) {", "approximation [ d ] = last Border Index - NUM_ ;", "if ( id != null ) {", "LOG . warning ( STR_ ) ; } }", "else {", "int pos = Arrays . binary Search ( split Positions [ d ] , val ) ;", "pos = ( pos >= NUM_ ) ? pos : ( ( - pos ) - NUM_ ) ;", "approximation [ d ] = pos ; } }", "return new Vector Approximation ( id , approximation ) ; }"]}
{"ids": "21559", "code": ["private boolean check If Volume Size Exceeding Pool Size ( CIM Argument [ ] in Args , CIM Argument [ ] out Args ) {", "if ( get Volume Size ( in Args ) > get Volume Size ( out Args ) ) {", "return true ; }", "return false ; }"]}
{"ids": "64906", "code": ["@ Suppress Warnings ( STR_ ) private void log ( String label , Byte Buffer buffer ) {", "String Builder sb = new String Builder ( ) ;", "sb . append ( label ) ;", "sb . append ( STR_ ) ;", "sb . append ( buffer . get ( NUM_ ) ) ;", "sb . append ( STR_ ) ;", "for ( int x = NUM_ ; x < NUM_ ; x ++ ) {", "sb . append ( String . format ( STR_ , ( int ) ( buffer . get ( x ) & NUM_ ) ) ) ;", "sb . append ( STR_ ) ; }", "m Log . debug ( sb . to String ( ) ) ; }"]}
{"ids": "11174", "code": ["private void read Object ( Object Input Stream ois ) throws Class Not Found Exception , IO Exception {", "ois . default Read Object ( ) ;", "boolean has Font = ois . read Boolean ( ) ;", "if ( has Font ) {", "String name = ( String ) ois . read Object ( ) ;", "int size = ois . read Int ( ) ;", "int style = ois . read Int ( ) ;", "font = new Font ( name , style , size ) ; }", "else {", "font = OM Text . DEFAULT FONT ; } }"]}
{"ids": "8111", "code": ["public void add File ( String filename ) {", "if ( filename != null ) add File ( new File ( filename ) ) ; }"]}
{"ids": "47536", "code": ["public String format ( Temporal Accessor temporal ) {", "String Builder buf = new String Builder ( NUM_ ) ;", "format To ( temporal , buf ) ;", "return buf . to String ( ) ; }"]}
{"ids": "82702", "code": ["public void paint Toggle Button Background ( Synth Context context , Graphics g , int x , int y , int w , int h ) {", "paint Background ( context , g , x , y , w , h , null ) ; }"]}
{"ids": "15128", "code": ["void save Device Profile ( @ Nonnull String user , @ Nonnull String realm , @ Nonnull Oath Device Settings device Settings ) throws Auth Login Exception {", "Reject . if Null ( user , realm , device Settings ) ;", "try {", "devices Dao . save Device Profiles ( user , realm , json Utils . to Json Values ( Collections . singleton List ( device Settings ) ) ) ; }", "catch ( IO Exception e ) {", "debug . error ( STR_ , user , realm , e ) ;", "throw new Auth Login Exception ( e ) ; } }"]}
{"ids": "56867", "code": ["protected List < String > parameters To String List ( List < Parameter > parameters ) {", "List < String > list = new Array List < > ( ) ;", "for ( Parameter parameter : parameters ) {", "list . add ( String . format ( STR_ , parameter . get Name ( ) , parameter . get Value ( ) ) ) ; }", "return list ; }"]}
{"ids": "33105", "code": ["public static boolean is Matching Name ( String name A , String name B ) {", "int a = name A . length ( ) ;", "int b = name B . length ( ) ;", "if ( a == b ) {", "return name A . equals ( name B ) ; }", "else if ( a < b - NUM_ ) {", "return name B . ends With ( name A ) && name B . char At ( b - a - NUM_ ) == STR_ ; }", "else if ( b < a - NUM_ ) {", "return name A . ends With ( name B ) && name A . char At ( a - b - NUM_ ) == STR_ ; }", "else {", "return false ; } }"]}
{"ids": "49499", "code": ["private void validate Will ( String dest , Object payload ) {", "if ( ( dest == null ) || ( payload == null ) ) {", "throw new Illegal Argument Exception ( ) ; }", "Mqtt Async Client . validate Topic ( dest ) ; }"]}
{"ids": "6908", "code": ["public static float ccp Calc Rotate ( final CG Point from , final CG Point to ) {", "float o = to . x - from . x ;", "float a = to . y - from . y ;", "float at = cc Macros . CC RADIANS TO DEGREES ( ( float ) Math . atan ( o / a ) ) ;", "if ( a < NUM_ ) {", "if ( o < NUM_ ) at = NUM_ + Math . abs ( at ) ;", "else at = NUM_ - Math . abs ( at ) ; }", "return at ; }"]}
{"ids": "26074", "code": ["public static String clean Tabs ( String yaml ) {", "if ( yaml . contains ( STR_ ) ) {", "LOGGER . warn ( STR_ + STR_ + STR_ , TAB AS SPACES . length ( ) ) ;", "List < String > lines = NEWLINE SPLITTER . split To List ( yaml ) ;", "String Builder sb = new String Builder ( ) ;", "for ( String line : lines ) {", "String clean Line = replace Starting Tabs With Spaces ( line ) ;", "sb . append ( clean Line ) ;", "sb . append ( STR_ ) ; }", "return sb . to String ( ) ; }", "else {", "return yaml ; } }"]}
{"ids": "7507", "code": ["private static Paint darker Radial Gradient Paint ( Radial Gradient Paint paint ) {", "final Color [ ] paint Colors = paint . get Colors ( ) ;", "for ( int i = NUM_ ; i < paint Colors . length ; i ++ ) {", "paint Colors [ i ] = darker ( paint Colors [ i ] ) ; }", "return new Radial Gradient Paint ( paint . get Center Point ( ) , paint . get Radius ( ) , paint . get Focus Point ( ) , paint . get Fractions ( ) , paint Colors , paint . get Cycle Method ( ) , paint . get Color Space ( ) , paint . get Transform ( ) ) ; }"]}
{"ids": "47447", "code": ["private void check And Set Fast Path Status ( ) {", "boolean fast Path Was On = is Fast Path ;", "if ( ( rounding Mode == Rounding Mode . HALF EVEN ) && ( is Grouping Used ( ) ) && ( grouping Size == NUM_ ) && ( multiplier == NUM_ ) && ( ! decimal Separator Always Shown ) && ( ! use Exponential Notation ) ) {", "is Fast Path = ( ( minimum Integer Digits == NUM_ ) && ( maximum Integer Digits >= NUM_ ) ) ;", "if ( is Fast Path ) {", "if ( is Currency Format ) {", "if ( ( minimum Fraction Digits != NUM_ ) || ( maximum Fraction Digits != NUM_ ) ) is Fast Path = false ; }", "else if ( ( minimum Fraction Digits != NUM_ ) || ( maximum Fraction Digits != NUM_ ) ) is Fast Path = false ; } }", "else is Fast Path = false ;", "if ( is Fast Path ) {", "if ( fast Path Data == null ) fast Path Data = new Fast Path Data ( ) ;", "fast Path Data . zero Delta = symbols . get Zero Digit ( ) - STR_ ;", "fast Path Data . grouping Char = symbols . get Grouping Separator ( ) ;", "fast Path Data . fractional Max Int Bound = ( is Currency Format ) ? NUM_ : NUM_ ;", "fast Path Data . fractional Scale Factor = ( is Currency Format ) ? NUM_ : NUM_ ;", "fast Path Data . positive Affixes Required = ( positive Prefix . length ( ) != NUM_ ) || ( positive Suffix . length ( ) != NUM_ ) ;", "fast Path Data . negative Affixes Required = ( negative Prefix . length ( ) != NUM_ ) || ( negative Suffix . length ( ) != NUM_ ) ;", "int max Nb Integral Digits = NUM_ ;", "int max Nb Groups = NUM_ ;", "int container Size = Math . max ( positive Prefix . length ( ) , negative Prefix . length ( ) ) + max Nb Integral Digits + max Nb Groups + NUM_ + maximum Fraction Digits + Math . max ( positive Suffix . length ( ) , negative Suffix . length ( ) ) ;", "fast Path Data . fast Path Container = new char [ container Size ] ;", "fast Path Data . chars Positive Suffix = positive Suffix . to Char Array ( ) ;", "fast Path Data . chars Negative Suffix = negative Suffix . to Char Array ( ) ;", "fast Path Data . chars Positive Prefix = positive Prefix . to Char Array ( ) ;", "fast Path Data . chars Negative Prefix = negative Prefix . to Char Array ( ) ;", "int longest Prefix Length = Math . max ( positive Prefix . length ( ) , negative Prefix . length ( ) ) ;", "int decimal Point Index = max Nb Integral Digits + max Nb Groups + longest Prefix Length ;", "fast Path Data . integral Last Index = decimal Point Index - NUM_ ;", "fast Path Data . fractional First Index = decimal Point Index + NUM_ ;", "fast Path Data . fast Path Container [ decimal Point Index ] = is Currency Format ? symbols . get Monetary Decimal Separator ( ) : symbols . get Decimal Separator ( ) ; }", "else if ( fast Path Was On ) {", "fast Path Data . fast Path Container = null ;", "fast Path Data . chars Positive Suffix = null ;", "fast Path Data . chars Negative Suffix = null ;", "fast Path Data . chars Positive Prefix = null ;", "fast Path Data . chars Negative Prefix = null ; }", "fast Path Check Needed = false ; }"]}
{"ids": "81568", "code": ["public boolean is Click Touch Screen ( ) {", "String s = Device Info . get Software Version ( ) ;", "if ( s . length ( ) > NUM_ ) {", "int v = Integer . parse Int ( s . substring ( NUM_ , NUM_ ) ) ;", "return v <= NUM_ ; }", "return false ; }"]}
{"ids": "58467", "code": ["public DOM Test Document Builder Factory new Instance ( Document Builder Setting [ ] new Settings ) throws DOM Test Incompatible Exception {", "if ( new Settings == null ) {", "return this ; }", "Document Builder Setting [ ] merged Settings = merge Settings ( new Settings ) ;", "return new LS Document Builder Factory ( merged Settings ) ; }"]}
{"ids": "63109", "code": ["public void reset ( ) {", "index = NUM_ ;", "if ( file != null ) {", "list Index = NUM_ ;", "if ( ! written ) {", "write All Rows ( ) ;", "written = true ; }", "list . clear ( ) ;", "file . seek ( File Store . HEADER LENGTH ) ; } }"]}
{"ids": "71059", "code": ["public void add ( Geometry Function func ) {", "functions . add ( func ) ;", "sorted Functions . put ( func . get Name ( ) , func ) ;", "categorized Functions . put ( func . get Category ( ) , func . get Name ( ) , func ) ;", "if ( has Geometry Result ( func ) ) categorized Geometry Functions . put ( func . get Category ( ) , func . get Name ( ) , func ) ; }"]}
{"ids": "52178", "code": ["public static Clusters convert To Clusters ( Graph cluster Graph , List < Node > measured Variables ) {", "List < String > latents = new Array List < > ( ) ;", "Clusters clusters = new Clusters ( ) ;", "cluster Graph = Graph Utils . replace Nodes ( cluster Graph , measured Variables ) ;", "for ( Node node : cluster Graph . get Nodes ( ) ) {", "if ( ! measured Variables . contains ( node ) ) {", "latents . add ( node . get Name ( ) ) ; } }", "Collections . sort ( latents ) ;", "for ( int i = NUM_ ; i < latents . size ( ) ; i ++ ) {", "String name = latents . get ( i ) ;", "clusters . set Cluster Name ( i , name ) ;", "Node latent = cluster Graph . get Node ( name ) ;", "List < Node > measured = cluster Graph . get Nodes Out To ( latent , Endpoint . ARROW ) ;", "for ( Node node : measured ) {", "if ( measured Variables . contains ( node ) ) {", "clusters . add To Cluster ( i , node . get Name ( ) ) ; } } }", "return clusters ; }"]}
{"ids": "46244", "code": ["final short rlshort ( Data Input Stream dis ) throws IO Exception {", "short s = NUM_ ;", "short high , low ;", "s = dis . read Short ( ) ;", "high = ( short ) ( ( s & NUM_ ) << NUM_ ) ;", "low = ( short ) ( ( s & NUM_ ) > > > NUM_ ) ;", "s = ( short ) ( high | low ) ;", "return s ; }"]}
{"ids": "36733", "code": ["public void encode Cell ( mx I Cell cell , Node node , boolean include Children ) {", "node . append Child ( encode ( cell ) ) ;", "if ( include Children ) {", "int child Count = cell . get Child Count ( ) ;", "for ( int i = NUM_ ; i < child Count ; i ++ ) {", "encode Cell ( cell . get Child At ( i ) , node , include Children ) ; } } }"]}
{"ids": "16080", "code": ["public Date Time Formatter with Locale ( Locale locale ) {", "if ( locale == get Locale ( ) || ( locale != null && locale . equals ( get Locale ( ) ) ) ) {", "return this ; }", "return new Date Time Formatter ( i Printer , i Parser , locale , i Offset Parsed , i Chrono , i Zone , i Pivot Year , i Default Year ) ; }"]}
{"ids": "77889", "code": ["public String next String ( char quote ) throws JSON Exception {", "char c ;", "String Builder sb = new String Builder ( ) ;", "for ( ; ; ) {", "c = next ( ) ;", "switch ( c ) {", "case NUM_ :", "case STR_ :", "case STR_ :", "throw syntax Error ( STR_ ) ;", "case STR_ :", "c = next ( ) ;", "switch ( c ) {", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( STR_ ) ;", "break ;", "case STR_ :", "sb . append ( ( char ) Integer . parse Int ( next ( NUM_ ) , NUM_ ) ) ;", "break ;", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "sb . append ( c ) ;", "break ;", "default :", "throw syntax Error ( STR_ ) ; }", "break ;", "default :", "if ( c == quote ) {", "return sb . to String ( ) ; }", "sb . append ( c ) ; } } }"]}
{"ids": "13962", "code": ["public static Response parse XML ( String xml ) throws SAML Exception {", "Document doc = XML Utils . to DOM Document ( xml , SAML Utils . debug ) ;", "Element root = doc . get Document Element ( ) ;", "return new Response ( root ) ; }"]}
{"ids": "68625", "code": ["public Compiled SQL register Param Type ( String param Name , String data Type ) {", "if ( param Types == null ) {", "param Types = new Hash Map ( ) ; }", "param Types . put ( param Name , data Type ) ;", "return this ; }"]}
{"ids": "53105", "code": ["public void begin Step ( int step , String step Title , Logging logger ) {", "set Processed ( step - NUM_ ) ;", "this . step Title = step Title ;", "logger . progress ( this ) ; }"]}
{"ids": "31138", "code": ["public boolean equals ( Object obj ) {", "if ( this == obj ) {", "return true ; }", "else if ( ! ( obj instanceof Method Desc ) ) {", "return false ; }", "Method Desc od = ( Method Desc ) obj ;", "return ( ( name == null ? od . name == null : name . equals ( od . name ) ) && Arrays . equals ( types , od . types ) && ( constraints == null ? od . constraints == null : constraints . equals ( od . constraints ) ) ) ; }"]}
{"ids": "61883", "code": ["public Set < String > add Content ( Dialogue State new State ) {", "if ( ! paused ) {", "cur State . add To State ( new State ) ;", "return update ( ) ; }", "else {", "log . info ( STR_ + new State ) ;", "return Collections . empty Set ( ) ; } }"]}
{"ids": "6967", "code": ["public long remove Index ( int index ) {", "if ( index >= size ) throw new Index Out Of Bounds Exception ( String . value Of ( index ) ) ;", "long [ ] items = this . items ;", "long value = items [ index ] ;", "size -- ;", "if ( ordered ) System . arraycopy ( items , index + NUM_ , items , index , size - index ) ;", "else items [ index ] = items [ size ] ;", "return value ; }"]}
{"ids": "51587", "code": ["public FD Model load Model ( String filename , String cwd ) {", "String fn = filename ;", "if ( fn == null ) return null ;", "if ( ! fn . ends With ( STR_ + file Extension ) ) {", "fn += STR_ + file Extension ; }", "Model Persistence Handler persistence Handler = create Model Persistence Handler ( resource Set Provider . get ( ) ) ;", "return ( FD Model ) persistence Handler . load Model ( fn , cwd ) ; }"]}
{"ids": "69060", "code": ["public boolean save Current Configuration ( ) {", "if ( current Config . to String ( ) == null ) {", "return ( true ) ; }", "int answer = J Option Pane . show Confirm Dialog ( null , STR_ , STR_ , J Option Pane . YES NO CANCEL OPTION , J Option Pane . QUESTION MESSAGE , Icons . get Image Icon ( STR_ ) ) ;", "if ( answer == J Option Pane . CANCEL OPTION ) {", "return ( false ) ; }", "else if ( answer == J Option Pane . NO OPTION ) {", "return ( true ) ; }", "return ( save Current Configuration As ( false ) ) ; }"]}
{"ids": "62047", "code": ["public static double [ ] normalise ( double [ ] init Probs ) {", "for ( int i = NUM_ ; i < init Probs . length ; i ++ ) {", "if ( init Probs [ i ] < NUM_ ) {", "init Probs [ i ] = NUM_ ; } }", "double sum = NUM_ ;", "for ( double prob : init Probs ) {", "sum += prob ; }", "double [ ] result = new double [ init Probs . length ] ;", "if ( sum > NUM_ ) {", "for ( int i = NUM_ ; i < init Probs . length ; i ++ ) {", "result [ i ] = init Probs [ i ] / sum ; } }", "else {", "for ( int i = NUM_ ; i < init Probs . length ; i ++ ) {", "result [ i ] = NUM_ / init Probs . length ; } }", "return result ; }"]}
{"ids": "64111", "code": ["public void track ( File file , Object marker , File Delete Strategy delete Strategy ) {", "if ( file == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "add Tracker ( file . get Path ( ) , marker , delete Strategy ) ; }"]}
{"ids": "9504", "code": ["protected String Builder append Search String Param If Necessary ( String Builder sb ) {", "String search String Param = get Encoded Search String Param ( ) ;", "if ( search String Param != null ) {", "if ( sb . index Of ( STR_ ) == - NUM_ ) {", "sb . append ( STR_ ) ; }", "else {", "sb . append ( STR_ ) ; }", "sb . append ( search String Param ) ; }", "return sb ; }"]}
{"ids": "62260", "code": ["public static Class Info find Or Create Class ( String full Name ) {", "Class Info u = find Class ( full Name ) ;", "if ( u == null ) {", "u = new Class Info ( full Name ) ;", "if ( u . is Array ( ) ) {", "find Or Create Class ( full Name . substring ( NUM_ ) ) ; } }", "return u ; }"]}
{"ids": "5052", "code": ["Pla Point Rational ( Big Integer p x , Big Integer p y , Big Integer p z ) {", "rp x = p x ;", "rp y = p y ;", "rp z = p z ;", "is nan = p z . signum ( ) <= NUM_ ; }"]}
{"ids": "4420", "code": ["public boolean is Null Value ( ) {", "return String Utils . trim To Null ( value ) == null && String Utils . trim To Null ( comment ) == null ; }"]}
{"ids": "1671", "code": ["private Map < Long , Pair < String , Long > > recover Pending Large Messages ( ) throws Exception {", "Map < Long , Pair < String , Long > > large Messages = new Hash Map < > ( ) ;", "List < String > filenames = large Messages Factory . list Files ( STR_ ) ;", "List < Long > id List = new Array List < > ( ) ;", "for ( String filename : filenames ) {", "Long id = get Large Message Id From Filename ( filename ) ;", "if ( ! large Messages To Delete . contains ( id ) ) {", "id List . add ( id ) ;", "Sequential File seq File = large Messages Factory . create Sequential File ( filename ) ;", "long size = seq File . size ( ) ;", "large Messages . put ( id , new Pair < > ( filename , size ) ) ; } }", "return large Messages ; }"]}
{"ids": "18088", "code": ["private void check For Fragment ID ( Attributes attributes ) {", "if ( ! m should Process ) {", "if ( ( null != attributes ) && ( null != m fragment ID String ) ) {", "int n = attributes . get Length ( ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "String name = attributes . get Q Name ( i ) ;", "if ( name . equals ( Constants . ATTRNAME ID ) ) {", "String val = attributes . get Value ( i ) ;", "if ( val . equals Ignore Case ( m fragment ID String ) ) {", "m should Process = true ;", "m fragment ID = m element ID ; } } } } } }"]}
{"ids": "54996", "code": ["public void unparsed Entity Decl ( String name , XML Resource Identifier identifier , String notation , Augmentations augs ) throws XNI Exception {", "try {", "if ( f DTD Handler != null ) {", "String public Id = identifier . get Public Id ( ) ;", "String system Id = f Resolve DTDUR Is ? identifier . get Expanded System Id ( ) : identifier . get Literal System Id ( ) ;", "f DTD Handler . unparsed Entity Decl ( name , public Id , system Id , notation ) ; } }", "catch ( SAX Exception e ) {", "throw new XNI Exception ( e ) ; } }"]}
{"ids": "78669", "code": ["public void wait For Paxos To Finish ( ) {", "propose Lock . lock ( ) ;", "can Propose . await Uninterruptibly ( ) ;", "propose Lock . unlock ( ) ; }"]}
{"ids": "5777", "code": ["public static Response Data parse ( String response Data ) {", "int index = response Data . index Of ( STR_ ) ;", "String main Data , extra Data ;", "if ( - NUM_ == index ) {", "main Data = response Data ;", "extra Data = STR_ ; }", "else {", "main Data = response Data . substring ( NUM_ , index ) ;", "extra Data = index >= response Data . length ( ) ? STR_ : response Data . substring ( index + NUM_ ) ; }", "String [ ] fields = Text Utils . split ( main Data , Pattern . quote ( STR_ ) ) ;", "if ( fields . length < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Response Data data = new Response Data ( ) ;", "data . extra = extra Data ;", "data . response Code = Integer . parse Int ( fields [ NUM_ ] ) ;", "data . nonce = Integer . parse Int ( fields [ NUM_ ] ) ;", "data . package Name = fields [ NUM_ ] ;", "data . version Code = fields [ NUM_ ] ;", "data . user Id = fields [ NUM_ ] ;", "data . timestamp = Long . parse Long ( fields [ NUM_ ] ) ;", "return data ; }"]}
{"ids": "13722", "code": ["public void validate ( ) throws AM Console Exception {", "if ( is Selected ( ) ) {", "if ( is Personal Question ( ) ) {", "if ( ( question . length ( ) == NUM_ ) || ( answer . length ( ) == NUM_ ) ) {", "throw new AM Console Exception ( STR_ ) ; } }", "else {", "if ( answer . length ( ) == NUM_ ) {", "throw new AM Console Exception ( STR_ ) ; } } } }"]}
{"ids": "23932", "code": ["public static void assert True ( boolean b , Object message ) {", "if ( ! b ) {", "throw Error ( message ) ; } }"]}
{"ids": "35107", "code": ["private String [ ] spliterator ( String phrase ) {", "String [ ] split = phrase . split ( STR_ ) ;", "String [ ] out = new String [ split . length ] ;", "for ( int ix = NUM_ ; ix < split . length ; ix ++ ) {", "String temp = split [ ix - NUM_ ] ;", "temp += STR_ + split [ ix ] ;", "out [ ix - NUM_ ] = temp ; }", "return out ; }"]}
{"ids": "47005", "code": ["protected Signature ( String algorithm ) {", "this . algorithm = algorithm ; }"]}
{"ids": "45096", "code": ["private final void augment Token List ( ) {", "Token [ ] temp = new Token [ size + increment ] ;", "System . arraycopy ( token List , NUM_ , temp , NUM_ , size ) ;", "size += increment ;", "token List = temp ;", "for ( int i = NUM_ ; i < increment ; i ++ ) {", "token List [ size - i - NUM_ ] = create Internal Use Only Token ( ) ; } }"]}
{"ids": "29648", "code": ["public String calculate From String ( String data ) throws Exception {", "log . trace ( STR_ , algo URI , data ) ;", "return calculate From Bytes ( data . get Bytes ( Standard Charsets . UTF 8 ) ) ; }"]}
{"ids": "64858", "code": ["public void add Channels ( List < Channel > channels ) {", "for ( Channel channel : channels ) {", "add Channel ( channel ) ; } }"]}
{"ids": "50382", "code": ["public static String [ ] merge String Arrays ( String [ ] array 1 , String [ ] array 2 ) {", "if ( Object Utils . is Empty ( array 1 ) ) {", "return array 2 ; }", "if ( Object Utils . is Empty ( array 2 ) ) {", "return array 1 ; }", "List < String > result = new Array List < String > ( ) ;", "result . add All ( Arrays . as List ( array 1 ) ) ;", "for ( String str : array 2 ) {", "if ( ! result . contains ( str ) ) {", "result . add ( str ) ; } }", "return to String Array ( result ) ; }"]}
{"ids": "36454", "code": ["private double damp ( double value ) {", "return Math . sqrt ( value ) ; }"]}
{"ids": "34480", "code": ["public void add Measurement ( double measurement ) {", "double keep Constant = NUM_ - m Decay Constant ;", "if ( m Count > m Cutover ) {", "m Value = Math . exp ( keep Constant * Math . log ( m Value ) + m Decay Constant * Math . log ( measurement ) ) ; }", "else if ( m Count > NUM_ ) {", "double retained = keep Constant * m Count / ( m Count + NUM_ ) ;", "double newcomer = NUM_ - retained ;", "m Value = Math . exp ( retained * Math . log ( m Value ) + newcomer * Math . log ( measurement ) ) ; }", "else {", "m Value = measurement ; }", "m Count ++ ; }"]}
{"ids": "28564", "code": ["@ Suppress Warnings ( STR_ ) private String next Unquoted Value ( ) throws IO Exception {", "String Builder builder = null ;", "int i = NUM_ ;", "find Non Literal Character : while ( true ) {", "for ( ; pos + i < limit ; i ++ ) {", "switch ( buffer [ pos + i ] ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "check Lenient ( ) ;", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "break find Non Literal Character ; } }", "if ( i < buffer . length ) {", "if ( fill Buffer ( i + NUM_ ) ) {", "continue ; }", "else {", "break ; } }", "if ( builder == null ) {", "builder = new String Builder ( ) ; }", "builder . append ( buffer , pos , i ) ;", "pos += i ;", "i = NUM_ ;", "if ( ! fill Buffer ( NUM_ ) ) {", "break ; } }", "String result ;", "if ( builder == null ) {", "result = new String ( buffer , pos , i ) ; }", "else {", "builder . append ( buffer , pos , i ) ;", "result = builder . to String ( ) ; }", "pos += i ;", "return result ; }"]}
{"ids": "24813", "code": ["public long arg end ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "84961", "code": ["static List < I Runtime Classpath Entry > compute Classpath ( I Java Project java Project ) throws Core Exception {", "I Runtime Classpath Entry [ ] unresolved Runtime Classpath = Java Runtime . compute Unresolved Runtime Classpath ( java Project ) ;", "List < I Runtime Classpath Entry > resolved Runtime Classpath = new Array List < I Runtime Classpath Entry > ( ) ;", "for ( I Runtime Classpath Entry unresolved Classpath Entry : unresolved Runtime Classpath ) {", "if ( Java Runtime . is VM Install Reference ( unresolved Classpath Entry ) ) {", "continue ; }", "resolved Runtime Classpath . add All ( Arrays . as List ( Java Runtime . resolve Runtime Classpath Entry ( unresolved Classpath Entry , java Project ) ) ) ; }", "try {", "resolved Runtime Classpath . add All ( NUM_ , GWT Project Utilities . get GWT Source Folder Paths From Project And Dependencies ( java Project , false ) ) ; }", "catch ( Sdk Exception e ) {", "throw new Core Exception ( new Status ( I Status . ERROR , GWT Plugin . PLUGIN ID , e . get Localized Message ( ) , e ) ) ; }", "Gwt Sdk gwt Runtime = Gwt Sdk . find Sdk For ( java Project ) ;", "if ( gwt Runtime == null ) {", "GWT Plugin Log . log Warning ( STR_ + java Project . get Element Name ( ) + STR_ ) ;", "return resolved Runtime Classpath ; }", "I Status validation Status = gwt Runtime . validate ( ) ;", "if ( ! validation Status . is OK ( ) ) {", "GWT Plugin Log . log Warning ( STR_ + java Project . get Element Name ( ) + STR_ + validation Status . get Message ( ) + STR_ ) ;", "return resolved Runtime Classpath ; }", "try {", "File gwt Dev Jar = gwt Runtime . get Dev Jar ( ) ;", "resolved Runtime Classpath . add ( Java Runtime . new Archive Runtime Classpath Entry ( Path . from OS String ( gwt Dev Jar . get Absolute Path ( ) ) ) ) ; }", "catch ( Sdk Exception e ) {", "GWT Plugin Log . log Warning ( e , STR_ ) ; }", "return resolved Runtime Classpath ; }"]}
{"ids": "77592", "code": ["@ Suppress Warnings ( STR_ ) public Throwing Mock Token Filter Factory ( Map < String , String > args ) {", "super ( args ) ;", "String exception Class Name = args . get ( STR_ ) ;", "if ( exception Class Name == null ) {", "throw new Runtime Exception ( STR_ ) ; }", "try {", "exception Class = ( Class < ? extends Runtime Exception > ) Class . for Name ( exception Class Name ) ; }", "catch ( Class Not Found Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "7229", "code": ["public Pattern Guard Expr ( String namespace , String name , List < Expression > parameters , Pattern Expr guarded Pattern ) {", "super ( namespace , name , parameters ) ;", "this . guarded = new Array List < Pattern Expr > ( ) ;", "guarded . add ( guarded Pattern ) ; }"]}
{"ids": "69328", "code": ["private long start New Track ( ) {", "if ( is Recording ( ) ) {", "Log . d ( TAG , STR_ ) ;", "return - NUM_ ; }", "long now = System . current Time Millis ( ) ;", "track Trip Statistics Updater = new Trip Statistics Updater ( now ) ;", "marker Trip Statistics Updater = new Trip Statistics Updater ( now ) ;", "Track track = new Track ( ) ;", "Uri uri = my Tracks Provider Utils . insert Track ( track ) ;", "long track Id = Long . parse Long ( uri . get Last Path Segment ( ) ) ;", "update Recording State ( track Id , false ) ;", "Preferences Utils . set Int ( this , R . string . auto resume track current retry key , NUM_ ) ;", "Preferences Utils . set Int ( this , R . string . activity recognition type key , Preferences Utils . ACTIVITY RECOGNITION TYPE DEFAULT ) ;", "track . set Id ( track Id ) ;", "track . set Name ( Track Name Utils . get Track Name ( this , track Id , now , null ) ) ;", "String category = Preferences Utils . get String ( this , R . string . default activity key , Preferences Utils . DEFAULT ACTIVITY DEFAULT ) ;", "track . set Category ( category ) ;", "track . set Icon ( Track Icon Utils . get Icon Value ( this , category ) ) ;", "track . set Trip Statistics ( track Trip Statistics Updater . get Trip Statistics ( ) ) ;", "my Tracks Provider Utils . update Track ( track ) ;", "insert Waypoint ( Waypoint Creation Request . DEFAULT START TRACK ) ;", "start Recording ( true ) ;", "return track Id ; }"]}
{"ids": "73854", "code": ["protected Abstract MR Message poll Message ( ) {", "if ( disable Poll ) {", "return null ; }", "if ( ! poll Queue . is Empty ( ) ) {", "Poll Message pm = poll Queue . peek ( ) ;", "if ( pm != null ) {", "return pm . get Message ( ) ; } }", "return null ; }"]}
{"ids": "24197", "code": ["protected static String apply Limit Clause ( final String query , int limit , final int query Result Set Limit ) {", "Matcher matcher = SELECT EXPR PATTERN . matcher ( query ) ;", "if ( matcher . matches ( ) ) {", "Matcher limit matcher = SELECT WITH LIMIT EXPR PATTERN . matcher ( query ) ;", "boolean query Already Has Limit Clause = limit matcher . matches ( ) ;", "if ( ! query Already Has Limit Clause ) {", "if ( limit == NUM_ ) {", "limit = query Result Set Limit ; }", "String result = query ;", "result += STR_ + limit ;", "return result ; } }", "return query ; }"]}
{"ids": "79777", "code": ["public void unmaximise Component ( ) {", "if ( maximised Component == null ) {", "return ; }", "container . remove ( maximised Component ) ;", "container . add ( container Child ) ;", "parent Maximised Component . add ( maximised Component ) ;", "container . validate ( ) ;", "container Child = null ;", "parent Maximised Component = null ;", "maximised Component = null ; }"]}
{"ids": "49808", "code": ["default Char Seq join ( Char Sequence delimiter , Char Sequence prefix , Char Sequence suffix ) {", "String Builder string Builder = new String Builder ( prefix ) ;", "for Each ( null ) ;", "string Builder . append ( suffix ) ;", "return Char Seq . of ( string Builder . to String ( ) ) ; }"]}
{"ids": "57174", "code": ["public void remove Listener ( T listener ) {", "if ( listeners != null ) {", "List < T > newlisteners = new Array List < T > ( ) ;", "newlisteners . add All ( listeners ) ;", "newlisteners . remove ( listener ) ;", "listeners = newlisteners ; } }"]}
{"ids": "35809", "code": ["public static void save As ASCII ( NS Array root , File out ) throws IO Exception {", "Output Stream Writer w = new Output Stream Writer ( new File Output Stream ( out ) , STR_ ) ;", "w . write ( root . to ASCII Property List ( ) ) ;", "w . close ( ) ; }"]}
{"ids": "40314", "code": ["public static void filter Outbound ( String Builder message ) {", "for ( int i = NUM_ ; i < message . length ( ) ; i ++ ) {", "char current Char = message . char At ( i ) ;", "if ( LEGAL CHARACTERS . index Of ( current Char ) == - NUM_ ) {", "if ( current Char > NUM_ ) {", "int char As Int = current Char ;", "String string Version = Integer . to String ( char As Int , NUM_ ) ;", "String replacement = STR_ + string Version + STR_ ;", "message . replace ( i , i + NUM_ , replacement ) ;", "i += replacement . length ( ) - NUM_ ; }", "else {", "message . delete Char At ( i ) ;", "i -- ; } } } }"]}
{"ids": "5160", "code": ["private void draw Days ( Canvas canvas ) {", "final Text Paint p = m Day Paint ;", "final int header Height = m Month Height + m Day Of Week Height ;", "final int row Height = m Day Height ;", "final int col Width = m Cell Width ;", "final float half Line Height = ( p . ascent ( ) + p . descent ( ) ) / NUM_ ;", "int row Center = header Height + row Height / NUM_ ;", "for ( int day = NUM_ , col = find Day Offset ( ) ; day <= m Days In Month ; day ++ ) {", "final int col Center = col Width * col + col Width / NUM_ ;", "final int col Center Rtl ;", "if ( View Compat Utils . is Layout Rtl ( this ) ) {", "col Center Rtl = m Padded Width - col Center ; }", "else {", "col Center Rtl = col Center ; }", "int state = NUM_ ;", "final boolean is Day Enabled = is Day Enabled ( day ) ;", "final boolean is Day Activated = m Activated Day == day ;", "if ( is Day Activated ) {", "state = VIEW STATE SELECTED ;", "canvas . draw Circle ( col Center Rtl , row Center , m Day Selector Radius , m Day Selector Paint ) ; }", "else if ( m Touched Item == day ) {", "state = VIEW STATE PRESSED ;", "if ( is Day Enabled ) {", "canvas . draw Circle ( col Center Rtl , row Center , m Day Selector Radius , m Day Highlight Paint ) ; } }", "final boolean is Day Today = m Today == day ;", "final int day Text Color ;", "if ( is Day Today && ! is Day Activated ) {", "day Text Color = m Day Selector Paint . get Color ( ) ; }", "else {", "final int [ ] state Set = build State ( is Day Enabled , state ) ;", "day Text Color = m Day Text Color . get Color For State ( state Set , NUM_ ) ; }", "p . set Color ( day Text Color ) ;", "canvas . draw Text ( m Day Formatter . format ( day ) , col Center Rtl , row Center - half Line Height , p ) ;", "col ++ ;", "if ( col == DAYS IN WEEK ) {", "col = NUM_ ;", "row Center += row Height ; } } }"]}
{"ids": "69188", "code": ["public void comment ( char ch [ ] , int start , int length ) throws org . xml . sax . SAX Exception {", "if ( ch == null || start < NUM_ || length >= ( ch . length - start ) || length < NUM_ ) return ;", "append ( m doc . create Comment ( new String ( ch , start , length ) ) ) ; }"]}
{"ids": "7347", "code": ["public boolean is Empty ( ) {", "return array List . is Empty ( ) ; }"]}
{"ids": "27289", "code": ["public Arbitrary Length Path Node ( final Term Node left , final Term Node right , final Var Node t Var Left , final Var Node t Var Right , final Path Mod mod ) {", "this ( new B Op [ ] { new Join Group Node ( ) } , NV . as Map ( new NV ( Annotations . LEFT TERM , left ) , new NV ( Annotations . RIGHT TERM , right ) , new NV ( Annotations . TRANSITIVITY VAR LEFT , t Var Left ) , new NV ( Annotations . TRANSITIVITY VAR RIGHT , t Var Right ) , new NV ( Annotations . LOWER BOUND , mod == Path Mod . ONE OR MORE ? NUM_ : NUM_ ) , new NV ( Annotations . UPPER BOUND , mod == Path Mod . ZERO OR ONE ? NUM_ : Long . MAX VALUE ) ) ) ;", "final Set < Var Node > drop Vars = new Linked Hash Set < > ( ) ;", "drop Vars . add ( t Var Left ) ;", "drop Vars . add ( t Var Right ) ;", "set Property ( Annotations . DROP VARS , drop Vars ) ; }"]}
{"ids": "78137", "code": ["static void check Flags ( int flags ) {", "int allowed Flags = READ ONLY FLAG MASK | EMPTY FLAG MASK | COMPACT FLAG MASK | ORDERED FLAG MASK ;", "int flags Mask = ~ allowed Flags ;", "if ( ( flags & flags Mask ) > NUM_ ) {", "throw new Sketches Argument Exception ( STR_ + Integer . to Binary String ( flags ) ) ; } }"]}
{"ids": "38167", "code": ["public static Array List < Object > delete Item Sets ( Array List < Object > item Sets , int min Support , int max Support ) {", "Array List < Object > new Vector = new Array List < Object > ( item Sets . size ( ) ) ;", "for ( int i = NUM_ ; i < item Sets . size ( ) ; i ++ ) {", "Labeled Item Set current = ( Labeled Item Set ) item Sets . get ( i ) ;", "if ( ( current . m rule Sup Counter >= min Support ) && ( current . m rule Sup Counter <= max Support ) ) {", "new Vector . add ( current ) ; } }", "return new Vector ; }"]}
{"ids": "69634", "code": ["private static synchronized String make Date String ( Date date ) {", "return sdf Default . format ( date ) ; }"]}
{"ids": "21694", "code": ["public static String generate Native Guid ( Db Client db Client , File Share file Share ) throws IO Exception {", "Storage System device = db Client . query Object ( Storage System . class , file Share . get Storage Device ( ) ) ;", "return String . format ( STR_ + FILESYSTEM + STR_ , device Type Map . get ( device . get System Type ( ) ) , device . get Serial Number ( ) , file Share . get Native Id ( ) ) ; }"]}
{"ids": "70106", "code": ["private static double distance ( Point p 1 , Point p 2 ) {", "double x = p 1 . x - p 2 . x ;", "double y = p 1 . y - p 2 . y ;", "return Math . sqrt ( x * x + y * y ) ; }"]}
{"ids": "16672", "code": ["public void add Hyperedge In Node ( Hyper Edge hyper Edge ) {", "if ( hyper Edge != null ) {", "if ( null == hyperedges ) hyperedges = new Array List < > ( ) ;", "hyperedges . add ( hyper Edge ) ;", "semiring Plus ( hyper Edge ) ; } }"]}
{"ids": "43070", "code": ["public Rotated Problems ( ) {", "super ( ) ; }"]}
{"ids": "43204", "code": ["public Docker Port Mapping with Host Port ( int host Port ) {", "Docker Port Mapping new Mapping = new Docker Port Mapping ( ) ;", "new Mapping . protocol = protocol ;", "new Mapping . container Port = container Port ;", "new Mapping . host Ip = host Ip ;", "new Mapping . host Port = String . value Of ( host Port ) ;", "return new Mapping ; }"]}
{"ids": "29192", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return ID 1 ;", "case NUM_ :", "return ID 2 ;", "default :", "return null ; } }"]}
{"ids": "61949", "code": ["@ Override public int length ( ) {", "return str . length ( ) ; }"]}
{"ids": "86407", "code": ["public void clear All Haptics ( ) {", "m Haptics . clear ( ) ; }"]}
{"ids": "1712", "code": ["public void encode ( final Active MQ Buffer buffer ) {", "buffer . write String ( name ) ;", "buffer . write String ( factory Class Name ) ;", "buffer . write Int ( params == null ? NUM_ : params . size ( ) ) ;", "if ( params != null ) {", "encode Map ( buffer , params ) ; }", "if ( extra Props != null ) {", "encode Map ( buffer , extra Props ) ; } }"]}
{"ids": "16464", "code": ["@ Override public void write ( byte [ ] b , int off , int len ) throws IO Exception {", "flush Bits ( ) ;", "out . write ( b , off , len ) ; }"]}
{"ids": "698", "code": ["public static double log 2 ( double x ) {", "return Math . log ( x ) / LOG 2 ; }"]}
{"ids": "36021", "code": ["boolean is Name Used ( String name ) {", "List < Integer > columns With Name = column Names . get ( name ) ;", "return columns With Name != null && ! columns With Name . is Empty ( ) ; }"]}
{"ids": "5136", "code": ["public State Interactive complete ( ) {", "if ( return state != this && actlog != null ) {", "actlog . start scope ( Logfile Scope . COMPLETE SCOPE ) ; }", "return return state ; }"]}
{"ids": "2148", "code": ["private Work Queue find Non Empty Steal Queue ( ) {", "Work Queue [ ] ws ;", "int wl ;", "int r = TL Random . next Secondary Seed ( ) ;", "if ( ( ws = work Queues ) != null && ( wl = ws . length ) > NUM_ ) {", "int m = wl - NUM_ , origin = r & m ;", "for ( int k = origin , old Sum = NUM_ , check Sum = NUM_ ; ; ) {", "Work Queue q ;", "int b ;", "if ( ( q = ws [ k ] ) != null ) {", "if ( ( b = q . base ) - q . top < NUM_ ) return q ;", "check Sum += b ; }", "if ( ( k = ( k + NUM_ ) & m ) == origin ) {", "if ( old Sum == ( old Sum = check Sum ) ) break ;", "check Sum = NUM_ ; } } }", "return null ; }"]}
{"ids": "52126", "code": ["private void do Ddp Orientation ( Node d , Node a , Node b , Node c , Graph graph ) {", "List < Node > sepset = get Sepset ( d , c ) ;", "if ( sepset == null ) {", "return ; }", "if ( sepset . contains ( b ) ) {", "graph . set Endpoint ( c , b , Endpoint . TAIL ) ;", "if ( verbose ) {", "logger . log ( STR_ , Search Log Utils . edge Oriented Msg ( STR_ + d , graph . get Edge ( b , c ) ) ) ;", "out . println ( Search Log Utils . edge Oriented Msg ( STR_ + d , graph . get Edge ( b , c ) ) ) ; }", "change Flag = true ; }", "else {", "if ( ! is Arrowpoint Allowed ( a , b , graph ) ) {", "return ; }", "if ( ! is Arrowpoint Allowed ( c , b , graph ) ) {", "return ; }", "graph . set Endpoint ( a , b , Endpoint . ARROW ) ;", "graph . set Endpoint ( c , b , Endpoint . ARROW ) ;", "logger . log ( STR_ , Search Log Utils . collider Oriented Msg ( STR_ + d , a , b , c ) ) ;", "change Flag = true ; } }"]}
{"ids": "13887", "code": ["public void handle Tbl Bootstrap Res Off Href Action Request ( Request Invocation Event event ) throws Model Control Exception {", "try {", "Map values = get Values ( ) ;", "on Before Save Profile ( values ) ;", "set Page Session Attribute ( PROPERTY ATTRIBUTE , ( Hash Map ) values ) ;", "SM Discovery Bootstrap Ref Off Edit View Bean vb = ( SM Discovery Bootstrap Ref Off Edit View Bean ) get View Bean ( SM Discovery Bootstrap Ref Off Edit View Bean . class ) ;", "unlock Page Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . populate Values ( ( String ) get Display Field Value ( TBL BOOTSTRAP RES OFF HREF ACTION ) ) ;", "vb . forward To ( get Request Context ( ) ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ; } }"]}
{"ids": "56063", "code": ["@ Visible For Testing String post Request ( long timestamp , String xml ) throws Request Failure Exception {", "String response = null ;", "Http URL Connection url Connection = null ;", "try {", "url Connection = create Connection ( ) ;", "set Up Post Request ( timestamp , url Connection , xml ) ;", "send Request To Server ( url Connection , xml ) ;", "response = read Response From Server ( url Connection ) ; }", "finally {", "if ( url Connection != null ) {", "url Connection . disconnect ( ) ; } }", "return response ; }"]}
{"ids": "21062", "code": ["private void generate Key ( ) throws Exception {", "Key Generator keygen = Key Generator . get Instance ( ALGO ) ;", "Secret Key key = keygen . generate Key ( ) ;", "persist Key ( key ) ; }"]}
{"ids": "11062", "code": ["public Http Request Event fire Http Request Event ( String request , Output Stream output ) throws IO Exception {", "Http Request Event event = new Http Request Event ( this , request , output ) ;", "Http Request Listener listener ;", "Vector list = ( Vector ) listeners . clone ( ) ;", "Enumeration e = list . elements ( ) ;", "while ( e . has More Elements ( ) ) {", "listener = ( Http Request Listener ) e . next Element ( ) ;", "listener . http Request ( event ) ; }", "return event ; }"]}
{"ids": "70219", "code": ["private void parse Record ( Element unit Node ) {", "Node List nl = unit Node . get Child Nodes ( ) ;", "for ( int i = NUM_ ; i < nl . get Length ( ) ; i ++ ) {", "Node curr Node = nl . item ( i ) ;", "if ( curr Node . get Parent Node ( ) != unit Node ) {", "continue ; }", "int node Type = curr Node . get Node Type ( ) ;", "if ( node Type == Node . ELEMENT NODE ) {", "String node Name = curr Node . get Node Name ( ) ;", "if ( node Name . equals Ignore Case ( UNIT ) ) {", "parse Unit ( ( Element ) curr Node , entities ) ; }", "else if ( node Name . equals Ignore Case ( SURVIVORS ) ) {", "parse Unit ( ( Element ) curr Node , survivors ) ; }", "else if ( node Name . equals Ignore Case ( ALLIES ) ) {", "parse Unit ( ( Element ) curr Node , allies ) ; }", "else if ( node Name . equals Ignore Case ( SALVAGE ) ) {", "parse Unit ( ( Element ) curr Node , salvage ) ; }", "else if ( node Name . equals Ignore Case ( DEVASTATED ) ) {", "parse Unit ( ( Element ) curr Node , devastated ) ; }", "else if ( node Name . equals Ignore Case ( KILLS ) ) {", "parse Kills ( ( Element ) curr Node ) ; }", "else if ( node Name . equals Ignore Case ( ENTITY ) ) {", "parse Unit ( ( Element ) curr Node , entities ) ; }", "else if ( node Name . equals Ignore Case ( PILOT ) ) {", "parse Pilot ( ( Element ) curr Node ) ; } }", "else {", "continue ; } } }"]}
{"ids": "48559", "code": ["public void cancel ( ) {", "synchronized ( lock ) {", "if ( this . latency == NO TARGET ) {", "throw new Illegal State Exception ( STR_ + STR_ ) ; }", "if ( ! requests . remove ( this ) ) {", "throw new Internal Error ( STR_ + this + STR_ ) ; }", "if ( requests . is Empty ( ) ) requests = null ;", "this . latency = NO TARGET ;", "adjust Latency If Needed ( ) ; } }"]}
{"ids": "59483", "code": ["void start Event Tracker ( ) {", "List < Event Tracking Service > services = get Enabled Services For Type ( Event Tracking Service . class ) ;", "if ( services != null && ! services . is Empty ( ) ) {", "if ( event Tracker == null ) {", "event Tracker = new Event Tracker ( context , services , foam Api Keys . wifi Only ( ) ) ; }", "if ( ! event Tracker . is Running ( ) ) {", "event Tracker . start ( ) ; } } }"]}
{"ids": "48446", "code": ["@ Override public int preceding ( int offset ) {", "Character Iterator text = get Text ( ) ;", "check Offset ( offset , text ) ;", "if ( cached Break Positions == null || offset <= cached Break Positions [ NUM_ ] || offset > cached Break Positions [ cached Break Positions . length - NUM_ ] ) {", "cached Break Positions = null ;", "return super . preceding ( offset ) ; }", "else {", "position In Cache = NUM_ ;", "while ( position In Cache < cached Break Positions . length && offset > cached Break Positions [ position In Cache ] ) {", "++ position In Cache ; }", "-- position In Cache ;", "text . set Index ( cached Break Positions [ position In Cache ] ) ;", "return text . get Index ( ) ; } }"]}
{"ids": "41156", "code": ["protected static boolean signed Fits In Nibble ( int value ) {", "return ( value >= - NUM_ ) && ( value <= NUM_ ) ; }"]}
{"ids": "49307", "code": ["@ Override public void mouse Pressed ( Mouse Event e ) {", "events . clear ( ) ;", "if ( map Drag Operation From Modifiers ( e ) != Dn D Constants . ACTION NONE ) {", "try {", "motion Threshold = Drag Source . get Drag Threshold ( ) ; }", "catch ( Exception exc ) {", "motion Threshold = NUM_ ; }", "append Event ( e ) ; } }"]}
{"ids": "67732", "code": ["public void simple Element ( String name , String value ) throws IO Exception {", "simple Element ( null , name , null , value ) ; }"]}
{"ids": "17923", "code": ["public static boolean is Valid I Pv 4 ( String address ) {", "if ( address . length ( ) == NUM_ ) {", "return false ; }", "int octet ;", "int octets = NUM_ ;", "String temp = address + STR_ ;", "int pos ;", "int start = NUM_ ;", "while ( start < temp . length ( ) && ( pos = temp . index Of ( STR_ , start ) ) > start ) {", "if ( octets == NUM_ ) {", "return false ; }", "try {", "octet = Integer . parse Int ( temp . substring ( start , pos ) ) ; }", "catch ( Number Format Exception ex ) {", "return false ; }", "if ( octet < NUM_ || octet > NUM_ ) {", "return false ; }", "start = pos + NUM_ ;", "octets ++ ; }", "return octets == NUM_ ; }"]}
{"ids": "25779", "code": ["private void validate Dimension CSV ( Schema Info schema Info , String fact Table Name , String dim Table Name , Carbon File dim File , String partition Id , Carbon Data Load Schema schema , String delimiter ) throws Data Loading Exception {", "String [ ] column Names = get Dim Column Names ( schema Info , fact Table Name , dim Table Name , partition Id , schema ) ;", "if ( null == column Names || column Names . length < NUM_ ) {", "return ; }", "if ( ! check All Columns Present ( column Names , dim File . get Absolute Path ( ) , delimiter ) ) {", "LOGGER . error ( STR_ + STR_ + dim File . get Name ( ) ) ;", "throw new Data Loading Exception ( Data Processor Constants . CSV VALIDATION ERRROR CODE , STR_ + STR_ + dim File . get Name ( ) ) ; } }"]}
{"ids": "73446", "code": ["private Data Point is Unique ( Node from , Data Point point , double tolerance ) {", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ + tolerance + STR_ + point ) ;", "while ( from . type == Type . branch ) {", "Branch branch = ( Branch ) from ;", "double d = point . get ( branch . split Dimension ) ;", "if ( Math . abs ( d - branch . mid Point ) < tolerance ) {", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ + branch + STR_ ) ;", "Data Point left Check = is Unique ( branch . left , point , tolerance ) ;", "Data Point right Check = is Unique ( branch . right , point , tolerance ) ;", "if ( ( left Check == null ) && ( right Check == null ) ) {", "return null ; }", "else {", "if ( left Check != null ) {", "return left Check ; }", "else {", "return right Check ; } } }", "else if ( point . get Vector ( ) [ branch . split Dimension ] < branch . mid Point ) {", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ + branch + STR_ ) ;", "from = branch . left ; }", "else {", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ + branch + STR_ ) ;", "from = branch . right ; } }", "Leaf leaf = ( Leaf ) from ;", "for ( Data Point p : leaf . points ) {", "for ( int i = NUM_ ; i < p . get Dimension ( ) ; i ++ ) {", "if ( Math . abs ( p . get ( i ) - point . get ( i ) ) >= tolerance ) {", "break ; } }", "if ( get Distance ( p , point ) < tolerance ) {", "return p ; } }", "return null ; }"]}
{"ids": "63655", "code": ["public boolean remove Tuple ( Tuple t ) {", "Table table = t . get Table ( ) ;", "if ( m sets . contains ( table ) ) {", "return table . remove Tuple ( t ) ; }", "else {", "return false ; } }"]}
{"ids": "16988", "code": ["private boolean is Dark Theme Set ( ) {", "Shared Preferences shared Preferences = Preference Manager . get Default Shared Preferences ( get Activity ( ) ) ;", "String key = get String ( R . string . theme preference key ) ;", "String default Value = get String ( R . string . theme preference default value ) ;", "return Integer . value Of ( shared Preferences . get String ( key , default Value ) ) != NUM_ ; }"]}
{"ids": "65286", "code": ["@ Deprecated public void add Prefix NS Mapping ( String prefix , String ns URI ) {", "if ( ns URI . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( prefix . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( prefix . equals ( NO NS PREFIX ) ) {", "throw new Illegal Argument Exception ( STR_ + prefix + STR_ ) ; }", "if ( prefix To Namespace URI Lookup . contains Key ( prefix ) ) {", "throw new Illegal Argument Exception ( STR_ + prefix + STR_ ) ; }", "if ( namespace URI To Prefix Lookup . contains Key ( ns URI ) ) {", "throw new Illegal Argument Exception ( STR_ + ns URI + STR_ ) ; }", "if ( prefix . equals ( DEFAULT NAMESPACE PREFIX ) ) {", "this . default NS = ns URI ; }", "else {", "prefix To Namespace URI Lookup . put ( prefix , ns URI ) ;", "namespace URI To Prefix Lookup . put ( ns URI , prefix ) ; } }"]}
{"ids": "23994", "code": ["protected Message create Response Message ( ) {", "return new Message ( NUM_ , Version . CURRENT ) ; }"]}
{"ids": "12458", "code": ["public static void o ( double a ) {", "o ( a , Parameters . Output Field Width , Parameters . Output Frac Places ) ; }"]}
{"ids": "5204", "code": ["public void write Field ( String name , String value ) throws IO Exception {", "if ( name == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "out . write Bytes ( PREFIX ) ;", "out . write Bytes ( boundary ) ;", "out . write Bytes ( NEWLINE ) ;", "out . write Bytes ( STR_ + name + STR_ ) ;", "out . write Bytes ( NEWLINE ) ;", "out . write Bytes ( NEWLINE ) ;", "if ( value != null ) {", "out . write Bytes ( value ) ; }", "out . write Bytes ( NEWLINE ) ;", "out . flush ( ) ; }"]}
{"ids": "26890", "code": ["public int drain To ( Collection < ? super E > c ) {", "int result = buffer . drain To ( c ) ;", "if ( producer != null ) {", "producer . wake Up ( ) ; }", "return result ; }"]}
{"ids": "53453", "code": ["protected void grow ( ) {", "if ( dists == EMPTY DISTS ) {", "dists = new double [ INITIAL SIZE ] ;", "ids = new int [ INITIAL SIZE ] ;", "return ; }", "final int len = dists . length ;", "final int newlength = len + ( len > > NUM_ ) ;", "double [ ] odists = dists ;", "dists = new double [ newlength ] ;", "System . arraycopy ( odists , NUM_ , dists , NUM_ , odists . length ) ;", "int [ ] oids = ids ;", "ids = new int [ newlength ] ;", "System . arraycopy ( oids , NUM_ , ids , NUM_ , oids . length ) ; }"]}
{"ids": "32148", "code": ["Igfs Input Stream Impl ( Igfs Context igfs Ctx , Igfs Path path , @ Nullable Igfs Entry Info file Info , int prefetch Blocks , int seq Reads Before Prefetch , @ Nullable Igfs Secondary File System Positioned Readable sec Reader , long len , int block Size , long blocks Cnt , boolean proxy ) {", "assert igfs Ctx != null ;", "assert path != null ;", "this . igfs Ctx = igfs Ctx ;", "this . path = path ;", "this . file Info = file Info ;", "this . prefetch Blocks = prefetch Blocks ;", "this . seq Reads Before Prefetch = seq Reads Before Prefetch ;", "this . sec Reader = sec Reader ;", "this . len = len ;", "this . block Size = block Size ;", "this . blocks Cnt = blocks Cnt ;", "this . proxy = proxy ;", "log = igfs Ctx . kernal Context ( ) . log ( Igfs Input Stream . class ) ;", "max Loc Cache Size = ( prefetch Blocks > NUM_ ? prefetch Blocks : NUM_ ) * NUM_ / NUM_ ;", "loc Cache = new Linked Hash Map < > ( max Loc Cache Size , NUM_ ) ;", "pending Futs = new Grid Concurrent Hash Set < > ( prefetch Blocks > NUM_ ? prefetch Blocks : NUM_ ) ;", "igfs Ctx . metrics ( ) . increment Files Opened For Read ( ) ; }"]}
{"ids": "27612", "code": ["public Abstract Scale Out Client Index View ( final Abstract Scale Out Federation fed , final String name , final long timestamp , final I Metadata Index metadata Index ) {", "if ( fed == null ) throw new Illegal Argument Exception ( ) ;", "if ( name == null ) throw new Illegal Argument Exception ( ) ;", "if ( metadata Index == null ) throw new Illegal Argument Exception ( ) ;", "this . fed = fed ;", "this . name = name ;", "this . timestamp = timestamp ;", "this . metadata Index = metadata Index ;", "this . metadata Index Metadata = metadata Index . get Index Metadata ( ) ;", "final Abstract Client < ? > client = fed . get Client ( ) ;", "this . capacity = client . get Default Range Query Capacity ( ) ;", "this . batch Only = client . get Batch Api Only ( ) ;", "this . task Timeout = client . get Task Timeout ( ) ;", "this . read Consistent = client . is Read Consistent ( ) ; }"]}
{"ids": "21105", "code": ["public boolean can Send Event ( ) {", "try {", "validate Send Event ( ) ;", "return true ; }", "catch ( Exception e ) {", "return false ; } }"]}
{"ids": "6694", "code": ["public static final String capitalize ( String str , char ... delimiters ) {", "final int delim Len = delimiters == null ? - NUM_ : delimiters . length ;", "if ( Text Utils . is Empty ( str ) || delim Len == NUM_ ) {", "return str ; }", "final char [ ] buffer = str . to Char Array ( ) ;", "boolean capitalize Next = true ;", "for ( int i = NUM_ ; i < buffer . length ; i ++ ) {", "char ch = buffer [ i ] ;", "if ( is Delimiter ( ch , delimiters ) ) {", "capitalize Next = true ; }", "else if ( capitalize Next ) {", "buffer [ i ] = Character . to Title Case ( ch ) ;", "capitalize Next = false ; } }", "return new String ( buffer ) ; }"]}
{"ids": "45235", "code": ["public void write ( Output Stream out ) throws Socks Exception , IO Exception {", "if ( data == null ) {", "Socks 5 Message msg ;", "if ( addr Type == SOCKS ATYP DOMAINNAME ) msg = new Socks 5 Message ( command , host , port ) ;", "else {", "if ( ip == null ) {", "try {", "ip = Inet Address . get By Name ( host ) ; }", "catch ( Unknown Host Exception uh ex ) {", "throw new Socks Exception ( Socks Constants . SOCKS JUST ERROR ) ; } }", "msg = new Socks 5 Message ( command , ip , port ) ; }", "data = msg . data ; }", "out . write ( data ) ; }"]}
{"ids": "57944", "code": ["Template Sub Pattern Association ( Elem Template template , Step Pattern pattern , String pat ) {", "m pattern = pat ;", "m template = template ;", "m step Pattern = pattern ;", "m target String = m step Pattern . get Target String ( ) ;", "m wild = m target String . equals ( STR_ ) ; }"]}
{"ids": "77755", "code": ["public static byte [ ] compress For Zlib ( byte [ ] bytes To Compress ) {", "Deflater deflater = new Deflater ( ) ;", "deflater . set Input ( bytes To Compress ) ;", "deflater . finish ( ) ;", "byte [ ] bytes Compressed = new byte [ Short . MAX VALUE ] ;", "int number Of Bytes After Compression = deflater . deflate ( bytes Compressed ) ;", "byte [ ] return Values = new byte [ number Of Bytes After Compression ] ;", "System . arraycopy ( bytes Compressed , NUM_ , return Values , NUM_ , number Of Bytes After Compression ) ;", "return return Values ; }"]}
{"ids": "35632", "code": ["private static Byte Buffer generate Wav Data ( int sample Count , int freq Hz ) {", "final int num Data Bytes = sample Count * NUM CHANNELS * BITS PER SAMPLE / NUM_ ;", "final double freq = freq Hz ;", "Byte Buffer buf = Byte Buffer . allocate ( num Data Bytes ) ;", "buf . order ( Byte Order . LITTLE ENDIAN ) ;", "if ( BITS PER SAMPLE == NUM_ ) {", "final double peak = NUM_ ;", "for ( int i = NUM_ ; i < sample Count ; i ++ ) {", "double time Sec = i / ( double ) SAMPLE RATE ;", "double sin Value = Math . sin ( NUM_ * Math . PI * freq * time Sec ) ;", "if ( Game Surface Renderer . EXTRA CHECK ) {", "int output = ( int ) ( peak * sin Value + NUM_ ) ;", "if ( output < NUM_ || output >= NUM_ ) {", "throw new Runtime Exception ( STR_ ) ; } }", "buf . put ( ( byte ) ( peak * sin Value + NUM_ ) ) ; } }", "else if ( BITS PER SAMPLE == NUM_ ) {", "final double peak = NUM_ ;", "Short Buffer sbuf = buf . as Short Buffer ( ) ;", "for ( int i = NUM_ ; i < sample Count ; i ++ ) {", "double time Sec = i / ( double ) SAMPLE RATE ;", "double sin Value = Math . sin ( NUM_ * Math . PI * freq * time Sec ) ;", "sbuf . put ( ( short ) ( peak * sin Value ) ) ; } }", "buf . position ( NUM_ ) ;", "return buf ; }"]}
{"ids": "55100", "code": ["protected static String h 2 c ( String hyphenated , boolean studly ) {", "String Builder b = new String Builder ( hyphenated . length ( ) ) ;", "boolean cap Next = studly ;", "for ( int i = NUM_ ; i < hyphenated . length ( ) ; ++ i ) {", "char c = hyphenated . char At ( i ) ;", "if ( c == STR_ ) cap Next = true ;", "else {", "b . append ( cap Next ? Character . to Upper Case ( c ) : c ) ;", "cap Next = false ; } }", "return b . to String ( ) ; }"]}
{"ids": "30622", "code": ["public synchronized void on Write Event ( ) throws IO Exception {", "LRMI Invocation Trace trace = null ;", "try {", "while ( ! contexts . is Empty ( ) ) {", "Context current = contexts . peek ( ) ;", "trace = current . get Trace ( ) ;", "if ( trace != null ) LRMI Invocation Context . update Context ( trace , null , null , null , null , false , null , null ) ;", "none Blocking Write ( current ) ;", "if ( current . get Phase ( ) != Context . Phase . FINISH ) {", "set Write Interest ( ) ;", "break ; }", "else {", "trace Context Total Write Time ( current ) ;", "contexts . poll ( ) ;", "pending Writes . decrement ( ) ; } }", "if ( contexts . is Empty ( ) ) {", "remove Write Interest ( true ) ; } }", "finally {", "if ( trace != null ) LRMI Invocation Context . reset Context ( ) ; } }"]}
{"ids": "86719", "code": ["public static void add ( Object spy ) {", "SPIES . add ( spy ) ; }"]}
{"ids": "15865", "code": ["void init Leaf Calc ( byte [ ] seed 0 ) {", "this . i = NUM_ ;", "this . j = NUM_ ;", "byte [ ] dummy = new byte [ mdsize ] ;", "System . arraycopy ( seed 0 , NUM_ , dummy , NUM_ , seed . length ) ;", "this . seed = gmss Random . next Seed ( dummy ) ; }"]}
{"ids": "11934", "code": ["@ Override public boolean download File ( String path , String dest ) {", "try {", "File Output Stream fos = new File Output Stream ( new File ( dest ) ) ;", "m DB Api . get File ( path , null , fos , null ) ;", "fos . close ( ) ;", "return true ; }", "catch ( Dropbox Exception e ) {", "e . print Stack Trace ( ) ;", "return false ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ;", "return false ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "return false ; } }"]}
{"ids": "61221", "code": ["boolean does Occur ( Q Name ref Name ) {", "return m refs . contains ( ref Name ) ; }"]}
{"ids": "62732", "code": ["public long loop ( ) {", "final long current Timestamp = System . current Time Millis ( ) ;", "final long time Diff = current Timestamp - last Run Timestamp ;", "final int shutdown Diff = ( int ) ( System . current Time Millis ( ) - game Shutdown Request Timestamp ) ;", "final float shutdown Progress = shutdown Diff >= FLYING SUPERMAN DELAY && game State . equals ( Game State . SHUTDOWN REQUESTED ) ? ( shutdown Diff - FLYING SUPERMAN DELAY ) / ( float ) ( GAME SHUTDOWN DELAY - FLYING SUPERMAN DELAY ) : NUM_ ;", "snowflakes Collection . on Time Passed ( time Diff ) ;", "presents Collection . on Time Passed ( time Diff ) ;", "if ( game State . equals ( Game State . SHUTDOWN REQUESTED ) ) {", "player . sety Pos ( get Default Player Height ( ) * ( NUM_ - shutdown Progress ) - ( player . get Height ( ) * shutdown Progress ) ) ;", "superman Clouds . sety Pos ( superman Clouds . get Height ( ) * ( NUM_ - shutdown Progress ) - ( ( superman Clouds . get Height ( ) - field Height ) * shutdown Progress ) ) ;", "if ( shutdown Progress >= NUM_ ) {", "game State = Game State . STOPPED ; } }", "else {", "if ( player . is In State ( Player State . CHEWING ) && player . get Chewing Duration ( ) >= PLAYER CHEWING DURATION IN MS ) {", "player . set State ( Player State . DEFAULT ) ; }", "if ( player . is In State ( Player State . HIT ) && player . get Hit Duration ( ) >= PLAYER HIT DURATION IN MS ) {", "player . set State ( Player State . DEFAULT ) ; }", "if ( new Player Location != null ) {", "player . setx Pos ( new Player Location . x ) ;", "player . sety Pos ( new Player Location . y ) ;", "new Player Location = null ; } }", "boolean player Below Object = update Falling Objects ( time Diff , shutdown Progress , snowflakes Collection , true , false ) | update Falling Objects ( time Diff , shutdown Progress , presents Collection , false , true ) ;", "if ( player . is In State ( Player State . DEFAULT ) || player . is In State ( Player State . LOOKING UP ) ) {", "if ( player Below Object ) {", "player . set State ( Player State . LOOKING UP ) ; }", "else {", "player . set State ( Player State . DEFAULT ) ; } }", "last Run Timestamp = current Timestamp ;", "return time Diff ; }"]}
{"ids": "26444", "code": ["public static Date Format to Date Format ( String date Format , Time Zone tz , Locale locale ) {", "Date Format df = null ;", "if ( Util Validate . is Empty ( date Format ) ) {", "df = Date Format . get Date Instance ( Date Format . SHORT , locale ) ; }", "else {", "df = new Simple Date Format ( date Format , locale == null ? Locale . get Default ( ) : locale ) ; }", "df . set Time Zone ( tz ) ;", "return df ; }"]}
{"ids": "10704", "code": ["public Integer load Id Name Values ( Db Output Statement statement , Integer idx ) throws Exception {", "int index = idx . int Value ( ) ;", "if ( logger . is Debug Enabled ( ) ) logger . debug ( STR_ ) ;", "id = statement . get Long Integer ( index ++ ) ;", "name = statement . get Short Text ( index ++ ) ;", "return new Integer ( index ) ; }"]}
{"ids": "68797", "code": ["private byte [ ] pad Password ( byte [ ] password ) {", "if ( password == null ) {", "password = new byte [ NUM_ ] ; }", "byte [ ] padded = new byte [ NUM_ ] ;", "final int num Contributing Password Bytes = password . length > padded . length ? padded . length : password . length ;", "System . arraycopy ( password , NUM_ , padded , NUM_ , num Contributing Password Bytes ) ;", "if ( password . length < padded . length ) {", "System . arraycopy ( PW PADDING , NUM_ , padded , password . length , padded . length - password . length ) ; }", "return padded ; }"]}
{"ids": "52780", "code": ["private double max Dist Level ( DBID id , int level ) {", "final Number Vector obj = relation . get ( id ) ;", "final double r = NUM_ / ( NUM_ << ( level - NUM_ ) ) ;", "double dist ;", "if ( t == NUM_ ) {", "dist = NUM_ ;", "for ( int dim = NUM_ ; dim < d ; dim ++ ) {", "final double p m r = get Dim For Object ( obj , dim ) % r ;", "dist += Math . max ( p m r , r - p m r ) ; } }", "else if ( t == NUM_ ) {", "dist = NUM_ ;", "for ( int dim = NUM_ ; dim < d ; dim ++ ) {", "final double p m r = get Dim For Object ( obj , dim ) % r ;", "double a = Math . max ( p m r , r - p m r ) ;", "dist += a * a ; }", "dist = Math . sqrt ( dist ) ; }", "else if ( ! Double . is Infinite ( t ) ) {", "dist = NUM_ ;", "for ( int dim = NUM_ ; dim < d ; dim ++ ) {", "final double p m r = get Dim For Object ( obj , dim ) % r ;", "dist += Math . pow ( Math . max ( p m r , r - p m r ) , t ) ; }", "dist = Math . pow ( dist , NUM_ / t ) ; }", "else {", "dist = Double . NEGATIVE INFINITY ;", "for ( int dim = NUM_ ; dim < d ; dim ++ ) {", "final double p m r = get Dim For Object ( obj , dim ) % r ;", "dist = Math . max ( dist , Math . max ( p m r , r - p m r ) ) ; } }", "return dist * diameter ; }"]}
{"ids": "55848", "code": ["public final int move Made ( long now , boolean use Increment ) {", "stop Timer ( now ) ;", "Array List < Time Control Field > tc = tc Data . get TC ( white To Move ) ;", "Pair < Integer , Integer > tc Info = get Current TC ( white To Move ) ;", "int tc Idx = tc Info . first ;", "int moves To Tc = tc Info . second ;", "int remaining = get Remaining Time ( white To Move , now ) ;", "if ( use Increment ) {", "remaining += tc . get ( tc Idx ) . increment ;", "if ( moves To Tc == NUM_ ) {", "if ( tc Idx + NUM_ < tc . size ( ) ) tc Idx ++ ;", "remaining += tc . get ( tc Idx ) . time Control ; } }", "elapsed = NUM_ ;", "return remaining ; }"]}
{"ids": "33826", "code": ["public static Properties prefix Properties ( Properties props , String prefix ) {", "Properties prefix Props = new Properties ( ) ;", "for ( String key : props . string Property Names ( ) ) {", "if ( key . starts With ( prefix ) ) {", "String key Without Prefix = key . substring ( prefix . length ( ) ) ;", "prefix Props . set Property ( key Without Prefix , props . get Property ( key ) ) ; } }", "return prefix Props ; }"]}
{"ids": "40110", "code": ["public synchronized void start ( ) {", "if ( is Started ) {", "return ; }", "if ( is Stopped ) {", "throw new Illegal State Exception ( STR_ ) ; }", "logger . info ( STR_ + Tor . get Full Version ( ) + STR_ ) ;", "verify Unlimited Strength Policy Installed ( ) ;", "directory Downloader . start ( directory ) ;", "circuit Manager . start Building Circuits ( ) ;", "if ( dashboard . is Enabled By Property ( ) ) {", "dashboard . start Listening ( ) ; }", "is Started = true ; }"]}
{"ids": "57845", "code": ["public static Cipher Parameters make PBE Parameters ( PBE Key Spec key Spec , int type , int hash , int key Size , int iv Size ) {", "PBE Parameters Generator generator = make PBE Generator ( type , hash ) ;", "byte [ ] key ;", "Cipher Parameters param ;", "key = convert Password ( type , key Spec ) ;", "generator . init ( key , key Spec . get Salt ( ) , key Spec . get Iteration Count ( ) ) ;", "if ( iv Size != NUM_ ) {", "param = generator . generate Derived Parameters ( key Size , iv Size ) ; }", "else {", "param = generator . generate Derived Parameters ( key Size ) ; }", "for ( int i = NUM_ ; i != key . length ; i ++ ) {", "key [ i ] = NUM_ ; }", "return param ; }"]}
{"ids": "39279", "code": ["@ Override public double value ( int att Index ) {", "int index = locate Index ( att Index ) ;", "if ( ( index >= NUM_ ) && ( m Indices [ index ] == att Index ) ) {", "return NUM_ ; }", "else {", "return NUM_ ; } }"]}
{"ids": "79747", "code": ["private void fetch Filter Seeds ( ) {", "if ( seed List == null || seed List . is Empty ( ) ) {", "return ; }", "for ( Iterator < URI > it = seed List . iterator ( ) ; it . has Next ( ) ; ) {", "URI seed = it . next ( ) ;", "for ( Fetch Filter filter : controller . get Fetch Filters ( ) ) {", "Fetch Status filter Reason = filter . check Filter ( seed ) ;", "if ( filter Reason != Fetch Status . VALID ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + seed + STR_ + filter Reason ) ; }", "it . remove ( ) ;", "break ; } } } }"]}
{"ids": "7684", "code": ["public XY Area Renderer 2 ( XY Tool Tip Generator label Generator , XYURL Generator url Generator ) {", "super ( ) ;", "this . show Outline = false ;", "set Base Tool Tip Generator ( label Generator ) ;", "set URL Generator ( url Generator ) ;", "General Path area = new General Path ( ) ;", "area . move To ( NUM_ , - NUM_ ) ;", "area . line To ( NUM_ , - NUM_ ) ;", "area . line To ( NUM_ , NUM_ ) ;", "area . line To ( - NUM_ , NUM_ ) ;", "area . line To ( - NUM_ , - NUM_ ) ;", "area . close Path ( ) ;", "this . legend Area = area ; }"]}
{"ids": "25602", "code": ["public static boolean is Primitive Or Wrapper ( Class < ? > clazz ) {", "Assert . not Null ( clazz , STR_ ) ;", "return ( clazz . is Primitive ( ) || is Primitive Wrapper ( clazz ) ) ; }"]}
{"ids": "39687", "code": ["private void assert File Contains ( List < String > expected , String filename ) throws Exception {", "try ( Buffered Reader reader = new Buffered Reader ( new File Reader ( filename ) ) ) {", "List < String > actual = new Array List < > ( ) ;", "for ( ; ; ) {", "String line = reader . read Line ( ) ;", "if ( line == null ) {", "break ; }", "actual . add ( line ) ; }", "assert Equals ( expected , actual ) ; } }"]}
{"ids": "24482", "code": ["private void report Exception ( Kind kind , Element element , Throwable t ) {", "String Writer buf = new String Writer ( ) ;", "t . print Stack Trace ( new Print Writer ( buf ) ) ;", "buf . to String ( ) ;", "message ( kind , element , STR_ , buf . to String ( ) ) ; }"]}
{"ids": "83837", "code": ["public void add ( String [ ] titles , double [ ] values ) {", "add ( m Categories . size ( ) + STR_ , titles , values ) ; }"]}
{"ids": "41475", "code": ["static String parse Authority ( String uri String , int ssi ) {", "int length = uri String . length ( ) ;", "if ( length > ssi + NUM_ && uri String . char At ( ssi + NUM_ ) == STR_ && uri String . char At ( ssi + NUM_ ) == STR_ ) {", "int end = ssi + NUM_ ;", "LOOP : while ( end < length ) {", "switch ( uri String . char At ( end ) ) {", "case STR_ :", "case STR_ :", "case STR_ :", "break LOOP ; }", "end ++ ; }", "return uri String . substring ( ssi + NUM_ , end ) ; }", "else {", "return null ; } }"]}
{"ids": "72611", "code": ["public static void sort ( List < ? > list ) {", "if ( list . size ( ) > NUM_ ) {", "Collections . sort ( list , INSTANCE ) ; } }"]}
{"ids": "38208", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "59501", "code": ["public void add Datatransfer Progress Listener ( On Datatransfer Progress Listener listener , OC Upload oc Upload ) {", "if ( oc Upload == null || listener == null ) return ;", "String target Key = build Remote Name ( oc Upload . get Account Name ( ) , oc Upload . get Remote Path ( ) ) ;", "m Bound Listeners . put ( target Key , listener ) ; }"]}
{"ids": "45005", "code": ["private static char [ ] zz Unpack C Map ( String packed ) {", "char [ ] map = new char [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < NUM_ ) {", "int count = packed . char At ( i ++ ) ;", "char value = packed . char At ( i ++ ) ;", "do map [ j ++ ] = value ;", "while ( -- count > NUM_ ) ; }", "return map ; }"]}
{"ids": "19740", "code": ["protected String [ ] read Next ( Line Number Reader reader ) throws IO Exception {", "String [ ] row Def = null ;", "do {", "String next Line = reader . read Line ( ) ;", "if ( next Line == null ) {", "has Next = false ;", "return row Def ; }", "String [ ] r = parser . parse Line Multi ( next Line ) ;", "if ( r . length > NUM_ ) {", "if ( row Def == null ) {", "row Def = r ; }", "else {", "String [ ] t = new String [ row Def . length + r . length ] ;", "System . arraycopy ( row Def , NUM_ , t , NUM_ , row Def . length ) ;", "System . arraycopy ( r , NUM_ , t , row Def . length , r . length ) ;", "row Def = t ; } } }", "while ( parser . is Pending ( ) ) ;", "return row Def ; }"]}
{"ids": "56903", "code": ["private void verify Property Source Value ( Reloadable Property Source reloadable Property Source , String expected Value ) {", "logger . debug ( STR_ + TEST KEY + STR_ + expected Value ) ;", "logger . debug ( STR_ + properties . get ( TEST KEY ) + STR_ + reloadable Property Source . get Property ( TEST KEY ) ) ;", "String value = ( String ) reloadable Property Source . get Property ( TEST KEY ) ;", "assert Equals ( expected Value , value ) ; }"]}
{"ids": "6595", "code": ["private void update Center Panel ( ) {", "long now = System . current Time Millis ( ) ;", "if ( next Update Time > now ) return ;", "next Update Time = now + NUM_ * NUM_ ;", "center Panel . remove All ( ) ;", "center Component = new J Label ( ) ;", "Grid Bag Constraints gbc = new Grid Bag Constraints ( ) ;", "gbc . gridx = NUM_ ;", "gbc . gridy = NUM_ ;", "gbc . weightx = NUM_ ;", "gbc . fill = Grid Bag Constraints . NONE ;", "gbc . anchor = Grid Bag Constraints . CENTER ;", "center Panel . add ( center Component , gbc ) ;", "refresh ( ) ; }"]}
{"ids": "15453", "code": ["public void service Request Queue ( ) throws CLI Exception {", "if ( is Verbose ( ) ) {", "output Writer . println Message ( rb Messages . get String ( STR_ ) ) ; }", "try {", "while ( ! request Queue . is Empty ( ) ) {", "CLI Request req = ( CLI Request ) request Queue . remove ( NUM_ ) ;", "try {", "req . process ( this ) ;", "if ( status OS != null ) {", "String status = format Status ( req . get Options ( ) , NUM_ ) ;", "status OS . write ( status . get Bytes ( ) ) ; } }", "catch ( CLI Exception e ) {", "if ( is Verbose ( ) ) {", "e . print Stack Trace ( System . out ) ; }", "if ( status OS != null ) {", "String status = format Status ( req . get Options ( ) , e . get Exit Code ( ) ) ;", "status OS . write ( status . get Bytes ( ) ) ; }", "if ( b Continue ) {", "output Writer . println Error ( e . get Message ( ) ) ; }", "else {", "throw e ; } } } }", "catch ( IO Exception e ) {", "throw new CLI Exception ( e , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; }", "finally {", "if ( status OS != null ) {", "try {", "status OS . close ( ) ; }", "catch ( IO Exception ex ) { }", "status OS = null ; } } }"]}
{"ids": "9564", "code": ["Always Identical Key Store State ( ) {", "super ( ) ; }"]}
{"ids": "25905", "code": ["public static byte [ ] pack Byte Buffer Into Single Byte Array ( Byte Buffer [ ] byte Buffer Arr ) {", "if ( null == byte Buffer Arr || byte Buffer Arr . length == NUM_ ) {", "return null ; }", "int no Of Col = byte Buffer Arr . length ;", "short offset Len = ( short ) ( no Of Col * NUM_ ) ;", "int total Bytes = calculate Total Bytes ( byte Buffer Arr ) + offset Len ;", "Byte Buffer buffer = Byte Buffer . allocate ( total Bytes ) ;", "buffer . put Short ( offset Len ) ;", "for ( int index = NUM_ ; index < byte Buffer Arr . length - NUM_ ; index ++ ) {", "Byte Buffer individual Col = byte Buffer Arr [ index ] ;", "int no Of Bytes = individual Col . capacity ( ) ;", "buffer . put Short ( ( short ) ( offset Len + no Of Bytes ) ) ;", "offset Len += no Of Bytes ;", "individual Col . rewind ( ) ; }", "for ( int index = NUM_ ; index < byte Buffer Arr . length ; index ++ ) {", "Byte Buffer individual Col = byte Buffer Arr [ index ] ;", "buffer . put ( individual Col . array ( ) ) ; }", "buffer . rewind ( ) ;", "return buffer . array ( ) ; }"]}
{"ids": "64887", "code": ["public void stop ( ) {", "m Cancel = true ;", "if ( m Running . compare And Set ( true , false ) ) {", "if ( m Sample Dispatcher Task != null ) {", "m Thread Pool Manager . cancel ( m Sample Dispatcher Task ) ;", "m Sample Dispatcher Task = null ;", "m Filled Buffers . clear ( ) ; } } }"]}
{"ids": "33023", "code": ["public void add ( Simple Name ref ) {", "String type Name = ref . get Identifier ( ) ;", "if ( f Imports Added . contains ( type Name ) ) {", "return ; }", "I Binding binding = ref . resolve Binding ( ) ;", "if ( binding != null ) {", "if ( binding . get Kind ( ) != I Binding . TYPE ) {", "return ; }", "I Type Binding type Binding = ( I Type Binding ) binding ;", "if ( type Binding . is Array ( ) ) {", "type Binding = type Binding . get Element Type ( ) ; }", "type Binding = type Binding . get Type Declaration ( ) ;", "if ( ! type Binding . is Recovered ( ) ) {", "if ( needs Import ( type Binding , ref ) ) {", "f Imp Structure . add Import ( type Binding ) ;", "f Imports Added . add ( type Name ) ; }", "return ; } }", "else {", "if ( f Do Ignore Lower Case Names && type Name . length ( ) > NUM_ ) {", "char ch = type Name . char At ( NUM_ ) ;", "if ( Strings . is Lower Case ( ch ) && Character . is Letter ( ch ) ) {", "return ; } } }", "f Imports Added . add ( type Name ) ;", "f Unresolved Types . put ( type Name , new Unresolved Type Data ( ref ) ) ; }"]}
{"ids": "25190", "code": ["public void add All Searchables ( Array List < ? extends Search Result > searchable ) {", "m Searchable List . add All ( searchable ) ; }"]}
{"ids": "66842", "code": ["public List < Value Box > add Argument Hotspots ( String signature , int arg ) {", "List < Value Box > sig Spots = String Analysis . get Argument Expressions ( signature , arg ) ;", "return add Argument Hotspots ( signature , arg , sig Spots ) ; }"]}
{"ids": "77331", "code": ["public static String JQ ( String request ) throws Exception {", "int query Start Pos = request . index Of ( STR_ ) ;", "String query ;", "String path ;", "if ( - NUM_ == query Start Pos ) {", "query = STR_ ;", "path = request ; }", "else {", "query = request . substring ( query Start Pos + NUM_ ) ;", "path = request . substring ( NUM_ , query Start Pos ) ; }", "query = set Param ( query , STR_ , STR_ ) ;", "request = path + STR_ + set Param ( query , STR_ , STR_ ) ;", "String response ;", "boolean failed = true ;", "try {", "response = rest Test Harness . query ( request ) ;", "failed = false ; }", "finally {", "if ( failed ) {", "log . error ( STR_ + request ) ; } }", "return response ; }"]}
{"ids": "2187", "code": ["static void sort ( int [ ] a , int left , int right , int [ ] work , int work Base , int work Len ) {", "if ( right - left < QUICKSORT THRESHOLD ) {", "sort ( a , left , right , true ) ;", "return ; }", "int [ ] run = new int [ MAX RUN COUNT + NUM_ ] ;", "int count = NUM_ ;", "run [ NUM_ ] = left ;", "for ( int k = left ; k < right ; run [ count ] = k ) {", "while ( k < right && a [ k ] == a [ k + NUM_ ] ) k ++ ;", "if ( k == right ) break ;", "if ( a [ k ] < a [ k + NUM_ ] ) {", "while ( ++ k <= right && a [ k - NUM_ ] <= a [ k ] ) ; }", "else if ( a [ k ] > a [ k + NUM_ ] ) {", "while ( ++ k <= right && a [ k - NUM_ ] >= a [ k ] ) ;", "for ( int lo = run [ count ] - NUM_ , hi = k ; ++ lo < -- hi ; ) {", "int t = a [ lo ] ;", "a [ lo ] = a [ hi ] ;", "a [ hi ] = t ; } }", "if ( run [ count ] > left && a [ run [ count ] ] >= a [ run [ count ] - NUM_ ] ) {", "count -- ; }", "if ( ++ count == MAX RUN COUNT ) {", "sort ( a , left , right , true ) ;", "return ; } }", "if ( count == NUM_ ) {", "return ; }", "else if ( count == NUM_ && run [ count ] > right ) {", "return ; }", "right ++ ;", "if ( run [ count ] < right ) {", "run [ ++ count ] = right ; }", "byte odd = NUM_ ;", "for ( int n = NUM_ ; ( n <<= NUM_ ) < count ; odd ^= NUM_ ) ;", "int [ ] b ;", "int ao , bo ;", "int blen = right - left ;", "if ( work == null || work Len < blen || work Base + blen > work . length ) {", "work = new int [ blen ] ;", "work Base = NUM_ ; }", "if ( odd == NUM_ ) {", "System . arraycopy ( a , left , work , work Base , blen ) ;", "b = a ;", "bo = NUM_ ;", "a = work ;", "ao = work Base - left ; }", "else {", "b = work ;", "ao = NUM_ ;", "bo = work Base - left ; }", "for ( int last ; count > NUM_ ; count = last ) {", "for ( int k = ( last = NUM_ ) + NUM_ ; k <= count ; k += NUM_ ) {", "int hi = run [ k ] , mi = run [ k - NUM_ ] ;", "for ( int i = run [ k - NUM_ ] , p = i , q = mi ; i < hi ; ++ i ) {", "if ( q >= hi || p < mi && a [ p + ao ] <= a [ q + ao ] ) {", "b [ i + bo ] = a [ p ++ + ao ] ; }", "else {", "b [ i + bo ] = a [ q ++ + ao ] ; } }", "run [ ++ last ] = hi ; }", "if ( ( count & NUM_ ) != NUM_ ) {", "for ( int i = right , lo = run [ count - NUM_ ] ; -- i >= lo ; b [ i + bo ] = a [ i + ao ] ) ;", "run [ ++ last ] = right ; }", "int [ ] t = a ;", "a = b ;", "b = t ;", "int o = ao ;", "ao = bo ;", "bo = o ; } }"]}
{"ids": "46609", "code": ["protected void shift End ( int new Size ) {", "int old Size = get Array Length ( ) ;", "int old Gap End = g 1 ;", "int upper Size = old Size - old Gap End ;", "int array Length = get New Array Size ( new Size ) ;", "int new Gap End = array Length - upper Size ;", "resize ( array Length ) ;", "g 1 = new Gap End ;", "if ( upper Size != NUM_ ) {", "System . arraycopy ( array , old Gap End , array , new Gap End , upper Size ) ; } }"]}
{"ids": "40330", "code": ["protected void process Style 12 Examine And Setup Adjustment ( Game game , Style 12 Message message , Game Service service , String entire Message ) {", "if ( LOG . is Debug Enabled ( ) ) {", "LOG . debug ( STR_ ) ; }", "if ( game . is In State ( Game . OBSERVING EXAMINED STATE ) && message . relation == Style 12 Message . EXAMINING GAME RELATION ) {", "if ( LOG . is Debug Enabled ( ) ) {", "LOG . debug ( STR_ ) ; }", "examine Games Waiting On Moves . put ( game . get Id ( ) , message ) ;", "connector . send Message ( STR_ + message . game Id , true , Chat Type . MOVES ) ; }", "else if ( entire Message . contains ( STR_ ) || entire Message . contains ( STR_ ) ) {", "if ( LOG . is Debug Enabled ( ) ) {", "LOG . debug ( STR_ ) ; }", "Game examine Game = Ics Utils . create Game ( message , entire Message ) ;", "if ( message . relation == Style 12 Message . EXAMINING GAME RELATION && ! examine Game . is In State ( Game . SETUP STATE ) ) {", "examine Games Waiting On Moves . put ( game . get Id ( ) , message ) ;", "connector . send Message ( STR_ + message . game Id , true , Chat Type . MOVES ) ; } }", "else if ( game . is In State ( Game . EXAMINING STATE ) && ( entire Message . contains ( STR_ ) || entire Message . contains ( STR_ ) ) ) {", "if ( LOG . is Debug Enabled ( ) ) {", "LOG . debug ( STR_ ) ; }", "process Examined Game Became Setup ( ) ; }", "else if ( entire Message . contains ( STR_ ) || entire Message . contains ( STR_ ) ) {", "examine Games Waiting On Moves . put ( game . get Id ( ) , message ) ;", "connector . send Message ( STR_ + message . game Id , true , Chat Type . MOVES ) ; }", "else {", "Ics Utils . reset Game ( game , message ) ;", "service . fire Game State Changed ( message . game Id , false ) ;", "connector . send Message ( STR_ + message . game Id , true , Chat Type . MOVES ) ; } }"]}
{"ids": "86770", "code": ["public Sam Filter Chain ( Collection < Sam Filter > filters ) {", "m Filters = filters . to Array ( new Sam Filter [ filters . size ( ) ] ) ; }"]}
{"ids": "46602", "code": ["Previous Word Action ( String nm , boolean select ) {", "super ( nm ) ;", "this . select = select ; }"]}
{"ids": "27081", "code": ["static Unix Stream < String > cat ( final String file Path ) throws IO Exception {", "Objects . require Non Null ( file Path , STR_ ) ;", "return new Unix Stream Impl < > ( lines ( Paths . get ( file Path ) ) ) ; }"]}
{"ids": "10162", "code": ["private static String encode base 64 ( byte d [ ] , int len ) throws Illegal Argument Exception {", "int off = NUM_ ;", "String Buffer rs = new String Buffer ( ) ;", "int c 1 , c 2 ;", "if ( len <= NUM_ || len > d . length ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "while ( off < len ) {", "c 1 = d [ off ++ ] & NUM_ ;", "rs . append ( base 64 code [ ( c 1 > > NUM_ ) & NUM_ ] ) ;", "c 1 = ( c 1 & NUM_ ) << NUM_ ;", "if ( off >= len ) {", "rs . append ( base 64 code [ c 1 & NUM_ ] ) ;", "break ; }", "c 2 = d [ off ++ ] & NUM_ ;", "c 1 |= ( c 2 > > NUM_ ) & NUM_ ;", "rs . append ( base 64 code [ c 1 & NUM_ ] ) ;", "c 1 = ( c 2 & NUM_ ) << NUM_ ;", "if ( off >= len ) {", "rs . append ( base 64 code [ c 1 & NUM_ ] ) ;", "break ; }", "c 2 = d [ off ++ ] & NUM_ ;", "c 1 |= ( c 2 > > NUM_ ) & NUM_ ;", "rs . append ( base 64 code [ c 1 & NUM_ ] ) ;", "rs . append ( base 64 code [ c 2 & NUM_ ] ) ; }", "return rs . to String ( ) ; }"]}
{"ids": "55464", "code": ["public void commercial Result ( String stream , String result Text , Request Result result ) {", "set Commercial Result ( Date Time . current Time ( ) + STR_ + result Text ) ;", "last Commercial Run Attempt = System . current Time Millis ( ) ;", "set Loading Commercial ( false ) ;", "if ( result == Twitch Api . Request Result . RUNNING COMMERCIAL ) {", "last Commercial . put ( stream , System . current Time Millis ( ) ) ;", "if ( stream != null && stream . equals ( current Channel ) ) {", "last Commercial Run = System . current Time Millis ( ) ; } } }"]}
{"ids": "59966", "code": ["private static Detach ISO Response check Detach ISO Response ( Detach ISO Response detach ISO Response ) throws Rpc Exception {", "logger . info ( STR_ , detach ISO Response ) ;", "switch ( detach ISO Response . get Result ( ) ) {", "case OK :", "break ;", "case ISO NOT ATTACHED :", "logger . warn ( STR_ , detach ISO Response ) ;", "throw new Iso Not Attached Exception ( detach ISO Response . get Error ( ) ) ;", "case SYSTEM ERROR :", "logger . warn ( STR_ , detach ISO Response ) ;", "throw new System Error Exception ( detach ISO Response . get Error ( ) ) ;", "case VM NOT FOUND :", "logger . warn ( STR_ , detach ISO Response ) ;", "throw new Vm Not Found Exception ( detach ISO Response . get Error ( ) ) ;", "default :", "throw new Rpc Exception ( String . format ( STR_ , detach ISO Response . get Result ( ) ) ) ; }", "return detach ISO Response ; }"]}
{"ids": "66869", "code": ["public boolean is terminal ( Method Or Method Context mc ) {", "Stack < Soot Method > sys stack = new Stack < Soot Method > ( ) ;", "boolean result ;", "if ( ! is system ( mc . method ( ) ) ) result = false ;", "else {", "if ( ! process callbacks ) result = true ;", "else {", "if ( ( stack . size ( ) > NUM_ ) && is system ( stack . peek ( ) ) ) result = ! calls app method ( mc , sys stack ) ;", "else {", "if ( can have callbacks ( mc . method ( ) ) ) result = ! calls app method ( mc , sys stack ) ;", "else result = true ; } } }", "logger . info ( STR_ , mc . method ( ) , result ) ;", "return result ; }"]}
{"ids": "47181", "code": ["boolean try Match ( S Node s ) {", "if ( match == null && UNSAFE . compare And Swap Object ( this , match Offset , null , s ) ) {", "Thread w = waiter ;", "if ( w != null ) {", "waiter = null ;", "Lock Support . unpark ( w ) ; }", "return true ; }", "return match == s ; }"]}
{"ids": "68750", "code": ["public void add Item ( int position , M model ) {", "m Datas . add ( position , model ) ;", "notify Item Inserted ( position ) ; }"]}
{"ids": "17751", "code": ["public final Set < String > aliases ( ) {", "return Collections . unmodifiable Set ( this . aliases Set ) ; }"]}
{"ids": "48210", "code": ["public void encode ( Output Stream out ) throws IO Exception {", "Der Output Stream tmp = new Der Output Stream ( ) ;", "if ( this . extension Value == null ) {", "this . extension Id = PKIX Extensions . Issuing Distribution Point Id ;", "this . critical = false ;", "encode This ( ) ; }", "super . encode ( tmp ) ;", "out . write ( tmp . to Byte Array ( ) ) ; }"]}
{"ids": "47878", "code": ["public final void read Children ( Object Input Stream ois ) throws IO Exception , Class Not Found Exception {", "int count = serializable ;", "while ( count -- > NUM_ ) {", "Object child = null ;", "Bean Context Support . BCS Child bscc = null ;", "try {", "child = ois . read Object ( ) ;", "bscc = ( Bean Context Support . BCS Child ) ois . read Object ( ) ; }", "catch ( IO Exception ioe ) {", "continue ; }", "catch ( Class Not Found Exception cnfe ) {", "continue ; }", "synchronized ( child ) {", "Bean Context Child bcc = null ;", "try {", "bcc = ( Bean Context Child ) child ; }", "catch ( Class Cast Exception cce ) { }", "if ( bcc != null ) {", "try {", "bcc . set Bean Context ( get Bean Context Peer ( ) ) ;", "bcc . add Property Change Listener ( STR_ , child PCL ) ;", "bcc . add Vetoable Change Listener ( STR_ , child VCL ) ; }", "catch ( Property Veto Exception pve ) {", "continue ; } }", "child Deserialized Hook ( child , bscc ) ; } } }"]}
{"ids": "80526", "code": ["static boolean is Christmas Time ( Calendar cal ) {", "int month = cal . get ( Calendar . MONTH ) ;", "int day = cal . get ( Calendar . DAY OF MONTH ) ;", "if ( month >= NUM_ && month < NUM_ ) {", "return false ; }", "if ( month == NUM_ ) {", "return day <= NUM_ ; }", "if ( month == NUM_ ) {", "return day >= NUM_ ; }", "return false ; }"]}
{"ids": "7430", "code": ["@ Override public void zoom Range Axes ( double factor , Plot Rendering Info info , Point 2 D source ) {", "zoom Range Axes ( factor , info , source , false ) ; }"]}
{"ids": "70395", "code": ["private void board Save Image ( ) {", "if ( curfile Image == null ) {", "board Save As Image ( ) ;", "return ; }", "J Dialog wait D = new J Dialog ( frame , Messages . get String ( STR_ ) ) ;", "wait D . add ( new J Label ( Messages . get String ( STR_ ) ) ) ;", "wait D . set Size ( NUM_ , NUM_ ) ;", "wait D . set Location ( ( frame . get Size ( ) . width / NUM_ ) - ( wait D . get Size ( ) . width / NUM_ ) , ( frame . get Size ( ) . height / NUM_ ) - ( wait D . get Size ( ) . height / NUM_ ) ) ;", "wait D . set Visible ( true ) ;", "frame . set Cursor ( Cursor . get Predefined Cursor ( Cursor . WAIT CURSOR ) ) ;", "wait D . set Cursor ( Cursor . get Predefined Cursor ( Cursor . WAIT CURSOR ) ) ;", "try {", "Image IO . write ( bv . get Entire Board Image ( ) , STR_ , curfile Image ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "wait D . set Visible ( false ) ;", "frame . set Cursor ( Cursor . get Default Cursor ( ) ) ; }"]}
{"ids": "74236", "code": ["public boolean contains Name ( String type , String name ) {", "List < String > names = get Names ( type ) ;", "return names . contains ( name ) ; }"]}
{"ids": "52728", "code": ["@ Suppress Warnings ( STR_ ) public static < C extends Result > Array List < C > filter Results ( Result Hierarchy hier , Result r , Class < ? super C > restriction Class ) {", "Array List < C > res = new Array List < > ( ) ;", "if ( restriction Class . is Instance ( r ) ) {", "res . add ( ( C ) restriction Class . cast ( r ) ) ; }", "for ( Hierarchy . Iter < Result > iter = hier . iter Descendants ( r ) ; iter . valid ( ) ; iter . advance ( ) ) {", "Result result = iter . get ( ) ;", "if ( restriction Class . is Instance ( result ) ) {", "res . add ( ( C ) restriction Class . cast ( result ) ) ; } }", "return res ; }"]}
{"ids": "34519", "code": ["private boolean has Next Proxy ( ) {", "return next Proxy Index < proxies . size ( ) ; }"]}
{"ids": "37644", "code": ["protected boolean [ ] can Handle Missing ( boolean nominal Predictor , boolean numeric Predictor , boolean string Predictor , boolean date Predictor , boolean relational Predictor , boolean multi Instance , int class Type , boolean predictor Missing , boolean class Missing , int missing Level ) {", "if ( missing Level == NUM_ ) {", "print ( STR_ ) ; }", "print ( STR_ ) ;", "if ( predictor Missing ) {", "print ( STR_ ) ;", "if ( class Missing ) {", "print ( STR_ ) ; } }", "if ( class Missing ) {", "print ( STR_ ) ; }", "print ( STR_ ) ;", "print Attribute Summary ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type ) ;", "print ( STR_ ) ;", "Array List < String > accepts = new Array List < String > ( ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "int num Train = get Num Instances ( ) , num Classes = NUM_ ;", "return run Basic Test ( nominal Predictor , numeric Predictor , string Predictor , date Predictor , relational Predictor , multi Instance , class Type , missing Level , predictor Missing , class Missing , num Train , num Classes , accepts ) ; }"]}
{"ids": "4933", "code": ["public Set < Brd Item > pick items ( Pla Point p location , int p layer , Item Selection Filter p filter ) {", "Set < Brd Item > result = new Tree Set < Brd Item > ( ) ;", "Shape Tile Box point shape = p location . to box ( ) ;", "Collection < Awtree Object > overlaps = overlapping objects ( point shape , p layer ) ;", "for ( Awtree Object curr object : overlaps ) {", "if ( ! ( curr object instanceof Brd Item ) ) continue ;", "Brd Item curr item = ( Brd Item ) curr object ;", "if ( ! curr item . is selected by filter ( p filter ) ) continue ;", "result . add ( curr item ) ; }", "return result ; }"]}
{"ids": "84029", "code": ["public boolean is Collinear With ( Vector other ) {", "if ( x == NUM_ && y == NUM_ && z == NUM_ ) {", "return true ; }", "final double other X = other . x ;", "final double other Y = other . y ;", "final double other Z = other . z ;", "if ( other X == NUM_ && other Y == NUM_ && other Z == NUM_ ) {", "return true ; }", "if ( ( x == NUM_ ) != ( other X == NUM_ ) ) return false ;", "if ( ( y == NUM_ ) != ( other Y == NUM_ ) ) return false ;", "if ( ( z == NUM_ ) != ( other Z == NUM_ ) ) return false ;", "final double quotient X = other X / x ;", "if ( ! Double . is Na N ( quotient X ) ) {", "return other . equals ( multiply ( quotient X ) ) ; }", "final double quotient Y = other Y / y ;", "if ( ! Double . is Na N ( quotient Y ) ) {", "return other . equals ( multiply ( quotient Y ) ) ; }", "final double quotient Z = other Z / z ;", "if ( ! Double . is Na N ( quotient Z ) ) {", "return other . equals ( multiply ( quotient Z ) ) ; }", "throw new Runtime Exception ( STR_ ) ; }"]}
{"ids": "64912", "code": ["public void receive ( float [ ] current FFT Bins ) {", "if ( Float . is Infinite ( current FFT Bins [ NUM_ ] ) || Float . is Na N ( current FFT Bins [ NUM_ ] ) ) {", "current FFT Bins = new float [ current FFT Bins . length ] ; }", "if ( m Display FFT Bins == null || m Display FFT Bins . length != current FFT Bins . length ) {", "m Display FFT Bins = current FFT Bins ; }", "float [ ] smoothed Bins = m Smoothing Filter . filter ( current FFT Bins ) ;", "if ( m Averaging > NUM_ ) {", "float gain = NUM_ / ( float ) m Averaging ;", "for ( int x = NUM_ ; x < m Display FFT Bins . length ; x ++ ) {", "m Display FFT Bins [ x ] += ( smoothed Bins [ x ] - m Display FFT Bins [ x ] ) * gain ; } }", "else {", "m Display FFT Bins = smoothed Bins ; }", "repaint ( ) ; }"]}
{"ids": "36373", "code": ["@ Override public void execution Unit Imported ( final Execution Unit process , final Element element ) {", "Node List children = element . get Child Nodes ( ) ;", "children = element . get Child Nodes ( ) ;", "for ( int i = NUM_ ; i < children . get Length ( ) ; i ++ ) {", "Node child = children . item ( i ) ;", "if ( child instanceof Element ) {", "Element background Element = ( Element ) child ;", "if ( XML TAG BACKGROUND . equals ( background Element . get Tag Name ( ) ) ) {", "String x Str = background Element . get Attribute ( XML ATTRIBUTE X POSITION ) ;", "String y Str = background Element . get Attribute ( XML ATTRIBUTE Y POSITION ) ;", "String w Str = background Element . get Attribute ( XML ATTRIBUTE WIDTH ) ;", "String h Str = background Element . get Attribute ( XML ATTRIBUTE HEIGHT ) ;", "String img Loc Str = background Element . get Attribute ( XML ATTRIBUTE LOCATION ) ;", "try {", "int x Loc = Integer . parse Int ( x Str ) ;", "int y Loc = Integer . parse Int ( y Str ) ;", "int w Loc = Integer . parse Int ( w Str ) ;", "int h Loc = Integer . parse Int ( h Str ) ;", "Process Background Image bg Img = new Process Background Image ( x Loc , y Loc , w Loc , h Loc , img Loc Str , process ) ;", "set Background Image ( bg Img ) ; }", "catch ( Null Pointer Exception | Illegal Argument Exception e ) { } } } } }"]}
{"ids": "12288", "code": ["private void send Mail To Queue ( String to , String subject , String content , boolean is Multipart , boolean is Html ) {", "Email Params email Params = new Email Params ( to , subject , content , is Multipart , is Html ) ;", "rabbit Template . convert And Send ( Rabbitmq Configuration . QUEUE SEND EMAIL , email Params ) ; }"]}
{"ids": "75002", "code": ["public Mersenne Twister RNG ( final byte [ ] seed ) {", "if ( seed == null || seed . length != SEED SIZE BYTES ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . seed = seed . clone ( ) ;", "final int [ ] seed Ints = convert Bytes To Ints ( this . seed ) ;", "mt [ NUM_ ] = BOOTSTRAP SEED ;", "for ( mt Index = NUM_ ; mt Index < N ; mt Index ++ ) {", "mt [ mt Index ] = BOOTSTRAP FACTOR * ( mt [ mt Index - NUM_ ] ^ mt [ mt Index - NUM_ ] > > > NUM_ ) + mt Index ; }", "int i = NUM_ ;", "int j = NUM_ ;", "for ( int k = Math . max ( N , seed Ints . length ) ; k > NUM_ ; k -- ) {", "mt [ i ] = ( mt [ i ] ^ ( mt [ i - NUM_ ] ^ mt [ i - NUM_ ] > > > NUM_ ) * SEED FACTOR 1 ) + seed Ints [ j ] + j ;", "i ++ ;", "j ++ ;", "if ( i >= N ) {", "mt [ NUM_ ] = mt [ N - NUM_ ] ;", "i = NUM_ ; }", "if ( j >= seed Ints . length ) {", "j = NUM_ ; } }", "for ( int k = N - NUM_ ; k > NUM_ ; k -- ) {", "mt [ i ] = ( mt [ i ] ^ ( mt [ i - NUM_ ] ^ mt [ i - NUM_ ] > > > NUM_ ) * SEED FACTOR 2 ) - i ;", "i ++ ;", "if ( i >= N ) {", "mt [ NUM_ ] = mt [ N - NUM_ ] ;", "i = NUM_ ; } }", "mt [ NUM_ ] = UPPER MASK ; }"]}
{"ids": "46026", "code": ["private Set < Object Instance > filter List Of Object Instances ( Set < Object Instance > list , Query Exp query ) {", "if ( query == null ) {", "return list ; }", "else {", "Set < Object Instance > result = new Hash Set < Object Instance > ( ) ;", "for ( Object Instance oi : list ) {", "boolean res = false ;", "M Bean Server old Server = Query Eval . get M Bean Server ( ) ;", "query . set M Bean Server ( server ) ;", "try {", "res = query . apply ( oi . get Object Name ( ) ) ; }", "catch ( Exception e ) {", "res = false ; }", "finally {", "query . set M Bean Server ( old Server ) ; }", "if ( res ) {", "result . add ( oi ) ; } }", "return result ; } }"]}
{"ids": "39790", "code": ["@ Path ( STR_ ) @ Timed @ Exception Metered @ GET public Automation Secret Response read Secret By Id ( @ Auth Automation Client automation Client , @ Path Param ( STR_ ) Long Param secret Id ) {", "Optional < Secret > secret = secret Controller . get Secret By Id ( secret Id . get ( ) ) ;", "if ( ! secret . is Present ( ) ) {", "throw new Not Found Exception ( STR_ ) ; }", "Immutable List < Group > groups = Immutable List . copy Of ( acl DAO . get Groups For ( secret . get ( ) ) ) ;", "return Automation Secret Response . from Secret ( secret . get ( ) , groups ) ; }"]}
{"ids": "10333", "code": ["protected void add Action Exception Warning ( Exception e ) {", "String msg = e . get Message ( ) ;", "if ( msg != null ) {", "warnings . add ( msg ) ; } }"]}
{"ids": "81285", "code": ["private void generate Field Infos ( I Type type , I Binary Type type Info , Hash Map new Elements , Array List children Handles ) {", "I Binary Field [ ] fields = type Info . get Fields ( ) ;", "if ( fields == null ) {", "return ; }", "Java Model Manager manager = ( ( Java Element ) type ) . manager ;", "for ( int i = NUM_ , field Count = fields . length ; i < field Count ; i ++ ) {", "I Binary Field field Info = fields [ i ] ;", "Binary Field field = new Binary Field ( ( Java Element ) type , manager , manager . intern ( new String ( field Info . get Name ( ) ) ) ) ;", "new Elements . put ( field , field Info ) ;", "children Handles . add ( field ) ;", "generate Annotations Infos ( field , field Info . get Annotations ( ) , field Info . get Tag Bits ( ) , new Elements ) ; } }"]}
{"ids": "63088", "code": ["public List < String > generate Model ( String schema , String table , String package Name , boolean annotate Schema , boolean trim Strings ) {", "try {", "List < String > models = New . array List ( ) ;", "List < Table Inspector > tables = get Tables ( schema , table ) ;", "for ( Table Inspector t : tables ) {", "t . read ( meta Data ) ;", "String model = t . generate Model ( package Name , annotate Schema , trim Strings ) ;", "models . add ( model ) ; }", "return models ; }", "catch ( SQL Exception s ) {", "throw new Runtime Exception ( s ) ; } }"]}
{"ids": "10807", "code": ["public static Ed 25519 Encoded Field Element to Encoded Field Element ( final Big Integer b ) {", "return new Ed 25519 Encoded Field Element ( to Byte Array ( b ) ) ; }"]}
{"ids": "65739", "code": ["protected Array List < Key Name Pair > load RMA Data ( int C B Partner ID ) {", "Array List < Key Name Pair > list = new Array List < Key Name Pair > ( ) ;", "String sql Stmt = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ;", "Prepared Statement pstmt = null ;", "try {", "pstmt = DB . prepare Statement ( sql Stmt , null ) ;", "pstmt . set Int ( NUM_ , C B Partner ID ) ;", "Result Set rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) ) {", "list . add ( new Key Name Pair ( rs . get Int ( NUM_ ) , rs . get String ( NUM_ ) ) ) ; }", "rs . close ( ) ; }", "catch ( SQL Exception e ) {", "log . log ( Level . SEVERE , sql Stmt . to String ( ) , e ) ; }", "finally {", "if ( pstmt != null ) {", "try {", "pstmt . close ( ) ; }", "catch ( Exception ex ) {", "log . severe ( STR_ ) ; } } }", "return list ; }"]}
{"ids": "69288", "code": ["private void check Send Track To Google ( ) {", "if ( ! send To Google ( activity My Tracks . get String ( R . string . export google maps ) ) || ! send To Google ( activity My Tracks . get String ( R . string . export google fusion tables ) ) || ! send To Google ( activity My Tracks . get String ( R . string . export google spreadsheets ) ) ) {", "return ; }", "assert True ( Google Utils . delete Maps ( activity My Tracks . get Application Context ( ) , Google Utils . ACCOUNT 1 , End To End Test Utils . track Name ) ) ;", "assert True ( Google Utils . delete Fusion Tables ( activity My Tracks . get Application Context ( ) , Google Utils . ACCOUNT 1 , End To End Test Utils . track Name ) ) ;", "assert True ( Google Utils . delete Spreadsheets Row ( activity My Tracks . get Application Context ( ) , Google Utils . ACCOUNT 1 , End To End Test Utils . track Name ) ) ; }"]}
{"ids": "29363", "code": ["private byte [ ] entity To Bytes ( Http Entity entity ) throws IO Exception , Server Error {", "Pooling Byte Array Output Stream bytes = new Pooling Byte Array Output Stream ( m Pool , ( int ) entity . get Content Length ( ) ) ;", "byte [ ] buffer = null ;", "try {", "Input Stream in = entity . get Content ( ) ;", "if ( in == null ) {", "throw new Server Error ( ) ; }", "buffer = m Pool . get Buf ( NUM_ ) ;", "int count ;", "while ( ( count = in . read ( buffer ) ) != - NUM_ ) {", "bytes . write ( buffer , NUM_ , count ) ; }", "return bytes . to Byte Array ( ) ; }", "finally {", "try {", "entity . consume Content ( ) ; }", "catch ( IO Exception e ) {", "Volley Log . v ( STR_ ) ; }", "m Pool . return Buf ( buffer ) ;", "bytes . close ( ) ; } }"]}
{"ids": "65523", "code": ["public void on Dependency Changed ( Preference dependency , boolean disable Dependent ) {", "if ( m Dependency Met == disable Dependent ) {", "m Dependency Met = ! disable Dependent ;", "notify Dependency Change ( should Disable Dependents ( ) ) ;", "notify Changed ( ) ; } }"]}
{"ids": "12915", "code": ["@ Override public Double analyse ( double [ ] frame ) {", "if ( frame . length != get Frame Length Samples ( ) ) throw new Illegal Argument Exception ( STR_ + get Frame Length Samples ( ) + STR_ + frame . length ) ;", "double total Energy = NUM_ ;", "for ( int i = NUM_ ; i < frame . length ; i ++ ) {", "total Energy += frame [ i ] * frame [ i ] ; }", "remember Frame Energy ( total Energy ) ;", "return new Double ( total Energy ) ; }"]}
{"ids": "79368", "code": ["public static Element first Child Element ( Element element ) {", "if ( element == null ) return null ;", "Node node = element . get First Child ( ) ;", "if ( node != null ) {", "do {", "if ( node . get Node Type ( ) == Node . ELEMENT NODE ) {", "Element child Element = ( Element ) node ;", "return child Element ; } }", "while ( ( node = node . get Next Sibling ( ) ) != null ) ; }", "return null ; }"]}
{"ids": "5595", "code": ["private static void partial Match ( Dimensional Node node , boolean [ ] relevant , double [ ] keys , Array List < I Multi Point > results ) {", "I Multi Point pt = node . point ;", "boolean match = true ;", "for ( int i = NUM_ ; i < relevant . length ; i ++ ) {", "if ( ! relevant [ i ] ) continue ;", "if ( ! Floating Point . same ( pt . get Coordinate ( i + NUM_ ) , keys [ i ] ) ) {", "match = false ;", "break ; } }", "if ( match ) {", "results . add ( pt ) ; }", "int d = node . dimension ;", "if ( relevant [ d - NUM_ ] ) {", "if ( Floating Point . lesser Equals ( keys [ d - NUM_ ] , pt . get Coordinate ( d ) ) ) {", "Dimensional Node below = node . get Below ( ) ;", "if ( below != null ) {", "partial Match ( below , relevant , keys , results ) ; } }", "if ( Floating Point . greater Equals ( keys [ d - NUM_ ] , pt . get Coordinate ( d ) ) ) {", "Dimensional Node above = node . get Above ( ) ;", "if ( above != null ) {", "partial Match ( above , relevant , keys , results ) ; } } }", "else {", "Dimensional Node below = node . get Below ( ) ;", "if ( below != null ) {", "partial Match ( below , relevant , keys , results ) ; }", "Dimensional Node above = node . get Above ( ) ;", "if ( above != null ) {", "partial Match ( above , relevant , keys , results ) ; } } }"]}
{"ids": "14136", "code": ["public static String encode For Redirect ( final String str ) {", "String class Method = STR_ ;", "byte [ ] input ;", "try {", "input = str . get Bytes ( STR_ ) ; }", "catch ( Unsupported Encoding Exception uee ) {", "debug . error ( class Method + STR_ , uee ) ;", "return null ; }", "Deflater deflater = new Deflater ( Deflater . DEFAULT COMPRESSION , true ) ;", "Byte Array Output Stream out = new Byte Array Output Stream ( ) ;", "Deflater Output Stream deflater Output Stream = new Deflater Output Stream ( out , deflater ) ;", "try {", "deflater Output Stream . write ( input ) ; }", "catch ( IO Exception e ) {", "debug . error ( class Method + STR_ , e ) ;", "return null ; }", "finally {", "IO Utils . close If Not Null ( deflater Output Stream ) ; }", "String encoded = URL Enc Dec . encode ( Base 64 . encode ( out . to Byte Array ( ) ) ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( class Method + STR_ + encoded . length ( ) ) ;", "debug . message ( class Method + STR_ + encoded + STR_ ) ; }", "return encoded ; }"]}
{"ids": "901", "code": ["private void save Touch Start ( Motion Event event ) {", "m Saved Matrix . set ( m Matrix ) ;", "m Touch Start Point . set ( event . get X ( ) , event . get Y ( ) ) ;", "m Closest Data Set To Touch = m Chart . get Data Set By Touch Point ( event . get X ( ) , event . get Y ( ) ) ; }"]}
{"ids": "75536", "code": ["public static boolean is Nested Mapping ( String regex ) {", "return regex . starts With ( NESTED MAPPING STARTS SYMBOL ) && regex . ends With ( NESTED MAPPING ENDS SYMBOL ) ; }"]}
{"ids": "8554", "code": ["public static boolean null Equals ( String s 1 , String s 2 ) {", "return ( s 1 == null ? s 2 == null : s 1 . equals ( s 2 ) ) ; }"]}
{"ids": "44109", "code": ["private boolean has Images ( I Action action To Check ) {", "return action To Check . get Image Descriptor ( ) != null || action To Check . get Hover Image Descriptor ( ) != null || action To Check . get Disabled Image Descriptor ( ) != null ; }"]}
{"ids": "20521", "code": ["public double calc Angle Between Lines ( Entry start 1 , Entry end 1 , Entry start 2 , Entry end 2 ) {", "double angle 1 = calc Angle With Ratios ( start 1 , end 1 ) ;", "double angle 2 = calc Angle With Ratios ( start 2 , end 2 ) ;", "return Math . abs ( angle 1 - angle 2 ) ; }"]}
{"ids": "38412", "code": ["public double convert To Attrib X ( double scx ) {", "double temp = m Xaxis End - m Xaxis Start ;", "double temp 2 = ( ( scx - m Xaxis Start ) * ( m max X - m min X ) ) / temp ;", "temp 2 = temp 2 + m min X ;", "return temp 2 ; }"]}
{"ids": "4030", "code": ["public void complete Executor Task ( ) {", "Executor Queue Item item = null ;", "synchronized ( executor Lock ) {", "executor Task Count -- ;", "assert ( executor Task Count >= NUM_ ) ;", "if ( executor Queue Head != null ) {", "item = executor Queue Head ;", "executor Queue Head = item . next ;", "if ( executor Queue Head == null ) executor Queue Tail = null ; } }", "if ( item != null ) {", "Runnable task = item . get Runnable ( ) ;", "Class Loader loader = item . get Loader ( ) ;", "boolean is Priority = false ;", "boolean is Queue = true ;", "boolean is Wake = true ;", "schedule Impl ( task , loader , MAX EXPIRE , is Priority , is Queue , is Wake ) ; } }"]}
{"ids": "6300", "code": ["public static void force Mkdir ( File directory ) throws IO Exception {", "if ( directory . exists ( ) ) {", "if ( ! directory . is Directory ( ) ) {", "String message = STR_ + directory + STR_ + STR_ ;", "throw new IO Exception ( message ) ; } }", "else {", "if ( ! directory . mkdirs ( ) ) {", "if ( ! directory . is Directory ( ) ) {", "String message = STR_ + directory ;", "throw new IO Exception ( message ) ; } } } }"]}
{"ids": "27685", "code": ["private < T > int count Cleared Refs ( List < Weak Reference < T > > refs ) {", "final Iterator < Weak Reference < T > > itr = refs . iterator ( ) ;", "int n = NUM_ ;", "while ( itr . has Next ( ) ) {", "final Weak Reference < T > ref = itr . next ( ) ;", "if ( ref . get ( ) == null ) n ++ ; }", "return n ; }"]}
{"ids": "1184", "code": ["protected void read Image ( ) {", "ix = read Short ( ) ;", "iy = read Short ( ) ;", "iw = read Short ( ) ;", "ih = read Short ( ) ;", "int packed = read ( ) ;", "lct Flag = ( packed & NUM_ ) != NUM_ ;", "interlace = ( packed & NUM_ ) != NUM_ ;", "lct Size = NUM_ << ( packed & NUM_ ) ;", "if ( lct Flag ) {", "lct = read Color Table ( lct Size ) ;", "act = lct ; }", "else {", "act = gct ;", "if ( bg Index == trans Index ) bg Color = NUM_ ; }", "int save = NUM_ ;", "if ( transparency ) {", "save = act [ trans Index ] ;", "act [ trans Index ] = NUM_ ; }", "if ( act == null ) {", "status = STATUS FORMAT ERROR ; }", "if ( err ( ) ) return ;", "decode Image Data ( ) ;", "skip ( ) ;", "if ( err ( ) ) return ;", "frame Count ++ ;", "image = new Buffered Image ( width , height , Buffered Image . TYPE INT ARGB PRE ) ;", "set Pixels ( ) ;", "frames . add ( new Gif Frame ( image , delay ) ) ;", "if ( transparency ) {", "act [ trans Index ] = save ; }", "reset Frame ( ) ; }"]}
{"ids": "81790", "code": ["protected Object evaluate Left Greater Right ( List elements , String lvalue , String rvalue ) {", "List array ;", "if ( elements instanceof java . util . Vector ) {", "array = new java . util . Vector ( ) ; }", "else {", "array = new Array List ( ) ; }", "for ( Iterator e = elements . iterator ( ) ; e . has Next ( ) ; ) {", "Object o = e . next ( ) ;", "if ( o instanceof Structured Content ) {", "if ( ( o = evaluate Left Greater Right ( ( Structured Content ) o , lvalue , rvalue ) ) != null ) {", "array . add ( o ) ; } } }", "if ( array . size ( ) == NUM_ ) {", "return ( Structured Content ) array . get ( NUM_ ) ; }", "return array ; }"]}
{"ids": "83921", "code": ["public Optional < Double > avg ( ) {", "if ( is Empty ( ) ) return Optional . empty ( ) ;", "return Optional . of ( sum ( ) / get Event Count ( ) ) ; }"]}
{"ids": "86075", "code": ["public static boolean is SU ( String shell ) {", "int pos = shell . index Of ( STR_ ) ;", "if ( pos >= NUM_ ) {", "shell = shell . substring ( NUM_ , pos ) ; }", "pos = shell . last Index Of ( STR_ ) ;", "if ( pos >= NUM_ ) {", "shell = shell . substring ( pos + NUM_ ) ; }", "return shell . equals ( STR_ ) ; }"]}
{"ids": "82150", "code": ["private boolean is Valid ( int type , String value ) {", "if ( value == null ) {", "return false ; }", "if ( ALLOWED STRINGS [ type ] != null ) {", "return verify String Group ( value , ALLOWED STRINGS [ type ] ) ; }", "switch ( type ) {", "case TYPE NUMBER :", "return verify ( value , DIGITS , null ) ;", "case TYPE PIXELS OR PERCENTAGE :", "if ( value . ends With ( STR_ ) ) {", "value = value . substring ( NUM_ , value . length ( ) - NUM_ ) ; }", "else if ( value . ends With ( STR_ ) ) {", "value = value . substring ( NUM_ , value . length ( ) - NUM_ ) ; }", "return verify ( value , DIGITS , null ) ;", "case TYPE CHAR :", "return verify ( value , DIGITS | ABC , null , NUM_ , NUM_ ) ;", "case TYPE COLOR :", "if ( value . length ( ) == NUM_ ) {", "return false ; }", "if ( value . char At ( NUM_ ) != STR_ ) {", "return verify String Group ( value , COLOR STRINGS ) ; }", "else {", "return verify ( value . substring ( NUM_ ) , HEX , null , NUM_ , NUM_ ) ; }", "default :", "return true ; } }"]}
{"ids": "55269", "code": ["private int parse Streams ( String json , Set < Stream Info > stream Infos ) {", "try {", "JSON Parser parser = new JSON Parser ( ) ;", "JSON Array streams Array ;", "try {", "JSON Object root = ( JSON Object ) parser . parse ( json ) ;", "streams Array = ( JSON Array ) root . get ( STR_ ) ; }", "catch ( Class Cast Exception ex ) {", "LOGGER . warning ( STR_ ) ;", "streams Request Error ( stream Infos ) ;", "return - NUM_ ; }", "if ( streams Array == null ) {", "LOGGER . warning ( STR_ ) ;", "streams Request Error ( stream Infos ) ;", "return - NUM_ ; }", "for ( Object obj : streams Array ) {", "if ( obj instanceof JSON Object ) {", "Stream Info parsed Info = parse Stream ( ( JSON Object ) obj , stream Infos == null ) ;", "if ( parsed Info == null ) {", "LOGGER . warning ( STR_ + ( JSON Object ) obj ) ; }", "if ( stream Infos != null ) {", "stream Infos . remove ( parsed Info ) ; } }", "else {", "LOGGER . warning ( STR_ + obj ) ; } }", "if ( stream Infos != null ) {", "for ( Stream Info info : stream Infos ) {", "info . set Offline ( ) ; } }", "return streams Array . size ( ) ; }", "catch ( Parse Exception ex ) {", "LOGGER . warning ( STR_ + ex . get Localized Message ( ) ) ;", "streams Request Error ( stream Infos ) ;", "return - NUM_ ; } }"]}
{"ids": "84121", "code": ["public Str Tokenizer reset ( String input ) {", "reset ( ) ;", "if ( input != null ) {", "this . chars = input . to Char Array ( ) ; }", "else {", "this . chars = null ; }", "return this ; }"]}
{"ids": "36957", "code": ["public void remove Listener ( final I Visual Coverage Listener listener ) {", "listeners . remove ( listener ) ; }"]}
{"ids": "34171", "code": ["@ Objective C Name ( STR_ ) public boolean is Large Dialog Message ( Content Type content Type ) {", "switch ( content Type ) {", "case SERVICE :", "case SERVICE AVATAR :", "case SERVICE AVATAR REMOVED :", "case SERVICE CREATED :", "case SERVICE TITLE :", "case SERVICE LEAVE :", "case SERVICE REGISTERED :", "case SERVICE KICK :", "case SERVICE ADD :", "case SERVICE JOINED :", "case SERVICE CALL ENDED :", "case SERVICE CALL MISSED :", "case SERVICE ABOUT :", "case SERVICE TOPIC :", "return true ;", "default :", "return false ; } }"]}
{"ids": "87137", "code": ["public static boolean is Logging Behavior Enabled ( Logging Behavior behavior ) {", "synchronized ( logging Behaviors ) {", "return Facebook Sdk . is Debug Enabled ( ) && logging Behaviors . contains ( behavior ) ; } }"]}
{"ids": "80146", "code": ["private void on Attacked ( final Entity attacker ) {", "attackers . remove ( attacker ) ;", "attackers . add ( attacker ) ; }"]}
{"ids": "29995", "code": ["private void handle Disallow ( Parse State state , Robot Token token ) {", "if ( state . is Skip Agents ( ) ) {", "return ; }", "state . set Finished Agent Fields ( true ) ;", "if ( ! state . is Adding Rules ( ) ) {", "return ; }", "String path = token . get Data ( ) ;", "try {", "path = URL Decoder . decode ( path , STR_ ) ;", "if ( path . length ( ) == NUM_ ) {", "state . clear Rules ( ) ; }", "else {", "state . add Rule ( path , false ) ; } }", "catch ( Exception e ) {", "report Warning ( STR_ + path , state . get Url ( ) ) ; } }"]}
{"ids": "79715", "code": ["public void hide Column ( Object column Name ) {", "if ( column Name == null ) {", "return ; }", "for ( int i = NUM_ ; i < column Model . get Column Count ( ) ; i ++ ) {", "Table Column column = column Model . get Column ( i ) ;", "if ( column Name . equals ( column . get Header Value ( ) ) ) {", "hide Column ( column ) ;", "break ; } } }"]}
{"ids": "58146", "code": ["private boolean is ASCII Digit ( char c ) {", "return ( c >= STR_ && c <= STR_ ) ; }"]}
{"ids": "2738", "code": ["public static String separators To Windows ( String path ) {", "if ( path == null || path . index Of ( UNIX SEPARATOR ) == - NUM_ ) {", "return path ; }", "return path . replace ( UNIX SEPARATOR , WINDOWS SEPARATOR ) ; }"]}
{"ids": "8979", "code": ["public void accumulate All ( List < Tagged Log API Entity > entities ) throws Exception {", "for ( Tagged Log API Entity entity : entities ) {", "accumulate ( entity ) ; } }"]}
{"ids": "71631", "code": ["protected void print Identifier ( String identifier , String Builder ddl ) {", "ddl . append ( get Delimited Identifier ( identifier ) ) ; }"]}
{"ids": "679", "code": ["public static int darker ( int c ) {", "return rgba ( Math . max ( NUM_ , ( int ) ( scale * red ( c ) ) ) , Math . max ( NUM_ , ( int ) ( scale * green ( c ) ) ) , Math . max ( NUM_ , ( int ) ( scale * blue ( c ) ) ) , alpha ( c ) ) ; }"]}
{"ids": "73806", "code": ["static public Sdf Macro decode Instruction ( Sdf Buffer buff ) {", "Sdf Macro m ;", "if ( ( m = Channel Start . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Sdl Version . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Skeme Start . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Generate Trigger . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = End Sound . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Delay Sound . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Skip On Trigger . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Initiate Sound . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Mask Compare . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Load Modifier . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Branch To . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Play . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Four Byte Macro . match ( buff ) ) != null ) {", "return m ; }", "else if ( ( m = Two Byte Macro . match ( buff ) ) != null ) {", "return m ; }", "log . warn ( STR_ ) ;", "return null ; }"]}
{"ids": "87063", "code": ["public SIP Date ( long time Millis ) {", "java Cal = new Gregorian Calendar ( Time Zone . get Time Zone ( STR_ ) , Locale . get Default ( ) ) ;", "java . util . Date date = new java . util . Date ( time Millis ) ;", "java Cal . set Time ( date ) ;", "wkday = java Cal . get ( Calendar . DAY OF WEEK ) ;", "switch ( wkday ) {", "case Calendar . MONDAY :", "sip Wk Day = MON ;", "break ;", "case Calendar . TUESDAY :", "sip Wk Day = TUE ;", "break ;", "case Calendar . WEDNESDAY :", "sip Wk Day = WED ;", "break ;", "case Calendar . THURSDAY :", "sip Wk Day = THU ;", "break ;", "case Calendar . FRIDAY :", "sip Wk Day = FRI ;", "break ;", "case Calendar . SATURDAY :", "sip Wk Day = SAT ;", "break ;", "case Calendar . SUNDAY :", "sip Wk Day = SUN ;", "break ;", "default :", "Internal Error Handler . handle Exception ( STR_ + wkday ) ; }", "day = java Cal . get ( Calendar . DAY OF MONTH ) ;", "month = java Cal . get ( Calendar . MONTH ) ;", "switch ( month ) {", "case Calendar . JANUARY :", "sip Month = JAN ;", "break ;", "case Calendar . FEBRUARY :", "sip Month = FEB ;", "break ;", "case Calendar . MARCH :", "sip Month = MAR ;", "break ;", "case Calendar . APRIL :", "sip Month = APR ;", "break ;", "case Calendar . MAY :", "sip Month = MAY ;", "break ;", "case Calendar . JUNE :", "sip Month = JUN ;", "break ;", "case Calendar . JULY :", "sip Month = JUL ;", "break ;", "case Calendar . AUGUST :", "sip Month = AUG ;", "break ;", "case Calendar . SEPTEMBER :", "sip Month = SEP ;", "break ;", "case Calendar . OCTOBER :", "sip Month = OCT ;", "break ;", "case Calendar . NOVEMBER :", "sip Month = NOV ;", "break ;", "case Calendar . DECEMBER :", "sip Month = DEC ;", "break ;", "default :", "Internal Error Handler . handle Exception ( STR_ + month ) ; }", "year = java Cal . get ( Calendar . YEAR ) ;", "hour = java Cal . get ( Calendar . HOUR OF DAY ) ;", "minute = java Cal . get ( Calendar . MINUTE ) ;", "second = java Cal . get ( Calendar . SECOND ) ; }"]}
{"ids": "34801", "code": ["public static Type Mirror upper Bound ( Type Mirror type ) {", "do {", "if ( type instanceof Type Variable ) {", "Type Variable tvar = ( Type Variable ) type ;", "if ( tvar . get Upper Bound ( ) != null ) {", "type = tvar . get Upper Bound ( ) ; }", "else {", "break ; } }", "else if ( type instanceof Wildcard Type ) {", "Wildcard Type wc = ( Wildcard Type ) type ;", "if ( wc . get Extends Bound ( ) != null ) {", "type = wc . get Extends Bound ( ) ; }", "else {", "break ; } }", "else {", "break ; } }", "while ( true ) ;", "return type ; }"]}
{"ids": "30866", "code": ["public synchronized Object remove ( Object key ) {", "remove Blanks ( ) ;", "Weak Key Reference key Ref = new Weak Key Reference ( key ) ;", "Weak Reference ref = ( Weak Reference ) table . remove ( key Ref ) ;", "if ( ref == null ) return null ;", "return ref . get ( ) ; }"]}
{"ids": "58071", "code": ["public boolean remove Element ( Node s ) {", "if ( ! m mutable ) throw new Runtime Exception ( XSL Messages . create XPATH Message ( XPATH Error Resources . ER NODESET NOT MUTABLE , null ) ) ;", "if ( null == m map ) return false ;", "for ( int i = NUM_ ; i < m first Free ; i ++ ) {", "Node node = m map [ i ] ;", "if ( ( null != node ) && node . equals ( s ) ) {", "if ( i < m first Free - NUM_ ) System . arraycopy ( m map , i + NUM_ , m map , i , m first Free - i - NUM_ ) ;", "m first Free -- ;", "m map [ m first Free ] = null ;", "return true ; } }", "return false ; }"]}
{"ids": "3596", "code": ["@ Override public Inet Address address Local ( ) {", "Socket s = get Socket ( ) ;", "if ( s != null ) {", "return s . get Local Address ( ) ; }", "else {", "return null ; } }"]}
{"ids": "3809", "code": ["public boolean start Connection ( ) {", "State state = state . get ( ) ;", "if ( state . is Active ( ) ) {", "connection Count . increment And Get ( ) ;", "return true ; }", "long now = Current Time . current Time ( ) ;", "long last Fail Time = last Fail Time ;", "long recover Timeout = dynamic Recover Timeout . get ( ) ;", "if ( now < last Fail Time + recover Timeout ) {", "return false ; }", "int count ;", "do {", "count = connection Count . get ( ) ;", "if ( count > NUM_ ) {", "return false ; } }", "while ( ! connection Count . compare And Set ( count , count + NUM_ ) ) ;", "return true ; }"]}
{"ids": "43797", "code": ["public Abstract Nary Operator ( final Expr ... args ) {", "this ( Arrays . as List ( args ) ) ; }"]}
{"ids": "24255", "code": ["static boolean is Registered ( Object Name object Name ) {", "return mbean Server != null && mbean Server . is Registered ( object Name ) ; }"]}
{"ids": "22617", "code": ["public static int find Best Sample Size ( int actual Width , int actual Height , int desired Width , int desired Height ) {", "double wr = ( double ) actual Width / desired Width ;", "double hr = ( double ) actual Height / desired Height ;", "double ratio = Math . min ( wr , hr ) ;", "float n = NUM_ ;", "while ( ( n * NUM_ ) <= ratio ) {", "n *= NUM_ ; }", "return ( int ) n ; }"]}
{"ids": "37311", "code": ["public Socket Reader ( final Socket socket ) throws IO Exception {", "Preconditions . check Not Null ( socket , STR_ ) ;", "m Input Stream = new Buffered Input Stream ( socket . get Input Stream ( ) ) ; }"]}
{"ids": "40804", "code": ["private boolean move To Final Scroller Position ( Scroller scroller ) {", "scroller . force Finished ( true ) ;", "if ( is Horizontal Mode ( ) ) {", "int amount To Scroll = scroller . get Final X ( ) - scroller . get Curr X ( ) ;", "int future Scroll Offset = ( m Current Scroll Offset + amount To Scroll ) % m Selector Element Size ;", "int overshoot Adjustment = m Initial Scroll Offset - future Scroll Offset ;", "if ( overshoot Adjustment != NUM_ ) {", "if ( Math . abs ( overshoot Adjustment ) > m Selector Element Size / NUM_ ) {", "if ( overshoot Adjustment > NUM_ ) {", "overshoot Adjustment -= m Selector Element Size ; }", "else {", "overshoot Adjustment += m Selector Element Size ; } }", "amount To Scroll += overshoot Adjustment ;", "scroll By ( amount To Scroll , NUM_ ) ;", "return true ; } }", "else {", "int amount To Scroll = scroller . get Final Y ( ) - scroller . get Curr Y ( ) ;", "int future Scroll Offset = ( m Current Scroll Offset + amount To Scroll ) % m Selector Element Size ;", "int overshoot Adjustment = m Initial Scroll Offset - future Scroll Offset ;", "if ( overshoot Adjustment != NUM_ ) {", "if ( Math . abs ( overshoot Adjustment ) > m Selector Element Size / NUM_ ) {", "if ( overshoot Adjustment > NUM_ ) {", "overshoot Adjustment -= m Selector Element Size ; }", "else {", "overshoot Adjustment += m Selector Element Size ; } }", "amount To Scroll += overshoot Adjustment ;", "scroll By ( NUM_ , amount To Scroll ) ;", "return true ; } }", "return false ; }"]}
{"ids": "76927", "code": ["public void add Lon Line ( double min Lat , double max Lat , double lon ) {", "String name = STR_ + next Shape ;", "next Shape ++ ;", "b . append ( STR_ + name + STR_ ) ;", "double lat ;", "int steps = get Step Count ( min Lat , lon , max Lat , lon ) ;", "for ( lat = min Lat ; lat <= max Lat ; lat += ( max Lat - min Lat ) / steps ) {", "b . append ( STR_ + lat + STR_ + lon + STR_ ) ; }", "b . append ( STR_ + max Lat + STR_ + lon + STR_ ) ;", "lat -= ( max Lat - min Lat ) / NUM_ ;", "for ( ; lat >= min Lat ; lat -= ( max Lat - min Lat ) / steps ) {", "b . append ( STR_ + lat + STR_ + lon + STR_ ) ; }", "b . append ( STR_ ) ;", "b . append ( STR_ + name + STR_ ) ; }"]}
{"ids": "36158", "code": ["@ Override public double calculate K ( int [ ] x index , double [ ] x att , int [ ] y index , double [ ] y att ) {", "double result = NUM_ ;", "double tmp ;", "int xpos = x index . length - NUM_ ;", "int ypos = y index . length - NUM_ ;", "int zeros = dim ;", "while ( ( xpos >= NUM_ ) && ( ypos >= NUM_ ) ) {", "if ( x index [ xpos ] == y index [ ypos ] ) {", "tmp = x att [ xpos ] - y att [ ypos ] ;", "result += Math . exp ( - sigma * tmp * tmp ) ;", "xpos -- ;", "ypos -- ; }", "else if ( x index [ xpos ] > y index [ ypos ] ) {", "tmp = x att [ xpos ] ;", "result += Math . exp ( - sigma * tmp * tmp ) ;", "xpos -- ; }", "else {", "tmp = y att [ ypos ] ;", "result += Math . exp ( - sigma * tmp * tmp ) ;", "ypos -- ; }", "zeros -- ; }", "while ( xpos >= NUM_ ) {", "tmp = x att [ xpos ] ;", "result += Math . exp ( - sigma * tmp * tmp ) ;", "xpos -- ;", "zeros -- ; }", "while ( ypos >= NUM_ ) {", "tmp = y att [ ypos ] ;", "result += Math . exp ( - sigma * tmp * tmp ) ;", "ypos -- ;", "zeros -- ; }", "result += zeros ;", "return Math . pow ( result , degree ) ; }"]}
{"ids": "78876", "code": ["private float sweep ( float tan 1 X , float tan 1 Y , float tan 2 X , float tan 2 Y ) {", "final float minor Sweep = ( float ) Math . to Degrees ( NUM_ * ( Math . asin ( NUM_ * Geometry . distance ( tan 1 X , tan 1 Y , tan 2 X , tan 2 Y ) / m Scaled Touch Slop ) ) ) ;", "return NUM_ - minor Sweep ; }"]}
{"ids": "48093", "code": ["Sun Cert Path Builder Result ( Cert Path cert Path , Trust Anchor trust Anchor , Policy Node policy Tree , Public Key subject Public Key , Adjacency List adj List ) {", "super ( cert Path , trust Anchor , policy Tree , subject Public Key ) ;", "this . adj List = adj List ; }"]}
{"ids": "37215", "code": ["public static void attach ( final J Frame parent , final I Debugger debugger , final C Debug Event Notifier notifier ) {", "try {", "notifier . start ( ) ;", "debugger . connect ( ) ; }", "catch ( final Debug Exception Wrapper exception ) {", "notifier . stop ( ) ;", "C Utility Functions . log Exception ( exception ) ;", "final String inner Message = STR_ + STR_ ;", "final String inner Description = C Utility Functions . create Description ( STR_ , new String [ ] { STR_ } , new String [ ] { STR_ + STR_ } ) ;", "Navi Error Dialog . show ( parent , inner Message , inner Description , exception ) ; } }"]}
{"ids": "5627", "code": ["public boolean check Addr Pattern ( final String the Addr Pattern ) {", "return the Addr Pattern . equals ( addr Pattern ( ) ) ; }"]}
{"ids": "41823", "code": ["private View fill From Top ( int next Top ) {", "if ( DEBUG ) Log . i ( TAG , STR_ + next Top + M FIRST POSITION + m First Position ) ;", "m First Position = Math . min ( m First Position , m Selected Position ) ;", "m First Position = Math . min ( m First Position , m Item Count - NUM_ ) ;", "if ( m First Position < NUM_ ) {", "m First Position = NUM_ ; }", "m First Position -= m First Position % m Num Columns ;", "return fill Down ( m First Position , next Top ) ; }"]}
{"ids": "15744", "code": ["public static String SIT Info ( Enum Map < SIT , Enum Map < CIT , Boolean > > shp ) {", "String Builder result = new String Builder ( ) ;", "for ( SIT key : shp . key Set ( ) ) {", "result . append ( STR_ + key . to String ( ) + STR_ + CIT Info ( shp . get ( key ) ) + STR_ ) ; }", "return result . to String ( ) ; }"]}
{"ids": "26277", "code": ["public static Map < String , Object > update Binary File ( Dispatch Context dctx , Map < String , ? extends Object > context ) {", "Map < String , Object > result = null ;", "try {", "result = update Binary File Method ( dctx , context ) ; }", "catch ( Generic Service Exception e ) {", "return Service Util . return Error ( e . get Message ( ) ) ; }", "return result ; }"]}
{"ids": "3743", "code": ["public int read ( long file Offset , byte [ ] buffer , int offset , int length ) throws IO Exception {", "log . info ( STR_ + Long . to Hex String ( file Offset ) + STR_ + length + STR_ ) ;", "return file . read ( file Offset , buffer , offset , length ) ; }"]}
{"ids": "36467", "code": ["public boolean validate Current Step ( int current Step , int new Step ) {", "return true ; }"]}
{"ids": "2776", "code": ["@ Non Null protected static List < Rave Error > must Be True ( boolean input , @ Non Null Validation Context validation Context ) {", "return input ? Collections . < Rave Error > empty List ( ) : create New List ( new Rave Error ( validation Context , Rave Error Strings . MUST BE TRUE ERROR ) ) ; }"]}
{"ids": "57114", "code": ["@ Log Message Doc ( level = STR_ , message = STR_ , explanation = STR_ + STR_ , recommendation = Log Message Doc . REPORT CONTROLLER BUG ) public void queue Hint ( String store Name , Byte Array key , Versioned < byte [ ] > value ) {", "try {", "Hint Key hk = new Hint Key ( store Name , key ) ;", "hint Lock . lock ( ) ;", "try {", "boolean needed = ! hints . contains Key ( hk ) ;", "needed &= hints . doput ( hk , value ) ;", "if ( needed ) {", "hint Queue . add ( hk ) ;", "hints Available . signal ( ) ; } }", "finally {", "hint Lock . unlock ( ) ; } }", "catch ( Sync Exception e ) {", "logger . error ( STR_ + store Name , e ) ; } }"]}
{"ids": "53449", "code": ["public static DBID Var random Sample ( DBI Ds ids , Random Factory random ) {", "return random Sample ( ids , random . get Single Threaded Random ( ) ) ; }"]}
{"ids": "56309", "code": ["public void on Response ( Discovery Node node ) {", "boolean found = pending Nodes . remove ( node ) ;", "assert found : STR_ + node + STR_ ;", "latch . count Down ( ) ; }"]}
{"ids": "51344", "code": ["@ Override public synchronized boolean add ( E object ) {", "if ( element Count == element Data . length ) {", "grow By One ( ) ; }", "element Data [ element Count ++ ] = object ;", "mod Count ++ ;", "return true ; }"]}
{"ids": "26732", "code": ["private static long copy ( Input Stream from , Output Stream to ) throws IO Exception {", "byte [ ] buf = new byte [ Settings . BUFFER SIZE ] ;", "long total = NUM_ ;", "while ( true ) {", "int r = from . read ( buf ) ;", "if ( r == - NUM_ ) {", "break ; }", "to . write ( buf , NUM_ , r ) ;", "total += r ; }", "return total ; }"]}
{"ids": "14940", "code": ["public void add Value ( String value ) {", "if ( string Values == null ) {", "setup String Values ( ) ; }", "if ( ! string Values . contains ( value ) ) {", "string Values . add ( value ) ; } }"]}
{"ids": "1480", "code": ["public void write Raw Little Endian 32 ( final int value ) throws IO Exception {", "if ( buffer . remaining ( ) < NUM_ ) {", "throw new Out Of Space Exception ( buffer . position ( ) , buffer . limit ( ) ) ; }", "buffer . put Int ( value ) ; }"]}
{"ids": "31150", "code": ["private static URL [ ] path To UR Ls ( String path ) throws Malformed URL Exception {", "if ( path == null ) {", "return null ; }", "synchronized ( path To UR Ls Cache ) {", "Object [ ] v = ( Object [ ] ) path To UR Ls Cache . get ( path ) ;", "if ( v != null ) {", "return ( ( URL [ ] ) v [ NUM_ ] ) ; } }", "String Tokenizer st = new String Tokenizer ( path ) ;", "URL [ ] urls = new URL [ st . count Tokens ( ) ] ;", "for ( int i = NUM_ ; st . has More Tokens ( ) ; i ++ ) {", "urls [ i ] = new URL ( st . next Token ( ) ) ; }", "synchronized ( path To UR Ls Cache ) {", "path To UR Ls Cache . put ( path , new Object [ ] { urls , new Soft Reference ( path ) } ) ; }", "return urls ; }"]}
{"ids": "24516", "code": ["public static int hash 4 ( int hash , Object x , Object y , Object z , Object w ) {", "return NUM_ | ( hash + NUM_ * System . identity Hash Code ( x ) + NUM_ * System . identity Hash Code ( y ) + NUM_ * System . identity Hash Code ( z ) + NUM_ * System . identity Hash Code ( w ) ) ; }"]}
{"ids": "47306", "code": ["public long skip ( long n ) throws IO Exception {", "if ( n < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "ensure Open ( ) ;", "int max = ( int ) Math . min ( n , Integer . MAX VALUE ) ;", "int total = NUM_ ;", "while ( total < max ) {", "int len = max - total ;", "if ( len > b . length ) {", "len = b . length ; }", "len = read ( b , NUM_ , len ) ;", "if ( len == - NUM_ ) {", "reach EOF = true ;", "break ; }", "total += len ; }", "return total ; }"]}
{"ids": "57490", "code": ["private V do Put ( K kkey , V value , boolean only If Absent ) {", "Comparable < ? super K > key = comparable ( kkey ) ;", "for ( ; ; ) {", "Node < K , V > b = find Predecessor ( key ) ;", "Node < K , V > n = b . next ;", "for ( ; ; ) {", "if ( n != null ) {", "Node < K , V > f = n . next ;", "if ( n != b . next ) break ;", "Object v = n . value ;", "if ( v == null ) {", "n . help Delete ( b , f ) ;", "break ; }", "if ( v == n || b . value == null ) break ;", "int c = key . compare To ( n . key ) ;", "if ( c > NUM_ ) {", "b = n ;", "n = f ;", "continue ; }", "if ( c == NUM_ ) {", "if ( only If Absent || n . cas Value ( v , value ) ) return ( V ) v ;", "else break ; } }", "Node < K , V > z = new Node < K , V > ( kkey , value , n ) ;", "if ( ! b . cas Next ( n , z ) ) break ;", "int level = random Level ( ) ;", "if ( level > NUM_ ) insert Index ( z , level ) ;", "return null ; } } }"]}
{"ids": "70516", "code": ["public void add Fill Outside Line ( Fill Outside Line fill ) {", "m Fill Below Line . add ( fill ) ; }"]}
{"ids": "80110", "code": ["public void add ( final Position Change Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "10533", "code": ["private void rehash ( ) {", "int size = symbols . length ;", "int new Size = size + size ;", "if ( new Size > MAX TABLE SIZE ) {", "size = NUM_ ;", "Arrays . fill ( symbols , null ) ;", "Arrays . fill ( buckets , null ) ;", "dirty = true ;", "return ; }", "String [ ] old Syms = symbols ;", "Bucket [ ] old Buckets = buckets ;", "symbols = new String [ new Size ] ;", "buckets = new Bucket [ new Size > > NUM_ ] ;", "index Mask = new Size - NUM_ ;", "size Threshold = threshold Size ( new Size ) ;", "int count = NUM_ ;", "int max Coll = NUM_ ;", "for ( int i = NUM_ ; i < size ; ++ i ) {", "String symbol = old Syms [ i ] ;", "if ( symbol != null ) {", "++ count ;", "int index = hash To Index ( calc Hash ( symbol ) ) ;", "if ( symbols [ index ] == null ) {", "symbols [ index ] = symbol ; }", "else {", "int bix = ( index > > NUM_ ) ;", "Bucket new B = new Bucket ( symbol , buckets [ bix ] ) ;", "buckets [ bix ] = new B ;", "max Coll = Math . max ( max Coll , new B . length ( ) ) ; } } }", "size >>= NUM_ ;", "for ( int i = NUM_ ; i < size ; ++ i ) {", "Bucket b = old Buckets [ i ] ;", "while ( b != null ) {", "++ count ;", "String symbol = b . get Symbol ( ) ;", "int index = hash To Index ( calc Hash ( symbol ) ) ;", "if ( symbols [ index ] == null ) {", "symbols [ index ] = symbol ; }", "else {", "int bix = ( index > > NUM_ ) ;", "Bucket new B = new Bucket ( symbol , buckets [ bix ] ) ;", "buckets [ bix ] = new B ;", "max Coll = Math . max ( max Coll , new B . length ( ) ) ; }", "b = b . get Next ( ) ; } }", "longest Collision List = max Coll ;", "if ( count != size ) {", "throw new Error ( STR_ + size + STR_ + count + STR_ ) ; } }"]}
{"ids": "74804", "code": ["private void check Size ( final int i ) {", "if ( i >= max size ) {", "final int old size = max size ;", "max size += increment size ;", "if ( max size <= i ) {", "max size = i + increment size + NUM_ ; }", "final int [ ] temp = items ;", "items = new int [ max size ] ;", "System . arraycopy ( temp , NUM_ , items , NUM_ , old size ) ;", "increment size = increment Size ( increment size ) ; } }"]}
{"ids": "80703", "code": ["public Component Print Service ( Component c , Page Format format ) {", "set Page Format ( format ) ;", "set Printable ( this ) ;", "set Component ( c ) ;", "Rectangle component Bounds = c . get Bounds ( null ) ;", "set Size ( component Bounds . width , component Bounds . height ) ;", "set Scale ( NUM_ , NUM_ ) ; }"]}
{"ids": "57059", "code": ["@ Override public void reconcile Flow ( OF Match Reconcile ofm Rc In , Event Priority priority ) {", "if ( ofm Rc In == null ) return ;", "OF Match Reconcile my Ofm Rc = new OF Match Reconcile ( ofm Rc In ) ;", "flow Queue . offer ( my Ofm Rc , priority ) ;", "ctr Flow Reconcile Request . increment ( ) ;", "Date curr Time = new Date ( ) ;", "long delay = NUM_ ;", "if ( curr Time . after ( new Date ( last Reconcile Time . get Time ( ) + NUM_ ) ) ) {", "delay = NUM_ ; }", "else {", "delay = FLOW RECONCILE DELAY MILLISEC ; }", "flow Reconcile Task . reschedule ( delay , Time Unit . MILLISECONDS ) ;", "if ( logger . is Trace Enabled ( ) ) {", "logger . trace ( STR_ , my Ofm Rc . to String ( ) , flow Queue . size ( ) ) ; } }"]}
{"ids": "42083", "code": ["public void flush ( ) throws IO Exception {", "if ( writer != null ) {", "writer . flush ( ) ; }", "outstr . flush ( ) ; }"]}
{"ids": "26460", "code": ["@ Suppress Warnings ( STR_ ) protected synchronized V remove Internal ( Object key , boolean count Remove ) {", "if ( key == null ) {", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + this . name , module ) ; }", "Object nulled Key = from Key ( key ) ;", "Cache Line < V > old Cache Line ;", "V old Value ;", "if ( file Table != null ) {", "try {", "synchronized ( this ) {", "try {", "old Value = file Table . get ( nulled Key ) ; }", "catch ( IO Exception e ) {", "old Value = null ;", "throw e ; }", "file Table . remove ( nulled Key ) ;", "jdbm Mgr . commit ( ) ; } }", "catch ( IO Exception e ) {", "old Value = null ;", "Debug . log Error ( e , module ) ; }", "old Cache Line = memory Table . remove ( nulled Key ) ; }", "else {", "old Cache Line = memory Table . remove ( nulled Key ) ;", "old Value = old Cache Line != null ? old Cache Line . get Value ( ) : null ; }", "if ( old Cache Line != null ) {", "cancel ( old Cache Line ) ; }", "if ( old Value != null ) {", "note Removal ( ( K ) key , old Value ) ;", "if ( count Remove ) remove Hit Count . increment And Get ( ) ;", "return old Value ; }", "else {", "if ( count Remove ) remove Miss Count . increment And Get ( ) ;", "return null ; } }"]}
{"ids": "7319", "code": ["public void remove ( double value ) {", "if ( Double . is Na N ( value ) ) {", "return ; }", "int index = find Insert Index ( value ) ;", "if ( index == - NUM_ ) {", "throw new Illegal State Exception ( STR_ ) ; }", "Double value At Index = values . get ( index ) ;", "if ( ( value At Index != null ) && ( ! value At Index . equals ( value ) ) ) {", "throw new Illegal State Exception ( STR_ ) ; }", "values . remove ( index ) ; }"]}
{"ids": "47739", "code": ["void lightweight Paint ( Graphics g ) {", "super . lightweight Paint ( g ) ;", "paint Heavyweight Components ( g ) ; }"]}
{"ids": "59415", "code": ["private final void remove Channel ( String channel ) {", "channel = channel . to Lower Case ( ) ;", "synchronized ( channels ) {", "channels . remove ( channel ) ; } }"]}
{"ids": "63871", "code": ["public void add Change Listener ( Change Listener cl ) {", "if ( ! listeners . contains ( cl ) ) listeners . add ( cl ) ; }"]}
{"ids": "12964", "code": ["public static void expand Number ( String number String , Word Relation word Relation , Item token Item ) {", "int num Digits = number String . length ( ) ;", "if ( num Digits == NUM_ ) { }", "else if ( num Digits == NUM_ ) {", "expand Digits ( number String , word Relation , token Item ) ; }", "else if ( num Digits == NUM_ ) {", "expand 2 Digit Number ( number String , word Relation , token Item ) ; }", "else if ( num Digits == NUM_ ) {", "expand 3 Digit Number ( number String , word Relation , token Item ) ; }", "else if ( num Digits < NUM_ ) {", "expand Below 7 Digit Number ( number String , word Relation , token Item ) ; }", "else if ( num Digits < NUM_ ) {", "expand Below 10 Digit Number ( number String , word Relation , token Item ) ; }", "else if ( num Digits < NUM_ ) {", "expand Below 13 Digit Number ( number String , word Relation , token Item ) ; }", "else {", "expand Digits ( number String , word Relation , token Item ) ; } }"]}
{"ids": "59405", "code": ["private int measure Short ( int measure Spec ) {", "int result = NUM_ ;", "int spec Mode = Measure Spec . get Mode ( measure Spec ) ;", "int spec Size = Measure Spec . get Size ( measure Spec ) ;", "if ( spec Mode == Measure Spec . EXACTLY ) {", "result = spec Size ; }", "else {", "result = ( int ) ( NUM_ * m Radius + get Padding Top ( ) + get Padding Bottom ( ) + NUM_ ) ;", "if ( spec Mode == Measure Spec . AT MOST ) {", "result = Math . min ( result , spec Size ) ; } }", "return result ; }"]}
{"ids": "25069", "code": ["protected boolean can Trigger Walking ( ) {", "return false ; }"]}
{"ids": "49822", "code": ["public static String encrypt ECB ( final byte [ ] concatenated Hash Value , final Long turnover Counter , final Secret Key symmetric Key , int turn Over Counter Length In Bytes ) throws No Such Algorithm Exception , No Such Provider Exception , No Such Padding Exception , Invalid Key Exception , Illegal Block Size Exception , Bad Padding Exception {", "final Byte Buffer byte Buffer IV = Byte Buffer . allocate ( NUM_ ) ;", "byte Buffer IV . put ( concatenated Hash Value ) ;", "final byte [ ] IV = byte Buffer IV . array ( ) ;", "final Byte Buffer byte Buffer Data = Byte Buffer . allocate ( NUM_ ) ;", "byte Buffer Data . put Long ( turnover Counter ) ;", "final byte [ ] data = byte Buffer Data . array ( ) ;", "byte [ ] turn Over Counter Byte Rep = get 2 Complement Rep For Long ( turnover Counter , turn Over Counter Length In Bytes ) ;", "System . arraycopy ( turn Over Counter Byte Rep , NUM_ , data , NUM_ , turn Over Counter Byte Rep . length ) ;", "final Cipher cipher = Cipher . get Instance ( STR_ , STR_ ) ;", "cipher . init ( Cipher . ENCRYPT MODE , symmetric Key ) ;", "final byte [ ] intermediate Result = cipher . do Final ( IV ) ;", "final byte [ ] result = new byte [ data . length ] ;", "for ( int i = NUM_ ; i < data . length ; i ++ ) {", "result [ i ] = ( byte ) ( ( data [ i ] ) ^ ( intermediate Result [ i ] ) ) ; }", "final byte [ ] encrypted Turn Over Value = new byte [ turn Over Counter Length In Bytes ] ;", "System . arraycopy ( result , NUM_ , encrypted Turn Over Value , NUM_ , turn Over Counter Length In Bytes ) ;", "return Cash Box Utils . base 64 Encode ( encrypted Turn Over Value , false ) ; }"]}
{"ids": "6451", "code": ["private static boolean is Frost Wire Old ( String message Version ) {", "if ( message Version == null ) return false ;", "String current Version = Frost Wire Utils . get Frost Wire Version ( ) ;", "if ( current Version . equals ( message Version ) ) {", "return false ; }", "try {", "String [ ] fw Version Parts = current Version . split ( STR_ ) ;", "int fw major = Integer . parse Int ( fw Version Parts [ NUM_ ] ) ;", "int fw release = Integer . parse Int ( fw Version Parts [ NUM_ ] ) ;", "int fw service = Integer . parse Int ( fw Version Parts [ NUM_ ] ) ;", "String [ ] msg Version Parts = message Version . split ( STR_ ) ;", "int msg major = Integer . parse Int ( msg Version Parts [ NUM_ ] ) ;", "int msg release = Integer . parse Int ( msg Version Parts [ NUM_ ] ) ;", "int msg service = Integer . parse Int ( msg Version Parts [ NUM_ ] ) ;", "if ( fw major < msg major ) {", "return true ; }", "if ( fw major == msg major && fw release < msg release ) {", "return true ; }", "if ( fw major == msg major && fw release == msg release && fw service < msg service ) {", "return true ; } }", "catch ( Exception e ) {", "return false ; }", "return false ; }"]}
{"ids": "54516", "code": ["public void select Table 2 Column ( Index column ) {", "table 2 Columns . add ( column ) ; }"]}
{"ids": "25185", "code": ["public List < String > extract UR Ls ( final String text ) {", "if ( text == null || text . length ( ) == NUM_ ) return Collections . empty List ( ) ;", "final Array List < String > urls = new Array List < String > ( ) ;", "for ( final Entity entity : extract UR Ls With Indices ( text ) ) {", "urls . add ( entity . value ) ; }", "return urls ; }"]}
{"ids": "11600", "code": ["public void find And Undo ( Iterator it ) {", "while ( it . has Next ( ) ) {", "find And Undo ( it . next ( ) ) ; } }"]}
{"ids": "69555", "code": ["public static int [ ] scale Down Inside ( int in Width , int in Height , int max Width , int max Height ) {", "int scaled Width ;", "int scaled Height ;", "if ( in Width <= max Width && in Height <= max Height ) {", "scaled Width = in Width ;", "scaled Height = in Height ; }", "else {", "double width Ratio = ( double ) in Width / ( double ) max Width ;", "double height Ratio = ( double ) in Height / ( double ) max Height ;", "if ( width Ratio > height Ratio ) {", "scaled Width = max Width ;", "scaled Height = ( int ) Math . round ( ( double ) in Height / width Ratio ) ; }", "else {", "scaled Height = max Height ;", "scaled Width = ( int ) Math . round ( ( double ) in Width / height Ratio ) ; } }", "return new int [ ] { scaled Width , scaled Height } ; }"]}
{"ids": "21854", "code": ["public void rm ( String file Or Dir ) {", "String Builder buf = new String Builder ( ) ;", "String command = String . format ( Image Server Dialog Properties . get String ( STR_ ) , file Or Dir ) ;", "send Wait For ( command , default Timeout , prompts , buf ) ;", "log . debug ( buf . to String ( ) ) ; }"]}
{"ids": "27023", "code": ["private MGRS Components break MGRS String ( String MGRS String ) {", "int num digits ;", "int num letters ;", "int i = NUM_ ;", "int j = NUM_ ;", "long error code = MGRS NO ERROR ;", "int zone = NUM_ ;", "int [ ] letters = new int [ NUM_ ] ;", "long easting = NUM_ ;", "long northing = NUM_ ;", "int precision = NUM_ ;", "while ( i < MGRS String . length ( ) && MGRS String . char At ( i ) == STR_ ) {", "i ++ ; }", "j = i ;", "while ( i < MGRS String . length ( ) && Character . is Digit ( MGRS String . char At ( i ) ) ) {", "i ++ ; }", "num digits = i - j ;", "if ( num digits <= NUM_ ) if ( num digits > NUM_ ) {", "zone = Integer . parse Int ( MGRS String . substring ( j , i ) ) ;", "if ( ( zone < NUM_ ) || ( zone > NUM_ ) ) error code |= MGRS STRING ERROR ; }", "else error code |= MGRS STRING ERROR ;", "j = i ;", "while ( i < MGRS String . length ( ) && Character . is Letter ( MGRS String . char At ( i ) ) ) {", "i ++ ; }", "num letters = i - j ;", "if ( num letters == NUM_ ) {", "letters [ NUM_ ] = alphabet . index Of ( Character . to Upper Case ( MGRS String . char At ( j ) ) ) ;", "if ( ( letters [ NUM_ ] == LETTER I ) || ( letters [ NUM_ ] == LETTER O ) ) error code |= MGRS STRING ERROR ;", "letters [ NUM_ ] = alphabet . index Of ( Character . to Upper Case ( MGRS String . char At ( j + NUM_ ) ) ) ;", "if ( ( letters [ NUM_ ] == LETTER I ) || ( letters [ NUM_ ] == LETTER O ) ) error code |= MGRS STRING ERROR ;", "letters [ NUM_ ] = alphabet . index Of ( Character . to Upper Case ( MGRS String . char At ( j + NUM_ ) ) ) ;", "if ( ( letters [ NUM_ ] == LETTER I ) || ( letters [ NUM_ ] == LETTER O ) ) error code |= MGRS STRING ERROR ; }", "else error code |= MGRS STRING ERROR ;", "j = i ;", "while ( i < MGRS String . length ( ) && Character . is Digit ( MGRS String . char At ( i ) ) ) {", "i ++ ; }", "num digits = i - j ;", "if ( ( num digits <= NUM_ ) && ( num digits % NUM_ == NUM_ ) ) {", "int n ;", "double multiplier ;", "n = num digits / NUM_ ;", "precision = n ;", "if ( n > NUM_ ) {", "easting = Integer . parse Int ( MGRS String . substring ( j , j + n ) ) ;", "northing = Integer . parse Int ( MGRS String . substring ( j + n , j + n + n ) ) ;", "multiplier = Math . pow ( NUM_ , NUM_ - n ) ;", "easting *= multiplier ;", "northing *= multiplier ; }", "else {", "easting = NUM_ ;", "northing = NUM_ ; } }", "else error code |= MGRS STRING ERROR ;", "last error = error code ;", "if ( error code == MGRS NO ERROR ) return new MGRS Components ( zone , letters [ NUM_ ] , letters [ NUM_ ] , letters [ NUM_ ] , easting , northing , precision ) ;", "return null ; }"]}
{"ids": "1850", "code": ["public void put Map ( Map < String , List < String > > m ) {", "for ( String key : m . key Set ( ) ) {", "Sorted Set < String > vals = get ( key ) ;", "if ( vals == null ) {", "vals = new Tree Set < String > ( ) ;", "put ( key , vals ) ; }", "vals . add All ( m . get ( key ) ) ; } }"]}
{"ids": "67760", "code": ["protected void throw Parse Exception ( Parse Exception e ) throws Parse Exception {", "if ( locator != null ) {", "String element Location = STR_ ;", "if ( cur Handler != null ) {", "element Location += STR_ + cur Handler . q Name ; }", "String location = STR_ + String . value Of ( locator . get Line Number ( ) ) + STR_ + String . value Of ( locator . get Column Number ( ) ) + element Location + STR_ ;", "Log Utils . log Exception ( logger , Level . FINE , location , e ) ;", "throw new Parse Exception ( location + e . get Message ( ) , e ) ; }", "else {", "Log Utils . log Exception ( logger , Level . FINE , null , e ) ;", "throw e ; } }"]}
{"ids": "50976", "code": ["public void add Asset Listener ( @ Not Null Action Listener listener ) {", "my Asset Listeners . add ( listener ) ; }"]}
{"ids": "46625", "code": ["public Undoable Edit insert String ( int where , String str ) throws Bad Location Exception {", "if ( where > length ( ) || where < NUM_ ) {", "throw new Bad Location Exception ( STR_ , length ( ) ) ; }", "char [ ] chars = str . to Char Array ( ) ;", "replace ( where , NUM_ , chars , chars . length ) ;", "return new Insert Undo ( where , str . length ( ) ) ; }"]}
{"ids": "50025", "code": ["public static Java Pair RDD < Matrix Indexes , Matrix Block > to Matrix Java Pair RDD ( Java Spark Context sc , Matrix Block src , int brlen , int bclen ) throws DML Runtime Exception {", "long t 0 = DML Script . STATISTICS ? System . nano Time ( ) : NUM_ ;", "Linked List < Tuple 2 < Matrix Indexes , Matrix Block > > list = new Linked List < Tuple 2 < Matrix Indexes , Matrix Block > > ( ) ;", "if ( src . get Num Rows ( ) <= brlen && src . get Num Columns ( ) <= bclen ) {", "list . add Last ( new Tuple 2 < Matrix Indexes , Matrix Block > ( new Matrix Indexes ( NUM_ , NUM_ ) , src ) ) ; }", "else {", "boolean sparse = src . is In Sparse Format ( ) ;", "for ( int block Row = NUM_ ; block Row < ( int ) Math . ceil ( src . get Num Rows ( ) / ( double ) brlen ) ; block Row ++ ) for ( int block Col = NUM_ ; block Col < ( int ) Math . ceil ( src . get Num Columns ( ) / ( double ) bclen ) ; block Col ++ ) {", "int max Row = ( block Row * brlen + brlen < src . get Num Rows ( ) ) ? brlen : src . get Num Rows ( ) - block Row * brlen ;", "int max Col = ( block Col * bclen + bclen < src . get Num Columns ( ) ) ? bclen : src . get Num Columns ( ) - block Col * bclen ;", "Matrix Block block = new Matrix Block ( max Row , max Col , sparse ) ;", "int row offset = block Row * brlen ;", "int col offset = block Col * bclen ;", "src . slice Operations ( row offset , row offset + max Row - NUM_ , col offset , col offset + max Col - NUM_ , block ) ;", "Matrix Indexes indexes = new Matrix Indexes ( block Row + NUM_ , block Col + NUM_ ) ;", "list . add Last ( new Tuple 2 < Matrix Indexes , Matrix Block > ( indexes , block ) ) ; } }", "Java Pair RDD < Matrix Indexes , Matrix Block > result = sc . parallelize Pairs ( list ) ;", "if ( DML Script . STATISTICS ) {", "Statistics . acc Spark Parallelize Time ( System . nano Time ( ) - t 0 ) ;", "Statistics . inc Spark Parallelize Count ( NUM_ ) ; }", "return result ; }"]}
{"ids": "34119", "code": ["public static boolean is You Tube Url ( String url ) {", "if ( Text Utils . is Empty ( url ) ) {", "return false ; }", "Uri uri = Uri . parse ( url ) ;", "String authority = uri . get Authority ( ) ;", "if ( ! Text Utils . is Empty ( authority ) && authority . contains ( STR_ ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "83693", "code": ["public List < Namespace VO > find Namespaces ( String app Id , Env env , String cluster Name ) {", "List < Namespace DTO > namespaces = namespace API . find Namespace By Cluster ( app Id , env , cluster Name ) ;", "if ( namespaces == null || namespaces . size ( ) == NUM_ ) {", "throw new Bad Request Exception ( STR_ ) ; }", "List < Namespace VO > namespace V Os = new Linked List < > ( ) ;", "for ( Namespace DTO namespace : namespaces ) {", "Namespace VO namespace VO = null ;", "try {", "namespace VO = parse Namespace ( app Id , env , cluster Name , namespace ) ;", "namespace V Os . add ( namespace VO ) ; }", "catch ( Exception e ) {", "logger . error ( STR_ , app Id , env , cluster Name , namespace . get Namespace Name ( ) , e ) ;", "throw e ; } }", "return namespace V Os ; }"]}
{"ids": "27564", "code": ["void unlink ( Node < E > p , Node < E > trail ) {", "p . item = null ;", "trail . next = p . next ;", "if ( last == p ) last = trail ;", "if ( count . get And Decrement ( ) == capacity ) not Full . signal ( ) ; }"]}
{"ids": "33700", "code": ["public static void open Share Dialog ( Context context , String title , @ Suppress Warnings ( STR_ ) String uri , String share Text , String share Subject ) {", "Intent share = new Intent ( Intent . ACTION SEND ) ;", "share . set Type ( STR_ ) ;", "share . put Extra ( Intent . EXTRA TEXT , share Text ) ;", "share . put Extra ( Intent . EXTRA SUBJECT , share Subject ) ;", "if ( ! Text Utils . is Empty ( uri ) ) {", "share . set Type ( STR_ ) ;", "share . put Extra ( Intent . EXTRA STREAM , Uri . parse ( uri ) ) ; }", "context . start Activity ( Intent . create Chooser ( share , title ) ) ; }"]}
{"ids": "80448", "code": ["public void add Matching ( final Conversation States state , final String trigger String , final Expression Matcher matcher , final Chat Condition condition , boolean secondary , final Conversation States next State , final String reply , final Chat Action action ) {", "Collection < Expression > trigger Expressions = create Unique Trigger Expressions ( state , Arrays . as List ( trigger String ) , matcher , condition , reply , action ) ;", "add ( trigger Expressions , state , condition , secondary , next State , reply , action ) ; }"]}
{"ids": "80440", "code": ["boolean drop Items ( final Player player , int item Count ) {", "boolean result = false ;", "final Item Collection items Todo = new Item Collection ( ) ;", "items Todo . add From Quest State String ( player . get Quest ( quest Slot ) ) ;", "if ( player . drop ( item Name , item Count ) ) {", "if ( items Todo . remove Item ( item Name , item Count ) ) {", "result = true ; } }", "else {", "final List < Item > items = player . get All Equipped ( item Name ) ;", "if ( items != null ) {", "for ( final Item item : items ) {", "final int quantity = item . get Quantity ( ) ;", "final int n = Math . min ( item Count , quantity ) ;", "if ( player . drop ( item Name , n ) ) {", "item Count -= n ;", "if ( items Todo . remove Item ( item Name , n ) ) {", "result = true ; } }", "if ( item Count == NUM_ ) {", "result = true ;", "break ; } } } }", "if ( result ) {", "player . set Quest ( quest Slot , items Todo . to String For Quest State ( ) ) ; }", "return result ; }"]}
{"ids": "46198", "code": ["public void encode Octet String ( byte tb [ ] , int tag , int tboffset , int length ) throws Encode Exception {", "encode Byte ( tag ) ;", "encode Length ( length ) ;", "if ( length > NUM_ ) {", "ensure Free Bytes ( length ) ;", "System . arraycopy ( tb , tboffset , buf , offset , length ) ;", "offset += length ; } }"]}
{"ids": "63072", "code": ["private void swap Blocks ( int from , int second , int to ) {", "int len 1 = second - from , len 2 = to - second + NUM_ ;", "if ( len 1 == NUM_ || len 2 == NUM_ ) {", "return ; }", "if ( len 1 < temp . length ) {", "System . arraycopy ( data , from , temp , NUM_ , len 1 ) ;", "System . arraycopy ( data , second , data , from , len 2 ) ;", "System . arraycopy ( temp , NUM_ , data , from + len 2 , len 1 ) ;", "return ; }", "else if ( len 2 < temp . length ) {", "System . arraycopy ( data , second , temp , NUM_ , len 2 ) ;", "System . arraycopy ( data , from , data , from + len 2 , len 1 ) ;", "System . arraycopy ( temp , NUM_ , data , from , len 2 ) ;", "return ; }", "reverse Block ( from , second - NUM_ ) ;", "reverse Block ( second , to ) ;", "reverse Block ( from , to ) ; }"]}
{"ids": "69400", "code": ["private static long total Size ( Map < String , Long > rel Path To Size ) {", "long total = NUM_ ;", "for ( Long l : rel Path To Size . values ( ) ) {", "total += l ; }", "return total ; }"]}
{"ids": "76731", "code": ["public Pattern Tokenizer ( Attribute Factory factory , Pattern pattern , int group ) {", "super ( factory ) ;", "this . group = group ;", "matcher = pattern . matcher ( STR_ ) ;", "if ( group >= NUM_ && group > matcher . group Count ( ) ) {", "throw new Illegal Argument Exception ( STR_ + matcher . group Count ( ) + STR_ ) ; } }"]}
{"ids": "30366", "code": ["@ Override public double total Estimated Quantity For Previous R Es ( final Long wo Activity Id , Long estimate Id , final Long activity Id , final Work Order work Order ) {", "if ( estimate Id == null ) estimate Id = - NUM_ ;", "Object [ ] params = null ;", "Double est Quantity = null ;", "params = new Object [ ] { estimate Id , work Order , work Order , wo Activity Id , activity Id } ;", "est Quantity = ( Double ) generic Service . find By Named Query ( STR_ , params ) ;", "Double est Quantity RE = null ;", "params = new Object [ ] { estimate Id , work Order , work Order , activity Id } ;", "est Quantity RE = ( Double ) generic Service . find By Named Query ( STR_ , params ) ;", "if ( est Quantity != null && est Quantity RE != null ) est Quantity = est Quantity + est Quantity RE ;", "if ( est Quantity == null && est Quantity RE != null ) est Quantity = est Quantity RE ;", "if ( est Quantity == null ) return NUM_ ;", "else return est Quantity . double Value ( ) ; }"]}
{"ids": "78951", "code": ["protected long write Data To File ( Node Holder node Holder , File Channel channel ) throws Carbon Data Writer Exception {", "byte [ ] [ ] compressed Index = node Holder . get Compressed Index ( ) ;", "byte [ ] [ ] compressed Index Map = node Holder . get Compressed Index Map ( ) ;", "byte [ ] [ ] compressed Data Index = node Holder . get Compressed Data Index ( ) ;", "int index Block Size = NUM_ ;", "int index = NUM_ ;", "for ( int i = NUM_ ; i < node Holder . get Key Block Index Length ( ) . length ; i ++ ) {", "index Block Size += node Holder . get Key Block Index Length ( ) [ index ++ ] + Carbon Common Constants . INT SIZE IN BYTE ; }", "for ( int i = NUM_ ; i < node Holder . get Data Index Map Length ( ) . length ; i ++ ) {", "index Block Size += node Holder . get Data Index Map Length ( ) [ i ] ; }", "Byte Buffer byte Buffer = Byte Buffer . allocate ( node Holder . get Key Array ( ) . length + node Holder . get Data Array ( ) . length + index Block Size ) ;", "long offset = NUM_ ;", "try {", "offset = channel . size ( ) ;", "byte Buffer . put ( node Holder . get Key Array ( ) ) ;", "byte Buffer . put ( node Holder . get Data Array ( ) ) ;", "Byte Buffer buffer 1 = null ;", "for ( int i = NUM_ ; i < compressed Index . length ; i ++ ) {", "buffer 1 = Byte Buffer . allocate ( node Holder . get Key Block Index Length ( ) [ i ] ) ;", "buffer 1 . put Int ( compressed Index [ i ] . length ) ;", "buffer 1 . put ( compressed Index [ i ] ) ;", "if ( compressed Index Map [ i ] . length > NUM_ ) {", "buffer 1 . put ( compressed Index Map [ i ] ) ; }", "buffer 1 . rewind ( ) ;", "byte Buffer . put ( buffer 1 . array ( ) ) ; }", "for ( int i = NUM_ ; i < compressed Data Index . length ; i ++ ) {", "byte Buffer . put ( compressed Data Index [ i ] ) ; }", "byte Buffer . flip ( ) ;", "channel . write ( byte Buffer ) ; }", "catch ( IO Exception exception ) {", "throw new Carbon Data Writer Exception ( STR_ , exception ) ; }", "return offset ; }"]}
{"ids": "35769", "code": ["public boolean eval ( ) {", "if ( source File Sets . size ( ) == NUM_ && source Resources . size ( ) == NUM_ && source File == null ) {", "throw new Build Exception ( STR_ ) ; }", "if ( ( source File Sets . size ( ) > NUM_ || source Resources . size ( ) > NUM_ ) && source File != null ) {", "throw new Build Exception ( STR_ ) ; }", "if ( urlbase == null ) {", "throw new Build Exception ( STR_ ) ; }", "if ( source File != null && ! source File . exists ( ) ) {", "throw new Build Exception ( source File . get Absolute Path ( ) + STR_ ) ; }", "boolean up To Date = true ;", "if ( source File != null ) {", "Resource file Resource = new File Resource ( source File ) ;", "up To Date = is Up To Date ( file Resource ) ; }", "if ( up To Date ) {", "Enumeration e = source File Sets . elements ( ) ;", "while ( up To Date && e . has More Elements ( ) ) {", "File Set fs = ( File Set ) e . next Element ( ) ;", "Iterator it = fs . iterator ( ) ;", "while ( up To Date && it . has Next ( ) ) {", "Resource r = ( Resource ) it . next ( ) ;", "up To Date = is Up To Date ( r ) ; } } }", "if ( up To Date ) {", "Resource [ ] r = source Resources . list Resources ( ) ;", "for ( int i = NUM_ ; up To Date && i < r . length ; i ++ ) {", "up To Date = is Up To Date ( r [ i ] ) ; } }", "return up To Date ; }"]}
{"ids": "23251", "code": ["private int handle Aggregation Packet ( Buffer input , Buffer output ) {", "byte [ ] buffer Data = ( byte [ ] ) input . get Data ( ) ;", "if ( aggregation Positon + NUM_ >= buffer Data . length ) {", "aggregation Positon = NUM_ ;", "output . set Discard ( true ) ;", "return BUFFER PROCESSED OK ; }", "int nalu size = ( ( ( buffer Data [ aggregation Positon ] & NUM_ ) << NUM_ ) | ( buffer Data [ aggregation Positon + NUM_ ] & NUM_ ) ) ;", "aggregation Positon += NUM_ ;", "if ( aggregation Positon + nalu size > buffer Data . length ) {", "aggregation Positon = NUM_ ;", "return BUFFER PROCESSED FAILED ; }", "extract Nal Unit Header ( aggregation Positon , input ) ;", "if ( m Nal Unit Header . is Single Nal Unit Packet ( ) ) {", "byte [ ] data = new byte [ nalu size ] ;", "System . arraycopy ( buffer Data , aggregation Positon , data , NUM_ , nalu size ) ;", "aggregation Positon += nalu size ;", "output . set Data ( data ) ;", "output . set Length ( data . length ) ;", "output . set Offset ( NUM_ ) ;", "output . set Timestamp ( input . get Timestamp ( ) ) ;", "output . set Sequence Number ( input . get Sequence Number ( ) ) ;", "output . set Video Orientation ( input . get Video Orientation ( ) ) ;", "output . set Format ( input . get Format ( ) ) ;", "output . set Flags ( input . get Flags ( ) ) ;", "return INPUT BUFFER NOT CONSUMED ; }", "aggregation Positon = NUM_ ;", "return BUFFER PROCESSED FAILED ; }"]}
{"ids": "48570", "code": ["protected int decode Line Prefix ( Pushback Input Stream in Stream , Output Stream out Stream ) throws IO Exception {", "int i ;", "int n Len , n Seq ;", "byte xtmp [ ] ;", "int c ;", "crc . value = NUM_ ;", "while ( true ) {", "c = in Stream . read ( tmp , NUM_ , NUM_ ) ;", "if ( c == - NUM_ ) {", "throw new CE Stream Exhausted ( ) ; }", "if ( tmp [ NUM_ ] == STR_ ) {", "break ; } }", "line And Seq . reset ( ) ;", "decode Atom ( in Stream , line And Seq , NUM_ ) ;", "xtmp = line And Seq . to Byte Array ( ) ;", "n Len = xtmp [ NUM_ ] & NUM_ ;", "n Seq = xtmp [ NUM_ ] & NUM_ ;", "if ( n Seq != sequence ) {", "throw new CE Format Exception ( STR_ ) ; }", "sequence = ( sequence + NUM_ ) & NUM_ ;", "return ( n Len ) ; }"]}
{"ids": "75005", "code": ["protected void update Cached AWT Sizes ( final Dimension min , final Dimension pref , final Dimension max ) {", "assert Event Queue . is Dispatch Thread ( ) ;", "if ( verbose Size Layout ) {", "System . err . println ( STR_ + min + STR_ + pref + STR_ + max ) ; }", "last Validated AWT Time = ++ current AWT Time ;", "boolean must Notify ;", "synchronized ( this ) {", "must Notify = cached Sizes Initialized == NUM_ ;", "if ( ! must Notify ) {", "must Notify = ! ( min . equals ( cached Min Size ) && pref . equals ( cached Pref Size ) && max . equals ( cached Max Size ) ) ; }", "if ( cached Sizes Initialized == NUM_ ) {", "cached Sizes Initialized = NUM_ ; }", "cached Min Size = min ;", "cached Pref Size = pref ;", "cached Max Size = max ;", "if ( INITIAL CLIENT AREA WORKAROUND && initial Client Area != null ) {", "initial Client Area . width = cached Pref Size . width ;", "initial Client Area . height = cached Pref Size . height ; } }", "if ( must Notify ) {", "final int on Behalf AWT Time = last Validated AWT Time ;", "Threading Handler . get Instance ( ) . async Exec ( display , null ) ; } }"]}
{"ids": "66258", "code": ["public boolean is Decimal Point ( ) {", "if ( m decimal Point == null ) {", "Decimal Format Symbols dfs = new Decimal Format Symbols ( m locale ) ;", "m decimal Point = new Boolean ( dfs . get Decimal Separator ( ) == STR_ ) ; }", "return m decimal Point . boolean Value ( ) ; }"]}
{"ids": "10905", "code": ["public void remove Layer ( Layer layer ) {", "if ( layer != null && layer . is Removable ( ) ) {", "List < Layer > current Layers = get Layer List ( ) ;", "current Layers . remove ( layer ) ;", "set Layer List ( current Layers ) ; }", "else {", "if ( layer != null ) {", "logger . warning ( STR_ + layer . get Name ( ) + STR_ ) ;", "throw new com . bbn . openmap . util . Handle Error ( STR_ + layer . get Name ( ) + STR_ ) ; } } }"]}
{"ids": "4587", "code": ["public Option [ ] find All Option Types ( final Class option Class ) {", "Check . not Null ( option Class , STR_ ) ;", "return find All Option Types ( new Class [ ] { option Class } ) ; }"]}
{"ids": "4987", "code": ["public int via padstack count ( ) {", "return via padstacks . size ( ) ; }"]}
{"ids": "66078", "code": ["public static boolean is Earlier Transaction ( M Cost Detail cd , int C Acct Schema ID , int M Cost Type ID , int M Cost Element ID , String costing Level ) {", "M Transaction trx = new M Transaction ( cd . get Ctx ( ) , cd . get M Transaction ID ( ) , cd . get Trx Name ( ) ) ;", "M Cost Detail last cd = get Last Transaction ( trx , C Acct Schema ID , M Cost Type ID , M Cost Element ID , costing Level ) ;", "if ( last cd == null ) return false ;", "if ( cd . get Seq No ( ) <= last cd . get Seq No ( ) && cd . get M Transaction ID ( ) != last cd . get M Transaction ID ( ) ) {", "return true ; }", "return false ; }"]}
{"ids": "48532", "code": ["private void draw Translated Rendered Image ( Rendered Image img , Rectangle region , int i 2 u Trans X , int i 2 u Trans Y ) {", "int tile Grid X Offset = img . get Tile Grid X Offset ( ) ;", "int tile Grid Y Offset = img . get Tile Grid Y Offset ( ) ;", "int tile Width = img . get Tile Width ( ) ;", "int tile Height = img . get Tile Height ( ) ;", "int min Tile X = get Tile Index ( region . x , tile Grid X Offset , tile Width ) ;", "int min Tile Y = get Tile Index ( region . y , tile Grid Y Offset , tile Height ) ;", "int max Tile X = get Tile Index ( region . x + region . width - NUM_ , tile Grid X Offset , tile Width ) ;", "int max Tile Y = get Tile Index ( region . y + region . height - NUM_ , tile Grid Y Offset , tile Height ) ;", "Color Model color Model = img . get Color Model ( ) ;", "Rectangle tile Rect = new Rectangle ( ) ;", "for ( int ty = min Tile Y ; ty <= max Tile Y ; ty ++ ) {", "for ( int tx = min Tile X ; tx <= max Tile X ; tx ++ ) {", "Raster raster = img . get Tile ( tx , ty ) ;", "tile Rect . x = tx * tile Width + tile Grid X Offset ;", "tile Rect . y = ty * tile Height + tile Grid Y Offset ;", "tile Rect . width = tile Width ;", "tile Rect . height = tile Height ;", "clip To ( tile Rect , region ) ;", "Writable Raster w Raster = null ;", "if ( raster instanceof Writable Raster ) {", "w Raster = ( Writable Raster ) raster ; }", "else {", "w Raster = Raster . create Writable Raster ( raster . get Sample Model ( ) , raster . get Data Buffer ( ) , null ) ; }", "w Raster = w Raster . create Writable Child ( tile Rect . x , tile Rect . y , tile Rect . width , tile Rect . height , NUM_ , NUM_ , null ) ;", "Buffered Image buf Img = new Buffered Image ( color Model , w Raster , color Model . is Alpha Premultiplied ( ) , null ) ;", "copy Image ( buf Img , tile Rect . x + i 2 u Trans X , tile Rect . y + i 2 u Trans Y , NUM_ , NUM_ , tile Rect . width , tile Rect . height , null , null ) ; } } }"]}
{"ids": "78667", "code": ["public void add Out Of Context Message ( Consensus Message m ) {", "out Of Context Lock . lock ( ) ;", "if ( m . get Type ( ) == Message Factory . PROPOSE ) {", "Logger . println ( STR_ + m ) ;", "out Of Context Proposes . put ( m . get Number ( ) , m ) ; }", "else {", "List < Consensus Message > messages = out Of Context . get ( m . get Number ( ) ) ;", "if ( messages == null ) {", "messages = new Linked List < Consensus Message > ( ) ;", "out Of Context . put ( m . get Number ( ) , messages ) ; }", "Logger . println ( STR_ + m ) ;", "messages . add ( m ) ; }", "out Of Context Lock . unlock ( ) ; }"]}
{"ids": "70054", "code": ["private long calculate Capacity ( long minimum Capacity ) {", "long new Capacity = Math . min ( Math . max ( capacity , NUM_ ) , minimum Capacity ) ;", "while ( new Capacity < Math . min ( minimum Capacity , max Capacity ) ) {", "new Capacity <<= NUM_ ; }", "return Math . min ( new Capacity , max Capacity ) ; }"]}
{"ids": "31057", "code": ["protected Object create Resource ( ) throws Resource Unavailable Exception {", "Object resource = create ( ) ;", "freed . add ( resource ) ;", "num Created ++ ;", "return ( resource ) ; }"]}
{"ids": "14351", "code": ["public void upgrade ( ) throws Exception {", "if ( ! check Upgrade Preconditions ( ) ) {", "return ; }", "backup Manager . create Open DJ Backup ( ) ;", "try ( Buffered Writer out = new Buffered Writer ( new File Writer ( upgrade Marker ) ) ) {", "out . write ( current Version . to String ( ) ) ;", "out . write ( STR_ ) ; }", "if ( current Version . is Older Than ( DJ 245 VERSION ) ) {", "backup File ( STR_ ) ;", "backup File ( STR_ ) ;", "backup File ( STR_ ) ;", "unpack Zip File ( true ) ;", "call Old DJ Upgrade ( ) ; }", "else {", "unpack Zip File ( false ) ;", "if ( current Version . equals ( DJ 246 VERSION ) ) {", "try {", "File bad Schema = new File ( install Root + File . separator + STR_ + File . separator + STR_ + File . separator + STR_ ) ;", "delete ( bad Schema ) ; }", "catch ( Runtime Exception e ) { }", "File good Schema = new File ( servlet Ctx . get Real Path ( File . separator + STR_ + File . separator + STR_ + File . separator + STR_ + File . separator + STR_ + File . separator + STR_ ) ) ;", "File move To = new File ( install Root + File . separator + STR_ + File . separator + STR_ + File . separator + STR_ ) ;", "copy ( good Schema . to Path ( ) , move To . to Path ( ) ) ; }", "int ret = call DJ Upgrade Mechanism ( ) ;", "if ( ret == NUM_ ) {", "message ( STR_ ) ;", "delete ( upgrade Marker ) ;", "final String lock File = Lock File Manager . get Server Lock File Name ( ) ;", "Lock File Manager . release Lock ( lock File , new String Builder ( ) ) ; }", "else {", "throw new Upgrade Exception ( STR_ + ret ) ; } } }"]}
{"ids": "84865", "code": ["public static final Optional < File > find Steam VR Manifest ( final Array List < File > indexed Steam Folders ) {", "for ( final File f : indexed Steam Folders ) {", "final File current File = new File ( f . get Absolute Path ( ) + Steam Constants . STEAM VR APPS MANIFEST FILE LOCATION ) ;", "if ( current File . exists ( ) ) return Optional . of Nullable ( current File ) ; }", "return Optional . empty ( ) ; }"]}
{"ids": "49644", "code": ["private static boolean is Close ( float value , float target Value ) {", "return Math . abs ( value - target Value ) < NUM_ ; }"]}
{"ids": "5626", "code": ["public int size ( ) {", "return my Tcp Clients . size ( ) ; }"]}
{"ids": "65558", "code": ["public static M Movement Cart Bean add To Movement Cart ( Properties ctx , Stock Movement Bean bean , M Movement Cart Bean cart Bean , boolean is Sales , boolean if Add ) throws Operation Exception , Product Not Found Exception , Product Not On Price List Exception {", "Array List < Item Bean > old Items ;", "if ( cart Bean == null ) {", "cart Bean = new M Movement Cart Bean ( ) ;", "old Items = new Array List < Item Bean > ( ) ; }", "else {", "old Items = cart Bean . get Items ( ) ; }", "Array List < Item Bean > old Items Clone = ( Array List ) old Items . clone ( ) ;", "Array List items To Be Added = get M Movement Items ( ctx , bean ) ;", "old Items = add To M Movement List ( ctx , old Items Clone , items To Be Added , if Add ) ;", "Integer price List Id = POS Terminal Manager . get Price List Id ( ctx , is Sales ) ;", "old Items = set M Movement Item Costs ( ctx , price List Id , old Items , is Sales ) ;", "cart Bean . set Items ( old Items ) ;", "cart Bean . set Pricelist Id ( price List Id ) ;", "return cart Bean ; }"]}
{"ids": "34040", "code": ["private static List < Field > filter Field List ( List < Field > fields , Class < ? > filter Class ) {", "List < Field > filtered Fields = new Linked List < > ( ) ;", "for ( Field f : fields ) {", "if ( ( filter Class == null ) || filter Class . is Assignable From ( f . get Type ( ) ) ) {", "filtered Fields . add ( f ) ; } }", "return filtered Fields ; }"]}
{"ids": "85468", "code": ["protected Simple Java File Object ( URI uri , Kind kind ) {", "uri . get Class ( ) ;", "kind . get Class ( ) ;", "if ( uri . get Path ( ) == null ) throw new Illegal Argument Exception ( STR_ + uri ) ;", "this . uri = uri ;", "this . kind = kind ; }"]}
{"ids": "30453", "code": ["public int increment ( int val ) {", "if ( val < NUM_ ) {", "return decrement ( - val ) ; }", "lock . lock ( ) ;", "int new Value = ( value += val ) ;", "lock . unlock ( ) ;", "return new Value ; }"]}
{"ids": "66876", "code": ["protected void release Internal ( ) {", "Context Translator . pts 1 cfa map = null ;", "Context Translator . objs 1 cfa map = null ; }"]}
{"ids": "44554", "code": ["public static void add Constraint Violations RDF ( List < Constraint Violation > cvs , Model result , boolean create Source ) {", "for ( Constraint Violation cv : cvs ) {", "Resource r = result . create Resource ( SPIN . Constraint Violation ) ;", "String message = cv . get Message ( ) ;", "if ( message != null && message . length ( ) > NUM_ ) {", "r . add Property ( RDFS . label , message ) ; }", "if ( cv . get Root ( ) != null ) {", "r . add Property ( SPIN . violation Root , cv . get Root ( ) ) ; }", "r . add Property ( SPIN . violation Level , cv . get Level ( ) ) ;", "for ( Simple Property Path path : cv . get Paths ( ) ) {", "if ( path instanceof Object Property Path ) {", "r . add Property ( SPIN . violation Path , path . get Predicate ( ) ) ; }", "else {", "Resource p = result . create Resource ( SP . Reverse Path ) ;", "p . add Property ( SP . path , path . get Predicate ( ) ) ;", "r . add Property ( SPIN . violation Path , p ) ; } }", "if ( create Source && cv . get Source ( ) != null ) {", "r . add Property ( SPIN . violation Source , cv . get Source ( ) ) ; }", "if ( cv . get Value ( ) != null ) {", "r . add Property ( SPIN . violation Value , cv . get Value ( ) ) ; } } }"]}
{"ids": "63258", "code": ["public Page copy ( long version ) {", "Page new Page = create ( map , version , keys , values , children , total Count , get Memory ( ) ) ;", "remove Page ( ) ;", "new Page . cached Compare = cached Compare ;", "return new Page ; }"]}
{"ids": "40271", "code": ["public boolean start Busytone ( final String busytone Uri Type ) {", "if ( busytone Uri Type . is Empty ( ) ) {", "return false ; }", "try {", "Log . d ( TAG , STR_ + busytone Uri Type ) ;", "if ( m Busytone != null ) {", "if ( m Busytone . is Playing ( ) ) {", "Log . d ( TAG , STR_ ) ;", "return false ; }", "else {", "stop Busytone ( ) ; } }", "Uri busytone Uri ;", "Map data = new Hash Map < String , Object > ( ) ;", "data . put ( STR_ , STR_ ) ;", "if ( busytone Uri Type . equals ( STR_ ) ) {", "m Busytone = new my Tone Generator ( my Tone Generator . BUSY ) ;", "m Busytone . start Play ( data ) ;", "return true ; }", "else {", "busytone Uri = get Busytone Uri ( busytone Uri Type ) ;", "if ( busytone Uri == null ) {", "Log . d ( TAG , STR_ ) ;", "return false ; } }", "m Busytone = new my Media Player ( ) ;", "data . put ( STR_ , busytone Uri ) ;", "data . put ( STR_ , false ) ;", "data . put ( STR_ , Audio Manager . STREAM VOICE CALL ) ;", "set Media Player Events ( ( Media Player ) m Busytone , STR_ ) ;", "m Busytone . start Play ( data ) ;", "return true ; }", "catch ( Exception e ) {", "Log . d ( TAG , STR_ ) ;", "Log . d ( TAG , e . get Message ( ) ) ;", "return false ; } }"]}
{"ids": "54703", "code": ["private String move To Folder ( final String file , final String folder ) {", "final File source = new File ( file ) ;", "final File destination = new File ( folder + File . separator + source . get Name ( ) ) ;", "Log . i ( TAG , file + STR_ + destination . get Absolute Path ( ) ) ;", "try {", "File Utils . move File ( source , destination ) ; }", "catch ( final IO Exception e ) {", "Log . e ( TAG , STR_ ) ; }", "return destination . get Absolute Path ( ) ; }"]}
{"ids": "15281", "code": ["public void put All ( Map m ) {", "Set keys = m . key Set ( ) ;", "for ( Iterator iter = keys . iterator ( ) ; iter . has Next ( ) ; ) {", "Object key = iter . next ( ) ;", "put ( key , m . get ( key ) ) ; } }"]}
{"ids": "38033", "code": ["public void read Old Format ( Reader reader ) throws Exception {", "Stream Tokenizer tokenizer ;", "int current Token ;", "double first Index , second Index , weight ;", "tokenizer = new Stream Tokenizer ( reader ) ;", "initialize ( ) ;", "tokenizer . comment Char ( STR_ ) ;", "tokenizer . eol Is Significant ( true ) ;", "while ( Stream Tokenizer . TT EOF != ( current Token = tokenizer . next Token ( ) ) ) {", "if ( current Token == Stream Tokenizer . TT EOL ) {", "continue ; }", "if ( current Token != Stream Tokenizer . TT NUMBER ) {", "throw new Exception ( STR_ + STR_ ) ; }", "first Index = tokenizer . nval ;", "if ( ! Utils . eq ( ( int ) first Index , first Index ) ) {", "throw new Exception ( STR_ + STR_ ) ; }", "if ( ( int ) first Index >= size ( ) ) {", "throw new Exception ( STR_ ) ; }", "if ( Stream Tokenizer . TT EOF == ( current Token = tokenizer . next Token ( ) ) ) {", "throw new Exception ( STR_ ) ; }", "if ( current Token == Stream Tokenizer . TT EOL ) {", "throw new Exception ( STR_ ) ; }", "if ( current Token != Stream Tokenizer . TT NUMBER ) {", "throw new Exception ( STR_ + STR_ ) ; }", "second Index = tokenizer . nval ;", "if ( ! Utils . eq ( ( int ) second Index , second Index ) ) {", "throw new Exception ( STR_ + STR_ ) ; }", "if ( ( int ) second Index >= size ( ) ) {", "throw new Exception ( STR_ ) ; }", "if ( ( int ) second Index == ( int ) first Index ) {", "throw new Exception ( STR_ ) ; }", "if ( Stream Tokenizer . TT EOF == ( current Token = tokenizer . next Token ( ) ) ) {", "throw new Exception ( STR_ ) ; }", "if ( current Token == Stream Tokenizer . TT EOL ) {", "throw new Exception ( STR_ ) ; }", "if ( current Token != Stream Tokenizer . TT NUMBER ) {", "throw new Exception ( STR_ + STR_ ) ; }", "weight = tokenizer . nval ;", "if ( ! Utils . gr ( weight , NUM_ ) ) {", "throw new Exception ( STR_ ) ; }", "set Cell ( ( int ) first Index , ( int ) second Index , new Double ( weight ) ) ; } }"]}
{"ids": "83595", "code": ["protected String handle Date ( Result Set rs , int column Index , String date Format String ) throws SQL Exception {", "java . sql . Date date = rs . get Date ( column Index ) ;", "String value = null ;", "if ( date != null ) {", "Simple Date Format date Format = new Simple Date Format ( date Format String ) ;", "value = date Format . format ( date ) ; }", "return value ; }"]}
{"ids": "3739", "code": ["@ Override public Random Access Stream open File Random Access ( ) throws IO Exception {", "if ( is Windows && is Aux ( ) ) throw new File Not Found Exception ( file . to String ( ) ) ;", "return new File Random Access Stream ( new Random Access File ( get File ( ) , STR_ ) ) ; }"]}
{"ids": "3819", "code": ["public Q Date ( Time Zone zone , long now ) {", "time Zone = zone ;", "if ( zone == gmt Time Zone ) {", "std Name = gmt Std Name ;", "dst Name = gmt Dst Name ; }", "else if ( zone == local Time Zone ) {", "std Name = local Std Name ;", "dst Name = local Dst Name ; }", "else {", "std Name = time Zone . get Display Name ( false , Time Zone . SHORT ) ;", "dst Name = time Zone . get Display Name ( true , Time Zone . SHORT ) ; }", "calendar = new Gregorian Calendar ( time Zone ) ;", "if ( zone == gmt Time Zone ) set GMT Time ( now ) ;", "else set Local Time ( now ) ; }"]}
{"ids": "82579", "code": ["public static void serialize ( Serializable obj , Byte Array Output Stream bout ) {", "try {", "Object Output Stream out = new Object Output Stream ( bout ) ;", "out . write Object ( obj ) ;", "out . close ( ) ; }", "catch ( IO Exception e ) {", "throw new Illegal State Exception ( STR_ + obj , e ) ; } }"]}
{"ids": "27162", "code": ["public static String upper ( String s ) {", "return s . to Upper Case ( Locale . ENGLISH ) ; }"]}
{"ids": "16468", "code": ["private void accept ( Socket socket ) {", "log . info ( STR_ , socket . get Inet Address ( ) ) ;", "try {", "Inet Address server Address = dns . get Address ( STR_ ) ;", "try ( Connection client Connection = new Connection ( socket ) ; Connection server Connection = new Connection ( new Socket ( server Address , CLASH PORT ) ) ) {", "Proxy Session session = Proxy Session . new Session ( services . get Message Factory ( ) , client Connection , server Connection , filter Chain ) ;", "log . info ( STR_ , socket ) ;", "Village Analyzer . log Session ( session ) ; } }", "catch ( IO Exception e ) {", "log . info ( STR_ , socket . get Inet Address ( ) , e . to String ( ) ) ; }", "finally {", "try {", "socket . close ( ) ; }", "catch ( IO Exception e ) { } } }"]}
{"ids": "36053", "code": ["public void remove Process Listener ( Process Listener l ) {", "listener List . remove ( l ) ; }"]}
{"ids": "30461", "code": ["public final static boolean is Valid Java Identifier ( String s ) {", "if ( s == null || s . length ( ) == NUM_ ) {", "return false ; }", "char [ ] c = s . to Char Array ( ) ;", "if ( ! Character . is Java Identifier Start ( c [ NUM_ ] ) ) {", "return false ; }", "for ( int i = NUM_ ; i < c . length ; i ++ ) {", "if ( ! Character . is Java Identifier Part ( c [ i ] ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "70699", "code": ["final void send Help ( ) {", "Array List < String > help = help ( ) ;", "if ( help . is Empty ( ) ) {", "return ; }", "Xmpp Msg msg = new Xmpp Msg ( ) ;", "msg . add String Array ( help . to Array ( new String [ help . size ( ) ] ) ) ;", "send ( msg ) ; }"]}
{"ids": "40332", "code": ["protected void init ( ) {", "LOG . info ( STR_ ) ;", "long start Time = System . current Time Millis ( ) ;", "bughouse Sound Keys = get Sounds Keys ( STR_ ) ;", "sound Keys = get Sounds Keys ( STR_ ) ;", "init Sound Player ( ) ;", "init Speech ( ) ;", "LOG . info ( STR_ + ( System . current Time Millis ( ) - start Time ) + STR_ ) ; }"]}
{"ids": "29597", "code": ["private static void run Conf Client ( final Process Builder pb ) throws Exception {", "int exit Code = - NUM_ ;", "try {", "Process process = pb . start ( ) ;", "exit Code = process . wait For ( ) ; }", "catch ( IO Exception e ) {", "log . error ( STR_ , e ) ;", "exit Code = NUM_ ;", "throw e ; }", "catch ( Exception e ) {", "log . error ( STR_ , e ) ;", "throw e ; }", "switch ( exit Code ) {", "case SUCCESS :", "break ;", "case ERROR CODE CANNOT DOWNLOAD CONF :", "throw new Exception ( STR_ + exit Code + STR_ ) ;", "case ERROR CODE EXPIRED CONF :", "throw new Exception ( STR_ + exit Code + STR_ ) ;", "case ERROR CODE INVALID SIGNATURE VALUE :", "throw new Exception ( STR_ + exit Code + STR_ ) ;", "case ERROR CODE INTERNAL :", "throw new Exception ( STR_ + exit Code + STR_ ) ;", "default :", "throw new Exception ( STR_ + STR_ + exit Code + STR_ + STR_ + STR_ ) ; } }"]}
{"ids": "51208", "code": ["protected final void accept Annotations ( final Method Visitor mv ) {", "int n = visible Type Annotations == null ? NUM_ : visible Type Annotations . size ( ) ;", "for ( int i = NUM_ ; i < n ; ++ i ) {", "Type Annotation Node an = visible Type Annotations . get ( i ) ;", "an . accept ( mv . visit Insn Annotation ( an . type Ref , an . type Path , an . desc , true ) ) ; }", "n = invisible Type Annotations == null ? NUM_ : invisible Type Annotations . size ( ) ;", "for ( int i = NUM_ ; i < n ; ++ i ) {", "Type Annotation Node an = invisible Type Annotations . get ( i ) ;", "an . accept ( mv . visit Insn Annotation ( an . type Ref , an . type Path , an . desc , false ) ) ; } }"]}
{"ids": "14961", "code": ["public boolean do Check Site Status ( URL url ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + url ) ; }", "URL Checker checker = get URL Checker ( url ) ;", "if ( checker != null && ( checker . get Status ( ) == URL Status . STATUS UNKNOWN ) ) {", "synchronized ( checker ) {", "checker . cancel ( ) ;", "checker . notify ( ) ; }", "synchronized ( url Checkers ) {", "url Checkers . remove ( get Thread Name ( url ) ) ; }", "debug . error ( STR_ + STR_ + get Thread Name ( url ) ) ;", "return false ; }", "else if ( ( checker != null ) && ( checker . get Status ( ) == URL Status . STATUS AVAILABLE ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "34901", "code": ["protected void fill ( ) throws IO Exception {", "ensure Open ( ) ;", "len = in . read ( buf , NUM_ , buf . length ) ;", "if ( len == - NUM_ ) {", "throw new EOF Exception ( STR_ ) ; }", "inf . set Input ( buf , NUM_ , len ) ; }"]}
{"ids": "34839", "code": ["private boolean overrides ( Executable Element e , Class < ? > clazz , String method ) {", "Type Element clazz Elt = elements . get Type Element ( clazz . get Canonical Name ( ) ) ;", "assert clazz Elt != null ;", "for ( Executable Element elt : Element Filter . methods In ( clazz Elt . get Enclosed Elements ( ) ) ) {", "if ( elt . get Simple Name ( ) . content Equals ( method ) && elements . overrides ( e , elt , clazz Elt ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "13981", "code": ["public Element sign XML ( Document doc , String cert Alias , String algorithm , String id Attr Name , String id , boolean include Cert , String xpath ) throws XML Signature Exception {", "return sign XML Using Key Pass ( doc , cert Alias , null , algorithm , id Attr Name , id , include Cert , xpath ) ; }"]}
{"ids": "15350", "code": ["public int size ( ) {", "return attrs . size ( ) ; }"]}
{"ids": "69172", "code": ["protected Socket open Passive Data Connection ( int command , String arg ) throws IO Exception , Ftp Exception Can Not Have Data Connection {", "Socket socket ;", "if ( pasv ( ) != FTP Reply . ENTERING PASSIVE MODE ) throw new Ftp Exception Can Not Have Data Connection ( STR_ + get Reply String ( ) ) ;", "try {", "parse Passive Mode Reply ( get Reply Strings ( ) [ NUM_ ] ) ; }", "catch ( Malformed Server Reply Exception e ) {", "throw new Ftp Exception Can Not Have Data Connection ( e . get Message ( ) ) ; }", "socket = socket Factory . create Socket ( passive Host , passive Port ) ;", "if ( ! FTP Reply . is Positive Preliminary ( send Command ( command , arg ) ) ) {", "socket . close ( ) ;", "return null ; }", "if ( remote Verification Enabled && ! verify Remote ( socket ) ) {", "Inet Address host 1 , host 2 ;", "host 1 = socket . get Inet Address ( ) ;", "host 2 = get Remote Address ( ) ;", "socket . close ( ) ;", "throw new Ftp Exception Can Not Have Data Connection ( STR_ + host 1 . get Host Address ( ) + STR_ + host 2 . get Host Address ( ) + STR_ ) ; }", "if ( data Timeout >= NUM_ ) socket . set So Timeout ( data Timeout ) ;", "return socket ; }"]}
{"ids": "81131", "code": ["public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable {", "Monitor mon = null ;", "if ( params . is Interface Enabled && params . is Enabled ) {", "mon = Monitor Factory . start ( labeler Int . get Summary Label ( method ) ) ; }", "try {", "if ( method . equals ( EQUALS METHOD ) ) return Boolean . value Of ( equals ( args [ NUM_ ] ) ) ;", "else return method . invoke ( monitored Obj , args ) ; }", "catch ( Invocation Target Exception e ) {", "if ( params . is Enabled ) {", "String sql Message = STR_ ;", "String detail Stack Trace = null ;", "Throwable root Cause = e . get Cause ( ) ;", "if ( root Cause instanceof SQL Exception ) {", "SQL Exception sql Exception = ( SQL Exception ) root Cause ;", "sql Message = STR_ + sql Exception . get Error Code ( ) + STR_ + sql Exception . get SQL State ( ) ; }", "track Exception ( root Cause , method , sql Message ) ; }", "throw e . get Cause ( ) ; }", "finally {", "if ( mon != null ) mon . stop ( ) ; } }"]}
{"ids": "83095", "code": ["public static void copy Stream ( final Input Stream from Stream , final Output Stream to Stream ) throws IO Exception {", "byte [ ] buffer = new byte [ NUM_ ] ;", "int bytes Read ;", "while ( ( bytes Read = from Stream . read ( buffer ) ) != - NUM_ ) {", "to Stream . write ( buffer , NUM_ , bytes Read ) ; } }"]}
{"ids": "39202", "code": ["public static int prob Round ( double value , Random rand ) {", "if ( value >= NUM_ ) {", "double lower = Math . floor ( value ) ;", "double prob = value - lower ;", "if ( rand . next Double ( ) < prob ) {", "return ( int ) lower + NUM_ ; }", "else {", "return ( int ) lower ; } }", "else {", "double lower = Math . floor ( Math . abs ( value ) ) ;", "double prob = Math . abs ( value ) - lower ;", "if ( rand . next Double ( ) < prob ) {", "return - ( ( int ) lower + NUM_ ) ; }", "else {", "return - ( int ) lower ; } } }"]}
{"ids": "74770", "code": ["private void load String Value ( J Text Field comp , final String element Name ) {", "String prop Value = properties . get Value ( element Name ) ;", "if ( prop Value != null && ! prop Value . is Empty ( ) ) {", "comp . set Text ( prop Value ) ; } }"]}
{"ids": "10808", "code": ["public static Ed 25519 Group Element to Representation ( final Ed 25519 Group Element g , final Coordinate System new Coordinate System ) {", "final Big Integer x ;", "final Big Integer y ;", "final Big Integer g X = to Big Integer ( g . get X ( ) . encode ( ) ) ;", "final Big Integer g Y = to Big Integer ( g . get Y ( ) . encode ( ) ) ;", "final Big Integer g Z = to Big Integer ( g . get Z ( ) . encode ( ) ) ;", "final Big Integer g T = null == g . get T ( ) ? null : to Big Integer ( g . get T ( ) . encode ( ) ) ;", "switch ( g . get Coordinate System ( ) ) {", "case AFFINE :", "x = g X ;", "y = g Y ;", "break ;", "case P 2 :", "case P 3 :", "x = g X . multiply ( g Z . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "y = g Y . multiply ( g Z . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "break ;", "case P 1 x P 1 :", "x = g X . multiply ( g Z . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "assert g T != null ;", "y = g Y . multiply ( g T . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "break ;", "case CACHED :", "x = g X . subtract ( g Y ) . multiply ( g Z . multiply ( new Big Integer ( STR_ ) ) . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "y = g X . add ( g Y ) . multiply ( g Z . multiply ( new Big Integer ( STR_ ) ) . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "break ;", "case PRECOMPUTED :", "x = g X . subtract ( g Y ) . multiply ( new Big Integer ( STR_ ) . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "y = g X . add ( g Y ) . multiply ( new Big Integer ( STR_ ) . mod Inverse ( Ed 25519 Field . P ) ) . mod ( Ed 25519 Field . P ) ;", "break ;", "default :", "throw new Unsupported Operation Exception ( ) ; }", "switch ( new Coordinate System ) {", "case AFFINE :", "return Ed 25519 Group Element . affine ( to Field Element ( x ) , to Field Element ( y ) , Ed 25519 Field . ONE ) ;", "case P 2 :", "return Ed 25519 Group Element . p 2 ( to Field Element ( x ) , to Field Element ( y ) , Ed 25519 Field . ONE ) ;", "case P 3 :", "return Ed 25519 Group Element . p 3 ( to Field Element ( x ) , to Field Element ( y ) , Ed 25519 Field . ONE , to Field Element ( x . multiply ( y ) . mod ( Ed 25519 Field . P ) ) ) ;", "case P 1 x P 1 :", "return Ed 25519 Group Element . p 1 xp 1 ( to Field Element ( x ) , to Field Element ( y ) , Ed 25519 Field . ONE , Ed 25519 Field . ONE ) ;", "case CACHED :", "return Ed 25519 Group Element . cached ( to Field Element ( y . add ( x ) . mod ( Ed 25519 Field . P ) ) , to Field Element ( y . subtract ( x ) . mod ( Ed 25519 Field . P ) ) , Ed 25519 Field . ONE , to Field Element ( D . multiply ( new Big Integer ( STR_ ) ) . multiply ( x ) . multiply ( y ) . mod ( Ed 25519 Field . P ) ) ) ;", "case PRECOMPUTED :", "return Ed 25519 Group Element . precomputed ( to Field Element ( y . add ( x ) . mod ( Ed 25519 Field . P ) ) , to Field Element ( y . subtract ( x ) . mod ( Ed 25519 Field . P ) ) , to Field Element ( D . multiply ( new Big Integer ( STR_ ) ) . multiply ( x ) . multiply ( y ) . mod ( Ed 25519 Field . P ) ) ) ;", "default :", "throw new Unsupported Operation Exception ( ) ; } }"]}
{"ids": "46968", "code": ["private void end Formals ( ) {", "if ( has Formals ) {", "has Formals = false ;", "buf . append ( STR_ ) ; } }"]}
{"ids": "63980", "code": ["public Builder label ( char label ) {", "this . label = Character . to Upper Case ( label ) ;", "return this ; }"]}
{"ids": "26414", "code": ["public static boolean is Letter Or Digit ( char c ) {", "return Character . is Letter Or Digit ( c ) ; }"]}
{"ids": "59581", "code": ["public static int put Long ( byte [ ] bytes , int offset , long val ) {", "if ( little Endian ) {", "val = Long . reverse Bytes ( val ) ; }", "the Unsafe . put Long ( bytes , offset + BYTE ARRAY BASE OFFSET , val ) ;", "return offset + Bytes . SIZEOF LONG ; }"]}
{"ids": "42350", "code": ["private Instruction schedule Scalar Defs Early ( Enumeration < Operand > e , Instruction early Pos , Instruction inst ) {", "while ( e . has More Elements ( ) ) {", "Operand op = e . next Element ( ) ;", "Instruction def = defining Instruction ( op ) ;", "schedule Early ( def ) ;", "if ( def . is Branch ( ) ) def = dominance Successor ( def , inst ) ;", "early Pos = max Dominator Depth ( def , early Pos ) ; }", "return early Pos ; }"]}
{"ids": "41750", "code": ["public void make Unique ( String [ ] columns , String conflict Policy ) {", "uniques . add ( CONSTRAINT UNIQUE + Text Utils . join ( STR_ , columns ) + UNIQUE + Text Utils . join ( STR_ , columns ) + ON CONFLICT + conflict Policy + COMMA ) ; }"]}
{"ids": "54028", "code": ["default < T > void for Each Matching Field Name With Boolean ( String regex , Bi Consumer < String , Boolean > function ) {", "for Each Matching Field Name With Boolean ( Pattern . compile ( regex ) , NUM_ , function ) ; }"]}
{"ids": "44046", "code": ["public void exit ( ) {", "cancel ( ) ;", "final float radius = lerp ( NUM_ , m Outer Radius , m Tween Radius ) ;", "final float remaining ;", "if ( m Anim Radius != null && m Anim Radius . is Running ( ) ) {", "remaining = m Outer Radius - radius ; }", "else {", "remaining = m Outer Radius ; }", "final int radius Duration = ( int ) ( NUM_ * Math . sqrt ( remaining / ( WAVE TOUCH UP ACCELERATION + WAVE TOUCH DOWN ACCELERATION ) * m Density ) + NUM_ ) ;", "final int opacity Duration = ( int ) ( NUM_ * m Opacity / WAVE OPACITY DECAY VELOCITY + NUM_ ) ;", "exit Software ( radius Duration , opacity Duration ) ; }"]}
{"ids": "9518", "code": ["@ Override public void handle Request Body ( Solr Query Request req , Solr Query Response rsp ) throws Parse Exception , IO Exception , Syntax Error {", "String deletion Query = get Deletion Query ( ) ;", "LOGGER . info ( STR_ , deletion Query ) ;", "if ( older Documents Exists ( deletion Query , req , rsp ) ) {", "Update Request Processor processor = get Processor ( req , rsp ) ;", "delete Old Documents ( deletion Query , processor , req ) ;", "commit Deletions ( processor , req ) ; } }"]}
{"ids": "43354", "code": ["public < V extends Comparable < ? super V > > Optional Long max By ( Long Function < V > key Extractor ) {", "Obj Long Box < V > result = collect ( null , null , null ) ;", "return result . a == null ? Optional Long . empty ( ) : Optional Long . of ( result . b ) ; }"]}
{"ids": "40507", "code": ["public void query And Compare Shards ( Solr Params params ) throws Exception {", "update Mappings From Zk ( jettys , clients ) ;", "List < String > shards = new Array List < > ( shard To Jetty . key Set ( ) ) ;", "for ( String shard : shards ) {", "query And Compare Replicas ( params , shard ) ; } }"]}
{"ids": "82549", "code": ["public int index Of ( int ch ) {", "return index Of ( ch , NUM_ ) ; }"]}
{"ids": "77521", "code": ["private Watcher init Watcher ( Solr Zk Client zk Client ) {", "wrapped Watcher = new Buffer State Watcher ( ) ;", "return zk Client . wrap Watcher ( wrapped Watcher ) ; }"]}
{"ids": "54958", "code": ["public Configuration ( ) {", "super ( ) ; }"]}
{"ids": "16447", "code": ["public static < K , V > Map < K , V > of ( K k 1 , V v 1 , K k 2 , V v 2 , K k 3 , V v 3 , K k 4 , V v 4 , K k 5 , V v 5 , K k 6 , V v 6 , K k 7 , V v 7 ) {", "Map map = of ( ) ;", "map . put ( k 1 , v 1 ) ;", "map . put ( k 2 , v 2 ) ;", "map . put ( k 3 , v 3 ) ;", "map . put ( k 4 , v 4 ) ;", "map . put ( k 5 , v 5 ) ;", "map . put ( k 6 , v 6 ) ;", "map . put ( k 7 , v 7 ) ;", "return map ; }"]}
{"ids": "48917", "code": ["public long long At ( int index ) {", "lb . position ( index ) ;", "return lb . get ( ) ; }"]}
{"ids": "37610", "code": ["private String start Set To String ( ) {", "String Buffer F String = new String Buffer ( ) ;", "boolean did Print ;", "if ( m starting == null ) {", "return get Start Set ( ) ; }", "for ( int i = NUM_ ; i < m starting . length ; i ++ ) {", "did Print = false ;", "if ( ( m has Class == false ) || ( m has Class == true && i != m class Index ) ) {", "F String . append ( ( m starting [ i ] + NUM_ ) ) ;", "did Print = true ; }", "if ( i == ( m starting . length - NUM_ ) ) {", "F String . append ( STR_ ) ; }", "else {", "if ( did Print ) {", "F String . append ( STR_ ) ; } } }", "return F String . to String ( ) ; }"]}
{"ids": "15543", "code": ["public static String make Tag Class Name ( String component Family , String renderer Type ) {", "if ( component Family == null ) {", "return null ; }", "String tag Class Name = component Family ;", "if ( renderer Type != null ) {", "if ( ! component Family . equals ( renderer Type ) ) {", "tag Class Name = tag Class Name + renderer Type ; } }", "return tag Class Name + STR_ ; }"]}
{"ids": "14980", "code": ["public void register Service ( String service Name , boolean create Template , boolean activate ) throws AM Exception , SSO Exception {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + service Name + STR_ + create Template + STR_ + activate + STR_ ) ; }", "ds Services . register Service ( super . token , super . entry DN , service Name ) ;", "Set service Status = get Attribute ( SERVICE STATUS ATTRIBUTE ) ;", "if ( ! service Status . equals ( Collections . EMPTY SET ) ) {", "Iterator iter = service Status . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "String status = ( String ) iter . next ( ) ;", "if ( status . equals Ignore Case ( service Name ) ) {", "Object args [ ] = { service Name } ;", "throw new AM Exception ( AMSDK Bundle . get String ( STR_ , args , super . locale ) , STR_ , args ) ; } } }", "else {", "service Status = new Hash Set ( ) ; }", "service Status . add ( service Name ) ;", "set Attribute ( SERVICE STATUS ATTRIBUTE , service Status ) ;", "try {", "store ( ) ; }", "catch ( AM Exception le ) {", "try {", "Set object Class = get Attribute ( STR_ ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + object Class ) ; }", "if ( ! object Class . contains ( STR_ ) ) {", "object Class . add ( STR_ ) ;", "set Attribute ( STR_ , object Class ) ;", "set Attribute ( SERVICE STATUS ATTRIBUTE , service Status ) ;", "store ( ) ; }", "else {", "throw le ; } }", "catch ( Exception e ) {", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ , e ) ; }", "throw le ; } }", "if ( create Template ) {", "try {", "if ( AM Service Utils . service Has Sub Schema ( super . token , service Name , Schema Type . POLICY ) ) {", "create Template ( AM Template . POLICY TEMPLATE , service Name , null ) ; }", "if ( AM Service Utils . service Has Sub Schema ( super . token , service Name , Schema Type . DYNAMIC ) ) {", "create Template ( AM Template . DYNAMIC TEMPLATE , service Name , null ) ; } }", "catch ( SMS Exception smsex ) {", "throw new AM Exception ( AMSDK Bundle . get String ( STR_ , super . locale ) , STR_ ) ; } } }"]}
{"ids": "75825", "code": ["public static void assert Almost Equals ( double expected , double actual , int decimals ) {", "assert Almost Equals ( null , new Double ( expected ) , new Double ( actual ) , decimals ) ; }"]}
{"ids": "51012", "code": ["private static int snap Vertical ( Collection < Constraint Widget > widgets , Constraint Widget widget , Constraint Anchor anchor , int position , Array List < Snap Candidate > snap Candidates ) {", "Snap Candidate candidate = new Snap Candidate ( ) ;", "Constraint Handle handle = Widget Interaction Targets . constraint Handle ( anchor ) ;", "if ( handle == null ) {", "return position ; }", "handle . set Draw Y ( position ) ;", "Snap Placement . snap Anchor ( widgets , widget , anchor , candidate ) ;", "if ( candidate . target != null ) {", "Constraint Handle target Handle = Widget Interaction Targets . constraint Handle ( candidate . target ) ;", "int ty = candidate . y ;", "if ( target Handle != null ) {", "ty = target Handle . get Draw Y ( ) ; }", "position = ty + candidate . margin ;", "snap Candidates . add ( candidate ) ; }", "return position ; }"]}
{"ids": "36568", "code": ["private double sin ( double angle ) {", "while ( angle >= NUM_ ) {", "angle -= NUM_ ; }", "double value = ( angle / NUM_ * Math . PI ) ;", "return Math . sin ( value ) ; }"]}
{"ids": "1266", "code": ["public static String last ( String list , String delimiter , boolean ignore Empty ) {", "if ( String Util . is Empty ( list ) ) return STR_ ;", "int len = list . length ( ) ;", "char [ ] del ;", "if ( String Util . is Empty ( delimiter ) ) {", "del = new char [ ] { STR_ } ; }", "else del = delimiter . to Char Array ( ) ;", "int index ;", "int x ;", "while ( true ) {", "index = - NUM_ ;", "for ( int i = NUM_ ; i < del . length ; i ++ ) {", "x = list . last Index Of ( del [ i ] ) ;", "if ( x > index ) index = x ; }", "if ( index == - NUM_ ) {", "return list ; }", "else if ( index + NUM_ == len ) {", "if ( ! ignore Empty ) return STR_ ;", "list = list . substring ( NUM_ , len - NUM_ ) ;", "len -- ; }", "else {", "return list . substring ( index + NUM_ ) ; } } }"]}
{"ids": "84972", "code": ["private void try Parse Type Attribute ( IDOM Element element ) {", "IDOM Attr type Attr = ( IDOM Attr ) Ui Binder Xml Model Utilities . get Type Attribute ( element ) ;", "if ( type Attr == null ) {", "return ; }", "I Region value Region = Xml Utilities . get Attribute Value Region ( type Attr ) ;", "if ( value Region == null ) {", "return ; }", "String fq Type = type Attr . get Node Value ( ) ;", "if ( fq Type == null ) {", "return ; }", "final I Type type = Java Model Search . find Type ( java Project , fq Type ) ;", "if ( ! Java Model Search . is Valid Element ( type ) ) {", "problem Marker Manager . set Type Undefined Error ( value Region , fq Type ) ; }", "else {", "if ( Ui Binder Xml Model Utilities . is Style Element ( element ) ) {", "I Type css Resource Type = Client Bundle Utilities . find Css Resource Type ( java Project ) ;", "if ( css Resource Type != null ) {", "try {", "if ( ! Java Utilities . is Subtype ( css Resource Type , type ) ) {", "problem Marker Manager . set Not Css Resource Subtype Error ( value Region , fq Type ) ; } }", "catch ( Java Model Exception e ) {", "GWT Plugin Log . log Warning ( e , STR_ ) ; } } } }", "java Type References . add ( fq Type ) ; }"]}
{"ids": "25806", "code": ["private void clear Dictionary Cache ( ) {", "Map < String , Dictionary > dictionary Caches = surrogate Key Gen . get Dictionary Caches ( ) ;", "List < Dictionary > reverse Dictionaries = new Array List < > ( dictionary Caches . values ( ) ) ;", "for ( int i = NUM_ ; i < reverse Dictionaries . size ( ) ; i ++ ) {", "Dictionary dictionary = reverse Dictionaries . get ( i ) ;", "dictionary . clear ( ) ; } }"]}
{"ids": "66409", "code": ["public static List < M Relation Type > retrieve Types ( final PO po , final int window Id ) {", "if ( po . get Key Columns ( ) . length != NUM_ ) {", "logger . severe ( po + STR_ + po . get Key Columns ( ) . length + STR_ ) ;", "PO Relation Exception . throw Wrong Key Column Count ( po ) ; }", "final String key Column = po . get Key Columns ( ) [ NUM_ ] ;", "final int col Id = M Column . get Column ID ( po . get Table Name ( ) , key Column ) ;", "final Prepared Statement pstmt = DB . prepare Statement ( SQL , po . get Trx Name ( ) ) ;", "Result Set rs = null ;", "try {", "pstmt . set Int ( NUM_ , po . get Table ID ( ) ) ;", "pstmt . set Int ( NUM_ , col Id ) ;", "rs = pstmt . execute Query ( ) ;", "final List < M Relation Type > result = eval Result Set ( po , window Id , rs ) ;", "logger . info ( STR_ + result . size ( ) + STR_ + po ) ;", "return result ; }", "catch ( SQL Exception e ) {", "logger . severe ( e . get Message ( ) ) ;", "throw new Adempiere Exception ( e ) ; }", "finally {", "DB . close ( rs , pstmt ) ; } }"]}
{"ids": "48918", "code": ["public Jdp Jmx Packet ( byte [ ] data ) throws Jdp Exception {", "Jdp Packet Reader reader ;", "reader = new Jdp Packet Reader ( data ) ;", "Map < String , String > p = reader . get Discovery Data As Map ( ) ;", "String s Id = p . get ( UUID KEY ) ;", "this . id = ( s Id == null ) ? null : UUID . from String ( s Id ) ;", "this . jmx Service Url = p . get ( JMX SERVICE URL KEY ) ;", "this . main Class = p . get ( MAIN CLASS KEY ) ;", "this . instance Name = p . get ( INSTANCE NAME KEY ) ;", "this . process Id = p . get ( PROCESS ID KEY ) ;", "this . rmi Hostname = p . get ( RMI HOSTNAME KEY ) ;", "this . broadcast Interval = p . get ( BROADCAST INTERVAL KEY ) ; }"]}
{"ids": "44471", "code": ["private Uid Range parse Uid Range ( String range ) throws Decoding Exception {", "int pos = range . index Of ( STR_ ) ;", "try {", "if ( pos == - NUM_ ) {", "if ( range . length ( ) == NUM_ && range . char At ( NUM_ ) == STR_ ) {", "return new Uid Range ( Message Uid . MAX VALUE ) ; }", "else {", "long value = parse Unsigned Integer ( range ) ;", "return new Uid Range ( Message Uid . of ( value ) ) ; } }", "else {", "long val 1 = parse Unsigned Integer ( range . substring ( NUM_ , pos ) ) ;", "long val 2 = parse Unsigned Integer ( range . substring ( pos + NUM_ ) ) ;", "if ( val 1 == Long . MAX VALUE && val 2 == Long . MAX VALUE ) {", "return new Uid Range ( Message Uid . MAX VALUE ) ; }", "else if ( val 1 <= val 2 ) {", "return new Uid Range ( Message Uid . of ( val 1 ) , Message Uid . of ( val 2 ) ) ; }", "else if ( val 1 == Long . MAX VALUE ) {", "return new Uid Range ( Message Uid . of ( val 2 ) , Message Uid . MAX VALUE ) ; }", "else {", "return new Uid Range ( Message Uid . of ( val 2 ) , Message Uid . of ( val 1 ) ) ; } } }", "catch ( Number Format Exception e ) {", "throw new Decoding Exception ( Human Readable Text . INVALID MESSAGESET , STR_ , e ) ; } }"]}
{"ids": "79918", "code": ["public void add FXGL Listener ( FXGL Listener listener ) {", "system Listeners . add ( listener ) ; }"]}
{"ids": "34448", "code": ["public void add Definition ( String definition ) {", "if ( ! String Utils . is Empty ( definition ) ) {", "definitions . add ( definition ) ; } }"]}
{"ids": "76131", "code": ["@ Override public void receive Event ( Client State Information information ) {", "if ( information . get State ( ) != current State ) {", "logger . info ( STR_ + information ) ;", "if ( information . get State ( ) == Client State . SEARCH ) {", "search Start Time = System . current Time Millis ( ) ;", "for ( Sequence Output Variable Factory < ? > factory : sequence Output Variable Factories . values ( ) ) {", "factory . set Start Time ( search Start Time ) ; } }", "Output Variable < Long > time = new Output Variable < Long > ( STR_ + current State . get Name ( ) , System . current Time Millis ( ) - current State Started ) ;", "output Variables . put ( time . get Name ( ) , time ) ;", "current State = information . get State ( ) ;", "current State Started = System . current Time Millis ( ) ; } }"]}
{"ids": "28987", "code": ["public void add Bug Code ( Bug Code bug Code ) {", "bug Code List . add ( bug Code ) ; }"]}
{"ids": "23551", "code": ["@ Override public final void write ( int b ) {", "if ( this . ignore Writes ) return ;", "check If Writable ( ) ;", "ensure Capacity ( NUM_ ) ;", "buffer . put ( ( byte ) b ) ; }"]}
{"ids": "50985", "code": ["public static String underlines To Camel Case ( String string ) {", "String Builder sb = new String Builder ( string . length ( ) ) ;", "int n = string . length ( ) ;", "int i = NUM_ ;", "boolean upcase Next = true ;", "for ( ; i < n ; i ++ ) {", "char c = string . char At ( i ) ;", "if ( c == STR_ ) {", "upcase Next = true ; }", "else {", "if ( upcase Next ) {", "c = Character . to Upper Case ( c ) ; }", "upcase Next = false ;", "sb . append ( c ) ; } }", "return sb . to String ( ) ; }"]}
{"ids": "53594", "code": ["protected Best Match Finder ( String pattern ) {", "search Pattern = pattern . to Lower Case ( ) ; }"]}
{"ids": "20417", "code": ["public int index Of ( Object key ) {", "return key == null ? index Of Null ( ) : index Of ( key , key . hash Code ( ) ) ; }"]}
{"ids": "35173", "code": ["public long next Action Millis ( long now , long next Retry Time Millis ) {", "for ( File Download Info info : downloads ) {", "long individual Retry Time Millis = get Next Action Millis For ( now , info ) ;", "next Retry Time Millis = Math . min ( individual Retry Time Millis , next Retry Time Millis ) ; }", "return next Retry Time Millis ; }"]}
{"ids": "45541", "code": ["private void pop ( final String desc ) {", "char c = desc . char At ( NUM_ ) ;", "if ( c == STR_ ) {", "pop ( ( Type . get Arguments And Return Sizes ( desc ) > > NUM_ ) - NUM_ ) ; }", "else if ( c == STR_ || c == STR_ ) {", "pop ( NUM_ ) ; }", "else {", "pop ( NUM_ ) ; } }"]}
{"ids": "15823", "code": ["public Integer count Pages Containing Template Names ( List < String > template Names ) throws Wiki Api Exception {", "return count Filtered Pages ( template Names , true ) ; }"]}
{"ids": "45281", "code": ["static URL fix Pure Query Targets ( URL base , String target ) throws Malformed URL Exception {", "if ( ! target . starts With ( STR_ ) ) return new URL ( base , target ) ;", "String base Path = base . get Path ( ) ;", "String base Right Most = STR_ ;", "int base Right Most Idx = base Path . last Index Of ( STR_ ) ;", "if ( base Right Most Idx != - NUM_ ) {", "base Right Most = base Path . substring ( base Right Most Idx + NUM_ ) ; }", "if ( target . starts With ( STR_ ) ) target = base Right Most + target ;", "return new URL ( base , target ) ; }"]}
{"ids": "48968", "code": ["synchronized void add ( Object obj ) {", "if ( obj List != null ) {", "obj List . add ( obj ) ; } }"]}
{"ids": "36104", "code": ["public void sort ( ) {", "Collections . sort ( individuals , PERFORMANCE COMPARATOR ) ; }"]}
{"ids": "42324", "code": ["void free Interval ( Spill Location Interval i ) {", "free Intervals . add ( i ) ; }"]}
{"ids": "79066", "code": ["private void check And Write Dictionary Chunk To File ( ) throws IO Exception {", "if ( one Dictionary Chunk List . size ( ) >= dictionary one chunk size ) {", "write Dictionary File ( ) ;", "create Chunk List ( ) ; } }"]}
{"ids": "12176", "code": ["private void ctrl Select ( D node Data ) {", "int insertion Index = get Insertion Index ( node Data ) ;", "insert And Select Node ( node Data , insertion Index , ! node Data . equals ( selected Nodes . get ( insertion Index ) ) ) ; }"]}
{"ids": "46331", "code": ["private void read Object ( Object Input Stream ois ) throws IO Exception , Class Not Found Exception {", "byte [ ] asn 1 Enc Principal = ( byte [ ] ) ois . read Object ( ) ;", "byte [ ] enc Realm = ( byte [ ] ) ois . read Object ( ) ;", "try {", "Realm realm Object = new Realm ( new Der Value ( enc Realm ) ) ;", "Principal Name krb 5 Principal = new Principal Name ( new Der Value ( asn 1 Enc Principal ) , realm Object ) ;", "realm = realm Object . to String ( ) ;", "full Name = krb 5 Principal . to String ( ) ;", "name Type = krb 5 Principal . get Name Type ( ) ; }", "catch ( Exception e ) {", "throw new IO Exception ( e ) ; } }"]}
{"ids": "19717", "code": ["private static int read Swapped Integer ( final Data Input Stream input ) throws IO Exception {", "final int value 1 = input . read Byte ( ) ;", "final int value 2 = input . read Byte ( ) ;", "final int value 3 = input . read Byte ( ) ;", "final int value 4 = input . read Byte ( ) ;", "return ( ( value 1 & NUM_ ) << NUM_ ) + ( ( value 2 & NUM_ ) << NUM_ ) + ( ( value 3 & NUM_ ) << NUM_ ) + ( ( value 4 & NUM_ ) << NUM_ ) ; }"]}
{"ids": "73635", "code": ["private void consume Pre Nested Scroll ( int dx , int dy , int [ ] consumed ) {", "if ( m Over Scroll Effect == Over Scroll Effect . BOUNCE && m Unconsumed Over Scroll Offset != NUM_ ) {", "int dest Offset = m Unconsumed Over Scroll Offset - dy ;", "if ( ! Math Utils . same Sign ( dest Offset , m Unconsumed Over Scroll Offset ) ) {", "dest Offset = NUM_ ; }", "else if ( Math . abs ( dest Offset ) > Math . abs ( m Unconsumed Over Scroll Offset ) ) {", "dest Offset = m Unconsumed Over Scroll Offset ; }", "consumed [ NUM_ ] = NUM_ ;", "consumed [ NUM_ ] = m Unconsumed Over Scroll Offset - dest Offset ;", "m Unconsumed Over Scroll Offset = dest Offset ;", "set Scrolling Offset ( get Unconsumed Scrolling Offset ( ) ) ; } }"]}
{"ids": "84472", "code": ["public Str Builder replace ( final int start Index , int end Index , final String replace Str ) {", "end Index = validate Range ( start Index , end Index ) ;", "final int insert Len = ( replace Str == null ? NUM_ : replace Str . length ( ) ) ;", "replace Impl ( start Index , end Index , end Index - start Index , replace Str , insert Len ) ;", "return this ; }"]}
{"ids": "75666", "code": ["public void close File ( ) {", "close File ( true ) ; }"]}
{"ids": "46098", "code": ["public boolean is Valid ( int value ) {", "return min <= value && value <= max ; }"]}
{"ids": "56303", "code": ["public Plugins Info info ( ) {", "return info ; }"]}
{"ids": "57759", "code": ["public void fire Property Change ( String property Name , int old Value , int new Value ) {", "fire Property Change ( property Name , Integer . value Of ( old Value ) , Integer . value Of ( new Value ) ) ; }"]}
{"ids": "86714", "code": ["static Array List < Field > all Fields ( final Class < ? > clazz ) {", "final Array List < Field > res = new Array List < > ( ) ;", "Class < ? > cl = clazz ;", "while ( cl != null ) {", "final Field [ ] fields = cl . get Declared Fields ( ) ;", "Collections . add All ( res , fields ) ;", "cl = cl . get Superclass ( ) ; }", "return res ; }"]}
{"ids": "80614", "code": ["private void update Weather States ( ) {", "boolean changed = temperature . update ( ) ;", "changed |= rain . update ( ) ;", "changed |= fog . update ( ) ;", "changed |= thunder . update ( ) ;", "if ( changed ) {", "update Zones ( ) ; } }"]}
{"ids": "48520", "code": ["public static Render Loops make Render Loops ( Surface Type src , Composite Type comp , Surface Type dst ) {", "Render Loops loops = new Render Loops ( ) ;", "loops . draw Line Loop = Draw Line . locate ( src , comp , dst ) ;", "loops . fill Rect Loop = Fill Rect . locate ( src , comp , dst ) ;", "loops . draw Rect Loop = Draw Rect . locate ( src , comp , dst ) ;", "loops . draw Polygons Loop = Draw Polygons . locate ( src , comp , dst ) ;", "loops . draw Path Loop = Draw Path . locate ( src , comp , dst ) ;", "loops . fill Path Loop = Fill Path . locate ( src , comp , dst ) ;", "loops . fill Spans Loop = Fill Spans . locate ( src , comp , dst ) ;", "loops . fill Parallelogram Loop = Fill Parallelogram . locate ( src , comp , dst ) ;", "loops . draw Parallelogram Loop = Draw Parallelogram . locate ( src , comp , dst ) ;", "loops . draw Glyph List Loop = Draw Glyph List . locate ( src , comp , dst ) ;", "loops . draw Glyph List AA Loop = Draw Glyph List AA . locate ( src , comp , dst ) ;", "loops . draw Glyph List LCD Loop = Draw Glyph List LCD . locate ( src , comp , dst ) ;", "return loops ; }"]}
{"ids": "9453", "code": ["public void edit ( Object plot Canvas ) {", "String label = J Option Pane . show Input Dialog ( ( Plot Canvas ) plot Canvas , STR_ , label ) ;", "if ( label != null ) {", "set Legend ( label ) ; } }"]}
{"ids": "39715", "code": ["protected boolean exclude File ( String file ) {", "if ( excluded == null ) return false ;", "Iterator < String > iter = excluded . iterator ( ) ;", "while ( iter . has Next ( ) ) if ( file . ends With ( iter . next ( ) ) ) return true ;", "return false ; }"]}
{"ids": "40878", "code": ["public Builder delete User Type ( ) {", "delete Fields . add ( STR_ ) ;", "return this ; }"]}
{"ids": "81383", "code": ["public final static boolean ends With Ignore Case ( String str , String end ) {", "int str Length = str == null ? NUM_ : str . length ( ) ;", "int end Length = end == null ? NUM_ : end . length ( ) ;", "if ( end Length > str Length ) return false ;", "for ( int i = NUM_ ; i <= end Length ; i ++ ) {", "if ( Scanner Helper . to Lower Case ( end . char At ( end Length - i ) ) != Scanner Helper . to Lower Case ( str . char At ( str Length - i ) ) ) return false ; }", "return true ; }"]}
{"ids": "44977", "code": ["public void write ( int c ) throws IO Exception {", "internal Out . write ( c ) ; }"]}
{"ids": "68600", "code": ["private < T extends Client Request Result > Collection < T > execute Request ( final Collection < Long > ids , final Class < T > clazz , final Client Request Report Listener report Listener , final String request Queue ) {", "LOGGER . debug ( STR_ ) ;", "Client Request Impl < T > client Request = new Client Request Impl < T > ( clazz ) ;", "Iterator < Long > it = ids . iterator ( ) ;", "Collection < Future < Collection < T > > > results = new Array List < Future < Collection < T > > > ( ) ;", "int counter = NUM_ ;", "while ( it . has Next ( ) ) {", "while ( it . has Next ( ) && counter < max Request Size ) {", "client Request . add Tag Id ( it . next ( ) ) ;", "counter ++ ; }", "Request Values Task < T > task = new Request Values Task < T > ( client Request , report Listener , request Queue ) ;", "results . add ( executor . submit ( task ) ) ;", "client Request = new Client Request Impl < T > ( clazz ) ;", "counter = NUM_ ; }", "Collection < T > final Collection = new Array List < T > ( ) ;", "for ( Future < Collection < T > > result : results ) {", "try {", "final Collection . add All ( result . get ( ) ) ; }", "catch ( Interrupted Exception e ) {", "LOGGER . error ( STR_ , e ) ;", "throw new Runtime Exception ( e ) ; }", "catch ( Execution Exception e ) {", "LOGGER . error ( STR_ , e ) ;", "throw new Runtime Exception ( e ) ; } }", "LOGGER . debug ( STR_ ) ;", "return final Collection ; }"]}
{"ids": "2470", "code": ["public static Map < String , Integer > class Names To Mapping ( List < String > labels ) {", "Map < String , Integer > mapping = new Hash Map < String , Integer > ( ) ;", "for ( int i = NUM_ ; i < labels . size ( ) ; i ++ ) {", "mapping . put ( labels . get ( i ) , i ) ; }", "return mapping ; }"]}
{"ids": "57106", "code": ["public static void put Unsigned Short ( Byte Buffer bb , int v ) {", "bb . put Short ( ( short ) ( v & NUM_ ) ) ; }"]}
{"ids": "82582", "code": ["public static String read File To String ( File f ) throws IO Exception {", "String Writer sw = new String Writer ( ) ;", "IO . copy And Close Both ( Common . as Reader UTF 8 Lenient ( new File Input Stream ( f ) ) , sw ) ;", "return sw . to String ( ) ; }"]}
{"ids": "68970", "code": ["private File create Capture File ( int encoding Type , String file Name ) {", "if ( file Name . is Empty ( ) ) {", "file Name = STR_ ; }", "if ( encoding Type == JPEG ) {", "file Name = file Name + STR_ ; }", "else if ( encoding Type == PNG ) {", "file Name = file Name + STR_ ; }", "else {", "throw new Illegal Argument Exception ( STR_ + encoding Type ) ; }", "return new File ( get Temp Directory Path ( ) , file Name ) ; }"]}
{"ids": "75669", "code": ["@ Override public void action Performed ( Action Event e ) {", "Object o ;", "o = e . get Source ( ) ;", "if ( o == m Menu File Open ) {", "load File ( ) ; }", "else if ( o == m Menu File Save ) {", "save File ( ) ; }", "else if ( o == m Menu File Save As ) {", "save File As ( ) ; }", "else if ( o == m Menu File Close ) {", "close File ( ) ; }", "else if ( o == m Menu File Close All ) {", "close All Files ( ) ; }", "else if ( o == m Menu File Properties ) {", "show Properties ( ) ; }", "else if ( o == m Menu File Exit ) {", "close ( ) ; }", "else if ( o == m Menu Edit Undo ) {", "undo ( ) ; }", "else if ( o == m Menu Edit Copy ) {", "copy Content ( ) ; }", "else if ( o == m Menu Edit Search ) {", "search ( ) ; }", "else if ( o == m Menu Edit Clear Search ) {", "clear Search ( ) ; }", "else if ( o == m Menu Edit Delete Attribute ) {", "delete Attribute ( false ) ; }", "else if ( o == m Menu Edit Delete Attributes ) {", "delete Attribute ( true ) ; }", "else if ( o == m Menu Edit Rename Attribute ) {", "rename Attribute ( ) ; }", "else if ( o == m Menu Edit Attribute As Class ) {", "attribute As Class ( ) ; }", "else if ( o == m Menu Edit Delete Instance ) {", "delete Instance ( false ) ; }", "else if ( o == m Menu Edit Delete Instances ) {", "delete Instance ( true ) ; }", "else if ( o == m Menu Edit Sort Instances ) {", "sort Instances ( ) ; }", "else if ( o == m Menu View Attributes ) {", "show Attributes ( ) ; }", "else if ( o == m Menu View Values ) {", "show Values ( ) ; }", "else if ( o == m Menu View Optimal Col Widths ) {", "set Optimal Col Widths ( ) ; }", "update Menu ( ) ; }"]}
{"ids": "15327", "code": ["public boolean validate Token ( Endpoint Specification endpoint Specification , Security Token to Be Validated Token ) throws Soap STS Consumer Exception {", "STS Client client = get STS Client ( sts Instance Wsdl Url , endpoint Specification . service Q Name , endpoint Specification . port Q Name ) ;", "client . set Token Type ( STS Constants . STATUS ) ;", "try {", "client . validate Security Token ( to Be Validated Token ) ;", "return true ; }", "catch ( Trust Exception e ) {", "return false ; }", "catch ( Exception e ) {", "throw new Soap STS Consumer Exception ( e . get Message ( ) , e ) ; } }"]}
{"ids": "4836", "code": ["public static String strip Function Tags ( String label ) {", "if ( label . index Of ( STR_ ) > NUM_ ) return label . substring ( NUM_ , label . index Of ( STR_ ) ) ;", "else return label ; }"]}
{"ids": "60054", "code": ["@ Override public void play New Video ( Meta Data current Item Meta Data , Video Player View video Player View , String video Url ) {", "if ( SHOW LOGS ) Logger . v ( TAG , STR_ + video Player View + STR_ + m Current Player + STR_ + video Player View ) ;", "m Player Handler . pause Queue Processing ( TAG ) ;", "boolean current Player Is Active = m Current Player == video Player View ;", "boolean is Already Playing The File = m Current Player != null && video Url . equals ( m Current Player . get Video Url Data Source ( ) ) ;", "if ( SHOW LOGS ) Logger . v ( TAG , STR_ + is Already Playing The File ) ;", "if ( SHOW LOGS ) Logger . v ( TAG , STR_ + current Player Is Active ) ;", "if ( current Player Is Active ) {", "if ( is In Playback State ( ) && is Already Playing The File ) {", "if ( SHOW LOGS ) Logger . v ( TAG , STR_ + video Player View + STR_ + m Current Player State ) ; }", "else {", "start New Playback ( current Item Meta Data , video Player View , video Url ) ; } }", "else {", "start New Playback ( current Item Meta Data , video Player View , video Url ) ; }", "m Player Handler . resume Queue Processing ( TAG ) ;", "if ( SHOW LOGS ) Logger . v ( TAG , STR_ + video Player View + STR_ + video Url ) ; }"]}
{"ids": "84579", "code": ["private void add Trace And Type ( String name ) {", "if ( traces Type . get ( name ) == null ) {", "traces . add ( create Trace ( name , Trace Type . REAL ) ) ;", "traces Type . put ( name , Trace Type . REAL ) ; }", "else {", "traces . add ( create Trace ( name , traces Type . get ( name ) ) ) ; } }"]}
{"ids": "13362", "code": ["public static Volume Mount [ ] format Original Container Volume Mount ( Log Draft log Draft ) {", "List < Volume Mount > volume Mounts = new Array List < > ( ) ;", "int idx Suffix = NUM_ ;", "for ( Log Item Draft log Item Draft : log Draft . get Log Item Drafts ( ) ) {", "if ( log Item Draft . is Auto Collect ( ) || log Item Draft . is Auto Delete ( ) ) {", "Volume Mount volume Mount = new Volume Mount ( ) ;", "volume Mount . set Name ( STR_ + idx Suffix ) ;", "volume Mount . set Mount Path ( Log Item Draft . get Log Parent Path ( log Item Draft . get Log Path ( ) ) ) ;", "volume Mounts . add ( volume Mount ) ;", "idx Suffix ++ ; } }", "return volume Mounts . to Array ( new Volume Mount [ ] { } ) ; }"]}
{"ids": "39223", "code": ["public static double dnorm ( double x ) {", "return Math . exp ( - x * x / NUM_ ) * PSI ; }"]}
{"ids": "64147", "code": ["public static long checksum CRC 32 ( File file ) throws IO Exception {", "CRC 32 crc = new CRC 32 ( ) ;", "checksum ( file , crc ) ;", "return crc . get Value ( ) ; }"]}
{"ids": "65723", "code": ["private void cmd annotate Difference ( ) {", "Big Decimal previous Value , actual Value , difference ;", "previous Value = ( Big Decimal ) v previous Balance . get Value ( ) ;", "actual Value = ( Big Decimal ) v Actual Balance . get Value ( ) ;", "difference = actual Value . subtract ( previous Value ) ;", "M Cash Book cash Book = new M Cash Book ( p ctx , p pos . get C Cash Book ID ( ) , null ) ;", "Timestamp today = Time Util . get Day ( System . current Time Millis ( ) ) ;", "M Cash cash = M Cash . get ( p ctx , cash Book . get C Cash Book ID ( ) , today , null ) ;", "if ( cash != null && cash . get ID ( ) != NUM_ && difference . compare To ( cash . get Statement Difference ( ) ) != NUM_ ) {", "M Cash Line cl = new M Cash Line ( cash ) ;", "cl . set Cash Type ( M Cash Line . CASHTYPE Difference ) ;", "cl . set Amount ( difference ) ;", "cl . set Description ( Msg . translate ( p pos . get Ctx ( ) , STR_ ) + previous Value + STR_ + actual Value ) ;", "cl . save Ex ( ) ; }", "cash = M Cash . get ( p pos . get Ctx ( ) , p pos . get C Cash Book ID ( ) , today , null ) ;", "v previous Balance . set Value ( cash . get Ending Balance ( ) ) ;", "v Actual Balance . set Value ( Env . ZERO ) ;", "v difference . set Value ( Env . ZERO ) ; }"]}
{"ids": "39537", "code": ["public void write ( Output Stream out , java . util . List < Figure > figures ) throws IO Exception {", "Rectangle 2 D . Double drawing Rect = null ;", "for ( Figure f : figures ) {", "if ( drawing Rect == null ) {", "drawing Rect = f . get Bounds ( ) ; }", "else {", "drawing Rect . add ( f . get Bounds ( ) ) ; } }", "Affine Transform tx = new Affine Transform ( ) ;", "tx . translate ( - Math . min ( NUM_ , drawing Rect . x ) , - Math . min ( NUM_ , drawing Rect . y ) ) ;", "write ( out , figures , tx , new Dimension ( ( int ) ( Math . abs ( drawing Rect . x ) + drawing Rect . width ) , ( int ) ( Math . abs ( drawing Rect . y ) + drawing Rect . height ) ) ) ; }"]}
{"ids": "27422", "code": ["Fixed Allocator ( final RW Store store , final int size ) {", "m disk Addr = NUM_ ;", "m store = store ;", "m size = size ;", "m bit Size = calc Bit Size ( true , size , c Min Allocation , c Mod Allocation ) ;", "alloc Block Range = NUM_ * m bit Size ;", "final int num Blocks = NUM_ / ( m bit Size + NUM_ ) ;", "m alloc Blocks = new Array List < Alloc Block > ( num Blocks ) ;", "for ( int i = NUM_ ; i < num Blocks ; i ++ ) {", "m alloc Blocks . add ( new Alloc Block ( NUM_ , m bit Size , this ) ) ; }", "m free Transients = NUM_ ;", "m free Bits = NUM_ * m bit Size * num Blocks ; }"]}
{"ids": "56905", "code": ["private void build Get Storage Response ( Mock Closeable Http Response response , URI uri ) throws JAXB Exception {", "Pattern pattern = Pattern . compile ( STR_ ) ;", "Matcher matcher = pattern . matcher ( uri . get Path ( ) ) ;", "if ( matcher . find ( ) ) {", "Storage storage = get New Storage ( matcher . group ( NUM_ ) ) ;", "response . set Entity ( get Http Entity ( storage ) ) ; } }"]}
{"ids": "18453", "code": ["public void assert Equals ( String assert ID , String expected , String actual ) {", "framework . assert Equals ( this , assert ID , expected , actual ) ; }"]}
{"ids": "83641", "code": ["public boolean on Preference Change ( Preference preference , Object new Value ) {", "if ( Boolean . parse Boolean ( System Properties . get ( Telephony Properties . PROPERTY INECM MODE ) ) ) { }", "else {", "set Airplane Mode On ( ( Boolean ) new Value ) ; }", "return true ; }"]}
{"ids": "64823", "code": ["public static int estimate Band Pass Order ( int sample Rate , int pass Band Start , int pass Band End , double pass Band Ripple Db , double stop Band Ripple Db ) {", "double df = ( double ) Math . abs ( pass Band End - pass Band Start ) / ( double ) sample Rate ;", "double ddp = ( double ) Math . log 10 ( pass Band Ripple Db ) ;", "double dds = ( double ) Math . log 10 ( stop Band Ripple Db ) ;", "double a 1 = NUM_ ;", "double a 2 = NUM_ ;", "double a 3 = - NUM_ ;", "double a 4 = NUM_ ;", "double a 5 = - NUM_ ;", "double a 6 = - NUM_ ;", "double t 1 = a 1 * ddp * ddp ;", "double t 2 = a 2 * ddp ;", "double t 3 = a 4 * ddp * ddp ;", "double t 4 = a 5 * ddp ;", "double cinf = dds * ( t 1 + t 2 + a 3 ) + t 3 + t 4 + a 6 ;", "double ginf = - NUM_ * ( double ) Math . log 10 ( pass Band Ripple Db / stop Band Ripple Db ) - NUM_ ;", "double n = cinf / df + ginf * df + NUM_ ;", "return ( int ) Math . ceil ( n ) ; }"]}
{"ids": "77894", "code": ["static public Object string To Value ( String s ) {", "if ( s . equals ( STR_ ) ) {", "return s ; }", "if ( s . equals Ignore Case ( STR_ ) ) {", "return Boolean . TRUE ; }", "if ( s . equals Ignore Case ( STR_ ) ) {", "return Boolean . FALSE ; }", "if ( s . equals Ignore Case ( STR_ ) ) {", "return JSON Object . NULL ; }", "char b = s . char At ( NUM_ ) ;", "if ( ( b >= STR_ && b <= STR_ ) || b == STR_ || b == STR_ || b == STR_ ) {", "if ( b == STR_ && s . length ( ) > NUM_ && ( s . char At ( NUM_ ) == STR_ || s . char At ( NUM_ ) == STR_ ) ) {", "try {", "return new Integer ( Integer . parse Int ( s . substring ( NUM_ ) , NUM_ ) ) ; }", "catch ( Exception ignore ) { } }", "try {", "if ( s . index Of ( STR_ ) > - NUM_ || s . index Of ( STR_ ) > - NUM_ || s . index Of ( STR_ ) > - NUM_ ) {", "return Double . value Of ( s ) ; }", "else {", "Long my Long = new Long ( s ) ;", "if ( my Long . long Value ( ) == my Long . int Value ( ) ) {", "return new Integer ( my Long . int Value ( ) ) ; }", "else {", "return my Long ; } } }", "catch ( Exception ignore ) { } }", "return s ; }"]}
{"ids": "44613", "code": ["public static void write Single Byte ( Output Stream out , int b ) throws IO Exception {", "byte [ ] buffer = new byte [ NUM_ ] ;", "buffer [ NUM_ ] = ( byte ) ( b & NUM_ ) ;", "out . write ( buffer ) ; }"]}
{"ids": "35719", "code": ["private float [ ] calc Border Values ( ) {", "float max = Integer . MIN VALUE ;", "float min = Integer . MAX VALUE ;", "for ( Chart Set set : chart View . data ) {", "for ( Chart Entry e : set . get Entries ( ) ) {", "if ( e . get Value ( ) >= max ) max = e . get Value ( ) ;", "if ( e . get Value ( ) <= min ) min = e . get Value ( ) ; } }", "return new float [ ] { min , max } ; }"]}
{"ids": "31130", "code": ["private void parse Name ( String Tokenizer st , boolean peer ) {", "List vals = new Array List ( NUM_ ) ;", "outer : while ( true ) {", "String cls ;", "do {", "if ( ! st . has More Tokens ( ) ) {", "break outer ; }", "cls = st . next Token ( ) ; }", "while ( cls . equals ( STR_ ) ) ;", "if ( ! peer && cls . equals Ignore Case ( STR_ ) ) {", "parse Name ( st , true ) ;", "break ; }", "if ( cls . equals ( STR_ ) ) {", "if ( peer ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "cls = null ;", "vals = null ; }", "String nm ;", "do {", "if ( ! st . has More Tokens ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "nm = st . next Token ( ) ; }", "while ( nm . equals ( STR_ ) ) ;", "if ( ! nm . starts With ( STR_ ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "while ( ! nm . ends With ( STR_ ) ) {", "if ( ! st . has More Tokens ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "nm = nm + st . next Token ( ) ; }", "if ( nm . equals ( STR_ ) ) {", "if ( peer ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( cls == null ) {", "continue ; }", "nm = null ; }", "else if ( cls == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else {", "nm = nm . substring ( NUM_ , nm . length ( ) - NUM_ ) ; }", "if ( vals != null ) {", "for ( int i = vals . size ( ) ; i > NUM_ ; ) {", "String onm = ( String ) vals . get ( -- i ) ;", "String ocls = ( String ) vals . get ( -- i ) ;", "if ( cls . equals ( ocls ) ) {", "if ( onm == null || ( onm != null && onm . equals ( nm ) ) ) {", "continue outer ; }", "else if ( nm == null ) {", "vals . remove ( i ) ;", "vals . remove ( i ) ; } } }", "vals . add ( cls ) ;", "vals . add ( nm ) ; } }", "String [ ] res = null ;", "if ( vals != null ) {", "if ( vals . is Empty ( ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "res = ( String [ ] ) vals . to Array ( new String [ vals . size ( ) ] ) ; }", "if ( peer ) {", "this . peer = res ; }", "else {", "this . me = res ; } }"]}
{"ids": "45873", "code": ["public static void remove All Children ( Node node ) {", "Node List children = node . get Child Nodes ( ) ;", "for ( int i = NUM_ , length = children . get Length ( ) ; i < length ; i ++ ) {", "node . remove Child ( children . item ( i ) ) ; } }"]}
{"ids": "5233", "code": ["protected void deploy ( Http Servlet Response response , String context Path , String war URL ) throws IO Exception {", "String context = context Path ;", "boolean error = false ;", "if ( context == null ) {", "File file = new File ( war URL ) ;", "String file Name = file . get Name ( ) ;", "if ( file Name . ends With ( STR_ ) ) {", "file Name = file Name . substring ( NUM_ , file Name . last Index Of ( STR_ ) ) ; }", "context = STR_ + file Name ; }", "if ( get Context Handler ( context ) != null ) {", "send Error ( response , STR_ + context ) ;", "error = true ; }", "else if ( ! context . starts With ( STR_ ) ) {", "send Error ( response , STR_ ) ;", "error = true ; }", "if ( error ) {", "return ; }", "else {", "File webapp Dest = new File ( web App Directory , context + STR_ ) ;", "URI uri = null ;", "try {", "uri = new URI ( war URL ) ; }", "catch ( URI Syntax Exception e ) {", "send Error ( response , STR_ + war URL ) ;", "Log . warn ( e ) ;", "return ; }", "File webapp Source = new File ( uri ) ;", "File Input Stream file Input Stream = new File Input Stream ( webapp Source ) ;", "File Output Stream file Output Stream = new File Output Stream ( webapp Dest ) ;", "int i = file Input Stream . read ( ) ;", "while ( i != - NUM_ ) {", "file Output Stream . write ( i ) ;", "i = file Input Stream . read ( ) ; }", "file Input Stream . close ( ) ;", "file Output Stream . flush ( ) ;", "file Output Stream . close ( ) ;", "Web App Context webappcontext = new Web App Context ( ) ;", "webappcontext . set Context Path ( context ) ;", "webappcontext . set War ( webapp Dest . get Path ( ) ) ;", "chc . add Handler ( webappcontext ) ;", "try {", "webappcontext . start ( ) ; }", "catch ( Exception e ) {", "send Error ( response , STR_ ) ;", "Log . warn ( e ) ;", "return ; } }", "send Message ( response , STR_ + context Path ) ; }"]}
{"ids": "52794", "code": ["public Outlier Result run ( Relation < V > relation ) {", "final DBI Ds ids = relation . get DBI Ds ( ) ;", "Array List < Array DBI Ds > subspace Index = build One Dim Indexes ( relation ) ;", "Set < Hi CS Subspace > subspaces = calculate Subspaces ( relation , subspace Index , rnd . get Single Threaded Random ( ) ) ;", "if ( LOG . is Verbose ( ) ) {", "LOG . verbose ( STR_ + subspaces . size ( ) ) ; }", "List < Double Relation > results = new Array List < > ( ) ;", "Finite Progress prog = LOG . is Verbose ( ) ? new Finite Progress ( STR_ , subspaces . size ( ) , LOG ) : null ;", "for ( Hi CS Subspace dimset : subspaces ) {", "if ( LOG . is Verbose ( ) ) {", "LOG . verbose ( STR_ + dimset ) ; }", "Proxy Database pdb = new Proxy Database ( ids ) ;", "pdb . add Relation ( new Projected View < > ( relation , new Numerical Feature Selection < V > ( dimset ) ) ) ;", "Outlier Result result = outlier Algorithm . run ( pdb ) ;", "results . add ( result . get Scores ( ) ) ;", "LOG . increment Processed ( prog ) ; }", "LOG . ensure Completed ( prog ) ;", "Writable Double Data Store scores = Data Store Util . make Double Storage ( relation . get DBI Ds ( ) , Data Store Factory . HINT STATIC ) ;", "Double Min Max minmax = new Double Min Max ( ) ;", "for ( DBID Iter iditer = relation . iter DBI Ds ( ) ; iditer . valid ( ) ; iditer . advance ( ) ) {", "double sum = NUM_ ;", "for ( Double Relation r : results ) {", "final double s = r . double Value ( iditer ) ;", "if ( ! Double . is Na N ( s ) ) {", "sum += s ; } }", "scores . put Double ( iditer , sum ) ;", "minmax . put ( sum ) ; }", "Outlier Score Meta meta = new Basic Outlier Score Meta ( minmax . get Min ( ) , minmax . get Max ( ) ) ;", "Double Relation scoreres = new Materialized Double Relation ( STR_ , STR_ , scores , relation . get DBI Ds ( ) ) ;", "return new Outlier Result ( meta , scoreres ) ; }"]}
{"ids": "34856", "code": ["private void add Unit To External Qual Map ( final Class < ? extends Annotation > anno Class ) {", "Annotation Mirror mirror = Units Relations Tools . build Anno Mirror With No Prefix ( processing Env , anno Class ) ;", "if ( ! is Aliased Annotation ( mirror ) ) {", "String unit Class Name = anno Class . get Canonical Name ( ) ;", "if ( ! external Quals Map . contains Key ( unit Class Name ) ) {", "external Quals Map . put ( unit Class Name , anno Class ) ; } }", "else {", "Class < ? extends Annotation > base Unit Class = get Base Unit Anno Class ( mirror ) ;", "if ( base Unit Class != null ) {", "String base Unit Class Name = base Unit Class . get Canonical Name ( ) ;", "if ( ! external Quals Map . contains Key ( base Unit Class Name ) ) {", "load External Unit ( base Unit Class Name ) ; }", "aliased Annotation ( mirror ) ; }", "else { } }", "add Units Relations ( anno Class ) ; }"]}
{"ids": "78107", "code": ["@ Override protected void on Progress Update ( Integer ... values ) {", "if ( parent != null ) {", "if ( values [ NUM_ ] == ON CACHE END ) {", "parent . on Cache End ( ) ; }", "else if ( values [ NUM_ ] == ON CACHE INTERRUPTED ) {", "Log . i ( TAG , STR_ ) ;", "should Be Stopped = true ;", "parent . on Cache Interrupted ( ) ; }", "else {", "parent . on Cache Progress ( task Count , values [ NUM_ ] ) ; } } }"]}
{"ids": "41721", "code": ["public double dot Product ( Double Vector v ) {", "return x * v . x + y * v . y + z * v . z ; }"]}
{"ids": "11191", "code": ["public Temporal OM Scaling Icon ( Object id , int render Type , boolean interpolate , Image Icon ii ) {", "this ( id , render Type , interpolate , ii . get Image ( ) , NUM_ ) ;", "set Max Scale ( NUM_ ) ;", "set Min Scale ( NUM_ ) ; }"]}
{"ids": "86829", "code": ["public int max Length ( ) {", "if ( m Is Paired ) {", "return ( int ) Math . max ( m Left . max Length ( ) , m Right . max Length ( ) ) ; }", "else {", "return ( int ) m Single . max Length ( ) ; } }"]}
{"ids": "84119", "code": ["public boolean equals Ignore Case ( Str Builder other ) {", "if ( this == other ) {", "return true ; }", "if ( this . size != other . size ) {", "return false ; }", "char this Buf [ ] = this . buffer ;", "char other Buf [ ] = other . buffer ;", "for ( int i = size - NUM_ ; i >= NUM_ ; i -- ) {", "char c 1 = this Buf [ i ] ;", "char c 2 = other Buf [ i ] ;", "if ( c 1 != c 2 && Character . to Upper Case ( c 1 ) != Character . to Upper Case ( c 2 ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "52365", "code": ["public Path Parser ( String path String ) {", "this . path String = path String . to Char Array ( ) ; }"]}
{"ids": "31538", "code": ["public Lua Table ( Varargs varargs , int firstarg ) {", "int nskip = firstarg - NUM_ ;", "int n = Math . max ( varargs . narg ( ) - nskip , NUM_ ) ;", "presize ( n , NUM_ ) ;", "set ( N , value Of ( n ) ) ;", "for ( int i = NUM_ ; i <= n ; i ++ ) set ( i , varargs . arg ( i + nskip ) ) ; }"]}
{"ids": "62512", "code": ["public ID 3 v 24 Frame ( Byte Buffer byte Buffer , String logging Filename ) throws Invalid Frame Exception , Invalid Data Type Exception {", "set Logging Filename ( logging Filename ) ;", "read ( byte Buffer ) ; }"]}
{"ids": "8894", "code": ["public void disable Pan ( Bluetooth Adapter adapter ) {", "if ( m Pan == null ) m Pan = ( Bluetooth Pan ) connect Proxy ( adapter , Bluetooth Profile . PAN ) ;", "assert Not Null ( m Pan ) ;", "long start = System . current Time Millis ( ) ;", "m Pan . set Bluetooth Tethering ( false ) ;", "long stop = System . current Time Millis ( ) ;", "assert False ( m Pan . is Tethering On ( ) ) ;", "write Output ( String . format ( STR_ , ( stop - start ) ) ) ; }"]}
{"ids": "40421", "code": ["public Frame < V > init ( final Frame < ? extends V > src ) {", "return Value = src . return Value ;", "System . arraycopy ( src . values , NUM_ , values , NUM_ , values . length ) ;", "top = src . top ;", "return this ; }"]}
{"ids": "29424", "code": ["public boolean ready ( ) throws IO Exception {", "if ( input == null ) throw new IO Exception ( STR_ ) ;", "if ( index == input . length ( ) ) return false ;", "return true ; }"]}
{"ids": "404", "code": ["private Linked List < Diff > diff compute ( String text 1 , String text 2 , boolean checklines , long deadline ) {", "Linked List < Diff > diffs = new Linked List < Diff > ( ) ;", "if ( text 1 . length ( ) == NUM_ ) {", "diffs . add ( new Diff ( Operation . INSERT , text 2 ) ) ;", "return diffs ; }", "if ( text 2 . length ( ) == NUM_ ) {", "diffs . add ( new Diff ( Operation . DELETE , text 1 ) ) ;", "return diffs ; }", "String longtext = text 1 . length ( ) > text 2 . length ( ) ? text 1 : text 2 ;", "String shorttext = text 1 . length ( ) > text 2 . length ( ) ? text 2 : text 1 ;", "int i = longtext . index Of ( shorttext ) ;", "if ( i != - NUM_ ) {", "Operation op = ( text 1 . length ( ) > text 2 . length ( ) ) ? Operation . DELETE : Operation . INSERT ;", "diffs . add ( new Diff ( op , longtext . substring ( NUM_ , i ) ) ) ;", "diffs . add ( new Diff ( Operation . EQUAL , shorttext ) ) ;", "diffs . add ( new Diff ( op , longtext . substring ( i + shorttext . length ( ) ) ) ) ;", "return diffs ; }", "if ( shorttext . length ( ) == NUM_ ) {", "diffs . add ( new Diff ( Operation . DELETE , text 1 ) ) ;", "diffs . add ( new Diff ( Operation . INSERT , text 2 ) ) ;", "return diffs ; }", "String [ ] hm = diff half Match ( text 1 , text 2 ) ;", "if ( hm != null ) {", "String text 1 a = hm [ NUM_ ] ;", "String text 1 b = hm [ NUM_ ] ;", "String text 2 a = hm [ NUM_ ] ;", "String text 2 b = hm [ NUM_ ] ;", "String mid common = hm [ NUM_ ] ;", "Linked List < Diff > diffs a = diff main ( text 1 a , text 2 a , checklines , deadline ) ;", "Linked List < Diff > diffs b = diff main ( text 1 b , text 2 b , checklines , deadline ) ;", "diffs = diffs a ;", "diffs . add ( new Diff ( Operation . EQUAL , mid common ) ) ;", "diffs . add All ( diffs b ) ;", "return diffs ; }", "if ( checklines && text 1 . length ( ) > NUM_ && text 2 . length ( ) > NUM_ ) {", "return diff line Mode ( text 1 , text 2 , deadline ) ; }", "return diff bisect ( text 1 , text 2 , deadline ) ; }"]}
{"ids": "28480", "code": ["public static long size Of Directory ( File directory ) {", "check Directory ( directory ) ;", "final File [ ] files = directory . list Files ( ) ;", "if ( files == null ) {", "return NUM_ ; }", "long size = NUM_ ;", "for ( final File file : files ) {", "try {", "if ( ! is Symlink ( file ) ) {", "size += size Of ( file ) ;", "if ( size < NUM_ ) {", "break ; } } }", "catch ( IO Exception ioe ) { } }", "return size ; }"]}
{"ids": "19808", "code": ["public boolean is Use SSL ( ) {", "return use SSL ; }"]}
{"ids": "86427", "code": ["public void start ( ) {", "if ( ( m Prox Sensor == null ) || m Is Active ) {", "return ; }", "m Is Active = true ;", "m Should Drop Events = true ;", "m Sensor Manager . register Listener ( m Listener , m Prox Sensor , Sensor Manager . SENSOR DELAY UI ) ;", "Log Utils . log ( this , Log . VERBOSE , STR_ , System . current Time Millis ( ) ) ;", "m Handler . post Delayed ( m Filter Runnable , REGISTRATION EVENT FILTER TIMEOUT ) ; }"]}
{"ids": "82203", "code": ["private Vector apply CSS ( HTML Element element , HTML Component html C , CSS Element [ ] css , Vector nested Selectors , Vector sibling Selectors ) {", "String id = element . get Attribute By Id ( HTML Element . ATTR ID ) ;", "String class Name = element . get Attribute By Id ( HTML Element . ATTR CLASS ) ;", "Vector next Nested Selectors = new Vector ( ) ;", "Vector next Sibling Selectors = null ;", "if ( ! HTML Component . PROCESS HTML MP 1 ONLY ) {", "next Sibling Selectors = new Vector ( ) ; }", "for ( int e = NUM_ ; e < css . length ; e ++ ) {", "CSS Element current Selector = css [ e ] ;", "check Selector ( current Selector , element , html C , class Name , id , next Nested Selectors , next Sibling Selectors ) ; }", "if ( nested Selectors != null ) {", "for ( Enumeration e = nested Selectors . elements ( ) ; e . has More Elements ( ) ; ) {", "CSS Element current Selector = ( CSS Element ) e . next Element ( ) ;", "check Selector ( current Selector , element , html C , class Name , id , next Nested Selectors , next Sibling Selectors ) ; } }", "if ( ( ! HTML Component . PROCESS HTML MP 1 ONLY ) && ( sibling Selectors != null ) ) {", "for ( Enumeration e = sibling Selectors . elements ( ) ; e . has More Elements ( ) ; ) {", "CSS Element current Selector = ( CSS Element ) e . next Element ( ) ;", "check Selector ( current Selector , element , html C , class Name , id , next Nested Selectors , next Sibling Selectors ) ; } }", "if ( next Nested Selectors . size ( ) == NUM_ ) {", "next Nested Selectors = null ; }", "if ( ( ! HTML Component . PROCESS HTML MP 1 ONLY ) && ( next Sibling Selectors . size ( ) == NUM_ ) ) {", "next Sibling Selectors = null ; }", "apply Style Attribute ( element , html C ) ;", "Vector cur Sibling Selectors = null ;", "for ( int i = NUM_ ; i < element . get Num Children ( ) ; i ++ ) {", "HTML Element child = ( HTML Element ) element . get Child At ( i ) ;", "Vector v = apply CSS ( child , html C , css , next Nested Selectors , cur Sibling Selectors ) ;", "if ( ! child . is Text Element ( ) ) {", "cur Sibling Selectors = v ; } }", "return next Sibling Selectors ; }"]}
{"ids": "10219", "code": ["public static String [ ] splitc ( String src , String d ) {", "if ( ( d . length ( ) == NUM_ ) || ( src . length ( ) == NUM_ ) ) {", "return new String [ ] { src } ; }", "return splitc ( src , d . to Char Array ( ) ) ; }"]}
{"ids": "20846", "code": ["public int deflate String 2 Byte Array ( byte [ ] input , int input Offset , int input Length , byte [ ] bytes ) {", "if ( input Length >= MIN SIZE FOR DEFLATION ) {", "deflater . set Input ( input , input Offset , input Length ) ;", "deflater . finish ( ) ;", "int compressed Data Length = deflater . deflate ( bytes ) ;", "deflater . reset ( ) ;", "return - compressed Data Length ; }", "else {", "System . arraycopy ( input , input Offset , bytes , NUM_ , input Length ) ;", "return input Length ; } }"]}
{"ids": "57663", "code": ["private void double Capacity ( ) {", "int p = head ;", "int n = elements . length ;", "int r = n - p ;", "int new Capacity = n << NUM_ ;", "if ( new Capacity < NUM_ ) throw new Illegal State Exception ( STR_ ) ;", "Object [ ] a = new Object [ new Capacity ] ;", "System . arraycopy ( elements , p , a , NUM_ , r ) ;", "System . arraycopy ( elements , NUM_ , a , r , p ) ;", "elements = a ;", "head = NUM_ ;", "tail = n ; }"]}
{"ids": "13815", "code": ["public Marker back To ( int idx ) throws AM Console Exception {", "int size = trail . size ( ) ;", "if ( idx >= size ) {", "throw new AM Console Exception ( STR_ ) ; }", "for ( int i = size - NUM_ ; i > idx ; -- i ) {", "trail . remove ( i ) ; }", "return ( Marker ) trail . get ( idx ) ; }"]}
{"ids": "47460", "code": ["private static long copy ( Input Stream source , Output Stream sink ) throws IO Exception {", "long nread = NUM_ ;", "byte [ ] buf = new byte [ BUFFER SIZE ] ;", "int n ;", "while ( ( n = source . read ( buf ) ) > NUM_ ) {", "sink . write ( buf , NUM_ , n ) ;", "nread += n ; }", "return nread ; }"]}
{"ids": "53936", "code": ["public byte [ ] pack ( ) {", "if ( entries . size ( ) == NUM_ ) return null ;", "int entry Length = owner . get Type ( ) . NODES ENTRY LENGTH ;", "byte [ ] buffer = new byte [ entries . size ( ) * entry Length ] ;", "int max items = buffer . length / NUM_ ;", "int j = NUM_ ;", "for ( K Bucket Entry e : entries ) {", "if ( j >= max items ) {", "break ; }", "Pack Util . Pack Bucket Entry ( e , buffer , j * entry Length , owner . get Type ( ) ) ;", "j ++ ; }", "return buffer ; }"]}
{"ids": "51786", "code": ["public static Gds Type Rule excludes ( String ... excluded Types ) {", "final Set < String > excluded Types Set = new Hash Set < > ( Arrays . as List ( excluded Types ) ) ;", "return new Gds Type Rule ( not ( is In ( excluded Types Set ) ) ) ; }"]}
{"ids": "47465", "code": ["public final Set < String > aliases ( ) {", "if ( alias Set != null ) return alias Set ;", "int n = aliases . length ;", "Hash Set < String > hs = new Hash Set < String > ( n ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) hs . add ( aliases [ i ] ) ;", "alias Set = Collections . unmodifiable Set ( hs ) ;", "return alias Set ; }"]}
{"ids": "67891", "code": ["public synchronized void unweave ( Byte String id ) {", "if ( woven . contains Key ( id ) ) {", "removed . add ( woven . remove ( id ) ) ; } }"]}
{"ids": "50918", "code": ["private static Map < String , Virtual File > find Siblings ( @ Nullable Virtual File directory , Project project , Set < Virtual File > seen ) {", "if ( directory == null ) {", "return Collections . empty Map ( ) ; }", "else {", "if ( seen . contains ( directory ) ) {", "return find Siblings ( null , project , seen ) ; }", "seen . add ( directory ) ;", "Virtual File settings = directory . find Child ( Sdk Constants . FN SETTINGS GRADLE ) ;", "if ( settings == null ) {", "return find Siblings ( directory . get Parent ( ) , project , seen ) ; }", "else {", "return Gradle Module Importer . get Sub Projects ( settings , project ) ; } } }"]}
{"ids": "17952", "code": ["public Authority Key Identifier Structure ( X 509 Certificate certificate ) throws Certificate Parsing Exception {", "super ( from Certificate ( certificate ) ) ; }"]}
{"ids": "85876", "code": ["@ Override public int hash Code ( ) {", "return Arrays . hash Code ( new Immutable Pair [ ] { ( Immutable Pair ) first , ( Immutable Pair ) second } ) ; }"]}
{"ids": "76528", "code": ["@ Suppress Lint ( STR_ ) public static String replace Unicode Digits ( String number ) {", "String Builder normalized Digits = new String Builder ( number . length ( ) ) ;", "for ( char c : number . to Char Array ( ) ) {", "int digit = Character . digit ( c , NUM_ ) ;", "if ( digit != - NUM_ ) {", "normalized Digits . append ( digit ) ; }", "else {", "normalized Digits . append ( c ) ; } }", "return normalized Digits . to String ( ) ; }"]}
{"ids": "66449", "code": ["public String Frie Name ( String value ) {", "if ( value == null || value . length ( ) == NUM_ ) return STR_ ;", "String ret Value = value ;", "String SQL = STR_ ;", "try {", "Prepared Statement pstmt = DB . prepare Statement ( SQL , null ) ;", "pstmt . set String ( NUM_ , value ) ;", "Result Set rs = pstmt . execute Query ( ) ;", "if ( rs . next ( ) ) ret Value = rs . get String ( NUM_ ) ;", "rs . close ( ) ;", "pstmt . close ( ) ; }", "catch ( SQL Exception e ) {", "log . log ( Level . SEVERE , SQL , e ) ; }", "return ret Value ; }"]}
{"ids": "25912", "code": ["@ Override public int read Int ( String file Path ) {", "File Channel file Channel = update Cache ( file Path ) ;", "Byte Buffer byte Bffer = read ( file Channel , Carbon Common Constants . INT SIZE IN BYTE ) ;", "return byte Bffer . get Int ( ) ; }"]}
{"ids": "24552", "code": ["private synchronized void close Output Stream Quietly ( ) {", "if ( ! m Closed ) {", "try {", "m Output Stream . close ( ) ;", "report Decoded Size If Applicable ( ) ; }", "catch ( IO Exception e ) {", "C Log . write To Console ( m Network Peer Manager , Console . Message Level . ERROR , Console . Message Source . NETWORK , STR_ + e ) ; }", "finally {", "m Closed = true ; } } }"]}
{"ids": "3853", "code": ["public void bind ( String address , Service Ref Amp link Service ) {", "link Service Map . put ( address , link Service ) ;", "service Close List . add ( link Service ) ; }"]}
{"ids": "39820", "code": ["private static boolean check Offset ( String value , int offset , char expected ) {", "return ( offset < value . length ( ) ) && ( value . char At ( offset ) == expected ) ; }"]}
{"ids": "77266", "code": ["void add Split ( String split Path ) {", "String [ ] splits = split Path . split ( STR_ ) ;", "for ( String split : splits ) {", "split = split . trim ( ) ;", "if ( split . starts With ( STR_ ) ) throw new Runtime Exception ( STR_ + split ) ;", "if ( split . length ( ) == NUM_ ) continue ;", "add Field ( split , split , false , true ) ; } }"]}
{"ids": "11455", "code": ["public void to Lat Lon ( double v 0 , double h 0 ) {", "final double GX = NUM_ ;", "final double GY = - NUM_ ;", "final double A = NUM_ ;", "final double Q = - NUM_ ;", "final double Q 2 = NUM_ ;", "final double EPSILON = NUM_ ;", "double v = ( double ) v 0 ;", "double h = ( double ) h 0 ;", "double t 1 = ( v - TRANSV ) / RADIUS ;", "double t 2 = ( h - TRANSH ) / RADIUS ;", "double vhat = ROTC * t 2 - ROTS * t 1 ;", "double hhat = ROTS * t 2 + ROTC * t 1 ;", "double e = Math . cos ( Math . sqrt ( vhat * vhat + hhat * hhat ) ) ;", "double w = Math . cos ( Math . sqrt ( vhat * vhat + ( hhat - NUM_ ) * ( hhat - NUM_ ) ) ) ;", "double fx = EY * w - WY * e ;", "double fy = EX * w - WX * e ;", "double b = fx * GX + fy * GY ;", "double c = fx * fx + fy * fy - Q 2 ;", "double disc = b * b - A * c ;", "double x , y , z , delta ;", "if ( Math . abs ( disc ) < EPSILON ) {", "z = b / A ;", "x = ( GX * z - fx ) / Q ;", "y = ( fy - GY * z ) / Q ; }", "else {", "delta = Math . sqrt ( disc ) ;", "z = ( b + delta ) / A ;", "x = ( GX * z - fx ) / Q ;", "y = ( fy - GY * z ) / Q ;", "if ( vhat * ( PX * x + PY * y + PZ * z ) < NUM_ ) {", "z = ( b - delta ) / A ;", "x = ( GX * z - fx ) / Q ;", "y = ( fy - GY * z ) / Q ; } }", "double lat = Math . asin ( z ) ;", "final double [ ] bi = { NUM_ , - NUM_ , NUM_ , - NUM_ , NUM_ , - NUM_ , NUM_ } ;", "double lat 2 = lat * lat ;", "double earthlat = lat * ( bi [ NUM_ ] + lat 2 * ( bi [ NUM_ ] + lat 2 * ( bi [ NUM_ ] + lat 2 * ( bi [ NUM_ ] + lat 2 * ( bi [ NUM_ ] + lat 2 * ( bi [ NUM_ ] + lat 2 * ( bi [ NUM_ ] ) ) ) ) ) ) ) ;", "earthlat = Math . to Degrees ( earthlat ) ;", "double lon = Math . to Degrees ( Math . atan 2 ( x , y ) ) ;", "double earthlon = lon + NUM_ ;", "this . result Lat = earthlat ;", "this . result Lon = - earthlon ; }"]}
{"ids": "63067", "code": ["public void sort Array ( T [ ] d , Comparator < T > c ) {", "this . data = d ;", "this . comp = c ;", "int len = Math . max ( ( int ) ( NUM_ * Math . log ( d . length ) ) , TEMP SIZE ) ;", "len = Math . min ( d . length , len ) ;", "@ Suppress Warnings ( STR_ ) T [ ] t = ( T [ ] ) new Object [ len ] ;", "this . temp = t ;", "merge Sort ( NUM_ , d . length - NUM_ ) ; }"]}
{"ids": "34463", "code": ["public void cache Unit ( Unit Interface unit ) {", "all Units . add ( unit ) ; }"]}
{"ids": "82088", "code": ["public Component find By Name ( String name , Component root Component ) {", "Component c = ( Component ) root Component . get Client Property ( STR_ + name + STR_ ) ;", "if ( c == null ) {", "Container new Root = get Root Ancestor ( root Component ) ;", "if ( new Root != null && root Component != new Root ) {", "return find By Name ( name , new Root ) ; } }", "return c ; }"]}
{"ids": "70995", "code": ["protected void fetch Metadata ( ) throws IO Exception {", "remaining = period ;", "int size = in . read ( ) ;", "if ( size < NUM_ ) return ;", "size <<= NUM_ ;", "if ( mbuffer . length < size ) {", "mbuffer = null ;", "mbuffer = new byte [ size ] ;", "Log . d ( LOG , STR_ + size + STR_ ) ; }", "size = read Fully ( mbuffer , NUM_ , size ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "if ( mbuffer [ i ] == NUM_ ) {", "size = i ;", "break ; } }", "String s ;", "try {", "s = new String ( mbuffer , NUM_ , size , character Encoding ) ; }", "catch ( Exception e ) {", "Log . e ( LOG , STR_ ) ;", "return ; }", "Log . d ( LOG , STR_ + s ) ;", "parse Metadata ( s ) ; }"]}
{"ids": "15106", "code": ["public void start Element ( ) {", "nss . push Context ( ) ;", "in Collecting Mode = true ; }"]}
{"ids": "60348", "code": ["private V replace Node ( Object key , V value , Object cv ) {", "int hash = hash ( ( K ) key ) ;", "for ( Node < K , V > [ ] tab = table ; ; ) {", "Node < K , V > f ;", "int n , i , fh ;", "if ( tab == null || ( n = tab . length ) == NUM_ || ( f = tab At ( tab , i = ( n - NUM_ ) & hash ) ) == null ) {", "break ; }", "else if ( ( fh = f . hash ) == MOVED ) {", "tab = help Transfer ( tab , f ) ; }", "else {", "V old Val = null ;", "boolean validated = false ;", "synchronized ( f ) {", "if ( tab At ( tab , i ) == f ) {", "if ( fh >= NUM_ ) {", "validated = true ;", "for ( Node < K , V > e = f , pred = null ; ; ) {", "if ( e . hash == hash && is Equal ( ( K ) key , e . key ) ) {", "V ev = e . val ;", "if ( cv == null || cv == ev || ( ev != null && cv . equals ( ev ) ) ) {", "old Val = ev ;", "if ( value != null ) {", "e . val = value ; }", "else if ( pred != null ) {", "pred . next = e . next ; }", "else {", "set Tab At ( tab , i , e . next ) ; } }", "break ; }", "pred = e ;", "if ( ( e = e . next ) == null ) {", "break ; } } }", "else if ( f instanceof Tree Bin ) {", "validated = true ;", "Tree Bin < K , V > t = ( Tree Bin < K , V > ) f ;", "Tree Node < K , V > r , p ;", "if ( ( r = t . root ) != null && ( p = r . find Tree Node ( hash , key , null ) ) != null ) {", "V pv = p . val ;", "if ( cv == null || cv == pv || ( pv != null && cv . equals ( pv ) ) ) {", "old Val = pv ;", "if ( value != null ) {", "p . val = value ; }", "else if ( t . remove Tree Node ( p ) ) {", "set Tab At ( tab , i , untreeify ( t . first ) ) ; } } } } } }", "if ( validated ) {", "if ( old Val != null ) {", "if ( value == null ) {", "add Count ( - NUM_ , - NUM_ ) ; }", "return old Val ; }", "break ; } } }", "return null ; }"]}
{"ids": "84291", "code": ["public final void remove Helper Text ( @ Non Null final Char Sequence helper Text ) {", "ensure Not Null ( helper Text , STR_ ) ;", "ensure Not Empty ( helper Text , STR_ ) ;", "helper Texts . remove ( helper Text ) ;", "verify Password Strength ( ) ; }"]}
{"ids": "55862", "code": ["public final synchronized int max PV ( ) {", "if ( computer Player == null ) return NUM_ ;", "return computer Player . get Max PV ( ) ; }"]}
{"ids": "33850", "code": ["public Object remove ( int index ) {", "Range Check ( index ) ;", "mod Count ++ ;", "Object old Value = element Data [ index ] ;", "int num Moved = size - index - NUM_ ;", "if ( num Moved > NUM_ ) System . arraycopy ( element Data , index + NUM_ , element Data , index , num Moved ) ;", "element Data [ -- size ] = null ;", "return old Value ; }"]}
{"ids": "80049", "code": ["public String read Matching Flags ( String text ) {", "clear ( ) ;", "if ( text . starts With ( PM SEPARATOR ) ) {", "final String Tokenizer tok = new String Tokenizer ( text , PM SEPARATOR ) ;", "while ( tok . has More Tokens ( ) ) {", "final String flag = tok . next Token ( ) ;", "if ( flag . equals ( PM TYPE MATCH ) ) {", "type Matching = true ; }", "else if ( flag . equals ( PM EXACT MATCH ) ) {", "exact Matching = true ; }", "else if ( flag . equals ( PM SIMILAR MATCH ) ) {", "similar Matching = true ; }", "else if ( flag . equals ( PM ICASE MATCH ) ) {", "case Insensitive = true ; }", "else if ( flag . equals ( PM JOKER MATCH ) ) {", "joker Matching = true ; }", "else {", "break ; }", "text = text . substring ( flag . length ( ) + NUM_ ) ; }", "if ( is Any Flag Set ( ) ) {", "text = text . substring ( NUM_ ) ; } }", "return text ; }"]}
{"ids": "2071", "code": ["private Tiny Planet Image create Final Tiny Planet ( ) {", "m Result Lock . lock ( ) ;", "try {", "m Result Bitmap . recycle ( ) ;", "m Result Bitmap = null ;", "m Source Bitmap . recycle ( ) ;", "m Source Bitmap = null ; }", "finally {", "m Result Lock . unlock ( ) ; }", "Bitmap source Bitmap = create Padded Source Image ( m Source Image Uri , false ) ;", "int width = source Bitmap . get Width ( ) ;", "int height = source Bitmap . get Height ( ) ;", "int output Size = width / NUM_ ;", "Bitmap result Bitmap = Bitmap . create Bitmap ( output Size , output Size , Bitmap . Config . ARGB 8888 ) ;", "Tiny Planet Native . process ( source Bitmap , width , height , result Bitmap , output Size , m Current Zoom , m Current Angle ) ;", "source Bitmap . recycle ( ) ;", "source Bitmap = null ;", "Byte Array Output Stream jpeg = new Byte Array Output Stream ( ) ;", "result Bitmap . compress ( Compress Format . JPEG , NUM_ , jpeg ) ;", "return new Tiny Planet Image ( add Exif ( jpeg . to Byte Array ( ) ) , output Size ) ; }"]}
{"ids": "40008", "code": ["static int create Shader ( String resource , int type ) throws IO Exception {", "return create Shader ( resource , type , null ) ; }"]}
{"ids": "44559", "code": ["public Model validate Node Against Shape ( Dataset dataset , URI shapes Graph URI , Node focus Node , Node shape , Resource min Severity , Predicate < SH Constraint > constraint Filter , Function < RDF Node , String > label Function , Progress Monitor monitor ) {", "Model results = Jena Util . create Memory Model ( ) ;", "Model old Results = get Current Results Model ( ) ;", "set Current Results Model ( results ) ;", "add Resource Violations ( dataset , shapes Graph URI , focus Node , shape , SHACL Util . get All Constraint Properties ( true ) , min Severity , constraint Filter , results , label Function , monitor ) ;", "set Current Results Model ( old Results ) ;", "return results ; }"]}
{"ids": "49271", "code": ["@ Override public Volatile Image create Back Buffer ( W Component Peer peer ) {", "Component target = ( Component ) peer . get Target ( ) ;", "return new Sun Volatile Image ( target , target . get Width ( ) , target . get Height ( ) , Boolean . TRUE ) ; }"]}
{"ids": "40475", "code": ["public void push ( final double value ) {", "long bits = Double . double To Long Bits ( value ) ;", "if ( bits == NUM_ || bits == NUM_ ) {", "mv . visit Insn ( Opcodes . DCONST 0 + ( int ) value ) ; }", "else {", "mv . visit Ldc Insn ( value ) ; } }"]}
{"ids": "29527", "code": ["public synchronized void add ( int position , Abstract Option option ) {", "Abstract Option search = get By Name ( option . get Name ( ) ) ;", "if ( search != null ) {", "LOG . warn ( STR_ ) ; }", "else {", "List < Abstract Option > old Options = new Array List < Abstract Option > ( options ) ;", "options . add ( position , option ) ;", "option . set Collection ( this ) ;", "List < Abstract Option > new Options = get Options ( ) ;", "fire Indexed Property Change ( PROP OPTIONS , position , old Options , new Options ) ; } }"]}
{"ids": "84145", "code": ["protected Byte Array Output Stream parse Bytes ( Byte Array Output Stream bos ) throws IO Exception {", "int ch ;", "for ( ch = read ( ) ; ch >= NUM_ && ch != STR_ ; ch = read ( ) ) {", "int b 1 = ch ;", "int b 2 = read ( ) ;", "int b 3 = read ( ) ;", "int b 4 = read ( ) ;", "if ( b 4 != STR_ ) {", "int chunk = ( ( base 64 Decode [ b 1 ] << NUM_ ) + ( base 64 Decode [ b 2 ] << NUM_ ) + ( base 64 Decode [ b 3 ] << NUM_ ) + ( base 64 Decode [ b 4 ] ) ) ;", "bos . write ( chunk > > NUM_ ) ;", "bos . write ( chunk > > NUM_ ) ;", "bos . write ( chunk ) ; }", "else if ( b 3 != STR_ ) {", "int chunk = ( ( base 64 Decode [ b 1 ] << NUM_ ) + ( base 64 Decode [ b 2 ] << NUM_ ) + ( base 64 Decode [ b 3 ] ) ) ;", "bos . write ( chunk > > NUM_ ) ;", "bos . write ( chunk ) ; }", "else {", "int chunk = ( ( base 64 Decode [ b 1 ] << NUM_ ) + ( base 64 Decode [ b 2 ] ) ) ;", "bos . write ( chunk ) ; } }", "if ( ch == STR_ ) peek = ch ;", "return bos ; }"]}
{"ids": "59549", "code": ["public static void start Upload Activity For Result ( Activity activity , Account account , int request Code ) {", "Intent action = new Intent ( activity , Upload Files Activity . class ) ;", "action . put Extra ( EXTRA ACCOUNT , ( account ) ) ;", "activity . start Activity For Result ( action , request Code ) ; }"]}
{"ids": "69465", "code": ["public void add Generic Attr ( Generic Attr g ) {", "generic . add Element ( g ) ; }"]}
{"ids": "51744", "code": ["public void stop Trace Session ( int trace Session Id ) throws SQL Exception {", "try ( Fb Service service = attach Service Manager ( ) ) {", "service . start Service Action ( get Trace SPB ( service , isc action svc trace stop , trace Session Id ) ) ;", "queue Service ( service ) ; }", "catch ( IO Exception ioe ) {", "throw new SQL Exception ( ioe ) ; } }"]}
{"ids": "81778", "code": ["String read Substring ( String source , int ofs ) {", "return read Substring ( source , ofs , source . length ( ) ) ; }"]}
{"ids": "73134", "code": ["private synchronized boolean expunge Stale Entries ( ) {", "if ( this . size == NUM_ ) return false ;", "Object r ;", "boolean result = false ;", "while ( ( r = queue . poll ( ) ) != null ) {", "result = true ;", "Single Entry e = ( Single Entry ) r ;", "this . size -= e . cleanup Pk Table ( this . table ) ;", "this . non Dated Entry Count -= e . cleanup Semi Unique Table ( this . non Dated Table ) ; }", "return result ; }"]}
{"ids": "83751", "code": ["public void remove Listener ( Abstract Serial Transport Listener listener ) {", "if ( listener != null ) {", "listeners . remove ( listener ) ; } }"]}
{"ids": "2465", "code": ["private String restore NBT Tags ( String str , Array List < String > nbttags ) {", "int nbtidx = NUM_ ;", "for ( String capture : nbttags ) {", "str = str . replace ( STR_ + nbtidx ++ , capture ) ; }", "return str ; }"]}
{"ids": "37460", "code": ["private void draw Offsets ( final Graphics g ) {", "if ( is Enabled ( ) ) {", "g . set Color ( m font Color Offsets ) ; }", "else {", "g . set Color ( m disabled Color != m bg Color Offset ? m disabled Color : Color . WHITE ) ; }", "final int x = ( - m first Column * m char Width ) + NUM_ ;", "final int bytes To Draw = get Maximum Visible Bytes ( ) ;", "final String format String = m address Mode == Address Mode . BIT 32 ? STR_ : STR_ ;", "for ( int i = NUM_ ; i < bytes To Draw ; i += m bytes Per Row ) {", "final long address = m base Address + ( m first Row * m bytes Per Row ) + i ;", "final String offset String = String . format ( format String , address ) ;", "final int current Row = i / m bytes Per Row ;", "g . draw String ( offset String , x , m padding Top + ( current Row * m row Height ) ) ; } }"]}
{"ids": "52919", "code": ["@ Override public void write External ( Object Output out ) throws IO Exception {", "super . write External ( out ) ;", "out . write Double ( knn Distance ) ; }"]}
{"ids": "2367", "code": ["public void touch ( Date date ) {", "last Seen = ( Date ) date . clone ( ) ; }"]}
{"ids": "30186", "code": ["public static int random ( int i , int j ) {", "return i + ( int ) ( Math . random ( ) * ( j - i ) ) ; }"]}
{"ids": "12666", "code": ["public void remove ( String name ) {", "feature Map . remove ( name ) ; }"]}
{"ids": "59684", "code": ["private List < Column Model > find Columns To Add ( ) {", "List < Column Model > columns To Add = new Array List < Column Model > ( ) ;", "for ( Column Model column Model : m Table Model . get Column Models ( ) ) {", "String column Name = column Model . get Column Name ( ) ;", "if ( ! m Table Model DB . contains Column ( column Name ) ) {", "columns To Add . add ( column Model ) ; } }", "return columns To Add ; }"]}
{"ids": "40998", "code": ["@ Override public Loader < Cursor > on Create Loader ( int id , Bundle args ) {", "Uri uri = Fm Radio Station . Station . CONTENT URI ;", "String select = Fm Radio Station . Station . COLUMN STATION TYPE + STR_ ;", "String order = Fm Radio Station . Station . COLUMN STATION TYPE + STR_ + Fm Radio Station . Station . COLUMN STATION FREQ ;", "Cursor Loader cursor Loader = new Cursor Loader ( this , uri , Fm Radio Station . COLUMNS , select , new String [ ] { String . value Of ( Fm Radio Station . STATION TYPE FAVORITE ) , String . value Of ( Fm Radio Station . STATION TYPE SEARCHED ) } , order ) ;", "return cursor Loader ; }"]}
{"ids": "80051", "code": ["@ Override public boolean equals ( final Object other ) {", "if ( this == other ) {", "return true ; }", "else if ( other == null ) {", "return false ; }", "else if ( other instanceof Expression Matcher ) {", "final Expression Matcher o = ( Expression Matcher ) other ;", "if ( type Matching != o . type Matching ) {", "return false ; }", "else if ( exact Matching != o . exact Matching ) {", "return false ; }", "else if ( similar Matching != o . similar Matching ) {", "return false ; }", "else if ( case Insensitive != o . case Insensitive ) {", "return false ; }", "else {", "return ( joker Matching == o . joker Matching ) ; } }", "else {", "return false ; } }"]}
{"ids": "53903", "code": ["public boolean has Capabilities ( List < String > capabilities ) {", "String [ ] arr = new String [ capabilities . size ( ) ] ;", "capabilities . to Array ( arr ) ;", "return has Capabilities ( arr ) ; }"]}
{"ids": "23989", "code": ["public static void assign Buckets To Partitions ( Region < ? , ? > region ) {", "Partitioned Region pr = is Partitioned Check ( region ) ;", "Recovery Lock lock = null ;", "try {", "lock = pr . get Recovery Lock ( ) ;", "lock . lock ( ) ;", "for ( int i = NUM_ ; i < get Number Of Buckets ( pr ) ; i ++ ) {", "pr . create Bucket ( i , NUM_ , null ) ; } }", "finally {", "if ( lock != null ) {", "lock . unlock ( ) ; } } }"]}
{"ids": "17114", "code": ["public synchronized void add Listener ( Listener l ) {", "listeners . add ( l ) ; }"]}
{"ids": "84477", "code": ["public boolean ends With ( final String str ) {", "if ( str == null ) {", "return false ; }", "final int len = str . length ( ) ;", "if ( len == NUM_ ) {", "return true ; }", "if ( len > size ) {", "return false ; }", "int pos = size - len ;", "for ( int i = NUM_ ; i < len ; i ++ , pos ++ ) {", "if ( buffer [ pos ] != str . char At ( i ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "57644", "code": ["public boolean find ( int start ) {", "if ( start < NUM_ || start > input . length ( ) ) {", "throw new Index Out Of Bounds Exception ( STR_ + start + STR_ + input . length ( ) ) ; }", "synchronized ( this ) {", "match Found = find Impl ( address , input , start , match Offsets ) ; }", "return match Found ; }"]}
{"ids": "81774", "code": ["public void apply Pattern ( String pattern ) {", "this . pattern = pattern ;", "if ( pattern Tokens != null ) {", "pattern Tokens . clear ( ) ;", "pattern Tokens = null ; } }"]}
{"ids": "20459", "code": ["public int number Of Replies ( final Resource comment ) {", "final Iterator < Resource > children = comment . list Children ( ) ;", "int size = NUM_ ;", "while ( children . has Next ( ) ) {", "children . next ( ) ;", "size ++ ; }", "return size ; }"]}
{"ids": "14858", "code": ["public void clean Up Remote Sessions ( ) {", "synchronized ( remote Session Set ) {", "for ( Iterator iter = remote Session Set . iterator ( ) ; iter . has Next ( ) ; ) {", "Session ID session ID = ( Session ID ) iter . next ( ) ;", "String host Server = null ;", "try {", "host Server = get Current Host Server ( session ID ) ; }", "catch ( Exception ex ) { }", "if ( ! server Config . is Local Server ( host Server ) ) {", "iter . remove ( ) ; } } } }"]}
{"ids": "44508", "code": ["public boolean column Exists Case Sensitive ( Database Meta Data db Meta Data , String table Name , String column Name ) throws SQL Exception {", "Result Set rs Tables = db Meta Data . get Columns ( null , null , table Name , column Name ) ;", "try {", "return rs Tables . next ( ) ; }", "finally {", "close JDBC Result Set ( rs Tables ) ; } }"]}
{"ids": "45097", "code": ["public void action Performed ( Action Event e ) {", "Caret c = text Area . get Caret ( ) ;", "if ( c . get Dot ( ) != c . get Mark ( ) ) {", "return ; }", "R Syntax Document doc = ( R Syntax Document ) text Area . get Document ( ) ;", "doc . read Lock ( ) ;", "try {", "remove Highlights ( ) ;", "int line = text Area . get Caret Line Number ( ) ;", "Token token List = text Area . get Token List For Line ( line ) ;", "int dot = c . get Dot ( ) ;", "Token t = R Syntax Utilities . get Token At Offset ( token List , dot ) ;", "if ( t == null || ! is Valid Type ( t ) || is Non Word Char ( t ) ) {", "dot -- ;", "try {", "if ( dot >= text Area . get Line Start Offset ( line ) ) {", "t = R Syntax Utilities . get Token At Offset ( token List , dot ) ; } }", "catch ( Bad Location Exception ble ) {", "ble . print Stack Trace ( ) ; } }", "if ( t != null && is Valid Type ( t ) && ! is Non Word Char ( t ) ) {", "R Syntax Text Area Highlighter h = ( R Syntax Text Area Highlighter ) text Area . get Highlighter ( ) ;", "String lexeme = t . get Lexeme ( ) ;", "int type = t . type ;", "for ( int i = NUM_ ; i < text Area . get Line Count ( ) ; i ++ ) {", "Token temp = text Area . get Token List For Line ( i ) ;", "while ( temp != null && temp . is Paintable ( ) ) {", "if ( temp . is ( type , lexeme ) ) {", "try {", "int end = temp . offset + temp . text Count ;", "Object tag = h . add Marked Occurrence Highlight ( temp . offset , end , p ) ;", "tags . add ( tag ) ; }", "catch ( Bad Location Exception ble ) {", "ble . print Stack Trace ( ) ; } }", "temp = temp . get Next Token ( ) ; } } } }", "finally {", "doc . read Unlock ( ) ; }", "text Area . fire Marked Occurrences Changed ( ) ; }"]}
{"ids": "67828", "code": ["public int read ( ) throws IO Exception {", "if ( ! buf . has Remaining ( ) ) {", "return - NUM_ ; }", "return buf . get ( ) & NUM_ ; }"]}
{"ids": "45268", "code": ["public void characters Raw ( char ch [ ] , int start , int length ) throws org . xml . sax . SAX Exception {", "if ( is Outside Doc Elem ( ) && XML Character Recognizer . is White Space ( ch , start , length ) ) return ;", "String s = new String ( ch , start , length ) ;", "append ( m doc . create Processing Instruction ( STR_ , STR_ ) ) ;", "append ( m doc . create Text Node ( s ) ) ; }"]}
{"ids": "16985", "code": ["private void handle Release ( ) {", "float speed = Math . max ( drag Helper . get Drag Speed ( ) , animation Speed ) ;", "if ( get Top Margin ( ) > initial Margin || ( drag Helper . get Drag Speed ( ) > animation Speed && drag Helper . get Distance ( ) > NUM_ ) || ( get Device Type ( get Context ( ) ) == Device Type . TABLET && is Maximized ( ) && get Top Margin ( ) > min Margin ) ) {", "animate Hide View ( parent Height - get Top Margin ( ) , speed , new Decelerate Interpolator ( ) , true ) ; }", "else {", "animate Show View ( - ( get Top Margin ( ) - min Margin ) , speed , new Decelerate Interpolator ( ) ) ; } }"]}
{"ids": "12209", "code": ["private String normalize Type Value ( String type ) {", "if ( INSERT . equals ( type ) ) return INSERT ;", "if ( REMOVE . equals ( type ) ) return REMOVE ;", "return null ; }"]}
{"ids": "68317", "code": ["@ Override public Log Seq Num write To Log ( ) {", "List < Constant > rec = build Record ( ) ;", "return log Mgr . append ( rec . to Array ( new Constant [ rec . size ( ) ] ) ) ; }"]}
{"ids": "74608", "code": ["public static double gaussian ( ) {", "double r , x , y ;", "do {", "x = uniform ( - NUM_ , NUM_ ) ;", "y = uniform ( - NUM_ , NUM_ ) ;", "r = x * x + y * y ; }", "while ( r >= NUM_ || r == NUM_ ) ;", "return x * Math . sqrt ( - NUM_ * Math . log ( r ) / r ) ; }"]}
{"ids": "63119", "code": ["public void done With Parameters ( ) {", "if ( info . parameter Count == VAR ARGS ) {", "int len = var Args . size ( ) ;", "check Parameter Count ( len ) ;", "args = new Expression [ len ] ;", "var Args . to Array ( args ) ;", "var Args = null ; }", "else {", "int len = args . length ;", "if ( len > NUM_ && args [ len - NUM_ ] == null ) {", "throw Db Exception . get ( Error Code . INVALID PARAMETER COUNT 2 , info . name , STR_ + len ) ; } } }"]}
{"ids": "40925", "code": ["public void remove All X 509 Certificates ( ) {", "x 509 Certificates . clear ( ) ; }"]}
{"ids": "58257", "code": ["public DTM Axis Iterator clone Iterator ( ) {", "is Restartable = false ;", "try {", "final Preceding Iterator clone = ( Preceding Iterator ) super . clone ( ) ;", "final int [ ] stack Copy = new int [ stack . length ] ;", "System . arraycopy ( stack , NUM_ , stack Copy , NUM_ , stack . length ) ;", "clone . stack = stack Copy ;", "return clone ; }", "catch ( Clone Not Supported Exception e ) {", "throw new DTM Exception ( XML Messages . create XML Message ( XML Error Resources . ER ITERATOR CLONE NOT SUPPORTED , null ) ) ; } }"]}
{"ids": "56066", "code": ["private String read Response From Server ( Http URL Connection url Connection ) throws Request Failure Exception {", "try {", "Input Stream Reader reader = new Input Stream Reader ( url Connection . get Input Stream ( ) ) ;", "Buffered Reader in = new Buffered Reader ( reader ) ;", "try {", "String Builder response = new String Builder ( ) ;", "for ( String line = in . read Line ( ) ; line != null ; line = in . read Line ( ) ) {", "response . append ( line ) ; }", "check Server Response Code ( url Connection ) ;", "return response . to String ( ) ; }", "finally {", "in . close ( ) ; } }", "catch ( IO Exception e ) {", "throw new Request Failure Exception ( STR_ , e ) ; } }"]}
{"ids": "52046", "code": ["private void read Object ( Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "if ( name == null ) {", "throw new Null Pointer Exception ( ) ; }", "if ( node Type == null ) {", "throw new Null Pointer Exception ( ) ; } }"]}
{"ids": "13105", "code": ["public int contains ( Value Store Base vsb ) {", "final Vector values = vsb . f Values ;", "final int size 1 = values . size ( ) ;", "if ( f Field Count <= NUM_ ) {", "for ( int i = NUM_ ; i < size 1 ; ++ i ) {", "short val = vsb . get Value Type At ( i ) ;", "if ( ! value Type Contains ( val ) || ! f Values . contains ( values . element At ( i ) ) ) {", "return i ; }", "else if ( val == XS Constants . LIST DT || val == XS Constants . LISTOFUNION DT ) {", "Short List list 1 = vsb . get Item Value Type At ( i ) ;", "if ( ! item Value Type Contains ( list 1 ) ) {", "return i ; } } } }", "else {", "final int size 2 = f Values . size ( ) ;", "OUTER : for ( int i = NUM_ ; i < size 1 ; i += f Field Count ) {", "INNER : for ( int j = NUM_ ; j < size 2 ; j += f Field Count ) {", "for ( int k = NUM_ ; k < f Field Count ; ++ k ) {", "final Object value 1 = values . element At ( i + k ) ;", "final Object value 2 = f Values . element At ( j + k ) ;", "final short value Type 1 = vsb . get Value Type At ( i + k ) ;", "final short value Type 2 = get Value Type At ( j + k ) ;", "if ( value 1 != value 2 && ( value Type 1 != value Type 2 || value 1 == null || ! value 1 . equals ( value 2 ) ) ) {", "continue INNER ; }", "else if ( value Type 1 == XS Constants . LIST DT || value Type 1 == XS Constants . LISTOFUNION DT ) {", "Short List list 1 = vsb . get Item Value Type At ( i + k ) ;", "Short List list 2 = get Item Value Type At ( j + k ) ;", "if ( list 1 == null || list 2 == null || ! list 1 . equals ( list 2 ) ) {", "continue INNER ; } } }", "continue OUTER ; }", "return i ; } }", "return - NUM_ ; }"]}
{"ids": "15468", "code": ["public boolean is Supported Option ( String name ) {", "boolean is Supported = false ;", "for ( Iterator i = mandatory Options . iterator ( ) ; i . has Next ( ) && ! is Supported ; ) {", "String opt = ( String ) i . next ( ) ;", "is Supported = opt . equals ( name ) ; }", "for ( Iterator i = optional Options . iterator ( ) ; i . has Next ( ) && ! is Supported ; ) {", "String opt = ( String ) i . next ( ) ;", "is Supported = opt . equals ( name ) ; }", "return is Supported ; }"]}
{"ids": "87056", "code": ["public String Builder encode Body ( String Builder retval ) {", "return retval . append ( option Tag ) ; }"]}
{"ids": "57935", "code": ["public void add Literal Result Attribute ( AVT avt ) {", "if ( null == m avts ) m avts = new Array List ( ) ;", "m avts . add ( avt ) ; }"]}
{"ids": "86355", "code": ["protected void move Selection To First Position ( ) {", "if ( selection Table . get Selection Count ( ) == NUM_ ) {", "return ; }", "int index = NUM_ ;", "for ( final Table Item table Item : selection Table . get Selection ( ) ) {", "final DL Item item = ( DL Item ) table Item . get Data ( ) ;", "selection . remove ( item ) ;", "selection . add ( index ++ , item ) ; }", "redraw Tables ( ) ;", "selection Table . select ( NUM_ , index - NUM_ ) ;", "selection Table . force Focus ( ) ; }"]}
{"ids": "78144", "code": ["private void items Array To Combined Buffer ( T [ ] items Array ) {", "final int extra = NUM_ ;", "min Value = items Array [ NUM_ ] ;", "max Value = items Array [ NUM_ ] ;", "System . arraycopy ( items Array , extra , combined Buffer , NUM_ , base Buffer Count ) ;", "long bits = bit Pattern ;", "if ( bits > NUM_ ) {", "int index = extra + base Buffer Count ;", "for ( int level = NUM_ ; bits != NUM_ ; level ++ , bits >>>= NUM_ ) {", "if ( ( bits & NUM_ ) > NUM_ ) {", "System . arraycopy ( items Array , index , combined Buffer , ( NUM_ + level ) * k , k ) ;", "index += k ; } } } }"]}
{"ids": "30569", "code": ["public SQL Query ( Class < T > type , String sql Expression , Query Result Type query Result Type , Object ... parameters ) {", "this ( sql Expression , type . get Name ( ) , null , query Result Type , parameters ) ; }"]}
{"ids": "78390", "code": ["public void bob ( Mowzie Model Renderer box , float speed , float degree , boolean bounce , float f , float f 1 ) {", "float bob = ( float ) ( Math . sin ( f * speed ) * f 1 * degree - f 1 * degree ) ;", "if ( bounce ) bob = ( float ) - Math . abs ( ( Math . sin ( f * speed ) * f 1 * degree ) ) ;", "box . rotation Point Y += bob ; }"]}
{"ids": "63207", "code": ["private static void reject Unsupported Options ( Properties p ) throws SQL Feature Not Supported Exception {", "if ( p . contains Key ( Data Source Factory . JDBC ROLE NAME ) ) {", "throw new SQL Feature Not Supported Exception ( STR_ + Data Source Factory . JDBC ROLE NAME + STR_ ) ; }", "if ( p . contains Key ( Data Source Factory . JDBC DATASOURCE NAME ) ) {", "throw new SQL Feature Not Supported Exception ( STR_ + Data Source Factory . JDBC DATASOURCE NAME + STR_ ) ; } }"]}
{"ids": "6275", "code": ["public IO Utils ( ) {", "super ( ) ; }"]}
{"ids": "27106", "code": ["private int read Annotation Value ( int v , final char [ ] buf , final String name , final Annotation Visitor av ) {", "int i ;", "if ( av == null ) {", "switch ( b [ v ] & NUM_ ) {", "case STR_ :", "return v + NUM_ ;", "case STR_ :", "return read Annotation Values ( v + NUM_ , buf , true , null ) ;", "case STR_ :", "return read Annotation Values ( v + NUM_ , buf , false , null ) ;", "default :", "return v + NUM_ ; } }", "switch ( b [ v ++ ] & NUM_ ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "av . visit ( name , read Const ( read Unsigned Short ( v ) , buf ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , ( byte ) read Int ( items [ read Unsigned Short ( v ) ] ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , read Int ( items [ read Unsigned Short ( v ) ] ) == NUM_ ? Boolean . FALSE : Boolean . TRUE ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , ( short ) read Int ( items [ read Unsigned Short ( v ) ] ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , ( char ) read Int ( items [ read Unsigned Short ( v ) ] ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , read UTF 8 ( v , buf ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit Enum ( name , read UTF 8 ( v , buf ) , read UTF 8 ( v + NUM_ , buf ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "av . visit ( name , Type . get Type ( read UTF 8 ( v , buf ) ) ) ;", "v += NUM_ ;", "break ;", "case STR_ :", "v = read Annotation Values ( v + NUM_ , buf , true , av . visit Annotation ( name , read UTF 8 ( v , buf ) ) ) ;", "break ;", "case STR_ :", "int size = read Unsigned Short ( v ) ;", "v += NUM_ ;", "if ( size == NUM_ ) {", "return read Annotation Values ( v - NUM_ , buf , false , av . visit Array ( name ) ) ; }", "switch ( this . b [ v ++ ] & NUM_ ) {", "case STR_ :", "byte [ ] bv = new byte [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "bv [ i ] = ( byte ) read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , bv ) ;", "-- v ;", "break ;", "case STR_ :", "boolean [ ] zv = new boolean [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "zv [ i ] = read Int ( items [ read Unsigned Short ( v ) ] ) != NUM_ ;", "v += NUM_ ; }", "av . visit ( name , zv ) ;", "-- v ;", "break ;", "case STR_ :", "short [ ] sv = new short [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "sv [ i ] = ( short ) read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , sv ) ;", "-- v ;", "break ;", "case STR_ :", "char [ ] cv = new char [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "cv [ i ] = ( char ) read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , cv ) ;", "-- v ;", "break ;", "case STR_ :", "int [ ] iv = new int [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "iv [ i ] = read Int ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , iv ) ;", "-- v ;", "break ;", "case STR_ :", "long [ ] lv = new long [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "lv [ i ] = read Long ( items [ read Unsigned Short ( v ) ] ) ;", "v += NUM_ ; }", "av . visit ( name , lv ) ;", "-- v ;", "break ;", "case STR_ :", "float [ ] fv = new float [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "fv [ i ] = Float . int Bits To Float ( read Int ( items [ read Unsigned Short ( v ) ] ) ) ;", "v += NUM_ ; }", "av . visit ( name , fv ) ;", "-- v ;", "break ;", "case STR_ :", "double [ ] dv = new double [ size ] ;", "for ( i = NUM_ ; i < size ; i ++ ) {", "dv [ i ] = Double . long Bits To Double ( read Long ( items [ read Unsigned Short ( v ) ] ) ) ;", "v += NUM_ ; }", "av . visit ( name , dv ) ;", "-- v ;", "break ;", "default :", "v = read Annotation Values ( v - NUM_ , buf , false , av . visit Array ( name ) ) ; } }", "return v ; }"]}
{"ids": "60743", "code": ["private void decrement Worker Count ( ) {", "do { }", "while ( ! compare And Decrement Worker Count ( ctl . get ( ) ) ) ; }"]}
{"ids": "41953", "code": ["public static float build Float ( int mant , int exp ) {", "if ( exp < - NUM_ || mant == NUM_ ) {", "return NUM_ ; }", "if ( exp >= NUM_ ) {", "return ( mant > NUM_ ) ? Float . POSITIVE INFINITY : Float . NEGATIVE INFINITY ; }", "if ( exp == NUM_ ) {", "return mant ; }", "if ( mant >= ( NUM_ << NUM_ ) ) {", "mant ++ ; }", "return ( float ) ( ( exp > NUM_ ) ? mant * pow 10 [ exp ] : mant / pow 10 [ - exp ] ) ; }"]}
{"ids": "60117", "code": ["public void clear Values ( ) {", "m Data Sets . clear ( ) ;", "notify Data Changed ( ) ; }"]}
{"ids": "72287", "code": ["public boolean has Mode Support ( ) {", "return is Available ( ) && m Capabilities . intersects ( m All Modes ) ; }"]}
{"ids": "85785", "code": ["public static void update Item In Database ( Context context , final Item Info item ) {", "final Content Values values = new Content Values ( ) ;", "item . on Add To Database ( context , values ) ;", "update Item In Database Helper ( context , values , item , STR_ ) ; }"]}
{"ids": "38043", "code": ["@ Override public String graph ( ) throws Exception {", "String Buffer text = new String Buffer ( ) ;", "text . append ( STR_ ) ;", "m cobweb Tree . graph Tree ( text ) ;", "text . append ( STR_ ) ;", "return text . to String ( ) ; }"]}
{"ids": "38913", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = enum To Vector ( super . list Options ( ) ) ;", "result . add Element ( new Option ( STR_ + default Num Attributes ( ) + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "17835", "code": ["public synchronized Reference < ? extends T > remove ( long timeout Millis ) throws Interrupted Exception {", "if ( timeout Millis < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + timeout Millis ) ; }", "if ( head != null ) {", "return poll ( ) ; }", "if ( timeout Millis == NUM_ || ( timeout Millis > Long . MAX VALUE / NANOS PER MILLI ) ) {", "do {", "wait ( NUM_ ) ; }", "while ( head == null ) ;", "return poll ( ) ; }", "long nanos To Wait = timeout Millis * NANOS PER MILLI ;", "int timeout Nanos = NUM_ ;", "long start Time = System . nano Time ( ) ;", "while ( true ) {", "wait ( timeout Millis , timeout Nanos ) ;", "if ( head != null ) {", "break ; }", "long nanos Elapsed = System . nano Time ( ) - start Time ;", "long nanos Remaining = nanos To Wait - nanos Elapsed ;", "if ( nanos Remaining <= NUM_ ) {", "break ; }", "timeout Millis = nanos Remaining / NANOS PER MILLI ;", "timeout Nanos = ( int ) ( nanos Remaining - timeout Millis * NANOS PER MILLI ) ; }", "return poll ( ) ; }"]}
{"ids": "3720", "code": ["public Path Impl lookup Impl ( String user Path , Map < String , Object > new Attributes , boolean is Allow Root ) {", "if ( user Path == null ) {", "return lookup Impl ( get Path ( ) , new Attributes , is Allow Root ) ; }", "if ( ! is Allow Root ) {", "return scheme Walk ( user Path , new Attributes , user Path , NUM_ ) ; }", "String scheme = scan Scheme ( user Path ) ;", "if ( scheme == null ) {", "return scheme Walk ( user Path , new Attributes , user Path , NUM_ ) ; }", "Path Impl path ;", "Scheme Map scheme Map = scheme Map ;", "if ( is Windows ( ) ) {", "int length = scheme . length ( ) ;", "char ch ;", "if ( length == NUM_ && ( STR_ <= ( ch = scheme . char At ( NUM_ ) ) && ch <= STR_ || STR_ <= ch && ch <= STR_ ) ) {", "user Path = Character . to Lower Case ( ch ) + user Path . substring ( NUM_ ) ;", "if ( is Test Windows ) return scheme Walk ( user Path , new Attributes , STR_ + user Path , NUM_ ) ;", "path = scheme Map . get ( STR_ ) ;", "if ( path != null ) return path . scheme Walk ( user Path , new Attributes , STR_ + user Path , NUM_ ) ;", "else return scheme Walk ( user Path , new Attributes , STR_ + user Path , NUM_ ) ; } }", "path = scheme Map . get ( scheme ) ;", "if ( path == null ) {", "return scheme Walk ( user Path , new Attributes , user Path , NUM_ ) ; }", "else {", "return path . scheme Walk ( user Path , new Attributes , user Path , scheme . length ( ) + NUM_ ) ; } }"]}
{"ids": "71845", "code": ["static Integer read Rule ID ( final Substring Reader reader ) throws Decode Exception {", "int length = NUM_ ;", "reader . skip Whitespaces ( ) ;", "reader . mark ( ) ;", "try {", "while ( reader . read ( ) != STR_ ) {", "length ++ ; }", "if ( length == NUM_ ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX RULE ID NO VALUE 1 . get ( reader . pos ( ) - NUM_ ) ) ; }", "reader . reset ( ) ;", "final String rule ID = reader . read ( length ) ;", "try {", "return Integer . value Of ( rule ID ) ; }", "catch ( final Number Format Exception e ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX RULE ID INVALID 1 . get ( rule ID ) ) ; } }", "catch ( final String Index Out Of Bounds Exception e ) {", "throw Decode Exception . error ( ERR ATTR SYNTAX TRUNCATED VALUE 1 . get ( ) ) ; } }"]}
{"ids": "71602", "code": ["public void remove Index ( I Index index ) {", "if ( index != null ) {", "indices . remove ( index ) ; } }"]}
{"ids": "29266", "code": ["private Attribute Action Set process Attribute Section ( Mode Usage mode Usage , String ns , Int Set index Set , Attributes attributes ) throws SAX Exception {", "Mode mode = mode Usage . get Mode ( current Section . context ) ;", "Attribute Action Set actions = mode . get Attribute Actions ( ns ) ;", "if ( actions . get Reject ( ) && ! attribute Namespace Rejected ) {", "attribute Namespace Rejected = true ;", "if ( eh != null ) eh . error ( new SAX Parse Exception ( localizer . message ( STR_ , ns ) , locator ) ) ; }", "Schema [ ] schemas = actions . get Schemas ( ) ;", "for ( int j = NUM_ ; j < schemas . length ; j ++ ) {", "if ( attribute Schemas . contains ( schemas [ j ] ) ) continue ;", "attribute Schemas . add ( schemas [ j ] ) ;", "if ( filtered Attributes == null ) filtered Attributes = filter Attributes ( index Set , attributes ) ;", "validate Attributes ( schemas [ j ] , filtered Attributes ) ; }", "return actions ; }"]}
{"ids": "78493", "code": ["public void initialize ( Context context , Haptic Feedback Controller haptic Feedback Controller , int initial Hours Of Day , int initial Minutes , boolean is 24 Hour Mode ) {", "if ( m Time Initialized ) {", "Log . e ( TAG , STR_ ) ;", "return ; }", "m Haptic Feedback Controller = haptic Feedback Controller ;", "m Is 24 Hour Mode = is 24 Hour Mode ;", "m Hide Am Pm = m Accessibility Manager . is Touch Exploration Enabled ( ) ? true : m Is 24 Hour Mode ;", "m Circle View . initialize ( context , m Hide Am Pm ) ;", "m Circle View . invalidate ( ) ;", "if ( ! m Hide Am Pm ) {", "m Am Pm Circles View . initialize ( context , initial Hours Of Day < NUM_ ? AM : PM ) ;", "m Am Pm Circles View . invalidate ( ) ; }", "Resources res = context . get Resources ( ) ;", "int [ ] hours = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ;", "int [ ] hours 24 = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ;", "int [ ] minutes = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ;", "String [ ] hours Texts = new String [ NUM_ ] ;", "String [ ] inner Hours Texts = new String [ NUM_ ] ;", "String [ ] minutes Texts = new String [ NUM_ ] ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "hours Texts [ i ] = is 24 Hour Mode ? String . format ( STR_ , hours 24 [ i ] ) : String . format ( STR_ , hours [ i ] ) ;", "inner Hours Texts [ i ] = String . format ( STR_ , hours [ i ] ) ;", "minutes Texts [ i ] = String . format ( STR_ , minutes [ i ] ) ; }", "m Hour Radial Texts View . initialize ( res , hours Texts , ( is 24 Hour Mode ? inner Hours Texts : null ) , m Hide Am Pm , true ) ;", "m Hour Radial Texts View . invalidate ( ) ;", "m Minute Radial Texts View . initialize ( res , minutes Texts , null , m Hide Am Pm , false ) ;", "m Minute Radial Texts View . invalidate ( ) ;", "set Value For Item ( HOUR INDEX , initial Hours Of Day ) ;", "set Value For Item ( MINUTE INDEX , initial Minutes ) ;", "int hour Degrees = ( initial Hours Of Day % NUM_ ) * HOUR VALUE TO DEGREES STEP SIZE ;", "m Hour Radial Selector View . initialize ( context , m Hide Am Pm , is 24 Hour Mode , true , hour Degrees , is Hour Inner Circle ( initial Hours Of Day ) ) ;", "int minute Degrees = initial Minutes * MINUTE VALUE TO DEGREES STEP SIZE ;", "m Minute Radial Selector View . initialize ( context , m Hide Am Pm , false , false , minute Degrees , false ) ;", "m Time Initialized = true ; }"]}
{"ids": "36151", "code": ["@ Override public double conf ( double total Weight , double delta ) {", "return inverse Normal ( NUM_ - delta / NUM_ ) / ( NUM_ * Math . sqrt ( total Weight ) ) ; }"]}
{"ids": "12784", "code": ["@ Override public final int read Unsigned Byte ( ) throws IO Exception {", "return dis . read Unsigned Byte ( ) ; }"]}
{"ids": "31068", "code": ["public synchronized static void ensure Security Manager ( @ Suppress Warnings ( STR_ ) String [ ] args ) {", "Security Policy Loader . load ( System Boot . class , STR_ ) ;", "System . set Security Manager ( new RMI Security Manager ( ) ) ; }"]}
{"ids": "7453", "code": ["@ Override public Object clone ( ) throws Clone Not Supported Exception {", "return super . clone ( ) ; }"]}
{"ids": "37941", "code": ["public String ridge Tip Text ( ) {", "return STR_ ; }"]}
{"ids": "20824", "code": ["public void update Enable State Swing Items ( ) {", "if ( Swing Utilities . is Event Dispatch Thread ( ) ) super . update Enable State ( ) ; }"]}
{"ids": "15959", "code": ["public void reset ( ) {", "System . arraycopy ( IV , NUM_ , cbc V , NUM_ , IV . length ) ;", "Arrays . fill ( cbc Next V , ( byte ) NUM_ ) ;", "cipher . reset ( ) ; }"]}
{"ids": "10485", "code": ["protected final boolean load To Have At Least ( int min Available ) throws IO Exception {", "if ( input Stream == null ) {", "return false ; }", "int amount = input End - input Ptr ;", "if ( amount > NUM_ && input Ptr > NUM_ ) {", "curr Input Processed += input Ptr ;", "System . arraycopy ( input Buffer , input Ptr , input Buffer , NUM_ , amount ) ;", "input End = amount ; }", "else {", "input End = NUM_ ; }", "input Ptr = NUM_ ;", "while ( input End < min Available ) {", "int count = input Stream . read ( input Buffer , input End , input Buffer . length - input End ) ;", "if ( count < NUM_ ) {", "close Input ( ) ;", "if ( count == NUM_ ) {", "throw new IO Exception ( STR_ + amount + STR_ ) ; }", "return false ; }", "input End += count ; }", "return true ; }"]}
{"ids": "54079", "code": ["public Data Type Parser register ( int jdbc Type , String grammar ) {", "Objects . require Non Null ( grammar , STR_ ) ;", "Data Type Pattern pattern = parser . parse ( jdbc Type , grammar ) ;", "pattern . for Each First Token ( null ) ;", "return this ; }"]}
{"ids": "79509", "code": ["public void close ( ) throws Generic Data Source Exception {", "if ( manual TX ) {", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + manual TX , module ) ;", "commit ( ) ; }", "sql = null ;", "if ( rs != null ) {", "try {", "rs . close ( ) ;", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + manual TX , module ) ; }", "catch ( SQL Exception sqle ) {", "Debug . log Warning ( sqle . get Message ( ) , module ) ; }", "rs = null ; }", "if ( ps != null ) {", "try {", "ps . close ( ) ;", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + manual TX , module ) ; }", "catch ( SQL Exception sqle ) {", "Debug . log Warning ( sqle . get Message ( ) , module ) ; }", "ps = null ; }", "if ( ( connection != null ) && b Delete Connection ) {", "try {", "connection . close ( ) ;", "if ( Debug . verbose On ( ) ) Debug . log Verbose ( STR_ + manual TX , module ) ; }", "catch ( SQL Exception sqle ) {", "Debug . log Warning ( sqle . get Message ( ) , module ) ; }", "connection = null ; } }"]}
{"ids": "43724", "code": ["private Default Mutable Tree Node copy ( Tree Node node ) {", "return new Default Mutable Tree Node ( node ) ; }"]}
{"ids": "3370", "code": ["public byte [ ] data ( ) {", "Byte Array Output Stream bos = new Byte Array Output Stream ( ) ;", "try {", "to Data ( bos ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; }", "return bos . to Byte Array ( ) ; }"]}
{"ids": "56655", "code": ["@ Safe Varargs public static < T > Reactive Seq < T > of ( final T ... elements ) {", "final Reversing Array Spliterator < T > array = new Reversing Array Spliterator < T > ( elements , false , NUM_ ) ;", "return Stream Utils . reactive Seq ( Stream Support . stream ( array , false ) , Optional . of Nullable ( array ) ) ; }"]}
{"ids": "25528", "code": ["private void decode Ltp ( Long Term Prediction ltp , int max Sfb ) {", "ltp . lag = br . read ( NUM_ ) ;", "ltp . coef = ltp coef [ br . read ( NUM_ ) ] ;", "for ( int sfb = NUM_ ; sfb < Math . min ( max Sfb , MAX LTP LONG SFB ) ; sfb ++ ) {", "ltp . used [ sfb ] = br . read Bool ( ) ; } }"]}
{"ids": "9039", "code": ["public static < T > List < T > instantiate All ( String [ ] classes , Class Loader class Loader ) {", "List < T > clazzes = new Array List < T > ( ) ;", "for ( String clazz : classes ) {", "if ( String Utils . has Length ( clazz ) ) {", "try {", "clazzes . add ( Class Utils . < T > instantiate ( clazz , class Loader ) ) ; }", "catch ( Exception e ) {", "throw new Cassandra Migration Exception ( STR_ + clazz , e ) ; } } }", "return clazzes ; }"]}
{"ids": "65248", "code": ["static void clear Instance Cache ( ) {", "synchronized ( INSTANCE CACHE ) {", "INSTANCE CACHE . clear ( ) ; } }"]}
{"ids": "56965", "code": ["public static < E extends Enum < E > & Bitmapable Enum > Enum Set < E > to Enum Set ( Class < E > type , int bitmap ) {", "if ( type == null ) throw new Null Pointer Exception ( STR_ ) ;", "Enum Set < E > s = Enum Set . none Of ( type ) ;", "int all Set Bitmap = NUM_ ;", "for ( E element : type . get Enum Constants ( ) ) {", "if ( Integer . bit Count ( element . get Value ( ) ) != NUM_ ) {", "String msg = String . format ( STR_ + STR_ + STR_ , element . to String ( ) , element . get Value ( ) , type . get Name ( ) ) ;", "throw new Illegal Argument Exception ( msg ) ; }", "all Set Bitmap |= element . get Value ( ) ;", "if ( ( bitmap & element . get Value ( ) ) != NUM_ ) s . add ( element ) ; }", "if ( ( ( ~ all Set Bitmap ) & bitmap ) != NUM_ ) {", "String msg = String . format ( STR_ + STR_ , bitmap , type . get Name ( ) ) ;", "throw new Illegal Argument Exception ( msg ) ; }", "return s ; }"]}
{"ids": "69980", "code": ["public synchronized void notify Session Borrowed ( ) {", "if ( LOGGER . is Trace Enabled ( ) ) LOGGER . log Trace ( this + STR_ ) ;", "current Context = new Transaction Context ( resource , xa Resource ) ;", "all Contexts . add ( current Context ) ;", "closed = false ; }"]}
{"ids": "63398", "code": ["@ Override public synchronized void close ( ) throws SQL Exception {", "try {", "debug Code Call ( STR_ ) ;", "if ( session == null ) {", "return ; }", "Close Watcher . unregister ( watcher ) ;", "session . cancel ( ) ;", "if ( executing Statement != null ) {", "try {", "executing Statement . cancel ( ) ; }", "catch ( Null Pointer Exception e ) { } }", "synchronized ( session ) {", "try {", "if ( ! session . is Closed ( ) ) {", "try {", "if ( session . has Pending Transaction ( ) ) {", "if ( ! session . is Reconnect Needed ( true ) ) {", "try {", "rollback Internal ( ) ; }", "catch ( Db Exception e ) {", "if ( e . get Error Code ( ) != Error Code . CONNECTION BROKEN 1 ) {", "throw e ; } } }", "session . after Writing ( ) ; }", "close Prepared Commands ( ) ; }", "finally {", "session . close ( ) ; } } }", "finally {", "session = null ; } } }", "catch ( Exception e ) {", "throw log And Convert ( e ) ; } }"]}
{"ids": "20200", "code": ["public static WKT Geometry create Empty ( WKT Type wkt Type ) {", "WKT Geometry wkt Geometry = new WKT Geometry ( ) ;", "wkt Geometry . set Geometry Type ( wkt Type ) ;", "return wkt Geometry ; }"]}
{"ids": "53943", "code": ["public Peer Lookup Task create Peer Lookup ( byte [ ] info hash ) {", "if ( ! is Running ( ) ) {", "return null ; }", "Key id = new Key ( info hash ) ;", "RPC Server srv = server Manager . get Random Active Server ( false ) ;", "if ( srv == null ) return null ;", "Peer Lookup Task lookup Task = new Peer Lookup Task ( srv , node , id ) ;", "return lookup Task ; }"]}
{"ids": "10121", "code": ["public void add Child ( Node ... nodes ) {", "for ( Node node : nodes ) {", "node . detach From Parent ( ) ;", "node . parent Node = this ;", "init Child Nodes ( node ) ;", "child Nodes . add ( node ) ; }", "reindex Children On Add ( nodes . length ) ; }"]}
{"ids": "30081", "code": ["public static void write String ASCII ( Byte Buf stream , String str ) throws Unsupported Encoding Exception {", "final byte [ ] bytes = str . get Bytes ( STR_ ) ;", "stream . write Int ( str . length ( ) ) ;", "stream . write Bytes ( bytes ) ; }"]}
{"ids": "75366", "code": ["@ Override public void on Detach ( ) {", "synchronized ( m Thread ) {", "m Progress Bar = null ;", "m Ready = false ;", "m Thread . notify ( ) ; }", "super . on Detach ( ) ; }"]}
{"ids": "54809", "code": ["public void output Source ( int module , int line , String s ) {", "String Builder sb = new String Builder ( ) ;", "append Source ( sb , module , line , s , true ) ;", "out ( sb . to String ( ) ) ; }"]}
{"ids": "1150", "code": ["public static String suppress White Space ( String str ) {", "int len = str . length ( ) ;", "String Builder sb = new String Builder ( len ) ;", "char c ;", "char buffer = NUM_ ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "c = str . char At ( i ) ;", "if ( c == STR_ || c == STR_ ) buffer = STR_ ;", "else if ( is White Space ( c ) ) {", "if ( buffer == NUM_ ) buffer = c ; }", "else {", "if ( buffer != NUM_ ) {", "sb . append ( buffer ) ;", "buffer = NUM_ ; }", "sb . append ( c ) ; } }", "if ( buffer != NUM_ ) sb . append ( buffer ) ;", "return sb . to String ( ) ; }"]}
{"ids": "30695", "code": ["private Node < K , V > find Predecessor ( Comparable < ? super K > key ) {", "if ( key == null ) throw new Null Pointer Exception ( ) ;", "for ( ; ; ) {", "Index < K , V > q = head ;", "Index < K , V > r = q . right ;", "for ( ; ; ) {", "if ( r != null ) {", "Node < K , V > n = r . node ;", "K k = n . key ;", "if ( n . value == null ) {", "if ( ! q . unlink ( r ) ) break ;", "r = q . right ;", "continue ; }", "if ( key . compare To ( k ) > NUM_ ) {", "q = r ;", "r = r . right ;", "continue ; } }", "Index < K , V > d = q . down ;", "if ( d != null ) {", "q = d ;", "r = d . right ; }", "else return q . node ; } } }"]}
{"ids": "17426", "code": ["protected Connection State SS Lv 3 ( SSL Session Impl session ) {", "try {", "Cipher Suite cipher Suite = session . cipher Suite ;", "boolean is exportabe = cipher Suite . is Exportable ( ) ;", "hash size = cipher Suite . get MAC Length ( ) ;", "int key size = ( is exportabe ) ? cipher Suite . key Material : cipher Suite . expanded Key Material ;", "int iv size = cipher Suite . iv Size ;", "block size = cipher Suite . get Block Size ( ) ;", "String alg Name = cipher Suite . get Bulk Encryption Algorithm ( ) ;", "String hash Name = cipher Suite . get Hash Name ( ) ;", "if ( logger != null ) {", "logger . println ( STR_ ) ;", "logger . println ( STR_ + session . get Cipher Suite ( ) ) ;", "logger . println ( STR_ + alg Name ) ;", "logger . println ( STR_ + hash Name ) ;", "logger . println ( STR_ + hash size ) ;", "logger . println ( STR_ + block size ) ;", "logger . println ( STR_ + iv size ) ;", "logger . println ( STR_ + key size ) ; }", "byte [ ] client Random = session . client Random ;", "byte [ ] server Random = session . server Random ;", "byte [ ] key block = new byte [ NUM_ * hash size + NUM_ * key size + NUM_ * iv size ] ;", "byte [ ] seed = new byte [ client Random . length + server Random . length ] ;", "System . arraycopy ( server Random , NUM_ , seed , NUM_ , server Random . length ) ;", "System . arraycopy ( client Random , NUM_ , seed , server Random . length , client Random . length ) ;", "PRF . compute PRF SS Lv 3 ( key block , session . master secret , seed ) ;", "byte [ ] client mac secret = new byte [ hash size ] ;", "byte [ ] server mac secret = new byte [ hash size ] ;", "byte [ ] client key = new byte [ key size ] ;", "byte [ ] server key = new byte [ key size ] ;", "boolean is client = ! session . is Server ;", "System . arraycopy ( key block , NUM_ , client mac secret , NUM_ , hash size ) ;", "System . arraycopy ( key block , hash size , server mac secret , NUM_ , hash size ) ;", "System . arraycopy ( key block , NUM_ * hash size , client key , NUM_ , key size ) ;", "System . arraycopy ( key block , NUM_ * hash size + key size , server key , NUM_ , key size ) ;", "Iv Parameter Spec client IV = null ;", "Iv Parameter Spec server IV = null ;", "if ( is exportabe ) {", "if ( logger != null ) {", "logger . println ( STR_ ) ; }", "Message Digest md 5 = Message Digest . get Instance ( STR_ ) ;", "md 5 . update ( client key ) ;", "md 5 . update ( client Random ) ;", "md 5 . update ( server Random ) ;", "client key = md 5 . digest ( ) ;", "md 5 . update ( server key ) ;", "md 5 . update ( server Random ) ;", "md 5 . update ( client Random ) ;", "server key = md 5 . digest ( ) ;", "key size = cipher Suite . expanded Key Material ;", "if ( block size != NUM_ ) {", "md 5 . update ( client Random ) ;", "md 5 . update ( server Random ) ;", "client IV = new Iv Parameter Spec ( md 5 . digest ( ) , NUM_ , iv size ) ;", "md 5 . update ( server Random ) ;", "md 5 . update ( client Random ) ;", "server IV = new Iv Parameter Spec ( md 5 . digest ( ) , NUM_ , iv size ) ; } }", "else if ( block size != NUM_ ) {", "client IV = new Iv Parameter Spec ( key block , NUM_ * hash size + NUM_ * key size , iv size ) ;", "server IV = new Iv Parameter Spec ( key block , NUM_ * hash size + NUM_ * key size + iv size , iv size ) ; }", "if ( logger != null ) {", "logger . println ( STR_ + is exportabe ) ;", "logger . println ( STR_ ) ;", "logger . print ( session . master secret ) ;", "logger . println ( STR_ ) ;", "logger . print ( client Random ) ;", "logger . println ( STR_ ) ;", "logger . print ( server Random ) ;", "logger . println ( STR_ ) ;", "logger . print ( client mac secret ) ;", "logger . println ( STR_ ) ;", "logger . print ( server mac secret ) ;", "logger . println ( STR_ ) ;", "logger . print ( client key , NUM_ , key size ) ;", "logger . println ( STR_ ) ;", "logger . print ( server key , NUM_ , key size ) ;", "if ( client IV != null ) {", "logger . println ( STR_ ) ;", "logger . print ( client IV . get IV ( ) ) ;", "logger . println ( STR_ ) ;", "logger . print ( server IV . get IV ( ) ) ; }", "else {", "logger . println ( STR_ ) ; } }", "if ( alg Name == null ) {", "enc Cipher = new Null Cipher ( ) ;", "dec Cipher = new Null Cipher ( ) ; }", "else {", "enc Cipher = Cipher . get Instance ( alg Name ) ;", "dec Cipher = Cipher . get Instance ( alg Name ) ;", "if ( is client ) {", "enc Cipher . init ( Cipher . ENCRYPT MODE , new Secret Key Spec ( client key , NUM_ , key size , alg Name ) , client IV ) ;", "dec Cipher . init ( Cipher . DECRYPT MODE , new Secret Key Spec ( server key , NUM_ , key size , alg Name ) , server IV ) ; }", "else {", "enc Cipher . init ( Cipher . ENCRYPT MODE , new Secret Key Spec ( server key , NUM_ , key size , alg Name ) , server IV ) ;", "dec Cipher . init ( Cipher . DECRYPT MODE , new Secret Key Spec ( client key , NUM_ , key size , alg Name ) , client IV ) ; } }", "message Digest = Message Digest . get Instance ( hash Name ) ;", "if ( is client ) {", "mac write secret = client mac secret ;", "mac read secret = server mac secret ; }", "else {", "mac write secret = server mac secret ;", "mac read secret = client mac secret ; }", "if ( hash Name . equals ( STR_ ) ) {", "pad 1 = SS Lv 3 Constants . MD 5 pad 1 ;", "pad 2 = SS Lv 3 Constants . MD 5 pad 2 ; }", "else {", "pad 1 = SS Lv 3 Constants . SH Apad 1 ;", "pad 2 = SS Lv 3 Constants . SH Apad 2 ; } }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Alert Exception ( Alert Protocol . INTERNAL ERROR , new SSL Protocol Exception ( STR_ ) ) ; } }"]}
{"ids": "45418", "code": ["public static void clean Directory ( File directory ) throws IO Exception {", "if ( ! directory . exists ( ) ) {", "String message = directory + STR_ ;", "throw new Illegal Argument Exception ( message ) ; }", "if ( ! directory . is Directory ( ) ) {", "String message = directory + STR_ ;", "throw new Illegal Argument Exception ( message ) ; }", "File [ ] files = directory . list Files ( ) ;", "if ( files == null ) {", "throw new IO Exception ( STR_ + directory ) ; }", "IO Exception exception = null ;", "for ( File file : files ) {", "try {", "force Delete ( file ) ; }", "catch ( IO Exception ioe ) {", "exception = ioe ; } }", "if ( null != exception ) {", "throw exception ; } }"]}
{"ids": "43387", "code": ["public void not Idle ( ) {", "if ( idle Timeout Msec . get ( ) > NUM_ ) last Action Msec . set ( System . current Time Millis ( ) ) ; }"]}
{"ids": "83970", "code": ["public static byte [ ] gzip ( final String input ) {", "final Byte Array Output Stream baos = new Fast Byte Array Output Stream ( ) ;", "GZIP Output Stream gzos = null ;", "try {", "gzos = new GZIP Output Stream ( baos ) ;", "gzos . write ( input . get Bytes ( STR_ ) ) ; }", "catch ( final IO Exception e ) {", "Main Util . handle Error ( e ) ; }", "finally {", "if ( gzos != null ) {", "try {", "gzos . close ( ) ; }", "catch ( final IO Exception ignore ) { } } }", "return baos . to Byte Array ( ) ; }"]}
{"ids": "25122", "code": ["@ Override public void end Document ( ) throws SAX Exception {", "if ( resource != null ) {", "resource . add All Resource ( js Vector ) ;", "for ( Object object : resource . get Resource Set ( ) ) {", "Resource r = ( Resource ) object ;", "if ( r . get Resource ( ) != null ) {", "parser . set Resource ( ( Resource ) r ) ;", "parser . run ( ) ;", "js Set . add ( parser . get Result ( ) ) ; } } } }"]}
{"ids": "24930", "code": ["public void add Method To Display ( Method Ident method Ident ) {", "methods . add ( method Ident ) ; }"]}
{"ids": "37969", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = new Vector < Option > ( ) ;", "result . add Element ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "result . add All ( Collections . list ( super . list Options ( ) ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "52261", "code": ["private void select Connecting Edges ( List < Display Node > display Nodes ) {", "if ( ! is Allow Node Edge Selection ( ) ) {", "return ; }", "Component [ ] components = get Components ( ) ;", "for ( Component comp : components ) {", "if ( comp instanceof I Display Edge ) {", "I Display Edge graph Edge = ( I Display Edge ) comp ;", "Display Node node 1 = graph Edge . get Comp 1 ( ) ;", "Display Node node 2 = graph Edge . get Comp 2 ( ) ;", "if ( node 1 instanceof Graph Node Error ) {", "continue ; }", "if ( node 2 instanceof Graph Node Error ) {", "continue ; }", "if ( node 2 != null ) {", "boolean selected = display Nodes . contains ( node 1 ) && display Nodes . contains ( node 2 ) ;", "graph Edge . set Selected ( selected ) ; } } } }"]}
{"ids": "19530", "code": ["public static String class Name Only ( String type Name ) {", "String dotted = descriptor To Dot ( type Name ) ;", "int start = dotted . last Index Of ( STR_ ) ;", "if ( start < NUM_ ) {", "return dotted ; }", "else {", "return dotted . substring ( start + NUM_ ) ; } }"]}
{"ids": "16694", "code": ["public Hyper Graph search ( ) {", "long start Time = System . current Time Millis ( ) ;", "Future future = new Future ( chart ) ;", "stacks = new Array List < > ( ) ;", "stacks . add ( null ) ;", "Compute Node Result result = new Compute Node Result ( this . feature Functions , Hypothesis . BEGIN RULE , null , - NUM_ , NUM_ , null , this . sentence ) ;", "Stack first Stack = new Stack ( sentence , config ) ;", "first Stack . add ( new Hypothesis ( result . get DP States ( ) , future . Full ( ) ) ) ;", "stacks . add ( first Stack ) ;", "for ( int source words = NUM_ ; source words <= sentence . length ( ) ; ++ source words ) {", "Stack target Stack = new Stack ( sentence , config ) ;", "stacks . add ( target Stack ) ;", "for ( int phrase length = NUM_ ; phrase length <= Math . min ( source words - NUM_ , chart . Max Source Phrase Length ( ) ) ; phrase length ++ ) {", "int from stack = source words - phrase length ;", "Stack tail Stack = stacks . get ( from stack ) ;", "LOG . debug ( STR_ , source words , chart . Max Source Phrase Length ( ) , from stack , phrase length ) ;", "for ( Coverage coverage : tail Stack . get Coverages ( ) ) {", "Array List < Hypothesis > hypotheses = tail Stack . get ( coverage ) ;", "int begin = coverage . first Zero ( ) ;", "int last end = Math . min ( coverage . first Zero ( ) + config . reordering limit , chart . Sentence Length ( ) ) ;", "int last begin = ( last end > phrase length ) ? ( last end - phrase length ) : NUM_ ;", "for ( begin = coverage . first Zero ( ) ; begin <= last begin ; begin ++ ) {", "if ( ! coverage . compatible ( begin , begin + phrase length ) || ! permissible ( coverage , begin , begin + phrase length ) ) {", "continue ; }", "if ( begin == sentence . length ( ) - NUM_ && source words != sentence . length ( ) ) continue ;", "Phrase Nodes phrases = chart . get Range ( begin , begin + phrase length ) ;", "if ( phrases == null ) continue ;", "LOG . debug ( STR_ , phrases . size ( ) , begin , begin + phrase length ) ;", "float future delta = future . Change ( coverage , begin , begin + phrase length ) ;", "Candidate cand = new Candidate ( feature Functions , sentence , hypotheses , phrases , future delta , new int [ ] { NUM_ , NUM_ } ) ;", "target Stack . add Candidate ( cand ) ; } } }", "target Stack . search ( ) ; }", "LOG . info ( STR_ , sentence . id ( ) , ( System . current Time Millis ( ) - start Time ) / NUM_ ) ;", "return create Goal Node ( ) ; }"]}
{"ids": "33109", "code": ["public static List < Library Location > gather All Libraries ( String [ ] dir Paths ) {", "List < Library Location > libraries = new Array List < Library Location > ( ) ;", "for ( int i = NUM_ ; i < dir Paths . length ; i ++ ) {", "File ext Dir = new File ( dir Paths [ i ] ) ;", "if ( ext Dir . is Directory ( ) ) {", "String [ ] names = ext Dir . list ( fg Archive Filter ) ;", "if ( names != null ) {", "for ( int j = NUM_ ; j < names . length ; j ++ ) {", "File jar = new File ( ext Dir , names [ j ] ) ;", "if ( jar . is File ( ) ) {", "try {", "I Path lib Path = new Path ( jar . get Canonical Path ( ) ) ;", "I Path source Path = Path . EMPTY ;", "I Path package Root = Path . EMPTY ;", "URL javadoc Location = null ;", "URL index Location = null ;", "Library Location library = new Library Location ( lib Path , source Path , package Root , javadoc Location , index Location ) ;", "libraries . add ( library ) ; }", "catch ( IO Exception e ) {", "Launching . log ( e ) ; } } } } } }", "return libraries ; }"]}
{"ids": "2105", "code": ["public void request Close ( ) {", "m Lock . lock ( ) ;", "try {", "if ( m Is Shutdown ) {", "return ; }", "m Target State = Target State . CLOSED ;", "update ( ) ; }", "finally {", "m Lock . unlock ( ) ; } }"]}
{"ids": "77137", "code": ["private void reserve One Doc ( ) {", "if ( pending Num Docs . increment And Get ( ) > Index Writer . get Actual Max Docs ( ) ) {", "pending Num Docs . decrement And Get ( ) ;", "throw new Illegal Argument Exception ( STR_ + Index Writer . get Actual Max Docs ( ) ) ; } }"]}
{"ids": "26456", "code": ["public static void stream Content To Browser ( Http Servlet Response response , Input Stream in , int length , String content Type , String file Name ) throws IO Exception {", "set Response Browser Proxy No Cache ( response ) ;", "response . set Content Length ( length ) ;", "if ( content Type != null ) {", "response . set Content Type ( content Type ) ; }", "if ( file Name != null ) {", "response . set Header ( STR_ , STR_ + file Name + STR_ ) ; }", "Output Stream out = response . get Output Stream ( ) ;", "try {", "stream Content ( out , in , length ) ; }", "catch ( IO Exception e ) {", "out . close ( ) ;", "throw e ; }", "out . flush ( ) ;", "out . close ( ) ; }"]}
{"ids": "51875", "code": ["private static boolean is Valid Method Name ( String method Name ) {", "return method Name . matches ( STR_ ) ; }"]}
{"ids": "42443", "code": ["public static byte [ ] to UTF 8 ( String s ) {", "byte [ ] result = new byte [ utf Length ( s ) ] ;", "int result index = NUM_ ;", "for ( int i = NUM_ , n = s . length ( ) ; i < n ; ++ i ) {", "char c = s . char At ( i ) ;", "if ( ( ( ! WRITE PSEUDO UTF 8 ) || ( c >= NUM_ ) ) && ( c <= NUM_ ) ) {", "result [ result index ++ ] = ( byte ) c ; }", "else if ( c > NUM_ ) {", "result [ result index ++ ] = ( byte ) ( NUM_ | ( byte ) ( c > > NUM_ ) ) ;", "result [ result index ++ ] = ( byte ) ( NUM_ | ( ( c & NUM_ ) > > NUM_ ) ) ;", "result [ result index ++ ] = ( byte ) ( NUM_ | ( c & NUM_ ) ) ; }", "else {", "result [ result index ++ ] = ( byte ) ( NUM_ | ( byte ) ( c > > NUM_ ) ) ;", "result [ result index ++ ] = ( byte ) ( NUM_ | ( c & NUM_ ) ) ; } }", "return result ; }"]}
{"ids": "48933", "code": ["public void pln ( Object o ) throws IO Exception {", "p ( o . to String ( ) ) ;", "pln ( ) ; }"]}
{"ids": "9441", "code": ["public static double expm 1 ( double value ) {", "if ( USE JDK MATH ) {", "return STRICT MATH ? Strict Math . expm 1 ( value ) : Math . expm 1 ( value ) ; }", "if ( Math . abs ( value ) < EXP LO DISTANCE TO ZERO ) {", "int i = ( int ) ( value * EXP LO INDEXING ) ;", "double delta = value - i * ( NUM_ / EXP LO INDEXING ) ;", "return exp Lo Pos Tab [ i + EXP LO TAB MID INDEX ] * ( exp Lo Neg Tab [ i + EXP LO TAB MID INDEX ] + delta * ( NUM_ + delta * ( NUM_ / NUM_ + delta * ( NUM_ / NUM_ + delta * ( NUM_ / NUM_ + delta * ( NUM_ / NUM_ ) ) ) ) ) ) ; }", "else {", "return Fast Math . exp ( value ) - NUM_ ; } }"]}
{"ids": "73950", "code": ["public void delete Conditional ( Conditional c ) {", "deregister ( c ) ; }"]}
{"ids": "9054", "code": ["public static void parse Model To Content Values ( Object model , Content Values content Values ) {", "if ( content Values . size ( ) > NUM_ ) content Values . clear ( ) ;", "Class < ? > clazz = model . get Class ( ) ;", "Field [ ] fields = clazz . get Declared Fields ( ) ;", "Class < ? > field Type = null ;", "Object field Val = null ;", "for ( Field field : fields ) {", "try {", "if ( field . is Accessible ( ) == false ) field . set Accessible ( true ) ;", "Column column = field . get Annotation ( Column . class ) ;", "field Type = field . get Type ( ) ;", "field Val = field . get ( model ) ;", "if ( column == null || field Val == null ) continue ;", "if ( field Type . equals ( int . class ) ) {", "content Values . put ( column . name ( ) , field . get Int ( model ) ) ; }", "else if ( field Type . equals ( Integer . class ) ) {", "content Values . put ( column . name ( ) , ( Integer ) field . get ( model ) ) ; }", "else if ( field Type . equals ( short . class ) ) {", "content Values . put ( column . name ( ) , field . get Short ( model ) ) ; }", "else if ( field Type . equals ( Short . class ) ) {", "content Values . put ( column . name ( ) , ( Short ) field . get ( model ) ) ; }", "else if ( field Type . equals ( long . class ) ) {", "content Values . put ( column . name ( ) , field . get Long ( model ) ) ; }", "else if ( field Type . equals ( Long . class ) ) {", "content Values . put ( column . name ( ) , ( Long ) field . get ( model ) ) ; }", "else if ( field Type . equals ( float . class ) ) {", "content Values . put ( column . name ( ) , field . get Float ( model ) ) ; }", "else if ( field Type . equals ( Float . class ) ) {", "content Values . put ( column . name ( ) , ( Float ) field . get ( model ) ) ; }", "else if ( field Type . equals ( double . class ) ) {", "content Values . put ( column . name ( ) , field . get Double ( model ) ) ; }", "else if ( field Type . equals ( Double . class ) ) {", "content Values . put ( column . name ( ) , ( Double ) field . get ( model ) ) ; }", "else if ( field Type . equals ( boolean . class ) ) {", "if ( field . get Boolean ( model ) == true ) {", "content Values . put ( column . name ( ) , STR_ ) ; }", "else {", "content Values . put ( column . name ( ) , STR_ ) ; } }", "else if ( field Type . equals ( Boolean . class ) ) {", "if ( ( Boolean ) field . get ( model ) == true ) {", "content Values . put ( column . name ( ) , STR_ ) ; }", "else {", "content Values . put ( column . name ( ) , STR_ ) ; } }", "else if ( field Type . equals ( String . class ) ) {", "content Values . put ( column . name ( ) , ( String ) field . get ( model ) ) ; }", "else if ( field Type . equals ( byte [ ] . class ) ) {", "content Values . put ( column . name ( ) , ( byte [ ] ) field . get ( model ) ) ; }", "else if ( field Type . equals ( Date . class ) ) {", "Date date = ( Date ) field . get ( model ) ;", "content Values . put ( column . name ( ) , Date Utils . format Date 2 Str ( date ) ) ; } }", "catch ( Illegal Argument Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( Illegal Access Exception e ) {", "e . print Stack Trace ( ) ; } } }"]}
{"ids": "41062", "code": ["private void add Block To Worklist ( Ssa Basic Block ssa Block ) {", "if ( ! executable Blocks . get ( ssa Block . get Index ( ) ) ) {", "cfg Worklist . add ( ssa Block ) ;", "executable Blocks . set ( ssa Block . get Index ( ) ) ; }", "else {", "cfg Phi Worklist . add ( ssa Block ) ; } }"]}
{"ids": "70448", "code": ["private static boolean is 32 Bit Jvm ( ) {", "Integer bits = Integer . get Integer ( STR_ ) ;", "return bits != null && bits == NUM_ ; }"]}
{"ids": "64848", "code": ["public float angle ( ) {", "return ( float ) Math . atan 2 ( y ( ) , x ( ) ) ; }"]}
{"ids": "36295", "code": ["public static String format Number ( double value , int number Of Digits , boolean grouping Characters ) {", "if ( Double . is Na N ( value ) ) {", "return STR_ ; }", "int number Digits = number Of Digits ;", "if ( number Digits < NUM_ ) {", "number Digits = number Of Fraction Digits ; }", "NUMBER FORMAT . set Minimum Fraction Digits ( number Digits ) ;", "NUMBER FORMAT . set Maximum Fraction Digits ( number Digits ) ;", "NUMBER FORMAT . set Grouping Used ( grouping Characters ) ;", "return NUMBER FORMAT . format ( value ) ; }"]}
{"ids": "6470", "code": ["private J Panel create Legend Panel ( J Panel base Panel ) {", "final J Panel panel ;", "if ( base Panel != null ) {", "base Panel . remove All ( ) ;", "base Panel . set Layout ( new Grid Bag Layout ( ) ) ;", "panel = base Panel ; }", "else {", "panel = new J Panel ( new Grid Bag Layout ( ) ) ; }", "panel . set Border ( Border Factory . create Titled Border ( I 18 n . tr ( STR_ ) ) ) ;", "Grid Bag Constraints gbc = new Grid Bag Constraints ( ) ;", "gbc . anchor = Grid Bag Constraints . WEST ;", "gbc . insets = new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "J Check Box check Box = new J Check Box ( ) ;", "check Box . set Selected ( true ) ;", "panel . add ( create Icon Label ( check Box ) , gbc ) ;", "Multi Line Label label = new Multi Line Label ( I 18 n . tr ( STR_ ) , true ) ;", "Grid Bag Constraints label Gbc = new Grid Bag Constraints ( ) ;", "label Gbc . anchor = Grid Bag Constraints . WEST ;", "label Gbc . fill = Grid Bag Constraints . HORIZONTAL ;", "label Gbc . gridwidth = Grid Bag Constraints . REMAINDER ;", "label Gbc . gridx = NUM_ ;", "label Gbc . weightx = NUM_ ;", "panel . add ( label , label Gbc ) ;", "check Box . set Selected ( false ) ;", "gbc . gridy = NUM_ ;", "panel . add ( create Icon Label ( check Box ) , gbc ) ;", "label = new Multi Line Label ( I 18 n . tr ( STR_ ) , true ) ;", "label Gbc . gridy = NUM_ ;", "panel . add ( label , label Gbc ) ;", "check Box . set Icon ( partially Included Icon ) ;", "gbc . gridy = NUM_ ;", "gbc . insets = new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "panel . add ( create Icon Label ( check Box ) , gbc ) ;", "label = new Multi Line Label ( I 18 n . tr ( STR_ ) , true ) ;", "label Gbc . gridy = NUM_ ;", "gbc . insets = null ;", "panel . add ( label , label Gbc ) ;", "return panel ; }"]}
{"ids": "32151", "code": ["private static boolean is Trash Id ( Ignite Uuid id ) {", "if ( id == null ) return false ;", "UUID gid = id . global Id ( ) ;", "return id . local Id ( ) == NUM_ && gid . get Most Significant Bits ( ) == NUM_ && gid . get Least Significant Bits ( ) > NUM_ && gid . get Least Significant Bits ( ) <= TRASH CONCURRENCY ; }"]}
{"ids": "16137", "code": ["private void on Time Element End ( ) throws SAX Exception {", "try {", "time Ms = XML DATE TIME FORMAT . parse Millis ( content . trim ( ) ) ; }", "catch ( Illegal Argument Exception e ) {", "throw new SAX Exception ( create Error Message ( STR_ + content ) , e ) ; } }"]}
{"ids": "38603", "code": ["public void add Change Listener ( Change Listener l ) {", "m Change Listeners . add ( l ) ; }"]}
{"ids": "63179", "code": ["public static boolean is Class Present ( String fully Qualified Class Name ) {", "try {", "Class . for Name ( fully Qualified Class Name ) ;", "return true ; }", "catch ( Class Not Found Exception e ) {", "return false ; } }"]}
{"ids": "69835", "code": ["void unlink ( Node < E > p , Node < E > trail ) {", "p . set Value ( null ) ;", "trail . next = p . next ;", "if ( last == p ) last = trail ;", "if ( count . get And Decrement ( ) == capacity ) not Full . signal ( ) ; }"]}
{"ids": "57309", "code": ["@ Target Api ( Build . VERSION CODES . JELLY BEAN ) private int queue Input Buffer ( Media Codec codec , Byte Buffer [ ] input Buffers , int index , Speech Record speech Record ) {", "if ( speech Record == null || speech Record . get Recording State ( ) != Speech Record . RECORDSTATE RECORDING ) {", "return - NUM_ ; }", "if ( Build . VERSION . SDK INT >= Build . VERSION CODES . JELLY BEAN ) {", "Byte Buffer input Buffer = input Buffers [ index ] ;", "input Buffer . clear ( ) ;", "int size = input Buffer . limit ( ) ;", "byte [ ] buffer = new byte [ size ] ;", "int status = read ( speech Record , buffer ) ;", "if ( status < NUM_ ) {", "handle Error ( STR_ + status ) ;", "return - NUM_ ; }", "input Buffer . put ( buffer ) ;", "codec . queue Input Buffer ( index , NUM_ , size , NUM_ , NUM_ ) ;", "return size ; }", "return - NUM_ ; }"]}
{"ids": "3411", "code": ["@ Override public final void sample ( ) {", "long count = count . get And Set ( NUM_ ) ;", "long time = time . get And Set ( NUM_ ) ;", "if ( count == NUM_ ) value = NUM_ ;", "else value = time / ( double ) count ; }"]}
{"ids": "30228", "code": ["protected void validate Properties ( final Object entity , final Entity Data Model edm ) throws O Data Exception {", "final Type type = edm . get Type ( entity . get Class ( ) ) ;", "if ( ! ( type instanceof Structured Type ) ) {", "return ; }", "visit Properties ( edm , ( Structured Type ) type , null ) ; }"]}
{"ids": "928", "code": ["public static String format Number ( float number , int digit Count , boolean separate Thousands , char separate Char ) {", "char [ ] out = new char [ NUM_ ] ;", "boolean neg = false ;", "if ( number == NUM_ ) {", "return STR_ ; }", "boolean zero = false ;", "if ( number < NUM_ && number > - NUM_ ) {", "zero = true ; }", "if ( number < NUM_ ) {", "neg = true ;", "number = - number ; }", "if ( digit Count > POW 10 . length ) {", "digit Count = POW 10 . length - NUM_ ; }", "number *= POW 10 [ digit Count ] ;", "long lval = Math . round ( number ) ;", "int ind = out . length - NUM_ ;", "int char Count = NUM_ ;", "boolean decimal Point Added = false ;", "while ( lval != NUM_ || char Count < ( digit Count + NUM_ ) ) {", "int digit = ( int ) ( lval % NUM_ ) ;", "lval = lval / NUM_ ;", "out [ ind -- ] = ( char ) ( digit + STR_ ) ;", "char Count ++ ;", "if ( char Count == digit Count ) {", "out [ ind -- ] = STR_ ;", "char Count ++ ;", "decimal Point Added = true ; }", "else if ( separate Thousands && lval != NUM_ && char Count > digit Count ) {", "if ( decimal Point Added ) {", "if ( ( char Count - digit Count ) % NUM_ == NUM_ ) {", "out [ ind -- ] = separate Char ;", "char Count ++ ; } }", "else {", "if ( ( char Count - digit Count ) % NUM_ == NUM_ ) {", "out [ ind -- ] = separate Char ;", "char Count ++ ; } } } }", "if ( zero ) {", "out [ ind -- ] = STR_ ;", "char Count += NUM_ ; }", "if ( neg ) {", "out [ ind -- ] = STR_ ;", "char Count += NUM_ ; }", "int start = out . length - char Count ;", "return String . value Of ( out , start , out . length - start ) ; }"]}
{"ids": "68274", "code": ["static Adb Response read Adb Response ( Socket Channel chan , boolean read Diag String ) throws Timeout Exception , IO Exception {", "Adb Response resp = new Adb Response ( ) ;", "byte [ ] reply = new byte [ NUM_ ] ;", "read ( chan , reply ) ;", "if ( is Okay ( reply ) ) {", "resp . okay = true ; }", "else {", "read Diag String = true ;", "resp . okay = false ; }", "try {", "while ( read Diag String ) {", "byte [ ] len Buf = new byte [ NUM_ ] ;", "read ( chan , len Buf ) ;", "String len Str = reply To String ( len Buf ) ;", "int len ;", "try {", "len = Integer . parse Int ( len Str , NUM_ ) ; }", "catch ( Number Format Exception nfe ) {", "Log . w ( STR_ , STR_ + len Str + STR_ + len Buf [ NUM_ ] + STR_ + len Buf [ NUM_ ] + STR_ + len Buf [ NUM_ ] + STR_ + len Buf [ NUM_ ] ) ;", "Log . w ( STR_ , STR_ + reply To String ( reply ) ) ;", "break ; }", "byte [ ] msg = new byte [ len ] ;", "read ( chan , msg ) ;", "resp . message = reply To String ( msg ) ;", "Log . v ( STR_ , STR_ + reply To String ( reply ) + STR_ + resp . message + STR_ ) ;", "break ; } }", "catch ( Exception e ) { }", "return resp ; }"]}
{"ids": "11647", "code": ["public void remove Mouse Mode ( String id ) {", "for ( Map Mouse Mode med : mouse Modes ) {", "if ( id . equals ( med . get ID ( ) ) ) {", "remove Mouse Mode ( med ) ;", "break ; } } }"]}
{"ids": "78244", "code": ["private Boolean filter Existing Items ( List < Post Item > post Items , Post Item item ) {", "if ( post Items . contains ( item ) ) {", "int i = post Items . index Of ( item ) ;", "post Items . remove ( i ) ;", "post Items . add ( i , item ) ;", "return false ; }", "return true ; }"]}
{"ids": "35208", "code": ["Date Range build Shifted Range ( Date Range raw Range , long cadence , long now ) {", "if ( raw Range . get Start ( ) > now ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "final Date Range rounded = raw Range . rounded ( cadence ) ;", "final long now Delta = now - rounded . get End ( ) ;", "if ( now Delta > SHIFT TOLERANCE ) {", "return rounded ; }", "final long diff = Math . abs ( Math . min ( now Delta , NUM_ ) ) + SHIFT TOLERANCE ;", "return rounded . shift ( - tolerance Shift Period ( diff , cadence ) ) ; }"]}
{"ids": "8277", "code": ["public static void upto ( Date self , Date to , Closure closure ) {", "if ( self . compare To ( to ) <= NUM_ ) {", "for ( Date i = ( Date ) self . clone ( ) ; i . compare To ( to ) <= NUM_ ; i = next ( i ) ) {", "closure . call ( i ) ; } }", "else throw new Groovy Runtime Exception ( STR_ + to + STR_ + self + STR_ ) ; }"]}
{"ids": "35327", "code": ["public Inference Context ( N 4 JS Type System ts , Type System Helper tsh , Cancel Indicator cancel Indicator , Rule Environment G , Inference Variable ... inference Variables ) {", "Objects . require Non Null ( ts ) ;", "Objects . require Non Null ( tsh ) ;", "Objects . require Non Null ( cancel Indicator ) ;", "Objects . require Non Null ( G ) ;", "this . ts = ts ;", "this . tsh = tsh ;", "this . cancel Indicator = cancel Indicator ;", "this . G = G ;", "add Inference Variables ( false , inference Variables ) ;", "this . reducer = new Reducer ( this , G , ts , tsh ) ;", "this . current Bounds = new Bound Set ( this , G , ts ) ; }"]}
{"ids": "2010", "code": ["@ Override public void run ( ) throws Interrupted Exception , Camera Access Exception , Camera Capture Session Closed Exception , Resource Acquisition Failed Exception {", "Frame Server . Session session = m Frame Server . try Create Exclusive Session ( ) ;", "if ( session == null ) {", "return ; }", "try {", "AF Trigger Result af Scan Result = new AF Trigger Result ( ) ;", "Request Builder idle Builder = create AF Idle Request ( null ) ;", "session . submit Request ( Arrays . as List ( idle Builder . build ( ) ) , Frame Server . Request Type . REPEATING ) ;", "Request Builder cancel Builder = create AF Cancel Request ( null ) ;", "session . submit Request ( Arrays . as List ( cancel Builder . build ( ) ) , Frame Server . Request Type . NON REPEATING ) ;", "idle Builder = create AF Idle Request ( af Scan Result ) ;", "session . submit Request ( Arrays . as List ( idle Builder . build ( ) ) , Frame Server . Request Type . REPEATING ) ;", "Request Builder trigger Builder = create AF Trigger Request ( af Scan Result ) ;", "session . submit Request ( Arrays . as List ( trigger Builder . build ( ) ) , Frame Server . Request Type . NON REPEATING ) ;", "af Scan Result . get ( ) ; }", "finally {", "session . close ( ) ; } }"]}
{"ids": "52113", "code": ["protected List < Node > create Discrete Variable List ( Discrete Variable Analysis variable Analysis ) {", "List < Node > nodes = new Array List < > ( variable Analysis . get Num Of Cols ( ) ) ;", "Discrete Var Info [ ] variables = variable Analysis . get Discrete Var Infos ( ) ;", "for ( Discrete Var Info variable : variables ) {", "if ( variable != null ) {", "nodes . add ( new Discrete Variable ( variable . get Name ( ) , variable . get Categories ( ) ) ) ; } }", "return nodes ; }"]}
{"ids": "70467", "code": ["public synchronized void remove Series ( XY Series series ) {", "m Series . remove ( series ) ; }"]}
{"ids": "66573", "code": ["private void synchronize Tables ( ) {", "reset DB Objects ( DB Object Table . class ) ;", "s logger . log ( Level . CONFIG , STR_ ) ;", "s logger . log ( Level . CONFIG , STR_ , new Object [ ] { m object Types , m direction } ) ;", "m counter Drp = new Integer ( NUM_ ) ;", "m counter Add = new Integer ( NUM_ ) ;", "m counter Upd = new Integer ( NUM_ ) ;", "m total Drp = new Integer ( NUM_ ) ;", "m total Add = new Integer ( NUM_ ) ;", "m total Upd = new Integer ( NUM_ ) ;", "for ( Iterator < String > table Iterator = m object List . iterator ( ) ; table Iterator . has Next ( ) ; ) {", "String key = table Iterator . next ( ) ;", "DB Object source Obj = m source Map . get ( key ) ;", "DB Object target Obj = m target Map . get ( key ) ;", "if ( target Obj != null && source Obj == null ) {", "if ( target Obj . get Customization Level ( ) == s parameters . CUSTOMNONE ) {", "if ( target Obj . drop ( ) ) m counter Drp = new Integer ( m counter Drp . int Value ( ) + NUM_ ) ;", "m total Drp = new Integer ( m total Drp . int Value ( ) + NUM_ ) ; }", "else {", "s logger . log ( Level . WARNING , STR_ , new Object [ ] { m object Type , target Obj . get Name ( ) } ) ; } }", "if ( target Obj != null && source Obj != null ) {", "if ( target Obj . update ( source Obj ) ) m counter Upd = new Integer ( m counter Upd . int Value ( ) + NUM_ ) ;", "m total Upd = new Integer ( m total Upd . int Value ( ) + NUM_ ) ; }", "if ( target Obj == null && source Obj != null ) {", "if ( source Obj . create ( m target ) ) m counter Add = new Integer ( m counter Add . int Value ( ) + NUM_ ) ;", "m total Add = new Integer ( m total Add . int Value ( ) + NUM_ ) ; } }", "log Results ( ) ; }"]}
{"ids": "21169", "code": ["public void remote Restart Coordinator ( String node Id , String type ) throws Local Repository Exception {", "final String prefix = String . format ( STR_ , type , node Id ) ;", "log . debug ( prefix ) ;", "final String [ ] cmd = { SYSTOOL CMD , SYSTOOL REMOTE SYSTOOL , node Id , SYSTOOL RESTART COORDINATOR , type } ;", "final Exec . Result result = Exec . sudo ( SYSTOOL TIMEOUT , cmd ) ;", "check Failure ( result , prefix ) ; }"]}
{"ids": "45761", "code": ["private static String int To String ( int value , int digit ) {", "String Builder string Builder = new String Builder ( digit ) ;", "string Builder . append ( Integer . to String ( value ) ) ;", "while ( string Builder . length ( ) < digit ) {", "string Builder . insert ( NUM_ , STR_ ) ; }", "return string Builder . to String ( ) ; }"]}
{"ids": "29233", "code": ["void add ( int n ) {", "if ( v == null ) {", "v = new int [ INIT SIZE ] ;", "v [ NUM_ ] = n ;", "len = NUM_ ;", "return ; }", "if ( len == v . length ) {", "int [ ] newv = new int [ len * NUM_ ] ;", "System . arraycopy ( v , NUM_ , newv , NUM_ , len ) ;", "v = newv ; }", "if ( n > v [ len - NUM_ ] ) {", "v [ len ++ ] = n ;", "return ; }", "int i = NUM_ ;", "for ( ; i < len ; i ++ ) {", "if ( n <= v [ i ] ) {", "if ( n == v [ i ] ) return ;", "break ; } }", "for ( int j = len ; j >= i ; j -- ) v [ j + NUM_ ] = v [ j ] ;", "v [ i ] = n ;", "++ len ; }"]}
{"ids": "8305", "code": ["public void correct Null Receiver ( ) {", "if ( args [ NUM_ ] != null ) return ;", "handle = handle . bind To ( Null Object . get Null Object ( ) ) ;", "handle = Method Handles . drop Arguments ( handle , NUM_ , target Type . parameter Type ( NUM_ ) ) ;", "if ( LOG ENABLED ) LOG . info ( STR_ ) ; }"]}
{"ids": "86819", "code": ["public static boolean is Paired End Directory ( final File dir ) {", "if ( dir == null || ! dir . exists ( ) || ! dir . is Directory ( ) ) {", "return false ; }", "final File l Dir = new File ( dir , STR_ ) ;", "final File r Dir = new File ( dir , STR_ ) ;", "return l Dir . exists ( ) && r Dir . exists ( ) && l Dir . is Directory ( ) && r Dir . is Directory ( ) ; }"]}
{"ids": "31788", "code": ["@ Suppress Warnings ( STR_ ) private void check Class Not Found ( ) throws Exception {", "init Gar = false ;", "try {", "Ignite ignite 1 = start Grid ( NUM_ ) ;", "Ignite ignite 2 = start Grid ( NUM_ ) ;", "Class task = ext Ldr . load Class ( TASK NAME ) ;", "try {", "ignite 1 . compute ( ) . execute ( task , ignite 2 . cluster ( ) . local Node ( ) . id ( ) ) ;", "assert false ; }", "catch ( Ignite Exception e ) {", "info ( STR_ + e ) ; } }", "finally {", "stop Grid ( NUM_ ) ;", "stop Grid ( NUM_ ) ; } }"]}
{"ids": "74317", "code": ["public String drop Engine ( Engine engine ) {", "String Builder builder = new String Builder ( ) ;", "for ( String attribute : Setup . get Drop Engine Message Format ( ) ) {", "builder . append ( get Engine Attribute ( engine , attribute , ! PICKUP ) ) ; }", "return builder . to String ( ) ; }"]}
{"ids": "83790", "code": ["public Iterator < Json Element > iterator ( ) {", "return elements . iterator ( ) ; }"]}
{"ids": "52297", "code": ["protected void pop Write Context ( ) {", "write Context = write Context Stack . pop ( ) ; }"]}
{"ids": "44", "code": ["public long calculate End Time ( ) {", "if ( end Time == NUM_ ) {", "return System . current Time Millis ( ) ; }", "else if ( end Time < NUM_ ) {", "return System . current Time Millis ( ) - end Time ; }", "return end Time ; }"]}
{"ids": "9043", "code": ["protected String extract Alternate Open Quote ( String token ) {", "return null ; }"]}
{"ids": "14677", "code": ["private boolean remove Index Entry ( Service Type resource Type , String resource Name , String policy Name ) throws Policy Exception {", "Resource Index resource Index = ( Resource Index ) resource Indices . get ( resource Type . get Name ( ) ) ;", "if ( resource Index == null ) {", "resource Index = refresh Resource Index From Data Store ( resource Type ) ; }", "return resource Index . remove Index Entry ( resource Name , policy Name ) ; }"]}
{"ids": "6855", "code": ["public static Text Block parse Text Block ( Parse Context parse Context ) {", "return Text Block Section Parser . parse Text Block ( parse Context ) ; }"]}
{"ids": "26955", "code": ["public final static boolean in Long Range ( char [ ] digit Chars , int offset , int len , boolean negative ) {", "String cmp Str = negative ? MIN LONG STR NO SIGN : MAX LONG STR ;", "int cmp Len = cmp Str . length ( ) ;", "if ( len < cmp Len ) return true ;", "if ( len > cmp Len ) return false ;", "for ( int i = NUM_ ; i < cmp Len ; ++ i ) {", "if ( digit Chars [ offset + i ] > cmp Str . char At ( i ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "37216", "code": ["public static Collection < Debugger Exception > merge Exceptions Settings ( final Debug Target Settings target , final Collection < Debugger Exception > exceptions , final int debugger Id ) throws Couldnt Load Data Exception {", "final Map < Long , Debugger Exception > exceptions Map = get Exceptions Map ( exceptions ) ;", "for ( final Debugger Exception dbg Exception : exceptions ) {", "final String setting = target . read Setting ( Debugger Exception . get Setting Key ( dbg Exception , debugger Id ) ) ;", "if ( setting != null ) {", "final Debugger Exception Handling Action handling Action = Debugger Exception Handling Action . convert To Handling Action ( Integer . value Of ( setting ) ) ;", "final Debugger Exception new Exception = new Debugger Exception ( dbg Exception . get Exception Name ( ) , dbg Exception . get Exception Code ( ) , handling Action ) ;", "exceptions Map . put ( dbg Exception . get Exception Code ( ) , new Exception ) ; } }", "return exceptions Map . values ( ) ; }"]}
{"ids": "22097", "code": ["public void verify Annotation ( String method Name , String annotation Name ) throws Exception {", "Class clazz = Class . for Name ( class Name ) ;", "Method method = clazz . get Declared Method ( method Name ) ;", "Class annotation Clazz = Class . for Name ( annotation Name ) ;", "java . lang . annotation . Annotation annotation = method . get Annotation ( annotation Clazz ) ;", "Assert . assert Not Null ( annotation ) ; }"]}
{"ids": "64951", "code": ["public Publisher Amb < T > amb Additional Source ( Publisher < ? extends T > source ) {", "if ( array != null ) {", "int n = array . length ;", "@ Suppress Warnings ( STR_ ) Publisher < ? extends T > [ ] new Array = new Publisher [ n + NUM_ ] ;", "System . arraycopy ( array , NUM_ , new Array , NUM_ , n ) ;", "new Array [ n ] = source ;", "return new Publisher Amb < > ( new Array ) ; }", "return null ; }"]}
{"ids": "13881", "code": ["public void begin Display ( Display Event event ) throws Model Control Exception {", "super . begin Display ( event ) ;", "String site Name = ( String ) get Page Session Attribute ( PG ATTR SITE NAME ) ;", "Server Site Model model = ( Server Site Model ) get Model ( ) ;", "pt Model . set Page Title Text ( model . get Edit Site Page Title ( site Name ) ) ;", "try {", "set Display Field Value ( TF URL , model . get Site Primary URL ( site Name ) ) ;", "get Failover UR Ls ( site Name , model ) ;", "get Servers ( site Name , model ) ; }", "catch ( AM Console Exception e ) {", "set Inline Alert Message ( CC Alert . TYPE ERROR , STR_ , e . get Message ( ) ) ; } }"]}
{"ids": "46742", "code": ["public boolean add ( Accessible State state ) {", "if ( states == null ) {", "states = new Vector ( ) ; }", "if ( ! states . contains ( state ) ) {", "states . add Element ( state ) ;", "return true ; }", "else {", "return false ; } }"]}
{"ids": "76477", "code": ["public static final String read File ( File file ) throws IO Exception {", "Buffered Input Stream in = null ;", "try {", "in = new Buffered Input Stream ( new File Input Stream ( file ) ) ;", "Simple Byte Buffer buffer = new Simple Byte Buffer ( ) ;", "byte [ ] buf = new byte [ NUM_ ] ;", "int len ;", "while ( ( len = in . read ( buf ) ) != - NUM_ ) {", "buffer . put ( buf , len ) ; }", "return new String ( buffer . buffer , NUM_ , buffer . write ) ; }", "finally {", "if ( null != in ) {", "in . close ( ) ; } } }"]}
{"ids": "86332", "code": ["void add Decimal Point ( ) {", "this . display Mode = DISPLAY MODE . INPUT ;", "if ( this . clear On Next Digit ) {", "set Display String ( EMPTY STRING ) ; }", "final String input String = get Display String ( ) ;", "if ( input String . index Of ( DOT CHARACTER ) < NUM_ ) {", "set Display String ( input String + DOT CHARACTER ) ; } }"]}
{"ids": "61433", "code": ["public void close ( ) throws java . io . IO Exception {", "m os . close ( ) ; }"]}
{"ids": "34679", "code": ["void show ( ) {", "if ( m Is Visible ) return ;", "m Is Visible = true ;", "m Height Px = Math . round ( m Default Height Px ) ;", "invalidate ( ) ; }"]}
{"ids": "21440", "code": ["public void record Mirror Operation ( Db Client db Client , Operation Type Enum op Type , Operation . Status status , Object ... ext Param ) {", "try {", "boolean op Status = ( Operation . Status . ready == status ) ? true : false ;", "String ev Type ;", "ev Type = op Type . get Ev Type ( op Status ) ;", "String ev Desc = op Type . get Description ( ) ;", "String op Stage = Audit Log Manager . AUDITOP END ;", "logger . info ( STR_ , op Type . to String ( ) , ev Type . to String ( ) + STR_ + ev Desc ) ;", "record Bourne Mirror Event ( db Client , get Id ( ) , ev Type , status , ev Desc ) ;", "switch ( op Type ) {", "case CREATE FILE MIRROR :", "case START FILE MIRROR :", "case SUSPEND FILE MIRROR :", "case DETACH FILE MIRROR :", "case PAUSE FILE MIRROR :", "case RESUME FILE MIRROR :", "case FAILOVER FILE MIRROR :", "case STOP FILE MIRROR :", "case FAILBACK FILE MIRROR :", "case RESYNC FILE MIRROR :", "case REFRESH FILE MIRROR :", "case MODIFY FILE MIRROR RPO :", "audit File ( db Client , op Type , op Status , op Stage , ext Param ) ;", "break ;", "default :", "logger . error ( STR_ ) ; } }", "catch ( Exception e ) {", "logger . error ( STR_ , op Type . to String ( ) , e ) ; } }"]}
{"ids": "7032", "code": ["private void cancel Take Image ( ) {", "m Shooted Picture Path = null ;", "m Selected Gallery Items List . clear ( ) ;", "Vector App . set Saved Camera Image Preview ( null ) ;", "start Camera Preview ( ) ;", "update Ui Configuration ( UI SHOW CAMERA PREVIEW , IMAGE ORIGIN CAMERA ) ; }"]}
{"ids": "32507", "code": ["protected int next Grid To Restart ( ) {", "if ( curr Restart Grid Id == server Count ( ) ) curr Restart Grid Id = NUM_ ;", "return ++ curr Restart Grid Id ; }"]}
{"ids": "13007", "code": ["private void remove Stale Iterator References ( ) {", "remove Stale References ( iterator Reference Queue , iterators ) ; }"]}
{"ids": "21271", "code": ["boolean destroy I Group ( boolean force ) {", "Na Element elem = new Na Element ( STR_ ) ;", "elem . add New Child ( STR_ , name ) ;", "elem . add New Child ( STR_ , Boolean . to String ( force ) ) ;", "try {", "server . invoke Elem ( elem ) ; }", "catch ( Exception e ) {", "String msg = STR_ + name ;", "log . error ( msg , e ) ;", "throw new Net App Exception ( msg , e ) ; }", "return true ; }"]}
{"ids": "68671", "code": ["@ Override public double finite Difference Epsilon ( ) {", "return NUM_ ; }"]}
{"ids": "4693", "code": ["public void remove ( final Http Connection connection ) {", "log . debug ( STR_ + connection . get ID ( ) ) ;", "connection To Added . remove ( connection ) ; }"]}
{"ids": "73063", "code": ["public void put Byte ( long pos , byte val ) {", "unsafe . put Byte ( pos + addr , val ) ; }"]}
{"ids": "29682", "code": ["public void add Reference ( Message Part reference ) {", "references . add ( reference ) ; }"]}
{"ids": "38110", "code": ["protected boolean [ ] dataset Integrity ( Attr Types attr Types , int class Type , boolean attribute Missing , boolean class Missing ) {", "Estimator estimator = null ;", "print ( STR_ ) ;", "print Attribute Summary ( attr Types , class Type ) ;", "print ( STR_ ) ;", "int num Train = get Num Instances ( ) ;", "get Num Instances ( ) ;", "int num Classes = NUM_ , missing Level = NUM_ ;", "boolean [ ] result = new boolean [ NUM_ ] ;", "Instances train = null ;", "boolean built = false ;", "try {", "train = make Test Dataset ( NUM_ , num Train , NUM_ , attr Types , num Classes , class Type ) ;", "int attr Index = NUM_ ;", "if ( missing Level > NUM_ ) {", "add Missing ( train , missing Level , attribute Missing , class Missing , attr Index ) ; }", "estimator = Estimator . make Copies ( get Estimator ( ) , NUM_ ) [ NUM_ ] ; }", "catch ( Exception ex ) {", "throw new Error ( STR_ + ex . get Message ( ) ) ; }", "try {", "Instances train Copy = new Instances ( train ) ;", "int attr Index = NUM_ ;", "estimator . add Values ( train Copy , attr Index ) ;", "compare Datasets ( train , train Copy ) ;", "built = true ;", "println ( STR_ ) ;", "result [ NUM_ ] = true ; }", "catch ( Exception ex ) {", "println ( STR_ ) ;", "result [ NUM_ ] = false ;", "if ( m Debug ) {", "println ( STR_ ) ;", "print ( STR_ ) ;", "if ( built ) {", "print ( STR_ ) ; }", "else {", "print ( STR_ ) ; }", "println ( STR_ + ex . get Message ( ) + STR_ ) ;", "println ( STR_ ) ;", "println ( STR_ + train . to String ( ) + STR_ ) ; } }", "return result ; }"]}
{"ids": "13185", "code": ["protected Date Time Data parse ( String str ) throws Schema Date Time Exception {", "Date Time Data date = new Date Time Data ( str , this ) ;", "int len = str . length ( ) ;", "if ( str . char At ( NUM_ ) != STR_ || str . char At ( NUM_ ) != STR_ || str . char At ( NUM_ ) != STR_ ) {", "throw new Schema Date Time Exception ( STR_ ) ; }", "date . year = YEAR ;", "date . month = MONTH ;", "date . day = parse Int ( str , NUM_ , NUM_ ) ;", "if ( DAY SIZE < len ) {", "if ( ! is Next Char UTC Sign ( str , DAY SIZE , len ) ) {", "throw new Schema Date Time Exception ( STR_ ) ; }", "else {", "get Time Zone ( str , date , DAY SIZE , len ) ; } }", "validate Date Time ( date ) ;", "save Unnormalized ( date ) ;", "if ( date . utc != NUM_ && date . utc != STR_ ) {", "normalize ( date ) ; }", "date . position = NUM_ ;", "return date ; }"]}
{"ids": "33350", "code": ["public static Map < String , Set < String > > parse ( final URI uri , boolean decode Query Param ) {", "Map < String , Set < String > > result = Collections . empty Map ( ) ;", "final String query = uri . get Raw Query ( ) ;", "if ( query != null && query . length ( ) > NUM_ ) {", "result = new Hash Map < > ( ) ;", "parse ( result , new Scanner ( query ) , null , decode Query Param ) ; }", "return result ; }"]}
{"ids": "20479", "code": ["private void update Period ( ) {", "for ( int i = NUM_ ; i < m Conversion . size ( ) ; i ++ ) {", "int date Type = m Conversion . key At ( i ) ;", "Time Period Slider slider = m Time Period Sliders . get ( date Type ) ;", "slider . set Value ( m Period . get ( m Conversion . value At ( i ) ) ) ; }", "m Time . set Text ( get Formatted Period ( ) ) ;", "m Duration = m Period . to Standard Duration ( ) ;", "do Validation ( ) ; }"]}
{"ids": "28679", "code": ["public long start brk ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "16018", "code": ["public static void validate Participant Ids Equal ( String expected Participant Id , String actual Participant Id ) throws Crypto Exception {", "if ( ! expected Participant Id . equals ( actual Participant Id ) ) {", "throw new Crypto Exception ( STR_ + actual Participant Id + STR_ + expected Participant Id + STR_ ) ; } }"]}
{"ids": "36724", "code": ["protected void encode Fields ( mx Codec enc , Object obj , Node node ) {", "Class type = obj . get Class ( ) ;", "while ( type != null ) {", "Field [ ] fields = type . get Declared Fields ( ) ;", "for ( int i = NUM_ ; i < fields . length ; i ++ ) {", "Field f = fields [ i ] ;", "if ( ( f . get Modifiers ( ) & Modifier . TRANSIENT ) != Modifier . TRANSIENT ) {", "String fieldname = f . get Name ( ) ;", "Object value = get Field Value ( obj , fieldname ) ;", "encode Value ( enc , obj , fieldname , value , node ) ; } }", "type = type . get Superclass ( ) ; } }"]}
{"ids": "11602", "code": ["public void add Vetoable Change Listener ( String property Name , Vetoable Change Listener in vcl ) {", "bean Context Child Support . add Vetoable Change Listener ( property Name , in vcl ) ; }"]}
{"ids": "15510", "code": ["private void log Missing Resource ( Faces Context ctx , String resource Id , Throwable t ) {", "Level level ;", "if ( ! ctx . is Project Stage ( Project Stage . Production ) ) {", "level = Level . WARNING ; }", "else {", "level = ( ( t != null ) ? Level . WARNING : Level . FINE ) ; }", "if ( LOGGER . is Loggable ( level ) ) {", "LOGGER . log ( level , STR_ , new Object [ ] { resource Id } ) ;", "if ( t != null ) {", "LOGGER . log ( level , STR_ , t ) ; } } }"]}
{"ids": "52389", "code": ["private void append Aliased Column ( String Builder sb , String col Name , String t Alias ) {", "if ( t Alias != null ) {", "sb . append ( t Alias ) ;", "sb . append ( STR_ ) ; }", "sb . append ( STR_ ) ;", "sb . append ( col Name ) ;", "sb . append ( STR_ ) ; }"]}
{"ids": "75350", "code": ["private Midi Event create Scheduled Event ( byte [ ] msg , int offset , int count , long timestamp ) {", "Midi Event event ;", "if ( count > POOL EVENT SIZE ) {", "event = new Midi Event ( msg , offset , count , timestamp ) ; }", "else {", "event = ( Midi Event ) remove Eventfrom Pool ( ) ;", "if ( event == null ) {", "event = new Midi Event ( POOL EVENT SIZE ) ; }", "System . arraycopy ( msg , offset , event . data , NUM_ , count ) ;", "event . count = count ;", "event . set Timestamp ( timestamp ) ; }", "return event ; }"]}
{"ids": "61813", "code": ["public static byte [ ] gzip ( String input ) {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "GZIP Output Stream gzos = null ;", "try {", "gzos = new GZIP Output Stream ( baos ) ;", "gzos . write ( input . get Bytes ( STR_ ) ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "finally {", "if ( gzos != null ) try {", "gzos . close ( ) ; }", "catch ( IO Exception ignore ) { } }", "return baos . to Byte Array ( ) ; }"]}
{"ids": "84786", "code": ["public static double log Pdf ( double x , double m , double shape ) {", "double a = Math . sqrt ( shape / ( NUM_ * Math . PI * x * x * x ) ) ;", "double b = ( ( - shape ) * ( x - m ) * ( x - m ) ) / ( NUM_ * m * m * x ) ;", "return Math . log ( a ) + b ; }"]}
{"ids": "74400", "code": ["public void add Edge Connector ( ) {", "num Edge Connectors ++ ;", "String name = STR_ ;", "boolean duplicate = true ;", "while ( duplicate ) {", "name = STR_ + num Edge Connectors ;", "if ( finder . find Positionable Point By Name ( name ) == null ) {", "duplicate = false ; }", "if ( duplicate ) {", "num Edge Connectors ++ ; } }", "Positionable Point o = new Positionable Point ( name , Positionable Point . EDGE CONNECTOR , current Point , this ) ;", "point List . add ( o ) ;", "set Dirty ( true ) ; }"]}
{"ids": "45682", "code": ["@ Request Mapping ( value = { STR_ , STR_ } , method = Request Method . GET ) @ Response Body public Rest Wrapper list ( @ Request Param ( value = STR_ , default Value = STR_ ) int start Page , @ Request Param ( value = STR_ , default Value = STR_ ) int page Size , Principal principal ) {", "Rest Wrapper rest Wrapper = null ;", "try {", "Integer counter = workflow Type DAO . total Record Count ( ) ;", "List < Workflow Type > workflow Types = new Array List < Workflow Type > ( ) ;", "List < com . wipro . ats . bdre . md . dao . jpa . Workflow Type > jpa Workflow Types = workflow Type DAO . list ( start Page , page Size ) ;", "for ( com . wipro . ats . bdre . md . dao . jpa . Workflow Type wf Type : jpa Workflow Types ) {", "Workflow Type workflow Type = new Workflow Type ( ) ;", "workflow Type . set Workflow Id ( wf Type . get Workflow Id ( ) ) ;", "workflow Type . set Workflow Type Name ( wf Type . get Workflow Type Name ( ) ) ;", "workflow Type . set Counter ( counter ) ;", "workflow Types . add ( workflow Type ) ; }", "rest Wrapper = new Rest Wrapper ( workflow Types , Rest Wrapper . OK ) ;", "LOGGER . info ( STR_ + principal . get Name ( ) ) ; }", "catch ( Exception e ) {", "LOGGER . error ( e ) ;", "rest Wrapper = new Rest Wrapper ( e . get Message ( ) , Rest Wrapper . ERROR ) ; }", "return rest Wrapper ; }"]}
{"ids": "60687", "code": ["public void parse For Class ( Generic Declaration generic Decl , String signature ) {", "set Input ( generic Decl , signature ) ;", "if ( ! eof ) {", "parse Class Signature ( ) ; }", "else {", "if ( generic Decl instanceof Class ) {", "Class c = ( Class ) generic Decl ;", "this . formal Type Parameters = Empty Array . TYPE VARIABLE ;", "this . superclass Type = c . get Superclass ( ) ;", "Class < ? > [ ] interfaces = c . get Interfaces ( ) ;", "if ( interfaces . length == NUM_ ) {", "this . interface Types = List Of Types . EMPTY ; }", "else {", "this . interface Types = new List Of Types ( interfaces ) ; } }", "else {", "this . formal Type Parameters = Empty Array . TYPE VARIABLE ;", "this . superclass Type = Object . class ;", "this . interface Types = List Of Types . EMPTY ; } } }"]}
{"ids": "57502", "code": ["static boolean try External Unpush ( Fork Join Task < ? > t ) {", "Fork Join Pool p ;", "Work Queue [ ] ws ;", "Work Queue q ;", "Submitter z ;", "Fork Join Task < ? > [ ] a ;", "int m , s ;", "if ( t != null && ( z = submitters . get ( ) ) != null && ( p = common Pool ) != null && ( ws = p . work Queues ) != null && ( m = ws . length - NUM_ ) >= NUM_ && ( q = ws [ m & z . seed & SQMASK ] ) != null && ( s = q . top ) != q . base && ( a = q . array ) != null ) {", "long j = ( ( ( a . length - NUM_ ) & ( s - NUM_ ) ) << ASHIFT ) + ABASE ;", "if ( U . get Object ( a , j ) == t && U . compare And Swap Int ( q , QLOCK , NUM_ , NUM_ ) ) {", "if ( q . array == a && q . top == s && U . compare And Swap Object ( a , j , t , null ) ) {", "q . top = s - NUM_ ;", "q . qlock = NUM_ ;", "return true ; }", "q . qlock = NUM_ ; } }", "return false ; }"]}
{"ids": "702", "code": ["public static double [ ] quantiles ( int n , double [ ] values ) {", "values = ( double [ ] ) values . clone ( ) ;", "Arrays . sort ( values ) ;", "double [ ] qtls = new double [ n + NUM_ ] ;", "for ( int i = NUM_ ; i <= n ; ++ i ) {", "qtls [ i ] = values [ ( ( values . length - NUM_ ) * i ) / n ] ; }", "return qtls ; }"]}
{"ids": "51131", "code": ["public Query Exception ( String message , int error Code , Sql States sql State , Throwable cause ) {", "super ( message , cause ) ;", "this . message = message ;", "this . error Code = error Code ;", "this . sql State = sql State . get Sql State ( ) ; }"]}
{"ids": "35267", "code": ["private CSV Data ( List < CSV Record > records ) {", "this . records = Objects . require Non Null ( records ) ; }"]}
{"ids": "21629", "code": ["private Workflow . Method untag Volumes Method ( URI system URI , List < URI > volume UR Is ) {", "return new Workflow . Method ( STR_ , system URI , volume UR Is ) ; }"]}
{"ids": "27067", "code": ["private byte [ ] SHA 256 hash ( byte [ ] tobe Hashed ) {", "SHA 256 Digest digester = new SHA 256 Digest ( ) ;", "byte [ ] ret Value = new byte [ digester . get Digest Size ( ) ] ;", "digester . update ( tobe Hashed , NUM_ , tobe Hashed . length ) ;", "digester . do Final ( ret Value , NUM_ ) ;", "return ret Value ; }"]}
{"ids": "44721", "code": ["@ Data Provider private static Object [ ] [ ] ok Resource Responses ( ) {", "return new Object [ ] [ ] { { new Response ( OK ) } , { new Response ( FOUND ) } , { new Response ( MOVED PERMANENTLY ) } , { new Response ( CREATED ) } } ; }"]}
{"ids": "22241", "code": ["public synchronized void connect ( ) {", "if ( ! zk Connection . is Started ( ) ) {", "zk Connection . start ( ) ; }", "if ( String Utils . is Empty ( site Id ) ) {", "generate Site Id ( ) ; } }"]}
{"ids": "71396", "code": ["static Object convert Java Time To Java Sql ( Object x ) {", "if ( x instanceof Local Date ) {", "return Date . value Of ( ( Local Date ) x ) ; }", "else if ( x instanceof Local Date Time ) {", "return Timestamp . value Of ( ( Local Date Time ) x ) ; }", "else if ( x instanceof Local Time ) {", "return Time . value Of ( ( Local Time ) x ) ; }", "return x ; }"]}
{"ids": "50938", "code": ["@ Not Null private static Default Mutable Tree Node update Tree Structure ( @ Not Null Default Mutable Tree Node tree Node , @ Not Null Zip File compressed Apk ) {", "long compressed Size = NUM_ ;", "Apk Entry entry = Apk Entry . from Node ( tree Node ) ;", "assert entry != null ;", "if ( tree Node . get Child Count ( ) > NUM_ ) {", "for ( int i = NUM_ ; i < tree Node . get Child Count ( ) ; i ++ ) {", "Default Mutable Tree Node child Node = update Tree Structure ( ( Default Mutable Tree Node ) tree Node . get Child At ( i ) , compressed Apk ) ;", "compressed Size += ( ( Apk Entry ) child Node . get User Object ( ) ) . get Compressed Size ( ) ; } }", "else {", "Zip Entry ze = compressed Apk . get Entry ( Apk File System . get Instance ( ) . get Relative Path ( entry . get File ( ) ) ) ;", "if ( ze == null ) {", "compressed Size = - NUM_ ; }", "else {", "compressed Size = ze . get Compressed Size ( ) ; } }", "entry . set Compressed Size ( compressed Size ) ;", "return tree Node ; }"]}
{"ids": "82540", "code": ["public long total Memory ( ) {", "return total Memory Impl ( ) ; }"]}
{"ids": "15628", "code": ["public static void scan ( ) {", "List < Scanner Registration > scanners = get Scanners To Run ( ) ;", "if ( scanners . size ( ) > NUM_ ) {", "URL [ ] urls = get Search UR Ls ( ) ;", "if ( urls == null ) {", "urls = fiter Libs ( Scanner URLS . get UR Ls For Search ( ) ) ;", "scan ( scanners , urls ) ; }", "else {", "scan ( scanners , urls ) ; } } }"]}
{"ids": "72775", "code": ["public final void turn To ( double angle ) {", "angle = Geometric . clamp Angle Degree ( angle ) ;", "orientation = Geometric . clamp Angle Degree ( angle ) ;", "Geometric . rotate To ( velocity , Math . to Radians ( orientation ) ) ; }"]}
{"ids": "57608", "code": ["void fully Lock ( ) {", "put Lock . lock ( ) ;", "take Lock . lock ( ) ; }"]}
{"ids": "24368", "code": ["protected int start Bridge Server ( int port , boolean notify By Subscription ) throws IO Exception {", "Cache cache = get Cache ( ) ;", "Cache Server bridge = cache . add Cache Server ( ) ;", "bridge . set Port ( port ) ;", "bridge . set Notify By Subscription ( notify By Subscription ) ;", "bridge . start ( ) ;", "bridge Server Port = bridge . get Port ( ) ;", "return bridge . get Port ( ) ; }"]}
{"ids": "76175", "code": ["protected Object to Type ( Calendar value ) {", "return value . get Time ( ) ; }"]}
{"ids": "75689", "code": ["protected F restore Last Filter ( int dialog Type ) {", "F result ;", "List < F > list ;", "int i ;", "result = null ;", "if ( dialog Type == OPEN DIALOG ) list = get Open File Filters ( ) ;", "else list = get Save File Filters ( ) ;", "if ( list . size ( ) > NUM_ ) {", "result = get Default File Filter ( dialog Type ) ;", "set File Filter ( result ) ;", "if ( m Last Filter != null ) {", "for ( i = NUM_ ; i < list . size ( ) ; i ++ ) {", "if ( m Comparator . compare ( list . get ( i ) , m Last Filter ) == NUM_ ) {", "result = ( F ) m Last Filter ;", "set File Filter ( m Last Filter ) ;", "break ; } } } }", "return result ; }"]}
{"ids": "13914", "code": ["public void handle Tbl Data Site Action Href Request ( Request Invocation Event event ) throws Model Control Exception {", "String site Name = hex To String ( ( String ) get Display Field Value ( TBL DATA SITE ACTION HREF ) ) ;", "set Page Session Attribute ( Site Edit View Bean . PG ATTR SITE NAME , site Name ) ;", "Site Edit View Bean vb = ( Site Edit View Bean ) get View Bean ( Site Edit View Bean . class ) ;", "unlock Page Trail ( ) ;", "pass Pg Session Map ( vb ) ;", "vb . forward To ( get Request Context ( ) ) ; }"]}
{"ids": "39198", "code": ["public static void normalize ( double [ ] doubles , double sum ) {", "if ( Double . is Na N ( sum ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( sum == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "for ( int i = NUM_ ; i < doubles . length ; i ++ ) {", "doubles [ i ] /= sum ; } }"]}
{"ids": "65499", "code": ["private void expand Array ( int shard Id ) {", "int new Num Shards = Math . max ( ( int ) Math . ceil ( num Shards * SHARD GROWTH FACTOR ) , shard Id + NUM_ ) ;", "Preconditions . check Argument ( new Num Shards * shard Length < Integer . MAX VALUE , STR_ ) ;", "int [ ] [ ] new Array = new int [ new Num Shards ] [ ] ;", "System . arraycopy ( reader Accessible Info . array , NUM_ , new Array , NUM_ , reader Accessible Info . array . length ) ;", "reader Accessible Info = new Reader Accessible Info ( new Array ) ;", "num Shards = new Num Shards ; }"]}
{"ids": "43174", "code": ["protected < T > T wait For Property Value ( String document Self Link , Class < T > type , String prop Name , Object prop Value , boolean should Match , Atomic Integer count ) throws Throwable {", "@ Suppress Warnings ( STR_ ) List < Object > prop = prop Value instanceof List ? ( List < Object > ) prop Value : Arrays . as List ( prop Value ) ;", "return wait For Property Value ( document Self Link , type , prop Name , prop , should Match , count ) ; }"]}
{"ids": "57252", "code": ["public static String from I Pv 4 Address Collection ( Collection < Integer > ip Addresses ) {", "if ( ip Addresses == null ) return STR_ ;", "String Buffer sb = new String Buffer ( ) ;", "sb . append ( STR_ ) ;", "for ( Integer ip : ip Addresses ) {", "sb . append ( from I Pv 4 Address ( ip ) ) ;", "sb . append ( STR_ ) ; }", "sb . replace ( sb . length ( ) - NUM_ , sb . length ( ) , STR_ ) ;", "return sb . to String ( ) ; }"]}
{"ids": "44310", "code": ["public static final String make Java Identifier ( String identifier ) {", "String Builder modified Identifier = new String Builder ( identifier . length ( ) ) ;", "if ( ! Character . is Java Identifier Start ( identifier . char At ( NUM_ ) ) ) {", "modified Identifier . append ( STR_ ) ; }", "for ( int i = NUM_ ; i < identifier . length ( ) ; i ++ ) {", "char ch = identifier . char At ( i ) ;", "if ( Character . is Java Identifier Part ( ch ) && ch != STR_ ) {", "modified Identifier . append ( ch ) ; }", "else if ( ch == STR_ ) {", "modified Identifier . append ( STR_ ) ; }", "else {", "modified Identifier . append ( mangle Char ( ch ) ) ; } }", "if ( is Java Keyword ( modified Identifier . to String ( ) ) ) {", "modified Identifier . append ( STR_ ) ; }", "return modified Identifier . to String ( ) ; }"]}
{"ids": "43176", "code": ["public static String encrypt ( String input ) {", "if ( encryption Service == null || input == null || input . length ( ) == NUM_ ) {", "return input ; }", "return ENCRYPTION PREFIX + encryption Service . encrypt ( input ) ; }"]}
{"ids": "44802", "code": ["public static void create Federated Namespace ( URI namespace , Zoo Keeper Client zkc ) throws Interrupted Exception , Zoo Keeper Client . Zoo Keeper Connection Exception , Keeper Exception {", "String zk Sub Namespaces Path = namespace . get Path ( ) + STR_ + ZNODE SUB NAMESPACES ;", "Utils . zk Create Full Path Optimistic ( zkc , zk Sub Namespaces Path , new byte [ NUM_ ] , zkc . get Default ACL ( ) , Create Mode . PERSISTENT ) ; }"]}
{"ids": "81090", "code": ["public static Executor create Task Distributor ( ) {", "return Executors . new Cached Thread Pool ( create Thread Factory ( Thread . NORM PRIORITY , STR_ ) ) ; }"]}
{"ids": "31311", "code": ["public String process ( ) {", "while ( off < count ) {", "while ( off < count ) {", "char ch = text [ off ] ;", "if ( ! is Special ( ch ) ) {", "break ; }", "off ++ ; }", "if ( ! acronym ( ) ) {", "token ( ) ;", "number ( ) ; } }", "return builder . to String ( ) ; }"]}
{"ids": "1336", "code": ["public static String bytes To Bin Hex ( byte [ ] data , int n Start Pos , int n Num Of Bytes ) {", "String Builder sbuf = new String Builder ( ) ;", "sbuf . set Length ( n Num Of Bytes << NUM_ ) ;", "int n Pos = NUM_ ;", "for ( int n I = NUM_ ; n I < n Num Of Bytes ; n I ++ ) {", "sbuf . set Char At ( n Pos ++ , HEXTAB [ ( data [ n I + n Start Pos ] > > NUM_ ) & NUM_ ] ) ;", "sbuf . set Char At ( n Pos ++ , HEXTAB [ data [ n I + n Start Pos ] & NUM_ ] ) ; }", "return sbuf . to String ( ) ; }"]}
{"ids": "15889", "code": ["private static int [ ] mult 128 ( int [ ] a , int [ ] b ) {", "int [ ] result = new int [ NUM_ ] ;", "int [ ] a 0 = new int [ NUM_ ] ;", "System . arraycopy ( a , NUM_ , a 0 , NUM_ , Math . min ( NUM_ , a . length ) ) ;", "int [ ] a 1 = new int [ NUM_ ] ;", "if ( a . length > NUM_ ) {", "System . arraycopy ( a , NUM_ , a 1 , NUM_ , Math . min ( NUM_ , a . length - NUM_ ) ) ; }", "int [ ] b 0 = new int [ NUM_ ] ;", "System . arraycopy ( b , NUM_ , b 0 , NUM_ , Math . min ( NUM_ , b . length ) ) ;", "int [ ] b 1 = new int [ NUM_ ] ;", "if ( b . length > NUM_ ) {", "System . arraycopy ( b , NUM_ , b 1 , NUM_ , Math . min ( NUM_ , b . length - NUM_ ) ) ; }", "if ( a 1 [ NUM_ ] == NUM_ && b 1 [ NUM_ ] == NUM_ ) {", "if ( a 1 [ NUM_ ] != NUM_ || b 1 [ NUM_ ] != NUM_ ) {", "int [ ] c = mult 32 ( a 1 [ NUM_ ] , b 1 [ NUM_ ] ) ;", "result [ NUM_ ] ^= c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ; } }", "else {", "int [ ] c = mult 64 ( a 1 , b 1 ) ;", "result [ NUM_ ] ^= c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ^ c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ^ c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ;", "result [ NUM_ ] ^= c [ NUM_ ] ; }", "a 1 [ NUM_ ] ^= a 0 [ NUM_ ] ;", "a 1 [ NUM_ ] ^= a 0 [ NUM_ ] ;", "b 1 [ NUM_ ] ^= b 0 [ NUM_ ] ;", "b 1 [ NUM_ ] ^= b 0 [ NUM_ ] ;", "if ( a 1 [ NUM_ ] == NUM_ && b 1 [ NUM_ ] == NUM_ ) {", "int [ ] d = mult 32 ( a 1 [ NUM_ ] , b 1 [ NUM_ ] ) ;", "result [ NUM_ ] ^= d [ NUM_ ] ;", "result [ NUM_ ] ^= d [ NUM_ ] ; }", "else {", "int [ ] d = mult 64 ( a 1 , b 1 ) ;", "result [ NUM_ ] ^= d [ NUM_ ] ;", "result [ NUM_ ] ^= d [ NUM_ ] ;", "result [ NUM_ ] ^= d [ NUM_ ] ;", "result [ NUM_ ] ^= d [ NUM_ ] ; }", "if ( a 0 [ NUM_ ] == NUM_ && b 0 [ NUM_ ] == NUM_ ) {", "int [ ] e = mult 32 ( a 0 [ NUM_ ] , b 0 [ NUM_ ] ) ;", "result [ NUM_ ] ^= e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ; }", "else {", "int [ ] e = mult 64 ( a 0 , b 0 ) ;", "result [ NUM_ ] ^= e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ^ e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ^ e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ;", "result [ NUM_ ] ^= e [ NUM_ ] ; }", "return result ; }"]}
{"ids": "22709", "code": ["public static void update Last ( ) {", "Client Utils . last Update = System . current Time Millis ( ) ; }"]}
{"ids": "53979", "code": ["public Replica Sets ( Collection < Replica Set > rs Specs ) {", "if ( rs Specs != null ) {", "rs Specs . for Each ( null ) ; }", "Collections . sort ( non Replica Sets ) ; }"]}
{"ids": "44919", "code": ["static private String BYTE Max ( ) {", "byte temp Value = Byte . MAX VALUE ;", "return String . value Of ( temp Value ) ; }"]}
{"ids": "28098", "code": ["protected Path Node path Node ( String pattern ) {", "final String seq [ ] = pattern . split ( STR_ ) ;", "final Path Elt elements [ ] = new Path Elt [ seq . length ] ;", "Path Mod mod = null ;", "for ( int i = NUM_ ; i < seq . length ; i ++ ) {", "final String s = seq [ i ] ;", "boolean inverse = s . char At ( NUM_ ) == STR_ ;", "switch ( s . char At ( s . length ( ) - NUM_ ) ) {", "case STR_ :", "mod = Path Mod . ZERO OR MORE ;", "break ;", "case STR_ :", "mod = Path Mod . ONE OR MORE ;", "break ;", "case STR_ :", "mod = Path Mod . ZERO OR ONE ;", "break ; }", "String c = s . substring ( inverse ? NUM_ : NUM_ , s . length ( ) - ( mod != null ? NUM_ : NUM_ ) ) ;", "elements [ i ] = new Path Elt ( constant Node ( c ) , inverse , mod ) ; }", "return new Path Node ( new Path Alternative ( new Path Sequence ( elements ) ) ) ; }"]}
{"ids": "4247", "code": ["@ Override public int startup New Worker ( int priority ) {", "int actual Workers Started = startup New Worker ( priority , null , null ) ;", "return actual Workers Started ; }"]}
{"ids": "23179", "code": ["public void add Impl Interface ( String iname ) {", "impl Interfaces . add ( iname ) ; }"]}
{"ids": "43258", "code": ["private static synchronized boolean check Folder Permissions ( String Builder a String Builder , String a Directory ) {", "File directory = new File ( a Directory ) ;", "if ( ! directory . exists ( ) ) {", "directory . mkdirs ( ) ; }", "if ( ! directory . can Read ( ) ) {", "a String Builder . append ( STR_ + directory + STR_ + STR_ ) ;", "return false ; }", "if ( ! directory . can Write ( ) ) {", "a String Builder . append ( STR_ + directory + STR_ + STR_ ) ;", "return false ; }", "return true ; }"]}
{"ids": "4593", "code": ["protected Qualified Item [ ] parse Qualified Items ( final String [ ] arguments , final Version Spec default Version , final boolean allow Version Range , final int start Index ) {", "Check . not Null ( arguments , STR_ ) ;", "final List < Qualified Item > items = new Array List < Qualified Item > ( arguments . length ) ;", "for ( int i = start Index ; i < arguments . length ; i ++ ) {", "final String arg = arguments [ i ] ;", "if ( ! String Util . is Null Or Empty ( arg ) ) {", "try {", "final Qualified Item qi = new Qualified Item ( arg , Version Control Constants . AUTHENTICATED USER , default Version , allow Version Range ) ;", "items . add ( qi ) ; }", "catch ( final Version Spec Parse Exception e ) {", "report Wrong Argument ( arg , e ) ; }", "catch ( final Label Spec Parse Exception e ) {", "report Wrong Argument ( arg , e ) ; } } }", "return items . to Array ( new Qualified Item [ items . size ( ) ] ) ; }"]}
{"ids": "68639", "code": ["public Eip Editor ( ) {", "super ( ) ;", "initialize Editing Domain ( ) ; }"]}
{"ids": "18391", "code": ["public boolean delete Entry ( Basic Pool Entry entry ) {", "final boolean found = free Entries . remove ( entry ) ;", "if ( found ) num Entries -- ;", "return found ; }"]}
{"ids": "23048", "code": ["@ Deprecated public void request Contact Capabilities ( Contact Id contact ) throws Rcs Service Not Registered Exception , Rcs Service Not Available Exception , Rcs Generic Exception {", "if ( m Api == null ) {", "throw new Rcs Service Not Available Exception ( ) ; }", "try {", "List < Contact Id > list Of Contacts = new Array List < > ( ) ;", "list Of Contacts . add ( contact ) ;", "m Api . request Contact Capabilities 2 ( list Of Contacts ) ; }", "catch ( Exception e ) {", "Rcs Illegal Argument Exception . assert Exception ( e ) ;", "Rcs Service Not Registered Exception . assert Exception ( e ) ;", "throw new Rcs Generic Exception ( e ) ; } }"]}
{"ids": "7116", "code": ["public Conversation Service ( final String version Date , String username , String password ) {", "this ( version Date ) ;", "set Username And Password ( username , password ) ; }"]}
{"ids": "39621", "code": ["public Custom Optional < Kinesis Record > next ( ) throws Transient Kinesis Exception {", "read More If Necessary ( ) ;", "if ( data . is Empty ( ) ) {", "return Custom Optional . absent ( ) ; }", "else {", "Kinesis Record record = data . remove First ( ) ;", "checkpoint = checkpoint . move After ( record ) ;", "return Custom Optional . of ( record ) ; } }"]}
{"ids": "43815", "code": ["@ Override public final synchronized void add Remove Statements ( Collection < Statement > added , Collection < Statement > removed ) throws IO Exception {", "Map Of List Maps < Resource , String , Statement > rs Added = new Map Of List Maps < Resource , String , Statement > ( ) ;", "Map Of List Maps < Resource , String , Statement > rs Removed = new Map Of List Maps < Resource , String , Statement > ( ) ;", "Hash Set < Resource > resources = new Hash Set < Resource > ( ) ;", "for ( Statement s : added ) {", "rs Added . add ( s . get Subject ( ) , Search Fields . get Context ID ( s . get Context ( ) ) , s ) ;", "resources . add ( s . get Subject ( ) ) ; }", "for ( Statement s : removed ) {", "rs Removed . add ( s . get Subject ( ) , Search Fields . get Context ID ( s . get Context ( ) ) , s ) ;", "resources . add ( s . get Subject ( ) ) ; }", "logger . debug ( STR_ + removed . size ( ) + STR_ + added . size ( ) + STR_ ) ;", "Bulk Updater updater = new Bulk Update ( ) ;", "for ( Resource resource : resources ) {", "Map < String , List < Statement > > stmts To Remove = rs Removed . get ( resource ) ;", "Map < String , List < Statement > > stmts To Add = rs Added . get ( resource ) ;", "Set < String > contexts To Update = new Hash Set < String > ( stmts To Add . key Set ( ) ) ;", "contexts To Update . add All ( stmts To Remove . key Set ( ) ) ;", "Map < String , Search Document > docs By Context = new Hash Map < String , Search Document > ( ) ;", "String resource Id = Search Fields . get Resource ID ( resource ) ;", "Iterable < ? extends Search Document > documents = get Documents ( resource Id ) ;", "for ( Search Document doc : documents ) {", "docs By Context . put ( doc . get Context ( ) , doc ) ; }", "for ( String context Id : contexts To Update ) {", "String id = Search Fields . form Id String ( resource Id , context Id ) ;", "Search Document document = docs By Context . get ( context Id ) ;", "if ( document == null ) {", "document = new Document ( id , resource Id , context Id ) ;", "List < Statement > list = stmts To Add . get ( context Id ) ;", "if ( list != null ) {", "for ( Statement s : list ) {", "add Property ( s , document ) ; } }", "updater . add ( document ) ;", "if ( stmts To Remove . contains Key ( context Id ) ) logger . info ( STR_ , resource , context Id ) ; }", "else {", "Map < String , Set < String > > removed Of Resource = null ; {", "List < Statement > removed Statements = stmts To Remove . get ( context Id ) ;", "if ( removed Statements != null && ! removed Statements . is Empty ( ) ) {", "removed Of Resource = new Hash Map < String , Set < String > > ( ) ;", "for ( Statement r : removed Statements ) {", "String val = Search Fields . get Literal Property Value As String ( r ) ;", "if ( val != null ) {", "String field = Search Fields . get Property Field ( r . get Predicate ( ) ) ;", "Set < String > removed Values = removed Of Resource . get ( field ) ;", "if ( removed Values == null ) {", "removed Values = new Hash Set < String > ( ) ;", "removed Of Resource . put ( field , removed Values ) ; }", "removed Values . add ( val ) ; } } } }", "Search Document new Document = new Document ( id , resource Id , context Id ) ;", "boolean mutated = copy Document ( new Document , document , removed Of Resource ) ; {", "List < Statement > added To Resource = stmts To Add . get ( context Id ) ;", "String val ;", "if ( added To Resource != null && ! added To Resource . is Empty ( ) ) {", "Property Cache property Cache = new Property Cache ( new Document ) ;", "for ( Statement s : added To Resource ) {", "val = Search Fields . get Literal Property Value As String ( s ) ;", "if ( val != null ) {", "String field = Search Fields . get Property Field ( s . get Predicate ( ) ) ;", "if ( ! property Cache . has Property ( field , val ) ) {", "add Property ( s , new Document ) ;", "mutated = true ; } } } } }", "int nr Properties = count Property Values ( new Document ) ;", "if ( nr Properties > NUM_ ) {", "if ( mutated ) {", "updater . update ( new Document ) ; } }", "else {", "updater . delete ( document ) ; } } } }", "updater . end ( ) ; }"]}
{"ids": "76189", "code": ["Object to Type ( String value , String pattern , Locale locale ) {", "Calendar calendar = to Calendar ( value , pattern , locale ) ;", "return to Type ( calendar ) ; }"]}
{"ids": "45975", "code": ["private Snmp Pdu Packet execute Sub Request ( Snmp Pdu Packet req , Object user Data ) {", "int error Status = Snmp Definitions . snmp Rsp No Error ;", "int i ;", "if ( req . type == pdu Set Request Pdu ) {", "i = NUM_ ;", "for ( Enumeration < Snmp Sub Request Handler > e = subs . elements ( ) ; e . has More Elements ( ) ; i ++ ) {", "Snmp Sub Request Handler sub = e . next Element ( ) ;", "sub . set User Data ( user Data ) ;", "sub . type = pdu Walk Request ;", "sub . run ( ) ;", "sub . type = pdu Set Request Pdu ;", "if ( sub . get Error Status ( ) != Snmp Definitions . snmp Rsp No Error ) {", "if ( SNMP ADAPTOR LOGGER . is Loggable ( Level . FINEST ) ) {", "SNMP ADAPTOR LOGGER . logp ( Level . FINEST , dbg Tag , STR_ , STR_ ) ; }", "return new Error Response Pdu ( req , error Status , sub . get Error Index ( ) + NUM_ ) ; } } }", "i = NUM_ ;", "for ( Enumeration < Snmp Sub Request Handler > e = subs . elements ( ) ; e . has More Elements ( ) ; i ++ ) {", "Snmp Sub Request Handler sub = e . next Element ( ) ;", "sub . set User Data ( user Data ) ;", "sub . run ( ) ;", "if ( sub . get Error Status ( ) != Snmp Definitions . snmp Rsp No Error ) {", "if ( SNMP ADAPTOR LOGGER . is Loggable ( Level . FINEST ) ) {", "SNMP ADAPTOR LOGGER . logp ( Level . FINEST , dbg Tag , STR_ , STR_ ) ; }", "return new Error Response Pdu ( req , error Status , sub . get Error Index ( ) + NUM_ ) ; } }", "return null ; }"]}
{"ids": "48957", "code": ["Method ( Method Doc method Doc ) {", "this . method Doc = method Doc ;", "exception Types = method Doc . thrown Exceptions ( ) ;", "Arrays . sort ( exception Types , new Class Doc Comparator ( ) ) ;", "operation String = compute Operation String ( ) ;", "name And Descriptor = method Doc . name ( ) + Util . method Descriptor Of ( method Doc ) ;", "method Hash = compute Method Hash ( ) ; }"]}
{"ids": "40161", "code": ["public Deterministic Key ( Immutable List < Child Number > child Number Path , byte [ ] chain Code , Lazy EC Point public As Point , @ Nullable Big Integer priv , @ Nullable Deterministic Key parent ) {", "super ( priv , compress Point ( check Not Null ( public As Point ) ) ) ;", "check Argument ( chain Code . length == NUM_ ) ;", "this . parent = parent ;", "this . child Number Path = check Not Null ( child Number Path ) ;", "this . chain Code = Arrays . copy Of ( chain Code , chain Code . length ) ;", "this . depth = parent == null ? NUM_ : parent . depth + NUM_ ;", "this . parent Fingerprint = ( parent != null ) ? parent . get Fingerprint ( ) : NUM_ ; }"]}
{"ids": "50059", "code": ["private static void s ua Col Sum Lt Ge ( Matrix Block in , Matrix Block out , double [ ] bv , Binary Operator b Op ) throws DML Runtime Exception {", "int agg 0 = sum Row Sum Gt Le Col Sum Lt Ge ( NUM_ , bv , b Op ) ;", "out . allocate Dense Block ( true ) ;", "Arrays . fill ( out . get Dense Block ( ) , NUM_ , out . get Num Columns ( ) , agg 0 ) ;", "if ( agg 0 != NUM_ ) out . set Non Zeros ( out . get Num Columns ( ) ) ;", "if ( in . is Empty Block ( false ) ) return ;", "Sparse Block sblock = in . get Sparse Block ( ) ;", "for ( int j = NUM_ ; j < sblock . num Rows ( ) ; j ++ ) if ( ! sblock . is Empty ( j ) ) {", "int apos = sblock . pos ( j ) ;", "int alen = sblock . size ( j ) ;", "int [ ] aix = sblock . indexes ( j ) ;", "double [ ] avals = sblock . values ( j ) ;", "for ( int i = apos ; i < apos + alen ; i ++ ) {", "int cnt = sum Row Sum Gt Le Col Sum Lt Ge ( avals [ i ] , bv , b Op ) ;", "out . quick Set Value ( NUM_ , aix [ i ] , cnt ) ; } } }"]}
{"ids": "5947", "code": ["public Held Locks Grant ( Big Integer grant Id ) {", "this . grant Id = Preconditions . check Not Null ( grant Id ) ;", "creation Date Ms = System . current Time Millis ( ) ;", "expiration Date Ms = - NUM_ ;", "lock Map = Lock Collections . of ( ) ;", "lock Timeout = null ;", "version Id = null ; }"]}
{"ids": "11538", "code": ["public void remove From All Listeners ( Map Bean map Bean ) {", "if ( map Bean != null ) {", "remove Zoom Listener ( ( Zoom Listener ) map Bean ) ;", "map Bean . remove Projection Listener ( this ) ;", "scale Field . set Text ( STR_ ) ; } }"]}
{"ids": "56640", "code": ["public static < T > Future W < T > of Supplier ( final Supplier < T > s ) {", "return Future W . of ( Completable Future . supply Async ( s ) ) ; }"]}
{"ids": "23973", "code": ["@ Override public void to Data ( Data Output out ) throws IO Exception {", "super . to Data ( out ) ;", "out . write Long ( refresh Interval ) ;", "Data Serializer . write Object Array ( alert Defs , out ) ; }"]}
{"ids": "80911", "code": ["public static boolean is String ( String str ) {", "return null != string Hash Table . get ( str ) ; }"]}
{"ids": "6237", "code": ["public void add Changing Listener ( On Wheel Changed Listener listener ) {", "changing Listeners . add ( listener ) ; }"]}
{"ids": "2615", "code": ["@ Override public Tree < String > extract Best Max Rule Parse ( int start , int end , List < String > sentence ) {", "return extract Best Max Rule Parse 1 ( start , end , NUM_ , sentence ) ; }"]}
{"ids": "38948", "code": ["private Instances vote Dataset ( Instances dataset ) throws Exception {", "for ( int i = NUM_ ; i < dataset . num Instances ( ) ; i ++ ) {", "Instance inst = dataset . first Instance ( ) ;", "inst = voted Reclassify Example ( inst ) ;", "dataset . add ( inst ) ;", "dataset . delete ( NUM_ ) ; }", "return dataset ; }"]}
{"ids": "72132", "code": ["@ Override public String choose Client Alias ( final String [ ] key Type , final Principal [ ] issuers , final Socket socket ) {", "if ( key Manager != null ) {", "return key Manager . choose Client Alias ( key Type , issuers , socket ) ; }", "return null ; }"]}
{"ids": "82179", "code": ["CSS Element parse CSS ( Input Stream Reader r , HTML Component html C ) throws IO Exception {", "Ext Input Stream Reader er = new Ext Input Stream Reader ( r ) ;", "return parse CSS ( er , html C , null , null ) ; }"]}
{"ids": "68071", "code": ["protected Pooled Connection create ( boolean increment Counter ) {", "if ( increment Counter ) size . increment And Get ( ) ;", "Pooled Connection con = new Pooled Connection ( get Pool Properties ( ) , this ) ;", "return con ; }"]}
{"ids": "49277", "code": ["void release ( ) {", "if ( sd Buffer != null ) sd Buffer . release ( ) ;", "if ( acl Buffer != null ) acl Buffer . release ( ) ;", "if ( sid List != null ) {", "for ( Long sid : sid List ) {", "Local Free ( sid ) ; } } }"]}
{"ids": "14864", "code": ["private void parse Session Expiration Time Info ( Element sess ) {", "String sid = null ;", "Long exp Time = null ;", "String temp = sess . get Attribute ( STR_ ) ;", "if ( temp != null ) {", "sid = temp ; }", "temp = sess . get Attribute ( STR_ ) ;", "if ( temp != null ) {", "exp Time = new Long ( temp ) ; }", "session Response . add Session For Given UUID ( sid , exp Time ) ; }"]}
{"ids": "3955", "code": ["public static long generate ( String value ) {", "int len = value . length ( ) ;", "long crc = NUM_ ;", "for ( int i = NUM_ ; i < len ; i ++ ) crc = next ( crc , value . char At ( i ) ) ;", "return crc ; }"]}
{"ids": "17095", "code": ["public Replace Dialog ( J Text Component text , Find Replace Actions finder Actions ) {", "super ( Action Utils . get Frame For ( text ) , false ) ;", "init Components ( ) ;", "register Key Action ( this ) ;", "text Component = text ;", "finder = finder Actions ;", "text Component . add Caret Listener ( this ) ;", "set Location Relative To ( text . get Root Pane ( ) ) ; }"]}
{"ids": "9545", "code": ["public String dump ( X 509 Certificate certificate ) throws Asn 1 Exception , IO Exception {", "try {", "return dump ( certificate . get Encoded ( ) ) ; }", "catch ( IO Exception ex ) {", "throw new Asn 1 Exception ( res . get String ( STR_ ) , ex ) ; }", "catch ( Certificate Encoding Exception ex ) {", "throw new Asn 1 Exception ( res . get String ( STR_ ) , ex ) ; } }"]}
{"ids": "7393", "code": ["List < String > find In Package ( Test test , String package Name ) {", "List < String > local Clsss Or Pkgs = new Array List < String > ( ) ;", "package Name = package Name . replace ( STR_ , STR_ ) ;", "Enumeration < URL > urls ;", "try {", "urls = classloader . get Resources ( package Name ) ;", "if ( ! urls . has More Elements ( ) ) {", "log . warn ( STR_ + package Name + STR_ ) ; } }", "catch ( IO Exception ioe ) {", "log . warn ( STR_ + package Name ) ;", "return local Clsss Or Pkgs ; }", "return find In Package With Urls ( test , package Name , urls ) ; }"]}
{"ids": "81937", "code": ["public Cloud Object ( String type , int permissions ) {", "access Permissions = permissions ;", "values . put ( Cloud Storage . TYPE FIELD , type ) ; }"]}
{"ids": "79563", "code": ["private static Decoder Result create Decoder Result From Ambiguous Values ( int ec Level , int [ ] codewords , int [ ] erasure Array , int [ ] ambiguous Indexes , int [ ] [ ] ambiguous Index Values ) throws Format Exception , Checksum Exception {", "int [ ] ambiguous Index Count = new int [ ambiguous Indexes . length ] ;", "int tries = NUM_ ;", "while ( tries -- > NUM_ ) {", "for ( int i = NUM_ ; i < ambiguous Index Count . length ; i ++ ) {", "codewords [ ambiguous Indexes [ i ] ] = ambiguous Index Values [ i ] [ ambiguous Index Count [ i ] ] ; }", "try {", "return decode Codewords ( codewords , ec Level , erasure Array ) ; }", "catch ( Checksum Exception ignored ) { }", "if ( ambiguous Index Count . length == NUM_ ) {", "throw Checksum Exception . get Checksum Instance ( ) ; }", "for ( int i = NUM_ ; i < ambiguous Index Count . length ; i ++ ) {", "if ( ambiguous Index Count [ i ] < ambiguous Index Values [ i ] . length - NUM_ ) {", "ambiguous Index Count [ i ] ++ ;", "break ; }", "else {", "ambiguous Index Count [ i ] = NUM_ ;", "if ( i == ambiguous Index Count . length - NUM_ ) {", "throw Checksum Exception . get Checksum Instance ( ) ; } } } }", "throw Checksum Exception . get Checksum Instance ( ) ; }"]}
{"ids": "41719", "code": ["public double distance ( Double Vector v ) {", "double delta X = v . x - x , delta Y = v . y - y , delta Z = v . z - z ;", "return Math . sqrt ( delta X * delta X + delta Y * delta Y + delta Z * delta Z ) ; }"]}
{"ids": "39343", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( ) ;", "new Vector . add ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ + STR_ + STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "19903", "code": ["@ Override public void drop User ( User user , boolean ignore ) throws SQL Exception {", "String sql = String . format ( STR_ , user . get Login ( ) ) ;", "try {", "execute ( sql ) ; }", "catch ( SQL Exception e ) {", "if ( ! ignore ) {", "throw e ; }", "else if ( logger . is Debug Enabled ( ) ) {", "logger . debug ( STR_ + sql , e ) ; } } }"]}
{"ids": "29461", "code": ["public double normalized Distance ( double [ ] point 1 , double [ ] point 2 ) throws Exception {", "return Math . sqrt ( distance 2 ( point 1 , point 2 ) ) / point 1 . length ; }"]}
{"ids": "86571", "code": ["public static < T > void on Next Dropped ( T t ) {", "if ( t != null ) {", "Consumer < Object > hook = Hooks . on Next Dropped Hook ;", "if ( hook == null ) {", "throw Exceptions . fail With Cancel ( ) ; }", "hook . accept ( t ) ; } }"]}
{"ids": "57084", "code": ["public static int [ ] random Ints ( int max , int count ) {", "int [ ] vals = new int [ count ] ;", "for ( int i = NUM_ ; i < count ; i ++ ) vals [ i ] = SEEDED RANDOM . next Int ( max ) ;", "return vals ; }"]}
{"ids": "79143", "code": ["void load Strings ( ) throws IO Exception {", "int count = m Header Item . string Ids Size ;", "int string Offsets [ ] = new int [ count ] ;", "seek ( m Header Item . string Ids Off ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "string Offsets [ i ] = read Int ( ) ; }", "m Strings = new String [ count ] ;", "seek ( string Offsets [ NUM_ ] ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "seek ( string Offsets [ i ] ) ;", "m Strings [ i ] = read String ( ) ; } }"]}
{"ids": "2122", "code": ["public boolean add Gps Date Time Stamp Tag ( long timestamp ) {", "Exif Tag t = build Tag ( TAG GPS DATE STAMP , m GPS Date Stamp Format . format ( timestamp ) ) ;", "if ( t == null ) {", "return false ; }", "set Tag ( t ) ;", "m GPS Time Stamp Calendar . set Time In Millis ( timestamp ) ;", "t = build Tag ( TAG GPS TIME STAMP , new Rational [ ] { new Rational ( m GPS Time Stamp Calendar . get ( Calendar . HOUR OF DAY ) , NUM_ ) , new Rational ( m GPS Time Stamp Calendar . get ( Calendar . MINUTE ) , NUM_ ) , new Rational ( m GPS Time Stamp Calendar . get ( Calendar . SECOND ) , NUM_ ) } ) ;", "if ( t == null ) {", "return false ; }", "set Tag ( t ) ;", "return true ; }"]}
{"ids": "29977", "code": ["public void add Area ( final Time Section AREA ) {", "if ( null == AREA ) return ;", "areas . add ( AREA ) ;", "Collections . sort ( areas , new Time Section Comparator ( ) ) ;", "fire Update Event ( SECTION EVENT ) ; }"]}
{"ids": "23120", "code": ["private void raise IO Exception ( String host , int port , String protocol ) {", "IO Exception Event io Error = new IO Exception Event ( this , host , port , protocol ) ;", "sip Provider . handle Event ( io Error , null ) ;", "set State ( SIP Dialog . TERMINATED STATE ) ; }"]}
{"ids": "1974", "code": ["public static double incomplete Gamma Complement ( double a , double x ) {", "double ans , ax , c , yc , r , t , y , z ;", "double pk , pkm 1 , pkm 2 , qk , qkm 1 , qkm 2 ;", "if ( x <= NUM_ || a <= NUM_ ) return NUM_ ;", "if ( x < NUM_ || x < a ) return NUM_ - incomplete Gamma ( a , x ) ;", "ax = a * Math . log ( x ) - x - ln Gamma ( a ) ;", "if ( ax < - MAXLOG ) return NUM_ ;", "ax = Math . exp ( ax ) ;", "y = NUM_ - a ;", "z = x + y + NUM_ ;", "c = NUM_ ;", "pkm 2 = NUM_ ;", "qkm 2 = x ;", "pkm 1 = x + NUM_ ;", "qkm 1 = z * x ;", "ans = pkm 1 / qkm 1 ;", "do {", "c += NUM_ ;", "y += NUM_ ;", "z += NUM_ ;", "yc = y * c ;", "pk = pkm 1 * z - pkm 2 * yc ;", "qk = qkm 1 * z - qkm 2 * yc ;", "if ( qk != NUM_ ) {", "r = pk / qk ;", "t = Math . abs ( ( ans - r ) / r ) ;", "ans = r ; }", "else t = NUM_ ;", "pkm 2 = pkm 1 ;", "pkm 1 = pk ;", "qkm 2 = qkm 1 ;", "qkm 1 = qk ;", "if ( Math . abs ( pk ) > big ) {", "pkm 2 *= biginv ;", "pkm 1 *= biginv ;", "qkm 2 *= biginv ;", "qkm 1 *= biginv ; } }", "while ( t > MACHEP ) ;", "return ans * ax ; }"]}
{"ids": "10515", "code": ["@ Override public Object deserialize Typed From Object ( Json Parser jp , Deserialization Context ctxt ) throws IO Exception , Json Processing Exception {", "Json Token t = jp . get Current Token ( ) ;", "if ( t == Json Token . START OBJECT ) {", "t = jp . next Token ( ) ; }", "else if ( t == Json Token . START ARRAY ) {", "return deserialize Typed Using Default Impl ( jp , ctxt , null ) ; }", "else if ( t != Json Token . FIELD NAME ) {", "return deserialize Typed Using Default Impl ( jp , ctxt , null ) ; }", "Token Buffer tb = null ;", "for ( ; t == Json Token . FIELD NAME ; t = jp . next Token ( ) ) {", "String name = jp . get Current Name ( ) ;", "jp . next Token ( ) ;", "if ( type Property Name . equals ( name ) ) {", "String type Id = jp . get Text ( ) ;", "Json Deserializer < Object > deser = find Deserializer ( ctxt , type Id ) ;", "if ( tb != null ) {", "jp = Json Parser Sequence . create Flattened ( tb . as Parser ( jp ) , jp ) ; }", "jp . next Token ( ) ;", "return deser . deserialize ( jp , ctxt ) ; }", "if ( tb == null ) {", "tb = new Token Buffer ( null ) ; }", "tb . write Field Name ( name ) ;", "tb . copy Current Structure ( jp ) ; }", "return deserialize Typed Using Default Impl ( jp , ctxt , tb ) ; }"]}
{"ids": "46503", "code": ["protected int layout Row ( Flow View fv , int row Index , int p 0 ) {", "int p 1 = super . layout Row ( fv , row Index , p 0 ) ;", "View row = fv . get View ( row Index ) ;", "Document doc = fv . get Document ( ) ;", "Object i 18 n Flag = doc . get Property ( Abstract Document . I 18 N Property ) ;", "if ( ( i 18 n Flag != null ) && i 18 n Flag . equals ( Boolean . TRUE ) ) {", "int n = row . get View Count ( ) ;", "if ( n > NUM_ ) {", "Abstract Document d = ( Abstract Document ) fv . get Document ( ) ;", "Element bidi Root = d . get Bidi Root Element ( ) ;", "byte [ ] levels = new byte [ n ] ;", "View [ ] reorder = new View [ n ] ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "View v = row . get View ( i ) ;", "int bidi Index = bidi Root . get Element Index ( v . get Start Offset ( ) ) ;", "Element bidi Elem = bidi Root . get Element ( bidi Index ) ;", "levels [ i ] = ( byte ) Style Constants . get Bidi Level ( bidi Elem . get Attributes ( ) ) ;", "reorder [ i ] = v ; }", "Bidi Utils . reorder Visually ( levels , reorder ) ;", "row . replace ( NUM_ , n , reorder ) ; } }", "return p 1 ; }"]}
{"ids": "54922", "code": ["public Generator ( String prop File ) {", "try {", "Buffered Input Stream bi = null ;", "try {", "bi = new Buffered Input Stream ( new File Input Stream ( prop File ) ) ;", "props . load ( bi ) ; }", "finally {", "if ( bi != null ) {", "bi . close ( ) ; } } }", "catch ( Exception e ) {", "set Default Props ( ) ; } }"]}
{"ids": "87136", "code": ["public static void clear Logging Behaviors ( ) {", "synchronized ( logging Behaviors ) {", "logging Behaviors . clear ( ) ; } }"]}
{"ids": "21205", "code": ["protected void audit Op ( URI tenant Id , URI user Id , Operation Type Enum op Type , boolean operational Status , String operation Stage , Object ... descparams ) {", "audit Mgr . record Audit Log ( tenant Id , user Id , EVENT SERVICE TYPE , op Type , System . current Time Millis ( ) , operational Status ? Audit Log Manager . AUDITLOG SUCCESS : Audit Log Manager . AUDITLOG FAILURE , operation Stage , descparams ) ; }"]}
{"ids": "26911", "code": ["@ Visible For Testing protected Process start Executor Process ( int container ) {", "return Shell Utils . run A Sync Process ( get Executor Command ( container ) , new File ( Local Context . working Directory ( config ) ) , Integer . to String ( container ) ) ; }"]}
{"ids": "8902", "code": ["private boolean is Item At Position Selectable ( int position ) {", "return ! m Unselectable Items . contains ( position ) ; }"]}
{"ids": "72209", "code": ["public Builder add Engine Settings ( final String engine Name , final List < String > imports , final List < String > static Imports , final List < String > scripts , final Map < String , Object > config ) {", "if ( null == imports ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( null == static Imports ) throw new Illegal Argument Exception ( STR_ ) ;", "if ( null == scripts ) throw new Illegal Argument Exception ( STR_ ) ;", "final Map < String , Object > m = null == config ? Collections . empty Map ( ) : config ;", "settings . put ( engine Name , new Engine Settings ( imports , static Imports , scripts , m ) ) ;", "return this ; }"]}
{"ids": "37188", "code": ["private void display Popup Menu ( final Mouse Event event ) {", "final int selected Index = get Selection Index ( event ) ;", "if ( selected Index != - NUM_ ) {", "final J Popup Menu popup Menu = get Popup Menu ( event . get X ( ) , event . get Y ( ) , selected Index ) ;", "if ( popup Menu != null ) {", "popup Menu . show ( this , event . get X ( ) , event . get Y ( ) ) ; } } }"]}
{"ids": "80945", "code": ["protected void handle Selected ( Structured Selection selection ) {", "I Status status = new Status ( I Status . OK , Platform UI . PLUGIN ID , I Status . OK , EMPTY STRING , null ) ;", "Object [ ] last Selection = current Selection ;", "current Selection = selection . to Array ( ) ;", "if ( selection . size ( ) == NUM_ ) {", "status = new Status ( I Status . ERROR , Platform UI . PLUGIN ID , I Status . ERROR , EMPTY STRING , null ) ;", "if ( last Selection != null && get List Selection Label Decorator ( ) != null ) {", "list . update ( last Selection , null ) ; }", "current Selection = null ; }", "else {", "status = new Status ( I Status . ERROR , Platform UI . PLUGIN ID , I Status . ERROR , EMPTY STRING , null ) ;", "List items = selection . to List ( ) ;", "Object item = null ;", "I Status temp Status = null ;", "for ( Iterator it = items . iterator ( ) ; it . has Next ( ) ; ) {", "Object o = it . next ( ) ;", "if ( o instanceof Items List Separator ) {", "continue ; }", "item = o ;", "temp Status = validate Item ( item ) ;", "if ( temp Status . is OK ( ) ) {", "status = new Status ( I Status . OK , Platform UI . PLUGIN ID , I Status . OK , EMPTY STRING , null ) ; }", "else {", "status = temp Status ;", "break ; } }", "if ( last Selection != null && get List Selection Label Decorator ( ) != null ) {", "list . update ( last Selection , null ) ; }", "if ( get List Selection Label Decorator ( ) != null ) {", "list . update ( current Selection , null ) ; } }", "refresh Details ( ) ;", "update Status ( status ) ; }"]}
{"ids": "402", "code": ["public Linked List < Diff > diff main ( String text 1 , String text 2 , boolean checklines ) {", "long deadline ;", "if ( Diff Timeout <= NUM_ ) {", "deadline = Long . MAX VALUE ; }", "else {", "deadline = System . current Time Millis ( ) + ( long ) ( Diff Timeout * NUM_ ) ; }", "return diff main ( text 1 , text 2 , checklines , deadline ) ; }"]}
{"ids": "21384", "code": ["private void update Alt Deviceid ( Network FC Zone Info fabric Info , String fabric Id , String fabric WWN , String key , Map < String , Network Lite > fabric Id 2 Network ) {", "if ( fabric Info != null && fabric Info . get Alt Network Device Id ( ) == null ) {", "if ( fabric Id 2 Network . get ( key ) == null ) {", "Network Lite network = Network Util . get Network Lite By Fabric Id ( fabric Id , fabric WWN , db Client ) ;", "if ( network != null ) {", "fabric Id 2 Network . put ( key , network ) ;", "URI id = fabric Info . get Network Device Id ( ) ;", "for ( String str Uri : network . get Network Systems ( ) ) {", "if ( ! str Uri . equals ( id . to String ( ) ) ) {", "id = URI . create ( str Uri ) ;", "break ; } }", "fabric Info . set Alt Network Device Id ( id ) ; } } } }"]}
{"ids": "10763", "code": ["public static Network Info from Version ( final byte version ) {", "for ( final Network Info info : KNOWN NETWORKS ) {", "if ( version == info . get Version ( ) ) {", "return info ; } }", "throw new Illegal Argument Exception ( String . format ( STR_ , version ) ) ; }"]}
{"ids": "4091", "code": ["public void write ( Byte Code Writer out ) throws IO Exception {", "out . write UTF 8 Const ( get Name ( ) ) ;", "Temp Output Stream ts = new Temp Output Stream ( ) ;", "Byte Code Writer o 2 = new Byte Code Writer ( ts , out . get Java Class ( ) ) ;", "o 2 . write Short ( exceptions . size ( ) ) ;", "for ( int i = NUM_ ; i < exceptions . size ( ) ; i ++ ) {", "String exn = exceptions . get ( i ) ;", "o 2 . write Class ( exn ) ; }", "ts . close ( ) ;", "out . write Int ( ts . get Length ( ) ) ;", "Temp Buffer ptr = ts . get Head ( ) ;", "for ( ; ptr != null ; ptr = ptr . next ( ) ) out . write ( ptr . buffer ( ) , NUM_ , ptr . length ( ) ) ;", "ts . destroy ( ) ; }"]}
{"ids": "55382", "code": ["public synchronized Addressbook Entry remove ( String name , Set < String > categories To Remove ) {", "name = String Util . to Lower Case ( name ) ;", "Addressbook Entry current Entry = entries . get ( name ) ;", "if ( current Entry != null ) {", "Set < String > current Categories = current Entry . get Categories ( ) ;", "for ( String category : categories To Remove ) {", "current Categories . remove ( category ) ; }", "Addressbook Entry changed Entry = new Addressbook Entry ( name , current Categories ) ;", "entries . put ( name , changed Entry ) ;", "if ( ! current Entry . equals Fully ( changed Entry ) ) {", "save On Change ( ) ; }", "return changed Entry ; }", "return null ; }"]}
{"ids": "45285", "code": ["public String shortest Match ( String input ) {", "Trie Node node = root ;", "for ( int i = input . length ( ) - NUM_ ; i >= NUM_ ; i -- ) {", "node = node . get Child ( input . char At ( i ) ) ;", "if ( node == null ) return null ;", "if ( node . is Terminal ( ) ) return input . substring ( i ) ; }", "return null ; }"]}
{"ids": "1311", "code": ["public static RH Extension has RH Extensions ( Config Impl config , Extension Defintion ed ) throws Page Exception , SAX Exception , IO Exception {", "XML Config Admin admin = new XML Config Admin ( config , null ) ;", "return admin . has RH Extensions ( config , ed ) ; }"]}
{"ids": "61823", "code": ["public void add Query To History ( String sql ) {", "query History . remove ( sql ) ;", "query History . add First ( sql ) ;", "while ( history Size >= NUM_ && query History . size ( ) > history Size ) {", "query History . remove Last ( ) ; } }"]}
{"ids": "87071", "code": ["public String Builder encode Body ( String Builder retval ) {", "retval . append ( LESS THAN ) ;", "error Info . encode ( retval ) ;", "retval . append ( GREATER THAN ) ;", "if ( ! parameters . is Empty ( ) ) {", "retval . append ( SEMICOLON ) ;", "parameters . encode ( retval ) ; }", "return retval ; }"]}
{"ids": "86556", "code": ["public final < R > Parallel Flux < R > reduce ( Supplier < R > initial Supplier , Bi Function < R , T , R > reducer ) {", "Objects . require Non Null ( initial Supplier , STR_ ) ;", "Objects . require Non Null ( reducer , STR_ ) ;", "return on Assembly ( new Parallel Reduce < > ( this , initial Supplier , reducer ) ) ; }"]}
{"ids": "86329", "code": ["private void handle Button Event ( final Event event ) {", "switch ( event . type ) {", "case SWT . Focus In : {", "handle Focus Events ( SWT . Focus In ) ;", "break ; }", "case SWT . Selection : {", "change Visibility Of Popup Window ( ! is Dropped ( ) ) ;", "break ; } } }"]}
{"ids": "76456", "code": ["private void perform Update Operations ( Context context , Request request , Json Value after Value , Json Value before Value ) throws Resource Exception {", "final String managed Id = get Managed Object Id ( context ) ;", "activity Logger . log ( context , request , STR_ , get Managed Object Path ( context ) , before Value , after Value , Status . SUCCESS ) ;", "managed Object Set Service . update ( context , new Update Request ( managed Id , after Value ) , managed Id , null , before Value , after Value , new Hash Set < > ( Arrays . as List ( property Ptr ) ) , new Hash Set < > ( Arrays . as List ( property Ptr ) ) ) ; }"]}
{"ids": "26036", "code": ["private boolean has Next Inet Socket Address ( ) {", "return next Inet Socket Address Index < inet Socket Addresses . size ( ) ; }"]}
{"ids": "23817", "code": ["public static Boolean can String Be Inline Encoded ( String skey ) {", "if ( skey . length ( ) > get Max Inline String Key ( MAX LONGS USED FOR STRING KEY , true ) ) {", "return null ; }", "if ( is Byte Encoding Ok ( skey ) ) {", "return Boolean . TRUE ; }", "else {", "if ( skey . length ( ) > get Max Inline String Key ( MAX LONGS USED FOR STRING KEY , false ) ) {", "return null ; }", "else {", "return Boolean . FALSE ; } } }"]}
{"ids": "40866", "code": ["public Builder ( Date created , Date last Modified ) {", "this . created = created != null ? new Date ( created . get Time ( ) ) : null ;", "this . last Modified = last Modified != null ? new Date ( last Modified . get Time ( ) ) : null ; }"]}
{"ids": "84201", "code": ["@ Override public void write Byte Stream ( Input Stream is ) throws IO Exception {", "while ( true ) {", "int len = SIZE - offset - NUM_ ;", "if ( len < NUM_ ) {", "flush Buffer ( ) ;", "len = SIZE - offset - NUM_ ; }", "len = is . read ( buffer , offset + NUM_ , len ) ;", "if ( len <= NUM_ ) {", "buffer [ offset ++ ] = BC BINARY DIRECT ;", "return ; }", "buffer [ offset + NUM_ ] = ( byte ) BC BINARY CHUNK ;", "buffer [ offset + NUM_ ] = ( byte ) ( len > > NUM_ ) ;", "buffer [ offset + NUM_ ] = ( byte ) ( len ) ;", "offset += len + NUM_ ; } }"]}
{"ids": "86345", "code": ["public void remove Selection Change Listener ( final Selection Change Listener listener ) {", "check Widget ( ) ;", "if ( listener == null ) {", "SWT . error ( SWT . ERROR NULL ARGUMENT ) ; }", "if ( selection Change Listeners == null ) {", "return ; }", "selection Change Listeners . remove ( listener ) ; }"]}
{"ids": "74272", "code": ["public Track add Track ( String name , String type ) {", "Track track = get Track By Name ( name , type ) ;", "if ( track == null ) {", "Id Number ++ ;", "String id = id + STR_ + Integer . to String ( Id Number ) ;", "log . debug ( STR_ , type , get Name ( ) , name , id ) ;", "track = new Track ( id , name , type , this ) ;", "register ( track ) ; }", "reset Moves ( ) ;", "return track ; }"]}
{"ids": "4460", "code": ["SQ Lite Loader Observer register Loader ( final SQ Lite Loader loader , final String table ) {", "Logger . d ( TAG , STR_ , table ) ;", "final SQ Lite Loader Observer entry = new SQ Lite Loader Observer ( loader , table ) ;", "m Active Loaders . add ( entry ) ;", "return entry ; }"]}
{"ids": "81940", "code": ["public void unbind Tree ( Container ui ) {", "int component Count = ui . get Component Count ( ) ;", "for ( int iter = NUM_ ; iter < component Count ; iter ++ ) {", "Component c = ui . get Component At ( iter ) ;", "if ( c instanceof Container ) {", "unbind Tree ( ( Container ) c ) ;", "continue ; }", "String bind = c . get Cloud Bound Property ( ) ;", "if ( bind != null && bind . length ( ) > NUM_ ) {", "String attribute Name = c . get Cloud Destination Property ( ) ;", "if ( attribute Name != null ) {", "unbind Property ( c , bind ) ; } } } }"]}
{"ids": "52315", "code": ["protected List < Item > to Items ( List < Model > models ) {", "if ( models == null ) {", "return Collections . empty List ( ) ; }", "int size = models . size ( ) ;", "List < Item > items = new Array List < > ( size ) ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "items . add ( to Item ( models . get ( i ) ) ) ; }", "return items ; }"]}
{"ids": "7305", "code": ["public void apply ( Filter Set filter Set , Filter Service Granular Lock Factory lock Factory ) {", "for ( Filter Set Entry entry : filter Set . get Filters ( ) ) {", "add ( entry . get Filter Value Set ( ) , entry . get Handle ( ) , lock Factory ) ; } }"]}
{"ids": "63335", "code": ["public void add Constraint Command ( Define Command command ) {", "if ( command instanceof Create Index ) {", "constraint Commands . add ( command ) ; }", "else {", "Alter Table Add Constraint con = ( Alter Table Add Constraint ) command ;", "boolean already Set ;", "if ( con . get Type ( ) == Command Interface . ALTER TABLE ADD CONSTRAINT PRIMARY KEY ) {", "already Set = set Primary Key Columns ( con . get Index Columns ( ) ) ; }", "else {", "already Set = false ; }", "if ( ! already Set ) {", "constraint Commands . add ( command ) ; } } }"]}
{"ids": "79694", "code": ["private static byte [ ] lmv 2 Response ( final byte [ ] hash , final byte [ ] challenge , final byte [ ] client Data ) throws Authentication Exception {", "final HMACMD 5 hmac MD 5 = new HMACMD 5 ( hash ) ;", "hmac MD 5 . update ( challenge ) ;", "hmac MD 5 . update ( client Data ) ;", "final byte [ ] mac = hmac MD 5 . get Output ( ) ;", "final byte [ ] lmv 2 Response = new byte [ mac . length + client Data . length ] ;", "System . arraycopy ( mac , NUM_ , lmv 2 Response , NUM_ , mac . length ) ;", "System . arraycopy ( client Data , NUM_ , lmv 2 Response , mac . length , client Data . length ) ;", "return lmv 2 Response ; }"]}
{"ids": "17708", "code": ["static < E > E check Type ( E obj , Class < ? extends E > type ) {", "if ( obj != null && ! type . is Instance ( obj ) ) {", "throw new Class Cast Exception ( STR_ + obj . get Class ( ) + STR_ + type ) ; }", "return obj ; }"]}
{"ids": "66493", "code": ["public void destroy ( ) {", "m filter Config = null ; }"]}
{"ids": "69558", "code": ["@ Override public Parcelable on Save Instance State ( ) {", "String path = m Photo File Path . get ( ) ;", "if ( path == null ) return null ;", "Bundle bundle = new Bundle ( ) ;", "bundle . put String ( STR_ , path ) ;", "return bundle ; }"]}
{"ids": "44575", "code": ["public static boolean create Folder ( String folder Path ) {", "if ( ! Text Utils . is Empty ( folder Path ) ) {", "File folder = new File ( folder Path ) ;", "return create Folder ( folder ) ; }", "return false ; }"]}
{"ids": "285", "code": ["@ Override public void key Released ( Key Event e ) {", "char [ ] password 1 = null ;", "char [ ] password 2 = null ;", "if ( password Field != null ) {", "password 1 = password Field . get Password ( ) ; }", "if ( repeat Password Field != null ) {", "password 2 = repeat Password Field . get Password ( ) ; }", "boolean tick Label Visible = false ;", "if ( password 1 != null && password 2 != null ) {", "if ( Arrays . equals ( password 1 , password 2 ) ) {", "tick Label Visible = true ; } }", "tick Label . set Visible ( tick Label Visible ) ;", "clear Messages ( ) ;", "for ( int i = NUM_ ; i < password 1 . length ; i ++ ) {", "password 1 [ i ] = NUM_ ; }", "for ( int i = NUM_ ; i < password 2 . length ; i ++ ) {", "password 2 [ i ] = NUM_ ; } }"]}
{"ids": "45718", "code": ["private static Period Formatter And Value select Formatter ( Period days Period ) {", "int days = days Period . get Days ( ) ;", "if ( days > NUM_ ) {", "return pav ( DAY FORMATTER , days ) ; }", "int hours = days Period . get Hours ( ) ;", "if ( hours > NUM_ ) {", "return pav ( HOUR FORMATTER , hours ) ; }", "int minutes = days Period . get Minutes ( ) ;", "if ( minutes > NUM_ ) {", "return pav ( MINUTE FORMATTER , minutes ) ; }", "int seconds = days Period . get Seconds ( ) ;", "if ( seconds > NUM_ ) {", "return pav ( SECOND FORMATTER , seconds ) ; }", "return null ; }"]}
{"ids": "22665", "code": ["void add Arg ( String arg ) {", "args . add ( arg ) ; }"]}
{"ids": "82521", "code": ["public java . lang . String Buffer insert ( int offset , float f ) {", "internal . insert ( offset , f ) ;", "return this ; }"]}
{"ids": "84938", "code": ["private void update Gwt 27 On ( I Java Project java Project , List < String > program Args , int index Disabled , int index Enabled , boolean super Dev Mode Enabled ) {", "if ( index Enabled > - NUM_ ) {", "program Args . remove ( index Enabled ) ; }", "if ( index Disabled > - NUM_ ) {", "program Args . remove ( index Disabled ) ; }", "if ( ! super Dev Mode Enabled ) {", "program Args . add ( NUM_ , SUPERDEVMODE DISABLED ARG ) ; } }"]}
{"ids": "55214", "code": ["default boolean smash Block ( Entity Player player , World world , Block Pos pos , I Block State state , Tool Tier tier ) {", "Tool Tier required = get Required Tier ( state ) ;", "if ( required != null && tier . is Greater Than Or Equal To ( required ) ) {", "float luck = tier . ordinal ( ) * NUM_ ;", "List < Item Stack > drops = get Drops ( player , world , pos , state , luck ) ;", "if ( drops . size ( ) > NUM_ ) {", "if ( ! world . is Remote ) {", "world . set Block To Air ( pos ) ;", "for ( Item Stack drop : drops ) {", "spawn As Entity ( world , pos , drop ) ; } }", "return true ; } }", "return false ; }"]}
{"ids": "21531", "code": ["protected String fetch Native Id ( String native Guid ) {", "String [ ] token = native Guid . split ( VNX File Constants . PLUS SEPERATOR ) ;", "return token [ token . length - NUM_ ] ; }"]}
{"ids": "28657", "code": ["public long rss ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "84041", "code": ["public static void init ( Context context , boolean is top ) {", "camera Manager = new Camera Manager ( context , is top ) ; }"]}
{"ids": "5670", "code": ["public static Plain Text plain ( float text ) {", "return plain ( Float . to String ( text ) ) ; }"]}
{"ids": "58224", "code": ["public final void append ( char value ) {", "char [ ] chunk ;", "if ( m first Free < m chunk Size ) chunk = m array [ m last Chunk ] ;", "else {", "int i = m array . length ;", "if ( m last Chunk + NUM_ == i ) {", "char [ ] [ ] newarray = new char [ i + NUM_ ] [ ] ;", "System . arraycopy ( m array , NUM_ , newarray , NUM_ , i ) ;", "m array = newarray ; }", "chunk = m array [ ++ m last Chunk ] ;", "if ( chunk == null ) {", "if ( m last Chunk == NUM_ << m rebundle Bits && m chunk Bits < m max Chunk Bits ) {", "m inner FSB = new Fast String Buffer ( this ) ; }", "chunk = m array [ m last Chunk ] = new char [ m chunk Size ] ; }", "m first Free = NUM_ ; }", "chunk [ m first Free ++ ] = value ; }"]}
{"ids": "87099", "code": ["public Socket create Socket ( Inet Address address , int port , Inet Address my Address , int my Port ) throws IO Exception {", "if ( my Address != null ) {", "Socket sock = new Socket ( ) ;", "sock . bind ( new Inet Socket Address ( my Address , NUM_ ) ) ;", "try {", "sock . connect ( new Inet Socket Address ( address , port ) , NUM_ ) ; }", "catch ( Socket Timeout Exception e ) {", "throw new Connect Exception ( STR_ + address + STR_ + port ) ; }", "return sock ; }", "else {", "Socket sock = new Socket ( ) ;", "if ( my Port != NUM_ ) {", "sock . bind ( new Inet Socket Address ( port ) ) ; }", "try {", "sock . connect ( new Inet Socket Address ( address , port ) , NUM_ ) ; }", "catch ( Socket Timeout Exception e ) {", "throw new Connect Exception ( STR_ + address + STR_ + port ) ; }", "return sock ; } }"]}
{"ids": "21871", "code": ["private static void update Cluster Tenant ( Db Client db Client , URI data Center Id , URI tenant Id ) {", "List < Named Element > clusters Uris = list Children ( db Client , data Center Id , Cluster . class , STR_ , STR_ ) ;", "for ( Named Element cluster Uri : clusters Uris ) {", "Cluster cluster = db Client . query Object ( Cluster . class , cluster Uri . get Id ( ) ) ;", "if ( cluster != null ) {", "cluster . set Tenant ( tenant Id ) ;", "db Client . persist Object ( cluster ) ; } } }"]}
{"ids": "81264", "code": ["public static int prefix Length ( char [ ] s 1 , char [ ] s 2 ) {", "int len = NUM_ ;", "int max = Math . min ( s 1 . length , s 2 . length ) ;", "for ( int i = NUM_ ; i < max && s 1 [ i ] == s 2 [ i ] ; ++ i ) ++ len ;", "return len ; }"]}
{"ids": "72345", "code": ["private static boolean is Less Than One Week ( Date date ) {", "Calendar calendar = Calendar . get Instance ( ) ;", "calendar . add ( Calendar . DAY OF MONTH , - NUM_ ) ;", "return date . after ( calendar . get Time ( ) ) ; }"]}
{"ids": "80776", "code": ["private int col To Loc ( int col , Vector < Mapping Pair > vec ) {", "int loc = col ;", "for ( int i = NUM_ ; ( i < vec . size ( ) ) && ( vec . element At ( i ) . col <= col ) ; i ++ ) {", "loc = loc + vec . element At ( i ) . inc ; }", "return loc ; }"]}
{"ids": "38107", "code": ["protected boolean [ ] can Handle N Classes ( Attr Types attr Types , int num Classes ) {", "print ( STR_ ) ;", "print Attribute Summary ( attr Types , Attribute . NOMINAL ) ;", "print ( STR_ ) ;", "Array List < String > accepts = new Array List < String > ( ) ;", "accepts . add ( STR_ ) ;", "accepts . add ( STR_ ) ;", "int num Train = get Num Instances ( ) , num Test = get Num Instances ( ) , missing Level = NUM_ ;", "boolean attribute Missing = false , class Missing = false ;", "int num Attr = NUM_ , attr Index = NUM_ ;", "return run Basic Test ( attr Types , num Attr , attr Index , Attribute . NOMINAL , missing Level , attribute Missing , class Missing , num Train , num Test , num Classes , accepts ) ; }"]}
{"ids": "67054", "code": ["public Type Variable type Variable ( ) {", "int id = type Variable List . size ( ) ;", "type Variable List . add ( null ) ;", "Type Variable result = new Type Variable ( id , this ) ;", "type Variable List . set ( id , result ) ;", "return result ; }"]}
{"ids": "81455", "code": ["public static char [ ] create Type Parameter Signature ( char [ ] type Parameter Name , char [ ] [ ] bound Signatures ) {", "int length = bound Signatures . length ;", "if ( length == NUM_ ) {", "return Char Operation . append ( type Parameter Name , C COLON ) ; }", "int bounds Size = NUM_ ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "bounds Size += bound Signatures [ i ] . length + NUM_ ; }", "int name Length = type Parameter Name . length ;", "char [ ] result = new char [ name Length + bounds Size ] ;", "System . arraycopy ( type Parameter Name , NUM_ , result , NUM_ , name Length ) ;", "int index = name Length ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "result [ index ++ ] = C COLON ;", "int bound Length = bound Signatures [ i ] . length ;", "System . arraycopy ( bound Signatures [ i ] , NUM_ , result , index , bound Length ) ;", "index += bound Length ; }", "return result ; }"]}
{"ids": "63424", "code": ["void cancel Statement ( String session Id , int statement Id ) {", "for ( Tcp Server Thread c : New . array List ( running ) ) {", "if ( c != null ) {", "c . cancel Statement ( session Id , statement Id ) ; } } }"]}
{"ids": "43854", "code": ["public static double parse Double ( String s ) {", "if ( POSITIVE INFINITY . equals ( s ) ) {", "return Double . POSITIVE INFINITY ; }", "else if ( NEGATIVE INFINITY . equals ( s ) ) {", "return Double . NEGATIVE INFINITY ; }", "else if ( Na N . equals ( s ) ) {", "return Double . Na N ; }", "else {", "s = trim Plus Sign ( s ) ;", "return Double . parse Double ( s ) ; } }"]}
{"ids": "51836", "code": ["public void finish Zombie Tasks With Error ( ) {", "List < Pollable Task > zombie Pollable Tasks ;", "do {", "logger . debug ( STR_ ) ;", "Page Request pageable = new Page Request ( NUM_ , NUM_ ) ;", "zombie Pollable Tasks = pollable Task Repository . find Zombie Pollable Tasks ( pageable ) ;", "for ( Pollable Task zombie Pollable Task : zombie Pollable Tasks ) {", "mark As Finished With Error ( zombie Pollable Task ) ; } }", "while ( ! zombie Pollable Tasks . is Empty ( ) ) ; }"]}
{"ids": "44570", "code": ["public Cookie Entity ( URI uri , Http Cookie cookie ) {", "this . uri = uri == null ? null : uri . to String ( ) ;", "this . name = cookie . get Name ( ) ;", "this . value = cookie . get Value ( ) ;", "this . comment = cookie . get Comment ( ) ;", "this . comment URL = cookie . get Comment URL ( ) ;", "this . discard = cookie . get Discard ( ) ;", "this . domain = cookie . get Domain ( ) ;", "long max Age = cookie . get Max Age ( ) ;", "if ( max Age != - NUM_ && max Age > NUM_ ) {", "this . expiry = ( max Age * NUM_ ) + System . current Time Millis ( ) ;", "if ( this . expiry < NUM_ ) this . expiry = Header Util . get Max Expiry Millis ( ) ; }", "else this . expiry = - NUM_ ;", "this . path = cookie . get Path ( ) ;", "if ( ! Text Utils . is Empty ( path ) && path . length ( ) > NUM_ && path . ends With ( STR_ ) ) {", "this . path = path . substring ( NUM_ , path . length ( ) - NUM_ ) ; }", "this . port List = cookie . get Portlist ( ) ;", "this . secure = cookie . get Secure ( ) ;", "this . version = cookie . get Version ( ) ; }"]}
{"ids": "59730", "code": ["public void add Value ( T value ) {", "list . add First ( value ) ;", "total += Double . value Of ( value . to String ( ) ) ;", "trim ( ) ; }"]}
{"ids": "2941", "code": ["private void update Traffic Mask ( ) {", "int queue Size = traffic Controlling Sessions . size ( ) ;", "while ( queue Size > NUM_ ) {", "S session = traffic Controlling Sessions . poll ( ) ;", "if ( session == null ) {", "return ; }", "Session State state = get State ( session ) ;", "switch ( state ) {", "case OPENED :", "update Traffic Control ( session ) ;", "break ;", "case CLOSING :", "break ;", "case OPENING :", "traffic Controlling Sessions . add ( session ) ;", "break ;", "default :", "throw new Illegal State Exception ( String . value Of ( state ) ) ; }", "queue Size -- ; } }"]}
{"ids": "81864", "code": ["public Object create Soft Weak Ref ( Object o ) {", "return new Weak Reference ( o ) ; }"]}
{"ids": "33159", "code": ["public boolean has Entries ( ) {", "return ! f Entries . is Empty ( ) ; }"]}
{"ids": "76170", "code": ["protected String convert To String ( Object value ) throws Throwable {", "String result = null ;", "if ( use Locale Format && value instanceof Number ) {", "Number Format format = get Format ( ) ;", "format . set Grouping Used ( false ) ;", "result = format . format ( value ) ; }", "else {", "result = value . to String ( ) ; }", "return result ; }"]}
{"ids": "10956", "code": ["public Esri Shape Export ( OM Graphic List list , Projection proj , String path To File ) {", "set Graphic List ( list ) ;", "projection = proj ;", "file Path = path To File ;", "DEBUG = logger . is Loggable ( Level . FINE ) ; }"]}
{"ids": "65463", "code": ["private void check Log Folder ( ) {", "File folder = new File ( folder Path ) ;", "if ( ! folder . exists ( ) ) {", "folder . mkdirs ( ) ; } }"]}
{"ids": "83899", "code": ["private synchronized void reschedule ( long millis ) {", "current Fut = null ;", "if ( ! closed ) {", "SCHEDULER . schedule ( null , millis , Time Unit . MILLISECONDS ) ; }", "else {", "try {", "underlying . close ( ) ; }", "catch ( Exception ex ) {", "LOG . log ( Level . WARNING , STR_ + underlying . config String ( ) , ex ) ; } } }"]}
{"ids": "29649", "code": ["public static Content Verifier Provider create Default Content Verifier ( Public Key key ) throws Operator Creation Exception {", "if ( STR_ == key . get Algorithm ( ) ) {", "return SUN VERIFICATION BUILDER . build ( key ) ; }", "else {", "return BC VERIFICATION BUILDER . build ( key ) ; } }"]}
{"ids": "41472", "code": ["public static Uri from File ( File file ) {", "if ( file == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "Path Part path = Path Part . from Decoded ( file . get Absolute Path ( ) ) ;", "return new Hierarchical Uri ( STR_ , Part . EMPTY , path , Part . NULL , Part . NULL ) ; }"]}
{"ids": "42091", "code": ["public void add Rule ( final Rule rule ) {", "rule . set Id ( rule Id Counter ++ ) ;", "rules . add ( rule ) ; }"]}
{"ids": "34403", "code": ["public static Object serialize Clone ( final Object obj ) throws IO Exception , Class Not Found Exception {", "Byte Array Output Stream mem Out = new Byte Array Output Stream ( ) ;", "Object Output Stream obj Out = new Object Output Stream ( mem Out ) ;", "obj Out . write Object ( obj ) ;", "obj Out . close ( ) ;", "Byte Array Input Stream src = new Byte Array Input Stream ( mem Out . to Byte Array ( ) ) ;", "Object Input Stream obj Is = new Object Input Stream ( src ) ;", "return obj Is . read Object ( ) ; }"]}
{"ids": "53404", "code": ["private static String link For Class Name ( String name ) {", "return name . replace ( STR_ , STR_ ) + STR_ ; }"]}
{"ids": "81006", "code": ["protected void handle Element Deleted ( I Editor Input file Editor Input ) {", "fire Element Deleted ( file Editor Input ) ; }"]}
{"ids": "77879", "code": ["public void assert Text Present ( String expected , String actual ) {", "if ( ( actual == null ) || ( ! actual . contains ( expected ) ) ) {", "throw new Assertion Failed Error ( STR_ + expected + STR_ + actual + STR_ ) ; } }"]}
{"ids": "43440", "code": ["public String code Clean Pipeline ( String contents ) {", "if ( contents == null ) {", "return Values . EMPTYSTRING ; }", "String Builder index Contents = new String Builder ( ) ;", "char [ ] first Replacements = { STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ } ;", "for ( char c : first Replacements ) {", "contents = contents . replace ( c , STR_ ) ; }", "index Contents . append ( STR_ ) ;", "index Contents . append ( contents ) ;", "char [ ] second Replacements = { STR_ , STR_ , STR_ , STR_ } ;", "for ( char c : second Replacements ) {", "contents = contents . replace ( c , STR_ ) ; }", "index Contents . append ( STR_ ) ;", "index Contents . append ( contents ) ;", "char [ ] forth Replacements = { STR_ , STR_ } ;", "for ( char c : forth Replacements ) {", "contents = contents . replace ( c , STR_ ) ; }", "index Contents . append ( STR_ ) ;", "index Contents . append ( contents ) ;", "char [ ] replacements = { STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ } ;", "for ( char c : replacements ) {", "contents = contents . replace ( c , STR_ ) ; }", "index Contents . append ( STR_ ) ;", "index Contents . append ( contents ) ;", "char [ ] third Replacements = { STR_ } ;", "for ( char c : third Replacements ) {", "contents = contents . replace ( c , STR_ ) ; }", "index Contents . append ( STR_ ) ;", "index Contents . append ( contents ) ;", "return index Contents . to String ( ) ; }"]}
{"ids": "12963", "code": ["public static String mrpa 2 sampa ( String voice Phoneme ) {", "if ( mrpa 2 sampa . contains Key ( voice Phoneme ) ) return mrpa 2 sampa . get ( voice Phoneme ) ;", "else return voice Phoneme ; }"]}
{"ids": "45891", "code": ["public static X Path 2 Filter Container new Instance Intersect ( Document doc , String xpath 2 filter ) {", "return new X Path 2 Filter Container ( doc , xpath 2 filter , X Path 2 Filter Container . ATT FILTER VALUE INTERSECT ) ; }"]}
{"ids": "40273", "code": ["public void remove Item Changed Listener ( Item Changed Listener listener ) {", "item Changed Listeners . remove ( listener ) ; }"]}
{"ids": "48672", "code": ["public boolean has Ambig Prefix ( ) {", "return ( name . starts With ( ambig Prefix ) ) ; }"]}
{"ids": "2816", "code": ["public Ordered Thread Pool Executor ( int maximum Pool Size ) {", "this ( DEFAULT INITIAL THREAD POOL SIZE , maximum Pool Size , DEFAULT KEEP ALIVE , Time Unit . SECONDS , Executors . default Thread Factory ( ) , null ) ; }"]}
{"ids": "71275", "code": ["private String parse Malformed ( String url String ) {", "if ( parts != null && ! parts . is Empty ( ) ) {", "String ret ;", "for ( URL Part part : parts ) {", "switch ( part ) {", "case PROTOCOL :", "ret = apply Pattern ( REGEX PROTOCOL , url String ) ;", "break ;", "case PORT :", "ret = apply Pattern ( REGEX PORT , url String ) ;", "break ;", "case QUERY :", "ret = apply Pattern ( REGEX QUERY , url String ) ;", "break ;", "case WHOLE :", "ret = url String ;", "break ;", "default :", "ret = url String ; }", "if ( ! Strings . is Null Or Empty ( ret ) ) {", "return ret ; } } }", "return url String ; }"]}
{"ids": "49483", "code": ["private boolean relocate ( ) {", "boolean finished = true ;", "for ( Relocatable relocatable : this . relocatables ) {", "finished &= relocatable . relocate ( ) ; }", "return finished ; }"]}
{"ids": "32190", "code": ["@ Suppress Warnings ( { STR_ , STR_ } ) private Map < K , Entry Processor Result > update With Batch ( Grid Cache Operation op , Collection < ? extends K > keys , @ Nullable Iterable < ? > vals , @ Nullable Object [ ] invoke Args , @ Nullable Expiry Policy expiry Plc , Grid Cache Version ver , @ Nullable Cache Entry Predicate [ ] filter , boolean keep Binary , UUID subj Id , String task Name ) throws Ignite Checked Exception {", "List < Grid Cache Entry Ex > locked = lock Entries ( keys ) ;", "try {", "int size = locked . size ( ) ;", "Map < Object , Object > put Map = null ;", "Collection < Object > rmv Keys = null ;", "List < Cache Object > write Vals = null ;", "Map < K , Entry Processor Result > invoke Res Map = op == TRANSFORM ? U . < K , Entry Processor Result > new Hash Map ( size ) : null ;", "List < Grid Cache Entry Ex > filtered = new Array List < > ( size ) ;", "Cache Partial Update Checked Exception err = null ;", "Iterator < ? > vals Iter = vals != null ? vals . iterator ( ) : null ;", "boolean intercept = ctx . config ( ) . get Interceptor ( ) != null ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "Grid Cache Entry Ex entry = locked . get ( i ) ;", "Object val = vals Iter != null ? vals Iter . next ( ) : null ;", "if ( val == null && op != DELETE ) throw new Null Pointer Exception ( STR_ ) ;", "try {", "try {", "if ( ! ctx . is All Locked ( entry , filter ) ) {", "if ( log . is Debug Enabled ( ) ) log . debug ( STR_ + entry + STR_ + Arrays . to String ( filter ) + STR_ ) ;", "continue ; } }", "catch ( Ignite Checked Exception e ) {", "if ( err == null ) err = partial Update Exception ( ) ;", "err . add ( F . as List ( entry . key ( ) ) , e ) ;", "continue ; }", "if ( op == TRANSFORM ) {", "ctx . kernal Context ( ) . resource ( ) . inject ( val , Grid Resource Ioc . Annotation Set . ENTRY PROCESSOR , ctx . name ( ) ) ;", "Entry Processor < Object , Object , Object > entry Processor = ( Entry Processor < Object , Object , Object > ) val ;", "Cache Object old = entry . inner Get ( null , null , true , true , true , true , true , subj Id , entry Processor , task Name , null , keep Binary ) ;", "Object old Val = null ;", "Cache Invoke Entry < Object , Object > invoke Entry = new Cache Invoke Entry < > ( entry . key ( ) , old , entry . version ( ) , keep Binary , entry ) ;", "Cache Object updated ;", "Object updated Val = null ;", "Cache Invoke Result invoke Res = null ;", "try {", "Object computed = entry Processor . process ( invoke Entry , invoke Args ) ;", "updated Val = ctx . unwrap Temporary ( invoke Entry . get Value ( ) ) ;", "updated = ctx . to Cache Object ( updated Val ) ;", "if ( computed != null ) invoke Res = Cache Invoke Result . from Result ( ctx . unwrap Temporary ( computed ) ) ; }", "catch ( Exception e ) {", "invoke Res = Cache Invoke Result . from Error ( e ) ;", "updated = old ; }", "if ( invoke Res != null ) invoke Res Map . put ( ( K ) entry . key ( ) . value ( ctx . cache Object Context ( ) , false ) , invoke Res ) ;", "if ( updated == null ) {", "if ( intercept ) {", "Ignite Bi Tuple < Boolean , ? > interceptor Res = ctx . config ( ) . get Interceptor ( ) . on Before Remove ( new Cache Lazy Entry ( ctx , entry . key ( ) , invoke Entry . key ( ) , old , old Val , keep Binary ) ) ;", "if ( ctx . cancel Remove ( interceptor Res ) ) continue ; }", "if ( put Map != null ) {", "err = update Partial Batch ( filtered , ver , write Vals , put Map , null , expiry Plc , keep Binary , err , subj Id , task Name ) ;", "put Map = null ;", "write Vals = null ;", "filtered = new Array List < > ( ) ; }", "if ( rmv Keys == null ) rmv Keys = new Array List < > ( size ) ;", "rmv Keys . add ( entry . key ( ) . value ( ctx . cache Object Context ( ) , false ) ) ; }", "else {", "if ( intercept ) {", "Object interceptor Val = ctx . config ( ) . get Interceptor ( ) . on Before Put ( new Cache Lazy Entry ( ctx , entry . key ( ) , invoke Entry . get Key ( ) , old , old Val , keep Binary ) , updated Val ) ;", "if ( interceptor Val == null ) continue ;", "updated = ctx . to Cache Object ( ctx . unwrap Temporary ( interceptor Val ) ) ; }", "if ( rmv Keys != null ) {", "err = update Partial Batch ( filtered , ver , null , null , rmv Keys , expiry Plc , keep Binary , err , subj Id , task Name ) ;", "rmv Keys = null ;", "filtered = new Array List < > ( ) ; }", "if ( put Map == null ) {", "put Map = new Linked Hash Map < > ( size , NUM_ ) ;", "write Vals = new Array List < > ( size ) ; }", "put Map . put ( CU . value ( entry . key ( ) , ctx , false ) , CU . value ( updated , ctx , false ) ) ;", "write Vals . add ( updated ) ; } }", "else if ( op == UPDATE ) {", "Cache Object cache Val = ctx . to Cache Object ( val ) ;", "if ( intercept ) {", "Cache Object old = entry . inner Get ( null , null , true , ctx . load Previous Value ( ) , true , true , true , subj Id , null , task Name , null , keep Binary ) ;", "Object interceptor Val = ctx . config ( ) . get Interceptor ( ) . on Before Put ( new Cache Lazy Entry ( ctx , entry . key ( ) , old , keep Binary ) , val ) ;", "if ( interceptor Val == null ) continue ;", "cache Val = ctx . to Cache Object ( ctx . unwrap Temporary ( interceptor Val ) ) ; }", "if ( put Map == null ) {", "put Map = new Linked Hash Map < > ( size , NUM_ ) ;", "write Vals = new Array List < > ( size ) ; }", "put Map . put ( CU . value ( entry . key ( ) , ctx , false ) , CU . value ( cache Val , ctx , false ) ) ;", "write Vals . add ( cache Val ) ; }", "else {", "assert op == DELETE ;", "if ( intercept ) {", "Cache Object old = entry . inner Get ( null , null , true , ctx . load Previous Value ( ) , true , true , true , subj Id , null , task Name , null , keep Binary ) ;", "Ignite Bi Tuple < Boolean , ? > interceptor Res = ctx . config ( ) . get Interceptor ( ) . on Before Remove ( new Cache Lazy Entry ( ctx , entry . key ( ) , old , keep Binary ) ) ;", "if ( ctx . cancel Remove ( interceptor Res ) ) continue ; }", "if ( rmv Keys == null ) rmv Keys = new Array List < > ( size ) ;", "rmv Keys . add ( entry . key ( ) . value ( ctx . cache Object Context ( ) , false ) ) ; }", "filtered . add ( entry ) ; }", "catch ( Ignite Checked Exception e ) {", "if ( err == null ) err = partial Update Exception ( ) ;", "err . add ( F . as List ( entry . key ( ) ) , e ) ; }", "catch ( Grid Cache Entry Removed Exception ignore ) {", "assert false : STR_ ; } }", "if ( put Map != null || rmv Keys != null ) {", "err = update Partial Batch ( filtered , ver , write Vals , put Map , rmv Keys , expiry Plc , keep Binary , err , subj Id , task Name ) ; }", "else assert filtered . is Empty ( ) ;", "if ( err != null ) throw err ;", "return invoke Res Map ; }", "finally {", "unlock Entries ( locked ) ; } }"]}
{"ids": "56541", "code": ["private static Set < Type Element > find All Members Injectors Recursively ( Collection < Type Element > members Injectors ) {", "Set < Type Element > result = new Hash Set < > ( ) ;", "for ( Type Element element : members Injectors ) {", "result . add All ( find All Members Injectors Recursively ( element ) ) ; }", "return result ; }"]}
{"ids": "54743", "code": ["public Builder add Sub Button ( Context context , int drawable , int [ ] two Colors , String string ) {", "if ( drawables == null ) drawables = new Array List < > ( ) ;", "drawables . add ( Context Compat . get Drawable ( context , drawable ) ) ;", "if ( colors == null ) colors = new Array List < > ( ) ;", "colors . add ( two Colors ) ;", "if ( strings == null ) strings = new Array List < > ( ) ;", "strings . add ( string ) ;", "return this ; }"]}
{"ids": "65629", "code": ["private void init Components ( ) {", "label Value = new Label ( ) ;", "label Value . set Value ( Util . clean Amp ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ) ;", "label Name = new Label ( ) ;", "label Name . set Value ( Util . clean Amp ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ) ;", "label Contact = new Label ( ) ;", "label Contact . set Value ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ;", "label E Mail = new Label ( ) ;", "label E Mail . set Value ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "label Postal = new Label ( ) ;", "label Postal . set Value ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "label Phone = new Label ( ) ;", "label Phone . set Value ( Msg . translate ( Env . get Ctx ( ) , STR_ ) ) ;", "field ID = NUM_ ;", "field Value = new Textbox ( ) ;", "field Value . set Maxlength ( NUM_ ) ;", "field Value . set Attribute ( STR_ , STR_ ) ;", "field Value . add Event Listener ( Events . ON CHANGE , this ) ;", "field Name = new Textbox ( ) ;", "field Name . set Maxlength ( NUM_ ) ;", "field Name . set Attribute ( STR_ , STR_ ) ;", "field Name . add Event Listener ( Events . ON CHANGE , this ) ;", "field Contact = new Textbox ( ) ;", "field Contact . set Maxlength ( NUM_ ) ;", "field Contact . set Attribute ( STR_ , STR_ ) ;", "field Contact . add Event Listener ( Events . ON CHANGE , this ) ;", "field E Mail = new Textbox ( ) ;", "field E Mail . set Maxlength ( NUM_ ) ;", "field E Mail . set Attribute ( STR_ , STR_ ) ;", "field E Mail . add Event Listener ( Events . ON CHANGE , this ) ;", "field Postal = new Textbox ( ) ;", "field Postal . set Maxlength ( NUM_ ) ;", "field Postal . set Attribute ( STR_ , STR_ ) ;", "field Postal . add Event Listener ( Events . ON CHANGE , this ) ;", "field Phone = new Textbox ( ) ;", "field Phone . set Maxlength ( NUM_ ) ;", "field Phone . set Attribute ( STR_ , STR_ ) ;", "field Phone . add Event Listener ( Events . ON CHANGE , this ) ;", "check AND = new Checkbox ( ) ;", "check AND . set Text ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "check AND . set Name ( STR_ ) ;", "check AND . set Tooltiptext ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "check AND . set Selected ( true ) ;", "check AND . add Action Listener ( this ) ;", "check AND . set Attribute ( STR_ , STR_ ) ;", "check Customer = new Checkbox ( ) ;", "check Customer . add Action Listener ( this ) ;", "check Customer . set Attribute ( STR_ , STR_ ) ;", "check Customer . set Name ( STR_ ) ;", "if ( m is SO Trx ) check Customer . set Label ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "else check Customer . set Label ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "check Customer . set Selected ( m is SO Match ) ; }"]}
{"ids": "14277", "code": ["public static boolean is FM Instance ( ) {", "if ( instance Type == null ) {", "instance Type = ( String ) config Tags . get ( STR_ ) ; }", "return ( instance Type != null && instance Type . equals Ignore Case ( STR_ ) ) ; }"]}
{"ids": "2143", "code": ["private boolean try Release ( long c , Work Queue v , long inc ) {", "int sp = ( int ) c , ns = sp & ~ UNSIGNALLED ;", "if ( v != null ) {", "int vs = v . scan State ;", "long nc = ( v . stack Pred & SP MASK ) | ( UC MASK & ( c + inc ) ) ;", "if ( sp == vs && U . compare And Swap Long ( this , CTL , c , nc ) ) {", "v . scan State = ns ;", "Lock Support . unpark ( v . parker ) ;", "return true ; } }", "return false ; }"]}
{"ids": "66338", "code": ["public boolean execute ( String sql Statements , Connection conn ) {", "if ( conn == null ) throw new Illegal State Exception ( STR_ ) ;", "String [ ] sql = convert ( sql Statements ) ;", "m exception = null ;", "if ( m conversion Error != null || sql == null ) return false ;", "boolean ok = true ;", "int i = NUM_ ;", "String statement = null ;", "try {", "if ( m stmt == null ) m stmt = conn . create Statement ( ) ;", "for ( i = NUM_ ; ok && i < sql . length ; i ++ ) {", "statement = sql [ i ] ;", "if ( statement . length ( ) == NUM_ ) {", "if ( m verbose ) log . finer ( STR_ + i + STR_ ) ; }", "else {", "if ( m verbose ) log . info ( STR_ + i + STR_ + statement + STR_ ) ;", "else log . info ( STR_ + i ) ;", "try {", "m stmt . clear Warnings ( ) ;", "int no = m stmt . execute Update ( statement ) ;", "SQL Warning warn = m stmt . get Warnings ( ) ;", "if ( warn != null ) {", "if ( m verbose ) log . info ( STR_ + warn ) ;", "else {", "log . info ( STR_ + i + STR_ + statement + STR_ ) ;", "log . info ( STR_ + warn ) ; } }", "if ( m verbose ) log . fine ( STR_ + no ) ; }", "catch ( SQL Exception ex ) {", "if ( ! statement . starts With ( STR_ ) ) {", "ok = false ;", "m exception = ex ; }", "if ( ! m verbose ) log . info ( STR_ + i + STR_ + statement + STR_ ) ;", "log . info ( STR_ + i + STR_ + sql . length + STR_ + ex ) ; } } } }", "catch ( SQL Exception e ) {", "m exception = e ;", "if ( ! m verbose ) log . info ( STR_ + i + STR_ + statement + STR_ ) ;", "log . info ( STR_ + i + STR_ + sql . length + STR_ + e ) ;", "return false ; }", "return ok ; }"]}
{"ids": "62016", "code": ["@ Override public Value sample ( Assignment condition ) {", "double prob = get Prob ( condition ) ;", "if ( sampler . next Double ( ) < prob ) {", "return Value Factory . create ( true ) ; }", "else {", "return Value Factory . create ( false ) ; } }"]}
{"ids": "75549", "code": ["private void init Style ( Attribute Set attribute Set , int def Style Attribute ) {", "Typed Array typed Array = m Context . obtain Styled Attributes ( attribute Set , R . styleable . Material Search View , def Style Attribute , NUM_ ) ;", "if ( typed Array != null ) {", "if ( typed Array . has Value ( R . styleable . Material Search View search Background ) ) {", "set Background ( typed Array . get Drawable ( R . styleable . Material Search View search Background ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View android text Color ) ) {", "set Text Color ( typed Array . get Color ( R . styleable . Material Search View android text Color , Context Compat . get Color ( m Context , R . color . black ) ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View android text Color Hint ) ) {", "set Hint Text Color ( typed Array . get Color ( R . styleable . Material Search View android text Color Hint , Context Compat . get Color ( m Context , R . color . gray 50 ) ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View android hint ) ) {", "set Hint ( typed Array . get String ( R . styleable . Material Search View android hint ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View search Voice Icon ) ) {", "set Voice Icon ( typed Array . get Drawable ( R . styleable . Material Search View search Voice Icon ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View search Close Icon ) ) {", "set Clear Icon ( typed Array . get Drawable ( R . styleable . Material Search View search Close Icon ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View search Back Icon ) ) {", "set Back Icon ( typed Array . get Drawable ( R . styleable . Material Search View search Back Icon ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View search Suggestion Background ) ) {", "set Suggestion Background ( typed Array . get Resource Id ( R . styleable . Material Search View search Suggestion Background , R . color . search layover bg ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View android input Type ) ) {", "set Input Type ( typed Array . get Integer ( R . styleable . Material Search View android input Type , Input Type . TYPE CLASS TEXT ) ) ; }", "if ( typed Array . has Value ( R . styleable . Material Search View search Bar Height ) ) {", "set Search Bar Height ( typed Array . get Dimension Pixel Size ( R . styleable . Material Search View search Bar Height , get App Compat Action Bar Height ( ) ) ) ; }", "else {", "set Search Bar Height ( get App Compat Action Bar Height ( ) ) ; }", "View Compat . set Fits System Windows ( this , typed Array . get Boolean ( R . styleable . Material Search View android fits System Windows , false ) ) ;", "typed Array . recycle ( ) ; } }"]}
{"ids": "14717", "code": ["boolean validate ( Set attr Vals , String i 18 n File Name , boolean encode Password ) throws SMS Exception {", "return validate ( attr Vals , i 18 n File Name , encode Password , Collections . EMPTY MAP ) ; }"]}
{"ids": "62407", "code": ["protected static void append Big Decimal Numeric Type ( String Builder sb ) {", "sb . append ( STR_ ) ; }"]}
{"ids": "17604", "code": ["void remove At ( final int remove Index ) {", "final Object [ ] items = this . items ;", "if ( remove Index == take Index ) {", "items [ take Index ] = null ;", "take Index = inc ( take Index ) ;", "count -- ;", "if ( itrs != null ) itrs . element Dequeued ( ) ; }", "else {", "final int put Index = this . put Index ;", "for ( int i = remove Index ; ; ) {", "int next = inc ( i ) ;", "if ( next != put Index ) {", "items [ i ] = items [ next ] ;", "i = next ; }", "else {", "items [ i ] = null ;", "this . put Index = i ;", "break ; } }", "count -- ;", "if ( itrs != null ) itrs . removed At ( remove Index ) ; }", "not Full . signal ( ) ; }"]}
{"ids": "84022", "code": ["public double distance ( Vector other ) {", "return Math . sqrt ( Math . pow ( other . x - x , NUM_ ) + Math . pow ( other . y - y , NUM_ ) + Math . pow ( other . z - z , NUM_ ) ) ; }"]}
{"ids": "67840", "code": ["private void parse ( File tmd ) throws IO Exception {", "Random Access File f = new Random Access File ( tmd , STR_ ) ;", "f . seek ( NUM_ ) ;", "this . signature Type = f . read Int ( ) ;", "f . read ( signature , NUM_ , NUM_ ) ;", "f . seek ( NUM_ ) ;", "f . read ( issuer , NUM_ , NUM_ ) ;", "f . seek ( NUM_ ) ;", "this . version = f . read Byte ( ) ;", "this . CACRL Version = f . read Byte ( ) ;", "this . signer CRL Version = f . read Byte ( ) ;", "f . seek ( NUM_ ) ;", "this . system Version = f . read Long ( ) ;", "this . title ID = f . read Long ( ) ;", "this . title Type = f . read Int ( ) ;", "this . group ID = f . read Short ( ) ;", "f . seek ( NUM_ ) ;", "f . read ( reserved , NUM_ , NUM_ ) ;", "f . seek ( NUM_ ) ;", "this . access Rights = f . read Int ( ) ;", "this . title Version = f . read Short ( ) ;", "this . content Count = f . read Short ( ) ;", "this . boot Index = f . read Short ( ) ;", "f . seek ( NUM_ ) ;", "f . read ( SHA 2 , NUM_ , NUM_ ) ;", "f . seek ( NUM_ ) ;", "short index Offset ;", "short command Count ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "f . seek ( NUM_ + ( NUM_ * i ) ) ;", "index Offset = f . read Short ( ) ;", "command Count = f . read Short ( ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "f . read ( buffer , NUM_ , NUM_ ) ;", "this . content Infos [ i ] = new Content Info ( index Offset , command Count , buffer ) ; }", "this . contents = new Content [ content Count ] ;", "int ID ;", "short index ;", "short type ;", "long size ;", "for ( int i = NUM_ ; i < content Count ; i ++ ) {", "f . seek ( NUM_ + ( NUM_ * i ) ) ;", "ID = f . read Int ( ) ;", "index = f . read Short ( ) ;", "type = f . read Short ( ) ;", "size = f . read Long ( ) ;", "byte [ ] buffer = new byte [ NUM_ ] ;", "f . read ( buffer , NUM_ , NUM_ ) ;", "this . contents [ i ] = new Content ( ID , index , type , size , buffer , this ) ; }", "if ( f . read ( cert 2 , NUM_ , NUM_ ) != NUM_ ) {", "Logger . log ( STR_ ) ; }", "if ( f . read ( cert 1 , NUM_ , NUM_ ) != NUM_ ) {", "Logger . log ( STR_ ) ; }", "f . close ( ) ; }"]}
{"ids": "11109", "code": ["public void remove Vetoable Change Listener ( String property Name , Vetoable Change Listener in vcl ) {", "bean Context Child Support . remove Vetoable Change Listener ( property Name , in vcl ) ; }"]}
{"ids": "30091", "code": ["public static void take Screenshot ( final String tag ) {", "if ( scenario == null ) {", "throw new Screenshot Exception ( STR_ ) ; }", "Spoon Screenshot Action . perform ( tag ) ;", "final File screenshot = Spoon Screenshot Action . get Last Screenshot ( ) ;", "if ( screenshot == null ) {", "throw new Screenshot Exception ( STR_ ) ; }", "File Input Stream screenshot Stream = null ;", "try {", "screenshot Stream = new File Input Stream ( screenshot ) ;", "final byte file Content [ ] = new byte [ ( int ) screenshot . length ( ) ] ;", "final int read Image Bytes = screenshot Stream . read ( file Content ) ;", "if ( read Image Bytes != - NUM_ ) {", "scenario . embed ( file Content , STR_ ) ; } }", "catch ( final IO Exception ioe ) {", "throw new Screenshot Exception ( STR_ + ioe ) ; }", "finally {", "try {", "if ( screenshot Stream != null ) {", "screenshot Stream . close ( ) ; } }", "catch ( final IO Exception ioe ) {", "throw new Screenshot Exception ( STR_ + ioe ) ; } } }"]}
{"ids": "12112", "code": ["private void import Runner Environment ( Import Project import Project , Folder Entry base Project Folder ) throws Forbidden Exception , Server Exception , Conflict Exception , IO Exception {", "import Runner Environment ( import Project , base Project Folder , null ) ; }"]}
{"ids": "21120", "code": ["@ Override public void do Notify ( ) throws Exception {", "log . info ( STR_ ) ;", "Scheduled Executor Service svc = service ;", "if ( svc != null ) {", "try {", "svc . schedule ( ( Callable < Object > ) this , NUM_ , Time Unit . MICROSECONDS ) ; }", "catch ( Rejected Execution Exception ex ) {", "if ( svc . is Shutdown ( ) ) {", "log . info ( STR_ ) ; }", "else {", "throw ex ; } } }", "else {", "log . info ( STR_ ) ; } }"]}
{"ids": "41328", "code": ["public boolean check Root By Build Tags ( ) {", "String build Tags = android . os . Build . TAGS ;", "if ( build Tags != null && build Tags . contains ( SU TAG ) ) {", "return true ; }", "return false ; }"]}
{"ids": "14376", "code": ["public boolean is User Active ( String realm ) {", "boolean active = false ;", "try {", "AM Identity user = Id Utils . get Identity ( sso Token , user Id ) ;", "boolean is User Active = user . is Active ( ) ;", "String login Status = get User Attribute Value ( user , USER SERVICE LOGIN STATUS , ACTIVE ) ;", "String lockout = get User Attribute Value ( user , USER SERVICE NS LOCKOUT , STRING FALSE ) ;", "if ( ! is User Active || ! login Status . equals Ignore Case ( ACTIVE ) || ! lockout . equals Ignore Case ( STRING FALSE ) ) {", "error Msg = get Localized String ( STR_ ) ;", "write Log ( STR_ , user Id ) ; }", "else if ( is Account Expired ( user ) ) {", "error Msg = get Localized String ( STR_ ) ;", "write Log ( STR_ , user Id ) ; }", "else if ( is User Lockout ( user Id , realm ) ) {", "String obj [ ] = { user Id } ;", "information Msg = get Localized String ( STR_ ) ;", "write Log ( STR_ , user Id ) ; }", "else {", "active = true ; } }", "catch ( SSO Exception e ) {", "debug . warning ( STR_ , e ) ;", "error Msg = get Error String ( e ) ; }", "catch ( Id Repo Exception e ) {", "debug . warning ( STR_ , e ) ;", "error Msg = get Error String ( e ) ; }", "return active ; }"]}
{"ids": "56563", "code": ["@ Override public < U > Completable Future < U > fold Right ( final U seed , final Bi Function < ? super T , U , U > function ) {", "return Completable Future . supply Async ( null , exec ) ; }"]}
{"ids": "76076", "code": ["private void algorithm Douglas Peucker ( List < Entry > entries , double epsilon , int start , int end ) {", "if ( end <= start + NUM_ ) {", "return ; }", "int max Dist Index = NUM_ ;", "double dist Max = NUM_ ;", "Entry first Entry = entries . get ( start ) ;", "Entry last Entry = entries . get ( end ) ;", "for ( int i = start + NUM_ ; i < end ; i ++ ) {", "double dist = calc Angle Between Lines ( first Entry , last Entry , first Entry , entries . get ( i ) ) ;", "if ( dist > dist Max ) {", "dist Max = dist ;", "max Dist Index = i ; } }", "if ( dist Max > epsilon ) {", "keep [ max Dist Index ] = true ;", "algorithm Douglas Peucker ( entries , epsilon , start , max Dist Index ) ;", "algorithm Douglas Peucker ( entries , epsilon , max Dist Index , end ) ; } }"]}
{"ids": "84610", "code": ["public static void sort ( Abstract List array , int [ ] indices ) {", "for ( int i = NUM_ ; i < indices . length ; i ++ ) {", "indices [ i ] = i ; }", "int temp ;", "int j , n = array . size ( ) ;", "for ( j = n / NUM_ ; j > NUM_ ; j -- ) {", "adjust ( array , indices , j , n ) ; }", "for ( j = n - NUM_ ; j > NUM_ ; j -- ) {", "temp = indices [ NUM_ ] ;", "indices [ NUM_ ] = indices [ j ] ;", "indices [ j ] = temp ;", "adjust ( array , indices , NUM_ , j ) ; } }"]}
{"ids": "161", "code": ["public static boolean save String To File ( String data Input , String path ) {", "String filename = path ;", "File file = new File ( filename ) ;", "File Output Stream fos ;", "byte [ ] data = data Input . get Bytes ( ) ;", "try {", "fos = new File Output Stream ( file ) ;", "fos . write ( data ) ;", "fos . flush ( ) ;", "fos . close ( ) ;", "return true ; }", "catch ( File Not Found Exception e ) {", "e . print Stack Trace ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; }", "return false ; }"]}
{"ids": "342", "code": ["public static String quote ( String input ) {", "if ( input . contains ( STR_ ) ) {", "return STR_ + input + STR_ ; }", "else {", "return input ; } }"]}
{"ids": "10812", "code": ["public static void assert Throws Completion Exception ( final Consumer < Void > consumer , final Class < ? > exception Class ) {", "try {", "consumer . accept ( null ) ; }", "catch ( final Completion Exception completion Ex ) {", "final Throwable ex = completion Ex . get Cause ( ) ;", "if ( ex . get Class ( ) == exception Class ) {", "return ; }", "Assert . fail ( String . format ( STR_ , ex . get Class ( ) ) ) ; }", "Assert . fail ( String . format ( STR_ , exception Class ) ) ; }"]}
{"ids": "15279", "code": ["public Object put ( Object key , Object value ) {", "Object old Value = null ;", "synchronized ( map ) {", "old Value = map . put ( key , value ) ;", "if ( old Value != null ) {", "remove Element ( key ) ; }", "add Element ( key ) ; }", "return old Value ; }"]}
{"ids": "12512", "code": ["public double run ( ) {", "try {", "Audio Input Stream in Input = Audio System . get Audio Input Stream ( files [ NUM_ ] ) ;", "Audio Feature audio Feature Input = ( Audio Feature ) feature Extractor Input . calculate ( in Input ) ; }", "catch ( Exception e ) { }", "double avg Distance = NUM_ ;", "for ( int i = NUM_ ; i < array Feature Extractor Train Set . size ( ) ; i ++ ) {", "double distance 2 DB = audio Thread Distance ( feature Extractor Input . get MFCC ( ) , array Feature Extractor Train Set . get ( i ) ) ;", "Log . i ( STR_ , STR_ + distance 2 DB ) ;", "avg Distance += distance 2 DB ; }", "Log . i ( STR_ , STR_ + ( avg Distance / array Feature Extractor Train Set . size ( ) ) ) ;", "return avg Distance / array Feature Extractor Train Set . size ( ) ; }"]}
{"ids": "68294", "code": ["public Predicate ( Term t ) {", "terms . add ( t ) ; }"]}
{"ids": "33913", "code": ["private void add Operations ( Set < String > method Signatures ) throws Operation Parse Exception {", "for ( String sig : method Signatures ) {", "Typed Operation operation = Operation Parser . parse ( sig ) ;", "operations . add ( operation ) ; } }"]}
{"ids": "70733", "code": ["private void write Log ( String log ) {", "File file = new File ( Crash Handler Default . Log Default Path + STR_ + formatter . format ( new Date ( ) ) + STR_ ) ;", "try {", "File Output Stream file Output Stream = new File Output Stream ( file ) ;", "byte [ ] bytes = log . get Bytes ( ) ;", "file Output Stream . write ( bytes ) ;", "file Output Stream . close ( ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "28356", "code": ["public Rule ( String pattern , Object token Type , String next State ) {", "this . pattern = Pattern . compile ( pattern ) ;", "this . token Type = token Type ;", "this . next State = next State ; }"]}
{"ids": "37276", "code": ["private void show Popup ( final Mouse Event event ) {", "int [ ] rows = get Selected Rows ( ) ;", "if ( ( rows . length == NUM_ ) || ( rows . length == NUM_ ) ) {", "final int row = row At Point ( event . get Point ( ) ) ;", "final int column = column At Point ( event . get Point ( ) ) ;", "if ( ( row == - NUM_ ) || ( column == - NUM_ ) ) {", "return ; }", "change Selection ( row , column , false , false ) ;", "rows = get Selected Rows ( ) ; }", "final J Popup Menu menu = new J Popup Menu ( ) ;", "menu . add ( new J Menu Item ( C Action Proxy . proxy ( new C Delete Bookmark Action ( m bookmark Manager , rows ) ) ) ) ;", "menu . show ( event . get Component ( ) , event . get X ( ) , event . get Y ( ) ) ; }"]}
{"ids": "48181", "code": ["@ Override public int read ( byte b [ ] , int off , int len ) throws IO Exception {", "if ( bb == null ) {", "throw new IO Exception ( STR_ ) ; }", "if ( b == null ) {", "throw new Null Pointer Exception ( ) ; }", "else if ( off < NUM_ || len < NUM_ || len > b . length - off ) {", "throw new Index Out Of Bounds Exception ( ) ; }", "else if ( len == NUM_ ) {", "return NUM_ ; }", "int length = Math . min ( bb . remaining ( ) , len ) ;", "if ( length == NUM_ ) {", "return - NUM_ ; }", "bb . get ( b , off , length ) ;", "return length ; }"]}
{"ids": "23043", "code": ["public void remove Event Listener ( Multimedia Messaging Session Listener listener ) throws Rcs Service Not Available Exception , Rcs Generic Exception {", "if ( m Api == null ) {", "throw new Rcs Service Not Available Exception ( ) ; }", "try {", "Weak Reference < I Multimedia Messaging Session Listener > weak Ref = m Multimedia Messaging Session Listeners . remove ( listener ) ;", "if ( weak Ref == null ) {", "return ; }", "I Multimedia Messaging Session Listener multimedia Messaging Session Listener = weak Ref . get ( ) ;", "if ( multimedia Messaging Session Listener != null ) {", "m Api . remove Event Listener 2 ( multimedia Messaging Session Listener ) ; } }", "catch ( Exception e ) {", "Rcs Illegal Argument Exception . assert Exception ( e ) ;", "throw new Rcs Generic Exception ( e ) ; } }"]}
{"ids": "56166", "code": ["private static boolean date By Month ( Date Time Formatter Builder bld , Collection < Date Time Field Type > fields , boolean extended , boolean strict ISO ) {", "boolean reduced Prec = false ;", "if ( fields . remove ( Date Time Field Type . year ( ) ) ) {", "bld . append ( Constants . ye ) ;", "if ( fields . remove ( Date Time Field Type . month Of Year ( ) ) ) {", "if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "append Separator ( bld , extended ) ;", "bld . append Month Of Year ( NUM_ ) ;", "append Separator ( bld , extended ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "else {", "bld . append Literal ( STR_ ) ;", "bld . append Month Of Year ( NUM_ ) ;", "reduced Prec = true ; } }", "else {", "if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "check Not Strict ISO ( fields , strict ISO ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "else {", "reduced Prec = true ; } } }", "else if ( fields . remove ( Date Time Field Type . month Of Year ( ) ) ) {", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Month Of Year ( NUM_ ) ;", "if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "append Separator ( bld , extended ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "else {", "reduced Prec = true ; } }", "else if ( fields . remove ( Date Time Field Type . day Of Month ( ) ) ) {", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Literal ( STR_ ) ;", "bld . append Day Of Month ( NUM_ ) ; }", "return reduced Prec ; }"]}
{"ids": "66398", "code": ["public String [ ] parse Line ( String line , boolean with Label , boolean trace , boolean ignore Empty ) {", "if ( trace ) log . config ( STR_ + line ) ;", "Array List < String > list = new Array List < String > ( ) ;", "for ( int i = NUM_ ; i < m rows . size ( ) ; i ++ ) {", "Imp Format Row row = ( Imp Format Row ) m rows . get ( i ) ;", "String Buffer entry = new String Buffer ( ) ;", "if ( with Label ) {", "entry . append ( row . get Column Name ( ) ) ;", "entry . append ( STR_ ) ;", "if ( row . is String ( ) ) entry . append ( STR_ ) ;", "else if ( row . is Date ( ) ) entry . append ( STR_ ) ; }", "String info = null ;", "if ( row . is Constant ( ) ) info = STR_ ;", "else if ( m format Type . equals ( X AD Imp Format . FORMATTYPE Fixed Position ) ) {", "if ( row . get Start No ( ) > NUM_ && row . get End No ( ) <= line . length ( ) ) info = line . substring ( row . get Start No ( ) - NUM_ , row . get End No ( ) ) ; }", "else {", "info = parse Flex Format ( line , m format Type , row . get Start No ( ) ) ; }", "if ( Util . is Empty ( info , true ) ) {", "if ( row . get Default Value ( ) != null ) info = row . get Default Value ( ) ;", "else info = STR_ ; }", "entry . append ( row . parse ( info ) ) ;", "if ( with Label ) {", "if ( row . is String ( ) ) entry . append ( STR_ ) ;", "else if ( row . is Date ( ) ) entry . append ( STR_ ) ; }", "if ( ! ignore Empty || ( ignore Empty && info . length ( ) != NUM_ ) ) list . add ( entry . to String ( ) ) ;", "if ( trace ) log . fine ( info + STR_ + entry . to String ( ) + STR_ + info . length ( ) + STR_ ) ; }", "String [ ] ret Value = new String [ list . size ( ) ] ;", "list . to Array ( ret Value ) ;", "return ret Value ; }"]}
{"ids": "84975", "code": ["public Widget Proposal Computer ( String text , int offset , Element root Element , Element parent Element , I Java Project java Project ) throws Java Model Exception , Ui Binder Exception {", "super ( java Project , text , offset , text . length ( ) ) ;", "this . root Element = root Element ;", "this . parent Element = parent Element ;", "package Manager . read From Element ( root Element ) ; }"]}
{"ids": "67286", "code": ["public List < Predicate < T > > parse ( final List < String > queries ) throws Query Parse Exception {", "List < Predicate < T > > predicates = new Array List < > ( queries . size ( ) ) ;", "for ( String query : queries ) {", "predicates . add ( parse ( query ) ) ; }", "return predicates ; }"]}
{"ids": "34404", "code": ["public static Object deserialize Stream ( final String witness ) throws Exception {", "File Input Stream file Is = new File Input Stream ( witness ) ;", "Object Input Stream obj Is = new Object Input Stream ( file Is ) ;", "return obj Is . read Object ( ) ; }"]}
{"ids": "79503", "code": ["public static void rollback ( boolean began Transaction , String cause Message , Throwable cause Throwable ) throws Generic Transaction Exception {", "if ( began Transaction ) {", "Transaction Util . rollback ( cause Throwable ) ; }", "else {", "Transaction Util . set Rollback Only ( cause Message , cause Throwable ) ; } }"]}
{"ids": "6965", "code": ["public Long Array ( Long Array array ) {", "this . ordered = array . ordered ;", "size = array . size ;", "items = new long [ size ] ;", "System . arraycopy ( array . items , NUM_ , items , NUM_ , size ) ; }"]}
{"ids": "47100", "code": ["private static < T > T report Get ( Object r ) throws Interrupted Exception , Execution Exception {", "if ( r == null ) throw new Interrupted Exception ( ) ;", "if ( r instanceof Alt Result ) {", "Throwable x , cause ;", "if ( ( x = ( ( Alt Result ) r ) . ex ) == null ) return null ;", "if ( x instanceof Cancellation Exception ) throw ( Cancellation Exception ) x ;", "if ( ( x instanceof Completion Exception ) && ( cause = x . get Cause ( ) ) != null ) x = cause ;", "throw new Execution Exception ( x ) ; }", "@ Suppress Warnings ( STR_ ) T t = ( T ) r ;", "return t ; }"]}
{"ids": "792", "code": ["protected void garbage Collect ( Visual Table labels ) {", "Iterator iter = labels . tuples ( ) ;", "while ( iter . has Next ( ) ) {", "Visual Item item = ( Visual Item ) iter . next ( ) ;", "if ( ! item . is Start Visible ( ) && ! item . is End Visible ( ) ) {", "labels . remove Tuple ( item ) ; } } }"]}
{"ids": "76298", "code": ["public boolean shares Variable With ( Def Use du ) {", "return var Name . equals ( du . var Name ) ; }"]}
{"ids": "86923", "code": ["private void populate Nav Drawer ( ) {", "m Nav Drawer Items . clear ( ) ;", "m Nav Drawer Items . add ( NAVDRAWER ITEM ACTIVITY 1 ) ;", "m Nav Drawer Items . add ( NAVDRAWER ITEM SEPARATOR ) ;", "m Nav Drawer Items . add ( NAVDRAWER ITEM ACTIVITY 2 ) ;", "m Nav Drawer Items . add ( NAVDRAWER ITEM SEPARATOR SPECIAL ) ;", "m Nav Drawer Items . add ( NAVDRAWER ITEM ACTIVITY 3 ) ;", "create Nav Drawer Items ( ) ; }"]}
{"ids": "25055", "code": ["public Artifact Coordinates ( final String group Id , final String artifact Id , final String version , final String classifier ) {", "this . group Id = group Id ;", "this . artifact Id = artifact Id ;", "this . version = version ;", "this . classifier = classifier ; }"]}
{"ids": "79005", "code": ["private Carbon Iterator < Batch Result > execute Block List ( List < Table Block Info > block List ) throws Query Execution Exception {", "query Model . set Table Block Infos ( block List ) ;", "this . query Executor = Query Executor Factory . get Query Executor ( ) ;", "Carbon Iterator < Batch Result > iter = null ;", "try {", "iter = query Executor . execute ( query Model ) ; }", "catch ( Query Execution Exception e ) {", "LOGGER . error ( e . get Message ( ) ) ;", "throw e ; }", "return iter ; }"]}
{"ids": "79455", "code": ["public static boolean is Java Script Enabled ( Http Servlet Request request ) {", "Http Session session = request . get Session ( ) ;", "Boolean java Script Enabled = ( Boolean ) session . get Attribute ( STR_ ) ;", "if ( java Script Enabled != null ) {", "return java Script Enabled . boolean Value ( ) ; }", "return false ; }"]}
{"ids": "24185", "code": ["protected Link create Link ( final String relation , final URI href ) {", "return new Link ( relation , href ) ; }"]}
{"ids": "86438", "code": ["public static Spannable create Spannable From Text With Template ( String text , Char Sequence inner Template ) {", "Spannable String result = new Spannable String ( text ) ;", "if ( inner Template instanceof Spanned ) {", "int index = text . index Of ( inner Template . to String ( ) ) ;", "if ( index >= NUM_ ) {", "copy Spans ( result , ( Spanned ) inner Template , index ) ; } }", "return result ; }"]}
{"ids": "42131", "code": ["public Object Graph plus Graph ( List < Object > activity Scope Modules ) {", "if ( activity Scope Modules == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return graph . plus ( activity Scope Modules . to Array ( ) ) ; }"]}
{"ids": "33164", "code": ["public Group Category Set ( Group Category [ ] categories ) {", "Assert . is Not Null ( categories ) ;", "f Content = new Array List ( categories . length ) ;", "for ( int i = NUM_ ; i < categories . length ; i ++ ) {", "if ( ! f Content . contains ( categories [ i ] ) ) f Content . add ( categories [ i ] ) ; } }"]}
{"ids": "57737", "code": ["private boolean in Same Package ( Class < ? > c 1 , Class < ? > c 2 ) {", "String name C 1 = c 1 . get Name ( ) ;", "String name C 2 = c 2 . get Name ( ) ;", "int index Dot C 1 = name C 1 . last Index Of ( STR_ ) ;", "int index Dot C 2 = name C 2 . last Index Of ( STR_ ) ;", "if ( index Dot C 1 != index Dot C 2 ) {", "return false ; }", "if ( index Dot C 1 == - NUM_ ) {", "return true ; }", "return name C 1 . region Matches ( NUM_ , name C 2 , NUM_ , index Dot C 1 ) ; }"]}
{"ids": "20391", "code": ["private void write Constraints To Xml ( Xml Serializer out , Job Status job Status ) throws IO Exception {", "out . start Tag ( null , XML TAG PARAMS CONSTRAINTS ) ;", "if ( job Status . has Unmetered Constraint ( ) ) {", "out . attribute ( null , STR_ , Boolean . to String ( true ) ) ; }", "if ( job Status . has Connectivity Constraint ( ) ) {", "out . attribute ( null , STR_ , Boolean . to String ( true ) ) ; }", "if ( job Status . has Idle Constraint ( ) ) {", "out . attribute ( null , STR_ , Boolean . to String ( true ) ) ; }", "if ( job Status . has Charging Constraint ( ) ) {", "out . attribute ( null , STR_ , Boolean . to String ( true ) ) ; }", "out . end Tag ( null , XML TAG PARAMS CONSTRAINTS ) ; }"]}
{"ids": "61911", "code": ["public void fill Conditional Holes ( ) {", "Value Range possible Cond Pairs = new Value Range ( table . key Set ( ) ) ;", "if ( possible Cond Pairs . get Nb Combinations ( ) < NUM_ ) {", "Set < Assignment > possible Cond Assignments = possible Cond Pairs . linearise ( ) ;", "possible Cond Assignments . remove ( new Assignment ( ) ) ;", "for ( Assignment possible Cond : possible Cond Assignments ) {", "if ( ! table . contains Key ( possible Cond ) ) {", "add Row ( possible Cond , Value Factory . none ( ) , NUM_ ) ; } } } }"]}
{"ids": "34739", "code": ["private boolean show App Menu ( View view , boolean start Dragging ) {", "if ( ! m Menu Handler . is App Menu Showing ( ) && m Menu Handler . show App Menu ( view , start Dragging ) ) {", "if ( ! start Dragging ) Record User Action . record ( STR_ ) ;", "if ( m On App Menu Shown Listener != null ) {", "m On App Menu Shown Listener . run ( ) ; }", "return true ; }", "return false ; }"]}
{"ids": "71675", "code": ["protected void write Node Text ( Node node ) throws IO Exception {", "String text = node . get Text ( ) ;", "if ( ( text != null ) && ( text . length ( ) > NUM_ ) ) {", "if ( escape Text ) {", "text = escape Element Entities ( text ) ; }", "last Output Node Type = Node . TEXT NODE ;", "writer . write ( text ) ; } }"]}
{"ids": "11147", "code": ["public void insert Radians ( double [ ] latlons , int coord Pair Index , boolean replace Ends Of Inserted At Join ) {", "int min Pnts Needed For Insertion = NUM_ ;", "boolean at End = false ;", "boolean is Closed = is Geometry Closed ( ) ;", "int insertion Point = coord Pair Index * NUM_ ;", "if ( insertion Point >= rawllpts . length ) {", "if ( is Closed ) {", "insertion Point = rawllpts . length - NUM_ ; }", "else {", "insertion Point = rawllpts . length ;", "at End = true ; } }", "else if ( insertion Point <= NUM_ ) {", "if ( is Closed ) {", "insertion Point = NUM_ ; }", "else {", "insertion Point = NUM_ ;", "at End = true ; } }", "int new Coord Start = NUM_ ;", "int new Coord Length = latlons . length ;", "if ( replace Ends Of Inserted At Join ) {", "new Coord Start = NUM_ ;", "min Pnts Needed For Insertion = NUM_ ;", "if ( at End ) {", "min Pnts Needed For Insertion -= NUM_ ;", "new Coord Length -= NUM_ ;", "if ( insertion Point == NUM_ ) {", "new Coord Start = NUM_ ; } }", "else {", "new Coord Length -= NUM_ ; } }", "if ( render Type == OM Graphic . RENDERTYPE LATLON && latlons . length >= min Pnts Needed For Insertion && latlons . length % NUM_ == NUM_ ) {", "double [ ] oldrawllpnts = rawllpts ;", "int old Coords Remaining = oldrawllpnts . length - insertion Point ;", "rawllpts = new double [ oldrawllpnts . length + new Coord Length ] ;", "System . arraycopy ( oldrawllpnts , NUM_ , rawllpts , NUM_ , insertion Point ) ;", "System . arraycopy ( latlons , new Coord Start , rawllpts , insertion Point , new Coord Length ) ;", "System . arraycopy ( oldrawllpnts , insertion Point , rawllpts , insertion Point + new Coord Length , old Coords Remaining ) ;", "set Need To Regenerate ( true ) ; } }"]}
{"ids": "6027", "code": ["public static boolean cancel Potential Work ( Object data , Image View image View ) {", "final Bitmap Worker Task bitmap Worker Task = get Bitmap Worker Task ( image View ) ;", "if ( bitmap Worker Task != null ) {", "final Object bitmap Data = bitmap Worker Task . data ;", "if ( bitmap Data == null || ! bitmap Data . equals ( data ) ) {", "bitmap Worker Task . cancel ( true ) ;", "if ( Build Config . DEBUG ) {", "Log . d ( TAG , STR_ + data ) ; } }", "else {", "return false ; } }", "return true ; }"]}
{"ids": "32446", "code": ["private T 3 < Integer , Integer , byte [ ] > random Key ( Random rnd ) {", "return keys [ rnd . next Int ( keys . length ) ] ; }"]}
{"ids": "36011", "code": ["private void fill Example Table ( Data Set data Set , Progress Listener listener , int [ ] attribute Columns , Memory Example Table example Table ) throws Data Set Exception , Process Stopped Exception , Parse Exception {", "Attribute [ ] attributes = example Table . get Attributes ( ) ;", "data Set . reset ( ) ;", "int number Of Rows = data Set . get Number Of Rows ( ) ;", "Data Row Factory factory = new Data Row Factory ( data Management Type , Data Row Factory . POINT AS DECIMAL CHARACTER ) ;", "boolean is Running In Process = is Operator Running ( ) ;", "while ( data Set . has Next ( ) ) {", "if ( is Running In Process ) {", "operator . check For Stop ( ) ; }", "if ( should Stop ) {", "throw new Process Stopped Exception ( ) ; }", "Data Set Row current Row = data Set . next Row ( ) ;", "if ( listener != null ) {", "update Process ( listener , data Set . get Current Row Index ( ) , number Of Rows ) ; }", "Data Row row = factory . create ( attributes . length ) ;", "example Table . add Data Row ( row ) ;", "int attribute Index = NUM_ ;", "for ( Attribute attribute : attributes ) {", "if ( current Row . is Missing ( attribute Columns [ attribute Index ] ) ) {", "row . set ( attribute , Double . Na N ) ; }", "else {", "switch ( attribute . get Value Type ( ) ) {", "case Ontology . INTEGER :", "case Ontology . NUMERICAL :", "case Ontology . REAL :", "row . set ( attribute , get Number ( current Row , attribute Columns [ attribute Index ] ) ) ;", "break ;", "case Ontology . DATE TIME :", "case Ontology . TIME :", "case Ontology . DATE :", "row . set ( attribute , get Date ( current Row , attribute Columns [ attribute Index ] ) ) ;", "break ;", "default :", "row . set ( attribute , get String Index ( attribute , current Row , attribute Columns [ attribute Index ] ) ) ; } }", "attribute Index ++ ; } } }"]}
{"ids": "52813", "code": ["public boolean is Spurious ( int min Cl Size ) {", "return children . is Empty ( ) && members . size ( ) < min Cl Size ; }"]}
{"ids": "85179", "code": ["public Aes Decryptor ( byte [ ] key , int off , int len ) {", "this . key = new byte [ len ] ;", "System . arraycopy ( key , off , this . key , NUM_ , len ) ; }"]}
{"ids": "23213", "code": ["static String extract Number From Uri Without Formatting ( String uri ) {", "if ( uri == null ) {", "return null ; }", "int index 0 = uri . index Of ( URI START DELIMITER ) ;", "if ( index 0 != - NUM_ ) {", "uri = uri . substring ( index 0 + URI START DELIMITER . length ( ) , uri . index Of ( URI END DELIMITER , index 0 ) ) ; }", "int index 1 = uri . index Of ( TEL URI HEADER ) ;", "if ( index 1 != - NUM_ ) {", "uri = uri . substring ( index 1 + TEL URI HEADER . length ( ) ) ; }", "index 1 = uri . index Of ( SIP URI HEADER ) ;", "if ( index 1 != - NUM_ ) {", "int index 2 = uri . index Of ( STR_ , index 1 ) ;", "uri = uri . substring ( index 1 + SIP URI HEADER . length ( ) , index 2 ) ; }", "int index 2 = uri . index Of ( STR_ ) ;", "if ( index 2 != - NUM_ ) {", "uri = uri . substring ( NUM_ , index 2 ) ; }", "index 2 = uri . index Of ( STR_ ) ;", "if ( index 2 != - NUM_ ) {", "uri = uri . substring ( NUM_ , index 2 ) ; }", "return uri ; }"]}
{"ids": "32624", "code": ["public Remote Method Call Results invoke And Wait ( final String end Point Name , final Remote Method Call remote Call ) {", "End Point local ;", "synchronized ( m end Point Mutex ) {", "local = m local End Points . get ( end Point Name ) ; }", "if ( local == null ) {", "return invoke And Wait Remote ( remote Call ) ; }", "else {", "final long number = local . take A Number ( ) ;", "final List < Remote Method Call Results > results = local . invoke Local ( remote Call , number , get Local Node ( ) ) ;", "if ( results . size ( ) == NUM_ ) {", "throw new Remote Not Found Exception ( STR_ + end Point Name ) ; }", "if ( results . size ( ) > NUM_ ) {", "throw new Illegal State Exception ( STR_ + results ) ; }", "return results . get ( NUM_ ) ; } }"]}
{"ids": "20264", "code": ["private void create Element ( Document doc , Element parent Element , String element Name , boolean value ) {", "Element element = doc . create Element ( element Name ) ;", "element . append Child ( doc . create Text Node ( Boolean . to String ( value ) ) ) ;", "parent Element . append Child ( element ) ; }"]}
{"ids": "27474", "code": ["protected void annotation Value To String ( final String Builder sb , final B Op val , final int indent ) {", "sb . append ( val . to String ( ) ) ; }"]}
{"ids": "57826", "code": ["public Enumeration oids ( ) {", "return ordering . elements ( ) ; }"]}
{"ids": "54539", "code": ["@ Override Map < String , Object > extract Fields ( String line ) {", "if ( ! initialized ) {", "init ( ) ;", "initialized = true ; }", "String [ ] values = fixed Width Parser . parse Line ( line ) ;", "if ( has Header && Arrays . deep Equals ( values , header ) ) {", "return null ; }", "Map < String , Object > map = Maps . new Hash Map ( ) ;", "int i = NUM_ ;", "for ( Fixed Width Field field : fields ) {", "map . put ( field . get Name ( ) , get Value ( field , values [ i ++ ] ) ) ; }", "return map ; }"]}
{"ids": "72952", "code": ["protected double Scaling Function ( int i Distance ) {", "return Math . exp ( - Math . pow ( ( i Distance ) , NUM_ ) / ( NUM_ * Math . pow ( Correlation Window , NUM_ ) ) ) ; }"]}
{"ids": "43012", "code": ["protected void update Ideal Point ( ) {", "for ( Solution solution : this ) {", "if ( solution . get Number Of Objectives ( ) != number Of Objectives ) {", "throw new Framework Exception ( STR_ ) ; }", "for ( int i = NUM_ ; i < number Of Objectives ; i ++ ) {", "ideal Point [ i ] = Math . min ( ideal Point [ i ] , solution . get Objective ( i ) ) ; } } }"]}
{"ids": "77930", "code": ["public Search Builder sort ( Sort Field Builder ... builders ) {", "sort . add All ( Arrays . as List ( builders ) ) ;", "return this ; }"]}
{"ids": "74781", "code": ["@ Override public final Buffered Image data To RGB ( byte [ ] data , final int width , final int height ) {", "Buffered Image image ;", "data = data To RGB Byte Array ( data , width , height ) ;", "final Data Buffer db = new Data Buffer Byte ( data , data . length ) ;", "final int [ ] bands = { NUM_ , NUM_ , NUM_ } ;", "image = new Buffered Image ( width , height , Buffered Image . TYPE INT RGB ) ;", "final Raster raster = Raster . create Interleaved Raster ( db , width , height , width * NUM_ , NUM_ , bands , null ) ;", "image . set Data ( raster ) ;", "return image ; }"]}
{"ids": "38385", "code": ["protected void create File Chooser ( ) {", "m File Chooser = new J File Chooser ( new File ( System . get Property ( STR_ ) ) ) ;", "m File Chooser . set File Selection Mode ( J File Chooser . FILES ONLY ) ; }"]}
{"ids": "30108", "code": ["private boolean is Noun ( String word ) {", "if ( nouns == null ) return false ;", "return nouns . contains ( word . to Lower Case ( ) ) ; }"]}
{"ids": "22670", "code": ["public static void write Document ( Document document , String encoding , Output Stream out , Writer writer , boolean omit XML Declaration ) throws IO Exception , XML Exception {", "if ( writer == null ) {", "writer = new Output Stream Writer ( out , encoding ) ; }", "transformer . set Output Property ( Output Keys . ENCODING , encoding ) ;", "transformer . set Output Property ( Output Keys . OMIT XML DECLARATION , omit XML Declaration ? STR_ : STR_ ) ;", "Source source = new DOM Source ( document ) ;", "Result result = new Stream Result ( writer ) ;", "try {", "transformer . transform ( source , result ) ; }", "catch ( Transformer Exception e ) {", "e . print Stack Trace ( ) ;", "throw new XML Exception ( STR_ , e ) ; }", "writer . flush ( ) ; }"]}
{"ids": "80498", "code": ["public boolean is Quest Completed ( final String name ) {", "return quests . is Quest Completed ( name ) ; }"]}
{"ids": "20161", "code": ["private void update Button State ( boolean data Changed ) {", "btn Apply . set Enabled ( data Changed ) ;", "btn Revert . set Enabled ( data Changed ) ; }"]}
{"ids": "6508", "code": ["private void build Menu ( ) {", "set Visible ( false ) ;", "remove All ( ) ;", "if ( recent Searches . get Length ( ) == NUM_ ) {", "J Menu Item no Recent = new J Menu Item ( UI Manager . get String ( STR_ ) ) ;", "no Recent . set Enabled ( false ) ;", "add ( no Recent ) ; }", "else {", "J Menu Item recent = new J Menu Item ( UI Manager . get String ( STR_ ) ) ;", "recent . set Enabled ( false ) ;", "add ( recent ) ;", "for ( String search String : recent Searches . get Recent Searches ( ) ) {", "J Menu Item mi = new J Menu Item ( search String ) ;", "mi . add Action Listener ( this ) ;", "add ( mi ) ; }", "add Separator ( ) ;", "clear = new J Menu Item ( UI Manager . get String ( STR_ ) ) ;", "clear . add Action Listener ( this ) ;", "add ( clear ) ; } }"]}
{"ids": "12092", "code": ["public static String convert U 8 To Hex String ( char u 8 ) {", "return Integer . to Hex String ( u 8 ) ; }"]}
{"ids": "86175", "code": ["public static byte [ ] join ( byte [ ] array A , byte ... array B ) {", "if ( ( array B == null ) || ( array B . length == NUM_ ) ) {", "return array A ; }", "if ( ( array A == null ) || ( array A . length == NUM_ ) ) {", "return array B ; }", "byte [ ] array = new byte [ array A . length + array B . length ] ;", "System . arraycopy ( array A , NUM_ , array , NUM_ , array A . length ) ;", "System . arraycopy ( array B , NUM_ , array , array A . length , array B . length ) ;", "return array ; }"]}
{"ids": "32546", "code": ["public void remove Listener ( Listener listener ) {", "m Listeners . remove ( listener ) ; }"]}
{"ids": "43009", "code": ["protected double constriction Coefficient ( double c 1 , double c 2 ) {", "double rho = c 1 + c 2 ;", "if ( rho <= NUM_ ) {", "return NUM_ ; }", "else {", "return NUM_ / ( NUM_ - rho - Math . sqrt ( Math . pow ( rho , NUM_ ) - NUM_ * rho ) ) ; } }"]}
{"ids": "20060", "code": ["public Replicator Capabilities ( Tungsten Properties props ) throws Exception {", "Set < String > keys = props . key Names ( ) ;", "for ( String key : keys ) {", "if ( key . equals ( ROLES ) ) {", "List < String > tags = props . get String List ( key ) ;", "for ( String tag : tags ) {", "if ( tag . equals Ignore Case ( ROLE MASTER ) ) {", "add Role ( Replicator Capabilities . ROLE MASTER ) ; }", "else if ( tag . equals Ignore Case ( ROLE SLAVE ) ) {", "add Role ( Replicator Capabilities . ROLE SLAVE ) ; }", "else if ( tag . equals Ignore Case ( ROLE RELAY ) ) {", "add Role ( Replicator Capabilities . ROLE RELAY ) ; }", "else {", "throw new Exception ( STR_ + tag ) ; } } }", "else if ( key . equals ( MODEL ) ) {", "String tag = props . get String ( key ) ;", "if ( tag . equals Ignore Case ( MODEL PUSH ) ) {", "set Model ( MODEL PUSH ) ; }", "else if ( tag . equals Ignore Case ( MODEL PULL ) ) {", "set Model ( MODEL PULL ) ; }", "else if ( tag . equals Ignore Case ( MODEL PEER ) ) {", "set Model ( MODEL PEER ) ; }", "else if ( tag . equals Ignore Case ( UNKNOWN ) ) {", "set Model ( UNKNOWN ) ; }", "else {", "throw new Exception ( STR_ + tag ) ; } }", "else if ( key . equals ( CAP CONSISTENCY ) ) {", "set Consistency Check ( props . get Boolean ( CAP CONSISTENCY ) ) ; }", "else if ( key . equals ( CAP HEARTBEAT ) ) {", "set Heartbeat ( props . get Boolean ( CAP HEARTBEAT ) ) ; }", "else if ( key . equals ( CAP FLUSH ) ) {", "set Flush ( props . get Boolean ( CAP FLUSH ) ) ; }", "else if ( key . equals ( PROVISION ) ) {", "String tag = props . get String ( key ) ;", "if ( tag . equals Ignore Case ( PROVISION DONOR ) ) {", "set Provision Driver ( PROVISION DONOR ) ; }", "else if ( tag . equals Ignore Case ( PROVISION JOINER ) ) {", "set Provision Driver ( PROVISION JOINER ) ; }", "else if ( tag . equals Ignore Case ( UNKNOWN ) ) {", "set Provision Driver ( UNKNOWN ) ; }", "else {", "throw new Exception ( STR_ + tag ) ; } }", "else {", "throw new Exception ( STR_ + key ) ; } } }"]}
{"ids": "84842", "code": ["private void fit Image To View ( ) {", "Drawable drawable = get Drawable ( ) ;", "if ( drawable == null || drawable . get Intrinsic Width ( ) == NUM_ || drawable . get Intrinsic Height ( ) == NUM_ ) {", "return ; }", "if ( matrix == null || prev Matrix == null ) {", "return ; }", "int drawable Width = drawable . get Intrinsic Width ( ) ;", "int drawable Height = drawable . get Intrinsic Height ( ) ;", "float scale X = ( float ) view Width / drawable Width ;", "float scale Y = ( float ) view Height / drawable Height ;", "switch ( m Scale Type ) {", "case CENTER :", "scale X = scale Y = NUM_ ;", "break ;", "case CENTER CROP :", "scale X = scale Y = Math . max ( scale X , scale Y ) ;", "break ;", "case CENTER INSIDE :", "scale X = scale Y = Math . min ( NUM_ , Math . min ( scale X , scale Y ) ) ;", "case FIT CENTER :", "scale X = scale Y = Math . min ( scale X , scale Y ) ;", "break ;", "case FIT XY :", "break ;", "default :", "throw new Unsupported Operation Exception ( STR_ ) ; }", "float redundant X Space = view Width - ( scale X * drawable Width ) ;", "float redundant Y Space = view Height - ( scale Y * drawable Height ) ;", "match View Width = view Width - redundant X Space ;", "match View Height = view Height - redundant Y Space ;", "if ( ! is Zoomed ( ) ) {", "matrix . set Scale ( scale X , scale Y ) ;", "matrix . post Translate ( redundant X Space / NUM_ , redundant Y Space / NUM_ ) ;", "normalized Scale = NUM_ ; }", "else {", "prev Matrix . get Values ( m ) ;", "m [ Matrix . MSCALE X ] = match View Width / drawable Width * normalized Scale ;", "m [ Matrix . MSCALE Y ] = match View Height / drawable Height * normalized Scale ;", "float trans X = m [ Matrix . MTRANS X ] ;", "float trans Y = m [ Matrix . MTRANS Y ] ;", "float prev Actual Width = prev Match View Width * normalized Scale ;", "float actual Width = get Image Width ( ) ;", "translate Matrix After Rotate ( Matrix . MTRANS X , trans X , prev Actual Width , actual Width , prev View Width , view Width , drawable Width ) ;", "float prev Actual Height = prev Match View Height * normalized Scale ;", "float actual Height = get Image Height ( ) ;", "translate Matrix After Rotate ( Matrix . MTRANS Y , trans Y , prev Actual Height , actual Height , prev View Height , view Height , drawable Height ) ;", "matrix . set Values ( m ) ; }", "fix Trans ( ) ;", "set Image Matrix ( matrix ) ; }"]}
{"ids": "24445", "code": ["public synchronized void close ( ) {", "if ( is Alive ) {", "is Alive = false ;", "task Queue . clear ( ) ;", "interrupt ( ) ; } }"]}
{"ids": "75", "code": ["public String remove After ( String original , String marker ) {", "int index = original . index Of ( marker ) ;", "if ( index != - NUM_ ) {", "return original . substring ( NUM_ , index ) ; }", "return original ; }"]}
{"ids": "36879", "code": ["public Address sub ( final Object rhs ) {", "return new Address ( m value . subtract ( get Big Integer ( rhs ) ) ) ; }"]}
{"ids": "649", "code": ["private static boolean eq ( Object o 1 , Object o 2 ) {", "return ( o 1 == null ? o 2 == null : o 1 . equals ( o 2 ) ) ; }"]}
{"ids": "51368", "code": ["public void roll ( int field , int value ) {", "boolean increment = value >= NUM_ ;", "int count = increment ? value : - value ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "roll ( field , increment ) ; } }"]}
{"ids": "38084", "code": ["public String cluster Results To String ( ) {", "return m clustering Results . to String ( ) ; }"]}
{"ids": "56533", "code": ["private void generate Get Module Method ( New Binding Key key , New Dependency Info dependency Info ) {", "Type Element scope = scope Calculator . calculate ( key ) ;", "generate Get Module Method ( scope , dependency Info ) ; }"]}
{"ids": "51627", "code": ["private void add Calendar Event ( String summary , Date start , boolean all Day , Date end , String location , String description , String [ ] attendees ) {", "Intent intent = new Intent ( Intent . ACTION INSERT ) ;", "intent . set Type ( STR_ ) ;", "long start Milliseconds = start . get Time ( ) ;", "intent . put Extra ( STR_ , start Milliseconds ) ;", "if ( all Day ) {", "intent . put Extra ( STR_ , true ) ; }", "long end Milliseconds ;", "if ( end == null ) {", "if ( all Day ) {", "end Milliseconds = start Milliseconds + NUM_ * NUM_ * NUM_ * NUM_ ; }", "else {", "end Milliseconds = start Milliseconds ; } }", "else {", "end Milliseconds = end . get Time ( ) ; }", "intent . put Extra ( STR_ , end Milliseconds ) ;", "intent . put Extra ( STR_ , summary ) ;", "intent . put Extra ( STR_ , location ) ;", "intent . put Extra ( STR_ , description ) ;", "if ( attendees != null ) {", "intent . put Extra ( Intent . EXTRA EMAIL , attendees ) ; }", "try {", "raw Launch Intent ( intent ) ; }", "catch ( Activity Not Found Exception anfe ) {", "Log . w ( TAG , STR_ + Intent . ACTION INSERT ) ;", "intent . set Action ( Intent . ACTION EDIT ) ;", "launch Intent ( intent ) ; } }"]}
{"ids": "39359", "code": ["private String [ ] separator And Enclosures To Array ( ) {", "String [ ] parts = m Enclosures . split ( STR_ ) ;", "String [ ] result = new String [ parts . length + NUM_ ] ;", "result [ NUM_ ] = m Field Separator ;", "int index = NUM_ ;", "for ( String e : parts ) {", "if ( e . length ( ) > NUM_ || e . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "result [ index ++ ] = e ; }", "return result ; }"]}
{"ids": "56766", "code": ["private Business Object Data Notification Registration Entity create Business Object Data Notification Entity ( Namespace Entity namespace Entity , Notification Event Type Entity notification Event Type Entity , Business Object Definition Entity business Object Definition Entity , File Type Entity file Type Entity , Storage Entity storage Entity , Business Object Data Status Entity new Business Object Data Status Entity , Business Object Data Status Entity old Business Object Data Status Entity , Notification Registration Key key , Business Object Data Notification Filter business Object Data Notification Filter , List < Job Action > job Actions , Notification Registration Status Entity notification Registration Status Entity ) {", "Business Object Data Notification Registration Entity business Object Data Notification Registration Entity = new Business Object Data Notification Registration Entity ( ) ;", "business Object Data Notification Registration Entity . set Namespace ( namespace Entity ) ;", "business Object Data Notification Registration Entity . set Name ( key . get Notification Name ( ) ) ;", "business Object Data Notification Registration Entity . set Notification Event Type ( notification Event Type Entity ) ;", "business Object Data Notification Registration Entity . set Business Object Definition ( business Object Definition Entity ) ;", "if ( String Utils . is Not Blank ( business Object Data Notification Filter . get Business Object Format Usage ( ) ) ) {", "business Object Data Notification Registration Entity . set Usage ( business Object Data Notification Filter . get Business Object Format Usage ( ) ) ; }", "business Object Data Notification Registration Entity . set File Type ( file Type Entity ) ;", "business Object Data Notification Registration Entity . set Business Object Format Version ( business Object Data Notification Filter . get Business Object Format Version ( ) ) ;", "business Object Data Notification Registration Entity . set Storage ( storage Entity ) ;", "business Object Data Notification Registration Entity . set New Business Object Data Status ( new Business Object Data Status Entity ) ;", "business Object Data Notification Registration Entity . set Old Business Object Data Status ( old Business Object Data Status Entity ) ;", "business Object Data Notification Registration Entity . set Notification Registration Status ( notification Registration Status Entity ) ;", "List < Notification Action Entity > notification Action Entities = new Array List < > ( ) ;", "business Object Data Notification Registration Entity . set Notification Actions ( notification Action Entities ) ;", "for ( Job Action job Action : job Actions ) {", "Job Definition Entity job Definition Entity = job Definition Dao Helper . get Job Definition Entity ( job Action . get Namespace ( ) , job Action . get Job Name ( ) ) ;", "Notification Job Action Entity notification Job Action Entity = new Notification Job Action Entity ( ) ;", "notification Action Entities . add ( notification Job Action Entity ) ;", "notification Job Action Entity . set Job Definition ( job Definition Entity ) ;", "notification Job Action Entity . set Correlation Data ( job Action . get Correlation Data ( ) ) ;", "notification Job Action Entity . set Notification Registration ( business Object Data Notification Registration Entity ) ; }", "return business Object Data Notification Registration Entity ; }"]}
{"ids": "46864", "code": ["void bind ( String jndi Url , Hashtable < ? , ? > attributes , RMI Server rmi Server , boolean rebind ) throws Naming Exception , Malformed URL Exception {", "Initial Context ctx = new Initial Context ( attributes ) ;", "if ( rebind ) ctx . rebind ( jndi Url , rmi Server ) ;", "else ctx . bind ( jndi Url , rmi Server ) ;", "ctx . close ( ) ; }"]}
{"ids": "3769", "code": ["public final void Xprint Latin 1 No Lf ( String string ) throws IO Exception {", "if ( source == null ) {", "return ; }", "if ( string == null ) {", "string = STR_ ; }", "byte [ ] write Buffer = write Buffer ;", "int write Length = write Length ;", "int length = string . length ( ) ;", "int offset = NUM_ ;", "int chars Length = CHARS LENGTH ;", "char [ ] chars = chars ;", "while ( length > NUM_ ) {", "int sublen = Math . min ( chars Length , write Buffer . length - write Length ) ;", "if ( sublen <= NUM_ ) {", "source . write ( write Buffer , NUM_ , write Length , false ) ;", "position += write Length ;", "is Flush Required = true ;", "write Length = NUM_ ;", "sublen = Math . min ( chars Length , write Buffer . length - write Length ) ; }", "sublen = Math . min ( length , sublen ) ;", "string . get Chars ( offset , sublen , chars , NUM_ ) ;", "for ( int i = NUM_ ; i < sublen ; i ++ ) {", "byte value = ( byte ) chars [ i ] ;", "if ( value == STR_ || value == STR_ ) {", "length = NUM_ ;", "break ; }", "write Buffer [ write Length ++ ] = value ; }", "offset += sublen ;", "length -= sublen ; }", "write Length = write Length ; }"]}
{"ids": "49460", "code": ["private int calculate Stroke Weight ( ) {", "int stroke Weight = ( int ) ( get Stroke Width ( ) * NUM_ ) ;", "LOGGER . trace ( STR_ , stroke Width ) ;", "return stroke Weight ; }"]}
{"ids": "62108", "code": ["private static List < Match Result > flatten Results ( List < List < Match Result > > all Results ) {", "List < Match Result > results = new Array List < Match Result > ( ) ;", "results . add All ( all Results . remove ( NUM_ ) ) ;", "for ( List < Match Result > rel Results : all Results ) {", "List < Match Result > new Results = new Array List < Match Result > ( ) ;", "for ( Match Result cur Result : results ) {", "for ( Match Result rel Result : rel Results ) {", "Match Result new Result = cur Result . copy ( ) ;", "new Result . add Assignment ( rel Result ) ;", "new Results . add ( new Result ) ; } }", "results = new Results ; }", "return results ; }"]}
{"ids": "35339", "code": ["@ Override public void visit ( Mapping m , int line , int col , int next Line , int next Col ) throws IO Exception {", "if ( previous Line != line ) {", "previous Column = NUM_ ; }", "if ( line != next Line || col != next Col ) {", "if ( line < max Line ) {", "if ( previous Line == line ) {", "out . append ( STR_ ) ; }", "write Entry ( m , col ) ;", "previous Line = line ;", "previous Column = col ; }", "else {", "Preconditions . check State ( m == null ) ; } }", "for ( int i = line ; i <= next Line && i < max Line ; i ++ ) {", "if ( i == next Line ) {", "break ; }", "close Line ( false ) ;", "open Line ( false ) ; } }"]}
{"ids": "62796", "code": ["public boolean on Click ( int position ) {", "if ( m Mode == MODE MULTIPLE SELECT ) {", "if ( m Selected Items . contains ( position ) ) {", "m Selected Items . remove ( position ) ;", "if ( m Selected Items . is Empty ( ) ) {", "set Mode ( MODE SINGLE SELECT ) ; } }", "else {", "m Selected Items . add ( position ) ; }", "notify Selection Changed ( position ) ;", "return true ; }", "return false ; }"]}
{"ids": "14880", "code": ["public void add Session Event URL ( String url , Session ID sid ) {", "Set < Session ID > sids = session Event UR Ls . get ( url ) ;", "if ( sids == null ) {", "sids = Collections . new Set From Map ( new Concurrent Hash Map < Session ID , Boolean > ( ) ) ;", "Set < Session ID > previous Value = session Event UR Ls . put If Absent ( url , sids ) ;", "if ( previous Value != null ) {", "sids = previous Value ; } }", "if ( sids . add ( sid ) ) {", "notify Persistence Manager ( ) ; } }"]}
{"ids": "37824", "code": ["public final void add Inst With Unknown ( Instances source , int att Index ) throws Exception {", "double [ ] probs ;", "double weight , new Weight ;", "int class Index ;", "Instance instance ;", "int j ;", "probs = new double [ m per Bag . length ] ;", "for ( j = NUM_ ; j < m per Bag . length ; j ++ ) {", "if ( Utils . eq ( tota L , NUM_ ) ) {", "probs [ j ] = NUM_ / probs . length ; }", "else {", "probs [ j ] = m per Bag [ j ] / tota L ; } }", "Enumeration < Instance > enu = source . enumerate Instances ( ) ;", "while ( enu . has More Elements ( ) ) {", "instance = enu . next Element ( ) ;", "if ( instance . is Missing ( att Index ) ) {", "class Index = ( int ) instance . class Value ( ) ;", "weight = instance . weight ( ) ;", "m per Class [ class Index ] = m per Class [ class Index ] + weight ;", "tota L = tota L + weight ;", "for ( j = NUM_ ; j < m per Bag . length ; j ++ ) {", "new Weight = probs [ j ] * weight ;", "m per Class Per Bag [ j ] [ class Index ] = m per Class Per Bag [ j ] [ class Index ] + new Weight ;", "m per Bag [ j ] = m per Bag [ j ] + new Weight ; } } } }"]}
{"ids": "3290", "code": ["@ Override public void on Item Click ( Adapter View < ? > parent , View view , int position , long id ) {", "set Selection ( position ) ; }"]}
{"ids": "58223", "code": ["public void traverse Fragment ( Node pos ) throws org . xml . sax . SAX Exception {", "Node top = pos ;", "while ( null != pos ) {", "start Node ( pos ) ;", "Node next Node = pos . get First Child ( ) ;", "while ( null == next Node ) {", "end Node ( pos ) ;", "if ( top . equals ( pos ) ) break ;", "next Node = pos . get Next Sibling ( ) ;", "if ( null == next Node ) {", "pos = pos . get Parent Node ( ) ;", "if ( ( null == pos ) || ( top . equals ( pos ) ) ) {", "if ( null != pos ) end Node ( pos ) ;", "next Node = null ;", "break ; } } }", "pos = next Node ; } }"]}
{"ids": "83900", "code": ["public void update Processor Duration ( Duration duration ) {", "processor duration = Optional . of ( duration ) ; }"]}
{"ids": "33777", "code": ["static Object invoke Or Die ( Method method , Object object , Object ... params ) {", "try {", "return method . invoke ( object , params ) ; }", "catch ( Illegal Access Exception e ) {", "throw new Runtime Exception ( STR_ + STR_ , e ) ; }", "catch ( Invocation Target Exception e ) {", "final Throwable cause = e . get Cause ( ) ;", "if ( cause instanceof Runtime Exception ) {", "throw ( Runtime Exception ) cause ; }", "else if ( cause instanceof Error ) {", "throw ( Error ) cause ; }", "else {", "throw new Runtime Exception ( STR_ , cause ) ; } } }"]}
{"ids": "34352", "code": ["public void start Element ( String uri , String local Name , String q Name , Attributes atts ) throws SAX Exception {", "element Level ++ ;", "ns Support . push Context ( ) ;", "if ( force DTD && ! has Output DTD ) start DTD ( local Name == null ? q Name : local Name , STR_ , STR_ ) ;", "write ( STR_ ) ;", "write Name ( uri , local Name , q Name , true ) ;", "write Attributes ( atts ) ;", "if ( element Level == NUM_ ) {", "force NS Decls ( ) ; }", "write NS Decls ( ) ;", "write ( STR_ ) ;", "if ( html Mode && ( q Name . equals ( STR_ ) || q Name . equals ( STR_ ) ) ) {", "cdata Element = true ; }", "super . start Element ( uri , local Name , q Name , atts ) ; }"]}
{"ids": "39996", "code": ["void init Program ( ) {", "gl Use Program ( this . program ) ;", "view Matrix Uniform = gl Get Uniform Location ( this . program , STR_ ) ;", "proj Matrix Uniform = gl Get Uniform Location ( this . program , STR_ ) ;", "viewport Size Uniform = gl Get Uniform Location ( this . program , STR_ ) ;", "gl Use Program ( NUM_ ) ; }"]}
{"ids": "33079", "code": ["public static String [ ] sort Copy ( String [ ] objects ) {", "int len = objects . length ;", "String [ ] copy = new String [ len ] ;", "System . arraycopy ( objects , NUM_ , copy , NUM_ , len ) ;", "sort ( copy ) ;", "return copy ; }"]}
{"ids": "22818", "code": ["public Iterator < Sim Event > iterator ( ) {", "return list . iterator ( ) ; }"]}
{"ids": "74678", "code": ["private static boolean accepts ( String accept header , String to accept ) {", "String [ ] accept Values = accept header . split ( STR_ ) ;", "Arrays . sort ( accept Values ) ;", "return Arrays . binary Search ( accept Values , to accept ) > - NUM_ || Arrays . binary Search ( accept Values , to accept . replace All ( STR_ , STR_ ) ) > - NUM_ || Arrays . binary Search ( accept Values , STR_ ) > - NUM_ ; }"]}
{"ids": "38446", "code": ["public String [ ] tokenize ( String raw String ) {", "Vector < String > result = new Vector < String > ( ) ;", "String Tokenizer tk = new String Tokenizer ( raw String , m Seperator ) ;", "while ( tk . has More Tokens ( ) ) {", "result . add Element ( tk . next Token ( ) ) ; }", "String [ ] new Strings = new String [ result . size ( ) ] ;", "for ( int i = NUM_ ; i < result . size ( ) ; i ++ ) {", "new Strings [ i ] = result . element At ( i ) ; }", "return new Strings ; }"]}
{"ids": "19829", "code": ["public synchronized void return Log Cursor ( Log Cursor log Cursor ) {", "log Cursor . set Loaned ( false ) ; }"]}
{"ids": "15021", "code": ["void unassign Policies ( String service Name , Set policy D Ns , boolean to Verify ) throws AM Exception , SSO Exception {", "if ( ( policy D Ns == null ) || ( policy D Ns . is Empty ( ) ) ) {", "return ; }", "AM Template template = get Template ( service Name , AM Template . POLICY TEMPLATE ) ;", "unassign Policies ( template , policy D Ns , to Verify ) ; }"]}
{"ids": "21790", "code": ["public boolean release Lock ( String lock Name ) {", "if ( lock Name == null || lock Name . is Empty ( ) ) {", "s logger . info ( STR_ ) ;", "return false ; }", "try {", "Inter Process Lock lock = s acquired Locks . get ( lock Name ) ;", "if ( lock != null ) {", "s acquired Locks . remove ( lock Name ) ;", "lock . release ( ) ;", "s logger . info ( STR_ + lock Name ) ; }", "else {", "return false ; }", "return true ; }", "catch ( Exception e ) {", "s logger . error ( STR_ , lock Name , e ) ;", "return false ; } }"]}
{"ids": "8740", "code": ["private View find Intercepting View ( float pos , View v ) {", "for ( Key Button View other View : m Button Views ) {", "if ( other View == v ) {", "continue ; }", "if ( Array Utils . contains ( SMALL BUTTON IDS , other View . get Id ( ) ) ) {", "continue ; }", "other View . get Location On Screen ( s Location ) ;", "float other Pos = s Location [ m Vertical ? NUM_ : NUM_ ] ;", "float other Dimension = m Vertical ? v . get Height ( ) : v . get Width ( ) ;", "if ( pos > ( other Pos + other Dimension / NUM_ ) && pos < ( other Pos + other Dimension ) ) {", "return other View ; } }", "return null ; }"]}
{"ids": "59925", "code": ["public void detach Disk Async ( final String vm Id , Vm Disk Operation vm Disk Operation , final Future Callback < Task > response Callback ) throws IO Exception {", "String path = String . format ( STR_ , get Base Path ( ) , vm Id ) ;", "create Object Async ( path , serialize Object As Json ( vm Disk Operation ) , response Callback ) ; }"]}
{"ids": "22846", "code": ["public static void main ( String [ ] args ) {", "Log . print Line ( STR_ ) ;", "try {", "int num user = NUM_ ;", "Calendar calendar = Calendar . get Instance ( ) ;", "boolean trace flag = false ;", "Cloud Sim . init ( num user , calendar , trace flag ) ;", "@ Suppress Warnings ( STR_ ) Datacenter datacenter 0 = create Datacenter ( STR_ ) ;", "@ Suppress Warnings ( STR_ ) Datacenter datacenter 1 = create Datacenter ( STR_ ) ;", "Datacenter Broker broker 1 = create Broker ( NUM_ ) ;", "int broker Id 1 = broker 1 . get Id ( ) ;", "Datacenter Broker broker 2 = create Broker ( NUM_ ) ;", "int broker Id 2 = broker 2 . get Id ( ) ;", "vmlist 1 = new Array List < Vm > ( ) ;", "vmlist 2 = new Array List < Vm > ( ) ;", "int vmid = NUM_ ;", "int mips = NUM_ ;", "long size = NUM_ ;", "int ram = NUM_ ;", "long bw = NUM_ ;", "int pes Number = NUM_ ;", "String vmm = STR_ ;", "Vm vm 1 = new Vm ( vmid , broker Id 1 , mips , pes Number , ram , bw , size , vmm , new Cloudlet Scheduler Time Shared ( ) ) ;", "Vm vm 2 = new Vm ( vmid , broker Id 2 , mips , pes Number , ram , bw , size , vmm , new Cloudlet Scheduler Time Shared ( ) ) ;", "vmlist 1 . add ( vm 1 ) ;", "vmlist 2 . add ( vm 2 ) ;", "broker 1 . submit Vm List ( vmlist 1 ) ;", "broker 2 . submit Vm List ( vmlist 2 ) ;", "cloudlet List 1 = new Array List < Cloudlet > ( ) ;", "cloudlet List 2 = new Array List < Cloudlet > ( ) ;", "int id = NUM_ ;", "long length = NUM_ ;", "long file Size = NUM_ ;", "long output Size = NUM_ ;", "Utilization Model utilization Model = new Utilization Model Full ( ) ;", "Cloudlet cloudlet 1 = new Cloudlet ( id , length , pes Number , file Size , output Size , utilization Model , utilization Model , utilization Model ) ;", "cloudlet 1 . set User Id ( broker Id 1 ) ;", "Cloudlet cloudlet 2 = new Cloudlet ( id , length , pes Number , file Size , output Size , utilization Model , utilization Model , utilization Model ) ;", "cloudlet 2 . set User Id ( broker Id 2 ) ;", "cloudlet List 1 . add ( cloudlet 1 ) ;", "cloudlet List 2 . add ( cloudlet 2 ) ;", "broker 1 . submit Cloudlet List ( cloudlet List 1 ) ;", "broker 2 . submit Cloudlet List ( cloudlet List 2 ) ;", "Cloud Sim . start Simulation ( ) ;", "List < Cloudlet > new List 1 = broker 1 . get Cloudlet Received List ( ) ;", "List < Cloudlet > new List 2 = broker 2 . get Cloudlet Received List ( ) ;", "Cloud Sim . stop Simulation ( ) ;", "Log . print ( STR_ + broker Id 1 + STR_ ) ;", "print Cloudlet List ( new List 1 ) ;", "Log . print ( STR_ + broker Id 2 + STR_ ) ;", "print Cloudlet List ( new List 2 ) ;", "Log . print Line ( STR_ ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "Log . print Line ( STR_ ) ; } }"]}
{"ids": "1075", "code": ["public Concurrent Hash Map Pro ( Map < ? extends K , ? extends V > m ) {", "this ( Math . max ( ( int ) ( m . size ( ) / DEFAULT LOAD FACTOR ) + NUM_ , DEFAULT INITIAL CAPACITY ) , DEFAULT LOAD FACTOR , DEFAULT CONCURRENCY LEVEL ) ;", "put All ( m ) ; }"]}
{"ids": "63064", "code": ["static < K > void generate ( Array List < K > list , Universal Hash < K > hash , int level , int seed , Byte Array Output Stream out ) {", "int size = list . size ( ) ;", "if ( size <= NUM_ ) {", "out . write ( size ) ;", "return ; }", "if ( level > NUM_ ) {", "throw new Illegal State Exception ( STR_ + STR_ ) ; }", "if ( size <= MAX SIZE ) {", "int max Offset = MAX OFFSETS [ size ] ;", "int [ ] hashes = new int [ size ] ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "hashes [ i ] = hash . hash Code ( list . get ( i ) , level , seed ) ; }", "int test Size = size ;", "if ( size >= SPEEDUP ) {", "test Size ++ ;", "max Offset /= test Size ; }", "next Offset : for ( int offset = NUM_ ; offset < max Offset ; offset ++ ) {", "int bits = NUM_ ;", "for ( int i = NUM_ ; i < size ; i ++ ) {", "int x = hashes [ i ] ;", "int h = hash ( x , level , offset , test Size ) ;", "if ( ( bits & ( NUM_ << h ) ) != NUM_ ) {", "continue next Offset ; }", "bits |= NUM_ << h ; }", "if ( size >= SPEEDUP ) {", "int pos = Integer . number Of Trailing Zeros ( ~ bits ) ;", "write Size Offset ( out , size , offset * ( size + NUM_ ) + pos ) ; }", "else {", "write Size Offset ( out , size , offset ) ; }", "return ; } }", "int split ;", "if ( size > NUM_ * DIVIDE ) {", "split = size / ( NUM_ * DIVIDE ) ; }", "else {", "split = ( size - NUM_ ) / DIVIDE ; }", "split = Math . max ( NUM_ , split ) ;", "boolean is Root = level == NUM_ ;", "Array List < Array List < K > > lists ;", "do {", "lists = new Array List < Array List < K > > ( split ) ;", "for ( int i = NUM_ ; i < split ; i ++ ) {", "lists . add ( new Array List < K > ( size / split ) ) ; }", "for ( int i = NUM_ ; i < size ; i ++ ) {", "K x = list . get ( i ) ;", "Array List < K > l = lists . get ( hash ( x , hash , level , seed , NUM_ , split ) ) ;", "l . add ( x ) ;", "if ( is Root && split >= SPLIT MANY && l . size ( ) > NUM_ * DIVIDE * NUM_ ) {", "level ++ ;", "lists = null ;", "break ; } } }", "while ( lists == null ) ;", "if ( split >= SPLIT MANY ) {", "out . write ( SPLIT MANY ) ; }", "write Var Int ( out , split ) ;", "boolean multi Threaded = is Root && list . size ( ) > NUM_ ;", "list . clear ( ) ;", "list . trim To Size ( ) ;", "if ( multi Threaded ) {", "generate Multi Threaded ( lists , hash , level , seed , out ) ; }", "else {", "for ( Array List < K > s 2 : lists ) {", "generate ( s 2 , hash , level + NUM_ , seed , out ) ; } }", "if ( is Root && split >= SPLIT MANY ) {", "out . write ( level ) ; } }"]}
{"ids": "35841", "code": ["private void initialise Commands ( ) {", "reward = new Achievement Rewards ( this ) ;", "achievement Display = new Achievement Display ( this ) ;", "give Command = new Give Command ( this ) ;", "book Command = new Book Command ( this ) ;", "top Command = new Top Command ( this ) ;", "stats Command = new Stats Command ( this ) ;", "info Command = new Info Command ( this ) ;", "list Command = new List Command ( this ) ;", "help Command = new Help Command ( this ) ;", "check Command = new Check Command ( this ) ;", "delete Command = new Delete Command ( this ) ; }"]}
{"ids": "19468", "code": ["public Create Custom Metric ( Monitoring monitoring Service , String project Resource ) {", "this . monitoring Service = monitoring Service ;", "this . project Resource = project Resource ;", "this . metric Type = CUSTOM METRIC DOMAIN + STR_ + DEFAULT METRIC TYPE ;", "this . metric Name = project Resource + STR_ + metric Type ; }"]}
{"ids": "40246", "code": ["private boolean journal Rebuild Required ( ) {", "final int REDUNDANT OP COMPACT THRESHOLD = NUM_ ;", "return redundant Op Count >= REDUNDANT OP COMPACT THRESHOLD && redundant Op Count >= lru Entries . size ( ) ; }"]}
{"ids": "52653", "code": ["public static boolean delete Files In A Directory ( String directory Path ) {", "if ( ( directory Path == null ) || directory Path . is Empty ( ) ) {", "return false ; }", "boolean is Successful Delete = true ;", "List < File > files = get List Of Files In A Directory ( directory Path ) ;", "if ( files == null ) {", "return false ; }", "try {", "for ( File file : files ) {", "boolean file Delete Success = delete File ( directory Path , file . get Name ( ) ) ;", "if ( ! file Delete Success ) {", "is Successful Delete = false ; } } }", "catch ( Exception e ) {", "logger . debug ( e . to String ( ) + System . line Separator ( ) + Stack Trace . get String From Stack Trace ( e ) ) ;", "is Successful Delete = false ; }", "return is Successful Delete ; }"]}
{"ids": "10066", "code": ["public Annotation FS add ( Annotation FS a Origin Fs , Annotation FS a Target Fs , J Cas a J Cas , int a Start , int a End , Annotation Feature a Feature , Object a Label Value ) throws Brat Annotation Exception {", "if ( cross Multiple Sentence || is Same Sentence ( a J Cas , a Origin Fs . get Begin ( ) , a Target Fs . get End ( ) ) ) {", "return interal Add To Cas ( a J Cas , a Start , a End , a Origin Fs , a Target Fs , a Label Value , a Feature ) ; }", "else {", "throw new Arc Crossed Multiple Sentence Exception ( STR_ ) ; } }"]}
{"ids": "68780", "code": ["private String read Line ( ) {", "String Buffer sb = new String Buffer ( ) ;", "while ( buf . remaining ( ) > NUM_ ) {", "char c = ( char ) buf . get ( ) ;", "if ( c == STR_ ) {", "if ( buf . remaining ( ) > NUM_ ) {", "char n = ( char ) buf . get ( buf . position ( ) ) ;", "if ( n == STR_ ) {", "buf . get ( ) ; } }", "break ; }", "else if ( c == STR_ ) {", "break ; }", "sb . append ( c ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "75691", "code": ["@ Override public int show Open Dialog ( Component parent ) {", "File sel File ;", "int result ;", "m Dialog Type = OPEN DIALOG ;", "init GUI ( OPEN DIALOG ) ;", "result = super . show Open Dialog ( parent ) ;", "m Dialog Type = UNHANDLED DIALOG ;", "remove Property Change Listener ( m Listener ) ;", "sel File = get Selected File ( ) ;", "if ( ( result == APPROVE OPTION ) && ( get File Must Exist ( ) ) && ( sel File == null ) ) {", "result = show Open Dialog ( parent ) ; }", "else if ( ( result == APPROVE OPTION ) && ( get File Must Exist ( ) ) && ( sel File != null ) && ( sel File . is File ( ) ) && ( ! sel File . exists ( ) ) ) {", "int ret Val = J Option Pane . show Confirm Dialog ( parent , STR_ + sel File + STR_ ) ;", "if ( ret Val == J Option Pane . OK OPTION ) result = show Open Dialog ( parent ) ;", "else result = CANCEL OPTION ; }", "if ( result == APPROVE OPTION ) {", "if ( get File Filter ( ) instanceof Extension File Filter ) m Last Filter = ( Extension File Filter ) get File Filter ( ) ;", "else m Last Filter = null ;", "if ( get Selected File ( ) != null ) configure Current Handler Hook ( OPEN DIALOG ) ; }", "return result ; }"]}
{"ids": "41723", "code": ["public boolean is Nearly Equal To ( Double Vector v , double tolerance ) {", "return Math . abs ( v . x - x ) < tolerance && Math . abs ( v . y - y ) < tolerance && Math . abs ( v . z - z ) < tolerance ; }"]}
{"ids": "34730", "code": ["void create Vertical Snap Animation ( boolean visible ) {", "float translation Y = visible ? NUM_ : m Total Height ;", "float y Difference = Math . abs ( translation Y - get Translation Y ( ) ) / m Total Height ;", "long duration = ( long ) ( MS ANIMATION DURATION * y Difference ) ;", "create Animation ( NUM_ , NUM_ , translation Y , duration ) ; }"]}
{"ids": "53873", "code": ["@ Override public int update ( byte [ ] input , int input Offset , int input Len , byte [ ] output , int output Offset ) throws Short Buffer Exception {", "return cipher . update ( input , input Offset , input Len , output , output Offset ) ; }"]}
{"ids": "17341", "code": ["private String validate Inputs ( ) {", "if ( jar Radio . get Selection ( ) ) {", "File f = new File ( jar Path . get Text ( ) ) ;", "if ( ! f . exists ( ) ) {", "return STR_ ; }", "if ( ! f . can Read ( ) ) {", "return STR_ ; } }", "else {", "File f = new File ( dir Path . get Text ( ) ) ;", "if ( ! f . exists ( ) ) {", "return STR_ ; }", "if ( ! f . can Read ( ) ) {", "return STR_ ; } }", "return null ; }"]}
{"ids": "1634", "code": ["public static double parse Double String ( String st , T Execution Context context ) {", "double ret = NUM_ ;", "Matcher m = DOUBLE PATTERN . matcher ( st ) ;", "if ( m . looking At ( ) ) {", "String truncated = st . substring ( NUM_ , m . end ( ) ) ;", "if ( ! truncated . equals ( st ) ) {", "context . report Truncate ( st , truncated ) ; }", "try {", "ret = Double . parse Double ( truncated ) ; }", "catch ( Number Format Exception e ) {", "context . report Bad Value ( e . get Message ( ) ) ; } }", "else context . report Bad Value ( st ) ;", "return ret ; }"]}
{"ids": "42702", "code": ["public Class Path ( Dex File ... class Path ) throws IO Exception {", "this ( Lists . new Array List ( class Path ) , NUM_ ) ; }"]}
{"ids": "9476", "code": ["public double great Circle Azimuth ( Location location ) {", "if ( location == null ) {", "throw new Illegal Argument Exception ( Logger . log Message ( Logger . ERROR , STR_ , STR_ , STR_ ) ) ; }", "double lat 1 = Math . to Radians ( this . latitude ) ;", "double lon 1 = Math . to Radians ( this . longitude ) ;", "double lat 2 = Math . to Radians ( location . latitude ) ;", "double lon 2 = Math . to Radians ( location . longitude ) ;", "if ( lat 1 == lat 2 && lon 1 == lon 2 ) {", "return NUM_ ; }", "if ( lon 1 == lon 2 ) {", "return lat 1 > lat 2 ? NUM_ : NUM_ ; }", "double y = Math . cos ( lat 2 ) * Math . sin ( lon 2 - lon 1 ) ;", "double x = Math . cos ( lat 1 ) * Math . sin ( lat 2 ) - Math . sin ( lat 1 ) * Math . cos ( lat 2 ) * Math . cos ( lon 2 - lon 1 ) ;", "double azimuth Radians = Math . atan 2 ( y , x ) ;", "return Double . is Na N ( azimuth Radians ) ? NUM_ : Math . to Degrees ( azimuth Radians ) ; }"]}
{"ids": "38946", "code": ["private boolean [ ] define Irrelevant ( Random random ) {", "boolean [ ] irr = new boolean [ get Num Attributes ( ) ] ;", "for ( int i = NUM_ ; i < irr . length ; i ++ ) {", "irr [ i ] = false ; }", "int num Irr = NUM_ ;", "for ( int i = NUM_ ; ( num Irr < get Num Irrelevant ( ) ) && ( i < get Num Attributes ( ) * NUM_ ) ; i ++ ) {", "int maybe Next = ( int ) ( random . next Double ( ) * irr . length ) ;", "if ( irr [ maybe Next ] == false ) {", "irr [ maybe Next ] = true ;", "num Irr ++ ; } }", "return irr ; }"]}
{"ids": "80425", "code": ["public void add Drop Item ( final String name , final double probability , final int amount ) {", "drops Items . add ( new Drop Item ( name , probability , amount ) ) ; }"]}
{"ids": "46991", "code": ["protected void unparsed Ent Decl ( String name , String pubid , String sysid , String notation ) throws SAX Exception {", "m Hand Dtd . unparsed Entity Decl ( name , pubid , sysid , notation ) ; }"]}
{"ids": "47008", "code": ["public Enumeration < Permission > elements ( ) {", "synchronized ( this ) {", "return Collections . enumeration ( perms Map . values ( ) ) ; } }"]}
{"ids": "34907", "code": ["private static String format List ( String [ ] string List , String list Pattern , String list Composition Pattern ) {", "if ( list Pattern == null || list Composition Pattern == null ) {", "String Builder result = new String Builder ( ) ;", "for ( int i = NUM_ ; i < string List . length ; ++ i ) {", "if ( i > NUM_ ) {", "result . append ( STR_ ) ; }", "result . append ( string List [ i ] ) ; }", "return result . to String ( ) ; }", "if ( string List . length > NUM_ ) {", "Message Format format = new Message Format ( list Composition Pattern ) ;", "string List = compose List ( format , string List ) ; }", "Object [ ] args = new Object [ string List . length + NUM_ ] ;", "System . arraycopy ( string List , NUM_ , args , NUM_ , string List . length ) ;", "args [ NUM_ ] = new Integer ( string List . length ) ;", "Message Format format = new Message Format ( list Pattern ) ;", "return format . format ( args ) ; }"]}
{"ids": "15204", "code": ["public Json Array add ( Object value ) {", "list . add ( value ) ;", "return this ; }"]}
{"ids": "23156", "code": ["public String comment ( ) throws Parse Exception {", "String Buffer retval = new String Buffer ( ) ;", "if ( look Ahead ( NUM_ ) != STR_ ) return null ;", "consume ( NUM_ ) ;", "while ( true ) {", "char next = get Next Char ( ) ;", "if ( next == STR_ ) {", "break ; }", "else if ( next == STR_ ) {", "throw new Parse Exception ( this . buffer + STR_ , this . ptr ) ; }", "else if ( next == STR_ ) {", "retval . append ( next ) ;", "next = get Next Char ( ) ;", "if ( next == STR_ ) throw new Parse Exception ( this . buffer + STR_ , this . ptr ) ;", "retval . append ( next ) ; }", "else {", "retval . append ( next ) ; } }", "return retval . to String ( ) ; }"]}
{"ids": "54820", "code": ["public static boolean ignorable Whitespace ( String value ) {", "Matcher m ;", "m = whitespace Pattern . matcher ( value ) ;", "if ( m . matches ( ) ) return true ;", "else return false ; }"]}
{"ids": "34446", "code": ["public Delphi Workgroup ( File xml File ) throws IO Exception {", "if ( xml File == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "else if ( ! xml File . exists ( ) ) {", "throw new IO Exception ( STR_ + xml File . get Absolute Path ( ) ) ; }", "parse File ( xml File ) ; }"]}
{"ids": "15994", "code": ["public Buffered Block Cipher ( Block Cipher cipher ) {", "this . cipher = cipher ;", "buf = new byte [ cipher . get Block Size ( ) ] ;", "buf Off = NUM_ ;", "String name = cipher . get Algorithm Name ( ) ;", "int idx = name . index Of ( STR_ ) + NUM_ ;", "pgp CFB = ( idx > NUM_ && name . starts With ( STR_ , idx ) ) ;", "if ( pgp CFB || cipher instanceof Stream Cipher ) {", "partial Block Okay = true ; }", "else {", "partial Block Okay = ( idx > NUM_ && ( name . starts With ( STR_ , idx ) ) ) ; } }"]}
{"ids": "86736", "code": ["public static int read Ints ( final File f , final Long Index a , final long offset , final long addend ) throws IO Exception {", "return read Ints ( f , NUM_ , ( int ) f . length ( ) / NUM_ , a , offset , addend ) ; }"]}
{"ids": "22237", "code": ["public void wait All Sites Db Stable ( ) {", "String prefix = STR_ ;", "log . info ( prefix ) ;", "Db Jmx Client geo Instance = get Jmx Client ( LOCALHOST ) ;", "List < URI > vdc Id Iter = query By Type ( Virtual Data Center . class , true ) ;", "for ( URI vdc Id : vdc Id Iter ) {", "log . info ( STR_ , vdc Id . to String ( ) ) ;", "Virtual Data Center vdc = query Object ( Virtual Data Center . class , vdc Id ) ;", "if ( ! should Check Db Status ( vdc ) ) {", "log . error ( STR_ , vdc Id ) ;", "continue ; }", "if ( vdc . get Connection Status ( ) != Connection Status . DISCONNECTED ) {", "Site active Site = dr Util . get Active Site ( vdc . get Short Id ( ) ) ;", "wait Db Nodes Stable ( geo Instance , vdc . get Short Id ( ) , active Site . get Node Count ( ) ) ; } } }"]}
{"ids": "65524", "code": ["public void save Hierarchy State ( Bundle container ) {", "dispatch Save Instance State ( container ) ; }"]}
{"ids": "40588", "code": ["private static void pipe ( Input Stream source , Output Stream dest ) throws IO Exception {", "byte [ ] buf = new byte [ NUM_ ] ;", "int read = NUM_ ;", "while ( ( read = source . read ( buf ) ) >= NUM_ ) {", "if ( null != dest ) dest . write ( buf , NUM_ , read ) ; }", "if ( null != dest ) dest . flush ( ) ; }"]}
{"ids": "43929", "code": ["@ Override public void init ( Filter Config config ) throws Servlet Exception {", "try {", "expiry = Math . min ( Math . max ( MIN EXPIRY , Long . parse Long ( config . get Init Parameter ( CACHE CONTROL ) ) ) , MAX EXPIRY ) ; }", "catch ( Number Format Exception nfe ) {", "LOGGER . warn ( STR_ + CACHE CONTROL + STR_ , nfe ) ;", "expiry = null ; } }"]}
{"ids": "14483", "code": ["@ Override public int hash Code ( ) {", "int code = NUM_ ;", "if ( name != null ) {", "code += name . hash Code ( ) ; }", "if ( application Name != null ) {", "code += application Name . hash Code ( ) ; }", "if ( resource Names != null ) {", "code += resource Names . hash Code ( ) ; }", "if ( action Values != null ) {", "code += action Values . hash Code ( ) ; }", "if ( advices != null ) {", "code += advices . hash Code ( ) ; }", "if ( attributes != null ) {", "code += attributes . hash Code ( ) ; }", "return code ; }"]}
{"ids": "80545", "code": ["public static boolean substract Trading Fee ( Player player , int price ) {", "Big Decimal fee = calculate Fee ( player , price ) ;", "return player . drop ( STR_ , fee . int Value ( ) ) ; }"]}
{"ids": "62029", "code": ["public Complex Parameter ( Math Expression expression ) {", "this . expression = expression ; }"]}
{"ids": "38022", "code": ["@ Override public Enumeration < String > enumerate Measures ( ) {", "Vector < String > new Vector = new Vector < String > ( NUM_ ) ;", "new Vector . add Element ( STR_ ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "9879", "code": ["public Sample Driver ( ) {", "handlers = new Array List < Sample Handler > ( ) ;", "handlers . add ( new Certificate Sample Handler ( ) ) ;", "handlers . add ( new Group Sample Handler ( ) ) ;", "handlers . add ( new Solution User Sample Handler ( ) ) ;", "handlers . add ( new User Sample Handler ( ) ) ; }"]}
{"ids": "85705", "code": ["public long [ ] read Long Array ( final int items , final JBBP Byte Order byte Order ) throws IO Exception {", "int pos = NUM_ ;", "if ( items < NUM_ ) {", "long [ ] buffer = new long [ INITIAL ARRAY BUFFER SIZE ] ;", "while ( has Available Data ( ) ) {", "final long next = read Long ( byte Order ) ;", "if ( buffer . length == pos ) {", "final long [ ] newbuffer = new long [ buffer . length << NUM_ ] ;", "System . arraycopy ( buffer , NUM_ , newbuffer , NUM_ , buffer . length ) ;", "buffer = newbuffer ; }", "buffer [ pos ++ ] = next ; }", "if ( buffer . length == pos ) {", "return buffer ; }", "final long [ ] result = new long [ pos ] ;", "System . arraycopy ( buffer , NUM_ , result , NUM_ , pos ) ;", "return result ; }", "else {", "final long [ ] buffer = new long [ items ] ;", "for ( int i = NUM_ ; i < items ; i ++ ) {", "buffer [ i ] = read Long ( byte Order ) ; }", "return buffer ; } }"]}
{"ids": "24872", "code": ["private void log Graphical Buffer Occupancy ( float buffer Occupancy ) {", "String title = STR_ ;", "int used = ( int ) ( buffer Occupancy * WIDTH ) ;", "String Builder sb = new String Builder ( ) ;", "sb . append ( START END CHAR ) ;", "sb . append ( STR_ ) ;", "sb . append ( title ) ;", "for ( int i = title . length ( ) + NUM_ ; i < WIDTH ; i ++ ) {", "sb . append ( STR_ ) ; }", "sb . append ( START END CHAR ) ;", "log . info ( sb . to String ( ) ) ;", "sb = new String Builder ( ) ;", "sb . append ( START END CHAR ) ;", "for ( int i = NUM_ ; i < used ; i ++ ) {", "sb . append ( STR_ ) ; }", "for ( int j = used ; j < WIDTH ; j ++ ) {", "sb . append ( STR_ ) ; }", "sb . append ( START END CHAR ) ;", "log . info ( sb . to String ( ) ) ;", "sb = new String Builder ( ) ;", "sb . append ( START END CHAR ) ;", "for ( int i = NUM_ ; i < WIDTH ; i ++ ) {", "sb . append ( STR_ ) ; }", "sb . append ( START END CHAR ) ;", "log . info ( sb . to String ( ) ) ; }"]}
{"ids": "79751", "code": ["public boolean is Terminated ( ) {", "return thread Pool . is Terminated ( ) ; }"]}
{"ids": "22163", "code": ["public boolean is Match ( String domain , List < User Mapping Attribute > attributes , List < String > groups ) {", "return domain . equals Ignore Case ( domain ) && attributes Match ( attributes ) && groups Match ( groups ) ; }"]}
{"ids": "83351", "code": ["public static void write Spatial Grid Table ( Spatial Grid grid , String file Name ) {", "log . info ( STR_ + file Name + STR_ ) ;", "Spatial Grid Table Writer sg Table Writer = new Spatial Grid Table Writer ( ) ;", "try {", "sg Table Writer . write ( grid , file Name ) ;", "log . info ( STR_ ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ; } }"]}
{"ids": "976", "code": ["@ Suppress Warnings ( STR_ ) public Output Socket linked Output Socket ( String hint Identifier ) {", "final Output Socket out Socket = output Socket Factory . create ( new Identifer Overriding Socket Hint Decorator ( this , hint Identifier ) ) ;", "controlled Output Sockets . add ( out Socket ) ;", "return out Socket ; }"]}
{"ids": "2927", "code": ["public void cancel ( ) {", "cancelled = true ;", "Thread thread = this . thread ;", "if ( thread != null ) {", "thread . interrupt ( ) ; } }"]}
{"ids": "28531", "code": ["void set Text ( byte [ ] text ) {", "this . text = text ;", "this . props = null ; }"]}
{"ids": "54509", "code": ["private String prepare URL ( ) {", "String str = STR_ ;", "str += STR_ ;", "for ( int i = NUM_ ; i < symbol List . size ( ) ; i ++ ) {", "if ( i != NUM_ ) {", "str += STR_ ; }", "str += symbol List . get ( i ) ; }", "str += STR_ ;", "for ( String format : parameter List ) {", "str += format ; }", "str += STR_ ;", "return str ; }"]}
{"ids": "69076", "code": ["public void initialize ( ) {", "Texture State ts = new Texture State ( ) ;", "ts . set Enabled ( false ) ;", "set Render State ( ts ) ;", "for ( int i = NUM_ ; i < tool List . size ( ) ; ++ i ) {", "Tool State state = tool List . get ( i ) ;", "add Tool ( state , false ) ; }", "z Buffer State = new Z Buffer State ( ) ;", "z Buffer State . set Function ( Z Buffer State . Test Function . Less Than Or Equal To ) ;", "z Buffer State . set Enabled ( true ) ;", "set Render State ( z Buffer State ) ; }"]}
{"ids": "7604", "code": ["private static void init ( ) {", "encoders = new Hash Map ( ) ;", "encoders . put ( STR_ , STR_ ) ;", "encoders . put ( STR_ , STR_ ) ; }"]}
{"ids": "79113", "code": ["public static boolean check Image Size ( final Input Stream stream , final I Configuration conf ) throws IO Exception {", "Buffered Image bi = Image IO . read ( stream ) ;", "stream . close ( ) ;", "if ( bi == null ) {", "return false ; }", "if ( bi . get Height ( ) > conf . get Img Height ( ) || bi . get Width ( ) > conf . get Img Width ( ) ) {", "return false ; }", "return true ; }"]}
{"ids": "52075", "code": ["public double value At ( double x ) {", "return constant * Math . pow ( NUM_ - x * x , outside Exp ) ; }"]}
{"ids": "55597", "code": ["protected double generate Wait Time ( ) {", "if ( state == STATE WALKING ELSEWHERE ) {", "if ( location . equals ( latest Bus Stop ) ) {", "state = STATE WAITING FOR BUS ; } }", "if ( state == STATE TRAVELLING ON BUS ) {", "state = STATE WAITING FOR BUS ; }", "return NUM_ ; }"]}
{"ids": "57715", "code": ["@ Override public Enumeration < URL > find Resources ( final String name ) throws IO Exception {", "if ( name == null ) {", "return null ; }", "Array List < URL > result = new Array List < URL > ( ) ;", "int n = NUM_ ;", "while ( true ) {", "URL Handler handler = get Handler ( n ++ ) ;", "if ( handler == null ) {", "break ; }", "handler . find Resources ( name , result ) ; }", "return Collections . enumeration ( result ) ; }"]}
{"ids": "25269", "code": ["protected void write Graphic Ctrl Ext ( ) throws IO Exception {", "out . write ( NUM_ ) ;", "out . write ( NUM_ ) ;", "out . write ( NUM_ ) ;", "int transp , disp ;", "if ( transparent == null ) {", "transp = NUM_ ;", "disp = NUM_ ; }", "else {", "transp = NUM_ ;", "disp = NUM_ ; }", "if ( dispose >= NUM_ ) {", "disp = dispose & NUM_ ; }", "disp <<= NUM_ ;", "out . write ( NUM_ | disp | NUM_ | transp ) ;", "write Short ( delay ) ;", "out . write ( trans Index ) ;", "out . write ( NUM_ ) ; }"]}
{"ids": "29146", "code": ["public static void write Element List ( XML Output xml Output , String tag Name , Iterable < String > list Values ) throws IO Exception {", "write Element List ( xml Output , tag Name , list Values . iterator ( ) ) ; }"]}
{"ids": "72692", "code": ["public static Date string To Date ( String date As String ) {", "try {", "Date Format df = new Simple Date Format ( date Format ) ;", "df . set Time Zone ( utc ) ;", "return df . parse ( date As String ) ; }", "catch ( Parse Exception e ) {", "return null ; }", "catch ( Null Pointer Exception e ) {", "return null ; } }"]}
{"ids": "29723", "code": ["public Simple Http Request Builder content ( String chars , Charset charset ) {", "return content ( chars . get Bytes ( charset ) ) ; }"]}
{"ids": "53666", "code": ["private double adjust Transform ( ) {", "double x Min = Double . POSITIVE INFINITY ;", "double x Max = Double . NEGATIVE INFINITY ;", "double y Min = Double . POSITIVE INFINITY ;", "double y Max = Double . NEGATIVE INFINITY ;", "for ( Variable var : csp . get Variables ( ) ) {", "Point 2 D point = get Position ( var ) ;", "x Min = Math . min ( x Min , point . get X ( ) ) ;", "x Max = Math . max ( x Max , point . get X ( ) ) ;", "y Min = Math . min ( y Min , point . get Y ( ) ) ;", "y Max = Math . max ( y Max , point . get Y ( ) ) ; }", "double scale = Math . min ( pane . get Width ( ) / ( x Max - x Min + NUM_ ) , pane . get Height ( ) / ( y Max - y Min + NUM_ ) ) ;", "pane . set Translate X ( ( scale * ( pane . get Width ( ) - x Min - x Max ) / NUM_ ) ) ;", "pane . set Translate Y ( ( scale * ( pane . get Height ( ) - y Min - y Max ) / NUM_ ) ) ;", "pane . set Scale X ( scale ) ;", "pane . set Scale Y ( scale ) ;", "return scale ; }"]}
{"ids": "65607", "code": ["public void add Table Model Listener ( W Table Model Listener listener ) {", "if ( listener == null ) {", "return ; }", "if ( ! m listeners . contains ( listener ) ) {", "m listeners . add ( listener ) ; }", "return ; }"]}
{"ids": "61188", "code": ["public boolean can Traverse Outside Subtree ( ) {", "if ( null != m parts ) {", "int n = m parts . size ( ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "AVT Part part = ( AVT Part ) m parts . element At ( i ) ;", "if ( part . can Traverse Outside Subtree ( ) ) return true ; } }", "return false ; }"]}
{"ids": "47515", "code": ["private int [ ] parse YMD ( String string ) {", "string = string . trim ( ) ;", "try {", "if ( string . char At ( NUM_ ) != STR_ || string . char At ( NUM_ ) != STR_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "int [ ] ymd = new int [ NUM_ ] ;", "ymd [ NUM_ ] = Integer . value Of ( string . substring ( NUM_ , NUM_ ) ) ;", "ymd [ NUM_ ] = Integer . value Of ( string . substring ( NUM_ , NUM_ ) ) ;", "ymd [ NUM_ ] = Integer . value Of ( string . substring ( NUM_ , NUM_ ) ) ;", "return ymd ; }", "catch ( Number Format Exception ex ) {", "throw new Illegal Argument Exception ( STR_ , ex ) ; } }"]}
{"ids": "28379", "code": ["public Abstract Point Renderer ( ) {", "shape = new Rectangle 2 D . Double ( - NUM_ , - NUM_ , NUM_ , NUM_ ) ;", "color = new Single Color ( Color . BLACK ) ;", "value Visible = false ;", "value Column = NUM_ ;", "value Location = Location . CENTER ;", "value Alignment X = NUM_ ;", "value Alignment Y = NUM_ ;", "value Rotation = NUM_ ;", "value Distance = NUM_ ;", "value Color = new Single Color ( Color . BLACK ) ;", "value Font = Font . decode ( null ) ;", "error Visible = false ;", "error Column Top = NUM_ ;", "error Column Bottom = NUM_ ;", "error Color = new Single Color ( Color . BLACK ) ;", "error Shape = new Line 2 D . Double ( - NUM_ , NUM_ , NUM_ , NUM_ ) ;", "error Stroke = new Basic Stroke ( NUM_ ) ; }"]}
{"ids": "870", "code": ["public Object put ( String key , Object value ) {", "Object old Value = context . get Attribute ( key , ENGINE SCOPE ) ;", "context . set Attribute ( key , value , ENGINE SCOPE ) ;", "return old Value ; }"]}
{"ids": "51178", "code": ["private void execute Another Request ( ) throws SQL Exception {", "Random random = new Random ( ) ;", "int value = random . next Int ( ) ;", "Prepared Statement prepared Statement = shared Connection . prepare Statement ( STR_ + value ) ;", "Result Set rs = prepared Statement . execute Query ( ) ;", "rs . next ( ) ;", "assert Equals ( value , rs . get Int ( NUM_ ) ) ; }"]}
{"ids": "65858", "code": ["private void stat Init ( ) {", "label Value . set Text ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "field Value . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "field Value . add Action Listener ( this ) ;", "label Name . set Text ( Msg . get Msg ( Env . get Ctx ( ) , STR_ ) ) ;", "field Name . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "field Name . add Action Listener ( this ) ;", "f B Partner ID = new V Lookup ( STR_ , false , false , true , M Lookup Factory . get ( Env . get Ctx ( ) , p Window No , NUM_ , M Column . get Column ID ( I A Asset . Table Name , I A Asset . COLUMNNAME C B Partner ID ) , Display Type . Search ) ) ;", "l B Partner ID . set Label For ( f B Partner ID ) ;", "f B Partner ID . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f B Partner ID . add Action Listener ( this ) ;", "f Product ID = new V Lookup ( STR_ , false , false , true , M Lookup Factory . get ( Env . get Ctx ( ) , p Window No , NUM_ , M Column . get Column ID ( I A Asset . Table Name , I A Asset . COLUMNNAME M Product ID ) , Display Type . Search ) ) ;", "l Product ID . set Label For ( f Product ID ) ;", "f Product ID . set Background ( Adempiere PLAF . get Info Background ( ) ) ;", "f Product ID . add Action Listener ( this ) ;", "p criteria Grid . add ( label Value , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "p criteria Grid . add ( field Value , null ) ;", "p criteria Grid . add ( l B Partner ID , null ) ;", "p criteria Grid . add ( f B Partner ID , null ) ;", "p criteria Grid . add ( label Name , new A Layout Constraint ( NUM_ , NUM_ ) ) ;", "p criteria Grid . add ( field Name , null ) ;", "p criteria Grid . add ( l Product ID , null ) ;", "p criteria Grid . add ( f Product ID , null ) ; }"]}
{"ids": "78733", "code": ["public static int hash ( byte [ ] data , int seed ) {", "return hash ( Byte Buffer . wrap ( data ) , seed ) ; }"]}
{"ids": "84823", "code": ["public int parse ( char c , char [ ] ia , int ip , int il ) {", "assert ( ia [ ip ] == c ) ;", "if ( Surrogate . is High ( c ) ) {", "if ( il - ip < NUM_ ) {", "error = Coder Result . UNDERFLOW ;", "return - NUM_ ; }", "char d = ia [ ip + NUM_ ] ;", "if ( Surrogate . is Low ( d ) ) {", "character = to UCS 4 ( c , d ) ;", "is Pair = true ;", "error = null ;", "return character ; }", "error = Coder Result . malformed For Length ( NUM_ ) ;", "return - NUM_ ; }", "if ( Surrogate . is Low ( c ) ) {", "error = Coder Result . malformed For Length ( NUM_ ) ;", "return - NUM_ ; }", "character = c ;", "is Pair = false ;", "error = null ;", "return character ; }"]}
{"ids": "59919", "code": ["public void perform Start Operation Async ( final String vm Id , final Future Callback < Task > response Callback ) throws IO Exception {", "String path = String . format ( STR_ , get Base Path ( ) , vm Id ) ;", "create Object Async ( path , null , response Callback ) ; }"]}
{"ids": "23255", "code": ["private Rtp Packet parse Rtp Packet ( byte [ ] data ) {", "Rtp Packet packet = new Rtp Packet ( ) ;", "packet . m Length = data . length ;", "packet . m Received At = System . current Time Millis ( ) ;", "packet . extension = ( data [ NUM_ ] & NUM_ ) > NUM_ ;", "if ( ( byte ) ( ( data [ NUM_ ] & NUM_ ) & NUM_ ) == ( byte ) NUM_ ) {", "packet . marker = NUM_ ; }", "else {", "packet . marker = NUM_ ; }", "packet . payload Type = ( byte ) ( ( data [ NUM_ ] & NUM_ ) & NUM_ ) ;", "packet . seqnum = ( char ) ( ( data [ NUM_ ] << NUM_ ) | ( data [ NUM_ ] & NUM_ ) ) ;", "packet . timestamp = ( ( ( data [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( data [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( data [ NUM_ ] & NUM_ ) << NUM_ ) | ( data [ NUM_ ] & NUM_ ) ) ;", "packet . ssrc = ( ( ( data [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( data [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( data [ NUM_ ] & NUM_ ) << NUM_ ) | ( data [ NUM_ ] & NUM_ ) ) ;", "if ( packet . extension ) {", "int data Id = NUM_ ;", "int extension Header Id = ( ( data [ ++ data Id ] & NUM_ ) << NUM_ ) | ( data [ ++ data Id ] & NUM_ ) ;", "int length = ( ( data [ ++ data Id ] & NUM_ ) << NUM_ ) | ( data [ ++ data Id ] & NUM_ ) ;", "if ( extension Header Id == Rtp Extension Header . RTP EXTENSION HEADER ID ) {", "extract Extension Header ( data , length , data Id , packet ) ; }", "packet . payloadoffset = NUM_ + length * NUM_ ; }", "else {", "packet . payloadoffset = NUM_ ; }", "packet . payloadlength = packet . m Length - packet . payloadoffset ;", "packet . m Data = new byte [ packet . payloadlength ] ;", "System . arraycopy ( data , packet . payloadoffset , packet . m Data , NUM_ , packet . payloadlength ) ;", "return packet ; }"]}
{"ids": "66039", "code": ["public String product ( Properties ctx , int Window No , Grid Tab m Tab , Grid Field m Field , Object value ) {", "Integer M Product ID = ( Integer ) value ;", "if ( M Product ID == null || M Product ID . int Value ( ) == NUM_ ) return STR_ ;", "Big Decimal price Actual = null ;", "Timestamp Date Expense = Env . get Context As Date ( ctx , Window No , STR_ ) ;", "if ( Date Expense == null ) Date Expense = new Timestamp ( System . current Time Millis ( ) ) ;", "String sql = null ;", "Prepared Statement pstmt = null ;", "Result Set rs = null ;", "try {", "boolean no Price = true ;", "sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ;", "pstmt = DB . prepare Statement ( sql , null ) ;", "pstmt . set Int ( NUM_ , M Product ID . int Value ( ) ) ;", "pstmt . set Int ( NUM_ , Env . get Context As Int ( ctx , Window No , STR_ ) ) ;", "rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) && no Price ) {", "java . sql . Date pl Date = rs . get Date ( STR_ ) ;", "if ( pl Date == null || ! Date Expense . before ( pl Date ) ) {", "no Price = false ;", "price Actual = rs . get Big Decimal ( STR_ ) ;", "if ( price Actual == null ) price Actual = rs . get Big Decimal ( STR_ ) ;", "if ( price Actual == null ) price Actual = rs . get Big Decimal ( STR_ ) ;", "Integer ii = new Integer ( rs . get Int ( STR_ ) ) ;", "if ( ! rs . was Null ( ) ) m Tab . set Value ( STR_ , ii ) ; } }", "if ( no Price ) {", "sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ;", "DB . close ( rs , pstmt ) ;", "pstmt = DB . prepare Statement ( sql , null ) ;", "pstmt . set Int ( NUM_ , M Product ID . int Value ( ) ) ;", "pstmt . set Int ( NUM_ , Env . get Context As Int ( ctx , Window No , STR_ ) ) ;", "rs = pstmt . execute Query ( ) ;", "while ( rs . next ( ) && no Price ) {", "java . sql . Date pl Date = rs . get Date ( STR_ ) ;", "if ( pl Date == null || ! Date Expense . before ( pl Date ) ) {", "no Price = false ;", "price Actual = rs . get Big Decimal ( STR_ ) ;", "if ( price Actual == null ) price Actual = rs . get Big Decimal ( STR_ ) ;", "if ( price Actual == null ) price Actual = rs . get Big Decimal ( STR_ ) ;", "Integer ii = new Integer ( rs . get Int ( STR_ ) ) ;", "if ( ! rs . was Null ( ) ) m Tab . set Value ( STR_ , ii ) ; } } } }", "catch ( SQL Exception e ) {", "log . log ( Level . SEVERE , sql , e ) ;", "return e . get Localized Message ( ) ; }", "finally {", "DB . close ( rs , pstmt ) ;", "rs = null ;", "pstmt = null ; }", "if ( price Actual == null ) price Actual = Env . ZERO ;", "m Tab . set Value ( STR_ , price Actual ) ;", "return STR_ ; }"]}
{"ids": "2365", "code": ["public boolean this Device Speaks To ( Bluetooth Device other ) throws No Such Algorithm Exception , Unsupported Encoding Exception {", "if ( Murmur Service . USE BACKOFF ) return true ;", "if ( other == null ) {", "log . info ( STR_ ) ;", "return false ; }", "String other Addr = other . get Address ( ) ;", "if ( other Addr == null ) {", "log . info ( STR_ + other + STR_ ) ;", "return false ; }", "String my Addr = m Bluetooth Speaker . get Address ( ) ;", "if ( my Addr . equals ( which Initiates ( my Addr , other Addr ) ) ) {", "return true ; }", "else {", "return false ; } }"]}
{"ids": "20493", "code": ["public static < K , V > List < Key Value < K , V > > wait Until Min Key Value Records Received ( Properties consumer Config , String topic , int expected Num Records , long wait Time ) throws Interrupted Exception {", "List < Key Value < K , V > > accum Data = new Array List < > ( ) ;", "long start Time = System . current Time Millis ( ) ;", "while ( true ) {", "List < Key Value < K , V > > read Data = read Key Values ( topic , consumer Config ) ;", "accum Data . add All ( read Data ) ;", "if ( accum Data . size ( ) >= expected Num Records ) return accum Data ;", "if ( System . current Time Millis ( ) > start Time + wait Time ) throw new Assertion Error ( STR_ + expected Num Records + STR_ + accum Data . size ( ) + STR_ + wait Time + STR_ ) ;", "Thread . sleep ( Math . min ( wait Time , NUM_ ) ) ; } }"]}
{"ids": "33448", "code": ["public static < T > Combined Download Task < T > single ( Download Task < T > task ) {", "Objects . require Non Null ( task ) ;", "return new Single Combined Task < T > ( task ) ; }"]}
{"ids": "37467", "code": ["public void add Hex Listener ( final I Hex Panel Listener listener ) {", "Preconditions . check Not Null ( listener , STR_ ) ;", "if ( ! m listeners . contains ( listener ) ) {", "m listeners . add ( listener ) ; } }"]}
{"ids": "10823", "code": ["public static < T extends Serializable Entity > Deserializer roundtrip Serializable Entity With Binary Serializer ( final T original Entity , final Account Lookup account Lookup ) {", "final Binary Serializer binary Serializer = new Binary Serializer ( ) ;", "original Entity . serialize ( binary Serializer ) ;", "return new Binary Deserializer ( binary Serializer . get Bytes ( ) , new Deserialization Context ( account Lookup ) ) ; }"]}
{"ids": "67751", "code": ["@ Deprecated public static String encode ( final String s , final String encoding , Bit Set safe Octets , boolean plus For Space ) throws Unsupported Encoding Exception {", "String Builder out = new String Builder ( s . length ( ) * NUM_ ) ;", "boolean needs Encoding ;", "try {", "needs Encoding = encode ( s , encoding , safe Octets , plus For Space , out ) ; }", "catch ( Unsupported Encoding Exception e ) {", "throw e ; }", "catch ( IO Exception e ) {", "throw new Assertion Error ( e ) ; }", "if ( needs Encoding ) {", "return out . to String ( ) ; }", "else {", "return s ; } }"]}
{"ids": "73291", "code": ["public static void fire Clipboard Changed ( ) {", "for ( Iterator i = listener List . iterator ( ) ; i . has Next ( ) ; ) {", "Clipboard Listener listener = ( Clipboard Listener ) i . next ( ) ;", "listener . clipboard Changed ( ) ; } }"]}
{"ids": "7345", "code": ["public boolean is Empty ( ) {", "return window . is Empty ( ) ; }"]}
{"ids": "29175", "code": ["public boolean contains ( T listener ) {", "if ( m Listeners != null ) {", "return m Listeners . contains ( listener ) ; }", "else {", "return false ; } }"]}
{"ids": "43298", "code": ["public Simple Dictionary ( String ... a Words ) {", "words = new Hash Set < String > ( ) ;", "for ( String word : a Words ) {", "words . add ( word . to Lower Case ( ) ) ; } }"]}
{"ids": "71053", "code": ["public long read Long LE ( ) throws IO Exception {", "input Stream . read Fully ( work Space , NUM_ , NUM_ ) ;", "return ( ( long ) ( work Space [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( long ) ( work Space [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( long ) ( work Space [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( long ) ( work Space [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( long ) ( work Space [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( long ) ( work Space [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( long ) ( work Space [ NUM_ ] & NUM_ ) << NUM_ ) | ( ( long ) ( work Space [ NUM_ ] & NUM_ ) ) ; }"]}
{"ids": "8798", "code": ["@ Layoutlib Delegate static long elapsed Realtime ( ) {", "return System . current Time Millis ( ) - s Boot Time ; }"]}
{"ids": "3339", "code": ["@ Override public void fill Assigned Keys ( Set < String > keys ) {", "keys . add ( key Column . name ( ) ) ; }"]}
{"ids": "38808", "code": ["@ Override public void remove Instance Listener ( Instance Listener dsl ) {", "m instance Listeners . remove ( dsl ) ; }"]}
{"ids": "59753", "code": ["public double eccentricity ( ) {", "return Math . sqrt ( NUM_ - ( semi Minor Axis ( ) * semi Minor Axis ( ) ) / ( semi Major Axis ( ) * semi Major Axis ( ) ) ) ; }"]}
{"ids": "35351", "code": ["private void simple Apply ( I Document document , String string , Configurable Completion Proposal proposal ) throws Bad Location Exception {", "proposal . set Cursor Position ( string . length ( ) ) ;", "document . replace ( proposal . get Replacement Offset ( ) , proposal . get Replacement Length ( ) , string ) ; }"]}
{"ids": "34332", "code": ["public String pull Dump 2 PC ( ) {", "String serial = device . get Serial Number ( ) ;", "File dest = new File ( File Utils . get Temp Directory ( ) , serial + STR_ ) ;", "String path = dest . get Path ( ) ;", "log . debug ( STR_ , path ) ;", "Command Line commandpull = adb Command ( STR_ , STR_ , path ) ;", "String out = execute Command Quietly ( commandpull ) ;", "log . debug ( STR_ , out ) ;", "return path ; }"]}
{"ids": "49536", "code": ["public void init ( ) {", "pub Panel . set Layout ( new Border Layout ( ) ) ;", "topic = new J Combo Box ( ) ;", "topic . set Editable ( true ) ;", "topic . set Maximum Size ( MQTT Frame . TEXT FIELD DIMENSION ) ;", "topic . set Maximum Row Count ( NUM_ ) ;", "qos List = new J Combo Box ( qos ) ;", "qos List . set Selected Index ( NUM_ ) ;", "qos List . set Maximum Size ( MQTT Frame . DROP DOWN DIMENSION ) ;", "pub Data = new J Text Area ( NUM_ , NUM_ ) ;", "pub Data . set Border ( new Bevel Border ( Bevel Border . LOWERED ) ) ;", "pub Data . set Margin ( MQTT Frame . TEXT MARGINS ) ;", "retained = new J Check Box ( ) ;", "retained . set Selected ( false ) ;", "pub Label = new J Label ( PANEL TITLE + STR_ ) ;", "Font f = pub Label . get Font ( ) ;", "pub Label . set Font ( new Font ( f . get Name ( ) , Font . BOLD , f . get Size ( ) + NUM_ ) ) ;", "J Panel topic Box = new J Panel ( ) ;", "topic Box . set Layout ( new Box Layout ( topic Box , Box Layout . X AXIS ) ) ;", "topic Box . add ( new J Label ( STR_ ) ) ;", "topic Box . add ( topic ) ;", "topic Box . add ( new J Label ( STR_ ) ) ;", "topic Box . add ( qos List ) ;", "topic Box . add ( new J Label ( STR_ ) ) ;", "topic Box . add ( retained ) ;", "J Panel title And Topic = new J Panel ( ) ;", "title And Topic . set Layout ( new Grid Layout ( NUM_ , NUM_ ) ) ;", "title And Topic . add ( pub Label ) ;", "title And Topic . add ( topic Box ) ;", "hex Display = false ;", "hex Button = new J Button ( STR_ ) ;", "hex Button . add Action Listener ( this ) ;", "file Button = new J Button ( STR_ ) ;", "file Button . set Enabled ( true ) ;", "file Button . add Action Listener ( this ) ;", "pub Button = new J Button ( STR_ ) ;", "pub Button . set Enabled ( false ) ;", "pub Button . add Action Listener ( this ) ;", "J Panel buttons = new J Panel ( ) ;", "buttons . set Layout ( new Grid Layout ( NUM_ , NUM_ ) ) ;", "buttons . add ( pub Button ) ;", "buttons . add ( file Button ) ;", "buttons . add ( hex Button ) ;", "J Panel button Layout = new J Panel ( ) ;", "button Layout . add ( buttons ) ;", "pub Panel . add ( title And Topic , Border Layout . NORTH ) ;", "pub Panel . add ( new J Scroll Pane ( pub Data ) , Border Layout . CENTER ) ;", "pub Panel . add ( button Layout , Border Layout . EAST ) ; }"]}
{"ids": "56806", "code": ["public void validate Emr Cluster Definition Key ( Emr Cluster Definition Key key ) throws Illegal Argument Exception {", "Assert . not Null ( key , STR_ ) ;", "key . set Namespace ( alternate Key Helper . validate String Parameter ( STR_ , key . get Namespace ( ) ) ) ;", "key . set Emr Cluster Definition Name ( alternate Key Helper . validate String Parameter ( STR_ , STR_ , key . get Emr Cluster Definition Name ( ) ) ) ; }"]}
{"ids": "33469", "code": ["@ Target Api ( VERSION CODES . KITKAT ) private void handle Sms Received ( Intent intent ) {", "if ( Build Config . DEBUG ) Log . v ( STR_ ) ;", "Bundle bundle = intent . get Extras ( ) ;", "if ( bundle != null ) {", "Sms Message [ ] messages = null ;", "if ( Sms Popup Utils . has Kit Kat ( ) ) {", "messages = Intents . get Messages From Intent ( intent ) ; }", "else {", "messages = Sms Popup Utils . get Messages From Intent ( intent ) ; }", "if ( messages != null ) {", "notify Message Received ( new Sms Mms Message ( context , messages , System . current Time Millis ( ) ) ) ; } } }"]}
{"ids": "34703", "code": ["public static long install Age ( long current Timestamp , long install Timestamp , boolean send Install Event ) {", "if ( send Install Event ) {", "return INSTALL AGE IMMEDIATELY AFTER INSTALLING ; }", "else {", "return Math . max ( NUM_ , ( current Timestamp - install Timestamp ) / MS PER DAY ) ; } }"]}
{"ids": "21805", "code": ["public boolean is Distributed ( ) {", "return ! is Local ( ) ; }"]}
{"ids": "84983", "code": ["private boolean zz Refill ( ) throws java . io . IO Exception {", "if ( zz Start Read > NUM_ ) {", "System . arraycopy ( zz Buffer , zz Start Read , zz Buffer , NUM_ , zz End Read - zz Start Read ) ;", "zz End Read -= zz Start Read ;", "zz Current Pos -= zz Start Read ;", "zz Marked Pos -= zz Start Read ;", "zz Start Read = NUM_ ; }", "if ( zz Current Pos >= zz Buffer . length ) {", "char new Buffer [ ] = new char [ zz Current Pos * NUM_ ] ;", "System . arraycopy ( zz Buffer , NUM_ , new Buffer , NUM_ , zz Buffer . length ) ;", "zz Buffer = new Buffer ; }", "int num Read = zz Reader . read ( zz Buffer , zz End Read , zz Buffer . length - zz End Read ) ;", "if ( num Read > NUM_ ) {", "zz End Read += num Read ;", "return false ; }", "if ( num Read == NUM_ ) {", "int c = zz Reader . read ( ) ;", "if ( c == - NUM_ ) {", "return true ; }", "else {", "zz Buffer [ zz End Read ++ ] = ( char ) c ;", "return false ; } }", "return true ; }"]}
{"ids": "47762", "code": ["public synchronized boolean is Consumer ( Image Consumer ic ) {", "return the Consumers . contains ( ic ) ; }"]}
{"ids": "78651", "code": ["public static boolean verify Signature ( Signature initialized Signature Engine , byte [ ] message , byte [ ] signature ) throws Signature Exception {", "initialized Signature Engine . update ( message ) ;", "return initialized Signature Engine . verify ( signature ) ; }"]}
{"ids": "63224", "code": ["public static void write Var Int ( Output Stream out , int x ) throws IO Exception {", "while ( ( x & ~ NUM_ ) != NUM_ ) {", "out . write ( ( byte ) ( NUM_ | ( x & NUM_ ) ) ) ;", "x >>>= NUM_ ; }", "out . write ( ( byte ) x ) ; }"]}
{"ids": "49086", "code": ["public Segment Path complete ( End Type etype ) {", "Segment Path result ;", "if ( data == null || w < NUM_ ) {", "return null ; }", "if ( w == data . length ) {", "result = new Segment Path ( data , etype ) ;", "reset ( NUM_ ) ; }", "else {", "double [ ] data To Adopt = new double [ w ] ;", "System . arraycopy ( data , NUM_ , data To Adopt , NUM_ , w ) ;", "result = new Segment Path ( data To Adopt , etype ) ;", "reset ( NUM_ ) ; }", "return result ; }"]}
{"ids": "81065", "code": ["@ Nullable public Bitmap crop Image ( ) {", "Bitmap view Bitmap = get View Bitmap ( ) ;", "if ( view Bitmap == null || view Bitmap . is Recycled ( ) ) {", "return null ; }", "cancel All Animations ( ) ;", "set Image To Wrap Crop Bounds ( false ) ;", "Rect F current Image Rect = Rect Utils . trap To Rect ( m Current Image Corners ) ;", "if ( current Image Rect . is Empty ( ) ) {", "return null ; }", "float current Scale = get Current Scale ( ) ;", "float current Angle = get Current Angle ( ) ;", "if ( m Max Result Image Size X > NUM_ && m Max Result Image Size Y > NUM_ ) {", "float crop Width = m Crop Rect . width ( ) / current Scale ;", "float crop Height = m Crop Rect . height ( ) / current Scale ;", "if ( crop Width > m Max Result Image Size X || crop Height > m Max Result Image Size Y ) {", "float scale X = m Max Result Image Size X / crop Width ;", "float scale Y = m Max Result Image Size Y / crop Height ;", "float resize Scale = Math . min ( scale X , scale Y ) ;", "Bitmap resized Bitmap = Bitmap . create Scaled Bitmap ( view Bitmap , ( int ) ( view Bitmap . get Width ( ) * resize Scale ) , ( int ) ( view Bitmap . get Height ( ) * resize Scale ) , false ) ;", "if ( view Bitmap != resized Bitmap ) {", "view Bitmap . recycle ( ) ; }", "view Bitmap = resized Bitmap ;", "current Scale /= resize Scale ; } }", "if ( current Angle != NUM_ ) {", "m Temp Matrix . reset ( ) ;", "m Temp Matrix . set Rotate ( current Angle , view Bitmap . get Width ( ) / NUM_ , view Bitmap . get Height ( ) / NUM_ ) ;", "Bitmap rotated Bitmap = Bitmap . create Bitmap ( view Bitmap , NUM_ , NUM_ , view Bitmap . get Width ( ) , view Bitmap . get Height ( ) , m Temp Matrix , true ) ;", "if ( view Bitmap != rotated Bitmap ) {", "view Bitmap . recycle ( ) ; }", "view Bitmap = rotated Bitmap ; }", "int top = ( int ) ( ( m Crop Rect . top - current Image Rect . top ) / current Scale ) ;", "int left = ( int ) ( ( m Crop Rect . left - current Image Rect . left ) / current Scale ) ;", "int width = ( int ) ( m Crop Rect . width ( ) / current Scale ) ;", "int height = ( int ) ( m Crop Rect . height ( ) / current Scale ) ;", "return Bitmap . create Bitmap ( view Bitmap , left , top , width , height ) ; }"]}
{"ids": "4545", "code": ["@ Deprecated public static Bundle parse Url ( String url ) {", "url = url . replace ( STR_ , STR_ ) ;", "try {", "URL u = new URL ( url ) ;", "Bundle b = decode Url ( u . get Query ( ) ) ;", "b . put All ( decode Url ( u . get Ref ( ) ) ) ;", "return b ; }", "catch ( Malformed URL Exception e ) {", "return new Bundle ( ) ; } }"]}
{"ids": "83939", "code": ["private static void create Tmp File ( Completable Future < New File > file Creation , Path dest Dir , List < TS Data > files ) {", "LOG . log ( Level . FINE , STR_ ) ;", "try {", "Collections . sort ( files , Comparator . comparing ( null ) ) ;", "final File Channel fd = File Util . create Temp File ( dest Dir , STR_ , STR_ ) ;", "try {", "final Date Time begin ;", "try ( To Xdr Tables output = new To Xdr Tables ( fd , Compression . DEFAULT OPTIMIZED ) ) {", "while ( ! files . is Empty ( ) ) {", "TS Data tsdata = files . remove ( NUM_ ) ;", "if ( file Creation . is Cancelled ( ) ) throw new IO Exception ( STR_ ) ;", "output . add All ( tsdata ) ; }", "begin = new Date Time ( output . get Hdr Begin ( ) , Date Time Zone . UTC ) ;", "if ( file Creation . is Cancelled ( ) ) throw new IO Exception ( STR_ ) ; }", "if ( file Creation . is Cancelled ( ) ) throw new IO Exception ( STR_ ) ;", "INSTALL POOL . execute ( null ) ; }", "catch ( Error | Runtime Exception | IO Exception ex ) {", "try {", "fd . close ( ) ; }", "catch ( Error | Runtime Exception | IO Exception ex 1 ) {", "ex . add Suppressed ( ex 1 ) ; }", "throw ex ; } }", "catch ( Error | Runtime Exception | IO Exception ex ) {", "LOG . log ( Level . WARNING , STR_ , ex ) ;", "synchronized ( OUTSTANDING ) {", "OUTSTANDING . remove ( file Creation ) ; }", "file Creation . complete Exceptionally ( ex ) ; } }"]}
{"ids": "63854", "code": ["public void content Tag ( String tag , String name , String value , String content ) {", "spacing ( ) ;", "m out . print ( STR_ ) ;", "m out . print ( tag ) ;", "m out . print ( STR_ ) ;", "m out . print ( name ) ;", "m out . print ( STR_ ) ;", "m out . print ( STR_ ) ;", "escape String ( value ) ;", "m out . print ( STR_ ) ;", "m out . print ( STR_ ) ;", "escape String ( content ) ;", "m out . print ( STR_ ) ;", "m out . print ( STR_ ) ;", "m out . print ( tag ) ;", "m out . print ( STR_ ) ;", "println ( ) ; }"]}
{"ids": "24931", "code": ["public void add Child ( Component child ) {", "components . add ( child ) ;", "child . set Parent ( this ) ; }"]}
{"ids": "12017", "code": ["public void add Message Listener ( I Message Listener listener ) {", "listeners . add ( listener ) ; }"]}
{"ids": "21145", "code": ["protected void sync Flush Vdc Config To Local ( ) throws Exception {", "if ( vdc Prop Barrier == null ) {", "vdc Prop Barrier = new Vdc Property Barrier ( target Site Info , VDC OP BARRIER TIMEOUT ) ; }", "vdc Prop Barrier . enter ( ) ;", "try {", "flush Vdc Config To Local ( ) ; }", "finally {", "boolean all Left = vdc Prop Barrier . leave ( ) ;", "if ( ! all Left ) {", "log . info ( STR_ ) ;", "Thread . sleep ( IPSEC RESTART DELAY ) ; } }", "vdc Prop Barrier = null ; }"]}
{"ids": "77157", "code": ["public Corrupt Index Exception ( String message , Data Input input , Throwable cause ) {", "this ( message , Objects . to String ( input ) , cause ) ; }"]}
{"ids": "57141", "code": ["protected void remove From Quarantine Queue ( Node Port Tuple npt ) {", "while ( quarantine Queue . remove ( npt ) ) ; }"]}
{"ids": "47583", "code": ["public boolean has Expired ( ) {", "if ( max Age == NUM_ ) return true ;", "if ( max Age == MAX AGE UNSPECIFIED ) return false ;", "long delta Second = ( System . current Time Millis ( ) - when Created ) / NUM_ ;", "if ( delta Second > max Age ) return true ;", "else return false ; }"]}
{"ids": "85043", "code": ["public static String repeat Character ( char c , int repetitions ) {", "String Builder s = new String Builder ( repetitions ) ;", "for ( int i = NUM_ ; i < repetitions ; i ++ ) {", "s . append ( c ) ; }", "return s . to String ( ) ; }"]}
{"ids": "50018", "code": ["public static String check And Replace Literals ( String inst Str ) {", "String tmp = inst Str ;", "if ( tmp . contains ( COMPONENTS DELIM ) ) {", "tmp = tmp . replace All ( COMPONENTS DELIM , STR_ ) ;", "LOG . warn ( STR_ + COMPONENTS DELIM + STR_ ) ; }", "if ( tmp . contains ( ELEMENT DELIM ) ) {", "tmp = tmp . replace All ( ELEMENT DELIM , STR_ ) ;", "LOG . warn ( STR_ + ELEMENT DELIM + STR_ ) ; }", "if ( tmp . contains ( LEVELIN ) ) {", "tmp = tmp . replace All ( LEVELIN , STR_ ) ;", "LOG . warn ( STR_ + LEVELIN + STR_ ) ; }", "if ( tmp . contains ( LEVELOUT ) ) {", "tmp = tmp . replace All ( LEVELOUT , STR_ ) ;", "LOG . warn ( STR_ + LEVELOUT + STR_ ) ; }", "if ( tmp . contains ( PARFOR CDATA END ) ) {", "tmp = tmp . replace All ( PARFOR CDATA END , STR_ ) ;", "LOG . warn ( STR_ + PARFOR CDATA END + STR_ ) ; }", "return tmp ; }"]}
{"ids": "81270", "code": ["public final static char [ ] [ ] split Type Levels Signature ( String type Signature ) {", "char [ ] source = Signature . remove Capture ( type Signature . to Char Array ( ) ) ;", "Char Operation . replace ( source , STR_ , STR_ ) ;", "char [ ] [ ] signatures = new char [ NUM_ ] [ ] ;", "int signatures Count = NUM_ ;", "int param Opening = NUM_ ;", "for ( int idx = NUM_ , ln = source . length ; idx < ln ; idx ++ ) {", "switch ( source [ idx ] ) {", "case STR_ :", "param Opening -- ;", "if ( param Opening == NUM_ ) {", "if ( signatures Count == signatures . length ) {", "System . arraycopy ( signatures , NUM_ , signatures = new char [ signatures Count + NUM_ ] [ ] , NUM_ , signatures Count ) ; } }", "break ;", "case STR_ :", "param Opening ++ ;", "break ;", "case STR_ :", "if ( param Opening == NUM_ ) {", "if ( signatures Count == signatures . length ) {", "System . arraycopy ( signatures , NUM_ , signatures = new char [ signatures Count + NUM_ ] [ ] , NUM_ , signatures Count ) ; }", "signatures [ signatures Count ] = new char [ idx + NUM_ ] ;", "System . arraycopy ( source , NUM_ , signatures [ signatures Count ] , NUM_ , idx ) ;", "signatures [ signatures Count ] [ idx ] = Signature . C SEMICOLON ;", "signatures Count ++ ; }", "break ;", "case STR_ :", "source [ idx ] = STR_ ;", "break ; } }", "char [ ] [ ] type Signatures = new char [ signatures Count + NUM_ ] [ ] ;", "type Signatures [ NUM_ ] = source ;", "for ( int i = NUM_ , j = signatures Count - NUM_ ; i <= signatures Count ; i ++ , j -- ) {", "type Signatures [ i ] = signatures [ j ] ; }", "return type Signatures ; }"]}
{"ids": "8172", "code": ["public static < T > T with Writer ( Writer writer , @ Closure Params ( First Param . class ) Closure < T > closure ) throws IO Exception {", "try {", "T result = closure . call ( writer ) ;", "try {", "writer . flush ( ) ; }", "catch ( IO Exception e ) { }", "Writer temp = writer ;", "writer = null ;", "temp . close ( ) ;", "return result ; }", "finally {", "close With Warning ( writer ) ; } }"]}
{"ids": "1995", "code": ["public static int round ( double value ) {", "int rounded Value = value > NUM_ ? ( int ) ( value + NUM_ ) : - ( int ) ( Math . abs ( value ) + NUM_ ) ;", "return rounded Value ; }"]}
{"ids": "30947", "code": ["private Service Registrar [ ] build Service Registrar ( ) {", "int k = NUM_ ;", "Service Registrar [ ] proxys = new Service Registrar [ discovered Locators . size ( ) ] ;", "Iterator iter = discovered Locators . iterator ( ) ;", "while ( iter . has Next ( ) ) {", "Locator Reg reg = ( Locator Reg ) iter . next ( ) ;", "proxys [ k ++ ] = reg . proxy ; }", "return proxys ; }"]}
{"ids": "5110", "code": ["private static char [ ] zz Unpack C Map ( String packed ) {", "char [ ] map = new char [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < NUM_ ) {", "int count = packed . char At ( i ++ ) ;", "char value = packed . char At ( i ++ ) ;", "do map [ j ++ ] = value ;", "while ( -- count > NUM_ ) ; }", "return map ; }"]}
{"ids": "31123", "code": ["private static Permission [ ] flatten ( Permission [ ] pa ) {", "List l = new Array List ( pa . length ) ;", "for ( int i = NUM_ ; i < pa . length ; i ++ ) {", "Permission p = pa [ i ] ;", "if ( p instanceof Grant Permission ) {", "l . add All ( Arrays . as List ( ( ( Grant Permission ) p ) . grants ) ) ; }", "else {", "l . add ( p ) ; } }", "return ( Permission [ ] ) l . to Array ( new Permission [ l . size ( ) ] ) ; }"]}
{"ids": "18213", "code": ["protected void start Document Internal ( ) throws SAX Exception {", "if ( m need To Call Start Document ) {", "super . start Document Internal ( ) ;", "m sax Handler . start Document ( ) ;", "m need To Call Start Document = false ; } }"]}
{"ids": "41045", "code": ["String descriptor ( boolean include This ) {", "String Builder result = new String Builder ( ) ;", "result . append ( STR_ ) ;", "if ( include This ) {", "result . append ( declaring Type . name ) ; }", "for ( Type Id t : parameters . types ) {", "result . append ( t . name ) ; }", "result . append ( STR_ ) ;", "result . append ( return Type . name ) ;", "return result . to String ( ) ; }"]}
{"ids": "81464", "code": ["public final static boolean is Potential Zip Archive ( String name ) {", "int last Dot = name . last Index Of ( STR_ ) ;", "if ( last Dot == - NUM_ ) {", "return false ; }", "if ( name . last Index Of ( File . separator Char ) > last Dot ) {", "return false ; }", "int length = name . length ( ) ;", "int extension Length = length - last Dot - NUM_ ;", "if ( extension Length == EXTENSION java . length ( ) ) {", "for ( int i = extension Length - NUM_ ; i >= NUM_ ; i -- ) {", "if ( Character . to Lower Case ( name . char At ( length - extension Length + i ) ) != EXTENSION java . char At ( i ) ) {", "break ; }", "if ( i == NUM_ ) {", "return false ; } } }", "if ( extension Length == EXTENSION class . length ( ) ) {", "for ( int i = extension Length - NUM_ ; i >= NUM_ ; i -- ) {", "if ( Character . to Lower Case ( name . char At ( length - extension Length + i ) ) != EXTENSION class . char At ( i ) ) {", "return true ; } }", "return false ; }", "return true ; }"]}
{"ids": "21097", "code": ["void add Term ( Map Builder Term Type type , J Class jclass , String alias ) {", "Map Builder Term new Term = new Map Builder Term ( ) ;", "new Term . type = type ;", "new Term . jclass = jclass ;", "new Term . alias = alias ;", "terms . add ( new Term ) ; }"]}
{"ids": "61072", "code": ["public Collection engine Generate Certificates ( Input Stream in Stream ) throws Certificate Exception {", "java . security . cert . Certificate cert ;", "List certs = new Array List ( ) ;", "while ( ( cert = engine Generate Certificate ( in Stream ) ) != null ) {", "certs . add ( cert ) ; }", "return certs ; }"]}
{"ids": "44082", "code": ["@ Suppress Warnings ( STR_ ) protected void write Path ( Shape s ) {", "Path Iterator segments = s . get Path Iterator ( null ) ;", "double [ ] coords = new double [ NUM_ ] ;", "for ( int i = NUM_ ; ! segments . is Done ( ) ; i ++ , segments . next ( ) ) {", "if ( i > NUM_ ) {", "write ( STR_ ) ; }", "int segment Type = segments . current Segment ( coords ) ;", "switch ( segment Type ) {", "case Path Iterator . SEG MOVETO :", "write ( STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] ) ;", "break ;", "case Path Iterator . SEG LINETO :", "write ( STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] ) ;", "break ;", "case Path Iterator . SEG CUBICTO :", "write ( STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] ) ;", "break ;", "case Path Iterator . SEG QUADTO :", "write ( STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] , STR_ , coords [ NUM_ ] ) ;", "break ;", "case Path Iterator . SEG CLOSE :", "write ( STR_ ) ;", "break ;", "default :", "throw new Illegal State Exception ( STR_ ) ; } } }"]}
{"ids": "85724", "code": ["public static void check Argument ( boolean expression , Object error Message ) {", "if ( ! expression ) {", "throw new Illegal Argument Exception ( String . value Of ( error Message ) ) ; } }"]}
{"ids": "60798", "code": ["private final boolean park And Check Interrupt ( ) {", "Lock Support . park ( this ) ;", "return Thread . interrupted ( ) ; }"]}
{"ids": "3621", "code": ["@ Override public int port Remote ( ) {", "if ( channel != null ) {", "try {", "Socket Address addr = channel . get Remote Address ( ) ;", "return NUM_ ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "return NUM_ ; } }", "else return NUM_ ; }"]}
{"ids": "77826", "code": ["public void add Drop Target ( Drop Target target ) {", "m Drop Targets . add ( target ) ; }"]}
{"ids": "30306", "code": ["@ Override public void start Element ( final String namespace URI , final String local Name , final String q Name , final Attributes atts ) throws SAX Exception {", "Object object To Load = null ;", "if ( open Nodes . size ( ) == NUM_ ) object To Load = root Object ;", "else object To Load = create Child ( q Name , atts ) ;", "if ( object To Load != null ) {", "if ( atts . get Index ( STR_ ) < NUM_ ) Object Get Setter . set ( object To Load , STR_ , q Name ) ;", "Object Get Setter . set All ( object To Load , atts ) ; }", "open Nodes . push ( new Stacked Object ( object To Load ) ) ; }"]}
{"ids": "84166", "code": ["public final int put ( Object key , int value , boolean is Replace ) {", "int prime = prime ;", "int hash = Math . abs ( System . identity Hash Code ( key ) % prime ) ;", "Object [ ] keys = keys ;", "while ( true ) {", "Object test Key = keys [ hash ] ;", "if ( test Key == null ) {", "keys [ hash ] = key ;", "values [ hash ] = value ;", "size ++ ;", "if ( keys . length <= NUM_ * size ) resize ( NUM_ * keys . length ) ;", "return value ; }", "else if ( key != test Key ) {", "hash = ( hash + NUM_ ) % prime ;", "continue ; }", "else if ( is Replace ) {", "int old = values [ hash ] ;", "values [ hash ] = value ;", "return old ; }", "else {", "return values [ hash ] ; } } }"]}
{"ids": "63769", "code": ["public int add All Absent ( Collection c ) {", "int num New = c . size ( ) ;", "if ( num New == NUM_ ) return NUM_ ;", "synchronized ( this ) {", "Object [ ] elements = get Array ( ) ;", "int len = elements . length ;", "Object [ ] temp = new Object [ num New ] ;", "int added = NUM_ ;", "for ( Iterator itr = c . iterator ( ) ; itr . has Next ( ) ; ) {", "Object e = itr . next ( ) ;", "if ( index Of ( e , elements , NUM_ , len ) < NUM_ && index Of ( e , temp , NUM_ , added ) < NUM_ ) temp [ added ++ ] = e ; }", "if ( added != NUM_ ) {", "Object [ ] new Elements = new Object [ len + added ] ;", "System . arraycopy ( elements , NUM_ , new Elements , NUM_ , len ) ;", "System . arraycopy ( temp , NUM_ , new Elements , len , added ) ;", "set Array ( new Elements ) ; }", "return added ; } }"]}
{"ids": "35987", "code": ["protected static void register Library ( I Library Manager external Library Manager , String dataverse , String library Name ) throws Exception {", "Class Loader class Loader = get Library Class Loader ( dataverse , library Name ) ;", "external Library Manager . register Library Class Loader ( dataverse , library Name , class Loader ) ; }"]}
{"ids": "15668", "code": ["public static String raw MD 5 ( String s ) {", "return binl 2 rstr ( binl 2 md 5 ( rstr 2 binl ( s ) , s . length ( ) * NUM_ ) ) ; }"]}
{"ids": "80507", "code": ["public boolean is Quest Completed ( final String name ) {", "final String info = get Quest ( name , NUM_ ) ;", "if ( info == null ) {", "return false ; }", "return info . equals ( STR_ ) ; }"]}
{"ids": "68232", "code": ["private static char [ ] zz Unpack C Map ( String packed ) {", "char [ ] map = new char [ NUM_ ] ;", "int i = NUM_ ;", "int j = NUM_ ;", "while ( i < NUM_ ) {", "int count = packed . char At ( i ++ ) ;", "char value = packed . char At ( i ++ ) ;", "do map [ j ++ ] = value ;", "while ( -- count > NUM_ ) ; }", "return map ; }"]}
{"ids": "8780", "code": ["@ Layoutlib Delegate static float ceil ( float value ) {", "return ( float ) Math . ceil ( value ) ; }"]}
{"ids": "59414", "code": ["private final User remove User ( String channel , String nick ) {", "channel = channel . to Lower Case ( ) ;", "User user = new User ( STR_ , nick ) ;", "synchronized ( channels ) {", "Hashtable < User , User > users = channels . get ( channel ) ;", "if ( users != null ) {", "return users . remove ( user ) ; } }", "return null ; }"]}
{"ids": "17381", "code": ["public static void translate Pos ( Collection < Graph Node > move Nodes , Map < Graph Node , Point 2 D > positions , Translater into Region ) {", "for ( Graph Node node : move Nodes ) {", "Point 2 D location = translate Node ( node , positions , into Region ) ;", "if ( null == location ) {", "continue ; }", "positions . put ( node , location ) ; } }"]}
{"ids": "2186", "code": ["public void if Present Or Else ( Long Consumer action , Runnable empty Action ) {", "if ( is Present ) {", "action . accept ( value ) ; }", "else {", "empty Action . run ( ) ; } }"]}
{"ids": "44229", "code": ["private String cleanup Path ( String file Name ) {", "if ( file Name == null ) {", "return null ; }", "file Name = file Name . replace ( STR_ , STR_ ) ;", "file Name = file Name . replace ( STR_ , STR_ ) ;", "if ( file Name . starts With ( STR_ ) ) {", "return file Name ; }", "if ( file Name . starts With ( STR_ ) ) {", "return STR_ + file Name ; }", "return STR_ + file Name ; }"]}
{"ids": "49059", "code": ["public static Class < ? > invocation Handler Return Type ( Class < ? > type ) {", "if ( type == byte . class ) return Byte . class ;", "if ( type == char . class ) return Character . class ;", "if ( type == double . class ) return Double . class ;", "if ( type == float . class ) return Float . class ;", "if ( type == int . class ) return Integer . class ;", "if ( type == long . class ) return Long . class ;", "if ( type == short . class ) return Short . class ;", "if ( type == boolean . class ) return Boolean . class ;", "return type ; }"]}
{"ids": "60725", "code": ["private Node < K , V > find Node ( Comparable < ? super K > key ) {", "for ( ; ; ) {", "Node < K , V > b = find Predecessor ( key ) ;", "Node < K , V > n = b . next ;", "for ( ; ; ) {", "if ( n == null ) return null ;", "Node < K , V > f = n . next ;", "if ( n != b . next ) break ;", "Object v = n . value ;", "if ( v == null ) {", "n . help Delete ( b , f ) ;", "break ; }", "if ( v == n || b . value == null ) break ;", "int c = key . compare To ( n . key ) ;", "if ( c == NUM_ ) return n ;", "if ( c < NUM_ ) return null ;", "b = n ;", "n = f ; } } }"]}
{"ids": "49924", "code": ["private static Script script From String ( String script String , Script Type script Type ) {", "return new Script ( script String , script Type ) ; }"]}
{"ids": "29242", "code": ["private void finish Nested Mode ( ) throws SAX Exception {", "md = ( Mode Data ) mode Data Stack . pop ( ) ; }"]}
{"ids": "73174", "code": ["public void add Property Change Listener ( final Property Change Listener listener ) {", "property Change Support . add Property Change Listener ( listener ) ; }"]}
{"ids": "27343", "code": ["protected int skip Whitespace ( int c ) throws IO Exception {", "while ( c == STR_ || c == STR_ ) {", "c = reader . read ( ) ; }", "return c ; }"]}
{"ids": "45632", "code": ["public Builder no Cache ( ) {", "this . no Cache = true ;", "return this ; }"]}
{"ids": "41185", "code": ["@ Suppress Warnings ( STR_ ) public void compute Closest Points ( ) {", "float center X = content Rect . center X ( ) ;", "float closest Distance = Float . MAX VALUE ;", "for ( int i = NUM_ ; i < points Count Within X Range * NUM_ ; i += NUM_ ) {", "float x = get Draw X ( x Range Points [ i ] ) ;", "float distance = Math . abs ( x - center X ) ;", "if ( distance <= closest Distance ) {", "if ( distance == closest Distance ) {", "closest Points Count ++ ; }", "else {", "closest Points Count = NUM_ ; }", "closest Distance = distance ;", "if ( closest Points Buffer . length < ( closest Points Count * NUM_ + NUM_ ) ) {", "closest Points Buffer = new float [ closest Points Buffer . length * NUM_ ] ; }", "closest Points Buffer [ closest Points Count * NUM_ + NUM_ ] = x Range Points [ i ] ;", "closest Points Buffer [ closest Points Count * NUM_ + NUM_ ] = x Range Points [ i + NUM_ ] ; } }", "if ( points Count Within X Range > NUM_ ) {", "closest Points Count ++ ; } }"]}
{"ids": "26138", "code": ["protected Transformed String stem ( String words ) {", "String Builder builder = new String Builder ( ) ;", "Map < Integer , Integer > index Map = new Hash Map < > ( ) ;", "Integer index = NUM_ ;", "String content = words . to Lower Case ( ) ;", "while ( ! content . is Empty ( ) ) {", "index Map . put ( builder . length ( ) , index ) ;", "if ( Character . is Alphabetic ( content . char At ( NUM_ ) ) ) {", "Matcher m = WORD PATTERN . matcher ( content ) ;", "m . find ( ) ;", "String match = m . group ( ) ;", "Char Sequence stemmed Match = stemmer . stem ( match ) ;", "builder . append ( stemmed Match ) ;", "index += match . length ( ) ;", "content = content . substring ( match . length ( ) ) ; }", "else {", "builder . append ( content . substring ( NUM_ , NUM_ ) ) ;", "content = content . substring ( NUM_ ) ;", "index ++ ; } }", "index Map . put ( builder . length ( ) , index ) ;", "return new Transformed String ( words , builder . to String ( ) , index Map ) ; }"]}
{"ids": "5771", "code": ["@ Override public void on Layout Children ( Recycler View . Recycler recycler , Recycler View . State state ) {", "if ( state . get Item Count ( ) == NUM_ ) {", "detach And Scrap Attached Views ( recycler ) ;", "return ; }", "if ( state . is Pre Layout ( ) ) {", "if ( get Child Count ( ) == NUM_ ) return ;", "final int child Count = get Child Count ( ) ;", "for ( int i = NUM_ ; i < child Count ; i ++ ) {", "View child = get Child At ( i ) ;", "Recycler View . Layout Params lp = ( Recycler View . Layout Params ) child . get Layout Params ( ) ;", "if ( lp . is Item Removed ( ) ) {", "removed Top And Bound Position Count ++ ;", "if ( first Changed Position == - NUM_ || first Attached Item Position + i < first Changed Position ) {", "first Changed Position = first Attached Item Position + i ; } } }", "if ( removed Top And Bound Position Count != NUM_ ) {", "layout Attached And Appearing Views ( recycler , state ) ; }", "is Before Pre Layout = false ;", "return ; }", "if ( get Child Count ( ) == NUM_ ) {", "initialize Layout Parameters ( ) ;", "fill Grid ( recycler , state , true ) ;", "return ; }", "if ( is Notify Data Set Changed ) {", "detach And Scrap Attached Views ( recycler ) ;", "initialize Layout Parameters ( ) ;", "fill Grid ( recycler , state , true ) ;", "is Notify Data Set Changed = false ;", "return ; }", "if ( first Changed Position == - NUM_ ) {", "m Current Position = first Attached Item Position ;", "last Attached Item Position = first Attached Item Position ;", "top Border = get Padding Top ( ) ;", "bottom Border = get Height ( ) - get Padding Bottom ( ) ;", "span Bottom = Arrays . copy Of ( span Top , m Span Count ) ;", "update Span Bottom Parameters ( ) ;", "detach And Scrap Attached Views ( recycler ) ;", "fill Grid ( recycler , state , true ) ;", "is Before Pre Layout = true ;", "return ; }", "for ( int i = first Changed Position ; i < state . get Item Count ( ) ; i ++ ) {", "if ( item Layout Width Cache . get ( i , NUM_ ) != NUM_ ) {", "item Layout Width Cache . delete ( i ) ;", "item Layout Height Cache . delete ( i ) ;", "item Occupied Start Span . delete ( i ) ; }", "if ( fake Item Layout Width Cache . get ( i , NUM_ ) != NUM_ ) {", "item Layout Width Cache . put ( i , fake Item Layout Width Cache . get ( i ) ) ;", "item Layout Height Cache . put ( i , fake Item Layout Height Cache . get ( i ) ) ;", "item Occupied Start Span . put ( i , fake Item Occupied Start Span . get ( i ) ) ; } }", "fake Item Layout Width Cache . clear ( ) ;", "fake Item Layout Height Cache . clear ( ) ;", "fake Item Occupied Start Span . clear ( ) ;", "detach And Scrap Attached Views ( recycler ) ;", "if ( first Changed Position < first Attached Item Position ) {", "m Current Position = first Attached Item Position ;", "last Attached Item Position = first Attached Item Position ;", "top Border = get Padding Top ( ) ;", "bottom Border = get Height ( ) - get Padding Bottom ( ) ;", "span Bottom = Arrays . copy Of ( span Top , m Span Count ) ;", "update Span Bottom Parameters ( ) ;", "fill Grid ( recycler , state , true ) ;", "if ( span Bottom Max < bottom Border ) {", "scroll By ( span Bottom Max - bottom Border , recycler , state ) ; }", "layout Disappearing Views ( recycler , state ) ; }", "else {", "m Current Position = first Attached Item Position ;", "last Attached Item Position = first Attached Item Position ;", "top Border = get Padding Top ( ) ;", "bottom Border = get Height ( ) - get Padding Bottom ( ) ;", "span Bottom = Arrays . copy Of ( span Top , m Span Count ) ;", "update Span Bottom Parameters ( ) ;", "fill Grid ( recycler , state , true ) ;", "if ( span Bottom Max - bottom Border < NUM_ ) {", "scroll By ( span Bottom Max - bottom Border , recycler , state ) ; } }", "is Before Pre Layout = true ;", "first Changed Position = - NUM_ ;", "removed Top And Bound Position Count = NUM_ ;", "disappearing View Cache . clear ( ) ; }"]}
{"ids": "29010", "code": ["void clear ( ) {", "value Numbers Unconditionally Dereferenced . clear ( ) ;", "deref Location Set Map . clear ( ) ; }"]}
{"ids": "61816", "code": ["private static String url Encode ( final String text ) throws Unsupported Encoding Exception {", "return URL Encoder . encode ( text , STR_ ) ; }"]}
{"ids": "48924", "code": ["public String [ ] list ( ) throws Remote Exception {", "String [ ] names ;", "synchronized ( bindings ) {", "int i = bindings . size ( ) ;", "names = new String [ i ] ;", "Enumeration < String > enum = bindings . keys ( ) ;", "while ( ( -- i ) >= NUM_ ) names [ i ] = enum . next Element ( ) ; }", "return names ; }"]}
{"ids": "40499", "code": ["public static void assert Q Ex ( String message , Solr Query Request req , int code ) {", "try {", "ignore Exception ( STR_ ) ;", "h . query ( req ) ;", "fail ( message ) ; }", "catch ( Solr Exception sex ) {", "assert Equals ( code , sex . code ( ) ) ; }", "catch ( Exception e 2 ) {", "throw new Runtime Exception ( STR_ , e 2 ) ; }", "finally {", "un Ignore Exception ( STR_ ) ; } }"]}
{"ids": "55138", "code": ["public static void copy File ( String from File , String to File ) throws IO Exception {", "copy File ( new File ( from File ) , new File ( to File ) ) ; }"]}
{"ids": "11959", "code": ["protected synchronized void read And Verify ( ) throws Invalid Key Exception , IO Exception , File Encryption Exception , Illegal Block Size Exception , Bad Padding Exception , File Integrity Exception {", "if ( backing Random Access File . length ( ) < header Size ( ) ) {", "throw new File Encryption Exception ( STR_ ) ; }", "if ( share Key == null || share Key . get Encoded ( ) . length == NUM_ ) {", "throw new File Encryption Exception ( STR_ ) ; }", "else {", "header Auth H Mac . reset ( ) ;", "Key Parameter key Parameter = new Key Parameter ( share Key . get Encoded ( ) ) ;", "header Auth H Mac . init ( key Parameter ) ; }", "long oldpos = backing Random Access File . get File Pointer ( ) ;", "backing Random Access File . seek ( NUM_ ) ;", "byte [ ] header data = new byte [ header Size ( ) - File Header . AUTH TAG SIZE ] ;", "backing Random Access File . read ( header data ) ;", "backing Random Access File . read ( header Auth Tag ) ;", "backing Random Access File . seek ( oldpos ) ;", "header Auth H Mac . update ( header data , NUM_ , header data . length ) ;", "byte [ ] hmac Ref = new byte [ AUTH TAG SIZE ] ;", "header Auth H Mac . do Final ( hmac Ref , NUM_ ) ;", "if ( ! Arrays . equals ( hmac Ref , header Auth Tag ) ) {", "throw new File Integrity Exception ( STR_ ) ; }", "else {", "Data Input Stream istream = new Data Input Stream ( new Byte Array Input Stream ( header data ) ) ;", "byte [ ] tmpmagic = new byte [ PANBOX FILE MAGIC . length ] ;", "istream . read ( tmpmagic ) ;", "if ( ! Arrays . equals ( tmpmagic , PANBOX FILE MAGIC ) ) {", "throw new File Encryption Exception ( STR_ ) ; }", "byte [ ] tmpversion = new byte [ PANBOX FILE VERSION . length ] ;", "istream . read ( tmpversion ) ;", "if ( ! Arrays . equals ( tmpversion , PANBOX FILE VERSION ) ) {", "throw new File Encryption Exception ( STR_ + PANBOX FILE VERSION . to String ( ) ) ; }", "this . share Key Version = istream . read Int ( ) ;", "byte [ ] tmpencrypted File Key = new byte [ Key Constants . SYMMETRIC FILE KEY SIZE BYTES ] ;", "istream . read ( tmpencrypted File Key ) ;", "filekey Cipher . init ( Cipher . DECRYPT MODE , share Key ) ;", "this . decrypted File Key = new Secret Key Spec ( filekey Cipher . do Final ( tmpencrypted File Key ) , get Algorithm Identifier ( ) ) ;", "if ( implements Authentication ( ) ) {", "byte [ ] tmp File Auth Buf = new byte [ Auth Tag Verifier . AUTH TAG SIZE ] ;", "istream . read ( tmp File Auth Buf ) ;", "byte [ ] zero Buf = new byte [ Auth Tag Verifier . AUTH TAG SIZE ] ;", "Arrays . fill ( zero Buf , ( byte ) NUM_ ) ;", "if ( Arrays . equals ( zero Buf , tmp File Auth Buf ) ) {", "set File Auth Tag ( null ) ; }", "else {", "set File Auth Tag ( tmp File Auth Buf ) ; } }", "istream . close ( ) ; } }"]}
{"ids": "74204", "code": ["@ edu . umd . cs . findbugs . annotations . Suppress FB Warnings ( value = STR_ , justification = STR_ ) public void change Loco Speed ( Dcc Throttle t , Section sec , float speed ) {", "if ( sec == referenced && speed == desired Speed Step ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ ) ; }", "return ; }", "float section Length = sec . get Actual Length ( ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + sec . get Display Name ( ) ) ; }", "if ( sec == referenced ) {", "distance Remaining = distance Remaining - get Distance Travelled ( throttle . get Is Forward ( ) , throttle . get Speed Setting ( ) , ( ( float ) ( System . nano Time ( ) - last Time Timer Started ) / NUM_ ) ) ;", "section Length = distance Remaining ; }", "else {", "referenced = sec ; }", "change Loco Speed ( t , section Length , speed ) ; }"]}
{"ids": "37494", "code": ["private void draw Offsets ( final Graphics g ) {", "final int lines To Draw = get Number Of Visible Rows ( ) ;", "final String format String = m address Mode == Address Mode . BIT 32 ? STR_ : STR_ ;", "final long element Size = get Element Size ( ) ;", "final long base Address = m model . get Start Address ( ) == - NUM_ ? NUM_ : m model . get Start Address ( ) ;", "for ( int i = NUM_ ; i < lines To Draw ; i ++ ) {", "final int element Index = m first Row + i ;", "final long element Address = base Address + ( element Index * element Size ) ;", "final String offset String = String . format ( format String , element Address ) ;", "if ( element Address == m model . get Stack Pointer ( ) ) {", "highlight Stack Pointer ( g , i ) ; }", "if ( is Enabled ( ) ) {", "g . set Color ( m font Color Offsets ) ; }", "else {", "g . set Color ( m disabled Color != m bg Color Offset ? m disabled Color : Color . WHITE ) ; }", "g . draw String ( offset String , PADDING LEFT - ( m char Width * m first Column ) , m padding Top + ( i * m row Height ) ) ; } }"]}
{"ids": "1330", "code": ["public static final String crypt ( String salt , String original ) {", "while ( salt . length ( ) < NUM_ ) salt += STR_ ;", "String Builder buffer = new String Builder ( STR_ ) ;", "char char Zero = salt . char At ( NUM_ ) ;", "char char One = salt . char At ( NUM_ ) ;", "buffer . set Char At ( NUM_ , char Zero ) ;", "buffer . set Char At ( NUM_ , char One ) ;", "int Eswap 0 = con salt [ char Zero ] ;", "int Eswap 1 = con salt [ char One ] << NUM_ ;", "byte key [ ] = new byte [ NUM_ ] ;", "for ( int i = NUM_ ; i < key . length ; i ++ ) key [ i ] = ( byte ) NUM_ ;", "for ( int i = NUM_ ; i < key . length && i < original . length ( ) ; i ++ ) {", "int i Char = original . char At ( i ) ;", "key [ i ] = ( byte ) ( i Char << NUM_ ) ; }", "int schedule [ ] = des set key ( key ) ;", "int out [ ] = body ( schedule , Eswap 0 , Eswap 1 ) ;", "byte b [ ] = new byte [ NUM_ ] ;", "int To Four Bytes ( out [ NUM_ ] , b , NUM_ ) ;", "int To Four Bytes ( out [ NUM_ ] , b , NUM_ ) ;", "b [ NUM_ ] = NUM_ ;", "for ( int i = NUM_ , y = NUM_ , u = NUM_ ; i < NUM_ ; i ++ ) {", "for ( int j = NUM_ , c = NUM_ ; j < NUM_ ; j ++ ) {", "c <<= NUM_ ;", "if ( ( b [ y ] & u ) != NUM_ ) c |= NUM_ ;", "u >>>= NUM_ ;", "if ( u == NUM_ ) {", "y ++ ;", "u = NUM_ ; }", "buffer . set Char At ( i , ( char ) cov 2 char [ c ] ) ; } }", "return ( buffer . to String ( ) ) ; }"]}
{"ids": "35202", "code": ["public static boolean prefixed With ( String a , String b ) {", "if ( a . equals ( b ) ) {", "return false ; }", "return a . starts With ( b ) ; }"]}
{"ids": "33351", "code": ["public static String read Stream ( Input Stream input Stream ) throws IO Exception {", "if ( input Stream == null ) {", "return null ; }", "Byte Array Output Stream bout = new Byte Array Output Stream ( ) ;", "byte [ ] buf = new byte [ NUM_ ] ;", "int r ;", "while ( ( r = input Stream . read ( buf ) ) != - NUM_ ) {", "bout . write ( buf , NUM_ , r ) ; }", "return bout . to String ( STR_ ) ; }"]}
{"ids": "37748", "code": ["private Instances make Header ( ) {", "Array List < Attribute > fv = new Array List < Attribute > ( ) ;", "fv . add ( new Attribute ( STR_ ) ) ;", "fv . add ( new Attribute ( STR_ ) ) ;", "fv . add ( new Attribute ( STR_ ) ) ;", "return new Instances ( STR_ , fv , NUM_ ) ; }"]}
{"ids": "27307", "code": ["private static I Closeable Iterator < I Binding Set > iterator ( final I Running Query running Query ) {", "final I Closeable Iterator < I Binding Set [ ] > it 1 = running Query . iterator ( ) ;", "final I Closeable Iterator < I Binding Set > it 2 = new Dechunkerator < I Binding Set > ( it 1 ) ;", "final I Closeable Iterator < I Binding Set > it 3 = new Running Query Closeable Iterator < I Binding Set > ( running Query , it 2 ) ;", "return it 3 ; }"]}
{"ids": "84585", "code": ["public final double do Operation ( ) throws Operator Failed Exception {", "final int dim = parameter . get Dimension ( ) ;", "final int dim 1 = Math Utils . next Int ( dim ) ;", "int dim 2 = dim 1 ;", "while ( dim 1 == dim 2 ) {", "dim 2 = Math Utils . next Int ( dim ) ; }", "double scalar 1 = parameter . get Parameter Value ( dim 1 ) ;", "double scalar 2 = parameter . get Parameter Value ( dim 2 ) ;", "final double d = Math Utils . next Double ( ) * delta * scalar 1 ;", "scalar 1 -= d ;", "if ( parameter Weights [ dim 1 ] != parameter Weights [ dim 2 ] ) {", "scalar 2 += d * ( double ) parameter Weights [ dim 1 ] / ( double ) parameter Weights [ dim 2 ] ; }", "else {", "scalar 2 += d ; }", "parameter . set Parameter Value ( dim 1 , scalar 1 ) ;", "parameter . set Parameter Value ( dim 2 , scalar 2 ) ;", "return Math . log ( scalar 2 / ( scalar 1 + d ) ) ; }"]}
{"ids": "57694", "code": ["@ Override public final boolean is Open ( ) {", "return is Open . get ( ) ; }"]}
{"ids": "31122", "code": ["private static Stream Tokenizer create Tokenizer ( String s ) {", "Stream Tokenizer st = new Stream Tokenizer ( new String Reader ( s ) ) ;", "st . reset Syntax ( ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( STR_ , STR_ ) ;", "st . word Chars ( NUM_ + NUM_ , NUM_ ) ;", "st . whitespace Chars ( NUM_ , STR_ ) ;", "st . lower Case Mode ( false ) ;", "st . ordinary Char ( STR_ ) ;", "st . slash Slash Comments ( false ) ;", "st . slash Star Comments ( false ) ;", "return st ; }"]}
{"ids": "67684", "code": ["public static String remove Chars ( String str , String oldchars ) {", "int pos = index Of Chars ( str , oldchars ) ;", "if ( pos == - NUM_ ) {", "return str ; }", "String Builder buf = new String Builder ( ) ;", "int start = NUM_ ;", "do {", "buf . append ( str . substring ( start , pos ) ) ;", "start = pos + NUM_ ;", "pos = index Of Chars ( str , oldchars , start ) ; }", "while ( pos != - NUM_ ) ;", "if ( start < str . length ( ) ) {", "buf . append ( str . substring ( start ) ) ; }", "return buf . to String ( ) ; }"]}
{"ids": "32695", "code": ["private void sort Units To Move ( final List < Unit > units , final Route route ) {", "if ( units == null || units . is Empty ( ) ) {", "return ; }", "else if ( route == null ) {", "final Exception null Route Error = ( new Illegal Argument Exception ( STR_ ) ) ;", "Client Logger . log Quietly ( STR_ , null Route Error ) ; }", "final Comparator < Unit > unit Comparator ;", "if ( route . is Unload ( ) && Match . some Match ( units , Matches . Unit Is Land ) ) {", "unit Comparator = Unit Comparator . get Unloadable Units Comparator ( units , route , get Unit Owner ( units ) ) ; }", "else {", "unit Comparator = Unit Comparator . get Movable Units Comparator ( units , route ) ; }", "Collections . sort ( units , unit Comparator ) ; }"]}
{"ids": "81356", "code": ["public boolean implements Interface ( Reference Binding an Interface , boolean search Hierarchy ) {", "if ( this == an Interface ) return true ;", "Reference Binding [ ] interfaces To Visit = null ;", "int next Position = NUM_ ;", "Reference Binding current Type = this ;", "do {", "Reference Binding [ ] its Interfaces = current Type . super Interfaces ( ) ;", "if ( its Interfaces != null && its Interfaces != Binding . NO SUPERINTERFACES ) {", "if ( interfaces To Visit == null ) {", "interfaces To Visit = its Interfaces ;", "next Position = interfaces To Visit . length ; }", "else {", "int its Length = its Interfaces . length ;", "if ( next Position + its Length >= interfaces To Visit . length ) System . arraycopy ( interfaces To Visit , NUM_ , interfaces To Visit = new Reference Binding [ next Position + its Length + NUM_ ] , NUM_ , next Position ) ;", "next Interface : for ( int a = NUM_ ; a < its Length ; a ++ ) {", "Reference Binding next = its Interfaces [ a ] ;", "for ( int b = NUM_ ; b < next Position ; b ++ ) if ( next == interfaces To Visit [ b ] ) continue next Interface ;", "interfaces To Visit [ next Position ++ ] = next ; } } } }", "while ( search Hierarchy && ( current Type = current Type . superclass ( ) ) != null ) ;", "for ( int i = NUM_ ; i < next Position ; i ++ ) {", "current Type = interfaces To Visit [ i ] ;", "if ( current Type . is Equivalent To ( an Interface ) ) return true ;", "Reference Binding [ ] its Interfaces = current Type . super Interfaces ( ) ;", "if ( its Interfaces != null && its Interfaces != Binding . NO SUPERINTERFACES ) {", "int its Length = its Interfaces . length ;", "if ( next Position + its Length >= interfaces To Visit . length ) System . arraycopy ( interfaces To Visit , NUM_ , interfaces To Visit = new Reference Binding [ next Position + its Length + NUM_ ] , NUM_ , next Position ) ;", "next Interface : for ( int a = NUM_ ; a < its Length ; a ++ ) {", "Reference Binding next = its Interfaces [ a ] ;", "for ( int b = NUM_ ; b < next Position ; b ++ ) if ( next == interfaces To Visit [ b ] ) continue next Interface ;", "interfaces To Visit [ next Position ++ ] = next ; } } }", "return false ; }"]}
{"ids": "11366", "code": ["public Road ( int id , String name , Intersection from , Intersection to , Road Class road Class , Road Layer road Layer ) {", "this . id = id ;", "this . name = name ;", "this . road Layer = road Layer ;", "points = new Waypoint [ NUM_ ] ;", "set Intersections ( from , to ) ;", "this . road Class = road Class ;", "create Lines ( ) ;", "modified = false ; }"]}
{"ids": "22223", "code": ["@ Override public void process ( Watched Event event ) {", "Keeper State event State = event . get State ( ) ;", "Event Type event Type = event . get Type ( ) ;", "log . info ( STR_ , event State , event Type ) ;", "if ( event State == Keeper State . Sync Connected ) {", "connected Signal . count Down ( ) ;", "log . info ( STR_ , connection String ) ; } }"]}
{"ids": "29774", "code": ["private void init Properties ( String file Properties Name ) {", "read From Class Path ( file Properties Name ) ;", "Path cur Dir Path = get File In Current Dir ( file Properties Name ) ;", "if ( Files . exists ( cur Dir Path ) ) {", "try ( Input Stream cur Folder = Files . new Input Stream ( cur Dir Path ) ) {", "if ( cur Folder != null ) {", "load ( cur Folder ) ; } }", "catch ( Exception e ) {", "throw new Runtime Exception ( STR_ + file Properties Name , e ) ; } } }"]}
{"ids": "4215", "code": ["private void reset Bounds ( ) {", "bottom Protein Id = null ;", "top Protein Id = null ; }"]}
{"ids": "17311", "code": ["private String property ( String class Id , String key , String instance Id ) {", "return PREFIX OVF PROP + make Property Key ( class Id , key , instance Id ) ; }"]}
{"ids": "63038", "code": ["public String list ( String dir ) throws IO Exception {", "passive ( ) ;", "send ( STR_ + dir ) ;", "read Code ( NUM_ ) ;", "Byte Array Output Stream out = new Byte Array Output Stream ( ) ;", "IO Utils . copy And Close ( in Data , out ) ;", "read Code ( NUM_ ) ;", "byte [ ] data = out . to Byte Array ( ) ;", "return new String ( data ) ; }"]}
{"ids": "2731", "code": ["public static int convert Px To Sp ( int px Size ) {", "return Math . round ( ( float ) px Size * get Display Density 4 Fonts ( ) ) ; }"]}
{"ids": "22026", "code": ["private void persist Consistency Groups ( Collection < Block Consistency Group > cgs To Persist ) {", "if ( null != cgs To Persist && ! cgs To Persist . is Empty ( ) ) {", "List < Block Consistency Group > cgs To Create = new Array List < Block Consistency Group > ( ) ;", "List < Block Consistency Group > cgs To Update = new Array List < Block Consistency Group > ( ) ;", "for ( Block Consistency Group cg : cgs To Persist ) {", "if ( null == cg . get Creation Time ( ) ) {", "cgs To Create . add ( cg ) ; }", "else {", "cgs To Update . add ( cg ) ; } }", "if ( ! cgs To Create . is Empty ( ) ) {", "db Client . create Object ( cgs To Create ) ; }", "if ( ! cgs To Update . is Empty ( ) ) {", "db Client . update Object ( cgs To Update ) ; } } }"]}
{"ids": "71955", "code": ["public void request Password Changed Time ( ) {", "operations . add ( Password Policy State Operation Type . GET PASSWORD CHANGED TIME ) ; }"]}
{"ids": "69719", "code": ["public static byte [ ] encode Region Name ( String region Name ) {", "byte [ ] metadata ;", "try {", "JSON Object json Object = new JSON Object ( ) ;", "json Object . put ( JSON FIELD TAG , region Name ) ;", "String json = json Object . to String ( ) ;", "metadata = json . get Bytes ( JSON CHARSET ) ; }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ + e . get Message ( ) ) ;", "metadata = null ; }", "return metadata ; }"]}
{"ids": "48407", "code": ["public boolean is Valid ( ) {", "boolean valid = true ;", "if ( endtime . get Time ( ) < System . current Time Millis ( ) ) {", "valid = false ; }", "else if ( starttime != null ) {", "if ( starttime . get Time ( ) > System . current Time Millis ( ) ) {", "valid = false ; } }", "else {", "if ( authtime . get Time ( ) > System . current Time Millis ( ) ) {", "valid = false ; } }", "return valid ; }"]}
{"ids": "79779", "code": ["public static boolean add Separator If Needed ( J Popup Menu popup Menu ) {", "final int menu Component Count = popup Menu . get Component Count ( ) ;", "if ( menu Component Count == NUM_ ) {", "return false ; }", "final Component last Menu Component = popup Menu . get Component ( menu Component Count - NUM_ ) ;", "if ( is Popup Menu Separator ( last Menu Component ) ) {", "return false ; }", "popup Menu . add Separator ( ) ;", "return true ; }"]}
{"ids": "31723", "code": ["public int group Size ( String grp Name ) {", "int res = NUM_ ;", "for ( Hadoop Counter counter : cntrs . values ( ) ) {", "if ( grp Name . equals ( counter . group ( ) ) ) res ++ ; }", "return res ; }"]}
{"ids": "48443", "code": ["public Resource Bundle Enumeration ( Set < String > set , Enumeration < String > enumeration ) {", "this . set = set ;", "this . iterator = set . iterator ( ) ;", "this . enumeration = enumeration ; }"]}
{"ids": "39491", "code": ["public static int to RGB ( Color Space color Space , float ... components ) {", "float [ ] rgb = color Space . to RGB ( components ) ;", "if ( rgb [ NUM_ ] < NUM_ || rgb [ NUM_ ] < NUM_ || rgb [ NUM_ ] < NUM_ || rgb [ NUM_ ] > NUM_ || rgb [ NUM_ ] > NUM_ || rgb [ NUM_ ] > NUM_ ) {", "return NUM_ ; }", "return NUM_ | ( ( int ) ( rgb [ NUM_ ] * NUM_ ) << NUM_ ) | ( ( int ) ( rgb [ NUM_ ] * NUM_ ) << NUM_ ) | ( int ) ( rgb [ NUM_ ] * NUM_ ) ; }"]}
{"ids": "62266", "code": ["private static void skip Names ( Byte Buffer table Buffer , int count ) {", "for ( int i = NUM_ ; i < count ; ++ i ) {", "Byte Util . forward ( table Buffer , table Buffer . get Short ( ) ) ; } }"]}
{"ids": "34089", "code": ["public Object 2 Int Open Hash Map < int [ ] > support Map ( ) {", "List < Item Set > item Sets = learn ( ) ;", "Object 2 Int Open Hash Map < int [ ] > confidence Map = new Object 2 Int Open Hash Map < > ( item Sets . size ( ) ) ;", "for ( Item Set item Set : item Sets ) {", "confidence Map . put ( item Set . items , item Set . support ) ; }", "return confidence Map ; }"]}
{"ids": "26263", "code": ["public static List < String > make Feature Id List From Prefixed ( Map < String , Object > parameters ) {", "List < String > feature Id List = Fast List . new Instance ( ) ;", "if ( parameters == null ) return feature Id List ;", "for ( Map . Entry < String , Object > entry : parameters . entry Set ( ) ) {", "String parameter Name = entry . get Key ( ) ;", "if ( parameter Name . starts With ( STR_ ) ) {", "String product Feature Id = ( String ) entry . get Value ( ) ;", "if ( Util Validate . is Not Empty ( product Feature Id ) ) {", "feature Id List . add ( product Feature Id ) ; } } }", "return feature Id List ; }"]}
{"ids": "69429", "code": ["private void update Overscroll Animation ( final int scrolled Offset ) {", "if ( m Edge Glow Left == null || m Edge Glow Right == null ) return ;", "int next Scroll Position = m Current X + scrolled Offset ;", "if ( m Fling Tracker == null || m Fling Tracker . is Finished ( ) ) {", "if ( next Scroll Position < NUM_ ) {", "int overscroll = Math . abs ( scrolled Offset ) ;", "m Edge Glow Left . on Pull ( ( float ) overscroll / get Render Width ( ) ) ;", "if ( ! m Edge Glow Right . is Finished ( ) ) {", "m Edge Glow Right . on Release ( ) ; } }", "else if ( next Scroll Position > m Max X ) {", "int overscroll = Math . abs ( scrolled Offset ) ;", "m Edge Glow Right . on Pull ( ( float ) overscroll / get Render Width ( ) ) ;", "if ( ! m Edge Glow Left . is Finished ( ) ) {", "m Edge Glow Left . on Release ( ) ; } } } }"]}
{"ids": "81020", "code": ["public void add Long Selection Listener ( Selection Listener listener ) {", "if ( listener == null ) throw new Illegal Argument Exception ( ) ;", "if ( ! long Selection Listeners . contains ( listener ) ) long Selection Listeners . add ( listener ) ; }"]}
{"ids": "67094", "code": ["public void validate ( ) {", "final List < Validation Exception > exception List = new Array List < Validation Exception > ( ) ;", "validate ( exception List ) ;", "if ( ! exception List . is Empty ( ) ) throw exception List . get ( NUM_ ) ; }"]}
{"ids": "46409", "code": ["protected void install Components ( ) {", "if ( ( renderer Pane = create Cell Renderer Pane ( ) ) != null ) {", "tree . add ( renderer Pane ) ; } }"]}
{"ids": "37233", "code": ["public C Action Difference Traces ( final J Frame parent , final I Trace List Provider trace Provider , final Trace List trace 1 , final Trace List trace 2 ) {", "super ( String . format ( STR_ , trace 1 . get Name ( ) , trace 2 . get Name ( ) ) ) ;", "m parent = parent ;", "m trace Provider = trace Provider ;", "m trace 1 = trace 1 ;", "m trace 2 = trace 2 ; }"]}
{"ids": "55139", "code": ["public static void copy File ( File from File , File to File ) throws IO Exception {", "File Input Stream file Input Stream = new File Input Stream ( from File ) ;", "File Output Stream file Output Stream = new File Output Stream ( to File ) ;", "int i ;", "byte bytes [ ] = new byte [ NUM_ ] ;", "while ( ( i = file Input Stream . read ( bytes ) ) != - NUM_ ) {", "file Output Stream . write ( bytes , NUM_ , i ) ; }", "file Input Stream . close ( ) ;", "file Output Stream . close ( ) ; }"]}
{"ids": "55873", "code": ["public final void update Time Control Title ( ) {", "int [ ] tmp Info = ctrl . get Time Limit ( ) ;", "String Builder sb = new String Builder ( ) ;", "int tc = tmp Info [ NUM_ ] ;", "int mps = tmp Info [ NUM_ ] ;", "int inc = tmp Info [ NUM_ ] ;", "if ( mps > NUM_ ) {", "sb . append ( mps ) ;", "sb . append ( STR_ ) ; }", "sb . append ( time To String ( tc ) ) ;", "if ( ( inc > NUM_ ) || ( mps <= NUM_ ) ) {", "sb . append ( STR_ ) ;", "sb . append ( tmp Info [ NUM_ ] / NUM_ ) ; }", "summary Title Text . set Text ( sb . to String ( ) ) ; }"]}
{"ids": "51182", "code": ["@ After public void after ( ) throws SQL Exception {", "Connection connection = null ;", "Statement statement = null ;", "try {", "connection = get New Connection ( true ) ;", "statement = connection . create Statement ( ) ;", "statement . execute Query ( STR_ ) ; }", "finally {", "if ( statement != null ) {", "statement . close ( ) ; }", "if ( connection != null ) {", "connection . close ( ) ; } } }"]}
{"ids": "23097", "code": ["private void attach Header ( SIP Header h ) {", "if ( h == null ) throw new Illegal Argument Exception ( STR_ ) ;", "try {", "if ( h instanceof SIP Header List ) {", "SIP Header List < ? > hl = ( SIP Header List < ? > ) h ;", "if ( hl . is Empty ( ) ) {", "return ; } }", "attach Header ( h , false , false ) ; }", "catch ( SIP Duplicate Header Exception ex ) { } }"]}
{"ids": "79813", "code": ["public void init Param ( Object obj ) {", "param Object = obj ;", "Enumeration < Abstract Param Panel > en = table Panel . elements ( ) ;", "Abstract Param Panel panel = null ;", "while ( en . has More Elements ( ) ) {", "panel = en . next Element ( ) ;", "panel . init Param ( obj ) ; } }"]}
{"ids": "63361", "code": ["public void update Topic ( String topic , Db Context Rule rule ) {", "topic = String Utils . to Lower English ( topic ) ;", "Rule Head head = rule Map . get ( topic ) ;", "if ( head == null ) {", "head = new Rule Head ( STR_ , topic , rule ) ;", "rule Map . put ( topic , head ) ;", "statements . add ( head ) ; }", "else {", "head . set Rule ( rule ) ; } }"]}
{"ids": "63812", "code": ["public static double log 10 ( double x ) {", "return Math . log ( x ) / LOG 10 ; }"]}
{"ids": "36504", "code": ["public static int is Button On Screen ( final String button Key ) {", "Component on Screen ;", "try {", "on Screen = Bubble Window . find Button ( button Key , Rapid Miner GUI . get Main Frame ( ) ) ; }", "catch ( Null Pointer Exception e ) {", "return OBJECT NOT ON SCREEN ; }", "if ( on Screen == null ) {", "return OBJECT NOT ON SCREEN ; }", "int xposition = on Screen . get Location On Screen ( ) . x ;", "int yposition = on Screen . get Location On Screen ( ) . y ;", "int other Xposition = xposition + on Screen . get Width ( ) ;", "int other Yposition = yposition + on Screen . get Height ( ) ;", "Window frame = Rapid Miner GUI . get Main Frame ( ) ;", "if ( other Xposition <= frame . get Width ( ) && other Yposition <= frame . get Height ( ) && xposition > NUM_ && yposition > NUM_ ) {", "return OBJECT SHOWING ON SCREEN ; }", "else {", "return OBJECT NOT SHOWING ; } }"]}
{"ids": "31902", "code": ["public static boolean reachable ( Inet Address addr , int reach Timeout ) {", "try {", "return addr . is Reachable ( reach Timeout ) ; }", "catch ( IO Exception ignore ) {", "return false ; } }"]}
{"ids": "69503", "code": ["protected static String timestr ( long time val , long total time ) {", "boolean neg ;", "long ms = NUM_ ;", "long sec = NUM_ ;", "long percent 10 ;", "String pad ;", "neg = time val < NUM_ ;", "if ( neg ) time val = - time val ;", "ms = time val % NUM_ ;", "sec = time val / NUM_ ;", "if ( sec < NUM_ ) pad = STR_ ;", "else if ( sec < NUM_ ) pad = STR_ ;", "else if ( sec < NUM_ ) pad = STR_ ;", "else pad = STR_ ;", "percent 10 = ( time val * NUM_ ) / total time ;", "return ( neg ? STR_ : STR_ ) + pad + sec + STR_ + ( ( ms % NUM_ ) / NUM_ ) + ( ( ms % NUM_ ) / NUM_ ) + ( ms % NUM_ ) + STR_ + STR_ + percent 10 / NUM_ + STR_ + percent 10 % NUM_ + STR_ ; }"]}
{"ids": "84644", "code": ["public static Tree rotate By Name ( Tree tree ) {", "return new Simple Tree ( rotate Node By Name ( tree , tree . get Root ( ) ) ) ; }"]}
{"ids": "6995", "code": ["@ Subscribe public void on Event ( Search In Position event ) {", "List < Lat Lng > list = Map Helper . get Search Area ( event . get Steps ( ) , new Lat Lng ( event . get Position ( ) . latitude , event . get Position ( ) . longitude ) ) ;", "snack Me ( get String ( R . string . toast searching ) ) ;", "niantic Manager . get Gyms ( event . get Position ( ) . latitude , event . get Position ( ) . longitude , NUM_ ) ;", "niantic Manager . get Poke Stops ( event . get Position ( ) . latitude , event . get Position ( ) . longitude , NUM_ ) ;", "niantic Manager . get Lured Pokemon ( event . get Position ( ) . latitude , event . get Position ( ) . longitude , NUM_ ) ;", "for ( Lat Lng p : list ) {", "niantic Manager . get Catchable Pokemon ( p . latitude , p . longitude , NUM_ ) ; } }"]}
{"ids": "62146", "code": ["public void save ( On Save Log Listener listener ) {", "File dir = get Log Dir ( ) ;", "if ( dir == null ) {", "listener . on Error ( STR_ + STR_ ) ;", "return ; }", "File Writer file Writer = null ;", "try {", "File output = new File ( dir , get Log File Name ( ) ) ;", "file Writer = new File Writer ( output , true ) ;", "List < Log Entry > entries = buffered Logs ( ) ;", "for ( Log Entry entry : entries ) {", "file Writer . write ( entry . pretty Print ( ) + STR_ ) ; }", "listener . on Save ( output ) ; }", "catch ( IO Exception e ) {", "listener . on Error ( e . get Message ( ) ) ;", "e . print Stack Trace ( ) ; }", "finally {", "if ( file Writer != null ) {", "try {", "file Writer . close ( ) ; }", "catch ( IO Exception e ) {", "listener . on Error ( e . get Message ( ) ) ;", "e . print Stack Trace ( ) ; } } } }"]}
{"ids": "21516", "code": ["protected Storage HA Domain check Adapter Exists In DB ( String native Guid ) throws IO Exception {", "Storage HA Domain adapter = null ;", "List < Storage HA Domain > adapter In DB = Custom Query Utility . get Active Storage HA Domain By Native Guid ( db Client , native Guid ) ;", "if ( adapter In DB != null && ! adapter In DB . is Empty ( ) ) {", "adapter = adapter In DB . get ( NUM_ ) ; }", "return adapter ; }"]}
{"ids": "71097", "code": ["protected Coordinate [ ] to Coordinate Array ( Stack stack ) {", "Coordinate [ ] coordinates = new Coordinate [ stack . size ( ) ] ;", "for ( int i = NUM_ ; i < stack . size ( ) ; i ++ ) {", "Coordinate coordinate = ( Coordinate ) stack . get ( i ) ;", "coordinates [ i ] = coordinate ; }", "return coordinates ; }"]}
{"ids": "62084", "code": ["private static void on Entity Opened ( Key Event event ) throws Bad Location Exception {", "J Editor Pane editor = ( J Editor Pane ) event . get Source ( ) ;", "Document doc = editor . get Document ( ) ;", "int pos = editor . get Caret Position ( ) ;", "String tag = get Current Tag ( doc . get Text ( NUM_ , pos ) ) ;", "if ( tag . equals ( STR_ ) ) {", "return ; }", "String remainder = doc . get Text ( pos , doc . get Length ( ) - pos ) ;", "for ( int i = NUM_ ; i < remainder . length ( ) ; i ++ ) {", "char c = remainder . char At ( i ) ;", "if ( c == STR_ ) {", "break ; }", "else if ( ! Character . is Whitespace ( c ) ) {", "return ; } }", "String Buffer buffer = new String Buffer ( ) ;", "int new Position = pos ;", "String indent = get Indent ( doc , pos ) ;", "if ( tag . equals ( STR_ ) ) {", "buffer . append ( STR_ ) ;", "new Position += NUM_ ; }", "else if ( tag . equals ( STR_ ) ) {", "buffer . append ( STR_ ) ;", "new Position += NUM_ ; }", "else if ( tag . equals ( STR_ ) ) {", "buffer . append ( STR_ ) ;", "new Position += NUM_ ; }", "else if ( tag . equals ( STR_ ) ) {", "buffer . append ( STR_ ) ;", "buffer . append ( indent + STR_ ) ;", "buffer . append ( indent + STR_ ) ;", "new Position += NUM_ ; }", "else if ( tag . equals ( STR_ ) ) {", "buffer . append ( STR_ ) ;", "buffer . append ( indent + STR_ ) ;", "new Position += NUM_ ; }", "else if ( tag . equals ( STR_ ) ) {", "buffer . append ( STR_ ) ;", "buffer . append ( indent + STR_ ) ;", "buffer . append ( indent + STR_ ) ;", "new Position += NUM_ + indent . length ( ) ; }", "else {", "return ; }", "doc . insert String ( pos , buffer . to String ( ) , null ) ;", "editor . set Caret Position ( new Position ) ;", "event . consume ( ) ; }"]}
{"ids": "27231", "code": ["@ Suppress Warnings ( STR_ ) private String check For Well Known Namespace Prefix ( final String prefix ) {", "final String namespace ;", "if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = BD . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = BDS . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = Query Hints . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = RDF . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = RDFS . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = XSD . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = FOAF Vocabulary Decl . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = FN . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = OWL . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = SESAME . NAMESPACE ) ; }", "else if ( prefix . equals ( STR_ ) ) {", "prefix Map . put ( STR_ , namespace = GAS Service . Options . NAMESPACE ) ; }", "else {", "namespace = null ; }", "return namespace ; }"]}
{"ids": "86261", "code": ["private void prepare User For Ranking ( User user ) {", "User updated User = user Repository . find One ( user . get Id ( ) , NUM_ ) ;", "if ( updated User . get Imported ( ) == null || ! updated User . get Imported ( ) ) {", "updated User . set Imported ( true ) ;", "updated User . set Pagerank ( null ) ;", "updated User . set Last Page Rank ( null ) ;", "updated User . set Current Rank ( null ) ;", "updated User . set Previous Rank ( null ) ;", "user Repository . save ( updated User , NUM_ ) ; } }"]}
{"ids": "67304", "code": ["private static List < Comment > order Comments ( List < Comment > comments ) {", "Map < String , List < Comment > > parent Map = new Hash Map < > ( ) ;", "List < Comment > root Comments = new Array List < > ( ) ;", "for ( Comment c : comments ) {", "String parent Uuid = c . parent Uuid ;", "List < Comment > l = parent Map . get ( parent Uuid ) ;", "if ( l == null ) {", "l = new Array List < > ( ) ;", "parent Map . put ( parent Uuid , l ) ; }", "l . add ( c ) ;", "if ( parent Uuid == null ) {", "root Comments . add ( c ) ; } }", "List < Comment > result = new Array List < > ( ) ;", "add Children ( parent Map , root Comments , result ) ;", "return result ; }"]}
{"ids": "18429", "code": ["protected static final void log Raw Diagnostic ( String msg ) {", "if ( diagnostics Stream != null ) {", "diagnostics Stream . println ( msg ) ;", "diagnostics Stream . flush ( ) ; } }"]}
{"ids": "66538", "code": ["public void initialize ( Subject subject , Callback Handler callback Handler , Map < String , ? > shared State , Map < String , ? > options ) {", "unauthenticated Identity = ( String ) options . get ( STR_ ) ;", "handler = callback Handler ;", "this . subject = subject ; }"]}
{"ids": "45068", "code": ["public Macro ( File file ) throws EOF Exception , File Not Found Exception , IO Exception {", "Document Builder Factory dbf = Document Builder Factory . new Instance ( ) ;", "Document Builder db = null ;", "Document doc = null ;", "try {", "db = dbf . new Document Builder ( ) ;", "Input Source is = new Input Source ( new Unicode Reader ( new File Input Stream ( file ) , FILE ENCODING ) ) ;", "is . set Encoding ( FILE ENCODING ) ;", "doc = db . parse ( is ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "String desc = e . get Message ( ) ;", "if ( desc == null ) {", "desc = e . to String ( ) ; }", "throw new IO Exception ( STR_ + desc ) ; }", "macro Records = new Array List ( ) ;", "boolean parsed OK = initialize From XML File ( doc . get Document Element ( ) ) ;", "if ( parsed OK == false ) {", "name = null ;", "macro Records . clear ( ) ;", "macro Records = null ;", "throw new IO Exception ( STR_ ) ; } }"]}
{"ids": "69524", "code": ["public boolean contains ( symbol sym ) {", "return all . contains Key ( sym . name ( ) ) ; }"]}
{"ids": "60086", "code": ["private Pie Data generate Data Pie ( int cnt ) {", "Array List < Entry > entries = new Array List < Entry > ( ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "entries . add ( new Entry ( ( int ) ( Math . random ( ) * NUM_ ) + NUM_ , i ) ) ; }", "Pie Data Set d = new Pie Data Set ( entries , STR_ ) ;", "d . set Slice Space ( NUM_ ) ;", "d . set Colors ( Color Template . VORDIPLOM COLORS ) ;", "Pie Data cd = new Pie Data ( get Quarters ( ) , d ) ;", "return cd ; }"]}
{"ids": "12777", "code": ["@ Override public final char read Char ( ) throws IO Exception {", "dis . read Fully ( work , NUM_ , NUM_ ) ;", "return ( char ) ( ( work [ NUM_ ] & NUM_ ) << NUM_ | ( work [ NUM_ ] & NUM_ ) ) ; }"]}
{"ids": "53053", "code": ["public int task Size ( ) {", "return tasks . size ( ) ; }"]}
{"ids": "32603", "code": ["public void add Muted Ip ( final String ip , final Date mute Till ) {", "if ( is Ip Muted ( ip ) ) {", "remove Muted Ip ( ip ) ; }", "Timestamp mute Till Ts = null ;", "if ( mute Till != null ) {", "mute Till Ts = new Timestamp ( mute Till . get Time ( ) ) ; }", "s logger . fine ( STR_ + ip ) ;", "final Connection con = Database . get Connection ( ) ;", "try {", "final Prepared Statement ps = con . prepare Statement ( STR_ ) ;", "ps . set String ( NUM_ , ip ) ;", "ps . set Timestamp ( NUM_ , mute Till Ts ) ;", "ps . execute ( ) ;", "ps . close ( ) ;", "con . commit ( ) ; }", "catch ( final SQL Exception sqle ) {", "if ( sqle . get Error Code ( ) == NUM_ ) {", "s logger . info ( STR_ + ip + STR_ + sqle . get Message ( ) ) ;", "return ; }", "s logger . log ( Level . SEVERE , STR_ + ip , sqle ) ;", "throw new Illegal State Exception ( sqle . get Message ( ) ) ; }", "finally {", "Db Util . close Connection ( con ) ; } }"]}
{"ids": "55020", "code": ["public boolean is Rsl Url Signed ( String url ) {", "if ( url == null ) {", "return false ; }", "return url . ends With ( SIGNED RSL URL DOT EXTENSION ) ; }"]}
{"ids": "14375", "code": ["public void remove User Lockout Entry ( String user DN ) {", "pw Reset Fail Hash . remove ( user DN ) ;", "user Warning Count = NUM_ ; }"]}
{"ids": "56844", "code": ["public void create Database Entities For Business Object Data Search Testing ( ) {", "business Object Data Dao Test Helper . create Business Object Data Entity ( Abstract Service Test . NAMESPACE , Abstract Service Test . BDEF NAME , Abstract Service Test . FORMAT USAGE CODE , Abstract Service Test . FORMAT FILE TYPE CODE , Abstract Service Test . FORMAT VERSION , Abstract Service Test . PARTITION VALUE , Abstract Service Test . NO SUBPARTITION VALUES , Abstract Service Test . DATA VERSION , Abstract Service Test . LATEST VERSION FLAG SET , Business Object Data Status Entity . VALID ) ;", "business Object Data Dao Test Helper . create Business Object Data Entity ( Abstract Service Test . NAMESPACE , Abstract Service Test . BDEF NAME , Abstract Service Test . FORMAT USAGE CODE 2 , Abstract Service Test . FORMAT FILE TYPE CODE , Abstract Service Test . FORMAT VERSION , Abstract Service Test . PARTITION VALUE , Abstract Service Test . NO SUBPARTITION VALUES , Abstract Service Test . DATA VERSION , Abstract Service Test . LATEST VERSION FLAG SET , Business Object Data Status Entity . INVALID ) ;", "business Object Data Dao Test Helper . create Business Object Data Entity ( Abstract Service Test . NAMESPACE 2 , Abstract Service Test . BDEF NAME 2 , Abstract Service Test . FORMAT USAGE CODE 2 , Abstract Service Test . FORMAT FILE TYPE CODE , Abstract Service Test . FORMAT VERSION 2 , Abstract Service Test . PARTITION VALUE , Abstract Service Test . NO SUBPARTITION VALUES , Abstract Service Test . DATA VERSION , Abstract Service Test . LATEST VERSION FLAG SET , Business Object Data Status Entity . INVALID ) ;", "business Object Data Dao Test Helper . create Business Object Data Entity ( Abstract Service Test . NAMESPACE 2 , Abstract Service Test . BDEF NAME 2 , Abstract Service Test . FORMAT USAGE CODE 2 , Abstract Service Test . FORMAT FILE TYPE CODE 2 , Abstract Service Test . FORMAT VERSION 2 , Abstract Service Test . PARTITION VALUE , Abstract Service Test . NO SUBPARTITION VALUES , Abstract Service Test . DATA VERSION , Abstract Service Test . LATEST VERSION FLAG SET , Business Object Data Status Entity . VALID ) ; }"]}
{"ids": "30403", "code": ["@ Skip Validation @ Action ( value = STR_ ) public String reset ( ) {", "if ( LOGGER . is Debug Enabled ( ) ) LOGGER . debug ( STR_ + owner Name + STR_ + zone Id + STR_ + ward Id + STR_ + property Type + STR_ + notice Type + STR_ + notice Number + STR_ + notice From Date + STR_ + notice To Date + STR_ + index Number + STR_ + house Number ) ;", "owner Name = STR_ ;", "zone Id = - NUM_ ;", "ward Id = - NUM_ ;", "property Type = STR_ ;", "notice Type = STR_ ;", "notice Number = STR_ ;", "notice From Date = null ;", "notice To Date = null ;", "index Number = STR_ ;", "house Number = STR_ ;", "if ( LOGGER . is Debug Enabled ( ) ) LOGGER . debug ( STR_ ) ;", "return INDEX ; }"]}
{"ids": "33931", "code": ["public void check Options Valid ( ) {", "if ( alias ratio < NUM_ || alias ratio > NUM_ ) {", "throw new Runtime Exception ( STR_ ) ; }", "if ( null ratio < NUM_ || null ratio > NUM_ ) {", "throw new Runtime Exception ( STR_ ) ; }", "if ( maxsize <= NUM_ ) {", "throw new Runtime Exception ( STR_ + maxsize ) ; }", "if ( ! literals file . is Empty ( ) && literals level == Class Literals Mode . NONE ) {", "throw new Runtime Exception ( STR_ ) ; } }"]}
{"ids": "16961", "code": ["@ Override public UUID session Id ( ) {", "if ( session Id == null ) session Id = UUID . random UUID ( ) ;", "return session Id ; }"]}
{"ids": "84518", "code": ["private void read Object ( final Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "in . default Read Object ( ) ;", "final Calendar defining Calendar = Calendar . get Instance ( time Zone , locale ) ;", "init ( defining Calendar ) ; }"]}
{"ids": "33814", "code": ["@ Override public Mem Chunk Holder < Big Data P Mem Allocator > create Chunk ( long size , boolean autoreclaim ) {", "Mem Chunk Holder < Big Data P Mem Allocator > ret = null ;", "Long addr = m nvmasvc . allocate ( m nid , size , true ) ;", "if ( ( null == addr || NUM_ == addr ) && m activegc ) {", "force GC ( ) ;", "addr = m nvmasvc . allocate ( m nid , size , true ) ; }", "if ( null != addr && NUM_ != addr ) {", "ret = new Mem Chunk Holder < Big Data P Mem Allocator > ( this , addr , size ) ;", "ret . set Collector ( m chunkcollector ) ;", "if ( autoreclaim ) {", "m chunkcollector . register ( ret ) ; } }", "return ret ; }"]}
{"ids": "44493", "code": ["public int hash Code ( ) {", "int result = NUM_ ;", "if ( table Name != null ) {", "result = NUM_ * table Name . hash Code ( ) ; }", "if ( repository Name != null ) {", "result = NUM_ * repository Name . hash Code ( ) ; }", "return result ; }"]}
{"ids": "21056", "code": ["public static boolean is Not Null Value ( String s ) {", "return ( ( s != null ) && ! s . is Empty ( ) && ! s . equals ( Null Column Value Getter . get Null Str ( ) ) ) ; }"]}
{"ids": "40293", "code": ["public static String remove All ( String source , char to Remove ) {", "int to Remove Index = source . index Of ( to Remove ) ;", "if ( to Remove Index != - NUM_ ) {", "String Builder result = new String Builder ( source . length ( ) ) ;", "int source Index = NUM_ ;", "while ( to Remove Index != - NUM_ ) {", "result . append ( source . substring ( source Index , to Remove Index ) ) ;", "source Index = to Remove Index + NUM_ ;", "to Remove Index = source . index Of ( to Remove , source Index ) ;", "if ( to Remove Index == - NUM_ ) {", "result . append ( source . substring ( source Index , source . length ( ) ) ) ; } }", "return result . to String ( ) ; }", "else {", "return source ; } }"]}
{"ids": "56211", "code": ["public List < Entry < E > > as List ( ) {", "if ( non Null List == null ) {", "if ( array == null || array . length ( ) == NUM_ ) {", "non Null List = Collections . empty List ( ) ; }", "else {", "List < Entry < E > > list = new Array List < > ( array . length ( ) ) ;", "for ( int i = NUM_ ; i < array . length ( ) ; i ++ ) {", "E e = array . get ( i ) ;", "if ( e != null ) {", "list . add ( new Entry < > ( i , e ) ) ; } }", "non Null List = list ; } }", "return non Null List ; }"]}
{"ids": "7951", "code": ["public static Range find Cumulative Range Bounds ( Category Dataset dataset ) {", "Param Checks . null Not Permitted ( dataset , STR_ ) ;", "boolean all Items Null = true ;", "double minimum = NUM_ ;", "double maximum = NUM_ ;", "for ( int row = NUM_ ; row < dataset . get Row Count ( ) ; row ++ ) {", "double running Total = NUM_ ;", "for ( int column = NUM_ ; column <= dataset . get Column Count ( ) - NUM_ ; column ++ ) {", "Number n = dataset . get Value ( row , column ) ;", "if ( n != null ) {", "all Items Null = false ;", "double value = n . double Value ( ) ;", "if ( ! Double . is Na N ( value ) ) {", "running Total = running Total + value ;", "minimum = Math . min ( minimum , running Total ) ;", "maximum = Math . max ( maximum , running Total ) ; } } } }", "if ( ! all Items Null ) {", "return new Range ( minimum , maximum ) ; }", "else {", "return null ; } }"]}
{"ids": "55282", "code": ["private void add Hotkeys ( J Root Pane pane ) {", "for ( Hotkey hotkey : hotkeys ) {", "if ( does Hotkey Have Action ( hotkey ) && hotkey . type == Type . REGULAR ) {", "if ( pane == null ) {", "add Hotkey ( hotkey , main . get Root Pane ( ) ) ;", "for ( J Dialog popout : popouts . key Set ( ) ) {", "add Hotkey ( hotkey , popout . get Root Pane ( ) ) ; } }", "else {", "add Hotkey ( hotkey , pane ) ; } } } }"]}
{"ids": "8006", "code": ["static < T > Replay Promise < Void > all Replay ( final Duration timeout , final List < Promise < T > > promises ) {", "return all Replay ( timeout , System . current Time Millis ( ) , promises . to Array ( new Promise [ promises . size ( ) ] ) ) ; }"]}
{"ids": "22091", "code": ["public void check And Setup Boot Strap Info ( Db Client db Client ) {", "if ( on Standby ) {", "log . info ( STR_ ) ;", "return ; }", "if ( vdc List != null && vdc List . size ( ) > NUM_ ) {", "log . info ( STR_ , vdc List . size ( ) ) ;", "return ; }", "int retry Interval Secs = DBINIT RETRY INTERVAL ;", "boolean done = false ;", "boolean wait ;", "while ( ! done ) {", "wait = false ;", "Inter Process Lock lock = null ;", "try {", "lock = coordinator . get Lock ( get Bootstrap Lock Name ( ) ) ;", "log . info ( STR_ ) ;", "lock . acquire ( ) ;", "if ( is Geo Dbsvc ( ) ) {", "insert Default Root Tenant ( db Client ) ; }", "else {", "insert My Vdc Info ( db Client ) ;", "insert Vdc Version ( db Client ) ;", "insert Password History ( db Client ) ; }", "done = true ; }", "catch ( Exception e ) {", "if ( e instanceof Illegal State Exception ) {", "throw ( Illegal State Exception ) e ; }", "else {", "log . warn ( STR_ , retry Interval Secs , e ) ;", "wait = true ; } }", "finally {", "if ( lock != null ) {", "try {", "lock . release ( ) ; }", "catch ( Exception e ) {", "log . error ( STR_ , e ) ; } } }", "if ( wait ) {", "try {", "Thread . sleep ( retry Interval Secs * NUM_ ) ; }", "catch ( Interrupted Exception ex ) {", "log . warn ( STR_ , ex ) ; } } } }"]}
{"ids": "61224", "code": ["Object process EXPR ( Stylesheet Handler handler , String uri , String name , String raw Name , String value , Elem Template Element owner ) throws org . xml . sax . SAX Exception {", "try {", "X Path expr = handler . create X Path ( value , owner ) ;", "return expr ; }", "catch ( Transformer Exception te ) {", "throw new org . xml . sax . SAX Exception ( te ) ; } }"]}
{"ids": "49127", "code": ["private void check Access ( Unix Path file , boolean check Read , boolean check Write ) {", "Security Manager sm = System . get Security Manager ( ) ;", "if ( sm != null ) {", "if ( check Read ) file . check Read ( ) ;", "if ( check Write ) file . check Write ( ) ;", "sm . check Permission ( new Runtime Permission ( STR_ ) ) ; } }"]}
{"ids": "70003", "code": ["private static Spanned remove Image Span Objects ( Spanned spanned ) {", "Spannable String Builder builder = ( Spannable String Builder ) spanned ;", "Object [ ] spanned Objects = builder . get Spans ( NUM_ , builder . length ( ) , Object . class ) ;", "for ( int i = NUM_ ; i < spanned Objects . length ; i ++ ) {", "if ( spanned Objects [ i ] instanceof Image Span ) {", "Image Span image Span = ( Image Span ) spanned Objects [ i ] ;", "builder . replace ( spanned . get Span Start ( image Span ) , builder . get Span End ( image Span ) , STR_ ) ; } }", "return spanned ; }"]}
{"ids": "74933", "code": ["public Future < String > classify ( String snippet ) {", "final Executor Service service = Executors . new Single Thread Executor ( ) ;", "return service . submit ( new Classifying Task ( snippet ) ) ; }"]}
{"ids": "73156", "code": ["public void add Setter ( int i ) {", "for ( Scatter Plot Setter setter : setter List ) {", "if ( setter . get Index ( ) == i ) {", "return ; } }", "setter List . add ( new Scatter Plot Setter ( i ) ) ; }"]}
{"ids": "32558", "code": ["@ Override public synchronized void initialize ( ) {", "if ( ! m Root Directory . exists ( ) ) {", "if ( ! m Root Directory . mkdirs ( ) ) {", "Loger . debug ( String . format ( STR_ , m Root Directory . get Absolute Path ( ) ) ) ; }", "return ; }", "File [ ] files = m Root Directory . list Files ( ) ;", "if ( files == null ) {", "return ; }", "for ( File file : files ) {", "Buffered Input Stream fis = null ;", "try {", "fis = new Buffered Input Stream ( new File Input Stream ( file ) ) ;", "Cache Header entry = Cache Header . read Header ( fis ) ;", "entry . size = file . length ( ) ;", "put Entry ( entry . key , entry ) ; }", "catch ( IO Exception e ) {", "file . delete ( ) ; }", "finally {", "File Utils . close IO ( fis ) ; } } }"]}
{"ids": "27435", "code": ["public Client ( final Server Socket Channel server ) throws IO Exception {", "try {", "client = server . accept ( ) ;", "client . configure Blocking ( false ) ;", "if ( ! client . finish Connect ( ) ) throw new IO Exception ( STR_ ) ;", "client Selector = Selector . open ( ) ;", "client Key = client . register ( client Selector , Selection Key . OP READ ) ;", "if ( log . is Info Enabled ( ) ) log . info ( STR_ ) ; }", "catch ( IO Exception ex ) {", "close ( ) ;", "throw ex ; } }"]}
{"ids": "63365", "code": ["public Transfer write Bytes ( byte [ ] data ) throws IO Exception {", "if ( data == null ) {", "write Int ( - NUM_ ) ; }", "else {", "write Int ( data . length ) ;", "out . write ( data ) ; }", "return this ; }"]}
{"ids": "30200", "code": ["public static void stop ( String [ ] args ) {", "LOG . info ( STR_ ) ;", "System . exit ( NUM_ ) ; }"]}
{"ids": "15239", "code": ["public boolean add ( Object o ) {", "if ( ! list . contains ( o ) ) {", "list . add ( o ) ;", "return true ; }", "return false ; }"]}
{"ids": "24908", "code": ["private XY Plot initialize Lower Plot ( ) {", "non Heap Memory = new Y Interval Series Improved ( STR_ ) ;", "Y Interval Series Collection y Interval Series Collection = new Y Interval Series Collection ( ) ;", "y Interval Series Collection . add Series ( non Heap Memory ) ;", "Deviation Renderer renderer = new Deviation Renderer ( true , false ) ;", "renderer . set Base Shapes Visible ( true ) ;", "renderer . set Series Stroke ( NUM_ , new Basic Stroke ( NUM_ ) ) ;", "renderer . set Series Outline Stroke ( NUM_ , new Basic Stroke ( NUM_ ) ) ;", "renderer . set Series Shape ( NUM_ , new Ellipse 2 D . Double ( - NUM_ , - NUM_ , NUM_ , NUM_ ) ) ;", "renderer . set Base Tool Tip Generator ( new Standard XY Tool Tip Generator ( Standard XY Tool Tip Generator . DEFAULT TOOL TIP FORMAT , Date Format . get Date Time Instance ( ) , Number Format . get Number Instance ( ) ) ) ;", "final Number Axis range Axis = new Number Axis ( STR_ ) ;", "range Axis . set Range Type ( Range Type . POSITIVE ) ;", "System Information Data system Data = ( System Information Data ) data Access Service . get Last Data Object ( system Template ) ;", "if ( system Data != null ) {", "double max Non Heap Upper Range ;", "if ( system Data . get Max Non Heap Memory Size ( ) != - NUM_ ) {", "max Non Heap Upper Range = system Data . get Max Non Heap Memory Size ( ) / NUM_ ; }", "else if ( system Data . get Init Non Heap Memory Size ( ) != - NUM_ ) {", "max Non Heap Upper Range = ( system Data . get Init Non Heap Memory Size ( ) * NUM_ ) / NUM_ ; }", "else {", "max Non Heap Upper Range = NUM_ * NUM_ * NUM_ ; }", "if ( max Non Heap Upper Range > NUM_ ) {", "range Axis . set Range ( NUM_ , max Non Heap Upper Range ) ;", "range Axis . set Auto Range Minimum Size ( max Non Heap Upper Range ) ; } }", "final XY Plot subplot = new XY Plot ( y Interval Series Collection , null , range Axis , renderer ) ;", "subplot . set Axis Offset ( new Rectangle Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "subplot . set Range Axis Location ( Axis Location . TOP OR LEFT ) ;", "subplot . set Range Crosshair Visible ( true ) ;", "return subplot ; }"]}
{"ids": "84960", "code": ["public static void log Error ( Throwable exception , String message , Object ... args ) {", "message = Message Format . format ( message , args ) ;", "log ( I Status . ERROR , I Status . OK , message , exception ) ; }"]}
{"ids": "63108", "code": ["public void add ( Row r ) {", "list . add ( r ) ;", "memory += r . get Memory ( ) + Constants . MEMORY POINTER ;", "if ( max Memory > NUM_ && memory > max Memory ) {", "write All Rows ( ) ; }", "size ++ ; }"]}
{"ids": "59457", "code": ["private Message List View render Conversation ( Conversation Info conv Info , View parent ) {", "Message List View list = new Message List View ( parent . get Context ( ) ) ;", "conv Info . view = list ;", "list . set On Item Click Listener ( Message Click Listener . get Instance ( ) ) ;", "Message List Adapter adapter = conv Info . adapter ;", "if ( adapter == null ) {", "adapter = new Message List Adapter ( conv Info . conv , parent . get Context ( ) ) ;", "conv Info . adapter = adapter ; }", "list . set Adapter ( adapter ) ;", "list . set Selection ( adapter . get Count ( ) - NUM_ ) ;", "return list ; }"]}
{"ids": "77846", "code": ["public static int define Tag ( int ifd Id , short tag Id ) {", "return ( tag Id & NUM_ ) | ( ifd Id << NUM_ ) ; }"]}
{"ids": "50456", "code": ["public Application Id Verifier ( Set < String > supported Application Ids ) {", "this . supported Application Ids = Collections . unmodifiable Set ( new Hash Set < String > ( supported Application Ids ) ) ; }"]}
{"ids": "43813", "code": ["public Query Response search ( Resource resource , Solr Query query ) throws Solr Server Exception , IO Exception {", "String id Query = term Query ( Search Fields . URI FIELD NAME , Search Fields . get Resource ID ( resource ) ) ;", "query . set Query ( query . get Query ( ) + STR_ + id Query ) ;", "return search ( query ) ; }"]}
{"ids": "43715", "code": ["public static Local Date to Date ( String data , String modelo ) {", "return Local Date . parse ( data , formatter ( modelo ) ) ; }"]}
{"ids": "44418", "code": ["public static final Criterion all ( ) {", "return All Criterion . all ( ) ; }"]}
{"ids": "79354", "code": ["public static void transform ( Input Stream src Stream , Output Stream dest Stream , Input Stream stylesheet Stream , String output Format ) throws FOP Exception {", "Stream Source src = new Stream Source ( src Stream ) ;", "Stream Source stylesheet = stylesheet Stream == null ? null : new Stream Source ( stylesheet Stream ) ;", "Fop fop = create Fop Instance ( dest Stream , output Format ) ;", "transform ( src , stylesheet , fop ) ; }"]}
{"ids": "80877", "code": ["public boolean Insert Sym ( int type , String id , String context , String c Type , int line , int col ) {", "int i ;", "if ( type == PROCEDUREVAR || type == PROCESSVAR || type == PARAMETER ) {", "i = Find Sym ( GLOBAL , id , STR_ ) ;", "if ( i < symtab . size ( ) ) return false ;", "i = Find Sym ( id , context ) ;", "if ( i < symtab . size ( ) ) return false ; }", "else {", "i = Find Sym ( type , id , context ) ;", "if ( i < symtab . size ( ) ) return false ; }", "Sym Tab Entry se = new Sym Tab Entry ( type , id , context , c Type , line , col ) ;", "symtab . add Element ( se ) ;", "return true ; }"]}
{"ids": "33824", "code": ["public static Schema schema For Struct Type ( Struct Type struct Type ) {", "List < String > field Names = Lists . new Array List ( ) ;", "List < String > field Types = Lists . new Array List ( ) ;", "for ( Struct Field field : struct Type . fields ( ) ) {", "field Names . add ( field . name ( ) ) ;", "Data Type field Type = field . data Type ( ) ;", "if ( field Type . equals ( Data Types . String Type ) ) {", "field Types . add ( STR_ ) ; }", "else if ( field Type . equals ( Data Types . Float Type ) ) {", "field Types . add ( STR_ ) ; }", "else if ( field Type . equals ( Data Types . Double Type ) ) {", "field Types . add ( STR_ ) ; }", "else if ( field Type . equals ( Data Types . Integer Type ) ) {", "field Types . add ( STR_ ) ; }", "else if ( field Type . equals ( Data Types . Long Type ) ) {", "field Types . add ( STR_ ) ; }", "else if ( field Type . equals ( Data Types . Boolean Type ) ) {", "field Types . add ( STR_ ) ; }", "else {", "throw new Runtime Exception ( STR_ + field Type ) ; } }", "return Record Utils . schema For ( field Names , field Types ) ; }"]}
{"ids": "77355", "code": ["public Jetty Solr Runner start Jetty Solr Runner ( Jetty Solr Runner jetty ) throws Exception {", "jetty . start ( false ) ;", "jettys . add ( jetty ) ;", "return jetty ; }"]}
{"ids": "21562", "code": ["public Map < CIM Object Path , Set < String > > find Any SLO Storage Groups Can Be Re Used ( Storage System for Provider , Storage System storage , String policy Name , boolean associated To View ) throws WBEM Exception {", "Closeable Iterator < CIM Instance > group Instance Itr = null ;", "Closeable Iterator < CIM Object Path > volume Path Itr = null ;", "Map < CIM Object Path , Set < String > > group Paths = new Concurrent Hash Map < CIM Object Path , Set < String > > ( ) ;", "try {", "CIM Object Path controller Config Svc Path = cim Path . get Controller Config Svc Path ( storage ) ;", "log . info ( STR_ ) ;", "group Instance Itr = get Associator Instances ( for Provider , controller Config Svc Path , null , SE DEVICE MASKING GROUP , null , null , PS V 3 STORAGE GROUP PROPERTIES ) ;", "while ( group Instance Itr . has Next ( ) ) {", "CIM Instance group Instance = group Instance Itr . next ( ) ;", "CIM Object Path group Path = group Instance . get Object Path ( ) ;", "String group Name = CIM Property Factory . get Property Value ( group Instance , CP ELEMENT NAME ) ;", "String fast Setting = CIM Property Factory . get Property Value ( group Instance , CP FAST SETTING ) ;", "String group Associated To View = CIM Property Factory . get Property Value ( group Instance , CP ASSOCIATED TO VIEW ) ;", "Set < String > returned Native Guids = new Hash Set < String > ( ) ;", "if ( fast Setting . equals ( policy Name ) && associated To View == Boolean . parse Boolean ( group Associated To View ) && group Name . starts With ( Constants . STORAGE GROUP PREFIX ) ) {", "log . debug ( STR_ , group Name ) ;", "volume Path Itr = get Associator Names ( for Provider , group Path , null , CIM STORAGE VOLUME , null , null ) ;", "while ( volume Path Itr . has Next ( ) ) {", "returned Native Guids . add ( get Volume Native Guid ( volume Path Itr . next ( ) ) ) ; }", "group Paths . put ( group Path , returned Native Guids ) ; } } }", "finally {", "close CIM Iterator ( group Instance Itr ) ;", "close CIM Iterator ( volume Path Itr ) ; }", "return group Paths ; }"]}
{"ids": "45243", "code": ["protected void update Damage ( Document Event changes , Shape a , View Factory f ) {", "check Metrics ( ) ;", "Component host = get Container ( ) ;", "Element elem = get Element ( ) ;", "Document Event . Element Change ec = changes . get Change ( elem ) ;", "Element [ ] added = ( ec != null ) ? ec . get Children Added ( ) : null ;", "Element [ ] removed = ( ec != null ) ? ec . get Children Removed ( ) : null ;", "if ( ( ( added != null ) && ( added . length > NUM_ ) ) || ( ( removed != null ) && ( removed . length > NUM_ ) ) ) {", "if ( added != null && longest Line != null ) {", "int current Max Width = get Line Width ( longest Line ) ;", "for ( int i = NUM_ ; i < added . length ; i ++ ) {", "int width = get Line Width ( added [ i ] ) ;", "if ( width > current Max Width ) {", "current Max Width = width ;", "longest Line = added [ i ] ; } } }", "if ( removed != null ) {", "for ( int i = NUM_ ; i < removed . length ; i ++ ) {", "if ( removed [ i ] == longest Line ) {", "longest Line = null ;", "break ; } } }", "preference Changed ( null , true , true ) ;", "host . repaint ( ) ; }", "else {", "Element map = get Element ( ) ;", "int line = map . get Element Index ( changes . get Offset ( ) ) ;", "int end Line = map . get Element Index ( changes . get Offset ( ) + changes . get Length ( ) ) ;", "damage Line Range ( line , end Line , a , host ) ;", "get Longest Line ( ) ;", "if ( changes . get Type ( ) == Document Event . Event Type . INSERT ) {", "int w = get Line Width ( longest Line ) ;", "Element e = map . get Element ( line ) ;", "if ( e == longest Line ) {", "preference Changed ( null , true , false ) ; }", "else if ( get Line Width ( e ) > w ) {", "longest Line = e ;", "preference Changed ( null , true , false ) ; } }", "else if ( changes . get Type ( ) == Document Event . Event Type . REMOVE ) {", "if ( map . get Element ( line ) == longest Line ) {", "determine Longest Line ( ) ;", "preference Changed ( null , true , false ) ; } } } }"]}
{"ids": "3937", "code": ["public J Class Dependency ( J Class cl , String digest ) {", "class Name = cl . get Name ( ) ;", "String new Digest = get Digest ( ) ;", "if ( ! new Digest . equals ( digest ) ) {", "if ( log . is Loggable ( Level . FINE ) ) log . fine ( class Name + STR_ ) ;", "is Digest Modified = true ; } }"]}
{"ids": "65426", "code": ["public void dump ( Object data , Writer output ) {", "List < Object > list = new Array List < Object > ( NUM_ ) ;", "list . add ( data ) ;", "dump All ( list . iterator ( ) , output , null ) ; }"]}
{"ids": "57599", "code": ["public void clear ( ) {", "final Reentrant Lock lock = this . lock ;", "lock . lock ( ) ;", "try {", "Object [ ] array = queue ;", "int n = size ;", "size = NUM_ ;", "for ( int i = NUM_ ; i < n ; i ++ ) array [ i ] = null ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "41104", "code": ["public void add Insn To Head ( Insn insn ) {", "Ssa Insn new Insn = Ssa Insn . make From Rop ( insn , this ) ;", "insns . add ( get Count Phi Insns ( ) , new Insn ) ;", "parent . on Insn Added ( new Insn ) ; }"]}
{"ids": "39747", "code": ["public static String encode For URL ( String str ) {", "String Buffer result = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < str . length ( ) ; i ++ ) {", "char ch = str . char At ( i ) ;", "if ( ch >= STR_ && ch <= STR_ || ch >= STR_ && ch <= STR_ || ch >= STR_ && ch <= STR_ ) result . append ( ch ) ;", "else {", "switch ( ch ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "result . append ( ch ) ;", "break ;", "default :", "result . append ( STR_ ) ;", "result . append ( hexchars [ ( ch & NUM_ ) > > NUM_ ] ) ;", "result . append ( hexchars [ ch & NUM_ ] ) ;", "break ; } } }", "return result . to String ( ) ; }"]}
{"ids": "78680", "code": ["public void select Object ( Multi Touch Object multi Touch Object , Point Info touch Point ) {", "curr Touch Point . set ( touch Point ) ;", "if ( multi Touch Object != null ) {", "m Images . remove ( multi Touch Object ) ;", "m Images . add ( multi Touch Object ) ;", "if ( listener != null ) {", "listener . on Image Object Selected ( multi Touch Object ) ; } }", "else {", "if ( listener != null ) {", "listener . on Image Object Dropped ( ) ; } }", "invalidate ( ) ; }"]}
{"ids": "44619", "code": ["void verify ( ) {", "byte [ ] d = digest . digest ( ) ;", "if ( ! Message Digest . is Equal ( d , Base 64 . decode ( hash , Base 64 . DEFAULT ) ) ) {", "throw invalid Digest ( Jar File . MANIFEST NAME , name , jar Name ) ; }", "verified Entries . put ( name , certificates ) ; }"]}
{"ids": "73258", "code": ["public void randomize Incoming Weights ( ) {", "for ( Neuron n : get Neuron List ( ) ) {", "for ( Synapse s : n . get Fan In ( ) ) {", "s . set Lower Bound ( NUM_ ) ;", "s . set Strength ( s . get Upper Bound ( ) * Math . random ( ) ) ; } } }"]}
{"ids": "77478", "code": ["public void remove ( Queue Event event ) throws Keeper Exception , Interrupted Exception {", "Timer Context time = stats . time ( dir + STR_ ) ;", "try {", "String path = event . get Id ( ) ;", "String response Path = dir + STR_ + response prefix + path . substring ( path . last Index Of ( STR_ ) + NUM_ ) ;", "if ( zookeeper . exists ( response Path , true ) ) {", "zookeeper . set Data ( response Path , event . get Bytes ( ) , true ) ; }", "else {", "LOG . info ( STR_ + response Path + STR_ + STR_ ) ; }", "try {", "zookeeper . delete ( path , - NUM_ , true ) ; }", "catch ( Keeper Exception . No Node Exception ignored ) { } }", "finally {", "time . stop ( ) ; } }"]}
{"ids": "83120", "code": ["public List < Point > read Points ( String shapefile ) {", "List < Point > list = new Array List < Point > ( ) ;", "for ( Simple Feature feature : Shape File Reader . get All Features ( shapefile ) ) {", "Geometry geo = ( Geometry ) feature . get Default Geometry ( ) ;", "if ( geo instanceof Point ) {", "Point ps = ( Point ) geo ;", "for ( int i = NUM_ ; i < ps . get Num Geometries ( ) ; i ++ ) {", "Point p = ( Point ) ps . get Geometry N ( i ) ;", "list . add ( p ) ; } }", "else {", "throw new Runtime Exception ( STR_ ) ; } }", "return list ; }"]}
{"ids": "66055", "code": ["public String rate ( Properties ctx , int Window No , Grid Tab m Tab , Grid Field m Field , Object value ) {", "if ( value == null ) return STR_ ;", "Integer Currency ID = ( Integer ) m Tab . get Value ( STR_ ) ;", "int C Currency ID = Currency ID . int Value ( ) ;", "Integer Conversion Type ID = ( Integer ) m Tab . get Value ( STR_ ) ;", "int C Conversion Type ID = Conversion Type ID . int Value ( ) ;", "Timestamp Date Acct = ( Timestamp ) m Tab . get Value ( STR_ ) ;", "if ( Date Acct == null ) Date Acct = new Timestamp ( System . current Time Millis ( ) ) ;", "int C Acct Schema ID = Env . get Context As Int ( ctx , Window No , STR_ ) ;", "M Acct Schema as = M Acct Schema . get ( ctx , C Acct Schema ID ) ;", "int AD Client ID = Env . get Context As Int ( ctx , Window No , STR_ ) ;", "int AD Org ID = Env . get Context As Int ( ctx , Window No , STR_ ) ;", "Big Decimal Currency Rate = M Conversion Rate . get Rate ( C Currency ID , as . get C Currency ID ( ) , Date Acct , C Conversion Type ID , AD Client ID , AD Org ID ) ;", "log . fine ( STR_ + Currency Rate ) ;", "if ( Currency Rate == null ) Currency Rate = Env . ZERO ;", "m Tab . set Value ( STR_ , Currency Rate ) ;", "return STR_ ; }"]}
{"ids": "84549", "code": ["public boolean has Alpha Changed From ( float v ) {", "return ( Float . compare ( alpha , v ) != NUM_ ) ; }"]}
{"ids": "72925", "code": ["public Completable Future < Void > destroy ( ) {", "Completable Future < Void > ret ;", "if ( controller Proxy != null ) {", "ret = controller Proxy . destroy ( ) ;", "controller Proxy = null ; }", "else {", "ret = new Completable Future < > ( ) ;", "ret . complete ( null ) ; }", "return ret ; }"]}
{"ids": "72839", "code": ["@ Override public Request < String > logs ( Project Reference project Reference , long task Id ) {", "List < Dummy Runner Status > statuses = available Runner Statuses . get ( project Reference . name ( ) ) ;", "if ( statuses != null && ! statuses . is Empty ( ) ) {", "for ( Dummy Runner Status runner Status : statuses ) {", "if ( task Id == runner Status . process Id ( ) ) {", "return new Dummy Request < > ( runner Status . get Log ( ) ) ; } } }", "return new Dummy Request < > ( null ) ; }"]}
{"ids": "26189", "code": ["protected static Action Result Info perform Action ( Generic Value product Promo Action , Shopping Cart cart , Delegator delegator , Local Dispatcher dispatcher , Timestamp now Timestamp ) throws Generic Entity Exception , Cart Item Modify Exception {", "Action Result Info action Result Info = new Action Result Info ( ) ;", "perform Action ( action Result Info , product Promo Action , cart , delegator , dispatcher , now Timestamp ) ;", "return action Result Info ; }"]}
{"ids": "75452", "code": ["private boolean contains Expression ( String to Search , String expression ) {", "if ( to Search == null ) {", "return false ; }", "return to Search . equals ( expression ) || to Search . index Of ( expression ) >= NUM_ ; }"]}
{"ids": "83752", "code": ["public void clear Listeners ( ) {", "listeners . clear ( ) ; }"]}
{"ids": "70623", "code": ["private Var add Property ( Var Property property ) {", "if ( property . is Unique ( ) ) {", "test Unique Property ( ( Unique Var Property ) property ) ; }", "properties . add ( property ) ;", "return this ; }"]}
{"ids": "77684", "code": ["public boolean is Open ( ) {", "return open . get ( ) ; }"]}
{"ids": "63270", "code": ["public void free ( long pos , int length ) {", "int start = get Block ( pos ) ;", "int blocks = get Block Count ( length ) ;", "set . clear ( start , start + blocks ) ; }"]}
{"ids": "70727", "code": ["private void on Connection Status Changed ( int old Status , int status ) {", "if ( s Settings Mgr . show Status Icon ) {", "Notification Compat . Builder builder = new Notification Compat . Builder ( this ) ;", "builder . set When ( System . current Time Millis ( ) ) ;", "switch ( status ) {", "case Xmpp Manager . CONNECTED :", "builder . set Content Text ( get String ( R . string . main service connected , get Connection Status Action ( ) ) ) ;", "builder . set Small Icon ( get Image Status ( STATUS ICON GREEN ) ) ;", "break ;", "case Xmpp Manager . CONNECTING :", "builder . set Content Text ( get String ( R . string . main service connecting ) ) ;", "builder . set Small Icon ( get Image Status ( STATUS ICON ORANGE ) ) ;", "break ;", "case Xmpp Manager . DISCONNECTED :", "builder . set Content Text ( get String ( R . string . main service disconnected ) ) ;", "builder . set Small Icon ( get Image Status ( STATUS ICON RED ) ) ;", "break ;", "case Xmpp Manager . DISCONNECTING :", "builder . set Content Text ( get String ( R . string . main service disconnecting ) ) ;", "builder . set Small Icon ( get Image Status ( STATUS ICON ORANGE ) ) ;", "break ;", "case Xmpp Manager . WAITING TO CONNECT :", "case Xmpp Manager . WAITING FOR NETWORK :", "builder . set Content Text ( get String ( R . string . main service waiting to connect ) + STR_ + get Connection Status Action ( ) ) ;", "builder . set Small Icon ( get Image Status ( STATUS ICON BLUE ) ) ;", "break ;", "default :", "return ; }", "builder . set Content Intent ( s Pending Intent Launch Application ) ;", "builder . set Content Title ( Tools . APP NAME ) ;", "start Foreground ( NOTIFICATION CONNECTION , builder . get Notification ( ) ) ; } }"]}
{"ids": "83436", "code": ["private static File find Guacamole Home ( ) {", "File guac Home ;", "String desired Dir = System . get Property ( STR_ ) ;", "if ( desired Dir == null ) desired Dir = System . getenv ( STR_ ) ;", "if ( desired Dir != null ) guac Home = new File ( desired Dir ) ;", "else guac Home = new File ( System . get Property ( STR_ ) , STR_ ) ;", "return guac Home ; }"]}
{"ids": "32482", "code": ["void wait For Server Start ( ) throws Interrupted Exception {", "started . await ( get Test Timeout ( ) , Time Unit . MILLISECONDS ) ; }"]}
{"ids": "36597", "code": ["private static void draw Left Tab ( int x , int y , int w , int h , Graphics 2 D g 2 , Color UI Resource color ) {", "double r Top = Rapid Look And Feel . CORNER TAB RADIUS * NUM_ ;", "g 2 . set Color ( color ) ;", "g 2 . fill ( create Left Tab Shape ( x + NUM_ , y + NUM_ , w - NUM_ , h , r Top , true ) ) ;", "g 2 . set Color ( Colors . TAB BORDER ) ;", "g 2 . draw ( create Left Tab Shape ( x , y , w - NUM_ , h , r Top , false ) ) ; }"]}
{"ids": "25964", "code": ["private List < int [ ] > prepare Expected Data ( ) {", "List < int [ ] > index List = new Array List < > ( NUM_ ) ;", "int [ ] sort Index = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ;", "int [ ] sort Index Inverted = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ;", "index List . add ( NUM_ , sort Index ) ;", "index List . add ( NUM_ , sort Index Inverted ) ;", "return index List ; }"]}
{"ids": "25437", "code": ["public byte [ ] read Bytes ( final int count ) {", "int bytes To Read = count ;", "if ( bytes To Read < NUM_ ) bytes To Read = byte Stream . available ( ) ;", "byte [ ] bytes = new byte [ bytes To Read ] ;", "if ( current Bit Index >= NUM_ ) {", "for ( int i = NUM_ ; i < bytes To Read ; i ++ ) {", "bytes [ i ] = ( byte ) read ( Byte . SIZE ) ; } }", "else {", "byte Stream . read ( bytes , NUM_ , bytes . length ) ; }", "return bytes ; }"]}
{"ids": "77327", "code": ["public SSL Test Config ( ) {", "this ( false , false ) ; }"]}
{"ids": "77181", "code": ["@ Override public int hash Code ( ) {", "return NUM_ + Arrays . hash Code ( fields ) ; }"]}
{"ids": "40156", "code": ["public static String format Path ( List < Child Number > path ) {", "return PATH JOINER . join ( Iterables . concat ( Collections . singleton ( STR_ ) , path ) ) ; }"]}
{"ids": "32123", "code": ["public static Object read Invocation Result ( Platform Context ctx , Binary Raw Reader Ex reader ) throws Ignite Checked Exception {", "boolean success = reader . read Boolean ( ) ;", "if ( success ) return reader . read Object Detached ( ) ;", "else {", "boolean has Exception = reader . read Boolean ( ) ;", "if ( has Exception ) {", "Object native Err = reader . read Object Detached ( ) ;", "assert native Err != null ;", "throw ctx . create Native Exception ( native Err ) ; }", "else {", "String err Msg = reader . read String ( ) ;", "assert err Msg != null ;", "throw new Ignite Checked Exception ( err Msg ) ; } } }"]}
{"ids": "41779", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return STRING THING ;", "case NUM_ :", "return BYTE THING ;", "case NUM_ :", "return I 32 THING ;", "case NUM_ :", "return I 64 THING ;", "default :", "return null ; } }"]}
{"ids": "25729", "code": ["public static I Fits Header create ( String key ) {", "I Fits Header result = STANDARD KEYS . get ( key ) ;", "if ( result == null ) {", "result = new Fits Header Impl ( key , SOURCE . UNKNOWN , HDU . ANY , VALUE . ANY , STR_ ) ; }", "return result ; }"]}
{"ids": "9878", "code": ["protected String parse Payload ( String payload ) {", "String json = null ;", "if ( payload != null ) {", "try {", "json = ( payload . index Of ( STR_ ) == - NUM_ ) ? new String ( Files . read All Bytes ( Paths . get ( payload ) ) ) : payload ; }", "catch ( IO Exception e ) {", "log . fatal ( STR_ + payload , e ) ;", "System . exit ( NUM_ ) ; } }", "return json ; }"]}
{"ids": "48349", "code": ["boolean add Entry ( Policy Entry pe , int index ) {", "if ( index < NUM_ ) {", "policy Entries . add Element ( pe ) ;", "parser . add ( pe . get Grant Entry ( ) ) ; }", "else {", "Policy Entry orig Pe = policy Entries . element At ( index ) ;", "parser . replace ( orig Pe . get Grant Entry ( ) , pe . get Grant Entry ( ) ) ;", "policy Entries . set Element At ( pe , index ) ; }", "return true ; }"]}
{"ids": "48807", "code": ["public Writable Raster create Compatible Writable Raster ( int w , int h ) {", "if ( w <= NUM_ || h <= NUM_ ) {", "throw new Raster Format Exception ( STR_ + ( ( w <= NUM_ ) ? STR_ : STR_ ) ) ; }", "Sample Model sm = sample Model . create Compatible Sample Model ( w , h ) ;", "return new Integer Component Raster ( sm , new Point ( NUM_ , NUM_ ) ) ; }"]}
{"ids": "85281", "code": ["public static void create Or Clear Destination Folder ( String path ) {", "File fpath = new File ( path ) ;", "fpath . mkdirs ( ) ;", "delete Directory Contents ( path , false ) ; }"]}
{"ids": "73975", "code": ["static synchronized Jmri User Interface Configuration Provider find Provider ( Profile project ) {", "if ( providers . get ( project ) == null ) {", "providers . put ( project , new Jmri User Interface Configuration Provider ( project ) ) ; }", "return providers . get ( project ) ; }"]}
{"ids": "63315", "code": ["protected static long [ ] insert ( long [ ] old , int old Size , int pos , long x ) {", "long [ ] result ;", "if ( old != null && old . length > old Size ) {", "result = old ; }", "else {", "result = new long [ old Size + NUM_ + COPY THRESHOLD ] ;", "if ( pos > NUM_ ) {", "System . arraycopy ( old , NUM_ , result , NUM_ , pos ) ; } }", "if ( old != null && old Size - pos > NUM_ ) {", "System . arraycopy ( old , pos , result , pos + NUM_ , old Size - pos ) ; }", "result [ pos ] = x ;", "return result ; }"]}
{"ids": "60984", "code": ["private void register Object Read ( Object obj , int handle , boolean unshared ) throws IO Exception {", "if ( unshared ) {", "obj = UNSHARED OBJ ; }", "int index = handle - Object Stream Constants . base Wire Handle ;", "int size = objects Read . size ( ) ;", "while ( index > size ) {", "objects Read . add ( null ) ;", "++ size ; }", "if ( index == size ) {", "objects Read . add ( obj ) ; }", "else {", "objects Read . set ( index , obj ) ; } }"]}
{"ids": "29861", "code": ["private boolean discard Upstream Media Chunks ( int queue Length ) {", "if ( media Chunks . size ( ) <= queue Length ) {", "return false ; }", "long start Time Us = NUM_ ;", "long end Time Us = media Chunks . get Last ( ) . end Time Us ;", "Base Media Chunk removed = null ;", "while ( media Chunks . size ( ) > queue Length ) {", "removed = media Chunks . remove Last ( ) ;", "start Time Us = removed . start Time Us ;", "loading Finished = false ; }", "sample Queue . discard Upstream Samples ( removed . get First Sample Index ( ) ) ;", "notify Upstream Discarded ( start Time Us , end Time Us ) ;", "return true ; }"]}
{"ids": "8597", "code": ["public void close ( ) {", "animation . set Rate ( - NUM_ ) ;", "animation . play ( ) ;", "animation . set On Finished ( null ) ; }"]}
{"ids": "66772", "code": ["Map < String , Set < Call Location Model > > compute Filtered Taint Sources Map ( Set < Call Location Model > sources ) {", "if ( ! sources . is Empty ( ) ) {", "if ( f Filtered Taint Sources Map != null && ! f Filtered Taint Sources Map . is Empty ( ) ) {", "Map < String , Set < Call Location Model > > result = new Tree Map < String , Set < Call Location Model > > ( ) ;", "for ( Entry < String , Set < Call Location Model > > entry : f Filtered Taint Sources Map . entry Set ( ) ) {", "Set < Call Location Model > filtered Sources = new Tree Set < Call Location Model > ( ) ;", "for ( Call Location Model source : entry . get Value ( ) ) {", "if ( sources . contains ( source ) ) {", "filtered Sources . add ( source ) ; } }", "if ( ! filtered Sources . is Empty ( ) ) {", "String taint Kind = entry . get Key ( ) ;", "result . put ( taint Kind , filtered Sources ) ; } }", "return result ; } }", "return Collections . EMPTY MAP ; }"]}
{"ids": "50136", "code": ["public static boolean contains ( String s , Property expected ) {", "if ( s == null || s . length ( ) == NUM_ ) {", "return false ; }", "int i = NUM_ ;", "while ( i < s . length ( ) ) {", "int codepoint = Character . code Point At ( s , i ) ;", "Emoji e = map . get ( codepoint ) ;", "if ( e == null ) {", "return false ; }", "if ( ! e . is ( expected ) ) {", "return false ; }", "i += codepoint >= NUM_ ? NUM_ : NUM_ ; }", "return true ; }"]}
{"ids": "30762", "code": ["public Class to Class ( String codebase ) throws IO Exception , Class Not Found Exception {", "if ( name . char At ( NUM_ ) != STR_ ) {", "return Class Loading . load Class ( codebase , name , null , integrity , null ) ; }", "String Tokenizer st = new String Tokenizer ( name , STR_ ) ;", "String [ ] ifs = new String [ st . count Tokens ( ) ] ;", "for ( int i = NUM_ ; i < ifs . length ; i ++ ) {", "ifs [ i ] = st . next Token ( ) ; }", "return Class Loading . load Proxy Class ( codebase , ifs , null , integrity , null ) ; }"]}
{"ids": "69862", "code": ["private synchronized I Mqtt Token remove Mqtt Token ( Bundle data ) {", "String activity Token = data . get String ( Mqtt Service Constants . CALLBACK ACTIVITY TOKEN ) ;", "if ( activity Token != null ) {", "int token Number = Integer . parse Int ( activity Token ) ;", "I Mqtt Token token = token Map . get ( token Number ) ;", "token Map . delete ( token Number ) ;", "return token ; }", "return null ; }"]}
{"ids": "16198", "code": ["public static < T > Optional < T > lowest Common Ancestor ( Tree Def . Parented < T > tree Def , List < T > nodes ) {", "if ( nodes . size ( ) == NUM_ ) {", "return Optional . empty ( ) ; }", "else {", "Optional < T > so Far = Optional . of ( nodes . get ( NUM_ ) ) ;", "for ( int i = NUM_ ; i < nodes . size ( ) && so Far . is Present ( ) ; ++ i ) {", "so Far = lowest Common Ancestor ( tree Def , so Far . get ( ) , nodes . get ( i ) ) ; }", "return so Far ; } }"]}
{"ids": "59716", "code": ["public void copy Value Nodes To Me ( Entity from ) {", "for ( Value Node from Child : from . get Children ( Value Node . class ) ) {", "Value Node to Child = get Child ( from Child . get Name ( ) , Value Node . class ) ;", "to Child . set Value ( from Child . get Value ( ) ) ; } }"]}
{"ids": "76500", "code": ["public static World Icon Image from Pixel Transparency ( Buffered Image image ) {", "int image Margin Top = find First Solid Pixel From Top ( image ) ;", "int image Margin Bottom = find First Solid Pixel From Bottom ( image ) ;", "int frame Height = Math . max ( NUM_ , image . get Height ( ) - image Margin Top - image Margin Bottom ) ;", "return new World Icon Image ( image , NUM_ , image Margin Top , image . get Width ( ) , frame Height ) ; }"]}
{"ids": "21175", "code": ["private Map < String , String > check Vip Diff ( Property Info Ext local Props , Property Info Rest Rep rep ) {", "String vip Addr V 4 = rep . get Property ( STR_ ) ;", "String vip Addr V 6 = rep . get Property ( STR_ ) ;", "Map < String , String > diff Props = new Hash Map < String , String > ( ) ;", "if ( ! vip Addr V 4 . equals ( local Props . get Property ( STR_ ) ) ) {", "diff Props . put ( STR_ , vip Addr V 4 ) ;", "log . warn ( STR_ , vip Addr V 4 , local Props . get Property ( STR_ ) ) ; }", "if ( ! vip Addr V 6 . equals ( local Props . get Property ( STR_ ) ) ) {", "diff Props . put ( STR_ , vip Addr V 6 ) ;", "log . warn ( STR_ , vip Addr V 6 , local Props . get Property ( STR_ ) ) ; }", "return diff Props ; }"]}
{"ids": "28397", "code": ["private static double distance Sq ( Color a , Color b ) {", "double r Mean = ( a . get Red ( ) + b . get Red ( ) ) / NUM_ / NUM_ ;", "double dr = ( a . get Red ( ) - b . get Red ( ) ) / NUM_ ;", "double dg = ( a . get Green ( ) - b . get Green ( ) ) / NUM_ ;", "double db = ( a . get Blue ( ) - b . get Blue ( ) ) / NUM_ ;", "double d = ( NUM_ + r Mean ) * dr * dr + NUM_ * dg * dg + ( NUM_ + NUM_ - r Mean ) * db * db ;", "return d / NUM_ ; }"]}
{"ids": "14295", "code": ["private static Application Type new Type ( final String name ) throws Illegal Access Exception , Instantiation Exception {", "return new Application Type ( name , new Hash Map < String , Boolean > ( TYPE ACTIONS ) , Dumb Search Index . class , Dumb Save Index . class , Dumb Resource Name . class ) ; }"]}
{"ids": "52229", "code": ["private void read Object ( Object Input Stream s ) throws IO Exception , Class Not Found Exception {", "s . default Read Object ( ) ;", "if ( bayes Im == null ) {", "throw new Null Pointer Exception ( ) ; } }"]}
{"ids": "54794", "code": ["public int compare ( Source File o 1 , Source File o 2 ) {", "String n 1 = o 1 . get Name ( ) ;", "String n 2 = o 2 . get Name ( ) ;", "return n 1 . compare To ( n 2 ) ; }"]}
{"ids": "6867", "code": ["private static < T extends Psi Element > boolean process Children Of Type ( Psi Element element , Processor < T > processor , Class < T > psi Class , boolean reverse Order ) {", "Psi Element child = reverse Order ? element . get Last Child ( ) : element . get First Child ( ) ;", "while ( child != null ) {", "if ( psi Class . is Instance ( child ) ) {", "if ( ! processor . process ( ( T ) child ) ) {", "return true ; } }", "if ( process Children Of Type ( child , processor , psi Class , reverse Order ) ) {", "return true ; }", "child = reverse Order ? child . get Prev Sibling ( ) : child . get Next Sibling ( ) ; }", "return false ; }"]}
{"ids": "39112", "code": ["public Instances generate ( ) throws Exception {", "return generate ( STR_ ) ; }"]}
{"ids": "73873", "code": ["protected void load Chars ( Abstract MR Reply msg , Data Input Stream istream ) throws IO Exception {", "int i ;", "for ( i = NUM_ ; i < msg . max Size ( ) ; i ++ ) {", "byte char 1 = read Byte Protected ( istream ) ;", "if ( flush Receive Chars ) {", "log . warn ( STR_ , msg . to String ( ) ) ;", "msg . flush ( ) ;", "i = NUM_ ;", "flush Receive Chars = false ; }", "if ( can Receive ( ) ) {", "msg . set Element ( i , char 1 ) ;", "if ( end Of Message ( msg ) ) {", "break ; } }", "else {", "i -- ;", "log . error ( STR_ , Integer . to Hex String ( char 1 ) ) ; } } }"]}
{"ids": "38171", "code": ["public String evaluate ( Associator associator , Instances data ) throws Exception {", "long start Time ;", "long end Time ;", "start Time = System . current Time Millis ( ) ;", "associator . build Associations ( data ) ;", "end Time = System . current Time Millis ( ) ;", "m Result = new String Buffer ( associator . to String ( ) ) ;", "m Result . append ( STR_ ) ;", "m Result . append ( STR_ + ( ( ( double ) ( end Time - start Time ) ) / NUM_ ) + STR_ ) ;", "m Result . append ( STR_ ) ;", "return m Result . to String ( ) ; }"]}
{"ids": "32305", "code": ["public static Integer int Value ( String prop Name , Integer dflt ) {", "String sys Prop = get Property ( prop Name ) ;", "return ( sys Prop != null && ! sys Prop . is Empty ( ) ) ? Integer . get Integer ( sys Prop ) : dflt ; }"]}
{"ids": "35825", "code": ["public NS Number ( int i ) {", "double Value = long Value = i ;", "type = INTEGER ; }"]}
{"ids": "21498", "code": ["private int compare Version Parts ( String version 1 , String version 2 ) {", "int compare = NUM_ ;", "Integer v 1 ;", "Integer v 2 ;", "try {", "v 1 = version 1 != null ? Integer . parse Int ( version 1 ) : NUM_ ; }", "catch ( Number Format Exception e ) {", "v 1 = NUM_ ; }", "try {", "v 2 = version 2 != null ? Integer . parse Int ( version 2 ) : NUM_ ; }", "catch ( Number Format Exception e ) {", "v 2 = NUM_ ; }", "if ( v 1 > v 2 ) {", "compare = NUM_ ; }", "else if ( v 1 < v 2 ) {", "compare = - NUM_ ; }", "else {", "compare = NUM_ ; }", "return compare ; }"]}
{"ids": "73450", "code": ["public void pre Save Init ( ) {", "persistent Data . clear ( ) ;", "for ( int i = NUM_ ; i < get Num Points ( ) ; i ++ ) {", "persistent Data . add ( get Point ( i ) ) ; } }"]}
{"ids": "56551", "code": ["public void essential ( final Consumer < On Complete > fn ) {", "this . essential = fn ;", "if ( done ) {", "fn . accept ( build On Complete ( ) ) ; } }"]}
{"ids": "16883", "code": ["public void add Listener ( I Message Listener new Listener ) {", "synchronized ( listeners ) {", "listeners . add ( new Listener ) ; } }"]}
{"ids": "35109", "code": ["public void add Words ( String phrase ) {", "if ( phrase . equals ( STR_ ) || phrase . equals ( STR_ ) ) return ;", "String [ ] words = spliterator ( phrase ) ;", "if ( words . length < NUM_ ) return ;", "for ( int i = NUM_ ; i < words . length ; i ++ ) {", "if ( i == NUM_ ) {", "Vector < String > start Words = chain . get ( STR_ ) ;", "start Words . add ( words [ i ] ) ;", "Vector < String > suffix = chain . get ( words [ i ] ) ;", "if ( suffix == null ) {", "suffix = new Vector < > ( ) ;", "suffix . add ( words [ i + NUM_ ] ) ;", "chain . put ( words [ i ] , suffix ) ; } }", "else if ( i == words . length - NUM_ ) {", "Vector < String > end Words = chain . get ( STR_ ) ;", "end Words . add ( words [ i ] ) ; }", "else {", "Vector < String > suffix = chain . get ( words [ i ] ) ;", "if ( suffix == null ) {", "suffix = new Vector < > ( ) ;", "suffix . add ( words [ i + NUM_ ] ) ;", "chain . put ( words [ i ] , suffix ) ; }", "else {", "suffix . add ( words [ i + NUM_ ] ) ;", "chain . put ( words [ i ] , suffix ) ; } } } }"]}
{"ids": "25470", "code": ["@ HLE Unimplemented @ HLE Function ( nid = NUM_ , version = NUM_ ) public int sce Net Adhoc Matching Abort Send Data ( @ Check Argument ( STR_ ) int matching Id , psp Net Mac Address mac Address ) {", "return NUM_ ; }"]}
{"ids": "60928", "code": ["public Short Buffer put ( short [ ] src , int src Offset , int short Count ) {", "Arrays . check Offset And Count ( src . length , src Offset , short Count ) ;", "if ( short Count > remaining ( ) ) {", "throw new Buffer Overflow Exception ( ) ; }", "for ( int i = src Offset ; i < src Offset + short Count ; ++ i ) {", "put ( src [ i ] ) ; }", "return this ; }"]}
{"ids": "10937", "code": ["public boolean handle Directory ( File directory ) {", "if ( DEBUG ) {", "logger . fine ( STR_ + directory . get Absolute Path ( ) ) ; }", "return true ; }"]}
{"ids": "67246", "code": ["public static void choose ( int n , int [ ] results ) {", "int k = results . length ;", "for ( int i = NUM_ ; i < k ; i ++ ) {", "boolean done = false ;", "while ( ! done ) {", "results [ i ] = RANDOM . next Int ( n ) ;", "done = true ;", "for ( int j = NUM_ ; j < i ; j ++ ) {", "if ( results [ j ] == results [ i ] ) {", "done = false ; } } } } }"]}
{"ids": "37791", "code": ["public String print Leaf Models Tip Text ( ) {", "return STR_ ; }"]}
{"ids": "23842", "code": ["public Set register Client Interest List ( Object input Client ID , List keys , boolean updates As Invalidates ) {", "Long client ID = get Client ID For Maps ( input Client ID ) ;", "Set keys Registered = new Hash Set ( keys ) ;", "synchronized ( interest List Lock ) {", "Map < Object , Set > koi = updates As Invalidates ? get Keys Of Interest Inv ( ) : get Keys Of Interest ( ) ;", "Copy On Write Hash Set interest List = ( Copy On Write Hash Set ) koi . get ( client ID ) ;", "if ( interest List == null ) {", "interest List = new Copy On Write Hash Set ( ) ;", "koi . put ( client ID , interest List ) ; }", "else {", "keys Registered . remove All ( interest List . get Snapshot ( ) ) ; }", "interest List . add All ( keys ) ;", "if ( this . region != null && this . is Local Profile ) {", "send Profile Operation ( client ID , operation Type . REGISTER KEYS , keys , updates As Invalidates ) ; } }", "return keys Registered ; }"]}
{"ids": "9031", "code": ["public static String replace ( String in String , String old Pattern , String new Pattern ) {", "if ( ! has Length ( in String ) || ! has Length ( old Pattern ) || new Pattern == null ) {", "return in String ; }", "String Builder sb = new String Builder ( ) ;", "int pos = NUM_ ;", "int index = in String . index Of ( old Pattern ) ;", "int pat Len = old Pattern . length ( ) ;", "while ( index >= NUM_ ) {", "sb . append ( in String . substring ( pos , index ) ) ;", "sb . append ( new Pattern ) ;", "pos = index + pat Len ;", "index = in String . index Of ( old Pattern , pos ) ; }", "sb . append ( in String . substring ( pos ) ) ;", "return sb . to String ( ) ; }"]}
{"ids": "3057", "code": ["public static List < String > to Path Parts ( String encoded Path ) {", "if ( encoded Path == null || encoded Path . length ( ) == NUM_ ) {", "return null ; }", "List < String > result = new Array List < String > ( ) ;", "int cur = NUM_ ;", "boolean not Done = true ;", "while ( not Done ) {", "int slash = encoded Path . index Of ( STR_ , cur ) ;", "not Done = slash != - NUM_ ;", "String sub ;", "if ( not Done ) {", "sub = encoded Path . substring ( cur , slash ) ; }", "else {", "sub = encoded Path . substring ( cur ) ; }", "result . add ( Char Escapers . decode Uri ( sub ) ) ;", "cur = slash + NUM_ ; }", "return result ; }"]}
{"ids": "11437", "code": ["@ Suppress Warnings ( STR_ ) public < T extends Point 2 D > T inverse ( double x , double y , T ret val ) {", "if ( ret val == null ) {", "ret val = ( T ) new Lat Lon Point . Double ( ) ; }", "double px = x + ul . x ;", "double py = - y + ul . y + oy ;", "if ( px > Proj Math . round Adjust ( world . x / NUM_ ) ) {", "px = Proj Math . round Adjust ( world . x / NUM_ ) ; }", "else if ( px < Proj Math . round Adjust ( - world . x / NUM_ ) ) {", "px = Proj Math . round Adjust ( - world . x / NUM_ ) ; }", "if ( py > Proj Math . round Adjust ( world . y / NUM_ ) ) {", "py = Proj Math . round Adjust ( world . y / NUM_ ) ; }", "else if ( py < Proj Math . round Adjust ( - world . y / NUM_ ) ) {", "py = Proj Math . round Adjust ( - world . y / NUM_ ) ; }", "double lat = normalize Latitude ( py / spps y ) ;", "double lon = wrap Longitude ( ( px / spps x ) + center X ) ;", "ret val . set Location ( Math . to Degrees ( lon ) , Math . to Degrees ( lat ) ) ;", "return ret val ; }"]}
{"ids": "46497", "code": ["public void install ( J Editor Pane c ) {", "c . add Caret Listener ( input Attribute Updater ) ;", "c . add Property Change Listener ( input Attribute Updater ) ;", "Caret caret = c . get Caret ( ) ;", "if ( caret != null ) {", "input Attribute Updater . update Input Attributes ( caret . get Dot ( ) , caret . get Mark ( ) , c ) ; } }"]}
{"ids": "65959", "code": ["static public M Print Format create From Report View ( Properties ctx , int AD Report View ID , String Report Name ) {", "int AD Client ID = Env . get AD Client ID ( ctx ) ;", "s log . info ( STR_ + AD Report View ID + STR_ + AD Client ID + STR_ + Report Name ) ;", "M Print Format pf = new M Print Format ( ctx , NUM_ , null ) ;", "pf . set AD Report View ID ( AD Report View ID ) ;", "String sql = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ;", "Prepared Statement pstmt = null ;", "Result Set rs = null ;", "boolean error = true ;", "try {", "pstmt = DB . prepare Statement ( sql , null ) ;", "pstmt . set Int ( NUM_ , AD Report View ID ) ;", "pstmt . set Int ( NUM_ , AD Client ID ) ;", "rs = pstmt . execute Query ( ) ;", "if ( rs . next ( ) ) {", "String name = Report Name ;", "if ( name == null || name . length ( ) == NUM_ ) name = rs . get String ( NUM_ ) ;", "int count = rs . get Int ( NUM_ ) ;", "if ( count > NUM_ ) name += STR_ + count ;", "pf . set Name ( name ) ;", "pf . set AD Print Color ID ( rs . get Int ( NUM_ ) ) ;", "pf . set AD Print Font ID ( rs . get Int ( NUM_ ) ) ;", "pf . set AD Print Paper ID ( rs . get Int ( NUM_ ) ) ;", "pf . set AD Table ID ( rs . get Int ( NUM_ ) ) ;", "error = false ; }", "else s log . log ( Level . SEVERE , STR_ + AD Report View ID ) ; }", "catch ( SQL Exception e ) {", "s log . log ( Level . SEVERE , sql , e ) ; }", "finally {", "DB . close ( rs , pstmt ) ;", "rs = null ;", "pstmt = null ; }", "if ( error ) return null ;", "if ( ! pf . save ( ) ) return null ;", "pf . set Items ( create Items ( ctx , pf ) ) ;", "return pf ; }"]}
{"ids": "60741", "code": ["private boolean compare And Increment Worker Count ( int expect ) {", "return ctl . compare And Set ( expect , expect + NUM_ ) ; }"]}
{"ids": "39261", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > result = new Vector < Option > ( ) ;", "Enumeration < Option > enm = super . list Options ( ) ;", "while ( enm . has More Elements ( ) ) result . add ( enm . next Element ( ) ) ;", "result . add Element ( new Option ( STR_ + stopwords Tip Text ( ) + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ;", "return result . elements ( ) ; }"]}
{"ids": "70388", "code": ["private void enable Operation Buttons ( ) {", "btn Or . set Enabled ( true ) ;", "btn And . set Enabled ( true ) ;", "btn Right Paren . set Enabled ( true ) ; }"]}
{"ids": "86339", "code": ["private double compute Modifier Unbounded ( final double x ) {", "return exp Multiplier * Math . exp ( - x * x / exp Member ) ; }"]}
{"ids": "37931", "code": ["@ Override public boolean on Unit ( Graphics g , int x , int y , int w , int h ) {", "Font Metrics fm = g . get Font Metrics ( ) ;", "int l = ( int ) ( m x * w ) - fm . string Width ( m id ) / NUM_ ;", "int t = ( int ) ( m y * h ) - fm . get Height ( ) / NUM_ ;", "if ( x < l || x > l + fm . string Width ( m id ) + NUM_ || y < t || y > t + fm . get Height ( ) + fm . get Descent ( ) + NUM_ ) {", "return false ; }", "return true ; }"]}
{"ids": "67372", "code": ["public static Integer to Integer ( String str ) {", "try {", "return Integer . value Of ( str ) ; }", "catch ( Exception ex ) {", "return null ; } }"]}
{"ids": "28347", "code": ["private static void fill With Empty Rows ( Data Table data , int count ) {", "while ( data . get Row Count ( ) < count ) {", "Double [ ] empty Row = new Double [ data . get Column Count ( ) ] ;", "Arrays . fill ( empty Row , NUM_ ) ;", "data . add ( empty Row ) ; } }"]}
{"ids": "25370", "code": ["public Fragmented Handshake Message ( byte [ ] fragmented Bytes , Handshake Type type , int fragment Offset , int message Length , Inet Socket Address peer Address ) {", "super ( peer Address ) ;", "this . type = type ;", "this . message Length = message Length ;", "this . fragmented Bytes = Arrays . copy Of ( fragmented Bytes , fragmented Bytes . length ) ;", "set Fragment Offset ( fragment Offset ) ;", "set Fragment Length ( fragmented Bytes . length ) ; }"]}
{"ids": "86274", "code": ["private static void delete Retry Counter ( Weak Reference < Context > weak Context , String filename , int max Retry Attempts ) {", "Context context = null ;", "if ( weak Context != null ) {", "context = weak Context . get ( ) ;", "if ( context != null ) {", "Shared Preferences preferences = context . get Shared Preferences ( ARTISAN SDK , Context . MODE PRIVATE ) ;", "Shared Preferences . Editor editor = preferences . edit ( ) ;", "editor . remove ( STR_ + filename ) ;", "editor . apply ( ) ; } } }"]}
{"ids": "73344", "code": ["private void initialize Sparse Slider ( ) {", "connection Density Slider . set Major Tick Spacing ( NUM_ ) ;", "connection Density Slider . set Minor Tick Spacing ( NUM_ ) ;", "connection Density Slider . set Paint Ticks ( true ) ;", "Hashtable < Integer , J Label > label Table 2 = new Hashtable < Integer , J Label > ( ) ;", "label Table 2 . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "label Table 2 . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "connection Density Slider . set Label Table ( label Table 2 ) ;", "connection Density Slider . set Paint Labels ( true ) ; }"]}
{"ids": "45835", "code": ["protected void update Tree ( Document Event event ) {", "updating Selection = true ;", "try {", "Tree Model model = get Tree Model ( ) ;", "Object root = model . get Root ( ) ;", "for ( int counter = model . get Child Count ( root ) - NUM_ ; counter >= NUM_ ; counter -- ) {", "update Tree ( event , ( Element ) model . get Child ( root , counter ) ) ; } }", "finally {", "updating Selection = false ; } }"]}
{"ids": "65151", "code": ["private static Shape bottom Edge ( Buffered Image image , General Path path , int start ) {", "int lastj = NUM_ ;", "Point 2 D p 1 = path . get Current Point ( ) ;", "Point 2 D p 2 = null ;", "Line 2 D line = new Line 2 D . Float ( ) ;", "for ( int i = start ; i < image . get Width ( ) ; i += sample ) {", "boolean a Point Exists On This Line = false ;", "for ( int j = image . get Height ( ) - NUM_ ; j >= NUM_ ; j -= sample ) {", "if ( ( image . get RGB ( i , j ) & NUM_ ) != NUM_ ) {", "Point 2 D p = new Point 2 D . Float ( i , j ) ;", "a Point Exists On This Line = true ;", "p 2 = detect Line ( p 1 , p 2 , p , line , path ) ;", "lastj = j ;", "break ; } }", "if ( a Point Exists On This Line == false ) {", "break ; } }", "return right Edge ( image , path , lastj ) ; }"]}
{"ids": "2006", "code": ["private boolean repeating Preview ( Object tag ) {", "try {", "Capture Request . Builder builder = m Device . create Capture Request ( Camera Device . TEMPLATE PREVIEW ) ;", "builder . add Target ( m Preview Surface ) ;", "builder . set ( Capture Request . CONTROL MODE , Camera Metadata . CONTROL MODE AUTO ) ;", "add Baseline Capture Keys To Request ( builder ) ;", "m Capture Session . set Repeating Request ( builder . build ( ) , m Capture Callback , m Camera Handler ) ;", "Log . v ( TAG , String . format ( STR_ , m Zoom Value ) ) ;", "return true ; }", "catch ( Camera Access Exception ex ) {", "Log . e ( TAG , STR_ , ex ) ;", "return false ; } }"]}
{"ids": "15419", "code": ["private XML Element new Element ( String name , String value , Array List attributes ) throws Exception {", "return new Element ( name , value , attributes , false ) ; }"]}
{"ids": "74458", "code": ["public void mouse Pressed ( Mouse Event e ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + ( e . get Modifiers ( ) & Mouse Event . BUTTON 1 MASK ) + STR_ + e . is Popup Trigger ( ) + STR_ + ( e . get Modifiers ( ) & ( Mouse Event . ALT MASK + Mouse Event . META MASK + Mouse Event . CTRL MASK ) ) + ( STR_ + Mouse Event . ALT MASK + STR_ + Mouse Event . META MASK + STR_ + Mouse Event . CTRL MASK ) ) ; }", "if ( e . is Popup Trigger ( ) && parent Frame . is Selected ( ) ) {", "try {", "menu . show ( e . get Component ( ) , e . get X ( ) , e . get Y ( ) ) ; }", "catch ( java . awt . Illegal Component State Exception cs ) { }", "e . consume ( ) ; } }"]}
{"ids": "41681", "code": ["public void define Fill Style ( Color [ ] colors , int [ ] ratios , Transform matrix , boolean radial ) {", "Gradient Fill fill = new Gradient Fill ( colors , ratios , matrix , radial ) ;", "elements . add ( fill ) ;", "for ( int i = NUM_ ; i < colors . length ; i ++ ) {", "if ( colors [ i ] == null ) {", "continue ; }", "if ( colors [ i ] instanceof Alpha Color ) {", "has Alpha = true ; } } }"]}
{"ids": "271", "code": ["public boolean is Orphan ( Sha 256 Hash block ) {", "lock . lock ( ) ;", "try {", "return orphan Blocks . contains Key ( block ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "61947", "code": ["protected Boolean Val ( boolean b ) {", "this . b = b ; }"]}
{"ids": "25507", "code": ["private void relocate From Headers ( Byte Buffer f , Sce Module module , int base Address , Elf 32 elf , int elf Offset ) throws IO Exception {", "int i = NUM_ ;", "for ( Elf 32 Program Header phdr : elf . get Program Header List ( ) ) {", "if ( phdr . get P type ( ) == NUM_ ) {", "int Rel Count = phdr . get P filesz ( ) / Elf 32 Relocate . sizeof ( ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( String . format ( STR_ , i , Rel Count ) ) ; }", "f . position ( elf Offset + phdr . get P offset ( ) ) ;", "relocate From Buffer ( f , module , base Address , elf , Rel Count , true ) ;", "return ; }", "else if ( phdr . get P type ( ) == NUM_ ) {", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( String . format ( STR_ , i , phdr . get P filesz ( ) ) ) ; }", "f . position ( elf Offset + phdr . get P offset ( ) ) ;", "relocate From Buffer A 1 ( f , elf , base Address , i , phdr . get P filesz ( ) ) ;", "return ; }", "i ++ ; }", "for ( Elf 32 Section Header shdr : elf . get Section Header List ( ) ) {", "if ( must Relocate ( elf , shdr ) ) {", "int Rel Count = shdr . get Sh size ( ) / Elf 32 Relocate . sizeof ( ) ;", "if ( log . is Debug Enabled ( ) ) {", "log . debug ( shdr . get Sh namez ( ) + STR_ + Rel Count + STR_ ) ; }", "f . position ( elf Offset + shdr . get Sh offset ( ) ) ;", "relocate From Buffer ( f , module , base Address , elf , Rel Count , shdr . get Sh type ( ) != Elf 32 Section Header . SHT REL ) ; } } }"]}
{"ids": "21679", "code": ["public List < Volume > validate Volumes ( Storage System storage System , List < Volume > volumes , boolean delete , boolean remediate , Val Ck ... checks ) {", "try {", "client = V Plex Controller Utils . get V Plex API Client ( V Plex Api Factory . get Instance ( ) , storage System , get Db Client ( ) ) ;", "for ( Volume volume : volumes ) {", "try {", "log . info ( String . format ( STR_ , volume . get Label ( ) , volume . get Native Id ( ) , volume . get Id ( ) , checks . to String ( ) ) ) ;", "validate Volume ( volume , delete , remediate , checks ) ; }", "catch ( Exception ex ) {", "log . error ( STR_ + volume . get Id ( ) , ex ) ; } } }", "catch ( Exception ex ) {", "log . error ( STR_ + storage System . get Id ( ) , ex ) ; }", "return remediated Volumes ; }"]}
{"ids": "69315", "code": ["private void draw X Axis Marker ( Canvas canvas , double value , Number Format number Format , int spacing ) {", "String marker = chart By Distance ? number Format . format ( value ) : String Utils . format Elapsed Time ( ( long ) value ) ;", "Rect rect = get Rect ( x Axis Marker Paint , marker ) ;", "canvas . draw Text ( marker , get X ( value ) , top Border + effective Height + spacing + rect . height ( ) , x Axis Marker Paint ) ; }"]}
{"ids": "75509", "code": ["public static < E > Array List < E > list ( E ... elements ) {", "Array List < E > list = new Array List < E > ( ) ;", "for ( E element : elements ) list . add ( element ) ;", "return list ; }"]}
{"ids": "71757", "code": ["public static String encode ( Array List < Geo Point > polyline , int precision ) {", "String Builder encoded Points = new String Builder ( ) ;", "int prev lat = NUM_ , prev lng = NUM_ ;", "for ( Geo Point trackpoint : polyline ) {", "int lat = trackpoint . get Latitude E 6 ( ) / precision ;", "int lng = trackpoint . get Longitude E 6 ( ) / precision ;", "encoded Points . append ( encode Signed Number ( lat - prev lat ) ) ;", "encoded Points . append ( encode Signed Number ( lng - prev lng ) ) ;", "prev lat = lat ;", "prev lng = lng ; }", "return encoded Points . to String ( ) ; }"]}
{"ids": "63881", "code": ["private static boolean is Text Obscured ( J Component c , String s ) {", "Graphics g = c . get Graphics ( ) ;", "Font Metrics fm = g . get Font Metrics ( c . get Font ( ) ) ;", "int sw = fm . string Width ( s ) ;", "return ( sw > c . get Width ( ) ) ; }"]}
{"ids": "57476", "code": ["public void add ( Permission permission ) {", "perms . put ( permission , permission ) ; }"]}
{"ids": "66381", "code": ["private int encrypted Column Length ( int col Length ) {", "String str = STR_ ;", "for ( int i = NUM_ ; i < col Length ; i ++ ) {", "str += STR_ ; }", "str = Secure Engine . encrypt ( str ) ;", "return str . length ( ) ; }"]}
{"ids": "78476", "code": ["private Cn A Tree Element unify Links ( Cn A Tree Element source Element , Cn A Tree Element destination Element ) throws Command Exception {", "for ( Cn A Link link Down : source Element . get Links Down ( ) ) {", "create Link ( destination Element , link Down . get Dependency ( ) , link Down . get Relation Id ( ) ) ; }", "for ( Cn A Link link Up : source Element . get Links Up ( ) ) {", "create Link ( link Up . get Dependant ( ) , destination Element , link Up . get Relation Id ( ) ) ; }", "return destination Element ; }"]}
{"ids": "46685", "code": ["private boolean flush Accumulated Region ( ) {", "boolean success = true ;", "if ( accumulated X != Integer . MAX VALUE ) {", "Sub Region Showable bs Sub Region = ( Sub Region Showable ) buffer Strategy ;", "boolean contents Lost = buffer Strategy . contents Lost ( ) ;", "if ( ! contents Lost ) {", "bs Sub Region . show ( accumulated X , accumulated Y , accumulated Max X , accumulated Max Y ) ;", "contents Lost = buffer Strategy . contents Lost ( ) ; }", "if ( contents Lost ) {", "if ( LOGGER . is Loggable ( Platform Logger . Level . FINER ) ) {", "LOGGER . finer ( STR_ ) ; }", "buffer Info . set In Sync ( false ) ;", "success = false ; } }", "reset Accumulated ( ) ;", "return success ; }"]}
{"ids": "81895", "code": ["public void clear Pie Segments ( ) {", "m Pie Segment List . clear ( ) ; }"]}
{"ids": "75846", "code": ["public static String random Alphanumerical ( final int len ) {", "final String Builder sb = new String Builder ( len ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "sb . append ( AB . char At ( random . next Int ( AB . length ( ) ) ) ) ; }", "return sb . to String ( ) ; }"]}
{"ids": "50258", "code": ["static int svd imax ( int a , int b ) {", "return Math . max ( a , b ) ; }"]}
{"ids": "49198", "code": ["private boolean is Mime Format ( long format , String primary Type ) {", "String nat = get Native For Format ( format ) ;", "if ( nat == null ) {", "return false ; }", "try {", "Data Flavor df = new Data Flavor ( nat ) ;", "if ( primary Type . equals ( df . get Primary Type ( ) ) ) {", "return true ; } }", "catch ( Exception e ) { }", "return false ; }"]}
{"ids": "78632", "code": ["private static String convert Relevance ( int relevance ) {", "String Builder sb = new String Builder ( ) ;", "while ( relevance > NUM_ ) {", "sb . insert ( NUM_ , REVERSE CHAR MAP [ relevance % NUM_ ] ) ;", "relevance = relevance / NUM_ ; }", "return sb . to String ( ) ; }"]}
{"ids": "17502", "code": ["public synchronized Alphabetic Index add Labels ( Locale locale ) {", "add Labels ( peer , locale . to String ( ) ) ;", "return this ; }"]}
{"ids": "23938", "code": ["int extract Version From Filename ( final File file ) {", "final Matcher matcher = versioned Pattern . matcher ( file . get Absolute Path ( ) ) ;", "matcher . find ( ) ;", "return Integer . parse Int ( matcher . group ( NUM_ ) ) ; }"]}
{"ids": "20597", "code": ["static int measure Child For Cells ( View child , int cell Size , int cells Remaining , int parent Height Measure Spec , int parent Height Padding ) {", "final Layout Params lp = ( Layout Params ) child . get Layout Params ( ) ;", "final int child Height Size = Measure Spec . get Size ( parent Height Measure Spec ) - parent Height Padding ;", "final int child Height Mode = Measure Spec . get Mode ( parent Height Measure Spec ) ;", "final int child Height Spec = Measure Spec . make Measure Spec ( child Height Size , child Height Mode ) ;", "int cells Used = NUM_ ;", "if ( cells Remaining > NUM_ ) {", "final int child Width Spec = Measure Spec . make Measure Spec ( cell Size * cells Remaining , Measure Spec . AT MOST ) ;", "child . measure ( child Width Spec , child Height Spec ) ;", "final int measured Width = child . get Measured Width ( ) ;", "cells Used = measured Width / cell Size ;", "if ( measured Width % cell Size != NUM_ ) cells Used ++ ; }", "final Action Menu Item View item View = child instanceof Action Menu Item View ? ( Action Menu Item View ) child : null ;", "final boolean expandable = ! lp . is Overflow Button && item View != null && item View . has Text ( ) ;", "lp . expandable = expandable ;", "lp . cells Used = cells Used ;", "final int target Width = cells Used * cell Size ;", "child . measure ( Measure Spec . make Measure Spec ( target Width , Measure Spec . EXACTLY ) , child Height Spec ) ;", "return cells Used ; }"]}
{"ids": "73025", "code": ["private boolean is Specialized Handler Available ( Intent intent ) {", "Package Manager pm = m Activity . get Package Manager ( ) ;", "List < Resolve Info > handlers = pm . query Intent Activities ( intent , Package Manager . GET RESOLVED FILTER ) ;", "if ( handlers == null || handlers . size ( ) == NUM_ ) {", "return false ; }", "for ( Resolve Info resolve Info : handlers ) {", "Intent Filter filter = resolve Info . filter ;", "if ( filter == null ) {", "continue ; }", "if ( filter . count Data Authorities ( ) == NUM_ && filter . count Data Paths ( ) == NUM_ ) {", "continue ; }", "return true ; }", "return false ; }"]}
{"ids": "3869", "code": ["private void convert Error ( Char Buffer buf , int line ) {", "String src Filename = null ;", "int dest Line = NUM_ ;", "int src Line = NUM_ ;", "int src Tail Line = Integer . MAX VALUE ;", "for ( int i = NUM_ ; i < lines . size ( ) ; i ++ ) {", "Line map = ( Line ) lines . get ( i ) ;", "if ( map . dst Line <= line && line <= map . get Last Destination Line ( ) ) {", "src Filename = map . src Filename ;", "dest Line = map . dst Line ;", "src Line = map . get Source Line ( line ) ;", "break ; } }", "if ( src Filename != null ) { }", "else if ( lines . size ( ) > NUM_ ) src Filename = ( ( Line ) lines . get ( NUM_ ) ) . src Filename ;", "else src Filename = STR_ ;", "buf . append ( src Filename ) ;", "if ( line >= NUM_ ) {", "buf . append ( STR_ ) ;", "buf . append ( src Line + ( line - dest Line ) ) ; } }"]}
{"ids": "62629", "code": ["public static String slurp GBURL No Exceptions ( URL u ) {", "try {", "return slurp GBURL ( u ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "return null ; } }"]}
{"ids": "73317", "code": ["public void undo ( ) {", "if ( ! undo Stack . is Empty ( ) ) {", "Undoable Action last Event = undo Stack . pop ( ) ;", "last Event . undo ( ) ;", "redo Stack . push ( last Event ) ; } }"]}
{"ids": "35150", "code": ["public Pair < Solr Core , Solr Core > replicate To Destination ( Solr Core bestsrc Core , Solr Core destination Core ) throws Exception {", "Pair < Solr Core , Solr Core > replication Request Pair = null ;", "try {", "Solr Interaction Utils . replicate Index ( destination Core . host , destination Core . name , bestsrc Core . host , bestsrc Core . name ) ;", "String full Replication = STR_ ;", "String replicator = String . format ( full Replication , destination Core . host , Solr Interaction Utils . DEFAULT SOLR PORT , destination Core . name , bestsrc Core . host , Solr Interaction Utils . DEFAULT SOLR PORT , bestsrc Core . name ) ;", "logger . info ( STR_ + replicator ) ;", "replication Request Pair = new Pair < Solr Core , Solr Core > ( destination Core , bestsrc Core ) ;", "logger . info ( STR_ + destination Core . host + STR_ + destination Core . name + STR_ + bestsrc Core . host + STR_ + bestsrc Core . name ) ; }", "catch ( Exception e ) {", "logger . info ( STR_ + destination Core . host + STR_ + bestsrc Core . host ) ;", "if ( ! replicator Config . should Skip Replication Failures ( ) ) {", "throw new Replication Failure Exception ( STR_ + destination Core . host + STR_ + bestsrc Core . host ) ; } }", "return replication Request Pair ; }"]}
{"ids": "24659", "code": ["public static OS Type calculate OS ( ) {", "String os Name = System . get Property ( STR_ ) ;", "os Name = os Name . to Lower Case ( Locale . ENGLISH ) ;", "if ( os Name . starts With ( STR_ ) ) {", "return OS Type . APPLE ; }", "if ( os Name . starts With ( STR_ ) ) {", "return OS Type . WINDOWS ; }", "if ( os Name . starts With ( STR_ ) ) {", "return OS Type . LINUX ; }", "if ( os Name . starts With ( STR_ ) ) {", "return OS Type . SUN ; }", "return OS Type . UNKNOWN ; }"]}
{"ids": "42202", "code": ["private static int count Duplicates ( Stack Trace Element [ ] current Stack , Stack Trace Element [ ] parent Stack ) {", "int duplicates = NUM_ ;", "int parent Index = parent Stack . length ;", "for ( int i = current Stack . length ; -- i >= NUM_ && -- parent Index >= NUM_ ; ) {", "Stack Trace Element parent Frame = parent Stack [ parent Index ] ;", "if ( parent Frame . equals ( current Stack [ i ] ) ) {", "duplicates ++ ; }", "else {", "break ; } }", "return duplicates ; }"]}
{"ids": "41174", "code": ["public void recycle ( ) {", "synchronized ( s Pool ) {", "if ( s Pool . size ( ) < MAX POOL SIZE ) {", "s Pool . add ( this ) ; } } }"]}
{"ids": "52383", "code": ["private String build Insert ( boolean disable Returning ) {", "sb . set Length ( NUM_ ) ;", "sb . append ( STR_ ) ;", "append Table ( sb ) ;", "sb . append ( STR_ ) ;", "sb . append ( options . key Column Name ) ;", "sb . append ( STR_ ) ;", "if ( options . doctype Column Name != null ) {", "sb . append ( options . doctype Column Name ) ;", "sb . append ( STR_ ) ; }", "sb . append ( options . content Column Name ) ;", "sb . append ( STR_ ) ;", "if ( options . timestamp Column Name != null ) {", "sb . append ( STR_ ) ;", "sb . append ( options . timestamp Column Name ) ;", "sb . append ( STR_ ) ; }", "if ( options . creation Column Name != null ) {", "sb . append ( STR_ ) ;", "sb . append ( options . creation Column Name ) ;", "sb . append ( STR_ ) ; }", "if ( ( options . version Column Name != null ) && ( options . versioning Method ) != Collection Descriptor . VERSION NONE ) {", "sb . append ( STR_ ) ;", "sb . append ( options . version Column Name ) ;", "sb . append ( STR_ ) ; }", "sb . append ( STR_ ) ;", "if ( ( options . key Sequence Name != null ) && ( ! disable Returning ) ) {", "switch ( options . key Data Type ) {", "case Collection Descriptor . INTEGER KEY :", "sb . append ( STR_ ) ;", "sb . append ( options . key Sequence Name ) ;", "sb . append ( STR_ ) ;", "break ;", "case Collection Descriptor . RAW KEY :", "sb . append ( STR_ ) ;", "sb . append ( options . key Sequence Name ) ;", "sb . append ( STR_ ) ;", "break ;", "case Collection Descriptor . STRING KEY :", "case Collection Descriptor . NCHAR KEY :", "default :", "sb . append ( STR_ ) ;", "sb . append ( options . key Sequence Name ) ;", "sb . append ( STR_ ) ;", "break ; } }", "else if ( ( options . key Assignment Method == Collection Descriptor . KEY ASSIGN GUID ) && ( ! disable Returning ) ) {", "switch ( options . key Data Type ) {", "case Collection Descriptor . INTEGER KEY :", "sb . append ( STR_ ) ;", "sb . append ( STR_ ) ;", "sb . append ( STR_ ) ;", "break ;", "case Collection Descriptor . RAW KEY :", "sb . append ( STR_ ) ;", "break ;", "case Collection Descriptor . STRING KEY :", "case Collection Descriptor . NCHAR KEY :", "default :", "sb . append ( STR_ ) ;", "break ; } }", "else {", "add Key ( sb ) ; }", "if ( options . doctype Column Name != null ) {", "sb . append ( STR_ ) ; }", "sb . append ( STR_ ) ;", "if ( options . timestamp Column Name != null ) {", "if ( disable Returning ) Oracle Database Impl . add To Timestamp ( STR_ , sb ) ;", "else sb . append ( STR_ ) ; }", "if ( options . creation Column Name != null ) {", "if ( disable Returning ) Oracle Database Impl . add To Timestamp ( STR_ , sb ) ;", "else sb . append ( STR_ ) ; }", "if ( ( options . version Column Name != null ) && ( options . versioning Method ) != Collection Descriptor . VERSION NONE ) sb . append ( STR_ ) ;", "sb . append ( STR_ ) ;", "if ( insert Has Return Clause ( disable Returning ) ) {", "sb . append ( STR_ ) ;", "int count = NUM_ ;", "if ( return Inserted Key ( ) ) {", "sb . append ( STR_ ) ;", "sb . append ( options . key Column Name ) ;", "sb . append ( STR_ ) ;", "count ++ ; }", "if ( return Inserted Time ( ) ) {", "add Comma ( sb , count ) ;", "sb . append ( STR_ ) ;", "if ( options . timestamp Column Name != null ) sb . append ( options . timestamp Column Name ) ;", "else sb . append ( options . creation Column Name ) ;", "sb . append ( STR_ ) ;", "Oracle Database Impl . add Timestamp Returning Format ( sb ) ;", "count ++ ; }", "if ( return Inserted Version ( ) ) {", "add Comma ( sb , count ) ;", "sb . append ( STR_ ) ;", "sb . append ( options . version Column Name ) ;", "sb . append ( STR_ ) ;", "count ++ ; }", "add Into ( sb , count ) ; }", "return ( sb . to String ( ) ) ; }"]}
{"ids": "29600", "code": ["public final boolean exists ( ) {", "return config != null ; }"]}
{"ids": "5084", "code": ["private boolean has colinear ( Array List < Pla Point Int > corners list , Pla Point Int a point ) {", "int count = corners list . size ( ) ;", "if ( count < NUM_ ) return false ;", "for ( int index = NUM_ ; index < count - NUM_ ; index ++ ) {", "Pla Point Int start = corners list . get ( index ) ;", "Pla Point Int end = corners list . get ( index + NUM_ ) ;", "if ( a point . side of ( start , end ) != Pla Side . COLLINEAR ) continue ;", "double d start p = start . distance square ( a point ) ;", "double d p end = a point . distance square ( end ) ;", "double d start end = start . distance square ( end ) ;", "if ( d start end >= d start p ) {", "if ( d start end >= d p end ) {", "return true ; }", "else {", "corners list . set ( index , a point ) ;", "return true ; } }", "else {", "if ( d start end >= d p end ) {", "corners list . set ( index + NUM_ , a point ) ;", "return true ; }", "else {", "corners list . set ( index , a point ) ;", "return true ; } } }", "return false ; }"]}
{"ids": "50869", "code": ["public boolean contains ( String key ) {", "return my Properties . contains Key ( key ) ; }"]}
{"ids": "48897", "code": ["protected Snmp Cached Data update Cached Datas ( Object user Data ) {", "final String [ ] path = Jvm Runtime Impl . get Library Path ( user Data ) ;", "final long time = System . current Time Millis ( ) ;", "final int len = path . length ;", "Snmp Oid indexes [ ] = new Snmp Oid [ len ] ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "indexes [ i ] = new Snmp Oid ( i + NUM_ ) ; }", "return new Snmp Cached Data ( time , indexes , path ) ; }"]}
{"ids": "79887", "code": ["public static byte [ ] decode Hex ( String hex String ) {", "int length = hex String . length ( ) ;", "if ( ( length & NUM_ ) != NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "boolean bad Hex = false ;", "byte [ ] out = new byte [ length > > NUM_ ] ;", "for ( int i = NUM_ , j = NUM_ ; j < length ; i ++ ) {", "int c 1 = hex String . char At ( j ++ ) ;", "if ( c 1 > STR_ ) {", "bad Hex = true ;", "break ; }", "final byte d 1 = DIGITS [ c 1 ] ;", "if ( d 1 == - NUM_ ) {", "bad Hex = true ;", "break ; }", "int c 2 = hex String . char At ( j ++ ) ;", "if ( c 2 > STR_ ) {", "bad Hex = true ;", "break ; }", "final byte d 2 = DIGITS [ c 2 ] ;", "if ( d 2 == - NUM_ ) {", "bad Hex = true ;", "break ; }", "out [ i ] = ( byte ) ( d 1 << NUM_ | d 2 ) ; }", "if ( bad Hex ) {", "throw new Illegal Argument Exception ( STR_ + hex String ) ; }", "return out ; }"]}
{"ids": "64298", "code": ["public static void delete Player ( Player Account Data acc Data ) {", "if ( acc Data . get Deletion Date ( ) != null ) {", "return ; }", "acc Data . set Deletion Date ( new Timestamp ( System . current Time Millis ( ) + NUM_ * NUM_ * NUM_ ) ) ;", "store Deletion Time ( acc Data ) ; }"]}
{"ids": "5470", "code": ["public int eval ( I Node state ) {", "Eight Puzzle Node node = ( Eight Puzzle Node ) state ;", "int Pn = NUM_ ;", "for ( int r = NUM_ ; r <= Eight Puzzle Node . Max R ; r ++ ) {", "for ( int c = NUM_ ; c <= Eight Puzzle Node . Max C ; c ++ ) {", "if ( node . is Empty ( r , c ) ) {", "continue ; }", "int digit = node . cell ( r , c ) ;", "Pn += Math . abs ( diffs [ digit ] [ NUM_ ] - r ) ;", "Pn += Math . abs ( diffs [ digit ] [ NUM_ ] - c ) ; } }", "int Sn = NUM_ ;", "if ( ! node . is Empty ( NUM_ , NUM_ ) ) {", "Sn = NUM_ ; }", "for ( int r = NUM_ ; r <= Eight Puzzle Node . Max R ; r ++ ) {", "for ( int c = NUM_ ; c <= Eight Puzzle Node . Max C ; c ++ ) {", "int idx = r * NUM_ + c ;", "if ( r == NUM_ && c == NUM_ ) {", "continue ; }", "if ( node . cell ( r , c ) == Eight Puzzle Node . Empty Mark ) {", "continue ; }", "if ( succ [ node . cell ( r , c ) ] != node . cell ( succs [ idx ] [ NUM_ ] , succs [ idx ] [ NUM_ ] ) ) {", "Sn += NUM_ ; } } }", "int gn = NUM_ ;", "Depth Transition t = ( Depth Transition ) state . stored Data ( ) ;", "if ( t != null ) {", "gn = t . depth ; }", "return gn + Pn + NUM_ * Sn ; }"]}
{"ids": "68118", "code": ["private String parse Css ( final String css ) {", "final Map < String , String > map = new Hash Map < String , String > ( ) ;", "final String Buffer sb = new String Buffer ( ) ;", "final Matcher m = PATTERN VARIABLES DEFINITION . matcher ( css ) ;", "while ( m . find ( ) ) {", "final String variables Body = m . group ( NUM_ ) ;", "map . put All ( extract Variables ( variables Body ) ) ;", "m . append Replacement ( sb , STR_ ) ; }", "m . append Tail ( sb ) ;", "return replace Variables ( sb . to String ( ) , map ) ; }"]}
{"ids": "31707", "code": ["private void shutdown ( ) {", "if ( exec Svc != null ) exec Svc . shutdown ( NUM_ ) ;", "if ( msg Exec Svc != null ) msg Exec Svc . shutdown Now ( ) ;", "try {", "job . dispose ( true ) ; }", "catch ( Ignite Checked Exception e ) {", "U . error ( log , STR_ , e ) ; } }"]}
{"ids": "69180", "code": ["public void start CDATA ( ) throws org . xml . sax . SAX Exception {", "m in C Data = true ;", "append ( m doc . create CDATA Section ( STR_ ) ) ; }"]}
{"ids": "43311", "code": ["public void add All ( List < Fragment > a Splits ) {", "splits . add All ( a Splits ) ; }"]}
{"ids": "11964", "code": ["protected synchronized int currentchunkoffset ( ) throws IO Exception {", "long fp = backing Random Access File . get File Pointer ( ) ;", "if ( fp < f Header . header Size ( ) ) {", "return - NUM_ ; }", "else {", "fp -= f Header . header Size ( ) ;", "if ( fp == NUM_ ) {", "return NUM_ ; }", "else {", "return ( int ) ( ( fp % CHUNK ENC SIZE ) - CHUNK IV SIZE ) ; } } }"]}
{"ids": "48415", "code": ["private int parse Int Value ( String input ) throws Number Format Exception {", "int value = NUM_ ;", "if ( input . starts With ( STR_ ) ) {", "String temp = input . substring ( NUM_ ) ;", "return Integer . parse Int ( temp ) ; }", "else if ( input . starts With ( STR_ ) ) {", "String temp = input . substring ( NUM_ ) ;", "char [ ] chars = temp . to Char Array ( ) ;", "if ( chars . length > NUM_ ) {", "throw new Number Format Exception ( ) ; }", "else {", "for ( int i = NUM_ ; i < chars . length ; i ++ ) {", "int index = chars . length - i - NUM_ ;", "switch ( chars [ i ] ) {", "case STR_ :", "value += NUM_ ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "case STR_ :", "case STR_ :", "value += NUM_ * get Base ( index ) ;", "break ;", "default :", "throw new Number Format Exception ( STR_ ) ; } } }", "if ( value < NUM_ ) {", "throw new Number Format Exception ( STR_ ) ; } }", "else {", "value = Integer . parse Int ( input ) ; }", "return value ; }"]}
{"ids": "24687", "code": ["protected int decode Line Prefix ( Pushback Input Stream a Stream , Output Stream b Stream ) throws IO Exception {", "return ( bytes Per Line ( ) ) ; }"]}
{"ids": "30839", "code": ["private static Lookup Locator [ ] unmarshal Locators ( Object Input Stream in ) throws IO Exception , Class Not Found Exception {", "List l = new Array List ( ) ;", "Marshalled Instance mi ;", "while ( ( mi = ( Marshalled Instance ) in . read Object ( ) ) != null ) {", "try {", "l . add ( ( Lookup Locator ) mi . get ( false ) ) ; }", "catch ( Throwable e ) {", "if ( e instanceof Error && Throwable Constants . retryable ( e ) == Throwable Constants . BAD OBJECT ) {", "throw ( Error ) e ; }", "logger . log ( Level . WARNING , STR_ , e ) ; } }", "return ( Lookup Locator [ ] ) l . to Array ( new Lookup Locator [ l . size ( ) ] ) ; }"]}
{"ids": "35954", "code": ["public void accept ( final Annotation Visitor av ) {", "if ( av != null ) {", "if ( values != null ) {", "for ( int i = NUM_ ; i < values . size ( ) ; i += NUM_ ) {", "String name = ( String ) values . get ( i ) ;", "Object value = values . get ( i + NUM_ ) ;", "accept ( av , name , value ) ; } }", "av . visit End ( ) ; } }"]}
{"ids": "83658", "code": ["static public String number To String ( Number n ) throws JSON Exception {", "if ( n == null ) {", "throw new JSON Exception ( STR_ ) ; }", "test Validity ( n ) ;", "String s = n . to String ( ) ;", "if ( s . index Of ( STR_ ) > NUM_ && s . index Of ( STR_ ) < NUM_ && s . index Of ( STR_ ) < NUM_ ) {", "while ( s . ends With ( STR_ ) ) {", "s = s . substring ( NUM_ , s . length ( ) - NUM_ ) ; }", "if ( s . ends With ( STR_ ) ) {", "s = s . substring ( NUM_ , s . length ( ) - NUM_ ) ; } }", "return s ; }"]}
{"ids": "51878", "code": ["public int children ( ) {", "return children . size ( ) ; }"]}
{"ids": "22517", "code": ["public void create V Vset ( String display Name ) throws Exception {", "log . info ( STR_ ) ;", "Client Response client Resp = null ;", "String payload = STR_ + display Name + STR_ ;", "log . info ( STR_ , URI CREATE CG . to String ( ) , payload ) ;", "try {", "client Resp = post ( URI CREATE CG , payload ) ;", "if ( client Resp == null ) {", "log . error ( STR_ ) ;", "throw new HP 3 PAR Exception ( STR_ ) ; }", "else if ( client Resp . get Status ( ) != NUM_ ) {", "String err Resp = get Response Details ( client Resp ) ;", "log . error ( STR_ , err Resp ) ;", "throw new HP 3 PAR Exception ( err Resp ) ; }", "else {", "log . info ( STR_ ) ; } }", "catch ( Exception e ) {", "throw e ; }", "finally {", "if ( client Resp != null ) {", "client Resp . close ( ) ; }", "log . info ( STR_ ) ; } }"]}
{"ids": "1766", "code": ["protected void connection Failed ( Channel failed Channel , IO Exception cause ) {", "failure Cause = IO Exception Support . create ( cause ) ;", "channel = failed Channel ;", "connected . set ( false ) ;", "handshake Future . set Failure ( cause ) ; }"]}
{"ids": "884", "code": ["public static byte [ ] split Uint 8 To 2 bytes ( char uint 8 ) {", "if ( uint 8 < NUM_ || uint 8 > NUM_ ) {", "throw new Runtime Exception ( STR_ ) ; }", "String hex String = Integer . to Hex String ( uint 8 ) ;", "byte low ;", "byte high ;", "if ( hex String . length ( ) > NUM_ ) {", "high = ( byte ) Integer . parse Int ( hex String . substring ( NUM_ , NUM_ ) , NUM_ ) ;", "low = ( byte ) Integer . parse Int ( hex String . substring ( NUM_ , NUM_ ) , NUM_ ) ; }", "else {", "high = NUM_ ;", "low = ( byte ) Integer . parse Int ( hex String . substring ( NUM_ , NUM_ ) , NUM_ ) ; }", "byte [ ] result = new byte [ ] { high , low } ;", "return result ; }"]}
{"ids": "18197", "code": ["public void add Attribute ( String uri , String local Name , String raw Name , String type , String value , boolean XSL Attribute ) throws SAX Exception {", "if ( m elem Context . m start Tag Open ) {", "ensure Prefix Is Declared ( uri , raw Name ) ;", "add Attribute Always ( uri , local Name , raw Name , type , value , false ) ; } }"]}
{"ids": "3011", "code": ["private String markdown Blockquote ( String value ) {", "return STR_ + value . replace ( STR_ , STR_ ) ; }"]}
{"ids": "52481", "code": ["protected String hash ( String key ) {", "try {", "Message Digest gen = HASH GENERATOR . get ( ) ;", "byte [ ] key Bytes = key . get Bytes ( STR_ ) ;", "gen . update ( key Bytes , NUM_ , key Bytes . length ) ;", "byte [ ] binaryhash = gen . digest ( ) ;", "return ENCODER . encode To String ( binaryhash ) ; }", "catch ( Exception e ) {", "LOG . warn ( STR_ , key , e ) ; }", "return null ; }"]}
{"ids": "69684", "code": ["public static boolean is Input Type ( String type String ) {", "return INPUT TYPES . contains ( type String ) ; }"]}
{"ids": "10028", "code": ["public static Point destination ( Point point 1 , double distance , double bearing , String units ) throws Turf Exception {", "double degrees 2 radians = Math . PI / NUM_ ;", "double radians 2 degrees = NUM_ / Math . PI ;", "Position coordinates 1 = point 1 . get Coordinates ( ) ;", "double longitude 1 = degrees 2 radians * coordinates 1 . get Longitude ( ) ;", "double latitude 1 = degrees 2 radians * coordinates 1 . get Latitude ( ) ;", "double bearing Rad = degrees 2 radians * bearing ;", "double radians = Turf Helpers . distance To Radians ( distance , units ) ;", "double latitude 2 = Math . asin ( Math . sin ( latitude 1 ) * Math . cos ( radians ) + Math . cos ( latitude 1 ) * Math . sin ( radians ) * Math . cos ( bearing Rad ) ) ;", "double longitude 2 = longitude 1 + Math . atan 2 ( Math . sin ( bearing Rad ) * Math . sin ( radians ) * Math . cos ( latitude 1 ) , Math . cos ( radians ) - Math . sin ( latitude 1 ) * Math . sin ( latitude 2 ) ) ;", "return Point . from Coordinates ( Position . from Coordinates ( radians 2 degrees * longitude 2 , radians 2 degrees * latitude 2 ) ) ; }"]}
{"ids": "10654", "code": ["public void clear ( ) {", "synchronized ( m Lock ) {", "m Graphics . clear ( ) ;", "m First Graphic = null ; }", "post Invalidate ( ) ; }"]}
{"ids": "3279", "code": ["@ Suppress Warnings ( STR_ ) public Node Panel ( Shader Node Variable single Out , Node Panel . Node Type type ) {", "super ( ) ;", "List < Shader Node Variable > outputs = new Array List < Shader Node Variable > ( ) ;", "outputs . add ( single Out ) ;", "this . type = type ;", "init ( new Array List < Shader Node Variable > ( ) , outputs ) ;", "add Key Listener ( this ) ;", "tool Bar = new Node Tool Bar ( this ) ; }"]}
{"ids": "62679", "code": ["public static String stringify Exception ( Throwable e ) {", "String Writer stm = new String Writer ( ) ;", "Print Writer wrt = new Print Writer ( stm ) ;", "e . print Stack Trace ( wrt ) ;", "wrt . close ( ) ;", "return stm . to String ( ) ; }"]}
{"ids": "20131", "code": ["public static boolean is Solaris ( ) {", "return ( OS . index Of ( STR_ ) >= NUM_ ) ; }"]}
{"ids": "53535", "code": ["public double Sum Inlink Hub Score ( Page page ) {", "List < String > in Links = page . get Inlinks ( ) ;", "double hub Score = NUM_ ;", "for ( int i = NUM_ ; i < in Links . size ( ) ; i ++ ) {", "Page in Link = p Table . get ( in Links . get ( i ) ) ;", "if ( in Link != null ) {", "hub Score += in Link . hub ; }", "else {", "continue ; } }", "return hub Score ; }"]}
{"ids": "66576", "code": ["private void preserve Parent Link ( String broken Table Name , String broken Column Name , String broken Default Value , Array List < String > broken Compare Columns , String hint Table Name , String hint Column Name , Array List < String > hint Compare Columns ) {", "String vendor Name = m target . get Vendor ( ) ;", "String catalog Name = m target . get Catalog ( ) ;", "String schema Name = m target . get Schema ( ) ;", "if ( m source . is Object Exists ( broken Table Name , m source . get Tables ( ) ) ) {", "boolean column To Preserve Link Exists = false ;", "DB Object table To Preserve Link = m source . get Object By Name ( broken Table Name , m source . get Tables ( ) ) ;", "Hash Map < Integer , DB Object Definition > columns = table To Preserve Link . get Contents ( ) ;", "Vector < Integer > vc = new Vector < Integer > ( columns . key Set ( ) ) ;", "for ( Iterator < Integer > ic = vc . iterator ( ) ; ic . has Next ( ) ; ) {", "int kc = ic . next ( ) ;", "DB Object Table Column column Detail = ( DB Object Table Column ) columns . get ( kc ) ;", "String column Name = column Detail . get Name ( ) ;", "if ( column Name . equals Ignore Case ( broken Column Name ) ) column To Preserve Link Exists = true ; }", "if ( column To Preserve Link Exists ) {", "s logger . log ( Level . FINE , STR_ , new Object [ ] { m object Type , broken Table Name , m direction } ) ;", "String sql Command = s db Engine . sql Action preserve Parent Links ( vendor Name , catalog Name , schema Name , broken Table Name , broken Column Name , broken Default Value , broken Compare Columns , hint Table Name , hint Column Name , hint Compare Columns ) ;", "if ( sql Command != null ) {", "Savepoint sp = m target . set Savepoint ( STR_ ) ;", "Statement stmt = m target . set Statement ( ) ;", "Integer sql Result = m target . execute Update ( stmt , sql Command , false , false ) ;", "if ( sql Result != null ) {", "log Update Detail ( sql Result , null ) ;", "m counter Upd = new Integer ( m counter Upd . int Value ( ) + NUM_ ) ; }", "m target . release Statement ( stmt ) ;", "m total Upd = new Integer ( m total Upd . int Value ( ) + NUM_ ) ;", "m target . release Savepoint ( sp ) ; } } } }"]}
{"ids": "48814", "code": ["public Short Banded Raster ( Sample Model sample Model , Data Buffer data Buffer , Point origin ) {", "this ( sample Model , data Buffer , new Rectangle ( origin . x , origin . y , sample Model . get Width ( ) , sample Model . get Height ( ) ) , origin , null ) ; }"]}
{"ids": "52311", "code": ["public void remap Mapped Types ( ) {", "clear Mapped Types ( ) ;", "map Possible Types ( m Items ) ; }"]}
{"ids": "5569", "code": ["public int num Children ( int row ) {", "int count = NUM_ ;", "next Valid Row Positions . clear ( ) ;", "for ( int i = NUM_ ; i < n ; i ++ ) {", "board [ row ] [ i ] = true ;", "if ( valid ( row , i ) ) {", "count ++ ;", "next Valid Row Positions . add ( i ) ; }", "board [ row ] [ i ] = false ; }", "return count ; }"]}
{"ids": "33038", "code": ["public static I Java Search Scope create Related Projects Scope ( I Java Project project , int include Mask ) throws Core Exception {", "I Java Project [ ] projects = get Related Projects ( project ) ;", "return Search Engine . create Java Search Scope ( projects , include Mask ) ; }"]}
{"ids": "9891", "code": ["public Confirmation ( ) {", "this ( null , null ) ; }"]}
{"ids": "26586", "code": ["public Vcs Revision Number original Revision ( int line Number ) {", "return get Line Revision Number ( line Number ) ; }"]}
{"ids": "3247", "code": ["private void check Paused Or Canceled ( State state ) throws Stop Request {", "if ( m Service . get Control ( ) == Downloader Service . CONTROL PAUSED ) {", "int status = m Service . get Status ( ) ;", "switch ( status ) {", "case Downloader Service . STATUS PAUSED BY APP :", "throw new Stop Request ( m Service . get Status ( ) , STR_ ) ; } } }"]}
{"ids": "40007", "code": ["void trace ( ) {", "gl Use Program ( compute Program ) ;", "inv Proj Matrix . transform Project ( tmp Vector . set ( - NUM_ , - NUM_ , NUM_ ) ) ;", "gl Uniform 3 f ( ray 00 Uniform , tmp Vector . x , tmp Vector . y , tmp Vector . z ) ;", "inv Proj Matrix . transform Project ( tmp Vector . set ( - NUM_ , NUM_ , NUM_ ) ) ;", "gl Uniform 3 f ( ray 01 Uniform , tmp Vector . x , tmp Vector . y , tmp Vector . z ) ;", "inv Proj Matrix . transform Project ( tmp Vector . set ( NUM_ , - NUM_ , NUM_ ) ) ;", "gl Uniform 3 f ( ray 10 Uniform , tmp Vector . x , tmp Vector . y , tmp Vector . z ) ;", "inv Proj Matrix . transform Project ( tmp Vector . set ( NUM_ , NUM_ , NUM_ ) ) ;", "gl Uniform 3 f ( ray 11 Uniform , tmp Vector . x , tmp Vector . y , tmp Vector . z ) ;", "gl Bind Buffer Base ( GL SHADER STORAGE BUFFER , triangles Ssbo Binding , ssbo ) ;", "gl Bind Image Texture ( framebuffer Image Binding , raytrace Texture , NUM_ , false , NUM_ , GL WRITE ONLY , GL RGBA 8 ) ;", "int worksize X = math Round Po T ( width ) ;", "int worksize Y = math Round Po T ( height ) ;", "gl Dispatch Compute ( worksize X / work Group Size X , worksize Y / work Group Size Y , NUM_ ) ;", "gl Memory Barrier ( GL SHADER IMAGE ACCESS BARRIER BIT ) ;", "gl Bind Image Texture ( framebuffer Image Binding , NUM_ , NUM_ , false , NUM_ , GL WRITE ONLY , GL RGBA 8 ) ;", "gl Bind Buffer Base ( GL SHADER STORAGE BUFFER , triangles Ssbo Binding , NUM_ ) ;", "gl Use Program ( NUM_ ) ; }"]}
{"ids": "62132", "code": ["public void remove All Action Fire Listeners ( ) {", "m Action Fired Listeners . clear ( ) ; }"]}
{"ids": "17137", "code": ["public static String millis To String ( long millis ) {", "boolean negative = millis < NUM_ ;", "millis = Math . abs ( millis ) ;", "millis /= NUM_ ;", "int sec = ( int ) ( millis % NUM_ ) ;", "millis /= NUM_ ;", "int min = ( int ) ( millis % NUM_ ) ;", "millis /= NUM_ ;", "int hours = ( int ) millis ;", "String time ;", "Decimal Format format = ( Decimal Format ) Number Format . get Instance ( Locale . US ) ;", "format . apply Pattern ( STR_ ) ;", "if ( millis > NUM_ ) {", "time = ( negative ? STR_ : STR_ ) + hours + STR_ + format . format ( min ) + STR_ + format . format ( sec ) ; }", "else {", "time = ( negative ? STR_ : STR_ ) + min + STR_ + format . format ( sec ) ; }", "return time ; }"]}
{"ids": "42444", "code": ["@ Inline public static void to UTF 8 ( String s , Byte Buffer b ) {", "int result index = NUM_ ;", "for ( int i = NUM_ , n = s . length ( ) ; i < n ; ++ i ) {", "char c = s . char At ( i ) ;", "if ( ( ( ! WRITE PSEUDO UTF 8 ) || ( c >= NUM_ ) ) && ( c <= NUM_ ) ) {", "b . put ( ( byte ) c ) ; }", "else if ( c > NUM_ ) {", "b . put ( ( byte ) ( NUM_ | ( byte ) ( c > > NUM_ ) ) ) ;", "b . put ( ( byte ) ( NUM_ | ( ( c & NUM_ ) > > NUM_ ) ) ) ;", "b . put ( ( byte ) ( NUM_ | ( c & NUM_ ) ) ) ; }", "else {", "b . put ( ( byte ) ( NUM_ | ( byte ) ( c > > NUM_ ) ) ) ;", "b . put ( ( byte ) ( NUM_ | ( c & NUM_ ) ) ) ; } } }"]}
{"ids": "47104", "code": ["public Copy On Write Array List ( E [ ] to Copy In ) {", "set Array ( Arrays . copy Of ( to Copy In , to Copy In . length , Object [ ] . class ) ) ; }"]}
{"ids": "7754", "code": ["@ Override public String Buffer format ( long number , String Buffer to Append To , Field Position pos ) {", "return to Append To . append ( get Direction Code ( number ) ) ; }"]}
{"ids": "36768", "code": ["public static void main ( String [ ] args ) throws Exception {", "digest Command Line Arguments ( args ) ;", "boolean in Headless Mode = Graphics Environment . is Headless ( ) ;", "boolean in Convert Mode = isin Convert Mode ( ) ;", "SCXML Graph Editor editor = start Editor ( in Convert Mode || in Headless Mode ) ;", "if ( isin Convert Mode ( ) ) {", "SCXML Editor Actions . convert No GUI ( editor ) ; }", "else if ( ! in Headless Mode ) {", "String input = get Preset Input ( ) ;", "if ( ! String Utils . is Empty String ( input ) ) {", "Open Action open = new Open Action ( new File ( input ) ) ;", "open . action Performed ( new Action Event ( editor , NUM_ , STR_ ) ) ; } } }"]}
{"ids": "87024", "code": ["protected void enable Retransmission Timer ( int tick Count ) {", "if ( is Invite Transaction ( ) && ( this instanceof SIP Client Transaction ) ) {", "retransmission Timer Ticks Left = tick Count ; }", "else {", "retransmission Timer Ticks Left = Math . min ( tick Count , get Timer T 2 ( ) ) ; }", "retransmission Timer Last Tick Count = retransmission Timer Ticks Left ; }"]}
{"ids": "35923", "code": ["private void schedule Msg For All Consumers ( Jetstream Message msg ) {", "if ( LOGGER . is Debug Enabled ( ) ) LOGGER . debug ( STR_ + msg . to String ( ) ) ;", "Event Consumer Info info = null ;", "Array List < Linked List < Selection > > weighted List = m event Topic Registry . get ( msg . get Topic ( ) ) ;", "if ( weighted List != null ) {", "Iterator < Linked List < Selection > > weighted Itr = weighted List . iterator ( ) ;", "while ( weighted Itr . has Next ( ) ) {", "Linked List < Selection > consumer List = weighted Itr . next ( ) ;", "Iterator < Selection > itr = consumer List . iterator ( ) ;", "while ( itr . has Next ( ) ) {", "info = ( Event Consumer Info ) itr . next ( ) ;", "if ( info == null ) continue ;", "dispatch ( info , msg ) ; } } }", "else {", "if ( m advisory Listener != null ) {", "post Resend Advisory ( msg ) ;", "m no Consumer Advisories . increment ( ) ; }", "else {", "m total Msgs Dropped . increment ( ) ;", "m drops For No Consumer . increment ( ) ; } } }"]}
{"ids": "35000", "code": ["@ Override public Void visit Declared ( Annotated Declared Type declared Type , Void a Void ) {", "if ( pause ) {", "return null ; }", "parents . push ( declared Type ) ;", "super . visit Declared ( declared Type , a Void ) ;", "parents . pop ( ) ;", "return null ; }"]}
{"ids": "24641", "code": ["public Class create ( ) {", "set Use Cache ( false ) ;", "return ( Class ) super . create ( this ) ; }"]}
{"ids": "65229", "code": ["public static < T > List < T > tuple ( T ... objects ) {", "return Collections . unmodifiable List ( list ( objects ) ) ; }"]}
{"ids": "14984", "code": ["protected static Set string Array To Set ( String [ ] strs ) {", "int count = strs . length ;", "Set set = ( ( count > NUM_ ) ? new Hash Set ( count ) : new Hash Set ( ) ) ;", "for ( int i = NUM_ ; i < count ; i ++ ) {", "set . add ( strs [ i ] ) ; }", "return set ; }"]}
{"ids": "54624", "code": ["public boolean authenticate ( final Odd Callback < Auth Token > callback ) {", "synchronized ( sync Lock ) {", "if ( is Expired ( ) ) {", "return false ; }", "if ( ! authenticating ) {", "authenticating = true ;", "timer = new Timer ( ) ;", "Timer Task task = get Poll Task ( callback ) ;", "timer . schedule ( task , new Date ( ) , interval ) ;", "Timer Task expired Task = get Expired Task ( callback ) ;", "timer . schedule ( expired Task , expiration Date ) ; }", "return true ; } }"]}
{"ids": "7054", "code": ["public static void cancel Notifications For Room Id ( String account Id , String room Id ) {", "Log . d ( LOG TAG , STR_ + account Id + STR_ + room Id ) ;", "if ( null != m Active Event Stream Service ) {", "m Active Event Stream Service . cancel Notifications ( account Id , room Id ) ; } }"]}
{"ids": "75832", "code": ["public static Optional < Player Profile > lookup ( UUID id ) {", "if ( Bukkit . get Player ( id ) != null ) {", "return Optional . of ( from Player ( Bukkit . get Player ( id ) ) ) ; }", "return lookup Properties ( id ) ; }"]}
{"ids": "50257", "code": ["static double svd dmin ( double a , double b ) {", "return Math . min ( a , b ) ; }"]}
{"ids": "21783", "code": ["private Storage Port select Storage Port ( List < Storage Port > sp List ) {", "Collections . shuffle ( sp List ) ;", "return sp List . get ( NUM_ ) ; }"]}
{"ids": "80753", "code": ["private void assimilate Context ( Nesting Exception nesting Exception ) {", "Enumeration < Exception Context > enum Exeptions = nesting Exception . get Exception Contexts ( ) ;", "if ( enum Exeptions . has More Elements ( ) ) {", "while ( enum Exeptions . has More Elements ( ) ) {", "add Exception Context ( enum Exeptions . next Element ( ) ) ; }", "nesting Exception . clear Contexts ( ) ; } }"]}
{"ids": "14661", "code": ["public boolean equals ( Object o ) {", "if ( o instanceof AM Identity Subject ) {", "AM Identity Subject subject = ( AM Identity Subject ) o ;", "return ( subject Values . equals ( subject . subject Values ) ) ; }", "return ( false ) ; }"]}
{"ids": "13746", "code": ["public void update Keyinfo ( String realm , String entity Name , Map < String , Set < String > > ext Values , Map < String , Set < String > > std Values , boolean is IDP ) throws AM Console Exception {", "String keysize = get Result ( std Values , TF KEY NAME ) ;", "String algorithm = get Result ( std Values , TF ALGORITHM ) ;", "Set < String > signing Cert Aliases ;", "Set < String > encryption Cert Aliases ;", "if ( is IDP ) {", "encryption Cert Aliases = ext Values . get ( IDP ENCRYPT CERT ALIAS ) ;", "signing Cert Aliases = ext Values . get ( IDP SIGN CERT ALIAS ) ; }", "else {", "encryption Cert Aliases = ext Values . get ( SP ENCRYPT CERT ALIAS ) ;", "signing Cert Aliases = ext Values . get ( SP SIGN CERT ALIAS ) ; }", "int keysi = ! String Utils . is Empty ( keysize ) ? Integer . parse Int ( keysize ) : NUM_ ;", "String alg = String Utils . is Empty ( algorithm ) ? XML Cipher . AES 128 : algorithm ;", "try {", "SAML 2 Meta Security Utils . update Provider Key Info ( realm , entity Name , signing Cert Aliases , true , is IDP , alg , keysi ) ;", "SAML 2 Meta Security Utils . update Provider Key Info ( realm , entity Name , encryption Cert Aliases , false , is IDP , alg , keysi ) ; }", "catch ( SAML 2 Meta Exception e ) {", "debug . warning ( STR_ , e ) ;", "throw new AM Console Exception ( get Error String ( e ) ) ; } }"]}
{"ids": "75038", "code": ["public void update Slider ( final double p , final boolean n ) {", "check Widget ( ) ;", "double percentage = p ;", "if ( step != null ) {", "percentage = Math . round ( percentage / step ) * step ; }", "this . notify = n ;", "if ( percentage < NUM_ ) {", "percentage = NUM_ ; }", "else if ( percentage > NUM_ ) {", "percentage = NUM_ ; }", "final int useful Width = get Client Area ( ) . width - thumb Width ;", "final int width = ( int ) Math . round ( useful Width * percentage ) ;", "move Thumb Horizontally ( width ) ;", "previous Position = percentage ;", "this . notify = true ; }"]}
{"ids": "67214", "code": ["@ Override public boolean contains ( String identifier ) {", "return whitelist . contains ( identifier ) ; }"]}
{"ids": "46490", "code": ["public static final Action [ ] augment List ( Action [ ] list 1 , Action [ ] list 2 ) {", "Hashtable < String , Action > h = new Hashtable < String , Action > ( ) ;", "for ( Action a : list 1 ) {", "String value = ( String ) a . get Value ( Action . NAME ) ;", "h . put ( ( value != null ? value : STR_ ) , a ) ; }", "for ( Action a : list 2 ) {", "String value = ( String ) a . get Value ( Action . NAME ) ;", "h . put ( ( value != null ? value : STR_ ) , a ) ; }", "Action [ ] actions = new Action [ h . size ( ) ] ;", "int index = NUM_ ;", "for ( Enumeration e = h . elements ( ) ; e . has More Elements ( ) ; ) {", "actions [ index ++ ] = ( Action ) e . next Element ( ) ; }", "return actions ; }"]}
{"ids": "63271", "code": ["public MV Map < K , V > open Version ( long version ) {", "if ( read Only ) {", "throw Data Utils . new Unsupported Operation Exception ( STR_ + STR_ ) ; }", "Data Utils . check Argument ( version >= create Version , STR_ , version , create Version ) ;", "Page newest = null ;", "Page r = root ;", "if ( version >= r . get Version ( ) && ( version == write Version || r . get Version ( ) >= NUM_ || version <= create Version || store . get File Store ( ) == null ) ) {", "newest = r ; }", "else {", "Page last = old Roots . peek First ( ) ;", "if ( last == null || version < last . get Version ( ) ) {", "return store . open Map Version ( version , id , this ) ; }", "Iterator < Page > it = old Roots . iterator ( ) ;", "while ( it . has Next ( ) ) {", "Page p = it . next ( ) ;", "if ( p . get Version ( ) > version ) {", "break ; }", "last = p ; }", "newest = last ; }", "MV Map < K , V > m = open Read Only ( ) ;", "m . root = newest ;", "return m ; }"]}
{"ids": "18343", "code": ["public DTM Default Base ( DTM Manager mgr , Source source , int dtm Identity , DTMWS Filter white Space Filter , XML String Factory xstringfactory , boolean do Indexing , int blocksize , boolean use Prevsib , boolean new Name Table ) {", "int numblocks ;", "if ( blocksize <= NUM_ ) {", "numblocks = DEFAULT NUMBLOCKS SMALL ;", "m dtm Ident = new Suballocated Int Vector ( NUM_ , NUM_ ) ; }", "else {", "numblocks = DEFAULT NUMBLOCKS ;", "m dtm Ident = new Suballocated Int Vector ( NUM_ ) ; }", "m exptype = new Suballocated Int Vector ( blocksize , numblocks ) ;", "m firstch = new Suballocated Int Vector ( blocksize , numblocks ) ;", "m nextsib = new Suballocated Int Vector ( blocksize , numblocks ) ;", "m parent = new Suballocated Int Vector ( blocksize , numblocks ) ;", "if ( use Prevsib ) m prevsib = new Suballocated Int Vector ( blocksize , numblocks ) ;", "m mgr = mgr ;", "if ( mgr instanceof DTM Manager Default ) m mgr Default = ( DTM Manager Default ) mgr ;", "m document Base URI = ( null != source ) ? source . get System Id ( ) : null ;", "m dtm Ident . set Element At ( dtm Identity , NUM_ ) ;", "m wsfilter = white Space Filter ;", "m xstrf = xstringfactory ;", "m indexing = do Indexing ;", "if ( do Indexing ) {", "m expanded Name Table = new Expanded Name Table ( ) ; }", "else {", "m expanded Name Table = m mgr Default . get Expanded Name Table ( this ) ; }", "if ( null != white Space Filter ) {", "m should Strip Whitespace Stack = new Bool Stack ( ) ;", "push Should Strip Whitespace ( false ) ; } }"]}
{"ids": "61066", "code": ["private boolean less Than Or Equal ( byte [ ] a , byte [ ] b ) {", "int len = Math . min ( a . length , b . length ) ;", "for ( int i = NUM_ ; i != len ; ++ i ) {", "if ( a [ i ] != b [ i ] ) {", "return ( a [ i ] & NUM_ ) < ( b [ i ] & NUM_ ) ; } }", "return len == a . length ; }"]}
{"ids": "67987", "code": ["protected void clear ( ) {", "parts . clear ( ) ; }"]}
{"ids": "19658", "code": ["public static boolean is Number ( String s ) {", "try {", "Integer . value Of ( s ) ;", "return true ; }", "catch ( Exception e ) {", "return false ; } }"]}
{"ids": "47984", "code": ["private boolean is Outer G State ( ) {", "return m G State Stack . size ( ) == NUM_ ; }"]}
{"ids": "23479", "code": ["void add ( Super Card Toast super Card Toast ) {", "m List . add ( super Card Toast ) ; }"]}
{"ids": "137", "code": ["static public Tasker create ( ) {", "return new Tasker ( ) ; }"]}
{"ids": "53961", "code": ["public static String concern Stack String ( Block Info block Info ) {", "String result = STR_ ;", "for ( String stack Entry : block Info . thread Stack Entries ) {", "if ( Character . is Letter ( stack Entry . char At ( NUM_ ) ) ) {", "String [ ] lines = stack Entry . split ( Block Info . SEPARATOR ) ;", "for ( String line : lines ) {", "String key Stack String = concern Stack String ( line ) ;", "if ( key Stack String != null ) {", "return key Stack String ; } }", "return class Simple Name ( lines [ NUM_ ] ) ; } }", "return result ; }"]}
{"ids": "75900", "code": ["static String gravity To String ( @ Edge Gravity int gravity ) {", "if ( ( gravity & Gravity . LEFT ) == Gravity . LEFT ) {", "return STR_ ; }", "if ( ( gravity & Gravity . RIGHT ) == Gravity . RIGHT ) {", "return STR_ ; }", "if ( ( gravity & Gravity . BOTTOM ) == Gravity . BOTTOM ) {", "return STR_ ; }", "return Integer . to Hex String ( gravity ) ; }"]}
{"ids": "81876", "code": ["public void remove All Renderers ( ) {", "m Renderers . clear ( ) ; }"]}
{"ids": "69931", "code": ["public static int write Speex Header ( byte [ ] buf , int offset , int sample Rate , int mode , int channels , boolean vbr , int nframes , int packetlength ) {", "write String ( buf , offset , STR_ ) ;", "write String ( buf , offset + NUM_ , STR_ ) ;", "System . arraycopy ( new byte [ NUM_ ] , NUM_ , buf , offset + NUM_ , NUM_ ) ;", "write Int ( buf , offset + NUM_ , NUM_ ) ;", "write Int ( buf , offset + NUM_ , NUM_ ) ;", "write Int ( buf , offset + NUM_ , sample Rate ) ;", "write Int ( buf , offset + NUM_ , mode ) ;", "write Int ( buf , offset + NUM_ , NUM_ ) ;", "write Int ( buf , offset + NUM_ , channels ) ;", "write Int ( buf , offset + NUM_ , - NUM_ ) ;", "write Int ( buf , offset + NUM_ , NUM_ << mode ) ;", "write Int ( buf , offset + NUM_ , vbr ? NUM_ : NUM_ ) ;", "write Int ( buf , offset + NUM_ , nframes ) ;", "write Int ( buf , offset + NUM_ , NUM_ ) ;", "write Int ( buf , offset + NUM_ , packetlength ) ;", "write Int ( buf , offset + NUM_ , NUM_ ) ;", "return NUM_ ; }"]}
{"ids": "31696", "code": ["private static File ignite Hadoop Config ( String ignite Home ) {", "Path path = Paths . get ( ignite Home , STR_ , STR_ , STR_ ) ;", "if ( ! Files . exists ( path ) ) path = Paths . get ( ignite Home , STR_ , STR_ ) ;", "if ( Files . exists ( path ) ) return path . to File ( ) ;", "else return new File ( ignite Home , STR_ ) ; }"]}
{"ids": "52899", "code": ["protected Approximation Line conservative Knn Distance Approximation ( int k max ) {", "int k 0 = k max ;", "double y 1 = Double . NEGATIVE INFINITY ;", "double y kmax = Double . NEGATIVE INFINITY ;", "for ( int i = NUM_ ; i < get Num Entries ( ) ; i ++ ) {", "Mk Co P Entry entry = get Entry ( i ) ;", "Approximation Line approx = entry . get Conservative Knn Distance Approximation ( ) ;", "k 0 = Math . min ( approx . get K 0 ( ) , k 0 ) ; }", "for ( int i = NUM_ ; i < get Num Entries ( ) ; i ++ ) {", "Mk Co P Entry entry = get Entry ( i ) ;", "Approximation Line approx = entry . get Conservative Knn Distance Approximation ( ) ;", "double entry y 1 = approx . get Value At ( k 0 ) ;", "double entry y kmax = approx . get Value At ( k max ) ;", "if ( ! Double . is Infinite ( entry y 1 ) ) {", "y 1 = Math . max ( entry y 1 , y 1 ) ; }", "if ( ! Double . is Infinite ( entry y kmax ) ) {", "y kmax = Math . max ( entry y kmax , y kmax ) ; } }", "double m = ( y kmax - y 1 ) / ( Math . log ( k max ) - Math . log ( k 0 ) ) ;", "double t = y 1 - m * Math . log ( k 0 ) ;", "return new Approximation Line ( k 0 , m , t ) ; }"]}
{"ids": "4944", "code": ["public final boolean shares layer ( Brd Item p other ) {", "int max first layer = Math . max ( first layer ( ) , p other . first layer ( ) ) ;", "int min last layer = Math . min ( last layer ( ) , p other . last layer ( ) ) ;", "return max first layer <= min last layer ; }"]}
{"ids": "25402", "code": ["public Coap Client ( URI uri ) {", "this ( uri . to String ( ) ) ; }"]}
{"ids": "72318", "code": ["private void zero ( ) throws JSON Exception {", "if ( probe ) {", "log ( NUM_ ) ; }", "write ( NUM_ , NUM_ ) ; }"]}
{"ids": "24448", "code": ["public static boolean been Done ( Time Unit time Unit , long amount , String tag , Count Checker number Of Times ) {", "long time In Millis = time Unit . to Millis ( amount ) ;", "return been Done ( time In Millis , tag , number Of Times ) ; }"]}
{"ids": "60644", "code": ["public static String normalize ( String oid ) {", "return oid . starts With ( STR_ ) ? oid . substring ( NUM_ ) : oid ; }"]}
{"ids": "23017", "code": ["public Rtcp Packet parse Rtcp Packet ( Packet packet ) {", "Rtcp Compound Packet compound Packet = new Rtcp Compound Packet ( packet ) ;", "Vector < Rtcp Packet > subpackets = new Vector < Rtcp Packet > ( ) ;", "Data Input Stream in = new Data Input Stream ( new Byte Array Input Stream ( compound Packet . data , compound Packet . offset , compound Packet . length ) ) ;", "try {", "rtcp Session . updateavgrtcpsize ( compound Packet . length ) ;", "int length = NUM_ ;", "for ( int offset = NUM_ ; offset < compound Packet . length ; offset += length ) {", "int firstbyte = in . read Unsigned Byte ( ) ;", "if ( ( firstbyte & NUM_ ) != NUM_ ) {", "return null ; }", "int type = in . read Unsigned Byte ( ) ;", "length = in . read Unsigned Short ( ) ;", "length = length + NUM_ << NUM_ ;", "int padlen = NUM_ ;", "if ( offset + length > compound Packet . length ) {", "return null ; }", "if ( offset + length == compound Packet . length ) {", "if ( ( firstbyte & NUM_ ) != NUM_ ) {", "padlen = compound Packet . data [ compound Packet . offset + compound Packet . length - NUM_ ] & NUM_ ;", "if ( padlen == NUM_ ) {", "return null ; } } }", "else if ( ( firstbyte & NUM_ ) != NUM_ ) {", "return null ; }", "int inlength = length - padlen ;", "firstbyte &= NUM_ ;", "Rtcp Packet subpacket ;", "switch ( type ) {", "case Rtcp Packet . RTCP SR :", "stats . num Sr Pkts ++ ;", "if ( inlength != NUM_ + NUM_ * firstbyte ) {", "stats . num Malformed Rtcp Pkts ++ ;", "return null ; }", "Rtcp Sender Report Packet srp = new Rtcp Sender Report Packet ( compound Packet ) ;", "subpacket = srp ;", "srp . ssrc = in . read Int ( ) ;", "srp . ntptimestampmsw = ( long ) in . read Int ( ) & NUM_ ;", "srp . ntptimestamplsw = ( long ) in . read Int ( ) & NUM_ ;", "srp . rtptimestamp = ( long ) in . read Int ( ) & NUM_ ;", "srp . packetcount = ( long ) in . read Int ( ) & NUM_ ;", "srp . octetcount = ( long ) in . read Int ( ) & NUM_ ;", "srp . reports = new Rtcp Report [ firstbyte ] ;", "Rtp Source source SR = rtcp Session . get My Source ( ) ;", "if ( source SR != null ) {", "source SR . received Sender Report ( srp ) ; }", "for ( int i = NUM_ ; i < srp . reports . length ; i ++ ) {", "Rtcp Report report = new Rtcp Report ( ) ;", "srp . reports [ i ] = report ;", "report . ssrc = in . read Int ( ) ;", "long val = in . read Int ( ) ;", "val &= NUM_ ;", "report . fractionlost = ( int ) ( val > > NUM_ ) ;", "report . packetslost = ( int ) ( val & NUM_ ) ;", "report . lastseq = ( long ) in . read Int ( ) & NUM_ ;", "report . jitter = in . read Int ( ) ;", "report . lsr = ( long ) in . read Int ( ) & NUM_ ;", "report . dlsr = ( long ) in . read Int ( ) & NUM_ ; }", "notify Rtcp Listeners ( new Rtcp Sender Report Event ( srp ) ) ;", "break ;", "case Rtcp Packet . RTCP RR :", "if ( inlength != NUM_ + NUM_ * firstbyte ) {", "stats . num Malformed Rtcp Pkts ++ ;", "return null ; }", "Rtcp Receiver Report Packet rrp = new Rtcp Receiver Report Packet ( compound Packet ) ;", "subpacket = rrp ;", "rrp . ssrc = in . read Int ( ) ;", "rrp . reports = new Rtcp Report [ firstbyte ] ;", "for ( int i = NUM_ ; i < rrp . reports . length ; i ++ ) {", "Rtcp Report report = new Rtcp Report ( ) ;", "rrp . reports [ i ] = report ;", "report . ssrc = in . read Int ( ) ;", "long val = in . read Int ( ) ;", "val &= NUM_ ;", "report . fractionlost = ( int ) ( val > > NUM_ ) ;", "report . packetslost = ( int ) ( val & NUM_ ) ;", "report . lastseq = ( long ) in . read Int ( ) & NUM_ ;", "report . jitter = in . read Int ( ) ;", "report . lsr = ( long ) in . read Int ( ) & NUM_ ;", "report . dlsr = ( long ) in . read Int ( ) & NUM_ ; }", "notify Rtcp Listeners ( new Rtcp Receiver Report Event ( rrp ) ) ;", "break ;", "case Rtcp Packet . RTCP SDES :", "Rtcp Sdes Packet sdesp = new Rtcp Sdes Packet ( compound Packet ) ;", "subpacket = sdesp ;", "sdesp . sdes = new Rtcp Sdes Block [ firstbyte ] ;", "int sdesoff = NUM_ ;", "for ( int i = NUM_ ; i < sdesp . sdes . length ; i ++ ) {", "Rtcp Sdes Block chunk = new Rtcp Sdes Block ( ) ;", "sdesp . sdes [ i ] = chunk ;", "chunk . ssrc = in . read Int ( ) ;", "sdesoff += NUM_ ;", "Vector < Rtcp Sdes Item > items = new Vector < Rtcp Sdes Item > ( ) ;", "boolean gotcname = false ;", "int j ;", "while ( ( j = in . read Unsigned Byte ( ) ) != NUM_ ) {", "if ( j < NUM_ || j > NUM_ ) {", "stats . num Malformed Rtcp Pkts ++ ;", "return null ; }", "if ( j == NUM_ ) {", "gotcname = true ; }", "Rtcp Sdes Item item = new Rtcp Sdes Item ( ) ;", "items . add Element ( item ) ;", "item . type = j ;", "int sdeslen = in . read Unsigned Byte ( ) ;", "item . data = new byte [ sdeslen ] ;", "in . read Fully ( item . data ) ;", "sdesoff += NUM_ + sdeslen ; }", "if ( ! gotcname ) {", "stats . num Malformed Rtcp Pkts ++ ;", "return null ; }", "chunk . items = new Rtcp Sdes Item [ items . size ( ) ] ;", "items . copy Into ( chunk . items ) ;", "if ( ( sdesoff & NUM_ ) != NUM_ ) {", "if ( in . skip ( NUM_ - ( sdesoff & NUM_ ) ) != NUM_ - ( sdesoff & NUM_ ) ) {", "return null ; }", "sdesoff = sdesoff + NUM_ & - NUM_ ; } }", "if ( inlength != sdesoff ) {", "stats . num Malformed Rtcp Pkts ++ ;", "return null ; }", "notify Rtcp Listeners ( new Rtcp Sdes Event ( sdesp ) ) ;", "break ;", "case Rtcp Packet . RTCP BYE :", "Rtcp Bye Packet byep = new Rtcp Bye Packet ( compound Packet ) ;", "subpacket = byep ;", "byep . ssrc = new int [ firstbyte ] ;", "for ( int i = NUM_ ; i < byep . ssrc . length ; i ++ ) {", "byep . ssrc [ i ] = in . read Int ( ) ; }", "int reasonlen ;", "if ( inlength > NUM_ + NUM_ * firstbyte ) {", "reasonlen = in . read Unsigned Byte ( ) ;", "byep . reason = new byte [ reasonlen ] ;", "reasonlen ++ ; }", "else {", "reasonlen = NUM_ ;", "byep . reason = new byte [ NUM_ ] ; }", "reasonlen = reasonlen + NUM_ & - NUM_ ;", "if ( inlength != NUM_ + NUM_ * firstbyte + reasonlen ) {", "stats . num Malformed Rtcp Pkts ++ ;", "return null ; }", "in . read Fully ( byep . reason ) ;", "int skip Bye = reasonlen - byep . reason . length ;", "if ( in . skip ( skip Bye ) != skip Bye ) {", "return null ; }", "notify Rtcp Listeners ( new Rtcp Bye Event ( byep ) ) ;", "break ;", "case Rtcp Packet . RTCP APP :", "if ( inlength < NUM_ ) {", "return null ; }", "Rtcp App Packet appp = new Rtcp App Packet ( compound Packet ) ;", "subpacket = appp ;", "appp . ssrc = in . read Int ( ) ;", "appp . name = in . read Int ( ) ;", "appp . subtype = firstbyte ;", "appp . data = new byte [ inlength - NUM_ ] ;", "in . read Fully ( appp . data ) ;", "int skip App = inlength - NUM_ - appp . data . length ;", "if ( in . skip ( skip App ) != skip App ) {", "return null ; }", "notify Rtcp Listeners ( new Rtcp Application Event ( appp ) ) ;", "break ;", "default :", "stats . num Unknown Types ++ ;", "return null ; }", "subpacket . offset = offset ;", "subpacket . length = length ;", "subpackets . add Element ( subpacket ) ;", "if ( in . skip Bytes ( padlen ) != padlen ) {", "return null ; } } }", "catch ( Exception e ) {", "return null ; }", "compound Packet . packets = new Rtcp Packet [ subpackets . size ( ) ] ;", "subpackets . copy Into ( compound Packet . packets ) ;", "return compound Packet ; }"]}
{"ids": "81146", "code": ["public void reset ( ) {", "initialize ( ) ; }"]}
{"ids": "978", "code": ["private static void add Listeners For Real ( final Service service , final Set < Listener > existing Listeners , final Listener listener , final Executor executor ) {", "if ( ! existing Listeners . contains ( listener ) ) {", "existing Listeners . add ( listener ) ;", "service . add Listener ( listener , executor ) ; } }"]}
{"ids": "42743", "code": ["public void prepend ( Char Sequence s ) {", "text . insert ( NUM_ , s ) ; }"]}
{"ids": "14184", "code": ["public static void send Response With Status ( Http Servlet Request request , Http Servlet Response response , Print Writer out , String idp Meta Alias , String idp Entity ID , String realm , Authn Request authn Req , String relay State , String sp Entity ID , String firstlevel Status Code Value , String secondlevel Status Code Value ) throws SAML 2 Exception {", "Response res = SAML 2 Utils . get Error Response ( authn Req , firstlevel Status Code Value , secondlevel Status Code Value , null , idp Entity ID ) ;", "String Buffer returned Binding = new String Buffer ( ) ;", "String acs URL = IDPSSO Util . get AC Surl ( sp Entity ID , realm , authn Req , request , returned Binding ) ;", "String acs Binding = returned Binding . to String ( ) ;", "send Response ( request , response , out , acs Binding , sp Entity ID , idp Entity ID , idp Meta Alias , realm , relay State , acs URL , res , null ) ; }"]}
{"ids": "13208", "code": ["protected void validate DT Dattribute ( Q Name element , String att Value , XML Attribute Decl attribute Decl ) throws XNI Exception {", "switch ( attribute Decl . simple Type . type ) {", "case XML Simple Type . TYPE ENTITY : {", "boolean is Alist Attribute = attribute Decl . simple Type . list ;", "try {", "if ( is Alist Attribute ) {", "f Val ENTITIES . validate ( att Value , f Validation State ) ; }", "else {", "f Val ENTITY . validate ( att Value , f Validation State ) ; } }", "catch ( Invalid Datatype Value Exception ex ) {", "f Error Reporter . report Error ( XML Message Formatter . XML DOMAIN , ex . get Key ( ) , ex . get Args ( ) , XML Error Reporter . SEVERITY ERROR ) ; }", "break ; }", "case XML Simple Type . TYPE NOTATION :", "case XML Simple Type . TYPE ENUMERATION : {", "boolean found = false ;", "String [ ] enum Vals = attribute Decl . simple Type . enumeration ;", "if ( enum Vals == null ) {", "found = false ; }", "else for ( int i = NUM_ ; i < enum Vals . length ; i ++ ) {", "if ( att Value == enum Vals [ i ] || att Value . equals ( enum Vals [ i ] ) ) {", "found = true ;", "break ; } }", "if ( ! found ) {", "String Buffer enum Value String = new String Buffer ( ) ;", "if ( enum Vals != null ) for ( int i = NUM_ ; i < enum Vals . length ; i ++ ) {", "enum Value String . append ( enum Vals [ i ] + STR_ ) ; }", "f Error Reporter . report Error ( XML Message Formatter . XML DOMAIN , STR_ , new Object [ ] { attribute Decl . name . rawname , att Value , enum Value String } , XML Error Reporter . SEVERITY ERROR ) ; }", "break ; }", "case XML Simple Type . TYPE ID : {", "try {", "f Val ID . validate ( att Value , f Validation State ) ; }", "catch ( Invalid Datatype Value Exception ex ) {", "f Error Reporter . report Error ( XML Message Formatter . XML DOMAIN , ex . get Key ( ) , ex . get Args ( ) , XML Error Reporter . SEVERITY ERROR ) ; }", "break ; }", "case XML Simple Type . TYPE IDREF : {", "boolean is Alist Attribute = attribute Decl . simple Type . list ;", "try {", "if ( is Alist Attribute ) {", "f Val ID Refs . validate ( att Value , f Validation State ) ; }", "else {", "f Val ID Ref . validate ( att Value , f Validation State ) ; } }", "catch ( Invalid Datatype Value Exception ex ) {", "if ( is Alist Attribute ) {", "f Error Reporter . report Error ( XML Message Formatter . XML DOMAIN , STR_ , new Object [ ] { att Value } , XML Error Reporter . SEVERITY ERROR ) ; }", "else {", "f Error Reporter . report Error ( XML Message Formatter . XML DOMAIN , ex . get Key ( ) , ex . get Args ( ) , XML Error Reporter . SEVERITY ERROR ) ; } }", "break ; }", "case XML Simple Type . TYPE NMTOKEN : {", "boolean is Alist Attribute = attribute Decl . simple Type . list ;", "try {", "if ( is Alist Attribute ) {", "f Val NMTOKENS . validate ( att Value , f Validation State ) ; }", "else {", "f Val NMTOKEN . validate ( att Value , f Validation State ) ; } }", "catch ( Invalid Datatype Value Exception ex ) {", "if ( is Alist Attribute ) {", "f Error Reporter . report Error ( XML Message Formatter . XML DOMAIN , STR_ , new Object [ ] { att Value } , XML Error Reporter . SEVERITY ERROR ) ; }", "else {", "f Error Reporter . report Error ( XML Message Formatter . XML DOMAIN , STR_ , new Object [ ] { att Value } , XML Error Reporter . SEVERITY ERROR ) ; } }", "break ; } } }"]}
{"ids": "63502", "code": ["public static double mean 2 ( Connection conn , double ... values ) {", "conn . get Class ( ) ;", "double sum = NUM_ ;", "for ( double x : values ) {", "sum += x ; }", "return sum / values . length ; }"]}
{"ids": "29515", "code": ["public static String dom To String ( Document dom Doc ) {", "return dom To String ( dom Doc . get Document Element ( ) , false ) ; }"]}
{"ids": "40690", "code": ["public static < T > T assert And Cast ( Class < ? extends T > clazz , Object o ) {", "assert Not Null ( clazz ) ;", "assert Not Null ( o ) ;", "assert True ( clazz . is Instance ( o ) ) ;", "return clazz . cast ( o ) ; }"]}
{"ids": "9046", "code": ["private String create Mismatch Message ( String mismatch , Migration Version version , Object applied , Object resolved ) {", "return String . format ( STR_ + mismatch + STR_ + STR_ + STR_ , version , applied , resolved ) ; }"]}
{"ids": "69381", "code": ["public static Fields find By Thrift Id ( int field Id ) {", "switch ( field Id ) {", "case NUM_ :", "return IDS ;", "default :", "return null ; } }"]}
{"ids": "20763", "code": ["public int compare To ( Object o ) {", "Split split = ( Split ) o ;", "Bit Set P = get First Part ( ) ;", "Bit Set Q = split . get First Part ( ) ;", "int a = P . next Set Bit ( NUM_ ) ;", "int b = Q . next Set Bit ( NUM_ ) ;", "while ( a > - NUM_ && b > - NUM_ ) {", "if ( a < b ) return - NUM_ ;", "else if ( a > b ) return NUM_ ;", "a = P . next Set Bit ( a + NUM_ ) ;", "b = Q . next Set Bit ( b + NUM_ ) ; }", "if ( a < b ) return - NUM_ ;", "else if ( a > b ) return NUM_ ;", "P = get Second Part ( ) ;", "Q = split . get Second Part ( ) ;", "a = P . next Set Bit ( NUM_ ) ;", "b = Q . next Set Bit ( NUM_ ) ;", "while ( a > - NUM_ && b > - NUM_ ) {", "if ( a < b ) return - NUM_ ;", "else if ( a > b ) return NUM_ ;", "a = P . next Set Bit ( a + NUM_ ) ;", "b = Q . next Set Bit ( b + NUM_ ) ; }", "if ( a < b ) return - NUM_ ;", "else if ( a > b ) return NUM_ ;", "else return NUM_ ; }"]}
{"ids": "64793", "code": ["public boolean is Matching Talkgroup ( LTR Net Message message ) {", "String talkgroup = message . get Talkgroup ID ( ) ;", "if ( talkgroup != null && get To ID ( ) != null && talkgroup . content Equals ( get To ID ( ) ) ) {", "return true ; }", "return is Matching Talkgroup ( message . get Talkgroup ID ( ) ) ; }"]}
{"ids": "12254", "code": ["public void put ( byte [ ] source , int index , int length ) {", "if ( m Buffer . capacity ( ) < ( m Length + length ) ) {", "expand Buffer ( m Length + length + ADDITIONAL BUFFER SIZE ) ; }", "m Buffer . put ( source , index , length ) ;", "m Length += length ; }"]}
{"ids": "65933", "code": ["public Shape model To View ( int pos , Shape a , Position . Bias b ) throws Bad Location Exception {", "return m view . model To View ( pos , a , b ) ; }"]}
{"ids": "48591", "code": ["private static int apply Precision ( int dec Exp , char [ ] digits , int n Digits , int prec ) {", "if ( prec >= n Digits || prec < NUM_ ) {", "return dec Exp ; }", "if ( prec == NUM_ ) {", "if ( digits [ NUM_ ] >= STR_ ) {", "digits [ NUM_ ] = STR_ ;", "Arrays . fill ( digits , NUM_ , n Digits , STR_ ) ;", "return dec Exp + NUM_ ; }", "else {", "Arrays . fill ( digits , NUM_ , n Digits , STR_ ) ;", "return dec Exp ; } }", "int q = digits [ prec ] ;", "if ( q >= STR_ ) {", "int i = prec ;", "q = digits [ -- i ] ;", "if ( q == STR_ ) {", "while ( q == STR_ && i > NUM_ ) {", "q = digits [ -- i ] ; }", "if ( q == STR_ ) {", "digits [ NUM_ ] = STR_ ;", "Arrays . fill ( digits , NUM_ , n Digits , STR_ ) ;", "return dec Exp + NUM_ ; } }", "digits [ i ] = ( char ) ( q + NUM_ ) ;", "Arrays . fill ( digits , i + NUM_ , n Digits , STR_ ) ; }", "else {", "Arrays . fill ( digits , prec , n Digits , STR_ ) ; }", "return dec Exp ; }"]}
{"ids": "76112", "code": ["protected void draw Cubic ( Canvas c , Line Data Set data Set , List < Entry > entries ) {", "Transformer trans = m Chart . get Transformer ( data Set . get Axis Dependency ( ) ) ;", "Entry entry From = data Set . get Entry For X Index ( m Min X ) ;", "Entry entry To = data Set . get Entry For X Index ( m Max X ) ;", "int diff = ( entry From == entry To ) ? NUM_ : NUM_ ;", "int minx = Math . max ( data Set . get Entry Position ( entry From ) - diff , NUM_ ) ;", "int maxx = Math . min ( Math . max ( minx + NUM_ , data Set . get Entry Position ( entry To ) + NUM_ ) , entries . size ( ) ) ;", "float phase X = m Animator . get Phase X ( ) ;", "float phase Y = m Animator . get Phase Y ( ) ;", "float intensity = data Set . get Cubic Intensity ( ) ;", "cubic Path . reset ( ) ;", "int size = ( int ) Math . ceil ( ( maxx - minx ) * phase X + minx ) ;", "if ( size - minx >= NUM_ ) {", "float prev Dx = NUM_ ;", "float prev Dy = NUM_ ;", "float cur Dx = NUM_ ;", "float cur Dy = NUM_ ;", "Entry prev Prev = entries . get ( minx ) ;", "Entry prev = entries . get ( minx ) ;", "Entry cur = entries . get ( minx ) ;", "Entry next = entries . get ( minx + NUM_ ) ;", "cubic Path . move To ( cur . get X Index ( ) , cur . get Val ( ) * phase Y ) ;", "prev Dx = ( cur . get X Index ( ) - prev . get X Index ( ) ) * intensity ;", "prev Dy = ( cur . get Val ( ) - prev . get Val ( ) ) * intensity ;", "cur Dx = ( next . get X Index ( ) - cur . get X Index ( ) ) * intensity ;", "cur Dy = ( next . get Val ( ) - cur . get Val ( ) ) * intensity ;", "cubic Path . cubic To ( prev . get X Index ( ) + prev Dx , ( prev . get Val ( ) + prev Dy ) * phase Y , cur . get X Index ( ) - cur Dx , ( cur . get Val ( ) - cur Dy ) * phase Y , cur . get X Index ( ) , cur . get Val ( ) * phase Y ) ;", "for ( int j = minx + NUM_ , count = Math . min ( size , entries . size ( ) - NUM_ ) ; j < count ; j ++ ) {", "prev Prev = entries . get ( j == NUM_ ? NUM_ : j - NUM_ ) ;", "prev = entries . get ( j - NUM_ ) ;", "cur = entries . get ( j ) ;", "next = entries . get ( j + NUM_ ) ;", "prev Dx = ( cur . get X Index ( ) - prev Prev . get X Index ( ) ) * intensity ;", "prev Dy = ( cur . get Val ( ) - prev Prev . get Val ( ) ) * intensity ;", "cur Dx = ( next . get X Index ( ) - prev . get X Index ( ) ) * intensity ;", "cur Dy = ( next . get Val ( ) - prev . get Val ( ) ) * intensity ;", "cubic Path . cubic To ( prev . get X Index ( ) + prev Dx , ( prev . get Val ( ) + prev Dy ) * phase Y , cur . get X Index ( ) - cur Dx , ( cur . get Val ( ) - cur Dy ) * phase Y , cur . get X Index ( ) , cur . get Val ( ) * phase Y ) ; }", "if ( size > entries . size ( ) - NUM_ ) {", "prev Prev = entries . get ( ( entries . size ( ) >= NUM_ ) ? entries . size ( ) - NUM_ : entries . size ( ) - NUM_ ) ;", "prev = entries . get ( entries . size ( ) - NUM_ ) ;", "cur = entries . get ( entries . size ( ) - NUM_ ) ;", "next = cur ;", "prev Dx = ( cur . get X Index ( ) - prev Prev . get X Index ( ) ) * intensity ;", "prev Dy = ( cur . get Val ( ) - prev Prev . get Val ( ) ) * intensity ;", "cur Dx = ( next . get X Index ( ) - prev . get X Index ( ) ) * intensity ;", "cur Dy = ( next . get Val ( ) - prev . get Val ( ) ) * intensity ;", "cubic Path . cubic To ( prev . get X Index ( ) + prev Dx , ( prev . get Val ( ) + prev Dy ) * phase Y , cur . get X Index ( ) - cur Dx , ( cur . get Val ( ) - cur Dy ) * phase Y , cur . get X Index ( ) , cur . get Val ( ) * phase Y ) ; } }", "if ( data Set . is Draw Filled Enabled ( ) ) {", "cubic Fill Path . reset ( ) ;", "cubic Fill Path . add Path ( cubic Path ) ;", "draw Cubic Fill ( m Bitmap Canvas , data Set , cubic Fill Path , trans , entry From . get X Index ( ) , entry From . get X Index ( ) + size ) ; }", "m Render Paint . set Color ( data Set . get Color ( ) ) ;", "m Render Paint . set Style ( Paint . Style . STROKE ) ;", "trans . path Value To Pixel ( cubic Path ) ;", "m Bitmap Canvas . draw Path ( cubic Path , m Render Paint ) ;", "m Render Paint . set Path Effect ( null ) ; }"]}
{"ids": "83934", "code": ["public void delete ( @ Non Null Key key ) {", "final Reentrant Read Write Lock . Write Lock lock = guard . write Lock ( ) ;", "lock . lock ( ) ;", "try {", "if ( ! read Keys . remove ( key ) ) throw new Illegal Argument Exception ( STR_ ) ;", "Files . delete ( key . get File ( ) ) ; }", "catch ( IO Exception ex ) {", "LOG . log ( Level . WARNING , STR_ + key . get File ( ) , ex ) ; }", "finally {", "lock . unlock ( ) ; } }"]}
{"ids": "16129", "code": ["public boolean on Touch Event ( Motion Event event ) {", "try {", "int pointer Count = multi Touch Supported ? ( Integer ) m get Pointer Count . invoke ( event ) : NUM_ ;", "if ( DEBUG ) Log . i ( STR_ , STR_ + multi Touch Supported + STR_ + m Mode + STR_ + handle Single Touch Events + STR_ + pointer Count ) ;", "if ( m Mode == MODE NOTHING && ! handle Single Touch Events && pointer Count == NUM_ ) return false ;", "if ( DEBUG ) Log . i ( STR_ , STR_ ) ;", "int action = event . get Action ( ) ;", "int hist Len = event . get History Size ( ) / pointer Count ;", "for ( int hist Idx = NUM_ ; hist Idx <= hist Len ; hist Idx ++ ) {", "boolean processing Hist = hist Idx < hist Len ;", "if ( ! multi Touch Supported || pointer Count == NUM_ ) {", "if ( DEBUG ) Log . i ( STR_ , STR_ ) ;", "x Vals [ NUM_ ] = processing Hist ? event . get Historical X ( hist Idx ) : event . get X ( ) ;", "y Vals [ NUM_ ] = processing Hist ? event . get Historical Y ( hist Idx ) : event . get Y ( ) ;", "pressure Vals [ NUM_ ] = processing Hist ? event . get Historical Pressure ( hist Idx ) : event . get Pressure ( ) ; }", "else {", "if ( DEBUG ) Log . i ( STR_ , STR_ ) ;", "int num Pointers = Math . min ( pointer Count , MAX TOUCH POINTS ) ;", "if ( DEBUG && pointer Count > MAX TOUCH POINTS ) Log . i ( STR_ , STR_ ) ;", "for ( int ptr Idx = NUM_ ; ptr Idx < num Pointers ; ptr Idx ++ ) {", "int ptr Id = ( Integer ) m get Pointer Id . invoke ( event , ptr Idx ) ;", "pointer Ids [ ptr Idx ] = ptr Id ;", "x Vals [ ptr Idx ] = ( Float ) ( processing Hist ? m get Historical X . invoke ( event , ptr Idx , hist Idx ) : m get X . invoke ( event , ptr Idx ) ) ;", "y Vals [ ptr Idx ] = ( Float ) ( processing Hist ? m get Historical Y . invoke ( event , ptr Idx , hist Idx ) : m get Y . invoke ( event , ptr Idx ) ) ;", "pressure Vals [ ptr Idx ] = ( Float ) ( processing Hist ? m get Historical Pressure . invoke ( event , ptr Idx , hist Idx ) : m get Pressure . invoke ( event , ptr Idx ) ) ; } }", "decode Touch Event ( pointer Count , x Vals , y Vals , pressure Vals , pointer Ids , processing Hist ? Motion Event . ACTION MOVE : action , processing Hist ? true : action != Motion Event . ACTION UP && ( action & ( ( NUM_ << ACTION POINTER INDEX SHIFT ) - NUM_ ) ) != ACTION POINTER UP && action != Motion Event . ACTION CANCEL , processing Hist ? event . get Historical Event Time ( hist Idx ) : event . get Event Time ( ) ) ; }", "return true ; }", "catch ( Exception e ) {", "Log . e ( STR_ , STR_ , e ) ;", "return false ; } }"]}
{"ids": "64465", "code": ["public static void store Location ( Context context , Lat Lng location ) {", "Shared Preferences prefs = Preference Manager . get Default Shared Preferences ( context ) ;", "Shared Preferences . Editor editor = prefs . edit ( ) ;", "editor . put Long ( PREFERENCES LAT , Double . double To Raw Long Bits ( location . latitude ) ) ;", "editor . put Long ( PREFERENCES LNG , Double . double To Raw Long Bits ( location . longitude ) ) ;", "editor . apply ( ) ; }"]}
{"ids": "12841", "code": ["public void write To File ( String file Name ) throws IO Exception {", "Print Writer outfile = new Print Writer ( new File Output Stream ( file Name ) ) ;", "outfile . println ( STR_ ) ;", "outfile . println ( STR_ ) ;", "outfile . println ( STR_ + m nbins ) ;", "outfile . println ( STR_ + m min ) ;", "outfile . println ( STR_ + m max ) ;", "outfile . println ( STR_ + m entries ) ;", "outfile . println ( STR_ + m underflow ) ;", "outfile . println ( STR_ + m overflow ) ;", "outfile . println ( STR_ ) ;", "for ( int i = NUM_ ; i < m nbins ; i ++ ) {", "outfile . println ( i + STR_ + m bin Centers [ i ] + STR_ + m hist [ i ] ) ; }", "outfile . println ( STR_ ) ;", "outfile . close ( ) ; }"]}
{"ids": "3227", "code": ["public void outdent ( ) {", "final int length = indent . length ( ) ;", "if ( length == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "indent . delete ( length - NUM_ , length ) ; }"]}
{"ids": "61721", "code": ["public static String extract From Data Matrix ( String code ) {", "if ( code . length ( ) < NUM_ ) {", "return null ; }", "if ( code . starts With ( STR_ ) ) {", "return code . substring ( NUM_ , NUM_ ) ; }", "return null ; }"]}
{"ids": "46267", "code": ["public void paint Current Value ( Graphics g , Rectangle bounds , boolean has Focus ) {", "XP Style xp = XP Style . get XP ( ) ;", "if ( xp != null ) {", "bounds . x += NUM_ ;", "bounds . y += NUM_ ;", "bounds . width -= NUM_ ;", "bounds . height -= NUM_ ; }", "else {", "bounds . x += NUM_ ;", "bounds . y += NUM_ ;", "bounds . width -= NUM_ ;", "bounds . height -= NUM_ ; }", "if ( ! combo Box . is Editable ( ) && xp != null && xp . is Skin Defined ( combo Box , Part . CP READONLY ) ) {", "List Cell Renderer renderer = combo Box . get Renderer ( ) ;", "Component c ;", "if ( has Focus && ! is Popup Visible ( combo Box ) ) {", "c = renderer . get List Cell Renderer Component ( list Box , combo Box . get Selected Item ( ) , - NUM_ , true , false ) ; }", "else {", "c = renderer . get List Cell Renderer Component ( list Box , combo Box . get Selected Item ( ) , - NUM_ , false , false ) ; }", "c . set Font ( combo Box . get Font ( ) ) ;", "if ( combo Box . is Enabled ( ) ) {", "c . set Foreground ( combo Box . get Foreground ( ) ) ;", "c . set Background ( combo Box . get Background ( ) ) ; }", "else {", "c . set Foreground ( Default Lookup . get Color ( combo Box , this , STR_ , null ) ) ;", "c . set Background ( Default Lookup . get Color ( combo Box , this , STR_ , null ) ) ; }", "boolean should Validate = false ;", "if ( c instanceof J Panel ) {", "should Validate = true ; }", "current Value Pane . paint Component ( g , c , combo Box , bounds . x , bounds . y , bounds . width , bounds . height , should Validate ) ; }", "else {", "super . paint Current Value ( g , bounds , has Focus ) ; } }"]}
{"ids": "12868", "code": ["@ Override public Audio Input Stream synthesise One Section ( String festival Utt , Voice voice ) throws IO Exception {", "write Relation Files ( festival Utt ) ;", "File audio File = new File ( festival Dir . get Path ( ) + File . separator + STR_ ) ;", "String festival Voice Cmd = STR_ + voice . get Name ( ) + STR_ ;", "Audio Input Stream sound = festival Synthesise ( audio File , festival Voice Cmd ) ;", "return sound ; }"]}
{"ids": "3741", "code": ["public int read ( byte [ ] buffer , int offset , int length ) throws IO Exception {", "log . finest ( STR_ + Long . to Hex String ( get File Pointer ( ) ) + STR_ + length + STR_ ) ;", "return file . read ( buffer , offset , length ) ; }"]}
{"ids": "33004", "code": ["public static Pattern create Pattern ( String [ ] patterns , boolean is Case Sensitive , boolean is Regex Search ) throws Pattern Syntax Exception {", "String Buffer pattern = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < patterns . length ; i ++ ) {", "if ( i > NUM_ ) {", "pattern . append ( STR_ ) ; }", "if ( is Regex Search ) {", "pattern . append ( patterns [ i ] ) ; }", "else {", "as Reg Ex ( patterns [ i ] , pattern ) ; } }", "return create Pattern ( pattern . to String ( ) , is Case Sensitive , true ) ; }"]}
{"ids": "11749", "code": ["public void add Arc ( float lat Point , float lon Point , int w , int h , float s , float e , Link Properties properties ) throws IO Exception {", "Link Arc . write ( lat Point , lon Point , NUM_ , NUM_ , w , h , s , e , properties , link . dos ) ; }"]}
{"ids": "32336", "code": ["public void on Undeploy ( Class Loader ldr ) {", "for ( Class < ? > cls : desc By Cls . key Set ( ) ) {", "if ( ldr . equals ( cls . get Class Loader ( ) ) ) desc By Cls . remove ( cls ) ; }", "U . clear Class Cache ( ldr ) ; }"]}
{"ids": "5246", "code": ["@ Override public boolean contains Class ( String class Name ) throws IO Exception {", "boolean contains Class = false ;", "String resource Name = STR_ + class Name . replace ( STR_ , STR_ ) + STR_ ;", "if ( get Resource ( resource Name ) != null ) {", "contains Class = true ; }", "for ( String resource : get Resources ( STR_ ) ) {", "Jar Archive jar = new Default Jar Archive ( get Resource ( resource ) ) ;", "if ( jar . contains Class ( class Name ) ) {", "contains Class = true ; } }", "return contains Class ; }"]}
{"ids": "63658", "code": ["public Tuple [ ] clear Internal ( ) {", "Tuple [ ] t = new Tuple [ get Tuple Count ( ) ] ;", "Iterator iter = tuples ( ) ;", "for ( int i = NUM_ ; iter . has Next ( ) ; ++ i ) {", "t [ i ] = ( Tuple ) iter . next ( ) ; }", "m tuples . clear ( ) ;", "return t ; }"]}
{"ids": "38839", "code": ["public synchronized void remove Text Listener ( Text Listener cl ) {", "m text Listeners . remove ( cl ) ; }"]}
{"ids": "60721", "code": ["private void ensure Capacity ( int desired Long Count ) {", "if ( desired Long Count <= bits . length ) {", "return ; }", "int new Length = Math . max ( desired Long Count , bits . length * NUM_ ) ;", "long [ ] new Bits = new long [ new Length ] ;", "System . arraycopy ( bits , NUM_ , new Bits , NUM_ , long Count ) ;", "this . bits = new Bits ; }"]}
{"ids": "53532", "code": ["public boolean matches ( String query , String text ) {", "return text . contains ( query ) ; }"]}
{"ids": "71229", "code": ["private void find Collapses From Existing Vertices ( List collapsed Vertex Indexes ) {", "for ( int i = NUM_ ; i < edge . size ( ) - NUM_ ; i ++ ) {", "Coordinate p 0 = edge . get Coordinate ( i ) ;", "Coordinate p 1 = edge . get Coordinate ( i + NUM_ ) ;", "Coordinate p 2 = edge . get Coordinate ( i + NUM_ ) ;", "if ( p 0 . equals 2 D ( p 2 ) ) {", "collapsed Vertex Indexes . add ( new Integer ( i + NUM_ ) ) ; } } }"]}
{"ids": "11494", "code": ["public void close ( ) throws IO Exception {", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ ) ; }", "try {", "if ( input File != null ) input File . close ( ) ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ; }", "input File = null ; }"]}
{"ids": "21708", "code": ["public static boolean check Pool Properties Changed ( Set < String > existing Value , Set < String > new Value ) {", "boolean property Changed = false ;", "if ( existing Value == null && ( new Value != null && ! new Value . is Empty ( ) ) ) {", "property Changed = true ; }", "else if ( new Value == null && ( existing Value != null && ! existing Value . is Empty ( ) ) ) {", "property Changed = true ; }", "else if ( existing Value != null && new Value != null ) {", "if ( existing Value . size ( ) != new Value . size ( ) || ! ( existing Value . contains All ( new Value ) ) ) {", "property Changed = true ; } }", "return property Changed ; }"]}
{"ids": "8166", "code": ["public static Output Stream left Shift ( Output Stream self , Input Stream in ) throws IO Exception {", "byte [ ] buf = new byte [ NUM_ ] ;", "while ( true ) {", "int count = in . read ( buf , NUM_ , buf . length ) ;", "if ( count == - NUM_ ) break ;", "if ( count == NUM_ ) {", "Thread . yield ( ) ;", "continue ; }", "self . write ( buf , NUM_ , count ) ; }", "self . flush ( ) ;", "return self ; }"]}
{"ids": "75160", "code": ["public static boolean git Local Config ( final Atomic Reference < String > path ) throws IO Exception {", "return git Local Config ( Environment . get Current Directory ( ) , path ) ; }"]}
{"ids": "43782", "code": ["public void verify ( ) {", "super . verify ( ) ;", "assert Equals ( STR_ , confirmed , collection ) ;", "assert Equals ( STR_ , confirmed . hash Code ( ) , collection . hash Code ( ) ) ;", "Collection set = make Confirmed Collection ( ) ;", "Iterator iterator = collection . iterator ( ) ;", "while ( iterator . has Next ( ) ) {", "assert True ( STR_ , set . add ( iterator . next ( ) ) ) ; } }"]}
{"ids": "6909", "code": ["public static CG Point ccp Rotate By Angle ( CG Point v , CG Point pivot , float angle ) {", "CG Point r = ccp Sub ( v , pivot ) ;", "float t = r . x ;", "float cosa = ( float ) Math . cos ( angle ) ;", "float sina = ( float ) Math . sin ( angle ) ;", "r . x = t * cosa - r . y * sina ;", "r . y = t * sina + r . y * cosa ;", "r = ccp Add ( r , pivot ) ;", "return r ; }"]}
{"ids": "55451", "code": ["private void open Context Menu ( Mouse Event e ) {", "if ( e . is Popup Trigger ( ) ) {", "Collection < String > streams = new Hash Set < > ( ) ;", "int [ ] selected Rows = table . get Selected Rows ( ) ;", "for ( int selected Row : selected Rows ) {", "Follower selected = followers . get ( selected Row ) ;", "streams . add ( String Util . to Lower Case ( selected . name ) ) ; }", "if ( ! streams . is Empty ( ) ) {", "Streams Context Menu m = new Streams Context Menu ( streams , context Menu Listener ) ;", "m . show ( table , e . get X ( ) , e . get Y ( ) ) ; } } }"]}
{"ids": "21627", "code": ["public static Workflow . Method expand Volumes Method ( URI storage , URI pool , URI volume , Long size ) {", "return new Workflow . Method ( STR_ , storage , pool , volume , size ) ; }"]}
{"ids": "63489", "code": ["void close Silently ( Socket socket ) {", "try {", "socket . close ( ) ; }", "catch ( Exception e ) { } }"]}
{"ids": "51374", "code": ["public static boolean equals ( byte [ ] array 1 , byte [ ] array 2 ) {", "if ( array 1 == array 2 ) return true ;", "if ( array 1 == null || array 2 == null || array 1 . length != array 2 . length ) return false ;", "for ( int i = NUM_ ; i < array 1 . length ; i ++ ) {", "if ( array 1 [ i ] != array 2 [ i ] ) return false ; }", "return true ; }"]}
{"ids": "5303", "code": ["private static String create Id From Jndi Location If Not Null ( String jndi Location ) {", "String id = null ;", "if ( jndi Location != null ) {", "id = create Id From Jndi Location ( jndi Location ) ; }", "return id ; }"]}
{"ids": "84417", "code": ["protected Set < Node > closure ( Dependency Kind ... dep Kinds ) {", "boolean progress = true ;", "Set < Node > closure = new Hash Set < Node > ( ) ;", "closure . add ( this ) ;", "while ( progress ) {", "progress = false ;", "for ( Node n 1 : new Hash Set < Node > ( closure ) ) {", "progress = closure . add All ( n 1 . get Dependencies ( dep Kinds ) ) ; } }", "return closure ; }"]}
{"ids": "33862", "code": ["public Vector ( Collection c ) {", "element Count = c . size ( ) ;", "element Data = new Object [ ( int ) Math . min ( ( element Count * NUM_ ) / NUM_ , Integer . MAX VALUE ) ] ;", "c . to Array ( element Data ) ; }"]}
{"ids": "57453", "code": ["public static < A extends Annotation > A create Annotation ( Class < ? extends Annotation > annotation Type , Annotation Member [ ] elements ) {", "Annotation Factory factory = new Annotation Factory ( annotation Type , elements ) ;", "return ( A ) Proxy . new Proxy Instance ( annotation Type . get Class Loader ( ) , new Class [ ] { annotation Type } , factory ) ; }"]}
{"ids": "43296", "code": ["public Linking Morphemes ( String ... a Morphemes ) {", "morphemes = new Array List < String > ( ) ;", "for ( String string : a Morphemes ) {", "morphemes . add ( string ) ; } }"]}
{"ids": "9529", "code": ["@ Override public void execute ( Metric Time Series time Series , Function Value Map function Value Map ) {", "if ( time Series . size ( ) <= NUM_ ) {", "function Value Map . add ( this , Double . Na N ) ;", "return ; }", "time Series . sort ( ) ;", "double first Value = time Series . get Value ( NUM_ ) ;", "double last Value = time Series . get Value ( time Series . size ( ) - NUM_ ) ;", "function Value Map . add ( this , Math . abs ( first Value - last Value ) ) ; }"]}
{"ids": "15626", "code": ["public static URL [ ] find Resource Bases ( String base Resource , Class Loader loader ) {", "Array List < URL > list = new Array List < URL > ( ) ;", "try {", "Enumeration < URL > urls = loader . get Resources ( base Resource ) ;", "while ( urls . has More Elements ( ) ) {", "URL url = urls . next Element ( ) ;", "list . add ( find Resource Base ( url , base Resource ) ) ; } }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; }", "return list . to Array ( new URL [ list . size ( ) ] ) ; }"]}
{"ids": "48823", "code": ["public Writable Raster create Writable Child ( int x , int y , int width , int height , int x 0 , int y 0 , int band List [ ] ) {", "if ( x < this . min X ) {", "throw new Raster Format Exception ( STR_ ) ; }", "if ( y < this . min Y ) {", "throw new Raster Format Exception ( STR_ ) ; }", "if ( ( x + width < x ) || ( x + width > this . width + this . min X ) ) {", "throw new Raster Format Exception ( STR_ ) ; }", "if ( ( y + height < y ) || ( y + height > this . height + this . min Y ) ) {", "throw new Raster Format Exception ( STR_ ) ; }", "Sample Model sm ;", "if ( band List != null ) sm = sample Model . create Subset Sample Model ( band List ) ;", "else sm = sample Model ;", "int delta X = x 0 - x ;", "int delta Y = y 0 - y ;", "return new Byte Banded Raster ( sm , data Buffer , new Rectangle ( x 0 , y 0 , width , height ) , new Point ( sample Model Translate X + delta X , sample Model Translate Y + delta Y ) , this ) ; }"]}
{"ids": "86357", "code": ["protected void move Up Item ( ) {", "if ( selection Table . get Selection Count ( ) == NUM_ ) {", "return ; }", "for ( final int index : selection Table . get Selection Indices ( ) ) {", "if ( index == NUM_ ) {", "selection Table . force Focus ( ) ;", "return ; } }", "final int [ ] new Selection = new int [ selection Table . get Selection Count ( ) ] ;", "int new Selection Index = NUM_ ;", "for ( final Table Item table Item : selection Table . get Selection ( ) ) {", "final int position = selection . index Of ( table Item . get Data ( ) ) ;", "swap ( position , position - NUM_ ) ;", "new Selection [ new Selection Index ++ ] = position - NUM_ ; }", "redraw Tables ( ) ;", "selection Table . select ( new Selection ) ;", "selection Table . force Focus ( ) ; }"]}
{"ids": "39468", "code": ["protected void maybe Fire Bounds Invalidated ( Rectangle invalidated Area ) {", "Drawing d = get Drawing ( ) ;", "Rectangle 2 D . Double canvas Bounds = new Rectangle 2 D . Double ( NUM_ , NUM_ , NUM_ , NUM_ ) ;", "if ( d . get ( CANVAS WIDTH ) != null ) {", "canvas Bounds . width += d . get ( CANVAS WIDTH ) ; }", "if ( d . get ( CANVAS HEIGHT ) != null ) {", "canvas Bounds . height += d . get ( CANVAS HEIGHT ) ; }", "if ( ! canvas Bounds . contains ( invalidated Area ) ) {", "fire Bounds Invalidated ( invalidated Area ) ; } }"]}
{"ids": "17126", "code": ["public Datagram Packet response Receive ( ) throws IO Exception {", "byte [ ] buf = new byte [ NUM_ ] ;", "Datagram Packet dp = new Datagram Packet ( buf , buf . length ) ;", "datagram Socket . receive ( dp ) ;", "return dp ; }"]}
{"ids": "78", "code": ["public void suspend ( String id ) {", "Trace State ts = trace State . get ( ) ;", "if ( log . is Loggable ( Level . FINEST ) ) {", "log . finest ( STR_ + ts + STR_ + id ) ; }", "if ( ts != null ) {", "set Expire ( ts ) ;", "try {", "suspended State Lock . lock ( ) ;", "if ( suspended State . contains Key ( id ) && log . is Loggable ( Level . FINEST ) ) {", "log . finest ( STR_ + suspended State . get ( id ) + STR_ + id ) ; }", "suspended State . put ( id , ts ) ;", "trace State . remove ( ) ; }", "finally {", "suspended State Lock . unlock ( ) ; } } }"]}
{"ids": "23963", "code": ["public static int hash Code ( final Object obj ) {", "return ( obj == null ? NUM_ : obj . hash Code ( ) ) ; }"]}
{"ids": "80080", "code": ["public static int max Level ( ) {", "return LEVELS - NUM_ ; }"]}
{"ids": "82270", "code": ["public void property Change ( Property Change Event evt ) {", "repaint ( ) ; }"]}
{"ids": "35927", "code": ["public static boolean remove Bean Or Folder ( String path ) {", "return remove Path ( path . split ( PATH SEPARATOR ) , s directory , NUM_ ) > NUM_ ; }"]}
{"ids": "52996", "code": ["private void update Selection ( Mode mode , Projection 2 D proj , SVG Point p 1 , SVG Point p 2 ) {", "DBID Selection sel Context = context . get Selection ( ) ;", "Hash Set Modifiable DBI Ds selection ;", "if ( sel Context == null || mode == Mode . REPLACE ) {", "selection = DBID Util . new Hash Set ( ) ; }", "else {", "selection = DBID Util . new Hash Set ( sel Context . get Selected Ids ( ) ) ; }", "for ( DBID Iter iditer = rel . iter DBI Ds ( ) ; iditer . valid ( ) ; iditer . advance ( ) ) {", "double [ ] vec = proj . fast Project Data To Render Space ( rel . get ( iditer ) ) ;", "if ( vec [ NUM_ ] >= Math . min ( p 1 . get X ( ) , p 2 . get X ( ) ) && vec [ NUM_ ] <= Math . max ( p 1 . get X ( ) , p 2 . get X ( ) ) && vec [ NUM_ ] >= Math . min ( p 1 . get Y ( ) , p 2 . get Y ( ) ) && vec [ NUM_ ] <= Math . max ( p 1 . get Y ( ) , p 2 . get Y ( ) ) ) {", "if ( mode == Mode . INVERT ) {", "if ( ! selection . contains ( iditer ) ) {", "selection . add ( iditer ) ; }", "else {", "selection . remove ( iditer ) ; } }", "else {", "selection . add ( iditer ) ; } } }", "context . set Selection ( new DBID Selection ( selection ) ) ; }"]}
{"ids": "355", "code": ["public Eclipse Ini Launcher ( File installation Root ) throws File Not Found Exception , IO Exception {", "File Misc . assert Mac App ( installation Root ) ;", "Objects . require Non Null ( installation Root ) ;", "eclipse Ini = Eclipse Ini . parse From ( new File ( installation Root , File Misc . mac Contents Eclipse ( ) + STR_ ) ) ; }"]}
{"ids": "13777", "code": ["public boolean can Add Member ( String realm Name , String id Type , String container ID Type ) throws AM Console Exception {", "boolean can = false ;", "try {", "Id Type type = Id Utils . get Type ( id Type ) ;", "Set can Add = type . can Add Members ( ) ;", "Id Type ctype = Id Utils . get Type ( container ID Type ) ;", "can = can Add . contains ( ctype ) ; }", "catch ( Id Repo Exception e ) {", "debug . warning ( STR_ , e ) ;", "throw new AM Console Exception ( get Error String ( e ) ) ; }", "return can ; }"]}
{"ids": "61455", "code": ["private static Node locate Attr Parent ( Element elem , Node attr ) {", "Node parent = null ;", "Attr check = elem . get Attribute Node ( attr . get Node Name ( ) ) ;", "if ( check == attr ) parent = elem ;", "if ( null == parent ) {", "for ( Node node = elem . get First Child ( ) ; null != node ; node = node . get Next Sibling ( ) ) {", "if ( Node . ELEMENT NODE == node . get Node Type ( ) ) {", "parent = locate Attr Parent ( ( Element ) node , attr ) ;", "if ( null != parent ) break ; } } }", "return parent ; }"]}
{"ids": "82808", "code": ["private void define Internal Frames ( UI Defaults d ) {", "d . put ( STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( STR_ , new Dimension UI Resource ( NUM_ , NUM_ ) ) ;", "d . put ( STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( STR_ , STR_ ) ;", "d . put ( STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "d . put ( STR_ , new Insets UI Resource ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "if ( Platform Utils . is Mac ( ) ) {", "d . put ( STR_ , new Color ( NUM_ ) ) ; }", "else {", "d . put ( STR_ , new Color ( NUM_ ) ) ; }", "d . put ( STR_ , new Color ( NUM_ ) ) ;", "d . put ( STR_ , new Color ( NUM_ ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ , true ) ) ;", "d . put ( STR_ , new Color ( NUM_ ) ) ;", "String p = STR_ ;", "String c = PAINTER PREFIX + STR_ ;", "d . put ( p + STR_ , new Derived Font ( STR_ , NUM_ , true , null ) ) ;", "d . put ( p + STR_ , STR_ ) ;", "d . put ( p + STR_ , new Title Pane Window Focused State ( ) ) ;", "d . put ( p + STR_ , new Internal Frame Window Focused State ( ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Frame And Root Painter . Which . BACKGROUND ENABLED ) ) ;", "d . put ( p + STR_ , new Lazy Painter ( c , Frame And Root Painter . Which . BACKGROUND ENABLED WINDOWFOCUSED ) ) ;", "p = STR_ ;", "d . put ( p + STR_ , NUM_ ) ;", "p = STR_ ;", "d . put ( p + STR_ , d . get ( STR_ ) ) ;", "d . put ( p + STR_ , Color . BLACK ) ; }"]}
{"ids": "23273", "code": ["public void read Security Header ( Sip Response response ) throws Payload Exception {", "WWW Authenticate Header www Header = ( WWW Authenticate Header ) response . get Header ( WWW Authenticate Header . NAME ) ;", "Authentication Info Header info Header = ( Authentication Info Header ) response . get Header ( Authentication Info Header . NAME ) ;", "if ( www Header != null ) {", "m Digest . set Realm ( www Header . get Realm ( ) ) ;", "m Digest . set Opaque ( www Header . get Opaque ( ) ) ;", "m Digest . set Qop ( www Header . get Qop ( ) ) ;", "m Digest . set Nextnonce ( www Header . get Nonce ( ) ) ; }", "else if ( info Header != null ) {", "if ( info Header . get Next Nonce ( ) != null ) {", "m Digest . set Nextnonce ( info Header . get Next Nonce ( ) ) ; } } }"]}
{"ids": "73478", "code": ["private void layout Panel ( ) {", "set Border ( Border Factory . create Empty Border ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ;", "set Layout ( new Border Layout ( ) ) ;", "add ( new Labelled Item ( STR_ , cb Distribution ) , Border Layout . NORTH ) ;", "add ( card Panel , Border Layout . CENTER ) ;", "cb Item Listener . item State Changed ( new Item Event ( cb Distribution , Item Event . SELECTED , card Panel , Item Event . ITEM STATE CHANGED ) ) ;", "repaint ( ) ;", "revalidate ( ) ; }"]}
{"ids": "53313", "code": ["@ Override public int compare To ( Double Double Pair other ) {", "int fdiff = Double . compare ( this . first , other . first ) ;", "if ( fdiff != NUM_ ) {", "return fdiff ; }", "return Double . compare ( this . second , other . second ) ; }"]}
{"ids": "8025", "code": ["private static boolean file Exists ( String file Path ) {", "File file = new File ( file Path ) ;", "return file . exists ( ) ; }"]}
{"ids": "50947", "code": ["public static String class Version To Jdk ( int version ) {", "return STR_ + Integer . to String ( version - NUM_ ) ; }"]}
{"ids": "80199", "code": ["private Bit Set create Bit Set ( final String binary String ) {", "final Bit Set bset = new Bit Set ( binary String . length ( ) ) ;", "boolean bit True = false ;", "for ( int i = NUM_ ; i < binary String . length ( ) ; i ++ ) {", "if ( binary String . char At ( i ) == STR_ ) {", "bit True = true ; }", "else {", "bit True = false ; }", "bset . set ( i , bit True ) ; }", "return bset ; }"]}
{"ids": "70049", "code": ["public void flush ( ) {", "buffer . force ( ) ; }"]}
{"ids": "74653", "code": ["public void remove ( Product product ) {", "try {", "solr Dao . remove ( product . get Id ( ) ) ; }", "catch ( IO Exception | Solr Server Exception ex ) {", "LOGGER . error ( STR_ + product . get Identifier ( ) + STR_ , ex ) ; } }"]}
{"ids": "81585", "code": ["public void start Background Fetch Service ( ) {", "Local Notification n = new Local Notification ( ) ;", "n . set Id ( BACKGROUND FETCH NOTIFICATION ID ) ;", "cancel Local Notification ( BACKGROUND FETCH NOTIFICATION ID ) ;", "schedule Local Notification ( n , System . current Time Millis ( ) + get Preferred Background Fetch Interval ( ) * NUM_ , NUM_ ) ; }"]}
{"ids": "26165", "code": ["protected void show Models ( boolean show , Epoxy Model < ? > ... models ) {", "show Models ( Arrays . as List ( models ) , show ) ; }"]}
{"ids": "48117", "code": ["static void check ( Public Key key , X 509 CRL crl ) throws Cert Path Validator Exception {", "X 509 CRL Impl x 509 CRL Impl = null ;", "try {", "x 509 CRL Impl = X 509 CRL Impl . to Impl ( crl ) ; }", "catch ( CRL Exception ce ) {", "throw new Cert Path Validator Exception ( ce ) ; }", "Algorithm Id algorithm Id = x 509 CRL Impl . get Sig Alg Id ( ) ;", "check ( key , algorithm Id ) ; }"]}
{"ids": "4927", "code": ["public void reset ( ) {", "node list . clear ( ) ; }"]}
{"ids": "63037", "code": ["public String name List ( String dir ) throws IO Exception {", "passive ( ) ;", "send ( STR_ + dir ) ;", "read Code ( NUM_ ) ;", "Byte Array Output Stream out = new Byte Array Output Stream ( ) ;", "IO Utils . copy And Close ( in Data , out ) ;", "read Code ( NUM_ ) ;", "byte [ ] data = out . to Byte Array ( ) ;", "return new String ( data ) ; }"]}
{"ids": "22572", "code": ["public VN Xe Command Result add Luns To Lun Group ( String lun Group Id , List < String > luns ) {", "Lun Group Modify Param param = new Lun Group Modify Param ( ) ;", "List < Lun Add Param > lun Adds = new Array List < Lun Add Param > ( ) ;", "for ( String lun Id : luns ) {", "VN Xe Base lun = new VN Xe Base ( lun Id ) ;", "Lun Add Param lun Add = new Lun Add Param ( ) ;", "lun Add . set Lun ( lun ) ;", "lun Adds . add ( lun Add ) ; }", "param . set Lun Add ( lun Adds ) ;", "Lun Group Requests req = new Lun Group Requests ( kh Client ) ;", "return req . modify Lun Group Sync ( lun Group Id , param ) ; }"]}
{"ids": "7234", "code": ["public static Constant Expression constant ( Object value , Class constant Type ) {", "return new Constant Expression ( value , constant Type . get Name ( ) ) ; }"]}
{"ids": "55849", "code": ["public static final String to FEN ( Position pos ) {", "String Builder ret = new String Builder ( ) ;", "for ( int r = NUM_ ; r >= NUM_ ; r -- ) {", "int num Empty = NUM_ ;", "for ( int c = NUM_ ; c < NUM_ ; c ++ ) {", "int p = pos . get Piece ( Position . get Square ( c , r ) ) ;", "if ( p == Piece . EMPTY ) {", "num Empty ++ ; }", "else {", "if ( num Empty > NUM_ ) {", "ret . append ( num Empty ) ;", "num Empty = NUM_ ; }", "switch ( p ) {", "case Piece . WKING :", "ret . append ( STR_ ) ;", "break ;", "case Piece . WQUEEN :", "ret . append ( STR_ ) ;", "break ;", "case Piece . WROOK :", "ret . append ( STR_ ) ;", "break ;", "case Piece . WBISHOP :", "ret . append ( STR_ ) ;", "break ;", "case Piece . WKNIGHT :", "ret . append ( STR_ ) ;", "break ;", "case Piece . WPAWN :", "ret . append ( STR_ ) ;", "break ;", "case Piece . BKING :", "ret . append ( STR_ ) ;", "break ;", "case Piece . BQUEEN :", "ret . append ( STR_ ) ;", "break ;", "case Piece . BROOK :", "ret . append ( STR_ ) ;", "break ;", "case Piece . BBISHOP :", "ret . append ( STR_ ) ;", "break ;", "case Piece . BKNIGHT :", "ret . append ( STR_ ) ;", "break ;", "case Piece . BPAWN :", "ret . append ( STR_ ) ;", "break ;", "default :", "throw new Runtime Exception ( ) ; } } }", "if ( num Empty > NUM_ ) {", "ret . append ( num Empty ) ; }", "if ( r > NUM_ ) {", "ret . append ( STR_ ) ; } }", "ret . append ( pos . white Move ? STR_ : STR_ ) ;", "boolean any Castle = false ;", "if ( pos . h 1 Castle ( ) ) {", "ret . append ( STR_ ) ;", "any Castle = true ; }", "if ( pos . a 1 Castle ( ) ) {", "ret . append ( STR_ ) ;", "any Castle = true ; }", "if ( pos . h 8 Castle ( ) ) {", "ret . append ( STR_ ) ;", "any Castle = true ; }", "if ( pos . a 8 Castle ( ) ) {", "ret . append ( STR_ ) ;", "any Castle = true ; }", "if ( ! any Castle ) {", "ret . append ( STR_ ) ; } {", "ret . append ( STR_ ) ;", "if ( pos . get Ep Square ( ) >= NUM_ ) {", "int x = Position . get X ( pos . get Ep Square ( ) ) ;", "int y = Position . get Y ( pos . get Ep Square ( ) ) ;", "ret . append ( ( char ) ( x + STR_ ) ) ;", "ret . append ( ( char ) ( y + STR_ ) ) ; }", "else {", "ret . append ( STR_ ) ; } }", "ret . append ( STR_ ) ;", "ret . append ( pos . half Move Clock ) ;", "ret . append ( STR_ ) ;", "ret . append ( pos . full Move Counter ) ;", "return ret . to String ( ) ; }"]}
{"ids": "34353", "code": ["public void end Element ( String uri , String local Name , String q Name ) throws SAX Exception {", "if ( ! ( html Mode && ( uri . equals ( STR_ ) || uri . equals ( STR_ ) ) && ( q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) || q Name . equals ( STR_ ) ) ) ) {", "write ( STR_ ) ;", "write Name ( uri , local Name , q Name , true ) ;", "write ( STR_ ) ; }", "if ( element Level == NUM_ ) {", "write ( STR_ ) ; }", "cdata Element = false ;", "super . end Element ( uri , local Name , q Name ) ;", "ns Support . pop Context ( ) ;", "element Level -- ; }"]}
{"ids": "49664", "code": ["static void find All Visible Childs ( final View Group view Group , final List < View > ordored Childs ) {", "for ( int child View Index = NUM_ ; child View Index < view Group . get Child Count ( ) ; child View Index ++ ) {", "final View child View = view Group . get Child At ( child View Index ) ;", "if ( child View instanceof View Group ) {", "find All Visible Childs ( ( View Group ) child View , ordored Childs ) ;", "continue ; }", "if ( child View . get Visibility ( ) == View . VISIBLE ) {", "ordored Childs . add ( child View ) ; } } }"]}
{"ids": "3931", "code": ["public boolean log Modified ( Logger log ) {", "if ( is Modified ( ) ) {", "log . info ( class Name + STR_ ) ;", "return true ; }", "else return false ; }"]}
{"ids": "18139", "code": ["public final void push ( Node value ) {", "int ff = m first Free ;", "if ( ( ff + NUM_ ) >= m map Size ) {", "if ( null == m map ) {", "m map = new Node [ m blocksize ] ;", "m map Size = m blocksize ; }", "else {", "m map Size += m blocksize ;", "Node new Map [ ] = new Node [ m map Size ] ;", "System . arraycopy ( m map , NUM_ , new Map , NUM_ , ff + NUM_ ) ;", "m map = new Map ; } }", "m map [ ff ] = value ;", "ff ++ ;", "m first Free = ff ; }"]}
{"ids": "35606", "code": ["public String serialize ( Object obj ) throws Api Exception {", "try {", "if ( obj != null ) return mapper . write Value As String ( obj ) ;", "else return null ; }", "catch ( Exception e ) {", "throw new Api Exception ( NUM_ , e . get Message ( ) ) ; } }"]}
{"ids": "73336", "code": ["private void initialize Sparse Slider ( ) {", "sparsity Slider . set Major Tick Spacing ( NUM_ ) ;", "sparsity Slider . set Minor Tick Spacing ( NUM_ ) ;", "sparsity Slider . set Paint Ticks ( true ) ;", "Hashtable < Integer , J Label > label Table 2 = new Hashtable < Integer , J Label > ( ) ;", "label Table 2 . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "label Table 2 . put ( new Integer ( NUM_ ) , new J Label ( STR_ ) ) ;", "sparsity Slider . set Label Table ( label Table 2 ) ;", "sparsity Slider . set Paint Labels ( true ) ; }"]}
{"ids": "7788", "code": ["@ Override protected void auto Adjust Range ( ) {", "Plot plot = get Plot ( ) ;", "if ( plot == null ) {", "return ; }", "if ( plot instanceof Value Axis Plot ) {", "Value Axis Plot vap = ( Value Axis Plot ) plot ;", "Range r = vap . get Data Range ( this ) ;", "if ( r == null ) {", "r = get Default Auto Range ( ) ; }", "double upper = r . get Upper Bound ( ) ;", "double lower = Math . max ( r . get Lower Bound ( ) , this . smallest Value ) ;", "double range = upper - lower ;", "double fixed Auto Range = get Fixed Auto Range ( ) ;", "if ( fixed Auto Range > NUM_ ) {", "lower = Math . max ( upper - fixed Auto Range , this . smallest Value ) ; }", "else {", "double min Range = get Auto Range Minimum Size ( ) ;", "if ( range < min Range ) {", "double expand = ( min Range - range ) / NUM_ ;", "upper = upper + expand ;", "lower = lower - expand ; }", "double log Upper = calculate Log ( upper ) ;", "double log Lower = calculate Log ( lower ) ;", "double log Range = log Upper - log Lower ;", "log Upper = log Upper + get Upper Margin ( ) * log Range ;", "log Lower = log Lower - get Lower Margin ( ) * log Range ;", "upper = calculate Value No INF ( log Upper ) ;", "lower = calculate Value No INF ( log Lower ) ; }", "set Range ( new Range ( lower , upper ) , false , false ) ; } }"]}
{"ids": "48557", "code": ["public synchronized void add ( long value ) {", "long res = get ( ) + value ;", "lb . put ( NUM_ , res ) ; }"]}
{"ids": "5819", "code": ["public void add IV Combination ( int attack IV , int defense IV , int stamina IV ) {", "int sum IV = attack IV + defense IV + stamina IV ;", "int percent Perfect = Math . round ( sum IV / NUM_ * NUM_ ) ;", "if ( ( percent Perfect < low Percent ) || ( percent Perfect == low Percent ) && ( attack IV < low Attack ) ) {", "low Percent = percent Perfect ;", "low Attack = attack IV ;", "low Defense = defense IV ;", "low Stamina = stamina IV ; }", "if ( ( percent Perfect > high Percent ) || ( percent Perfect == high Percent ) && ( attack IV > high Attack ) ) {", "high Percent = percent Perfect ;", "high Attack = attack IV ;", "high Defense = defense IV ;", "high Stamina = stamina IV ; }", "i V Combinations . add ( new IV Combination ( attack IV , defense IV , stamina IV ) ) ; }"]}
{"ids": "61742", "code": ["String [ ] qualify ( String cpp Name ) {", "if ( cpp Name == null || cpp Name . length ( ) == NUM_ ) {", "return new String [ NUM_ ] ; }", "Array List < String > names = new Array List < String > ( ) ;", "String ns = namespace != null ? namespace : STR_ ;", "while ( ns != null ) {", "String name = ns . length ( ) > NUM_ ? ns + STR_ + cpp Name : cpp Name ;", "Template Map map = template Map ;", "while ( map != null ) {", "if ( name . equals ( map . get Name ( ) ) ) {", "String args = STR_ , separator = STR_ ;", "for ( String s : map . values ( ) ) {", "args += separator + s ;", "separator = STR_ ; }", "names . add ( name + args + ( args . ends With ( STR_ ) ? STR_ : STR_ ) ) ;", "break ; }", "map = map . parent ; }", "names . add ( name ) ;", "ns = Info Map . normalize ( ns , false , true ) ;", "int i = ns . last Index Of ( STR_ ) ;", "ns = i >= NUM_ ? ns . substring ( NUM_ , i ) : ns . length ( ) > NUM_ ? STR_ : null ; }", "for ( String s : using List ) {", "String prefix = Info Map . normalize ( cpp Name , false , true ) ;", "int i = s . last Index Of ( STR_ ) + NUM_ ;", "ns = s . substring ( NUM_ , i ) ;", "String suffix = s . substring ( i ) ;", "if ( suffix . length ( ) == NUM_ || prefix . equals ( suffix ) ) {", "names . add ( ns + cpp Name ) ; } }", "return names . to Array ( new String [ names . size ( ) ] ) ; }"]}
{"ids": "55989", "code": ["@ Nullable public Bitmap generate Icon For Url ( String url , boolean include Private Registries ) {", "if ( Text Utils . is Empty ( url ) ) return null ;", "String text = get Icon Text For Url ( url , include Private Registries ) ;", "if ( Text Utils . is Empty ( text ) ) return null ;", "return generate Icon For Text ( text ) ; }"]}
{"ids": "43323", "code": ["public boolean contains Prefix ( final Char Sequence prefix ) {", "return contains Prefix ( prefix , NUM_ , prefix . length ( ) ) ; }"]}
{"ids": "4962", "code": ["public int compare To ( Object p other ) {", "if ( p other == null ) return NUM_ ;", "if ( p other instanceof Brd Component ) {", "return name . compare To Ignore Case ( ( ( Brd Component ) p other ) . name ) ; }", "return NUM_ ; }"]}
{"ids": "27186", "code": ["public void fatal ( String message ) throws SAX Exception {", "SAX Parse Exception spe = new SAX Parse Exception ( message , this ) ;", "if ( error Handler != null ) {", "error Handler . fatal Error ( spe ) ; }", "throw spe ; }"]}
{"ids": "16525", "code": ["protected final void fire Property Change ( String property Name , boolean old Value , boolean new Value ) {", "Property Change Support a Change Support = this . change Support ;", "if ( a Change Support == null ) {", "return ; }", "a Change Support . fire Property Change ( property Name , old Value , new Value ) ; }"]}
{"ids": "13600", "code": ["private Iterator < Binding Set > join Binding Set Entry ( Map . Entry < String , Binding Set > entry ) {", "List < Collection < Binding Set > > matches = new Array List < > ( ) ;", "if ( type == Hash Join Type . CONSTANT JOIN VAR ) {", "if ( binding Join Var Hash . contains Key ( entry . get Key ( ) ) ) {", "matches . add ( binding Join Var Hash . get ( entry . get Key ( ) ) ) ; } }", "else {", "List < String > val Orders = get Value Orders ( entry . get Key ( ) ) ;", "for ( String s : val Orders ) {", "if ( binding Join Var Hash . contains Key ( s ) ) {", "matches . add ( binding Join Var Hash . get ( s ) ) ; } } }", "if ( matches . size ( ) == NUM_ ) {", "return Collections . empty Iterator ( ) ; }", "else {", "return new Binding Set Collections Join Iterator ( entry . get Value ( ) , matches ) ; } }"]}
{"ids": "7375", "code": ["public boolean reserve ( Object object ) {", "reserved Ids Lock . lock ( ) ;", "if ( reserved Objects . contains ( object ) ) {", "reserved Ids Lock . unlock ( ) ;", "return false ; }", "reserved Objects . add ( object ) ;", "reserved Ids Lock . unlock ( ) ;", "return true ; }"]}
{"ids": "74852", "code": ["private boolean save Stored JPEG Image ( String file name , final Buffered Image image , final boolean file name is path ) {", "if ( ! file name is path ) {", "file name = temp dir + key + file name ; }", "final String s = file name . to Lower Case ( ) ;", "if ( ! s . ends With ( STR_ ) && ! s . ends With ( STR_ ) ) {", "file name += STR_ ; }", "try {", "Default Image Helper . write ( image , STR_ , file name ) ;", "temp File Names . put ( file name , STR_ ) ; }", "catch ( final Exception e ) {", "Log Writer . write Log ( STR_ + e + STR_ + image + STR_ + file name ) ; }", "return false ; }"]}
{"ids": "43539", "code": ["public static Scheduled Executor Service create Scheduler ( ) {", "final Scheduled Executor Service scheduler = Executors . new Scheduled Thread Pool ( NUM_ , new Daemon Thread Factory ( DEFAULT SCHEDULER NAME ) ) ;", "SCHEDULERS . add ( scheduler ) ;", "return scheduler ; }"]}
{"ids": "19734", "code": ["protected static void fail ( ) {", "System . exit ( NUM_ ) ; }"]}
{"ids": "34815", "code": ["private void print Arguments ( List < Expression > args , Object arg ) {", "printer . print ( STR_ ) ;", "if ( args != null ) {", "for ( Iterator < Expression > i = args . iterator ( ) ; i . has Next ( ) ; ) {", "Expression e = i . next ( ) ;", "e . accept ( this , arg ) ;", "if ( i . has Next ( ) ) {", "printer . print ( STR_ ) ; } } }", "printer . print ( STR_ ) ; }"]}
{"ids": "64815", "code": ["private void calculate Delta ( double [ ] b ) {", "double numerator = NUM_ ;", "double denominator = NUM_ ;", "double sign = NUM_ ;", "for ( int k = NUM_ ; k < b . length ; k ++ ) {", "if ( k < m Extremal Indices . size ( ) ) {", "int extremal Index = m Extremal Indices . get ( k ) ;", "numerator += ( b [ k ] * m Grid . get Desired Response ( ) [ extremal Index ] ) ;", "denominator += b [ k ] * sign / m Grid . get Weight ( ) [ extremal Index ] ;", "sign = - sign ; }", "else {", "m Log . error ( STR_ ) ; } }", "m Delta = numerator / denominator ; }"]}
{"ids": "42884", "code": ["private void add Fallback Selector ( Properties settings , Protocol Dispatch Selector ps ) {", "String proxy = settings . get Property ( STR_ ) ;", "if ( proxy != null ) {", "ps . set Fallback Selector ( Proxy Util . parse Proxy Settings ( proxy ) ) ; } }"]}
{"ids": "84215", "code": ["private void read Data ( ) throws IO Exception {", "while ( ! is Closed ) {", "int code = is . read ( ) ;", "switch ( code ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "break ;", "case STR_ : {", "int channel = ( is . read ( ) << NUM_ ) + is . read ( ) ;", "input Ready [ channel ] = true ;", "return ; }", "case STR_ : {", "int channel = ( is . read ( ) << NUM_ ) + is . read ( ) ;", "int status = ( is . read ( ) << NUM_ ) + is . read ( ) ;", "input Ready [ channel ] = true ;", "return ; }", "case - NUM_ :", "close ( ) ;", "return ;", "default :", "close ( ) ;", "return ; } }", "return ; }"]}
{"ids": "23573", "code": ["@ Override protected boolean validate Connection ( Connection conn ) {", "try {", "return ( ! conn . is Closed ( ) ) ; }", "catch ( SQL Exception e ) {", "return false ; } }"]}
{"ids": "9554", "code": ["public Pac Proxy Selector ( String pac Url ) {", "if ( pac Url == null ) {", "throw new Null Pointer Exception ( ) ; }", "this . pac Url = pac Url ; }"]}
{"ids": "24863", "code": ["public void delete Alerting Definition ( Alerting Definition alerting Definition ) throws IO Exception {", "String id = alerting Definition . get Id ( ) ;", "Alerting Definition local = existing Alerting Definitions . remove ( id ) ;", "if ( local != null ) {", "Files . delete If Exists ( path Resolver . get Alerting Definition File Path ( local ) ) ;", "event Publisher . publish Event ( new Abstract Alerting Definition Event . Alerting Definition Deleted Event ( this , local ) ) ; } }"]}
{"ids": "78811", "code": ["public void add File ( File file ) {", "file List . add First ( file ) ; }"]}
{"ids": "9969", "code": ["private void pull Event ( ) {", "final int new Scroll Value ;", "final int item Dimension ;", "final float initial Motion Value , last Motion Value ;", "switch ( get Pull To Refresh Scroll Direction ( ) ) {", "case HORIZONTAL :", "initial Motion Value = m Initial Motion X ;", "last Motion Value = m Last Motion X ;", "break ;", "case VERTICAL :", "default :", "initial Motion Value = m Initial Motion Y ;", "last Motion Value = m Last Motion Y ;", "break ; }", "switch ( m Current Mode ) {", "case PULL FROM END :", "new Scroll Value = Math . round ( Math . max ( initial Motion Value - last Motion Value , NUM_ ) / FRICTION ) ;", "item Dimension = get Footer Size ( ) ;", "break ;", "case PULL FROM START :", "default :", "new Scroll Value = Math . round ( Math . min ( initial Motion Value - last Motion Value , NUM_ ) / FRICTION ) ;", "item Dimension = get Header Size ( ) ;", "break ; }", "set Header Scroll ( new Scroll Value ) ;", "if ( new Scroll Value != NUM_ && ! is Refreshing ( ) ) {", "float scale = Math . abs ( new Scroll Value ) / ( float ) item Dimension ;", "switch ( m Current Mode ) {", "case PULL FROM END :", "m Footer Layout . on Pull ( scale ) ;", "break ;", "case PULL FROM START :", "default :", "m Header Layout . on Pull ( scale ) ;", "break ; }", "if ( m State != State . PULL TO REFRESH && item Dimension >= Math . abs ( new Scroll Value ) ) {", "set State ( State . PULL TO REFRESH ) ; }", "else if ( m State != State . RELEASE TO REFRESH && item Dimension < Math . abs ( new Scroll Value ) ) {", "set State ( State . RELEASE TO REFRESH ) ; } } }"]}
{"ids": "33629", "code": ["public boolean requires Connection ( ) {", "return true ; }"]}
{"ids": "69775", "code": ["public static double tile 2 lat ( int y , int z ) {", "double n = Math . PI - ( NUM_ * Math . PI * y ) / Math . pow ( NUM_ , z ) ;", "return Math . to Degrees ( Math . atan ( Math . sinh ( n ) ) ) ; }"]}
{"ids": "83893", "code": ["@ Override public synchronized Time Series Collection update Collection ( ) {", "return super . update Collection ( ) ; }"]}
{"ids": "3487", "code": ["public char skip ( int n ) {", "pos += n ;", "if ( length <= pos ) {", "pos = string . length ( ) ;", "return DONE ; }", "else return string . char At ( pos ) ; }"]}
{"ids": "6614", "code": ["private boolean should Inform ( Local Client Info info ) {", "long now = System . current Time Millis ( ) ;", "if ( now < next Allowed Time ) return false ;", "Long allowed = BUG TIMES . get ( info . get Parsed Bug ( ) ) ;", "return allowed == null || now >= allowed . long Value ( ) ; }"]}
{"ids": "8688", "code": ["public void post ( Runnable runnable ) {", "synchronized ( m Queue ) {", "m Queue . add ( runnable ) ;", "if ( m Queue . size ( ) == NUM_ ) {", "schedule Next Locked ( ) ; } } }"]}
{"ids": "3389", "code": ["public static void clear ( ) {", "clear Count ++ ;", "state Count = NUM_ ;", "state = STR_ ;", "feature Map . clear ( ) ; }"]}
{"ids": "66780", "code": ["public static String to String Pretty ( Json Object json Obj , int level ) {", "String Buffer buf = new String Buffer ( ) ;", "buf . append ( STR_ ) ;", "buf . append ( fields To String Pretty ( json Obj , level + NUM_ ) ) ;", "buf . append ( STR_ ) ;", "return buf . to String ( ) ; }"]}
{"ids": "78256", "code": ["public boolean is Launched From Jar ( ) {", "return ( lst Jar File . size ( ) > NUM_ ) ; }"]}
{"ids": "24495", "code": ["public Log Stream print ( double d ) {", "if ( ps != null ) {", "indent ( ) ;", "line Buffer . append ( d ) ; }", "return this ; }"]}
{"ids": "8515", "code": ["public static void delete Directory Recursively ( Context context , File f , Boolean only Content ) throws IO Exception {", "if ( f . is Directory ( ) ) {", "for ( File c : f . list Files ( ) ) {", "delete Directory Recursively ( context , c , false ) ; } }", "if ( ! only Content ) {", "if ( ! f . delete ( ) ) {", "throw new IO Exception ( STR_ + f ) ; }", "context . send Broadcast ( new Intent ( Intent . ACTION MEDIA SCANNER SCAN FILE , Uri . parse ( STR_ + f . get Absolute Path ( ) ) ) ) ; } }"]}
{"ids": "80786", "code": ["public static String node Sub Type To String ( int sub Type ) {", "String val = STR_ ;", "switch ( sub Type ) {", "case Node Representation . AND TYPE :", "val = STR_ ;", "break ;", "case Node Representation . OR TYPE :", "val = STR_ ;", "break ;", "case Node Representation . IMPLIES TYPE :", "val = STR_ ;", "break ;", "case Node Representation . FORALL TYPE :", "val = STR_ ;", "break ;", "case Node Representation . EXISTS TYPE :", "val = STR_ ;", "break ;", "case Node Representation . SQSUB TYPE :", "val = STR_ ;", "break ;", "case Node Representation . OTHER TYPE :", "val = STR_ ;", "break ; }", "return val ; }"]}
{"ids": "48540", "code": ["public static void dispose Graphics Config ( long p Config Info ) {", "OGL Render Queue rq = get Instance ( ) ;", "rq . lock ( ) ;", "try {", "OGL Context . set Scratch Surface ( p Config Info ) ;", "Render Buffer buf = rq . get Buffer ( ) ;", "rq . ensure Capacity And Alignment ( NUM_ , NUM_ ) ;", "buf . put Int ( DISPOSE CONFIG ) ;", "buf . put Long ( p Config Info ) ;", "rq . flush Now ( ) ; }", "finally {", "rq . unlock ( ) ; } }"]}
{"ids": "71545", "code": ["private void add Term ( String term ) {", "Integer index = term To Index . get ( term ) ;", "if ( index == null ) {", "synchronized ( this ) {", "index = term To Index . get ( term ) ;", "if ( index == null ) {", "index = Integer . value Of ( term Index Counter . get And Increment ( ) ) ;", "term To Index . put ( term , index ) ; } } } }"]}
{"ids": "4380", "code": ["@ Override public List < Period > generate Periods ( Date Time Unit date Time Unit ) {", "Calendar cal = get Calendar ( ) ;", "boolean past = date Time Unit . get Month ( ) >= ( get Base Month ( ) + NUM_ ) ;", "List < Period > periods = Lists . new Array List ( ) ;", "date Time Unit = cal . minus Years ( date Time Unit , past ? NUM_ : NUM_ ) ;", "date Time Unit . set Month ( get Base Month ( ) + NUM_ ) ;", "date Time Unit . set Day ( NUM_ ) ;", "Calendar calendar = get Calendar ( ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "periods . add ( create Period ( date Time Unit , cal ) ) ;", "date Time Unit = calendar . plus Years ( date Time Unit , NUM_ ) ; }", "return periods ; }"]}
{"ids": "30015", "code": ["public final boolean is Dragging ( ) {", "return dragging ; }"]}
{"ids": "56893", "code": ["@ Override public void escape ( char [ ] buffer , int start , int length , boolean is Attribute Value , Writer output Writer ) throws IO Exception {", "for ( int i = start ; i < start + length ; i ++ ) {", "char ch = buffer [ i ] ;", "if ( ch == STR_ ) {", "output Writer . write ( STR_ ) ;", "continue ; }", "if ( ch == STR_ ) {", "output Writer . write ( STR_ ) ;", "continue ; }", "if ( ch == STR_ ) {", "output Writer . write ( STR_ ) ;", "continue ; }", "if ( ch == STR_ && is Attribute Value ) {", "output Writer . write ( STR_ ) ;", "continue ; }", "if ( ch == STR_ && is Attribute Value ) {", "output Writer . write ( STR_ ) ;", "continue ; }", "if ( is Xml 11 Restricted Character ( ch ) ) {", "output Writer . write ( STR_ ) ;", "output Writer . write ( Integer . to Hex String ( ch ) ) ;", "output Writer . write ( STR_ ) ;", "continue ; }", "output Writer . write ( ch ) ; } }"]}
{"ids": "2874", "code": ["void encrypt ( Byte Buffer src ) throws SSL Exception {", "if ( ! handshake Complete ) {", "throw new Illegal State Exception ( ) ; }", "if ( ! src . has Remaining ( ) ) {", "if ( out Net Buffer == null ) {", "out Net Buffer = empty Buffer ; }", "return ; }", "create Out Net Buffer ( src . remaining ( ) ) ;", "while ( src . has Remaining ( ) ) {", "SSL Engine Result result = ssl Engine . wrap ( src , out Net Buffer . buf ( ) ) ;", "if ( result . get Status ( ) == SSL Engine Result . Status . OK ) {", "if ( result . get Handshake Status ( ) == SSL Engine Result . Handshake Status . NEED TASK ) {", "do Tasks ( ) ; } }", "else if ( result . get Status ( ) == SSL Engine Result . Status . BUFFER OVERFLOW ) {", "out Net Buffer . capacity ( out Net Buffer . capacity ( ) << NUM_ ) ;", "out Net Buffer . limit ( out Net Buffer . capacity ( ) ) ; }", "else {", "throw new SSL Exception ( STR_ + result . get Status ( ) + STR_ + src + STR_ + out Net Buffer ) ; } }", "out Net Buffer . flip ( ) ; }"]}
{"ids": "11373", "code": ["public boolean code Matches ( String query Code ) {", "int length = id . length ( ) ;", "if ( Debug . debugging ( STR_ ) ) {", "Debug . output ( STR_ + query Code + STR_ + id + STR_ + start Index + STR_ + length ) ; }", "return query Code . region Matches ( true , start Index , id , NUM_ , length ) ; }"]}
{"ids": "56119", "code": ["private static int parse Notification Id ( String id ) {", "try {", "return Integer . parse Int ( id ) ; }", "catch ( Number Format Exception nfe ) {", "Log . w ( TAG , STR_ + id ) ;", "return - NUM_ ; } }"]}
{"ids": "56713", "code": ["private < T > Property < T > prepare ( String key , Property < T > property , T initial Value ) {", "final Change Listener < T > change = null ;", "property . set Value ( initial Value ) ;", "property . add Listener ( change ) ;", "change . changed ( property , null , initial Value ) ;", "return property ; }"]}
{"ids": "39327", "code": ["protected void read Till EOL ( ) throws IO Exception {", "while ( m Tokenizer . next Token ( ) != Stream Tokenizer . TT EOL ) { }", "m Tokenizer . push Back ( ) ; }"]}
{"ids": "49601", "code": ["@ Override public void clear Answer ( ) {", "Date Time ldt = new Date Time ( ) ;", "m Time Picker . set Current Hour ( ldt . get Hour Of Day ( ) ) ;", "m Time Picker . set Current Minute ( ldt . get Minute Of Hour ( ) ) ; }"]}
{"ids": "25850", "code": ["public String read Line ( ) throws IO Exception {", "return keep Carriage Returns ? read Until Newline ( ) : reader . read Line ( ) ; }"]}
{"ids": "36177", "code": ["@ Override public void do Work ( ) throws Operator Exception {", "super . do Work ( ) ;", "run Vector Output . deliver ( run Vector ) ; }"]}
{"ids": "27952", "code": ["protected int generate Binomial ( int n , double p ) {", "final double C 1 3 = NUM_ ;", "final double C 5 8 = NUM_ ;", "final double C 1 6 = NUM_ ;", "final int DMAX KM = NUM_ ;", "int bh , i , K , Km , n K ;", "double f , rm , U , V , X , T , E ;", "if ( n != n last || p != p last ) {", "n last = n ;", "p last = p ;", "par = Math . min ( p , NUM_ - p ) ;", "q = NUM_ - par ;", "np = n * par ;", "if ( np <= NUM_ ) return - NUM_ ;", "rm = np + par ;", "m = ( int ) rm ;", "if ( np < NUM_ ) {", "p 0 = Math . exp ( n * Math . log ( q ) ) ;", "bh = ( int ) ( np + NUM_ * Math . sqrt ( np * q ) ) ;", "b = Math . min ( n , bh ) ; }", "else {", "rc = ( n + NUM_ ) * ( pq = par / q ) ;", "ss = np * q ;", "i = ( int ) ( NUM_ * Math . sqrt ( ss ) - NUM_ * q ) ;", "xm = m + NUM_ ;", "xl = ( double ) ( m - i ) ;", "xr = ( double ) ( m + i + NUM_ ) ;", "f = ( rm - xl ) / ( rm - xl * par ) ;", "ll = f * ( NUM_ + NUM_ * f ) ;", "f = ( xr - rm ) / ( xr * q ) ;", "lr = f * ( NUM_ + NUM_ * f ) ;", "c = NUM_ + NUM_ / ( NUM_ + ( double ) m ) ;", "p 1 = i + NUM_ ;", "p 2 = p 1 * ( NUM_ + c + c ) ;", "p 3 = p 2 + c / ll ;", "p 4 = p 3 + c / lr ; } }", "if ( np < NUM_ ) {", "double pk ;", "K = NUM_ ;", "pk = p 0 ;", "U = random Generator . raw ( ) ;", "while ( U > pk ) {", "++ K ;", "if ( K > b ) {", "U = random Generator . raw ( ) ;", "K = NUM_ ;", "pk = p 0 ; }", "else {", "U -= pk ;", "pk = ( double ) ( ( ( n - K + NUM_ ) * par * pk ) / ( K * q ) ) ; } }", "return ( ( p > NUM_ ) ? ( n - K ) : K ) ; }", "for ( ; ; ) {", "V = random Generator . raw ( ) ;", "if ( ( U = random Generator . raw ( ) * p 4 ) <= p 1 ) {", "K = ( int ) ( xm - U + p 1 * V ) ;", "return ( p > NUM_ ) ? ( n - K ) : K ; }", "if ( U <= p 2 ) {", "X = xl + ( U - p 1 ) / c ;", "if ( ( V = V * c + NUM_ - Math . abs ( xm - X ) / p 1 ) >= NUM_ ) continue ;", "K = ( int ) X ; }", "else if ( U <= p 3 ) {", "if ( ( X = xl + Math . log ( V ) / ll ) < NUM_ ) continue ;", "K = ( int ) X ;", "V *= ( U - p 2 ) * ll ; }", "else {", "if ( ( K = ( int ) ( xr - Math . log ( V ) / lr ) ) > n ) continue ;", "V *= ( U - p 3 ) * lr ; }", "if ( ( Km = Math . abs ( K - m ) ) <= DMAX KM || Km + Km + NUM_ >= ss ) {", "f = NUM_ ;", "if ( m < K ) {", "for ( i = m ; i < K ; ) {", "if ( ( f *= ( rc / ++ i - pq ) ) < V ) break ; } }", "else {", "for ( i = K ; i < m ; ) {", "if ( ( V *= ( rc / ++ i - pq ) ) > f ) break ; } }", "if ( V <= f ) break ; }", "else {", "V = Math . log ( V ) ;", "T = - Km * Km / ( ss + ss ) ;", "E = ( Km / ss ) * ( ( Km * ( Km * C 1 3 + C 5 8 ) + C 1 6 ) / ss + NUM_ ) ;", "if ( V <= T - E ) break ;", "if ( V <= T + E ) {", "if ( n != n prev || par != p prev ) {", "n prev = n ;", "p prev = par ;", "nm = n - m + NUM_ ;", "ch = xm * Math . log ( ( m + NUM_ ) / ( pq * nm ) ) + Arithmetic . stirling Correction ( m + NUM_ ) + Arithmetic . stirling Correction ( nm ) ; }", "n K = n - K + NUM_ ;", "if ( V <= ch + ( n + NUM_ ) * Math . log ( ( double ) nm / ( double ) n K ) + ( K + NUM_ ) * Math . log ( n K * pq / ( K + NUM_ ) ) - Arithmetic . stirling Correction ( K + NUM_ ) - Arithmetic . stirling Correction ( n K ) ) break ; } } }", "return ( p > NUM_ ) ? ( n - K ) : K ; }"]}
{"ids": "83438", "code": ["public Simple User Context ( Authentication Provider auth Provider , String username , Map < String , Guacamole Configuration > configs ) {", "Collection < String > connection Identifiers = new Array List < String > ( configs . size ( ) ) ;", "Collection < String > connection Group Identifiers = Collections . singleton ( ROOT IDENTIFIER ) ;", "Collection < Connection > connections = new Array List < Connection > ( configs . size ( ) ) ;", "for ( Map . Entry < String , Guacamole Configuration > config Entry : configs . entry Set ( ) ) {", "String identifier = config Entry . get Key ( ) ;", "Guacamole Configuration config = config Entry . get Value ( ) ;", "Connection connection = new Simple Connection ( identifier , identifier , config ) ;", "connection . set Parent Identifier ( ROOT IDENTIFIER ) ;", "connections . add ( connection ) ;", "connection Identifiers . add ( identifier ) ; }", "this . root Group = new Simple Connection Group ( ROOT IDENTIFIER , ROOT IDENTIFIER , connection Identifiers , Collections . < String > empty List ( ) ) ;", "this . self = new Simple User ( username , connection Identifiers , connection Group Identifiers ) ;", "this . user Directory = new Simple User Directory ( self ) ;", "this . connection Directory = new Simple Connection Directory ( connections ) ;", "this . connection Group Directory = new Simple Connection Group Directory ( Collections . singleton ( this . root Group ) ) ;", "this . auth Provider = auth Provider ; }"]}
{"ids": "79764", "code": ["public void reset ( ) {", "visited Get . clear ( ) ;", "visited Post . clear ( ) ;", "for ( Spider Parser parser : parsers ) {", "parser . remove Spider Parser Listener ( this ) ; } }"]}
{"ids": "77298", "code": ["public Named List < Object > to Named List ( ) {", "final Simple Ordered Map < Object > result = new Simple Ordered Map < > ( ) ;", "for ( Iterator < String > it = get Parameter Names Iterator ( ) ; it . has Next ( ) ; ) {", "final String name = it . next ( ) ;", "final String [ ] values = get Params ( name ) ;", "if ( values . length == NUM_ ) {", "result . add ( name , values [ NUM_ ] ) ; }", "else {", "result . add ( name , values ) ; } }", "return result ; }"]}
{"ids": "2512", "code": ["private boolean is Representing Tab ( String text ) {", "if ( text == null ) return false ;", "if ( is Inserting Spaces For Tab ( ) ) {", "if ( text . length ( ) == NUM_ || text . length ( ) > get Visual Tab Length Preference ( ) ) return false ;", "for ( int i = NUM_ ; i < text . length ( ) ; i ++ ) {", "if ( text . char At ( i ) != STR_ ) return false ; }", "return true ; }", "else return text . length ( ) == NUM_ && text . char At ( NUM_ ) == STR_ ; }"]}
{"ids": "82980", "code": ["public Monitor Thread ( String name ) {", "super ( name ) ; }"]}
{"ids": "34860", "code": ["@ Override public Units Relations init ( Processing Environment env ) {", "elements = env . get Element Utils ( ) ;", "m = Units Relations Tools . build Anno Mirror With Default Prefix ( env , m . class ) ;", "km = Units Relations Tools . build Anno Mirror With Specific Prefix ( env , m . class , Prefix . kilo ) ;", "mm = Units Relations Tools . build Anno Mirror With Specific Prefix ( env , m . class , Prefix . milli ) ;", "m 2 = Units Relations Tools . build Anno Mirror With No Prefix ( env , m 2 . class ) ;", "km 2 = Units Relations Tools . build Anno Mirror With No Prefix ( env , km 2 . class ) ;", "mm 2 = Units Relations Tools . build Anno Mirror With No Prefix ( env , mm 2 . class ) ;", "s = Units Relations Tools . build Anno Mirror With Default Prefix ( env , s . class ) ;", "h = Units Relations Tools . build Anno Mirror With No Prefix ( env , h . class ) ;", "m PE Rs = Units Relations Tools . build Anno Mirror With No Prefix ( env , m PE Rs . class ) ;", "km PE Rh = Units Relations Tools . build Anno Mirror With No Prefix ( env , km PE Rh . class ) ;", "m PE Rs 2 = Units Relations Tools . build Anno Mirror With No Prefix ( env , m PE Rs 2 . class ) ;", "return this ; }"]}
{"ids": "56257", "code": ["public static String [ ] to String Array ( Collection < String > collection ) {", "if ( collection == null ) {", "return null ; }", "return collection . to Array ( new String [ collection . size ( ) ] ) ; }"]}
{"ids": "70978", "code": ["public Array List < Chart Set > prepare Animation ( Chart View chart View , Array List < float [ ] [ ] > start , Array List < float [ ] [ ] > end ) {", "final int n Sets = start . size ( ) ;", "final int n Entries = start . get ( NUM_ ) . length ;", "m Chart View = chart View ;", "m Current Duration = new long [ n Entries ] ;", "if ( m Order == null ) {", "m Order = new int [ n Entries ] ;", "for ( int i = NUM_ ; i < m Order . length ; i ++ ) m Order [ i ] = i ; }", "float no Overlap Duration = m Global Duration / n Entries ;", "m Duration = ( int ) ( no Overlap Duration + ( m Global Duration - no Overlap Duration ) * m Overlaping Factor ) ;", "Path path ;", "m Path Measures = new Path Measure [ n Sets ] [ n Entries ] ;", "for ( int i = NUM_ ; i < n Sets ; i ++ ) {", "for ( int j = NUM_ ; j < n Entries ; j ++ ) {", "path = new Path ( ) ;", "path . move To ( start . get ( i ) [ j ] [ NUM_ ] , start . get ( i ) [ j ] [ NUM_ ] ) ;", "path . line To ( end . get ( i ) [ j ] [ NUM_ ] , end . get ( i ) [ j ] [ NUM_ ] ) ;", "m Path Measures [ i ] [ j ] = new Path Measure ( path , false ) ; } }", "m Init Time = new long [ n Entries ] ;", "m Global Init Time = System . current Time Millis ( ) ;", "long no Overlap Init Time ;", "for ( int i = NUM_ ; i < n Entries ; i ++ ) {", "no Overlap Init Time = m Global Init Time + ( i * ( m Global Duration / n Entries ) ) ;", "m Init Time [ m Order [ i ] ] = ( no Overlap Init Time - ( ( long ) ( m Overlaping Factor * ( no Overlap Init Time - m Global Init Time ) ) ) ) ; }", "m Playing = true ;", "return get Update ( m Chart View . get Data ( ) ) ; }"]}
{"ids": "22596", "code": ["public String format Delete Nfs Export Cmd ( String data Mover , String path ) {", "String Builder cmd = new String Builder ( ) ;", "cmd . append ( STR_ ) ;", "cmd . append ( data Mover ) ;", "cmd . append ( STR_ ) ;", "cmd . append ( STR_ ) ;", "cmd . append ( path ) ;", "return cmd . to String ( ) ; }"]}
{"ids": "72232", "code": ["public final String match Categories ( Set < String > categories ) {", "if ( categories == null ) {", "return null ; }", "Iterator < String > it = categories . iterator ( ) ;", "if ( m Categories == null ) {", "return it . has Next ( ) ? it . next ( ) : null ; }", "while ( it . has Next ( ) ) {", "final String category = it . next ( ) ;", "if ( ! m Categories . contains ( category ) ) {", "return category ; } }", "return null ; }"]}
{"ids": "44074", "code": ["@ Override public void run ( ) {", "try {", "Class Reader reader = new Class Reader ( new File Input Stream ( this . class File ) ) ;", "Asm Class Visitor visitor = new Asm Class Visitor ( this . data Provider , this . config ) ;", "reader . accept ( visitor , Class Reader . SKIP DEBUG ) ; }", "catch ( Exception e ) {", "LOGGER . log ( Level . SEVERE , e . get Message ( ) , e ) ; } }"]}
{"ids": "74335", "code": ["private void add Location And Track Property Change ( ) {", "for ( Location loc : location Manager . get List ( ) ) {", "loc . add Property Change Listener ( this ) ;", "for ( Track track : loc . get Track List ( ) ) {", "track . add Property Change Listener ( this ) ;", "Schedule schedule = track . get Schedule ( ) ;", "if ( schedule != null ) {", "schedule . add Property Change Listener ( this ) ; } } } }"]}
{"ids": "2983", "code": ["private void handle Json Sign In ( Request And Response request And Response ) throws IO Exception , Servlet Exception {", "request And Response . set Response Content Type Json ( ) ;", "String user Name ;", "String password ;", "String csrft ;", "try {", "final Json Node Helper json = get Json Node ( request And Response ) ;", "user Name = json . get String ( STR_ ) ;", "password = json . get String ( STR_ ) ;", "csrft = json . get String ( STR_ ) ; }", "catch ( final IO Exception e ) {", "return Json 400 ( request And Response , servlet Text . error Json ( ) ) ;", "return ; }", "if ( user Name != null ) {", "user Name = user Name . to Lower Case ( ) ; }", "if ( is The Csrft Wrong ( request And Response , csrft ) ) {", "return Json 400 ( request And Response , servlet Text . error Wrong Csrft ( ) ) ;", "return ; }", "if ( user Name == null || user Name . is Empty ( ) ) {", "return Json 400 ( request And Response , servlet Text . error Username Must Not Be Blank ( ) ) ;", "return ; }", "if ( password == null || password . is Empty ( ) ) {", "return Json 400 ( request And Response , servlet Text . error Password Must Not Be Blank ( ) ) ;", "return ; }", "if ( ! Account Attribute Validator . is User Name Valid ( user Name ) ) {", "return Json 400 ( request And Response , servlet Text . error User Name Is Not Valid ( ) ) ;", "return ; }", "if ( ! Account Attribute Validator . is Password Valid ( password ) ) {", "return Json 400 ( request And Response , servlet Text . error Password Is Not Valid ( ) ) ;", "return ; }", "try {", "final User user = db Logic . get User By User Name ( user Name ) ;", "if ( user == null ) {", "return Json 400 ( request And Response , servlet Text . error No Account Found ( ) ) ;", "return ; }", "if ( user . get Is Account Closed ( ) ) {", "return Json 400 ( request And Response , servlet Text . error Account Is Closed ( ) ) ;", "return ; }", "final String real Password = user . get Password ( ) ;", "if ( real Password == null || ! real Password . equals ( Digest Utils . sha 1 Hex ( password ) ) ) {", "return Json 400 ( request And Response , servlet Text . error Password Is Incorrect ( ) ) ;", "return ; }", "map Session To User ( request And Response , user . get Id ( ) ) ;", "db Logic . commit ( ) ;", "return Json 200 ( request And Response ) ; }", "catch ( final Persistence Exception e ) {", "logger . log ( Level . INFO , STR_ , e ) ;", "return Json 500 ( request And Response , servlet Text . error Internal Database ( ) ) ; } }"]}
{"ids": "63893", "code": ["private void schedule ( Activity a , long start Time ) {", "if ( a . is Scheduled ( ) ) {", "try {", "notify All ( ) ; }", "catch ( Exception e ) { }", "return ; }", "a . set Start Time ( start Time ) ;", "synchronized ( this ) {", "m activities . add ( a ) ;", "a . set Scheduled ( true ) ;", "if ( start Time < m next Time ) {", "m next Time = start Time ;", "notify ( ) ; } } }"]}
{"ids": "83629", "code": ["void unregister Callback ( Bluetooth Callback callback ) {", "synchronized ( m Callbacks ) {", "m Callbacks . remove ( callback ) ; } }"]}
{"ids": "69358", "code": ["@ Visible For Testing static String escape Sql String ( String string ) {", "return string . replace All ( STR_ , STR_ ) ; }"]}
{"ids": "31040", "code": ["public static String [ ] to Array ( String arg ) {", "if ( arg == null ) {", "return new String [ NUM_ ] ; }", "String Tokenizer tok = new String Tokenizer ( arg , STR_ ) ;", "String [ ] array = new String [ tok . count Tokens ( ) ] ;", "int i = NUM_ ;", "while ( tok . has More Tokens ( ) ) {", "array [ i ] = tok . next Token ( ) ;", "i ++ ; }", "return ( array ) ; }"]}
{"ids": "37082", "code": ["private void render Leaf Node ( final C Node Node tree Node ) {", "final Navi Node graph Node = tree Node . get Node ( ) ;", "if ( graph Node . is Selected ( ) && graph Node . is Visible ( ) ) {", "set Foreground ( SELECTED FONT COLOR ) ; }", "else if ( ! graph Node . is Visible ( ) ) {", "set Foreground ( INVISIBLE FONT COLOR ) ; }", "set Tool Tip Text ( build Tool Tip ( graph Node ) ) ; }"]}
{"ids": "35480", "code": ["public static final void write Value Xml ( Object v , String name , Xml Serializer out ) throws Xml Pull Parser Exception , IO Exception {", "String type Str ;", "if ( v == null ) {", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . end Tag ( null , STR_ ) ;", "return ; }", "else if ( v instanceof String ) {", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . text ( v . to String ( ) ) ;", "out . end Tag ( null , STR_ ) ;", "return ; }", "else if ( v instanceof Integer ) {", "type Str = STR_ ; }", "else if ( v instanceof Long ) {", "type Str = STR_ ; }", "else if ( v instanceof Float ) {", "type Str = STR_ ; }", "else if ( v instanceof Double ) {", "type Str = STR_ ; }", "else if ( v instanceof Boolean ) {", "type Str = STR_ ; }", "else if ( v instanceof byte [ ] ) {", "write Byte Array Xml ( ( byte [ ] ) v , name , out ) ;", "return ; }", "else if ( v instanceof int [ ] ) {", "write Int Array Xml ( ( int [ ] ) v , name , out ) ;", "return ; }", "else if ( v instanceof Map ) {", "write Map Xml ( ( Map ) v , name , out ) ;", "return ; }", "else if ( v instanceof List ) {", "write List Xml ( ( List ) v , name , out ) ;", "return ; }", "else if ( v instanceof Set ) {", "write Set Xml ( ( Set ) v , name , out ) ;", "return ; }", "else if ( v instanceof Char Sequence ) {", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . text ( v . to String ( ) ) ;", "out . end Tag ( null , STR_ ) ;", "return ; }", "else {", "throw new Runtime Exception ( STR_ + v ) ; }", "out . start Tag ( null , type Str ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "out . attribute ( null , STR_ , v . to String ( ) ) ;", "out . end Tag ( null , type Str ) ; }"]}
{"ids": "9484", "code": ["public Sector union ( double latitude , double longitude ) {", "if ( this . min Latitude < this . max Latitude && this . min Longitude < this . max Longitude ) {", "this . max Latitude = Math . max ( this . max Latitude , latitude ) ;", "this . min Latitude = Math . min ( this . min Latitude , latitude ) ;", "this . max Longitude = Math . max ( this . max Longitude , longitude ) ;", "this . min Longitude = Math . min ( this . min Longitude , longitude ) ; }", "else if ( ! Double . is Na N ( this . min Latitude ) && ! Double . is Na N ( this . min Longitude ) ) {", "this . max Latitude = Math . max ( this . min Latitude , latitude ) ;", "this . max Longitude = Math . max ( this . min Longitude , longitude ) ;", "this . min Latitude = Math . min ( this . min Latitude , latitude ) ;", "this . min Longitude = Math . min ( this . min Longitude , longitude ) ; }", "else {", "this . min Latitude = latitude ;", "this . min Longitude = longitude ;", "this . max Latitude = Double . Na N ;", "this . max Longitude = Double . Na N ; }", "return this ; }"]}
{"ids": "9737", "code": ["public D Authority Key Identifier ( J Dialog parent , Public Key authority Public Key , X 500 Name authority Cert Name , Big Integer authority Cert Serial Number ) {", "super ( parent ) ;", "set Title ( res . get String ( STR_ ) ) ;", "this . authority Public Key = authority Public Key ;", "init Components ( ) ;", "prepopulate With Authority Cert Details ( authority Cert Name , authority Cert Serial Number ) ; }"]}
{"ids": "28529", "code": ["static void write UTF ( Output Stream out , String str ) throws IO Exception {", "for ( int i = NUM_ , len = str . length ( ) ; i < len ; i ++ ) {", "int c = str . char At ( i ) ;", "if ( ( c >= NUM_ ) && ( c <= NUM_ ) ) {", "out . write ( c ) ; }", "else {", "if ( c > NUM_ ) {", "out . write ( NUM_ | ( ( c > > NUM_ ) & NUM_ ) ) ;", "out . write ( NUM_ | ( ( c > > NUM_ ) & NUM_ ) ) ;", "out . write ( NUM_ | ( ( c > > NUM_ ) & NUM_ ) ) ; }", "else {", "out . write ( NUM_ | ( ( c > > NUM_ ) & NUM_ ) ) ;", "out . write ( NUM_ | ( ( c > > NUM_ ) & NUM_ ) ) ; } } } }"]}
{"ids": "41076", "code": ["private void handle Normal Unassociated ( ) {", "int sz Ssa Regs = ssa Meth . get Reg Count ( ) ;", "for ( int ssa Reg = NUM_ ; ssa Reg < sz Ssa Regs ; ssa Reg ++ ) {", "if ( ssa Regs Mapped . get ( ssa Reg ) ) {", "continue ; }", "Register Spec ssa Spec = get Definition Spec For Ssa Reg ( ssa Reg ) ;", "if ( ssa Spec == null ) continue ;", "int category = ssa Spec . get Category ( ) ;", "int rop Reg = find Next Unreserved Rop Reg ( param Range End , category ) ;", "while ( ! can Map Reg ( ssa Spec , rop Reg ) ) {", "rop Reg = find Next Unreserved Rop Reg ( rop Reg + NUM_ , category ) ; }", "add Mapping ( ssa Spec , rop Reg ) ; } }"]}
{"ids": "52630", "code": ["public void add Series Renderer ( int index , Simple Series Renderer renderer ) {", "m Renderers . add ( index , renderer ) ; }"]}
{"ids": "75579", "code": ["public void create Underlying ( ) {", "if ( Platform . is Fx Application Thread ( ) ) {", "options . create Underlying ( ) ;", "this . marker = new com . lynden . gmapsfx . javascript . object . Marker ( options . convert ( ) ) ; } }"]}
{"ids": "39874", "code": ["private void on Action Up ( Motion Event event ) {", "if ( is Down ) {", "this . start X = NUM_ ;", "this . start Y = NUM_ ;", "this . is Down = false ; } }"]}
{"ids": "7534", "code": ["private Rectangle 2 D create Aligned Rectangle 2 D ( Size 2 D dimensions , Rectangle 2 D frame , Horizontal Alignment h Align , Vertical Alignment v Align ) {", "double x = Double . Na N ;", "double y = Double . Na N ;", "if ( h Align == Horizontal Alignment . LEFT ) {", "x = frame . get X ( ) ; }", "else if ( h Align == Horizontal Alignment . CENTER ) {", "x = frame . get Center X ( ) - ( dimensions . width / NUM_ ) ; }", "else if ( h Align == Horizontal Alignment . RIGHT ) {", "x = frame . get Max X ( ) - dimensions . width ; }", "if ( v Align == Vertical Alignment . TOP ) {", "y = frame . get Y ( ) ; }", "else if ( v Align == Vertical Alignment . CENTER ) {", "y = frame . get Center Y ( ) - ( dimensions . height / NUM_ ) ; }", "else if ( v Align == Vertical Alignment . BOTTOM ) {", "y = frame . get Max Y ( ) - dimensions . height ; }", "return new Rectangle 2 D . Double ( x , y , dimensions . width , dimensions . height ) ; }"]}
{"ids": "44361", "code": ["public Mail Address ( Internet Address address ) throws Address Exception {", "this ( address . get Address ( ) ) ; }"]}
{"ids": "37733", "code": ["public double [ ] [ ] confusion Matrix ( ) {", "double [ ] [ ] new Matrix = new double [ m Confusion Matrix . length ] [ NUM_ ] ;", "for ( int i = NUM_ ; i < m Confusion Matrix . length ; i ++ ) {", "new Matrix [ i ] = new double [ m Confusion Matrix [ i ] . length ] ;", "System . arraycopy ( m Confusion Matrix [ i ] , NUM_ , new Matrix [ i ] , NUM_ , m Confusion Matrix [ i ] . length ) ; }", "return new Matrix ; }"]}
{"ids": "32789", "code": ["public void print ( int x ) {", "out . print ( x ) ;", "out . flush ( ) ; }"]}
{"ids": "40786", "code": ["public static void begin Starting Service ( Context context , Intent intent ) {", "synchronized ( m Starting Service Sync ) {", "if ( m Starting Service == null ) {", "Power Manager pm = ( Power Manager ) context . get System Service ( Context . POWER SERVICE ) ;", "m Starting Service = pm . new Wake Lock ( Power Manager . PARTIAL WAKE LOCK , STR_ ) ;", "m Starting Service . set Reference Counted ( false ) ; }", "m Starting Service . acquire ( ) ;", "context . start Service ( intent ) ; } }"]}
{"ids": "60511", "code": ["public Scanner Exception ( Error Messages message , int line ) {", "this ( null , Error Messages . get ( message ) , message , line , - NUM_ ) ; }"]}
{"ids": "58362", "code": ["private void inform Upon Similar Name ( final String Buffer message Buffer , final String name , final String candidate ) {", "if ( name . equals ( candidate ) ) {", "return ; }", "if ( name . region Matches ( true , NUM_ , candidate , NUM_ , PKG LEN + NUM_ ) ) {", "message Buffer . append ( STR_ ) ;", "message Buffer . append ( candidate ) ;", "message Buffer . append ( STR_ ) ; } }"]}
{"ids": "18332", "code": ["public synchronized void co exit ( int this Coroutine ) {", "m active I Ds . clear ( this Coroutine ) ;", "m next Coroutine = NOBODY ;", "notify ( ) ; }"]}
{"ids": "41473", "code": ["private int find Scheme Separator ( ) {", "return cached Ssi == NOT CALCULATED ? cached Ssi = uri String . index Of ( STR_ ) : cached Ssi ; }"]}
{"ids": "51937", "code": ["public void refresh ( ) {", "label . set Text ( String . value Of ( Math Helper . round ( val , NUM_ ) ) ) ;", "if ( val == min ) minus . set Enabled ( false ) ;", "else minus . set Enabled ( true ) ;", "if ( val == max ) plus . set Enabled ( false ) ;", "else plus . set Enabled ( true ) ;", "if ( cb != null ) cb . callback ( val ) ;", "plus . repaint ( ) ;", "minus . repaint ( ) ;", "if ( progress != null ) {", "progress . set Value ( val / max ) ; } }"]}
{"ids": "34080", "code": ["public void remove Callback ( Callback callback ) {", "m Callbacks . remove ( callback ) ; }"]}
{"ids": "14811", "code": ["private boolean expect Vlv Response ( ) {", "Boolean expected = Boolean . FALSE ;", "try {", "expected = ( Boolean ) get ( EXPECT VLV RESPONSE ) ; }", "catch ( Exception e ) { }", "return expected == null ? false : expected . boolean Value ( ) ; }"]}
{"ids": "506", "code": ["public void layout Container ( final Container parent ) {", "check Layout ( get Model ( ) ) ;", "final Insets insets = parent . get Insets ( ) ;", "final Dimension size = parent . get Size ( ) ;", "final int width = size . width - ( insets . left + insets . right ) ;", "final int height = size . height - ( insets . top + insets . bottom ) ;", "final Rectangle bounds = new Rectangle ( insets . left , insets . top , width , height ) ;", "layout 1 ( get Model ( ) , bounds ) ;", "layout 2 ( get Model ( ) , bounds ) ; }"]}
{"ids": "85867", "code": ["@ Override public Invocation . Builder accept ( String ... media Types ) {", "client Request Context . set Accept Response Types Str ( Arrays . as List ( media Types ) ) ;", "return this ; }"]}
{"ids": "21215", "code": ["public Stream Consumer ( Input Stream stream ) {", "in = new Buffered Input Stream ( stream ) ;", "thread . start ( ) ; }"]}
{"ids": "4321", "code": ["public static String sub String ( String string , int begin Index , int length ) {", "if ( string == null ) {", "return null ; }", "final int end Index = begin Index + length ;", "if ( begin Index >= string . length ( ) ) {", "return EMPTY ; }", "if ( end Index > string . length ( ) ) {", "return string . substring ( begin Index , string . length ( ) ) ; }", "return string . substring ( begin Index , end Index ) ; }"]}
{"ids": "45876", "code": ["private static Socket Impl create Socket Impl ( ) {", "try {", "return socket Impl Ctor . new Instance ( ) ; }", "catch ( Instantiation Exception x ) {", "throw new Assertion Error ( x ) ; }", "catch ( Illegal Access Exception x ) {", "throw new Assertion Error ( x ) ; }", "catch ( Invocation Target Exception x ) {", "throw new Assertion Error ( x ) ; } }"]}
{"ids": "16548", "code": ["@ Override public String encode ( ) {", "return name . substring ( NUM_ , NUM_ ) ; }"]}
{"ids": "900", "code": ["private void update Base Matrix ( Drawable d ) {", "Image View image View = get Image View ( ) ;", "if ( null == image View || null == d ) {", "return ; }", "final float view Width = get Image View Width ( image View ) ;", "final float view Height = get Image View Height ( image View ) ;", "final int drawable Width = d . get Intrinsic Width ( ) ;", "final int drawable Height = d . get Intrinsic Height ( ) ;", "m Base Matrix . reset ( ) ;", "final float width Scale = view Width / drawable Width ;", "final float height Scale = view Height / drawable Height ;", "if ( m Scale Type == Scale Type . CENTER ) {", "m Base Matrix . post Translate ( ( view Width - drawable Width ) / NUM_ , ( view Height - drawable Height ) / NUM_ ) ; }", "else if ( m Scale Type == Scale Type . CENTER CROP ) {", "float scale = Math . max ( width Scale , height Scale ) ;", "m Base Matrix . post Scale ( scale , scale ) ;", "m Base Matrix . post Translate ( ( view Width - drawable Width * scale ) / NUM_ , ( view Height - drawable Height * scale ) / NUM_ ) ; }", "else if ( m Scale Type == Scale Type . CENTER INSIDE ) {", "float scale = Math . min ( NUM_ , Math . min ( width Scale , height Scale ) ) ;", "m Base Matrix . post Scale ( scale , scale ) ;", "m Base Matrix . post Translate ( ( view Width - drawable Width * scale ) / NUM_ , ( view Height - drawable Height * scale ) / NUM_ ) ; }", "else {", "Rect F m Temp Src = new Rect F ( NUM_ , NUM_ , drawable Width , drawable Height ) ;", "Rect F m Temp Dst = new Rect F ( NUM_ , NUM_ , view Width , view Height ) ;", "if ( ( int ) m Base Rotation % NUM_ != NUM_ ) {", "m Temp Src = new Rect F ( NUM_ , NUM_ , drawable Height , drawable Width ) ; }", "switch ( m Scale Type ) {", "case FIT CENTER :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . CENTER ) ;", "break ;", "case FIT START :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . START ) ;", "break ;", "case FIT END :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . END ) ;", "break ;", "case FIT XY :", "m Base Matrix . set Rect To Rect ( m Temp Src , m Temp Dst , Scale To Fit . FILL ) ;", "break ;", "default :", "break ; } }", "reset Matrix ( ) ; }"]}
{"ids": "26867", "code": ["void cancel All ( ) {", "synchronized ( current Requests ) {", "for ( Download Request request : current Requests ) {", "request . cancel ( ) ; } }", "current Requests . clear ( ) ; }"]}
{"ids": "65493", "code": ["protected void add Docs ( String index , String type , int number ) throws Json Processing Exception {", "Object Mapper mapper = new Object Mapper ( ) ;", "for ( int i = NUM_ ; i < number ; i ++ ) {", "index ( index , type , STR_ + i , mapper . write Value As String ( Test Document . create Simple Doc ( i ) ) ) ; }", "flush ( ) ; }"]}
{"ids": "86549", "code": ["public final Parallel Flux < T > do On Error ( Consumer < ? super Throwable > on Error ) {", "Objects . require Non Null ( on Error , STR_ ) ;", "return do On Signal ( this , null , null , on Error , null , null , null , null , null ) ; }"]}
{"ids": "61625", "code": ["public void simulate Method ( Soot Method method , Reference Variable this Var , Reference Variable return Var , Reference Variable params [ ] ) {", "String sub Signature = method . get Sub Signature ( ) ;", "if ( sub Signature . equals ( STR_ ) ) {", "java lang System arraycopy ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang System set In 0 ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang System set Out 0 ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang System set Err 0 ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang System init Properties ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang System map Library Name ( method , this Var , return Var , params ) ;", "return ; }", "else if ( sub Signature . equals ( STR_ ) ) {", "java lang System get Caller Class ( method , this Var , return Var , params ) ;", "return ; }", "else {", "default Method ( method , this Var , return Var , params ) ;", "return ; } }"]}
{"ids": "6407", "code": ["protected void load Value ( String s Value ) {", "try {", "value = Long . parse Long ( s Value . trim ( ) ) ; }", "catch ( Number Format Exception nfe ) {", "revert To Default ( ) ; } }"]}
{"ids": "73486", "code": ["public void check Bounds ( ) {", "tf Low Bound . set Enabled ( ts Clipping . is Selected ( ) ) ;", "tf Up Bound . set Enabled ( ts Clipping . is Selected ( ) ) ; }"]}
{"ids": "83839", "code": ["public void remove ( int index ) {", "m Categories . remove ( index ) ;", "m Titles . remove ( index ) ;", "m Values . remove ( index ) ; }"]}
{"ids": "78788", "code": ["public static boolean delete Files And Dirs Recursive ( final File directory ) {", "if ( directory == null || ! directory . is Directory ( ) ) {", "Log . e ( File Utils . class , STR_ ) ;", "return false ; }", "return delete Files And Dirs ( directory ) ; }"]}
{"ids": "79933", "code": ["void render ( Graphics Context g , Point 2 D viewport Origin ) {", "g . set Global Alpha ( life ) ;", "g . set Global Blend Mode ( blend Mode ) ;", "if ( image != null ) {", "g . save ( ) ;", "g . translate ( x - viewport Origin . get X ( ) , y - viewport Origin . get Y ( ) ) ;", "g . scale ( radius X * NUM_ / image . get Width ( ) , radius Y * NUM_ / image . get Height ( ) ) ;", "g . draw Image ( image , NUM_ , NUM_ ) ;", "g . restore ( ) ; }", "else {", "g . set Fill ( color ) ;", "g . fill Oval ( x - viewport Origin . get X ( ) , y - viewport Origin . get Y ( ) , radius X * NUM_ , radius Y * NUM_ ) ; } }"]}
{"ids": "63262", "code": ["public int position ( ) {", "return buff . position ( ) ; }"]}
{"ids": "56281", "code": ["@ Override public void write ( String str , int off , int len ) throws IO Exception {", "final int off plus len = off + len ;", "for ( int i = off ; i < off plus len ; ) {", "char c = str . char At ( i ++ ) ;", "if ( c < NUM_ ) {", "bytes [ index ] = ( byte ) c ;", "if ( ++ index >= bytes . length ) {", "flush Buffer ( ) ; } }", "else {", "write ( c ) ; } } }"]}
{"ids": "86893", "code": ["public void write To NBT ( final NBT Tag Compound nbt ) {", "final NBT Tag List modules Nbt = new NBT Tag List ( ) ;", "for ( final Module module : modules ) {", "final NBT Tag Compound module Nbt = new NBT Tag Compound ( ) ;", "if ( module != null ) {", "module . write To NBT ( module Nbt ) ; }", "modules Nbt . append Tag ( module Nbt ) ; }", "nbt . set Tag ( TAG MODULES , modules Nbt ) ;", "lock . if Present ( null ) ;", "lock . if Present ( null ) ; }"]}
{"ids": "32138", "code": ["void send Buffer If Not Empty ( ) throws IO Exception {", "if ( buf != null && buf . position ( ) > NUM_ ) send Buffer ( ) ; }"]}
{"ids": "41459", "code": ["public void on Shared Preference Changed ( Shared Preferences shared Preferences , String key ) {", "if ( key . equals ( get String ( R . string . pref key notification ) ) ) {", "set Notification ( shared Preferences . get Boolean ( key , true ) ) ; }", "else if ( key . equals ( get String ( R . string . pref key gmail signature ) ) ) {", "set Gmail Signature Pref Description ( shared Preferences . get Boolean ( key , false ) ) ; }", "else if ( key . equals ( get String ( R . string . pref key sms signature ) ) ) {", "set Sms Signature Pref Description ( shared Preferences . get Boolean ( key , false ) ) ; } }"]}
{"ids": "75132", "code": ["public void init Port Parameters ( Serial Port port ) {", "initialized = false ;", "if ( port != null ) {", "cb Port . set Selected Item ( port . get Name ( ) ) ;", "cb Baudrate . set Selected Item ( String . value Of ( port . get Baud Rate ( ) ) ) ;", "cb Parity . set Selected Index ( port . get Parity ( ) ) ;", "cb Data Bits . set Selected Index ( port . get Data Bits ( ) - NUM_ ) ;", "cb Stop Bits . set Selected Index ( port . get Stop Bits ( ) - NUM_ ) ;", "int prt = port . get Flow Control Mode ( ) ;", "cb Protocol Rx . set Selected Index ( ( prt & Serial Port . FLOWCONTROL RTSCTS IN ) != NUM_ ? NUM_ : ( prt & Serial Port . FLOWCONTROL XONXOFF IN ) != NUM_ ? NUM_ : NUM_ ) ;", "cb Protocol Tx . set Selected Index ( ( prt & Serial Port . FLOWCONTROL RTSCTS OUT ) != NUM_ ? NUM_ : ( prt & Serial Port . FLOWCONTROL XONXOFF OUT ) != NUM_ ? NUM_ : NUM_ ) ;", "btn DSR . set Selected ( port . is DSR ( ) ) ;", "btn CTS . set Selected ( port . is CTS ( ) ) ;", "btn CD . set Selected ( port . is CD ( ) ) ;", "btn DTR . set Selected ( port . is DTR ( ) ) ;", "btn RTS . set Selected ( port . is RTS ( ) ) ; }", "initialized = true ; }"]}
{"ids": "32214", "code": ["public void add Preload Entry ( Grid Cache Entry Info info ) {", "if ( preload Entries == null ) preload Entries = new Array List < > ( ) ;", "preload Entries . add ( info ) ; }"]}
{"ids": "80517", "code": ["private void put Off Uniform ( final Player player ) {", "if ( UNIFORM . is Part Of ( player . get Outfit ( ) ) ) {", "player . return To Original Outfit ( ) ; } }"]}
{"ids": "25984", "code": ["public static void move File ( final File src File , final File dest File ) throws IO Exception {", "if ( src File == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( dest File == null ) {", "throw new Null Pointer Exception ( STR_ ) ; }", "if ( ! src File . exists ( ) ) {", "throw new File Not Found Exception ( STR_ + src File + STR_ ) ; }", "if ( src File . is Directory ( ) ) {", "throw new IO Exception ( STR_ + src File + STR_ ) ; }", "if ( dest File . exists ( ) ) {", "throw new IO Exception ( STR_ + dest File + STR_ ) ; }", "if ( dest File . is Directory ( ) ) {", "throw new IO Exception ( STR_ + dest File + STR_ ) ; }", "final boolean rename = src File . rename To ( dest File ) ;", "if ( ! rename ) {", "copy File ( src File , dest File ) ;", "if ( ! src File . delete ( ) ) {", "Parse File Utils . delete Quietly ( dest File ) ;", "throw new IO Exception ( STR_ + src File + STR_ + dest File + STR_ ) ; } } }"]}
{"ids": "45849", "code": ["public synchronized Scan Manager Config read From File ( ) throws IO Exception {", "final File f = new File ( file ) ;", "if ( ! f . exists ( ) ) throw new IO Exception ( STR_ + file ) ;", "if ( ! f . can Read ( ) ) throw new IO Exception ( STR_ + file ) ;", "try {", "return read ( f ) ; }", "catch ( JAXB Exception x ) {", "final IO Exception io = new IO Exception ( STR_ + file + STR_ + x , x ) ;", "throw io ; } }"]}
{"ids": "48239", "code": ["public void delete ( String name ) throws IO Exception {", "if ( name . equals Ignore Case ( ISSUER ) ) {", "names = null ; }", "else {", "throw new IO Exception ( STR_ + STR_ ) ; }", "encode This ( ) ; }"]}
{"ids": "3865", "code": ["public Compile Class Not Found ( Exception cause ) {", "super ( cause . get Message ( ) ) ;", "cause = cause ; }"]}
{"ids": "83195", "code": ["public Sym Graph ( Motif motif ) {", "this . motif = motif ;", "colors To Recheck = new Hash Set < Integer > ( ) ;", "top Motifnode To Color = new int [ motif . get Nr Motif Nodes ( ) ] ;", "color To Bottom Motifnode = new Hash Map < Integer , List < Integer > > ( ) ;", "color To Top Motifnode = new Hash Map < Integer , List < Integer > > ( ) ;", "Array List < Integer > list 1 = new Array List < Integer > ( ) ;", "Array List < Integer > list 2 = new Array List < Integer > ( ) ;", "for ( int i = NUM_ ; i < top Motifnode To Color . length ; i ++ ) {", "list 1 . add ( i ) ;", "list 2 . add ( i ) ; }", "color To Bottom Motifnode . put ( NUM_ , list 2 ) ;", "color To Top Motifnode . put ( NUM_ , list 1 ) ; }"]}
{"ids": "4401", "code": ["public static boolean any Dimension Has Items ( Collection < Dimensional Object > dimensions ) {", "if ( dimensions == null || dimensions . is Empty ( ) ) {", "return false ; }", "for ( Dimensional Object dim : dimensions ) {", "if ( dim . has Items ( ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "6695", "code": ["private void open Current And Maybe Next ( final boolean open Next ) {", "LOG . info ( STR_ ) ;", "synchronized ( this ) {", "LOG . info ( STR_ ) ;", "close Cursor ( ) ;", "if ( m Play List Len == NUM_ || m Play List == null ) {", "return ; }", "stop ( false ) ;", "m Play Pos = Math . min ( m Play Pos , m Play List . length - NUM_ ) ;", "update Cursor ( m Play List [ m Play Pos ] ) ;", "while ( true ) {", "if ( m Cursor != null && ! m Cursor . is Closed ( ) && open File ( Media Store . Audio . Media . EXTERNAL CONTENT URI + STR_ + m Cursor . get Long ( IDCOLIDX ) ) ) {", "break ; }", "close Cursor ( ) ;", "if ( m Open Failed Counter ++ < NUM_ && m Play List Len > NUM_ ) {", "final int pos = get Next Position ( false ) ;", "if ( schedule Shutdown And Notify Play State Change ( pos ) ) return ;", "m Play Pos = pos ;", "stop ( false ) ;", "m Play Pos = pos ;", "update Cursor ( m Play List [ m Play Pos ] ) ; }", "else {", "m Open Failed Counter = NUM_ ;", "LOG . warn ( STR_ ) ;", "schedule Delayed Shutdown ( ) ;", "if ( m Is Supposed To Be Playing ) {", "m Is Supposed To Be Playing = false ;", "notify Change ( PLAYSTATE CHANGED ) ; }", "return ; } }", "if ( open Next ) {", "set Next Track ( ) ; } } }"]}
{"ids": "17375", "code": ["private void create Overview Page ( ) {", "Remap Overview overview = new Remap Overview ( migration Task , get Container ( ) ) ;", "int index = add Page ( overview . get Control ( ) ) ;", "set Page Text ( index , STR_ ) ;", "task Listeners . add ( overview ) ; }"]}
{"ids": "14131", "code": ["public SOAP Connection open SOAP Connection ( ) throws SOAP Exception {", "return soap Connection Factory . create Connection ( ) ; }"]}
{"ids": "12202", "code": ["public static < U , V > String print Map ( final Map < U , V > map , final Converter < U > key Converter , final Converter < V > value Converter ) {", "final String Builder sb = new String Builder ( STR_ ) ;", "String separator = STR_ ;", "for ( final Entry < U , V > entry : map . entry Set ( ) ) {", "sb . append ( separator ) ;", "sb . append ( key Converter . convert ( entry . get Key ( ) ) ) ;", "sb . append ( STR_ ) ;", "sb . append ( value Converter . convert ( entry . get Value ( ) ) ) ;", "separator = STR_ ; }", "sb . append ( STR_ ) ;", "return sb . to String ( ) ; }"]}
{"ids": "11574", "code": ["public void find And Init ( Object some Obj ) {", "if ( some Obj instanceof com . bbn . openmap . Map Bean ) {", "Debug . message ( STR_ , STR_ ) ;", "set Source Map ( ( Map Bean ) some Obj ) ; } }"]}
{"ids": "53156", "code": ["public static double cdf ( double x , double mu , double shape ) {", "if ( ! ( x > NUM_ ) ) {", "return NUM_ ; }", "final double v 0 = x / mu ;", "final double v 1 = Math . sqrt ( shape / x ) ;", "if ( v 1 == NUM_ ) {", "return v 0 > NUM_ ? NUM_ : NUM_ ; }", "double c 1 = Normal Distribution . standard Normal CDF ( v 1 * ( v 0 - NUM_ ) ) ;", "double c 2 = Normal Distribution . standard Normal CDF ( - v 1 * ( v 0 + NUM_ ) ) ;", "return ( c 2 > NUM_ ) ? c 1 + Math . exp ( NUM_ * shape / mu ) * c 2 : c 1 ; }"]}
{"ids": "15444", "code": ["public void handle Request ( Request Context rc ) throws CLI Exception {", "super . handle Request ( rc ) ;", "ldap Login ( ) ;", "SSO Token admin SSO Token = get Admin SSO Token ( ) ;", "String service Name = get String Option Value ( I Argument . SERVICE NAME ) ;", "String interface Name = get String Option Value ( ARGUMENT INTERFACE NAME ) ;", "String plugin Name = get String Option Value ( ARGUMENT PLUGIN NAME ) ;", "String i 18 n Key = get String Option Value ( ARGUMENT I 18 N KEY ) ;", "String i 18 n Name = get String Option Value ( ARGUMENT I 18 N NAME ) ;", "String class Name = get String Option Value ( ARGUMENT CLASS NAME ) ;", "Service Manager sm = null ;", "try {", "sm = new Service Manager ( admin SSO Token ) ; }", "catch ( SMS Exception smse ) {", "throw new CLI Exception ( smse , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; }", "catch ( SSO Exception ssoe ) {", "throw new CLI Exception ( ssoe , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; }", "I Output output Writer = get Output Writer ( ) ;", "try {", "String [ ] params = { service Name , interface Name , plugin Name , i 18 n Key , i 18 n Name , class Name } ;", "write Log ( Log Writer . LOG ACCESS , Level . INFO , STR_ , params ) ;", "Document plugin Doc = create Plugin Schema XML ( service Name , interface Name , plugin Name , i 18 n Key , i 18 n Name , class Name ) ;", "if ( plugin Doc != null ) {", "sm . add Plugin Schema ( plugin Doc ) ;", "String [ ] params 2 = { service Name , plugin Name } ;", "write Log ( Log Writer . LOG ACCESS , Level . INFO , STR_ , params 2 ) ;", "output Writer . println Message ( Message Format . format ( get Resource String ( STR_ ) , ( Object [ ] ) params ) ) ; }", "else {", "String [ ] args = { service Name , plugin Name , STR_ } ;", "debug Error ( STR_ ) ;", "write Log ( Log Writer . LOG ERROR , Level . INFO , STR_ , args ) ;", "throw new CLI Exception ( STR_ , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; } }", "catch ( SSO Exception ssoe ) {", "String [ ] args = { service Name , plugin Name , ssoe . get Message ( ) } ;", "debug Error ( STR_ , ssoe ) ;", "write Log ( Log Writer . LOG ERROR , Level . INFO , STR_ , args ) ;", "output Writer . println Message ( Message Format . format ( get Resource String ( STR_ ) , ( Object [ ] ) args ) ) ;", "throw new CLI Exception ( ssoe , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; }", "catch ( SMS Exception smse ) {", "String [ ] args = { service Name , plugin Name , smse . get Message ( ) } ;", "debug Error ( STR_ , smse ) ;", "write Log ( Log Writer . LOG ERROR , Level . INFO , STR_ , args ) ;", "output Writer . println Message ( Message Format . format ( get Resource String ( STR_ ) , ( Object [ ] ) args ) ) ;", "throw new CLI Exception ( smse , Exit Codes . REQUEST CANNOT BE PROCESSED ) ; } }"]}
{"ids": "46993", "code": ["protected void bflash ( ) throws SAX Exception {", "if ( m Buff Idx >= NUM_ ) {", "m Hand Cont . characters ( m Buff , NUM_ , ( m Buff Idx + NUM_ ) ) ;", "m Buff Idx = - NUM_ ; } }"]}
{"ids": "46750", "code": ["protected Mac ( Mac Spi mac Spi , Provider provider , String algorithm ) {", "this . spi = mac Spi ;", "this . provider = provider ;", "this . algorithm = algorithm ;", "service Iterator = null ;", "lock = null ; }"]}
{"ids": "76698", "code": ["public static String path To String ( String dim , String [ ] path ) {", "String [ ] full Path = new String [ NUM_ + path . length ] ;", "full Path [ NUM_ ] = dim ;", "System . arraycopy ( path , NUM_ , full Path , NUM_ , path . length ) ;", "return path To String ( full Path , full Path . length ) ; }"]}
{"ids": "72271", "code": ["public static boolean is Valid Ifd ( int ifd Id ) {", "return ifd Id == Ifd Id . TYPE IFD 0 || ifd Id == Ifd Id . TYPE IFD 1 || ifd Id == Ifd Id . TYPE IFD EXIF || ifd Id == Ifd Id . TYPE IFD INTEROPERABILITY || ifd Id == Ifd Id . TYPE IFD GPS ; }"]}
{"ids": "9833", "code": ["public static Cdc Session create Cdc Session Via Domain Auth ( String server Name , String user Name , String user Password ) {", "if ( server Name == null || server Name . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( user Name == null || user Name . length ( ) == NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "return new Cdc Session ( server Name , user Name , user Password ) ; }"]}
{"ids": "72357", "code": ["protected static Dfp exp Internal ( final Dfp a ) {", "Dfp y = a . get One ( ) ;", "Dfp x = a . get One ( ) ;", "Dfp fact = a . get One ( ) ;", "Dfp py = new Dfp ( y ) ;", "for ( int i = NUM_ ; i < NUM_ ; i ++ ) {", "x = x . multiply ( a ) ;", "fact = fact . divide ( i ) ;", "y = y . add ( x . multiply ( fact ) ) ;", "if ( y . equals ( py ) ) {", "break ; }", "py = new Dfp ( y ) ; }", "return y ; }"]}
{"ids": "51449", "code": ["public URL Connection open Connection ( ) throws IO Exception {", "return stream Handler . open Connection ( this ) ; }"]}
{"ids": "35623", "code": ["public static Array List < String [ ] > lines To Array ( Array List < String > in Line ) {", "Array List < String [ ] > frames En Tab = new Array List < > ( ) ;", "for ( int i = NUM_ ; i < in Line . size ( ) ; i ++ ) {", "frames En Tab . add ( line To Array ( in Line . get ( i ) ) ) ; }", "return frames En Tab ; }"]}
{"ids": "34459", "code": ["@ Override public int LA ( int i ) {", "int la = super . LA ( i ) ;", "return Character . to Lower Case ( la ) ; }"]}
{"ids": "4966", "code": ["public void deselect all ( ) {", "Arrays . fill ( sel array , false ) ; }"]}
{"ids": "70119", "code": ["@ Override public boolean can Transfer Criticals ( int loc ) {", "return false ; }"]}
{"ids": "37491", "code": ["private void calculate Sizes ( final Graphics g ) {", "m row Height = get Row Height ( g ) ;", "m char Height = get Char Height ( g ) ;", "m char Width = get Character Width ( g ) ; }"]}
{"ids": "56195", "code": ["public static Iterable < Gateway Meta State . Index Meta Write Info > resolve States To Be Written ( Immutable Set < String > previously Written Indices , Set < String > potentially Unwritten Indices , Meta Data previous Meta Data , Meta Data new Meta Data ) {", "List < Gateway Meta State . Index Meta Write Info > indices To Write = new Array List < > ( ) ;", "for ( String index : potentially Unwritten Indices ) {", "Index Meta Data new Index Meta Data = new Meta Data . index ( index ) ;", "Index Meta Data previous Index Meta Data = previous Meta Data == null ? null : previous Meta Data . index ( index ) ;", "String write Reason = null ;", "if ( previously Written Indices . contains ( index ) == false || previous Index Meta Data == null ) {", "write Reason = STR_ ; }", "else if ( previous Index Meta Data . get Version ( ) != new Index Meta Data . get Version ( ) ) {", "write Reason = STR_ + previous Index Meta Data . get Version ( ) + STR_ + new Index Meta Data . get Version ( ) + STR_ ; }", "if ( write Reason != null ) {", "indices To Write . add ( new Gateway Meta State . Index Meta Write Info ( new Index Meta Data , previous Index Meta Data , write Reason ) ) ; } }", "return indices To Write ; }"]}
{"ids": "39047", "code": ["protected double apply Function ( double value ) {", "switch ( m operator ) {", "case STR_ :", "return Math . log ( value ) ;", "case STR_ :", "return Math . abs ( value ) ;", "case STR_ :", "return Math . cos ( value ) ;", "case STR_ :", "return Math . exp ( value ) ;", "case STR_ :", "return Math . sqrt ( value ) ;", "case STR_ :", "return Math . floor ( value ) ;", "case STR_ :", "return Math . ceil ( value ) ;", "case STR_ :", "return Math . rint ( value ) ;", "case STR_ :", "return Math . tan ( value ) ;", "case STR_ :", "return Math . sin ( value ) ; }", "return Double . Na N ; }"]}
{"ids": "1239", "code": ["private Object deserialize Struct ( Element el Struct ) throws Converter Exception {", "String type = el Struct . get Attribute ( STR_ ) ;", "Struct struct = new Struct Impl ( ) ;", "Node List list = el Struct . get Child Nodes ( ) ;", "int len = list . get Length ( ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "Node node = list . item ( i ) ;", "if ( node instanceof Element ) {", "Element var = ( Element ) node ;", "Element value = get Child Element ( ( Element ) node ) ;", "if ( value != null ) {", "struct . set EL ( var . get Attribute ( STR_ ) , deserialize ( value ) ) ; } } }", "if ( struct . size ( ) == NUM_ && type != null && type . length ( ) > NUM_ ) {", "return STR_ ; }", "return struct ; }"]}
{"ids": "30723", "code": ["public Remote Event dequeue ( ) {", "Uuid uuid = ready Events . poll ( ) ;", "if ( uuid == null ) return null ;", "Single Producer producer = get Producer ( uuid ) ;", "return producer . pop Next Ready Event ( ) ; }"]}
{"ids": "47345", "code": ["public Invalid Properties Format Exception ( String message ) {", "super ( message ) ; }"]}
{"ids": "15467", "code": ["public Sub Command ( I Definition definition , Resource Bundle rb , String name , List mandatory Options , List optional Options , List option Aliases , String impl Class Name , boolean web Support , String deprecation Warning ) throws CLI Exception {", "this . definition = definition ;", "this . name = name ;", "this . rb = rb ;", "this . impl Class Name = impl Class Name ;", "this . web Support = web Support ;", "this . deprecation Warning = deprecation Warning ;", "Set short Options = new Hash Set ( ) ;", "parse Options ( mandatory Options , this . mandatory Options , short Options ) ;", "parse Options ( optional Options , this . optional Options , short Options ) ;", "parse Aliases ( option Aliases ) ; }"]}
{"ids": "69232", "code": ["public static boolean can Add Class In Package Of ( Class < ? > cls ) {", "final Package bean Package = cls . get Package ( ) ;", "if ( bean Package != null ) {", "if ( bean Package . is Sealed ( ) ) {", "return false ; }", "String pname = bean Package . get Name ( ) ;", "if ( pname . starts With ( STR_ ) || pname . starts With ( STR_ ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "134", "code": ["public static Json Token deserialize ( final String jwt ) throws Exception {", "Json Token Parser parser = new Json Token Parser ( verifier Providers , new Abelana Token Audience Checker ( Backend Constants . TOKEN ISSUER ) ) ;", "return parser . deserialize ( jwt ) ; }"]}
{"ids": "67196", "code": ["public void swap Suggestions ( final List < ? extends Search Suggestion > new Search Suggestions ) {", "Collections . reverse ( new Search Suggestions ) ;", "swap Suggestions ( new Search Suggestions , true ) ; }"]}
{"ids": "34602", "code": ["boolean should Animate Search Provider Icon ( Selection Type selection Type , boolean is Showing ) {", "if ( is Showing || Contextual Search Field Trial . are Extra Search Bar Animations Disabled ( ) ) {", "return false ; }", "if ( selection Type == Selection Type . TAP ) {", "long current Time Millis = System . current Time Millis ( ) ;", "long last Animated Time Millis = m Preference Manager . get Contextual Search Last Animation Time ( ) ;", "if ( Math . abs ( current Time Millis - last Animated Time Millis ) > ONE DAY IN MILLIS ) {", "m Preference Manager . set Contextual Search Last Animation Time ( current Time Millis ) ;", "return true ; }", "else {", "return false ; } }", "else if ( selection Type == Selection Type . LONG PRESS ) {", "return get Promo Open Count ( ) == NUM_ ; }", "return false ; }"]}
{"ids": "60245", "code": ["public void wait For ( ) {", "check Started ( ) ;", "try {", "if ( my Input Processor != null && my Process != null ) {", "my Input Processor . process ( my Process . get Output Stream ( ) ) ; } }", "finally {", "wait For Process ( ) ; } }"]}
{"ids": "23274", "code": ["public static String extract Uri From Address ( String addr ) {", "String uri = addr ;", "int index = addr . index Of ( STR_ ) ;", "if ( index != - NUM_ ) {", "uri = addr . substring ( index + NUM_ , addr . index Of ( STR_ , index ) ) ; }", "return uri ; }"]}
{"ids": "46130", "code": ["PBKDF 2 Key Impl ( PBE Key Spec key Spec , String prf Algo ) throws Invalid Key Spec Exception {", "char [ ] passwd = key Spec . get Password ( ) ;", "if ( passwd == null ) {", "this . passwd = new char [ NUM_ ] ; }", "else {", "this . passwd = passwd . clone ( ) ; }", "byte [ ] passwd Bytes = get Password Bytes ( this . passwd ) ;", "this . salt = key Spec . get Salt ( ) ;", "if ( salt == null ) {", "throw new Invalid Key Spec Exception ( STR_ ) ; }", "this . iter Count = key Spec . get Iteration Count ( ) ;", "if ( iter Count == NUM_ ) {", "throw new Invalid Key Spec Exception ( STR_ ) ; }", "else if ( iter Count < NUM_ ) {", "throw new Invalid Key Spec Exception ( STR_ ) ; }", "int key Length = key Spec . get Key Length ( ) ;", "if ( key Length == NUM_ ) {", "throw new Invalid Key Spec Exception ( STR_ ) ; }", "else if ( key Length < NUM_ ) {", "throw new Invalid Key Spec Exception ( STR_ ) ; }", "try {", "this . prf = Mac . get Instance ( prf Algo , Sun JCE . get Instance ( ) ) ; }", "catch ( No Such Algorithm Exception nsae ) {", "Invalid Key Spec Exception ike = new Invalid Key Spec Exception ( ) ;", "ike . init Cause ( nsae ) ;", "throw ike ; }", "this . key = derive Key ( prf , passwd Bytes , salt , iter Count , key Length ) ; }"]}
{"ids": "37004", "code": ["private static void show Directory Creation Error ( final String directory ) {", "final String message = STR_ + STR_ ;", "final String description = C Utility Functions . create Description ( String . format ( STR_ , directory ) , new String [ ] { STR_ } , new String [ ] { STR_ , STR_ } ) ;", "Navi Error Dialog . show ( null , message , description ) ; }"]}
{"ids": "48394", "code": ["static byte [ ] pad ( byte [ ] data ) {", "int len ;", "if ( data . length < NUM_ ) len = data . length ;", "else len = data . length % NUM_ ;", "if ( len == NUM_ ) return data ;", "else {", "byte [ ] padding = new byte [ NUM_ - len + data . length ] ;", "for ( int i = padding . length - NUM_ ; i > data . length - NUM_ ; i -- ) {", "padding [ i ] = NUM_ ; }", "System . arraycopy ( data , NUM_ , padding , NUM_ , data . length ) ;", "return padding ; } }"]}
{"ids": "76910", "code": ["public void serialize ( Data Output out ) throws IO Exception {", "out . write UTF ( id ) ;", "out . write UTF ( version ) ;", "out . write Int ( source Files . size ( ) ) ;", "for ( Entry < String , List < Revision File > > e : source Files . entry Set ( ) ) {", "out . write UTF ( e . get Key ( ) ) ;", "List < Revision File > files = e . get Value ( ) ;", "out . write Int ( files . size ( ) ) ;", "for ( Revision File file : files ) {", "out . write UTF ( file . file Name ) ;", "out . write Long ( file . size ) ; } } }"]}
{"ids": "63679", "code": ["public Named Column Projection ( String [ ] names , boolean include ) {", "m names = new Hash Set ( ) ;", "for ( int i = NUM_ ; i < names . length ; ++ i ) m names . add ( names [ i ] ) ;", "m include = include ; }"]}
{"ids": "52040", "code": ["public static Time Series Data serializable Instance ( ) {", "List < String > var Names = new Array List < > ( ) ;", "var Names . add ( STR_ ) ;", "var Names . add ( STR_ ) ;", "return new Time Series Data ( new Tetrad Matrix ( NUM_ , NUM_ ) , var Names ) ; }"]}
{"ids": "72190", "code": ["@ Override public void write Vertices ( final Output Stream output Stream , final Iterator < Vertex > vertex Iterator , final Direction direction ) throws IO Exception {", "final Buffered Writer writer = new Buffered Writer ( new Output Stream Writer ( output Stream ) ) ;", "try ( final Byte Array Output Stream baos = new Byte Array Output Stream ( ) ) {", "if ( wrap Adjacency List ) writer . write ( STR_ + Graph SON Tokens . VERTICES + STR_ ) ;", "while ( vertex Iterator . has Next ( ) ) {", "write Vertex ( baos , vertex Iterator . next ( ) , direction ) ;", "writer . write ( new String ( baos . to Byte Array ( ) ) ) ;", "if ( wrap Adjacency List ) {", "if ( vertex Iterator . has Next ( ) ) writer . write ( STR_ ) ; }", "else {", "writer . new Line ( ) ; }", "baos . reset ( ) ; }", "if ( wrap Adjacency List ) writer . write ( STR_ ) ; }", "writer . flush ( ) ; }"]}
{"ids": "68535", "code": ["Collection < ? extends Client Request Result > handle Retrieve Configurations Request ( final Client Request configuration Request , final Session session , final Destination reply Destination ) {", "if ( configuration Request . get Request Parameter ( ) != null ) {", "return configuration Loader . get Configuration Reports ( configuration Request . get Request Parameter ( ) ) ; }", "else {", "return configuration Loader . get Configuration Reports ( ) ; } }"]}
{"ids": "60384", "code": ["public static boolean contains Class ( @ Not Null File file , String class Name ) {", "String entry Path = class Name . replace ( STR_ , STR_ ) + STR_ ;", "return contains Entry ( file , entry Path ) ; }"]}
{"ids": "36583", "code": ["private double sin ( double angle ) {", "while ( angle >= NUM_ ) {", "angle -= NUM_ ; }", "double value = angle / NUM_ * Math . PI ;", "return Math . sin ( value ) ; }"]}
{"ids": "29381", "code": ["public void remove ( T graphic ) {", "synchronized ( m Lock ) {", "m Graphics . remove ( graphic ) ; }", "post Invalidate ( ) ; }"]}
{"ids": "80948", "code": ["public synchronized void accessed ( Object object ) {", "history List . remove ( object ) ;", "history List . add ( object ) ; }"]}
{"ids": "3100", "code": ["public static boolean is Empty ( String string ) {", "return string == null || string . length ( ) <= NUM_ ; }"]}
{"ids": "53275", "code": ["@ Override @ Suppress Warnings ( STR_ ) protected void heapify Up Comparable ( int pos , Object elem ) {", "final Comparable < Object > cur = ( Comparable < Object > ) elem ;", "while ( pos > NUM_ ) {", "final int parent = ( pos - NUM_ ) > > > NUM_ ;", "Object par = queue [ parent ] ;", "if ( cur . compare To ( par ) >= NUM_ ) {", "break ; }", "queue [ pos ] = par ;", "index . put ( par , pos ) ;", "pos = parent ; }", "queue [ pos ] = cur ;", "index . put ( cur , pos ) ; }"]}
{"ids": "49987", "code": ["private void update Release Locks ( ) throws Cache Exception {", "if ( num Locks . add And Get ( - NUM_ ) < NUM_ ) {", "throw new Cache Exception ( STR_ ) ; }", "if ( eviction Policy == Eviction Policy . LRU ) {", "timestamp . set ( System . nano Time ( ) ) ; }", "else if ( eviction Policy == Eviction Policy . LFU ) {", "timestamp . add And Get ( NUM_ ) ; }", "else if ( eviction Policy == Eviction Policy . MIN EVICT ) { }", "else {", "throw new Cache Exception ( STR_ + eviction Policy . name ( ) ) ; } }"]}
{"ids": "1400", "code": ["public static Short to Short ( char c ) {", "return Short . value Of ( to Short Value ( c ) ) ; }"]}
{"ids": "76893", "code": ["protected Geo Point [ ] find Crossings ( final Planet Model planet Model , final Plane q , final Membership [ ] bounds , final Membership [ ] more Bounds ) {", "final double line Vector X = y * q . z - z * q . y ;", "final double line Vector Y = z * q . x - x * q . z ;", "final double line Vector Z = x * q . y - y * q . x ;", "if ( Math . abs ( line Vector X ) < MINIMUM RESOLUTION && Math . abs ( line Vector Y ) < MINIMUM RESOLUTION && Math . abs ( line Vector Z ) < MINIMUM RESOLUTION ) {", "return NO POINTS ; }", "double x 0 ;", "double y 0 ;", "double z 0 ;", "final double denom YZ = this . y * q . z - this . z * q . y ;", "final double denom XZ = this . x * q . z - this . z * q . x ;", "final double denom XY = this . x * q . y - this . y * q . x ;", "if ( Math . abs ( denom YZ ) >= Math . abs ( denom XZ ) && Math . abs ( denom YZ ) >= Math . abs ( denom XY ) ) {", "if ( Math . abs ( denom YZ ) < MINIMUM RESOLUTION SQUARED ) {", "return NO POINTS ; }", "final double denom = NUM_ / denom YZ ;", "x 0 = NUM_ ;", "y 0 = ( - this . D * q . z - this . z * - q . D ) * denom ;", "z 0 = ( this . y * - q . D + this . D * q . y ) * denom ; }", "else if ( Math . abs ( denom XZ ) >= Math . abs ( denom XY ) && Math . abs ( denom XZ ) >= Math . abs ( denom YZ ) ) {", "if ( Math . abs ( denom XZ ) < MINIMUM RESOLUTION SQUARED ) {", "return NO POINTS ; }", "final double denom = NUM_ / denom XZ ;", "x 0 = ( - this . D * q . z - this . z * - q . D ) * denom ;", "y 0 = NUM_ ;", "z 0 = ( this . x * - q . D + this . D * q . x ) * denom ; }", "else {", "if ( Math . abs ( denom XY ) < MINIMUM RESOLUTION SQUARED ) {", "return NO POINTS ; }", "final double denom = NUM_ / denom XY ;", "x 0 = ( - this . D * q . y - this . y * - q . D ) * denom ;", "y 0 = ( this . x * - q . D + this . D * q . x ) * denom ;", "z 0 = NUM_ ; }", "final double A = line Vector X * line Vector X * planet Model . inverse Ab Squared + line Vector Y * line Vector Y * planet Model . inverse Ab Squared + line Vector Z * line Vector Z * planet Model . inverse C Squared ;", "final double B = NUM_ * ( line Vector X * x 0 * planet Model . inverse Ab Squared + line Vector Y * y 0 * planet Model . inverse Ab Squared + line Vector Z * z 0 * planet Model . inverse C Squared ) ;", "final double C = x 0 * x 0 * planet Model . inverse Ab Squared + y 0 * y 0 * planet Model . inverse Ab Squared + z 0 * z 0 * planet Model . inverse C Squared - NUM_ ;", "final double Bsquared Minus = B * B - NUM_ * A * C ;", "if ( Math . abs ( Bsquared Minus ) < MINIMUM RESOLUTION SQUARED ) {", "return NO POINTS ; }", "else if ( Bsquared Minus > NUM_ ) {", "final double inverse 2 A = NUM_ / ( NUM_ * A ) ;", "final double sqrt Term = Math . sqrt ( Bsquared Minus ) ;", "final double t 1 = ( - B + sqrt Term ) * inverse 2 A ;", "final double t 2 = ( - B - sqrt Term ) * inverse 2 A ;", "final double point 1 X = line Vector X * t 1 + x 0 ;", "final double point 1 Y = line Vector Y * t 1 + y 0 ;", "final double point 1 Z = line Vector Z * t 1 + z 0 ;", "final double point 2 X = line Vector X * t 2 + x 0 ;", "final double point 2 Y = line Vector Y * t 2 + y 0 ;", "final double point 2 Z = line Vector Z * t 2 + z 0 ;", "boolean point 1 Valid = true ;", "boolean point 2 Valid = true ;", "for ( final Membership bound : bounds ) {", "if ( ! bound . is Within ( point 1 X , point 1 Y , point 1 Z ) ) {", "point 1 Valid = false ;", "break ; } }", "if ( point 1 Valid ) {", "for ( final Membership bound : more Bounds ) {", "if ( ! bound . is Within ( point 1 X , point 1 Y , point 1 Z ) ) {", "point 1 Valid = false ;", "break ; } } }", "for ( final Membership bound : bounds ) {", "if ( ! bound . is Within ( point 2 X , point 2 Y , point 2 Z ) ) {", "point 2 Valid = false ;", "break ; } }", "if ( point 2 Valid ) {", "for ( final Membership bound : more Bounds ) {", "if ( ! bound . is Within ( point 2 X , point 2 Y , point 2 Z ) ) {", "point 2 Valid = false ;", "break ; } } }", "if ( point 1 Valid && point 2 Valid ) {", "return new Geo Point [ ] { new Geo Point ( point 1 X , point 1 Y , point 1 Z ) , new Geo Point ( point 2 X , point 2 Y , point 2 Z ) } ; }", "if ( point 1 Valid ) {", "return new Geo Point [ ] { new Geo Point ( point 1 X , point 1 Y , point 1 Z ) } ; }", "if ( point 2 Valid ) {", "return new Geo Point [ ] { new Geo Point ( point 2 X , point 2 Y , point 2 Z ) } ; }", "return NO POINTS ; }", "else {", "return NO POINTS ; } }"]}
{"ids": "77214", "code": ["public static void encode Dimension ( float value , byte dest [ ] , int offset ) {", "Numeric Utils . int To Sortable Bytes ( Numeric Utils . float To Sortable Int ( value ) , dest , offset ) ; }"]}
{"ids": "24777", "code": ["public long minflt ( ) {", "return Long . parse Long ( fields [ NUM_ ] ) ; }"]}
{"ids": "19670", "code": ["public void end Filter Interval ( ) {", "end Millis = System . current Time Millis ( ) ;", "total Filter Millis += ( end Millis - interval Start Millis ) ;", "state = Task State . other ; }"]}
{"ids": "66466", "code": ["public String process ( String to process ) {", "if ( to process == null || to process . length ( ) == NUM_ ) return STR_ ;", "String tmp = STR_ ;", "String Tokenizer st = new String Tokenizer ( to process , STR_ , true ) ;", "String Buffer new Value = new String Buffer ( to process . length ( ) + NUM_ ) ;", "while ( st . has More Tokens ( ) ) {", "tmp = st . next Token ( ) ;", "if ( has Attribute ( tmp ) ) new Value . append ( ( String ) get ( tmp ) ) ;", "else new Value . append ( tmp ) ; }", "return new Value . to String ( ) ; }"]}
{"ids": "70670", "code": ["public static final void write List Xml ( List val , String name , Xml Serializer out ) throws Xml Pull Parser Exception , java . io . IO Exception {", "if ( val == null ) {", "out . start Tag ( null , STR_ ) ;", "out . end Tag ( null , STR_ ) ;", "return ; }", "out . start Tag ( null , STR_ ) ;", "if ( name != null ) {", "out . attribute ( null , STR_ , name ) ; }", "int n = val . size ( ) ;", "int i = NUM_ ;", "while ( i < n ) {", "write Value Xml ( val . get ( i ) , null , out ) ;", "i ++ ; }", "out . end Tag ( null , STR_ ) ; }"]}
{"ids": "14957", "code": ["private void change Password ( String user Type , String old Password , String new Password ) throws Exception {", "String file Enc Password = get User Password ( user Type ) ;", "String user DN = get User DN ( user Type ) ;", "if ( ( file Enc Password == null ) || ( file Enc Password . length ( ) == NUM_ ) || ( user DN == null ) || ( user DN . length ( ) == NUM_ ) ) {", "debug . error ( STR_ + user Type + STR_ + config File ) ;", "throw new XML Exception ( i 18 n . get String ( STR_ ) ) ; }", "if ( ! old Password . equals ( Access Controller . do Privileged ( new Decode Action ( file Enc Password ) ) ) ) {", "throw new Exception ( i 18 n . get String ( STR_ ) ) ; }", "if ( is AMSDK Configured ) {", "try {", "new Auth Context ( new Auth Principal ( user DN ) , new Password . to Char Array ( ) ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + user DN + STR_ ) ; } }", "catch ( Login Exception lee ) {", "try {", "Auth Context ac = new Auth Context ( new Auth Principal ( user DN ) , old Password . to Char Array ( ) ) ;", "Persistent Object user = UMS Object . get Object ( ac . get SSO Token ( ) , new Guid ( user DN ) ) ;", "if ( debug . message Enabled ( ) ) {", "debug . message ( STR_ + user DN + STR_ ) ; }", "user . set Attribute ( new Attr ( STR_ , new Password ) ) ;", "user . save ( ) ; }", "catch ( Login Exception le ) {", "if ( debug . warning Enabled ( ) ) {", "debug . warning ( STR_ + user DN + STR_ ) ; }", "throw new Exception ( i 18 n . get String ( STR_ ) + STR_ + le . get Message ( ) ) ; } } }", "set User Password ( user Type , new Password ) ; }"]}
{"ids": "81366", "code": ["public int hash Code ( Object key ) {", "return ( key . hash Code ( ) & NUM_ ) % this . key Table . length ; }"]}
{"ids": "86183", "code": ["public Atomic Array Base ( E [ ] array ) {", "this . array = Arrays . copy Of ( array , array . length , Object [ ] . class ) ; }"]}
{"ids": "74150", "code": ["public void apply ( ) {", "set Speed Map ( ) ;", "set N Xdata ( ) ; }"]}
{"ids": "46918", "code": ["public void push ( final String value ) {", "if ( value == null ) {", "mv . visit Insn ( Opcodes . ACONST NULL ) ; }", "else {", "mv . visit Ldc Insn ( value ) ; } }"]}
{"ids": "37143", "code": ["public void init ( ) {", "m project Tree . set Selection Path ( new Tree Path ( m project Tree . get Root Node ( ) ) ) ; }"]}
{"ids": "3627", "code": ["public int read ( ) throws IO Exception {", "return is . read ( ) ; }"]}
{"ids": "65884", "code": ["private void display Calendar ( ) {", "Key Name Pair pp = ( Key Name Pair ) field Resource . get Selected Item ( ) ;", "if ( pp == null ) return ;", "int S Resource ID = pp . get Key ( ) ;", "m m Assignment . set S Resource ID ( S Resource ID ) ;", "Timestamp date = field Date . get Timestamp ( ) ;", "int index = time Pane . get Selected Index ( ) ;", "log . config ( STR_ + index + STR_ + S Resource ID + STR_ + date ) ;", "m loading = true ;", "if ( index == NUM_ ) day Schedule . recreate ( S Resource ID , date ) ;", "else if ( index == NUM_ ) week Schedule . recreate ( S Resource ID , date ) ;", "else month Schedule . recreate ( S Resource ID , date ) ;", "m loading = false ;", "repaint ( ) ; }"]}
{"ids": "82009", "code": ["public static void assert Exception ( Runtime Exception exception , Runnable expression , String error Message ) {", "if ( verbose ) {", "log ( STR_ + exception + STR_ + expression + STR_ + error Message + STR_ ) ; }", "try {", "expression . run ( ) ; }", "catch ( Runtime Exception failure ) {", "if ( exception . get Class ( ) != failure . get Class ( ) ) {", "Test Utils . fail ( error Message ) ; }", "return ; }", "Test Utils . fail ( error Message ) ; }"]}
{"ids": "13680", "code": ["public boolean is Parity Correct ( byte [ ] [ ] shards , int first Byte , int byte Count ) {", "check Buffers And Sizes ( shards , first Byte , byte Count ) ;", "byte [ ] [ ] to Check = new byte [ parity Shard Count ] [ ] ;", "System . arraycopy ( shards , data Shard Count , to Check , NUM_ , parity Shard Count ) ;", "return coding Loop . check Some Shards ( parity Rows , shards , data Shard Count , to Check , parity Shard Count , first Byte , byte Count , null ) ; }"]}
{"ids": "35679", "code": ["protected void on Send Success ( Record Buffer < R > buffer ) {", "send Success . increment And Get ( ) ;", "logger . trace ( STR_ , name ( ) , buffer ) ;", "try {", "checkpointer . save Checkpoint ( buffer ) ; }", "catch ( Exception e ) {", "logger . error ( STR_ , name ( ) , buffer , e ) ; } }"]}
{"ids": "60525", "code": ["public void write ( String s , int off , int len ) {", "if ( text != null ) {", "text . append ( s . substring ( off , off + len ) ) ;", "if ( ( col += len ) > wrap ) println ( ) ; }", "else {", "super . write ( s , off , len ) ;", "flush ( ) ; } }"]}
{"ids": "21426", "code": ["public Zoneset show Active Zoneset ( Integer vsan Id ) throws Network Device Controller Exception {", "List < Zoneset > zonesets = show Zoneset ( vsan Id , true , null , false , false ) ;", "return zonesets . is Empty ( ) ? null : zonesets . get ( NUM_ ) ; }"]}
{"ids": "9190", "code": ["private final short validate Perm Split Factor ( String split Factor ) throws Ade Flow Exception {", "short perm Split Factor = Short . parse Short ( split Factor ) ;", "if ( perm Split Factor <= NUM_ || ( ( m outer Framing Flow . get Duration ( ) / perm Split Factor ) < MILLISECONDS IN ONE MINUTE ) ) {", "throw new Ade Flow Exception ( STR_ ) ; }", "return perm Split Factor ; }"]}
{"ids": "7202", "code": ["public static Calendar to Calendar ( String datestring , String format ) {", "Date d = parse ( datestring , format ) ;", "Calendar cal = Calendar . get Instance ( ) ;", "cal . set Time In Millis ( d . get Time ( ) ) ;", "return cal ; }"]}
{"ids": "80573", "code": ["private static void translate Compatibility To Paths ( RP Action action ) {", "if ( action . has ( Equip Action Consts . BASE OBJECT ) ) {", "List < String > path = Arrays . as List ( action . get ( Equip Action Consts . BASE OBJECT ) , action . get ( Equip Action Consts . BASE SLOT ) , action . get ( Equip Action Consts . BASE ITEM ) ) ;", "action . put ( Equip Action Consts . SOURCE PATH , path ) ; }", "else {", "List < String > path = Arrays . as List ( action . get ( Equip Action Consts . BASE ITEM ) ) ;", "action . put ( Equip Action Consts . SOURCE PATH , path ) ; } }"]}
{"ids": "65178", "code": ["public Builder add Menu Item ( @ Non Null String label , @ Non Null Pending Intent pending Intent ) {", "if ( m Menu Items == null ) m Menu Items = new Array List < > ( ) ;", "Bundle bundle = new Bundle ( ) ;", "bundle . put String ( KEY MENU ITEM TITLE , label ) ;", "bundle . put Parcelable ( KEY PENDING INTENT , pending Intent ) ;", "m Menu Items . add ( bundle ) ;", "return this ; }"]}
{"ids": "53397", "code": ["public Sparse Float Vector ( T Int Float Map values , int dimensionality ) throws Illegal Argument Exception {", "if ( values . size ( ) > dimensionality ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "this . indexes = new int [ values . size ( ) ] ;", "this . values = new float [ values . size ( ) ] ; {", "T Int Float Iterator iter = values . iterator ( ) ;", "for ( int i = NUM_ ; iter . has Next ( ) ; i ++ ) {", "iter . advance ( ) ;", "this . indexes [ i ] = iter . key ( ) ; }", "Arrays . sort ( this . indexes ) ; } {", "for ( int i = NUM_ ; i < values . size ( ) ; i ++ ) {", "this . values [ i ] = values . get ( this . indexes [ i ] ) ; } }", "this . dimensionality = dimensionality ;", "final int maxdim = get Max Dim ( ) ;", "if ( maxdim > dimensionality ) {", "throw new Illegal Argument Exception ( STR_ + dimensionality + STR_ + maxdim + STR_ ) ; } }"]}
{"ids": "45921", "code": ["public byte [ ] canon Serialize To Byte Array ( Node node ) throws Exception {", "Byte Array Output Stream baos = new Byte Array Output Stream ( ) ;", "canon . set Writer ( baos ) ;", "canon . not Reset ( ) ;", "canon . canonicalize Subtree ( node ) ;", "return baos . to Byte Array ( ) ; }"]}
{"ids": "950", "code": ["public Defined Method add Description ( String description ) {", "this . description = Optional . of ( description ) ;", "return this ; }"]}
{"ids": "25694", "code": ["public int add Flattened Column ( Object o , int [ ] dims ) throws Fits Exception {", "return add Flattened Column ( o , dims , false ) ; }"]}
{"ids": "55864", "code": ["public final void write To Stream ( Data Output Stream dos ) throws IO Exception {", "dos . write UTF ( event ) ;", "dos . write UTF ( site ) ;", "dos . write UTF ( date ) ;", "dos . write UTF ( round ) ;", "dos . write UTF ( white ) ;", "dos . write UTF ( black ) ;", "dos . write UTF ( Text IO . to FEN ( start Pos ) ) ;", "dos . write UTF ( time Control ) ;", "dos . write UTF ( white Time Control ) ;", "dos . write UTF ( black Time Control ) ;", "int n Tags = tag Pairs . size ( ) ;", "dos . write Int ( n Tags ) ;", "for ( int i = NUM_ ; i < n Tags ; i ++ ) {", "dos . write UTF ( tag Pairs . get ( i ) . tag Name ) ;", "dos . write UTF ( tag Pairs . get ( i ) . tag Value ) ; }", "Node . write To Stream ( dos , root Node ) ;", "Array List < Integer > path From Root = current Node . get Path From Root ( ) ;", "int path Len = path From Root . size ( ) ;", "dos . write Int ( path Len ) ;", "for ( int i = NUM_ ; i < path Len ; i ++ ) dos . write Int ( path From Root . get ( i ) ) ; }"]}
{"ids": "48773", "code": ["public void register Source ( Progress Source pi ) {", "synchronized ( progress Source List ) {", "if ( progress Source List . contains ( pi ) ) return ;", "progress Source List . add ( pi ) ; }", "if ( progress Listener List . size ( ) > NUM_ ) {", "Array List < Progress Listener > listeners = new Array List < Progress Listener > ( ) ;", "synchronized ( progress Listener List ) {", "for ( Iterator < Progress Listener > iter = progress Listener List . iterator ( ) ; iter . has Next ( ) ; ) {", "listeners . add ( iter . next ( ) ) ; } }", "for ( Iterator < Progress Listener > iter = listeners . iterator ( ) ; iter . has Next ( ) ; ) {", "Progress Listener pl = iter . next ( ) ;", "Progress Event pe = new Progress Event ( pi , pi . get URL ( ) , pi . get Method ( ) , pi . get Content Type ( ) , pi . get State ( ) , pi . get Progress ( ) , pi . get Expected ( ) ) ;", "pl . progress Start ( pe ) ; } } }"]}
{"ids": "17113", "code": ["private static Map < String , String > extract Key Value Pairs ( String props , Object Name mbean ) {", "Map < String , String > map = new Linked Hash Map < String , String > ( ) ;", "int eq = props . index Of ( STR_ ) ;", "while ( eq != - NUM_ ) {", "String key = props . substring ( NUM_ , eq ) ;", "String value = mbean . get Key Property ( key ) ;", "map . put ( key , value ) ;", "props = props . substring ( key . length ( ) + NUM_ + value . length ( ) ) ;", "if ( props . starts With ( STR_ ) ) {", "props = props . substring ( NUM_ ) ; }", "eq = props . index Of ( STR_ ) ; }", "return map ; }"]}
{"ids": "66232", "code": ["protected void paint Content Border Left Edge ( Graphics g , int tab Placement , int selected Index , int x , int y , int w , int h ) {", "Rectangle sel Rect = selected Index < NUM_ ? null : get Tab Bounds ( selected Index , calc Rect ) ;", "g . set Color ( select Highlight ) ;", "if ( tab Placement != LEFT || selected Index < NUM_ || ( sel Rect . x + sel Rect . width + NUM_ < x ) || ( sel Rect . y < y || sel Rect . y > y + h ) ) {", "g . draw Line ( x , y , x , y + h - NUM_ ) ; }", "else {", "g . draw Line ( x , y , x , sel Rect . y + NUM_ ) ;", "if ( sel Rect . y + sel Rect . height < y + h - NUM_ ) g . draw Line ( x , sel Rect . y + sel Rect . height + NUM_ , x , y + h - NUM_ ) ; } }"]}
{"ids": "86543", "code": ["public final Flux < T > sample ( Duration timespan ) {", "return sample Millis ( timespan . to Millis ( ) ) ; }"]}
{"ids": "53345", "code": ["@ Override public boolean has Values Description ( ) {", "return restriction Class != null && restriction Class != Object . class ; }"]}
{"ids": "78837", "code": ["public Smb File ( String url ) throws Malformed URL Exception {", "this ( new URL ( null , url , Handler . SMB HANDLER ) ) ; }"]}
{"ids": "34130", "code": ["public static boolean is Audio ( String mime Type ) {", "if ( mime Type != null ) {", "if ( mime Type . starts With ( STR_ ) ) return true ;", "else return false ; }", "else return false ; }"]}
{"ids": "77834", "code": ["private void restore Widget ( Key key , byte [ ] buffer , int data Size ) throws IO Exception {", "if ( VERBOSE ) Log . v ( TAG , STR_ + key . id ) ;", "if ( DEBUG ) Log . d ( TAG , STR_ + buffer . length + STR_ + Base 64 . encode To String ( buffer , NUM_ , data Size , Base 64 . NO WRAP ) ) ;", "Widget widget = unpack Proto ( new Widget ( ) , buffer , data Size ) ;", "if ( DEBUG ) Log . d ( TAG , STR_ + widget . provider ) ;", "if ( widget . icon . data != null ) {", "Bitmap icon = Bitmap Factory . decode Byte Array ( widget . icon . data , NUM_ , widget . icon . data . length ) ;", "if ( icon == null ) {", "Log . w ( TAG , STR_ + key . name ) ; }", "else {", "Icon Cache . preload Icon ( m Context , Component Name . unflatten From String ( widget . provider ) , icon , widget . icon . dpi ) ; } } }"]}
{"ids": "27344", "code": ["protected int assert Line Terminates ( int c ) throws IO Exception , RDF Parse Exception {", "c = reader . read ( ) ;", "c = skip Whitespace ( c ) ;", "if ( c != - NUM_ && c != STR_ && c != STR_ ) {", "report Fatal Error ( STR_ ) ; }", "return c ; }"]}
{"ids": "68031", "code": ["static private XML Event construct Event ( int event Type , Wb Xml Stream Reader stream ) throws XML Stream Exception {", "log . log ( Level . FINE , STR_ ) ;", "XML Event event ;", "switch ( event Type ) {", "case XML Stream Constants . START DOCUMENT :", "event = new Wb Xml Start Document Event ( stream ) ;", "break ;", "case XML Stream Constants . END DOCUMENT :", "event = new Wb Xml End Document Event ( stream ) ;", "break ;", "case XML Stream Constants . START ELEMENT :", "event = new Wb Xml Start Element Event ( stream ) ;", "break ;", "case XML Stream Constants . END ELEMENT :", "event = new Wb Xml End Element Event ( stream ) ;", "break ;", "case XML Stream Constants . CHARACTERS :", "case XML Stream Constants . CDATA :", "event = new Wb Xml Characters Event ( stream ) ;", "break ;", "default :", "throw new Unsupported Operation Exception ( String . format ( STR_ , event Type ) ) ; }", "log . log ( Level . FINE , STR_ , event ) ;", "return event ; }"]}
{"ids": "4304", "code": ["private void verify Grid State ( ) {", "Integer row Length = null ;", "int row Pos = NUM_ ;", "for ( List < Object > row : grid ) {", "if ( row Length != null && row Length != row . size ( ) ) {", "throw new Illegal State Exception ( STR_ + row Length + STR_ + row . size ( ) + STR_ + row Pos ) ; }", "row Pos ++ ;", "row Length = row . size ( ) ; } }"]}
{"ids": "63190", "code": ["public static String read String And Close ( Reader in , int length ) throws IO Exception {", "try {", "if ( length <= NUM_ ) {", "length = Integer . MAX VALUE ; }", "int block = Math . min ( Constants . IO BUFFER SIZE , length ) ;", "String Writer out = new String Writer ( block ) ;", "copy And Close Input ( in , out , length ) ;", "return out . to String ( ) ; }", "finally {", "in . close ( ) ; } }"]}
{"ids": "47979", "code": ["protected void begin Path ( ) {", "prep Drawing ( ) ;", "m PS Stream . println ( NEWPATH STR ) ;", "m Pen X = NUM_ ;", "m Pen Y = NUM_ ; }"]}
{"ids": "54646", "code": ["private void send Tcp Request ( Socket socket , String request ) throws Api Exception {", "try {", "Log Utils . LOGD ( TAG , STR_ + request ) ;", "Buffered Writer writer = new Buffered Writer ( new Output Stream Writer ( socket . get Output Stream ( ) ) ) ;", "writer . write ( request ) ;", "writer . flush ( ) ; }", "catch ( Exception e ) {", "Log Utils . LOGW ( TAG , STR_ , e ) ;", "disconnect ( ) ;", "throw new Api Exception ( Api Exception . IO EXCEPTION WHILE SENDING REQUEST , e ) ; } }"]}
{"ids": "9214", "code": ["public static String clean String ( String src ) {", "if ( src == null ) {", "return null ; }", "boolean found Bad = false ;", "final Character Iterator it = new String Character Iterator ( src ) ;", "for ( char c = it . first ( ) ; c != Character Iterator . DONE ; c = it . next ( ) ) {", "if ( c < ASCII PRINTABLE LOW || c >= ASCII PRINTABLE HI ) {", "found Bad = true ;", "break ; } }", "if ( ! found Bad ) {", "return src ; }", "final String Builder res = new String Builder ( ) ;", "for ( char c = it . first ( ) ; c != Character Iterator . DONE ; c = it . next ( ) ) {", "if ( c < ASCII PRINTABLE LOW || c >= ASCII PRINTABLE HI ) {", "res . append ( ASCII SPACE ) ; }", "else {", "res . append ( c ) ; } }", "return res . to String ( ) ; }"]}
{"ids": "52092", "code": ["public static Manual Lag Graph serializable Instance ( ) {", "return new Manual Lag Graph ( Manual Lag Graph Params . serializable Instance ( ) ) ; }"]}
{"ids": "45088", "code": ["public void update Actions ( ) {", "String text ;", "Action a = R Text Area . get Action ( R Text Area . UNDO ACTION ) ;", "if ( can Undo ( ) ) {", "a . set Enabled ( true ) ;", "text = get Undo Presentation Name ( ) ;", "a . put Value ( Action . NAME , text ) ;", "a . put Value ( Action . SHORT DESCRIPTION , text ) ; }", "else {", "if ( a . is Enabled ( ) ) {", "a . set Enabled ( false ) ;", "text = cant Undo Text ;", "a . put Value ( Action . NAME , text ) ;", "a . put Value ( Action . SHORT DESCRIPTION , text ) ; } }", "a = R Text Area . get Action ( R Text Area . REDO ACTION ) ;", "if ( can Redo ( ) ) {", "a . set Enabled ( true ) ;", "text = get Redo Presentation Name ( ) ;", "a . put Value ( Action . NAME , text ) ;", "a . put Value ( Action . SHORT DESCRIPTION , text ) ; }", "else {", "if ( a . is Enabled ( ) ) {", "a . set Enabled ( false ) ;", "text = cant Redo Text ;", "a . put Value ( Action . NAME , text ) ;", "a . put Value ( Action . SHORT DESCRIPTION , text ) ; } } }"]}
{"ids": "71538", "code": ["private static List < Size Pair > generate Valid Preview Size List ( Camera camera ) {", "Camera . Parameters parameters = camera . get Parameters ( ) ;", "List < android . hardware . Camera . Size > supported Preview Sizes = parameters . get Supported Preview Sizes ( ) ;", "List < android . hardware . Camera . Size > supported Picture Sizes = parameters . get Supported Picture Sizes ( ) ;", "List < Size Pair > valid Preview Sizes = new Array List < > ( ) ;", "for ( android . hardware . Camera . Size preview Size : supported Preview Sizes ) {", "float preview Aspect Ratio = ( float ) preview Size . width / ( float ) preview Size . height ;", "for ( android . hardware . Camera . Size picture Size : supported Picture Sizes ) {", "float picture Aspect Ratio = ( float ) picture Size . width / ( float ) picture Size . height ;", "if ( Math . abs ( preview Aspect Ratio - picture Aspect Ratio ) < ASPECT RATIO TOLERANCE ) {", "valid Preview Sizes . add ( new Size Pair ( preview Size , picture Size ) ) ;", "break ; } } }", "if ( valid Preview Sizes . size ( ) == NUM_ ) {", "Log . w ( TAG , STR_ ) ;", "for ( android . hardware . Camera . Size preview Size : supported Preview Sizes ) {", "valid Preview Sizes . add ( new Size Pair ( preview Size , null ) ) ; } }", "return valid Preview Sizes ; }"]}
{"ids": "6231", "code": ["public void add Scrolling Listener ( On Wheel Scroll Listener listener ) {", "scrolling Listeners . add ( listener ) ; }"]}
{"ids": "10477", "code": ["public static boolean has Dependency ( Maven Project project , String group Id ) {", "Set < Artifact > artifacts = project . get Artifacts ( ) ;", "if ( artifacts != null ) {", "for ( Artifact artifact : artifacts ) {", "String scope = artifact . get Scope ( ) ;", "if ( Objects . equal ( STR_ , scope ) ) {", "continue ; }", "if ( Objects . equal ( group Id , artifact . get Group Id ( ) ) ) {", "return true ; } } }", "return false ; }"]}
{"ids": "12623", "code": ["public Contour Generator ( URL url , float model Mean , float model Stddev ) throws IO Exception {", "this . model Mean = model Mean ;", "this . model Stddev = model Stddev ;", "List terms List = new Array List ( ) ;", "String line ;", "Buffered Reader reader = new Buffered Reader ( new Input Stream Reader ( url . open Stream ( ) ) ) ;", "line = reader . read Line ( ) ;", "while ( line != null ) {", "if ( ! line . starts With ( STR_ ) ) {", "parse And Add ( terms List , line ) ; }", "line = reader . read Line ( ) ; }", "terms = ( F 0 Model Term [ ] ) terms List . to Array ( terms ) ;", "reader . close ( ) ; }"]}
{"ids": "62092", "code": ["public void add Comment ( String comment ) {", "if ( frame != null ) {", "chat Tab . add Comment ( comment ) ; }", "if ( tabbed Pane . get Selected Index ( ) == NUM_ ) {", "editor Tab . display Comment ( comment ) ; } }"]}
{"ids": "76667", "code": ["public static byte [ ] hex String To Bytes ( String hex String ) {", "if ( hex String == null || hex String . equals ( STR_ ) ) {", "return null ; }", "hex String = hex String . to Upper Case ( ) ;", "int length = hex String . length ( ) / NUM_ ;", "char [ ] hex Chars = hex String . to Char Array ( ) ;", "byte [ ] d = new byte [ length ] ;", "for ( int i = NUM_ ; i < length ; i ++ ) {", "int pos = i * NUM_ ;", "d [ i ] = ( byte ) ( char To Byte ( hex Chars [ pos ] ) << NUM_ | char To Byte ( hex Chars [ pos + NUM_ ] ) ) ; }", "return d ; }"]}
{"ids": "16092", "code": ["private void decompose ( List < Object > element Pairs , List < Object > printer List , List < Object > parser List ) {", "int size = element Pairs . size ( ) ;", "for ( int i = NUM_ ; i < size ; i += NUM_ ) {", "Object element = element Pairs . get ( i ) ;", "if ( element instanceof Date Time Printer ) {", "if ( element instanceof Composite ) {", "add Array To List ( printer List , ( ( Composite ) element ) . i Printers ) ; }", "else {", "printer List . add ( element ) ; } }", "element = element Pairs . get ( i + NUM_ ) ;", "if ( element instanceof Date Time Parser ) {", "if ( element instanceof Composite ) {", "add Array To List ( parser List , ( ( Composite ) element ) . i Parsers ) ; }", "else {", "parser List . add ( element ) ; } } } }"]}
{"ids": "47342", "code": ["private String process Integer Token ( String token ) {", "String result = token . replace All ( STR_ + group Separator , STR_ ) ;", "boolean is Negative = false ;", "int pre Len = negative Prefix . length ( ) ;", "if ( ( pre Len > NUM_ ) && result . starts With ( negative Prefix ) ) {", "is Negative = true ;", "result = result . substring ( pre Len ) ; }", "int suf Len = negative Suffix . length ( ) ;", "if ( ( suf Len > NUM_ ) && result . ends With ( negative Suffix ) ) {", "is Negative = true ;", "result = result . substring ( result . length ( ) - suf Len , result . length ( ) ) ; }", "if ( is Negative ) result = STR_ + result ;", "return result ; }"]}
{"ids": "11138", "code": ["public void write Graphics ( String graphics Save File ) throws IO Exception {", "File Output Stream ostream = new File Output Stream ( graphics Save File ) ;", "Object Output Stream objectstream = new Object Output Stream ( ostream ) ;", "write Graphics ( objectstream ) ;", "objectstream . close ( ) ; }"]}
{"ids": "61985", "code": ["@ Override public void add Input Node ( B Node input Node ) {", "super . add Input Node ( input Node ) ; }"]}
{"ids": "16949", "code": ["public void remove Dependency ( Task Dependency dep ) {", "Node src Node = my Node Map . get ( dep . get Dependee ( ) ) ;", "Node dst Node = my Node Map . get ( dep . get Dependant ( ) ) ;", "if ( src Node == null && dst Node == null ) {", "return ; }", "assert ( src Node != null && dst Node != null ) : STR_ + dep + STR_ ;", "Dependency Edge died Edge = find Explicit Dependency ( dep , src Node , dst Node ) ;", "if ( died Edge == null ) {", "return ; }", "remove Edge ( died Edge ) ;", "for ( Dependency Edge edge : Lists . new Array List ( src Node . get Outgoing ( ) ) ) {", "if ( edge instanceof Implicit Inherited Dependency ) {", "if ( ( ( Implicit Inherited Dependency ) edge ) . my Explicit Dep == died Edge ) {", "remove Edge ( edge ) ; } } }", "fire Graph Changed ( ) ; }"]}
{"ids": "28448", "code": ["public static boolean is Extension ( String filename , Collection < String > extensions ) {", "if ( filename == null ) {", "return false ; }", "if ( extensions == null || extensions . is Empty ( ) ) {", "return index Of Extension ( filename ) == - NUM_ ; }", "String file Ext = get Extension ( filename ) ;", "for ( String extension : extensions ) {", "if ( file Ext . equals ( extension ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "22592", "code": ["public VN Xe Command Job modify Consistency Group Async ( String id , Lun Group Modify Param param ) {", "String Builder url Bld = new String Builder ( URL MODIFY 1 ) ;", "url Bld . append ( id ) ;", "url Bld . append ( URL MODIFY 2 ) ;", "url = url Bld . to String ( ) ;", "return post Request Async ( param ) ; }"]}
{"ids": "84158", "code": ["public Object read Remote ( ) throws IO Exception {", "String type = read Type ( ) ;", "String url = read String ( ) ;", "return resolve Remote ( type , url ) ; }"]}
{"ids": "7989", "code": ["private static J Free Chart create Chart ( ) {", "XY Series series 1 = new XY Series ( STR_ ) ;", "series 1 . add ( NUM_ , NUM_ ) ;", "series 1 . add ( NUM_ , NUM_ ) ;", "series 1 . add ( NUM_ , NUM_ ) ;", "XY Dataset dataset = new XY Series Collection ( series 1 ) ;", "return Chart Factory . create Time Series Chart ( STR_ , STR_ , STR_ , dataset , true , true , true ) ; }"]}
{"ids": "18193", "code": ["private void DT Dprolog ( ) throws SAX Exception , IO Exception {", "final java . io . Writer writer = m writer ;", "if ( m need To Output Doc Type Decl ) {", "output Doc Type Decl ( m elem Context . m element Name , false ) ;", "m need To Output Doc Type Decl = false ; }", "if ( m in Doctype ) {", "writer . write ( STR_ ) ;", "writer . write ( m line Sep , NUM_ , m line Sep Len ) ;", "m in Doctype = false ; } }"]}
{"ids": "83022", "code": ["public Cache Set query Sequential ( Predicate ... selectors ) {", "check Not Null ( selectors ) ;", "Collection < Object > result Collection = new Array List < > ( items ) ;", "Collection < Object > filter Collection = new Linked List < > ( ) ;", "Collection < Object > temp Collection ;", "int i = NUM_ ;", "while ( ( i < selectors . length ) && ( result Collection . size ( ) > NUM_ ) ) {", "Collection Utils . select ( result Collection , selectors [ i ] , filter Collection ) ;", "temp Collection = result Collection ;", "result Collection = filter Collection ;", "filter Collection = temp Collection ;", "filter Collection . clear ( ) ;", "i ++ ; }", "return new Cache Set ( result Collection ) ; }"]}
{"ids": "56645", "code": ["public static < A > Set T Value < A > from Stream ( final Any M Value < Stream < A > > monads ) {", "return of ( monads . map ( null ) ) ; }"]}
{"ids": "6958", "code": ["public static CC Bitmap Font Configuration FNT Config Load File ( String fnt File ) {", "CC Bitmap Font Configuration ret = null ;", "if ( configurations == null ) configurations = new Hash Map < String , CC Bitmap Font Configuration > ( ) ;", "ret = configurations . get ( fnt File ) ;", "if ( ret == null ) {", "ret = CC Bitmap Font Configuration . configuration ( fnt File ) ;", "configurations . put ( fnt File , ret ) ; }", "return ret ; }"]}
{"ids": "68218", "code": ["public void add Criteria ( Criteria other Criteria ) {", "if ( other Criteria instanceof Advanced Criteria || other Criteria instanceof Criterion ) {", "throw new Illegal Argument Exception ( STR_ + STR_ ) ; }", "Map other Map = other Criteria . get Values ( ) ;", "Set other Keys = other Map . key Set ( ) ;", "for ( Iterator i = other Keys . iterator ( ) ; i . has Next ( ) ; ) {", "String field = ( String ) i . next ( ) ;", "Object value = other Map . get ( field ) ;", "JSO Helper . set Attribute ( js Obj , field , value ) ; } }"]}
{"ids": "9727", "code": ["public D Netscape Ssl Server Name ( J Dialog parent , byte [ ] value ) throws IO Exception {", "super ( parent ) ;", "set Title ( res . get String ( STR_ ) ) ;", "init Components ( ) ;", "prepopulate With Value ( value ) ; }"]}
{"ids": "7287", "code": ["public static Event Bean [ ] resize Array ( Event Bean [ ] old Array , int new Size ) {", "if ( old Array == null ) {", "return null ; }", "if ( old Array . length == new Size ) {", "return old Array ; }", "Event Bean [ ] new Array = new Event Bean [ new Size ] ;", "int preserve Length = Math . min ( old Array . length , new Size ) ;", "if ( preserve Length > NUM_ ) {", "System . arraycopy ( old Array , NUM_ , new Array , NUM_ , preserve Length ) ; }", "return new Array ; }"]}
{"ids": "16188", "code": ["public static Spannable String span Text ( Char Sequence text , Object ... spans ) {", "Spannable String spannable String = new Spannable String ( text ) ;", "for ( Object span : spans ) {", "spannable String . set Span ( span , NUM_ , text . length ( ) , Spanned . SPAN EXCLUSIVE EXCLUSIVE ) ; }", "return spannable String ; }"]}
{"ids": "59660", "code": ["@ Suppress Warnings ( STR_ ) protected < T > List < T > query ( Class < T > model Class , String [ ] columns , String selection , String [ ] selection Args , String group By , String having , String order By , String limit , List < Associations Info > foreign Key Associations ) {", "List < T > data List = new Array List < T > ( ) ;", "Cursor cursor = null ;", "try {", "List < Field > supported Fields = get Supported Fields ( model Class . get Name ( ) ) ;", "String table Name = get Table Name ( model Class ) ;", "String [ ] customized Columns = get Customized Columns ( columns , foreign Key Associations ) ;", "cursor = m Database . query ( table Name , customized Columns , selection , selection Args , group By , having , order By , limit ) ;", "if ( cursor . move To First ( ) ) {", "Sparse Array < Query Info Cache > query Info Cache Sparse Array = new Sparse Array < Query Info Cache > ( ) ;", "do {", "T model Instance = ( T ) create Instance From Class ( model Class ) ;", "give Base Obj Id Value ( ( Data Support ) model Instance , cursor . get Long ( cursor . get Column Index Or Throw ( STR_ ) ) ) ;", "set Value To Model ( model Instance , supported Fields , foreign Key Associations , cursor , query Info Cache Sparse Array ) ;", "if ( foreign Key Associations != null ) {", "set Associated Model ( ( Data Support ) model Instance ) ; }", "data List . add ( model Instance ) ; }", "while ( cursor . move To Next ( ) ) ;", "query Info Cache Sparse Array . clear ( ) ; }", "return data List ; }", "catch ( Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Data Support Exception ( e . get Message ( ) ) ; }", "finally {", "if ( cursor != null ) {", "cursor . close ( ) ; } } }"]}
{"ids": "30259", "code": ["private MLT Result build Query For Field ( String field Name , Priority Queue < MLT Term > q , Boolean Query query , boolean content Stream Query ) {", "List < MLT Term > interesting Terms = new Array List < MLT Term > ( ) ;", "int qterms = NUM_ ;", "int max Terms = max Query Terms Per Field ;", "if ( max Terms <= NUM_ ) {", "max Terms = Integer . MAX VALUE ; }", "Boolean Query tmp Query = new Boolean Query ( ) ;", "double sum Quared Boost = NUM_ ;", "MLT Term cur ;", "while ( ( cur = q . pop ( ) ) != null ) {", "Query tq = null ;", "final Term term = new Term ( cur . get Field Name ( ) , cur . get Word ( ) ) ;", "if ( is Payload Field ( cur . get Field Name ( ) ) ) {", "tq = new Payload Term Query ( term , new Average Payload Function ( ) , true ) ; }", "else {", "tq = new Term Query ( term ) ; }", "if ( boost ) {", "float boost = cur . get Score ( ) ;", "tq . set Boost ( boost ) ;", "sum Quared Boost += boost * boost ; }", "else {", "sum Quared Boost += NUM_ ; }", "try {", "tmp Query . add ( tq , Boolean Clause . Occur . SHOULD ) ;", "interesting Terms . add ( cur ) ;", "qterms ++ ; }", "catch ( Boolean Query . Too Many Clauses ignore ) {", "break ; }", "if ( qterms >= max Terms ) {", "break ; } }", "double vector Length = Math . sqrt ( sum Quared Boost ) ;", "if ( vector Length <= NUM_ ) {", "return new MLT Result ( interesting Terms , query ) ; }", "build Boosted Normalized Query ( field Name , tmp Query , query , vector Length , content Stream Query ) ;", "return new MLT Result ( interesting Terms , query ) ; }"]}
{"ids": "54115", "code": ["@ Suppress Warnings ( STR_ ) protected void sequentially ( Consumer < Marker > ... functions ) {", "if ( functions == null || functions . length == NUM_ ) return ;", "Collection < Parsing Exception > errors = new Array List < > ( ) ;", "Marker marker = tokens . mark ( ) ;", "for ( Consumer < Marker > function : functions ) {", "try {", "function . accept ( marker ) ;", "return ; }", "catch ( Parsing Exception e ) {", "errors . add ( e ) ;", "tokens . rewind ( marker ) ; } }", "parsing Failed ( marker . position ( ) , errors , STR_ ) ; }"]}
{"ids": "23941", "code": ["public Pid File ( final File file ) throws File Not Found Exception {", "if ( ! file . exists ( ) || ! file . is File ( ) ) {", "throw new File Not Found Exception ( STR_ + file + STR_ ) ; }", "this . pid File = file ; }"]}
{"ids": "7172", "code": ["public void add Child Node ( Exec Node child Node ) {", "child Nodes . add ( child Node ) ; }"]}
{"ids": "9256", "code": ["static private double quick Select ( I Double Vector x , int k , int start , int end ) {", "if ( k < start || k > end ) {", "throw new Ade Core Illegal Argument Exception ( STR_ ) ; }", "final int pivot Index = ( ( int ) Math . random ( ) * ( end - start + NUM_ ) ) + start ;", "final int pivot Position = partition ( x , start , end , pivot Index ) ;", "if ( pivot Position == k ) {", "return x . get ( k ) ; }", "else if ( pivot Position < k ) {", "return quick Select ( x , k , pivot Position + NUM_ , end ) ; }", "else {", "return quick Select ( x , k , start , pivot Position - NUM_ ) ; } }"]}
{"ids": "52200", "code": ["public Bayes Im Editor Obs ( Bayes Im Wrapper Obs bayes Im Wrapper Obs ) {", "this ( bayes Im Wrapper Obs , bayes Im Wrapper Obs . get Bayes Im ( ) ) ; }"]}
{"ids": "79095", "code": ["private List < String > convert Byte Array List To String Value List ( List < byte [ ] > dictionary Byte Array List ) {", "List < String > value List = new Array List < > ( dictionary Byte Array List . size ( ) ) ;", "for ( byte [ ] value : dictionary Byte Array List ) {", "value List . add ( new String ( value , Charset . for Name ( Carbon Common Constants . DEFAULT CHARSET ) ) ) ; }", "return value List ; }"]}
{"ids": "20155", "code": ["public File Tree Node ( File parent , String name ) throws Security Exception , File Not Found Exception {", "this ( parent . to Path ( ) , name ) ; }"]}
{"ids": "52123", "code": ["private List < Node > possible Parents ( Node x , List < Node > adjx , I Knowledge knowledge ) {", "List < Node > possible Parents = new Linked List < > ( ) ;", "String x = x . get Name ( ) ;", "for ( Node z : adjx ) {", "String z = z . get Name ( ) ;", "if ( possible Parent Of ( z , x , knowledge ) ) {", "possible Parents . add ( z ) ; } }", "return possible Parents ; }"]}
{"ids": "29528", "code": ["public synchronized void remove ( Abstract Option option ) {", "if ( options . contains ( option ) ) {", "int position = index Of ( option ) ;", "List < Abstract Option > old Options = new Array List < Abstract Option > ( options ) ;", "options . remove ( option ) ;", "List < Abstract Option > new Options = get Options ( ) ;", "option . set Collection ( null ) ;", "fire Indexed Property Change ( PROP OPTIONS , position , old Options , new Options ) ; } }"]}
{"ids": "6223", "code": ["private float [ ] calculate Pointer Position ( float angle ) {", "float x = ( float ) ( m Color Wheel Radius * Math . cos ( angle ) ) ;", "float y = ( float ) ( m Color Wheel Radius * Math . sin ( angle ) ) ;", "return new float [ ] { x , y } ; }"]}
{"ids": "19963", "code": ["public Resource Node locate ( String session ID , String path , Resource Node start Node ) throws Directory Not Found Exception {", "if ( path == null ) {", "return get Current Node ( session ID ) ; }", "else if ( path . starts With ( PROTOCOL ) ) {", "path = path . substring ( PROTOCOL . length ( ) ) ; }", "else if ( path . starts With ( ROOT ELEMENT ) && path . length ( ) > ROOT ELEMENT . length ( ) ) {", "start Node = get Root Node ( ) ;", "path = path . substring ( ROOT ELEMENT . length ( ) ) ; }", "if ( path . equals ( CURRENT ELEMENT ) ) return get Current Node ( session ID ) ;", "else if ( path . equals ( ROOT ELEMENT ) ) return get Root Node ( ) ;", "Resource Node found Node = null ;", "Resource Node node To Search = start Node ;", "String path Elements [ ] = path . split ( PATH SEPARATOR ) ;", "if ( path Elements . length == NUM_ ) {", "return get Root Node ( ) ; }", "for ( String element : path Elements ) {", "if ( element . length ( ) == NUM_ ) continue ;", "if ( element . equals ( PARENT ELEMENT ) ) {", "if ( ( found Node = node To Search . get Parent ( ) ) != null ) {", "node To Search = node To Search . get Parent ( ) ; }", "else {", "throw new Directory Not Found Exception ( String . format ( STR_ , path ) ) ; } }", "else {", "Map < String , Resource Node > children = node To Search . get Children ( ) ;", "if ( element . equals ( ANY ELEMENT ) ) {", "if ( node To Search . get Type ( ) == Resource Type . CLUSTER ) {", "found Node = children . get ( member Name ) ; }", "else if ( children . size ( ) > NUM_ ) {", "found Node = get First ( children ) ; }", "else {", "throw new Directory Not Found Exception ( String . format ( STR_ , element , path ) ) ; } }", "else {", "found Node = children . get ( element ) ; }", "if ( found Node == null ) {", "throw new Directory Not Found Exception ( String . format ( STR_ , element , format Path ( get Absolute Path ( get Root Node ( ) , node To Search , true ) , true ) , path ) ) ; }", "node To Search = found Node ; } }", "return found Node ; }"]}
{"ids": "76132", "code": ["private void handle Process Error ( Job Definition job , Process process ) throws IO Exception {", "String Buffer sb = new String Buffer ( ) ;", "Buffered Reader in = new Buffered Reader ( new Input Stream Reader ( process . get Input Stream ( ) ) ) ;", "int data = NUM_ ;", "while ( data != - NUM_ && ! is Interrupted ( ) ) {", "data = in . read ( ) ;", "if ( data != - NUM_ ) {", "sb . append ( ( char ) data ) ; } }", "logger . warn ( STR_ + job . cut + STR_ + sb . to String ( ) ) ; }"]}
{"ids": "2413", "code": ["private void check Class And Sync ( Class < ? extends I Packet > clazz ) {", "if ( ! registered Classes . contains ( clazz ) ) {", "throw new Runtime Exception ( STR_ + clazz + STR_ ) ; }", "while ( is Currently Sending Semaphor ) {", "Thread . yield ( ) ; }", "is Currently Sending Semaphor = true ; }"]}
{"ids": "81002", "code": ["private static int calculate Displayed Width ( String string ) {", "final int tab Width = DEFAULT TAB WIDTH ;", "int column = NUM_ ;", "for ( int i = NUM_ ; i < string . length ( ) ; i ++ ) {", "if ( STR_ == string . char At ( i ) ) {", "column += tab Width - ( column % tab Width ) ; }", "else {", "column ++ ; } }", "return column ; }"]}
{"ids": "71897", "code": ["private static Generalized Time finish Decoding Fraction ( final String value , final int start Pos , final int year , final int month , final int day , final int hour , final int minute , final int second , final int multiplier ) {", "final int length = value . length ( ) ;", "final String Builder fraction Buffer = new String Builder ( ( NUM_ + length ) - start Pos ) ;", "fraction Buffer . append ( STR_ ) ;", "Time Zone time Zone = null ;", "outer Loop : for ( int i = start Pos ; i < length ; i ++ ) {", "final char c = value . char At ( i ) ;", "switch ( c ) {", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "case STR_ :", "fraction Buffer . append ( c ) ;", "break ;", "case STR_ :", "case STR_ :", "if ( i != ( value . length ( ) - NUM_ ) ) {", "final Localizable Message message = WARN ATTR SYNTAX GENERALIZED TIME ILLEGAL FRACTION CHAR . get ( value , String . value Of ( c ) ) ;", "throw new Localized Illegal Argument Exception ( message ) ; }", "time Zone = TIME ZONE UTC OBJ ;", "break outer Loop ;", "case STR_ :", "case STR_ :", "time Zone = get Time Zone For Offset ( value , i ) ;", "break outer Loop ;", "default :", "final Localizable Message message = WARN ATTR SYNTAX GENERALIZED TIME ILLEGAL FRACTION CHAR . get ( value , String . value Of ( c ) ) ;", "throw new Localized Illegal Argument Exception ( message ) ; } }", "if ( fraction Buffer . length ( ) == NUM_ ) {", "final Localizable Message message = WARN ATTR SYNTAX GENERALIZED TIME EMPTY FRACTION . get ( value ) ;", "throw new Localized Illegal Argument Exception ( message ) ; }", "if ( time Zone == null ) {", "final Localizable Message message = WARN ATTR SYNTAX GENERALIZED TIME NO TIME ZONE INFO . get ( value ) ;", "throw new Localized Illegal Argument Exception ( message ) ; }", "final Double fraction Value = Double . parse Double ( fraction Buffer . to String ( ) ) ;", "final int additional Milliseconds = ( int ) Math . round ( fraction Value * multiplier ) ;", "try {", "final Gregorian Calendar calendar = new Gregorian Calendar ( ) ;", "calendar . set Lenient ( false ) ;", "calendar . set Time Zone ( time Zone ) ;", "calendar . set ( year , month , day , hour , minute , second ) ;", "calendar . set ( Calendar . MILLISECOND , additional Milliseconds ) ;", "return new Generalized Time ( calendar , null , Long . MIN VALUE , value ) ; }", "catch ( final Exception e ) {", "final Localizable Message message = WARN ATTR SYNTAX GENERALIZED TIME ILLEGAL TIME . get ( value , String . value Of ( e ) ) ;", "throw new Localized Illegal Argument Exception ( message , e ) ; } }"]}
{"ids": "64176", "code": ["@ Override public int read ( ) {", "if ( idx >= char Sequence . length ( ) ) {", "return - NUM_ ; }", "else {", "return char Sequence . char At ( idx ++ ) ; } }"]}
{"ids": "74581", "code": ["public static void println ( char x ) {", "out . println ( x ) ; }"]}
{"ids": "56148", "code": ["private boolean should Position Avatar On Right ( ) {", "final boolean is Rtl = Build . VERSION . SDK INT >= Build . VERSION CODES . JELLY BEAN MR 1 ? get Layout Direction ( ) == LAYOUT DIRECTION RTL : false ;", "final boolean assigned Position = m Avatar Position == AVATAR POSITION END ;", "return is Rtl ? ! assigned Position : assigned Position ; }"]}
{"ids": "45733", "code": ["public static void fail ( String message ) {", "throw new Illegal State Exception ( message == null ? STR_ : message ) ; }"]}
{"ids": "1737", "code": ["public void memset Buffer ( Byte Buffer buffer ) {", "memset Buffer ( buffer , buffer . limit ( ) ) ; }"]}
{"ids": "50264", "code": ["static double fabs ( double a ) {", "return Math . abs ( a ) ; }"]}
{"ids": "84456", "code": ["public final Char Sequence Translator with ( final Char Sequence Translator ... translators ) {", "final Char Sequence Translator [ ] new Array = new Char Sequence Translator [ translators . length + NUM_ ] ;", "new Array [ NUM_ ] = this ;", "System . arraycopy ( translators , NUM_ , new Array , NUM_ , translators . length ) ;", "return new Aggregate Translator ( new Array ) ; }"]}
{"ids": "266", "code": ["@ Override public boolean equals ( Object other ) {", "if ( ! ( other instanceof Sha 256 Hash ) ) return false ;", "return Arrays . equals ( bytes , ( ( Sha 256 Hash ) other ) . bytes ) ; }"]}
{"ids": "40652", "code": ["public Config ( Solr Resource Loader loader , String name ) throws Parser Configuration Exception , IO Exception , SAX Exception {", "this ( loader , name , null , null ) ; }"]}
{"ids": "26170", "code": ["private static Hash Map < String , Field > build Field Cache ( Class < ? > cls ) {", "final Hash Map < String , Field > cache = new Hash Map < > ( ) ;", "final List < Field > fields = get All Fields ( cls ) ;", "for ( Field fld : fields ) {", "String name = null ;", "final Reference ref Ann = fld . get Annotation ( Reference . class ) ;", "if ( ref Ann != null ) name = select Column Name ( ref Ann , fld ) ;", "if ( name == null ) {", "final Column col Ann = fld . get Annotation ( Column . class ) ;", "if ( col Ann != null ) name = select Column Name ( col Ann , fld ) ; }", "if ( name == null ) continue ;", "cache . put ( name , fld ) ; }", "return cache ; }"]}
{"ids": "34242", "code": ["public static long convert Duration ( final String from Unit , final String to Unit , long value ) {", "Time Unit from Time Unit = to Time Unit ( from Unit ) ;", "Time Unit to Time Unit = to Time Unit ( to Unit ) ;", "if ( from Time Unit != null && to Time Unit != null ) {", "return to Time Unit . convert ( value , from Time Unit ) ; }", "else {", "throw new DSS Exception ( STR_ + from Unit + STR_ + to Unit + STR_ + value + STR_ ) ; } }"]}
{"ids": "8343", "code": ["public static File search For Groovy Script File ( String input ) {", "String script File Name = input . trim ( ) ;", "File script File = new File ( script File Name ) ;", "String [ ] standard Extensions = { STR_ , STR_ , STR_ , STR_ } ;", "int i = NUM_ ;", "while ( i < standard Extensions . length && ! script File . exists ( ) ) {", "script File = new File ( script File Name + standard Extensions [ i ] ) ;", "i ++ ; }", "if ( ! script File . exists ( ) ) {", "script File = new File ( script File Name ) ; }", "return script File ; }"]}
{"ids": "18165", "code": ["public X Object execute ( X Path Context xctxt ) throws javax . xml . transform . Transformer Exception {", "if ( xctxt . is Secure Processing ( ) ) throw new javax . xml . transform . Transformer Exception ( XPATH Messages . create XPATH Message ( XPATH Error Resources . ER EXTENSION FUNCTION CANNOT BE INVOKED , new Object [ ] { to String ( ) } ) ) ;", "X Object result ;", "Vector arg Vec = new Vector ( ) ;", "int n Args = m arg Vec . size ( ) ;", "for ( int i = NUM_ ; i < n Args ; i ++ ) {", "Expression arg = ( Expression ) m arg Vec . element At ( i ) ;", "X Object xobj = arg . execute ( xctxt ) ;", "xobj . allow Detach To Release ( false ) ;", "arg Vec . add Element ( xobj ) ; }", "Extensions Provider ext Provider = ( Extensions Provider ) xctxt . get Owner Object ( ) ;", "Object val = ext Provider . ext Function ( this , arg Vec ) ;", "if ( null != val ) {", "result = X Object . create ( val , xctxt ) ; }", "else {", "result = new X Null ( ) ; }", "return result ; }"]}
{"ids": "32896", "code": ["public Picture ( File file ) {", "try {", "image = Image IO . read ( file ) ; }", "catch ( IO Exception e ) {", "e . print Stack Trace ( ) ;", "throw new Runtime Exception ( STR_ + file ) ; }", "if ( image == null ) {", "throw new Runtime Exception ( STR_ + file ) ; }", "width = image . get Width ( null ) ;", "height = image . get Height ( null ) ;", "filename = file . get Name ( ) ; }"]}
{"ids": "56236", "code": ["static Annotation Strategy strategy For ( Annotation annotation ) {", "check Not Null ( annotation , STR_ ) ;", "Class < ? extends Annotation > annotation Type = annotation . annotation Type ( ) ;", "ensure Retained At Runtime ( annotation Type ) ;", "ensure Is Binding Annotation ( annotation Type ) ;", "if ( annotation Type . get Declared Methods ( ) . length == NUM_ ) {", "return new Annotation Type Strategy ( annotation Type , annotation ) ; }", "return new Annotation Instance Strategy ( annotation ) ; }"]}
{"ids": "22110", "code": ["private void add Volume To Block Consistency Group ( URI cg Uri , Volume volume ) {", "volume . add Consistency Group ( cg Uri . to String ( ) ) ;", "db Client . persist Object ( volume ) ; }"]}
{"ids": "69258", "code": ["public static boolean lazy Gaussian Elimination ( final int var 2 Eq [ ] [ ] , final long [ ] c , final int [ ] variable , final long [ ] solution ) {", "return lazy Gaussian Elimination ( null , var 2 Eq , c , variable , solution ) ; }"]}
{"ids": "61335", "code": ["private static int analyze ( Compiler compiler , int step Op Code Pos , int step Index ) throws javax . xml . transform . Transformer Exception {", "int step Type ;", "int step Count = NUM_ ;", "int analysis Result = NUM_ ;", "while ( Op Codes . ENDOP != ( step Type = compiler . get Op ( step Op Code Pos ) ) ) {", "step Count ++ ;", "boolean pred Analysis = analyze Predicate ( compiler , step Op Code Pos , step Type ) ;", "if ( pred Analysis ) analysis Result |= BIT PREDICATE ;", "switch ( step Type ) {", "case Op Codes . OP VARIABLE :", "case Op Codes . OP EXTFUNCTION :", "case Op Codes . OP FUNCTION :", "case Op Codes . OP GROUP :", "analysis Result |= BIT FILTER ;", "break ;", "case Op Codes . FROM ROOT :", "analysis Result |= BIT ROOT ;", "break ;", "case Op Codes . FROM ANCESTORS :", "analysis Result |= BIT ANCESTOR ;", "break ;", "case Op Codes . FROM ANCESTORS OR SELF :", "analysis Result |= BIT ANCESTOR OR SELF ;", "break ;", "case Op Codes . FROM ATTRIBUTES :", "analysis Result |= BIT ATTRIBUTE ;", "break ;", "case Op Codes . FROM NAMESPACE :", "analysis Result |= BIT NAMESPACE ;", "break ;", "case Op Codes . FROM CHILDREN :", "analysis Result |= BIT CHILD ;", "break ;", "case Op Codes . FROM DESCENDANTS :", "analysis Result |= BIT DESCENDANT ;", "break ;", "case Op Codes . FROM DESCENDANTS OR SELF :", "if ( NUM_ == step Count && BIT ROOT == analysis Result ) {", "analysis Result |= BIT ANY DESCENDANT FROM ROOT ; }", "analysis Result |= BIT DESCENDANT OR SELF ;", "break ;", "case Op Codes . FROM FOLLOWING :", "analysis Result |= BIT FOLLOWING ;", "break ;", "case Op Codes . FROM FOLLOWING SIBLINGS :", "analysis Result |= BIT FOLLOWING SIBLING ;", "break ;", "case Op Codes . FROM PRECEDING :", "analysis Result |= BIT PRECEDING ;", "break ;", "case Op Codes . FROM PRECEDING SIBLINGS :", "analysis Result |= BIT PRECEDING SIBLING ;", "break ;", "case Op Codes . FROM PARENT :", "analysis Result |= BIT PARENT ;", "break ;", "case Op Codes . FROM SELF :", "analysis Result |= BIT SELF ;", "break ;", "case Op Codes . MATCH ATTRIBUTE :", "analysis Result |= ( BIT MATCH PATTERN | BIT ATTRIBUTE ) ;", "break ;", "case Op Codes . MATCH ANY ANCESTOR :", "analysis Result |= ( BIT MATCH PATTERN | BIT ANCESTOR ) ;", "break ;", "case Op Codes . MATCH IMMEDIATE ANCESTOR :", "analysis Result |= ( BIT MATCH PATTERN | BIT PARENT ) ;", "break ;", "default :", "throw new Runtime Exception ( XSL Messages . create XPATH Message ( XPATH Error Resources . ER NULL ERROR HANDLER , new Object [ ] { Integer . to String ( step Type ) } ) ) ; }", "if ( Op Codes . NODETYPE NODE == compiler . get Op ( step Op Code Pos + NUM_ ) ) {", "analysis Result |= BIT NODETEST ANY ; }", "step Op Code Pos = compiler . get Next Step Pos ( step Op Code Pos ) ;", "if ( step Op Code Pos < NUM_ ) break ; }", "analysis Result |= ( step Count & BITS COUNT ) ;", "return analysis Result ; }"]}
{"ids": "79038", "code": ["public void compress My Own Way ( int [ ] indexes ) {", "List < Integer > list = new Array List < Integer > ( Carbon Common Constants . CONSTANT SIZE TEN ) ;", "List < Integer > map = new Array List < Integer > ( Carbon Common Constants . CONSTANT SIZE TEN ) ;", "int k = NUM_ ;", "int i = NUM_ ;", "for ( ; i < indexes . length ; i ++ ) {", "if ( indexes [ i ] - indexes [ i - NUM_ ] == NUM_ ) {", "k ++ ; }", "else {", "if ( k > NUM_ ) {", "map . add ( ( list . size ( ) ) ) ;", "list . add ( indexes [ i - k - NUM_ ] ) ;", "list . add ( indexes [ i - NUM_ ] ) ; }", "else {", "list . add ( indexes [ i - NUM_ ] ) ; }", "k = NUM_ ; } }", "if ( k > NUM_ ) {", "map . add ( ( list . size ( ) ) ) ;", "list . add ( indexes [ i - k - NUM_ ] ) ;", "list . add ( indexes [ i - NUM_ ] ) ; }", "else {", "list . add ( indexes [ i - NUM_ ] ) ; }", "data After Comp = convert To Array ( list ) ;", "if ( indexes . length == data After Comp . length ) {", "index Map = new int [ NUM_ ] ; }", "else {", "index Map = convert To Array ( map ) ; }", "if ( data After Comp . length == NUM_ && index Map . length == NUM_ ) {", "already Sorted = true ; } }"]}
{"ids": "42518", "code": ["private void prepend Decrement ( Basic Block bb , IR ir ) {", "if ( DEBUG ) VM . sys Write ( STR_ + bb + STR_ ) ;", "Register Operand use = cbs Reg . copy RO ( ) ;", "Register Operand def = use . copy U 2 D ( ) ;", "Instruction inc = Binary . create ( INT ADD , def , use , IR Tools . IC ( - NUM_ ) ) ;", "bb . prepend Instruction ( inc ) ; }"]}
{"ids": "53905", "code": ["public void add Listener ( Connectable Device Listener listener ) {", "if ( ! listeners . contains ( listener ) ) {", "listeners . add ( listener ) ; } }"]}
{"ids": "80106", "code": ["private static final String to Hex String ( final byte [ ] bs ) {", "String hex = STR_ ;", "String Builder res = new String Builder ( ) ;", "for ( byte b : bs ) {", "res . append ( hex . char At ( ( ( b > > > NUM_ ) & NUM_ ) ) ) ;", "res . append ( hex . char At ( ( b & NUM_ ) ) ) ; }", "return res . to String ( ) ; }"]}
{"ids": "26016", "code": ["public synchronized void flush ( ) throws IO Exception {", "check Not Closed ( ) ;", "trim To Size ( ) ;", "journal Writer . flush ( ) ; }"]}
{"ids": "5055", "code": ["public double distance to the left ( Pla Line Int p line ) {", "double result = Integer . MAX VALUE ;", "for ( int index = NUM_ ; index < border line count ( ) ; ++ index ) {", "Pla Point Float curr corner = corner approx ( index ) ;", "Pla Side line side = p line . side of ( curr corner , NUM_ ) ;", "if ( line side == Pla Side . COLLINEAR ) {", "line side = p line . side of ( corner ( index ) ) ; }", "if ( line side == Pla Side . ON THE RIGHT ) return - NUM_ ;", "result = Math . min ( result , p line . distance signed ( curr corner ) ) ; }", "return result ; }"]}
{"ids": "20039", "code": ["public boolean display Topic From Names ( String [ ] names ) {", "if ( names . length == NUM_ ) return display Topic ( DEFAULT ) ;", "else {", "String Buffer help Name = new String Buffer ( ) ;", "for ( String name : names ) {", "if ( help Name . length ( ) > NUM_ ) help Name . append ( STR_ ) ;", "help Name . append ( name ) ; }", "return display Topic ( help Name . to String ( ) ) ; } }"]}
{"ids": "75906", "code": ["public boolean accept Identical ( String file Path , String file Name ) {", "if ( file Name Glob == null ) return false ;", "if ( file Name != null && file Name . equals Ignore Case ( file Name Glob ) ) return true ;", "if ( file Path != null ) {", "int last Unix Pos = file Path . last Index Of ( STR_ ) ;", "int last Windows Pos = file Path . last Index Of ( STR_ ) ;", "int index = Math . max ( last Unix Pos , last Windows Pos ) ;", "String filename = file Path . substring ( index + NUM_ ) ;", "return filename != null && filename . equals Ignore Case ( file Name Glob ) ; }", "return false ; }"]}
{"ids": "25898", "code": ["private void validate Num Cores Block Sort ( ) {", "String num Cores Str = carbon Properties . get Property ( Carbon Common Constants . NUM CORES BLOCK SORT , Carbon Common Constants . NUM CORES BLOCK SORT DEFAULT VAL ) ;", "try {", "int num Cores = Integer . parse Int ( num Cores Str ) ;", "if ( num Cores < Carbon Common Constants . NUM CORES BLOCK SORT MIN VAL || num Cores > Carbon Common Constants . NUM CORES BLOCK SORT MAX VAL ) {", "LOGGER . info ( STR_ + num Cores Str + STR_ + Carbon Common Constants . NUM CORES BLOCK SORT DEFAULT VAL ) ;", "carbon Properties . set Property ( Carbon Common Constants . NUM CORES BLOCK SORT , Carbon Common Constants . NUM CORES BLOCK SORT DEFAULT VAL ) ; } }", "catch ( Number Format Exception e ) {", "LOGGER . info ( STR_ + num Cores Str + STR_ + Carbon Common Constants . NUM CORES BLOCK SORT DEFAULT VAL ) ;", "carbon Properties . set Property ( Carbon Common Constants . NUM CORES BLOCK SORT , Carbon Common Constants . NUM CORES BLOCK SORT DEFAULT VAL ) ; } }"]}
{"ids": "86209", "code": ["public static Memory Match Fragment new Instance ( ) {", "return new Memory Match Fragment ( ) ; }"]}
{"ids": "1290", "code": ["static void create File From Resource ( String resource , Resource file ) throws IO Exception {", "create File From Resource ( resource , file , null ) ; }"]}
{"ids": "451", "code": ["public int end Object ( ) {", "if ( vtable == null || ! nested ) throw new Assertion Error ( STR_ ) ;", "add Int ( NUM_ ) ;", "int vtableloc = offset ( ) ;", "for ( int i = vtable in use - NUM_ ; i >= NUM_ ; i -- ) {", "short off = ( short ) ( vtable [ i ] != NUM_ ? vtableloc - vtable [ i ] : NUM_ ) ;", "add Short ( off ) ; }", "final int standard fields = NUM_ ;", "add Short ( ( short ) ( vtableloc - object start ) ) ;", "add Short ( ( short ) ( ( vtable in use + standard fields ) * SIZEOF SHORT ) ) ;", "int existing vtable = NUM_ ;", "outer loop : for ( int i = NUM_ ; i < num vtables ; i ++ ) {", "int vt 1 = bb . capacity ( ) - vtables [ i ] ;", "int vt 2 = space ;", "short len = bb . get Short ( vt 1 ) ;", "if ( len == bb . get Short ( vt 2 ) ) {", "for ( int j = SIZEOF SHORT ; j < len ; j += SIZEOF SHORT ) {", "if ( bb . get Short ( vt 1 + j ) != bb . get Short ( vt 2 + j ) ) {", "continue outer loop ; } }", "existing vtable = vtables [ i ] ;", "break outer loop ; } }", "if ( existing vtable != NUM_ ) {", "space = bb . capacity ( ) - vtableloc ;", "bb . put Int ( space , existing vtable - vtableloc ) ; }", "else {", "if ( num vtables == vtables . length ) vtables = Arrays . copy Of ( vtables , num vtables * NUM_ ) ;", "vtables [ num vtables ++ ] = offset ( ) ;", "bb . put Int ( bb . capacity ( ) - vtableloc , offset ( ) - vtableloc ) ; }", "nested = false ;", "return vtableloc ; }"]}
{"ids": "1548", "code": ["public static void perspective M ( double [ ] m , int offset , double fovy , double aspect , double z Near , double z Far ) {", "double f = NUM_ / Math . tan ( fovy * ( Math . PI / NUM_ ) ) ;", "double range Reciprocal = NUM_ / ( z Near - z Far ) ;", "m [ offset + NUM_ ] = f / aspect ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = f ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = ( z Far + z Near ) * range Reciprocal ;", "m [ offset + NUM_ ] = - NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ ;", "m [ offset + NUM_ ] = NUM_ * z Far * z Near * range Reciprocal ;", "m [ offset + NUM_ ] = NUM_ ; }"]}
{"ids": "36280", "code": ["protected double compute ( String value ) {", "if ( value != null ) {", "try {", "return Double . parse Double ( value ) ; }", "catch ( Number Format Exception e ) {", "if ( POSITIVE INFINITY STRING . equals ( value ) ) {", "return Double . POSITIVE INFINITY ; }", "else if ( NEGATIVE INFINITY STRING . equals ( value ) ) {", "return Double . NEGATIVE INFINITY ; }", "return Double . Na N ; } }", "return Double . Na N ; }"]}
{"ids": "33555", "code": ["protected int read Block ( ) {", "block Size = read ( ) ;", "int n = NUM_ ;", "if ( block Size > NUM_ ) {", "try {", "int count = NUM_ ;", "while ( n < block Size ) {", "count = in . read ( block , n , block Size - n ) ;", "if ( count == - NUM_ ) break ;", "n += count ; } }", "catch ( IO Exception e ) { }", "if ( n < block Size ) {", "status = STATUS FORMAT ERROR ; } }", "return n ; }"]}
{"ids": "36020", "code": ["boolean is Duplicate Role Column ( int column ) {", "return duplicate Role Column . contains ( column ) ; }"]}
{"ids": "50459", "code": ["public Timestamp Speechlet Request Verifier ( long tolerance , Time Unit unit ) {", "if ( tolerance < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "tolerance In Milliseconds = unit . to Millis ( tolerance ) ; }"]}
{"ids": "1785", "code": ["public void shutdown ( ) {", "Count Down Latch wait l ;", "synchronized ( this ) {", "wait l = wait Shutdown ; }", "Shutdown ind = true ;", "try {", "if ( wait l != null ) {", "if ( wait l . await ( NUM_ , Time Unit . MILLISECONDS ) ) LOG . info ( STR_ ) ;", "else LOG . warn ( STR_ ) ; }", "else {", "LOG . info ( STR_ ) ; } }", "catch ( Interrupted Exception int exc ) {", "LOG . warn ( STR_ ) ; } }"]}
{"ids": "46544", "code": ["void paint Strokes ( Rectangle r , Graphics g , int axis , int [ ] length Pattern , Color [ ] color Pattern ) {", "boolean x Axis = ( axis == View . X AXIS ) ;", "int start = NUM_ ;", "int end = ( x Axis ? r . width : r . height ) ;", "while ( start < end ) {", "for ( int i = NUM_ ; i < length Pattern . length ; i ++ ) {", "if ( start >= end ) {", "break ; }", "int length = length Pattern [ i ] ;", "Color c = color Pattern [ i ] ;", "if ( c != null ) {", "int x = r . x + ( x Axis ? start : NUM_ ) ;", "int y = r . y + ( x Axis ? NUM_ : start ) ;", "int width = x Axis ? length : r . width ;", "int height = x Axis ? r . height : length ;", "g . set Color ( c ) ;", "g . fill Rect ( x , y , width , height ) ; }", "start += length ; } } }"]}
{"ids": "53008", "code": ["private void delete Children ( Element container ) {", "while ( container . has Child Nodes ( ) ) {", "container . remove Child ( container . get Last Child ( ) ) ; } }"]}
{"ids": "41442", "code": ["public String fill Param With Event Attrib ( String param Data , Event event ) {", "if ( ! database . is Open ( ) ) {", "throw new Illegal State Exception ( TAG + STR_ ) ; }", "String Builder ret Val = new String Builder ( ) ;", "int cursor = NUM_ ;", "while ( cursor < param Data . length ( ) ) {", "int open Bracket Idx = param Data . index Of ( STR_ , cursor ) ;", "int close Bracket Idx = param Data . index Of ( STR_ , cursor ) ;", "if ( open Bracket Idx == - NUM_ || close Bracket Idx == - NUM_ || open Bracket Idx + NUM_ >= close Bracket Idx ) {", "ret Val . append ( param Data . substring ( cursor ) ) ;", "break ; }", "String attr = param Data . substring ( open Bracket Idx + NUM_ , close Bracket Idx ) ;", "String param = param Data . substring ( open Bracket Idx , close Bracket Idx + NUM_ ) ;", "String param Attr ;", "try {", "param Attr = event . get Attribute ( attr ) ; }", "catch ( Illegal Argument Exception e ) {", "param Attr = param ; }", "ret Val . append ( param Data . substring ( cursor , open Bracket Idx ) ) ;", "ret Val . append ( param Attr ) ;", "cursor = close Bracket Idx + NUM_ ; }", "Log . d ( STR_ , param Data + STR_ + ret Val . to String ( ) ) ;", "return ret Val . to String ( ) ; }"]}
{"ids": "9433", "code": ["public static double two Pow ( int power ) {", "if ( power <= - MAX DOUBLE EXPONENT ) {", "if ( power >= MIN DOUBLE EXPONENT ) {", "return Double . long Bits To Double ( NUM_ > > ( - ( power + MAX DOUBLE EXPONENT ) ) ) ; }", "else {", "return NUM_ ; } }", "else if ( power > MAX DOUBLE EXPONENT ) {", "return Double . POSITIVE INFINITY ; }", "else {", "return Double . long Bits To Double ( ( ( long ) ( power + MAX DOUBLE EXPONENT ) ) << NUM_ ) ; } }"]}
{"ids": "75488", "code": ["@ Suppress Warnings ( STR_ ) public static Type resolve Type Variable ( Type Variable name , Class declaring Class , Class top Class ) {", "Type type = resolve Type Variable ( name , declaring Class , new Hash Map < > ( ) , top Class ) ;", "if ( type == null ) {", "type = Object . class ; }", "return type ; }"]}
{"ids": "72889", "code": ["private Resource Impl aggregate ( Resource Impl resource A , Resource Impl resource B ) throws Not Found Exception {", "final String type Id = resource A . get Type ( ) ;", "final Resource Type resource Type = get Resource Type ( type Id ) ;", "return resource Type . aggregate ( resource A , resource B ) ; }"]}
{"ids": "52660", "code": ["public static boolean rename File ( String file Path , String old Filename , String new Filename ) {", "if ( ( file Path == null ) || file Path . is Empty ( ) || ( old Filename == null ) || old Filename . is Empty ( ) || ( new Filename == null ) || new Filename . is Empty ( ) ) {", "return false ; }", "File old File = new File ( file Path + File . separator + old Filename ) ;", "File new File = new File ( file Path + File . separator + new Filename ) ;", "boolean is Successful Rename ;", "try {", "is Successful Rename = old File . rename To ( new File ) ; }", "catch ( Exception e ) {", "logger . debug ( e . to String ( ) + System . line Separator ( ) + Stack Trace . get String From Stack Trace ( e ) ) ;", "is Successful Rename = false ; }", "return is Successful Rename ; }"]}
{"ids": "59949", "code": ["@ Rpc Method public void start Image Scan ( String data Store , Long scan Rate , Long timeout , Async Method Callback < Host . Async Client . start image scan call > handler ) throws Rpc Exception {", "ensure Client ( ) ;", "Start Image Scan Request request = new Start Image Scan Request ( data Store ) ;", "if ( null != scan Rate ) {", "request . set Scan rate ( scan Rate ) ; }", "if ( null != timeout ) {", "request . set Timeout ( timeout ) ; }", "try {", "logger . info ( STR_ , get Host Ip ( ) , request ) ;", "client Proxy . set Timeout ( START IMAGE SCAN TIMEOUT MS ) ;", "client Proxy . start image scan ( request , handler ) ; }", "catch ( T Exception e ) {", "throw new Rpc Exception ( e . get Message ( ) ) ; } }"]}
{"ids": "76708", "code": ["public static String format ( int n , String col ) {", "String res = padd + n ;", "return res . substring ( res . length ( ) - col . length ( ) ) ; }"]}
{"ids": "32954", "code": ["public Git Conflict Exception ( String message ) {", "super ( message ) ; }"]}
{"ids": "40023", "code": ["private void trace ( ) {", "gl Use Program ( photon Trace Program ) ;", "long this Time = System . nano Time ( ) ;", "float elapsed Seconds = ( this Time - first Time ) / NUM_ ;", "gl Uniform 1 f ( time Uniform , elapsed Seconds ) ;", "gl Bind Buffer Base ( GL SHADER STORAGE BUFFER , boxes Ssbo Binding , ssbo ) ;", "gl Bind Buffer Base ( GL UNIFORM BUFFER , images Ubo Binding , image Handles Ubo ) ;", "int invocations Per Dimension = photons Per Frame ;", "int worksize X = math Round Po T ( invocations Per Dimension ) ;", "int worksize Y = math Round Po T ( invocations Per Dimension ) ;", "if ( variable Group Size ) {", "ARB Compute Variable Group Size . gl Dispatch Compute Group Size ARB ( worksize X / work Group Size X , worksize Y / work Group Size Y , NUM_ , work Group Size X , work Group Size Y , NUM_ ) ; }", "else {", "gl Dispatch Compute ( worksize X / work Group Size X , worksize Y / work Group Size Y , NUM_ ) ; }", "gl Memory Barrier ( GL SHADER IMAGE ACCESS BARRIER BIT ) ;", "gl Bind Buffer Base ( GL SHADER STORAGE BUFFER , boxes Ssbo Binding , NUM_ ) ;", "gl Bind Buffer Base ( GL UNIFORM BUFFER , images Ubo Binding , NUM_ ) ;", "gl Use Program ( NUM_ ) ; }"]}
{"ids": "66468", "code": ["public caption add Element ( String element ) {", "add Element To Registry ( Integer . to String ( element . hash Code ( ) ) , element ) ;", "return ( this ) ; }"]}
{"ids": "74122", "code": ["protected void do Reset Current Position ( ) {", "this . current Position = this . position ; }"]}
{"ids": "51423", "code": ["public Float Buffer put ( float [ ] src , int src Offset , int float Count ) {", "J Transc Arrays . check Offset And Count ( src . length , src Offset , float Count ) ;", "if ( float Count > remaining ( ) ) {", "throw new Buffer Overflow Exception ( ) ; }", "for ( int i = src Offset ; i < src Offset + float Count ; ++ i ) {", "put ( src [ i ] ) ; }", "return this ; }"]}
{"ids": "74602", "code": ["public String read Line ( ) {", "String line ;", "try {", "line = scanner . next Line ( ) ; }", "catch ( No Such Element Exception e ) {", "line = null ; }", "return line ; }"]}
{"ids": "80136", "code": ["private boolean message Changed ( String old Message , String new Message ) {", "return ( ( new Message == null ) && ( old Message != null ) ) || ( ( new Message != null ) && ! new Message . equals ( old Message ) ) ; }"]}
{"ids": "71065", "code": ["private Multi Line String read Multi Line ( Ora Geom ora Geom ) {", "int n Elem = ora Geom . num Elements ( ) ;", "List geoms = new Array List ( ) ;", "for ( int i = NUM_ ; i < n Elem ; i ++ ) {", "int etype = ora Geom . e Type ( i ) ;", "if ( etype != Ora Geom . ETYPE . LINE ) break ;", "geoms . add ( read Line ( ora Geom , i ) ) ; }", "Multi Line String lines = geometry Factory . create Multi Line String ( Geometry Factory . to Line String Array ( geoms ) ) ;", "return lines ; }"]}
{"ids": "77184", "code": ["public Explanation idf Explain ( Collection Statistics collection Stats , Term Statistics term Stats [ ] ) {", "final long doc Count = collection Stats . doc Count ( ) == - NUM_ ? collection Stats . max Doc ( ) : collection Stats . doc Count ( ) ;", "float idf = NUM_ ;", "List < Explanation > details = new Array List < > ( ) ;", "for ( final Term Statistics stat : term Stats ) {", "final long df = stat . doc Freq ( ) ;", "final float term Idf = idf ( df , doc Count ) ;", "details . add ( Explanation . match ( term Idf , STR_ + df + STR_ + doc Count + STR_ ) ) ;", "idf += term Idf ; }", "return Explanation . match ( idf , STR_ , details ) ; }"]}
{"ids": "29954", "code": ["public void remove Area ( final Section AREA ) {", "if ( null == AREA ) return ;", "areas . remove ( AREA ) ;", "Collections . sort ( areas , new Section Comparator ( ) ) ;", "fire Update Event ( SECTION EVENT ) ; }"]}
{"ids": "83544", "code": ["@ Suppress Warnings ( STR_ ) public void connect ( final Bluetooth Device device , final I Log Session session ) {", "if ( m Managed Devices . contains ( device ) ) return ;", "m Managed Devices . add ( device ) ;", "Ble Manager < Ble Manager Callbacks > manager = m Ble Managers . get ( device ) ;", "if ( manager != null ) {", "if ( session != null ) manager . set Logger ( session ) ;", "manager . connect ( device ) ; }", "else {", "m Ble Managers . put ( device , manager = initialize Manager ( ) ) ;", "manager . set Gatt Callbacks ( Ble Multiconnect Profile Service . this ) ;", "manager . set Logger ( session ) ;", "manager . connect ( device ) ; } }"]}
{"ids": "55679", "code": ["public Scanner Exception ( Error Messages message ) {", "this ( null , Error Messages . get ( message ) , message , - NUM_ , - NUM_ ) ; }"]}
{"ids": "43530", "code": ["private static void format Time Zone ( Calendar cal , String Builder buf ) {", "Time Zone tz = cal . get Time Zone ( ) ;", "if ( tz == null ) return ;", "int offset ;", "if ( tz . in Daylight Time ( cal . get Time ( ) ) ) {", "offset = tz . get Raw Offset ( ) + ( tz . use Daylight Time ( ) ? NUM_ : NUM_ ) ; }", "else {", "offset = tz . get Raw Offset ( ) ; }", "if ( offset == NUM_ ) {", "buf . append ( STR_ ) ;", "return ; }", "if ( offset >= NUM_ ) buf . append ( STR_ ) ;", "else {", "buf . append ( STR_ ) ;", "offset *= - NUM_ ; }", "offset /= NUM_ * NUM_ ;", "format Two Digits ( offset / NUM_ , buf ) ;", "buf . append ( STR_ ) ;", "format Two Digits ( offset % NUM_ , buf ) ; }"]}
{"ids": "17620", "code": ["private E unlink Last ( ) {", "Node < E > l = last ;", "if ( l == null ) return null ;", "Node < E > p = l . prev ;", "E item = l . item ;", "l . item = null ;", "l . prev = l ;", "last = p ;", "if ( p == null ) first = null ;", "else p . next = null ;", "-- count ;", "not Full . signal ( ) ;", "return item ; }"]}
{"ids": "27899", "code": ["public Mutable String ( final Mutable String s ) {", "make Compact Mutable String ( s . length ( ) ) ;", "System . arraycopy ( s . array , NUM_ , array , NUM_ , array . length ) ; }"]}
{"ids": "55453", "code": ["private void request ( ) {", "if ( is Visible ( ) && stream != null && ! stream . is Empty ( ) ) {", "loading = true ;", "if ( type == Type . FOLLOWERS ) {", "api . get Followers ( stream ) ; }", "else if ( type == Type . SUBSCRIBERS ) {", "api . get Subscribers ( stream ) ; } } }"]}
{"ids": "35594", "code": ["public List < Statement > munged Style ( ) {", "List < Statement > st = built ( ) ;", "if ( include Basic Entity For Subject ) {", "st . remove ( entity Data About Decl ) ;", "st . remove ( entity Data Version Decl ) ;", "st . remove ( entity Data Date Modified Decl ) ;", "statement ( st , uris . entity ( ) + entity , Schema Dot Org . VERSION , version ) ;", "statement ( st , uris . entity ( ) + entity , Schema Dot Org . DATE MODIFIED , date Modified ) ; }", "st . remove ( statement Type Decl ) ;", "for ( Extra Info e : extra Info ) {", "e . munge ( st ) ; }", "return st ; }"]}
{"ids": "2912", "code": ["private void write Request ( final Next Filter next Filter , final Socks Proxy Request request , int step ) {", "try {", "Io Buffer buf = null ;", "if ( step == Socks Proxy Constants . SOCKS 5 GREETING STEP ) {", "buf = encode Initial Greeting Packet ( request ) ; }", "else if ( step == Socks Proxy Constants . SOCKS 5 AUTH STEP ) {", "buf = encode Authentication Packet ( request ) ;", "if ( buf == null ) {", "step = Socks Proxy Constants . SOCKS 5 REQUEST STEP ; } }", "if ( step == Socks Proxy Constants . SOCKS 5 REQUEST STEP ) {", "buf = encode Proxy Request Packet ( request ) ; }", "buf . flip ( ) ;", "write Data ( next Filter , buf ) ; }", "catch ( Exception ex ) {", "close Session ( STR_ , ex ) ; } }"]}
{"ids": "75080", "code": ["public synchronized void put As Int ( Object key , int value ) {", "put ( key , new Integer ( value ) ) ; }"]}
{"ids": "44258", "code": ["public void close ( ) throws IO Exception {", "if ( writer != null ) {", "writer . close ( ) ; }", "else {", "cb = null ;", "closed = true ; } }"]}
{"ids": "9921", "code": ["private Cert Path build Cert Path ( X 509 Certificate end Cert ) throws Certificate Path Building Exception {", "Cert Path Builder cpb = null ;", "try {", "cpb = Cert Path Builder . get Instance ( STR_ ) ; }", "catch ( No Such Algorithm Exception e ) {", "throw new Certificate Path Building Exception ( STR_ + e . get Message ( ) , e ) ; }", "PKIX Builder Parameters params = Create PKIX Builder Parameters ( end Cert ) ;", "Cert Path Builder Result cpb Result ;", "try {", "cpb Result = cpb . build ( params ) ; }", "catch ( Cert Path Builder Exception e ) {", "throw new Certificate Path Building Exception ( e . get Message ( ) , e . get Cause ( ) ) ; }", "catch ( Invalid Algorithm Parameter Exception e ) {", "throw new Certificate Path Building Exception ( e . get Message ( ) , e ) ; }", "Cert Path cp = cpb Result . get Cert Path ( ) ;", "return cp ; }"]}
{"ids": "14764", "code": ["public void add Configuration ( Input Stream in ) throws SMS Exception , SSO Exception {", "Service Manager sm = new Service Manager ( token ) ;", "Document doc = SMS Schema . get XML Document ( in ) ;", "Node List nodes = doc . get Elements By Tag Name ( SMS Utils . SERVICE ) ;", "for ( int i = NUM_ ; ( nodes != null ) && ( i < nodes . get Length ( ) ) ; i ++ ) {", "Node service Node = nodes . item ( i ) ;", "String s Name = XML Utils . get Node Attribute Value ( service Node , SMS Utils . NAME ) ;", "String s Version = XML Utils . get Node Attribute Value ( service Node , SMS Utils . VERSION ) ;", "Node config Node ;", "if ( s Name . equals ( service Name ) && ( s Version . equals ( version ) ) && ( ( config Node = XML Utils . get Child Node ( service Node , SMS Utils . CONFIGURATION ) ) != null ) ) {", "Create Service Config . create Service ( sm , s Name , s Version , config Node , null ) ; } } }"]}
{"ids": "59606", "code": ["public static int string To Dict Id ( String str ) {", "try {", "byte [ ] bytes = str . get Bytes ( STR_ ) ;", "return Bytes Util . read Unsigned ( bytes , NUM_ , bytes . length ) ; }", "catch ( Unsupported Encoding Exception e ) {", "return NUM_ ; } }"]}
{"ids": "49581", "code": ["public void start ( ) throws IO Exception , Mqtt Exception {", "final String method Name = STR_ ;", "try {", "log . fine ( CLASS NAME , method Name , STR_ , new Object [ ] { host , new Integer ( port ) , new Long ( con Timeout * NUM_ ) } ) ;", "Socket Address sockaddr = new Inet Socket Address ( host , port ) ;", "socket = factory . create Socket ( ) ;", "socket . connect ( sockaddr , con Timeout * NUM_ ) ; }", "catch ( Connect Exception ex ) {", "log . fine ( CLASS NAME , method Name , STR_ , null , ex ) ;", "throw new Mqtt Exception ( Mqtt Exception . REASON CODE SERVER CONNECT ERROR , ex ) ; } }"]}
{"ids": "82059", "code": ["public void call Serially And Wait ( Runnable r ) {", "if ( is Edt ( ) ) {", "throw new Runtime Exception ( STR_ ) ; }", "Runnable Wrapper c = new Runnable Wrapper ( r , NUM_ ) ;", "call Serially ( c ) ;", "flush Edt ( ) ;", "synchronized ( lock ) {", "while ( ! c . is Done ( ) ) {", "try {", "lock . wait ( NUM_ ) ; }", "catch ( Interrupted Exception err ) { } } } }"]}
{"ids": "13621", "code": ["public List < Contact > find ( ) {", "List < Long > ids = new Array List < > ( ) ;", "if ( inner Queries != null ) {", "for ( Query query : inner Queries ) {", "ids . add All ( query . find Inner ( ) ) ; } }", "else {", "if ( mime Where . is Empty ( ) ) {", "return find ( null ) ; }", "for ( Map . Entry < String , Where > entry : mime Where . entry Set ( ) ) {", "ids = find Ids ( ids , entry . get Key ( ) , entry . get Value ( ) ) ; } }", "return find ( ids ) ; }"]}
{"ids": "45707", "code": ["public void persist Bean Data ( Object bean , boolean print Only ) {", "persist Bean Try Catch ( bean ) ;", "call Persist Emitted Key Value ( print Only ) ; }"]}
{"ids": "76738", "code": ["private void refill ( ) throws IO Exception {", "offset += usable Length ;", "int leftover = length - usable Length ;", "System . arraycopy ( buffer , usable Length , buffer , NUM_ , leftover ) ;", "int requested = buffer . length - leftover ;", "int returned = read ( input , buffer , leftover , requested ) ;", "length = returned < NUM_ ? leftover : returned + leftover ;", "if ( returned < requested ) usable Length = length ;", "else {", "usable Length = find Safe End ( ) ;", "if ( usable Length < NUM_ ) usable Length = length ; }", "wrapper . set Text ( buffer , NUM_ , Math . max ( NUM_ , usable Length ) ) ;", "iterator . set Text ( wrapper ) ; }"]}
{"ids": "69538", "code": ["protected void fire Insert Update ( Document Event evt ) {", "if ( token Marker != null ) {", "Document Event . Element Change ch = evt . get Change ( get Default Root Element ( ) ) ;", "if ( ch != null ) {", "token Marker . insert Lines ( ch . get Index ( ) + NUM_ , ch . get Children Added ( ) . length - ch . get Children Removed ( ) . length ) ; } }", "super . fire Insert Update ( evt ) ; }"]}
{"ids": "56322", "code": ["int pending ( ) {", "return pending . get ( ) ; }"]}
{"ids": "65199", "code": ["private boolean is Included ( final Http Servlet Request request ) {", "String uri = ( String ) request . get Attribute ( STR_ ) ;", "boolean include Request = ! ( uri == null ) ;", "if ( include Request && log . is Debug Enabled ( ) ) {", "log . debug ( STR_ + STR_ , request . get Request URL ( ) ) ; }", "return include Request ; }"]}
{"ids": "7456", "code": ["public void draw Domain Marker ( Graphics 2 D g 2 , Contour Plot plot , Value Axis domain Axis , Marker marker , Rectangle 2 D data Area ) {", "if ( marker instanceof Value Marker ) {", "Value Marker vm = ( Value Marker ) marker ;", "double value = vm . get Value ( ) ;", "Range range = domain Axis . get Range ( ) ;", "if ( ! range . contains ( value ) ) {", "return ; }", "double x = domain Axis . value To Java 2 D ( value , data Area , Rectangle Edge . BOTTOM ) ;", "Line 2 D line = new Line 2 D . Double ( x , data Area . get Min Y ( ) , x , data Area . get Max Y ( ) ) ;", "Paint paint = marker . get Outline Paint ( ) ;", "Stroke stroke = marker . get Outline Stroke ( ) ;", "g 2 . set Paint ( paint != null ? paint : Plot . DEFAULT OUTLINE PAINT ) ;", "g 2 . set Stroke ( stroke != null ? stroke : Plot . DEFAULT OUTLINE STROKE ) ;", "g 2 . draw ( line ) ; } }"]}
{"ids": "51616", "code": ["private static int encode Text ( Char Sequence msg , int startpos , int count , String Builder sb , int initial Submode ) {", "String Builder tmp = new String Builder ( count ) ;", "int submode = initial Submode ;", "int idx = NUM_ ;", "while ( true ) {", "char ch = msg . char At ( startpos + idx ) ;", "switch ( submode ) {", "case SUBMODE ALPHA :", "if ( is Alpha Upper ( ch ) ) {", "if ( ch == STR_ ) {", "tmp . append ( ( char ) NUM_ ) ; }", "else {", "tmp . append ( ( char ) ( ch - NUM_ ) ) ; } }", "else {", "if ( is Alpha Lower ( ch ) ) {", "submode = SUBMODE LOWER ;", "tmp . append ( ( char ) NUM_ ) ;", "continue ; }", "else if ( is Mixed ( ch ) ) {", "submode = SUBMODE MIXED ;", "tmp . append ( ( char ) NUM_ ) ;", "continue ; }", "else {", "tmp . append ( ( char ) NUM_ ) ;", "tmp . append ( ( char ) PUNCTUATION [ ch ] ) ;", "break ; } }", "break ;", "case SUBMODE LOWER :", "if ( is Alpha Lower ( ch ) ) {", "if ( ch == STR_ ) {", "tmp . append ( ( char ) NUM_ ) ; }", "else {", "tmp . append ( ( char ) ( ch - NUM_ ) ) ; } }", "else {", "if ( is Alpha Upper ( ch ) ) {", "tmp . append ( ( char ) NUM_ ) ;", "tmp . append ( ( char ) ( ch - NUM_ ) ) ;", "break ; }", "else if ( is Mixed ( ch ) ) {", "submode = SUBMODE MIXED ;", "tmp . append ( ( char ) NUM_ ) ;", "continue ; }", "else {", "tmp . append ( ( char ) NUM_ ) ;", "tmp . append ( ( char ) PUNCTUATION [ ch ] ) ;", "break ; } }", "break ;", "case SUBMODE MIXED :", "if ( is Mixed ( ch ) ) {", "tmp . append ( ( char ) MIXED [ ch ] ) ; }", "else {", "if ( is Alpha Upper ( ch ) ) {", "submode = SUBMODE ALPHA ;", "tmp . append ( ( char ) NUM_ ) ;", "continue ; }", "else if ( is Alpha Lower ( ch ) ) {", "submode = SUBMODE LOWER ;", "tmp . append ( ( char ) NUM_ ) ;", "continue ; }", "else {", "if ( startpos + idx + NUM_ < count ) {", "char next = msg . char At ( startpos + idx + NUM_ ) ;", "if ( is Punctuation ( next ) ) {", "submode = SUBMODE PUNCTUATION ;", "tmp . append ( ( char ) NUM_ ) ;", "continue ; } }", "tmp . append ( ( char ) NUM_ ) ;", "tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } }", "break ;", "default :", "if ( is Punctuation ( ch ) ) {", "tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; }", "else {", "submode = SUBMODE ALPHA ;", "tmp . append ( ( char ) NUM_ ) ;", "continue ; } }", "idx ++ ;", "if ( idx >= count ) {", "break ; } }", "char h = NUM_ ;", "int len = tmp . length ( ) ;", "for ( int i = NUM_ ; i < len ; i ++ ) {", "boolean odd = ( i % NUM_ ) != NUM_ ;", "if ( odd ) {", "h = ( char ) ( ( h * NUM_ ) + tmp . char At ( i ) ) ;", "sb . append ( h ) ; }", "else {", "h = tmp . char At ( i ) ; } }", "if ( ( len % NUM_ ) != NUM_ ) {", "sb . append ( ( char ) ( ( h * NUM_ ) + NUM_ ) ) ; }", "return submode ; }"]}
{"ids": "14947", "code": ["public void remove ( String attr Name , String del Value ) {", "int index = index Of ( attr Name ) ;", "if ( index != - NUM_ ) {", "Attr attr = ( Attr ) attrs . get ( index ) ;", "attr . remove Value ( del Value ) ;", "if ( attr . size ( ) == NUM_ ) {", "attrs . remove ( index ) ; } } }"]}
{"ids": "9052", "code": ["private Applied Migration create Applied Schema Migration ( ) {", "return new Applied Migration ( NUM_ , NUM_ , Migration Version . from Version ( Integer . to String ( NUM_ ) ) , STR_ , Migration Type . SCHEMA , STR_ , null , new Date ( ) , STR_ , NUM_ , true ) ; }"]}
{"ids": "48332", "code": ["public static String make Sig Alg ( String dig Alg , String enc Alg ) {", "dig Alg = dig Alg . replace ( STR_ , STR_ ) ;", "if ( enc Alg . equals Ignore Case ( STR_ ) ) enc Alg = STR_ ;", "return dig Alg + STR_ + enc Alg ; }"]}
{"ids": "12192", "code": ["public static int index Of ( byte [ ] src , byte [ ] target , int from Idx ) {", "final int to = src . length - target . length + NUM_ ;", "for ( int i = from Idx ; i < to ; i ++ ) {", "if ( src [ i ] == target [ NUM_ ] ) {", "boolean equals = true ;", "for ( int j = NUM_ , k = i + NUM_ ; j < target . length && equals ; j ++ , k ++ ) {", "if ( src [ k ] != target [ j ] ) {", "equals = false ; } }", "if ( equals ) {", "return i ; } } }", "return - NUM_ ; }"]}
{"ids": "3734", "code": ["@ Override public int read ( byte [ ] buf , int offset , int length ) throws IO Exception {", "try {", "if ( channel == null ) {", "return - NUM_ ; }", "int remaining = read Buffer . remaining ( ) ;", "if ( remaining > NUM_ ) {", "read Buffer . get ( buf , offset , remaining ) ;", "return remaining ; }", "read Buffer . clear ( ) ;", "int channel Read = channel . read ( read Buffer ) ;", "read Buffer . flip ( ) ;", "if ( channel Read < NUM_ ) return - NUM_ ;", "read Buffer . get ( buf , offset , channel Read ) ;", "return channel Read ; }", "catch ( Interrupted IO Exception e ) {", "if ( throw Read Interrupts ) throw e ;", "log . log ( Level . FINEST , e . to String ( ) , e ) ; }", "catch ( IO Exception e ) {", "if ( throw Read Interrupts ) throw e ;", "log . log ( Level . FINER , e . to String ( ) , e ) ; }", "return - NUM_ ; }"]}
{"ids": "55822", "code": ["String read UTF ( byte data [ ] , int off , int len ) {", "int offset = off ;", "String Buffer buf = new String Buffer ( ) ;", "for ( int end = offset + len ; offset < end ; ) {", "int ch = data [ offset ++ ] & NUM_ ;", "switch ( ch > > NUM_ ) {", "case NUM_ :", "case NUM_ :", "case NUM_ :", "case NUM_ :", "case NUM_ :", "case NUM_ :", "case NUM_ :", "case NUM_ :", "break ;", "case NUM_ :", "case NUM_ :", "if ( offset >= len ) {", "return null ; }", "ch = ( ( ch & NUM_ ) << NUM_ ) | ( data [ offset ++ ] & NUM_ ) ;", "break ;", "case NUM_ :", "if ( offset + NUM_ >= len ) {", "return null ; }", "ch = ( ( ch & NUM_ ) << NUM_ ) | ( ( data [ offset ++ ] & NUM_ ) << NUM_ ) | ( data [ offset ++ ] & NUM_ ) ;", "break ;", "default :", "if ( offset + NUM_ >= len ) {", "return null ; }", "ch = ( ( ch & NUM_ ) << NUM_ ) | ( data [ offset ++ ] & NUM_ ) ;", "break ; }", "buf . append ( ( char ) ch ) ; }", "return buf . to String ( ) ; }"]}
{"ids": "43972", "code": ["public Turtle Writer ( Output Stream out ) {", "this ( new Output Stream Writer ( out , Charset . for Name ( STR_ ) ) ) ; }"]}
{"ids": "6065", "code": ["private char lookahead ( ) {", "return cur Char Index < pattern . length ( ) - NUM_ ? pattern . char At ( cur Char Index + NUM_ ) : EOF ; }"]}
{"ids": "63170", "code": ["public static boolean is Number ( String s ) {", "if ( s . length ( ) == NUM_ ) {", "return false ; }", "for ( char c : s . to Char Array ( ) ) {", "if ( ! Character . is Digit ( c ) ) {", "return false ; } }", "return true ; }"]}
{"ids": "29734", "code": ["private State ( Circuit State circuit State , Duration timeout Duration , Event Counter counter ) {", "this . circuit State = circuit State ;", "this . counter = counter ;", "if ( timeout Duration . is Zero ( ) || timeout Duration . is Negative ( ) ) {", "timed Out Time Nanos = NUM_ ; }", "else {", "timed Out Time Nanos = ticker . read ( ) + timeout Duration . to Nanos ( ) ; } }"]}
{"ids": "11578", "code": ["public void cleanup ( Button Group bg ) {", "if ( bg != null ) {", "bg . remove ( layer Name ) ; }", "cleanup ( ) ; }"]}
{"ids": "44232", "code": ["public static Map < Meta Key , String > union ( final Map < Meta Key , String > provided Meta Data , final Map < Meta Key , String > extracted Meta Data ) {", "final int size 1 = provided Meta Data != null ? provided Meta Data . size ( ) : NUM_ ;", "final int size 2 = extracted Meta Data != null ? extracted Meta Data . size ( ) : NUM_ ;", "if ( size 1 + size 2 == NUM_ ) {", "return Collections . empty Map ( ) ; }", "final Map < Meta Key , String > result = new Hash Map < > ( size 1 + size 2 ) ;", "if ( extracted Meta Data != null ) {", "result . put All ( extracted Meta Data ) ; }", "if ( provided Meta Data != null ) {", "result . put All ( provided Meta Data ) ; }", "return Collections . unmodifiable Map ( result ) ; }"]}
{"ids": "25974", "code": ["public static void format Double ( double source , int decimals , int precision , String Buffer target ) {", "int scale = ( Math . abs ( source ) >= NUM_ ) ? decimals : precision ;", "if ( too Many Digits Used ( source , scale ) || too Close To Round ( source , scale ) ) {", "format Double Precise ( source , decimals , precision , target ) ; }", "else {", "format Double Fast ( source , decimals , precision , target ) ; } }"]}
{"ids": "13861", "code": ["protected View create Child ( String name ) {", "View view = null ;", "if ( name . equals ( TF PARENTID ) || name . equals ( TF CLIENT TYPE ) ) {", "view = new CC Text Field ( this , name , STR_ ) ; }", "else if ( name . equals ( SEC MH COMMON ) ) {", "view = new CC Secondary Masthead ( this , name ) ; }", "else if ( name . equals ( PGTITLE ) ) {", "view = new CC Page Title ( this , pt Model , name ) ; }", "else if ( pt Model . is Child Supported ( name ) ) {", "view = pt Model . create Child ( this , name ) ; }", "else if ( name . equals ( PROPERTY ATTRIBUTE ) ) {", "view = new AM Property Sheet ( this , property Sheet Model , name ) ; }", "else if ( property Sheet Model . is Child Supported ( name ) ) {", "view = property Sheet Model . create Child ( this , name , get Model ( ) ) ; }", "else {", "view = super . create Child ( name ) ; }", "return view ; }"]}
{"ids": "37489", "code": ["public synchronized void draw ( final Graphics 2 D gfx , final float x , final float y ) {", "if ( ! is Empty ( ) ) {", "m text Layout . draw ( gfx , x , y ) ;", "for ( final C Highlighting highlighting : new Array List < C Highlighting > ( m highlighting ) ) {", "final double bp X = ( x + highlighting . get Start ( ) ) - NUM_ ;", "final double bp Y = ( y - m char Height ) + NUM_ ;", "final double bp W = highlighting . get End ( ) + NUM_ ;", "final double bp H = m char Height - NUM_ ;", "draw Highlighting ( gfx , bp X , bp Y , bp W , bp H , highlighting . get Color ( ) ) ; } } }"]}
{"ids": "47910", "code": ["public boolean is Abstract ( ) {", "return Modifier . is Abstract ( flags ) ; }"]}
{"ids": "85376", "code": ["public static File relative File ( File f ) {", "if ( f . is Absolute ( ) ) {", "f = relative File ( new File ( STR_ ) , f ) ; }", "return f ; }"]}
{"ids": "42786", "code": ["public XML Parser ( final String namespace , final String [ ] schemas ) throws XML Exception {", "try {", "JAXB Context jc = JAXB Context . new Instance ( namespace ) ;", "marshaller = jc . create Marshaller ( ) ;", "marshaller . set Schema ( XML Schema Utils . create Schema ( schemas ) ) ;", "unmarshaller = jc . create Unmarshaller ( ) ;", "unmarshaller . set Schema ( XML Schema Utils . create Schema ( schemas ) ) ; }", "catch ( JAXB Exception e ) {", "throw new XML Exception ( STR_ + namespace , e ) ; } }"]}
{"ids": "14635", "code": ["public String [ ] split Resource Name ( String service Type Name , String resource Name ) throws Name Not Found Exception , SSO Exception , Policy Exception {", "Service Type st = get Service Type ( service Type Name ) ;", "Set prefixes = get Managed Resource Names ( service Type Name ) ;", "String [ ] ret Val = new String [ NUM_ ] ;", "if ( prefixes . is Empty ( ) ) {", "ret Val [ NUM_ ] = STR_ ;", "ret Val [ NUM_ ] = resource Name ;", "return ret Val ; }", "Iterator iter = prefixes . iterator ( ) ;", "String tmp = null ;", "Resource Match match Result = null ;", "boolean found Super Match = false ;", "boolean found Exact Match = false ;", "while ( iter . has Next ( ) ) {", "tmp = ( String ) iter . next ( ) ;", "match Result = st . compare ( resource Name , tmp ) ;", "if ( match Result . equals ( Resource Match . SUPER RESOURCE MATCH ) ) {", "found Super Match = true ;", "break ; }", "if ( match Result . equals ( Resource Match . EXACT MATCH ) ) {", "found Exact Match = true ;", "break ; } }", "if ( found Super Match ) {", "ret Val [ NUM_ ] = tmp ;", "ret Val [ NUM_ ] = st . get Sub Resource ( resource Name , tmp ) ;", "return ret Val ; }", "if ( found Exact Match ) {", "ret Val [ NUM_ ] = tmp ;", "ret Val [ NUM_ ] = STR_ ;", "return ret Val ; }", "ret Val [ NUM_ ] = STR_ ;", "ret Val [ NUM_ ] = resource Name ;", "return ret Val ; }"]}
{"ids": "52950", "code": ["void materialize ( ) {", "if ( cachefill < NUM_ ) {", "return ; }", "double min = Double . MAX VALUE , max = Double . MIN VALUE ;", "for ( int i = NUM_ ; i < cachefill ; i ++ ) {", "min = Math . min ( min , cachec [ i ] ) ;", "max = Math . max ( max , cachec [ i ] ) ; }", "Linear Scale scale = new Linear Scale ( min , max ) ;", "min = scale . get Min ( ) ;", "max = scale . get Max ( ) ;", "this . base = min ;", "this . max = max ;", "this . binsize = ( max - min ) / this . destsize ;", "this . data = new long [ this . destsize << NUM_ ] ;", "size = destsize ;", "final int end = cachefill ;", "cachefill = - NUM_ ;", "for ( int i = NUM_ ; i < end ; i ++ ) {", "increment ( cachec [ i ] , cachev [ i ] ) ; }", "cachec = null ;", "cachev = null ; }"]}
{"ids": "72450", "code": ["public Array Field Vector ( Field < T > field , T [ ] v 1 , T [ ] v 2 ) throws Math Illegal Argument Exception , Null Argument Exception {", "Math Utils . check Not Null ( v 1 ) ;", "Math Utils . check Not Null ( v 2 ) ;", "if ( v 1 . length + v 2 . length == NUM_ ) {", "throw new Math Illegal Argument Exception ( Localized Core Formats . VECTOR MUST HAVE AT LEAST ONE ELEMENT ) ; }", "data = Math Arrays . build Array ( field , v 1 . length + v 2 . length ) ;", "System . arraycopy ( v 1 , NUM_ , data , NUM_ , v 1 . length ) ;", "System . arraycopy ( v 2 , NUM_ , data , v 1 . length , v 2 . length ) ;", "this . field = field ; }"]}
{"ids": "14875", "code": ["private void verify Target Session Is Local Or Stateless ( Session Request req , Session ID sid ) throws Session Exception , Session Request Exception , Forward Session Request Exception {", "if ( stateless Session Manager . contains Jwt ( sid ) ) {", "return ; }", "String host Server ID = foreign Session Handler . get Current Host Server ( sid ) ;", "if ( ! server Config . is Local Server ( host Server ID ) ) {", "try {", "throw new Forward Session Request Exception ( forward ( SESSION SERVICE URL SERVICE . get Session Service URL ( host Server ID ) , req ) ) ; }", "catch ( Session Exception se ) {", "if ( ! session Service . check Server Up ( host Server ID ) ) {", "String retry Host Server ID = foreign Session Handler . get Current Host Server ( sid ) ;", "if ( retry Host Server ID . equals ( host Server ID ) ) {", "throw se ; }", "else {", "if ( ! server Config . is Local Server ( retry Host Server ID ) ) {", "throw new Forward Session Request Exception ( forward ( SESSION SERVICE URL SERVICE . get Session Service URL ( host Server ID ) , req ) ) ; } } }", "else {", "throw se ; } } }", "if ( ! session Service . check Session Local ( sid ) ) {", "throw new Session Request Exception ( sid , Session Bundle . get String ( STR_ ) ) ; } }"]}
{"ids": "7190", "code": ["public static boolean is Java Builtin Data Type ( Class clazz ) {", "if ( clazz == null ) {", "return true ; }", "Class clazz Boxed = get Boxed Type ( clazz ) ;", "if ( is Numeric ( clazz Boxed ) ) {", "return true ; }", "if ( is Boolean ( clazz Boxed ) ) {", "return true ; }", "if ( clazz Boxed . equals ( String . class ) ) {", "return true ; }", "if ( ( clazz Boxed . equals ( char . class ) ) || ( clazz Boxed . equals ( Character . class ) ) ) {", "return true ; }", "if ( clazz Boxed . equals ( void . class ) ) {", "return true ; }", "return false ; }"]}
{"ids": "21316", "code": ["protected boolean is Control Char ( char ch ) {", "return Character . is ISO Control ( ch ) && ! Character . is Whitespace ( ch ) ; }"]}
{"ids": "48208", "code": ["public void encode ( Output Stream out ) throws IO Exception {", "Der Output Stream tmp = new Der Output Stream ( ) ;", "if ( extension Value == null ) {", "extension Id = PKIX Extensions . Policy Constraints Id ;", "critical = false ;", "encode This ( ) ; }", "super . encode ( tmp ) ;", "out . write ( tmp . to Byte Array ( ) ) ; }"]}
{"ids": "59654", "code": ["< T > List < T > on Find All ( Class < T > model Class , boolean is Eager , long ... ids ) {", "List < T > data List ;", "if ( is Affect All Lines ( ids ) ) {", "data List = query ( model Class , null , null , null , null , null , STR_ , null , get Foreign Key Associations ( model Class . get Name ( ) , is Eager ) ) ; }", "else {", "data List = query ( model Class , null , get Where Of Ids With Or ( ids ) , null , null , null , STR_ , null , get Foreign Key Associations ( model Class . get Name ( ) , is Eager ) ) ; }", "return data List ; }"]}
{"ids": "28813", "code": ["public boolean is Cached ( String request Url , int max Width , int max Height ) {", "return is Cached ( request Url , max Width , max Height , Scale Type . CENTER INSIDE ) ; }"]}
{"ids": "46482", "code": ["public Style add Style ( String nm , Style parent ) {", "Style Context styles = ( Style Context ) get Attribute Context ( ) ;", "return styles . add Style ( nm , parent ) ; }"]}
{"ids": "60312", "code": ["public static Text With Mnemonic parse Text ( final String text With Mnemonic ) {", "if ( text With Mnemonic == null ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "int index = - NUM_ ;", "final String Buffer plain Text = new String Buffer ( ) ;", "for ( int i = NUM_ ; i < text With Mnemonic . length ( ) ; i ++ ) {", "char ch = text With Mnemonic . char At ( i ) ;", "if ( ch == STR_ ) {", "i ++ ;", "if ( i >= text With Mnemonic . length ( ) ) {", "break ; }", "ch = text With Mnemonic . char At ( i ) ;", "if ( ch != STR_ ) {", "index = plain Text . length ( ) ; } }", "plain Text . append ( ch ) ; }", "return new Text With Mnemonic ( plain Text . to String ( ) , index ) ; }"]}
{"ids": "56818", "code": ["public void check Permissions ( Namespace Entity namespace Entity , String ... requested Iam Role Names ) {", "check Permissions ( namespace Entity , Arrays . as List ( requested Iam Role Names ) ) ; }"]}
{"ids": "34984", "code": ["private static Annotated Type Mirror as Outer Super ( Types types , Annotated Type Factory atype Factory , Annotated Type Mirror type , Annotated Type Mirror super Type ) {", "if ( type . get Kind ( ) == Type Kind . DECLARED ) {", "Annotated Declared Type dt = ( Annotated Declared Type ) type ;", "Annotated Declared Type enclosing Type = dt ;", "Type Mirror super Type Mirror = types . erasure ( super Type . get Underlying Type ( ) ) ;", "while ( enclosing Type != null ) {", "Type Mirror enclosing Type Mirror = types . erasure ( enclosing Type . get Underlying Type ( ) ) ;", "if ( types . is Subtype ( enclosing Type Mirror , super Type Mirror ) ) {", "dt = enclosing Type ;", "break ; }", "enclosing Type = enclosing Type . get Enclosing Type ( ) ; }", "if ( enclosing Type == null ) {", "return super Type ; }", "return as Super ( atype Factory , dt , super Type ) ; }", "return as Super ( atype Factory , type , super Type ) ; }"]}
{"ids": "40607", "code": ["public void reload ( Solr Core core , Solr Index Searcher searcher ) throws IO Exception {", "LOG . info ( STR_ ) ;", "if ( dictionary == null && store Dir != null ) {", "File Input Stream is = new File Input Stream ( new File ( store Dir , factory . store File Name ( ) ) ) ;", "try {", "if ( lookup . load ( is ) ) {", "return ; } }", "finally {", "IO Utils . close While Handling Exception ( is ) ; }", "LOG . debug ( STR_ ) ; }", "build ( core , searcher ) ; }"]}
{"ids": "77443", "code": ["public static String as String ( String json Path , Map < String , Object > json ) {", "return path As ( String . class , json Path , json ) ; }"]}
{"ids": "3890", "code": ["@ Override public Server Heartbeat server Dyn ( String address , int port , boolean is SSL , String cluster Id , String display Name ) {", "Objects . require Non Null ( address ) ;", "Objects . require Non Null ( cluster Id ) ;", "Cluster Heartbeat cluster = create Cluster ( cluster Id ) ;", "Server Heartbeat server = cluster . create Server ( address , port , is SSL ) ;", "if ( display Name != null ) {", "server . set Display Name ( display Name ) ; }", "cluster . add Dynamic Server ( server ) ;", "return server ; }"]}
{"ids": "81869", "code": ["public void paint Component Background ( Object native Graphics , int x , int y , int width , int height , Style s ) {", "if ( width <= NUM_ || height <= NUM_ ) {", "return ; }", "Image bg Image Orig = s . get Bg Image ( ) ;", "if ( bg Image Orig == null ) {", "if ( s . get Background Type ( ) >= Style . BACKGROUND GRADIENT LINEAR VERTICAL ) {", "draw Gradient Background ( s , native Graphics , x , y , width , height ) ;", "return ; }", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ; }", "else {", "int i W = bg Image Orig . get Width ( ) ;", "int i H = bg Image Orig . get Height ( ) ;", "Object bg Image = bg Image Orig . get Image ( ) ;", "switch ( s . get Background Type ( ) ) {", "case Style . BACKGROUND NONE :", "if ( s . get Bg Transparency ( ) != NUM_ ) {", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ; }", "return ;", "case Style . BACKGROUND IMAGE SCALED :", "if ( is Scaled Image Drawing Supported ( ) ) {", "draw Image ( native Graphics , bg Image , x , y , width , height ) ; }", "else {", "if ( i W != width || i H != height ) {", "bg Image Orig = bg Image Orig . scaled ( width , height ) ;", "s . set Bg Image ( bg Image Orig , true ) ;", "bg Image = bg Image Orig . get Image ( ) ; }", "draw Image ( native Graphics , bg Image , x , y ) ; }", "return ;", "case Style . BACKGROUND IMAGE SCALED FILL :", "float r = Math . max ( ( ( float ) width ) / ( ( float ) i W ) , ( ( float ) height ) / ( ( float ) i H ) ) ;", "int bwidth = ( int ) ( ( ( float ) i W ) * r ) ;", "int bheight = ( int ) ( ( ( float ) i H ) * r ) ;", "if ( is Scaled Image Drawing Supported ( ) ) {", "draw Image ( native Graphics , bg Image , x + ( width - bwidth ) / NUM_ , y + ( height - bheight ) / NUM_ , bwidth , bheight ) ; }", "else {", "if ( i W != bwidth || i H != bheight ) {", "bg Image Orig = bg Image Orig . scaled ( bwidth , bheight ) ;", "s . set Bg Image ( bg Image Orig , true ) ;", "bg Image = bg Image Orig . get Image ( ) ; }", "draw Image ( native Graphics , bg Image , x + ( width - bwidth ) / NUM_ , y + ( height - bheight ) / NUM_ ) ; }", "return ;", "case Style . BACKGROUND IMAGE SCALED FIT :", "if ( s . get Bg Transparency ( ) != NUM_ ) {", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ; }", "float r 2 = Math . min ( ( ( float ) width ) / ( ( float ) i W ) , ( ( float ) height ) / ( ( float ) i H ) ) ;", "int awidth = ( int ) ( ( ( float ) i W ) * r 2 ) ;", "int aheight = ( int ) ( ( ( float ) i H ) * r 2 ) ;", "if ( is Scaled Image Drawing Supported ( ) ) {", "draw Image ( native Graphics , bg Image , x + ( width - awidth ) / NUM_ , y + ( height - aheight ) / NUM_ , awidth , aheight ) ; }", "else {", "if ( i W != awidth || i H != aheight ) {", "bg Image Orig = bg Image Orig . scaled ( awidth , aheight ) ;", "s . set Bg Image ( bg Image Orig , true ) ;", "bg Image = bg Image Orig . get Image ( ) ; }", "draw Image ( native Graphics , bg Image , x + ( width - awidth ) / NUM_ , y + ( height - aheight ) / NUM_ , awidth , aheight ) ; }", "return ;", "case Style . BACKGROUND IMAGE TILE BOTH :", "tile Image ( native Graphics , bg Image , x , y , width , height ) ;", "return ;", "case Style . BACKGROUND IMAGE TILE HORIZONTAL ALIGN TOP :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "tile Image ( native Graphics , bg Image , x , y , width , i H ) ;", "return ;", "case Style . BACKGROUND IMAGE TILE HORIZONTAL ALIGN CENTER :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "tile Image ( native Graphics , bg Image , x , y + ( height / NUM_ - i H / NUM_ ) , width , i H ) ;", "return ;", "case Style . BACKGROUND IMAGE TILE HORIZONTAL ALIGN BOTTOM :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "tile Image ( native Graphics , bg Image , x , y + ( height - i H ) , width , i H ) ;", "return ;", "case Style . BACKGROUND IMAGE TILE VERTICAL ALIGN LEFT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "for ( int y Pos = NUM_ ; y Pos <= height ; y Pos += i H ) {", "draw Image ( native Graphics , bg Image , x , y + y Pos ) ; }", "return ;", "case Style . BACKGROUND IMAGE TILE VERTICAL ALIGN CENTER :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "for ( int y Pos = NUM_ ; y Pos <= height ; y Pos += i H ) {", "draw Image ( native Graphics , bg Image , x + ( width / NUM_ - i W / NUM_ ) , y + y Pos ) ; }", "return ;", "case Style . BACKGROUND IMAGE TILE VERTICAL ALIGN RIGHT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "for ( int y Pos = NUM_ ; y Pos <= height ; y Pos += i H ) {", "draw Image ( native Graphics , bg Image , x + width - i W , y + y Pos ) ; }", "return ;", "case Style . BACKGROUND IMAGE ALIGNED TOP :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x + ( width / NUM_ - i W / NUM_ ) , y ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED BOTTOM :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x + ( width / NUM_ - i W / NUM_ ) , y + ( height - i H ) ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED LEFT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x , y + ( height / NUM_ - i H / NUM_ ) ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED RIGHT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x + width - i W , y + ( height / NUM_ - i H / NUM_ ) ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED CENTER :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x + ( width / NUM_ - i W / NUM_ ) , y + ( height / NUM_ - i H / NUM_ ) ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED TOP LEFT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x , y ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED TOP RIGHT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x + width - i W , y ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED BOTTOM LEFT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x , y + ( height - i H ) ) ;", "return ;", "case Style . BACKGROUND IMAGE ALIGNED BOTTOM RIGHT :", "set Color ( native Graphics , s . get Bg Color ( ) ) ;", "fill Rect ( native Graphics , x , y , width , height , s . get Bg Transparency ( ) ) ;", "draw Image ( native Graphics , bg Image , x + width - i W , y + ( height - i H ) ) ;", "return ;", "case Style . BACKGROUND GRADIENT LINEAR HORIZONTAL :", "case Style . BACKGROUND GRADIENT LINEAR VERTICAL :", "case Style . BACKGROUND GRADIENT RADIAL :", "draw Gradient Background ( s , native Graphics , x , y , width , height ) ;", "return ; } } }"]}
{"ids": "77752", "code": ["public void remove All ( ) {", "m Parts . clear ( ) ; }"]}
{"ids": "8540", "code": ["public static boolean executable Exists ( String executable ) {", "File direct File = new File ( executable ) ;", "if ( direct File . exists ( ) && direct File . can Execute ( ) ) {", "return true ; }", "for ( String path String : get System Path ( ) ) {", "Path path = Paths . get ( path String ) ;", "if ( Files . exists ( path . resolve ( executable ) ) && Files . is Executable ( path . resolve ( executable ) ) ) {", "return true ; } }", "return false ; }"]}
{"ids": "35370", "code": ["private List < File > combine ( List < File > list A , List < File > list B ) {", "Linked Hash Set < File > combined Projects = Sets . new Linked Hash Set ( list A ) ;", "combined Projects . add All ( list B ) ;", "return new Array List < > ( combined Projects ) ; }"]}
{"ids": "50873", "code": ["public long generate New Ping Id ( ) {", "Preference Store prefs = get Preference Store ( ) ;", "Random rnd = new Random ( ) ;", "long id = rnd . next Long ( ) ;", "synchronized ( Ddms Preference Store . class ) {", "prefs . set Value ( PING ID , id ) ;", "try {", "prefs . save ( ) ; }", "catch ( IO Exception e ) { } }", "return id ; }"]}
{"ids": "12011", "code": ["public boolean is Valid ( ) {", "return System . current Time Millis ( ) < creation Time + lifetime + ( lifetime / NUM_ ) ; }"]}
{"ids": "32986", "code": ["public static Model read From ( Virtual File file ) throws Server Exception , Forbidden Exception , IO Exception {", "require Non Null ( file , STR_ ) ;", "return fetch Model ( XML Tree . from ( file . get Content ( ) ) ) ; }"]}
{"ids": "78689", "code": ["public boolean is Value Exist For Key ( String key ) {", "boolean is Value Exists ;", "try {", "String string = get String ( key , STR_ ) ;", "is Value Exists = ! string . equals Ignore Case ( STR_ ) ; }", "catch ( Class Cast Exception e ) {", "try {", "int an Int = get Int ( key , NUM_ ) ;", "is Value Exists = an Int != NUM_ ; }", "catch ( Class Cast Exception e 1 ) {", "try {", "long a Long = get Long ( key , NUM_ ) ;", "is Value Exists = a Long != NUM_ ; }", "catch ( Class Cast Exception e 2 ) {", "try {", "float a Float = get Float ( key , NUM_ ) ;", "is Value Exists = a Float != NUM_ ; }", "catch ( Class Cast Exception e 3 ) {", "try {", "boolean a Boolean = get Boolean ( key , false ) ;", "is Value Exists = ! a Boolean ; }", "catch ( Exception e 4 ) {", "is Value Exists = false ;", "e . print Stack Trace ( ) ; } } } } }", "catch ( Exception e ) {", "is Value Exists = false ; }", "return is Value Exists ; }"]}
{"ids": "83317", "code": ["public static void write Boxplot ( T Double Object Hash Map < double [ ] > table , String file ) throws IO Exception {", "int max Size = NUM_ ;", "T Double Object Iterator < double [ ] > it = table . iterator ( ) ;", "for ( int i = NUM_ ; i < table . size ( ) ; i ++ ) {", "it . advance ( ) ;", "max Size = Math . max ( max Size , it . value ( ) . length ) ; }", "double keys [ ] = table . keys ( ) ;", "Arrays . sort ( keys ) ;", "Buffered Writer writer = new Buffered Writer ( new File Writer ( file ) ) ;", "for ( int k = NUM_ ; k < keys . length ; k ++ ) {", "writer . write ( String . value Of ( keys [ k ] ) ) ;", "if ( k + NUM_ < keys . length ) writer . write ( TAB ) ; }", "writer . new Line ( ) ;", "for ( int i = NUM_ ; i < max Size ; i ++ ) {", "for ( int k = NUM_ ; k < keys . length ; k ++ ) {", "double [ ] list = table . get ( keys [ k ] ) ;", "if ( i < list . length ) {", "writer . write ( String . value Of ( list [ i ] ) ) ; }", "else {", "writer . write ( NA ) ; }", "if ( k + NUM_ < keys . length ) writer . write ( TAB ) ; }", "writer . new Line ( ) ; }", "writer . close ( ) ; }"]}
{"ids": "54171", "code": ["@ Theory public void log Entries Have Same Order As Indexes ( Object [ ] data Point ) {", "int index 1 = ( int ) data Point [ NUM_ ] ;", "int index 2 = ( int ) data Point [ NUM_ ] ;", "Log Entry first = log Entries [ index 1 ] ;", "Log Entry second = log Entries [ index 2 ] ;", "LOG . debug ( STR_ , index 1 , index 2 ) ;", "int result = tested . compare ( first , second ) ;", "int expected = Integer . compare ( index 1 , index 2 ) ;", "assert That Have Same Signum ( expected , result ) ; }"]}
{"ids": "85379", "code": ["public static void copy All ( File root , File dest ) throws IO Exception {", "if ( root . is Directory ( ) ) {", "for ( File child : root . list Files ( ) ) {", "File child Dest = new File ( dest , child . get Name ( ) ) ;", "if ( child . is Directory ( ) ) {", "if ( ! child Dest . exists ( ) && ! mkdirs ( child Dest ) ) throw new IO Exception ( STR_ + child Dest . get Path ( ) ) ;", "copy All ( child , child Dest ) ; }", "else {", "Files . copy ( child . to Path ( ) , child Dest . to Path ( ) , Standard Copy Option . COPY ATTRIBUTES ) ; } } }", "else {", "File child Dest = new File ( dest , root . get Name ( ) ) ;", "if ( ! dest . exists ( ) && ! mkdirs ( dest ) ) throw new IO Exception ( STR_ + dest . get Path ( ) ) ;", "Files . copy ( root . to Path ( ) , child Dest . to Path ( ) , Standard Copy Option . COPY ATTRIBUTES ) ; } }"]}
{"ids": "11529", "code": ["public void paint Line ( Point 2 D pt 1 , Point 2 D pt 2 ) {", "if ( pt 1 != null && pt 2 != null ) {", "OM Line c Line = new OM Line ( pt 1 . get Y ( ) , pt 1 . get X ( ) , pt 2 . get Y ( ) , pt 2 . get X ( ) , OM Graphic . LINETYPE GREATCIRCLE ) ;", "Projection proj = the Map . get Projection ( ) ;", "c Line . generate ( proj ) ;", "distance List . add ( c Line ) ; } }"]}
{"ids": "21723", "code": ["public static boolean has Export Mask For Storage And V Array ( Db Client db Client , Export Group export Group , URI storage URI ) {", "Set < String > storage Port UR Is Associated With V Array And Storage Array = Export Mask Utils . get Storage Port Uris Associated With Varray And Storage Array ( storage URI , export Group . get Virtual Array ( ) , db Client ) ;", "String Set mask Uri Set = export Group . get Export Masks ( ) ;", "if ( mask Uri Set != null ) {", "for ( String mask Uri String : mask Uri Set ) {", "Export Mask mask = db Client . query Object ( Export Mask . class , URI . create ( mask Uri String ) ) ;", "URI mask Storage URI = mask . get Storage Device ( ) ;", "if ( mask Storage URI . equals ( storage URI ) ) {", "for ( String storage Port : mask . get Storage Ports ( ) ) {", "if ( storage Port UR Is Associated With V Array And Storage Array . contains ( storage Port ) ) return true ; } } } }", "return false ; }"]}
{"ids": "2024", "code": ["private void preload ( int first , boolean increasing ) {", "final int start ;", "final int end ;", "if ( increasing ) {", "start = Math . max ( first , m Last End ) ;", "end = Math . min ( first + m Load Ahead Items , m Item Source . get Count ( ) ) ; }", "else {", "start = Math . max ( NUM_ , first - m Load Ahead Items ) ;", "end = Math . min ( first , m Last Start ) ; }", "Log . v ( TAG , STR_ + first + STR_ + increasing + STR_ + start + STR_ + end ) ;", "m Last End = end ;", "m Last Start = start ;", "if ( start == NUM_ && end == NUM_ ) {", "return ; }", "final List < T > items = m Item Source . get Items In Range ( start , end ) ;", "if ( ! increasing ) {", "Collections . reverse ( items ) ; }", "register Load Tokens ( m Item Loader . preload Items ( items ) ) ; }"]}
{"ids": "19677", "code": ["private void init RMI Parameters ( ) throws Exception {", "if ( rmi Host Master == null || rmi Port Master == null ) {", "File conf Dir = Replicator Runtime Conf . locate Replicator Conf Dir ( ) ;", "File props File = new File ( conf Dir , Replication Service Manager . CONFIG SERVICES ) ;", "println ( String . format ( STR_ , props File ) ) ;", "Tungsten Properties service Props = Properties Manager . load Properties ( props File ) ;", "if ( rmi Port Master == null ) rmi Port Master = service Props . get String ( Replicator Conf . RMI PORT , Replicator Conf . RMI DEFAULT PORT , false ) ;", "if ( rmi Host Master == null ) rmi Host Master = Replication Service Manager . get Host Name ( service Props ) ; } }"]}
{"ids": "14339", "code": ["public String encode Key ( final String key ) {", "if ( String Utils . is Empty ( key ) ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "try {", "return Hex . encode Hex String ( key . get Bytes ( STR_ ) ) ; }", "catch ( Unsupported Encoding Exception uee ) {", "throw new Illegal State Exception ( uee ) ; } }"]}
{"ids": "74654", "code": ["public static boolean restore ( ) {", "File restore Config = new File ( RESTORATION PROPERTIES ) ;", "if ( restore Config . exists ( ) && restore Config . is File ( ) ) {", "logger . info ( STR_ ) ;", "try ( File Input Stream stream = new File Input Stream ( restore Config ) ) {", "Properties properties = new Properties ( ) ;", "properties . load ( stream ) ;", "restore Database ( properties ) ;", "restore Solr Index ( properties ) ; }", "catch ( Unsupported Operation Exception e ) {", "logger . error ( STR_ , e ) ;", "System . set Property ( STR_ , STR_ ) ; }", "catch ( Exception e ) {", "logger . fatal ( STR_ , e ) ;", "return false ; }", "finally {", "restore Config . delete ( ) ; } }", "return true ; }"]}
{"ids": "68021", "code": ["@ Override public void write Comment ( String data ) throws XML Stream Exception {", "log . log ( Level . FINE , STR_ , data ) ; }"]}
{"ids": "15679", "code": ["public static File from Data URI ( String data URI , String file Name ) {", "return File . create If Supported ( from Data URI ( data URI ) , file Name ) ; }"]}
{"ids": "33424", "code": ["protected List extract Discovery Information ( XRDS xrds , Xri Identifier identifier , Resolver xri Resolver ) throws Discovery Exception {", "Array List endpoints = new Array List ( ) ;", "XRD xrd = xrds . get Final XRD ( ) ;", "extract Discovery Information Open ID ( xri Resolver , endpoints , xrd , identifier , Discovery Information . OPENID 2 OP , false ) ;", "extract Discovery Information Open ID ( xri Resolver , endpoints , xrd , identifier , Discovery Information . OPENID 2 , true ) ;", "extract Discovery Information Open ID ( xri Resolver , endpoints , xrd , identifier , Discovery Information . OPENID 11 , true ) ;", "extract Discovery Information Open ID ( xri Resolver , endpoints , xrd , identifier , Discovery Information . OPENID 10 , true ) ;", "if ( endpoints . size ( ) == NUM_ ) log . info ( STR_ ) ;", "return endpoints ; }"]}
{"ids": "20821", "code": ["public static void clear Recent Files ( ) {", "String str = Program Properties . get ( RECENTFILES , STR_ ) ;", "if ( str . length ( ) != NUM_ ) {", "Program Properties . put ( RECENTFILES , STR_ ) ;", "notify List Change ( RECENTFILES ) ; } }"]}
{"ids": "78720", "code": ["public static boolean are Equivalent ( final Type Reference a , final Type Reference b ) {", "return are Equivalent ( a , b , true ) ; }"]}
{"ids": "49201", "code": ["private boolean init X Settings If Needed ( final String prop Name ) {", "if ( ! loaded X Settings && ( prop Name . starts With ( STR_ ) || prop Name . equals ( Sun Toolkit . DESKTOPFONTHINTS ) || prop Name . starts With ( dnd Prefix ) ) ) {", "loaded X Settings = true ;", "if ( ! Graphics Environment . is Headless ( ) ) {", "load X Settings ( ) ;", "if ( desktop Properties . get ( Sun Toolkit . DESKTOPFONTHINTS ) == null ) {", "if ( XWM . is KDE 2 ( ) ) {", "Object hint = fc Manager . get Font Config AA Hint ( ) ;", "if ( hint != null ) {", "desktop Properties . put ( UNIX Toolkit . FONTCONFIGAAHINT , hint ) ; } }", "desktop Properties . put ( Sun Toolkit . DESKTOPFONTHINTS , Sun Toolkit . get Desktop Font Hints ( ) ) ; }", "return true ; } }", "return false ; }"]}
{"ids": "36489", "code": ["private void update Sorting Icons ( ) {", "for ( Sorting Type type : Sorting Type . values ( ) ) {", "Sorting Direction direction = model . get Sorting Direction ( type ) ;", "Image Icon icon ;", "switch ( direction ) {", "case DESCENDING :", "icon = ICON ARROW DOWN ;", "break ;", "case ASCENDING :", "icon = ICON ARROW UP ;", "break ;", "case UNDEFINED :", "icon = null ;", "break ;", "default :", "icon = null ; }", "switch ( type ) {", "case NAME :", "sorting Label Att Name . set Icon ( icon ) ;", "break ;", "case TYPE :", "sorting Label Att Type . set Icon ( icon ) ;", "break ;", "case MISSING :", "sorting Label Att Missings . set Icon ( icon ) ;", "break ;", "default :", "sorting Label Att Name . set Icon ( null ) ;", "sorting Label Att Type . set Icon ( null ) ;", "sorting Label Att Missings . set Icon ( null ) ; } } }"]}
{"ids": "77833", "code": ["private void restore Icon ( Key key , byte [ ] buffer , int data Size ) throws IO Exception {", "if ( VERBOSE ) Log . v ( TAG , STR_ + key . id ) ;", "if ( DEBUG ) Log . d ( TAG , STR_ + buffer . length + STR_ + Base 64 . encode To String ( buffer , NUM_ , data Size , Base 64 . NO WRAP ) ) ;", "Resource res = unpack Proto ( new Resource ( ) , buffer , data Size ) ;", "if ( DEBUG ) {", "Log . d ( TAG , STR_ + res . dpi + STR_ ) ; }", "Bitmap icon = Bitmap Factory . decode Byte Array ( res . data , NUM_ , res . data . length ) ;", "if ( icon == null ) {", "Log . w ( TAG , STR_ + key . name ) ; }", "if ( VERBOSE ) Log . v ( TAG , STR_ + key . name ) ;", "Icon Cache . preload Icon ( m Context , Component Name . unflatten From String ( key . name ) , icon , res . dpi ) ; }"]}
{"ids": "20447", "code": ["public static void read Bytes ( Input Stream is , byte [ ] b , int offset , int len ) {", "if ( len == NUM_ ) return ;", "try {", "int read = NUM_ ;", "while ( read < len ) {", "int n = is . read ( b , offset + read , len - read ) ;", "if ( n < NUM_ ) throw new Pngj Input Exception ( STR_ + n + STR_ + len ) ;", "read += n ; } }", "catch ( IO Exception e ) {", "throw new Pngj Input Exception ( STR_ , e ) ; } }"]}
{"ids": "81369", "code": ["public Character Match ( char [ ] chars ) {", "Assert . is Not Null ( chars ) ;", "Assert . is True ( chars . length > NUM_ ) ;", "f Chars = chars ;", "Arrays . sort ( chars ) ; }"]}
{"ids": "38307", "code": ["public void add Action Listener ( Action Listener new A ) {", "m Listeners . add ( new A ) ; }"]}
{"ids": "22627", "code": ["public boolean remove Container And Cancel If Necessary ( Image Container container ) {", "m Containers . remove ( container ) ;", "if ( m Containers . size ( ) == NUM_ ) {", "m Request . cancel ( ) ;", "return true ; }", "return false ; }"]}
{"ids": "61090", "code": ["public static byte [ ] encode ( byte [ ] data , int off , int length ) {", "Byte Array Output Stream b Out = new Byte Array Output Stream ( ) ;", "try {", "encoder . encode ( data , off , length , b Out ) ; }", "catch ( Exception e ) {", "throw new Encoder Exception ( STR_ + e . get Message ( ) , e ) ; }", "return b Out . to Byte Array ( ) ; }"]}
{"ids": "83423", "code": ["public double distance To Line Segment ( Lat Long A , Lat Long B ) {", "double Ax = ( A . lng - lng ) * Math . cos ( NUM_ * radians * ( A . lat + lat ) ) ;", "double Ay = ( A . lat - lat ) ;", "double Bx = ( B . lng - lng ) * Math . cos ( NUM_ * radians * ( B . lat + lat ) ) ;", "double By = ( B . lat - lat ) ;", "if ( Ay == By ) {", "if ( ( Ax < NUM_ && Bx < NUM_ ) || ( Ax > NUM_ && Bx > NUM_ ) ) return Math . sqrt ( Math . min ( Ax * Ax + Ay * Ay , Bx * Bx + By * By ) ) * Earth Radius * radians ;", "if ( Ax == Bx ) return Math . sqrt ( Ax * Ax + Ay * Ay ) * Earth Radius * radians ; }", "else {", "double Ix = ( ( By - Ay ) * ( Ax * By - Ay * Bx ) ) / ( ( Ax - Bx ) * ( Ax - Bx ) + ( Ay - By ) * ( Ay - By ) ) ;", "if ( ( Ix < Ax && Ix < Bx ) || ( Ix > Ax && Ix > Bx ) ) {", "return Math . sqrt ( Math . min ( Ax * Ax + Ay * Ay , Bx * Bx + By * By ) ) * Earth Radius * radians ; } }", "return Math . abs ( ( Bx - Ax ) * Ay - Ax * ( By - Ay ) ) / Math . sqrt ( ( Bx - Ax ) * ( Bx - Ax ) + ( By - Ay ) * ( By - Ay ) ) * Earth Radius * radians ; }"]}
{"ids": "76495", "code": ["@ Not Null public List < Player Nbt > create Multiplayer Player Nbts ( ) {", "List < Player Nbt > result = new Array List < Player Nbt > ( ) ;", "for ( File playerdata File : get Playerdata Files ( ) ) {", "if ( playerdata File . is File ( ) ) {", "result . add ( create Playerdata Player Nbt ( get Player UUID From Playerdata File ( playerdata File ) ) ) ; } }", "if ( ! result . is Empty ( ) ) {", "Log . i ( STR_ ) ;", "return result ; }", "for ( File players File : get Players Files ( ) ) {", "if ( players File . is File ( ) ) {", "result . add ( create Players Player Nbt ( get Player Name From Players File ( players File ) ) ) ; } }", "if ( ! result . is Empty ( ) ) {", "Log . i ( STR_ ) ;", "return result ; }", "Log . i ( STR_ ) ;", "return result ; }"]}
{"ids": "6635", "code": ["private void show ( Setup Window window ) {", "window . handle Window Opening Event ( ) ;", "setup Window Holder . show ( window . get Key ( ) ) ;", "current Window = window ; }"]}
{"ids": "82512", "code": ["public java . lang . String Buffer append ( java . lang . String str ) {", "internal . append ( str ) ;", "return this ; }"]}
{"ids": "62120", "code": ["private static String replace Stars ( String init ) {", "String Builder builder = new String Builder ( ) ;", "char [ ] chars = init . to Char Array ( ) ;", "for ( int i = NUM_ ; i < chars . length ; i ++ ) {", "if ( chars [ i ] == STR_ && i == NUM_ && chars . length > NUM_ && chars [ i + NUM_ ] == STR_ ) {", "builder . append ( STR_ ) ;", "i ++ ; }", "else if ( chars [ i ] == STR_ && i < ( chars . length - NUM_ ) && i > NUM_ && chars [ i + NUM_ ] == STR_ && chars [ i - NUM_ ] == STR_ ) {", "builder . delete Char At ( builder . length ( ) - NUM_ ) ;", "builder . append ( STR_ ) ; }", "else if ( chars [ i ] == STR_ && i == ( chars . length - NUM_ ) && i > NUM_ && chars [ i - NUM_ ] == STR_ ) {", "builder . delete Char At ( builder . length ( ) - NUM_ ) ;", "builder . append ( STR_ ) ; }", "else if ( chars [ i ] == STR_ ) {", "builder . append ( STR_ ) ; }", "else {", "builder . append ( chars [ i ] ) ; } }", "return builder . to String ( ) ; }"]}
{"ids": "29099", "code": ["public void start Option Group ( String description ) {", "option Groups . put ( option List . size ( ) , description ) ; }"]}
{"ids": "15879", "code": ["private byte [ ] encrypt ( byte [ ] m , NTRU Encryption Public Key Parameters pub Key ) {", "Integer Polynomial pub = pub Key . h ;", "int N = params . N ;", "int q = params . q ;", "int max Len Bytes = params . max Msg Len Bytes ;", "int db = params . db ;", "int buffer Len Bits = params . buffer Len Bits ;", "int dm 0 = params . dm 0 ;", "int pk Len = params . pk Len ;", "int min Calls Mask = params . min Calls Mask ;", "boolean hash Seed = params . hash Seed ;", "byte [ ] oid = params . oid ;", "int l = m . length ;", "if ( max Len Bytes > NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "if ( l > max Len Bytes ) {", "throw new Data Length Exception ( STR_ + l + STR_ + max Len Bytes ) ; }", "while ( true ) {", "byte [ ] b = new byte [ db / NUM_ ] ;", "random . next Bytes ( b ) ;", "byte [ ] p 0 = new byte [ max Len Bytes + NUM_ - l ] ;", "byte [ ] M = new byte [ buffer Len Bits / NUM_ ] ;", "System . arraycopy ( b , NUM_ , M , NUM_ , b . length ) ;", "M [ b . length ] = ( byte ) l ;", "System . arraycopy ( m , NUM_ , M , b . length + NUM_ , m . length ) ;", "System . arraycopy ( p 0 , NUM_ , M , b . length + NUM_ + m . length , p 0 . length ) ;", "Integer Polynomial m Trin = Integer Polynomial . from Binary 3 Sves ( M , N ) ;", "byte [ ] bh = pub . to Binary ( q ) ;", "byte [ ] h Trunc = copy Of ( bh , pk Len / NUM_ ) ;", "byte [ ] s Data = build S Data ( oid , m , l , b , h Trunc ) ;", "Polynomial r = generate Blinding Poly ( s Data , M ) ;", "Integer Polynomial R = r . mult ( pub , q ) ;", "Integer Polynomial R 4 = ( Integer Polynomial ) R . clone ( ) ;", "R 4 . mod Positive ( NUM_ ) ;", "byte [ ] o R 4 = R 4 . to Binary ( NUM_ ) ;", "Integer Polynomial mask = MGF ( o R 4 , N , min Calls Mask , hash Seed ) ;", "m Trin . add ( mask ) ;", "m Trin . mod 3 ( ) ;", "if ( m Trin . count ( - NUM_ ) < dm 0 ) {", "continue ; }", "if ( m Trin . count ( NUM_ ) < dm 0 ) {", "continue ; }", "if ( m Trin . count ( NUM_ ) < dm 0 ) {", "continue ; }", "R . add ( m Trin , q ) ;", "R . ensure Positive ( q ) ;", "return R . to Binary ( q ) ; } }"]}
{"ids": "9186", "code": ["public final void expect At Least One Result ( Result Set rs ) throws Ade Internal Exception , SQL Exception {", "if ( ! rs . next ( ) ) {", "throw new Ade Internal Exception ( STR_ + m sql ) ; } }"]}
{"ids": "1556", "code": ["public Sequence ( ) {", "this ( INITIAL VALUE ) ; }"]}
{"ids": "26111", "code": ["public static Optional < Mongo Credential > create Credentials ( String username , String password , String database ) {", "if ( ! Strings . is Null Or Empty ( username ) && ! Strings . is Null Or Empty ( password ) && ! Strings . is Null Or Empty ( database ) ) {", "return Optional . of ( Mongo Credential . create Mongo CR Credential ( username , database , password . to Char Array ( ) ) ) ; }", "else {", "return Optional . absent ( ) ; } }"]}
{"ids": "24188", "code": ["@ Override public void stop ( ) {", "if ( executor Service != null ) {", "executor Service . shutdown ( ) ; }", "rest Template = null ; }"]}
{"ids": "85858", "code": ["public void write Exif ( Input Stream jpeg Stream , String exif Out File Name ) throws File Not Found Exception , IO Exception {", "if ( jpeg Stream == null || exif Out File Name == null ) {", "throw new Illegal Argument Exception ( NULL ARGUMENT STRING ) ; }", "Output Stream s = null ;", "try {", "s = get Exif Writer Stream ( exif Out File Name ) ;", "do Exif Stream IO ( jpeg Stream , s ) ;", "s . flush ( ) ; }", "catch ( IO Exception e ) {", "close Silently ( s ) ;", "throw e ; }", "s . close ( ) ; }"]}
{"ids": "45852", "code": ["public Result Record ( Directory Scanner Config scan , Action [ ] actions , File f ) {", "directory Scanner = scan . get Name ( ) ;", "this . actions = actions ;", "date = new Date ( ) ;", "filename = f . get Absolute Path ( ) ; }"]}
{"ids": "48955", "code": ["private Method Doc find Impl Method ( Method Doc interface Method ) {", "String name = interface Method . name ( ) ;", "String desc = Util . method Descriptor Of ( interface Method ) ;", "for ( Method Doc impl Method : impl Class . methods ( ) ) {", "if ( name . equals ( impl Method . name ( ) ) && desc . equals ( Util . method Descriptor Of ( impl Method ) ) ) {", "return impl Method ; } }", "return null ; }"]}
{"ids": "34990", "code": ["protected static List < String > extract Boot Class Path ( final List < String > args ) {", "return extract Opt With Pattern ( BOOT CLASS PATH REGEX , false , args ) ; }"]}
{"ids": "84606", "code": ["public Contour Path ( Contour Attrib attr , int level Index , double [ ] x , double [ ] y ) {", "x Arr = x ;", "y Arr = y ;", "this . level Index = level Index ;", "attributes = attr ;", "int np = x Arr . length ;", "if ( Math . abs ( x [ NUM_ ] - x [ np - NUM_ ] ) < k Small X && Math . abs ( y [ NUM_ ] - y [ np - NUM_ ] ) < k Small Y ) {", "closed = true ;", "x [ np - NUM_ ] = x [ NUM_ ] ;", "y [ np - NUM_ ] = y [ NUM_ ] ; }", "else closed = false ; }"]}
{"ids": "63391", "code": ["@ Override public void remove Connection Event Listener ( Connection Event Listener listener ) {", "debug Code ( STR_ ) ;", "listeners . remove ( listener ) ; }"]}
{"ids": "6534", "code": ["public boolean is Downloadable ( ) {", "List < String > topics = get Exact Topics ( ) ;", "for ( String xt : topics ) if ( xt . starts With ( STR_ ) ) return true ;", "if ( get Default UR Ls ( ) . length > NUM_ ) {", "return true ; }", "return false ; }"]}
{"ids": "33638", "code": ["public boolean is Satisfied By ( Date date ) {", "Calendar test Date Cal = Calendar . get Instance ( get Time Zone ( ) ) ;", "test Date Cal . set Time ( date ) ;", "test Date Cal . set ( Calendar . MILLISECOND , NUM_ ) ;", "Date original Date = test Date Cal . get Time ( ) ;", "test Date Cal . add ( Calendar . SECOND , - NUM_ ) ;", "Date time After = get Time After ( test Date Cal . get Time ( ) ) ;", "return ( ( time After != null ) && ( time After . equals ( original Date ) ) ) ; }"]}
{"ids": "64516", "code": ["public static Vector < String > scan For Dir Logs ( final String current Path ) {", "if ( Cfg . DEBUG ) {", "Check . requires ( current Path != null , STR_ ) ; }", "File fc ;", "final Vector < String > vector = new Vector < String > ( ) ;", "try {", "fc = new File ( current Path ) ;", "if ( fc . is Directory ( ) ) {", "final String [ ] file Logs = fc . list ( ) ;", "for ( final String dir : file Logs ) {", "final File fdir = new File ( current Path + dir ) ;", "if ( fdir . is Directory ( ) ) {", "vector . add Element ( dir + STR_ ) ;", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ + dir ) ; } } } } }", "catch ( final Exception e ) {", "if ( Cfg . EXCEPTION ) {", "Check . log ( e ) ; }", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ + e ) ; } }", "if ( Cfg . DEBUG ) {", "Check . log ( TAG + STR_ + vector . size ( ) ) ; }", "return vector ; }"]}
{"ids": "24551", "code": ["private static Array List < String > flatten Rows ( Cursor cursor , int limit ) {", "Util . throw If Not ( limit >= NUM_ ) ;", "Array List < String > flat List = new Array List < > ( ) ;", "final int num Columns = cursor . get Column Count ( ) ;", "for ( int row = NUM_ ; row < limit && cursor . move To Next ( ) ; row ++ ) {", "for ( int column = NUM_ ; column < num Columns ; column ++ ) {", "switch ( cursor . get Type ( column ) ) {", "case Cursor . FIELD TYPE NULL :", "flat List . add ( null ) ;", "break ;", "case Cursor . FIELD TYPE INTEGER :", "flat List . add ( String . value Of ( cursor . get Long ( column ) ) ) ;", "break ;", "case Cursor . FIELD TYPE FLOAT :", "flat List . add ( String . value Of ( cursor . get Double ( column ) ) ) ;", "break ;", "case Cursor . FIELD TYPE BLOB :", "flat List . add ( blob To String ( cursor . get Blob ( column ) ) ) ;", "break ;", "case Cursor . FIELD TYPE STRING :", "default :", "flat List . add ( cursor . get String ( column ) ) ;", "break ; } } }", "if ( ! cursor . is After Last ( ) ) {", "for ( int column = NUM_ ; column < num Columns ; column ++ ) {", "flat List . add ( STR_ ) ; } }", "return flat List ; }"]}
{"ids": "3859", "code": ["private Process execute Compiler ( Array List < String > arg List , Array List < String > env List , boolean chdir ) throws IO Exception {", "String [ ] args ;", "if ( chdir ) {", "Char Buffer cb = new Char Buffer ( ) ;", "cb . append ( STR_ ) ;", "cb . append ( compiler . get Source Dir Name ( ) ) ;", "cb . append ( STR_ ) ;", "for ( int i = NUM_ ; i < arg List . size ( ) ; i ++ ) {", "cb . append ( STR_ ) ;", "cb . append ( arg List . get ( i ) ) ; }", "args = new String [ NUM_ ] ;", "args [ NUM_ ] = STR_ ;", "args [ NUM_ ] = STR_ ;", "args [ NUM_ ] = cb . to String ( ) ; }", "else {", "args = new String [ arg List . size ( ) ] ;", "arg List . to Array ( args ) ; }", "String [ ] envp = new String [ env List . size ( ) ] ;", "env List . to Array ( envp ) ;", "if ( log . is Loggable ( Level . FINE ) ) {", "Char Buffer cb = Char Buffer . allocate ( ) ;", "for ( int i = NUM_ ; i < args . length ; i ++ ) {", "if ( i != NUM_ ) cb . append ( STR_ ) ;", "cb . append ( args [ i ] ) ; }", "log . fine ( cb . close ( ) ) ; }", "Runtime runtime = Runtime . get Runtime ( ) ;", "try {", "return runtime . exec ( args ) ; }", "catch ( Exception e ) {", "throw new Java Compile Exception ( L . l ( STR_ , args [ NUM_ ] , String . value Of ( e ) ) ) ; } }"]}
{"ids": "24418", "code": ["public void collapse All Parents ( ) {", "if ( m Data List != null && ! m Data List . is Empty ( ) ) {", "Array List < Object > expandable List Items = get Parents ( true ) ;", "if ( expandable List Items != null && ! expandable List Items . is Empty ( ) ) {", "final int expanded Item Size = expandable List Items . size ( ) ;", "if ( expanded Item Size > NUM_ ) {", "for ( int i = NUM_ ; i < expanded Item Size ; i ++ ) {", "Object o = expandable List Items . get ( i ) ;", "int index Of = m Data List . index Of ( o ) ;", "if ( index Of >= NUM_ ) collapse List Item ( index Of , ( Base Expandable Observable ) o , false ) ; } } } } }"]}
{"ids": "85226", "code": ["@ Deprecated protected Pdf Form X Object draw Push Button Appearance ( float width , float height , String text , Pdf Font font , int font Size ) {", "return draw Push Button Appearance ( width , height , text , font , ( float ) font Size ) ; }"]}
{"ids": "13536", "code": ["public NBT Tag Compound load File ( File save Directory , String filename ) {", "return load File ( new File ( save Directory , filename + STR_ ) ) ; }"]}
{"ids": "42867", "code": ["public boolean dns Domain Is ( String host , String domain ) {", "return host . ends With ( domain ) ; }"]}
{"ids": "83699", "code": ["@ Suppress Warnings ( STR_ ) public Selection Builder reset ( ) {", "m Table = null ;", "if ( m Projection Map != null ) {", "m Projection Map . clear ( ) ; }", "if ( m Selection != null ) {", "m Selection . set Length ( NUM_ ) ; }", "if ( m Selection Args != null ) {", "m Selection Args . clear ( ) ; }", "return this ; }"]}
{"ids": "48089", "code": ["private final synchronized Enumeration < Policy Entry > elements ( ) {", "return policy Entries . elements ( ) ; }"]}
{"ids": "45751", "code": ["public String format ( Calendar calendar , Calendar smsc Calendar ) {", "if ( calendar == null || smsc Calendar == null ) {", "return null ; }", "long diff Time In Millis = calendar . get Time In Millis ( ) - smsc Calendar . get Time In Millis ( ) ;", "if ( diff Time In Millis < NUM_ ) {", "throw new Illegal Argument Exception ( STR_ ) ; }", "Calendar offset Epoch = Calendar . get Instance ( utc Time Zone ) ;", "offset Epoch . set Time In Millis ( diff Time In Millis ) ;", "int years = offset Epoch . get ( Calendar . YEAR ) - NUM_ ;", "int months = offset Epoch . get ( Calendar . MONTH ) ;", "int days = offset Epoch . get ( Calendar . DAY OF MONTH ) - NUM_ ;", "int hours = offset Epoch . get ( Calendar . HOUR OF DAY ) ;", "int minutes = offset Epoch . get ( Calendar . MINUTE ) ;", "int seconds = offset Epoch . get ( Calendar . SECOND ) ;", "if ( years >= NUM_ ) {", "throw new Illegal Argument Exception ( STR_ + years + STR_ ) ; }", "return format ( years , months , days , hours , minutes , seconds ) ; }"]}
{"ids": "37897", "code": ["private void calculate Entropy ( double scale , K Star Wrapper params ) {", "int i , j , k ;", "double actent = NUM_ , randent = NUM_ ;", "double pstar , tprob , avgprob = NUM_ , minprob = NUM_ ;", "double act Class Prob , rand Class Prob ;", "double [ ] [ ] pseudo Class Probs = new double [ NUM RAND COLS + NUM_ ] [ m Num Classes ] ;", "for ( j = NUM_ ; j <= NUM RAND COLS ; j ++ ) {", "for ( i = NUM_ ; i < m Num Classes ; i ++ ) {", "pseudo Class Probs [ j ] [ i ] = NUM_ ; } }", "for ( i = NUM_ ; i < m Num Instances ; i ++ ) {", "if ( m Distances [ i ] < NUM_ ) {", "continue ; }", "else {", "pstar = P Star ( m Distances [ i ] , scale ) ;", "tprob = pstar / m Actual Count ;", "avgprob += tprob ;", "if ( pstar < minprob ) {", "minprob = pstar ; }", "for ( k = NUM_ ; k <= NUM RAND COLS ; k ++ ) {", "pseudo Class Probs [ k ] [ m Rand Class Cols [ k ] [ i ] ] += tprob ; } } }", "for ( j = m Num Classes - NUM_ ; j >= NUM_ ; j -- ) {", "act Class Prob = pseudo Class Probs [ NUM RAND COLS ] [ j ] / avgprob ;", "if ( act Class Prob > NUM_ ) {", "actent -= act Class Prob * Math . log ( act Class Prob ) / LOG 2 ; } }", "for ( k = NUM_ ; k < NUM RAND COLS ; k ++ ) {", "for ( i = m Num Classes - NUM_ ; i >= NUM_ ; i -- ) {", "rand Class Prob = pseudo Class Probs [ k ] [ i ] / avgprob ;", "if ( rand Class Prob > NUM_ ) {", "randent -= rand Class Prob * Math . log ( rand Class Prob ) / LOG 2 ; } } }", "randent /= NUM RAND COLS ;", "params . act Entropy = actent ;", "params . rand Entropy = randent ;", "params . avg Prob = avgprob ;", "params . min Prob = minprob ; }"]}
{"ids": "58299", "code": ["public static void init Cause ( Throwable throwable , Throwable cause ) {", "if ( INIT CAUSE METHOD != null ) {", "try {", "INIT CAUSE METHOD . invoke ( throwable , new Object [ ] { cause } ) ; }", "catch ( Exception e ) { } } }"]}
{"ids": "37481", "code": ["public static boolean can Run ( final File file ) {", "return manager . get Engine By Extension ( File Utils . get File Extension ( file ) ) != null ; }"]}
{"ids": "36720", "code": ["public void parse Element ( String tag Name , Map < String , Object > attrs ) {", "if ( canvas == null && tag Name . equals Ignore Case ( STR_ ) ) {", "scale = mx Utils . get Double ( attrs , STR_ , NUM_ ) ;", "canvas = create Canvas ( attrs ) ;", "if ( canvas != null ) {", "canvas . set Scale ( scale ) ; } }", "else if ( canvas != null ) {", "boolean draw Label = false ;", "if ( tag Name . equals Ignore Case ( STR_ ) || tag Name . equals Ignore Case ( STR_ ) ) {", "draw Vertex ( attrs ) ;", "draw Label = true ; }", "else if ( tag Name . equals Ignore Case ( STR_ ) ) {", "draw Edge ( attrs ) ;", "draw Label = true ; }", "if ( draw Label ) {", "draw Label ( tag Name . equals Ignore Case ( STR_ ) , attrs ) ; } } }"]}
{"ids": "34764", "code": ["private void start Precaching ( ) {", "Log . v ( TAG , STR_ ) ;", "prepare Native Libraries ( ) ;", "s Is Precaching = true ;", "acquire Precaching Wake Lock ( ) ;", "m Precache Launcher . start ( ) ; }"]}
{"ids": "38242", "code": ["@ Override public Enumeration < Option > list Options ( ) {", "Vector < Option > new Vector = new Vector < Option > ( NUM_ ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "new Vector . add Element ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ;", "return new Vector . elements ( ) ; }"]}
{"ids": "16675", "code": ["public Word Alignment State ( final Rule rule , final int start ) {", "trg Points = new Linked List < > ( ) ;", "src Length = rule . get French ( ) . length ;", "num NT = rule . get Arity ( ) ;", "src Start = start ;", "final Map < Integer , List < Integer > > alignment Map = rule . get Alignment Map ( ) ;", "final int [ ] non Terminal Source Positions = rule . get Non Terminal Source Positions ( ) ;", "final int [ ] trg = rule . get English ( ) ;", "for ( int trg Index = NUM_ ; trg Index < trg . length ; trg Index ++ ) {", "final Aligned Source Tokens trg Point = new Aligned Source Tokens ( ) ;", "if ( trg [ trg Index ] >= NUM_ ) {", "if ( alignment Map . contains Key ( trg Index ) ) {", "for ( int src Idx : alignment Map . get ( trg Index ) ) {", "trg Point . add ( src Start + src Idx ) ; } }", "else {", "trg Point . set Null ( ) ; } }", "else {", "trg Point . set Non Terminal ( ) ;", "final int absolute Non Terminal Source Position = src Start + non Terminal Source Positions [ Math . abs ( trg [ trg Index ] ) - NUM_ ] ;", "trg Point . add ( absolute Non Terminal Source Position ) ; }", "trg Points . add ( trg Point ) ; } }"]}
{"ids": "11758", "code": ["protected void configure Image Reader Loaders ( ) {", "image Reader Loaders = new Vector < Image Reader Loader > ( ) ;", "Image Reader Loader idl = ( Image Reader Loader ) Component Factory . create ( STR_ ) ;", "if ( idl != null ) {", "image Reader Loaders . add ( idl ) ; }", "else {", "logger . warning ( STR_ ) ; }", "idl = ( Image Reader Loader ) Component Factory . create ( STR_ ) ;", "if ( idl != null ) {", "image Reader Loaders . add ( idl ) ; }", "else {", "logger . warning ( STR_ ) ; } }"]}
{"ids": "49344", "code": ["protected void handle Special Substitution ( String replace , String replace With , int start Pos , String description ) {", "if ( replace . equals ( STR_ ) ) {", "if ( replace With . char At ( NUM_ ) == STR_ ) {", "error ( STR_ , start Pos , description ) ; }", "ignore Chars = Char Set . parse String ( replace With ) ; } }"]}
{"ids": "36121", "code": ["@ Override public void count Example ( Example example ) {", "double plabel ;", "double label = example . get Value ( label Attribute ) ;", "if ( ! predicted Attribute . is Nominal ( ) ) {", "plabel = example . get Value ( predicted Attribute ) ; }", "else {", "String label S = example . get Value As String ( label Attribute ) ;", "plabel = example . get Confidence ( label S ) ;", "label = NUM_ ; }", "double weight = NUM_ ;", "if ( weight Attribute != null ) {", "weight = example . get Value ( weight Attribute ) ; }", "double diff = weight * Math . abs ( label - plabel ) ;", "deviation Sum += diff ;", "double rel Diff = Math . abs ( weight * label - ( true Label Sum / example Counter ) ) ;", "relative Sum += rel Diff ; }"]}
{"ids": "53925", "code": ["public static void unzip ( String zip File , String location ) throws IO Exception {", "final int BUFFER SIZE = NUM_ ;", "int size ;", "byte [ ] buffer = new byte [ BUFFER SIZE ] ;", "try {", "if ( ! location . ends With ( STR_ ) ) {", "location += STR_ ; }", "File f = new File ( location ) ;", "if ( ! f . is Directory ( ) ) {", "f . mkdirs ( ) ; }", "Zip Input Stream zin = new Zip Input Stream ( new Buffered Input Stream ( new File Input Stream ( zip File ) , BUFFER SIZE ) ) ;", "try {", "Zip Entry ze = null ;", "while ( ( ze = zin . get Next Entry ( ) ) != null ) {", "String path = location + ze . get Name ( ) ;", "File unzip File = new File ( path ) ;", "if ( ze . is Directory ( ) ) {", "if ( ! unzip File . is Directory ( ) ) {", "unzip File . mkdirs ( ) ; } }", "else {", "File parent Dir = unzip File . get Parent File ( ) ;", "if ( null != parent Dir ) {", "if ( ! parent Dir . is Directory ( ) ) {", "parent Dir . mkdirs ( ) ; } }", "File Output Stream out = new File Output Stream ( unzip File , false ) ;", "Buffered Output Stream fout = new Buffered Output Stream ( out , BUFFER SIZE ) ;", "try {", "while ( ( size = zin . read ( buffer , NUM_ , BUFFER SIZE ) ) != - NUM_ ) {", "fout . write ( buffer , NUM_ , size ) ; }", "zin . close Entry ( ) ; }", "finally {", "fout . flush ( ) ;", "fout . close ( ) ; } } } }", "finally {", "zin . close ( ) ; } }", "catch ( Exception e ) {", "Log . e ( TAG , STR_ , e ) ; } }"]}
{"ids": "35018", "code": ["private void add Decl Annotations ( Map < String , Set < Annotation Mirror > > decl Annos , Element elt ) {", "if ( from Stub File != null ) {", "Set < Annotation Mirror > annos = decl Annos . get ( Element Utils . get Verbose Name ( elt ) ) ;", "if ( annos == null ) {", "annos = Annotation Utils . create Annotation Set ( ) ;", "put Or Add To Map ( decl Annos , Element Utils . get Verbose Name ( elt ) , annos ) ; }", "annos . add ( from Stub File ) ; } }"]}
{"ids": "62898", "code": ["private void inspect Conditions With Booleans ( Linked List < Psi Element > obj Branch Conditions ) {", "for ( Psi Element obj Expression : obj Branch Conditions ) {", "if ( ! ( obj Expression instanceof Constant Reference ) ) {", "continue ; }", "if ( Expression Semantic Util . is Boolean ( ( Constant Reference ) obj Expression ) ) {", "holder . register Problem ( obj Expression , str Problem Description Booleans , Problem Highlight Type . GENERIC ERROR OR WARNING ) ; } } }"]}
{"ids": "56197", "code": ["public static X Content Type x Content Type ( Char Sequence content ) {", "int length = content . length ( ) < GUESS HEADER LENGTH ? content . length ( ) : GUESS HEADER LENGTH ;", "if ( length == NUM_ ) {", "return null ; }", "char first = content . char At ( NUM_ ) ;", "if ( first == STR_ ) {", "return X Content Type . JSON ; }", "if ( length > NUM_ && first == Smile Constants . HEADER BYTE 1 && content . char At ( NUM_ ) == Smile Constants . HEADER BYTE 2 && content . char At ( NUM_ ) == Smile Constants . HEADER BYTE 3 ) {", "return X Content Type . SMILE ; }", "if ( length > NUM_ && first == STR_ && content . char At ( NUM_ ) == STR_ && content . char At ( NUM_ ) == STR_ ) {", "return X Content Type . YAML ; }", "for ( int i = NUM_ ; i < length ; i ++ ) {", "char c = content . char At ( i ) ;", "if ( c == STR_ ) {", "return X Content Type . JSON ; }", "if ( Character . is Whitespace ( c ) == false ) {", "break ; } }", "return null ; }"]}
{"ids": "16477", "code": ["@ Request Mapping ( value = STR_ , method = Request Method . DELETE ) public Response Entity < Bookmark > delete Bookmark ( @ Path Variable ( value = STR_ ) String username , @ Path Variable ( value = STR_ ) int bookmark Id ) throws Bookmark Not Found Exception {", "Optional < Bookmark > optional = bookmarks Repository . find By Id And User Username ( bookmark Id , username ) ;", "if ( optional . is Present ( ) ) {", "bookmarks Repository . delete ( optional . get ( ) ) ;", "return new Response Entity < > ( optional . get ( ) , Http Status . OK ) ; }", "else {", "throw new Bookmark Not Found Exception ( STR_ + bookmark Id ) ; } }"]}
{"ids": "1143", "code": ["public static Object load Instance ( Class clazz , Object default Value ) {", "try {", "return clazz . new Instance ( ) ; }", "catch ( Throwable t ) {", "return default Value ; } }"]}
{"ids": "49895", "code": ["public static String to JSON String ( Object value ) {", "final String Writer writer = new String Writer ( ) ;", "try {", "write JSON String ( value , writer ) ;", "return writer . to String ( ) ; }", "catch ( IO Exception e ) {", "throw new Runtime Exception ( e ) ; } }"]}
{"ids": "56671", "code": ["public static final < A > Collection X < A > to Lazy Collection ( final Stream < A > stream ) {", "return Seq Utils . to Lazy Collection ( stream . iterator ( ) ) ; }"]}
{"ids": "16568", "code": ["static Unit value Of ( String name , boolean horizontal ) {", "if ( name . length ( ) == NUM_ ) {", "Unit default Unit = Sizes . get Default Unit ( ) ;", "if ( default Unit != null ) {", "return default Unit ; }", "return horizontal ? DIALOG UNITS X : DIALOG UNITS Y ; }", "else if ( name . equals ( STR_ ) ) {", "return PIXEL ; }", "else if ( name . equals ( STR_ ) ) {", "return horizontal ? DIALOG UNITS X : DIALOG UNITS Y ; }", "else if ( name . equals ( STR_ ) ) {", "return POINT ; }", "else if ( name . equals ( STR_ ) ) {", "return INCH ; }", "else if ( name . equals ( STR_ ) ) {", "return MILLIMETER ; }", "else if ( name . equals ( STR_ ) ) {", "return CENTIMETER ; }", "else {", "throw new Illegal Argument Exception ( STR_ + name + STR_ + STR_ ) ; } }"]}
{"ids": "57975", "code": ["public void check Number Args ( int arg Num ) throws Wrong Number Args Exception {", "if ( ( arg Num < NUM_ ) || ( arg Num > NUM_ ) ) report Wrong Number Args ( ) ; }"]}
